Type: System.String

Method: System.Boolean EqualsHelper(System.String strA, System.String strB)

Disassembly:
	0x032266DC MOV W3, W31
	0x032266E0 B 0x322671C
	0x032266E4 ADRP X21, 0xEFB000
	0x032266E8 LDR X21, [X21 + 0xFD0]
	0x032266EC LDR X0, [X21]
	0x032266F0 LDR W8, [X0 + 0xE0]
	0x032266F4 CBNZ W8, 0x3226700
	0x032266F8 BL 0x1C16DFC
	0x032266FC LDR X0, [X21]
	0x03226700 LDR X8, [X0 + 0xB8]
	0x03226704 LDR X0, [X8]

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {16}
	004 Compare X1, 0
	005 JumpIfEqual {16}
	006 NotImplemented "Instruction LDRSW not yet implemented."
	007 Add X0, X0, 20
	008 Add X1, X1, 20
	009 Move X3, X31
	010 Move X2, X8
	011 ShiftRight X2, 63
	012 And X2, X2, 0x3FFFFFFF
	013 Move X30, [X31+16]
	014 Call SpanHelpers.SequenceEqual, X0, X1, X2
	015 Return X0
	016 Call 0x1C17F20

Method: System.Int32 CompareOrdinalHelper(System.String strA, System.Int32 indexA, System.Int32 countA, System.String strB, System.Int32 indexB, System.Int32 countB)

Disassembly:
	0x03226710 MOVZ W3, 0x1
	0x03226714 MOV X1, X20
	0x03226718 MOV X2, X19
	0x0322671C LDP X5, X4, [X8 + 0x1D8]
	0x03226720 LDP X20, X19, [X31 + 0x20]
	0x03226724 LDP X22, X21, [X31 + 0x10]
	0x03226728 LDR X30, [X31], #0x30
	0x0322672C BR X5
	0x03226730 LDR W8, [X20 + 0x10]
	0x03226734 SUBS W8, W8, W21
	0x03226738 B.LT 0x3226768
	0x0322673C ADD X8, X20, W8, 0x1, SXTW
	0x03226740 ADD X0, X8, 0x14
	0x03226744 ADD X2, X19, 0x14

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {17}
	004 Compare X3, 0
	005 JumpIfEqual {17}
	006 Add X8, X0, W1
	007 Add X9, X3, W4
	008 Add X0, X8, 20
	009 Add X8, X9, 20
	010 Move W1, W2
	011 Move X2, X8
	012 Move W3, W5
	013 Move X4, X31
	014 Move X30, [X31+16]
	015 Call SpanHelpers.SequenceCompareTo, X0, X1, X2, X3
	016 Return X0
	017 Call 0x1C17F20

Method: System.Int32 CompareOrdinalHelper(System.String strA, System.String strB)

Disassembly:
	0x03226748 MOV W1, W21
	0x0322674C MOV W3, W21
	0x03226750 MOV X4, X31
	0x03226754 BL 0x33911D8
	0x03226758 B 0x32267A8
	0x0322675C LDR W8, [X20 + 0x10]
	0x03226760 SUBS W22, W8, W21
	0x03226764 B.GE 0x3226770
	0x03226768 MOV W0, W31
	0x0322676C B 0x3226660
	0x03226770 ADRP X8, 0xEFB000
	0x03226774 LDR X8, [X8 + 0xFD0]
	0x03226778 LDR X0, [X8]
	0x0322677C LDR W8, [X0 + 0xE0]
	0x03226780 CBNZ W8, 0x3226788
	0x03226784 BL 0x1C16DFC
	0x03226788 MOV X0, X20
	0x0322678C MOV W1, W22
	0x03226790 MOV W2, W21
	0x03226794 MOV X3, X19
	0x03226798 MOV W4, W31
	0x0322679C MOV W5, W21
	0x032267A0 MOV X6, X31
	0x032267A4 BL 0x3305238
	0x032267A8 CMP W0, 0x0
	0x032267AC CSET W0, EQ
	0x032267B0 B 0x3226660
	0x032267B4 ADRP X0, 0xED2000
	0x032267B8 LDR X0, [X0 + 0x528]
	0x032267BC BL 0x1C16D08
	0x032267C0 BL 0x1C16F10
	0x032267C4 MOV X19, X0
	0x032267C8 ADRP X0, 0xED7000
	0x032267CC LDR X0, [X0 + 0xEC8]
	0x032267D0 BL 0x1C16D08
	0x032267D4 MOV X1, X0
	0x032267D8 MOV X0, X19
	0x032267DC MOV X2, X31
	0x032267E0 BL 0x330E100
	0x032267E4 ADRP X0, 0xEFC000
	0x032267E8 LDR X0, [X0 + 0x50]
	0x032267EC BL 0x1C16D08
	0x032267F0 MOV X1, X0
	0x032267F4 MOV X0, X19
	0x032267F8 BL 0x1C16DEC
	0x032267FC BL 0x1C16F20
	0x03226800 ADRP X0, 0xED5000
	0x03226804 LDR X0, [X0 + 0x578]
	0x03226808 BL 0x1C16D08
	0x0322680C BL 0x1C16F10
	0x03226810 MOV X19, X0
	0x03226814 ADRP X0, 0xEFB000
	0x03226818 LDR X0, [X0 + 0xFD8]
	0x0322681C BL 0x1C16D08
	0x03226820 MOV X20, X0
	0x03226824 ADRP X0, 0xEFB000
	0x03226828 LDR X0, [X0 + 0xFE0]
	0x0322682C BL 0x1C16D08
	0x03226830 MOV X2, X0
	0x03226834 MOV X0, X19
	0x03226838 MOV X1, X20
	0x0322683C MOV X3, X31
	0x03226840 BL 0x330E16C
	0x03226844 B 0x32267E4
	0x03226848 STP X30, X21, [X31 - 0x20]!
	0x0322684C STP X20, X19, [X31 + 0x10]
	0x03226850 LDRSW X8, [X0 + 0x10]
	0x03226854 CBZ W8, 0x3226888
	0x03226858 SUB W21, W8, 0x1
	0x0322685C MOV X20, X0
	0x03226860 MOV W19, W1
	0x03226864 CMP X21, X8
	0x03226868 B.LT 0x3226874
	0x0322686C MOV X0, X31
	0x03226870 BL 0x339D674
	0x03226874 ADD X8, X20, W21, 0x1, SXTW
	0x03226878 LDRH W8, [X8 + 0x14]
	0x0322687C CMP W8, W19, UXTH
	0x03226880 CSET W0, EQ
	0x03226884 B 0x322688C
	0x03226888 MOV W0, W31
	0x0322688C LDP X20, X19, [X31 + 0x10]
	0x03226890 LDP X30, X21, [X31], #0x20
	0x03226894 RET
	0x03226898 STP X30, X21, [X31 - 0x20]!
	0x0322689C STP X20, X19, [X31 + 0x10]
	0x032268A0 ADRP X21, 0x11B6000
	0x032268A4 LDRB W8, [X21 + 0x35F]
	0x032268A8 MOV X20, X1
	0x032268AC MOV X19, X0
	0x032268B0 TBNZ X8, 0x0, 0x32268C8
	0x032268B4 ADRP X0, 0xECF000
	0x032268B8 LDR X0, [X0 + 0x278]
	0x032268BC BL 0x1C16CF4
	0x032268C0 MOVZ W8, 0x1
	0x032268C4 STRB W8, [X21 + 0x35F]
	0x032268C8 CMP X19, X20
	0x032268CC B.EQ 0x3226928
	0x032268D0 CBZ X20, 0x3226920
	0x032268D4 ADRP X8, 0xECF000
	0x032268D8 LDR X8, [X8 + 0x278]
	0x032268DC LDR X9, [X20]
	0x032268E0 LDR X8, [X8]
	0x032268E4 CMP X9, X8
	0x032268E8 CSEL X8, X20, X31, EQ
	0x032268EC B.NE 0x3226920
	0x032268F0 CBZ X8, 0x3226938
	0x032268F4 LDRSW X9, [X19 + 0x10]
	0x032268F8 LDR W10, [X8 + 0x10]
	0x032268FC CMP W9, W10
	0x03226900 B.NE 0x3226920

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11B7000
	007 Move W8, [X21+855]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xECE000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+855], W8
	019 Compare X20, 0
	020 JumpIfEqual {109}
	021 Compare X19, 0
	022 JumpIfEqual {109}
	023 Move X8, 0xECE000
	024 Move X8, [X8+1448]
	025 Move W21, [X20+16]
	026 Move W22, [X19+16]
	027 Move X0, [X8]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move W0, W21
	033 Move W1, W22
	034 Move X2, X31
	035 Call Math.Min, X0, X1
	036 Move X8, X20
	037 Move X9, X19
	038 NotImplemented "Instruction LDRH not yet implemented."
	039 NotImplemented "Instruction LDRH not yet implemented."
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Subtract X11, X8, 2
	042 Subtract X10, X9, 2
	043 Subtract W12, W0, 2
	044 Add X8, X11, 4
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Add X9, X10, 4
	047 Move X12, X31
	048 Add W13, W0, 10
	049 Subtract X14, X11, 20
	050 Subtract X15, X10, 20
	051 Add X16, X14, X12
	052 Add X17, X15, X12
	053 Move X0, [X16+24]
	054 Move X1, [X17+24]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X16, [X16+32]
	057 Move X17, [X17+32]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Add X8, X14, X12
	060 Add X9, X15, X12
	061 Move X16, [X8+40]
	062 Move X17, [X9+40]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Subtract W13, W13, 12
	065 Add X8, X8, 48
	066 Add X9, X9, 48
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Add X12, X12, 24
	069 Add X8, X11, X12
	070 Add X9, X10, X12
	071 Add X8, X8, 4
	072 Add X9, X9, 4
	073 Subtract W12, W13, 12
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Add W12, W12, 2
	076 Move W10, [X8]
	077 Move W11, [X9]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Subtract W12, W12, 2
	080 Add X8, X8, 4
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Add X9, X9, 4
	083 Move W8, [X20+16]
	084 Move W9, [X19+16]
	085 Add X8, X11, X12
	086 Add X9, X10, X12
	087 Add X8, X8, 12
	088 Add X9, X9, 12
	089 Add X8, X8, 8
	090 Add X9, X9, 8
	091 Move W10, [X8]
	092 Move W11, [X9]
	093 NotImplemented "Instruction CMP not yet implemented."
	094 NotImplemented "Instruction LDRH not yet implemented."
	095 NotImplemented "Instruction LDRH not yet implemented."
	096 And W10, W10, 0xFFFF
	097 Subtract W0, W10, W11
	098 Add X8, X8, 2
	099 Add X9, X9, 2
	100 NotImplemented "Instruction LDRH not yet implemented."
	101 NotImplemented "Instruction LDRH not yet implemented."
	102 Subtract W0, W8, W9
	103 Move X20, [X31+32]
	104 Move X19, [X31+40]
	105 Move X22, [X31+16]
	106 Move X21, [X31+24]
	107 Move X30, [X31+48]
	108 Return X0
	109 Call 0x1C17F20

Method: System.Int32 Compare(System.String strA, System.String strB, System.Boolean ignoreCase)

Disassembly:
	0x03226904 ADD X0, X19, 0x14
	0x03226908 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 And W2, W2, 1

Method: System.Int32 Compare(System.String strA, System.String strB, System.StringComparison comparisonType)

Disassembly:
	0x0322690C ADD X1, X8, 0x14
	0x03226910 UBFM X2, X9, 0x3F, 0x3E
	0x03226914 MOV X3, X31
	0x03226918 LDP X30, X21, [X31], #0x20
	0x0322691C B 0x3391068
	0x03226920 MOV W0, W31
	0x03226924 B 0x322692C
	0x03226928 MOVZ W0, 0x1
	0x0322692C LDP X20, X19, [X31 + 0x10]
	0x03226930 LDP X30, X21, [X31], #0x20
	0x03226934 RET
	0x03226938 BL 0x1C16F20
	0x0322693C CMP X0, X1
	0x03226940 B.EQ 0x3226974
	0x03226944 CBZ X1, 0x322696C
	0x03226948 LDRSW X8, [X0 + 0x10]
	0x0322694C LDR W9, [X1 + 0x10]
	0x03226950 CMP W8, W9
	0x03226954 B.NE 0x322696C
	0x03226958 ADD X0, X0, 0x14
	0x0322695C ADD X1, X1, 0x14
	0x03226960 UBFM X2, X8, 0x3F, 0x3E
	0x03226964 MOV X3, X31
	0x03226968 B 0x3391068
	0x0322696C MOV W0, W31
	0x03226970 RET
	0x03226974 MOVZ W0, 0x1
	0x03226978 RET
	0x0322697C STR X30, [X31 - 0x30]!
	0x03226980 STP X22, X21, [X31 + 0x10]
	0x03226984 STP X20, X19, [X31 + 0x20]
	0x03226988 ADRP X22, 0x11B6000
	0x0322698C LDRB W8, [X22 + 0x360]
	0x03226990 MOV W21, W2
	0x03226994 MOV X19, X1
	0x03226998 MOV X20, X0
	0x0322699C TBNZ X8, 0x0, 0x32269C0
	0x032269A0 ADRP X0, 0xEFB000
	0x032269A4 LDR X0, [X0 + 0xFD0]
	0x032269A8 BL 0x1C16CF4
	0x032269AC ADRP X0, 0xECF000
	0x032269B0 LDR X0, [X0 + 0xC48]
	0x032269B4 BL 0x1C16CF4
	0x032269B8 MOVZ W8, 0x1
	0x032269BC STRB W8, [X22 + 0x360]
	0x032269C0 CMP X20, X19
	0x032269C4 B.EQ 0x3226A28
	0x032269C8 CBZ X19, 0x3226A48
	0x032269CC CMP W21, 0x5
	0x032269D0 B.HI 0x3226BB8
	0x032269D4 ADRP X9, 0xFFFFFFFFFD970000
	0x032269D8 MOV W8, W21
	0x032269DC ADD X9, X9, 0x45B
	0x032269E0 ADR X10, 0x10
	0x032269E4 LDRB W11, [X9, X8, LSL]
	0x032269E8 ADD X10, X10, X11, 0x2, LSL
	0x032269EC BR X10
	0x032269F0 ADRP X8, 0xECF000
	0x032269F4 LDR X8, [X8 + 0xC48]
	0x032269F8 LDR X0, [X8]
	0x032269FC LDR W8, [X0 + 0xE0]
	0x03226A00 CBNZ W8, 0x3226A08
	0x03226A04 BL 0x1C16DFC
	0x03226A08 MOV X0, X31
	0x03226A0C BL 0x33387A0
	0x03226A10 CBZ X0, 0x3226BB4
	0x03226A14 LDR X8, [X0]
	0x03226A18 LDP X9, X1, [X8 + 0x1F8]
	0x03226A1C BLR X9
	0x03226A20 CBNZ X0, 0x3226AC4
	0x03226A24 B 0x3226BB4
	0x03226A28 CMP W21, 0x6
	0x03226A2C B.CC 0x3226A40
	0x03226A30 MOVZ W0, 0x31
	0x03226A34 MOVZ W1, 0x2F
	0x03226A38 MOV X2, X31
	0x03226A3C BL 0x339DD28
	0x03226A40 MOVZ W0, 0x1
	0x03226A44 B 0x3226BA4
	0x03226A48 CMP W21, 0x6
	0x03226A4C B.CC 0x3226BA0
	0x03226A50 MOVZ W0, 0x31
	0x03226A54 MOVZ W1, 0x2F
	0x03226A58 MOV X2, X31
	0x03226A5C BL 0x339DD28
	0x03226A60 B 0x3226BA0
	0x03226A64 ADRP X8, 0xECF000
	0x03226A68 LDR X8, [X8 + 0xC48]
	0x03226A6C LDR X0, [X8]
	0x03226A70 LDR W8, [X0 + 0xE0]
	0x03226A74 CBNZ W8, 0x3226A7C
	0x03226A78 BL 0x1C16DFC
	0x03226A7C MOV X0, X31
	0x03226A80 BL 0x33387A0
	0x03226A84 CBZ X0, 0x3226BB4
	0x03226A88 LDR X8, [X0]
	0x03226A8C LDP X9, X1, [X8 + 0x1F8]
	0x03226A90 BLR X9
	0x03226A94 CBNZ X0, 0x3226B00
	0x03226A98 B 0x3226BB4
	0x03226A9C ADRP X21, 0xEFB000
	0x03226AA0 LDR X21, [X21 + 0xFD0]
	0x03226AA4 LDR X0, [X21]
	0x03226AA8 LDR W8, [X0 + 0xE0]
	0x03226AAC CBNZ W8, 0x3226AB8
	0x03226AB0 BL 0x1C16DFC
	0x03226AB4 LDR X0, [X21]
	0x03226AB8 LDR X8, [X0 + 0xB8]
	0x03226ABC LDR X0, [X8]
	0x03226AC0 CBZ X0, 0x3226BB4
	0x03226AC4 LDR X8, [X0]
	0x03226AC8 MOV X1, X20
	0x03226ACC MOV X2, X19
	0x03226AD0 MOV W3, W31
	0x03226AD4 B 0x3226B10
	0x03226AD8 ADRP X21, 0xEFB000
	0x03226ADC LDR X21, [X21 + 0xFD0]
	0x03226AE0 LDR X0, [X21]
	0x03226AE4 LDR W8, [X0 + 0xE0]
	0x03226AE8 CBNZ W8, 0x3226AF4
	0x03226AEC BL 0x1C16DFC
	0x03226AF0 LDR X0, [X21]
	0x03226AF4 LDR X8, [X0 + 0xB8]
	0x03226AF8 LDR X0, [X8]
	0x03226AFC CBZ X0, 0x3226BB4
	0x03226B00 LDR X8, [X0]
	0x03226B04 MOVZ W3, 0x1
	0x03226B08 MOV X1, X20
	0x03226B0C MOV X2, X19
	0x03226B10 LDP X9, X4, [X8 + 0x1A8]
	0x03226B14 BLR X9
	0x03226B18 CMP W0, 0x0
	0x03226B1C CSET W0, EQ
	0x03226B20 B 0x3226BA4
	0x03226B24 LDRSW X8, [X20 + 0x10]
	0x03226B28 LDR W9, [X19 + 0x10]
	0x03226B2C CMP W8, W9
	0x03226B30 B.NE 0x3226BA0
	0x03226B34 ADD X0, X20, 0x14
	0x03226B38 ADD X1, X19, 0x14
	0x03226B3C LDP X20, X19, [X31 + 0x20]
	0x03226B40 LDP X22, X21, [X31 + 0x10]
	0x03226B44 UBFM X2, X8, 0x3F, 0x3E
	0x03226B48 MOV X3, X31
	0x03226B4C LDR X30, [X31], #0x30
	0x03226B50 B 0x3391068
	0x03226B54 LDR W21, [X20 + 0x10]
	0x03226B58 LDR W8, [X19 + 0x10]
	0x03226B5C CMP W21, W8
	0x03226B60 B.NE 0x3226BA0
	0x03226B64 ADRP X8, 0xEFB000
	0x03226B68 LDR X8, [X8 + 0xFD0]
	0x03226B6C LDR X0, [X8]
	0x03226B70 LDR W8, [X0 + 0xE0]
	0x03226B74 CBNZ W8, 0x3226B7C
	0x03226B78 BL 0x1C16DFC
	0x03226B7C MOV X0, X20
	0x03226B80 MOV W1, W31
	0x03226B84 MOV W2, W21
	0x03226B88 MOV X3, X19
	0x03226B8C MOV W4, W31
	0x03226B90 MOV W5, W21
	0x03226B94 MOV X6, X31
	0x03226B98 BL 0x3305238
	0x03226B9C B 0x3226B18
	0x03226BA0 MOV W0, W31
	0x03226BA4 LDP X20, X19, [X31 + 0x20]
	0x03226BA8 LDP X22, X21, [X31 + 0x10]
	0x03226BAC LDR X30, [X31], #0x30
	0x03226BB0 RET
	0x03226BB4 BL 0x1C16F20
	0x03226BB8 ADRP X0, 0xED5000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11B7000
	007 Move W8, [X22+856]
	008 Move W21, W2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xEFC000
	016 Move X0, [X0+4048]
	017 Call 0x1C17CF4
	018 Move X0, 0xED0000
	019 Move X0, [X0+3144]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+856], W8
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Compare X20, 0
	025 JumpIfEqual {59}
	026 Compare X19, 0
	027 JumpIfEqual {67}
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X9, -40431616
	030 Move W8, W21
	031 Add X9, X9, 1097
	032 NotImplemented "Instruction ADR not yet implemented."
	033 Move W11, [X9]
	034 Add X10, X10, X11
	035 CallNoReturn X10
	036 Move X8, 0xED0000
	037 Move X8, [X8+3144]
	038 Move X0, [X8]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X31
	044 Call CultureInfo.get_CurrentCulture
	045 Compare X0, 0
	046 JumpIfEqual {171}
	047 Move X8, [X0]
	048 Move X9, [X8+504]
	049 Move X1, [X8+512]
	050 NotImplemented "Instruction BLR not yet implemented."
	051 Compare X0, 0
	052 JumpIfNotEqual {108}
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move W0, 49
	055 Move W1, 47
	056 Move X2, X31
	057 Call ThrowHelper.ThrowArgumentException, X0, X1
	058 Move W0, W31
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move W0, 49
	061 Move W1, 47
	062 Move X2, X31
	063 Call ThrowHelper.ThrowArgumentException, X0, X1
	064 Move TEMP, 0
	065 Not TEMP
	066 Move W0, TEMP
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move W0, 49
	069 Move W1, 47
	070 Move X2, X31
	071 Call ThrowHelper.ThrowArgumentException, X0, X1
	072 Move W0, 1
	073 Move X20, [X31+32]
	074 Move X19, [X31+40]
	075 Move X22, [X31+16]
	076 Move X21, [X31+24]
	077 Move X30, [X31+48]
	078 Return X0
	079 Move X8, 0xED0000
	080 Move X8, [X8+3144]
	081 Move X0, [X8]
	082 Move W8, [X0+224]
	083 Compare W8, 0
	084 JumpIfNotEqual {86}
	085 Call 0x1C17DFC
	086 Move X0, X31
	087 Call CultureInfo.get_CurrentCulture
	088 Compare X0, 0
	089 JumpIfEqual {171}
	090 Move X8, [X0]
	091 Move X9, [X8+504]
	092 Move X1, [X8+512]
	093 NotImplemented "Instruction BLR not yet implemented."
	094 Compare X0, 0
	095 JumpIfNotEqual {124}
	096 Move X21, 0xEFC000
	097 Move X21, [X21+4048]
	098 Move X0, [X21]
	099 Move W8, [X0+224]
	100 Compare W8, 0
	101 JumpIfNotEqual {104}
	102 Call 0x1C17DFC
	103 Move X0, [X21]
	104 Move X8, [X0+184]
	105 Move X0, [X8]
	106 Compare X0, 0
	107 JumpIfEqual {171}
	108 Move X8, [X0]
	109 Move X1, X20
	110 Move X2, X19
	111 Move W3, W31
	112 Move X21, 0xEFC000
	113 Move X21, [X21+4048]
	114 Move X0, [X21]
	115 Move W8, [X0+224]
	116 Compare W8, 0
	117 JumpIfNotEqual {120}
	118 Call 0x1C17DFC
	119 Move X0, [X21]
	120 Move X8, [X0+184]
	121 Move X0, [X8]
	122 Compare X0, 0
	123 JumpIfEqual {171}
	124 Move X8, [X0]
	125 Move W3, 1
	126 Move X1, X20
	127 Move X2, X19
	128 Move X5, [X8+424]
	129 Move X4, [X8+432]
	130 Move X20, [X31+32]
	131 Move X19, [X31+40]
	132 Move X22, [X31+16]
	133 Move X21, [X31+24]
	134 Move X30, [X31+48]
	135 CallNoReturn X5
	136 NotImplemented "Instruction LDRH not yet implemented."
	137 NotImplemented "Instruction LDRH not yet implemented."
	138 Subtract W0, W8, W9
	139 Move X0, X20
	140 Move X1, X19
	141 Move X20, [X31+32]
	142 Move X19, [X31+40]
	143 Move X22, [X31+16]
	144 Move X21, [X31+24]
	145 Move X30, [X31+48]
	146 Call String.CompareOrdinalHelper, X0, X1
	147 Return X0
	148 Move X8, 0xEFC000
	149 Move X8, [X8+4048]
	150 Move W22, [X20+16]
	151 Move W21, [X19+16]
	152 Move X0, [X8]
	153 Move W8, [X0+224]
	154 Compare W8, 0
	155 JumpIfNotEqual {157}
	156 Call 0x1C17DFC
	157 Move X0, X20
	158 Move W2, W22
	159 Move X3, X19
	160 Move W5, W21
	161 Move X20, [X31+32]
	162 Move X19, [X31+40]
	163 Move X22, [X31+16]
	164 Move X21, [X31+24]
	165 Move W1, W31
	166 Move W4, W31
	167 Move X6, X31
	168 Move X30, [X31+48]
	169 Call CompareInfo.CompareOrdinalIgnoreCase, X0, X1, X2, X3, X4, X5
	170 Return X0
	171 Call 0x1C17F20
	172 Move X0, 0xED6000
	173 Move X0, [X0+1400]
	174 Call 0x1C17D08
	175 Call 0x1C17F10
	176 Move X19, X0
	177 Move X0, 0xEFC000
	178 Move X0, [X0+4056]
	179 Call 0x1C17D08
	180 Move X20, X0
	181 Move X0, 0xEFC000
	182 Move X0, [X0+4064]
	183 Call 0x1C17D08
	184 Move X2, X0
	185 Move X0, X19
	186 Move X1, X20
	187 Move X3, X31
	188 Call ArgumentException..ctor, X0, X1, X2
	189 Move X0, 0xEFC000
	190 Move X0, [X0+4072]
	191 Call 0x1C17D08
	192 Move X1, X0
	193 Move X0, X19
	194 Call 0x1C17DEC

Method: System.Int32 Compare(System.String strA, System.String strB, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options)

Disassembly:
	0x03226BD8 MOV X20, X0
	0x03226BDC ADRP X0, 0xEFB000
	0x03226BE0 LDR X0, [X0 + 0xFE0]
	0x03226BE4 BL 0x1C16D08
	0x03226BE8 MOV X2, X0
	0x03226BEC MOV X0, X19
	0x03226BF0 MOV X1, X20
	0x03226BF4 MOV X3, X31
	0x03226BF8 BL 0x330E16C
	0x03226BFC ADRP X0, 0xEFC000
	0x03226C00 LDR X0, [X0 + 0x58]
	0x03226C04 BL 0x1C16D08
	0x03226C08 MOV X1, X0
	0x03226C0C MOV X0, X19
	0x03226C10 BL 0x1C16DEC
	0x03226C14 CMP X0, X1
	0x03226C18 B.EQ 0x3226C4C
	0x03226C1C MOV W8, W31
	0x03226C20 CBZ X0, 0x3226C58
	0x03226C24 CBZ X1, 0x3226C58
	0x03226C28 LDRSW X8, [X0 + 0x10]
	0x03226C2C LDR W9, [X1 + 0x10]
	0x03226C30 CMP W8, W9
	0x03226C34 B.NE 0x3226C54
	0x03226C38 ADD X0, X0, 0x14
	0x03226C3C ADD X1, X1, 0x14
	0x03226C40 UBFM X2, X8, 0x3F, 0x3E
	0x03226C44 MOV X3, X31
	0x03226C48 B 0x3391068
	0x03226C4C MOVZ W8, 0x1
	0x03226C50 B 0x3226C58
	0x03226C54 MOV W8, W31
	0x03226C58 MOV W0, W8
	0x03226C5C RET
	0x03226C60 STR X30, [X31 - 0x30]!
	0x03226C64 STP X22, X21, [X31 + 0x10]
	0x03226C68 STP X20, X19, [X31 + 0x20]
	0x03226C6C ADRP X22, 0x11B6000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X2, 0
	006 JumpIfEqual {28}
	007 Move X8, [X2]
	008 Move X20, X1
	009 Move X21, X0
	010 Move X0, X2
	011 Move X9, [X8+504]
	012 Move X1, [X8+512]
	013 Move W19, W3
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Compare X0, 0
	016 JumpIfEqual {46}
	017 Move X8, [X0]
	018 Move X2, X20
	019 Move W3, W19
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X5, [X8+424]
	023 Move X4, [X8+432]
	024 Move X1, X21
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 CallNoReturn X5
	028 Move X0, 0xED3000
	029 Move X0, [X0+1320]
	030 Call 0x1C17D08
	031 Call 0x1C17F10
	032 Move X19, X0
	033 Move X0, 0xEFC000
	034 Move X0, [X0+4080]
	035 Call 0x1C17D08
	036 Move X1, X0
	037 Move X0, X19
	038 Move X2, X31
	039 Call ArgumentNullException..ctor, X0, X1
	040 Move X0, 0xEFC000
	041 Move X0, [X0+4088]
	042 Call 0x1C17D08
	043 Move X1, X0
	044 Move X0, X19
	045 Call 0x1C17DEC
	046 Call 0x1C17F20

Method: System.Int32 Compare(System.String strA, System.String strB, System.Boolean ignoreCase, System.Globalization.CultureInfo culture)

Disassembly:
	0x03226C70 LDRB W8, [X22 + 0x361]
	0x03226C74 MOV W21, W2
	0x03226C78 MOV X19, X1
	0x03226C7C MOV X20, X0

ISIL:
	001 Move X8, X3
	002 And W3, W2, 1
	003 Move X2, X8
	004 Call String.Compare, X0, X1, X2, X3
	005 Return X0

Method: System.Int32 Compare(System.String strA, System.Int32 indexA, System.String strB, System.Int32 indexB, System.Int32 length)

Disassembly:
	0x03226C80 TBNZ X8, 0x0, 0x3226CA4
	0x03226C84 ADRP X0, 0xEFB000

ISIL:
	001 Move W5, W31

Method: System.Int32 Compare(System.String strA, System.Int32 indexA, System.String strB, System.Int32 indexB, System.Int32 length, System.Boolean ignoreCase)

Disassembly:
	0x03226C88 LDR X0, [X0 + 0xFD0]
	0x03226C8C BL 0x1C16CF4
	0x03226C90 ADRP X0, 0xECF000
	0x03226C94 LDR X0, [X0 + 0xC48]
	0x03226C98 BL 0x1C16CF4
	0x03226C9C MOVZ W8, 0x1
	0x03226CA0 STRB W8, [X22 + 0x361]
	0x03226CA4 CMP X20, X19
	0x03226CA8 B.EQ 0x3226D10
	0x03226CAC CBZ X20, 0x3226D30
	0x03226CB0 CBZ X19, 0x3226D30
	0x03226CB4 CMP W21, 0x5
	0x03226CB8 B.HI 0x3226E9C
	0x03226CBC ADRP X9, 0xFFFFFFFFFD970000
	0x03226CC0 MOV W8, W21
	0x03226CC4 ADD X9, X9, 0x461
	0x03226CC8 ADR X10, 0x10
	0x03226CCC LDRB W11, [X9, X8, LSL]
	0x03226CD0 ADD X10, X10, X11, 0x2, LSL
	0x03226CD4 BR X10
	0x03226CD8 ADRP X8, 0xECF000
	0x03226CDC LDR X8, [X8 + 0xC48]
	0x03226CE0 LDR X0, [X8]
	0x03226CE4 LDR W8, [X0 + 0xE0]
	0x03226CE8 CBNZ W8, 0x3226CF0
	0x03226CEC BL 0x1C16DFC
	0x03226CF0 MOV X0, X31
	0x03226CF4 BL 0x33387A0
	0x03226CF8 CBZ X0, 0x3226E98
	0x03226CFC LDR X8, [X0]
	0x03226D00 LDP X9, X1, [X8 + 0x1F8]
	0x03226D04 BLR X9
	0x03226D08 CBNZ X0, 0x3226DB0
	0x03226D0C B 0x3226E98
	0x03226D10 CMP W21, 0x6
	0x03226D14 B.CC 0x3226D28
	0x03226D18 MOVZ W0, 0x31
	0x03226D1C MOVZ W1, 0x2F
	0x03226D20 MOV X2, X31
	0x03226D24 BL 0x339DD28
	0x03226D28 MOVZ W0, 0x1
	0x03226D2C B 0x3226E0C
	0x03226D30 CMP W21, 0x6
	0x03226D34 B.CC 0x3226D48
	0x03226D38 MOVZ W0, 0x31
	0x03226D3C MOVZ W1, 0x2F
	0x03226D40 MOV X2, X31
	0x03226D44 BL 0x339DD28
	0x03226D48 MOV W0, W31
	0x03226D4C B 0x3226E0C
	0x03226D50 ADRP X8, 0xECF000
	0x03226D54 LDR X8, [X8 + 0xC48]
	0x03226D58 LDR X0, [X8]
	0x03226D5C LDR W8, [X0 + 0xE0]
	0x03226D60 CBNZ W8, 0x3226D68
	0x03226D64 BL 0x1C16DFC
	0x03226D68 MOV X0, X31
	0x03226D6C BL 0x33387A0
	0x03226D70 CBZ X0, 0x3226E98
	0x03226D74 LDR X8, [X0]
	0x03226D78 LDP X9, X1, [X8 + 0x1F8]
	0x03226D7C BLR X9
	0x03226D80 CBNZ X0, 0x3226DEC
	0x03226D84 B 0x3226E98
	0x03226D88 ADRP X21, 0xEFB000
	0x03226D8C LDR X21, [X21 + 0xFD0]
	0x03226D90 LDR X0, [X21]
	0x03226D94 LDR W8, [X0 + 0xE0]
	0x03226D98 CBNZ W8, 0x3226DA4
	0x03226D9C BL 0x1C16DFC
	0x03226DA0 LDR X0, [X21]
	0x03226DA4 LDR X8, [X0 + 0xB8]
	0x03226DA8 LDR X0, [X8]
	0x03226DAC CBZ X0, 0x3226E98
	0x03226DB0 LDR X8, [X0]
	0x03226DB4 MOV X1, X20
	0x03226DB8 MOV X2, X19
	0x03226DBC MOV W3, W31
	0x03226DC0 B 0x3226DFC
	0x03226DC4 ADRP X21, 0xEFB000

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X25, 0x11B7000
	013 Move W8, [X25+857]
	014 Move W23, W5
	015 Move W21, W4
	016 Move W19, W3
	017 Move X20, X2
	018 Move W22, W1
	019 Move X24, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {32}
	024 Move X0, 0xED0000
	025 Move X0, [X0+3144]
	026 Call 0x1C17CF4
	027 Move X0, 0xECE000
	028 Move X0, [X0+1448]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X25+857], W8
	032 Move X26, 0xECE000
	033 Move X26, [X26+1448]
	034 Move W25, W21
	035 Compare X24, 0
	036 JumpIfEqual {48}
	037 Move X0, [X26]
	038 Move W25, [X24+16]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Subtract W1, W25, W22
	044 Move W0, W21
	045 Move X2, X31
	046 Call Math.Min, X0, X1
	047 Move W25, W0
	048 Move X27, 0xED0000
	049 Move X27, [X27+3144]
	050 Compare X20, 0
	051 JumpIfEqual {63}
	052 Move X0, [X26]
	053 Move W26, [X20+16]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Subtract W1, W26, W19
	059 Move W0, W21
	060 Move X2, X31
	061 Call Math.Min, X0, X1
	062 Move W21, W0
	063 Move X0, [X27]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move X0, X31
	069 Call CultureInfo.get_CurrentCulture
	070 Compare X0, 0
	071 JumpIfEqual {102}
	072 Move X8, [X0]
	073 Move X9, [X8+504]
	074 Move X1, [X8+512]
	075 NotImplemented "Instruction BLR not yet implemented."
	076 Compare X0, 0
	077 JumpIfEqual {102}
	078 Move X8, [X0]
	079 And W7, W23, 1
	080 Move X1, X24
	081 Move W2, W22
	082 Move X9, [X8+440]
	083 Move X8, [X8+448]
	084 Move W3, W25
	085 Move X4, X20
	086 Move W5, W19
	087 Move W6, W21
	088 Move [X31], X8
	089 NotImplemented "Instruction BLR not yet implemented."
	090 Move X20, [X31+80]
	091 Move X19, [X31+88]
	092 Move X22, [X31+64]
	093 Move X21, [X31+72]
	094 Move X24, [X31+48]
	095 Move X23, [X31+56]
	096 Move X26, [X31+32]
	097 Move X25, [X31+40]
	098 Move X30, [X31+16]
	099 Move X27, [X31+24]
	100 Add X31, X31, 96
	101 Return X0
	102 Call 0x1C17F20

Method: System.Int32 Compare(System.String strA, System.Int32 indexA, System.String strB, System.Int32 indexB, System.Int32 length, System.StringComparison comparisonType)

Disassembly:
	0x03226DC8 LDR X21, [X21 + 0xFD0]
	0x03226DCC LDR X0, [X21]
	0x03226DD0 LDR W8, [X0 + 0xE0]
	0x03226DD4 CBNZ W8, 0x3226DE0
	0x03226DD8 BL 0x1C16DFC
	0x03226DDC LDR X0, [X21]
	0x03226DE0 LDR X8, [X0 + 0xB8]
	0x03226DE4 LDR X0, [X8]
	0x03226DE8 CBZ X0, 0x3226E98
	0x03226DEC LDR X8, [X0]
	0x03226DF0 MOVZ W3, 0x1
	0x03226DF4 MOV X1, X20
	0x03226DF8 MOV X2, X19
	0x03226DFC LDP X9, X4, [X8 + 0x1A8]
	0x03226E00 BLR X9
	0x03226E04 CMP W0, 0x0
	0x03226E08 CSET W0, EQ
	0x03226E0C LDP X20, X19, [X31 + 0x20]
	0x03226E10 LDP X22, X21, [X31 + 0x10]
	0x03226E14 LDR X30, [X31], #0x30
	0x03226E18 RET
	0x03226E1C LDRSW X8, [X20 + 0x10]
	0x03226E20 LDR W9, [X19 + 0x10]
	0x03226E24 CMP W8, W9
	0x03226E28 B.NE 0x3226D48
	0x03226E2C ADD X0, X20, 0x14
	0x03226E30 ADD X1, X19, 0x14
	0x03226E34 LDP X20, X19, [X31 + 0x20]
	0x03226E38 LDP X22, X21, [X31 + 0x10]
	0x03226E3C UBFM X2, X8, 0x3F, 0x3E
	0x03226E40 MOV X3, X31
	0x03226E44 LDR X30, [X31], #0x30
	0x03226E48 B 0x3391068
	0x03226E4C LDR W21, [X20 + 0x10]
	0x03226E50 LDR W8, [X19 + 0x10]
	0x03226E54 CMP W21, W8
	0x03226E58 B.NE 0x3226D48
	0x03226E5C ADRP X8, 0xEFB000
	0x03226E60 LDR X8, [X8 + 0xFD0]
	0x03226E64 LDR X0, [X8]
	0x03226E68 LDR W8, [X0 + 0xE0]
	0x03226E6C CBNZ W8, 0x3226E74
	0x03226E70 BL 0x1C16DFC
	0x03226E74 MOV X0, X20
	0x03226E78 MOV W1, W31
	0x03226E7C MOV W2, W21
	0x03226E80 MOV X3, X19
	0x03226E84 MOV W4, W31
	0x03226E88 MOV W5, W21
	0x03226E8C MOV X6, X31
	0x03226E90 BL 0x3305238
	0x03226E94 B 0x3226E04
	0x03226E98 BL 0x1C16F20
	0x03226E9C ADRP X0, 0xED5000
	0x03226EA0 LDR X0, [X0 + 0x578]
	0x03226EA4 BL 0x1C16D08
	0x03226EA8 BL 0x1C16F10
	0x03226EAC MOV X19, X0
	0x03226EB0 ADRP X0, 0xEFB000
	0x03226EB4 LDR X0, [X0 + 0xFD8]
	0x03226EB8 BL 0x1C16D08
	0x03226EBC MOV X20, X0
	0x03226EC0 ADRP X0, 0xEFB000
	0x03226EC4 LDR X0, [X0 + 0xFE0]
	0x03226EC8 BL 0x1C16D08
	0x03226ECC MOV X2, X0
	0x03226ED0 MOV X0, X19
	0x03226ED4 MOV X1, X20
	0x03226ED8 MOV X3, X31
	0x03226EDC BL 0x330E16C
	0x03226EE0 ADRP X0, 0xEFC000
	0x03226EE4 LDR X0, [X0 + 0x60]
	0x03226EE8 BL 0x1C16D08
	0x03226EEC MOV X1, X0
	0x03226EF0 MOV X0, X19
	0x03226EF4 BL 0x1C16DEC
	0x03226EF8 STR X30, [X31 - 0x10]!
	0x03226EFC BL 0x3226C14
	0x03226F00 ORN W8, W31, W0, 0x0
	0x03226F04 AND W0, W8, 0x1
	0x03226F08 LDR X30, [X31], #0x10
	0x03226F0C RET
	0x03226F10 B 0x3226F14
	0x03226F14 LDRH W10, [X0 + 0x14]!
	0x03226F18 CBZ W10, 0x3226F4C
	0x03226F1C MOVZ W8, 0x1505
	0x03226F20 MOVZ W9, 0x1505
	0x03226F24 LDRH W11, [X0 + 0x2]
	0x03226F28 AND W10, W10, 0xFFFF
	0x03226F2C ADD W8, W8, W8, 0x5, LSL
	0x03226F30 EOR W8, W8, W10, 0x0
	0x03226F34 CBZ W11, 0x3226F54
	0x03226F38 LDRH W10, [X0 + 0x4]!
	0x03226F3C ADD W9, W9, W9, 0x5, LSL
	0x03226F40 EOR W9, W9, W11, 0x0
	0x03226F44 CBNZ W10, 0x3226F24
	0x03226F48 B 0x3226F54
	0x03226F4C MOVZ W9, 0x1505
	0x03226F50 MOVZ W8, 0x1505
	0x03226F54 MOVZ W10, 0x8B65
	0x03226F58 MOVK W10, 0x5D580000
	0x03226F5C MADD W0, W9, W10, W8
	0x03226F60 RET
	0x03226F64 CBZ X1, 0x3226F70
	0x03226F68 MOV W2, W31
	0x03226F6C B 0x3226FBC
	0x03226F70 STP X30, X19, [X31 - 0x10]!
	0x03226F74 ADRP X0, 0xED2000
	0x03226F78 LDR X0, [X0 + 0x528]
	0x03226F7C BL 0x1C16D08
	0x03226F80 BL 0x1C16F10
	0x03226F84 MOV X19, X0
	0x03226F88 ADRP X0, 0xED7000
	0x03226F8C LDR X0, [X0 + 0xEC8]
	0x03226F90 BL 0x1C16D08
	0x03226F94 MOV X1, X0
	0x03226F98 MOV X0, X19
	0x03226F9C MOV X2, X31
	0x03226FA0 BL 0x330E100
	0x03226FA4 ADRP X0, 0xEFC000
	0x03226FA8 LDR X0, [X0 + 0x68]
	0x03226FAC BL 0x1C16D08
	0x03226FB0 MOV X1, X0
	0x03226FB4 MOV X0, X19
	0x03226FB8 BL 0x1C16DEC
	0x03226FBC STR X30, [X31 - 0x30]!
	0x03226FC0 STP X22, X21, [X31 + 0x10]
	0x03226FC4 STP X20, X19, [X31 + 0x20]
	0x03226FC8 ADRP X21, 0x11B6000
	0x03226FCC LDRB W8, [X21 + 0x362]
	0x03226FD0 MOV W22, W2
	0x03226FD4 MOV X19, X1
	0x03226FD8 MOV X20, X0
	0x03226FDC TBNZ X8, 0x0, 0x3227000
	0x03226FE0 ADRP X0, 0xEFB000
	0x03226FE4 LDR X0, [X0 + 0xFD0]
	0x03226FE8 BL 0x1C16CF4
	0x03226FEC ADRP X0, 0xECF000
	0x03226FF0 LDR X0, [X0 + 0xC48]
	0x03226FF4 BL 0x1C16CF4
	0x03226FF8 MOVZ W8, 0x1
	0x03226FFC STRB W8, [X21 + 0x362]
	0x03227000 CBZ X19, 0x32271F8
	0x03227004 CMP X20, X19
	0x03227008 B.EQ 0x3227070
	0x0322700C LDRSW X21, [X19 + 0x10]
	0x03227010 CBZ W21, 0x3227070
	0x03227014 CMP W22, 0x5
	0x03227018 B.HI 0x3227244
	0x0322701C ADRP X9, 0xFFFFFFFFFD96F000
	0x03227020 MOV W8, W22
	0x03227024 ADD X9, X9, 0x467
	0x03227028 ADR X10, 0x10
	0x0322702C LDRB W11, [X9, X8, LSL]
	0x03227030 ADD X10, X10, X11, 0x2, LSL
	0x03227034 BR X10
	0x03227038 ADRP X8, 0xECE000
	0x0322703C LDR X8, [X8 + 0xC48]
	0x03227040 LDR X0, [X8]
	0x03227044 LDR W8, [X0 + 0xE0]
	0x03227048 CBNZ W8, 0x3227050
	0x0322704C BL 0x1C16DFC
	0x03227050 MOV X0, X31
	0x03227054 BL 0x33387A0
	0x03227058 CBZ X0, 0x3227240
	0x0322705C LDR X8, [X0]
	0x03227060 LDP X9, X1, [X8 + 0x1F8]
	0x03227064 BLR X9
	0x03227068 CBNZ X0, 0x32270FC
	0x0322706C B 0x3227240
	0x03227070 CMP W22, 0x6
	0x03227074 B.CC 0x3227088
	0x03227078 MOVZ W0, 0x31
	0x0322707C MOVZ W1, 0x2F
	0x03227080 MOV X2, X31
	0x03227084 BL 0x339DD28
	0x03227088 MOVZ W0, 0x1
	0x0322708C LDP X20, X19, [X31 + 0x20]
	0x03227090 LDP X22, X21, [X31 + 0x10]
	0x03227094 LDR X30, [X31], #0x30
	0x03227098 RET
	0x0322709C ADRP X8, 0xECE000
	0x032270A0 LDR X8, [X8 + 0xC48]
	0x032270A4 LDR X0, [X8]
	0x032270A8 LDR W8, [X0 + 0xE0]
	0x032270AC CBNZ W8, 0x32270B4
	0x032270B0 BL 0x1C16DFC
	0x032270B4 MOV X0, X31
	0x032270B8 BL 0x33387A0
	0x032270BC CBZ X0, 0x3227240
	0x032270C0 LDR X8, [X0]
	0x032270C4 LDP X9, X1, [X8 + 0x1F8]
	0x032270C8 BLR X9
	0x032270CC CBNZ X0, 0x3227138
	0x032270D0 B 0x3227240
	0x032270D4 ADRP X21, 0xEFA000
	0x032270D8 LDR X21, [X21 + 0xFD0]
	0x032270DC LDR X0, [X21]
	0x032270E0 LDR W8, [X0 + 0xE0]
	0x032270E4 CBNZ W8, 0x32270F0
	0x032270E8 BL 0x1C16DFC
	0x032270EC LDR X0, [X21]
	0x032270F0 LDR X8, [X0 + 0xB8]
	0x032270F4 LDR X0, [X8]
	0x032270F8 CBZ X0, 0x3227240
	0x032270FC LDR X8, [X0]
	0x03227100 MOV X1, X20
	0x03227104 MOV X2, X19
	0x03227108 MOV W3, W31
	0x0322710C B 0x3227148
	0x03227110 ADRP X21, 0xEFA000
	0x03227114 LDR X21, [X21 + 0xFD0]
	0x03227118 LDR X0, [X21]
	0x0322711C LDR W8, [X0 + 0xE0]
	0x03227120 CBNZ W8, 0x322712C
	0x03227124 BL 0x1C16DFC
	0x03227128 LDR X0, [X21]
	0x0322712C LDR X8, [X0 + 0xB8]
	0x03227130 LDR X0, [X8]
	0x03227134 CBZ X0, 0x3227240
	0x03227138 LDR X8, [X0]
	0x0322713C MOVZ W3, 0x1
	0x03227140 MOV X1, X20
	0x03227144 MOV X2, X19
	0x03227148 LDP X5, X4, [X8 + 0x1C8]
	0x0322714C LDP X20, X19, [X31 + 0x20]
	0x03227150 LDP X22, X21, [X31 + 0x10]
	0x03227154 LDR X30, [X31], #0x30
	0x03227158 BR X5
	0x0322715C LDR W8, [X20 + 0x10]
	0x03227160 CMP W8, W21
	0x03227164 B.LT 0x32271AC
	0x03227168 LDRH W8, [X20 + 0x14]!
	0x0322716C LDRH W9, [X19 + 0x14]!
	0x03227170 CMP W8, W9
	0x03227174 B.NE 0x32271AC
	0x03227178 CMP W21, 0x1
	0x0322717C B.EQ 0x3227088
	0x03227180 UBFM X2, X21, 0x3F, 0x3E
	0x03227184 MOV X0, X20
	0x03227188 MOV X1, X19
	0x0322718C LDP X20, X19, [X31 + 0x20]
	0x03227190 LDP X22, X21, [X31 + 0x10]
	0x03227194 MOV X3, X31
	0x03227198 LDR X30, [X31], #0x30
	0x0322719C B 0x3391068
	0x032271A0 LDR W8, [X20 + 0x10]
	0x032271A4 CMP W8, W21
	0x032271A8 B.GE 0x32271B4
	0x032271AC MOV W0, W31
	0x032271B0 B 0x322708C
	0x032271B4 ADRP X8, 0xEFA000
	0x032271B8 LDR X8, [X8 + 0xFD0]
	0x032271BC LDR X0, [X8]
	0x032271C0 LDR W8, [X0 + 0xE0]
	0x032271C4 CBNZ W8, 0x32271CC
	0x032271C8 BL 0x1C16DFC
	0x032271CC MOV X0, X20
	0x032271D0 MOV W1, W31
	0x032271D4 MOV W2, W21
	0x032271D8 MOV X3, X19
	0x032271DC MOV W4, W31
	0x032271E0 MOV W5, W21
	0x032271E4 MOV X6, X31

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X24, 0x11B7000
	011 Move W8, [X24+858]
	012 Move W25, W5
	013 Move W23, W4
	014 Move W19, W3
	015 Move X20, X2
	016 Move W21, W1
	017 Move X22, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {33}
	022 Move X0, 0xEFC000
	023 Move X0, [X0+4048]
	024 Call 0x1C17CF4
	025 Move X0, 0xED0000
	026 Move X0, [X0+3144]
	027 Call 0x1C17CF4
	028 Move X0, 0xECE000
	029 Move X0, [X0+1448]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X24+858], W8
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move W0, 49
	035 Move W1, 47
	036 Move X2, X31
	037 Call ThrowHelper.ThrowArgumentException, X0, X1
	038 Compare X22, 0
	039 JumpIfEqual {105}
	040 Compare X20, 0
	041 JumpIfEqual {105}
	042 Move TEMP, X23
	043 And TEMP, TEMP, -2147483648
	044 Compare TEMP, -2147483648
	045 JumpIfEqual {229}
	046 Move TEMP, X19
	047 And TEMP, TEMP, -2147483648
	048 Compare TEMP, -2147483648
	049 JumpIfEqual {252}
	050 Move TEMP, X21
	051 And TEMP, TEMP, -2147483648
	052 Compare TEMP, -2147483648
	053 JumpIfEqual {252}
	054 Move W8, [X22+16]
	055 Subtract W24, W8, W21
	056 Move W8, [X20+16]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Compare W23, 0
	059 JumpIfEqual {111}
	060 NotImplemented "Instruction CMP not yet implemented."
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X8, 0xECE000
	063 Move X8, [X8+1448]
	064 Move X0, [X8]
	065 Move W8, [X0+224]
	066 Compare W8, 0
	067 JumpIfNotEqual {69}
	068 Call 0x1C17DFC
	069 Move W0, W23
	070 Move W1, W24
	071 Move X2, X31
	072 Call Math.Min, X0, X1
	073 Move W8, [X20+16]
	074 Move W24, W0
	075 Move W0, W23
	076 Move X2, X31
	077 Subtract W1, W8, W19
	078 Call Math.Min, X0, X1
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X9, -40431616
	081 Move W8, W25
	082 Add X9, X9, 1103
	083 NotImplemented "Instruction ADR not yet implemented."
	084 Move W11, [X9]
	085 Add X10, X10, X11
	086 Move W23, W0
	087 CallNoReturn X10
	088 Move X8, 0xED0000
	089 Move X8, [X8+3144]
	090 Move X0, [X8]
	091 Move W8, [X0+224]
	092 Compare W8, 0
	093 JumpIfNotEqual {95}
	094 Call 0x1C17DFC
	095 Move X0, X31
	096 Call CultureInfo.get_CurrentCulture
	097 Compare X0, 0
	098 JumpIfEqual {283}
	099 Move X8, [X0]
	100 Move X9, [X8+504]
	101 Move X1, [X8+512]
	102 NotImplemented "Instruction BLR not yet implemented."
	103 Compare X0, 0
	104 JumpIfNotEqual {151}
	105 NotImplemented "Instruction CMP not yet implemented."
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Move TEMP, 0
	108 Not TEMP
	109 Move W8, TEMP
	110 NotImplemented "Instruction CSNEG not yet implemented."
	111 Move W0, W31
	112 Move X20, [X31+64]
	113 Move X19, [X31+72]
	114 Move X22, [X31+48]
	115 Move X21, [X31+56]
	116 Move X24, [X31+32]
	117 Move X23, [X31+40]
	118 Move X30, [X31+16]
	119 Move X25, [X31+24]
	120 Add X31, X31, 80
	121 Return X0
	122 Move X8, 0xED0000
	123 Move X8, [X8+3144]
	124 Move X0, [X8]
	125 Move W8, [X0+224]
	126 Compare W8, 0
	127 JumpIfNotEqual {129}
	128 Call 0x1C17DFC
	129 Move X0, X31
	130 Call CultureInfo.get_CurrentCulture
	131 Compare X0, 0
	132 JumpIfEqual {283}
	133 Move X8, [X0]
	134 Move X9, [X8+504]
	135 Move X1, [X8+512]
	136 NotImplemented "Instruction BLR not yet implemented."
	137 Compare X0, 0
	138 JumpIfNotEqual {174}
	139 Move X25, 0xEFC000
	140 Move X25, [X25+4048]
	141 Move X0, [X25]
	142 Move W8, [X0+224]
	143 Compare W8, 0
	144 JumpIfNotEqual {147}
	145 Call 0x1C17DFC
	146 Move X0, [X25]
	147 Move X8, [X0+184]
	148 Move X0, [X8]
	149 Compare X0, 0
	150 JumpIfEqual {283}
	151 Move X8, [X0]
	152 Move X1, X22
	153 Move W2, W21
	154 Move W3, W24
	155 Move X9, [X8+440]
	156 Move X8, [X8+448]
	157 Move X4, X20
	158 Move W5, W19
	159 Move W6, W23
	160 Move W7, W31
	161 Move [X31], X8
	162 Move X25, 0xEFC000
	163 Move X25, [X25+4048]
	164 Move X0, [X25]
	165 Move W8, [X0+224]
	166 Compare W8, 0
	167 JumpIfNotEqual {170}
	168 Call 0x1C17DFC
	169 Move X0, [X25]
	170 Move X8, [X0+184]
	171 Move X0, [X8]
	172 Compare X0, 0
	173 JumpIfEqual {283}
	174 Move X8, [X0]
	175 Move W7, 1
	176 Move X1, X22
	177 Move W2, W21
	178 Move X9, [X8+440]
	179 Move X8, [X8+448]
	180 Move W3, W24
	181 Move X4, X20
	182 Move W5, W19
	183 Move [X31], X8
	184 Move W6, W23
	185 NotImplemented "Instruction BLR not yet implemented."
	186 Add X8, X22, W21
	187 Add X9, X20, W19
	188 Move W1, W24
	189 Move W3, W23
	190 Move X20, [X31+64]
	191 Move X19, [X31+72]
	192 Move X22, [X31+48]
	193 Move X21, [X31+56]
	194 Move X24, [X31+32]
	195 Move X23, [X31+40]
	196 Move X30, [X31+16]
	197 Move X25, [X31+24]
	198 Add X0, X8, 20
	199 Add X2, X9, 20
	200 Move X4, X31
	201 Add X31, X31, 80
	202 Call SpanHelpers.SequenceCompareTo, X0, X1, X2, X3
	203 Return X0
	204 Move X8, 0xEFB000
	205 Move X8, [X8+4048]
	206 Move X0, [X8]
	207 Move W8, [X0+224]
	208 Compare W8, 0
	209 JumpIfNotEqual {211}
	210 Call 0x1C17DFC
	211 Move X0, X22
	212 Move W1, W21
	213 Move W2, W24
	214 Move X3, X20
	215 Move W4, W19
	216 Move W5, W23
	217 Move X20, [X31+64]
	218 Move X19, [X31+72]
	219 Move X22, [X31+48]
	220 Move X21, [X31+56]
	221 Move X24, [X31+32]
	222 Move X23, [X31+40]
	223 Move X30, [X31+16]
	224 Move X25, [X31+24]
	225 Move X6, X31
	226 Add X31, X31, 80
	227 Call CompareInfo.CompareOrdinalIgnoreCase, X0, X1, X2, X3, X4, X5
	228 Return X0
	229 Move X0, 0xED5000
	230 Move X0, [X0+1888]
	231 Call 0x1C17D08
	232 Call 0x1C17F10
	233 Move X19, X0
	234 Move X0, 0xED5000
	235 Move X0, [X0+1896]
	236 Call 0x1C17D08
	237 Move X20, X0
	238 Move X0, 0xEFC000
	239 Move X0, [X0]
	240 Call 0x1C17D08
	241 Move X2, X0
	242 Move X0, X19
	243 Move X1, X20
	244 Move X3, X31
	245 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	246 Move X0, 0xEFC000
	247 Move X0, [X0+8]
	248 Call 0x1C17D08
	249 Move X1, X0
	250 Move X0, X19
	251 Call 0x1C17DEC
	252 Move X8, 0xEFC000
	253 Move X9, 0xEFC000
	254 Move X8, [X8+16]
	255 Move X9, [X9+24]
	256 NotImplemented "Instruction CMP not yet implemented."
	257 NotImplemented "Instruction CSEL not yet implemented."
	258 Move X0, 0xEFC000
	259 Move X0, [X0+24]
	260 Move X0, 0xEFC000
	261 Move X0, [X0+16]
	262 Call 0x1C17D08
	263 Move X19, X0
	264 Move X0, 0xED5000
	265 Move X0, [X0+1888]
	266 Call 0x1C17D08
	267 Call 0x1C17F10
	268 Move X20, X0
	269 Move X0, 0xEF5000
	270 Move X0, [X0+1632]
	271 Call 0x1C17D08
	272 Move X2, X0
	273 Move X0, X20
	274 Move X1, X19
	275 Move X3, X31
	276 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	277 Move X0, 0xEFC000
	278 Move X0, [X0+8]
	279 Call 0x1C17D08
	280 Move X1, X0
	281 Move X0, X20
	282 Call 0x1C17DEC
	283 Call 0x1C17F20
	284 Move X0, 0xED5000
	285 Move X0, [X0+1400]
	286 Call 0x1C17D08
	287 Call 0x1C17F10
	288 Move X19, X0
	289 Move X0, 0xEFB000
	290 Move X0, [X0+4056]
	291 Call 0x1C17D08
	292 Move X20, X0
	293 Move X0, 0xEFB000
	294 Move X0, [X0+4064]
	295 Call 0x1C17D08
	296 Move X2, X0
	297 Move X0, X19
	298 Move X1, X20
	299 Move X3, X31
	300 Call ArgumentException..ctor, X0, X1, X2

Method: System.Int32 CompareOrdinal(System.String strA, System.String strB)

Disassembly:
	0x032271E8 BL 0x3305238
	0x032271EC CMP W0, 0x0
	0x032271F0 CSET W0, EQ
	0x032271F4 B 0x322708C
	0x032271F8 ADRP X0, 0xED1000
	0x032271FC LDR X0, [X0 + 0x528]
	0x03227200 BL 0x1C16D08
	0x03227204 BL 0x1C16F10
	0x03227208 MOV X19, X0
	0x0322720C ADRP X0, 0xED6000
	0x03227210 LDR X0, [X0 + 0xEC8]
	0x03227214 BL 0x1C16D08
	0x03227218 MOV X1, X0
	0x0322721C MOV X0, X19
	0x03227220 MOV X2, X31
	0x03227224 BL 0x330E100
	0x03227228 ADRP X0, 0xEFB000

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move X8, X0
	003 Compare X0, 0
	004 JumpIfEqual {15}
	005 Compare X1, 0
	006 JumpIfEqual {19}
	007 NotImplemented "Instruction LDRH not yet implemented."
	008 NotImplemented "Instruction LDRH not yet implemented."
	009 Subtract W0, W9, W10
	010 Move X0, X8
	011 Call String.CompareOrdinalHelper, X0, X1
	012 Return X0
	013 Move W0, W31
	014 Return X0
	015 Move TEMP, 0
	016 Not TEMP
	017 Move W0, TEMP
	018 Return X0
	019 Move W0, 1
	020 Return X0

Method: System.Int32 CompareOrdinal(System.ReadOnlySpan`1<System.Char> strA, System.ReadOnlySpan`1<System.Char> strB)

Disassembly:
	0x0322722C LDR X0, [X0 + 0x70]
	0x03227230 BL 0x1C16D08
	0x03227234 MOV X1, X0
	0x03227238 MOV X0, X19
	0x0322723C BL 0x1C16DEC
	0x03227240 BL 0x1C16F20
	0x03227244 ADRP X0, 0xED4000
	0x03227248 LDR X0, [X0 + 0x578]
	0x0322724C BL 0x1C16D08
	0x03227250 BL 0x1C16F10
	0x03227254 MOV X19, X0
	0x03227258 ADRP X0, 0xEFA000
	0x0322725C LDR X0, [X0 + 0xFD8]
	0x03227260 BL 0x1C16D08
	0x03227264 MOV X20, X0
	0x03227268 ADRP X0, 0xEFA000
	0x0322726C LDR X0, [X0 + 0xFE0]
	0x03227270 BL 0x1C16D08
	0x03227274 MOV X2, X0
	0x03227278 MOV X0, X19
	0x0322727C MOV X1, X20
	0x03227280 MOV X3, X31
	0x03227284 BL 0x330E16C
	0x03227288 B 0x3227228
	0x0322728C STP X30, X19, [X31 - 0x10]!
	0x03227290 CBZ X2, 0x32272C8
	0x03227294 CBZ X0, 0x32272C8
	0x03227298 LDR W9, [X0 + 0x10]
	0x0322729C LDR W8, [X2 + 0x10]
	0x032272A0 SUB W9, W9, W1
	0x032272A4 CMP W8, W9
	0x032272A8 B.GT 0x32272CC
	0x032272AC ADD X9, X0, W1, 0x1, SXTW
	0x032272B0 ADD X1, X2, 0x14
	0x032272B4 ADD X0, X9, 0x14
	0x032272B8 UBFM W2, W8, 0x1F, 0x1E
	0x032272BC MOV X3, X31
	0x032272C0 LDP X30, X19, [X31], #0x10
	0x032272C4 B 0x33A8CD0
	0x032272C8 BL 0x1C16F20

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x11B6000
	009 Move X23, 0xEFC000
	010 Move W8, [X24+859]
	011 Move X23, [X23+32]
	012 Move X19, X3
	013 Move X21, X2
	014 Move X20, X1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0xEFC000
	021 Move X0, [X0+32]
	022 Call 0x1C17CF4
	023 Move X0, 0xEFC000
	024 Move X0, [X0+40]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X24+859], W8
	028 Move X2, [X23]
	029 Move X0, X22
	030 Move X1, X20
	031 Call MemoryMarshal.GetReference, X0
	032 Move X2, [X23]
	033 Move X22, X0
	034 Move X0, X21
	035 Move X1, X19
	036 Call MemoryMarshal.GetReference, X0
	037 Move X2, X0
	038 Move X0, X22
	039 Move W1, W20
	040 Move W3, W19
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X24, [X31+16]
	046 Move X23, [X31+24]
	047 Move X4, X31
	048 Move X30, [X31+64]
	049 Call SpanHelpers.SequenceCompareTo, X0, X1, X2, X3
	050 Return X0

Method: System.Int32 CompareOrdinal(System.String strA, System.Int32 indexA, System.String strB, System.Int32 indexB, System.Int32 length)

Disassembly:
	0x032272CC ADRP X0, 0xED6000
	0x032272D0 LDR X0, [X0 + 0xF78]
	0x032272D4 BL 0x1C16D08
	0x032272D8 BL 0x1C16F10
	0x032272DC MOV X1, X31
	0x032272E0 MOV X19, X0
	0x032272E4 BL 0x3379B10
	0x032272E8 ADRP X0, 0xEFB000
	0x032272EC LDR X0, [X0 + 0x78]
	0x032272F0 BL 0x1C16D08
	0x032272F4 MOV X1, X0
	0x032272F8 MOV X0, X19
	0x032272FC BL 0x1C16DEC
	0x03227300 UBFM W2, W2, 0x1F, 0x1E
	0x03227304 MOV X3, X31
	0x03227308 B 0x33A8CD0
	0x0322730C STP X30, X21, [X31 - 0x20]!
	0x03227310 STP X20, X19, [X31 + 0x10]
	0x03227314 ADRP X21, 0x11B5000
	0x03227318 LDRB W8, [X21 + 0x363]
	0x0322731C MOV X19, X1
	0x03227320 MOV X20, X0
	0x03227324 TBZ X8, 0x0, 0x3227338
	0x03227328 CBZ X20, 0x3227350
	0x0322732C CBZ X19, 0x3227368
	0x03227330 CBNZ X20, 0x3227380
	0x03227334 B 0x32273BC
	0x03227338 ADRP X0, 0xECE000
	0x0322733C LDR X0, [X0 + 0x278]
	0x03227340 BL 0x1C16CF4
	0x03227344 MOVZ W8, 0x1
	0x03227348 STRB W8, [X21 + 0x363]
	0x0322734C CBNZ X20, 0x322732C
	0x03227350 ADRP X8, 0xECE000
	0x03227354 LDR X8, [X8 + 0x278]
	0x03227358 LDR X8, [X8]
	0x0322735C LDR X8, [X8 + 0xB8]
	0x03227360 LDR X20, [X8]
	0x03227364 CBNZ X19, 0x3227330
	0x03227368 ADRP X8, 0xECE000
	0x0322736C LDR X8, [X8 + 0x278]
	0x03227370 LDR X8, [X8]
	0x03227374 LDR X8, [X8 + 0xB8]
	0x03227378 LDR X19, [X8]
	0x0322737C CBZ X20, 0x32273BC
	0x03227380 LDR X8, [X20]
	0x03227384 MOV X0, X20
	0x03227388 LDP X9, X1, [X8 + 0x168]
	0x0322738C BLR X9
	0x03227390 CBZ X19, 0x32273BC
	0x03227394 LDR X8, [X19]
	0x03227398 MOV X20, X0
	0x0322739C MOV X0, X19
	0x032273A0 LDP X9, X1, [X8 + 0x168]
	0x032273A4 BLR X9
	0x032273A8 MOV X1, X0
	0x032273AC MOV X0, X20
	0x032273B0 LDP X20, X19, [X31 + 0x10]
	0x032273B4 LDP X30, X21, [X31], #0x20
	0x032273B8 B 0x321B938
	0x032273BC BL 0x1C16F20
	0x032273C0 STR X30, [X31 - 0x30]!
	0x032273C4 STP X22, X21, [X31 + 0x10]
	0x032273C8 STP X20, X19, [X31 + 0x20]
	0x032273CC ADRP X22, 0x11B5000
	0x032273D0 LDRB W8, [X22 + 0x364]
	0x032273D4 MOV X19, X2
	0x032273D8 MOV X20, X1
	0x032273DC MOV X21, X0
	0x032273E0 TBZ X8, 0x0, 0x32273F8
	0x032273E4 CBZ X21, 0x3227410
	0x032273E8 CBZ X20, 0x3227428
	0x032273EC CBZ X19, 0x3227440
	0x032273F0 CBNZ X21, 0x3227458
	0x032273F4 B 0x32274B4
	0x032273F8 ADRP X0, 0xECE000
	0x032273FC LDR X0, [X0 + 0x278]
	0x03227400 BL 0x1C16CF4
	0x03227404 MOVZ W8, 0x1
	0x03227408 STRB W8, [X22 + 0x364]
	0x0322740C CBNZ X21, 0x32273E8
	0x03227410 ADRP X8, 0xECE000
	0x03227414 LDR X8, [X8 + 0x278]
	0x03227418 LDR X8, [X8]
	0x0322741C LDR X8, [X8 + 0xB8]
	0x03227420 LDR X21, [X8]
	0x03227424 CBNZ X20, 0x32273EC
	0x03227428 ADRP X8, 0xECE000
	0x0322742C LDR X8, [X8 + 0x278]
	0x03227430 LDR X8, [X8]
	0x03227434 LDR X8, [X8 + 0xB8]
	0x03227438 LDR X20, [X8]
	0x0322743C CBNZ X19, 0x32273F0
	0x03227440 ADRP X8, 0xECE000
	0x03227444 LDR X8, [X8 + 0x278]
	0x03227448 LDR X8, [X8]
	0x0322744C LDR X8, [X8 + 0xB8]
	0x03227450 LDR X19, [X8]
	0x03227454 CBZ X21, 0x32274B4
	0x03227458 LDR X8, [X21]
	0x0322745C MOV X0, X21
	0x03227460 LDP X9, X1, [X8 + 0x168]
	0x03227464 BLR X9
	0x03227468 CBZ X20, 0x32274B4
	0x0322746C LDR X8, [X20]
	0x03227470 MOV X21, X0
	0x03227474 MOV X0, X20
	0x03227478 LDP X9, X1, [X8 + 0x168]
	0x0322747C BLR X9
	0x03227480 CBZ X19, 0x32274B4
	0x03227484 LDR X8, [X19]
	0x03227488 MOV X20, X0
	0x0322748C MOV X0, X19
	0x03227490 LDP X9, X1, [X8 + 0x168]
	0x03227494 BLR X9
	0x03227498 MOV X2, X0
	0x0322749C MOV X0, X21
	0x032274A0 MOV X1, X20
	0x032274A4 LDP X20, X19, [X31 + 0x20]
	0x032274A8 LDP X22, X21, [X31 + 0x10]
	0x032274AC LDR X30, [X31], #0x30
	0x032274B0 B 0x32274B8
	0x032274B4 BL 0x1C16F20
	0x032274B8 STR X30, [X31 - 0x30]!
	0x032274BC STP X22, X21, [X31 + 0x10]
	0x032274C0 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x11B6000
	009 Move W8, [X24+860]
	010 Move W23, W4
	011 Move W20, W3
	012 Move X19, X2
	013 Move W21, W1
	014 Move X22, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xECD000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X24+860], W8
	024 Compare X22, 0
	025 JumpIfEqual {86}
	026 Compare X19, 0
	027 JumpIfEqual {86}
	028 Move TEMP, X23
	029 And TEMP, TEMP, -2147483648
	030 Compare TEMP, -2147483648
	031 JumpIfEqual {101}
	032 Move TEMP, X20
	033 And TEMP, TEMP, -2147483648
	034 Compare TEMP, -2147483648
	035 JumpIfEqual {124}
	036 Move TEMP, X21
	037 And TEMP, TEMP, -2147483648
	038 Compare TEMP, -2147483648
	039 JumpIfEqual {124}
	040 Move X8, 0xECD000
	041 Move X8, [X8+1448]
	042 Move W24, [X22+16]
	043 Move X0, [X8]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Subtract W1, W24, W21
	049 Move W0, W23
	050 Move X2, X31
	051 Call Math.Min, X0, X1
	052 Move W8, [X19+16]
	053 Move W24, W0
	054 Move W0, W23
	055 Move X2, X31
	056 Subtract W1, W8, W20
	057 Call Math.Min, X0, X1
	058 Move TEMP, X0
	059 And TEMP, TEMP, -2147483648
	060 Compare TEMP, -2147483648
	061 JumpIfEqual {129}
	062 Move TEMP, X24
	063 And TEMP, TEMP, -2147483648
	064 Compare TEMP, -2147483648
	065 JumpIfEqual {129}
	066 Compare W23, 0
	067 JumpIfEqual {92}
	068 Move W3, W0
	069 NotImplemented "Instruction CMP not yet implemented."
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Add X8, X22, W21
	072 Add X9, X19, W20
	073 Move W1, W24
	074 Move X20, [X31+48]
	075 Move X19, [X31+56]
	076 Move X22, [X31+32]
	077 Move X21, [X31+40]
	078 Move X24, [X31+16]
	079 Move X23, [X31+24]
	080 Add X0, X8, 20
	081 Add X2, X9, 20
	082 Move X4, X31
	083 Move X30, [X31+64]
	084 Call SpanHelpers.SequenceCompareTo, X0, X1, X2, X3
	085 Return X0
	086 NotImplemented "Instruction CMP not yet implemented."
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move TEMP, 0
	089 Not TEMP
	090 Move W8, TEMP
	091 NotImplemented "Instruction CSNEG not yet implemented."
	092 Move W0, W31
	093 Move X20, [X31+48]
	094 Move X19, [X31+56]
	095 Move X22, [X31+32]
	096 Move X21, [X31+40]
	097 Move X24, [X31+16]
	098 Move X23, [X31+24]
	099 Move X30, [X31+64]
	100 Return X0
	101 Move X0, 0xED5000
	102 Move X0, [X0+1888]
	103 Call 0x1C17D08
	104 Call 0x1C17F10
	105 Move X19, X0
	106 Move X0, 0xED5000
	107 Move X0, [X0+1896]
	108 Call 0x1C17D08
	109 Move X20, X0
	110 Move X0, 0xEFC000
	111 Move X0, [X0+48]
	112 Call 0x1C17D08
	113 Move X2, X0
	114 Move X0, X19
	115 Move X1, X20
	116 Move X3, X31
	117 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	118 Move X0, 0xEFC000
	119 Move X0, [X0+56]
	120 Call 0x1C17D08
	121 Move X1, X0
	122 Move X0, X19
	123 Call 0x1C17DEC
	124 Move X8, 0xEFC000
	125 Move X9, 0xEFC000
	126 Move X8, [X8+16]
	127 Move X9, [X9+24]
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move X8, 0xEFC000
	130 Move X9, 0xEFC000
	131 Move X8, [X8+16]
	132 Move X9, [X9+24]
	133 NotImplemented "Instruction CMP not yet implemented."
	134 NotImplemented "Instruction CSEL not yet implemented."
	135 Call 0x1C17D08
	136 Move X19, X0
	137 Move X0, 0xED5000
	138 Move X0, [X0+1888]
	139 Call 0x1C17D08
	140 Call 0x1C17F10
	141 Move X20, X0
	142 Move X0, 0xEF5000
	143 Move X0, [X0+1632]
	144 Call 0x1C17D08
	145 Move X2, X0
	146 Move X0, X20
	147 Move X1, X19
	148 Move X3, X31
	149 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	150 Move X0, 0xEFC000
	151 Move X0, [X0+56]
	152 Call 0x1C17D08
	153 Move X1, X0
	154 Move X0, X20
	155 Call 0x1C17DEC

Method: System.Int32 CompareTo(System.Object value)

Disassembly:
	0x032274C4 MOV X19, X2
	0x032274C8 MOV X20, X1
	0x032274CC CBZ X0, 0x322754C
	0x032274D0 LDR W8, [X0 + 0x10]
	0x032274D4 MOV X21, X0
	0x032274D8 CBZ W8, 0x322754C
	0x032274DC CBZ X20, 0x3227554
	0x032274E0 LDR W9, [X20 + 0x10]
	0x032274E4 CBZ W9, 0x3227554
	0x032274E8 CBZ X19, 0x322756C
	0x032274EC LDR W10, [X19 + 0x10]
	0x032274F0 CBZ W10, 0x322756C
	0x032274F4 ADD W8, W9, W8
	0x032274F8 ADD W0, W8, W10
	0x032274FC BL 0x1C8825C
	0x03227500 MOV W1, W31
	0x03227504 MOV X2, X21
	0x03227508 MOV X22, X0
	0x0322750C BL 0x322728C
	0x03227510 LDR W1, [X21 + 0x10]
	0x03227514 MOV X0, X22
	0x03227518 MOV X2, X20
	0x0322751C BL 0x322728C
	0x03227520 LDR W8, [X21 + 0x10]
	0x03227524 LDR W9, [X20 + 0x10]
	0x03227528 MOV X0, X22
	0x0322752C MOV X2, X19
	0x03227530 ADD W1, W9, W8
	0x03227534 BL 0x322728C
	0x03227538 MOV X0, X22
	0x0322753C LDP X20, X19, [X31 + 0x20]
	0x03227540 LDP X22, X21, [X31 + 0x10]
	0x03227544 LDR X30, [X31], #0x30
	0x03227548 RET
	0x0322754C MOV X0, X20
	0x03227550 B 0x3227558
	0x03227554 MOV X0, X21
	0x03227558 MOV X1, X19
	0x0322755C LDP X20, X19, [X31 + 0x20]
	0x03227560 LDP X22, X21, [X31 + 0x10]
	0x03227564 LDR X30, [X31], #0x30
	0x03227568 B 0x321B938
	0x0322756C MOV X0, X21
	0x03227570 MOV X1, X20
	0x03227574 B 0x322755C
	0x03227578 STR X30, [X31 - 0x50]!
	0x0322757C STP X26, X25, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11B6000
	006 Move W8, [X21+861]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xECF000
	014 Move X0, [X0+632]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+861], W8
	018 Compare X19, 0
	019 JumpIfEqual {34}
	020 Move X8, 0xECF000
	021 Move X8, [X8+632]
	022 Move X9, [X19]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X0, X20
	026 Move X1, X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move W2, W31
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Call String.Compare, X0, X1, X2
	033 Return X0
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move W0, 1
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return X0
	040 Move X0, 0xED5000
	041 Move X0, [X0+1400]
	042 Call 0x1C17D08
	043 Call 0x1C17F10
	044 Move X19, X0
	045 Move X0, 0xEFC000
	046 Move X0, [X0+64]
	047 Call 0x1C17D08
	048 Move X1, X0
	049 Move X0, X19
	050 Move X2, X31
	051 Call ArgumentException..ctor, X0, X1
	052 Move X0, 0xEFC000
	053 Move X0, [X0+72]
	054 Call 0x1C17D08
	055 Move X1, X0
	056 Move X0, X19
	057 Call 0x1C17DEC

Method: System.Int32 CompareTo(System.String strB)

Disassembly:
	0x03227580 STP X24, X23, [X31 + 0x20]
	0x03227584 STP X22, X21, [X31 + 0x30]

ISIL:
	001 Move W2, W31
	002 Call String.Compare, X0, X1, X2
	003 Return X0

Method: System.Boolean EndsWith(System.String value)

Disassembly:
	0x03227588 STP X20, X19, [X31 + 0x40]
	0x0322758C ADRP X19, 0x11B5000

ISIL:
	001 Move W2, W31

Method: System.Boolean EndsWith(System.String value, System.StringComparison comparisonType)

Disassembly:
	0x03227590 LDRB W8, [X19 + 0x365]
	0x03227594 MOV X20, X0
	0x03227598 TBNZ X8, 0x0, 0x32275BC
	0x0322759C ADRP X0, 0xECC000
	0x032275A0 LDR X0, [X0 + 0xAC8]
	0x032275A4 BL 0x1C16CF4
	0x032275A8 ADRP X0, 0xECE000
	0x032275AC LDR X0, [X0 + 0x278]
	0x032275B0 BL 0x1C16CF4
	0x032275B4 MOVZ W8, 0x1
	0x032275B8 STRB W8, [X19 + 0x365]
	0x032275BC CBZ X20, 0x3227770
	0x032275C0 LDR X1, [X20 + 0x18]
	0x032275C4 CMP W1, 0x1
	0x032275C8 B.LE 0x32276E0
	0x032275CC ADRP X8, 0xECC000
	0x032275D0 LDR X8, [X8 + 0xAC8]
	0x032275D4 LDR X0, [X8]
	0x032275D8 BL 0x1C16D6C
	0x032275DC LDR X8, [X20 + 0x18]
	0x032275E0 CMP W8, 0x1
	0x032275E4 B.LT 0x3227704
	0x032275E8 ADRP X26, 0xECE000
	0x032275EC LDR X26, [X26 + 0x278]
	0x032275F0 MOV X19, X0
	0x032275F4 MOV X23, X31
	0x032275F8 MOV W21, W31
	0x032275FC MOV X22, X31
	0x03227600 AND X8, X8, 0x0
	0x03227604 ADD X24, X20, 0x20
	0x03227608 ADD X25, X0, 0x20
	0x0322760C CMP X23, W8, UXTW
	0x03227610 B.CS 0x3227738
	0x03227614 LDR X8, [X24, X23, LSL #3]
	0x03227618 CMP X8, 0x0
	0x0322761C CSEL X22, X22, X8, EQ
	0x03227620 CBZ X8, 0x322763C
	0x03227624 CBZ X22, 0x3227734
	0x03227628 LDR X8, [X22]
	0x0322762C MOV X0, X22
	0x03227630 LDP X9, X1, [X8 + 0x168]
	0x03227634 BLR X9
	0x03227638 CBNZ X0, 0x3227648
	0x0322763C LDR X8, [X26]
	0x03227640 LDR X8, [X8 + 0xB8]
	0x03227644 LDR X0, [X8]
	0x03227648 CBZ X19, 0x3227734
	0x0322764C LDR W8, [X19 + 0x18]
	0x03227650 CMP X23, X8
	0x03227654 B.CS 0x3227738
	0x03227658 STR X0, [X25, X23, LSL #3]
	0x0322765C CBZ X0, 0x3227734
	0x03227660 LDR W8, [X0 + 0x10]
	0x03227664 ADDS W21, W8, W21
	0x03227668 B.MI 0x322773C
	0x0322766C LDR W8, [X20 + 0x18]
	0x03227670 ADD X23, X23, 0x1
	0x03227674 CMP X23, W8, SXTW
	0x03227678 B.LT 0x322760C
	0x0322767C CBZ W21, 0x3227704
	0x03227680 MOV W0, W21
	0x03227684 BL 0x1C8825C
	0x03227688 LDR W8, [X19 + 0x18]
	0x0322768C MOV X20, X0
	0x03227690 CMP W8, 0x1
	0x03227694 B.LT 0x3227718
	0x03227698 MOV W23, W31
	0x0322769C MOV W21, W31
	0x032276A0 CMP W23, W8
	0x032276A4 B.CS 0x3227738
	0x032276A8 ADD X8, X19, W23, 0x3, SXTW
	0x032276AC LDR X22, [X8 + 0x20]
	0x032276B0 MOV X0, X20
	0x032276B4 MOV W1, W21
	0x032276B8 MOV X2, X22
	0x032276BC BL 0x322728C
	0x032276C0 CBZ X22, 0x3227734
	0x032276C4 LDR W8, [X19 + 0x18]
	0x032276C8 LDR W9, [X22 + 0x10]
	0x032276CC ADD W23, W23, 0x1
	0x032276D0 CMP W23, W8
	0x032276D4 ADD W21, W9, W21
	0x032276D8 B.LT 0x32276A0
	0x032276DC B 0x3227718
	0x032276E0 CBZ X1, 0x3227704
	0x032276E4 CBZ W1, 0x3227738
	0x032276E8 LDR X0, [X20 + 0x20]
	0x032276EC CBZ X0, 0x3227704
	0x032276F0 LDR X8, [X0]
	0x032276F4 LDP X9, X1, [X8 + 0x168]
	0x032276F8 BLR X9
	0x032276FC MOV X20, X0
	0x03227700 CBNZ X0, 0x3227718
	0x03227704 ADRP X8, 0xECE000
	0x03227708 LDR X8, [X8 + 0x278]
	0x0322770C LDR X8, [X8]
	0x03227710 LDR X8, [X8 + 0xB8]
	0x03227714 LDR X20, [X8]
	0x03227718 MOV X0, X20
	0x0322771C LDP X20, X19, [X31 + 0x40]
	0x03227720 LDP X22, X21, [X31 + 0x30]
	0x03227724 LDP X24, X23, [X31 + 0x20]
	0x03227728 LDP X26, X25, [X31 + 0x10]
	0x0322772C LDR X30, [X31], #0x50
	0x03227730 RET
	0x03227734 BL 0x1C16F20
	0x03227738 BL 0x1C16F28
	0x0322773C ADRP X0, 0xED5000
	0x03227740 LDR X0, [X0 + 0xDB8]
	0x03227744 BL 0x1C16D08
	0x03227748 BL 0x1C16F10
	0x0322774C MOV X1, X31
	0x03227750 MOV X19, X0
	0x03227754 BL 0x339F30C
	0x03227758 ADRP X0, 0xEFB000
	0x0322775C LDR X0, [X0 + 0x80]
	0x03227760 BL 0x1C16D08
	0x03227764 MOV X1, X0
	0x03227768 MOV X0, X19
	0x0322776C BL 0x1C16DEC
	0x03227770 ADRP X0, 0xED1000
	0x03227774 LDR X0, [X0 + 0x528]
	0x03227778 BL 0x1C16D08
	0x0322777C BL 0x1C16F10
	0x03227780 MOV X19, X0
	0x03227784 ADRP X0, 0xEFB000
	0x03227788 LDR X0, [X0 + 0x88]
	0x0322778C BL 0x1C16D08
	0x03227790 MOV X1, X0
	0x03227794 MOV X0, X19
	0x03227798 MOV X2, X31
	0x0322779C BL 0x330E100
	0x032277A0 B 0x3227758
	0x032277A4 B 0x1C8825C
	0x032277A8 CBZ X0, 0x32277BC
	0x032277AC LDR W8, [X0 + 0x10]
	0x032277B0 CBZ W8, 0x32277BC
	0x032277B4 MOV W0, W31
	0x032277B8 RET
	0x032277BC MOVZ W0, 0x1
	0x032277C0 RET
	0x032277C4 STP X30, X23, [X31 - 0x30]!
	0x032277C8 STP X22, X21, [X31 + 0x10]
	0x032277CC STP X20, X19, [X31 + 0x20]
	0x032277D0 MOV X19, X3
	0x032277D4 MOV X20, X2
	0x032277D8 MOV X21, X1
	0x032277DC CBZ X0, 0x322788C
	0x032277E0 LDR W8, [X0 + 0x10]
	0x032277E4 MOV X22, X0
	0x032277E8 CBZ W8, 0x322788C
	0x032277EC CBZ X21, 0x3227894
	0x032277F0 LDR W9, [X21 + 0x10]
	0x032277F4 CBZ W9, 0x3227894
	0x032277F8 CBZ X20, 0x32278B0
	0x032277FC LDR W10, [X20 + 0x10]
	0x03227800 CBZ W10, 0x32278B0
	0x03227804 CBZ X19, 0x32278BC
	0x03227808 LDR W11, [X19 + 0x10]
	0x0322780C CBZ W11, 0x32278BC
	0x03227810 ADD W8, W9, W8
	0x03227814 ADD W8, W8, W10
	0x03227818 ADD W0, W8, W11
	0x0322781C BL 0x1C8825C
	0x03227820 MOV W1, W31
	0x03227824 MOV X2, X22
	0x03227828 MOV X23, X0
	0x0322782C BL 0x322728C
	0x03227830 LDR W1, [X22 + 0x10]
	0x03227834 MOV X0, X23
	0x03227838 MOV X2, X21
	0x0322783C BL 0x322728C
	0x03227840 LDR W8, [X22 + 0x10]
	0x03227844 LDR W9, [X21 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11B6000
	007 Move W8, [X21+862]
	008 Move W22, W2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xEFB000
	016 Move X0, [X0+4048]
	017 Call 0x1C17CF4
	018 Move X0, 0xECF000
	019 Move X0, [X0+3144]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+862], W8
	023 Compare X19, 0
	024 JumpIfEqual {152}
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W21, [X19+16]
	027 Compare W21, 0
	028 JumpIfEqual {54}
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X9, -40435712
	031 Move W8, W22
	032 Add X9, X9, 1109
	033 NotImplemented "Instruction ADR not yet implemented."
	034 Move W11, [X9]
	035 Add X10, X10, X11
	036 CallNoReturn X10
	037 Move X8, 0xECF000
	038 Move X8, [X8+3144]
	039 Move X0, [X8]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X31
	045 Call CultureInfo.get_CurrentCulture
	046 Compare X0, 0
	047 JumpIfEqual {170}
	048 Move X8, [X0]
	049 Move X9, [X8+504]
	050 Move X1, [X8+512]
	051 NotImplemented "Instruction BLR not yet implemented."
	052 Compare X0, 0
	053 JumpIfNotEqual {95}
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move W0, 49
	056 Move W1, 47
	057 Move X2, X31
	058 Call ThrowHelper.ThrowArgumentException, X0, X1
	059 Move W0, 1
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X22, [X31+16]
	063 Move X21, [X31+24]
	064 Move X30, [X31+48]
	065 Return X0
	066 Move X8, 0xECF000
	067 Move X8, [X8+3144]
	068 Move X0, [X8]
	069 Move W8, [X0+224]
	070 Compare W8, 0
	071 JumpIfNotEqual {73}
	072 Call 0x1C17DFC
	073 Move X0, X31
	074 Call CultureInfo.get_CurrentCulture
	075 Compare X0, 0
	076 JumpIfEqual {170}
	077 Move X8, [X0]
	078 Move X9, [X8+504]
	079 Move X1, [X8+512]
	080 NotImplemented "Instruction BLR not yet implemented."
	081 Compare X0, 0
	082 JumpIfNotEqual {111}
	083 Move X21, 0xEFB000
	084 Move X21, [X21+4048]
	085 Move X0, [X21]
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {91}
	089 Call 0x1C17DFC
	090 Move X0, [X21]
	091 Move X8, [X0+184]
	092 Move X0, [X8]
	093 Compare X0, 0
	094 JumpIfEqual {170}
	095 Move X8, [X0]
	096 Move X1, X20
	097 Move X2, X19
	098 Move W3, W31
	099 Move X21, 0xEFB000
	100 Move X21, [X21+4048]
	101 Move X0, [X21]
	102 Move W8, [X0+224]
	103 Compare W8, 0
	104 JumpIfNotEqual {107}
	105 Call 0x1C17DFC
	106 Move X0, [X21]
	107 Move X8, [X0+184]
	108 Move X0, [X8]
	109 Compare X0, 0
	110 JumpIfEqual {170}
	111 Move X8, [X0]
	112 Move W3, 1
	113 Move X1, X20
	114 Move X2, X19
	115 Move X5, [X8+472]
	116 Move X4, [X8+480]
	117 Move X20, [X31+32]
	118 Move X19, [X31+40]
	119 Move X22, [X31+16]
	120 Move X21, [X31+24]
	121 Move X30, [X31+48]
	122 CallNoReturn X5
	123 Move W8, [X20+16]
	124 Subtract W8, W8, W21
	125 Add X8, X20, W8
	126 Add X0, X8, 20
	127 Add X2, X19, 20
	128 Move W1, W21
	129 Move W3, W21
	130 Move X4, X31
	131 Call SpanHelpers.SequenceCompareTo, X0, X1, X2, X3
	132 Move W8, [X20+16]
	133 Subtract W22, W8, W21
	134 Move W0, W31
	135 Move X8, 0xEFB000
	136 Move X8, [X8+4048]
	137 Move X0, [X8]
	138 Move W8, [X0+224]
	139 Compare W8, 0
	140 JumpIfNotEqual {142}
	141 Call 0x1C17DFC
	142 Move X0, X20
	143 Move W1, W22
	144 Move W2, W21
	145 Move X3, X19
	146 Move W4, W31
	147 Move W5, W21
	148 Move X6, X31
	149 Call CompareInfo.CompareOrdinalIgnoreCase, X0, X1, X2, X3, X4, X5
	150 NotImplemented "Instruction CMP not yet implemented."
	151 NotImplemented "Instruction CSET not yet implemented."
	152 Move X0, 0xED2000
	153 Move X0, [X0+1320]
	154 Call 0x1C17D08
	155 Call 0x1C17F10
	156 Move X19, X0
	157 Move X0, 0xED7000
	158 Move X0, [X0+3784]
	159 Call 0x1C17D08
	160 Move X1, X0
	161 Move X0, X19
	162 Move X2, X31
	163 Call ArgumentNullException..ctor, X0, X1
	164 Move X0, 0xEFC000
	165 Move X0, [X0+80]
	166 Call 0x1C17D08
	167 Move X1, X0
	168 Move X0, X19
	169 Call 0x1C17DEC
	170 Call 0x1C17F20
	171 Move X0, 0xED5000
	172 Move X0, [X0+1400]
	173 Call 0x1C17D08
	174 Call 0x1C17F10
	175 Move X19, X0
	176 Move X0, 0xEFB000
	177 Move X0, [X0+4056]
	178 Call 0x1C17D08
	179 Move X20, X0
	180 Move X0, 0xEFB000
	181 Move X0, [X0+4064]
	182 Call 0x1C17D08
	183 Move X2, X0
	184 Move X0, X19
	185 Move X1, X20
	186 Move X3, X31
	187 Call ArgumentException..ctor, X0, X1, X2

Method: System.Boolean EndsWith(System.Char value)

Disassembly:
	0x03227848 MOV X0, X23
	0x0322784C MOV X2, X20
	0x03227850 ADD W1, W9, W8
	0x03227854 BL 0x322728C
	0x03227858 LDR W8, [X22 + 0x10]
	0x0322785C LDR W9, [X21 + 0x10]
	0x03227860 LDR W10, [X20 + 0x10]
	0x03227864 MOV X0, X23
	0x03227868 MOV X2, X19
	0x0322786C ADD W8, W9, W8
	0x03227870 ADD W1, W8, W10
	0x03227874 BL 0x322728C
	0x03227878 LDP X20, X19, [X31 + 0x20]
	0x0322787C LDP X22, X21, [X31 + 0x10]
	0x03227880 MOV X0, X23
	0x03227884 LDP X30, X23, [X31], #0x30
	0x03227888 RET
	0x0322788C MOV X0, X21
	0x03227890 B 0x3227898
	0x03227894 MOV X0, X22

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 NotImplemented "Instruction LDRSW not yet implemented."
	006 Compare W8, 0
	007 JumpIfEqual {18}
	008 Subtract W21, W8, 1
	009 Move X20, X0
	010 Move W19, W1
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move X0, X31
	013 Call ThrowHelper.ThrowIndexOutOfRangeException
	014 Add X8, X20, W21
	015 NotImplemented "Instruction LDRH not yet implemented."
	016 NotImplemented "Instruction CMP not yet implemented."
	017 NotImplemented "Instruction CSET not yet implemented."
	018 Move W0, W31
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Move X21, [X31+40]
	023 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03227898 MOV X1, X20
	0x0322789C MOV X2, X19
	0x032278A0 LDP X20, X19, [X31 + 0x20]
	0x032278A4 LDP X22, X21, [X31 + 0x10]
	0x032278A8 LDP X30, X23, [X31], #0x30
	0x032278AC B 0x32274B8
	0x032278B0 MOV X0, X22
	0x032278B4 MOV X1, X21
	0x032278B8 B 0x322789C
	0x032278BC MOV X0, X22
	0x032278C0 MOV X1, X21
	0x032278C4 MOV X2, X20
	0x032278C8 B 0x32278A0
	0x032278CC STP X29, X30, [X31 - 0x60]!
	0x032278D0 STP X28, X27, [X31 + 0x10]
	0x032278D4 STP X26, X25, [X31 + 0x20]
	0x032278D8 STP X24, X23, [X31 + 0x30]
	0x032278DC STP X22, X21, [X31 + 0x40]
	0x032278E0 STP X20, X19, [X31 + 0x50]
	0x032278E4 ADRP X20, 0xECC000
	0x032278E8 ADRP X19, 0xECE000
	0x032278EC LDR X20, [X20 + 0xAC8]
	0x032278F0 LDR X19, [X19 + 0x278]
	0x032278F4 MOV X21, X0
	0x032278F8 ADRP X25, 0x11B5000
	0x032278FC MOVZ W26, 0x80000000
	0x03227900 LDRB W8, [X25 + 0x367]
	0x03227904 TBNZ X8, 0x0, 0x3227920
	0x03227908 MOV X0, X20
	0x0322790C BL 0x1C16CF4
	0x03227910 MOV X0, X19
	0x03227914 BL 0x1C16CF4
	0x03227918 MOVZ W8, 0x1
	0x0322791C STRB W8, [X25 + 0x367]
	0x03227920 CBZ X21, 0x3227A5C
	0x03227924 LDR X8, [X21 + 0x18]
	0x03227928 CMP W8, 0x2
	0x0322792C B.LT 0x3227A1C
	0x03227930 ADD X28, X21, 0x20
	0x03227934 MOV X22, X31
	0x03227938 AND X8, X8, 0x0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11B6000
	006 Move W8, [X21+863]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xECF000
	014 Move X0, [X0+632]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+863], W8
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Compare X20, 0
	020 JumpIfEqual {44}
	021 Move X8, 0xECF000
	022 Move X8, [X8+632]
	023 Move X9, [X20]
	024 Move X8, [X8]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction CSEL not yet implemented."
	027 Compare X8, 0
	028 JumpIfEqual {51}
	029 NotImplemented "Instruction LDRSW not yet implemented."
	030 Move W10, [X8+16]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Add X0, X19, 20
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Add X1, X8, 20
	036 Move X2, X9
	037 ShiftRight X2, 63
	038 And X2, X2, 0x3FFFFFFF
	039 Move X3, X31
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Call SpanHelpers.SequenceEqual, X0, X1, X2
	043 Return X0
	044 Move W0, W31
	045 Move W0, 1
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Return X0
	051 Call 0x1C17F20

Method: System.Boolean Equals(System.String value)

Disassembly:
	0x0322793C MOV X9, X28
	0x03227940 LDR X10, [X9]
	0x03227944 CBZ X10, 0x3227950
	0x03227948 LDRSW X10, [X10 + 0x10]
	0x0322794C ADD X22, X22, X10
	0x03227950 SUBS X8, X8, 0x1
	0x03227954 ADD X9, X9, 0x8
	0x03227958 B.NE 0x3227940
	0x0322795C CMP X22, X26
	0x03227960 B.GE 0x3227A90
	0x03227964 CBZ W22, 0x3227A2C
	0x03227968 MOV W0, W22
	0x0322796C BL 0x1C8825C
	0x03227970 LDR X8, [X21 + 0x18]
	0x03227974 MOV X23, X0
	0x03227978 CMP W8, 0x1

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Compare X1, 0
	003 JumpIfEqual {15}
	004 NotImplemented "Instruction LDRSW not yet implemented."
	005 Move W9, [X1+16]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Add X0, X0, 20
	008 Add X1, X1, 20
	009 Move X2, X8
	010 ShiftRight X2, 63
	011 And X2, X2, 0x3FFFFFFF
	012 Move X3, X31
	013 Call SpanHelpers.SequenceEqual, X0, X1, X2
	014 Return X0
	015 Move W0, W31
	016 Return X0
	017 Move W0, 1
	018 Return X0

Method: System.Boolean Equals(System.String value, System.StringComparison comparisonType)

Disassembly:
	0x0322797C B.LT 0x32279D4
	0x03227980 MOV X29, X31
	0x03227984 MOV W24, W31
	0x03227988 AND X8, X8, 0x0
	0x0322798C CMP X29, W8, UXTW
	0x03227990 B.CS 0x3227A58
	0x03227994 LDR X2, [X28, X29, LSL #3]
	0x03227998 CBZ X2, 0x32279C4
	0x0322799C LDR W27, [X2 + 0x10]
	0x032279A0 CBZ W27, 0x32279C4
	0x032279A4 SUB W8, W22, W24
	0x032279A8 CMP W27, W8
	0x032279AC B.GT 0x32279DC
	0x032279B0 MOV X0, X23
	0x032279B4 MOV W1, W24
	0x032279B8 BL 0x322728C
	0x032279BC LDR W8, [X21 + 0x18]
	0x032279C0 ADD W24, W27, W24
	0x032279C4 ADD X29, X29, 0x1
	0x032279C8 CMP X29, W8, SXTW
	0x032279CC B.LT 0x322798C
	0x032279D0 B 0x32279E0
	0x032279D4 MOV W24, W31
	0x032279D8 B 0x32279E0
	0x032279DC MOVN W24, 0x0
	0x032279E0 CMP W24, W22
	0x032279E4 B.EQ 0x3227A38
	0x032279E8 MOV X0, X21
	0x032279EC MOV X1, X31
	0x032279F0 BL 0x33A01F0
	0x032279F4 CBZ X0, 0x3227A14
	0x032279F8 LDR X23, [X20]
	0x032279FC MOV X22, X0
	0x03227A00 MOV X1, X23
	0x03227A04 BL 0x1C16E00
	0x03227A08 MOV X21, X0
	0x03227A0C CBNZ X0, 0x3227900
	0x03227A10 B 0x3227AC4
	0x03227A14 MOV X21, X31
	0x03227A18 B 0x3227900
	0x03227A1C CBZ X8, 0x3227A2C
	0x03227A20 CBZ W8, 0x3227A58
	0x03227A24 LDR X23, [X21 + 0x20]
	0x03227A28 CBNZ X23, 0x3227A38
	0x03227A2C LDR X8, [X19]
	0x03227A30 LDR X8, [X8 + 0xB8]
	0x03227A34 LDR X23, [X8]
	0x03227A38 MOV X0, X23
	0x03227A3C LDP X20, X19, [X31 + 0x50]
	0x03227A40 LDP X22, X21, [X31 + 0x40]
	0x03227A44 LDP X24, X23, [X31 + 0x30]
	0x03227A48 LDP X26, X25, [X31 + 0x20]
	0x03227A4C LDP X28, X27, [X31 + 0x10]
	0x03227A50 LDP X29, X30, [X31], #0x60
	0x03227A54 RET
	0x03227A58 BL 0x1C16F28
	0x03227A5C ADRP X0, 0xED1000
	0x03227A60 LDR X0, [X0 + 0x528]
	0x03227A64 BL 0x1C16D08
	0x03227A68 BL 0x1C16F10
	0x03227A6C MOV X19, X0
	0x03227A70 ADRP X0, 0xED6000
	0x03227A74 LDR X0, [X0 + 0xED8]
	0x03227A78 BL 0x1C16D08
	0x03227A7C MOV X1, X0
	0x03227A80 MOV X0, X19
	0x03227A84 MOV X2, X31
	0x03227A88 BL 0x330E100
	0x03227A8C B 0x3227AAC
	0x03227A90 ADRP X0, 0xED5000
	0x03227A94 LDR X0, [X0 + 0xDB8]
	0x03227A98 BL 0x1C16D08
	0x03227A9C BL 0x1C16F10
	0x03227AA0 MOV X1, X31
	0x03227AA4 MOV X19, X0
	0x03227AA8 BL 0x339F30C
	0x03227AAC ADRP X0, 0xEFB000
	0x03227AB0 LDR X0, [X0 + 0x90]
	0x03227AB4 BL 0x1C16D08
	0x03227AB8 MOV X1, X0
	0x03227ABC MOV X0, X19
	0x03227AC0 BL 0x1C16DEC
	0x03227AC4 MOV X0, X22
	0x03227AC8 MOV X1, X23
	0x03227ACC BL 0x1C171E0
	0x03227AD0 SUB X31, X31, 0x70
	0x03227AD4 STR X30, [X31 + 0x40]
	0x03227AD8 STP X22, X21, [X31 + 0x50]
	0x03227ADC STP X20, X19, [X31 + 0x60]
	0x03227AE0 ADRP X22, 0x11B5000
	0x03227AE4 LDRB W8, [X22 + 0x368]
	0x03227AE8 MOV X21, X2
	0x03227AEC MOV X19, X1
	0x03227AF0 MOV X20, X0
	0x03227AF4 TBNZ X8, 0x0, 0x3227B0C
	0x03227AF8 ADRP X0, 0xEFB000
	0x03227AFC LDR X0, [X0 + 0x98]
	0x03227B00 BL 0x1C16CF4
	0x03227B04 MOVZ W8, 0x1
	0x03227B08 STRB W8, [X22 + 0x368]
	0x03227B0C CBZ X19, 0x3227B88
	0x03227B10 ADRP X8, 0xEFB000
	0x03227B14 LDR X8, [X8 + 0x98]
	0x03227B18 LDR W22, [X19 + 0x10]
	0x03227B1C LDR X0, [X8]
	0x03227B20 LDR W8, [X0 + 0xE0]
	0x03227B24 CBNZ W8, 0x3227B2C
	0x03227B28 BL 0x1C16DFC
	0x03227B2C MOV X0, X21
	0x03227B30 MOV X1, X31
	0x03227B34 BL 0x338CD78
	0x03227B38 ADD W0, W22, W0, 0x3, LSL
	0x03227B3C MOV X1, X31
	0x03227B40 BL 0x3235A9C
	0x03227B44 LDP V1, V0, [X21]
	0x03227B48 STP V1, V0, [X31 + 0x20]
	0x03227B4C CBZ X0, 0x3227BD0
	0x03227B50 LDP V0, V1, [X31 + 0x20]
	0x03227B54 ADD X3, X31, 0x0
	0x03227B58 MOV X1, X20
	0x03227B5C MOV X2, X19
	0x03227B60 MOV X4, X31
	0x03227B64 STP V0, V1, [X31]
	0x03227B68 BL 0x323427C
	0x03227B6C MOV X1, X31
	0x03227B70 BL 0x3235BE8
	0x03227B74 LDP X20, X19, [X31 + 0x60]
	0x03227B78 LDP X22, X21, [X31 + 0x50]
	0x03227B7C LDR X30, [X31 + 0x40]
	0x03227B80 ADD X31, X31, 0x70
	0x03227B84 RET
	0x03227B88 ADRP X0, 0xED1000
	0x03227B8C LDR X0, [X0 + 0x528]
	0x03227B90 BL 0x1C16D08
	0x03227B94 BL 0x1C16F10
	0x03227B98 MOV X19, X0
	0x03227B9C ADRP X0, 0xEFB000
	0x03227BA0 LDR X0, [X0 + 0xA0]
	0x03227BA4 BL 0x1C16D08
	0x03227BA8 MOV X1, X0
	0x03227BAC MOV X0, X19
	0x03227BB0 MOV X2, X31
	0x03227BB4 BL 0x330E100
	0x03227BB8 ADRP X0, 0xEFB000
	0x03227BBC LDR X0, [X0 + 0xA8]
	0x03227BC0 BL 0x1C16D08
	0x03227BC4 MOV X1, X0
	0x03227BC8 MOV X0, X19
	0x03227BCC BL 0x1C16DEC
	0x03227BD0 BL 0x1C16F20
	0x03227BD4 SUB X31, X31, 0x50
	0x03227BD8 STP X30, X19, [X31 + 0x40]
	0x03227BDC MOV X19, X0
	0x03227BE0 MOVI V0.2D, 0x0
	0x03227BE4 ADD X0, X31, 0x20
	0x03227BE8 MOV X3, X31
	0x03227BEC STP V0, V0, [X31 + 0x20]
	0x03227BF0 BL 0x338CC1C
	0x03227BF4 LDP V0, V1, [X31 + 0x20]
	0x03227BF8 ADD X2, X31, 0x0
	0x03227BFC MOV X0, X31
	0x03227C00 MOV X1, X19
	0x03227C04 STP V0, V1, [X31]
	0x03227C08 BL 0x3227AD0
	0x03227C0C LDP X30, X19, [X31 + 0x40]
	0x03227C10 ADD X31, X31, 0x50

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11B6000
	007 Move W8, [X22+864]
	008 Move W21, W2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xEFB000
	016 Move X0, [X0+4048]
	017 Call 0x1C17CF4
	018 Move X0, 0xECF000
	019 Move X0, [X0+3144]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+864], W8
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Compare X19, 0
	025 JumpIfEqual {57}
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X9, -40435712
	028 Move W8, W21
	029 Add X9, X9, 1115
	030 NotImplemented "Instruction ADR not yet implemented."
	031 Move W11, [X9]
	032 Add X10, X10, X11
	033 CallNoReturn X10
	034 Move X8, 0xECF000
	035 Move X8, [X8+3144]
	036 Move X0, [X8]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X0, X31
	042 Call CultureInfo.get_CurrentCulture
	043 Compare X0, 0
	044 JumpIfEqual {157}
	045 Move X8, [X0]
	046 Move X9, [X8+504]
	047 Move X1, [X8+512]
	048 NotImplemented "Instruction BLR not yet implemented."
	049 Compare X0, 0
	050 JumpIfNotEqual {91}
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move W0, 49
	053 Move W1, 47
	054 Move X2, X31
	055 Call ThrowHelper.ThrowArgumentException, X0, X1
	056 Move W0, 1
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move W0, 49
	059 Move W1, 47
	060 Move X2, X31
	061 Call ThrowHelper.ThrowArgumentException, X0, X1
	062 Move X8, 0xECF000
	063 Move X8, [X8+3144]
	064 Move X0, [X8]
	065 Move W8, [X0+224]
	066 Compare W8, 0
	067 JumpIfNotEqual {69}
	068 Call 0x1C17DFC
	069 Move X0, X31
	070 Call CultureInfo.get_CurrentCulture
	071 Compare X0, 0
	072 JumpIfEqual {157}
	073 Move X8, [X0]
	074 Move X9, [X8+504]
	075 Move X1, [X8+512]
	076 NotImplemented "Instruction BLR not yet implemented."
	077 Compare X0, 0
	078 JumpIfNotEqual {107}
	079 Move X21, 0xEFB000
	080 Move X21, [X21+4048]
	081 Move X0, [X21]
	082 Move W8, [X0+224]
	083 Compare W8, 0
	084 JumpIfNotEqual {87}
	085 Call 0x1C17DFC
	086 Move X0, [X21]
	087 Move X8, [X0+184]
	088 Move X0, [X8]
	089 Compare X0, 0
	090 JumpIfEqual {157}
	091 Move X8, [X0]
	092 Move X1, X20
	093 Move X2, X19
	094 Move W3, W31
	095 Move X21, 0xEFB000
	096 Move X21, [X21+4048]
	097 Move X0, [X21]
	098 Move W8, [X0+224]
	099 Compare W8, 0
	100 JumpIfNotEqual {103}
	101 Call 0x1C17DFC
	102 Move X0, [X21]
	103 Move X8, [X0+184]
	104 Move X0, [X8]
	105 Compare X0, 0
	106 JumpIfEqual {157}
	107 Move X8, [X0]
	108 Move W3, 1
	109 Move X1, X20
	110 Move X2, X19
	111 Move X9, [X8+424]
	112 Move X4, [X8+432]
	113 NotImplemented "Instruction BLR not yet implemented."
	114 NotImplemented "Instruction CMP not yet implemented."
	115 NotImplemented "Instruction CSET not yet implemented."
	116 NotImplemented "Instruction LDRSW not yet implemented."
	117 Move W9, [X19+16]
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Add X0, X20, 20
	120 Add X1, X19, 20
	121 Move X20, [X31+32]
	122 Move X19, [X31+40]
	123 Move X22, [X31+16]
	124 Move X21, [X31+24]
	125 Move X2, X8
	126 ShiftRight X2, 63
	127 And X2, X2, 0x3FFFFFFF
	128 Move X3, X31
	129 Move X30, [X31+48]
	130 Call SpanHelpers.SequenceEqual, X0, X1, X2
	131 Return X0
	132 Move W21, [X20+16]
	133 Move W8, [X19+16]
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Move X8, 0xEFB000
	136 Move X8, [X8+4048]
	137 Move X0, [X8]
	138 Move W8, [X0+224]
	139 Compare W8, 0
	140 JumpIfNotEqual {142}
	141 Call 0x1C17DFC
	142 Move X0, X20
	143 Move W1, W31
	144 Move W2, W21
	145 Move X3, X19
	146 Move W4, W31
	147 Move W5, W21
	148 Move X6, X31
	149 Call CompareInfo.CompareOrdinalIgnoreCase, X0, X1, X2, X3, X4, X5
	150 Move W0, W31
	151 Move X20, [X31+32]
	152 Move X19, [X31+40]
	153 Move X22, [X31+16]
	154 Move X21, [X31+24]
	155 Move X30, [X31+48]
	156 Return X0
	157 Call 0x1C17F20
	158 Move X0, 0xED5000
	159 Move X0, [X0+1400]
	160 Call 0x1C17D08
	161 Call 0x1C17F10
	162 Move X19, X0
	163 Move X0, 0xEFB000
	164 Move X0, [X0+4056]
	165 Call 0x1C17D08
	166 Move X20, X0
	167 Move X0, 0xEFB000
	168 Move X0, [X0+4064]
	169 Call 0x1C17D08
	170 Move X2, X0
	171 Move X0, X19
	172 Move X1, X20
	173 Move X3, X31
	174 Call ArgumentException..ctor, X0, X1, X2
	175 Move X0, 0xEFC000
	176 Move X0, [X0+88]
	177 Call 0x1C17D08
	178 Move X1, X0
	179 Move X0, X19
	180 Call 0x1C17DEC

Method: System.Boolean Equals(System.String a, System.String b)

Disassembly:
	0x03227C14 RET
	0x03227C18 SUB X31, X31, 0x50
	0x03227C1C STP X30, X19, [X31 + 0x40]
	0x03227C20 MOV X19, X0
	0x03227C24 MOVI V0.2D, 0x0
	0x03227C28 ADD X0, X31, 0x20
	0x03227C2C MOV X4, X31
	0x03227C30 STP V0, V0, [X31 + 0x20]
	0x03227C34 BL 0x338CC94
	0x03227C38 LDP V0, V1, [X31 + 0x20]
	0x03227C3C ADD X2, X31, 0x0
	0x03227C40 MOV X0, X31
	0x03227C44 MOV X1, X19
	0x03227C48 STP V0, V1, [X31]
	0x03227C4C BL 0x3227AD0
	0x03227C50 LDP X30, X19, [X31 + 0x40]
	0x03227C54 ADD X31, X31, 0x50
	0x03227C58 RET
	0x03227C5C SUB X31, X31, 0x60

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move W8, W31
	003 Compare X0, 0
	004 JumpIfEqual {20}
	005 Compare X1, 0
	006 JumpIfEqual {20}
	007 NotImplemented "Instruction LDRSW not yet implemented."
	008 Move W9, [X1+16]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Add X0, X0, 20
	011 Add X1, X1, 20
	012 Move X2, X8
	013 ShiftRight X2, 63
	014 And X2, X2, 0x3FFFFFFF
	015 Move X3, X31
	016 Call SpanHelpers.SequenceEqual, X0, X1, X2
	017 Return X0
	018 Move W8, 1
	019 Move W8, W31
	020 Move W0, W8
	021 Return X0

Method: System.Boolean Equals(System.String a, System.String b, System.StringComparison comparisonType)

Disassembly:
	0x03227C60 STR X30, [X31 + 0x40]
	0x03227C64 STP X20, X19, [X31 + 0x50]
	0x03227C68 MOV X19, X0
	0x03227C6C CBZ X1, 0x3227CAC
	0x03227C70 MOVI V0.2D, 0x0
	0x03227C74 ADD X0, X31, 0x20
	0x03227C78 MOV X2, X31
	0x03227C7C STP V0, V0, [X31 + 0x20]
	0x03227C80 BL 0x338CD18
	0x03227C84 LDP V0, V1, [X31 + 0x20]
	0x03227C88 ADD X2, X31, 0x0
	0x03227C8C MOV X0, X31
	0x03227C90 MOV X1, X19
	0x03227C94 STP V0, V1, [X31]
	0x03227C98 BL 0x3227AD0
	0x03227C9C LDP X20, X19, [X31 + 0x50]
	0x03227CA0 LDR X30, [X31 + 0x40]
	0x03227CA4 ADD X31, X31, 0x60
	0x03227CA8 RET
	0x03227CAC ADRP X8, 0xEFB000
	0x03227CB0 ADRP X9, 0xEFB000
	0x03227CB4 LDR X8, [X8 + 0x88]
	0x03227CB8 LDR X9, [X9 + 0xA0]
	0x03227CBC CMP X19, 0x0
	0x03227CC0 CSEL X0, X9, X8, EQ
	0x03227CC4 BL 0x1C16D08
	0x03227CC8 MOV X19, X0
	0x03227CCC ADRP X0, 0xED1000
	0x03227CD0 LDR X0, [X0 + 0x528]
	0x03227CD4 BL 0x1C16D08
	0x03227CD8 BL 0x1C16F10
	0x03227CDC MOV X1, X19
	0x03227CE0 MOV X2, X31
	0x03227CE4 MOV X20, X0
	0x03227CE8 BL 0x330E100
	0x03227CEC ADRP X0, 0xEFB000
	0x03227CF0 LDR X0, [X0 + 0xB0]
	0x03227CF4 BL 0x1C16D08
	0x03227CF8 MOV X1, X0
	0x03227CFC MOV X0, X20
	0x03227D00 BL 0x1C16DEC
	0x03227D04 SUB X31, X31, 0x60
	0x03227D08 STR X30, [X31 + 0x40]
	0x03227D0C STP X20, X19, [X31 + 0x50]
	0x03227D10 MOV X19, X1
	0x03227D14 MOV X20, X0
	0x03227D18 MOVI V0.2D, 0x0
	0x03227D1C ADD X0, X31, 0x20
	0x03227D20 MOV X1, X2
	0x03227D24 MOV X2, X31
	0x03227D28 STP V0, V0, [X31 + 0x20]
	0x03227D2C BL 0x338CBA8
	0x03227D30 LDP V0, V1, [X31 + 0x20]
	0x03227D34 ADD X2, X31, 0x0
	0x03227D38 MOV X0, X20
	0x03227D3C MOV X1, X19
	0x03227D40 STP V0, V1, [X31]
	0x03227D44 BL 0x3227AD0
	0x03227D48 LDP X20, X19, [X31 + 0x50]
	0x03227D4C LDR X30, [X31 + 0x40]
	0x03227D50 ADD X31, X31, 0x60
	0x03227D54 RET
	0x03227D58 SUB X31, X31, 0x60
	0x03227D5C STR X30, [X31 + 0x40]
	0x03227D60 STP X20, X19, [X31 + 0x50]
	0x03227D64 MOV X19, X1
	0x03227D68 MOV X20, X0
	0x03227D6C MOVI V0.2D, 0x0
	0x03227D70 ADD X0, X31, 0x20
	0x03227D74 MOV X1, X2
	0x03227D78 MOV X2, X3
	0x03227D7C MOV X3, X31
	0x03227D80 STP V0, V0, [X31 + 0x20]
	0x03227D84 BL 0x338CC1C
	0x03227D88 LDP V0, V1, [X31 + 0x20]
	0x03227D8C ADD X2, X31, 0x0
	0x03227D90 MOV X0, X20
	0x03227D94 MOV X1, X19
	0x03227D98 STP V0, V1, [X31]
	0x03227D9C BL 0x3227AD0
	0x03227DA0 LDP X20, X19, [X31 + 0x50]
	0x03227DA4 LDR X30, [X31 + 0x40]
	0x03227DA8 ADD X31, X31, 0x60
	0x03227DAC RET
	0x03227DB0 SUB X31, X31, 0x60
	0x03227DB4 STR X30, [X31 + 0x40]
	0x03227DB8 STP X20, X19, [X31 + 0x50]
	0x03227DBC MOV X19, X1
	0x03227DC0 MOV X20, X0
	0x03227DC4 MOVI V0.2D, 0x0
	0x03227DC8 ADD X0, X31, 0x20
	0x03227DCC MOV X1, X2
	0x03227DD0 MOV X2, X3
	0x03227DD4 MOV X3, X4
	0x03227DD8 MOV X4, X31
	0x03227DDC STP V0, V0, [X31 + 0x20]
	0x03227DE0 BL 0x338CC94
	0x03227DE4 LDP V0, V1, [X31 + 0x20]
	0x03227DE8 ADD X2, X31, 0x0
	0x03227DEC MOV X0, X20
	0x03227DF0 MOV X1, X19
	0x03227DF4 STP V0, V1, [X31]
	0x03227DF8 BL 0x3227AD0
	0x03227DFC LDP X20, X19, [X31 + 0x50]
	0x03227E00 LDR X30, [X31 + 0x40]
	0x03227E04 ADD X31, X31, 0x60
	0x03227E08 RET
	0x03227E0C SUB X31, X31, 0x60
	0x03227E10 STR X30, [X31 + 0x40]
	0x03227E14 STP X20, X19, [X31 + 0x50]
	0x03227E18 MOV X19, X1
	0x03227E1C CBZ X2, 0x3227E64
	0x03227E20 MOV X20, X0
	0x03227E24 MOVI V0.2D, 0x0
	0x03227E28 ADD X0, X31, 0x20
	0x03227E2C MOV X1, X2
	0x03227E30 MOV X2, X31
	0x03227E34 STP V0, V0, [X31 + 0x20]
	0x03227E38 BL 0x338CD18
	0x03227E3C LDP V0, V1, [X31 + 0x20]
	0x03227E40 ADD X2, X31, 0x0
	0x03227E44 MOV X0, X20
	0x03227E48 MOV X1, X19
	0x03227E4C STP V0, V1, [X31]
	0x03227E50 BL 0x3227AD0
	0x03227E54 LDP X20, X19, [X31 + 0x50]
	0x03227E58 LDR X30, [X31 + 0x40]
	0x03227E5C ADD X31, X31, 0x60
	0x03227E60 RET
	0x03227E64 ADRP X8, 0xEFB000
	0x03227E68 ADRP X9, 0xEFB000
	0x03227E6C LDR X8, [X8 + 0x88]
	0x03227E70 LDR X9, [X9 + 0xA0]
	0x03227E74 CMP X19, 0x0
	0x03227E78 CSEL X0, X9, X8, EQ
	0x03227E7C BL 0x1C16D08
	0x03227E80 MOV X19, X0
	0x03227E84 ADRP X0, 0xED1000
	0x03227E88 LDR X0, [X0 + 0x528]
	0x03227E8C BL 0x1C16D08
	0x03227E90 BL 0x1C16F10
	0x03227E94 MOV X1, X19
	0x03227E98 MOV X2, X31
	0x03227E9C MOV X20, X0
	0x03227EA0 BL 0x330E100
	0x03227EA4 ADRP X0, 0xEFB000
	0x03227EA8 LDR X0, [X0 + 0xB8]
	0x03227EAC BL 0x1C16D08
	0x03227EB0 MOV X1, X0
	0x03227EB4 MOV X0, X20
	0x03227EB8 BL 0x1C16DEC
	0x03227EBC STP X30, X25, [X31 - 0x40]!
	0x03227EC0 STP X24, X23, [X31 + 0x10]
	0x03227EC4 STP X22, X21, [X31 + 0x20]
	0x03227EC8 STP X20, X19, [X31 + 0x30]
	0x03227ECC CBZ X2, 0x3227FAC
	0x03227ED0 MOV W19, W1
	0x03227ED4 TBNZ X1, 0x1F, 0x3227F78
	0x03227ED8 LDR W8, [X0 + 0x10]
	0x03227EDC MOV X22, X0
	0x03227EE0 SUBS W24, W8, W19
	0x03227EE4 B.LT 0x3227F78
	0x03227EE8 MOV X20, X2
	0x03227EEC CBZ W8, 0x3227F60
	0x03227EF0 LDRSW X25, [X20 + 0x10]
	0x03227EF4 CBZ W25, 0x3227F5C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11B6000
	007 Move W8, [X22+865]
	008 Move W21, W2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xEFB000
	016 Move X0, [X0+4048]
	017 Call 0x1C17CF4
	018 Move X0, 0xECF000
	019 Move X0, [X0+3144]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+865], W8
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Compare X20, 0
	025 JumpIfEqual {59}
	026 Compare X19, 0
	027 JumpIfEqual {59}
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X9, -40435712
	030 Move W8, W21
	031 Add X9, X9, 1121
	032 NotImplemented "Instruction ADR not yet implemented."
	033 Move W11, [X9]
	034 Add X10, X10, X11
	035 CallNoReturn X10
	036 Move X8, 0xECF000
	037 Move X8, [X8+3144]
	038 Move X0, [X8]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X31
	044 Call CultureInfo.get_CurrentCulture
	045 Compare X0, 0
	046 JumpIfEqual {159}
	047 Move X8, [X0]
	048 Move X9, [X8+504]
	049 Move X1, [X8+512]
	050 NotImplemented "Instruction BLR not yet implemented."
	051 Compare X0, 0
	052 JumpIfNotEqual {94}
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move W0, 49
	055 Move W1, 47
	056 Move X2, X31
	057 Call ThrowHelper.ThrowArgumentException, X0, X1
	058 Move W0, 1
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move W0, 49
	061 Move W1, 47
	062 Move X2, X31
	063 Call ThrowHelper.ThrowArgumentException, X0, X1
	064 Move W0, W31
	065 Move X8, 0xECF000
	066 Move X8, [X8+3144]
	067 Move X0, [X8]
	068 Move W8, [X0+224]
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Move X0, X31
	073 Call CultureInfo.get_CurrentCulture
	074 Compare X0, 0
	075 JumpIfEqual {159}
	076 Move X8, [X0]
	077 Move X9, [X8+504]
	078 Move X1, [X8+512]
	079 NotImplemented "Instruction BLR not yet implemented."
	080 Compare X0, 0
	081 JumpIfNotEqual {110}
	082 Move X21, 0xEFB000
	083 Move X21, [X21+4048]
	084 Move X0, [X21]
	085 Move W8, [X0+224]
	086 Compare W8, 0
	087 JumpIfNotEqual {90}
	088 Call 0x1C17DFC
	089 Move X0, [X21]
	090 Move X8, [X0+184]
	091 Move X0, [X8]
	092 Compare X0, 0
	093 JumpIfEqual {159}
	094 Move X8, [X0]
	095 Move X1, X20
	096 Move X2, X19
	097 Move W3, W31
	098 Move X21, 0xEFB000
	099 Move X21, [X21+4048]
	100 Move X0, [X21]
	101 Move W8, [X0+224]
	102 Compare W8, 0
	103 JumpIfNotEqual {106}
	104 Call 0x1C17DFC
	105 Move X0, [X21]
	106 Move X8, [X0+184]
	107 Move X0, [X8]
	108 Compare X0, 0
	109 JumpIfEqual {159}
	110 Move X8, [X0]
	111 Move W3, 1
	112 Move X1, X20
	113 Move X2, X19
	114 Move X9, [X8+424]
	115 Move X4, [X8+432]
	116 NotImplemented "Instruction BLR not yet implemented."
	117 NotImplemented "Instruction CMP not yet implemented."
	118 NotImplemented "Instruction CSET not yet implemented."
	119 Move X20, [X31+32]
	120 Move X19, [X31+40]
	121 Move X22, [X31+16]
	122 Move X21, [X31+24]
	123 Move X30, [X31+48]
	124 Return X0
	125 NotImplemented "Instruction LDRSW not yet implemented."
	126 Move W9, [X19+16]
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Add X0, X20, 20
	129 Add X1, X19, 20
	130 Move X20, [X31+32]
	131 Move X19, [X31+40]
	132 Move X22, [X31+16]
	133 Move X21, [X31+24]
	134 Move X2, X8
	135 ShiftRight X2, 63
	136 And X2, X2, 0x3FFFFFFF
	137 Move X3, X31
	138 Move X30, [X31+48]
	139 Call SpanHelpers.SequenceEqual, X0, X1, X2
	140 Return X0
	141 Move W21, [X20+16]
	142 Move W8, [X19+16]
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Move X8, 0xEFB000
	145 Move X8, [X8+4048]
	146 Move X0, [X8]
	147 Move W8, [X0+224]
	148 Compare W8, 0
	149 JumpIfNotEqual {151}
	150 Call 0x1C17DFC
	151 Move X0, X20
	152 Move W1, W31
	153 Move W2, W21
	154 Move X3, X19
	155 Move W4, W31
	156 Move W5, W21
	157 Move X6, X31
	158 Call CompareInfo.CompareOrdinalIgnoreCase, X0, X1, X2, X3, X4, X5
	159 Call 0x1C17F20
	160 Move X0, 0xED5000
	161 Move X0, [X0+1400]
	162 Call 0x1C17D08
	163 Call 0x1C17F10
	164 Move X19, X0
	165 Move X0, 0xEFB000
	166 Move X0, [X0+4056]
	167 Call 0x1C17D08
	168 Move X20, X0
	169 Move X0, 0xEFB000
	170 Move X0, [X0+4064]
	171 Call 0x1C17D08
	172 Move X2, X0
	173 Move X0, X19
	174 Move X1, X20
	175 Move X3, X31
	176 Call ArgumentException..ctor, X0, X1, X2
	177 Move X0, 0xEFC000
	178 Move X0, [X0+96]
	179 Call 0x1C17D08
	180 Move X1, X0
	181 Move X0, X19
	182 Call 0x1C17DEC

Method: System.Boolean op_Equality(System.String a, System.String b)

Disassembly:
	0x0321CA08 B 0x32213F8

ISIL:
	001 Call String.Equals, X0, X1
	002 Return X0

Method: System.Boolean op_Inequality(System.String a, System.String b)

Disassembly:
	0x03227EF8 ADD W0, W25, W8
	0x03227EFC BL 0x1C8825C
	0x03227F00 CBZ X0, 0x3227FF4
	0x03227F04 ADD X22, X22, 0x14
	0x03227F08 ADD X23, X0, 0x14
	0x03227F0C MOV X21, X0

ISIL:
	001 Move [X31-16], X30
	002 Call String.Equals, X0, X1
	003 NotImplemented "Instruction ORN not yet implemented."
	004 And W0, W8, 1
	005 Move X30, [X31+16]
	006 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x03227F10 UBFM W2, W19, 0x1F, 0x1E

ISIL:
No ISIL was generated
Method: System.Int32 GetLegacyNonRandomizedHashCode()

Disassembly:
	0x03227F14 MOV X0, X23
	0x03227F18 MOV X1, X22
	0x03227F1C MOV X3, X31
	0x03227F20 ADD X20, X20, 0x14
	0x03227F24 BL 0x33A8CD0
	0x03227F28 ADD X23, X23, W19, 0x1, UXTW
	0x03227F2C UBFM W2, W25, 0x1F, 0x1E
	0x03227F30 MOV X0, X23
	0x03227F34 MOV X1, X20
	0x03227F38 MOV X3, X31
	0x03227F3C BL 0x33A8CD0
	0x03227F40 ADD X0, X23, X25, 0x1, LSL
	0x03227F44 ADD X1, X22, W19, 0x1, UXTW
	0x03227F48 UBFM W2, W24, 0x1F, 0x1E
	0x03227F4C MOV X3, X31
	0x03227F50 BL 0x33A8CD0
	0x03227F54 MOV X20, X21
	0x03227F58 B 0x3227F60
	0x03227F5C MOV X20, X22
	0x03227F60 MOV X0, X20

ISIL:
	001 NotImplemented "Instruction LDRH not yet implemented."
	002 Compare W10, 0
	003 JumpIfEqual {17}
	004 Move W8, 0x1505
	005 Move W9, 0x1505
	006 NotImplemented "Instruction LDRH not yet implemented."
	007 And W10, W10, 0xFFFF
	008 Add W8, W8, W8
	009 Xor W8, W8, W10
	010 Compare W11, 0
	011 JumpIfEqual {19}
	012 NotImplemented "Instruction LDRH not yet implemented."
	013 Add W9, W9, W9
	014 Xor W9, W9, W11
	015 Compare W10, 0
	016 JumpIfNotEqual {6}
	017 Move W9, 0x1505
	018 Move W8, 0x1505
	019 Move W10, 0x8B65
	020 NotImplemented "Instruction MOVK not yet implemented."
	021 NotImplemented "Instruction MADD not yet implemented."
	022 Return X0

Method: System.Boolean StartsWith(System.String value)

Disassembly:
	0x03227F64 LDP X20, X19, [X31 + 0x30]
	0x03227F68 LDP X22, X21, [X31 + 0x20]
	0x03227F6C LDP X24, X23, [X31 + 0x10]
	0x03227F70 LDP X30, X25, [X31], #0x40
	0x03227F74 RET
	0x03227F78 ADRP X0, 0xED4000
	0x03227F7C LDR X0, [X0 + 0x760]
	0x03227F80 BL 0x1C16D08
	0x03227F84 BL 0x1C16F10
	0x03227F88 MOV X19, X0
	0x03227F8C ADRP X0, 0xEF4000
	0x03227F90 LDR X0, [X0 + 0x658]
	0x03227F94 BL 0x1C16D08
	0x03227F98 MOV X1, X0
	0x03227F9C MOV X0, X19
	0x03227FA0 MOV X2, X31
	0x03227FA4 BL 0x3316014
	0x03227FA8 B 0x3227FDC
	0x03227FAC ADRP X0, 0xED1000
	0x03227FB0 LDR X0, [X0 + 0x528]
	0x03227FB4 BL 0x1C16D08
	0x03227FB8 BL 0x1C16F10

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {4}
	003 Move W2, W31
	004 Move [X31-16], X30
	005 Move [X31-8], X19
	006 Move X0, 0xED2000
	007 Move X0, [X0+1320]
	008 Call 0x1C17D08
	009 Call 0x1C17F10
	010 Move X19, X0
	011 Move X0, 0xED7000
	012 Move X0, [X0+3784]
	013 Call 0x1C17D08
	014 Move X1, X0
	015 Move X0, X19
	016 Move X2, X31
	017 Call ArgumentNullException..ctor, X0, X1
	018 Move X0, 0xEFC000
	019 Move X0, [X0+104]
	020 Call 0x1C17D08
	021 Move X1, X0
	022 Move X0, X19
	023 Call 0x1C17DEC

Method: System.Boolean StartsWith(System.String value, System.StringComparison comparisonType)

Disassembly:
	0x03227FBC MOV X19, X0
	0x03227FC0 ADRP X0, 0xED6000
	0x03227FC4 LDR X0, [X0 + 0xEC8]
	0x03227FC8 BL 0x1C16D08
	0x03227FCC MOV X1, X0
	0x03227FD0 MOV X0, X19
	0x03227FD4 MOV X2, X31
	0x03227FD8 BL 0x330E100
	0x03227FDC ADRP X0, 0xEFB000
	0x03227FE0 LDR X0, [X0 + 0xC0]
	0x03227FE4 BL 0x1C16D08
	0x03227FE8 MOV X1, X0
	0x03227FEC MOV X0, X19
	0x03227FF0 BL 0x1C16DEC
	0x03227FF4 BL 0x1C16F20
	0x03227FF8 STP X30, X19, [X31 - 0x10]!
	0x03227FFC CBZ X1, 0x3228010
	0x03228000 LDR W3, [X1 + 0x18]
	0x03228004 MOV W2, W31
	0x03228008 LDP X30, X19, [X31], #0x10
	0x0322800C B 0x3228058
	0x03228010 ADRP X0, 0xED0000
	0x03228014 LDR X0, [X0 + 0x528]
	0x03228018 BL 0x1C16D08
	0x0322801C BL 0x1C16F10
	0x03228020 MOV X19, X0
	0x03228024 ADRP X0, 0xED5000
	0x03228028 LDR X0, [X0 + 0xEC8]
	0x0322802C BL 0x1C16D08
	0x03228030 MOV X1, X0
	0x03228034 MOV X0, X19
	0x03228038 MOV X2, X31
	0x0322803C BL 0x330E100
	0x03228040 ADRP X0, 0xEFA000
	0x03228044 LDR X0, [X0 + 0xC8]
	0x03228048 BL 0x1C16D08
	0x0322804C MOV X1, X0
	0x03228050 MOV X0, X19
	0x03228054 BL 0x1C16DEC
	0x03228058 STP X30, X23, [X31 - 0x30]!
	0x0322805C STP X22, X21, [X31 + 0x10]
	0x03228060 STP X20, X19, [X31 + 0x20]
	0x03228064 ADRP X23, 0x11B4000
	0x03228068 LDRB W8, [X23 + 0x36A]
	0x0322806C MOV W19, W3
	0x03228070 MOV W20, W2
	0x03228074 MOV X21, X1
	0x03228078 MOV X22, X0
	0x0322807C TBNZ X8, 0x0, 0x3228094
	0x03228080 ADRP X0, 0xECD000
	0x03228084 LDR X0, [X0 + 0x278]
	0x03228088 BL 0x1C16CF4
	0x0322808C MOVZ W8, 0x1
	0x03228090 STRB W8, [X23 + 0x36A]
	0x03228094 CBNZ X22, 0x32280B0
	0x03228098 ADRP X8, 0xECD000
	0x0322809C LDR X8, [X8 + 0x278]
	0x032280A0 LDR X8, [X8]
	0x032280A4 LDR X8, [X8 + 0xB8]
	0x032280A8 LDR X22, [X8]
	0x032280AC CBZ X22, 0x32280D4
	0x032280B0 LDR W1, [X22 + 0x10]
	0x032280B4 ADD X0, X22, 0x14
	0x032280B8 MOV X2, X21
	0x032280BC MOV W3, W20
	0x032280C0 MOV W4, W19
	0x032280C4 LDP X20, X19, [X31 + 0x20]
	0x032280C8 LDP X22, X21, [X31 + 0x10]
	0x032280CC LDP X30, X23, [X31], #0x30
	0x032280D0 B 0x32285A4
	0x032280D4 BL 0x1C16F20
	0x032280D8 STP X30, X25, [X31 - 0x40]!
	0x032280DC STP X24, X23, [X31 + 0x10]
	0x032280E0 STP X22, X21, [X31 + 0x20]
	0x032280E4 STP X20, X19, [X31 + 0x30]
	0x032280E8 ADRP X21, 0x11B4000
	0x032280EC LDRB W8, [X21 + 0x369]
	0x032280F0 MOV X19, X1
	0x032280F4 MOV X20, X0
	0x032280F8 TBNZ X8, 0x0, 0x3228140
	0x032280FC ADRP X0, 0xECB000
	0x03228100 LDR X0, [X0 + 0xE00]
	0x03228104 BL 0x1C16CF4
	0x03228108 ADRP X0, 0xECB000
	0x0322810C LDR X0, [X0 + 0xF70]
	0x03228110 BL 0x1C16CF4
	0x03228114 ADRP X0, 0xECB000
	0x03228118 LDR X0, [X0 + 0xF78]
	0x0322811C BL 0x1C16CF4
	0x03228120 ADRP X0, 0xECB000
	0x03228124 LDR X0, [X0 + 0xE18]
	0x03228128 BL 0x1C16CF4
	0x0322812C ADRP X0, 0xECD000
	0x03228130 LDR X0, [X0 + 0x278]
	0x03228134 BL 0x1C16CF4
	0x03228138 MOVZ W8, 0x1
	0x0322813C STRB W8, [X21 + 0x369]
	0x03228140 CBZ X19, 0x3228478
	0x03228144 ADRP X10, 0xECB000
	0x03228148 LDR X8, [X19]
	0x0322814C LDR X10, [X10 + 0xF70]
	0x03228150 LDRH W9, [X8 + 0x12E]
	0x03228154 LDR X1, [X10]
	0x03228158 CBZ X9, 0x322817C
	0x0322815C LDR X10, [X8 + 0xB0]
	0x03228160 ADD X10, X10, 0x8
	0x03228164 LDUR X11, [X10 - 0x8]
	0x03228168 CMP X11, X1
	0x0322816C B.EQ 0x322818C
	0x03228170 SUBS X9, X9, 0x1
	0x03228174 ADD X10, X10, 0x10
	0x03228178 B.NE 0x3228164
	0x0322817C MOV X0, X19
	0x03228180 MOV W2, W31
	0x03228184 BL 0x1C5C788
	0x03228188 B 0x3228198
	0x0322818C LDRSW X9, [X10]
	0x03228190 ADD X8, X8, X9, 0x4, LSL
	0x03228194 ADD X0, X8, 0x138
	0x03228198 LDP X8, X1, [X0]
	0x0322819C ADRP X23, 0xECB000
	0x032281A0 LDR X23, [X23 + 0xE00]
	0x032281A4 MOV X0, X19
	0x032281A8 BLR X8
	0x032281AC MOV X19, X0
	0x032281B0 CBZ X0, 0x32284C0
	0x032281B4 ADRP X24, 0xECB000
	0x032281B8 LDR X8, [X19]
	0x032281BC LDR X24, [X24 + 0xE18]
	0x032281C0 LDRH W9, [X8 + 0x12E]
	0x032281C4 LDR X1, [X24]
	0x032281C8 CBZ X9, 0x32281EC
	0x032281CC LDR X10, [X8 + 0xB0]
	0x032281D0 ADD X10, X10, 0x8
	0x032281D4 LDUR X11, [X10 - 0x8]
	0x032281D8 CMP X11, X1
	0x032281DC B.EQ 0x32281FC
	0x032281E0 SUBS X9, X9, 0x1
	0x032281E4 ADD X10, X10, 0x10
	0x032281E8 B.NE 0x32281D4
	0x032281EC MOV X0, X19
	0x032281F0 MOV W2, W31
	0x032281F4 BL 0x1C5C788
	0x032281F8 B 0x3228208
	0x032281FC LDRSW X9, [X10]
	0x03228200 ADD X8, X8, X9, 0x4, LSL
	0x03228204 ADD X0, X8, 0x138
	0x03228208 LDP X8, X1, [X0]
	0x0322820C MOV X0, X19
	0x03228210 BLR X8
	0x03228214 TBZ X0, 0x0, 0x32283E8
	0x03228218 ADRP X25, 0xECB000
	0x0322821C LDR X8, [X19]
	0x03228220 LDR X25, [X25 + 0xF78]
	0x03228224 LDRH W9, [X8 + 0x12E]
	0x03228228 LDR X1, [X25]
	0x0322822C CBZ X9, 0x3228250
	0x03228230 LDR X10, [X8 + 0xB0]
	0x03228234 ADD X10, X10, 0x8
	0x03228238 LDUR X11, [X10 - 0x8]
	0x0322823C CMP X11, X1
	0x03228240 B.EQ 0x3228260
	0x03228244 SUBS X9, X9, 0x1
	0x03228248 ADD X10, X10, 0x10
	0x0322824C B.NE 0x3228238
	0x03228250 MOV X0, X19
	0x03228254 MOV W2, W31
	0x03228258 BL 0x1C5C788
	0x0322825C B 0x322826C
	0x03228260 LDRSW X9, [X10]
	0x03228264 ADD X8, X8, X9, 0x4, LSL
	0x03228268 ADD X0, X8, 0x138
	0x0322826C LDP X8, X1, [X0]
	0x03228270 MOV X0, X19
	0x03228274 BLR X8
	0x03228278 LDR X8, [X19]
	0x0322827C LDR X1, [X24]
	0x03228280 MOV X21, X0
	0x03228284 LDRH W9, [X8 + 0x12E]
	0x03228288 CBZ X9, 0x32282AC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11B6000
	007 Move W8, [X21+866]
	008 Move W22, W2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xEFB000
	016 Move X0, [X0+4048]
	017 Call 0x1C17CF4
	018 Move X0, 0xECF000
	019 Move X0, [X0+3144]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+866], W8
	023 Compare X19, 0
	024 JumpIfEqual {162}
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction LDRSW not yet implemented."
	027 Compare W21, 0
	028 JumpIfEqual {54}
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X9, -40439808
	031 Move W8, W22
	032 Add X9, X9, 1127
	033 NotImplemented "Instruction ADR not yet implemented."
	034 Move W11, [X9]
	035 Add X10, X10, X11
	036 CallNoReturn X10
	037 Move X8, 0xECE000
	038 Move X8, [X8+3144]
	039 Move X0, [X8]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X31
	045 Call CultureInfo.get_CurrentCulture
	046 Compare X0, 0
	047 JumpIfEqual {180}
	048 Move X8, [X0]
	049 Move X9, [X8+504]
	050 Move X1, [X8+512]
	051 NotImplemented "Instruction BLR not yet implemented."
	052 Compare X0, 0
	053 JumpIfNotEqual {95}
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move W0, 49
	056 Move W1, 47
	057 Move X2, X31
	058 Call ThrowHelper.ThrowArgumentException, X0, X1
	059 Move W0, 1
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X22, [X31+16]
	063 Move X21, [X31+24]
	064 Move X30, [X31+48]
	065 Return X0
	066 Move X8, 0xECE000
	067 Move X8, [X8+3144]
	068 Move X0, [X8]
	069 Move W8, [X0+224]
	070 Compare W8, 0
	071 JumpIfNotEqual {73}
	072 Call 0x1C17DFC
	073 Move X0, X31
	074 Call CultureInfo.get_CurrentCulture
	075 Compare X0, 0
	076 JumpIfEqual {180}
	077 Move X8, [X0]
	078 Move X9, [X8+504]
	079 Move X1, [X8+512]
	080 NotImplemented "Instruction BLR not yet implemented."
	081 Compare X0, 0
	082 JumpIfNotEqual {111}
	083 Move X21, 0xEFA000
	084 Move X21, [X21+4048]
	085 Move X0, [X21]
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {91}
	089 Call 0x1C17DFC
	090 Move X0, [X21]
	091 Move X8, [X0+184]
	092 Move X0, [X8]
	093 Compare X0, 0
	094 JumpIfEqual {180}
	095 Move X8, [X0]
	096 Move X1, X20
	097 Move X2, X19
	098 Move W3, W31
	099 Move X21, 0xEFA000
	100 Move X21, [X21+4048]
	101 Move X0, [X21]
	102 Move W8, [X0+224]
	103 Compare W8, 0
	104 JumpIfNotEqual {107}
	105 Call 0x1C17DFC
	106 Move X0, [X21]
	107 Move X8, [X0+184]
	108 Move X0, [X8]
	109 Compare X0, 0
	110 JumpIfEqual {180}
	111 Move X8, [X0]
	112 Move W3, 1
	113 Move X1, X20
	114 Move X2, X19
	115 Move X5, [X8+456]
	116 Move X4, [X8+464]
	117 Move X20, [X31+32]
	118 Move X19, [X31+40]
	119 Move X22, [X31+16]
	120 Move X21, [X31+24]
	121 Move X30, [X31+48]
	122 CallNoReturn X5
	123 Move W8, [X20+16]
	124 NotImplemented "Instruction CMP not yet implemented."
	125 NotImplemented "Instruction LDRH not yet implemented."
	126 NotImplemented "Instruction LDRH not yet implemented."
	127 NotImplemented "Instruction CMP not yet implemented."
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move X2, X21
	130 ShiftRight X2, 63
	131 And X2, X2, 0x3FFFFFFF
	132 Move X0, X20
	133 Move X1, X19
	134 Move X20, [X31+32]
	135 Move X19, [X31+40]
	136 Move X22, [X31+16]
	137 Move X21, [X31+24]
	138 Move X3, X31
	139 Move X30, [X31+48]
	140 Call SpanHelpers.SequenceEqual, X0, X1, X2
	141 Return X0
	142 Move W8, [X20+16]
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Move W0, W31
	145 Move X8, 0xEFA000
	146 Move X8, [X8+4048]
	147 Move X0, [X8]
	148 Move W8, [X0+224]
	149 Compare W8, 0
	150 JumpIfNotEqual {152}
	151 Call 0x1C17DFC
	152 Move X0, X20
	153 Move W1, W31
	154 Move W2, W21
	155 Move X3, X19
	156 Move W4, W31
	157 Move W5, W21
	158 Move X6, X31
	159 Call CompareInfo.CompareOrdinalIgnoreCase, X0, X1, X2, X3, X4, X5
	160 NotImplemented "Instruction CMP not yet implemented."
	161 NotImplemented "Instruction CSET not yet implemented."
	162 Move X0, 0xED1000
	163 Move X0, [X0+1320]
	164 Call 0x1C17D08
	165 Call 0x1C17F10
	166 Move X19, X0
	167 Move X0, 0xED6000
	168 Move X0, [X0+3784]
	169 Call 0x1C17D08
	170 Move X1, X0
	171 Move X0, X19
	172 Move X2, X31
	173 Call ArgumentNullException..ctor, X0, X1
	174 Move X0, 0xEFB000
	175 Move X0, [X0+112]
	176 Call 0x1C17D08
	177 Move X1, X0
	178 Move X0, X19
	179 Call 0x1C17DEC
	180 Call 0x1C17F20
	181 Move X0, 0xED4000
	182 Move X0, [X0+1400]
	183 Call 0x1C17D08
	184 Call 0x1C17F10
	185 Move X19, X0
	186 Move X0, 0xEFA000
	187 Move X0, [X0+4056]
	188 Call 0x1C17D08
	189 Move X20, X0
	190 Move X0, 0xEFA000
	191 Move X0, [X0+4064]
	192 Call 0x1C17D08
	193 Move X2, X0
	194 Move X0, X19
	195 Move X1, X20
	196 Move X3, X31
	197 Call ArgumentException..ctor, X0, X1, X2

Method: System.Void CheckStringComparison(System.StringComparison comparisonType)

Disassembly:
	0x03226BBC LDR X0, [X0 + 0x578]
	0x03226BC0 BL 0x1C16D08
	0x03226BC4 BL 0x1C16F10
	0x03226BC8 MOV X19, X0
	0x03226BCC ADRP X0, 0xEFB000
	0x03226BD0 LDR X0, [X0 + 0xFD8]
	0x03226BD4 BL 0x1C16D08

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move W0, 49
	003 Move W1, 47
	004 Move X2, X31
	005 Call ThrowHelper.ThrowArgumentException, X0, X1
	006 Return 
	007 Return 

Method: System.Void FillStringChecked(System.String dest, System.Int32 destPos, System.String src)

Disassembly:
	0x0322828C LDR X10, [X8 + 0xB0]
	0x03228290 ADD X10, X10, 0x8
	0x03228294 LDUR X11, [X10 - 0x8]
	0x03228298 CMP X11, X1
	0x0322829C B.EQ 0x32282BC
	0x032282A0 SUBS X9, X9, 0x1
	0x032282A4 ADD X10, X10, 0x10
	0x032282A8 B.NE 0x3228294
	0x032282AC MOV X0, X19
	0x032282B0 MOV W2, W31
	0x032282B4 BL 0x1C5C788
	0x032282B8 B 0x32282C8
	0x032282BC LDRSW X9, [X10]
	0x032282C0 ADD X8, X8, X9, 0x4, LSL
	0x032282C4 ADD X0, X8, 0x138
	0x032282C8 LDP X8, X1, [X0]
	0x032282CC MOV X0, X19
	0x032282D0 BLR X8
	0x032282D4 TBZ X0, 0x0, 0x32283E4
	0x032282D8 MOVZ W0, 0x10
	0x032282DC MOV X1, X31
	0x032282E0 BL 0x3235A9C
	0x032282E4 MOV X22, X0
	0x032282E8 CBZ X0, 0x32284CC
	0x032282EC MOV X0, X22
	0x032282F0 MOV X1, X21
	0x032282F4 MOV X2, X31
	0x032282F8 BL 0x32333E0
	0x032282FC MOV X0, X22

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X2, 0
	004 JumpIfEqual {22}
	005 Compare X0, 0
	006 JumpIfEqual {22}
	007 Move W9, [X0+16]
	008 Move W8, [X2+16]
	009 Subtract W9, W9, W1
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Add X9, X0, W1
	012 Add X1, X2, 20
	013 Add X0, X9, 20
	014 Move W2, W8
	015 ShiftRight W2, 31
	016 And W2, W2, 0x3FFFFFFF
	017 Move X3, X31
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Call Buffer.Memmove, X0, X1, X2
	021 Return 
	022 Call 0x1C17F20
	023 Move X0, 0xED6000
	024 Move X0, [X0+3960]
	025 Call 0x1C17D08
	026 Call 0x1C17F10
	027 Move X1, X31
	028 Move X19, X0
	029 Call IndexOutOfRangeException..ctor, X0
	030 Move X0, 0xEFB000
	031 Move X0, [X0+120]
	032 Call 0x1C17D08
	033 Move X1, X0
	034 Move X0, X19
	035 Call 0x1C17DEC

Method: System.String Concat(System.Object arg0, System.Object arg1)

Disassembly:
	0x0322830C LDR X8, [X19]
	0x03228310 LDR X1, [X25]
	0x03228314 LDRH W9, [X8 + 0x12E]
	0x03228318 CBZ X9, 0x322833C
	0x0322831C LDR X10, [X8 + 0xB0]
	0x03228320 ADD X10, X10, 0x8
	0x03228324 LDUR X11, [X10 - 0x8]
	0x03228328 CMP X11, X1
	0x0322832C B.EQ 0x322834C
	0x03228330 SUBS X9, X9, 0x1
	0x03228334 ADD X10, X10, 0x10
	0x03228338 B.NE 0x3228324
	0x0322833C MOV X0, X19
	0x03228340 MOV W2, W31
	0x03228344 BL 0x1C5C788
	0x03228348 B 0x3228358
	0x0322834C LDRSW X9, [X10]
	0x03228350 ADD X8, X8, X9, 0x4, LSL
	0x03228354 ADD X0, X8, 0x138
	0x03228358 LDP X8, X1, [X0]
	0x0322835C MOV X0, X19
	0x03228360 BLR X8
	0x03228364 MOV X1, X0
	0x03228368 MOV X0, X22
	0x0322836C MOV X2, X31
	0x03228370 BL 0x32333E0
	0x03228374 LDR X8, [X19]
	0x03228378 LDR X1, [X24]
	0x0322837C LDRH W9, [X8 + 0x12E]
	0x03228380 CBZ X9, 0x32283A4
	0x03228384 LDR X10, [X8 + 0xB0]
	0x03228388 ADD X10, X10, 0x8
	0x0322838C LDUR X11, [X10 - 0x8]
	0x03228390 CMP X11, X1
	0x03228394 B.EQ 0x32283B4
	0x03228398 SUBS X9, X9, 0x1
	0x0322839C ADD X10, X10, 0x10
	0x032283A0 B.NE 0x322838C
	0x032283A4 MOV X0, X19
	0x032283A8 MOV W2, W31
	0x032283AC BL 0x1C5C788
	0x032283B0 B 0x32283C0
	0x032283B4 LDRSW X9, [X10]
	0x032283B8 ADD X8, X8, X9, 0x4, LSL
	0x032283BC ADD X0, X8, 0x138

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11B5000
	006 Move W8, [X21+867]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {19}
	013 Compare X20, 0
	014 JumpIfEqual {26}
	015 Compare X19, 0
	016 JumpIfEqual {33}
	017 Compare X20, 0
	018 JumpIfNotEqual {40}
	019 Move X0, 0xECE000
	020 Move X0, [X0+632]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+867], W8
	024 Compare X20, 0
	025 JumpIfNotEqual {15}
	026 Move X8, 0xECE000
	027 Move X8, [X8+632]
	028 Move X8, [X8]
	029 Move X8, [X8+184]
	030 Move X20, [X8]
	031 Compare X19, 0
	032 JumpIfNotEqual {17}
	033 Move X8, 0xECE000
	034 Move X8, [X8+632]
	035 Move X8, [X8]
	036 Move X8, [X8+184]
	037 Move X19, [X8]
	038 Compare X20, 0
	039 JumpIfEqual {61}
	040 Move X8, [X20]
	041 Move X0, X20
	042 Move X9, [X8+360]
	043 Move X1, [X8+368]
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Compare X19, 0
	046 JumpIfEqual {61}
	047 Move X8, [X19]
	048 Move X20, X0
	049 Move X0, X19
	050 Move X9, [X8+360]
	051 Move X1, [X8+368]
	052 NotImplemented "Instruction BLR not yet implemented."
	053 Move X1, X0
	054 Move X0, X20
	055 Move X20, [X31+16]
	056 Move X19, [X31+24]
	057 Move X30, [X31+32]
	058 Move X21, [X31+40]
	059 Call String.Concat, X0, X1
	060 Return X0
	061 Call 0x1C17F20

Method: System.String Concat(System.Object arg0, System.Object arg1, System.Object arg2)

Disassembly:
	0x032283C0 LDP X8, X1, [X0]
	0x032283C4 MOV X0, X19
	0x032283C8 BLR X8
	0x032283CC TBNZ X0, 0x0, 0x32282FC
	0x032283D0 MOV X0, X22
	0x032283D4 MOV X1, X31
	0x032283D8 BL 0x3235BE8
	0x032283DC MOV X21, X0
	0x032283E0 B 0x32283FC
	0x032283E4 CBNZ X21, 0x32283FC
	0x032283E8 ADRP X8, 0xECD000
	0x032283EC LDR X8, [X8 + 0x278]
	0x032283F0 LDR X8, [X8]
	0x032283F4 LDR X8, [X8 + 0xB8]
	0x032283F8 LDR X21, [X8]
	0x032283FC MOV X20, X31
	0x03228400 CBZ X19, 0x322845C
	0x03228404 LDR X8, [X19]
	0x03228408 LDR X1, [X23]
	0x0322840C LDRH W9, [X8 + 0x12E]
	0x03228410 CBZ X9, 0x3228434
	0x03228414 LDR X10, [X8 + 0xB0]
	0x03228418 ADD X10, X10, 0x8
	0x0322841C LDUR X11, [X10 - 0x8]
	0x03228420 CMP X11, X1
	0x03228424 B.EQ 0x3228444
	0x03228428 SUBS X9, X9, 0x1
	0x0322842C ADD X10, X10, 0x10
	0x03228430 B.NE 0x322841C
	0x03228434 MOV X0, X19
	0x03228438 MOV W2, W31
	0x0322843C BL 0x1C5C788
	0x03228440 B 0x3228450
	0x03228444 LDRSW X9, [X10]
	0x03228448 ADD X8, X8, X9, 0x4, LSL
	0x0322844C ADD X0, X8, 0x138
	0x03228450 LDP X8, X1, [X0]
	0x03228454 MOV X0, X19
	0x03228458 BLR X8
	0x0322845C CBNZ X20, 0x32284C4
	0x03228460 MOV X0, X21
	0x03228464 LDP X20, X19, [X31 + 0x30]
	0x03228468 LDP X22, X21, [X31 + 0x20]
	0x0322846C LDP X24, X23, [X31 + 0x10]
	0x03228470 LDP X30, X25, [X31], #0x40
	0x03228474 RET
	0x03228478 ADRP X0, 0xED0000
	0x0322847C LDR X0, [X0 + 0x528]
	0x03228480 BL 0x1C16D08
	0x03228484 BL 0x1C16F10
	0x03228488 MOV X19, X0
	0x0322848C ADRP X0, 0xED5000
	0x03228490 LDR X0, [X0 + 0xED8]
	0x03228494 BL 0x1C16D08
	0x03228498 MOV X1, X0
	0x0322849C MOV X0, X19
	0x032284A0 MOV X2, X31
	0x032284A4 BL 0x330E100
	0x032284A8 ADRP X0, 0xEFA000
	0x032284AC LDR X0, [X0 + 0xD0]
	0x032284B0 BL 0x1C16D08
	0x032284B4 MOV X1, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11B5000
	007 Move W8, [X22+868]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {23}
	015 Compare X21, 0
	016 JumpIfEqual {30}
	017 Compare X20, 0
	018 JumpIfEqual {37}
	019 Compare X19, 0
	020 JumpIfEqual {44}
	021 Compare X21, 0
	022 JumpIfNotEqual {51}
	023 Move X0, 0xECE000
	024 Move X0, [X0+632]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X22+868], W8
	028 Compare X21, 0
	029 JumpIfNotEqual {17}
	030 Move X8, 0xECE000
	031 Move X8, [X8+632]
	032 Move X8, [X8]
	033 Move X8, [X8+184]
	034 Move X21, [X8]
	035 Compare X20, 0
	036 JumpIfNotEqual {19}
	037 Move X8, 0xECE000
	038 Move X8, [X8+632]
	039 Move X8, [X8]
	040 Move X8, [X8+184]
	041 Move X20, [X8]
	042 Compare X19, 0
	043 JumpIfNotEqual {21}
	044 Move X8, 0xECE000
	045 Move X8, [X8+632]
	046 Move X8, [X8]
	047 Move X8, [X8+184]
	048 Move X19, [X8]
	049 Compare X21, 0
	050 JumpIfEqual {80}
	051 Move X8, [X21]
	052 Move X0, X21
	053 Move X9, [X8+360]
	054 Move X1, [X8+368]
	055 NotImplemented "Instruction BLR not yet implemented."
	056 Compare X20, 0
	057 JumpIfEqual {80}
	058 Move X8, [X20]
	059 Move X21, X0
	060 Move X0, X20
	061 Move X9, [X8+360]
	062 Move X1, [X8+368]
	063 NotImplemented "Instruction BLR not yet implemented."
	064 Compare X19, 0
	065 JumpIfEqual {80}
	066 Move X8, [X19]
	067 Move X20, X0
	068 Move X0, X19
	069 Move X9, [X8+360]
	070 Move X1, [X8+368]
	071 NotImplemented "Instruction BLR not yet implemented."
	072 Move X2, X0
	073 Move X0, X21
	074 Move X1, X20
	075 Move X20, [X31+32]
	076 Move X19, [X31+40]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X30, [X31+48]
	080 Call 0x1C17F20

Method: System.String Concat(System.Object[] args)

Disassembly:
	0x03228578 ADD X8, X8, X9, 0x4, LSL
	0x0322857C ADD X0, X8, 0x138
	0x03228580 LDP X8, X1, [X0]
	0x03228584 MOV X0, X19
	0x03228588 BLR X8
	0x0322858C CBNZ X20, 0x3228598
	0x03228590 MOV X0, X21
	0x03228594 BL 0x1D2C690
	0x03228598 MOV X0, X20
	0x0322859C BL 0x1C16F18
	0x032285A0 BL 0x1990590
	0x032285A4 SUB X31, X31, 0xB0
	0x032285A8 STP X29, X30, [X31 + 0x50]
	0x032285AC STP X28, X27, [X31 + 0x60]
	0x032285B0 STP X26, X25, [X31 + 0x70]
	0x032285B4 STP X24, X23, [X31 + 0x80]
	0x032285B8 STP X22, X21, [X31 + 0x90]
	0x032285BC STP X20, X19, [X31 + 0xA0]
	0x032285C0 MOV W19, W3
	0x032285C4 UBFM W10, W1, 0x1F, 0x1E
	0x032285C8 STR W10, [X31 + 0x44]
	0x032285CC SXTW X10, W19
	0x032285D0 STR X0, [X31 + 0x48]
	0x032285D4 STR X10, [X31 + 0x20]
	0x032285D8 ADRP X23, 0xECD000
	0x032285DC LDR X23, [X23 + 0x278]
	0x032285E0 SUB W8, W4, 0x1
	0x032285E4 ADD W9, W4, W3
	0x032285E8 SBFM X10, X19, 0x3D, 0x1F
	0x032285EC SMADDL X29, X8, X1, X31
	0x032285F0 SUB W8, W9, 0x1
	0x032285F4 SXTW X26, W9
	0x032285F8 MOV W21, W4
	0x032285FC MOV X28, X2
	0x03228600 MOV W22, W1
	0x03228604 ADRP X27, 0x11B4000
	0x03228608 ADD X9, X10, 0x20
	0x0322860C SXTW X25, W8
	0x03228610 SUB X8, X26, W3, SXTW
	0x03228614 STP X8, X9, [X31 + 0x28]
	0x03228618 STR X2, [X31 + 0x8]
	0x0322861C STR X29, [X31 + 0x38]
	0x03228620 STR X19, [X31 + 0x18]
	0x03228624 STR W4, [X31 + 0x14]
	0x03228628 LDRB W8, [X27 + 0x36B]
	0x0322862C TBNZ X8, 0x0, 0x322864C
	0x03228630 ADRP X0, 0xECB000
	0x03228634 LDR X0, [X0 + 0xAC8]
	0x03228638 BL 0x1C16CF4
	0x0322863C MOV X0, X23
	0x03228640 BL 0x1C16CF4
	0x03228644 MOVZ W8, 0x1
	0x03228648 STRB W8, [X27 + 0x36B]
	0x0322864C CBZ X28, 0x322884C
	0x03228650 TBNZ X19, 0x1F, 0x3228880
	0x03228654 TBNZ X21, 0x1F, 0x32288B0
	0x03228658 LDR X8, [X28 + 0x18]
	0x0322865C SUB W9, W8, W21
	0x03228660 CMP W9, W19
	0x03228664 B.LT 0x32288E0
	0x03228668 CMP W21, 0x1
	0x0322866C B.LE 0x32287D8
	0x03228670 MOVZ W9, 0x80000000
	0x03228674 CMP X29, X9
	0x03228678 B.GE 0x3228828
	0x0322867C CMP W26, W19
	0x03228680 B.LE 0x3228760
	0x03228684 LDP X10, X9, [X31 + 0x28]
	0x03228688 MOV W11, W19
	0x0322868C ADD X9, X28, X9
	0x03228690 CMP W11, W8
	0x03228694 B.CS 0x3228824
	0x03228698 LDR X12, [X9]
	0x0322869C CBZ X12, 0x32286AC
	0x032286A0 LDR W12, [X12 + 0x10]
	0x032286A4 ADDS W29, W12, W29
	0x032286A8 B.MI 0x3228828
	0x032286AC ADD X9, X9, 0x8
	0x032286B0 SUBS X10, X10, 0x1
	0x032286B4 ADD W11, W11, 0x1
	0x032286B8 B.NE 0x3228690
	0x032286BC MOV W0, W29
	0x032286C0 BL 0x1C8825C
	0x032286C4 CMP W26, W19
	0x032286C8 MOV X20, X0
	0x032286CC MOV W24, W31
	0x032286D0 B.LE 0x322878C
	0x032286D4 LDR X21, [X31 + 0x20]
	0x032286D8 ADD X23, X20, 0x14
	0x032286DC ADD X27, X28, 0x20
	0x032286E0 LDR W8, [X28 + 0x18]
	0x032286E4 CMP W21, W8
	0x032286E8 B.CS 0x3228824
	0x032286EC LDR X2, [X27, X21, LSL #3]
	0x032286F0 CBZ X2, 0x3228714
	0x032286F4 LDR W19, [X2 + 0x10]
	0x032286F8 SUB W8, W29, W24
	0x032286FC CMP W19, W8
	0x03228700 B.GT 0x3228774
	0x03228704 MOV X0, X20
	0x03228708 MOV W1, W24
	0x0322870C BL 0x322728C
	0x03228710 ADD W24, W19, W24
	0x03228714 CMP X21, X25
	0x03228718 B.GE 0x3228750
	0x0322871C CBZ X20, 0x3228848
	0x03228720 CMP W22, 0x1
	0x03228724 B.NE 0x3228738
	0x03228728 LDR X8, [X31 + 0x48]
	0x0322872C LDRH W8, [X8]
	0x03228730 STRH W8, [X23, W24, SXTW]
	0x03228734 B 0x322874C
	0x03228738 LDR X1, [X31 + 0x48]
	0x0322873C LDR W2, [X31 + 0x44]
	0x03228740 ADD X0, X23, W24, 0x1, SXTW
	0x03228744 MOV X3, X31
	0x03228748 BL 0x33A8CD0
	0x0322874C ADD W24, W24, W22
	0x03228750 ADD X21, X21, 0x1
	0x03228754 CMP X26, X21
	0x03228758 B.NE 0x32286E0
	0x0322875C B 0x3228778
	0x03228760 MOV W0, W29
	0x03228764 BL 0x1C8825C
	0x03228768 MOV X20, X0
	0x0322876C MOV W24, W31
	0x03228770 B 0x322878C
	0x03228774 MOVN W24, 0x0
	0x03228778 ADRP X23, 0xECD000
	0x0322877C LDR X19, [X31 + 0x18]
	0x03228780 LDR W21, [X31 + 0x14]
	0x03228784 LDR X23, [X23 + 0x278]
	0x03228788 ADRP X27, 0x11B4000
	0x0322878C CMP W24, W29
	0x03228790 B.EQ 0x3228800
	0x03228794 MOV X0, X28
	0x03228798 MOV X1, X31
	0x0322879C BL 0x33A01F0
	0x032287A0 CBZ X0, 0x32287CC

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X19, 0x11B5000
	011 Move W8, [X19+869]
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xECC000
	018 Move X0, [X0+2760]
	019 Call 0x1C17CF4
	020 Move X0, 0xECE000
	021 Move X0, [X0+632]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X19+869], W8
	025 Compare X20, 0
	026 JumpIfEqual {142}
	027 Move X1, [X20+24]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X8, 0xECC000
	030 Move X8, [X8+2760]
	031 Move X0, [X8]
	032 Call 0x1C17D6C
	033 Move X8, [X20+24]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X26, 0xECE000
	036 Move X26, [X26+632]
	037 Move X19, X0
	038 Move X23, X31
	039 Move W21, W31
	040 Move X22, X31
	041 And X8, X8, 0
	042 Add X24, X20, 32
	043 Add X25, X0, 32
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X8, [X24]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 NotImplemented "Instruction CSEL not yet implemented."
	048 Compare X8, 0
	049 JumpIfEqual {59}
	050 Compare X22, 0
	051 JumpIfEqual {127}
	052 Move X8, [X22]
	053 Move X0, X22
	054 Move X9, [X8+360]
	055 Move X1, [X8+368]
	056 NotImplemented "Instruction BLR not yet implemented."
	057 Compare X0, 0
	058 JumpIfNotEqual {62}
	059 Move X8, [X26]
	060 Move X8, [X8+184]
	061 Move X0, [X8]
	062 Compare X19, 0
	063 JumpIfEqual {127}
	064 Move W8, [X19+24]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move [X25], X0
	067 Compare X0, 0
	068 JumpIfEqual {127}
	069 Move W8, [X0+16]
	070 Add W21, W8, W21
	071 Move W8, [X20+24]
	072 Add X23, X23, 1
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Compare W21, 0
	075 JumpIfEqual {111}
	076 Move W0, W21
	077 Call 0x1C8925C
	078 Move W8, [X19+24]
	079 Move X20, X0
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move W23, W31
	082 Move W21, W31
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Add X8, X19, W23
	085 Move X22, [X8+32]
	086 Move X0, X20
	087 Move W1, W21
	088 Move X2, X22
	089 Call String.FillStringChecked, X0, X1, X2
	090 Compare X22, 0
	091 JumpIfEqual {127}
	092 Move W8, [X19+24]
	093 Move W9, [X22+16]
	094 Add W23, W23, 1
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Add W21, W9, W21
	097 Compare X1, 0
	098 JumpIfEqual {111}
	099 Compare W1, 0
	100 JumpIfEqual {128}
	101 Move X0, [X20+32]
	102 Compare X0, 0
	103 JumpIfEqual {111}
	104 Move X8, [X0]
	105 Move X9, [X8+360]
	106 Move X1, [X8+368]
	107 NotImplemented "Instruction BLR not yet implemented."
	108 Move X20, X0
	109 Compare X0, 0
	110 JumpIfNotEqual {116}
	111 Move X8, 0xECE000
	112 Move X8, [X8+632]
	113 Move X8, [X8]
	114 Move X8, [X8+184]
	115 Move X20, [X8]
	116 Move X0, X20
	117 Move X20, [X31+64]
	118 Move X19, [X31+72]
	119 Move X22, [X31+48]
	120 Move X21, [X31+56]
	121 Move X24, [X31+32]
	122 Move X23, [X31+40]
	123 Move X26, [X31+16]
	124 Move X25, [X31+24]
	125 Move X30, [X31+80]
	126 Return X0
	127 Call 0x1C17F20
	128 Call 0x1C17F28
	129 Move X0, 0xED5000
	130 Move X0, [X0+3512]
	131 Call 0x1C17D08
	132 Call 0x1C17F10
	133 Move X1, X31
	134 Move X19, X0
	135 Call OutOfMemoryException..ctor, X0
	136 Move X0, 0xEFB000
	137 Move X0, [X0+128]
	138 Call 0x1C17D08
	139 Move X1, X0
	140 Move X0, X19
	141 Call 0x1C17DEC
	142 Move X0, 0xED1000
	143 Move X0, [X0+1320]
	144 Call 0x1C17D08
	145 Call 0x1C17F10
	146 Move X19, X0
	147 Move X0, 0xEFB000
	148 Move X0, [X0+136]
	149 Call 0x1C17D08
	150 Move X1, X0
	151 Move X0, X19
	152 Move X2, X31
	153 Call ArgumentNullException..ctor, X0, X1

Method: System.String Concat(System.String str0, System.String str1)

Disassembly:
	0x0321C938 ADD X9, X9, 0x1
	0x0321C93C B.GT 0x321C8C4
	0x0321C940 CMP W21, 0x3
	0x0321C944 B.EQ 0x321C97C
	0x0321C948 CMP W21, 0x2
	0x0321C94C B.EQ 0x321C9C4
	0x0321C950 CMP W21, 0x1
	0x0321C954 B.NE 0x321C9FC
	0x0321C958 CBZ W8, 0x321CA0C
	0x0321C95C CBZ X0, 0x321CA10
	0x0321C960 LDR W8, [X19 + 0x10]
	0x0321C964 LDR W9, [X0 + 0x18]
	0x0321C968 SUB W8, W8, 0x1
	0x0321C96C CMP W8, W9
	0x0321C970 B.CS 0x321CA0C
	0x0321C974 LDRB W9, [X20 + 0x20]
	0x0321C978 B 0x321C9F4
	0x0321C97C CBZ W8, 0x321CA0C
	0x0321C980 CMP W8, 0x1
	0x0321C984 B.EQ 0x321CA0C
	0x0321C988 CMP W8, 0x2
	0x0321C98C B.LS 0x321CA0C
	0x0321C990 CBZ X0, 0x321CA10
	0x0321C994 LDR W8, [X19 + 0x10]
	0x0321C998 LDR W9, [X0 + 0x18]
	0x0321C99C SUB W8, W8, 0x1
	0x0321C9A0 CMP W8, W9
	0x0321C9A4 B.CS 0x321CA0C
	0x0321C9A8 LDRB W9, [X20 + 0x20]
	0x0321C9AC LDRB W10, [X20 + 0x21]
	0x0321C9B0 LDRB W11, [X20 + 0x22]
	0x0321C9B4 UBFM W9, W9, 0x10, 0xF
	0x0321C9B8 BFM W9, W10, 0x18, 0x7
	0x0321C9BC ORR W9, W9, W11, 0x0
	0x0321C9C0 B 0x321C9F4
	0x0321C9C4 CBZ W8, 0x321CA0C
	0x0321C9C8 CMP W8, 0x1
	0x0321C9CC B.EQ 0x321CA0C
	0x0321C9D0 CBZ X0, 0x321CA10
	0x0321C9D4 LDR W8, [X19 + 0x10]
	0x0321C9D8 LDR W9, [X0 + 0x18]
	0x0321C9DC SUB W8, W8, 0x1
	0x0321C9E0 CMP W8, W9
	0x0321C9E4 B.CS 0x321CA0C
	0x0321C9E8 LDRB W10, [X20 + 0x20]
	0x0321C9EC LDRB W9, [X20 + 0x21]
	0x0321C9F0 BFM W9, W10, 0x18, 0x7
	0x0321C9F4 ADD X8, X0, W8, 0x2, SXTW
	0x0321C9F8 STR W9, [X8 + 0x20]
	0x0321C9FC MOV X0, X19
	0x0321CA00 LDP X20, X19, [X31 + 0x10]
	0x0321CA04 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11C1000
	007 Move W8, [X21+870]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEDA000
	015 Move X0, [X0+632]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+870], W8
	019 Compare X19, 0
	020 JumpIfEqual {27}
	021 Move W8, [X19+16]
	022 Compare W8, 0
	023 JumpIfEqual {27}
	024 Move W8, W31
	025 Compare X20, 0
	026 JumpIfNotEqual {30}
	027 Move W8, 1
	028 Compare X20, 0
	029 JumpIfEqual {38}
	030 Move W9, [X20+16]
	031 Compare W9, 0
	032 JumpIfEqual {38}
	033 Move TEMP, X8
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {54}
	037 Move X19, X20
	038 Move TEMP, X8
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {47}
	042 Move X8, 0xEDA000
	043 Move X8, [X8+632]
	044 Move X8, [X8]
	045 Move X8, [X8+184]
	046 Move X19, [X8]
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Return X0
	054 Compare X19, 0
	055 JumpIfEqual {68}
	056 Move W21, [X19+16]
	057 Add W0, W9, W21
	058 Call 0x1C8925C
	059 Move W1, W31
	060 Move X2, X19
	061 Move X22, X0
	062 Call String.FillStringChecked, X0, X1, X2
	063 Move X0, X22
	064 Move W1, W21
	065 Move X2, X20
	066 Call String.FillStringChecked, X0, X1, X2
	067 Move X0, X22
	068 Call 0x1C17F20

Method: System.String Concat(System.String str0, System.String str1, System.String str2)

Disassembly:
	0x032284B8 MOV X0, X19
	0x032284BC BL 0x1C16DEC
	0x032284C0 BL 0x1C16F20
	0x032284C4 MOV X0, X20
	0x032284C8 BL 0x1C16F18
	0x032284CC BL 0x1C16F20
	0x032284D0 B 0x32284FC
	0x032284D4 B 0x32284FC
	0x032284D8 B 0x32284FC
	0x032284DC B 0x32284FC
	0x032284E0 B 0x32284FC
	0x032284E4 B 0x32284FC
	0x032284E8 B 0x32284FC
	0x032284EC B 0x32284FC
	0x032284F0 B 0x32284FC
	0x032284F4 B 0x32284FC
	0x032284F8 B 0x32284FC
	0x032284FC MOV X21, X0
	0x03228500 CMP W1, 0x1
	0x03228504 B.NE 0x3228524
	0x03228508 MOV X0, X21
	0x0322850C BL 0x3EB1AD0
	0x03228510 LDR X20, [X0]
	0x03228514 BL 0x3EB1AE0
	0x03228518 MOV X21, X31
	0x0322851C CBNZ X19, 0x3228404
	0x03228520 B 0x322845C
	0x03228524 MOV X20, X31
	0x03228528 B 0x3228530
	0x0322852C MOV X21, X0
	0x03228530 CBZ X19, 0x322858C
	0x03228534 LDR X8, [X19]
	0x03228538 LDR X1, [X23]
	0x0322853C LDRH W9, [X8 + 0x12E]
	0x03228540 CBZ X9, 0x3228564
	0x03228544 LDR X10, [X8 + 0xB0]
	0x03228548 ADD X10, X10, 0x8
	0x0322854C LDUR X11, [X10 - 0x8]
	0x03228550 CMP X11, X1
	0x03228554 B.EQ 0x3228574
	0x03228558 SUBS X9, X9, 0x1
	0x0322855C ADD X10, X10, 0x10
	0x03228560 B.NE 0x322854C
	0x03228564 MOV X0, X19
	0x03228568 MOV W2, W31
	0x0322856C BL 0x1C5C788
	0x03228570 B 0x3228580
	0x03228574 LDRSW X9, [X10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, X2
	007 Move X20, X1
	008 Compare X0, 0
	009 JumpIfEqual {48}
	010 Move W8, [X0+16]
	011 Move X21, X0
	012 Compare W8, 0
	013 JumpIfEqual {48}
	014 Compare X20, 0
	015 JumpIfEqual {49}
	016 Move W9, [X20+16]
	017 Compare W9, 0
	018 JumpIfEqual {49}
	019 Compare X19, 0
	020 JumpIfEqual {58}
	021 Move W10, [X19+16]
	022 Compare W10, 0
	023 JumpIfEqual {58}
	024 Add W8, W9, W8
	025 Add W0, W8, W10
	026 Call 0x1C8925C
	027 Move W1, W31
	028 Move X2, X21
	029 Move X22, X0
	030 Call String.FillStringChecked, X0, X1, X2
	031 Move W1, [X21+16]
	032 Move X0, X22
	033 Move X2, X20
	034 Call String.FillStringChecked, X0, X1, X2
	035 Move W8, [X21+16]
	036 Move W9, [X20+16]
	037 Move X0, X22
	038 Move X2, X19
	039 Add W1, W9, W8
	040 Call String.FillStringChecked, X0, X1, X2
	041 Move X0, X22
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X30, [X31+48]
	047 Return X0
	048 Move X0, X20
	049 Move X0, X21
	050 Move X1, X19
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move X30, [X31+48]
	056 Call String.Concat, X0, X1
	057 Return X0
	058 Move X0, X21
	059 Move X1, X20

Method: System.String Concat(System.String str0, System.String str1, System.String str2, System.String str3)

Disassembly:
	0x032287C4 CBNZ X0, 0x3228628
	0x032287C8 B 0x322893C
	0x032287CC LDR X29, [X31 + 0x38]
	0x032287D0 MOV X28, X31
	0x032287D4 B 0x3228628
	0x032287D8 CBZ W21, 0x32287F4
	0x032287DC CMP W8, W19
	0x032287E0 B.LS 0x3228824
	0x032287E4 LDR X8, [X31 + 0x8]
	0x032287E8 ADD X8, X8, W19, 0x3, UXTW
	0x032287EC LDR X20, [X8 + 0x20]
	0x032287F0 CBNZ X20, 0x3228800
	0x032287F4 LDR X8, [X23]
	0x032287F8 LDR X8, [X8 + 0xB8]
	0x032287FC LDR X20, [X8]
	0x03228800 MOV X0, X20
	0x03228804 LDP X20, X19, [X31 + 0xA0]
	0x03228808 LDP X22, X21, [X31 + 0x90]
	0x0322880C LDP X24, X23, [X31 + 0x80]
	0x03228810 LDP X26, X25, [X31 + 0x70]
	0x03228814 LDP X28, X27, [X31 + 0x60]
	0x03228818 LDP X29, X30, [X31 + 0x50]
	0x0322881C ADD X31, X31, 0xB0
	0x03228820 RET
	0x03228824 BL 0x1C16F28
	0x03228828 ADRP X0, 0xED4000
	0x0322882C LDR X0, [X0 + 0xDB8]
	0x03228830 BL 0x1C16D08
	0x03228834 BL 0x1C16F10
	0x03228838 MOV X1, X31
	0x0322883C MOV X19, X0
	0x03228840 BL 0x339F30C
	0x03228844 B 0x3228924
	0x03228848 BL 0x1C16F20
	0x0322884C ADRP X0, 0xED0000
	0x03228850 LDR X0, [X0 + 0x528]
	0x03228854 BL 0x1C16D08
	0x03228858 BL 0x1C16F10
	0x0322885C MOV X19, X0
	0x03228860 ADRP X0, 0xED5000
	0x03228864 LDR X0, [X0 + 0xEC8]
	0x03228868 BL 0x1C16D08
	0x0322886C MOV X1, X0
	0x03228870 MOV X0, X19
	0x03228874 MOV X2, X31
	0x03228878 BL 0x330E100
	0x0322887C B 0x3228924
	0x03228880 ADRP X0, 0xED3000
	0x03228884 LDR X0, [X0 + 0x760]
	0x03228888 BL 0x1C16D08
	0x0322888C BL 0x1C16F10
	0x03228890 MOV X19, X0
	0x03228894 ADRP X0, 0xEF3000
	0x03228898 LDR X0, [X0 + 0x658]
	0x0322889C BL 0x1C16D08
	0x032288A0 MOV X20, X0
	0x032288A4 ADRP X0, 0xEFA000
	0x032288A8 LDR X0, [X0 + 0xD8]
	0x032288AC B 0x322890C
	0x032288B0 ADRP X0, 0xED3000
	0x032288B4 LDR X0, [X0 + 0x760]
	0x032288B8 BL 0x1C16D08
	0x032288BC BL 0x1C16F10
	0x032288C0 MOV X19, X0
	0x032288C4 ADRP X0, 0xEF3000
	0x032288C8 LDR X0, [X0 + 0x648]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, X3
	008 Move X20, X2
	009 Move X21, X1
	010 Compare X0, 0
	011 JumpIfEqual {65}
	012 Move W8, [X0+16]
	013 Move X22, X0
	014 Compare W8, 0
	015 JumpIfEqual {65}
	016 Compare X21, 0
	017 JumpIfEqual {66}
	018 Move W9, [X21+16]
	019 Compare W9, 0
	020 JumpIfEqual {66}
	021 Compare X20, 0
	022 JumpIfEqual {77}
	023 Move W10, [X20+16]
	024 Compare W10, 0
	025 JumpIfEqual {77}
	026 Compare X19, 0
	027 JumpIfEqual {79}
	028 Move W11, [X19+16]
	029 Compare W11, 0
	030 JumpIfEqual {79}
	031 Add W8, W9, W8
	032 Add W8, W8, W10
	033 Add W0, W8, W11
	034 Call 0x1C8925C
	035 Move W1, W31
	036 Move X2, X22
	037 Move X23, X0
	038 Call String.FillStringChecked, X0, X1, X2
	039 Move W1, [X22+16]
	040 Move X0, X23
	041 Move X2, X21
	042 Call String.FillStringChecked, X0, X1, X2
	043 Move W8, [X22+16]
	044 Move W9, [X21+16]
	045 Move X0, X23
	046 Move X2, X20
	047 Add W1, W9, W8
	048 Call String.FillStringChecked, X0, X1, X2
	049 Move W8, [X22+16]
	050 Move W9, [X21+16]
	051 Move W10, [X20+16]
	052 Move X0, X23
	053 Move X2, X19
	054 Add W8, W9, W8
	055 Add W1, W8, W10
	056 Call String.FillStringChecked, X0, X1, X2
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X22, [X31+16]
	060 Move X21, [X31+24]
	061 Move X0, X23
	062 Move X30, [X31+48]
	063 Move X23, [X31+56]
	064 Return X0
	065 Move X0, X21
	066 Move X0, X22
	067 Move X1, X20
	068 Move X2, X19
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X22, [X31+16]
	072 Move X21, [X31+24]
	073 Move X30, [X31+48]
	074 Move X23, [X31+56]
	075 Call String.Concat, X0, X1, X2
	076 Return X0
	077 Move X0, X22
	078 Move X1, X21
	079 Move X0, X22
	080 Move X1, X21
	081 Move X2, X20

Method: System.String Concat(System.String[] values)

Disassembly:
	0x032288CC BL 0x1C16D08
	0x032288D0 MOV X20, X0
	0x032288D4 ADRP X0, 0xEFA000
	0x032288D8 LDR X0, [X0 + 0x30]
	0x032288DC B 0x322890C
	0x032288E0 ADRP X0, 0xED3000
	0x032288E4 LDR X0, [X0 + 0x760]
	0x032288E8 BL 0x1C16D08
	0x032288EC BL 0x1C16F10
	0x032288F0 MOV X19, X0
	0x032288F4 ADRP X0, 0xEF3000
	0x032288F8 LDR X0, [X0 + 0x658]
	0x032288FC BL 0x1C16D08
	0x03228900 MOV X20, X0
	0x03228904 ADRP X0, 0xEFA000
	0x03228908 LDR X0, [X0 + 0xE0]
	0x0322890C BL 0x1C16D08
	0x03228910 MOV X2, X0
	0x03228914 MOV X0, X19
	0x03228918 MOV X1, X20
	0x0322891C MOV X3, X31
	0x03228920 BL 0x3311888
	0x03228924 ADRP X0, 0xEFA000
	0x03228928 LDR X0, [X0 + 0xE8]
	0x0322892C BL 0x1C16D08
	0x03228930 MOV X1, X0
	0x03228934 MOV X0, X19
	0x03228938 BL 0x1C16DEC
	0x0322893C MOV X0, X20
	0x03228940 MOV X1, X24
	0x03228944 BL 0x1C171E0
	0x03228948 STP X30, X23, [X31 - 0x30]!
	0x0322894C STP X22, X21, [X31 + 0x10]
	0x03228950 STP X20, X19, [X31 + 0x20]
	0x03228954 TBNZ X1, 0x1F, 0x3228A08
	0x03228958 LDR W22, [X0 + 0x10]
	0x0322895C MOV X19, X0
	0x03228960 SUB W23, W1, W22
	0x03228964 CMP W23, 0x1
	0x03228968 B.LT 0x32289F4
	0x0322896C MOV W0, W1
	0x03228970 MOV W20, W2
	0x03228974 BL 0x1C8825C
	0x03228978 CBZ X0, 0x3228A64
	0x0322897C ADRP X10, 0xFFFFFFFFFD8C2000
	0x03228980 LDR V0, [X10 + 0x79]
	0x03228984 MOV W9, W23
	0x03228988 ADD X8, X0, 0x14
	0x0322898C ADD X11, X9, 0x1
	0x03228990 SUB X12, X9, 0x1
	0x03228994 MOVZ W10, 0x2
	0x03228998 MOV X21, X0
	0x0322899C AND X9, X11, 0x0
	0x032289A0 UNIMPLEMENTED
	0x032289A4 UNIMPLEMENTED
	0x032289A8 MOV X10, X8
	0x00000000 INVALID
	0x032289B0 UNIMPLEMENTED
	0x032289B4 FMOV W11, S3
	0x032289B8 TBZ X11, 0x0, 0x32289C0
	0x032289BC STRH W20, [X10]
	0x032289C0 UNIMPLEMENTED
	0x032289C4 TBZ X11, 0x0, 0x32289CC
	0x032289C8 STRH W20, [X10 + 0x2]
	0x00000000 INVALID
	0x032289D0 SUBS X9, X9, 0x2
	0x032289D4 ADD X10, X10, 0x4
	0x032289D8 B.NE 0x32289AC
	0x032289DC ADD X1, X19, 0x14
	0x032289E0 ADD X0, X8, W23, 0x1, SXTW
	0x032289E4 UBFM W2, W22, 0x1F, 0x1E
	0x032289E8 MOV X3, X31
	0x032289EC BL 0x33A8CD0
	0x032289F0 MOV X19, X21
	0x032289F4 MOV X0, X19
	0x032289F8 LDP X20, X19, [X31 + 0x20]
	0x032289FC LDP X22, X21, [X31 + 0x10]
	0x03228A00 LDP X30, X23, [X31], #0x30
	0x03228A04 RET
	0x03228A08 ADRP X0, 0xED3000
	0x03228A0C LDR X0, [X0 + 0x760]
	0x03228A10 BL 0x1C16D08
	0x03228A14 BL 0x1C16F10
	0x03228A18 MOV X19, X0
	0x03228A1C ADRP X0, 0xEFA000
	0x03228A20 LDR X0, [X0 + 0xF0]
	0x03228A24 BL 0x1C16D08
	0x03228A28 MOV X20, X0
	0x03228A2C ADRP X0, 0xEF3000
	0x03228A30 LDR X0, [X0 + 0x670]
	0x03228A34 BL 0x1C16D08
	0x03228A38 MOV X2, X0
	0x03228A3C MOV X0, X19
	0x03228A40 MOV X1, X20
	0x03228A44 MOV X3, X31
	0x03228A48 BL 0x3311888
	0x03228A4C ADRP X0, 0xEFA000
	0x03228A50 LDR X0, [X0 + 0xF8]
	0x03228A54 BL 0x1C16D08
	0x03228A58 MOV X1, X0
	0x03228A5C MOV X0, X19
	0x03228A60 BL 0x1C16DEC
	0x03228A64 BL 0x1C16F20
	0x03228A68 STR X30, [X31 - 0x40]!
	0x03228A6C STP X24, X23, [X31 + 0x10]
	0x03228A70 STP X22, X21, [X31 + 0x20]
	0x03228A74 STP X20, X19, [X31 + 0x30]
	0x03228A78 TBNZ X1, 0x1F, 0x3228B30
	0x03228A7C LDR W23, [X0 + 0x10]
	0x03228A80 MOV X22, X0
	0x03228A84 SUB W24, W1, W23
	0x03228A88 CMP W24, 0x1
	0x03228A8C B.LT 0x3228B18
	0x03228A90 MOV W0, W1
	0x03228A94 MOV W19, W2
	0x03228A98 BL 0x1C8825C
	0x03228A9C CBZ X0, 0x3228B8C
	0x03228AA0 ADD X21, X0, 0x14
	0x03228AA4 MOV X20, X0
	0x03228AA8 ADD X1, X22, 0x14
	0x03228AAC UBFM W2, W23, 0x1F, 0x1E
	0x03228AB0 MOV X0, X21
	0x03228AB4 MOV X3, X31
	0x03228AB8 BL 0x33A8CD0
	0x03228ABC ADRP X9, 0xFFFFFFFFFD8C2000
	0x03228AC0 LDR V0, [X9 + 0x79]
	0x03228AC4 MOV W8, W24
	0x03228AC8 ADD X10, X8, 0x1
	0x03228ACC SUB X11, X8, 0x1

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X20, 0xECC000
	014 Move X19, 0xECE000
	015 Move X20, [X20+2760]
	016 Move X19, [X19+632]
	017 Move X21, X0
	018 Move X25, 0x11B5000
	019 Move W26, 0x80000000
	020 Move W8, [X25+871]
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {31}
	025 Move X0, X20
	026 Call 0x1C17CF4
	027 Move X0, X19
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X25+871], W8
	031 Compare X21, 0
	032 JumpIfEqual {116}
	033 Move X8, [X21+24]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Add X28, X21, 32
	036 Move X22, X31
	037 And X8, X8, 0
	038 Move X9, X28
	039 Move X10, [X9]
	040 Compare X10, 0
	041 JumpIfEqual {44}
	042 NotImplemented "Instruction LDRSW not yet implemented."
	043 Add X22, X22, X10
	044 Subtract X8, X8, 1
	045 Add X9, X9, 8
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Compare W22, 0
	048 JumpIfEqual {98}
	049 Move W0, W22
	050 Call 0x1C8925C
	051 Move X8, [X21+24]
	052 Move X23, X0
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X29, X31
	055 Move W24, W31
	056 And X8, X8, 0
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X2, [X28]
	059 Compare X2, 0
	060 JumpIfEqual {71}
	061 Move W27, [X2+16]
	062 Compare W27, 0
	063 JumpIfEqual {71}
	064 Subtract W8, W22, W24
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X0, X23
	067 Move W1, W24
	068 Call String.FillStringChecked, X0, X1, X2
	069 Move W8, [X21+24]
	070 Add W24, W27, W24
	071 Add X29, X29, 1
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move W24, W31
	074 Move TEMP, 0
	075 Not TEMP
	076 Move W24, TEMP
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X0, X21
	079 Move X1, X31
	080 Call Array.Clone, X0
	081 Compare X0, 0
	082 JumpIfEqual {90}
	083 Move X23, [X20]
	084 Move X22, X0
	085 Move X1, X23
	086 Call 0x1C17E00
	087 Move X21, X0
	088 Compare X0, 0
	089 JumpIfNotEqual {20}
	090 Move X21, X31
	091 Compare X8, 0
	092 JumpIfEqual {98}
	093 Compare W8, 0
	094 JumpIfEqual {115}
	095 Move X23, [X21+32]
	096 Compare X23, 0
	097 JumpIfNotEqual {101}
	098 Move X8, [X19]
	099 Move X8, [X8+184]
	100 Move X23, [X8]
	101 Move X0, X23
	102 Move X20, [X31+80]
	103 Move X19, [X31+88]
	104 Move X22, [X31+64]
	105 Move X21, [X31+72]
	106 Move X24, [X31+48]
	107 Move X23, [X31+56]
	108 Move X26, [X31+32]
	109 Move X25, [X31+40]
	110 Move X28, [X31+16]
	111 Move X27, [X31+24]
	112 Move X29, [X31+96]
	113 Move X30, [X31+104]
	114 Return X0
	115 Call 0x1C17F28
	116 Move X0, 0xED1000
	117 Move X0, [X0+1320]
	118 Call 0x1C17D08
	119 Call 0x1C17F10
	120 Move X19, X0
	121 Move X0, 0xED6000
	122 Move X0, [X0+3800]
	123 Call 0x1C17D08
	124 Move X1, X0
	125 Move X0, X19
	126 Move X2, X31
	127 Call ArgumentNullException..ctor, X0, X1
	128 Move X0, 0xED5000
	129 Move X0, [X0+3512]
	130 Call 0x1C17D08
	131 Call 0x1C17F10
	132 Move X1, X31
	133 Move X19, X0
	134 Call OutOfMemoryException..ctor, X0
	135 Move X0, 0xEFB000
	136 Move X0, [X0+144]
	137 Call 0x1C17D08
	138 Move X1, X0
	139 Move X0, X19
	140 Call 0x1C17DEC
	141 Move X0, X22
	142 Move X1, X23
	143 Call 0x1C181E0

Method: System.String Format(System.String format, System.Object arg0)

Disassembly:
	0x0321FFD0 LDR X0, [X21]
	0x0321FFD4 LDR W8, [X0 + 0xE0]
	0x0321FFD8 CBNZ W8, 0x321FFE4
	0x0321FFDC BL 0x1C16DFC
	0x0321FFE0 LDR X0, [X21]
	0x0321FFE4 LDR X8, [X0 + 0xB8]
	0x0321FFE8 LDR X8, [X8]
	0x0321FFEC CBZ X8, 0x3220138
	0x0321FFF0 LDR X9, [X8 + 0x18]
	0x0321FFF4 CBZ W9, 0x322013C
	0x0321FFF8 MOV X10, INVALID
	0x0321FFFC ADD X9, X10, X9, 0x20, LSL
	0x03220000 ADD X8, X8, X9, 0x1E, ASR
	0x03220004 LDR W0, [X8 + 0x20]
	0x03220008 BL 0x321BF30
	0x0322000C MOV X1, X0
	0x03220010 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+64], X30
	003 Move [X31+72], X19
	004 Move X19, X0
	005 NotImplemented "Instruction MOVI not yet implemented."
	006 Add X0, X31, 32
	007 Move X2, X31
	008 Move [X31+32], V0
	009 Move [X31+40], V0
	010 Call ParamsArray..ctor, X0, X1
	011 Move V0, [X31+32]
	012 Move V1, [X31+48]
	013 Add X2, X31, 0
	014 Move X0, X31
	015 Move X1, X19
	016 Move [X31], V0
	017 Move [X31+8], V1
	018 Call String.FormatHelper, X0, X1, X2
	019 Move X30, [X31+64]
	020 Move X19, [X31+72]
	021 Add X31, X31, 80
	022 Return X0

Method: System.String Format(System.String format, System.Object arg0, System.Object arg1)

Disassembly:
	0x03228BD4 LDR W8, [X21 + 0x10]
	0x03228BD8 SUB W9, W8, W20
	0x03228BDC CMP W9, W19
	0x03228BE0 B.LT 0x3228CCC
	0x03228BE4 CBZ W19, 0x3228C54
	0x03228BE8 SUBS W22, W8, W19
	0x03228BEC B.EQ 0x3228C40
	0x03228BF0 MOV W0, W22
	0x03228BF4 BL 0x1C8825C
	0x03228BF8 CBZ X0, 0x3228D28
	0x03228BFC ADD X21, X21, 0x14
	0x03228C00 ADD X24, X0, 0x14
	0x03228C04 MOV X23, X0
	0x03228C08 UBFM W2, W20, 0x1F, 0x1E
	0x03228C0C MOV X0, X24
	0x03228C10 MOV X1, X21
	0x03228C14 MOV X3, X31

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+64], X30
	003 Move [X31+72], X19
	004 Move X19, X0
	005 NotImplemented "Instruction MOVI not yet implemented."
	006 Add X0, X31, 32
	007 Move X3, X31
	008 Move [X31+32], V0
	009 Move [X31+40], V0
	010 Call ParamsArray..ctor, X0, X1, X2
	011 Move V0, [X31+32]
	012 Move V1, [X31+48]
	013 Add X2, X31, 0
	014 Move X0, X31
	015 Move X1, X19
	016 Move [X31], V0
	017 Move [X31+8], V1
	018 Call String.FormatHelper, X0, X1, X2
	019 Move X30, [X31+64]
	020 Move X19, [X31+72]
	021 Add X31, X31, 80
	022 Return X0

Method: System.String Format(System.String format, System.Object arg0, System.Object arg1, System.Object arg2)

Disassembly:
	0x03228C18 BL 0x33A8CD0
	0x03228C1C ADD X8, X21, W20, 0x1, UXTW
	0x03228C20 SUB W9, W22, W20
	0x03228C24 ADD X0, X24, W20, 0x1, UXTW
	0x03228C28 ADD X1, X8, W19, 0x1, UXTW
	0x03228C2C UBFM W2, W9, 0x1F, 0x1E
	0x03228C30 MOV X3, X31
	0x03228C34 BL 0x33A8CD0
	0x03228C38 MOV X21, X23
	0x03228C3C B 0x3228C54
	0x03228C40 ADRP X8, 0xECD000
	0x03228C44 LDR X8, [X8 + 0x278]
	0x03228C48 LDR X8, [X8]
	0x03228C4C LDR X8, [X8 + 0xB8]
	0x03228C50 LDR X21, [X8]
	0x03228C54 MOV X0, X21
	0x03228C58 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+64], X30
	003 Move [X31+72], X19
	004 Move X19, X0
	005 NotImplemented "Instruction MOVI not yet implemented."
	006 Add X0, X31, 32
	007 Move X4, X31
	008 Move [X31+32], V0
	009 Move [X31+40], V0
	010 Call ParamsArray..ctor, X0, X1, X2, X3
	011 Move V0, [X31+32]
	012 Move V1, [X31+48]
	013 Add X2, X31, 0
	014 Move X0, X31
	015 Move X1, X19
	016 Move [X31], V0
	017 Move [X31+8], V1
	018 Call String.FormatHelper, X0, X1, X2
	019 Move X30, [X31+64]
	020 Move X19, [X31+72]
	021 Add X31, X31, 80
	022 Return X0

Method: System.String Format(System.String format, System.Object[] args)

Disassembly:
	0x03228C5C LDP X22, X21, [X31 + 0x20]
	0x03228C60 LDP X24, X23, [X31 + 0x10]
	0x03228C64 LDR X30, [X31], #0x40
	0x03228C68 RET
	0x03228C6C ADRP X0, 0xED3000
	0x03228C70 LDR X0, [X0 + 0x760]
	0x03228C74 BL 0x1C16D08
	0x03228C78 BL 0x1C16F10
	0x03228C7C MOV X19, X0
	0x03228C80 ADRP X0, 0xEF3000
	0x03228C84 LDR X0, [X0 + 0x658]
	0x03228C88 BL 0x1C16D08
	0x03228C8C MOV X20, X0
	0x03228C90 ADRP X0, 0xEFA000
	0x03228C94 LDR X0, [X0 + 0xD8]
	0x03228C98 B 0x3228CF8
	0x03228C9C ADRP X0, 0xED3000
	0x03228CA0 LDR X0, [X0 + 0x760]
	0x03228CA4 BL 0x1C16D08
	0x03228CA8 BL 0x1C16F10
	0x03228CAC MOV X19, X0
	0x03228CB0 ADRP X0, 0xEF3000
	0x03228CB4 LDR X0, [X0 + 0x648]
	0x03228CB8 BL 0x1C16D08
	0x03228CBC MOV X20, X0
	0x03228CC0 ADRP X0, 0xEFA000
	0x03228CC4 LDR X0, [X0 + 0x30]
	0x03228CC8 B 0x3228CF8
	0x03228CCC ADRP X0, 0xED3000
	0x03228CD0 LDR X0, [X0 + 0x760]
	0x03228CD4 BL 0x1C16D08
	0x03228CD8 BL 0x1C16F10
	0x03228CDC MOV X19, X0
	0x03228CE0 ADRP X0, 0xEF3000
	0x03228CE4 LDR X0, [X0 + 0x648]
	0x03228CE8 BL 0x1C16D08
	0x03228CEC MOV X20, X0
	0x03228CF0 ADRP X0, 0xEFA000
	0x03228CF4 LDR X0, [X0 + 0x108]
	0x03228CF8 BL 0x1C16D08
	0x03228CFC MOV X2, X0
	0x03228D00 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+80], X20
	004 Move [X31+88], X19
	005 Move X19, X0
	006 Compare X1, 0
	007 JumpIfEqual {27}
	008 NotImplemented "Instruction MOVI not yet implemented."
	009 Add X0, X31, 32
	010 Move X2, X31
	011 Move [X31+32], V0
	012 Move [X31+40], V0
	013 Call ParamsArray..ctor, X0, X1
	014 Move V0, [X31+32]
	015 Move V1, [X31+48]
	016 Add X2, X31, 0
	017 Move X0, X31
	018 Move X1, X19
	019 Move [X31], V0
	020 Move [X31+8], V1
	021 Call String.FormatHelper, X0, X1, X2
	022 Move X20, [X31+80]
	023 Move X19, [X31+88]
	024 Move X30, [X31+64]
	025 Add X31, X31, 96
	026 Return X0
	027 Move X8, 0xEFB000
	028 Move X9, 0xEFB000
	029 Move X8, [X8+136]
	030 Move X9, [X9+160]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 NotImplemented "Instruction CSEL not yet implemented."
	033 Call 0x1C17D08
	034 Move X19, X0
	035 Move X0, 0xED1000
	036 Move X0, [X0+1320]
	037 Call 0x1C17D08
	038 Call 0x1C17F10
	039 Move X1, X19
	040 Move X2, X31
	041 Move X20, X0
	042 Call ArgumentNullException..ctor, X0, X1
	043 Move X0, 0xEFB000
	044 Move X0, [X0+176]
	045 Call 0x1C17D08
	046 Move X1, X0
	047 Move X0, X20
	048 Call 0x1C17DEC

Method: System.String Format(System.IFormatProvider provider, System.String format, System.Object arg0)

Disassembly:
	0x03228D04 MOV X1, X20
	0x03228D08 MOV X3, X31
	0x03228D0C BL 0x3311888
	0x03228D10 ADRP X0, 0xEFA000
	0x03228D14 LDR X0, [X0 + 0x110]
	0x03228D18 BL 0x1C16D08
	0x03228D1C MOV X1, X0
	0x03228D20 MOV X0, X19
	0x03228D24 BL 0x1C16DEC
	0x03228D28 BL 0x1C16F20
	0x03228D2C STR X30, [X31 - 0x20]!
	0x03228D30 STP X20, X19, [X31 + 0x10]
	0x03228D34 TBNZ X1, 0x1F, 0x3228D58
	0x03228D38 LDR W8, [X0 + 0x10]
	0x03228D3C MOV W2, W1
	0x03228D40 CMP W8, W1
	0x03228D44 B.LE 0x3228D88
	0x03228D48 LDP X20, X19, [X31 + 0x10]
	0x03228D4C MOV W1, W31
	0x03228D50 LDR X30, [X31], #0x20
	0x03228D54 B 0x3228DE4

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+80], X20
	004 Move [X31+88], X19
	005 Move X19, X1
	006 Move X20, X0
	007 NotImplemented "Instruction MOVI not yet implemented."
	008 Add X0, X31, 32
	009 Move X1, X2
	010 Move X2, X31
	011 Move [X31+32], V0
	012 Move [X31+40], V0
	013 Call ParamsArray..ctor, X0, X1
	014 Move V0, [X31+32]
	015 Move V1, [X31+48]
	016 Add X2, X31, 0
	017 Move X0, X20
	018 Move X1, X19
	019 Move [X31], V0
	020 Move [X31+8], V1
	021 Call String.FormatHelper, X0, X1, X2
	022 Move X20, [X31+80]
	023 Move X19, [X31+88]
	024 Move X30, [X31+64]
	025 Add X31, X31, 96
	026 Return X0

Method: System.String Format(System.IFormatProvider provider, System.String format, System.Object arg0, System.Object arg1)

Disassembly:
	0x03228D58 ADRP X0, 0xED3000
	0x03228D5C LDR X0, [X0 + 0x760]
	0x03228D60 BL 0x1C16D08
	0x03228D64 BL 0x1C16F10
	0x03228D68 MOV X19, X0
	0x03228D6C ADRP X0, 0xEF3000
	0x03228D70 LDR X0, [X0 + 0x658]
	0x03228D74 BL 0x1C16D08
	0x03228D78 MOV X20, X0
	0x03228D7C ADRP X0, 0xEFA000
	0x03228D80 LDR X0, [X0 + 0xD8]
	0x03228D84 B 0x3228DB4
	0x03228D88 ADRP X0, 0xED3000
	0x03228D8C LDR X0, [X0 + 0x760]
	0x03228D90 BL 0x1C16D08
	0x03228D94 BL 0x1C16F10
	0x03228D98 MOV X19, X0
	0x03228D9C ADRP X0, 0xEF3000
	0x03228DA0 LDR X0, [X0 + 0x658]
	0x03228DA4 BL 0x1C16D08
	0x03228DA8 MOV X20, X0
	0x03228DAC ADRP X0, 0xEFA000

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+80], X20
	004 Move [X31+88], X19
	005 Move X19, X1
	006 Move X20, X0
	007 NotImplemented "Instruction MOVI not yet implemented."
	008 Add X0, X31, 32
	009 Move X1, X2
	010 Move X2, X3
	011 Move X3, X31
	012 Move [X31+32], V0
	013 Move [X31+40], V0
	014 Call ParamsArray..ctor, X0, X1, X2
	015 Move V0, [X31+32]
	016 Move V1, [X31+48]
	017 Add X2, X31, 0
	018 Move X0, X20
	019 Move X1, X19
	020 Move [X31], V0
	021 Move [X31+8], V1
	022 Call String.FormatHelper, X0, X1, X2
	023 Move X20, [X31+80]
	024 Move X19, [X31+88]
	025 Move X30, [X31+64]
	026 Add X31, X31, 96
	027 Return X0

Method: System.String Format(System.IFormatProvider provider, System.String format, System.Object arg0, System.Object arg1, System.Object arg2)

Disassembly:
	0x03228DB0 LDR X0, [X0 + 0x118]
	0x03228DB4 BL 0x1C16D08
	0x03228DB8 MOV X2, X0
	0x03228DBC MOV X0, X19
	0x03228DC0 MOV X1, X20
	0x03228DC4 MOV X3, X31
	0x03228DC8 BL 0x3311888
	0x03228DCC ADRP X0, 0xEFA000
	0x03228DD0 LDR X0, [X0 + 0x120]
	0x03228DD4 BL 0x1C16D08
	0x03228DD8 MOV X1, X0
	0x03228DDC MOV X0, X19
	0x03228DE0 BL 0x1C16DEC
	0x03228DE4 STR X30, [X31 - 0x30]!
	0x03228DE8 STP X22, X21, [X31 + 0x10]
	0x03228DEC STP X20, X19, [X31 + 0x20]
	0x03228DF0 ADRP X22, 0x11B4000
	0x03228DF4 LDRB W8, [X22 + 0x37F]
	0x03228DF8 MOV W20, W2
	0x03228DFC MOV W21, W1
	0x03228E00 MOV X19, X0
	0x03228E04 TBNZ X8, 0x0, 0x3228E1C
	0x03228E08 ADRP X0, 0xECD000

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+80], X20
	004 Move [X31+88], X19
	005 Move X19, X1
	006 Move X20, X0
	007 NotImplemented "Instruction MOVI not yet implemented."
	008 Add X0, X31, 32
	009 Move X1, X2
	010 Move X2, X3
	011 Move X3, X4
	012 Move X4, X31
	013 Move [X31+32], V0
	014 Move [X31+40], V0
	015 Call ParamsArray..ctor, X0, X1, X2, X3
	016 Move V0, [X31+32]
	017 Move V1, [X31+48]
	018 Add X2, X31, 0
	019 Move X0, X20
	020 Move X1, X19
	021 Move [X31], V0
	022 Move [X31+8], V1
	023 Call String.FormatHelper, X0, X1, X2
	024 Move X20, [X31+80]
	025 Move X19, [X31+88]
	026 Move X30, [X31+64]
	027 Add X31, X31, 96
	028 Return X0

Method: System.String Format(System.IFormatProvider provider, System.String format, System.Object[] args)

Disassembly:
	0x03228E0C LDR X0, [X0 + 0x278]
	0x03228E10 BL 0x1C16CF4
	0x03228E14 MOVZ W8, 0x1
	0x03228E18 STRB W8, [X22 + 0x37F]
	0x03228E1C TBNZ X21, 0x1F, 0x3228E90
	0x03228E20 LDR W8, [X19 + 0x10]
	0x03228E24 CMP W8, W21
	0x03228E28 B.LT 0x3228EC0
	0x03228E2C TBNZ X20, 0x1F, 0x3228EF0
	0x03228E30 SUB W9, W8, W20
	0x03228E34 CMP W9, W21
	0x03228E38 B.LT 0x3228F20
	0x03228E3C CBZ W20, 0x3228E68
	0x03228E40 CBNZ W21, 0x3228E4C
	0x03228E44 CMP W8, W20
	0x03228E48 B.EQ 0x3228E7C
	0x03228E4C MOV X0, X19
	0x03228E50 MOV W1, W21
	0x03228E54 MOV W2, W20
	0x03228E58 LDP X20, X19, [X31 + 0x20]
	0x03228E5C LDP X22, X21, [X31 + 0x10]
	0x03228E60 LDR X30, [X31], #0x30
	0x03228E64 B 0x322B58C
	0x03228E68 ADRP X8, 0xECD000
	0x03228E6C LDR X8, [X8 + 0x278]
	0x03228E70 LDR X8, [X8]
	0x03228E74 LDR X8, [X8 + 0xB8]
	0x03228E78 LDR X19, [X8]
	0x03228E7C MOV X0, X19
	0x03228E80 LDP X20, X19, [X31 + 0x20]
	0x03228E84 LDP X22, X21, [X31 + 0x10]
	0x03228E88 LDR X30, [X31], #0x30
	0x03228E8C RET
	0x03228E90 ADRP X0, 0xED3000
	0x03228E94 LDR X0, [X0 + 0x760]
	0x03228E98 BL 0x1C16D08
	0x03228E9C BL 0x1C16F10
	0x03228EA0 MOV X19, X0
	0x03228EA4 ADRP X0, 0xEF3000
	0x03228EA8 LDR X0, [X0 + 0x658]
	0x03228EAC BL 0x1C16D08
	0x03228EB0 MOV X20, X0
	0x03228EB4 ADRP X0, 0xEFA000
	0x03228EB8 LDR X0, [X0 + 0xD8]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+80], X20
	004 Move [X31+88], X19
	005 Move X19, X1
	006 Compare X2, 0
	007 JumpIfEqual {29}
	008 Move X20, X0
	009 NotImplemented "Instruction MOVI not yet implemented."
	010 Add X0, X31, 32
	011 Move X1, X2
	012 Move X2, X31
	013 Move [X31+32], V0
	014 Move [X31+40], V0
	015 Call ParamsArray..ctor, X0, X1
	016 Move V0, [X31+32]
	017 Move V1, [X31+48]
	018 Add X2, X31, 0
	019 Move X0, X20
	020 Move X1, X19
	021 Move [X31], V0
	022 Move [X31+8], V1
	023 Call String.FormatHelper, X0, X1, X2
	024 Move X20, [X31+80]
	025 Move X19, [X31+88]
	026 Move X30, [X31+64]
	027 Add X31, X31, 96
	028 Return X0
	029 Move X8, 0xEFB000
	030 Move X9, 0xEFB000
	031 Move X8, [X8+136]
	032 Move X9, [X9+160]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 NotImplemented "Instruction CSEL not yet implemented."
	035 Call 0x1C17D08
	036 Move X19, X0
	037 Move X0, 0xED1000
	038 Move X0, [X0+1320]
	039 Call 0x1C17D08
	040 Call 0x1C17F10
	041 Move X1, X19
	042 Move X2, X31
	043 Move X20, X0
	044 Call ArgumentNullException..ctor, X0, X1
	045 Move X0, 0xEFB000
	046 Move X0, [X0+184]
	047 Call 0x1C17D08
	048 Move X1, X0
	049 Move X0, X20
	050 Call 0x1C17DEC

Method: System.String FormatHelper(System.IFormatProvider provider, System.String format, System.ParamsArray args)

Disassembly:
	0x03228AD0 MOVZ W9, 0x2
	0x03228AD4 AND X8, X10, 0x0
	0x03228AD8 UNIMPLEMENTED
	0x03228ADC UNIMPLEMENTED
	0x00000000 INVALID
	0x03228AE4 UNIMPLEMENTED
	0x03228AE8 FMOV W9, S3
	0x03228AEC TBZ X9, 0x0, 0x3228AF4
	0x03228AF0 STRH W19, [X21, W23, SXTW]
	0x03228AF4 UNIMPLEMENTED
	0x03228AF8 TBZ X9, 0x0, 0x3228B04
	0x03228AFC ADD W9, W23, 0x1
	0x03228B00 STRH W19, [X21, W9, SXTW]
	0x00000000 INVALID
	0x03228B08 SUBS X8, X8, 0x2
	0x03228B0C ADD W23, W23, 0x2
	0x03228B10 B.NE 0x3228AE0
	0x03228B14 MOV X22, X20
	0x03228B18 MOV X0, X22
	0x03228B1C LDP X20, X19, [X31 + 0x30]
	0x03228B20 LDP X22, X21, [X31 + 0x20]
	0x03228B24 LDP X24, X23, [X31 + 0x10]
	0x03228B28 LDR X30, [X31], #0x40
	0x03228B2C RET
	0x03228B30 ADRP X0, 0xED3000
	0x03228B34 LDR X0, [X0 + 0x760]
	0x03228B38 BL 0x1C16D08
	0x03228B3C BL 0x1C16F10
	0x03228B40 MOV X19, X0
	0x03228B44 ADRP X0, 0xEFA000
	0x03228B48 LDR X0, [X0 + 0xF0]
	0x03228B4C BL 0x1C16D08
	0x03228B50 MOV X20, X0
	0x03228B54 ADRP X0, 0xEF3000
	0x03228B58 LDR X0, [X0 + 0x670]
	0x03228B5C BL 0x1C16D08
	0x03228B60 MOV X2, X0
	0x03228B64 MOV X0, X19
	0x03228B68 MOV X1, X20
	0x03228B6C MOV X3, X31
	0x03228B70 BL 0x3311888
	0x03228B74 ADRP X0, 0xEFA000
	0x03228B78 LDR X0, [X0 + 0x100]
	0x03228B7C BL 0x1C16D08
	0x03228B80 MOV X1, X0
	0x03228B84 MOV X0, X19
	0x03228B88 BL 0x1C16DEC
	0x03228B8C BL 0x1C16F20
	0x03228B90 STR X30, [X31 - 0x40]!
	0x03228B94 STP X24, X23, [X31 + 0x10]
	0x03228B98 STP X22, X21, [X31 + 0x20]
	0x03228B9C STP X20, X19, [X31 + 0x30]
	0x03228BA0 ADRP X22, 0x11B4000
	0x03228BA4 LDRB W8, [X22 + 0x36C]
	0x03228BA8 MOV W19, W2
	0x03228BAC MOV W20, W1
	0x03228BB0 MOV X21, X0
	0x03228BB4 TBNZ X8, 0x0, 0x3228BCC
	0x03228BB8 ADRP X0, 0xECD000
	0x03228BBC LDR X0, [X0 + 0x278]
	0x03228BC0 BL 0x1C16CF4
	0x03228BC4 MOVZ W8, 0x1
	0x03228BC8 STRB W8, [X22 + 0x36C]
	0x03228BCC TBNZ X20, 0x1F, 0x3228C6C
	0x03228BD0 TBNZ X19, 0x1F, 0x3228C9C

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+80], X22
	004 Move [X31+88], X21
	005 Move [X31+96], X20
	006 Move [X31+104], X19
	007 Move X22, 0x11B5000
	008 Move W8, [X22+872]
	009 Move X21, X2
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEFB000
	017 Move X0, [X0+152]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+872], W8
	021 Compare X19, 0
	022 JumpIfEqual {61}
	023 Move X8, 0xEFB000
	024 Move X8, [X8+152]
	025 Move W22, [X19+16]
	026 Move X0, [X8]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X21
	032 Move X1, X31
	033 Call ParamsArray.get_Length, X0
	034 Add W0, W22, W0
	035 Move X1, X31
	036 Call StringBuilderCache.Acquire, X0
	037 Move V1, [X21]
	038 Move V0, [X21+16]
	039 Move [X31+32], V1
	040 Move [X31+40], V0
	041 Compare X0, 0
	042 JumpIfEqual {79}
	043 Move V0, [X31+32]
	044 Move V1, [X31+48]
	045 Add X3, X31, 0
	046 Move X1, X20
	047 Move X2, X19
	048 Move X4, X31
	049 Move [X31], V0
	050 Move [X31+8], V1
	051 Call StringBuilder.AppendFormatHelper, X0, X1, X2, X3
	052 Move X1, X31
	053 Call StringBuilderCache.GetStringAndRelease, X0
	054 Move X20, [X31+96]
	055 Move X19, [X31+104]
	056 Move X22, [X31+80]
	057 Move X21, [X31+88]
	058 Move X30, [X31+64]
	059 Add X31, X31, 112
	060 Return X0
	061 Move X0, 0xED1000
	062 Move X0, [X0+1320]
	063 Call 0x1C17D08
	064 Call 0x1C17F10
	065 Move X19, X0
	066 Move X0, 0xEFB000
	067 Move X0, [X0+160]
	068 Call 0x1C17D08
	069 Move X1, X0
	070 Move X0, X19
	071 Move X2, X31
	072 Call ArgumentNullException..ctor, X0, X1
	073 Move X0, 0xEFB000
	074 Move X0, [X0+168]
	075 Call 0x1C17D08
	076 Move X1, X0
	077 Move X0, X19
	078 Call 0x1C17DEC
	079 Call 0x1C17F20

Method: System.String Insert(System.Int32 startIndex, System.String value)

Disassembly:
	0x03228EBC B 0x3228F4C
	0x03228EC0 ADRP X0, 0xED3000
	0x03228EC4 LDR X0, [X0 + 0x760]
	0x03228EC8 BL 0x1C16D08
	0x03228ECC BL 0x1C16F10
	0x03228ED0 MOV X19, X0
	0x03228ED4 ADRP X0, 0xEF3000
	0x03228ED8 LDR X0, [X0 + 0x658]
	0x03228EDC BL 0x1C16D08
	0x03228EE0 MOV X20, X0
	0x03228EE4 ADRP X0, 0xEFA000
	0x03228EE8 LDR X0, [X0 + 0x128]
	0x03228EEC B 0x3228F4C
	0x03228EF0 ADRP X0, 0xED3000
	0x03228EF4 LDR X0, [X0 + 0x760]
	0x03228EF8 BL 0x1C16D08
	0x03228EFC BL 0x1C16F10
	0x03228F00 MOV X19, X0
	0x03228F04 ADRP X0, 0xED3000
	0x03228F08 LDR X0, [X0 + 0x768]
	0x03228F0C BL 0x1C16D08
	0x03228F10 MOV X20, X0
	0x03228F14 ADRP X0, 0xEFA000
	0x03228F18 LDR X0, [X0]
	0x03228F1C B 0x3228F4C
	0x03228F20 ADRP X0, 0xED3000
	0x03228F24 LDR X0, [X0 + 0x760]
	0x03228F28 BL 0x1C16D08
	0x03228F2C BL 0x1C16F10
	0x03228F30 MOV X19, X0
	0x03228F34 ADRP X0, 0xED3000
	0x03228F38 LDR X0, [X0 + 0x768]
	0x03228F3C BL 0x1C16D08
	0x03228F40 MOV X20, X0
	0x03228F44 ADRP X0, 0xEFA000
	0x03228F48 LDR X0, [X0 + 0x130]
	0x03228F4C BL 0x1C16D08
	0x03228F50 MOV X2, X0
	0x03228F54 MOV X0, X19
	0x03228F58 MOV X1, X20
	0x03228F5C MOV X3, X31
	0x03228F60 BL 0x3311888
	0x03228F64 ADRP X0, 0xEFA000
	0x03228F68 LDR X0, [X0 + 0x138]
	0x03228F6C BL 0x1C16D08
	0x03228F70 MOV X1, X0
	0x03228F74 MOV X0, X19
	0x03228F78 BL 0x1C16DEC
	0x03228F7C STP X30, X23, [X31 - 0x30]!
	0x03228F80 STP X22, X21, [X31 + 0x10]
	0x03228F84 STP X20, X19, [X31 + 0x20]
	0x03228F88 ADRP X23, 0x11B4000
	0x03228F8C LDRB W8, [X23 + 0x36D]
	0x03228F90 MOV W22, W3
	0x03228F94 MOV X19, X2
	0x03228F98 MOV X20, X1
	0x03228F9C MOV X21, X0
	0x03228FA0 TBNZ X8, 0x0, 0x3228FB8
	0x03228FA4 ADRP X0, 0xECD000
	0x03228FA8 LDR X0, [X0 + 0xC48]
	0x03228FAC BL 0x1C16CF4
	0x03228FB0 MOVZ W8, 0x1
	0x03228FB4 STRB W8, [X23 + 0x36D]
	0x03228FB8 CMP W22, 0x5
	0x03228FBC B.HI 0x32290E4
	0x03228FC0 ADRP X9, 0xFFFFFFFFFD96E000
	0x03228FC4 MOV W8, W22
	0x03228FC8 ADD X9, X9, 0x46D
	0x03228FCC ADR X10, 0x10
	0x03228FD0 LDRB W11, [X9, X8, LSL]
	0x03228FD4 ADD X10, X10, X11, 0x2, LSL
	0x03228FD8 BR X10
	0x03228FDC ADRP X8, 0xECD000
	0x03228FE0 LDR X8, [X8 + 0xC48]
	0x03228FE4 LDR X0, [X8]
	0x03228FE8 LDR W8, [X0 + 0xE0]
	0x03228FEC CBNZ W8, 0x3228FF4
	0x03228FF0 BL 0x1C16DFC
	0x03228FF4 MOV X0, X31

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Compare X2, 0
	010 JumpIfEqual {79}
	011 Move W19, W1
	012 Move TEMP, X1
	013 And TEMP, TEMP, -2147483648
	014 Compare TEMP, -2147483648
	015 JumpIfEqual {67}
	016 Move W8, [X0+16]
	017 Move X22, X0
	018 Subtract W24, W8, W19
	019 Move X20, X2
	020 Compare W8, 0
	021 JumpIfEqual {57}
	022 NotImplemented "Instruction LDRSW not yet implemented."
	023 Compare W25, 0
	024 JumpIfEqual {56}
	025 Add W0, W25, W8
	026 Call 0x1C8925C
	027 Compare X0, 0
	028 JumpIfEqual {97}
	029 Add X22, X22, 20
	030 Add X23, X0, 20
	031 Move X21, X0
	032 Move W2, W19
	033 ShiftRight W2, 31
	034 And W2, W2, 0x3FFFFFFF
	035 Move X0, X23
	036 Move X1, X22
	037 Move X3, X31
	038 Add X20, X20, 20
	039 Call Buffer.Memmove, X0, X1, X2
	040 Add X23, X23, W19
	041 Move W2, W25
	042 ShiftRight W2, 31
	043 And W2, W2, 0x3FFFFFFF
	044 Move X0, X23
	045 Move X1, X20
	046 Move X3, X31
	047 Call Buffer.Memmove, X0, X1, X2
	048 Add X0, X23, X25
	049 Add X1, X22, W19
	050 Move W2, W24
	051 ShiftRight W2, 31
	052 And W2, W2, 0x3FFFFFFF
	053 Move X3, X31
	054 Call Buffer.Memmove, X0, X1, X2
	055 Move X20, X21
	056 Move X20, X22
	057 Move X0, X20
	058 Move X20, [X31+48]
	059 Move X19, [X31+56]
	060 Move X22, [X31+32]
	061 Move X21, [X31+40]
	062 Move X24, [X31+16]
	063 Move X23, [X31+24]
	064 Move X30, [X31+64]
	065 Move X25, [X31+72]
	066 Return X0
	067 Move X0, 0xED4000
	068 Move X0, [X0+1888]
	069 Call 0x1C17D08
	070 Call 0x1C17F10
	071 Move X19, X0
	072 Move X0, 0xEF4000
	073 Move X0, [X0+1624]
	074 Call 0x1C17D08
	075 Move X1, X0
	076 Move X0, X19
	077 Move X2, X31
	078 Call ArgumentOutOfRangeException..ctor, X0, X1
	079 Move X0, 0xED1000
	080 Move X0, [X0+1320]
	081 Call 0x1C17D08
	082 Call 0x1C17F10
	083 Move X19, X0
	084 Move X0, 0xED6000
	085 Move X0, [X0+3784]
	086 Call 0x1C17D08
	087 Move X1, X0
	088 Move X0, X19
	089 Move X2, X31
	090 Call ArgumentNullException..ctor, X0, X1
	091 Move X0, 0xEFB000
	092 Move X0, [X0+192]
	093 Call 0x1C17D08
	094 Move X1, X0
	095 Move X0, X19
	096 Call 0x1C17DEC
	097 Call 0x1C17F20

Method: System.String Join(System.String separator, System.String[] value)

Disassembly:
	0x03228FF8 BL 0x33387A0
	0x03228FFC B 0x3229044
	0x03229000 ADRP X8, 0xECC000
	0x03229004 LDR X8, [X8 + 0xC48]
	0x03229008 LDR X0, [X8]
	0x0322900C LDR W8, [X0 + 0xE0]
	0x03229010 CBNZ W8, 0x3229018
	0x03229014 BL 0x1C16DFC
	0x03229018 MOV X0, X31
	0x0322901C BL 0x33387A0
	0x03229020 B 0x322907C
	0x03229024 ADRP X8, 0xECC000
	0x03229028 LDR X8, [X8 + 0xC48]
	0x0322902C LDR X0, [X8]
	0x03229030 LDR W8, [X0 + 0xE0]
	0x03229034 CBNZ W8, 0x322903C
	0x03229038 BL 0x1C16DFC
	0x0322903C MOV X0, X31
	0x03229040 BL 0x3338524
	0x03229044 MOV X3, X0
	0x03229048 MOV X0, X21
	0x0322904C MOV X1, X20
	0x03229050 MOV X2, X19
	0x03229054 MOV W4, W31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X1, 0
	004 JumpIfEqual {9}
	005 Move W3, [X1+24]
	006 Move W2, W31
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Move X0, 0xED0000
	010 Move X0, [X0+1320]
	011 Call 0x1C17D08
	012 Call 0x1C17F10
	013 Move X19, X0
	014 Move X0, 0xED5000
	015 Move X0, [X0+3784]
	016 Call 0x1C17D08
	017 Move X1, X0
	018 Move X0, X19
	019 Move X2, X31
	020 Call ArgumentNullException..ctor, X0, X1
	021 Move X0, 0xEFA000
	022 Move X0, [X0+200]
	023 Call 0x1C17D08
	024 Move X1, X0
	025 Move X0, X19
	026 Call 0x1C17DEC

Method: System.String Join(System.String separator, System.Collections.Generic.IEnumerable`1<T> values)

Disassembly:
	0x0226C4E8 BL 0x1C16CF4
	0x0226C4EC LDR X8, [X20 + 0x38]
	0x0226C4F0 CBNZ X8, 0x226C4FC
	0x0226C4F4 MOV X0, X20
	0x0226C4F8 BL 0x1C5C6E0
	0x0226C4FC STP X31, X31, [X31]
	0x0226C500 CBZ X19, 0x226C8B0
	0x0226C504 LDR X8, [X20 + 0x38]
	0x0226C508 LDR X1, [X8]
	0x0226C50C LDRB W8, [X1 + 0x135]
	0x0226C510 TBNZ X8, 0x0, 0x226C520
	0x0226C514 MOV X0, X1
	0x0226C518 BL 0x1C5C684
	0x0226C51C MOV X1, X0
	0x0226C520 LDR X8, [X19]
	0x0226C524 LDRH W9, [X8 + 0x12E]
	0x0226C528 CBZ X9, 0x226C54C
	0x0226C52C LDR X10, [X8 + 0xB0]
	0x0226C530 ADD X10, X10, 0x8
	0x0226C534 LDUR X11, [X10 - 0x8]
	0x0226C538 CMP X11, X1
	0x0226C53C B.EQ 0x226C55C
	0x0226C540 SUBS X9, X9, 0x1
	0x0226C544 ADD X10, X10, 0x10
	0x0226C548 B.NE 0x226C534
	0x0226C54C MOV X0, X19
	0x0226C550 MOV W2, W31
	0x0226C554 BL 0x1C5C788
	0x0226C558 B 0x226C568
	0x0226C55C LDRSW X9, [X10]
	0x0226C560 ADD X8, X8, X9, 0x4, LSL
	0x0226C564 ADD X0, X8, 0x138

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+56]
	006 Move X20, X2
	007 Move X19, X1
	008 Move X21, X0
	009 Compare X8, 0
	010 JumpIfNotEqual {17}
	011 Move X0, 0x1E8A000
	012 Move X0, [X0+632]
	013 Call 0x1C17CF4
	014 Move X8, [X20+56]
	015 Compare X8, 0
	016 JumpIfEqual {37}
	017 Compare X21, 0
	018 JumpIfNotEqual {26}
	019 Move X8, 0x1E8A000
	020 Move X8, [X8+632]
	021 Move X8, [X8]
	022 Move X8, [X8+184]
	023 Move X21, [X8]
	024 Compare X21, 0
	025 JumpIfEqual {41}
	026 Move X8, [X20+56]
	027 Move W1, [X21+16]
	028 Move X2, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X3, [X8+8]
	032 Add X0, X21, 20
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call 0x226C9EC, X0, X1, X2
	036 Return X0
	037 Move X0, X20
	038 Call 0x1C5D6E0
	039 Compare X21, 0
	040 JumpIfNotEqual {26}
	041 Call 0x1C17F20

Method: System.String Join(System.String separator, System.Collections.Generic.IEnumerable`1<System.String> values)

Disassembly:
	0x032290D8 LDP X22, X21, [X31 + 0x10]
	0x032290DC LDP X30, X23, [X31], #0x30
	0x032290E0 B 0x3229140
	0x032290E4 ADRP X0, 0xED2000
	0x032290E8 LDR X0, [X0 + 0x578]
	0x032290EC BL 0x1C16D08
	0x032290F0 BL 0x1C16F10
	0x032290F4 MOV X19, X0
	0x032290F8 ADRP X0, 0xEF8000
	0x032290FC LDR X0, [X0 + 0xFD8]
	0x03229100 BL 0x1C16D08
	0x03229104 MOV X20, X0
	0x03229108 ADRP X0, 0xEF8000
	0x0322910C LDR X0, [X0 + 0xFE0]
	0x03229110 BL 0x1C16D08
	0x03229114 MOV X2, X0
	0x03229118 MOV X0, X19
	0x0322911C MOV X1, X20
	0x03229120 MOV X3, X31
	0x03229124 BL 0x330E16C
	0x03229128 ADRP X0, 0xEF9000
	0x0322912C LDR X0, [X0 + 0x140]
	0x03229130 BL 0x1C16D08
	0x03229134 MOV X1, X0
	0x03229138 MOV X0, X19
	0x0322913C BL 0x1C16DEC
	0x03229140 SUB X31, X31, 0x60
	0x03229144 STP X30, X27, [X31 + 0x10]
	0x03229148 STP X26, X25, [X31 + 0x20]
	0x0322914C STP X24, X23, [X31 + 0x30]
	0x03229150 STP X22, X21, [X31 + 0x40]
	0x03229154 STP X20, X19, [X31 + 0x50]
	0x03229158 ADRP X23, 0x11B3000
	0x0322915C LDRB W8, [X23 + 0x36E]
	0x03229160 MOV W20, W4
	0x03229164 MOV X24, X3
	0x03229168 MOV X22, X2
	0x0322916C MOV X21, X1
	0x03229170 MOV X19, X0
	0x03229174 TBNZ X8, 0x0, 0x3229198
	0x03229178 ADRP X0, 0xECC000
	0x0322917C LDR X0, [X0 + 0xC48]
	0x03229180 BL 0x1C16CF4
	0x03229184 ADRP X0, 0xECC000
	0x03229188 LDR X0, [X0 + 0x278]
	0x0322918C BL 0x1C16CF4
	0x03229190 MOVZ W8, 0x1
	0x03229194 STRB W8, [X23 + 0x36E]
	0x03229198 CBZ X21, 0x322932C
	0x0322919C LDR W8, [X21 + 0x10]
	0x032291A0 CBZ W8, 0x3229360
	0x032291A4 CBZ X22, 0x32291C4
	0x032291A8 CBZ X24, 0x32291DC
	0x032291AC MOVZ W0, 0x10
	0x032291B0 MOV X1, X31
	0x032291B4 BL 0x3235A9C
	0x032291B8 MOV X23, X0
	0x032291BC STR W31, [X31 + 0xC]
	0x032291C0 B 0x3229218
	0x032291C4 ADRP X8, 0xECC000
	0x032291C8 LDR X8, [X8 + 0x278]
	0x032291CC LDR X8, [X8]
	0x032291D0 LDR X8, [X8 + 0xB8]
	0x032291D4 LDR X22, [X8]
	0x032291D8 CBNZ X24, 0x32291AC
	0x032291DC ADRP X8, 0xECC000
	0x032291E0 LDR X8, [X8 + 0xC48]
	0x032291E4 LDR X0, [X8]
	0x032291E8 LDR W8, [X0 + 0xE0]
	0x032291EC CBNZ W8, 0x32291F4
	0x032291F0 BL 0x1C16DFC
	0x032291F4 MOV X0, X31
	0x032291F8 BL 0x33387A0
	0x032291FC MOV X24, X0
	0x03229200 MOVZ W0, 0x10
	0x03229204 MOV X1, X31
	0x03229208 BL 0x3235A9C
	0x0322920C STR W31, [X31 + 0xC]
	0x03229210 CBZ X24, 0x3229328
	0x03229214 MOV X23, X0
	0x03229218 LDR X8, [X24]
	0x0322921C MOV X0, X24
	0x03229220 LDP X9, X1, [X8 + 0x1F8]
	0x03229224 BLR X9
	0x03229228 CBZ X0, 0x3229328
	0x0322922C LDR W4, [X19 + 0x10]
	0x03229230 ADD X6, X31, 0xC
	0x03229234 MOV X1, X19
	0x03229238 MOV X2, X21
	0x0322923C MOV W3, W31
	0x03229240 MOV W5, W20
	0x03229244 MOV X7, X31
	0x03229248 MOV X24, X0
	0x0322924C BL 0x33060A4
	0x03229250 MOV W25, W0
	0x03229254 MOV W26, W31
	0x03229258 TBNZ X0, 0x1F, 0x32292C4
	0x0322925C MOV W27, W25
	0x03229260 CBZ X23, 0x3229328
	0x03229264 SUB W3, W27, W26
	0x03229268 MOV X0, X23
	0x0322926C MOV X1, X19
	0x03229270 MOV W2, W26
	0x03229274 MOV X4, X31
	0x03229278 BL 0x323351C
	0x0322927C MOV X0, X23
	0x03229280 MOV X1, X22
	0x03229284 MOV X2, X31
	0x03229288 BL 0x32333E0
	0x0322928C LDR W8, [X31 + 0xC]
	0x03229290 LDR W9, [X19 + 0x10]
	0x03229294 ADD X6, X31, 0xC
	0x03229298 MOV X0, X24
	0x0322929C ADD W26, W8, W27
	0x032292A0 SUB W4, W9, W26
	0x032292A4 MOV X1, X19
	0x032292A8 MOV X2, X21
	0x032292AC MOV W3, W26
	0x032292B0 MOV W5, W20
	0x032292B4 MOV X7, X31
	0x032292B8 BL 0x33060A4
	0x032292BC MOV W27, W0
	0x032292C0 TBZ X0, 0x1F, 0x3229260
	0x032292C4 TBNZ X25, 0x1F, 0x32292FC
	0x032292C8 CBZ X23, 0x3229328
	0x032292CC LDR W8, [X19 + 0x10]
	0x032292D0 MOV X0, X23
	0x032292D4 MOV X1, X19
	0x032292D8 MOV W2, W26
	0x032292DC SUB W3, W8, W26
	0x032292E0 MOV X4, X31
	0x032292E4 BL 0x323351C
	0x032292E8 MOV X0, X23
	0x032292EC MOV X1, X31
	0x032292F0 BL 0x3235BE8
	0x032292F4 MOV X19, X0
	0x032292F8 B 0x3229308
	0x032292FC MOV X0, X23
	0x03229300 MOV X1, X31
	0x03229304 BL 0x3235B68
	0x03229308 MOV X0, X19
	0x0322930C LDP X20, X19, [X31 + 0x50]
	0x03229310 LDP X22, X21, [X31 + 0x40]
	0x03229314 LDP X24, X23, [X31 + 0x30]
	0x03229318 LDP X26, X25, [X31 + 0x20]
	0x0322931C LDP X30, X27, [X31 + 0x10]
	0x03229320 ADD X31, X31, 0x60
	0x03229324 RET
	0x03229328 BL 0x1C16F20
	0x0322932C ADRP X0, 0xECF000
	0x03229330 LDR X0, [X0 + 0x528]
	0x03229334 BL 0x1C16D08
	0x03229338 BL 0x1C16F10
	0x0322933C MOV X19, X0
	0x03229340 ADRP X0, 0xEF9000
	0x03229344 LDR X0, [X0 + 0x148]
	0x03229348 BL 0x1C16D08
	0x0322934C MOV X1, X0
	0x03229350 MOV X0, X19
	0x03229354 MOV X2, X31
	0x03229358 BL 0x330E100
	0x0322935C B 0x32293A4
	0x03229360 ADRP X0, 0xED2000
	0x03229364 LDR X0, [X0 + 0x578]
	0x03229368 BL 0x1C16D08
	0x0322936C BL 0x1C16F10
	0x03229370 MOV X19, X0
	0x03229374 ADRP X0, 0xEF9000
	0x03229378 LDR X0, [X0 + 0x150]
	0x0322937C BL 0x1C16D08
	0x03229380 MOV X20, X0
	0x03229384 ADRP X0, 0xEF9000
	0x03229388 LDR X0, [X0 + 0x148]
	0x0322938C BL 0x1C16D08
	0x03229390 MOV X2, X0
	0x03229394 MOV X0, X19
	0x03229398 MOV X1, X20
	0x0322939C MOV X3, X31
	0x032293A0 BL 0x330E16C
	0x032293A4 ADRP X0, 0xEF9000
	0x032293A8 LDR X0, [X0 + 0x158]
	0x032293AC BL 0x1C16D08
	0x032293B0 MOV X1, X0
	0x032293B4 MOV X0, X19
	0x032293B8 BL 0x1C16DEC
	0x032293BC STP X29, X30, [X31 - 0x60]!
	0x032293C0 STP X28, X27, [X31 + 0x10]
	0x032293C4 STP X26, X25, [X31 + 0x20]
	0x032293C8 STP X24, X23, [X31 + 0x30]
	0x032293CC STP X22, X21, [X31 + 0x40]
	0x032293D0 STP X20, X19, [X31 + 0x50]
	0x032293D4 ADD X29, X31, 0x0
	0x032293D8 SUB X31, X31, 0x40
	0x032293DC MRS X20, 0xC000
	0x032293E0 LDR X8, [X20 + 0x28]
	0x032293E4 ADRP X22, 0x11B3000
	0x032293E8 MOV X24, X2
	0x032293EC MOV X21, X1
	0x032293F0 STUR X8, [X29 - 0x8]
	0x032293F4 LDRB W8, [X22 + 0x36F]
	0x032293F8 MOV X19, X0
	0x032293FC TBNZ X8, 0x0, 0x322945C
	0x03229400 ADRP X0, 0xEF9000
	0x03229404 LDR X0, [X0 + 0x160]
	0x03229408 BL 0x1C16CF4
	0x0322940C ADRP X0, 0xECC000
	0x03229410 LDR X0, [X0 + 0x278]
	0x03229414 BL 0x1C16CF4
	0x03229418 ADRP X0, 0xEF9000
	0x0322941C LDR X0, [X0 + 0x168]
	0x03229420 BL 0x1C16CF4
	0x03229424 ADRP X0, 0xEF9000
	0x03229428 LDR X0, [X0 + 0x170]
	0x0322942C BL 0x1C16CF4
	0x03229430 ADRP X0, 0xEF9000
	0x03229434 LDR X0, [X0 + 0x178]
	0x03229438 BL 0x1C16CF4
	0x0322943C ADRP X0, 0xEF9000
	0x03229440 LDR X0, [X0 + 0x180]
	0x03229444 BL 0x1C16CF4
	0x03229448 ADRP X0, 0xEF9000
	0x0322944C LDR X0, [X0 + 0x188]
	0x03229450 BL 0x1C16CF4
	0x03229454 MOVZ W8, 0x1
	0x03229458 STRB W8, [X22 + 0x36F]
	0x0322945C MOVI V0.2D, 0x0
	0x03229460 STP V0, V0, [X29 - 0x30]
	0x03229464 CBZ X21, 0x322963C
	0x03229468 LDR W8, [X21 + 0x10]
	0x0322946C CBZ W8, 0x3229670
	0x03229470 STUR X20, [X29 - 0x38]
	0x03229474 ADRP X23, 0xEF9000
	0x03229478 LDR X23, [X23 + 0x180]
	0x0322947C CBNZ X24, 0x3229494
	0x03229480 ADRP X8, 0xECC000
	0x03229484 LDR X8, [X8 + 0x278]
	0x03229488 LDR X8, [X8]
	0x0322948C LDR X8, [X8 + 0xB8]
	0x03229490 LDR X24, [X8]
	0x03229494 SUB X22, X31, 0x200
	0x03229498 STUR X24, [X29 - 0x40]
	0x0322949C ADD X31, X22, 0x0
	0x032294A0 MOVZ W2, 0x200
	0x032294A4 MOV X0, X22
	0x032294A8 MOV W1, W31
	0x032294AC BL 0x3EB1B10
	0x032294B0 LDR X3, [X23]
	0x032294B4 SUB X0, X29, 0x30
	0x032294B8 MOVZ W2, 0x80
	0x032294BC MOV X1, X22
	0x032294C0 BL 0x278D6C4
	0x032294C4 LDR W9, [X19 + 0x10]
	0x032294C8 LDR W8, [X21 + 0x10]
	0x032294CC SUBS W22, W9, W8
	0x032294D0 B.MI 0x32295B0
	0x032294D4 ADRP X25, 0xEF9000
	0x032294D8 LDR X25, [X25 + 0x168]
	0x032294DC MOV W24, W31
	0x032294E0 ADD X26, X19, 0x14
	0x032294E4 ADD X27, X21, 0x14
	0x032294E8 CMP W8, 0x1
	0x032294EC B.LT 0x3229530
	0x032294F0 SXTW X9, W24
	0x032294F4 MOV X28, X31
	0x032294F8 ADD X23, X26, X9, 0x1, LSL
	0x032294FC LDRH W20, [X23]
	0x03229500 CMP X28, W8, SXTW
	0x03229504 B.LT 0x3229510
	0x03229508 MOV X0, X31
	0x0322950C BL 0x339D674
	0x03229510 LDRH W8, [X27, X28, LSL #1]
	0x03229514 CMP W20, W8
	0x03229518 B.NE 0x322959C
	0x0322951C LDRSW X8, [X21 + 0x10]
	0x03229520 ADD X28, X28, 0x1
	0x03229524 ADD X23, X23, 0x2
	0x03229528 CMP X28, X8
	0x0322952C B.LT 0x32294FC
	0x03229530 LDR X23, [X25]
	0x03229534 LDURSW X28, [X29 - 0x18]
	0x03229538 LDR X0, [X23 + 0x20]
	0x0322953C LDRB W8, [X0 + 0x135]
	0x03229540 TBNZ X8, 0x0, 0x3229548
	0x03229544 BL 0x1C5C684
	0x03229548 LDUR W8, [X29 - 0x28]
	0x0322954C CMP W28, W8
	0x03229550 B.LT 0x3229578
	0x03229554 LDR X0, [X23 + 0x20]
	0x03229558 LDRB W8, [X0 + 0x135]
	0x0322955C TBNZ X8, 0x0, 0x3229564
	0x03229560 BL 0x1C5C684
	0x03229564 LDR X8, [X0 + 0xC0]
	0x03229568 SUB X0, X29, 0x30
	0x0322956C LDR X1, [X8 + 0x28]
	0x03229570 BL 0x278D8D4
	0x03229574 LDUR W8, [X29 - 0x28]
	0x03229578 CMP W28, W8
	0x0322957C B.CS 0x3229638
	0x03229580 LDUR X8, [X29 - 0x30]
	0x03229584 ADD W9, W28, 0x1
	0x03229588 STR W24, [X8, X28, LSL #2]
	0x0322958C STUR W9, [X29 - 0x18]
	0x03229590 LDR W8, [X21 + 0x10]
	0x03229594 ADD W24, W8, W24
	0x03229598 B 0x32295A0
	0x0322959C ADD W24, W24, 0x1
	0x032295A0 CMP W24, W22

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x11B4000
	010 Move W8, [X21+873]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xECB000
	018 Move X0, [X0+3584]
	019 Call 0x1C17CF4
	020 Move X0, 0xECB000
	021 Move X0, [X0+3952]
	022 Call 0x1C17CF4
	023 Move X0, 0xECB000
	024 Move X0, [X0+3960]
	025 Call 0x1C17CF4
	026 Move X0, 0xECB000
	027 Move X0, [X0+3608]
	028 Call 0x1C17CF4
	029 Move X0, 0xECD000
	030 Move X0, [X0+632]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X21+873], W8
	034 Compare X19, 0
	035 JumpIfEqual {251}
	036 Move X10, 0xECB000
	037 Move X8, [X19]
	038 Move X10, [X10+3952]
	039 NotImplemented "Instruction LDRH not yet implemented."
	040 Move X1, [X10]
	041 Compare X9, 0
	042 JumpIfEqual {49}
	043 Move X10, [X8+176]
	044 Add X10, X10, 8
	045 NotImplemented "Instruction LDUR not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Subtract X9, X9, 1
	048 Add X10, X10, 16
	049 Move X0, X19
	050 Move W2, W31
	051 Call 0x1C5D788
	052 NotImplemented "Instruction LDRSW not yet implemented."
	053 Add X8, X8, X9
	054 Add X0, X8, 312
	055 Move X8, [X0]
	056 Move X1, [X0+8]
	057 Move X23, 0xECB000
	058 Move X23, [X23+3584]
	059 Move X0, X19
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move X19, X0
	062 Compare X0, 0
	063 JumpIfEqual {269}
	064 Move X24, 0xECB000
	065 Move X8, [X19]
	066 Move X24, [X24+3608]
	067 NotImplemented "Instruction LDRH not yet implemented."
	068 Move X1, [X24]
	069 Compare X9, 0
	070 JumpIfEqual {77}
	071 Move X10, [X8+176]
	072 Add X10, X10, 8
	073 NotImplemented "Instruction LDUR not yet implemented."
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Subtract X9, X9, 1
	076 Add X10, X10, 16
	077 Move X0, X19
	078 Move W2, W31
	079 Call 0x1C5D788
	080 NotImplemented "Instruction LDRSW not yet implemented."
	081 Add X8, X8, X9
	082 Add X0, X8, 312
	083 Move X8, [X0]
	084 Move X1, [X0+8]
	085 Move X0, X19
	086 NotImplemented "Instruction BLR not yet implemented."
	087 Move TEMP, X0
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfNotEqual {210}
	091 Move X25, 0xECB000
	092 Move X8, [X19]
	093 Move X25, [X25+3960]
	094 NotImplemented "Instruction LDRH not yet implemented."
	095 Move X1, [X25]
	096 Compare X9, 0
	097 JumpIfEqual {104}
	098 Move X10, [X8+176]
	099 Add X10, X10, 8
	100 NotImplemented "Instruction LDUR not yet implemented."
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Subtract X9, X9, 1
	103 Add X10, X10, 16
	104 Move X0, X19
	105 Move W2, W31
	106 Call 0x1C5D788
	107 NotImplemented "Instruction LDRSW not yet implemented."
	108 Add X8, X8, X9
	109 Add X0, X8, 312
	110 Move X8, [X0]
	111 Move X1, [X0+8]
	112 Move X0, X19
	113 NotImplemented "Instruction BLR not yet implemented."
	114 Move X8, [X19]
	115 Move X1, [X24]
	116 Move X21, X0
	117 NotImplemented "Instruction LDRH not yet implemented."
	118 Compare X9, 0
	119 JumpIfEqual {126}
	120 Move X10, [X8+176]
	121 Add X10, X10, 8
	122 NotImplemented "Instruction LDUR not yet implemented."
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Subtract X9, X9, 1
	125 Add X10, X10, 16
	126 Move X0, X19
	127 Move W2, W31
	128 Call 0x1C5D788
	129 NotImplemented "Instruction LDRSW not yet implemented."
	130 Add X8, X8, X9
	131 Add X0, X8, 312
	132 Move X8, [X0]
	133 Move X1, [X0+8]
	134 Move X0, X19
	135 NotImplemented "Instruction BLR not yet implemented."
	136 Move TEMP, X0
	137 And TEMP, TEMP, 1
	138 Compare TEMP, 1
	139 JumpIfNotEqual {208}
	140 Move W0, 16
	141 Move X1, X31
	142 Call StringBuilderCache.Acquire, X0
	143 Move X22, X0
	144 Compare X0, 0
	145 JumpIfEqual {272}
	146 Move X0, X22
	147 Move X1, X21
	148 Move X2, X31
	149 Call StringBuilder.Append, X0, X1
	150 Move X0, X22
	151 Move X1, X20
	152 Move X2, X31
	153 Call StringBuilder.Append, X0, X1
	154 Move X8, [X19]
	155 Move X1, [X25]
	156 NotImplemented "Instruction LDRH not yet implemented."
	157 Compare X9, 0
	158 JumpIfEqual {165}
	159 Move X10, [X8+176]
	160 Add X10, X10, 8
	161 NotImplemented "Instruction LDUR not yet implemented."
	162 NotImplemented "Instruction CMP not yet implemented."
	163 Subtract X9, X9, 1
	164 Add X10, X10, 16
	165 Move X0, X19
	166 Move W2, W31
	167 Call 0x1C5D788
	168 NotImplemented "Instruction LDRSW not yet implemented."
	169 Add X8, X8, X9
	170 Add X0, X8, 312
	171 Move X8, [X0]
	172 Move X1, [X0+8]
	173 Move X0, X19
	174 NotImplemented "Instruction BLR not yet implemented."
	175 Move X1, X0
	176 Move X0, X22
	177 Move X2, X31
	178 Call StringBuilder.Append, X0, X1
	179 Move X8, [X19]
	180 Move X1, [X24]
	181 NotImplemented "Instruction LDRH not yet implemented."
	182 Compare X9, 0
	183 JumpIfEqual {190}
	184 Move X10, [X8+176]
	185 Add X10, X10, 8
	186 NotImplemented "Instruction LDUR not yet implemented."
	187 NotImplemented "Instruction CMP not yet implemented."
	188 Subtract X9, X9, 1
	189 Add X10, X10, 16
	190 Move X0, X19
	191 Move W2, W31
	192 Call 0x1C5D788
	193 NotImplemented "Instruction LDRSW not yet implemented."
	194 Add X8, X8, X9
	195 Add X0, X8, 312
	196 Move X8, [X0]
	197 Move X1, [X0+8]
	198 Move X0, X19
	199 NotImplemented "Instruction BLR not yet implemented."
	200 Move TEMP, X0
	201 And TEMP, TEMP, 1
	202 Compare TEMP, 1
	203 JumpIfEqual {150}
	204 Move X0, X22
	205 Move X1, X31
	206 Call StringBuilderCache.GetStringAndRelease, X0
	207 Move X21, X0
	208 Compare X21, 0
	209 JumpIfNotEqual {215}
	210 Move X8, 0xECD000
	211 Move X8, [X8+632]
	212 Move X8, [X8]
	213 Move X8, [X8+184]
	214 Move X21, [X8]
	215 Move X20, X31
	216 Compare X19, 0
	217 JumpIfEqual {239}
	218 Move X8, [X19]
	219 Move X1, [X23]
	220 NotImplemented "Instruction LDRH not yet implemented."
	221 Compare X9, 0
	222 JumpIfEqual {229}
	223 Move X10, [X8+176]
	224 Add X10, X10, 8
	225 NotImplemented "Instruction LDUR not yet implemented."
	226 NotImplemented "Instruction CMP not yet implemented."
	227 Subtract X9, X9, 1
	228 Add X10, X10, 16
	229 Move X0, X19
	230 Move W2, W31
	231 Call 0x1C5D788
	232 NotImplemented "Instruction LDRSW not yet implemented."
	233 Add X8, X8, X9
	234 Add X0, X8, 312
	235 Move X8, [X0]
	236 Move X1, [X0+8]
	237 Move X0, X19
	238 NotImplemented "Instruction BLR not yet implemented."
	239 Compare X20, 0
	240 JumpIfNotEqual {270}
	241 Move X0, X21
	242 Move X20, [X31+48]
	243 Move X19, [X31+56]
	244 Move X22, [X31+32]
	245 Move X21, [X31+40]
	246 Move X24, [X31+16]
	247 Move X23, [X31+24]
	248 Move X30, [X31+64]
	249 Move X25, [X31+72]
	250 Return X0
	251 Move X0, 0xED0000
	252 Move X0, [X0+1320]
	253 Call 0x1C17D08
	254 Call 0x1C17F10
	255 Move X19, X0
	256 Move X0, 0xED5000
	257 Move X0, [X0+3800]
	258 Call 0x1C17D08
	259 Move X1, X0
	260 Move X0, X19
	261 Move X2, X31
	262 Call ArgumentNullException..ctor, X0, X1
	263 Move X0, 0xEFA000
	264 Move X0, [X0+208]
	265 Call 0x1C17D08
	266 Move X1, X0
	267 Move X0, X19
	268 Call 0x1C17DEC
	269 Call 0x1C17F20
	270 Move X0, X20
	271 Call 0x1C17F18
	272 Call 0x1C17F20
	273 Move X21, X0
	274 NotImplemented "Instruction CMP not yet implemented."
	275 Move X0, X21
	276 Call 0x3EB2AD0
	277 Move X20, [X0]
	278 Call 0x3EB2AE0
	279 Move X21, X31
	280 Compare X19, 0
	281 JumpIfNotEqual {218}
	282 Move X20, X31
	283 Move X21, X0
	284 Compare X19, 0
	285 JumpIfEqual {307}
	286 Move X8, [X19]
	287 Move X1, [X23]
	288 NotImplemented "Instruction LDRH not yet implemented."
	289 Compare X9, 0
	290 JumpIfEqual {297}
	291 Move X10, [X8+176]
	292 Add X10, X10, 8
	293 NotImplemented "Instruction LDUR not yet implemented."
	294 NotImplemented "Instruction CMP not yet implemented."
	295 Subtract X9, X9, 1
	296 Add X10, X10, 16
	297 Move X0, X19
	298 Move W2, W31
	299 Call 0x1C5D788
	300 NotImplemented "Instruction LDRSW not yet implemented."
	301 Add X8, X8, X9
	302 Add X0, X8, 312
	303 Move X8, [X0]
	304 Move X1, [X0+8]
	305 Move X0, X19
	306 NotImplemented "Instruction BLR not yet implemented."
	307 Compare X20, 0
	308 JumpIfNotEqual {311}
	309 Move X0, X21
	310 Call 0x1D2D690
	311 Move X0, X20
	312 Call 0x1C17F18
	313 Call 0x1991590

Method: System.String Join(System.String separator, System.String[] value, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x03229058 B 0x32290D4
	0x0322905C ADRP X8, 0xECC000
	0x03229060 LDR X8, [X8 + 0xC48]
	0x03229064 LDR X0, [X8]
	0x03229068 LDR W8, [X0 + 0xE0]
	0x0322906C CBNZ W8, 0x3229074
	0x03229070 BL 0x1C16DFC
	0x03229074 MOV X0, X31
	0x03229078 BL 0x3338524
	0x0322907C MOVZ W4, 0x1
	0x03229080 B 0x32290C4
	0x03229084 MOV X0, X21
	0x03229088 MOV X1, X20
	0x0322908C MOV X2, X19
	0x03229090 LDP X20, X19, [X31 + 0x20]
	0x03229094 LDP X22, X21, [X31 + 0x10]
	0x03229098 LDP X30, X23, [X31], #0x30
	0x0322909C B 0x32293BC
	0x032290A0 ADRP X8, 0xECC000
	0x032290A4 LDR X8, [X8 + 0xC48]
	0x032290A8 LDR X0, [X8]
	0x032290AC LDR W8, [X0 + 0xE0]
	0x032290B0 CBNZ W8, 0x32290B8
	0x032290B4 BL 0x1C16DFC
	0x032290B8 MOV X0, X31
	0x032290BC BL 0x3338524
	0x032290C0 MOVZ W4, 0x10000000
	0x032290C4 MOV X3, X0
	0x032290C8 MOV X0, X21
	0x032290CC MOV X1, X20
	0x032290D0 MOV X2, X19
	0x032290D4 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x11B4000
	008 Move W8, [X23+874]
	009 Move W19, W3
	010 Move W20, W2
	011 Move X21, X1
	012 Move X22, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xECD000
	018 Move X0, [X0+632]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+874], W8
	022 Compare X22, 0
	023 JumpIfNotEqual {31}
	024 Move X8, 0xECD000
	025 Move X8, [X8+632]
	026 Move X8, [X8]
	027 Move X8, [X8+184]
	028 Move X22, [X8]
	029 Compare X22, 0
	030 JumpIfEqual {44}
	031 Move W1, [X22+16]
	032 Add X0, X22, 20
	033 Move X2, X21
	034 Move W3, W20
	035 Move W4, W19
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X30, [X31+48]
	041 Move X23, [X31+56]
	042 Call String.JoinCore, X0, X1, X2, X3, X4
	043 Return X0
	044 Call 0x1C17F20

Method: System.String JoinCore(System.Char* separator, System.Int32 separatorLength, System.Collections.Generic.IEnumerable`1<T> values)

Disassembly:
	0x0226C9EC STP X22, X21, [X31 + 0x30]
	0x0226C9F0 STP X20, X19, [X31 + 0x40]
	0x0226C9F4 LDR X8, [X3 + 0x38]
	0x0226C9F8 MOV X20, X3
	0x0226C9FC MOV X19, X2
	0x0226CA00 MOV W21, W1
	0x0226CA04 MOV X22, X0
	0x0226CA08 CBNZ X8, 0x226CA4C
	0x0226CA0C ADRP X0, 0x1E88000
	0x0226CA10 LDR X0, [X0 + 0x9F0]
	0x0226CA14 BL 0x1C16CF4
	0x0226CA18 ADRP X0, 0x1E87000
	0x0226CA1C LDR X0, [X0 + 0xE00]
	0x0226CA20 BL 0x1C16CF4
	0x0226CA24 ADRP X0, 0x1E87000
	0x0226CA28 LDR X0, [X0 + 0xE18]
	0x0226CA2C BL 0x1C16CF4
	0x0226CA30 ADRP X0, 0x1E89000
	0x0226CA34 LDR X0, [X0 + 0x278]
	0x0226CA38 BL 0x1C16CF4
	0x0226CA3C LDR X8, [X20 + 0x38]
	0x0226CA40 CBNZ X8, 0x226CA4C
	0x0226CA44 MOV X0, X20
	0x0226CA48 BL 0x1C5C6E0
	0x0226CA4C STR X31, [X31 + 0x8]
	0x0226CA50 CBZ X19, 0x226CE1C
	0x0226CA54 LDR X8, [X20 + 0x38]
	0x0226CA58 LDR X1, [X8]
	0x0226CA5C LDRB W8, [X1 + 0x135]
	0x0226CA60 TBNZ X8, 0x0, 0x226CA70
	0x0226CA64 MOV X0, X1
	0x0226CA68 BL 0x1C5C684
	0x0226CA6C MOV X1, X0
	0x0226CA70 LDR X8, [X19]
	0x0226CA74 LDRH W9, [X8 + 0x12E]
	0x0226CA78 CBZ X9, 0x226CA9C
	0x0226CA7C LDR X10, [X8 + 0xB0]
	0x0226CA80 ADD X10, X10, 0x8
	0x0226CA84 LDUR X11, [X10 - 0x8]
	0x0226CA88 CMP X11, X1
	0x0226CA8C B.EQ 0x226CAAC
	0x0226CA90 SUBS X9, X9, 0x1
	0x0226CA94 ADD X10, X10, 0x10
	0x0226CA98 B.NE 0x226CA84
	0x0226CA9C MOV X0, X19
	0x0226CAA0 MOV W2, W31
	0x0226CAA4 BL 0x1C5C788
	0x0226CAA8 B 0x226CAB8
	0x0226CAAC LDRSW X9, [X10]
	0x0226CAB0 ADD X8, X8, X9, 0x4, LSL
	0x0226CAB4 ADD X0, X8, 0x138
	0x0226CAB8 LDP X8, X1, [X0]
	0x0226CABC MOV X0, X19
	0x0226CAC0 BLR X8
	0x0226CAC4 MOV X19, X0
	0x0226CAC8 CBZ X0, 0x226CE58
	0x0226CACC ADRP X25, 0x1E87000
	0x0226CAD0 LDR X8, [X19]
	0x0226CAD4 LDR X25, [X25 + 0xE18]
	0x0226CAD8 LDRH W9, [X8 + 0x12E]
	0x0226CADC LDR X1, [X25]
	0x0226CAE0 CBZ X9, 0x226CB04
	0x0226CAE4 LDR X10, [X8 + 0xB0]
	0x0226CAE8 ADD X10, X10, 0x8
	0x0226CAEC LDUR X11, [X10 - 0x8]
	0x0226CAF0 CMP X11, X1
	0x0226CAF4 B.EQ 0x226CB14
	0x0226CAF8 SUBS X9, X9, 0x1
	0x0226CAFC ADD X10, X10, 0x10
	0x0226CB00 B.NE 0x226CAEC
	0x0226CB04 MOV X0, X19
	0x0226CB08 MOV W2, W31
	0x0226CB0C BL 0x1C5C788
	0x0226CB10 B 0x226CB20
	0x0226CB14 LDRSW X9, [X10]
	0x0226CB18 ADD X8, X8, X9, 0x4, LSL
	0x0226CB1C ADD X0, X8, 0x138
	0x0226CB20 LDP X8, X1, [X0]
	0x0226CB24 MOV X0, X19
	0x0226CB28 BLR X8
	0x0226CB2C TBZ X0, 0x0, 0x226CD80
	0x0226CB30 LDR X8, [X20 + 0x38]
	0x0226CB34 LDR X1, [X8 + 0x10]
	0x0226CB38 LDRB W8, [X1 + 0x135]
	0x0226CB3C TBNZ X8, 0x0, 0x226CB4C
	0x0226CB40 MOV X0, X1
	0x0226CB44 BL 0x1C5C684
	0x0226CB48 MOV X1, X0
	0x0226CB4C LDR X8, [X19]
	0x0226CB50 LDRH W9, [X8 + 0x12E]
	0x0226CB54 CBZ X9, 0x226CB78
	0x0226CB58 LDR X10, [X8 + 0xB0]
	0x0226CB5C ADD X10, X10, 0x8
	0x0226CB60 LDUR X11, [X10 - 0x8]
	0x0226CB64 CMP X11, X1
	0x0226CB68 B.EQ 0x226CB88
	0x0226CB6C SUBS X9, X9, 0x1
	0x0226CB70 ADD X10, X10, 0x10
	0x0226CB74 B.NE 0x226CB60
	0x0226CB78 MOV X0, X19
	0x0226CB7C MOV W2, W31
	0x0226CB80 BL 0x1C5C788
	0x0226CB84 B 0x226CB94
	0x0226CB88 LDRSW X9, [X10]
	0x0226CB8C ADD X8, X8, X9, 0x4, LSL
	0x0226CB90 ADD X0, X8, 0x138
	0x0226CB94 LDP X8, X1, [X0]
	0x0226CB98 MOV X0, X19
	0x0226CB9C BLR X8
	0x0226CBA0 ADRP X26, 0x1E88000
	0x0226CBA4 LDR X26, [X26 + 0x9F0]
	0x0226CBA8 MOV X8, X0
	0x0226CBAC STR X8, [X31 + 0x8]
	0x0226CBB0 LDR X0, [X26]
	0x0226CBB4 LDR W8, [X0 + 0xE0]
	0x0226CBB8 CBNZ W8, 0x226CBC0
	0x0226CBBC BL 0x1C16DFC
	0x0226CBC0 LDR X8, [X20 + 0x38]
	0x0226CBC4 LDR X1, [X8 + 0x28]
	0x0226CBC8 ADD X0, X31, 0x8
	0x0226CBCC BL 0x33621D0
	0x0226CBD0 LDR X8, [X19]
	0x0226CBD4 LDR X1, [X25]
	0x0226CBD8 MOV X24, X0
	0x0226CBDC LDRH W9, [X8 + 0x12E]
	0x0226CBE0 CBZ X9, 0x226CC04
	0x0226CBE4 LDR X10, [X8 + 0xB0]
	0x0226CBE8 ADD X10, X10, 0x8
	0x0226CBEC LDUR X11, [X10 - 0x8]
	0x0226CBF0 CMP X11, X1
	0x0226CBF4 B.EQ 0x226CC14
	0x0226CBF8 SUBS X9, X9, 0x1
	0x0226CBFC ADD X10, X10, 0x10
	0x0226CC00 B.NE 0x226CBEC
	0x0226CC04 MOV X0, X19
	0x0226CC08 MOV W2, W31
	0x0226CC0C BL 0x1C5C788
	0x0226CC10 B 0x226CC20
	0x0226CC14 LDRSW X9, [X10]
	0x0226CC18 ADD X8, X8, X9, 0x4, LSL
	0x0226CC1C ADD X0, X8, 0x138
	0x0226CC20 LDP X8, X1, [X0]
	0x0226CC24 MOV X0, X19
	0x0226CC28 BLR X8
	0x0226CC2C TBZ X0, 0x0, 0x226CD7C
	0x0226CC30 MOVZ W0, 0x10
	0x0226CC34 MOV X1, X31
	0x0226CC38 BL 0x3235A9C
	0x0226CC3C MOV X23, X0
	0x0226CC40 CBZ X0, 0x226CE64
	0x0226CC44 MOV X0, X23
	0x0226CC48 MOV X1, X24
	0x0226CC4C MOV X2, X31
	0x0226CC50 BL 0x32333E0
	0x0226CC54 LDR X8, [X20 + 0x38]
	0x0226CC58 LDR X1, [X8 + 0x10]
	0x0226CC5C LDRB W8, [X1 + 0x135]
	0x0226CC60 TBNZ X8, 0x0, 0x226CC70
	0x0226CC64 MOV X0, X1
	0x0226CC68 BL 0x1C5C684
	0x0226CC6C MOV X1, X0
	0x0226CC70 LDR X8, [X19]
	0x0226CC74 LDRH W9, [X8 + 0x12E]
	0x0226CC78 CBZ X9, 0x226CC9C
	0x0226CC7C LDR X10, [X8 + 0xB0]
	0x0226CC80 ADD X10, X10, 0x8
	0x0226CC84 LDUR X11, [X10 - 0x8]
	0x0226CC88 CMP X11, X1
	0x0226CC8C B.EQ 0x226CCAC
	0x0226CC90 SUBS X9, X9, 0x1
	0x0226CC94 ADD X10, X10, 0x10
	0x0226CC98 B.NE 0x226CC84
	0x0226CC9C MOV X0, X19
	0x0226CCA0 MOV W2, W31
	0x0226CCA4 BL 0x1C5C788
	0x0226CCA8 B 0x226CCB8
	0x0226CCAC LDRSW X9, [X10]
	0x0226CCB0 ADD X8, X8, X9, 0x4, LSL
	0x0226CCB4 ADD X0, X8, 0x138
	0x0226CCB8 LDP X8, X1, [X0]
	0x0226CCBC MOV X0, X19
	0x0226CCC0 BLR X8
	0x0226CCC4 STR X0, [X31 + 0x8]
	0x0226CCC8 MOV X0, X23
	0x0226CCCC MOV X1, X22
	0x0226CCD0 MOV W2, W21
	0x0226CCD4 MOV X3, X31
	0x0226CCD8 BL 0x3233290
	0x0226CCDC LDR X0, [X26]
	0x0226CCE0 LDR W8, [X0 + 0xE0]
	0x0226CCE4 CBNZ W8, 0x226CCEC
	0x0226CCE8 BL 0x1C16DFC
	0x0226CCEC LDR X8, [X20 + 0x38]
	0x0226CCF0 LDR X1, [X8 + 0x28]
	0x0226CCF4 ADD X0, X31, 0x8
	0x0226CCF8 BL 0x33621D0
	0x0226CCFC MOV X1, X0
	0x0226CD00 MOV X0, X23
	0x0226CD04 MOV X2, X31
	0x0226CD08 BL 0x32333E0
	0x0226CD0C LDR X8, [X19]
	0x0226CD10 LDR X1, [X25]
	0x0226CD14 LDRH W9, [X8 + 0x12E]
	0x0226CD18 CBZ X9, 0x226CD3C
	0x0226CD1C LDR X10, [X8 + 0xB0]
	0x0226CD20 ADD X10, X10, 0x8
	0x0226CD24 LDUR X11, [X10 - 0x8]
	0x0226CD28 CMP X11, X1
	0x0226CD2C B.EQ 0x226CD4C
	0x0226CD30 SUBS X9, X9, 0x1
	0x0226CD34 ADD X10, X10, 0x10
	0x0226CD38 B.NE 0x226CD24
	0x0226CD3C MOV X0, X19
	0x0226CD40 MOV W2, W31
	0x0226CD44 BL 0x1C5C788
	0x0226CD48 B 0x226CD58
	0x0226CD4C LDRSW X9, [X10]
	0x0226CD50 ADD X8, X8, X9, 0x4, LSL
	0x0226CD54 ADD X0, X8, 0x138
	0x0226CD58 LDP X8, X1, [X0]
	0x0226CD5C MOV X0, X19
	0x0226CD60 BLR X8
	0x0226CD64 TBNZ X0, 0x0, 0x226CC54
	0x0226CD68 MOV X0, X23
	0x0226CD6C MOV X1, X31
	0x0226CD70 BL 0x3235BE8
	0x0226CD74 MOV X24, X0
	0x0226CD78 B 0x226CD94
	0x0226CD7C CBNZ X24, 0x226CD94
	0x0226CD80 ADRP X8, 0x1E89000
	0x0226CD84 LDR X8, [X8 + 0x278]
	0x0226CD88 LDR X8, [X8]
	0x0226CD8C LDR X8, [X8 + 0xB8]
	0x0226CD90 LDR X24, [X8]
	0x0226CD94 MOV X21, X31
	0x0226CD98 CBZ X19, 0x226CDFC
	0x0226CD9C ADRP X10, 0x1E87000
	0x0226CDA0 LDR X8, [X19]
	0x0226CDA4 LDR X10, [X10 + 0xE00]
	0x0226CDA8 LDRH W9, [X8 + 0x12E]
	0x0226CDAC LDR X1, [X10]
	0x0226CDB0 CBZ X9, 0x226CDD4
	0x0226CDB4 LDR X10, [X8 + 0xB0]
	0x0226CDB8 ADD X10, X10, 0x8
	0x0226CDBC LDUR X11, [X10 - 0x8]
	0x0226CDC0 CMP X11, X1
	0x0226CDC4 B.EQ 0x226CDE4
	0x0226CDC8 SUBS X9, X9, 0x1
	0x0226CDCC ADD X10, X10, 0x10
	0x0226CDD0 B.NE 0x226CDBC
	0x0226CDD4 MOV X0, X19
	0x0226CDD8 MOV W2, W31
	0x0226CDDC BL 0x1C5C788
	0x0226CDE0 B 0x226CDF0
	0x0226CDE4 LDRSW X9, [X10]
	0x0226CDE8 ADD X8, X8, X9, 0x4, LSL
	0x0226CDEC ADD X0, X8, 0x138
	0x0226CDF0 LDP X8, X1, [X0]
	0x0226CDF4 MOV X0, X19
	0x0226CDF8 BLR X8
	0x0226CDFC CBNZ X21, 0x226CE5C
	0x0226CE00 MOV X0, X24
	0x0226CE04 LDP X20, X19, [X31 + 0x40]
	0x0226CE08 LDP X22, X21, [X31 + 0x30]
	0x0226CE0C LDP X24, X23, [X31 + 0x20]
	0x0226CE10 LDP X26, X25, [X31 + 0x10]
	0x0226CE14 LDR X30, [X31], #0x50
	0x0226CE18 RET
	0x0226CE1C ADRP X0, 0x1E8C000
	0x0226CE20 LDR X0, [X0 + 0x528]
	0x0226CE24 BL 0x1C16D08
	0x0226CE28 BL 0x1C16F10
	0x0226CE2C MOV X19, X0
	0x0226CE30 ADRP X0, 0x1E91000
	0x0226CE34 LDR X0, [X0 + 0xED8]
	0x0226CE38 BL 0x1C16D08
	0x0226CE3C MOV X1, X0
	0x0226CE40 MOV X0, X19
	0x0226CE44 MOV X2, X31
	0x0226CE48 BL 0x330E100
	0x0226CE4C MOV X0, X19
	0x0226CE50 MOV X1, X20
	0x0226CE54 BL 0x1C16DEC
	0x0226CE58 BL 0x1C16F20
	0x0226CE5C MOV X0, X21
	0x0226CE60 BL 0x1C16F18
	0x0226CE64 BL 0x1C16F20
	0x0226CE68 B 0x226CEA4
	0x0226CE6C B 0x226CEA4
	0x0226CE70 B 0x226CEA4
	0x0226CE74 B 0x226CEA4
	0x0226CE78 B 0x226CEA4
	0x0226CE7C B 0x226CEA4
	0x0226CE80 B 0x226CEA4
	0x0226CE84 B 0x226CEA4
	0x0226CE88 B 0x226CEA4
	0x0226CE8C B 0x226CEA4
	0x0226CE90 B 0x226CEA4
	0x0226CE94 B 0x226CEA4
	0x0226CE98 B 0x226CEA4
	0x0226CE9C B 0x226CEA4
	0x0226CEA0 B 0x226CEA4
	0x0226CEA4 MOV X20, X0
	0x0226CEA8 CMP W1, 0x1
	0x0226CEAC B.NE 0x226CECC
	0x0226CEB0 MOV X0, X20
	0x0226CEB4 BL 0x3EB1AD0
	0x0226CEB8 LDR X21, [X0]
	0x0226CEBC BL 0x3EB1AE0
	0x0226CEC0 MOV X24, X31
	0x0226CEC4 CBNZ X19, 0x226CD9C
	0x0226CEC8 B 0x226CDFC
	0x0226CECC MOV X21, X31
	0x0226CED0 B 0x226CED8
	0x0226CED4 MOV X20, X0
	0x0226CED8 CBZ X19, 0x226CF3C
	0x0226CEDC ADRP X10, 0x1E87000
	0x0226CEE0 LDR X8, [X19]
	0x0226CEE4 LDR X10, [X10 + 0xE00]
	0x0226CEE8 LDRH W9, [X8 + 0x12E]
	0x0226CEEC LDR X1, [X10]
	0x0226CEF0 CBZ X9, 0x226CF14
	0x0226CEF4 LDR X10, [X8 + 0xB0]
	0x0226CEF8 ADD X10, X10, 0x8
	0x0226CEFC LDUR X11, [X10 - 0x8]
	0x0226CF00 CMP X11, X1
	0x0226CF04 B.EQ 0x226CF24
	0x0226CF08 SUBS X9, X9, 0x1
	0x0226CF0C ADD X10, X10, 0x10
	0x0226CF10 B.NE 0x226CEFC
	0x0226CF14 MOV X0, X19
	0x0226CF18 MOV W2, W31
	0x0226CF1C BL 0x1C5C788
	0x0226CF20 B 0x226CF30
	0x0226CF24 LDRSW X9, [X10]
	0x0226CF28 ADD X8, X8, X9, 0x4, LSL
	0x0226CF2C ADD X0, X8, 0x138
	0x0226CF30 LDP X8, X1, [X0]
	0x0226CF34 MOV X0, X19
	0x0226CF38 BLR X8
	0x0226CF3C CBNZ X21, 0x226CF48
	0x0226CF40 MOV X0, X20
	0x0226CF44 BL 0x1D2C690
	0x0226CF48 MOV X0, X21
	0x0226CF4C BL 0x1C16F18
	0x0226CF50 BL 0x1990590
	0x0226CF54 SUB X31, X31, 0x50
	0x0226CF58 STP X30, X25, [X31 + 0x10]
	0x0226CF5C STP X24, X23, [X31 + 0x20]
	0x0226CF60 STP X22, X21, [X31 + 0x30]
	0x0226CF64 STP X20, X19, [X31 + 0x40]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X8, [X3+56]
	011 Move X20, X3
	012 Move X19, X2
	013 Move W21, W1
	014 Move X22, X0
	015 Compare X8, 0
	016 JumpIfNotEqual {34}
	017 Move X0, 0x1E88000
	018 Move X0, [X0+2904]
	019 Call 0x1C17CF4
	020 Move X0, 0x1E88000
	021 Move X0, [X0+3584]
	022 Call 0x1C17CF4
	023 Move X0, 0x1E88000
	024 Move X0, [X0+3608]
	025 Call 0x1C17CF4
	026 Move X0, 0x1E8A000
	027 Move X0, [X0+632]
	028 Call 0x1C17CF4
	029 Move X8, [X20+56]
	030 Compare X8, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X20
	033 Call 0x1C5D6E0
	034 Move [X31+12], W31
	035 Compare X19, 0
	036 JumpIfEqual {302}
	037 Move X8, [X20+56]
	038 Move X1, [X8]
	039 Move W8, [X1+309]
	040 Move TEMP, X8
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfEqual {47}
	044 Move X0, X1
	045 Call 0x1C5D684
	046 Move X1, X0
	047 Move X8, [X19]
	048 NotImplemented "Instruction LDRH not yet implemented."
	049 Compare X9, 0
	050 JumpIfEqual {57}
	051 Move X10, [X8+176]
	052 Add X10, X10, 8
	053 NotImplemented "Instruction LDUR not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Subtract X9, X9, 1
	056 Add X10, X10, 16
	057 Move X0, X19
	058 Move W2, W31
	059 Call 0x1C5D788
	060 NotImplemented "Instruction LDRSW not yet implemented."
	061 Add X8, X8, X9
	062 Add X0, X8, 312
	063 Move X8, [X0]
	064 Move X1, [X0+8]
	065 Move X0, X19
	066 NotImplemented "Instruction BLR not yet implemented."
	067 Move X19, X0
	068 Compare X0, 0
	069 JumpIfEqual {317}
	070 Move X25, 0x1E88000
	071 Move X8, [X19]
	072 Move X25, [X25+3608]
	073 NotImplemented "Instruction LDRH not yet implemented."
	074 Move X1, [X25]
	075 Compare X9, 0
	076 JumpIfEqual {83}
	077 Move X10, [X8+176]
	078 Add X10, X10, 8
	079 NotImplemented "Instruction LDUR not yet implemented."
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Subtract X9, X9, 1
	082 Add X10, X10, 16
	083 Move X0, X19
	084 Move W2, W31
	085 Call 0x1C5D788
	086 NotImplemented "Instruction LDRSW not yet implemented."
	087 Add X8, X8, X9
	088 Add X0, X8, 312
	089 Move X8, [X0]
	090 Move X1, [X0+8]
	091 Move X0, X19
	092 NotImplemented "Instruction BLR not yet implemented."
	093 Move TEMP, X0
	094 And TEMP, TEMP, 1
	095 Compare TEMP, 1
	096 JumpIfNotEqual {258}
	097 Move X8, [X20+56]
	098 Move X1, [X8+16]
	099 Move W8, [X1+309]
	100 Move TEMP, X8
	101 And TEMP, TEMP, 1
	102 Compare TEMP, 1
	103 JumpIfEqual {107}
	104 Move X0, X1
	105 Call 0x1C5D684
	106 Move X1, X0
	107 Move X8, [X19]
	108 NotImplemented "Instruction LDRH not yet implemented."
	109 Compare X9, 0
	110 JumpIfEqual {117}
	111 Move X10, [X8+176]
	112 Add X10, X10, 8
	113 NotImplemented "Instruction LDUR not yet implemented."
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Subtract X9, X9, 1
	116 Add X10, X10, 16
	117 Move X0, X19
	118 Move W2, W31
	119 Call 0x1C5D788
	120 NotImplemented "Instruction LDRSW not yet implemented."
	121 Add X8, X8, X9
	122 Add X0, X8, 312
	123 Move X8, [X0]
	124 Move X1, [X0+8]
	125 Move X0, X19
	126 NotImplemented "Instruction BLR not yet implemented."
	127 Move X26, 0x1E88000
	128 Move X26, [X26+2904]
	129 Move W8, W0
	130 And W8, W8, 1
	131 Move [X31+12], W8
	132 Move X0, [X26]
	133 Move W8, [X0+224]
	134 Compare W8, 0
	135 JumpIfNotEqual {137}
	136 Call 0x1C17DFC
	137 Move X8, [X20+56]
	138 Move X1, [X8+40]
	139 Add X0, X31, 12
	140 Call Boolean.ToString, X0
	141 Move X8, [X19]
	142 Move X1, [X25]
	143 Move X24, X0
	144 NotImplemented "Instruction LDRH not yet implemented."
	145 Compare X9, 0
	146 JumpIfEqual {153}
	147 Move X10, [X8+176]
	148 Add X10, X10, 8
	149 NotImplemented "Instruction LDUR not yet implemented."
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Subtract X9, X9, 1
	152 Add X10, X10, 16
	153 Move X0, X19
	154 Move W2, W31
	155 Call 0x1C5D788
	156 NotImplemented "Instruction LDRSW not yet implemented."
	157 Add X8, X8, X9
	158 Add X0, X8, 312
	159 Move X8, [X0]
	160 Move X1, [X0+8]
	161 Move X0, X19
	162 NotImplemented "Instruction BLR not yet implemented."
	163 Move TEMP, X0
	164 And TEMP, TEMP, 1
	165 Compare TEMP, 1
	166 JumpIfNotEqual {256}
	167 Move W0, 16
	168 Move X1, X31
	169 Call StringBuilderCache.Acquire, X0
	170 Move X23, X0
	171 Compare X0, 0
	172 JumpIfEqual {320}
	173 Move X0, X23
	174 Move X1, X24
	175 Move X2, X31
	176 Call StringBuilder.Append, X0, X1
	177 Move X8, [X20+56]
	178 Move X1, [X8+16]
	179 Move W8, [X1+309]
	180 Move TEMP, X8
	181 And TEMP, TEMP, 1
	182 Compare TEMP, 1
	183 JumpIfEqual {187}
	184 Move X0, X1
	185 Call 0x1C5D684
	186 Move X1, X0
	187 Move X8, [X19]
	188 NotImplemented "Instruction LDRH not yet implemented."
	189 Compare X9, 0
	190 JumpIfEqual {197}
	191 Move X10, [X8+176]
	192 Add X10, X10, 8
	193 NotImplemented "Instruction LDUR not yet implemented."
	194 NotImplemented "Instruction CMP not yet implemented."
	195 Subtract X9, X9, 1
	196 Add X10, X10, 16
	197 Move X0, X19
	198 Move W2, W31
	199 Call 0x1C5D788
	200 NotImplemented "Instruction LDRSW not yet implemented."
	201 Add X8, X8, X9
	202 Add X0, X8, 312
	203 Move X8, [X0]
	204 Move X1, [X0+8]
	205 Move X0, X19
	206 NotImplemented "Instruction BLR not yet implemented."
	207 And W8, W0, 1
	208 Move [X31+12], W8
	209 Move X0, X23
	210 Move X1, X22
	211 Move W2, W21
	212 Move X3, X31
	213 Call StringBuilder.Append, X0, X1, X2
	214 Move X0, [X26]
	215 Move W8, [X0+224]
	216 Compare W8, 0
	217 JumpIfNotEqual {219}
	218 Call 0x1C17DFC
	219 Move X8, [X20+56]
	220 Move X1, [X8+40]
	221 Add X0, X31, 12
	222 Call Boolean.ToString, X0
	223 Move X1, X0
	224 Move X0, X23
	225 Move X2, X31
	226 Call StringBuilder.Append, X0, X1
	227 Move X8, [X19]
	228 Move X1, [X25]
	229 NotImplemented "Instruction LDRH not yet implemented."
	230 Compare X9, 0
	231 JumpIfEqual {238}
	232 Move X10, [X8+176]
	233 Add X10, X10, 8
	234 NotImplemented "Instruction LDUR not yet implemented."
	235 NotImplemented "Instruction CMP not yet implemented."
	236 Subtract X9, X9, 1
	237 Add X10, X10, 16
	238 Move X0, X19
	239 Move W2, W31
	240 Call 0x1C5D788
	241 NotImplemented "Instruction LDRSW not yet implemented."
	242 Add X8, X8, X9
	243 Add X0, X8, 312
	244 Move X8, [X0]
	245 Move X1, [X0+8]
	246 Move X0, X19
	247 NotImplemented "Instruction BLR not yet implemented."
	248 Move TEMP, X0
	249 And TEMP, TEMP, 1
	250 Compare TEMP, 1
	251 JumpIfEqual {177}
	252 Move X0, X23
	253 Move X1, X31
	254 Call StringBuilderCache.GetStringAndRelease, X0
	255 Move X24, X0
	256 Compare X24, 0
	257 JumpIfNotEqual {263}
	258 Move X8, 0x1E8A000
	259 Move X8, [X8+632]
	260 Move X8, [X8]
	261 Move X8, [X8+184]
	262 Move X24, [X8]
	263 Move X21, X31
	264 Compare X19, 0
	265 JumpIfEqual {289}
	266 Move X10, 0x1E88000
	267 Move X8, [X19]
	268 Move X10, [X10+3584]
	269 NotImplemented "Instruction LDRH not yet implemented."
	270 Move X1, [X10]
	271 Compare X9, 0
	272 JumpIfEqual {279}
	273 Move X10, [X8+176]
	274 Add X10, X10, 8
	275 NotImplemented "Instruction LDUR not yet implemented."
	276 NotImplemented "Instruction CMP not yet implemented."
	277 Subtract X9, X9, 1
	278 Add X10, X10, 16
	279 Move X0, X19
	280 Move W2, W31
	281 Call 0x1C5D788
	282 NotImplemented "Instruction LDRSW not yet implemented."
	283 Add X8, X8, X9
	284 Add X0, X8, 312
	285 Move X8, [X0]
	286 Move X1, [X0+8]
	287 Move X0, X19
	288 NotImplemented "Instruction BLR not yet implemented."
	289 Compare X21, 0
	290 JumpIfNotEqual {318}
	291 Move X0, X24
	292 Move X20, [X31+64]
	293 Move X19, [X31+72]
	294 Move X22, [X31+48]
	295 Move X21, [X31+56]
	296 Move X24, [X31+32]
	297 Move X23, [X31+40]
	298 Move X26, [X31+16]
	299 Move X25, [X31+24]
	300 Move X30, [X31+80]
	301 Return X0
	302 Move X0, 0x1E8D000
	303 Move X0, [X0+1320]
	304 Call 0x1C17D08
	305 Call 0x1C17F10
	306 Move X19, X0
	307 Move X0, 0x1E92000
	308 Move X0, [X0+3800]
	309 Call 0x1C17D08
	310 Move X1, X0
	311 Move X0, X19
	312 Move X2, X31
	313 Call ArgumentNullException..ctor, X0, X1
	314 Move X0, X19
	315 Move X1, X20
	316 Call 0x1C17DEC
	317 Call 0x1C17F20
	318 Move X0, X21
	319 Call 0x1C17F18
	320 Call 0x1C17F20
	321 Move X20, X0
	322 NotImplemented "Instruction CMP not yet implemented."
	323 Move X0, X20
	324 Call 0x3EB2AD0
	325 Move X21, [X0]
	326 Call 0x3EB2AE0
	327 Move X24, X31
	328 Compare X19, 0
	329 JumpIfNotEqual {266}
	330 Move X21, X31
	331 Move X20, X0
	332 Compare X19, 0
	333 JumpIfEqual {357}
	334 Move X10, 0x1E88000
	335 Move X8, [X19]
	336 Move X10, [X10+3584]
	337 NotImplemented "Instruction LDRH not yet implemented."
	338 Move X1, [X10]
	339 Compare X9, 0
	340 JumpIfEqual {347}
	341 Move X10, [X8+176]
	342 Add X10, X10, 8
	343 NotImplemented "Instruction LDUR not yet implemented."
	344 NotImplemented "Instruction CMP not yet implemented."
	345 Subtract X9, X9, 1
	346 Add X10, X10, 16
	347 Move X0, X19
	348 Move W2, W31
	349 Call 0x1C5D788
	350 NotImplemented "Instruction LDRSW not yet implemented."
	351 Add X8, X8, X9
	352 Add X0, X8, 312
	353 Move X8, [X0]
	354 Move X1, [X0+8]
	355 Move X0, X19
	356 NotImplemented "Instruction BLR not yet implemented."
	357 Compare X21, 0
	358 JumpIfNotEqual {361}
	359 Move X0, X20
	360 Call 0x1D2D690
	361 Move X0, X21
	362 Call 0x1C17F18
	363 Call 0x1991590

Method: System.String JoinCore(System.Char* separator, System.Int32 separatorLength, System.String[] value, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x032295A4 B.GT 0x32295B0
	0x032295A8 LDR W8, [X21 + 0x10]
	0x032295AC B 0x32294E8
	0x032295B0 LDUR W8, [X29 - 0x18]
	0x032295B4 CBZ W8, 0x3229600
	0x032295B8 ADRP X8, 0xEF9000
	0x032295BC LDR X8, [X8 + 0x170]
	0x032295C0 ADRP X20, 0xEF9000
	0x032295C4 LDR W21, [X21 + 0x10]
	0x032295C8 SUB X0, X29, 0x30
	0x032295CC LDR X1, [X8]
	0x032295D0 LDR X20, [X20 + 0x178]
	0x032295D4 BL 0x278D764
	0x032295D8 LDUR X2, [X29 - 0x40]
	0x032295DC MOV X3, X0
	0x032295E0 MOV X4, X1
	0x032295E4 MOV X0, X19
	0x032295E8 MOV W1, W21
	0x032295EC BL 0x32297A8
	0x032295F0 LDR X1, [X20]
	0x032295F4 MOV X19, X0
	0x032295F8 SUB X0, X29, 0x30
	0x032295FC BL 0x322EB74
	0x03229600 LDUR X8, [X29 - 0x38]
	0x03229604 LDR X8, [X8 + 0x28]
	0x03229608 LDUR X9, [X29 - 0x8]
	0x0322960C CMP X8, X9
	0x03229610 B.NE 0x32296CC
	0x03229614 MOV X0, X19
	0x03229618 ADD X31, X29, 0x0
	0x0322961C LDP X20, X19, [X31 + 0x50]
	0x03229620 LDP X22, X21, [X31 + 0x40]
	0x03229624 LDP X24, X23, [X31 + 0x30]
	0x03229628 LDP X26, X25, [X31 + 0x20]
	0x0322962C LDP X28, X27, [X31 + 0x10]
	0x03229630 LDP X29, X30, [X31], #0x60
	0x03229634 RET
	0x03229638 BL 0x1C16F28
	0x0322963C ADRP X0, 0xECF000
	0x03229640 LDR X0, [X0 + 0x528]
	0x03229644 BL 0x1C16D08
	0x03229648 BL 0x1C16F10
	0x0322964C MOV X19, X0
	0x03229650 ADRP X0, 0xEF9000
	0x03229654 LDR X0, [X0 + 0x148]
	0x03229658 BL 0x1C16D08
	0x0322965C MOV X1, X0
	0x03229660 MOV X0, X19
	0x03229664 MOV X2, X31
	0x03229668 BL 0x330E100
	0x0322966C B 0x32296B4
	0x03229670 ADRP X0, 0xED2000
	0x03229674 LDR X0, [X0 + 0x578]
	0x03229678 BL 0x1C16D08
	0x0322967C BL 0x1C16F10
	0x03229680 MOV X19, X0
	0x03229684 ADRP X0, 0xEF9000
	0x03229688 LDR X0, [X0 + 0x150]
	0x0322968C BL 0x1C16D08
	0x03229690 MOV X20, X0
	0x03229694 ADRP X0, 0xEF9000
	0x03229698 LDR X0, [X0 + 0x148]
	0x0322969C BL 0x1C16D08
	0x032296A0 MOV X2, X0
	0x032296A4 MOV X0, X19
	0x032296A8 MOV X1, X20
	0x032296AC MOV X3, X31
	0x032296B0 BL 0x330E16C
	0x032296B4 ADRP X0, 0xEF9000
	0x032296B8 LDR X0, [X0 + 0x190]
	0x032296BC BL 0x1C16D08
	0x032296C0 MOV X1, X0
	0x032296C4 MOV X0, X19
	0x032296C8 BL 0x1C16DEC
	0x032296CC BL 0x3EB1B20
	0x032296D0 STP X30, X25, [X31 - 0x40]!
	0x032296D4 STP X24, X23, [X31 + 0x10]
	0x032296D8 STP X22, X21, [X31 + 0x20]
	0x032296DC STP X20, X19, [X31 + 0x30]
	0x032296E0 AND W8, W1, 0xFFFF
	0x032296E4 CMP W8, W2, UXTH
	0x032296E8 MOV X21, X0
	0x032296EC B.EQ 0x322978C
	0x032296F0 LDR W0, [X21 + 0x10]
	0x032296F4 MOV W19, W2
	0x032296F8 MOV W20, W1
	0x032296FC ADD X22, X21, 0x14
	0x03229700 CMP W0, 0x1
	0x03229704 MOV W24, W0
	0x03229708 B.LT 0x322972C
	0x0322970C MOV X8, X22
	0x03229710 LDRH W9, [X8]
	0x03229714 CMP W9, W20, UXTH
	0x03229718 B.EQ 0x3229730
	0x0322971C SUBS W24, W24, 0x1
	0x03229720 ADD X8, X8, 0x2
	0x03229724 B.GT 0x3229710
	0x03229728 B 0x322978C
	0x0322972C CBZ W0, 0x322978C
	0x03229730 BL 0x1C8825C
	0x03229734 CBZ X0, 0x32297A4
	0x03229738 LDR W8, [X21 + 0x10]
	0x0322973C MOV X23, X0
	0x03229740 ADD X21, X0, 0x14
	0x03229744 SUB W25, W8, W24
	0x03229748 CMP W25, 0x1
	0x0322974C B.LT 0x3229764
	0x03229750 UBFM W2, W25, 0x1F, 0x1E
	0x03229754 MOV X0, X21
	0x03229758 MOV X1, X22
	0x0322975C MOV X3, X31
	0x03229760 BL 0x33A8CD0
	0x03229764 ADD X8, X22, W25, 0x1, SXTW
	0x03229768 ADD X9, X21, W25, 0x1, SXTW
	0x0322976C LDRH W10, [X8], #0x2
	0x03229770 SUB W24, W24, 0x1
	0x03229774 CMP W10, W20, UXTH
	0x03229778 CSEL W10, W19, W10, EQ
	0x0322977C CMP W24, 0x0
	0x03229780 STRH W10, [X9], #0x2
	0x03229784 B.GT 0x322976C
	0x03229788 MOV X21, X23
	0x0322978C MOV X0, X21
	0x03229790 LDP X20, X19, [X31 + 0x30]
	0x03229794 LDP X22, X21, [X31 + 0x20]
	0x03229798 LDP X24, X23, [X31 + 0x10]
	0x0322979C LDP X30, X25, [X31], #0x40
	0x032297A0 RET
	0x032297A4 BL 0x1C16F20
	0x032297A8 SUB X31, X31, 0x90
	0x032297AC STP X29, X30, [X31 + 0x30]
	0x032297B0 STP X28, X27, [X31 + 0x40]
	0x032297B4 STP X26, X25, [X31 + 0x50]
	0x032297B8 STP X24, X23, [X31 + 0x60]
	0x032297BC STP X22, X21, [X31 + 0x70]
	0x032297C0 STP X20, X19, [X31 + 0x80]
	0x032297C4 ADRP X19, 0x11B3000
	0x032297C8 LDRB W8, [X19 + 0x370]
	0x032297CC MOV X25, X4
	0x032297D0 MOV X21, X3
	0x032297D4 MOV X22, X2
	0x032297D8 MOV X20, X0
	0x032297DC STR W1, [X31 + 0x1C]
	0x032297E0 TBNZ X8, 0x0, 0x322981C
	0x032297E4 ADRP X0, 0xEF9000
	0x032297E8 LDR X0, [X0 + 0x198]
	0x032297EC BL 0x1C16CF4
	0x032297F0 ADRP X0, 0xEF9000
	0x032297F4 LDR X0, [X0 + 0x1A0]
	0x032297F8 BL 0x1C16CF4
	0x032297FC ADRP X0, 0xEF9000
	0x03229800 LDR X0, [X0 + 0x1A8]
	0x03229804 BL 0x1C16CF4
	0x03229808 ADRP X0, 0xEF3000
	0x0322980C LDR X0, [X0 + 0x678]
	0x03229810 BL 0x1C16CF4
	0x03229814 MOVZ W8, 0x1
	0x03229818 STRB W8, [X19 + 0x370]
	0x0322981C STP X31, X31, [X31 + 0x20]
	0x03229820 CBZ X22, 0x3229AB0
	0x03229824 LDR W8, [X22 + 0x10]
	0x03229828 LDR W10, [X31 + 0x1C]
	0x0322982C LDRSW X9, [X20 + 0x10]
	0x03229830 SUB W8, W8, W10
	0x03229834 SMADDL X8, X25, X8, X31
	0x03229838 ADD X0, X8, X9
	0x0322983C MOVZ W8, 0x80000000
	0x03229840 CMP X0, X8
	0x03229844 B.GE 0x3229AB4
	0x03229848 BL 0x1C8825C
	0x0322984C CBZ X0, 0x3229AB0
	0x03229850 LDR W28, [X0 + 0x10]
	0x03229854 MOV X19, X0
	0x03229858 CMP W25, 0x1
	0x0322985C STR X20, [X31 + 0x10]
	0x03229860 B.LT 0x32299C8
	0x03229864 MOV W24, W31
	0x03229868 MOV W27, W31
	0x0322986C ADD X8, X20, 0x14
	0x03229870 ADD X26, X22, 0x14
	0x03229874 AND X20, X25, 0x0
	0x03229878 STR X8, [X31 + 0x8]
	0x0322987C LDR W29, [X21]
	0x03229880 SUBS W23, W29, W24
	0x03229884 B.EQ 0x3229930
	0x03229888 ADRP X8, 0x11B0000
	0x0322988C LDRB W8, [X8 + 0x761]
	0x03229890 CBNZ W8, 0x32298AC
	0x03229894 ADRP X0, 0xEF1000
	0x03229898 LDR X0, [X0 + 0x290]
	0x0322989C BL 0x1C16CF4
	0x032298A0 MOVZ W8, 0x1
	0x032298A4 ADRP X9, 0x11B0000
	0x032298A8 STRB W8, [X9 + 0x761]
	0x032298AC LDR X8, [X31 + 0x10]
	0x032298B0 LDR W8, [X8 + 0x10]
	0x032298B4 SUBS W8, W8, W24
	0x032298B8 B.CC 0x32298C4
	0x032298BC CMP W8, W23
	0x032298C0 B.CS 0x32298D0
	0x032298C4 MOVZ W0, 0x18
	0x032298C8 MOV X1, X31
	0x032298CC BL 0x339D764
	0x032298D0 ADRP X10, 0xEF9000
	0x032298D4 LDR X8, [X31 + 0x8]
	0x032298D8 LDR X10, [X10 + 0x1A8]
	0x032298DC MOV W9, W23
	0x032298E0 SUBS W25, W28, W27
	0x032298E4 ADD X8, X8, W24, 0x1, SXTW
	0x032298E8 LDR X24, [X10]
	0x032298EC STP X8, X9, [X31 + 0x20]
	0x032298F0 B.CS 0x32298FC
	0x032298F4 MOV X0, X31
	0x032298F8 BL 0x339D6EC
	0x032298FC LDR X0, [X24 + 0x20]
	0x03229900 LDRB W8, [X0 + 0x135]
	0x03229904 TBNZ X8, 0x0, 0x322990C
	0x03229908 BL 0x1C5C684
	0x0322990C ADRP X8, 0xEF9000
	0x03229910 LDR X8, [X8 + 0x198]
	0x03229914 ADD X0, X31, 0x20
	0x03229918 MOV X2, X25
	0x0322991C LDR X3, [X8]
	0x03229920 ADD X8, X19, W27, 0x1, SXTW
	0x03229924 ADD X1, X8, 0x14
	0x03229928 BL 0x25BEC30
	0x0322992C ADD W27, W23, W27
	0x03229930 ADRP X8, 0x11B3000
	0x03229934 LDRB W8, [X8 + 0x3AB]
	0x03229938 CBNZ W8, 0x3229954
	0x0322993C ADRP X0, 0xEF1000
	0x03229940 LDR X0, [X0 + 0x290]
	0x03229944 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+80], X29
	003 Move [X31+88], X30
	004 Move [X31+96], X28
	005 Move [X31+104], X27
	006 Move [X31+112], X26
	007 Move [X31+120], X25
	008 Move [X31+128], X24
	009 Move [X31+136], X23
	010 Move [X31+144], X22
	011 Move [X31+152], X21
	012 Move [X31+160], X20
	013 Move [X31+168], X19
	014 Move W19, W3
	015 Move W10, W1
	016 ShiftRight W10, 31
	017 And W10, W10, 0x3FFFFFFF
	018 Move [X31+68], W10
	019 Move X10, W19
	020 Move [X31+72], X0
	021 Move [X31+32], X10
	022 Move X23, 0xECD000
	023 Move X23, [X23+632]
	024 Subtract W8, W4, 1
	025 Add W9, W4, W3
	026 NotImplemented "Instruction SBFM not yet implemented."
	027 NotImplemented "Instruction SMADDL not yet implemented."
	028 Subtract W8, W9, 1
	029 Move X26, W9
	030 Move W21, W4
	031 Move X28, X2
	032 Move W22, W1
	033 Move X27, 0x11B4000
	034 Add X9, X10, 32
	035 Move X25, W8
	036 Subtract X8, X26, W3
	037 Move [X31+40], X8
	038 Move [X31+48], X9
	039 Move [X31+8], X2
	040 Move [X31+56], X29
	041 Move [X31+24], X19
	042 Move [X31+20], W4
	043 Move W8, [X27+875]
	044 Move TEMP, X8
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfEqual {55}
	048 Move X0, 0xECB000
	049 Move X0, [X0+2760]
	050 Call 0x1C17CF4
	051 Move X0, X23
	052 Call 0x1C17CF4
	053 Move W8, 1
	054 Move [X27+875], W8
	055 Compare X28, 0
	056 JumpIfEqual {185}
	057 Move TEMP, X19
	058 And TEMP, TEMP, -2147483648
	059 Compare TEMP, -2147483648
	060 JumpIfEqual {197}
	061 Move TEMP, X21
	062 And TEMP, TEMP, -2147483648
	063 Compare TEMP, -2147483648
	064 JumpIfEqual {208}
	065 Move X8, [X28+24]
	066 Subtract W9, W8, W21
	067 NotImplemented "Instruction CMP not yet implemented."
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move W9, 0x80000000
	070 NotImplemented "Instruction CMP not yet implemented."
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X10, [X31+40]
	073 Move X9, [X31+48]
	074 Move W11, W19
	075 Add X9, X28, X9
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move X12, [X9]
	078 Compare X12, 0
	079 JumpIfEqual {82}
	080 Move W12, [X12+16]
	081 Add W29, W12, W29
	082 Add X9, X9, 8
	083 Subtract X10, X10, 1
	084 Add W11, W11, 1
	085 Move W0, W29
	086 Call 0x1C8925C
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move X20, X0
	089 Move W24, W31
	090 Move X21, [X31+32]
	091 Add X23, X20, 20
	092 Add X27, X28, 32
	093 Move W8, [X28+24]
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move X2, [X27]
	096 Compare X2, 0
	097 JumpIfEqual {105}
	098 Move W19, [X2+16]
	099 Subtract W8, W29, W24
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X0, X20
	102 Move W1, W24
	103 Call String.FillStringChecked, X0, X1, X2
	104 Add W24, W19, W24
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Compare X20, 0
	107 JumpIfEqual {184}
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Move X8, [X31+72]
	110 NotImplemented "Instruction LDRH not yet implemented."
	111 NotImplemented "Instruction STRH not yet implemented."
	112 Move X1, [X31+72]
	113 Move W2, [X31+68]
	114 Add X0, X23, W24
	115 Move X3, X31
	116 Call Buffer.Memmove, X0, X1, X2
	117 Add W24, W24, W22
	118 Add X21, X21, 1
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Move W0, W29
	121 Call 0x1C8925C
	122 Move X20, X0
	123 Move W24, W31
	124 Move TEMP, 0
	125 Not TEMP
	126 Move W24, TEMP
	127 Move X23, 0xECD000
	128 Move X19, [X31+24]
	129 Move W21, [X31+20]
	130 Move X23, [X23+632]
	131 Move X27, 0x11B4000
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Move X0, X28
	134 Move X1, X31
	135 Call Array.Clone, X0
	136 Compare X0, 0
	137 JumpIfEqual {148}
	138 Move X8, 0xECB000
	139 Move X8, [X8+2760]
	140 Move X20, X0
	141 Move X24, [X8]
	142 Move X1, X24
	143 Call 0x1C17E00
	144 Move X29, [X31+56]
	145 Move X28, X0
	146 Compare X0, 0
	147 JumpIfNotEqual {43}
	148 Move X29, [X31+56]
	149 Move X28, X31
	150 Compare W21, 0
	151 JumpIfEqual {158}
	152 NotImplemented "Instruction CMP not yet implemented."
	153 Move X8, [X31+8]
	154 Add X8, X8, W19
	155 Move X20, [X8+32]
	156 Compare X20, 0
	157 JumpIfNotEqual {161}
	158 Move X8, [X23]
	159 Move X8, [X8+184]
	160 Move X20, [X8]
	161 Move X0, X20
	162 Move X20, [X31+160]
	163 Move X19, [X31+168]
	164 Move X22, [X31+144]
	165 Move X21, [X31+152]
	166 Move X24, [X31+128]
	167 Move X23, [X31+136]
	168 Move X26, [X31+112]
	169 Move X25, [X31+120]
	170 Move X28, [X31+96]
	171 Move X27, [X31+104]
	172 Move X29, [X31+80]
	173 Move X30, [X31+88]
	174 Add X31, X31, 176
	175 Return X0
	176 Call 0x1C17F28
	177 Move X0, 0xED4000
	178 Move X0, [X0+3512]
	179 Call 0x1C17D08
	180 Call 0x1C17F10
	181 Move X1, X31
	182 Move X19, X0
	183 Call OutOfMemoryException..ctor, X0
	184 Call 0x1C17F20
	185 Move X0, 0xED0000
	186 Move X0, [X0+1320]
	187 Call 0x1C17D08
	188 Call 0x1C17F10
	189 Move X19, X0
	190 Move X0, 0xED5000
	191 Move X0, [X0+3784]
	192 Call 0x1C17D08
	193 Move X1, X0
	194 Move X0, X19
	195 Move X2, X31
	196 Call ArgumentNullException..ctor, X0, X1
	197 Move X0, 0xED3000
	198 Move X0, [X0+1888]
	199 Call 0x1C17D08
	200 Call 0x1C17F10
	201 Move X19, X0
	202 Move X0, 0xEF3000
	203 Move X0, [X0+1624]
	204 Call 0x1C17D08
	205 Move X20, X0
	206 Move X0, 0xEFA000
	207 Move X0, [X0+216]
	208 Move X0, 0xED3000
	209 Move X0, [X0+1888]
	210 Call 0x1C17D08
	211 Call 0x1C17F10
	212 Move X19, X0
	213 Move X0, 0xEF3000
	214 Move X0, [X0+1608]
	215 Call 0x1C17D08
	216 Move X20, X0
	217 Move X0, 0xEFA000
	218 Move X0, [X0+48]
	219 Move X0, 0xED3000
	220 Move X0, [X0+1888]
	221 Call 0x1C17D08
	222 Call 0x1C17F10
	223 Move X19, X0
	224 Move X0, 0xEF3000
	225 Move X0, [X0+1624]
	226 Call 0x1C17D08
	227 Move X20, X0
	228 Move X0, 0xEFA000
	229 Move X0, [X0+224]
	230 Call 0x1C17D08
	231 Move X2, X0
	232 Move X0, X19
	233 Move X1, X20
	234 Move X3, X31
	235 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	236 Move X0, 0xEFA000
	237 Move X0, [X0+232]
	238 Call 0x1C17D08
	239 Move X1, X0
	240 Move X0, X19
	241 Call 0x1C17DEC
	242 Move X0, X20
	243 Move X1, X24
	244 Call 0x1C181E0

Method: System.String PadLeft(System.Int32 totalWidth, System.Char paddingChar)

Disassembly:
	0x03229948 ADRP X8, 0x11B3000
	0x0322994C MOVZ W9, 0x1
	0x03229950 STRB W9, [X8 + 0x3AB]
	0x03229954 ADRP X9, 0xEF9000
	0x03229958 LDR W8, [X22 + 0x10]
	0x0322995C LDR X9, [X9 + 0x1A8]
	0x03229960 SUBS W25, W28, W27
	0x03229964 STP X26, X8, [X31 + 0x20]
	0x03229968 LDR X23, [X9]
	0x0322996C B.CS 0x3229978
	0x03229970 MOV X0, X31
	0x03229974 BL 0x339D6EC
	0x03229978 LDR X0, [X23 + 0x20]
	0x0322997C LDRB W8, [X0 + 0x135]
	0x03229980 TBNZ X8, 0x0, 0x3229988
	0x03229984 BL 0x1C5C684
	0x03229988 ADRP X8, 0xEF9000
	0x0322998C LDR X8, [X8 + 0x198]
	0x03229990 ADD X0, X31, 0x20
	0x03229994 MOV X2, X25
	0x03229998 LDR X3, [X8]
	0x0322999C LDR W8, [X31 + 0x1C]
	0x032299A0 ADD W24, W29, W8
	0x032299A4 ADD X8, X19, W27, 0x1, SXTW
	0x032299A8 ADD X1, X8, 0x14
	0x032299AC BL 0x25BEC30
	0x032299B0 LDR W8, [X22 + 0x10]
	0x032299B4 SUBS X20, X20, 0x1
	0x032299B8 ADD X21, X21, 0x4
	0x032299BC ADD W27, W8, W27
	0x032299C0 B.NE 0x322987C
	0x032299C4 B 0x32299D0
	0x032299C8 MOV W27, W31
	0x032299CC MOV W24, W31
	0x032299D0 ADRP X20, 0x11B3000
	0x032299D4 LDRB W8, [X20 + 0x3AC]
	0x032299D8 CBNZ W8, 0x32299F0
	0x032299DC ADRP X0, 0xEF1000
	0x032299E0 LDR X0, [X0 + 0x290]
	0x032299E4 BL 0x1C16CF4
	0x032299E8 MOVZ W8, 0x1
	0x032299EC STRB W8, [X20 + 0x3AC]
	0x032299F0 LDR X20, [X31 + 0x10]
	0x032299F4 CBZ X20, 0x3229A24
	0x032299F8 LDR W9, [X20 + 0x10]
	0x032299FC CMP W9, W24
	0x03229A00 B.CS 0x3229A14
	0x03229A04 MOVZ W0, 0x18
	0x03229A08 MOV X1, X31
	0x03229A0C BL 0x339D764
	0x03229A10 LDR W9, [X20 + 0x10]
	0x03229A14 ADD X8, X20, W24, 0x1, SXTW
	0x03229A18 ADD X8, X8, 0x14
	0x03229A1C SUB W9, W9, W24
	0x03229A20 B 0x3229A3C
	0x03229A24 CBZ W24, 0x3229A34
	0x03229A28 MOVZ W0, 0x18
	0x03229A2C MOV X1, X31
	0x03229A30 BL 0x339D764
	0x03229A34 MOV X8, X31
	0x03229A38 MOV X9, X31
	0x03229A3C ADRP X10, 0xEF9000
	0x03229A40 LDR X10, [X10 + 0x1A8]
	0x03229A44 SUBS W20, W28, W27
	0x03229A48 STP X8, X9, [X31 + 0x20]
	0x03229A4C LDR X21, [X10]
	0x03229A50 B.CS 0x3229A5C
	0x03229A54 MOV X0, X31
	0x03229A58 BL 0x339D6EC
	0x03229A5C LDR X0, [X21 + 0x20]
	0x03229A60 LDRB W8, [X0 + 0x135]
	0x03229A64 TBNZ X8, 0x0, 0x3229A6C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move TEMP, X1
	008 And TEMP, TEMP, -2147483648
	009 Compare TEMP, -2147483648
	010 JumpIfEqual {65}
	011 Move W22, [X0+16]
	012 Move X19, X0
	013 Subtract W23, W1, W22
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Move W0, W1
	016 Move W20, W2
	017 Call 0x1C8925C
	018 Compare X0, 0
	019 JumpIfEqual {88}
	020 Move X10, -41148416
	021 Move V0, [X10+121]
	022 Move W9, W23
	023 Add X8, X0, 20
	024 Add X11, X9, 1
	025 Subtract X12, X9, 1
	026 Move W10, 2
	027 Move X21, X0
	028 And X9, X11, 0
	029 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	030 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	031 Move X10, X8
	032 NotImplemented "Instruction INVALID not yet implemented."
	033 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	034 Move W11, S3
	035 Move TEMP, X11
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {40}
	039 NotImplemented "Instruction STRH not yet implemented."
	040 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	041 Move TEMP, X11
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 Invalid "Jump target not found in method."
	045 NotImplemented "Instruction STRH not yet implemented."
	046 NotImplemented "Instruction INVALID not yet implemented."
	047 Subtract X9, X9, 2
	048 Add X10, X10, 4
	049 Add X1, X19, 20
	050 Add X0, X8, W23
	051 Move W2, W22
	052 ShiftRight W2, 31
	053 And W2, W2, 0x3FFFFFFF
	054 Move X3, X31
	055 Call Buffer.Memmove, X0, X1, X2
	056 Move X19, X21
	057 Move X0, X19
	058 Move X20, [X31+32]
	059 Move X19, [X31+40]
	060 Move X22, [X31+16]
	061 Move X21, [X31+24]
	062 Move X30, [X31+48]
	063 Move X23, [X31+56]
	064 Return X0
	065 Move X0, 0xED3000
	066 Move X0, [X0+1888]
	067 Call 0x1C17D08
	068 Call 0x1C17F10
	069 Move X19, X0
	070 Move X0, 0xEFA000
	071 Move X0, [X0+240]
	072 Call 0x1C17D08
	073 Move X20, X0
	074 Move X0, 0xEF3000
	075 Move X0, [X0+1648]
	076 Call 0x1C17D08
	077 Move X2, X0
	078 Move X0, X19
	079 Move X1, X20
	080 Move X3, X31
	081 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	082 Move X0, 0xEFA000
	083 Move X0, [X0+248]
	084 Call 0x1C17D08
	085 Move X1, X0
	086 Move X0, X19
	087 Call 0x1C17DEC
	088 Call 0x1C17F20

Method: System.String PadRight(System.Int32 totalWidth, System.Char paddingChar)

Disassembly:
	0x03229A68 BL 0x1C5C684
	0x03229A6C ADRP X8, 0xEF9000
	0x03229A70 LDR X8, [X8 + 0x198]
	0x03229A74 ADD X0, X31, 0x20
	0x03229A78 MOV X2, X20
	0x03229A7C LDR X3, [X8]
	0x03229A80 ADD X8, X19, W27, 0x1, SXTW
	0x03229A84 ADD X1, X8, 0x14
	0x03229A88 BL 0x25BEC30
	0x03229A8C MOV X0, X19
	0x03229A90 LDP X20, X19, [X31 + 0x80]
	0x03229A94 LDP X22, X21, [X31 + 0x70]
	0x03229A98 LDP X24, X23, [X31 + 0x60]
	0x03229A9C LDP X26, X25, [X31 + 0x50]
	0x03229AA0 LDP X28, X27, [X31 + 0x40]
	0x03229AA4 LDP X29, X30, [X31 + 0x30]
	0x03229AA8 ADD X31, X31, 0x90
	0x03229AAC RET
	0x03229AB0 BL 0x1C16F20
	0x03229AB4 ADRP X0, 0xED3000
	0x03229AB8 LDR X0, [X0 + 0xDB8]
	0x03229ABC BL 0x1C16D08
	0x03229AC0 BL 0x1C16F10
	0x03229AC4 MOV X1, X31
	0x03229AC8 MOV X19, X0
	0x03229ACC BL 0x339F30C
	0x03229AD0 ADRP X0, 0xEF9000
	0x03229AD4 LDR X0, [X0 + 0x1B0]
	0x03229AD8 BL 0x1C16D08
	0x03229ADC MOV X1, X0
	0x03229AE0 MOV X0, X19
	0x03229AE4 BL 0x1C16DEC
	0x03229AE8 SUB X31, X31, 0x30
	0x03229AEC STP X30, X21, [X31 + 0x10]
	0x03229AF0 STP X20, X19, [X31 + 0x20]
	0x03229AF4 ADRP X21, 0x11B3000
	0x03229AF8 LDRB W8, [X21 + 0x371]
	0x03229AFC MOV W19, W2
	0x03229B00 MOV X20, X0
	0x03229B04 STRH W1, [X31 + 0xC]
	0x03229B08 TBNZ X8, 0x0, 0x3229B20
	0x03229B0C ADRP X0, 0xEF1000
	0x03229B10 LDR X0, [X0 + 0x290]
	0x03229B14 BL 0x1C16CF4
	0x03229B18 MOVZ W8, 0x1
	0x03229B1C STRB W8, [X21 + 0x371]
	0x03229B20 ADD X1, X31, 0xC
	0x03229B24 MOVZ W2, 0x1
	0x03229B28 MOVN W3, 0x80000000
	0x03229B2C MOV X0, X20
	0x03229B30 MOV W4, W19
	0x03229B34 BL 0x3229B48
	0x03229B38 LDP X20, X19, [X31 + 0x20]
	0x03229B3C LDP X30, X21, [X31 + 0x10]
	0x03229B40 ADD X31, X31, 0x30
	0x03229B44 RET
	0x03229B48 STP X29, X30, [X31 - 0x50]!
	0x03229B4C STR X25, [X31 + 0x10]
	0x03229B50 STP X24, X23, [X31 + 0x20]
	0x03229B54 STP X22, X21, [X31 + 0x30]
	0x03229B58 STP X20, X19, [X31 + 0x40]
	0x03229B5C ADD X29, X31, 0x0
	0x03229B60 SUB X31, X31, 0x40
	0x03229B64 MRS X25, 0xC000
	0x03229B68 LDR X8, [X25 + 0x28]
	0x03229B6C ADRP X24, 0x11B3000
	0x03229B70 MOV W21, W4
	0x03229B74 MOV W20, W3
	0x03229B78 STUR X8, [X29 - 0x8]
	0x03229B7C LDRB W8, [X24 + 0x376]
	0x03229B80 MOV X22, X2
	0x03229B84 MOV X23, X1
	0x03229B88 MOV X19, X0
	0x03229B8C TBNZ X8, 0x0, 0x3229BEC

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move TEMP, X1
	009 And TEMP, TEMP, -2147483648
	010 Compare TEMP, -2147483648
	011 JumpIfEqual {67}
	012 Move W23, [X0+16]
	013 Move X22, X0
	014 Subtract W24, W1, W23
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move W0, W1
	017 Move W19, W2
	018 Call 0x1C8925C
	019 Compare X0, 0
	020 JumpIfEqual {90}
	021 Add X21, X0, 20
	022 Move X20, X0
	023 Add X1, X22, 20
	024 Move W2, W23
	025 ShiftRight W2, 31
	026 And W2, W2, 0x3FFFFFFF
	027 Move X0, X21
	028 Move X3, X31
	029 Call Buffer.Memmove, X0, X1, X2
	030 Move X9, -41148416
	031 Move V0, [X9+121]
	032 Move W8, W24
	033 Add X10, X8, 1
	034 Subtract X11, X8, 1
	035 Move W9, 2
	036 And X8, X10, 0
	037 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	038 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	039 NotImplemented "Instruction INVALID not yet implemented."
	040 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	041 Move W9, S3
	042 Move TEMP, X9
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {47}
	046 NotImplemented "Instruction STRH not yet implemented."
	047 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	048 Move TEMP, X9
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 Invalid "Jump target not found in method."
	052 Add W9, W23, 1
	053 NotImplemented "Instruction STRH not yet implemented."
	054 NotImplemented "Instruction INVALID not yet implemented."
	055 Subtract X8, X8, 2
	056 Add W23, W23, 2
	057 Move X22, X20
	058 Move X0, X22
	059 Move X20, [X31+48]
	060 Move X19, [X31+56]
	061 Move X22, [X31+32]
	062 Move X21, [X31+40]
	063 Move X24, [X31+16]
	064 Move X23, [X31+24]
	065 Move X30, [X31+64]
	066 Return X0
	067 Move X0, 0xED3000
	068 Move X0, [X0+1888]
	069 Call 0x1C17D08
	070 Call 0x1C17F10
	071 Move X19, X0
	072 Move X0, 0xEFA000
	073 Move X0, [X0+240]
	074 Call 0x1C17D08
	075 Move X20, X0
	076 Move X0, 0xEF3000
	077 Move X0, [X0+1648]
	078 Call 0x1C17D08
	079 Move X2, X0
	080 Move X0, X19
	081 Move X1, X20
	082 Move X3, X31
	083 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	084 Move X0, 0xEFA000
	085 Move X0, [X0+256]
	086 Call 0x1C17D08
	087 Move X1, X0
	088 Move X0, X19
	089 Call 0x1C17DEC
	090 Call 0x1C17F20

Method: System.String Remove(System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x03229B90 ADRP X0, 0xEF9000
	0x03229B94 LDR X0, [X0 + 0x1B8]
	0x03229B98 BL 0x1C16CF4
	0x03229B9C ADRP X0, 0xEF9000
	0x03229BA0 LDR X0, [X0 + 0x1A0]
	0x03229BA4 BL 0x1C16CF4
	0x03229BA8 ADRP X0, 0xEF9000
	0x03229BAC LDR X0, [X0 + 0x160]
	0x03229BB0 BL 0x1C16CF4
	0x03229BB4 ADRP X0, 0xECA000
	0x03229BB8 LDR X0, [X0 + 0xAC8]
	0x03229BBC BL 0x1C16CF4
	0x03229BC0 ADRP X0, 0xEF9000
	0x03229BC4 LDR X0, [X0 + 0x170]
	0x03229BC8 BL 0x1C16CF4
	0x03229BCC ADRP X0, 0xEF9000
	0x03229BD0 LDR X0, [X0 + 0x178]
	0x03229BD4 BL 0x1C16CF4
	0x03229BD8 ADRP X0, 0xEF9000
	0x03229BDC LDR X0, [X0 + 0x180]
	0x03229BE0 BL 0x1C16CF4
	0x03229BE4 MOVZ W8, 0x1
	0x03229BE8 STRB W8, [X24 + 0x376]
	0x03229BEC MOVI V0.2D, 0x0
	0x03229BF0 STP V0, V0, [X29 - 0x30]
	0x03229BF4 TBNZ X20, 0x1F, 0x3229D90
	0x03229BF8 CMP W21, 0x2
	0x03229BFC B.CS 0x3229DEC
	0x03229C00 CBZ W20, 0x3229CB0
	0x03229C04 CMP W21, 0x1
	0x03229C08 B.NE 0x3229C14
	0x03229C0C LDR W8, [X19 + 0x10]
	0x03229C10 CBZ W8, 0x3229CB0
	0x03229C14 CMP W20, 0x1
	0x03229C18 B.EQ 0x3229D0C
	0x03229C1C SUB X24, X31, 0x200
	0x03229C20 ADD X31, X24, 0x0
	0x03229C24 MOVZ W2, 0x200
	0x03229C28 MOV X0, X24
	0x03229C2C MOV W1, W31
	0x03229C30 BL 0x3EB1B10
	0x03229C34 ADRP X8, 0xEF9000
	0x03229C38 LDR X8, [X8 + 0x180]
	0x03229C3C SUB X0, X29, 0x30
	0x03229C40 MOVZ W2, 0x80
	0x03229C44 MOV X1, X24
	0x03229C48 LDR X3, [X8]
	0x03229C4C BL 0x278D6C4
	0x03229C50 SUB X3, X29, 0x30
	0x03229C54 MOV X0, X19
	0x03229C58 MOV X1, X23
	0x03229C5C MOV X2, X22
	0x03229C60 BL 0x322A050
	0x03229C64 ADRP X8, 0xEF9000
	0x03229C68 LDR X8, [X8 + 0x170]
	0x03229C6C SUB X0, X29, 0x30
	0x03229C70 LDR X1, [X8]
	0x03229C74 BL 0x278D764
	0x03229C78 MOV X8, X1
	0x03229C7C CBZ W8, 0x3229D0C
	0x03229C80 MOV X2, X0
	0x03229C84 MOVZ W5, 0x1
	0x03229C88 MOV X0, X19
	0x03229C8C MOV X1, X2
	0x03229C90 MOV X2, X8
	0x03229C94 CMP W21, 0x1
	0x03229C98 B.NE 0x3229D38
	0x03229C9C MOV X3, X31
	0x03229CA0 MOV X4, X31
	0x03229CA4 MOV W6, W20
	0x03229CA8 BL 0x322A6FC
	0x03229CAC B 0x3229D48
	0x03229CB0 ADRP X8, 0xEF9000
	0x03229CB4 LDR X8, [X8 + 0x1B8]
	0x03229CB8 LDR X19, [X8]
	0x03229CBC LDR X8, [X19 + 0x38]
	0x03229CC0 CBNZ X8, 0x3229CD0
	0x03229CC4 MOV X0, X19
	0x03229CC8 BL 0x1C5C6E0
	0x03229CCC LDR X8, [X19 + 0x38]
	0x03229CD0 LDR X0, [X8 + 0x10]
	0x03229CD4 LDRB W8, [X0 + 0x135]
	0x03229CD8 TBNZ X8, 0x0, 0x3229CE0
	0x03229CDC BL 0x1C5C684
	0x03229CE0 LDR W8, [X0 + 0xE0]
	0x03229CE4 CBNZ W8, 0x3229CEC
	0x03229CE8 BL 0x1C16DFC
	0x03229CEC LDR X8, [X19 + 0x38]
	0x03229CF0 LDR X0, [X8 + 0x10]
	0x03229CF4 LDRB W8, [X0 + 0x135]
	0x03229CF8 TBNZ X8, 0x0, 0x3229D00
	0x03229CFC BL 0x1C5C684
	0x03229D00 LDR X8, [X0 + 0xB8]
	0x03229D04 LDR X20, [X8]
	0x03229D08 B 0x3229D60
	0x03229D0C ADRP X8, 0xECA000
	0x03229D10 LDR X8, [X8 + 0xAC8]
	0x03229D14 MOVZ W1, 0x1
	0x03229D18 LDR X0, [X8]
	0x03229D1C BL 0x1C16D6C
	0x03229D20 CBZ X0, 0x3229E5C
	0x03229D24 LDR W8, [X0 + 0x18]
	0x03229D28 MOV X20, X0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x11B4000
	009 Move W8, [X22+876]
	010 Move W19, W2
	011 Move W20, W1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xECD000
	018 Move X0, [X0+632]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+876], W8
	022 Move TEMP, X20
	023 And TEMP, TEMP, -2147483648
	024 Compare TEMP, -2147483648
	025 JumpIfEqual {74}
	026 Move TEMP, X19
	027 And TEMP, TEMP, -2147483648
	028 Compare TEMP, -2147483648
	029 JumpIfEqual {85}
	030 Move W8, [X21+16]
	031 Subtract W9, W8, W20
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Compare W19, 0
	034 JumpIfEqual {65}
	035 Subtract W22, W8, W19
	036 Move W0, W22
	037 Call 0x1C8925C
	038 Compare X0, 0
	039 JumpIfEqual {119}
	040 Add X21, X21, 20
	041 Add X24, X0, 20
	042 Move X23, X0
	043 Move W2, W20
	044 ShiftRight W2, 31
	045 And W2, W2, 0x3FFFFFFF
	046 Move X0, X24
	047 Move X1, X21
	048 Move X3, X31
	049 Call Buffer.Memmove, X0, X1, X2
	050 Add X8, X21, W20
	051 Subtract W9, W22, W20
	052 Add X0, X24, W20
	053 Add X1, X8, W19
	054 Move W2, W9
	055 ShiftRight W2, 31
	056 And W2, W2, 0x3FFFFFFF
	057 Move X3, X31
	058 Call Buffer.Memmove, X0, X1, X2
	059 Move X21, X23
	060 Move X8, 0xECD000
	061 Move X8, [X8+632]
	062 Move X8, [X8]
	063 Move X8, [X8+184]
	064 Move X21, [X8]
	065 Move X0, X21
	066 Move X20, [X31+48]
	067 Move X19, [X31+56]
	068 Move X22, [X31+32]
	069 Move X21, [X31+40]
	070 Move X24, [X31+16]
	071 Move X23, [X31+24]
	072 Move X30, [X31+64]
	073 Return X0
	074 Move X0, 0xED3000
	075 Move X0, [X0+1888]
	076 Call 0x1C17D08
	077 Call 0x1C17F10
	078 Move X19, X0
	079 Move X0, 0xEF3000
	080 Move X0, [X0+1624]
	081 Call 0x1C17D08
	082 Move X20, X0
	083 Move X0, 0xEFA000
	084 Move X0, [X0+216]
	085 Move X0, 0xED3000
	086 Move X0, [X0+1888]
	087 Call 0x1C17D08
	088 Call 0x1C17F10
	089 Move X19, X0
	090 Move X0, 0xEF3000
	091 Move X0, [X0+1608]
	092 Call 0x1C17D08
	093 Move X20, X0
	094 Move X0, 0xEFA000
	095 Move X0, [X0+48]
	096 Move X0, 0xED3000
	097 Move X0, [X0+1888]
	098 Call 0x1C17D08
	099 Call 0x1C17F10
	100 Move X19, X0
	101 Move X0, 0xEF3000
	102 Move X0, [X0+1608]
	103 Call 0x1C17D08
	104 Move X20, X0
	105 Move X0, 0xEFA000
	106 Move X0, [X0+264]
	107 Call 0x1C17D08
	108 Move X2, X0
	109 Move X0, X19
	110 Move X1, X20
	111 Move X3, X31
	112 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	113 Move X0, 0xEFA000
	114 Move X0, [X0+272]
	115 Call 0x1C17D08
	116 Move X1, X0
	117 Move X0, X19
	118 Call 0x1C17DEC
	119 Call 0x1C17F20

Method: System.String Remove(System.Int32 startIndex)

Disassembly:
	0x03229D2C CBZ W8, 0x3229E60
	0x03229D30 STR X19, [X20 + 0x20]
	0x03229D34 B 0x3229D60
	0x03229D38 MOV X3, X31
	0x03229D3C MOV X4, X31
	0x03229D40 MOV W6, W20
	0x03229D44 BL 0x322A524
	0x03229D48 ADRP X8, 0xEF9000
	0x03229D4C LDR X8, [X8 + 0x178]
	0x03229D50 MOV X20, X0
	0x03229D54 SUB X0, X29, 0x30
	0x03229D58 LDR X1, [X8]
	0x03229D5C BL 0x322EB74
	0x03229D60 LDR X8, [X25 + 0x28]
	0x03229D64 LDUR X9, [X29 - 0x8]
	0x03229D68 CMP X8, X9
	0x03229D6C B.NE 0x3229E64
	0x03229D70 MOV X0, X20
	0x03229D74 ADD X31, X29, 0x0
	0x03229D78 LDP X20, X19, [X31 + 0x40]
	0x03229D7C LDP X22, X21, [X31 + 0x30]
	0x03229D80 LDP X24, X23, [X31 + 0x20]
	0x03229D84 LDR X25, [X31 + 0x10]
	0x03229D88 LDP X29, X30, [X31], #0x50
	0x03229D8C RET
	0x03229D90 ADRP X0, 0xED2000
	0x03229D94 LDR X0, [X0 + 0x760]
	0x03229D98 BL 0x1C16D08
	0x03229D9C BL 0x1C16F10
	0x03229DA0 MOV X19, X0
	0x03229DA4 ADRP X0, 0xEF2000
	0x03229DA8 LDR X0, [X0 + 0x648]
	0x03229DAC BL 0x1C16D08
	0x03229DB0 MOV X20, X0
	0x03229DB4 ADRP X0, 0xEF9000
	0x03229DB8 LDR X0, [X0 + 0x30]
	0x03229DBC BL 0x1C16D08
	0x03229DC0 MOV X2, X0
	0x03229DC4 MOV X0, X19
	0x03229DC8 MOV X1, X20
	0x03229DCC MOV X3, X31
	0x03229DD0 BL 0x3311888
	0x03229DD4 ADRP X0, 0xEF9000
	0x03229DD8 LDR X0, [X0 + 0x1C0]
	0x03229DDC BL 0x1C16D08
	0x03229DE0 MOV X1, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move TEMP, X1
	005 And TEMP, TEMP, -2147483648
	006 Compare TEMP, -2147483648
	007 JumpIfEqual {15}
	008 Move W8, [X0+16]
	009 Move W2, W1
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move W1, W31
	014 Move X30, [X31+32]
	015 Move X0, 0xED3000
	016 Move X0, [X0+1888]
	017 Call 0x1C17D08
	018 Call 0x1C17F10
	019 Move X19, X0
	020 Move X0, 0xEF3000
	021 Move X0, [X0+1624]
	022 Call 0x1C17D08
	023 Move X20, X0
	024 Move X0, 0xEFA000
	025 Move X0, [X0+216]
	026 Move X0, 0xED3000
	027 Move X0, [X0+1888]
	028 Call 0x1C17D08
	029 Call 0x1C17F10
	030 Move X19, X0
	031 Move X0, 0xEF3000
	032 Move X0, [X0+1624]
	033 Call 0x1C17D08
	034 Move X20, X0
	035 Move X0, 0xEFA000
	036 Move X0, [X0+280]
	037 Call 0x1C17D08
	038 Move X2, X0
	039 Move X0, X19
	040 Move X1, X20
	041 Move X3, X31
	042 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	043 Move X0, 0xEFA000
	044 Move X0, [X0+288]
	045 Call 0x1C17D08
	046 Move X1, X0
	047 Move X0, X19
	048 Call 0x1C17DEC

Method: System.String Replace(System.String oldValue, System.String newValue, System.StringComparison comparisonType)

Disassembly:
	0x03229F7C TBNZ X8, 0x0, 0x3229F94
	0x03229F80 ADRP X0, 0xEF9000
	0x03229F84 LDR X0, [X0 + 0x1D8]
	0x03229F88 BL 0x1C16CF4
	0x03229F8C MOVZ W8, 0x1
	0x03229F90 STRB W8, [X22 + 0x374]
	0x03229F94 LDR X1, [X23]
	0x03229F98 MOV X0, X21
	0x03229F9C BL 0x25BF134
	0x03229FA0 MOV X2, X0
	0x03229FA4 MOV X4, X1
	0x03229FA8 MOV X0, X20
	0x03229FAC MOV X1, X2
	0x03229FB0 MOV X2, X4
	0x03229FB4 MOV W4, W19
	0x03229FB8 LDP X20, X19, [X31 + 0x20]
	0x03229FBC LDP X22, X21, [X31 + 0x10]
	0x03229FC0 MOVN W3, 0x80000000
	0x03229FC4 LDP X30, X23, [X31], #0x30
	0x03229FC8 B 0x3229B48
	0x03229FCC STR X30, [X31 - 0x40]!
	0x03229FD0 STP X24, X23, [X31 + 0x10]
	0x03229FD4 STP X22, X21, [X31 + 0x20]
	0x03229FD8 STP X20, X19, [X31 + 0x30]
	0x03229FDC ADRP X23, 0x11B3000
	0x03229FE0 ADRP X24, 0xEF9000
	0x03229FE4 LDRB W8, [X23 + 0x375]
	0x03229FE8 LDR X24, [X24 + 0x1D8]
	0x03229FEC MOV W19, W3
	0x03229FF0 MOV W20, W2
	0x03229FF4 MOV X22, X1
	0x03229FF8 MOV X21, X0
	0x03229FFC TBNZ X8, 0x0, 0x322A014
	0x0322A000 ADRP X0, 0xEF8000
	0x0322A004 LDR X0, [X0 + 0x1D8]
	0x0322A008 BL 0x1C16CF4
	0x0322A00C MOVZ W8, 0x1
	0x0322A010 STRB W8, [X23 + 0x375]
	0x0322A014 LDR X1, [X24]
	0x0322A018 MOV X0, X22
	0x0322A01C BL 0x25BF134
	0x0322A020 MOV X2, X0
	0x0322A024 MOV X3, X1
	0x0322A028 MOV X0, X21
	0x0322A02C MOV X1, X2
	0x0322A030 MOV X2, X3
	0x0322A034 MOV W3, W20
	0x0322A038 MOV W4, W19
	0x0322A03C LDP X20, X19, [X31 + 0x30]
	0x0322A040 LDP X22, X21, [X31 + 0x20]
	0x0322A044 LDP X24, X23, [X31 + 0x10]
	0x0322A048 LDR X30, [X31], #0x40
	0x0322A04C B 0x3229B48
	0x0322A050 SUB X31, X31, 0x90
	0x0322A054 STP X29, X30, [X31 + 0x30]
	0x0322A058 STP X28, X27, [X31 + 0x40]
	0x0322A05C STP X26, X25, [X31 + 0x50]
	0x0322A060 STP X24, X23, [X31 + 0x60]
	0x0322A064 STP X22, X21, [X31 + 0x70]
	0x0322A068 STP X20, X19, [X31 + 0x80]
	0x0322A06C MRS X23, 0xC000
	0x0322A070 LDR X8, [X23 + 0x28]
	0x0322A074 ADRP X24, 0x11B2000
	0x0322A078 MOV X19, X3
	0x0322A07C MOV X22, X2
	0x0322A080 STR X8, [X31 + 0x28]
	0x0322A084 LDRB W8, [X24 + 0x37C]
	0x0322A088 MOV X21, X1
	0x0322A08C MOV X20, X0
	0x0322A090 TBNZ X8, 0x0, 0x322A0C0
	0x0322A094 ADRP X0, 0xECB000
	0x0322A098 LDR X0, [X0 + 0x170]
	0x0322A09C BL 0x1C16CF4
	0x0322A0A0 ADRP X0, 0xEF8000
	0x0322A0A4 LDR X0, [X0 + 0x28]
	0x0322A0A8 BL 0x1C16CF4
	0x0322A0AC ADRP X0, 0xEF8000
	0x0322A0B0 LDR X0, [X0 + 0x168]
	0x0322A0B4 BL 0x1C16CF4
	0x0322A0B8 MOVZ W8, 0x1
	0x0322A0BC STRB W8, [X24 + 0x37C]
	0x0322A0C0 MOVI V0.2D, 0x0
	0x0322A0C4 CMP W22, 0x3
	0x0322A0C8 STP V0, V0, [X31]
	0x0322A0CC B.HI 0x322A3EC
	0x0322A0D0 ADRP X9, 0xFFFFFFFFFD96C000
	0x0322A0D4 MOV W8, W22
	0x0322A0D8 ADD X9, X9, 0x473
	0x0322A0DC ADR X10, 0x10
	0x0322A0E0 LDRB W11, [X9, X8, LSL]
	0x0322A0E4 ADD X10, X10, X11, 0x2, LSL
	0x0322A0E8 BR X10
	0x0322A0EC LDR W8, [X20 + 0x10]
	0x0322A0F0 CMP W8, 0x1
	0x0322A0F4 B.LT 0x322A4EC
	0x0322A0F8 ADRP X25, 0xECB000
	0x0322A0FC ADRP X26, 0xEF8000
	0x0322A100 LDR X25, [X25 + 0x170]
	0x0322A104 LDR X26, [X26 + 0x168]
	0x0322A108 MOV X22, X31
	0x0322A10C ADD X24, X20, 0x14
	0x0322A110 CMP X22, W8, SXTW
	0x0322A114 B.LT 0x322A120
	0x0322A118 MOV X0, X31
	0x0322A11C BL 0x339D674
	0x0322A120 LDR X0, [X25]
	0x0322A124 LDRH W21, [X24, X22, LSL #1]
	0x0322A128 LDR W8, [X0 + 0xE0]
	0x0322A12C CBNZ W8, 0x322A134
	0x0322A130 BL 0x1C16DFC
	0x0322A134 MOV W0, W21
	0x0322A138 MOV X1, X31
	0x0322A13C BL 0x3317FCC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x11B4000
	008 Move W8, [X23+877]
	009 Move W22, W3
	010 Move X19, X2
	011 Move X20, X1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xECD000
	018 Move X0, [X0+3144]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+877], W8
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X9, -40443904
	024 Move W8, W22
	025 Add X9, X9, 1133
	026 NotImplemented "Instruction ADR not yet implemented."
	027 Move W11, [X9]
	028 Add X10, X10, X11
	029 CallNoReturn X10
	030 Move X8, 0xECD000
	031 Move X8, [X8+3144]
	032 Move X0, [X8]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X31
	038 Call CultureInfo.get_CurrentCulture
	039 Move X8, 0xECC000
	040 Move X8, [X8+3144]
	041 Move X0, [X8]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move X0, X31
	047 Call CultureInfo.get_CurrentCulture
	048 Move X8, 0xECC000
	049 Move X8, [X8+3144]
	050 Move X0, [X8]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move X0, X31
	056 Call CultureInfo.get_InvariantCulture
	057 Move X3, X0
	058 Move X0, X21
	059 Move X1, X20
	060 Move X2, X19
	061 Move W4, W31
	062 Move X8, 0xECC000
	063 Move X8, [X8+3144]
	064 Move X0, [X8]
	065 Move W8, [X0+224]
	066 Compare W8, 0
	067 JumpIfNotEqual {69}
	068 Call 0x1C17DFC
	069 Move X0, X31
	070 Call CultureInfo.get_InvariantCulture
	071 Move W4, 1
	072 Move X0, X21
	073 Move X1, X20
	074 Move X2, X19
	075 Move X20, [X31+32]
	076 Move X19, [X31+40]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X30, [X31+48]
	080 Move X23, [X31+56]
	081 Call String.Replace, X0, X1, X2
	082 Return X0
	083 Move X8, 0xECC000
	084 Move X8, [X8+3144]
	085 Move X0, [X8]
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {90}
	089 Call 0x1C17DFC
	090 Move X0, X31
	091 Call CultureInfo.get_InvariantCulture
	092 Move W4, 0x10000000
	093 Move X3, X0
	094 Move X0, X21
	095 Move X1, X20
	096 Move X2, X19
	097 Move X20, [X31+32]
	098 Move X19, [X31+40]
	099 Move X22, [X31+16]
	100 Move X21, [X31+24]
	101 Move X30, [X31+48]
	102 Move X23, [X31+56]
	103 Move X0, 0xED2000
	104 Move X0, [X0+1400]
	105 Call 0x1C17D08
	106 Call 0x1C17F10
	107 Move X19, X0
	108 Move X0, 0xEF8000
	109 Move X0, [X0+4056]
	110 Call 0x1C17D08
	111 Move X20, X0
	112 Move X0, 0xEF8000
	113 Move X0, [X0+4064]
	114 Call 0x1C17D08
	115 Move X2, X0
	116 Move X0, X19
	117 Move X1, X20
	118 Move X3, X31
	119 Call ArgumentException..ctor, X0, X1, X2
	120 Move X0, 0xEF9000
	121 Move X0, [X0+320]
	122 Call 0x1C17D08
	123 Move X1, X0
	124 Move X0, X19
	125 Call 0x1C17DEC

Method: System.String ReplaceCore(System.String oldValue, System.String newValue, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options)

Disassembly:
	0x0322A140 TBZ X0, 0x0, 0x322A1A4
	0x0322A144 LDR X27, [X26]
	0x0322A148 LDRSW X21, [X19 + 0x18]
	0x0322A14C LDR X0, [X27 + 0x20]
	0x0322A150 LDRB W8, [X0 + 0x135]
	0x0322A154 TBNZ X8, 0x0, 0x322A15C
	0x0322A158 BL 0x1C5C684
	0x0322A15C LDR W8, [X19 + 0x8]
	0x0322A160 CMP W21, W8
	0x0322A164 B.LT 0x322A18C
	0x0322A168 LDR X0, [X27 + 0x20]
	0x0322A16C LDRB W8, [X0 + 0x135]
	0x0322A170 TBNZ X8, 0x0, 0x322A178
	0x0322A174 BL 0x1C5C684
	0x0322A178 LDR X8, [X0 + 0xC0]
	0x0322A17C MOV X0, X19
	0x0322A180 LDR X1, [X8 + 0x28]
	0x0322A184 BL 0x278D8D4
	0x0322A188 LDR W8, [X19 + 0x8]
	0x0322A18C CMP W21, W8
	0x0322A190 B.CS 0x322A51C
	0x0322A194 LDR X8, [X19]
	0x0322A198 ADD W9, W21, 0x1
	0x0322A19C STR W22, [X8, X21, LSL #2]
	0x0322A1A0 STR W9, [X19 + 0x18]
	0x0322A1A4 LDRSW X8, [X20 + 0x10]
	0x0322A1A8 ADD X22, X22, 0x1
	0x0322A1AC CMP X22, X8
	0x0322A1B0 B.LT 0x322A110
	0x0322A1B4 B 0x322A4EC
	0x0322A1B8 LDR W8, [X20 + 0x10]
	0x0322A1BC CMP W8, 0x1
	0x0322A1C0 B.LT 0x322A4EC
	0x0322A1C4 ADRP X26, 0xEF8000
	0x0322A1C8 LDRH W24, [X21]
	0x0322A1CC LDRH W21, [X21 + 0x2]
	0x0322A1D0 LDR X26, [X26 + 0x168]
	0x0322A1D4 MOV X22, X31
	0x0322A1D8 ADD X25, X20, 0x14
	0x0322A1DC CMP X22, W8, SXTW
	0x0322A1E0 B.LT 0x322A1EC
	0x0322A1E4 MOV X0, X31
	0x0322A1E8 BL 0x339D674
	0x0322A1EC LDRH W8, [X25, X22, LSL #1]
	0x0322A1F0 CMP W8, W24
	0x0322A1F4 B.EQ 0x322A200
	0x0322A1F8 CMP W8, W21
	0x0322A1FC B.NE 0x322A260
	0x0322A200 LDR X28, [X26]
	0x0322A204 LDRSW X27, [X19 + 0x18]
	0x0322A208 LDR X0, [X28 + 0x20]
	0x0322A20C LDRB W8, [X0 + 0x135]
	0x0322A210 TBNZ X8, 0x0, 0x322A218
	0x0322A214 BL 0x1C5C684
	0x0322A218 LDR W8, [X19 + 0x8]
	0x0322A21C CMP W27, W8
	0x0322A220 B.LT 0x322A248
	0x0322A224 LDR X0, [X28 + 0x20]
	0x0322A228 LDRB W8, [X0 + 0x135]
	0x0322A22C TBNZ X8, 0x0, 0x322A234
	0x0322A230 BL 0x1C5C684
	0x0322A234 LDR X8, [X0 + 0xC0]
	0x0322A238 MOV X0, X19
	0x0322A23C LDR X1, [X8 + 0x28]
	0x0322A240 BL 0x278D8D4
	0x0322A244 LDR W8, [X19 + 0x8]
	0x0322A248 CMP W27, W8
	0x0322A24C B.CS 0x322A51C
	0x0322A250 LDR X8, [X19]
	0x0322A254 ADD W9, W27, 0x1
	0x0322A258 STR W22, [X8, X27, LSL #2]
	0x0322A25C STR W9, [X19 + 0x18]
	0x0322A260 LDRSW X8, [X20 + 0x10]
	0x0322A264 ADD X22, X22, 0x1
	0x0322A268 CMP X22, X8
	0x0322A26C B.LT 0x322A1DC
	0x0322A270 B 0x322A4EC
	0x0322A274 LDR W8, [X20 + 0x10]
	0x0322A278 CMP W8, 0x1
	0x0322A27C B.LT 0x322A4EC
	0x0322A280 ADRP X27, 0xEF8000
	0x0322A284 LDRH W24, [X21]
	0x0322A288 LDRH W25, [X21 + 0x2]
	0x0322A28C LDRH W21, [X21 + 0x4]
	0x0322A290 LDR X27, [X27 + 0x168]
	0x0322A294 MOV X22, X31
	0x0322A298 ADD X26, X20, 0x14
	0x0322A29C CMP X22, W8, SXTW
	0x0322A2A0 B.LT 0x322A2AC
	0x0322A2A4 MOV X0, X31
	0x0322A2A8 BL 0x339D674
	0x0322A2AC LDRH W8, [X26, X22, LSL #1]
	0x0322A2B0 CMP W8, W21
	0x0322A2B4 B.EQ 0x322A2C8
	0x0322A2B8 CMP W8, W24
	0x0322A2BC B.EQ 0x322A2C8
	0x0322A2C0 CMP W8, W25
	0x0322A2C4 B.NE 0x322A328
	0x0322A2C8 LDR X29, [X27]
	0x0322A2CC LDRSW X28, [X19 + 0x18]
	0x0322A2D0 LDR X0, [X29 + 0x20]
	0x0322A2D4 LDRB W8, [X0 + 0x135]
	0x0322A2D8 TBNZ X8, 0x0, 0x322A2E0
	0x0322A2DC BL 0x1C5C684
	0x0322A2E0 LDR W8, [X19 + 0x8]
	0x0322A2E4 CMP W28, W8
	0x0322A2E8 B.LT 0x322A310
	0x0322A2EC LDR X0, [X29 + 0x20]
	0x0322A2F0 LDRB W8, [X0 + 0x135]
	0x0322A2F4 TBNZ X8, 0x0, 0x322A2FC
	0x0322A2F8 BL 0x1C5C684
	0x0322A2FC LDR X8, [X0 + 0xC0]
	0x0322A300 MOV X0, X19
	0x0322A304 LDR X1, [X8 + 0x28]
	0x0322A308 BL 0x278D8D4
	0x0322A30C LDR W8, [X19 + 0x8]
	0x0322A310 CMP W28, W8
	0x0322A314 B.CS 0x322A51C
	0x0322A318 LDR X8, [X19]
	0x0322A31C ADD W9, W28, 0x1
	0x0322A320 STR W22, [X8, X28, LSL #2]
	0x0322A324 STR W9, [X19 + 0x18]
	0x0322A328 LDRSW X8, [X20 + 0x10]
	0x0322A32C ADD X22, X22, 0x1
	0x0322A330 CMP X22, X8
	0x0322A334 B.LT 0x322A29C
	0x0322A338 B 0x322A4EC
	0x0322A33C LDR W8, [X20 + 0x10]
	0x0322A340 CMP W8, 0x1
	0x0322A344 B.LT 0x322A4EC
	0x0322A348 ADRP X25, 0xEF8000
	0x0322A34C LDRH W21, [X21]
	0x0322A350 LDR X25, [X25 + 0x168]
	0x0322A354 MOV X22, X31
	0x0322A358 ADD X24, X20, 0x14
	0x0322A35C CMP X22, W8, SXTW
	0x0322A360 B.LT 0x322A36C
	0x0322A364 MOV X0, X31
	0x0322A368 BL 0x339D674
	0x0322A36C LDRH W8, [X24, X22, LSL #1]
	0x0322A370 CMP W8, W21
	0x0322A374 B.NE 0x322A3D8
	0x0322A378 LDR X27, [X25]
	0x0322A37C LDRSW X26, [X19 + 0x18]
	0x0322A380 LDR X0, [X27 + 0x20]
	0x0322A384 LDRB W8, [X0 + 0x135]
	0x0322A388 TBNZ X8, 0x0, 0x322A390
	0x0322A38C BL 0x1C5C684
	0x0322A390 LDR W8, [X19 + 0x8]
	0x0322A394 CMP W26, W8
	0x0322A398 B.LT 0x322A3C0
	0x0322A39C LDR X0, [X27 + 0x20]
	0x0322A3A0 LDRB W8, [X0 + 0x135]
	0x0322A3A4 TBNZ X8, 0x0, 0x322A3AC
	0x0322A3A8 BL 0x1C5C684
	0x0322A3AC LDR X8, [X0 + 0xC0]
	0x0322A3B0 MOV X0, X19
	0x0322A3B4 LDR X1, [X8 + 0x28]
	0x0322A3B8 BL 0x278D8D4

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X23, 0x11B3000
	013 Move W8, [X23+878]
	014 Move W20, W4
	015 Move X24, X3
	016 Move X22, X2
	017 Move X21, X1
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {31}
	023 Move X0, 0xECC000
	024 Move X0, [X0+3144]
	025 Call 0x1C17CF4
	026 Move X0, 0xECC000
	027 Move X0, [X0+632]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+878], W8
	031 Compare X21, 0
	032 JumpIfEqual {155}
	033 Move W8, [X21+16]
	034 Compare W8, 0
	035 JumpIfEqual {167}
	036 Compare X22, 0
	037 JumpIfEqual {45}
	038 Compare X24, 0
	039 JumpIfEqual {52}
	040 Move W0, 16
	041 Move X1, X31
	042 Call StringBuilderCache.Acquire, X0
	043 Move X23, X0
	044 Move [X31+12], W31
	045 Move X8, 0xECC000
	046 Move X8, [X8+632]
	047 Move X8, [X8]
	048 Move X8, [X8+184]
	049 Move X22, [X8]
	050 Compare X24, 0
	051 JumpIfNotEqual {40}
	052 Move X8, 0xECC000
	053 Move X8, [X8+3144]
	054 Move X0, [X8]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move X0, X31
	060 Call CultureInfo.get_CurrentCulture
	061 Move X24, X0
	062 Move W0, 16
	063 Move X1, X31
	064 Call StringBuilderCache.Acquire, X0
	065 Move [X31+12], W31
	066 Compare X24, 0
	067 JumpIfEqual {154}
	068 Move X23, X0
	069 Move X8, [X24]
	070 Move X0, X24
	071 Move X9, [X8+504]
	072 Move X1, [X8+512]
	073 NotImplemented "Instruction BLR not yet implemented."
	074 Compare X0, 0
	075 JumpIfEqual {154}
	076 Move W4, [X19+16]
	077 Add X6, X31, 12
	078 Move X1, X19
	079 Move X2, X21
	080 Move W3, W31
	081 Move W5, W20
	082 Move X7, X31
	083 Move X24, X0
	084 Call CompareInfo.IndexOf, X0, X1, X2, X3, X4, X5, X6
	085 Move W25, W0
	086 Move W26, W31
	087 Move TEMP, X0
	088 And TEMP, TEMP, -2147483648
	089 Compare TEMP, -2147483648
	090 JumpIfEqual {121}
	091 Move W27, W25
	092 Compare X23, 0
	093 JumpIfEqual {154}
	094 Subtract W3, W27, W26
	095 Move X0, X23
	096 Move X1, X19
	097 Move W2, W26
	098 Move X4, X31
	099 Call StringBuilder.Append, X0, X1, X2, X3
	100 Move X0, X23
	101 Move X1, X22
	102 Move X2, X31
	103 Call StringBuilder.Append, X0, X1
	104 Move W8, [X31+12]
	105 Move W9, [X19+16]
	106 Add X6, X31, 12
	107 Move X0, X24
	108 Add W26, W8, W27
	109 Subtract W4, W9, W26
	110 Move X1, X19
	111 Move X2, X21
	112 Move W3, W26
	113 Move W5, W20
	114 Move X7, X31
	115 Call CompareInfo.IndexOf, X0, X1, X2, X3, X4, X5, X6
	116 Move W27, W0
	117 Move TEMP, X0
	118 And TEMP, TEMP, -2147483648
	119 Compare TEMP, -2147483648
	120 JumpIfNotEqual {92}
	121 Move TEMP, X25
	122 And TEMP, TEMP, -2147483648
	123 Compare TEMP, -2147483648
	124 JumpIfEqual {138}
	125 Compare X23, 0
	126 JumpIfEqual {154}
	127 Move W8, [X19+16]
	128 Move X0, X23
	129 Move X1, X19
	130 Move W2, W26
	131 Subtract W3, W8, W26
	132 Move X4, X31
	133 Call StringBuilder.Append, X0, X1, X2, X3
	134 Move X0, X23
	135 Move X1, X31
	136 Call StringBuilderCache.GetStringAndRelease, X0
	137 Move X19, X0
	138 Move X0, X23
	139 Move X1, X31
	140 Call StringBuilderCache.Release, X0
	141 Move X0, X19
	142 Move X20, [X31+80]
	143 Move X19, [X31+88]
	144 Move X22, [X31+64]
	145 Move X21, [X31+72]
	146 Move X24, [X31+48]
	147 Move X23, [X31+56]
	148 Move X26, [X31+32]
	149 Move X25, [X31+40]
	150 Move X30, [X31+16]
	151 Move X27, [X31+24]
	152 Add X31, X31, 96
	153 Return X0
	154 Call 0x1C17F20
	155 Move X0, 0xECF000
	156 Move X0, [X0+1320]
	157 Call 0x1C17D08
	158 Call 0x1C17F10
	159 Move X19, X0
	160 Move X0, 0xEF9000
	161 Move X0, [X0+328]
	162 Call 0x1C17D08
	163 Move X1, X0
	164 Move X0, X19
	165 Move X2, X31
	166 Call ArgumentNullException..ctor, X0, X1
	167 Move X0, 0xED2000
	168 Move X0, [X0+1400]
	169 Call 0x1C17D08
	170 Call 0x1C17F10
	171 Move X19, X0
	172 Move X0, 0xEF9000
	173 Move X0, [X0+336]
	174 Call 0x1C17D08
	175 Move X20, X0
	176 Move X0, 0xEF9000
	177 Move X0, [X0+328]
	178 Call 0x1C17D08
	179 Move X2, X0
	180 Move X0, X19
	181 Move X1, X20
	182 Move X3, X31
	183 Call ArgumentException..ctor, X0, X1, X2
	184 Move X0, 0xEF9000
	185 Move X0, [X0+344]
	186 Call 0x1C17D08
	187 Move X1, X0
	188 Move X0, X19
	189 Call 0x1C17DEC

Method: System.String Replace(System.Char oldChar, System.Char newChar)

Disassembly:
	0x0322A6D0 MOV X0, X20
	0x0322A6D4 LDP X20, X19, [X31 + 0x60]
	0x0322A6D8 LDP X22, X21, [X31 + 0x50]
	0x0322A6DC LDP X24, X23, [X31 + 0x40]
	0x0322A6E0 LDP X26, X25, [X31 + 0x30]
	0x0322A6E4 LDP X28, X27, [X31 + 0x20]
	0x0322A6E8 LDP X29, X30, [X31 + 0x10]
	0x0322A6EC ADD X31, X31, 0x70
	0x0322A6F0 RET
	0x0322A6F4 BL 0x1C16F28
	0x0322A6F8 BL 0x1C16F20
	0x0322A6FC SUB X31, X31, 0x80
	0x0322A700 STP X29, X30, [X31 + 0x20]
	0x0322A704 STP X28, X27, [X31 + 0x30]
	0x0322A708 STP X26, X25, [X31 + 0x40]
	0x0322A70C STP X24, X23, [X31 + 0x50]
	0x0322A710 STP X22, X21, [X31 + 0x60]
	0x0322A714 STP X20, X19, [X31 + 0x70]
	0x0322A718 ADRP X19, 0x11B2000
	0x0322A71C STP X3, X4, [X31 + 0x10]
	0x0322A720 ADRP X21, 0xEC9000
	0x0322A724 LDRB W8, [X19 + 0x37B]
	0x0322A728 LDR X21, [X21 + 0xAC8]
	0x0322A72C MOV W26, W6
	0x0322A730 MOV W22, W5
	0x0322A734 MOV X27, X2
	0x0322A738 MOV X23, X1
	0x0322A73C MOV X20, X0
	0x0322A740 TBNZ X8, 0x0, 0x322A770
	0x0322A744 ADRP X0, 0xEF8000
	0x0322A748 LDR X0, [X0 + 0x1E0]
	0x0322A74C BL 0x1C16CF4
	0x0322A750 ADRP X0, 0xEF8000
	0x0322A754 LDR X0, [X0 + 0x1A0]
	0x0322A758 BL 0x1C16CF4
	0x0322A75C ADRP X0, 0xEC9000
	0x0322A760 LDR X0, [X0 + 0xAC8]
	0x0322A764 BL 0x1C16CF4
	0x0322A768 MOVZ W8, 0x1
	0x0322A76C STRB W8, [X19 + 0x37B]
	0x0322A770 LDR X0, [X21]
	0x0322A774 CMP W27, W26
	0x0322A778 CSINC W1, W26, W27, GE
	0x0322A77C STR W1, [X31 + 0xC]
	0x0322A780 BL 0x1C16D6C
	0x0322A784 SUBS W8, W27, 0x1
	0x0322A788 MOV X19, X0
	0x0322A78C B.LT 0x322A83C
	0x0322A790 STR W8, [X31 + 0x8]
	0x0322A794 ADRP X29, 0xEF8000
	0x0322A798 LDR X29, [X29 + 0x1E0]
	0x0322A79C MOV X28, X31
	0x0322A7A0 MOV W25, W31
	0x0322A7A4 MOV W24, W31

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 And W8, W1, 0xFFFF
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move X21, X0
	012 Move W0, [X21+16]
	013 Move W19, W2
	014 Move W20, W1
	015 Add X22, X21, 20
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W24, W0
	018 Move X8, X22
	019 NotImplemented "Instruction LDRH not yet implemented."
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Subtract W24, W24, 1
	022 Add X8, X8, 2
	023 Compare W0, 0
	024 JumpIfEqual {49}
	025 Call 0x1C8925C
	026 Compare X0, 0
	027 JumpIfEqual {59}
	028 Move W8, [X21+16]
	029 Move X23, X0
	030 Add X21, X0, 20
	031 Subtract W25, W8, W24
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W2, W25
	034 ShiftRight W2, 31
	035 And W2, W2, 0x3FFFFFFF
	036 Move X0, X21
	037 Move X1, X22
	038 Move X3, X31
	039 Call Buffer.Memmove, X0, X1, X2
	040 Add X8, X22, W25
	041 Add X9, X21, W25
	042 NotImplemented "Instruction LDRH not yet implemented."
	043 Subtract W24, W24, 1
	044 NotImplemented "Instruction CMP not yet implemented."
	045 NotImplemented "Instruction CSEL not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 NotImplemented "Instruction STRH not yet implemented."
	048 Move X21, X23
	049 Move X0, X21
	050 Move X20, [X31+48]
	051 Move X19, [X31+56]
	052 Move X22, [X31+32]
	053 Move X21, [X31+40]
	054 Move X24, [X31+16]
	055 Move X23, [X31+24]
	056 Move X30, [X31+64]
	057 Move X25, [X31+72]
	058 Return X0
	059 Call 0x1C17F20

Method: System.String Replace(System.String oldValue, System.String newValue)

Disassembly:
	0x0322A3BC LDR W8, [X19 + 0x8]
	0x0322A3C0 CMP W26, W8
	0x0322A3C4 B.CS 0x322A51C
	0x0322A3C8 LDR X8, [X19]
	0x0322A3CC ADD W9, W26, 0x1
	0x0322A3D0 STR W22, [X8, X26, LSL #2]
	0x0322A3D4 STR W9, [X19 + 0x18]
	0x0322A3D8 LDRSW X8, [X20 + 0x10]
	0x0322A3DC ADD X22, X22, 0x1
	0x0322A3E0 CMP X22, X8
	0x0322A3E4 B.LT 0x322A35C
	0x0322A3E8 B 0x322A4EC
	0x0322A3EC ADD X0, X31, 0x0
	0x0322A3F0 MOV X1, X21
	0x0322A3F4 MOV X2, X22
	0x0322A3F8 STP V0, V0, [X31]
	0x0322A3FC ADD X24, X31, 0x0
	0x0322A400 BL 0x322B490
	0x0322A404 LDR W8, [X20 + 0x10]
	0x0322A408 CMP W8, 0x1
	0x0322A40C B.LT 0x322A4EC
	0x0322A410 ADRP X27, 0xEF8000
	0x0322A414 LDR X27, [X27 + 0x168]
	0x0322A418 MOV X25, X31
	0x0322A41C ADD X26, X20, 0x14
	0x0322A420 CMP X25, W8, SXTW
	0x0322A424 B.LT 0x322A430
	0x0322A428 MOV X0, X31
	0x0322A42C BL 0x339D674
	0x0322A430 LDRH W2, [X26, X25, LSL #1]
	0x0322A434 AND W8, W2, 0xFF
	0x0322A438 UBFM W8, W8, 0x1E, 0x1D
	0x0322A43C AND X8, X8, 0x1F
	0x0322A440 LDR W8, [X8, X24, LSL]
	0x0322A444 UBFM W9, W2, 0x3, 0x7
	0x0322A448 LSRV W8, W8, W9
	0x0322A44C TBZ X8, 0x0, 0x322A4DC
	0x0322A450 UBFM X8, X2, 0x6, 0x3F
	0x0322A454 AND X8, X8, 0x1F
	0x0322A458 LDR W8, [X8, X24, LSL]
	0x0322A45C UBFM X9, X2, 0xB, 0x3F
	0x0322A460 LSRV W8, W8, W9
	0x0322A464 TBZ X8, 0x0, 0x322A4DC
	0x0322A468 MOV X0, X21
	0x0322A46C MOV X1, X22
	0x0322A470 MOV X3, X31
	0x0322A474 BL 0x337F7D8
	0x0322A478 TBZ X0, 0x0, 0x322A4DC
	0x0322A47C LDR X29, [X27]
	0x0322A480 LDRSW X28, [X19 + 0x18]
	0x0322A484 LDR X0, [X29 + 0x20]
	0x0322A488 LDRB W8, [X0 + 0x135]
	0x0322A48C TBNZ X8, 0x0, 0x322A494
	0x0322A490 BL 0x1C5C684
	0x0322A494 LDR W8, [X19 + 0x8]
	0x0322A498 CMP W28, W8
	0x0322A49C B.LT 0x322A4C4
	0x0322A4A0 LDR X0, [X29 + 0x20]
	0x0322A4A4 LDRB W8, [X0 + 0x135]
	0x0322A4A8 TBNZ X8, 0x0, 0x322A4B0
	0x0322A4AC BL 0x1C5C684
	0x0322A4B0 LDR X8, [X0 + 0xC0]
	0x0322A4B4 MOV X0, X19
	0x0322A4B8 LDR X1, [X8 + 0x28]
	0x0322A4BC BL 0x278D8D4
	0x0322A4C0 LDR W8, [X19 + 0x8]
	0x0322A4C4 CMP W28, W8
	0x0322A4C8 B.CS 0x322A51C
	0x0322A4CC LDR X8, [X19]
	0x0322A4D0 ADD W9, W28, 0x1
	0x0322A4D4 STR W25, [X8, X28, LSL #2]
	0x0322A4D8 STR W9, [X19 + 0x18]
	0x0322A4DC LDRSW X8, [X20 + 0x10]
	0x0322A4E0 ADD X25, X25, 0x1
	0x0322A4E4 CMP X25, X8
	0x0322A4E8 B.LT 0x322A420
	0x0322A4EC LDR X8, [X23 + 0x28]
	0x0322A4F0 LDR X9, [X31 + 0x28]
	0x0322A4F4 CMP X8, X9
	0x0322A4F8 B.NE 0x322A520
	0x0322A4FC LDP X20, X19, [X31 + 0x80]
	0x0322A500 LDP X22, X21, [X31 + 0x70]
	0x0322A504 LDP X24, X23, [X31 + 0x60]
	0x0322A508 LDP X26, X25, [X31 + 0x50]
	0x0322A50C LDP X28, X27, [X31 + 0x40]
	0x0322A510 LDP X29, X30, [X31 + 0x30]
	0x0322A514 ADD X31, X31, 0x90
	0x0322A518 RET
	0x0322A51C BL 0x1C16F28
	0x0322A520 BL 0x3EB1B20
	0x0322A524 SUB X31, X31, 0x70
	0x0322A528 STP X29, X30, [X31 + 0x10]
	0x0322A52C STP X28, X27, [X31 + 0x20]
	0x0322A530 STP X26, X25, [X31 + 0x30]
	0x0322A534 STP X24, X23, [X31 + 0x40]
	0x0322A538 STP X22, X21, [X31 + 0x50]
	0x0322A53C STP X20, X19, [X31 + 0x60]
	0x0322A540 ADRP X25, 0x11B2000
	0x0322A544 STP X3, X4, [X31]
	0x0322A548 ADRP X24, 0xEC9000
	0x0322A54C LDRB W8, [X25 + 0x37A]
	0x0322A550 LDR X24, [X24 + 0xAC8]
	0x0322A554 MOV W20, W6
	0x0322A558 MOV W21, W5
	0x0322A55C MOV X23, X2
	0x0322A560 MOV X22, X1
	0x0322A564 MOV X19, X0
	0x0322A568 TBNZ X8, 0x0, 0x322A5A4
	0x0322A56C ADRP X0, 0xEF8000
	0x0322A570 LDR X0, [X0 + 0x1E0]
	0x0322A574 BL 0x1C16CF4
	0x0322A578 ADRP X0, 0xEF8000
	0x0322A57C LDR X0, [X0 + 0x1A0]
	0x0322A580 BL 0x1C16CF4
	0x0322A584 ADRP X0, 0xEC9000
	0x0322A588 LDR X0, [X0 + 0xAC8]
	0x0322A58C BL 0x1C16CF4
	0x0322A590 ADRP X0, 0xECB000
	0x0322A594 LDR X0, [X0 + 0x278]
	0x0322A598 BL 0x1C16CF4
	0x0322A59C MOVZ W8, 0x1
	0x0322A5A0 STRB W8, [X25 + 0x37A]
	0x0322A5A4 SUB W8, W20, 0x1
	0x0322A5A8 LDR X0, [X24]
	0x0322A5AC CMP W8, W23
	0x0322A5B0 CSEL W24, W23, W8, GT
	0x0322A5B4 ADD W1, W24, 0x1
	0x0322A5B8 BL 0x1C16D6C
	0x0322A5BC CMP W24, 0x1
	0x0322A5C0 MOV X20, X0
	0x0322A5C4 B.LT 0x322A664
	0x0322A5C8 ADRP X26, 0xEF8000
	0x0322A5CC LDR X26, [X26 + 0x1E0]
	0x0322A5D0 MOV X25, X31
	0x0322A5D4 MOV W1, W31
	0x0322A5D8 AND X23, X23, 0x0
	0x0322A5DC MOV W27, W24
	0x0322A5E0 ADD X28, X20, 0x20
	0x0322A5E4 LDR W8, [X19 + 0x10]
	0x0322A5E8 CMP W1, W8
	0x0322A5EC B.GE 0x322A65C
	0x0322A5F0 CMP X23, X25
	0x0322A5F4 B.EQ 0x322A6F4
	0x0322A5F8 LDR W8, [X22, X25, LSL #2]
	0x0322A5FC MOV X0, X19
	0x0322A600 SUB W2, W8, W1
	0x0322A604 BL 0x3228DE4
	0x0322A608 CBZ X20, 0x322A6F8
	0x0322A60C LDR W8, [X20 + 0x18]
	0x0322A610 CMP X25, X8
	0x0322A614 B.CS 0x322A6F4
	0x0322A618 STR X0, [X28, X25, LSL #3]
	0x0322A61C LDR X1, [X26]
	0x0322A620 LDR W29, [X22, X25, LSL #2]
	0x0322A624 ADD X0, X31, 0x0
	0x0322A628 BL 0x25BF6EC
	0x0322A62C MOV W8, W21
	0x0322A630 TBNZ X0, 0x0, 0x322A648
	0x0322A634 LDR W8, [X31 + 0x8]
	0x0322A638 CMP X25, X8
	0x0322A63C B.CS 0x322A6F4
	0x0322A640 LDR X8, [X31]
	0x0322A644 LDR W8, [X8, X25, LSL #2]
	0x0322A648 ADD X25, X25, 0x1
	0x0322A64C CMP X27, X25
	0x0322A650 ADD W1, W8, W29
	0x0322A654 B.NE 0x322A5E4
	0x0322A658 MOV W25, W24
	0x0322A65C TBZ X24, 0x1F, 0x322A670
	0x0322A660 B 0x322A698
	0x0322A664 MOV W25, W31
	0x0322A668 MOV W1, W31
	0x0322A66C TBNZ X24, 0x1F, 0x322A698
	0x0322A670 LDR W8, [X19 + 0x10]
	0x0322A674 SUBS W2, W8, W1
	0x0322A678 B.LE 0x322A698
	0x0322A67C MOV X0, X19
	0x0322A680 BL 0x3228DE4
	0x0322A684 CBZ X20, 0x322A6F8
	0x0322A688 LDR W8, [X20 + 0x18]
	0x0322A68C CMP W25, W8
	0x0322A690 B.CC 0x322A6C8
	0x0322A694 B 0x322A6F4
	0x0322A698 CMP W25, W24
	0x0322A69C B.NE 0x322A6D0
	0x0322A6A0 CBZ X20, 0x322A6F8
	0x0322A6A4 LDR W8, [X20 + 0x18]
	0x0322A6A8 CMP W24, W8
	0x0322A6AC B.CS 0x322A6F4
	0x0322A6B0 ADRP X8, 0xECB000
	0x0322A6B4 LDR X8, [X8 + 0x278]
	0x0322A6B8 MOV W25, W24
	0x0322A6BC LDR X8, [X8]
	0x0322A6C0 LDR X8, [X8 + 0xB8]
	0x0322A6C4 LDR X0, [X8]
	0x0322A6C8 ADD X8, X20, W25, 0x3, SXTW
	0x0322A6CC STR X0, [X8 + 0x20]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Add X29, X31, 0
	014 Subtract X31, X31, 64
	015 NotImplemented "Instruction MRS not yet implemented."
	016 Move X8, [X20+40]
	017 Move X22, 0x11B3000
	018 Move X24, X2
	019 Move X21, X1
	020 Move [X29-8], X8
	021 Move W8, [X22+879]
	022 Move X19, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {50}
	027 Move X0, 0xEF9000
	028 Move X0, [X0+352]
	029 Call 0x1C17CF4
	030 Move X0, 0xECC000
	031 Move X0, [X0+632]
	032 Call 0x1C17CF4
	033 Move X0, 0xEF9000
	034 Move X0, [X0+360]
	035 Call 0x1C17CF4
	036 Move X0, 0xEF9000
	037 Move X0, [X0+368]
	038 Call 0x1C17CF4
	039 Move X0, 0xEF9000
	040 Move X0, [X0+376]
	041 Call 0x1C17CF4
	042 Move X0, 0xEF9000
	043 Move X0, [X0+384]
	044 Call 0x1C17CF4
	045 Move X0, 0xEF9000
	046 Move X0, [X0+392]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X22+879], W8
	050 NotImplemented "Instruction MOVI not yet implemented."
	051 Move [X29-48], V0
	052 Move [X29-40], V0
	053 Compare X21, 0
	054 JumpIfEqual {176}
	055 Move W8, [X21+16]
	056 Compare W8, 0
	057 JumpIfEqual {188}
	058 Move [X29-56], X20
	059 Move X23, 0xEF9000
	060 Move X23, [X23+384]
	061 Compare X24, 0
	062 JumpIfNotEqual {68}
	063 Move X8, 0xECC000
	064 Move X8, [X8+632]
	065 Move X8, [X8]
	066 Move X8, [X8+184]
	067 Move X24, [X8]
	068 Subtract X22, X31, 512
	069 Move [X29-64], X24
	070 Add X31, X22, 0
	071 Move W2, 512
	072 Move X0, X22
	073 Move W1, W31
	074 Call 0x3EB2B10
	075 Move X3, [X23]
	076 Subtract X0, X29, 48
	077 Move W2, 128
	078 Move X1, X22
	079 Call 0x278E6C4, X0, X1
	080 Move W9, [X19+16]
	081 Move W8, [X21+16]
	082 Subtract W22, W9, W8
	083 Move X25, 0xEF9000
	084 Move X25, [X25+360]
	085 Move W24, W31
	086 Add X26, X19, 20
	087 Add X27, X21, 20
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move X9, W24
	090 Move X28, X31
	091 Add X23, X26, X9
	092 NotImplemented "Instruction LDRH not yet implemented."
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move X0, X31
	095 Call ThrowHelper.ThrowIndexOutOfRangeException
	096 NotImplemented "Instruction LDRH not yet implemented."
	097 NotImplemented "Instruction CMP not yet implemented."
	098 NotImplemented "Instruction LDRSW not yet implemented."
	099 Add X28, X28, 1
	100 Add X23, X23, 2
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move X23, [X25]
	103 NotImplemented "Instruction LDURSW not yet implemented."
	104 Move X0, [X23+32]
	105 Move W8, [X0+309]
	106 Move TEMP, X8
	107 And TEMP, TEMP, 1
	108 Compare TEMP, 1
	109 JumpIfEqual {111}
	110 Call 0x1C5D684
	111 NotImplemented "Instruction LDUR not yet implemented."
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X0, [X23+32]
	114 Move W8, [X0+309]
	115 Move TEMP, X8
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfEqual {120}
	119 Call 0x1C5D684
	120 Move X8, [X0+192]
	121 Subtract X0, X29, 48
	122 Move X1, [X8+40]
	123 Call 0x278E8D4, X0
	124 NotImplemented "Instruction LDUR not yet implemented."
	125 NotImplemented "Instruction CMP not yet implemented."
	126 NotImplemented "Instruction LDUR not yet implemented."
	127 Add W9, W28, 1
	128 Move [X8], W24
	129 Move [X29-24], W9
	130 Move W8, [X21+16]
	131 Add W24, W8, W24
	132 Add W24, W24, 1
	133 NotImplemented "Instruction CMP not yet implemented."
	134 Move W8, [X21+16]
	135 NotImplemented "Instruction LDUR not yet implemented."
	136 Compare W8, 0
	137 JumpIfEqual {156}
	138 Move X8, 0xEF9000
	139 Move X8, [X8+368]
	140 Move X20, 0xEF9000
	141 Move W21, [X21+16]
	142 Subtract X0, X29, 48
	143 Move X1, [X8]
	144 Move X20, [X20+376]
	145 Call 0x278E764, X0
	146 NotImplemented "Instruction LDUR not yet implemented."
	147 Move X3, X0
	148 Move X4, X1
	149 Move X0, X19
	150 Move W1, W21
	151 Call String.ReplaceHelper, X0, X1, X2, X3
	152 Move X1, [X20]
	153 Move X19, X0
	154 Subtract X0, X29, 48
	155 Call 0x322FB74
	156 NotImplemented "Instruction LDUR not yet implemented."
	157 Move X8, [X8+40]
	158 NotImplemented "Instruction LDUR not yet implemented."
	159 NotImplemented "Instruction CMP not yet implemented."
	160 Move X0, X19
	161 Add X31, X29, 0
	162 Move X20, [X31+80]
	163 Move X19, [X31+88]
	164 Move X22, [X31+64]
	165 Move X21, [X31+72]
	166 Move X24, [X31+48]
	167 Move X23, [X31+56]
	168 Move X26, [X31+32]
	169 Move X25, [X31+40]
	170 Move X28, [X31+16]
	171 Move X27, [X31+24]
	172 Move X29, [X31+96]
	173 Move X30, [X31+104]
	174 Return X0
	175 Call 0x1C17F28
	176 Move X0, 0xECF000
	177 Move X0, [X0+1320]
	178 Call 0x1C17D08
	179 Call 0x1C17F10
	180 Move X19, X0
	181 Move X0, 0xEF9000
	182 Move X0, [X0+328]
	183 Call 0x1C17D08
	184 Move X1, X0
	185 Move X0, X19
	186 Move X2, X31
	187 Call ArgumentNullException..ctor, X0, X1
	188 Move X0, 0xED2000
	189 Move X0, [X0+1400]
	190 Call 0x1C17D08
	191 Call 0x1C17F10
	192 Move X19, X0
	193 Move X0, 0xEF9000
	194 Move X0, [X0+336]
	195 Call 0x1C17D08
	196 Move X20, X0
	197 Move X0, 0xEF9000
	198 Move X0, [X0+328]
	199 Call 0x1C17D08
	200 Move X2, X0
	201 Move X0, X19
	202 Move X1, X20
	203 Move X3, X31
	204 Call ArgumentException..ctor, X0, X1, X2
	205 Move X0, 0xEF9000
	206 Move X0, [X0+400]
	207 Call 0x1C17D08
	208 Move X1, X0
	209 Move X0, X19
	210 Call 0x1C17DEC
	211 Call 0x3EB2B20

Method: System.String ReplaceHelper(System.Int32 oldValueLength, System.String newValue, System.ReadOnlySpan`1<System.Int32> indices)

Disassembly:
	0x0322A7A8 SUB W26, W26, 0x1
	0x0322A7AC AND X27, X27, 0x0
	0x0322A7B0 LDR W8, [X20 + 0x10]
	0x0322A7B4 CMP W25, W8
	0x0322A7B8 B.GE 0x322A8B8
	0x0322A7BC LDR W21, [X23, X28, LSL #2]
	0x0322A7C0 SUB W2, W21, W25
	0x0322A7C4 CMP W2, 0x1
	0x0322A7C8 B.LT 0x322A7F8
	0x0322A7CC MOV X0, X20
	0x0322A7D0 MOV W1, W25
	0x0322A7D4 BL 0x3228DE4
	0x0322A7D8 CBZ X19, 0x322A984
	0x0322A7DC LDR W8, [X19 + 0x18]
	0x0322A7E0 CMP W24, W8
	0x0322A7E4 B.CS 0x322A980
	0x0322A7E8 ADD X8, X19, W24, 0x3, SXTW
	0x0322A7EC STR X0, [X8 + 0x20]
	0x0322A7F0 LDR W21, [X23, X28, LSL #2]
	0x0322A7F4 ADD W24, W24, 0x1
	0x0322A7F8 LDR X1, [X29]
	0x0322A7FC ADD X0, X31, 0x10
	0x0322A800 BL 0x25BF6EC
	0x0322A804 MOV W8, W22
	0x0322A808 TBNZ X0, 0x0, 0x322A820
	0x0322A80C LDR W8, [X31 + 0x18]
	0x0322A810 CMP X28, X8
	0x0322A814 B.CS 0x322A980
	0x0322A818 LDR X8, [X31 + 0x10]
	0x0322A81C LDR W8, [X8, X28, LSL #2]
	0x0322A820 CMP W24, W26
	0x0322A824 ADD W25, W8, W21
	0x0322A828 B.EQ 0x322A848
	0x0322A82C ADD X28, X28, 0x1
	0x0322A830 CMP X27, X28
	0x0322A834 B.NE 0x322A7B0
	0x0322A838 B 0x322A8B8
	0x0322A83C MOV W24, W31
	0x0322A840 MOV W25, W31
	0x0322A844 B 0x322A8B8
	0x0322A848 LDR W8, [X31 + 0x8]
	0x0322A84C CMP W8, W28
	0x0322A850 B.LE 0x322A8B4
	0x0322A854 MOV W9, W8
	0x0322A858 MOV X8, X31
	0x0322A85C ADD X24, X28, 0x1
	0x0322A860 SUB X28, X8, W9, UXTW
	0x0322A864 CMP X24, X27
	0x0322A868 B.CS 0x322A980
	0x0322A86C LDR W8, [X23, X24, LSL #2]
	0x0322A870 CMP W25, W8
	0x0322A874 B.NE 0x322A8B4
	0x0322A878 LDR X1, [X29]
	0x0322A87C ADD X0, X31, 0x10
	0x0322A880 BL 0x25BF6EC
	0x0322A884 MOV W8, W22
	0x0322A888 TBNZ X0, 0x0, 0x322A8A0
	0x0322A88C LDR W8, [X31 + 0x18]
	0x0322A890 CMP W8, W24
	0x0322A894 B.LS 0x322A980
	0x0322A898 LDR X8, [X31 + 0x10]
	0x0322A89C LDR W8, [X8, X24, LSL #2]
	0x0322A8A0 ADD X24, X24, 0x1
	0x0322A8A4 ADD X9, X28, X24
	0x0322A8A8 CMP X9, 0x1
	0x0322A8AC ADD W25, W8, W25
	0x0322A8B0 B.NE 0x322A864
	0x0322A8B4 MOV W24, W26
	0x0322A8B8 LDR W8, [X20 + 0x10]
	0x0322A8BC SUBS W2, W8, W25
	0x0322A8C0 B.LE 0x322A8EC
	0x0322A8C4 MOV X0, X20
	0x0322A8C8 MOV W1, W25
	0x0322A8CC BL 0x3228DE4
	0x0322A8D0 CBZ X19, 0x322A984
	0x0322A8D4 LDR W8, [X19 + 0x18]
	0x0322A8D8 CMP W24, W8
	0x0322A8DC B.CS 0x322A980
	0x0322A8E0 ADD X8, X19, W24, 0x3, SXTW
	0x0322A8E4 ADD W24, W24, 0x1
	0x0322A8E8 STR X0, [X8 + 0x20]
	0x0322A8EC LDR W8, [X31 + 0xC]
	0x0322A8F0 CMP W24, W8
	0x0322A8F4 B.EQ 0x322A95C
	0x0322A8F8 ADRP X8, 0xEC9000
	0x0322A8FC LDR X8, [X8 + 0xAC8]
	0x0322A900 MOV W1, W24
	0x0322A904 LDR X0, [X8]
	0x0322A908 BL 0x1C16D6C
	0x0322A90C CMP W24, 0x1
	0x0322A910 B.LT 0x322A958
	0x0322A914 CBZ X19, 0x322A984
	0x0322A918 LDR W9, [X19 + 0x18]
	0x0322A91C MOV X8, X31
	0x0322A920 MOV W10, W24
	0x0322A924 ADD X11, X0, 0x20
	0x0322A928 ADD X12, X19, 0x20
	0x0322A92C CMP X8, X9
	0x0322A930 B.CS 0x322A980
	0x0322A934 CBZ X0, 0x322A984
	0x0322A938 LDR W13, [X0 + 0x18]
	0x0322A93C CMP X8, X13
	0x0322A940 B.CS 0x322A980
	0x0322A944 LDR X13, [X12, X8, LSL #3]
	0x0322A948 STR X13, [X11, X8, LSL #3]
	0x0322A94C ADD X8, X8, 0x1
	0x0322A950 CMP X10, X8
	0x0322A954 B.NE 0x322A92C
	0x0322A958 MOV X19, X0
	0x0322A95C MOV X0, X19
	0x0322A960 LDP X20, X19, [X31 + 0x70]
	0x0322A964 LDP X22, X21, [X31 + 0x60]
	0x0322A968 LDP X24, X23, [X31 + 0x50]
	0x0322A96C LDP X26, X25, [X31 + 0x40]
	0x0322A970 LDP X28, X27, [X31 + 0x30]
	0x0322A974 LDP X29, X30, [X31 + 0x20]
	0x0322A978 ADD X31, X31, 0x80
	0x0322A97C RET
	0x0322A980 BL 0x1C16F28
	0x0322A984 BL 0x1C16F20
	0x0322A988 STR X30, [X31 - 0x30]!
	0x0322A98C STP X22, X21, [X31 + 0x10]
	0x0322A990 STP X20, X19, [X31 + 0x20]
	0x0322A994 ADRP X22, 0x11B2000
	0x0322A998 LDRB W8, [X22 + 0x377]
	0x0322A99C MOV W19, W2
	0x0322A9A0 MOV X21, X1
	0x0322A9A4 MOV X20, X0
	0x0322A9A8 TBZ X8, 0x0, 0x322A9D8
	0x0322A9AC CBZ X21, 0x322A9F0
	0x0322A9B0 CBZ X20, 0x322AA08
	0x0322A9B4 MOV X0, X20
	0x0322A9B8 MOV X1, X21
	0x0322A9BC MOV W4, W19
	0x0322A9C0 LDP X20, X19, [X31 + 0x20]
	0x0322A9C4 LDP X22, X21, [X31 + 0x10]
	0x0322A9C8 MOVN W3, 0x80000000
	0x0322A9CC MOV X2, X31
	0x0322A9D0 LDR X30, [X31], #0x30
	0x0322A9D4 B 0x322AA0C
	0x0322A9D8 ADRP X0, 0xECB000
	0x0322A9DC LDR X0, [X0 + 0x278]
	0x0322A9E0 BL 0x1C16CF4
	0x0322A9E4 MOVZ W8, 0x1
	0x0322A9E8 STRB W8, [X22 + 0x377]
	0x0322A9EC CBNZ X21, 0x322A9B0
	0x0322A9F0 ADRP X8, 0xECB000
	0x0322A9F4 LDR X8, [X8 + 0x278]
	0x0322A9F8 LDR X8, [X8]
	0x0322A9FC LDR X8, [X8 + 0xB8]
	0x0322AA00 LDR X21, [X8]
	0x0322AA04 CBNZ X20, 0x322A9B4
	0x0322AA08 BL 0x1C16F20
	0x0322AA0C STP X29, X30, [X31 - 0x50]!
	0x0322AA10 STR X25, [X31 + 0x10]
	0x0322AA14 STP X24, X23, [X31 + 0x20]
	0x0322AA18 STP X22, X21, [X31 + 0x30]
	0x0322AA1C STP X20, X19, [X31 + 0x40]
	0x0322AA20 ADD X29, X31, 0x0
	0x0322AA24 SUB X31, X31, 0x60
	0x0322AA28 MRS X24, 0xC000
	0x0322AA2C LDR X8, [X24 + 0x28]
	0x0322AA30 ADRP X25, 0x11B2000
	0x0322AA34 MOV W21, W4
	0x0322AA38 MOV W20, W3
	0x0322AA3C STUR X8, [X29 - 0x8]
	0x0322AA40 LDRB W8, [X25 + 0x378]
	0x0322AA44 MOV X22, X2
	0x0322AA48 MOV X23, X1
	0x0322AA4C MOV X19, X0
	0x0322AA50 TBNZ X8, 0x0, 0x322AABC
	0x0322AA54 ADRP X0, 0xEF8000
	0x0322AA58 LDR X0, [X0 + 0x1B8]
	0x0322AA5C BL 0x1C16CF4
	0x0322AA60 ADRP X0, 0xEF8000
	0x0322AA64 LDR X0, [X0 + 0x1A0]
	0x0322AA68 BL 0x1C16CF4
	0x0322AA6C ADRP X0, 0xEF8000
	0x0322AA70 LDR X0, [X0 + 0x1D8]
	0x0322AA74 BL 0x1C16CF4
	0x0322AA78 ADRP X0, 0xEF8000
	0x0322AA7C LDR X0, [X0 + 0x160]
	0x0322AA80 BL 0x1C16CF4
	0x0322AA84 ADRP X0, 0xEC9000
	0x0322AA88 LDR X0, [X0 + 0xAC8]
	0x0322AA8C BL 0x1C16CF4
	0x0322AA90 ADRP X0, 0xEF8000
	0x0322AA94 LDR X0, [X0 + 0x170]
	0x0322AA98 BL 0x1C16CF4
	0x0322AA9C ADRP X0, 0xEF8000
	0x0322AAA0 LDR X0, [X0 + 0x178]
	0x0322AAA4 BL 0x1C16CF4
	0x0322AAA8 ADRP X0, 0xEF8000
	0x0322AAAC LDR X0, [X0 + 0x180]
	0x0322AAB0 BL 0x1C16CF4
	0x0322AAB4 MOVZ W8, 0x1
	0x0322AAB8 STRB W8, [X25 + 0x378]
	0x0322AABC MOVI V0.2D, 0x0
	0x0322AAC0 STP V0, V0, [X29 - 0x30]
	0x0322AAC4 STP V0, V0, [X29 - 0x50]
	0x0322AAC8 TBNZ X20, 0x1F, 0x322AD18
	0x0322AACC CMP W21, 0x2
	0x0322AAD0 B.CS 0x322AD74
	0x0322AAD4 CBZ X23, 0x322AB7C
	0x0322AAD8 CBZ W20, 0x322AB20
	0x0322AADC CMP W21, 0x1
	0x0322AAE0 B.NE 0x322AAEC
	0x0322AAE4 LDR W8, [X19 + 0x10]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+48], X29
	003 Move [X31+56], X30
	004 Move [X31+64], X28
	005 Move [X31+72], X27
	006 Move [X31+80], X26
	007 Move [X31+88], X25
	008 Move [X31+96], X24
	009 Move [X31+104], X23
	010 Move [X31+112], X22
	011 Move [X31+120], X21
	012 Move [X31+128], X20
	013 Move [X31+136], X19
	014 Move X19, 0x11B3000
	015 Move W8, [X19+880]
	016 Move X25, X4
	017 Move X21, X3
	018 Move X22, X2
	019 Move X20, X0
	020 Move [X31+28], W1
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {39}
	025 Move X0, 0xEF9000
	026 Move X0, [X0+408]
	027 Call 0x1C17CF4
	028 Move X0, 0xEF9000
	029 Move X0, [X0+416]
	030 Call 0x1C17CF4
	031 Move X0, 0xEF9000
	032 Move X0, [X0+424]
	033 Call 0x1C17CF4
	034 Move X0, 0xEF3000
	035 Move X0, [X0+1656]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X19+880], W8
	039 Move [X31+32], X31
	040 Move [X31+40], X31
	041 Compare X22, 0
	042 JumpIfEqual {218}
	043 Move W8, [X22+16]
	044 Move W10, [X31+28]
	045 NotImplemented "Instruction LDRSW not yet implemented."
	046 Subtract W8, W8, W10
	047 NotImplemented "Instruction SMADDL not yet implemented."
	048 Add X0, X8, X9
	049 Move W8, 0x80000000
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Call 0x1C8925C
	052 Compare X0, 0
	053 JumpIfEqual {218}
	054 Move W28, [X0+16]
	055 Move X19, X0
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move [X31+16], X20
	058 Move W24, W31
	059 Move W27, W31
	060 Add X8, X20, 20
	061 Add X26, X22, 20
	062 And X20, X25, 0
	063 Move [X31+8], X8
	064 Move W29, [X21]
	065 Subtract W23, W29, W24
	066 Move X8, 0x11B0000
	067 Move W8, [X8+1889]
	068 Compare W8, 0
	069 JumpIfNotEqual {76}
	070 Move X0, 0xEF1000
	071 Move X0, [X0+656]
	072 Call 0x1C17CF4
	073 Move W8, 1
	074 Move X9, 0x11B0000
	075 Move [X9+1889], W8
	076 Move X8, [X31+16]
	077 Move W8, [X8+16]
	078 Subtract W8, W8, W24
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move W0, 24
	081 Move X1, X31
	082 Call ThrowHelper.ThrowArgumentOutOfRangeException, X0
	083 Move X10, 0xEF9000
	084 Move X8, [X31+8]
	085 Move X10, [X10+424]
	086 Move W9, W23
	087 Subtract W25, W28, W27
	088 Add X8, X8, W24
	089 Move X24, [X10]
	090 Move [X31+32], X8
	091 Move [X31+40], X9
	092 Move X0, X31
	093 Call ThrowHelper.ThrowArgumentOutOfRangeException
	094 Move X0, [X24+32]
	095 Move W8, [X0+309]
	096 Move TEMP, X8
	097 And TEMP, TEMP, 1
	098 Compare TEMP, 1
	099 JumpIfEqual {101}
	100 Call 0x1C5D684
	101 Move X8, 0xEF9000
	102 Move X8, [X8+408]
	103 Add X0, X31, 32
	104 Move X2, X25
	105 Move X3, [X8]
	106 Add X8, X19, W27
	107 Add X1, X8, 20
	108 Call ReadOnlySpan`1<Char>.CopyTo, X0, X1
	109 Add W27, W23, W27
	110 Move X8, 0x11B3000
	111 Move W8, [X8+939]
	112 Compare W8, 0
	113 JumpIfNotEqual {120}
	114 Move X0, 0xEF1000
	115 Move X0, [X0+656]
	116 Call 0x1C17CF4
	117 Move X8, 0x11B3000
	118 Move W9, 1
	119 Move [X8+939], W9
	120 Move X9, 0xEF9000
	121 Move W8, [X22+16]
	122 Move X9, [X9+424]
	123 Subtract W25, W28, W27
	124 Move [X31+32], X26
	125 Move [X31+40], X8
	126 Move X23, [X9]
	127 Move X0, X31
	128 Call ThrowHelper.ThrowArgumentOutOfRangeException
	129 Move X0, [X23+32]
	130 Move W8, [X0+309]
	131 Move TEMP, X8
	132 And TEMP, TEMP, 1
	133 Compare TEMP, 1
	134 JumpIfEqual {136}
	135 Call 0x1C5D684
	136 Move X8, 0xEF9000
	137 Move X8, [X8+408]
	138 Add X0, X31, 32
	139 Move X2, X25
	140 Move X3, [X8]
	141 Move W8, [X31+28]
	142 Add W24, W29, W8
	143 Add X8, X19, W27
	144 Add X1, X8, 20
	145 Call ReadOnlySpan`1<Char>.CopyTo, X0, X1
	146 Move W8, [X22+16]
	147 Subtract X20, X20, 1
	148 Add X21, X21, 4
	149 Add W27, W8, W27
	150 Move W27, W31
	151 Move W24, W31
	152 Move X20, 0x11B3000
	153 Move W8, [X20+940]
	154 Compare W8, 0
	155 JumpIfNotEqual {161}
	156 Move X0, 0xEF1000
	157 Move X0, [X0+656]
	158 Call 0x1C17CF4
	159 Move W8, 1
	160 Move [X20+940], W8
	161 Move X20, [X31+16]
	162 Compare X20, 0
	163 JumpIfEqual {173}
	164 Move W9, [X20+16]
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Move W0, 24
	167 Move X1, X31
	168 Call ThrowHelper.ThrowArgumentOutOfRangeException, X0
	169 Move W9, [X20+16]
	170 Add X8, X20, W24
	171 Add X8, X8, 20
	172 Subtract W9, W9, W24
	173 Compare W24, 0
	174 JumpIfEqual {178}
	175 Move W0, 24
	176 Move X1, X31
	177 Call ThrowHelper.ThrowArgumentOutOfRangeException, X0
	178 Move X8, X31
	179 Move X9, X31
	180 Move X10, 0xEF9000
	181 Move X10, [X10+424]
	182 Subtract W20, W28, W27
	183 Move [X31+32], X8
	184 Move [X31+40], X9
	185 Move X21, [X10]
	186 Move X0, X31
	187 Call ThrowHelper.ThrowArgumentOutOfRangeException
	188 Move X0, [X21+32]
	189 Move W8, [X0+309]
	190 Move TEMP, X8
	191 And TEMP, TEMP, 1
	192 Compare TEMP, 1
	193 JumpIfEqual {195}
	194 Call 0x1C5D684
	195 Move X8, 0xEF9000
	196 Move X8, [X8+408]
	197 Add X0, X31, 32
	198 Move X2, X20
	199 Move X3, [X8]
	200 Add X8, X19, W27
	201 Add X1, X8, 20
	202 Call ReadOnlySpan`1<Char>.CopyTo, X0, X1
	203 Move X0, X19
	204 Move X20, [X31+128]
	205 Move X19, [X31+136]
	206 Move X22, [X31+112]
	207 Move X21, [X31+120]
	208 Move X24, [X31+96]
	209 Move X23, [X31+104]
	210 Move X26, [X31+80]
	211 Move X25, [X31+88]
	212 Move X28, [X31+64]
	213 Move X27, [X31+72]
	214 Move X29, [X31+48]
	215 Move X30, [X31+56]
	216 Add X31, X31, 144
	217 Return X0
	218 Call 0x1C17F20
	219 Move X0, 0xED3000
	220 Move X0, [X0+3512]
	221 Call 0x1C17D08
	222 Call 0x1C17F10
	223 Move X1, X31
	224 Move X19, X0
	225 Call OutOfMemoryException..ctor, X0
	226 Move X0, 0xEF9000
	227 Move X0, [X0+432]
	228 Call 0x1C17D08
	229 Move X1, X0
	230 Move X0, X19
	231 Call 0x1C17DEC

Method: System.String[] Split(System.Char separator, System.StringSplitOptions options = 0)

Disassembly:
	0x0322AAE8 CBZ W8, 0x322AB20
	0x0322AAEC CMP W20, 0x1
	0x0322AAF0 B.NE 0x322ABC0
	0x0322AAF4 ADRP X8, 0xEC9000
	0x0322AAF8 LDR X8, [X8 + 0xAC8]
	0x0322AAFC MOVZ W1, 0x1
	0x0322AB00 LDR X0, [X8]
	0x0322AB04 BL 0x1C16D6C
	0x0322AB08 CBZ X0, 0x322ADE4
	0x0322AB0C LDR W8, [X0 + 0x18]
	0x0322AB10 MOV X20, X0
	0x0322AB14 CBZ W8, 0x322ADE8
	0x0322AB18 STR X19, [X20 + 0x20]
	0x0322AB1C B 0x322ABE4
	0x0322AB20 ADRP X8, 0xEF8000
	0x0322AB24 LDR X8, [X8 + 0x1B8]
	0x0322AB28 LDR X19, [X8]
	0x0322AB2C LDR X8, [X19 + 0x38]
	0x0322AB30 CBNZ X8, 0x322AB40
	0x0322AB34 MOV X0, X19
	0x0322AB38 BL 0x1C5C6E0
	0x0322AB3C LDR X8, [X19 + 0x38]
	0x0322AB40 LDR X0, [X8 + 0x10]
	0x0322AB44 LDRB W8, [X0 + 0x135]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11B3000
	007 Move W8, [X21+881]
	008 Move W19, W2
	009 Move X20, X0
	010 NotImplemented "Instruction STRH not yet implemented."
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xEF1000
	016 Move X0, [X0+656]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+881], W8
	020 Add X1, X31, 12
	021 Move W2, 1
	022 Move TEMP, 0x80000000
	023 Not TEMP
	024 Move W3, TEMP
	025 Move X0, X20
	026 Move W4, W19
	027 Call String.SplitInternal, X0, X1, X2, X3
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Move X21, [X31+24]
	032 Add X31, X31, 48
	033 Return X0

Method: System.String[] Split(System.Char[] separator)

Disassembly:
	0x0322AE68 LDR X0, [X0 + 0x160]
	0x0322AE6C BL 0x1C16CF4
	0x0322AE70 ADRP X0, 0xEC9000
	0x0322AE74 LDR X0, [X0 + 0xAC8]
	0x0322AE78 BL 0x1C16CF4
	0x0322AE7C ADRP X0, 0xEF8000
	0x0322AE80 LDR X0, [X0 + 0x170]
	0x0322AE84 BL 0x1C16CF4
	0x0322AE88 ADRP X0, 0xEF8000
	0x0322AE8C LDR X0, [X0 + 0x178]
	0x0322AE90 BL 0x1C16CF4
	0x0322AE94 ADRP X0, 0xEF8000
	0x0322AE98 LDR X0, [X0 + 0x180]
	0x0322AE9C BL 0x1C16CF4
	0x0322AEA0 MOVZ W8, 0x1
	0x0322AEA4 STRB W8, [X23 + 0x379]
	0x0322AEA8 MOVI V0.2D, 0x0
	0x0322AEAC SUB X23, X31, 0x200
	0x0322AEB0 STP V0, V0, [X29 - 0x30]
	0x0322AEB4 ADD X31, X23, 0x0
	0x0322AEB8 MOVZ W2, 0x200
	0x0322AEBC MOV X0, X23
	0x0322AEC0 MOV W1, W31
	0x0322AEC4 BL 0x3EB1B10
	0x0322AEC8 LDR X3, [X26]
	0x0322AECC SUB X0, X29, 0x30
	0x0322AED0 MOVZ W2, 0x80
	0x0322AED4 MOV X1, X23
	0x0322AED8 BL 0x278D6C4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11B3000
	007 Move X22, 0xEF9000
	008 Move W8, [X21+882]
	009 Move X22, [X22+472]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEF9000
	017 Move X0, [X0+472]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+882], W8
	021 Move X1, [X22]
	022 Move X0, X20
	023 Call ReadOnlySpan`1<Char>.op_Implicit, X0
	024 Move X2, X0
	025 Move X0, X19
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X22, [X31+16]
	029 Move X21, [X31+24]
	030 Move X4, X1
	031 Move TEMP, 0x80000000
	032 Not TEMP
	033 Move W3, TEMP
	034 Move X1, X2
	035 Move X2, X4
	036 Move W4, W31
	037 Move X30, [X31+48]
	038 Call String.SplitInternal, X0, X1, X2, X3
	039 Return X0

Method: System.String[] Split(System.Char[] separator, System.Int32 count)

Disassembly:
	0x0322AEDC SUB X2, X29, 0x30
	0x0322AEE0 MOV X0, X19
	0x0322AEE4 MOV X1, X22
	0x0322AEE8 BL 0x322B28C
	0x0322AEEC LDR X1, [X25]
	0x0322AEF0 SUB X0, X29, 0x30
	0x0322AEF4 BL 0x278D764
	0x0322AEF8 MOV X2, X1
	0x0322AEFC CBZ W2, 0x322AF38
	0x0322AF00 CBZ X22, 0x322AFA8
	0x0322AF04 CMP W21, 0x1
	0x0322AF08 ADRP X21, 0xEF8000
	0x0322AF0C LDR W5, [X22 + 0x10]
	0x0322AF10 LDR X21, [X21 + 0x178]
	0x0322AF14 MOV X3, X0
	0x0322AF18 MOV X0, X19
	0x0322AF1C MOV X1, X3
	0x0322AF20 MOV X3, X31
	0x0322AF24 MOV X4, X31
	0x0322AF28 MOV W6, W20
	0x0322AF2C B.NE 0x322AF64
	0x0322AF30 BL 0x322A6FC
	0x0322AF34 B 0x322AF68
	0x0322AF38 ADRP X8, 0xEC9000
	0x0322AF3C LDR X8, [X8 + 0xAC8]
	0x0322AF40 MOVZ W1, 0x1
	0x0322AF44 LDR X0, [X8]
	0x0322AF48 BL 0x1C16D6C
	0x0322AF4C CBZ X0, 0x322AFA8
	0x0322AF50 LDR W8, [X0 + 0x18]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x11B3000
	008 Move X23, 0xEF9000
	009 Move W8, [X22+883]
	010 Move X23, [X23+472]
	011 Move W19, W2
	012 Move X21, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xEF9000
	019 Move X0, [X0+472]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+883], W8
	023 Move X1, [X23]
	024 Move X0, X21
	025 Call ReadOnlySpan`1<Char>.op_Implicit, X0
	026 Move X2, X0
	027 Move X3, X1
	028 Move X0, X20
	029 Move X1, X2
	030 Move X2, X3
	031 Move W3, W19
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move W4, W31
	037 Move X30, [X31+48]
	038 Move X23, [X31+56]
	039 Call String.SplitInternal, X0, X1, X2, X3
	040 Return X0

Method: System.String[] Split(System.Char[] separator, System.StringSplitOptions options)

Disassembly:
	0x0322AF54 MOV X20, X0
	0x0322AF58 CBZ W8, 0x322AFAC
	0x0322AF5C STR X19, [X20 + 0x20]
	0x0322AF60 B 0x322AF78
	0x0322AF64 BL 0x322A524
	0x0322AF68 LDR X1, [X21]
	0x0322AF6C MOV X20, X0
	0x0322AF70 SUB X0, X29, 0x30
	0x0322AF74 BL 0x322EB74
	0x0322AF78 LDR X8, [X24 + 0x28]
	0x0322AF7C LDUR X9, [X29 - 0x8]
	0x0322AF80 CMP X8, X9
	0x0322AF84 B.NE 0x322AFB0
	0x0322AF88 MOV X0, X20
	0x0322AF8C ADD X31, X29, 0x0
	0x0322AF90 LDP X20, X19, [X31 + 0x40]
	0x0322AF94 LDP X22, X21, [X31 + 0x30]
	0x0322AF98 LDP X24, X23, [X31 + 0x20]
	0x0322AF9C LDP X26, X25, [X31 + 0x10]
	0x0322AFA0 LDP X29, X30, [X31], #0x50
	0x0322AFA4 RET
	0x0322AFA8 BL 0x1C16F20
	0x0322AFAC BL 0x1C16F28
	0x0322AFB0 BL 0x3EB1B20
	0x0322AFB4 SUB X31, X31, 0x80
	0x0322AFB8 STP X29, X30, [X31 + 0x20]
	0x0322AFBC STP X28, X27, [X31 + 0x30]
	0x0322AFC0 STP X26, X25, [X31 + 0x40]
	0x0322AFC4 STP X24, X23, [X31 + 0x50]
	0x0322AFC8 STP X22, X21, [X31 + 0x60]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x11B3000
	008 Move X23, 0xEF9000
	009 Move W8, [X22+884]
	010 Move X23, [X23+472]
	011 Move W19, W2
	012 Move X21, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xEF9000
	019 Move X0, [X0+472]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+884], W8
	023 Move X1, [X23]
	024 Move X0, X21
	025 Call ReadOnlySpan`1<Char>.op_Implicit, X0
	026 Move X2, X0
	027 Move X4, X1
	028 Move X0, X20
	029 Move X1, X2
	030 Move X2, X4
	031 Move W4, W19
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move TEMP, 0x80000000
	037 Not TEMP
	038 Move W3, TEMP
	039 Move X30, [X31+48]
	040 Move X23, [X31+56]
	041 Call String.SplitInternal, X0, X1, X2, X3
	042 Return X0

Method: System.String[] Split(System.Char[] separator, System.Int32 count, System.StringSplitOptions options)

Disassembly:
	0x0322AFCC STP X20, X19, [X31 + 0x70]
	0x0322AFD0 ADRP X19, 0x11B2000
	0x0322AFD4 LDRB W8, [X19 + 0x37E]
	0x0322AFD8 MOV X21, X1
	0x0322AFDC MOV X22, X0
	0x0322AFE0 STP X3, X2, [X31 + 0x8]
	0x0322AFE4 TBNZ X8, 0x0, 0x322B008
	0x0322AFE8 ADRP X0, 0xEF0000
	0x0322AFEC LDR X0, [X0 + 0x2D0]
	0x0322AFF0 BL 0x1C16CF4
	0x0322AFF4 ADRP X0, 0xEF8000
	0x0322AFF8 LDR X0, [X0 + 0x168]
	0x0322AFFC BL 0x1C16CF4
	0x0322B000 MOVZ W8, 0x1
	0x0322B004 STRB W8, [X19 + 0x37E]
	0x0322B008 CBZ X21, 0x322B288
	0x0322B00C LDR W8, [X22 + 0x10]
	0x0322B010 CMP W8, 0x1
	0x0322B014 B.LT 0x322B264
	0x0322B018 ADD X8, X22, 0x14
	0x0322B01C MOV W28, W31
	0x0322B020 STR X8, [X31 + 0x18]
	0x0322B024 ADD X19, X21, 0x20
	0x0322B028 LDR X8, [X21 + 0x18]
	0x0322B02C CMP W8, 0x1
	0x0322B030 B.LT 0x322B154
	0x0322B034 LDR X9, [X31 + 0x18]
	0x0322B038 MOV X27, X31
	0x0322B03C AND X8, X8, 0x0
	0x0322B040 MOV W29, W28
	0x0322B044 ADD X25, X9, W28, 0x1, SXTW
	0x0322B048 CMP X27, W8, UXTW
	0x0322B04C B.CS 0x322B284

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x11B3000
	009 Move X24, 0xEF9000
	010 Move W8, [X23+885]
	011 Move X24, [X24+472]
	012 Move W19, W3
	013 Move W20, W2
	014 Move X22, X1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xEF8000
	021 Move X0, [X0+472]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+885], W8
	025 Move X1, [X24]
	026 Move X0, X22
	027 Call ReadOnlySpan`1<Char>.op_Implicit, X0
	028 Move X2, X0
	029 Move X3, X1
	030 Move X0, X21
	031 Move X1, X2
	032 Move X2, X3
	033 Move W3, W20
	034 Move W4, W19
	035 Move X20, [X31+48]
	036 Move X19, [X31+56]
	037 Move X22, [X31+32]
	038 Move X21, [X31+40]
	039 Move X24, [X31+16]
	040 Move X23, [X31+24]
	041 Move X30, [X31+64]
	042 Call String.SplitInternal, X0, X1, X2, X3
	043 Return X0

Method: System.String[] SplitInternal(System.ReadOnlySpan`1<System.Char> separators, System.Int32 count, System.StringSplitOptions options)

Disassembly:
	0x0322AB48 TBNZ X8, 0x0, 0x322AB50
	0x0322AB4C BL 0x1C5C684
	0x0322AB50 LDR W8, [X0 + 0xE0]
	0x0322AB54 CBNZ W8, 0x322AB5C
	0x0322AB58 BL 0x1C16DFC
	0x0322AB5C LDR X8, [X19 + 0x38]
	0x0322AB60 LDR X0, [X8 + 0x10]
	0x0322AB64 LDRB W8, [X0 + 0x135]
	0x0322AB68 TBNZ X8, 0x0, 0x322AB70
	0x0322AB6C BL 0x1C5C684
	0x0322AB70 LDR X8, [X0 + 0xB8]
	0x0322AB74 LDR X20, [X8]
	0x0322AB78 B 0x322ABE4
	0x0322AB7C CBZ X22, 0x322AB88
	0x0322AB80 LDR X8, [X22 + 0x18]
	0x0322AB84 CBNZ X8, 0x322AAD8
	0x0322AB88 ADRP X8, 0xEF8000
	0x0322AB8C LDR X8, [X8 + 0x1D8]
	0x0322AB90 MOV X0, X31
	0x0322AB94 LDR X1, [X8]
	0x0322AB98 BL 0x25BF134
	0x0322AB9C MOV X2, X0
	0x0322ABA0 MOV X3, X1
	0x0322ABA4 MOV X0, X19
	0x0322ABA8 MOV X1, X2
	0x0322ABAC MOV X2, X3
	0x0322ABB0 MOV W3, W20
	0x0322ABB4 MOV W4, W21
	0x0322ABB8 BL 0x3229B48
	0x0322ABBC B 0x322ABE0
	0x0322ABC0 CBZ X23, 0x322AC14
	0x0322ABC4 LDR W8, [X23 + 0x10]
	0x0322ABC8 CBZ W8, 0x322AAF4
	0x0322ABCC MOV X0, X19
	0x0322ABD0 MOV X1, X23
	0x0322ABD4 MOV W2, W20
	0x0322ABD8 MOV W3, W21
	0x0322ABDC BL 0x322AE04
	0x0322ABE0 MOV X20, X0
	0x0322ABE4 LDR X8, [X24 + 0x28]
	0x0322ABE8 LDUR X9, [X29 - 0x8]
	0x0322ABEC CMP X8, X9
	0x0322ABF0 B.NE 0x322ADEC
	0x0322ABF4 MOV X0, X20
	0x0322ABF8 ADD X31, X29, 0x0
	0x0322ABFC LDP X20, X19, [X31 + 0x40]
	0x0322AC00 LDP X22, X21, [X31 + 0x30]
	0x0322AC04 LDP X24, X23, [X31 + 0x20]
	0x0322AC08 LDR X25, [X31 + 0x10]
	0x0322AC0C LDP X29, X30, [X31], #0x50
	0x0322AC10 RET
	0x0322AC14 SUB X23, X31, 0x200
	0x0322AC18 ADD X31, X23, 0x0
	0x0322AC1C MOVZ W2, 0x200
	0x0322AC20 MOV X0, X23
	0x0322AC24 MOV W1, W31
	0x0322AC28 BL 0x3EB1B10
	0x0322AC2C ADRP X25, 0xEF8000
	0x0322AC30 LDR X25, [X25 + 0x180]
	0x0322AC34 SUB X0, X29, 0x30
	0x0322AC38 MOVZ W2, 0x80
	0x0322AC3C MOV X1, X23
	0x0322AC40 LDR X3, [X25]
	0x0322AC44 BL 0x278D6C4
	0x0322AC48 SUB X23, X31, 0x200
	0x0322AC4C ADD X31, X23, 0x0
	0x0322AC50 MOVZ W2, 0x200
	0x0322AC54 MOV X0, X23
	0x0322AC58 MOV W1, W31
	0x0322AC5C BL 0x3EB1B10
	0x0322AC60 LDR X3, [X25]
	0x0322AC64 SUB X0, X29, 0x50
	0x0322AC68 MOVZ W2, 0x80
	0x0322AC6C MOV X1, X23
	0x0322AC70 BL 0x278D6C4
	0x0322AC74 SUB X2, X29, 0x30
	0x0322AC78 SUB X3, X29, 0x50
	0x0322AC7C MOV X0, X19
	0x0322AC80 MOV X1, X22
	0x0322AC84 BL 0x322AFB4
	0x0322AC88 ADRP X23, 0xEF8000
	0x0322AC8C LDR X23, [X23 + 0x170]
	0x0322AC90 SUB X0, X29, 0x30
	0x0322AC94 LDR X1, [X23]
	0x0322AC98 BL 0x278D764
	0x0322AC9C LDR X8, [X23]
	0x0322ACA0 MOV X22, X0
	0x0322ACA4 MOV X23, X1
	0x0322ACA8 SUB X0, X29, 0x50
	0x0322ACAC MOV X1, X8
	0x0322ACB0 BL 0x278D764
	0x0322ACB4 CBZ W23, 0x322AAF4
	0x0322ACB8 MOV X3, X0
	0x0322ACBC MOV X4, X1
	0x0322ACC0 MOV X0, X19
	0x0322ACC4 MOV X1, X22
	0x0322ACC8 MOV X2, X23
	0x0322ACCC CMP W21, 0x1
	0x0322ACD0 B.NE 0x322ACE4
	0x0322ACD4 MOV W5, W31
	0x0322ACD8 MOV W6, W20
	0x0322ACDC BL 0x322A6FC
	0x0322ACE0 B 0x322ACF0
	0x0322ACE4 MOV W5, W31
	0x0322ACE8 MOV W6, W20
	0x0322ACEC BL 0x322A524
	0x0322ACF0 ADRP X19, 0xEF8000
	0x0322ACF4 LDR X19, [X19 + 0x178]
	0x0322ACF8 MOV X20, X0
	0x0322ACFC SUB X0, X29, 0x30
	0x0322AD00 LDR X1, [X19]
	0x0322AD04 BL 0x322EB74
	0x0322AD08 LDR X1, [X19]
	0x0322AD0C SUB X0, X29, 0x50
	0x0322AD10 BL 0x322EB74
	0x0322AD14 B 0x322ABE4
	0x0322AD18 ADRP X0, 0xED1000
	0x0322AD1C LDR X0, [X0 + 0x760]
	0x0322AD20 BL 0x1C16D08
	0x0322AD24 BL 0x1C16F10
	0x0322AD28 MOV X19, X0
	0x0322AD2C ADRP X0, 0xEF1000
	0x0322AD30 LDR X0, [X0 + 0x648]
	0x0322AD34 BL 0x1C16D08
	0x0322AD38 MOV X20, X0
	0x0322AD3C ADRP X0, 0xEF8000
	0x0322AD40 LDR X0, [X0 + 0x30]
	0x0322AD44 BL 0x1C16D08
	0x0322AD48 MOV X2, X0
	0x0322AD4C MOV X0, X19
	0x0322AD50 MOV X1, X20
	0x0322AD54 MOV X3, X31
	0x0322AD58 BL 0x3311888
	0x0322AD5C ADRP X0, 0xEF8000
	0x0322AD60 LDR X0, [X0 + 0x1E8]
	0x0322AD64 BL 0x1C16D08
	0x0322AD68 MOV X1, X0
	0x0322AD6C MOV X0, X19
	0x0322AD70 BL 0x1C16DEC
	0x0322AD74 STUR W21, [X29 - 0x54]
	0x0322AD78 ADRP X0, 0xEC9000
	0x0322AD7C LDR X0, [X0 + 0x758]
	0x0322AD80 BL 0x1C16D08
	0x0322AD84 SUB X1, X29, 0x54
	0x0322AD88 BL 0x1C16E04
	0x0322AD8C MOV X19, X0
	0x0322AD90 ADRP X0, 0xEF8000
	0x0322AD94 LDR X0, [X0 + 0x1D0]
	0x0322AD98 BL 0x1C16D08
	0x0322AD9C MOV X1, X19
	0x0322ADA0 MOV X2, X31
	0x0322ADA4 BL 0x32094D4
	0x0322ADA8 MOV X19, X0
	0x0322ADAC ADRP X0, 0xED1000
	0x0322ADB0 LDR X0, [X0 + 0x578]
	0x0322ADB4 BL 0x1C16D08
	0x0322ADB8 BL 0x1C16F10
	0x0322ADBC MOV X1, X19
	0x0322ADC0 MOV X2, X31
	0x0322ADC4 MOV X20, X0
	0x0322ADC8 BL 0x3314A68
	0x0322ADCC ADRP X0, 0xEF8000
	0x0322ADD0 LDR X0, [X0 + 0x1E8]
	0x0322ADD4 BL 0x1C16D08
	0x0322ADD8 MOV X1, X0
	0x0322ADDC MOV X0, X20
	0x0322ADE0 BL 0x1C16DEC
	0x0322ADE4 BL 0x1C16F20
	0x0322ADE8 BL 0x1C16F28
	0x0322ADEC BL 0x3EB1B20
	0x0322ADF0 MOV W4, W2
	0x0322ADF4 MOV X2, X1
	0x0322ADF8 MOVN W3, 0x80000000
	0x0322ADFC MOV X1, X31
	0x0322AE00 B 0x322AA0C
	0x0322AE04 STP X29, X30, [X31 - 0x50]!
	0x0322AE08 STP X26, X25, [X31 + 0x10]
	0x0322AE0C STP X24, X23, [X31 + 0x20]
	0x0322AE10 STP X22, X21, [X31 + 0x30]
	0x0322AE14 STP X20, X19, [X31 + 0x40]
	0x0322AE18 ADD X29, X31, 0x0
	0x0322AE1C SUB X31, X31, 0x30
	0x0322AE20 MRS X24, 0xC000
	0x0322AE24 LDR X8, [X24 + 0x28]
	0x0322AE28 ADRP X23, 0x11B2000
	0x0322AE2C ADRP X26, 0xEF8000
	0x0322AE30 ADRP X25, 0xEF8000
	0x0322AE34 STUR X8, [X29 - 0x8]
	0x0322AE38 LDRB W8, [X23 + 0x379]
	0x0322AE3C LDR X26, [X26 + 0x180]
	0x0322AE40 LDR X25, [X25 + 0x170]
	0x0322AE44 MOV W21, W3
	0x0322AE48 MOV W20, W2
	0x0322AE4C MOV X22, X1
	0x0322AE50 MOV X19, X0
	0x0322AE54 TBNZ X8, 0x0, 0x322AEA8
	0x0322AE58 ADRP X0, 0xEF8000
	0x0322AE5C LDR X0, [X0 + 0x1A0]
	0x0322AE60 BL 0x1C16CF4
	0x0322AE64 ADRP X0, 0xEF8000

ISIL:
	001 Move [X31-80], X29
	002 Move [X31-72], X30
	003 Move [X31+16], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Add X29, X31, 0
	011 Subtract X31, X31, 64
	012 NotImplemented "Instruction MRS not yet implemented."
	013 Move X8, [X25+40]
	014 Move X24, 0x11B3000
	015 Move W21, W4
	016 Move W20, W3
	017 Move [X29-8], X8
	018 Move W8, [X24+886]
	019 Move X22, X2
	020 Move X23, X1
	021 Move X19, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {49}
	026 Move X0, 0xEF9000
	027 Move X0, [X0+440]
	028 Call 0x1C17CF4
	029 Move X0, 0xEF9000
	030 Move X0, [X0+416]
	031 Call 0x1C17CF4
	032 Move X0, 0xEF9000
	033 Move X0, [X0+352]
	034 Call 0x1C17CF4
	035 Move X0, 0xECA000
	036 Move X0, [X0+2760]
	037 Call 0x1C17CF4
	038 Move X0, 0xEF9000
	039 Move X0, [X0+368]
	040 Call 0x1C17CF4
	041 Move X0, 0xEF9000
	042 Move X0, [X0+376]
	043 Call 0x1C17CF4
	044 Move X0, 0xEF9000
	045 Move X0, [X0+384]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X24+886], W8
	049 NotImplemented "Instruction MOVI not yet implemented."
	050 Move [X29-48], V0
	051 Move [X29-40], V0
	052 Move TEMP, X20
	053 And TEMP, TEMP, -2147483648
	054 Compare TEMP, -2147483648
	055 JumpIfEqual {167}
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Compare W20, 0
	058 JumpIfEqual {100}
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move W8, [X19+16]
	061 Compare W8, 0
	062 JumpIfEqual {100}
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Subtract X24, X31, 512
	065 Add X31, X24, 0
	066 Move W2, 512
	067 Move X0, X24
	068 Move W1, W31
	069 Call 0x3EB2B10
	070 Move X8, 0xEF9000
	071 Move X8, [X8+384]
	072 Subtract X0, X29, 48
	073 Move W2, 128
	074 Move X1, X24
	075 Move X3, [X8]
	076 Call 0x278E6C4, X0, X1
	077 Subtract X3, X29, 48
	078 Move X0, X19
	079 Move X1, X23
	080 Move X2, X22
	081 Call String.MakeSeparatorList, X0, X1, X2
	082 Move X8, 0xEF9000
	083 Move X8, [X8+368]
	084 Subtract X0, X29, 48
	085 Move X1, [X8]
	086 Call 0x278E764, X0
	087 Move X8, X1
	088 Compare W8, 0
	089 JumpIfEqual {130}
	090 Move X2, X0
	091 Move W5, 1
	092 Move X0, X19
	093 Move X1, X2
	094 Move X2, X8
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move X3, X31
	097 Move X4, X31
	098 Move W6, W20
	099 Call String.SplitOmitEmptyEntries, X0, X1, X2, X3, X4
	100 Move X8, 0xEF9000
	101 Move X8, [X8+440]
	102 Move X19, [X8]
	103 Move X8, [X19+56]
	104 Compare X8, 0
	105 JumpIfNotEqual {109}
	106 Move X0, X19
	107 Call 0x1C5D6E0
	108 Move X8, [X19+56]
	109 Move X0, [X8+16]
	110 Move W8, [X0+309]
	111 Move TEMP, X8
	112 And TEMP, TEMP, 1
	113 Compare TEMP, 1
	114 JumpIfEqual {116}
	115 Call 0x1C5D684
	116 Move W8, [X0+224]
	117 Compare W8, 0
	118 JumpIfNotEqual {120}
	119 Call 0x1C17DFC
	120 Move X8, [X19+56]
	121 Move X0, [X8+16]
	122 Move W8, [X0+309]
	123 Move TEMP, X8
	124 And TEMP, TEMP, 1
	125 Compare TEMP, 1
	126 JumpIfEqual {128}
	127 Call 0x1C5D684
	128 Move X8, [X0+184]
	129 Move X20, [X8]
	130 Move X8, 0xECA000
	131 Move X8, [X8+2760]
	132 Move W1, 1
	133 Move X0, [X8]
	134 Call 0x1C17D6C
	135 Compare X0, 0
	136 JumpIfEqual {218}
	137 Move W8, [X0+24]
	138 Move X20, X0
	139 Compare W8, 0
	140 JumpIfEqual {219}
	141 Move [X20+32], X19
	142 Move X3, X31
	143 Move X4, X31
	144 Move W6, W20
	145 Call String.SplitKeepEmptyEntries, X0, X1, X2, X3, X4
	146 Move X8, 0xEF9000
	147 Move X8, [X8+376]
	148 Move X20, X0
	149 Subtract X0, X29, 48
	150 Move X1, [X8]
	151 Call 0x322FB74
	152 Move X8, [X25+40]
	153 NotImplemented "Instruction LDUR not yet implemented."
	154 NotImplemented "Instruction CMP not yet implemented."
	155 Move X0, X20
	156 Add X31, X29, 0
	157 Move X20, [X31+64]
	158 Move X19, [X31+72]
	159 Move X22, [X31+48]
	160 Move X21, [X31+56]
	161 Move X24, [X31+32]
	162 Move X23, [X31+40]
	163 Move X25, [X31+16]
	164 Move X29, [X31+80]
	165 Move X30, [X31+88]
	166 Return X0
	167 Move X0, 0xED2000
	168 Move X0, [X0+1888]
	169 Call 0x1C17D08
	170 Call 0x1C17F10
	171 Move X19, X0
	172 Move X0, 0xEF2000
	173 Move X0, [X0+1608]
	174 Call 0x1C17D08
	175 Move X20, X0
	176 Move X0, 0xEF9000
	177 Move X0, [X0+48]
	178 Call 0x1C17D08
	179 Move X2, X0
	180 Move X0, X19
	181 Move X1, X20
	182 Move X3, X31
	183 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	184 Move X0, 0xEF9000
	185 Move X0, [X0+448]
	186 Call 0x1C17D08
	187 Move X1, X0
	188 Move X0, X19
	189 Call 0x1C17DEC
	190 Move [X29-52], W21
	191 Move X0, 0xEF9000
	192 Move X0, [X0+456]
	193 Call 0x1C17D08
	194 Subtract X1, X29, 52
	195 Call 0x1C17E04
	196 Move X19, X0
	197 Move X0, 0xEF9000
	198 Move X0, [X0+464]
	199 Call 0x1C17D08
	200 Move X1, X19
	201 Move X2, X31
	202 Call SR.Format, X0, X1
	203 Move X19, X0
	204 Move X0, 0xED2000
	205 Move X0, [X0+1400]
	206 Call 0x1C17D08
	207 Call 0x1C17F10
	208 Move X1, X19
	209 Move X2, X31
	210 Move X20, X0
	211 Call ArgumentException..ctor, X0, X1
	212 Move X0, 0xEF9000
	213 Move X0, [X0+448]
	214 Call 0x1C17D08
	215 Move X1, X0
	216 Move X0, X20
	217 Call 0x1C17DEC
	218 Call 0x1C17F20
	219 Call 0x1C17F28
	220 Call 0x3EB2B20

Method: System.String[] Split(System.String separator, System.StringSplitOptions options = 0)

Disassembly:
	0x0322B988 CMP X20, X8
	0x0322B98C B.LT 0x322B94C
	0x0322B990 CBZ W21, 0x322B9F8
	0x0322B994 LDR W24, [X19 + 0x10]
	0x0322B998 ADD X25, X19, 0x14
	0x0322B99C SUB W8, W24, 0x1
	0x0322B9A0 MOV W21, W8
	0x0322B9A4 CMP W8, W20
	0x0322B9A8 B.LT 0x322B9FC
	0x0322B9AC LDRSW X8, [X19 + 0x10]
	0x0322B9B0 MOV W9, W21
	0x0322B9B4 CMP X9, X8
	0x0322B9B8 B.LT 0x322B9C4
	0x0322B9BC MOV X0, X31
	0x0322B9C0 BL 0x339D674
	0x0322B9C4 LDR X0, [X23]
	0x0322B9C8 LDRH W22, [X25, W21, SXTW]
	0x0322B9CC LDR W8, [X0 + 0xE0]
	0x0322B9D0 CBNZ W8, 0x322B9D8
	0x0322B9D4 BL 0x1C16DFC
	0x0322B9D8 MOV W0, W22
	0x0322B9DC MOV X1, X31
	0x0322B9E0 BL 0x3317FCC
	0x0322B9E4 SUB W8, W21, 0x1
	0x0322B9E8 TBNZ X0, 0x0, 0x322B9A0
	0x0322B9EC B 0x322B9FC
	0x0322B9F0 MOV W20, W31
	0x0322B9F4 CBNZ W21, 0x322B994
	0x0322B9F8 SUB W21, W24, 0x1
	0x0322B9FC MOV X0, X19
	0x0322BA00 MOV W1, W20
	0x0322BA04 MOV W2, W21
	0x0322BA08 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11B2000
	007 Move W8, [X22+887]
	008 Move W19, W2
	009 Move X21, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {31}
	015 Compare X21, 0
	016 JumpIfEqual {38}
	017 Compare X20, 0
	018 JumpIfEqual {45}
	019 Move X0, X20
	020 Move X1, X21
	021 Move W4, W19
	022 Move X20, [X31+32]
	023 Move X19, [X31+40]
	024 Move X22, [X31+16]
	025 Move X21, [X31+24]
	026 Move TEMP, 0x80000000
	027 Not TEMP
	028 Move W3, TEMP
	029 Move X2, X31
	030 Move X30, [X31+48]
	031 Move X0, 0xECB000
	032 Move X0, [X0+632]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X22+887], W8
	036 Compare X21, 0
	037 JumpIfNotEqual {17}
	038 Move X8, 0xECB000
	039 Move X8, [X8+632]
	040 Move X8, [X8]
	041 Move X8, [X8+184]
	042 Move X21, [X8]
	043 Compare X20, 0
	044 JumpIfNotEqual {19}
	045 Call 0x1C17F20

Method: System.String[] Split(System.String[] separator, System.StringSplitOptions options)

Disassembly:
	0x0322BDF0 ADDS W31, W0, 0x1
	0x0322BDF4 CSINV W0, W8, W31, NE
	0x0322BDF8 LDR X30, [X31], #0x20
	0x0322BDFC RET
	0x0322BE00 ADRP X0, 0xED0000

ISIL:
	001 Move W4, W2
	002 Move X2, X1
	003 Move TEMP, 0x80000000
	004 Not TEMP
	005 Move W3, TEMP
	006 Move X1, X31
	007 Call String.SplitInternal, X0, X1, X2, X3, X4
	008 Return X0

Method: System.String[] SplitInternal(System.String separator, System.String[] separators, System.Int32 count, System.StringSplitOptions options)

Disassembly:
	0x0322BA0C LDP X22, X21, [X31 + 0x20]
	0x0322BA10 LDP X24, X23, [X31 + 0x10]
	0x0322BA14 LDP X30, X25, [X31], #0x40
	0x0322BA18 B 0x322BC8C
	0x0322BA1C STR X30, [X31 - 0x10]!
	0x0322BA20 STRH W1, [X31 + 0xC]
	0x0322BA24 ADD X1, X31, 0xC
	0x0322BA28 MOVZ W2, 0x1
	0x0322BA2C MOVZ W3, 0x2
	0x0322BA30 BL 0x322BA3C
	0x0322BA34 LDR X30, [X31], #0x10
	0x0322BA38 RET
	0x0322BA3C STP X30, X27, [X31 - 0x50]!
	0x0322BA40 STP X26, X25, [X31 + 0x10]
	0x0322BA44 STP X24, X23, [X31 + 0x20]
	0x0322BA48 STP X22, X21, [X31 + 0x30]
	0x0322BA4C STP X20, X19, [X31 + 0x40]
	0x0322BA50 LDR W25, [X0 + 0x10]
	0x0322BA54 MOV W21, W2
	0x0322BA58 MOV X22, X1
	0x0322BA5C MOV X19, X0
	0x0322BA60 CMP W3, 0x1
	0x0322BA64 SUB W20, W25, 0x1
	0x0322BA68 B.NE 0x322BA74
	0x0322BA6C MOV W23, W31
	0x0322BA70 B 0x322BB00
	0x0322BA74 MOV W24, W3
	0x0322BA78 CMP W25, 0x1
	0x0322BA7C B.LT 0x322BAF0
	0x0322BA80 MOV X23, X31
	0x0322BA84 ADD X26, X19, 0x14
	0x0322BA88 MOV W27, W21
	0x0322BA8C CMP X23, W25, SXTW
	0x0322BA90 B.LT 0x322BA9C
	0x0322BA94 MOV X0, X31
	0x0322BA98 BL 0x339D674
	0x0322BA9C CMP W21, 0x1
	0x0322BAA0 B.LT 0x322BAD0
	0x0322BAA4 LDRH W9, [X26, X23, LSL #1]
	0x0322BAA8 MOV X8, X31
	0x0322BAAC MOV X10, X22
	0x0322BAB0 LDRH W11, [X10]
	0x0322BAB4 CMP W11, W9
	0x0322BAB8 B.EQ 0x322BAD4
	0x0322BABC ADD X8, X8, 0x1
	0x0322BAC0 CMP X27, X8
	0x0322BAC4 ADD X10, X10, 0x2
	0x0322BAC8 B.NE 0x322BAB0
	0x0322BACC B 0x322BAF4
	0x0322BAD0 MOV W8, W31
	0x0322BAD4 CMP W8, W21
	0x0322BAD8 B.EQ 0x322BAF4
	0x0322BADC LDRSW X25, [X19 + 0x10]
	0x0322BAE0 ADD X23, X23, 0x1
	0x0322BAE4 CMP X23, X25
	0x0322BAE8 B.LT 0x322BA8C
	0x0322BAEC B 0x322BAF4
	0x0322BAF0 MOV W23, W31
	0x0322BAF4 CBZ W24, 0x322BB7C
	0x0322BAF8 LDR W25, [X19 + 0x10]
	0x0322BAFC SUB W20, W25, 0x1
	0x0322BB00 SUB W8, W23, 0x1
	0x0322BB04 CMP W23, W20
	0x0322BB08 ADD X24, X19, 0x14
	0x0322BB0C CSEL W20, W20, W8, GT
	0x0322BB10 MOV W26, W21
	0x0322BB14 SUB W25, W25, 0x1
	0x0322BB18 CMP W25, W23
	0x0322BB1C B.LT 0x322BB7C
	0x0322BB20 LDRSW X8, [X19 + 0x10]
	0x0322BB24 MOV W9, W25
	0x0322BB28 CMP X9, X8
	0x0322BB2C B.LT 0x322BB38
	0x0322BB30 MOV X0, X31
	0x0322BB34 BL 0x339D674
	0x0322BB38 CMP W21, 0x1
	0x0322BB3C B.LT 0x322BB6C
	0x0322BB40 LDRH W9, [X24, W25, SXTW]
	0x0322BB44 MOV X8, X31
	0x0322BB48 MOV X10, X22
	0x0322BB4C LDRH W11, [X10]
	0x0322BB50 CMP W11, W9
	0x0322BB54 B.EQ 0x322BB70
	0x0322BB58 ADD X8, X8, 0x1
	0x0322BB5C CMP X26, X8
	0x0322BB60 ADD X10, X10, 0x2
	0x0322BB64 B.NE 0x322BB4C
	0x0322BB68 B 0x322BB78
	0x0322BB6C MOV W8, W31
	0x0322BB70 CMP W8, W21
	0x0322BB74 B.NE 0x322BB14
	0x0322BB78 MOV W20, W25
	0x0322BB7C MOV X0, X19
	0x0322BB80 MOV W1, W23
	0x0322BB84 MOV W2, W20
	0x0322BB88 LDP X20, X19, [X31 + 0x40]
	0x0322BB8C LDP X22, X21, [X31 + 0x30]
	0x0322BB90 LDP X24, X23, [X31 + 0x20]
	0x0322BB94 LDP X26, X25, [X31 + 0x10]
	0x0322BB98 LDP X30, X27, [X31], #0x50
	0x0322BB9C B 0x322BC8C
	0x0322BBA0 STR X30, [X31 - 0x10]!
	0x0322BBA4 CBZ X1, 0x322BBC4
	0x0322BBA8 LDR X2, [X1 + 0x18]
	0x0322BBAC CBZ X2, 0x322BBC4
	0x0322BBB0 CBZ W2, 0x322BBD0
	0x0322BBB4 ADD X1, X1, 0x20
	0x0322BBB8 MOVZ W3, 0x2
	0x0322BBBC LDR X30, [X31], #0x10
	0x0322BBC0 B 0x322BA3C
	0x0322BBC4 MOVZ W1, 0x2
	0x0322BBC8 LDR X30, [X31], #0x10
	0x0322BBCC B 0x322B8E4
	0x0322BBD0 BL 0x1C16F28
	0x0322BBD4 MOV W1, W31
	0x0322BBD8 B 0x322B8E4
	0x0322BBDC STR X30, [X31 - 0x10]!
	0x0322BBE0 STRH W1, [X31 + 0xC]
	0x0322BBE4 ADD X1, X31, 0xC
	0x0322BBE8 MOVZ W2, 0x1
	0x0322BBEC MOV W3, W31
	0x0322BBF0 BL 0x322BA3C
	0x0322BBF4 LDR X30, [X31], #0x10
	0x0322BBF8 RET
	0x0322BBFC STR X30, [X31 - 0x10]!
	0x0322BC00 CBZ X1, 0x322BC20
	0x0322BC04 LDR X2, [X1 + 0x18]
	0x0322BC08 CBZ X2, 0x322BC20
	0x0322BC0C CBZ W2, 0x322BC2C
	0x0322BC10 ADD X1, X1, 0x20
	0x0322BC14 MOV W3, W31
	0x0322BC18 LDR X30, [X31], #0x10
	0x0322BC1C B 0x322BA3C
	0x0322BC20 MOV W1, W31
	0x0322BC24 LDR X30, [X31], #0x10
	0x0322BC28 B 0x322B8E4
	0x0322BC2C BL 0x1C16F28
	0x0322BC30 MOVZ W1, 0x1
	0x0322BC34 B 0x322B8E4
	0x0322BC38 STR X30, [X31 - 0x10]!
	0x0322BC3C STRH W1, [X31 + 0xC]
	0x0322BC40 ADD X1, X31, 0xC
	0x0322BC44 MOVZ W2, 0x1
	0x0322BC48 MOVZ W3, 0x1
	0x0322BC4C BL 0x322BA3C
	0x0322BC50 LDR X30, [X31], #0x10
	0x0322BC54 RET
	0x0322BC58 STR X30, [X31 - 0x10]!
	0x0322BC5C CBZ X1, 0x322BC7C
	0x0322BC60 LDR X2, [X1 + 0x18]
	0x0322BC64 CBZ X2, 0x322BC7C
	0x0322BC68 CBZ W2, 0x322BC88
	0x0322BC6C ADD X1, X1, 0x20
	0x0322BC70 MOVZ W3, 0x1
	0x0322BC74 LDR X30, [X31], #0x10
	0x0322BC78 B 0x322BA3C
	0x0322BC7C MOVZ W1, 0x1
	0x0322BC80 LDR X30, [X31], #0x10
	0x0322BC84 B 0x322B8E4
	0x0322BC88 BL 0x1C16F28
	0x0322BC8C STR X30, [X31 - 0x30]!
	0x0322BC90 STP X22, X21, [X31 + 0x10]
	0x0322BC94 STP X20, X19, [X31 + 0x20]
	0x0322BC98 ADRP X22, 0x11B1000
	0x0322BC9C LDRB W8, [X22 + 0x385]
	0x0322BCA0 MOV W21, W2
	0x0322BCA4 MOV W20, W1
	0x0322BCA8 MOV X19, X0
	0x0322BCAC TBNZ X8, 0x0, 0x322BCC4
	0x0322BCB0 ADRP X0, 0xECA000
	0x0322BCB4 LDR X0, [X0 + 0x278]
	0x0322BCB8 BL 0x1C16CF4
	0x0322BCBC MOVZ W8, 0x1
	0x0322BCC0 STRB W8, [X22 + 0x385]
	0x0322BCC4 LDR W8, [X19 + 0x10]
	0x0322BCC8 SUB W9, W21, W20
	0x0322BCCC ADD W2, W9, 0x1
	0x0322BCD0 CMP W2, W8
	0x0322BCD4 B.EQ 0x322BD08
	0x0322BCD8 CBZ W2, 0x322BCF4
	0x0322BCDC MOV X0, X19
	0x0322BCE0 MOV W1, W20
	0x0322BCE4 LDP X20, X19, [X31 + 0x20]
	0x0322BCE8 LDP X22, X21, [X31 + 0x10]
	0x0322BCEC LDR X30, [X31], #0x30
	0x0322BCF0 B 0x322B58C
	0x0322BCF4 ADRP X8, 0xECA000
	0x0322BCF8 LDR X8, [X8 + 0x278]
	0x0322BCFC LDR X8, [X8]
	0x0322BD00 LDR X8, [X8 + 0xB8]
	0x0322BD04 LDR X19, [X8]
	0x0322BD08 MOV X0, X19
	0x0322BD0C LDP X20, X19, [X31 + 0x20]
	0x0322BD10 LDP X22, X21, [X31 + 0x10]
	0x0322BD14 LDR X30, [X31], #0x30
	0x0322BD18 RET
	0x0322BD1C STR X30, [X31 - 0x10]!
	0x0322BD20 LDR W3, [X0 + 0x10]
	0x0322BD24 MOVZ W4, 0x4
	0x0322BD28 MOV W2, W31
	0x0322BD2C BL 0x322C320
	0x0322BD30 ORN W8, W31, W0, 0x0
	0x0322BD34 UBFM W0, W8, 0x1F, 0x1F
	0x0322BD38 LDR X30, [X31], #0x10
	0x0322BD3C RET
	0x0322BD40 LDR W3, [X0 + 0x10]
	0x0322BD44 MOV W4, W2
	0x0322BD48 MOV W2, W31
	0x0322BD4C B 0x322C320
	0x0322BD50 STR X30, [X31 - 0x10]!
	0x0322BD54 LDR W3, [X0 + 0x10]
	0x0322BD58 MOV W4, W2
	0x0322BD5C MOV W2, W31
	0x0322BD60 BL 0x322C320
	0x0322BD64 ORN W8, W31, W0, 0x0
	0x0322BD68 UBFM W0, W8, 0x1F, 0x1F
	0x0322BD6C LDR X30, [X31], #0x10
	0x0322BD70 RET
	0x0322BD74 STR X30, [X31 - 0x10]!
	0x0322BD78 LDR W2, [X0 + 0x10]
	0x0322BD7C ADD X0, X0, 0x14
	0x0322BD80 MOV X3, X31
	0x0322BD84 BL 0x3391718
	0x0322BD88 ADDS W31, W0, 0x1
	0x0322BD8C CSET W0, NE
	0x0322BD90 LDR X30, [X31], #0x10
	0x0322BD94 RET
	0x0322BD98 LDR W2, [X0 + 0x10]
	0x0322BD9C ADD X0, X0, 0x14
	0x0322BDA0 MOV X3, X31
	0x0322BDA4 B 0x3391718
	0x0322BDA8 LDR W8, [X0 + 0x10]
	0x0322BDAC SUB W3, W8, W2
	0x0322BDB0 B 0x322BDB4
	0x0322BDB4 STR X30, [X31 - 0x20]!
	0x0322BDB8 STP X20, X19, [X31 + 0x10]
	0x0322BDBC LDR W8, [X0 + 0x10]
	0x0322BDC0 SUBS W8, W8, W2
	0x0322BDC4 B.CC 0x322BE00
	0x0322BDC8 CMP W8, W3
	0x0322BDCC B.CC 0x322BE30
	0x0322BDD0 ADD X8, X0, W2, 0x1, SXTW
	0x0322BDD4 MOV W19, W2
	0x0322BDD8 ADD X0, X8, 0x14
	0x0322BDDC MOV W2, W3
	0x0322BDE0 MOV X3, X31
	0x0322BDE4 BL 0x3391718
	0x0322BDE8 ADD W8, W0, W19
	0x0322BDEC LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-80], X29
	002 Move [X31-72], X30
	003 Move [X31+16], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Add X29, X31, 0
	011 Subtract X31, X31, 96
	012 NotImplemented "Instruction MRS not yet implemented."
	013 Move X8, [X24+40]
	014 Move X25, 0x11B2000
	015 Move W21, W4
	016 Move W20, W3
	017 Move [X29-8], X8
	018 Move W8, [X25+888]
	019 Move X22, X2
	020 Move X23, X1
	021 Move X19, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {52}
	026 Move X0, 0xEF8000
	027 Move X0, [X0+440]
	028 Call 0x1C17CF4
	029 Move X0, 0xEF8000
	030 Move X0, [X0+416]
	031 Call 0x1C17CF4
	032 Move X0, 0xEF8000
	033 Move X0, [X0+472]
	034 Call 0x1C17CF4
	035 Move X0, 0xEF8000
	036 Move X0, [X0+352]
	037 Call 0x1C17CF4
	038 Move X0, 0xEC9000
	039 Move X0, [X0+2760]
	040 Call 0x1C17CF4
	041 Move X0, 0xEF8000
	042 Move X0, [X0+368]
	043 Call 0x1C17CF4
	044 Move X0, 0xEF8000
	045 Move X0, [X0+376]
	046 Call 0x1C17CF4
	047 Move X0, 0xEF8000
	048 Move X0, [X0+384]
	049 Call 0x1C17CF4
	050 Move W8, 1
	051 Move [X25+888], W8
	052 NotImplemented "Instruction MOVI not yet implemented."
	053 Move [X29-48], V0
	054 Move [X29-40], V0
	055 Move [X29-80], V0
	056 Move [X29-72], V0
	057 Move TEMP, X20
	058 And TEMP, TEMP, -2147483648
	059 Compare TEMP, -2147483648
	060 JumpIfEqual {220}
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Compare X23, 0
	063 JumpIfEqual {113}
	064 Compare W20, 0
	065 JumpIfEqual {83}
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move W8, [X19+16]
	068 Compare W8, 0
	069 JumpIfEqual {83}
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X8, 0xEC9000
	072 Move X8, [X8+2760]
	073 Move W1, 1
	074 Move X0, [X8]
	075 Call 0x1C17D6C
	076 Compare X0, 0
	077 JumpIfEqual {271}
	078 Move W8, [X0+24]
	079 Move X20, X0
	080 Compare W8, 0
	081 JumpIfEqual {272}
	082 Move [X20+32], X19
	083 Move X8, 0xEF8000
	084 Move X8, [X8+440]
	085 Move X19, [X8]
	086 Move X8, [X19+56]
	087 Compare X8, 0
	088 JumpIfNotEqual {92}
	089 Move X0, X19
	090 Call 0x1C5D6E0
	091 Move X8, [X19+56]
	092 Move X0, [X8+16]
	093 Move W8, [X0+309]
	094 Move TEMP, X8
	095 And TEMP, TEMP, 1
	096 Compare TEMP, 1
	097 JumpIfEqual {99}
	098 Call 0x1C5D684
	099 Move W8, [X0+224]
	100 Compare W8, 0
	101 JumpIfNotEqual {103}
	102 Call 0x1C17DFC
	103 Move X8, [X19+56]
	104 Move X0, [X8+16]
	105 Move W8, [X0+309]
	106 Move TEMP, X8
	107 And TEMP, TEMP, 1
	108 Compare TEMP, 1
	109 JumpIfEqual {111}
	110 Call 0x1C5D684
	111 Move X8, [X0+184]
	112 Move X20, [X8]
	113 Compare X22, 0
	114 JumpIfEqual {118}
	115 Move X8, [X22+24]
	116 Compare X8, 0
	117 JumpIfNotEqual {64}
	118 Move X8, 0xEF8000
	119 Move X8, [X8+472]
	120 Move X0, X31
	121 Move X1, [X8]
	122 Call ReadOnlySpan`1<Char>.op_Implicit, X0
	123 Move X2, X0
	124 Move X3, X1
	125 Move X0, X19
	126 Move X1, X2
	127 Move X2, X3
	128 Move W3, W20
	129 Move W4, W21
	130 Call String.SplitInternal, X0, X1, X2, X3
	131 Compare X23, 0
	132 JumpIfEqual {157}
	133 Move W8, [X23+16]
	134 Compare W8, 0
	135 JumpIfEqual {71}
	136 Move X0, X19
	137 Move X1, X23
	138 Move W2, W20
	139 Move W3, W21
	140 Call String.SplitInternal, X0, X1, X2, X3
	141 Move X20, X0
	142 Move X8, [X24+40]
	143 NotImplemented "Instruction LDUR not yet implemented."
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Move X0, X20
	146 Add X31, X29, 0
	147 Move X20, [X31+64]
	148 Move X19, [X31+72]
	149 Move X22, [X31+48]
	150 Move X21, [X31+56]
	151 Move X24, [X31+32]
	152 Move X23, [X31+40]
	153 Move X25, [X31+16]
	154 Move X29, [X31+80]
	155 Move X30, [X31+88]
	156 Return X0
	157 Subtract X23, X31, 512
	158 Add X31, X23, 0
	159 Move W2, 512
	160 Move X0, X23
	161 Move W1, W31
	162 Call 0x3EB2B10
	163 Move X25, 0xEF8000
	164 Move X25, [X25+384]
	165 Subtract X0, X29, 48
	166 Move W2, 128
	167 Move X1, X23
	168 Move X3, [X25]
	169 Call 0x278E6C4, X0, X1
	170 Subtract X23, X31, 512
	171 Add X31, X23, 0
	172 Move W2, 512
	173 Move X0, X23
	174 Move W1, W31
	175 Call 0x3EB2B10
	176 Move X3, [X25]
	177 Subtract X0, X29, 80
	178 Move W2, 128
	179 Move X1, X23
	180 Call 0x278E6C4, X0, X1
	181 Subtract X2, X29, 48
	182 Subtract X3, X29, 80
	183 Move X0, X19
	184 Move X1, X22
	185 Call String.MakeSeparatorList, X0, X1, X2, X3
	186 Move X23, 0xEF8000
	187 Move X23, [X23+368]
	188 Subtract X0, X29, 48
	189 Move X1, [X23]
	190 Call 0x278E764, X0
	191 Move X8, [X23]
	192 Move X22, X0
	193 Move X23, X1
	194 Subtract X0, X29, 80
	195 Move X1, X8
	196 Call 0x278E764, X0
	197 Compare W23, 0
	198 JumpIfEqual {71}
	199 Move X3, X0
	200 Move X4, X1
	201 Move X0, X19
	202 Move X1, X22
	203 Move X2, X23
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Move W5, W31
	206 Move W6, W20
	207 Call String.SplitOmitEmptyEntries, X0, X1, X2, X3, X4
	208 Move W5, W31
	209 Move W6, W20
	210 Call String.SplitKeepEmptyEntries, X0, X1, X2, X3, X4
	211 Move X19, 0xEF8000
	212 Move X19, [X19+376]
	213 Move X20, X0
	214 Subtract X0, X29, 48
	215 Move X1, [X19]
	216 Call 0x322FB74
	217 Move X1, [X19]
	218 Subtract X0, X29, 80
	219 Call 0x322FB74
	220 Move X0, 0xED1000
	221 Move X0, [X0+1888]
	222 Call 0x1C17D08
	223 Call 0x1C17F10
	224 Move X19, X0
	225 Move X0, 0xEF1000
	226 Move X0, [X0+1608]
	227 Call 0x1C17D08
	228 Move X20, X0
	229 Move X0, 0xEF8000
	230 Move X0, [X0+48]
	231 Call 0x1C17D08
	232 Move X2, X0
	233 Move X0, X19
	234 Move X1, X20
	235 Move X3, X31
	236 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	237 Move X0, 0xEF8000
	238 Move X0, [X0+488]
	239 Call 0x1C17D08
	240 Move X1, X0
	241 Move X0, X19
	242 Call 0x1C17DEC
	243 Move [X29-84], W21
	244 Move X0, 0xEC9000
	245 Move X0, [X0+1880]
	246 Call 0x1C17D08
	247 Subtract X1, X29, 84
	248 Call 0x1C17E04
	249 Move X19, X0
	250 Move X0, 0xEF8000
	251 Move X0, [X0+464]
	252 Call 0x1C17D08
	253 Move X1, X19
	254 Move X2, X31
	255 Call SR.Format, X0, X1
	256 Move X19, X0
	257 Move X0, 0xED1000
	258 Move X0, [X0+1400]
	259 Call 0x1C17D08
	260 Call 0x1C17F10
	261 Move X1, X19
	262 Move X2, X31
	263 Move X20, X0
	264 Call ArgumentException..ctor, X0, X1
	265 Move X0, 0xEF8000
	266 Move X0, [X0+488]
	267 Call 0x1C17D08
	268 Move X1, X0
	269 Move X0, X20
	270 Call 0x1C17DEC
	271 Call 0x1C17F20
	272 Call 0x1C17F28
	273 Call 0x3EB2B20

Method: System.String[] SplitInternal(System.String separator, System.Int32 count, System.StringSplitOptions options)

Disassembly:
	0x0322BE04 LDR X0, [X0 + 0x760]
	0x0322BE08 BL 0x1C16D08
	0x0322BE0C BL 0x1C16F10
	0x0322BE10 MOV X19, X0
	0x0322BE14 ADRP X0, 0xEF0000
	0x0322BE18 LDR X0, [X0 + 0x658]
	0x0322BE1C BL 0x1C16D08
	0x0322BE20 MOV X20, X0
	0x0322BE24 ADRP X0, 0xEF0000
	0x0322BE28 LDR X0, [X0 + 0x660]
	0x0322BE2C B 0x322BE5C
	0x0322BE30 ADRP X0, 0xED0000
	0x0322BE34 LDR X0, [X0 + 0x760]
	0x0322BE38 BL 0x1C16D08
	0x0322BE3C BL 0x1C16F10
	0x0322BE40 MOV X19, X0
	0x0322BE44 ADRP X0, 0xEF0000
	0x0322BE48 LDR X0, [X0 + 0x648]
	0x0322BE4C BL 0x1C16D08
	0x0322BE50 MOV X20, X0
	0x0322BE54 ADRP X0, 0xEF0000
	0x0322BE58 LDR X0, [X0 + 0x650]
	0x0322BE5C BL 0x1C16D08
	0x0322BE60 MOV X2, X0
	0x0322BE64 MOV X0, X19
	0x0322BE68 MOV X1, X20
	0x0322BE6C MOV X3, X31
	0x0322BE70 BL 0x3311888
	0x0322BE74 ADRP X0, 0xEF7000
	0x0322BE78 LDR X0, [X0 + 0x200]
	0x0322BE7C BL 0x1C16D08
	0x0322BE80 MOV X1, X0
	0x0322BE84 MOV X0, X19
	0x0322BE88 BL 0x1C16DEC
	0x0322BE8C LDR W3, [X0 + 0x10]
	0x0322BE90 MOV W2, W31
	0x0322BE94 B 0x322BE98
	0x0322BE98 STR X30, [X31 - 0x20]!
	0x0322BE9C STP X20, X19, [X31 + 0x10]
	0x0322BEA0 CBZ X1, 0x322BF94
	0x0322BEA4 LDR W8, [X0 + 0x10]
	0x0322BEA8 MOV W4, W3
	0x0322BEAC MOV W3, W2
	0x0322BEB0 SUBS W8, W8, W2
	0x0322BEB4 B.CC 0x322BFC8
	0x0322BEB8 CMP W8, W4
	0x0322BEBC B.CC 0x322BFF8
	0x0322BEC0 LDR W8, [X1 + 0x18]
	0x0322BEC4 CMP W8, 0x3
	0x0322BEC8 B.EQ 0x322BEE8
	0x0322BECC CMP W8, 0x2
	0x0322BED0 B.NE 0x322BF38
	0x0322BED4 LDRH W2, [X1 + 0x22]
	0x0322BED8 LDRH W1, [X1 + 0x20]
	0x0322BEDC LDP X20, X19, [X31 + 0x10]
	0x0322BEE0 LDR X30, [X31], #0x20
	0x0322BEE4 B 0x322C060
	0x0322BEE8 CMP W4, 0x1
	0x0322BEEC B.LT 0x322BF60
	0x0322BEF0 LDRH W8, [X1 + 0x20]
	0x0322BEF4 LDRH W9, [X1 + 0x22]
	0x0322BEF8 LDRH W10, [X1 + 0x24]
	0x0322BEFC ADD X12, X0, 0x14
	0x0322BF00 SBFM X11, X3, 0x3F, 0x1F
	0x0322BF04 ADD W13, W4, 0x1
	0x0322BF08 LDRH W14, [X12, X11, LSL]
	0x0322BF0C CMP W14, W10
	0x0322BF10 B.EQ 0x322BF7C
	0x0322BF14 CMP W14, W8
	0x0322BF18 B.EQ 0x322BF7C
	0x0322BF1C CMP W14, W9
	0x0322BF20 B.EQ 0x322BF7C
	0x0322BF24 SUB W13, W13, 0x1
	0x0322BF28 CMP W13, 0x1
	0x0322BF2C ADD X11, X11, 0x2
	0x0322BF30 B.GT 0x322BF08
	0x0322BF34 B 0x322BF60
	0x0322BF38 CMP W8, 0x4
	0x0322BF3C B.GE 0x322BF68
	0x0322BF40 CMP W8, 0x1
	0x0322BF44 B.NE 0x322BF60
	0x0322BF48 LDRH W1, [X1 + 0x20]
	0x0322BF4C LDP X20, X19, [X31 + 0x10]
	0x0322BF50 MOV W2, W3
	0x0322BF54 MOV W3, W4
	0x0322BF58 LDR X30, [X31], #0x20
	0x0322BF5C B 0x322BDB4
	0x0322BF60 MOVN W0, 0x0
	0x0322BF64 B 0x322BF88
	0x0322BF68 LDP X20, X19, [X31 + 0x10]
	0x0322BF6C MOV W2, W3
	0x0322BF70 MOV W3, W4
	0x0322BF74 LDR X30, [X31], #0x20
	0x0322BF78 B 0x322C140
	0x0322BF7C CMP X11, 0x0
	0x0322BF80 CINC X8, X11, LT
	0x0322BF84 UBFM X0, X8, 0x1, 0x3F
	0x0322BF88 LDP X20, X19, [X31 + 0x10]
	0x0322BF8C LDR X30, [X31], #0x20
	0x0322BF90 RET
	0x0322BF94 ADRP X0, 0xECD000
	0x0322BF98 LDR X0, [X0 + 0x528]
	0x0322BF9C BL 0x1C16D08
	0x0322BFA0 BL 0x1C16F10
	0x0322BFA4 MOV X19, X0
	0x0322BFA8 ADRP X0, 0xEF7000
	0x0322BFAC LDR X0, [X0 + 0x208]
	0x0322BFB0 BL 0x1C16D08

ISIL:
	001 Move [X31-80], X29
	002 Move [X31-72], X30
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Add X29, X31, 0
	012 Subtract X31, X31, 48
	013 NotImplemented "Instruction MRS not yet implemented."
	014 Move X8, [X24+40]
	015 Move X23, 0x11B2000
	016 Move X26, 0xEF8000
	017 Move X25, 0xEF8000
	018 Move [X29-8], X8
	019 Move W8, [X23+889]
	020 Move X26, [X26+384]
	021 Move X25, [X25+368]
	022 Move W21, W3
	023 Move W20, W2
	024 Move X22, X1
	025 Move X19, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {50}
	030 Move X0, 0xEF8000
	031 Move X0, [X0+416]
	032 Call 0x1C17CF4
	033 Move X0, 0xEF8000
	034 Move X0, [X0+352]
	035 Call 0x1C17CF4
	036 Move X0, 0xEC9000
	037 Move X0, [X0+2760]
	038 Call 0x1C17CF4
	039 Move X0, 0xEF8000
	040 Move X0, [X0+368]
	041 Call 0x1C17CF4
	042 Move X0, 0xEF8000
	043 Move X0, [X0+376]
	044 Call 0x1C17CF4
	045 Move X0, 0xEF8000
	046 Move X0, [X0+384]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X23+889], W8
	050 NotImplemented "Instruction MOVI not yet implemented."
	051 Subtract X23, X31, 512
	052 Move [X29-48], V0
	053 Move [X29-40], V0
	054 Add X31, X23, 0
	055 Move W2, 512
	056 Move X0, X23
	057 Move W1, W31
	058 Call 0x3EB2B10
	059 Move X3, [X26]
	060 Subtract X0, X29, 48
	061 Move W2, 128
	062 Move X1, X23
	063 Call 0x278E6C4, X0, X1
	064 Subtract X2, X29, 48
	065 Move X0, X19
	066 Move X1, X22
	067 Call String.MakeSeparatorList, X0, X1, X2
	068 Move X1, [X25]
	069 Subtract X0, X29, 48
	070 Call 0x278E764, X0
	071 Move X2, X1
	072 Compare W2, 0
	073 JumpIfEqual {87}
	074 Compare X22, 0
	075 JumpIfEqual {120}
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move X21, 0xEF8000
	078 Move W5, [X22+16]
	079 Move X21, [X21+376]
	080 Move X3, X0
	081 Move X0, X19
	082 Move X1, X3
	083 Move X3, X31
	084 Move X4, X31
	085 Move W6, W20
	086 Call String.SplitOmitEmptyEntries, X0, X1, X2, X3, X4
	087 Move X8, 0xEC9000
	088 Move X8, [X8+2760]
	089 Move W1, 1
	090 Move X0, [X8]
	091 Call 0x1C17D6C
	092 Compare X0, 0
	093 JumpIfEqual {120}
	094 Move W8, [X0+24]
	095 Move X20, X0
	096 Compare W8, 0
	097 JumpIfEqual {121}
	098 Move [X20+32], X19
	099 Call String.SplitKeepEmptyEntries, X0, X1, X2, X3, X4
	100 Move X1, [X21]
	101 Move X20, X0
	102 Subtract X0, X29, 48
	103 Call 0x322FB74
	104 Move X8, [X24+40]
	105 NotImplemented "Instruction LDUR not yet implemented."
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Move X0, X20
	108 Add X31, X29, 0
	109 Move X20, [X31+64]
	110 Move X19, [X31+72]
	111 Move X22, [X31+48]
	112 Move X21, [X31+56]
	113 Move X24, [X31+32]
	114 Move X23, [X31+40]
	115 Move X26, [X31+16]
	116 Move X25, [X31+24]
	117 Move X29, [X31+80]
	118 Move X30, [X31+88]
	119 Return X0
	120 Call 0x1C17F20
	121 Call 0x1C17F28
	122 Call 0x3EB2B20

Method: System.String[] SplitKeepEmptyEntries(System.ReadOnlySpan`1<System.Int32> sepList, System.ReadOnlySpan`1<System.Int32> lengthList, System.Int32 defaultLength, System.Int32 count)

Disassembly:
	0x0322B524 LSLV W13, W12, W13
	0x0322B528 ORR W13, W15, W13, 0x0
	0x0322B52C CMP X9, X8
	0x0322B530 STR W13, [X14, X19, LSL]
	0x0322B534 B.NE 0x322B4E4
	0x0322B538 B 0x322B550
	0x0322B53C CMP X10, X8
	0x0322B540 ADD X8, X8, 0x1
	0x0322B544 MOVZ W11, 0x1
	0x0322B548 B.NE 0x322B4E4
	0x0322B54C B 0x322B554
	0x0322B550 TBZ X11, 0x0, 0x322B560
	0x0322B554 LDR W8, [X19]
	0x0322B558 ORR W8, W8, 0x1
	0x0322B55C STR W8, [X19]
	0x0322B560 LDP X20, X19, [X31 + 0x20]
	0x0322B564 LDP X22, X21, [X31 + 0x10]
	0x0322B568 LDR X30, [X31], #0x30
	0x0322B56C RET
	0x0322B570 UBFM W8, W1, 0x1E, 0x1D
	0x0322B574 AND X8, X8, 0x1F
	0x0322B578 LDR W8, [X8, X0, LSL]
	0x0322B57C UBFM X9, X1, 0x3, 0x7
	0x0322B580 LSRV W8, W8, W9
	0x0322B584 AND W0, W8, 0x1
	0x0322B588 RET
	0x0322B58C STR X30, [X31 - 0x30]!
	0x0322B590 STP X22, X21, [X31 + 0x10]
	0x0322B594 STP X20, X19, [X31 + 0x20]
	0x0322B598 MOV X22, X0
	0x0322B59C MOV W0, W2
	0x0322B5A0 MOV W20, W2
	0x0322B5A4 MOV W21, W1
	0x0322B5A8 BL 0x1C8825C
	0x0322B5AC CBZ X0, 0x322B5E0
	0x0322B5B0 ADD X8, X22, W21, 0x1, SXTW
	0x0322B5B4 MOV X19, X0
	0x0322B5B8 ADD X0, X0, 0x14
	0x0322B5BC ADD X1, X8, 0x14
	0x0322B5C0 UBFM W2, W20, 0x1F, 0x1E
	0x0322B5C4 MOV X3, X31
	0x0322B5C8 BL 0x33A8CD0
	0x0322B5CC MOV X0, X19
	0x0322B5D0 LDP X20, X19, [X31 + 0x20]
	0x0322B5D4 LDP X22, X21, [X31 + 0x10]
	0x0322B5D8 LDR X30, [X31], #0x30
	0x0322B5DC RET
	0x0322B5E0 BL 0x1C16F20
	0x0322B5E4 STP X30, X21, [X31 - 0x20]!
	0x0322B5E8 STP X20, X19, [X31 + 0x10]
	0x0322B5EC ADRP X20, 0x11B1000
	0x0322B5F0 ADRP X21, 0xECA000
	0x0322B5F4 LDRB W8, [X20 + 0x380]
	0x0322B5F8 LDR X21, [X21 + 0xC48]
	0x0322B5FC MOV X19, X0
	0x0322B600 TBNZ X8, 0x0, 0x322B618
	0x0322B604 ADRP X0, 0xECA000
	0x0322B608 LDR X0, [X0 + 0xC48]
	0x0322B60C BL 0x1C16CF4
	0x0322B610 MOVZ W8, 0x1
	0x0322B614 STRB W8, [X20 + 0x380]
	0x0322B618 LDR X0, [X21]
	0x0322B61C LDR W8, [X0 + 0xE0]
	0x0322B620 CBNZ W8, 0x322B628
	0x0322B624 BL 0x1C16DFC
	0x0322B628 MOV X0, X31
	0x0322B62C BL 0x33387A0
	0x0322B630 CBZ X0, 0x322B65C
	0x0322B634 LDR X8, [X0]
	0x0322B638 LDP X9, X1, [X8 + 0x1D8]
	0x0322B63C BLR X9
	0x0322B640 CBZ X0, 0x322B65C
	0x0322B644 LDR X8, [X0]
	0x0322B648 MOV X1, X19
	0x0322B64C LDP X20, X19, [X31 + 0x10]
	0x0322B650 LDP X3, X2, [X8 + 0x1B8]
	0x0322B654 LDP X30, X21, [X31], #0x20
	0x0322B658 BR X3
	0x0322B65C BL 0x1C16F20
	0x0322B660 STP X30, X19, [X31 - 0x10]!
	0x0322B664 CBZ X1, 0x322B698
	0x0322B668 LDR X8, [X1]
	0x0322B66C MOV X19, X0
	0x0322B670 MOV X0, X1
	0x0322B674 LDP X9, X8, [X8 + 0x1D8]
	0x0322B678 MOV X1, X8
	0x0322B67C BLR X9
	0x0322B680 CBZ X0, 0x322B6E0
	0x0322B684 LDR X8, [X0]
	0x0322B688 MOV X1, X19
	0x0322B68C LDP X3, X2, [X8 + 0x1B8]
	0x0322B690 LDP X30, X19, [X31], #0x10
	0x0322B694 BR X3
	0x0322B698 ADRP X0, 0xECD000
	0x0322B69C LDR X0, [X0 + 0x528]
	0x0322B6A0 BL 0x1C16D08
	0x0322B6A4 BL 0x1C16F10
	0x0322B6A8 MOV X19, X0
	0x0322B6AC ADRP X0, 0xEF6000
	0x0322B6B0 LDR X0, [X0 + 0xFF0]
	0x0322B6B4 BL 0x1C16D08
	0x0322B6B8 MOV X1, X0
	0x0322B6BC MOV X0, X19
	0x0322B6C0 MOV X2, X31
	0x0322B6C4 BL 0x330E100
	0x0322B6C8 ADRP X0, 0xEF7000
	0x0322B6CC LDR X0, [X0 + 0x1F0]
	0x0322B6D0 BL 0x1C16D08
	0x0322B6D4 MOV X1, X0
	0x0322B6D8 MOV X0, X19
	0x0322B6DC BL 0x1C16DEC
	0x0322B6E0 BL 0x1C16F20
	0x0322B6E4 STP X30, X21, [X31 - 0x20]!
	0x0322B6E8 STP X20, X19, [X31 + 0x10]
	0x0322B6EC ADRP X20, 0x11B1000
	0x0322B6F0 ADRP X21, 0xECA000
	0x0322B6F4 LDRB W8, [X20 + 0x381]
	0x0322B6F8 LDR X21, [X21 + 0xC48]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X25, 0x11B2000
	015 Move [X31], X3
	016 Move [X31+8], X4
	017 Move X24, 0xEC9000
	018 Move W8, [X25+890]
	019 Move X24, [X24+2760]
	020 Move W20, W6
	021 Move W21, W5
	022 Move X23, X2
	023 Move X22, X1
	024 Move X19, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {43}
	029 Move X0, 0xEF8000
	030 Move X0, [X0+480]
	031 Call 0x1C17CF4
	032 Move X0, 0xEF8000
	033 Move X0, [X0+416]
	034 Call 0x1C17CF4
	035 Move X0, 0xEC9000
	036 Move X0, [X0+2760]
	037 Call 0x1C17CF4
	038 Move X0, 0xECB000
	039 Move X0, [X0+632]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X25+890], W8
	043 Subtract W8, W20, 1
	044 Move X0, [X24]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction CSEL not yet implemented."
	047 Add W1, W24, 1
	048 Call 0x1C17D6C
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X20, X0
	051 Move X26, 0xEF8000
	052 Move X26, [X26+480]
	053 Move X25, X31
	054 Move W1, W31
	055 And X23, X23, 0
	056 Move W27, W24
	057 Add X28, X20, 32
	058 Move W8, [X19+16]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move W8, [X22]
	062 Move X0, X19
	063 Subtract W2, W8, W1
	064 Call String.Substring, X0, X1, X2
	065 Compare X20, 0
	066 JumpIfEqual {134}
	067 Move W8, [X20+24]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move [X28], X0
	070 Move X1, [X26]
	071 Move W29, [X22]
	072 Add X0, X31, 0
	073 Call ReadOnlySpan`1<Int32>.get_IsEmpty, X0
	074 Move W8, W21
	075 Move TEMP, X0
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfEqual {83}
	079 Move W8, [X31+8]
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move X8, [X31]
	082 Move W8, [X8]
	083 Add X25, X25, 1
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Add W1, W8, W29
	086 Move W25, W24
	087 Move TEMP, X24
	088 And TEMP, TEMP, -2147483648
	089 Compare TEMP, -2147483648
	090 JumpIfNotEqual {97}
	091 Move W25, W31
	092 Move W1, W31
	093 Move TEMP, X24
	094 And TEMP, TEMP, -2147483648
	095 Compare TEMP, -2147483648
	096 JumpIfEqual {105}
	097 Move W8, [X19+16]
	098 Subtract W2, W8, W1
	099 Move X0, X19
	100 Call String.Substring, X0, X1, X2
	101 Compare X20, 0
	102 JumpIfEqual {134}
	103 Move W8, [X20+24]
	104 NotImplemented "Instruction CMP not yet implemented."
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Compare X20, 0
	107 JumpIfEqual {134}
	108 Move W8, [X20+24]
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Move X8, 0xECB000
	111 Move X8, [X8+632]
	112 Move W25, W24
	113 Move X8, [X8]
	114 Move X8, [X8+184]
	115 Move X0, [X8]
	116 Add X8, X20, W25
	117 Move [X8+32], X0
	118 Move X0, X20
	119 Move X20, [X31+96]
	120 Move X19, [X31+104]
	121 Move X22, [X31+80]
	122 Move X21, [X31+88]
	123 Move X24, [X31+64]
	124 Move X23, [X31+72]
	125 Move X26, [X31+48]
	126 Move X25, [X31+56]
	127 Move X28, [X31+32]
	128 Move X27, [X31+40]
	129 Move X29, [X31+16]
	130 Move X30, [X31+24]
	131 Add X31, X31, 112
	132 Return X0
	133 Call 0x1C17F28
	134 Call 0x1C17F20

Method: System.String[] SplitOmitEmptyEntries(System.ReadOnlySpan`1<System.Int32> sepList, System.ReadOnlySpan`1<System.Int32> lengthList, System.Int32 defaultLength, System.Int32 count)

Disassembly:
	0x0322B6FC MOV X19, X0
	0x0322B700 TBNZ X8, 0x0, 0x322B718
	0x0322B704 ADRP X0, 0xECA000
	0x0322B708 LDR X0, [X0 + 0xC48]
	0x0322B70C BL 0x1C16CF4
	0x0322B710 MOVZ W8, 0x1
	0x0322B714 STRB W8, [X20 + 0x381]
	0x0322B718 LDR X0, [X21]
	0x0322B71C LDR W8, [X0 + 0xE0]
	0x0322B720 CBNZ W8, 0x322B728
	0x0322B724 BL 0x1C16DFC
	0x0322B728 MOV X0, X31
	0x0322B72C BL 0x3338524
	0x0322B730 CBZ X0, 0x322B75C
	0x0322B734 LDR X8, [X0]
	0x0322B738 LDP X9, X1, [X8 + 0x1D8]
	0x0322B73C BLR X9
	0x0322B740 CBZ X0, 0x322B75C
	0x0322B744 LDR X8, [X0]
	0x0322B748 MOV X1, X19
	0x0322B74C LDP X20, X19, [X31 + 0x10]
	0x0322B750 LDP X3, X2, [X8 + 0x1B8]
	0x0322B754 LDP X30, X21, [X31], #0x20
	0x0322B758 BR X3
	0x0322B75C BL 0x1C16F20
	0x0322B760 STP X30, X21, [X31 - 0x20]!
	0x0322B764 STP X20, X19, [X31 + 0x10]
	0x0322B768 ADRP X20, 0x11B1000
	0x0322B76C ADRP X21, 0xECA000
	0x0322B770 LDRB W8, [X20 + 0x382]
	0x0322B774 LDR X21, [X21 + 0xC48]
	0x0322B778 MOV X19, X0
	0x0322B77C TBNZ X8, 0x0, 0x322B794
	0x0322B780 ADRP X0, 0xECA000
	0x0322B784 LDR X0, [X0 + 0xC48]
	0x0322B788 BL 0x1C16CF4
	0x0322B78C MOVZ W8, 0x1
	0x0322B790 STRB W8, [X20 + 0x382]
	0x0322B794 LDR X0, [X21]
	0x0322B798 LDR W8, [X0 + 0xE0]
	0x0322B79C CBNZ W8, 0x322B7A4
	0x0322B7A0 BL 0x1C16DFC
	0x0322B7A4 MOV X0, X31
	0x0322B7A8 BL 0x33387A0
	0x0322B7AC CBZ X0, 0x322B7D8
	0x0322B7B0 LDR X8, [X0]
	0x0322B7B4 LDP X9, X1, [X8 + 0x1D8]
	0x0322B7B8 BLR X9
	0x0322B7BC CBZ X0, 0x322B7D8
	0x0322B7C0 LDR X8, [X0]
	0x0322B7C4 MOV X1, X19
	0x0322B7C8 LDP X20, X19, [X31 + 0x10]
	0x0322B7CC LDP X3, X2, [X8 + 0x1D8]
	0x0322B7D0 LDP X30, X21, [X31], #0x20
	0x0322B7D4 BR X3
	0x0322B7D8 BL 0x1C16F20
	0x0322B7DC STP X30, X19, [X31 - 0x10]!
	0x0322B7E0 CBZ X1, 0x322B814
	0x0322B7E4 LDR X8, [X1]
	0x0322B7E8 MOV X19, X0
	0x0322B7EC MOV X0, X1
	0x0322B7F0 LDP X9, X8, [X8 + 0x1D8]
	0x0322B7F4 MOV X1, X8
	0x0322B7F8 BLR X9
	0x0322B7FC CBZ X0, 0x322B85C
	0x0322B800 LDR X8, [X0]
	0x0322B804 MOV X1, X19
	0x0322B808 LDP X3, X2, [X8 + 0x1D8]
	0x0322B80C LDP X30, X19, [X31], #0x10
	0x0322B810 BR X3
	0x0322B814 ADRP X0, 0xECD000
	0x0322B818 LDR X0, [X0 + 0x528]
	0x0322B81C BL 0x1C16D08
	0x0322B820 BL 0x1C16F10
	0x0322B824 MOV X19, X0
	0x0322B828 ADRP X0, 0xEF6000
	0x0322B82C LDR X0, [X0 + 0xFF0]
	0x0322B830 BL 0x1C16D08
	0x0322B834 MOV X1, X0
	0x0322B838 MOV X0, X19
	0x0322B83C MOV X2, X31
	0x0322B840 BL 0x330E100
	0x0322B844 ADRP X0, 0xEF7000
	0x0322B848 LDR X0, [X0 + 0x1F8]
	0x0322B84C BL 0x1C16D08
	0x0322B850 MOV X1, X0
	0x0322B854 MOV X0, X19
	0x0322B858 BL 0x1C16DEC
	0x0322B85C BL 0x1C16F20
	0x0322B860 STP X30, X21, [X31 - 0x20]!
	0x0322B864 STP X20, X19, [X31 + 0x10]
	0x0322B868 ADRP X20, 0x11B1000
	0x0322B86C ADRP X21, 0xECA000
	0x0322B870 LDRB W8, [X20 + 0x383]
	0x0322B874 LDR X21, [X21 + 0xC48]
	0x0322B878 MOV X19, X0
	0x0322B87C TBNZ X8, 0x0, 0x322B894
	0x0322B880 ADRP X0, 0xECA000
	0x0322B884 LDR X0, [X0 + 0xC48]
	0x0322B888 BL 0x1C16CF4
	0x0322B88C MOVZ W8, 0x1
	0x0322B890 STRB W8, [X20 + 0x383]
	0x0322B894 LDR X0, [X21]
	0x0322B898 LDR W8, [X0 + 0xE0]
	0x0322B89C CBNZ W8, 0x322B8A4
	0x0322B8A0 BL 0x1C16DFC
	0x0322B8A4 MOV X0, X31
	0x0322B8A8 BL 0x3338524
	0x0322B8AC CBZ X0, 0x322B8D8
	0x0322B8B0 LDR X8, [X0]
	0x0322B8B4 LDP X9, X1, [X8 + 0x1D8]
	0x0322B8B8 BLR X9
	0x0322B8BC CBZ X0, 0x322B8D8
	0x0322B8C0 LDR X8, [X0]
	0x0322B8C4 MOV X1, X19
	0x0322B8C8 LDP X20, X19, [X31 + 0x10]
	0x0322B8CC LDP X3, X2, [X8 + 0x1D8]
	0x0322B8D0 LDP X30, X21, [X31], #0x20
	0x0322B8D4 BR X3
	0x0322B8D8 BL 0x1C16F20
	0x0322B8DC MOVZ W1, 0x2
	0x0322B8E0 B 0x322B8E4
	0x0322B8E4 STP X30, X25, [X31 - 0x40]!
	0x0322B8E8 STP X24, X23, [X31 + 0x10]
	0x0322B8EC STP X22, X21, [X31 + 0x20]
	0x0322B8F0 STP X20, X19, [X31 + 0x30]
	0x0322B8F4 ADRP X20, 0x11B1000
	0x0322B8F8 LDRB W8, [X20 + 0x384]
	0x0322B8FC MOV W21, W1
	0x0322B900 MOV X19, X0
	0x0322B904 TBNZ X8, 0x0, 0x322B91C
	0x0322B908 ADRP X0, 0xECA000
	0x0322B90C LDR X0, [X0 + 0x170]
	0x0322B910 BL 0x1C16CF4
	0x0322B914 MOVZ W8, 0x1
	0x0322B918 STRB W8, [X20 + 0x384]
	0x0322B91C ADRP X23, 0xECA000
	0x0322B920 LDR W24, [X19 + 0x10]
	0x0322B924 LDR X23, [X23 + 0x170]
	0x0322B928 CMP W21, 0x1
	0x0322B92C B.NE 0x322B938
	0x0322B930 MOV W20, W31
	0x0322B934 B 0x322B998
	0x0322B938 CMP W24, 0x1
	0x0322B93C B.LT 0x322B9F0
	0x0322B940 MOV X20, X31
	0x0322B944 ADD X25, X19, 0x14
	0x0322B948 MOV W8, W24
	0x0322B94C CMP X20, W8, SXTW
	0x0322B950 B.LT 0x322B95C
	0x0322B954 MOV X0, X31
	0x0322B958 BL 0x339D674
	0x0322B95C LDR X0, [X23]
	0x0322B960 LDRH W22, [X25, X20, LSL #1]
	0x0322B964 LDR W8, [X0 + 0xE0]
	0x0322B968 CBNZ W8, 0x322B970
	0x0322B96C BL 0x1C16DFC
	0x0322B970 MOV W0, W22
	0x0322B974 MOV X1, X31
	0x0322B978 BL 0x3317FCC
	0x0322B97C TBZ X0, 0x0, 0x322B990
	0x0322B980 LDRSW X8, [X19 + 0x10]
	0x0322B984 ADD X20, X20, 0x1

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], X29
	003 Move [X31+40], X30
	004 Move [X31+48], X28
	005 Move [X31+56], X27
	006 Move [X31+64], X26
	007 Move [X31+72], X25
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X19, 0x11B2000
	015 Move [X31+16], X3
	016 Move [X31+24], X4
	017 Move X21, 0xEC9000
	018 Move W8, [X19+891]
	019 Move X21, [X21+2760]
	020 Move W26, W6
	021 Move W22, W5
	022 Move X27, X2
	023 Move X23, X1
	024 Move X20, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {40}
	029 Move X0, 0xEF8000
	030 Move X0, [X0+480]
	031 Call 0x1C17CF4
	032 Move X0, 0xEF8000
	033 Move X0, [X0+416]
	034 Call 0x1C17CF4
	035 Move X0, 0xEC9000
	036 Move X0, [X0+2760]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X19+891], W8
	040 Move X0, [X21]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 NotImplemented "Instruction CSINC not yet implemented."
	043 Move [X31+12], W1
	044 Call 0x1C17D6C
	045 Subtract W8, W27, 1
	046 Move X19, X0
	047 Move [X31+8], W8
	048 Move X29, 0xEF8000
	049 Move X29, [X29+480]
	050 Move X28, X31
	051 Move W25, W31
	052 Move W24, W31
	053 Subtract W26, W26, 1
	054 And X27, X27, 0
	055 Move W8, [X20+16]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move W21, [X23]
	058 Subtract W2, W21, W25
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X0, X20
	061 Move W1, W25
	062 Call String.Substring, X0, X1, X2
	063 Compare X19, 0
	064 JumpIfEqual {168}
	065 Move W8, [X19+24]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Add X8, X19, W24
	068 Move [X8+32], X0
	069 Move W21, [X23]
	070 Add W24, W24, 1
	071 Move X1, [X29]
	072 Add X0, X31, 16
	073 Call ReadOnlySpan`1<Int32>.get_IsEmpty, X0
	074 Move W8, W22
	075 Move TEMP, X0
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfEqual {83}
	079 Move W8, [X31+24]
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move X8, [X31+16]
	082 Move W8, [X8]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Add W25, W8, W21
	085 Add X28, X28, 1
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move W24, W31
	088 Move W25, W31
	089 Move W8, [X31+8]
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move W9, W8
	092 Move X8, X31
	093 Add X24, X28, 1
	094 Subtract X28, X8, W9
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move W8, [X23]
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move X1, [X29]
	099 Add X0, X31, 16
	100 Call ReadOnlySpan`1<Int32>.get_IsEmpty, X0
	101 Move W8, W22
	102 Move TEMP, X0
	103 And TEMP, TEMP, 1
	104 Compare TEMP, 1
	105 JumpIfEqual {110}
	106 Move W8, [X31+24]
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move X8, [X31+16]
	109 Move W8, [X8]
	110 Add X24, X24, 1
	111 Add X9, X28, X24
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Add W25, W8, W25
	114 Move W24, W26
	115 Move W8, [X20+16]
	116 Subtract W2, W8, W25
	117 Move X0, X20
	118 Move W1, W25
	119 Call String.Substring, X0, X1, X2
	120 Compare X19, 0
	121 JumpIfEqual {168}
	122 Move W8, [X19+24]
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Add X8, X19, W24
	125 Add W24, W24, 1
	126 Move [X8+32], X0
	127 Move W8, [X31+12]
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move X8, 0xEC9000
	130 Move X8, [X8+2760]
	131 Move W1, W24
	132 Move X0, [X8]
	133 Call 0x1C17D6C
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Compare X19, 0
	136 JumpIfEqual {168}
	137 Move W9, [X19+24]
	138 Move X8, X31
	139 Move W10, W24
	140 Add X11, X0, 32
	141 Add X12, X19, 32
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Compare X0, 0
	144 JumpIfEqual {168}
	145 Move W13, [X0+24]
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Move X13, [X12]
	148 Move [X11], X13
	149 Add X8, X8, 1
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Move X19, X0
	152 Move X0, X19
	153 Move X20, [X31+112]
	154 Move X19, [X31+120]
	155 Move X22, [X31+96]
	156 Move X21, [X31+104]
	157 Move X24, [X31+80]
	158 Move X23, [X31+88]
	159 Move X26, [X31+64]
	160 Move X25, [X31+72]
	161 Move X28, [X31+48]
	162 Move X27, [X31+56]
	163 Move X29, [X31+32]
	164 Move X30, [X31+40]
	165 Add X31, X31, 128
	166 Return X0
	167 Call 0x1C17F28
	168 Call 0x1C17F20

Method: System.Void MakeSeparatorList(System.ReadOnlySpan`1<System.Char> separators, ref System.Collections.Generic.ValueListBuilder`1<System.Int32> sepListBuilder)

Disassembly:
	0x0322B050 LDR X26, [X19, X27, LSL #3]
	0x0322B054 CBZ X26, 0x322B144
	0x0322B058 LDR W24, [X26 + 0x10]
	0x0322B05C CBZ W24, 0x322B144
	0x0322B060 LDRSW X8, [X22 + 0x10]
	0x0322B064 CMP X29, X8
	0x0322B068 MOV W8, W24
	0x0322B06C B.LT 0x322B07C
	0x0322B070 MOV X0, X31
	0x0322B074 BL 0x339D674
	0x0322B078 LDR W8, [X26 + 0x10]
	0x0322B07C LDRH W23, [X25]
	0x0322B080 CMP W8, 0x0
	0x0322B084 B.GT 0x322B090
	0x0322B088 MOV X0, X31
	0x0322B08C BL 0x339D674
	0x0322B090 MOV X20, X26
	0x0322B094 LDRH W8, [X20 + 0x14]!
	0x0322B098 CMP W23, W8
	0x0322B09C B.NE 0x322B144
	0x0322B0A0 LDR W9, [X22 + 0x10]
	0x0322B0A4 SUB W8, W9, W28
	0x0322B0A8 CMP W24, W8
	0x0322B0AC B.GT 0x322B144
	0x0322B0B0 CMP W24, 0x1
	0x0322B0B4 B.EQ 0x322B168
	0x0322B0B8 ADRP X23, 0x11AE000
	0x0322B0BC LDRB W10, [X23 + 0x761]
	0x0322B0C0 CBNZ W10, 0x322B0E0
	0x0322B0C4 ADRP X0, 0xEEF000
	0x0322B0C8 LDR X0, [X0 + 0x290]
	0x0322B0CC BL 0x1C16CF4
	0x0322B0D0 MOVZ W8, 0x1
	0x0322B0D4 STRB W8, [X23 + 0x761]
	0x0322B0D8 LDR W9, [X22 + 0x10]
	0x0322B0DC SUB W8, W9, W28
	0x0322B0E0 CMP W9, W28
	0x0322B0E4 B.CC 0x322B0F0
	0x0322B0E8 CMP W8, W24
	0x0322B0EC B.CS 0x322B0FC
	0x0322B0F0 MOVZ W0, 0x18
	0x0322B0F4 MOV X1, X31
	0x0322B0F8 BL 0x339D764
	0x0322B0FC ADRP X8, 0x11AE000
	0x0322B100 LDRB W8, [X8 + 0x762]
	0x0322B104 CBNZ W8, 0x322B120
	0x0322B108 ADRP X0, 0xEEF000
	0x0322B10C LDR X0, [X0 + 0x290]
	0x0322B110 BL 0x1C16CF4
	0x0322B114 MOVZ W8, 0x1
	0x0322B118 ADRP X9, 0x11AE000
	0x0322B11C STRB W8, [X9 + 0x762]
	0x0322B120 ADRP X8, 0xEEF000
	0x0322B124 LDR W3, [X26 + 0x10]
	0x0322B128 LDR X8, [X8 + 0x2D0]
	0x0322B12C MOV X0, X25
	0x0322B130 MOV X1, X24
	0x0322B134 MOV X2, X20
	0x0322B138 LDR X4, [X8]
	0x0322B13C BL 0x1F96ECC
	0x0322B140 TBNZ X0, 0x0, 0x322B168
	0x0322B144 LDR W8, [X21 + 0x18]
	0x0322B148 ADD X27, X27, 0x1
	0x0322B14C CMP X27, W8, SXTW
	0x0322B150 B.LT 0x322B048
	0x0322B154 LDR W8, [X22 + 0x10]
	0x0322B158 ADD W28, W28, 0x1
	0x0322B15C CMP W28, W8
	0x0322B160 B.LT 0x322B028
	0x0322B164 B 0x322B264
	0x0322B168 ADRP X8, 0xEF7000
	0x0322B16C LDR X8, [X8 + 0x168]
	0x0322B170 LDR X9, [X31 + 0x10]
	0x0322B174 LDR X25, [X8]
	0x0322B178 LDRSW X20, [X9 + 0x18]
	0x0322B17C LDR X0, [X25 + 0x20]
	0x0322B180 LDRB W8, [X0 + 0x135]
	0x0322B184 TBNZ X8, 0x0, 0x322B18C
	0x0322B188 BL 0x1C5C684
	0x0322B18C LDR X8, [X31 + 0x10]
	0x0322B190 LDR W8, [X8 + 0x8]
	0x0322B194 CMP W20, W8
	0x0322B198 B.LT 0x322B1C4
	0x0322B19C LDR X0, [X25 + 0x20]
	0x0322B1A0 LDRB W8, [X0 + 0x135]
	0x0322B1A4 TBNZ X8, 0x0, 0x322B1AC
	0x0322B1A8 BL 0x1C5C684
	0x0322B1AC LDR X8, [X0 + 0xC0]
	0x0322B1B0 LDR X23, [X31 + 0x10]
	0x0322B1B4 LDR X1, [X8 + 0x28]
	0x0322B1B8 MOV X0, X23
	0x0322B1BC BL 0x278D8D4
	0x0322B1C0 LDR W8, [X23 + 0x8]
	0x0322B1C4 CMP W20, W8
	0x0322B1C8 B.CS 0x322B284
	0x0322B1CC LDR X10, [X31 + 0x10]
	0x0322B1D0 ADD W9, W20, 0x1
	0x0322B1D4 LDR X8, [X10]
	0x0322B1D8 STR W28, [X8, X20, LSL #2]
	0x0322B1DC STR W9, [X10 + 0x18]
	0x0322B1E0 ADRP X8, 0xEF7000
	0x0322B1E4 LDR X8, [X8 + 0x168]
	0x0322B1E8 LDR X9, [X31 + 0x8]
	0x0322B1EC LDR X25, [X8]
	0x0322B1F0 LDRSW X20, [X9 + 0x18]
	0x0322B1F4 LDR X0, [X25 + 0x20]
	0x0322B1F8 LDRB W8, [X0 + 0x135]
	0x0322B1FC TBNZ X8, 0x0, 0x322B204
	0x0322B200 BL 0x1C5C684
	0x0322B204 LDR X8, [X31 + 0x8]
	0x0322B208 LDR W8, [X8 + 0x8]
	0x0322B20C CMP W20, W8
	0x0322B210 B.LT 0x322B23C
	0x0322B214 LDR X0, [X25 + 0x20]
	0x0322B218 LDRB W8, [X0 + 0x135]
	0x0322B21C TBNZ X8, 0x0, 0x322B224
	0x0322B220 BL 0x1C5C684
	0x0322B224 LDR X8, [X0 + 0xC0]
	0x0322B228 LDR X23, [X31 + 0x8]
	0x0322B22C LDR X1, [X8 + 0x28]
	0x0322B230 MOV X0, X23
	0x0322B234 BL 0x278D8D4
	0x0322B238 LDR W8, [X23 + 0x8]
	0x0322B23C CMP W20, W8
	0x0322B240 B.CS 0x322B284
	0x0322B244 LDR X11, [X31 + 0x8]
	0x0322B248 ADD W9, W20, 0x1
	0x0322B24C ADD W10, W28, W24
	0x0322B250 SUB W28, W10, 0x1
	0x0322B254 LDR X8, [X11]
	0x0322B258 STR W24, [X8, X20, LSL #2]
	0x0322B25C STR W9, [X11 + 0x18]
	0x0322B260 B 0x322B154
	0x0322B264 LDP X20, X19, [X31 + 0x70]
	0x0322B268 LDP X22, X21, [X31 + 0x60]
	0x0322B26C LDP X24, X23, [X31 + 0x50]
	0x0322B270 LDP X26, X25, [X31 + 0x40]
	0x0322B274 LDP X28, X27, [X31 + 0x30]
	0x0322B278 LDP X29, X30, [X31 + 0x20]
	0x0322B27C ADD X31, X31, 0x80
	0x0322B280 RET
	0x0322B284 BL 0x1C16F28
	0x0322B288 BL 0x1C16F20
	0x0322B28C STP X29, X30, [X31 - 0x60]!
	0x0322B290 STP X28, X27, [X31 + 0x10]
	0x0322B294 STP X26, X25, [X31 + 0x20]
	0x0322B298 STP X24, X23, [X31 + 0x30]
	0x0322B29C STP X22, X21, [X31 + 0x40]
	0x0322B2A0 STP X20, X19, [X31 + 0x50]
	0x0322B2A4 ADRP X22, 0x11B1000
	0x0322B2A8 LDRB W8, [X22 + 0x37D]
	0x0322B2AC MOV X19, X2
	0x0322B2B0 MOV X20, X1
	0x0322B2B4 MOV X21, X0
	0x0322B2B8 TBNZ X8, 0x0, 0x322B2DC
	0x0322B2BC ADRP X0, 0xEEF000
	0x0322B2C0 LDR X0, [X0 + 0x2D0]
	0x0322B2C4 BL 0x1C16CF4
	0x0322B2C8 ADRP X0, 0xEF7000
	0x0322B2CC LDR X0, [X0 + 0x168]
	0x0322B2D0 BL 0x1C16CF4
	0x0322B2D4 MOVZ W8, 0x1
	0x0322B2D8 STRB W8, [X22 + 0x37D]
	0x0322B2DC CBZ X20, 0x322B480
	0x0322B2E0 LDR W8, [X21 + 0x10]
	0x0322B2E4 CMP W8, 0x1
	0x0322B2E8 B.LT 0x322B460
	0x0322B2EC LDR W22, [X20 + 0x10]
	0x0322B2F0 MOV W26, W31
	0x0322B2F4 ADD X29, X21, 0x14
	0x0322B2F8 ADD X23, X20, 0x14
	0x0322B2FC ADRP X24, 0x11AE000
	0x0322B300 SUB W28, W22, 0x1
	0x0322B304 MOV W9, W26
	0x0322B308 CMP X9, W8, SXTW
	0x0322B30C B.LT 0x322B318
	0x0322B310 MOV X0, X31
	0x0322B314 BL 0x339D674
	0x0322B318 LDR W8, [X20 + 0x10]
	0x0322B31C ADD X25, X29, W26, 0x1, SXTW
	0x0322B320 LDRH W27, [X25]
	0x0322B324 CMP W8, 0x0
	0x0322B328 B.GT 0x322B334
	0x0322B32C MOV X0, X31
	0x0322B330 BL 0x339D674
	0x0322B334 LDRH W8, [X23]
	0x0322B338 CMP W27, W8
	0x0322B33C B.NE 0x322B450
	0x0322B340 LDR W9, [X21 + 0x10]
	0x0322B344 SUB W8, W9, W26
	0x0322B348 CMP W22, W8
	0x0322B34C B.GT 0x322B450
	0x0322B350 CMP W22, 0x1
	0x0322B354 B.EQ 0x322B3E4
	0x0322B358 LDRB W10, [X24 + 0x761]
	0x0322B35C CBNZ W10, 0x322B380
	0x0322B360 ADRP X0, 0xEEF000
	0x0322B364 LDR X0, [X0 + 0x290]
	0x0322B368 MOV X27, X24
	0x0322B36C BL 0x1C16CF4
	0x0322B370 MOVZ W8, 0x1
	0x0322B374 STRB W8, [X24 + 0x761]
	0x0322B378 LDR W9, [X21 + 0x10]
	0x0322B37C SUB W8, W9, W26
	0x0322B380 CMP W9, W26
	0x0322B384 B.CC 0x322B390
	0x0322B388 CMP W8, W22
	0x0322B38C B.CS 0x322B39C
	0x0322B390 MOVZ W0, 0x18
	0x0322B394 MOV X1, X31
	0x0322B398 BL 0x339D764
	0x0322B39C ADRP X8, 0x11AE000
	0x0322B3A0 LDRB W8, [X8 + 0x762]
	0x0322B3A4 CBNZ W8, 0x322B3C0
	0x0322B3A8 ADRP X0, 0xEEF000
	0x0322B3AC LDR X0, [X0 + 0x290]
	0x0322B3B0 BL 0x1C16CF4
	0x0322B3B4 MOVZ W8, 0x1
	0x0322B3B8 ADRP X9, 0x11AE000
	0x0322B3BC STRB W8, [X9 + 0x762]
	0x0322B3C0 ADRP X8, 0xEEF000
	0x0322B3C4 LDR W3, [X20 + 0x10]
	0x0322B3C8 LDR X8, [X8 + 0x2D0]
	0x0322B3CC MOV X0, X25
	0x0322B3D0 MOV X1, X22
	0x0322B3D4 MOV X2, X23
	0x0322B3D8 LDR X4, [X8]
	0x0322B3DC BL 0x1F96ECC
	0x0322B3E0 TBZ X0, 0x0, 0x322B450
	0x0322B3E4 ADRP X8, 0xEF7000
	0x0322B3E8 LDR X8, [X8 + 0x168]
	0x0322B3EC LDRSW X25, [X19 + 0x18]
	0x0322B3F0 LDR X27, [X8]
	0x0322B3F4 LDR X0, [X27 + 0x20]
	0x0322B3F8 LDRB W8, [X0 + 0x135]
	0x0322B3FC TBNZ X8, 0x0, 0x322B404
	0x0322B400 BL 0x1C5C684
	0x0322B404 LDR W8, [X19 + 0x8]
	0x0322B408 CMP W25, W8
	0x0322B40C B.LT 0x322B434
	0x0322B410 LDR X0, [X27 + 0x20]
	0x0322B414 LDRB W8, [X0 + 0x135]
	0x0322B418 TBNZ X8, 0x0, 0x322B420
	0x0322B41C BL 0x1C5C684
	0x0322B420 LDR X8, [X0 + 0xC0]
	0x0322B424 MOV X0, X19
	0x0322B428 LDR X1, [X8 + 0x28]
	0x0322B42C BL 0x278D8D4
	0x0322B430 LDR W8, [X19 + 0x8]
	0x0322B434 CMP W25, W8
	0x0322B438 B.CS 0x322B47C
	0x0322B43C LDR X8, [X19]
	0x0322B440 ADD W9, W25, 0x1
	0x0322B444 STR W26, [X8, X25, LSL #2]
	0x0322B448 ADD W26, W28, W26
	0x0322B44C STR W9, [X19 + 0x18]
	0x0322B450 LDR W8, [X21 + 0x10]
	0x0322B454 ADD W26, W26, 0x1
	0x0322B458 CMP W26, W8
	0x0322B45C B.LT 0x322B304
	0x0322B460 LDP X20, X19, [X31 + 0x50]
	0x0322B464 LDP X22, X21, [X31 + 0x40]
	0x0322B468 LDP X24, X23, [X31 + 0x30]
	0x0322B46C LDP X26, X25, [X31 + 0x20]
	0x0322B470 LDP X28, X27, [X31 + 0x10]
	0x0322B474 LDP X29, X30, [X31], #0x60
	0x0322B478 RET
	0x0322B47C BL 0x1C16F28
	0x0322B480 BL 0x1C16F20
	0x0322B484 LDR W8, [X0 + 0x10]
	0x0322B488 SUB W2, W8, W1
	0x0322B48C B 0x3228DE4
	0x0322B490 STR X30, [X31 - 0x30]!
	0x0322B494 STP X22, X21, [X31 + 0x10]
	0x0322B498 STP X20, X19, [X31 + 0x20]
	0x0322B49C ADRP X22, 0x11B1000
	0x0322B4A0 LDRB W8, [X22 + 0x387]
	0x0322B4A4 MOV X21, X2
	0x0322B4A8 MOV X20, X1
	0x0322B4AC MOV X19, X0
	0x0322B4B0 TBNZ X8, 0x0, 0x322B4C8
	0x0322B4B4 ADRP X0, 0xEF7000
	0x0322B4B8 LDR X0, [X0 + 0x28]
	0x0322B4BC BL 0x1C16CF4
	0x0322B4C0 MOVZ W8, 0x1
	0x0322B4C4 STRB W8, [X22 + 0x387]
	0x0322B4C8 CMP W21, 0x1
	0x0322B4CC B.LT 0x322B560
	0x0322B4D0 AND X9, X21, 0x0
	0x0322B4D4 MOV X8, X31
	0x0322B4D8 MOV W11, W31
	0x0322B4DC SUB X10, X9, 0x1
	0x0322B4E0 MOVZ W12, 0x1
	0x0322B4E4 LDRH W13, [X20, X8, LSL #1]
	0x0322B4E8 AND W14, W13, 0xFF
	0x0322B4EC UBFM W14, W14, 0x1E, 0x1D
	0x0322B4F0 AND X14, X14, 0x1F
	0x0322B4F4 LDR W15, [X14, X19, LSL]
	0x0322B4F8 UBFM W16, W13, 0x3, 0x7
	0x0322B4FC LSLV W16, W12, W16
	0x0322B500 UBFM X13, X13, 0x8, 0x3F
	0x0322B504 ORR W15, W16, W15, 0x0
	0x0322B508 STR W15, [X14, X19, LSL]
	0x0322B50C CBZ W13, 0x322B53C
	0x0322B510 UBFM W14, W13, 0x1E, 0x1D
	0x0322B514 AND X14, X14, 0x1F
	0x0322B518 LDR W15, [X14, X19, LSL]
	0x0322B51C UBFM W13, W13, 0x3, 0x1F
	0x0322B520 ADD X8, X8, 0x1

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+48], X29
	003 Move [X31+56], X30
	004 Move [X31+64], X28
	005 Move [X31+72], X27
	006 Move [X31+80], X26
	007 Move [X31+88], X25
	008 Move [X31+96], X24
	009 Move [X31+104], X23
	010 Move [X31+112], X22
	011 Move [X31+120], X21
	012 Move [X31+128], X20
	013 Move [X31+136], X19
	014 NotImplemented "Instruction MRS not yet implemented."
	015 Move X8, [X23+40]
	016 Move X24, 0x11B2000
	017 Move X19, X3
	018 Move X22, X2
	019 Move [X31+40], X8
	020 Move W8, [X24+892]
	021 Move X21, X1
	022 Move X20, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {38}
	027 Move X0, 0xECB000
	028 Move X0, [X0+368]
	029 Call 0x1C17CF4
	030 Move X0, 0xEF8000
	031 Move X0, [X0+40]
	032 Call 0x1C17CF4
	033 Move X0, 0xEF8000
	034 Move X0, [X0+360]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X24+892], W8
	038 NotImplemented "Instruction MOVI not yet implemented."
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move [X31], V0
	041 Move [X31+8], V0
	042 Move X9, -40452096
	043 Move W8, W22
	044 Add X9, X9, 1139
	045 NotImplemented "Instruction ADR not yet implemented."
	046 Move W11, [X9]
	047 Add X10, X10, X11
	048 CallNoReturn X10
	049 Move W8, [X20+16]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X25, 0xECB000
	052 Move X26, 0xEF8000
	053 Move X25, [X25+368]
	054 Move X26, [X26+360]
	055 Move X22, X31
	056 Add X24, X20, 20
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X0, X31
	059 Call ThrowHelper.ThrowIndexOutOfRangeException
	060 Move X0, [X25]
	061 NotImplemented "Instruction LDRH not yet implemented."
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move W0, W21
	067 Move X1, X31
	068 Call Char.IsWhiteSpace, X0
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {101}
	073 Move X27, [X26]
	074 NotImplemented "Instruction LDRSW not yet implemented."
	075 Move X0, [X27+32]
	076 Move W8, [X0+309]
	077 Move TEMP, X8
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfEqual {82}
	081 Call 0x1C5D684
	082 Move W8, [X19+8]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move X0, [X27+32]
	085 Move W8, [X0+309]
	086 Move TEMP, X8
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfEqual {91}
	090 Call 0x1C5D684
	091 Move X8, [X0+192]
	092 Move X0, X19
	093 Move X1, [X8+40]
	094 Call 0x278E8D4, X0
	095 Move W8, [X19+8]
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Move X8, [X19]
	098 Add W9, W21, 1
	099 Move [X8], W22
	100 Move [X19+24], W9
	101 NotImplemented "Instruction LDRSW not yet implemented."
	102 Add X22, X22, 1
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Move W8, [X20+16]
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move X26, 0xEF8000
	107 NotImplemented "Instruction LDRH not yet implemented."
	108 NotImplemented "Instruction LDRH not yet implemented."
	109 Move X26, [X26+360]
	110 Move X22, X31
	111 Add X25, X20, 20
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X0, X31
	114 Call ThrowHelper.ThrowIndexOutOfRangeException
	115 NotImplemented "Instruction LDRH not yet implemented."
	116 NotImplemented "Instruction CMP not yet implemented."
	117 NotImplemented "Instruction CMP not yet implemented."
	118 Move X28, [X26]
	119 NotImplemented "Instruction LDRSW not yet implemented."
	120 Move X0, [X28+32]
	121 Move W8, [X0+309]
	122 Move TEMP, X8
	123 And TEMP, TEMP, 1
	124 Compare TEMP, 1
	125 JumpIfEqual {127}
	126 Call 0x1C5D684
	127 Move W8, [X19+8]
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move X0, [X28+32]
	130 Move W8, [X0+309]
	131 Move TEMP, X8
	132 And TEMP, TEMP, 1
	133 Compare TEMP, 1
	134 JumpIfEqual {136}
	135 Call 0x1C5D684
	136 Move X8, [X0+192]
	137 Move X0, X19
	138 Move X1, [X8+40]
	139 Call 0x278E8D4, X0
	140 Move W8, [X19+8]
	141 NotImplemented "Instruction CMP not yet implemented."
	142 Move X8, [X19]
	143 Add W9, W27, 1
	144 Move [X8], W22
	145 Move [X19+24], W9
	146 NotImplemented "Instruction LDRSW not yet implemented."
	147 Add X22, X22, 1
	148 NotImplemented "Instruction CMP not yet implemented."
	149 Move W8, [X20+16]
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Move X27, 0xEF8000
	152 NotImplemented "Instruction LDRH not yet implemented."
	153 NotImplemented "Instruction LDRH not yet implemented."
	154 NotImplemented "Instruction LDRH not yet implemented."
	155 Move X27, [X27+360]
	156 Move X22, X31
	157 Add X26, X20, 20
	158 NotImplemented "Instruction CMP not yet implemented."
	159 Move X0, X31
	160 Call ThrowHelper.ThrowIndexOutOfRangeException
	161 NotImplemented "Instruction LDRH not yet implemented."
	162 NotImplemented "Instruction CMP not yet implemented."
	163 NotImplemented "Instruction CMP not yet implemented."
	164 NotImplemented "Instruction CMP not yet implemented."
	165 Move X29, [X27]
	166 NotImplemented "Instruction LDRSW not yet implemented."
	167 Move X0, [X29+32]
	168 Move W8, [X0+309]
	169 Move TEMP, X8
	170 And TEMP, TEMP, 1
	171 Compare TEMP, 1
	172 JumpIfEqual {174}
	173 Call 0x1C5D684
	174 Move W8, [X19+8]
	175 NotImplemented "Instruction CMP not yet implemented."
	176 Move X0, [X29+32]
	177 Move W8, [X0+309]
	178 Move TEMP, X8
	179 And TEMP, TEMP, 1
	180 Compare TEMP, 1
	181 JumpIfEqual {183}
	182 Call 0x1C5D684
	183 Move X8, [X0+192]
	184 Move X0, X19
	185 Move X1, [X8+40]
	186 Call 0x278E8D4, X0
	187 Move W8, [X19+8]
	188 NotImplemented "Instruction CMP not yet implemented."
	189 Move X8, [X19]
	190 Add W9, W28, 1
	191 Move [X8], W22
	192 Move [X19+24], W9
	193 NotImplemented "Instruction LDRSW not yet implemented."
	194 Add X22, X22, 1
	195 NotImplemented "Instruction CMP not yet implemented."
	196 Move W8, [X20+16]
	197 NotImplemented "Instruction CMP not yet implemented."
	198 Move X25, 0xEF8000
	199 NotImplemented "Instruction LDRH not yet implemented."
	200 Move X25, [X25+360]
	201 Move X22, X31
	202 Add X24, X20, 20
	203 NotImplemented "Instruction CMP not yet implemented."
	204 Move X0, X31
	205 Call ThrowHelper.ThrowIndexOutOfRangeException
	206 NotImplemented "Instruction LDRH not yet implemented."
	207 NotImplemented "Instruction CMP not yet implemented."
	208 Move X27, [X25]
	209 NotImplemented "Instruction LDRSW not yet implemented."
	210 Move X0, [X27+32]
	211 Move W8, [X0+309]
	212 Move TEMP, X8
	213 And TEMP, TEMP, 1
	214 Compare TEMP, 1
	215 JumpIfEqual {217}
	216 Call 0x1C5D684
	217 Move W8, [X19+8]
	218 NotImplemented "Instruction CMP not yet implemented."
	219 Move X0, [X27+32]
	220 Move W8, [X0+309]
	221 Move TEMP, X8
	222 And TEMP, TEMP, 1
	223 Compare TEMP, 1
	224 JumpIfEqual {226}
	225 Call 0x1C5D684
	226 Move X8, [X0+192]
	227 Move X0, X19
	228 Move X1, [X8+40]
	229 Call 0x278E8D4, X0
	230 Move W8, [X19+8]
	231 NotImplemented "Instruction CMP not yet implemented."
	232 Move X8, [X19]
	233 Add W9, W26, 1
	234 Move [X8], W22
	235 Move [X19+24], W9
	236 NotImplemented "Instruction LDRSW not yet implemented."
	237 Add X22, X22, 1
	238 NotImplemented "Instruction CMP not yet implemented."
	239 Add X0, X31, 0
	240 Move X1, X21
	241 Move X2, X22
	242 Move [X31], V0
	243 Move [X31+8], V0
	244 Add X24, X31, 0
	245 Call String.InitializeProbabilisticMap, X0, X1
	246 Move W8, [X20+16]
	247 NotImplemented "Instruction CMP not yet implemented."
	248 Move X27, 0xEF8000
	249 Move X27, [X27+360]
	250 Move X25, X31
	251 Add X26, X20, 20
	252 NotImplemented "Instruction CMP not yet implemented."
	253 Move X0, X31
	254 Call ThrowHelper.ThrowIndexOutOfRangeException
	255 NotImplemented "Instruction LDRH not yet implemented."
	256 And W8, W2, 255
	257 Move W8, W8
	258 ShiftRight W8, 30
	259 And W8, W8, 0x1FFFFFFF
	260 And X8, X8, 31
	261 Move W8, [X8]
	262 Move W9, W2
	263 ShiftRight W9, 3
	264 And W9, W9, 127
	265 NotImplemented "Instruction LSRV not yet implemented."
	266 Move TEMP, X8
	267 And TEMP, TEMP, 1
	268 Compare TEMP, 1
	269 JumpIfNotEqual {319}
	270 Move X8, X2
	271 ShiftRight X8, 6
	272 And X8, X8, 0x7FFFFFFF
	273 And X8, X8, 31
	274 Move W8, [X8]
	275 Move X9, X2
	276 ShiftRight X9, 11
	277 And X9, X9, 0x7FFFFFFF
	278 NotImplemented "Instruction LSRV not yet implemented."
	279 Move TEMP, X8
	280 And TEMP, TEMP, 1
	281 Compare TEMP, 1
	282 JumpIfNotEqual {319}
	283 Move X0, X21
	284 Move X1, X22
	285 Move X3, X31
	286 Call MemoryExtensions.Contains, X0, X1
	287 Move TEMP, X0
	288 And TEMP, TEMP, 1
	289 Compare TEMP, 1
	290 JumpIfNotEqual {319}
	291 Move X29, [X27]
	292 NotImplemented "Instruction LDRSW not yet implemented."
	293 Move X0, [X29+32]
	294 Move W8, [X0+309]
	295 Move TEMP, X8
	296 And TEMP, TEMP, 1
	297 Compare TEMP, 1
	298 JumpIfEqual {300}
	299 Call 0x1C5D684
	300 Move W8, [X19+8]
	301 NotImplemented "Instruction CMP not yet implemented."
	302 Move X0, [X29+32]
	303 Move W8, [X0+309]
	304 Move TEMP, X8
	305 And TEMP, TEMP, 1
	306 Compare TEMP, 1
	307 JumpIfEqual {309}
	308 Call 0x1C5D684
	309 Move X8, [X0+192]
	310 Move X0, X19
	311 Move X1, [X8+40]
	312 Call 0x278E8D4, X0
	313 Move W8, [X19+8]
	314 NotImplemented "Instruction CMP not yet implemented."
	315 Move X8, [X19]
	316 Add W9, W28, 1
	317 Move [X8], W25
	318 Move [X19+24], W9
	319 NotImplemented "Instruction LDRSW not yet implemented."
	320 Add X25, X25, 1
	321 NotImplemented "Instruction CMP not yet implemented."
	322 Move X8, [X23+40]
	323 Move X9, [X31+40]
	324 NotImplemented "Instruction CMP not yet implemented."
	325 Move X20, [X31+128]
	326 Move X19, [X31+136]
	327 Move X22, [X31+112]
	328 Move X21, [X31+120]
	329 Move X24, [X31+96]
	330 Move X23, [X31+104]
	331 Move X26, [X31+80]
	332 Move X25, [X31+88]
	333 Move X28, [X31+64]
	334 Move X27, [X31+72]
	335 Move X29, [X31+48]
	336 Move X30, [X31+56]
	337 Add X31, X31, 144
	338 Return 
	339 Call 0x1C17F28
	340 Call 0x3EB2B20

Method: System.Void MakeSeparatorList(System.String separator, ref System.Collections.Generic.ValueListBuilder`1<System.Int32> sepListBuilder)

Disassembly:
	0x0322C28C B.EQ 0x322C2C4
	0x0322C290 ADD X10, X1, W9, 0x1, SXTW
	0x0322C294 LDRH W10, [X10 + 0x20]
	0x0322C298 CMP W10, W0, UXTH
	0x0322C29C B.EQ 0x322C2B4
	0x0322C2A0 ADD W9, W9, 0x1
	0x0322C2A4 CMP W8, W9
	0x0322C2A8 B.NE 0x322C288
	0x0322C2AC B 0x322C2B4
	0x0322C2B0 MOV W9, W31
	0x0322C2B4 CMP W9, W8
	0x0322C2B8 CSET W0, LT
	0x0322C2BC LDR X30, [X31], #0x10
	0x0322C2C0 RET
	0x0322C2C4 BL 0x1C16F28
	0x0322C2C8 BL 0x1C16F20
	0x0322C2CC UBFM W8, W1, 0x1E, 0x1D
	0x0322C2D0 AND X8, X8, 0x1F
	0x0322C2D4 LDR W9, [X8, X0, LSL]
	0x0322C2D8 UBFM X10, X1, 0x3, 0x7
	0x0322C2DC MOVZ W11, 0x1
	0x0322C2E0 LSLV W10, W11, W10
	0x0322C2E4 ORR W9, W9, W10, 0x0
	0x0322C2E8 STR W9, [X8, X0, LSL]
	0x0322C2EC RET
	0x0322C2F0 LDR W3, [X0 + 0x10]
	0x0322C2F4 MOV W2, W31
	0x0322C2F8 MOV W4, W31
	0x0322C2FC B 0x322C320
	0x0322C300 LDR W8, [X0 + 0x10]
	0x0322C304 MOV W4, W31
	0x0322C308 SUB W3, W8, W2
	0x0322C30C B 0x322C320
	0x0322C310 LDR W8, [X0 + 0x10]
	0x0322C314 MOV W4, W3
	0x0322C318 SUB W3, W8, W2
	0x0322C31C B 0x322C320
	0x0322C320 STR X30, [X31 - 0x40]!
	0x0322C324 STP X24, X23, [X31 + 0x10]
	0x0322C328 STP X22, X21, [X31 + 0x20]
	0x0322C32C STP X20, X19, [X31 + 0x30]
	0x0322C330 ADRP X24, 0x11B0000
	0x0322C334 LDRB W8, [X24 + 0x388]
	0x0322C338 MOV W23, W4
	0x0322C33C MOV W19, W3
	0x0322C340 MOV W20, W2
	0x0322C344 MOV X21, X1
	0x0322C348 MOV X22, X0
	0x0322C34C TBNZ X8, 0x0, 0x322C370
	0x0322C350 ADRP X0, 0xEF5000
	0x0322C354 LDR X0, [X0 + 0xFD0]
	0x0322C358 BL 0x1C16CF4
	0x0322C35C ADRP X0, 0xEC9000
	0x0322C360 LDR X0, [X0 + 0xC48]
	0x0322C364 BL 0x1C16CF4
	0x0322C368 MOVZ W8, 0x1
	0x0322C36C STRB W8, [X24 + 0x388]
	0x0322C370 CBZ X21, 0x322C590
	0x0322C374 TBNZ X20, 0x1F, 0x322C55C
	0x0322C378 LDR W8, [X22 + 0x10]
	0x0322C37C CMP W8, W20
	0x0322C380 B.LT 0x322C55C
	0x0322C384 TBNZ X19, 0x1F, 0x322C5C4
	0x0322C388 SUB W8, W8, W19
	0x0322C38C CMP W8, W20
	0x0322C390 B.LT 0x322C5C4
	0x0322C394 CMP W23, 0x5
	0x0322C398 B.HI 0x322C620
	0x0322C39C ADRP X9, 0xFFFFFFFFFD96A000
	0x0322C3A0 MOV W8, W23
	0x0322C3A4 ADD X9, X9, 0x477
	0x0322C3A8 ADR X10, 0x10
	0x0322C3AC LDRB W11, [X9, X8, LSL]
	0x0322C3B0 ADD X10, X10, X11, 0x2, LSL
	0x0322C3B4 BR X10
	0x0322C3B8 ADRP X8, 0xEC9000
	0x0322C3BC LDR X8, [X8 + 0xC48]
	0x0322C3C0 LDR X0, [X8]
	0x0322C3C4 LDR W8, [X0 + 0xE0]
	0x0322C3C8 CBNZ W8, 0x322C3D0
	0x0322C3CC BL 0x1C16DFC
	0x0322C3D0 MOV X0, X31
	0x0322C3D4 BL 0x33387A0
	0x0322C3D8 CBZ X0, 0x322C58C
	0x0322C3DC LDR X8, [X0]
	0x0322C3E0 LDP X9, X1, [X8 + 0x1F8]
	0x0322C3E4 BLR X9
	0x0322C3E8 CBNZ X0, 0x322C450
	0x0322C3EC B 0x322C58C
	0x0322C3F0 ADRP X8, 0xEC9000
	0x0322C3F4 LDR X8, [X8 + 0xC48]
	0x0322C3F8 LDR X0, [X8]
	0x0322C3FC LDR W8, [X0 + 0xE0]
	0x0322C400 CBNZ W8, 0x322C408
	0x0322C404 BL 0x1C16DFC
	0x0322C408 MOV X0, X31
	0x0322C40C BL 0x33387A0
	0x0322C410 CBZ X0, 0x322C58C
	0x0322C414 LDR X8, [X0]
	0x0322C418 LDP X9, X1, [X8 + 0x1F8]
	0x0322C41C BLR X9
	0x0322C420 CBNZ X0, 0x322C498
	0x0322C424 B 0x322C58C
	0x0322C428 ADRP X23, 0xEF5000
	0x0322C42C LDR X23, [X23 + 0xFD0]
	0x0322C430 LDR X0, [X23]
	0x0322C434 LDR W8, [X0 + 0xE0]
	0x0322C438 CBNZ W8, 0x322C444
	0x0322C43C BL 0x1C16DFC
	0x0322C440 LDR X0, [X23]
	0x0322C444 LDR X8, [X0 + 0xB8]
	0x0322C448 LDR X0, [X8]
	0x0322C44C CBZ X0, 0x322C58C
	0x0322C450 LDR X8, [X0]
	0x0322C454 MOV X1, X22
	0x0322C458 MOV X2, X21
	0x0322C45C MOV W3, W20
	0x0322C460 LDP X7, X6, [X8 + 0x1E8]
	0x0322C464 MOV W4, W19
	0x0322C468 MOV W5, W31
	0x0322C46C B 0x322C4B4
	0x0322C470 ADRP X23, 0xEF5000
	0x0322C474 LDR X23, [X23 + 0xFD0]
	0x0322C478 LDR X0, [X23]
	0x0322C47C LDR W8, [X0 + 0xE0]
	0x0322C480 CBNZ W8, 0x322C48C

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X22, 0x11B1000
	014 Move W8, [X22+893]
	015 Move X19, X2
	016 Move X20, X1
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {30}
	022 Move X0, 0xEEF000
	023 Move X0, [X0+720]
	024 Call 0x1C17CF4
	025 Move X0, 0xEF7000
	026 Move X0, [X0+360]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X22+893], W8
	030 Compare X20, 0
	031 JumpIfEqual {142}
	032 Move W8, [X21+16]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move W22, [X20+16]
	035 Move W26, W31
	036 Add X29, X21, 20
	037 Add X23, X20, 20
	038 Move X24, 0x11AE000
	039 Subtract W28, W22, 1
	040 Move W9, W26
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X0, X31
	043 Call ThrowHelper.ThrowIndexOutOfRangeException
	044 Move W8, [X20+16]
	045 Add X25, X29, W26
	046 NotImplemented "Instruction LDRH not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X0, X31
	049 Call ThrowHelper.ThrowIndexOutOfRangeException
	050 NotImplemented "Instruction LDRH not yet implemented."
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move W9, [X21+16]
	053 Subtract W8, W9, W26
	054 NotImplemented "Instruction CMP not yet implemented."
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move W10, [X24+1889]
	057 Compare W10, 0
	058 JumpIfNotEqual {67}
	059 Move X0, 0xEEF000
	060 Move X0, [X0+656]
	061 Move X27, X24
	062 Call 0x1C17CF4
	063 Move W8, 1
	064 Move [X24+1889], W8
	065 Move W9, [X21+16]
	066 Subtract W8, W9, W26
	067 NotImplemented "Instruction CMP not yet implemented."
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move W0, 24
	070 Move X1, X31
	071 Call ThrowHelper.ThrowArgumentOutOfRangeException, X0
	072 Move X8, 0x11AE000
	073 Move W8, [X8+1890]
	074 Compare W8, 0
	075 JumpIfNotEqual {82}
	076 Move X0, 0xEEF000
	077 Move X0, [X0+656]
	078 Call 0x1C17CF4
	079 Move W8, 1
	080 Move X9, 0x11AE000
	081 Move [X9+1890], W8
	082 Move X8, 0xEEF000
	083 Move W3, [X20+16]
	084 Move X8, [X8+720]
	085 Move X0, X25
	086 Move X1, X22
	087 Move X2, X23
	088 Move X4, [X8]
	089 Call 0x1F97ECC
	090 Move TEMP, X0
	091 And TEMP, TEMP, 1
	092 Compare TEMP, 1
	093 JumpIfNotEqual {125}
	094 Move X8, 0xEF7000
	095 Move X8, [X8+360]
	096 NotImplemented "Instruction LDRSW not yet implemented."
	097 Move X27, [X8]
	098 Move X0, [X27+32]
	099 Move W8, [X0+309]
	100 Move TEMP, X8
	101 And TEMP, TEMP, 1
	102 Compare TEMP, 1
	103 JumpIfEqual {105}
	104 Call 0x1C5D684
	105 Move W8, [X19+8]
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Move X0, [X27+32]
	108 Move W8, [X0+309]
	109 Move TEMP, X8
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfEqual {114}
	113 Call 0x1C5D684
	114 Move X8, [X0+192]
	115 Move X0, X19
	116 Move X1, [X8+40]
	117 Call 0x278E8D4, X0
	118 Move W8, [X19+8]
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Move X8, [X19]
	121 Add W9, W25, 1
	122 Move [X8], W26
	123 Add W26, W28, W26
	124 Move [X19+24], W9
	125 Move W8, [X21+16]
	126 Add W26, W26, 1
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move X20, [X31+80]
	129 Move X19, [X31+88]
	130 Move X22, [X31+64]
	131 Move X21, [X31+72]
	132 Move X24, [X31+48]
	133 Move X23, [X31+56]
	134 Move X26, [X31+32]
	135 Move X25, [X31+40]
	136 Move X28, [X31+16]
	137 Move X27, [X31+24]
	138 Move X29, [X31+96]
	139 Move X30, [X31+104]
	140 Return 
	141 Call 0x1C17F28
	142 Call 0x1C17F20

Method: System.Void MakeSeparatorList(System.String[] separators, ref System.Collections.Generic.ValueListBuilder`1<System.Int32> sepListBuilder, ref System.Collections.Generic.ValueListBuilder`1<System.Int32> lengthListBuilder)

Disassembly:
	0x0322BFB4 MOV X1, X0
	0x0322BFB8 MOV X0, X19
	0x0322BFBC MOV X2, X31
	0x0322BFC0 BL 0x330E100
	0x0322BFC4 B 0x322C03C
	0x0322BFC8 ADRP X0, 0xED0000
	0x0322BFCC LDR X0, [X0 + 0x760]
	0x0322BFD0 BL 0x1C16D08
	0x0322BFD4 BL 0x1C16F10
	0x0322BFD8 MOV X19, X0
	0x0322BFDC ADRP X0, 0xEF0000
	0x0322BFE0 LDR X0, [X0 + 0x658]
	0x0322BFE4 BL 0x1C16D08
	0x0322BFE8 MOV X20, X0
	0x0322BFEC ADRP X0, 0xEF0000
	0x0322BFF0 LDR X0, [X0 + 0x660]
	0x0322BFF4 B 0x322C024
	0x0322BFF8 ADRP X0, 0xED0000
	0x0322BFFC LDR X0, [X0 + 0x760]
	0x0322C000 BL 0x1C16D08
	0x0322C004 BL 0x1C16F10
	0x0322C008 MOV X19, X0
	0x0322C00C ADRP X0, 0xEEF000
	0x0322C010 LDR X0, [X0 + 0x648]
	0x0322C014 BL 0x1C16D08
	0x0322C018 MOV X20, X0
	0x0322C01C ADRP X0, 0xEEF000
	0x0322C020 LDR X0, [X0 + 0x650]
	0x0322C024 BL 0x1C16D08
	0x0322C028 MOV X2, X0
	0x0322C02C MOV X0, X19
	0x0322C030 MOV X1, X20
	0x0322C034 MOV X3, X31
	0x0322C038 BL 0x3311888
	0x0322C03C ADRP X0, 0xEF6000
	0x0322C040 LDR X0, [X0 + 0x210]
	0x0322C044 BL 0x1C16D08
	0x0322C048 MOV X1, X0
	0x0322C04C MOV X0, X19
	0x0322C050 BL 0x1C16DEC
	0x0322C054 LDR W8, [X0 + 0x10]
	0x0322C058 SUB W3, W8, W2
	0x0322C05C B 0x322BE98
	0x0322C060 CMP W4, 0x1
	0x0322C064 B.LT 0x322C0CC
	0x0322C068 ADD X9, X0, 0x14
	0x0322C06C SBFM X8, X3, 0x3F, 0x1F
	0x0322C070 ADD W10, W4, 0x2
	0x0322C074 ADD X11, X9, X8
	0x0322C078 LDRH W12, [X11]
	0x0322C07C CMP W12, W1, UXTH
	0x0322C080 B.EQ 0x322C0B4
	0x0322C084 CMP W12, W2, UXTH
	0x0322C088 B.EQ 0x322C0B4
	0x0322C08C LDRH W11, [X11 + 0x2]
	0x0322C090 CMP W11, W1, UXTH
	0x0322C094 B.EQ 0x322C0C4
	0x0322C098 CMP W11, W2, UXTH
	0x0322C09C B.EQ 0x322C0C4
	0x0322C0A0 SUB W10, W10, 0x2
	0x0322C0A4 CMP W10, 0x2
	0x0322C0A8 ADD X8, X8, 0x4
	0x0322C0AC B.GT 0x322C074
	0x0322C0B0 B 0x322C0CC
	0x0322C0B4 CMP X8, 0x0
	0x0322C0B8 CINC X8, X8, LT
	0x0322C0BC UBFM X0, X8, 0x1, 0x3F
	0x0322C0C0 RET
	0x0322C0C4 CMP W10, 0x3
	0x0322C0C8 B.NE 0x322C0D4
	0x0322C0CC MOVN W0, 0x0
	0x0322C0D0 RET
	0x0322C0D4 CMP X8, 0x0
	0x0322C0D8 CINC X8, X8, LT
	0x0322C0DC UBFM X8, X8, 0x1, 0x3F
	0x0322C0E0 ADD W0, W8, 0x1
	0x0322C0E4 RET
	0x0322C0E8 CMP W5, 0x1
	0x0322C0EC B.LT 0x322C128
	0x0322C0F0 ADD X9, X0, 0x14
	0x0322C0F4 SBFM X8, X4, 0x3F, 0x1F
	0x0322C0F8 ADD W10, W5, 0x1
	0x0322C0FC LDRH W11, [X9, X8, LSL]
	0x0322C100 CMP W11, W3, UXTH
	0x0322C104 B.EQ 0x322C130
	0x0322C108 CMP W11, W1, UXTH
	0x0322C10C B.EQ 0x322C130
	0x0322C110 CMP W11, W2, UXTH
	0x0322C114 B.EQ 0x322C130
	0x0322C118 SUB W10, W10, 0x1
	0x0322C11C CMP W10, 0x1
	0x0322C120 ADD X8, X8, 0x2
	0x0322C124 B.GT 0x322C0FC
	0x0322C128 MOVN W0, 0x0
	0x0322C12C RET
	0x0322C130 CMP X8, 0x0
	0x0322C134 CINC X8, X8, LT
	0x0322C138 UBFM X0, X8, 0x1, 0x3F
	0x0322C13C RET
	0x0322C140 SUB X31, X31, 0x70
	0x0322C144 STP X30, X25, [X31 + 0x30]
	0x0322C148 STP X24, X23, [X31 + 0x40]
	0x0322C14C STP X22, X21, [X31 + 0x50]
	0x0322C150 STP X20, X19, [X31 + 0x60]
	0x0322C154 MRS X23, 0xC000
	0x0322C158 LDR X8, [X23 + 0x28]
	0x0322C15C ADRP X25, 0x11B0000
	0x0322C160 ADRP X24, 0xEF6000
	0x0322C164 MOV W20, W3
	0x0322C168 STR X8, [X31 + 0x28]
	0x0322C16C LDRB W8, [X25 + 0x386]
	0x0322C170 LDR X24, [X24 + 0x1D8]
	0x0322C174 MOV W21, W2
	0x0322C178 MOV X19, X1
	0x0322C17C MOV X22, X0
	0x0322C180 TBNZ X8, 0x0, 0x322C198
	0x0322C184 ADRP X0, 0xEF6000
	0x0322C188 LDR X0, [X0 + 0x1D8]
	0x0322C18C BL 0x1C16CF4
	0x0322C190 MOVZ W8, 0x1
	0x0322C194 STRB W8, [X25 + 0x386]
	0x0322C198 LDR X1, [X24]
	0x0322C19C MOVI V0.2D, 0x0
	0x0322C1A0 MOV X0, X19
	0x0322C1A4 STP V0, V0, [X31]
	0x0322C1A8 BL 0x25BF134
	0x0322C1AC MOV X2, X0
	0x0322C1B0 MOV X3, X1
	0x0322C1B4 ADD X0, X31, 0x0
	0x0322C1B8 MOV X1, X2
	0x0322C1BC MOV X2, X3
	0x0322C1C0 ADD X24, X31, 0x0
	0x0322C1C4 BL 0x322B490
	0x0322C1C8 CMP W20, 0x1
	0x0322C1CC B.LT 0x322C230
	0x0322C1D0 ADD X22, X22, 0x14
	0x0322C1D4 SBFM X21, X21, 0x3F, 0x1F
	0x0322C1D8 ADD W20, W20, 0x1
	0x0322C1DC LDRH W0, [X22, X21, LSL]
	0x0322C1E0 AND W8, W0, 0xFF
	0x0322C1E4 UBFM W8, W8, 0x1E, 0x1D
	0x0322C1E8 AND X8, X8, 0x1F
	0x0322C1EC LDR W8, [X8, X24, LSL]
	0x0322C1F0 UBFM W9, W0, 0x3, 0x7
	0x0322C1F4 LSRV W8, W8, W9
	0x0322C1F8 TBZ X8, 0x0, 0x322C220
	0x0322C1FC UBFM X8, X0, 0x6, 0x3F
	0x0322C200 AND X8, X8, 0x1F
	0x0322C204 LDR W8, [X8, X24, LSL]
	0x0322C208 UBFM X9, X0, 0xB, 0x3F
	0x0322C20C LSRV W8, W8, W9
	0x0322C210 TBZ X8, 0x0, 0x322C220
	0x0322C214 MOV X1, X19
	0x0322C218 BL 0x322C270
	0x0322C21C TBNZ X0, 0x0, 0x322C25C
	0x0322C220 SUB W20, W20, 0x1
	0x0322C224 CMP W20, 0x1
	0x0322C228 ADD X21, X21, 0x2
	0x0322C22C B.GT 0x322C1DC
	0x0322C230 MOVN W0, 0x0
	0x0322C234 LDR X8, [X23 + 0x28]
	0x0322C238 LDR X9, [X31 + 0x28]
	0x0322C23C CMP X8, X9
	0x0322C240 B.NE 0x322C26C
	0x0322C244 LDP X20, X19, [X31 + 0x60]
	0x0322C248 LDP X22, X21, [X31 + 0x50]
	0x0322C24C LDP X24, X23, [X31 + 0x40]
	0x0322C250 LDP X30, X25, [X31 + 0x30]
	0x0322C254 ADD X31, X31, 0x70
	0x0322C258 RET
	0x0322C25C CMP X21, 0x0
	0x0322C260 CINC X8, X21, LT
	0x0322C264 UBFM X0, X8, 0x1, 0x3F
	0x0322C268 B 0x322C234
	0x0322C26C BL 0x3EB1B20
	0x0322C270 STR X30, [X31 - 0x10]!
	0x0322C274 CBZ X1, 0x322C2C8
	0x0322C278 LDR W8, [X1 + 0x18]
	0x0322C27C CMP W8, 0x1
	0x0322C280 B.LT 0x322C2B0
	0x0322C284 MOV W9, W31
	0x0322C288 CMP W8, W9

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], X29
	003 Move [X31+40], X30
	004 Move [X31+48], X28
	005 Move [X31+56], X27
	006 Move [X31+64], X26
	007 Move [X31+72], X25
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X19, 0x11B2000
	015 Move W8, [X19+894]
	016 Move X21, X1
	017 Move X22, X0
	018 Move [X31+8], X3
	019 Move [X31+16], X2
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {32}
	024 Move X0, 0xEF0000
	025 Move X0, [X0+720]
	026 Call 0x1C17CF4
	027 Move X0, 0xEF8000
	028 Move X0, [X0+360]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X19+894], W8
	032 Compare X21, 0
	033 JumpIfEqual {200}
	034 Move W8, [X22+16]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Add X8, X22, 20
	037 Move W28, W31
	038 Move [X31+24], X8
	039 Add X19, X21, 32
	040 Move X8, [X21+24]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X9, [X31+24]
	043 Move X27, X31
	044 And X8, X8, 0
	045 Move W29, W28
	046 Add X25, X9, W28
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X26, [X19]
	049 Compare X26, 0
	050 JumpIfEqual {109}
	051 Move W24, [X26+16]
	052 Compare W24, 0
	053 JumpIfEqual {109}
	054 NotImplemented "Instruction LDRSW not yet implemented."
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move W8, W24
	057 Move X0, X31
	058 Call ThrowHelper.ThrowIndexOutOfRangeException
	059 Move W8, [X26+16]
	060 NotImplemented "Instruction LDRH not yet implemented."
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X0, X31
	063 Call ThrowHelper.ThrowIndexOutOfRangeException
	064 Move X20, X26
	065 NotImplemented "Instruction LDRH not yet implemented."
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move W9, [X22+16]
	068 Subtract W8, W9, W28
	069 NotImplemented "Instruction CMP not yet implemented."
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X23, 0x11AE000
	072 Move W10, [X23+1889]
	073 Compare W10, 0
	074 JumpIfNotEqual {82}
	075 Move X0, 0xEEF000
	076 Move X0, [X0+656]
	077 Call 0x1C17CF4
	078 Move W8, 1
	079 Move [X23+1889], W8
	080 Move W9, [X22+16]
	081 Subtract W8, W9, W28
	082 NotImplemented "Instruction CMP not yet implemented."
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move W0, 24
	085 Move X1, X31
	086 Call ThrowHelper.ThrowArgumentOutOfRangeException, X0
	087 Move X8, 0x11AE000
	088 Move W8, [X8+1890]
	089 Compare W8, 0
	090 JumpIfNotEqual {97}
	091 Move X0, 0xEEF000
	092 Move X0, [X0+656]
	093 Call 0x1C17CF4
	094 Move W8, 1
	095 Move X9, 0x11AE000
	096 Move [X9+1890], W8
	097 Move X8, 0xEEF000
	098 Move W3, [X26+16]
	099 Move X8, [X8+720]
	100 Move X0, X25
	101 Move X1, X24
	102 Move X2, X20
	103 Move X4, [X8]
	104 Call 0x1F97ECC
	105 Move TEMP, X0
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfEqual {115}
	109 Move W8, [X21+24]
	110 Add X27, X27, 1
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Move W8, [X22+16]
	113 Add W28, W28, 1
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Move X8, 0xEF7000
	116 Move X8, [X8+360]
	117 Move X9, [X31+16]
	118 Move X25, [X8]
	119 NotImplemented "Instruction LDRSW not yet implemented."
	120 Move X0, [X25+32]
	121 Move W8, [X0+309]
	122 Move TEMP, X8
	123 And TEMP, TEMP, 1
	124 Compare TEMP, 1
	125 JumpIfEqual {127}
	126 Call 0x1C5D684
	127 Move X8, [X31+16]
	128 Move W8, [X8+8]
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Move X0, [X25+32]
	131 Move W8, [X0+309]
	132 Move TEMP, X8
	133 And TEMP, TEMP, 1
	134 Compare TEMP, 1
	135 JumpIfEqual {137}
	136 Call 0x1C5D684
	137 Move X8, [X0+192]
	138 Move X23, [X31+16]
	139 Move X1, [X8+40]
	140 Move X0, X23
	141 Call 0x278E8D4, X0
	142 Move W8, [X23+8]
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Move X10, [X31+16]
	145 Add W9, W20, 1
	146 Move X8, [X10]
	147 Move [X8], W28
	148 Move [X10+24], W9
	149 Move X8, 0xEF7000
	150 Move X8, [X8+360]
	151 Move X9, [X31+8]
	152 Move X25, [X8]
	153 NotImplemented "Instruction LDRSW not yet implemented."
	154 Move X0, [X25+32]
	155 Move W8, [X0+309]
	156 Move TEMP, X8
	157 And TEMP, TEMP, 1
	158 Compare TEMP, 1
	159 JumpIfEqual {161}
	160 Call 0x1C5D684
	161 Move X8, [X31+8]
	162 Move W8, [X8+8]
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Move X0, [X25+32]
	165 Move W8, [X0+309]
	166 Move TEMP, X8
	167 And TEMP, TEMP, 1
	168 Compare TEMP, 1
	169 JumpIfEqual {171}
	170 Call 0x1C5D684
	171 Move X8, [X0+192]
	172 Move X23, [X31+8]
	173 Move X1, [X8+40]
	174 Move X0, X23
	175 Call 0x278E8D4, X0
	176 Move W8, [X23+8]
	177 NotImplemented "Instruction CMP not yet implemented."
	178 Move X11, [X31+8]
	179 Add W9, W20, 1
	180 Add W10, W28, W24
	181 Subtract W28, W10, 1
	182 Move X8, [X11]
	183 Move [X8], W24
	184 Move [X11+24], W9
	185 Move X20, [X31+112]
	186 Move X19, [X31+120]
	187 Move X22, [X31+96]
	188 Move X21, [X31+104]
	189 Move X24, [X31+80]
	190 Move X23, [X31+88]
	191 Move X26, [X31+64]
	192 Move X25, [X31+72]
	193 Move X28, [X31+48]
	194 Move X27, [X31+56]
	195 Move X29, [X31+32]
	196 Move X30, [X31+40]
	197 Add X31, X31, 128
	198 Return 
	199 Call 0x1C17F28
	200 Call 0x1C17F20

Method: System.String Substring(System.Int32 startIndex)

Disassembly:
	0x0322C484 BL 0x1C16DFC
	0x0322C488 LDR X0, [X23]
	0x0322C48C LDR X8, [X0 + 0xB8]

ISIL:
	001 Move W8, [X0+16]
	002 Subtract W2, W8, W1
	003 Call String.Substring, X0, X1, X2
	004 Return X0

Method: System.String Substring(System.Int32 startIndex, System.Int32 length)

Disassembly:
	0x03229DE4 MOV X0, X19
	0x03229DE8 BL 0x1C16DEC
	0x03229DEC STUR W21, [X29 - 0x34]
	0x03229DF0 ADRP X0, 0xEF9000
	0x03229DF4 LDR X0, [X0 + 0x1C8]
	0x03229DF8 BL 0x1C16D08
	0x03229DFC SUB X1, X29, 0x34
	0x03229E00 BL 0x1C16E04
	0x03229E04 MOV X19, X0
	0x03229E08 ADRP X0, 0xEF9000
	0x03229E0C LDR X0, [X0 + 0x1D0]
	0x03229E10 BL 0x1C16D08
	0x03229E14 MOV X1, X19
	0x03229E18 MOV X2, X31
	0x03229E1C BL 0x32094D4
	0x03229E20 MOV X19, X0
	0x03229E24 ADRP X0, 0xED2000
	0x03229E28 LDR X0, [X0 + 0x578]
	0x03229E2C BL 0x1C16D08
	0x03229E30 BL 0x1C16F10
	0x03229E34 MOV X1, X19
	0x03229E38 MOV X2, X31
	0x03229E3C MOV X20, X0
	0x03229E40 BL 0x3314A68
	0x03229E44 ADRP X0, 0xEF9000
	0x03229E48 LDR X0, [X0 + 0x1C0]
	0x03229E4C BL 0x1C16D08
	0x03229E50 MOV X1, X0
	0x03229E54 MOV X0, X20
	0x03229E58 BL 0x1C16DEC
	0x03229E5C BL 0x1C16F20
	0x03229E60 BL 0x1C16F28
	0x03229E64 BL 0x3EB1B20
	0x03229E68 STR X30, [X31 - 0x30]!
	0x03229E6C STP X22, X21, [X31 + 0x10]
	0x03229E70 STP X20, X19, [X31 + 0x20]
	0x03229E74 ADRP X21, 0x11B3000
	0x03229E78 ADRP X22, 0xEF9000
	0x03229E7C LDRB W8, [X21 + 0x372]
	0x03229E80 LDR X22, [X22 + 0x1D8]
	0x03229E84 MOV X20, X1
	0x03229E88 MOV X19, X0
	0x03229E8C TBNZ X8, 0x0, 0x3229EA4
	0x03229E90 ADRP X0, 0xEF9000
	0x03229E94 LDR X0, [X0 + 0x1D8]
	0x03229E98 BL 0x1C16CF4
	0x03229E9C MOVZ W8, 0x1
	0x03229EA0 STRB W8, [X21 + 0x372]
	0x03229EA4 LDR X1, [X22]
	0x03229EA8 MOV X0, X20
	0x03229EAC BL 0x25BF134
	0x03229EB0 MOV X2, X0
	0x03229EB4 MOV X0, X19
	0x03229EB8 LDP X20, X19, [X31 + 0x20]
	0x03229EBC LDP X22, X21, [X31 + 0x10]
	0x03229EC0 MOV X4, X1
	0x03229EC4 MOVN W3, 0x80000000
	0x03229EC8 MOV X1, X2
	0x03229ECC MOV X2, X4
	0x03229ED0 MOV W4, W31
	0x03229ED4 LDR X30, [X31], #0x30
	0x03229ED8 B 0x3229B48
	0x03229EDC STP X30, X23, [X31 - 0x30]!
	0x03229EE0 STP X22, X21, [X31 + 0x10]
	0x03229EE4 STP X20, X19, [X31 + 0x20]
	0x03229EE8 ADRP X22, 0x11B3000
	0x03229EEC ADRP X23, 0xEF9000
	0x03229EF0 LDRB W8, [X22 + 0x373]
	0x03229EF4 LDR X23, [X23 + 0x1D8]
	0x03229EF8 MOV W19, W2
	0x03229EFC MOV X21, X1
	0x03229F00 MOV X20, X0
	0x03229F04 TBNZ X8, 0x0, 0x3229F1C
	0x03229F08 ADRP X0, 0xEF9000
	0x03229F0C LDR X0, [X0 + 0x1D8]
	0x03229F10 BL 0x1C16CF4
	0x03229F14 MOVZ W8, 0x1
	0x03229F18 STRB W8, [X22 + 0x373]
	0x03229F1C LDR X1, [X23]
	0x03229F20 MOV X0, X21
	0x03229F24 BL 0x25BF134
	0x03229F28 MOV X2, X0
	0x03229F2C MOV X3, X1
	0x03229F30 MOV X0, X20
	0x03229F34 MOV X1, X2
	0x03229F38 MOV X2, X3
	0x03229F3C MOV W3, W19
	0x03229F40 LDP X20, X19, [X31 + 0x20]
	0x03229F44 LDP X22, X21, [X31 + 0x10]
	0x03229F48 MOV W4, W31
	0x03229F4C LDP X30, X23, [X31], #0x30
	0x03229F50 B 0x3229B48
	0x03229F54 STP X30, X23, [X31 - 0x30]!
	0x03229F58 STP X22, X21, [X31 + 0x10]
	0x03229F5C STP X20, X19, [X31 + 0x20]
	0x03229F60 ADRP X22, 0x11B3000
	0x03229F64 ADRP X23, 0xEF9000
	0x03229F68 LDRB W8, [X22 + 0x374]
	0x03229F6C LDR X23, [X23 + 0x1D8]
	0x03229F70 MOV W19, W2
	0x03229F74 MOV X21, X1
	0x03229F78 MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11B4000
	007 Move W8, [X22+895]
	008 Move W20, W2
	009 Move W21, W1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xECD000
	016 Move X0, [X0+632]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+895], W8
	020 Move TEMP, X21
	021 And TEMP, TEMP, -2147483648
	022 Compare TEMP, -2147483648
	023 JumpIfEqual {59}
	024 Move W8, [X19+16]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move TEMP, X20
	027 And TEMP, TEMP, -2147483648
	028 Compare TEMP, -2147483648
	029 JumpIfEqual {81}
	030 Subtract W9, W8, W20
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Compare W20, 0
	033 JumpIfEqual {47}
	034 Compare W21, 0
	035 JumpIfNotEqual {37}
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, X19
	038 Move W1, W21
	039 Move W2, W20
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X30, [X31+48]
	045 Call String.InternalSubString, X0, X1, X2
	046 Return X0
	047 Move X8, 0xECD000
	048 Move X8, [X8+632]
	049 Move X8, [X8]
	050 Move X8, [X8+184]
	051 Move X19, [X8]
	052 Move X0, X19
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X30, [X31+48]
	058 Return X0
	059 Move X0, 0xED3000
	060 Move X0, [X0+1888]
	061 Call 0x1C17D08
	062 Call 0x1C17F10
	063 Move X19, X0
	064 Move X0, 0xEF3000
	065 Move X0, [X0+1624]
	066 Call 0x1C17D08
	067 Move X20, X0
	068 Move X0, 0xEFA000
	069 Move X0, [X0+216]
	070 Move X0, 0xED3000
	071 Move X0, [X0+1888]
	072 Call 0x1C17D08
	073 Call 0x1C17F10
	074 Move X19, X0
	075 Move X0, 0xEF3000
	076 Move X0, [X0+1624]
	077 Call 0x1C17D08
	078 Move X20, X0
	079 Move X0, 0xEFA000
	080 Move X0, [X0+296]
	081 Move X0, 0xED3000
	082 Move X0, [X0+1888]
	083 Call 0x1C17D08
	084 Call 0x1C17F10
	085 Move X19, X0
	086 Move X0, 0xED3000
	087 Move X0, [X0+1896]
	088 Call 0x1C17D08
	089 Move X20, X0
	090 Move X0, 0xEFA000
	091 Move X0, [X0]
	092 Move X0, 0xED3000
	093 Move X0, [X0+1888]
	094 Call 0x1C17D08
	095 Call 0x1C17F10
	096 Move X19, X0
	097 Move X0, 0xED3000
	098 Move X0, [X0+1896]
	099 Call 0x1C17D08
	100 Move X20, X0
	101 Move X0, 0xEFA000
	102 Move X0, [X0+304]
	103 Call 0x1C17D08
	104 Move X2, X0
	105 Move X0, X19
	106 Move X1, X20
	107 Move X3, X31
	108 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	109 Move X0, 0xEFA000
	110 Move X0, [X0+312]
	111 Call 0x1C17D08
	112 Move X1, X0
	113 Move X0, X19
	114 Call 0x1C17DEC

Method: System.String InternalSubString(System.Int32 startIndex, System.Int32 length)

Disassembly:
	0x0322C58C BL 0x1C16F20
	0x0322C590 ADRP X0, 0xECC000
	0x0322C594 LDR X0, [X0 + 0x528]
	0x0322C598 BL 0x1C16D08
	0x0322C59C BL 0x1C16F10
	0x0322C5A0 MOV X19, X0
	0x0322C5A4 ADRP X0, 0xED1000
	0x0322C5A8 LDR X0, [X0 + 0xEC8]
	0x0322C5AC BL 0x1C16D08
	0x0322C5B0 MOV X1, X0
	0x0322C5B4 MOV X0, X19
	0x0322C5B8 MOV X2, X31
	0x0322C5BC BL 0x330E100
	0x0322C5C0 B 0x322C608
	0x0322C5C4 ADRP X0, 0xECF000
	0x0322C5C8 LDR X0, [X0 + 0x760]
	0x0322C5CC BL 0x1C16D08
	0x0322C5D0 BL 0x1C16F10
	0x0322C5D4 MOV X19, X0
	0x0322C5D8 ADRP X0, 0xEEF000
	0x0322C5DC LDR X0, [X0 + 0x648]
	0x0322C5E0 BL 0x1C16D08

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, X0
	007 Move W0, W2
	008 Move W20, W2
	009 Move W21, W1
	010 Call 0x1C8925C
	011 Compare X0, 0
	012 JumpIfEqual {29}
	013 Add X8, X22, W21
	014 Move X19, X0
	015 Add X0, X0, 20
	016 Add X1, X8, 20
	017 Move W2, W20
	018 ShiftRight W2, 31
	019 And W2, W2, 0x3FFFFFFF
	020 Move X3, X31
	021 Call Buffer.Memmove, X0, X1, X2
	022 Move X0, X19
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X22, [X31+16]
	026 Move X21, [X31+24]
	027 Move X30, [X31+48]
	028 Return X0
	029 Call 0x1C17F20

Method: System.String ToLower()

Disassembly:
	0x0322C5E4 MOV X20, X0
	0x0322C5E8 ADRP X0, 0xEEF000
	0x0322C5EC LDR X0, [X0 + 0x650]
	0x0322C5F0 BL 0x1C16D08
	0x0322C5F4 MOV X2, X0
	0x0322C5F8 MOV X0, X19
	0x0322C5FC MOV X1, X20
	0x0322C600 MOV X3, X31
	0x0322C604 BL 0x3311888
	0x0322C608 ADRP X0, 0xEF6000
	0x0322C60C LDR X0, [X0 + 0x218]
	0x0322C610 BL 0x1C16D08
	0x0322C614 MOV X1, X0
	0x0322C618 MOV X0, X19
	0x0322C61C BL 0x1C16DEC
	0x0322C620 ADRP X0, 0xECF000
	0x0322C624 LDR X0, [X0 + 0x578]
	0x0322C628 BL 0x1C16D08
	0x0322C62C BL 0x1C16F10
	0x0322C630 MOV X19, X0
	0x0322C634 ADRP X0, 0xEF5000
	0x0322C638 LDR X0, [X0 + 0xFD8]
	0x0322C63C BL 0x1C16D08
	0x0322C640 MOV X20, X0
	0x0322C644 ADRP X0, 0xEF5000
	0x0322C648 LDR X0, [X0 + 0xFE0]
	0x0322C64C BL 0x1C16D08
	0x0322C650 MOV X2, X0
	0x0322C654 MOV X0, X19
	0x0322C658 MOV X1, X20
	0x0322C65C MOV X3, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11B1000
	006 Move X21, 0xECA000
	007 Move W8, [X20+896]
	008 Move X21, [X21+3144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xECA000
	015 Move X0, [X0+3144]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+896], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X31
	025 Call CultureInfo.get_CurrentCulture
	026 Compare X0, 0
	027 JumpIfEqual {43}
	028 Move X8, [X0]
	029 Move X9, [X8+472]
	030 Move X1, [X8+480]
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Compare X0, 0
	033 JumpIfEqual {43}
	034 Move X8, [X0]
	035 Move X1, X19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X3, [X8+440]
	039 Move X2, [X8+448]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 CallNoReturn X3
	043 Call 0x1C17F20

Method: System.String ToLower(System.Globalization.CultureInfo culture)

Disassembly:
	0x0322C660 BL 0x330E16C
	0x0322C664 B 0x322C608
	0x0322C668 LDR W2, [X0 + 0x10]
	0x0322C66C ADD X0, X0, 0x14
	0x0322C670 MOV X3, X31
	0x0322C674 B 0x3391D08
	0x0322C678 ADD W3, W2, 0x1
	0x0322C67C B 0x322C680
	0x0322C680 STR X30, [X31 - 0x20]!
	0x0322C684 STP X20, X19, [X31 + 0x10]
	0x0322C688 LDR W8, [X0 + 0x10]
	0x0322C68C CBZ W8, 0x322C6C8
	0x0322C690 CMP W8, W2
	0x0322C694 B.LS 0x322C6D8
	0x0322C698 ADD W8, W2, 0x1
	0x0322C69C SUBS W19, W8, W3
	0x0322C6A0 B.CC 0x322C708
	0x0322C6A4 ADD X8, X0, W19, 0x1, SXTW
	0x0322C6A8 ADD X0, X8, 0x14
	0x0322C6AC MOV W2, W3
	0x0322C6B0 MOV X3, X31
	0x0322C6B4 BL 0x3391D08
	0x0322C6B8 ADD W8, W0, W19
	0x0322C6BC ADDS W31, W0, 0x1
	0x0322C6C0 CSINV W0, W8, W31, NE
	0x0322C6C4 B 0x322C6CC
	0x0322C6C8 MOVN W0, 0x0
	0x0322C6CC LDP X20, X19, [X31 + 0x10]
	0x0322C6D0 LDR X30, [X31], #0x20
	0x0322C6D4 RET
	0x0322C6D8 ADRP X0, 0xECF000
	0x0322C6DC LDR X0, [X0 + 0x760]
	0x0322C6E0 BL 0x1C16D08

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X1, 0
	004 JumpIfEqual {21}
	005 Move X8, [X1]
	006 Move X19, X0
	007 Move X0, X1
	008 Move X9, [X8+472]
	009 Move X8, [X8+480]
	010 Move X1, X8
	011 NotImplemented "Instruction BLR not yet implemented."
	012 Compare X0, 0
	013 JumpIfEqual {39}
	014 Move X8, [X0]
	015 Move X1, X19
	016 Move X3, [X8+440]
	017 Move X2, [X8+448]
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 CallNoReturn X3
	021 Move X0, 0xECD000
	022 Move X0, [X0+1320]
	023 Call 0x1C17D08
	024 Call 0x1C17F10
	025 Move X19, X0
	026 Move X0, 0xEF6000
	027 Move X0, [X0+4080]
	028 Call 0x1C17D08
	029 Move X1, X0
	030 Move X0, X19
	031 Move X2, X31
	032 Call ArgumentNullException..ctor, X0, X1
	033 Move X0, 0xEF7000
	034 Move X0, [X0+496]
	035 Call 0x1C17D08
	036 Move X1, X0
	037 Move X0, X19
	038 Call 0x1C17DEC
	039 Call 0x1C17F20

Method: System.String ToLowerInvariant()

Disassembly:
	0x0322C6E4 BL 0x1C16F10
	0x0322C6E8 MOV X19, X0
	0x0322C6EC ADRP X0, 0xEEF000
	0x0322C6F0 LDR X0, [X0 + 0x658]
	0x0322C6F4 BL 0x1C16D08
	0x0322C6F8 MOV X20, X0
	0x0322C6FC ADRP X0, 0xEEF000
	0x0322C700 LDR X0, [X0 + 0x660]
	0x0322C704 B 0x322C734
	0x0322C708 ADRP X0, 0xECF000
	0x0322C70C LDR X0, [X0 + 0x760]
	0x0322C710 BL 0x1C16D08
	0x0322C714 BL 0x1C16F10
	0x0322C718 MOV X19, X0
	0x0322C71C ADRP X0, 0xEEF000
	0x0322C720 LDR X0, [X0 + 0x648]
	0x0322C724 BL 0x1C16D08
	0x0322C728 MOV X20, X0
	0x0322C72C ADRP X0, 0xEEF000
	0x0322C730 LDR X0, [X0 + 0x650]
	0x0322C734 BL 0x1C16D08
	0x0322C738 MOV X2, X0
	0x0322C73C MOV X0, X19
	0x0322C740 MOV X1, X20
	0x0322C744 MOV X3, X31
	0x0322C748 BL 0x3311888
	0x0322C74C ADRP X0, 0xEF6000
	0x0322C750 LDR X0, [X0 + 0x220]
	0x0322C754 BL 0x1C16D08
	0x0322C758 MOV X1, X0
	0x0322C75C MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11B1000
	006 Move X21, 0xECA000
	007 Move W8, [X20+897]
	008 Move X21, [X21+3144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xECA000
	015 Move X0, [X0+3144]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+897], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X31
	025 Call CultureInfo.get_InvariantCulture
	026 Compare X0, 0
	027 JumpIfEqual {43}
	028 Move X8, [X0]
	029 Move X9, [X8+472]
	030 Move X1, [X8+480]
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Compare X0, 0
	033 JumpIfEqual {43}
	034 Move X8, [X0]
	035 Move X1, X19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X3, [X8+440]
	039 Move X2, [X8+448]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 CallNoReturn X3
	043 Call 0x1C17F20

Method: System.String ToUpper()

Disassembly:
	0x0322C760 BL 0x1C16DEC
	0x0322C764 LDR W3, [X0 + 0x10]
	0x0322C768 SUB W2, W3, 0x1
	0x0322C76C B 0x322C770
	0x0322C770 STR X30, [X31 - 0x20]!
	0x0322C774 STP X20, X19, [X31 + 0x10]
	0x0322C778 CBZ X1, 0x322C7DC
	0x0322C77C LDR W8, [X0 + 0x10]
	0x0322C780 CBZ W8, 0x322C7C0
	0x0322C784 CMP W8, W2
	0x0322C788 B.LS 0x322C810
	0x0322C78C TBNZ X3, 0x1F, 0x322C840
	0x0322C790 SUB W8, W3, 0x1
	0x0322C794 CMP W8, W2
	0x0322C798 B.GT 0x322C840
	0x0322C79C LDR W8, [X1 + 0x18]
	0x0322C7A0 CMP W8, 0x2
	0x0322C7A4 B.GE 0x322C7D0
	0x0322C7A8 CMP W8, 0x1
	0x0322C7AC B.NE 0x322C7C0
	0x0322C7B0 LDRH W1, [X1 + 0x20]
	0x0322C7B4 LDP X20, X19, [X31 + 0x10]
	0x0322C7B8 LDR X30, [X31], #0x20
	0x0322C7BC B 0x322C680
	0x0322C7C0 LDP X20, X19, [X31 + 0x10]
	0x0322C7C4 MOVN W0, 0x0
	0x0322C7C8 LDR X30, [X31], #0x20
	0x0322C7CC RET
	0x0322C7D0 LDP X20, X19, [X31 + 0x10]
	0x0322C7D4 LDR X30, [X31], #0x20
	0x0322C7D8 B 0x322C8A4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11B1000
	006 Move X21, 0xECA000
	007 Move W8, [X20+898]
	008 Move X21, [X21+3144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xECA000
	015 Move X0, [X0+3144]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+898], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X31
	025 Call CultureInfo.get_CurrentCulture
	026 Compare X0, 0
	027 JumpIfEqual {43}
	028 Move X8, [X0]
	029 Move X9, [X8+472]
	030 Move X1, [X8+480]
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Compare X0, 0
	033 JumpIfEqual {43}
	034 Move X8, [X0]
	035 Move X1, X19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X3, [X8+472]
	039 Move X2, [X8+480]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 CallNoReturn X3
	043 Call 0x1C17F20

Method: System.String ToUpper(System.Globalization.CultureInfo culture)

Disassembly:
	0x0322C7DC ADRP X0, 0xECC000
	0x0322C7E0 LDR X0, [X0 + 0x528]
	0x0322C7E4 BL 0x1C16D08
	0x0322C7E8 BL 0x1C16F10
	0x0322C7EC MOV X19, X0
	0x0322C7F0 ADRP X0, 0xEF6000
	0x0322C7F4 LDR X0, [X0 + 0x208]
	0x0322C7F8 BL 0x1C16D08
	0x0322C7FC MOV X1, X0
	0x0322C800 MOV X0, X19
	0x0322C804 MOV X2, X31
	0x0322C808 BL 0x330E100
	0x0322C80C B 0x322C884
	0x0322C810 ADRP X0, 0xECF000
	0x0322C814 LDR X0, [X0 + 0x760]
	0x0322C818 BL 0x1C16D08
	0x0322C81C BL 0x1C16F10
	0x0322C820 MOV X19, X0
	0x0322C824 ADRP X0, 0xEEF000
	0x0322C828 LDR X0, [X0 + 0x658]
	0x0322C82C BL 0x1C16D08
	0x0322C830 MOV X20, X0
	0x0322C834 ADRP X0, 0xEEF000
	0x0322C838 LDR X0, [X0 + 0x660]
	0x0322C83C B 0x322C86C
	0x0322C840 ADRP X0, 0xECF000
	0x0322C844 LDR X0, [X0 + 0x760]
	0x0322C848 BL 0x1C16D08
	0x0322C84C BL 0x1C16F10
	0x0322C850 MOV X19, X0
	0x0322C854 ADRP X0, 0xEEF000
	0x0322C858 LDR X0, [X0 + 0x648]
	0x0322C85C BL 0x1C16D08

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X1, 0
	004 JumpIfEqual {21}
	005 Move X8, [X1]
	006 Move X19, X0
	007 Move X0, X1
	008 Move X9, [X8+472]
	009 Move X8, [X8+480]
	010 Move X1, X8
	011 NotImplemented "Instruction BLR not yet implemented."
	012 Compare X0, 0
	013 JumpIfEqual {39}
	014 Move X8, [X0]
	015 Move X1, X19
	016 Move X3, [X8+472]
	017 Move X2, [X8+480]
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 CallNoReturn X3
	021 Move X0, 0xECD000
	022 Move X0, [X0+1320]
	023 Call 0x1C17D08
	024 Call 0x1C17F10
	025 Move X19, X0
	026 Move X0, 0xEF6000
	027 Move X0, [X0+4080]
	028 Call 0x1C17D08
	029 Move X1, X0
	030 Move X0, X19
	031 Move X2, X31
	032 Call ArgumentNullException..ctor, X0, X1
	033 Move X0, 0xEF7000
	034 Move X0, [X0+504]
	035 Call 0x1C17D08
	036 Move X1, X0
	037 Move X0, X19
	038 Call 0x1C17DEC
	039 Call 0x1C17F20

Method: System.String ToUpperInvariant()

Disassembly:
	0x0322C860 MOV X20, X0
	0x0322C864 ADRP X0, 0xEEF000
	0x0322C868 LDR X0, [X0 + 0x650]
	0x0322C86C BL 0x1C16D08
	0x0322C870 MOV X2, X0
	0x0322C874 MOV X0, X19
	0x0322C878 MOV X1, X20
	0x0322C87C MOV X3, X31
	0x0322C880 BL 0x3311888
	0x0322C884 ADRP X0, 0xEF6000
	0x0322C888 LDR X0, [X0 + 0x228]
	0x0322C88C BL 0x1C16D08
	0x0322C890 MOV X1, X0
	0x0322C894 MOV X0, X19
	0x0322C898 BL 0x1C16DEC
	0x0322C89C ADD W3, W2, 0x1
	0x0322C8A0 B 0x322C770
	0x0322C8A4 SUB X31, X31, 0x70
	0x0322C8A8 STP X30, X25, [X31 + 0x30]
	0x0322C8AC STP X24, X23, [X31 + 0x40]
	0x0322C8B0 STP X22, X21, [X31 + 0x50]
	0x0322C8B4 STP X20, X19, [X31 + 0x60]
	0x0322C8B8 MRS X23, 0xC000
	0x0322C8BC LDR X8, [X23 + 0x28]
	0x0322C8C0 ADRP X25, 0x11B0000
	0x0322C8C4 ADRP X24, 0xEF6000
	0x0322C8C8 MOV W20, W3
	0x0322C8CC STR X8, [X31 + 0x28]
	0x0322C8D0 LDRB W8, [X25 + 0x389]
	0x0322C8D4 LDR X24, [X24 + 0x1D8]
	0x0322C8D8 MOV W21, W2

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11B1000
	006 Move X21, 0xECA000
	007 Move W8, [X20+899]
	008 Move X21, [X21+3144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xECA000
	015 Move X0, [X0+3144]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+899], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X31
	025 Call CultureInfo.get_InvariantCulture
	026 Compare X0, 0
	027 JumpIfEqual {43}
	028 Move X8, [X0]
	029 Move X9, [X8+472]
	030 Move X1, [X8+480]
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Compare X0, 0
	033 JumpIfEqual {43}
	034 Move X8, [X0]
	035 Move X1, X19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X3, [X8+472]
	039 Move X2, [X8+480]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 CallNoReturn X3
	043 Call 0x1C17F20

Method: System.String Trim()

Disassembly:
	0x0322C8DC MOV X19, X1
	0x0322C8E0 MOV X22, X0

ISIL:
	001 Move W1, 2

Method: System.String Trim(System.Char trimChar)

Disassembly:
	0x0322CA1C BL 0x1C16CF4
	0x0322CA20 ADRP X0, 0xEC9000
	0x0322CA24 LDR X0, [X0 + 0xC48]
	0x0322CA28 BL 0x1C16CF4
	0x0322CA2C MOVZ W8, 0x1
	0x0322CA30 STRB W8, [X24 + 0x38A]
	0x0322CA34 CBZ X21, 0x322CCA8
	0x0322CA38 LDR W8, [X22 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 NotImplemented "Instruction STRH not yet implemented."
	003 Add X1, X31, 12
	004 Move W2, 1
	005 Move W3, 2
	006 Call String.TrimHelper, X0, X1, X2, X3
	007 Move X30, [X31+16]
	008 Return X0

Method: System.String Trim(System.Char[] trimChars)

Disassembly:
	0x0322CBA0 BL 0x1C16DFC
	0x0322CBA4 LDR X0, [X23]
	0x0322CBA8 LDR X8, [X0 + 0xB8]
	0x0322CBAC LDR X0, [X8]
	0x0322CBB0 CBZ X0, 0x322CD38
	0x0322CBB4 LDR X8, [X0]
	0x0322CBB8 MOVZ W5, 0x1
	0x0322CBBC MOV X1, X22
	0x0322CBC0 MOV X2, X21
	0x0322CBC4 LDP X7, X6, [X8 + 0x1F8]
	0x0322CBC8 MOV W3, W20
	0x0322CBCC MOV W4, W19
	0x0322CBD0 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {14}
	004 Move X2, [X1+24]
	005 Compare X2, 0
	006 JumpIfEqual {14}
	007 Compare W2, 0
	008 JumpIfEqual {18}
	009 Add X1, X1, 32
	010 Move W3, 2
	011 Move X30, [X31+16]
	012 Call String.TrimHelper, X0, X1, X2, X3
	013 Return X0
	014 Move W1, 2
	015 Move X30, [X31+16]
	016 Call String.TrimWhiteSpaceHelper, X0, X1
	017 Return X0
	018 Call 0x1C17F28

Method: System.String TrimStart()

Disassembly:
	0x0322CBD4 LDP X22, X21, [X31 + 0x20]
	0x0322CBD8 LDP X24, X23, [X31 + 0x10]

ISIL:
	001 Move W1, W31
	002 Call String.TrimWhiteSpaceHelper, X0, X1
	003 Return X0

Method: System.String TrimStart(System.Char trimChar)

Disassembly:
	0x0322CBDC LDR X30, [X31], #0x40
	0x0322CBE0 BR X7
	0x0322CBE4 ADRP X23, 0xEF5000
	0x0322CBE8 LDR X23, [X23 + 0xFD0]
	0x0322CBEC LDR X0, [X23]
	0x0322CBF0 LDR W8, [X0 + 0xE0]
	0x0322CBF4 CBNZ W8, 0x322CC00
	0x0322CBF8 BL 0x1C16DFC

ISIL:
	001 Move [X31-16], X30
	002 NotImplemented "Instruction STRH not yet implemented."
	003 Add X1, X31, 12
	004 Move W2, 1
	005 Move W3, W31
	006 Call String.TrimHelper, X0, X1, X2, X3
	007 Move X30, [X31+16]
	008 Return X0

Method: System.String TrimStart(System.Char[] trimChars)

Disassembly:
	0x0322CBFC LDR X0, [X23]
	0x0322CC00 LDR X8, [X0 + 0xB8]
	0x0322CC04 LDR X0, [X8]
	0x0322CC08 CBZ X0, 0x322CD38
	0x0322CC0C MOV X1, X22
	0x0322CC10 MOV X2, X21
	0x0322CC14 MOV W3, W20
	0x0322CC18 MOV W4, W19
	0x0322CC1C MOV W5, W31
	0x0322CC20 B 0x322CC60
	0x0322CC24 ADRP X23, 0xEF5000
	0x0322CC28 LDR X23, [X23 + 0xFD0]
	0x0322CC2C LDR X0, [X23]

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {14}
	004 Move X2, [X1+24]
	005 Compare X2, 0
	006 JumpIfEqual {14}
	007 Compare W2, 0
	008 JumpIfEqual {18}
	009 Add X1, X1, 32
	010 Move W3, W31
	011 Move X30, [X31+16]
	012 Call String.TrimHelper, X0, X1, X2, X3
	013 Return X0
	014 Move W1, W31
	015 Move X30, [X31+16]
	016 Call String.TrimWhiteSpaceHelper, X0, X1
	017 Return X0
	018 Call 0x1C17F28

Method: System.String TrimEnd()

Disassembly:
	0x0322CC30 LDR W8, [X0 + 0xE0]
	0x0322CC34 CBNZ W8, 0x322CC40

ISIL:
	001 Move W1, 1
	002 Call String.TrimWhiteSpaceHelper, X0, X1
	003 Return X0

Method: System.String TrimEnd(System.Char trimChar)

Disassembly:
	0x0322CC38 BL 0x1C16DFC
	0x0322CC3C LDR X0, [X23]
	0x0322CC40 LDR X8, [X0 + 0xB8]
	0x0322CC44 LDR X0, [X8]
	0x0322CC48 CBZ X0, 0x322CD38
	0x0322CC4C MOVZ W5, 0x1
	0x0322CC50 MOV X1, X22
	0x0322CC54 MOV X2, X21

ISIL:
	001 Move [X31-16], X30
	002 NotImplemented "Instruction STRH not yet implemented."
	003 Add X1, X31, 12
	004 Move W2, 1
	005 Move W3, 1
	006 Call String.TrimHelper, X0, X1, X2, X3
	007 Move X30, [X31+16]
	008 Return X0

Method: System.String TrimEnd(System.Char[] trimChars)

Disassembly:
	0x0322CC58 MOV W3, W20
	0x0322CC5C MOV W4, W19
	0x0322CC60 LDP X20, X19, [X31 + 0x30]
	0x0322CC64 LDP X22, X21, [X31 + 0x20]
	0x0322CC68 LDP X24, X23, [X31 + 0x10]
	0x0322CC6C MOV X6, X31
	0x0322CC70 LDR X30, [X31], #0x40
	0x0322CC74 B 0x33065A8
	0x0322CC78 ADRP X0, 0xECF000
	0x0322CC7C LDR X0, [X0 + 0x760]
	0x0322CC80 BL 0x1C16D08
	0x0322CC84 BL 0x1C16F10
	0x0322CC88 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {14}
	004 Move X2, [X1+24]
	005 Compare X2, 0
	006 JumpIfEqual {14}
	007 Compare W2, 0
	008 JumpIfEqual {18}
	009 Add X1, X1, 32
	010 Move W3, 1
	011 Move X30, [X31+16]
	012 Call String.TrimHelper, X0, X1, X2, X3
	013 Return X0
	014 Move W1, 1
	015 Move X30, [X31+16]
	016 Call String.TrimWhiteSpaceHelper, X0, X1
	017 Return X0
	018 Call 0x1C17F28

Method: System.String TrimWhiteSpaceHelper(System.String/TrimType trimType)

Disassembly:
	0x0322C8E4 TBNZ X8, 0x0, 0x322C8FC
	0x0322C8E8 ADRP X0, 0xEF6000
	0x0322C8EC LDR X0, [X0 + 0x1D8]
	0x0322C8F0 BL 0x1C16CF4
	0x0322C8F4 MOVZ W8, 0x1
	0x0322C8F8 STRB W8, [X25 + 0x389]
	0x0322C8FC LDR X1, [X24]
	0x0322C900 MOVI V0.2D, 0x0
	0x0322C904 MOV X0, X19
	0x0322C908 STP V0, V0, [X31]
	0x0322C90C BL 0x25BF134
	0x0322C910 MOV X2, X0
	0x0322C914 MOV X3, X1
	0x0322C918 ADD X0, X31, 0x0
	0x0322C91C MOV X1, X2
	0x0322C920 MOV X2, X3
	0x0322C924 ADD X24, X31, 0x0
	0x0322C928 BL 0x322B490
	0x0322C92C CMP W20, 0x1
	0x0322C930 B.LT 0x322C994
	0x0322C934 ADD X22, X22, 0x14
	0x0322C938 SBFM X21, X21, 0x3F, 0x1F
	0x0322C93C ADD W20, W20, 0x1
	0x0322C940 LDRH W0, [X22, X21, LSL]
	0x0322C944 AND W8, W0, 0xFF
	0x0322C948 UBFM W8, W8, 0x1E, 0x1D
	0x0322C94C AND X8, X8, 0x1F
	0x0322C950 LDR W8, [X8, X24, LSL]
	0x0322C954 UBFM W9, W0, 0x3, 0x7
	0x0322C958 LSRV W8, W8, W9
	0x0322C95C TBZ X8, 0x0, 0x322C984
	0x0322C960 UBFM X8, X0, 0x6, 0x3F
	0x0322C964 AND X8, X8, 0x1F
	0x0322C968 LDR W8, [X8, X24, LSL]
	0x0322C96C UBFM X9, X0, 0xB, 0x3F
	0x0322C970 LSRV W8, W8, W9
	0x0322C974 TBZ X8, 0x0, 0x322C984
	0x0322C978 MOV X1, X19
	0x0322C97C BL 0x322C270
	0x0322C980 TBNZ X0, 0x0, 0x322C9C0
	0x0322C984 SUB W20, W20, 0x1
	0x0322C988 CMP W20, 0x1
	0x0322C98C SUB X21, X21, 0x2
	0x0322C990 B.GT 0x322C940
	0x0322C994 MOVN W0, 0x0
	0x0322C998 LDR X8, [X23 + 0x28]
	0x0322C99C LDR X9, [X31 + 0x28]
	0x0322C9A0 CMP X8, X9
	0x0322C9A4 B.NE 0x322C9D0
	0x0322C9A8 LDP X20, X19, [X31 + 0x60]
	0x0322C9AC LDP X22, X21, [X31 + 0x50]
	0x0322C9B0 LDP X24, X23, [X31 + 0x40]
	0x0322C9B4 LDP X30, X25, [X31 + 0x30]
	0x0322C9B8 ADD X31, X31, 0x70
	0x0322C9BC RET
	0x0322C9C0 CMP X21, 0x0
	0x0322C9C4 CINC X8, X21, LT
	0x0322C9C8 UBFM X0, X8, 0x1, 0x3F
	0x0322C9CC B 0x322C998
	0x0322C9D0 BL 0x3EB1B20
	0x0322C9D4 LDR W3, [X0 + 0x10]
	0x0322C9D8 MOV W4, W31
	0x0322C9DC SUB W2, W3, 0x1
	0x0322C9E0 B 0x322C9E4
	0x0322C9E4 STR X30, [X31 - 0x40]!
	0x0322C9E8 STP X24, X23, [X31 + 0x10]
	0x0322C9EC STP X22, X21, [X31 + 0x20]
	0x0322C9F0 STP X20, X19, [X31 + 0x30]
	0x0322C9F4 ADRP X24, 0x11B0000
	0x0322C9F8 LDRB W8, [X24 + 0x38A]
	0x0322C9FC MOV W23, W4
	0x0322CA00 MOV W19, W3
	0x0322CA04 MOV W20, W2
	0x0322CA08 MOV X21, X1
	0x0322CA0C MOV X22, X0
	0x0322CA10 TBNZ X8, 0x0, 0x322CA34
	0x0322CA14 ADRP X0, 0xEF5000
	0x0322CA18 LDR X0, [X0 + 0xFD0]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x11B1000
	010 Move W8, [X20+900]
	011 Move W21, W1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xECA000
	018 Move X0, [X0+368]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+900], W8
	022 Move X23, 0xECA000
	023 Move W24, [X19+16]
	024 Move X23, [X23+368]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W20, W31
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X20, X31
	029 Add X25, X19, 20
	030 Move W8, W24
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X0, X31
	033 Call ThrowHelper.ThrowIndexOutOfRangeException
	034 Move X0, [X23]
	035 NotImplemented "Instruction LDRH not yet implemented."
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move W0, W22
	041 Move X1, X31
	042 Call Char.IsWhiteSpace, X0
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {50}
	047 NotImplemented "Instruction LDRSW not yet implemented."
	048 Add X20, X20, 1
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Compare W21, 0
	051 JumpIfEqual {79}
	052 Move W24, [X19+16]
	053 Add X25, X19, 20
	054 Subtract W8, W24, 1
	055 Move W21, W8
	056 NotImplemented "Instruction CMP not yet implemented."
	057 NotImplemented "Instruction LDRSW not yet implemented."
	058 Move W9, W21
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X0, X31
	061 Call ThrowHelper.ThrowIndexOutOfRangeException
	062 Move X0, [X23]
	063 NotImplemented "Instruction LDRH not yet implemented."
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move W0, W22
	069 Move X1, X31
	070 Call Char.IsWhiteSpace, X0
	071 Subtract W8, W21, 1
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfEqual {55}
	076 Move W20, W31
	077 Compare W21, 0
	078 JumpIfNotEqual {52}
	079 Subtract W21, W24, 1
	080 Move X0, X19
	081 Move W1, W20
	082 Move W2, W21
	083 Move X20, [X31+48]
	084 Move X19, [X31+56]
	085 Move X22, [X31+32]
	086 Move X21, [X31+40]
	087 Move X24, [X31+16]
	088 Move X23, [X31+24]
	089 Move X30, [X31+64]
	090 Move X25, [X31+72]
	091 Call String.CreateTrimmedString, X0, X1, X2
	092 Return X0

Method: System.String TrimHelper(System.Char* trimChars, System.Int32 trimCharsLength, System.String/TrimType trimType)

Disassembly:
	0x0322CA3C CBZ W8, 0x322CAD8
	0x0322CA40 TBNZ X20, 0x1F, 0x322CCDC
	0x0322CA44 CMP W8, W20
	0x0322CA48 B.LT 0x322CCDC
	0x0322CA4C B.NE 0x322CA64
	0x0322CA50 SUBS W8, W19, 0x1
	0x0322CA54 SUB W20, W20, 0x1
	0x0322CA58 B.LT 0x322CA64
	0x0322CA5C MOV W19, W8
	0x0322CA60 B 0x322CA68
	0x0322CA64 TBNZ X19, 0x1F, 0x322CC78
	0x0322CA68 SUB W8, W20, W19
	0x0322CA6C ADDS W31, W8, 0x1
	0x0322CA70 B.MI 0x322CC78
	0x0322CA74 LDR W8, [X21 + 0x10]
	0x0322CA78 CBZ W8, 0x322CAF4
	0x0322CA7C CMP W23, 0x5
	0x0322CA80 B.HI 0x322CD3C
	0x0322CA84 ADRP X9, 0xFFFFFFFFFD96A000
	0x0322CA88 MOV W8, W23
	0x0322CA8C ADD X9, X9, 0x47D
	0x0322CA90 ADR X10, 0x10
	0x0322CA94 LDRB W11, [X9, X8, LSL]
	0x0322CA98 ADD X10, X10, X11, 0x2, LSL
	0x0322CA9C BR X10
	0x0322CAA0 ADRP X8, 0xEC9000
	0x0322CAA4 LDR X8, [X8 + 0xC48]
	0x0322CAA8 LDR X0, [X8]
	0x0322CAAC LDR W8, [X0 + 0xE0]
	0x0322CAB0 CBNZ W8, 0x322CAB8
	0x0322CAB4 BL 0x1C16DFC
	0x0322CAB8 MOV X0, X31
	0x0322CABC BL 0x33387A0
	0x0322CAC0 CBZ X0, 0x322CD38
	0x0322CAC4 LDR X8, [X0]
	0x0322CAC8 LDP X9, X1, [X8 + 0x1F8]
	0x0322CACC BLR X9
	0x0322CAD0 CBNZ X0, 0x322CB6C
	0x0322CAD4 B 0x322CD38
	0x0322CAD8 ADD W9, W20, 0x1
	0x0322CADC CMP W9, 0x1
	0x0322CAE0 B.HI 0x322CA40
	0x0322CAE4 LDR W8, [X21 + 0x10]
	0x0322CAE8 CMP W8, 0x0
	0x0322CAEC CSINV W0, W31, W31, EQ
	0x0322CAF0 B 0x322CAF8
	0x0322CAF4 MOV W0, W20
	0x0322CAF8 LDP X20, X19, [X31 + 0x30]
	0x0322CAFC LDP X22, X21, [X31 + 0x20]
	0x0322CB00 LDP X24, X23, [X31 + 0x10]
	0x0322CB04 LDR X30, [X31], #0x40
	0x0322CB08 RET
	0x0322CB0C ADRP X8, 0xEC9000
	0x0322CB10 LDR X8, [X8 + 0xC48]
	0x0322CB14 LDR X0, [X8]
	0x0322CB18 LDR W8, [X0 + 0xE0]
	0x0322CB1C CBNZ W8, 0x322CB24
	0x0322CB20 BL 0x1C16DFC
	0x0322CB24 MOV X0, X31
	0x0322CB28 BL 0x33387A0
	0x0322CB2C CBZ X0, 0x322CD38
	0x0322CB30 LDR X8, [X0]
	0x0322CB34 LDP X9, X1, [X8 + 0x1F8]
	0x0322CB38 BLR X9
	0x0322CB3C CBNZ X0, 0x322CBB4
	0x0322CB40 B 0x322CD38
	0x0322CB44 ADRP X23, 0xEF5000
	0x0322CB48 LDR X23, [X23 + 0xFD0]
	0x0322CB4C LDR X0, [X23]
	0x0322CB50 LDR W8, [X0 + 0xE0]
	0x0322CB54 CBNZ W8, 0x322CB60
	0x0322CB58 BL 0x1C16DFC
	0x0322CB5C LDR X0, [X23]
	0x0322CB60 LDR X8, [X0 + 0xB8]
	0x0322CB64 LDR X0, [X8]
	0x0322CB68 CBZ X0, 0x322CD38
	0x0322CB6C LDR X8, [X0]
	0x0322CB70 MOV X1, X22
	0x0322CB74 MOV X2, X21
	0x0322CB78 MOV W3, W20
	0x0322CB7C LDP X7, X6, [X8 + 0x1F8]
	0x0322CB80 MOV W4, W19
	0x0322CB84 MOV W5, W31
	0x0322CB88 B 0x322CBD0
	0x0322CB8C ADRP X23, 0xEF5000
	0x0322CB90 LDR X23, [X23 + 0xFD0]
	0x0322CB94 LDR X0, [X23]
	0x0322CB98 LDR W8, [X0 + 0xE0]
	0x0322CB9C CBNZ W8, 0x322CBA8

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move W25, [X0+16]
	012 Move W21, W2
	013 Move X22, X1
	014 Move X19, X0
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Subtract W20, W25, 1
	017 Move W23, W31
	018 Move W24, W3
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X23, X31
	021 Add X26, X19, 20
	022 Move W27, W21
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X0, X31
	025 Call ThrowHelper.ThrowIndexOutOfRangeException
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction LDRH not yet implemented."
	028 Move X8, X31
	029 Move X10, X22
	030 NotImplemented "Instruction LDRH not yet implemented."
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Add X8, X8, 1
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Add X10, X10, 2
	035 Move W8, W31
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction LDRSW not yet implemented."
	038 Add X23, X23, 1
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move W23, W31
	041 Compare W24, 0
	042 JumpIfEqual {69}
	043 Move W25, [X19+16]
	044 Subtract W20, W25, 1
	045 Subtract W8, W23, 1
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Add X24, X19, 20
	048 NotImplemented "Instruction CSEL not yet implemented."
	049 Move W26, W21
	050 Subtract W25, W25, 1
	051 NotImplemented "Instruction CMP not yet implemented."
	052 NotImplemented "Instruction LDRSW not yet implemented."
	053 Move W9, W25
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X0, X31
	056 Call ThrowHelper.ThrowIndexOutOfRangeException
	057 NotImplemented "Instruction CMP not yet implemented."
	058 NotImplemented "Instruction LDRH not yet implemented."
	059 Move X8, X31
	060 Move X10, X22
	061 NotImplemented "Instruction LDRH not yet implemented."
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Add X8, X8, 1
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Add X10, X10, 2
	066 Move W8, W31
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move W20, W25
	069 Move X0, X19
	070 Move W1, W23
	071 Move W2, W20
	072 Move X20, [X31+64]
	073 Move X19, [X31+72]
	074 Move X22, [X31+48]
	075 Move X21, [X31+56]
	076 Move X24, [X31+32]
	077 Move X23, [X31+40]
	078 Move X26, [X31+16]
	079 Move X25, [X31+24]
	080 Move X30, [X31+80]
	081 Move X27, [X31+88]
	082 Call String.CreateTrimmedString, X0, X1, X2
	083 Return X0

Method: System.String CreateTrimmedString(System.Int32 start, System.Int32 end)

Disassembly:
	0x0322CC8C ADRP X0, 0xEEF000
	0x0322CC90 LDR X0, [X0 + 0x648]
	0x0322CC94 BL 0x1C16D08
	0x0322CC98 MOV X20, X0
	0x0322CC9C ADRP X0, 0xEEF000
	0x0322CCA0 LDR X0, [X0 + 0x650]
	0x0322CCA4 B 0x322CD08
	0x0322CCA8 ADRP X0, 0xECC000
	0x0322CCAC LDR X0, [X0 + 0x528]
	0x0322CCB0 BL 0x1C16D08
	0x0322CCB4 BL 0x1C16F10
	0x0322CCB8 MOV X19, X0
	0x0322CCBC ADRP X0, 0xED1000
	0x0322CCC0 LDR X0, [X0 + 0xEC8]
	0x0322CCC4 BL 0x1C16D08
	0x0322CCC8 MOV X1, X0
	0x0322CCCC MOV X0, X19
	0x0322CCD0 MOV X2, X31
	0x0322CCD4 BL 0x330E100
	0x0322CCD8 B 0x322CD20
	0x0322CCDC ADRP X0, 0xECF000
	0x0322CCE0 LDR X0, [X0 + 0x760]
	0x0322CCE4 BL 0x1C16D08
	0x0322CCE8 BL 0x1C16F10
	0x0322CCEC MOV X19, X0
	0x0322CCF0 ADRP X0, 0xEEF000
	0x0322CCF4 LDR X0, [X0 + 0x658]
	0x0322CCF8 BL 0x1C16D08
	0x0322CCFC MOV X20, X0
	0x0322CD00 ADRP X0, 0xEEF000
	0x0322CD04 LDR X0, [X0 + 0x660]
	0x0322CD08 BL 0x1C16D08
	0x0322CD0C MOV X2, X0
	0x0322CD10 MOV X0, X19
	0x0322CD14 MOV X1, X20
	0x0322CD18 MOV X3, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11B1000
	007 Move W8, [X22+901]
	008 Move W21, W2
	009 Move W20, W1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xECA000
	016 Move X0, [X0+632]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+901], W8
	020 Move W8, [X19+16]
	021 Subtract W9, W21, W20
	022 Add W2, W9, 1
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Compare W2, 0
	025 JumpIfEqual {35}
	026 Move X0, X19
	027 Move W1, W20
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]
	033 Call String.InternalSubString, X0, X1, X2
	034 Return X0
	035 Move X8, 0xECA000
	036 Move X8, [X8+632]
	037 Move X8, [X8]
	038 Move X8, [X8+184]
	039 Move X19, [X8]
	040 Move X0, X19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Return X0

Method: System.Boolean Contains(System.String value)

Disassembly:
	0x0322CD1C BL 0x3311888
	0x0322CD20 ADRP X0, 0xEF6000
	0x0322CD24 LDR X0, [X0 + 0x230]
	0x0322CD28 BL 0x1C16D08
	0x0322CD2C MOV X1, X0
	0x0322CD30 MOV X0, X19
	0x0322CD34 BL 0x1C16DEC
	0x0322CD38 BL 0x1C16F20
	0x0322CD3C ADRP X0, 0xECF000

ISIL:
	001 Move [X31-16], X30
	002 Move W3, [X0+16]
	003 Move W4, 4
	004 Move W2, W31
	005 Call String.IndexOf, X0, X1, X2, X3, X4
	006 NotImplemented "Instruction ORN not yet implemented."
	007 Move W0, W8
	008 ShiftRight W0, 31
	009 And W0, W0, 0x7FFFFFFF
	010 Move X30, [X31+16]
	011 Return X0

Method: System.Boolean Contains(System.String value, System.StringComparison comparisonType)

Disassembly:
	0x0322CD50 ADRP X0, 0xEF5000
	0x0322CD54 LDR X0, [X0 + 0xFD8]
	0x0322CD58 BL 0x1C16D08
	0x0322CD5C MOV X20, X0
	0x0322CD60 ADRP X0, 0xEF5000
	0x0322CD64 LDR X0, [X0 + 0xFE0]
	0x0322CD68 BL 0x1C16D08
	0x0322CD6C MOV X2, X0
	0x0322CD70 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move W3, [X0+16]
	003 Move W4, W2
	004 Move W2, W31
	005 Call String.IndexOf, X0, X1, X2, X3, X4
	006 NotImplemented "Instruction ORN not yet implemented."
	007 Move W0, W8
	008 ShiftRight W0, 31
	009 And W0, W0, 0x7FFFFFFF
	010 Move X30, [X31+16]
	011 Return X0

Method: System.Boolean Contains(System.Char value)

Disassembly:
	0x0322CD74 MOV X1, X20
	0x0322CD78 MOV X3, X31
	0x0322CD7C BL 0x330E16C
	0x0322CD80 B 0x322CD20
	0x0322CD84 LDR W3, [X0 + 0x10]
	0x0322CD88 MOV W4, W2
	0x0322CD8C SUB W2, W3, 0x1
	0x0322CD90 B 0x322C9E4
	0x0322CD94 B 0x1C88264

ISIL:
	001 Move [X31-16], X30
	002 Move W2, [X0+16]
	003 Add X0, X0, 20
	004 Move X3, X31
	005 Call SpanHelpers.IndexOf, X0, X1, X2
	006 Add W31, W0, 1
	007 NotImplemented "Instruction CSET not yet implemented."
	008 Move X30, [X31+16]
	009 Return X0

Method: System.Int32 IndexOf(System.Char value)

Disassembly:
	0x0322CD98 STR X30, [X31 - 0x20]!
	0x0322CD9C STP X20, X19, [X31 + 0x10]
	0x0322CDA0 ADRP X20, 0x11B0000
	0x0322CDA4 LDRB W8, [X20 + 0x38B]

ISIL:
	001 Move W2, [X0+16]
	002 Add X0, X0, 20
	003 Move X3, X31
	004 Call SpanHelpers.IndexOf, X0, X1, X2
	005 Return X0

Method: System.Int32 IndexOf(System.Char value, System.Int32 startIndex)

Disassembly:
	0x0322CDA8 MOV X19, X0
	0x0322CDAC TBNZ X8, 0x0, 0x322CDC4
	0x0322CDB0 ADRP X0, 0xEC9000

ISIL:
	001 Move W8, [X0+16]
	002 Subtract W3, W8, W2

Method: System.Int32 IndexOf(System.Char value, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x0322CDB4 LDR X0, [X0 + 0x278]
	0x0322CDB8 BL 0x1C16CF4
	0x0322CDBC MOVZ W8, 0x1
	0x0322CDC0 STRB W8, [X20 + 0x38B]
	0x0322CDC4 CBZ X19, 0x322CE00
	0x0322CDC8 LDR X0, [X19 + 0x18]
	0x0322CDCC CBZ X0, 0x322CE00
	0x0322CDD0 BL 0x1C8825C
	0x0322CDD4 CBZ X0, 0x322CE24
	0x0322CDD8 LDR W8, [X19 + 0x18]
	0x0322CDDC ADD X9, X19, 0x20
	0x0322CDE0 MOV X20, X0
	0x0322CDE4 ADD X0, X0, 0x14
	0x0322CDE8 CMP W8, 0x0
	0x0322CDEC CSEL X1, X31, X9, EQ
	0x0322CDF0 UBFM W2, W8, 0x1F, 0x1E
	0x0322CDF4 MOV X3, X31
	0x0322CDF8 BL 0x33A8CD0
	0x0322CDFC B 0x322CE14
	0x0322CE00 ADRP X8, 0xEC9000
	0x0322CE04 LDR X8, [X8 + 0x278]
	0x0322CE08 LDR X8, [X8]
	0x0322CE0C LDR X8, [X8 + 0xB8]
	0x0322CE10 LDR X20, [X8]
	0x0322CE14 MOV X0, X20
	0x0322CE18 LDP X20, X19, [X31 + 0x10]
	0x0322CE1C LDR X30, [X31], #0x20
	0x0322CE20 RET
	0x0322CE24 BL 0x1C16F20
	0x0322CE28 B 0x1C88264
	0x0322CE2C STR X30, [X31 - 0x30]!
	0x0322CE30 STP X22, X21, [X31 + 0x10]
	0x0322CE34 STP X20, X19, [X31 + 0x20]
	0x0322CE38 ADRP X22, 0x11B0000
	0x0322CE3C LDRB W8, [X22 + 0x38C]
	0x0322CE40 MOV W19, W2
	0x0322CE44 MOV W20, W1
	0x0322CE48 MOV X21, X0
	0x0322CE4C TBNZ X8, 0x0, 0x322CE64
	0x0322CE50 ADRP X0, 0xEC9000
	0x0322CE54 LDR X0, [X0 + 0x278]
	0x0322CE58 BL 0x1C16CF4
	0x0322CE5C MOVZ W8, 0x1
	0x0322CE60 STRB W8, [X22 + 0x38C]
	0x0322CE64 CBZ X21, 0x322CEE4
	0x0322CE68 TBNZ X20, 0x1F, 0x322CF18
	0x0322CE6C TBNZ X19, 0x1F, 0x322CF48
	0x0322CE70 LDR W8, [X21 + 0x18]
	0x0322CE74 SUB W8, W8, W19
	0x0322CE78 CMP W8, W20
	0x0322CE7C B.LT 0x322CF78
	0x0322CE80 CBZ W19, 0x322CEBC
	0x0322CE84 MOV W0, W19
	0x0322CE88 BL 0x1C8825C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+16]
	005 Subtract W8, W8, W2
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Add X8, X0, W2
	008 Move W19, W2
	009 Add X0, X8, 20
	010 Move W2, W3
	011 Move X3, X31
	012 Call SpanHelpers.IndexOf, X0, X1, X2
	013 Add W8, W0, W19
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Add W31, W0, 1
	017 NotImplemented "Instruction CSINV not yet implemented."
	018 Move X30, [X31+32]
	019 Return X0
	020 Move X0, 0xED0000
	021 Move X0, [X0+1888]
	022 Call 0x1C17D08
	023 Call 0x1C17F10
	024 Move X19, X0
	025 Move X0, 0xEF0000
	026 Move X0, [X0+1624]
	027 Call 0x1C17D08
	028 Move X20, X0
	029 Move X0, 0xEF0000
	030 Move X0, [X0+1632]
	031 Move X0, 0xED0000
	032 Move X0, [X0+1888]
	033 Call 0x1C17D08
	034 Call 0x1C17F10
	035 Move X19, X0
	036 Move X0, 0xEF0000
	037 Move X0, [X0+1608]
	038 Call 0x1C17D08
	039 Move X20, X0
	040 Move X0, 0xEF0000
	041 Move X0, [X0+1616]
	042 Call 0x1C17D08
	043 Move X2, X0
	044 Move X0, X19
	045 Move X1, X20
	046 Move X3, X31
	047 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	048 Move X0, 0xEF7000
	049 Move X0, [X0+512]
	050 Call 0x1C17D08
	051 Move X1, X0
	052 Move X0, X19
	053 Call 0x1C17DEC

Method: System.Int32 IndexOfAny(System.Char[] anyOf)

Disassembly:
	0x0322CE8C CBZ X0, 0x322CFD4
	0x0322CE90 LDR W8, [X21 + 0x18]
	0x0322CE94 ADD X9, X21, 0x20

ISIL:
	001 Move W3, [X0+16]
	002 Move W2, W31

Method: System.Int32 IndexOfAny(System.Char[] anyOf, System.Int32 startIndex)

Disassembly:
	0x0322D054 ADRP X8, 0xEC8000
	0x0322D058 LDR X8, [X8 + 0x278]
	0x0322D05C LDR X8, [X8]

ISIL:
	001 Move W8, [X0+16]
	002 Subtract W3, W8, W2
	003 Call String.IndexOfAny, X0, X1, X2, X3
	004 Return X0

Method: System.Int32 IndexOfAny(System.Char[] anyOf, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x0322CE98 MOV X22, X0
	0x0322CE9C ADD X0, X0, 0x14
	0x0322CEA0 CMP W8, 0x0
	0x0322CEA4 CSEL X8, X31, X9, EQ
	0x0322CEA8 ADD X1, X8, W20, 0x1, UXTW
	0x0322CEAC UBFM W2, W19, 0x1F, 0x1E
	0x0322CEB0 MOV X3, X31
	0x0322CEB4 BL 0x33A8CD0
	0x0322CEB8 B 0x322CED0
	0x0322CEBC ADRP X8, 0xEC9000
	0x0322CEC0 LDR X8, [X8 + 0x278]
	0x0322CEC4 LDR X8, [X8]
	0x0322CEC8 LDR X8, [X8 + 0xB8]
	0x0322CECC LDR X22, [X8]
	0x0322CED0 MOV X0, X22
	0x0322CED4 LDP X20, X19, [X31 + 0x20]
	0x0322CED8 LDP X22, X21, [X31 + 0x10]
	0x0322CEDC LDR X30, [X31], #0x30
	0x0322CEE0 RET
	0x0322CEE4 ADRP X0, 0xECC000
	0x0322CEE8 LDR X0, [X0 + 0x528]
	0x0322CEEC BL 0x1C16D08
	0x0322CEF0 BL 0x1C16F10
	0x0322CEF4 MOV X19, X0
	0x0322CEF8 ADRP X0, 0xED1000
	0x0322CEFC LDR X0, [X0 + 0xEC8]
	0x0322CF00 BL 0x1C16D08
	0x0322CF04 MOV X1, X0
	0x0322CF08 MOV X0, X19
	0x0322CF0C MOV X2, X31
	0x0322CF10 BL 0x330E100
	0x0322CF14 B 0x322CFBC
	0x0322CF18 ADRP X0, 0xECF000
	0x0322CF1C LDR X0, [X0 + 0x760]
	0x0322CF20 BL 0x1C16D08
	0x0322CF24 BL 0x1C16F10
	0x0322CF28 MOV X19, X0
	0x0322CF2C ADRP X0, 0xEEF000
	0x0322CF30 LDR X0, [X0 + 0x658]
	0x0322CF34 BL 0x1C16D08
	0x0322CF38 MOV X20, X0
	0x0322CF3C ADRP X0, 0xEF6000
	0x0322CF40 LDR X0, [X0 + 0xD8]
	0x0322CF44 B 0x322CFA4
	0x0322CF48 ADRP X0, 0xECF000
	0x0322CF4C LDR X0, [X0 + 0x760]
	0x0322CF50 BL 0x1C16D08
	0x0322CF54 BL 0x1C16F10
	0x0322CF58 MOV X19, X0
	0x0322CF5C ADRP X0, 0xECF000
	0x0322CF60 LDR X0, [X0 + 0x768]
	0x0322CF64 BL 0x1C16D08
	0x0322CF68 MOV X20, X0
	0x0322CF6C ADRP X0, 0xEF6000
	0x0322CF70 LDR X0, [X0]
	0x0322CF74 B 0x322CFA4
	0x0322CF78 ADRP X0, 0xECF000
	0x0322CF7C LDR X0, [X0 + 0x760]
	0x0322CF80 BL 0x1C16D08
	0x0322CF84 BL 0x1C16F10
	0x0322CF88 MOV X19, X0
	0x0322CF8C ADRP X0, 0xEEF000
	0x0322CF90 LDR X0, [X0 + 0x658]
	0x0322CF94 BL 0x1C16D08
	0x0322CF98 MOV X20, X0
	0x0322CF9C ADRP X0, 0xEEF000
	0x0322CFA0 LDR X0, [X0 + 0x660]
	0x0322CFA4 BL 0x1C16D08
	0x0322CFA8 MOV X2, X0
	0x0322CFAC MOV X0, X19
	0x0322CFB0 MOV X1, X20
	0x0322CFB4 MOV X3, X31
	0x0322CFB8 BL 0x3311888
	0x0322CFBC ADRP X0, 0xEF6000
	0x0322CFC0 LDR X0, [X0 + 0x238]
	0x0322CFC4 BL 0x1C16D08
	0x0322CFC8 MOV X1, X0
	0x0322CFCC MOV X0, X19
	0x0322CFD0 BL 0x1C16DEC
	0x0322CFD4 BL 0x1C16F20
	0x0322CFD8 B 0x1C88264
	0x0322CFDC STR X30, [X31 - 0x30]!
	0x0322CFE0 STP X22, X21, [X31 + 0x10]
	0x0322CFE4 STP X20, X19, [X31 + 0x20]
	0x0322CFE8 ADRP X22, 0x11B0000
	0x0322CFEC LDRB W8, [X22 + 0x38D]
	0x0322CFF0 MOV W19, W2
	0x0322CFF4 MOV W20, W1
	0x0322CFF8 MOV X21, X0
	0x0322CFFC TBNZ X8, 0x0, 0x322D014
	0x0322D000 ADRP X0, 0xEC8000
	0x0322D004 LDR X0, [X0 + 0x278]
	0x0322D008 BL 0x1C16CF4
	0x0322D00C MOVZ W8, 0x1
	0x0322D010 STRB W8, [X22 + 0x38D]
	0x0322D014 TBNZ X19, 0x1F, 0x322D07C
	0x0322D018 TBNZ X20, 0x1F, 0x322D0AC
	0x0322D01C ADDS X20, X21, W20, 0x1, UXTW
	0x0322D020 B.CS 0x322D0DC
	0x0322D024 CBZ W19, 0x322D054
	0x0322D028 CBZ X21, 0x322D0FC
	0x0322D02C MOV W0, W19
	0x0322D030 BL 0x1C8825C
	0x0322D034 CBZ X0, 0x322D158
	0x0322D038 MOV X21, X0
	0x0322D03C ADD X0, X0, 0x14
	0x0322D040 UBFM W2, W19, 0x1F, 0x1E
	0x0322D044 MOV X1, X20
	0x0322D048 MOV X3, X31
	0x0322D04C BL 0x33A8CD0
	0x0322D050 B 0x322D068

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {64}
	006 Move W8, [X0+16]
	007 Move W4, W3
	008 Move W3, W2
	009 Subtract W8, W8, W2
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move W8, [X1+24]
	012 NotImplemented "Instruction CMP not yet implemented."
	013 NotImplemented "Instruction CMP not yet implemented."
	014 NotImplemented "Instruction LDRH not yet implemented."
	015 NotImplemented "Instruction LDRH not yet implemented."
	016 Move X20, [X31+16]
	017 Move X19, [X31+24]
	018 Move X30, [X31+32]
	019 Call String.IndexOfAny, X0, X1, X2, X3, X4
	020 Return X0
	021 NotImplemented "Instruction CMP not yet implemented."
	022 NotImplemented "Instruction LDRH not yet implemented."
	023 NotImplemented "Instruction LDRH not yet implemented."
	024 NotImplemented "Instruction LDRH not yet implemented."
	025 Add X12, X0, 20
	026 NotImplemented "Instruction SBFM not yet implemented."
	027 Add W13, W4, 1
	028 NotImplemented "Instruction LDRH not yet implemented."
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Subtract W13, W13, 1
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Add X11, X11, 2
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction LDRH not yet implemented."
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move W2, W3
	041 Move W3, W4
	042 Move X30, [X31+32]
	043 Call String.IndexOf, X0, X1, X2, X3
	044 Return X0
	045 Move TEMP, 0
	046 Not TEMP
	047 Move W0, TEMP
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move W2, W3
	051 Move W3, W4
	052 Move X30, [X31+32]
	053 Call String.IndexOfCharArray, X0, X1, X2, X3
	054 Return X0
	055 NotImplemented "Instruction CMP not yet implemented."
	056 NotImplemented "Instruction CINC not yet implemented."
	057 Move X0, X8
	058 ShiftRight X0, 1
	059 And X0, X0, 0x7FFFFFFF
	060 Move X20, [X31+16]
	061 Move X19, [X31+24]
	062 Move X30, [X31+32]
	063 Return X0
	064 Move X0, 0xECD000
	065 Move X0, [X0+1320]
	066 Call 0x1C17D08
	067 Call 0x1C17F10
	068 Move X19, X0
	069 Move X0, 0xEF7000
	070 Move X0, [X0+520]
	071 Call 0x1C17D08
	072 Move X1, X0
	073 Move X0, X19
	074 Move X2, X31
	075 Call ArgumentNullException..ctor, X0, X1
	076 Move X0, 0xED0000
	077 Move X0, [X0+1888]
	078 Call 0x1C17D08
	079 Call 0x1C17F10
	080 Move X19, X0
	081 Move X0, 0xEF0000
	082 Move X0, [X0+1624]
	083 Call 0x1C17D08
	084 Move X20, X0
	085 Move X0, 0xEF0000
	086 Move X0, [X0+1632]
	087 Move X0, 0xED0000
	088 Move X0, [X0+1888]
	089 Call 0x1C17D08
	090 Call 0x1C17F10
	091 Move X19, X0
	092 Move X0, 0xEEF000
	093 Move X0, [X0+1608]
	094 Call 0x1C17D08
	095 Move X20, X0
	096 Move X0, 0xEEF000
	097 Move X0, [X0+1616]
	098 Call 0x1C17D08
	099 Move X2, X0
	100 Move X0, X19
	101 Move X1, X20
	102 Move X3, X31
	103 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	104 Move X0, 0xEF6000
	105 Move X0, [X0+528]
	106 Call 0x1C17D08
	107 Move X1, X0
	108 Move X0, X19
	109 Call 0x1C17DEC

Method: System.Int32 IndexOfAny(System.Char value1, System.Char value2, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x0322D060 LDR X8, [X8 + 0xB8]
	0x0322D064 LDR X21, [X8]
	0x0322D068 MOV X0, X21
	0x0322D06C LDP X20, X19, [X31 + 0x20]
	0x0322D070 LDP X22, X21, [X31 + 0x10]
	0x0322D074 LDR X30, [X31], #0x30
	0x0322D078 RET
	0x0322D07C ADRP X0, 0xECE000
	0x0322D080 LDR X0, [X0 + 0x760]
	0x0322D084 BL 0x1C16D08
	0x0322D088 BL 0x1C16F10
	0x0322D08C MOV X19, X0
	0x0322D090 ADRP X0, 0xECE000
	0x0322D094 LDR X0, [X0 + 0x768]
	0x0322D098 BL 0x1C16D08
	0x0322D09C MOV X20, X0
	0x0322D0A0 ADRP X0, 0xEF5000
	0x0322D0A4 LDR X0, [X0]
	0x0322D0A8 B 0x322D128
	0x0322D0AC ADRP X0, 0xECE000
	0x0322D0B0 LDR X0, [X0 + 0x760]
	0x0322D0B4 BL 0x1C16D08
	0x0322D0B8 BL 0x1C16F10
	0x0322D0BC MOV X19, X0
	0x0322D0C0 ADRP X0, 0xEEE000
	0x0322D0C4 LDR X0, [X0 + 0x658]
	0x0322D0C8 BL 0x1C16D08
	0x0322D0CC MOV X20, X0
	0x0322D0D0 ADRP X0, 0xEF5000
	0x0322D0D4 LDR X0, [X0 + 0xD8]
	0x0322D0D8 B 0x322D128
	0x0322D0DC ADRP X0, 0xECE000
	0x0322D0E0 LDR X0, [X0 + 0x760]
	0x0322D0E4 BL 0x1C16D08

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Add X9, X0, 20
	003 NotImplemented "Instruction SBFM not yet implemented."
	004 Add W10, W4, 2
	005 Add X11, X9, X8
	006 NotImplemented "Instruction LDRH not yet implemented."
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CMP not yet implemented."
	009 NotImplemented "Instruction LDRH not yet implemented."
	010 NotImplemented "Instruction CMP not yet implemented."
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Subtract W10, W10, 2
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Add X8, X8, 4
	015 NotImplemented "Instruction CMP not yet implemented."
	016 NotImplemented "Instruction CINC not yet implemented."
	017 Move X0, X8
	018 ShiftRight X0, 1
	019 And X0, X0, 0x7FFFFFFF
	020 Return X0
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move TEMP, 0
	023 Not TEMP
	024 Move W0, TEMP
	025 Return X0
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction CINC not yet implemented."
	028 Move X8, X8
	029 ShiftRight X8, 1
	030 And X8, X8, 0x7FFFFFFF
	031 Add W0, W8, 1
	032 Return X0

Method: System.Int32 IndexOfAny(System.Char value1, System.Char value2, System.Char value3, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x0322D0E8 BL 0x1C16F10
	0x0322D0EC MOV X19, X0
	0x0322D0F0 ADRP X0, 0xEEE000
	0x0322D0F4 LDR X0, [X0 + 0x658]
	0x0322D0F8 B 0x322D118
	0x0322D0FC ADRP X0, 0xECE000
	0x0322D100 LDR X0, [X0 + 0x760]
	0x0322D104 BL 0x1C16D08
	0x0322D108 BL 0x1C16F10
	0x0322D10C MOV X19, X0
	0x0322D110 ADRP X0, 0xEF5000
	0x0322D114 LDR X0, [X0 + 0x240]
	0x0322D118 BL 0x1C16D08
	0x0322D11C MOV X20, X0
	0x0322D120 ADRP X0, 0xEF5000
	0x0322D124 LDR X0, [X0 + 0x248]
	0x0322D128 BL 0x1C16D08
	0x0322D12C MOV X2, X0
	0x0322D130 MOV X0, X19
	0x0322D134 MOV X1, X20
	0x0322D138 MOV X3, X31
	0x0322D13C BL 0x3311888

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Add X9, X0, 20
	003 NotImplemented "Instruction SBFM not yet implemented."
	004 Add W10, W5, 1
	005 NotImplemented "Instruction LDRH not yet implemented."
	006 NotImplemented "Instruction CMP not yet implemented."
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Subtract W10, W10, 1
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Add X8, X8, 2
	012 Move TEMP, 0
	013 Not TEMP
	014 Move W0, TEMP
	015 Return X0
	016 NotImplemented "Instruction CMP not yet implemented."
	017 NotImplemented "Instruction CINC not yet implemented."
	018 Move X0, X8
	019 ShiftRight X0, 1
	020 And X0, X0, 0x7FFFFFFF
	021 Return X0

Method: System.Int32 IndexOfCharArray(System.Char[] anyOf, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x0322D140 ADRP X0, 0xEF5000
	0x0322D144 LDR X0, [X0 + 0x250]
	0x0322D148 BL 0x1C16D08
	0x0322D14C MOV X1, X0
	0x0322D150 MOV X0, X19
	0x0322D154 BL 0x1C16DEC
	0x0322D158 BL 0x1C16F20
	0x0322D15C B 0x1C88264
	0x0322D160 STR X30, [X31 - 0x30]!
	0x0322D164 STP X22, X21, [X31 + 0x10]
	0x0322D168 STP X20, X19, [X31 + 0x20]
	0x0322D16C ADRP X22, 0x11AF000
	0x0322D170 LDRB W8, [X22 + 0x38E]
	0x0322D174 MOV W19, W2
	0x0322D178 MOV W20, W1
	0x0322D17C MOV X21, X0
	0x0322D180 TBNZ X8, 0x0, 0x322D198
	0x0322D184 ADRP X0, 0xEC8000
	0x0322D188 LDR X0, [X0 + 0x278]
	0x0322D18C BL 0x1C16CF4
	0x0322D190 MOVZ W8, 0x1
	0x0322D194 STRB W8, [X22 + 0x38E]
	0x0322D198 TBNZ X20, 0x1F, 0x322D1E8
	0x0322D19C TBNZ X19, 0x1F, 0x322D218
	0x0322D1A0 CBZ X21, 0x322D1C0
	0x0322D1A4 ADDS X0, X21, W20, UXTW
	0x0322D1A8 B.CS 0x322D248
	0x0322D1AC MOV W1, W19
	0x0322D1B0 LDP X20, X19, [X31 + 0x20]
	0x0322D1B4 LDP X22, X21, [X31 + 0x10]
	0x0322D1B8 LDR X30, [X31], #0x30
	0x0322D1BC B 0x322D2D8
	0x0322D1C0 CBNZ W19, 0x322D2A4
	0x0322D1C4 ADRP X8, 0xEC8000
	0x0322D1C8 LDR X8, [X8 + 0x278]
	0x0322D1CC LDP X20, X19, [X31 + 0x20]
	0x0322D1D0 LDP X22, X21, [X31 + 0x10]
	0x0322D1D4 LDR X8, [X8]
	0x0322D1D8 LDR X8, [X8 + 0xB8]
	0x0322D1DC LDR X0, [X8]
	0x0322D1E0 LDR X30, [X31], #0x30
	0x0322D1E4 RET
	0x0322D1E8 ADRP X0, 0xECE000
	0x0322D1EC LDR X0, [X0 + 0x760]
	0x0322D1F0 BL 0x1C16D08
	0x0322D1F4 BL 0x1C16F10
	0x0322D1F8 MOV X19, X0
	0x0322D1FC ADRP X0, 0xEEE000
	0x0322D200 LDR X0, [X0 + 0x658]
	0x0322D204 BL 0x1C16D08
	0x0322D208 MOV X20, X0
	0x0322D20C ADRP X0, 0xEF5000
	0x0322D210 LDR X0, [X0 + 0xD8]
	0x0322D214 B 0x322D274
	0x0322D218 ADRP X0, 0xECE000
	0x0322D21C LDR X0, [X0 + 0x760]
	0x0322D220 BL 0x1C16D08
	0x0322D224 BL 0x1C16F10
	0x0322D228 MOV X19, X0
	0x0322D22C ADRP X0, 0xECE000
	0x0322D230 LDR X0, [X0 + 0x768]
	0x0322D234 BL 0x1C16D08
	0x0322D238 MOV X20, X0
	0x0322D23C ADRP X0, 0xEF5000
	0x0322D240 LDR X0, [X0]
	0x0322D244 B 0x322D274
	0x0322D248 ADRP X0, 0xECE000
	0x0322D24C LDR X0, [X0 + 0x760]
	0x0322D250 BL 0x1C16D08
	0x0322D254 BL 0x1C16F10
	0x0322D258 MOV X19, X0
	0x0322D25C ADRP X0, 0xED0000
	0x0322D260 LDR X0, [X0 + 0xEC8]
	0x0322D264 BL 0x1C16D08
	0x0322D268 MOV X20, X0
	0x0322D26C ADRP X0, 0xEF5000

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+48], X30
	003 Move [X31+56], X25
	004 Move [X31+64], X24
	005 Move [X31+72], X23
	006 Move [X31+80], X22
	007 Move [X31+88], X21
	008 Move [X31+96], X20
	009 Move [X31+104], X19
	010 NotImplemented "Instruction MRS not yet implemented."
	011 Move X8, [X23+40]
	012 Move X25, 0x11B0000
	013 Move X24, 0xEF6000
	014 Move W20, W3
	015 Move [X31+40], X8
	016 Move W8, [X25+902]
	017 Move X24, [X24+472]
	018 Move W21, W2
	019 Move X19, X1
	020 Move X22, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0xEF6000
	026 Move X0, [X0+472]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X25+902], W8
	030 Move X1, [X24]
	031 NotImplemented "Instruction MOVI not yet implemented."
	032 Move X0, X19
	033 Move [X31], V0
	034 Move [X31+8], V0
	035 Call ReadOnlySpan`1<Char>.op_Implicit, X0
	036 Move X2, X0
	037 Move X3, X1
	038 Add X0, X31, 0
	039 Move X1, X2
	040 Move X2, X3
	041 Add X24, X31, 0
	042 Call String.InitializeProbabilisticMap, X0, X1
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Add X22, X22, 20
	045 NotImplemented "Instruction SBFM not yet implemented."
	046 Add W20, W20, 1
	047 NotImplemented "Instruction LDRH not yet implemented."
	048 And W8, W0, 255
	049 Move W8, W8
	050 ShiftRight W8, 30
	051 And W8, W8, 0x1FFFFFFF
	052 And X8, X8, 31
	053 Move W8, [X8]
	054 Move W9, W0
	055 ShiftRight W9, 3
	056 And W9, W9, 127
	057 NotImplemented "Instruction LSRV not yet implemented."
	058 Move TEMP, X8
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {81}
	062 Move X8, X0
	063 ShiftRight X8, 6
	064 And X8, X8, 0x7FFFFFFF
	065 And X8, X8, 31
	066 Move W8, [X8]
	067 Move X9, X0
	068 ShiftRight X9, 11
	069 And X9, X9, 0x7FFFFFFF
	070 NotImplemented "Instruction LSRV not yet implemented."
	071 Move TEMP, X8
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfNotEqual {81}
	075 Move X1, X19
	076 Call String.ArrayContains, X0, X1
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfEqual {100}
	081 Subtract W20, W20, 1
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Add X21, X21, 2
	084 Move TEMP, 0
	085 Not TEMP
	086 Move W0, TEMP
	087 Move X8, [X23+40]
	088 Move X9, [X31+40]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move X20, [X31+96]
	091 Move X19, [X31+104]
	092 Move X22, [X31+80]
	093 Move X21, [X31+88]
	094 Move X24, [X31+64]
	095 Move X23, [X31+72]
	096 Move X30, [X31+48]
	097 Move X25, [X31+56]
	098 Add X31, X31, 112
	099 Return X0
	100 NotImplemented "Instruction CMP not yet implemented."
	101 NotImplemented "Instruction CINC not yet implemented."
	102 Move X0, X8
	103 ShiftRight X0, 1
	104 And X0, X0, 0x7FFFFFFF
	105 Call 0x3EB2B20

Method: System.Void InitializeProbabilisticMap(System.UInt32* charMap, System.ReadOnlySpan`1<System.Char> anyOf)

Disassembly:
	0x0322C490 LDR X0, [X8]
	0x0322C494 CBZ X0, 0x322C58C
	0x0322C498 LDR X8, [X0]
	0x0322C49C MOVZ W5, 0x1
	0x0322C4A0 MOV X1, X22
	0x0322C4A4 MOV X2, X21
	0x0322C4A8 LDP X7, X6, [X8 + 0x1E8]
	0x0322C4AC MOV W3, W20
	0x0322C4B0 MOV W4, W19
	0x0322C4B4 LDP X20, X19, [X31 + 0x30]
	0x0322C4B8 LDP X22, X21, [X31 + 0x20]
	0x0322C4BC LDP X24, X23, [X31 + 0x10]
	0x0322C4C0 LDR X30, [X31], #0x40
	0x0322C4C4 BR X7
	0x0322C4C8 ADRP X23, 0xEF5000
	0x0322C4CC LDR X23, [X23 + 0xFD0]
	0x0322C4D0 LDR X0, [X23]
	0x0322C4D4 LDR W8, [X0 + 0xE0]
	0x0322C4D8 CBNZ W8, 0x322C4E4
	0x0322C4DC BL 0x1C16DFC
	0x0322C4E0 LDR X0, [X23]
	0x0322C4E4 LDR X8, [X0 + 0xB8]
	0x0322C4E8 LDR X0, [X8]
	0x0322C4EC CBZ X0, 0x322C58C
	0x0322C4F0 MOV X1, X22
	0x0322C4F4 MOV X2, X21
	0x0322C4F8 MOV W3, W20
	0x0322C4FC MOV W4, W19
	0x0322C500 MOV W5, W31
	0x0322C504 B 0x322C544
	0x0322C508 ADRP X23, 0xEF5000
	0x0322C50C LDR X23, [X23 + 0xFD0]
	0x0322C510 LDR X0, [X23]
	0x0322C514 LDR W8, [X0 + 0xE0]
	0x0322C518 CBNZ W8, 0x322C524
	0x0322C51C BL 0x1C16DFC
	0x0322C520 LDR X0, [X23]
	0x0322C524 LDR X8, [X0 + 0xB8]
	0x0322C528 LDR X0, [X8]
	0x0322C52C CBZ X0, 0x322C58C
	0x0322C530 MOVZ W5, 0x1
	0x0322C534 MOV X1, X22
	0x0322C538 MOV X2, X21
	0x0322C53C MOV W3, W20
	0x0322C540 MOV W4, W19
	0x0322C544 LDP X20, X19, [X31 + 0x30]
	0x0322C548 LDP X22, X21, [X31 + 0x20]
	0x0322C54C LDP X24, X23, [X31 + 0x10]
	0x0322C550 MOV X6, X31
	0x0322C554 LDR X30, [X31], #0x40
	0x0322C558 B 0x3305F50
	0x0322C55C ADRP X0, 0xECF000
	0x0322C560 LDR X0, [X0 + 0x760]
	0x0322C564 BL 0x1C16D08
	0x0322C568 BL 0x1C16F10
	0x0322C56C MOV X19, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11B1000
	007 Move W8, [X22+903]
	008 Move X21, X2
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xEF7000
	016 Move X0, [X0+40]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+903], W8
	020 NotImplemented "Instruction CMP not yet implemented."
	021 And X9, X21, 0
	022 Move X8, X31
	023 Move W11, W31
	024 Subtract X10, X9, 1
	025 Move W12, 1
	026 NotImplemented "Instruction LDRH not yet implemented."
	027 And W14, W13, 255
	028 Move W14, W14
	029 ShiftRight W14, 30
	030 And W14, W14, 0x1FFFFFFF
	031 And X14, X14, 31
	032 Move W15, [X14]
	033 Move W16, W13
	034 ShiftRight W16, 3
	035 And W16, W16, 127
	036 NotImplemented "Instruction LSLV not yet implemented."
	037 Move X13, X13
	038 ShiftRight X13, 8
	039 And X13, X13, 0x7FFFFFFF
	040 Or W15, W16, W15
	041 Move [X14], W15
	042 Compare W13, 0
	043 JumpIfEqual {57}
	044 Move W14, W13
	045 ShiftRight W14, 30
	046 And W14, W14, 0x1FFFFFFF
	047 And X14, X14, 31
	048 Move W15, [X14]
	049 Move W13, W13
	050 ShiftRight W13, 3
	051 And W13, W13, 0x7FFFFFFF
	052 Add X8, X8, 1
	053 NotImplemented "Instruction LSLV not yet implemented."
	054 Or W13, W15, W13
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move [X14], W13
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Add X8, X8, 1
	059 Move W11, 1
	060 Move TEMP, X11
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {67}
	064 Move W8, [X19]
	065 Or W8, W8, 1
	066 Move [X19], W8
	067 Move X20, [X31+32]
	068 Move X19, [X31+40]
	069 Move X22, [X31+16]
	070 Move X21, [X31+24]
	071 Move X30, [X31+48]
	072 Return 

Method: System.Boolean ArrayContains(System.Char searchChar, System.Char[] anyOf)

Disassembly:
	0x0322D270 LDR X0, [X0 + 0x248]
	0x0322D274 BL 0x1C16D08
	0x0322D278 MOV X2, X0
	0x0322D27C MOV X0, X19
	0x0322D280 MOV X1, X20
	0x0322D284 MOV X3, X31
	0x0322D288 BL 0x3311888
	0x0322D28C ADRP X0, 0xEF5000
	0x0322D290 LDR X0, [X0 + 0x258]
	0x0322D294 BL 0x1C16D08
	0x0322D298 MOV X1, X0
	0x0322D29C MOV X0, X19
	0x0322D2A0 BL 0x1C16DEC
	0x0322D2A4 ADRP X0, 0xECB000
	0x0322D2A8 LDR X0, [X0 + 0x528]
	0x0322D2AC BL 0x1C16D08
	0x0322D2B0 BL 0x1C16F10
	0x0322D2B4 MOV X19, X0
	0x0322D2B8 ADRP X0, 0xED0000
	0x0322D2BC LDR X0, [X0 + 0xEC8]
	0x0322D2C0 BL 0x1C16D08
	0x0322D2C4 MOV X1, X0
	0x0322D2C8 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {19}
	004 Move W8, [X1+24]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move W9, W31
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Add X10, X1, W9
	009 NotImplemented "Instruction LDRH not yet implemented."
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Add W9, W9, 1
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W9, W31
	014 NotImplemented "Instruction CMP not yet implemented."
	015 NotImplemented "Instruction CSET not yet implemented."
	016 Move X30, [X31+16]
	017 Return X0
	018 Call 0x1C17F28
	019 Call 0x1C17F20

Method: System.Boolean IsCharBitSet(System.UInt32* charMap, System.Byte value)

Disassembly:
	0x0322C570 ADRP X0, 0xEEF000
	0x0322C574 LDR X0, [X0 + 0x658]
	0x0322C578 BL 0x1C16D08
	0x0322C57C MOV X20, X0
	0x0322C580 ADRP X0, 0xEEF000
	0x0322C584 LDR X0, [X0 + 0x660]
	0x0322C588 B 0x322C5F0

ISIL:
	001 Move W8, W1
	002 ShiftRight W8, 30
	003 And W8, W8, 0x1FFFFFFF
	004 And X8, X8, 31
	005 Move W8, [X8]
	006 Move X9, X1
	007 ShiftRight X9, 3
	008 And X9, X9, 127
	009 NotImplemented "Instruction LSRV not yet implemented."
	010 And W0, W8, 1
	011 Return X0

Method: System.Void SetCharBit(System.UInt32* charMap, System.Byte value)

Disassembly:
	0x0322D2CC MOV X2, X31
	0x0322D2D0 BL 0x330E100
	0x0322D2D4 B 0x322D28C
	0x0322D2D8 STP X30, X21, [X31 - 0x20]!
	0x0322D2DC STP X20, X19, [X31 + 0x10]
	0x0322D2E0 ADRP X21, 0x11AF000
	0x0322D2E4 LDRB W8, [X21 + 0x38F]
	0x0322D2E8 MOV W19, W1
	0x0322D2EC MOV X20, X0

ISIL:
	001 Move W8, W1
	002 ShiftRight W8, 30
	003 And W8, W8, 0x1FFFFFFF
	004 And X8, X8, 31
	005 Move W9, [X8]
	006 Move X10, X1
	007 ShiftRight X10, 3
	008 And X10, X10, 127
	009 Move W11, 1
	010 NotImplemented "Instruction LSLV not yet implemented."
	011 Or W9, W9, W10
	012 Move [X8], W9
	013 Return 

Method: System.Int32 IndexOf(System.String value)

Disassembly:
	0x0322D2F0 TBNZ X8, 0x0, 0x322D308
	0x0322D2F4 ADRP X0, 0xEC8000
	0x0322D2F8 LDR X0, [X0 + 0x278]
	0x0322D2FC BL 0x1C16CF4

ISIL:
	001 Move W3, [X0+16]
	002 Move W2, W31
	003 Move W4, W31
	004 Call String.IndexOf, X0, X1, X2, X3, X4
	005 Return X0

Method: System.Int32 IndexOf(System.String value, System.Int32 startIndex)

Disassembly:
	0x0322D300 MOVZ W8, 0x1
	0x0322D304 STRB W8, [X21 + 0x38F]
	0x0322D308 CBZ W19, 0x322D330
	0x0322D30C MOV X0, X31

ISIL:
	001 Move W8, [X0+16]
	002 Move W4, W31
	003 Subtract W3, W8, W2
	004 Call String.IndexOf, X0, X1, X2, X3, X4
	005 Return X0

Method: System.Int32 IndexOf(System.String value, System.StringComparison comparisonType)

Disassembly:
	0x0322CD40 LDR X0, [X0 + 0x578]
	0x0322CD44 BL 0x1C16D08
	0x0322CD48 BL 0x1C16F10
	0x0322CD4C MOV X19, X0

ISIL:
	001 Move W3, [X0+16]
	002 Move W4, W2
	003 Move W2, W31
	004 Call String.IndexOf, X0, X1, X2, X3, X4
	005 Return X0

Method: System.Int32 IndexOf(System.String value, System.Int32 startIndex, System.StringComparison comparisonType)

Disassembly:
	0x0322D310 BL 0x3241948
	0x0322D314 CBZ X0, 0x322D350
	0x0322D318 MOV X1, X20
	0x0322D31C MOV W2, W19

ISIL:
	001 Move W8, [X0+16]
	002 Move W4, W3
	003 Subtract W3, W8, W2

Method: System.Int32 IndexOf(System.String value, System.Int32 startIndex, System.Int32 count, System.StringComparison comparisonType)

Disassembly:
	0x0322D320 LDP X20, X19, [X31 + 0x10]
	0x0322D324 MOV X3, X31
	0x0322D328 LDP X30, X21, [X31], #0x20
	0x0322D32C B 0x32448A4
	0x0322D330 ADRP X8, 0xEC8000
	0x0322D334 LDR X8, [X8 + 0x278]
	0x0322D338 LDP X20, X19, [X31 + 0x10]
	0x0322D33C LDR X8, [X8]
	0x0322D340 LDR X8, [X8 + 0xB8]
	0x0322D344 LDR X0, [X8]
	0x0322D348 LDP X30, X21, [X31], #0x20
	0x0322D34C RET
	0x0322D350 BL 0x1C16F20
	0x0322D354 B 0x1C88264
	0x0322D358 STP X30, X23, [X31 - 0x30]!
	0x0322D35C STP X22, X21, [X31 + 0x10]
	0x0322D360 STP X20, X19, [X31 + 0x20]
	0x0322D364 ADRP X23, 0x11AF000
	0x0322D368 LDRB W8, [X23 + 0x390]
	0x0322D36C MOV X20, X3
	0x0322D370 MOV W19, W2
	0x0322D374 MOV W21, W1
	0x0322D378 MOV X22, X0
	0x0322D37C TBNZ X8, 0x0, 0x322D3A0
	0x0322D380 ADRP X0, 0xEF4000
	0x0322D384 LDR X0, [X0 + 0x848]
	0x0322D388 BL 0x1C16CF4
	0x0322D38C ADRP X0, 0xEC8000
	0x0322D390 LDR X0, [X0 + 0x278]
	0x0322D394 BL 0x1C16CF4
	0x0322D398 MOVZ W8, 0x1
	0x0322D39C STRB W8, [X23 + 0x390]
	0x0322D3A0 CBZ X20, 0x322D3D4
	0x0322D3A4 TBNZ X19, 0x1F, 0x322D418
	0x0322D3A8 TBNZ X21, 0x1F, 0x322D448
	0x0322D3AC CBZ X22, 0x322D3F0
	0x0322D3B0 ADDS X1, X22, W21, UXTW
	0x0322D3B4 B.CS 0x322D478
	0x0322D3B8 MOV W2, W19
	0x0322D3BC MOV X0, X20
	0x0322D3C0 LDP X20, X19, [X31 + 0x20]
	0x0322D3C4 LDP X22, X21, [X31 + 0x10]
	0x0322D3C8 MOV X3, X31
	0x0322D3CC LDP X30, X23, [X31], #0x30
	0x0322D3D0 B 0x3244A5C
	0x0322D3D4 MOV X0, X22
	0x0322D3D8 MOV W1, W21
	0x0322D3DC MOV W2, W19
	0x0322D3E0 LDP X20, X19, [X31 + 0x20]
	0x0322D3E4 LDP X22, X21, [X31 + 0x10]
	0x0322D3E8 LDP X30, X23, [X31], #0x30
	0x0322D3EC B 0x322D160
	0x0322D3F0 CBNZ W19, 0x322D4D4
	0x0322D3F4 ADRP X8, 0xEC8000
	0x0322D3F8 LDR X8, [X8 + 0x278]
	0x0322D3FC LDP X20, X19, [X31 + 0x20]
	0x0322D400 LDP X22, X21, [X31 + 0x10]
	0x0322D404 LDR X8, [X8]
	0x0322D408 LDR X8, [X8 + 0xB8]
	0x0322D40C LDR X0, [X8]
	0x0322D410 LDP X30, X23, [X31], #0x30
	0x0322D414 RET
	0x0322D418 ADRP X0, 0xECE000
	0x0322D41C LDR X0, [X0 + 0x760]
	0x0322D420 BL 0x1C16D08
	0x0322D424 BL 0x1C16F10
	0x0322D428 MOV X19, X0
	0x0322D42C ADRP X0, 0xECE000
	0x0322D430 LDR X0, [X0 + 0x768]
	0x0322D434 BL 0x1C16D08
	0x0322D438 MOV X20, X0
	0x0322D43C ADRP X0, 0xEEE000
	0x0322D440 LDR X0, [X0 + 0x670]
	0x0322D444 B 0x322D4A4
	0x0322D448 ADRP X0, 0xECE000
	0x0322D44C LDR X0, [X0 + 0x760]
	0x0322D450 BL 0x1C16D08
	0x0322D454 BL 0x1C16F10
	0x0322D458 MOV X19, X0
	0x0322D45C ADRP X0, 0xEEE000
	0x0322D460 LDR X0, [X0 + 0x658]
	0x0322D464 BL 0x1C16D08
	0x0322D468 MOV X20, X0
	0x0322D46C ADRP X0, 0xEF5000
	0x0322D470 LDR X0, [X0 + 0xD8]
	0x0322D474 B 0x322D4A4
	0x0322D478 ADRP X0, 0xECE000
	0x0322D47C LDR X0, [X0 + 0x760]
	0x0322D480 BL 0x1C16D08
	0x0322D484 BL 0x1C16F10
	0x0322D488 MOV X19, X0
	0x0322D48C ADRP X0, 0xEEE000
	0x0322D490 LDR X0, [X0 + 0x658]
	0x0322D494 BL 0x1C16D08
	0x0322D498 MOV X20, X0
	0x0322D49C ADRP X0, 0xEF5000
	0x0322D4A0 LDR X0, [X0 + 0x248]
	0x0322D4A4 BL 0x1C16D08
	0x0322D4A8 MOV X2, X0
	0x0322D4AC MOV X0, X19
	0x0322D4B0 MOV X1, X20
	0x0322D4B4 MOV X3, X31
	0x0322D4B8 BL 0x3311888
	0x0322D4BC ADRP X0, 0xEF5000
	0x0322D4C0 LDR X0, [X0 + 0x260]
	0x0322D4C4 BL 0x1C16D08
	0x0322D4C8 MOV X1, X0
	0x0322D4CC MOV X0, X19
	0x0322D4D0 BL 0x1C16DEC
	0x0322D4D4 ADRP X0, 0xECB000
	0x0322D4D8 LDR X0, [X0 + 0x528]
	0x0322D4DC BL 0x1C16D08
	0x0322D4E0 BL 0x1C16F10
	0x0322D4E4 MOV X19, X0
	0x0322D4E8 ADRP X0, 0xED0000
	0x0322D4EC LDR X0, [X0 + 0xEC8]
	0x0322D4F0 BL 0x1C16D08
	0x0322D4F4 MOV X1, X0
	0x0322D4F8 MOV X0, X19
	0x0322D4FC MOV X2, X31
	0x0322D500 BL 0x330E100
	0x0322D504 B 0x322D4BC
	0x0322D508 MOV X0, X1
	0x0322D50C MOV W1, W2
	0x0322D510 MOV W2, W3
	0x0322D514 B 0x322D160
	0x0322D518 B 0x1C88264
	0x0322D51C STP X30, X21, [X31 - 0x20]!
	0x0322D520 STP X20, X19, [X31 + 0x10]
	0x0322D524 ADRP X21, 0x11AF000
	0x0322D528 LDRB W8, [X21 + 0x391]
	0x0322D52C MOV W20, W1
	0x0322D530 MOV W19, W0
	0x0322D534 TBNZ X8, 0x0, 0x322D54C
	0x0322D538 ADRP X0, 0xEC8000
	0x0322D53C LDR X0, [X0 + 0x278]
	0x0322D540 BL 0x1C16CF4
	0x0322D544 MOVZ W8, 0x1
	0x0322D548 STRB W8, [X21 + 0x391]
	0x0322D54C CMP W20, 0x0
	0x0322D550 B.LE 0x322D5B4
	0x0322D554 MOV W0, W20
	0x0322D558 BL 0x1C8825C
	0x0322D55C ANDS W31, W19, 0xFFFF
	0x0322D560 B.EQ 0x322D5CC
	0x0322D564 CBZ X0, 0x322D5D8
	0x0322D568 AND W10, W19, 0xFFFF
	0x0322D56C MOV W9, W19
	0x0322D570 ADD X8, X0, 0x14
	0x0322D574 CMP W20, 0x4
	0x0322D578 BFM W9, W10, 0x10, 0xF
	0x0322D57C B.GE 0x322D58C
	0x0322D580 TBNZ X20, 0x1, 0x322D5A4
	0x0322D584 TBNZ X20, 0x0, 0x322D5AC
	0x0322D588 B 0x322D5CC
	0x0322D58C SUB W20, W20, 0x4
	0x0322D590 STP W9, W9, [X8], #0x8
	0x0322D594 CMP W20, 0x3
	0x0322D598 B.GT 0x322D58C
	0x0322D59C SUB W20, W20, 0x4
	0x0322D5A0 TBZ X20, 0x1, 0x322D584
	0x0322D5A4 STR W9, [X8], #0x4
	0x0322D5A8 TBZ X20, 0x0, 0x322D5CC
	0x0322D5AC STRH W19, [X8]
	0x0322D5B0 B 0x322D5CC
	0x0322D5B4 CBNZ W20, 0x322D5DC
	0x0322D5B8 ADRP X8, 0xEC8000
	0x0322D5BC LDR X8, [X8 + 0x278]
	0x0322D5C0 LDR X8, [X8]
	0x0322D5C4 LDR X8, [X8 + 0xB8]
	0x0322D5C8 LDR X0, [X8]
	0x0322D5CC LDP X20, X19, [X31 + 0x10]
	0x0322D5D0 LDP X30, X21, [X31], #0x20
	0x0322D5D4 RET
	0x0322D5D8 BL 0x1C16F20
	0x0322D5DC ADRP X0, 0xECE000
	0x0322D5E0 LDR X0, [X0 + 0x760]
	0x0322D5E4 BL 0x1C16D08
	0x0322D5E8 BL 0x1C16F10
	0x0322D5EC MOV X19, X0
	0x0322D5F0 ADRP X0, 0xEEE000
	0x0322D5F4 LDR X0, [X0 + 0x648]
	0x0322D5F8 BL 0x1C16D08
	0x0322D5FC MOV X20, X0
	0x0322D600 ADRP X0, 0xEF5000
	0x0322D604 LDR X0, [X0 + 0x30]
	0x0322D608 BL 0x1C16D08
	0x0322D60C MOV X2, X0
	0x0322D610 MOV X0, X19
	0x0322D614 MOV X1, X20
	0x0322D618 MOV X3, X31
	0x0322D61C BL 0x3311888
	0x0322D620 ADRP X0, 0xEF5000
	0x0322D624 LDR X0, [X0 + 0x268]
	0x0322D628 BL 0x1C16D08
	0x0322D62C MOV X1, X0
	0x0322D630 MOV X0, X19
	0x0322D634 BL 0x1C16DEC
	0x0322D638 B 0x1C88264
	0x0322D63C STR X30, [X31 - 0x30]!
	0x0322D640 STP X22, X21, [X31 + 0x10]
	0x0322D644 STP X20, X19, [X31 + 0x20]
	0x0322D648 ADRP X21, 0x11AF000
	0x0322D64C LDRB W8, [X21 + 0x392]
	0x0322D650 MOV X19, X1
	0x0322D654 MOV X20, X0
	0x0322D658 TBNZ X8, 0x0, 0x322D688
	0x0322D65C ADRP X0, 0xEF5000
	0x0322D660 LDR X0, [X0 + 0x20]
	0x0322D664 BL 0x1C16CF4

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x11B0000
	009 Move W8, [X24+904]
	010 Move W23, W4
	011 Move W19, W3
	012 Move W20, W2
	013 Move X21, X1
	014 Move X22, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xEF5000
	020 Move X0, [X0+4048]
	021 Call 0x1C17CF4
	022 Move X0, 0xEC9000
	023 Move X0, [X0+3144]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+904], W8
	027 Compare X21, 0
	028 JumpIfEqual {187}
	029 Move TEMP, X20
	030 And TEMP, TEMP, -2147483648
	031 Compare TEMP, -2147483648
	032 JumpIfEqual {175}
	033 Move W8, [X22+16]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move TEMP, X19
	036 And TEMP, TEMP, -2147483648
	037 Compare TEMP, -2147483648
	038 JumpIfEqual {199}
	039 Subtract W8, W8, W19
	040 NotImplemented "Instruction CMP not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X9, -40460288
	043 Move W8, W23
	044 Add X9, X9, 1143
	045 NotImplemented "Instruction ADR not yet implemented."
	046 Move W11, [X9]
	047 Add X10, X10, X11
	048 CallNoReturn X10
	049 Move X8, 0xEC9000
	050 Move X8, [X8+3144]
	051 Move X0, [X8]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Move X0, X31
	057 Call CultureInfo.get_CurrentCulture
	058 Compare X0, 0
	059 JumpIfEqual {186}
	060 Move X8, [X0]
	061 Move X9, [X8+504]
	062 Move X1, [X8+512]
	063 NotImplemented "Instruction BLR not yet implemented."
	064 Compare X0, 0
	065 JumpIfNotEqual {95}
	066 Move X8, 0xEC9000
	067 Move X8, [X8+3144]
	068 Move X0, [X8]
	069 Move W8, [X0+224]
	070 Compare W8, 0
	071 JumpIfNotEqual {73}
	072 Call 0x1C17DFC
	073 Move X0, X31
	074 Call CultureInfo.get_CurrentCulture
	075 Compare X0, 0
	076 JumpIfEqual {186}
	077 Move X8, [X0]
	078 Move X9, [X8+504]
	079 Move X1, [X8+512]
	080 NotImplemented "Instruction BLR not yet implemented."
	081 Compare X0, 0
	082 JumpIfNotEqual {115}
	083 Move X23, 0xEF5000
	084 Move X23, [X23+4048]
	085 Move X0, [X23]
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {91}
	089 Call 0x1C17DFC
	090 Move X0, [X23]
	091 Move X8, [X0+184]
	092 Move X0, [X8]
	093 Compare X0, 0
	094 JumpIfEqual {186}
	095 Move X8, [X0]
	096 Move X1, X22
	097 Move X2, X21
	098 Move W3, W20
	099 Move X7, [X8+488]
	100 Move X6, [X8+496]
	101 Move W4, W19
	102 Move W5, W31
	103 Move X23, 0xEF5000
	104 Move X23, [X23+4048]
	105 Move X0, [X23]
	106 Move W8, [X0+224]
	107 Compare W8, 0
	108 JumpIfNotEqual {111}
	109 Call 0x1C17DFC
	110 Move X0, [X23]
	111 Move X8, [X0+184]
	112 Move X0, [X8]
	113 Compare X0, 0
	114 JumpIfEqual {186}
	115 Move X8, [X0]
	116 Move W5, 1
	117 Move X1, X22
	118 Move X2, X21
	119 Move X7, [X8+488]
	120 Move X6, [X8+496]
	121 Move W3, W20
	122 Move W4, W19
	123 Move X20, [X31+48]
	124 Move X19, [X31+56]
	125 Move X22, [X31+32]
	126 Move X21, [X31+40]
	127 Move X24, [X31+16]
	128 Move X23, [X31+24]
	129 Move X30, [X31+64]
	130 CallNoReturn X7
	131 Move X23, 0xEF5000
	132 Move X23, [X23+4048]
	133 Move X0, [X23]
	134 Move W8, [X0+224]
	135 Compare W8, 0
	136 JumpIfNotEqual {139}
	137 Call 0x1C17DFC
	138 Move X0, [X23]
	139 Move X8, [X0+184]
	140 Move X0, [X8]
	141 Compare X0, 0
	142 JumpIfEqual {186}
	143 Move X1, X22
	144 Move X2, X21
	145 Move W3, W20
	146 Move W4, W19
	147 Move W5, W31
	148 Move X23, 0xEF5000
	149 Move X23, [X23+4048]
	150 Move X0, [X23]
	151 Move W8, [X0+224]
	152 Compare W8, 0
	153 JumpIfNotEqual {156}
	154 Call 0x1C17DFC
	155 Move X0, [X23]
	156 Move X8, [X0+184]
	157 Move X0, [X8]
	158 Compare X0, 0
	159 JumpIfEqual {186}
	160 Move W5, 1
	161 Move X1, X22
	162 Move X2, X21
	163 Move W3, W20
	164 Move W4, W19
	165 Move X20, [X31+48]
	166 Move X19, [X31+56]
	167 Move X22, [X31+32]
	168 Move X21, [X31+40]
	169 Move X24, [X31+16]
	170 Move X23, [X31+24]
	171 Move X6, X31
	172 Move X30, [X31+64]
	173 Call CompareInfo.IndexOfOrdinal, X0, X1, X2, X3, X4, X5
	174 Return X0
	175 Move X0, 0xECF000
	176 Move X0, [X0+1888]
	177 Call 0x1C17D08
	178 Call 0x1C17F10
	179 Move X19, X0
	180 Move X0, 0xEEF000
	181 Move X0, [X0+1624]
	182 Call 0x1C17D08
	183 Move X20, X0
	184 Move X0, 0xEEF000
	185 Move X0, [X0+1632]
	186 Call 0x1C17F20
	187 Move X0, 0xECC000
	188 Move X0, [X0+1320]
	189 Call 0x1C17D08
	190 Call 0x1C17F10
	191 Move X19, X0
	192 Move X0, 0xED1000
	193 Move X0, [X0+3784]
	194 Call 0x1C17D08
	195 Move X1, X0
	196 Move X0, X19
	197 Move X2, X31
	198 Call ArgumentNullException..ctor, X0, X1
	199 Move X0, 0xECF000
	200 Move X0, [X0+1888]
	201 Call 0x1C17D08
	202 Call 0x1C17F10
	203 Move X19, X0
	204 Move X0, 0xEEF000
	205 Move X0, [X0+1608]
	206 Call 0x1C17D08
	207 Move X20, X0
	208 Move X0, 0xEEF000
	209 Move X0, [X0+1616]
	210 Call 0x1C17D08
	211 Move X2, X0
	212 Move X0, X19
	213 Move X1, X20
	214 Move X3, X31
	215 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	216 Move X0, 0xEF6000
	217 Move X0, [X0+536]
	218 Call 0x1C17D08
	219 Move X1, X0
	220 Move X0, X19
	221 Call 0x1C17DEC
	222 Move X0, 0xECF000
	223 Move X0, [X0+1400]
	224 Call 0x1C17D08
	225 Call 0x1C17F10
	226 Move X19, X0
	227 Move X0, 0xEF5000
	228 Move X0, [X0+4056]
	229 Call 0x1C17D08
	230 Move X20, X0
	231 Move X0, 0xEF5000
	232 Move X0, [X0+4064]
	233 Call 0x1C17D08
	234 Move X2, X0
	235 Move X0, X19
	236 Move X1, X20
	237 Move X3, X31
	238 Call ArgumentException..ctor, X0, X1, X2

Method: System.Int32 LastIndexOf(System.Char value)

Disassembly:
	0x0322D668 ADRP X0, 0xEF5000
	0x0322D66C LDR X0, [X0 + 0x28]
	0x0322D670 BL 0x1C16CF4
	0x0322D674 ADRP X0, 0xEC8000

ISIL:
	001 Move W2, [X0+16]
	002 Add X0, X0, 20
	003 Move X3, X31
	004 Call SpanHelpers.LastIndexOf, X0, X1, X2
	005 Return X0

Method: System.Int32 LastIndexOf(System.Char value, System.Int32 startIndex)

Disassembly:
	0x0322D678 LDR X0, [X0 + 0x278]
	0x0322D67C BL 0x1C16CF4

ISIL:
	001 Add W3, W2, 1

Method: System.Int32 LastIndexOf(System.Char value, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x0322D680 MOVZ W8, 0x1
	0x0322D684 STRB W8, [X21 + 0x392]
	0x0322D688 CBZ W19, 0x322D6D0
	0x0322D68C MOV W0, W19
	0x0322D690 BL 0x1C8825C
	0x0322D694 CBZ X0, 0x322D6F8
	0x0322D698 ADRP X8, 0xEF5000
	0x0322D69C LDR X8, [X8 + 0x20]
	0x0322D6A0 MOV X21, X0
	0x0322D6A4 ADD X22, X0, 0x14
	0x0322D6A8 MOV X0, X20
	0x0322D6AC LDR X2, [X8]
	0x0322D6B0 MOV X1, X19
	0x0322D6B4 BL 0x2218CF8
	0x0322D6B8 MOV X1, X0
	0x0322D6BC UBFM W2, W19, 0x1F, 0x1E
	0x0322D6C0 MOV X0, X22
	0x0322D6C4 MOV X3, X31
	0x0322D6C8 BL 0x33A8CD0
	0x0322D6CC B 0x322D6E4
	0x0322D6D0 ADRP X8, 0xEC8000
	0x0322D6D4 LDR X8, [X8 + 0x278]
	0x0322D6D8 LDR X8, [X8]
	0x0322D6DC LDR X8, [X8 + 0xB8]
	0x0322D6E0 LDR X21, [X8]
	0x0322D6E4 MOV X0, X21
	0x0322D6E8 LDP X20, X19, [X31 + 0x20]
	0x0322D6EC LDP X22, X21, [X31 + 0x10]
	0x0322D6F0 LDR X30, [X31], #0x30
	0x0322D6F4 RET
	0x0322D6F8 BL 0x1C16F20
	0x0322D6FC STR X30, [X31 - 0x20]!
	0x0322D700 STP X20, X19, [X31 + 0x10]
	0x0322D704 ADRP X20, 0x11AF000
	0x0322D708 LDRB W8, [X20 + 0x393]
	0x0322D70C MOV X19, X0
	0x0322D710 TBNZ X8, 0x0, 0x322D728
	0x0322D714 ADRP X0, 0xEED000
	0x0322D718 LDR X0, [X0 + 0x290]
	0x0322D71C BL 0x1C16CF4
	0x0322D720 MOVZ W8, 0x1
	0x0322D724 STRB W8, [X20 + 0x393]
	0x0322D728 CBZ X19, 0x322D738
	0x0322D72C LDR W1, [X19 + 0x10]
	0x0322D730 ADD X0, X19, 0x14
	0x0322D734 B 0x322D740
	0x0322D738 MOV X0, X31
	0x0322D73C MOV X1, X31
	0x0322D740 LDP X20, X19, [X31 + 0x10]
	0x0322D744 LDR X30, [X31], #0x20
	0x0322D748 RET
	0x0322D74C RET
	0x0322D750 STR X30, [X31 - 0x20]!
	0x0322D754 STP X20, X19, [X31 + 0x10]
	0x0322D758 CBZ X0, 0x322D798
	0x0322D75C MOV X20, X0
	0x0322D760 LDR W0, [X0 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+16]
	005 Compare W8, 0
	006 JumpIfEqual {18}
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Add W8, W2, 1
	009 Subtract W19, W8, W3
	010 Add X8, X0, W19
	011 Add X0, X8, 20
	012 Move W2, W3
	013 Move X3, X31
	014 Call SpanHelpers.LastIndexOf, X0, X1, X2
	015 Add W8, W0, W19
	016 Add W31, W0, 1
	017 NotImplemented "Instruction CSINV not yet implemented."
	018 Move TEMP, 0
	019 Not TEMP
	020 Move W0, TEMP
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0
	025 Move X0, 0xECF000
	026 Move X0, [X0+1888]
	027 Call 0x1C17D08
	028 Call 0x1C17F10
	029 Move X19, X0
	030 Move X0, 0xEEF000
	031 Move X0, [X0+1624]
	032 Call 0x1C17D08
	033 Move X20, X0
	034 Move X0, 0xEEF000
	035 Move X0, [X0+1632]
	036 Move X0, 0xECF000
	037 Move X0, [X0+1888]
	038 Call 0x1C17D08
	039 Call 0x1C17F10
	040 Move X19, X0
	041 Move X0, 0xEEF000
	042 Move X0, [X0+1608]
	043 Call 0x1C17D08
	044 Move X20, X0
	045 Move X0, 0xEEF000
	046 Move X0, [X0+1616]
	047 Call 0x1C17D08
	048 Move X2, X0
	049 Move X0, X19
	050 Move X1, X20
	051 Move X3, X31
	052 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	053 Move X0, 0xEF6000
	054 Move X0, [X0+544]
	055 Call 0x1C17D08
	056 Move X1, X0
	057 Move X0, X19
	058 Call 0x1C17DEC

Method: System.Int32 LastIndexOfAny(System.Char[] anyOf)

Disassembly:
	0x0322D764 BL 0x1C8825C
	0x0322D768 CBZ X0, 0x322D7E0
	0x0322D76C LDR W8, [X20 + 0x10]

ISIL:
	001 Move W3, [X0+16]
	002 Subtract W2, W3, 1

Method: System.Int32 LastIndexOfAny(System.Char[] anyOf, System.Int32 startIndex)

Disassembly:
	0x0322D89C MOV X20, X0
	0x0322D8A0 ADRP X0, 0xEF5000

ISIL:
	001 Add W3, W2, 1
	002 Call String.LastIndexOfAny, X0, X1, X2, X3
	003 Return X0

Method: System.Int32 LastIndexOfAny(System.Char[] anyOf, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x0322D770 MOV X19, X0
	0x0322D774 ADD X0, X0, 0x14
	0x0322D778 ADD X1, X20, 0x14
	0x0322D77C UBFM W2, W8, 0x1F, 0x1E
	0x0322D780 MOV X3, X31
	0x0322D784 BL 0x33A8CD0
	0x0322D788 MOV X0, X19
	0x0322D78C LDP X20, X19, [X31 + 0x10]
	0x0322D790 LDR X30, [X31], #0x20
	0x0322D794 RET
	0x0322D798 ADRP X0, 0xECB000
	0x0322D79C LDR X0, [X0 + 0x528]
	0x0322D7A0 BL 0x1C16D08
	0x0322D7A4 BL 0x1C16F10
	0x0322D7A8 MOV X19, X0
	0x0322D7AC ADRP X0, 0xEC8000
	0x0322D7B0 LDR X0, [X0 + 0xC80]
	0x0322D7B4 BL 0x1C16D08
	0x0322D7B8 MOV X1, X0
	0x0322D7BC MOV X0, X19
	0x0322D7C0 MOV X2, X31
	0x0322D7C4 BL 0x330E100
	0x0322D7C8 ADRP X0, 0xEF5000
	0x0322D7CC LDR X0, [X0 + 0x270]
	0x0322D7D0 BL 0x1C16D08
	0x0322D7D4 MOV X1, X0
	0x0322D7D8 MOV X0, X19
	0x0322D7DC BL 0x1C16DEC
	0x0322D7E0 BL 0x1C16F20
	0x0322D7E4 STR X30, [X31 - 0x20]!
	0x0322D7E8 STP X20, X19, [X31 + 0x10]
	0x0322D7EC CBZ X2, 0x322D848
	0x0322D7F0 TBNZ X4, 0x1F, 0x322D87C
	0x0322D7F4 TBNZ X1, 0x1F, 0x322D8AC
	0x0322D7F8 LDR W8, [X0 + 0x10]
	0x0322D7FC SUB W8, W8, W1
	0x0322D800 CMP W8, W4
	0x0322D804 B.LT 0x322D8DC
	0x0322D808 TBNZ X3, 0x1F, 0x322D8FC
	0x0322D80C LDR W8, [X2 + 0x18]
	0x0322D810 SUB W9, W8, W4
	0x0322D814 CMP W9, W3
	0x0322D818 B.LT 0x322D8FC
	0x0322D81C LDP X20, X19, [X31 + 0x10]
	0x0322D820 ADD X10, X2, 0x20
	0x0322D824 CMP W8, 0x0
	0x0322D828 ADD X9, X0, W1, 0x1, UXTW
	0x0322D82C CSEL X8, X31, X10, EQ
	0x0322D830 ADD X1, X9, 0x14
	0x0322D834 ADD X0, X8, W3, 0x1, UXTW
	0x0322D838 UBFM W2, W4, 0x1F, 0x1E
	0x0322D83C MOV X3, X31
	0x0322D840 LDR X30, [X31], #0x20
	0x0322D844 B 0x33A8CD0
	0x0322D848 ADRP X0, 0xECB000
	0x0322D84C LDR X0, [X0 + 0x528]
	0x0322D850 BL 0x1C16D08
	0x0322D854 BL 0x1C16F10
	0x0322D858 MOV X19, X0
	0x0322D85C ADRP X0, 0xEF5000
	0x0322D860 LDR X0, [X0 + 0x278]
	0x0322D864 BL 0x1C16D08
	0x0322D868 MOV X1, X0
	0x0322D86C MOV X0, X19
	0x0322D870 MOV X2, X31
	0x0322D874 BL 0x330E100
	0x0322D878 B 0x322D940
	0x0322D87C ADRP X0, 0xECE000
	0x0322D880 LDR X0, [X0 + 0x760]
	0x0322D884 BL 0x1C16D08
	0x0322D888 BL 0x1C16F10
	0x0322D88C MOV X19, X0
	0x0322D890 ADRP X0, 0xEEE000
	0x0322D894 LDR X0, [X0 + 0x648]
	0x0322D898 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {37}
	006 Move W8, [X0+16]
	007 Compare W8, 0
	008 JumpIfEqual {25}
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move TEMP, X3
	011 And TEMP, TEMP, -2147483648
	012 Compare TEMP, -2147483648
	013 JumpIfEqual {60}
	014 Subtract W8, W3, 1
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move W8, [X1+24]
	017 NotImplemented "Instruction CMP not yet implemented."
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction LDRH not yet implemented."
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Call String.LastIndexOf, X0, X1, X2, X3
	024 Return X0
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move TEMP, 0
	028 Not TEMP
	029 Move W0, TEMP
	030 Move X30, [X31+32]
	031 Return X0
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Call String.LastIndexOfCharArray, X0, X1, X2, X3
	036 Return X0
	037 Move X0, 0xECC000
	038 Move X0, [X0+1320]
	039 Call 0x1C17D08
	040 Call 0x1C17F10
	041 Move X19, X0
	042 Move X0, 0xEF6000
	043 Move X0, [X0+520]
	044 Call 0x1C17D08
	045 Move X1, X0
	046 Move X0, X19
	047 Move X2, X31
	048 Call ArgumentNullException..ctor, X0, X1
	049 Move X0, 0xECF000
	050 Move X0, [X0+1888]
	051 Call 0x1C17D08
	052 Call 0x1C17F10
	053 Move X19, X0
	054 Move X0, 0xEEF000
	055 Move X0, [X0+1624]
	056 Call 0x1C17D08
	057 Move X20, X0
	058 Move X0, 0xEEF000
	059 Move X0, [X0+1632]
	060 Move X0, 0xECF000
	061 Move X0, [X0+1888]
	062 Call 0x1C17D08
	063 Call 0x1C17F10
	064 Move X19, X0
	065 Move X0, 0xEEF000
	066 Move X0, [X0+1608]
	067 Call 0x1C17D08
	068 Move X20, X0
	069 Move X0, 0xEEF000
	070 Move X0, [X0+1616]
	071 Call 0x1C17D08
	072 Move X2, X0
	073 Move X0, X19
	074 Move X1, X20
	075 Move X3, X31
	076 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	077 Move X0, 0xEF6000
	078 Move X0, [X0+552]
	079 Call 0x1C17D08
	080 Move X1, X0
	081 Move X0, X19
	082 Call 0x1C17DEC

Method: System.Int32 LastIndexOfCharArray(System.Char[] anyOf, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x0322D8A4 LDR X0, [X0 + 0x30]
	0x0322D8A8 B 0x322D928
	0x0322D8AC ADRP X0, 0xECE000
	0x0322D8B0 LDR X0, [X0 + 0x760]
	0x0322D8B4 BL 0x1C16D08
	0x0322D8B8 BL 0x1C16F10
	0x0322D8BC MOV X19, X0
	0x0322D8C0 ADRP X0, 0xEF5000
	0x0322D8C4 LDR X0, [X0 + 0x280]
	0x0322D8C8 BL 0x1C16D08
	0x0322D8CC MOV X20, X0
	0x0322D8D0 ADRP X0, 0xEEE000
	0x0322D8D4 LDR X0, [X0 + 0x660]
	0x0322D8D8 B 0x322D928
	0x0322D8DC ADRP X0, 0xECE000
	0x0322D8E0 LDR X0, [X0 + 0x760]
	0x0322D8E4 BL 0x1C16D08
	0x0322D8E8 BL 0x1C16F10
	0x0322D8EC MOV X19, X0
	0x0322D8F0 ADRP X0, 0xEF5000
	0x0322D8F4 LDR X0, [X0 + 0x280]
	0x0322D8F8 B 0x322D918
	0x0322D8FC ADRP X0, 0xECE000
	0x0322D900 LDR X0, [X0 + 0x760]
	0x0322D904 BL 0x1C16D08
	0x0322D908 BL 0x1C16F10
	0x0322D90C MOV X19, X0
	0x0322D910 ADRP X0, 0xEF5000
	0x0322D914 LDR X0, [X0 + 0x288]
	0x0322D918 BL 0x1C16D08
	0x0322D91C MOV X20, X0
	0x0322D920 ADRP X0, 0xEF5000
	0x0322D924 LDR X0, [X0 + 0x108]
	0x0322D928 BL 0x1C16D08
	0x0322D92C MOV X2, X0
	0x0322D930 MOV X0, X19
	0x0322D934 MOV X1, X20
	0x0322D938 MOV X3, X31
	0x0322D93C BL 0x3311888
	0x0322D940 ADRP X0, 0xEF5000
	0x0322D944 LDR X0, [X0 + 0x290]
	0x0322D948 BL 0x1C16D08
	0x0322D94C MOV X1, X0
	0x0322D950 MOV X0, X19
	0x0322D954 BL 0x1C16DEC
	0x0322D958 STR X30, [X31 - 0x20]!
	0x0322D95C STP X20, X19, [X31 + 0x10]
	0x0322D960 ADRP X20, 0x11AF000
	0x0322D964 LDRB W8, [X20 + 0x394]
	0x0322D968 MOV X19, X0
	0x0322D96C TBNZ X8, 0x0, 0x322D990
	0x0322D970 ADRP X0, 0xEF5000
	0x0322D974 LDR X0, [X0 + 0x298]
	0x0322D978 BL 0x1C16CF4
	0x0322D97C ADRP X0, 0xECF000
	0x0322D980 LDR X0, [X0 + 0x8D8]
	0x0322D984 BL 0x1C16CF4
	0x0322D988 MOVZ W8, 0x1
	0x0322D98C STRB W8, [X20 + 0x394]
	0x0322D990 LDR W1, [X19 + 0x10]
	0x0322D994 CBZ W1, 0x322D9D4
	0x0322D998 ADRP X8, 0xECF000
	0x0322D99C LDR X8, [X8 + 0x8D8]
	0x0322D9A0 LDR X0, [X8]
	0x0322D9A4 BL 0x1C16D6C
	0x0322D9A8 CBZ X0, 0x322DA3C
	0x0322D9AC LDR W8, [X0 + 0x18]
	0x0322D9B0 MOV X20, X0
	0x0322D9B4 CBZ W8, 0x322DA40
	0x0322D9B8 LDR W8, [X19 + 0x10]
	0x0322D9BC ADD X1, X19, 0x14
	0x0322D9C0 ADD X0, X20, 0x20
	0x0322D9C4 MOV X3, X31
	0x0322D9C8 UBFM W2, W8, 0x1F, 0x1E
	0x0322D9CC BL 0x33A8CD0
	0x0322D9D0 B 0x322DA2C

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+48], X30
	003 Move [X31+56], X25
	004 Move [X31+64], X24
	005 Move [X31+72], X23
	006 Move [X31+80], X22
	007 Move [X31+88], X21
	008 Move [X31+96], X20
	009 Move [X31+104], X19
	010 NotImplemented "Instruction MRS not yet implemented."
	011 Move X8, [X23+40]
	012 Move X25, 0x11B0000
	013 Move X24, 0xEF6000
	014 Move W20, W3
	015 Move [X31+40], X8
	016 Move W8, [X25+905]
	017 Move X24, [X24+472]
	018 Move W21, W2
	019 Move X19, X1
	020 Move X22, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0xEF6000
	026 Move X0, [X0+472]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X25+905], W8
	030 Move X1, [X24]
	031 NotImplemented "Instruction MOVI not yet implemented."
	032 Move X0, X19
	033 Move [X31], V0
	034 Move [X31+8], V0
	035 Call ReadOnlySpan`1<Char>.op_Implicit, X0
	036 Move X2, X0
	037 Move X3, X1
	038 Add X0, X31, 0
	039 Move X1, X2
	040 Move X2, X3
	041 Add X24, X31, 0
	042 Call String.InitializeProbabilisticMap, X0, X1
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Add X22, X22, 20
	045 NotImplemented "Instruction SBFM not yet implemented."
	046 Add W20, W20, 1
	047 NotImplemented "Instruction LDRH not yet implemented."
	048 And W8, W0, 255
	049 Move W8, W8
	050 ShiftRight W8, 30
	051 And W8, W8, 0x1FFFFFFF
	052 And X8, X8, 31
	053 Move W8, [X8]
	054 Move W9, W0
	055 ShiftRight W9, 3
	056 And W9, W9, 127
	057 NotImplemented "Instruction LSRV not yet implemented."
	058 Move TEMP, X8
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {81}
	062 Move X8, X0
	063 ShiftRight X8, 6
	064 And X8, X8, 0x7FFFFFFF
	065 And X8, X8, 31
	066 Move W8, [X8]
	067 Move X9, X0
	068 ShiftRight X9, 11
	069 And X9, X9, 0x7FFFFFFF
	070 NotImplemented "Instruction LSRV not yet implemented."
	071 Move TEMP, X8
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfNotEqual {81}
	075 Move X1, X19
	076 Call String.ArrayContains, X0, X1
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfEqual {100}
	081 Subtract W20, W20, 1
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Subtract X21, X21, 2
	084 Move TEMP, 0
	085 Not TEMP
	086 Move W0, TEMP
	087 Move X8, [X23+40]
	088 Move X9, [X31+40]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move X20, [X31+96]
	091 Move X19, [X31+104]
	092 Move X22, [X31+80]
	093 Move X21, [X31+88]
	094 Move X24, [X31+64]
	095 Move X23, [X31+72]
	096 Move X30, [X31+48]
	097 Move X25, [X31+56]
	098 Add X31, X31, 112
	099 Return X0
	100 NotImplemented "Instruction CMP not yet implemented."
	101 NotImplemented "Instruction CINC not yet implemented."
	102 Move X0, X8
	103 ShiftRight X0, 1
	104 And X0, X0, 0x7FFFFFFF
	105 Call 0x3EB2B20

Method: System.Int32 LastIndexOf(System.String value)

Disassembly:
	0x0322D9D4 ADRP X8, 0xEF5000
	0x0322D9D8 LDR X8, [X8 + 0x298]
	0x0322D9DC LDR X19, [X8]
	0x0322D9E0 LDR X8, [X19 + 0x38]

ISIL:
	001 Move W3, [X0+16]
	002 Move W4, W31
	003 Subtract W2, W3, 1

Method: System.Int32 LastIndexOf(System.String value, System.StringComparison comparisonType)

Disassembly:
	0x0322DD84 MOV X0, X19
	0x0322DD88 MOV X2, X31
	0x0322DD8C BL 0x3314A68
	0x0322DD90 ADRP X0, 0xEF5000

ISIL:
	001 Move W3, [X0+16]
	002 Move W4, W2
	003 Subtract W2, W3, 1
	004 Call String.LastIndexOf, X0, X1, X2, X3, X4
	005 Return X0

Method: System.Int32 LastIndexOf(System.String value, System.Int32 startIndex, System.Int32 count, System.StringComparison comparisonType)

Disassembly:
	0x0322D9E4 CBNZ X8, 0x322D9F4
	0x0322D9E8 MOV X0, X19
	0x0322D9EC BL 0x1C5C6E0
	0x0322D9F0 LDR X8, [X19 + 0x38]
	0x0322D9F4 LDR X0, [X8 + 0x10]
	0x0322D9F8 LDRB W8, [X0 + 0x135]
	0x0322D9FC TBNZ X8, 0x0, 0x322DA04
	0x0322DA00 BL 0x1C5C684
	0x0322DA04 LDR W8, [X0 + 0xE0]
	0x0322DA08 CBNZ W8, 0x322DA10
	0x0322DA0C BL 0x1C16DFC
	0x0322DA10 LDR X8, [X19 + 0x38]
	0x0322DA14 LDR X0, [X8 + 0x10]
	0x0322DA18 LDRB W8, [X0 + 0x135]
	0x0322DA1C TBNZ X8, 0x0, 0x322DA24
	0x0322DA20 BL 0x1C5C684
	0x0322DA24 LDR X8, [X0 + 0xB8]
	0x0322DA28 LDR X20, [X8]
	0x0322DA2C MOV X0, X20
	0x0322DA30 LDP X20, X19, [X31 + 0x10]
	0x0322DA34 LDR X30, [X31], #0x20
	0x0322DA38 RET
	0x0322DA3C BL 0x1C16F20
	0x0322DA40 BL 0x1C16F28
	0x0322DA44 STP X30, X23, [X31 - 0x30]!
	0x0322DA48 STP X22, X21, [X31 + 0x10]
	0x0322DA4C STP X20, X19, [X31 + 0x20]
	0x0322DA50 ADRP X20, 0x11AF000
	0x0322DA54 LDRB W8, [X20 + 0x395]
	0x0322DA58 MOV X19, X0
	0x0322DA5C TBNZ X8, 0x0, 0x322DA74
	0x0322DA60 ADRP X0, 0xEC8000
	0x0322DA64 LDR X0, [X0 + 0x170]
	0x0322DA68 BL 0x1C16CF4
	0x0322DA6C MOVZ W8, 0x1
	0x0322DA70 STRB W8, [X20 + 0x395]
	0x0322DA74 CBZ X19, 0x322DADC
	0x0322DA78 LDR W8, [X19 + 0x10]
	0x0322DA7C CMP W8, 0x1
	0x0322DA80 B.LT 0x322DADC
	0x0322DA84 ADRP X23, 0xEC8000
	0x0322DA88 LDR X23, [X23 + 0x170]
	0x0322DA8C MOV X21, X31
	0x0322DA90 ADD X22, X19, 0x14
	0x0322DA94 CMP X21, W8, SXTW
	0x0322DA98 B.LT 0x322DAA4
	0x0322DA9C MOV X0, X31
	0x0322DAA0 BL 0x339D674
	0x0322DAA4 LDR X0, [X23]
	0x0322DAA8 LDRH W20, [X22, X21, LSL #1]
	0x0322DAAC LDR W8, [X0 + 0xE0]
	0x0322DAB0 CBNZ W8, 0x322DAB8
	0x0322DAB4 BL 0x1C16DFC
	0x0322DAB8 MOV W0, W20
	0x0322DABC MOV X1, X31
	0x0322DAC0 BL 0x3317FCC
	0x0322DAC4 TBZ X0, 0x0, 0x322DAE0
	0x0322DAC8 LDRSW X8, [X19 + 0x10]
	0x0322DACC ADD X21, X21, 0x1
	0x0322DAD0 CMP X21, X8
	0x0322DAD4 B.LT 0x322DA94
	0x0322DAD8 B 0x322DAE0
	0x0322DADC MOVZ W0, 0x1
	0x0322DAE0 LDP X20, X19, [X31 + 0x20]
	0x0322DAE4 LDP X22, X21, [X31 + 0x10]
	0x0322DAE8 AND W0, W0, 0x1
	0x0322DAEC LDP X30, X23, [X31], #0x30
	0x0322DAF0 RET
	0x0322DAF4 STP X30, X23, [X31 - 0x30]!
	0x0322DAF8 STP X22, X21, [X31 + 0x10]
	0x0322DAFC STP X20, X19, [X31 + 0x20]
	0x0322DB00 ADRP X22, 0x11AF000
	0x0322DB04 LDRB W8, [X22 + 0x396]
	0x0322DB08 MOV X20, X2
	0x0322DB0C MOV W19, W1
	0x0322DB10 MOV X21, X0
	0x0322DB14 TBNZ X8, 0x0, 0x322DB2C
	0x0322DB18 ADRP X0, 0xEC8000
	0x0322DB1C LDR X0, [X0 + 0x278]
	0x0322DB20 BL 0x1C16CF4
	0x0322DB24 MOVZ W8, 0x1
	0x0322DB28 STRB W8, [X22 + 0x396]
	0x0322DB2C CBZ X20, 0x322DBB8
	0x0322DB30 LDR X8, [X20]
	0x0322DB34 MOV X0, X20
	0x0322DB38 MOV X1, X21
	0x0322DB3C MOV W2, W19
	0x0322DB40 LDR X9, [X8 + 0x2C8]
	0x0322DB44 LDR X4, [X8 + 0x2D0]
	0x0322DB48 MOV X3, X31
	0x0322DB4C BLR X9
	0x0322DB50 CBZ W0, 0x322DB90
	0x0322DB54 MOV W23, W0
	0x0322DB58 BL 0x1C8825C
	0x0322DB5C CBZ X0, 0x322DBB8
	0x0322DB60 LDR X8, [X20]
	0x0322DB64 MOV X22, X0
	0x0322DB68 ADD X3, X0, 0x14
	0x0322DB6C MOV X0, X20
	0x0322DB70 LDR X9, [X8 + 0x308]
	0x0322DB74 LDR X6, [X8 + 0x310]
	0x0322DB78 MOV X1, X21
	0x0322DB7C MOV W2, W19
	0x0322DB80 MOV W4, W23
	0x0322DB84 MOV X5, X31
	0x0322DB88 BLR X9
	0x0322DB8C B 0x322DBA4
	0x0322DB90 ADRP X8, 0xEC8000
	0x0322DB94 LDR X8, [X8 + 0x278]
	0x0322DB98 LDR X8, [X8]
	0x0322DB9C LDR X8, [X8 + 0xB8]
	0x0322DBA0 LDR X22, [X8]
	0x0322DBA4 MOV X0, X22
	0x0322DBA8 LDP X20, X19, [X31 + 0x20]
	0x0322DBAC LDP X22, X21, [X31 + 0x10]
	0x0322DBB0 LDP X30, X23, [X31], #0x30
	0x0322DBB4 RET
	0x0322DBB8 BL 0x1C16F20
	0x0322DBBC STP X30, X19, [X31 - 0x10]!
	0x0322DBC0 MOV W19, W0
	0x0322DBC4 MOVZ W0, 0x1
	0x0322DBC8 BL 0x1C8825C
	0x0322DBCC CBZ X0, 0x322DBDC
	0x0322DBD0 STRH W19, [X0 + 0x14]
	0x0322DBD4 LDP X30, X19, [X31], #0x10
	0x0322DBD8 RET
	0x0322DBDC BL 0x1C16F20
	0x0322DBE0 RET
	0x0322DBE4 RET
	0x0322DBE8 STP X30, X21, [X31 - 0x20]!
	0x0322DBEC STP X20, X19, [X31 + 0x10]
	0x0322DBF0 ADRP X20, 0x11AF000
	0x0322DBF4 ADRP X21, 0xEF5000
	0x0322DBF8 LDRB W8, [X20 + 0x397]
	0x0322DBFC LDR X21, [X21 + 0x2A0]
	0x0322DC00 MOV X19, X0
	0x0322DC04 TBNZ X8, 0x0, 0x322DC1C
	0x0322DC08 ADRP X0, 0xEF5000
	0x0322DC0C LDR X0, [X0 + 0x2A0]
	0x0322DC10 BL 0x1C16CF4
	0x0322DC14 MOVZ W8, 0x1
	0x0322DC18 STRB W8, [X20 + 0x397]
	0x0322DC1C LDR X0, [X21]
	0x0322DC20 BL 0x1C16F10
	0x0322DC24 MOV X1, X19
	0x0322DC28 MOV X2, X31
	0x0322DC2C MOV X20, X0
	0x0322DC30 BL 0x331C2E4
	0x0322DC34 MOV X0, X20
	0x0322DC38 LDP X20, X19, [X31 + 0x10]
	0x0322DC3C LDP X30, X21, [X31], #0x20
	0x0322DC40 RET
	0x0322DC44 STP X30, X21, [X31 - 0x20]!
	0x0322DC48 STP X20, X19, [X31 + 0x10]
	0x0322DC4C ADRP X20, 0x11AF000
	0x0322DC50 ADRP X21, 0xEF5000
	0x0322DC54 LDRB W8, [X20 + 0x398]
	0x0322DC58 LDR X21, [X21 + 0x2A0]
	0x0322DC5C MOV X19, X0
	0x0322DC60 TBNZ X8, 0x0, 0x322DC78
	0x0322DC64 ADRP X0, 0xEF5000
	0x0322DC68 LDR X0, [X0 + 0x2A0]
	0x0322DC6C BL 0x1C16CF4
	0x0322DC70 MOVZ W8, 0x1
	0x0322DC74 STRB W8, [X20 + 0x398]
	0x0322DC78 LDR X0, [X21]
	0x0322DC7C BL 0x1C16F10
	0x0322DC80 MOV X1, X19
	0x0322DC84 MOV X2, X31
	0x0322DC88 MOV X20, X0
	0x0322DC8C BL 0x331C2E4
	0x0322DC90 MOV X0, X20
	0x0322DC94 LDP X20, X19, [X31 + 0x10]
	0x0322DC98 LDP X30, X21, [X31], #0x20
	0x0322DC9C RET
	0x0322DCA0 STP X30, X19, [X31 - 0x10]!
	0x0322DCA4 MOV X19, X0
	0x0322DCA8 MOV X0, X31
	0x0322DCAC BL 0x33C67AC
	0x0322DCB0 SUB W9, W0, 0x1
	0x0322DCB4 ANDS W31, W9, W19, 0x0
	0x0322DCB8 MOV X8, X19
	0x0322DCBC B.EQ 0x322DCE4
	0x0322DCC0 ADD X10, X19, 0x2
	0x0322DCC4 MOV X8, X19
	0x0322DCC8 LDRH W11, [X8]
	0x0322DCCC CBZ W11, 0x322DD38
	0x0322DCD0 MOV X8, X10
	0x0322DCD4 ANDS W31, W9, W10, 0x0
	0x0322DCD8 ADD X10, X10, 0x2
	0x0322DCDC B.NE 0x322DCC8
	0x0322DCE0 SUB X8, X10, 0x2
	0x0322DCE4 ORR X9, X31, 0x7FFF7FFF7FFF7FFF
	0x0322DCE8 LDR X10, [X8]
	0x0322DCEC ADD X11, X10, X9
	0x0322DCF0 ORN X11, X31, X11, 0x0
	0x0322DCF4 ANDS X31, X11, 0x8000800080008000
	0x0322DCF8 B.EQ 0x322DD20
	0x0322DCFC ANDS W31, W10, 0xFFFF
	0x0322DD00 B.EQ 0x322DD38
	0x0322DD04 MOV X10, X8
	0x0322DD08 LDRH W11, [X10 + 0x2]!
	0x0322DD0C CBZ W11, 0x322DD28
	0x0322DD10 LDRH W11, [X8 + 0x4]
	0x0322DD14 CBZ W11, 0x322DD34
	0x0322DD18 LDRH W10, [X8 + 0x6]
	0x0322DD1C CBZ W10, 0x322DD30
	0x0322DD20 ADD X8, X8, 0x8
	0x0322DD24 B 0x322DCE8
	0x0322DD28 MOV X8, X10
	0x0322DD2C B 0x322DD38
	0x0322DD30 ADD X10, X8, 0x4
	0x0322DD34 ADD X8, X10, 0x2
	0x0322DD38 SUB X9, X8, X19
	0x0322DD3C CMP X9, 0x0
	0x0322DD40 CINC X9, X9, LT
	0x0322DD44 SBFM X0, X9, 0x1, 0x3F
	0x0322DD48 UBFM X9, X0, 0x20, 0x1F
	0x0322DD4C ADD X9, X19, X9, 0x1F, ASR
	0x0322DD50 CMP X9, X8
	0x0322DD54 B.NE 0x322DD60
	0x0322DD58 LDP X30, X19, [X31], #0x10
	0x0322DD5C RET
	0x0322DD60 ADRP X0, 0xECE000
	0x0322DD64 LDR X0, [X0 + 0x578]
	0x0322DD68 BL 0x1C16D08
	0x0322DD6C BL 0x1C16F10
	0x0322DD70 MOV X19, X0
	0x0322DD74 ADRP X0, 0xEF5000
	0x0322DD78 LDR X0, [X0 + 0x2A8]
	0x0322DD7C BL 0x1C16D08
	0x0322DD80 MOV X1, X0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x11B0000
	009 Move W8, [X24+906]
	010 Move W23, W4
	011 Move W19, W3
	012 Move W20, W2
	013 Move X21, X1
	014 Move X22, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xEF5000
	020 Move X0, [X0+4048]
	021 Call 0x1C17CF4
	022 Move X0, 0xEC9000
	023 Move X0, [X0+3144]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+906], W8
	027 Compare X21, 0
	028 JumpIfEqual {208}
	029 Move W8, [X22+16]
	030 Compare W8, 0
	031 JumpIfEqual {74}
	032 Move TEMP, X20
	033 And TEMP, TEMP, -2147483648
	034 Compare TEMP, -2147483648
	035 JumpIfEqual {220}
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Subtract W8, W19, 1
	038 Subtract W20, W20, 1
	039 Move W19, W8
	040 Move TEMP, X19
	041 And TEMP, TEMP, -2147483648
	042 Compare TEMP, -2147483648
	043 JumpIfEqual {197}
	044 Subtract W8, W20, W19
	045 Add W31, W8, 1
	046 Move W8, [X21+16]
	047 Compare W8, 0
	048 JumpIfEqual {79}
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X9, -40460288
	051 Move W8, W23
	052 Add X9, X9, 1149
	053 NotImplemented "Instruction ADR not yet implemented."
	054 Move W11, [X9]
	055 Add X10, X10, X11
	056 CallNoReturn X10
	057 Move X8, 0xEC9000
	058 Move X8, [X8+3144]
	059 Move X0, [X8]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Move X0, X31
	065 Call CultureInfo.get_CurrentCulture
	066 Compare X0, 0
	067 JumpIfEqual {243}
	068 Move X8, [X0]
	069 Move X9, [X8+504]
	070 Move X1, [X8+512]
	071 NotImplemented "Instruction BLR not yet implemented."
	072 Compare X0, 0
	073 JumpIfNotEqual {117}
	074 Add W9, W20, 1
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move W8, [X21+16]
	077 NotImplemented "Instruction CMP not yet implemented."
	078 NotImplemented "Instruction CSINV not yet implemented."
	079 Move W0, W20
	080 Move X20, [X31+48]
	081 Move X19, [X31+56]
	082 Move X22, [X31+32]
	083 Move X21, [X31+40]
	084 Move X24, [X31+16]
	085 Move X23, [X31+24]
	086 Move X30, [X31+64]
	087 Return X0
	088 Move X8, 0xEC9000
	089 Move X8, [X8+3144]
	090 Move X0, [X8]
	091 Move W8, [X0+224]
	092 Compare W8, 0
	093 JumpIfNotEqual {95}
	094 Call 0x1C17DFC
	095 Move X0, X31
	096 Call CultureInfo.get_CurrentCulture
	097 Compare X0, 0
	098 JumpIfEqual {243}
	099 Move X8, [X0]
	100 Move X9, [X8+504]
	101 Move X1, [X8+512]
	102 NotImplemented "Instruction BLR not yet implemented."
	103 Compare X0, 0
	104 JumpIfNotEqual {137}
	105 Move X23, 0xEF5000
	106 Move X23, [X23+4048]
	107 Move X0, [X23]
	108 Move W8, [X0+224]
	109 Compare W8, 0
	110 JumpIfNotEqual {113}
	111 Call 0x1C17DFC
	112 Move X0, [X23]
	113 Move X8, [X0+184]
	114 Move X0, [X8]
	115 Compare X0, 0
	116 JumpIfEqual {243}
	117 Move X8, [X0]
	118 Move X1, X22
	119 Move X2, X21
	120 Move W3, W20
	121 Move X7, [X8+504]
	122 Move X6, [X8+512]
	123 Move W4, W19
	124 Move W5, W31
	125 Move X23, 0xEF5000
	126 Move X23, [X23+4048]
	127 Move X0, [X23]
	128 Move W8, [X0+224]
	129 Compare W8, 0
	130 JumpIfNotEqual {133}
	131 Call 0x1C17DFC
	132 Move X0, [X23]
	133 Move X8, [X0+184]
	134 Move X0, [X8]
	135 Compare X0, 0
	136 JumpIfEqual {243}
	137 Move X8, [X0]
	138 Move W5, 1
	139 Move X1, X22
	140 Move X2, X21
	141 Move X7, [X8+504]
	142 Move X6, [X8+512]
	143 Move W3, W20
	144 Move W4, W19
	145 Move X20, [X31+48]
	146 Move X19, [X31+56]
	147 Move X22, [X31+32]
	148 Move X21, [X31+40]
	149 Move X24, [X31+16]
	150 Move X23, [X31+24]
	151 Move X30, [X31+64]
	152 CallNoReturn X7
	153 Move X23, 0xEF5000
	154 Move X23, [X23+4048]
	155 Move X0, [X23]
	156 Move W8, [X0+224]
	157 Compare W8, 0
	158 JumpIfNotEqual {161}
	159 Call 0x1C17DFC
	160 Move X0, [X23]
	161 Move X8, [X0+184]
	162 Move X0, [X8]
	163 Compare X0, 0
	164 JumpIfEqual {243}
	165 Move X1, X22
	166 Move X2, X21
	167 Move W3, W20
	168 Move W4, W19
	169 Move W5, W31
	170 Move X23, 0xEF5000
	171 Move X23, [X23+4048]
	172 Move X0, [X23]
	173 Move W8, [X0+224]
	174 Compare W8, 0
	175 JumpIfNotEqual {178}
	176 Call 0x1C17DFC
	177 Move X0, [X23]
	178 Move X8, [X0+184]
	179 Move X0, [X8]
	180 Compare X0, 0
	181 JumpIfEqual {243}
	182 Move W5, 1
	183 Move X1, X22
	184 Move X2, X21
	185 Move W3, W20
	186 Move W4, W19
	187 Move X20, [X31+48]
	188 Move X19, [X31+56]
	189 Move X22, [X31+32]
	190 Move X21, [X31+40]
	191 Move X24, [X31+16]
	192 Move X23, [X31+24]
	193 Move X6, X31
	194 Move X30, [X31+64]
	195 Call CompareInfo.LastIndexOfOrdinal, X0, X1, X2, X3, X4, X5
	196 Return X0
	197 Move X0, 0xECF000
	198 Move X0, [X0+1888]
	199 Call 0x1C17D08
	200 Call 0x1C17F10
	201 Move X19, X0
	202 Move X0, 0xEEF000
	203 Move X0, [X0+1608]
	204 Call 0x1C17D08
	205 Move X20, X0
	206 Move X0, 0xEEF000
	207 Move X0, [X0+1616]
	208 Move X0, 0xECC000
	209 Move X0, [X0+1320]
	210 Call 0x1C17D08
	211 Call 0x1C17F10
	212 Move X19, X0
	213 Move X0, 0xED1000
	214 Move X0, [X0+3784]
	215 Call 0x1C17D08
	216 Move X1, X0
	217 Move X0, X19
	218 Move X2, X31
	219 Call ArgumentNullException..ctor, X0, X1
	220 Move X0, 0xECF000
	221 Move X0, [X0+1888]
	222 Call 0x1C17D08
	223 Call 0x1C17F10
	224 Move X19, X0
	225 Move X0, 0xEEF000
	226 Move X0, [X0+1624]
	227 Call 0x1C17D08
	228 Move X20, X0
	229 Move X0, 0xEEF000
	230 Move X0, [X0+1632]
	231 Call 0x1C17D08
	232 Move X2, X0
	233 Move X0, X19
	234 Move X1, X20
	235 Move X3, X31
	236 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	237 Move X0, 0xEF6000
	238 Move X0, [X0+560]
	239 Call 0x1C17D08
	240 Move X1, X0
	241 Move X0, X19
	242 Call 0x1C17DEC
	243 Call 0x1C17F20
	244 Move X0, 0xECF000
	245 Move X0, [X0+1400]
	246 Call 0x1C17D08
	247 Call 0x1C17F10
	248 Move X19, X0
	249 Move X0, 0xEF5000
	250 Move X0, [X0+4056]
	251 Call 0x1C17D08
	252 Move X20, X0
	253 Move X0, 0xEF5000
	254 Move X0, [X0+4064]
	255 Call 0x1C17D08
	256 Move X2, X0
	257 Move X0, X19
	258 Move X1, X20
	259 Move X3, X31
	260 Call ArgumentException..ctor, X0, X1, X2

Method: System.Void .ctor(System.Char[] value)

Disassembly:
	0x0322DD94 LDR X0, [X0 + 0x2B0]

ISIL:
	001 Call 0x1C89264
	002 Return 

Method: System.String Ctor(System.Char[] value)

Disassembly:
	0x0322DD98 BL 0x1C16D08
	0x0322DD9C MOV X1, X0
	0x0322DDA0 MOV X0, X19
	0x0322DDA4 BL 0x1C16DEC
	0x0322DDA8 MOVZ W0, 0x12
	0x0322DDAC RET
	0x0322DDB0 STR X30, [X31 - 0x30]!
	0x0322DDB4 STP X22, X21, [X31 + 0x10]
	0x0322DDB8 STP X20, X19, [X31 + 0x20]
	0x0322DDBC ADRP X21, 0x11AF000
	0x0322DDC0 ADRP X22, 0xECF000
	0x0322DDC4 LDRB W8, [X21 + 0x399]
	0x0322DDC8 LDR X22, [X22 + 0x9E8]
	0x0322DDCC MOV X19, X1
	0x0322DDD0 MOV X20, X0
	0x0322DDD4 TBNZ X8, 0x0, 0x322DDEC
	0x0322DDD8 ADRP X0, 0xECF000
	0x0322DDDC LDR X0, [X0 + 0x9E8]
	0x0322DDE0 BL 0x1C16CF4
	0x0322DDE4 MOVZ W8, 0x1
	0x0322DDE8 STRB W8, [X21 + 0x399]
	0x0322DDEC LDR X0, [X22]
	0x0322DDF0 LDR W8, [X0 + 0xE0]
	0x0322DDF4 CBNZ W8, 0x322DDFC
	0x0322DDF8 BL 0x1C16DFC
	0x0322DDFC MOV X0, X20
	0x0322DE00 MOV X1, X19
	0x0322DE04 LDP X20, X19, [X31 + 0x20]
	0x0322DE08 LDP X22, X21, [X31 + 0x10]
	0x0322DE0C MOV X2, X31
	0x0322DE10 LDR X30, [X31], #0x30
	0x0322DE14 B 0x331E4F4
	0x0322DE18 STR X30, [X31 - 0x30]!
	0x0322DE1C STP X22, X21, [X31 + 0x10]
	0x0322DE20 STP X20, X19, [X31 + 0x20]
	0x0322DE24 ADRP X21, 0x11AF000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11B0000
	005 Move W8, [X20+907]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xEC9000
	012 Move X0, [X0+632]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+907], W8
	016 Compare X19, 0
	017 JumpIfEqual {35}
	018 Move X0, [X19+24]
	019 Compare X0, 0
	020 JumpIfEqual {35}
	021 Call 0x1C8925C
	022 Compare X0, 0
	023 JumpIfEqual {45}
	024 Move W8, [X19+24]
	025 Add X9, X19, 32
	026 Move X20, X0
	027 Add X0, X0, 20
	028 NotImplemented "Instruction CMP not yet implemented."
	029 NotImplemented "Instruction CSEL not yet implemented."
	030 Move W2, W8
	031 ShiftRight W2, 31
	032 And W2, W2, 0x3FFFFFFF
	033 Move X3, X31
	034 Call Buffer.Memmove, X0, X1, X2
	035 Move X8, 0xEC9000
	036 Move X8, [X8+632]
	037 Move X8, [X8]
	038 Move X8, [X8+184]
	039 Move X20, [X8]
	040 Move X0, X20
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Return X0
	045 Call 0x1C17F20

Method: System.Void .ctor(System.Char[] value, System.Int32 startIndex, System.Int32 length)

Disassembly:
	0x0322DE28 ADRP X22, 0xECF000

ISIL:
	001 Call 0x1C89264
	002 Return 

Method: System.String Ctor(System.Char[] value, System.Int32 startIndex, System.Int32 length)

Disassembly:
	0x0322DE2C LDRB W8, [X21 + 0x39A]
	0x0322DE30 LDR X22, [X22 + 0x9E8]
	0x0322DE34 MOV X19, X1
	0x0322DE38 MOV X20, X0
	0x0322DE3C TBNZ X8, 0x0, 0x322DE54
	0x0322DE40 ADRP X0, 0xECF000
	0x0322DE44 LDR X0, [X0 + 0x9E8]
	0x0322DE48 BL 0x1C16CF4
	0x0322DE4C MOVZ W8, 0x1
	0x0322DE50 STRB W8, [X21 + 0x39A]
	0x0322DE54 LDR X0, [X22]
	0x0322DE58 LDR W8, [X0 + 0xE0]
	0x0322DE5C CBNZ W8, 0x322DE64
	0x0322DE60 BL 0x1C16DFC
	0x0322DE64 MOV X0, X20
	0x0322DE68 MOV X1, X19
	0x0322DE6C LDP X20, X19, [X31 + 0x20]
	0x0322DE70 LDP X22, X21, [X31 + 0x10]
	0x0322DE74 MOV X2, X31
	0x0322DE78 LDR X30, [X31], #0x30
	0x0322DE7C B 0x331EA40
	0x0322DE80 STR X30, [X31 - 0x30]!
	0x0322DE84 STP X22, X21, [X31 + 0x10]
	0x0322DE88 STP X20, X19, [X31 + 0x20]
	0x0322DE8C ADRP X21, 0x11AF000
	0x0322DE90 ADRP X22, 0xECF000
	0x0322DE94 LDRB W8, [X21 + 0x39B]
	0x0322DE98 LDR X22, [X22 + 0x9E8]
	0x0322DE9C MOV X19, X1
	0x0322DEA0 MOV X20, X0
	0x0322DEA4 TBNZ X8, 0x0, 0x322DEBC
	0x0322DEA8 ADRP X0, 0xECF000
	0x0322DEAC LDR X0, [X0 + 0x9E8]
	0x0322DEB0 BL 0x1C16CF4
	0x0322DEB4 MOVZ W8, 0x1
	0x0322DEB8 STRB W8, [X21 + 0x39B]
	0x0322DEBC LDR X0, [X22]
	0x0322DEC0 LDR W8, [X0 + 0xE0]
	0x0322DEC4 CBNZ W8, 0x322DECC
	0x0322DEC8 BL 0x1C16DFC
	0x0322DECC MOV X0, X20
	0x0322DED0 MOV X1, X19
	0x0322DED4 LDP X20, X19, [X31 + 0x20]
	0x0322DED8 LDP X22, X21, [X31 + 0x10]
	0x0322DEDC MOV X2, X31
	0x0322DEE0 LDR X30, [X31], #0x30
	0x0322DEE4 B 0x331F120
	0x0322DEE8 STR X30, [X31 - 0x30]!
	0x0322DEEC STP X22, X21, [X31 + 0x10]
	0x0322DEF0 STP X20, X19, [X31 + 0x20]
	0x0322DEF4 ADRP X21, 0x11AF000
	0x0322DEF8 ADRP X22, 0xECF000
	0x0322DEFC LDRB W8, [X21 + 0x39C]
	0x0322DF00 LDR X22, [X22 + 0x9E8]
	0x0322DF04 MOV X19, X1
	0x0322DF08 MOV X20, X0
	0x0322DF0C TBNZ X8, 0x0, 0x322DF24
	0x0322DF10 ADRP X0, 0xECF000
	0x0322DF14 LDR X0, [X0 + 0x9E8]
	0x0322DF18 BL 0x1C16CF4
	0x0322DF1C MOVZ W8, 0x1
	0x0322DF20 STRB W8, [X21 + 0x39C]
	0x0322DF24 LDR X0, [X22]
	0x0322DF28 LDR W8, [X0 + 0xE0]
	0x0322DF2C CBNZ W8, 0x322DF34
	0x0322DF30 BL 0x1C16DFC
	0x0322DF34 MOV X0, X20
	0x0322DF38 MOV X1, X19
	0x0322DF3C LDP X20, X19, [X31 + 0x20]
	0x0322DF40 LDP X22, X21, [X31 + 0x10]
	0x0322DF44 MOV X2, X31
	0x0322DF48 LDR X30, [X31], #0x30
	0x0322DF4C B 0x331F738
	0x0322DF50 STR X30, [X31 - 0x30]!
	0x0322DF54 STP X22, X21, [X31 + 0x10]
	0x0322DF58 STP X20, X19, [X31 + 0x20]
	0x0322DF5C ADRP X21, 0x11AF000
	0x0322DF60 ADRP X22, 0xECF000
	0x0322DF64 LDRB W8, [X21 + 0x39D]
	0x0322DF68 LDR X22, [X22 + 0x9E8]
	0x0322DF6C MOV X19, X1
	0x0322DF70 MOV X20, X0
	0x0322DF74 TBNZ X8, 0x0, 0x322DF8C
	0x0322DF78 ADRP X0, 0xECF000
	0x0322DF7C LDR X0, [X0 + 0x9E8]
	0x0322DF80 BL 0x1C16CF4
	0x0322DF84 MOVZ W8, 0x1
	0x0322DF88 STRB W8, [X21 + 0x39D]
	0x0322DF8C LDR X0, [X22]
	0x0322DF90 LDR W8, [X0 + 0xE0]
	0x0322DF94 CBNZ W8, 0x322DF9C
	0x0322DF98 BL 0x1C16DFC
	0x0322DF9C MOV X0, X20
	0x0322DFA0 MOV X1, X19
	0x0322DFA4 LDP X20, X19, [X31 + 0x20]
	0x0322DFA8 LDP X22, X21, [X31 + 0x10]
	0x0322DFAC MOV X2, X31
	0x0322DFB0 LDR X30, [X31], #0x30
	0x0322DFB4 B 0x331FC30
	0x0322DFB8 STR X30, [X31 - 0x30]!
	0x0322DFBC STP X22, X21, [X31 + 0x10]
	0x0322DFC0 STP X20, X19, [X31 + 0x20]
	0x0322DFC4 ADRP X21, 0x11AF000
	0x0322DFC8 ADRP X22, 0xECF000
	0x0322DFCC LDRB W8, [X21 + 0x39E]
	0x0322DFD0 LDR X22, [X22 + 0x9E8]
	0x0322DFD4 MOV X19, X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11B0000
	007 Move W8, [X22+908]
	008 Move W19, W2
	009 Move W20, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xEC9000
	016 Move X0, [X0+632]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+908], W8
	020 Compare X21, 0
	021 JumpIfEqual {63}
	022 Move TEMP, X20
	023 And TEMP, TEMP, -2147483648
	024 Compare TEMP, -2147483648
	025 JumpIfEqual {75}
	026 Move TEMP, X19
	027 And TEMP, TEMP, -2147483648
	028 Compare TEMP, -2147483648
	029 JumpIfEqual {86}
	030 Move W8, [X21+24]
	031 Subtract W8, W8, W19
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Compare W19, 0
	034 JumpIfEqual {51}
	035 Move W0, W19
	036 Call 0x1C8925C
	037 Compare X0, 0
	038 JumpIfEqual {120}
	039 Move W8, [X21+24]
	040 Add X9, X21, 32
	041 Move X22, X0
	042 Add X0, X0, 20
	043 NotImplemented "Instruction CMP not yet implemented."
	044 NotImplemented "Instruction CSEL not yet implemented."
	045 Add X1, X8, W20
	046 Move W2, W19
	047 ShiftRight W2, 31
	048 And W2, W2, 0x3FFFFFFF
	049 Move X3, X31
	050 Call Buffer.Memmove, X0, X1, X2
	051 Move X8, 0xEC9000
	052 Move X8, [X8+632]
	053 Move X8, [X8]
	054 Move X8, [X8+184]
	055 Move X22, [X8]
	056 Move X0, X22
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X22, [X31+16]
	060 Move X21, [X31+24]
	061 Move X30, [X31+48]
	062 Return X0
	063 Move X0, 0xECC000
	064 Move X0, [X0+1320]
	065 Call 0x1C17D08
	066 Call 0x1C17F10
	067 Move X19, X0
	068 Move X0, 0xED1000
	069 Move X0, [X0+3784]
	070 Call 0x1C17D08
	071 Move X1, X0
	072 Move X0, X19
	073 Move X2, X31
	074 Call ArgumentNullException..ctor, X0, X1
	075 Move X0, 0xECF000
	076 Move X0, [X0+1888]
	077 Call 0x1C17D08
	078 Call 0x1C17F10
	079 Move X19, X0
	080 Move X0, 0xEEF000
	081 Move X0, [X0+1624]
	082 Call 0x1C17D08
	083 Move X20, X0
	084 Move X0, 0xEF6000
	085 Move X0, [X0+216]
	086 Move X0, 0xECF000
	087 Move X0, [X0+1888]
	088 Call 0x1C17D08
	089 Call 0x1C17F10
	090 Move X19, X0
	091 Move X0, 0xECF000
	092 Move X0, [X0+1896]
	093 Call 0x1C17D08
	094 Move X20, X0
	095 Move X0, 0xEF6000
	096 Move X0, [X0]
	097 Move X0, 0xECF000
	098 Move X0, [X0+1888]
	099 Call 0x1C17D08
	100 Call 0x1C17F10
	101 Move X19, X0
	102 Move X0, 0xEEF000
	103 Move X0, [X0+1624]
	104 Call 0x1C17D08
	105 Move X20, X0
	106 Move X0, 0xEEF000
	107 Move X0, [X0+1632]
	108 Call 0x1C17D08
	109 Move X2, X0
	110 Move X0, X19
	111 Move X1, X20
	112 Move X3, X31
	113 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	114 Move X0, 0xEF6000
	115 Move X0, [X0+568]
	116 Call 0x1C17D08
	117 Move X1, X0
	118 Move X0, X19
	119 Call 0x1C17DEC
	120 Call 0x1C17F20

Method: System.Void .ctor(System.Char* value, System.Int32 startIndex, System.Int32 length)

Disassembly:
	0x0322DFD8 MOV X20, X0

ISIL:
	001 Call 0x1C89264
	002 Return 

Method: System.String Ctor(System.Char* ptr, System.Int32 startIndex, System.Int32 length)

Disassembly:
	0x0322DFDC TBNZ X8, 0x0, 0x322DFF4
	0x0322DFE0 ADRP X0, 0xECF000
	0x0322DFE4 LDR X0, [X0 + 0x9E8]
	0x0322DFE8 BL 0x1C16CF4
	0x0322DFEC MOVZ W8, 0x1
	0x0322DFF0 STRB W8, [X21 + 0x39E]
	0x0322DFF4 LDR X0, [X22]
	0x0322DFF8 LDR W8, [X0 + 0xE0]
	0x0322DFFC CBNZ W8, 0x322E004
	0x0322E000 BL 0x1C16DFC
	0x0322E004 MOV X0, X20
	0x0322E008 MOV X1, X19
	0x0322E00C LDP X20, X19, [X31 + 0x20]
	0x0322E010 LDP X22, X21, [X31 + 0x10]
	0x0322E014 MOV X2, X31
	0x0322E018 LDR X30, [X31], #0x30
	0x0322E01C B 0x3320178
	0x0322E020 STR X30, [X31 - 0x30]!
	0x0322E024 STP X22, X21, [X31 + 0x10]
	0x0322E028 STP X20, X19, [X31 + 0x20]
	0x0322E02C ADRP X21, 0x11AE000
	0x0322E030 ADRP X22, 0xECE000
	0x0322E034 LDRB W8, [X21 + 0x39F]
	0x0322E038 LDR X22, [X22 + 0x9E8]
	0x0322E03C MOV X19, X1
	0x0322E040 MOV X20, X0
	0x0322E044 TBNZ X8, 0x0, 0x322E05C
	0x0322E048 ADRP X0, 0xECE000
	0x0322E04C LDR X0, [X0 + 0x9E8]
	0x0322E050 BL 0x1C16CF4
	0x0322E054 MOVZ W8, 0x1
	0x0322E058 STRB W8, [X21 + 0x39F]
	0x0322E05C LDR X0, [X22]
	0x0322E060 LDR W8, [X0 + 0xE0]
	0x0322E064 CBNZ W8, 0x322E06C
	0x0322E068 BL 0x1C16DFC
	0x0322E06C MOV X0, X20
	0x0322E070 MOV X1, X19
	0x0322E074 LDP X20, X19, [X31 + 0x20]
	0x0322E078 LDP X22, X21, [X31 + 0x10]
	0x0322E07C MOV X2, X31
	0x0322E080 LDR X30, [X31], #0x30
	0x0322E084 B 0x33205E4
	0x0322E088 STR X30, [X31 - 0x30]!
	0x0322E08C STP X22, X21, [X31 + 0x10]
	0x0322E090 STP X20, X19, [X31 + 0x20]
	0x0322E094 ADRP X21, 0x11AE000
	0x0322E098 ADRP X22, 0xECE000
	0x0322E09C LDRB W8, [X21 + 0x3A0]
	0x0322E0A0 LDR X22, [X22 + 0x9E8]
	0x0322E0A4 MOV X19, X1
	0x0322E0A8 MOV X20, X0
	0x0322E0AC TBNZ X8, 0x0, 0x322E0C4
	0x0322E0B0 ADRP X0, 0xECE000
	0x0322E0B4 LDR X0, [X0 + 0x9E8]
	0x0322E0B8 BL 0x1C16CF4
	0x0322E0BC MOVZ W8, 0x1
	0x0322E0C0 STRB W8, [X21 + 0x3A0]
	0x0322E0C4 LDR X0, [X22]
	0x0322E0C8 LDR W8, [X0 + 0xE0]
	0x0322E0CC CBNZ W8, 0x322E0D4
	0x0322E0D0 BL 0x1C16DFC
	0x0322E0D4 MOV X0, X20
	0x0322E0D8 MOV X1, X19
	0x0322E0DC LDP X20, X19, [X31 + 0x20]
	0x0322E0E0 LDP X22, X21, [X31 + 0x10]
	0x0322E0E4 MOV X2, X31
	0x0322E0E8 LDR X30, [X31], #0x30
	0x0322E0EC B 0x3320B20
	0x0322E0F0 STR X30, [X31 - 0x30]!
	0x0322E0F4 STP X22, X21, [X31 + 0x10]
	0x0322E0F8 STP X20, X19, [X31 + 0x20]
	0x0322E0FC ADRP X21, 0x11AE000
	0x0322E100 ADRP X22, 0xECE000
	0x0322E104 LDRB W8, [X21 + 0x3A1]
	0x0322E108 LDR X22, [X22 + 0x9E8]
	0x0322E10C MOV X19, X1
	0x0322E110 MOV X20, X0
	0x0322E114 TBNZ X8, 0x0, 0x322E12C
	0x0322E118 ADRP X0, 0xECE000
	0x0322E11C LDR X0, [X0 + 0x9E8]
	0x0322E120 BL 0x1C16CF4
	0x0322E124 MOVZ W8, 0x1
	0x0322E128 STRB W8, [X21 + 0x3A1]
	0x0322E12C LDR X0, [X22]
	0x0322E130 LDR W8, [X0 + 0xE0]
	0x0322E134 CBNZ W8, 0x322E13C
	0x0322E138 BL 0x1C16DFC
	0x0322E13C MOV X0, X20
	0x0322E140 MOV X1, X19
	0x0322E144 LDP X20, X19, [X31 + 0x20]
	0x0322E148 LDP X22, X21, [X31 + 0x10]
	0x0322E14C MOV X2, X31
	0x0322E150 LDR X30, [X31], #0x30
	0x0322E154 B 0x3321004
	0x0322E158 STR X30, [X31 - 0x30]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11B0000
	007 Move W8, [X22+909]
	008 Move W19, W2
	009 Move W20, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xEC8000
	016 Move X0, [X0+632]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+909], W8
	020 Move TEMP, X19
	021 And TEMP, TEMP, -2147483648
	022 Compare TEMP, -2147483648
	023 JumpIfEqual {57}
	024 Move TEMP, X20
	025 And TEMP, TEMP, -2147483648
	026 Compare TEMP, -2147483648
	027 JumpIfEqual {68}
	028 Add X20, X21, W20
	029 Compare W19, 0
	030 JumpIfEqual {45}
	031 Compare X21, 0
	032 JumpIfEqual {86}
	033 Move W0, W19
	034 Call 0x1C8925C
	035 Compare X0, 0
	036 JumpIfEqual {109}
	037 Move X21, X0
	038 Add X0, X0, 20
	039 Move W2, W19
	040 ShiftRight W2, 31
	041 And W2, W2, 0x3FFFFFFF
	042 Move X1, X20
	043 Move X3, X31
	044 Call Buffer.Memmove, X0, X1, X2
	045 Move X8, 0xEC8000
	046 Move X8, [X8+632]
	047 Move X8, [X8]
	048 Move X8, [X8+184]
	049 Move X21, [X8]
	050 Move X0, X21
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move X30, [X31+48]
	056 Return X0
	057 Move X0, 0xECE000
	058 Move X0, [X0+1888]
	059 Call 0x1C17D08
	060 Call 0x1C17F10
	061 Move X19, X0
	062 Move X0, 0xECE000
	063 Move X0, [X0+1896]
	064 Call 0x1C17D08
	065 Move X20, X0
	066 Move X0, 0xEF5000
	067 Move X0, [X0]
	068 Move X0, 0xECE000
	069 Move X0, [X0+1888]
	070 Call 0x1C17D08
	071 Call 0x1C17F10
	072 Move X19, X0
	073 Move X0, 0xEEE000
	074 Move X0, [X0+1624]
	075 Call 0x1C17D08
	076 Move X20, X0
	077 Move X0, 0xEF5000
	078 Move X0, [X0+216]
	079 Move X0, 0xECE000
	080 Move X0, [X0+1888]
	081 Call 0x1C17D08
	082 Call 0x1C17F10
	083 Move X19, X0
	084 Move X0, 0xEEE000
	085 Move X0, [X0+1624]
	086 Move X0, 0xECE000
	087 Move X0, [X0+1888]
	088 Call 0x1C17D08
	089 Call 0x1C17F10
	090 Move X19, X0
	091 Move X0, 0xEF5000
	092 Move X0, [X0+576]
	093 Call 0x1C17D08
	094 Move X20, X0
	095 Move X0, 0xEF5000
	096 Move X0, [X0+584]
	097 Call 0x1C17D08
	098 Move X2, X0
	099 Move X0, X19
	100 Move X1, X20
	101 Move X3, X31
	102 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	103 Move X0, 0xEF5000
	104 Move X0, [X0+592]
	105 Call 0x1C17D08
	106 Move X1, X0
	107 Move X0, X19
	108 Call 0x1C17DEC
	109 Call 0x1C17F20

Method: System.Void .ctor(System.SByte* value, System.Int32 startIndex, System.Int32 length)

Disassembly:
	0x0322E15C STP X22, X21, [X31 + 0x10]

ISIL:
	001 Call 0x1C89264
	002 Return 

Method: System.String Ctor(System.SByte* value, System.Int32 startIndex, System.Int32 length)

Disassembly:
	0x0322E160 STP X20, X19, [X31 + 0x20]
	0x0322E164 ADRP X21, 0x11AE000
	0x0322E168 ADRP X22, 0xECE000
	0x0322E16C LDRB W8, [X21 + 0x3A2]
	0x0322E170 LDR X22, [X22 + 0x9E8]
	0x0322E174 MOV X19, X1
	0x0322E178 MOV X20, X0
	0x0322E17C TBNZ X8, 0x0, 0x322E194
	0x0322E180 ADRP X0, 0xECE000
	0x0322E184 LDR X0, [X0 + 0x9E8]
	0x0322E188 BL 0x1C16CF4
	0x0322E18C MOVZ W8, 0x1
	0x0322E190 STRB W8, [X21 + 0x3A2]
	0x0322E194 LDR X0, [X22]
	0x0322E198 LDR W8, [X0 + 0xE0]
	0x0322E19C CBNZ W8, 0x322E1A4
	0x0322E1A0 BL 0x1C16DFC
	0x0322E1A4 MOV X0, X20
	0x0322E1A8 MOV X1, X19
	0x0322E1AC LDP X20, X19, [X31 + 0x20]
	0x0322E1B0 LDP X22, X21, [X31 + 0x10]
	0x0322E1B4 MOV X2, X31
	0x0322E1B8 LDR X30, [X31], #0x30
	0x0322E1BC B 0x3321540
	0x0322E1C0 STR X30, [X31 - 0x30]!
	0x0322E1C4 STP X22, X21, [X31 + 0x10]
	0x0322E1C8 STP X20, X19, [X31 + 0x20]
	0x0322E1CC ADRP X21, 0x11AE000
	0x0322E1D0 ADRP X22, 0xECE000
	0x0322E1D4 LDRB W8, [X21 + 0x3A3]
	0x0322E1D8 LDR X22, [X22 + 0x9E8]
	0x0322E1DC MOV X19, X1
	0x0322E1E0 MOV X20, X0
	0x0322E1E4 TBNZ X8, 0x0, 0x322E1FC
	0x0322E1E8 ADRP X0, 0xECE000
	0x0322E1EC LDR X0, [X0 + 0x9E8]
	0x0322E1F0 BL 0x1C16CF4
	0x0322E1F4 MOVZ W8, 0x1
	0x0322E1F8 STRB W8, [X21 + 0x3A3]
	0x0322E1FC LDR X0, [X22]
	0x0322E200 LDR W8, [X0 + 0xE0]
	0x0322E204 CBNZ W8, 0x322E20C
	0x0322E208 BL 0x1C16DFC
	0x0322E20C MOV X0, X20
	0x0322E210 MOV X1, X19
	0x0322E214 LDP X20, X19, [X31 + 0x20]
	0x0322E218 LDP X22, X21, [X31 + 0x10]
	0x0322E21C MOV X2, X31
	0x0322E220 LDR X30, [X31], #0x30
	0x0322E224 B 0x3321880
	0x0322E228 STR X30, [X31 - 0x30]!
	0x0322E22C STP X22, X21, [X31 + 0x10]
	0x0322E230 STP X20, X19, [X31 + 0x20]
	0x0322E234 ADRP X21, 0x11AE000
	0x0322E238 ADRP X22, 0xECE000
	0x0322E23C LDRB W8, [X21 + 0x3A4]
	0x0322E240 LDR X22, [X22 + 0x9E8]
	0x0322E244 MOV X19, X1
	0x0322E248 MOV X20, X0
	0x0322E24C TBNZ X8, 0x0, 0x322E264
	0x0322E250 ADRP X0, 0xECE000
	0x0322E254 LDR X0, [X0 + 0x9E8]
	0x0322E258 BL 0x1C16CF4
	0x0322E25C MOVZ W8, 0x1
	0x0322E260 STRB W8, [X21 + 0x3A4]
	0x0322E264 LDR X0, [X22]
	0x0322E268 LDR W8, [X0 + 0xE0]
	0x0322E26C CBNZ W8, 0x322E274
	0x0322E270 BL 0x1C16DFC
	0x0322E274 MOV X0, X20
	0x0322E278 MOV X1, X19
	0x0322E27C LDP X20, X19, [X31 + 0x20]
	0x0322E280 LDP X22, X21, [X31 + 0x10]
	0x0322E284 MOV X2, X31
	0x0322E288 LDR X30, [X31], #0x30
	0x0322E28C B 0x3321B48
	0x0322E290 STR X30, [X31 - 0x30]!
	0x0322E294 STP X22, X21, [X31 + 0x10]
	0x0322E298 STP X20, X19, [X31 + 0x20]
	0x0322E29C ADRP X21, 0x11AE000
	0x0322E2A0 ADRP X22, 0xECE000
	0x0322E2A4 LDRB W8, [X21 + 0x3A5]
	0x0322E2A8 LDR X22, [X22 + 0x9E8]
	0x0322E2AC MOV X19, X1
	0x0322E2B0 MOV X20, X0
	0x0322E2B4 TBNZ X8, 0x0, 0x322E2CC
	0x0322E2B8 ADRP X0, 0xECE000
	0x0322E2BC LDR X0, [X0 + 0x9E8]
	0x0322E2C0 BL 0x1C16CF4
	0x0322E2C4 MOVZ W8, 0x1
	0x0322E2C8 STRB W8, [X21 + 0x3A5]
	0x0322E2CC LDR X0, [X22]
	0x0322E2D0 LDR W8, [X0 + 0xE0]
	0x0322E2D4 CBNZ W8, 0x322E2DC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11AF000
	007 Move W8, [X22+910]
	008 Move W19, W2
	009 Move W20, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xEC8000
	016 Move X0, [X0+632]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+910], W8
	020 Move TEMP, X20
	021 And TEMP, TEMP, -2147483648
	022 Compare TEMP, -2147483648
	023 JumpIfEqual {50}
	024 Move TEMP, X19
	025 And TEMP, TEMP, -2147483648
	026 Compare TEMP, -2147483648
	027 JumpIfEqual {61}
	028 Compare X21, 0
	029 JumpIfEqual {37}
	030 Add X0, X21, W20
	031 Move W1, W19
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move X30, [X31+48]
	037 Compare W19, 0
	038 JumpIfNotEqual {95}
	039 Move X8, 0xEC8000
	040 Move X8, [X8+632]
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X8, [X8]
	046 Move X8, [X8+184]
	047 Move X0, [X8]
	048 Move X30, [X31+48]
	049 Return X0
	050 Move X0, 0xECE000
	051 Move X0, [X0+1888]
	052 Call 0x1C17D08
	053 Call 0x1C17F10
	054 Move X19, X0
	055 Move X0, 0xEEE000
	056 Move X0, [X0+1624]
	057 Call 0x1C17D08
	058 Move X20, X0
	059 Move X0, 0xEF5000
	060 Move X0, [X0+216]
	061 Move X0, 0xECE000
	062 Move X0, [X0+1888]
	063 Call 0x1C17D08
	064 Call 0x1C17F10
	065 Move X19, X0
	066 Move X0, 0xECE000
	067 Move X0, [X0+1896]
	068 Call 0x1C17D08
	069 Move X20, X0
	070 Move X0, 0xEF5000
	071 Move X0, [X0]
	072 Move X0, 0xECE000
	073 Move X0, [X0+1888]
	074 Call 0x1C17D08
	075 Call 0x1C17F10
	076 Move X19, X0
	077 Move X0, 0xED0000
	078 Move X0, [X0+3784]
	079 Call 0x1C17D08
	080 Move X20, X0
	081 Move X0, 0xEF5000
	082 Move X0, [X0+584]
	083 Call 0x1C17D08
	084 Move X2, X0
	085 Move X0, X19
	086 Move X1, X20
	087 Move X3, X31
	088 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	089 Move X0, 0xEF5000
	090 Move X0, [X0+600]
	091 Call 0x1C17D08
	092 Move X1, X0
	093 Move X0, X19
	094 Call 0x1C17DEC
	095 Move X0, 0xECB000
	096 Move X0, [X0+1320]
	097 Call 0x1C17D08
	098 Call 0x1C17F10
	099 Move X19, X0
	100 Move X0, 0xED0000
	101 Move X0, [X0+3784]
	102 Call 0x1C17D08
	103 Move X1, X0
	104 Move X0, X19
	105 Move X2, X31
	106 Call ArgumentNullException..ctor, X0, X1

Method: System.String CreateStringForSByteConstructor(System.Byte* pb, System.Int32 numBytes)

Disassembly:
	0x0322E2D8 BL 0x1C16DFC
	0x0322E2DC MOV X0, X20
	0x0322E2E0 MOV X1, X19
	0x0322E2E4 LDP X20, X19, [X31 + 0x20]
	0x0322E2E8 LDP X22, X21, [X31 + 0x10]
	0x0322E2EC MOV X2, X31
	0x0322E2F0 LDR X30, [X31], #0x30
	0x0322E2F4 B 0x3321FB4
	0x0322E2F8 STR X30, [X31 - 0x30]!
	0x0322E2FC STP X22, X21, [X31 + 0x10]
	0x0322E300 STP X20, X19, [X31 + 0x20]
	0x0322E304 ADRP X21, 0x11AE000
	0x0322E308 ADRP X22, 0xECE000
	0x0322E30C LDRB W8, [X21 + 0x3A6]
	0x0322E310 LDR X22, [X22 + 0x9E8]
	0x0322E314 MOV X19, X1
	0x0322E318 MOV X20, X0
	0x0322E31C TBNZ X8, 0x0, 0x322E334
	0x0322E320 ADRP X0, 0xECE000
	0x0322E324 LDR X0, [X0 + 0x9E8]
	0x0322E328 BL 0x1C16CF4
	0x0322E32C MOVZ W8, 0x1
	0x0322E330 STRB W8, [X21 + 0x3A6]
	0x0322E334 LDR X0, [X22]
	0x0322E338 LDR W8, [X0 + 0xE0]
	0x0322E33C CBNZ W8, 0x322E344
	0x0322E340 BL 0x1C16DFC
	0x0322E344 MOV X0, X20
	0x0322E348 MOV X1, X19
	0x0322E34C LDP X20, X19, [X31 + 0x20]
	0x0322E350 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11AF000
	006 Move W8, [X21+911]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xEC8000
	014 Move X0, [X0+632]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+911], W8
	018 Compare W19, 0
	019 JumpIfEqual {33}
	020 Move X0, X31
	021 Call Encoding.get_UTF8
	022 Compare X0, 0
	023 JumpIfEqual {43}
	024 Move X1, X20
	025 Move W2, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X3, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Encoding.GetString, X0, X1, X2
	032 Return X0
	033 Move X8, 0xEC8000
	034 Move X8, [X8+632]
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X8, [X8]
	038 Move X8, [X8+184]
	039 Move X0, [X8]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return X0
	043 Call 0x1C17F20

Method: System.Void .ctor(System.SByte* value, System.Int32 startIndex, System.Int32 length, System.Text.Encoding enc)

Disassembly:
	0x0322E354 MOV X2, X31

ISIL:
	001 Call 0x1C89264
	002 Return 

Method: System.String Ctor(System.SByte* value, System.Int32 startIndex, System.Int32 length, System.Text.Encoding enc)

Disassembly:
	0x0322E358 LDR X30, [X31], #0x30
	0x0322E35C B 0x332203C
	0x0322E360 STP X30, X23, [X31 - 0x30]!
	0x0322E364 STP X22, X21, [X31 + 0x10]
	0x0322E368 STP X20, X19, [X31 + 0x20]
	0x0322E36C ADRP X22, 0x11AE000
	0x0322E370 ADRP X23, 0xECE000
	0x0322E374 LDRB W8, [X22 + 0x3A7]
	0x0322E378 LDR X23, [X23 + 0x9E8]
	0x0322E37C MOV X19, X2
	0x0322E380 MOV X20, X1
	0x0322E384 MOV X21, X0
	0x0322E388 TBNZ X8, 0x0, 0x322E3A0
	0x0322E38C ADRP X0, 0xECE000
	0x0322E390 LDR X0, [X0 + 0x9E8]
	0x0322E394 BL 0x1C16CF4
	0x0322E398 MOVZ W8, 0x1
	0x0322E39C STRB W8, [X22 + 0x3A7]
	0x0322E3A0 LDR X0, [X23]
	0x0322E3A4 LDR W8, [X0 + 0xE0]
	0x0322E3A8 CBNZ W8, 0x322E3B0
	0x0322E3AC BL 0x1C16DFC
	0x0322E3B0 MOV X0, X21
	0x0322E3B4 MOV X1, X20
	0x0322E3B8 MOV X2, X19
	0x0322E3BC LDP X20, X19, [X31 + 0x20]
	0x0322E3C0 LDP X22, X21, [X31 + 0x10]
	0x0322E3C4 MOV X3, X31
	0x0322E3C8 LDP X30, X23, [X31], #0x30
	0x0322E3CC B 0x3318718
	0x0322E3D0 STR X30, [X31 - 0x30]!
	0x0322E3D4 STP X22, X21, [X31 + 0x10]
	0x0322E3D8 STP X20, X19, [X31 + 0x20]
	0x0322E3DC ADRP X21, 0x11AE000
	0x0322E3E0 ADRP X22, 0xEF4000
	0x0322E3E4 LDRB W8, [X21 + 0x3A8]
	0x0322E3E8 LDR X22, [X22 + 0x2B8]
	0x0322E3EC MOV W19, W1
	0x0322E3F0 MOV X20, X0
	0x0322E3F4 TBNZ X8, 0x0, 0x322E40C
	0x0322E3F8 ADRP X0, 0xEF4000
	0x0322E3FC LDR X0, [X0 + 0x2B8]
	0x0322E400 BL 0x1C16CF4
	0x0322E404 MOVZ W8, 0x1
	0x0322E408 STRB W8, [X21 + 0x3A8]
	0x0322E40C LDR X0, [X22]
	0x0322E410 LDR W8, [X0 + 0xE0]
	0x0322E414 CBNZ W8, 0x322E41C
	0x0322E418 BL 0x1C16DFC
	0x0322E41C MOV X0, X20
	0x0322E420 MOV W1, W19
	0x0322E424 LDP X20, X19, [X31 + 0x20]
	0x0322E428 LDP X22, X21, [X31 + 0x10]
	0x0322E42C MOV X2, X31
	0x0322E430 LDR X30, [X31], #0x30
	0x0322E434 B 0x32479F0
	0x0322E438 LDR W0, [X0 + 0x10]
	0x0322E43C RET
	0x0322E440 STP X30, X23, [X31 - 0x30]!
	0x0322E444 STP X22, X21, [X31 + 0x10]
	0x0322E448 STP X20, X19, [X31 + 0x20]
	0x0322E44C CBZ X1, 0x322E53C
	0x0322E450 LDRSW X22, [X1 + 0x10]
	0x0322E454 MOV W21, W3
	0x0322E458 MOV X20, X1
	0x0322E45C CMP W22, W3
	0x0322E460 B.GT 0x322E494
	0x0322E464 MOV W19, W2
	0x0322E468 CBZ W22, 0x322E498
	0x0322E46C ADD X23, X0, 0x14
	0x0322E470 MOV X0, X31
	0x0322E474 BL 0x32C1424
	0x0322E478 SXTW X9, W21
	0x0322E47C ADD X8, X23, W19, 0x1, SXTW
	0x0322E480 SUB X9, X9, X22
	0x0322E484 ADD X9, X8, X9, 0x1, LSL
	0x0322E488 ADD X9, X9, 0x2
	0x0322E48C CMP X8, X9
	0x0322E490 B.NE 0x322E4AC
	0x0322E494 MOVN W19, 0x0
	0x0322E498 MOV W0, W19
	0x0322E49C LDP X20, X19, [X31 + 0x20]
	0x0322E4A0 LDP X22, X21, [X31 + 0x10]
	0x0322E4A4 LDP X30, X23, [X31], #0x30
	0x0322E4A8 RET
	0x0322E4AC SXTW X10, W0
	0x0322E4B0 ADD X10, X20, X10
	0x0322E4B4 LDRH W11, [X10], #0x2
	0x0322E4B8 SBFM X12, X19, 0x3F, 0x1F
	0x0322E4BC AND X13, X22, 0x0
	0x0322E4C0 ADD X12, X23, X12
	0x0322E4C4 ADD X12, X12, 0x2
	0x0322E4C8 SUB X13, X13, 0x1
	0x0322E4CC LDRH W14, [X8]
	0x0322E4D0 CMP W14, W11
	0x0322E4D4 B.NE 0x322E510
	0x0322E4D8 CMP W22, 0x2
	0x0322E4DC B.LT 0x322E528
	0x0322E4E0 MOV X14, X13
	0x0322E4E4 MOV X15, X10
	0x0322E4E8 MOV X16, X12
	0x0322E4EC LDRH W17, [X16]
	0x0322E4F0 LDRH W0, [X15]
	0x0322E4F4 CMP W17, W0
	0x0322E4F8 B.NE 0x322E510
	0x0322E4FC ADD X16, X16, 0x2
	0x0322E500 SUBS X14, X14, 0x1
	0x0322E504 ADD X15, X15, 0x2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x11AF000
	008 Move W8, [X23+912]
	009 Move X20, X3
	010 Move W19, W2
	011 Move W21, W1
	012 Move X22, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xEF4000
	018 Move X0, [X0+2120]
	019 Call 0x1C17CF4
	020 Move X0, 0xEC8000
	021 Move X0, [X0+632]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+912], W8
	025 Compare X20, 0
	026 JumpIfEqual {49}
	027 Move TEMP, X19
	028 And TEMP, TEMP, -2147483648
	029 Compare TEMP, -2147483648
	030 JumpIfEqual {74}
	031 Move TEMP, X21
	032 And TEMP, TEMP, -2147483648
	033 Compare TEMP, -2147483648
	034 JumpIfEqual {85}
	035 Compare X22, 0
	036 JumpIfEqual {60}
	037 Add X1, X22, W21
	038 Move W2, W19
	039 Move X0, X20
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X3, X31
	045 Move X30, [X31+48]
	046 Move X23, [X31+56]
	047 Call Encoding.GetString, X0, X1
	048 Return X0
	049 Move X0, X22
	050 Move W1, W21
	051 Move W2, W19
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X22, [X31+16]
	055 Move X21, [X31+24]
	056 Move X30, [X31+48]
	057 Move X23, [X31+56]
	058 Call String.Ctor, X0, X1, X2
	059 Return X0
	060 Compare W19, 0
	061 JumpIfNotEqual {119}
	062 Move X8, 0xEC8000
	063 Move X8, [X8+632]
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X22, [X31+16]
	067 Move X21, [X31+24]
	068 Move X8, [X8]
	069 Move X8, [X8+184]
	070 Move X0, [X8]
	071 Move X30, [X31+48]
	072 Move X23, [X31+56]
	073 Return X0
	074 Move X0, 0xECE000
	075 Move X0, [X0+1888]
	076 Call 0x1C17D08
	077 Call 0x1C17F10
	078 Move X19, X0
	079 Move X0, 0xECE000
	080 Move X0, [X0+1896]
	081 Call 0x1C17D08
	082 Move X20, X0
	083 Move X0, 0xEEE000
	084 Move X0, [X0+1648]
	085 Move X0, 0xECE000
	086 Move X0, [X0+1888]
	087 Call 0x1C17D08
	088 Call 0x1C17F10
	089 Move X19, X0
	090 Move X0, 0xEEE000
	091 Move X0, [X0+1624]
	092 Call 0x1C17D08
	093 Move X20, X0
	094 Move X0, 0xEF5000
	095 Move X0, [X0+216]
	096 Move X0, 0xECE000
	097 Move X0, [X0+1888]
	098 Call 0x1C17D08
	099 Call 0x1C17F10
	100 Move X19, X0
	101 Move X0, 0xEEE000
	102 Move X0, [X0+1624]
	103 Call 0x1C17D08
	104 Move X20, X0
	105 Move X0, 0xEF5000
	106 Move X0, [X0+584]
	107 Call 0x1C17D08
	108 Move X2, X0
	109 Move X0, X19
	110 Move X1, X20
	111 Move X3, X31
	112 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	113 Move X0, 0xEF5000
	114 Move X0, [X0+608]
	115 Call 0x1C17D08
	116 Move X1, X0
	117 Move X0, X19
	118 Call 0x1C17DEC
	119 Move X0, 0xECB000
	120 Move X0, [X0+1320]
	121 Call 0x1C17D08
	122 Call 0x1C17F10
	123 Move X19, X0
	124 Move X0, 0xED0000
	125 Move X0, [X0+3784]
	126 Call 0x1C17D08
	127 Move X1, X0
	128 Move X0, X19
	129 Move X2, X31
	130 Call ArgumentNullException..ctor, X0, X1

Method: System.Void .ctor(System.Char c, System.Int32 count)

Disassembly:
	0x0322E518 CMP X8, X9

ISIL:
	001 Call 0x1C89264
	002 Return 

Method: System.String Ctor(System.Char c, System.Int32 count)

Disassembly:
	0x0322E51C MOVN W19, 0x0
	0x0322E520 B.NE 0x322E4CC
	0x0322E524 B 0x322E498
	0x0322E528 SUB X8, X8, X23
	0x0322E52C CMP X8, 0x0
	0x0322E530 CINC X8, X8, LT
	0x0322E534 UBFM X19, X8, 0x1, 0x3F
	0x0322E538 B 0x322E498
	0x0322E53C BL 0x1C16F20
	0x0322E540 SUB X31, X31, 0x70
	0x0322E544 STP X29, X30, [X31 + 0x10]
	0x0322E548 STP X28, X27, [X31 + 0x20]
	0x0322E54C STP X26, X25, [X31 + 0x30]
	0x0322E550 STP X24, X23, [X31 + 0x40]
	0x0322E554 STP X22, X21, [X31 + 0x50]
	0x0322E558 STP X20, X19, [X31 + 0x60]
	0x0322E55C ADRP X19, 0x11AE000
	0x0322E560 LDRB W8, [X19 + 0x3A9]
	0x0322E564 MOV W22, W3
	0x0322E568 MOV W20, W2
	0x0322E56C MOV X21, X1
	0x0322E570 MOV X23, X0
	0x0322E574 TBNZ X8, 0x0, 0x322E58C
	0x0322E578 ADRP X0, 0xEC7000
	0x0322E57C LDR X0, [X0 + 0xC48]
	0x0322E580 BL 0x1C16CF4
	0x0322E584 MOVZ W8, 0x1
	0x0322E588 STRB W8, [X19 + 0x3A9]
	0x0322E58C CBZ X21, 0x322E708
	0x0322E590 LDRSW X24, [X21 + 0x10]
	0x0322E594 CMP W24, W22
	0x0322E598 B.GT 0x322E618
	0x0322E59C CBZ W24, 0x322E61C
	0x0322E5A0 ADRP X8, 0xEC7000
	0x0322E5A4 LDR X8, [X8 + 0xC48]
	0x0322E5A8 LDR X0, [X8]
	0x0322E5AC LDR W8, [X0 + 0xE0]
	0x0322E5B0 CBNZ W8, 0x322E5B8
	0x0322E5B4 BL 0x1C16DFC
	0x0322E5B8 MOV X0, X31
	0x0322E5BC BL 0x3338524
	0x0322E5C0 CBZ X0, 0x322E708
	0x0322E5C4 LDR X8, [X0]
	0x0322E5C8 LDP X9, X1, [X8 + 0x1D8]
	0x0322E5CC BLR X9
	0x0322E5D0 MOV X19, X0
	0x0322E5D4 MOV X0, X31
	0x0322E5D8 BL 0x32C1424
	0x0322E5DC CBZ X19, 0x322E708
	0x0322E5E0 LDR X8, [X19]
	0x0322E5E4 SXTW X27, W0
	0x0322E5E8 LDRH W1, [X21, X27, LSL]
	0x0322E5EC ADD X23, X23, 0x14
	0x0322E5F0 LDP X10, X2, [X8 + 0x1C8]
	0x0322E5F4 SXTW X9, W22
	0x0322E5F8 ADD X25, X23, W20, 0x1, SXTW
	0x0322E5FC SUB X8, X9, X24
	0x0322E600 ADD X8, X25, X8, 0x1, LSL
	0x0322E604 MOV X0, X19
	0x0322E608 ADD X26, X8, 0x2
	0x0322E60C BLR X10
	0x0322E610 CMP X25, X26
	0x0322E614 B.NE 0x322E640
	0x0322E618 MOVN W20, 0x0
	0x0322E61C MOV W0, W20
	0x0322E620 LDP X20, X19, [X31 + 0x60]
	0x0322E624 LDP X22, X21, [X31 + 0x50]
	0x0322E628 LDP X24, X23, [X31 + 0x40]
	0x0322E62C LDP X26, X25, [X31 + 0x30]
	0x0322E630 LDP X28, X27, [X31 + 0x20]
	0x0322E634 LDP X29, X30, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11AF000
	006 Move W8, [X21+913]
	007 Move W20, W1
	008 Move W19, W0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xEC8000
	014 Move X0, [X0+632]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+913], W8
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move W0, W20
	020 Call 0x1C8925C
	021 And W31, W19, 0xFFFF
	022 Compare X0, 0
	023 JumpIfEqual {64}
	024 And W10, W19, 0xFFFF
	025 Move W9, W19
	026 Add X8, X0, 20
	027 NotImplemented "Instruction CMP not yet implemented."
	028 NotImplemented "Instruction BFM not yet implemented."
	029 Move TEMP, X20
	030 And TEMP, TEMP, 2
	031 Compare TEMP, 2
	032 JumpIfEqual {46}
	033 Move TEMP, X20
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {51}
	037 Subtract W20, W20, 4
	038 Move [X8+8], W9
	039 Move [X8+12], W9
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Subtract W20, W20, 4
	042 Move TEMP, X20
	043 And TEMP, TEMP, 2
	044 Compare TEMP, 2
	045 JumpIfNotEqual {33}
	046 Move [X8+4], W9
	047 Move TEMP, X20
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {59}
	051 NotImplemented "Instruction STRH not yet implemented."
	052 Compare W20, 0
	053 JumpIfNotEqual {65}
	054 Move X8, 0xEC8000
	055 Move X8, [X8+632]
	056 Move X8, [X8]
	057 Move X8, [X8+184]
	058 Move X0, [X8]
	059 Move X20, [X31+16]
	060 Move X19, [X31+24]
	061 Move X30, [X31+32]
	062 Move X21, [X31+40]
	063 Return X0
	064 Call 0x1C17F20
	065 Move X0, 0xECE000
	066 Move X0, [X0+1888]
	067 Call 0x1C17D08
	068 Call 0x1C17F10
	069 Move X19, X0
	070 Move X0, 0xEEE000
	071 Move X0, [X0+1608]
	072 Call 0x1C17D08
	073 Move X20, X0
	074 Move X0, 0xEF5000
	075 Move X0, [X0+48]
	076 Call 0x1C17D08
	077 Move X2, X0
	078 Move X0, X19
	079 Move X1, X20
	080 Move X3, X31
	081 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	082 Move X0, 0xEF5000
	083 Move X0, [X0+616]
	084 Call 0x1C17D08
	085 Move X1, X0
	086 Move X0, X19
	087 Call 0x1C17DEC

Method: System.Void .ctor(System.ReadOnlySpan`1<System.Char> value)

Disassembly:
	0x0322E638 ADD X31, X31, 0x70

ISIL:
	001 Call 0x1C89264
	002 Return 

Method: System.String Ctor(System.ReadOnlySpan`1<System.Char> value)

Disassembly:
	0x0322E63C RET
	0x0322E640 SBFM X8, X20, 0x3F, 0x1F
	0x0322E644 AND X9, X24, 0x0
	0x0322E648 ADD X10, X21, X27
	0x0322E64C ADD X8, X23, X8
	0x0322E650 MOV W22, W0
	0x0322E654 ADD X10, X10, 0x2
	0x0322E658 ADD X21, X8, 0x2
	0x0322E65C SUB X8, X9, 0x1
	0x0322E660 STP X8, X10, [X31]
	0x0322E664 LDR X8, [X19]
	0x0322E668 LDRH W1, [X25]
	0x0322E66C MOV X0, X19
	0x0322E670 LDP X9, X2, [X8 + 0x1C8]
	0x0322E674 BLR X9
	0x0322E678 AND W8, W0, 0xFFFF
	0x0322E67C CMP W8, W22, UXTH
	0x0322E680 B.NE 0x322E6DC
	0x0322E684 CMP W24, 0x2
	0x0322E688 B.LT 0x322E6F4
	0x0322E68C LDP X20, X29, [X31]
	0x0322E690 MOV X27, X21
	0x0322E694 LDR X8, [X19]
	0x0322E698 LDRH W1, [X27]
	0x0322E69C MOV X0, X19
	0x0322E6A0 LDP X9, X2, [X8 + 0x1C8]
	0x0322E6A4 BLR X9
	0x0322E6A8 LDR X8, [X19]
	0x0322E6AC LDRH W1, [X29]
	0x0322E6B0 AND W28, W0, 0xFFFF
	0x0322E6B4 MOV X0, X19
	0x0322E6B8 LDP X9, X2, [X8 + 0x1C8]
	0x0322E6BC BLR X9
	0x0322E6C0 CMP W28, W0, UXTH
	0x0322E6C4 B.NE 0x322E6DC
	0x0322E6C8 ADD X27, X27, 0x2
	0x0322E6CC SUBS X20, X20, 0x1
	0x0322E6D0 ADD X29, X29, 0x2
	0x0322E6D4 B.NE 0x322E694
	0x0322E6D8 B 0x322E6F4
	0x0322E6DC ADD X25, X25, 0x2
	0x0322E6E0 ADD X21, X21, 0x2
	0x0322E6E4 CMP X25, X26
	0x0322E6E8 MOVN W20, 0x0
	0x0322E6EC B.NE 0x322E664
	0x0322E6F0 B 0x322E61C
	0x0322E6F4 SUB X8, X25, X23
	0x0322E6F8 CMP X8, 0x0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11AF000
	007 Move W8, [X21+914]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0xEF5000
	015 Move X0, [X0+32]
	016 Call 0x1C17CF4
	017 Move X0, 0xEF5000
	018 Move X0, [X0+40]
	019 Call 0x1C17CF4
	020 Move X0, 0xEC8000
	021 Move X0, [X0+632]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+914], W8
	025 Compare W19, 0
	026 JumpIfEqual {46}
	027 Move W0, W19
	028 Call 0x1C8925C
	029 Compare X0, 0
	030 JumpIfEqual {58}
	031 Move X8, 0xEF5000
	032 Move X8, [X8+32]
	033 Move X21, X0
	034 Add X22, X0, 20
	035 Move X0, X20
	036 Move X2, [X8]
	037 Move X1, X19
	038 Call MemoryMarshal.GetReference, X0
	039 Move X1, X0
	040 Move W2, W19
	041 ShiftRight W2, 31
	042 And W2, W2, 0x3FFFFFFF
	043 Move X0, X22
	044 Move X3, X31
	045 Call Buffer.Memmove, X0, X1, X2
	046 Move X8, 0xEC8000
	047 Move X8, [X8+632]
	048 Move X8, [X8]
	049 Move X8, [X8+184]
	050 Move X21, [X8]
	051 Move X0, X21
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X22, [X31+16]
	055 Move X21, [X31+24]
	056 Move X30, [X31+48]
	057 Return X0
	058 Call 0x1C17F20

Method: System.String Create(System.Int32 length, TState state, System.Buffers.SpanAction`2<System.Char, TState> action)

Disassembly:
	0x0226BF24 B.NE 0x226BF10
	0x0226BF28 MOV X0, X19
	0x0226BF2C MOV W2, W31
	0x0226BF30 BL 0x1C5C788
	0x0226BF34 B 0x226BF44
	0x0226BF38 LDRSW X9, [X10]
	0x0226BF3C ADD X8, X8, X9, 0x4, LSL
	0x0226BF40 ADD X0, X8, 0x138
	0x0226BF44 LDP X8, X1, [X0]
	0x0226BF48 MOV X0, X19
	0x0226BF4C BLR X8
	0x0226BF50 CBNZ X21, 0x226BF5C
	0x0226BF54 MOV X0, X20
	0x0226BF58 BL 0x1D2C690
	0x0226BF5C MOV X0, X21
	0x0226BF60 BL 0x1C16F18
	0x0226BF64 BL 0x1990590
	0x0226BF68 SUB X31, X31, 0x50
	0x0226BF6C STP X30, X25, [X31 + 0x10]
	0x0226BF70 STP X24, X23, [X31 + 0x20]
	0x0226BF74 STP X22, X21, [X31 + 0x30]
	0x0226BF78 STP X20, X19, [X31 + 0x40]
	0x0226BF7C LDR X8, [X3 + 0x38]
	0x0226BF80 MOV X20, X3
	0x0226BF84 MOV X19, X2
	0x0226BF88 MOV W21, W1
	0x0226BF8C MOV X22, X0
	0x0226BF90 CBNZ X8, 0x226BFC8
	0x0226BF94 ADRP X0, 0x1E88000
	0x0226BF98 LDR X0, [X0 + 0xE00]
	0x0226BF9C BL 0x1C16CF4
	0x0226BFA0 ADRP X0, 0x1E88000
	0x0226BFA4 LDR X0, [X0 + 0xE18]
	0x0226BFA8 BL 0x1C16CF4
	0x0226BFAC ADRP X0, 0x1E8A000
	0x0226BFB0 LDR X0, [X0 + 0x278]
	0x0226BFB4 BL 0x1C16CF4
	0x0226BFB8 LDR X8, [X20 + 0x38]
	0x0226BFBC CBNZ X8, 0x226BFC8
	0x0226BFC0 MOV X0, X20
	0x0226BFC4 BL 0x1C5C6E0
	0x0226BFC8 STRB W31, [X31 + 0xC]
	0x0226BFCC CBZ X19, 0x226C36C
	0x0226BFD0 LDR X8, [X20 + 0x38]
	0x0226BFD4 LDR X1, [X8]
	0x0226BFD8 LDRB W8, [X1 + 0x135]
	0x0226BFDC TBNZ X8, 0x0, 0x226BFEC
	0x0226BFE0 MOV X0, X1
	0x0226BFE4 BL 0x1C5C684
	0x0226BFE8 MOV X1, X0
	0x0226BFEC LDR X8, [X19]
	0x0226BFF0 LDRH W9, [X8 + 0x12E]
	0x0226BFF4 CBZ X9, 0x226C018
	0x0226BFF8 LDR X10, [X8 + 0xB0]
	0x0226BFFC ADD X10, X10, 0x8
	0x0226C000 LDUR X11, [X10 - 0x8]
	0x0226C004 CMP X11, X1
	0x0226C008 B.EQ 0x226C028
	0x0226C00C SUBS X9, X9, 0x1
	0x0226C010 ADD X10, X10, 0x10
	0x0226C014 B.NE 0x226C000
	0x0226C018 MOV X0, X19
	0x0226C01C MOV W2, W31
	0x0226C020 BL 0x1C5C788
	0x0226C024 B 0x226C034
	0x0226C028 LDRSW X9, [X10]
	0x0226C02C ADD X8, X8, X9, 0x4, LSL
	0x0226C030 ADD X0, X8, 0x138
	0x0226C034 LDP X8, X1, [X0]
	0x0226C038 MOV X0, X19
	0x0226C03C BLR X8
	0x0226C040 MOV X19, X0
	0x0226C044 CBZ X0, 0x226C3A8
	0x0226C048 ADRP X25, 0x1E87000
	0x0226C04C LDR X8, [X19]
	0x0226C050 LDR X25, [X25 + 0xE18]
	0x0226C054 LDRH W9, [X8 + 0x12E]
	0x0226C058 LDR X1, [X25]
	0x0226C05C CBZ X9, 0x226C080

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X4+56]
	008 Move X19, X4
	009 Move X22, X3
	010 Move X20, X2
	011 Move X21, X1
	012 Move W23, W0
	013 Compare X8, 0
	014 JumpIfNotEqual {26}
	015 Move X0, 0x1EB2000
	016 Move X0, [X0+1656]
	017 Call 0x1C17CF4
	018 Move X0, 0x1E8B000
	019 Move X0, [X0+632]
	020 Call 0x1C17CF4
	021 Move X8, [X19+56]
	022 Compare X8, 0
	023 JumpIfNotEqual {26}
	024 Move X0, X19
	025 Call 0x1C5D6E0
	026 Compare X22, 0
	027 JumpIfEqual {60}
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move W0, W23
	030 Move X1, X31
	031 Call String.FastAllocateString, X0
	032 Compare X0, 0
	033 JumpIfEqual {72}
	034 Move X1, X31
	035 Move X19, X0
	036 Call String.GetRawStringData, X0
	037 Move X1, X0
	038 Move X8, [X22+24]
	039 Move X0, [X22+64]
	040 Move X5, [X22+40]
	041 Move W2, W23
	042 Move X3, X21
	043 Move X4, X20
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Compare W23, 0
	046 JumpIfNotEqual {73}
	047 Move X8, 0x1E8B000
	048 Move X8, [X8+632]
	049 Move X8, [X8]
	050 Move X8, [X8+184]
	051 Move X19, [X8]
	052 Move X0, X19
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X30, [X31+48]
	058 Move X23, [X31+56]
	059 Return X0
	060 Move X0, 0x1E8E000
	061 Move X0, [X0+1320]
	062 Call 0x1C17D08
	063 Call 0x1C17F10
	064 Move X20, X0
	065 Move X0, 0x1EB0000
	066 Move X0, [X0+3064]
	067 Call 0x1C17D08
	068 Move X1, X0
	069 Move X0, X20
	070 Move X2, X31
	071 Call ArgumentNullException..ctor, X0, X1
	072 Call 0x1C17F20
	073 Move X0, 0x1E90000
	074 Move X0, [X0+1888]
	075 Call 0x1C17D08
	076 Call 0x1C17F10
	077 Move X20, X0
	078 Move X0, 0x1E90000
	079 Move X0, [X0+1896]
	080 Call 0x1C17D08
	081 Move X1, X0
	082 Move X0, X20
	083 Move X2, X31
	084 Call ArgumentOutOfRangeException..ctor, X0, X1
	085 Move X0, X20
	086 Move X1, X19
	087 Call 0x1C17DEC

Method: System.ReadOnlySpan`1<System.Char> op_Implicit(System.String value)

Disassembly:
	0x0322E6FC CINC X8, X8, LT
	0x0322E700 UBFM X20, X8, 0x1, 0x3F
	0x0322E704 B 0x322E61C
	0x0322E708 BL 0x1C16F20
	0x0322E70C STP X30, X23, [X31 - 0x30]!
	0x0322E710 STP X22, X21, [X31 + 0x10]
	0x0322E714 STP X20, X19, [X31 + 0x20]
	0x0322E718 CBZ X1, 0x322E7D8
	0x0322E71C LDRSW X23, [X1 + 0x10]
	0x0322E720 MOV W21, W3
	0x0322E724 MOV X20, X1
	0x0322E728 CMP W23, W3
	0x0322E72C B.GT 0x322E760
	0x0322E730 MOV W19, W2
	0x0322E734 CBZ W23, 0x322E764
	0x0322E738 ADD X22, X0, 0x14
	0x0322E73C MOV X0, X31
	0x0322E740 BL 0x32C1424
	0x0322E744 UBFM X9, X23, 0x3F, 0x3E
	0x0322E748 ADD X8, X22, W19, 0x1, SXTW

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11AF000
	005 Move W8, [X20+915]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xEED000
	012 Move X0, [X0+656]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+915], W8
	016 Compare X19, 0
	017 JumpIfEqual {20}
	018 Move W1, [X19+16]
	019 Add X0, X19, 20
	020 Move X0, X31
	021 Move X1, X31
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Return X0

Method: System.Object Clone()

Disassembly:
	0x0322E74C SUB X11, X9, 0x2

ISIL:
	001 Return X0

Method: System.String Copy(System.String str)

Disassembly:
	0x0322E750 ADD X9, X11, X8
	0x0322E754 SUB X9, X9, W21, 0x1, SXTW
	0x0322E758 CMP X8, X9
	0x0322E75C B.NE 0x322E778
	0x0322E760 MOVN W19, 0x0
	0x0322E764 MOV W0, W19
	0x0322E768 LDP X20, X19, [X31 + 0x20]
	0x0322E76C LDP X22, X21, [X31 + 0x10]
	0x0322E770 LDP X30, X23, [X31], #0x30
	0x0322E774 RET
	0x0322E778 ADD X10, X20, W0, SXTW
	0x0322E77C ADD X11, X11, X10
	0x0322E780 LDRH W12, [X11]
	0x0322E784 LDRH W13, [X8]
	0x0322E788 CMP W13, W12
	0x0322E78C B.NE 0x322E7B0
	0x0322E790 MOV X14, X11
	0x0322E794 MOV X13, X8
	0x0322E798 CMP X14, X10
	0x0322E79C B.EQ 0x322E7C4
	0x0322E7A0 LDRH W15, [X14 - 0x2]!
	0x0322E7A4 LDRH W16, [X13 - 0x2]!
	0x0322E7A8 CMP W16, W15
	0x0322E7AC B.EQ 0x322E798
	0x0322E7B0 SUB X8, X8, 0x2
	0x0322E7B4 CMP X8, X9
	0x0322E7B8 MOVN W19, 0x0
	0x0322E7BC B.NE 0x322E784
	0x0322E7C0 B 0x322E764
	0x0322E7C4 SUB X8, X13, X22
	0x0322E7C8 CMP X8, 0x0
	0x0322E7CC CINC X8, X8, LT
	0x0322E7D0 UBFM X19, X8, 0x1, 0x3F
	0x0322E7D4 B 0x322E764
	0x0322E7D8 BL 0x1C16F20
	0x0322E7DC STR X30, [X31 - 0x60]!
	0x0322E7E0 STP X28, X27, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X0, 0
	005 JumpIfEqual {25}
	006 Move X20, X0
	007 Move W0, [X0+16]
	008 Call 0x1C8925C
	009 Compare X0, 0
	010 JumpIfEqual {43}
	011 Move W8, [X20+16]
	012 Move X19, X0
	013 Add X0, X0, 20
	014 Add X1, X20, 20
	015 Move W2, W8
	016 ShiftRight W2, 31
	017 And W2, W2, 0x3FFFFFFF
	018 Move X3, X31
	019 Call Buffer.Memmove, X0, X1, X2
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0
	025 Move X0, 0xECB000
	026 Move X0, [X0+1320]
	027 Call 0x1C17D08
	028 Call 0x1C17F10
	029 Move X19, X0
	030 Move X0, 0xEC8000
	031 Move X0, [X0+3200]
	032 Call 0x1C17D08
	033 Move X1, X0
	034 Move X0, X19
	035 Move X2, X31
	036 Call ArgumentNullException..ctor, X0, X1
	037 Move X0, 0xEF5000
	038 Move X0, [X0+624]
	039 Call 0x1C17D08
	040 Move X1, X0
	041 Move X0, X19
	042 Call 0x1C17DEC
	043 Call 0x1C17F20

Method: System.Void CopyTo(System.Int32 sourceIndex, System.Char[] destination, System.Int32 destinationIndex, System.Int32 count)

Disassembly:
	0x0322E7E4 STP X26, X25, [X31 + 0x20]
	0x0322E7E8 STP X24, X23, [X31 + 0x30]
	0x0322E7EC STP X22, X21, [X31 + 0x40]
	0x0322E7F0 STP X20, X19, [X31 + 0x50]
	0x0322E7F4 ADRP X19, 0x11AE000
	0x0322E7F8 LDRB W8, [X19 + 0x3AA]
	0x0322E7FC MOV W21, W3
	0x0322E800 MOV W20, W2
	0x0322E804 MOV X22, X1
	0x0322E808 MOV X23, X0
	0x0322E80C TBNZ X8, 0x0, 0x322E824
	0x0322E810 ADRP X0, 0xEC7000
	0x0322E814 LDR X0, [X0 + 0xC48]
	0x0322E818 BL 0x1C16CF4
	0x0322E81C MOVZ W8, 0x1
	0x0322E820 STRB W8, [X19 + 0x3AA]
	0x0322E824 CBZ X22, 0x322E968
	0x0322E828 LDRSW X24, [X22 + 0x10]
	0x0322E82C CMP W24, W21
	0x0322E830 B.GT 0x322E8B4
	0x0322E834 CBZ W24, 0x322E8B8
	0x0322E838 ADRP X8, 0xEC7000
	0x0322E83C LDR X8, [X8 + 0xC48]
	0x0322E840 LDR X0, [X8]
	0x0322E844 LDR W8, [X0 + 0xE0]
	0x0322E848 CBNZ W8, 0x322E850
	0x0322E84C BL 0x1C16DFC
	0x0322E850 MOV X0, X31
	0x0322E854 BL 0x3338524
	0x0322E858 CBZ X0, 0x322E968
	0x0322E85C LDR X8, [X0]
	0x0322E860 LDP X9, X1, [X8 + 0x1D8]
	0x0322E864 BLR X9
	0x0322E868 MOV X19, X0
	0x0322E86C MOV X0, X31
	0x0322E870 BL 0x32C1424
	0x0322E874 CBZ X19, 0x322E968
	0x0322E878 LDR X8, [X19]
	0x0322E87C UBFM X9, X24, 0x3F, 0x3E
	0x0322E880 ADD X22, X22, W0, SXTW
	0x0322E884 SUB X9, X9, 0x2
	0x0322E888 ADD X24, X9, X22
	0x0322E88C LDP X10, X2, [X8 + 0x1C8]
	0x0322E890 LDRH W1, [X24]
	0x0322E894 ADD X23, X23, 0x14
	0x0322E898 ADD X25, X23, W20, 0x1, SXTW
	0x0322E89C ADD X8, X9, X25
	0x0322E8A0 MOV X0, X19
	0x0322E8A4 SUB X26, X8, W21, 0x1, SXTW
	0x0322E8A8 BLR X10
	0x0322E8AC CMP X25, X26
	0x0322E8B0 B.NE 0x322E8D8
	0x0322E8B4 MOVN W20, 0x0
	0x0322E8B8 MOV W0, W20
	0x0322E8BC LDP X20, X19, [X31 + 0x50]
	0x0322E8C0 LDP X22, X21, [X31 + 0x40]
	0x0322E8C4 LDP X24, X23, [X31 + 0x30]
	0x0322E8C8 LDP X26, X25, [X31 + 0x20]
	0x0322E8CC LDP X28, X27, [X31 + 0x10]
	0x0322E8D0 LDR X30, [X31], #0x60
	0x0322E8D4 RET
	0x0322E8D8 MOV W21, W0
	0x0322E8DC LDR X8, [X19]
	0x0322E8E0 LDRH W1, [X25]
	0x0322E8E4 MOV X0, X19
	0x0322E8E8 LDP X9, X2, [X8 + 0x1C8]
	0x0322E8EC BLR X9
	0x0322E8F0 AND W8, W0, 0xFFFF
	0x0322E8F4 CMP W8, W21, UXTH
	0x0322E8F8 B.NE 0x322E940
	0x0322E8FC MOV X27, X24
	0x0322E900 MOV X20, X25
	0x0322E904 CMP X27, X22
	0x0322E908 B.EQ 0x322E954
	0x0322E90C LDR X8, [X19]
	0x0322E910 MOV X0, X19
	0x0322E914 LDP X9, X2, [X8 + 0x1C8]
	0x0322E918 LDRH W1, [X20 - 0x2]!
	0x0322E91C BLR X9
	0x0322E920 LDRH W1, [X27 - 0x2]!
	0x0322E924 LDR X8, [X19]
	0x0322E928 AND W28, W0, 0xFFFF
	0x0322E92C MOV X0, X19
	0x0322E930 LDP X9, X2, [X8 + 0x1C8]
	0x0322E934 BLR X9
	0x0322E938 CMP W28, W0, UXTH
	0x0322E93C B.EQ 0x322E904
	0x0322E940 SUB X25, X25, 0x2
	0x0322E944 CMP X25, X26
	0x0322E948 MOVN W20, 0x0
	0x0322E94C B.NE 0x322E8DC
	0x0322E950 B 0x322E8B8
	0x0322E954 SUB X8, X20, X23

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X2, 0
	005 JumpIfEqual {39}
	006 Move TEMP, X4
	007 And TEMP, TEMP, -2147483648
	008 Compare TEMP, -2147483648
	009 JumpIfEqual {51}
	010 Move TEMP, X1
	011 And TEMP, TEMP, -2147483648
	012 Compare TEMP, -2147483648
	013 JumpIfEqual {62}
	014 Move W8, [X0+16]
	015 Subtract W8, W8, W1
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move TEMP, X3
	018 And TEMP, TEMP, -2147483648
	019 Compare TEMP, -2147483648
	020 JumpIfEqual {80}
	021 Move W8, [X2+24]
	022 Subtract W9, W8, W4
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Add X10, X2, 32
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Add X9, X0, W1
	029 NotImplemented "Instruction CSEL not yet implemented."
	030 Add X1, X9, 20
	031 Add X0, X8, W3
	032 Move W2, W4
	033 ShiftRight W2, 31
	034 And W2, W2, 0x3FFFFFFF
	035 Move X3, X31
	036 Move X30, [X31+32]
	037 Call Buffer.Memmove, X0, X1, X2
	038 Return 
	039 Move X0, 0xECB000
	040 Move X0, [X0+1320]
	041 Call 0x1C17D08
	042 Call 0x1C17F10
	043 Move X19, X0
	044 Move X0, 0xEF5000
	045 Move X0, [X0+632]
	046 Call 0x1C17D08
	047 Move X1, X0
	048 Move X0, X19
	049 Move X2, X31
	050 Call ArgumentNullException..ctor, X0, X1
	051 Move X0, 0xECE000
	052 Move X0, [X0+1888]
	053 Call 0x1C17D08
	054 Call 0x1C17F10
	055 Move X19, X0
	056 Move X0, 0xEEE000
	057 Move X0, [X0+1608]
	058 Call 0x1C17D08
	059 Move X20, X0
	060 Move X0, 0xEF5000
	061 Move X0, [X0+48]
	062 Move X0, 0xECE000
	063 Move X0, [X0+1888]
	064 Call 0x1C17D08
	065 Call 0x1C17F10
	066 Move X19, X0
	067 Move X0, 0xEF5000
	068 Move X0, [X0+640]
	069 Call 0x1C17D08
	070 Move X20, X0
	071 Move X0, 0xEEE000
	072 Move X0, [X0+1632]
	073 Move X0, 0xECE000
	074 Move X0, [X0+1888]
	075 Call 0x1C17D08
	076 Call 0x1C17F10
	077 Move X19, X0
	078 Move X0, 0xEF5000
	079 Move X0, [X0+640]
	080 Move X0, 0xECE000
	081 Move X0, [X0+1888]
	082 Call 0x1C17D08
	083 Call 0x1C17F10
	084 Move X19, X0
	085 Move X0, 0xEF5000
	086 Move X0, [X0+648]
	087 Call 0x1C17D08
	088 Move X20, X0
	089 Move X0, 0xEF5000
	090 Move X0, [X0+264]
	091 Call 0x1C17D08
	092 Move X2, X0
	093 Move X0, X19
	094 Move X1, X20
	095 Move X3, X31
	096 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	097 Move X0, 0xEF5000
	098 Move X0, [X0+656]
	099 Call 0x1C17D08
	100 Move X1, X0
	101 Move X0, X19
	102 Call 0x1C17DEC

Method: System.Char[] ToCharArray()

Disassembly:
	0x0322E958 CMP X8, 0x0
	0x0322E95C CINC X8, X8, LT
	0x0322E960 UBFM X20, X8, 0x1, 0x3F
	0x0322E964 B 0x322E8B8
	0x0322E968 BL 0x1C16F20
	0x0322E96C STR X30, [X31 - 0x10]!
	0x0322E970 CBZ X1, 0x322E9C0
	0x0322E974 LDR W9, [X0 + 0x10]
	0x0322E978 LDRSW X8, [X1 + 0x10]
	0x0322E97C CMP W9, W8
	0x0322E980 B.LT 0x322E9A4
	0x0322E984 LDRH W9, [X0 + 0x14]!
	0x0322E988 LDRH W10, [X1 + 0x14]!
	0x0322E98C CMP W9, W10
	0x0322E990 B.NE 0x322E9A4
	0x0322E994 CMP W8, 0x1
	0x0322E998 B.NE 0x322E9B0
	0x0322E99C MOVZ W0, 0x1
	0x0322E9A0 B 0x322E9A8
	0x0322E9A4 MOV W0, W31
	0x0322E9A8 LDR X30, [X31], #0x10
	0x0322E9AC RET
	0x0322E9B0 UBFM X2, X8, 0x3F, 0x3E
	0x0322E9B4 MOV X3, X31
	0x0322E9B8 LDR X30, [X31], #0x10
	0x0322E9BC B 0x3391068
	0x0322E9C0 BL 0x1C16F20
	0x0322E9C4 B 0x1C88260
	0x0322E9C8 CMP W2, 0x7
	0x0322E9CC B.LE 0x322EA5C
	0x0322E9D0 MOV W8, W1
	0x0322E9D4 CMP W1, 0x0
	0x0322E9D8 MOV W8, W8
	0x0322E9DC CSEL W8, W31, W8, EQ
	0x0322E9E0 ANDS W10, W0, 0x3
	0x0322E9E4 B.EQ 0x322EA04
	0x0322E9E8 MOVZ W9, 0x4
	0x0322E9EC SUB W9, W9, W10
	0x0322E9F0 ORR W10, W10, 0xFFFFFFFC
	0x0322E9F4 ADDS W10, W10, 0x1
	0x0322E9F8 STRB W8, [X0], #0x1
	0x0322E9FC B.CC 0x322E9F4
	0x0322EA00 SUB W2, W2, W9
	0x0322EA04 CMP W2, 0x10
	0x0322EA08 B.LT 0x322EA24
	0x0322EA0C STP W8, W8, [X0]
	0x0322EA10 STP W8, W8, [X0 + 0x8]
	0x0322EA14 ADD X0, X0, 0x10
	0x0322EA18 CMP W2, 0x1F
	0x0322EA1C SUB W2, W2, 0x10
	0x0322EA20 B.GT 0x322EA0C
	0x0322EA24 CMP W2, 0x4
	0x0322EA28 B.LT 0x322EA3C
	0x0322EA2C STR W8, [X0], #0x4
	0x0322EA30 CMP W2, 0x7
	0x0322EA34 SUB W2, W2, 0x4
	0x0322EA38 B.GT 0x322EA2C
	0x0322EA3C CMP W2, 0x1
	0x0322EA40 B.LT 0x322EA6C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11AF000
	005 Move W8, [X20+916]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xEF5000
	012 Move X0, [X0+664]
	013 Call 0x1C17CF4
	014 Move X0, 0xECF000
	015 Move X0, [X0+2264]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+916], W8
	019 Move W1, [X19+16]
	020 Compare W1, 0
	021 JumpIfEqual {40}
	022 Move X8, 0xECF000
	023 Move X8, [X8+2264]
	024 Move X0, [X8]
	025 Call 0x1C17D6C
	026 Compare X0, 0
	027 JumpIfEqual {75}
	028 Move W8, [X0+24]
	029 Move X20, X0
	030 Compare W8, 0
	031 JumpIfEqual {76}
	032 Move W8, [X19+16]
	033 Add X1, X19, 20
	034 Add X0, X20, 32
	035 Move X3, X31
	036 Move W2, W8
	037 ShiftRight W2, 31
	038 And W2, W2, 0x3FFFFFFF
	039 Call Buffer.Memmove, X0, X1, X2
	040 Move X8, 0xEF5000
	041 Move X8, [X8+664]
	042 Move X19, [X8]
	043 Move X8, [X19+56]
	044 Compare X8, 0
	045 JumpIfNotEqual {49}
	046 Move X0, X19
	047 Call 0x1C5D6E0
	048 Move X8, [X19+56]
	049 Move X0, [X8+16]
	050 Move W8, [X0+309]
	051 Move TEMP, X8
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfEqual {56}
	055 Call 0x1C5D684
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move X8, [X19+56]
	061 Move X0, [X8+16]
	062 Move W8, [X0+309]
	063 Move TEMP, X8
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfEqual {68}
	067 Call 0x1C5D684
	068 Move X8, [X0+184]
	069 Move X20, [X8]
	070 Move X0, X20
	071 Move X20, [X31+16]
	072 Move X19, [X31+24]
	073 Move X30, [X31+32]
	074 Return X0
	075 Call 0x1C17F20
	076 Call 0x1C17F28

Method: System.Boolean IsNullOrEmpty(System.String value)

Disassembly:
	0x032287A8 LDR X8, [X8 + 0xAC8]
	0x032287AC MOV X20, X0
	0x032287B0 LDR X24, [X8]
	0x032287B4 MOV X1, X24
	0x032287B8 BL 0x1C16E00
	0x032287BC LDR X29, [X31 + 0x38]
	0x032287C0 MOV X28, X0

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {8}
	003 Move W8, [X0+16]
	004 Compare W8, 0
	005 JumpIfEqual {8}
	006 Move W0, W31
	007 Return X0
	008 Move W0, 1
	009 Return X0

Method: System.Boolean IsNullOrWhiteSpace(System.String value)

Disassembly:
	0x0322EA44 ADD W9, W2, 0x1
	0x0322EA48 SUB W9, W9, 0x1
	0x0322EA4C CMP W9, 0x1
	0x0322EA50 STRB W8, [X0], #0x1
	0x0322EA54 B.GT 0x322EA48
	0x0322EA58 B 0x322EA6C
	0x0322EA5C CBZ W2, 0x322EA6C
	0x0322EA60 SUBS W2, W2, 0x1
	0x0322EA64 STRB W1, [X0], #0x1
	0x0322EA68 B.NE 0x322EA60
	0x0322EA6C RET
	0x0322EA70 MOV X3, X31
	0x0322EA74 B 0x33A8924
	0x0322EA78 MOV W2, W1
	0x0322EA7C MOV W1, W31
	0x0322EA80 B 0x322E9C8
	0x0322EA84 STRB W31, [X0]
	0x0322EA88 RET
	0x0322EA8C STRH W31, [X0]
	0x0322EA90 RET
	0x0322EA94 STR W31, [X0]
	0x0322EA98 RET
	0x0322EA9C STR X31, [X0]
	0x0322EAA0 RET
	0x0322EAA4 LDRB W8, [X1]
	0x0322EAA8 STRB W8, [X0]
	0x0322EAAC RET
	0x0322EAB0 LDRH W8, [X1]
	0x0322EAB4 STRH W8, [X0]
	0x0322EAB8 RET
	0x0322EABC LDR W8, [X1]
	0x0322EAC0 STR W8, [X0]
	0x0322EAC4 RET
	0x0322EAC8 LDR X8, [X1]
	0x0322EACC STR X8, [X0]
	0x0322EAD0 RET
	0x0322EAD4 MOV X0, X1
	0x0322EAD8 MOV W1, W2
	0x0322EADC MOV W2, W3
	0x0322EAE0 B 0x322CFDC
	0x0322EAE4 MOV X0, X1
	0x0322EAE8 MOV W1, W2
	0x0322EAEC MOV W2, W3
	0x0322EAF0 B 0x322CE2C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x11AF000
	008 Move W8, [X20+917]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEC8000
	015 Move X0, [X0+368]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+917], W8
	019 Compare X19, 0
	020 JumpIfEqual {46}
	021 Move W8, [X19+16]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X23, 0xEC8000
	024 Move X23, [X23+368]
	025 Move X21, X31
	026 Add X22, X19, 20
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X0, X31
	029 Call ThrowHelper.ThrowIndexOutOfRangeException
	030 Move X0, [X23]
	031 NotImplemented "Instruction LDRH not yet implemented."
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move W0, W20
	037 Move X1, X31
	038 Call Char.IsWhiteSpace, X0
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {47}
	043 NotImplemented "Instruction LDRSW not yet implemented."
	044 Add X21, X21, 1
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move W0, 1
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 And W0, W0, 1
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: System.Char GetRawStringData()

Disassembly:
	0x03226708 CBZ X0, 0x32267FC
	0x0322670C LDR X8, [X0]

ISIL:
	001 Add X0, X0, 20
	002 Return X0

Method: System.String CreateStringFromEncoding(System.Byte* bytes, System.Int32 byteLength, System.Text.Encoding encoding)

Disassembly:
	0x0322EAF4 MOV W0, W1
	0x0322EAF8 MOV W1, W2
	0x0322EAFC B 0x322D51C
	0x0322EB00 MOV X0, X1
	0x0322EB04 MOV W1, W2
	0x0322EB08 MOV W2, W3
	0x0322EB0C MOV X3, X4
	0x0322EB10 B 0x322D358
	0x0322EB14 MOV X0, X1
	0x0322EB18 MOV X1, X2
	0x0322EB1C B 0x322D63C
	0x0322EB20 CBZ X0, 0x322EB28
	0x0322EB24 B 0x1C88260
	0x0322EB28 STP X30, X19, [X31 - 0x10]!
	0x0322EB2C ADRP X0, 0xECA000
	0x0322EB30 LDR X0, [X0 + 0x528]
	0x0322EB34 BL 0x1C16D08
	0x0322EB38 BL 0x1C16F10
	0x0322EB3C MOV X19, X0
	0x0322EB40 ADRP X0, 0xEC7000
	0x0322EB44 LDR X0, [X0 + 0xC80]
	0x0322EB48 BL 0x1C16D08
	0x0322EB4C MOV X1, X0
	0x0322EB50 MOV X0, X19
	0x0322EB54 MOV X2, X31
	0x0322EB58 BL 0x330E100
	0x0322EB5C ADRP X0, 0xEF4000
	0x0322EB60 LDR X0, [X0 + 0x2C0]
	0x0322EB64 BL 0x1C16D08
	0x0322EB68 MOV X1, X0
	0x0322EB6C MOV X0, X19
	0x0322EB70 BL 0x1C16DEC
	0x0322EB74 STR X30, [X31 - 0x20]!
	0x0322EB78 STP X20, X19, [X31 + 0x10]
	0x0322EB7C LDR X8, [X0 + 0x10]
	0x0322EB80 CBZ X8, 0x322EC4C
	0x0322EB84 MOV X19, X0
	0x0322EB88 LDR X0, [X1 + 0x20]
	0x0322EB8C MOV X20, X1
	0x0322EB90 LDRB W8, [X0 + 0x135]
	0x0322EB94 TBNZ X8, 0x0, 0x322EB9C
	0x0322EB98 BL 0x1C5C684
	0x0322EB9C LDR X8, [X0 + 0xC0]
	0x0322EBA0 LDR X0, [X8 + 0x70]
	0x0322EBA4 LDRB W8, [X0 + 0x135]
	0x0322EBA8 TBNZ X8, 0x0, 0x322EBB0
	0x0322EBAC BL 0x1C5C684
	0x0322EBB0 LDR W8, [X0 + 0xE0]
	0x0322EBB4 CBNZ W8, 0x322EBBC
	0x0322EBB8 BL 0x1C16DFC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x11AF000
	008 Move W8, [X22+918]
	009 Move X20, X2
	010 Move W19, W1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEC8000
	017 Move X0, [X0+632]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+918], W8
	021 Compare X20, 0
	022 JumpIfEqual {61}
	023 Move X8, [X20]
	024 Move X0, X20
	025 Move X1, X21
	026 Move W2, W19
	027 Move X9, [X8+712]
	028 Move X4, [X8+720]
	029 Move X3, X31
	030 NotImplemented "Instruction BLR not yet implemented."
	031 Compare W0, 0
	032 JumpIfEqual {48}
	033 Move W23, W0
	034 Call 0x1C8925C
	035 Compare X0, 0
	036 JumpIfEqual {61}
	037 Move X8, [X20]
	038 Move X22, X0
	039 Add X3, X0, 20
	040 Move X0, X20
	041 Move X9, [X8+776]
	042 Move X6, [X8+784]
	043 Move X1, X21
	044 Move W2, W19
	045 Move W4, W23
	046 Move X5, X31
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Move X8, 0xEC8000
	049 Move X8, [X8+632]
	050 Move X8, [X8]
	051 Move X8, [X8+184]
	052 Move X22, [X8]
	053 Move X0, X22
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move X30, [X31+48]
	059 Move X23, [X31+56]
	060 Return X0
	061 Call 0x1C17F20

Method: System.String CreateFromChar(System.Char c)

Disassembly:
	0x0322EBBC LDR X0, [X20 + 0x20]
	0x0322EBC0 LDRB W8, [X0 + 0x135]
	0x0322EBC4 TBNZ X8, 0x0, 0x322EBCC
	0x0322EBC8 BL 0x1C5C684
	0x0322EBCC LDR X8, [X0 + 0xC0]
	0x0322EBD0 LDR X20, [X8 + 0x68]
	0x0322EBD4 LDR X0, [X20 + 0x20]
	0x0322EBD8 LDRB W8, [X0 + 0x135]
	0x0322EBDC TBNZ X8, 0x0, 0x322EBE4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, W0
	004 Move W0, 1
	005 Call 0x1C8925C
	006 Compare X0, 0
	007 JumpIfEqual {12}
	008 NotImplemented "Instruction STRH not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Call 0x1C17F20

Method: System.Void wstrcpy(System.Char* dmem, System.Char* smem, System.Int32 charCount)

Disassembly:
	0x03228300 MOV X1, X20
	0x03228304 MOV X2, X31
	0x03228308 BL 0x32333E0

ISIL:
	001 Move W2, W2
	002 ShiftRight W2, 31
	003 And W2, W2, 0x3FFFFFFF
	004 Move X3, X31
	005 Call Buffer.Memmove, X0, X1, X2
	006 Return 

Method: System.String ToString()

Disassembly:
	0x0322EBE0 BL 0x1C5C684

ISIL:
	001 Return X0

Method: System.String ToString(System.IFormatProvider provider)

Disassembly:
	0x0322EBE4 LDR X8, [X0 + 0xC0]

ISIL:
	001 Return X0

Method: System.Collections.Generic.IEnumerator`1<System.Char> System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator()

Disassembly:
	0x0322EBE8 LDR X0, [X8 + 0x8]
	0x0322EBEC LDRB W8, [X0 + 0x135]
	0x0322EBF0 TBNZ X8, 0x0, 0x322EBF8
	0x0322EBF4 BL 0x1C5C684
	0x0322EBF8 LDR W8, [X0 + 0xE0]
	0x0322EBFC CBNZ W8, 0x322EC04
	0x0322EC00 BL 0x1C16DFC
	0x0322EC04 LDR X0, [X20 + 0x20]
	0x0322EC08 LDRB W8, [X0 + 0x135]
	0x0322EC0C TBNZ X8, 0x0, 0x322EC14
	0x0322EC10 BL 0x1C5C684
	0x0322EC14 LDR X8, [X0 + 0xC0]
	0x0322EC18 LDR X0, [X8 + 0x8]
	0x0322EC1C LDRB W8, [X0 + 0x135]
	0x0322EC20 TBNZ X8, 0x0, 0x322EC28
	0x0322EC24 BL 0x1C5C684
	0x0322EC28 LDR X8, [X0 + 0xB8]
	0x0322EC2C LDR X0, [X8]
	0x0322EC30 CBZ X0, 0x322EC58
	0x0322EC34 LDR X8, [X0]
	0x0322EC38 LDR X1, [X19 + 0x10]
	0x0322EC3C MOV W2, W31
	0x0322EC40 LDP X9, X3, [X8 + 0x188]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11AF000
	006 Move X21, 0xEF5000
	007 Move W8, [X20+919]
	008 Move X21, [X21+672]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEF5000
	015 Move X0, [X0+672]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+919], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X19
	022 Move X2, X31
	023 Move X20, X0
	024 Call CharEnumerator..ctor, X0, X1
	025 Move X0, X20
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x0322EC44 BLR X9
	0x0322EC48 STR X31, [X19 + 0x10]
	0x0322EC4C LDP X20, X19, [X31 + 0x10]
	0x0322EC50 LDR X30, [X31], #0x20
	0x0322EC54 RET
	0x0322EC58 BL 0x1C16F20
	0x0322EC5C STR X30, [X31 - 0x20]!
	0x0322EC60 STP X20, X19, [X31 + 0x10]
	0x0322EC64 MOV X20, X1
	0x0322EC68 MOV X1, X31
	0x0322EC6C MOV X19, X0
	0x0322EC70 BL 0x33FEB60
	0x0322EC74 STR X20, [X19 + 0x28]
	0x0322EC78 CBZ X20, 0x322EC9C
	0x0322EC7C LDR X8, [X20 + 0x28]
	0x0322EC80 LDR X9, [X19]
	0x0322EC84 MOV X0, X19
	0x0322EC88 STR X8, [X19 + 0x10]
	0x0322EC8C LDP X2, X1, [X9 + 0x178]
	0x0322EC90 LDP X20, X19, [X31 + 0x10]
	0x0322EC94 LDR X30, [X31], #0x20
	0x0322EC98 BR X2
	0x0322EC9C BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11AF000
	006 Move X21, 0xEF5000
	007 Move W8, [X20+920]
	008 Move X21, [X21+672]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEF5000
	015 Move X0, [X0+672]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+920], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X19
	022 Move X2, X31
	023 Move X20, X0
	024 Call CharEnumerator..ctor, X0, X1
	025 Move X0, X20
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0

Method: System.Int32 wcslen(System.Char* ptr)

Disassembly:
	0x0322ECA0 MOV X8, X0
	0x0322ECA4 LDR X0, [X0 + 0x18]
	0x0322ECA8 STRH W31, [X8 + 0x20]
	0x0322ECAC CBZ X0, 0x322ECBC
	0x0322ECB0 LDR X8, [X0]
	0x0322ECB4 LDP X2, X1, [X8 + 0x1C8]
	0x0322ECB8 BR X2
	0x0322ECBC RET
	0x0322ECC0 STR X30, [X31 - 0x40]!
	0x0322ECC4 STP X24, X23, [X31 + 0x10]
	0x0322ECC8 STP X22, X21, [X31 + 0x20]
	0x0322ECCC STP X20, X19, [X31 + 0x30]
	0x0322ECD0 ADRP X24, 0x11AE000
	0x0322ECD4 LDRB W8, [X24 + 0x3AD]
	0x0322ECD8 MOV W21, W4
	0x0322ECDC MOV W19, W3
	0x0322ECE0 MOV W20, W2
	0x0322ECE4 MOV X23, X1
	0x0322ECE8 MOV X22, X0
	0x0322ECEC TBNZ X8, 0x0, 0x322ED10
	0x0322ECF0 ADRP X0, 0xEF4000
	0x0322ECF4 LDR X0, [X0 + 0x2C8]
	0x0322ECF8 BL 0x1C16CF4
	0x0322ECFC ADRP X0, 0xEF4000
	0x0322ED00 LDR X0, [X0 + 0x2D0]
	0x0322ED04 BL 0x1C16CF4
	0x0322ED08 MOVZ W8, 0x1
	0x0322ED0C STRB W8, [X24 + 0x3AD]
	0x0322ED10 CBZ X23, 0x322ED7C
	0x0322ED14 TBNZ X19, 0x1F, 0x322EDC4
	0x0322ED18 TBNZ X20, 0x1F, 0x322EDC4
	0x0322ED1C LDR W8, [X23 + 0x18]
	0x0322ED20 SUB W8, W8, W20
	0x0322ED24 CMP W8, W19
	0x0322ED28 B.LT 0x322EE30
	0x0322ED2C ADRP X8, 0xEF4000
	0x0322ED30 LDR X8, [X8 + 0x2D0]
	0x0322ED34 ADRP X24, 0xEF4000
	0x0322ED38 MOV X0, X23
	0x0322ED3C LDR X1, [X8]
	0x0322ED40 LDR X24, [X24 + 0x2C8]
	0x0322ED44 BL 0x25FBC40
	0x0322ED48 LDR X2, [X24]
	0x0322ED4C BL 0x2218CFC
	0x0322ED50 LDR X8, [X22]
	0x0322ED54 ADD X1, X0, W20, 0x1, SXTW
	0x0322ED58 AND W3, W21, 0x1
	0x0322ED5C MOV X0, X22
	0x0322ED60 LDP X5, X4, [X8 + 0x198]
	0x0322ED64 MOV W2, W19
	0x0322ED68 LDP X20, X19, [X31 + 0x30]
	0x0322ED6C LDP X22, X21, [X31 + 0x20]
	0x0322ED70 LDP X24, X23, [X31 + 0x10]
	0x0322ED74 LDR X30, [X31], #0x40
	0x0322ED78 BR X5
	0x0322ED7C ADRP X0, 0xECA000
	0x0322ED80 LDR X0, [X0 + 0x528]
	0x0322ED84 BL 0x1C16D08
	0x0322ED88 BL 0x1C16F10
	0x0322ED8C MOV X19, X0
	0x0322ED90 ADRP X0, 0xEF4000
	0x0322ED94 LDR X0, [X0 + 0x2D8]
	0x0322ED98 BL 0x1C16D08
	0x0322ED9C MOV X20, X0
	0x0322EDA0 ADRP X0, 0xEF4000
	0x0322EDA4 LDR X0, [X0 + 0x2E0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, X31
	005 Call IntPtr.get_Size
	006 Subtract W9, W0, 1
	007 And W31, W9, W19
	008 Move X8, X19
	009 Add X10, X19, 2
	010 Move X8, X19
	011 NotImplemented "Instruction LDRH not yet implemented."
	012 Compare W11, 0
	013 JumpIfEqual {38}
	014 Move X8, X10
	015 And W31, W9, W10
	016 Add X10, X10, 2
	017 Subtract X8, X10, 2
	018 Or X9, X31, 0x7FFF7FFF7FFF7FFF
	019 Move X10, [X8]
	020 Add X11, X10, X9
	021 NotImplemented "Instruction ORN not yet implemented."
	022 And X31, X11, -9223231297218904064
	023 And W31, W10, 0xFFFF
	024 Move X10, X8
	025 NotImplemented "Instruction LDRH not yet implemented."
	026 Compare W11, 0
	027 JumpIfEqual {35}
	028 NotImplemented "Instruction LDRH not yet implemented."
	029 Compare W11, 0
	030 JumpIfEqual {37}
	031 NotImplemented "Instruction LDRH not yet implemented."
	032 Compare W10, 0
	033 JumpIfEqual {36}
	034 Add X8, X8, 8
	035 Move X8, X10
	036 Add X10, X8, 4
	037 Add X8, X10, 2
	038 Subtract X9, X8, X19
	039 NotImplemented "Instruction CMP not yet implemented."
	040 NotImplemented "Instruction CINC not yet implemented."
	041 NotImplemented "Instruction SBFM not yet implemented."
	042 Move X9, X0
	043 ShiftRight X9, 32
	044 And X9, X9, 0x7FFFFFFF
	045 Add X9, X19, X9
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X30, [X31+16]
	048 Move X19, [X31+24]
	049 Return X0
	050 Move X0, 0xECE000
	051 Move X0, [X0+1400]
	052 Call 0x1C17D08
	053 Call 0x1C17F10
	054 Move X19, X0
	055 Move X0, 0xEF5000
	056 Move X0, [X0+680]
	057 Call 0x1C17D08
	058 Move X1, X0
	059 Move X0, X19
	060 Move X2, X31
	061 Call ArgumentException..ctor, X0, X1
	062 Move X0, 0xEF5000
	063 Move X0, [X0+688]
	064 Call 0x1C17D08
	065 Move X1, X0
	066 Move X0, X19
	067 Call 0x1C17DEC

Method: System.TypeCode GetTypeCode()

Disassembly:
	0x0322EDA8 BL 0x1C16D08
	0x0322EDAC MOV X2, X0

ISIL:
	001 Move W0, 18
	002 Return X0

Method: System.Boolean System.IConvertible.ToBoolean(System.IFormatProvider provider)

Disassembly:
	0x0322EDB0 MOV X0, X19
	0x0322EDB4 MOV X1, X20
	0x0322EDB8 MOV X3, X31
	0x0322EDBC BL 0x3315F7C
	0x0322EDC0 B 0x322EE74
	0x0322EDC4 ADRP X8, 0xEED000
	0x0322EDC8 ADRP X9, 0xED0000
	0x0322EDCC LDR X8, [X8 + 0x648]
	0x0322EDD0 LDR X9, [X9 + 0x130]
	0x0322EDD4 CMP W20, 0x0
	0x0322EDD8 CSEL X0, X9, X8, LT
	0x0322EDDC BL 0x1C16D08
	0x0322EDE0 MOV X19, X0
	0x0322EDE4 ADRP X0, 0xECD000
	0x0322EDE8 LDR X0, [X0 + 0x760]
	0x0322EDEC BL 0x1C16D08
	0x0322EDF0 BL 0x1C16F10
	0x0322EDF4 MOV X20, X0
	0x0322EDF8 ADRP X0, 0xEED000
	0x0322EDFC LDR X0, [X0 + 0x670]
	0x0322EE00 BL 0x1C16D08
	0x0322EE04 MOV X2, X0
	0x0322EE08 MOV X0, X20
	0x0322EE0C MOV X1, X19
	0x0322EE10 MOV X3, X31
	0x0322EE14 BL 0x3311888

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11AF000
	007 Move X22, 0xECF000
	008 Move W8, [X21+921]
	009 Move X22, [X22+2536]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xECF000
	017 Move X0, [X0+2536]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+921], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+48]
	034 Call Convert.ToBoolean, X0, X1
	035 Return X0

Method: System.Char System.IConvertible.ToChar(System.IFormatProvider provider)

Disassembly:
	0x0322EE18 ADRP X0, 0xEF4000
	0x0322EE1C LDR X0, [X0 + 0x2E8]
	0x0322EE20 BL 0x1C16D08
	0x0322EE24 MOV X1, X0
	0x0322EE28 MOV X0, X20
	0x0322EE2C BL 0x1C16DEC
	0x0322EE30 ADRP X0, 0xECD000
	0x0322EE34 LDR X0, [X0 + 0x760]
	0x0322EE38 BL 0x1C16D08
	0x0322EE3C BL 0x1C16F10
	0x0322EE40 MOV X19, X0
	0x0322EE44 ADRP X0, 0xEF4000
	0x0322EE48 LDR X0, [X0 + 0x2D8]
	0x0322EE4C BL 0x1C16D08
	0x0322EE50 MOV X20, X0
	0x0322EE54 ADRP X0, 0xEF4000
	0x0322EE58 LDR X0, [X0 + 0xE0]
	0x0322EE5C BL 0x1C16D08
	0x0322EE60 MOV X2, X0
	0x0322EE64 MOV X0, X19
	0x0322EE68 MOV X1, X20
	0x0322EE6C MOV X3, X31
	0x0322EE70 BL 0x3311888
	0x0322EE74 ADRP X0, 0xEF4000
	0x0322EE78 LDR X0, [X0 + 0x2E8]
	0x0322EE7C BL 0x1C16D08

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11AF000
	007 Move X22, 0xECF000
	008 Move W8, [X21+922]
	009 Move X22, [X22+2536]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xECF000
	017 Move X0, [X0+2536]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+922], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+48]
	034 Call Convert.ToChar, X0, X1
	035 Return X0

Method: System.SByte System.IConvertible.ToSByte(System.IFormatProvider provider)

Disassembly:
	0x0322EE80 MOV X1, X0
	0x0322EE84 MOV X0, X19
	0x0322EE88 BL 0x1C16DEC
	0x0322EE8C STR X30, [X31 - 0x20]!
	0x0322EE90 STP X20, X19, [X31 + 0x10]
	0x0322EE94 CBZ X1, 0x322EED4
	0x0322EE98 TBNZ X2, 0x1F, 0x322EF1C
	0x0322EE9C MOV X8, X0
	0x0322EEA0 LDR X0, [X0 + 0x28]
	0x0322EEA4 AND W9, W3, 0x1
	0x0322EEA8 STRB W9, [X8 + 0x30]
	0x0322EEAC MOVZ W9, 0x1
	0x0322EEB0 STRB W9, [X8 + 0x31]
	0x0322EEB4 CBZ X0, 0x322EF78
	0x0322EEB8 LDR X9, [X0]
	0x0322EEBC LDP X20, X19, [X31 + 0x10]
	0x0322EEC0 MOV X3, X8
	0x0322EEC4 LDR X5, [X9 + 0x228]
	0x0322EEC8 LDR X4, [X9 + 0x230]
	0x0322EECC LDR X30, [X31], #0x20
	0x0322EED0 BR X5
	0x0322EED4 ADRP X0, 0xECA000
	0x0322EED8 LDR X0, [X0 + 0x528]
	0x0322EEDC BL 0x1C16D08
	0x0322EEE0 BL 0x1C16F10
	0x0322EEE4 MOV X19, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11AF000
	007 Move X22, 0xECF000
	008 Move W8, [X21+923]
	009 Move X22, [X22+2536]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xECF000
	017 Move X0, [X0+2536]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+923], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+48]
	034 Call Convert.ToSByte, X0, X1
	035 Return X0

Method: System.Byte System.IConvertible.ToByte(System.IFormatProvider provider)

Disassembly:
	0x0322EEE8 ADRP X0, 0xEF4000
	0x0322EEEC LDR X0, [X0 + 0x2D8]
	0x0322EEF0 BL 0x1C16D08
	0x0322EEF4 MOV X20, X0
	0x0322EEF8 ADRP X0, 0xEF4000
	0x0322EEFC LDR X0, [X0 + 0x2E0]
	0x0322EF00 BL 0x1C16D08
	0x0322EF04 MOV X2, X0
	0x0322EF08 MOV X0, X19
	0x0322EF0C MOV X1, X20
	0x0322EF10 MOV X3, X31
	0x0322EF14 BL 0x3315F7C
	0x0322EF18 B 0x322EF60
	0x0322EF1C ADRP X0, 0xECD000
	0x0322EF20 LDR X0, [X0 + 0x760]
	0x0322EF24 BL 0x1C16D08
	0x0322EF28 BL 0x1C16F10
	0x0322EF2C MOV X19, X0
	0x0322EF30 ADRP X0, 0xEED000
	0x0322EF34 LDR X0, [X0 + 0x648]
	0x0322EF38 BL 0x1C16D08
	0x0322EF3C MOV X20, X0
	0x0322EF40 ADRP X0, 0xEED000
	0x0322EF44 LDR X0, [X0 + 0x670]
	0x0322EF48 BL 0x1C16D08
	0x0322EF4C MOV X2, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11AF000
	007 Move X22, 0xECF000
	008 Move W8, [X21+924]
	009 Move X22, [X22+2536]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xECF000
	017 Move X0, [X0+2536]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+924], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+48]
	034 Call Convert.ToByte, X0, X1
	035 Return X0

Method: System.Int16 System.IConvertible.ToInt16(System.IFormatProvider provider)

Disassembly:
	0x0322EF50 MOV X0, X19
	0x0322EF54 MOV X1, X20
	0x0322EF58 MOV X3, X31
	0x0322EF5C BL 0x3311888
	0x0322EF60 ADRP X0, 0xEF4000
	0x0322EF64 LDR X0, [X0 + 0x2F0]
	0x0322EF68 BL 0x1C16D08
	0x0322EF6C MOV X1, X0
	0x0322EF70 MOV X0, X19
	0x0322EF74 BL 0x1C16DEC
	0x0322EF78 BL 0x1C16F20
	0x0322EF7C STP X29, X30, [X31 - 0x60]!
	0x0322EF80 STP X28, X27, [X31 + 0x10]
	0x0322EF84 STP X26, X25, [X31 + 0x20]
	0x0322EF88 STP X24, X23, [X31 + 0x30]
	0x0322EF8C STP X22, X21, [X31 + 0x40]
	0x0322EF90 STP X20, X19, [X31 + 0x50]
	0x0322EF94 ADRP X26, 0x11AE000
	0x0322EF98 LDRB W8, [X26 + 0x3AE]
	0x0322EF9C MOV W20, W6
	0x0322EFA0 MOV W21, W5
	0x0322EFA4 MOV X24, X4
	0x0322EFA8 MOV W19, W3
	0x0322EFAC MOV W22, W2
	0x0322EFB0 MOV X25, X1
	0x0322EFB4 MOV X23, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11AF000
	007 Move X22, 0xECF000
	008 Move W8, [X21+925]
	009 Move X22, [X22+2536]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xECF000
	017 Move X0, [X0+2536]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+925], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+48]
	034 Call Convert.ToInt16, X0, X1
	035 Return X0

Method: System.UInt16 System.IConvertible.ToUInt16(System.IFormatProvider provider)

Disassembly:
	0x0322EFB8 TBNZ X8, 0x0, 0x322EFF4
	0x0322EFBC ADRP X0, 0xEF3000
	0x0322EFC0 LDR X0, [X0 + 0x830]
	0x0322EFC4 BL 0x1C16CF4
	0x0322EFC8 ADRP X0, 0xEF4000
	0x0322EFCC LDR X0, [X0 + 0x2C8]
	0x0322EFD0 BL 0x1C16CF4
	0x0322EFD4 ADRP X0, 0xEF4000
	0x0322EFD8 LDR X0, [X0 + 0x2F8]
	0x0322EFDC BL 0x1C16CF4
	0x0322EFE0 ADRP X0, 0xEF4000
	0x0322EFE4 LDR X0, [X0 + 0x2D0]
	0x0322EFE8 BL 0x1C16CF4
	0x0322EFEC MOVZ W8, 0x1
	0x0322EFF0 STRB W8, [X26 + 0x3AE]
	0x0322EFF4 CBZ X25, 0x322F0DC
	0x0322EFF8 CBZ X24, 0x322F0DC
	0x0322EFFC TBNZ X19, 0x1F, 0x322F134
	0x0322F000 TBNZ X22, 0x1F, 0x322F134
	0x0322F004 LDR W8, [X25 + 0x18]
	0x0322F008 SUB W8, W8, W22
	0x0322F00C CMP W8, W19
	0x0322F010 B.LT 0x322F1A0
	0x0322F014 TBNZ X21, 0x1F, 0x322F0AC
	0x0322F018 LDR W8, [X24 + 0x18]
	0x0322F01C SUBS W26, W8, W21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11AF000
	007 Move X22, 0xECF000
	008 Move W8, [X21+926]
	009 Move X22, [X22+2536]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xECF000
	017 Move X0, [X0+2536]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+926], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+48]
	034 Call Convert.ToUInt16, X0, X1
	035 Return X0

Method: System.Int32 System.IConvertible.ToInt32(System.IFormatProvider provider)

Disassembly:
	0x0322F020 B.LT 0x322F0AC
	0x0322F024 ADRP X8, 0xEF3000
	0x0322F028 LDR X8, [X8 + 0x2D0]
	0x0322F02C ADRP X27, 0xEF3000
	0x0322F030 ADRP X28, 0xEF3000
	0x0322F034 ADRP X29, 0xEF2000
	0x0322F038 LDR X1, [X8]
	0x0322F03C LDR X27, [X27 + 0x2C8]
	0x0322F040 LDR X28, [X28 + 0x2F8]
	0x0322F044 LDR X29, [X29 + 0x830]
	0x0322F048 MOV X0, X25
	0x0322F04C BL 0x25FBC40
	0x0322F050 LDR X2, [X27]
	0x0322F054 BL 0x2218CFC
	0x0322F058 LDR X1, [X28]
	0x0322F05C MOV X25, X0
	0x0322F060 MOV X0, X24
	0x0322F064 BL 0x25FB4C0
	0x0322F068 LDR X2, [X29]
	0x0322F06C BL 0x2218CF4
	0x0322F070 LDR X8, [X23]
	0x0322F074 ADD X1, X25, W22, 0x1, SXTW
	0x0322F078 ADD X3, X0, W21, UXTW
	0x0322F07C AND W5, W20, 0x1
	0x0322F080 LDP X7, X6, [X8 + 0x1B8]
	0x0322F084 MOV X0, X23

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11AE000
	007 Move X22, 0xECE000
	008 Move W8, [X21+927]
	009 Move X22, [X22+2536]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xECE000
	017 Move X0, [X0+2536]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+927], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+48]
	034 Call Convert.ToInt32, X0, X1
	035 Return X0

Method: System.UInt32 System.IConvertible.ToUInt32(System.IFormatProvider provider)

Disassembly:
	0x0322F088 MOV W2, W19
	0x0322F08C MOV W4, W26
	0x0322F090 LDP X20, X19, [X31 + 0x50]
	0x0322F094 LDP X22, X21, [X31 + 0x40]
	0x0322F098 LDP X24, X23, [X31 + 0x30]
	0x0322F09C LDP X26, X25, [X31 + 0x20]
	0x0322F0A0 LDP X28, X27, [X31 + 0x10]
	0x0322F0A4 LDP X29, X30, [X31], #0x60
	0x0322F0A8 BR X7
	0x0322F0AC ADRP X0, 0xECC000
	0x0322F0B0 LDR X0, [X0 + 0x760]
	0x0322F0B4 BL 0x1C16D08
	0x0322F0B8 BL 0x1C16F10
	0x0322F0BC MOV X19, X0
	0x0322F0C0 ADRP X0, 0xEF3000
	0x0322F0C4 LDR X0, [X0 + 0x300]
	0x0322F0C8 BL 0x1C16D08
	0x0322F0CC MOV X20, X0
	0x0322F0D0 ADRP X0, 0xEEC000
	0x0322F0D4 LDR X0, [X0 + 0x660]
	0x0322F0D8 B 0x322F1CC
	0x0322F0DC ADRP X8, 0xEF3000
	0x0322F0E0 ADRP X9, 0xEF3000
	0x0322F0E4 LDR X8, [X8 + 0x308]
	0x0322F0E8 LDR X9, [X9 + 0x2D8]
	0x0322F0EC CMP X25, 0x0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11AE000
	007 Move X22, 0xECE000
	008 Move W8, [X21+928]
	009 Move X22, [X22+2536]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xECE000
	017 Move X0, [X0+2536]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+928], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+48]
	034 Call Convert.ToUInt32, X0, X1
	035 Return X0

Method: System.Int64 System.IConvertible.ToInt64(System.IFormatProvider provider)

Disassembly:
	0x0322F0F0 CSEL X0, X9, X8, EQ
	0x0322F0F4 BL 0x1C16D08
	0x0322F0F8 MOV X19, X0
	0x0322F0FC ADRP X0, 0xEC9000
	0x0322F100 LDR X0, [X0 + 0x528]
	0x0322F104 BL 0x1C16D08
	0x0322F108 BL 0x1C16F10
	0x0322F10C MOV X20, X0
	0x0322F110 ADRP X0, 0xEF3000
	0x0322F114 LDR X0, [X0 + 0x2E0]
	0x0322F118 BL 0x1C16D08
	0x0322F11C MOV X2, X0
	0x0322F120 MOV X0, X20
	0x0322F124 MOV X1, X19
	0x0322F128 MOV X3, X31
	0x0322F12C BL 0x3315F7C
	0x0322F130 B 0x322F188
	0x0322F134 ADRP X8, 0xEF3000
	0x0322F138 ADRP X9, 0xEF3000
	0x0322F13C LDR X8, [X8 + 0x310]
	0x0322F140 LDR X9, [X9 + 0x318]
	0x0322F144 CMP W22, 0x0
	0x0322F148 CSEL X0, X9, X8, LT
	0x0322F14C BL 0x1C16D08
	0x0322F150 MOV X19, X0
	0x0322F154 ADRP X0, 0xECC000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11AE000
	007 Move X22, 0xECE000
	008 Move W8, [X21+929]
	009 Move X22, [X22+2536]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xECE000
	017 Move X0, [X0+2536]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+929], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+48]
	034 Call Convert.ToInt64, X0, X1
	035 Return X0

Method: System.UInt64 System.IConvertible.ToUInt64(System.IFormatProvider provider)

Disassembly:
	0x0322F158 LDR X0, [X0 + 0x760]
	0x0322F15C BL 0x1C16D08
	0x0322F160 BL 0x1C16F10
	0x0322F164 MOV X20, X0
	0x0322F168 ADRP X0, 0xEEC000
	0x0322F16C LDR X0, [X0 + 0x670]
	0x0322F170 BL 0x1C16D08
	0x0322F174 MOV X2, X0
	0x0322F178 MOV X0, X20
	0x0322F17C MOV X1, X19
	0x0322F180 MOV X3, X31
	0x0322F184 BL 0x3311888
	0x0322F188 ADRP X0, 0xEF3000
	0x0322F18C LDR X0, [X0 + 0x320]
	0x0322F190 BL 0x1C16D08
	0x0322F194 MOV X1, X0
	0x0322F198 MOV X0, X20
	0x0322F19C BL 0x1C16DEC
	0x0322F1A0 ADRP X0, 0xECC000
	0x0322F1A4 LDR X0, [X0 + 0x760]
	0x0322F1A8 BL 0x1C16D08
	0x0322F1AC BL 0x1C16F10
	0x0322F1B0 MOV X19, X0
	0x0322F1B4 ADRP X0, 0xEF3000
	0x0322F1B8 LDR X0, [X0 + 0x2D8]
	0x0322F1BC BL 0x1C16D08

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11AE000
	007 Move X22, 0xECE000
	008 Move W8, [X21+930]
	009 Move X22, [X22+2536]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xECE000
	017 Move X0, [X0+2536]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+930], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+48]
	034 Call Convert.ToUInt64, X0, X1
	035 Return X0

Method: System.Single System.IConvertible.ToSingle(System.IFormatProvider provider)

Disassembly:
	0x0322F1C0 MOV X20, X0
	0x0322F1C4 ADRP X0, 0xEF3000
	0x0322F1C8 LDR X0, [X0 + 0xE0]
	0x0322F1CC BL 0x1C16D08
	0x0322F1D0 MOV X2, X0
	0x0322F1D4 MOV X0, X19
	0x0322F1D8 MOV X1, X20
	0x0322F1DC MOV X3, X31
	0x0322F1E0 BL 0x3311888
	0x0322F1E4 ADRP X0, 0xEF3000
	0x0322F1E8 LDR X0, [X0 + 0x320]
	0x0322F1EC BL 0x1C16D08
	0x0322F1F0 MOV X1, X0
	0x0322F1F4 MOV X0, X19
	0x0322F1F8 BL 0x1C16DEC
	0x0322F1FC STR X30, [X31 - 0x20]!
	0x0322F200 STP X20, X19, [X31 + 0x10]
	0x0322F204 CBZ X1, 0x322F24C
	0x0322F208 CBZ X3, 0x322F24C
	0x0322F20C TBNZ X2, 0x1F, 0x322F2A4
	0x0322F210 TBNZ X4, 0x1F, 0x322F2A4
	0x0322F214 MOV X8, X0
	0x0322F218 LDR X0, [X0 + 0x28]
	0x0322F21C AND W9, W5, 0x1
	0x0322F220 STRB W9, [X8 + 0x30]
	0x0322F224 MOVZ W9, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11AE000
	007 Move X22, 0xECE000
	008 Move W8, [X21+931]
	009 Move X22, [X22+2536]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xECE000
	017 Move X0, [X0+2536]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+931], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+48]
	034 Call Convert.ToSingle, X0, X1
	035 Return V0

Method: System.Double System.IConvertible.ToDouble(System.IFormatProvider provider)

Disassembly:
	0x0322F228 STRB W9, [X8 + 0x31]
	0x0322F22C CBZ X0, 0x322F310
	0x0322F230 LDR X9, [X0]
	0x0322F234 LDP X20, X19, [X31 + 0x10]
	0x0322F238 MOV X5, X8
	0x0322F23C LDR X7, [X9 + 0x288]
	0x0322F240 LDR X6, [X9 + 0x290]
	0x0322F244 LDR X30, [X31], #0x20
	0x0322F248 BR X7
	0x0322F24C ADRP X8, 0xEF3000
	0x0322F250 ADRP X9, 0xEF3000
	0x0322F254 LDR X8, [X8 + 0x308]
	0x0322F258 LDR X9, [X9 + 0x2D8]
	0x0322F25C CMP X1, 0x0
	0x0322F260 CSEL X0, X9, X8, EQ
	0x0322F264 BL 0x1C16D08
	0x0322F268 MOV X19, X0
	0x0322F26C ADRP X0, 0xEC9000
	0x0322F270 LDR X0, [X0 + 0x528]
	0x0322F274 BL 0x1C16D08
	0x0322F278 BL 0x1C16F10
	0x0322F27C MOV X20, X0
	0x0322F280 ADRP X0, 0xEF3000
	0x0322F284 LDR X0, [X0 + 0x2E0]
	0x0322F288 BL 0x1C16D08
	0x0322F28C MOV X2, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11AE000
	007 Move X22, 0xECE000
	008 Move W8, [X21+932]
	009 Move X22, [X22+2536]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xECE000
	017 Move X0, [X0+2536]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+932], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+48]
	034 Call Convert.ToDouble, X0, X1
	035 Return V0

Method: System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider provider)

Disassembly:
	0x0322F290 MOV X0, X20
	0x0322F294 MOV X1, X19
	0x0322F298 MOV X3, X31
	0x0322F29C BL 0x3315F7C
	0x0322F2A0 B 0x322F2F8
	0x0322F2A4 ADRP X8, 0xEF3000
	0x0322F2A8 ADRP X9, 0xEF3000
	0x0322F2AC LDR X8, [X8 + 0x310]
	0x0322F2B0 LDR X9, [X9 + 0x328]
	0x0322F2B4 CMP W4, 0x0
	0x0322F2B8 CSEL X0, X9, X8, LT
	0x0322F2BC BL 0x1C16D08
	0x0322F2C0 MOV X19, X0
	0x0322F2C4 ADRP X0, 0xECC000
	0x0322F2C8 LDR X0, [X0 + 0x760]
	0x0322F2CC BL 0x1C16D08
	0x0322F2D0 BL 0x1C16F10
	0x0322F2D4 MOV X20, X0
	0x0322F2D8 ADRP X0, 0xEEC000
	0x0322F2DC LDR X0, [X0 + 0x670]
	0x0322F2E0 BL 0x1C16D08
	0x0322F2E4 MOV X2, X0
	0x0322F2E8 MOV X0, X20
	0x0322F2EC MOV X1, X19
	0x0322F2F0 MOV X3, X31
	0x0322F2F4 BL 0x3311888

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11AE000
	007 Move X22, 0xECE000
	008 Move W8, [X21+933]
	009 Move X22, [X22+2536]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xECE000
	017 Move X0, [X0+2536]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+933], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+48]
	034 Call Convert.ToDecimal, X0, X1
	035 Return X0

Method: System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider)

Disassembly:
	0x0322F2F8 ADRP X0, 0xEF3000
	0x0322F2FC LDR X0, [X0 + 0x330]
	0x0322F300 BL 0x1C16D08
	0x0322F304 MOV X1, X0
	0x0322F308 MOV X0, X20
	0x0322F30C BL 0x1C16DEC
	0x0322F310 BL 0x1C16F20
	0x0322F314 LDR X0, [X0 + 0x28]
	0x0322F318 RET
	0x0322F31C LDRB W0, [X0 + 0x30]
	0x0322F320 RET
	0x0322F324 STRB W31, [X0 + 0x30]
	0x0322F328 RET
	0x0322F32C STP X30, X21, [X31 - 0x20]!
	0x0322F330 STP X20, X19, [X31 + 0x10]
	0x0322F334 ADRP X20, 0x11AD000
	0x0322F338 ADRP X21, 0xEF2000
	0x0322F33C LDRB W8, [X20 + 0x3AF]
	0x0322F340 LDR X21, [X21 + 0x990]
	0x0322F344 MOV X19, X0
	0x0322F348 TBNZ X8, 0x0, 0x322F360
	0x0322F34C ADRP X0, 0xEF2000
	0x0322F350 LDR X0, [X0 + 0x990]
	0x0322F354 BL 0x1C16CF4
	0x0322F358 MOVZ W8, 0x1
	0x0322F35C STRB W8, [X20 + 0x3AF]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11AE000
	007 Move X22, 0xECE000
	008 Move W8, [X21+934]
	009 Move X22, [X22+2536]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xECE000
	017 Move X0, [X0+2536]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+934], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+48]
	034 Call Convert.ToDateTime, X0, X1
	035 Return X0

Method: System.Object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider)

Disassembly:
	0x0322F360 LDR X1, [X21]
	0x0322F364 MOV X0, X19
	0x0322F368 LDP X20, X19, [X31 + 0x10]
	0x0322F36C LDP X30, X21, [X31], #0x20
	0x0322F370 B 0x322F374
	0x0322F374 STP X30, X23, [X31 - 0x30]!
	0x0322F378 STP X22, X21, [X31 + 0x10]
	0x0322F37C STP X20, X19, [X31 + 0x20]
	0x0322F380 ADRP X21, 0x11AD000
	0x0322F384 LDRB W8, [X21 + 0x3B2]
	0x0322F388 MOV X19, X1
	0x0322F38C MOV X20, X0
	0x0322F390 TBNZ X8, 0x0, 0x322F3A8
	0x0322F394 ADRP X0, 0xEC6000
	0x0322F398 LDR X0, [X0 + 0x170]
	0x0322F39C BL 0x1C16CF4
	0x0322F3A0 MOVZ W8, 0x1
	0x0322F3A4 STRB W8, [X21 + 0x3B2]
	0x0322F3A8 MOV X0, X20
	0x0322F3AC MOV X1, X31
	0x0322F3B0 BL 0x33FEFF0
	0x0322F3B4 CBZ X19, 0x322F4D4
	0x0322F3B8 LDR W8, [X19 + 0x10]
	0x0322F3BC CMP W8, 0x1
	0x0322F3C0 B.LT 0x322F458
	0x0322F3C4 ADRP X22, 0xEC6000
	0x0322F3C8 LDR X22, [X22 + 0x170]
	0x0322F3CC MOV W23, W31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x11AE000
	008 Move X23, 0xECE000
	009 Move W8, [X22+935]
	010 Move X23, [X23+2536]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xECE000
	019 Move X0, [X0+2536]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+935], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X21
	029 Move X1, X20
	030 Move X2, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X3, X31
	036 Move X30, [X31+48]
	037 Move X23, [X31+56]
	038 Call Convert.DefaultToType, X0, X1, X2
	039 Return X0

Method: System.String Normalize(System.Text.NormalizationForm normalizationForm)

Disassembly:
	0x0322F3D0 MOV W21, W31
	0x0322F3D4 LDR X0, [X22]
	0x0322F3D8 LDR W8, [X0 + 0xE0]
	0x0322F3DC CBNZ W8, 0x322F3E4
	0x0322F3E0 BL 0x1C16DFC
	0x0322F3E4 MOV X0, X19
	0x0322F3E8 MOV W1, W21
	0x0322F3EC MOV X2, X31
	0x0322F3F0 BL 0x331BBB4
	0x0322F3F4 TBZ X0, 0x0, 0x322F438
	0x0322F3F8 LDR X0, [X22]
	0x0322F3FC LDR W8, [X0 + 0xE0]
	0x0322F400 CBNZ W8, 0x322F408
	0x0322F404 BL 0x1C16DFC
	0x0322F408 MOV X0, X19
	0x0322F40C MOV W1, W21
	0x0322F410 MOV X2, X31
	0x0322F414 BL 0x331BFFC
	0x0322F418 TBZ X0, 0x0, 0x322F440
	0x0322F41C TBNZ X23, 0x0, 0x322F46C
	0x0322F420 LDR W8, [X19 + 0x10]
	0x0322F424 ADD W21, W21, 0x1
	0x0322F428 MOVZ W23, 0x1
	0x0322F42C CMP W21, W8
	0x0322F430 B.LT 0x322F3D4
	0x0322F434 B 0x322F46C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11AE000
	007 Move X22, 0xEF4000
	008 Move W8, [X21+936]
	009 Move X22, [X22+696]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEF4000
	017 Move X0, [X0+696]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+936], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move W1, W19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+48]
	034 Call Normalization.Normalize, X0, X1
	035 Return X0

Method: System.Int32 get_Length()

Disassembly:
	0x0322F438 TBZ X23, 0x0, 0x322F444
	0x0322F43C B 0x322F46C

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Int32 IndexOfUnchecked(System.String value, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x0322F440 TBZ X23, 0x0, 0x322F46C
	0x0322F444 LDR W8, [X19 + 0x10]
	0x0322F448 ADD W21, W21, 0x1
	0x0322F44C MOV W23, W31
	0x0322F450 CMP W21, W8
	0x0322F454 B.LT 0x322F3D4
	0x0322F458 STR X19, [X20 + 0x10]
	0x0322F45C LDP X20, X19, [X31 + 0x20]
	0x0322F460 LDP X22, X21, [X31 + 0x10]
	0x0322F464 LDP X30, X23, [X31], #0x30
	0x0322F468 RET
	0x0322F46C ADRP X0, 0xEF3000
	0x0322F470 LDR X0, [X0 + 0x338]
	0x0322F474 BL 0x1C16D08
	0x0322F478 MOV X19, X0
	0x0322F47C ADRP X0, 0xEF3000
	0x0322F480 LDR X0, [X0 + 0x340]
	0x0322F484 BL 0x1C16D08
	0x0322F488 MOV X1, X0
	0x0322F48C MOV X0, X19
	0x0322F490 MOV X2, X31
	0x0322F494 BL 0x32094D4
	0x0322F498 MOV X19, X0
	0x0322F49C ADRP X0, 0xECC000
	0x0322F4A0 LDR X0, [X0 + 0x578]
	0x0322F4A4 BL 0x1C16D08
	0x0322F4A8 BL 0x1C16F10
	0x0322F4AC MOV X1, X19
	0x0322F4B0 MOV X2, X31
	0x0322F4B4 MOV X20, X0
	0x0322F4B8 BL 0x3314A68
	0x0322F4BC ADRP X0, 0xEF3000
	0x0322F4C0 LDR X0, [X0 + 0x348]
	0x0322F4C4 BL 0x1C16D08
	0x0322F4C8 MOV X1, X0
	0x0322F4CC MOV X0, X20
	0x0322F4D0 BL 0x1C16DEC
	0x0322F4D4 ADRP X0, 0xEC9000
	0x0322F4D8 LDR X0, [X0 + 0x528]
	0x0322F4DC BL 0x1C16D08
	0x0322F4E0 BL 0x1C16F10
	0x0322F4E4 MOV X19, X0
	0x0322F4E8 ADRP X0, 0xEF3000
	0x0322F4EC LDR X0, [X0 + 0x340]
	0x0322F4F0 BL 0x1C16D08
	0x0322F4F4 MOV X1, X0
	0x0322F4F8 MOV X0, X19
	0x0322F4FC MOV X2, X31
	0x0322F500 BL 0x330E100
	0x0322F504 ADRP X0, 0xEF3000
	0x0322F508 LDR X0, [X0 + 0x348]
	0x0322F50C BL 0x1C16D08
	0x0322F510 MOV X1, X0
	0x0322F514 MOV X0, X19
	0x0322F518 BL 0x1C16DEC
	0x0322F51C STP X30, X21, [X31 - 0x20]!
	0x0322F520 STP X20, X19, [X31 + 0x10]
	0x0322F524 ADRP X21, 0x11AD000
	0x0322F528 LDRB W8, [X21 + 0x3B0]
	0x0322F52C MOV X20, X1
	0x0322F530 MOV X19, X0
	0x0322F534 TBNZ X8, 0x0, 0x322F54C
	0x0322F538 ADRP X0, 0xEF3000
	0x0322F53C LDR X0, [X0 + 0x350]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Compare X1, 0
	008 JumpIfEqual {68}
	009 NotImplemented "Instruction LDRSW not yet implemented."
	010 Move W21, W3
	011 Move X20, X1
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W19, W2
	014 Compare W22, 0
	015 JumpIfEqual {28}
	016 Add X23, X0, 20
	017 Move X0, X31
	018 Call RuntimeHelpers.get_OffsetToStringData
	019 Move X9, W21
	020 Add X8, X23, W19
	021 Subtract X9, X9, X22
	022 Add X9, X8, X9
	023 Add X9, X9, 2
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move TEMP, 0
	026 Not TEMP
	027 Move W19, TEMP
	028 Move W0, W19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X22, [X31+16]
	032 Move X21, [X31+24]
	033 Move X30, [X31+48]
	034 Move X23, [X31+56]
	035 Return X0
	036 Move X10, W0
	037 Add X10, X20, X10
	038 NotImplemented "Instruction LDRH not yet implemented."
	039 NotImplemented "Instruction SBFM not yet implemented."
	040 And X13, X22, 0
	041 Add X12, X23, X12
	042 Add X12, X12, 2
	043 Subtract X13, X13, 1
	044 NotImplemented "Instruction LDRH not yet implemented."
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X14, X13
	048 Move X15, X10
	049 Move X16, X12
	050 NotImplemented "Instruction LDRH not yet implemented."
	051 NotImplemented "Instruction LDRH not yet implemented."
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Add X16, X16, 2
	054 Subtract X14, X14, 1
	055 Add X15, X15, 2
	056 Add X8, X8, 2
	057 Add X12, X12, 2
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move TEMP, 0
	060 Not TEMP
	061 Move W19, TEMP
	062 Subtract X8, X8, X23
	063 NotImplemented "Instruction CMP not yet implemented."
	064 NotImplemented "Instruction CINC not yet implemented."
	065 Move X19, X8
	066 ShiftRight X19, 1
	067 And X19, X19, 0x7FFFFFFF
	068 Call 0x1C17F20

Method: System.Int32 IndexOfUncheckedIgnoreCase(System.String value, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x0322F540 BL 0x1C16CF4
	0x0322F544 MOVZ W8, 0x1
	0x0322F548 STRB W8, [X21 + 0x3B0]
	0x0322F54C MOV X0, X19
	0x0322F550 MOV X1, X31
	0x0322F554 BL 0x33FEFF0
	0x0322F558 CBZ X20, 0x322F584
	0x0322F55C ADRP X8, 0xEF3000
	0x0322F560 LDR X8, [X8 + 0x350]
	0x0322F564 LDR X1, [X8]
	0x0322F568 MOV X0, X20
	0x0322F56C MOV X2, X31
	0x0322F570 BL 0x32A9F64
	0x0322F574 STR X0, [X19 + 0x10]
	0x0322F578 LDP X20, X19, [X31 + 0x10]
	0x0322F57C LDP X30, X21, [X31], #0x20
	0x0322F580 RET
	0x0322F584 BL 0x1C16F20
	0x0322F588 B 0x322F58C
	0x0322F58C MOV X21, X0
	0x0322F590 CMP W1, 0x1
	0x0322F594 B.NE 0x322F614
	0x0322F598 MOV X0, X21
	0x0322F59C BL 0x3EB1AD0
	0x0322F5A0 MOV X21, X0
	0x0322F5A4 ADRP X0, 0xECA000
	0x0322F5A8 LDR X0, [X0 + 0xCC0]
	0x0322F5AC BL 0x1C16D08
	0x0322F5B0 LDR X8, [X21]
	0x0322F5B4 LDR X1, [X8]
	0x0322F5B8 BL 0x1C17270
	0x0322F5BC TBZ X0, 0x0, 0x322F5E8
	0x0322F5C0 BL 0x3EB1AE0
	0x0322F5C4 CBZ X20, 0x322F608
	0x0322F5C8 ADRP X0, 0xEF3000
	0x0322F5CC LDR X0, [X0 + 0x358]
	0x0322F5D0 BL 0x1C16D08
	0x0322F5D4 MOV X1, X0
	0x0322F5D8 MOV X0, X20
	0x0322F5DC MOV X2, X31
	0x0322F5E0 BL 0x32A9F64
	0x0322F5E4 B 0x322F574
	0x0322F5E8 MOVZ W0, 0x8
	0x0322F5EC BL 0x3EB1AF0
	0x0322F5F0 LDR X8, [X21]
	0x0322F5F4 STR X8, [X0]
	0x0322F5F8 ADRP X1, 0xC85000
	0x0322F5FC ADD X1, X1, 0xE58
	0x0322F600 MOV X2, X31
	0x0322F604 BL 0x3EB1B00
	0x0322F608 BL 0x1C16F20
	0x0322F60C MOV X21, X0
	0x0322F610 BL 0x3EB1AE0
	0x0322F614 MOV X0, X21
	0x0322F618 BL 0x1D2C690
	0x0322F61C BL 0x1990590
	0x0322F620 STP X30, X21, [X31 - 0x20]!
	0x0322F624 STP X20, X19, [X31 + 0x10]
	0x0322F628 ADRP X21, 0x11AD000
	0x0322F62C LDRB W8, [X21 + 0x3B1]
	0x0322F630 MOV X19, X1
	0x0322F634 MOV X20, X0
	0x0322F638 TBNZ X8, 0x0, 0x322F650
	0x0322F63C ADRP X0, 0xEF3000
	0x0322F640 LDR X0, [X0 + 0x350]
	0x0322F644 BL 0x1C16CF4
	0x0322F648 MOVZ W8, 0x1
	0x0322F64C STRB W8, [X21 + 0x3B1]
	0x0322F650 CBZ X19, 0x322F678
	0x0322F654 ADRP X8, 0xEF3000
	0x0322F658 LDR X8, [X8 + 0x350]
	0x0322F65C LDR X2, [X20 + 0x10]
	0x0322F660 MOV X0, X19
	0x0322F664 LDP X20, X19, [X31 + 0x10]
	0x0322F668 LDR X1, [X8]
	0x0322F66C MOV X3, X31
	0x0322F670 LDP X30, X21, [X31], #0x20
	0x0322F674 B 0x32A8BF0
	0x0322F678 BL 0x1C16F20
	0x0322F67C LDR X0, [X0 + 0x10]
	0x0322F680 RET
	0x0322F684 STP X30, X21, [X31 - 0x20]!
	0x0322F688 STP X20, X19, [X31 + 0x10]
	0x0322F68C ADRP X20, 0x11AD000
	0x0322F690 ADRP X21, 0xEF3000
	0x0322F694 LDRB W8, [X20 + 0x3B3]
	0x0322F698 LDR X21, [X21 + 0x360]
	0x0322F69C MOV X19, X0
	0x0322F6A0 TBNZ X8, 0x0, 0x322F6B8
	0x0322F6A4 ADRP X0, 0xEF3000
	0x0322F6A8 LDR X0, [X0 + 0x360]
	0x0322F6AC BL 0x1C16CF4
	0x0322F6B0 MOVZ W8, 0x1
	0x0322F6B4 STRB W8, [X20 + 0x3B3]
	0x0322F6B8 LDR X0, [X21]
	0x0322F6BC BL 0x1C16F10
	0x0322F6C0 MOV X1, X19
	0x0322F6C4 MOV X20, X0
	0x0322F6C8 BL 0x322F6DC
	0x0322F6CC MOV X0, X20
	0x0322F6D0 LDP X20, X19, [X31 + 0x10]
	0x0322F6D4 LDP X30, X21, [X31], #0x20
	0x0322F6D8 RET
	0x0322F6DC STR X30, [X31 - 0x20]!
	0x0322F6E0 STP X20, X19, [X31 + 0x10]
	0x0322F6E4 MOV X20, X1
	0x0322F6E8 MOVI V0.2D, 0xFFFFFFFFFFFFFFFF
	0x0322F6EC MOV X1, X31
	0x0322F6F0 MOV X19, X0
	0x0322F6F4 STR D0, [X0 + 0x38]
	0x0322F6F8 BL 0x33FF2F8
	0x0322F6FC CBZ X20, 0x322F720
	0x0322F700 LDR X0, [X20 + 0x10]
	0x0322F704 MOV X2, X31
	0x0322F708 MOV X1, X0

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X19, 0x11AE000
	015 Move W8, [X19+937]
	016 Move W22, W3
	017 Move W20, W2
	018 Move X21, X1
	019 Move X23, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0xEC7000
	025 Move X0, [X0+3144]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X19+937], W8
	029 Compare X21, 0
	030 JumpIfEqual {138}
	031 NotImplemented "Instruction LDRSW not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Compare W24, 0
	034 JumpIfEqual {72}
	035 Move X8, 0xEC7000
	036 Move X8, [X8+3144]
	037 Move X0, [X8]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X31
	043 Call CultureInfo.get_InvariantCulture
	044 Compare X0, 0
	045 JumpIfEqual {138}
	046 Move X8, [X0]
	047 Move X9, [X8+472]
	048 Move X1, [X8+480]
	049 NotImplemented "Instruction BLR not yet implemented."
	050 Move X19, X0
	051 Move X0, X31
	052 Call RuntimeHelpers.get_OffsetToStringData
	053 Compare X19, 0
	054 JumpIfEqual {138}
	055 Move X8, [X19]
	056 Move X27, W0
	057 NotImplemented "Instruction LDRH not yet implemented."
	058 Add X23, X23, 20
	059 Move X10, [X8+456]
	060 Move X2, [X8+464]
	061 Move X9, W22
	062 Add X25, X23, W20
	063 Subtract X8, X9, X24
	064 Add X8, X25, X8
	065 Move X0, X19
	066 Add X26, X8, 2
	067 NotImplemented "Instruction BLR not yet implemented."
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move TEMP, 0
	070 Not TEMP
	071 Move W20, TEMP
	072 Move W0, W20
	073 Move X20, [X31+96]
	074 Move X19, [X31+104]
	075 Move X22, [X31+80]
	076 Move X21, [X31+88]
	077 Move X24, [X31+64]
	078 Move X23, [X31+72]
	079 Move X26, [X31+48]
	080 Move X25, [X31+56]
	081 Move X28, [X31+32]
	082 Move X27, [X31+40]
	083 Move X29, [X31+16]
	084 Move X30, [X31+24]
	085 Add X31, X31, 112
	086 Return X0
	087 NotImplemented "Instruction SBFM not yet implemented."
	088 And X9, X24, 0
	089 Add X10, X21, X27
	090 Add X8, X23, X8
	091 Move W22, W0
	092 Add X10, X10, 2
	093 Add X21, X8, 2
	094 Subtract X8, X9, 1
	095 Move [X31], X8
	096 Move [X31+8], X10
	097 Move X8, [X19]
	098 NotImplemented "Instruction LDRH not yet implemented."
	099 Move X0, X19
	100 Move X9, [X8+456]
	101 Move X2, [X8+464]
	102 NotImplemented "Instruction BLR not yet implemented."
	103 And W8, W0, 0xFFFF
	104 NotImplemented "Instruction CMP not yet implemented."
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move X20, [X31]
	107 Move X29, [X31+8]
	108 Move X27, X21
	109 Move X8, [X19]
	110 NotImplemented "Instruction LDRH not yet implemented."
	111 Move X0, X19
	112 Move X9, [X8+456]
	113 Move X2, [X8+464]
	114 NotImplemented "Instruction BLR not yet implemented."
	115 Move X8, [X19]
	116 NotImplemented "Instruction LDRH not yet implemented."
	117 And W28, W0, 0xFFFF
	118 Move X0, X19
	119 Move X9, [X8+456]
	120 Move X2, [X8+464]
	121 NotImplemented "Instruction BLR not yet implemented."
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Add X27, X27, 2
	124 Subtract X20, X20, 1
	125 Add X29, X29, 2
	126 Add X25, X25, 2
	127 Add X21, X21, 2
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move TEMP, 0
	130 Not TEMP
	131 Move W20, TEMP
	132 Subtract X8, X25, X23
	133 NotImplemented "Instruction CMP not yet implemented."
	134 NotImplemented "Instruction CINC not yet implemented."
	135 Move X20, X8
	136 ShiftRight X20, 1
	137 And X20, X20, 0x7FFFFFFF
	138 Call 0x1C17F20

Method: System.Int32 LastIndexOfUnchecked(System.String value, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x0322F70C BL 0x321B938
	0x0322F710 STR X0, [X19 + 0x30]
	0x0322F714 LDP X20, X19, [X31 + 0x10]
	0x0322F718 LDR X30, [X31], #0x20
	0x0322F71C RET
	0x0322F720 BL 0x1C16F20
	0x0322F724 STR X30, [X31 - 0x10]!
	0x0322F728 LDR X8, [X0 + 0x10]
	0x0322F72C CBZ X8, 0x322F73C
	0x0322F730 LDR W0, [X8 + 0x10]
	0x0322F734 LDR X30, [X31], #0x10
	0x0322F738 RET
	0x0322F73C BL 0x1C16F20
	0x0322F740 STP X30, X21, [X31 - 0x20]!
	0x0322F744 STP X20, X19, [X31 + 0x10]
	0x0322F748 ADRP X21, 0x11AD000
	0x0322F74C LDRB W8, [X21 + 0x3B4]
	0x0322F750 MOV X20, X1
	0x0322F754 MOV X19, X0
	0x0322F758 TBNZ X8, 0x0, 0x322F770
	0x0322F75C ADRP X0, 0xEF3000
	0x0322F760 LDR X0, [X0 + 0x368]
	0x0322F764 BL 0x1C16CF4
	0x0322F768 MOVZ W8, 0x1
	0x0322F76C STRB W8, [X21 + 0x3B4]
	0x0322F770 CBZ X20, 0x322F790
	0x0322F774 ADRP X8, 0xEF3000
	0x0322F778 LDR X8, [X8 + 0x368]
	0x0322F77C LDR X9, [X20]
	0x0322F780 LDR X8, [X8]
	0x0322F784 CMP X9, X8
	0x0322F788 CSEL X8, X20, X31, EQ
	0x0322F78C B.EQ 0x322F7A0
	0x0322F790 LDP X20, X19, [X31 + 0x10]
	0x0322F794 MOV W0, W31
	0x0322F798 LDP X30, X21, [X31], #0x20
	0x0322F79C RET
	0x0322F7A0 CBZ X8, 0x322F7BC
	0x0322F7A4 LDR X0, [X19 + 0x10]
	0x0322F7A8 LDR X1, [X8 + 0x10]
	0x0322F7AC LDP X20, X19, [X31 + 0x10]
	0x0322F7B0 MOV X2, X31
	0x0322F7B4 LDP X30, X21, [X31], #0x20
	0x0322F7B8 B 0x321BA08
	0x0322F7BC BL 0x1C16F20
	0x0322F7C0 STR X30, [X31 - 0x10]!
	0x0322F7C4 LDR X0, [X0 + 0x10]
	0x0322F7C8 CBZ X0, 0x322F7DC
	0x0322F7CC LDR X8, [X0]
	0x0322F7D0 LDP X2, X1, [X8 + 0x158]
	0x0322F7D4 LDR X30, [X31], #0x10
	0x0322F7D8 BR X2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Compare X1, 0
	008 JumpIfEqual {60}
	009 NotImplemented "Instruction LDRSW not yet implemented."
	010 Move W21, W3
	011 Move X20, X1
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W19, W2
	014 Compare W23, 0
	015 JumpIfEqual {30}
	016 Add X22, X0, 20
	017 Move X0, X31
	018 Call RuntimeHelpers.get_OffsetToStringData
	019 Move X9, X23
	020 ShiftRight X9, 63
	021 And X9, X9, 0x3FFFFFFF
	022 Add X8, X22, W19
	023 Subtract X11, X9, 2
	024 Add X9, X11, X8
	025 Subtract X9, X9, W21
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move TEMP, 0
	028 Not TEMP
	029 Move W19, TEMP
	030 Move W0, W19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Move X23, [X31+56]
	037 Return X0
	038 Add X10, X20, W0
	039 Add X11, X11, X10
	040 NotImplemented "Instruction LDRH not yet implemented."
	041 NotImplemented "Instruction LDRH not yet implemented."
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X14, X11
	044 Move X13, X8
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction LDRH not yet implemented."
	047 NotImplemented "Instruction LDRH not yet implemented."
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Subtract X8, X8, 2
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move TEMP, 0
	052 Not TEMP
	053 Move W19, TEMP
	054 Subtract X8, X13, X22
	055 NotImplemented "Instruction CMP not yet implemented."
	056 NotImplemented "Instruction CINC not yet implemented."
	057 Move X19, X8
	058 ShiftRight X19, 1
	059 And X19, X19, 0x7FFFFFFF
	060 Call 0x1C17F20

Method: System.Int32 LastIndexOfUncheckedIgnoreCase(System.String value, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x0322F7DC BL 0x1C16F20
	0x0322F7E0 STR X30, [X31 - 0x30]!
	0x0322F7E4 STP X22, X21, [X31 + 0x10]
	0x0322F7E8 STP X20, X19, [X31 + 0x20]
	0x0322F7EC ADRP X21, 0x11AD000
	0x0322F7F0 LDRB W8, [X21 + 0x3B5]
	0x0322F7F4 MOV W20, W1
	0x0322F7F8 MOV X19, X0
	0x0322F7FC TBNZ X8, 0x0, 0x322F814
	0x0322F800 ADRP X0, 0xEC6000
	0x0322F804 LDR X0, [X0 + 0x170]
	0x0322F808 BL 0x1C16CF4
	0x0322F80C MOVZ W8, 0x1
	0x0322F810 STRB W8, [X21 + 0x3B5]
	0x0322F814 LDR W8, [X19 + 0x38]
	0x0322F818 CMP W8, 0x1
	0x0322F81C B.LT 0x322F8F0
	0x0322F820 ADRP X22, 0xEC6000
	0x0322F824 LDR X22, [X22 + 0x170]
	0x0322F828 LDR X0, [X22]
	0x0322F82C LDR W8, [X0 + 0xE0]
	0x0322F830 CBNZ W8, 0x322F838
	0x0322F834 BL 0x1C16DFC
	0x0322F838 MOV W0, W20
	0x0322F83C MOV X1, X31
	0x0322F840 BL 0x331BFEC
	0x0322F844 TBZ X0, 0x0, 0x322F8E0
	0x0322F848 LDR W8, [X19 + 0x38]
	0x0322F84C TBNZ X8, 0x1F, 0x322F8E0
	0x0322F850 LDR X0, [X19 + 0x30]
	0x0322F854 CBZ X0, 0x322F92C
	0x0322F858 LDR W8, [X19 + 0x3C]
	0x0322F85C MOV X2, X31
	0x0322F860 ADD W1, W8, 0x1
	0x0322F864 BL 0x3222A1C
	0x0322F868 LDR X8, [X22]
	0x0322F86C MOV W21, W0
	0x0322F870 LDR W9, [X8 + 0xE0]
	0x0322F874 CBNZ W9, 0x322F880
	0x0322F878 MOV X0, X8
	0x0322F87C BL 0x1C16DFC
	0x0322F880 MOV W0, W21
	0x0322F884 MOV X1, X31
	0x0322F888 BL 0x331C0FC
	0x0322F88C TBZ X0, 0x0, 0x322F8E0
	0x0322F890 LDR X0, [X19 + 0x30]
	0x0322F894 CBZ X0, 0x322F92C
	0x0322F898 LDR W8, [X19 + 0x3C]
	0x0322F89C MOV X2, X31
	0x0322F8A0 ADD W1, W8, 0x1
	0x0322F8A4 BL 0x3222A1C
	0x0322F8A8 LDR X8, [X22]
	0x0322F8AC MOV W21, W0
	0x0322F8B0 LDR W9, [X8 + 0xE0]
	0x0322F8B4 CBNZ W9, 0x322F8C0
	0x0322F8B8 MOV X0, X8
	0x0322F8BC BL 0x1C16DFC
	0x0322F8C0 MOV W0, W20
	0x0322F8C4 MOV W1, W21
	0x0322F8C8 MOV X2, X31
	0x0322F8CC BL 0x331C12C
	0x0322F8D0 MOV W1, W0
	0x0322F8D4 MOV X0, X19
	0x0322F8D8 MOV X2, X31
	0x0322F8DC BL 0x33FFF50
	0x0322F8E0 AND W1, W20, 0xFFFF
	0x0322F8E4 MOV X0, X19
	0x0322F8E8 MOV X2, X31
	0x0322F8EC BL 0x33FFF50
	0x0322F8F0 LDR X8, [X19 + 0x30]
	0x0322F8F4 CBZ X8, 0x322F92C
	0x0322F8F8 LDR W8, [X8 + 0x10]
	0x0322F8FC MOVN W9, 0x0
	0x0322F900 LDP X22, X21, [X31 + 0x10]
	0x0322F904 CMP W8, 0x0
	0x0322F908 ADD W10, W8, 0x1
	0x0322F90C CINC W8, W8, LT
	0x0322F910 SBFM W8, W8, 0x1, 0x1F
	0x0322F914 STP W8, W9, [X19 + 0x38]
	0x0322F918 LDP X20, X19, [X31 + 0x20]
	0x0322F91C CMP W10, 0x2
	0x0322F920 CSET W0, HI
	0x0322F924 LDR X30, [X31], #0x30
	0x0322F928 RET
	0x0322F92C BL 0x1C16F20
	0x0322F930 SUB X31, X31, 0x40
	0x0322F934 STP X30, X23, [X31 + 0x10]
	0x0322F938 STP X22, X21, [X31 + 0x20]
	0x0322F93C STP X20, X19, [X31 + 0x30]
	0x0322F940 ADRP X23, 0x11AD000
	0x0322F944 ADRP X22, 0xEC6000
	0x0322F948 LDRB W8, [X23 + 0x3B6]
	0x0322F94C LDR X22, [X22 + 0x170]
	0x0322F950 MOV W20, W2
	0x0322F954 MOV W21, W1
	0x0322F958 MOV X19, X0
	0x0322F95C TBNZ X8, 0x0, 0x322F974
	0x0322F960 ADRP X0, 0xEC6000
	0x0322F964 LDR X0, [X0 + 0x170]
	0x0322F968 BL 0x1C16CF4

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X19, 0x11AE000
	013 Move W8, [X19+938]
	014 Move W21, W3
	015 Move W20, W2
	016 Move X22, X1
	017 Move X23, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xEC7000
	023 Move X0, [X0+3144]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X19+938], W8
	027 Compare X22, 0
	028 JumpIfEqual {123}
	029 NotImplemented "Instruction LDRSW not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Compare W24, 0
	032 JumpIfEqual {73}
	033 Move X8, 0xEC7000
	034 Move X8, [X8+3144]
	035 Move X0, [X8]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X31
	041 Call CultureInfo.get_InvariantCulture
	042 Compare X0, 0
	043 JumpIfEqual {123}
	044 Move X8, [X0]
	045 Move X9, [X8+472]
	046 Move X1, [X8+480]
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Move X19, X0
	049 Move X0, X31
	050 Call RuntimeHelpers.get_OffsetToStringData
	051 Compare X19, 0
	052 JumpIfEqual {123}
	053 Move X8, [X19]
	054 Move X9, X24
	055 ShiftRight X9, 63
	056 And X9, X9, 0x3FFFFFFF
	057 Add X22, X22, W0
	058 Subtract X9, X9, 2
	059 Add X24, X9, X22
	060 Move X10, [X8+456]
	061 Move X2, [X8+464]
	062 NotImplemented "Instruction LDRH not yet implemented."
	063 Add X23, X23, 20
	064 Add X25, X23, W20
	065 Add X8, X9, X25
	066 Move X0, X19
	067 Subtract X26, X8, W21
	068 NotImplemented "Instruction BLR not yet implemented."
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move TEMP, 0
	071 Not TEMP
	072 Move W20, TEMP
	073 Move W0, W20
	074 Move X20, [X31+80]
	075 Move X19, [X31+88]
	076 Move X22, [X31+64]
	077 Move X21, [X31+72]
	078 Move X24, [X31+48]
	079 Move X23, [X31+56]
	080 Move X26, [X31+32]
	081 Move X25, [X31+40]
	082 Move X28, [X31+16]
	083 Move X27, [X31+24]
	084 Move X30, [X31+96]
	085 Return X0
	086 Move W21, W0
	087 Move X8, [X19]
	088 NotImplemented "Instruction LDRH not yet implemented."
	089 Move X0, X19
	090 Move X9, [X8+456]
	091 Move X2, [X8+464]
	092 NotImplemented "Instruction BLR not yet implemented."
	093 And W8, W0, 0xFFFF
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move X27, X24
	096 Move X20, X25
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move X8, [X19]
	099 Move X0, X19
	100 Move X9, [X8+456]
	101 Move X2, [X8+464]
	102 NotImplemented "Instruction LDRH not yet implemented."
	103 NotImplemented "Instruction BLR not yet implemented."
	104 NotImplemented "Instruction LDRH not yet implemented."
	105 Move X8, [X19]
	106 And W28, W0, 0xFFFF
	107 Move X0, X19
	108 Move X9, [X8+456]
	109 Move X2, [X8+464]
	110 NotImplemented "Instruction BLR not yet implemented."
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Subtract X25, X25, 2
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move TEMP, 0
	115 Not TEMP
	116 Move W20, TEMP
	117 Subtract X8, X20, X23
	118 NotImplemented "Instruction CMP not yet implemented."
	119 NotImplemented "Instruction CINC not yet implemented."
	120 Move X20, X8
	121 ShiftRight X20, 1
	122 And X20, X20, 0x7FFFFFFF
	123 Call 0x1C17F20

Method: System.Boolean StartsWithOrdinalUnchecked(System.String value)

Disassembly:
	0x0322F96C MOVZ W8, 0x1
	0x0322F970 STRB W8, [X23 + 0x3B6]
	0x0322F974 LDR X0, [X22]
	0x0322F978 LDR W8, [X0 + 0xE0]
	0x0322F97C CBNZ W8, 0x322F984
	0x0322F980 BL 0x1C16DFC
	0x0322F984 MOV W0, W21
	0x0322F988 MOV X1, X31
	0x0322F98C BL 0x331BFEC
	0x0322F990 TBZ X0, 0x0, 0x322FA20
	0x0322F994 LDR X0, [X22]
	0x0322F998 LDR W8, [X0 + 0xE0]
	0x0322F99C CBNZ W8, 0x322F9A4
	0x0322F9A0 BL 0x1C16DFC
	0x0322F9A4 MOV W0, W20
	0x0322F9A8 MOV X1, X31
	0x0322F9AC BL 0x331C0FC
	0x0322F9B0 TBZ X0, 0x0, 0x322FAA0
	0x0322F9B4 LDR W8, [X19 + 0x38]
	0x0322F9B8 CMP W8, 0x1
	0x0322F9BC B.LT 0x322F9F0
	0x0322F9C0 LDR X0, [X22]

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {22}
	004 Move W9, [X0+16]
	005 NotImplemented "Instruction LDRSW not yet implemented."
	006 NotImplemented "Instruction CMP not yet implemented."
	007 NotImplemented "Instruction LDRH not yet implemented."
	008 NotImplemented "Instruction LDRH not yet implemented."
	009 NotImplemented "Instruction CMP not yet implemented."
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move W0, 1
	012 Move W0, W31
	013 Move X30, [X31+16]
	014 Return X0
	015 Move X2, X8
	016 ShiftRight X2, 63
	017 And X2, X2, 0x3FFFFFFF
	018 Move X3, X31
	019 Move X30, [X31+16]
	020 Call SpanHelpers.SequenceEqual, X0, X1, X2
	021 Return X0
	022 Call 0x1C17F20

Method: System.String FastAllocateString(System.Int32 length)

Disassembly:
	0x032287A4 ADRP X8, 0xECB000

ISIL:
	001 Call 0x1C8925C
	002 Return X0

Method: System.String InternalIntern(System.String str)

Disassembly:
	0x0322F9C4 LDR W8, [X0 + 0xE0]

ISIL:
	001 Call 0x1C89260
	002 Return X0

Method: System.Void memset(System.Byte* dest, System.Int32 val, System.Int32 len)

Disassembly:
	0x0322F9C8 CBNZ W8, 0x322F9D0
	0x0322F9CC BL 0x1C16DFC
	0x0322F9D0 MOV W0, W21
	0x0322F9D4 MOV W1, W20
	0x0322F9D8 MOV X2, X31
	0x0322F9DC BL 0x331C12C
	0x0322F9E0 MOV W1, W0
	0x0322F9E4 MOV X0, X19
	0x0322F9E8 MOV X2, X31
	0x0322F9EC BL 0x33FFF50
	0x0322F9F0 LDR X8, [X19 + 0x30]
	0x0322F9F4 CBZ X8, 0x322FB4C
	0x0322F9F8 LDR W8, [X8 + 0x10]
	0x0322F9FC MOVN W9, 0x0
	0x0322FA00 LDP X22, X21, [X31 + 0x20]
	0x0322FA04 LDP X30, X23, [X31 + 0x10]
	0x0322FA08 STP W8, W9, [X19 + 0x38]
	0x0322FA0C LDP X20, X19, [X31 + 0x30]
	0x0322FA10 CMP W8, 0x0
	0x0322FA14 CSET W0, NE
	0x0322FA18 ADD X31, X31, 0x40
	0x0322FA1C RET
	0x0322FA20 MOVZ W8, 0xD800
	0x0322FA24 STR W8, [X31 + 0xC]
	0x0322FA28 ADRP X19, 0xEC4000
	0x0322FA2C LDR X19, [X19 + 0x758]
	0x0322FA30 MOV X0, X19
	0x0322FA34 BL 0x1C16D08
	0x0322FA38 ADD X1, X31, 0xC
	0x0322FA3C BL 0x1C16E04
	0x0322FA40 MOV X20, X0
	0x0322FA44 MOVZ W8, 0xDBFF
	0x0322FA48 MOV X0, X19
	0x0322FA4C STR W8, [X31 + 0x8]
	0x0322FA50 BL 0x1C16D08
	0x0322FA54 ADD X1, X31, 0x8
	0x0322FA58 BL 0x1C16E04
	0x0322FA5C MOV X19, X0
	0x0322FA60 ADRP X0, 0xEF3000
	0x0322FA64 LDR X0, [X0 + 0x370]
	0x0322FA68 BL 0x1C16D08
	0x0322FA6C MOV X1, X20

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move W8, W1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move W8, W8
	005 NotImplemented "Instruction CSEL not yet implemented."
	006 And W10, W0, 3
	007 Move W9, 4
	008 Subtract W9, W9, W10
	009 Or W10, W10, 0xFFFFFFFC
	010 Add W10, W10, 1
	011 Move [X0+1], W8
	012 Subtract W2, W2, W9
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move [X0], W8
	015 Move [X0+4], W8
	016 Move [X0+8], W8
	017 Move [X0+12], W8
	018 Add X0, X0, 16
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Subtract W2, W2, 16
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move [X0+4], W8
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Subtract W2, W2, 4
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Add W9, W2, 1
	027 Subtract W9, W9, 1
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move [X0+1], W8
	030 Compare W2, 0
	031 JumpIfEqual {34}
	032 Subtract W2, W2, 1
	033 Move [X0+1], W1
	034 Return 

Method: System.Void memcpy(System.Byte* dest, System.Byte* src, System.Int32 size)

Disassembly:
	0x0322FA70 MOV X2, X19
	0x0322FA74 MOV X3, X31

ISIL:
	001 Move X3, X31
	002 Call Buffer.Memcpy, X0, X1, X2
	003 Return 

Method: System.Void bzero(System.Byte* dest, System.Int32 len)

Disassembly:
	0x0322FA78 BL 0x320A264
	0x0322FA7C MOV X19, X0
	0x0322FA80 ADRP X0, 0xECC000

ISIL:
	001 Move W2, W1
	002 Move W1, W31
	003 Call String.memset, X0, X1, X2
	004 Return 

Method: System.Void bzero_aligned_1(System.Byte* dest, System.Int32 len)

Disassembly:
	0x0322FA84 LDR X0, [X0 + 0x760]
	0x0322FA88 BL 0x1C16D08

ISIL:
	001 Move [X0], W31
	002 Return 

Method: System.Void bzero_aligned_2(System.Byte* dest, System.Int32 len)

Disassembly:
	0x0322FA8C BL 0x1C16F10
	0x0322FA90 MOV X20, X0

ISIL:
	001 NotImplemented "Instruction STRH not yet implemented."
	002 Return 

Method: System.Void bzero_aligned_4(System.Byte* dest, System.Int32 len)

Disassembly:
	0x0322FA94 ADRP X0, 0xEF3000
	0x0322FA98 LDR X0, [X0 + 0x378]

ISIL:
	001 Move [X0], W31
	002 Return 

Method: System.Void bzero_aligned_8(System.Byte* dest, System.Int32 len)

Disassembly:
	0x0322FA9C B 0x322FB1C
	0x0322FAA0 MOVZ W8, 0xDC00

ISIL:
	001 Move [X0], X31
	002 Return 

Method: System.Void memcpy_aligned_1(System.Byte* dest, System.Byte* src, System.Int32 size)

Disassembly:
	0x0322FAA4 STR W8, [X31 + 0xC]
	0x0322FAA8 ADRP X19, 0xEC4000
	0x0322FAAC LDR X19, [X19 + 0x758]

ISIL:
	001 Move W8, [X1]
	002 Move [X0], W8
	003 Return 

Method: System.Void memcpy_aligned_2(System.Byte* dest, System.Byte* src, System.Int32 size)

Disassembly:
	0x0322FAB0 MOV X0, X19
	0x0322FAB4 BL 0x1C16D08
	0x0322FAB8 ADD X1, X31, 0xC

ISIL:
	001 NotImplemented "Instruction LDRH not yet implemented."
	002 NotImplemented "Instruction STRH not yet implemented."
	003 Return 

Method: System.Void memcpy_aligned_4(System.Byte* dest, System.Byte* src, System.Int32 size)

Disassembly:
	0x0322FABC BL 0x1C16E04
	0x0322FAC0 MOV X20, X0
	0x0322FAC4 MOVZ W8, 0xDFFF

ISIL:
	001 Move W8, [X1]
	002 Move [X0], W8
	003 Return 

Method: System.Void memcpy_aligned_8(System.Byte* dest, System.Byte* src, System.Int32 size)

Disassembly:
	0x0322FAC8 MOV X0, X19
	0x0322FACC STR W8, [X31 + 0x8]
	0x0322FAD0 BL 0x1C16D08

ISIL:
	001 Move X8, [X1]
	002 Move [X0], X8
	003 Return 

Method: System.String CreateString(System.SByte* value, System.Int32 startIndex, System.Int32 length)

Disassembly:
	0x0322E508 B.NE 0x322E4EC
	0x0322E50C B 0x322E528
	0x0322E510 ADD X8, X8, 0x2
	0x0322E514 ADD X12, X12, 0x2

ISIL:
	001 Move X0, X1
	002 Move W1, W2
	003 Move W2, W3
	004 Call String.Ctor, X0, X1, X2
	005 Return X0

Method: System.String CreateString(System.Char* value, System.Int32 startIndex, System.Int32 length)

Disassembly:
	0x0322FAD4 ADD X1, X31, 0x8
	0x0322FAD8 BL 0x1C16E04
	0x0322FADC MOV X19, X0
	0x0322FAE0 ADRP X0, 0xEF3000

ISIL:
	001 Move X0, X1
	002 Move W1, W2
	003 Move W2, W3
	004 Call String.Ctor, X0, X1, X2
	005 Return X0

Method: System.String CreateString(System.Char[] val, System.Int32 startIndex, System.Int32 length)

Disassembly:
	0x0322FAE4 LDR X0, [X0 + 0x370]
	0x0322FAE8 BL 0x1C16D08
	0x0322FAEC MOV X1, X20
	0x0322FAF0 MOV X2, X19

ISIL:
	001 Move X0, X1
	002 Move W1, W2
	003 Move W2, W3
	004 Call String.Ctor, X0, X1, X2
	005 Return X0

Method: System.String CreateString(System.Char[] val)

Disassembly:
	0x032266D4 MOV X1, X20
	0x032266D8 MOV X2, X19

ISIL:
	001 Move X0, X1
	002 Call String.Ctor, X0
	003 Return X0

Method: System.String CreateString(System.Char c, System.Int32 count)

Disassembly:
	0x0322FAF4 MOV X3, X31
	0x0322FAF8 BL 0x320A264
	0x0322FAFC MOV X19, X0

ISIL:
	001 Move W0, W1
	002 Move W1, W2
	003 Call String.Ctor, X0, X1
	004 Return X0

Method: System.String CreateString(System.SByte* value, System.Int32 startIndex, System.Int32 length, System.Text.Encoding enc)

Disassembly:
	0x0322FB00 ADRP X0, 0xECC000
	0x0322FB04 LDR X0, [X0 + 0x760]
	0x0322FB08 BL 0x1C16D08
	0x0322FB0C BL 0x1C16F10
	0x0322FB10 MOV X20, X0

ISIL:
	001 Move X0, X1
	002 Move W1, W2
	003 Move W2, W3
	004 Move X3, X4
	005 Call String.Ctor, X0, X1, X2, X3
	006 Return X0

Method: System.String CreateString(System.ReadOnlySpan`1<System.Char> value)

Disassembly:
	0x0322FB14 ADRP X0, 0xEF3000
	0x0322FB18 LDR X0, [X0 + 0x380]
	0x0322FB1C BL 0x1C16D08

ISIL:
	001 Move X0, X1
	002 Move X1, X2
	003 Call String.Ctor, X0
	004 Return X0

Method: System.Char get_Chars(System.Int32 index)

Disassembly:
	0x03223A1C CMP W11, W15
	0x03223A20 MOV W12, W11
	0x03223A24 MOV W14, W8
	0x03223A28 ADD X10, X10, 0x20
	0x03223A2C CSEL W11, W11, W15, HI
	0x03223A30 ADD X9, X9, 0x20
	0x03223A34 CMP X13, X12
	0x03223A38 B.EQ 0x3223A8C
	0x03223A3C CMP X11, X12
	0x03223A40 B.EQ 0x3223A8C
	0x03223A44 LDR W15, [X9, X12, LSL #2]
	0x03223A48 STR W15, [X10, X12, LSL #2]
	0x03223A4C ADD X12, X12, 0x1
	0x03223A50 CMP X12, X14
	0x03223A54 B.CC 0x3223A34

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 NotImplemented "Instruction LDRSW not yet implemented."
	005 Move W9, W1
	006 Move X19, X0
	007 Move W20, W1
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move X0, X31
	010 Call ThrowHelper.ThrowIndexOutOfRangeException
	011 Add X8, X19, W20
	012 NotImplemented "Instruction LDRH not yet implemented."
	013 Move X20, [X31+16]
	014 Move X19, [X31+24]
	015 Move X30, [X31+32]
	016 Return X0

Method: System.String Intern(System.String str)

Disassembly:
	0x0322FB20 MOV X1, X0
	0x0322FB24 MOV X0, X20
	0x0322FB28 MOV X2, X19
	0x0322FB2C MOV X3, X31
	0x0322FB30 BL 0x3311888
	0x0322FB34 ADRP X0, 0xEF3000
	0x0322FB38 LDR X0, [X0 + 0x388]
	0x0322FB3C BL 0x1C16D08
	0x0322FB40 MOV X1, X0
	0x0322FB44 MOV X0, X20
	0x0322FB48 BL 0x1C16DEC
	0x0322FB4C BL 0x1C16F20
	0x0322FB50 STR X30, [X31 - 0x10]!
	0x0322FB54 LDP W8, W9, [X0 + 0x38]
	0x0322FB58 SUBS W8, W8, 0x1
	0x0322FB5C ADD W1, W9, 0x1
	0x0322FB60 STP W8, W1, [X0 + 0x38]
	0x0322FB64 B.MI 0x322FB7C
	0x0322FB68 MOVN W9, 0x80000000
	0x0322FB6C CMP W8, W9
	0x0322FB70 B.NE 0x322FB88
	0x0322FB74 MOVN W8, 0x0
	0x0322FB78 STR W8, [X0 + 0x38]
	0x0322FB7C MOV W0, W31
	0x0322FB80 LDR X30, [X31], #0x10
	0x0322FB84 RET
	0x0322FB88 LDR X0, [X0 + 0x30]
	0x0322FB8C CBZ X0, 0x322FB9C
	0x0322FB90 MOV X2, X31
	0x0322FB94 LDR X30, [X31], #0x10
	0x0322FB98 B 0x3222A1C
	0x0322FB9C BL 0x1C16F20
	0x0322FBA0 LDR W8, [X0 + 0x38]
	0x0322FBA4 ADDS W31, W8, 0x1
	0x0322FBA8 B.LT 0x322FBC8
	0x0322FBAC LDR W9, [X0 + 0x3C]
	0x0322FBB0 TBNZ X9, 0x1F, 0x322FBC8
	0x0322FBB4 SUB W9, W9, 0x1
	0x0322FBB8 ADD W8, W8, 0x1
	0x0322FBBC STP W8, W9, [X0 + 0x38]
	0x0322FBC0 MOVZ W0, 0x1
	0x0322FBC4 RET
	0x0322FBC8 MOV W0, W31
	0x0322FBCC RET
	0x0322FBD0 LDR W8, [X0 + 0x38]
	0x0322FBD4 BIC W0, W8, W8, 0x1F
	0x0322FBD8 RET
	0x0322FBDC MOVI D0, 0xFFFFFFFF
	0x0322FBE0 STR X31, [X0 + 0x10]
	0x0322FBE4 STR D0, [X0 + 0x38]
	0x0322FBE8 STRB W31, [X0 + 0x2A]
	0x0322FBEC RET
	0x0322FBF0 MOV X2, X31
	0x0322FBF4 B 0x3241B10
	0x0322FBF8 STR X30, [X31 - 0x20]!
	0x0322FBFC STP X20, X19, [X31 + 0x10]
	0x0322FC00 CBZ X1, 0x322FC60
	0x0322FC04 TBNZ X3, 0x1F, 0x322FCA8
	0x0322FC08 TBNZ X2, 0x1F, 0x322FCA8
	0x0322FC0C LDR W8, [X1 + 0x18]
	0x0322FC10 SUB W9, W8, W2
	0x0322FC14 CMP W9, W3
	0x0322FC18 B.LT 0x322FD14
	0x0322FC1C CBZ W3, 0x322FC50
	0x0322FC20 LDR X9, [X0]
	0x0322FC24 LDP X20, X19, [X31 + 0x10]
	0x0322FC28 ADD X10, X1, 0x20
	0x0322FC2C CMP W8, 0x0
	0x0322FC30 LDR X5, [X9 + 0x228]
	0x0322FC34 LDR X4, [X9 + 0x230]
	0x0322FC38 CSEL X8, X31, X10, EQ
	0x0322FC3C ADD X1, X8, W2, 0x1, SXTW
	0x0322FC40 MOV W2, W3
	0x0322FC44 MOV X3, X31
	0x0322FC48 LDR X30, [X31], #0x20
	0x0322FC4C BR X5
	0x0322FC50 LDP X20, X19, [X31 + 0x10]
	0x0322FC54 MOV W0, W31
	0x0322FC58 LDR X30, [X31], #0x20

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {5}
	003 Call 0x1C89260
	004 Return X0
	005 Move [X31-16], X30
	006 Move [X31-8], X19
	007 Move X0, 0xECA000
	008 Move X0, [X0+1320]
	009 Call 0x1C17D08
	010 Call 0x1C17F10
	011 Move X19, X0
	012 Move X0, 0xEC7000
	013 Move X0, [X0+3200]
	014 Call 0x1C17D08
	015 Move X1, X0
	016 Move X0, X19
	017 Move X2, X31
	018 Call ArgumentNullException..ctor, X0, X1
	019 Move X0, 0xEF4000
	020 Move X0, [X0+704]
	021 Call 0x1C17D08
	022 Move X1, X0
	023 Move X0, X19
	024 Call 0x1C17DEC
	025 Move [X31-32], X30
	026 Move [X31+16], X20
	027 Move [X31+24], X19
	028 Move X8, [X0+16]
	029 Compare X8, 0
	030 JumpIfEqual {106}
	031 Move X19, X0
	032 Move X0, [X1+32]
	033 Move X20, X1
	034 Move W8, [X0+309]
	035 Move TEMP, X8
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {40}
	039 Call 0x1C5D684
	040 Move X8, [X0+192]
	041 Move X0, [X8+112]
	042 Move W8, [X0+309]
	043 Move TEMP, X8
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfEqual {48}
	047 Call 0x1C5D684
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Move X0, [X20+32]
	053 Move W8, [X0+309]
	054 Move TEMP, X8
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfEqual {59}
	058 Call 0x1C5D684
	059 Move X8, [X0+192]
	060 Move X20, [X8+104]
	061 Move X0, [X20+32]
	062 Move W8, [X0+309]
	063 Move TEMP, X8
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfEqual {68}
	067 Call 0x1C5D684
	068 Move X8, [X0+192]
	069 Move X0, [X8+8]
	070 Move W8, [X0+309]
	071 Move TEMP, X8
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfEqual {76}
	075 Call 0x1C5D684
	076 Move W8, [X0+224]
	077 Compare W8, 0
	078 JumpIfNotEqual {80}
	079 Call 0x1C17DFC
	080 Move X0, [X20+32]
	081 Move W8, [X0+309]
	082 Move TEMP, X8
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfEqual {87}
	086 Call 0x1C5D684
	087 Move X8, [X0+192]
	088 Move X0, [X8+8]
	089 Move W8, [X0+309]
	090 Move TEMP, X8
	091 And TEMP, TEMP, 1
	092 Compare TEMP, 1
	093 JumpIfEqual {95}
	094 Call 0x1C5D684
	095 Move X8, [X0+184]
	096 Move X0, [X8]
	097 Compare X0, 0
	098 JumpIfEqual {110}
	099 Move X8, [X0]
	100 Move X1, [X19+16]
	101 Move W2, W31
	102 Move X9, [X8+392]
	103 Move X3, [X8+400]
	104 NotImplemented "Instruction BLR not yet implemented."
	105 Move [X19+16], X31
	106 Move X20, [X31+16]
	107 Move X19, [X31+24]
	108 Move X30, [X31+32]
	109 Return X0
	110 Call 0x1C17F20

