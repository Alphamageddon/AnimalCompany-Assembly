Type: System.Array

Method: System.Array CreateInstance(System.Type elementType, System.Int64[] lengths)

Disassembly:
	0x033A0388 BL 0x1C16F10
	0x033A038C MOV X19, X0
	0x033A0390 ADRP X0, 0xD8B000
	0x033A0394 LDR X0, [X0 + 0xA50]
	0x033A0398 BL 0x1C16D08
	0x033A039C MOV X20, X0
	0x033A03A0 ADRP X0, 0xD7D000
	0x033A03A4 LDR X0, [X0 + 0x928]
	0x033A03A8 BL 0x1C16D08
	0x033A03AC MOV X2, X0
	0x033A03B0 MOV X0, X19
	0x033A03B4 MOV X1, X20
	0x033A03B8 MOV X3, X31
	0x033A03BC BL 0x330E16C
	0x033A03C0 ADRP X0, 0xD8B000
	0x033A03C4 LDR X0, [X0 + 0xA58]
	0x033A03C8 BL 0x1C16D08
	0x033A03CC MOV X1, X0
	0x033A03D0 MOV X0, X19
	0x033A03D4 BL 0x1C16DEC
	0x033A03D8 STP X30, X25, [X31 - 0x40]!
	0x033A03DC STP X24, X23, [X31 + 0x10]
	0x033A03E0 STP X22, X21, [X31 + 0x20]
	0x033A03E4 STP X20, X19, [X31 + 0x30]
	0x033A03E8 ADRP X22, 0x103D000
	0x033A03EC LDRB W8, [X22 + 0x129]
	0x033A03F0 MOV X19, X2
	0x033A03F4 MOV X21, X1
	0x033A03F8 MOV X20, X0
	0x033A03FC TBNZ X8, 0x0, 0x33A0420
	0x033A0400 ADRP X0, 0xD7D000
	0x033A0404 LDR X0, [X0 + 0x900]
	0x033A0408 BL 0x1C16CF4
	0x033A040C ADRP X0, 0xD53000
	0x033A0410 LDR X0, [X0 + 0xEF0]
	0x033A0414 BL 0x1C16CF4
	0x033A0418 MOVZ W8, 0x1
	0x033A041C STRB W8, [X22 + 0x129]
	0x033A0420 CBZ X21, 0x33A0544
	0x033A0424 CMP X20, X21
	0x033A0428 B.EQ 0x33A054C
	0x033A042C ADRP X8, 0xD53000
	0x033A0430 LDR X8, [X8 + 0xEF0]
	0x033A0434 LDR X9, [X21]
	0x033A0438 LDR X8, [X8]
	0x033A043C LDRB W11, [X9 + 0x130]
	0x033A0440 LDRB W10, [X8 + 0x130]
	0x033A0444 CMP W11, W10
	0x033A0448 B.CC 0x33A0544
	0x033A044C LDR X9, [X9 + 0xC8]
	0x033A0450 ADD X9, X9, X10, 0x3, LSL
	0x033A0454 LDUR X9, [X9 - 0x8]
	0x033A0458 CMP X9, X8
	0x033A045C CSEL X21, X21, X31, EQ
	0x033A0460 B.NE 0x33A0544
	0x033A0464 CBZ X21, 0x33A0568
	0x033A0468 MOV X0, X21
	0x033A046C BL 0x3395B7C
	0x033A0470 MOV W22, W0
	0x033A0474 MOV X0, X20
	0x033A0478 BL 0x3395B7C
	0x033A047C CMP W22, W0
	0x033A0480 B.NE 0x33A0544
	0x033A0484 MOV X0, X21
	0x033A0488 BL 0x3395B7C
	0x033A048C CMP W0, 0x1
	0x033A0490 B.LT 0x33A054C
	0x033A0494 ADRP X25, 0xD7D000
	0x033A0498 LDR X25, [X25 + 0x900]
	0x033A049C MOV W22, W31
	0x033A04A0 MOV X0, X20
	0x033A04A4 MOV W1, W22
	0x033A04A8 BL 0x3395BDC
	0x033A04AC MOV X23, X0
	0x033A04B0 MOV X0, X21
	0x033A04B4 MOV W1, W22
	0x033A04B8 BL 0x3395BDC
	0x033A04BC CBZ X19, 0x33A0568
	0x033A04C0 LDR X8, [X19]
	0x033A04C4 LDR X1, [X25]
	0x033A04C8 MOV X24, X0
	0x033A04CC LDRH W9, [X8 + 0x12E]
	0x033A04D0 CBZ X9, 0x33A04F4
	0x033A04D4 LDR X10, [X8 + 0xB0]
	0x033A04D8 ADD X10, X10, 0x8
	0x033A04DC LDUR X11, [X10 - 0x8]
	0x033A04E0 CMP X11, X1
	0x033A04E4 B.EQ 0x33A0504
	0x033A04E8 SUBS X9, X9, 0x1
	0x033A04EC ADD X10, X10, 0x10
	0x033A04F0 B.NE 0x33A04DC
	0x033A04F4 MOV X0, X19
	0x033A04F8 MOV W2, W31
	0x033A04FC BL 0x1C5C788

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x103E000
	006 Move W8, [X21+295]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD55000
	014 Move X0, [X0+3672]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+295], W8
	018 Compare X20, 0
	019 JumpIfEqual {73}
	020 Move X1, [X20+24]
	021 Compare X1, 0
	022 JumpIfEqual {85}
	023 Move X8, 0xD55000
	024 Move X8, [X8+3672]
	025 Move X0, [X8]
	026 Call 0x1C17D6C
	027 Move W8, [X20+24]
	028 Move X1, X0
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X9, X31
	031 Add X10, X1, 32
	032 Add X11, X20, 32
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X12, [X11]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Compare X1, 0
	037 JumpIfEqual {72}
	038 Move W13, [X1+24]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move [X10], W12
	041 Add X9, X9, 1
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X0, X19
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Call 0x1C17F28
	049 Move X0, 0xD5C000
	050 Move X0, [X0+1888]
	051 Call 0x1C17D08
	052 Call 0x1C17F10
	053 Move X19, X0
	054 Move X0, 0xD8C000
	055 Move X0, [X0+2408]
	056 Call 0x1C17D08
	057 Move X20, X0
	058 Move X0, 0xD8C000
	059 Move X0, [X0+2416]
	060 Call 0x1C17D08
	061 Move X2, X0
	062 Move X0, X19
	063 Move X1, X20
	064 Move X3, X31
	065 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	066 Move X0, 0xD8C000
	067 Move X0, [X0+2424]
	068 Call 0x1C17D08
	069 Move X1, X0
	070 Move X0, X19
	071 Call 0x1C17DEC
	072 Call 0x1C17F20
	073 Move X0, 0xD59000
	074 Move X0, [X0+1320]
	075 Call 0x1C17D08
	076 Call 0x1C17F10
	077 Move X19, X0
	078 Move X0, 0xD8C000
	079 Move X0, [X0+2432]
	080 Call 0x1C17D08
	081 Move X1, X0
	082 Move X0, X19
	083 Move X2, X31
	084 Call ArgumentNullException..ctor, X0, X1
	085 Move X0, 0xD5C000
	086 Move X0, [X0+1400]
	087 Call 0x1C17D08
	088 Call 0x1C17F10
	089 Move X19, X0
	090 Move X0, 0xD8C000
	091 Move X0, [X0+2440]
	092 Call 0x1C17D08
	093 Move X1, X0
	094 Move X0, X19
	095 Move X2, X31
	096 Call ArgumentException..ctor, X0, X1

Method: System.Collections.ObjectModel.ReadOnlyCollection`1<T> AsReadOnly(T[] array)

Disassembly:
	0x022CA7D4 MOV W24, W2
	0x022CA7D8 MOV W23, W1
	0x022CA7DC MOV X25, X0
	0x022CA7E0 CBNZ X8, 0x22CA7EC
	0x022CA7E4 MOV X0, X19
	0x022CA7E8 BL 0x1C5C6E0
	0x022CA7EC CBZ X25, 0x22CA8C8
	0x022CA7F0 TBNZ X24, 0x1F, 0x22CA8FC
	0x022CA7F4 TBNZ X23, 0x1F, 0x22CA8FC
	0x022CA7F8 LDR W8, [X25 + 0x18]
	0x022CA7FC SUB W8, W8, W23
	0x022CA800 CMP W8, W24
	0x022CA804 B.LT 0x22CA958
	0x022CA808 LDR X8, [X19 + 0x38]
	0x022CA80C LDR X0, [X8 + 0x10]
	0x022CA810 LDRB W8, [X0 + 0x135]
	0x022CA814 TBNZ X8, 0x0, 0x22CA81C
	0x022CA818 BL 0x1C5C684
	0x022CA81C LDR W8, [X0 + 0xE0]
	0x022CA820 CBNZ W8, 0x22CA828
	0x022CA824 BL 0x1C16DFC
	0x022CA828 LDR X8, [X19 + 0x38]
	0x022CA82C LDR X26, [X8 + 0x8]
	0x022CA830 LDR X0, [X26 + 0x20]
	0x022CA834 LDRB W8, [X0 + 0x135]
	0x022CA838 TBNZ X8, 0x0, 0x22CA840
	0x022CA83C BL 0x1C5C684
	0x022CA840 LDR X8, [X0 + 0xC0]
	0x022CA844 LDR X0, [X8 + 0x48]
	0x022CA848 LDRB W8, [X0 + 0x135]
	0x022CA84C TBNZ X8, 0x0, 0x22CA854
	0x022CA850 BL 0x1C5C684
	0x022CA854 LDR W8, [X0 + 0xE0]
	0x022CA858 CBNZ W8, 0x22CA860
	0x022CA85C BL 0x1C16DFC
	0x022CA860 LDR X0, [X26 + 0x20]
	0x022CA864 LDRB W8, [X0 + 0x135]
	0x022CA868 TBNZ X8, 0x0, 0x22CA870
	0x022CA86C BL 0x1C5C684

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+56]
	005 Move X19, X1
	006 Move X20, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {11}
	009 Move X0, X19
	010 Call 0x1C5D6E0
	011 Compare X20, 0
	012 JumpIfEqual {32}
	013 Move X8, [X19+56]
	014 Move X0, [X8+8]
	015 Move W8, [X0+309]
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {21}
	020 Call 0x1C5D684
	021 Call 0x1C17F10
	022 Move X8, [X19+56]
	023 Move X1, X20
	024 Move X19, X0
	025 Move X2, [X8+16]
	026 Call ReadOnlyCollection`1<CustomAttributeNamedArgument>..ctor, X0, X1
	027 Move X0, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return X0
	032 Move X0, 0x1E2F000
	033 Move X0, [X0+1320]
	034 Call 0x1C17D08
	035 Call 0x1C17F10
	036 Move X20, X0
	037 Move X0, 0x1E52000
	038 Move X0, [X0+1600]
	039 Call 0x1C17D08
	040 Move X1, X0
	041 Move X0, X20
	042 Move X2, X31
	043 Call ArgumentNullException..ctor, X0, X1
	044 Move X0, X20
	045 Move X1, X19
	046 Call 0x1C17DEC

Method: System.Void Resize(ref T[] array, System.Int32 newSize)

Disassembly:
	0x02112C70 TBNZ X8, 0x0, 0x2112C78
	0x02112C74 BL 0x1C5C684
	0x02112C78 MOV W1, W20
	0x02112C7C BL 0x1C16D6C
	0x02112C80 LDR W8, [X22 + 0x18]
	0x02112C84 MOV X21, X0
	0x02112C88 MOV X0, X22
	0x02112C8C MOV W1, W31
	0x02112C90 CMP W8, W20
	0x02112C94 CSEL W4, W20, W8, GT
	0x02112C98 MOV X2, X21
	0x02112C9C MOV W3, W31
	0x02112CA0 MOV X5, X31
	0x02112CA4 BL 0x339FCE8
	0x02112CA8 B 0x2112CCC
	0x02112CAC LDR X8, [X21 + 0x38]
	0x02112CB0 LDR X0, [X8 + 0x8]
	0x02112CB4 LDRB W8, [X0 + 0x135]
	0x02112CB8 TBNZ X8, 0x0, 0x2112CC0
	0x02112CBC BL 0x1C5C684
	0x02112CC0 MOV W1, W20
	0x02112CC4 BL 0x1C16D6C
	0x02112CC8 MOV X21, X0
	0x02112CCC STR X21, [X19]
	0x02112CD0 LDP X20, X19, [X31 + 0x20]
	0x02112CD4 LDP X22, X21, [X31 + 0x10]
	0x02112CD8 LDR X30, [X31], #0x30
	0x02112CDC RET
	0x02112CE0 ADRP X0, 0x1FE9000
	0x02112CE4 LDR X0, [X0 + 0x760]
	0x02112CE8 BL 0x1C16D08
	0x02112CEC BL 0x1C16F10
	0x02112CF0 MOV X19, X0
	0x02112CF4 ADRP X0, 0x2009000
	0x02112CF8 LDR X0, [X0 + 0x668]
	0x02112CFC BL 0x1C16D08
	0x02112D00 MOV X20, X0
	0x02112D04 ADRP X0, 0x2009000
	0x02112D08 LDR X0, [X0 + 0x670]
	0x02112D0C BL 0x1C16D08
	0x02112D10 MOV X2, X0
	0x02112D14 MOV X0, X19
	0x02112D18 MOV X1, X20
	0x02112D1C MOV X3, X31
	0x02112D20 BL 0x3311888
	0x02112D24 MOV X0, X19
	0x02112D28 MOV X1, X21
	0x02112D2C BL 0x1C16DEC
	0x02112D30 STR X30, [X31 - 0x30]!
	0x02112D34 STP X22, X21, [X31 + 0x10]
	0x02112D38 STP X20, X19, [X31 + 0x20]
	0x02112D3C LDR X8, [X2 + 0x38]
	0x02112D40 MOV X21, X2
	0x02112D44 MOV W20, W1
	0x02112D48 MOV X19, X0
	0x02112D4C CBNZ X8, 0x2112D58
	0x02112D50 MOV X0, X21
	0x02112D54 BL 0x1C5C6E0
	0x02112D58 TBNZ X20, 0x1F, 0x2112DEC
	0x02112D5C LDR X22, [X19]
	0x02112D60 CBZ X22, 0x2112DB8
	0x02112D64 LDR W8, [X22 + 0x18]
	0x02112D68 CMP W8, W20
	0x02112D6C B.EQ 0x2112DDC
	0x02112D70 LDR X8, [X21 + 0x38]
	0x02112D74 LDR X0, [X8 + 0x8]
	0x02112D78 LDRB W8, [X0 + 0x135]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X2+56]
	007 Move X21, X2
	008 Move W20, W1
	009 Move X19, X0
	010 Compare X8, 0
	011 JumpIfNotEqual {14}
	012 Move X0, X21
	013 Call 0x1C5D6E0
	014 Move TEMP, X20
	015 And TEMP, TEMP, -2147483648
	016 Compare TEMP, -2147483648
	017 JumpIfEqual {61}
	018 Move X22, [X19]
	019 Compare X22, 0
	020 JumpIfEqual {43}
	021 Move W8, [X22+24]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X8, [X21+56]
	024 Move X0, [X8+8]
	025 Move W8, [X0+309]
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {31}
	030 Call 0x1C5D684
	031 Move W1, W20
	032 Call 0x1C17D6C
	033 Move W8, [X22+24]
	034 Move X21, X0
	035 Move X0, X22
	036 Move W1, W31
	037 NotImplemented "Instruction CMP not yet implemented."
	038 NotImplemented "Instruction CSEL not yet implemented."
	039 Move X2, X21
	040 Move W3, W31
	041 Move X5, X31
	042 Call Array.Copy, X0, X1, X2, X3, X4
	043 Move X8, [X21+56]
	044 Move X0, [X8+8]
	045 Move W8, [X0+309]
	046 Move TEMP, X8
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfEqual {51}
	050 Call 0x1C5D684
	051 Move W1, W20
	052 Call 0x1C17D6C
	053 Move X21, X0
	054 Move [X19], X21
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X22, [X31+16]
	058 Move X21, [X31+24]
	059 Move X30, [X31+48]
	060 Return 
	061 Move X0, 0x1FEA000
	062 Move X0, [X0+1888]
	063 Call 0x1C17D08
	064 Call 0x1C17F10
	065 Move X19, X0
	066 Move X0, 0x200A000
	067 Move X0, [X0+1640]
	068 Call 0x1C17D08
	069 Move X20, X0
	070 Move X0, 0x200A000
	071 Move X0, [X0+1648]
	072 Call 0x1C17D08
	073 Move X2, X0
	074 Move X0, X19
	075 Move X1, X20
	076 Move X3, X31
	077 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	078 Move X0, X19
	079 Move X1, X21
	080 Call 0x1C17DEC

Method: System.Int32 System.Collections.ICollection.get_Count()

Disassembly:
	0x033A0778 STR X30, [X31 - 0x50]!

ISIL:
	001 Call Array.get_Length, X0
	002 Return X0

Method: System.Boolean System.Collections.IList.get_IsReadOnly()

Disassembly:
	0x033A077C STP X26, X25, [X31 + 0x10]
	0x033A0780 STP X24, X23, [X31 + 0x20]

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Object System.Collections.IList.get_Item(System.Int32 index)

Disassembly:
	0x033A0784 STP X22, X21, [X31 + 0x30]

ISIL:
	001 Call Array.GetValue, X0, X1
	002 Return X0

Method: System.Void System.Collections.IList.set_Item(System.Int32 index, System.Object value)

Disassembly:
	0x033A0788 STP X20, X19, [X31 + 0x40]
	0x033A078C ADRP X24, 0x103D000
	0x033A0790 LDRB W8, [X24 + 0x12C]
	0x033A0794 MOV X21, X4

ISIL:
	001 Move W8, W1
	002 Move X1, X2
	003 Move W2, W8

Method: System.Int32 System.Collections.IList.Add(System.Object value)

Disassembly:
	0x033A0908 ORN W23, W31, W19, 0x0
	0x033A090C MOV W0, W23
	0x033A0910 LDP X20, X19, [X31 + 0x40]
	0x033A0914 LDP X22, X21, [X31 + 0x30]
	0x033A0918 LDP X24, X23, [X31 + 0x20]
	0x033A091C LDP X26, X25, [X31 + 0x10]
	0x033A0920 LDR X30, [X31], #0x50
	0x033A0924 RET
	0x033A0928 ADRP X26, 0xD7D000
	0x033A092C LDR X26, [X26 + 0x918]
	0x033A0930 SUB W8, W25, W19
	0x033A0934 ADD W23, W19, W8, 0x1, ASR
	0x033A0938 MOV X0, X22
	0x033A093C MOV W1, W23
	0x033A0940 BL 0x3395BDC
	0x033A0944 CBZ X21, 0x33A09D4
	0x033A0948 LDR X8, [X21]
	0x033A094C LDR X1, [X26]
	0x033A0950 MOV X24, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xD54000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xD8C000
	009 Move X0, [X0+2496]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call NotSupportedException..ctor, X0, X1
	015 Move X0, 0xD8C000
	016 Move X0, [X0+2504]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Boolean System.Collections.IList.Contains(System.Object value)

Disassembly:
	0x033A0954 LDRH W9, [X8 + 0x12E]
	0x033A0958 CBZ X9, 0x33A097C
	0x033A095C LDR X10, [X8 + 0xB0]
	0x033A0960 ADD X10, X10, 0x8
	0x033A0964 LDUR X11, [X10 - 0x8]
	0x033A0968 CMP X11, X1

ISIL:
	001 Move [X31-16], X30
	002 Call Array.IndexOf, X0, X1
	003 NotImplemented "Instruction ORN not yet implemented."
	004 Move W0, W8
	005 ShiftRight W0, 31
	006 And W0, W0, 0x7FFFFFFF
	007 Move X30, [X31+16]
	008 Return X0

Method: System.Void System.Collections.IList.Clear()

Disassembly:
	0x033A09F8 MOV X1, X0
	0x033A09FC MOV X0, X19
	0x033A0A00 MOV X2, X31
	0x033A0A04 BL 0x330E100
	0x033A0A08 B 0x33A0AC4
	0x033A0A0C ADRP X8, 0xD5B000
	0x033A0A10 ADRP X9, 0xD5E000
	0x033A0A14 LDR X8, [X8 + 0x768]
	0x033A0A18 LDR X9, [X9 + 0x130]
	0x033A0A1C CMP W19, 0x0
	0x033A0A20 CSEL X0, X9, X8, LT
	0x033A0A24 BL 0x1C16D08
	0x033A0A28 MOV X19, X0
	0x033A0A2C ADRP X0, 0xD5B000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W1, W31
	005 Move X19, X0
	006 Call 0x1C25D2C
	007 Move W20, W0
	008 Move X0, X19
	009 Call Array.get_Length, X0
	010 Move W2, W0
	011 Move X0, X19
	012 Move W1, W20
	013 Move X20, [X31+16]
	014 Move X19, [X31+24]
	015 Move X30, [X31+32]
	016 Call Array.Clear, X0, X1, X2
	017 Return 

Method: System.Int32 System.Collections.IList.IndexOf(System.Object value)

Disassembly:
	0x033A0B4C B 0x33A0C00

ISIL:
	001 Call Array.IndexOf, X0, X1
	002 Return X0

Method: System.Void System.Collections.IList.Insert(System.Int32 index, System.Object value)

Disassembly:
	0x033A0B50 MOV X19, X0
	0x033A0B54 CMP W1, 0x1
	0x033A0B58 B.NE 0x33A0C00
	0x033A0B5C MOV X0, X19
	0x033A0B60 BL 0x3EB1AD0
	0x033A0B64 MOV X19, X0
	0x033A0B68 ADRP X0, 0xD53000
	0x033A0B6C LDR X0, [X0 + 0x7D0]
	0x033A0B70 BL 0x1C16D08
	0x033A0B74 LDR X8, [X19]
	0x033A0B78 LDR X1, [X8]
	0x033A0B7C BL 0x1C17270
	0x033A0B80 TBZ X0, 0x0, 0x33A0BD8
	0x033A0B84 LDR X19, [X19]
	0x033A0B88 BL 0x3EB1AE0
	0x033A0B8C ADRP X0, 0xD53000
	0x033A0B90 LDR X0, [X0 + 0x5B0]
	0x033A0B94 BL 0x1C16D08
	0x033A0B98 BL 0x1C16F10

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xD54000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xD8C000
	009 Move X0, [X0+2496]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call NotSupportedException..ctor, X0, X1
	015 Move X0, 0xD8C000
	016 Move X0, [X0+2552]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Void System.Collections.IList.Remove(System.Object value)

Disassembly:
	0x033A0B9C MOV X20, X0
	0x033A0BA0 ADRP X0, 0xD7C000
	0x033A0BA4 LDR X0, [X0 + 0xBC0]
	0x033A0BA8 BL 0x1C16D08
	0x033A0BAC MOV X1, X0
	0x033A0BB0 MOV X0, X20
	0x033A0BB4 MOV X2, X19
	0x033A0BB8 MOV X3, X31
	0x033A0BBC BL 0x337DF40
	0x033A0BC0 ADRP X0, 0xD8B000
	0x033A0BC4 LDR X0, [X0 + 0xA78]
	0x033A0BC8 BL 0x1C16D08
	0x033A0BCC MOV X1, X0
	0x033A0BD0 MOV X0, X20
	0x033A0BD4 BL 0x1C16DEC
	0x033A0BD8 MOVZ W0, 0x8
	0x033A0BDC BL 0x3EB1AF0
	0x033A0BE0 LDR X8, [X19]
	0x033A0BE4 STR X8, [X0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xD54000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xD8C000
	009 Move X0, [X0+2496]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call NotSupportedException..ctor, X0, X1
	015 Move X0, 0xD8C000
	016 Move X0, [X0+2560]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Void System.Collections.IList.RemoveAt(System.Int32 index)

Disassembly:
	0x033A0BE8 ADRP X1, 0xB14000
	0x033A0BEC ADD X1, X1, 0xE58
	0x033A0BF0 MOV X2, X31
	0x033A0BF4 BL 0x3EB1B00
	0x033A0BF8 MOV X19, X0
	0x033A0BFC BL 0x3EB1AE0
	0x033A0C00 MOV X0, X19
	0x033A0C04 BL 0x1D2C690
	0x033A0C08 BL 0x1990590
	0x033A0C0C CMP X2, W2, SXTW
	0x033A0C10 B.NE 0x33A0C18
	0x033A0C14 B 0x33A0C7C
	0x033A0C18 STR X30, [X31 - 0x20]!
	0x033A0C1C STP X20, X19, [X31 + 0x10]
	0x033A0C20 ADRP X0, 0xD5B000
	0x033A0C24 LDR X0, [X0 + 0x760]
	0x033A0C28 BL 0x1C16D08
	0x033A0C2C BL 0x1C16F10
	0x033A0C30 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xD54000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xD8C000
	009 Move X0, [X0+2496]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call NotSupportedException..ctor, X0, X1
	015 Move X0, 0xD8C000
	016 Move X0, [X0+2568]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Void CopyTo(System.Array array, System.Int32 index)

Disassembly:
	0x033A0C34 ADRP X0, 0xD5B000
	0x033A0C38 LDR X0, [X0 + 0x768]
	0x033A0C3C BL 0x1C16D08
	0x033A0C40 MOV X20, X0
	0x033A0C44 ADRP X0, 0xD8B000
	0x033A0C48 LDR X0, [X0 + 0x970]
	0x033A0C4C BL 0x1C16D08
	0x033A0C50 MOV X2, X0
	0x033A0C54 MOV X0, X19
	0x033A0C58 MOV X1, X20
	0x033A0C5C MOV X3, X31
	0x033A0C60 BL 0x3311888
	0x033A0C64 ADRP X0, 0xD8B000
	0x033A0C68 LDR X0, [X0 + 0xA80]
	0x033A0C6C BL 0x1C16D08
	0x033A0C70 MOV X1, X0
	0x033A0C74 MOV X0, X19
	0x033A0C78 BL 0x1C16DEC
	0x033A0C7C STR X30, [X31 - 0x30]!
	0x033A0C80 STP X22, X21, [X31 + 0x10]
	0x033A0C84 STP X20, X19, [X31 + 0x20]
	0x033A0C88 CBZ X0, 0x33A0CD8
	0x033A0C8C MOV X20, X1
	0x033A0C90 CBZ X1, 0x33A0CF8
	0x033A0C94 MOV W1, W31
	0x033A0C98 MOV W19, W2
	0x033A0C9C MOV X21, X0
	0x033A0CA0 BL 0x1C24D2C
	0x033A0CA4 MOV W22, W0
	0x033A0CA8 MOV X0, X20
	0x033A0CAC MOV W1, W31
	0x033A0CB0 BL 0x1C24D2C
	0x033A0CB4 MOV W3, W0
	0x033A0CB8 MOV X0, X21
	0x033A0CBC MOV W1, W22
	0x033A0CC0 MOV X2, X20
	0x033A0CC4 MOV W4, W19
	0x033A0CC8 LDP X20, X19, [X31 + 0x20]
	0x033A0CCC LDP X22, X21, [X31 + 0x10]
	0x033A0CD0 LDR X30, [X31], #0x30
	0x033A0CD4 B 0x339FCE8
	0x033A0CD8 ADRP X0, 0xD58000
	0x033A0CDC LDR X0, [X0 + 0x528]
	0x033A0CE0 BL 0x1C16D08

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W19, W2
	007 Move X20, X1
	008 Move X21, X0
	009 Compare X1, 0
	010 JumpIfEqual {14}
	011 Move X0, X20
	012 Call 0x1C25D70
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X0, X21
	015 Move W1, W31
	016 Call 0x1C25D2C
	017 Move W22, W0
	018 Move X0, X21
	019 Call Array.get_Length, X0
	020 Move W4, W0
	021 Move X0, X21
	022 Move W1, W22
	023 Move X2, X20
	024 Move W3, W19
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X22, [X31+16]
	028 Move X21, [X31+24]
	029 Move X30, [X31+48]
	030 Call Array.Copy, X0, X1, X2, X3, X4
	031 Return 
	032 Move X0, 0xD5C000
	033 Move X0, [X0+1400]
	034 Call 0x1C17D08
	035 Call 0x1C17F10
	036 Move X19, X0
	037 Move X0, 0xD7D000
	038 Move X0, [X0+776]
	039 Call 0x1C17D08
	040 Move X1, X0
	041 Move X0, X19
	042 Move X2, X31
	043 Call ArgumentException..ctor, X0, X1
	044 Move X0, 0xD8C000
	045 Move X0, [X0+2576]
	046 Call 0x1C17D08
	047 Move X1, X0
	048 Move X0, X19
	049 Call 0x1C17DEC

Method: System.Object Clone()

Disassembly:
	0x033A11F0 BL 0x1C16F20
	0x033A11F4 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move X1, X31
	002 Call Object.MemberwiseClone, X0
	003 Return X0

Method: System.Int32 System.Collections.IStructuralComparable.CompareTo(System.Object other, System.Collections.IComparer comparer)

Disassembly:
	0x033A11F8 STP X20, X19, [X31 + 0x10]
	0x033A11FC ADRP X21, 0x103C000
	0x033A1200 LDRB W8, [X21 + 0x12B]
	0x033A1204 MOV X20, X1
	0x033A1208 MOV X19, X0
	0x033A120C TBNZ X8, 0x0, 0x33A1224
	0x033A1210 ADRP X0, 0xD53000
	0x033A1214 LDR X0, [X0 + 0xE58]
	0x033A1218 BL 0x1C16CF4
	0x033A121C MOVZ W8, 0x1
	0x033A1220 STRB W8, [X21 + 0x12B]
	0x033A1224 CBZ X20, 0x33A1314
	0x033A1228 MOV X0, X19
	0x033A122C BL 0x1C24D70
	0x033A1230 LDR W8, [X20 + 0x18]
	0x033A1234 CMP W0, W8
	0x033A1238 B.NE 0x33A1348
	0x033A123C ADRP X8, 0xD53000
	0x033A1240 LDR X8, [X8 + 0xE58]
	0x033A1244 MOV W1, W0
	0x033A1248 LDR X0, [X8]
	0x033A124C BL 0x1C16D6C
	0x033A1250 LDR W8, [X20 + 0x18]
	0x033A1254 MOV X1, X0
	0x033A1258 CMP W8, 0x1
	0x033A125C B.LT 0x33A12A0
	0x033A1260 MOV X9, X31
	0x033A1264 ADD X10, X1, 0x20
	0x033A1268 ADD X11, X20, 0x20
	0x033A126C CMP W9, W8
	0x033A1270 B.CS 0x33A12B0
	0x033A1274 LDR X12, [X11, X9, LSL #3]
	0x033A1278 CMP X12, W12, SXTW
	0x033A127C B.NE 0x33A12B4
	0x033A1280 CBZ X1, 0x33A1310
	0x033A1284 LDR W13, [X1 + 0x18]
	0x033A1288 CMP W9, W13
	0x033A128C B.CS 0x33A12B0
	0x033A1290 STR W12, [X10, X9, LSL #2]
	0x033A1294 ADD X9, X9, 0x1
	0x033A1298 CMP W9, W8
	0x033A129C B.LT 0x33A126C
	0x033A12A0 MOV X0, X19
	0x033A12A4 LDP X20, X19, [X31 + 0x10]
	0x033A12A8 LDP X30, X21, [X31], #0x20
	0x033A12AC B 0x1C24D7C
	0x033A12B0 BL 0x1C16F28
	0x033A12B4 ADRP X0, 0xD5A000
	0x033A12B8 LDR X0, [X0 + 0x760]
	0x033A12BC BL 0x1C16D08
	0x033A12C0 BL 0x1C16F10
	0x033A12C4 MOV X19, X0
	0x033A12C8 ADRP X0, 0xD5D000
	0x033A12CC LDR X0, [X0 + 0x130]
	0x033A12D0 BL 0x1C16D08
	0x033A12D4 MOV X20, X0
	0x033A12D8 ADRP X0, 0xD8A000
	0x033A12DC LDR X0, [X0 + 0x970]
	0x033A12E0 BL 0x1C16D08
	0x033A12E4 MOV X2, X0
	0x033A12E8 MOV X0, X19
	0x033A12EC MOV X1, X20
	0x033A12F0 MOV X3, X31
	0x033A12F4 BL 0x3311888
	0x033A12F8 ADRP X0, 0xD8A000
	0x033A12FC LDR X0, [X0 + 0xAC0]
	0x033A1300 BL 0x1C16D08
	0x033A1304 MOV X1, X0
	0x033A1308 MOV X0, X19
	0x033A130C BL 0x1C16DEC
	0x033A1310 BL 0x1C16F20
	0x033A1314 ADRP X0, 0xD57000
	0x033A1318 LDR X0, [X0 + 0x528]
	0x033A131C BL 0x1C16D08
	0x033A1320 BL 0x1C16F10
	0x033A1324 MOV X19, X0
	0x033A1328 ADRP X0, 0xD83000
	0x033A132C LDR X0, [X0 + 0xE88]
	0x033A1330 BL 0x1C16D08
	0x033A1334 MOV X1, X0
	0x033A1338 MOV X0, X19
	0x033A133C MOV X2, X31
	0x033A1340 BL 0x330E100
	0x033A1344 B 0x33A12F8
	0x033A1348 ADRP X0, 0xD5A000
	0x033A134C LDR X0, [X0 + 0x578]
	0x033A1350 BL 0x1C16D08
	0x033A1354 BL 0x1C16F10
	0x033A1358 MOV X19, X0
	0x033A135C ADRP X0, 0xD8A000
	0x033A1360 LDR X0, [X0 + 0xAC8]
	0x033A1364 BL 0x1C16D08
	0x033A1368 MOV X1, X0
	0x033A136C MOV X0, X19
	0x033A1370 MOV X2, X31
	0x033A1374 BL 0x3314A68
	0x033A1378 B 0x33A12F8
	0x033A137C B 0x1C24D7C
	0x033A1380 MOVZ W0, 0x1
	0x033A1384 RET
	0x033A1388 MOV W0, W31
	0x033A138C RET
	0x033A1390 MOV W0, W31
	0x033A1394 RET
	0x033A1398 RET
	0x033A139C MOV X4, X31
	0x033A13A0 B 0x33A0778
	0x033A13A4 STR X30, [X31 - 0x30]!
	0x033A13A8 STP X22, X21, [X31 + 0x10]
	0x033A13AC STP X20, X19, [X31 + 0x20]
	0x033A13B0 CBZ X0, 0x33A13F8
	0x033A13B4 MOV X20, X1
	0x033A13B8 MOV W1, W31
	0x033A13BC MOV X19, X2
	0x033A13C0 MOV X21, X0
	0x033A13C4 BL 0x1C24D2C
	0x033A13C8 MOV W22, W0
	0x033A13CC MOV X0, X21
	0x033A13D0 BL 0x3395B7C
	0x033A13D4 MOV W2, W0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0x103D000
	010 Move W8, [X22+296]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0xD7D000
	019 Move X0, [X0+2328]
	020 Call 0x1C17CF4
	021 Move X0, 0xD53000
	022 Move X0, [X0+3824]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+296], W8
	026 Compare X20, 0
	027 JumpIfEqual {91}
	028 Move X8, 0xD53000
	029 Move X8, [X8+3824]
	030 Move X9, [X20]
	031 Move X8, [X8]
	032 Move W11, [X9+304]
	033 Move W10, [X8+304]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X9, [X9+200]
	036 Add X9, X9, X10
	037 NotImplemented "Instruction LDUR not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X0, X21
	040 Call Array.get_Length, X0
	041 Move W22, W0
	042 Move X0, X20
	043 Call Array.get_Length, X0
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X0, X20
	046 Call Array.get_Length, X0
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X25, 0xD7D000
	049 Move X25, [X25+2328]
	050 Move W22, W31
	051 Move X0, X21
	052 Move W1, W22
	053 Call Array.GetValue, X0, X1
	054 Move X23, X0
	055 Move X0, X20
	056 Move W1, W22
	057 Call Array.GetValue, X0, X1
	058 Compare X19, 0
	059 JumpIfEqual {103}
	060 Move X8, [X19]
	061 Move X1, [X25]
	062 Move X24, X0
	063 NotImplemented "Instruction LDRH not yet implemented."
	064 Compare X9, 0
	065 JumpIfEqual {72}
	066 Move X10, [X8+176]
	067 Add X10, X10, 8
	068 NotImplemented "Instruction LDUR not yet implemented."
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Subtract X9, X9, 1
	071 Add X10, X10, 16
	072 Move X0, X19
	073 Move W2, W31
	074 Call 0x1C5D788
	075 NotImplemented "Instruction LDRSW not yet implemented."
	076 Add X8, X8, X9
	077 Add X0, X8, 312
	078 Move X8, [X0]
	079 Move X3, [X0+8]
	080 Move X0, X19
	081 Move X1, X23
	082 Move X2, X24
	083 NotImplemented "Instruction BLR not yet implemented."
	084 Move W23, W0
	085 Move X0, X20
	086 Call Array.get_Length, X0
	087 Compare W23, 0
	088 JumpIfNotEqual {93}
	089 Add W22, W22, 1
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move W23, 1
	092 Move W23, W31
	093 Move W0, W23
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Move X25, [X31+72]
	102 Return X0
	103 Call 0x1C17F20
	104 Move X0, 0xD5B000
	105 Move X0, [X0+1400]
	106 Call 0x1C17D08
	107 Call 0x1C17F10
	108 Move X19, X0
	109 Move X0, 0xD8B000
	110 Move X0, [X0+2640]
	111 Call 0x1C17D08
	112 Move X20, X0
	113 Move X0, 0xD7D000
	114 Move X0, [X0+2344]
	115 Call 0x1C17D08
	116 Move X2, X0
	117 Move X0, X19
	118 Move X1, X20
	119 Move X3, X31
	120 Call ArgumentException..ctor, X0, X1, X2
	121 Move X0, 0xD8B000
	122 Move X0, [X0+2648]
	123 Call 0x1C17D08
	124 Move X1, X0
	125 Move X0, X19
	126 Call 0x1C17DEC

Method: System.Boolean System.Collections.IStructuralEquatable.Equals(System.Object other, System.Collections.IEqualityComparer comparer)

Disassembly:
	0x033A13D8 MOV X0, X21
	0x033A13DC MOV W1, W22
	0x033A13E0 MOV X3, X20
	0x033A13E4 MOV X4, X19
	0x033A13E8 LDP X20, X19, [X31 + 0x20]
	0x033A13EC LDP X22, X21, [X31 + 0x10]
	0x033A13F0 LDR X30, [X31], #0x30
	0x033A13F4 B 0x33A0778
	0x033A13F8 ADRP X0, 0xD57000
	0x033A13FC LDR X0, [X0 + 0x528]
	0x033A1400 BL 0x1C16D08
	0x033A1404 BL 0x1C16F10
	0x033A1408 MOV X19, X0
	0x033A140C ADRP X0, 0xD7A000
	0x033A1410 LDR X0, [X0 + 0x640]
	0x033A1414 BL 0x1C16D08
	0x033A1418 MOV X1, X0
	0x033A141C MOV X0, X19
	0x033A1420 MOV X2, X31
	0x033A1424 BL 0x330E100
	0x033A1428 ADRP X0, 0xD8A000
	0x033A142C LDR X0, [X0 + 0xAD0]
	0x033A1430 BL 0x1C16D08
	0x033A1434 MOV X1, X0
	0x033A1438 MOV X0, X19
	0x033A143C BL 0x1C16DEC
	0x033A1440 SUB W8, W1, W0
	0x033A1444 ADD W0, W0, W8, 0x1, ASR
	0x033A1448 RET
	0x033A144C STR X30, [X31 - 0x40]!
	0x033A1450 STP X24, X23, [X31 + 0x10]
	0x033A1454 STP X22, X21, [X31 + 0x20]
	0x033A1458 STP X20, X19, [X31 + 0x30]
	0x033A145C ADRP X21, 0x103C000
	0x033A1460 LDRB W8, [X21 + 0x12D]
	0x033A1464 MOV W22, W3
	0x033A1468 MOV W19, W2
	0x033A146C MOV X20, X1
	0x033A1470 MOV X23, X0
	0x033A1474 TBNZ X8, 0x0, 0x33A148C
	0x033A1478 ADRP X0, 0xD52000
	0x033A147C LDR X0, [X0 + 0x9D0]
	0x033A1480 BL 0x1C16CF4
	0x033A1484 MOVZ W8, 0x1
	0x033A1488 STRB W8, [X21 + 0x12D]
	0x033A148C CBZ X23, 0x33A166C
	0x033A1490 MOV X0, X23
	0x033A1494 BL 0x1C24D70
	0x033A1498 CMP W0, 0x1
	0x033A149C B.NE 0x33A16A0
	0x033A14A0 MOV X0, X23
	0x033A14A4 MOV W1, W31
	0x033A14A8 BL 0x1C24D2C
	0x033A14AC SUBS W24, W0, W19
	0x033A14B0 B.GT 0x33A15F4
	0x033A14B4 MOV W21, W0
	0x033A14B8 MOV X0, X23
	0x033A14BC BL 0x3395B7C
	0x033A14C0 ADD W8, W0, W21
	0x033A14C4 CMP W8, W19
	0x033A14C8 B.LT 0x33A15F4
	0x033A14CC TBNZ X22, 0x1F, 0x33A1624
	0x033A14D0 MOV X0, X23
	0x033A14D4 BL 0x3395B7C
	0x033A14D8 ADD W8, W24, W0
	0x033A14DC CMP W8, W22
	0x033A14E0 B.LT 0x33A1624
	0x033A14E4 ADRP X8, 0xD52000
	0x033A14E8 LDR X8, [X8 + 0x9D0]
	0x033A14EC MOV X0, X23
	0x033A14F0 LDR X1, [X8]
	0x033A14F4 BL 0x1C16E00
	0x033A14F8 ADD W8, W22, W19
	0x033A14FC CBZ X0, 0x33A155C
	0x033A1500 MOV X24, X0
	0x033A1504 CBZ X20, 0x33A15A0
	0x033A1508 CMP W8, W19
	0x033A150C B.LE 0x33A15D4
	0x033A1510 SXTW X8, W8
	0x033A1514 ADD X9, X24, W19, 0x3, SXTW
	0x033A1518 ADD X22, X9, 0x20
	0x033A151C SUB X23, X8, W19, SXTW
	0x033A1520 LDR W8, [X24 + 0x18]
	0x033A1524 CMP W19, W8
	0x033A1528 B.CS 0x33A15F0
	0x033A152C LDR X0, [X22]
	0x033A1530 CBZ X0, 0x33A1548
	0x033A1534 LDR X8, [X0]
	0x033A1538 MOV X1, X20
	0x033A153C LDP X9, X2, [X8 + 0x138]
	0x033A1540 BLR X9
	0x033A1544 TBNZ X0, 0x0, 0x33A15D8
	0x033A1548 ADD W19, W19, 0x1
	0x033A154C SUBS X23, X23, 0x1
	0x033A1550 ADD X22, X22, 0x8
	0x033A1554 B.NE 0x33A1520
	0x033A1558 B 0x33A15D4
	0x033A155C CMP W8, W19
	0x033A1560 B.LE 0x33A15D4
	0x033A1564 MOV X0, X23
	0x033A1568 MOV W1, W19

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0x103D000
	010 Move W8, [X22+297]
	011 Move X19, X2
	012 Move X21, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0xD7D000
	019 Move X0, [X0+2304]
	020 Call 0x1C17CF4
	021 Move X0, 0xD53000
	022 Move X0, [X0+3824]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+297], W8
	026 Compare X21, 0
	027 JumpIfEqual {97}
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X8, 0xD53000
	030 Move X8, [X8+3824]
	031 Move X9, [X21]
	032 Move X8, [X8]
	033 Move W11, [X9+304]
	034 Move W10, [X8+304]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X9, [X9+200]
	037 Add X9, X9, X10
	038 NotImplemented "Instruction LDUR not yet implemented."
	039 NotImplemented "Instruction CMP not yet implemented."
	040 NotImplemented "Instruction CSEL not yet implemented."
	041 Compare X21, 0
	042 JumpIfEqual {109}
	043 Move X0, X21
	044 Call Array.get_Length, X0
	045 Move W22, W0
	046 Move X0, X20
	047 Call Array.get_Length, X0
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move X0, X21
	050 Call Array.get_Length, X0
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X25, 0xD7D000
	053 Move X25, [X25+2304]
	054 Move W22, W31
	055 Move X0, X20
	056 Move W1, W22
	057 Call Array.GetValue, X0, X1
	058 Move X23, X0
	059 Move X0, X21
	060 Move W1, W22
	061 Call Array.GetValue, X0, X1
	062 Compare X19, 0
	063 JumpIfEqual {109}
	064 Move X8, [X19]
	065 Move X1, [X25]
	066 Move X24, X0
	067 NotImplemented "Instruction LDRH not yet implemented."
	068 Compare X9, 0
	069 JumpIfEqual {76}
	070 Move X10, [X8+176]
	071 Add X10, X10, 8
	072 NotImplemented "Instruction LDUR not yet implemented."
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Subtract X9, X9, 1
	075 Add X10, X10, 16
	076 Move X0, X19
	077 Move W2, W31
	078 Call 0x1C5D788
	079 NotImplemented "Instruction LDRSW not yet implemented."
	080 Add X8, X8, X9
	081 Add X0, X8, 312
	082 Move X8, [X0]
	083 Move X3, [X0+8]
	084 Move X0, X19
	085 Move X1, X23
	086 Move X2, X24
	087 NotImplemented "Instruction BLR not yet implemented."
	088 Move W23, W0
	089 Move TEMP, X0
	090 And TEMP, TEMP, 1
	091 Compare TEMP, 1
	092 JumpIfNotEqual {99}
	093 Move X0, X21
	094 Add W22, W22, 1
	095 Call Array.get_Length, X0
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Move W23, W31
	098 Move W23, 1
	099 And W0, W23, 1
	100 Move X20, [X31+48]
	101 Move X19, [X31+56]
	102 Move X22, [X31+32]
	103 Move X21, [X31+40]
	104 Move X24, [X31+16]
	105 Move X23, [X31+24]
	106 Move X30, [X31+64]
	107 Move X25, [X31+72]
	108 Return X0
	109 Call 0x1C17F20

Method: System.Int32 CombineHashCodes(System.Int32 h1, System.Int32 h2)

Disassembly:
	0x033A156C BL 0x3395BDC
	0x033A1570 CBZ X0, 0x33A158C
	0x033A1574 LDR X8, [X0]

ISIL:
	001 Add W8, W0, W0
	002 Xor W0, W8, W1
	003 Return X0

Method: System.Int32 System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer)

Disassembly:
	0x033A1578 MOV X1, X20
	0x033A157C LDP X9, X2, [X8 + 0x138]
	0x033A1580 BLR X9
	0x033A1584 TBZ X0, 0x0, 0x33A1590
	0x033A1588 B 0x33A15D8
	0x033A158C CBZ X20, 0x33A15D8
	0x033A1590 SUBS W22, W22, 0x1
	0x033A1594 ADD W19, W19, 0x1
	0x033A1598 B.NE 0x33A1564
	0x033A159C B 0x33A15D4
	0x033A15A0 CMP W8, W19
	0x033A15A4 B.LE 0x33A15D4
	0x033A15A8 LDR W8, [X24 + 0x18]
	0x033A15AC CMP W8, W19
	0x033A15B0 CSEL W8, W19, W8, CC
	0x033A15B4 CMP W8, W19
	0x033A15B8 B.EQ 0x33A15F0
	0x033A15BC ADD X9, X24, W19, 0x3, SXTW
	0x033A15C0 LDR X9, [X9 + 0x20]
	0x033A15C4 CBZ X9, 0x33A15D8
	0x033A15C8 SUBS W22, W22, 0x1
	0x033A15CC ADD W19, W19, 0x1
	0x033A15D0 B.NE 0x33A15B4
	0x033A15D4 SUB W19, W21, 0x1
	0x033A15D8 MOV W0, W19
	0x033A15DC LDP X20, X19, [X31 + 0x30]
	0x033A15E0 LDP X22, X21, [X31 + 0x20]
	0x033A15E4 LDP X24, X23, [X31 + 0x10]
	0x033A15E8 LDR X30, [X31], #0x40
	0x033A15EC RET
	0x033A15F0 BL 0x1C16F28
	0x033A15F4 ADRP X0, 0xD5A000
	0x033A15F8 LDR X0, [X0 + 0x760]
	0x033A15FC BL 0x1C16D08
	0x033A1600 BL 0x1C16F10
	0x033A1604 MOV X19, X0
	0x033A1608 ADRP X0, 0xD7A000
	0x033A160C LDR X0, [X0 + 0x658]
	0x033A1610 BL 0x1C16D08
	0x033A1614 MOV X20, X0
	0x033A1618 ADRP X0, 0xD7A000
	0x033A161C LDR X0, [X0 + 0x660]
	0x033A1620 B 0x33A1650
	0x033A1624 ADRP X0, 0xD5A000
	0x033A1628 LDR X0, [X0 + 0x760]
	0x033A162C BL 0x1C16D08
	0x033A1630 BL 0x1C16F10
	0x033A1634 MOV X19, X0
	0x033A1638 ADRP X0, 0xD7A000
	0x033A163C LDR X0, [X0 + 0x648]
	0x033A1640 BL 0x1C16D08
	0x033A1644 MOV X20, X0
	0x033A1648 ADRP X0, 0xD7A000
	0x033A164C LDR X0, [X0 + 0x650]
	0x033A1650 BL 0x1C16D08
	0x033A1654 MOV X2, X0
	0x033A1658 MOV X0, X19
	0x033A165C MOV X1, X20
	0x033A1660 MOV X3, X31
	0x033A1664 BL 0x3311888
	0x033A1668 B 0x33A16CC
	0x033A166C ADRP X0, 0xD57000
	0x033A1670 LDR X0, [X0 + 0x528]
	0x033A1674 BL 0x1C16D08
	0x033A1678 BL 0x1C16F10
	0x033A167C MOV X19, X0
	0x033A1680 ADRP X0, 0xD7A000
	0x033A1684 LDR X0, [X0 + 0x640]
	0x033A1688 BL 0x1C16D08
	0x033A168C MOV X1, X0
	0x033A1690 MOV X0, X19
	0x033A1694 MOV X2, X31
	0x033A1698 BL 0x330E100
	0x033A169C B 0x33A16CC
	0x033A16A0 ADRP X0, 0xD7A000
	0x033A16A4 LDR X0, [X0 + 0x5A0]
	0x033A16A8 BL 0x1C16D08
	0x033A16AC BL 0x1C16F10
	0x033A16B0 MOV X19, X0
	0x033A16B4 ADRP X0, 0xD8A000
	0x033A16B8 LDR X0, [X0 + 0xA28]
	0x033A16BC BL 0x1C16D08
	0x033A16C0 MOV X1, X0
	0x033A16C4 MOV X0, X19
	0x033A16C8 BL 0x338EC20
	0x033A16CC ADRP X0, 0xD8A000
	0x033A16D0 LDR X0, [X0 + 0xAD8]
	0x033A16D4 BL 0x1C16D08
	0x033A16D8 MOV X1, X0
	0x033A16DC MOV X0, X19
	0x033A16E0 BL 0x1C16DEC
	0x033A16E4 STR X30, [X31 - 0x30]!

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x103D000
	009 Move W8, [X21+298]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD7D000
	017 Move X0, [X0+2304]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+298], W8
	021 Compare X19, 0
	022 JumpIfEqual {79}
	023 Move X0, X20
	024 Call Array.get_Length, X0
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X0, X20
	027 Call Array.get_Length, X0
	028 Subtract W21, W0, 8
	029 Move W21, W31
	030 Move X0, X20
	031 Call Array.get_Length, X0
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X24, 0xD7D000
	034 Move X24, [X24+2304]
	035 Move W22, W31
	036 Move X0, X20
	037 Move W1, W21
	038 Call Array.GetValue, X0, X1
	039 Move X8, [X19]
	040 Move X1, [X24]
	041 Move X23, X0
	042 NotImplemented "Instruction LDRH not yet implemented."
	043 Compare X9, 0
	044 JumpIfEqual {51}
	045 Move X10, [X8+176]
	046 Add X10, X10, 8
	047 NotImplemented "Instruction LDUR not yet implemented."
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Subtract X9, X9, 1
	050 Add X10, X10, 16
	051 Move W2, 1
	052 Move X0, X19
	053 Call 0x1C5D788
	054 Move W9, [X10]
	055 Add W9, W9, 1
	056 Add X8, X8, W9
	057 Add X0, X8, 312
	058 Move X8, [X0]
	059 Move X2, [X0+8]
	060 Move X0, X19
	061 Move X1, X23
	062 NotImplemented "Instruction BLR not yet implemented."
	063 Add W8, W22, W22
	064 Xor W22, W0, W8
	065 Move X0, X20
	066 Add W21, W21, 1
	067 Call Array.get_Length, X0
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move W22, W31
	070 Move W0, W22
	071 Move X20, [X31+48]
	072 Move X19, [X31+56]
	073 Move X22, [X31+32]
	074 Move X21, [X31+40]
	075 Move X24, [X31+16]
	076 Move X23, [X31+24]
	077 Move X30, [X31+64]
	078 Return X0
	079 Move X0, 0xD58000
	080 Move X0, [X0+1320]
	081 Call 0x1C17D08
	082 Call 0x1C17F10
	083 Move X19, X0
	084 Move X0, 0xD8B000
	085 Move X0, [X0+2656]
	086 Call 0x1C17D08
	087 Move X1, X0
	088 Move X0, X19
	089 Move X2, X31
	090 Call ArgumentNullException..ctor, X0, X1
	091 Move X0, 0xD8B000
	092 Move X0, [X0+2664]
	093 Call 0x1C17D08
	094 Move X1, X0
	095 Move X0, X19
	096 Call 0x1C17DEC

Method: System.Int32 BinarySearch(System.Array array, System.Object value)

Disassembly:
	0x033A16E8 STP X22, X21, [X31 + 0x10]
	0x033A16EC STP X20, X19, [X31 + 0x20]
	0x033A16F0 CBZ X0, 0x33A1738
	0x033A16F4 MOV X20, X1
	0x033A16F8 MOV W1, W31
	0x033A16FC MOV W19, W2
	0x033A1700 MOV X21, X0
	0x033A1704 BL 0x1C24D2C
	0x033A1708 MOV W22, W0
	0x033A170C MOV X0, X21
	0x033A1710 BL 0x3395B7C
	0x033A1714 SUB W8, W22, W19
	0x033A1718 ADD W3, W8, W0
	0x033A171C MOV X0, X21
	0x033A1720 MOV X1, X20
	0x033A1724 MOV W2, W19
	0x033A1728 LDP X20, X19, [X31 + 0x20]
	0x033A172C LDP X22, X21, [X31 + 0x10]
	0x033A1730 LDR X30, [X31], #0x30
	0x033A1734 B 0x33A144C
	0x033A1738 ADRP X0, 0xD57000
	0x033A173C LDR X0, [X0 + 0x528]
	0x033A1740 BL 0x1C16D08
	0x033A1744 BL 0x1C16F10
	0x033A1748 MOV X19, X0
	0x033A174C ADRP X0, 0xD7A000
	0x033A1750 LDR X0, [X0 + 0x640]
	0x033A1754 BL 0x1C16D08
	0x033A1758 MOV X1, X0
	0x033A175C MOV X0, X19
	0x033A1760 MOV X2, X31
	0x033A1764 BL 0x330E100
	0x033A1768 ADRP X0, 0xD8A000
	0x033A176C LDR X0, [X0 + 0xAE0]
	0x033A1770 BL 0x1C16D08
	0x033A1774 MOV X1, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X0, 0
	006 JumpIfEqual {23}
	007 Move X19, X1
	008 Move W1, W31
	009 Move X20, X0
	010 Call 0x1C25D2C
	011 Move W21, W0
	012 Move X0, X20
	013 Call Array.get_Length, X0
	014 Move W2, W0
	015 Move X0, X20
	016 Move X3, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move W1, W21
	020 Move X4, X31
	021 Move X30, [X31+32]
	022 Move X21, [X31+40]
	023 Move X0, 0xD58000
	024 Move X0, [X0+1320]
	025 Call 0x1C17D08
	026 Call 0x1C17F10
	027 Move X19, X0
	028 Move X0, 0xD7B000
	029 Move X0, [X0+1600]
	030 Call 0x1C17D08
	031 Move X1, X0
	032 Move X0, X19
	033 Move X2, X31
	034 Call ArgumentNullException..ctor, X0, X1
	035 Move X0, 0xD8B000
	036 Move X0, [X0+2672]
	037 Call 0x1C17D08
	038 Move X1, X0
	039 Move X0, X19
	040 Call 0x1C17DEC

Method: TOutput[] ConvertAll(TInput[] array, System.Converter`2<TInput, TOutput> converter)

Disassembly:
	0x022E3F98 CBZ X21, 0x22E3FD8
	0x022E3F9C LDR W8, [X21 + 0x18]
	0x022E3FA0 CMP X22, X8
	0x022E3FA4 B.CS 0x22E3FD4
	0x022E3FA8 STR X0, [X24, X22, LSL #3]
	0x022E3FAC LDR W8, [X20 + 0x18]
	0x022E3FB0 ADD X22, X22, 0x1
	0x022E3FB4 CMP X22, W8, SXTW
	0x022E3FB8 B.LT 0x22E3F7C
	0x022E3FBC MOV X0, X21
	0x022E3FC0 LDP X20, X19, [X31 + 0x30]
	0x022E3FC4 LDP X22, X21, [X31 + 0x20]
	0x022E3FC8 LDP X24, X23, [X31 + 0x10]
	0x022E3FCC LDR X30, [X31], #0x40
	0x022E3FD0 RET
	0x022E3FD4 BL 0x1C16F28
	0x022E3FD8 BL 0x1C16F20
	0x022E3FDC ADRP X0, 0x1E15000
	0x022E3FE0 LDR X0, [X0 + 0x528]
	0x022E3FE4 BL 0x1C16D08
	0x022E3FE8 BL 0x1C16F10
	0x022E3FEC MOV X19, X0
	0x022E3FF0 ADRP X0, 0x1E38000
	0x022E3FF4 LDR X0, [X0 + 0x640]
	0x022E3FF8 B 0x22E4018
	0x022E3FFC ADRP X0, 0x1E15000
	0x022E4000 LDR X0, [X0 + 0x528]
	0x022E4004 BL 0x1C16D08
	0x022E4008 BL 0x1C16F10
	0x022E400C MOV X19, X0
	0x022E4010 ADRP X0, 0x1E38000
	0x022E4014 LDR X0, [X0 + 0xB08]
	0x022E4018 BL 0x1C16D08
	0x022E401C MOV X1, X0
	0x022E4020 MOV X0, X19
	0x022E4024 MOV X2, X31
	0x022E4028 BL 0x330E100
	0x022E402C MOV X0, X19
	0x022E4030 MOV X1, X21
	0x022E4034 BL 0x1C16DEC
	0x022E4038 STR X30, [X31 - 0x40]!
	0x022E403C STP X24, X23, [X31 + 0x10]
	0x022E4040 STP X22, X21, [X31 + 0x20]
	0x022E4044 STP X20, X19, [X31 + 0x30]
	0x022E4048 LDR X8, [X2 + 0x38]
	0x022E404C MOV X21, X2
	0x022E4050 MOV X19, X1
	0x022E4054 MOV X20, X0
	0x022E4058 CBNZ X8, 0x22E4064
	0x022E405C MOV X0, X21
	0x022E4060 BL 0x1C5C6E0
	0x022E4064 CBZ X20, 0x22E4110
	0x022E4068 CBZ X19, 0x22E4130
	0x022E406C LDR X8, [X21 + 0x38]
	0x022E4070 LDR X0, [X8 + 0x10]
	0x022E4074 LDRB W8, [X0 + 0x135]
	0x022E4078 TBNZ X8, 0x0, 0x22E4080
	0x022E407C BL 0x1C5C684
	0x022E4080 LDR W1, [X20 + 0x18]
	0x022E4084 BL 0x1C16D6C
	0x022E4088 LDR X8, [X20 + 0x18]
	0x022E408C MOV X21, X0
	0x022E4090 CMP W8, 0x1
	0x022E4094 B.LT 0x22E40F0
	0x022E4098 MOV X22, X31
	0x022E409C AND X8, X8, 0x0
	0x022E40A0 ADD X23, X20, 0x2C
	0x022E40A4 ADD X24, X21, 0x20
	0x022E40A8 CMP X22, W8, UXTW
	0x022E40AC B.CS 0x22E4108
	0x022E40B0 LDP S0, S1, [X23 - 0xC]
	0x022E40B4 LDP S2, S3, [X23 - 0x4]
	0x022E40B8 LDR X8, [X19 + 0x18]
	0x022E40BC LDR X0, [X19 + 0x40]
	0x022E40C0 LDR X1, [X19 + 0x28]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X2+56]
	009 Move X21, X2
	010 Move X19, X1
	011 Move X20, X0
	012 Compare X8, 0
	013 JumpIfNotEqual {16}
	014 Move X0, X21
	015 Call 0x1C5D6E0
	016 Compare X20, 0
	017 JumpIfEqual {62}
	018 Compare X19, 0
	019 JumpIfEqual {69}
	020 Move X8, [X21+56]
	021 Move X0, [X8+16]
	022 Move W8, [X0+309]
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {28}
	027 Call 0x1C5D684
	028 Move W1, [X20+24]
	029 Call 0x1C17D6C
	030 Move X8, [X20+24]
	031 Move X21, X0
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X22, X31
	034 And X8, X8, 0
	035 Add X23, X20, 32
	036 Add X24, X21, 32
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move W1, [X23]
	039 Move X8, [X19+24]
	040 Move X0, [X19+64]
	041 Move X2, [X19+40]
	042 NotImplemented "Instruction BLR not yet implemented."
	043 Compare X21, 0
	044 JumpIfEqual {61}
	045 Move W8, [X21+24]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move [X24], X0
	048 Move W8, [X20+24]
	049 Add X22, X22, 1
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X0, X21
	052 Move X20, [X31+48]
	053 Move X19, [X31+56]
	054 Move X22, [X31+32]
	055 Move X21, [X31+40]
	056 Move X24, [X31+16]
	057 Move X23, [X31+24]
	058 Move X30, [X31+64]
	059 Return X0
	060 Call 0x1C17F28
	061 Call 0x1C17F20
	062 Move X0, 0x1E15000
	063 Move X0, [X0+1320]
	064 Call 0x1C17D08
	065 Call 0x1C17F10
	066 Move X19, X0
	067 Move X0, 0x1E38000
	068 Move X0, [X0+1600]
	069 Move X0, 0x1E15000
	070 Move X0, [X0+1320]
	071 Call 0x1C17D08
	072 Call 0x1C17F10
	073 Move X19, X0
	074 Move X0, 0x1E39000
	075 Move X0, [X0+2824]
	076 Call 0x1C17D08
	077 Move X1, X0
	078 Move X0, X19
	079 Move X2, X31
	080 Call ArgumentNullException..ctor, X0, X1
	081 Move X0, X19
	082 Move X1, X21
	083 Call 0x1C17DEC

Method: System.Void Copy(System.Array sourceArray, System.Array destinationArray, System.Int64 length)

Disassembly:
	0x033A1C0C B.NE 0x33A1D8C
	0x033A1C10 ADRP X8, 0xD52000
	0x033A1C14 LDR X8, [X8 + 0x9D0]
	0x033A1C18 MOV X0, X20
	0x033A1C1C LDR X1, [X8]
	0x033A1C20 BL 0x1C16E00
	0x033A1C24 CBZ X0, 0x33A1C4C
	0x033A1C28 ADRP X8, 0xD8A000
	0x033A1C2C LDR X8, [X8 + 0xB18]
	0x033A1C30 MOV W1, W19
	0x033A1C34 MOV W2, W21
	0x033A1C38 LDP X20, X19, [X31 + 0x20]
	0x033A1C3C LDR X3, [X8]
	0x033A1C40 LDP X22, X21, [X31 + 0x10]
	0x033A1C44 LDR X30, [X31], #0x30
	0x033A1C48 B 0x214DFD4
	0x033A1C4C ADD W8, W21, W19
	0x033A1C50 SUB W21, W8, 0x1
	0x033A1C54 CMP W21, W19
	0x033A1C58 B.LE 0x33A1CA8
	0x033A1C5C MOV X0, X20
	0x033A1C60 MOV W1, W19
	0x033A1C64 BL 0x3395BDC
	0x033A1C68 MOV X22, X0
	0x033A1C6C MOV X0, X20
	0x033A1C70 MOV W1, W21
	0x033A1C74 BL 0x3395BDC
	0x033A1C78 MOV X1, X0

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move [X31-32], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X0, 0xD5B000
	006 Move X0, [X0+1888]
	007 Call 0x1C17D08
	008 Call 0x1C17F10
	009 Move X19, X0
	010 Move X0, 0xD5B000
	011 Move X0, [X0+1896]
	012 Call 0x1C17D08
	013 Move X20, X0
	014 Move X0, 0xD8B000
	015 Move X0, [X0+2416]
	016 Call 0x1C17D08
	017 Move X2, X0
	018 Move X0, X19
	019 Move X1, X20
	020 Move X3, X31
	021 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	022 Move X0, 0xD8B000
	023 Move X0, [X0+2688]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void Copy(System.Array sourceArray, System.Int64 sourceIndex, System.Array destinationArray, System.Int64 destinationIndex, System.Int64 length)

Disassembly:
	0x033A1D40 ADRP X0, 0xD8A000
	0x033A1D44 LDR X0, [X0 + 0xB20]
	0x033A1D48 BL 0x1C16D08
	0x033A1D4C MOV X1, X0
	0x033A1D50 MOV X0, X20
	0x033A1D54 BL 0x1C16DEC
	0x033A1D58 ADRP X0, 0xD5A000
	0x033A1D5C LDR X0, [X0 + 0x578]
	0x033A1D60 BL 0x1C16D08
	0x033A1D64 BL 0x1C16F10
	0x033A1D68 MOV X19, X0
	0x033A1D6C ADRP X0, 0xD7A000
	0x033A1D70 LDR X0, [X0 + 0x760]
	0x033A1D74 BL 0x1C16D08
	0x033A1D78 MOV X1, X0
	0x033A1D7C MOV X0, X19
	0x033A1D80 MOV X2, X31
	0x033A1D84 BL 0x3314A68
	0x033A1D88 B 0x33A1DB8
	0x033A1D8C ADRP X0, 0xD7A000
	0x033A1D90 LDR X0, [X0 + 0x5A0]
	0x033A1D94 BL 0x1C16D08
	0x033A1D98 BL 0x1C16F10
	0x033A1D9C MOV X19, X0
	0x033A1DA0 ADRP X0, 0xD8A000
	0x033A1DA4 LDR X0, [X0 + 0xA28]
	0x033A1DA8 BL 0x1C16D08
	0x033A1DAC MOV X1, X0
	0x033A1DB0 MOV X0, X19
	0x033A1DB4 BL 0x338EC20
	0x033A1DB8 ADRP X0, 0xD8A000
	0x033A1DBC LDR X0, [X0 + 0xB20]
	0x033A1DC0 BL 0x1C16D08
	0x033A1DC4 MOV X1, X0
	0x033A1DC8 MOV X0, X19
	0x033A1DCC BL 0x1C16DEC
	0x033A1DD0 CMP X2, W2, SXTW
	0x033A1DD4 B.NE 0x33A1DDC
	0x033A1DD8 B 0x339F798
	0x033A1DDC STR X30, [X31 - 0x20]!
	0x033A1DE0 STP X20, X19, [X31 + 0x10]
	0x033A1DE4 ADRP X0, 0xD5A000
	0x033A1DE8 LDR X0, [X0 + 0x760]
	0x033A1DEC BL 0x1C16D08
	0x033A1DF0 BL 0x1C16F10
	0x033A1DF4 MOV X19, X0
	0x033A1DF8 ADRP X0, 0xD5D000
	0x033A1DFC LDR X0, [X0 + 0x130]
	0x033A1E00 BL 0x1C16D08
	0x033A1E04 MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CMP not yet implemented."
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X20, [X31+16]
	008 Move X19, [X31+24]
	009 Move X30, [X31+32]
	010 Call Array.Copy, X0, X1, X2, X3, X4
	011 Return 
	012 Move X0, 0xD5B000
	013 Move X0, [X0+1888]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0xD82000
	018 Move X0, [X0+640]
	019 Move X0, 0xD5B000
	020 Move X0, [X0+1888]
	021 Call 0x1C17D08
	022 Call 0x1C17F10
	023 Move X19, X0
	024 Move X0, 0xD82000
	025 Move X0, [X0+648]
	026 Move X0, 0xD5B000
	027 Move X0, [X0+1888]
	028 Call 0x1C17D08
	029 Call 0x1C17F10
	030 Move X19, X0
	031 Move X0, 0xD5B000
	032 Move X0, [X0+1896]
	033 Call 0x1C17D08
	034 Move X20, X0
	035 Move X0, 0xD8B000
	036 Move X0, [X0+2416]
	037 Call 0x1C17D08
	038 Move X2, X0
	039 Move X0, X19
	040 Move X1, X20
	041 Move X3, X31
	042 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	043 Move X0, 0xD8B000
	044 Move X0, [X0+2704]
	045 Call 0x1C17D08
	046 Move X1, X0
	047 Move X0, X19
	048 Call 0x1C17DEC

Method: System.Void CopyTo(System.Array array, System.Int64 index)

Disassembly:
	0x033A1E08 ADRP X0, 0xD8A000
	0x033A1E0C LDR X0, [X0 + 0x970]
	0x033A1E10 BL 0x1C16D08
	0x033A1E14 MOV X2, X0
	0x033A1E18 MOV X0, X19
	0x033A1E1C MOV X1, X20
	0x033A1E20 MOV X3, X31
	0x033A1E24 BL 0x3311888
	0x033A1E28 ADRP X0, 0xD8A000
	0x033A1E2C LDR X0, [X0 + 0xB28]
	0x033A1E30 BL 0x1C16D08
	0x033A1E34 MOV X1, X0
	0x033A1E38 MOV X0, X19
	0x033A1E3C BL 0x1C16DEC
	0x033A1E40 STR X30, [X31 - 0x20]!
	0x033A1E44 STP X20, X19, [X31 + 0x10]
	0x033A1E48 CMP X2, W2, SXTW
	0x033A1E4C B.NE 0x33A1E64
	0x033A1E50 CMP X3, W3, SXTW
	0x033A1E54 B.NE 0x33A1E84
	0x033A1E58 LDP X20, X19, [X31 + 0x10]
	0x033A1E5C LDR X30, [X31], #0x20
	0x033A1E60 B 0x33A1EE0
	0x033A1E64 ADRP X0, 0xD5A000
	0x033A1E68 LDR X0, [X0 + 0x760]
	0x033A1E6C BL 0x1C16D08
	0x033A1E70 BL 0x1C16F10
	0x033A1E74 MOV X19, X0

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Call Array.CopyTo, X0, X1, X2
	003 Return 
	004 Move [X31-32], X30
	005 Move [X31+16], X20
	006 Move [X31+24], X19
	007 Move X0, 0xD5B000
	008 Move X0, [X0+1888]
	009 Call 0x1C17D08
	010 Call 0x1C17F10
	011 Move X19, X0
	012 Move X0, 0xD5E000
	013 Move X0, [X0+304]
	014 Call 0x1C17D08
	015 Move X20, X0
	016 Move X0, 0xD8B000
	017 Move X0, [X0+2416]
	018 Call 0x1C17D08
	019 Move X2, X0
	020 Move X0, X19
	021 Move X1, X20
	022 Move X3, X31
	023 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	024 Move X0, 0xD8B000
	025 Move X0, [X0+2712]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Void ForEach(T[] array, System.Action`1<T> action)

Disassembly:
	0x022E8120 BL 0x1C16D08
	0x022E8124 BL 0x1C16F10
	0x022E8128 MOV X20, X0
	0x022E812C ADRP X0, 0x1E33000
	0x022E8130 LDR X0, [X0 + 0x640]
	0x022E8134 BL 0x1C16D08
	0x022E8138 MOV X1, X0
	0x022E813C MOV X0, X20
	0x022E8140 MOV X2, X31
	0x022E8144 BL 0x330E100
	0x022E8148 B 0x22E8190
	0x022E814C ADRP X0, 0x1E13000
	0x022E8150 LDR X0, [X0 + 0x760]
	0x022E8154 BL 0x1C16D08
	0x022E8158 BL 0x1C16F10
	0x022E815C MOV X20, X0
	0x022E8160 ADRP X0, 0x1E33000
	0x022E8164 LDR X0, [X0 + 0x648]
	0x022E8168 BL 0x1C16D08
	0x022E816C MOV X21, X0
	0x022E8170 ADRP X0, 0x1E33000
	0x022E8174 LDR X0, [X0 + 0x650]
	0x022E8178 BL 0x1C16D08
	0x022E817C MOV X2, X0
	0x022E8180 MOV X0, X20
	0x022E8184 MOV X1, X21
	0x022E8188 MOV X3, X31
	0x022E818C BL 0x3311888
	0x022E8190 MOV X0, X20
	0x022E8194 MOV X1, X19
	0x022E8198 BL 0x1C16DEC
	0x022E819C SUB X31, X31, 0xD0
	0x022E81A0 STP X30, X23, [X31 + 0xA0]
	0x022E81A4 STP X22, X21, [X31 + 0xB0]
	0x022E81A8 STP X20, X19, [X31 + 0xC0]
	0x022E81AC LDR X8, [X4 + 0x38]
	0x022E81B0 MOV X19, X4
	0x022E81B4 MOV W20, W3
	0x022E81B8 MOV W21, W2
	0x022E81BC MOV X23, X1
	0x022E81C0 MOV X22, X0
	0x022E81C4 CBNZ X8, 0x22E81D0
	0x022E81C8 MOV X0, X19
	0x022E81CC BL 0x1C5C6E0
	0x022E81D0 CBZ X22, 0x22E8274
	0x022E81D4 TBNZ X21, 0x1F, 0x22E8244
	0x022E81D8 LDR W8, [X22 + 0x18]
	0x022E81DC SUBS W8, W8, W21
	0x022E81E0 B.LT 0x22E8244
	0x022E81E4 TBNZ X20, 0x1F, 0x22E82A8
	0x022E81E8 CMP W8, W20
	0x022E81EC B.LT 0x22E82A8
	0x022E81F0 ADD X0, X31, 0x0
	0x022E81F4 MOVZ W2, 0x50
	0x022E81F8 MOV X1, X23
	0x022E81FC BL 0x3EB1AC0
	0x022E8200 LDR X8, [X19 + 0x38]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X2+56]
	007 Move X19, X2
	008 Move X20, X1
	009 Move X21, X0
	010 Compare X8, 0
	011 JumpIfNotEqual {14}
	012 Move X0, X19
	013 Call 0x1C5D6E0
	014 Compare X21, 0
	015 JumpIfEqual {39}
	016 Compare X20, 0
	017 JumpIfEqual {46}
	018 Move X8, [X21+24]
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X19, X31
	021 And X8, X8, 0
	022 Add X22, X21, 32
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move V0, [X22]
	025 Move X8, [X20+24]
	026 Move X0, [X20+64]
	027 Move X1, [X20+40]
	028 NotImplemented "Instruction BLR not yet implemented."
	029 Move W8, [X21+24]
	030 Add X19, X19, 1
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move X30, [X31+48]
	037 Return 
	038 Call 0x1C17F28
	039 Move X0, 0x1E11000
	040 Move X0, [X0+1320]
	041 Call 0x1C17D08
	042 Call 0x1C17F10
	043 Move X20, X0
	044 Move X0, 0x1E34000
	045 Move X0, [X0+1600]
	046 Move X0, 0x1E11000
	047 Move X0, [X0+1320]
	048 Call 0x1C17D08
	049 Call 0x1C17F10
	050 Move X20, X0
	051 Move X0, 0x1E34000
	052 Move X0, [X0+3064]
	053 Call 0x1C17D08
	054 Move X1, X0
	055 Move X0, X20
	056 Move X2, X31
	057 Call ArgumentNullException..ctor, X0, X1
	058 Move X0, X20
	059 Move X1, X19
	060 Call 0x1C17DEC

Method: System.Int64 get_LongLength()

Disassembly:
	0x033A1E78 ADRP X0, 0xD7D000
	0x033A1E7C LDR X0, [X0 + 0xFC8]
	0x033A1E80 B 0x33A1EA0
	0x033A1E84 ADRP X0, 0xD5A000
	0x033A1E88 LDR X0, [X0 + 0x760]
	0x033A1E8C BL 0x1C16D08
	0x033A1E90 BL 0x1C16F10
	0x033A1E94 MOV X19, X0
	0x033A1E98 ADRP X0, 0xD7D000
	0x033A1E9C LDR X0, [X0 + 0xFD0]
	0x033A1EA0 BL 0x1C16D08
	0x033A1EA4 MOV X20, X0
	0x033A1EA8 ADRP X0, 0xD8A000
	0x033A1EAC LDR X0, [X0 + 0x970]
	0x033A1EB0 BL 0x1C16D08
	0x033A1EB4 MOV X2, X0
	0x033A1EB8 MOV X0, X19
	0x033A1EBC MOV X1, X20
	0x033A1EC0 MOV X3, X31
	0x033A1EC4 BL 0x3311888
	0x033A1EC8 ADRP X0, 0xD8A000
	0x033A1ECC LDR X0, [X0 + 0xB30]
	0x033A1ED0 BL 0x1C16D08
	0x033A1ED4 MOV X1, X0
	0x033A1ED8 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W1, W31
	006 Move X19, X0
	007 Call 0x1C25CE8
	008 Move X20, W0
	009 Move X0, X19
	010 Call 0x1C25D70
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move W21, 1
	013 Move X0, X19
	014 Move W1, W21
	015 Call 0x1C25CE8
	016 Move X8, W0
	017 Move X0, X19
	018 Multiply X20, X20, X8
	019 Add W21, W21, 1
	020 Call 0x1C25D70
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X0, X20
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 Return X0

Method: System.Int64 GetLongLength(System.Int32 dimension)

Disassembly:
	0x033A1EE0 STR X30, [X31 - 0x40]!
	0x033A1EE4 STP X24, X23, [X31 + 0x10]
	0x033A1EE8 STP X22, X21, [X31 + 0x20]
	0x033A1EEC STP X20, X19, [X31 + 0x30]
	0x033A1EF0 ADRP X23, 0x103C000

ISIL:
	001 Move [X31-16], X30
	002 Call 0x1C25CE8
	003 Move X0, W0
	004 Move X30, [X31+16]
	005 Return X0

Method: System.Object GetValue(System.Int64 index)

Disassembly:
	0x033A1EF4 ADRP X24, 0xD53000
	0x033A1EF8 LDRB W8, [X23 + 0x134]
	0x033A1EFC LDR X24, [X24 + 0xE58]
	0x033A1F00 MOV W20, W3
	0x033A1F04 MOV W22, W2
	0x033A1F08 MOV X19, X1
	0x033A1F0C MOV X21, X0
	0x033A1F10 TBNZ X8, 0x0, 0x33A1F28
	0x033A1F14 ADRP X0, 0xD53000
	0x033A1F18 LDR X0, [X0 + 0xE58]
	0x033A1F1C BL 0x1C16CF4
	0x033A1F20 MOVZ W8, 0x1
	0x033A1F24 STRB W8, [X23 + 0x134]
	0x033A1F28 LDR X0, [X24]
	0x033A1F2C MOVZ W1, 0x2
	0x033A1F30 BL 0x1C16D6C
	0x033A1F34 CBZ X0, 0x33A1F74
	0x033A1F38 LDR W8, [X0 + 0x18]
	0x033A1F3C MOV X2, X0
	0x033A1F40 CBZ W8, 0x33A1F70
	0x033A1F44 CMP W8, 0x1
	0x033A1F48 STR W22, [X2 + 0x20]
	0x033A1F4C B.EQ 0x33A1F70
	0x033A1F50 STR W20, [X2 + 0x24]
	0x033A1F54 MOV X0, X21
	0x033A1F58 MOV X1, X19
	0x033A1F5C LDP X20, X19, [X31 + 0x30]
	0x033A1F60 LDP X22, X21, [X31 + 0x20]

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Call Array.GetValue, X0, X1
	003 Return X0
	004 Move [X31-32], X30
	005 Move [X31+16], X20
	006 Move [X31+24], X19
	007 Move X0, 0xD5B000
	008 Move X0, [X0+1888]
	009 Call 0x1C17D08
	010 Call 0x1C17F10
	011 Move X19, X0
	012 Move X0, 0xD5E000
	013 Move X0, [X0+304]
	014 Call 0x1C17D08
	015 Move X20, X0
	016 Move X0, 0xD8B000
	017 Move X0, [X0+2416]
	018 Call 0x1C17D08
	019 Move X2, X0
	020 Move X0, X19
	021 Move X1, X20
	022 Move X3, X31
	023 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	024 Move X0, 0xD8B000
	025 Move X0, [X0+2720]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Object GetValue(System.Int64 index1, System.Int64 index2)

Disassembly:
	0x033A1F64 LDP X24, X23, [X31 + 0x10]
	0x033A1F68 LDR X30, [X31], #0x40
	0x033A1F6C B 0x1C24F1C
	0x033A1F70 BL 0x1C16F28
	0x033A1F74 BL 0x1C16F20
	0x033A1F78 STR X30, [X31 - 0x20]!
	0x033A1F7C STP X20, X19, [X31 + 0x10]
	0x033A1F80 CMP X2, W2, SXTW
	0x033A1F84 B.NE 0x33A1FA4
	0x033A1F88 CMP X3, W3, SXTW
	0x033A1F8C B.NE 0x33A1FC4
	0x033A1F90 CMP X4, W4, SXTW
	0x033A1F94 B.NE 0x33A1FE4
	0x033A1F98 LDP X20, X19, [X31 + 0x10]
	0x033A1F9C LDR X30, [X31], #0x20
	0x033A1FA0 B 0x33A2040
	0x033A1FA4 ADRP X0, 0xD5A000
	0x033A1FA8 LDR X0, [X0 + 0x760]
	0x033A1FAC BL 0x1C16D08
	0x033A1FB0 BL 0x1C16F10
	0x033A1FB4 MOV X19, X0
	0x033A1FB8 ADRP X0, 0xD7D000
	0x033A1FBC LDR X0, [X0 + 0xFC8]
	0x033A1FC0 B 0x33A2000
	0x033A1FC4 ADRP X0, 0xD5A000
	0x033A1FC8 LDR X0, [X0 + 0x760]
	0x033A1FCC BL 0x1C16D08
	0x033A1FD0 BL 0x1C16F10
	0x033A1FD4 MOV X19, X0
	0x033A1FD8 ADRP X0, 0xD7D000
	0x033A1FDC LDR X0, [X0 + 0xFD0]
	0x033A1FE0 B 0x33A2000
	0x033A1FE4 ADRP X0, 0xD5A000
	0x033A1FE8 LDR X0, [X0 + 0x760]
	0x033A1FEC BL 0x1C16D08
	0x033A1FF0 BL 0x1C16F10
	0x033A1FF4 MOV X19, X0
	0x033A1FF8 ADRP X0, 0xD8A000
	0x033A1FFC LDR X0, [X0 + 0xAB0]
	0x033A2000 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X20, [X31+16]
	007 Move X19, [X31+24]
	008 Move X30, [X31+32]
	009 Move X0, 0xD5B000
	010 Move X0, [X0+1888]
	011 Call 0x1C17D08
	012 Call 0x1C17F10
	013 Move X19, X0
	014 Move X0, 0xD7E000
	015 Move X0, [X0+4040]
	016 Move X0, 0xD5B000
	017 Move X0, [X0+1888]
	018 Call 0x1C17D08
	019 Call 0x1C17F10
	020 Move X19, X0
	021 Move X0, 0xD7E000
	022 Move X0, [X0+4048]
	023 Call 0x1C17D08
	024 Move X20, X0
	025 Move X0, 0xD8B000
	026 Move X0, [X0+2416]
	027 Call 0x1C17D08
	028 Move X2, X0
	029 Move X0, X19
	030 Move X1, X20
	031 Move X3, X31
	032 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	033 Move X0, 0xD8B000
	034 Move X0, [X0+2728]
	035 Call 0x1C17D08
	036 Move X1, X0
	037 Move X0, X19
	038 Call 0x1C17DEC

Method: System.Object GetValue(System.Int64 index1, System.Int64 index2, System.Int64 index3)

Disassembly:
	0x033A208C LDR X0, [X25]
	0x033A2090 MOVZ W1, 0x3
	0x033A2094 BL 0x1C16D6C
	0x033A2098 CBZ X0, 0x33A20E4
	0x033A209C LDR W8, [X0 + 0x18]
	0x033A20A0 MOV X2, X0
	0x033A20A4 CBZ W8, 0x33A20E0
	0x033A20A8 CMP W8, 0x1
	0x033A20AC STR W23, [X2 + 0x20]
	0x033A20B0 B.EQ 0x33A20E0
	0x033A20B4 CMP W8, 0x2
	0x033A20B8 STR W22, [X2 + 0x24]
	0x033A20BC B.LS 0x33A20E0
	0x033A20C0 STR W19, [X2 + 0x28]
	0x033A20C4 MOV X0, X21
	0x033A20C8 MOV X1, X20
	0x033A20CC LDP X20, X19, [X31 + 0x30]
	0x033A20D0 LDP X22, X21, [X31 + 0x20]
	0x033A20D4 LDP X24, X23, [X31 + 0x10]
	0x033A20D8 LDP X30, X25, [X31], #0x40
	0x033A20DC B 0x1C24F1C
	0x033A20E0 BL 0x1C16F28
	0x033A20E4 BL 0x1C16F20
	0x033A20E8 STR X30, [X31 - 0x30]!
	0x033A20EC STP X22, X21, [X31 + 0x10]
	0x033A20F0 STP X20, X19, [X31 + 0x20]
	0x033A20F4 ADRP X22, 0x103B000
	0x033A20F8 LDRB W8, [X22 + 0x130]
	0x033A20FC MOV X21, X2
	0x033A2100 MOV X19, X1
	0x033A2104 MOV X20, X0
	0x033A2108 TBNZ X8, 0x0, 0x33A2120
	0x033A210C ADRP X0, 0xD52000
	0x033A2110 LDR X0, [X0 + 0xE58]
	0x033A2114 BL 0x1C16CF4
	0x033A2118 MOVZ W8, 0x1
	0x033A211C STRB W8, [X22 + 0x130]
	0x033A2120 CBZ X21, 0x33A2218
	0x033A2124 MOV X0, X20
	0x033A2128 BL 0x1C24D70
	0x033A212C LDR W8, [X21 + 0x18]
	0x033A2130 CMP W0, W8
	0x033A2134 B.NE 0x33A224C
	0x033A2138 ADRP X8, 0xD52000
	0x033A213C LDR X8, [X8 + 0xE58]
	0x033A2140 MOV W1, W0
	0x033A2144 LDR X0, [X8]
	0x033A2148 BL 0x1C16D6C
	0x033A214C LDR W8, [X21 + 0x18]
	0x033A2150 MOV X2, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CMP not yet implemented."
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X20, [X31+16]
	008 Move X19, [X31+24]
	009 Move X30, [X31+32]
	010 Move X0, 0xD5A000
	011 Move X0, [X0+1888]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0xD7D000
	016 Move X0, [X0+4040]
	017 Move X0, 0xD5A000
	018 Move X0, [X0+1888]
	019 Call 0x1C17D08
	020 Call 0x1C17F10
	021 Move X19, X0
	022 Move X0, 0xD7D000
	023 Move X0, [X0+4048]
	024 Move X0, 0xD5A000
	025 Move X0, [X0+1888]
	026 Call 0x1C17D08
	027 Call 0x1C17F10
	028 Move X19, X0
	029 Move X0, 0xD8A000
	030 Move X0, [X0+2736]
	031 Call 0x1C17D08
	032 Move X20, X0
	033 Move X0, 0xD8A000
	034 Move X0, [X0+2416]
	035 Call 0x1C17D08
	036 Move X2, X0
	037 Move X0, X19
	038 Move X1, X20
	039 Move X3, X31
	040 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	041 Move X0, 0xD8A000
	042 Move X0, [X0+2744]
	043 Call 0x1C17D08
	044 Move X1, X0
	045 Move X0, X19
	046 Call 0x1C17DEC

Method: System.Object GetValue(System.Int64[] indices)

Disassembly:
	0x033A21F4 MOV X3, X31
	0x033A21F8 BL 0x3311888
	0x033A21FC ADRP X0, 0xD89000
	0x033A2200 LDR X0, [X0 + 0xB40]
	0x033A2204 BL 0x1C16D08
	0x033A2208 MOV X1, X0
	0x033A220C MOV X0, X19
	0x033A2210 BL 0x1C16DEC
	0x033A2214 BL 0x1C16F20
	0x033A2218 ADRP X0, 0xD56000
	0x033A221C LDR X0, [X0 + 0x528]
	0x033A2220 BL 0x1C16D08
	0x033A2224 BL 0x1C16F10
	0x033A2228 MOV X19, X0
	0x033A222C ADRP X0, 0xD82000
	0x033A2230 LDR X0, [X0 + 0xE88]
	0x033A2234 BL 0x1C16D08
	0x033A2238 MOV X1, X0
	0x033A223C MOV X0, X19
	0x033A2240 MOV X2, X31
	0x033A2244 BL 0x330E100
	0x033A2248 B 0x33A21FC
	0x033A224C ADRP X0, 0xD59000
	0x033A2250 LDR X0, [X0 + 0x578]
	0x033A2254 BL 0x1C16D08
	0x033A2258 BL 0x1C16F10
	0x033A225C MOV X19, X0
	0x033A2260 ADRP X0, 0xD89000
	0x033A2264 LDR X0, [X0 + 0xAC8]
	0x033A2268 BL 0x1C16D08
	0x033A226C MOV X1, X0
	0x033A2270 MOV X0, X19
	0x033A2274 MOV X2, X31
	0x033A2278 BL 0x3314A68
	0x033A227C B 0x33A21FC
	0x033A2280 B 0x1C24F1C
	0x033A2284 STR X30, [X31 - 0x20]!
	0x033A2288 STP X20, X19, [X31 + 0x10]
	0x033A228C CBZ X0, 0x33A22C8
	0x033A2290 MOV W1, W31
	0x033A2294 MOV X19, X0
	0x033A2298 BL 0x1C24D2C
	0x033A229C MOV W20, W0
	0x033A22A0 MOV X0, X19
	0x033A22A4 BL 0x3395B7C
	0x033A22A8 MOV W3, W0
	0x033A22AC MOV X0, X19
	0x033A22B0 MOV W2, W20
	0x033A22B4 LDP X20, X19, [X31 + 0x10]
	0x033A22B8 MOV X1, X31
	0x033A22BC MOV X4, X31
	0x033A22C0 LDR X30, [X31], #0x20
	0x033A22C4 B 0x33A2310
	0x033A22C8 ADRP X0, 0xD56000
	0x033A22CC LDR X0, [X0 + 0x528]
	0x033A22D0 BL 0x1C16D08
	0x033A22D4 BL 0x1C16F10
	0x033A22D8 MOV X19, X0
	0x033A22DC ADRP X0, 0xD79000
	0x033A22E0 LDR X0, [X0 + 0x640]
	0x033A22E4 BL 0x1C16D08
	0x033A22E8 MOV X1, X0
	0x033A22EC MOV X0, X19
	0x033A22F0 MOV X2, X31
	0x033A22F4 BL 0x330E100
	0x033A22F8 ADRP X0, 0xD89000
	0x033A22FC LDR X0, [X0 + 0xB48]
	0x033A2300 BL 0x1C16D08
	0x033A2304 MOV X1, X0
	0x033A2308 MOV X0, X19
	0x033A230C BL 0x1C16DEC
	0x033A2310 STR X30, [X31 - 0x40]!
	0x033A2314 STP X24, X23, [X31 + 0x10]
	0x033A2318 STP X22, X21, [X31 + 0x20]
	0x033A231C STP X20, X19, [X31 + 0x30]
	0x033A2320 CBZ X0, 0x33A2464
	0x033A2324 MOV X20, X4
	0x033A2328 MOV W19, W3
	0x033A232C MOV W21, W2
	0x033A2330 MOV X22, X1
	0x033A2334 MOV X23, X0
	0x033A2338 BL 0x1C24D70
	0x033A233C CMP W0, 0x1
	0x033A2340 B.NE 0x33A2414
	0x033A2344 CBZ X22, 0x33A2384
	0x033A2348 MOV X0, X22
	0x033A234C BL 0x1C24D70
	0x033A2350 CMP W0, 0x1
	0x033A2354 B.NE 0x33A2414
	0x033A2358 MOV X0, X23
	0x033A235C MOV W1, W31
	0x033A2360 BL 0x1C24D2C
	0x033A2364 MOV W24, W0
	0x033A2368 MOV X0, X22
	0x033A236C MOV W1, W31
	0x033A2370 BL 0x1C24D2C
	0x033A2374 CMP W24, W0
	0x033A2378 B.NE 0x33A2504

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x103C000
	006 Move W8, [X21+299]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD53000
	014 Move X0, [X0+3672]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+299], W8
	018 Compare X20, 0
	019 JumpIfEqual {77}
	020 Move X0, X19
	021 Call 0x1C25D70
	022 Move W8, [X20+24]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X8, 0xD53000
	025 Move X8, [X8+3672]
	026 Move W1, W0
	027 Move X0, [X8]
	028 Call 0x1C17D6C
	029 Move W8, [X20+24]
	030 Move X1, X0
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X9, X31
	033 Add X10, X1, 32
	034 Add X11, X20, 32
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X12, [X11]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Compare X1, 0
	039 JumpIfEqual {76}
	040 Move W13, [X1+24]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move [X10], W12
	043 Add X9, X9, 1
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X0, X19
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Call 0x1C25D7C
	051 Return X0
	052 Call 0x1C17F28
	053 Move X0, 0xD5A000
	054 Move X0, [X0+1888]
	055 Call 0x1C17D08
	056 Call 0x1C17F10
	057 Move X19, X0
	058 Move X0, 0xD5D000
	059 Move X0, [X0+304]
	060 Call 0x1C17D08
	061 Move X20, X0
	062 Move X0, 0xD8A000
	063 Move X0, [X0+2416]
	064 Call 0x1C17D08
	065 Move X2, X0
	066 Move X0, X19
	067 Move X1, X20
	068 Move X3, X31
	069 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	070 Move X0, 0xD8A000
	071 Move X0, [X0+2752]
	072 Call 0x1C17D08
	073 Move X1, X0
	074 Move X0, X19
	075 Call 0x1C17DEC
	076 Call 0x1C17F20
	077 Move X0, 0xD57000
	078 Move X0, [X0+1320]
	079 Call 0x1C17D08
	080 Call 0x1C17F10
	081 Move X19, X0
	082 Move X0, 0xD83000
	083 Move X0, [X0+3720]
	084 Call 0x1C17D08
	085 Move X1, X0
	086 Move X0, X19
	087 Move X2, X31
	088 Call ArgumentNullException..ctor, X0, X1
	089 Move X0, 0xD5A000
	090 Move X0, [X0+1400]
	091 Call 0x1C17D08
	092 Call 0x1C17F10
	093 Move X19, X0
	094 Move X0, 0xD8A000
	095 Move X0, [X0+2760]
	096 Call 0x1C17D08
	097 Move X1, X0
	098 Move X0, X19
	099 Move X2, X31
	100 Call ArgumentException..ctor, X0, X1

Method: System.Boolean get_IsFixedSize()

Disassembly:
	0x033A2380 B 0x33A2498
	0x033A2384 MOV X0, X23

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Boolean get_IsReadOnly()

Disassembly:
	0x033A2388 MOV W1, W31
	0x033A238C BL 0x1C24D2C

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Boolean get_IsSynchronized()

Disassembly:
	0x033A2390 MOV W24, W0
	0x033A2394 TBNZ X19, 0x1F, 0x33A2498

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Object get_SyncRoot()

Disassembly:
	0x033A2398 CMP W24, W21

ISIL:
	001 Return X0

Method: System.Int32 BinarySearch(System.Array array, System.Int32 index, System.Int32 length, System.Object value)

Disassembly:
	0x033A239C B.GT 0x33A2498
	0x033A23A0 MOV X0, X23

ISIL:
	001 Move X4, X31
	002 Call Array.BinarySearch, X0, X1, X2, X3, X4
	003 Return X0

Method: System.Int32 BinarySearch(System.Array array, System.Object value, System.Collections.IComparer comparer)

Disassembly:
	0x033A23A4 BL 0x3395B7C
	0x033A23A8 SUB W24, W21, W24
	0x033A23AC SUB W8, W0, W24
	0x033A23B0 CMP W8, W19
	0x033A23B4 B.LT 0x33A2444
	0x033A23B8 CBZ X22, 0x33A23D0
	0x033A23BC MOV X0, X22
	0x033A23C0 BL 0x3395B7C
	0x033A23C4 SUB W8, W0, W19
	0x033A23C8 CMP W24, W8
	0x033A23CC B.GT 0x33A2444
	0x033A23D0 CMP W19, 0x2
	0x033A23D4 B.LT 0x33A2400
	0x033A23D8 MOV X0, X23
	0x033A23DC MOV X1, X22
	0x033A23E0 MOV W2, W21
	0x033A23E4 MOV W3, W19
	0x033A23E8 MOV X4, X20
	0x033A23EC LDP X20, X19, [X31 + 0x30]
	0x033A23F0 LDP X22, X21, [X31 + 0x20]
	0x033A23F4 LDP X24, X23, [X31 + 0x10]
	0x033A23F8 LDR X30, [X31], #0x40
	0x033A23FC B 0x33A2738
	0x033A2400 LDP X20, X19, [X31 + 0x30]
	0x033A2404 LDP X22, X21, [X31 + 0x20]
	0x033A2408 LDP X24, X23, [X31 + 0x10]
	0x033A240C LDR X30, [X31], #0x40
	0x033A2410 RET
	0x033A2414 ADRP X0, 0xD79000
	0x033A2418 LDR X0, [X0 + 0x5A0]
	0x033A241C BL 0x1C16D08
	0x033A2420 BL 0x1C16F10
	0x033A2424 MOV X19, X0
	0x033A2428 ADRP X0, 0xD89000
	0x033A242C LDR X0, [X0 + 0xA28]
	0x033A2430 BL 0x1C16D08
	0x033A2434 MOV X1, X0
	0x033A2438 MOV X0, X19
	0x033A243C BL 0x338EC20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Compare X0, 0
	007 JumpIfEqual {28}
	008 Move X20, X1
	009 Move W1, W31
	010 Move X19, X2
	011 Move X21, X0
	012 Call 0x1C25D2C
	013 Move W22, W0
	014 Move X0, X21
	015 Call Array.get_Length, X0
	016 Move W2, W0
	017 Move X0, X21
	018 Move W1, W22
	019 Move X3, X20
	020 Move X4, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 Call Array.BinarySearch, X0, X1, X2, X3, X4
	027 Return X0
	028 Move X0, 0xD57000
	029 Move X0, [X0+1320]
	030 Call 0x1C17D08
	031 Call 0x1C17F10
	032 Move X19, X0
	033 Move X0, 0xD7A000
	034 Move X0, [X0+1600]
	035 Call 0x1C17D08
	036 Move X1, X0
	037 Move X0, X19
	038 Move X2, X31
	039 Call ArgumentNullException..ctor, X0, X1
	040 Move X0, 0xD8A000
	041 Move X0, [X0+2768]
	042 Call 0x1C17D08
	043 Move X1, X0
	044 Move X0, X19
	045 Call 0x1C17DEC

Method: System.Int32 BinarySearch(System.Array array, System.Int32 index, System.Int32 length, System.Object value, System.Collections.IComparer comparer)

Disassembly:
	0x033A1778 MOV X0, X19
	0x033A177C BL 0x1C16DEC
	0x033A1780 STP X30, X21, [X31 - 0x20]!
	0x033A1784 STP X20, X19, [X31 + 0x10]
	0x033A1788 CBZ X0, 0x33A17C0
	0x033A178C MOV X19, X1
	0x033A1790 MOV X20, X0
	0x033A1794 BL 0x3395B7C
	0x033A1798 MOV W21, W0
	0x033A179C MOV X0, X20
	0x033A17A0 BL 0x3395B7C
	0x033A17A4 MOV W3, W0
	0x033A17A8 MOV X0, X20
	0x033A17AC MOV X1, X19
	0x033A17B0 LDP X20, X19, [X31 + 0x10]
	0x033A17B4 SUB W2, W21, 0x1
	0x033A17B8 LDP X30, X21, [X31], #0x20
	0x033A17BC B 0x33A1808
	0x033A17C0 ADRP X0, 0xD57000
	0x033A17C4 LDR X0, [X0 + 0x528]
	0x033A17C8 BL 0x1C16D08
	0x033A17CC BL 0x1C16F10
	0x033A17D0 MOV X19, X0
	0x033A17D4 ADRP X0, 0xD7A000
	0x033A17D8 LDR X0, [X0 + 0x640]
	0x033A17DC BL 0x1C16D08
	0x033A17E0 MOV X1, X0
	0x033A17E4 MOV X0, X19
	0x033A17E8 MOV X2, X31
	0x033A17EC BL 0x330E100
	0x033A17F0 ADRP X0, 0xD8A000
	0x033A17F4 LDR X0, [X0 + 0xAE8]
	0x033A17F8 BL 0x1C16D08
	0x033A17FC MOV X1, X0
	0x033A1800 MOV X0, X19
	0x033A1804 BL 0x1C16DEC
	0x033A1808 STR X30, [X31 - 0x40]!
	0x033A180C STP X24, X23, [X31 + 0x10]
	0x033A1810 STP X22, X21, [X31 + 0x20]
	0x033A1814 STP X20, X19, [X31 + 0x30]
	0x033A1818 ADRP X23, 0x103C000
	0x033A181C LDRB W8, [X23 + 0x12E]
	0x033A1820 MOV W22, W3
	0x033A1824 MOV W19, W2
	0x033A1828 MOV X20, X1
	0x033A182C MOV X21, X0
	0x033A1830 TBNZ X8, 0x0, 0x33A1848
	0x033A1834 ADRP X0, 0xD52000
	0x033A1838 LDR X0, [X0 + 0x9D0]
	0x033A183C BL 0x1C16CF4
	0x033A1840 MOVZ W8, 0x1
	0x033A1844 STRB W8, [X23 + 0x12E]
	0x033A1848 CBZ X21, 0x33A19C0
	0x033A184C MOV X0, X21
	0x033A1850 BL 0x3395B7C
	0x033A1854 CBZ W0, 0x33A1970
	0x033A1858 TBNZ X19, 0x1F, 0x33A1990
	0x033A185C MOV X0, X21
	0x033A1860 BL 0x3395B7C
	0x033A1864 CMP W0, W19
	0x033A1868 B.LE 0x33A1990
	0x033A186C TBNZ X22, 0x1F, 0x33A19F4
	0x033A1870 ADD W8, W19, 0x1
	0x033A1874 CMP W8, W22
	0x033A1878 B.LT 0x33A1A24
	0x033A187C MOV X0, X21
	0x033A1880 BL 0x1C24D70
	0x033A1884 CMP W0, 0x1
	0x033A1888 B.NE 0x33A1A6C
	0x033A188C ADRP X8, 0xD52000
	0x033A1890 LDR X8, [X8 + 0x9D0]
	0x033A1894 MOV X0, X21
	0x033A1898 LDR X1, [X8]
	0x033A189C BL 0x1C16E00
	0x033A18A0 SUB W24, W19, W22
	0x033A18A4 CBZ X0, 0x33A18FC
	0x033A18A8 MOV X23, X0
	0x033A18AC CMP W22, 0x1
	0x033A18B0 CBZ X20, 0x33A1940
	0x033A18B4 B.LT 0x33A1970
	0x033A18B8 MOV W19, W19
	0x033A18BC SXTW X21, W24
	0x033A18C0 ADD X22, X23, 0x20
	0x033A18C4 LDR W8, [X23 + 0x18]
	0x033A18C8 CMP W19, W8
	0x033A18CC B.CS 0x33A198C
	0x033A18D0 LDR X0, [X22, X19, LSL #3]
	0x033A18D4 CBZ X0, 0x33A18EC
	0x033A18D8 LDR X8, [X0]
	0x033A18DC MOV X1, X20
	0x033A18E0 LDP X9, X2, [X8 + 0x138]
	0x033A18E4 BLR X9
	0x033A18E8 TBNZ X0, 0x0, 0x33A1974
	0x033A18EC SUB X19, X19, 0x1
	0x033A18F0 CMP X19, X21
	0x033A18F4 B.GT 0x33A18C4
	0x033A18F8 B 0x33A1970
	0x033A18FC CMP W22, 0x1
	0x033A1900 B.LT 0x33A1970
	0x033A1904 MOV X0, X21
	0x033A1908 MOV W1, W19
	0x033A190C BL 0x3395BDC
	0x033A1910 CBZ X0, 0x33A192C
	0x033A1914 LDR X8, [X0]
	0x033A1918 MOV X1, X20
	0x033A191C LDP X9, X2, [X8 + 0x138]
	0x033A1920 BLR X9
	0x033A1924 TBZ X0, 0x0, 0x33A1930
	0x033A1928 B 0x33A1974
	0x033A192C CBZ X20, 0x33A1974
	0x033A1930 SUB W19, W19, 0x1
	0x033A1934 CMP W19, W24
	0x033A1938 B.GT 0x33A1904
	0x033A193C B 0x33A1970
	0x033A1940 B.LT 0x33A1970
	0x033A1944 LDR W8, [X23 + 0x18]
	0x033A1948 ADD X9, X23, W19, 0x3, SXTW
	0x033A194C ADD X9, X9, 0x20
	0x033A1950 CMP W19, W8
	0x033A1954 B.CS 0x33A198C
	0x033A1958 LDR X10, [X9]
	0x033A195C CBZ X10, 0x33A1974
	0x033A1960 SUB W19, W19, 0x1
	0x033A1964 CMP W19, W24
	0x033A1968 SUB X9, X9, 0x8
	0x033A196C B.GT 0x33A1950
	0x033A1970 MOVN W19, 0x0
	0x033A1974 MOV W0, W19
	0x033A1978 LDP X20, X19, [X31 + 0x30]
	0x033A197C LDP X22, X21, [X31 + 0x20]
	0x033A1980 LDP X24, X23, [X31 + 0x10]
	0x033A1984 LDR X30, [X31], #0x40
	0x033A1988 RET
	0x033A198C BL 0x1C16F28
	0x033A1990 ADRP X0, 0xD5A000
	0x033A1994 LDR X0, [X0 + 0x760]
	0x033A1998 BL 0x1C16D08
	0x033A199C BL 0x1C16F10
	0x033A19A0 MOV X19, X0
	0x033A19A4 ADRP X0, 0xD7A000
	0x033A19A8 LDR X0, [X0 + 0x658]
	0x033A19AC BL 0x1C16D08
	0x033A19B0 MOV X20, X0
	0x033A19B4 ADRP X0, 0xD7A000
	0x033A19B8 LDR X0, [X0 + 0x660]
	0x033A19BC B 0x33A1A50
	0x033A19C0 ADRP X0, 0xD57000
	0x033A19C4 LDR X0, [X0 + 0x528]
	0x033A19C8 BL 0x1C16D08
	0x033A19CC BL 0x1C16F10
	0x033A19D0 MOV X19, X0
	0x033A19D4 ADRP X0, 0xD7A000
	0x033A19D8 LDR X0, [X0 + 0x640]
	0x033A19DC BL 0x1C16D08
	0x033A19E0 MOV X1, X0
	0x033A19E4 MOV X0, X19
	0x033A19E8 MOV X2, X31
	0x033A19EC BL 0x330E100
	0x033A19F0 B 0x33A1A98
	0x033A19F4 ADRP X0, 0xD5A000
	0x033A19F8 LDR X0, [X0 + 0x760]
	0x033A19FC BL 0x1C16D08
	0x033A1A00 BL 0x1C16F10
	0x033A1A04 MOV X19, X0
	0x033A1A08 ADRP X0, 0xD7A000
	0x033A1A0C LDR X0, [X0 + 0x648]
	0x033A1A10 BL 0x1C16D08
	0x033A1A14 MOV X20, X0
	0x033A1A18 ADRP X0, 0xD7A000
	0x033A1A1C LDR X0, [X0 + 0x650]
	0x033A1A20 B 0x33A1A50
	0x033A1A24 ADRP X0, 0xD5A000
	0x033A1A28 LDR X0, [X0 + 0x760]
	0x033A1A2C BL 0x1C16D08
	0x033A1A30 BL 0x1C16F10
	0x033A1A34 MOV X19, X0
	0x033A1A38 ADRP X0, 0xD8A000
	0x033A1A3C LDR X0, [X0 + 0xAF0]
	0x033A1A40 BL 0x1C16D08
	0x033A1A44 MOV X20, X0
	0x033A1A48 ADRP X0, 0xD8A000
	0x033A1A4C LDR X0, [X0 + 0xAF8]
	0x033A1A50 BL 0x1C16D08
	0x033A1A54 MOV X2, X0
	0x033A1A58 MOV X0, X19
	0x033A1A5C MOV X1, X20
	0x033A1A60 MOV X3, X31
	0x033A1A64 BL 0x3311888
	0x033A1A68 B 0x33A1A98
	0x033A1A6C ADRP X0, 0xD7A000
	0x033A1A70 LDR X0, [X0 + 0x5A0]
	0x033A1A74 BL 0x1C16D08
	0x033A1A78 BL 0x1C16F10
	0x033A1A7C MOV X19, X0
	0x033A1A80 ADRP X0, 0xD8A000
	0x033A1A84 LDR X0, [X0 + 0xA28]
	0x033A1A88 BL 0x1C16D08
	0x033A1A8C MOV X1, X0
	0x033A1A90 MOV X0, X19
	0x033A1A94 BL 0x338EC20
	0x033A1A98 ADRP X0, 0xD8A000
	0x033A1A9C LDR X0, [X0 + 0xB00]
	0x033A1AA0 BL 0x1C16D08
	0x033A1AA4 MOV X1, X0
	0x033A1AA8 MOV X0, X19
	0x033A1AAC BL 0x1C16DEC
	0x033A1AB0 CBZ X0, 0x33A1ABC
	0x033A1AB4 ADD W3, W2, 0x1
	0x033A1AB8 B 0x33A1808
	0x033A1ABC STP X30, X19, [X31 - 0x10]!
	0x033A1AC0 ADRP X0, 0xD57000
	0x033A1AC4 LDR X0, [X0 + 0x528]
	0x033A1AC8 BL 0x1C16D08
	0x033A1ACC BL 0x1C16F10
	0x033A1AD0 MOV X19, X0
	0x033A1AD4 ADRP X0, 0xD7A000
	0x033A1AD8 LDR X0, [X0 + 0x640]
	0x033A1ADC BL 0x1C16D08
	0x033A1AE0 MOV X1, X0
	0x033A1AE4 MOV X0, X19
	0x033A1AE8 MOV X2, X31
	0x033A1AEC BL 0x330E100
	0x033A1AF0 ADRP X0, 0xD8A000
	0x033A1AF4 LDR X0, [X0 + 0xB08]
	0x033A1AF8 BL 0x1C16D08
	0x033A1AFC MOV X1, X0
	0x033A1B00 MOV X0, X19
	0x033A1B04 BL 0x1C16DEC
	0x033A1B08 STR X30, [X31 - 0x20]!
	0x033A1B0C STP X20, X19, [X31 + 0x10]
	0x033A1B10 CBZ X0, 0x33A1B44
	0x033A1B14 MOV W1, W31
	0x033A1B18 MOV X19, X0
	0x033A1B1C BL 0x1C24D2C
	0x033A1B20 MOV W20, W0
	0x033A1B24 MOV X0, X19
	0x033A1B28 BL 0x3395B7C
	0x033A1B2C MOV W2, W0
	0x033A1B30 MOV X0, X19
	0x033A1B34 MOV W1, W20
	0x033A1B38 LDP X20, X19, [X31 + 0x10]
	0x033A1B3C LDR X30, [X31], #0x20
	0x033A1B40 B 0x33A1B8C
	0x033A1B44 ADRP X0, 0xD57000
	0x033A1B48 LDR X0, [X0 + 0x528]
	0x033A1B4C BL 0x1C16D08
	0x033A1B50 BL 0x1C16F10
	0x033A1B54 MOV X19, X0
	0x033A1B58 ADRP X0, 0xD7A000
	0x033A1B5C LDR X0, [X0 + 0x640]
	0x033A1B60 BL 0x1C16D08
	0x033A1B64 MOV X1, X0
	0x033A1B68 MOV X0, X19
	0x033A1B6C MOV X2, X31
	0x033A1B70 BL 0x330E100
	0x033A1B74 ADRP X0, 0xD8A000
	0x033A1B78 LDR X0, [X0 + 0xB10]
	0x033A1B7C BL 0x1C16D08
	0x033A1B80 MOV X1, X0
	0x033A1B84 MOV X0, X19
	0x033A1B88 BL 0x1C16DEC
	0x033A1B8C STR X30, [X31 - 0x30]!
	0x033A1B90 STP X22, X21, [X31 + 0x10]
	0x033A1B94 STP X20, X19, [X31 + 0x20]
	0x033A1B98 ADRP X22, 0x103C000
	0x033A1B9C LDRB W8, [X22 + 0x12F]
	0x033A1BA0 MOV W21, W2
	0x033A1BA4 MOV W19, W1
	0x033A1BA8 MOV X20, X0
	0x033A1BAC TBNZ X8, 0x0, 0x33A1BD0
	0x033A1BB0 ADRP X0, 0xD8A000
	0x033A1BB4 LDR X0, [X0 + 0xB18]
	0x033A1BB8 BL 0x1C16CF4
	0x033A1BBC ADRP X0, 0xD52000
	0x033A1BC0 LDR X0, [X0 + 0x9D0]
	0x033A1BC4 BL 0x1C16CF4
	0x033A1BC8 MOVZ W8, 0x1
	0x033A1BCC STRB W8, [X22 + 0x12F]
	0x033A1BD0 CBZ X20, 0x33A1CB8
	0x033A1BD4 MOV X0, X20
	0x033A1BD8 MOV W1, W31
	0x033A1BDC BL 0x1C24D2C
	0x033A1BE0 TBNZ X21, 0x1F, 0x33A1CEC
	0x033A1BE4 SUBS W22, W0, W19
	0x033A1BE8 B.GT 0x33A1CEC
	0x033A1BEC MOV X0, X20
	0x033A1BF0 BL 0x3395B7C
	0x033A1BF4 ADD W8, W22, W0
	0x033A1BF8 CMP W8, W21
	0x033A1BFC B.LT 0x33A1D58
	0x033A1C00 MOV X0, X20
	0x033A1C04 BL 0x1C24D70
	0x033A1C08 CMP W0, 0x1

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X24, 0x103D000
	011 Move W8, [X24+300]
	012 Move X21, X4
	013 Move X20, X3
	014 Move W23, W2
	015 Move W19, W1
	016 Move X22, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {32}
	021 Move X0, 0xD7C000
	022 Move X0, [X0+3376]
	023 Call 0x1C17CF4
	024 Move X0, 0xD7D000
	025 Move X0, [X0+2328]
	026 Call 0x1C17CF4
	027 Move X0, 0xD53000
	028 Move X0, [X0+2512]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X24+300], W8
	032 Compare X22, 0
	033 JumpIfEqual {171}
	034 Move TEMP, X23
	035 And TEMP, TEMP, -2147483648
	036 Compare TEMP, -2147483648
	037 JumpIfEqual {183}
	038 Move TEMP, X19
	039 And TEMP, TEMP, -2147483648
	040 Compare TEMP, -2147483648
	041 JumpIfEqual {183}
	042 Move X0, X22
	043 Call Array.get_Length, X0
	044 Subtract W8, W0, W19
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X0, X22
	047 Call 0x1C25D70
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move X24, 0xD53000
	050 Move X24, [X24+2512]
	051 Compare X21, 0
	052 JumpIfNotEqual {63}
	053 Move X21, 0xD7C000
	054 Move X21, [X21+3376]
	055 Move X0, [X21]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {61}
	059 Call 0x1C17DFC
	060 Move X0, [X21]
	061 Move X8, [X0+184]
	062 Move X21, [X8]
	063 Move X1, [X24]
	064 Add W8, W19, W23
	065 Move X0, X22
	066 Subtract W25, W8, 1
	067 Call 0x1C17E00
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Compare X0, 0
	070 Invalid "Jump target not found in method."
	071 Move X26, 0xD7D000
	072 Move X26, [X26+2328]
	073 Move X24, X0
	074 Move W8, [X24+24]
	075 Subtract W9, W25, W19
	076 Add W23, W19, W9
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Compare X21, 0
	079 JumpIfEqual {168}
	080 Move X8, [X21]
	081 Add X9, X24, W23
	082 Move X22, [X9+32]
	083 Move X1, [X26]
	084 NotImplemented "Instruction LDRH not yet implemented."
	085 Compare X9, 0
	086 JumpIfEqual {93}
	087 Move X10, [X8+176]
	088 Add X10, X10, 8
	089 NotImplemented "Instruction LDUR not yet implemented."
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Subtract X9, X9, 1
	092 Add X10, X10, 16
	093 Move X0, X21
	094 Move W2, W31
	095 Call 0x1C5D788
	096 NotImplemented "Instruction LDRSW not yet implemented."
	097 Add X8, X8, X9
	098 Add X0, X8, 312
	099 Move X8, [X0]
	100 Move X3, [X0+8]
	101 Move X0, X21
	102 Move X1, X22
	103 Move X2, X20
	104 NotImplemented "Instruction BLR not yet implemented."
	105 Compare W0, 0
	106 JumpIfEqual {115}
	107 Move TEMP, X0
	108 And TEMP, TEMP, -2147483648
	109 Compare TEMP, -2147483648
	110 JumpIfNotEqual {113}
	111 Add W19, W23, 1
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Subtract W25, W23, 1
	114 NotImplemented "Instruction ORN not yet implemented."
	115 Move W0, W23
	116 Move X20, [X31+64]
	117 Move X19, [X31+72]
	118 Move X22, [X31+48]
	119 Move X21, [X31+56]
	120 Move X24, [X31+32]
	121 Move X23, [X31+40]
	122 Move X26, [X31+16]
	123 Move X25, [X31+24]
	124 Move X30, [X31+80]
	125 Return X0
	126 Move X26, 0xD7D000
	127 Move X26, [X26+2328]
	128 Subtract W8, W25, W19
	129 Add W23, W19, W8
	130 Move X0, X22
	131 Move W1, W23
	132 Call Array.GetValue, X0, X1
	133 Compare X21, 0
	134 JumpIfEqual {170}
	135 Move X8, [X21]
	136 Move X1, [X26]
	137 Move X24, X0
	138 NotImplemented "Instruction LDRH not yet implemented."
	139 Compare X9, 0
	140 JumpIfEqual {147}
	141 Move X10, [X8+176]
	142 Add X10, X10, 8
	143 NotImplemented "Instruction LDUR not yet implemented."
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Subtract X9, X9, 1
	146 Add X10, X10, 16
	147 Move X0, X21
	148 Move W2, W31
	149 Call 0x1C5D788
	150 NotImplemented "Instruction LDRSW not yet implemented."
	151 Add X8, X8, X9
	152 Add X0, X8, 312
	153 Move X8, [X0]
	154 Move X3, [X0+8]
	155 Move X0, X21
	156 Move X1, X24
	157 Move X2, X20
	158 NotImplemented "Instruction BLR not yet implemented."
	159 Compare W0, 0
	160 JumpIfEqual {115}
	161 Move TEMP, X0
	162 And TEMP, TEMP, -2147483648
	163 Compare TEMP, -2147483648
	164 JumpIfNotEqual {167}
	165 Add W19, W23, 1
	166 NotImplemented "Instruction CMP not yet implemented."
	167 Subtract W25, W23, 1
	168 Call 0x1C17F20
	169 Call 0x1C17F28
	170 Call 0x1C17F20
	171 Move X0, 0xD58000
	172 Move X0, [X0+1320]
	173 Call 0x1C17D08
	174 Call 0x1C17F10
	175 Move X19, X0
	176 Move X0, 0xD7B000
	177 Move X0, [X0+1600]
	178 Call 0x1C17D08
	179 Move X1, X0
	180 Move X0, X19
	181 Move X2, X31
	182 Call ArgumentNullException..ctor, X0, X1
	183 Move X8, 0xD5B000
	184 Move X9, 0xD5E000
	185 Move X8, [X8+1896]
	186 Move X9, [X9+304]
	187 NotImplemented "Instruction CMP not yet implemented."
	188 NotImplemented "Instruction CSEL not yet implemented."
	189 Call 0x1C17D08
	190 Move X19, X0
	191 Move X0, 0xD5B000
	192 Move X0, [X0+1888]
	193 Call 0x1C17D08
	194 Call 0x1C17F10
	195 Move X20, X0
	196 Move X0, 0xD7B000
	197 Move X0, [X0+1648]
	198 Call 0x1C17D08
	199 Move X2, X0
	200 Move X0, X20
	201 Move X1, X19
	202 Move X3, X31
	203 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	204 Move X0, 0xD5B000
	205 Move X0, [X0+1400]
	206 Call 0x1C17D08
	207 Call 0x1C17F10
	208 Move X19, X0
	209 Move X0, 0xD7B000
	210 Move X0, [X0+1888]
	211 Call 0x1C17D08
	212 Move X1, X0
	213 Move X0, X19
	214 Move X2, X31
	215 Call ArgumentException..ctor, X0, X1
	216 Move X0, 0xD7B000
	217 Move X0, [X0+1440]
	218 Call 0x1C17D08
	219 Call 0x1C17F10
	220 Move X19, X0
	221 Move X0, 0xD8B000
	222 Move X0, [X0+2600]
	223 Call 0x1C17D08
	224 Move X1, X0
	225 Move X0, X19
	226 Call RankException..ctor, X0, X1
	227 Move X0, 0xD8B000
	228 Move X0, [X0+2680]
	229 Call 0x1C17D08
	230 Move X1, X0
	231 Move X0, X19
	232 Call 0x1C17DEC
	233 Move X19, X0
	234 NotImplemented "Instruction CMP not yet implemented."
	235 Move X0, X19
	236 Call 0x3EB2AD0
	237 Move X19, X0
	238 Move X0, 0xD53000
	239 Move X0, [X0+2000]
	240 Call 0x1C17D08
	241 Move X8, [X19]
	242 Move X1, [X8]
	243 Call 0x1C18270
	244 Move TEMP, X0
	245 And TEMP, TEMP, 1
	246 Compare TEMP, 1
	247 JumpIfEqual {273}
	248 Move W0, 8
	249 Call 0x3EB2AF0
	250 Move X8, [X19]
	251 Move [X0], X8
	252 Move X1, 0xB14000
	253 Add X1, X1, 3672
	254 Move X2, X31
	255 Call 0x3EB2B00
	256 Move X19, X0
	257 Call 0x3EB2AE0
	258 Move X19, X0
	259 NotImplemented "Instruction CMP not yet implemented."
	260 Move X0, X19
	261 Call 0x3EB2AD0
	262 Move X19, X0
	263 Move X0, 0xD53000
	264 Move X0, [X0+2000]
	265 Call 0x1C17D08
	266 Move X8, [X19]
	267 Move X1, [X8]
	268 Call 0x1C18270
	269 Move TEMP, X0
	270 And TEMP, TEMP, 1
	271 Compare TEMP, 1
	272 JumpIfNotEqual {294}
	273 Move X19, [X19]
	274 Call 0x3EB2AE0
	275 Move X0, 0xD53000
	276 Move X0, [X0+1456]
	277 Call 0x1C17D08
	278 Call 0x1C17F10
	279 Move X20, X0
	280 Move X0, 0xD7C000
	281 Move X0, [X0+3008]
	282 Call 0x1C17D08
	283 Move X1, X0
	284 Move X0, X20
	285 Move X2, X19
	286 Move X3, X31
	287 Call InvalidOperationException..ctor, X0, X1, X2
	288 Move X0, 0xD8B000
	289 Move X0, [X0+2680]
	290 Call 0x1C17D08
	291 Move X1, X0
	292 Move X0, X20
	293 Call 0x1C17DEC
	294 Move W0, 8
	295 Call 0x3EB2AF0
	296 Move X8, [X19]
	297 Move [X0], X8
	298 Move X1, 0xB14000
	299 Add X1, X1, 3672
	300 Move X2, X31
	301 Call 0x3EB2B00
	302 Move X19, X0
	303 Call 0x3EB2AE0
	304 Move X0, X19
	305 Call 0x1D2D690
	306 Call 0x1991590

Method: System.Int32 GetMedian(System.Int32 low, System.Int32 hi)

Disassembly:
	0x033A2440 B 0x33A2534
	0x033A2444 ADRP X0, 0xD59000
	0x033A2448 LDR X0, [X0 + 0x578]

ISIL:
	001 Subtract W8, W1, W0
	002 Add W0, W0, W8
	003 Return X0

Method: System.Int32 BinarySearch(T[] array, T value)

Disassembly:
	0x022CAA48 BL 0x1C16DFC
	0x022CAA4C LDR X0, [X26 + 0x20]
	0x022CAA50 LDRB W8, [X0 + 0x135]
	0x022CAA54 TBNZ X8, 0x0, 0x22CAA5C
	0x022CAA58 BL 0x1C5C684
	0x022CAA5C LDR X8, [X0 + 0xC0]
	0x022CAA60 LDR X0, [X8 + 0x48]
	0x022CAA64 LDRB W8, [X0 + 0x135]
	0x022CAA68 TBNZ X8, 0x0, 0x22CAA70
	0x022CAA6C BL 0x1C5C684
	0x022CAA70 LDR X8, [X0 + 0xB8]
	0x022CAA74 LDR X0, [X8]
	0x022CAA78 CBZ X0, 0x22CAB80
	0x022CAA7C LDR X8, [X19 + 0x38]
	0x022CAA80 MOV X1, X25
	0x022CAA84 MOV W2, W23
	0x022CAA88 MOV W3, W24
	0x022CAA8C LDR X7, [X8 + 0x30]
	0x022CAA90 MOV X4, X22
	0x022CAA94 MOV X5, X21
	0x022CAA98 MOV X6, X20
	0x022CAA9C LDP X20, X19, [X31 + 0x40]
	0x022CAAA0 LDP X22, X21, [X31 + 0x30]
	0x022CAAA4 LDP X24, X23, [X31 + 0x20]
	0x022CAAA8 LDP X26, X25, [X31 + 0x10]
	0x022CAAAC LDR X30, [X31], #0x50
	0x022CAAB0 B 0x2C36044
	0x022CAAB4 ADRP X0, 0x1E2E000
	0x022CAAB8 LDR X0, [X0 + 0x528]
	0x022CAABC BL 0x1C16D08
	0x022CAAC0 BL 0x1C16F10
	0x022CAAC4 MOV X20, X0
	0x022CAAC8 ADRP X0, 0x1E51000
	0x022CAACC LDR X0, [X0 + 0x640]
	0x022CAAD0 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+56]
	006 Move X19, X2
	007 Move X20, X1
	008 Move X21, X0
	009 Compare X8, 0
	010 JumpIfNotEqual {13}
	011 Move X0, X19
	012 Call 0x1C5D6E0
	013 Compare X21, 0
	014 JumpIfEqual {28}
	015 Move X8, [X19+56]
	016 Move W2, [X21+24]
	017 Move X3, X20
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X5, [X8+16]
	021 Move X0, X21
	022 Move W1, W31
	023 Move X4, X31
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Call Array.BinarySearch, X0, X1, X2, X3, X4
	027 Return X0
	028 Move X0, 0x1E2F000
	029 Move X0, [X0+1320]
	030 Call 0x1C17D08
	031 Call 0x1C17F10
	032 Move X20, X0
	033 Move X0, 0x1E52000
	034 Move X0, [X0+1600]
	035 Call 0x1C17D08
	036 Move X1, X0
	037 Move X0, X20
	038 Move X2, X31
	039 Call ArgumentNullException..ctor, X0, X1
	040 Move X0, X20
	041 Move X1, X19
	042 Call 0x1C17DEC

Method: System.Int32 BinarySearch(T[] array, T value, System.Collections.Generic.IComparer`1<T> comparer)

Disassembly:
	0x022CAC04 LDR X0, [X25 + 0x20]
	0x022CAC08 LDRB W8, [X0 + 0x135]
	0x022CAC0C TBNZ X8, 0x0, 0x22CAC14
	0x022CAC10 BL 0x1C5C684
	0x022CAC14 LDR X8, [X0 + 0xC0]
	0x022CAC18 LDR X0, [X8 + 0x48]
	0x022CAC1C LDRB W8, [X0 + 0x135]
	0x022CAC20 TBNZ X8, 0x0, 0x22CAC28
	0x022CAC24 BL 0x1C5C684
	0x022CAC28 LDR W8, [X0 + 0xE0]
	0x022CAC2C CBNZ W8, 0x22CAC34
	0x022CAC30 BL 0x1C16DFC
	0x022CAC34 LDR X0, [X25 + 0x20]
	0x022CAC38 LDRB W8, [X0 + 0x135]
	0x022CAC3C TBNZ X8, 0x0, 0x22CAC44
	0x022CAC40 BL 0x1C5C684
	0x022CAC44 LDR X8, [X0 + 0xC0]
	0x022CAC48 LDR X0, [X8 + 0x48]
	0x022CAC4C LDRB W8, [X0 + 0x135]
	0x022CAC50 TBNZ X8, 0x0, 0x22CAC58
	0x022CAC54 BL 0x1C5C684
	0x022CAC58 LDR X8, [X0 + 0xB8]
	0x022CAC5C ADD X0, X31, 0x0
	0x022CAC60 MOVZ W2, 0x50
	0x022CAC64 MOV X1, X24
	0x022CAC68 LDR X25, [X8]
	0x022CAC6C BL 0x3EB1AC0
	0x022CAC70 CBZ X25, 0x22CAD90
	0x022CAC74 LDR X8, [X19 + 0x38]
	0x022CAC78 ADD X0, X31, 0x50
	0x022CAC7C ADD X1, X31, 0x0
	0x022CAC80 MOVZ W2, 0x50
	0x022CAC84 LDR X19, [X8 + 0x30]
	0x022CAC88 BL 0x3EB1AC0
	0x022CAC8C ADD X4, X31, 0x50
	0x022CAC90 MOV X0, X25
	0x022CAC94 MOV X1, X23
	0x022CAC98 MOV W2, W21
	0x022CAC9C MOV W3, W22
	0x022CACA0 MOV X5, X20
	0x022CACA4 MOV X6, X19
	0x022CACA8 BL 0x2C37498
	0x022CACAC LDP X20, X19, [X31 + 0xD0]
	0x022CACB0 LDP X22, X21, [X31 + 0xC0]
	0x022CACB4 LDP X24, X23, [X31 + 0xB0]
	0x022CACB8 LDP X30, X25, [X31 + 0xA0]
	0x022CACBC ADD X31, X31, 0xE0
	0x022CACC0 RET
	0x022CACC4 ADRP X0, 0x1E2E000
	0x022CACC8 LDR X0, [X0 + 0x528]
	0x022CACCC BL 0x1C16D08
	0x022CACD0 BL 0x1C16F10
	0x022CACD4 MOV X20, X0
	0x022CACD8 ADRP X0, 0x1E51000
	0x022CACDC LDR X0, [X0 + 0x640]
	0x022CACE0 BL 0x1C16D08
	0x022CACE4 MOV X1, X0
	0x022CACE8 MOV X0, X20
	0x022CACEC MOV X2, X31
	0x022CACF0 BL 0x330E100
	0x022CACF4 B 0x22CAD84
	0x022CACF8 ADRP X8, 0x1E31000
	0x022CACFC ADRP X9, 0x1E34000
	0x022CAD00 LDR X8, [X8 + 0x768]
	0x022CAD04 LDR X9, [X9 + 0x130]
	0x022CAD08 CMP W21, 0x0
	0x022CAD0C CSEL X0, X9, X8, LT
	0x022CAD10 BL 0x1C16D08
	0x022CAD14 MOV X20, X0
	0x022CAD18 ADRP X0, 0x1E31000
	0x022CAD1C LDR X0, [X0 + 0x760]
	0x022CAD20 BL 0x1C16D08
	0x022CAD24 BL 0x1C16F10
	0x022CAD28 MOV X21, X0
	0x022CAD2C ADRP X0, 0x1E51000
	0x022CAD30 LDR X0, [X0 + 0x670]
	0x022CAD34 BL 0x1C16D08
	0x022CAD38 MOV X2, X0
	0x022CAD3C MOV X0, X21
	0x022CAD40 MOV X1, X20

ISIL:
	001 Move [X31-80], X29
	002 Move [X31-72], X30
	003 Move [X31+16], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Add X29, X31, 0
	011 Subtract X31, X31, 80
	012 NotImplemented "Instruction MRS not yet implemented."
	013 Move X8, [X24+40]
	014 Move X21, X3
	015 Move X19, X2
	016 Move X23, X1
	017 Move [X29-8], X8
	018 Move [X29-72], X1
	019 Move X25, [X3+56]
	020 Move X20, X0
	021 Compare X25, 0
	022 JumpIfNotEqual {26}
	023 Move X0, X21
	024 Call 0x1C5D6E0
	025 Move X25, [X21+56]
	026 Move X8, [X25+8]
	027 Add X9, X31, 0
	028 Move W2, [X8+252]
	029 Add X10, X2, 15
	030 And X10, X10, 0x1FFFFFFFF
	031 Subtract X22, X9, X10
	032 Add X31, X22, 0
	033 Compare X20, 0
	034 JumpIfEqual {80}
	035 Move W8, [X8+40]
	036 Move X0, X22
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Subtract X8, X29, 72
	039 NotImplemented "Instruction CSEL not yet implemented."
	040 Call 0x3EB2AC0
	041 Move X1, [X25+24]
	042 Move X8, [X25+8]
	043 Move X0, [X1]
	044 Move W9, [X8+40]
	045 Move X8, [X20+24]
	046 Move TEMP, X9
	047 And TEMP, TEMP, -2147483648
	048 Compare TEMP, -2147483648
	049 JumpIfEqual {51}
	050 Move X22, [X22]
	051 Move [X29-16], W8
	052 Move [X29-12], W31
	053 Subtract X8, X29, 12
	054 Subtract X9, X29, 16
	055 Move [X29-64], X20
	056 Move [X29-56], X8
	057 Move [X29-48], X9
	058 Move [X29-40], X22
	059 Move [X29-32], X19
	060 Move X8, [X1+16]
	061 Subtract X3, X29, 64
	062 Subtract X4, X29, 20
	063 Move X2, X31
	064 NotImplemented "Instruction BLR not yet implemented."
	065 NotImplemented "Instruction LDUR not yet implemented."
	066 Move X8, [X24+40]
	067 NotImplemented "Instruction LDUR not yet implemented."
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Add X31, X29, 0
	070 Move X20, [X31+64]
	071 Move X19, [X31+72]
	072 Move X22, [X31+48]
	073 Move X21, [X31+56]
	074 Move X24, [X31+32]
	075 Move X23, [X31+40]
	076 Move X25, [X31+16]
	077 Move X29, [X31+80]
	078 Move X30, [X31+88]
	079 Return X0
	080 Move X0, 0x1E2F000
	081 Move X0, [X0+1320]
	082 Call 0x1C17D08
	083 Call 0x1C17F10
	084 Move X19, X0
	085 Move X0, 0x1E52000
	086 Move X0, [X0+1600]
	087 Call 0x1C17D08
	088 Move X1, X0
	089 Move X0, X19
	090 Move X2, X31
	091 Call ArgumentNullException..ctor, X0, X1
	092 Move X0, X19
	093 Move X1, X21
	094 Call 0x1C17DEC
	095 Call 0x3EB2B20

Method: System.Int32 BinarySearch(T[] array, System.Int32 index, System.Int32 length, T value)

Disassembly:
	0x022CAD44 MOV X3, X31
	0x022CAD48 BL 0x3311888
	0x022CAD4C MOV X0, X21
	0x022CAD50 B 0x22CAD88
	0x022CAD54 ADRP X0, 0x1E31000
	0x022CAD58 LDR X0, [X0 + 0x578]
	0x022CAD5C BL 0x1C16D08
	0x022CAD60 BL 0x1C16F10
	0x022CAD64 MOV X20, X0
	0x022CAD68 ADRP X0, 0x1E51000
	0x022CAD6C LDR X0, [X0 + 0x760]
	0x022CAD70 BL 0x1C16D08
	0x022CAD74 MOV X1, X0
	0x022CAD78 MOV X0, X20
	0x022CAD7C MOV X2, X31
	0x022CAD80 BL 0x3314A68
	0x022CAD84 MOV X0, X20
	0x022CAD88 MOV X1, X19
	0x022CAD8C BL 0x1C16DEC
	0x022CAD90 BL 0x1C16F20
	0x022CAD94 STR X30, [X31 - 0x50]!
	0x022CAD98 STP X26, X25, [X31 + 0x10]
	0x022CAD9C STP X24, X23, [X31 + 0x20]
	0x022CADA0 STP X22, X21, [X31 + 0x30]
	0x022CADA4 STP X20, X19, [X31 + 0x40]
	0x022CADA8 LDR X8, [X6 + 0x38]
	0x022CADAC MOV X19, X6
	0x022CADB0 MOV X20, X5
	0x022CADB4 MOV X21, X4
	0x022CADB8 MOV X22, X3
	0x022CADBC MOV W24, W2
	0x022CADC0 MOV W23, W1
	0x022CADC4 MOV X25, X0
	0x022CADC8 CBNZ X8, 0x22CADD4
	0x022CADCC MOV X0, X19
	0x022CADD0 BL 0x1C5C6E0
	0x022CADD4 CBZ X25, 0x22CAEB0
	0x022CADD8 TBNZ X24, 0x1F, 0x22CAEE4
	0x022CADDC TBNZ X23, 0x1F, 0x22CAEE4
	0x022CADE0 LDR W8, [X25 + 0x18]
	0x022CADE4 SUB W8, W8, W23
	0x022CADE8 CMP W8, W24
	0x022CADEC B.LT 0x22CAF40
	0x022CADF0 LDR X8, [X19 + 0x38]
	0x022CADF4 LDR X0, [X8 + 0x10]
	0x022CADF8 LDRB W8, [X0 + 0x135]
	0x022CADFC TBNZ X8, 0x0, 0x22CAE04
	0x022CAE00 BL 0x1C5C684
	0x022CAE04 LDR W8, [X0 + 0xE0]
	0x022CAE08 CBNZ W8, 0x22CAE10
	0x022CAE0C BL 0x1C16DFC
	0x022CAE10 LDR X8, [X19 + 0x38]
	0x022CAE14 LDR X26, [X8 + 0x8]
	0x022CAE18 LDR X0, [X26 + 0x20]
	0x022CAE1C LDRB W8, [X0 + 0x135]
	0x022CAE20 TBNZ X8, 0x0, 0x22CAE28
	0x022CAE24 BL 0x1C5C684
	0x022CAE28 LDR X8, [X0 + 0xC0]
	0x022CAE2C LDR X0, [X8 + 0x48]
	0x022CAE30 LDRB W8, [X0 + 0x135]
	0x022CAE34 TBNZ X8, 0x0, 0x22CAE3C
	0x022CAE38 BL 0x1C5C684
	0x022CAE3C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-80], X29
	002 Move [X31-72], X30
	003 Move [X31+16], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Add X29, X31, 0
	011 Subtract X31, X31, 80
	012 NotImplemented "Instruction MRS not yet implemented."
	013 Move X8, [X24+40]
	014 Move X22, X3
	015 Move W19, W2
	016 Move W20, W1
	017 Move [X29-8], X8
	018 Move [X29-72], X3
	019 Move X25, [X4+56]
	020 Move X21, X0
	021 Compare X25, 0
	022 JumpIfNotEqual {27}
	023 Move X0, X4
	024 Move X23, X4
	025 Call 0x1C5D6E0
	026 Move X25, [X23+56]
	027 Move X8, [X25+8]
	028 Add X9, X31, 0
	029 Move W2, [X8+252]
	030 Add X10, X2, 15
	031 And X10, X10, 0x1FFFFFFFF
	032 Subtract X23, X9, X10
	033 Add X31, X23, 0
	034 Move W8, [X8+40]
	035 Move X0, X23
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Subtract X8, X29, 72
	038 NotImplemented "Instruction CSEL not yet implemented."
	039 Call 0x3EB2AC0
	040 Move X8, [X25+8]
	041 Move X1, [X25+16]
	042 Move W8, [X8+40]
	043 Move X0, [X1]
	044 Move TEMP, X8
	045 And TEMP, TEMP, -2147483648
	046 Compare TEMP, -2147483648
	047 JumpIfEqual {49}
	048 Move X23, [X23]
	049 Subtract X8, X29, 12
	050 Subtract X9, X29, 16
	051 Move [X29-16], W19
	052 Move [X29-12], W20
	053 Move [X29-64], X21
	054 Move [X29-56], X8
	055 Move [X29-48], X9
	056 Move [X29-40], X23
	057 Move [X29-32], X31
	058 Move X8, [X1+16]
	059 Subtract X3, X29, 64
	060 Subtract X4, X29, 20
	061 Move X2, X31
	062 NotImplemented "Instruction BLR not yet implemented."
	063 NotImplemented "Instruction LDUR not yet implemented."
	064 Move X8, [X24+40]
	065 NotImplemented "Instruction LDUR not yet implemented."
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Add X31, X29, 0
	068 Move X20, [X31+64]
	069 Move X19, [X31+72]
	070 Move X22, [X31+48]
	071 Move X21, [X31+56]
	072 Move X24, [X31+32]
	073 Move X23, [X31+40]
	074 Move X25, [X31+16]
	075 Move X29, [X31+80]
	076 Move X30, [X31+88]
	077 Return X0
	078 Call 0x3EB2B20

Method: System.Int32 BinarySearch(T[] array, System.Int32 index, System.Int32 length, T value, System.Collections.Generic.IComparer`1<T> comparer)

Disassembly:
	0x022CAE40 CBNZ W8, 0x22CAE48
	0x022CAE44 BL 0x1C16DFC
	0x022CAE48 LDR X0, [X26 + 0x20]
	0x022CAE4C LDRB W8, [X0 + 0x135]
	0x022CAE50 TBNZ X8, 0x0, 0x22CAE58
	0x022CAE54 BL 0x1C5C684
	0x022CAE58 LDR X8, [X0 + 0xC0]
	0x022CAE5C LDR X0, [X8 + 0x48]
	0x022CAE60 LDRB W8, [X0 + 0x135]
	0x022CAE64 TBNZ X8, 0x0, 0x22CAE6C
	0x022CAE68 BL 0x1C5C684
	0x022CAE6C LDR X8, [X0 + 0xB8]
	0x022CAE70 LDR X0, [X8]
	0x022CAE74 CBZ X0, 0x22CAF7C
	0x022CAE78 LDR X8, [X19 + 0x38]
	0x022CAE7C MOV X1, X25
	0x022CAE80 MOV W2, W23
	0x022CAE84 MOV W3, W24
	0x022CAE88 LDR X7, [X8 + 0x30]
	0x022CAE8C MOV X4, X22
	0x022CAE90 MOV X5, X21
	0x022CAE94 MOV X6, X20
	0x022CAE98 LDP X20, X19, [X31 + 0x40]
	0x022CAE9C LDP X22, X21, [X31 + 0x30]
	0x022CAEA0 LDP X24, X23, [X31 + 0x20]
	0x022CAEA4 LDP X26, X25, [X31 + 0x10]
	0x022CAEA8 LDR X30, [X31], #0x50
	0x022CAEAC B 0x2C38C8C
	0x022CAEB0 ADRP X0, 0x1E2E000
	0x022CAEB4 LDR X0, [X0 + 0x528]
	0x022CAEB8 BL 0x1C16D08
	0x022CAEBC BL 0x1C16F10
	0x022CAEC0 MOV X20, X0
	0x022CAEC4 ADRP X0, 0x1E51000
	0x022CAEC8 LDR X0, [X0 + 0x640]
	0x022CAECC BL 0x1C16D08
	0x022CAED0 MOV X1, X0
	0x022CAED4 MOV X0, X20
	0x022CAED8 MOV X2, X31
	0x022CAEDC BL 0x330E100
	0x022CAEE0 B 0x22CAF70
	0x022CAEE4 ADRP X8, 0x1E31000
	0x022CAEE8 ADRP X9, 0x1E34000
	0x022CAEEC LDR X8, [X8 + 0x768]
	0x022CAEF0 LDR X9, [X9 + 0x130]
	0x022CAEF4 CMP W23, 0x0
	0x022CAEF8 CSEL X0, X9, X8, LT
	0x022CAEFC BL 0x1C16D08
	0x022CAF00 MOV X20, X0
	0x022CAF04 ADRP X0, 0x1E31000
	0x022CAF08 LDR X0, [X0 + 0x760]
	0x022CAF0C BL 0x1C16D08
	0x022CAF10 BL 0x1C16F10
	0x022CAF14 MOV X21, X0
	0x022CAF18 ADRP X0, 0x1E51000
	0x022CAF1C LDR X0, [X0 + 0x670]
	0x022CAF20 BL 0x1C16D08
	0x022CAF24 MOV X2, X0
	0x022CAF28 MOV X0, X21
	0x022CAF2C MOV X1, X20
	0x022CAF30 MOV X3, X31
	0x022CAF34 BL 0x3311888
	0x022CAF38 MOV X0, X21
	0x022CAF3C B 0x22CAF74
	0x022CAF40 ADRP X0, 0x1E31000
	0x022CAF44 LDR X0, [X0 + 0x578]
	0x022CAF48 BL 0x1C16D08
	0x022CAF4C BL 0x1C16F10
	0x022CAF50 MOV X20, X0
	0x022CAF54 ADRP X0, 0x1E51000
	0x022CAF58 LDR X0, [X0 + 0x760]
	0x022CAF5C BL 0x1C16D08
	0x022CAF60 MOV X1, X0
	0x022CAF64 MOV X0, X20
	0x022CAF68 MOV X2, X31
	0x022CAF6C BL 0x3314A68
	0x022CAF70 MOV X0, X20
	0x022CAF74 MOV X1, X19
	0x022CAF78 BL 0x1C16DEC
	0x022CAF7C BL 0x1C16F20
	0x022CAF80 SUB X31, X31, 0x80
	0x022CAF84 STP X30, X25, [X31 + 0x40]
	0x022CAF88 STP X24, X23, [X31 + 0x50]
	0x022CAF8C STP X22, X21, [X31 + 0x60]
	0x022CAF90 STP X20, X19, [X31 + 0x70]
	0x022CAF94 LDR X8, [X5 + 0x38]
	0x022CAF98 MOV X19, X5
	0x022CAF9C MOV X20, X4
	0x022CAFA0 MOV X24, X3
	0x022CAFA4 MOV W22, W2
	0x022CAFA8 MOV W21, W1
	0x022CAFAC MOV X23, X0
	0x022CAFB0 CBNZ X8, 0x22CAFBC
	0x022CAFB4 MOV X0, X19
	0x022CAFB8 BL 0x1C5C6E0
	0x022CAFBC CBZ X23, 0x22CB0B8
	0x022CAFC0 TBNZ X22, 0x1F, 0x22CB0EC
	0x022CAFC4 TBNZ X21, 0x1F, 0x22CB0EC
	0x022CAFC8 LDR W8, [X23 + 0x18]
	0x022CAFCC SUB W8, W8, W21
	0x022CAFD0 CMP W8, W22
	0x022CAFD4 B.LT 0x22CB148
	0x022CAFD8 LDR X8, [X19 + 0x38]
	0x022CAFDC LDR X0, [X8 + 0x10]
	0x022CAFE0 LDRB W8, [X0 + 0x135]
	0x022CAFE4 TBNZ X8, 0x0, 0x22CAFEC
	0x022CAFE8 BL 0x1C5C684
	0x022CAFEC LDR W8, [X0 + 0xE0]
	0x022CAFF0 CBNZ W8, 0x22CAFF8
	0x022CAFF4 BL 0x1C16DFC
	0x022CAFF8 LDR X8, [X19 + 0x38]
	0x022CAFFC LDR X25, [X8 + 0x8]
	0x022CB000 LDR X0, [X25 + 0x20]
	0x022CB004 LDRB W8, [X0 + 0x135]
	0x022CB008 TBNZ X8, 0x0, 0x22CB010
	0x022CB00C BL 0x1C5C684
	0x022CB010 LDR X8, [X0 + 0xC0]
	0x022CB014 LDR X0, [X8 + 0x48]
	0x022CB018 LDRB W8, [X0 + 0x135]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X8, [X5+56]
	010 Move X19, X5
	011 Move X20, X4
	012 Move X21, X3
	013 Move W23, W2
	014 Move W22, W1
	015 Move X24, X0
	016 Compare X8, 0
	017 JumpIfNotEqual {20}
	018 Move X0, X19
	019 Call 0x1C5D6E0
	020 Compare X24, 0
	021 JumpIfEqual {102}
	022 Move TEMP, X23
	023 And TEMP, TEMP, -2147483648
	024 Compare TEMP, -2147483648
	025 JumpIfEqual {114}
	026 Move TEMP, X22
	027 And TEMP, TEMP, -2147483648
	028 Compare TEMP, -2147483648
	029 JumpIfEqual {114}
	030 Move W8, [X24+24]
	031 Subtract W8, W8, W22
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X8, [X19+56]
	034 Move X0, [X8+16]
	035 Move W8, [X0+309]
	036 Move TEMP, X8
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {41}
	040 Call 0x1C5D684
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X8, [X19+56]
	046 Move X25, [X8+8]
	047 Move X0, [X25+32]
	048 Move W8, [X0+309]
	049 Move TEMP, X8
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfEqual {54}
	053 Call 0x1C5D684
	054 Move X8, [X0+192]
	055 Move X0, [X8+72]
	056 Move W8, [X0+309]
	057 Move TEMP, X8
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfEqual {62}
	061 Call 0x1C5D684
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X0, [X25+32]
	067 Move W8, [X0+309]
	068 Move TEMP, X8
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfEqual {73}
	072 Call 0x1C5D684
	073 Move X8, [X0+192]
	074 Move X0, [X8+72]
	075 Move W8, [X0+309]
	076 Move TEMP, X8
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfEqual {81}
	080 Call 0x1C5D684
	081 Move X8, [X0+184]
	082 Move X0, [X8]
	083 Compare X0, 0
	084 JumpIfEqual {151}
	085 Move X8, [X19+56]
	086 Move X1, X24
	087 Move W2, W22
	088 Move W3, W23
	089 Move X6, [X8+48]
	090 Move X4, X21
	091 Move X5, X20
	092 Move X20, [X31+48]
	093 Move X19, [X31+56]
	094 Move X22, [X31+32]
	095 Move X21, [X31+40]
	096 Move X24, [X31+16]
	097 Move X23, [X31+24]
	098 Move X30, [X31+64]
	099 Move X25, [X31+72]
	100 Call 0x2B8E314, X0, X1, X2, X3, X4, X5
	101 Return X0
	102 Move X0, 0x1E2F000
	103 Move X0, [X0+1320]
	104 Call 0x1C17D08
	105 Call 0x1C17F10
	106 Move X20, X0
	107 Move X0, 0x1E52000
	108 Move X0, [X0+1600]
	109 Call 0x1C17D08
	110 Move X1, X0
	111 Move X0, X20
	112 Move X2, X31
	113 Call ArgumentNullException..ctor, X0, X1
	114 Move X8, 0x1E32000
	115 Move X9, 0x1E35000
	116 Move X8, [X8+1896]
	117 Move X9, [X9+304]
	118 NotImplemented "Instruction CMP not yet implemented."
	119 NotImplemented "Instruction CSEL not yet implemented."
	120 Call 0x1C17D08
	121 Move X20, X0
	122 Move X0, 0x1E32000
	123 Move X0, [X0+1888]
	124 Call 0x1C17D08
	125 Call 0x1C17F10
	126 Move X21, X0
	127 Move X0, 0x1E52000
	128 Move X0, [X0+1648]
	129 Call 0x1C17D08
	130 Move X2, X0
	131 Move X0, X21
	132 Move X1, X20
	133 Move X3, X31
	134 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	135 Move X0, X21
	136 Move X0, 0x1E32000
	137 Move X0, [X0+1400]
	138 Call 0x1C17D08
	139 Call 0x1C17F10
	140 Move X20, X0
	141 Move X0, 0x1E52000
	142 Move X0, [X0+1888]
	143 Call 0x1C17D08
	144 Move X1, X0
	145 Move X0, X20
	146 Move X2, X31
	147 Call ArgumentException..ctor, X0, X1
	148 Move X0, X20
	149 Move X1, X19
	150 Call 0x1C17DEC
	151 Call 0x1C17F20

Method: System.Int32 IndexOf(System.Array array, System.Object value)

Disassembly:
	0x033A096C B.EQ 0x33A098C
	0x033A0970 SUBS X9, X9, 0x1
	0x033A0974 ADD X10, X10, 0x10
	0x033A0978 B.NE 0x33A0964
	0x033A097C MOV X0, X21
	0x033A0980 MOV W2, W31
	0x033A0984 BL 0x1C5C788
	0x033A0988 B 0x33A0998
	0x033A098C LDRSW X9, [X10]
	0x033A0990 ADD X8, X8, X9, 0x4, LSL
	0x033A0994 ADD X0, X8, 0x138
	0x033A0998 LDP X8, X3, [X0]
	0x033A099C MOV X0, X21
	0x033A09A0 MOV X1, X24
	0x033A09A4 MOV X2, X20
	0x033A09A8 BLR X8
	0x033A09AC CBZ W0, 0x33A090C
	0x033A09B0 TBZ X0, 0x1F, 0x33A09C4
	0x033A09B4 ADD W19, W23, 0x1
	0x033A09B8 CMP W25, W19
	0x033A09BC B.GE 0x33A0930
	0x033A09C0 B 0x33A0908
	0x033A09C4 SUB W25, W23, 0x1
	0x033A09C8 B 0x33A09B8
	0x033A09CC BL 0x1C16F20
	0x033A09D0 BL 0x1C16F28
	0x033A09D4 BL 0x1C16F20
	0x033A09D8 ADRP X0, 0xD58000
	0x033A09DC LDR X0, [X0 + 0x528]
	0x033A09E0 BL 0x1C16D08
	0x033A09E4 BL 0x1C16F10
	0x033A09E8 MOV X19, X0
	0x033A09EC ADRP X0, 0xD7B000
	0x033A09F0 LDR X0, [X0 + 0x640]
	0x033A09F4 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X0, 0
	006 JumpIfEqual {24}
	007 Move X19, X1
	008 Move W1, W31
	009 Move X20, X0
	010 Call 0x1C25D2C
	011 Move W21, W0
	012 Move X0, X20
	013 Call Array.get_Length, X0
	014 Move W3, W0
	015 Move X0, X20
	016 Move X1, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move W2, W21
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 Call Array.IndexOf, X0, X1, X2, X3
	023 Return X0
	024 Move X0, 0xD59000
	025 Move X0, [X0+1320]
	026 Call 0x1C17D08
	027 Call 0x1C17F10
	028 Move X19, X0
	029 Move X0, 0xD7C000
	030 Move X0, [X0+1600]
	031 Call 0x1C17D08
	032 Move X1, X0
	033 Move X0, X19
	034 Move X2, X31
	035 Call ArgumentNullException..ctor, X0, X1
	036 Move X0, 0xD8C000
	037 Move X0, [X0+2512]
	038 Call 0x1C17D08
	039 Move X1, X0
	040 Move X0, X19
	041 Call 0x1C17DEC

Method: System.Int32 IndexOf(System.Array array, System.Object value, System.Int32 startIndex)

Disassembly:
	0x033A26E4 B 0x33A2310
	0x033A26E8 ADRP X0, 0xD56000
	0x033A26EC LDR X0, [X0 + 0x528]
	0x033A26F0 BL 0x1C16D08
	0x033A26F4 BL 0x1C16F10
	0x033A26F8 MOV X19, X0
	0x033A26FC ADRP X0, 0xD79000
	0x033A2700 LDR X0, [X0 + 0x770]
	0x033A2704 BL 0x1C16D08
	0x033A2708 MOV X1, X0
	0x033A270C MOV X0, X19
	0x033A2710 MOV X2, X31
	0x033A2714 BL 0x330E100
	0x033A2718 ADRP X0, 0xD89000
	0x033A271C LDR X0, [X0 + 0xB70]
	0x033A2720 BL 0x1C16D08
	0x033A2724 MOV X1, X0
	0x033A2728 MOV X0, X19
	0x033A272C BL 0x1C16DEC
	0x033A2730 MOV X4, X31
	0x033A2734 B 0x33A2310
	0x033A2738 SUB X31, X31, 0x70
	0x033A273C STP X30, X25, [X31 + 0x30]
	0x033A2740 STP X24, X23, [X31 + 0x40]
	0x033A2744 STP X22, X21, [X31 + 0x50]
	0x033A2748 STP X20, X19, [X31 + 0x60]
	0x033A274C ADRP X24, 0x103B000
	0x033A2750 ADRP X25, 0xD51000
	0x033A2754 LDRB W8, [X24 + 0x13C]
	0x033A2758 LDR X25, [X25 + 0x9D0]
	0x033A275C MOV X21, X4
	0x033A2760 MOV W19, W3
	0x033A2764 MOV W20, W2
	0x033A2768 MOV X22, X1
	0x033A276C MOV X23, X0
	0x033A2770 TBNZ X8, 0x0, 0x33A2788
	0x033A2774 ADRP X0, 0xD51000
	0x033A2778 LDR X0, [X0 + 0x9D0]
	0x033A277C BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Compare X0, 0
	007 JumpIfEqual {28}
	008 Move X20, X1
	009 Move W1, W31
	010 Move W19, W2
	011 Move X21, X0
	012 Call 0x1C25D2C
	013 Move W22, W0
	014 Move X0, X21
	015 Call Array.get_Length, X0
	016 Subtract W8, W22, W19
	017 Add W3, W8, W0
	018 Move X0, X21
	019 Move X1, X20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 Call Array.IndexOf, X0, X1, X2, X3
	027 Return X0
	028 Move X0, 0xD57000
	029 Move X0, [X0+1320]
	030 Call 0x1C17D08
	031 Call 0x1C17F10
	032 Move X19, X0
	033 Move X0, 0xD7A000
	034 Move X0, [X0+1600]
	035 Call 0x1C17D08
	036 Move X1, X0
	037 Move X0, X19
	038 Move X2, X31
	039 Call ArgumentNullException..ctor, X0, X1
	040 Move X0, 0xD8A000
	041 Move X0, [X0+2784]
	042 Call 0x1C17D08
	043 Move X1, X0
	044 Move X0, X19
	045 Call 0x1C17DEC

Method: System.Int32 IndexOf(System.Array array, System.Object value, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x033A244C BL 0x1C16D08
	0x033A2450 BL 0x1C16F10
	0x033A2454 MOV X19, X0
	0x033A2458 ADRP X0, 0xD79000
	0x033A245C LDR X0, [X0 + 0x760]
	0x033A2460 B 0x33A2520
	0x033A2464 ADRP X0, 0xD56000
	0x033A2468 LDR X0, [X0 + 0x528]
	0x033A246C BL 0x1C16D08
	0x033A2470 BL 0x1C16F10
	0x033A2474 MOV X19, X0
	0x033A2478 ADRP X0, 0xD79000
	0x033A247C LDR X0, [X0 + 0x770]
	0x033A2480 BL 0x1C16D08
	0x033A2484 MOV X1, X0
	0x033A2488 MOV X0, X19
	0x033A248C MOV X2, X31
	0x033A2490 BL 0x330E100
	0x033A2494 B 0x33A2534
	0x033A2498 ADRP X8, 0xD5C000
	0x033A249C ADRP X9, 0xD59000
	0x033A24A0 LDR X8, [X8 + 0x130]
	0x033A24A4 LDR X9, [X9 + 0x768]
	0x033A24A8 CMP W19, 0x0
	0x033A24AC CSEL X0, X9, X8, LT
	0x033A24B0 BL 0x1C16D08
	0x033A24B4 MOV X19, X0
	0x033A24B8 ADRP X0, 0xD59000
	0x033A24BC LDR X0, [X0 + 0x760]
	0x033A24C0 BL 0x1C16D08
	0x033A24C4 BL 0x1C16F10
	0x033A24C8 MOV X20, X0
	0x033A24CC ADRP X0, 0xD79000
	0x033A24D0 LDR X0, [X0 + 0x670]
	0x033A24D4 BL 0x1C16D08
	0x033A24D8 MOV X2, X0
	0x033A24DC MOV X0, X20
	0x033A24E0 MOV X1, X19
	0x033A24E4 MOV X3, X31
	0x033A24E8 BL 0x3311888
	0x033A24EC ADRP X0, 0xD89000
	0x033A24F0 LDR X0, [X0 + 0xB50]
	0x033A24F4 BL 0x1C16D08
	0x033A24F8 MOV X1, X0
	0x033A24FC MOV X0, X20
	0x033A2500 BL 0x1C16DEC
	0x033A2504 ADRP X0, 0xD59000
	0x033A2508 LDR X0, [X0 + 0x578]
	0x033A250C BL 0x1C16D08
	0x033A2510 BL 0x1C16F10
	0x033A2514 MOV X19, X0
	0x033A2518 ADRP X0, 0xD89000
	0x033A251C LDR X0, [X0 + 0xB58]
	0x033A2520 BL 0x1C16D08
	0x033A2524 MOV X1, X0
	0x033A2528 MOV X0, X19
	0x033A252C MOV X2, X31
	0x033A2530 BL 0x3314A68
	0x033A2534 ADRP X0, 0xD89000
	0x033A2538 LDR X0, [X0 + 0xB50]
	0x033A253C BL 0x1C16D08
	0x033A2540 MOV X1, X0
	0x033A2544 MOV X0, X19
	0x033A2548 BL 0x1C16DEC
	0x033A254C MOV W3, W2
	0x033A2550 MOV W2, W1
	0x033A2554 MOV X1, X31
	0x033A2558 MOV X4, X31
	0x033A255C B 0x33A2310
	0x033A2560 STP X30, X21, [X31 - 0x20]!
	0x033A2564 STP X20, X19, [X31 + 0x10]
	0x033A2568 CBZ X0, 0x33A25A8
	0x033A256C MOV X19, X1
	0x033A2570 MOV W1, W31
	0x033A2574 MOV X20, X0
	0x033A2578 BL 0x1C24D2C
	0x033A257C MOV W21, W0
	0x033A2580 MOV X0, X20
	0x033A2584 BL 0x3395B7C
	0x033A2588 MOV W3, W0
	0x033A258C MOV X0, X20
	0x033A2590 MOV X4, X19
	0x033A2594 LDP X20, X19, [X31 + 0x10]
	0x033A2598 MOV X1, X31
	0x033A259C MOV W2, W21
	0x033A25A0 LDP X30, X21, [X31], #0x20
	0x033A25A4 B 0x33A2310
	0x033A25A8 ADRP X0, 0xD56000
	0x033A25AC LDR X0, [X0 + 0x528]
	0x033A25B0 BL 0x1C16D08
	0x033A25B4 BL 0x1C16F10
	0x033A25B8 MOV X19, X0
	0x033A25BC ADRP X0, 0xD79000
	0x033A25C0 LDR X0, [X0 + 0x640]
	0x033A25C4 BL 0x1C16D08
	0x033A25C8 MOV X1, X0
	0x033A25CC MOV X0, X19
	0x033A25D0 MOV X2, X31
	0x033A25D4 BL 0x330E100
	0x033A25D8 ADRP X0, 0xD89000
	0x033A25DC LDR X0, [X0 + 0xB60]
	0x033A25E0 BL 0x1C16D08
	0x033A25E4 MOV X1, X0
	0x033A25E8 MOV X0, X19
	0x033A25EC BL 0x1C16DEC
	0x033A25F0 MOV X4, X3
	0x033A25F4 MOV W3, W2
	0x033A25F8 MOV W2, W1
	0x033A25FC MOV X1, X31
	0x033A2600 B 0x33A2310
	0x033A2604 STP X30, X21, [X31 - 0x20]!
	0x033A2608 STP X20, X19, [X31 + 0x10]
	0x033A260C CBZ X0, 0x33A264C
	0x033A2610 MOV X19, X1
	0x033A2614 MOV W1, W31
	0x033A2618 MOV X20, X0
	0x033A261C BL 0x1C24D2C
	0x033A2620 MOV W21, W0
	0x033A2624 MOV X0, X20
	0x033A2628 BL 0x3395B7C
	0x033A262C MOV W3, W0
	0x033A2630 MOV X0, X20
	0x033A2634 MOV X1, X19
	0x033A2638 LDP X20, X19, [X31 + 0x10]
	0x033A263C MOV W2, W21
	0x033A2640 MOV X4, X31
	0x033A2644 LDP X30, X21, [X31], #0x20
	0x033A2648 B 0x33A2310
	0x033A264C ADRP X0, 0xD56000
	0x033A2650 LDR X0, [X0 + 0x528]
	0x033A2654 BL 0x1C16D08
	0x033A2658 BL 0x1C16F10
	0x033A265C MOV X19, X0
	0x033A2660 ADRP X0, 0xD79000
	0x033A2664 LDR X0, [X0 + 0x770]
	0x033A2668 BL 0x1C16D08
	0x033A266C MOV X1, X0
	0x033A2670 MOV X0, X19
	0x033A2674 MOV X2, X31
	0x033A2678 BL 0x330E100
	0x033A267C ADRP X0, 0xD89000
	0x033A2680 LDR X0, [X0 + 0xB68]
	0x033A2684 BL 0x1C16D08
	0x033A2688 MOV X1, X0
	0x033A268C MOV X0, X19
	0x033A2690 BL 0x1C16DEC
	0x033A2694 STR X30, [X31 - 0x30]!
	0x033A2698 STP X22, X21, [X31 + 0x10]
	0x033A269C STP X20, X19, [X31 + 0x20]
	0x033A26A0 CBZ X0, 0x33A26E8
	0x033A26A4 MOV X20, X1
	0x033A26A8 MOV W1, W31
	0x033A26AC MOV X19, X2
	0x033A26B0 MOV X21, X0
	0x033A26B4 BL 0x1C24D2C
	0x033A26B8 MOV W22, W0
	0x033A26BC MOV X0, X21
	0x033A26C0 BL 0x3395B7C
	0x033A26C4 MOV W3, W0
	0x033A26C8 MOV X0, X21
	0x033A26CC MOV X1, X20
	0x033A26D0 MOV W2, W22
	0x033A26D4 MOV X4, X19
	0x033A26D8 LDP X20, X19, [X31 + 0x20]
	0x033A26DC LDP X22, X21, [X31 + 0x10]
	0x033A26E0 LDR X30, [X31], #0x30

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x103C000
	009 Move W8, [X21+301]
	010 Move W22, W3
	011 Move W19, W2
	012 Move X20, X1
	013 Move X23, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xD52000
	019 Move X0, [X0+2512]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+301], W8
	023 Compare X23, 0
	024 JumpIfEqual {147}
	025 Move X0, X23
	026 Call 0x1C25D70
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X0, X23
	029 Move W1, W31
	030 Call 0x1C25D2C
	031 Subtract W24, W0, W19
	032 Move W21, W0
	033 Move X0, X23
	034 Call Array.get_Length, X0
	035 Add W8, W0, W21
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move TEMP, X22
	038 And TEMP, TEMP, -2147483648
	039 Compare TEMP, -2147483648
	040 JumpIfEqual {130}
	041 Move X0, X23
	042 Call Array.get_Length, X0
	043 Add W8, W24, W0
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X8, 0xD52000
	046 Move X8, [X8+2512]
	047 Move X0, X23
	048 Move X1, [X8]
	049 Call 0x1C17E00
	050 Add W8, W22, W19
	051 Compare X0, 0
	052 JumpIfEqual {78}
	053 Move X24, X0
	054 Compare X20, 0
	055 JumpIfEqual {97}
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X8, W8
	058 Add X9, X24, W19
	059 Add X22, X9, 32
	060 Subtract X23, X8, W19
	061 Move W8, [X24+24]
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X0, [X22]
	064 Compare X0, 0
	065 JumpIfEqual {75}
	066 Move X8, [X0]
	067 Move X1, X20
	068 Move X9, [X8+312]
	069 Move X2, [X8+320]
	070 NotImplemented "Instruction BLR not yet implemented."
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfEqual {109}
	075 Add W19, W19, 1
	076 Subtract X23, X23, 1
	077 Add X22, X22, 8
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X0, X23
	080 Move W1, W19
	081 Call Array.GetValue, X0, X1
	082 Compare X0, 0
	083 JumpIfEqual {93}
	084 Move X8, [X0]
	085 Move X1, X20
	086 Move X9, [X8+312]
	087 Move X2, [X8+320]
	088 NotImplemented "Instruction BLR not yet implemented."
	089 Move TEMP, X0
	090 And TEMP, TEMP, 1
	091 Compare TEMP, 1
	092 JumpIfNotEqual {95}
	093 Compare X20, 0
	094 JumpIfEqual {109}
	095 Subtract W22, W22, 1
	096 Add W19, W19, 1
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move W8, [X24+24]
	099 NotImplemented "Instruction CMP not yet implemented."
	100 NotImplemented "Instruction CSEL not yet implemented."
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Add X9, X24, W19
	103 Move X9, [X9+32]
	104 Compare X9, 0
	105 JumpIfEqual {109}
	106 Subtract W22, W22, 1
	107 Add W19, W19, 1
	108 Subtract W19, W21, 1
	109 Move W0, W19
	110 Move X20, [X31+48]
	111 Move X19, [X31+56]
	112 Move X22, [X31+32]
	113 Move X21, [X31+40]
	114 Move X24, [X31+16]
	115 Move X23, [X31+24]
	116 Move X30, [X31+64]
	117 Return X0
	118 Call 0x1C17F28
	119 Move X0, 0xD5A000
	120 Move X0, [X0+1888]
	121 Call 0x1C17D08
	122 Call 0x1C17F10
	123 Move X19, X0
	124 Move X0, 0xD7A000
	125 Move X0, [X0+1624]
	126 Call 0x1C17D08
	127 Move X20, X0
	128 Move X0, 0xD7A000
	129 Move X0, [X0+1632]
	130 Move X0, 0xD5A000
	131 Move X0, [X0+1888]
	132 Call 0x1C17D08
	133 Call 0x1C17F10
	134 Move X19, X0
	135 Move X0, 0xD7A000
	136 Move X0, [X0+1608]
	137 Call 0x1C17D08
	138 Move X20, X0
	139 Move X0, 0xD7A000
	140 Move X0, [X0+1616]
	141 Call 0x1C17D08
	142 Move X2, X0
	143 Move X0, X19
	144 Move X1, X20
	145 Move X3, X31
	146 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	147 Move X0, 0xD57000
	148 Move X0, [X0+1320]
	149 Call 0x1C17D08
	150 Call 0x1C17F10
	151 Move X19, X0
	152 Move X0, 0xD7A000
	153 Move X0, [X0+1600]
	154 Call 0x1C17D08
	155 Move X1, X0
	156 Move X0, X19
	157 Move X2, X31
	158 Call ArgumentNullException..ctor, X0, X1
	159 Move X0, 0xD7A000
	160 Move X0, [X0+1440]
	161 Call 0x1C17D08
	162 Call 0x1C17F10
	163 Move X19, X0
	164 Move X0, 0xD8A000
	165 Move X0, [X0+2600]
	166 Call 0x1C17D08
	167 Move X1, X0
	168 Move X0, X19
	169 Call RankException..ctor, X0, X1
	170 Move X0, 0xD8A000
	171 Move X0, [X0+2776]
	172 Call 0x1C17D08
	173 Move X1, X0
	174 Move X0, X19
	175 Call 0x1C17DEC

Method: System.Int32 IndexOf(T[] array, T value)

Disassembly:
	0x022E8380 ADRP X0, 0x1E13000
	0x022E8384 LDR X0, [X0 + 0x760]
	0x022E8388 BL 0x1C16D08
	0x022E838C BL 0x1C16F10
	0x022E8390 MOV X20, X0
	0x022E8394 ADRP X0, 0x1E33000
	0x022E8398 LDR X0, [X0 + 0x658]
	0x022E839C BL 0x1C16D08
	0x022E83A0 MOV X21, X0
	0x022E83A4 ADRP X0, 0x1E33000
	0x022E83A8 LDR X0, [X0 + 0x660]
	0x022E83AC B 0x22E8410
	0x022E83B0 ADRP X0, 0x1E10000
	0x022E83B4 LDR X0, [X0 + 0x528]
	0x022E83B8 BL 0x1C16D08
	0x022E83BC BL 0x1C16F10
	0x022E83C0 MOV X20, X0
	0x022E83C4 ADRP X0, 0x1E33000
	0x022E83C8 LDR X0, [X0 + 0x640]
	0x022E83CC BL 0x1C16D08
	0x022E83D0 MOV X1, X0
	0x022E83D4 MOV X0, X20
	0x022E83D8 MOV X2, X31
	0x022E83DC BL 0x330E100
	0x022E83E0 B 0x22E8428
	0x022E83E4 ADRP X0, 0x1E13000
	0x022E83E8 LDR X0, [X0 + 0x760]
	0x022E83EC BL 0x1C16D08
	0x022E83F0 BL 0x1C16F10
	0x022E83F4 MOV X20, X0
	0x022E83F8 ADRP X0, 0x1E33000
	0x022E83FC LDR X0, [X0 + 0x648]
	0x022E8400 BL 0x1C16D08
	0x022E8404 MOV X21, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+56]
	006 Move X19, X2
	007 Move W20, W1
	008 Move X21, X0
	009 Compare X8, 0
	010 JumpIfNotEqual {13}
	011 Move X0, X19
	012 Call 0x1C5D6E0
	013 Compare X21, 0
	014 JumpIfEqual {27}
	015 Move X8, [X19+56]
	016 Move W3, [X21+24]
	017 And W1, W20, 1
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X4, [X8+16]
	021 Move X0, X21
	022 Move W2, W31
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call Array.IndexOfImpl, X0, X1, X2, X3
	026 Return X0
	027 Move X0, 0x1E11000
	028 Move X0, [X0+1320]
	029 Call 0x1C17D08
	030 Call 0x1C17F10
	031 Move X20, X0
	032 Move X0, 0x1E34000
	033 Move X0, [X0+1600]
	034 Call 0x1C17D08
	035 Move X1, X0
	036 Move X0, X20
	037 Move X2, X31
	038 Call ArgumentNullException..ctor, X0, X1
	039 Move X0, X20
	040 Move X1, X19
	041 Call 0x1C17DEC

Method: System.Int32 IndexOf(T[] array, T value, System.Int32 startIndex)

Disassembly:
	0x022E8754 BL 0x1C16F10
	0x022E8758 MOV X20, X0
	0x022E875C ADRP X0, 0x1E33000
	0x022E8760 LDR X0, [X0 + 0x658]
	0x022E8764 BL 0x1C16D08
	0x022E8768 MOV X21, X0
	0x022E876C ADRP X0, 0x1E33000
	0x022E8770 LDR X0, [X0 + 0x660]
	0x022E8774 B 0x22E87D8
	0x022E8778 ADRP X0, 0x1E10000
	0x022E877C LDR X0, [X0 + 0x528]
	0x022E8780 BL 0x1C16D08
	0x022E8784 BL 0x1C16F10
	0x022E8788 MOV X20, X0
	0x022E878C ADRP X0, 0x1E33000
	0x022E8790 LDR X0, [X0 + 0x640]
	0x022E8794 BL 0x1C16D08
	0x022E8798 MOV X1, X0
	0x022E879C MOV X0, X20
	0x022E87A0 MOV X2, X31
	0x022E87A4 BL 0x330E100
	0x022E87A8 B 0x22E87F0
	0x022E87AC ADRP X0, 0x1E13000
	0x022E87B0 LDR X0, [X0 + 0x760]
	0x022E87B4 BL 0x1C16D08
	0x022E87B8 BL 0x1C16F10
	0x022E87BC MOV X20, X0
	0x022E87C0 ADRP X0, 0x1E33000
	0x022E87C4 LDR X0, [X0 + 0x648]
	0x022E87C8 BL 0x1C16D08
	0x022E87CC MOV X21, X0
	0x022E87D0 ADRP X0, 0x1E33000
	0x022E87D4 LDR X0, [X0 + 0x650]
	0x022E87D8 BL 0x1C16D08
	0x022E87DC MOV X2, X0
	0x022E87E0 MOV X0, X20
	0x022E87E4 MOV X1, X21
	0x022E87E8 MOV X3, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X3+56]
	007 Move X19, X3
	008 Move W20, W2
	009 Move X21, X1
	010 Move X22, X0
	011 Compare X8, 0
	012 JumpIfNotEqual {15}
	013 Move X0, X19
	014 Call 0x1C5D6E0
	015 Compare X22, 0
	016 JumpIfEqual {31}
	017 Move X8, [X19+56]
	018 Move W9, [X22+24]
	019 Move X0, X22
	020 Move X1, X21
	021 Move X4, [X8+16]
	022 Subtract W3, W9, W20
	023 Move W2, W20
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call Array.IndexOf, X0, X1, X2, X3
	030 Return X0
	031 Move X0, 0x1E11000
	032 Move X0, [X0+1320]
	033 Call 0x1C17D08
	034 Call 0x1C17F10
	035 Move X20, X0
	036 Move X0, 0x1E34000
	037 Move X0, [X0+1600]
	038 Call 0x1C17D08
	039 Move X1, X0
	040 Move X0, X20
	041 Move X2, X31
	042 Call ArgumentNullException..ctor, X0, X1
	043 Move X0, X20
	044 Move X1, X19
	045 Call 0x1C17DEC

Method: System.Int32 IndexOf(T[] array, T value, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x022E8928 BL 0x3311888
	0x022E892C MOV X0, X20
	0x022E8930 MOV X1, X19
	0x022E8934 BL 0x1C16DEC
	0x022E8938 STR X30, [X31 - 0x40]!
	0x022E893C STP X24, X23, [X31 + 0x10]
	0x022E8940 STP X22, X21, [X31 + 0x20]
	0x022E8944 STP X20, X19, [X31 + 0x30]
	0x022E8948 LDR X8, [X5 + 0x38]
	0x022E894C MOV X19, X5
	0x022E8950 MOV W20, W4
	0x022E8954 MOV W21, W3
	0x022E8958 MOV X22, X2
	0x022E895C MOV X23, X1
	0x022E8960 MOV X24, X0
	0x022E8964 CBNZ X8, 0x22E8970
	0x022E8968 MOV X0, X19
	0x022E896C BL 0x1C5C6E0
	0x022E8970 CBZ X24, 0x22E89F0
	0x022E8974 TBNZ X21, 0x1F, 0x22E89C0
	0x022E8978 LDR W8, [X24 + 0x18]
	0x022E897C SUBS W8, W8, W21
	0x022E8980 B.LT 0x22E89C0
	0x022E8984 TBNZ X20, 0x1F, 0x22E8A24
	0x022E8988 CMP W8, W20
	0x022E898C B.LT 0x22E8A24
	0x022E8990 LDR X8, [X19 + 0x38]
	0x022E8994 MOV X0, X24
	0x022E8998 MOV X1, X23
	0x022E899C MOV X2, X22
	0x022E89A0 LDR X5, [X8 + 0x10]
	0x022E89A4 MOV W3, W21
	0x022E89A8 MOV W4, W20
	0x022E89AC LDP X20, X19, [X31 + 0x30]
	0x022E89B0 LDP X22, X21, [X31 + 0x20]
	0x022E89B4 LDP X24, X23, [X31 + 0x10]
	0x022E89B8 LDR X30, [X31], #0x40
	0x022E89BC B 0x22F865C
	0x022E89C0 ADRP X0, 0x1E13000
	0x022E89C4 LDR X0, [X0 + 0x760]
	0x022E89C8 BL 0x1C16D08
	0x022E89CC BL 0x1C16F10
	0x022E89D0 MOV X20, X0
	0x022E89D4 ADRP X0, 0x1E33000
	0x022E89D8 LDR X0, [X0 + 0x658]
	0x022E89DC BL 0x1C16D08
	0x022E89E0 MOV X21, X0
	0x022E89E4 ADRP X0, 0x1E33000
	0x022E89E8 LDR X0, [X0 + 0x660]
	0x022E89EC B 0x22E8A50
	0x022E89F0 ADRP X0, 0x1E10000
	0x022E89F4 LDR X0, [X0 + 0x528]
	0x022E89F8 BL 0x1C16D08
	0x022E89FC BL 0x1C16F10
	0x022E8A00 MOV X20, X0
	0x022E8A04 ADRP X0, 0x1E33000
	0x022E8A08 LDR X0, [X0 + 0x640]
	0x022E8A0C BL 0x1C16D08
	0x022E8A10 MOV X1, X0
	0x022E8A14 MOV X0, X20
	0x022E8A18 MOV X2, X31
	0x022E8A1C BL 0x330E100
	0x022E8A20 B 0x22E8A68
	0x022E8A24 ADRP X0, 0x1E13000
	0x022E8A28 LDR X0, [X0 + 0x760]
	0x022E8A2C BL 0x1C16D08
	0x022E8A30 BL 0x1C16F10
	0x022E8A34 MOV X20, X0
	0x022E8A38 ADRP X0, 0x1E33000
	0x022E8A3C LDR X0, [X0 + 0x648]
	0x022E8A40 BL 0x1C16D08
	0x022E8A44 MOV X21, X0
	0x022E8A48 ADRP X0, 0x1E33000
	0x022E8A4C LDR X0, [X0 + 0x650]
	0x022E8A50 BL 0x1C16D08

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X4+56]
	008 Move X19, X4
	009 Move W20, W3
	010 Move W21, W2
	011 Move X22, X1
	012 Move X23, X0
	013 Compare X8, 0
	014 JumpIfNotEqual {17}
	015 Move X0, X19
	016 Call 0x1C5D6E0
	017 Compare X23, 0
	018 JumpIfEqual {55}
	019 Move TEMP, X21
	020 And TEMP, TEMP, -2147483648
	021 Compare TEMP, -2147483648
	022 JumpIfEqual {44}
	023 Move W8, [X23+24]
	024 Subtract W8, W8, W21
	025 Move TEMP, X20
	026 And TEMP, TEMP, -2147483648
	027 Compare TEMP, -2147483648
	028 JumpIfEqual {67}
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X8, [X19+56]
	031 Move X1, X22
	032 Move W2, W21
	033 Move W3, W20
	034 Move X4, [X8+16]
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X0, X23
	040 Move X30, [X31+48]
	041 Move X23, [X31+56]
	042 Call 0x22F8FF0, X0, X1, X2, X3
	043 Return X0
	044 Move X0, 0x1E14000
	045 Move X0, [X0+1888]
	046 Call 0x1C17D08
	047 Call 0x1C17F10
	048 Move X20, X0
	049 Move X0, 0x1E34000
	050 Move X0, [X0+1624]
	051 Call 0x1C17D08
	052 Move X21, X0
	053 Move X0, 0x1E34000
	054 Move X0, [X0+1632]
	055 Move X0, 0x1E11000
	056 Move X0, [X0+1320]
	057 Call 0x1C17D08
	058 Call 0x1C17F10
	059 Move X20, X0
	060 Move X0, 0x1E34000
	061 Move X0, [X0+1600]
	062 Call 0x1C17D08
	063 Move X1, X0
	064 Move X0, X20
	065 Move X2, X31
	066 Call ArgumentNullException..ctor, X0, X1
	067 Move X0, 0x1E14000
	068 Move X0, [X0+1888]
	069 Call 0x1C17D08
	070 Call 0x1C17F10
	071 Move X20, X0
	072 Move X0, 0x1E34000
	073 Move X0, [X0+1608]
	074 Call 0x1C17D08
	075 Move X21, X0
	076 Move X0, 0x1E34000
	077 Move X0, [X0+1616]
	078 Call 0x1C17D08
	079 Move X2, X0
	080 Move X0, X20
	081 Move X1, X21
	082 Move X3, X31
	083 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	084 Move X0, X20
	085 Move X1, X19
	086 Call 0x1C17DEC

Method: System.Int32 LastIndexOf(System.Array array, System.Object value)

Disassembly:
	0x033A2780 MOVZ W8, 0x1
	0x033A2784 STRB W8, [X24 + 0x13C]
	0x033A2788 LDR X1, [X25]
	0x033A278C MOV X0, X23
	0x033A2790 STP X31, X31, [X31 + 0x18]
	0x033A2794 STR X31, [X31 + 0x28]
	0x033A2798 STP X31, X31, [X31]
	0x033A279C STR X31, [X31 + 0x10]
	0x033A27A0 BL 0x1C16E00
	0x033A27A4 CBZ X0, 0x33A27C4
	0x033A27A8 LDR X1, [X25]
	0x033A27AC MOV X24, X0
	0x033A27B0 MOV X0, X22
	0x033A27B4 BL 0x1C16E00
	0x033A27B8 MOV X2, X0
	0x033A27BC CBZ X22, 0x33A27F4
	0x033A27C0 CBNZ X2, 0x33A27F4
	0x033A27C4 ADD X0, X31, 0x0
	0x033A27C8 MOV X1, X23
	0x033A27CC MOV X2, X22
	0x033A27D0 MOV X3, X21
	0x033A27D4 MOV X4, X31
	0x033A27D8 BL 0x33A44D0
	0x033A27DC ADD X0, X31, 0x0
	0x033A27E0 MOV W1, W20
	0x033A27E4 MOV W2, W19
	0x033A27E8 MOV X3, X31
	0x033A27EC BL 0x33A4808
	0x033A27F0 B 0x33A281C
	0x033A27F4 ADD X0, X31, 0x18
	0x033A27F8 MOV X1, X24
	0x033A27FC MOV X3, X21
	0x033A2800 MOV X4, X31
	0x033A2804 BL 0x33A358C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X0, 0
	006 JumpIfEqual {21}
	007 Move X19, X1
	008 Move X20, X0
	009 Call Array.get_Length, X0
	010 Move W21, W0
	011 Move X0, X20
	012 Call Array.get_Length, X0
	013 Move W3, W0
	014 Move X0, X20
	015 Move X1, X19
	016 Move X20, [X31+16]
	017 Move X19, [X31+24]
	018 Subtract W2, W21, 1
	019 Move X30, [X31+32]
	020 Move X21, [X31+40]
	021 Move X0, 0xD57000
	022 Move X0, [X0+1320]
	023 Call 0x1C17D08
	024 Call 0x1C17F10
	025 Move X19, X0
	026 Move X0, 0xD7A000
	027 Move X0, [X0+1600]
	028 Call 0x1C17D08
	029 Move X1, X0
	030 Move X0, X19
	031 Move X2, X31
	032 Call ArgumentNullException..ctor, X0, X1
	033 Move X0, 0xD8A000
	034 Move X0, [X0+2792]
	035 Call 0x1C17D08
	036 Move X1, X0
	037 Move X0, X19
	038 Call 0x1C17DEC

Method: System.Int32 LastIndexOf(System.Array array, System.Object value, System.Int32 startIndex)

Disassembly:
	0x033A2AB0 LDR X9, [X8 + 0x8F8]
	0x033A2AB4 LDR X2, [X8 + 0x900]
	0x033A2AB8 BLR X9
	0x033A2ABC TBNZ X0, 0x0, 0x33A2CA0
	0x033A2AC0 LDR X8, [X21]
	0x033A2AC4 MOV X0, X21
	0x033A2AC8 LDR X9, [X8 + 0x288]
	0x033A2ACC LDR X1, [X8 + 0x290]
	0x033A2AD0 BLR X9
	0x033A2AD4 TBNZ X0, 0x0, 0x33A2CC0
	0x033A2AD8 LDR W8, [X20 + 0x18]
	0x033A2ADC CMP W8, 0x0
	0x033A2AE0 B.LE 0x33A2CF4
	0x033A2AE4 LDR W9, [X19 + 0x18]
	0x033A2AE8 CMP W8, W9
	0x033A2AEC B.NE 0x33A2D14
	0x033A2AF0 MOV W10, W31
	0x033A2AF4 MOVZ W9, 0x80000000
	0x033A2AF8 CMP W8, W10
	0x033A2AFC B.EQ 0x33A2B54
	0x033A2B00 SXTW X10, W10
	0x033A2B04 ADD X11, X20, X10, 0x2, LSL

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {6}
	003 Add W3, W2, 1
	004 Call Array.LastIndexOf, X0, X1, X2, X3
	005 Return X0
	006 Move [X31-16], X30
	007 Move [X31-8], X19
	008 Move X0, 0xD57000
	009 Move X0, [X0+1320]
	010 Call 0x1C17D08
	011 Call 0x1C17F10
	012 Move X19, X0
	013 Move X0, 0xD7A000
	014 Move X0, [X0+1600]
	015 Call 0x1C17D08
	016 Move X1, X0
	017 Move X0, X19
	018 Move X2, X31
	019 Call ArgumentNullException..ctor, X0, X1
	020 Move X0, 0xD8A000
	021 Move X0, [X0+2824]
	022 Call 0x1C17D08
	023 Move X1, X0
	024 Move X0, X19
	025 Call 0x1C17DEC

Method: System.Int32 LastIndexOf(System.Array array, System.Object value, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x033A2808 ADD X0, X31, 0x18
	0x033A280C MOV W1, W20
	0x033A2810 MOV W2, W19
	0x033A2814 MOV X3, X31
	0x033A2818 BL 0x33A399C
	0x033A281C LDP X20, X19, [X31 + 0x60]
	0x033A2820 LDP X22, X21, [X31 + 0x50]
	0x033A2824 LDP X24, X23, [X31 + 0x40]
	0x033A2828 LDP X30, X25, [X31 + 0x30]
	0x033A282C ADD X31, X31, 0x70
	0x033A2830 RET
	0x033A2834 STP X30, X21, [X31 - 0x20]!
	0x033A2838 STP X20, X19, [X31 + 0x10]
	0x033A283C ADRP X20, 0x103B000
	0x033A2840 ADRP X21, 0xD89000
	0x033A2844 LDRB W8, [X20 + 0x131]
	0x033A2848 LDR X21, [X21 + 0xB78]
	0x033A284C MOV X19, X0
	0x033A2850 TBNZ X8, 0x0, 0x33A2868
	0x033A2854 ADRP X0, 0xD89000
	0x033A2858 LDR X0, [X0 + 0xB78]
	0x033A285C BL 0x1C16CF4
	0x033A2860 MOVZ W8, 0x1
	0x033A2864 STRB W8, [X20 + 0x131]
	0x033A2868 LDR X0, [X21]
	0x033A286C BL 0x1C16F10
	0x033A2870 MOV X1, X19
	0x033A2874 MOV X2, X31
	0x033A2878 MOV X20, X0
	0x033A287C BL 0x33A33FC
	0x033A2880 MOV X0, X20
	0x033A2884 LDP X20, X19, [X31 + 0x10]
	0x033A2888 LDP X30, X21, [X31], #0x20
	0x033A288C RET
	0x033A2890 MOV X1, X31
	0x033A2894 B 0x33BDD8C
	0x033A2898 B 0x3395B7C
	0x033A289C MOVZ W0, 0x1
	0x033A28A0 RET
	0x033A28A4 CBZ X0, 0x33A28B0
	0x033A28A8 ADD X0, X0, 0x20
	0x033A28AC RET
	0x033A28B0 STR X30, [X31 - 0x10]!
	0x033A28B4 BL 0x1C16F20
	0x033A28B8 STP X30, X19, [X31 - 0x10]!
	0x033A28BC ADRP X0, 0xD51000
	0x033A28C0 LDR X0, [X0 + 0xB40]
	0x033A28C4 BL 0x1C16D08
	0x033A28C8 BL 0x1C16F10
	0x033A28CC MOV X19, X0
	0x033A28D0 ADRP X0, 0xD89000
	0x033A28D4 LDR X0, [X0 + 0xB80]
	0x033A28D8 BL 0x1C16D08
	0x033A28DC MOV X1, X0
	0x033A28E0 MOV X0, X19
	0x033A28E4 MOV X2, X31
	0x033A28E8 BL 0x3379A44
	0x033A28EC ADRP X0, 0xD89000
	0x033A28F0 LDR X0, [X0 + 0xB88]
	0x033A28F4 BL 0x1C16D08
	0x033A28F8 MOV X1, X0
	0x033A28FC MOV X0, X19
	0x033A2900 BL 0x1C16DEC
	0x033A2904 B 0x3395B7C
	0x033A2908 STP X30, X19, [X31 - 0x10]!
	0x033A290C ADRP X0, 0xD51000
	0x033A2910 LDR X0, [X0 + 0xB40]
	0x033A2914 BL 0x1C16D08
	0x033A2918 BL 0x1C16F10
	0x033A291C MOV X19, X0
	0x033A2920 ADRP X0, 0xD79000
	0x033A2924 LDR X0, [X0 + 0x598]
	0x033A2928 BL 0x1C16D08
	0x033A292C MOV X1, X0
	0x033A2930 MOV X0, X19
	0x033A2934 MOV X2, X31
	0x033A2938 BL 0x3379A44
	0x033A293C ADRP X0, 0xD89000
	0x033A2940 LDR X0, [X0 + 0xB90]
	0x033A2944 BL 0x1C16D08
	0x033A2948 MOV X1, X0
	0x033A294C MOV X0, X19
	0x033A2950 BL 0x1C16DEC
	0x033A2954 B 0x1C24D70
	0x033A2958 B 0x1C24EAC
	0x033A295C B 0x1C2500C
	0x033A2960 B 0x1C24AB0
	0x033A2964 B 0x1C24838
	0x033A2968 STP X30, X21, [X31 - 0x20]!
	0x033A296C STP X20, X19, [X31 + 0x10]
	0x033A2970 MOV W19, W1
	0x033A2974 MOV X20, X0
	0x033A2978 BL 0x1C24D2C
	0x033A297C MOV W21, W0
	0x033A2980 MOV X0, X20
	0x033A2984 MOV W1, W19
	0x033A2988 BL 0x1C24CE8
	0x033A298C LDP X20, X19, [X31 + 0x10]
	0x033A2990 ADD W8, W21, W0
	0x033A2994 SUB W0, W8, 0x1
	0x033A2998 LDP X30, X21, [X31], #0x20
	0x033A299C RET
	0x033A29A0 B 0x33A29A4
	0x033A29A4 STP X30, X23, [X31 - 0x30]!
	0x033A29A8 STP X22, X21, [X31 + 0x10]
	0x033A29AC STP X20, X19, [X31 + 0x20]
	0x033A29B0 ADRP X23, 0x103B000
	0x033A29B4 ADRP X22, 0xD51000
	0x033A29B8 LDRB W8, [X23 + 0x13A]
	0x033A29BC LDR X22, [X22 + 0x6C0]
	0x033A29C0 MOV X19, X2
	0x033A29C4 MOV X20, X1
	0x033A29C8 MOV X21, X0
	0x033A29CC TBNZ X8, 0x0, 0x33A29FC
	0x033A29D0 ADRP X0, 0xD7A000
	0x033A29D4 LDR X0, [X0 + 0x4E8]
	0x033A29D8 BL 0x1C16CF4
	0x033A29DC ADRP X0, 0xD51000
	0x033A29E0 LDR X0, [X0 + 0x6C0]
	0x033A29E4 BL 0x1C16CF4
	0x033A29E8 ADRP X0, 0xD82000
	0x033A29EC LDR X0, [X0 + 0x810]
	0x033A29F0 BL 0x1C16CF4
	0x033A29F4 MOVZ W8, 0x1
	0x033A29F8 STRB W8, [X23 + 0x13A]
	0x033A29FC LDR X0, [X22]
	0x033A2A00 LDR W8, [X0 + 0xE0]
	0x033A2A04 CBNZ W8, 0x33A2A0C
	0x033A2A08 BL 0x1C16DFC
	0x033A2A0C CBZ X21, 0x33A2BE4
	0x033A2A10 CBZ X20, 0x33A2C04
	0x033A2A14 CBZ X19, 0x33A2C24
	0x033A2A18 LDR X8, [X21]
	0x033A2A1C MOV X0, X21
	0x033A2A20 LDR X9, [X8 + 0x328]
	0x033A2A24 LDR X1, [X8 + 0x330]
	0x033A2A28 BLR X9
	0x033A2A2C CBZ X0, 0x33A2A50
	0x033A2A30 ADRP X8, 0xD7A000
	0x033A2A34 LDR X8, [X8 + 0x4E8]
	0x033A2A38 LDR X9, [X0]
	0x033A2A3C LDR X8, [X8]
	0x033A2A40 LDRB W11, [X9 + 0x130]
	0x033A2A44 LDRB W10, [X8 + 0x130]
	0x033A2A48 CMP W11, W10
	0x033A2A4C B.CS 0x33A2A58
	0x033A2A50 MOV X21, X31
	0x033A2A54 B 0x33A2A6C
	0x033A2A58 LDR X9, [X9 + 0xC8]
	0x033A2A5C ADD X9, X9, X10, 0x3, LSL
	0x033A2A60 LDUR X9, [X9 - 0x8]
	0x033A2A64 CMP X9, X8
	0x033A2A68 CSEL X21, X0, X31, EQ
	0x033A2A6C LDR X0, [X22]
	0x033A2A70 LDR W8, [X0 + 0xE0]
	0x033A2A74 CBNZ W8, 0x33A2A7C
	0x033A2A78 BL 0x1C16DFC
	0x033A2A7C CBZ X21, 0x33A2C58
	0x033A2A80 ADRP X8, 0xD82000
	0x033A2A84 LDR X0, [X22]
	0x033A2A88 LDR X8, [X8 + 0x810]
	0x033A2A8C LDR W9, [X0 + 0xE0]
	0x033A2A90 LDR X22, [X8]
	0x033A2A94 CBNZ W9, 0x33A2A9C
	0x033A2A98 BL 0x1C16DFC
	0x033A2A9C MOV X0, X22
	0x033A2AA0 BL 0x338C698
	0x033A2AA4 LDR X8, [X21]
	0x033A2AA8 MOV X1, X0
	0x033A2AAC MOV X0, X21

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x103C000
	009 Move W8, [X23+302]
	010 Move W22, W3
	011 Move W19, W2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xD52000
	019 Move X0, [X0+2512]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+302], W8
	023 Compare X21, 0
	024 JumpIfEqual {129}
	025 Move X0, X21
	026 Call Array.get_Length, X0
	027 Compare W0, 0
	028 JumpIfEqual {105}
	029 Move TEMP, X19
	030 And TEMP, TEMP, -2147483648
	031 Compare TEMP, -2147483648
	032 JumpIfEqual {118}
	033 Move X0, X21
	034 Call Array.get_Length, X0
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move TEMP, X22
	037 And TEMP, TEMP, -2147483648
	038 Compare TEMP, -2147483648
	039 JumpIfEqual {141}
	040 Add W8, W19, 1
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X0, X21
	043 Call 0x1C25D70
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X8, 0xD52000
	046 Move X8, [X8+2512]
	047 Move X0, X21
	048 Move X1, [X8]
	049 Call 0x1C17E00
	050 Subtract W24, W19, W22
	051 Compare X0, 0
	052 JumpIfEqual {76}
	053 Move X23, X0
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Compare X20, 0
	056 Invalid "Jump target not found in method."
	057 Move W19, W19
	058 Move X21, W24
	059 Add X22, X23, 32
	060 Move W8, [X23+24]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X0, [X22]
	063 Compare X0, 0
	064 JumpIfEqual {74}
	065 Move X8, [X0]
	066 Move X1, X20
	067 Move X9, [X8+312]
	068 Move X2, [X8+320]
	069 NotImplemented "Instruction BLR not yet implemented."
	070 Move TEMP, X0
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfEqual {108}
	074 Subtract X19, X19, 1
	075 NotImplemented "Instruction CMP not yet implemented."
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move X0, X21
	078 Move W1, W19
	079 Call Array.GetValue, X0, X1
	080 Compare X0, 0
	081 JumpIfEqual {91}
	082 Move X8, [X0]
	083 Move X1, X20
	084 Move X9, [X8+312]
	085 Move X2, [X8+320]
	086 NotImplemented "Instruction BLR not yet implemented."
	087 Move TEMP, X0
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfNotEqual {93}
	091 Compare X20, 0
	092 JumpIfEqual {108}
	093 Subtract W19, W19, 1
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move W8, [X23+24]
	096 Add X9, X23, W19
	097 Add X9, X9, 32
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move X10, [X9]
	100 Compare X10, 0
	101 JumpIfEqual {108}
	102 Subtract W19, W19, 1
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Subtract X9, X9, 8
	105 Move TEMP, 0
	106 Not TEMP
	107 Move W19, TEMP
	108 Move W0, W19
	109 Move X20, [X31+48]
	110 Move X19, [X31+56]
	111 Move X22, [X31+32]
	112 Move X21, [X31+40]
	113 Move X24, [X31+16]
	114 Move X23, [X31+24]
	115 Move X30, [X31+64]
	116 Return X0
	117 Call 0x1C17F28
	118 Move X0, 0xD5A000
	119 Move X0, [X0+1888]
	120 Call 0x1C17D08
	121 Call 0x1C17F10
	122 Move X19, X0
	123 Move X0, 0xD7A000
	124 Move X0, [X0+1624]
	125 Call 0x1C17D08
	126 Move X20, X0
	127 Move X0, 0xD7A000
	128 Move X0, [X0+1632]
	129 Move X0, 0xD57000
	130 Move X0, [X0+1320]
	131 Call 0x1C17D08
	132 Call 0x1C17F10
	133 Move X19, X0
	134 Move X0, 0xD7A000
	135 Move X0, [X0+1600]
	136 Call 0x1C17D08
	137 Move X1, X0
	138 Move X0, X19
	139 Move X2, X31
	140 Call ArgumentNullException..ctor, X0, X1
	141 Move X0, 0xD5A000
	142 Move X0, [X0+1888]
	143 Call 0x1C17D08
	144 Call 0x1C17F10
	145 Move X19, X0
	146 Move X0, 0xD7A000
	147 Move X0, [X0+1608]
	148 Call 0x1C17D08
	149 Move X20, X0
	150 Move X0, 0xD7A000
	151 Move X0, [X0+1616]
	152 Move X0, 0xD5A000
	153 Move X0, [X0+1888]
	154 Call 0x1C17D08
	155 Call 0x1C17F10
	156 Move X19, X0
	157 Move X0, 0xD8A000
	158 Move X0, [X0+2800]
	159 Call 0x1C17D08
	160 Move X20, X0
	161 Move X0, 0xD8A000
	162 Move X0, [X0+2808]
	163 Call 0x1C17D08
	164 Move X2, X0
	165 Move X0, X19
	166 Move X1, X20
	167 Move X3, X31
	168 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	169 Move X0, 0xD7A000
	170 Move X0, [X0+1440]
	171 Call 0x1C17D08
	172 Call 0x1C17F10
	173 Move X19, X0
	174 Move X0, 0xD8A000
	175 Move X0, [X0+2600]
	176 Call 0x1C17D08
	177 Move X1, X0
	178 Move X0, X19
	179 Call RankException..ctor, X0, X1
	180 Move X0, 0xD8A000
	181 Move X0, [X0+2816]
	182 Call 0x1C17D08
	183 Move X1, X0
	184 Move X0, X19
	185 Call 0x1C17DEC

Method: System.Int32 LastIndexOf(T[] array, T value)

Disassembly:
	0x020F8838 LDP X22, X21, [X31 + 0x20]
	0x020F883C LDP X24, X23, [X31 + 0x10]
	0x020F8840 LDR X30, [X31], #0x40
	0x020F8844 B 0x210ADD8
	0x020F8848 ADD W8, W21, 0x1
	0x020F884C CMP W8, 0x2
	0x020F8850 B.CS 0x20F88D4
	0x020F8854 CBNZ W20, 0x20F88A4
	0x020F8858 LDP X20, X19, [X31 + 0x30]
	0x020F885C LDP X22, X21, [X31 + 0x20]
	0x020F8860 LDP X24, X23, [X31 + 0x10]
	0x020F8864 MOVN W0, 0x0
	0x020F8868 LDR X30, [X31], #0x40
	0x020F886C RET
	0x020F8870 ADRP X0, 0x2000000
	0x020F8874 LDR X0, [X0 + 0x528]
	0x020F8878 BL 0x1C16D08
	0x020F887C BL 0x1C16F10
	0x020F8880 MOV X20, X0
	0x020F8884 ADRP X0, 0x2023000
	0x020F8888 LDR X0, [X0 + 0x640]
	0x020F888C BL 0x1C16D08
	0x020F8890 MOV X1, X0
	0x020F8894 MOV X0, X20
	0x020F8898 MOV X2, X31
	0x020F889C BL 0x330E100
	0x020F88A0 B 0x20F8918
	0x020F88A4 ADRP X0, 0x2003000
	0x020F88A8 LDR X0, [X0 + 0x760]
	0x020F88AC BL 0x1C16D08
	0x020F88B0 BL 0x1C16F10
	0x020F88B4 MOV X20, X0
	0x020F88B8 ADRP X0, 0x2023000
	0x020F88BC LDR X0, [X0 + 0x648]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+56]
	006 Move X19, X2
	007 Move X20, X1
	008 Move X21, X0
	009 Compare X8, 0
	010 JumpIfNotEqual {13}
	011 Move X0, X19
	012 Call 0x1C5D6E0
	013 Compare X21, 0
	014 JumpIfEqual {27}
	015 Move X8, [X19+56]
	016 Move W3, [X21+24]
	017 Move X1, X20
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X4, [X8+16]
	021 Subtract W2, W3, 1
	022 Move X0, X21
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call Array.LastIndexOf, X0, X1, X2, X3
	026 Return X0
	027 Move X0, 0x2001000
	028 Move X0, [X0+1320]
	029 Call 0x1C17D08
	030 Call 0x1C17F10
	031 Move X20, X0
	032 Move X0, 0x2024000
	033 Move X0, [X0+1600]
	034 Call 0x1C17D08
	035 Move X1, X0
	036 Move X0, X20
	037 Move X2, X31
	038 Call ArgumentNullException..ctor, X0, X1
	039 Move X0, X20
	040 Move X1, X19
	041 Call 0x1C17DEC

Method: System.Int32 LastIndexOf(T[] array, T value, System.Int32 startIndex)

Disassembly:
	0x020F89F0 MOV X2, X31
	0x020F89F4 BL 0x330E100
	0x020F89F8 B 0x20F8A70
	0x020F89FC ADRP X0, 0x2003000
	0x020F8A00 LDR X0, [X0 + 0x760]
	0x020F8A04 BL 0x1C16D08
	0x020F8A08 BL 0x1C16F10
	0x020F8A0C MOV X20, X0
	0x020F8A10 ADRP X0, 0x2023000
	0x020F8A14 LDR X0, [X0 + 0x648]
	0x020F8A18 BL 0x1C16D08
	0x020F8A1C MOV X21, X0
	0x020F8A20 ADRP X0, 0x2023000
	0x020F8A24 LDR X0, [X0 + 0x650]
	0x020F8A28 B 0x20F8A58
	0x020F8A2C ADRP X0, 0x2003000
	0x020F8A30 LDR X0, [X0 + 0x760]
	0x020F8A34 BL 0x1C16D08
	0x020F8A38 BL 0x1C16F10
	0x020F8A3C MOV X20, X0
	0x020F8A40 ADRP X0, 0x2023000
	0x020F8A44 LDR X0, [X0 + 0x658]
	0x020F8A48 BL 0x1C16D08
	0x020F8A4C MOV X21, X0
	0x020F8A50 ADRP X0, 0x2023000
	0x020F8A54 LDR X0, [X0 + 0x660]
	0x020F8A58 BL 0x1C16D08
	0x020F8A5C MOV X2, X0
	0x020F8A60 MOV X0, X20
	0x020F8A64 MOV X1, X21
	0x020F8A68 MOV X3, X31
	0x020F8A6C BL 0x3311888
	0x020F8A70 MOV X0, X20
	0x020F8A74 MOV X1, X19
	0x020F8A78 BL 0x1C16DEC
	0x020F8A7C STR X30, [X31 - 0x40]!
	0x020F8A80 STP X24, X23, [X31 + 0x10]
	0x020F8A84 STP X22, X21, [X31 + 0x20]
	0x020F8A88 STP X20, X19, [X31 + 0x30]
	0x020F8A8C LDR X8, [X5 + 0x38]
	0x020F8A90 MOV X19, X5
	0x020F8A94 MOV W20, W4
	0x020F8A98 MOV W21, W3
	0x020F8A9C MOV X22, X2
	0x020F8AA0 MOV X23, X1
	0x020F8AA4 MOV X24, X0
	0x020F8AA8 CBNZ X8, 0x20F8AB4
	0x020F8AAC MOV X0, X19
	0x020F8AB0 BL 0x1C5C6E0
	0x020F8AB4 CBZ X24, 0x20F8B34
	0x020F8AB8 LDR X8, [X24 + 0x18]
	0x020F8ABC CBZ X8, 0x20F8B0C
	0x020F8AC0 TBNZ X21, 0x1F, 0x20F8B98
	0x020F8AC4 CMP W8, W21
	0x020F8AC8 B.LE 0x20F8B98
	0x020F8ACC TBNZ X20, 0x1F, 0x20F8B68
	0x020F8AD0 SUB W8, W21, W20
	0x020F8AD4 ADDS W31, W8, 0x2
	0x020F8AD8 B.LE 0x20F8B68
	0x020F8ADC LDR X8, [X19 + 0x38]
	0x020F8AE0 MOV X0, X24
	0x020F8AE4 MOV X1, X23
	0x020F8AE8 MOV X2, X22
	0x020F8AEC LDR X5, [X8 + 0x10]
	0x020F8AF0 MOV W3, W21
	0x020F8AF4 MOV W4, W20
	0x020F8AF8 LDP X20, X19, [X31 + 0x30]
	0x020F8AFC LDP X22, X21, [X31 + 0x20]
	0x020F8B00 LDP X24, X23, [X31 + 0x10]
	0x020F8B04 LDR X30, [X31], #0x40

ISIL:
	001 Subtract X31, X31, 432
	002 Move [X31+368], X29
	003 Move [X31+384], X30
	004 Move [X31+392], X23
	005 Move [X31+400], X22
	006 Move [X31+408], X21
	007 Move [X31+416], X20
	008 Move [X31+424], X19
	009 Move X8, [X3+56]
	010 Move X19, X3
	011 Move W20, W2
	012 Move X22, X1
	013 Move X21, X0
	014 Compare X8, 0
	015 JumpIfNotEqual {18}
	016 Move X0, X19
	017 Call 0x1C5D6E0
	018 Compare X21, 0
	019 JumpIfEqual {64}
	020 Add X0, X31, 248
	021 Move W2, 120
	022 Move X1, X22
	023 Call 0x3EB2AC0
	024 Move X8, [X21+24]
	025 Compare X8, 0
	026 JumpIfEqual {33}
	027 Add X0, X31, 128
	028 Add X1, X31, 248
	029 Move W2, 120
	030 Add X22, X31, 128
	031 Call 0x3EB2AC0
	032 Add W23, W20, 1
	033 Add X0, X31, 128
	034 Add X1, X31, 248
	035 Move W2, 120
	036 Add X22, X31, 128
	037 Call 0x3EB2AC0
	038 Move W23, W31
	039 Add X0, X31, 8
	040 Move W2, 120
	041 Move X1, X22
	042 Call 0x3EB2AC0
	043 Move X8, [X19+56]
	044 Add X0, X31, 248
	045 Add X1, X31, 8
	046 Move W2, 120
	047 Move X19, [X8+16]
	048 Call 0x3EB2AC0
	049 Add X1, X31, 248
	050 Move X0, X21
	051 Move W2, W20
	052 Move W3, W23
	053 Move X4, X19
	054 Call Array.LastIndexOf, X0, X1, X2, X3
	055 Move X20, [X31+416]
	056 Move X19, [X31+424]
	057 Move X22, [X31+400]
	058 Move X21, [X31+408]
	059 Move X30, [X31+384]
	060 Move X23, [X31+392]
	061 Move X29, [X31+368]
	062 Add X31, X31, 432
	063 Return X0
	064 Move X0, 0x2001000
	065 Move X0, [X0+1320]
	066 Call 0x1C17D08
	067 Call 0x1C17F10
	068 Move X20, X0
	069 Move X0, 0x2024000
	070 Move X0, [X0+1600]
	071 Call 0x1C17D08
	072 Move X1, X0
	073 Move X0, X20
	074 Move X2, X31
	075 Call ArgumentNullException..ctor, X0, X1
	076 Move X0, X20
	077 Move X1, X19
	078 Call 0x1C17DEC

Method: System.Int32 LastIndexOf(T[] array, T value, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x020F939C LDP X24, X23, [X31 + 0x10]
	0x020F93A0 LDR X30, [X31], #0x40
	0x020F93A4 B 0x210B1F8
	0x020F93A8 ADD W8, W21, 0x1
	0x020F93AC CMP W8, 0x2
	0x020F93B0 B.CS 0x20F9434
	0x020F93B4 CBNZ W20, 0x20F9404
	0x020F93B8 LDP X20, X19, [X31 + 0x30]
	0x020F93BC LDP X22, X21, [X31 + 0x20]
	0x020F93C0 LDP X24, X23, [X31 + 0x10]
	0x020F93C4 MOVN W0, 0x0
	0x020F93C8 LDR X30, [X31], #0x40
	0x020F93CC RET
	0x020F93D0 ADRP X0, 0x1FFF000
	0x020F93D4 LDR X0, [X0 + 0x528]
	0x020F93D8 BL 0x1C16D08
	0x020F93DC BL 0x1C16F10
	0x020F93E0 MOV X20, X0
	0x020F93E4 ADRP X0, 0x2022000
	0x020F93E8 LDR X0, [X0 + 0x640]
	0x020F93EC BL 0x1C16D08
	0x020F93F0 MOV X1, X0
	0x020F93F4 MOV X0, X20
	0x020F93F8 MOV X2, X31
	0x020F93FC BL 0x330E100
	0x020F9400 B 0x20F9478
	0x020F9404 ADRP X0, 0x2002000
	0x020F9408 LDR X0, [X0 + 0x760]
	0x020F940C BL 0x1C16D08
	0x020F9410 BL 0x1C16F10
	0x020F9414 MOV X20, X0
	0x020F9418 ADRP X0, 0x2022000
	0x020F941C LDR X0, [X0 + 0x648]
	0x020F9420 BL 0x1C16D08
	0x020F9424 MOV X21, X0
	0x020F9428 ADRP X0, 0x2022000
	0x020F942C LDR X0, [X0 + 0x650]
	0x020F9430 B 0x20F9460
	0x020F9434 ADRP X0, 0x2002000
	0x020F9438 LDR X0, [X0 + 0x760]
	0x020F943C BL 0x1C16D08
	0x020F9440 BL 0x1C16F10
	0x020F9444 MOV X20, X0
	0x020F9448 ADRP X0, 0x2022000
	0x020F944C LDR X0, [X0 + 0x658]
	0x020F9450 BL 0x1C16D08
	0x020F9454 MOV X21, X0
	0x020F9458 ADRP X0, 0x2022000
	0x020F945C LDR X0, [X0 + 0x660]
	0x020F9460 BL 0x1C16D08
	0x020F9464 MOV X2, X0
	0x020F9468 MOV X0, X20
	0x020F946C MOV X1, X21
	0x020F9470 MOV X3, X31
	0x020F9474 BL 0x3311888
	0x020F9478 MOV X0, X20
	0x020F947C MOV X1, X19
	0x020F9480 BL 0x1C16DEC
	0x020F9484 STR X30, [X31 - 0x40]!
	0x020F9488 STP X24, X23, [X31 + 0x10]
	0x020F948C STP X22, X21, [X31 + 0x20]
	0x020F9490 STP X20, X19, [X31 + 0x30]
	0x020F9494 LDR X8, [X5 + 0x38]
	0x020F9498 MOV X19, X5
	0x020F949C MOV W20, W4
	0x020F94A0 MOV W21, W3
	0x020F94A4 MOV X22, X2
	0x020F94A8 MOV X23, X1
	0x020F94AC MOV X24, X0
	0x020F94B0 CBNZ X8, 0x20F94BC
	0x020F94B4 MOV X0, X19
	0x020F94B8 BL 0x1C5C6E0
	0x020F94BC CBZ X24, 0x20F953C
	0x020F94C0 LDR X8, [X24 + 0x18]
	0x020F94C4 CBZ X8, 0x20F9514
	0x020F94C8 TBNZ X21, 0x1F, 0x20F95A0
	0x020F94CC CMP W8, W21
	0x020F94D0 B.LE 0x20F95A0
	0x020F94D4 TBNZ X20, 0x1F, 0x20F9570
	0x020F94D8 SUB W8, W21, W20
	0x020F94DC ADDS W31, W8, 0x2
	0x020F94E0 B.LE 0x20F9570
	0x020F94E4 LDR X8, [X19 + 0x38]
	0x020F94E8 MOV X0, X24
	0x020F94EC MOV X1, X23
	0x020F94F0 MOV X2, X22

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X4+56]
	008 Move X19, X4
	009 Move W20, W3
	010 Move W21, W2
	011 Move X22, X1
	012 Move X23, X0
	013 Compare X8, 0
	014 JumpIfNotEqual {17}
	015 Move X0, X19
	016 Call 0x1C5D6E0
	017 Compare X23, 0
	018 JumpIfEqual {61}
	019 Move X8, [X23+24]
	020 Compare X8, 0
	021 JumpIfEqual {47}
	022 Move TEMP, X21
	023 And TEMP, TEMP, -2147483648
	024 Compare TEMP, -2147483648
	025 JumpIfEqual {84}
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move TEMP, X20
	028 And TEMP, TEMP, -2147483648
	029 Compare TEMP, -2147483648
	030 JumpIfEqual {73}
	031 Subtract W8, W21, W20
	032 Add W31, W8, 2
	033 Move X8, [X19+56]
	034 Move X1, X22
	035 Move W2, W21
	036 Move W3, W20
	037 Move X4, [X8+16]
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move X0, X23
	043 Move X30, [X31+48]
	044 Move X23, [X31+56]
	045 Call 0x210BC84, X0, X1, X2, X3
	046 Return X0
	047 Add W8, W21, 1
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Compare W20, 0
	050 JumpIfNotEqual {73}
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move TEMP, 0
	056 Not TEMP
	057 Move W0, TEMP
	058 Move X30, [X31+48]
	059 Move X23, [X31+56]
	060 Return X0
	061 Move X0, 0x2000000
	062 Move X0, [X0+1320]
	063 Call 0x1C17D08
	064 Call 0x1C17F10
	065 Move X20, X0
	066 Move X0, 0x2023000
	067 Move X0, [X0+1600]
	068 Call 0x1C17D08
	069 Move X1, X0
	070 Move X0, X20
	071 Move X2, X31
	072 Call ArgumentNullException..ctor, X0, X1
	073 Move X0, 0x2003000
	074 Move X0, [X0+1888]
	075 Call 0x1C17D08
	076 Call 0x1C17F10
	077 Move X20, X0
	078 Move X0, 0x2023000
	079 Move X0, [X0+1608]
	080 Call 0x1C17D08
	081 Move X21, X0
	082 Move X0, 0x2023000
	083 Move X0, [X0+1616]
	084 Move X0, 0x2003000
	085 Move X0, [X0+1888]
	086 Call 0x1C17D08
	087 Call 0x1C17F10
	088 Move X20, X0
	089 Move X0, 0x2023000
	090 Move X0, [X0+1624]
	091 Call 0x1C17D08
	092 Move X21, X0
	093 Move X0, 0x2023000
	094 Move X0, [X0+1632]
	095 Call 0x1C17D08
	096 Move X2, X0
	097 Move X0, X20
	098 Move X1, X21
	099 Move X3, X31
	100 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	101 Move X0, X20
	102 Move X1, X19
	103 Call 0x1C17DEC

Method: System.Void Reverse(System.Array array)

Disassembly:
	0x033A2B08 LDR W11, [X11 + 0x20]
	0x033A2B0C TBNZ X11, 0x1F, 0x33A2B58
	0x033A2B10 ADD X12, X19, X10, 0x2, LSL
	0x033A2B14 LDRSW X12, [X12 + 0x20]
	0x033A2B18 ADD X11, X12, X11
	0x033A2B1C CMP X11, X9
	0x033A2B20 B.GE 0x33A2B88
	0x033A2B24 ADD W10, W10, 0x1
	0x033A2B28 CMP W8, W10
	0x033A2B2C B.NE 0x33A2AF8
	0x033A2B30 CMP W8, 0x100
	0x033A2B34 B.GE 0x33A2D48
	0x033A2B38 MOV X0, X21
	0x033A2B3C MOV X1, X20
	0x033A2B40 MOV X2, X19
	0x033A2B44 LDP X20, X19, [X31 + 0x20]
	0x033A2B48 LDP X22, X21, [X31 + 0x10]
	0x033A2B4C LDP X30, X23, [X31], #0x30
	0x033A2B50 B 0x1C24838
	0x033A2B54 BL 0x1C16F28
	0x033A2B58 ADRP X0, 0xD59000
	0x033A2B5C LDR X0, [X0 + 0x760]
	0x033A2B60 BL 0x1C16D08
	0x033A2B64 BL 0x1C16F10
	0x033A2B68 MOV X19, X0
	0x033A2B6C ADRP X0, 0xD89000
	0x033A2B70 LDR X0, [X0 + 0x980]
	0x033A2B74 BL 0x1C16D08
	0x033A2B78 MOV X20, X0
	0x033A2B7C ADRP X0, 0xD89000
	0x033A2B80 LDR X0, [X0 + 0xB98]
	0x033A2B84 B 0x33A2BB4
	0x033A2B88 ADRP X0, 0xD59000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X0, 0
	005 JumpIfEqual {18}
	006 Move W1, W31
	007 Move X19, X0
	008 Call 0x1C25D2C
	009 Move W20, W0
	010 Move X0, X19
	011 Call Array.get_Length, X0
	012 Move W2, W0
	013 Move X0, X19
	014 Move W1, W20
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 Move X0, 0xD57000
	019 Move X0, [X0+1320]
	020 Call 0x1C17D08
	021 Call 0x1C17F10
	022 Move X19, X0
	023 Move X0, 0xD7A000
	024 Move X0, [X0+1600]
	025 Call 0x1C17D08
	026 Move X1, X0
	027 Move X0, X19
	028 Move X2, X31
	029 Call ArgumentNullException..ctor, X0, X1
	030 Move X0, 0xD8A000
	031 Move X0, [X0+2832]
	032 Call 0x1C17D08
	033 Move X1, X0
	034 Move X0, X19
	035 Call 0x1C17DEC

Method: System.Void Reverse(System.Array array, System.Int32 index, System.Int32 length)

Disassembly:
	0x033A2B8C LDR X0, [X0 + 0x760]
	0x033A2B90 BL 0x1C16D08
	0x033A2B94 BL 0x1C16F10
	0x033A2B98 MOV X19, X0
	0x033A2B9C ADRP X0, 0xD89000
	0x033A2BA0 LDR X0, [X0 + 0x980]
	0x033A2BA4 BL 0x1C16D08
	0x033A2BA8 MOV X20, X0
	0x033A2BAC ADRP X0, 0xD89000
	0x033A2BB0 LDR X0, [X0 + 0xBA0]
	0x033A2BB4 BL 0x1C16D08
	0x033A2BB8 MOV X2, X0
	0x033A2BBC MOV X0, X19
	0x033A2BC0 MOV X1, X20
	0x033A2BC4 MOV X3, X31
	0x033A2BC8 BL 0x3311888
	0x033A2BCC ADRP X0, 0xD89000
	0x033A2BD0 LDR X0, [X0 + 0xBA8]
	0x033A2BD4 BL 0x1C16D08
	0x033A2BD8 MOV X1, X0
	0x033A2BDC MOV X0, X19
	0x033A2BE0 BL 0x1C16DEC
	0x033A2BE4 ADRP X0, 0xD56000
	0x033A2BE8 LDR X0, [X0 + 0x528]
	0x033A2BEC BL 0x1C16D08
	0x033A2BF0 BL 0x1C16F10
	0x033A2BF4 MOV X19, X0
	0x033A2BF8 ADRP X0, 0xD89000
	0x033A2BFC LDR X0, [X0 + 0x990]
	0x033A2C00 B 0x33A2C40
	0x033A2C04 ADRP X0, 0xD56000
	0x033A2C08 LDR X0, [X0 + 0x528]
	0x033A2C0C BL 0x1C16D08
	0x033A2C10 BL 0x1C16F10
	0x033A2C14 MOV X19, X0
	0x033A2C18 ADRP X0, 0xD89000
	0x033A2C1C LDR X0, [X0 + 0x980]
	0x033A2C20 B 0x33A2C40
	0x033A2C24 ADRP X0, 0xD56000
	0x033A2C28 LDR X0, [X0 + 0x528]
	0x033A2C2C BL 0x1C16D08
	0x033A2C30 BL 0x1C16F10
	0x033A2C34 MOV X19, X0
	0x033A2C38 ADRP X0, 0xD89000
	0x033A2C3C LDR X0, [X0 + 0xBB0]
	0x033A2C40 BL 0x1C16D08
	0x033A2C44 MOV X1, X0
	0x033A2C48 MOV X0, X19
	0x033A2C4C MOV X2, X31
	0x033A2C50 BL 0x330E100
	0x033A2C54 B 0x33A2BCC
	0x033A2C58 ADRP X0, 0xD59000
	0x033A2C5C LDR X0, [X0 + 0x578]
	0x033A2C60 BL 0x1C16D08
	0x033A2C64 BL 0x1C16F10
	0x033A2C68 MOV X19, X0
	0x033A2C6C ADRP X0, 0xD83000
	0x033A2C70 LDR X0, [X0 + 0xE58]
	0x033A2C74 BL 0x1C16D08
	0x033A2C78 MOV X20, X0
	0x033A2C7C ADRP X0, 0xD89000
	0x033A2C80 LDR X0, [X0 + 0x990]
	0x033A2C84 BL 0x1C16D08
	0x033A2C88 MOV X2, X0
	0x033A2C8C MOV X0, X19
	0x033A2C90 MOV X1, X20
	0x033A2C94 MOV X3, X31
	0x033A2C98 BL 0x330E16C
	0x033A2C9C B 0x33A2BCC
	0x033A2CA0 ADRP X0, 0xD51000
	0x033A2CA4 LDR X0, [X0 + 0xB40]
	0x033A2CA8 BL 0x1C16D08
	0x033A2CAC BL 0x1C16F10
	0x033A2CB0 MOV X19, X0
	0x033A2CB4 ADRP X0, 0xD89000
	0x033A2CB8 LDR X0, [X0 + 0x998]
	0x033A2CBC B 0x33A2CDC
	0x033A2CC0 ADRP X0, 0xD51000
	0x033A2CC4 LDR X0, [X0 + 0xB40]
	0x033A2CC8 BL 0x1C16D08
	0x033A2CCC BL 0x1C16F10
	0x033A2CD0 MOV X19, X0
	0x033A2CD4 ADRP X0, 0xD89000
	0x033A2CD8 LDR X0, [X0 + 0x9A0]
	0x033A2CDC BL 0x1C16D08
	0x033A2CE0 MOV X1, X0
	0x033A2CE4 MOV X0, X19
	0x033A2CE8 MOV X2, X31
	0x033A2CEC BL 0x3379A44
	0x033A2CF0 B 0x33A2BCC
	0x033A2CF4 ADRP X0, 0xD59000
	0x033A2CF8 LDR X0, [X0 + 0x578]
	0x033A2CFC BL 0x1C16D08
	0x033A2D00 BL 0x1C16F10
	0x033A2D04 MOV X19, X0
	0x033A2D08 ADRP X0, 0xD89000
	0x033A2D0C LDR X0, [X0 + 0xBB8]
	0x033A2D10 B 0x33A2D30
	0x033A2D14 ADRP X0, 0xD59000
	0x033A2D18 LDR X0, [X0 + 0x578]
	0x033A2D1C BL 0x1C16D08
	0x033A2D20 BL 0x1C16F10
	0x033A2D24 MOV X19, X0
	0x033A2D28 ADRP X0, 0xD89000
	0x033A2D2C LDR X0, [X0 + 0xBC0]
	0x033A2D30 BL 0x1C16D08
	0x033A2D34 MOV X1, X0
	0x033A2D38 MOV X0, X19
	0x033A2D3C MOV X2, X31
	0x033A2D40 BL 0x3314A68
	0x033A2D44 B 0x33A2BCC
	0x033A2D48 ADRP X0, 0xD83000
	0x033A2D4C LDR X0, [X0 + 0x4B8]
	0x033A2D50 BL 0x1C16D08
	0x033A2D54 BL 0x1C16F10
	0x033A2D58 MOV X1, X31
	0x033A2D5C MOV X19, X0
	0x033A2D60 BL 0x33BE678
	0x033A2D64 B 0x33A2BCC
	0x033A2D68 B 0x33A2D6C
	0x033A2D6C STP X30, X23, [X31 - 0x30]!
	0x033A2D70 STP X22, X21, [X31 + 0x10]
	0x033A2D74 STP X20, X19, [X31 + 0x20]
	0x033A2D78 ADRP X22, 0x103B000
	0x033A2D7C ADRP X23, 0xD52000
	0x033A2D80 LDRB W8, [X22 + 0x137]
	0x033A2D84 LDR X23, [X23 + 0xE58]
	0x033A2D88 MOV W19, W2
	0x033A2D8C MOV W21, W1
	0x033A2D90 MOV X20, X0
	0x033A2D94 TBNZ X8, 0x0, 0x33A2DAC
	0x033A2D98 ADRP X0, 0xD52000
	0x033A2D9C LDR X0, [X0 + 0xE58]
	0x033A2DA0 BL 0x1C16CF4
	0x033A2DA4 MOVZ W8, 0x1
	0x033A2DA8 STRB W8, [X22 + 0x137]
	0x033A2DAC LDR X0, [X23]
	0x033A2DB0 MOVZ W1, 0x2
	0x033A2DB4 BL 0x1C16D6C
	0x033A2DB8 CBZ X0, 0x33A2DF0
	0x033A2DBC LDR W8, [X0 + 0x18]
	0x033A2DC0 MOV X1, X0
	0x033A2DC4 CBZ W8, 0x33A2DEC
	0x033A2DC8 CMP W8, 0x1
	0x033A2DCC STR W21, [X1 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x103C000
	007 Move W8, [X22+303]
	008 Move W21, W2
	009 Move W19, W1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xD8A000
	016 Move X0, [X0+2840]
	017 Call 0x1C17CF4
	018 Move X0, 0xD52000
	019 Move X0, [X0+2512]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+303], W8
	023 Compare X20, 0
	024 JumpIfEqual {86}
	025 Move X0, X20
	026 Move W1, W31
	027 Call 0x1C25D2C
	028 Move TEMP, X21
	029 And TEMP, TEMP, -2147483648
	030 Compare TEMP, -2147483648
	031 JumpIfEqual {98}
	032 Subtract W22, W0, W19
	033 Move X0, X20
	034 Call Array.get_Length, X0
	035 Add W8, W22, W0
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, X20
	038 Call 0x1C25D70
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X8, 0xD52000
	041 Move X8, [X8+2512]
	042 Move X0, X20
	043 Move X1, [X8]
	044 Call 0x1C17E00
	045 Compare X0, 0
	046 JumpIfEqual {59}
	047 Move X8, 0xD8A000
	048 Move X8, [X8+2840]
	049 Move W1, W19
	050 Move W2, W21
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X3, [X8]
	054 Move X22, [X31+16]
	055 Move X21, [X31+24]
	056 Move X30, [X31+48]
	057 Call Array.Reverse, X0, X1, X2
	058 Return 
	059 Add W8, W21, W19
	060 Subtract W21, W8, 1
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X0, X20
	063 Move W1, W19
	064 Call Array.GetValue, X0, X1
	065 Move X22, X0
	066 Move X0, X20
	067 Move W1, W21
	068 Call Array.GetValue, X0, X1
	069 Move X1, X0
	070 Move X0, X20
	071 Move W2, W19
	072 Call Array.SetValue, X0, X1, X2
	073 Move X0, X20
	074 Move X1, X22
	075 Move W2, W21
	076 Call Array.SetValue, X0, X1, X2
	077 Add W19, W19, 1
	078 Subtract W21, W21, 1
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X20, [X31+32]
	081 Move X19, [X31+40]
	082 Move X22, [X31+16]
	083 Move X21, [X31+24]
	084 Move X30, [X31+48]
	085 Return 
	086 Move X0, 0xD57000
	087 Move X0, [X0+1320]
	088 Call 0x1C17D08
	089 Call 0x1C17F10
	090 Move X19, X0
	091 Move X0, 0xD7A000
	092 Move X0, [X0+1600]
	093 Call 0x1C17D08
	094 Move X1, X0
	095 Move X0, X19
	096 Move X2, X31
	097 Call ArgumentNullException..ctor, X0, X1
	098 Move X8, 0xD5A000
	099 Move X9, 0xD5D000
	100 Move X8, [X8+1896]
	101 Move X9, [X9+304]
	102 NotImplemented "Instruction CMP not yet implemented."
	103 NotImplemented "Instruction CSEL not yet implemented."
	104 Call 0x1C17D08
	105 Move X19, X0
	106 Move X0, 0xD5A000
	107 Move X0, [X0+1888]
	108 Call 0x1C17D08
	109 Call 0x1C17F10
	110 Move X20, X0
	111 Move X0, 0xD7A000
	112 Move X0, [X0+1648]
	113 Call 0x1C17D08
	114 Move X2, X0
	115 Move X0, X20
	116 Move X1, X19
	117 Move X3, X31
	118 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	119 Move X0, 0xD8A000
	120 Move X0, [X0+2848]
	121 Call 0x1C17D08
	122 Move X1, X0
	123 Move X0, X20
	124 Call 0x1C17DEC
	125 Move X0, 0xD5A000
	126 Move X0, [X0+1400]
	127 Call 0x1C17D08
	128 Call 0x1C17F10
	129 Move X19, X0
	130 Move X0, 0xD7A000
	131 Move X0, [X0+1888]
	132 Call 0x1C17D08
	133 Move X1, X0
	134 Move X0, X19
	135 Move X2, X31
	136 Call ArgumentException..ctor, X0, X1
	137 Move X0, 0xD7A000
	138 Move X0, [X0+1440]
	139 Call 0x1C17D08
	140 Call 0x1C17F10
	141 Move X19, X0
	142 Move X0, 0xD8A000
	143 Move X0, [X0+2600]
	144 Call 0x1C17D08
	145 Move X1, X0
	146 Move X0, X19
	147 Call RankException..ctor, X0, X1
	148 Move X0, 0xD8A000
	149 Move X0, [X0+2848]
	150 Call 0x1C17D08
	151 Move X1, X0
	152 Move X0, X19
	153 Call 0x1C17DEC

Method: System.Void Reverse(T[] array)

Disassembly:
	0x021475E8 CMP W2, 0x2
	0x021475EC B.LT 0x2147624
	0x021475F0 ADD X9, X0, W1, 0x4, SXTW
	0x021475F4 ADD X8, X9, W2, 0x4, UXTW
	0x021475F8 ADD X8, X8, 0x10
	0x021475FC ADD X9, X9, 0x30
	0x02147600 LDUR V0, [X9 - 0x10]
	0x02147604 STR V0, [X31]
	0x02147608 LDR V0, [X8]
	0x0214760C STUR V0, [X9 - 0x10]
	0x02147610 LDR V0, [X31]
	0x02147614 STR V0, [X8], #0xFFFFFFFFFFFFFFF0
	0x02147618 CMP X9, X8
	0x0214761C ADD X9, X9, 0x10
	0x02147620 B.CC 0x2147600
	0x02147624 LDP X20, X19, [X31 + 0x20]
	0x02147628 LDP X30, X21, [X31 + 0x10]
	0x0214762C ADD X31, X31, 0x30
	0x02147630 RET
	0x02147634 ADRP X0, 0x1FB1000
	0x02147638 LDR X0, [X0 + 0x528]
	0x0214763C MOV X19, X3
	0x02147640 BL 0x1C16D08
	0x02147644 BL 0x1C16F10
	0x02147648 MOV X20, X0
	0x0214764C ADRP X0, 0x1FD4000
	0x02147650 LDR X0, [X0 + 0x640]
	0x02147654 BL 0x1C16D08
	0x02147658 MOV X1, X0
	0x0214765C MOV X0, X20
	0x02147660 MOV X2, X31
	0x02147664 BL 0x330E100

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+56]
	005 Move X19, X1
	006 Move X20, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {11}
	009 Move X0, X19
	010 Call 0x1C5D6E0
	011 Compare X20, 0
	012 JumpIfEqual {23}
	013 Move X8, [X19+56]
	014 Move W2, [X20+24]
	015 Move X0, X20
	016 Move X20, [X31+16]
	017 Move X19, [X31+24]
	018 Move X3, [X8+8]
	019 Move W1, W31
	020 Move X30, [X31+32]
	021 Call Array.Reverse, X0, X1, X2
	022 Return 
	023 Move X0, 0x1FB2000
	024 Move X0, [X0+1320]
	025 Call 0x1C17D08
	026 Call 0x1C17F10
	027 Move X20, X0
	028 Move X0, 0x1FD5000
	029 Move X0, [X0+1600]
	030 Call 0x1C17D08
	031 Move X1, X0
	032 Move X0, X20
	033 Move X2, X31
	034 Call ArgumentNullException..ctor, X0, X1
	035 Move X0, X20
	036 Move X1, X19
	037 Call 0x1C17DEC

Method: System.Void Reverse(T[] array, System.Int32 index, System.Int32 length)

Disassembly:
	0x0214776C B.CC 0x214774C
	0x02147770 LDP X20, X19, [X31 + 0x20]
	0x02147774 LDP X30, X21, [X31 + 0x10]
	0x02147778 ADD X31, X31, 0x30
	0x0214777C RET
	0x02147780 ADRP X0, 0x1FB1000
	0x02147784 LDR X0, [X0 + 0x528]
	0x02147788 MOV X19, X3
	0x0214778C BL 0x1C16D08
	0x02147790 BL 0x1C16F10
	0x02147794 MOV X20, X0
	0x02147798 ADRP X0, 0x1FD4000
	0x0214779C LDR X0, [X0 + 0x640]
	0x021477A0 BL 0x1C16D08
	0x021477A4 MOV X1, X0
	0x021477A8 MOV X0, X20
	0x021477AC MOV X2, X31
	0x021477B0 BL 0x330E100
	0x021477B4 B 0x214784C
	0x021477B8 ADRP X8, 0x1FB4000
	0x021477BC ADRP X9, 0x1FB7000
	0x021477C0 LDR X8, [X8 + 0x768]
	0x021477C4 LDR X9, [X9 + 0x130]
	0x021477C8 CMP W1, 0x0
	0x021477CC MOV X19, X3
	0x021477D0 CSEL X0, X9, X8, LT
	0x021477D4 BL 0x1C16D08
	0x021477D8 MOV X20, X0
	0x021477DC ADRP X0, 0x1FB4000
	0x021477E0 LDR X0, [X0 + 0x760]
	0x021477E4 BL 0x1C16D08
	0x021477E8 BL 0x1C16F10
	0x021477EC MOV X21, X0
	0x021477F0 ADRP X0, 0x1FD4000
	0x021477F4 LDR X0, [X0 + 0x670]
	0x021477F8 BL 0x1C16D08
	0x021477FC MOV X2, X0
	0x02147800 MOV X0, X21
	0x02147804 MOV X1, X20
	0x02147808 MOV X3, X31
	0x0214780C BL 0x3311888
	0x02147810 MOV X0, X21
	0x02147814 B 0x2147850
	0x02147818 ADRP X0, 0x1FB4000
	0x0214781C LDR X0, [X0 + 0x578]
	0x02147820 MOV X19, X3
	0x02147824 BL 0x1C16D08
	0x02147828 BL 0x1C16F10
	0x0214782C MOV X20, X0
	0x02147830 ADRP X0, 0x1FD4000
	0x02147834 LDR X0, [X0 + 0x760]
	0x02147838 BL 0x1C16D08
	0x0214783C MOV X1, X0
	0x02147840 MOV X0, X20
	0x02147844 MOV X2, X31
	0x02147848 BL 0x3314A68
	0x0214784C MOV X0, X20
	0x02147850 MOV X1, X19
	0x02147854 BL 0x1C16DEC
	0x02147858 SUB X31, X31, 0x30
	0x0214785C STP X30, X21, [X31 + 0x10]
	0x02147860 STP X20, X19, [X31 + 0x20]
	0x02147864 CBZ X0, 0x21478CC
	0x02147868 TBNZ X2, 0x1F, 0x2147904
	0x0214786C TBNZ X1, 0x1F, 0x2147904
	0x02147870 LDR W8, [X0 + 0x18]
	0x02147874 SUB W8, W8, W1
	0x02147878 CMP W8, W2
	0x0214787C B.LT 0x2147964
	0x02147880 CMP W2, 0x2
	0x02147884 B.LT 0x21478BC
	0x02147888 ADD X9, X0, W1, 0x4, SXTW
	0x0214788C ADD X8, X9, W2, 0x4, UXTW
	0x02147890 ADD X8, X8, 0x10
	0x02147894 ADD X9, X9, 0x30
	0x02147898 LDUR V0, [X9 - 0x10]
	0x0214789C STR V0, [X31]
	0x021478A0 LDR V0, [X8]
	0x021478A4 STUR V0, [X9 - 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X0, 0
	006 JumpIfEqual {34}
	007 Move TEMP, X2
	008 And TEMP, TEMP, -2147483648
	009 Compare TEMP, -2147483648
	010 JumpIfEqual {47}
	011 Move TEMP, X1
	012 And TEMP, TEMP, -2147483648
	013 Compare TEMP, -2147483648
	014 JumpIfEqual {47}
	015 Move W8, [X0+24]
	016 Subtract W8, W8, W1
	017 NotImplemented "Instruction CMP not yet implemented."
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Add X9, X0, W1
	020 Add X8, X9, W2
	021 Add X8, X8, 24
	022 Add X9, X9, 40
	023 Move X10, [X8]
	024 NotImplemented "Instruction LDUR not yet implemented."
	025 Move [X9-8], X10
	026 Move [X8-8], X11
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Add X9, X9, 8
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return 
	034 Move X0, 0x1FB2000
	035 Move X0, [X0+1320]
	036 Move X19, X3
	037 Call 0x1C17D08
	038 Call 0x1C17F10
	039 Move X20, X0
	040 Move X0, 0x1FD5000
	041 Move X0, [X0+1600]
	042 Call 0x1C17D08
	043 Move X1, X0
	044 Move X0, X20
	045 Move X2, X31
	046 Call ArgumentNullException..ctor, X0, X1
	047 Move X8, 0x1FB5000
	048 Move X9, 0x1FB8000
	049 Move X8, [X8+1896]
	050 Move X9, [X9+304]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X19, X3
	053 NotImplemented "Instruction CSEL not yet implemented."
	054 Call 0x1C17D08
	055 Move X20, X0
	056 Move X0, 0x1FB5000
	057 Move X0, [X0+1888]
	058 Call 0x1C17D08
	059 Call 0x1C17F10
	060 Move X21, X0
	061 Move X0, 0x1FD5000
	062 Move X0, [X0+1648]
	063 Call 0x1C17D08
	064 Move X2, X0
	065 Move X0, X21
	066 Move X1, X20
	067 Move X3, X31
	068 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	069 Move X0, X21
	070 Move X0, 0x1FB5000
	071 Move X0, [X0+1400]
	072 Move X19, X3
	073 Call 0x1C17D08
	074 Call 0x1C17F10
	075 Move X20, X0
	076 Move X0, 0x1FD5000
	077 Move X0, [X0+1888]
	078 Call 0x1C17D08
	079 Move X1, X0
	080 Move X0, X20
	081 Move X2, X31
	082 Call ArgumentException..ctor, X0, X1
	083 Move X0, X20
	084 Move X1, X19
	085 Call 0x1C17DEC

Method: System.Void SetValue(System.Object value, System.Int64 index)

Disassembly:
	0x033A2DD0 B.EQ 0x33A2DEC
	0x033A2DD4 STR W19, [X1 + 0x24]
	0x033A2DD8 MOV X0, X20
	0x033A2DDC LDP X20, X19, [X31 + 0x20]
	0x033A2DE0 LDP X22, X21, [X31 + 0x10]
	0x033A2DE4 LDP X30, X23, [X31], #0x30
	0x033A2DE8 B 0x339F500
	0x033A2DEC BL 0x1C16F28
	0x033A2DF0 BL 0x1C16F20
	0x033A2DF4 B 0x339F500
	0x033A2DF8 STR X30, [X31 - 0x30]!
	0x033A2DFC STP X22, X21, [X31 + 0x10]
	0x033A2E00 STP X20, X19, [X31 + 0x20]
	0x033A2E04 ADRP X21, 0x103B000
	0x033A2E08 ADRP X22, 0xD52000
	0x033A2E0C LDRB W8, [X21 + 0x136]
	0x033A2E10 LDR X22, [X22 + 0xE58]
	0x033A2E14 MOV W20, W1
	0x033A2E18 MOV X19, X0
	0x033A2E1C TBNZ X8, 0x0, 0x33A2E34
	0x033A2E20 ADRP X0, 0xD52000
	0x033A2E24 LDR X0, [X0 + 0xE58]
	0x033A2E28 BL 0x1C16CF4
	0x033A2E2C MOVZ W8, 0x1
	0x033A2E30 STRB W8, [X21 + 0x136]
	0x033A2E34 LDR X0, [X22]
	0x033A2E38 MOVZ W1, 0x1
	0x033A2E3C BL 0x1C16D6C

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Call Array.SetValue, X0, X1, X2
	003 Return 
	004 Move [X31-32], X30
	005 Move [X31+16], X20
	006 Move [X31+24], X19
	007 Move X0, 0xD5A000
	008 Move X0, [X0+1888]
	009 Call 0x1C17D08
	010 Call 0x1C17F10
	011 Move X19, X0
	012 Move X0, 0xD5D000
	013 Move X0, [X0+304]
	014 Call 0x1C17D08
	015 Move X20, X0
	016 Move X0, 0xD8A000
	017 Move X0, [X0+2416]
	018 Call 0x1C17D08
	019 Move X2, X0
	020 Move X0, X19
	021 Move X1, X20
	022 Move X3, X31
	023 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	024 Move X0, 0xD8A000
	025 Move X0, [X0+2856]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Void SetValue(System.Object value, System.Int64 index1, System.Int64 index2)

Disassembly:
	0x033A2E40 CBZ X0, 0x33A2E68
	0x033A2E44 LDR W8, [X0 + 0x18]
	0x033A2E48 MOV X1, X0
	0x033A2E4C CBZ W8, 0x33A2E6C
	0x033A2E50 STR W20, [X1 + 0x20]
	0x033A2E54 MOV X0, X19
	0x033A2E58 LDP X20, X19, [X31 + 0x20]
	0x033A2E5C LDP X22, X21, [X31 + 0x10]
	0x033A2E60 LDR X30, [X31], #0x30
	0x033A2E64 B 0x339F500
	0x033A2E68 BL 0x1C16F20
	0x033A2E6C BL 0x1C16F28
	0x033A2E70 STR X30, [X31 - 0x40]!
	0x033A2E74 STP X24, X23, [X31 + 0x10]
	0x033A2E78 STP X22, X21, [X31 + 0x20]
	0x033A2E7C STP X20, X19, [X31 + 0x30]
	0x033A2E80 ADRP X23, 0x103B000
	0x033A2E84 ADRP X24, 0xD52000
	0x033A2E88 LDRB W8, [X23 + 0x138]
	0x033A2E8C LDR X24, [X24 + 0xE58]
	0x033A2E90 MOV W19, W3
	0x033A2E94 MOV W21, W2
	0x033A2E98 MOV W22, W1
	0x033A2E9C MOV X20, X0
	0x033A2EA0 TBNZ X8, 0x0, 0x33A2EB8
	0x033A2EA4 ADRP X0, 0xD52000
	0x033A2EA8 LDR X0, [X0 + 0xE58]
	0x033A2EAC BL 0x1C16CF4
	0x033A2EB0 MOVZ W8, 0x1
	0x033A2EB4 STRB W8, [X23 + 0x138]
	0x033A2EB8 LDR X0, [X24]
	0x033A2EBC MOVZ W1, 0x3
	0x033A2EC0 BL 0x1C16D6C
	0x033A2EC4 CBZ X0, 0x33A2F0C
	0x033A2EC8 LDR W8, [X0 + 0x18]
	0x033A2ECC MOV X1, X0
	0x033A2ED0 CBZ W8, 0x33A2F08
	0x033A2ED4 CMP W8, 0x1
	0x033A2ED8 STR W22, [X1 + 0x20]
	0x033A2EDC B.EQ 0x33A2F08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X20, [X31+16]
	007 Move X19, [X31+24]
	008 Move X30, [X31+32]
	009 Move X0, 0xD5A000
	010 Move X0, [X0+1888]
	011 Call 0x1C17D08
	012 Call 0x1C17F10
	013 Move X19, X0
	014 Move X0, 0xD7D000
	015 Move X0, [X0+4040]
	016 Move X0, 0xD5A000
	017 Move X0, [X0+1888]
	018 Call 0x1C17D08
	019 Call 0x1C17F10
	020 Move X19, X0
	021 Move X0, 0xD7D000
	022 Move X0, [X0+4048]
	023 Call 0x1C17D08
	024 Move X20, X0
	025 Move X0, 0xD8A000
	026 Move X0, [X0+2416]
	027 Call 0x1C17D08
	028 Move X2, X0
	029 Move X0, X19
	030 Move X1, X20
	031 Move X3, X31
	032 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	033 Move X0, 0xD8A000
	034 Move X0, [X0+2864]
	035 Call 0x1C17D08
	036 Move X1, X0
	037 Move X0, X19
	038 Call 0x1C17DEC

Method: System.Void SetValue(System.Object value, System.Int64 index1, System.Int64 index2, System.Int64 index3)

Disassembly:
	0x033A2F78 MOV X19, X1
	0x033A2F7C MOV X20, X0
	0x033A2F80 LDR X9, [X8 + 0x5E8]
	0x033A2F84 LDR X1, [X8 + 0x5F0]
	0x033A2F88 BLR X9
	0x033A2F8C TBZ X0, 0x0, 0x33A2FB0
	0x033A2F90 LDR X8, [X20]
	0x033A2F94 MOV X0, X20
	0x033A2F98 MOV X1, X19
	0x033A2F9C LDR X3, [X8 + 0x2A8]
	0x033A2FA0 LDR X2, [X8 + 0x2B0]
	0x033A2FA4 LDP X20, X19, [X31 + 0x10]
	0x033A2FA8 LDR X30, [X31], #0x20
	0x033A2FAC BR X3
	0x033A2FB0 MOV X0, X20
	0x033A2FB4 BL 0x33962E8
	0x033A2FB8 CBZ X19, 0x33A3038
	0x033A2FBC TBZ X0, 0x0, 0x33A2FD4
	0x033A2FC0 LDR X8, [X19]
	0x033A2FC4 MOV X0, X19
	0x033A2FC8 LDR X9, [X8 + 0x5E8]
	0x033A2FCC LDR X1, [X8 + 0x5F0]
	0x033A2FD0 B 0x33A2FF0
	0x033A2FD4 MOV X0, X19
	0x033A2FD8 BL 0x33962E8
	0x033A2FDC LDR X8, [X20]
	0x033A2FE0 TBZ X0, 0x0, 0x33A3008
	0x033A2FE4 LDR X9, [X8 + 0x5E8]
	0x033A2FE8 LDR X1, [X8 + 0x5F0]
	0x033A2FEC MOV X0, X20
	0x033A2FF0 BLR X9
	0x033A2FF4 EOR W8, W0, 0x1
	0x033A2FF8 LDP X20, X19, [X31 + 0x10]
	0x033A2FFC AND W0, W8, 0x1
	0x033A3000 LDR X30, [X31], #0x20
	0x033A3004 RET
	0x033A3008 LDR X9, [X8 + 0x2A8]
	0x033A300C LDR X2, [X8 + 0x2B0]
	0x033A3010 MOV X0, X20
	0x033A3014 MOV X1, X19
	0x033A3018 BLR X9
	0x033A301C TBZ X0, 0x0, 0x33A3028
	0x033A3020 MOVZ W8, 0x1
	0x033A3024 B 0x33A2FF8
	0x033A3028 LDR X8, [X19]
	0x033A302C MOV X0, X19
	0x033A3030 MOV X1, X20
	0x033A3034 B 0x33A2F9C
	0x033A3038 BL 0x1C16F20
	0x033A303C B 0x339FCE8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CMP not yet implemented."
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X20, [X31+16]
	008 Move X19, [X31+24]
	009 Move X30, [X31+32]
	010 Move X0, 0xD5A000
	011 Move X0, [X0+1888]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0xD7D000
	016 Move X0, [X0+4040]
	017 Move X0, 0xD5A000
	018 Move X0, [X0+1888]
	019 Call 0x1C17D08
	020 Call 0x1C17F10
	021 Move X19, X0
	022 Move X0, 0xD7D000
	023 Move X0, [X0+4048]
	024 Move X0, 0xD5A000
	025 Move X0, [X0+1888]
	026 Call 0x1C17D08
	027 Call 0x1C17F10
	028 Move X19, X0
	029 Move X0, 0xD8A000
	030 Move X0, [X0+2736]
	031 Call 0x1C17D08
	032 Move X20, X0
	033 Move X0, 0xD89000
	034 Move X0, [X0+2416]
	035 Call 0x1C17D08
	036 Move X2, X0
	037 Move X0, X19
	038 Move X1, X20
	039 Move X3, X31
	040 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	041 Move X0, 0xD89000
	042 Move X0, [X0+2872]
	043 Call 0x1C17D08
	044 Move X1, X0
	045 Move X0, X19
	046 Call 0x1C17DEC

Method: System.Void SetValue(System.Object value, System.Int64[] indices)

Disassembly:
	0x033A30E8 CBNZ W8, 0x33A30F0
	0x033A30EC BL 0x1C16DFC
	0x033A30F0 LDR X8, [X21 + 0x38]
	0x033A30F4 MOV X0, X20
	0x033A30F8 MOV X1, X19
	0x033A30FC LDR X2, [X8 + 0x8]
	0x033A3100 BL 0x28254B0
	0x033A3104 STP X0, X1, [X31 + 0x8]
	0x033A3108 ADRP X21, 0xD88000
	0x033A310C ADRP X23, 0xD88000
	0x033A3110 ADRP X24, 0xD88000
	0x033A3114 LDR X21, [X21 + 0x2D0]
	0x033A3118 LDR X23, [X23 + 0x2C0]
	0x033A311C LDR X24, [X24 + 0x2C8]
	0x033A3120 MOV W20, W31
	0x033A3124 MOV W19, W31
	0x033A3128 LDR X0, [X21]
	0x033A312C LDR W8, [X0 + 0xE0]
	0x033A3130 CBNZ W8, 0x33A3138
	0x033A3134 BL 0x1C16DFC
	0x033A3138 LDR X25, [X23]
	0x033A313C LDR X0, [X25 + 0x20]
	0x033A3140 LDRB W8, [X0 + 0x135]
	0x033A3144 TBNZ X8, 0x0, 0x33A314C
	0x033A3148 BL 0x1C5C684
	0x033A314C LDR X8, [X0 + 0xC0]
	0x033A3150 LDR X0, [X8 + 0x8]
	0x033A3154 LDRB W8, [X0 + 0x135]
	0x033A3158 TBNZ X8, 0x0, 0x33A3160
	0x033A315C BL 0x1C5C684
	0x033A3160 LDR W8, [X0 + 0xE0]
	0x033A3164 CBNZ W8, 0x33A316C
	0x033A3168 BL 0x1C16DFC
	0x033A316C LDR X0, [X25 + 0x20]
	0x033A3170 LDRB W8, [X0 + 0x135]
	0x033A3174 TBNZ X8, 0x0, 0x33A317C
	0x033A3178 BL 0x1C5C684
	0x033A317C LDR X8, [X0 + 0xC0]
	0x033A3180 LDR X0, [X8 + 0x8]
	0x033A3184 LDRB W8, [X0 + 0x135]
	0x033A3188 TBNZ X8, 0x0, 0x33A3190
	0x033A318C BL 0x1C5C684
	0x033A3190 LDR X8, [X0 + 0xB8]
	0x033A3194 LDR W8, [X8]
	0x033A3198 CMP W19, W8
	0x033A319C B.GE 0x33A31D0
	0x033A31A0 LDR X0, [X21]
	0x033A31A4 LDR W8, [X0 + 0xE0]
	0x033A31A8 CBNZ W8, 0x33A31B0
	0x033A31AC BL 0x1C16DFC
	0x033A31B0 LDR X2, [X24]
	0x033A31B4 ADD X0, X31, 0x8
	0x033A31B8 MOV W1, W19
	0x033A31BC BL 0x282C740
	0x033A31C0 CBNZ X0, 0x33A31D4
	0x033A31C4 ADD W19, W19, 0x1
	0x033A31C8 ADD W20, W20, 0x4
	0x033A31CC B 0x33A3128
	0x033A31D0 MOV X0, X31
	0x033A31D4 LDR X8, [X22 + 0x28]
	0x033A31D8 LDR X9, [X31 + 0x18]
	0x033A31DC CMP X8, X9
	0x033A31E0 B.NE 0x33A321C
	0x033A31E4 MOVZ X9, 0x4
	0x033A31E8 SUB X8, X0, 0x1
	0x033A31EC MOVK X9, 0x20000
	0x033A31F0 EOR X8, X8, X0, 0x0
	0x033A31F4 MOVK X9, 0x1
	0x033A31F8 MUL X8, X8, X9
	0x033A31FC UBFM X8, X8, 0x31, 0x3F
	0x033A3200 ADD W0, W8, W20
	0x033A3204 LDP X20, X19, [X31 + 0x50]
	0x033A3208 LDP X22, X21, [X31 + 0x40]
	0x033A320C LDP X24, X23, [X31 + 0x30]
	0x033A3210 LDP X30, X25, [X31 + 0x20]
	0x033A3214 ADD X31, X31, 0x60
	0x033A3218 RET
	0x033A321C BL 0x3EB1B20
	0x033A3220 SUB X31, X31, 0x50
	0x033A3224 STP X30, X23, [X31 + 0x20]
	0x033A3228 STP X22, X21, [X31 + 0x30]
	0x033A322C STP X20, X19, [X31 + 0x40]
	0x033A3230 MRS X22, 0xC000
	0x033A3234 LDR X8, [X22 + 0x28]
	0x033A3238 ADRP X21, 0x103A000
	0x033A323C MOV X19, X1
	0x033A3240 MOV X20, X0
	0x033A3244 STR X8, [X31 + 0x18]
	0x033A3248 LDRB W8, [X21 + 0x13E]
	0x033A324C CBNZ W8, 0x33A3288
	0x033A3250 ADRP X0, 0xD88000
	0x033A3254 LDR X0, [X0 + 0x2C0]
	0x033A3258 BL 0x1C16CF4
	0x033A325C ADRP X0, 0xD88000
	0x033A3260 LDR X0, [X0 + 0x2C8]
	0x033A3264 BL 0x1C16CF4
	0x033A3268 ADRP X0, 0xD88000
	0x033A326C LDR X0, [X0 + 0x2D0]
	0x033A3270 BL 0x1C16CF4
	0x033A3274 ADRP X0, 0xD88000
	0x033A3278 LDR X0, [X0 + 0x2B8]
	0x033A327C BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x103B000
	007 Move W8, [X22+304]
	008 Move X21, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xD52000
	016 Move X0, [X0+3672]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+304], W8
	020 Compare X21, 0
	021 JumpIfEqual {81}
	022 Move X0, X20
	023 Call 0x1C25D70
	024 Move W8, [X21+24]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X8, 0xD52000
	027 Move X8, [X8+3672]
	028 Move W1, W0
	029 Move X0, [X8]
	030 Call 0x1C17D6C
	031 Move W8, [X21+24]
	032 Move X2, X0
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X9, X31
	035 Add X10, X2, 32
	036 Add X11, X21, 32
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X12, [X11]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Compare X2, 0
	041 JumpIfEqual {80}
	042 Move W13, [X2+24]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move [X10], W12
	045 Add X9, X9, 1
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X0, X20
	048 Move X1, X19
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Call 0x1C25F1C
	055 Return 
	056 Call 0x1C17F28
	057 Move X0, 0xD59000
	058 Move X0, [X0+1888]
	059 Call 0x1C17D08
	060 Call 0x1C17F10
	061 Move X19, X0
	062 Move X0, 0xD5C000
	063 Move X0, [X0+304]
	064 Call 0x1C17D08
	065 Move X20, X0
	066 Move X0, 0xD89000
	067 Move X0, [X0+2416]
	068 Call 0x1C17D08
	069 Move X2, X0
	070 Move X0, X19
	071 Move X1, X20
	072 Move X3, X31
	073 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	074 Move X0, 0xD89000
	075 Move X0, [X0+2880]
	076 Call 0x1C17D08
	077 Move X1, X0
	078 Move X0, X19
	079 Call 0x1C17DEC
	080 Call 0x1C17F20
	081 Move X0, 0xD56000
	082 Move X0, [X0+1320]
	083 Call 0x1C17D08
	084 Call 0x1C17F10
	085 Move X19, X0
	086 Move X0, 0xD82000
	087 Move X0, [X0+3720]
	088 Call 0x1C17D08
	089 Move X1, X0
	090 Move X0, X19
	091 Move X2, X31
	092 Call ArgumentNullException..ctor, X0, X1
	093 Move X0, 0xD59000
	094 Move X0, [X0+1400]
	095 Call 0x1C17D08
	096 Call 0x1C17F10
	097 Move X19, X0
	098 Move X0, 0xD89000
	099 Move X0, [X0+2760]
	100 Call 0x1C17D08
	101 Move X1, X0
	102 Move X0, X19
	103 Move X2, X31
	104 Call ArgumentException..ctor, X0, X1

Method: System.Void Sort(System.Array array)

Disassembly:
	0x033A3284 STRB W8, [X21 + 0x13E]
	0x033A3288 ADRP X8, 0xD88000
	0x033A328C LDR X8, [X8 + 0x2B8]
	0x033A3290 STP X31, X31, [X31 + 0x8]
	0x033A3294 LDR X21, [X8]
	0x033A3298 LDR X8, [X21 + 0x38]
	0x033A329C CBNZ X8, 0x33A32AC
	0x033A32A0 MOV X0, X21
	0x033A32A4 BL 0x1C5C6E0
	0x033A32A8 LDR X8, [X21 + 0x38]
	0x033A32AC LDR X0, [X8 + 0x10]
	0x033A32B0 LDRB W8, [X0 + 0x135]
	0x033A32B4 TBNZ X8, 0x0, 0x33A32BC
	0x033A32B8 BL 0x1C5C684
	0x033A32BC LDR W8, [X0 + 0xE0]
	0x033A32C0 CBNZ W8, 0x33A32C8
	0x033A32C4 BL 0x1C16DFC
	0x033A32C8 LDR X8, [X21 + 0x38]
	0x033A32CC MOV X0, X20
	0x033A32D0 MOV X1, X19
	0x033A32D4 LDR X2, [X8 + 0x8]
	0x033A32D8 BL 0x28254B0
	0x033A32DC ADRP X20, 0xD88000
	0x033A32E0 LDR X20, [X20 + 0x2D0]
	0x033A32E4 MOV X8, X0
	0x033A32E8 STP X8, X1, [X31 + 0x8]
	0x033A32EC LDR X0, [X20]
	0x033A32F0 LDR W8, [X0 + 0xE0]
	0x033A32F4 CBNZ W8, 0x33A32FC
	0x033A32F8 BL 0x1C16DFC
	0x033A32FC ADRP X8, 0xD88000
	0x033A3300 LDR X8, [X8 + 0x2C0]
	0x033A3304 LDR X19, [X8]
	0x033A3308 LDR X0, [X19 + 0x20]
	0x033A330C LDRB W8, [X0 + 0x135]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X0, 0
	005 JumpIfEqual {20}
	006 Move W1, W31
	007 Move X19, X0
	008 Call 0x1C25D2C
	009 Move W20, W0
	010 Move X0, X19
	011 Call Array.get_Length, X0
	012 Move W3, W0
	013 Move X0, X19
	014 Move W2, W20
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X1, X31
	018 Move X4, X31
	019 Move X30, [X31+32]
	020 Move X0, 0xD56000
	021 Move X0, [X0+1320]
	022 Call 0x1C17D08
	023 Call 0x1C17F10
	024 Move X19, X0
	025 Move X0, 0xD79000
	026 Move X0, [X0+1600]
	027 Call 0x1C17D08
	028 Move X1, X0
	029 Move X0, X19
	030 Move X2, X31
	031 Call ArgumentNullException..ctor, X0, X1
	032 Move X0, 0xD89000
	033 Move X0, [X0+2888]
	034 Call 0x1C17D08
	035 Move X1, X0
	036 Move X0, X19
	037 Call 0x1C17DEC

Method: System.Void Sort(System.Array array, System.Int32 index, System.Int32 length)

Disassembly:
	0x033A354C MOV X1, X0
	0x033A3550 MOV X0, X19
	0x033A3554 BL 0x1C16DEC
	0x033A3558 ADRP X0, 0xD50000
	0x033A355C LDR X0, [X0 + 0xB40]

ISIL:
	001 Move W3, W2
	002 Move W2, W1
	003 Move X1, X31
	004 Move X4, X31
	005 Call Array.Sort, X0, X1, X2, X3, X4
	006 Return 

Method: System.Void Sort(System.Array array, System.Collections.IComparer comparer)

Disassembly:
	0x033A3560 BL 0x1C16D08
	0x033A3564 BL 0x1C16F10
	0x033A3568 MOV X19, X0
	0x033A356C ADRP X0, 0xD88000
	0x033A3570 LDR X0, [X0 + 0x410]
	0x033A3574 BL 0x1C16D08
	0x033A3578 MOV X1, X0
	0x033A357C MOV X0, X19
	0x033A3580 MOV X2, X31
	0x033A3584 BL 0x3379A44
	0x033A3588 B 0x33A3540
	0x033A358C STP X30, X23, [X31 - 0x30]!
	0x033A3590 STP X22, X21, [X31 + 0x10]
	0x033A3594 STP X20, X19, [X31 + 0x20]
	0x033A3598 ADRP X23, 0x103A000
	0x033A359C LDRB W8, [X23 + 0x13F]
	0x033A35A0 MOV X22, X3
	0x033A35A4 MOV X19, X2
	0x033A35A8 MOV X20, X1
	0x033A35AC MOV X21, X0
	0x033A35B0 TBNZ X8, 0x0, 0x33A35C8
	0x033A35B4 ADRP X0, 0xD79000
	0x033A35B8 LDR X0, [X0 + 0xD30]
	0x033A35BC BL 0x1C16CF4
	0x033A35C0 MOVZ W8, 0x1
	0x033A35C4 STRB W8, [X23 + 0x13F]
	0x033A35C8 CBNZ X22, 0x33A35F0
	0x033A35CC ADRP X22, 0xD79000
	0x033A35D0 LDR X22, [X22 + 0xD30]
	0x033A35D4 LDR X0, [X22]
	0x033A35D8 LDR W8, [X0 + 0xE0]
	0x033A35DC CBNZ W8, 0x33A35E8
	0x033A35E0 BL 0x1C16DFC
	0x033A35E4 LDR X0, [X22]
	0x033A35E8 LDR X8, [X0 + 0xB8]
	0x033A35EC LDR X22, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X0, 0
	006 JumpIfEqual {25}
	007 Move X19, X1
	008 Move W1, W31
	009 Move X20, X0
	010 Call 0x1C25D2C
	011 Move W21, W0
	012 Move X0, X20
	013 Call Array.get_Length, X0
	014 Move W3, W0
	015 Move X0, X20
	016 Move X4, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X1, X31
	020 Move W2, W21
	021 Move X30, [X31+32]
	022 Move X21, [X31+40]
	023 Call Array.Sort, X0, X1, X2, X3, X4
	024 Return 
	025 Move X0, 0xD56000
	026 Move X0, [X0+1320]
	027 Call 0x1C17D08
	028 Call 0x1C17F10
	029 Move X19, X0
	030 Move X0, 0xD79000
	031 Move X0, [X0+1600]
	032 Call 0x1C17D08
	033 Move X1, X0
	034 Move X0, X19
	035 Move X2, X31
	036 Call ArgumentNullException..ctor, X0, X1
	037 Move X0, 0xD89000
	038 Move X0, [X0+2912]
	039 Call 0x1C17D08
	040 Move X1, X0
	041 Move X0, X19
	042 Call 0x1C17DEC

Method: System.Void Sort(System.Array array, System.Int32 index, System.Int32 length, System.Collections.IComparer comparer)

Disassembly:
	0x033A35F0 STP X20, X19, [X21]
	0x033A35F4 STR X22, [X21 + 0x10]
	0x033A35F8 LDP X20, X19, [X31 + 0x20]
	0x033A35FC LDP X22, X21, [X31 + 0x10]
	0x033A3600 LDP X30, X23, [X31], #0x30

ISIL:
	001 Move X4, X3
	002 Move W3, W2
	003 Move W2, W1
	004 Move X1, X31
	005 Call Array.Sort, X0, X1, X2, X3, X4
	006 Return 

Method: System.Void Sort(System.Array keys, System.Array items)

Disassembly:
	0x033A3604 RET
	0x033A3608 STP X30, X27, [X31 - 0x50]!
	0x033A360C STP X26, X25, [X31 + 0x10]
	0x033A3610 STP X24, X23, [X31 + 0x20]
	0x033A3614 STP X22, X21, [X31 + 0x30]
	0x033A3618 STP X20, X19, [X31 + 0x40]
	0x033A361C ADRP X22, 0x103A000
	0x033A3620 LDRB W8, [X22 + 0x140]
	0x033A3624 MOV W19, W2
	0x033A3628 MOV W21, W1
	0x033A362C MOV X20, X0
	0x033A3630 TBNZ X8, 0x0, 0x33A3648
	0x033A3634 ADRP X0, 0xD7A000
	0x033A3638 LDR X0, [X0 + 0x918]
	0x033A363C BL 0x1C16CF4
	0x033A3640 MOVZ W8, 0x1
	0x033A3644 STRB W8, [X22 + 0x140]
	0x033A3648 CMP W21, W19
	0x033A364C B.EQ 0x33A380C
	0x033A3650 LDR X8, [X20]
	0x033A3654 CBZ X8, 0x33A3828
	0x033A3658 LDR W9, [X8 + 0x18]
	0x033A365C CMP W9, W21
	0x033A3660 B.LS 0x33A3824
	0x033A3664 CMP W9, W19
	0x033A3668 B.LS 0x33A3824
	0x033A366C LDR X22, [X20 + 0x10]
	0x033A3670 CBZ X22, 0x33A3828
	0x033A3674 SXTW X26, W21
	0x033A3678 SXTW X25, W19
	0x033A367C ADD X10, X8, X26, 0x3, LSL
	0x033A3680 ADD X8, X8, X25, 0x3, LSL
	0x033A3684 LDR X24, [X10 + 0x20]
	0x033A3688 ADRP X10, 0xD7A000
	0x033A368C LDR X9, [X22]
	0x033A3690 LDR X23, [X8 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X0, 0
	006 JumpIfEqual {25}
	007 Move X19, X1
	008 Move W1, W31
	009 Move X20, X0
	010 Call 0x1C25D2C
	011 Move W21, W0
	012 Move X0, X20
	013 Call Array.get_Length, X0
	014 Move W3, W0
	015 Move X0, X20
	016 Move X1, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move W2, W21
	020 Move X4, X31
	021 Move X30, [X31+32]
	022 Move X21, [X31+40]
	023 Call Array.Sort, X0, X1, X2, X3, X4
	024 Return 
	025 Move X0, 0xD56000
	026 Move X0, [X0+1320]
	027 Call 0x1C17D08
	028 Call 0x1C17F10
	029 Move X19, X0
	030 Move X0, 0xD79000
	031 Move X0, [X0+1904]
	032 Call 0x1C17D08
	033 Move X1, X0
	034 Move X0, X19
	035 Move X2, X31
	036 Call ArgumentNullException..ctor, X0, X1
	037 Move X0, 0xD89000
	038 Move X0, [X0+2920]
	039 Call 0x1C17D08
	040 Move X1, X0
	041 Move X0, X19
	042 Call 0x1C17DEC

Method: System.Void Sort(System.Array keys, System.Array items, System.Collections.IComparer comparer)

Disassembly:
	0x033A3694 LDR X10, [X10 + 0x918]
	0x033A3698 LDRH W8, [X9 + 0x12E]
	0x033A369C LDR X1, [X10]
	0x033A36A0 CBZ X8, 0x33A36C4
	0x033A36A4 LDR X10, [X9 + 0xB0]
	0x033A36A8 ADD X10, X10, 0x8
	0x033A36AC LDUR X11, [X10 - 0x8]
	0x033A36B0 CMP X11, X1
	0x033A36B4 B.EQ 0x33A36D4
	0x033A36B8 SUBS X8, X8, 0x1
	0x033A36BC ADD X10, X10, 0x10
	0x033A36C0 B.NE 0x33A36AC
	0x033A36C4 MOV X0, X22
	0x033A36C8 MOV W2, W31
	0x033A36CC BL 0x1C5C788
	0x033A36D0 B 0x33A36E0
	0x033A36D4 LDRSW X8, [X10]
	0x033A36D8 ADD X8, X9, X8, 0x4, LSL
	0x033A36DC ADD X0, X8, 0x138
	0x033A36E0 LDP X8, X3, [X0]
	0x033A36E4 MOV X0, X22
	0x033A36E8 MOV X1, X24
	0x033A36EC MOV X2, X23
	0x033A36F0 BLR X8
	0x033A36F4 CMP W0, 0x1
	0x033A36F8 B.LT 0x33A380C
	0x033A36FC LDR X27, [X20]
	0x033A3700 CBZ X27, 0x33A3828
	0x033A3704 LDR W8, [X27 + 0x18]
	0x033A3708 CMP W8, W21
	0x033A370C B.LS 0x33A3824
	0x033A3710 ADD X24, X27, X26, 0x3, LSL
	0x033A3714 LDR X22, [X24 + 0x20]!
	0x033A3718 CMP W8, W19
	0x033A371C B.LS 0x33A3824
	0x033A3720 ADD X9, X27, X25, 0x3, LSL
	0x033A3724 LDR X23, [X9 + 0x20]
	0x033A3728 CBZ X23, 0x33A3744
	0x033A372C LDR X8, [X27]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Compare X0, 0
	007 JumpIfEqual {28}
	008 Move X20, X1
	009 Move W1, W31
	010 Move X19, X2
	011 Move X21, X0
	012 Call 0x1C25D2C
	013 Move W22, W0
	014 Move X0, X21
	015 Call Array.get_Length, X0
	016 Move W3, W0
	017 Move X0, X21
	018 Move X1, X20
	019 Move W2, W22
	020 Move X4, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 Call Array.Sort, X0, X1, X2, X3, X4
	027 Return 
	028 Move X0, 0xD56000
	029 Move X0, [X0+1320]
	030 Call 0x1C17D08
	031 Call 0x1C17F10
	032 Move X19, X0
	033 Move X0, 0xD79000
	034 Move X0, [X0+1904]
	035 Call 0x1C17D08
	036 Move X1, X0
	037 Move X0, X19
	038 Move X2, X31
	039 Call ArgumentNullException..ctor, X0, X1
	040 Move X0, 0xD89000
	041 Move X0, [X0+2928]
	042 Call 0x1C17D08
	043 Move X1, X0
	044 Move X0, X19
	045 Call 0x1C17DEC

Method: System.Void Sort(System.Array keys, System.Array items, System.Int32 index, System.Int32 length)

Disassembly:
	0x033A3730 MOV X0, X23
	0x033A3734 LDR X1, [X8 + 0x40]

ISIL:
	001 Move X4, X31
	002 Call Array.Sort, X0, X1, X2, X3, X4
	003 Return 

Method: System.Void Sort(System.Array keys, System.Array items, System.Int32 index, System.Int32 length, System.Collections.IComparer comparer)

Disassembly:
	0x033A3310 TBNZ X8, 0x0, 0x33A3318
	0x033A3314 BL 0x1C5C684
	0x033A3318 LDR X8, [X0 + 0xC0]
	0x033A331C LDR X0, [X8 + 0x8]
	0x033A3320 LDRB W8, [X0 + 0x135]
	0x033A3324 TBNZ X8, 0x0, 0x33A332C
	0x033A3328 BL 0x1C5C684
	0x033A332C LDR W8, [X0 + 0xE0]
	0x033A3330 CBNZ W8, 0x33A3338
	0x033A3334 BL 0x1C16DFC
	0x033A3338 LDR X0, [X19 + 0x20]
	0x033A333C LDRB W8, [X0 + 0x135]
	0x033A3340 TBNZ X8, 0x0, 0x33A3348
	0x033A3344 BL 0x1C5C684
	0x033A3348 LDR X8, [X0 + 0xC0]
	0x033A334C LDR X0, [X8 + 0x8]
	0x033A3350 LDRB W8, [X0 + 0x135]
	0x033A3354 TBNZ X8, 0x0, 0x33A335C
	0x033A3358 BL 0x1C5C684
	0x033A335C LDR X8, [X0 + 0xB8]
	0x033A3360 ADRP X23, 0xD88000
	0x033A3364 LDR W8, [X8]
	0x033A3368 LDR X23, [X23 + 0x2C8]
	0x033A336C UBFM W9, W8, 0x1E, 0x1D
	0x033A3370 SUB W19, W8, 0x1
	0x033A3374 SUB W8, W9, 0x4
	0x033A3378 MOV W21, W8
	0x033A337C TBNZ X19, 0x1F, 0x33A33CC
	0x033A3380 LDR X0, [X20]
	0x033A3384 LDR W8, [X0 + 0xE0]
	0x033A3388 CBNZ W8, 0x33A3390
	0x033A338C BL 0x1C16DFC
	0x033A3390 LDR X2, [X23]
	0x033A3394 ADD X0, X31, 0x8
	0x033A3398 MOV W1, W19
	0x033A339C BL 0x282C740
	0x033A33A0 SUB W8, W21, 0x4
	0x033A33A4 SUB W19, W19, 0x1
	0x033A33A8 CBZ X0, 0x33A3378
	0x033A33AC CMP X0, 0x1
	0x033A33B0 B.LT 0x33A33CC
	0x033A33B4 MOVZ W8, 0x3
	0x033A33B8 UBFM X0, X0, 0x30, 0x2F
	0x033A33BC CMP X0, 0x0
	0x033A33C0 SUB W8, W8, 0x1
	0x033A33C4 B.GT 0x33A33B8
	0x033A33C8 B 0x33A33D0
	0x033A33CC MOVZ W8, 0x3
	0x033A33D0 LDR X9, [X22 + 0x28]
	0x033A33D4 LDR X10, [X31 + 0x18]
	0x033A33D8 CMP X9, X10
	0x033A33DC B.NE 0x33A33F8
	0x033A33E0 ADD W0, W8, W21
	0x033A33E4 LDP X20, X19, [X31 + 0x40]
	0x033A33E8 LDP X22, X21, [X31 + 0x30]
	0x033A33EC LDP X30, X23, [X31 + 0x20]
	0x033A33F0 ADD X31, X31, 0x50
	0x033A33F4 RET
	0x033A33F8 BL 0x3EB1B20
	0x033A33FC STR X30, [X31 - 0x20]!
	0x033A3400 STP X20, X19, [X31 + 0x10]
	0x033A3404 MOV X20, X1
	0x033A3408 MOV X1, X31
	0x033A340C MOV X19, X0
	0x033A3410 BL 0x33BDD8C
	0x033A3414 MOVN W8, 0x0
	0x033A3418 STR X20, [X19 + 0x10]
	0x033A341C STR W8, [X19 + 0x18]
	0x033A3420 CBZ X20, 0x33A3440
	0x033A3424 MOV X0, X20
	0x033A3428 MOV X1, X31
	0x033A342C BL 0x3395B7C
	0x033A3430 STR W0, [X19 + 0x1C]
	0x033A3434 LDP X20, X19, [X31 + 0x10]
	0x033A3438 LDR X30, [X31], #0x20
	0x033A343C RET
	0x033A3440 BL 0x1C16F20
	0x033A3444 LDP W9, W8, [X0 + 0x18]
	0x033A3448 CMP W9, W8
	0x033A344C B.GE 0x33A3464
	0x033A3450 ADD W9, W9, 0x1
	0x033A3454 CMP W9, W8
	0x033A3458 STR W9, [X0 + 0x18]
	0x033A345C CSET W0, LT
	0x033A3460 RET
	0x033A3464 MOV W0, W31
	0x033A3468 RET
	0x033A346C MOVN W8, 0x0
	0x033A3470 STR W8, [X0 + 0x18]
	0x033A3474 RET
	0x033A3478 MOV X1, X31
	0x033A347C B 0x33C5A24
	0x033A3480 STP X30, X19, [X31 - 0x10]!
	0x033A3484 LDR W8, [X0 + 0x18]
	0x033A3488 TBNZ X8, 0x1F, 0x33A34F0
	0x033A348C LDR W9, [X0 + 0x1C]
	0x033A3490 MOV X19, X0
	0x033A3494 CMP W8, W9
	0x033A3498 B.GE 0x33A3510
	0x033A349C CBNZ W8, 0x33A34D4
	0x033A34A0 LDR X0, [X19 + 0x10]
	0x033A34A4 CBZ X0, 0x33A34EC
	0x033A34A8 MOV X1, X31
	0x033A34AC BL 0x33BE520
	0x033A34B0 CBZ X0, 0x33A34EC
	0x033A34B4 LDR X8, [X0]
	0x033A34B8 LDR X9, [X8 + 0x428]
	0x033A34BC LDR X1, [X8 + 0x430]
	0x033A34C0 BLR X9
	0x033A34C4 CBZ X0, 0x33A34EC
	0x033A34C8 MOV X1, X31
	0x033A34CC BL 0x3396C18
	0x033A34D0 TBNZ X0, 0x0, 0x33A3558
	0x033A34D4 LDR X0, [X19 + 0x10]
	0x033A34D8 CBZ X0, 0x33A34EC
	0x033A34DC LDR W1, [X19 + 0x18]
	0x033A34E0 MOV X2, X31
	0x033A34E4 LDP X30, X19, [X31], #0x10
	0x033A34E8 B 0x33A2958
	0x033A34EC BL 0x1C16F20
	0x033A34F0 ADRP X0, 0xD50000
	0x033A34F4 LDR X0, [X0 + 0x5B0]
	0x033A34F8 BL 0x1C16D08
	0x033A34FC BL 0x1C16F10
	0x033A3500 MOV X19, X0
	0x033A3504 ADRP X0, 0xD7B000
	0x033A3508 LDR X0, [X0 + 0xC48]
	0x033A350C B 0x33A352C
	0x033A3510 ADRP X0, 0xD50000
	0x033A3514 LDR X0, [X0 + 0x5B0]
	0x033A3518 BL 0x1C16D08
	0x033A351C BL 0x1C16F10
	0x033A3520 MOV X19, X0
	0x033A3524 ADRP X0, 0xD7B000
	0x033A3528 LDR X0, [X0 + 0xC40]
	0x033A352C BL 0x1C16D08
	0x033A3530 MOV X1, X0
	0x033A3534 MOV X0, X19
	0x033A3538 MOV X2, X31
	0x033A353C BL 0x337DF1C
	0x033A3540 ADRP X0, 0xD88000
	0x033A3544 LDR X0, [X0 + 0xBC8]
	0x033A3548 BL 0x1C16D08

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Compare X0, 0
	009 JumpIfEqual {95}
	010 Move X20, X4
	011 Move W19, W3
	012 Move W21, W2
	013 Move X22, X1
	014 Move X23, X0
	015 Call 0x1C25D70
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Compare X22, 0
	018 JumpIfEqual {34}
	019 Move X0, X22
	020 Call 0x1C25D70
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X0, X23
	023 Move W1, W31
	024 Call 0x1C25D2C
	025 Move W24, W0
	026 Move X0, X22
	027 Move W1, W31
	028 Call 0x1C25D2C
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move TEMP, X19
	031 And TEMP, TEMP, -2147483648
	032 Compare TEMP, -2147483648
	033 JumpIfNotEqual {42}
	034 Move X0, X23
	035 Move W1, W31
	036 Call 0x1C25D2C
	037 Move W24, W0
	038 Move TEMP, X19
	039 And TEMP, TEMP, -2147483648
	040 Compare TEMP, -2147483648
	041 JumpIfEqual {107}
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X0, X23
	044 Call Array.get_Length, X0
	045 Subtract W24, W21, W24
	046 Subtract W8, W0, W24
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Compare X22, 0
	049 JumpIfEqual {54}
	050 Move X0, X22
	051 Call Array.get_Length, X0
	052 Subtract W8, W0, W19
	053 NotImplemented "Instruction CMP not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X0, X23
	056 Move X1, X22
	057 Move W2, W21
	058 Move W3, W19
	059 Move X4, X20
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call Array.SortImpl, X0, X1, X2, X3, X4
	068 Return 
	069 Move X20, [X31+48]
	070 Move X19, [X31+56]
	071 Move X22, [X31+32]
	072 Move X21, [X31+40]
	073 Move X24, [X31+16]
	074 Move X23, [X31+24]
	075 Move X30, [X31+64]
	076 Return 
	077 Move X0, 0xD79000
	078 Move X0, [X0+1440]
	079 Call 0x1C17D08
	080 Call 0x1C17F10
	081 Move X19, X0
	082 Move X0, 0xD89000
	083 Move X0, [X0+2600]
	084 Call 0x1C17D08
	085 Move X1, X0
	086 Move X0, X19
	087 Call RankException..ctor, X0, X1
	088 Move X0, 0xD59000
	089 Move X0, [X0+1400]
	090 Call 0x1C17D08
	091 Call 0x1C17F10
	092 Move X19, X0
	093 Move X0, 0xD79000
	094 Move X0, [X0+1888]
	095 Move X0, 0xD56000
	096 Move X0, [X0+1320]
	097 Call 0x1C17D08
	098 Call 0x1C17F10
	099 Move X19, X0
	100 Move X0, 0xD79000
	101 Move X0, [X0+1904]
	102 Call 0x1C17D08
	103 Move X1, X0
	104 Move X0, X19
	105 Move X2, X31
	106 Call ArgumentNullException..ctor, X0, X1
	107 Move X8, 0xD5C000
	108 Move X9, 0xD59000
	109 Move X8, [X8+304]
	110 Move X9, [X9+1896]
	111 NotImplemented "Instruction CMP not yet implemented."
	112 NotImplemented "Instruction CSEL not yet implemented."
	113 Call 0x1C17D08
	114 Move X19, X0
	115 Move X0, 0xD59000
	116 Move X0, [X0+1888]
	117 Call 0x1C17D08
	118 Call 0x1C17F10
	119 Move X20, X0
	120 Move X0, 0xD79000
	121 Move X0, [X0+1648]
	122 Call 0x1C17D08
	123 Move X2, X0
	124 Move X0, X20
	125 Move X1, X19
	126 Move X3, X31
	127 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	128 Move X0, 0xD89000
	129 Move X0, [X0+2896]
	130 Call 0x1C17D08
	131 Move X1, X0
	132 Move X0, X20
	133 Call 0x1C17DEC
	134 Move X0, 0xD59000
	135 Move X0, [X0+1400]
	136 Call 0x1C17D08
	137 Call 0x1C17F10
	138 Move X19, X0
	139 Move X0, 0xD89000
	140 Move X0, [X0+2904]
	141 Call 0x1C17D08
	142 Move X1, X0
	143 Move X0, X19
	144 Move X2, X31
	145 Call ArgumentException..ctor, X0, X1
	146 Move X0, 0xD89000
	147 Move X0, [X0+2896]
	148 Call 0x1C17D08
	149 Move X1, X0
	150 Move X0, X19
	151 Call 0x1C17DEC

Method: System.Void Sort(T[] array)

Disassembly:
	0x02158BDC BL 0x1C5C684
	0x02158BE0 LDR X8, [X0 + 0xC0]
	0x02158BE4 LDR X0, [X8 + 0x48]
	0x02158BE8 LDRB W8, [X0 + 0x135]
	0x02158BEC TBNZ X8, 0x0, 0x2158BF4
	0x02158BF0 BL 0x1C5C684
	0x02158BF4 LDR X8, [X0 + 0xB8]
	0x02158BF8 LDR X0, [X8]
	0x02158BFC CBZ X0, 0x2158D0C
	0x02158C00 LDR X8, [X19 + 0x38]
	0x02158C04 MOV X1, X23
	0x02158C08 MOV W2, W22
	0x02158C0C MOV W3, W20
	0x02158C10 LDR X5, [X8 + 0x28]
	0x02158C14 MOV X4, X21
	0x02158C18 LDP X20, X19, [X31 + 0x30]
	0x02158C1C LDP X22, X21, [X31 + 0x20]
	0x02158C20 LDP X24, X23, [X31 + 0x10]
	0x02158C24 LDR X30, [X31], #0x40
	0x02158C28 B 0x2C335FC
	0x02158C2C LDP X20, X19, [X31 + 0x30]
	0x02158C30 LDP X22, X21, [X31 + 0x20]
	0x02158C34 LDP X24, X23, [X31 + 0x10]
	0x02158C38 LDR X30, [X31], #0x40
	0x02158C3C RET
	0x02158C40 ADRP X0, 0x1FA0000
	0x02158C44 LDR X0, [X0 + 0x528]
	0x02158C48 BL 0x1C16D08
	0x02158C4C BL 0x1C16F10
	0x02158C50 MOV X20, X0
	0x02158C54 ADRP X0, 0x1FC3000
	0x02158C58 LDR X0, [X0 + 0x640]
	0x02158C5C BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+56]
	005 Move X19, X1
	006 Move X20, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {11}
	009 Move X0, X19
	010 Call 0x1C5D6E0
	011 Compare X20, 0
	012 JumpIfEqual {24}
	013 Move X8, [X19+56]
	014 Move W2, [X20+24]
	015 Move X0, X20
	016 Move X20, [X31+16]
	017 Move X19, [X31+24]
	018 Move X4, [X8+8]
	019 Move W1, W31
	020 Move X3, X31
	021 Move X30, [X31+32]
	022 Call Array.Sort, X0, X1, X2, X3
	023 Return 
	024 Move X0, 0x1FA1000
	025 Move X0, [X0+1320]
	026 Call 0x1C17D08
	027 Call 0x1C17F10
	028 Move X20, X0
	029 Move X0, 0x1FC4000
	030 Move X0, [X0+1600]
	031 Call 0x1C17D08
	032 Move X1, X0
	033 Move X0, X20
	034 Move X2, X31
	035 Call ArgumentNullException..ctor, X0, X1
	036 Move X0, X20
	037 Move X1, X19
	038 Call 0x1C17DEC

Method: System.Void Sort(T[] array, System.Int32 index, System.Int32 length)

Disassembly:
	0x0215913C B.LT 0x21592A0
	0x02159140 CMP W20, 0x2
	0x02159144 B.LT 0x21591FC
	0x02159148 LDR X8, [X19 + 0x38]
	0x0215914C LDR X0, [X8 + 0x10]
	0x02159150 LDRB W8, [X0 + 0x135]
	0x02159154 TBNZ X8, 0x0, 0x215915C
	0x02159158 BL 0x1C5C684
	0x0215915C LDR W8, [X0 + 0xE0]
	0x02159160 CBNZ W8, 0x2159168
	0x02159164 BL 0x1C16DFC
	0x02159168 LDR X8, [X19 + 0x38]
	0x0215916C LDR X24, [X8 + 0x8]
	0x02159170 LDR X0, [X24 + 0x20]
	0x02159174 LDRB W8, [X0 + 0x135]
	0x02159178 TBNZ X8, 0x0, 0x2159180
	0x0215917C BL 0x1C5C684
	0x02159180 LDR X8, [X0 + 0xC0]
	0x02159184 LDR X0, [X8 + 0x48]
	0x02159188 LDRB W8, [X0 + 0x135]
	0x0215918C TBNZ X8, 0x0, 0x2159194
	0x02159190 BL 0x1C5C684

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X3+56]
	007 Move W19, W2
	008 Move W20, W1
	009 Move X21, X0
	010 Compare X8, 0
	011 JumpIfNotEqual {16}
	012 Move X0, X3
	013 Move X22, X3
	014 Call 0x1C5D6E0
	015 Move X8, [X22+56]
	016 Move X4, [X8+8]
	017 Move X0, X21
	018 Move W1, W20
	019 Move W2, W19
	020 Move X5, [X4]
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X3, X31
	026 Move X30, [X31+48]
	027 CallNoReturn X5

Method: System.Void Sort(T[] array, System.Collections.Generic.IComparer`1<T> comparer)

Disassembly:
	0x02158CE8 LDR X0, [X0 + 0x760]
	0x02158CEC BL 0x1C16D08
	0x02158CF0 MOV X1, X0
	0x02158CF4 MOV X0, X20
	0x02158CF8 MOV X2, X31
	0x02158CFC BL 0x3314A68
	0x02158D00 MOV X0, X20
	0x02158D04 MOV X1, X19
	0x02158D08 BL 0x1C16DEC
	0x02158D0C BL 0x1C16F20
	0x02158D10 STR X30, [X31 - 0x40]!
	0x02158D14 STP X24, X23, [X31 + 0x10]
	0x02158D18 STP X22, X21, [X31 + 0x20]
	0x02158D1C STP X20, X19, [X31 + 0x30]
	0x02158D20 LDR X8, [X4 + 0x38]
	0x02158D24 MOV X19, X4
	0x02158D28 MOV X21, X3
	0x02158D2C MOV W20, W2
	0x02158D30 MOV W22, W1
	0x02158D34 MOV X23, X0
	0x02158D38 CBNZ X8, 0x2158D44
	0x02158D3C MOV X0, X19
	0x02158D40 BL 0x1C5C6E0
	0x02158D44 CBZ X23, 0x2158E30
	0x02158D48 ORR W8, W20, W22, 0x0
	0x02158D4C TBNZ X8, 0x1F, 0x2158E64
	0x02158D50 LDR W8, [X23 + 0x18]
	0x02158D54 SUB W8, W8, W22
	0x02158D58 CMP W8, W20
	0x02158D5C B.LT 0x2158EC0
	0x02158D60 CMP W20, 0x2
	0x02158D64 B.LT 0x2158E1C
	0x02158D68 LDR X8, [X19 + 0x38]
	0x02158D6C LDR X0, [X8 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+56]
	006 Move X19, X2
	007 Move X20, X1
	008 Move X21, X0
	009 Compare X8, 0
	010 JumpIfNotEqual {13}
	011 Move X0, X19
	012 Call 0x1C5D6E0
	013 Compare X21, 0
	014 JumpIfEqual {27}
	015 Move X8, [X19+56]
	016 Move W2, [X21+24]
	017 Move X3, X20
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X4, [X8+16]
	021 Move X0, X21
	022 Move W1, W31
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call Array.Sort, X0, X1, X2, X3
	026 Return 
	027 Move X0, 0x1FA1000
	028 Move X0, [X0+1320]
	029 Call 0x1C17D08
	030 Call 0x1C17F10
	031 Move X20, X0
	032 Move X0, 0x1FC4000
	033 Move X0, [X0+1600]
	034 Call 0x1C17D08
	035 Move X1, X0
	036 Move X0, X20
	037 Move X2, X31
	038 Call ArgumentNullException..ctor, X0, X1
	039 Move X0, X20
	040 Move X1, X19
	041 Call 0x1C17DEC

Method: System.Void Sort(T[] array, System.Int32 index, System.Int32 length, System.Collections.Generic.IComparer`1<T> comparer)

Disassembly:
	0x02159360 LDR X0, [X24 + 0x20]
	0x02159364 LDRB W8, [X0 + 0x135]
	0x02159368 TBNZ X8, 0x0, 0x2159370
	0x0215936C BL 0x1C5C684
	0x02159370 LDR X8, [X0 + 0xC0]
	0x02159374 LDR X0, [X8 + 0x48]
	0x02159378 LDRB W8, [X0 + 0x135]
	0x0215937C TBNZ X8, 0x0, 0x2159384
	0x02159380 BL 0x1C5C684
	0x02159384 LDR W8, [X0 + 0xE0]
	0x02159388 CBNZ W8, 0x2159390
	0x0215938C BL 0x1C16DFC
	0x02159390 LDR X0, [X24 + 0x20]
	0x02159394 LDRB W8, [X0 + 0x135]
	0x02159398 TBNZ X8, 0x0, 0x21593A0
	0x0215939C BL 0x1C5C684
	0x021593A0 LDR X8, [X0 + 0xC0]
	0x021593A4 LDR X0, [X8 + 0x48]
	0x021593A8 LDRB W8, [X0 + 0x135]
	0x021593AC TBNZ X8, 0x0, 0x21593B4
	0x021593B0 BL 0x1C5C684
	0x021593B4 LDR X8, [X0 + 0xB8]
	0x021593B8 LDR X0, [X8]
	0x021593BC CBZ X0, 0x21594CC
	0x021593C0 LDR X8, [X19 + 0x38]
	0x021593C4 MOV X1, X23
	0x021593C8 MOV W2, W22
	0x021593CC MOV W3, W20
	0x021593D0 LDR X5, [X8 + 0x28]
	0x021593D4 MOV X4, X21
	0x021593D8 LDP X20, X19, [X31 + 0x30]
	0x021593DC LDP X22, X21, [X31 + 0x20]
	0x021593E0 LDP X24, X23, [X31 + 0x10]
	0x021593E4 LDR X30, [X31], #0x40
	0x021593E8 B 0x2C38A28
	0x021593EC LDP X20, X19, [X31 + 0x30]
	0x021593F0 LDP X22, X21, [X31 + 0x20]
	0x021593F4 LDP X24, X23, [X31 + 0x10]
	0x021593F8 LDR X30, [X31], #0x40
	0x021593FC RET
	0x02159400 ADRP X0, 0x1F9F000
	0x02159404 LDR X0, [X0 + 0x528]
	0x02159408 BL 0x1C16D08
	0x0215940C BL 0x1C16F10
	0x02159410 MOV X20, X0
	0x02159414 ADRP X0, 0x1FC2000
	0x02159418 LDR X0, [X0 + 0x640]
	0x0215941C BL 0x1C16D08
	0x02159420 MOV X1, X0
	0x02159424 MOV X0, X20
	0x02159428 MOV X2, X31
	0x0215942C BL 0x330E100
	0x02159430 B 0x21594C0
	0x02159434 ADRP X8, 0x1FA5000
	0x02159438 ADRP X9, 0x1FA2000
	0x0215943C LDR X8, [X8 + 0x130]
	0x02159440 LDR X9, [X9 + 0x768]
	0x02159444 CMP W20, 0x0
	0x02159448 CSEL X0, X9, X8, LT
	0x0215944C BL 0x1C16D08
	0x02159450 MOV X20, X0
	0x02159454 ADRP X0, 0x1FA2000
	0x02159458 LDR X0, [X0 + 0x760]
	0x0215945C BL 0x1C16D08
	0x02159460 BL 0x1C16F10
	0x02159464 MOV X21, X0
	0x02159468 ADRP X0, 0x1FC2000
	0x0215946C LDR X0, [X0 + 0x670]
	0x02159470 BL 0x1C16D08
	0x02159474 MOV X2, X0
	0x02159478 MOV X0, X21
	0x0215947C MOV X1, X20
	0x02159480 MOV X3, X31
	0x02159484 BL 0x3311888
	0x02159488 MOV X0, X21
	0x0215948C B 0x21594C4
	0x02159490 ADRP X0, 0x1FA2000
	0x02159494 LDR X0, [X0 + 0x578]
	0x02159498 BL 0x1C16D08
	0x0215949C BL 0x1C16F10
	0x021594A0 MOV X20, X0
	0x021594A4 ADRP X0, 0x1FC2000
	0x021594A8 LDR X0, [X0 + 0x760]
	0x021594AC BL 0x1C16D08
	0x021594B0 MOV X1, X0
	0x021594B4 MOV X0, X20
	0x021594B8 MOV X2, X31
	0x021594BC BL 0x3314A68
	0x021594C0 MOV X0, X20
	0x021594C4 MOV X1, X19
	0x021594C8 BL 0x1C16DEC
	0x021594CC BL 0x1C16F20
	0x021594D0 STR X30, [X31 - 0x40]!
	0x021594D4 STP X24, X23, [X31 + 0x10]
	0x021594D8 STP X22, X21, [X31 + 0x20]
	0x021594DC STP X20, X19, [X31 + 0x30]
	0x021594E0 LDR X8, [X4 + 0x38]
	0x021594E4 MOV X19, X4
	0x021594E8 MOV X21, X3
	0x021594EC MOV W20, W2
	0x021594F0 MOV W22, W1
	0x021594F4 MOV X23, X0
	0x021594F8 CBNZ X8, 0x2159504
	0x021594FC MOV X0, X19
	0x02159500 BL 0x1C5C6E0
	0x02159504 CBZ X23, 0x21595F0
	0x02159508 ORR W8, W20, W22, 0x0
	0x0215950C TBNZ X8, 0x1F, 0x2159624
	0x02159510 LDR W8, [X23 + 0x18]
	0x02159514 SUB W8, W8, W22
	0x02159518 CMP W8, W20
	0x0215951C B.LT 0x2159680
	0x02159520 CMP W20, 0x2
	0x02159524 B.LT 0x21595DC
	0x02159528 LDR X8, [X19 + 0x38]
	0x0215952C LDR X0, [X8 + 0x10]
	0x02159530 LDRB W8, [X0 + 0x135]
	0x02159534 TBNZ X8, 0x0, 0x215953C
	0x02159538 BL 0x1C5C684
	0x0215953C LDR W8, [X0 + 0xE0]
	0x02159540 CBNZ W8, 0x2159548
	0x02159544 BL 0x1C16DFC
	0x02159548 LDR X8, [X19 + 0x38]
	0x0215954C LDR X24, [X8 + 0x8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X4+56]
	009 Move X19, X4
	010 Move X21, X3
	011 Move W20, W2
	012 Move W22, W1
	013 Move X23, X0
	014 Compare X8, 0
	015 JumpIfNotEqual {18}
	016 Move X0, X19
	017 Call 0x1C5D6E0
	018 Compare X23, 0
	019 JumpIfEqual {104}
	020 Or W8, W20, W22
	021 Move TEMP, X8
	022 And TEMP, TEMP, -2147483648
	023 Compare TEMP, -2147483648
	024 JumpIfEqual {116}
	025 Move W8, [X23+24]
	026 Subtract W8, W8, W22
	027 NotImplemented "Instruction CMP not yet implemented."
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X8, [X19+56]
	030 Move X0, [X8+16]
	031 Move W8, [X0+309]
	032 Move TEMP, X8
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {37}
	036 Call 0x1C5D684
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X8, [X19+56]
	042 Move X24, [X8+8]
	043 Move X0, [X24+32]
	044 Move W8, [X0+309]
	045 Move TEMP, X8
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {50}
	049 Call 0x1C5D684
	050 Move X8, [X0+192]
	051 Move X0, [X8+72]
	052 Move W8, [X0+309]
	053 Move TEMP, X8
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfEqual {58}
	057 Call 0x1C5D684
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, [X24+32]
	063 Move W8, [X0+309]
	064 Move TEMP, X8
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfEqual {69}
	068 Call 0x1C5D684
	069 Move X8, [X0+192]
	070 Move X0, [X8+72]
	071 Move W8, [X0+309]
	072 Move TEMP, X8
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfEqual {77}
	076 Call 0x1C5D684
	077 Move X8, [X0+184]
	078 Move X0, [X8]
	079 Compare X0, 0
	080 JumpIfEqual {153}
	081 Move X8, [X19+56]
	082 Move X1, X23
	083 Move W2, W22
	084 Move W3, W20
	085 Move X5, [X8+40]
	086 Move X4, X21
	087 Move X20, [X31+48]
	088 Move X19, [X31+56]
	089 Move X22, [X31+32]
	090 Move X21, [X31+40]
	091 Move X24, [X31+16]
	092 Move X23, [X31+24]
	093 Move X30, [X31+64]
	094 Call 0x2B8E0B0, X0, X1, X2, X3, X4
	095 Return 
	096 Move X20, [X31+48]
	097 Move X19, [X31+56]
	098 Move X22, [X31+32]
	099 Move X21, [X31+40]
	100 Move X24, [X31+16]
	101 Move X23, [X31+24]
	102 Move X30, [X31+64]
	103 Return 
	104 Move X0, 0x1FA0000
	105 Move X0, [X0+1320]
	106 Call 0x1C17D08
	107 Call 0x1C17F10
	108 Move X20, X0
	109 Move X0, 0x1FC3000
	110 Move X0, [X0+1600]
	111 Call 0x1C17D08
	112 Move X1, X0
	113 Move X0, X20
	114 Move X2, X31
	115 Call ArgumentNullException..ctor, X0, X1
	116 Move X8, 0x1FA6000
	117 Move X9, 0x1FA3000
	118 Move X8, [X8+304]
	119 Move X9, [X9+1896]
	120 NotImplemented "Instruction CMP not yet implemented."
	121 NotImplemented "Instruction CSEL not yet implemented."
	122 Call 0x1C17D08
	123 Move X20, X0
	124 Move X0, 0x1FA3000
	125 Move X0, [X0+1888]
	126 Call 0x1C17D08
	127 Call 0x1C17F10
	128 Move X21, X0
	129 Move X0, 0x1FC3000
	130 Move X0, [X0+1648]
	131 Call 0x1C17D08
	132 Move X2, X0
	133 Move X0, X21
	134 Move X1, X20
	135 Move X3, X31
	136 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	137 Move X0, X21
	138 Move X0, 0x1FA3000
	139 Move X0, [X0+1400]
	140 Call 0x1C17D08
	141 Call 0x1C17F10
	142 Move X20, X0
	143 Move X0, 0x1FC3000
	144 Move X0, [X0+1888]
	145 Call 0x1C17D08
	146 Move X1, X0
	147 Move X0, X20
	148 Move X2, X31
	149 Call ArgumentException..ctor, X0, X1
	150 Move X0, X20
	151 Move X1, X19
	152 Call 0x1C17DEC
	153 Call 0x1C17F20

Method: System.Void Sort(T[] array, System.Comparison`1<T> comparison)

Disassembly:
	0x02158D70 LDRB W8, [X0 + 0x135]
	0x02158D74 TBNZ X8, 0x0, 0x2158D7C
	0x02158D78 BL 0x1C5C684
	0x02158D7C LDR W8, [X0 + 0xE0]
	0x02158D80 CBNZ W8, 0x2158D88
	0x02158D84 BL 0x1C16DFC
	0x02158D88 LDR X8, [X19 + 0x38]
	0x02158D8C LDR X24, [X8 + 0x8]
	0x02158D90 LDR X0, [X24 + 0x20]
	0x02158D94 LDRB W8, [X0 + 0x135]
	0x02158D98 TBNZ X8, 0x0, 0x2158DA0
	0x02158D9C BL 0x1C5C684
	0x02158DA0 LDR X8, [X0 + 0xC0]
	0x02158DA4 LDR X0, [X8 + 0x48]
	0x02158DA8 LDRB W8, [X0 + 0x135]
	0x02158DAC TBNZ X8, 0x0, 0x2158DB4
	0x02158DB0 BL 0x1C5C684
	0x02158DB4 LDR W8, [X0 + 0xE0]
	0x02158DB8 CBNZ W8, 0x2158DC0
	0x02158DBC BL 0x1C16DFC
	0x02158DC0 LDR X0, [X24 + 0x20]
	0x02158DC4 LDRB W8, [X0 + 0x135]
	0x02158DC8 TBNZ X8, 0x0, 0x2158DD0
	0x02158DCC BL 0x1C5C684
	0x02158DD0 LDR X8, [X0 + 0xC0]
	0x02158DD4 LDR X0, [X8 + 0x48]
	0x02158DD8 LDRB W8, [X0 + 0x135]
	0x02158DDC TBNZ X8, 0x0, 0x2158DE4
	0x02158DE0 BL 0x1C5C684
	0x02158DE4 LDR X8, [X0 + 0xB8]
	0x02158DE8 LDR X0, [X8]
	0x02158DEC CBZ X0, 0x2158EFC
	0x02158DF0 LDR X8, [X19 + 0x38]
	0x02158DF4 MOV X1, X23
	0x02158DF8 MOV W2, W22
	0x02158DFC MOV W3, W20
	0x02158E00 LDR X5, [X8 + 0x28]
	0x02158E04 MOV X4, X21
	0x02158E08 LDP X20, X19, [X31 + 0x30]
	0x02158E0C LDP X22, X21, [X31 + 0x20]
	0x02158E10 LDP X24, X23, [X31 + 0x10]
	0x02158E14 LDR X30, [X31], #0x40
	0x02158E18 B 0x2C3498C
	0x02158E1C LDP X20, X19, [X31 + 0x30]
	0x02158E20 LDP X22, X21, [X31 + 0x20]
	0x02158E24 LDP X24, X23, [X31 + 0x10]
	0x02158E28 LDR X30, [X31], #0x40
	0x02158E2C RET
	0x02158E30 ADRP X0, 0x1FA0000
	0x02158E34 LDR X0, [X0 + 0x528]
	0x02158E38 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+56]
	006 Move X19, X2
	007 Move X20, X1
	008 Move X21, X0
	009 Compare X8, 0
	010 JumpIfNotEqual {13}
	011 Move X0, X19
	012 Call 0x1C5D6E0
	013 Compare X21, 0
	014 JumpIfEqual {41}
	015 Compare X20, 0
	016 JumpIfEqual {48}
	017 Move X8, [X19+56]
	018 Move X0, [X8+24]
	019 Move W8, [X0+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {25}
	024 Call 0x1C5D684
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X8, [X19+56]
	030 Move W2, [X21+24]
	031 Move X3, X20
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X4, [X8+16]
	035 Move X0, X21
	036 Move W1, W31
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Call ArraySortHelper`1<Object>.Sort, X0, X1, X2, X3
	040 Return 
	041 Move X0, 0x1FA1000
	042 Move X0, [X0+1320]
	043 Call 0x1C17D08
	044 Call 0x1C17F10
	045 Move X20, X0
	046 Move X0, 0x1FC4000
	047 Move X0, [X0+1600]
	048 Move X0, 0x1FA1000
	049 Move X0, [X0+1320]
	050 Call 0x1C17D08
	051 Call 0x1C17F10
	052 Move X20, X0
	053 Move X0, 0x1FC4000
	054 Move X0, [X0+1896]
	055 Call 0x1C17D08
	056 Move X1, X0
	057 Move X0, X20
	058 Move X2, X31
	059 Call ArgumentNullException..ctor, X0, X1
	060 Move X0, X20
	061 Move X1, X19
	062 Call 0x1C17DEC

Method: System.Void Sort(TKey[] keys, TValue[] items)

Disassembly:
	0x02159020 ADRP X0, 0x1F9F000
	0x02159024 LDR X0, [X0 + 0x528]
	0x02159028 BL 0x1C16D08
	0x0215902C BL 0x1C16F10
	0x02159030 MOV X20, X0
	0x02159034 ADRP X0, 0x1FC2000
	0x02159038 LDR X0, [X0 + 0x640]
	0x0215903C BL 0x1C16D08
	0x02159040 MOV X1, X0
	0x02159044 MOV X0, X20
	0x02159048 MOV X2, X31
	0x0215904C BL 0x330E100
	0x02159050 B 0x21590E0
	0x02159054 ADRP X8, 0x1FA5000
	0x02159058 ADRP X9, 0x1FA2000
	0x0215905C LDR X8, [X8 + 0x130]
	0x02159060 LDR X9, [X9 + 0x768]
	0x02159064 CMP W20, 0x0
	0x02159068 CSEL X0, X9, X8, LT
	0x0215906C BL 0x1C16D08
	0x02159070 MOV X20, X0
	0x02159074 ADRP X0, 0x1FA2000
	0x02159078 LDR X0, [X0 + 0x760]
	0x0215907C BL 0x1C16D08
	0x02159080 BL 0x1C16F10
	0x02159084 MOV X21, X0
	0x02159088 ADRP X0, 0x1FC2000
	0x0215908C LDR X0, [X0 + 0x670]
	0x02159090 BL 0x1C16D08
	0x02159094 MOV X2, X0
	0x02159098 MOV X0, X21
	0x0215909C MOV X1, X20
	0x021590A0 MOV X3, X31
	0x021590A4 BL 0x3311888
	0x021590A8 MOV X0, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+56]
	006 Move X19, X2
	007 Move X20, X1
	008 Move X21, X0
	009 Compare X8, 0
	010 JumpIfNotEqual {13}
	011 Move X0, X19
	012 Call 0x1C5D6E0
	013 Compare X21, 0
	014 JumpIfEqual {28}
	015 Move X8, [X19+56]
	016 Move W3, [X21+24]
	017 Move X1, X20
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X5, [X8+16]
	021 Move X0, X21
	022 Move W2, W31
	023 Move X4, X31
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Call 0x2171EA4, X0, X1, X2, X3, X4
	027 Return 
	028 Move X0, 0x1FA0000
	029 Move X0, [X0+1320]
	030 Call 0x1C17D08
	031 Call 0x1C17F10
	032 Move X20, X0
	033 Move X0, 0x1FC3000
	034 Move X0, [X0+1904]
	035 Call 0x1C17D08
	036 Move X1, X0
	037 Move X0, X20
	038 Move X2, X31
	039 Call ArgumentNullException..ctor, X0, X1
	040 Move X0, X20
	041 Move X1, X19
	042 Call 0x1C17DEC

Method: System.Void Sort(TKey[] keys, TValue[] items, System.Int32 index, System.Int32 length)

Disassembly:
	0x02171E44 MOV W21, W1
	0x02171E48 MOV X19, X0
	0x02171E4C CBNZ X8, 0x2171E5C
	0x02171E50 MOV X0, X20
	0x02171E54 BL 0x1C5C6E0
	0x02171E58 LDR X8, [X20 + 0x38]
	0x02171E5C STP X31, X31, [X31]
	0x02171E60 LDR X4, [X8]
	0x02171E64 ADD X0, X31, 0x0
	0x02171E68 MOVZ W2, 0x4
	0x02171E6C MOV W1, W21
	0x02171E70 MOV W3, W31
	0x02171E74 BL 0x23C8D0C
	0x02171E78 LDR X0, [X19]
	0x02171E7C CBZ X0, 0x2171EA8
	0x02171E80 LDR X8, [X20 + 0x38]
	0x02171E84 LDR X1, [X19 + 0x8]
	0x02171E88 LDP X2, X3, [X31]
	0x02171E8C LDR X5, [X8 + 0x30]
	0x02171E90 MOV W4, W1
	0x02171E94 BL 0x23C9648
	0x02171E98 LDR X8, [X20 + 0x38]
	0x02171E9C MOV X0, X19
	0x02171EA0 LDR X1, [X8 + 0x38]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X4+56]
	008 Move W19, W3
	009 Move W20, W2
	010 Move X21, X1
	011 Move X22, X0
	012 Compare X8, 0
	013 JumpIfNotEqual {18}
	014 Move X0, X4
	015 Move X23, X4
	016 Call 0x1C5D6E0
	017 Move X8, [X23+56]
	018 Move X5, [X8+16]
	019 Move X0, X22
	020 Move X1, X21
	021 Move W2, W20
	022 Move X6, [X5]
	023 Move W3, W19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X4, X31
	029 Move X30, [X31+48]
	030 Move X23, [X31+56]
	031 CallNoReturn X6

Method: System.Void Sort(TKey[] keys, TValue[] items, System.Collections.Generic.IComparer`1<TKey> comparer)

Disassembly:
	0x02159194 LDR W8, [X0 + 0xE0]
	0x02159198 CBNZ W8, 0x21591A0
	0x0215919C BL 0x1C16DFC
	0x021591A0 LDR X0, [X24 + 0x20]
	0x021591A4 LDRB W8, [X0 + 0x135]
	0x021591A8 TBNZ X8, 0x0, 0x21591B0
	0x021591AC BL 0x1C5C684
	0x021591B0 LDR X8, [X0 + 0xC0]
	0x021591B4 LDR X0, [X8 + 0x48]
	0x021591B8 LDRB W8, [X0 + 0x135]
	0x021591BC TBNZ X8, 0x0, 0x21591C4
	0x021591C0 BL 0x1C5C684
	0x021591C4 LDR X8, [X0 + 0xB8]
	0x021591C8 LDR X0, [X8]
	0x021591CC CBZ X0, 0x21592DC
	0x021591D0 LDR X8, [X19 + 0x38]
	0x021591D4 MOV X1, X23
	0x021591D8 MOV W2, W22
	0x021591DC MOV W3, W20
	0x021591E0 LDR X5, [X8 + 0x28]
	0x021591E4 MOV X4, X21
	0x021591E8 LDP X20, X19, [X31 + 0x30]
	0x021591EC LDP X22, X21, [X31 + 0x20]
	0x021591F0 LDP X24, X23, [X31 + 0x10]
	0x021591F4 LDR X30, [X31], #0x40
	0x021591F8 B 0x2C37234
	0x021591FC LDP X20, X19, [X31 + 0x30]
	0x02159200 LDP X22, X21, [X31 + 0x20]
	0x02159204 LDP X24, X23, [X31 + 0x10]
	0x02159208 LDR X30, [X31], #0x40
	0x0215920C RET
	0x02159210 ADRP X0, 0x1F9F000
	0x02159214 LDR X0, [X0 + 0x528]
	0x02159218 BL 0x1C16D08
	0x0215921C BL 0x1C16F10
	0x02159220 MOV X20, X0
	0x02159224 ADRP X0, 0x1FC2000
	0x02159228 LDR X0, [X0 + 0x640]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X3+56]
	007 Move X19, X3
	008 Move X20, X2
	009 Move X21, X1
	010 Move X22, X0
	011 Compare X8, 0
	012 JumpIfNotEqual {15}
	013 Move X0, X19
	014 Call 0x1C5D6E0
	015 Compare X22, 0
	016 JumpIfEqual {31}
	017 Move X8, [X19+56]
	018 Move W3, [X22+24]
	019 Move X0, X22
	020 Move X1, X21
	021 Move X5, [X8+24]
	022 Move X4, X20
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X22, [X31+16]
	026 Move X21, [X31+24]
	027 Move W2, W31
	028 Move X30, [X31+48]
	029 Call Array.Sort, X0, X1, X2, X3, X4
	030 Return 
	031 Move X0, 0x1FA0000
	032 Move X0, [X0+1320]
	033 Call 0x1C17D08
	034 Call 0x1C17F10
	035 Move X20, X0
	036 Move X0, 0x1FC3000
	037 Move X0, [X0+1904]
	038 Call 0x1C17D08
	039 Move X1, X0
	040 Move X0, X20
	041 Move X2, X31
	042 Call ArgumentNullException..ctor, X0, X1
	043 Move X0, X20
	044 Move X1, X19
	045 Call 0x1C17DEC

Method: System.Void Sort(TKey[] keys, TValue[] items, System.Int32 index, System.Int32 length, System.Collections.Generic.IComparer`1<TKey> comparer)

Disassembly:
	0x02171EA4 BL 0x23C8F60
	0x02171EA8 LDR V0, [X31]
	0x02171EAC LDP X30, X21, [X31 + 0x10]
	0x02171EB0 STR V0, [X19]
	0x02171EB4 LDP X20, X19, [X31 + 0x20]
	0x02171EB8 ADD X31, X31, 0x30
	0x02171EBC RET
	0x02171EC0 STP X30, X21, [X31 - 0x20]!
	0x02171EC4 STP X20, X19, [X31 + 0x10]
	0x02171EC8 LDR X8, [X2 + 0x38]
	0x02171ECC MOV W20, W1
	0x02171ED0 MOV X19, X0
	0x02171ED4 CBNZ X8, 0x2171EE8
	0x02171ED8 MOV X0, X2
	0x02171EDC MOV X21, X2
	0x02171EE0 BL 0x1C5C6E0
	0x02171EE4 LDR X8, [X21 + 0x38]
	0x02171EE8 LDR X9, [X19]
	0x02171EEC CBZ X9, 0x2171F08
	0x02171EF0 LDR X2, [X8 + 0x10]
	0x02171EF4 MOV X0, X19
	0x02171EF8 MOV W1, W20
	0x02171EFC LDP X20, X19, [X31 + 0x10]
	0x02171F00 LDP X30, X21, [X31], #0x20
	0x02171F04 B 0x2115604
	0x02171F08 LDR X0, [X8 + 0x8]
	0x02171F0C LDRB W8, [X0 + 0x135]
	0x02171F10 TBNZ X8, 0x0, 0x2171F18
	0x02171F14 BL 0x1C5C684
	0x02171F18 MOV W1, W20
	0x02171F1C BL 0x1C16D6C
	0x02171F20 STR X0, [X19]
	0x02171F24 LDP X20, X19, [X31 + 0x10]
	0x02171F28 LDP X30, X21, [X31], #0x20
	0x02171F2C RET
	0x02171F30 SUB X31, X31, 0x30
	0x02171F34 STP X30, X21, [X31 + 0x10]
	0x02171F38 STP X20, X19, [X31 + 0x20]
	0x02171F3C LDR X8, [X2 + 0x38]
	0x02171F40 MOV X20, X2
	0x02171F44 MOV W21, W1
	0x02171F48 MOV X19, X0
	0x02171F4C CBNZ X8, 0x2171F5C
	0x02171F50 MOV X0, X20
	0x02171F54 BL 0x1C5C6E0
	0x02171F58 LDR X8, [X20 + 0x38]
	0x02171F5C STP X31, X31, [X31]
	0x02171F60 LDR X4, [X8]
	0x02171F64 ADD X0, X31, 0x0
	0x02171F68 MOVZ W2, 0x4
	0x02171F6C MOV W1, W21
	0x02171F70 MOV W3, W31
	0x02171F74 BL 0x23D02CC
	0x02171F78 LDR X0, [X19]
	0x02171F7C CBZ X0, 0x2171FA8
	0x02171F80 LDR X8, [X20 + 0x38]
	0x02171F84 LDR X1, [X19 + 0x8]
	0x02171F88 LDP X2, X3, [X31]
	0x02171F8C LDR X5, [X8 + 0x30]
	0x02171F90 MOV W4, W1
	0x02171F94 BL 0x23D0BB4
	0x02171F98 LDR X8, [X20 + 0x38]
	0x02171F9C MOV X0, X19
	0x02171FA0 LDR X1, [X8 + 0x38]
	0x02171FA4 BL 0x23D04F4
	0x02171FA8 LDR V0, [X31]
	0x02171FAC LDP X30, X21, [X31 + 0x10]
	0x02171FB0 STR V0, [X19]
	0x02171FB4 LDP X20, X19, [X31 + 0x20]
	0x02171FB8 ADD X31, X31, 0x30
	0x02171FBC RET
	0x02171FC0 SUB X31, X31, 0x30
	0x02171FC4 STP X30, X21, [X31 + 0x10]
	0x02171FC8 STP X20, X19, [X31 + 0x20]
	0x02171FCC LDR X8, [X2 + 0x38]
	0x02171FD0 MOV X20, X2
	0x02171FD4 MOV W21, W1
	0x02171FD8 MOV X19, X0
	0x02171FDC CBNZ X8, 0x2171FEC
	0x02171FE0 MOV X0, X20
	0x02171FE4 BL 0x1C5C6E0
	0x02171FE8 LDR X8, [X20 + 0x38]
	0x02171FEC STP X31, X31, [X31]
	0x02171FF0 LDR X4, [X8]
	0x02171FF4 ADD X0, X31, 0x0
	0x02171FF8 MOVZ W2, 0x4
	0x02171FFC MOV W1, W21
	0x02172000 MOV W3, W31
	0x02172004 BL 0x23D1100
	0x02172008 LDR X0, [X19]
	0x0217200C CBZ X0, 0x2172038
	0x02172010 LDR X8, [X20 + 0x38]
	0x02172014 LDR X1, [X19 + 0x8]
	0x02172018 LDP X2, X3, [X31]
	0x0217201C LDR X5, [X8 + 0x30]
	0x02172020 MOV W4, W1
	0x02172024 BL 0x23D19E8
	0x02172028 LDR X8, [X20 + 0x38]
	0x0217202C MOV X0, X19
	0x02172030 LDR X1, [X8 + 0x38]
	0x02172034 BL 0x23D1328
	0x02172038 LDR V0, [X31]
	0x0217203C LDP X30, X21, [X31 + 0x10]
	0x02172040 STR V0, [X19]
	0x02172044 LDP X20, X19, [X31 + 0x20]
	0x02172048 ADD X31, X31, 0x30
	0x0217204C RET
	0x02172050 SUB X31, X31, 0x30
	0x02172054 STP X30, X21, [X31 + 0x10]
	0x02172058 STP X20, X19, [X31 + 0x20]
	0x0217205C LDR X8, [X2 + 0x38]
	0x02172060 MOV X20, X2
	0x02172064 MOV W21, W1
	0x02172068 MOV X19, X0
	0x0217206C CBNZ X8, 0x217207C
	0x02172070 MOV X0, X20
	0x02172074 BL 0x1C5C6E0
	0x02172078 LDR X8, [X20 + 0x38]
	0x0217207C STP X31, X31, [X31]
	0x02172080 LDR X4, [X8]
	0x02172084 ADD X0, X31, 0x0
	0x02172088 MOVZ W2, 0x4
	0x0217208C MOV W1, W21
	0x02172090 MOV W3, W31
	0x02172094 BL 0x23D58AC
	0x02172098 LDR X0, [X19]
	0x0217209C CBZ X0, 0x21720C8
	0x021720A0 LDR X8, [X20 + 0x38]
	0x021720A4 LDR X1, [X19 + 0x8]
	0x021720A8 LDP X2, X3, [X31]
	0x021720AC LDR X5, [X8 + 0x30]
	0x021720B0 MOV W4, W1
	0x021720B4 BL 0x23D61AC
	0x021720B8 LDR X8, [X20 + 0x38]
	0x021720BC MOV X0, X19
	0x021720C0 LDR X1, [X8 + 0x38]
	0x021720C4 BL 0x23D5AD4
	0x021720C8 LDR V0, [X31]
	0x021720CC LDP X30, X21, [X31 + 0x10]
	0x021720D0 STR V0, [X19]
	0x021720D4 LDP X20, X19, [X31 + 0x20]
	0x021720D8 ADD X31, X31, 0x30
	0x021720DC RET
	0x021720E0 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X8, [X5+56]
	010 Move X19, X5
	011 Move X21, X4
	012 Move W20, W3
	013 Move W22, W2
	014 Move X24, X1
	015 Move X23, X0
	016 Compare X8, 0
	017 JumpIfNotEqual {20}
	018 Move X0, X19
	019 Call 0x1C5D6E0
	020 Compare X23, 0
	021 JumpIfEqual {143}
	022 Or W8, W20, W22
	023 Move TEMP, X8
	024 And TEMP, TEMP, -2147483648
	025 Compare TEMP, -2147483648
	026 JumpIfEqual {156}
	027 Move W8, [X23+24]
	028 Subtract W8, W8, W22
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Compare X24, 0
	031 JumpIfEqual {105}
	032 Move W8, [X24+24]
	033 Subtract W8, W8, W20
	034 NotImplemented "Instruction CMP not yet implemented."
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X8, [X19+56]
	037 Move X0, [X8+40]
	038 Move W8, [X0+309]
	039 Move TEMP, X8
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {44}
	043 Call 0x1C5D684
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X8, [X19+56]
	049 Move X25, [X8+32]
	050 Move X0, [X25+32]
	051 Move W8, [X0+309]
	052 Move TEMP, X8
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfEqual {57}
	056 Call 0x1C5D684
	057 Move X8, [X0+192]
	058 Move X0, [X8+56]
	059 Move W8, [X0+309]
	060 Move TEMP, X8
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfEqual {65}
	064 Call 0x1C5D684
	065 Move W8, [X0+224]
	066 Compare W8, 0
	067 JumpIfNotEqual {69}
	068 Call 0x1C17DFC
	069 Move X0, [X25+32]
	070 Move W8, [X0+309]
	071 Move TEMP, X8
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfEqual {76}
	075 Call 0x1C5D684
	076 Move X8, [X0+192]
	077 Move X0, [X8+56]
	078 Move W8, [X0+309]
	079 Move TEMP, X8
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfEqual {84}
	083 Call 0x1C5D684
	084 Move X8, [X0+184]
	085 Move X0, [X8]
	086 Compare X0, 0
	087 JumpIfEqual {180}
	088 Move X8, [X19+56]
	089 Move X1, X23
	090 Move X2, X24
	091 Move W3, W22
	092 Move X6, [X8+56]
	093 Move W4, W20
	094 Move X5, X21
	095 Move X20, [X31+48]
	096 Move X19, [X31+56]
	097 Move X22, [X31+32]
	098 Move X21, [X31+40]
	099 Move X24, [X31+16]
	100 Move X23, [X31+24]
	101 Move X30, [X31+64]
	102 Move X25, [X31+72]
	103 Call 0x24D4C68, X0, X1, X2, X3, X4, X5
	104 Return 
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move X8, [X19+56]
	107 Move X0, X23
	108 Move W1, W22
	109 Move W2, W20
	110 Move X4, [X8+24]
	111 Move X3, X21
	112 Move X20, [X31+48]
	113 Move X19, [X31+56]
	114 Move X22, [X31+32]
	115 Move X21, [X31+40]
	116 Move X24, [X31+16]
	117 Move X23, [X31+24]
	118 Move X30, [X31+64]
	119 Move X25, [X31+72]
	120 Call Array.Sort, X0, X1, X2, X3
	121 Return 
	122 Move X20, [X31+48]
	123 Move X19, [X31+56]
	124 Move X22, [X31+32]
	125 Move X21, [X31+40]
	126 Move X24, [X31+16]
	127 Move X23, [X31+24]
	128 Move X30, [X31+64]
	129 Move X25, [X31+72]
	130 Return 
	131 Move X0, 0x1F8A000
	132 Move X0, [X0+1400]
	133 Call 0x1C17D08
	134 Call 0x1C17F10
	135 Move X20, X0
	136 Move X0, 0x1FAA000
	137 Move X0, [X0+1888]
	138 Call 0x1C17D08
	139 Move X1, X0
	140 Move X0, X20
	141 Move X2, X31
	142 Call ArgumentException..ctor, X0, X1
	143 Move X0, 0x1F87000
	144 Move X0, [X0+1320]
	145 Call 0x1C17D08
	146 Call 0x1C17F10
	147 Move X20, X0
	148 Move X0, 0x1FAA000
	149 Move X0, [X0+1904]
	150 Call 0x1C17D08
	151 Move X1, X0
	152 Move X0, X20
	153 Move X2, X31
	154 Call ArgumentNullException..ctor, X0, X1
	155 Move X0, X20
	156 Move X8, 0x1F8D000
	157 Move X9, 0x1F8A000
	158 Move X8, [X8+304]
	159 Move X9, [X9+1896]
	160 NotImplemented "Instruction CMP not yet implemented."
	161 NotImplemented "Instruction CSEL not yet implemented."
	162 Call 0x1C17D08
	163 Move X20, X0
	164 Move X0, 0x1F8A000
	165 Move X0, [X0+1888]
	166 Call 0x1C17D08
	167 Call 0x1C17F10
	168 Move X21, X0
	169 Move X0, 0x1FAA000
	170 Move X0, [X0+1648]
	171 Call 0x1C17D08
	172 Move X2, X0
	173 Move X0, X21
	174 Move X1, X20
	175 Move X3, X31
	176 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	177 Move X0, X21
	178 Move X1, X19
	179 Call 0x1C17DEC
	180 Call 0x1C17F20

Method: System.Boolean Exists(T[] array, System.Predicate`1<T> match)

Disassembly:
	0x022E6B98 LDR X0, [X0 + 0x778]
	0x022E6B9C BL 0x1C16D08
	0x022E6BA0 MOV X1, X0
	0x022E6BA4 MOV X0, X20
	0x022E6BA8 MOV X2, X31
	0x022E6BAC BL 0x330E100
	0x022E6BB0 MOV X0, X20
	0x022E6BB4 MOV X1, X19
	0x022E6BB8 BL 0x1C16DEC
	0x022E6BBC BL 0x3EB1B20
	0x022E6BC0 STP X29, X30, [X31 - 0x60]!
	0x022E6BC4 STP X28, X27, [X31 + 0x10]
	0x022E6BC8 STP X26, X25, [X31 + 0x20]
	0x022E6BCC STP X24, X23, [X31 + 0x30]
	0x022E6BD0 STP X22, X21, [X31 + 0x40]
	0x022E6BD4 STP X20, X19, [X31 + 0x50]
	0x022E6BD8 ADD X29, X31, 0x0
	0x022E6BDC SUB X31, X31, 0x20
	0x022E6BE0 MRS X26, 0xC000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+56]
	006 Move X19, X1
	007 Move X20, X0
	008 Compare X8, 0
	009 JumpIfNotEqual {14}
	010 Move X0, X2
	011 Move X21, X2
	012 Call 0x1C5D6E0
	013 Move X8, [X21+56]
	014 Move X2, [X8+16]
	015 Move X0, X20
	016 Move X1, X19
	017 Call 0x22E7638, X0, X1
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Add W31, W0, 1
	021 NotImplemented "Instruction CSET not yet implemented."
	022 Move X30, [X31+32]
	023 Move X21, [X31+40]
	024 Return X0

Method: System.Void Fill(T[] array, T value)

Disassembly:
	0x022E6C34 ADD X31, X25, 0x0
	0x022E6C38 MOV X0, X25
	0x022E6C3C MOV W1, W31
	0x022E6C40 MOV X2, X21
	0x022E6C44 BL 0x3EB1B10
	0x022E6C48 CBZ X23, 0x22E6D58
	0x022E6C4C CBZ X24, 0x22E6D78
	0x022E6C50 LDR W27, [X23 + 0x18]
	0x022E6C54 SUBS W27, W27, 0x1
	0x022E6C58 B.MI 0x22E6CF4
	0x022E6C5C LDR W8, [X23 + 0x18]
	0x022E6C60 CMP W27, W8
	0x022E6C64 B.CS 0x22E6D54
	0x022E6C68 LDR X8, [X23]
	0x022E6C6C MOV W28, W27
	0x022E6C70 MOV X0, X22
	0x022E6C74 MOV X2, X21
	0x022E6C78 LDR W8, [X8 + 0x104]
	0x022E6C7C NOP
	0x022E6C80 MADD X8, X8, X28, X23
	0x022E6C84 ADD X1, X8, 0x20
	0x022E6C88 BL 0x3EB1AC0
	0x022E6C8C LDR X8, [X19 + 0x38]
	0x022E6C90 LDR X9, [X8 + 0x10]
	0x022E6C94 LDR W10, [X9 + 0x28]
	0x022E6C98 MOV X9, X22
	0x022E6C9C TBNZ X10, 0x1F, 0x22E6CA4
	0x022E6CA0 LDR X9, [X22]
	0x022E6CA4 LDR X1, [X8 + 0x18]
	0x022E6CA8 SUB X3, X29, 0x18
	0x022E6CAC SUB X4, X29, 0xC
	0x022E6CB0 MOV X2, X24
	0x022E6CB4 LDR X0, [X1]
	0x022E6CB8 STUR X9, [X29 - 0x18]
	0x022E6CBC LDR X8, [X1 + 0x10]
	0x022E6CC0 BLR X8
	0x022E6CC4 LDURB W8, [X29 - 0xC]
	0x022E6CC8 CBZ W8, 0x22E6C54
	0x022E6CCC LDR W8, [X23 + 0x18]
	0x022E6CD0 CMP W27, W8
	0x022E6CD4 B.CS 0x22E6D54
	0x022E6CD8 LDR X8, [X23]
	0x022E6CDC MOV X0, X22
	0x022E6CE0 LDR W8, [X8 + 0x104]
	0x022E6CE4 NOP
	0x022E6CE8 MADD X8, X8, X28, X23
	0x022E6CEC ADD X1, X8, 0x20
	0x022E6CF0 B 0x22E6D0C
	0x022E6CF4 MOV X0, X25
	0x022E6CF8 MOV W1, W31
	0x022E6CFC MOV X2, X21
	0x022E6D00 BL 0x3EB1B10
	0x022E6D04 MOV X0, X22
	0x022E6D08 MOV X1, X25
	0x022E6D0C MOV X2, X21
	0x022E6D10 BL 0x3EB1AC0
	0x022E6D14 MOV X0, X20
	0x022E6D18 MOV X1, X22
	0x022E6D1C MOV X2, X21
	0x022E6D20 BL 0x3EB1AC0
	0x022E6D24 LDR X8, [X26 + 0x28]
	0x022E6D28 LDUR X9, [X29 - 0x8]
	0x022E6D2C CMP X8, X9
	0x022E6D30 B.NE 0x22E6DB4
	0x022E6D34 ADD X31, X29, 0x0
	0x022E6D38 LDP X20, X19, [X31 + 0x50]
	0x022E6D3C LDP X22, X21, [X31 + 0x40]
	0x022E6D40 LDP X24, X23, [X31 + 0x30]
	0x022E6D44 LDP X26, X25, [X31 + 0x20]
	0x022E6D48 LDP X28, X27, [X31 + 0x10]
	0x022E6D4C LDP X29, X30, [X31], #0x60
	0x022E6D50 RET
	0x022E6D54 BL 0x1C16F28
	0x022E6D58 ADRP X0, 0x1E12000
	0x022E6D5C LDR X0, [X0 + 0x528]
	0x022E6D60 BL 0x1C16D08
	0x022E6D64 BL 0x1C16F10
	0x022E6D68 MOV X20, X0
	0x022E6D6C ADRP X0, 0x1E35000
	0x022E6D70 LDR X0, [X0 + 0x640]
	0x022E6D74 B 0x22E6D94
	0x022E6D78 ADRP X0, 0x1E12000
	0x022E6D7C LDR X0, [X0 + 0x528]
	0x022E6D80 BL 0x1C16D08
	0x022E6D84 BL 0x1C16F10
	0x022E6D88 MOV X20, X0
	0x022E6D8C ADRP X0, 0x1E35000
	0x022E6D90 LDR X0, [X0 + 0x778]
	0x022E6D94 BL 0x1C16D08
	0x022E6D98 MOV X1, X0
	0x022E6D9C MOV X0, X20
	0x022E6DA0 MOV X2, X31
	0x022E6DA4 BL 0x330E100
	0x022E6DA8 MOV X0, X20
	0x022E6DAC MOV X1, X19
	0x022E6DB0 BL 0x1C16DEC
	0x022E6DB4 BL 0x3EB1B20
	0x022E6DB8 STP X30, X21, [X31 - 0x20]!
	0x022E6DBC STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Add X29, X31, 0
	013 Subtract X31, X31, 16
	014 NotImplemented "Instruction MRS not yet implemented."
	015 Move X8, [X24+40]
	016 Move X19, X2
	017 Move X20, X1
	018 Move X21, X0
	019 Move [X29-8], X8
	020 Move [X29-16], X1
	021 Move X8, [X2+56]
	022 Compare X8, 0
	023 JumpIfNotEqual {27}
	024 Move X0, X19
	025 Call 0x1C5D6E0
	026 Move X8, [X19+56]
	027 Move X8, [X8+8]
	028 Add X9, X31, 0
	029 Move W22, [X8+252]
	030 Add X10, X22, 15
	031 And X10, X10, 0x1FFFFFFFF
	032 Subtract X23, X9, X10
	033 Add X31, X23, 0
	034 Compare X21, 0
	035 JumpIfEqual {95}
	036 Move X9, [X21+24]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move W8, [X8+40]
	039 Subtract X25, X29, 16
	040 Move X0, X23
	041 Move X2, X22
	042 NotImplemented "Instruction CMP not yet implemented."
	043 NotImplemented "Instruction CSEL not yet implemented."
	044 And X26, X9, 0
	045 Call 0x3EB2AC0
	046 Compare X26, 0
	047 JumpIfEqual {78}
	048 Move X27, X31
	049 Move X8, [X21]
	050 Move X1, X23
	051 Move X2, X22
	052 Move W8, [X8+260]
	053 NotImplemented "Instruction NOP not yet implemented."
	054 NotImplemented "Instruction MADD not yet implemented."
	055 Add X0, X8, 32
	056 Call 0x3EB2AC0
	057 Move X8, [X19+56]
	058 Move X0, [X8+8]
	059 Move W8, [X0+309]
	060 Move TEMP, X8
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfEqual {66}
	064 Call 0x1C5D684
	065 Move W26, [X21+24]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Add X27, X27, 1
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move X8, [X19+56]
	070 Move X0, X23
	071 Move X2, X22
	072 Move X8, [X8+8]
	073 Move W8, [X8+40]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 NotImplemented "Instruction CSEL not yet implemented."
	076 Call 0x3EB2AC0
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Call 0x1C17F28
	079 Move X8, [X24+40]
	080 NotImplemented "Instruction LDUR not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Add X31, X29, 0
	083 Move X20, [X31+80]
	084 Move X19, [X31+88]
	085 Move X22, [X31+64]
	086 Move X21, [X31+72]
	087 Move X24, [X31+48]
	088 Move X23, [X31+56]
	089 Move X26, [X31+32]
	090 Move X25, [X31+40]
	091 Move X27, [X31+16]
	092 Move X29, [X31+96]
	093 Move X30, [X31+104]
	094 Return 
	095 Move X0, 0x1E13000
	096 Move X0, [X0+1320]
	097 Call 0x1C17D08
	098 Call 0x1C17F10
	099 Move X20, X0
	100 Move X0, 0x1E36000
	101 Move X0, [X0+1600]
	102 Call 0x1C17D08
	103 Move X1, X0
	104 Move X0, X20
	105 Move X2, X31
	106 Call ArgumentNullException..ctor, X0, X1
	107 Move X0, X20
	108 Move X1, X19
	109 Call 0x1C17DEC
	110 Call 0x3EB2B20

Method: System.Void Fill(T[] array, T value, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x022E6DC0 LDR X8, [X2 + 0x38]
	0x022E6DC4 MOV X19, X2
	0x022E6DC8 MOV X20, X1
	0x022E6DCC MOV X21, X0
	0x022E6DD0 CBNZ X8, 0x22E6DDC
	0x022E6DD4 MOV X0, X19
	0x022E6DD8 BL 0x1C5C6E0
	0x022E6DDC CBZ X21, 0x22E6E08
	0x022E6DE0 LDR X8, [X19 + 0x38]
	0x022E6DE4 LDR W2, [X21 + 0x18]
	0x022E6DE8 MOV X3, X20
	0x022E6DEC LDP X20, X19, [X31 + 0x10]
	0x022E6DF0 LDR X4, [X8 + 0x10]
	0x022E6DF4 SUB W1, W2, 0x1
	0x022E6DF8 MOV X0, X21
	0x022E6DFC LDR X5, [X4]
	0x022E6E00 LDP X30, X21, [X31], #0x20
	0x022E6E04 BR X5
	0x022E6E08 ADRP X0, 0x1E12000
	0x022E6E0C LDR X0, [X0 + 0x528]
	0x022E6E10 BL 0x1C16D08
	0x022E6E14 BL 0x1C16F10
	0x022E6E18 MOV X20, X0
	0x022E6E1C ADRP X0, 0x1E35000
	0x022E6E20 LDR X0, [X0 + 0x640]
	0x022E6E24 BL 0x1C16D08
	0x022E6E28 MOV X1, X0
	0x022E6E2C MOV X0, X20
	0x022E6E30 MOV X2, X31
	0x022E6E34 BL 0x330E100
	0x022E6E38 MOV X0, X20
	0x022E6E3C MOV X1, X19
	0x022E6E40 BL 0x1C16DEC
	0x022E6E44 STR X30, [X31 - 0x30]!
	0x022E6E48 STP X22, X21, [X31 + 0x10]
	0x022E6E4C STP X20, X19, [X31 + 0x20]
	0x022E6E50 LDR X8, [X3 + 0x38]
	0x022E6E54 MOV X19, X3
	0x022E6E58 MOV X20, X2
	0x022E6E5C MOV W21, W1
	0x022E6E60 MOV X22, X0
	0x022E6E64 CBNZ X8, 0x22E6E70
	0x022E6E68 MOV X0, X19
	0x022E6E6C BL 0x1C5C6E0
	0x022E6E70 CBZ X22, 0x22E6EA0
	0x022E6E74 LDR X8, [X19 + 0x38]
	0x022E6E78 ADD W2, W21, 0x1
	0x022E6E7C MOV X0, X22
	0x022E6E80 MOV W1, W21
	0x022E6E84 LDR X4, [X8 + 0x10]
	0x022E6E88 MOV X3, X20
	0x022E6E8C LDP X20, X19, [X31 + 0x20]
	0x022E6E90 LDP X22, X21, [X31 + 0x10]
	0x022E6E94 LDR X5, [X4]
	0x022E6E98 LDR X30, [X31], #0x30
	0x022E6E9C BR X5
	0x022E6EA0 ADRP X0, 0x1E12000
	0x022E6EA4 LDR X0, [X0 + 0x528]
	0x022E6EA8 BL 0x1C16D08
	0x022E6EAC BL 0x1C16F10
	0x022E6EB0 MOV X20, X0
	0x022E6EB4 ADRP X0, 0x1E35000
	0x022E6EB8 LDR X0, [X0 + 0x640]
	0x022E6EBC BL 0x1C16D08
	0x022E6EC0 MOV X1, X0
	0x022E6EC4 MOV X0, X20
	0x022E6EC8 MOV X2, X31
	0x022E6ECC BL 0x330E100
	0x022E6ED0 MOV X0, X20
	0x022E6ED4 MOV X1, X19
	0x022E6ED8 BL 0x1C16DEC
	0x022E6EDC STP X29, X30, [X31 - 0x60]!
	0x022E6EE0 STR X27, [X31 + 0x10]
	0x022E6EE4 STP X26, X25, [X31 + 0x20]
	0x022E6EE8 STP X24, X23, [X31 + 0x30]
	0x022E6EEC STP X22, X21, [X31 + 0x40]
	0x022E6EF0 STP X20, X19, [X31 + 0x50]
	0x022E6EF4 ADD X29, X31, 0x0
	0x022E6EF8 SUB X31, X31, 0x20
	0x022E6EFC MRS X26, 0xC000
	0x022E6F00 LDR X8, [X26 + 0x28]
	0x022E6F04 MOV X19, X4
	0x022E6F08 MOV X21, X3
	0x022E6F0C MOV W25, W2
	0x022E6F10 STUR X8, [X29 - 0x8]
	0x022E6F14 LDR X8, [X4 + 0x38]
	0x022E6F18 MOV W20, W1
	0x022E6F1C MOV X22, X0
	0x022E6F20 CBNZ X8, 0x22E6F30
	0x022E6F24 MOV X0, X19
	0x022E6F28 BL 0x1C5C6E0
	0x022E6F2C LDR X8, [X19 + 0x38]
	0x022E6F30 LDR X8, [X8 + 0x10]
	0x022E6F34 LDR W23, [X8 + 0xFC]
	0x022E6F38 ADD X8, X31, 0x0
	0x022E6F3C ADD X9, X23, 0xF
	0x022E6F40 AND X9, X9, 0x1FFFFFFFF
	0x022E6F44 SUB X24, X8, X9
	0x022E6F48 ADD X31, X24, 0x0
	0x022E6F4C CBZ X22, 0x22E70C0
	0x022E6F50 CBZ X21, 0x22E70E0
	0x022E6F54 LDR X8, [X22 + 0x18]
	0x022E6F58 CBZ X8, 0x22E7040
	0x022E6F5C TBNZ X20, 0x1F, 0x22E7048
	0x022E6F60 CMP W8, W20
	0x022E6F64 B.LE 0x22E7048
	0x022E6F68 TBNZ X25, 0x1F, 0x22E7078
	0x022E6F6C SUB W27, W20, W25
	0x022E6F70 ADDS W31, W27, 0x1
	0x022E6F74 B.LT 0x22E7078
	0x022E6F78 CMP W25, 0x1
	0x022E6F7C B.LT 0x22E7008
	0x022E6F80 CMP W8, W20
	0x022E6F84 B.LS 0x22E7004
	0x022E6F88 LDR X8, [X22]
	0x022E6F8C SXTW X9, W20
	0x022E6F90 MOV X0, X24
	0x022E6F94 MOV X2, X23
	0x022E6F98 LDR W8, [X8 + 0x104]
	0x022E6F9C NOP
	0x022E6FA0 MADD X8, X8, X9, X22
	0x022E6FA4 ADD X1, X8, 0x20
	0x022E6FA8 BL 0x3EB1AC0
	0x022E6FAC LDR X8, [X19 + 0x38]
	0x022E6FB0 LDR X9, [X8 + 0x10]
	0x022E6FB4 LDR W10, [X9 + 0x28]
	0x022E6FB8 MOV X9, X24
	0x022E6FBC TBNZ X10, 0x1F, 0x22E6FC4
	0x022E6FC0 LDR X9, [X24]
	0x022E6FC4 LDR X1, [X8 + 0x18]
	0x022E6FC8 SUB X3, X29, 0x18
	0x022E6FCC SUB X4, X29, 0xC
	0x022E6FD0 MOV X2, X21
	0x022E6FD4 LDR X0, [X1]
	0x022E6FD8 STUR X9, [X29 - 0x18]
	0x022E6FDC LDR X8, [X1 + 0x10]
	0x022E6FE0 BLR X8
	0x022E6FE4 LDURB W8, [X29 - 0xC]
	0x022E6FE8 CBNZ W8, 0x22E700C
	0x022E6FEC SUB W20, W20, 0x1
	0x022E6FF0 CMP W20, W27

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Add X29, X31, 0
	014 Subtract X31, X31, 16
	015 NotImplemented "Instruction MRS not yet implemented."
	016 Move X8, [X26+40]
	017 Move X19, X4
	018 Move W25, W3
	019 Move W24, W2
	020 Move [X29-8], X8
	021 Move [X29-16], X1
	022 Move X8, [X4+56]
	023 Move X20, X1
	024 Move X21, X0
	025 Compare X8, 0
	026 JumpIfNotEqual {30}
	027 Move X0, X19
	028 Call 0x1C5D6E0
	029 Move X8, [X19+56]
	030 Move X8, [X8+8]
	031 Add X9, X31, 0
	032 Move W22, [X8+252]
	033 Add X10, X22, 15
	034 And X10, X10, 0x1FFFFFFFF
	035 Subtract X23, X9, X10
	036 Add X31, X23, 0
	037 Compare X21, 0
	038 JumpIfEqual {122}
	039 Move TEMP, X24
	040 And TEMP, TEMP, -2147483648
	041 Compare TEMP, -2147483648
	042 JumpIfEqual {111}
	043 Move X27, [X21+24]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move TEMP, X25
	046 And TEMP, TEMP, -2147483648
	047 Compare TEMP, -2147483648
	048 JumpIfEqual {134}
	049 Subtract W9, W27, W25
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Add W28, W25, W24
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move W8, [X8+40]
	054 Subtract X25, X29, 16
	055 Move X0, X23
	056 Move X2, X22
	057 NotImplemented "Instruction CMP not yet implemented."
	058 NotImplemented "Instruction CSEL not yet implemented."
	059 Call 0x3EB2AC0
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X8, W28
	062 Move W24, W24
	063 Subtract X27, X8, 1
	064 Move X8, [X21]
	065 Move X1, X23
	066 Move X2, X22
	067 Move W8, [X8+260]
	068 NotImplemented "Instruction NOP not yet implemented."
	069 NotImplemented "Instruction MADD not yet implemented."
	070 Add X0, X8, 32
	071 Call 0x3EB2AC0
	072 Move X8, [X19+56]
	073 Move X0, [X8+8]
	074 Move W8, [X0+309]
	075 Move TEMP, X8
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfEqual {80}
	079 Call 0x1C5D684
	080 Move X28, [X21+24]
	081 NotImplemented "Instruction CMP not yet implemented."
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X8, [X19+56]
	084 Move X0, X23
	085 Move X2, X22
	086 Add X24, X24, 1
	087 Move X8, [X8+8]
	088 Move W8, [X8+40]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 NotImplemented "Instruction CSEL not yet implemented."
	091 Call 0x3EB2AC0
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Call 0x1C17F28
	094 Move X8, [X26+40]
	095 NotImplemented "Instruction LDUR not yet implemented."
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Add X31, X29, 0
	098 Move X20, [X31+80]
	099 Move X19, [X31+88]
	100 Move X22, [X31+64]
	101 Move X21, [X31+72]
	102 Move X24, [X31+48]
	103 Move X23, [X31+56]
	104 Move X26, [X31+32]
	105 Move X25, [X31+40]
	106 Move X28, [X31+16]
	107 Move X27, [X31+24]
	108 Move X29, [X31+96]
	109 Move X30, [X31+104]
	110 Return 
	111 Move X0, 0x1E16000
	112 Move X0, [X0+1888]
	113 Call 0x1C17D08
	114 Call 0x1C17F10
	115 Move X20, X0
	116 Move X0, 0x1E36000
	117 Move X0, [X0+1624]
	118 Call 0x1C17D08
	119 Move X21, X0
	120 Move X0, 0x1E36000
	121 Move X0, [X0+1632]
	122 Move X0, 0x1E13000
	123 Move X0, [X0+1320]
	124 Call 0x1C17D08
	125 Call 0x1C17F10
	126 Move X20, X0
	127 Move X0, 0x1E36000
	128 Move X0, [X0+1600]
	129 Call 0x1C17D08
	130 Move X1, X0
	131 Move X0, X20
	132 Move X2, X31
	133 Call ArgumentNullException..ctor, X0, X1
	134 Move X0, 0x1E16000
	135 Move X0, [X0+1888]
	136 Call 0x1C17D08
	137 Call 0x1C17F10
	138 Move X20, X0
	139 Move X0, 0x1E36000
	140 Move X0, [X0+1608]
	141 Call 0x1C17D08
	142 Move X21, X0
	143 Move X0, 0x1E36000
	144 Move X0, [X0+1616]
	145 Call 0x1C17D08
	146 Move X2, X0
	147 Move X0, X20
	148 Move X1, X21
	149 Move X3, X31
	150 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	151 Move X0, X20
	152 Move X1, X19
	153 Call 0x1C17DEC
	154 Call 0x3EB2B20

Method: T Find(T[] array, System.Predicate`1<T> match)

Disassembly:
	0x022E6FF4 B.LE 0x22E7008
	0x022E6FF8 LDR W8, [X22 + 0x18]
	0x022E6FFC CMP W20, W8
	0x022E7000 B.CC 0x22E6F88
	0x022E7004 BL 0x1C16F28
	0x022E7008 MOVN W20, 0x0
	0x022E700C LDR X8, [X26 + 0x28]
	0x022E7010 LDUR X9, [X29 - 0x8]
	0x022E7014 CMP X8, X9
	0x022E7018 B.NE 0x22E711C
	0x022E701C MOV W0, W20
	0x022E7020 ADD X31, X29, 0x0
	0x022E7024 LDP X20, X19, [X31 + 0x50]
	0x022E7028 LDP X22, X21, [X31 + 0x40]
	0x022E702C LDP X24, X23, [X31 + 0x30]
	0x022E7030 LDP X26, X25, [X31 + 0x20]
	0x022E7034 LDR X27, [X31 + 0x10]
	0x022E7038 LDP X29, X30, [X31], #0x60
	0x022E703C RET
	0x022E7040 ADDS W31, W20, 0x1
	0x022E7044 B.EQ 0x22E6F68
	0x022E7048 ADRP X0, 0x1E14000
	0x022E704C LDR X0, [X0 + 0x760]
	0x022E7050 BL 0x1C16D08
	0x022E7054 BL 0x1C16F10
	0x022E7058 MOV X20, X0
	0x022E705C ADRP X0, 0x1E34000
	0x022E7060 LDR X0, [X0 + 0x658]
	0x022E7064 BL 0x1C16D08
	0x022E7068 MOV X21, X0
	0x022E706C ADRP X0, 0x1E34000
	0x022E7070 LDR X0, [X0 + 0x660]
	0x022E7074 B 0x22E70A4
	0x022E7078 ADRP X0, 0x1E14000
	0x022E707C LDR X0, [X0 + 0x760]
	0x022E7080 BL 0x1C16D08
	0x022E7084 BL 0x1C16F10
	0x022E7088 MOV X20, X0
	0x022E708C ADRP X0, 0x1E34000
	0x022E7090 LDR X0, [X0 + 0x648]
	0x022E7094 BL 0x1C16D08
	0x022E7098 MOV X21, X0
	0x022E709C ADRP X0, 0x1E34000
	0x022E70A0 LDR X0, [X0 + 0x650]
	0x022E70A4 BL 0x1C16D08
	0x022E70A8 MOV X2, X0
	0x022E70AC MOV X0, X20
	0x022E70B0 MOV X1, X21
	0x022E70B4 MOV X3, X31
	0x022E70B8 BL 0x3311888
	0x022E70BC B 0x22E7110
	0x022E70C0 ADRP X0, 0x1E11000
	0x022E70C4 LDR X0, [X0 + 0x528]
	0x022E70C8 BL 0x1C16D08
	0x022E70CC BL 0x1C16F10
	0x022E70D0 MOV X20, X0
	0x022E70D4 ADRP X0, 0x1E34000
	0x022E70D8 LDR X0, [X0 + 0x640]
	0x022E70DC B 0x22E70FC
	0x022E70E0 ADRP X0, 0x1E11000
	0x022E70E4 LDR X0, [X0 + 0x528]
	0x022E70E8 BL 0x1C16D08
	0x022E70EC BL 0x1C16F10
	0x022E70F0 MOV X20, X0
	0x022E70F4 ADRP X0, 0x1E34000
	0x022E70F8 LDR X0, [X0 + 0x778]
	0x022E70FC BL 0x1C16D08
	0x022E7100 MOV X1, X0
	0x022E7104 MOV X0, X20
	0x022E7108 MOV X2, X31
	0x022E710C BL 0x330E100
	0x022E7110 MOV X0, X20
	0x022E7114 MOV X1, X19
	0x022E7118 BL 0x1C16DEC
	0x022E711C BL 0x3EB1B20
	0x022E7120 STR X30, [X31 - 0x30]!
	0x022E7124 STP X22, X21, [X31 + 0x10]
	0x022E7128 STP X20, X19, [X31 + 0x20]
	0x022E712C LDR X8, [X2 + 0x38]
	0x022E7130 MOV X19, X2
	0x022E7134 MOV X20, X1
	0x022E7138 MOV X21, X0
	0x022E713C CBNZ X8, 0x22E7148
	0x022E7140 MOV X0, X19
	0x022E7144 BL 0x1C5C6E0
	0x022E7148 CBZ X21, 0x22E71A8
	0x022E714C CBZ X20, 0x22E71C8
	0x022E7150 LDR X8, [X21 + 0x18]
	0x022E7154 CMP W8, 0x1
	0x022E7158 B.LT 0x22E7194
	0x022E715C MOV X19, X31
	0x022E7160 AND X8, X8, 0x0
	0x022E7164 ADD X22, X21, 0x20
	0x022E7168 CMP X19, W8, UXTW
	0x022E716C B.CS 0x22E71A4
	0x022E7170 LDR V0, [X22, X19, LSL #2]
	0x022E7174 LDR X8, [X20 + 0x18]
	0x022E7178 LDR X0, [X20 + 0x40]
	0x022E717C LDR X1, [X20 + 0x28]
	0x022E7180 BLR X8
	0x022E7184 LDR W8, [X21 + 0x18]
	0x022E7188 ADD X19, X19, 0x1
	0x022E718C CMP X19, W8, SXTW
	0x022E7190 B.LT 0x22E7168
	0x022E7194 LDP X20, X19, [X31 + 0x20]
	0x022E7198 LDP X22, X21, [X31 + 0x10]
	0x022E719C LDR X30, [X31], #0x30
	0x022E71A0 RET
	0x022E71A4 BL 0x1C16F28
	0x022E71A8 ADRP X0, 0x1E11000
	0x022E71AC LDR X0, [X0 + 0x528]
	0x022E71B0 BL 0x1C16D08
	0x022E71B4 BL 0x1C16F10
	0x022E71B8 MOV X20, X0
	0x022E71BC ADRP X0, 0x1E34000
	0x022E71C0 LDR X0, [X0 + 0x640]
	0x022E71C4 B 0x22E71E4
	0x022E71C8 ADRP X0, 0x1E11000
	0x022E71CC LDR X0, [X0 + 0x528]
	0x022E71D0 BL 0x1C16D08
	0x022E71D4 BL 0x1C16F10
	0x022E71D8 MOV X20, X0
	0x022E71DC ADRP X0, 0x1E34000
	0x022E71E0 LDR X0, [X0 + 0xBF8]
	0x022E71E4 BL 0x1C16D08
	0x022E71E8 MOV X1, X0
	0x022E71EC MOV X0, X20
	0x022E71F0 MOV X2, X31
	0x022E71F4 BL 0x330E100
	0x022E71F8 MOV X0, X20

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Add X29, X31, 0
	013 Subtract X31, X31, 32
	014 NotImplemented "Instruction MRS not yet implemented."
	015 Move X8, [X26+40]
	016 Move X19, X3
	017 Move X20, X2
	018 Move X24, X1
	019 Move [X29-8], X8
	020 Move X8, [X3+56]
	021 Move X23, X0
	022 Compare X8, 0
	023 JumpIfNotEqual {27}
	024 Move X0, X19
	025 Call 0x1C5D6E0
	026 Move X8, [X19+56]
	027 Move X8, [X8+16]
	028 Move W21, [X8+252]
	029 Add X8, X31, 0
	030 Add X9, X21, 15
	031 And X9, X9, 0x1FFFFFFFF
	032 Subtract X22, X8, X9
	033 Add X31, X22, 0
	034 Add X8, X31, 0
	035 Subtract X25, X8, X9
	036 Add X31, X25, 0
	037 Move X0, X25
	038 Move W1, W31
	039 Move X2, X21
	040 Call 0x3EB2B10
	041 Compare X23, 0
	042 JumpIfEqual {118}
	043 Compare X24, 0
	044 JumpIfEqual {125}
	045 Move X8, [X23+24]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X27, X31
	048 And X8, X8, 0
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X8, [X23]
	051 Move X0, X22
	052 Move X2, X21
	053 Move W8, [X8+260]
	054 NotImplemented "Instruction NOP not yet implemented."
	055 NotImplemented "Instruction MADD not yet implemented."
	056 Add X1, X8, 32
	057 Call 0x3EB2AC0
	058 Move X8, [X19+56]
	059 Move X9, [X8+16]
	060 Move W10, [X9+40]
	061 Move X9, X22
	062 Move TEMP, X10
	063 And TEMP, TEMP, -2147483648
	064 Compare TEMP, -2147483648
	065 JumpIfEqual {67}
	066 Move X9, [X22]
	067 Move X1, [X8+24]
	068 Subtract X3, X29, 24
	069 Subtract X4, X29, 12
	070 Move X2, X24
	071 Move X0, [X1]
	072 Move [X29-24], X9
	073 Move X8, [X1+16]
	074 NotImplemented "Instruction BLR not yet implemented."
	075 NotImplemented "Instruction LDURB not yet implemented."
	076 Compare W8, 0
	077 JumpIfNotEqual {87}
	078 Move W8, [X23+24]
	079 Add X27, X27, 1
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move X0, X25
	082 Move W1, W31
	083 Move X2, X21
	084 Call 0x3EB2B10
	085 Move X0, X22
	086 Move X1, X25
	087 Move W8, [X23+24]
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move X8, [X23]
	090 Move X0, X22
	091 Move W8, [X8+260]
	092 NotImplemented "Instruction NOP not yet implemented."
	093 NotImplemented "Instruction MADD not yet implemented."
	094 Add X1, X8, 32
	095 Move X2, X21
	096 Call 0x3EB2AC0
	097 Move X0, X20
	098 Move X1, X22
	099 Move X2, X21
	100 Call 0x3EB2AC0
	101 Move X8, [X26+40]
	102 NotImplemented "Instruction LDUR not yet implemented."
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Add X31, X29, 0
	105 Move X20, [X31+80]
	106 Move X19, [X31+88]
	107 Move X22, [X31+64]
	108 Move X21, [X31+72]
	109 Move X24, [X31+48]
	110 Move X23, [X31+56]
	111 Move X26, [X31+32]
	112 Move X25, [X31+40]
	113 Move X27, [X31+16]
	114 Move X29, [X31+96]
	115 Move X30, [X31+104]
	116 Return X0
	117 Call 0x1C17F28
	118 Move X0, 0x1E12000
	119 Move X0, [X0+1320]
	120 Call 0x1C17D08
	121 Call 0x1C17F10
	122 Move X20, X0
	123 Move X0, 0x1E35000
	124 Move X0, [X0+1600]
	125 Move X0, 0x1E12000
	126 Move X0, [X0+1320]
	127 Call 0x1C17D08
	128 Call 0x1C17F10
	129 Move X20, X0
	130 Move X0, 0x1E35000
	131 Move X0, [X0+1912]
	132 Call 0x1C17D08
	133 Move X1, X0
	134 Move X0, X20
	135 Move X2, X31
	136 Call ArgumentNullException..ctor, X0, X1
	137 Move X0, X20
	138 Move X1, X19
	139 Call 0x1C17DEC
	140 Call 0x3EB2B20

Method: T[] FindAll(T[] array, System.Predicate`1<T> match)

Disassembly:
	0x022E7350 MOV X20, X0
	0x022E7354 ADRP X0, 0x1E34000
	0x022E7358 LDR X0, [X0 + 0xBF8]
	0x022E735C BL 0x1C16D08
	0x022E7360 MOV X1, X0
	0x022E7364 MOV X0, X20
	0x022E7368 MOV X2, X31
	0x022E736C BL 0x330E100
	0x022E7370 MOV X0, X20
	0x022E7374 MOV X1, X19
	0x022E7378 BL 0x1C16DEC
	0x022E737C BL 0x3EB1B20
	0x022E7380 STP X30, X21, [X31 - 0x20]!
	0x022E7384 STP X20, X19, [X31 + 0x10]
	0x022E7388 LDR X8, [X2 + 0x38]
	0x022E738C MOV X19, X2
	0x022E7390 MOV W20, W1
	0x022E7394 MOV X21, X0
	0x022E7398 CBNZ X8, 0x22E73A4
	0x022E739C MOV X0, X19
	0x022E73A0 BL 0x1C5C6E0
	0x022E73A4 CBZ X21, 0x22E73CC
	0x022E73A8 LDR X8, [X19 + 0x38]
	0x022E73AC LDR W3, [X21 + 0x18]
	0x022E73B0 AND W1, W20, 0x1
	0x022E73B4 LDP X20, X19, [X31 + 0x10]
	0x022E73B8 LDR X4, [X8 + 0x10]
	0x022E73BC MOV X0, X21
	0x022E73C0 MOV W2, W31
	0x022E73C4 LDP X30, X21, [X31], #0x20
	0x022E73C8 B 0x22F94D0
	0x022E73CC ADRP X0, 0x1E11000
	0x022E73D0 LDR X0, [X0 + 0x528]
	0x022E73D4 BL 0x1C16D08
	0x022E73D8 BL 0x1C16F10
	0x022E73DC MOV X20, X0
	0x022E73E0 ADRP X0, 0x1E34000
	0x022E73E4 LDR X0, [X0 + 0x640]
	0x022E73E8 BL 0x1C16D08
	0x022E73EC MOV X1, X0
	0x022E73F0 MOV X0, X20
	0x022E73F4 MOV X2, X31
	0x022E73F8 BL 0x330E100
	0x022E73FC MOV X0, X20
	0x022E7400 MOV X1, X19
	0x022E7404 BL 0x1C16DEC
	0x022E7408 STP X30, X21, [X31 - 0x20]!
	0x022E740C STP X20, X19, [X31 + 0x10]
	0x022E7410 LDR X8, [X2 + 0x38]
	0x022E7414 MOV X19, X2
	0x022E7418 MOV W20, W1
	0x022E741C MOV X21, X0
	0x022E7420 CBNZ X8, 0x22E742C
	0x022E7424 MOV X0, X19
	0x022E7428 BL 0x1C5C6E0
	0x022E742C CBZ X21, 0x22E7454
	0x022E7430 LDR X8, [X19 + 0x38]
	0x022E7434 LDR W3, [X21 + 0x18]
	0x022E7438 MOV W1, W20
	0x022E743C LDP X20, X19, [X31 + 0x10]
	0x022E7440 LDR X4, [X8 + 0x10]
	0x022E7444 MOV X0, X21
	0x022E7448 MOV W2, W31
	0x022E744C LDP X30, X21, [X31], #0x20
	0x022E7450 B 0x22F95D8
	0x022E7454 ADRP X0, 0x1E11000
	0x022E7458 LDR X0, [X0 + 0x528]
	0x022E745C BL 0x1C16D08
	0x022E7460 BL 0x1C16F10
	0x022E7464 MOV X20, X0
	0x022E7468 ADRP X0, 0x1E34000
	0x022E746C LDR X0, [X0 + 0x640]
	0x022E7470 BL 0x1C16D08
	0x022E7474 MOV X1, X0
	0x022E7478 MOV X0, X20
	0x022E747C MOV X2, X31
	0x022E7480 BL 0x330E100
	0x022E7484 MOV X0, X20
	0x022E7488 MOV X1, X19
	0x022E748C BL 0x1C16DEC
	0x022E7490 STP X30, X21, [X31 - 0x20]!
	0x022E7494 STP X20, X19, [X31 + 0x10]
	0x022E7498 LDR X8, [X2 + 0x38]
	0x022E749C MOV X19, X2
	0x022E74A0 MOV W20, W1
	0x022E74A4 MOV X21, X0
	0x022E74A8 CBNZ X8, 0x22E74B4
	0x022E74AC MOV X0, X19
	0x022E74B0 BL 0x1C5C6E0
	0x022E74B4 CBZ X21, 0x22E74DC
	0x022E74B8 LDR X8, [X19 + 0x38]
	0x022E74BC LDR W3, [X21 + 0x18]
	0x022E74C0 MOV W1, W20
	0x022E74C4 LDP X20, X19, [X31 + 0x10]
	0x022E74C8 LDR X4, [X8 + 0x10]
	0x022E74CC MOV X0, X21
	0x022E74D0 MOV W2, W31
	0x022E74D4 LDP X30, X21, [X31], #0x20
	0x022E74D8 B 0x22F9644
	0x022E74DC ADRP X0, 0x1E11000
	0x022E74E0 LDR X0, [X0 + 0x528]
	0x022E74E4 BL 0x1C16D08
	0x022E74E8 BL 0x1C16F10
	0x022E74EC MOV X20, X0
	0x022E74F0 ADRP X0, 0x1E34000
	0x022E74F4 LDR X0, [X0 + 0x640]
	0x022E74F8 BL 0x1C16D08
	0x022E74FC MOV X1, X0
	0x022E7500 MOV X0, X20
	0x022E7504 MOV X2, X31
	0x022E7508 BL 0x330E100
	0x022E750C MOV X0, X20
	0x022E7510 MOV X1, X19
	0x022E7514 BL 0x1C16DEC
	0x022E7518 STP X30, X21, [X31 - 0x20]!
	0x022E751C STP X20, X19, [X31 + 0x10]
	0x022E7520 LDR X8, [X2 + 0x38]
	0x022E7524 MOV X19, X2
	0x022E7528 MOV W20, W1
	0x022E752C MOV X21, X0
	0x022E7530 CBNZ X8, 0x22E753C
	0x022E7534 MOV X0, X19
	0x022E7538 BL 0x1C5C6E0
	0x022E753C CBZ X21, 0x22E7564
	0x022E7540 LDR X8, [X19 + 0x38]
	0x022E7544 LDR W3, [X21 + 0x18]
	0x022E7548 MOV W1, W20
	0x022E754C LDP X20, X19, [X31 + 0x10]
	0x022E7550 LDR X4, [X8 + 0x10]
	0x022E7554 MOV X0, X21
	0x022E7558 MOV W2, W31
	0x022E755C LDP X30, X21, [X31], #0x20
	0x022E7560 B 0x22FA3DC
	0x022E7564 ADRP X0, 0x1E11000
	0x022E7568 LDR X0, [X0 + 0x528]
	0x022E756C BL 0x1C16D08
	0x022E7570 BL 0x1C16F10
	0x022E7574 MOV X20, X0
	0x022E7578 ADRP X0, 0x1E34000
	0x022E757C LDR X0, [X0 + 0x640]
	0x022E7580 BL 0x1C16D08
	0x022E7584 MOV X1, X0
	0x022E7588 MOV X0, X20
	0x022E758C MOV X2, X31
	0x022E7590 BL 0x330E100
	0x022E7594 MOV X0, X20
	0x022E7598 MOV X1, X19
	0x022E759C BL 0x1C16DEC
	0x022E75A0 STP X30, X21, [X31 - 0x20]!
	0x022E75A4 STP X20, X19, [X31 + 0x10]
	0x022E75A8 LDR X8, [X2 + 0x38]
	0x022E75AC MOV X19, X2
	0x022E75B0 MOV X20, X1
	0x022E75B4 MOV X21, X0
	0x022E75B8 CBNZ X8, 0x22E75C4
	0x022E75BC MOV X0, X19
	0x022E75C0 BL 0x1C5C6E0
	0x022E75C4 CBZ X21, 0x22E75EC
	0x022E75C8 LDR X8, [X19 + 0x38]
	0x022E75CC LDR W3, [X21 + 0x18]
	0x022E75D0 MOV X1, X20
	0x022E75D4 LDP X20, X19, [X31 + 0x10]
	0x022E75D8 LDR X4, [X8 + 0x10]
	0x022E75DC MOV X0, X21
	0x022E75E0 MOV W2, W31
	0x022E75E4 LDP X30, X21, [X31], #0x20
	0x022E75E8 B 0x22FAFBC
	0x022E75EC ADRP X0, 0x1E11000
	0x022E75F0 LDR X0, [X0 + 0x528]
	0x022E75F4 BL 0x1C16D08
	0x022E75F8 BL 0x1C16F10
	0x022E75FC MOV X20, X0
	0x022E7600 ADRP X0, 0x1E34000
	0x022E7604 LDR X0, [X0 + 0x640]
	0x022E7608 BL 0x1C16D08
	0x022E760C MOV X1, X0
	0x022E7610 MOV X0, X20
	0x022E7614 MOV X2, X31
	0x022E7618 BL 0x330E100
	0x022E761C MOV X0, X20
	0x022E7620 MOV X1, X19
	0x022E7624 BL 0x1C16DEC
	0x022E7628 STP X29, X30, [X31 - 0x40]!
	0x022E762C STP X24, X23, [X31 + 0x10]
	0x022E7630 STP X22, X21, [X31 + 0x20]
	0x022E7634 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Add X29, X31, 0
	014 Subtract X31, X31, 48
	015 NotImplemented "Instruction MRS not yet implemented."
	016 Move X8, [X25+40]
	017 Move X19, X2
	018 Move X20, X1
	019 Move X21, X0
	020 Move [X29-8], X8
	021 Move X8, [X2+56]
	022 Compare X8, 0
	023 JumpIfNotEqual {33}
	024 Move X0, 0x1E0D000
	025 Move X0, [X0+1448]
	026 Call 0x1C17CF4
	027 Move X8, [X19+56]
	028 Compare X8, 0
	029 JumpIfNotEqual {33}
	030 Move X0, X19
	031 Call 0x1C5D6E0
	032 Move X8, [X19+56]
	033 Move X9, [X8+24]
	034 Move W22, [X9+252]
	035 Add X9, X31, 0
	036 Add X10, X22, 15
	037 And X10, X10, 0x1FFFFFFFF
	038 Subtract X24, X9, X10
	039 Add X31, X24, 0
	040 Move [X29-32], X31
	041 Compare X21, 0
	042 JumpIfEqual {185}
	043 Compare X20, 0
	044 JumpIfEqual {192}
	045 Move X0, [X8+16]
	046 Move X8, [X0]
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Move [X29-32], X0
	049 Move X8, [X21+24]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move [X29-40], X25
	052 Move X26, 0x1E0D000
	053 Move X26, [X26+1448]
	054 Move X27, X31
	055 Move W23, W31
	056 And X8, X8, 0
	057 Move W28, 4
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X8, [X21]
	060 Move X0, X24
	061 Move X2, X22
	062 Move W8, [X8+260]
	063 NotImplemented "Instruction NOP not yet implemented."
	064 NotImplemented "Instruction MADD not yet implemented."
	065 Add X1, X8, 32
	066 Call 0x3EB2AC0
	067 Move X8, [X19+56]
	068 Move X9, [X8+24]
	069 Move W10, [X9+40]
	070 Move X9, X24
	071 Move TEMP, X10
	072 And TEMP, TEMP, -2147483648
	073 Compare TEMP, -2147483648
	074 JumpIfEqual {76}
	075 Move X9, [X24]
	076 Move X1, [X8+32]
	077 Subtract X3, X29, 24
	078 Subtract X4, X29, 12
	079 Move X2, X20
	080 Move X0, [X1]
	081 Move [X29-24], X9
	082 Move X8, [X1+16]
	083 NotImplemented "Instruction BLR not yet implemented."
	084 NotImplemented "Instruction LDURB not yet implemented."
	085 Compare W8, 0
	086 JumpIfEqual {147}
	087 NotImplemented "Instruction LDUR not yet implemented."
	088 Compare X25, 0
	089 JumpIfEqual {183}
	090 Move W8, [X25+24]
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move X0, [X26]
	093 Move W9, W23
	094 ShiftRight W9, 31
	095 And W9, W9, 0x3FFFFFFF
	096 NotImplemented "Instruction CMP not yet implemented."
	097 NotImplemented "Instruction CSEL not yet implemented."
	098 Move W8, [X0+224]
	099 Compare W8, 0
	100 JumpIfNotEqual {102}
	101 Call 0x1C17DFC
	102 Move W1, [X21+24]
	103 Move W0, W25
	104 Move X2, X31
	105 Call Math.Min, X0, X1
	106 Move X8, [X19+56]
	107 Move W1, W0
	108 Subtract X0, X29, 32
	109 Move X2, [X8+40]
	110 Move X8, [X2]
	111 NotImplemented "Instruction BLR not yet implemented."
	112 NotImplemented "Instruction LDUR not yet implemented."
	113 Move W8, [X21+24]
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Move X8, [X21]
	116 Move X0, X24
	117 Move X2, X22
	118 Move W8, [X8+260]
	119 NotImplemented "Instruction NOP not yet implemented."
	120 NotImplemented "Instruction MADD not yet implemented."
	121 Add X1, X8, 32
	122 Call 0x3EB2AC0
	123 Compare X25, 0
	124 JumpIfEqual {183}
	125 Move W8, [X25+24]
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Move X8, [X25]
	128 Move X9, W23
	129 Move X1, X24
	130 Move X2, X22
	131 Move W8, [X8+260]
	132 NotImplemented "Instruction NOP not yet implemented."
	133 NotImplemented "Instruction MADD not yet implemented."
	134 Add X0, X8, 32
	135 Call 0x3EB2AC0
	136 Move X8, [X19+56]
	137 Move X0, [X8+24]
	138 Move W8, [X0+309]
	139 Move TEMP, X8
	140 And TEMP, TEMP, 1
	141 Compare TEMP, 1
	142 JumpIfEqual {144}
	143 Call 0x1C5D684
	144 Move W8, [X25+24]
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Add W23, W23, 1
	147 Move W8, [X21+24]
	148 Add X27, X27, 1
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Move X25, [X29-40]
	151 Move X0, [X29-32]
	152 Compare X0, 0
	153 JumpIfEqual {183}
	154 Move W8, [X0+24]
	155 NotImplemented "Instruction CMP not yet implemented."
	156 Move X8, [X19+56]
	157 Subtract X0, X29, 32
	158 Move W1, W23
	159 Move X2, [X8+40]
	160 Move X8, [X2]
	161 NotImplemented "Instruction BLR not yet implemented."
	162 NotImplemented "Instruction LDUR not yet implemented."
	163 Move X8, [X25+40]
	164 NotImplemented "Instruction LDUR not yet implemented."
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Add X31, X29, 0
	167 Move X20, [X31+80]
	168 Move X19, [X31+88]
	169 Move X22, [X31+64]
	170 Move X21, [X31+72]
	171 Move X24, [X31+48]
	172 Move X23, [X31+56]
	173 Move X26, [X31+32]
	174 Move X25, [X31+40]
	175 Move X28, [X31+16]
	176 Move X27, [X31+24]
	177 Move X29, [X31+96]
	178 Move X30, [X31+104]
	179 Return X0
	180 Move W23, W31
	181 Compare X0, 0
	182 JumpIfNotEqual {154}
	183 Call 0x1C17F20
	184 Call 0x1C17F28
	185 Move X0, 0x1E12000
	186 Move X0, [X0+1320]
	187 Call 0x1C17D08
	188 Call 0x1C17F10
	189 Move X20, X0
	190 Move X0, 0x1E35000
	191 Move X0, [X0+1600]
	192 Move X0, 0x1E12000
	193 Move X0, [X0+1320]
	194 Call 0x1C17D08
	195 Call 0x1C17F10
	196 Move X20, X0
	197 Move X0, 0x1E35000
	198 Move X0, [X0+1912]
	199 Call 0x1C17D08
	200 Move X1, X0
	201 Move X0, X20
	202 Move X2, X31
	203 Call ArgumentNullException..ctor, X0, X1
	204 Move X0, X20
	205 Move X1, X19
	206 Call 0x1C17DEC
	207 Call 0x3EB2B20

Method: System.Int32 FindIndex(T[] array, System.Predicate`1<T> match)

Disassembly:
	0x022E7638 ADD X29, X31, 0x0
	0x022E763C SUB X31, X31, 0x40
	0x022E7640 MRS X23, 0xC000
	0x022E7644 LDR X8, [X23 + 0x28]
	0x022E7648 MOV X19, X2
	0x022E764C MOV X22, X1
	0x022E7650 MOV X20, X0
	0x022E7654 STUR X8, [X29 - 0x8]
	0x022E7658 STUR X1, [X29 - 0x40]
	0x022E765C LDR X24, [X2 + 0x38]
	0x022E7660 CBNZ X24, 0x22E7670
	0x022E7664 MOV X0, X19
	0x022E7668 BL 0x1C5C6E0
	0x022E766C LDR X24, [X19 + 0x38]
	0x022E7670 LDR X8, [X24 + 0x8]
	0x022E7674 ADD X9, X31, 0x0
	0x022E7678 LDR W2, [X8 + 0xFC]
	0x022E767C ADD X10, X2, 0xF
	0x022E7680 AND X10, X10, 0x1FFFFFFFF
	0x022E7684 SUB X21, X9, X10
	0x022E7688 ADD X31, X21, 0x0
	0x022E768C CBZ X20, 0x22E7714
	0x022E7690 LDR W8, [X8 + 0x28]
	0x022E7694 MOV X0, X21
	0x022E7698 CMP W8, 0x0
	0x022E769C SUB X8, X29, 0x40
	0x022E76A0 CSEL X1, X22, X8, LT
	0x022E76A4 BL 0x3EB1AC0
	0x022E76A8 LDP X8, X1, [X24 + 0x8]
	0x022E76AC LDR W8, [X8 + 0x28]
	0x022E76B0 LDR X0, [X1]
	0x022E76B4 TBNZ X8, 0x1F, 0x22E76BC
	0x022E76B8 LDR X21, [X21]
	0x022E76BC LDR X8, [X20 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+56]
	006 Move X19, X2
	007 Move X20, X1
	008 Move X21, X0
	009 Compare X8, 0
	010 JumpIfNotEqual {13}
	011 Move X0, X19
	012 Call 0x1C5D6E0
	013 Compare X21, 0
	014 JumpIfEqual {27}
	015 Move X8, [X19+56]
	016 Move W2, [X21+24]
	017 Move X3, X20
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X4, [X8+16]
	021 Move X0, X21
	022 Move W1, W31
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call 0x22E77E8, X0, X1, X2, X3
	026 Return X0
	027 Move X0, 0x1E12000
	028 Move X0, [X0+1320]
	029 Call 0x1C17D08
	030 Call 0x1C17F10
	031 Move X20, X0
	032 Move X0, 0x1E35000
	033 Move X0, [X0+1600]
	034 Call 0x1C17D08
	035 Move X1, X0
	036 Move X0, X20
	037 Move X2, X31
	038 Call ArgumentNullException..ctor, X0, X1
	039 Move X0, X20
	040 Move X1, X19
	041 Call 0x1C17DEC

Method: System.Int32 FindIndex(T[] array, System.Int32 startIndex, System.Predicate`1<T> match)

Disassembly:
	0x022E774C BL 0x1C16DEC
	0x022E7750 BL 0x3EB1B20
	0x022E7754 STR X30, [X31 - 0x30]!
	0x022E7758 STP X22, X21, [X31 + 0x10]
	0x022E775C STP X20, X19, [X31 + 0x20]
	0x022E7760 LDR X8, [X3 + 0x38]
	0x022E7764 MOV X19, X3
	0x022E7768 MOV W20, W2
	0x022E776C MOV X21, X1
	0x022E7770 MOV X22, X0
	0x022E7774 CBNZ X8, 0x22E7780
	0x022E7778 MOV X0, X19
	0x022E777C BL 0x1C5C6E0
	0x022E7780 CBZ X22, 0x22E77B0
	0x022E7784 LDR X8, [X19 + 0x38]
	0x022E7788 LDR W9, [X22 + 0x18]
	0x022E778C MOV X0, X22
	0x022E7790 MOV X1, X21
	0x022E7794 LDR X4, [X8 + 0x10]
	0x022E7798 SUB W3, W9, W20
	0x022E779C MOV W2, W20
	0x022E77A0 LDP X20, X19, [X31 + 0x20]
	0x022E77A4 LDP X22, X21, [X31 + 0x10]
	0x022E77A8 LDR X30, [X31], #0x30
	0x022E77AC B 0x22EEBA4
	0x022E77B0 ADRP X0, 0x1E11000
	0x022E77B4 LDR X0, [X0 + 0x528]
	0x022E77B8 BL 0x1C16D08
	0x022E77BC BL 0x1C16F10
	0x022E77C0 MOV X20, X0
	0x022E77C4 ADRP X0, 0x1E34000
	0x022E77C8 LDR X0, [X0 + 0x640]
	0x022E77CC BL 0x1C16D08
	0x022E77D0 MOV X1, X0
	0x022E77D4 MOV X0, X20
	0x022E77D8 MOV X2, X31
	0x022E77DC BL 0x330E100
	0x022E77E0 MOV X0, X20
	0x022E77E4 MOV X1, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X3+56]
	007 Move X19, X3
	008 Move X20, X2
	009 Move W21, W1
	010 Move X22, X0
	011 Compare X8, 0
	012 JumpIfNotEqual {15}
	013 Move X0, X19
	014 Call 0x1C5D6E0
	015 Compare X22, 0
	016 JumpIfEqual {31}
	017 Move X8, [X19+56]
	018 Move X0, X22
	019 Move W1, W21
	020 Move X3, X20
	021 Move X4, [X8+16]
	022 Move W8, [X22+24]
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X5, [X4]
	026 Subtract W2, W8, W21
	027 Move X22, [X31+16]
	028 Move X21, [X31+24]
	029 Move X30, [X31+48]
	030 CallNoReturn X5
	031 Move X0, 0x1E12000
	032 Move X0, [X0+1320]
	033 Call 0x1C17D08
	034 Call 0x1C17F10
	035 Move X20, X0
	036 Move X0, 0x1E35000
	037 Move X0, [X0+1600]
	038 Call 0x1C17D08
	039 Move X1, X0
	040 Move X0, X20
	041 Move X2, X31
	042 Call ArgumentNullException..ctor, X0, X1
	043 Move X0, X20
	044 Move X1, X19
	045 Call 0x1C17DEC

Method: System.Int32 FindIndex(T[] array, System.Int32 startIndex, System.Int32 count, System.Predicate`1<T> match)

Disassembly:
	0x022E77E8 BL 0x1C16DEC
	0x022E77EC STP X29, X30, [X31 - 0x50]!
	0x022E77F0 STR X25, [X31 + 0x10]
	0x022E77F4 STP X24, X23, [X31 + 0x20]
	0x022E77F8 STP X22, X21, [X31 + 0x30]
	0x022E77FC STP X20, X19, [X31 + 0x40]
	0x022E7800 ADD X29, X31, 0x0
	0x022E7804 SUB X31, X31, 0x40
	0x022E7808 MRS X24, 0xC000
	0x022E780C LDR X8, [X24 + 0x28]
	0x022E7810 MOV X20, X3
	0x022E7814 MOV W19, W2
	0x022E7818 MOV X22, X1
	0x022E781C STUR X8, [X29 - 0x8]
	0x022E7820 STUR X1, [X29 - 0x40]
	0x022E7824 LDR X25, [X3 + 0x38]
	0x022E7828 MOV X21, X0
	0x022E782C CBNZ X25, 0x22E783C
	0x022E7830 MOV X0, X20
	0x022E7834 BL 0x1C5C6E0
	0x022E7838 LDR X25, [X20 + 0x38]
	0x022E783C LDR X8, [X25 + 0x8]
	0x022E7840 ADD X9, X31, 0x0
	0x022E7844 LDR W2, [X8 + 0xFC]
	0x022E7848 ADD X10, X2, 0xF
	0x022E784C AND X10, X10, 0x1FFFFFFFF
	0x022E7850 SUB X23, X9, X10
	0x022E7854 ADD X31, X23, 0x0
	0x022E7858 CBZ X21, 0x22E78E8
	0x022E785C LDR W8, [X8 + 0x28]
	0x022E7860 MOV X0, X23
	0x022E7864 CMP W8, 0x0
	0x022E7868 SUB X8, X29, 0x40
	0x022E786C CSEL X1, X22, X8, LT
	0x022E7870 BL 0x3EB1AC0
	0x022E7874 LDP X8, X1, [X25 + 0x8]
	0x022E7878 LDR W8, [X8 + 0x28]
	0x022E787C LDR X0, [X1]
	0x022E7880 TBNZ X8, 0x1F, 0x22E7888
	0x022E7884 LDR X23, [X23]
	0x022E7888 LDR W8, [X21 + 0x18]
	0x022E788C SUB X9, X29, 0xC
	0x022E7890 SUB X10, X29, 0x10
	0x022E7894 STP X21, X23, [X29 - 0x38]
	0x022E7898 SUB W8, W8, W19
	0x022E789C STP W8, W19, [X29 - 0x10]
	0x022E78A0 STP X9, X10, [X29 - 0x28]
	0x022E78A4 LDR X8, [X1 + 0x10]
	0x022E78A8 SUB X3, X29, 0x38
	0x022E78AC SUB X4, X29, 0x14
	0x022E78B0 MOV X2, X31
	0x022E78B4 BLR X8
	0x022E78B8 LDUR W0, [X29 - 0x14]
	0x022E78BC LDR X8, [X24 + 0x28]
	0x022E78C0 LDUR X9, [X29 - 0x8]
	0x022E78C4 CMP X8, X9
	0x022E78C8 B.NE 0x22E7924
	0x022E78CC ADD X31, X29, 0x0
	0x022E78D0 LDP X20, X19, [X31 + 0x40]
	0x022E78D4 LDP X22, X21, [X31 + 0x30]
	0x022E78D8 LDP X24, X23, [X31 + 0x20]
	0x022E78DC LDR X25, [X31 + 0x10]
	0x022E78E0 LDP X29, X30, [X31], #0x50
	0x022E78E4 RET
	0x022E78E8 ADRP X0, 0x1E11000
	0x022E78EC LDR X0, [X0 + 0x528]
	0x022E78F0 BL 0x1C16D08
	0x022E78F4 BL 0x1C16F10
	0x022E78F8 MOV X19, X0
	0x022E78FC ADRP X0, 0x1E34000
	0x022E7900 LDR X0, [X0 + 0x640]
	0x022E7904 BL 0x1C16D08
	0x022E7908 MOV X1, X0
	0x022E790C MOV X0, X19
	0x022E7910 MOV X2, X31
	0x022E7914 BL 0x330E100
	0x022E7918 MOV X0, X19
	0x022E791C MOV X1, X20
	0x022E7920 BL 0x1C16DEC
	0x022E7924 BL 0x3EB1B20
	0x022E7928 STP X30, X23, [X31 - 0x30]!
	0x022E792C STP X22, X21, [X31 + 0x10]
	0x022E7930 STP X20, X19, [X31 + 0x20]
	0x022E7934 LDR X8, [X4 + 0x38]
	0x022E7938 MOV X19, X4
	0x022E793C MOV W20, W3
	0x022E7940 MOV W21, W2
	0x022E7944 MOV X22, X1
	0x022E7948 MOV X23, X0
	0x022E794C CBNZ X8, 0x22E7958
	0x022E7950 MOV X0, X19
	0x022E7954 BL 0x1C5C6E0
	0x022E7958 CBZ X23, 0x22E79D0
	0x022E795C TBNZ X21, 0x1F, 0x22E79A0
	0x022E7960 LDR W8, [X23 + 0x18]
	0x022E7964 SUBS W8, W8, W21
	0x022E7968 B.LT 0x22E79A0
	0x022E796C TBNZ X20, 0x1F, 0x22E7A04
	0x022E7970 CMP W8, W20
	0x022E7974 B.LT 0x22E7A04
	0x022E7978 LDR X8, [X19 + 0x38]
	0x022E797C MOV X1, X22
	0x022E7980 MOV W2, W21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X4+56]
	008 Move X19, X4
	009 Move X20, X3
	010 Move W23, W2
	011 Move W22, W1
	012 Move X21, X0
	013 Compare X8, 0
	014 JumpIfNotEqual {17}
	015 Move X0, X19
	016 Call 0x1C5D6E0
	017 Compare X21, 0
	018 JumpIfEqual {76}
	019 Move TEMP, X22
	020 And TEMP, TEMP, -2147483648
	021 Compare TEMP, -2147483648
	022 JumpIfEqual {65}
	023 Move X8, [X21+24]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move TEMP, X23
	026 And TEMP, TEMP, -2147483648
	027 Compare TEMP, -2147483648
	028 JumpIfEqual {83}
	029 Subtract W9, W8, W23
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Compare X20, 0
	032 JumpIfEqual {100}
	033 Add W9, W23, W22
	034 NotImplemented "Instruction CMP not yet implemented."
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X8, W9
	037 Move W19, W22
	038 Subtract X22, X8, 1
	039 Add X23, X21, 32
	040 Move X1, [X23]
	041 Move X8, [X20+24]
	042 Move X0, [X20+64]
	043 Move X2, [X20+40]
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {57}
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move W8, [X21+24]
	051 Add X19, X19, 1
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Call 0x1C17F28
	054 Move TEMP, 0
	055 Not TEMP
	056 Move W19, TEMP
	057 Move W0, W19
	058 Move X20, [X31+32]
	059 Move X19, [X31+40]
	060 Move X22, [X31+16]
	061 Move X21, [X31+24]
	062 Move X30, [X31+48]
	063 Move X23, [X31+56]
	064 Return X0
	065 Move X0, 0x1E15000
	066 Move X0, [X0+1888]
	067 Call 0x1C17D08
	068 Call 0x1C17F10
	069 Move X20, X0
	070 Move X0, 0x1E35000
	071 Move X0, [X0+1624]
	072 Call 0x1C17D08
	073 Move X21, X0
	074 Move X0, 0x1E35000
	075 Move X0, [X0+1632]
	076 Move X0, 0x1E12000
	077 Move X0, [X0+1320]
	078 Call 0x1C17D08
	079 Call 0x1C17F10
	080 Move X20, X0
	081 Move X0, 0x1E35000
	082 Move X0, [X0+1600]
	083 Move X0, 0x1E15000
	084 Move X0, [X0+1888]
	085 Call 0x1C17D08
	086 Call 0x1C17F10
	087 Move X20, X0
	088 Move X0, 0x1E35000
	089 Move X0, [X0+1608]
	090 Call 0x1C17D08
	091 Move X21, X0
	092 Move X0, 0x1E35000
	093 Move X0, [X0+1616]
	094 Call 0x1C17D08
	095 Move X2, X0
	096 Move X0, X20
	097 Move X1, X21
	098 Move X3, X31
	099 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	100 Move X0, 0x1E12000
	101 Move X0, [X0+1320]
	102 Call 0x1C17D08
	103 Call 0x1C17F10
	104 Move X20, X0
	105 Move X0, 0x1E35000
	106 Move X0, [X0+1912]
	107 Call 0x1C17D08
	108 Move X1, X0
	109 Move X0, X20
	110 Move X2, X31
	111 Call ArgumentNullException..ctor, X0, X1
	112 Move X0, X20
	113 Move X1, X19
	114 Call 0x1C17DEC

Method: T FindLast(T[] array, System.Predicate`1<T> match)

Disassembly:
	0x022E7BC0 LDR W8, [X24 + 0x18]
	0x022E7BC4 SUBS W8, W8, W21
	0x022E7BC8 B.LT 0x22E7C08
	0x022E7BCC TBNZ X20, 0x1F, 0x22E7C6C
	0x022E7BD0 CMP W8, W20
	0x022E7BD4 B.LT 0x22E7C6C
	0x022E7BD8 LDR X8, [X19 + 0x38]
	0x022E7BDC MOV X0, X24
	0x022E7BE0 MOV X1, X23
	0x022E7BE4 MOV X2, X22
	0x022E7BE8 LDR X5, [X8 + 0x10]
	0x022E7BEC MOV W3, W21
	0x022E7BF0 MOV W4, W20
	0x022E7BF4 LDP X20, X19, [X31 + 0x30]
	0x022E7BF8 LDP X22, X21, [X31 + 0x20]
	0x022E7BFC LDP X24, X23, [X31 + 0x10]
	0x022E7C00 LDR X30, [X31], #0x40
	0x022E7C04 B 0x22F80C8
	0x022E7C08 ADRP X0, 0x1E14000
	0x022E7C0C LDR X0, [X0 + 0x760]
	0x022E7C10 BL 0x1C16D08
	0x022E7C14 BL 0x1C16F10
	0x022E7C18 MOV X20, X0
	0x022E7C1C ADRP X0, 0x1E34000
	0x022E7C20 LDR X0, [X0 + 0x658]
	0x022E7C24 BL 0x1C16D08
	0x022E7C28 MOV X21, X0
	0x022E7C2C ADRP X0, 0x1E34000
	0x022E7C30 LDR X0, [X0 + 0x660]
	0x022E7C34 B 0x22E7C98
	0x022E7C38 ADRP X0, 0x1E11000
	0x022E7C3C LDR X0, [X0 + 0x528]
	0x022E7C40 BL 0x1C16D08
	0x022E7C44 BL 0x1C16F10
	0x022E7C48 MOV X20, X0
	0x022E7C4C ADRP X0, 0x1E34000
	0x022E7C50 LDR X0, [X0 + 0x640]
	0x022E7C54 BL 0x1C16D08
	0x022E7C58 MOV X1, X0
	0x022E7C5C MOV X0, X20
	0x022E7C60 MOV X2, X31
	0x022E7C64 BL 0x330E100
	0x022E7C68 B 0x22E7CB0
	0x022E7C6C ADRP X0, 0x1E14000
	0x022E7C70 LDR X0, [X0 + 0x760]
	0x022E7C74 BL 0x1C16D08
	0x022E7C78 BL 0x1C16F10
	0x022E7C7C MOV X20, X0
	0x022E7C80 ADRP X0, 0x1E34000
	0x022E7C84 LDR X0, [X0 + 0x648]
	0x022E7C88 BL 0x1C16D08
	0x022E7C8C MOV X21, X0
	0x022E7C90 ADRP X0, 0x1E34000
	0x022E7C94 LDR X0, [X0 + 0x650]
	0x022E7C98 BL 0x1C16D08
	0x022E7C9C MOV X2, X0
	0x022E7CA0 MOV X0, X20
	0x022E7CA4 MOV X1, X21
	0x022E7CA8 MOV X3, X31
	0x022E7CAC BL 0x3311888
	0x022E7CB0 MOV X0, X20
	0x022E7CB4 MOV X1, X19
	0x022E7CB8 BL 0x1C16DEC
	0x022E7CBC STR X30, [X31 - 0x40]!
	0x022E7CC0 STP X24, X23, [X31 + 0x10]
	0x022E7CC4 STP X22, X21, [X31 + 0x20]
	0x022E7CC8 STP X20, X19, [X31 + 0x30]
	0x022E7CCC LDR X8, [X5 + 0x38]
	0x022E7CD0 MOV X19, X5
	0x022E7CD4 MOV W20, W4
	0x022E7CD8 MOV W21, W3
	0x022E7CDC MOV X22, X2
	0x022E7CE0 MOV X23, X1
	0x022E7CE4 MOV X24, X0
	0x022E7CE8 CBNZ X8, 0x22E7CF4
	0x022E7CEC MOV X0, X19
	0x022E7CF0 BL 0x1C5C6E0
	0x022E7CF4 CBZ X24, 0x22E7D74
	0x022E7CF8 TBNZ X21, 0x1F, 0x22E7D44
	0x022E7CFC LDR W8, [X24 + 0x18]
	0x022E7D00 SUBS W8, W8, W21
	0x022E7D04 B.LT 0x22E7D44
	0x022E7D08 TBNZ X20, 0x1F, 0x22E7DA8
	0x022E7D0C CMP W8, W20
	0x022E7D10 B.LT 0x22E7DA8
	0x022E7D14 LDR X8, [X19 + 0x38]
	0x022E7D18 MOV X0, X24
	0x022E7D1C MOV X1, X23
	0x022E7D20 MOV X2, X22
	0x022E7D24 LDR X5, [X8 + 0x10]
	0x022E7D28 MOV W3, W21
	0x022E7D2C MOV W4, W20
	0x022E7D30 LDP X20, X19, [X31 + 0x30]
	0x022E7D34 LDP X22, X21, [X31 + 0x20]
	0x022E7D38 LDP X24, X23, [X31 + 0x10]
	0x022E7D3C LDR X30, [X31], #0x40
	0x022E7D40 B 0x22F8144
	0x022E7D44 ADRP X0, 0x1E14000
	0x022E7D48 LDR X0, [X0 + 0x760]
	0x022E7D4C BL 0x1C16D08
	0x022E7D50 BL 0x1C16F10
	0x022E7D54 MOV X20, X0
	0x022E7D58 ADRP X0, 0x1E34000
	0x022E7D5C LDR X0, [X0 + 0x658]
	0x022E7D60 BL 0x1C16D08
	0x022E7D64 MOV X21, X0
	0x022E7D68 ADRP X0, 0x1E34000
	0x022E7D6C LDR X0, [X0 + 0x660]
	0x022E7D70 B 0x22E7DD4
	0x022E7D74 ADRP X0, 0x1E11000
	0x022E7D78 LDR X0, [X0 + 0x528]
	0x022E7D7C BL 0x1C16D08
	0x022E7D80 BL 0x1C16F10
	0x022E7D84 MOV X20, X0
	0x022E7D88 ADRP X0, 0x1E34000
	0x022E7D8C LDR X0, [X0 + 0x640]
	0x022E7D90 BL 0x1C16D08
	0x022E7D94 MOV X1, X0
	0x022E7D98 MOV X0, X20
	0x022E7D9C MOV X2, X31
	0x022E7DA0 BL 0x330E100
	0x022E7DA4 B 0x22E7DEC
	0x022E7DA8 ADRP X0, 0x1E14000
	0x022E7DAC LDR X0, [X0 + 0x760]
	0x022E7DB0 BL 0x1C16D08
	0x022E7DB4 BL 0x1C16F10

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Add X29, X31, 0
	014 Subtract X31, X31, 32
	015 NotImplemented "Instruction MRS not yet implemented."
	016 Move X8, [X26+40]
	017 Move X19, X3
	018 Move X20, X2
	019 Move X24, X1
	020 Move [X29-8], X8
	021 Move X8, [X3+56]
	022 Move X23, X0
	023 Compare X8, 0
	024 JumpIfNotEqual {28}
	025 Move X0, X19
	026 Call 0x1C5D6E0
	027 Move X8, [X19+56]
	028 Move X8, [X8+16]
	029 Move W21, [X8+252]
	030 Add X8, X31, 0
	031 Add X9, X21, 15
	032 And X9, X9, 0x1FFFFFFFF
	033 Subtract X22, X8, X9
	034 Add X31, X22, 0
	035 Add X8, X31, 0
	036 Subtract X25, X8, X9
	037 Add X31, X25, 0
	038 Move X0, X25
	039 Move W1, W31
	040 Move X2, X21
	041 Call 0x3EB2B10
	042 Compare X23, 0
	043 JumpIfEqual {117}
	044 Compare X24, 0
	045 JumpIfEqual {124}
	046 Move W27, [X23+24]
	047 Subtract W27, W27, 1
	048 Move W8, [X23+24]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X8, [X23]
	051 Move W28, W27
	052 Move X0, X22
	053 Move X2, X21
	054 Move W8, [X8+260]
	055 NotImplemented "Instruction NOP not yet implemented."
	056 NotImplemented "Instruction MADD not yet implemented."
	057 Add X1, X8, 32
	058 Call 0x3EB2AC0
	059 Move X8, [X19+56]
	060 Move X9, [X8+16]
	061 Move W10, [X9+40]
	062 Move X9, X22
	063 Move TEMP, X10
	064 And TEMP, TEMP, -2147483648
	065 Compare TEMP, -2147483648
	066 JumpIfEqual {68}
	067 Move X9, [X22]
	068 Move X1, [X8+24]
	069 Subtract X3, X29, 24
	070 Subtract X4, X29, 12
	071 Move X2, X24
	072 Move X0, [X1]
	073 Move [X29-24], X9
	074 Move X8, [X1+16]
	075 NotImplemented "Instruction BLR not yet implemented."
	076 NotImplemented "Instruction LDURB not yet implemented."
	077 Compare W8, 0
	078 JumpIfEqual {47}
	079 Move W8, [X23+24]
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move X8, [X23]
	082 Move X0, X22
	083 Move W8, [X8+260]
	084 NotImplemented "Instruction NOP not yet implemented."
	085 NotImplemented "Instruction MADD not yet implemented."
	086 Add X1, X8, 32
	087 Move X0, X25
	088 Move W1, W31
	089 Move X2, X21
	090 Call 0x3EB2B10
	091 Move X0, X22
	092 Move X1, X25
	093 Move X2, X21
	094 Call 0x3EB2AC0
	095 Move X0, X20
	096 Move X1, X22
	097 Move X2, X21
	098 Call 0x3EB2AC0
	099 Move X8, [X26+40]
	100 NotImplemented "Instruction LDUR not yet implemented."
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Add X31, X29, 0
	103 Move X20, [X31+80]
	104 Move X19, [X31+88]
	105 Move X22, [X31+64]
	106 Move X21, [X31+72]
	107 Move X24, [X31+48]
	108 Move X23, [X31+56]
	109 Move X26, [X31+32]
	110 Move X25, [X31+40]
	111 Move X28, [X31+16]
	112 Move X27, [X31+24]
	113 Move X29, [X31+96]
	114 Move X30, [X31+104]
	115 Return X0
	116 Call 0x1C17F28
	117 Move X0, 0x1E12000
	118 Move X0, [X0+1320]
	119 Call 0x1C17D08
	120 Call 0x1C17F10
	121 Move X20, X0
	122 Move X0, 0x1E35000
	123 Move X0, [X0+1600]
	124 Move X0, 0x1E12000
	125 Move X0, [X0+1320]
	126 Call 0x1C17D08
	127 Call 0x1C17F10
	128 Move X20, X0
	129 Move X0, 0x1E35000
	130 Move X0, [X0+1912]
	131 Call 0x1C17D08
	132 Move X1, X0
	133 Move X0, X20
	134 Move X2, X31
	135 Call ArgumentNullException..ctor, X0, X1
	136 Move X0, X20
	137 Move X1, X19
	138 Call 0x1C17DEC
	139 Call 0x3EB2B20

Method: System.Int32 FindLastIndex(T[] array, System.Predicate`1<T> match)

Disassembly:
	0x022E7DB8 MOV X20, X0
	0x022E7DBC ADRP X0, 0x1E34000
	0x022E7DC0 LDR X0, [X0 + 0x648]
	0x022E7DC4 BL 0x1C16D08
	0x022E7DC8 MOV X21, X0
	0x022E7DCC ADRP X0, 0x1E34000
	0x022E7DD0 LDR X0, [X0 + 0x650]
	0x022E7DD4 BL 0x1C16D08
	0x022E7DD8 MOV X2, X0
	0x022E7DDC MOV X0, X20
	0x022E7DE0 MOV X1, X21
	0x022E7DE4 MOV X3, X31
	0x022E7DE8 BL 0x3311888
	0x022E7DEC MOV X0, X20
	0x022E7DF0 MOV X1, X19
	0x022E7DF4 BL 0x1C16DEC
	0x022E7DF8 STP X30, X23, [X31 - 0x30]!
	0x022E7DFC STP X22, X21, [X31 + 0x10]
	0x022E7E00 STP X20, X19, [X31 + 0x20]
	0x022E7E04 LDR X8, [X4 + 0x38]
	0x022E7E08 MOV X19, X4
	0x022E7E0C MOV W20, W3
	0x022E7E10 MOV W21, W2
	0x022E7E14 MOV X22, X1
	0x022E7E18 MOV X23, X0
	0x022E7E1C CBNZ X8, 0x22E7E28
	0x022E7E20 MOV X0, X19
	0x022E7E24 BL 0x1C5C6E0
	0x022E7E28 CBZ X23, 0x22E7EA0
	0x022E7E2C TBNZ X21, 0x1F, 0x22E7E70
	0x022E7E30 LDR W8, [X23 + 0x18]
	0x022E7E34 SUBS W8, W8, W21
	0x022E7E38 B.LT 0x22E7E70
	0x022E7E3C TBNZ X20, 0x1F, 0x22E7ED4
	0x022E7E40 CMP W8, W20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+56]
	006 Move X19, X2
	007 Move X20, X1
	008 Move X21, X0
	009 Compare X8, 0
	010 JumpIfNotEqual {13}
	011 Move X0, X19
	012 Call 0x1C5D6E0
	013 Compare X21, 0
	014 JumpIfEqual {27}
	015 Move X8, [X19+56]
	016 Move W2, [X21+24]
	017 Move X3, X20
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X4, [X8+16]
	021 Subtract W1, W2, 1
	022 Move X0, X21
	023 Move X5, [X4]
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 CallNoReturn X5
	027 Move X0, 0x1E12000
	028 Move X0, [X0+1320]
	029 Call 0x1C17D08
	030 Call 0x1C17F10
	031 Move X20, X0
	032 Move X0, 0x1E35000
	033 Move X0, [X0+1600]
	034 Call 0x1C17D08
	035 Move X1, X0
	036 Move X0, X20
	037 Move X2, X31
	038 Call ArgumentNullException..ctor, X0, X1
	039 Move X0, X20
	040 Move X1, X19
	041 Call 0x1C17DEC

Method: System.Int32 FindLastIndex(T[] array, System.Int32 startIndex, System.Predicate`1<T> match)

Disassembly:
	0x022E7E44 B.LT 0x22E7ED4
	0x022E7E48 LDR X8, [X19 + 0x38]
	0x022E7E4C MOV X1, X22
	0x022E7E50 MOV W2, W21
	0x022E7E54 MOV W3, W20
	0x022E7E58 LDR X4, [X8 + 0x10]
	0x022E7E5C LDP X20, X19, [X31 + 0x20]
	0x022E7E60 LDP X22, X21, [X31 + 0x10]
	0x022E7E64 MOV X0, X23
	0x022E7E68 LDP X30, X23, [X31], #0x30
	0x022E7E6C B 0x22F81C0
	0x022E7E70 ADRP X0, 0x1E14000
	0x022E7E74 LDR X0, [X0 + 0x760]
	0x022E7E78 BL 0x1C16D08
	0x022E7E7C BL 0x1C16F10
	0x022E7E80 MOV X20, X0
	0x022E7E84 ADRP X0, 0x1E34000
	0x022E7E88 LDR X0, [X0 + 0x658]
	0x022E7E8C BL 0x1C16D08
	0x022E7E90 MOV X21, X0
	0x022E7E94 ADRP X0, 0x1E34000
	0x022E7E98 LDR X0, [X0 + 0x660]
	0x022E7E9C B 0x22E7F00
	0x022E7EA0 ADRP X0, 0x1E11000
	0x022E7EA4 LDR X0, [X0 + 0x528]
	0x022E7EA8 BL 0x1C16D08
	0x022E7EAC BL 0x1C16F10
	0x022E7EB0 MOV X20, X0
	0x022E7EB4 ADRP X0, 0x1E34000
	0x022E7EB8 LDR X0, [X0 + 0x640]
	0x022E7EBC BL 0x1C16D08
	0x022E7EC0 MOV X1, X0
	0x022E7EC4 MOV X0, X20
	0x022E7EC8 MOV X2, X31
	0x022E7ECC BL 0x330E100
	0x022E7ED0 B 0x22E7F18
	0x022E7ED4 ADRP X0, 0x1E14000
	0x022E7ED8 LDR X0, [X0 + 0x760]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X3+56]
	007 Move X19, X3
	008 Move X20, X2
	009 Move W21, W1
	010 Move X22, X0
	011 Compare X8, 0
	012 JumpIfNotEqual {15}
	013 Move X0, X19
	014 Call 0x1C5D6E0
	015 Compare X22, 0
	016 JumpIfEqual {30}
	017 Move X8, [X19+56]
	018 Add W2, W21, 1
	019 Move X0, X22
	020 Move W1, W21
	021 Move X4, [X8+16]
	022 Move X3, X20
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X22, [X31+16]
	026 Move X21, [X31+24]
	027 Move X5, [X4]
	028 Move X30, [X31+48]
	029 CallNoReturn X5
	030 Move X0, 0x1E12000
	031 Move X0, [X0+1320]
	032 Call 0x1C17D08
	033 Call 0x1C17F10
	034 Move X20, X0
	035 Move X0, 0x1E35000
	036 Move X0, [X0+1600]
	037 Call 0x1C17D08
	038 Move X1, X0
	039 Move X0, X20
	040 Move X2, X31
	041 Call ArgumentNullException..ctor, X0, X1
	042 Move X0, X20
	043 Move X1, X19
	044 Call 0x1C17DEC

Method: System.Int32 FindLastIndex(T[] array, System.Int32 startIndex, System.Int32 count, System.Predicate`1<T> match)

Disassembly:
	0x022E7EDC BL 0x1C16D08
	0x022E7EE0 BL 0x1C16F10
	0x022E7EE4 MOV X20, X0
	0x022E7EE8 ADRP X0, 0x1E34000
	0x022E7EEC LDR X0, [X0 + 0x648]
	0x022E7EF0 BL 0x1C16D08
	0x022E7EF4 MOV X21, X0
	0x022E7EF8 ADRP X0, 0x1E34000
	0x022E7EFC LDR X0, [X0 + 0x650]
	0x022E7F00 BL 0x1C16D08
	0x022E7F04 MOV X2, X0
	0x022E7F08 MOV X0, X20
	0x022E7F0C MOV X1, X21
	0x022E7F10 MOV X3, X31
	0x022E7F14 BL 0x3311888
	0x022E7F18 MOV X0, X20
	0x022E7F1C MOV X1, X19
	0x022E7F20 BL 0x1C16DEC
	0x022E7F24 STR X30, [X31 - 0x40]!
	0x022E7F28 STP X24, X23, [X31 + 0x10]
	0x022E7F2C STP X22, X21, [X31 + 0x20]
	0x022E7F30 STP X20, X19, [X31 + 0x30]
	0x022E7F34 LDR X8, [X5 + 0x38]
	0x022E7F38 MOV X19, X5
	0x022E7F3C MOV W20, W4
	0x022E7F40 MOV W21, W3
	0x022E7F44 MOV X22, X2
	0x022E7F48 MOV X23, X1
	0x022E7F4C MOV X24, X0
	0x022E7F50 CBNZ X8, 0x22E7F5C
	0x022E7F54 MOV X0, X19
	0x022E7F58 BL 0x1C5C6E0
	0x022E7F5C CBZ X24, 0x22E7FDC
	0x022E7F60 TBNZ X21, 0x1F, 0x22E7FAC
	0x022E7F64 LDR W8, [X24 + 0x18]
	0x022E7F68 SUBS W8, W8, W21
	0x022E7F6C B.LT 0x22E7FAC
	0x022E7F70 TBNZ X20, 0x1F, 0x22E8010
	0x022E7F74 CMP W8, W20
	0x022E7F78 B.LT 0x22E8010
	0x022E7F7C LDR X8, [X19 + 0x38]
	0x022E7F80 MOV X0, X24
	0x022E7F84 MOV X1, X23
	0x022E7F88 MOV X2, X22
	0x022E7F8C LDR X5, [X8 + 0x10]
	0x022E7F90 MOV W3, W21
	0x022E7F94 MOV W4, W20
	0x022E7F98 LDP X20, X19, [X31 + 0x30]
	0x022E7F9C LDP X22, X21, [X31 + 0x20]
	0x022E7FA0 LDP X24, X23, [X31 + 0x10]
	0x022E7FA4 LDR X30, [X31], #0x40
	0x022E7FA8 B 0x22F822C
	0x022E7FAC ADRP X0, 0x1E14000
	0x022E7FB0 LDR X0, [X0 + 0x760]
	0x022E7FB4 BL 0x1C16D08
	0x022E7FB8 BL 0x1C16F10
	0x022E7FBC MOV X20, X0
	0x022E7FC0 ADRP X0, 0x1E34000
	0x022E7FC4 LDR X0, [X0 + 0x658]
	0x022E7FC8 BL 0x1C16D08
	0x022E7FCC MOV X21, X0
	0x022E7FD0 ADRP X0, 0x1E34000
	0x022E7FD4 LDR X0, [X0 + 0x660]
	0x022E7FD8 B 0x22E803C
	0x022E7FDC ADRP X0, 0x1E11000
	0x022E7FE0 LDR X0, [X0 + 0x528]
	0x022E7FE4 BL 0x1C16D08
	0x022E7FE8 BL 0x1C16F10
	0x022E7FEC MOV X20, X0
	0x022E7FF0 ADRP X0, 0x1E34000
	0x022E7FF4 LDR X0, [X0 + 0x640]
	0x022E7FF8 BL 0x1C16D08
	0x022E7FFC MOV X1, X0
	0x022E8000 MOV X0, X20
	0x022E8004 MOV X2, X31
	0x022E8008 BL 0x330E100
	0x022E800C B 0x22E8054
	0x022E8010 ADRP X0, 0x1E13000
	0x022E8014 LDR X0, [X0 + 0x760]
	0x022E8018 BL 0x1C16D08
	0x022E801C BL 0x1C16F10
	0x022E8020 MOV X20, X0
	0x022E8024 ADRP X0, 0x1E33000
	0x022E8028 LDR X0, [X0 + 0x648]
	0x022E802C BL 0x1C16D08
	0x022E8030 MOV X21, X0
	0x022E8034 ADRP X0, 0x1E33000
	0x022E8038 LDR X0, [X0 + 0x650]
	0x022E803C BL 0x1C16D08
	0x022E8040 MOV X2, X0
	0x022E8044 MOV X0, X20
	0x022E8048 MOV X1, X21
	0x022E804C MOV X3, X31
	0x022E8050 BL 0x3311888
	0x022E8054 MOV X0, X20
	0x022E8058 MOV X1, X19
	0x022E805C BL 0x1C16DEC
	0x022E8060 STR X30, [X31 - 0x40]!
	0x022E8064 STP X24, X23, [X31 + 0x10]
	0x022E8068 STP X22, X21, [X31 + 0x20]
	0x022E806C STP X20, X19, [X31 + 0x30]
	0x022E8070 LDR X8, [X5 + 0x38]
	0x022E8074 MOV X19, X5
	0x022E8078 MOV W20, W4
	0x022E807C MOV W21, W3
	0x022E8080 MOV X22, X2
	0x022E8084 MOV X23, X1
	0x022E8088 MOV X24, X0
	0x022E808C CBNZ X8, 0x22E8098
	0x022E8090 MOV X0, X19
	0x022E8094 BL 0x1C5C6E0
	0x022E8098 CBZ X24, 0x22E8118
	0x022E809C TBNZ X21, 0x1F, 0x22E80E8
	0x022E80A0 LDR W8, [X24 + 0x18]
	0x022E80A4 SUBS W8, W8, W21
	0x022E80A8 B.LT 0x22E80E8
	0x022E80AC TBNZ X20, 0x1F, 0x22E814C
	0x022E80B0 CMP W8, W20
	0x022E80B4 B.LT 0x22E814C
	0x022E80B8 LDR X8, [X19 + 0x38]
	0x022E80BC MOV X0, X24
	0x022E80C0 MOV X1, X23
	0x022E80C4 MOV X2, X22
	0x022E80C8 LDR X5, [X8 + 0x10]
	0x022E80CC MOV W3, W21
	0x022E80D0 MOV W4, W20
	0x022E80D4 LDP X20, X19, [X31 + 0x30]
	0x022E80D8 LDP X22, X21, [X31 + 0x20]
	0x022E80DC LDP X24, X23, [X31 + 0x10]
	0x022E80E0 LDR X30, [X31], #0x40
	0x022E80E4 B 0x22F82A8
	0x022E80E8 ADRP X0, 0x1E13000
	0x022E80EC LDR X0, [X0 + 0x760]
	0x022E80F0 BL 0x1C16D08
	0x022E80F4 BL 0x1C16F10
	0x022E80F8 MOV X20, X0
	0x022E80FC ADRP X0, 0x1E33000
	0x022E8100 LDR X0, [X0 + 0x658]
	0x022E8104 BL 0x1C16D08
	0x022E8108 MOV X21, X0
	0x022E810C ADRP X0, 0x1E33000
	0x022E8110 LDR X0, [X0 + 0x660]
	0x022E8114 B 0x22E8178
	0x022E8118 ADRP X0, 0x1E10000
	0x022E811C LDR X0, [X0 + 0x528]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Add X29, X31, 0
	013 Subtract X31, X31, 32
	014 NotImplemented "Instruction MRS not yet implemented."
	015 Move X8, [X26+40]
	016 Move X19, X4
	017 Move X21, X3
	018 Move W25, W2
	019 Move [X29-8], X8
	020 Move X8, [X4+56]
	021 Move W20, W1
	022 Move X22, X0
	023 Compare X8, 0
	024 JumpIfNotEqual {28}
	025 Move X0, X19
	026 Call 0x1C5D6E0
	027 Move X8, [X19+56]
	028 Move X8, [X8+16]
	029 Move W23, [X8+252]
	030 Add X8, X31, 0
	031 Add X9, X23, 15
	032 And X9, X9, 0x1FFFFFFFF
	033 Subtract X24, X8, X9
	034 Add X31, X24, 0
	035 Compare X22, 0
	036 JumpIfEqual {138}
	037 Compare X21, 0
	038 JumpIfEqual {145}
	039 Move X8, [X22+24]
	040 Compare X8, 0
	041 JumpIfEqual {109}
	042 Move TEMP, X20
	043 And TEMP, TEMP, -2147483648
	044 Compare TEMP, -2147483648
	045 JumpIfEqual {110}
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move TEMP, X25
	048 And TEMP, TEMP, -2147483648
	049 Compare TEMP, -2147483648
	050 JumpIfEqual {121}
	051 Subtract W27, W20, W25
	052 Add W31, W27, 1
	053 NotImplemented "Instruction CMP not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X8, [X22]
	056 Move X9, W20
	057 Move X0, X24
	058 Move X2, X23
	059 Move W8, [X8+260]
	060 NotImplemented "Instruction NOP not yet implemented."
	061 NotImplemented "Instruction MADD not yet implemented."
	062 Add X1, X8, 32
	063 Call 0x3EB2AC0
	064 Move X8, [X19+56]
	065 Move X9, [X8+16]
	066 Move W10, [X9+40]
	067 Move X9, X24
	068 Move TEMP, X10
	069 And TEMP, TEMP, -2147483648
	070 Compare TEMP, -2147483648
	071 JumpIfEqual {73}
	072 Move X9, [X24]
	073 Move X1, [X8+24]
	074 Subtract X3, X29, 24
	075 Subtract X4, X29, 12
	076 Move X2, X21
	077 Move X0, [X1]
	078 Move [X29-24], X9
	079 Move X8, [X1+16]
	080 NotImplemented "Instruction BLR not yet implemented."
	081 NotImplemented "Instruction LDURB not yet implemented."
	082 Compare W8, 0
	083 JumpIfNotEqual {92}
	084 Subtract W20, W20, 1
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move W8, [X22+24]
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Call 0x1C17F28
	089 Move TEMP, 0
	090 Not TEMP
	091 Move W20, TEMP
	092 Move X8, [X26+40]
	093 NotImplemented "Instruction LDUR not yet implemented."
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move W0, W20
	096 Add X31, X29, 0
	097 Move X20, [X31+80]
	098 Move X19, [X31+88]
	099 Move X22, [X31+64]
	100 Move X21, [X31+72]
	101 Move X24, [X31+48]
	102 Move X23, [X31+56]
	103 Move X26, [X31+32]
	104 Move X25, [X31+40]
	105 Move X27, [X31+16]
	106 Move X29, [X31+96]
	107 Move X30, [X31+104]
	108 Return X0
	109 Add W31, W20, 1
	110 Move X0, 0x1E14000
	111 Move X0, [X0+1888]
	112 Call 0x1C17D08
	113 Call 0x1C17F10
	114 Move X20, X0
	115 Move X0, 0x1E34000
	116 Move X0, [X0+1624]
	117 Call 0x1C17D08
	118 Move X21, X0
	119 Move X0, 0x1E34000
	120 Move X0, [X0+1632]
	121 Move X0, 0x1E14000
	122 Move X0, [X0+1888]
	123 Call 0x1C17D08
	124 Call 0x1C17F10
	125 Move X20, X0
	126 Move X0, 0x1E34000
	127 Move X0, [X0+1608]
	128 Call 0x1C17D08
	129 Move X21, X0
	130 Move X0, 0x1E34000
	131 Move X0, [X0+1616]
	132 Call 0x1C17D08
	133 Move X2, X0
	134 Move X0, X20
	135 Move X1, X21
	136 Move X3, X31
	137 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	138 Move X0, 0x1E11000
	139 Move X0, [X0+1320]
	140 Call 0x1C17D08
	141 Call 0x1C17F10
	142 Move X20, X0
	143 Move X0, 0x1E34000
	144 Move X0, [X0+1600]
	145 Move X0, 0x1E11000
	146 Move X0, [X0+1320]
	147 Call 0x1C17D08
	148 Call 0x1C17F10
	149 Move X20, X0
	150 Move X0, 0x1E34000
	151 Move X0, [X0+1912]
	152 Call 0x1C17D08
	153 Move X1, X0
	154 Move X0, X20
	155 Move X2, X31
	156 Call ArgumentNullException..ctor, X0, X1
	157 Move X0, X20
	158 Move X1, X19
	159 Call 0x1C17DEC
	160 Call 0x3EB2B20

Method: System.Boolean TrueForAll(T[] array, System.Predicate`1<T> match)

Disassembly:
	0x02172758 LDR X1, [X19 + 0x8]
	0x0217275C LDP X2, X3, [X31]
	0x02172760 LDR X5, [X8 + 0x30]
	0x02172764 MOV W4, W1
	0x02172768 BL 0x23FBA20
	0x0217276C LDR X8, [X20 + 0x38]
	0x02172770 MOV X0, X19
	0x02172774 LDR X1, [X8 + 0x38]
	0x02172778 BL 0x23FB320
	0x0217277C LDR V0, [X31]
	0x02172780 LDP X30, X21, [X31 + 0x10]
	0x02172784 STR V0, [X19]
	0x02172788 LDP X20, X19, [X31 + 0x20]
	0x0217278C ADD X31, X31, 0x30
	0x02172790 RET
	0x02172794 SUB X31, X31, 0x30
	0x02172798 STP X30, X21, [X31 + 0x10]
	0x0217279C STP X20, X19, [X31 + 0x20]
	0x021727A0 LDR X8, [X2 + 0x38]
	0x021727A4 MOV X20, X2
	0x021727A8 MOV W21, W1
	0x021727AC MOV X19, X0
	0x021727B0 CBNZ X8, 0x21727C0
	0x021727B4 MOV X0, X20
	0x021727B8 BL 0x1C5C6E0
	0x021727BC LDR X8, [X20 + 0x38]
	0x021727C0 STP X31, X31, [X31]
	0x021727C4 LDR X4, [X8]
	0x021727C8 ADD X0, X31, 0x0
	0x021727CC MOVZ W2, 0x4
	0x021727D0 MOV W1, W21
	0x021727D4 MOV W3, W31
	0x021727D8 BL 0x23FEA9C
	0x021727DC LDR X0, [X19]
	0x021727E0 CBZ X0, 0x217280C
	0x021727E4 LDR X8, [X20 + 0x38]
	0x021727E8 LDR X1, [X19 + 0x8]
	0x021727EC LDP X2, X3, [X31]
	0x021727F0 LDR X5, [X8 + 0x30]
	0x021727F4 MOV W4, W1
	0x021727F8 BL 0x23FF3D8
	0x021727FC LDR X8, [X20 + 0x38]
	0x02172800 MOV X0, X19
	0x02172804 LDR X1, [X8 + 0x38]
	0x02172808 BL 0x23FECF0
	0x0217280C LDR V0, [X31]
	0x02172810 LDP X30, X21, [X31 + 0x10]
	0x02172814 STR V0, [X19]
	0x02172818 LDP X20, X19, [X31 + 0x20]
	0x0217281C ADD X31, X31, 0x30
	0x02172820 RET
	0x02172824 SUB X31, X31, 0x80
	0x02172828 STP X30, X21, [X31 + 0x60]
	0x0217282C STP X20, X19, [X31 + 0x70]
	0x02172830 LDR X8, [X2 + 0x38]
	0x02172834 MOV X21, X2
	0x02172838 MOV X19, X1
	0x0217283C MOV X20, X0
	0x02172840 CBNZ X8, 0x217284C
	0x02172844 MOV X0, X21
	0x02172848 BL 0x1C5C6E0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X2+56]
	007 Move X19, X2
	008 Move X20, X1
	009 Move X21, X0
	010 Compare X8, 0
	011 JumpIfNotEqual {14}
	012 Move X0, X19
	013 Call 0x1C5D6E0
	014 Compare X21, 0
	015 JumpIfEqual {45}
	016 Compare X20, 0
	017 JumpIfEqual {52}
	018 Move X8, [X21+24]
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X19, X31
	021 And X8, X8, 0
	022 Add X22, X21, 32
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X8, [X20+24]
	025 Move X0, [X20+64]
	026 Move X2, [X20+40]
	027 Move W1, [X22]
	028 NotImplemented "Instruction BLR not yet implemented."
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {37}
	033 Move W8, [X21+24]
	034 Add X19, X19, 1
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move W0, 1
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 And W0, W0, 1
	042 Move X30, [X31+48]
	043 Return X0
	044 Call 0x1C17F28
	045 Move X0, 0x1F87000
	046 Move X0, [X0+1320]
	047 Call 0x1C17D08
	048 Call 0x1C17F10
	049 Move X20, X0
	050 Move X0, 0x1FAA000
	051 Move X0, [X0+1600]
	052 Move X0, 0x1F87000
	053 Move X0, [X0+1320]
	054 Call 0x1C17D08
	055 Call 0x1C17F10
	056 Move X20, X0
	057 Move X0, 0x1FAA000
	058 Move X0, [X0+1912]
	059 Call 0x1C17D08
	060 Move X1, X0
	061 Move X0, X20
	062 Move X2, X31
	063 Call ArgumentNullException..ctor, X0, X1
	064 Move X0, X20
	065 Move X1, X19
	066 Call 0x1C17DEC

Method: System.Collections.IEnumerator GetEnumerator()

Disassembly:
	0x033A3834 BL 0x1C16DEC
	0x033A3838 STP X30, X27, [X31 - 0x50]!
	0x033A383C STP X26, X25, [X31 + 0x10]
	0x033A3840 STP X24, X23, [X31 + 0x20]
	0x033A3844 STP X22, X21, [X31 + 0x30]
	0x033A3848 STP X20, X19, [X31 + 0x40]
	0x033A384C LDR X27, [X0]
	0x033A3850 CBZ X27, 0x33A398C
	0x033A3854 LDR W8, [X27 + 0x18]
	0x033A3858 MOV W21, W1
	0x033A385C CMP W8, W1
	0x033A3860 B.LS 0x33A3988
	0x033A3864 SXTW X25, W21
	0x033A3868 ADD X26, X27, X25, 0x3, LSL
	0x033A386C LDR X22, [X26 + 0x20]!
	0x033A3870 MOV W19, W2
	0x033A3874 CMP W8, W2
	0x033A3878 B.LS 0x33A3988
	0x033A387C SXTW X24, W19
	0x033A3880 ADD X9, X27, X24, 0x3, LSL
	0x033A3884 LDR X23, [X9 + 0x20]
	0x033A3888 MOV X20, X0
	0x033A388C CBZ X23, 0x33A38A8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x103B000
	006 Move X21, 0xD89000
	007 Move W8, [X20+305]
	008 Move X21, [X21+2936]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD89000
	015 Move X0, [X0+2936]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+305], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X19
	022 Move X2, X31
	023 Move X20, X0
	024 Call ArrayEnumerator..ctor, X0, X1
	025 Move X0, X20
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0

Method: System.Void .ctor()

Disassembly:
	0x033A3890 LDR X8, [X27]
	0x033A3894 MOV X0, X23

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Int32 InternalArray__ICollection_get_Count()

Disassembly:
	0x033A3898 LDR X1, [X8 + 0x40]

ISIL:
	001 Call Array.get_Length, X0
	002 Return X0

Method: System.Boolean InternalArray__ICollection_get_IsReadOnly()

Disassembly:
	0x033A389C BL 0x1C16E00
	0x033A38A0 CBZ X0, 0x33A3990

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Byte GetRawSzArrayData()

Disassembly:
	0x033A38A4 LDR W8, [X27 + 0x18]
	0x033A38A8 CMP W8, W21
	0x033A38AC B.LS 0x33A3988
	0x033A38B0 STR X23, [X26]
	0x033A38B4 LDR X23, [X20]

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {5}
	003 Add X0, X0, 32
	004 Return X0
	005 Move [X31-16], X30
	006 Call 0x1C17F20

Method: System.Collections.Generic.IEnumerator`1<T> InternalArray__IEnumerable_GetEnumerator()

Disassembly:
	0x01FFAC0C LDR X8, [X19 + 0x38]
	0x01FFAC10 LDR X0, [X8 + 0x8]
	0x01FFAC14 LDRB W8, [X0 + 0x135]
	0x01FFAC18 TBNZ X8, 0x0, 0x1FFAC20
	0x01FFAC1C BL 0x1C5C684
	0x01FFAC20 LDR X8, [X0 + 0xB8]
	0x01FFAC24 LDR X0, [X8]
	0x01FFAC28 LDP X20, X19, [X31 + 0x30]
	0x01FFAC2C LDR X30, [X31 + 0x20]
	0x01FFAC30 ADD X31, X31, 0x40
	0x01FFAC34 RET
	0x01FFAC38 SUB X31, X31, 0x40
	0x01FFAC3C STR X30, [X31 + 0x20]
	0x01FFAC40 STP X20, X19, [X31 + 0x30]
	0x01FFAC44 LDR X8, [X1 + 0x38]
	0x01FFAC48 MOV X19, X1
	0x01FFAC4C MOV X20, X0
	0x01FFAC50 CBNZ X8, 0x1FFAC5C
	0x01FFAC54 MOV X0, X19
	0x01FFAC58 BL 0x1C5C6E0
	0x01FFAC5C MOV X0, X20
	0x01FFAC60 MOV X1, X31
	0x01FFAC64 BL 0x3395B7C
	0x01FFAC68 CBZ W0, 0x1FFACA0
	0x01FFAC6C STP X31, X31, [X31 + 0x10]
	0x01FFAC70 LDR X8, [X19 + 0x38]
	0x01FFAC74 ADD X0, X31, 0x10
	0x01FFAC78 MOV X1, X20
	0x01FFAC7C LDR X2, [X8 + 0x18]
	0x01FFAC80 BL 0x2E15A0C
	0x01FFAC84 LDR V0, [X31 + 0x1]
	0x01FFAC88 ADD X1, X31, 0x0
	0x01FFAC8C STR V0, [X31]
	0x01FFAC90 LDR X8, [X19 + 0x38]
	0x01FFAC94 LDR X0, [X8 + 0x10]
	0x01FFAC98 BL 0x1C16E04
	0x01FFAC9C B 0x1FFACDC
	0x01FFACA0 LDR X8, [X19 + 0x38]
	0x01FFACA4 LDR X0, [X8 + 0x8]
	0x01FFACA8 LDRB W8, [X0 + 0x135]
	0x01FFACAC TBNZ X8, 0x0, 0x1FFACB4
	0x01FFACB0 BL 0x1C5C684
	0x01FFACB4 LDR W8, [X0 + 0xE0]
	0x01FFACB8 CBNZ W8, 0x1FFACC0
	0x01FFACBC BL 0x1C16DFC

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X8, [X1+56]
	006 Move X19, X1
	007 Move X20, X0
	008 Compare X8, 0
	009 JumpIfNotEqual {12}
	010 Move X0, X19
	011 Call 0x1C5D6E0
	012 Move X0, X20
	013 Move X1, X31
	014 Call Array.get_Length, X0
	015 Compare W0, 0
	016 JumpIfEqual {30}
	017 Move [X31+16], X31
	018 Move [X31+24], X31
	019 Move X8, [X19+56]
	020 Add X0, X31, 16
	021 Move X1, X20
	022 Move X2, [X8+24]
	023 Call 0x2E14264, X0, X1
	024 Move V0, [X31+1]
	025 Add X1, X31, 0
	026 Move [X31], V0
	027 Move X8, [X19+56]
	028 Move X0, [X8+16]
	029 Call 0x1C17E04
	030 Move X8, [X19+56]
	031 Move X0, [X8+8]
	032 Move W8, [X0+309]
	033 Move TEMP, X8
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {38}
	037 Call 0x1C5D684
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X8, [X19+56]
	043 Move X0, [X8+8]
	044 Move W8, [X0+309]
	045 Move TEMP, X8
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {50}
	049 Call 0x1C5D684
	050 Move X8, [X0+184]
	051 Move X0, [X8]
	052 Move X20, [X31+48]
	053 Move X19, [X31+56]
	054 Move X30, [X31+32]
	055 Add X31, X31, 64
	056 Return X0

Method: System.Void InternalArray__ICollection_Clear()

Disassembly:
	0x033A38B8 CBZ X23, 0x33A398C
	0x033A38BC CBZ X22, 0x33A38D4
	0x033A38C0 LDR X8, [X23]
	0x033A38C4 MOV X0, X22
	0x033A38C8 LDR X1, [X8 + 0x40]
	0x033A38CC BL 0x1C16E00
	0x033A38D0 CBZ X0, 0x33A3990
	0x033A38D4 LDR W8, [X23 + 0x18]
	0x033A38D8 CMP W8, W19
	0x033A38DC B.LS 0x33A3988
	0x033A38E0 ADD X8, X23, X24, 0x3, LSL
	0x033A38E4 STR X22, [X8 + 0x20]
	0x033A38E8 LDR X26, [X20 + 0x8]
	0x033A38EC CBZ X26, 0x33A3970
	0x033A38F0 LDR W8, [X26 + 0x18]
	0x033A38F4 CMP W8, W21
	0x033A38F8 B.LS 0x33A3988
	0x033A38FC ADD X25, X26, X25, 0x3, LSL
	0x033A3900 LDR X22, [X25 + 0x20]!

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xD51000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xD89000
	009 Move X0, [X0+2944]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call NotSupportedException..ctor, X0, X1
	015 Move X0, 0xD89000
	016 Move X0, [X0+2952]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Void InternalArray__ICollection_Add(T item)

Disassembly:
	0x022FFF80 MOV X1, X19
	0x022FFF84 BL 0x1C16DEC
	0x022FFF88 STR X30, [X31 - 0x20]!
	0x022FFF8C STP X20, X19, [X31 + 0x10]
	0x022FFF90 ADRP X0, 0x1DF4000
	0x022FFF94 LDR X0, [X0 + 0xB40]
	0x022FFF98 MOV X19, X2
	0x022FFF9C BL 0x1C16D08
	0x022FFFA0 BL 0x1C16F10
	0x022FFFA4 MOV X20, X0
	0x022FFFA8 ADRP X0, 0x1E1C000
	0x022FFFAC LDR X0, [X0 + 0x598]
	0x022FFFB0 BL 0x1C16D08
	0x022FFFB4 MOV X1, X0
	0x022FFFB8 MOV X0, X20
	0x022FFFBC MOV X2, X31
	0x022FFFC0 BL 0x3379A44
	0x022FFFC4 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0x1DF5000
	005 Move X0, [X0+2880]
	006 Move X19, X2
	007 Call 0x1C17D08
	008 Call 0x1C17F10
	009 Move X20, X0
	010 Move X0, 0x1E1D000
	011 Move X0, [X0+1432]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X20
	015 Move X2, X31
	016 Call NotSupportedException..ctor, X0, X1
	017 Move X0, X20
	018 Move X1, X19
	019 Call 0x1C17DEC

Method: System.Boolean InternalArray__ICollection_Remove(T item)

Disassembly:
	0x01FEC95C MOV X1, X19
	0x01FEC960 BL 0x1C16DEC
	0x01FEC964 STR X30, [X31 - 0x20]!
	0x01FEC968 STP X20, X19, [X31 + 0x10]
	0x01FEC96C ADRP X0, 0x2107000
	0x01FEC970 LDR X0, [X0 + 0xB40]
	0x01FEC974 MOV X19, X2
	0x01FEC978 BL 0x1C16D08
	0x01FEC97C BL 0x1C16F10
	0x01FEC980 MOV X20, X0
	0x01FEC984 ADRP X0, 0x212F000
	0x01FEC988 LDR X0, [X0 + 0x598]
	0x01FEC98C BL 0x1C16D08
	0x01FEC990 MOV X1, X0
	0x01FEC994 MOV X0, X20
	0x01FEC998 MOV X2, X31
	0x01FEC99C BL 0x3379A44
	0x01FEC9A0 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0x2108000
	005 Move X0, [X0+2880]
	006 Move X19, X2
	007 Call 0x1C17D08
	008 Call 0x1C17F10
	009 Move X20, X0
	010 Move X0, 0x2130000
	011 Move X0, [X0+1432]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X20
	015 Move X2, X31
	016 Call NotSupportedException..ctor, X0, X1
	017 Move X0, X20
	018 Move X1, X19
	019 Call 0x1C17DEC

Method: System.Boolean InternalArray__ICollection_Contains(T item)

Disassembly:
	0x0230E230 LDP X24, X23, [X31 + 0x40]
	0x0230E234 LDP X26, X25, [X31 + 0x30]
	0x0230E238 LDP X30, X27, [X31 + 0x20]
	0x0230E23C ADD X31, X31, 0x70
	0x0230E240 RET
	0x0230E244 ADRP X0, 0x1E0D000
	0x0230E248 LDR X0, [X0 + 0x5A0]
	0x0230E24C BL 0x1C16D08
	0x0230E250 BL 0x1C16F10
	0x0230E254 MOV X20, X0
	0x0230E258 ADRP X0, 0x1E0D000
	0x0230E25C LDR X0, [X0 + 0x5A8]
	0x0230E260 BL 0x1C16D08
	0x0230E264 MOV X1, X0
	0x0230E268 MOV X0, X20
	0x0230E26C MOV X2, X31
	0x0230E270 BL 0x338EC20
	0x0230E274 MOV X0, X20
	0x0230E278 MOV X1, X19
	0x0230E27C BL 0x1C16DEC
	0x0230E280 SUB X31, X31, 0x70
	0x0230E284 STP X30, X27, [X31 + 0x20]
	0x0230E288 STP X26, X25, [X31 + 0x30]
	0x0230E28C STP X24, X23, [X31 + 0x40]
	0x0230E290 STP X22, X21, [X31 + 0x50]
	0x0230E294 STP X20, X19, [X31 + 0x60]
	0x0230E298 LDR X8, [X2 + 0x38]
	0x0230E29C MOV X19, X2
	0x0230E2A0 MOV X20, X1
	0x0230E2A4 MOV X21, X0
	0x0230E2A8 CBNZ X8, 0x230E2B4
	0x0230E2AC MOV X0, X19
	0x0230E2B0 BL 0x1C5C6E0
	0x0230E2B4 MOV X0, X21
	0x0230E2B8 MOV X1, X31
	0x0230E2BC STRB W31, [X31 + 0x1C]
	0x0230E2C0 BL 0x339FCE4
	0x0230E2C4 CMP W0, 0x1
	0x0230E2C8 B.GT 0x230E39C
	0x0230E2CC MOV X0, X21
	0x0230E2D0 MOV X1, X31
	0x0230E2D4 BL 0x3395B7C
	0x0230E2D8 CMP W0, 0x1
	0x0230E2DC B.LT 0x230E378
	0x0230E2E0 MOV X23, X31
	0x0230E2E4 ADD X24, X21, 0x20
	0x0230E2E8 MOV W25, W0
	0x0230E2EC MOVZ W26, 0x1
	0x0230E2F0 MOVN X27, 0x0
	0x0230E2F4 LDR X8, [X21]
	0x0230E2F8 ADD X0, X31, 0x1C
	0x0230E2FC LDR W2, [X8 + 0x104]
	0x0230E300 NOP
	0x0230E304 MADD X1, X23, X2, X24
	0x0230E308 BL 0x3EB1AC0
	0x0230E30C LDRB W8, [X31 + 0x1C]
	0x0230E310 ADD X1, X31, 0x18
	0x0230E314 STRB W8, [X31 + 0x18]
	0x0230E318 LDR X8, [X19 + 0x38]
	0x0230E31C LDR X0, [X8 + 0x8]
	0x0230E320 BL 0x1C16E04
	0x0230E324 LDR X8, [X19 + 0x38]
	0x0230E328 MOV X22, X0
	0x0230E32C LDR X8, [X8 + 0x8]
	0x0230E330 LDRB W9, [X8 + 0x135]
	0x0230E334 TBNZ X9, 0x0, 0x230E344
	0x0230E338 MOV X0, X8
	0x0230E33C BL 0x1C5C684
	0x0230E340 MOV X8, X0
	0x0230E344 ADD X0, X31, 0x0
	0x0230E348 MOV X1, X22
	0x0230E34C MOV X2, X31
	0x0230E350 STP X8, X27, [X31]
	0x0230E354 STRB W20, [X31 + 0x10]
	0x0230E358 BL 0x33D55D0
	0x0230E35C TBNZ X0, 0x0, 0x230E37C
	0x0230E360 ADD X23, X23, 0x1
	0x0230E364 CMP X23, X25
	0x0230E368 CSET W26, CC
	0x0230E36C CMP X25, X23
	0x0230E370 B.NE 0x230E2F4
	0x0230E374 B 0x230E37C
	0x0230E378 MOV W26, W31
	0x0230E37C AND W0, W26, 0x1
	0x0230E380 LDP X20, X19, [X31 + 0x60]
	0x0230E384 LDP X22, X21, [X31 + 0x50]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+48], X30
	003 Move [X31+56], X27
	004 Move [X31+64], X26
	005 Move [X31+72], X25
	006 Move [X31+80], X24
	007 Move [X31+88], X23
	008 Move [X31+96], X22
	009 Move [X31+104], X21
	010 Move [X31+112], X20
	011 Move [X31+120], X19
	012 Move X8, [X2+56]
	013 Move X19, X2
	014 Move X20, X1
	015 Move X21, X0
	016 Compare X8, 0
	017 JumpIfNotEqual {20}
	018 Move X0, X19
	019 Call 0x1C5D6E0
	020 Move X0, X21
	021 Move X1, X31
	022 Move [X31+40], X31
	023 Call Array.get_Rank, X0
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X0, X21
	026 Move X1, X31
	027 Call Array.get_Length, X0
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X23, X31
	030 Add X24, X21, 32
	031 Move W25, W0
	032 Move W26, 1
	033 Move TEMP, 0
	034 Not TEMP
	035 Move X27, TEMP
	036 Move X8, [X21]
	037 Add X0, X31, 40
	038 Move W2, [X8+260]
	039 NotImplemented "Instruction NOP not yet implemented."
	040 NotImplemented "Instruction MADD not yet implemented."
	041 Call 0x3EB2AC0
	042 Move X8, [X31+40]
	043 Add X1, X31, 32
	044 Move [X31+32], X8
	045 Move X8, [X19+56]
	046 Move X0, [X8+8]
	047 Call 0x1C17E04
	048 Move X8, [X19+56]
	049 Move X22, X0
	050 Move X8, [X8+8]
	051 Move W9, [X8+309]
	052 Move TEMP, X9
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfEqual {59}
	056 Move X0, X8
	057 Call 0x1C5D684
	058 Move X8, X0
	059 Add X0, X31, 8
	060 Move X1, X22
	061 Move X2, X31
	062 Move [X31+8], X8
	063 Move [X31+16], X27
	064 Move [X31+24], X20
	065 Call ValueType.Equals, X0, X1
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfEqual {75}
	070 Add X23, X23, 1
	071 NotImplemented "Instruction CMP not yet implemented."
	072 NotImplemented "Instruction CSET not yet implemented."
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move W26, W31
	075 And W0, W26, 1
	076 Move X20, [X31+112]
	077 Move X19, [X31+120]
	078 Move X22, [X31+96]
	079 Move X21, [X31+104]
	080 Move X24, [X31+80]
	081 Move X23, [X31+88]
	082 Move X26, [X31+64]
	083 Move X25, [X31+72]
	084 Move X30, [X31+48]
	085 Move X27, [X31+56]
	086 Add X31, X31, 128
	087 Return X0
	088 Move X0, 0x1E0E000
	089 Move X0, [X0+1440]
	090 Call 0x1C17D08
	091 Call 0x1C17F10
	092 Move X20, X0
	093 Move X0, 0x1E0E000
	094 Move X0, [X0+1448]
	095 Call 0x1C17D08
	096 Move X1, X0
	097 Move X0, X20
	098 Move X2, X31
	099 Call RankException..ctor, X0, X1
	100 Move X0, X20
	101 Move X1, X19
	102 Call 0x1C17DEC

Method: System.Void InternalArray__ICollection_CopyTo(T[] array, System.Int32 arrayIndex)

Disassembly:
	0x023561E8 BL 0x3395B7C
	0x023561EC MOV W4, W0
	0x023561F0 MOV X0, X21
	0x023561F4 MOV W1, W22
	0x023561F8 MOV X2, X20
	0x023561FC MOV W3, W19
	0x02356200 LDP X20, X19, [X31 + 0x20]
	0x02356204 LDP X22, X21, [X31 + 0x10]
	0x02356208 MOV X5, X31
	0x0235620C LDR X30, [X31], #0x30
	0x02356210 B 0x339FCE8
	0x02356214 STR X30, [X31 - 0x30]!
	0x02356218 STP X22, X21, [X31 + 0x10]
	0x0235621C STP X20, X19, [X31 + 0x20]
	0x02356220 MOV W19, W2
	0x02356224 MOV X20, X1
	0x02356228 MOV W1, W31
	0x0235622C MOV X2, X31
	0x02356230 MOV X21, X0
	0x02356234 BL 0x339FA30
	0x02356238 MOV W22, W0
	0x0235623C MOV X0, X21
	0x02356240 MOV X1, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W19, W2
	007 Move X20, X1
	008 Move W1, W31
	009 Move X2, X31
	010 Move X21, X0
	011 Call Array.GetLowerBound, X0, X1
	012 Move W22, W0
	013 Move X0, X21
	014 Move X1, X31
	015 Call Array.get_Length, X0
	016 Move W4, W0
	017 Move X0, X21
	018 Move W1, W22
	019 Move X2, X20
	020 Move W3, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X5, X31
	026 Move X30, [X31+48]
	027 Call Array.Copy, X0, X1, X2, X3, X4
	028 Return 

Method: T InternalArray__IReadOnlyList_get_Item(System.Int32 index)

Disassembly:
	0x0201E2C4 BL 0x3395B7C
	0x0201E2C8 CMP W0, W22
	0x0201E2CC B.LS 0x201E308
	0x0201E2D0 LDR X8, [X21]
	0x0201E2D4 ADD X0, X31, 0x0
	0x0201E2D8 LDR W2, [X8 + 0x104]
	0x0201E2DC SXTW X8, W22
	0x0201E2E0 MADD X8, X2, X8, X21
	0x0201E2E4 ADD X1, X8, 0x20
	0x0201E2E8 BL 0x3EB1AC0
	0x0201E2EC LDP V0, V1, [X31]
	0x0201E2F0 LDP X22, X21, [X31 + 0x30]
	0x0201E2F4 LDR X30, [X31 + 0x20]
	0x0201E2F8 STP V0, V1, [X20]
	0x0201E2FC LDP X20, X19, [X31 + 0x40]
	0x0201E300 ADD X31, X31, 0x50
	0x0201E304 RET
	0x0201E308 ADRP X0, 0x20DD000
	0x0201E30C LDR X0, [X0 + 0x760]
	0x0201E310 BL 0x1C16D08
	0x0201E314 BL 0x1C16F10
	0x0201E318 MOV X20, X0
	0x0201E31C ADRP X0, 0x20E0000
	0x0201E320 LDR X0, [X0 + 0x130]
	0x0201E324 BL 0x1C16D08
	0x0201E328 MOV X1, X0
	0x0201E32C MOV X0, X20
	0x0201E330 MOV X2, X31
	0x0201E334 BL 0x3316014
	0x0201E338 MOV X0, X20
	0x0201E33C MOV X1, X19
	0x0201E340 BL 0x1C16DEC
	0x0201E344 SUB X31, X31, 0x50
	0x0201E348 STP X31, X30, [X31 + 0x18]
	0x0201E34C STP X22, X21, [X31 + 0x30]
	0x0201E350 STP X20, X19, [X31 + 0x40]
	0x0201E354 MOV W22, W1
	0x0201E358 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W21, W1
	007 Move X1, X31
	008 Move X19, X2
	009 Move X20, X0
	010 Move [X31+8], X31
	011 Call Array.get_Length, X0
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move X8, [X20]
	014 Add X0, X31, 8
	015 Move W2, [X8+260]
	016 Move X8, W21
	017 NotImplemented "Instruction MADD not yet implemented."
	018 Add X1, X8, 32
	019 Call 0x3EB2AC0
	020 Move X0, [X31+8]
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X30, [X31+16]
	024 Move X21, [X31+24]
	025 Add X31, X31, 48
	026 Return X0
	027 Move X0, 0x20DE000
	028 Move X0, [X0+1888]
	029 Call 0x1C17D08
	030 Call 0x1C17F10
	031 Move X20, X0
	032 Move X0, 0x20E1000
	033 Move X0, [X0+304]
	034 Call 0x1C17D08
	035 Move X1, X0
	036 Move X0, X20
	037 Move X2, X31
	038 Call ArgumentOutOfRangeException..ctor, X0, X1
	039 Move X0, X20
	040 Move X1, X19
	041 Call 0x1C17DEC

Method: System.Int32 InternalArray__IReadOnlyCollection_get_Count()

Disassembly:
	0x033A3904 CMP W8, W19

ISIL:
	001 Call Array.get_Length, X0
	002 Return X0

Method: System.Void InternalArray__Insert(System.Int32 index, T item)

Disassembly:
	0x0208AFF8 MOV X1, X19
	0x0208AFFC BL 0x1C16DEC
	0x0208B000 STR X30, [X31 - 0x20]!
	0x0208B004 STP X20, X19, [X31 + 0x10]
	0x0208B008 ADRP X0, 0x2068000
	0x0208B00C LDR X0, [X0 + 0xB40]
	0x0208B010 MOV X19, X3
	0x0208B014 BL 0x1C16D08
	0x0208B018 BL 0x1C16F10
	0x0208B01C MOV X20, X0
	0x0208B020 ADRP X0, 0x2090000
	0x0208B024 LDR X0, [X0 + 0x598]
	0x0208B028 BL 0x1C16D08
	0x0208B02C MOV X1, X0
	0x0208B030 MOV X0, X20
	0x0208B034 MOV X2, X31
	0x0208B038 BL 0x3379A44
	0x0208B03C MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0x2069000
	005 Move X0, [X0+2880]
	006 Move X19, X3
	007 Call 0x1C17D08
	008 Call 0x1C17F10
	009 Move X20, X0
	010 Move X0, 0x2091000
	011 Move X0, [X0+1432]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X20
	015 Move X2, X31
	016 Call NotSupportedException..ctor, X0, X1
	017 Move X0, X20
	018 Move X1, X19
	019 Call 0x1C17DEC

Method: System.Void InternalArray__RemoveAt(System.Int32 index)

Disassembly:
	0x033A3908 B.LS 0x33A3988
	0x033A390C ADD X9, X26, X24, 0x3, LSL
	0x033A3910 LDR X23, [X9 + 0x20]
	0x033A3914 CBZ X23, 0x33A3930
	0x033A3918 LDR X8, [X26]
	0x033A391C MOV X0, X23
	0x033A3920 LDR X1, [X8 + 0x40]
	0x033A3924 BL 0x1C16E00
	0x033A3928 CBZ X0, 0x33A3990
	0x033A392C LDR W8, [X26 + 0x18]
	0x033A3930 CMP W8, W21
	0x033A3934 B.LS 0x33A3988
	0x033A3938 STR X23, [X25]
	0x033A393C LDR X20, [X20 + 0x8]
	0x033A3940 CBZ X20, 0x33A398C
	0x033A3944 CBZ X22, 0x33A395C
	0x033A3948 LDR X8, [X20]
	0x033A394C MOV X0, X22
	0x033A3950 LDR X1, [X8 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xD51000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xD79000
	009 Move X0, [X0+1432]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call NotSupportedException..ctor, X0, X1
	015 Move X0, 0xD89000
	016 Move X0, [X0+2960]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Int32 InternalArray__IndexOf(T item)

Disassembly:
	0x0203F580 MOV X0, X19
	0x0203F584 BL 0x1C5C6E0
	0x0203F588 MOV X0, X20
	0x0203F58C MOV X1, X31
	0x0203F590 STRB W31, [X31 + 0x2C]
	0x0203F594 BL 0x339FCE4
	0x0203F598 CMP W0, 0x1
	0x0203F59C B.GT 0x203F684
	0x0203F5A0 MOV X0, X20
	0x0203F5A4 MOV X1, X31
	0x0203F5A8 BL 0x3395B7C
	0x0203F5AC CMP W0, 0x1
	0x0203F5B0 B.LT 0x203F63C
	0x0203F5B4 MOV X23, X31
	0x0203F5B8 ADD X24, X20, 0x20
	0x0203F5BC MOV W25, W0
	0x0203F5C0 MOVN X26, 0x0
	0x0203F5C4 LDR X8, [X20]
	0x0203F5C8 ADD X0, X31, 0x2C
	0x0203F5CC LDR W2, [X8 + 0x104]
	0x0203F5D0 NOP
	0x0203F5D4 MADD X1, X23, X2, X24
	0x0203F5D8 BL 0x3EB1AC0
	0x0203F5DC STRB W21, [X31 + 0x28]
	0x0203F5E0 LDR X8, [X19 + 0x38]
	0x0203F5E4 ADD X1, X31, 0x28
	0x0203F5E8 LDR X0, [X8 + 0x8]
	0x0203F5EC BL 0x1C16E04
	0x0203F5F0 LDR X8, [X19 + 0x38]
	0x0203F5F4 MOV X22, X0
	0x0203F5F8 LDR X8, [X8 + 0x8]
	0x0203F5FC LDRB W9, [X8 + 0x135]
	0x0203F600 TBNZ X9, 0x0, 0x203F610
	0x0203F604 MOV X0, X8
	0x0203F608 BL 0x1C5C684
	0x0203F60C MOV X8, X0
	0x0203F610 LDRB W9, [X31 + 0x2C]
	0x0203F614 ADD X0, X31, 0x8
	0x0203F618 MOV X1, X22
	0x0203F61C MOV X2, X31
	0x0203F620 STP X8, X26, [X31 + 0x8]
	0x0203F624 STRB W9, [X31 + 0x18]
	0x0203F628 BL 0x33D55D0
	0x0203F62C TBNZ X0, 0x0, 0x203F654
	0x0203F630 ADD X23, X23, 0x1
	0x0203F634 CMP X25, X23
	0x0203F638 B.NE 0x203F5C4
	0x0203F63C MOV X0, X20
	0x0203F640 MOV W1, W31
	0x0203F644 MOV X2, X31
	0x0203F648 BL 0x339FA30
	0x0203F64C SUB W0, W0, 0x1
	0x0203F650 B 0x203F668
	0x0203F654 MOV X0, X20
	0x0203F658 MOV W1, W31
	0x0203F65C MOV X2, X31
	0x0203F660 BL 0x339FA30
	0x0203F664 ADD W0, W0, W23
	0x0203F668 LDP X20, X19, [X31 + 0x60]
	0x0203F66C LDP X22, X21, [X31 + 0x50]
	0x0203F670 LDP X24, X23, [X31 + 0x40]
	0x0203F674 LDP X26, X25, [X31 + 0x30]
	0x0203F678 LDR X30, [X31 + 0x20]
	0x0203F67C ADD X31, X31, 0x70
	0x0203F680 RET
	0x0203F684 ADRP X0, 0x20DC000
	0x0203F688 LDR X0, [X0 + 0x5A0]
	0x0203F68C BL 0x1C16D08
	0x0203F690 BL 0x1C16F10
	0x0203F694 MOV X20, X0
	0x0203F698 ADRP X0, 0x20DC000
	0x0203F69C LDR X0, [X0 + 0x5A8]
	0x0203F6A0 BL 0x1C16D08
	0x0203F6A4 MOV X1, X0
	0x0203F6A8 MOV X0, X20
	0x0203F6AC MOV X2, X31
	0x0203F6B0 BL 0x338EC20
	0x0203F6B4 MOV X0, X20
	0x0203F6B8 MOV X1, X19
	0x0203F6BC BL 0x1C16DEC
	0x0203F6C0 SUB X31, X31, 0x70
	0x0203F6C4 STR X30, [X31 + 0x20]
	0x0203F6C8 STP X26, X25, [X31 + 0x30]
	0x0203F6CC STP X24, X23, [X31 + 0x40]
	0x0203F6D0 STP X22, X21, [X31 + 0x50]
	0x0203F6D4 STP X20, X19, [X31 + 0x60]
	0x0203F6D8 LDR X8, [X2 + 0x38]
	0x0203F6DC MOV X19, X2
	0x0203F6E0 MOV X21, X1
	0x0203F6E4 MOV X20, X0
	0x0203F6E8 CBNZ X8, 0x203F6F4

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+32], X30
	003 Move [X31+48], X26
	004 Move [X31+56], X25
	005 Move [X31+64], X24
	006 Move [X31+72], X23
	007 Move [X31+80], X22
	008 Move [X31+88], X21
	009 Move [X31+96], X20
	010 Move [X31+104], X19
	011 Move X8, [X2+56]
	012 Move X19, X2
	013 Move X21, X1
	014 Move X20, X0
	015 Compare X8, 0
	016 JumpIfNotEqual {19}
	017 Move X0, X19
	018 Call 0x1C5D6E0
	019 Move X0, X20
	020 Move X1, X31
	021 Move [X31+40], X31
	022 Call Array.get_Rank, X0
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X0, X20
	025 Move X1, X31
	026 Call Array.get_Length, X0
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X23, X31
	029 Add X24, X20, 32
	030 Move W25, W0
	031 Move TEMP, 0
	032 Not TEMP
	033 Move X26, TEMP
	034 Move X8, [X20]
	035 Add X0, X31, 40
	036 Move W2, [X8+260]
	037 NotImplemented "Instruction NOP not yet implemented."
	038 NotImplemented "Instruction MADD not yet implemented."
	039 Call 0x3EB2AC0
	040 Move [X31+24], X21
	041 Move X8, [X19+56]
	042 Add X1, X31, 24
	043 Move X0, [X8+8]
	044 Call 0x1C17E04
	045 Move X8, [X19+56]
	046 Move X22, X0
	047 Move X8, [X8+8]
	048 Move W9, [X8+309]
	049 Move TEMP, X9
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfEqual {56}
	053 Move X0, X8
	054 Call 0x1C5D684
	055 Move X8, X0
	056 Move X9, [X31+40]
	057 Add X0, X31, 0
	058 Move X1, X22
	059 Move X2, X31
	060 Move [X31], X8
	061 Move [X31+8], X26
	062 Move [X31+16], X9
	063 Call ValueType.Equals, X0, X1
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfEqual {75}
	068 Add X23, X23, 1
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move X0, X20
	071 Move W1, W31
	072 Move X2, X31
	073 Call Array.GetLowerBound, X0, X1
	074 Subtract W0, W0, 1
	075 Move X0, X20
	076 Move W1, W31
	077 Move X2, X31
	078 Call Array.GetLowerBound, X0, X1
	079 Add W0, W0, W23
	080 Move X20, [X31+96]
	081 Move X19, [X31+104]
	082 Move X22, [X31+80]
	083 Move X21, [X31+88]
	084 Move X24, [X31+64]
	085 Move X23, [X31+72]
	086 Move X26, [X31+48]
	087 Move X25, [X31+56]
	088 Move X30, [X31+32]
	089 Add X31, X31, 112
	090 Return X0
	091 Move X0, 0x20DD000
	092 Move X0, [X0+1440]
	093 Call 0x1C17D08
	094 Call 0x1C17F10
	095 Move X20, X0
	096 Move X0, 0x20DD000
	097 Move X0, [X0+1448]
	098 Call 0x1C17D08
	099 Move X1, X0
	100 Move X0, X20
	101 Move X2, X31
	102 Call RankException..ctor, X0, X1
	103 Move X0, X20
	104 Move X1, X19
	105 Call 0x1C17DEC

Method: T InternalArray__get_Item(System.Int32 index)

Disassembly:
	0x020992A8 BL 0x3395B7C
	0x020992AC CMP W0, W22
	0x020992B0 B.LS 0x20992EC
	0x020992B4 LDR X8, [X21]
	0x020992B8 ADD X0, X31, 0x0
	0x020992BC LDR W2, [X8 + 0x104]
	0x020992C0 SXTW X8, W22
	0x020992C4 MADD X8, X2, X8, X21
	0x020992C8 ADD X1, X8, 0x20
	0x020992CC BL 0x3EB1AC0
	0x020992D0 LDP V0, V1, [X31]
	0x020992D4 LDP X22, X21, [X31 + 0x30]
	0x020992D8 LDR X30, [X31 + 0x20]
	0x020992DC STP V0, V1, [X20]
	0x020992E0 LDP X20, X19, [X31 + 0x40]
	0x020992E4 ADD X31, X31, 0x50
	0x020992E8 RET
	0x020992EC ADRP X0, 0x2062000
	0x020992F0 LDR X0, [X0 + 0x760]
	0x020992F4 BL 0x1C16D08
	0x020992F8 BL 0x1C16F10
	0x020992FC MOV X20, X0
	0x02099300 ADRP X0, 0x2065000
	0x02099304 LDR X0, [X0 + 0x130]
	0x02099308 BL 0x1C16D08
	0x0209930C MOV X1, X0
	0x02099310 MOV X0, X20
	0x02099314 MOV X2, X31
	0x02099318 BL 0x3316014
	0x0209931C MOV X0, X20
	0x02099320 MOV X1, X19
	0x02099324 BL 0x1C16DEC
	0x02099328 SUB X31, X31, 0x50
	0x0209932C STP X31, X30, [X31 + 0x18]
	0x02099330 STP X22, X21, [X31 + 0x30]
	0x02099334 STP X20, X19, [X31 + 0x40]
	0x02099338 MOV W22, W1
	0x0209933C MOV X1, X31

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W21, W1
	007 Move X1, X31
	008 Move X19, X2
	009 Move X20, X0
	010 Move [X31+8], X31
	011 Call Array.get_Length, X0
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move X8, [X20]
	014 Add X0, X31, 8
	015 Move W2, [X8+260]
	016 Move X8, W21
	017 NotImplemented "Instruction MADD not yet implemented."
	018 Add X1, X8, 32
	019 Call 0x3EB2AC0
	020 Move X0, [X31+8]
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X30, [X31+16]
	024 Move X21, [X31+24]
	025 Add X31, X31, 48
	026 Return X0
	027 Move X0, 0x2063000
	028 Move X0, [X0+1888]
	029 Call 0x1C17D08
	030 Call 0x1C17F10
	031 Move X20, X0
	032 Move X0, 0x2066000
	033 Move X0, [X0+304]
	034 Call 0x1C17D08
	035 Move X1, X0
	036 Move X0, X20
	037 Move X2, X31
	038 Call ArgumentOutOfRangeException..ctor, X0, X1
	039 Move X0, X20
	040 Move X1, X19
	041 Call 0x1C17DEC

Method: System.Void InternalArray__set_Item(System.Int32 index, T item)

Disassembly:
	0x020BA564 CBZ X0, 0x20BA57C
	0x020BA568 LDR X8, [X23]
	0x020BA56C MOV X0, X20
	0x020BA570 LDR X1, [X8 + 0x40]
	0x020BA574 BL 0x1C16E00
	0x020BA578 CBZ X0, 0x20BA5F8
	0x020BA57C LDR W8, [X23 + 0x18]
	0x020BA580 CMP W8, W19
	0x020BA584 B.LS 0x20BA5F4
	0x020BA588 ADD X8, X23, W19, 0x3, SXTW
	0x020BA58C STR X20, [X8 + 0x20]
	0x020BA590 B 0x20BA5A4
	0x020BA594 ADD X2, X31, 0x8
	0x020BA598 MOV X0, X22
	0x020BA59C MOV W1, W19
	0x020BA5A0 BL 0x1C16D48
	0x020BA5A4 LDP X20, X19, [X31 + 0x30]
	0x020BA5A8 LDP X22, X21, [X31 + 0x20]
	0x020BA5AC LDP X30, X23, [X31 + 0x10]
	0x020BA5B0 ADD X31, X31, 0x40
	0x020BA5B4 RET
	0x020BA5B8 ADRP X0, 0x2041000
	0x020BA5BC LDR X0, [X0 + 0x760]
	0x020BA5C0 BL 0x1C16D08
	0x020BA5C4 BL 0x1C16F10
	0x020BA5C8 MOV X19, X0
	0x020BA5CC ADRP X0, 0x2044000
	0x020BA5D0 LDR X0, [X0 + 0x130]
	0x020BA5D4 BL 0x1C16D08
	0x020BA5D8 MOV X1, X0
	0x020BA5DC MOV X0, X19
	0x020BA5E0 MOV X2, X31
	0x020BA5E4 BL 0x3316014
	0x020BA5E8 MOV X0, X19
	0x020BA5EC MOV X1, X20
	0x020BA5F0 BL 0x1C16DEC
	0x020BA5F4 BL 0x1C16F28
	0x020BA5F8 BL 0x1C16F44
	0x020BA5FC MOV X1, X31
	0x020BA600 BL 0x1C16DEC
	0x020BA604 SUB X31, X31, 0x40
	0x020BA608 STP X30, X23, [X31 + 0x10]
	0x020BA60C STP X22, X21, [X31 + 0x20]
	0x020BA610 STP X20, X19, [X31 + 0x30]
	0x020BA614 MOV X21, X2
	0x020BA618 STRB W21, [X31 + 0x8]
	0x020BA61C LDR X8, [X3 + 0x38]
	0x020BA620 MOV X20, X3
	0x020BA624 MOV W19, W1
	0x020BA628 MOV X22, X0
	0x020BA62C CBNZ X8, 0x20BA64C
	0x020BA630 ADRP X0, 0x2039000
	0x020BA634 LDR X0, [X0 + 0x9D0]
	0x020BA638 BL 0x1C16CF4
	0x020BA63C LDR X8, [X20 + 0x38]
	0x020BA640 CBNZ X8, 0x20BA64C
	0x020BA644 MOV X0, X20
	0x020BA648 BL 0x1C5C6E0
	0x020BA64C MOV X0, X22
	0x020BA650 MOV X1, X31
	0x020BA654 BL 0x3395B7C
	0x020BA658 CMP W0, W19
	0x020BA65C B.LS 0x20BA6E8
	0x020BA660 ADRP X8, 0x2039000
	0x020BA664 LDR X8, [X8 + 0x9D0]
	0x020BA668 MOV X0, X22
	0x020BA66C LDR X1, [X8]
	0x020BA670 BL 0x1C16E00
	0x020BA674 CBZ X0, 0x20BA6C4
	0x020BA678 STRB W21, [X31]
	0x020BA67C LDR X8, [X20 + 0x38]
	0x020BA680 MOV X23, X0
	0x020BA684 ADD X1, X31, 0x0
	0x020BA688 LDR X0, [X8]
	0x020BA68C BL 0x1C16E04
	0x020BA690 MOV X20, X0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move [X31+8], X2
	009 Move X8, [X3+56]
	010 Move X20, X3
	011 Move X21, X2
	012 Move W19, W1
	013 Move X22, X0
	014 Compare X8, 0
	015 JumpIfNotEqual {24}
	016 Move X0, 0x203A000
	017 Move X0, [X0+2512]
	018 Call 0x1C17CF4
	019 Move X8, [X20+56]
	020 Compare X8, 0
	021 JumpIfNotEqual {24}
	022 Move X0, X20
	023 Call 0x1C5D6E0
	024 Move X0, X22
	025 Move X1, X31
	026 Call Array.get_Length, X0
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X8, 0x203A000
	029 Move X8, [X8+2512]
	030 Move X0, X22
	031 Move X1, [X8]
	032 Call 0x1C17E00
	033 Compare X0, 0
	034 JumpIfEqual {54}
	035 Move [X31], X21
	036 Move X8, [X20+56]
	037 Move X23, X0
	038 Add X1, X31, 0
	039 Move X0, [X8]
	040 Call 0x1C17E04
	041 Move X20, X0
	042 Compare X0, 0
	043 JumpIfEqual {50}
	044 Move X8, [X23]
	045 Move X0, X20
	046 Move X1, [X8+64]
	047 Call 0x1C17E00
	048 Compare X0, 0
	049 JumpIfEqual {82}
	050 Move W8, [X23+24]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Add X8, X23, W19
	053 Move [X8+32], X20
	054 Add X2, X31, 8
	055 Move X0, X22
	056 Move W1, W19
	057 Call 0x1C17D48
	058 Move X20, [X31+48]
	059 Move X19, [X31+56]
	060 Move X22, [X31+32]
	061 Move X21, [X31+40]
	062 Move X30, [X31+16]
	063 Move X23, [X31+24]
	064 Add X31, X31, 64
	065 Return 
	066 Move X0, 0x2042000
	067 Move X0, [X0+1888]
	068 Call 0x1C17D08
	069 Call 0x1C17F10
	070 Move X19, X0
	071 Move X0, 0x2045000
	072 Move X0, [X0+304]
	073 Call 0x1C17D08
	074 Move X1, X0
	075 Move X0, X19
	076 Move X2, X31
	077 Call ArgumentOutOfRangeException..ctor, X0, X1
	078 Move X0, X19
	079 Move X1, X20
	080 Call 0x1C17DEC
	081 Call 0x1C17F28
	082 Call 0x1C17F44
	083 Move X1, X31
	084 Call 0x1C17DEC

Method: System.Void GetGenericValueImpl(System.Int32 pos, out T value)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void SetGenericValueImpl(System.Int32 pos, ref T value)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Int32 get_Length()

Disassembly:
	0x03396B7C ADRP X20, 0xD5D000
	0x03396B80 LDRB W8, [X21 + 0x8A]
	0x03396B84 LDR X20, [X20 + 0x6C0]
	0x03396B88 MOV X19, X0
	0x03396B8C TBNZ X8, 0x0, 0x3396BA4
	0x03396B90 ADRP X0, 0xD5D000
	0x03396B94 LDR X0, [X0 + 0x6C0]
	0x03396B98 BL 0x1C16CF4
	0x03396B9C MOVZ W8, 0x1
	0x03396BA0 STRB W8, [X21 + 0x8A]
	0x03396BA4 LDR X8, [X19]
	0x03396BA8 MOV X0, X19
	0x03396BAC LDP X9, X1, [X8 + 0x1B8]
	0x03396BB0 BLR X9
	0x03396BB4 LDR X8, [X20]
	0x03396BB8 MOV X19, X0
	0x03396BBC LDR W9, [X8 + 0xE0]
	0x03396BC0 CBNZ W9, 0x3396BCC
	0x03396BC4 MOV X0, X8
	0x03396BC8 BL 0x1C16DFC
	0x03396BCC CMP X19, 0x0
	0x03396BD0 LDP X20, X19, [X31 + 0x10]
	0x03396BD4 CSET W0, NE
	0x03396BD8 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W1, W31
	006 Move X19, X0
	007 Call 0x1C25CE8
	008 Move W20, W0
	009 Move X0, X19
	010 Call 0x1C25D70
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move W21, 1
	013 Move X0, X19
	014 Move W1, W21
	015 Call 0x1C25CE8
	016 Multiply W20, W0, W20
	017 Move X0, X19
	018 Add W21, W21, 1
	019 Call 0x1C25D70
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move W0, W20
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Return X0

Method: System.Int32 get_Rank()

Disassembly:
	0x033A0CE4 BL 0x1C16F10

ISIL:
	001 Call 0x1C25D70
	002 Return X0

Method: System.Int32 GetRank()

Disassembly:
	0x033A3954 BL 0x1C16E00

ISIL:
	001 Call 0x1C25D70
	002 Return X0

Method: System.Int32 GetLength(System.Int32 dimension)

Disassembly:
	0x033A1EDC BL 0x1C16DEC

ISIL:
	001 Call 0x1C25CE8
	002 Return X0

Method: System.Int32 GetLowerBound(System.Int32 dimension)

Disassembly:
	0x033A0A30 LDR X0, [X0 + 0x760]

ISIL:
	001 Call 0x1C25D2C
	002 Return X0

Method: System.Object GetValue(System.Int32[] indices)

Disassembly:
	0x033A237C TBZ X19, 0x1F, 0x33A2398

ISIL:
	001 Call 0x1C25D7C
	002 Return X0

Method: System.Void SetValue(System.Object value, System.Int32[] indices)

Disassembly:
	0x033A3280 MOVZ W8, 0x1

ISIL:
	001 Call 0x1C25F1C
	002 Return 

Method: System.Object GetValueImpl(System.Int32 pos)

Disassembly:
	0x033A3958 CBZ X0, 0x33A3990

ISIL:
	001 Call 0x1C25EAC
	002 Return X0

Method: System.Void SetValueImpl(System.Object value, System.Int32 pos)

Disassembly:
	0x033A395C LDR W8, [X20 + 0x18]

ISIL:
	001 Call 0x1C2600C
	002 Return 

Method: System.Boolean FastCopy(System.Array source, System.Int32 source_idx, System.Array dest, System.Int32 dest_idx, System.Int32 length)

Disassembly:
	0x033A3960 CMP W8, W19

ISIL:
	001 Call 0x1C25AB0
	002 Return X0

Method: System.Array CreateInstanceImpl(System.Type elementType, System.Int32[] lengths, System.Int32[] bounds)

Disassembly:
	0x033A3964 B.LS 0x33A3988

ISIL:
	001 Call 0x1C25838
	002 Return X0

Method: System.Int32 GetUpperBound(System.Int32 dimension)

Disassembly:
	0x033A3968 ADD X8, X20, X24, 0x3, LSL
	0x033A396C STR X22, [X8 + 0x20]
	0x033A3970 LDP X20, X19, [X31 + 0x40]
	0x033A3974 LDP X22, X21, [X31 + 0x30]
	0x033A3978 LDP X24, X23, [X31 + 0x20]
	0x033A397C LDP X26, X25, [X31 + 0x10]
	0x033A3980 LDP X30, X27, [X31], #0x50
	0x033A3984 RET
	0x033A3988 BL 0x1C16F28
	0x033A398C BL 0x1C16F20
	0x033A3990 BL 0x1C16F44
	0x033A3994 MOV X1, X31
	0x033A3998 BL 0x1C16DEC
	0x033A399C B 0x33A39A0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W19, W1
	006 Move X20, X0
	007 Call 0x1C25D2C
	008 Move W21, W0
	009 Move X0, X20
	010 Move W1, W19
	011 Call 0x1C25CE8
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Add W8, W21, W0
	015 Subtract W0, W8, 1
	016 Move X30, [X31+32]
	017 Move X21, [X31+40]
	018 Return X0

Method: System.Object GetValue(System.Int32 index)

Disassembly:
	0x03396BDC RET
	0x03396BE0 MOV X0, X31
	0x03396BE4 RET
	0x03396BE8 MOV X0, X31
	0x03396BEC RET
	0x03396BF0 MOV X0, X31
	0x03396BF4 RET
	0x03396BF8 LDR X8, [X0]
	0x03396BFC LDR X2, [X8 + 0x348]
	0x03396C00 LDR X1, [X8 + 0x350]
	0x03396C04 BR X2
	0x03396C08 LDR X8, [X0]
	0x03396C0C LDR X2, [X8 + 0x368]
	0x03396C10 LDR X1, [X8 + 0x370]
	0x03396C14 BR X2
	0x03396C18 LDR X8, [X0]
	0x03396C1C LDR X2, [X8 + 0x388]
	0x03396C20 LDR X1, [X8 + 0x390]
	0x03396C24 BR X2
	0x03396C28 STP X30, X19, [X31 - 0x10]!
	0x03396C2C BL 0x3396C4C
	0x03396C30 MOV X19, X0
	0x03396C34 ADRP X0, 0xD95000
	0x03396C38 LDR X0, [X0 + 0x440]
	0x03396C3C BL 0x1C16D08
	0x03396C40 MOV X1, X0
	0x03396C44 MOV X0, X19
	0x03396C48 BL 0x1C16DEC
	0x03396C4C STR X30, [X31 - 0x20]!
	0x03396C50 STP X20, X19, [X31 + 0x10]
	0x03396C54 ADRP X19, 0x1047000
	0x03396C58 ADRP X20, 0xD66000
	0x03396C5C LDRB W8, [X19 + 0x108]
	0x03396C60 LDR X20, [X20 + 0x758]
	0x03396C64 TBNZ X8, 0x0, 0x3396C7C
	0x03396C68 ADRP X0, 0xD66000
	0x03396C6C LDR X0, [X0 + 0x758]
	0x03396C70 BL 0x1C16CF4
	0x03396C74 MOVZ W8, 0x1
	0x03396C78 STRB W8, [X19 + 0x108]
	0x03396C7C LDR X0, [X20]
	0x03396C80 BL 0x1C16F10
	0x03396C84 MOV X1, X31
	0x03396C88 MOV X19, X0
	0x03396C8C BL 0x3380288
	0x03396C90 MOV X0, X19
	0x03396C94 LDP X20, X19, [X31 + 0x10]
	0x03396C98 LDR X30, [X31], #0x20
	0x03396C9C RET
	0x03396CA0 MOV W0, W31
	0x03396CA4 RET
	0x03396CA8 STP X30, X19, [X31 - 0x10]!
	0x03396CAC LDR X8, [X0]
	0x03396CB0 MOV X19, X0
	0x03396CB4 LDR X9, [X8 + 0x3A8]
	0x03396CB8 LDR X1, [X8 + 0x3B0]
	0x03396CBC BLR X9
	0x03396CC0 TBZ X0, 0x0, 0x3396CE8
	0x03396CC4 LDR X8, [X19]
	0x03396CC8 MOV X0, X19
	0x03396CCC LDR X9, [X8 + 0x318]
	0x03396CD0 LDR X1, [X8 + 0x320]
	0x03396CD4 BLR X9
	0x03396CD8 MOV X1, X31
	0x03396CDC MOV X2, X31
	0x03396CE0 LDP X30, X19, [X31], #0x10
	0x03396CE4 B 0x32CE114
	0x03396CE8 MOV W0, W31
	0x03396CEC LDP X30, X19, [X31], #0x10
	0x03396CF0 RET
	0x03396CF4 MOV W0, W31
	0x03396CF8 RET
	0x03396CFC MOV W0, W31
	0x03396D00 RET
	0x03396D04 STP X30, X19, [X31 - 0x10]!
	0x03396D08 BL 0x3396C4C
	0x03396D0C MOV X19, X0
	0x03396D10 ADRP X0, 0xD95000
	0x03396D14 LDR X0, [X0 + 0x448]
	0x03396D18 BL 0x1C16D08
	0x03396D1C MOV X1, X0
	0x03396D20 MOV X0, X19
	0x03396D24 BL 0x1C16DEC
	0x03396D28 STP X30, X19, [X31 - 0x10]!
	0x03396D2C LDR X8, [X0]
	0x03396D30 MOV X19, X0
	0x03396D34 LDR X9, [X8 + 0x348]
	0x03396D38 LDR X1, [X8 + 0x350]
	0x03396D3C BLR X9
	0x03396D40 TBZ X0, 0x0, 0x3396D60

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W20, W1
	007 Move X19, X0
	008 Call 0x1C25D70
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X0, X19
	011 Move W1, W31
	012 Call 0x1C25D2C
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move W21, W0
	015 Move X0, X19
	016 Move W1, W31
	017 Call 0x1C25D2C
	018 Move W22, W0
	019 Move X0, X19
	020 Move W1, W31
	021 Call 0x1C25CE8
	022 Add W8, W22, W0
	023 Subtract W8, W8, 1
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X0, X19
	026 Move X1, X31
	027 Call "il2cpp_vm_object_is_inst", X0
	028 Compare X0, 0
	029 JumpIfEqual {65}
	030 Move X8, [X0]
	031 Move X9, [X8+1064]
	032 Move X1, [X8+1072]
	033 NotImplemented "Instruction BLR not yet implemented."
	034 Compare X0, 0
	035 JumpIfEqual {65}
	036 Move X8, [X0]
	037 Move X9, [X8+904]
	038 Move X1, [X8+912]
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfEqual {78}
	044 Subtract W1, W20, W21
	045 Move X0, X19
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X30, [X31+48]
	051 Call 0x1C25EAC
	052 Return X0
	053 Move X0, 0xD68000
	054 Move X0, [X0+3960]
	055 Call 0x1C17D08
	056 Call 0x1C17F10
	057 Move X19, X0
	058 Move X0, 0xD96000
	059 Move X0, [X0+1032]
	060 Call 0x1C17D08
	061 Move X1, X0
	062 Move X0, X19
	063 Move X2, X31
	064 Call IndexOutOfRangeException..ctor, X0, X1
	065 Call 0x1C17F20
	066 Move X0, 0xD66000
	067 Move X0, [X0+1400]
	068 Call 0x1C17D08
	069 Call 0x1C17F10
	070 Move X19, X0
	071 Move X0, 0xD87000
	072 Move X0, [X0+776]
	073 Call 0x1C17D08
	074 Move X1, X0
	075 Move X0, X19
	076 Move X2, X31
	077 Call ArgumentException..ctor, X0, X1
	078 Move X0, 0xD5E000
	079 Move X0, [X0+2880]
	080 Call 0x1C17D08
	081 Call 0x1C17F10
	082 Move X19, X0
	083 Move X0, 0xD96000
	084 Move X0, [X0+1040]
	085 Call 0x1C17D08
	086 Move X1, X0
	087 Move X0, X19
	088 Move X2, X31
	089 Call NotSupportedException..ctor, X0, X1
	090 Move X0, 0xD96000
	091 Move X0, [X0+1048]
	092 Call 0x1C17D08
	093 Move X1, X0
	094 Move X0, X19
	095 Call 0x1C17DEC

Method: System.Object GetValue(System.Int32 index1, System.Int32 index2)

Disassembly:
	0x033A2004 MOV X20, X0
	0x033A2008 ADRP X0, 0xD89000
	0x033A200C LDR X0, [X0 + 0x970]
	0x033A2010 BL 0x1C16D08
	0x033A2014 MOV X2, X0
	0x033A2018 MOV X0, X19
	0x033A201C MOV X1, X20
	0x033A2020 MOV X3, X31
	0x033A2024 BL 0x3311888
	0x033A2028 ADRP X0, 0xD89000
	0x033A202C LDR X0, [X0 + 0xB38]
	0x033A2030 BL 0x1C16D08
	0x033A2034 MOV X1, X0
	0x033A2038 MOV X0, X19
	0x033A203C BL 0x1C16DEC
	0x033A2040 STP X30, X25, [X31 - 0x40]!
	0x033A2044 STP X24, X23, [X31 + 0x10]
	0x033A2048 STP X22, X21, [X31 + 0x20]
	0x033A204C STP X20, X19, [X31 + 0x30]
	0x033A2050 ADRP X24, 0x103B000
	0x033A2054 ADRP X25, 0xD52000
	0x033A2058 LDRB W8, [X24 + 0x135]
	0x033A205C LDR X25, [X25 + 0xE58]
	0x033A2060 MOV W19, W4
	0x033A2064 MOV W22, W3
	0x033A2068 MOV W23, W2
	0x033A206C MOV X20, X1
	0x033A2070 MOV X21, X0
	0x033A2074 TBNZ X8, 0x0, 0x33A208C
	0x033A2078 ADRP X0, 0xD52000
	0x033A207C LDR X0, [X0 + 0xE58]
	0x033A2080 BL 0x1C16CF4
	0x033A2084 MOVZ W8, 0x1
	0x033A2088 STRB W8, [X24 + 0x135]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x103C000
	008 Move X23, 0xD53000
	009 Move W8, [X22+306]
	010 Move X23, [X23+3672]
	011 Move W19, W2
	012 Move W21, W1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xD53000
	019 Move X0, [X0+3672]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+306], W8
	023 Move X0, [X23]
	024 Move W1, 2
	025 Call 0x1C17D6C
	026 Compare X0, 0
	027 JumpIfEqual {45}
	028 Move W8, [X0+24]
	029 Move X1, X0
	030 Compare W8, 0
	031 JumpIfEqual {44}
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move [X1+32], W21
	034 Move [X1+36], W19
	035 Move X0, X20
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X30, [X31+48]
	041 Move X23, [X31+56]
	042 Call 0x1C25D7C
	043 Return X0
	044 Call 0x1C17F28
	045 Call 0x1C17F20

Method: System.Object GetValue(System.Int32 index1, System.Int32 index2, System.Int32 index3)

Disassembly:
	0x033A2154 CMP W8, 0x1
	0x033A2158 B.LT 0x33A219C
	0x033A215C MOV X9, X31
	0x033A2160 ADD X10, X2, 0x20
	0x033A2164 ADD X11, X21, 0x20
	0x033A2168 CMP W9, W8
	0x033A216C B.CS 0x33A21B4
	0x033A2170 LDR X12, [X11, X9, LSL #3]
	0x033A2174 CMP X12, W12, SXTW
	0x033A2178 B.NE 0x33A21B8
	0x033A217C CBZ X2, 0x33A2214
	0x033A2180 LDR W13, [X2 + 0x18]
	0x033A2184 CMP W9, W13
	0x033A2188 B.CS 0x33A21B4
	0x033A218C STR W12, [X10, X9, LSL #2]
	0x033A2190 ADD X9, X9, 0x1
	0x033A2194 CMP W9, W8
	0x033A2198 B.LT 0x33A2168
	0x033A219C MOV X0, X20
	0x033A21A0 MOV X1, X19
	0x033A21A4 LDP X20, X19, [X31 + 0x20]
	0x033A21A8 LDP X22, X21, [X31 + 0x10]
	0x033A21AC LDR X30, [X31], #0x30
	0x033A21B0 B 0x1C24F1C
	0x033A21B4 BL 0x1C16F28
	0x033A21B8 ADRP X0, 0xD59000
	0x033A21BC LDR X0, [X0 + 0x760]
	0x033A21C0 BL 0x1C16D08
	0x033A21C4 BL 0x1C16F10
	0x033A21C8 MOV X19, X0
	0x033A21CC ADRP X0, 0xD5C000
	0x033A21D0 LDR X0, [X0 + 0x130]
	0x033A21D4 BL 0x1C16D08
	0x033A21D8 MOV X20, X0
	0x033A21DC ADRP X0, 0xD89000
	0x033A21E0 LDR X0, [X0 + 0x970]
	0x033A21E4 BL 0x1C16D08
	0x033A21E8 MOV X2, X0
	0x033A21EC MOV X0, X19
	0x033A21F0 MOV X1, X20

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x103C000
	009 Move X24, 0xD53000
	010 Move W8, [X23+307]
	011 Move X24, [X24+3672]
	012 Move W19, W3
	013 Move W21, W2
	014 Move W22, W1
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xD53000
	021 Move X0, [X0+3672]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+307], W8
	025 Move X0, [X24]
	026 Move W1, 3
	027 Call 0x1C17D6C
	028 Compare X0, 0
	029 JumpIfEqual {50}
	030 Move W8, [X0+24]
	031 Move X1, X0
	032 Compare W8, 0
	033 JumpIfEqual {49}
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move [X1+32], W22
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move [X1+36], W21
	038 Move [X1+40], W19
	039 Move X0, X20
	040 Move X20, [X31+48]
	041 Move X19, [X31+56]
	042 Move X22, [X31+32]
	043 Move X21, [X31+40]
	044 Move X24, [X31+16]
	045 Move X23, [X31+24]
	046 Move X30, [X31+64]
	047 Call 0x1C25D7C
	048 Return X0
	049 Call 0x1C17F28
	050 Call 0x1C17F20

Method: System.Void SetValue(System.Object value, System.Int32 index)

Disassembly:
	0x033A0798 MOV X20, X3
	0x033A079C MOV W23, W2
	0x033A07A0 MOV W19, W1
	0x033A07A4 MOV X22, X0
	0x033A07A8 TBNZ X8, 0x0, 0x33A07D8
	0x033A07AC ADRP X0, 0xD7C000
	0x033A07B0 LDR X0, [X0 + 0xD30]
	0x033A07B4 BL 0x1C16CF4
	0x033A07B8 ADRP X0, 0xD7D000
	0x033A07BC LDR X0, [X0 + 0x918]
	0x033A07C0 BL 0x1C16CF4
	0x033A07C4 ADRP X0, 0xD53000
	0x033A07C8 LDR X0, [X0 + 0x9D0]
	0x033A07CC BL 0x1C16CF4
	0x033A07D0 MOVZ W8, 0x1
	0x033A07D4 STRB W8, [X24 + 0x12C]
	0x033A07D8 CBZ X22, 0x33A09D8
	0x033A07DC TBNZ X23, 0x1F, 0x33A0A0C
	0x033A07E0 TBNZ X19, 0x1F, 0x33A0A0C
	0x033A07E4 MOV X0, X22
	0x033A07E8 BL 0x3395B7C
	0x033A07EC SUB W8, W0, W19
	0x033A07F0 CMP W8, W23
	0x033A07F4 B.LT 0x33A0A64
	0x033A07F8 MOV X0, X22
	0x033A07FC BL 0x1C24D70
	0x033A0800 CMP W0, 0x1
	0x033A0804 B.NE 0x33A0A98
	0x033A0808 ADRP X24, 0xD53000
	0x033A080C LDR X24, [X24 + 0x9D0]
	0x033A0810 CBNZ X21, 0x33A0838
	0x033A0814 ADRP X21, 0xD7C000
	0x033A0818 LDR X21, [X21 + 0xD30]
	0x033A081C LDR X0, [X21]
	0x033A0820 LDR W8, [X0 + 0xE0]
	0x033A0824 CBNZ W8, 0x33A0830
	0x033A0828 BL 0x1C16DFC
	0x033A082C LDR X0, [X21]
	0x033A0830 LDR X8, [X0 + 0xB8]
	0x033A0834 LDR X21, [X8]
	0x033A0838 LDR X1, [X24]
	0x033A083C ADD W8, W19, W23
	0x033A0840 MOV X0, X22
	0x033A0844 SUB W25, W8, 0x1
	0x033A0848 BL 0x1C16E00
	0x033A084C CMP W25, W19
	0x033A0850 CBZ X0, 0x33A0904
	0x033A0854 B.LT 0x33A0908
	0x033A0858 ADRP X26, 0xD7D000
	0x033A085C LDR X26, [X26 + 0x918]
	0x033A0860 MOV X24, X0
	0x033A0864 LDR W8, [X24 + 0x18]
	0x033A0868 SUB W9, W25, W19
	0x033A086C ADD W23, W19, W9, 0x1, ASR
	0x033A0870 CMP W23, W8
	0x033A0874 B.CS 0x33A09D0
	0x033A0878 CBZ X21, 0x33A09CC
	0x033A087C LDR X8, [X21]
	0x033A0880 ADD X9, X24, W23, 0x3, SXTW
	0x033A0884 LDR X22, [X9 + 0x20]
	0x033A0888 LDR X1, [X26]
	0x033A088C LDRH W9, [X8 + 0x12E]
	0x033A0890 CBZ X9, 0x33A08B4
	0x033A0894 LDR X10, [X8 + 0xB0]
	0x033A0898 ADD X10, X10, 0x8
	0x033A089C LDUR X11, [X10 - 0x8]
	0x033A08A0 CMP X11, X1
	0x033A08A4 B.EQ 0x33A08C4
	0x033A08A8 SUBS X9, X9, 0x1
	0x033A08AC ADD X10, X10, 0x10
	0x033A08B0 B.NE 0x33A089C
	0x033A08B4 MOV X0, X21
	0x033A08B8 MOV W2, W31
	0x033A08BC BL 0x1C5C788
	0x033A08C0 B 0x33A08D0
	0x033A08C4 LDRSW X9, [X10]
	0x033A08C8 ADD X8, X8, X9, 0x4, LSL
	0x033A08CC ADD X0, X8, 0x138
	0x033A08D0 LDP X8, X3, [X0]
	0x033A08D4 MOV X0, X21
	0x033A08D8 MOV X1, X22
	0x033A08DC MOV X2, X20
	0x033A08E0 BLR X8
	0x033A08E4 CBZ W0, 0x33A090C
	0x033A08E8 TBZ X0, 0x1F, 0x33A08FC
	0x033A08EC ADD W19, W23, 0x1
	0x033A08F0 CMP W25, W19
	0x033A08F4 B.GE 0x33A0864
	0x033A08F8 B 0x33A0908
	0x033A08FC SUB W25, W23, 0x1
	0x033A0900 B 0x33A08F0
	0x033A0904 B.GE 0x33A0928

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move W20, W2
	008 Move X19, X1
	009 Move X21, X0
	010 Call 0x1C25D70
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move X0, X21
	013 Move W1, W31
	014 Call 0x1C25D2C
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move W22, W0
	017 Move X0, X21
	018 Move W1, W31
	019 Call 0x1C25D2C
	020 Move W23, W0
	021 Move X0, X21
	022 Move W1, W31
	023 Call 0x1C25CE8
	024 Add W8, W23, W0
	025 Subtract W8, W8, 1
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X0, X21
	028 Move X1, X31
	029 Call "il2cpp_vm_object_is_inst", X0
	030 Compare X0, 0
	031 JumpIfEqual {69}
	032 Move X8, [X0]
	033 Move X9, [X8+1064]
	034 Move X1, [X8+1072]
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Compare X0, 0
	037 JumpIfEqual {69}
	038 Move X8, [X0]
	039 Move X9, [X8+904]
	040 Move X1, [X8+912]
	041 NotImplemented "Instruction BLR not yet implemented."
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfEqual {82}
	046 Subtract W2, W20, W22
	047 Move X0, X21
	048 Move X1, X19
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Move X23, [X31+56]
	055 Call 0x1C2600C
	056 Return 
	057 Move X0, 0xD5E000
	058 Move X0, [X0+3960]
	059 Call 0x1C17D08
	060 Call 0x1C17F10
	061 Move X19, X0
	062 Move X0, 0xD8C000
	063 Move X0, [X0+2480]
	064 Call 0x1C17D08
	065 Move X1, X0
	066 Move X0, X19
	067 Move X2, X31
	068 Call IndexOutOfRangeException..ctor, X0, X1
	069 Call 0x1C17F20
	070 Move X0, 0xD5C000
	071 Move X0, [X0+1400]
	072 Call 0x1C17D08
	073 Call 0x1C17F10
	074 Move X19, X0
	075 Move X0, 0xD7D000
	076 Move X0, [X0+776]
	077 Call 0x1C17D08
	078 Move X1, X0
	079 Move X0, X19
	080 Move X2, X31
	081 Call ArgumentException..ctor, X0, X1
	082 Move X0, 0xD54000
	083 Move X0, [X0+2880]
	084 Call 0x1C17D08
	085 Call 0x1C17F10
	086 Move X19, X0
	087 Move X0, 0xD8C000
	088 Move X0, [X0+1040]
	089 Call 0x1C17D08
	090 Move X1, X0
	091 Move X0, X19
	092 Move X2, X31
	093 Call NotSupportedException..ctor, X0, X1
	094 Move X0, 0xD8C000
	095 Move X0, [X0+2488]
	096 Call 0x1C17D08
	097 Move X1, X0
	098 Move X0, X19
	099 Call 0x1C17DEC

Method: System.Void SetValue(System.Object value, System.Int32 index1, System.Int32 index2)

Disassembly:
	0x033A2EE0 CMP W8, 0x2
	0x033A2EE4 STR W21, [X1 + 0x24]
	0x033A2EE8 B.LS 0x33A2F08
	0x033A2EEC STR W19, [X1 + 0x28]
	0x033A2EF0 MOV X0, X20
	0x033A2EF4 LDP X20, X19, [X31 + 0x30]
	0x033A2EF8 LDP X22, X21, [X31 + 0x20]
	0x033A2EFC LDP X24, X23, [X31 + 0x10]
	0x033A2F00 LDR X30, [X31], #0x40
	0x033A2F04 B 0x339F500
	0x033A2F08 BL 0x1C16F28
	0x033A2F0C BL 0x1C16F20
	0x033A2F10 B 0x1C24EE0
	0x033A2F14 STR X30, [X31 - 0x20]!
	0x033A2F18 STP X20, X19, [X31 + 0x10]
	0x033A2F1C ADRP X19, 0x103B000
	0x033A2F20 ADRP X20, 0xD7A000
	0x033A2F24 LDRB W8, [X19 + 0x13B]
	0x033A2F28 LDR X20, [X20 + 0x320]
	0x033A2F2C TBNZ X8, 0x0, 0x33A2F44
	0x033A2F30 ADRP X0, 0xD7A000
	0x033A2F34 LDR X0, [X0 + 0x320]
	0x033A2F38 BL 0x1C16CF4
	0x033A2F3C MOVZ W8, 0x1
	0x033A2F40 STRB W8, [X19 + 0x13B]
	0x033A2F44 LDR X0, [X20]
	0x033A2F48 BL 0x1C16F10
	0x033A2F4C MOV X1, X31
	0x033A2F50 MOV X19, X0
	0x033A2F54 BL 0x3316388
	0x033A2F58 MOV X0, X19
	0x033A2F5C LDP X20, X19, [X31 + 0x10]
	0x033A2F60 LDR X30, [X31], #0x20
	0x033A2F64 RET
	0x033A2F68 STR X30, [X31 - 0x20]!
	0x033A2F6C STP X20, X19, [X31 + 0x10]
	0x033A2F70 CBZ X0, 0x33A3038
	0x033A2F74 LDR X8, [X0]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x103C000
	009 Move X24, 0xD53000
	010 Move W8, [X23+308]
	011 Move X24, [X24+3672]
	012 Move W20, W3
	013 Move W22, W2
	014 Move X19, X1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xD53000
	021 Move X0, [X0+3672]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+308], W8
	025 Move X0, [X24]
	026 Move W1, 2
	027 Call 0x1C17D6C
	028 Compare X0, 0
	029 JumpIfEqual {49}
	030 Move W8, [X0+24]
	031 Move X2, X0
	032 Compare W8, 0
	033 JumpIfEqual {48}
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move [X2+32], W22
	036 Move [X2+36], W20
	037 Move X0, X21
	038 Move X1, X19
	039 Move X20, [X31+48]
	040 Move X19, [X31+56]
	041 Move X22, [X31+32]
	042 Move X21, [X31+40]
	043 Move X24, [X31+16]
	044 Move X23, [X31+24]
	045 Move X30, [X31+64]
	046 Call 0x1C25F1C
	047 Return 
	048 Call 0x1C17F28
	049 Call 0x1C17F20

Method: System.Void SetValue(System.Object value, System.Int32 index1, System.Int32 index2, System.Int32 index3)

Disassembly:
	0x033A3040 RET
	0x033A3044 SUB X31, X31, 0x60
	0x033A3048 STP X30, X25, [X31 + 0x20]
	0x033A304C STP X24, X23, [X31 + 0x30]
	0x033A3050 STP X22, X21, [X31 + 0x40]
	0x033A3054 STP X20, X19, [X31 + 0x50]
	0x033A3058 MRS X22, 0xC000
	0x033A305C LDR X8, [X22 + 0x28]
	0x033A3060 ADRP X21, 0x103A000
	0x033A3064 MOV X19, X1
	0x033A3068 MOV X20, X0
	0x033A306C STR X8, [X31 + 0x18]
	0x033A3070 LDRB W8, [X21 + 0x13D]
	0x033A3074 CBNZ W8, 0x33A30B0
	0x033A3078 ADRP X0, 0xD88000
	0x033A307C LDR X0, [X0 + 0x2C0]
	0x033A3080 BL 0x1C16CF4
	0x033A3084 ADRP X0, 0xD88000
	0x033A3088 LDR X0, [X0 + 0x2C8]
	0x033A308C BL 0x1C16CF4
	0x033A3090 ADRP X0, 0xD88000
	0x033A3094 LDR X0, [X0 + 0x2D0]
	0x033A3098 BL 0x1C16CF4
	0x033A309C ADRP X0, 0xD88000
	0x033A30A0 LDR X0, [X0 + 0x2B8]
	0x033A30A4 BL 0x1C16CF4
	0x033A30A8 MOVZ W8, 0x1
	0x033A30AC STRB W8, [X21 + 0x13D]
	0x033A30B0 ADRP X8, 0xD88000
	0x033A30B4 LDR X8, [X8 + 0x2B8]
	0x033A30B8 STP X31, X31, [X31 + 0x8]
	0x033A30BC LDR X21, [X8]
	0x033A30C0 LDR X8, [X21 + 0x38]
	0x033A30C4 CBNZ X8, 0x33A30D4
	0x033A30C8 MOV X0, X21
	0x033A30CC BL 0x1C5C6E0
	0x033A30D0 LDR X8, [X21 + 0x38]
	0x033A30D4 LDR X0, [X8 + 0x10]
	0x033A30D8 LDRB W8, [X0 + 0x135]
	0x033A30DC TBNZ X8, 0x0, 0x33A30E4
	0x033A30E0 BL 0x1C5C684
	0x033A30E4 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0x103B000
	010 Move X25, 0xD52000
	011 Move W8, [X24+309]
	012 Move X25, [X25+3672]
	013 Move W19, W4
	014 Move W22, W3
	015 Move W23, W2
	016 Move X20, X1
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xD52000
	023 Move X0, [X0+3672]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+309], W8
	027 Move X0, [X25]
	028 Move W1, 3
	029 Call 0x1C17D6C
	030 Compare X0, 0
	031 JumpIfEqual {54}
	032 Move W8, [X0+24]
	033 Move X2, X0
	034 Compare W8, 0
	035 JumpIfEqual {53}
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move [X2+32], W23
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move [X2+36], W22
	040 Move [X2+40], W19
	041 Move X0, X21
	042 Move X1, X20
	043 Move X20, [X31+48]
	044 Move X19, [X31+56]
	045 Move X22, [X31+32]
	046 Move X21, [X31+40]
	047 Move X24, [X31+16]
	048 Move X23, [X31+24]
	049 Move X30, [X31+64]
	050 Move X25, [X31+72]
	051 Call 0x1C25F1C
	052 Return 
	053 Call 0x1C17F28
	054 Call 0x1C17F20

Method: System.Array UnsafeCreateInstance(System.Type elementType, System.Int32[] lengths, System.Int32[] lowerBounds)

Disassembly:
	0x033A39A0 STP X30, X21, [X31 - 0x20]!

ISIL:
No ISIL was generated
Method: System.Array UnsafeCreateInstance(System.Type elementType, System.Int32 length1, System.Int32 length2)

Disassembly:
	0x033A3D68 LDR X1, [X8 + 0x40]

ISIL:
No ISIL was generated
Method: System.Array UnsafeCreateInstance(System.Type elementType, System.Int32[] lengths)

Disassembly:
	0x033A3DF4 MOV W23, W29

ISIL:
	001 Call Array.CreateInstance, X0, X1
	002 Return X0

Method: System.Array CreateInstance(System.Type elementType, System.Int32 length)

Disassembly:
	0x033A3DF8 CBZ X24, 0x33A3E98
	0x033A3DFC CBZ X22, 0x33A3E14
	0x033A3E00 LDR X8, [X24]
	0x033A3E04 MOV X0, X22
	0x033A3E08 LDR X1, [X8 + 0x40]
	0x033A3E0C BL 0x1C16E00
	0x033A3E10 CBZ X0, 0x33A3E9C
	0x033A3E14 LDR W9, [X24 + 0x18]
	0x033A3E18 ADD W8, W23, 0x1
	0x033A3E1C CMP W8, W9
	0x033A3E20 B.CS 0x33A3E94
	0x033A3E24 SXTW X23, W8
	0x033A3E28 ADD X8, X24, X23, 0x3, LSL
	0x033A3E2C STR X22, [X8 + 0x20]
	0x033A3E30 LDR X22, [X20 + 0x8]
	0x033A3E34 CBZ X22, 0x33A3E64
	0x033A3E38 CBZ X21, 0x33A3E50
	0x033A3E3C LDR X8, [X22]
	0x033A3E40 MOV X0, X21
	0x033A3E44 LDR X1, [X8 + 0x40]
	0x033A3E48 BL 0x1C16E00
	0x033A3E4C CBZ X0, 0x33A3E9C
	0x033A3E50 LDR W8, [X22 + 0x18]
	0x033A3E54 CMP W23, W8
	0x033A3E58 B.CS 0x33A3E94
	0x033A3E5C ADD X8, X22, X23, 0x3, LSL
	0x033A3E60 STR X21, [X8 + 0x20]
	0x033A3E64 LDR X8, [X31]
	0x033A3E68 MOV X23, X28
	0x033A3E6C CMP X28, X8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x103B000
	007 Move X22, 0xD52000
	008 Move W8, [X21+310]
	009 Move X22, [X22+3672]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD52000
	017 Move X0, [X0+3672]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+310], W8
	021 Move X0, [X22]
	022 Move W1, 1
	023 Call 0x1C17D6C
	024 Compare X0, 0
	025 JumpIfEqual {39}
	026 Move W8, [X0+24]
	027 Move X1, X0
	028 Compare W8, 0
	029 JumpIfEqual {40}
	030 Move [X1+32], W20
	031 Move X0, X19
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move X30, [X31+48]
	037 Call Array.CreateInstance, X0, X1
	038 Return X0
	039 Call 0x1C17F20
	040 Call 0x1C17F28

Method: System.Array CreateInstance(System.Type elementType, System.Int32 length1, System.Int32 length2)

Disassembly:
	0x033A3D6C BL 0x1C16E00
	0x033A3D70 CBZ X0, 0x33A3E9C
	0x033A3D74 LDR W8, [X25 + 0x18]
	0x033A3D78 ADD W9, W29, 0x1
	0x033A3D7C CMP W9, W8
	0x033A3D80 B.CS 0x33A3E94
	0x033A3D84 SXTW X24, W9
	0x033A3D88 ADD X8, X25, X24, 0x3, LSL
	0x033A3D8C STR X23, [X8 + 0x20]
	0x033A3D90 LDR X25, [X20 + 0x8]
	0x033A3D94 CBZ X25, 0x33A3DD8
	0x033A3D98 LDR W8, [X25 + 0x18]
	0x033A3D9C CMP W29, W8
	0x033A3DA0 B.CS 0x33A3E94
	0x033A3DA4 ADD X9, X25, X26, 0x3, LSL
	0x033A3DA8 LDR X23, [X9 + 0x20]
	0x033A3DAC CBZ X23, 0x33A3DC8
	0x033A3DB0 LDR X8, [X25]
	0x033A3DB4 MOV X0, X23
	0x033A3DB8 LDR X1, [X8 + 0x40]
	0x033A3DBC BL 0x1C16E00
	0x033A3DC0 CBZ X0, 0x33A3E9C
	0x033A3DC4 LDR W8, [X25 + 0x18]
	0x033A3DC8 CMP W24, W8
	0x033A3DCC B.CS 0x33A3E94
	0x033A3DD0 ADD X8, X25, X24, 0x3, LSL
	0x033A3DD4 STR X23, [X8 + 0x20]
	0x033A3DD8 SUB W29, W29, 0x1
	0x033A3DDC CMP W29, W19
	0x033A3DE0 B.LT 0x33A3DF0
	0x033A3DE4 LDR X24, [X20]
	0x033A3DE8 CBNZ X24, 0x33A3CBC
	0x033A3DEC B 0x33A3E98
	0x033A3DF0 LDR X24, [X20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x103B000
	008 Move X23, 0xD52000
	009 Move W8, [X22+311]
	010 Move X23, [X23+3672]
	011 Move W19, W2
	012 Move W21, W1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xD52000
	019 Move X0, [X0+3672]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+311], W8
	023 Move X0, [X23]
	024 Move W1, 2
	025 Call 0x1C17D6C
	026 Compare X0, 0
	027 JumpIfEqual {45}
	028 Move W8, [X0+24]
	029 Move X1, X0
	030 Compare W8, 0
	031 JumpIfEqual {44}
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move [X1+32], W21
	034 Move [X1+36], W19
	035 Move X0, X20
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X30, [X31+48]
	041 Move X23, [X31+56]
	042 Call Array.CreateInstance, X0, X1
	043 Return X0
	044 Call 0x1C17F28
	045 Call 0x1C17F20

Method: System.Array CreateInstance(System.Type elementType, System.Int32 length1, System.Int32 length2, System.Int32 length3)

Disassembly:
	0x033A3E70 B.NE 0x33A3C68
	0x033A3E74 LDP X20, X19, [X31 + 0x60]
	0x033A3E78 LDP X22, X21, [X31 + 0x50]
	0x033A3E7C LDP X24, X23, [X31 + 0x40]
	0x033A3E80 LDP X26, X25, [X31 + 0x30]
	0x033A3E84 LDP X28, X27, [X31 + 0x20]
	0x033A3E88 LDP X29, X30, [X31 + 0x10]
	0x033A3E8C ADD X31, X31, 0x70
	0x033A3E90 RET
	0x033A3E94 BL 0x1C16F28
	0x033A3E98 BL 0x1C16F20
	0x033A3E9C BL 0x1C16F44
	0x033A3EA0 MOV X1, X31
	0x033A3EA4 BL 0x1C16DEC
	0x033A3EA8 STP X30, X23, [X31 - 0x30]!
	0x033A3EAC STP X22, X21, [X31 + 0x10]
	0x033A3EB0 STP X20, X19, [X31 + 0x20]
	0x033A3EB4 SUB W8, W2, W1
	0x033A3EB8 ADD W22, W8, 0x1
	0x033A3EBC CMP W22, 0x2
	0x033A3EC0 B.LT 0x33A3F38
	0x033A3EC4 MOV W19, W2
	0x033A3EC8 MOV W20, W1
	0x033A3ECC MOV X21, X0
	0x033A3ED0 UBFM W23, W22, 0x1, 0x1F
	0x033A3ED4 MOV X0, X21
	0x033A3ED8 MOV W1, W23
	0x033A3EDC MOV W2, W22
	0x033A3EE0 MOV W3, W20
	0x033A3EE4 BL 0x33A4174
	0x033A3EE8 SUBS W23, W23, 0x1
	0x033A3EEC B.GT 0x33A3ED4
	0x033A3EF0 CMP W22, 0x2
	0x033A3EF4 B.LT 0x33A3F38
	0x033A3EF8 SUB W23, W31, W20
	0x033A3EFC MOV X0, X21
	0x033A3F00 MOV W1, W20
	0x033A3F04 MOV W2, W19
	0x033A3F08 ADD W22, W23, W19
	0x033A3F0C BL 0x33A3838

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x103B000
	009 Move X24, 0xD52000
	010 Move W8, [X23+312]
	011 Move X24, [X24+3672]
	012 Move W19, W3
	013 Move W21, W2
	014 Move W22, W1
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xD52000
	021 Move X0, [X0+3672]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+312], W8
	025 Move X0, [X24]
	026 Move W1, 3
	027 Call 0x1C17D6C
	028 Compare X0, 0
	029 JumpIfEqual {50}
	030 Move W8, [X0+24]
	031 Move X1, X0
	032 Compare W8, 0
	033 JumpIfEqual {49}
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move [X1+32], W22
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move [X1+36], W21
	038 Move [X1+40], W19
	039 Move X0, X20
	040 Move X20, [X31+48]
	041 Move X19, [X31+56]
	042 Move X22, [X31+32]
	043 Move X21, [X31+40]
	044 Move X24, [X31+16]
	045 Move X23, [X31+24]
	046 Move X30, [X31+64]
	047 Call Array.CreateInstance, X0, X1
	048 Return X0
	049 Call 0x1C17F28
	050 Call 0x1C17F20

Method: System.Array CreateInstance(System.Type elementType, System.Int32[] lengths)

Disassembly:
	0x033A0500 B 0x33A0510
	0x033A0504 LDRSW X9, [X10]
	0x033A0508 ADD X8, X8, X9, 0x4, LSL
	0x033A050C ADD X0, X8, 0x138
	0x033A0510 LDP X8, X3, [X0]
	0x033A0514 MOV X0, X19
	0x033A0518 MOV X1, X23
	0x033A051C MOV X2, X24
	0x033A0520 BLR X8
	0x033A0524 MOV W23, W0
	0x033A0528 TBZ X0, 0x0, 0x33A0550
	0x033A052C MOV X0, X21
	0x033A0530 ADD W22, W22, 0x1
	0x033A0534 BL 0x3395B7C
	0x033A0538 CMP W22, W0
	0x033A053C B.LT 0x33A04A0
	0x033A0540 B 0x33A0550
	0x033A0544 MOV W23, W31
	0x033A0548 B 0x33A0550
	0x033A054C MOVZ W23, 0x1
	0x033A0550 AND W0, W23, 0x1
	0x033A0554 LDP X20, X19, [X31 + 0x30]
	0x033A0558 LDP X22, X21, [X31 + 0x20]
	0x033A055C LDP X24, X23, [X31 + 0x10]
	0x033A0560 LDP X30, X25, [X31], #0x40
	0x033A0564 RET
	0x033A0568 BL 0x1C16F20
	0x033A056C ADD W8, W0, W0, 0x5, LSL
	0x033A0570 EOR W0, W8, W1, 0x0
	0x033A0574 RET
	0x033A0578 STR X30, [X31 - 0x40]!
	0x033A057C STP X24, X23, [X31 + 0x10]
	0x033A0580 STP X22, X21, [X31 + 0x20]
	0x033A0584 STP X20, X19, [X31 + 0x30]
	0x033A0588 ADRP X21, 0x103D000
	0x033A058C LDRB W8, [X21 + 0x12A]
	0x033A0590 MOV X19, X1
	0x033A0594 MOV X20, X0
	0x033A0598 TBNZ X8, 0x0, 0x33A05B0
	0x033A059C ADRP X0, 0xD7D000
	0x033A05A0 LDR X0, [X0 + 0x900]
	0x033A05A4 BL 0x1C16CF4
	0x033A05A8 MOVZ W8, 0x1
	0x033A05AC STRB W8, [X21 + 0x12A]
	0x033A05B0 CBZ X19, 0x33A06A0
	0x033A05B4 MOV X0, X20
	0x033A05B8 BL 0x3395B7C
	0x033A05BC CMP W0, 0x8
	0x033A05C0 B.LT 0x33A05D4
	0x033A05C4 MOV X0, X20
	0x033A05C8 BL 0x3395B7C
	0x033A05CC SUB W21, W0, 0x8
	0x033A05D0 B 0x33A05D8
	0x033A05D4 MOV W21, W31
	0x033A05D8 MOV X0, X20
	0x033A05DC BL 0x3395B7C
	0x033A05E0 CMP W21, W0
	0x033A05E4 B.GE 0x33A0684
	0x033A05E8 ADRP X24, 0xD7D000
	0x033A05EC LDR X24, [X24 + 0x900]
	0x033A05F0 MOV W22, W31
	0x033A05F4 MOV X0, X20
	0x033A05F8 MOV W1, W21
	0x033A05FC BL 0x3395BDC
	0x033A0600 LDR X8, [X19]
	0x033A0604 LDR X1, [X24]
	0x033A0608 MOV X23, X0
	0x033A060C LDRH W9, [X8 + 0x12E]
	0x033A0610 CBZ X9, 0x33A0634
	0x033A0614 LDR X10, [X8 + 0xB0]
	0x033A0618 ADD X10, X10, 0x8
	0x033A061C LDUR X11, [X10 - 0x8]
	0x033A0620 CMP X11, X1
	0x033A0624 B.EQ 0x33A0644
	0x033A0628 SUBS X9, X9, 0x1
	0x033A062C ADD X10, X10, 0x10
	0x033A0630 B.NE 0x33A061C
	0x033A0634 MOVZ W2, 0x1
	0x033A0638 MOV X0, X19
	0x033A063C BL 0x1C5C788
	0x033A0640 B 0x33A0654
	0x033A0644 LDR W9, [X10]
	0x033A0648 ADD W9, W9, 0x1
	0x033A064C ADD X8, X8, W9, 0x4, SXTW
	0x033A0650 ADD X0, X8, 0x138
	0x033A0654 LDP X8, X2, [X0]
	0x033A0658 MOV X0, X19
	0x033A065C MOV X1, X23
	0x033A0660 BLR X8
	0x033A0664 ADD W8, W22, W22, 0x5, LSL
	0x033A0668 EOR W22, W0, W8, 0x0
	0x033A066C MOV X0, X20
	0x033A0670 ADD W21, W21, 0x1
	0x033A0674 BL 0x3395B7C
	0x033A0678 CMP W21, W0
	0x033A067C B.LT 0x33A05F4
	0x033A0680 B 0x33A0688
	0x033A0684 MOV W22, W31
	0x033A0688 MOV W0, W22
	0x033A068C LDP X20, X19, [X31 + 0x30]
	0x033A0690 LDP X22, X21, [X31 + 0x20]
	0x033A0694 LDP X24, X23, [X31 + 0x10]
	0x033A0698 LDR X30, [X31], #0x40
	0x033A069C RET
	0x033A06A0 ADRP X0, 0xD58000
	0x033A06A4 LDR X0, [X0 + 0x528]
	0x033A06A8 BL 0x1C16D08
	0x033A06AC BL 0x1C16F10
	0x033A06B0 MOV X19, X0
	0x033A06B4 ADRP X0, 0xD8B000
	0x033A06B8 LDR X0, [X0 + 0xA60]
	0x033A06BC BL 0x1C16D08
	0x033A06C0 MOV X1, X0
	0x033A06C4 MOV X0, X19
	0x033A06C8 MOV X2, X31
	0x033A06CC BL 0x330E100
	0x033A06D0 ADRP X0, 0xD8B000
	0x033A06D4 LDR X0, [X0 + 0xA68]
	0x033A06D8 BL 0x1C16D08
	0x033A06DC MOV X1, X0
	0x033A06E0 MOV X0, X19
	0x033A06E4 BL 0x1C16DEC
	0x033A06E8 STP X30, X21, [X31 - 0x20]!
	0x033A06EC STP X20, X19, [X31 + 0x10]
	0x033A06F0 CBZ X0, 0x33A0730
	0x033A06F4 MOV X19, X1
	0x033A06F8 MOV W1, W31
	0x033A06FC MOV X20, X0
	0x033A0700 BL 0x1C24D2C
	0x033A0704 MOV W21, W0
	0x033A0708 MOV X0, X20
	0x033A070C BL 0x3395B7C
	0x033A0710 MOV W2, W0
	0x033A0714 MOV X0, X20
	0x033A0718 MOV X3, X19
	0x033A071C LDP X20, X19, [X31 + 0x10]
	0x033A0720 MOV W1, W21
	0x033A0724 MOV X4, X31
	0x033A0728 LDP X30, X21, [X31], #0x20
	0x033A072C B 0x33A0778
	0x033A0730 ADRP X0, 0xD58000
	0x033A0734 LDR X0, [X0 + 0x528]
	0x033A0738 BL 0x1C16D08
	0x033A073C BL 0x1C16F10
	0x033A0740 MOV X19, X0
	0x033A0744 ADRP X0, 0xD7B000
	0x033A0748 LDR X0, [X0 + 0x640]
	0x033A074C BL 0x1C16D08
	0x033A0750 MOV X1, X0
	0x033A0754 MOV X0, X19
	0x033A0758 MOV X2, X31
	0x033A075C BL 0x330E100
	0x033A0760 ADRP X0, 0xD8B000
	0x033A0764 LDR X0, [X0 + 0xA70]
	0x033A0768 BL 0x1C16D08
	0x033A076C MOV X1, X0
	0x033A0770 MOV X0, X19
	0x033A0774 BL 0x1C16DEC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x103E000
	007 Move X21, 0xD54000
	008 Move W8, [X22+313]
	009 Move X21, [X21+1728]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xD7D000
	017 Move X0, [X0+1256]
	018 Call 0x1C17CF4
	019 Move X0, 0xD54000
	020 Move X0, [X0+1728]
	021 Call 0x1C17CF4
	022 Move X0, 0xD85000
	023 Move X0, [X0+2064]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+313], W8
	027 Move X0, [X21]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Compare X20, 0
	033 JumpIfEqual {104}
	034 Compare X19, 0
	035 JumpIfEqual {111}
	036 Move W8, [X19+24]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X8, [X20]
	039 Move X0, X20
	040 Move X9, [X8+808]
	041 Move X1, [X8+816]
	042 NotImplemented "Instruction BLR not yet implemented."
	043 Compare X0, 0
	044 JumpIfEqual {52}
	045 Move X8, 0xD7D000
	046 Move X8, [X8+1256]
	047 Move X9, [X0]
	048 Move X8, [X8]
	049 Move W11, [X9+304]
	050 Move W10, [X8+304]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X20, X31
	053 Move X9, [X9+200]
	054 Add X9, X9, X10
	055 NotImplemented "Instruction LDUR not yet implemented."
	056 NotImplemented "Instruction CMP not yet implemented."
	057 NotImplemented "Instruction CSEL not yet implemented."
	058 Move X0, [X21]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {63}
	062 Call 0x1C17DFC
	063 Compare X20, 0
	064 JumpIfEqual {130}
	065 Move X8, 0xD85000
	066 Move X0, [X21]
	067 Move X8, [X8+2064]
	068 Move W9, [X0+224]
	069 Move X21, [X8]
	070 Compare W9, 0
	071 JumpIfNotEqual {73}
	072 Call 0x1C17DFC
	073 Move X0, X21
	074 Call Type.GetTypeFromHandle, X0
	075 Move X8, [X20]
	076 Move X1, X0
	077 Move X0, X20
	078 Move X9, [X8+2296]
	079 Move X2, [X8+2304]
	080 NotImplemented "Instruction BLR not yet implemented."
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfEqual {147}
	085 Move X8, [X20]
	086 Move X0, X20
	087 Move X9, [X8+648]
	088 Move X1, [X8+656]
	089 NotImplemented "Instruction BLR not yet implemented."
	090 Move TEMP, X0
	091 And TEMP, TEMP, 1
	092 Compare TEMP, 1
	093 JumpIfEqual {154}
	094 Move X0, X20
	095 Move X1, X19
	096 Move X20, [X31+32]
	097 Move X19, [X31+40]
	098 Move X22, [X31+16]
	099 Move X21, [X31+24]
	100 Move X2, X31
	101 Move X30, [X31+48]
	102 Call 0x1C25838
	103 Return X0
	104 Move X0, 0xD59000
	105 Move X0, [X0+1320]
	106 Call 0x1C17D08
	107 Call 0x1C17F10
	108 Move X19, X0
	109 Move X0, 0xD8C000
	110 Move X0, [X0+2448]
	111 Move X0, 0xD59000
	112 Move X0, [X0+1320]
	113 Call 0x1C17D08
	114 Call 0x1C17F10
	115 Move X19, X0
	116 Move X0, 0xD8C000
	117 Move X0, [X0+2432]
	118 Call 0x1C17D08
	119 Move X1, X0
	120 Move X0, X19
	121 Move X2, X31
	122 Call ArgumentNullException..ctor, X0, X1
	123 Move X0, 0xD86000
	124 Move X0, [X0+1208]
	125 Call 0x1C17D08
	126 Call 0x1C17F10
	127 Move X1, X31
	128 Move X19, X0
	129 Call TypeLoadException..ctor, X0
	130 Move X0, 0xD5C000
	131 Move X0, [X0+1400]
	132 Call 0x1C17D08
	133 Call 0x1C17F10
	134 Move X19, X0
	135 Move X0, 0xD86000
	136 Move X0, [X0+3672]
	137 Call 0x1C17D08
	138 Move X20, X0
	139 Move X0, 0xD8C000
	140 Move X0, [X0+2448]
	141 Call 0x1C17D08
	142 Move X2, X0
	143 Move X0, X19
	144 Move X1, X20
	145 Move X3, X31
	146 Call ArgumentException..ctor, X0, X1, X2
	147 Move X0, 0xD54000
	148 Move X0, [X0+2880]
	149 Call 0x1C17D08
	150 Call 0x1C17F10
	151 Move X19, X0
	152 Move X0, 0xD8C000
	153 Move X0, [X0+2456]
	154 Move X0, 0xD54000
	155 Move X0, [X0+2880]
	156 Call 0x1C17D08
	157 Call 0x1C17F10
	158 Move X19, X0
	159 Move X0, 0xD8C000
	160 Move X0, [X0+2464]
	161 Call 0x1C17D08
	162 Move X1, X0
	163 Move X0, X19
	164 Move X2, X31
	165 Call NotSupportedException..ctor, X0, X1
	166 Move X0, 0xD8C000
	167 Move X0, [X0+2472]
	168 Call 0x1C17D08
	169 Move X1, X0
	170 Move X0, X19
	171 Call 0x1C17DEC

Method: System.Array CreateInstance(System.Type elementType, System.Int32[] lengths, System.Int32[] lowerBounds)

Disassembly:
	0x033A39A4 STP X20, X19, [X31 + 0x10]
	0x033A39A8 CMP W2, 0x2
	0x033A39AC B.LT 0x33A39E8
	0x033A39B0 LDR X8, [X0]
	0x033A39B4 MOV X19, X0
	0x033A39B8 CBZ X8, 0x33A39F4
	0x033A39BC LDR W0, [X8 + 0x18]
	0x033A39C0 MOV W21, W2
	0x033A39C4 MOV W20, W1
	0x033A39C8 MOV X1, X31
	0x033A39CC BL 0x335DCF4
	0x033A39D0 ADD W8, W20, W21
	0x033A39D4 SUB W2, W8, 0x1
	0x033A39D8 UBFM W3, W0, 0x1F, 0x1E
	0x033A39DC MOV X0, X19
	0x033A39E0 MOV W1, W20
	0x033A39E4 BL 0x33A3AEC
	0x033A39E8 LDP X20, X19, [X31 + 0x10]
	0x033A39EC LDP X30, X21, [X31], #0x20
	0x033A39F0 RET
	0x033A39F4 BL 0x1C16F20
	0x033A39F8 B 0x33A39FC
	0x033A39FC MOV X20, X0
	0x033A3A00 CMP W1, 0x1
	0x033A3A04 B.NE 0x33A3AE0
	0x033A3A08 MOV X0, X20
	0x033A3A0C BL 0x3EB1AD0
	0x033A3A10 MOV X20, X0
	0x033A3A14 ADRP X0, 0xD5A000
	0x033A3A18 LDR X0, [X0 + 0xF78]
	0x033A3A1C BL 0x1C16D08
	0x033A3A20 LDR X8, [X20]
	0x033A3A24 LDR X1, [X8]
	0x033A3A28 BL 0x1C17270
	0x033A3A2C TBZ X0, 0x0, 0x33A3A48
	0x033A3A30 BL 0x3EB1AE0
	0x033A3A34 LDR X0, [X19 + 0x10]
	0x033A3A38 LDP X20, X19, [X31 + 0x10]
	0x033A3A3C MOV X1, X31
	0x033A3A40 LDP X30, X21, [X31], #0x20
	0x033A3A44 B 0x335DD1C
	0x033A3A48 ADRP X0, 0xD50000
	0x033A3A4C LDR X0, [X0 + 0x7D0]
	0x033A3A50 BL 0x1C16D08
	0x033A3A54 LDR X8, [X20]
	0x033A3A58 LDR X1, [X8]
	0x033A3A5C BL 0x1C17270
	0x033A3A60 TBZ X0, 0x0, 0x33A3AB8
	0x033A3A64 LDR X19, [X20]
	0x033A3A68 BL 0x3EB1AE0
	0x033A3A6C ADRP X0, 0xD50000
	0x033A3A70 LDR X0, [X0 + 0x5B0]
	0x033A3A74 BL 0x1C16D08
	0x033A3A78 BL 0x1C16F10
	0x033A3A7C MOV X20, X0
	0x033A3A80 ADRP X0, 0xD79000
	0x033A3A84 LDR X0, [X0 + 0xBC0]
	0x033A3A88 BL 0x1C16D08
	0x033A3A8C MOV X1, X0
	0x033A3A90 MOV X0, X20
	0x033A3A94 MOV X2, X19
	0x033A3A98 MOV X3, X31
	0x033A3A9C BL 0x337DF40
	0x033A3AA0 ADRP X0, 0xD88000
	0x033A3AA4 LDR X0, [X0 + 0xBD0]
	0x033A3AA8 BL 0x1C16D08
	0x033A3AAC MOV X1, X0
	0x033A3AB0 MOV X0, X20
	0x033A3AB4 BL 0x1C16DEC
	0x033A3AB8 MOVZ W0, 0x8
	0x033A3ABC BL 0x3EB1AF0
	0x033A3AC0 LDR X8, [X20]
	0x033A3AC4 STR X8, [X0]
	0x033A3AC8 ADRP X1, 0xB11000
	0x033A3ACC ADD X1, X1, 0xE58
	0x033A3AD0 MOV X2, X31
	0x033A3AD4 BL 0x3EB1B00
	0x033A3AD8 MOV X20, X0
	0x033A3ADC BL 0x3EB1AE0
	0x033A3AE0 MOV X0, X20
	0x033A3AE4 BL 0x1D2C690
	0x033A3AE8 BL 0x1990590
	0x033A3AEC STP X30, X23, [X31 - 0x30]!
	0x033A3AF0 STP X22, X21, [X31 + 0x10]
	0x033A3AF4 STP X20, X19, [X31 + 0x20]
	0x033A3AF8 CMP W2, W1
	0x033A3AFC B.LE 0x33A3B94
	0x033A3B00 MOV W19, W2
	0x033A3B04 MOV W20, W1
	0x033A3B08 MOV X21, X0
	0x033A3B0C SUB W22, W3, 0x1
	0x033A3B10 SUB W8, W19, W20
	0x033A3B14 ADD W9, W8, 0x1
	0x033A3B18 CMP W9, 0x10
	0x033A3B1C B.LE 0x33A3B64
	0x033A3B20 ADDS W31, W22, 0x1
	0x033A3B24 B.EQ 0x33A3BA4
	0x033A3B28 MOV X0, X21
	0x033A3B2C MOV W1, W20
	0x033A3B30 MOV W2, W19
	0x033A3B34 BL 0x33A3F48
	0x033A3B38 MOV W23, W0
	0x033A3B3C ADD W1, W0, 0x1
	0x033A3B40 MOV X0, X21
	0x033A3B44 MOV W2, W19
	0x033A3B48 MOV W3, W22
	0x033A3B4C BL 0x33A3AEC
	0x033A3B50 SUB W19, W23, 0x1
	0x033A3B54 CMP W19, W20
	0x033A3B58 SUB W22, W22, 0x1
	0x033A3B5C B.GT 0x33A3B10
	0x033A3B60 B 0x33A3B94
	0x033A3B64 CBZ W8, 0x33A3B94
	0x033A3B68 CMP W8, 0x2
	0x033A3B6C B.EQ 0x33A3BC0
	0x033A3B70 MOV X0, X21
	0x033A3B74 MOV W1, W20
	0x033A3B78 CMP W8, 0x1
	0x033A3B7C B.EQ 0x33A3BEC
	0x033A3B80 MOV W2, W19
	0x033A3B84 LDP X20, X19, [X31 + 0x20]
	0x033A3B88 LDP X22, X21, [X31 + 0x10]
	0x033A3B8C LDP X30, X23, [X31], #0x30
	0x033A3B90 B 0x33A3C00
	0x033A3B94 LDP X20, X19, [X31 + 0x20]
	0x033A3B98 LDP X22, X21, [X31 + 0x10]
	0x033A3B9C LDP X30, X23, [X31], #0x30
	0x033A3BA0 RET
	0x033A3BA4 MOV X0, X21
	0x033A3BA8 MOV W1, W20
	0x033A3BAC MOV W2, W19
	0x033A3BB0 LDP X20, X19, [X31 + 0x20]
	0x033A3BB4 LDP X22, X21, [X31 + 0x10]
	0x033A3BB8 LDP X30, X23, [X31], #0x30
	0x033A3BBC B 0x33A3EA8
	0x033A3BC0 SUB W22, W19, 0x1
	0x033A3BC4 MOV X0, X21
	0x033A3BC8 MOV W1, W20
	0x033A3BCC MOV W2, W22
	0x033A3BD0 BL 0x33A3608
	0x033A3BD4 MOV X0, X21
	0x033A3BD8 MOV W1, W20
	0x033A3BDC MOV W2, W19
	0x033A3BE0 BL 0x33A3608
	0x033A3BE4 MOV X0, X21
	0x033A3BE8 MOV W1, W22
	0x033A3BEC MOV W2, W19
	0x033A3BF0 LDP X20, X19, [X31 + 0x20]
	0x033A3BF4 LDP X22, X21, [X31 + 0x10]
	0x033A3BF8 LDP X30, X23, [X31], #0x30
	0x033A3BFC B 0x33A3608
	0x033A3C00 SUB X31, X31, 0x70
	0x033A3C04 STP X29, X30, [X31 + 0x10]
	0x033A3C08 STP X28, X27, [X31 + 0x20]
	0x033A3C0C STP X26, X25, [X31 + 0x30]
	0x033A3C10 STP X24, X23, [X31 + 0x40]
	0x033A3C14 STP X22, X21, [X31 + 0x50]
	0x033A3C18 STP X20, X19, [X31 + 0x60]
	0x033A3C1C ADRP X22, 0x103A000
	0x033A3C20 LDRB W8, [X22 + 0x143]
	0x033A3C24 MOV W21, W2
	0x033A3C28 MOV W19, W1
	0x033A3C2C MOV X20, X0
	0x033A3C30 TBNZ X8, 0x0, 0x33A3C48
	0x033A3C34 ADRP X0, 0xD7A000
	0x033A3C38 LDR X0, [X0 + 0x918]
	0x033A3C3C BL 0x1C16CF4
	0x033A3C40 MOVZ W8, 0x1
	0x033A3C44 STRB W8, [X22 + 0x143]
	0x033A3C48 CMP W19, W21
	0x033A3C4C B.GE 0x33A3E74
	0x033A3C50 SXTW X8, W21
	0x033A3C54 STR X8, [X31]
	0x033A3C58 ADRP X27, 0xD7A000
	0x033A3C5C LDR X27, [X27 + 0x918]
	0x033A3C60 SXTW X23, W19
	0x033A3C64 STR X23, [X31 + 0x8]
	0x033A3C68 LDR X24, [X20]
	0x033A3C6C CBZ X24, 0x33A3E98
	0x033A3C70 LDR W8, [X24 + 0x18]
	0x033A3C74 ADD X28, X23, 0x1
	0x033A3C78 CMP W28, W8
	0x033A3C7C B.CS 0x33A3E94
	0x033A3C80 ADD X9, X24, X28, 0x3, LSL
	0x033A3C84 LDR X8, [X20 + 0x8]
	0x033A3C88 LDR X22, [X9 + 0x20]
	0x033A3C8C CBZ X8, 0x33A3CA8
	0x033A3C90 LDR W9, [X8 + 0x18]
	0x033A3C94 CMP W28, W9
	0x033A3C98 B.CS 0x33A3E94
	0x033A3C9C ADD X8, X8, X28, 0x3, LSL
	0x033A3CA0 LDR X21, [X8 + 0x20]
	0x033A3CA4 B 0x33A3CAC
	0x033A3CA8 MOV X21, X31
	0x033A3CAC LDR X8, [X31 + 0x8]
	0x033A3CB0 MOV W29, W23
	0x033A3CB4 CMP X23, X8
	0x033A3CB8 B.LT 0x33A3DFC
	0x033A3CBC LDR W8, [X24 + 0x18]
	0x033A3CC0 CMP W29, W8
	0x033A3CC4 B.CS 0x33A3E94
	0x033A3CC8 LDR X23, [X20 + 0x10]
	0x033A3CCC CBZ X23, 0x33A3E98
	0x033A3CD0 LDR X8, [X23]
	0x033A3CD4 SXTW X26, W29
	0x033A3CD8 ADD X9, X24, X26, 0x3, LSL
	0x033A3CDC LDR X24, [X9 + 0x20]
	0x033A3CE0 LDRH W9, [X8 + 0x12E]
	0x033A3CE4 LDR X1, [X27]
	0x033A3CE8 CBZ X9, 0x33A3D0C
	0x033A3CEC LDR X10, [X8 + 0xB0]
	0x033A3CF0 ADD X10, X10, 0x8
	0x033A3CF4 LDUR X11, [X10 - 0x8]
	0x033A3CF8 CMP X11, X1
	0x033A3CFC B.EQ 0x33A3D1C
	0x033A3D00 SUBS X9, X9, 0x1
	0x033A3D04 ADD X10, X10, 0x10
	0x033A3D08 B.NE 0x33A3CF4
	0x033A3D0C MOV X0, X23
	0x033A3D10 MOV W2, W31
	0x033A3D14 BL 0x1C5C788
	0x033A3D18 B 0x33A3D28
	0x033A3D1C LDRSW X9, [X10]
	0x033A3D20 ADD X8, X8, X9, 0x4, LSL
	0x033A3D24 ADD X0, X8, 0x138
	0x033A3D28 LDP X8, X3, [X0]
	0x033A3D2C MOV X0, X23
	0x033A3D30 MOV X1, X22
	0x033A3D34 MOV X2, X24
	0x033A3D38 BLR X8
	0x033A3D3C TBZ X0, 0x1F, 0x33A3DF0
	0x033A3D40 LDR X25, [X20]
	0x033A3D44 CBZ X25, 0x33A3E98
	0x033A3D48 LDR W8, [X25 + 0x18]
	0x033A3D4C CMP W29, W8
	0x033A3D50 B.CS 0x33A3E94
	0x033A3D54 ADD X9, X25, X26, 0x3, LSL
	0x033A3D58 LDR X23, [X9 + 0x20]
	0x033A3D5C CBZ X23, 0x33A3D78
	0x033A3D60 LDR X8, [X25]
	0x033A3D64 MOV X0, X23

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x103B000
	008 Move X22, 0xD51000
	009 Move W8, [X23+314]
	010 Move X22, [X22+1728]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0xD7A000
	019 Move X0, [X0+1256]
	020 Call 0x1C17CF4
	021 Move X0, 0xD51000
	022 Move X0, [X0+1728]
	023 Call 0x1C17CF4
	024 Move X0, 0xD82000
	025 Move X0, [X0+2064]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X23+314], W8
	029 Move X0, [X22]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Compare X21, 0
	035 JumpIfEqual {163}
	036 Compare X20, 0
	037 JumpIfEqual {170}
	038 Compare X19, 0
	039 JumpIfEqual {177}
	040 Move X8, [X21]
	041 Move X0, X21
	042 Move X9, [X8+808]
	043 Move X1, [X8+816]
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Compare X0, 0
	046 JumpIfEqual {54}
	047 Move X8, 0xD7A000
	048 Move X8, [X8+1256]
	049 Move X9, [X0]
	050 Move X8, [X8]
	051 Move W11, [X9+304]
	052 Move W10, [X8+304]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X21, X31
	055 Move X9, [X9+200]
	056 Add X9, X9, X10
	057 NotImplemented "Instruction LDUR not yet implemented."
	058 NotImplemented "Instruction CMP not yet implemented."
	059 NotImplemented "Instruction CSEL not yet implemented."
	060 Move X0, [X22]
	061 Move W8, [X0+224]
	062 Compare W8, 0
	063 JumpIfNotEqual {65}
	064 Call 0x1C17DFC
	065 Compare X21, 0
	066 JumpIfEqual {189}
	067 Move X8, 0xD82000
	068 Move X0, [X22]
	069 Move X8, [X8+2064]
	070 Move W9, [X0+224]
	071 Move X22, [X8]
	072 Compare W9, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Move X0, X22
	076 Call Type.GetTypeFromHandle, X0
	077 Move X8, [X21]
	078 Move X1, X0
	079 Move X0, X21
	080 Move X9, [X8+2296]
	081 Move X2, [X8+2304]
	082 NotImplemented "Instruction BLR not yet implemented."
	083 Move TEMP, X0
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 JumpIfEqual {206}
	087 Move X8, [X21]
	088 Move X0, X21
	089 Move X9, [X8+648]
	090 Move X1, [X8+656]
	091 NotImplemented "Instruction BLR not yet implemented."
	092 Move TEMP, X0
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfEqual {213}
	096 Move W8, [X20+24]
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move W9, [X19+24]
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Move W10, W31
	101 Move W9, 0x80000000
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move X10, W10
	104 Add X11, X20, X10
	105 Move W11, [X11+32]
	106 Move TEMP, X11
	107 And TEMP, TEMP, -2147483648
	108 Compare TEMP, -2147483648
	109 JumpIfEqual {129}
	110 Add X12, X19, X10
	111 NotImplemented "Instruction LDRSW not yet implemented."
	112 Add X11, X12, X11
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Add W10, W10, 1
	115 NotImplemented "Instruction CMP not yet implemented."
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Move X0, X21
	118 Move X1, X20
	119 Move X2, X19
	120 Move X20, [X31+32]
	121 Move X19, [X31+40]
	122 Move X22, [X31+16]
	123 Move X21, [X31+24]
	124 Move X30, [X31+48]
	125 Move X23, [X31+56]
	126 Call 0x1C25838
	127 Return X0
	128 Call 0x1C17F28
	129 Move X0, 0xD59000
	130 Move X0, [X0+1888]
	131 Call 0x1C17D08
	132 Call 0x1C17F10
	133 Move X19, X0
	134 Move X0, 0xD89000
	135 Move X0, [X0+2432]
	136 Call 0x1C17D08
	137 Move X20, X0
	138 Move X0, 0xD89000
	139 Move X0, [X0+2968]
	140 Move X0, 0xD59000
	141 Move X0, [X0+1888]
	142 Call 0x1C17D08
	143 Call 0x1C17F10
	144 Move X19, X0
	145 Move X0, 0xD89000
	146 Move X0, [X0+2432]
	147 Call 0x1C17D08
	148 Move X20, X0
	149 Move X0, 0xD89000
	150 Move X0, [X0+2976]
	151 Call 0x1C17D08
	152 Move X2, X0
	153 Move X0, X19
	154 Move X1, X20
	155 Move X3, X31
	156 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	157 Move X0, 0xD89000
	158 Move X0, [X0+2984]
	159 Call 0x1C17D08
	160 Move X1, X0
	161 Move X0, X19
	162 Call 0x1C17DEC
	163 Move X0, 0xD56000
	164 Move X0, [X0+1320]
	165 Call 0x1C17D08
	166 Call 0x1C17F10
	167 Move X19, X0
	168 Move X0, 0xD89000
	169 Move X0, [X0+2448]
	170 Move X0, 0xD56000
	171 Move X0, [X0+1320]
	172 Call 0x1C17D08
	173 Call 0x1C17F10
	174 Move X19, X0
	175 Move X0, 0xD89000
	176 Move X0, [X0+2432]
	177 Move X0, 0xD56000
	178 Move X0, [X0+1320]
	179 Call 0x1C17D08
	180 Call 0x1C17F10
	181 Move X19, X0
	182 Move X0, 0xD89000
	183 Move X0, [X0+2992]
	184 Call 0x1C17D08
	185 Move X1, X0
	186 Move X0, X19
	187 Move X2, X31
	188 Call ArgumentNullException..ctor, X0, X1
	189 Move X0, 0xD59000
	190 Move X0, [X0+1400]
	191 Call 0x1C17D08
	192 Call 0x1C17F10
	193 Move X19, X0
	194 Move X0, 0xD83000
	195 Move X0, [X0+3672]
	196 Call 0x1C17D08
	197 Move X20, X0
	198 Move X0, 0xD89000
	199 Move X0, [X0+2448]
	200 Call 0x1C17D08
	201 Move X2, X0
	202 Move X0, X19
	203 Move X1, X20
	204 Move X3, X31
	205 Call ArgumentException..ctor, X0, X1, X2
	206 Move X0, 0xD51000
	207 Move X0, [X0+2880]
	208 Call 0x1C17D08
	209 Call 0x1C17F10
	210 Move X19, X0
	211 Move X0, 0xD89000
	212 Move X0, [X0+2456]
	213 Move X0, 0xD51000
	214 Move X0, [X0+2880]
	215 Call 0x1C17D08
	216 Call 0x1C17F10
	217 Move X19, X0
	218 Move X0, 0xD89000
	219 Move X0, [X0+2464]
	220 Call 0x1C17D08
	221 Move X1, X0
	222 Move X0, X19
	223 Move X2, X31
	224 Call NotSupportedException..ctor, X0, X1
	225 Move X0, 0xD59000
	226 Move X0, [X0+1400]
	227 Call 0x1C17D08
	228 Call 0x1C17F10
	229 Move X19, X0
	230 Move X0, 0xD89000
	231 Move X0, [X0+3000]
	232 Move X0, 0xD59000
	233 Move X0, [X0+1400]
	234 Call 0x1C17D08
	235 Call 0x1C17F10
	236 Move X19, X0
	237 Move X0, 0xD89000
	238 Move X0, [X0+3008]
	239 Call 0x1C17D08
	240 Move X1, X0
	241 Move X0, X19
	242 Move X2, X31
	243 Call ArgumentException..ctor, X0, X1
	244 Move X0, 0xD83000
	245 Move X0, [X0+1208]
	246 Call 0x1C17D08
	247 Call 0x1C17F10
	248 Move X1, X31
	249 Move X19, X0
	250 Call TypeLoadException..ctor, X0

Method: System.Void Clear(System.Array array, System.Int32 index, System.Int32 length)

Disassembly:
	0x033A0A34 BL 0x1C16D08
	0x033A0A38 BL 0x1C16F10
	0x033A0A3C MOV X20, X0
	0x033A0A40 ADRP X0, 0xD7B000
	0x033A0A44 LDR X0, [X0 + 0x670]
	0x033A0A48 BL 0x1C16D08
	0x033A0A4C MOV X2, X0
	0x033A0A50 MOV X0, X20
	0x033A0A54 MOV X1, X19
	0x033A0A58 MOV X3, X31
	0x033A0A5C BL 0x3311888
	0x033A0A60 B 0x33A0BC0
	0x033A0A64 ADRP X0, 0xD5B000
	0x033A0A68 LDR X0, [X0 + 0x578]
	0x033A0A6C BL 0x1C16D08
	0x033A0A70 BL 0x1C16F10
	0x033A0A74 MOV X19, X0
	0x033A0A78 ADRP X0, 0xD7B000
	0x033A0A7C LDR X0, [X0 + 0x760]
	0x033A0A80 BL 0x1C16D08
	0x033A0A84 MOV X1, X0
	0x033A0A88 MOV X0, X19
	0x033A0A8C MOV X2, X31
	0x033A0A90 BL 0x3314A68
	0x033A0A94 B 0x33A0AC4
	0x033A0A98 ADRP X0, 0xD7B000
	0x033A0A9C LDR X0, [X0 + 0x5A0]
	0x033A0AA0 BL 0x1C16D08
	0x033A0AA4 BL 0x1C16F10
	0x033A0AA8 MOV X19, X0
	0x033A0AAC ADRP X0, 0xD8B000
	0x033A0AB0 LDR X0, [X0 + 0xA28]
	0x033A0AB4 BL 0x1C16D08
	0x033A0AB8 MOV X1, X0
	0x033A0ABC MOV X0, X19
	0x033A0AC0 BL 0x338EC20
	0x033A0AC4 ADRP X0, 0xD8B000
	0x033A0AC8 LDR X0, [X0 + 0xA78]
	0x033A0ACC BL 0x1C16D08
	0x033A0AD0 MOV X1, X0
	0x033A0AD4 MOV X0, X19
	0x033A0AD8 BL 0x1C16DEC
	0x033A0ADC B 0x33A0AEC
	0x033A0AE0 B 0x33A0AEC
	0x033A0AE4 B 0x33A0B50
	0x033A0AE8 B 0x33A0B50
	0x033A0AEC MOV X19, X0
	0x033A0AF0 CMP W1, 0x1
	0x033A0AF4 B.NE 0x33A0C00
	0x033A0AF8 MOV X0, X19
	0x033A0AFC BL 0x3EB1AD0
	0x033A0B00 MOV X19, X0
	0x033A0B04 ADRP X0, 0xD53000
	0x033A0B08 LDR X0, [X0 + 0x7D0]
	0x033A0B0C BL 0x1C16D08
	0x033A0B10 LDR X8, [X19]
	0x033A0B14 LDR X1, [X8]
	0x033A0B18 BL 0x1C17270
	0x033A0B1C TBNZ X0, 0x0, 0x33A0B84
	0x033A0B20 MOVZ W0, 0x8
	0x033A0B24 BL 0x3EB1AF0
	0x033A0B28 LDR X8, [X19]
	0x033A0B2C STR X8, [X0]
	0x033A0B30 ADRP X1, 0xB14000
	0x033A0B34 ADD X1, X1, 0xE58
	0x033A0B38 MOV X2, X31
	0x033A0B3C BL 0x3EB1B00
	0x033A0B40 B 0x33A0BF8
	0x033A0B44 MOV X19, X0
	0x033A0B48 BL 0x3EB1AE0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X0, 0
	006 JumpIfEqual {31}
	007 Move W19, W2
	008 Move TEMP, X2
	009 And TEMP, TEMP, -2147483648
	010 Compare TEMP, -2147483648
	011 JumpIfEqual {43}
	012 Move W21, W1
	013 Move W1, W31
	014 Move X20, X0
	015 Call 0x1C25D2C
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Subtract W21, W21, W0
	018 Move X0, X20
	019 Call Array.get_Length, X0
	020 Subtract W8, W0, W19
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X0, X20
	023 Move W2, W19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move W1, W21
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call 0x1C25EE0
	030 Return 
	031 Move X0, 0xD59000
	032 Move X0, [X0+1320]
	033 Call 0x1C17D08
	034 Call 0x1C17F10
	035 Move X19, X0
	036 Move X0, 0xD7C000
	037 Move X0, [X0+1600]
	038 Call 0x1C17D08
	039 Move X1, X0
	040 Move X0, X19
	041 Move X2, X31
	042 Call ArgumentNullException..ctor, X0, X1
	043 Move X0, 0xD5E000
	044 Move X0, [X0+3960]
	045 Call 0x1C17D08
	046 Call 0x1C17F10
	047 Move X19, X0
	048 Move X0, 0xD8C000
	049 Move X0, [X0+2520]
	050 Move X0, 0xD5E000
	051 Move X0, [X0+3960]
	052 Call 0x1C17D08
	053 Call 0x1C17F10
	054 Move X19, X0
	055 Move X0, 0xD8C000
	056 Move X0, [X0+2528]
	057 Move X0, 0xD5E000
	058 Move X0, [X0+3960]
	059 Call 0x1C17D08
	060 Call 0x1C17F10
	061 Move X19, X0
	062 Move X0, 0xD8C000
	063 Move X0, [X0+2536]
	064 Call 0x1C17D08
	065 Move X1, X0
	066 Move X0, X19
	067 Move X2, X31
	068 Call IndexOutOfRangeException..ctor, X0, X1
	069 Move X0, 0xD8C000
	070 Move X0, [X0+2544]
	071 Call 0x1C17D08
	072 Move X1, X0
	073 Move X0, X19
	074 Call 0x1C17DEC

Method: System.Void ClearInternal(System.Array a, System.Int32 index, System.Int32 count)

Disassembly:
	0x033A3F10 MOVZ W1, 0x1

ISIL:
	001 Call 0x1C25EE0
	002 Return 

Method: System.Void Copy(System.Array sourceArray, System.Array destinationArray, System.Int32 length)

Disassembly:
	0x033A1C7C MOV X0, X20
	0x033A1C80 MOV W2, W19
	0x033A1C84 BL 0x339F798
	0x033A1C88 MOV X0, X20
	0x033A1C8C MOV X1, X22
	0x033A1C90 MOV W2, W21
	0x033A1C94 BL 0x339F798
	0x033A1C98 ADD W19, W19, 0x1
	0x033A1C9C SUB W21, W21, 0x1
	0x033A1CA0 CMP W19, W21
	0x033A1CA4 B.LT 0x33A1C5C
	0x033A1CA8 LDP X20, X19, [X31 + 0x20]
	0x033A1CAC LDP X22, X21, [X31 + 0x10]
	0x033A1CB0 LDR X30, [X31], #0x30
	0x033A1CB4 RET
	0x033A1CB8 ADRP X0, 0xD57000
	0x033A1CBC LDR X0, [X0 + 0x528]
	0x033A1CC0 BL 0x1C16D08
	0x033A1CC4 BL 0x1C16F10
	0x033A1CC8 MOV X19, X0
	0x033A1CCC ADRP X0, 0xD7A000
	0x033A1CD0 LDR X0, [X0 + 0x640]
	0x033A1CD4 BL 0x1C16D08
	0x033A1CD8 MOV X1, X0
	0x033A1CDC MOV X0, X19
	0x033A1CE0 MOV X2, X31
	0x033A1CE4 BL 0x330E100
	0x033A1CE8 B 0x33A1DB8
	0x033A1CEC ADRP X8, 0xD5A000
	0x033A1CF0 ADRP X9, 0xD5D000
	0x033A1CF4 LDR X8, [X8 + 0x768]
	0x033A1CF8 LDR X9, [X9 + 0x130]
	0x033A1CFC CMP W0, W19
	0x033A1D00 CSEL X0, X9, X8, GT
	0x033A1D04 BL 0x1C16D08
	0x033A1D08 MOV X19, X0
	0x033A1D0C ADRP X0, 0xD5A000
	0x033A1D10 LDR X0, [X0 + 0x760]
	0x033A1D14 BL 0x1C16D08
	0x033A1D18 BL 0x1C16F10
	0x033A1D1C MOV X20, X0
	0x033A1D20 ADRP X0, 0xD7A000
	0x033A1D24 LDR X0, [X0 + 0x670]
	0x033A1D28 BL 0x1C16D08
	0x033A1D2C MOV X2, X0
	0x033A1D30 MOV X0, X20
	0x033A1D34 MOV X1, X19
	0x033A1D38 MOV X3, X31
	0x033A1D3C BL 0x3311888

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Compare X0, 0
	007 JumpIfEqual {31}
	008 Move X20, X1
	009 Compare X1, 0
	010 JumpIfEqual {38}
	011 Move W1, W31
	012 Move W19, W2
	013 Move X21, X0
	014 Call 0x1C25D2C
	015 Move W22, W0
	016 Move X0, X20
	017 Move W1, W31
	018 Call 0x1C25D2C
	019 Move W3, W0
	020 Move X0, X21
	021 Move W1, W22
	022 Move X2, X20
	023 Move W4, W19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call Array.Copy, X0, X1, X2, X3, X4
	030 Return 
	031 Move X0, 0xD58000
	032 Move X0, [X0+1320]
	033 Call 0x1C17D08
	034 Call 0x1C17F10
	035 Move X19, X0
	036 Move X0, 0xD8B000
	037 Move X0, [X0+2584]
	038 Move X0, 0xD58000
	039 Move X0, [X0+1320]
	040 Call 0x1C17D08
	041 Call 0x1C17F10
	042 Move X19, X0
	043 Move X0, 0xD8B000
	044 Move X0, [X0+2592]
	045 Call 0x1C17D08
	046 Move X1, X0
	047 Move X0, X19
	048 Move X2, X31
	049 Call ArgumentNullException..ctor, X0, X1
	050 Move X0, 0xD8B000
	051 Move X0, [X0+2696]
	052 Call 0x1C17D08
	053 Move X1, X0
	054 Move X0, X19
	055 Call 0x1C17DEC

Method: System.Void Copy(System.Array sourceArray, System.Int32 sourceIndex, System.Array destinationArray, System.Int32 destinationIndex, System.Int32 length)

Disassembly:
	0x033A0CE8 MOV X19, X0
	0x033A0CEC ADRP X0, 0xD8B000
	0x033A0CF0 LDR X0, [X0 + 0xA18]
	0x033A0CF4 B 0x33A0D14
	0x033A0CF8 ADRP X0, 0xD58000
	0x033A0CFC LDR X0, [X0 + 0x528]
	0x033A0D00 BL 0x1C16D08
	0x033A0D04 BL 0x1C16F10
	0x033A0D08 MOV X19, X0
	0x033A0D0C ADRP X0, 0xD8B000
	0x033A0D10 LDR X0, [X0 + 0xA20]
	0x033A0D14 BL 0x1C16D08
	0x033A0D18 MOV X1, X0
	0x033A0D1C MOV X0, X19
	0x033A0D20 MOV X2, X31
	0x033A0D24 BL 0x330E100
	0x033A0D28 ADRP X0, 0xD8B000
	0x033A0D2C LDR X0, [X0 + 0xA88]
	0x033A0D30 BL 0x1C16D08
	0x033A0D34 MOV X1, X0
	0x033A0D38 MOV X0, X19
	0x033A0D3C BL 0x1C16DEC
	0x033A0D40 STR X30, [X31 - 0x20]!
	0x033A0D44 STP X20, X19, [X31 + 0x10]
	0x033A0D48 CMP X1, W1, SXTW
	0x033A0D4C B.NE 0x33A0D6C
	0x033A0D50 CMP X3, W3, SXTW
	0x033A0D54 B.NE 0x33A0D8C
	0x033A0D58 CMP X4, W4, SXTW
	0x033A0D5C B.NE 0x33A0DAC
	0x033A0D60 LDP X20, X19, [X31 + 0x10]
	0x033A0D64 LDR X30, [X31], #0x20
	0x033A0D68 B 0x339FCE8
	0x033A0D6C ADRP X0, 0xD5B000
	0x033A0D70 LDR X0, [X0 + 0x760]
	0x033A0D74 BL 0x1C16D08
	0x033A0D78 BL 0x1C16F10
	0x033A0D7C MOV X19, X0
	0x033A0D80 ADRP X0, 0xD82000
	0x033A0D84 LDR X0, [X0 + 0x280]
	0x033A0D88 B 0x33A0DC8
	0x033A0D8C ADRP X0, 0xD5B000
	0x033A0D90 LDR X0, [X0 + 0x760]
	0x033A0D94 BL 0x1C16D08
	0x033A0D98 BL 0x1C16F10
	0x033A0D9C MOV X19, X0
	0x033A0DA0 ADRP X0, 0xD82000
	0x033A0DA4 LDR X0, [X0 + 0x288]
	0x033A0DA8 B 0x33A0DC8
	0x033A0DAC ADRP X0, 0xD5B000
	0x033A0DB0 LDR X0, [X0 + 0x760]
	0x033A0DB4 BL 0x1C16D08
	0x033A0DB8 BL 0x1C16F10
	0x033A0DBC MOV X19, X0
	0x033A0DC0 ADRP X0, 0xD5B000
	0x033A0DC4 LDR X0, [X0 + 0x768]
	0x033A0DC8 BL 0x1C16D08
	0x033A0DCC MOV X20, X0
	0x033A0DD0 ADRP X0, 0xD8B000
	0x033A0DD4 LDR X0, [X0 + 0x970]
	0x033A0DD8 BL 0x1C16D08
	0x033A0DDC MOV X2, X0
	0x033A0DE0 MOV X0, X19
	0x033A0DE4 MOV X1, X20
	0x033A0DE8 MOV X3, X31
	0x033A0DEC BL 0x3311888
	0x033A0DF0 ADRP X0, 0xD8B000
	0x033A0DF4 LDR X0, [X0 + 0xA90]
	0x033A0DF8 BL 0x1C16D08
	0x033A0DFC MOV X1, X0
	0x033A0E00 MOV X0, X19
	0x033A0E04 BL 0x1C16DEC
	0x033A0E08 CMP X2, W2, SXTW
	0x033A0E0C B.NE 0x33A0E14
	0x033A0E10 B 0x339FC34
	0x033A0E14 STR X30, [X31 - 0x20]!
	0x033A0E18 STP X20, X19, [X31 + 0x10]
	0x033A0E1C ADRP X0, 0xD5B000
	0x033A0E20 LDR X0, [X0 + 0x760]
	0x033A0E24 BL 0x1C16D08
	0x033A0E28 BL 0x1C16F10
	0x033A0E2C MOV X19, X0
	0x033A0E30 ADRP X0, 0xD5E000
	0x033A0E34 LDR X0, [X0 + 0x130]
	0x033A0E38 BL 0x1C16D08
	0x033A0E3C MOV X20, X0
	0x033A0E40 ADRP X0, 0xD8B000
	0x033A0E44 LDR X0, [X0 + 0x970]
	0x033A0E48 BL 0x1C16D08
	0x033A0E4C MOV X2, X0
	0x033A0E50 MOV X0, X19
	0x033A0E54 MOV X1, X20
	0x033A0E58 MOV X3, X31
	0x033A0E5C BL 0x3311888
	0x033A0E60 ADRP X0, 0xD8B000
	0x033A0E64 LDR X0, [X0 + 0xA98]
	0x033A0E68 BL 0x1C16D08
	0x033A0E6C MOV X1, X0
	0x033A0E70 MOV X0, X19
	0x033A0E74 BL 0x1C16DEC
	0x033A0E78 STP X30, X21, [X31 - 0x20]!
	0x033A0E7C STP X20, X19, [X31 + 0x10]
	0x033A0E80 MOV W1, W31
	0x033A0E84 MOV X19, X0
	0x033A0E88 BL 0x1C24CE8
	0x033A0E8C SXTW X20, W0
	0x033A0E90 MOV X0, X19
	0x033A0E94 BL 0x1C24D70
	0x033A0E98 CMP W0, 0x2
	0x033A0E9C B.LT 0x33A0ECC
	0x033A0EA0 MOVZ W21, 0x1
	0x033A0EA4 MOV X0, X19
	0x033A0EA8 MOV W1, W21
	0x033A0EAC BL 0x1C24CE8
	0x033A0EB0 SXTW X8, W0
	0x033A0EB4 MOV X0, X19
	0x033A0EB8 MUL X20, X20, X8
	0x033A0EBC ADD W21, W21, 0x1
	0x033A0EC0 BL 0x1C24D70
	0x033A0EC4 CMP W21, W0
	0x033A0EC8 B.LT 0x33A0EA4
	0x033A0ECC MOV X0, X20
	0x033A0ED0 LDP X20, X19, [X31 + 0x10]
	0x033A0ED4 LDP X30, X21, [X31], #0x20
	0x033A0ED8 RET
	0x033A0EDC B 0x1C24CE8
	0x033A0EE0 STR X30, [X31 - 0x10]!
	0x033A0EE4 BL 0x1C24CE8
	0x033A0EE8 SXTW X0, W0
	0x033A0EEC LDR X30, [X31], #0x10
	0x033A0EF0 RET
	0x033A0EF4 CMP X1, W1, SXTW
	0x033A0EF8 B.NE 0x33A0F00
	0x033A0EFC B 0x3395BDC
	0x033A0F00 STR X30, [X31 - 0x20]!
	0x033A0F04 STP X20, X19, [X31 + 0x10]
	0x033A0F08 ADRP X0, 0xD5B000
	0x033A0F0C LDR X0, [X0 + 0x760]
	0x033A0F10 BL 0x1C16D08
	0x033A0F14 BL 0x1C16F10
	0x033A0F18 MOV X19, X0
	0x033A0F1C ADRP X0, 0xD5E000
	0x033A0F20 LDR X0, [X0 + 0x130]
	0x033A0F24 BL 0x1C16D08
	0x033A0F28 MOV X20, X0
	0x033A0F2C ADRP X0, 0xD8B000
	0x033A0F30 LDR X0, [X0 + 0x970]
	0x033A0F34 BL 0x1C16D08
	0x033A0F38 MOV X2, X0
	0x033A0F3C MOV X0, X19
	0x033A0F40 MOV X1, X20
	0x033A0F44 MOV X3, X31
	0x033A0F48 BL 0x3311888
	0x033A0F4C ADRP X0, 0xD8B000
	0x033A0F50 LDR X0, [X0 + 0xAA0]
	0x033A0F54 BL 0x1C16D08
	0x033A0F58 MOV X1, X0
	0x033A0F5C MOV X0, X19
	0x033A0F60 BL 0x1C16DEC
	0x033A0F64 STR X30, [X31 - 0x20]!
	0x033A0F68 STP X20, X19, [X31 + 0x10]
	0x033A0F6C CMP X1, W1, SXTW
	0x033A0F70 B.NE 0x33A0F88
	0x033A0F74 CMP X2, W2, SXTW
	0x033A0F78 B.NE 0x33A0FA8
	0x033A0F7C LDP X20, X19, [X31 + 0x10]
	0x033A0F80 LDR X30, [X31], #0x20
	0x033A0F84 B 0x33A1004
	0x033A0F88 ADRP X0, 0xD5B000
	0x033A0F8C LDR X0, [X0 + 0x760]
	0x033A0F90 BL 0x1C16D08
	0x033A0F94 BL 0x1C16F10
	0x033A0F98 MOV X19, X0
	0x033A0F9C ADRP X0, 0xD7E000
	0x033A0FA0 LDR X0, [X0 + 0xFC8]
	0x033A0FA4 B 0x33A0FC4
	0x033A0FA8 ADRP X0, 0xD5B000
	0x033A0FAC LDR X0, [X0 + 0x760]
	0x033A0FB0 BL 0x1C16D08
	0x033A0FB4 BL 0x1C16F10
	0x033A0FB8 MOV X19, X0
	0x033A0FBC ADRP X0, 0xD7E000
	0x033A0FC0 LDR X0, [X0 + 0xFD0]
	0x033A0FC4 BL 0x1C16D08
	0x033A0FC8 MOV X20, X0
	0x033A0FCC ADRP X0, 0xD8B000
	0x033A0FD0 LDR X0, [X0 + 0x970]
	0x033A0FD4 BL 0x1C16D08
	0x033A0FD8 MOV X2, X0
	0x033A0FDC MOV X0, X19
	0x033A0FE0 MOV X1, X20
	0x033A0FE4 MOV X3, X31
	0x033A0FE8 BL 0x3311888
	0x033A0FEC ADRP X0, 0xD8B000
	0x033A0FF0 LDR X0, [X0 + 0xAA8]
	0x033A0FF4 BL 0x1C16D08
	0x033A0FF8 MOV X1, X0
	0x033A0FFC MOV X0, X19
	0x033A1000 BL 0x1C16DEC
	0x033A1004 STP X30, X23, [X31 - 0x30]!
	0x033A1008 STP X22, X21, [X31 + 0x10]
	0x033A100C STP X20, X19, [X31 + 0x20]
	0x033A1010 ADRP X22, 0x103C000
	0x033A1014 ADRP X23, 0xD53000
	0x033A1018 LDRB W8, [X22 + 0x132]
	0x033A101C LDR X23, [X23 + 0xE58]
	0x033A1020 MOV W19, W2
	0x033A1024 MOV W21, W1
	0x033A1028 MOV X20, X0
	0x033A102C TBNZ X8, 0x0, 0x33A1044
	0x033A1030 ADRP X0, 0xD53000
	0x033A1034 LDR X0, [X0 + 0xE58]
	0x033A1038 BL 0x1C16CF4
	0x033A103C MOVZ W8, 0x1
	0x033A1040 STRB W8, [X22 + 0x132]
	0x033A1044 LDR X0, [X23]
	0x033A1048 MOVZ W1, 0x2
	0x033A104C BL 0x1C16D6C
	0x033A1050 CBZ X0, 0x33A1088
	0x033A1054 LDR W8, [X0 + 0x18]
	0x033A1058 MOV X1, X0
	0x033A105C CBZ W8, 0x33A1084
	0x033A1060 CMP W8, 0x1
	0x033A1064 STR W21, [X1 + 0x20]
	0x033A1068 B.EQ 0x33A1084
	0x033A106C STR W19, [X1 + 0x24]
	0x033A1070 MOV X0, X20
	0x033A1074 LDP X20, X19, [X31 + 0x20]
	0x033A1078 LDP X22, X21, [X31 + 0x10]
	0x033A107C LDP X30, X23, [X31], #0x30
	0x033A1080 B 0x1C24D7C
	0x033A1084 BL 0x1C16F28
	0x033A1088 BL 0x1C16F20
	0x033A108C STR X30, [X31 - 0x20]!
	0x033A1090 STP X20, X19, [X31 + 0x10]
	0x033A1094 CMP X1, W1, SXTW
	0x033A1098 B.NE 0x33A10B8
	0x033A109C CMP X2, W2, SXTW
	0x033A10A0 B.NE 0x33A10D8
	0x033A10A4 CMP X3, W3, SXTW
	0x033A10A8 B.NE 0x33A10F8
	0x033A10AC LDP X20, X19, [X31 + 0x10]
	0x033A10B0 LDR X30, [X31], #0x20
	0x033A10B4 B 0x33A1154
	0x033A10B8 ADRP X0, 0xD5A000
	0x033A10BC LDR X0, [X0 + 0x760]
	0x033A10C0 BL 0x1C16D08
	0x033A10C4 BL 0x1C16F10
	0x033A10C8 MOV X19, X0
	0x033A10CC ADRP X0, 0xD7D000
	0x033A10D0 LDR X0, [X0 + 0xFC8]
	0x033A10D4 B 0x33A1114
	0x033A10D8 ADRP X0, 0xD5A000
	0x033A10DC LDR X0, [X0 + 0x760]
	0x033A10E0 BL 0x1C16D08
	0x033A10E4 BL 0x1C16F10
	0x033A10E8 MOV X19, X0
	0x033A10EC ADRP X0, 0xD7D000
	0x033A10F0 LDR X0, [X0 + 0xFD0]
	0x033A10F4 B 0x33A1114
	0x033A10F8 ADRP X0, 0xD5A000
	0x033A10FC LDR X0, [X0 + 0x760]
	0x033A1100 BL 0x1C16D08
	0x033A1104 BL 0x1C16F10
	0x033A1108 MOV X19, X0
	0x033A110C ADRP X0, 0xD8A000
	0x033A1110 LDR X0, [X0 + 0xAB0]
	0x033A1114 BL 0x1C16D08
	0x033A1118 MOV X20, X0
	0x033A111C ADRP X0, 0xD8A000
	0x033A1120 LDR X0, [X0 + 0x970]
	0x033A1124 BL 0x1C16D08
	0x033A1128 MOV X2, X0
	0x033A112C MOV X0, X19
	0x033A1130 MOV X1, X20
	0x033A1134 MOV X3, X31
	0x033A1138 BL 0x3311888
	0x033A113C ADRP X0, 0xD8A000
	0x033A1140 LDR X0, [X0 + 0xAB8]
	0x033A1144 BL 0x1C16D08
	0x033A1148 MOV X1, X0
	0x033A114C MOV X0, X19
	0x033A1150 BL 0x1C16DEC
	0x033A1154 STR X30, [X31 - 0x40]!
	0x033A1158 STP X24, X23, [X31 + 0x10]
	0x033A115C STP X22, X21, [X31 + 0x20]
	0x033A1160 STP X20, X19, [X31 + 0x30]
	0x033A1164 ADRP X23, 0x103C000
	0x033A1168 ADRP X24, 0xD53000
	0x033A116C LDRB W8, [X23 + 0x133]
	0x033A1170 LDR X24, [X24 + 0xE58]
	0x033A1174 MOV W19, W3
	0x033A1178 MOV W21, W2
	0x033A117C MOV W22, W1
	0x033A1180 MOV X20, X0
	0x033A1184 TBNZ X8, 0x0, 0x33A119C
	0x033A1188 ADRP X0, 0xD53000
	0x033A118C LDR X0, [X0 + 0xE58]
	0x033A1190 BL 0x1C16CF4
	0x033A1194 MOVZ W8, 0x1
	0x033A1198 STRB W8, [X23 + 0x133]
	0x033A119C LDR X0, [X24]
	0x033A11A0 MOVZ W1, 0x3
	0x033A11A4 BL 0x1C16D6C
	0x033A11A8 CBZ X0, 0x33A11F0
	0x033A11AC LDR W8, [X0 + 0x18]
	0x033A11B0 MOV X1, X0
	0x033A11B4 CBZ W8, 0x33A11EC
	0x033A11B8 CMP W8, 0x1
	0x033A11BC STR W22, [X1 + 0x20]
	0x033A11C0 B.EQ 0x33A11EC
	0x033A11C4 CMP W8, 0x2
	0x033A11C8 STR W21, [X1 + 0x24]
	0x033A11CC B.LS 0x33A11EC
	0x033A11D0 STR W19, [X1 + 0x28]
	0x033A11D4 MOV X0, X20
	0x033A11D8 LDP X20, X19, [X31 + 0x30]
	0x033A11DC LDP X22, X21, [X31 + 0x20]
	0x033A11E0 LDP X24, X23, [X31 + 0x10]
	0x033A11E4 LDR X30, [X31], #0x40
	0x033A11E8 B 0x1C24D7C
	0x033A11EC BL 0x1C16F28

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Compare X0, 0
	015 JumpIfEqual {152}
	016 Move X23, X2
	017 Compare X2, 0
	018 JumpIfEqual {159}
	019 Move W22, W4
	020 Move TEMP, X4
	021 And TEMP, TEMP, -2147483648
	022 Compare TEMP, -2147483648
	023 JumpIfEqual {171}
	024 Move W24, W3
	025 Move W25, W1
	026 Move X21, X0
	027 Call 0x1C25D70
	028 Move W19, W0
	029 Move X0, X23
	030 Call 0x1C25D70
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move TEMP, X25
	033 And TEMP, TEMP, -2147483648
	034 Compare TEMP, -2147483648
	035 JumpIfEqual {189}
	036 Move TEMP, X24
	037 And TEMP, TEMP, -2147483648
	038 Compare TEMP, -2147483648
	039 JumpIfEqual {196}
	040 Move X0, X21
	041 Move W1, W25
	042 Move X2, X23
	043 Move W3, W24
	044 Move W4, W22
	045 Call 0x1C25AB0
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfEqual {130}
	050 Move X0, X21
	051 Move W1, W31
	052 Call 0x1C25D2C
	053 Move W28, W0
	054 Move X0, X23
	055 Move W1, W31
	056 Call 0x1C25D2C
	057 Subtract W26, W24, W0
	058 Move W29, W0
	059 Move X0, X21
	060 Subtract W27, W25, W28
	061 Call Array.get_Length, X0
	062 Subtract W8, W0, W22
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X0, X23
	065 Call Array.get_Length, X0
	066 Subtract W8, W0, W22
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move X0, X21
	069 Move X1, X31
	070 Call "il2cpp_vm_object_is_inst", X0
	071 Compare X0, 0
	072 JumpIfEqual {151}
	073 Move X8, [X0]
	074 Move X9, [X8+1064]
	075 Move X1, [X8+1072]
	076 NotImplemented "Instruction BLR not yet implemented."
	077 Move X19, X0
	078 Move X0, X23
	079 Move X1, X31
	080 Call "il2cpp_vm_object_is_inst", X0
	081 Compare X0, 0
	082 JumpIfEqual {151}
	083 Move X8, [X0]
	084 Move [X31+8], X19
	085 Move X9, [X8+1064]
	086 Move X1, [X8+1072]
	087 NotImplemented "Instruction BLR not yet implemented."
	088 Compare X0, 0
	089 JumpIfEqual {151}
	090 Move X8, [X0]
	091 Move X20, X0
	092 Move X9, [X8+1512]
	093 Move X1, [X8+1520]
	094 NotImplemented "Instruction BLR not yet implemented."
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move W19, W0
	097 NotImplemented "Instruction CMP not yet implemented."
	098 NotImplemented "Instruction ORN not yet implemented."
	099 NotImplemented "Instruction ORN not yet implemented."
	100 Add W19, W8, W24
	101 Add W23, W9, W25
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Add W1, W23, W22
	104 Move X0, X21
	105 Subtract W24, W22, 1
	106 Call 0x1C25EAC
	107 Move X1, X0
	108 Add W2, W19, W22
	109 Move X0, X21
	110 Call 0x1C2600C
	111 Move W22, W24
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X0, X21
	114 Move W1, W27
	115 Call 0x1C25EAC
	116 NotImplemented "Instruction CMP not yet implemented."
	117 NotImplemented "Instruction CSET not yet implemented."
	118 NotImplemented "Instruction ORN not yet implemented."
	119 Move TEMP, X8
	120 And TEMP, TEMP, 1
	121 Compare TEMP, 1
	122 JumpIfNotEqual {144}
	123 Move X1, X0
	124 Move X0, X23
	125 Move W2, W26
	126 Call 0x1C2600C
	127 Add W27, W27, 1
	128 Subtract W22, W22, 1
	129 Add W26, W26, 1
	130 Move X20, [X31+96]
	131 Move X19, [X31+104]
	132 Move X22, [X31+80]
	133 Move X21, [X31+88]
	134 Move X24, [X31+64]
	135 Move X23, [X31+72]
	136 Move X26, [X31+48]
	137 Move X25, [X31+56]
	138 Move X28, [X31+32]
	139 Move X27, [X31+40]
	140 Move X29, [X31+16]
	141 Move X30, [X31+24]
	142 Add X31, X31, 112
	143 Return 
	144 Move X0, 0xD5C000
	145 Move X0, [X0+3080]
	146 Call 0x1C17D08
	147 Call 0x1C17F10
	148 Move X1, X31
	149 Move X19, X0
	150 Call InvalidCastException..ctor, X0
	151 Call 0x1C17F20
	152 Move X0, 0xD59000
	153 Move X0, [X0+1320]
	154 Call 0x1C17D08
	155 Call 0x1C17F10
	156 Move X19, X0
	157 Move X0, 0xD8C000
	158 Move X0, [X0+2584]
	159 Move X0, 0xD59000
	160 Move X0, [X0+1320]
	161 Call 0x1C17D08
	162 Call 0x1C17F10
	163 Move X19, X0
	164 Move X0, 0xD8C000
	165 Move X0, [X0+2592]
	166 Call 0x1C17D08
	167 Move X1, X0
	168 Move X0, X19
	169 Move X2, X31
	170 Call ArgumentNullException..ctor, X0, X1
	171 Move X0, 0xD5C000
	172 Move X0, [X0+1888]
	173 Call 0x1C17D08
	174 Call 0x1C17F10
	175 Move X19, X0
	176 Move X0, 0xD5C000
	177 Move X0, [X0+1896]
	178 Move X0, 0xD7C000
	179 Move X0, [X0+1440]
	180 Call 0x1C17D08
	181 Call 0x1C17F10
	182 Move X19, X0
	183 Move X0, 0xD8C000
	184 Move X0, [X0+2600]
	185 Call 0x1C17D08
	186 Move X1, X0
	187 Move X0, X19
	188 Call RankException..ctor, X0, X1
	189 Move X0, 0xD5C000
	190 Move X0, [X0+1888]
	191 Call 0x1C17D08
	192 Call 0x1C17F10
	193 Move X19, X0
	194 Move X0, 0xD83000
	195 Move X0, [X0+640]
	196 Move X0, 0xD5C000
	197 Move X0, [X0+1888]
	198 Call 0x1C17D08
	199 Call 0x1C17F10
	200 Move X19, X0
	201 Move X0, 0xD83000
	202 Move X0, [X0+648]
	203 Call 0x1C17D08
	204 Move X20, X0
	205 Move X0, 0xD8C000
	206 Move X0, [X0+2608]
	207 Call 0x1C17D08
	208 Move X2, X0
	209 Move X0, X19
	210 Move X1, X20
	211 Move X3, X31
	212 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	213 Move X0, 0xD8C000
	214 Move X0, [X0+2616]
	215 Call 0x1C17D08
	216 Move X1, X0
	217 Move X0, X19
	218 Call 0x1C17DEC
	219 Move X0, 0xD5B000
	220 Move X0, [X0+1888]
	221 Call 0x1C17D08
	222 Call 0x1C17F10
	223 Move X19, X0
	224 Move X0, 0xD82000
	225 Move X0, [X0+648]
	226 Call 0x1C17D08
	227 Move X20, X0
	228 Move X0, 0xD8B000
	229 Move X0, [X0+2624]
	230 Move X0, 0xD5B000
	231 Move X0, [X0+1400]
	232 Call 0x1C17D08
	233 Call 0x1C17F10
	234 Move X19, X0
	235 Move X0, 0xD5B000
	236 Move X0, [X0+1896]
	237 Call 0x1C17D08
	238 Move X1, X0
	239 Move X0, X19
	240 Move X2, X31
	241 Call ArgumentException..ctor, X0, X1
	242 Move X0, 0xD5B000
	243 Move X0, [X0+1400]
	244 Call 0x1C17D08
	245 Call 0x1C17F10
	246 Move X19, X0
	247 Move X0, 0xD8B000
	248 Move X0, [X0+2632]
	249 Call 0x1C17D08
	250 Move X20, X0
	251 Move X0, 0xD8B000
	252 Move X0, [X0+2592]
	253 Call 0x1C17D08
	254 Move X2, X0
	255 Move X0, X19
	256 Move X1, X20
	257 Move X3, X31
	258 Call ArgumentException..ctor, X0, X1, X2
	259 NotImplemented "Instruction CMP not yet implemented."
	260 Move X19, X0
	261 Move X0, X19
	262 Call 0x3EB2AD0
	263 Move X21, X0
	264 Move X0, 0xD5B000
	265 Move X0, [X0+1400]
	266 Call 0x1C17D08
	267 Move X8, [X21]
	268 Move X1, [X8]
	269 Call 0x1C18270
	270 Move TEMP, X0
	271 And TEMP, TEMP, 1
	272 Compare TEMP, 1
	273 JumpIfEqual {309}
	274 Move X0, 0xD5B000
	275 Move X0, [X0+3080]
	276 Call 0x1C17D08
	277 Move X8, [X21]
	278 Move X1, [X8]
	279 Call 0x1C18270
	280 Move TEMP, X0
	281 And TEMP, TEMP, 1
	282 Compare TEMP, 1
	283 JumpIfEqual {322}
	284 Move W0, 8
	285 Call 0x3EB2AF0
	286 Move X8, [X21]
	287 Move [X0], X8
	288 Move X1, 0xB14000
	289 Add X1, X1, 3672
	290 Move X2, X31
	291 Call 0x3EB2B00
	292 Move X19, X0
	293 Call 0x3EB2AE0
	294 NotImplemented "Instruction CMP not yet implemented."
	295 Move X19, X0
	296 Move X0, X19
	297 Call 0x3EB2AD0
	298 Move X21, X0
	299 Move X0, 0xD5B000
	300 Move X0, [X0+1400]
	301 Call 0x1C17D08
	302 Move X8, [X21]
	303 Move X1, [X8]
	304 Call 0x1C18270
	305 Move TEMP, X0
	306 And TEMP, TEMP, 1
	307 Compare TEMP, 1
	308 JumpIfNotEqual {312}
	309 Call 0x3EB2AE0
	310 Call Array.CreateArrayTypeMismatchException
	311 Move X19, X0
	312 Move X0, 0xD59000
	313 Move X0, [X0+3264]
	314 Call 0x1C17D08
	315 Move X8, [X21]
	316 Move X1, [X8]
	317 Call 0x1C18270
	318 Move TEMP, X0
	319 And TEMP, TEMP, 1
	320 Compare TEMP, 1
	321 JumpIfNotEqual {333}
	322 Move X19, [X21]
	323 Call 0x3EB2AE0
	324 Move X0, [X31+8]
	325 Move X1, X20
	326 Call Array.CanAssignArrayElement, X0, X1
	327 Move TEMP, X0
	328 And TEMP, TEMP, 1
	329 Compare TEMP, 1
	330 JumpIfNotEqual {310}
	331 Move X0, X19
	332 Call 0x1C17F18
	333 Move W0, 8
	334 Call 0x3EB2AF0
	335 Move X8, [X21]
	336 Move [X0], X8
	337 Move X1, 0xB14000
	338 Add X1, X1, 3672
	339 Move X2, X31
	340 Call 0x3EB2B00
	341 Move X19, X0
	342 Call 0x3EB2AE0
	343 Move X0, X19
	344 Call 0x1D2D690
	345 Call 0x1991590

Method: System.ArrayTypeMismatchException CreateArrayTypeMismatchException()

Disassembly:
	0x033A3F14 MOV X0, X21
	0x033A3F18 MOV W2, W22
	0x033A3F1C MOV W3, W20
	0x033A3F20 BL 0x33A4174
	0x033A3F24 SUB W19, W19, 0x1
	0x033A3F28 ADD W8, W23, W19
	0x033A3F2C ADD W8, W8, 0x2
	0x033A3F30 CMP W8, 0x2
	0x033A3F34 B.GT 0x33A3EFC
	0x033A3F38 LDP X20, X19, [X31 + 0x20]
	0x033A3F3C LDP X22, X21, [X31 + 0x10]
	0x033A3F40 LDP X30, X23, [X31], #0x30
	0x033A3F44 RET
	0x033A3F48 STR X30, [X31 - 0x50]!
	0x033A3F4C STP X26, X25, [X31 + 0x10]
	0x033A3F50 STP X24, X23, [X31 + 0x20]
	0x033A3F54 STP X22, X21, [X31 + 0x30]
	0x033A3F58 STP X20, X19, [X31 + 0x40]
	0x033A3F5C ADRP X22, 0x103A000
	0x033A3F60 LDRB W8, [X22 + 0x141]
	0x033A3F64 MOV W21, W2

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x103B000
	005 Move X20, 0xD7A000
	006 Move W8, [X19+315]
	007 Move X20, [X20+800]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xD7A000
	013 Move X0, [X0+800]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+315], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move X1, X31
	020 Move X19, X0
	021 Call ArrayTypeMismatchException..ctor, X0
	022 Move X0, X19
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Return X0

Method: System.Boolean CanAssignArrayElement(System.Type source, System.Type target)

Disassembly:
	0x033A3F68 MOV W19, W1
	0x033A3F6C MOV X20, X0
	0x033A3F70 TBNZ X8, 0x0, 0x33A3F88
	0x033A3F74 ADRP X0, 0xD7A000
	0x033A3F78 LDR X0, [X0 + 0x918]
	0x033A3F7C BL 0x1C16CF4
	0x033A3F80 MOVZ W8, 0x1
	0x033A3F84 STRB W8, [X22 + 0x141]
	0x033A3F88 SUB W8, W21, W19
	0x033A3F8C CMP W8, 0x0
	0x033A3F90 CINC W8, W8, LT
	0x033A3F94 ADD W23, W19, W8, 0x1, ASR
	0x033A3F98 MOV X0, X20
	0x033A3F9C MOV W1, W19
	0x033A3FA0 MOV W2, W23
	0x033A3FA4 BL 0x33A3608
	0x033A3FA8 MOV X0, X20
	0x033A3FAC MOV W1, W19
	0x033A3FB0 MOV W2, W21
	0x033A3FB4 BL 0x33A3608
	0x033A3FB8 MOV X0, X20
	0x033A3FBC MOV W1, W23
	0x033A3FC0 MOV W2, W21
	0x033A3FC4 BL 0x33A3608
	0x033A3FC8 LDR X8, [X20]
	0x033A3FCC CBZ X8, 0x33A416C
	0x033A3FD0 LDR W9, [X8 + 0x18]
	0x033A3FD4 CMP W23, W9
	0x033A3FD8 B.CS 0x33A4170
	0x033A3FDC ADD X8, X8, W23, 0x3, SXTW
	0x033A3FE0 LDR X22, [X8 + 0x20]
	0x033A3FE4 SUB W21, W21, 0x1
	0x033A3FE8 MOV X0, X20
	0x033A3FEC MOV W1, W23
	0x033A3FF0 MOV W2, W21
	0x033A3FF4 BL 0x33A3838
	0x033A3FF8 CMP W21, W19
	0x033A3FFC B.LE 0x33A4140
	0x033A4000 ADRP X26, 0xD79000
	0x033A4004 LDR X26, [X26 + 0x918]
	0x033A4008 MOV W23, W21
	0x033A400C LDR X9, [X20]
	0x033A4010 CBZ X9, 0x33A416C
	0x033A4014 LDR W8, [X9 + 0x18]
	0x033A4018 ADD W19, W19, 0x1
	0x033A401C CMP W19, W8
	0x033A4020 B.CS 0x33A4170
	0x033A4024 LDR X24, [X20 + 0x10]
	0x033A4028 CBZ X24, 0x33A416C
	0x033A402C LDR X8, [X24]
	0x033A4030 ADD X9, X9, W19, 0x3, SXTW
	0x033A4034 LDR X25, [X9 + 0x20]
	0x033A4038 LDR X1, [X26]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X0, 0
	005 JumpIfEqual {67}
	006 Move X8, [X0]
	007 Move X19, X1
	008 Move X20, X0
	009 Move X9, [X8+1512]
	010 Move X1, [X8+1520]
	011 NotImplemented "Instruction BLR not yet implemented."
	012 Move TEMP, X0
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfNotEqual {25}
	016 Move X8, [X20]
	017 Move X0, X20
	018 Move X1, X19
	019 Move X3, [X8+680]
	020 Move X2, [X8+688]
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 CallNoReturn X3
	025 Move X0, X20
	026 Call Type.get_IsInterface, X0
	027 Compare X19, 0
	028 JumpIfEqual {67}
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {37}
	033 Move X8, [X19]
	034 Move X0, X19
	035 Move X9, [X8+1512]
	036 Move X1, [X8+1520]
	037 Move X0, X19
	038 Call Type.get_IsInterface, X0
	039 Move X8, [X20]
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {54}
	044 Move X9, [X8+1512]
	045 Move X1, [X8+1520]
	046 Move X0, X20
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Xor W8, W0, 1
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 And W0, W8, 1
	052 Move X30, [X31+32]
	053 Return X0
	054 Move X9, [X8+680]
	055 Move X2, [X8+688]
	056 Move X0, X20
	057 Move X1, X19
	058 NotImplemented "Instruction BLR not yet implemented."
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {64}
	063 Move W8, 1
	064 Move X8, [X19]
	065 Move X0, X19
	066 Move X1, X20
	067 Call 0x1C17F20

Method: System.Void ConstrainedCopy(System.Array sourceArray, System.Int32 sourceIndex, System.Array destinationArray, System.Int32 destinationIndex, System.Int32 length)

Disassembly:
	0x033A403C LDRH W9, [X8 + 0x12E]

ISIL:
	001 Call Array.Copy, X0, X1, X2, X3, X4
	002 Return 

Method: T[] Empty()

Disassembly:
	0x022E5F60 ADRP X0, 0x1E36000
	0x022E5F64 LDR X0, [X0 + 0x660]
	0x022E5F68 B 0x22E5FCC
	0x022E5F6C ADRP X0, 0x1E13000
	0x022E5F70 LDR X0, [X0 + 0x528]
	0x022E5F74 BL 0x1C16D08
	0x022E5F78 BL 0x1C16F10
	0x022E5F7C MOV X20, X0
	0x022E5F80 ADRP X0, 0x1E36000
	0x022E5F84 LDR X0, [X0 + 0x640]
	0x022E5F88 BL 0x1C16D08
	0x022E5F8C MOV X1, X0
	0x022E5F90 MOV X0, X20
	0x022E5F94 MOV X2, X31
	0x022E5F98 BL 0x330E100
	0x022E5F9C B 0x22E5FE4
	0x022E5FA0 ADRP X0, 0x1E16000
	0x022E5FA4 LDR X0, [X0 + 0x760]
	0x022E5FA8 BL 0x1C16D08
	0x022E5FAC BL 0x1C16F10
	0x022E5FB0 MOV X20, X0
	0x022E5FB4 ADRP X0, 0x1E36000
	0x022E5FB8 LDR X0, [X0 + 0x648]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+56]
	004 Move X19, X0
	005 Compare X8, 0
	006 JumpIfNotEqual {10}
	007 Move X0, X19
	008 Call 0x1C5D6E0
	009 Move X8, [X19+56]
	010 Move X0, [X8+16]
	011 Move W8, [X0+309]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {17}
	016 Call 0x1C5D684
	017 Move W8, [X0+224]
	018 Compare W8, 0
	019 JumpIfNotEqual {21}
	020 Call 0x1C17DFC
	021 Move X8, [X19+56]
	022 Move X0, [X8+16]
	023 Move W8, [X0+309]
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {29}
	028 Call 0x1C5D684
	029 Move X8, [X0+184]
	030 Move X0, [X8]
	031 Move X30, [X31+16]
	032 Move X19, [X31+24]
	033 Return X0

Method: System.Void Initialize()

Disassembly:
	0x033A4040 CBZ X9, 0x33A4064
	0x033A4044 LDR X10, [X8 + 0xB0]
	0x033A4048 ADD X10, X10, 0x8
	0x033A404C LDUR X11, [X10 - 0x8]
	0x033A4050 CMP X11, X1
	0x033A4054 B.EQ 0x33A4074
	0x033A4058 SUBS X9, X9, 0x1
	0x033A405C ADD X10, X10, 0x10
	0x033A4060 B.NE 0x33A404C
	0x033A4064 MOV X0, X24
	0x033A4068 MOV W2, W31
	0x033A406C BL 0x1C5C788
	0x033A4070 B 0x33A4080
	0x033A4074 LDRSW X9, [X10]
	0x033A4078 ADD X8, X8, X9, 0x4, LSL
	0x033A407C ADD X0, X8, 0x138
	0x033A4080 LDP X8, X3, [X0]
	0x033A4084 MOV X0, X24
	0x033A4088 MOV X1, X25
	0x033A408C MOV X2, X22
	0x033A4090 BLR X8
	0x033A4094 TBNZ X0, 0x1F, 0x33A400C
	0x033A4098 LDR X9, [X20]
	0x033A409C CBZ X9, 0x33A416C
	0x033A40A0 LDR W8, [X9 + 0x18]
	0x033A40A4 SUB W23, W23, 0x1
	0x033A40A8 CMP W23, W8
	0x033A40AC B.CS 0x33A4170
	0x033A40B0 LDR X24, [X20 + 0x10]
	0x033A40B4 CBZ X24, 0x33A416C
	0x033A40B8 LDR X8, [X24]
	0x033A40BC ADD X9, X9, W23, 0x3, SXTW
	0x033A40C0 LDR X25, [X9 + 0x20]
	0x033A40C4 LDR X1, [X26]
	0x033A40C8 LDRH W9, [X8 + 0x12E]
	0x033A40CC CBZ X9, 0x33A40F0
	0x033A40D0 LDR X10, [X8 + 0xB0]
	0x033A40D4 ADD X10, X10, 0x8
	0x033A40D8 LDUR X11, [X10 - 0x8]
	0x033A40DC CMP X11, X1
	0x033A40E0 B.EQ 0x33A4100
	0x033A40E4 SUBS X9, X9, 0x1
	0x033A40E8 ADD X10, X10, 0x10
	0x033A40EC B.NE 0x33A40D8
	0x033A40F0 MOV X0, X24
	0x033A40F4 MOV W2, W31
	0x033A40F8 BL 0x1C5C788
	0x033A40FC B 0x33A410C
	0x033A4100 LDRSW X9, [X10]
	0x033A4104 ADD X8, X8, X9, 0x4, LSL
	0x033A4108 ADD X0, X8, 0x138
	0x033A410C LDP X8, X3, [X0]
	0x033A4110 MOV X0, X24
	0x033A4114 MOV X1, X22
	0x033A4118 MOV X2, X25
	0x033A411C BLR X8
	0x033A4120 TBNZ X0, 0x1F, 0x33A4098
	0x033A4124 CMP W19, W23
	0x033A4128 B.GE 0x33A4140
	0x033A412C MOV X0, X20
	0x033A4130 MOV W1, W19
	0x033A4134 MOV W2, W23
	0x033A4138 BL 0x33A3838
	0x033A413C B 0x33A400C
	0x033A4140 MOV X0, X20
	0x033A4144 MOV W1, W19
	0x033A4148 MOV W2, W21
	0x033A414C BL 0x33A3838
	0x033A4150 MOV W0, W19
	0x033A4154 LDP X20, X19, [X31 + 0x40]
	0x033A4158 LDP X22, X21, [X31 + 0x30]
	0x033A415C LDP X24, X23, [X31 + 0x20]
	0x033A4160 LDP X26, X25, [X31 + 0x10]
	0x033A4164 LDR X30, [X31], #0x50
	0x033A4168 RET
	0x033A416C BL 0x1C16F20
	0x033A4170 BL 0x1C16F28
	0x033A4174 SUB X31, X31, 0x70
	0x033A4178 STP X29, X30, [X31 + 0x10]
	0x033A417C STP X28, X27, [X31 + 0x20]
	0x033A4180 STP X26, X25, [X31 + 0x30]
	0x033A4184 STP X24, X23, [X31 + 0x40]
	0x033A4188 STP X22, X21, [X31 + 0x50]
	0x033A418C STP X20, X19, [X31 + 0x60]
	0x033A4190 ADRP X20, 0x1039000
	0x033A4194 LDRB W8, [X20 + 0x142]
	0x033A4198 MOV W23, W2
	0x033A419C MOV W24, W1
	0x033A41A0 MOV X19, X0
	0x033A41A4 STR W3, [X31 + 0xC]
	0x033A41A8 TBNZ X8, 0x0, 0x33A41C0
	0x033A41AC ADRP X0, 0xD79000
	0x033A41B0 LDR X0, [X0 + 0x918]
	0x033A41B4 BL 0x1C16CF4
	0x033A41B8 MOVZ W8, 0x1
	0x033A41BC STRB W8, [X20 + 0x142]
	0x033A41C0 LDR X22, [X19]
	0x033A41C4 CBZ X22, 0x33A44C0
	0x033A41C8 LDR W8, [X31 + 0xC]
	0x033A41CC LDR W9, [X22 + 0x18]
	0x033A41D0 SUB W28, W8, 0x1
	0x033A41D4 ADD W8, W28, W24
	0x033A41D8 CMP W8, W9
	0x033A41DC B.CS 0x33A44BC
	0x033A41E0 SXTW X8, W8
	0x033A41E4 ADD X10, X22, X8, 0x3, LSL
	0x033A41E8 LDR X9, [X19 + 0x8]
	0x033A41EC LDR X21, [X10 + 0x20]
	0x033A41F0 CBZ X9, 0x33A4210
	0x033A41F4 LDR W10, [X9 + 0x18]
	0x033A41F8 CMP W8, W10
	0x033A41FC B.CS 0x33A44BC
	0x033A4200 ADD X8, X9, X8, 0x3, LSL
	0x033A4204 LDR X8, [X8 + 0x20]
	0x033A4208 STR X8, [X31]
	0x033A420C B 0x33A4214
	0x033A4210 STR X31, [X31]
	0x033A4214 CMP W23, 0x0
	0x033A4218 CINC W8, W23, LT
	0x033A421C SBFM W29, W8, 0x1, 0x1F
	0x033A4220 CMP W29, W24
	0x033A4224 B.LT 0x33A4430
	0x033A4228 UBFM W20, W24, 0x1F, 0x1E
	0x033A422C CMP W20, W23
	0x033A4230 B.GE 0x33A42E0
	0x033A4234 LDR X9, [X19]
	0x033A4238 CBZ X9, 0x33A44C0
	0x033A423C LDR W8, [X31 + 0xC]
	0x033A4240 LDR W11, [X9 + 0x18]
	0x033A4244 ADD W10, W20, W8
	0x033A4248 SUB W8, W10, 0x1
	0x033A424C CMP W8, W11
	0x033A4250 B.CS 0x33A44BC
	0x033A4254 CMP W10, W11
	0x033A4258 B.CS 0x33A44BC
	0x033A425C LDR X25, [X19 + 0x10]
	0x033A4260 CBZ X25, 0x33A44C0
	0x033A4264 ADD X11, X9, W8, 0x3, SXTW
	0x033A4268 LDR X8, [X25]
	0x033A426C ADD X9, X9, W10, 0x3, SXTW
	0x033A4270 ADRP X10, 0xD79000
	0x033A4274 LDR X26, [X11 + 0x20]
	0x033A4278 LDR X27, [X9 + 0x20]
	0x033A427C LDRH W9, [X8 + 0x12E]
	0x033A4280 LDR X10, [X10 + 0x918]
	0x033A4284 LDR X1, [X10]
	0x033A4288 CBZ X9, 0x33A42AC
	0x033A428C LDR X10, [X8 + 0xB0]
	0x033A4290 ADD X10, X10, 0x8
	0x033A4294 LDUR X11, [X10 - 0x8]
	0x033A4298 CMP X11, X1
	0x033A429C B.EQ 0x33A42BC
	0x033A42A0 SUBS X9, X9, 0x1
	0x033A42A4 ADD X10, X10, 0x10
	0x033A42A8 B.NE 0x33A4294
	0x033A42AC MOV X0, X25
	0x033A42B0 MOV W2, W31
	0x033A42B4 BL 0x1C5C788
	0x033A42B8 B 0x33A42C8
	0x033A42BC LDRSW X9, [X10]
	0x033A42C0 ADD X8, X8, X9, 0x4, LSL
	0x033A42C4 ADD X0, X8, 0x138
	0x033A42C8 LDP X8, X3, [X0]
	0x033A42CC MOV X0, X25
	0x033A42D0 MOV X1, X26
	0x033A42D4 MOV X2, X27
	0x033A42D8 BLR X8
	0x033A42DC ORR W20, W20, W0, 0x1F
	0x033A42E0 LDR X9, [X19]
	0x033A42E4 CBZ X9, 0x33A44C0
	0x033A42E8 LDR W8, [X9 + 0x18]
	0x033A42EC ADD W10, W28, W20
	0x033A42F0 CMP W10, W8
	0x033A42F4 B.CS 0x33A44BC
	0x033A42F8 LDR X25, [X19 + 0x10]
	0x033A42FC CBZ X25, 0x33A44C0
	0x033A4300 LDR X8, [X25]
	0x033A4304 SXTW X27, W10
	0x033A4308 ADD X9, X9, X27, 0x3, LSL
	0x033A430C ADRP X10, 0xD79000
	0x033A4310 LDR X26, [X9 + 0x20]
	0x033A4314 LDRH W9, [X8 + 0x12E]
	0x033A4318 LDR X10, [X10 + 0x918]
	0x033A431C LDR X1, [X10]
	0x033A4320 CBZ X9, 0x33A4344
	0x033A4324 LDR X10, [X8 + 0xB0]
	0x033A4328 ADD X10, X10, 0x8
	0x033A432C LDUR X11, [X10 - 0x8]
	0x033A4330 CMP X11, X1
	0x033A4334 B.EQ 0x33A4354
	0x033A4338 SUBS X9, X9, 0x1
	0x033A433C ADD X10, X10, 0x10
	0x033A4340 B.NE 0x33A432C
	0x033A4344 MOV X0, X25
	0x033A4348 MOV W2, W31
	0x033A434C BL 0x1C5C788
	0x033A4350 B 0x33A4360
	0x033A4354 LDRSW X9, [X10]
	0x033A4358 ADD X8, X8, X9, 0x4, LSL
	0x033A435C ADD X0, X8, 0x138
	0x033A4360 LDP X8, X3, [X0]
	0x033A4364 MOV X0, X25
	0x033A4368 MOV X1, X21
	0x033A436C MOV X2, X26
	0x033A4370 BLR X8
	0x033A4374 TBZ X0, 0x1F, 0x33A4420
	0x033A4378 LDR X22, [X19]
	0x033A437C CBZ X22, 0x33A44C0
	0x033A4380 LDR W8, [X22 + 0x18]
	0x033A4384 CMP W27, W8
	0x033A4388 B.CS 0x33A44BC
	0x033A438C ADD X9, X22, X27, 0x3, LSL
	0x033A4390 LDR X25, [X9 + 0x20]
	0x033A4394 CBZ X25, 0x33A43B0
	0x033A4398 LDR X8, [X22]
	0x033A439C MOV X0, X25
	0x033A43A0 LDR X1, [X8 + 0x40]
	0x033A43A4 BL 0x1C16E00
	0x033A43A8 CBZ X0, 0x33A44C4
	0x033A43AC LDR W8, [X22 + 0x18]
	0x033A43B0 ADD W9, W28, W24
	0x033A43B4 CMP W9, W8
	0x033A43B8 B.CS 0x33A44BC
	0x033A43BC SXTW X26, W9
	0x033A43C0 ADD X8, X22, X26, 0x3, LSL
	0x033A43C4 STR X25, [X8 + 0x20]
	0x033A43C8 LDR X22, [X19 + 0x8]
	0x033A43CC CBZ X22, 0x33A4410
	0x033A43D0 LDR W8, [X22 + 0x18]
	0x033A43D4 CMP W27, W8
	0x033A43D8 B.CS 0x33A44BC
	0x033A43DC ADD X9, X22, X27, 0x3, LSL
	0x033A43E0 LDR X24, [X9 + 0x20]
	0x033A43E4 CBZ X24, 0x33A4400
	0x033A43E8 LDR X8, [X22]
	0x033A43EC MOV X0, X24
	0x033A43F0 LDR X1, [X8 + 0x40]
	0x033A43F4 BL 0x1C16E00
	0x033A43F8 CBZ X0, 0x33A44C4

ISIL:
	001 Return 
	002 Subtract X31, X31, 96
	003 Move [X31+32], X30
	004 Move [X31+40], X25
	005 Move [X31+48], X24
	006 Move [X31+56], X23
	007 Move [X31+64], X22
	008 Move [X31+72], X21
	009 Move [X31+80], X20
	010 Move [X31+88], X19
	011 NotImplemented "Instruction MRS not yet implemented."
	012 Move X8, [X22+40]
	013 Move X21, 0x103A000
	014 Move X19, X1
	015 Move X20, X0
	016 Move [X31+24], X8
	017 Move W8, [X21+317]
	018 Compare W8, 0
	019 JumpIfNotEqual {34}
	020 Move X0, 0xD88000
	021 Move X0, [X0+704]
	022 Call 0x1C17CF4
	023 Move X0, 0xD88000
	024 Move X0, [X0+712]
	025 Call 0x1C17CF4
	026 Move X0, 0xD88000
	027 Move X0, [X0+720]
	028 Call 0x1C17CF4
	029 Move X0, 0xD88000
	030 Move X0, [X0+696]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X21+317], W8
	034 Move X8, 0xD88000
	035 Move X8, [X8+696]
	036 Move [X31+8], X31
	037 Move [X31+16], X31
	038 Move X21, [X8]
	039 Move X8, [X21+56]
	040 Compare X8, 0
	041 JumpIfNotEqual {45}
	042 Move X0, X21
	043 Call 0x1C5D6E0
	044 Move X8, [X21+56]
	045 Move X0, [X8+16]
	046 Move W8, [X0+309]
	047 Move TEMP, X8
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfEqual {52}
	051 Call 0x1C5D684
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Move X8, [X21+56]
	057 Move X0, X20
	058 Move X1, X19
	059 Move X2, [X8+8]
	060 Call 0x28264B0, X0
	061 Move [X31+8], X0
	062 Move [X31+16], X1
	063 Move X21, 0xD88000
	064 Move X23, 0xD88000
	065 Move X24, 0xD88000
	066 Move X21, [X21+720]
	067 Move X23, [X23+704]
	068 Move X24, [X24+712]
	069 Move W20, W31
	070 Move W19, W31
	071 Move X0, [X21]
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1C17DFC
	076 Move X25, [X23]
	077 Move X0, [X25+32]
	078 Move W8, [X0+309]
	079 Move TEMP, X8
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfEqual {84}
	083 Call 0x1C5D684
	084 Move X8, [X0+192]
	085 Move X0, [X8+8]
	086 Move W8, [X0+309]
	087 Move TEMP, X8
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfEqual {92}
	091 Call 0x1C5D684
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1C17DFC
	096 Move X0, [X25+32]
	097 Move W8, [X0+309]
	098 Move TEMP, X8
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfEqual {103}
	102 Call 0x1C5D684
	103 Move X8, [X0+192]
	104 Move X0, [X8+8]
	105 Move W8, [X0+309]
	106 Move TEMP, X8
	107 And TEMP, TEMP, 1
	108 Compare TEMP, 1
	109 JumpIfEqual {111}
	110 Call 0x1C5D684
	111 Move X8, [X0+184]
	112 Move W8, [X8]
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move X0, [X21]
	115 Move W8, [X0+224]
	116 Compare W8, 0
	117 JumpIfNotEqual {119}
	118 Call 0x1C17DFC
	119 Move X2, [X24]
	120 Add X0, X31, 8
	121 Move W1, W19
	122 Call Vector`1<UInt64>.get_Item, X0, X1
	123 Compare X0, 0
	124 JumpIfNotEqual {128}
	125 Add W19, W19, 1
	126 Add W20, W20, 4
	127 Move X0, X31
	128 Move X8, [X22+40]
	129 Move X9, [X31+24]
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Move X9, 4
	132 Subtract X8, X0, 1
	133 NotImplemented "Instruction MOVK not yet implemented."
	134 Xor X8, X8, X0
	135 NotImplemented "Instruction MOVK not yet implemented."
	136 Multiply X8, X8, X9
	137 Move X8, X8
	138 ShiftRight X8, 49
	139 And X8, X8, 0x7FFFFFFF
	140 Add W0, W8, W20
	141 Move X20, [X31+80]
	142 Move X19, [X31+88]
	143 Move X22, [X31+64]
	144 Move X21, [X31+72]
	145 Move X24, [X31+48]
	146 Move X23, [X31+56]
	147 Move X30, [X31+32]
	148 Move X25, [X31+40]
	149 Add X31, X31, 96
	150 Return 
	151 Call 0x3EB2B20
	152 Subtract X31, X31, 80
	153 Move [X31+32], X30
	154 Move [X31+40], X23
	155 Move [X31+48], X22
	156 Move [X31+56], X21
	157 Move [X31+64], X20
	158 Move [X31+72], X19
	159 NotImplemented "Instruction MRS not yet implemented."
	160 Move X8, [X22+40]
	161 Move X21, 0x103A000
	162 Move X19, X1
	163 Move X20, X0
	164 Move [X31+24], X8
	165 Move W8, [X21+318]
	166 Compare W8, 0
	167 JumpIfNotEqual {182}
	168 Move X0, 0xD88000
	169 Move X0, [X0+704]
	170 Call 0x1C17CF4
	171 Move X0, 0xD88000
	172 Move X0, [X0+712]
	173 Call 0x1C17CF4
	174 Move X0, 0xD88000
	175 Move X0, [X0+720]
	176 Call 0x1C17CF4
	177 Move X0, 0xD88000
	178 Move X0, [X0+696]
	179 Call 0x1C17CF4
	180 Move W8, 1
	181 Move [X21+318], W8
	182 Move X8, 0xD88000
	183 Move X8, [X8+696]
	184 Move [X31+8], X31
	185 Move [X31+16], X31
	186 Move X21, [X8]
	187 Move X8, [X21+56]
	188 Compare X8, 0
	189 JumpIfNotEqual {193}
	190 Move X0, X21
	191 Call 0x1C5D6E0
	192 Move X8, [X21+56]
	193 Move X0, [X8+16]
	194 Move W8, [X0+309]
	195 Move TEMP, X8
	196 And TEMP, TEMP, 1
	197 Compare TEMP, 1
	198 JumpIfEqual {200}
	199 Call 0x1C5D684
	200 Move W8, [X0+224]
	201 Compare W8, 0
	202 JumpIfNotEqual {204}
	203 Call 0x1C17DFC
	204 Move X8, [X21+56]
	205 Move X0, X20
	206 Move X1, X19
	207 Move X2, [X8+8]
	208 Call 0x28264B0, X0
	209 Move X20, 0xD88000
	210 Move X20, [X20+720]
	211 Move X8, X0
	212 Move [X31+8], X8
	213 Move [X31+16], X1
	214 Move X0, [X20]
	215 Move W8, [X0+224]
	216 Compare W8, 0
	217 JumpIfNotEqual {219}
	218 Call 0x1C17DFC
	219 Move X8, 0xD88000
	220 Move X8, [X8+704]
	221 Move X19, [X8]
	222 Move X0, [X19+32]
	223 Move W8, [X0+309]
	224 Move TEMP, X8
	225 And TEMP, TEMP, 1
	226 Compare TEMP, 1
	227 JumpIfEqual {229}
	228 Call 0x1C5D684
	229 Move X8, [X0+192]
	230 Move X0, [X8+8]
	231 Move W8, [X0+309]
	232 Move TEMP, X8
	233 And TEMP, TEMP, 1
	234 Compare TEMP, 1
	235 JumpIfEqual {237}
	236 Call 0x1C5D684
	237 Move W8, [X0+224]
	238 Compare W8, 0
	239 JumpIfNotEqual {241}
	240 Call 0x1C17DFC
	241 Move X0, [X19+32]
	242 Move W8, [X0+309]
	243 Move TEMP, X8
	244 And TEMP, TEMP, 1
	245 Compare TEMP, 1
	246 JumpIfEqual {248}
	247 Call 0x1C5D684
	248 Move X8, [X0+192]
	249 Move X0, [X8+8]
	250 Move W8, [X0+309]
	251 Move TEMP, X8
	252 And TEMP, TEMP, 1
	253 Compare TEMP, 1
	254 JumpIfEqual {256}
	255 Call 0x1C5D684
	256 Move X8, [X0+184]
	257 Move X23, 0xD88000
	258 Move W8, [X8]
	259 Move X23, [X23+712]
	260 Move W9, W8
	261 ShiftRight W9, 30
	262 And W9, W9, 0x1FFFFFFF
	263 Subtract W19, W8, 1
	264 Subtract W8, W9, 4
	265 Move W21, W8
	266 Move TEMP, X19
	267 And TEMP, TEMP, -2147483648
	268 Compare TEMP, -2147483648
	269 JumpIfEqual {290}
	270 Move X0, [X20]
	271 Move W8, [X0+224]
	272 Compare W8, 0
	273 JumpIfNotEqual {275}
	274 Call 0x1C17DFC
	275 Move X2, [X23]
	276 Add X0, X31, 8
	277 Move W1, W19
	278 Call Vector`1<UInt64>.get_Item, X0, X1
	279 Subtract W8, W21, 4
	280 Subtract W19, W19, 1
	281 Compare X0, 0
	282 JumpIfEqual {265}
	283 NotImplemented "Instruction CMP not yet implemented."
	284 Move W8, 3
	285 Move X0, X0
	286 ShiftRight X0, 48
	287 And X0, X0, 0x7FFF
	288 NotImplemented "Instruction CMP not yet implemented."
	289 Subtract W8, W8, 1
	290 Move W8, 3
	291 Move X9, [X22+40]
	292 Move X10, [X31+24]
	293 NotImplemented "Instruction CMP not yet implemented."
	294 Add W0, W8, W21
	295 Move X20, [X31+64]
	296 Move X19, [X31+72]
	297 Move X22, [X31+48]
	298 Move X21, [X31+56]
	299 Move X30, [X31+32]
	300 Move X23, [X31+40]
	301 Add X31, X31, 80
	302 Return 
	303 Call 0x3EB2B20

Method: System.Int32 IndexOfImpl(T[] array, T value, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x022F8FF0 LDP X24, X23, [X31 + 0x10]
	0x022F8FF4 LDR X30, [X31], #0x40
	0x022F8FF8 BR X7
	0x022F8FFC BL 0x1C16F20
	0x022F9000 STR X30, [X31 - 0x40]!
	0x022F9004 STP X24, X23, [X31 + 0x10]
	0x022F9008 STP X22, X21, [X31 + 0x20]
	0x022F900C STP X20, X19, [X31 + 0x30]
	0x022F9010 LDR X8, [X5 + 0x38]
	0x022F9014 MOV W19, W4
	0x022F9018 MOV W20, W3
	0x022F901C MOV X21, X2
	0x022F9020 MOV X22, X1
	0x022F9024 MOV X23, X0
	0x022F9028 CBNZ X8, 0x22F903C
	0x022F902C MOV X0, X5
	0x022F9030 MOV X24, X5
	0x022F9034 BL 0x1C5C6E0
	0x022F9038 LDR X8, [X24 + 0x38]
	0x022F903C LDR X0, [X8]
	0x022F9040 BL 0x21183BC
	0x022F9044 CBZ X0, 0x22F9078
	0x022F9048 LDR X8, [X0]
	0x022F904C MOV X1, X23
	0x022F9050 MOV X2, X22
	0x022F9054 MOV X3, X21
	0x022F9058 LDP X7, X6, [X8 + 0x1D8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X4+56]
	008 Move W19, W3
	009 Move W20, W2
	010 Move X21, X1
	011 Move X22, X0
	012 Compare X8, 0
	013 JumpIfNotEqual {18}
	014 Move X0, X4
	015 Move X23, X4
	016 Call 0x1C5D6E0
	017 Move X8, [X23+56]
	018 Move X0, [X8]
	019 Call 0x2117C00
	020 Compare X0, 0
	021 JumpIfEqual {36}
	022 Move X8, [X0]
	023 Move X1, X22
	024 Move X2, X21
	025 Move W3, W20
	026 Move X6, [X8+472]
	027 Move X5, [X8+480]
	028 Move W4, W19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X22, [X31+16]
	032 Move X21, [X31+24]
	033 Move X30, [X31+48]
	034 Move X23, [X31+56]
	035 CallNoReturn X6
	036 Call 0x1C17F20

Method: System.Int32 LastIndexOfImpl(T[] array, T value, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x0210BC84 LDP X24, X23, [X31 + 0x10]
	0x0210BC88 LDR X30, [X31], #0x40
	0x0210BC8C BR X7
	0x0210BC90 BL 0x1C16F20
	0x0210BC94 SUB X31, X31, 0x70
	0x0210BC98 STP X30, X23, [X31 + 0x40]
	0x0210BC9C STP X22, X21, [X31 + 0x50]
	0x0210BCA0 STP X20, X19, [X31 + 0x60]
	0x0210BCA4 LDR X8, [X4 + 0x38]
	0x0210BCA8 MOV W19, W3
	0x0210BCAC MOV W20, W2
	0x0210BCB0 MOV X22, X1
	0x0210BCB4 MOV X21, X0
	0x0210BCB8 CBNZ X8, 0x210BCCC
	0x0210BCBC MOV X0, X4
	0x0210BCC0 MOV X23, X4
	0x0210BCC4 BL 0x1C5C6E0
	0x0210BCC8 LDR X8, [X23 + 0x38]
	0x0210BCCC LDR X0, [X8]
	0x0210BCD0 BL 0x2118480
	0x0210BCD4 LDP V1, V0, [X22]
	0x0210BCD8 STP V1, V0, [X31]
	0x0210BCDC CBZ X0, 0x210BD1C
	0x0210BCE0 LDR X8, [X0]
	0x0210BCE4 LDP V0, V1, [X31]
	0x0210BCE8 ADD X2, X31, 0x20
	0x0210BCEC MOV X1, X21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X4+56]
	008 Move W19, W3
	009 Move W20, W2
	010 Move X21, X1
	011 Move X22, X0
	012 Compare X8, 0
	013 JumpIfNotEqual {18}
	014 Move X0, X4
	015 Move X23, X4
	016 Call 0x1C5D6E0
	017 Move X8, [X23+56]
	018 Move X0, [X8]
	019 Call 0x2117C00
	020 Compare X0, 0
	021 JumpIfEqual {36}
	022 Move X8, [X0]
	023 Move X1, X22
	024 Move X2, X21
	025 Move W3, W20
	026 Move X6, [X8+488]
	027 Move X5, [X8+496]
	028 Move W4, W19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X22, [X31+16]
	032 Move X21, [X31+24]
	033 Move X30, [X31+48]
	034 Move X23, [X31+56]
	035 CallNoReturn X6
	036 Call 0x1C17F20

Method: System.Void SortImpl(System.Array keys, System.Array items, System.Int32 index, System.Int32 length, System.Collections.IComparer comparer)

Disassembly:
	0x033A3738 BL 0x1C16E00
	0x033A373C CBZ X0, 0x33A382C
	0x033A3740 LDR W8, [X27 + 0x18]
	0x033A3744 CMP W8, W21
	0x033A3748 B.LS 0x33A3824
	0x033A374C STR X23, [X24]
	0x033A3750 LDR X23, [X20]
	0x033A3754 CBZ X23, 0x33A3828
	0x033A3758 CBZ X22, 0x33A3770
	0x033A375C LDR X8, [X23]
	0x033A3760 MOV X0, X22
	0x033A3764 LDR X1, [X8 + 0x40]
	0x033A3768 BL 0x1C16E00
	0x033A376C CBZ X0, 0x33A382C
	0x033A3770 LDR W8, [X23 + 0x18]
	0x033A3774 CMP W8, W19
	0x033A3778 B.LS 0x33A3824
	0x033A377C ADD X8, X23, X25, 0x3, LSL
	0x033A3780 STR X22, [X8 + 0x20]
	0x033A3784 LDR X27, [X20 + 0x8]
	0x033A3788 CBZ X27, 0x33A380C
	0x033A378C LDR W8, [X27 + 0x18]
	0x033A3790 CMP W8, W21
	0x033A3794 B.LS 0x33A3824
	0x033A3798 ADD X24, X27, X26, 0x3, LSL
	0x033A379C LDR X22, [X24 + 0x20]!
	0x033A37A0 CMP W8, W19
	0x033A37A4 B.LS 0x33A3824
	0x033A37A8 ADD X9, X27, X25, 0x3, LSL
	0x033A37AC LDR X23, [X9 + 0x20]
	0x033A37B0 CBZ X23, 0x33A37CC
	0x033A37B4 LDR X8, [X27]
	0x033A37B8 MOV X0, X23
	0x033A37BC LDR X1, [X8 + 0x40]
	0x033A37C0 BL 0x1C16E00
	0x033A37C4 CBZ X0, 0x33A382C
	0x033A37C8 LDR W8, [X27 + 0x18]
	0x033A37CC CMP W8, W21
	0x033A37D0 B.LS 0x33A3824
	0x033A37D4 STR X23, [X24]
	0x033A37D8 LDR X20, [X20 + 0x8]
	0x033A37DC CBZ X20, 0x33A3828
	0x033A37E0 CBZ X22, 0x33A37F8
	0x033A37E4 LDR X8, [X20]
	0x033A37E8 MOV X0, X22
	0x033A37EC LDR X1, [X8 + 0x40]
	0x033A37F0 BL 0x1C16E00
	0x033A37F4 CBZ X0, 0x33A382C
	0x033A37F8 LDR W8, [X20 + 0x18]
	0x033A37FC CMP W8, W19
	0x033A3800 B.LS 0x33A3824
	0x033A3804 ADD X8, X20, X25, 0x3, LSL
	0x033A3808 STR X22, [X8 + 0x20]
	0x033A380C LDP X20, X19, [X31 + 0x40]
	0x033A3810 LDP X22, X21, [X31 + 0x30]
	0x033A3814 LDP X24, X23, [X31 + 0x20]
	0x033A3818 LDP X26, X25, [X31 + 0x10]
	0x033A381C LDP X30, X27, [X31], #0x50
	0x033A3820 RET
	0x033A3824 BL 0x1C16F28
	0x033A3828 BL 0x1C16F20
	0x033A382C BL 0x1C16F44
	0x033A3830 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+48], X30
	003 Move [X31+56], X25
	004 Move [X31+64], X24
	005 Move [X31+72], X23
	006 Move [X31+80], X22
	007 Move [X31+88], X21
	008 Move [X31+96], X20
	009 Move [X31+104], X19
	010 Move X24, 0x103B000
	011 Move X25, 0xD51000
	012 Move W8, [X24+316]
	013 Move X25, [X25+2512]
	014 Move X21, X4
	015 Move W19, W3
	016 Move W20, W2
	017 Move X22, X1
	018 Move X23, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0xD51000
	024 Move X0, [X0+2512]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X24+316], W8
	028 Move X1, [X25]
	029 Move X0, X23
	030 Move [X31+24], X31
	031 Move [X31+32], X31
	032 Move [X31+40], X31
	033 Move [X31], X31
	034 Move [X31+8], X31
	035 Move [X31+16], X31
	036 Call 0x1C17E00
	037 Compare X0, 0
	038 JumpIfEqual {48}
	039 Move X1, [X25]
	040 Move X24, X0
	041 Move X0, X22
	042 Call 0x1C17E00
	043 Move X2, X0
	044 Compare X22, 0
	045 JumpIfEqual {59}
	046 Compare X2, 0
	047 JumpIfNotEqual {59}
	048 Add X0, X31, 0
	049 Move X1, X23
	050 Move X2, X22
	051 Move X3, X21
	052 Move X4, X31
	053 Call SorterGenericArray..ctor, X0, X1, X2, X3
	054 Add X0, X31, 0
	055 Move W1, W20
	056 Move W2, W19
	057 Move X3, X31
	058 Call SorterGenericArray.Sort, X0, X1, X2
	059 Add X0, X31, 24
	060 Move X1, X24
	061 Move X3, X21
	062 Move X4, X31
	063 Call SorterObjectArray..ctor, X0, X1, X2, X3
	064 Add X0, X31, 24
	065 Move W1, W20
	066 Move W2, W19
	067 Move X3, X31
	068 Call SorterObjectArray.Sort, X0, X1, X2
	069 Move X20, [X31+96]
	070 Move X19, [X31+104]
	071 Move X22, [X31+80]
	072 Move X21, [X31+88]
	073 Move X24, [X31+64]
	074 Move X23, [X31+72]
	075 Move X30, [X31+48]
	076 Move X25, [X31+56]
	077 Add X31, X31, 112
	078 Return 

Method: T UnsafeLoad(T[] array, System.Int32 index)

Disassembly:
	0x02172AD8 LDR V0, [X31]
	0x02172ADC MOVZ W10, 0x18
	0x02172AE0 SMADDL X8, X21, X10, X8
	0x02172AE4 STR X9, [X8 + 0x30]
	0x02172AE8 STR V0, [X8 + 0x2]
	0x02172AEC B 0x2172B50
	0x02172AF0 LDR X8, [X21 + 0x38]
	0x02172AF4 LDR X0, [X8 + 0x8]
	0x02172AF8 LDRB W8, [X0 + 0x135]
	0x02172AFC TBNZ X8, 0x0, 0x2172B04
	0x02172B00 BL 0x1C5C684

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {10}
	004 Move W8, [X0+24]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Add X8, X0, W1
	007 Move X0, [X8+32]
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20
	011 Call 0x1C17F28

Method: System.Void UnsafeStore(T[] array, System.Int32 index, T value)

Disassembly:
	0x02172C8C STP X20, X19, [X8 + 0x20]
	0x02172C90 B 0x2172CC8
	0x02172C94 LDR X8, [X22 + 0x38]
	0x02172C98 LDR X0, [X8 + 0x8]
	0x02172C9C LDRB W8, [X0 + 0x135]
	0x02172CA0 TBNZ X8, 0x0, 0x2172CA8
	0x02172CA4 BL 0x1C5C684
	0x02172CA8 MOVZ W1, 0x1
	0x02172CAC BL 0x1C16D6C
	0x02172CB0 STR X0, [X21]
	0x02172CB4 CBZ X0, 0x2172CDC
	0x02172CB8 LDR W8, [X0 + 0x18]
	0x02172CBC CBZ W8, 0x2172CE0
	0x02172CC0 MOV W22, W31
	0x02172CC4 STP X20, X19, [X0 + 0x20]
	0x02172CC8 MOV W0, W22
	0x02172CCC LDP X20, X19, [X31 + 0x20]
	0x02172CD0 LDP X22, X21, [X31 + 0x10]
	0x02172CD4 LDR X30, [X31], #0x30
	0x02172CD8 RET
	0x02172CDC BL 0x1C16F20
	0x02172CE0 BL 0x1C16F28
	0x02172CE4 STP X30, X21, [X31 - 0x20]!
	0x02172CE8 STP X20, X19, [X31 + 0x10]
	0x02172CEC LDR X8, [X2 + 0x38]
	0x02172CF0 MOV X21, X2
	0x02172CF4 MOV X19, X1
	0x02172CF8 MOV X20, X0
	0x02172CFC CBNZ X8, 0x2172D08
	0x02172D00 MOV X0, X21
	0x02172D04 BL 0x1C5C6E0
	0x02172D08 LDR X8, [X20]
	0x02172D0C CBZ X8, 0x2172D4C
	0x02172D10 LDR X9, [X21 + 0x38]
	0x02172D14 LDR X21, [X8 + 0x18]
	0x02172D18 MOV X0, X20
	0x02172D1C LDR X2, [X9 + 0x18]
	0x02172D20 ADD W1, W21, 0x1
	0x02172D24 BL 0x2142E6C
	0x02172D28 LDR X8, [X20]
	0x02172D2C CBZ X8, 0x2172D94
	0x02172D30 LDR W9, [X8 + 0x18]
	0x02172D34 CMP W21, W9
	0x02172D38 B.CS 0x2172D98
	0x02172D3C UBFM X9, X21, 0x20, 0x1F
	0x02172D40 ADD X8, X8, X9, 0x1D, ASR
	0x02172D44 ADD X8, X8, 0x20
	0x02172D48 B 0x2172D80
	0x02172D4C LDR X8, [X21 + 0x38]
	0x02172D50 LDR X0, [X8 + 0x8]
	0x02172D54 LDRB W8, [X0 + 0x135]
	0x02172D58 TBNZ X8, 0x0, 0x2172D60
	0x02172D5C BL 0x1C5C684
	0x02172D60 MOVZ W1, 0x1
	0x02172D64 BL 0x1C16D6C
	0x02172D68 STR X0, [X20]
	0x02172D6C CBZ X0, 0x2172D94
	0x02172D70 LDR W8, [X0 + 0x18]
	0x02172D74 CBZ W8, 0x2172D98
	0x02172D78 MOV W21, W31
	0x02172D7C ADD X8, X0, 0x20
	0x02172D80 STR X19, [X8]
	0x02172D84 LDP X20, X19, [X31 + 0x10]
	0x02172D88 MOV W0, W21
	0x02172D8C LDP X30, X21, [X31], #0x20
	0x02172D90 RET
	0x02172D94 BL 0x1C16F20
	0x02172D98 BL 0x1C16F28
	0x02172D9C STP D9, D8, [X31 - 0x30]!

ISIL:
	001 Move [X31-80], X29
	002 Move [X31-72], X30
	003 Move [X31+16], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Add X29, X31, 0
	011 Subtract X31, X31, 16
	012 NotImplemented "Instruction MRS not yet implemented."
	013 Move X8, [X25+40]
	014 Move X21, X3
	015 Move X23, X2
	016 Move W19, W1
	017 Move [X29-8], X8
	018 Move [X29-16], X2
	019 Move X8, [X3+56]
	020 Move X20, X0
	021 Compare X8, 0
	022 JumpIfNotEqual {26}
	023 Move X0, X21
	024 Call 0x1C5D6E0
	025 Move X8, [X21+56]
	026 Move X8, [X8+8]
	027 Add X9, X31, 0
	028 Move W22, [X8+252]
	029 Add X10, X22, 15
	030 And X10, X10, 0x1FFFFFFFF
	031 Subtract X24, X9, X10
	032 Add X31, X24, 0
	033 Move W8, [X8+40]
	034 Move X0, X24
	035 Move X2, X22
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Subtract X8, X29, 16
	038 NotImplemented "Instruction CSEL not yet implemented."
	039 Call 0x3EB2AC0
	040 Compare X20, 0
	041 JumpIfEqual {78}
	042 Move W8, [X20+24]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X8, [X20]
	045 Move X9, W19
	046 Move X1, X24
	047 Move X2, X22
	048 Move W8, [X8+260]
	049 NotImplemented "Instruction NOP not yet implemented."
	050 NotImplemented "Instruction MADD not yet implemented."
	051 Add X0, X8, 32
	052 Call 0x3EB2AC0
	053 Move X8, [X21+56]
	054 Move X0, [X8+8]
	055 Move W8, [X0+309]
	056 Move TEMP, X8
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfEqual {61}
	060 Call 0x1C5D684
	061 Move W8, [X20+24]
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X8, [X25+40]
	064 NotImplemented "Instruction LDUR not yet implemented."
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Add X31, X29, 0
	067 Move X20, [X31+64]
	068 Move X19, [X31+72]
	069 Move X22, [X31+48]
	070 Move X21, [X31+56]
	071 Move X24, [X31+32]
	072 Move X23, [X31+40]
	073 Move X25, [X31+16]
	074 Move X29, [X31+80]
	075 Move X30, [X31+88]
	076 Return 
	077 Call 0x1C17F28
	078 Call 0x1C17F20
	079 Call 0x3EB2B20

Method: R UnsafeMov(S instance)

Disassembly:
	0x02172BE0 TBNZ X8, 0x0, 0x2172BE8
	0x02172BE4 BL 0x1C5C684

ISIL:
	001 And W0, W0, 255
	002 Return X0

