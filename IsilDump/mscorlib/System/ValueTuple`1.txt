Type: System.ValueTuple`1

Method: System.Void .ctor(T1 item1)

Disassembly:
	0x02795158 ADD X9, X8, 0x135
	0x0279515C LDRH W9, [X9]
	0x02795160 B 0x2795168

ISIL:
	001 And W8, W1, 1
	002 Move [X0], W8
	003 Return 

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x02795164 MOV X0, X8
	0x02795168 LDR X10, [X0 + 0xC0]
	0x0279516C STUR X22, [X29 - 0x10]
	0x02795170 LDR X10, [X10 + 0x8]
	0x02795174 LDR W24, [X10 + 0xFC]
	0x02795178 TBNZ X9, 0x0, 0x2795188
	0x0279517C MOV X0, X8
	0x02795180 BL 0x1C5C684
	0x02795184 MOV X8, X0
	0x02795188 LDR X8, [X8 + 0xC0]
	0x0279518C LDR X8, [X8]
	0x02795190 LDR W22, [X8 + 0xFC]
	0x02795194 ADD X8, X31, 0x0
	0x02795198 ADD X9, X22, 0xF
	0x0279519C AND X9, X9, 0x1FFFFFFFF
	0x027951A0 SUB X27, X8, X9
	0x027951A4 ADD X31, X27, 0x0
	0x027951A8 ADD X8, X31, 0x0
	0x027951AC SUB X21, X8, X9
	0x027951B0 ADD X31, X21, 0x0
	0x027951B4 ADD X9, X24, 0xF
	0x027951B8 ADD X8, X31, 0x0
	0x027951BC AND X9, X9, 0x1FFFFFFFF
	0x027951C0 SUB X25, X8, X9
	0x027951C4 ADD X31, X25, 0x0
	0x027951C8 ADD X8, X31, 0x0
	0x027951CC SUB X28, X8, X9
	0x027951D0 ADD X31, X28, 0x0
	0x027951D4 MOV X0, X28
	0x027951D8 MOV W1, W31
	0x027951DC MOV X2, X24
	0x027951E0 BL 0x3EB1B10
	0x027951E4 CBZ X26, 0x2795218
	0x027951E8 LDR X0, [X20 + 0x20]
	0x027951EC LDRB W8, [X0 + 0x135]
	0x027951F0 TBNZ X8, 0x0, 0x27951F8
	0x027951F4 BL 0x1C5C684
	0x027951F8 LDR X8, [X0 + 0xC0]
	0x027951FC LDR X0, [X8 + 0x8]
	0x02795200 LDRB W8, [X0 + 0x135]
	0x02795204 TBNZ X8, 0x0, 0x279520C
	0x02795208 BL 0x1C5C684
	0x0279520C LDR X8, [X26]
	0x02795210 CMP X8, X0
	0x02795214 B.EQ 0x2795220
	0x02795218 MOV W0, W31
	0x0279521C B 0x27953A8
	0x02795220 LDR X0, [X20 + 0x20]
	0x02795224 LDRB W8, [X0 + 0x135]
	0x02795228 TBNZ X8, 0x0, 0x2795230
	0x0279522C BL 0x1C5C684
	0x02795230 LDR X8, [X0 + 0xC0]
	0x02795234 LDR X1, [X8 + 0x8]
	0x02795238 LDRB W8, [X1 + 0x135]
	0x0279523C TBNZ X8, 0x0, 0x279524C
	0x02795240 MOV X0, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+32]
	006 Move X20, X2
	007 Move X21, X1
	008 Move X19, X0
	009 Move W9, [X8+309]
	010 Move TEMP, X9
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {17}
	014 Move X0, X8
	015 Call 0x1C5D684
	016 Move X8, X0
	017 Move X8, [X8+192]
	018 Move X0, [X8+8]
	019 Move W8, [X0+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {25}
	024 Call 0x1C5D684
	025 Compare X21, 0
	026 JumpIfEqual {29}
	027 Move X8, [X21]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move W0, W31
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return X0
	035 Move X0, [X20+32]
	036 Move W8, [X0+309]
	037 Move TEMP, X8
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {42}
	041 Call 0x1C5D684
	042 Move X8, [X0+192]
	043 Move X1, [X8+8]
	044 Move W8, [X1+309]
	045 Move TEMP, X8
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {52}
	049 Move X0, X1
	050 Call 0x1C5D684
	051 Move X1, X0
	052 Move X8, [X21]
	053 Move X9, [X1+64]
	054 Move X0, X21
	055 Move X8, [X8+64]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Call 0x1C17E08
	058 Move X8, X0
	059 Move X0, [X20+32]
	060 Move W20, [X8]
	061 Move W9, [X0+309]
	062 Move TEMP, X9
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfEqual {67}
	066 Call 0x1C5D684
	067 Move X8, [X0+192]
	068 Move X0, X19
	069 Move X1, X20
	070 Move X20, [X31+16]
	071 Move X19, [X31+24]
	072 Move X2, [X8+16]
	073 Move X30, [X31+32]
	074 Move X21, [X31+40]
	075 Call 0x1C181E0

Method: System.Boolean Equals(System.ValueTuple`1<T1> other)

Disassembly:
	0x02795244 BL 0x1C5C684
	0x02795248 MOV X1, X0
	0x0279524C LDR X8, [X26]
	0x02795250 LDR X9, [X1 + 0x40]
	0x02795254 MOV X0, X26
	0x02795258 LDR X8, [X8 + 0x40]
	0x0279525C CMP X8, X9
	0x02795260 B.NE 0x27953DC
	0x02795264 BL 0x1C16E08
	0x02795268 MOV X1, X0
	0x0279526C MOV X0, X28
	0x02795270 MOV X2, X24
	0x02795274 BL 0x3EB1AC0
	0x02795278 LDR X0, [X20 + 0x20]
	0x0279527C LDRB W8, [X0 + 0x135]
	0x02795280 TBNZ X8, 0x0, 0x2795288
	0x02795284 BL 0x1C5C684
	0x02795288 LDR X8, [X0 + 0xC0]
	0x0279528C MOV X0, X23
	0x02795290 LDR X8, [X8 + 0x8]
	0x02795294 LDR X1, [X8 + 0x80]
	0x02795298 BL 0x1C16D18

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X2+32]
	005 Move X19, X1
	006 Move X20, X0
	007 Move W9, [X8+309]
	008 Move TEMP, X9
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {15}
	012 Move X0, X8
	013 Call 0x1C5D684
	014 Move X8, X0
	015 Move X8, [X8+192]
	016 Move X0, [X8+32]
	017 Call 0x21199DC
	018 Compare X0, 0
	019 JumpIfEqual {29}
	020 Move X8, [X0]
	021 Move W1, [X20]
	022 And W2, W19, 1
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X4, [X8+440]
	026 Move X3, [X8+448]
	027 Move X30, [X31+32]
	028 CallNoReturn X4
	029 Call 0x1C17F20

Method: System.Boolean System.Collections.IStructuralEquatable.Equals(System.Object other, System.Collections.IEqualityComparer comparer)

Disassembly:
	0x0279529C MOV X1, X0
	0x027952A0 MOV X0, X27
	0x027952A4 MOV X2, X22
	0x027952A8 BL 0x3EB1AC0
	0x027952AC LDR X0, [X20 + 0x20]
	0x027952B0 LDRB W8, [X0 + 0x135]
	0x027952B4 TBNZ X8, 0x0, 0x27952BC
	0x027952B8 BL 0x1C5C684
	0x027952BC LDR X8, [X0 + 0xC0]
	0x027952C0 MOV X1, X27
	0x027952C4 LDR X0, [X8]
	0x027952C8 BL 0x1C16E04
	0x027952CC MOV X23, X0
	0x027952D0 MOV X0, X25
	0x027952D4 MOV X1, X28
	0x027952D8 MOV X2, X24
	0x027952DC BL 0x3EB1AC0
	0x027952E0 LDR X0, [X20 + 0x20]
	0x027952E4 LDRB W8, [X0 + 0x135]
	0x027952E8 TBNZ X8, 0x0, 0x27952F0
	0x027952EC BL 0x1C5C684
	0x027952F0 LDR X8, [X0 + 0xC0]
	0x027952F4 MOV X0, X25
	0x027952F8 LDR X8, [X8 + 0x8]
	0x027952FC LDR X1, [X8 + 0x80]
	0x02795300 BL 0x1C16D18
	0x02795304 MOV X1, X0
	0x02795308 MOV X0, X21
	0x0279530C MOV X2, X22
	0x02795310 BL 0x3EB1AC0
	0x02795314 LDR X0, [X20 + 0x20]
	0x02795318 LDRB W8, [X0 + 0x135]
	0x0279531C TBNZ X8, 0x0, 0x2795324
	0x02795320 BL 0x1C5C684
	0x02795324 LDR X8, [X0 + 0xC0]
	0x02795328 LDUR X22, [X29 - 0x10]
	0x0279532C MOV X1, X21
	0x02795330 LDR X0, [X8]
	0x02795334 BL 0x1C16E04
	0x02795338 CBZ X22, 0x27953E0
	0x0279533C ADRP X10, 0x1988000
	0x02795340 LDR X8, [X22]
	0x02795344 LDR X10, [X10 + 0x900]
	0x02795348 MOV X20, X0
	0x0279534C LDRH W9, [X8 + 0x12E]
	0x02795350 LDR X1, [X10]
	0x02795354 CBZ X9, 0x2795378
	0x02795358 LDR X10, [X8 + 0xB0]
	0x0279535C ADD X10, X10, 0x8
	0x02795360 LDUR X11, [X10 - 0x8]
	0x02795364 CMP X11, X1
	0x02795368 B.EQ 0x2795388
	0x0279536C SUBS X9, X9, 0x1
	0x02795370 ADD X10, X10, 0x10
	0x02795374 B.NE 0x2795360
	0x02795378 MOV X0, X22
	0x0279537C MOV W2, W31
	0x02795380 BL 0x1C5C788
	0x02795384 B 0x2795394
	0x02795388 LDRSW X9, [X10]
	0x0279538C ADD X8, X8, X9, 0x4, LSL
	0x02795390 ADD X0, X8, 0x138
	0x02795394 LDP X8, X3, [X0]
	0x02795398 MOV X0, X22
	0x0279539C MOV X1, X23
	0x027953A0 MOV X2, X20
	0x027953A4 BLR X8
	0x027953A8 LDR X8, [X19 + 0x28]
	0x027953AC LDUR X9, [X29 - 0x8]
	0x027953B0 CMP X8, X9
	0x027953B4 B.NE 0x27953E4
	0x027953B8 AND W0, W0, 0x1
	0x027953BC ADD X31, X29, 0x0
	0x027953C0 LDP X20, X19, [X31 + 0x50]
	0x027953C4 LDP X22, X21, [X31 + 0x40]
	0x027953C8 LDP X24, X23, [X31 + 0x30]
	0x027953CC LDP X26, X25, [X31 + 0x20]
	0x027953D0 LDP X28, X27, [X31 + 0x10]
	0x027953D4 LDP X29, X30, [X31], #0x60
	0x027953D8 RET
	0x027953DC BL 0x1C171E0
	0x027953E0 BL 0x1C16F20
	0x027953E4 BL 0x3EB1B20
	0x027953E8 STP X29, X30, [X31 - 0x60]!
	0x027953EC STP X28, X27, [X31 + 0x10]
	0x027953F0 STP X26, X25, [X31 + 0x20]
	0x027953F4 STP X24, X23, [X31 + 0x30]
	0x027953F8 STP X22, X21, [X31 + 0x40]
	0x027953FC STP X20, X19, [X31 + 0x50]
	0x02795400 ADD X29, X31, 0x0
	0x02795404 SUB X31, X31, 0x20
	0x02795408 MRS X28, 0xC000
	0x0279540C LDR X8, [X28 + 0x28]
	0x02795410 MOV X19, X2
	0x02795414 MOV X27, X1
	0x02795418 MOV X22, X0
	0x0279541C STUR X8, [X29 - 0x8]
	0x02795420 LDR X8, [X2 + 0x20]
	0x02795424 ADD X9, X8, 0x135
	0x02795428 LDRH W9, [X9]
	0x0279542C TBNZ X9, 0x0, 0x2795448
	0x02795430 MOV X0, X8
	0x02795434 BL 0x1C5C684
	0x02795438 LDR X8, [X19 + 0x20]
	0x0279543C ADD X9, X8, 0x135
	0x02795440 LDRH W9, [X9]
	0x02795444 B 0x279544C
	0x02795448 MOV X0, X8
	0x0279544C LDR X10, [X0 + 0xC0]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x1C46000
	009 Move W8, [X23+2145]
	010 Move X20, X3
	011 Move X19, X2
	012 Move X21, X1
	013 Move X22, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x1989000
	019 Move X0, [X0+2304]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+2145], W8
	023 Compare X21, 0
	024 JumpIfEqual {42}
	025 Move X0, [X20+32]
	026 Move W8, [X0+309]
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {32}
	031 Call 0x1C5D684
	032 Move X8, [X0+192]
	033 Move X0, [X8+8]
	034 Move W8, [X0+309]
	035 Move TEMP, X8
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {40}
	039 Call 0x1C5D684
	040 Move X8, [X21]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move W0, W31
	043 Move X0, [X20+32]
	044 Move W8, [X0+309]
	045 Move TEMP, X8
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {50}
	049 Call 0x1C5D684
	050 Move X8, [X0+192]
	051 Move X1, [X8+8]
	052 Move W8, [X1+309]
	053 Move TEMP, X8
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfEqual {60}
	057 Move X0, X1
	058 Call 0x1C5D684
	059 Move X1, X0
	060 Move X8, [X21]
	061 Move X9, [X1+64]
	062 Move X0, X21
	063 Move X8, [X8+64]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Call 0x1C17E08
	066 Move W8, [X22]
	067 Move W21, [X0]
	068 Move [X31+12], W8
	069 Move X0, [X20+32]
	070 Move W8, [X0+309]
	071 Move TEMP, X8
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfEqual {76}
	075 Call 0x1C5D684
	076 Move X8, [X0+192]
	077 Add X1, X31, 12
	078 Move X0, [X8]
	079 Call 0x1C17E04
	080 And W8, W21, 1
	081 Move [X31+8], W8
	082 Move X8, [X20+32]
	083 Move X20, X0
	084 Move W9, [X8+309]
	085 Move TEMP, X9
	086 And TEMP, TEMP, 1
	087 Compare TEMP, 1
	088 JumpIfEqual {92}
	089 Move X0, X8
	090 Call 0x1C5D684
	091 Move X8, X0
	092 Move X8, [X8+192]
	093 Add X1, X31, 8
	094 Move X0, [X8]
	095 Call 0x1C17E04
	096 Compare X19, 0
	097 JumpIfEqual {134}
	098 Move X10, 0x1989000
	099 Move X8, [X19]
	100 Move X10, [X10+2304]
	101 Move X21, X0
	102 NotImplemented "Instruction LDRH not yet implemented."
	103 Move X1, [X10]
	104 Compare X9, 0
	105 JumpIfEqual {112}
	106 Move X10, [X8+176]
	107 Add X10, X10, 8
	108 NotImplemented "Instruction LDUR not yet implemented."
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Subtract X9, X9, 1
	111 Add X10, X10, 16
	112 Move X0, X19
	113 Move W2, W31
	114 Call 0x1C5D788
	115 NotImplemented "Instruction LDRSW not yet implemented."
	116 Add X8, X8, X9
	117 Add X0, X8, 312
	118 Move X8, [X0]
	119 Move X3, [X0+8]
	120 Move X0, X19
	121 Move X1, X20
	122 Move X2, X21
	123 NotImplemented "Instruction BLR not yet implemented."
	124 Move X20, [X31+48]
	125 Move X19, [X31+56]
	126 Move X22, [X31+32]
	127 Move X21, [X31+40]
	128 Move X30, [X31+16]
	129 Move X23, [X31+24]
	130 And W0, W0, 1
	131 Add X31, X31, 64
	132 Return X0
	133 Call 0x1C181E0
	134 Call 0x1C17F20

Method: System.Int32 System.IComparable.CompareTo(System.Object other)

Disassembly:
	0x02795450 LDR X10, [X10 + 0x8]
	0x02795454 LDR W25, [X10 + 0xFC]
	0x02795458 TBNZ X9, 0x0, 0x2795468
	0x0279545C MOV X0, X8
	0x02795460 BL 0x1C5C684
	0x02795464 MOV X8, X0
	0x02795468 LDR X8, [X8 + 0xC0]
	0x0279546C LDR X8, [X8]
	0x02795470 LDR W23, [X8 + 0xFC]
	0x02795474 ADD X8, X31, 0x0
	0x02795478 ADD X9, X23, 0xF
	0x0279547C AND X9, X9, 0x1FFFFFFFF
	0x02795480 SUB X20, X8, X9
	0x02795484 ADD X31, X20, 0x0
	0x02795488 ADD X8, X31, 0x0
	0x0279548C SUB X21, X8, X9
	0x02795490 ADD X31, X21, 0x0
	0x02795494 ADD X9, X25, 0xF
	0x02795498 ADD X8, X31, 0x0
	0x0279549C AND X9, X9, 0x1FFFFFFFF
	0x027954A0 SUB X24, X8, X9
	0x027954A4 ADD X31, X24, 0x0
	0x027954A8 ADD X8, X31, 0x0
	0x027954AC SUB X26, X8, X9
	0x027954B0 ADD X31, X26, 0x0
	0x027954B4 MOV X0, X26
	0x027954B8 MOV W1, W31
	0x027954BC MOV X2, X25
	0x027954C0 BL 0x3EB1B10
	0x027954C4 CBZ X27, 0x2795578
	0x027954C8 LDR X0, [X19 + 0x20]
	0x027954CC LDRB W8, [X0 + 0x135]
	0x027954D0 TBNZ X8, 0x0, 0x27954D8
	0x027954D4 BL 0x1C5C684
	0x027954D8 LDR X8, [X0 + 0xC0]
	0x027954DC LDR X0, [X8 + 0x8]
	0x027954E0 LDRB W8, [X0 + 0x135]
	0x027954E4 TBNZ X8, 0x0, 0x27954EC
	0x027954E8 BL 0x1C5C684
	0x027954EC LDR X8, [X27]
	0x027954F0 CMP X8, X0
	0x027954F4 B.NE 0x27956D0
	0x027954F8 LDR X0, [X19 + 0x20]
	0x027954FC LDRB W8, [X0 + 0x135]
	0x02795500 TBNZ X8, 0x0, 0x2795508
	0x02795504 BL 0x1C5C684
	0x02795508 LDR X8, [X0 + 0xC0]
	0x0279550C LDR X1, [X8 + 0x8]
	0x02795510 LDRB W8, [X1 + 0x135]
	0x02795514 TBNZ X8, 0x0, 0x2795524
	0x02795518 MOV X0, X1
	0x0279551C BL 0x1C5C684
	0x02795520 MOV X1, X0
	0x02795524 LDR X8, [X27]
	0x02795528 LDR X9, [X1 + 0x40]
	0x0279552C MOV X0, X27
	0x02795530 LDR X8, [X8 + 0x40]
	0x02795534 CMP X8, X9
	0x02795538 B.NE 0x2795778
	0x0279553C BL 0x1C16E08
	0x02795540 MOV X1, X0
	0x02795544 MOV X0, X26
	0x02795548 MOV X2, X25
	0x0279554C BL 0x3EB1AC0
	0x02795550 LDR X8, [X19 + 0x20]
	0x02795554 ADD X9, X8, 0x135
	0x02795558 LDRH W9, [X9]
	0x0279555C TBNZ X9, 0x0, 0x2795580
	0x02795560 MOV X0, X8
	0x02795564 BL 0x1C5C684
	0x02795568 LDR X8, [X19 + 0x20]
	0x0279556C ADD X9, X8, 0x135
	0x02795570 LDRH W9, [X9]
	0x02795574 B 0x2795584
	0x02795578 MOVZ W0, 0x1
	0x0279557C B 0x27956A0
	0x02795580 MOV X0, X8
	0x02795584 LDR X10, [X0 + 0xC0]
	0x02795588 LDR X10, [X10 + 0x40]
	0x0279558C LDR X27, [X10]
	0x02795590 TBNZ X9, 0x0, 0x27955A0
	0x02795594 MOV X0, X8
	0x02795598 BL 0x1C5C684
	0x0279559C MOV X8, X0
	0x027955A0 LDR X8, [X8 + 0xC0]
	0x027955A4 LDR X0, [X8 + 0x40]
	0x027955A8 BLR X27
	0x027955AC LDR X8, [X19 + 0x20]
	0x027955B0 MOV X27, X0
	0x027955B4 LDRB W9, [X8 + 0x135]
	0x027955B8 TBNZ X9, 0x0, 0x27955C8
	0x027955BC MOV X0, X8
	0x027955C0 BL 0x1C5C684
	0x027955C4 MOV X8, X0
	0x027955C8 LDR X8, [X8 + 0xC0]
	0x027955CC MOV X0, X22
	0x027955D0 LDR X8, [X8 + 0x8]
	0x027955D4 LDR X1, [X8 + 0x80]
	0x027955D8 BL 0x1C16D18
	0x027955DC MOV X1, X0
	0x027955E0 MOV X0, X20
	0x027955E4 MOV X2, X23

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Compare X1, 0
	007 JumpIfEqual {76}
	008 Move X20, X0
	009 Move X0, [X2+32]
	010 Move X19, X2
	011 Move X21, X1
	012 Move W8, [X0+309]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {18}
	017 Call 0x1C5D684
	018 Move X8, [X0+192]
	019 Move X0, [X8+8]
	020 Move W8, [X0+309]
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {26}
	025 Call 0x1C5D684
	026 Move X8, [X21]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X0, [X19+32]
	029 Move W8, [X0+309]
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {35}
	034 Call 0x1C5D684
	035 Move X8, [X0+192]
	036 Move X1, [X8+8]
	037 Move W8, [X1+309]
	038 Move TEMP, X8
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {45}
	042 Move X0, X1
	043 Call 0x1C5D684
	044 Move X1, X0
	045 Move X8, [X21]
	046 Move X9, [X1+64]
	047 Move X0, X21
	048 Move X8, [X8+64]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Call 0x1C17E08
	051 Move X8, X0
	052 Move X0, [X19+32]
	053 Move W19, [X8]
	054 Move W9, [X0+309]
	055 Move TEMP, X9
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfEqual {60}
	059 Call 0x1C5D684
	060 Move X8, [X0+192]
	061 Move X0, [X8+64]
	062 Call Comparer`1<Boolean>.get_Default
	063 Compare X0, 0
	064 JumpIfEqual {125}
	065 Move X8, [X0]
	066 Move W1, [X20]
	067 And W2, W19, 1
	068 Move X20, [X31+32]
	069 Move X19, [X31+40]
	070 Move X4, [X8+408]
	071 Move X3, [X8+416]
	072 Move X30, [X31+16]
	073 Move X21, [X31+24]
	074 Add X31, X31, 48
	075 CallNoReturn X4
	076 Move X20, [X31+32]
	077 Move X19, [X31+40]
	078 Move X30, [X31+16]
	079 Move X21, [X31+24]
	080 Move W0, 1
	081 Add X31, X31, 48
	082 Return X0
	083 Move W8, [X20]
	084 Move [X31+8], W8
	085 Move X0, [X19+32]
	086 Call 0x199C99C
	087 Move X8, [X0+192]
	088 Add X1, X31, 8
	089 Move X0, [X8+8]
	090 Call 0x1C17E04
	091 Move X1, X31
	092 Call "il2cpp_vm_object_is_inst", X0
	093 Move X20, X0
	094 Call 0x19913C0
	095 Move X8, [X20]
	096 Move X0, X20
	097 Move X9, [X8+360]
	098 Move X1, [X8+368]
	099 NotImplemented "Instruction BLR not yet implemented."
	100 Move X20, X0
	101 Move X0, 0x1989000
	102 Move X0, [X0+2336]
	103 Call 0x1C17D08
	104 Move X1, X20
	105 Move X2, X31
	106 Call SR.Format, X0, X1
	107 Move X20, X0
	108 Move X0, 0x1967000
	109 Move X0, [X0+1400]
	110 Call 0x1C17D08
	111 Call 0x1C17F10
	112 Move X21, X0
	113 Move X0, 0x1989000
	114 Move X0, [X0+2344]
	115 Call 0x1C17D08
	116 Move X2, X0
	117 Move X0, X21
	118 Move X1, X20
	119 Move X3, X31
	120 Call ArgumentException..ctor, X0, X1, X2
	121 Move X0, X21
	122 Move X1, X19
	123 Call 0x1C17DEC
	124 Call 0x1C181E0
	125 Call 0x1C17F20

Method: System.Int32 CompareTo(System.ValueTuple`1<T1> other)

Disassembly:
	0x027955E8 BL 0x3EB1AC0
	0x027955EC MOV X0, X24
	0x027955F0 MOV X1, X26
	0x027955F4 MOV X2, X25
	0x027955F8 BL 0x3EB1AC0
	0x027955FC LDR X0, [X19 + 0x20]
	0x02795600 LDRB W8, [X0 + 0x135]
	0x02795604 TBNZ X8, 0x0, 0x279560C
	0x02795608 BL 0x1C5C684
	0x0279560C LDR X8, [X0 + 0xC0]
	0x02795610 MOV X0, X24
	0x02795614 LDR X8, [X8 + 0x8]
	0x02795618 LDR X1, [X8 + 0x80]
	0x0279561C BL 0x1C16D18
	0x02795620 MOV X1, X0
	0x02795624 MOV X0, X21
	0x02795628 MOV X2, X23
	0x0279562C BL 0x3EB1AC0
	0x02795630 CBZ X27, 0x279577C
	0x02795634 LDR X0, [X19 + 0x20]
	0x02795638 LDRB W8, [X0 + 0x135]
	0x0279563C TBNZ X8, 0x0, 0x2795644

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X2+32]
	005 Move X19, X1
	006 Move X20, X0
	007 Move W9, [X8+309]
	008 Move TEMP, X9
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {15}
	012 Move X0, X8
	013 Call 0x1C5D684
	014 Move X8, X0
	015 Move X8, [X8+192]
	016 Move X0, [X8+64]
	017 Call Comparer`1<Boolean>.get_Default
	018 Compare X0, 0
	019 JumpIfEqual {29}
	020 Move X8, [X0]
	021 Move W1, [X20]
	022 And W2, W19, 1
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X4, [X8+408]
	026 Move X3, [X8+416]
	027 Move X30, [X31+32]
	028 CallNoReturn X4
	029 Call 0x1C17F20

Method: System.Int32 System.Collections.IStructuralComparable.CompareTo(System.Object other, System.Collections.IComparer comparer)

Disassembly:
	0x02795640 BL 0x1C5C684
	0x02795644 LDR X8, [X0 + 0xC0]
	0x02795648 LDR X8, [X8]
	0x0279564C LDR W8, [X8 + 0x28]
	0x02795650 TBNZ X8, 0x1F, 0x2795658
	0x02795654 LDR X20, [X20]
	0x02795658 LDR X0, [X19 + 0x20]
	0x0279565C LDRB W8, [X0 + 0x135]
	0x02795660 TBNZ X8, 0x0, 0x2795668
	0x02795664 BL 0x1C5C684
	0x02795668 LDR X8, [X0 + 0xC0]
	0x0279566C LDR X8, [X8]
	0x02795670 LDR W8, [X8 + 0x28]
	0x02795674 TBNZ X8, 0x1F, 0x279567C
	0x02795678 LDR X21, [X21]
	0x0279567C LDR X8, [X27]
	0x02795680 STP X20, X21, [X29 - 0x20]
	0x02795684 SUB X3, X29, 0x20
	0x02795688 SUB X4, X29, 0xC
	0x0279568C LDR X1, [X8 + 0x1A0]
	0x02795690 MOV X2, X27
	0x02795694 LDP X0, X8, [X1 + 0x8]
	0x02795698 BLR X8
	0x0279569C LDUR W0, [X29 - 0xC]
	0x027956A0 LDR X8, [X28 + 0x28]
	0x027956A4 LDUR X9, [X29 - 0x8]
	0x027956A8 CMP X8, X9
	0x027956AC B.NE 0x2795780
	0x027956B0 ADD X31, X29, 0x0
	0x027956B4 LDP X20, X19, [X31 + 0x50]
	0x027956B8 LDP X22, X21, [X31 + 0x40]
	0x027956BC LDP X24, X23, [X31 + 0x30]
	0x027956C0 LDP X26, X25, [X31 + 0x20]
	0x027956C4 LDP X28, X27, [X31 + 0x10]
	0x027956C8 LDP X29, X30, [X31], #0x60
	0x027956CC RET
	0x027956D0 MOV X0, X24
	0x027956D4 MOV X1, X22
	0x027956D8 MOV X2, X25
	0x027956DC BL 0x3EB1AC0
	0x027956E0 LDR X0, [X19 + 0x20]
	0x027956E4 BL 0x199B99C
	0x027956E8 LDR X8, [X0 + 0xC0]
	0x027956EC MOV X1, X24
	0x027956F0 LDR X0, [X8 + 0x8]
	0x027956F4 BL 0x1C16E04
	0x027956F8 MOV X1, X31
	0x027956FC BL 0x33BE520
	0x02795700 MOV X20, X0
	0x02795704 BL 0x19903C0
	0x02795708 LDR X8, [X20]
	0x0279570C MOV X0, X20
	0x02795710 LDP X9, X1, [X8 + 0x168]
	0x02795714 BLR X9
	0x02795718 MOV X20, X0
	0x0279571C ADRP X0, 0x1988000
	0x02795720 LDR X0, [X0 + 0x920]
	0x02795724 BL 0x1C16D08
	0x02795728 MOV X1, X20
	0x0279572C MOV X2, X31
	0x02795730 BL 0x32094D4
	0x02795734 MOV X20, X0
	0x02795738 ADRP X0, 0x1966000
	0x0279573C LDR X0, [X0 + 0x578]
	0x02795740 BL 0x1C16D08
	0x02795744 BL 0x1C16F10
	0x02795748 MOV X21, X0
	0x0279574C ADRP X0, 0x1988000
	0x02795750 LDR X0, [X0 + 0x928]
	0x02795754 BL 0x1C16D08
	0x02795758 MOV X2, X0
	0x0279575C MOV X0, X21
	0x02795760 MOV X1, X20
	0x02795764 MOV X3, X31
	0x02795768 BL 0x330E16C
	0x0279576C MOV X0, X21
	0x02795770 MOV X1, X19
	0x02795774 BL 0x1C16DEC
	0x02795778 BL 0x1C171E0
	0x0279577C BL 0x1C16F20
	0x02795780 BL 0x3EB1B20
	0x02795784 STP X29, X30, [X31 - 0x60]!
	0x02795788 STP X28, X27, [X31 + 0x10]
	0x0279578C STP X26, X25, [X31 + 0x20]
	0x02795790 STP X24, X23, [X31 + 0x30]
	0x02795794 STP X22, X21, [X31 + 0x40]
	0x02795798 STP X20, X19, [X31 + 0x50]
	0x0279579C ADD X29, X31, 0x0
	0x027957A0 SUB X31, X31, 0x20
	0x027957A4 MRS X28, 0xC000
	0x027957A8 LDR X8, [X28 + 0x28]
	0x027957AC MOV X19, X2
	0x027957B0 MOV X22, X1
	0x027957B4 MOV X24, X0
	0x027957B8 STUR X8, [X29 - 0x8]
	0x027957BC LDR X8, [X2 + 0x20]
	0x027957C0 ADD X9, X8, 0x135
	0x027957C4 LDRH W9, [X9]
	0x027957C8 TBNZ X9, 0x0, 0x27957E4
	0x027957CC MOV X0, X8
	0x027957D0 BL 0x1C5C684
	0x027957D4 LDR X8, [X19 + 0x20]
	0x027957D8 ADD X9, X8, 0x135
	0x027957DC LDRH W9, [X9]
	0x027957E0 B 0x27957E8
	0x027957E4 MOV X0, X8
	0x027957E8 LDR X10, [X0 + 0xC0]
	0x027957EC LDR X10, [X10]
	0x027957F0 LDR W23, [X10 + 0xFC]
	0x027957F4 TBNZ X9, 0x0, 0x2795810
	0x027957F8 MOV X0, X8
	0x027957FC BL 0x1C5C684
	0x02795800 LDR X8, [X19 + 0x20]
	0x02795804 ADD X9, X8, 0x135
	0x02795808 LDRH W9, [X9]
	0x0279580C B 0x2795814
	0x02795810 MOV X0, X8
	0x02795814 LDR X10, [X0 + 0xC0]
	0x02795818 ADD X11, X23, 0xF
	0x0279581C AND X11, X11, 0x1FFFFFFFF
	0x02795820 LDR X10, [X10 + 0x8]
	0x02795824 LDR W27, [X10 + 0xFC]
	0x02795828 ADD X10, X31, 0x0
	0x0279582C SUB X20, X10, X11
	0x02795830 ADD X31, X20, 0x0
	0x02795834 ADD X10, X31, 0x0
	0x02795838 SUB X21, X10, X11
	0x0279583C ADD X31, X21, 0x0
	0x02795840 ADD X11, X27, 0xF
	0x02795844 ADD X10, X31, 0x0
	0x02795848 AND X11, X11, 0x1FFFFFFFF
	0x0279584C SUB X26, X10, X11
	0x02795850 ADD X31, X26, 0x0
	0x02795854 TBNZ X9, 0x0, 0x2795870
	0x02795858 MOV X0, X8
	0x0279585C BL 0x1C5C684
	0x02795860 LDR X8, [X19 + 0x20]
	0x02795864 ADD X9, X8, 0x135
	0x02795868 LDRH W9, [X9]
	0x0279586C B 0x2795874
	0x02795870 MOV X0, X8
	0x02795874 LDR X10, [X0 + 0xC0]
	0x02795878 LDR X10, [X10 + 0x40]
	0x0279587C LDR X25, [X10]
	0x02795880 TBNZ X9, 0x0, 0x2795890
	0x02795884 MOV X0, X8
	0x02795888 BL 0x1C5C684
	0x0279588C MOV X8, X0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x1C46000
	009 Move W8, [X23+2146]
	010 Move X20, X3
	011 Move X19, X2
	012 Move X22, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x1989000
	019 Move X0, [X0+2328]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+2146], W8
	023 Compare X22, 0
	024 JumpIfEqual {114}
	025 Move X0, [X20+32]
	026 Move W8, [X0+309]
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {32}
	031 Call 0x1C5D684
	032 Move X8, [X0+192]
	033 Move X0, [X8+8]
	034 Move W8, [X0+309]
	035 Move TEMP, X8
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {40}
	039 Call 0x1C5D684
	040 Move X8, [X22]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X0, [X20+32]
	043 Move W8, [X0+309]
	044 Move TEMP, X8
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfEqual {49}
	048 Call 0x1C5D684
	049 Move X8, [X0+192]
	050 Move X1, [X8+8]
	051 Move W8, [X1+309]
	052 Move TEMP, X8
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfEqual {59}
	056 Move X0, X1
	057 Call 0x1C5D684
	058 Move X1, X0
	059 Move X8, [X22]
	060 Move X9, [X1+64]
	061 Move X0, X22
	062 Move X8, [X8+64]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Call 0x1C17E08
	065 Move W8, [X21]
	066 Move W21, [X0]
	067 Move [X31+4], W8
	068 Move X0, [X20+32]
	069 Move W8, [X0+309]
	070 Move TEMP, X8
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfEqual {75}
	074 Call 0x1C5D684
	075 Move X8, [X0+192]
	076 Add X1, X31, 4
	077 Move X0, [X8]
	078 Call 0x1C17E04
	079 And W8, W21, 1
	080 Move [X31], W8
	081 Move X8, [X20+32]
	082 Move X20, X0
	083 Move W9, [X8+309]
	084 Move TEMP, X9
	085 And TEMP, TEMP, 1
	086 Compare TEMP, 1
	087 JumpIfEqual {91}
	088 Move X0, X8
	089 Call 0x1C5D684
	090 Move X8, X0
	091 Move X8, [X8+192]
	092 Add X1, X31, 0
	093 Move X0, [X8]
	094 Call 0x1C17E04
	095 Compare X19, 0
	096 JumpIfEqual {174}
	097 Move X10, 0x1989000
	098 Move X8, [X19]
	099 Move X10, [X10+2328]
	100 Move X21, X0
	101 NotImplemented "Instruction LDRH not yet implemented."
	102 Move X1, [X10]
	103 Compare X9, 0
	104 JumpIfEqual {111}
	105 Move X10, [X8+176]
	106 Add X10, X10, 8
	107 NotImplemented "Instruction LDUR not yet implemented."
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Subtract X9, X9, 1
	110 Add X10, X10, 16
	111 Move X0, X19
	112 Move W2, W31
	113 Call 0x1C5D788
	114 Move W0, 1
	115 NotImplemented "Instruction LDRSW not yet implemented."
	116 Add X8, X8, X9
	117 Add X0, X8, 312
	118 Move X8, [X0]
	119 Move X3, [X0+8]
	120 Move X0, X19
	121 Move X1, X20
	122 Move X2, X21
	123 NotImplemented "Instruction BLR not yet implemented."
	124 Move X20, [X31+48]
	125 Move X19, [X31+56]
	126 Move X22, [X31+32]
	127 Move X21, [X31+40]
	128 Move X30, [X31+16]
	129 Move X23, [X31+24]
	130 Add X31, X31, 64
	131 Return X0
	132 Move W8, [X21]
	133 Move [X31+8], W8
	134 Move X0, [X20+32]
	135 Call 0x199C99C
	136 Move X8, [X0+192]
	137 Add X1, X31, 8
	138 Move X0, [X8+8]
	139 Call 0x1C17E04
	140 Move X1, X31
	141 Call "il2cpp_vm_object_is_inst", X0
	142 Move X19, X0
	143 Call 0x19913C0
	144 Move X8, [X19]
	145 Move X0, X19
	146 Move X9, [X8+360]
	147 Move X1, [X8+368]
	148 NotImplemented "Instruction BLR not yet implemented."
	149 Move X19, X0
	150 Move X0, 0x1989000
	151 Move X0, [X0+2336]
	152 Call 0x1C17D08
	153 Move X1, X19
	154 Move X2, X31
	155 Call SR.Format, X0, X1
	156 Move X19, X0
	157 Move X0, 0x1967000
	158 Move X0, [X0+1400]
	159 Call 0x1C17D08
	160 Call 0x1C17F10
	161 Move X21, X0
	162 Move X0, 0x1989000
	163 Move X0, [X0+2344]
	164 Call 0x1C17D08
	165 Move X2, X0
	166 Move X0, X21
	167 Move X1, X19
	168 Move X3, X31
	169 Call ArgumentException..ctor, X0, X1, X2
	170 Move X0, X21
	171 Move X1, X20
	172 Call 0x1C17DEC
	173 Call 0x1C181E0
	174 Call 0x1C17F20

Method: System.Int32 GetHashCode()

Disassembly:
	0x02795890 LDR X8, [X8 + 0xC0]
	0x02795894 LDR X0, [X8 + 0x40]
	0x02795898 BLR X25
	0x0279589C LDR X8, [X19 + 0x20]
	0x027958A0 MOV X25, X0
	0x027958A4 LDRB W9, [X8 + 0x135]
	0x027958A8 TBNZ X9, 0x0, 0x27958B8
	0x027958AC MOV X0, X8
	0x027958B0 BL 0x1C5C684
	0x027958B4 MOV X8, X0
	0x027958B8 LDR X8, [X8 + 0xC0]
	0x027958BC MOV X0, X24
	0x027958C0 LDR X8, [X8 + 0x8]
	0x027958C4 LDR X1, [X8 + 0x80]
	0x027958C8 BL 0x1C16D18
	0x027958CC MOV X1, X0
	0x027958D0 MOV X0, X20
	0x027958D4 MOV X2, X23
	0x027958D8 BL 0x3EB1AC0
	0x027958DC MOV X0, X26
	0x027958E0 MOV X1, X22
	0x027958E4 MOV X2, X27
	0x027958E8 BL 0x3EB1AC0
	0x027958EC LDR X0, [X19 + 0x20]
	0x027958F0 LDRB W8, [X0 + 0x135]
	0x027958F4 TBNZ X8, 0x0, 0x27958FC
	0x027958F8 BL 0x1C5C684
	0x027958FC LDR X8, [X0 + 0xC0]
	0x02795900 MOV X0, X26
	0x02795904 LDR X8, [X8 + 0x8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1C46000
	007 Move X22, 0x195F000
	008 Move W8, [X21+2147]
	009 Move X22, [X22+2904]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x195F000
	017 Move X0, [X0+2904]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2147], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, [X20+32]
	027 Move W8, [X0+309]
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {33}
	032 Call 0x1C5D684
	033 Move X8, [X0+192]
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X1, [X8+96]
	040 Move X30, [X31+48]
	041 Call Boolean.GetHashCode, X0
	042 Return X0

Method: System.Int32 System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer)

Disassembly:
	0x02795908 LDR X1, [X8 + 0x80]
	0x0279590C BL 0x1C16D18
	0x02795910 MOV X1, X0
	0x02795914 MOV X0, X21
	0x02795918 MOV X2, X23
	0x0279591C BL 0x3EB1AC0
	0x02795920 CBZ X25, 0x27959C0
	0x02795924 LDR X0, [X19 + 0x20]
	0x02795928 LDRB W8, [X0 + 0x135]
	0x0279592C TBNZ X8, 0x0, 0x2795934
	0x02795930 BL 0x1C5C684
	0x02795934 LDR X8, [X0 + 0xC0]
	0x02795938 LDR X8, [X8]
	0x0279593C LDR W8, [X8 + 0x28]
	0x02795940 TBNZ X8, 0x1F, 0x2795948
	0x02795944 LDR X20, [X20]
	0x02795948 LDR X0, [X19 + 0x20]
	0x0279594C LDRB W8, [X0 + 0x135]
	0x02795950 TBNZ X8, 0x0, 0x2795958
	0x02795954 BL 0x1C5C684
	0x02795958 LDR X8, [X0 + 0xC0]
	0x0279595C LDR X8, [X8]
	0x02795960 LDR W8, [X8 + 0x28]
	0x02795964 TBNZ X8, 0x1F, 0x279596C
	0x02795968 LDR X21, [X21]
	0x0279596C LDR X8, [X25]
	0x02795970 STP X20, X21, [X29 - 0x20]
	0x02795974 SUB X3, X29, 0x20
	0x02795978 SUB X4, X29, 0xC
	0x0279597C LDR X1, [X8 + 0x1A0]
	0x02795980 MOV X2, X25
	0x02795984 LDP X0, X8, [X1 + 0x8]
	0x02795988 BLR X8
	0x0279598C LDUR W0, [X29 - 0xC]
	0x02795990 LDR X8, [X28 + 0x28]
	0x02795994 LDUR X9, [X29 - 0x8]
	0x02795998 CMP X8, X9
	0x0279599C B.NE 0x27959C4
	0x027959A0 ADD X31, X29, 0x0
	0x027959A4 LDP X20, X19, [X31 + 0x50]
	0x027959A8 LDP X22, X21, [X31 + 0x40]
	0x027959AC LDP X24, X23, [X31 + 0x30]
	0x027959B0 LDP X26, X25, [X31 + 0x20]
	0x027959B4 LDP X28, X27, [X31 + 0x10]
	0x027959B8 LDP X29, X30, [X31], #0x60
	0x027959BC RET
	0x027959C0 BL 0x1C16F20
	0x027959C4 BL 0x3EB1B20
	0x027959C8 STP X29, X30, [X31 - 0x60]!
	0x027959CC STP X28, X27, [X31 + 0x10]
	0x027959D0 STP X26, X25, [X31 + 0x20]
	0x027959D4 STP X24, X23, [X31 + 0x30]
	0x027959D8 STP X22, X21, [X31 + 0x40]
	0x027959DC STP X20, X19, [X31 + 0x50]
	0x027959E0 ADD X29, X31, 0x0
	0x027959E4 SUB X31, X31, 0x10
	0x027959E8 MRS X8, 0xC000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1C46000
	007 Move W8, [X22+2148]
	008 Move X20, X2
	009 Move X19, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x1989000
	016 Move X0, [X0+2304]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+2148], W8
	020 Move W8, [X21]
	021 Move [X31+12], W8
	022 Move X0, [X20+32]
	023 Move W8, [X0+309]
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {29}
	028 Call 0x1C5D684
	029 Move X8, [X0+192]
	030 Add X1, X31, 12
	031 Move X0, [X8]
	032 Call 0x1C17E04
	033 Compare X19, 0
	034 JumpIfEqual {67}
	035 Move X10, 0x1989000
	036 Move X8, [X19]
	037 Move X10, [X10+2304]
	038 Move X20, X0
	039 NotImplemented "Instruction LDRH not yet implemented."
	040 Move X1, [X10]
	041 Compare X9, 0
	042 JumpIfEqual {49}
	043 Move X10, [X8+176]
	044 Add X10, X10, 8
	045 NotImplemented "Instruction LDUR not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Subtract X9, X9, 1
	048 Add X10, X10, 16
	049 Move W2, 1
	050 Move X0, X19
	051 Call 0x1C5D788
	052 Move W9, [X10]
	053 Add W9, W9, 1
	054 Add X8, X8, W9
	055 Add X0, X8, 312
	056 Move X8, [X0]
	057 Move X2, [X0+8]
	058 Move X0, X19
	059 Move X1, X20
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move X20, [X31+32]
	062 Move X19, [X31+40]
	063 Move X22, [X31+16]
	064 Move X21, [X31+24]
	065 Move X30, [X31+48]
	066 Return X0
	067 Call 0x1C17F20

Method: System.Int32 System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer)

Disassembly:
	0x027959EC STUR X8, [X29 - 0x10]
	0x027959F0 LDR X8, [X8 + 0x28]
	0x027959F4 ADRP X21, 0x1C45000
	0x027959F8 MOV X20, X3
	0x027959FC MOV X19, X2
	0x02795A00 STUR X8, [X29 - 0x8]
	0x02795A04 LDRB W8, [X21 + 0x869]
	0x02795A08 MOV X26, X1
	0x02795A0C MOV X23, X0
	0x02795A10 TBNZ X8, 0x0, 0x2795A28
	0x02795A14 ADRP X0, 0x1988000
	0x02795A18 LDR X0, [X0 + 0x918]
	0x02795A1C BL 0x1C16CF4
	0x02795A20 MOVZ W8, 0x1
	0x02795A24 STRB W8, [X21 + 0x869]
	0x02795A28 LDR X8, [X20 + 0x20]
	0x02795A2C ADD X9, X8, 0x135
	0x02795A30 LDRH W9, [X9]
	0x02795A34 TBNZ X9, 0x0, 0x2795A50
	0x02795A38 MOV X0, X8
	0x02795A3C BL 0x1C5C684
	0x02795A40 LDR X8, [X20 + 0x20]
	0x02795A44 ADD X9, X8, 0x135
	0x02795A48 LDRH W9, [X9]
	0x02795A4C B 0x2795A54
	0x02795A50 MOV X0, X8
	0x02795A54 LDR X10, [X0 + 0xC0]
	0x02795A58 LDR X10, [X10 + 0x8]
	0x02795A5C LDR W25, [X10 + 0xFC]
	0x02795A60 TBNZ X9, 0x0, 0x2795A70
	0x02795A64 MOV X0, X8
	0x02795A68 BL 0x1C5C684
	0x02795A6C MOV X8, X0
	0x02795A70 LDR X8, [X8 + 0xC0]
	0x02795A74 LDR X8, [X8]
	0x02795A78 LDR W22, [X8 + 0xFC]
	0x02795A7C ADD X8, X31, 0x0
	0x02795A80 ADD X9, X22, 0xF
	0x02795A84 AND X9, X9, 0x1FFFFFFFF
	0x02795A88 SUB X27, X8, X9
	0x02795A8C ADD X31, X27, 0x0
	0x02795A90 ADD X8, X31, 0x0
	0x02795A94 SUB X21, X8, X9
	0x02795A98 ADD X31, X21, 0x0
	0x02795A9C ADD X9, X25, 0xF
	0x02795AA0 ADD X8, X31, 0x0
	0x02795AA4 AND X9, X9, 0x1FFFFFFFF
	0x02795AA8 SUB X24, X8, X9
	0x02795AAC ADD X31, X24, 0x0
	0x02795AB0 ADD X8, X31, 0x0
	0x02795AB4 SUB X28, X8, X9
	0x02795AB8 ADD X31, X28, 0x0
	0x02795ABC MOV X0, X28
	0x02795AC0 MOV W1, W31
	0x02795AC4 MOV X2, X25
	0x02795AC8 BL 0x3EB1B10
	0x02795ACC CBZ X26, 0x2795C64

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1C46000
	007 Move W8, [X22+2149]
	008 Move X20, X2
	009 Move X19, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x1989000
	016 Move X0, [X0+2304]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+2149], W8
	020 Move W8, [X21]
	021 Move [X31+12], W8
	022 Move X0, [X20+32]
	023 Move W8, [X0+309]
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {29}
	028 Call 0x1C5D684
	029 Move X8, [X0+192]
	030 Add X1, X31, 12
	031 Move X0, [X8]
	032 Call 0x1C17E04
	033 Compare X19, 0
	034 JumpIfEqual {67}
	035 Move X10, 0x1989000
	036 Move X8, [X19]
	037 Move X10, [X10+2304]
	038 Move X20, X0
	039 NotImplemented "Instruction LDRH not yet implemented."
	040 Move X1, [X10]
	041 Compare X9, 0
	042 JumpIfEqual {49}
	043 Move X10, [X8+176]
	044 Add X10, X10, 8
	045 NotImplemented "Instruction LDUR not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Subtract X9, X9, 1
	048 Add X10, X10, 16
	049 Move W2, 1
	050 Move X0, X19
	051 Call 0x1C5D788
	052 Move W9, [X10]
	053 Add W9, W9, 1
	054 Add X8, X8, W9
	055 Add X0, X8, 312
	056 Move X8, [X0]
	057 Move X2, [X0+8]
	058 Move X0, X19
	059 Move X1, X20
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move X20, [X31+32]
	062 Move X19, [X31+40]
	063 Move X22, [X31+16]
	064 Move X21, [X31+24]
	065 Move X30, [X31+48]
	066 Return X0
	067 Call 0x1C17F20

Method: System.String ToString()

Disassembly:
	0x02795AD0 LDR X0, [X20 + 0x20]
	0x02795AD4 LDRB W8, [X0 + 0x135]
	0x02795AD8 TBNZ X8, 0x0, 0x2795AE0
	0x02795ADC BL 0x1C5C684
	0x02795AE0 LDR X8, [X0 + 0xC0]
	0x02795AE4 LDR X0, [X8 + 0x8]
	0x02795AE8 LDRB W8, [X0 + 0x135]
	0x02795AEC TBNZ X8, 0x0, 0x2795AF4
	0x02795AF0 BL 0x1C5C684
	0x02795AF4 LDR X8, [X26]
	0x02795AF8 CMP X8, X0
	0x02795AFC B.NE 0x2795CC0
	0x02795B00 LDR X0, [X20 + 0x20]
	0x02795B04 LDRB W8, [X0 + 0x135]
	0x02795B08 TBNZ X8, 0x0, 0x2795B10
	0x02795B0C BL 0x1C5C684
	0x02795B10 LDR X8, [X0 + 0xC0]
	0x02795B14 LDR X1, [X8 + 0x8]
	0x02795B18 LDRB W8, [X1 + 0x135]
	0x02795B1C TBNZ X8, 0x0, 0x2795B2C
	0x02795B20 MOV X0, X1
	0x02795B24 BL 0x1C5C684
	0x02795B28 MOV X1, X0
	0x02795B2C LDR X8, [X26]
	0x02795B30 LDR X9, [X1 + 0x40]
	0x02795B34 MOV X0, X26
	0x02795B38 LDR X8, [X8 + 0x40]
	0x02795B3C CMP X8, X9
	0x02795B40 B.NE 0x2795D68
	0x02795B44 BL 0x1C16E08
	0x02795B48 MOV X1, X0
	0x02795B4C MOV X0, X28
	0x02795B50 MOV X2, X25
	0x02795B54 BL 0x3EB1AC0
	0x02795B58 LDR X0, [X20 + 0x20]
	0x02795B5C LDRB W8, [X0 + 0x135]
	0x02795B60 TBNZ X8, 0x0, 0x2795B68
	0x02795B64 BL 0x1C5C684
	0x02795B68 LDR X8, [X0 + 0xC0]
	0x02795B6C MOV X0, X23
	0x02795B70 LDR X8, [X8 + 0x8]
	0x02795B74 LDR X1, [X8 + 0x80]
	0x02795B78 BL 0x1C16D18
	0x02795B7C MOV X1, X0
	0x02795B80 MOV X0, X27
	0x02795B84 MOV X2, X22

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x1C46000
	008 Move X21, 0x196A000
	009 Move X23, 0x195F000
	010 Move W8, [X22+2150]
	011 Move X21, [X21+784]
	012 Move X23, [X23+2904]
	013 Move X20, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {30}
	019 Move X0, 0x195F000
	020 Move X0, [X0+2904]
	021 Call 0x1C17CF4
	022 Move X0, 0x196A000
	023 Move X0, [X0+784]
	024 Call 0x1C17CF4
	025 Move X0, 0x1960000
	026 Move X0, [X0+1544]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X22+2150], W8
	030 Move X0, [X23]
	031 Move X21, [X21]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, [X20+32]
	037 Move X20, 0x1960000
	038 Move W8, [X0+309]
	039 Move X20, [X20+1544]
	040 Move TEMP, X8
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfEqual {45}
	044 Call 0x1C5D684
	045 Move X8, [X0+192]
	046 Move X0, X19
	047 Move X1, [X8+104]
	048 Call Boolean.ToString, X0
	049 Move X2, [X20]
	050 Move X1, X0
	051 Move X0, X21
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X22, [X31+16]
	055 Move X21, [X31+24]
	056 Move X3, X31
	057 Move X30, [X31+48]
	058 Move X23, [X31+56]
	059 Call String.Concat, X0, X1, X2
	060 Return X0

Method: System.String System.IValueTupleInternal.ToStringEnd()

Disassembly:
	0x02795B88 BL 0x3EB1AC0
	0x02795B8C LDR X0, [X20 + 0x20]
	0x02795B90 LDRB W8, [X0 + 0x135]
	0x02795B94 TBNZ X8, 0x0, 0x2795B9C
	0x02795B98 BL 0x1C5C684
	0x02795B9C LDR X8, [X0 + 0xC0]
	0x02795BA0 MOV X1, X27
	0x02795BA4 LDR X0, [X8]
	0x02795BA8 BL 0x1C16E04
	0x02795BAC MOV X23, X0
	0x02795BB0 MOV X0, X24
	0x02795BB4 MOV X1, X28
	0x02795BB8 MOV X2, X25
	0x02795BBC BL 0x3EB1AC0
	0x02795BC0 LDR X0, [X20 + 0x20]
	0x02795BC4 LDRB W8, [X0 + 0x135]
	0x02795BC8 TBNZ X8, 0x0, 0x2795BD0
	0x02795BCC BL 0x1C5C684
	0x02795BD0 LDR X8, [X0 + 0xC0]
	0x02795BD4 MOV X0, X24
	0x02795BD8 LDR X8, [X8 + 0x8]
	0x02795BDC LDR X1, [X8 + 0x80]
	0x02795BE0 BL 0x1C16D18
	0x02795BE4 MOV X1, X0
	0x02795BE8 MOV X0, X21
	0x02795BEC MOV X2, X22
	0x02795BF0 BL 0x3EB1AC0
	0x02795BF4 LDR X0, [X20 + 0x20]
	0x02795BF8 LDRB W8, [X0 + 0x135]
	0x02795BFC TBNZ X8, 0x0, 0x2795C04
	0x02795C00 BL 0x1C5C684
	0x02795C04 LDR X8, [X0 + 0xC0]
	0x02795C08 MOV X1, X21
	0x02795C0C LDR X0, [X8]
	0x02795C10 BL 0x1C16E04
	0x02795C14 CBZ X19, 0x2795D6C
	0x02795C18 ADRP X10, 0x1988000
	0x02795C1C LDR X8, [X19]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1C46000
	007 Move X22, 0x195F000
	008 Move W8, [X21+2151]
	009 Move X22, [X22+2904]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x195F000
	017 Move X0, [X0+2904]
	018 Call 0x1C17CF4
	019 Move X0, 0x1960000
	020 Move X0, [X0+1544]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+2151], W8
	024 Move X0, [X22]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, [X20+32]
	030 Move X20, 0x1960000
	031 Move W8, [X0+309]
	032 Move X20, [X20+1544]
	033 Move TEMP, X8
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {38}
	037 Call 0x1C5D684
	038 Move X8, [X0+192]
	039 Move X0, X19
	040 Move X1, [X8+104]
	041 Call Boolean.ToString, X0
	042 Move X1, [X20]
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X22, [X31+16]
	046 Move X21, [X31+24]
	047 Move X2, X31
	048 Move X30, [X31+48]
	049 Call String.Concat, X0, X1
	050 Return X0

Method: System.Int32 System.Runtime.CompilerServices.ITuple.get_Length()

Disassembly:
	0x02795C20 LDR X10, [X10 + 0x918]
	0x02795C24 MOV X20, X0

ISIL:
	001 Move W0, 1
	002 Return X0

