Type: System.DateTimeOffset

Method: System.Void .ctor(System.Int64 ticks, System.TimeSpan offset)

Disassembly:
	0x03364D54 LDR X0, [X0 + 0x9F0]
	0x03364D58 BL 0x1C16CF4
	0x03364D5C MOVZ W8, 0x1
	0x03364D60 STRB W8, [X20 + 0xE84]
	0x03364D64 STR X31, [X31 + 0x28]
	0x03364D68 CBNZ X19, 0x3364D78
	0x03364D6C MOVZ W0, 0x31
	0x03364D70 MOV X1, X31
	0x03364D74 BL 0x338F3E0
	0x03364D78 ADRP X20, 0x1075000
	0x03364D7C LDRB W8, [X20 + 0x762]
	0x03364D80 CBNZ W8, 0x3364D98
	0x03364D84 ADRP X0, 0xDB6000
	0x03364D88 LDR X0, [X0 + 0x290]
	0x03364D8C BL 0x1C16CF4
	0x03364D90 MOVZ W8, 0x1
	0x03364D94 STRB W8, [X20 + 0x762]
	0x03364D98 ADRP X21, 0xDC4000
	0x03364D9C LDR X21, [X21 + 0x328]
	0x03364DA0 CBZ X19, 0x3364DBC
	0x03364DA4 MOV X0, X19
	0x03364DA8 MOV X1, X31
	0x03364DAC BL 0x3225708
	0x03364DB0 LDR W20, [X19 + 0x10]
	0x03364DB4 MOV X19, X0
	0x03364DB8 B 0x3364DC0
	0x03364DBC MOV X20, X31
	0x03364DC0 LDR X0, [X21]
	0x03364DC4 ADRP X21, 0xDC4000
	0x03364DC8 LDR W8, [X0 + 0xE0]
	0x03364DCC LDR X21, [X21 + 0x588]
	0x03364DD0 CBNZ W8, 0x3364DD8
	0x03364DD4 BL 0x1C16DFC
	0x03364DD8 ADRP X22, 0xD90000
	0x03364DDC LDR X22, [X22 + 0x9F0]
	0x03364DE0 MOV X0, X31
	0x03364DE4 BL 0x3324BF0
	0x03364DE8 LDR X8, [X21]
	0x03364DEC MOV X21, X0
	0x03364DF0 LDR W9, [X8 + 0xE0]
	0x03364DF4 CBNZ W9, 0x3364E00
	0x03364DF8 MOV X0, X8
	0x03364DFC BL 0x1C16DFC
	0x03364E00 ADD X4, X31, 0x28
	0x03364E04 MOV X0, X19
	0x03364E08 MOV X1, X20

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x1079000
	009 Move X22, 0xD92000
	010 Move W8, [X23+3702]
	011 Move X22, [X22+2648]
	012 Move X20, X2
	013 Move X21, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xD92000
	020 Move X0, [X0+2648]
	021 Call 0x1C17CF4
	022 Move X0, 0xD91000
	023 Move X0, [X0+2544]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+3702], W8
	027 Move X0, [X22]
	028 Move [X31+8], X31
	029 Move X22, 0xD91000
	030 Move W8, [X0+224]
	031 Move X22, [X22+2544]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X20
	036 Call DateTimeOffset.ValidateOffset, X0
	037 NotImplemented "Instruction STRH not yet implemented."
	038 Move X0, [X22]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Add X0, X31, 8
	044 Move X1, X21
	045 Call DateTime..ctor, X0, X1
	046 Move X0, [X31+8]
	047 Move X1, X20
	048 Call DateTimeOffset.ValidateDate, X0, X1
	049 Move [X19], X0
	050 Move X20, [X31+48]
	051 Move X19, [X31+56]
	052 Move X22, [X31+32]
	053 Move X21, [X31+40]
	054 Move X30, [X31+16]
	055 Move X23, [X31+24]
	056 Add X31, X31, 64
	057 Return 

Method: System.Void .ctor(System.DateTime dateTime)

Disassembly:
	0x03365080 LDR X21, [X21 + 0x548]
	0x03365084 CBNZ W8, 0x336508C
	0x03365088 BL 0x1C16DFC
	0x0336508C MOV X0, X19
	0x03365090 BL 0x336425C
	0x03365094 LDRSH W2, [X19 + 0x8]
	0x03365098 MOV X20, X0
	0x0336509C ADD X0, X31, 0x8
	0x033650A0 MOV W1, W31
	0x033650A4 MOV W3, W31
	0x033650A8 MOV X4, X31
	0x033650AC STR X31, [X31 + 0x8]
	0x033650B0 BL 0x3393ED0
	0x033650B4 LDR X0, [X21]
	0x033650B8 LDR X19, [X31 + 0x8]
	0x033650BC LDR W8, [X0 + 0xE0]
	0x033650C0 CBNZ W8, 0x33650C8
	0x033650C4 BL 0x1C16DFC
	0x033650C8 MOV X0, X20
	0x033650CC MOV X1, X31
	0x033650D0 MOV X2, X31
	0x033650D4 MOV X3, X19
	0x033650D8 BL 0x33650EC
	0x033650DC LDP X20, X19, [X31 + 0x20]
	0x033650E0 LDP X30, X21, [X31 + 0x10]
	0x033650E4 ADD X31, X31, 0x30
	0x033650E8 RET
	0x033650EC STP X29, X30, [X31 - 0x50]!
	0x033650F0 STR X25, [X31 + 0x10]
	0x033650F4 STP X24, X23, [X31 + 0x20]
	0x033650F8 STP X22, X21, [X31 + 0x30]
	0x033650FC STP X20, X19, [X31 + 0x40]
	0x03365100 ADD X29, X31, 0x0
	0x03365104 SUB X31, X31, 0x20
	0x03365108 MRS X24, 0xC000
	0x0336510C LDR X8, [X24 + 0x28]
	0x03365110 ADRP X23, 0x1077000
	0x03365114 MOV X19, X3
	0x03365118 MOV X22, X2
	0x0336511C STUR X8, [X29 - 0x8]
	0x03365120 LDRB W8, [X23 + 0xEBC]
	0x03365124 MOV X21, X1
	0x03365128 MOV X20, X0
	0x0336512C TBNZ X8, 0x0, 0x3365180
	0x03365130 ADRP X0, 0xDC3000
	0x03365134 LDR X0, [X0 + 0x328]
	0x03365138 BL 0x1C16CF4
	0x0336513C ADRP X0, 0xDC3000
	0x03365140 LDR X0, [X0 + 0x548]
	0x03365144 BL 0x1C16CF4
	0x03365148 ADRP X0, 0xDBC000
	0x0336514C LDR X0, [X0 + 0x850]
	0x03365150 BL 0x1C16CF4
	0x03365154 ADRP X0, 0xDC5000
	0x03365158 LDR X0, [X0 + 0xB18]
	0x0336515C BL 0x1C16CF4
	0x03365160 ADRP X0, 0xDBD000
	0x03365164 LDR X0, [X0 + 0x4E8]
	0x03365168 BL 0x1C16CF4
	0x0336516C ADRP X0, 0xDB7000
	0x03365170 LDR X0, [X0 + 0x678]
	0x03365174 BL 0x1C16CF4
	0x03365178 MOVZ W8, 0x1
	0x0336517C STRB W8, [X23 + 0xEBC]
	0x03365180 ADRP X25, 0xDC3000
	0x03365184 LDR X25, [X25 + 0x548]
	0x03365188 STP X31, X31, [X29 - 0x18]
	0x0336518C STUR X31, [X29 - 0x20]
	0x03365190 CBZ X21, 0x3365270

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1078000
	007 Move [X31+8], X1
	008 Move X22, 0xD90000
	009 Move W8, [X21+3703]
	010 Move X22, [X22+2544]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0xD91000
	018 Move X0, [X0+2648]
	019 Call 0x1C17CF4
	020 Move X0, 0xD90000
	021 Move X0, [X0+2544]
	022 Call 0x1C17CF4
	023 Move X0, 0xD91000
	024 Move X0, [X0+1392]
	025 Call 0x1C17CF4
	026 Move X0, 0xDC3000
	027 Move X0, [X0+2616]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X21+3703], W8
	031 Move X0, [X22]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X22, 0xD91000
	037 Move X22, [X22+2648]
	038 Add X0, X31, 8
	039 Call DateTime.get_Kind, X0
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X8, 0xD91000
	042 Move X8, [X8+1392]
	043 Move X0, [X8]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X21, X31
	049 Move X8, 0xDC3000
	050 Move X8, [X8+2616]
	051 Move X0, [X8]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Move W1, 2
	057 Move X0, X20
	058 Move X2, X31
	059 Call TimeZoneInfo.GetLocalUtcOffset, X0, X1
	060 Move X21, X0
	061 Move X0, [X22]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X0, X21
	067 Call DateTimeOffset.ValidateOffset, X0
	068 NotImplemented "Instruction STRH not yet implemented."
	069 Move X0, X20
	070 Move X1, X21
	071 Call DateTimeOffset.ValidateDate, X0, X1
	072 Move [X19], X0
	073 Move X20, [X31+32]
	074 Move X19, [X31+40]
	075 Move X22, [X31+16]
	076 Move X21, [X31+24]
	077 Move X30, [X31+48]
	078 Return 

Method: System.DateTimeOffset get_UtcNow()

Disassembly:
	0x03365194 LDR W8, [X21 + 0x10]
	0x03365198 CMP W8, 0x1
	0x0336519C B.NE 0x3365270
	0x033651A0 MOV X0, X21
	0x033651A4 MOV W1, W31
	0x033651A8 MOV X2, X31
	0x033651AC BL 0x3222A1C
	0x033651B0 AND W8, W0, 0xFFFF
	0x033651B4 CMP W8, 0x52
	0x033651B8 B.HI 0x33651D0
	0x033651BC CMP W8, 0x4F
	0x033651C0 B.EQ 0x33651E0
	0x033651C4 CMP W8, 0x52
	0x033651C8 B.EQ 0x3365340
	0x033651CC B 0x3365270
	0x033651D0 CMP W8, 0x72
	0x033651D4 B.EQ 0x3365340
	0x033651D8 CMP W8, 0x6F
	0x033651DC B.NE 0x3365270
	0x033651E0 ADD X8, X31, 0x0
	0x033651E4 SUB X21, X8, 0x50
	0x033651E8 ADD X31, X21, 0x0
	0x033651EC LDR X0, [X25]
	0x033651F0 MOVI V0.2D, 0x0
	0x033651F4 STURH W31, [X8 - 0x10]
	0x033651F8 STP V0, V0, [X8 - 0x30]
	0x033651FC STP V0, V0, [X8 - 0x50]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X19, 0x1078000
	006 Move X20, 0xD90000
	007 Move W8, [X19+3704]
	008 Move X20, [X20+2544]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD90000
	014 Move X0, [X0+2544]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X19+3704], W8
	018 Move X0, [X20]
	019 Move W8, [X0+224]
	020 Compare W8, 0
	021 JumpIfNotEqual {23}
	022 Call 0x1C17DFC
	023 Call DateTime.get_UtcNow
	024 Move X1, X0
	025 Add X0, X31, 0
	026 Move [X31], X31
	027 Move [X31+8], X31
	028 Call DateTimeOffset..ctor, X0, X1
	029 Move X0, [X31]
	030 Move X1, [X31+8]
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X30, [X31+16]
	034 Add X31, X31, 48
	035 Return X0

Method: System.DateTime get_UtcDateTime()

Disassembly:
	0x03365200 LDR W8, [X0 + 0xE0]
	0x03365204 CBNZ W8, 0x336520C
	0x03365208 BL 0x1C16DFC
	0x0336520C SUB X4, X29, 0xC
	0x03365210 MOVZ W3, 0x21
	0x03365214 MOV X0, X20
	0x03365218 MOV X1, X19
	0x0336521C MOV X2, X21
	0x03365220 BL 0x3369CA8
	0x03365224 ADRP X8, 0xDBC000
	0x03365228 LDUR W19, [X29 - 0xC]
	0x0336522C LDR X8, [X8 + 0x850]
	0x03365230 CMP W19, 0x22
	0x03365234 LDR X20, [X8]
	0x03365238 B.CC 0x3365244
	0x0336523C MOV X0, X31
	0x03365240 BL 0x339D6EC
	0x03365244 LDR X0, [X20 + 0x20]
	0x03365248 LDRB W8, [X0 + 0x135]
	0x0336524C TBNZ X8, 0x0, 0x3365254
	0x03365250 BL 0x1C5C684
	0x03365254 ADRP X8, 0xDC5000
	0x03365258 LDR X8, [X8 + 0xB18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1078000
	006 Move X20, 0xD90000
	007 Move W8, [X21+3705]
	008 Move X20, [X20+2544]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD90000
	015 Move X0, [X0+2544]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3705], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move W1, 1
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call DateTime.SpecifyKind, X0, X1
	032 Return X0

Method: System.DateTime get_ClockDateTime()

Disassembly:
	0x0336525C SUB X0, X29, 0x20
	0x03365260 STP X21, X19, [X29 - 0x20]
	0x03365264 LDR X1, [X8]
	0x03365268 BL 0x25FB854
	0x0336526C B 0x336530C
	0x03365270 ADRP X8, 0xDC3000
	0x03365274 LDR X8, [X8 + 0x328]
	0x03365278 LDR X0, [X8]
	0x0336527C LDR W8, [X0 + 0xE0]
	0x03365280 CBNZ W8, 0x3365288
	0x03365284 BL 0x1C16DFC
	0x03365288 MOV X0, X22
	0x0336528C MOV X1, X31
	0x03365290 BL 0x3324CFC
	0x03365294 ADRP X23, 0x1074000
	0x03365298 LDRB W8, [X23 + 0x762]
	0x0336529C MOV X22, X0
	0x033652A0 CBZ W8, 0x33652C0
	0x033652A4 CBZ X21, 0x33652D8
	0x033652A8 MOV X0, X21
	0x033652AC MOV X1, X31
	0x033652B0 BL 0x3225708
	0x033652B4 LDR W21, [X21 + 0x10]
	0x033652B8 MOV X23, X0
	0x033652BC B 0x33652DC
	0x033652C0 ADRP X0, 0xDB5000
	0x033652C4 LDR X0, [X0 + 0x290]
	0x033652C8 BL 0x1C16CF4
	0x033652CC MOVZ W8, 0x1
	0x033652D0 STRB W8, [X23 + 0x762]
	0x033652D4 CBNZ X21, 0x33652A8
	0x033652D8 MOV X23, X31
	0x033652DC LDR X0, [X25]
	0x033652E0 LDR W8, [X0 + 0xE0]
	0x033652E4 CBNZ W8, 0x33652EC
	0x033652E8 BL 0x1C16DFC
	0x033652EC MOV X0, X20
	0x033652F0 MOV X1, X23
	0x033652F4 MOV X2, X21
	0x033652F8 MOV X3, X22
	0x033652FC MOV X4, X19
	0x03365300 BL 0x336A4E8
	0x03365304 MOV X1, X31
	0x03365308 BL 0x3235BE8
	0x0336530C MOV X21, X0
	0x03365310 LDR X8, [X24 + 0x28]
	0x03365314 LDUR X9, [X29 - 0x8]
	0x03365318 CMP X8, X9
	0x0336531C B.NE 0x3365398
	0x03365320 MOV X0, X21
	0x03365324 ADD X31, X29, 0x0
	0x03365328 LDP X20, X19, [X31 + 0x40]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1078000
	007 Move X19, 0xD91000
	008 Move W8, [X21+3706]
	009 Move X19, [X19+2648]
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xD91000
	016 Move X0, [X0+2648]
	017 Call 0x1C17CF4
	018 Move X0, 0xD90000
	019 Move X0, [X0+2544]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3706], W8
	023 Move X0, [X19]
	024 Move X21, 0xD90000
	025 Move X19, [X20]
	026 Move W8, [X0+224]
	027 Move X21, [X21+2544]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 NotImplemented "Instruction LDRSH not yet implemented."
	032 Add X0, X31, 8
	033 Move W1, W31
	034 Move W3, W31
	035 Move X4, X31
	036 Move [X31+8], X31
	037 Call TimeSpan..ctor, X0, X1, X2, X3
	038 Move X0, [X21]
	039 Move X20, [X31+8]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X19
	045 Move X1, X20
	046 Call DateTime.op_Addition, X0, X1
	047 Move [X31+8], X0
	048 Add X0, X31, 8
	049 Call DateTime.get_Ticks, X0
	050 Move X1, X0
	051 Add X0, X31, 0
	052 Move W2, W31
	053 Move [X31], X31
	054 Call DateTime..ctor, X0, X1, X2
	055 Move X0, [X31]
	056 Move X20, [X31+32]
	057 Move X19, [X31+40]
	058 Move X30, [X31+16]
	059 Move X21, [X31+24]
	060 Add X31, X31, 48
	061 Return X0

Method: System.TimeSpan get_Offset()

Disassembly:
	0x0336532C LDP X22, X21, [X31 + 0x30]
	0x03365330 LDP X24, X23, [X31 + 0x20]
	0x03365334 LDR X25, [X31 + 0x10]
	0x03365338 LDP X29, X30, [X31], #0x50
	0x0336533C RET
	0x03365340 MOVZ W0, 0x1D
	0x03365344 MOV X1, X31
	0x03365348 BL 0x32277A4
	0x0336534C CBZ X0, 0x3365394
	0x03365350 MOV X1, X31
	0x03365354 MOV X21, X0

ISIL:
	001 Move [X31-16], X30
	002 NotImplemented "Instruction LDRSH not yet implemented."
	003 Add X0, X31, 8
	004 Move W1, W31
	005 Move W3, W31
	006 Move X4, X31
	007 Move [X31+8], X31
	008 Call TimeSpan..ctor, X0, X1, X2, X3
	009 Move X0, [X31+8]
	010 Move X30, [X31+16]
	011 Return X0

Method: System.Int32 System.IComparable.CompareTo(System.Object obj)

Disassembly:
	0x03365358 BL 0x3225708
	0x0336535C LDR X8, [X25]
	0x03365360 LDR W22, [X21 + 0x10]
	0x03365364 MOV X23, X0
	0x03365368 LDR W9, [X8 + 0xE0]
	0x0336536C CBNZ W9, 0x3365378
	0x03365370 MOV X0, X8
	0x03365374 BL 0x1C16DFC
	0x03365378 SUB X4, X29, 0x10
	0x0336537C MOV X0, X20
	0x03365380 MOV X1, X19
	0x03365384 MOV X2, X23
	0x03365388 MOV X3, X22
	0x0336538C BL 0x336A184
	0x03365390 B 0x3365310
	0x03365394 BL 0x1C16F20
	0x03365398 BL 0x3EB1B20
	0x0336539C STR X30, [X31 - 0x30]!
	0x033653A0 STP X22, X21, [X31 + 0x10]
	0x033653A4 STP X20, X19, [X31 + 0x20]
	0x033653A8 ADRP X22, 0x1077000
	0x033653AC ADRP X21, 0xD90000
	0x033653B0 LDRB W8, [X22 + 0xE87]
	0x033653B4 LDR X21, [X21 + 0xA58]
	0x033653B8 MOV X19, X1
	0x033653BC MOV X20, X0
	0x033653C0 TBNZ X8, 0x0, 0x33653E4
	0x033653C4 ADRP X0, 0xDC3000
	0x033653C8 LDR X0, [X0 + 0x548]
	0x033653CC BL 0x1C16CF4
	0x033653D0 ADRP X0, 0xD90000
	0x033653D4 LDR X0, [X0 + 0xA58]
	0x033653D8 BL 0x1C16CF4
	0x033653DC MOVZ W8, 0x1
	0x033653E0 STRB W8, [X22 + 0xE87]
	0x033653E4 LDR X0, [X21]
	0x033653E8 ADRP X22, 0xDC3000
	0x033653EC LDR W8, [X0 + 0xE0]
	0x033653F0 LDR X22, [X22 + 0x548]
	0x033653F4 CBNZ W8, 0x33653FC
	0x033653F8 BL 0x1C16DFC
	0x033653FC MOV X0, X20
	0x03365400 BL 0x336425C
	0x03365404 LDRSH W2, [X20 + 0x8]
	0x03365408 MOV X21, X0
	0x0336540C ADD X0, X31, 0x8
	0x03365410 MOV W1, W31
	0x03365414 MOV W3, W31
	0x03365418 MOV X4, X31
	0x0336541C STR X31, [X31 + 0x8]
	0x03365420 BL 0x3393ED0
	0x03365424 LDR X0, [X22]
	0x03365428 LDR X20, [X31 + 0x8]
	0x0336542C LDR W8, [X0 + 0xE0]
	0x03365430 CBNZ W8, 0x3365438
	0x03365434 BL 0x1C16DFC
	0x03365438 MOV X0, X21
	0x0336543C MOV X1, X31
	0x03365440 MOV X2, X19
	0x03365444 MOV X3, X20
	0x03365448 BL 0x33650EC
	0x0336544C LDP X20, X19, [X31 + 0x20]
	0x03365450 LDP X22, X21, [X31 + 0x10]
	0x03365454 LDR X30, [X31], #0x30
	0x03365458 RET
	0x0336545C SUB X31, X31, 0x40
	0x03365460 STP X30, X23, [X31 + 0x10]
	0x03365464 STP X22, X21, [X31 + 0x20]
	0x03365468 STP X20, X19, [X31 + 0x30]
	0x0336546C ADRP X23, 0x1077000
	0x03365470 ADRP X22, 0xD90000
	0x03365474 LDRB W8, [X23 + 0xE88]
	0x03365478 LDR X22, [X22 + 0xA58]
	0x0336547C MOV X19, X2
	0x03365480 MOV X20, X1
	0x03365484 MOV X21, X0
	0x03365488 TBNZ X8, 0x0, 0x33654AC
	0x0336548C ADRP X0, 0xDC3000
	0x03365490 LDR X0, [X0 + 0x548]
	0x03365494 BL 0x1C16CF4
	0x03365498 ADRP X0, 0xD90000
	0x0336549C LDR X0, [X0 + 0xA58]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X21, 0x1078000
	008 Move W8, [X21+3707]
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xD91000
	016 Move X0, [X0+2648]
	017 Call 0x1C17CF4
	018 Move X0, 0xD90000
	019 Move X0, [X0+2544]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3707], W8
	023 Compare X20, 0
	024 JumpIfEqual {60}
	025 Move X22, 0xD91000
	026 Move X22, [X22+2648]
	027 Move X9, [X20]
	028 Move X8, [X22]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X21, 0xD90000
	031 Move X21, [X21+2544]
	032 Move X0, X20
	033 Call 0x1C17E08
	034 Move V0, [X0]
	035 Move X0, [X22]
	036 Move [X31], V0
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Add X0, X31, 0
	042 Call DateTimeOffset.get_UtcDateTime, X0
	043 Move X20, X0
	044 Move X0, X19
	045 Call DateTimeOffset.get_UtcDateTime, X0
	046 Move X8, [X21]
	047 Move X19, X0
	048 Move W9, [X8+224]
	049 Compare W9, 0
	050 JumpIfNotEqual {53}
	051 Move X0, X8
	052 Call 0x1C17DFC
	053 Move X0, X19
	054 Move X1, X20
	055 Call DateTime.op_GreaterThan, X0, X1
	056 Move TEMP, X0
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfNotEqual {61}
	060 Move W0, 1
	061 Move X0, [X21]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X0, X19
	067 Move X1, X20
	068 Call DateTime.op_LessThan, X0, X1
	069 NotImplemented "Instruction SBFM not yet implemented."
	070 Move X20, [X31+48]
	071 Move X19, [X31+56]
	072 Move X22, [X31+32]
	073 Move X21, [X31+40]
	074 Move X30, [X31+16]
	075 Add X31, X31, 64
	076 Return X0
	077 Move X0, 0xD97000
	078 Move X0, [X0+1400]
	079 Call 0x1C17D08
	080 Call 0x1C17F10
	081 Move X19, X0
	082 Move X0, 0xDC6000
	083 Move X0, [X0+2768]
	084 Call 0x1C17D08
	085 Move X1, X0
	086 Move X0, X19
	087 Move X2, X31
	088 Call ArgumentException..ctor, X0, X1
	089 Move X0, 0xDC6000
	090 Move X0, [X0+2776]
	091 Call 0x1C17D08
	092 Move X1, X0
	093 Move X0, X19
	094 Call 0x1C17DEC

Method: System.Int32 CompareTo(System.DateTimeOffset other)

Disassembly:
	0x033654A0 BL 0x1C16CF4
	0x033654A4 MOVZ W8, 0x1
	0x033654A8 STRB W8, [X23 + 0xE88]
	0x033654AC LDR X0, [X22]
	0x033654B0 ADRP X23, 0xDC3000
	0x033654B4 LDR W8, [X0 + 0xE0]
	0x033654B8 LDR X23, [X23 + 0x548]
	0x033654BC CBNZ W8, 0x33654C4
	0x033654C0 BL 0x1C16DFC
	0x033654C4 MOV X0, X21
	0x033654C8 BL 0x336425C
	0x033654CC LDRSH W2, [X21 + 0x8]
	0x033654D0 MOV X22, X0
	0x033654D4 ADD X0, X31, 0x8
	0x033654D8 MOV W1, W31
	0x033654DC MOV W3, W31
	0x033654E0 MOV X4, X31
	0x033654E4 STR X31, [X31 + 0x8]
	0x033654E8 BL 0x3393ED0
	0x033654EC LDR X0, [X23]
	0x033654F0 LDR X21, [X31 + 0x8]
	0x033654F4 LDR W8, [X0 + 0xE0]
	0x033654F8 CBNZ W8, 0x3365500
	0x033654FC BL 0x1C16DFC
	0x03365500 MOV X0, X22
	0x03365504 MOV X1, X20
	0x03365508 MOV X2, X19
	0x0336550C MOV X3, X21
	0x03365510 BL 0x33650EC
	0x03365514 LDP X20, X19, [X31 + 0x30]
	0x03365518 LDP X22, X21, [X31 + 0x20]
	0x0336551C LDP X30, X23, [X31 + 0x10]
	0x03365520 ADD X31, X31, 0x40
	0x03365524 RET
	0x03365528 SUB X31, X31, 0x60
	0x0336552C STP X30, X27, [X31 + 0x10]
	0x03365530 STP X26, X25, [X31 + 0x20]
	0x03365534 STP X24, X23, [X31 + 0x30]
	0x03365538 STP X22, X21, [X31 + 0x40]
	0x0336553C STP X20, X19, [X31 + 0x50]
	0x03365540 ADRP X27, 0x1077000
	0x03365544 ADRP X26, 0xD90000
	0x03365548 LDRB W8, [X27 + 0xE89]
	0x0336554C LDR X26, [X26 + 0xA58]
	0x03365550 MOV X19, X6
	0x03365554 MOV X20, X5
	0x03365558 MOV X21, X4
	0x0336555C MOV X22, X3
	0x03365560 MOV X23, X2
	0x03365564 MOV X24, X1
	0x03365568 MOV X25, X0
	0x0336556C TBNZ X8, 0x0, 0x3365590
	0x03365570 ADRP X0, 0xDC3000

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1078000
	007 Move [X31], X1
	008 Move [X31+8], X2
	009 Move X20, 0xD91000
	010 Move W8, [X21+3708]
	011 Move X20, [X20+2648]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xD91000
	018 Move X0, [X0+2648]
	019 Call 0x1C17CF4
	020 Move X0, 0xD90000
	021 Move X0, [X0+2544]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3708], W8
	025 Move X0, [X20]
	026 Move X21, 0xD90000
	027 Move W8, [X0+224]
	028 Move X21, [X21+2544]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Add X0, X31, 0
	033 Call DateTimeOffset.get_UtcDateTime, X0
	034 Move X20, X0
	035 Move X0, X19
	036 Call DateTimeOffset.get_UtcDateTime, X0
	037 Move X8, [X21]
	038 Move X19, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {44}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X0, X19
	045 Move X1, X20
	046 Call DateTime.op_GreaterThan, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {52}
	051 Move W0, 1
	052 Move X0, [X21]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X19
	058 Move X1, X20
	059 Call DateTime.op_LessThan, X0, X1
	060 NotImplemented "Instruction SBFM not yet implemented."
	061 Move X20, [X31+32]
	062 Move X19, [X31+40]
	063 Move X30, [X31+16]
	064 Move X21, [X31+24]
	065 Add X31, X31, 48
	066 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03365574 LDR X0, [X0 + 0x548]
	0x03365578 BL 0x1C16CF4
	0x0336557C ADRP X0, 0xD90000
	0x03365580 LDR X0, [X0 + 0xA58]
	0x03365584 BL 0x1C16CF4
	0x03365588 MOVZ W8, 0x1
	0x0336558C STRB W8, [X27 + 0xE89]
	0x03365590 LDR X0, [X26]
	0x03365594 ADRP X27, 0xDC3000
	0x03365598 LDR W8, [X0 + 0xE0]
	0x0336559C LDR X27, [X27 + 0x548]
	0x033655A0 CBNZ W8, 0x33655A8
	0x033655A4 BL 0x1C16DFC
	0x033655A8 MOV X0, X25
	0x033655AC BL 0x336425C
	0x033655B0 LDRSH W2, [X25 + 0x8]
	0x033655B4 MOV X26, X0
	0x033655B8 ADD X0, X31, 0x8
	0x033655BC MOV W1, W31
	0x033655C0 MOV W3, W31
	0x033655C4 MOV X4, X31
	0x033655C8 STR X31, [X31 + 0x8]
	0x033655CC BL 0x3393ED0
	0x033655D0 LDR X0, [X27]
	0x033655D4 LDR X25, [X31 + 0x8]
	0x033655D8 LDR W8, [X0 + 0xE0]
	0x033655DC CBNZ W8, 0x33655E4
	0x033655E0 BL 0x1C16DFC
	0x033655E4 MOV X0, X26
	0x033655E8 MOV X1, X24
	0x033655EC MOV X2, X23
	0x033655F0 MOV X3, X22
	0x033655F4 MOV X4, X21
	0x033655F8 MOV X5, X20
	0x033655FC MOV X6, X19
	0x03365600 MOV X7, X25
	0x03365604 BL 0x3365628
	0x03365608 LDP X20, X19, [X31 + 0x50]
	0x0336560C LDP X22, X21, [X31 + 0x40]
	0x03365610 LDP X24, X23, [X31 + 0x30]
	0x03365614 LDP X26, X25, [X31 + 0x20]
	0x03365618 LDP X30, X27, [X31 + 0x10]
	0x0336561C AND W0, W0, 0x1
	0x03365620 ADD X31, X31, 0x60
	0x03365624 RET
	0x03365628 STP X30, X27, [X31 - 0x50]!
	0x0336562C STP X26, X25, [X31 + 0x10]
	0x03365630 STP X24, X23, [X31 + 0x20]
	0x03365634 STP X22, X21, [X31 + 0x30]
	0x03365638 STP X20, X19, [X31 + 0x40]
	0x0336563C ADRP X27, 0x1077000
	0x03365640 LDRB W8, [X27 + 0xEBE]
	0x03365644 MOV X22, X7
	0x03365648 MOV X26, X6
	0x0336564C MOV X24, X5
	0x03365650 MOV X25, X4
	0x03365654 MOV X19, X3
	0x03365658 MOV X20, X2
	0x0336565C MOV X21, X1
	0x03365660 MOV X23, X0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0x1078000
	007 Move W8, [X21+3709]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xD91000
	015 Move X0, [X0+2648]
	016 Call 0x1C17CF4
	017 Move X0, 0xD90000
	018 Move X0, [X0+2544]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3709], W8
	022 Compare X19, 0
	023 JumpIfEqual {29}
	024 Move X21, 0xD91000
	025 Move X21, [X21+2648]
	026 Move X8, [X19]
	027 Move X0, [X21]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move W0, W31
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Call DateTimeOffset.get_UtcDateTime, X0
	036 Move [X31+24], X0
	037 Move X8, [X19]
	038 Move X1, [X21]
	039 Move X0, X19
	040 Move X8, [X8+64]
	041 Move X9, [X1+64]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Call 0x1C17E08
	044 Move V0, [X0]
	045 Add X0, X31, 0
	046 Move [X31], V0
	047 Call DateTimeOffset.get_UtcDateTime, X0
	048 Move X8, 0xD90000
	049 Move X8, [X8+2544]
	050 Move X19, X0
	051 Move X8, [X8]
	052 Move W9, [X8+224]
	053 Compare W9, 0
	054 JumpIfNotEqual {57}
	055 Move X0, X8
	056 Call 0x1C17DFC
	057 Add X0, X31, 24
	058 Move X1, X19
	059 Call DateTime.Equals, X0, X1
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X30, [X31+32]
	063 Move X21, [X31+40]
	064 And W0, W0, 1
	065 Add X31, X31, 64
	066 Return X0
	067 Call 0x1C181E0

Method: System.Boolean Equals(System.DateTimeOffset other)

Disassembly:
	0x03365664 TBNZ X8, 0x0, 0x33656A0
	0x03365668 ADRP X0, 0xDC3000
	0x0336566C LDR X0, [X0 + 0x328]
	0x03365670 BL 0x1C16CF4
	0x03365674 ADRP X0, 0xDC3000
	0x03365678 LDR X0, [X0 + 0x548]
	0x0336567C BL 0x1C16CF4
	0x03365680 ADRP X0, 0xDBD000
	0x03365684 LDR X0, [X0 + 0x28]
	0x03365688 BL 0x1C16CF4
	0x0336568C ADRP X0, 0xDBD000
	0x03365690 LDR X0, [X0 + 0x588]
	0x03365694 BL 0x1C16CF4
	0x03365698 MOVZ W8, 0x1
	0x0336569C STRB W8, [X27 + 0xEBE]
	0x033656A0 ADRP X27, 0xDC3000
	0x033656A4 LDR X27, [X27 + 0x548]
	0x033656A8 CMP W24, 0x1
	0x033656AC B.NE 0x336571C
	0x033656B0 LDRH W8, [X25]
	0x033656B4 CMP W8, 0x52
	0x033656B8 B.HI 0x33656D0
	0x033656BC CMP W8, 0x4F
	0x033656C0 B.EQ 0x33656E0
	0x033656C4 CMP W8, 0x52
	0x033656C8 B.EQ 0x33657F4
	0x033656CC B 0x336571C
	0x033656D0 CMP W8, 0x72
	0x033656D4 B.EQ 0x33657F4
	0x033656D8 CMP W8, 0x6F
	0x033656DC B.NE 0x336571C
	0x033656E0 LDR X0, [X27]
	0x033656E4 LDR W8, [X0 + 0xE0]
	0x033656E8 CBNZ W8, 0x33656F0
	0x033656EC BL 0x1C16DFC
	0x033656F0 MOV X0, X23
	0x033656F4 MOV X1, X22
	0x033656F8 MOV X2, X21
	0x033656FC MOV X3, X20
	0x03365700 MOV X4, X19
	0x03365704 LDP X20, X19, [X31 + 0x40]
	0x03365708 LDP X22, X21, [X31 + 0x30]
	0x0336570C LDP X24, X23, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0x1078000
	007 Move [X31+16], X1
	008 Move [X31+24], X2
	009 Move X20, 0xD91000
	010 Move W8, [X21+3710]
	011 Move X20, [X20+2648]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xD91000
	018 Move X0, [X0+2648]
	019 Call 0x1C17CF4
	020 Move X0, 0xD90000
	021 Move X0, [X0+2544]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3710], W8
	025 Move X0, [X20]
	026 Move X20, 0xD90000
	027 Move W8, [X0+224]
	028 Move X20, [X20+2544]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X19
	033 Call DateTimeOffset.get_UtcDateTime, X0
	034 Move [X31+8], X0
	035 Add X0, X31, 16
	036 Call DateTimeOffset.get_UtcDateTime, X0
	037 Move X8, [X20]
	038 Move X19, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {44}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Add X0, X31, 8
	045 Move X1, X19
	046 Call DateTime.Equals, X0, X1
	047 Move X20, [X31+48]
	048 Move X19, [X31+56]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 And W0, W0, 1
	052 Add X31, X31, 64
	053 Return X0

Method: System.DateTimeOffset FromUnixTimeSeconds(System.Int64 seconds)

Disassembly:
	0x03365710 LDP X26, X25, [X31 + 0x10]
	0x03365714 LDP X30, X27, [X31], #0x50
	0x03365718 B 0x3369CA8
	0x0336571C ADRP X8, 0xDC3000
	0x03365720 LDR X8, [X8 + 0x328]
	0x03365724 LDR X0, [X8]
	0x03365728 LDR W8, [X0 + 0xE0]
	0x0336572C CBNZ W8, 0x3365734
	0x03365730 BL 0x1C16DFC
	0x03365734 MOV X0, X26
	0x03365738 MOV X1, X31
	0x0336573C BL 0x3324CFC
	0x03365740 LDR X8, [X27]
	0x03365744 MOV X26, X0
	0x03365748 LDR W9, [X8 + 0xE0]
	0x0336574C CBNZ W9, 0x3365758
	0x03365750 MOV X0, X8
	0x03365754 BL 0x1C16DFC
	0x03365758 MOV X0, X23
	0x0336575C MOV X1, X25
	0x03365760 MOV X2, X24
	0x03365764 MOV X3, X26
	0x03365768 MOV X4, X22
	0x0336576C BL 0x336A4E8
	0x03365770 CBZ X0, 0x3365830
	0x03365774 MOV X1, X31
	0x03365778 MOV X22, X0
	0x0336577C BL 0x323260C
	0x03365780 CMP W0, W20
	0x03365784 CSET W23, LE
	0x03365788 B.LE 0x3365794
	0x0336578C MOV W0, W31
	0x03365790 B 0x33657C8
	0x03365794 MOV X0, X22
	0x03365798 MOV X1, X31
	0x0336579C BL 0x323260C
	0x033657A0 MOV W4, W0
	0x033657A4 MOV X0, X22
	0x033657A8 MOV W1, W31
	0x033657AC MOV X2, X21
	0x033657B0 MOV X3, X20
	0x033657B4 MOV X5, X31
	0x033657B8 BL 0x32328F4
	0x033657BC MOV X0, X22
	0x033657C0 MOV X1, X31
	0x033657C4 BL 0x323260C
	0x033657C8 STR W0, [X19]
	0x033657CC MOV X0, X22
	0x033657D0 MOV X1, X31
	0x033657D4 BL 0x3235B68
	0x033657D8 MOV W0, W23
	0x033657DC LDP X20, X19, [X31 + 0x40]
	0x033657E0 LDP X22, X21, [X31 + 0x30]
	0x033657E4 LDP X24, X23, [X31 + 0x20]
	0x033657E8 LDP X26, X25, [X31 + 0x10]
	0x033657EC LDP X30, X27, [X31], #0x50
	0x033657F0 RET
	0x033657F4 LDR X0, [X27]
	0x033657F8 LDR W8, [X0 + 0xE0]
	0x033657FC CBNZ W8, 0x3365804
	0x03365800 BL 0x1C16DFC
	0x03365804 MOV X0, X23
	0x03365808 MOV X1, X22
	0x0336580C MOV X2, X21
	0x03365810 MOV X3, X20
	0x03365814 MOV X4, X19
	0x03365818 LDP X20, X19, [X31 + 0x40]
	0x0336581C LDP X22, X21, [X31 + 0x30]
	0x03365820 LDP X24, X23, [X31 + 0x20]
	0x03365824 LDP X26, X25, [X31 + 0x10]
	0x03365828 LDP X30, X27, [X31], #0x50
	0x0336582C B 0x336A184
	0x03365830 BL 0x1C16F20
	0x03365834 SUB X31, X31, 0x70
	0x03365838 STR X30, [X31 + 0x20]
	0x0336583C STP X26, X25, [X31 + 0x30]
	0x03365840 STP X24, X23, [X31 + 0x40]
	0x03365844 STP X22, X21, [X31 + 0x50]
	0x03365848 STP X20, X19, [X31 + 0x60]
	0x0336584C ADRP X25, 0x1077000
	0x03365850 ADRP X24, 0xD90000
	0x03365854 LDRB W8, [X25 + 0xE8A]
	0x03365858 LDR X24, [X24 + 0xA58]
	0x0336585C MOV X19, X4
	0x03365860 MOV W23, W3
	0x03365864 MOV X21, X2
	0x03365868 MOV X20, X1
	0x0336586C MOV X22, X0
	0x03365870 TBNZ X8, 0x0, 0x33658B8
	0x03365874 ADRP X0, 0xDC3000
	0x03365878 LDR X0, [X0 + 0x328]
	0x0336587C BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x1078000
	006 Move W8, [X20+3711]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xD91000
	013 Move X0, [X0+1392]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3711], W8
	017 Move X8, 0xF700
	018 NotImplemented "Instruction MOVK not yet implemented."
	019 Move X9, 0x3880
	020 NotImplemented "Instruction MOVK not yet implemented."
	021 NotImplemented "Instruction MOVK not yet implemented."
	022 Add X8, X19, X8
	023 NotImplemented "Instruction MOVK not yet implemented."
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X20, 0xD91000
	026 Move X20, [X20+1392]
	027 Move X0, [X20]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {33}
	031 Call 0x1C17DFC
	032 Move X0, [X20]
	033 Move X8, [X0+184]
	034 Move X9, 0x8000
	035 NotImplemented "Instruction MOVK not yet implemented."
	036 NotImplemented "Instruction MOVK not yet implemented."
	037 Move X2, [X8]
	038 Move W8, 0x9680
	039 NotImplemented "Instruction MOVK not yet implemented."
	040 NotImplemented "Instruction MOVK not yet implemented."
	041 NotImplemented "Instruction MADD not yet implemented."
	042 Add X0, X31, 16
	043 Move [X31+16], X31
	044 Move [X31+24], X31
	045 Call DateTimeOffset..ctor, X0, X1, X2
	046 Move X0, [X31+16]
	047 Move X1, [X31+24]
	048 Move X20, [X31+48]
	049 Move X19, [X31+56]
	050 Move X30, [X31+32]
	051 Add X31, X31, 64
	052 Return X0
	053 Move TEMP, 0xF6FF
	054 Not TEMP
	055 Move X8, TEMP
	056 NotImplemented "Instruction MOVK not yet implemented."
	057 NotImplemented "Instruction MOVK not yet implemented."
	058 Move [X31+40], X8
	059 Move X19, 0xD91000
	060 Move X19, [X19+2656]
	061 Move X0, X19
	062 Call 0x1C17D08
	063 Add X1, X31, 40
	064 Call 0x1C17E04
	065 Move X8, 0x417F
	066 NotImplemented "Instruction MOVK not yet implemented."
	067 Move X20, X0
	068 NotImplemented "Instruction MOVK not yet implemented."
	069 Move X0, X19
	070 Move [X31+8], X8
	071 Call 0x1C17D08
	072 Add X1, X31, 8
	073 Call 0x1C17E04
	074 Move X19, X0
	075 Move X0, 0xDBE000
	076 Move X0, [X0+880]
	077 Call 0x1C17D08
	078 Move X1, X20
	079 Move X2, X19
	080 Move X3, X31
	081 Call SR.Format, X0, X1, X2
	082 Move X19, X0
	083 Move X0, 0xD97000
	084 Move X0, [X0+1888]
	085 Call 0x1C17D08
	086 Call 0x1C17F10
	087 Move X20, X0
	088 Move X0, 0xDC6000
	089 Move X0, [X0+2784]
	090 Call 0x1C17D08
	091 Move X1, X0
	092 Move X0, X20
	093 Move X2, X19
	094 Move X3, X31
	095 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	096 Move X0, 0xDC6000
	097 Move X0, [X0+2792]
	098 Call 0x1C17D08
	099 Move X1, X0
	100 Move X0, X20
	101 Call 0x1C17DEC

Method: System.Void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object sender)

Disassembly:
	0x03365880 ADRP X0, 0xD90000
	0x03365884 LDR X0, [X0 + 0xA58]
	0x03365888 BL 0x1C16CF4
	0x0336588C ADRP X0, 0xDC3000
	0x03365890 LDR X0, [X0 + 0x588]
	0x03365894 BL 0x1C16CF4
	0x03365898 ADRP X0, 0xD8F000
	0x0336589C LDR X0, [X0 + 0x9F0]
	0x033658A0 BL 0x1C16CF4
	0x033658A4 ADRP X0, 0xDC5000
	0x033658A8 LDR X0, [X0 + 0xA18]
	0x033658AC BL 0x1C16CF4
	0x033658B0 MOVZ W8, 0x1
	0x033658B4 STRB W8, [X25 + 0xE8A]
	0x033658B8 LDR X0, [X24]
	0x033658BC STR X31, [X31 + 0x28]
	0x033658C0 STR X31, [X31 + 0x18]
	0x033658C4 ADRP X24, 0xDC5000
	0x033658C8 LDR W8, [X0 + 0xE0]
	0x033658CC LDR X24, [X24 + 0xA18]
	0x033658D0 CBNZ W8, 0x33658D8
	0x033658D4 BL 0x1C16DFC
	0x033658D8 LDR X1, [X24]
	0x033658DC MOV W0, W23
	0x033658E0 BL 0x33659F8
	0x033658E4 CBZ X22, 0x33659D0
	0x033658E8 ADRP X25, 0x1074000
	0x033658EC ADRP X24, 0xDC3000
	0x033658F0 LDRB W8, [X25 + 0x762]
	0x033658F4 LDR X24, [X24 + 0x328]
	0x033658F8 MOV W23, W0
	0x033658FC CBNZ W8, 0x3365914
	0x03365900 ADRP X0, 0xDB5000
	0x03365904 LDR X0, [X0 + 0x290]
	0x03365908 BL 0x1C16CF4
	0x0336590C MOVZ W8, 0x1
	0x03365910 STRB W8, [X25 + 0x762]
	0x03365914 ADRP X26, 0xDC3000
	0x03365918 LDR X26, [X26 + 0x588]
	0x0336591C MOV X0, X22
	0x03365920 MOV X1, X31
	0x03365924 BL 0x3225708
	0x03365928 LDR X8, [X24]
	0x0336592C LDR W22, [X22 + 0x10]
	0x03365930 MOV X24, X0
	0x03365934 LDR W9, [X8 + 0xE0]
	0x03365938 CBNZ W9, 0x3365944
	0x0336593C MOV X0, X8
	0x03365940 BL 0x1C16DFC
	0x03365944 ADRP X25, 0xD8F000
	0x03365948 LDR X25, [X25 + 0x9F0]
	0x0336594C MOV X0, X21
	0x03365950 MOV X1, X31
	0x03365954 BL 0x3324CFC
	0x03365958 LDR X8, [X26]
	0x0336595C MOV X21, X0
	0x03365960 LDR W9, [X8 + 0xE0]
	0x03365964 CBNZ W9, 0x3365970
	0x03365968 MOV X0, X8
	0x0336596C BL 0x1C16DFC
	0x03365970 ADD X5, X31, 0x18
	0x03365974 ADD X6, X31, 0x28
	0x03365978 MOV X0, X24
	0x0336597C MOV X1, X22
	0x03365980 MOV X2, X20
	0x03365984 MOV X3, X21
	0x03365988 MOV W4, W23
	0x0336598C BL 0x3365AC4
	0x03365990 LDR X8, [X25]
	0x03365994 MOV W20, W0
	0x03365998 LDR W9, [X8 + 0xE0]
	0x0336599C CBNZ W9, 0x33659A8
	0x033659A0 MOV X0, X8
	0x033659A4 BL 0x1C16DFC
	0x033659A8 ADD X0, X31, 0x18
	0x033659AC BL 0x3361708
	0x033659B0 LDR X2, [X31 + 0x28]
	0x033659B4 MOV X1, X0
	0x033659B8 ADD X0, X31, 0x8
	0x033659BC STP X31, X31, [X31 + 0x8]
	0x033659C0 BL 0x3363D54
	0x033659C4 LDUR V0, [X31 + 0x8]
	0x033659C8 STR V0, [X19]
	0x033659CC B 0x33659D8
	0x033659D0 MOV W20, W31
	0x033659D4 STP X31, X31, [X19]
	0x033659D8 AND W0, W20, 0x1
	0x033659DC LDP X20, X19, [X31 + 0x60]
	0x033659E0 LDP X22, X21, [X31 + 0x50]
	0x033659E4 LDP X24, X23, [X31 + 0x40]
	0x033659E8 LDP X26, X25, [X31 + 0x30]
	0x033659EC LDR X30, [X31 + 0x20]
	0x033659F0 ADD X31, X31, 0x70
	0x033659F4 RET
	0x033659F8 STR X30, [X31 - 0x20]!
	0x033659FC STP X20, X19, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x1078000
	007 Move X21, 0xD91000
	008 Move W8, [X20+3712]
	009 Move X21, [X21+2648]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xD91000
	016 Move X0, [X0+2648]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3712], W8
	020 Move X0, [X21]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 NotImplemented "Instruction LDRSH not yet implemented."
	026 Move [X31+8], X31
	027 Add X0, X31, 8
	028 Move W1, W31
	029 Move W3, W31
	030 Move X4, X31
	031 Call TimeSpan..ctor, X0, X1, X2, X3
	032 Move X0, [X31+8]
	033 Call DateTimeOffset.ValidateOffset, X0
	034 Move X0, X19
	035 Call DateTimeOffset.get_ClockDateTime, X0
	036 NotImplemented "Instruction LDRSH not yet implemented."
	037 Move X20, X0
	038 Move [X31+8], X31
	039 Add X0, X31, 8
	040 Move W1, W31
	041 Move W3, W31
	042 Move X4, X31
	043 Call TimeSpan..ctor, X0, X1, X2, X3
	044 Move X1, [X31+8]
	045 Move X0, X20
	046 Call DateTimeOffset.ValidateDate, X0, X1
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X30, [X31+16]
	050 Move X21, [X31+24]
	051 Add X31, X31, 48
	052 Return 
	053 Move X19, X0
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X0, X19
	056 Call 0x3EB2AD0
	057 Move X19, X0
	058 Move X0, 0xD97000
	059 Move X0, [X0+1400]
	060 Call 0x1C17D08
	061 Move X8, [X19]
	062 Move X1, [X8]
	063 Call 0x1C18270
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {89}
	068 Move X19, [X19]
	069 Call 0x3EB2AE0
	070 Move X0, 0xDB9000
	071 Move X0, [X0+736]
	072 Call 0x1C17D08
	073 Call 0x1C17F10
	074 Move X20, X0
	075 Move X0, 0xDC3000
	076 Move X0, [X0+3200]
	077 Call 0x1C17D08
	078 Move X1, X0
	079 Move X0, X20
	080 Move X2, X19
	081 Move X3, X31
	082 Call SerializationException..ctor, X0, X1, X2
	083 Move X0, 0xDC6000
	084 Move X0, [X0+2800]
	085 Call 0x1C17D08
	086 Move X1, X0
	087 Move X0, X20
	088 Call 0x1C17DEC
	089 Move W0, 8
	090 Call 0x3EB2AF0
	091 Move X8, [X19]
	092 Move [X0], X8
	093 Move X1, 0xB50000
	094 Add X1, X1, 3672
	095 Move X2, X31
	096 Call 0x3EB2B00
	097 Move X19, X0
	098 Call 0x3EB2AE0
	099 Move X0, X19
	100 Call 0x1D2D690
	101 Call 0x1991590

Method: System.Void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)

Disassembly:
	0x03365A00 CMP W0, 0x100
	0x03365A04 B.CS 0x3365A2C
	0x03365A08 ORN W8, W31, W0, 0x0
	0x03365A0C ANDS W31, W8, 0x60
	0x03365A10 B.EQ 0x3365A50
	0x03365A14 TBNZ X0, 0x3, 0x3365A74
	0x03365A18 LDP X20, X19, [X31 + 0x10]
	0x03365A1C MOVN W8, 0xA0
	0x03365A20 AND W0, W0, W8, 0x0
	0x03365A24 LDR X30, [X31], #0x20
	0x03365A28 RET
	0x03365A2C ADRP X0, 0xD96000
	0x03365A30 LDR X0, [X0 + 0x578]
	0x03365A34 MOV X19, X1
	0x03365A38 BL 0x1C16D08
	0x03365A3C BL 0x1C16F10
	0x03365A40 MOV X20, X0
	0x03365A44 ADRP X0, 0xDC3000
	0x03365A48 LDR X0, [X0 + 0x3E8]
	0x03365A4C B 0x3365A94
	0x03365A50 ADRP X0, 0xD96000
	0x03365A54 LDR X0, [X0 + 0x578]
	0x03365A58 MOV X19, X1
	0x03365A5C BL 0x1C16D08
	0x03365A60 BL 0x1C16F10
	0x03365A64 MOV X20, X0
	0x03365A68 ADRP X0, 0xDC3000
	0x03365A6C LDR X0, [X0 + 0x3F0]
	0x03365A70 B 0x3365A94
	0x03365A74 ADRP X0, 0xD96000
	0x03365A78 LDR X0, [X0 + 0x578]
	0x03365A7C MOV X19, X1
	0x03365A80 BL 0x1C16D08
	0x03365A84 BL 0x1C16F10
	0x03365A88 MOV X20, X0
	0x03365A8C ADRP X0, 0xDC5000
	0x03365A90 LDR X0, [X0 + 0xB20]
	0x03365A94 BL 0x1C16D08
	0x03365A98 MOV X1, X0
	0x03365A9C MOV X0, X20
	0x03365AA0 MOV X2, X19
	0x03365AA4 MOV X3, X31
	0x03365AA8 BL 0x330E16C
	0x03365AAC ADRP X0, 0xDC5000
	0x03365AB0 LDR X0, [X0 + 0xB28]
	0x03365AB4 BL 0x1C16D08
	0x03365AB8 MOV X1, X0
	0x03365ABC MOV X0, X20
	0x03365AC0 BL 0x1C16DEC
	0x03365AC4 SUB X31, X31, 0xD0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1078000
	006 Move W8, [X21+3713]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xDC6000
	014 Move X0, [X0+2808]
	015 Call 0x1C17CF4
	016 Move X0, 0xDC1000
	017 Move X0, [X0+152]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3713], W8
	021 Compare X19, 0
	022 JumpIfEqual {42}
	023 Move X8, 0xDC1000
	024 Move X8, [X8+152]
	025 Move X2, [X20]
	026 Move X21, 0xDC6000
	027 Move X0, X19
	028 Move X1, [X8]
	029 Move X21, [X21+2808]
	030 Move X3, X31
	031 Call SerializationInfo.AddValue, X0, X1, X2
	032 Move X1, [X21]
	033 NotImplemented "Instruction LDRH not yet implemented."
	034 Move X0, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X3, X31
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Call SerializationInfo.AddValue, X0, X1, X2
	041 Return 
	042 Move X0, 0xD94000
	043 Move X0, [X0+1320]
	044 Call 0x1C17D08
	045 Call 0x1C17F10
	046 Move X19, X0
	047 Move X0, 0xDB9000
	048 Move X0, [X0+728]
	049 Call 0x1C17D08
	050 Move X1, X0
	051 Move X0, X19
	052 Move X2, X31
	053 Call ArgumentNullException..ctor, X0, X1
	054 Move X0, 0xDC6000
	055 Move X0, [X0+2816]
	056 Call 0x1C17D08
	057 Move X1, X0
	058 Move X0, X19
	059 Call 0x1C17DEC

Method: System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)

Disassembly:
	0x03365AC8 STP X30, X27, [X31 + 0x80]
	0x03365ACC STP X26, X25, [X31 + 0x90]
	0x03365AD0 STP X24, X23, [X31 + 0xA0]
	0x03365AD4 STP X22, X21, [X31 + 0xB0]
	0x03365AD8 STP X20, X19, [X31 + 0xC0]
	0x03365ADC ADRP X27, 0x1077000
	0x03365AE0 ADRP X26, 0xD8F000
	0x03365AE4 LDRB W8, [X27 + 0xEC7]
	0x03365AE8 LDR X26, [X26 + 0x9F0]
	0x03365AEC MOV X19, X6
	0x03365AF0 MOV X20, X5
	0x03365AF4 MOV W21, W4
	0x03365AF8 MOV X22, X3
	0x03365AFC MOV X23, X2
	0x03365B00 MOV X24, X1
	0x03365B04 MOV X25, X0
	0x03365B08 TBNZ X8, 0x0, 0x3365B38
	0x03365B0C ADRP X0, 0xDC3000
	0x03365B10 LDR X0, [X0 + 0x588]
	0x03365B14 BL 0x1C16CF4
	0x03365B18 ADRP X0, 0xD8F000
	0x03365B1C LDR X0, [X0 + 0x9F0]
	0x03365B20 BL 0x1C16CF4
	0x03365B24 ADRP X0, 0xD90000
	0x03365B28 LDR X0, [X0 + 0x570]
	0x03365B2C BL 0x1C16CF4
	0x03365B30 MOVZ W8, 0x1
	0x03365B34 STRB W8, [X27 + 0xEC7]
	0x03365B38 LDR X0, [X26]
	0x03365B3C MOVI V0.2D, 0x0
	0x03365B40 STP V0, V0, [X31 + 0x60]
	0x03365B44 STP V0, V0, [X31 + 0x40]
	0x03365B48 STP V0, V0, [X31 + 0x20]
	0x03365B4C STP V0, V0, [X31]
	0x03365B50 ADRP X27, 0xD90000
	0x03365B54 LDR W8, [X0 + 0xE0]
	0x03365B58 LDR X27, [X27 + 0x570]
	0x03365B5C CBNZ W8, 0x3365B68
	0x03365B60 BL 0x1C16DFC
	0x03365B64 LDR X0, [X26]
	0x03365B68 LDR X8, [X0 + 0xB8]
	0x03365B6C ADRP X26, 0xDC3000
	0x03365B70 LDR X8, [X8 + 0x10]
	0x03365B74 STR X8, [X20]
	0x03365B78 LDR X0, [X27]
	0x03365B7C LDR W8, [X0 + 0xE0]
	0x03365B80 LDR X26, [X26 + 0x588]
	0x03365B84 CBNZ W8, 0x3365B90
	0x03365B88 BL 0x1C16DFC
	0x03365B8C LDR X0, [X27]
	0x03365B90 LDR X8, [X0 + 0xB8]
	0x03365B94 MOVI V0.2D, 0x0
	0x03365B98 ADD X0, X31, 0x0
	0x03365B9C MOV X1, X25
	0x03365BA0 LDR X8, [X8]
	0x03365BA4 MOV X2, X24
	0x03365BA8 MOV X3, X31
	0x03365BAC STR X8, [X19]
	0x03365BB0 STP V0, V0, [X31 + 0x60]
	0x03365BB4 STP V0, V0, [X31 + 0x40]
	0x03365BB8 STP V0, V0, [X31 + 0x20]
	0x03365BBC STP V0, V0, [X31]
	0x03365BC0 BL 0x33766A0
	0x03365BC4 LDR W8, [X31 + 0x24]
	0x03365BC8 LDR X0, [X26]
	0x03365BCC ORR W8, W8, 0x800
	0x03365BD0 STR W8, [X31 + 0x24]
	0x03365BD4 LDR W8, [X0 + 0xE0]
	0x03365BD8 CBNZ W8, 0x3365BE0
	0x03365BDC BL 0x1C16DFC
	0x03365BE0 ADD X5, X31, 0x0
	0x03365BE4 MOV X0, X25
	0x03365BE8 MOV X1, X24
	0x03365BEC MOV X2, X23
	0x03365BF0 MOV X3, X22
	0x03365BF4 MOV W4, W21
	0x03365BF8 BL 0x336B72C
	0x03365BFC TBZ X0, 0x0, 0x3365C10
	0x03365C00 LDR X8, [X31 + 0x38]
	0x03365C04 STR X8, [X20]
	0x03365C08 LDR X8, [X31 + 0x28]
	0x03365C0C STR X8, [X19]
	0x03365C10 LDP X20, X19, [X31 + 0xC0]
	0x03365C14 LDP X22, X21, [X31 + 0xB0]
	0x03365C18 LDP X24, X23, [X31 + 0xA0]
	0x03365C1C LDP X26, X25, [X31 + 0x90]
	0x03365C20 LDP X30, X27, [X31 + 0x80]
	0x03365C24 AND W0, W0, 0x1
	0x03365C28 ADD X31, X31, 0xD0
	0x03365C2C RET
	0x03365C30 SUB X31, X31, 0x20
	0x03365C34 STP X31, X30, [X31 + 0x8]
	0x03365C38 MOV X1, X0
	0x03365C3C ADD X0, X31, 0x0
	0x03365C40 STR X31, [X31]
	0x03365C44 BL 0x3364080
	0x03365C48 LDP X0, X1, [X31]
	0x03365C4C LDR X30, [X31 + 0x10]
	0x03365C50 ADD X31, X31, 0x20
	0x03365C54 RET
	0x03365C58 SUB X31, X31, 0x40
	0x03365C5C STP X1, X30, [X31 + 0x18]
	0x03365C60 STP X20, X19, [X31 + 0x30]
	0x03365C64 ADRP X19, 0x1077000
	0x03365C68 STP X3, X0, [X31 + 0x8]
	0x03365C6C STR X2, [X31]
	0x03365C70 ADRP X20, 0xD90000
	0x03365C74 LDRB W8, [X19 + 0xE8D]
	0x03365C78 LDR X20, [X20 + 0xA58]
	0x03365C7C TBNZ X8, 0x0, 0x3365CA0
	0x03365C80 ADRP X0, 0xD90000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1078000
	007 Move W8, [X21+3714]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {37}
	014 Move X0, 0xDC0000
	015 Move X0, [X0+3896]
	016 Call 0x1C17CF4
	017 Move X0, 0xD90000
	018 Move X0, [X0+2544]
	019 Call 0x1C17CF4
	020 Move X0, 0xDB6000
	021 Move X0, [X0+3448]
	022 Call 0x1C17CF4
	023 Move X0, 0xD93000
	024 Move X0, [X0+1576]
	025 Call 0x1C17CF4
	026 Move X0, 0xD8F000
	027 Move X0, [X0+1728]
	028 Call 0x1C17CF4
	029 Move X0, 0xDC6000
	030 Move X0, [X0+2808]
	031 Call 0x1C17CF4
	032 Move X0, 0xDC1000
	033 Move X0, [X0+152]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X21+3714], W8
	037 Compare X20, 0
	038 JumpIfEqual {103}
	039 Move X8, 0xD8F000
	040 Move X8, [X8+1728]
	041 Move X22, 0xDC1000
	042 Move X0, [X8]
	043 Move X8, 0xDC0000
	044 Move X8, [X8+3896]
	045 Move W9, [X0+224]
	046 Move X21, [X8]
	047 Move X22, [X22+152]
	048 Compare W9, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 Move X0, X21
	052 Move X1, X31
	053 Call Type.GetTypeFromHandle, X0
	054 Move X1, [X22]
	055 Move X2, X0
	056 Move X0, X20
	057 Move X3, X31
	058 Call SerializationInfo.GetValue, X0, X1, X2
	059 Compare X0, 0
	060 JumpIfEqual {101}
	061 Move X8, 0xD90000
	062 Move X8, [X8+2544]
	063 Move X9, [X0]
	064 Move X1, [X8]
	065 Move X8, [X9+64]
	066 Move X9, [X1+64]
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move X21, 0xDB6000
	069 Move X22, 0xDC6000
	070 Move X21, [X21+3448]
	071 Move X22, [X22+2808]
	072 Call 0x1C17E08
	073 Move X8, [X0]
	074 Move X1, X31
	075 Move [X19], X8
	076 Move X0, [X21]
	077 Call Type.GetTypeFromHandle, X0
	078 Move X1, [X22]
	079 Move X2, X0
	080 Move X0, X20
	081 Move X3, X31
	082 Call SerializationInfo.GetValue, X0, X1, X2
	083 Compare X0, 0
	084 JumpIfEqual {101}
	085 Move X8, 0xD93000
	086 Move X8, [X8+1576]
	087 Move X9, [X0]
	088 Move X1, [X8]
	089 Move X8, [X9+64]
	090 Move X9, [X1+64]
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Call 0x1C17E08
	093 NotImplemented "Instruction LDRH not yet implemented."
	094 Move X22, [X31+16]
	095 Move X21, [X31+24]
	096 NotImplemented "Instruction STRH not yet implemented."
	097 Move X20, [X31+32]
	098 Move X19, [X31+40]
	099 Move X30, [X31+48]
	100 Return 
	101 Call 0x1C17F20
	102 Call 0x1C181E0
	103 Move X0, 0xD94000
	104 Move X0, [X0+1320]
	105 Call 0x1C17D08
	106 Call 0x1C17F10
	107 Move X19, X0
	108 Move X0, 0xDB9000
	109 Move X0, [X0+728]
	110 Call 0x1C17D08
	111 Move X1, X0
	112 Move X0, X19
	113 Move X2, X31
	114 Call ArgumentNullException..ctor, X0, X1
	115 Move X0, 0xDC6000
	116 Move X0, [X0+2824]
	117 Call 0x1C17D08
	118 Move X1, X0
	119 Move X0, X19
	120 Call 0x1C17DEC

Method: System.Int32 GetHashCode()

Disassembly:
	0x03365C84 LDR X0, [X0 + 0xA58]
	0x03365C88 BL 0x1C16CF4
	0x03365C8C ADRP X0, 0xD8F000
	0x03365C90 LDR X0, [X0 + 0x9F0]
	0x03365C94 BL 0x1C16CF4
	0x03365C98 MOVZ W8, 0x1
	0x03365C9C STRB W8, [X19 + 0xE8D]
	0x03365CA0 LDR X0, [X20]
	0x03365CA4 ADRP X20, 0xD8F000
	0x03365CA8 LDR W8, [X0 + 0xE0]
	0x03365CAC LDR X20, [X20 + 0x9F0]
	0x03365CB0 CBNZ W8, 0x3365CB8
	0x03365CB4 BL 0x1C16DFC
	0x03365CB8 ADD X0, X31, 0x10
	0x03365CBC BL 0x3364200
	0x03365CC0 MOV X19, X0
	0x03365CC4 ADD X0, X31, 0x0
	0x03365CC8 BL 0x3364200
	0x03365CCC LDR X8, [X20]
	0x03365CD0 MOV X20, X0
	0x03365CD4 LDR W9, [X8 + 0xE0]
	0x03365CD8 CBNZ W9, 0x3365CE4
	0x03365CDC MOV X0, X8
	0x03365CE0 BL 0x1C16DFC
	0x03365CE4 MOV X0, X19
	0x03365CE8 MOV X1, X20
	0x03365CEC LDP X20, X19, [X31 + 0x30]
	0x03365CF0 LDR X30, [X31 + 0x20]
	0x03365CF4 ADD X31, X31, 0x40
	0x03365CF8 B 0x3363078
	0x03365CFC SUB X31, X31, 0x50
	0x03365D00 STR X30, [X31 + 0x30]
	0x03365D04 STP X20, X19, [X31 + 0x40]
	0x03365D08 ADRP X20, 0x1077000
	0x03365D0C ADRP X19, 0xD90000
	0x03365D10 LDRB W8, [X20 + 0xE8E]
	0x03365D14 LDR X19, [X19 + 0x570]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1078000
	007 Move X20, 0xD91000
	008 Move W8, [X21+3715]
	009 Move X20, [X20+2648]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xD91000
	016 Move X0, [X0+2648]
	017 Call 0x1C17CF4
	018 Move X0, 0xD90000
	019 Move X0, [X0+2544]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3715], W8
	023 Move X0, [X20]
	024 Move X20, 0xD90000
	025 Move W8, [X0+224]
	026 Move X20, [X20+2544]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Call DateTimeOffset.get_UtcDateTime, X0
	032 Move X8, [X20]
	033 Move [X31+8], X0
	034 Move W9, [X8+224]
	035 Compare W9, 0
	036 JumpIfNotEqual {39}
	037 Move X0, X8
	038 Call 0x1C17DFC
	039 Add X0, X31, 8
	040 Call DateTime.GetHashCode, X0
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X30, [X31+16]
	044 Move X21, [X31+24]
	045 Add X31, X31, 48
	046 Return X0

Method: System.DateTimeOffset Parse(System.String input)

Disassembly:
	0x03365D18 TBNZ X8, 0x0, 0x3365D3C
	0x03365D1C ADRP X0, 0xD90000
	0x03365D20 LDR X0, [X0 + 0xA58]
	0x03365D24 BL 0x1C16CF4
	0x03365D28 ADRP X0, 0xD90000
	0x03365D2C LDR X0, [X0 + 0x570]
	0x03365D30 BL 0x1C16CF4
	0x03365D34 MOVZ W8, 0x1
	0x03365D38 STRB W8, [X20 + 0xE8E]
	0x03365D3C LDR X0, [X19]
	0x03365D40 ADRP X20, 0xD90000
	0x03365D44 LDR W8, [X0 + 0xE0]
	0x03365D48 LDR X20, [X20 + 0xA58]
	0x03365D4C CBNZ W8, 0x3365D58
	0x03365D50 BL 0x1C16DFC
	0x03365D54 LDR X0, [X19]
	0x03365D58 LDR X8, [X0 + 0xB8]
	0x03365D5C ADD X0, X31, 0x20
	0x03365D60 MOV X1, X31
	0x03365D64 LDR X2, [X8]
	0x03365D68 STP X31, X31, [X31 + 0x20]
	0x03365D6C BL 0x3363D54
	0x03365D70 LDR X8, [X20]
	0x03365D74 LDR V0, [X31 + 0x2]
	0x03365D78 MOVZ X1, 0x3FFF
	0x03365D7C MOVK X1, 0xF4370000
	0x03365D80 LDR X8, [X8 + 0xB8]
	0x03365D84 MOVK X1, 0x2875
	0x03365D88 ADD X0, X31, 0x10
	0x03365D8C MOVK X1, 0x2BCA0000
	0x03365D90 STR V0, [X8]
	0x03365D94 LDR X8, [X19]
	0x03365D98 LDR X8, [X8 + 0xB8]
	0x03365D9C LDR X2, [X8]
	0x03365DA0 STP X31, X31, [X31 + 0x10]
	0x03365DA4 BL 0x3363D54
	0x03365DA8 LDR X8, [X20]
	0x03365DAC LDR V0, [X31 + 0x1]
	0x03365DB0 MOVZ X1, 0x8000
	0x03365DB4 MOVK X1, 0xF7B50000
	0x03365DB8 LDR X8, [X8 + 0xB8]
	0x03365DBC MOVK X1, 0x7FF5
	0x03365DC0 ADD X0, X31, 0x0
	0x03365DC4 MOVK X1, 0x89F0000
	0x03365DC8 STR V0, [X8 + 0x1]
	0x03365DCC LDR X8, [X19]
	0x03365DD0 LDR X8, [X8 + 0xB8]
	0x03365DD4 LDR X2, [X8]
	0x03365DD8 STP X31, X31, [X31]
	0x03365DDC BL 0x3363D54
	0x03365DE0 LDR X8, [X20]
	0x03365DE4 LDR V0, [X31]
	0x03365DE8 LDP X20, X19, [X31 + 0x40]
	0x03365DEC LDR X30, [X31 + 0x30]
	0x03365DF0 LDR X8, [X8 + 0xB8]
	0x03365DF4 STR V0, [X8 + 0x2]
	0x03365DF8 ADD X31, X31, 0x50
	0x03365DFC RET
	0x03365E00 STP X30, X21, [X31 - 0x20]!
	0x03365E04 STP X20, X19, [X31 + 0x10]
	0x03365E08 ADRP X20, 0x1077000
	0x03365E0C ADRP X21, 0xDC5000
	0x03365E10 LDRB W8, [X20 + 0xE8F]
	0x03365E14 LDR X21, [X21 + 0xB30]
	0x03365E18 MOV X19, X0
	0x03365E1C TBNZ X8, 0x0, 0x3365E34
	0x03365E20 ADRP X0, 0xDC5000
	0x03365E24 LDR X0, [X0 + 0xB30]
	0x03365E28 BL 0x1C16CF4
	0x03365E2C MOVZ W8, 0x1
	0x03365E30 STRB W8, [X20 + 0xE8F]
	0x03365E34 LDR X1, [X21]
	0x03365E38 MOV X0, X19
	0x03365E3C MOV X2, X31
	0x03365E40 BL 0x3316338
	0x03365E44 MOVZ W8, 0x12
	0x03365E48 MOVK W8, 0x80020000
	0x03365E4C STR W8, [X19 + 0x60]
	0x03365E50 LDP X20, X19, [X31 + 0x10]
	0x03365E54 LDP X30, X21, [X31], #0x20
	0x03365E58 RET
	0x03365E5C MOV X4, X31
	0x03365E60 B 0x3316380

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X20, 0x1078000
	008 Move W8, [X20+3716]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0xDC4000
	015 Move X0, [X0+808]
	016 Call 0x1C17CF4
	017 Move X0, 0xDC4000
	018 Move X0, [X0+1416]
	019 Call 0x1C17CF4
	020 Move X0, 0xD90000
	021 Move X0, [X0+2544]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3716], W8
	025 Move [X31+40], X31
	026 Compare X19, 0
	027 JumpIfNotEqual {31}
	028 Move W0, 49
	029 Move X1, X31
	030 Call ThrowHelper.ThrowArgumentNullException, X0
	031 Move X20, 0x1075000
	032 Move W8, [X20+1890]
	033 Compare W8, 0
	034 JumpIfNotEqual {40}
	035 Move X0, 0xDB6000
	036 Move X0, [X0+656]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X20+1890], W8
	040 Move X21, 0xDC4000
	041 Move X21, [X21+808]
	042 Compare X19, 0
	043 JumpIfEqual {49}
	044 Move X0, X19
	045 Move X1, X31
	046 Call String.GetRawStringData, X0
	047 Move W20, [X19+16]
	048 Move X19, X0
	049 Move X20, X31
	050 Move X0, [X21]
	051 Move X21, 0xDC4000
	052 Move W8, [X0+224]
	053 Move X21, [X21+1416]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X22, 0xD90000
	058 Move X22, [X22+2544]
	059 Move X0, X31
	060 Call DateTimeFormatInfo.get_CurrentInfo
	061 Move X8, [X21]
	062 Move X21, X0
	063 Move W9, [X8+224]
	064 Compare W9, 0
	065 JumpIfNotEqual {68}
	066 Move X0, X8
	067 Call 0x1C17DFC
	068 Add X4, X31, 40
	069 Move X0, X19
	070 Move X1, X20
	071 Move X2, X21
	072 Move W3, W31
	073 Call DateTimeParse.Parse, X0, X1, X2, X3
	074 Move X8, [X22]
	075 Move [X31+8], X0
	076 Move W9, [X8+224]
	077 Compare W9, 0
	078 JumpIfNotEqual {81}
	079 Move X0, X8
	080 Call 0x1C17DFC
	081 Add X0, X31, 8
	082 Call DateTime.get_Ticks, X0
	083 Move X2, [X31+40]
	084 Move X1, X0
	085 Add X0, X31, 16
	086 Move [X31+16], X31
	087 Move [X31+24], X31
	088 Call DateTimeOffset..ctor, X0, X1, X2
	089 Move X0, [X31+16]
	090 Move X1, [X31+24]
	091 Move X20, [X31+64]
	092 Move X19, [X31+72]
	093 Move X22, [X31+48]
	094 Move X21, [X31+56]
	095 Move X30, [X31+32]
	096 Add X31, X31, 80
	097 Return X0

Method: System.Int64 ToUnixTimeSeconds()

Disassembly:
	0x03365F6C ADRP X21, 0x1077000
	0x03365F70 LDRB W8, [X21 + 0xE91]
	0x03365F74 MOV X20, X1
	0x03365F78 MOV X19, X0
	0x03365F7C TBNZ X8, 0x0, 0x3365F94
	0x03365F80 ADRP X0, 0xD91000
	0x03365F84 LDR X0, [X0 + 0x978]
	0x03365F88 BL 0x1C16CF4
	0x03365F8C MOVZ W8, 0x1
	0x03365F90 STRB W8, [X21 + 0xE91]
	0x03365F94 CBZ X20, 0x3366000
	0x03365F98 ADRP X8, 0xD91000
	0x03365F9C LDR X8, [X8 + 0x978]
	0x03365FA0 LDR X9, [X20]
	0x03365FA4 LDR X8, [X8]
	0x03365FA8 CMP X9, X8
	0x03365FAC B.NE 0x3366020
	0x03365FB0 MOV X0, X20
	0x03365FB4 BL 0x1C16E08
	0x03365FB8 LDR V0, [X0]
	0x03365FBC LDR V1, [X19]
	0x03365FC0 FCMP D1, D0
	0x03365FC4 B.MI 0x3366008
	0x03365FC8 B.GT 0x3366000
	0x03365FCC FCMP D1, D0
	0x03365FD0 B.EQ 0x3366018
	0x03365FD4 FMOV X8, D1
	0x03365FD8 AND X9, X8, 0x7FFFFFFF
	0x03365FDC MOVZ X8, 0x1
	0x03365FE0 MOVK X8, 0x7FF00000
	0x03365FE4 CMP X9, X8
	0x03365FE8 B.CC 0x3366000
	0x03365FEC FMOV X9, D0
	0x03365FF0 AND X9, X9, 0x7FFFFFFF
	0x03365FF4 CMP X9, X8
	0x03365FF8 CSINV W0, W31, W31, CS
	0x03365FFC B 0x336600C
	0x03366000 MOVZ W0, 0x1
	0x03366004 B 0x336600C
	0x03366008 MOVN W0, 0x0
	0x0336600C LDP X20, X19, [X31 + 0x10]
	0x03366010 LDP X30, X21, [X31], #0x20
	0x03366014 RET
	0x03366018 MOV W0, W31
	0x0336601C B 0x336600C
	0x03366020 ADRP X0, 0xD95000
	0x03366024 LDR X0, [X0 + 0x578]
	0x03366028 BL 0x1C16D08
	0x0336602C BL 0x1C16F10

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1078000
	007 Move X20, 0xD91000
	008 Move W8, [X21+3717]
	009 Move X20, [X20+2648]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xD91000
	016 Move X0, [X0+2648]
	017 Call 0x1C17CF4
	018 Move X0, 0xD90000
	019 Move X0, [X0+2544]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3717], W8
	023 Move X0, [X20]
	024 Move X20, 0xD90000
	025 Move W8, [X0+224]
	026 Move X20, [X20+2544]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Call DateTimeOffset.get_UtcDateTime, X0
	032 Move X8, [X20]
	033 Move [X31+8], X0
	034 Move W9, [X8+224]
	035 Compare W9, 0
	036 JumpIfNotEqual {39}
	037 Move X0, X8
	038 Call 0x1C17DFC
	039 Add X0, X31, 8
	040 Call DateTime.get_Ticks, X0
	041 Move X8, 0x42BD
	042 NotImplemented "Instruction MOVK not yet implemented."
	043 NotImplemented "Instruction MOVK not yet implemented."
	044 NotImplemented "Instruction MOVK not yet implemented."
	045 NotImplemented "Instruction SMULH not yet implemented."
	046 Add X8, X8, X0
	047 NotImplemented "Instruction SBFM not yet implemented."
	048 Add X8, X9, X8
	049 Move TEMP, 0xF6FF
	050 Not TEMP
	051 Move X9, TEMP
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X30, [X31+16]
	055 Move X21, [X31+24]
	056 NotImplemented "Instruction MOVK not yet implemented."
	057 NotImplemented "Instruction MOVK not yet implemented."
	058 Add X0, X8, X9
	059 Add X31, X31, 48
	060 Return X0

Method: System.String ToString()

Disassembly:
	0x03366030 MOV X19, X0
	0x03366034 ADRP X0, 0xDC4000
	0x03366038 LDR X0, [X0 + 0xB40]
	0x0336603C BL 0x1C16D08
	0x03366040 MOV X1, X0
	0x03366044 MOV X0, X19
	0x03366048 MOV X2, X31
	0x0336604C BL 0x3314A68
	0x03366050 ADRP X0, 0xDC4000
	0x03366054 LDR X0, [X0 + 0xB48]
	0x03366058 BL 0x1C16D08
	0x0336605C MOV X1, X0
	0x03366060 MOV X0, X19
	0x03366064 BL 0x1C16DEC
	0x03366068 LDR V1, [X0]
	0x0336606C FCMP D1, D0
	0x03366070 B.PL 0x336607C
	0x03366074 MOVN W0, 0x0
	0x03366078 RET
	0x0336607C B.LE 0x3366088
	0x03366080 MOVZ W0, 0x1
	0x03366084 RET
	0x03366088 FCMP D1, D0
	0x0336608C B.NE 0x3366098
	0x03366090 MOV W0, W31
	0x03366094 RET
	0x03366098 FMOV X8, D1
	0x0336609C AND X9, X8, 0x7FFFFFFF
	0x033660A0 MOVZ X8, 0x1
	0x033660A4 MOVK X8, 0x7FF00000
	0x033660A8 CMP X9, X8
	0x033660AC B.CC 0x3366080
	0x033660B0 FMOV X9, D0
	0x033660B4 AND X9, X9, 0x7FFFFFFF
	0x033660B8 CMP X9, X8
	0x033660BC CSINV W0, W31, W31, CS
	0x033660C0 RET
	0x033660C4 STP X30, X21, [X31 - 0x20]!
	0x033660C8 STP X20, X19, [X31 + 0x10]
	0x033660CC ADRP X21, 0x1076000
	0x033660D0 LDRB W8, [X21 + 0xE92]
	0x033660D4 MOV X20, X1
	0x033660D8 MOV X19, X0
	0x033660DC TBNZ X8, 0x0, 0x33660F4
	0x033660E0 ADRP X0, 0xD90000
	0x033660E4 LDR X0, [X0 + 0x978]
	0x033660E8 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1077000
	007 Move X20, 0xD90000
	008 Move W8, [X21+3718]
	009 Move X20, [X20+2648]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xDC3000
	016 Move X0, [X0+1352]
	017 Call 0x1C17CF4
	018 Move X0, 0xD90000
	019 Move X0, [X0+2648]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3718], W8
	023 Move X0, [X20]
	024 Move X21, 0xDC3000
	025 Move W8, [X0+224]
	026 Move X21, [X21+1352]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Call DateTimeOffset.get_ClockDateTime, X0
	032 NotImplemented "Instruction LDRSH not yet implemented."
	033 Move X20, X0
	034 Add X0, X31, 8
	035 Move W1, W31
	036 Move W3, W31
	037 Move X4, X31
	038 Move [X31+8], X31
	039 Call TimeSpan..ctor, X0, X1, X2, X3
	040 Move X0, [X21]
	041 Move X19, [X31+8]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move X0, X20
	047 Move X1, X31
	048 Move X2, X31
	049 Move X3, X19
	050 Call DateTimeFormat.Format, X0, X1, X2, X3
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X30, [X31+16]
	054 Move X21, [X31+24]
	055 Add X31, X31, 48
	056 Return X0

Method: System.String ToString(System.IFormatProvider formatProvider)

Disassembly:
	0x0336639C ADRP X0, 0xDC2000
	0x033663A0 LDR X0, [X0 + 0x78]
	0x033663A4 BL 0x1C16CF4
	0x033663A8 MOVZ W8, 0x1
	0x033663AC STRB W8, [X23 + 0xE96]
	0x033663B0 LDR V8, [X21]
	0x033663B4 MOV X0, X20
	0x033663B8 MOV X1, X31
	0x033663BC BL 0x333ACEC
	0x033663C0 LDR X8, [X22]
	0x033663C4 MOV X20, X0
	0x033663C8 LDR W9, [X8 + 0xE0]
	0x033663CC CBNZ W9, 0x33663D8
	0x033663D0 MOV X0, X8
	0x033663D4 BL 0x1C16DFC
	0x033663D8 MOV X0, X19
	0x033663DC MOV X1, X20
	0x033663E0 LDP X20, X19, [X31 + 0x30]
	0x033663E4 LDP X22, X21, [X31 + 0x20]
	0x033663E8 LDP X30, X23, [X31 + 0x10]
	0x033663EC MOV V0.16B, V8.16B
	0x033663F0 MOV X2, X31
	0x033663F4 LDR V8, [X31], #0x40
	0x033663F8 B 0x3382374
	0x033663FC STR D8, [X31 - 0x60]!
	0x03366400 STP X30, X27, [X31 + 0x10]
	0x03366404 STP X26, X25, [X31 + 0x20]
	0x03366408 STP X24, X23, [X31 + 0x30]
	0x0336640C STP X22, X21, [X31 + 0x40]
	0x03366410 STP X20, X19, [X31 + 0x50]
	0x03366414 ADRP X27, 0x1076000
	0x03366418 ADRP X26, 0xDC2000
	0x0336641C LDRB W8, [X27 + 0xE97]
	0x03366420 LDR X26, [X26 + 0x78]
	0x03366424 MOV X24, X6
	0x03366428 MOV X21, X5
	0x0336642C MOV X23, X4
	0x03366430 MOV X19, X3
	0x03366434 MOV X20, X2
	0x03366438 MOV X22, X1
	0x0336643C MOV X25, X0
	0x03366440 TBNZ X8, 0x0, 0x3366458
	0x03366444 ADRP X0, 0xDC2000
	0x03366448 LDR X0, [X0 + 0x78]
	0x0336644C BL 0x1C16CF4
	0x03366450 MOVZ W8, 0x1
	0x03366454 STRB W8, [X27 + 0xE97]
	0x03366458 LDR V8, [X25]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1077000
	007 Move X21, 0xD90000
	008 Move W8, [X22+3719]
	009 Move X21, [X21+2648]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xDC3000
	017 Move X0, [X0+1352]
	018 Call 0x1C17CF4
	019 Move X0, 0xD90000
	020 Move X0, [X0+2648]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+3719], W8
	024 Move X0, [X21]
	025 Move X22, 0xDC3000
	026 Move W8, [X0+224]
	027 Move X22, [X22+1352]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Call DateTimeOffset.get_ClockDateTime, X0
	033 NotImplemented "Instruction LDRSH not yet implemented."
	034 Move X21, X0
	035 Add X0, X31, 8
	036 Move W1, W31
	037 Move W3, W31
	038 Move X4, X31
	039 Move [X31+8], X31
	040 Call TimeSpan..ctor, X0, X1, X2, X3
	041 Move X0, [X22]
	042 Move X20, [X31+8]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X21
	048 Move X1, X31
	049 Move X2, X19
	050 Move X3, X20
	051 Call DateTimeFormat.Format, X0, X1, X2, X3
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X22, [X31+16]
	055 Move X21, [X31+24]
	056 Move X30, [X31+48]
	057 Return X0

Method: System.String ToString(System.String format, System.IFormatProvider formatProvider)

Disassembly:
	0x0336645C MOV X0, X24
	0x03366460 MOV X1, X31
	0x03366464 BL 0x333ACEC
	0x03366468 LDR X8, [X26]
	0x0336646C MOV X24, X0
	0x03366470 LDR W9, [X8 + 0xE0]
	0x03366474 CBNZ W9, 0x3366480
	0x03366478 MOV X0, X8
	0x0336647C BL 0x1C16DFC
	0x03366480 MOV X0, X23
	0x03366484 MOV X1, X21
	0x03366488 MOV X2, X24
	0x0336648C MOV X3, X22
	0x03366490 MOV X4, X20
	0x03366494 MOV X5, X19
	0x03366498 LDP X20, X19, [X31 + 0x50]
	0x0336649C LDP X22, X21, [X31 + 0x40]
	0x033664A0 LDP X24, X23, [X31 + 0x30]
	0x033664A4 LDP X26, X25, [X31 + 0x20]
	0x033664A8 LDP X30, X27, [X31 + 0x10]
	0x033664AC MOV V0.16B, V8.16B
	0x033664B0 MOV X6, X31
	0x033664B4 LDR V8, [X31], #0x60
	0x033664B8 B 0x33827A0
	0x033664BC STP X30, X21, [X31 - 0x20]!
	0x033664C0 STP X20, X19, [X31 + 0x10]
	0x033664C4 ADRP X20, 0x1076000
	0x033664C8 LDRB W8, [X20 + 0xE98]
	0x033664CC MOV X19, X0
	0x033664D0 TBNZ X8, 0x0, 0x33664E8
	0x033664D4 ADRP X0, 0xDC2000
	0x033664D8 LDR X0, [X0 + 0x78]
	0x033664DC BL 0x1C16CF4
	0x033664E0 MOVZ W8, 0x1
	0x033664E4 STRB W8, [X20 + 0xE98]
	0x033664E8 CBNZ X19, 0x33664F8
	0x033664EC MOVZ W0, 0x30
	0x033664F0 MOV X1, X31
	0x033664F4 BL 0x338F3E0
	0x033664F8 ADRP X20, 0x1073000
	0x033664FC LDRB W8, [X20 + 0x762]
	0x03366500 CBNZ W8, 0x3366518
	0x03366504 ADRP X0, 0xDB4000
	0x03366508 LDR X0, [X0 + 0x290]
	0x0336650C BL 0x1C16CF4
	0x03366510 MOVZ W8, 0x1
	0x03366514 STRB W8, [X20 + 0x762]
	0x03366518 ADRP X21, 0xDC2000
	0x0336651C LDR X21, [X21 + 0x78]
	0x03366520 CBZ X19, 0x336653C
	0x03366524 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x1077000
	009 Move X22, 0xD90000
	010 Move W8, [X23+3720]
	011 Move X22, [X22+2648]
	012 Move X19, X2
	013 Move X20, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xDC3000
	020 Move X0, [X0+1352]
	021 Call 0x1C17CF4
	022 Move X0, 0xD90000
	023 Move X0, [X0+2648]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+3720], W8
	027 Move X0, [X22]
	028 Move X23, 0xDC3000
	029 Move W8, [X0+224]
	030 Move X23, [X23+1352]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X21
	035 Call DateTimeOffset.get_ClockDateTime, X0
	036 NotImplemented "Instruction LDRSH not yet implemented."
	037 Move X22, X0
	038 Add X0, X31, 8
	039 Move W1, W31
	040 Move W3, W31
	041 Move X4, X31
	042 Move [X31+8], X31
	043 Call TimeSpan..ctor, X0, X1, X2, X3
	044 Move X0, [X23]
	045 Move X21, [X31+8]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move X0, X22
	051 Move X1, X20
	052 Move X2, X19
	053 Move X3, X21
	054 Call DateTimeFormat.Format, X0, X1, X2, X3
	055 Move X20, [X31+48]
	056 Move X19, [X31+56]
	057 Move X22, [X31+32]
	058 Move X21, [X31+40]
	059 Move X30, [X31+16]
	060 Move X23, [X31+24]
	061 Add X31, X31, 64
	062 Return X0

Method: System.Boolean TryFormat(System.Span`1<System.Char> destination, out System.Int32 charsWritten, System.ReadOnlySpan`1<System.Char> format = null, System.IFormatProvider formatProvider = null)

Disassembly:
	0x03366528 MOV X1, X31
	0x0336652C BL 0x3225708
	0x03366530 LDR W20, [X19 + 0x10]
	0x03366534 MOV X19, X0
	0x03366538 B 0x3366540
	0x0336653C MOV X20, X31
	0x03366540 MOV X0, X31
	0x03366544 BL 0x333AE98
	0x03366548 LDR X8, [X21]
	0x0336654C MOV X21, X0
	0x03366550 LDR W9, [X8 + 0xE0]
	0x03366554 CBNZ W9, 0x3366560
	0x03366558 MOV X0, X8
	0x0336655C BL 0x1C16DFC
	0x03366560 MOV X0, X19
	0x03366564 MOV X1, X20
	0x03366568 LDP X20, X19, [X31 + 0x10]
	0x0336656C MOVZ W2, 0xE7
	0x03366570 MOV X3, X21
	0x03366574 MOV X4, X31
	0x03366578 LDP X30, X21, [X31], #0x20
	0x0336657C B 0x338A8F0
	0x03366580 STR X30, [X31 - 0x30]!
	0x03366584 STP X22, X21, [X31 + 0x10]
	0x03366588 STP X20, X19, [X31 + 0x20]
	0x0336658C ADRP X21, 0x1076000
	0x03366590 LDRB W8, [X21 + 0xE99]
	0x03366594 MOV X19, X1
	0x03366598 MOV X20, X0
	0x0336659C TBNZ X8, 0x0, 0x33665B4
	0x033665A0 ADRP X0, 0xDC2000
	0x033665A4 LDR X0, [X0 + 0x78]
	0x033665A8 BL 0x1C16CF4
	0x033665AC MOVZ W8, 0x1
	0x033665B0 STRB W8, [X21 + 0xE99]
	0x033665B4 CBNZ X20, 0x33665C4
	0x033665B8 MOVZ W0, 0x30
	0x033665BC MOV X1, X31
	0x033665C0 BL 0x338F3E0
	0x033665C4 ADRP X21, 0x1073000
	0x033665C8 LDRB W8, [X21 + 0x762]
	0x033665CC CBNZ W8, 0x33665E4
	0x033665D0 ADRP X0, 0xDB4000
	0x033665D4 LDR X0, [X0 + 0x290]
	0x033665D8 BL 0x1C16CF4
	0x033665DC MOVZ W8, 0x1
	0x033665E0 STRB W8, [X21 + 0x762]
	0x033665E4 ADRP X22, 0xDC2000
	0x033665E8 LDR X22, [X22 + 0x78]
	0x033665EC CBZ X20, 0x3366608
	0x033665F0 MOV X0, X20
	0x033665F4 MOV X1, X31
	0x033665F8 BL 0x3225708
	0x033665FC LDR W21, [X20 + 0x10]
	0x03366600 MOV X20, X0
	0x03366604 B 0x336660C
	0x03366608 MOV X21, X31
	0x0336660C MOV X0, X19
	0x03366610 MOV X1, X31
	0x03366614 BL 0x333ACEC
	0x03366618 LDR X8, [X22]
	0x0336661C MOV X19, X0
	0x03366620 LDR W9, [X8 + 0xE0]
	0x03366624 CBNZ W9, 0x3366630

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X27, 0x1077000
	013 Move X26, 0xD90000
	014 Move W8, [X27+3721]
	015 Move X26, [X26+2648]
	016 Move X19, X6
	017 Move X20, X5
	018 Move X21, X4
	019 Move X22, X3
	020 Move X23, X2
	021 Move X24, X1
	022 Move X25, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {35}
	027 Move X0, 0xDC3000
	028 Move X0, [X0+1352]
	029 Call 0x1C17CF4
	030 Move X0, 0xD90000
	031 Move X0, [X0+2648]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X27+3721], W8
	035 Move X0, [X26]
	036 Move X27, 0xDC3000
	037 Move W8, [X0+224]
	038 Move X27, [X27+1352]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X25
	043 Call DateTimeOffset.get_ClockDateTime, X0
	044 NotImplemented "Instruction LDRSH not yet implemented."
	045 Move X26, X0
	046 Add X0, X31, 8
	047 Move W1, W31
	048 Move W3, W31
	049 Move X4, X31
	050 Move [X31+8], X31
	051 Call TimeSpan..ctor, X0, X1, X2, X3
	052 Move X0, [X27]
	053 Move X25, [X31+8]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move X0, X26
	059 Move X1, X24
	060 Move X2, X23
	061 Move X3, X22
	062 Move X4, X21
	063 Move X5, X20
	064 Move X6, X19
	065 Move X7, X25
	066 Call DateTimeFormat.TryFormat, X0, X1, X2, X3, X4, X5
	067 Move X20, [X31+80]
	068 Move X19, [X31+88]
	069 Move X22, [X31+64]
	070 Move X21, [X31+72]
	071 Move X24, [X31+48]
	072 Move X23, [X31+56]
	073 Move X26, [X31+32]
	074 Move X25, [X31+40]
	075 Move X30, [X31+16]
	076 Move X27, [X31+24]
	077 And W0, W0, 1
	078 Add X31, X31, 96
	079 Return X0

Method: System.Boolean TryParseExact(System.String input, System.String[] formats, System.IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out System.DateTimeOffset result)

Disassembly:
	0x03366834 TBNZ X0, 0x0, 0x3366A48
	0x03366838 MOV X0, X21
	0x0336683C MOV X1, X20
	0x03366840 MOV X2, X31
	0x03366844 BL 0x337713C
	0x03366848 CBZ X22, 0x3366A6C
	0x0336684C ADRP X26, 0x1073000
	0x03366850 LDRB W8, [X26 + 0x762]
	0x03366854 LDR X23, [X22 + 0x70]
	0x03366858 MOV X20, X0
	0x0336685C MOV X21, X1
	0x03366860 CBZ W8, 0x3366880
	0x03366864 CBZ X23, 0x3366898
	0x03366868 MOV X0, X23
	0x0336686C MOV X1, X31
	0x03366870 BL 0x3225708
	0x03366874 LDR W23, [X23 + 0x10]
	0x03366878 MOV X24, X0
	0x0336687C B 0x336689C
	0x03366880 ADRP X0, 0xDB4000
	0x03366884 LDR X0, [X0 + 0x290]
	0x03366888 BL 0x1C16CF4
	0x0336688C MOVZ W8, 0x1
	0x03366890 STRB W8, [X26 + 0x762]
	0x03366894 CBNZ X23, 0x3366868
	0x03366898 MOV X24, X31
	0x0336689C ADRP X25, 0x1076000
	0x033668A0 LDRB W8, [X25 + 0xD06]
	0x033668A4 CBNZ W8, 0x33668C8
	0x033668A8 ADRP X0, 0xDB4000
	0x033668AC LDR X0, [X0 + 0x2D0]
	0x033668B0 BL 0x1C16CF4
	0x033668B4 ADRP X0, 0xDBC000
	0x033668B8 LDR X0, [X0 + 0x28]
	0x033668BC BL 0x1C16CF4
	0x033668C0 MOVZ W8, 0x1
	0x033668C4 STRB W8, [X25 + 0xD06]
	0x033668C8 CMP W21, W23
	0x033668CC B.NE 0x3366900
	0x033668D0 CBZ W21, 0x33668F8
	0x033668D4 ADRP X8, 0xDB4000
	0x033668D8 LDR X8, [X8 + 0x2D0]
	0x033668DC MOV X0, X20
	0x033668E0 MOV X1, X21
	0x033668E4 MOV X2, X24
	0x033668E8 LDR X4, [X8]
	0x033668EC MOV X3, X23
	0x033668F0 BL 0x1F96ECC
	0x033668F4 TBZ X0, 0x0, 0x3366900
	0x033668F8 MOVZ X8, 0x7FF00000
	0x033668FC B 0x3366A44
	0x03366900 LDRB W8, [X26 + 0x762]
	0x03366904 LDR X23, [X22 + 0x78]
	0x03366908 CBZ W8, 0x3366928
	0x0336690C CBZ X23, 0x3366940
	0x03366910 MOV X0, X23
	0x03366914 MOV X1, X31
	0x03366918 BL 0x3225708
	0x0336691C LDR W23, [X23 + 0x10]
	0x03366920 MOV X24, X0
	0x03366924 B 0x3366944
	0x03366928 ADRP X0, 0xDB4000
	0x0336692C LDR X0, [X0 + 0x290]
	0x03366930 BL 0x1C16CF4
	0x03366934 MOVZ W8, 0x1
	0x03366938 STRB W8, [X26 + 0x762]
	0x0336693C CBNZ X23, 0x3366910
	0x03366940 MOV X24, X31
	0x03366944 LDRB W8, [X25 + 0xD06]
	0x03366948 CBNZ W8, 0x336696C
	0x0336694C ADRP X0, 0xDB4000
	0x03366950 LDR X0, [X0 + 0x2D0]
	0x03366954 BL 0x1C16CF4
	0x03366958 ADRP X0, 0xDBC000
	0x0336695C LDR X0, [X0 + 0x28]
	0x03366960 BL 0x1C16CF4
	0x03366964 MOVZ W8, 0x1
	0x03366968 STRB W8, [X25 + 0xD06]
	0x0336696C CMP W21, W23
	0x03366970 B.NE 0x33669A4
	0x03366974 CBZ W21, 0x336699C
	0x03366978 ADRP X8, 0xDB4000
	0x0336697C LDR X8, [X8 + 0x2D0]
	0x03366980 MOV X0, X20
	0x03366984 MOV X1, X21
	0x03366988 MOV X2, X24
	0x0336698C LDR X4, [X8]
	0x03366990 MOV X3, X23
	0x03366994 BL 0x1F96ECC
	0x03366998 TBZ X0, 0x0, 0x33669A4
	0x0336699C MOVZ X8, 0xFFF00000
	0x033669A0 B 0x3366A44
	0x033669A4 LDRB W8, [X26 + 0x762]
	0x033669A8 LDR X22, [X22 + 0x68]
	0x033669AC CBZ W8, 0x33669CC
	0x033669B0 CBZ X22, 0x33669E4
	0x033669B4 MOV X0, X22
	0x033669B8 MOV X1, X31
	0x033669BC BL 0x3225708
	0x033669C0 LDR W22, [X22 + 0x10]
	0x033669C4 MOV X23, X0
	0x033669C8 B 0x33669E8
	0x033669CC ADRP X0, 0xDB4000
	0x033669D0 LDR X0, [X0 + 0x290]
	0x033669D4 BL 0x1C16CF4
	0x033669D8 MOVZ W8, 0x1
	0x033669DC STRB W8, [X26 + 0x762]
	0x033669E0 CBNZ X22, 0x33669B4
	0x033669E4 MOV X23, X31
	0x033669E8 LDRB W8, [X25 + 0xD06]
	0x033669EC CBNZ W8, 0x3366A10
	0x033669F0 ADRP X0, 0xDB4000
	0x033669F4 LDR X0, [X0 + 0x2D0]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+32], X30
	003 Move [X31+48], X26
	004 Move [X31+56], X25
	005 Move [X31+64], X24
	006 Move [X31+72], X23
	007 Move [X31+80], X22
	008 Move [X31+88], X21
	009 Move [X31+96], X20
	010 Move [X31+104], X19
	011 Move X25, 0x1077000
	012 Move X24, 0xD90000
	013 Move W8, [X25+3722]
	014 Move X24, [X24+2648]
	015 Move X19, X4
	016 Move W23, W3
	017 Move X21, X2
	018 Move X20, X1
	019 Move X22, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {41}
	024 Move X0, 0xDC3000
	025 Move X0, [X0+808]
	026 Call 0x1C17CF4
	027 Move X0, 0xD90000
	028 Move X0, [X0+2648]
	029 Call 0x1C17CF4
	030 Move X0, 0xDC3000
	031 Move X0, [X0+1416]
	032 Call 0x1C17CF4
	033 Move X0, 0xD8F000
	034 Move X0, [X0+2544]
	035 Call 0x1C17CF4
	036 Move X0, 0xDC5000
	037 Move X0, [X0+2584]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X25+3722], W8
	041 Move X0, [X24]
	042 Move [X31+40], X31
	043 Move [X31+24], X31
	044 Move X24, 0xDC5000
	045 Move W8, [X0+224]
	046 Move X24, [X24+2584]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move X1, [X24]
	051 Move W0, W23
	052 Call DateTimeOffset.ValidateStyles, X0, X1
	053 Compare X22, 0
	054 JumpIfEqual {117}
	055 Move X25, 0x1074000
	056 Move X24, 0xDC3000
	057 Move W8, [X25+1890]
	058 Move X24, [X24+808]
	059 Move W23, W0
	060 Compare W8, 0
	061 JumpIfNotEqual {67}
	062 Move X0, 0xDB5000
	063 Move X0, [X0+656]
	064 Call 0x1C17CF4
	065 Move W8, 1
	066 Move [X25+1890], W8
	067 Move X26, 0xDC3000
	068 Move X26, [X26+1416]
	069 Move X0, X22
	070 Move X1, X31
	071 Call String.GetRawStringData, X0
	072 Move X8, [X24]
	073 Move W22, [X22+16]
	074 Move X24, X0
	075 Move W9, [X8+224]
	076 Compare W9, 0
	077 JumpIfNotEqual {80}
	078 Move X0, X8
	079 Call 0x1C17DFC
	080 Move X25, 0xD8F000
	081 Move X25, [X25+2544]
	082 Move X0, X21
	083 Move X1, X31
	084 Call DateTimeFormatInfo.GetInstance, X0
	085 Move X8, [X26]
	086 Move X21, X0
	087 Move W9, [X8+224]
	088 Compare W9, 0
	089 JumpIfNotEqual {92}
	090 Move X0, X8
	091 Call 0x1C17DFC
	092 Add X5, X31, 24
	093 Add X6, X31, 40
	094 Move X0, X24
	095 Move X1, X22
	096 Move X2, X20
	097 Move X3, X21
	098 Move W4, W23
	099 Call DateTimeParse.TryParseExactMultiple, X0, X1, X2, X3, X4, X5
	100 Move X8, [X25]
	101 Move W20, W0
	102 Move W9, [X8+224]
	103 Compare W9, 0
	104 JumpIfNotEqual {107}
	105 Move X0, X8
	106 Call 0x1C17DFC
	107 Add X0, X31, 24
	108 Call DateTime.get_Ticks, X0
	109 Move X2, [X31+40]
	110 Move X1, X0
	111 Add X0, X31, 8
	112 Move [X31+8], X31
	113 Move [X31+16], X31
	114 Call DateTimeOffset..ctor, X0, X1, X2
	115 NotImplemented "Instruction LDUR not yet implemented."
	116 Move [X19], V0
	117 Move W20, W31
	118 Move [X19], X31
	119 Move [X19+8], X31
	120 And W0, W20, 1
	121 Move X20, [X31+96]
	122 Move X19, [X31+104]
	123 Move X22, [X31+80]
	124 Move X21, [X31+88]
	125 Move X24, [X31+64]
	126 Move X23, [X31+72]
	127 Move X26, [X31+48]
	128 Move X25, [X31+56]
	129 Move X30, [X31+32]
	130 Add X31, X31, 112
	131 Return X0

Method: System.Int16 ValidateOffset(System.TimeSpan offset)

Disassembly:
	0x03364E0C MOV X2, X21
	0x03364E10 MOV W3, W31
	0x03364E14 BL 0x3364E64
	0x03364E18 LDR X8, [X22]
	0x03364E1C STR X0, [X31 + 0x8]
	0x03364E20 LDR W9, [X8 + 0xE0]
	0x03364E24 CBNZ W9, 0x3364E30
	0x03364E28 MOV X0, X8
	0x03364E2C BL 0x1C16DFC
	0x03364E30 ADD X0, X31, 0x8
	0x03364E34 BL 0x3361708
	0x03364E38 LDR X2, [X31 + 0x28]
	0x03364E3C MOV X1, X0
	0x03364E40 ADD X0, X31, 0x10
	0x03364E44 STP X31, X31, [X31 + 0x10]
	0x03364E48 BL 0x3363D54
	0x03364E4C LDP X0, X1, [X31 + 0x10]
	0x03364E50 LDP X20, X19, [X31 + 0x40]
	0x03364E54 LDP X22, X21, [X31 + 0x30]
	0x03364E58 LDR X30, [X31 + 0x20]
	0x03364E5C ADD X31, X31, 0x50
	0x03364E60 RET
	0x03364E64 SUB X31, X31, 0xC0
	0x03364E68 STP X30, X25, [X31 + 0x80]
	0x03364E6C STP X24, X23, [X31 + 0x90]
	0x03364E70 STP X22, X21, [X31 + 0xA0]
	0x03364E74 STP X20, X19, [X31 + 0xB0]
	0x03364E78 ADRP X25, 0x1078000
	0x03364E7C ADRP X24, 0xDC4000
	0x03364E80 LDRB W8, [X25 + 0xEE7]
	0x03364E84 LDR X24, [X24 + 0x588]
	0x03364E88 MOV X19, X4
	0x03364E8C MOV W20, W3
	0x03364E90 MOV X21, X2
	0x03364E94 MOV X22, X1
	0x03364E98 MOV X23, X0
	0x03364E9C TBNZ X8, 0x0, 0x3364EB4
	0x03364EA0 ADRP X0, 0xDC4000
	0x03364EA4 LDR X0, [X0 + 0x588]
	0x03364EA8 BL 0x1C16CF4
	0x03364EAC MOVZ W8, 0x1
	0x03364EB0 STRB W8, [X25 + 0xEE7]
	0x03364EB4 MOVI V0.2D, 0x0
	0x03364EB8 ADD X0, X31, 0x0
	0x03364EBC MOV X1, X23
	0x03364EC0 MOV X2, X22
	0x03364EC4 MOV X3, X31
	0x03364EC8 STP V0, V0, [X31 + 0x60]
	0x03364ECC STP V0, V0, [X31 + 0x40]
	0x03364ED0 STP V0, V0, [X31 + 0x20]
	0x03364ED4 STP V0, V0, [X31]
	0x03364ED8 BL 0x33766A0
	0x03364EDC LDR W8, [X31 + 0x24]
	0x03364EE0 LDR X0, [X24]
	0x03364EE4 ORR W8, W8, 0x800
	0x03364EE8 STR W8, [X31 + 0x24]
	0x03364EEC LDR W8, [X0 + 0xE0]
	0x03364EF0 CBNZ W8, 0x3364EF8
	0x03364EF4 BL 0x1C16DFC
	0x03364EF8 ADD X4, X31, 0x0
	0x03364EFC MOV X0, X23
	0x03364F00 MOV X1, X22
	0x03364F04 MOV X2, X21
	0x03364F08 MOV W3, W20
	0x03364F0C BL 0x336FC74
	0x03364F10 TBZ X0, 0x0, 0x3364F38
	0x03364F14 LDR X8, [X31 + 0x28]
	0x03364F18 LDP X22, X21, [X31 + 0xA0]
	0x03364F1C LDP X24, X23, [X31 + 0x90]
	0x03364F20 LDP X30, X25, [X31 + 0x80]
	0x03364F24 STR X8, [X19]
	0x03364F28 LDR X0, [X31 + 0x38]
	0x03364F2C LDP X20, X19, [X31 + 0xB0]
	0x03364F30 ADD X31, X31, 0xC0
	0x03364F34 RET
	0x03364F38 ADRP X0, 0xDC4000
	0x03364F3C LDR X0, [X0 + 0x588]
	0x03364F40 BL 0x1C16D08
	0x03364F44 BL 0x19903D0
	0x03364F48 ADD X0, X31, 0x0
	0x03364F4C BL 0x336AD3C
	0x03364F50 MOV X19, X0
	0x03364F54 ADRP X0, 0xDC6000
	0x03364F58 LDR X0, [X0 + 0xB10]
	0x03364F5C BL 0x1C16D08
	0x03364F60 MOV X1, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1079000
	006 Move X21, 0xD92000
	007 Move W8, [X20+3723]
	008 Move X21, [X21+1392]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD92000
	015 Move X0, [X0+1392]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3723], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X8, 0xF7D5
	025 NotImplemented "Instruction MOVK not yet implemented."
	026 NotImplemented "Instruction MOVK not yet implemented."
	027 NotImplemented "Instruction MOVK not yet implemented."
	028 NotImplemented "Instruction SMULH not yet implemented."
	029 NotImplemented "Instruction SBFM not yet implemented."
	030 Add X20, X9, X8
	031 Move W8, 0x4600
	032 NotImplemented "Instruction MOVK not yet implemented."
	033 NotImplemented "Instruction MSUB not yet implemented."
	034 Compare X8, 0
	035 JumpIfNotEqual {55}
	036 Move X8, 0xB000
	037 NotImplemented "Instruction MOVK not yet implemented."
	038 Move X9, 0x6001
	039 NotImplemented "Instruction MOVK not yet implemented."
	040 NotImplemented "Instruction MOVK not yet implemented."
	041 Add X8, X19, X8
	042 NotImplemented "Instruction MOVK not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X0, [X21]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move W0, W20
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move X30, [X31+32]
	053 Move X21, [X31+40]
	054 Return X0
	055 Move X0, 0xD98000
	056 Move X0, [X0+1400]
	057 Call 0x1C17D08
	058 Call 0x1C17F10
	059 Move X19, X0
	060 Move X0, 0xDC7000
	061 Move X0, [X0+2728]
	062 Call 0x1C17D08
	063 Move X20, X0
	064 Move X0, 0xDBF000
	065 Move X0, [X0+3472]
	066 Call 0x1C17D08
	067 Move X2, X0
	068 Move X0, X19
	069 Move X1, X20
	070 Move X3, X31
	071 Call ArgumentException..ctor, X0, X1, X2
	072 Move X0, 0xD98000
	073 Move X0, [X0+1888]
	074 Call 0x1C17D08
	075 Call 0x1C17F10
	076 Move X19, X0
	077 Move X0, 0xDBF000
	078 Move X0, [X0+3472]
	079 Call 0x1C17D08
	080 Move X20, X0
	081 Move X0, 0xDC7000
	082 Move X0, [X0+2736]
	083 Call 0x1C17D08
	084 Move X2, X0
	085 Move X0, X19
	086 Move X1, X20
	087 Move X3, X31
	088 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	089 Move X0, 0xDC7000
	090 Move X0, [X0+2744]
	091 Call 0x1C17D08
	092 Move X1, X0
	093 Move X0, X19
	094 Call 0x1C17DEC

Method: System.DateTime ValidateDate(System.DateTime dateTime, System.TimeSpan offset)

Disassembly:
	0x03364F64 MOV X0, X19
	0x03364F68 BL 0x1C16DEC
	0x03364F6C SUB X31, X31, 0x30
	0x03364F70 STP X30, X21, [X31 + 0x10]
	0x03364F74 STP X20, X19, [X31 + 0x20]
	0x03364F78 ADRP X21, 0x1078000
	0x03364F7C ADRP X20, 0xD91000
	0x03364F80 LDRB W8, [X21 + 0xE85]
	0x03364F84 LDR X20, [X20 + 0xA58]
	0x03364F88 MOV X19, X0
	0x03364F8C TBNZ X8, 0x0, 0x3364FB0
	0x03364F90 ADRP X0, 0xD91000
	0x03364F94 LDR X0, [X0 + 0xA58]
	0x03364F98 BL 0x1C16CF4
	0x03364F9C ADRP X0, 0xD90000
	0x03364FA0 LDR X0, [X0 + 0x9F0]
	0x03364FA4 BL 0x1C16CF4
	0x03364FA8 MOVZ W8, 0x1
	0x03364FAC STRB W8, [X21 + 0xE85]
	0x03364FB0 LDR X0, [X20]
	0x03364FB4 ADRP X20, 0xD90000
	0x03364FB8 LDR W8, [X0 + 0xE0]
	0x03364FBC LDR X20, [X20 + 0x9F0]
	0x03364FC0 CBNZ W8, 0x3364FC8
	0x03364FC4 BL 0x1C16DFC
	0x03364FC8 MOV X0, X19
	0x03364FCC BL 0x3364200
	0x03364FD0 LDR X8, [X20]
	0x03364FD4 STR X0, [X31 + 0x8]
	0x03364FD8 LDR W9, [X8 + 0xE0]
	0x03364FDC CBNZ W9, 0x3364FE8
	0x03364FE0 MOV X0, X8
	0x03364FE4 BL 0x1C16DFC
	0x03364FE8 ADD X0, X31, 0x8
	0x03364FEC BL 0x3361708
	0x03364FF0 MOVZ X8, 0x42BD
	0x03364FF4 MOVK X8, 0xE57A0000
	0x03364FF8 MOVK X8, 0x94D5
	0x03364FFC MOVK X8, 0xD6BF0000
	0x03365000 SMULH X8, X0, X8, X31
	0x03365004 ADD X8, X8, X0
	0x03365008 SBFM X9, X8, 0x17, 0x3F
	0x0336500C ADD X8, X9, X8, 0x3F, LSR
	0x03365010 MOVN X9, 0xF6FF
	0x03365014 LDP X20, X19, [X31 + 0x20]
	0x03365018 LDP X30, X21, [X31 + 0x10]
	0x0336501C MOVK X9, 0x886E0000
	0x03365020 MOVK X9, 0xFFF1
	0x03365024 ADD X0, X8, X9
	0x03365028 ADD X31, X31, 0x30
	0x0336502C RET
	0x03365030 SUB X31, X31, 0x30
	0x03365034 STP X30, X21, [X31 + 0x10]
	0x03365038 STP X20, X19, [X31 + 0x20]
	0x0336503C ADRP X21, 0x1077000
	0x03365040 ADRP X20, 0xD90000
	0x03365044 LDRB W8, [X21 + 0xE86]
	0x03365048 LDR X20, [X20 + 0xA58]
	0x0336504C MOV X19, X0
	0x03365050 TBNZ X8, 0x0, 0x3365074
	0x03365054 ADRP X0, 0xDC3000
	0x03365058 LDR X0, [X0 + 0x548]
	0x0336505C BL 0x1C16CF4
	0x03365060 ADRP X0, 0xD90000
	0x03365064 LDR X0, [X0 + 0xA58]
	0x03365068 BL 0x1C16CF4
	0x0336506C MOVZ W8, 0x1
	0x03365070 STRB W8, [X21 + 0xE86]
	0x03365074 LDR X0, [X20]
	0x03365078 ADRP X21, 0xDC3000
	0x0336507C LDR W8, [X0 + 0xE0]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1079000
	007 Move [X31], X0
	008 Move X20, 0xD91000
	009 Move W8, [X21+3724]
	010 Move X20, [X20+2544]
	011 Move X19, X1
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xD91000
	017 Move X0, [X0+2544]
	018 Call 0x1C17CF4
	019 Move X0, 0xD92000
	020 Move X0, [X0+1392]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+3724], W8
	024 Move X0, [X20]
	025 Move X20, 0xD92000
	026 Move W8, [X0+224]
	027 Move X20, [X20+1392]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Add X0, X31, 0
	032 Call DateTime.get_Ticks, X0
	033 Move X8, [X20]
	034 Move X20, X0
	035 Move W9, [X8+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {40}
	038 Move X0, X8
	039 Call 0x1C17DFC
	040 Move X8, 0x4000
	041 NotImplemented "Instruction MOVK not yet implemented."
	042 NotImplemented "Instruction MOVK not yet implemented."
	043 Subtract X1, X20, X19
	044 NotImplemented "Instruction MOVK not yet implemented."
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Add X0, X31, 8
	047 Move W2, W31
	048 Move [X31+8], X31
	049 Call DateTime..ctor, X0, X1, X2
	050 Move X0, [X31+8]
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X30, [X31+16]
	054 Move X21, [X31+24]
	055 Add X31, X31, 48
	056 Return X0
	057 Move X0, 0xD97000
	058 Move X0, [X0+1888]
	059 Call 0x1C17D08
	060 Call 0x1C17F10
	061 Move X19, X0
	062 Move X0, 0xDBE000
	063 Move X0, [X0+3472]
	064 Call 0x1C17D08
	065 Move X20, X0
	066 Move X0, 0xDC6000
	067 Move X0, [X0+2752]
	068 Call 0x1C17D08
	069 Move X2, X0
	070 Move X0, X19
	071 Move X1, X20
	072 Move X3, X31
	073 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	074 Move X0, 0xDC6000
	075 Move X0, [X0+2760]
	076 Call 0x1C17D08
	077 Move X1, X0
	078 Move X0, X19
	079 Call 0x1C17DEC

Method: System.Globalization.DateTimeStyles ValidateStyles(System.Globalization.DateTimeStyles style, System.String parameterName)

Disassembly:
	0x033669F8 BL 0x1C16CF4
	0x033669FC ADRP X0, 0xDBC000
	0x03366A00 LDR X0, [X0 + 0x28]
	0x03366A04 BL 0x1C16CF4
	0x03366A08 MOVZ W8, 0x1
	0x03366A0C STRB W8, [X25 + 0xD06]
	0x03366A10 CMP W21, W22
	0x03366A14 B.NE 0x3366A64
	0x03366A18 CBZ W21, 0x3366A40
	0x03366A1C ADRP X8, 0xDB4000
	0x03366A20 LDR X8, [X8 + 0x2D0]
	0x03366A24 MOV X0, X20
	0x03366A28 MOV X1, X21
	0x03366A2C MOV X2, X23
	0x03366A30 LDR X4, [X8]
	0x03366A34 MOV X3, X22
	0x03366A38 BL 0x1F96ECC
	0x03366A3C TBZ X0, 0x0, 0x3366A64
	0x03366A40 MOVZ X8, 0x7FF80000
	0x03366A44 STR X8, [X19]
	0x03366A48 MOVZ W0, 0x1
	0x03366A4C LDP X20, X19, [X31 + 0x40]
	0x03366A50 LDP X22, X21, [X31 + 0x30]
	0x03366A54 LDP X24, X23, [X31 + 0x20]
	0x03366A58 LDP X26, X25, [X31 + 0x10]
	0x03366A5C LDR X30, [X31], #0x50
	0x03366A60 RET
	0x03366A64 MOV W0, W31
	0x03366A68 B 0x3366A4C
	0x03366A6C BL 0x1C16F20
	0x03366A70 STP X30, X23, [X31 - 0x30]!
	0x03366A74 STP X22, X21, [X31 + 0x10]
	0x03366A78 STP X20, X19, [X31 + 0x20]
	0x03366A7C MOV W20, W1
	0x03366A80 MOV X22, X0
	0x03366A84 MOV W0, W1
	0x03366A88 MOV X1, X31
	0x03366A8C MOV X19, X3
	0x03366A90 MOV X21, X2
	0x03366A94 BL 0x333B408
	0x03366A98 CBZ X22, 0x3366B00
	0x03366A9C ADRP X23, 0x1073000
	0x03366AA0 LDRB W8, [X23 + 0x762]
	0x03366AA4 CBNZ W8, 0x3366ABC
	0x03366AA8 ADRP X0, 0xDB4000
	0x03366AAC LDR X0, [X0 + 0x290]
	0x03366AB0 BL 0x1C16CF4
	0x03366AB4 MOVZ W8, 0x1
	0x03366AB8 STRB W8, [X23 + 0x762]
	0x03366ABC MOV X0, X22
	0x03366AC0 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction ORN not yet implemented."
	006 And W31, W8, 96
	007 Move TEMP, X0
	008 And TEMP, TEMP, 8
	009 Compare TEMP, 8
	010 JumpIfEqual {35}
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move TEMP, 160
	014 Not TEMP
	015 Move W8, TEMP
	016 And W0, W0, W8
	017 Move X30, [X31+32]
	018 Return X0
	019 Move X0, 0xD96000
	020 Move X0, [X0+1400]
	021 Move X19, X1
	022 Call 0x1C17D08
	023 Call 0x1C17F10
	024 Move X20, X0
	025 Move X0, 0xDC3000
	026 Move X0, [X0+1000]
	027 Move X0, 0xD96000
	028 Move X0, [X0+1400]
	029 Move X19, X1
	030 Call 0x1C17D08
	031 Call 0x1C17F10
	032 Move X20, X0
	033 Move X0, 0xDC3000
	034 Move X0, [X0+1008]
	035 Move X0, 0xD96000
	036 Move X0, [X0+1400]
	037 Move X19, X1
	038 Call 0x1C17D08
	039 Call 0x1C17F10
	040 Move X20, X0
	041 Move X0, 0xDC5000
	042 Move X0, [X0+2848]
	043 Call 0x1C17D08
	044 Move X1, X0
	045 Move X0, X20
	046 Move X2, X19
	047 Move X3, X31
	048 Call ArgumentException..ctor, X0, X1, X2
	049 Move X0, 0xDC5000
	050 Move X0, [X0+2856]
	051 Call 0x1C17D08
	052 Move X1, X0
	053 Move X0, X20
	054 Call 0x1C17DEC

Method: System.DateTimeOffset op_Implicit(System.DateTime dateTime)

Disassembly:
	0x03366C30 LDR X0, [X0 + 0x9E8]
	0x03366C34 BL 0x1C16CF4
	0x03366C38 MOVZ W8, 0x1
	0x03366C3C STRB W8, [X21 + 0xE9D]
	0x03366C40 LDR X0, [X20]
	0x03366C44 LDR V8, [X19]
	0x03366C48 LDR W8, [X0 + 0xE0]
	0x03366C4C CBNZ W8, 0x3366C54
	0x03366C50 BL 0x1C16DFC
	0x03366C54 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+8], X31
	003 Move [X31+16], X30
	004 Move X1, X0
	005 Add X0, X31, 0
	006 Move [X31], X31
	007 Call DateTimeOffset..ctor, X0, X1
	008 Move X0, [X31]
	009 Move X1, [X31+8]
	010 Move X30, [X31+16]
	011 Add X31, X31, 32
	012 Return X0

Method: System.Boolean op_Equality(System.DateTimeOffset left, System.DateTimeOffset right)

Disassembly:
	0x03366C58 LDP X30, X21, [X31 + 0x10]
	0x03366C5C MOV V0.16B, V8.16B
	0x03366C60 MOV X0, X31
	0x03366C64 LDR V8, [X31], #0x30
	0x03366C68 B 0x331EF4C
	0x03366C6C STR D8, [X31 - 0x30]!
	0x03366C70 STP X30, X21, [X31 + 0x10]
	0x03366C74 STP X20, X19, [X31 + 0x20]
	0x03366C78 ADRP X21, 0x1076000
	0x03366C7C ADRP X20, 0xD96000
	0x03366C80 LDRB W8, [X21 + 0xE9E]
	0x03366C84 LDR X20, [X20 + 0x9E8]
	0x03366C88 MOV X19, X0
	0x03366C8C TBNZ X8, 0x0, 0x3366CA4
	0x03366C90 ADRP X0, 0xD96000
	0x03366C94 LDR X0, [X0 + 0x9E8]
	0x03366C98 BL 0x1C16CF4
	0x03366C9C MOVZ W8, 0x1
	0x03366CA0 STRB W8, [X21 + 0xE9E]
	0x03366CA4 LDR X0, [X20]
	0x03366CA8 LDR V8, [X19]
	0x03366CAC LDR W8, [X0 + 0xE0]
	0x03366CB0 CBNZ W8, 0x3366CB8
	0x03366CB4 BL 0x1C16DFC
	0x03366CB8 LDP X20, X19, [X31 + 0x20]
	0x03366CBC LDP X30, X21, [X31 + 0x10]
	0x03366CC0 MOV V0.16B, V8.16B
	0x03366CC4 MOV X0, X31
	0x03366CC8 LDR V8, [X31], #0x30
	0x03366CCC B 0x331F5F0
	0x03366CD0 STR D8, [X31 - 0x30]!
	0x03366CD4 STP X30, X21, [X31 + 0x10]
	0x03366CD8 STP X20, X19, [X31 + 0x20]
	0x03366CDC ADRP X21, 0x1076000
	0x03366CE0 ADRP X20, 0xD96000
	0x03366CE4 LDRB W8, [X21 + 0xE9F]
	0x03366CE8 LDR X20, [X20 + 0x9E8]
	0x03366CEC MOV X19, X0
	0x03366CF0 TBNZ X8, 0x0, 0x3366D08
	0x03366CF4 ADRP X0, 0xD96000
	0x03366CF8 LDR X0, [X0 + 0x9E8]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+24], X1
	003 Move [X31+32], X30
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X19, 0x1077000
	007 Move [X31+8], X3
	008 Move [X31+16], X0
	009 Move [X31], X2
	010 Move X20, 0xD90000
	011 Move W8, [X19+3725]
	012 Move X20, [X20+2648]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xD90000
	018 Move X0, [X0+2648]
	019 Call 0x1C17CF4
	020 Move X0, 0xD8F000
	021 Move X0, [X0+2544]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X19+3725], W8
	025 Move X0, [X20]
	026 Move X20, 0xD8F000
	027 Move W8, [X0+224]
	028 Move X20, [X20+2544]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Add X0, X31, 16
	033 Call DateTimeOffset.get_UtcDateTime, X0
	034 Move X19, X0
	035 Add X0, X31, 0
	036 Call DateTimeOffset.get_UtcDateTime, X0
	037 Move X8, [X20]
	038 Move X20, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {44}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X0, X19
	045 Move X1, X20
	046 Move X20, [X31+48]
	047 Move X19, [X31+56]
	048 Move X30, [X31+32]
	049 Add X31, X31, 64
	050 Call DateTime.op_Equality, X0, X1
	051 Return X0

Method: System.Void .cctor()

Disassembly:
	0x03366CFC BL 0x1C16CF4
	0x03366D00 MOVZ W8, 0x1
	0x03366D04 STRB W8, [X21 + 0xE9F]
	0x03366D08 LDR X0, [X20]
	0x03366D0C LDR V8, [X19]
	0x03366D10 LDR W8, [X0 + 0xE0]
	0x03366D14 CBNZ W8, 0x3366D1C
	0x03366D18 BL 0x1C16DFC
	0x03366D1C LDP X20, X19, [X31 + 0x20]
	0x03366D20 LDP X30, X21, [X31 + 0x10]
	0x03366D24 MOV V0.16B, V8.16B
	0x03366D28 MOV X0, X31
	0x03366D2C LDR V8, [X31], #0x30
	0x03366D30 B 0x331FB5C
	0x03366D34 STR D8, [X31 - 0x30]!
	0x03366D38 STP X30, X21, [X31 + 0x10]
	0x03366D3C STP X20, X19, [X31 + 0x20]
	0x03366D40 ADRP X21, 0x1076000
	0x03366D44 ADRP X20, 0xD96000
	0x03366D48 LDRB W8, [X21 + 0xEA0]
	0x03366D4C LDR X20, [X20 + 0x9E8]
	0x03366D50 MOV X19, X0
	0x03366D54 TBNZ X8, 0x0, 0x3366D6C
	0x03366D58 ADRP X0, 0xD96000
	0x03366D5C LDR X0, [X0 + 0x9E8]
	0x03366D60 BL 0x1C16CF4
	0x03366D64 MOVZ W8, 0x1
	0x03366D68 STRB W8, [X21 + 0xEA0]
	0x03366D6C LDR X0, [X20]
	0x03366D70 LDR V8, [X19]
	0x03366D74 LDR W8, [X0 + 0xE0]
	0x03366D78 CBNZ W8, 0x3366D80
	0x03366D7C BL 0x1C16DFC
	0x03366D80 LDP X20, X19, [X31 + 0x20]
	0x03366D84 LDP X30, X21, [X31 + 0x10]
	0x03366D88 MOV V0.16B, V8.16B
	0x03366D8C MOV X0, X31
	0x03366D90 LDR V8, [X31], #0x30
	0x03366D94 B 0x33200A4
	0x03366D98 STR D8, [X31 - 0x30]!
	0x03366D9C STP X30, X21, [X31 + 0x10]
	0x03366DA0 STP X20, X19, [X31 + 0x20]
	0x03366DA4 ADRP X21, 0x1076000
	0x03366DA8 ADRP X20, 0xD96000
	0x03366DAC LDRB W8, [X21 + 0xEA1]
	0x03366DB0 LDR X20, [X20 + 0x9E8]
	0x03366DB4 MOV X19, X0
	0x03366DB8 TBNZ X8, 0x0, 0x3366DD0
	0x03366DBC ADRP X0, 0xD96000
	0x03366DC0 LDR X0, [X0 + 0x9E8]
	0x03366DC4 BL 0x1C16CF4
	0x03366DC8 MOVZ W8, 0x1
	0x03366DCC STRB W8, [X21 + 0xEA1]
	0x03366DD0 LDR X0, [X20]
	0x03366DD4 LDR V8, [X19]
	0x03366DD8 LDR W8, [X0 + 0xE0]
	0x03366DDC CBNZ W8, 0x3366DE4
	0x03366DE0 BL 0x1C16DFC
	0x03366DE4 LDP X20, X19, [X31 + 0x20]
	0x03366DE8 LDP X30, X21, [X31 + 0x10]
	0x03366DEC MOV V0.16B, V8.16B
	0x03366DF0 MOV X0, X31
	0x03366DF4 LDR V8, [X31], #0x30
	0x03366DF8 B 0x331EFAC
	0x03366DFC STR D8, [X31 - 0x30]!

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+64], X20
	004 Move [X31+72], X19
	005 Move X20, 0x1077000
	006 Move X19, 0xD90000
	007 Move W8, [X20+3726]
	008 Move X19, [X19+1392]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xD90000
	014 Move X0, [X0+2648]
	015 Call 0x1C17CF4
	016 Move X0, 0xD90000
	017 Move X0, [X0+1392]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+3726], W8
	021 Move X0, [X19]
	022 Move X20, 0xD90000
	023 Move W8, [X0+224]
	024 Move X20, [X20+2648]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X19]
	029 Move X8, [X0+184]
	030 Add X0, X31, 32
	031 Move X1, X31
	032 Move X2, [X8]
	033 Move [X31+32], X31
	034 Move [X31+40], X31
	035 Call DateTimeOffset..ctor, X0, X1, X2
	036 Move X8, [X20]
	037 Move V0, [X31+2]
	038 Move X1, 0x3FFF
	039 NotImplemented "Instruction MOVK not yet implemented."
	040 Move X8, [X8+184]
	041 NotImplemented "Instruction MOVK not yet implemented."
	042 Add X0, X31, 16
	043 NotImplemented "Instruction MOVK not yet implemented."
	044 Move [X8], V0
	045 Move X8, [X19]
	046 Move X8, [X8+184]
	047 Move X2, [X8]
	048 Move [X31+16], X31
	049 Move [X31+24], X31
	050 Call DateTimeOffset..ctor, X0, X1, X2
	051 Move X8, [X20]
	052 Move V0, [X31+1]
	053 Move X1, 0x8000
	054 NotImplemented "Instruction MOVK not yet implemented."
	055 Move X8, [X8+184]
	056 NotImplemented "Instruction MOVK not yet implemented."
	057 Add X0, X31, 0
	058 NotImplemented "Instruction MOVK not yet implemented."
	059 Move [X8+1], V0
	060 Move X8, [X19]
	061 Move X8, [X8+184]
	062 Move X2, [X8]
	063 Move [X31], X31
	064 Move [X31+8], X31
	065 Call DateTimeOffset..ctor, X0, X1, X2
	066 Move X8, [X20]
	067 Move V0, [X31]
	068 Move X20, [X31+64]
	069 Move X19, [X31+72]
	070 Move X30, [X31+48]
	071 Move X8, [X8+184]
	072 Move [X8+2], V0
	073 Add X31, X31, 80
	074 Return 

