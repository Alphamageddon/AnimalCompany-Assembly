Type: System.Lazy`1

Method: T CreateViaDefaultConstructor()

Disassembly:
	0x02EE96C4 MOV X20, X3
	0x02EE96C8 STUR X8, [X29 - 0x8]
	0x02EE96CC STUR X2, [X29 - 0x10]
	0x02EE96D0 LDRB W8, [X22 + 0xB6A]
	0x02EE96D4 LDR X25, [X25 + 0xF8]
	0x02EE96D8 MOV X21, X2
	0x02EE96DC MOV X24, X1
	0x02EE96E0 MOV X19, X0
	0x02EE96E4 TBNZ X8, 0x0, 0x2EE96FC
	0x02EE96E8 ADRP X0, 0x1236000
	0x02EE96EC LDR X0, [X0 + 0xF8]
	0x02EE96F0 BL 0x1C16CF4
	0x02EE96F4 MOVZ W8, 0x1
	0x02EE96F8 STRB W8, [X22 + 0xB6A]
	0x02EE96FC LDR X8, [X20 + 0x20]
	0x02EE9700 LDR X8, [X8 + 0xC0]
	0x02EE9704 LDR X8, [X8 + 0x8]
	0x02EE9708 LDR W22, [X8 + 0xFC]
	0x02EE970C ADD X8, X31, 0x0
	0x02EE9710 ADD X9, X22, 0xF
	0x02EE9714 AND X9, X9, 0x1FFFFFFFF
	0x02EE9718 SUB X23, X8, X9
	0x02EE971C ADD X31, X23, 0x0
	0x02EE9720 BL 0x1C16D44
	0x02EE9724 LDR X0, [X25]
	0x02EE9728 LDR W8, [X0 + 0xE0]
	0x02EE972C CBNZ W8, 0x2EE9738
	0x02EE9730 BL 0x1C16DFC
	0x02EE9734 LDR X0, [X25]
	0x02EE9738 LDR X8, [X20 + 0x20]
	0x02EE973C LDR X9, [X0 + 0xB8]
	0x02EE9740 MOV X0, X19
	0x02EE9744 LDR X8, [X8 + 0xC0]
	0x02EE9748 LDR X25, [X9 + 0x20]
	0x02EE974C LDR X8, [X8 + 0x20]
	0x02EE9750 LDR X1, [X8 + 0x80]
	0x02EE9754 BL 0x1C16D18
	0x02EE9758 MOV X1, X25
	0x02EE975C MOV X2, X24
	0x02EE9760 BL 0x1C24138
	0x02EE9764 CMP X0, X24
	0x02EE9768 B.NE 0x2EE9814
	0x02EE976C LDR X8, [X20 + 0x20]
	0x02EE9770 MOVZ W1, 0x8
	0x02EE9774 LDR X8, [X8 + 0xC0]
	0x02EE9778 LDR X8, [X8 + 0x20]
	0x02EE977C LDR X8, [X8 + 0x80]
	0x02EE9780 ADD X24, X8, 0x20
	0x02EE9784 MOV X0, X24
	0x02EE9788 BL 0x1C16D14
	0x02EE978C MOV X0, X19
	0x02EE9790 MOV X1, X24
	0x02EE9794 BL 0x1C16D18
	0x02EE9798 STR X31, [X0]
	0x02EE979C LDR X24, [X20 + 0x20]
	0x02EE97A0 MOV X0, X23
	0x02EE97A4 MOV X2, X22
	0x02EE97A8 LDR X8, [X24 + 0xC0]
	0x02EE97AC LDR X8, [X8 + 0x8]
	0x02EE97B0 LDR W8, [X8 + 0x28]
	0x02EE97B4 CMP W8, 0x0
	0x02EE97B8 SUB X8, X29, 0x10
	0x02EE97BC CSEL X1, X21, X8, LT
	0x02EE97C0 BL 0x3EB1AC0
	0x02EE97C4 LDR X8, [X24 + 0xC0]
	0x02EE97C8 MOV X0, X19
	0x02EE97CC MOV X2, X23

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x14F3000
	006 Move W8, [X20+2915]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x1237000
	013 Move X0, [X0+248]
	014 Call 0x1C17CF4
	015 Move X0, 0x120B000
	016 Move X0, [X0+1728]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+2915], W8
	020 Move X0, [X19+32]
	021 Move X20, 0x120B000
	022 Move W8, [X0+309]
	023 Move X20, [X20+1728]
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {29}
	028 Call 0x1C5D684
	029 Move X8, [X20]
	030 Move X9, [X0+192]
	031 Move X21, 0x1237000
	032 Move W10, [X8+224]
	033 Move X20, [X9]
	034 Move X21, [X21+248]
	035 Compare W10, 0
	036 JumpIfNotEqual {39}
	037 Move X0, X8
	038 Call 0x1C17DFC
	039 Move X0, X20
	040 Move X1, X31
	041 Call Type.GetTypeFromHandle, X0
	042 Move X8, [X21]
	043 Move X20, X0
	044 Move W9, [X8+224]
	045 Compare W9, 0
	046 JumpIfNotEqual {49}
	047 Move X0, X8
	048 Call 0x1C17DFC
	049 Move X0, X20
	050 Move X1, X31
	051 Call LazyHelper.CreateViaDefaultConstructor, X0
	052 Move X8, [X19+32]
	053 Move X19, X0
	054 Move W9, [X8+309]
	055 Move TEMP, X9
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfEqual {62}
	059 Move X0, X8
	060 Call 0x1C5D684
	061 Move X8, X0
	062 Move X8, [X8+192]
	063 Move X20, [X8+8]
	064 Move W8, [X20+309]
	065 Move TEMP, X8
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfEqual {72}
	069 Move X0, X20
	070 Call 0x1C5D684
	071 Move X20, X0
	072 Compare X19, 0
	073 JumpIfEqual {82}
	074 Move X0, X19
	075 Move X1, X20
	076 Call 0x1C17E00
	077 Compare X0, 0
	078 JumpIfNotEqual {83}
	079 Move X0, X19
	080 Move X1, X20
	081 Call 0x1C181E0
	082 Move X0, X31
	083 Move X20, [X31+16]
	084 Move X19, [X31+24]
	085 Move X30, [X31+32]
	086 Move X21, [X31+40]
	087 Return X0

Method: System.Void .ctor()

Disassembly:
	0x02EE97D0 MOV W3, W22
	0x02EE97D4 LDR X8, [X8 + 0x20]
	0x02EE97D8 LDR X8, [X8 + 0x80]
	0x02EE97DC ADD X1, X8, 0x40
	0x02EE97E0 BL 0x1C16D1C
	0x02EE97E4 BL 0x1C16D44
	0x02EE97E8 LDR X8, [X20 + 0x20]

ISIL:
	001 Move X8, [X1+32]
	002 Move W2, 2
	003 Move W3, 1
	004 Move X1, X31
	005 Move X8, [X8+192]
	006 Move X4, [X8+16]
	007 Call 0x2EE9804, X0, X1, X2, X3
	008 Return 

Method: System.Void .ctor(System.Func`1<T> valueFactory)

Disassembly:
	0x02EE97EC MOVZ W1, 0x8
	0x02EE97F0 LDR X8, [X8 + 0xC0]
	0x02EE97F4 LDR X8, [X8 + 0x20]
	0x02EE97F8 LDR X20, [X8 + 0x80]
	0x02EE97FC MOV X0, X20
	0x02EE9800 BL 0x1C16D14

ISIL:
	001 Move X8, [X2+32]
	002 Move W2, 2
	003 Move W3, W31
	004 Move X8, [X8+192]
	005 Move X4, [X8+16]

Method: System.Void .ctor(System.Func`1<T> valueFactory, System.Threading.LazyThreadSafetyMode mode, System.Boolean useDefaultConstructor)

Disassembly:
	0x02EE9804 MOV X0, X19
	0x02EE9808 MOV X1, X20
	0x02EE980C BL 0x1C16D18
	0x02EE9810 STR X31, [X0]
	0x02EE9814 LDR X8, [X26 + 0x28]
	0x02EE9818 LDUR X9, [X29 - 0x8]
	0x02EE981C CMP X8, X9
	0x02EE9820 B.NE 0x2EE9840
	0x02EE9824 ADD X31, X29, 0x0
	0x02EE9828 LDP X20, X19, [X31 + 0x40]
	0x02EE982C LDP X22, X21, [X31 + 0x30]
	0x02EE9830 LDP X24, X23, [X31 + 0x20]
	0x02EE9834 LDP X26, X25, [X31 + 0x10]
	0x02EE9838 LDP X29, X30, [X31], #0x50
	0x02EE983C RET
	0x02EE9840 BL 0x3EB1B20
	0x02EE9844 STP X29, X30, [X31 - 0x40]!
	0x02EE9848 STR X23, [X31 + 0x10]
	0x02EE984C STP X22, X21, [X31 + 0x20]
	0x02EE9850 STP X20, X19, [X31 + 0x30]
	0x02EE9854 ADD X29, X31, 0x0
	0x02EE9858 SUB X31, X31, 0x20
	0x02EE985C MRS X23, 0xC000
	0x02EE9860 LDR X8, [X23 + 0x28]
	0x02EE9864 ADD X10, X31, 0x0
	0x02EE9868 MOV X20, X1
	0x02EE986C MOV X19, X0
	0x02EE9870 STUR X8, [X29 - 0x8]
	0x02EE9874 LDR X8, [X2 + 0x20]
	0x02EE9878 MOV X22, X2
	0x02EE987C LDR X8, [X8 + 0xC0]
	0x02EE9880 LDR X9, [X8 + 0x8]
	0x02EE9884 LDR W9, [X9 + 0xFC]
	0x02EE9888 ADD X9, X9, 0xF
	0x02EE988C AND X9, X9, 0x1FFFFFFFF
	0x02EE9890 SUB X21, X10, X9
	0x02EE9894 ADD X31, X21, 0x0
	0x02EE9898 LDR X1, [X8 + 0x28]
	0x02EE989C SUB X3, X29, 0x18
	0x02EE98A0 MOV X2, X31
	0x02EE98A4 MOV X4, X21
	0x02EE98A8 LDR X0, [X1]
	0x02EE98AC STUR X21, [X29 - 0x18]
	0x02EE98B0 LDR X8, [X1 + 0x10]
	0x02EE98B4 BLR X8
	0x02EE98B8 LDR X8, [X22 + 0x20]
	0x02EE98BC LDR X8, [X8 + 0xC0]
	0x02EE98C0 LDR X9, [X8 + 0x8]
	0x02EE98C4 LDR X1, [X8 + 0x50]
	0x02EE98C8 LDR W8, [X9 + 0x28]
	0x02EE98CC LDR X0, [X1]
	0x02EE98D0 TBNZ X8, 0x1F, 0x2EE98D8
	0x02EE98D4 LDR X21, [X21]
	0x02EE98D8 STP X20, X21, [X29 - 0x18]
	0x02EE98DC LDR X8, [X1 + 0x10]
	0x02EE98E0 SUB X3, X29, 0x18

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x14F3000
	009 Move W8, [X24+2916]
	010 Move X19, X4
	011 Move W22, W3
	012 Move W21, W2
	013 Move X23, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x1237000
	020 Move X0, [X0+248]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X24+2916], W8
	024 Move X0, X20
	025 Move X1, X31
	026 Call Object..ctor, X0
	027 Compare X23, 0
	028 JumpIfNotEqual {33}
	029 Move TEMP, X22
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {56}
	033 Move X8, 0x1237000
	034 Move X8, [X8+248]
	035 Move [X20+24], X23
	036 Move X0, [X8]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 And W1, W22, 1
	042 Move W0, W21
	043 Move X2, X31
	044 Call LazyHelper.Create, X0, X1
	045 Move X19, X0
	046 Call 0x1C17D44
	047 Move [X20+16], X19
	048 Move X20, [X31+48]
	049 Move X19, [X31+56]
	050 Move X22, [X31+32]
	051 Move X21, [X31+40]
	052 Move X24, [X31+16]
	053 Move X23, [X31+24]
	054 Move X30, [X31+64]
	055 Return 
	056 Move X0, 0x1210000
	057 Move X0, [X0+1320]
	058 Call 0x1C17D08
	059 Call 0x1C17F10
	060 Move X20, X0
	061 Move X0, 0x1236000
	062 Move X0, [X0+632]
	063 Call 0x1C17D08
	064 Move X1, X0
	065 Move X0, X20
	066 Move X2, X31
	067 Call ArgumentNullException..ctor, X0, X1
	068 Move X0, X20
	069 Move X1, X19
	070 Call 0x1C17DEC

Method: System.Void ViaConstructor()

Disassembly:
	0x02EE98E4 MOV X2, X19
	0x02EE98E8 MOV X4, X21
	0x02EE98EC BLR X8
	0x02EE98F0 LDR X8, [X23 + 0x28]
	0x02EE98F4 LDUR X9, [X29 - 0x8]
	0x02EE98F8 CMP X8, X9
	0x02EE98FC B.NE 0x2EE9918
	0x02EE9900 ADD X31, X29, 0x0
	0x02EE9904 LDP X20, X19, [X31 + 0x30]
	0x02EE9908 LDP X22, X21, [X31 + 0x20]
	0x02EE990C LDR X23, [X31 + 0x10]
	0x02EE9910 LDP X29, X30, [X31], #0x40

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X1+32]
	004 Move X19, X0
	005 Move X8, [X8+192]
	006 Move X8, [X8+40]
	007 Move X0, X8
	008 Call 0x2EE96C4
	009 Move [X19+32], X0
	010 Call 0x1C17D44
	011 Move [X19+16], X31
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return 

Method: System.Void ViaFactory(System.Threading.LazyThreadSafetyMode mode)

Disassembly:
	0x02EE9914 RET
	0x02EE9918 BL 0x3EB1B20
	0x02EE991C STP X29, X30, [X31 - 0x40]!
	0x02EE9920 STR X23, [X31 + 0x10]
	0x02EE9924 STP X22, X21, [X31 + 0x20]
	0x02EE9928 STP X20, X19, [X31 + 0x30]
	0x02EE992C ADD X29, X31, 0x0
	0x02EE9930 SUB X31, X31, 0x20
	0x02EE9934 MRS X23, 0xC000
	0x02EE9938 LDR X8, [X23 + 0x28]
	0x02EE993C ADD X10, X31, 0x0
	0x02EE9940 MOV X22, X2
	0x02EE9944 MOV X20, X1
	0x02EE9948 STUR X8, [X29 - 0x8]
	0x02EE994C LDR X8, [X2 + 0x20]
	0x02EE9950 MOV X19, X0
	0x02EE9954 LDR X8, [X8 + 0xC0]
	0x02EE9958 LDR X9, [X8 + 0x8]
	0x02EE995C LDR W9, [X9 + 0xFC]
	0x02EE9960 ADD X9, X9, 0xF
	0x02EE9964 AND X9, X9, 0x1FFFFFFFF
	0x02EE9968 SUB X21, X10, X9
	0x02EE996C ADD X31, X21, 0x0
	0x02EE9970 LDR X8, [X8 + 0x20]
	0x02EE9974 LDR X8, [X8 + 0x80]
	0x02EE9978 ADD X1, X8, 0x20
	0x02EE997C BL 0x1C16D18
	0x02EE9980 LDR X2, [X0]
	0x02EE9984 CBZ X2, 0x2EE99E8
	0x02EE9988 LDR X8, [X22 + 0x20]
	0x02EE998C SUB X3, X29, 0x18
	0x02EE9990 MOV X4, X21
	0x02EE9994 LDR X8, [X8 + 0xC0]
	0x02EE9998 LDR X1, [X8 + 0x38]
	0x02EE999C LDR X0, [X1]
	0x02EE99A0 STUR X21, [X29 - 0x18]
	0x02EE99A4 LDR X8, [X1 + 0x10]
	0x02EE99A8 BLR X8
	0x02EE99AC LDR X8, [X22 + 0x20]
	0x02EE99B0 LDR X8, [X8 + 0xC0]
	0x02EE99B4 LDR X9, [X8 + 0x8]
	0x02EE99B8 LDR X1, [X8 + 0x50]
	0x02EE99BC LDR W8, [X9 + 0x28]
	0x02EE99C0 LDR X0, [X1]
	0x02EE99C4 TBNZ X8, 0x1F, 0x2EE99CC
	0x02EE99C8 LDR X21, [X21]
	0x02EE99CC STP X20, X21, [X29 - 0x18]
	0x02EE99D0 LDR X8, [X1 + 0x10]
	0x02EE99D4 SUB X3, X29, 0x18
	0x02EE99D8 MOV X2, X19
	0x02EE99DC MOV X4, X21
	0x02EE99E0 BLR X8
	0x02EE99E4 B 0x2EE9A00
	0x02EE99E8 LDR X8, [X22 + 0x20]
	0x02EE99EC MOV X0, X19
	0x02EE99F0 LDR X8, [X8 + 0xC0]
	0x02EE99F4 LDR X1, [X8 + 0x58]
	0x02EE99F8 LDR X8, [X1]
	0x02EE99FC BLR X8
	0x02EE9A00 LDR X8, [X23 + 0x28]
	0x02EE9A04 LDUR X9, [X29 - 0x8]
	0x02EE9A08 CMP X8, X9
	0x02EE9A0C B.NE 0x2EE9A28
	0x02EE9A10 ADD X31, X29, 0x0
	0x02EE9A14 LDP X20, X19, [X31 + 0x30]
	0x02EE9A18 LDP X22, X21, [X31 + 0x20]
	0x02EE9A1C LDR X23, [X31 + 0x10]
	0x02EE9A20 LDP X29, X30, [X31], #0x40
	0x02EE9A24 RET
	0x02EE9A28 BL 0x3EB1B20
	0x02EE9A2C STR X30, [X31 - 0x30]!
	0x02EE9A30 STP X22, X21, [X31 + 0x10]
	0x02EE9A34 STP X20, X19, [X31 + 0x20]
	0x02EE9A38 ADRP X21, 0x14F2000
	0x02EE9A3C LDRB W8, [X21 + 0xB6B]
	0x02EE9A40 MOV X19, X1
	0x02EE9A44 MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X0+24]
	007 Move X19, X0
	008 Move W20, W1
	009 Compare X8, 0
	010 JumpIfEqual {25}
	011 Move [X19+24], X31
	012 Move X0, [X8+64]
	013 Move X1, [X8+40]
	014 Move X9, [X8+24]
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move [X19+32], X0
	017 Call 0x1C17D44
	018 Move [X19+16], X31
	019 Move X20, [X31+32]
	020 Move X19, [X31+40]
	021 Move X22, [X31+16]
	022 Move X21, [X31+24]
	023 Move X30, [X31+48]
	024 Return 
	025 Move X21, X2
	026 Move X0, 0x120B000
	027 Move X0, [X0+1456]
	028 Call 0x1C17D08
	029 Call 0x1C17F10
	030 Move X22, X0
	031 Move X0, 0x1237000
	032 Move X0, [X0+256]
	033 Call 0x1C17D08
	034 Move X1, X0
	035 Move X0, X22
	036 Move X2, X31
	037 Call InvalidOperationException..ctor, X0, X1
	038 Move X0, X22
	039 Move X1, X21
	040 Call 0x1C17DEC
	041 Move X21, X0
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X0, X21
	044 Call 0x3EB2AD0
	045 Move X21, X0
	046 Move X0, 0x120B000
	047 Move X0, [X0+2000]
	048 Call 0x1C17D08
	049 Move X8, [X21]
	050 Move X1, [X8]
	051 Call 0x1C18270
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {71}
	056 Move X21, [X21]
	057 Call 0x3EB2AE0
	058 Move X0, 0x1237000
	059 Move X0, [X0+248]
	060 Call 0x1C17D08
	061 Call 0x1C17F10
	062 Move W1, W20
	063 Move X2, X21
	064 Move X3, X31
	065 Move X22, X0
	066 Call LazyHelper..ctor, X0, X1, X2
	067 Call 0x1C17D44
	068 Move X0, X21
	069 Move [X19+16], X22
	070 Call 0x1C17F18
	071 Move W0, 8
	072 Call 0x3EB2AF0
	073 Move X8, [X21]
	074 Move [X0], X8
	075 Move X1, 0xFCC000
	076 Add X1, X1, 3672
	077 Move X2, X31
	078 Call 0x3EB2B00
	079 Move X21, X0
	080 Call 0x3EB2AE0
	081 Move X0, X21
	082 Call 0x1D2D690
	083 Call 0x1991590

Method: System.Void ExecutionAndPublication(System.LazyHelper executionAndPublication, System.Boolean useDefaultConstructor)

Disassembly:
	0x02EE9A48 TBNZ X8, 0x0, 0x2EE9A60
	0x02EE9A4C ADRP X0, 0x1216000
	0x02EE9A50 LDR X0, [X0 + 0x470]
	0x02EE9A54 BL 0x1C16CF4
	0x02EE9A58 MOVZ W8, 0x1
	0x02EE9A5C STRB W8, [X21 + 0xB6B]
	0x02EE9A60 STR W31, [X31 + 0x8]
	0x02EE9A64 LDR X8, [X19 + 0x20]
	0x02EE9A68 MOV X0, X20
	0x02EE9A6C LDR X8, [X8 + 0xC0]
	0x02EE9A70 LDR X8, [X8 + 0x20]
	0x02EE9A74 LDR X1, [X8 + 0x80]
	0x02EE9A78 BL 0x1C16D18
	0x02EE9A7C LDR X21, [X0]
	0x02EE9A80 BL 0x1C16D44
	0x02EE9A84 CBZ X21, 0x2EE9AD0
	0x02EE9A88 ADRP X21, 0x1216000
	0x02EE9A8C LDR X21, [X21 + 0x470]
	0x02EE9A90 LDR X0, [X21]
	0x02EE9A94 LDR W8, [X0 + 0xE0]
	0x02EE9A98 CBNZ W8, 0x2EE9AA0
	0x02EE9A9C BL 0x1C16DFC
	0x02EE9AA0 ADD X0, X31, 0x8
	0x02EE9AA4 MOV X1, X31
	0x02EE9AA8 BL 0x33DF18C
	0x02EE9AAC LDR X8, [X19 + 0x20]
	0x02EE9AB0 MOV X0, X20
	0x02EE9AB4 LDR X8, [X8 + 0xC0]
	0x02EE9AB8 LDR X8, [X8 + 0x20]
	0x02EE9ABC LDR X1, [X8 + 0x80]
	0x02EE9AC0 BL 0x1C16D18
	0x02EE9AC4 LDR X22, [X0]
	0x02EE9AC8 BL 0x1C16D44
	0x02EE9ACC CBNZ X22, 0x2EE9A90
	0x02EE9AD0 LDP X20, X19, [X31 + 0x20]
	0x02EE9AD4 LDP X22, X21, [X31 + 0x10]
	0x02EE9AD8 LDR X30, [X31], #0x30
	0x02EE9ADC RET
	0x02EE9AE0 STP X29, X30, [X31 - 0x50]!
	0x02EE9AE4 STR X25, [X31 + 0x10]
	0x02EE9AE8 STP X24, X23, [X31 + 0x20]
	0x02EE9AEC STP X22, X21, [X31 + 0x30]
	0x02EE9AF0 STP X20, X19, [X31 + 0x40]
	0x02EE9AF4 ADD X29, X31, 0x0
	0x02EE9AF8 SUB X31, X31, 0x10
	0x02EE9AFC MRS X25, 0xC000
	0x02EE9B00 LDR X8, [X25 + 0x28]
	0x02EE9B04 MOV X23, X2
	0x02EE9B08 MOV X19, X1
	0x02EE9B0C MOV X21, X0
	0x02EE9B10 STUR X8, [X29 - 0x8]
	0x02EE9B14 LDR X8, [X2 + 0x20]
	0x02EE9B18 LDR X8, [X8 + 0xC0]
	0x02EE9B1C LDR X9, [X8 + 0x8]
	0x02EE9B20 LDR W20, [X9 + 0xFC]
	0x02EE9B24 ADD X9, X31, 0x0
	0x02EE9B28 ADD X10, X20, 0xF
	0x02EE9B2C AND X10, X10, 0x1FFFFFFFF
	0x02EE9B30 SUB X22, X9, X10
	0x02EE9B34 ADD X31, X22, 0x0
	0x02EE9B38 LDR X8, [X8 + 0x20]
	0x02EE9B3C LDR X1, [X8 + 0x80]
	0x02EE9B40 BL 0x1C16D18
	0x02EE9B44 LDR X24, [X0]
	0x02EE9B48 BL 0x1C16D44
	0x02EE9B4C CBZ X24, 0x2EE9C34
	0x02EE9B50 LDR W8, [X24 + 0x10]
	0x02EE9B54 CMP W8, 0x8
	0x02EE9B58 B.HI 0x2EE9B84
	0x02EE9B5C ADRP X9, 0xFFFFFFFFFDC44000
	0x02EE9B60 ADD X9, X9, 0xDAB
	0x02EE9B64 ADR X10, 0x10

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, X3
	009 Move W20, W2
	010 Move X19, X1
	011 Move X21, X0
	012 Move [X31+12], W31
	013 Add X1, X31, 12
	014 Move X0, X19
	015 Move X2, X31
	016 Call Monitor.Enter, X0, X1
	017 Move X23, [X21+16]
	018 Call 0x1C17D44
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X8, [X22+32]
	021 Move X8, [X8+192]
	022 Move TEMP, X20
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {35}
	026 Move X8, [X8+64]
	027 Move X8, [X8+32]
	028 Move X8, [X8+192]
	029 Move X0, [X8+40]
	030 Call 0x2EE96C4
	031 Move [X21+32], X0
	032 Call 0x1C17D44
	033 Move X20, X31
	034 Move [X21+16], X31
	035 Move X2, [X8+72]
	036 Move W1, 2
	037 Move X0, X21
	038 Call 0x2EE9914, X0, X1
	039 Move X20, X31
	040 Move W8, [X31+12]
	041 Compare W8, 0
	042 JumpIfEqual {46}
	043 Move X0, X19
	044 Move X1, X31
	045 Call Monitor.Exit, X0
	046 Compare X20, 0
	047 JumpIfNotEqual {56}
	048 Move X20, [X31+48]
	049 Move X19, [X31+56]
	050 Move X22, [X31+32]
	051 Move X21, [X31+40]
	052 Move X30, [X31+16]
	053 Move X23, [X31+24]
	054 Add X31, X31, 64
	055 Return 
	056 Move X0, X20
	057 Call 0x1C17F18
	058 Move X21, X0
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X0, X21
	061 Call 0x3EB2AD0
	062 Move X20, [X0]
	063 Call 0x3EB2AE0
	064 Move X20, X31
	065 Move X21, X0
	066 Move W8, [X31+12]
	067 Compare W8, 0
	068 JumpIfEqual {72}
	069 Move X0, X19
	070 Move X1, X31
	071 Call Monitor.Exit, X0
	072 Compare X20, 0
	073 JumpIfNotEqual {76}
	074 Move X0, X21
	075 Call 0x1D2D690
	076 Move X0, X20
	077 Call 0x1C17F18
	078 Call 0x1991590

Method: System.Void PublicationOnly(System.LazyHelper publicationOnly, T possibleValue)

Disassembly:
	0x02EE9B68 LDRB W11, [X9, X8, LSL]
	0x02EE9B6C ADD X10, X10, X11, 0x2, LSL
	0x02EE9B70 BR X10
	0x02EE9B74 LDR X8, [X23 + 0x20]
	0x02EE9B78 LDR X8, [X8 + 0xC0]
	0x02EE9B7C LDR X1, [X8 + 0x40]
	0x02EE9B80 B 0x2EE9C28
	0x02EE9B84 MOV X0, X24
	0x02EE9B88 MOV X1, X31
	0x02EE9B8C BL 0x337E1B4
	0x02EE9B90 B 0x2EE9C34
	0x02EE9B94 LDR X8, [X23 + 0x20]
	0x02EE9B98 MOVZ W2, 0x1
	0x02EE9B9C MOV X0, X21
	0x02EE9BA0 MOV X1, X24
	0x02EE9BA4 B 0x2EE9BE8
	0x02EE9BA8 LDR X8, [X23 + 0x20]
	0x02EE9BAC MOV X0, X21
	0x02EE9BB0 MOV W1, W31
	0x02EE9BB4 LDR X8, [X8 + 0xC0]
	0x02EE9BB8 LDR X2, [X8 + 0x48]
	0x02EE9BBC LDR X8, [X2]
	0x02EE9BC0 BLR X8
	0x02EE9BC4 B 0x2EE9C34
	0x02EE9BC8 LDR X8, [X23 + 0x20]
	0x02EE9BCC LDR X8, [X8 + 0xC0]
	0x02EE9BD0 LDR X2, [X8 + 0x60]
	0x02EE9BD4 B 0x2EE9C08
	0x02EE9BD8 LDR X8, [X23 + 0x20]
	0x02EE9BDC MOV X0, X21
	0x02EE9BE0 MOV X1, X24
	0x02EE9BE4 MOV W2, W31
	0x02EE9BE8 LDR X8, [X8 + 0xC0]
	0x02EE9BEC LDR X3, [X8 + 0x70]
	0x02EE9BF0 LDR X8, [X3]
	0x02EE9BF4 BLR X8
	0x02EE9BF8 B 0x2EE9C34

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x14F3000
	008 Move X23, 0x1237000
	009 Move W8, [X22+2917]
	010 Move X23, [X23+248]
	011 Move X20, X2
	012 Move X21, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x1237000
	019 Move X0, [X0+248]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2917], W8
	023 Add X22, X19, 16
	024 Call 0x1C17D44
	025 Move X0, [X23]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {31}
	029 Call 0x1C17DFC
	030 Move X0, [X23]
	031 Move X8, [X0+184]
	032 Move X0, X22
	033 Move X2, X21
	034 Move X1, [X8+32]
	035 Call 0x1C25138
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move [X19+24], X31
	038 Move [X19+32], X20
	039 Call 0x1C17D44
	040 Move [X19+16], X31
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Move X23, [X31+56]
	047 Return 

Method: System.Void PublicationOnlyViaConstructor(System.LazyHelper initializer)

Disassembly:
	0x02EE9BFC LDR X8, [X23 + 0x20]
	0x02EE9C00 LDR X8, [X8 + 0xC0]
	0x02EE9C04 LDR X2, [X8 + 0x68]
	0x02EE9C08 LDR X8, [X2]
	0x02EE9C0C MOV X0, X21
	0x02EE9C10 MOV X1, X24
	0x02EE9C14 BLR X8
	0x02EE9C18 B 0x2EE9C34
	0x02EE9C1C LDR X8, [X23 + 0x20]
	0x02EE9C20 LDR X8, [X8 + 0xC0]
	0x02EE9C24 LDR X1, [X8 + 0x58]
	0x02EE9C28 LDR X8, [X1]
	0x02EE9C2C MOV X0, X21
	0x02EE9C30 BLR X8
	0x02EE9C34 LDR X8, [X23 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X2+32]
	005 Move X20, X0
	006 Move X19, X1
	007 Move X8, [X8+192]
	008 Move X8, [X8+40]
	009 Move X0, X8
	010 Call 0x2EE96C4
	011 Move X2, X0
	012 Move X0, X20
	013 Move X1, X19
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Move X30, [X31+32]
	017 Call 0x2EE9B68, X0, X1, X2
	018 Return 

Method: System.Void PublicationOnlyViaFactory(System.LazyHelper initializer)

Disassembly:
	0x02EE9C38 SUB X3, X29, 0x10
	0x02EE9C3C MOV X2, X21
	0x02EE9C40 MOV X4, X22
	0x02EE9C44 LDR X8, [X8 + 0xC0]
	0x02EE9C48 LDR X1, [X8 + 0x78]
	0x02EE9C4C LDR X0, [X1]
	0x02EE9C50 STUR X22, [X29 - 0x10]
	0x02EE9C54 LDR X8, [X1 + 0x10]
	0x02EE9C58 BLR X8
	0x02EE9C5C MOV X0, X19
	0x02EE9C60 MOV X1, X22
	0x02EE9C64 MOV X2, X20
	0x02EE9C68 BL 0x3EB1AC0
	0x02EE9C6C LDR X8, [X25 + 0x28]
	0x02EE9C70 LDUR X9, [X29 - 0x8]
	0x02EE9C74 CMP X8, X9
	0x02EE9C78 B.NE 0x2EE9C98
	0x02EE9C7C ADD X31, X29, 0x0
	0x02EE9C80 LDP X20, X19, [X31 + 0x40]
	0x02EE9C84 LDP X22, X21, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0+24]
	005 Move X19, X0
	006 Compare X8, 0
	007 JumpIfEqual {21}
	008 Move X20, X1
	009 Move X9, [X8+24]
	010 Move X0, [X8+64]
	011 Move X1, [X8+40]
	012 NotImplemented "Instruction BLR not yet implemented."
	013 Move X2, X0
	014 Move X0, X19
	015 Move X1, X20
	016 Move X20, [X31+16]
	017 Move X19, [X31+24]
	018 Move X30, [X31+32]
	019 Call 0x2EE9B68, X0, X1, X2
	020 Return 
	021 Move X0, X19
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]

Method: System.Void PublicationOnlyWaitForOtherThreadToPublish()

Disassembly:
	0x02EE9C88 LDP X24, X23, [X31 + 0x20]
	0x02EE9C8C LDR X25, [X31 + 0x10]
	0x02EE9C90 LDP X29, X30, [X31], #0x50
	0x02EE9C94 RET
	0x02EE9C98 BL 0x3EB1B20
	0x02EE9C9C STP X29, X30, [X31 - 0x50]!
	0x02EE9CA0 STP X26, X25, [X31 + 0x10]
	0x02EE9CA4 STP X24, X23, [X31 + 0x20]
	0x02EE9CA8 STP X22, X21, [X31 + 0x30]
	0x02EE9CAC STP X20, X19, [X31 + 0x40]
	0x02EE9CB0 ADD X29, X31, 0x0
	0x02EE9CB4 SUB X31, X31, 0x10
	0x02EE9CB8 MRS X25, 0xC000
	0x02EE9CBC LDR X8, [X25 + 0x28]
	0x02EE9CC0 ADRP X21, 0x14F2000
	0x02EE9CC4 MOV X19, X1
	0x02EE9CC8 MOV X20, X0
	0x02EE9CCC STUR X8, [X29 - 0x8]
	0x02EE9CD0 LDRB W8, [X21 + 0xB6C]
	0x02EE9CD4 TBNZ X8, 0x0, 0x2EE9CEC
	0x02EE9CD8 ADRP X0, 0x1236000
	0x02EE9CDC LDR X0, [X0 + 0x108]
	0x02EE9CE0 BL 0x1C16CF4
	0x02EE9CE4 MOVZ W8, 0x1
	0x02EE9CE8 STRB W8, [X21 + 0xB6C]
	0x02EE9CEC LDR X26, [X19 + 0x20]
	0x02EE9CF0 LDR X8, [X26 + 0xC0]
	0x02EE9CF4 LDR X0, [X8 + 0x8]
	0x02EE9CF8 LDRB W8, [X0 + 0x135]
	0x02EE9CFC LDR W22, [X0 + 0xFC]
	0x02EE9D00 TBNZ X8, 0x0, 0x2EE9D14
	0x02EE9D04 BL 0x1C5C684

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x14F3000
	007 Move W8, [X20+2918]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x1217000
	014 Move X0, [X0+1136]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+2918], W8
	018 Move [X31+8], W31
	019 Move X20, [X19+16]
	020 Call 0x1C17D44
	021 Compare X20, 0
	022 JumpIfEqual {37}
	023 Move X20, 0x1217000
	024 Move X20, [X20+1136]
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Add X0, X31, 8
	031 Move X1, X31
	032 Call SpinWait.SpinOnce, X0
	033 Move X21, [X19+16]
	034 Call 0x1C17D44
	035 Compare X21, 0
	036 JumpIfNotEqual {25}
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X30, [X31+16]
	040 Move X21, [X31+24]
	041 Add X31, X31, 48
	042 Return 

Method: T CreateValue()

Disassembly:
	0x02EE9D08 LDR W8, [X0 + 0xFC]
	0x02EE9D0C LDR X26, [X19 + 0x20]
	0x02EE9D10 B 0x2EE9D18
	0x02EE9D14 MOV W8, W22
	0x02EE9D18 ADD W8, W8, 0x10
	0x02EE9D1C ADD X8, X8, 0xF
	0x02EE9D20 ADD X9, X31, 0x0
	0x02EE9D24 AND X8, X8, 0x1FFFFFFFF
	0x02EE9D28 SUB X21, X9, X8
	0x02EE9D2C ADD X31, X21, 0x0
	0x02EE9D30 ADD X9, X22, 0xF
	0x02EE9D34 ADD X8, X31, 0x0
	0x02EE9D38 AND X9, X9, 0x1FFFFFFFF
	0x02EE9D3C SUB X24, X8, X9
	0x02EE9D40 ADD X31, X24, 0x0
	0x02EE9D44 ADD X8, X31, 0x0
	0x02EE9D48 SUB X23, X8, X9
	0x02EE9D4C ADD X31, X23, 0x0
	0x02EE9D50 MOV X0, X23
	0x02EE9D54 MOV W1, W31
	0x02EE9D58 MOV X2, X22
	0x02EE9D5C BL 0x3EB1B10
	0x02EE9D60 LDR X8, [X26 + 0xC0]
	0x02EE9D64 MOV X0, X20
	0x02EE9D68 LDR X1, [X8 + 0x80]
	0x02EE9D6C LDR X8, [X1]
	0x02EE9D70 BLR X8
	0x02EE9D74 TBZ X0, 0x0, 0x2EE9DF0
	0x02EE9D78 LDR X8, [X19 + 0x20]
	0x02EE9D7C SUB X3, X29, 0x10
	0x02EE9D80 MOV X2, X20
	0x02EE9D84 MOV X4, X24
	0x02EE9D88 LDR X8, [X8 + 0xC0]
	0x02EE9D8C LDR X1, [X8 + 0x78]
	0x02EE9D90 LDR X0, [X1]
	0x02EE9D94 STUR X24, [X29 - 0x10]
	0x02EE9D98 LDR X8, [X1 + 0x10]
	0x02EE9D9C BLR X8
	0x02EE9DA0 MOV X0, X23
	0x02EE9DA4 MOV X1, X24
	0x02EE9DA8 MOV X2, X22
	0x02EE9DAC BL 0x3EB1AC0
	0x02EE9DB0 LDR X8, [X19 + 0x20]
	0x02EE9DB4 LDR X8, [X8 + 0xC0]
	0x02EE9DB8 LDR X0, [X8 + 0x8]
	0x02EE9DBC LDRB W9, [X0 + 0x135]
	0x02EE9DC0 TBNZ X9, 0x0, 0x2EE9DD0
	0x02EE9DC4 BL 0x1C5C684
	0x02EE9DC8 LDR X8, [X19 + 0x20]
	0x02EE9DCC LDR X8, [X8 + 0xC0]
	0x02EE9DD0 LDR X1, [X8 + 0x88]
	0x02EE9DD4 SUB X5, X29, 0x10
	0x02EE9DD8 MOV X2, X21
	0x02EE9DDC MOV X3, X23
	0x02EE9DE0 MOV X4, X31
	0x02EE9DE4 BL 0x1C17728
	0x02EE9DE8 LDUR X0, [X29 - 0x10]
	0x02EE9DEC B 0x2EE9DFC
	0x02EE9DF0 ADRP X8, 0x1236000
	0x02EE9DF4 LDR X8, [X8 + 0x108]
	0x02EE9DF8 LDR X0, [X8]
	0x02EE9DFC LDR X8, [X25 + 0x28]
	0x02EE9E00 LDUR X9, [X29 - 0x8]
	0x02EE9E04 CMP X8, X9
	0x02EE9E08 B.NE 0x2EE9E28
	0x02EE9E0C ADD X31, X29, 0x0
	0x02EE9E10 LDP X20, X19, [X31 + 0x40]
	0x02EE9E14 LDP X22, X21, [X31 + 0x30]
	0x02EE9E18 LDP X24, X23, [X31 + 0x20]
	0x02EE9E1C LDP X26, X25, [X31 + 0x10]
	0x02EE9E20 LDP X29, X30, [X31], #0x50
	0x02EE9E24 RET
	0x02EE9E28 BL 0x3EB1B20
	0x02EE9E2C STP X30, X19, [X31 - 0x10]!
	0x02EE9E30 LDR X8, [X1 + 0x20]
	0x02EE9E34 LDR X8, [X8 + 0xC0]
	0x02EE9E38 LDR X8, [X8 + 0x20]
	0x02EE9E3C LDR X1, [X8 + 0x80]
	0x02EE9E40 BL 0x1C16D18

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, [X0+16]
	006 Move X19, X0
	007 Move X20, X1
	008 Call 0x1C17D44
	009 Compare X21, 0
	010 JumpIfEqual {68}
	011 Move W8, [X21+16]
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move X9, -37466112
	014 Add X9, X9, 3490
	015 NotImplemented "Instruction ADR not yet implemented."
	016 Move W11, [X9]
	017 Add X10, X10, X11
	018 CallNoReturn X10
	019 Move X8, [X20+32]
	020 Move X8, [X8+192]
	021 Move X8, [X8+64]
	022 Move X8, [X8+32]
	023 Move X8, [X8+192]
	024 Move X0, [X8+40]
	025 Call 0x2EE96C4
	026 Move [X19+32], X0
	027 Call 0x1C17D44
	028 Move [X19+16], X31
	029 Move X8, [X20+32]
	030 Move X0, X19
	031 Move W1, W31
	032 Move X8, [X8+192]
	033 Move X2, [X8+72]
	034 Call 0x2EE9914, X0, X1
	035 Move X0, X21
	036 Move X1, X31
	037 Call LazyHelper.ThrowException, X0
	038 Move X8, [X20+32]
	039 Move X8, [X8+192]
	040 Move X8, [X8+96]
	041 Move X8, [X8+32]
	042 Move X8, [X8+192]
	043 Move X0, [X8+40]
	044 Call 0x2EE96C4
	045 Move X2, X0
	046 Move X0, X19
	047 Move X1, X21
	048 Call 0x2EE9B68, X0, X1, X2
	049 Move X8, [X20+32]
	050 Move X0, X19
	051 Move X1, X21
	052 Move X8, [X8+192]
	053 Move X2, [X8+104]
	054 Call 0x2EE9C38, X0, X1
	055 Move X0, X19
	056 Call 0x2EE9C88, X0
	057 Move X8, [X20+32]
	058 Move W2, 1
	059 Move X0, X19
	060 Move X1, X21
	061 Move X8, [X20+32]
	062 Move X0, X19
	063 Move X1, X21
	064 Move W2, W31
	065 Move X8, [X8+192]
	066 Move X3, [X8+112]
	067 Call 0x2EE9A48, X0, X1, X2
	068 Move X8, [X20+32]
	069 Move X0, X19
	070 Move X20, [X31+16]
	071 Move X19, [X31+24]
	072 Move X8, [X8+192]
	073 Move X1, [X8+120]
	074 Move X30, [X31+32]
	075 Move X21, [X31+40]
	076 Call 0x2EE9EE4, X0
	077 Return X0

Method: System.String ToString()

Disassembly:
	0x02EE9E44 LDR X19, [X0]
	0x02EE9E48 BL 0x1C16D44
	0x02EE9E4C CMP X19, 0x0
	0x02EE9E50 CSET W0, EQ
	0x02EE9E54 LDP X30, X19, [X31], #0x10
	0x02EE9E58 RET
	0x02EE9E5C STP X29, X30, [X31 - 0x50]!
	0x02EE9E60 STR X25, [X31 + 0x10]
	0x02EE9E64 STP X24, X23, [X31 + 0x20]
	0x02EE9E68 STP X22, X21, [X31 + 0x30]
	0x02EE9E6C STP X20, X19, [X31 + 0x40]
	0x02EE9E70 ADD X29, X31, 0x0
	0x02EE9E74 SUB X31, X31, 0x10
	0x02EE9E78 MRS X24, 0xC000
	0x02EE9E7C LDR X8, [X24 + 0x28]
	0x02EE9E80 MOV X19, X1
	0x02EE9E84 MOV X22, X0
	0x02EE9E88 MOV X23, X2
	0x02EE9E8C STUR X8, [X29 - 0x8]
	0x02EE9E90 LDR X8, [X2 + 0x20]
	0x02EE9E94 LDR X8, [X8 + 0xC0]
	0x02EE9E98 LDR X9, [X8 + 0x8]
	0x02EE9E9C LDR W20, [X9 + 0xFC]
	0x02EE9EA0 ADD X9, X31, 0x0
	0x02EE9EA4 ADD X10, X20, 0xF
	0x02EE9EA8 AND X10, X10, 0x1FFFFFFFF
	0x02EE9EAC SUB X21, X9, X10
	0x02EE9EB0 ADD X31, X21, 0x0
	0x02EE9EB4 LDR X8, [X8 + 0x20]
	0x02EE9EB8 LDR X1, [X8 + 0x80]
	0x02EE9EBC BL 0x1C16D18
	0x02EE9EC0 LDR X25, [X0]
	0x02EE9EC4 BL 0x1C16D44

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x14F3000
	006 Move W8, [X21+2919]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x1237000
	014 Move X0, [X0+264]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2919], W8
	018 Move X21, [X19+16]
	019 Call 0x1C17D44
	020 Compare X21, 0
	021 JumpIfEqual {30}
	022 Move X8, 0x1237000
	023 Move X8, [X8+264]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0
	030 Move X8, [X20+32]
	031 Move X0, X19
	032 Move X8, [X8+192]
	033 Move X1, [X8+120]
	034 Call 0x2EE9EE4, X0
	035 Compare X0, 0
	036 JumpIfEqual {45}
	037 Move X8, [X0]
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X2, [X8+360]
	041 Move X1, [X8+368]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 CallNoReturn X2
	045 Call 0x1C17F20

Method: System.Boolean get_IsValueCreated()

Disassembly:
	0x02EE9EC8 LDR X8, [X23 + 0x20]
	0x02EE9ECC LDR X8, [X8 + 0xC0]
	0x02EE9ED0 CBZ X25, 0x2EE9EF8
	0x02EE9ED4 LDR X1, [X8 + 0x90]
	0x02EE9ED8 SUB X3, X29, 0x10
	0x02EE9EDC MOV X2, X22
	0x02EE9EE0 MOV X4, X21

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+16]
	004 Call 0x1C17D44
	005 NotImplemented "Instruction CMP not yet implemented."
	006 NotImplemented "Instruction CSET not yet implemented."
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0

Method: T get_Value()

Disassembly:
	0x02EE9EE4 LDR X0, [X1]
	0x02EE9EE8 STUR X21, [X29 - 0x10]
	0x02EE9EEC LDR X8, [X1 + 0x10]
	0x02EE9EF0 BLR X8
	0x02EE9EF4 B 0x2EE9F1C
	0x02EE9EF8 LDR X8, [X8 + 0x20]
	0x02EE9EFC MOV X0, X22
	0x02EE9F00 LDR X8, [X8 + 0x80]
	0x02EE9F04 ADD X1, X8, 0x40
	0x02EE9F08 BL 0x1C16D18
	0x02EE9F0C MOV X1, X0
	0x02EE9F10 MOV X0, X21
	0x02EE9F14 MOV X2, X20
	0x02EE9F18 BL 0x3EB1AC0
	0x02EE9F1C MOV X0, X19
	0x02EE9F20 MOV X1, X21
	0x02EE9F24 MOV X2, X20
	0x02EE9F28 BL 0x3EB1AC0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, [X0+16]
	006 Move X19, X0
	007 Move X20, X1
	008 Call 0x1C17D44
	009 Compare X21, 0
	010 JumpIfEqual {21}
	011 Move X8, [X20+32]
	012 Move X0, X19
	013 Move X20, [X31+16]
	014 Move X19, [X31+24]
	015 Move X8, [X8+192]
	016 Move X1, [X8+144]
	017 Move X30, [X31+32]
	018 Move X21, [X31+40]
	019 Call 0x2EE9D08, X0
	020 Return X0
	021 Move X0, [X19+32]
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Return X0

