Type: System.Enum

Method: System.Enum/ValuesAndNames GetCachedValuesAndNames(System.RuntimeType enumType, System.Boolean getNames)

Disassembly:
	0x033AF5C4 BL 0x1C16D08
	0x033AF5C8 BL 0x1C16F10
	0x033AF5CC MOV X19, X0
	0x033AF5D0 ADRP X0, 0xD7C000
	0x033AF5D4 LDR X0, [X0 + 0x3C0]
	0x033AF5D8 BL 0x1C16D08
	0x033AF5DC MOV X1, X0
	0x033AF5E0 MOV X0, X19
	0x033AF5E4 MOV X2, X31
	0x033AF5E8 BL 0x330E100
	0x033AF5EC ADRP X0, 0xD7C000
	0x033AF5F0 LDR X0, [X0 + 0xEB8]
	0x033AF5F4 BL 0x1C16D08
	0x033AF5F8 MOV X1, X0
	0x033AF5FC MOV X0, X19
	0x033AF600 BL 0x1C16DEC
	0x033AF604 ADRP X0, 0xD76000
	0x033AF608 LDR X0, [X0 + 0xE58]
	0x033AF60C B 0x33AF618
	0x033AF610 ADRP X0, 0xD7C000
	0x033AF614 LDR X0, [X0 + 0x3B8]
	0x033AF618 BL 0x1C16D08
	0x033AF61C MOV X1, X31
	0x033AF620 BL 0x33BDD84
	0x033AF624 MOV X19, X0
	0x033AF628 ADRP X0, 0xD4C000
	0x033AF62C LDR X0, [X0 + 0x578]
	0x033AF630 BL 0x1C16D08
	0x033AF634 BL 0x1C16F10
	0x033AF638 MOV X20, X0
	0x033AF63C ADRP X0, 0xD7C000
	0x033AF640 LDR X0, [X0 + 0x3C0]
	0x033AF644 BL 0x1C16D08
	0x033AF648 MOV X2, X0
	0x033AF64C MOV X0, X20
	0x033AF650 MOV X1, X19
	0x033AF654 MOV X3, X31
	0x033AF658 BL 0x330E16C
	0x033AF65C ADRP X0, 0xD7C000
	0x033AF660 LDR X0, [X0 + 0xEB8]
	0x033AF664 BL 0x1C16D08
	0x033AF668 MOV X1, X0
	0x033AF66C MOV X0, X20
	0x033AF670 BL 0x1C16DEC
	0x033AF674 B 0x33AF684
	0x033AF678 B 0x33AF684
	0x033AF67C B 0x33AF684
	0x033AF680 B 0x33AF684
	0x033AF684 MOV X24, X0
	0x033AF688 CMP W1, 0x1
	0x033AF68C B.NE 0x33AF8BC
	0x033AF690 MOV X0, X24
	0x033AF694 BL 0x3EB1AD0
	0x033AF698 MOV X24, X0
	0x033AF69C ADRP X0, 0xD71000
	0x033AF6A0 LDR X0, [X0 + 0xC08]
	0x033AF6A4 BL 0x1C16D08
	0x033AF6A8 LDR X8, [X24]
	0x033AF6AC LDR X1, [X8]
	0x033AF6B0 BL 0x1C17270
	0x033AF6B4 TBZ X0, 0x0, 0x33AF848
	0x033AF6B8 BL 0x3EB1AE0
	0x033AF6BC ADRP X24, 0xD44000
	0x033AF6C0 LDR X24, [X24 + 0xDF8]
	0x033AF6C4 LDR X0, [X24]
	0x033AF6C8 LDR W8, [X0 + 0xE0]
	0x033AF6CC CBNZ W8, 0x33AF6D8
	0x033AF6D0 BL 0x1C16DFC
	0x033AF6D4 LDR X0, [X24]
	0x033AF6D8 LDR X8, [X0 + 0xB8]
	0x033AF6DC MOV X0, X22
	0x033AF6E0 MOV X2, X31
	0x033AF6E4 LDR X1, [X8]
	0x033AF6E8 BL 0x3229E68
	0x033AF6EC MOV X24, X0
	0x033AF6F0 MOVZ W1, 0x1
	0x033AF6F4 MOV X0, X23
	0x033AF6F8 BL 0x33AE5C4
	0x033AF6FC CBZ X0, 0x33AF840
	0x033AF700 CBZ X24, 0x33AF840
	0x033AF704 LDR W8, [X24 + 0x18]
	0x033AF708 CMP W8, 0x1
	0x033AF70C B.LT 0x33AF814

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x102F000
	009 Move W8, [X21+380]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0xD7D000
	017 Move X0, [X0+3680]
	018 Call 0x1C17CF4
	019 Move X0, 0xD7D000
	020 Move X0, [X0+3688]
	021 Call 0x1C17CF4
	022 Move X0, 0xD45000
	023 Move X0, [X0+3576]
	024 Call 0x1C17CF4
	025 Move X0, 0xD7D000
	026 Move X0, [X0+3696]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+380], W8
	030 Move [X31], X31
	031 Move [X31+8], X31
	032 Compare X19, 0
	033 JumpIfEqual {104}
	034 Move X22, 0xD7D000
	035 Move X21, [X19+32]
	036 Move X22, [X22+3696]
	037 Compare X21, 0
	038 JumpIfEqual {48}
	039 Move X9, [X21]
	040 Move X8, [X22]
	041 Move W11, [X9+304]
	042 Move W10, [X8+304]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X9, [X9+200]
	045 Add X9, X9, X10
	046 NotImplemented "Instruction LDUR not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X8, 0xD45000
	049 Move X8, [X8+3576]
	050 Move [X31], X31
	051 Move [X31+8], X31
	052 Move X0, [X8]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Add X1, X31, 8
	058 Add X2, X31, 0
	059 Move X0, X19
	060 Call 0x1C88864
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfEqual {78}
	065 Move X8, 0xD7D000
	066 Move X21, [X31]
	067 Move X20, [X31+8]
	068 Move X8, [X8+3688]
	069 Move X0, [X8]
	070 Call Comparer`1<UInt64>.get_Default
	071 Move X8, 0xD7D000
	072 Move X8, [X8+3680]
	073 Move X2, X0
	074 Move X0, X20
	075 Move X1, X21
	076 Move X3, [X8]
	077 Call Array.Sort, X0, X1, X2
	078 Move X0, [X22]
	079 Move X23, [X31]
	080 Move X20, [X31+8]
	081 Call 0x1C17F10
	082 Move X1, X31
	083 Move X21, X0
	084 Call Object..ctor, X0
	085 Move [X21+16], X20
	086 Move [X21+24], X23
	087 Move [X19+32], X21
	088 Move X0, X21
	089 Move X20, [X31+48]
	090 Move X19, [X31+56]
	091 Move X22, [X31+32]
	092 Move X21, [X31+40]
	093 Move X30, [X31+16]
	094 Move X23, [X31+24]
	095 Add X31, X31, 64
	096 Return X0
	097 Move TEMP, X20
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfNotEqual {88}
	101 Move X8, [X21+24]
	102 Compare X8, 0
	103 JumpIfNotEqual {88}
	104 Call 0x1C17F20

Method: System.String InternalFormattedHexString(System.Object value)

Disassembly:
	0x033AF740 BL 0x322B8DC
	0x033AF744 LDR W8, [X24 + 0x18]
	0x033AF748 CMP W26, W8
	0x033AF74C B.CS 0x33AF844
	0x033AF750 STR X27, [X31 + 0x8]
	0x033AF754 STR X0, [X29]
	0x033AF758 CBZ X28, 0x33AF840
	0x033AF75C LDR X8, [X28 + 0x18]
	0x033AF760 CMP W8, 0x1
	0x033AF764 B.LT 0x33AF7FC
	0x033AF768 MOV X27, X31
	0x033AF76C AND X8, X8, 0x0
	0x033AF770 CMP X27, W8, UXTW
	0x033AF774 B.CS 0x33AF844
	0x033AF778 LDR W8, [X24 + 0x18]
	0x033AF77C CMP W26, W8
	0x033AF780 B.CS 0x33AF844
	0x033AF784 LDR X0, [X25, X27, LSL #3]
	0x033AF788 LDR X1, [X29]
	0x033AF78C TBZ X21, 0x0, 0x33AF7A4
	0x033AF790 MOVZ W2, 0x5
	0x033AF794 MOV X3, X31
	0x033AF798 BL 0x322590C
	0x033AF79C CBNZ W0, 0x33AF7B4
	0x033AF7A0 B 0x33AF7C8
	0x033AF7A4 CBZ X0, 0x33AF840
	0x033AF7A8 MOV X2, X31
	0x033AF7AC BL 0x322693C
	0x033AF7B0 TBNZ X0, 0x0, 0x33AF7C8
	0x033AF7B4 LDR W8, [X28 + 0x18]
	0x033AF7B8 ADD X27, X27, 0x1
	0x033AF7BC CMP X27, W8, SXTW
	0x033AF7C0 B.LT 0x33AF770
	0x033AF7C4 B 0x33AF7FC
	0x033AF7C8 CBZ X23, 0x33AF840
	0x033AF7CC LDR W8, [X23 + 0x18]
	0x033AF7D0 CMP W27, W8
	0x033AF7D4 B.CS 0x33AF844
	0x033AF7D8 LDR X9, [X31]
	0x033AF7DC LDR W8, [X24 + 0x18]
	0x033AF7E0 ADD W26, W26, 0x1
	0x033AF7E4 LDR X9, [X9, X27, LSL #3]
	0x033AF7E8 LDR X27, [X31 + 0x8]
	0x033AF7EC CMP W26, W8
	0x033AF7F0 ORR X27, X9, X27, 0x0
	0x033AF7F4 B.LT 0x33AF728
	0x033AF7F8 B 0x33AF818
	0x033AF7FC ADRP X8, 0xD7C000
	0x033AF800 LDR X8, [X8 + 0xEA8]
	0x033AF804 MOVZ W1, 0x3
	0x033AF808 MOV X0, X19
	0x033AF80C MOV X3, X22
	0x033AF810 B 0x33AF590
	0x033AF814 MOV X27, X31
	0x033AF818 ADRP X8, 0xD44000
	0x033AF81C LDR X8, [X8 + 0xDF8]
	0x033AF820 LDR X0, [X8]
	0x033AF824 LDR W8, [X0 + 0xE0]
	0x033AF828 CBNZ W8, 0x33AF830
	0x033AF82C BL 0x1C16DFC
	0x033AF830 MOV X0, X20
	0x033AF834 MOV X1, X27
	0x033AF838 BL 0x33B00EC
	0x033AF83C B 0x33AF554
	0x033AF840 BL 0x1C16F20
	0x033AF844 BL 0x1C16F28
	0x033AF848 ADRP X0, 0xD44000
	0x033AF84C LDR X0, [X0 + 0x7D0]
	0x033AF850 BL 0x1C16D08
	0x033AF854 LDR X8, [X24]
	0x033AF858 LDR X1, [X8]
	0x033AF85C BL 0x1C17270
	0x033AF860 TBZ X0, 0x0, 0x33AF890
	0x033AF864 LDR X20, [X24]
	0x033AF868 BL 0x3EB1AE0
	0x033AF86C LDRB W8, [X19 + 0x8]
	0x033AF870 CBNZ W8, 0x33AF888
	0x033AF874 MOV W0, W31
	0x033AF878 MOVZ W8, 0x4
	0x033AF87C STR W8, [X19 + 0xC]
	0x033AF880 STR X20, [X19 + 0x28]
	0x033AF884 B 0x33AF59C
	0x033AF888 MOV X0, X20
	0x033AF88C BL 0x1C16F18
	0x033AF890 MOVZ W0, 0x8
	0x033AF894 BL 0x3EB1AF0
	0x033AF898 LDR X8, [X24]
	0x033AF89C STR X8, [X0]
	0x033AF8A0 ADRP X1, 0xB05000
	0x033AF8A4 ADD X1, X1, 0xE58
	0x033AF8A8 MOV X2, X31
	0x033AF8AC BL 0x3EB1B00
	0x033AF8B0 B 0x33AF924
	0x033AF8B4 MOV X24, X0
	0x033AF8B8 BL 0x3EB1AE0
	0x033AF8BC MOV X0, X24
	0x033AF8C0 BL 0x1D2C690
	0x033AF8C4 B 0x33AF8C8
	0x033AF8C8 MOV X24, X0
	0x033AF8CC CMP W1, 0x1
	0x033AF8D0 B.NE 0x33AF8BC
	0x033AF8D4 MOV X0, X24
	0x033AF8D8 BL 0x3EB1AD0
	0x033AF8DC MOV X20, X0
	0x033AF8E0 ADRP X0, 0xD44000
	0x033AF8E4 LDR X0, [X0 + 0x7D0]
	0x033AF8E8 BL 0x1C16D08
	0x033AF8EC LDR X8, [X20]
	0x033AF8F0 LDR X1, [X8]
	0x033AF8F4 BL 0x1C17270
	0x033AF8F8 TBZ X0, 0x0, 0x33AF904
	0x033AF8FC LDR X20, [X20]
	0x033AF900 B 0x33AF868
	0x033AF904 MOVZ W0, 0x8
	0x033AF908 BL 0x3EB1AF0
	0x033AF90C LDR X8, [X20]
	0x033AF910 STR X8, [X0]
	0x033AF914 ADRP X1, 0xB05000
	0x033AF918 ADD X1, X1, 0xE58
	0x033AF91C MOV X2, X31
	0x033AF920 BL 0x3EB1B00
	0x033AF924 MOV X24, X0
	0x033AF928 BL 0x3EB1AE0
	0x033AF92C B 0x33AF8BC
	0x033AF930 BL 0x1990590
	0x033AF934 STP X30, X21, [X31 - 0x20]!
	0x033AF938 STP X20, X19, [X31 + 0x10]
	0x033AF93C ADRP X20, 0x102E000
	0x033AF940 LDRB W8, [X20 + 0x1AC]
	0x033AF944 MOV X19, X0
	0x033AF948 TBNZ X8, 0x0, 0x33AF984
	0x033AF94C ADRP X0, 0xD4C000
	0x033AF950 LDR X0, [X0 + 0x578]
	0x033AF954 BL 0x1C16CF4
	0x033AF958 ADRP X0, 0xD49000
	0x033AF95C LDR X0, [X0 + 0x528]
	0x033AF960 BL 0x1C16CF4
	0x033AF964 ADRP X0, 0xD44000
	0x033AF968 LDR X0, [X0 + 0x9D0]
	0x033AF96C BL 0x1C16CF4
	0x033AF970 ADRP X0, 0xD7C000
	0x033AF974 LDR X0, [X0 + 0xEA8]
	0x033AF978 BL 0x1C16CF4
	0x033AF97C MOVZ W8, 0x1
	0x033AF980 STRB W8, [X20 + 0x1AC]
	0x033AF984 LDR W8, [X19 + 0xC]
	0x033AF988 SUB W8, W8, 0x1
	0x033AF98C CMP W8, 0x3
	0x033AF990 B.HI 0x33AF9B4
	0x033AF994 ADRP X9, 0xFFFFFFFFFD7E7000
	0x033AF998 ADD X9, X9, 0x8A2
	0x033AF99C ADR X10, 0x10
	0x033AF9A0 LDRB W11, [X9, X8, LSL]
	0x033AF9A4 ADD X10, X10, X11, 0x2, LSL
	0x033AF9A8 BR X10
	0x033AF9AC LDR X0, [X19 + 0x10]
	0x033AF9B0 B 0x33AF9C0
	0x033AF9B4 ADRP X8, 0xD7C000
	0x033AF9B8 LDR X8, [X8 + 0xEA8]
	0x033AF9BC LDR X0, [X8]
	0x033AF9C0 MOV X1, X31
	0x033AF9C4 BL 0x33BDD84
	0x033AF9C8 B 0x33AFA4C
	0x033AF9CC ADRP X8, 0xD49000
	0x033AF9D0 LDR X20, [X19 + 0x18]
	0x033AF9D4 LDR X8, [X8 + 0x528]
	0x033AF9D8 LDR X0, [X8]
	0x033AF9DC BL 0x1C16F10
	0x033AF9E0 MOV X1, X20
	0x033AF9E4 MOV X2, X31
	0x033AF9E8 MOV X19, X0
	0x033AF9EC BL 0x330E100
	0x033AF9F0 B 0x33AFA7C
	0x033AF9F4 ADRP X8, 0xD44000
	0x033AF9F8 LDR X20, [X19 + 0x10]
	0x033AF9FC LDR X8, [X8 + 0x9D0]
	0x033AFA00 MOVZ W1, 0x1
	0x033AFA04 LDR X0, [X8]
	0x033AFA08 BL 0x1C16D6C
	0x033AFA0C CBZ X0, 0x33AFA8C
	0x033AFA10 LDR X19, [X19 + 0x20]
	0x033AFA14 MOV X21, X0
	0x033AFA18 CBZ X19, 0x33AFA30
	0x033AFA1C LDR X8, [X21]
	0x033AFA20 MOV X0, X19
	0x033AFA24 LDR X1, [X8 + 0x40]
	0x033AFA28 BL 0x1C16E00
	0x033AFA2C CBZ X0, 0x33AFA94
	0x033AFA30 LDR W8, [X21 + 0x18]
	0x033AFA34 CBZ W8, 0x33AFA90
	0x033AFA38 MOV X0, X20
	0x033AFA3C MOV X1, X21
	0x033AFA40 MOV X2, X31
	0x033AFA44 STR X19, [X21 + 0x20]
	0x033AFA48 BL 0x33BFB40
	0x033AFA4C ADRP X8, 0xD4C000
	0x033AFA50 LDR X8, [X8 + 0x578]
	0x033AFA54 MOV X20, X0
	0x033AFA58 LDR X8, [X8]
	0x033AFA5C MOV X0, X8
	0x033AFA60 BL 0x1C16F10
	0x033AFA64 MOV X1, X20
	0x033AFA68 MOV X2, X31
	0x033AFA6C MOV X19, X0
	0x033AFA70 BL 0x3314A68
	0x033AFA74 B 0x33AFA7C
	0x033AFA78 LDR X19, [X19 + 0x28]
	0x033AFA7C MOV X0, X19
	0x033AFA80 LDP X20, X19, [X31 + 0x10]
	0x033AFA84 LDP X30, X21, [X31], #0x20
	0x033AFA88 RET
	0x033AFA8C BL 0x1C16F20
	0x033AFA90 BL 0x1C16F28
	0x033AFA94 BL 0x1C16F44
	0x033AFA98 MOV X1, X31
	0x033AFA9C BL 0x1C16DEC
	0x033AFAA0 STP X30, X19, [X31 - 0x10]!
	0x033AFAA4 LDRB W8, [X0 + 0x8]
	0x033AFAA8 STR W1, [X0 + 0xC]
	0x033AFAAC STR X2, [X0 + 0x18]
	0x033AFAB0 CBNZ W8, 0x33AFABC
	0x033AFAB4 LDP X30, X19, [X31], #0x10
	0x033AFAB8 RET
	0x033AFABC BL 0x33AF934
	0x033AFAC0 MOV X19, X0
	0x033AFAC4 ADRP X0, 0xD7C000
	0x033AFAC8 LDR X0, [X0 + 0xEC0]
	0x033AFACC BL 0x1C16D08
	0x033AFAD0 MOV X1, X0
	0x033AFAD4 MOV X0, X19
	0x033AFAD8 BL 0x1C16DEC
	0x033AFADC STP X30, X19, [X31 - 0x10]!
	0x033AFAE0 LDRB W8, [X0 + 0x8]
	0x033AFAE4 STR W1, [X0 + 0xC]
	0x033AFAE8 STR X2, [X0 + 0x10]
	0x033AFAEC STR X3, [X0 + 0x20]
	0x033AFAF0 CBNZ W8, 0x33AFAFC
	0x033AFAF4 LDP X30, X19, [X31], #0x10
	0x033AFAF8 RET
	0x033AFAFC BL 0x33AF934
	0x033AFB00 MOV X19, X0
	0x033AFB04 ADRP X0, 0xD7C000
	0x033AFB08 LDR X0, [X0 + 0xEC8]
	0x033AFB0C BL 0x1C16D08
	0x033AFB10 MOV X1, X0
	0x033AFB14 MOV X0, X19
	0x033AFB18 BL 0x1C16DEC
	0x033AFB1C STP X30, X21, [X31 - 0x20]!
	0x033AFB20 STP X20, X19, [X31 + 0x10]
	0x033AFB24 ADRP X20, 0x102E000
	0x033AFB28 ADRP X21, 0xD44000
	0x033AFB2C LDRB W8, [X20 + 0x184]
	0x033AFB30 LDR X21, [X21 + 0x6C0]
	0x033AFB34 MOV X19, X0
	0x033AFB38 TBNZ X8, 0x0, 0x33AFB50
	0x033AFB3C ADRP X0, 0xD44000
	0x033AFB40 LDR X0, [X0 + 0x6C0]
	0x033AFB44 BL 0x1C16CF4
	0x033AFB48 MOVZ W8, 0x1
	0x033AFB4C STRB W8, [X20 + 0x184]
	0x033AFB50 LDR X0, [X21]
	0x033AFB54 LDR W8, [X0 + 0xE0]
	0x033AFB58 CBNZ W8, 0x33AFB60
	0x033AFB5C BL 0x1C16DFC
	0x033AFB60 MOV X0, X19
	0x033AFB64 MOV X1, X31
	0x033AFB68 MOV X2, X31
	0x033AFB6C BL 0x3395194
	0x033AFB70 TBNZ X0, 0x0, 0x33AFB94
	0x033AFB74 CBZ X19, 0x33AFBDC
	0x033AFB78 LDR X8, [X19]
	0x033AFB7C MOV X0, X19
	0x033AFB80 LDP X20, X19, [X31 + 0x10]
	0x033AFB84 LDR X2, [X8 + 0x888]
	0x033AFB88 LDR X1, [X8 + 0x890]
	0x033AFB8C LDP X30, X21, [X31], #0x20
	0x033AFB90 BR X2
	0x033AFB94 ADRP X0, 0xD49000
	0x033AFB98 LDR X0, [X0 + 0x528]
	0x033AFB9C BL 0x1C16D08
	0x033AFBA0 BL 0x1C16F10
	0x033AFBA4 MOV X19, X0
	0x033AFBA8 ADRP X0, 0xD7C000
	0x033AFBAC LDR X0, [X0 + 0x3C0]
	0x033AFBB0 BL 0x1C16D08
	0x033AFBB4 MOV X1, X0
	0x033AFBB8 MOV X0, X19
	0x033AFBBC MOV X2, X31
	0x033AFBC0 BL 0x330E100
	0x033AFBC4 ADRP X0, 0xD7C000
	0x033AFBC8 LDR X0, [X0 + 0xED0]
	0x033AFBCC BL 0x1C16D08
	0x033AFBD0 MOV X1, X0
	0x033AFBD4 MOV X0, X19
	0x033AFBD8 BL 0x1C16DEC
	0x033AFBDC BL 0x1C16F20
	0x033AFBE0 STP X30, X21, [X31 - 0x20]!
	0x033AFBE4 STP X20, X19, [X31 + 0x10]
	0x033AFBE8 ADRP X21, 0x102E000

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+56], X21
	004 Move [X31+64], X20
	005 Move [X31+72], X19
	006 Move X21, 0x102F000
	007 Move X20, 0xD4E000
	008 Move W8, [X21+381]
	009 Move X20, [X20+2536]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {62}
	015 Move X0, 0xD45000
	016 Move X0, [X0+2904]
	017 Call 0x1C17CF4
	018 Move X0, 0xD46000
	019 Move X0, [X0+2520]
	020 Call 0x1C17CF4
	021 Move X0, 0xD47000
	022 Move X0, [X0+368]
	023 Call 0x1C17CF4
	024 Move X0, 0xD4E000
	025 Move X0, [X0+2536]
	026 Call 0x1C17CF4
	027 Move X0, 0xD49000
	028 Move X0, [X0+1576]
	029 Call 0x1C17CF4
	030 Move X0, 0xD45000
	031 Move X0, [X0+1880]
	032 Call 0x1C17CF4
	033 Move X0, 0xD47000
	034 Move X0, [X0+2656]
	035 Call 0x1C17CF4
	036 Move X0, 0xD6E000
	037 Move X0, [X0+1712]
	038 Call 0x1C17CF4
	039 Move X0, 0xD4A000
	040 Move X0, [X0+1624]
	041 Call 0x1C17CF4
	042 Move X0, 0xD4D000
	043 Move X0, [X0+1824]
	044 Call 0x1C17CF4
	045 Move X0, 0xD46000
	046 Move X0, [X0+1880]
	047 Call 0x1C17CF4
	048 Move X0, 0xD77000
	049 Move X0, [X0+1584]
	050 Call 0x1C17CF4
	051 Move X0, 0xD72000
	052 Move X0, [X0+2984]
	053 Call 0x1C17CF4
	054 Move X0, 0xD7B000
	055 Move X0, [X0+2816]
	056 Call 0x1C17CF4
	057 Move X0, 0xD7D000
	058 Move X0, [X0+3704]
	059 Call 0x1C17CF4
	060 Move W8, 1
	061 Move [X21+381], W8
	062 Move X0, [X20]
	063 Move [X31+44], W31
	064 Move [X31+40], W31
	065 Move [X31+36], W31
	066 NotImplemented "Instruction STRH not yet implemented."
	067 NotImplemented "Instruction STRH not yet implemented."
	068 NotImplemented "Instruction STRH not yet implemented."
	069 Move [X31+8], X31
	070 Move [X31+16], X31
	071 Move [X31], X31
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1C17DFC
	076 Move X0, X19
	077 Move X1, X31
	078 Call Convert.GetTypeCode, X0
	079 Subtract W8, W0, 3
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move X9, -42041344
	082 Add X9, X9, 2200
	083 NotImplemented "Instruction ADR not yet implemented."
	084 Move W11, [X9]
	085 Add X10, X10, X11
	086 CallNoReturn X10
	087 Move X0, [X20]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1C17DFC
	092 Compare X19, 0
	093 JumpIfEqual {277}
	094 Move X8, 0xD45000
	095 Move X8, [X8+2904]
	096 Move X9, [X19]
	097 Move X1, [X8]
	098 Move X8, [X9+64]
	099 Move X9, [X1+64]
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X0, X19
	102 Call 0x1C17E08
	103 Move W0, [X0]
	104 Move X1, X31
	105 Call Convert.ToByte, X0
	106 Move X8, 0xD72000
	107 Move X8, [X8+2984]
	108 Move [X31+36], W0
	109 Add X0, X31, 36
	110 Move X1, [X8]
	111 Compare X19, 0
	112 JumpIfEqual {277}
	113 Move X8, 0xD47000
	114 Move X8, [X8+368]
	115 Move X9, [X19]
	116 Move X1, [X8]
	117 Move X8, [X9+64]
	118 Move X9, [X1+64]
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Move X0, X19
	121 Call 0x1C17E08
	122 Move X9, 0xD7B000
	123 NotImplemented "Instruction LDRH not yet implemented."
	124 Move X9, [X9+2816]
	125 Add X0, X31, 24
	126 NotImplemented "Instruction STRH not yet implemented."
	127 Compare X19, 0
	128 JumpIfEqual {277}
	129 Move X8, 0xD6E000
	130 Move X8, [X8+1712]
	131 Move X9, [X19]
	132 Move X1, [X8]
	133 Move X8, [X9+64]
	134 Move X9, [X1+64]
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Move X0, X19
	137 Call 0x1C17E08
	138 Move X9, 0xD72000
	139 Move W8, [X0]
	140 Move X9, [X9+2984]
	141 Add X0, X31, 44
	142 Move [X31+44], W8
	143 Compare X19, 0
	144 JumpIfEqual {277}
	145 Move X8, 0xD46000
	146 Move X8, [X8+2520]
	147 Move X9, [X19]
	148 Move X1, [X8]
	149 Move X8, [X9+64]
	150 Move X9, [X1+64]
	151 NotImplemented "Instruction CMP not yet implemented."
	152 Move X0, X19
	153 Call 0x1C17E08
	154 Move X9, 0xD72000
	155 Move W8, [X0]
	156 Move X9, [X9+2984]
	157 Add X0, X31, 40
	158 Move [X31+40], W8
	159 Move X1, [X9]
	160 Move X2, X31
	161 Move X3, X31
	162 Call Byte.ToString, X0, X1, X2
	163 Compare X19, 0
	164 JumpIfEqual {277}
	165 Move X8, 0xD49000
	166 Move X8, [X8+1576]
	167 Move X9, [X19]
	168 Move X1, [X8]
	169 Move X8, [X9+64]
	170 Move X9, [X1+64]
	171 NotImplemented "Instruction CMP not yet implemented."
	172 Move X0, X19
	173 Call 0x1C17E08
	174 Move X9, 0xD7B000
	175 NotImplemented "Instruction LDRH not yet implemented."
	176 Move X9, [X9+2816]
	177 Add X0, X31, 32
	178 NotImplemented "Instruction STRH not yet implemented."
	179 Compare X19, 0
	180 JumpIfEqual {277}
	181 Move X8, 0xD4A000
	182 Move X8, [X8+1624]
	183 Move X9, [X19]
	184 Move X1, [X8]
	185 Move X8, [X9+64]
	186 Move X9, [X1+64]
	187 NotImplemented "Instruction CMP not yet implemented."
	188 Move X0, X19
	189 Call 0x1C17E08
	190 Move X9, 0xD7B000
	191 NotImplemented "Instruction LDRH not yet implemented."
	192 Move X9, [X9+2816]
	193 Add X0, X31, 28
	194 NotImplemented "Instruction STRH not yet implemented."
	195 Move X1, [X9]
	196 Move X2, X31
	197 Move X3, X31
	198 Call UInt16.ToString, X0, X1, X2
	199 Compare X19, 0
	200 JumpIfEqual {277}
	201 Move X8, 0xD45000
	202 Move X8, [X8+1880]
	203 Move X9, [X19]
	204 Move X1, [X8]
	205 Move X8, [X9+64]
	206 Move X9, [X1+64]
	207 NotImplemented "Instruction CMP not yet implemented."
	208 Move X0, X19
	209 Call 0x1C17E08
	210 Move X9, 0xD77000
	211 Move W8, [X0]
	212 Move X9, [X9+1584]
	213 Add X0, X31, 16
	214 Move [X31+16], W8
	215 Compare X19, 0
	216 JumpIfEqual {277}
	217 Move X8, 0xD4D000
	218 Move X8, [X8+1824]
	219 Move X9, [X19]
	220 Move X1, [X8]
	221 Move X8, [X9+64]
	222 Move X9, [X1+64]
	223 NotImplemented "Instruction CMP not yet implemented."
	224 Move X0, X19
	225 Call 0x1C17E08
	226 Move X9, 0xD77000
	227 Move W8, [X0]
	228 Move X9, [X9+1584]
	229 Add X0, X31, 20
	230 Move [X31+20], W8
	231 Move X1, [X9]
	232 Move X2, X31
	233 Move X3, X31
	234 Call UInt32.ToString, X0, X1, X2
	235 Compare X19, 0
	236 JumpIfEqual {277}
	237 Move X8, 0xD47000
	238 Move X8, [X8+2656]
	239 Move X9, [X19]
	240 Move X1, [X8]
	241 Move X8, [X9+64]
	242 Move X9, [X1+64]
	243 NotImplemented "Instruction CMP not yet implemented."
	244 Move X0, X19
	245 Call 0x1C17E08
	246 Move X9, 0xD7D000
	247 Move X8, [X0]
	248 Move X9, [X9+3704]
	249 Add X0, X31, 0
	250 Move [X31], X8
	251 Compare X19, 0
	252 JumpIfEqual {277}
	253 Move X8, 0xD46000
	254 Move X8, [X8+1880]
	255 Move X9, [X19]
	256 Move X1, [X8]
	257 Move X8, [X9+64]
	258 Move X9, [X1+64]
	259 NotImplemented "Instruction CMP not yet implemented."
	260 Move X0, X19
	261 Call 0x1C17E08
	262 Move X9, 0xD7D000
	263 Move X8, [X0]
	264 Move X9, [X9+3704]
	265 Add X0, X31, 8
	266 Move [X31+8], X8
	267 Move X1, [X9]
	268 Move X2, X31
	269 Move X3, X31
	270 Call UInt64.ToString, X0, X1, X2
	271 Move X20, [X31+64]
	272 Move X19, [X31+72]
	273 Move X30, [X31+48]
	274 Move X21, [X31+56]
	275 Add X31, X31, 80
	276 Return X0
	277 Call 0x1C17F20
	278 Move X0, X19
	279 Call 0x1C181E0
	280 Move X0, 0xD7D000
	281 Move X0, [X0+968]
	282 Call 0x1C17D08
	283 Move X1, X31
	284 Call Environment.GetResourceString, X0
	285 Move X19, X0
	286 Move X0, 0xD45000
	287 Move X0, [X0+1456]
	288 Call 0x1C17D08
	289 Call 0x1C17F10
	290 Move X1, X19
	291 Move X2, X31
	292 Move X20, X0
	293 Call InvalidOperationException..ctor, X0, X1
	294 Move X0, 0xD7D000
	295 Move X0, [X0+3712]
	296 Call 0x1C17D08
	297 Move X1, X0
	298 Move X0, X20
	299 Call 0x1C17DEC

Method: System.String InternalFormat(System.RuntimeType eT, System.Object value)

Disassembly:
	0x033AFBEC LDRB W8, [X21 + 0x18A]
	0x033AFBF0 MOV X20, X1
	0x033AFBF4 MOV X19, X0
	0x033AFBF8 TBNZ X8, 0x0, 0x33AFC94
	0x033AFBFC ADRP X0, 0xD44000
	0x033AFC00 LDR X0, [X0 + 0xB58]
	0x033AFC04 BL 0x1C16CF4
	0x033AFC08 ADRP X0, 0xD45000
	0x033AFC0C LDR X0, [X0 + 0x9D8]
	0x033AFC10 BL 0x1C16CF4
	0x033AFC14 ADRP X0, 0xD46000
	0x033AFC18 LDR X0, [X0 + 0x170]
	0x033AFC1C BL 0x1C16CF4
	0x033AFC20 ADRP X0, 0xD4D000
	0x033AFC24 LDR X0, [X0 + 0x9E8]
	0x033AFC28 BL 0x1C16CF4
	0x033AFC2C ADRP X0, 0xD44000
	0x033AFC30 LDR X0, [X0 + 0xDF8]
	0x033AFC34 BL 0x1C16CF4
	0x033AFC38 ADRP X0, 0xD48000
	0x033AFC3C LDR X0, [X0 + 0x628]
	0x033AFC40 BL 0x1C16CF4
	0x033AFC44 ADRP X0, 0xD44000
	0x033AFC48 LDR X0, [X0 + 0x758]
	0x033AFC4C BL 0x1C16CF4
	0x033AFC50 ADRP X0, 0xD46000
	0x033AFC54 LDR X0, [X0 + 0xA60]
	0x033AFC58 BL 0x1C16CF4
	0x033AFC5C ADRP X0, 0xD6D000
	0x033AFC60 LDR X0, [X0 + 0x6B0]
	0x033AFC64 BL 0x1C16CF4
	0x033AFC68 ADRP X0, 0xD49000
	0x033AFC6C LDR X0, [X0 + 0x658]
	0x033AFC70 BL 0x1C16CF4
	0x033AFC74 ADRP X0, 0xD4C000
	0x033AFC78 LDR X0, [X0 + 0x720]
	0x033AFC7C BL 0x1C16CF4
	0x033AFC80 ADRP X0, 0xD45000
	0x033AFC84 LDR X0, [X0 + 0x758]
	0x033AFC88 BL 0x1C16CF4
	0x033AFC8C MOVZ W8, 0x1
	0x033AFC90 STRB W8, [X21 + 0x18A]
	0x033AFC94 CBZ X20, 0x33B0028
	0x033AFC98 ADRP X8, 0xD4D000
	0x033AFC9C LDR X8, [X8 + 0x9E8]
	0x033AFCA0 LDR X0, [X8]
	0x033AFCA4 LDR W8, [X0 + 0xE0]
	0x033AFCA8 CBNZ W8, 0x33AFCB0
	0x033AFCAC BL 0x1C16DFC
	0x033AFCB0 MOV X0, X20
	0x033AFCB4 MOV X1, X31
	0x033AFCB8 BL 0x331C89C
	0x033AFCBC SUB W8, W0, 0x3
	0x033AFCC0 CMP W8, 0x9
	0x033AFCC4 B.HI 0x33B0078
	0x033AFCC8 ADRP X9, 0xFFFFFFFFFD7E7000
	0x033AFCCC ADD X9, X9, 0x8A6
	0x033AFCD0 ADR X10, 0x10
	0x033AFCD4 LDRB W11, [X9, X8, LSL]
	0x033AFCD8 ADD X10, X10, X11, 0x2, LSL
	0x033AFCDC BR X10
	0x033AFCE0 ADRP X8, 0xD44000
	0x033AFCE4 LDR X8, [X8 + 0xDF8]
	0x033AFCE8 LDR X0, [X8]
	0x033AFCEC LDR W8, [X0 + 0xE0]
	0x033AFCF0 CBNZ W8, 0x33AFCF8
	0x033AFCF4 BL 0x1C16DFC
	0x033AFCF8 ADRP X8, 0xD44000
	0x033AFCFC LDR X8, [X8 + 0xB58]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x102F000
	008 Move X21, 0xD7D000
	009 Move X22, 0xD45000
	010 Move W8, [X23+382]
	011 Move X21, [X21+3720]
	012 Move X22, [X22+1728]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {30}
	019 Move X0, 0xD45000
	020 Move X0, [X0+3576]
	021 Call 0x1C17CF4
	022 Move X0, 0xD7D000
	023 Move X0, [X0+3720]
	024 Call 0x1C17CF4
	025 Move X0, 0xD45000
	026 Move X0, [X0+1728]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X23+382], W8
	030 Move X0, [X22]
	031 Move X21, [X21]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X21
	037 Move X1, X31
	038 Call Type.GetTypeFromHandle, X0
	039 Compare X20, 0
	040 JumpIfEqual {95}
	041 Move X8, [X20]
	042 Move X21, 0xD45000
	043 Move X1, X0
	044 Move X0, X20
	045 Move X9, [X8+488]
	046 Move X3, [X8+496]
	047 Move X21, [X21+3576]
	048 Move W2, W31
	049 NotImplemented "Instruction BLR not yet implemented."
	050 Move X8, [X21]
	051 Move W21, W0
	052 Move W9, [X8+224]
	053 Compare W9, 0
	054 JumpIfNotEqual {57}
	055 Move X0, X8
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move TEMP, X21
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {71}
	062 Move X1, X19
	063 Move X20, [X31+32]
	064 Move X19, [X31+40]
	065 Move X22, [X31+16]
	066 Move X21, [X31+24]
	067 Move X30, [X31+48]
	068 Move X23, [X31+56]
	069 Call Enum.InternalFlagsFormat, X0, X1
	070 Return X0
	071 Move X1, X19
	072 Call Enum.GetName, X0, X1
	073 Compare X0, 0
	074 JumpIfEqual {82}
	075 Move X20, [X31+32]
	076 Move X19, [X31+40]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X30, [X31+48]
	080 Move X23, [X31+56]
	081 Return X0
	082 Compare X19, 0
	083 JumpIfEqual {95}
	084 Move X8, [X19]
	085 Move X0, X19
	086 Move X20, [X31+32]
	087 Move X19, [X31+40]
	088 Move X22, [X31+16]
	089 Move X21, [X31+24]
	090 Move X2, [X8+360]
	091 Move X1, [X8+368]
	092 Move X30, [X31+48]
	093 Move X23, [X31+56]
	094 CallNoReturn X2
	095 Call 0x1C17F20

Method: System.String InternalFlagsFormat(System.RuntimeType eT, System.Object value)

Disassembly:
	0x033AFDD4 LDP X30, X21, [X31], #0x20
	0x033AFDD8 B 0x33B06DC
	0x033AFDDC ADRP X8, 0xD44000
	0x033AFDE0 LDR X8, [X8 + 0xDF8]
	0x033AFDE4 LDR X0, [X8]
	0x033AFDE8 LDR W8, [X0 + 0xE0]
	0x033AFDEC CBNZ W8, 0x33AFDF4
	0x033AFDF0 BL 0x1C16DFC
	0x033AFDF4 ADRP X8, 0xD45000
	0x033AFDF8 LDR X8, [X8 + 0x9D8]
	0x033AFDFC LDR X9, [X20]
	0x033AFE00 LDR X1, [X8]
	0x033AFE04 LDR X8, [X9 + 0x40]
	0x033AFE08 LDR X9, [X1 + 0x40]
	0x033AFE0C CMP X8, X9
	0x033AFE10 B.NE 0x33B0070
	0x033AFE14 MOV X0, X20
	0x033AFE18 BL 0x1C16E08
	0x033AFE1C LDRB W1, [X0]
	0x033AFE20 MOV X0, X19
	0x033AFE24 LDP X20, X19, [X31 + 0x10]
	0x033AFE28 LDP X30, X21, [X31], #0x20
	0x033AFE2C B 0x33B0E0C
	0x033AFE30 ADRP X8, 0xD44000
	0x033AFE34 LDR X8, [X8 + 0xDF8]
	0x033AFE38 LDR X0, [X8]
	0x033AFE3C LDR W8, [X0 + 0xE0]
	0x033AFE40 CBNZ W8, 0x33AFE48
	0x033AFE44 BL 0x1C16DFC
	0x033AFE48 ADRP X8, 0xD48000
	0x033AFE4C LDR X8, [X8 + 0x628]
	0x033AFE50 LDR X9, [X20]
	0x033AFE54 LDR X1, [X8]
	0x033AFE58 LDR X8, [X9 + 0x40]
	0x033AFE5C LDR X9, [X1 + 0x40]
	0x033AFE60 CMP X8, X9
	0x033AFE64 B.NE 0x33B0070
	0x033AFE68 MOV X0, X20
	0x033AFE6C BL 0x1C16E08
	0x033AFE70 LDRH W1, [X0]
	0x033AFE74 MOV X0, X19
	0x033AFE78 LDP X20, X19, [X31 + 0x10]
	0x033AFE7C LDP X30, X21, [X31], #0x20
	0x033AFE80 B 0x33B08A8
	0x033AFE84 ADRP X8, 0xD44000
	0x033AFE88 LDR X8, [X8 + 0xDF8]
	0x033AFE8C LDR X0, [X8]
	0x033AFE90 LDR W8, [X0 + 0xE0]
	0x033AFE94 CBNZ W8, 0x33AFE9C
	0x033AFE98 BL 0x1C16DFC
	0x033AFE9C ADRP X8, 0xD49000
	0x033AFEA0 LDR X8, [X8 + 0x658]
	0x033AFEA4 LDR X9, [X20]
	0x033AFEA8 LDR X1, [X8]
	0x033AFEAC LDR X8, [X9 + 0x40]
	0x033AFEB0 LDR X9, [X1 + 0x40]
	0x033AFEB4 CMP X8, X9
	0x033AFEB8 B.NE 0x33B0070
	0x033AFEBC MOV X0, X20
	0x033AFEC0 BL 0x1C16E08
	0x033AFEC4 LDRH W1, [X0]
	0x033AFEC8 MOV X0, X19
	0x033AFECC LDP X20, X19, [X31 + 0x10]
	0x033AFED0 LDP X30, X21, [X31], #0x20
	0x033AFED4 B 0x33B0FD8
	0x033AFED8 ADRP X8, 0xD44000
	0x033AFEDC LDR X8, [X8 + 0xDF8]
	0x033AFEE0 LDR X0, [X8]
	0x033AFEE4 LDR W8, [X0 + 0xE0]
	0x033AFEE8 CBNZ W8, 0x33AFEF0
	0x033AFEEC BL 0x1C16DFC
	0x033AFEF0 ADRP X8, 0xD44000
	0x033AFEF4 LDR X8, [X8 + 0x758]
	0x033AFEF8 LDR X9, [X20]
	0x033AFEFC LDR X1, [X8]
	0x033AFF00 LDR X8, [X9 + 0x40]
	0x033AFF04 LDR X9, [X1 + 0x40]
	0x033AFF08 CMP X8, X9
	0x033AFF0C B.NE 0x33B0070
	0x033AFF10 MOV X0, X20
	0x033AFF14 BL 0x1C16E08
	0x033AFF18 LDR W1, [X0]
	0x033AFF1C MOV X0, X19
	0x033AFF20 LDP X20, X19, [X31 + 0x10]
	0x033AFF24 LDP X30, X21, [X31], #0x20
	0x033AFF28 B 0x33B0510
	0x033AFF2C ADRP X8, 0xD44000
	0x033AFF30 LDR X8, [X8 + 0xDF8]
	0x033AFF34 LDR X0, [X8]
	0x033AFF38 LDR W8, [X0 + 0xE0]
	0x033AFF3C CBNZ W8, 0x33AFF44
	0x033AFF40 BL 0x1C16DFC
	0x033AFF44 ADRP X8, 0xD4C000
	0x033AFF48 LDR X8, [X8 + 0x720]
	0x033AFF4C LDR X9, [X20]
	0x033AFF50 LDR X1, [X8]
	0x033AFF54 LDR X8, [X9 + 0x40]
	0x033AFF58 LDR X9, [X1 + 0x40]
	0x033AFF5C CMP X8, X9
	0x033AFF60 B.NE 0x33B0070
	0x033AFF64 MOV X0, X20
	0x033AFF68 BL 0x1C16E08
	0x033AFF6C LDR W1, [X0]
	0x033AFF70 MOV X0, X19
	0x033AFF74 LDP X20, X19, [X31 + 0x10]
	0x033AFF78 LDP X30, X21, [X31], #0x20
	0x033AFF7C B 0x33B0C40
	0x033AFF80 ADRP X8, 0xD44000
	0x033AFF84 LDR X8, [X8 + 0xDF8]
	0x033AFF88 LDR X0, [X8]
	0x033AFF8C LDR W8, [X0 + 0xE0]
	0x033AFF90 CBNZ W8, 0x33AFF98
	0x033AFF94 BL 0x1C16DFC
	0x033AFF98 ADRP X8, 0xD46000
	0x033AFF9C LDR X8, [X8 + 0xA60]
	0x033AFFA0 LDR X9, [X20]
	0x033AFFA4 LDR X1, [X8]
	0x033AFFA8 LDR X8, [X9 + 0x40]
	0x033AFFAC LDR X9, [X1 + 0x40]
	0x033AFFB0 CMP X8, X9
	0x033AFFB4 B.NE 0x33B0070
	0x033AFFB8 MOV X0, X20
	0x033AFFBC BL 0x1C16E08
	0x033AFFC0 LDR X1, [X0]
	0x033AFFC4 MOV X0, X19
	0x033AFFC8 LDP X20, X19, [X31 + 0x10]
	0x033AFFCC LDP X30, X21, [X31], #0x20
	0x033AFFD0 B 0x33B0A74
	0x033AFFD4 ADRP X8, 0xD44000

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X20, 0x102F000
	013 Move X22, 0xD45000
	014 Move W8, [X20+383]
	015 Move X22, [X22+3576]
	016 Move X19, X1
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {36}
	022 Move X0, 0xD45000
	023 Move X0, [X0+3576]
	024 Call 0x1C17CF4
	025 Move X0, 0xD45000
	026 Move X0, [X0+2288]
	027 Call 0x1C17CF4
	028 Move X0, 0xD45000
	029 Move X0, [X0+2104]
	030 Call 0x1C17CF4
	031 Move X0, 0xD47000
	032 Move X0, [X0+1200]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X20+383], W8
	036 Move X0, [X22]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X0, X19
	042 Call Enum.ToUInt64, X0
	043 Move X20, X0
	044 Move W1, 1
	045 Move X0, X21
	046 Call Enum.GetCachedValuesAndNames, X0, X1
	047 Compare X0, 0
	048 JumpIfEqual {162}
	049 Move X23, [X0+16]
	050 Compare X23, 0
	051 JumpIfEqual {162}
	052 Move X8, 0xD45000
	053 Move X8, [X8+2288]
	054 Move X22, [X0+24]
	055 Move W24, [X23+24]
	056 Move X0, [X8]
	057 Call 0x1C17F10
	058 Move X1, X31
	059 Move X21, X0
	060 Call StringBuilder..ctor, X0
	061 Subtract W24, W24, 1
	062 Move X25, X20
	063 Move X26, 0xD45000
	064 Move X26, [X26+2104]
	065 Move W8, 1
	066 Move X25, X20
	067 Move W9, [X23+24]
	068 Compare W24, 0
	069 JumpIfNotEqual {75}
	070 Compare W9, 0
	071 JumpIfEqual {161}
	072 Move X10, [X23+32]
	073 Compare X10, 0
	074 JumpIfEqual {106}
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move W27, W24
	077 Add X9, X23, X27
	078 Move X28, [X9+32]
	079 NotImplemented "Instruction BICS not yet implemented."
	080 Move TEMP, X8
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfEqual {91}
	084 Compare X21, 0
	085 JumpIfEqual {162}
	086 Move X2, [X26]
	087 Move X0, X21
	088 Move W1, W31
	089 Move X3, X31
	090 Call StringBuilder.Insert, X0, X1, X2
	091 Compare X22, 0
	092 JumpIfEqual {162}
	093 Move W8, [X22+24]
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Compare X21, 0
	096 JumpIfEqual {162}
	097 Add X8, X22, X27
	098 Move X2, [X8+32]
	099 Move X0, X21
	100 Move W1, W31
	101 Move X3, X31
	102 Subtract X25, X25, X28
	103 Call StringBuilder.Insert, X0, X1, X2
	104 Move W8, W31
	105 Subtract W24, W24, 1
	106 Compare X25, 0
	107 JumpIfEqual {112}
	108 Compare X19, 0
	109 JumpIfEqual {162}
	110 Move X8, [X19]
	111 Move X0, X19
	112 Compare X20, 0
	113 JumpIfEqual {132}
	114 Compare X21, 0
	115 JumpIfEqual {162}
	116 Move X8, [X21]
	117 Move X0, X21
	118 Move X2, [X8+360]
	119 Move X1, [X8+368]
	120 Move X20, [X31+80]
	121 Move X19, [X31+88]
	122 Move X22, [X31+64]
	123 Move X21, [X31+72]
	124 Move X24, [X31+48]
	125 Move X23, [X31+56]
	126 Move X26, [X31+32]
	127 Move X25, [X31+40]
	128 Move X28, [X31+16]
	129 Move X27, [X31+24]
	130 Move X30, [X31+96]
	131 CallNoReturn X2
	132 Move X8, [X23+24]
	133 Compare X8, 0
	134 JumpIfEqual {140}
	135 Compare W8, 0
	136 JumpIfEqual {161}
	137 Move X8, [X23+32]
	138 Compare X8, 0
	139 JumpIfEqual {143}
	140 Move X8, 0xD47000
	141 Move X8, [X8+1200]
	142 Move X0, [X8]
	143 Compare X22, 0
	144 JumpIfEqual {162}
	145 Move W8, [X22+24]
	146 Compare W8, 0
	147 JumpIfEqual {161}
	148 Move X0, [X22+32]
	149 Move X20, [X31+80]
	150 Move X19, [X31+88]
	151 Move X22, [X31+64]
	152 Move X21, [X31+72]
	153 Move X24, [X31+48]
	154 Move X23, [X31+56]
	155 Move X26, [X31+32]
	156 Move X25, [X31+40]
	157 Move X28, [X31+16]
	158 Move X27, [X31+24]
	159 Move X30, [X31+96]
	160 Return X0
	161 Call 0x1C17F28
	162 Call 0x1C17F20

Method: System.UInt64 ToUInt64(System.Object value)

Disassembly:
	0x033AFFD8 LDR X8, [X8 + 0xDF8]
	0x033AFFDC LDR X0, [X8]
	0x033AFFE0 LDR W8, [X0 + 0xE0]
	0x033AFFE4 CBNZ W8, 0x33AFFEC
	0x033AFFE8 BL 0x1C16DFC
	0x033AFFEC ADRP X8, 0xD45000
	0x033AFFF0 LDR X8, [X8 + 0x758]
	0x033AFFF4 LDR X9, [X20]
	0x033AFFF8 LDR X1, [X8]
	0x033AFFFC LDR X8, [X9 + 0x40]
	0x033B0000 LDR X9, [X1 + 0x40]
	0x033B0004 CMP X8, X9
	0x033B0008 B.NE 0x33B0070
	0x033B000C MOV X0, X20
	0x033B0010 BL 0x1C16E08
	0x033B0014 LDR X1, [X0]
	0x033B0018 MOV X0, X19
	0x033B001C LDP X20, X19, [X31 + 0x10]
	0x033B0020 LDP X30, X21, [X31], #0x20
	0x033B0024 B 0x33B00EC
	0x033B0028 ADRP X0, 0xD48000
	0x033B002C LDR X0, [X0 + 0x528]
	0x033B0030 BL 0x1C16D08
	0x033B0034 BL 0x1C16F10
	0x033B0038 MOV X19, X0
	0x033B003C ADRP X0, 0xD4D000
	0x033B0040 LDR X0, [X0 + 0xEC8]
	0x033B0044 BL 0x1C16D08
	0x033B0048 MOV X1, X0
	0x033B004C MOV X0, X19
	0x033B0050 MOV X2, X31
	0x033B0054 BL 0x330E100
	0x033B0058 ADRP X0, 0xD7B000
	0x033B005C LDR X0, [X0 + 0xED8]
	0x033B0060 BL 0x1C16D08
	0x033B0064 MOV X1, X0
	0x033B0068 MOV X0, X19
	0x033B006C BL 0x1C16DEC
	0x033B0070 MOV X0, X20
	0x033B0074 BL 0x1C171E0
	0x033B0078 ADRP X0, 0xD7B000
	0x033B007C LDR X0, [X0 + 0x3F0]
	0x033B0080 BL 0x1C16D08
	0x033B0084 MOV X1, X31
	0x033B0088 BL 0x33BDD84
	0x033B008C MOV X19, X0
	0x033B0090 ADRP X0, 0xD4B000
	0x033B0094 LDR X0, [X0 + 0x578]
	0x033B0098 BL 0x1C16D08
	0x033B009C BL 0x1C16F10
	0x033B00A0 MOV X20, X0
	0x033B00A4 ADRP X0, 0xD4D000
	0x033B00A8 LDR X0, [X0 + 0xEC8]
	0x033B00AC BL 0x1C16D08
	0x033B00B0 MOV X2, X0
	0x033B00B4 MOV X0, X20
	0x033B00B8 MOV X1, X19
	0x033B00BC MOV X3, X31
	0x033B00C0 BL 0x330E16C
	0x033B00C4 ADRP X0, 0xD7B000
	0x033B00C8 LDR X0, [X0 + 0xED8]
	0x033B00CC BL 0x1C16D08
	0x033B00D0 MOV X1, X0
	0x033B00D4 MOV X0, X20
	0x033B00D8 BL 0x1C16DEC
	0x033B00DC MOVZ W8, 0x4
	0x033B00E0 STR W8, [X0 + 0xC]
	0x033B00E4 STR X1, [X0 + 0x28]
	0x033B00E8 RET
	0x033B00EC STR X30, [X31 - 0x30]!
	0x033B00F0 STP X22, X21, [X31 + 0x10]
	0x033B00F4 STP X20, X19, [X31 + 0x20]
	0x033B00F8 ADRP X21, 0x102D000
	0x033B00FC ADRP X22, 0xD43000
	0x033B0100 LDRB W8, [X21 + 0x1A5]
	0x033B0104 LDR X22, [X22 + 0x6C0]
	0x033B0108 MOV X19, X1
	0x033B010C MOV X20, X0
	0x033B0110 TBNZ X8, 0x0, 0x33B0140
	0x033B0114 ADRP X0, 0xD43000
	0x033B0118 LDR X0, [X0 + 0xDF8]
	0x033B011C BL 0x1C16CF4
	0x033B0120 ADRP X0, 0xD6C000
	0x033B0124 LDR X0, [X0 + 0x4E8]
	0x033B0128 BL 0x1C16CF4
	0x033B012C ADRP X0, 0xD43000
	0x033B0130 LDR X0, [X0 + 0x6C0]
	0x033B0134 BL 0x1C16CF4
	0x033B0138 MOVZ W8, 0x1
	0x033B013C STRB W8, [X21 + 0x1A5]
	0x033B0140 LDR X0, [X22]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x102F000
	006 Move X20, 0xD4E000
	007 Move W8, [X21+384]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xD4E000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move X0, 0xD46000
	018 Move X0, [X0+3144]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+384], W8
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X19
	028 Move X1, X31
	029 Call Convert.GetTypeCode, X0
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move W8, 1
	032 NotImplemented "Instruction LSLV not yet implemented."
	033 Move W8, 0x1558
	034 And W31, W9, W8
	035 Move X8, 0xD46000
	036 Move X8, [X8+3144]
	037 Move X0, [X8]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X31
	043 Call CultureInfo.get_InvariantCulture
	044 Move X8, [X20]
	045 Move X20, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {51}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X0, X19
	052 Move X1, X20
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X2, X31
	056 Move X30, [X31+32]
	057 Move X21, [X31+40]
	058 Call Convert.ToUInt64, X0, X1
	059 Return X0
	060 Move W10, 2720
	061 And W31, W9, W10
	062 Move X0, [X8]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1C17DFC
	067 Move X0, X31
	068 Call CultureInfo.get_InvariantCulture
	069 Move X8, [X20]
	070 Move X20, X0
	071 Move W9, [X8+224]
	072 Compare W9, 0
	073 JumpIfNotEqual {76}
	074 Move X0, X8
	075 Call 0x1C17DFC
	076 Move X0, X19
	077 Move X1, X20
	078 Move X20, [X31+16]
	079 Move X19, [X31+24]
	080 Move X2, X31
	081 Move X30, [X31+32]
	082 Move X21, [X31+40]
	083 Call Convert.ToInt64, X0, X1
	084 Return X0
	085 Move X0, 0xD7C000
	086 Move X0, [X0+968]
	087 Call 0x1C17D08
	088 Move X1, X31
	089 Call Environment.GetResourceString, X0
	090 Move X19, X0
	091 Move X0, 0xD44000
	092 Move X0, [X0+1456]
	093 Call 0x1C17D08
	094 Call 0x1C17F10
	095 Move X1, X19
	096 Move X2, X31
	097 Move X20, X0
	098 Call InvalidOperationException..ctor, X0, X1
	099 Move X0, 0xD7C000
	100 Move X0, [X0+3736]
	101 Call 0x1C17D08
	102 Move X1, X0
	103 Move X0, X20
	104 Call 0x1C17DEC

Method: System.Int32 InternalCompareTo(System.Object o1, System.Object o2)

Disassembly:
	0x033B0144 LDR W8, [X0 + 0xE0]

ISIL:
	001 Call 0x1C889C8
	002 Return X0

Method: System.RuntimeType InternalGetUnderlyingType(System.RuntimeType enumType)

Disassembly:
	0x033B0148 CBNZ W8, 0x33B0150

ISIL:
	001 Call 0x1C88B74
	002 Return X0

Method: System.Boolean GetEnumValuesAndNames(System.RuntimeType enumType, out System.UInt64[] values, out System.String[] names)

Disassembly:
	0x033AF710 LDP X23, X28, [X0 + 0x10]

ISIL:
	001 Call 0x1C88864
	002 Return X0

Method: System.Object InternalBoxEnum(System.RuntimeType enumType, System.Int64 value)

Disassembly:
	0x033B014C BL 0x1C16DFC

ISIL:
	001 Call 0x1C88B50
	002 Return X0

Method: System.Boolean TryParse(System.String value, out TEnum result)

Disassembly:
	0x021B1A58 CBZ X19, 0x21B1C4C
	0x021B1A5C CBZ X21, 0x21B1C58
	0x021B1A60 LDR X8, [X20 + 0x38]
	0x021B1A64 LDR X1, [X8]
	0x021B1A68 LDRB W8, [X1 + 0x135]
	0x021B1A6C TBNZ X8, 0x0, 0x21B1A7C
	0x021B1A70 MOV X0, X1
	0x021B1A74 BL 0x1C5C684
	0x021B1A78 MOV X1, X0
	0x021B1A7C LDR X8, [X19]
	0x021B1A80 LDRH W9, [X8 + 0x12E]
	0x021B1A84 CBZ X9, 0x21B1AA8
	0x021B1A88 LDR X10, [X8 + 0xB0]
	0x021B1A8C ADD X10, X10, 0x8
	0x021B1A90 LDUR X11, [X10 - 0x8]
	0x021B1A94 CMP X11, X1
	0x021B1A98 B.EQ 0x21B1AB8
	0x021B1A9C SUBS X9, X9, 0x1
	0x021B1AA0 ADD X10, X10, 0x10
	0x021B1AA4 B.NE 0x21B1A90
	0x021B1AA8 MOV X0, X19
	0x021B1AAC MOV W2, W31
	0x021B1AB0 BL 0x1C5C788
	0x021B1AB4 B 0x21B1AC4
	0x021B1AB8 LDRSW X9, [X10]
	0x021B1ABC ADD X8, X8, X9, 0x4, LSL
	0x021B1AC0 ADD X0, X8, 0x138
	0x021B1AC4 LDP X8, X1, [X0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+56]
	006 Move X20, X2
	007 Move X19, X1
	008 Move X21, X0
	009 Compare X8, 0
	010 JumpIfNotEqual {19}
	011 Move X0, 0x1F43000
	012 Move X0, [X0+3576]
	013 Call 0x1C17CF4
	014 Move X8, [X20+56]
	015 Compare X8, 0
	016 JumpIfNotEqual {19}
	017 Move X0, X20
	018 Call 0x1C5D6E0
	019 Move X8, 0x1F43000
	020 Move X8, [X8+3576]
	021 Move X0, [X8]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X8, [X20+56]
	027 Move X2, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X0, X21
	031 Move X3, [X8+8]
	032 Move W1, W31
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call 0x21B1B3C, X0, X1, X2
	036 Return X0

Method: System.Boolean TryParse(System.String value, System.Boolean ignoreCase, out TEnum result)

Disassembly:
	0x021B1B3C TBZ X0, 0x0, 0x21B1BC8
	0x021B1B40 LDR X8, [X20 + 0x38]
	0x021B1B44 LDR X1, [X8 + 0x18]
	0x021B1B48 LDRB W8, [X1 + 0x135]
	0x021B1B4C TBNZ X8, 0x0, 0x21B1B5C
	0x021B1B50 MOV X0, X1
	0x021B1B54 BL 0x1C5C684
	0x021B1B58 MOV X1, X0
	0x021B1B5C LDR X8, [X19]
	0x021B1B60 LDRH W9, [X8 + 0x12E]
	0x021B1B64 CBZ X9, 0x21B1B88
	0x021B1B68 LDR X10, [X8 + 0xB0]
	0x021B1B6C ADD X10, X10, 0x8
	0x021B1B70 LDUR X11, [X10 - 0x8]
	0x021B1B74 CMP X11, X1
	0x021B1B78 B.EQ 0x21B1B98
	0x021B1B7C SUBS X9, X9, 0x1
	0x021B1B80 ADD X10, X10, 0x10
	0x021B1B84 B.NE 0x21B1B70
	0x021B1B88 MOV X0, X19
	0x021B1B8C MOV W2, W31
	0x021B1B90 BL 0x1C5C788
	0x021B1B94 B 0x21B1BA4
	0x021B1B98 LDRSW X9, [X10]
	0x021B1B9C ADD X8, X8, X9, 0x4, LSL
	0x021B1BA0 ADD X0, X8, 0x138
	0x021B1BA4 LDP X8, X1, [X0]
	0x021B1BA8 MOV X0, X19
	0x021B1BAC BLR X8
	0x021B1BB0 MOV X1, X0
	0x021B1BB4 LDR X0, [X21 + 0x40]
	0x021B1BB8 LDR X8, [X21 + 0x18]
	0x021B1BBC LDR X2, [X21 + 0x28]
	0x021B1BC0 BLR X8
	0x021B1BC4 TBNZ X0, 0x0, 0x21B1AE0
	0x021B1BC8 MOV X20, X31
	0x021B1BCC EOR W21, W22, 0x1
	0x021B1BD0 CBZ X19, 0x21B1C34
	0x021B1BD4 ADRP X10, 0x1F42000
	0x021B1BD8 LDR X8, [X19]
	0x021B1BDC LDR X10, [X10 + 0xE00]
	0x021B1BE0 LDRH W9, [X8 + 0x12E]
	0x021B1BE4 LDR X1, [X10]
	0x021B1BE8 CBZ X9, 0x21B1C0C
	0x021B1BEC LDR X10, [X8 + 0xB0]
	0x021B1BF0 ADD X10, X10, 0x8
	0x021B1BF4 LDUR X11, [X10 - 0x8]
	0x021B1BF8 CMP X11, X1
	0x021B1BFC B.EQ 0x21B1C1C
	0x021B1C00 SUBS X9, X9, 0x1
	0x021B1C04 ADD X10, X10, 0x10
	0x021B1C08 B.NE 0x21B1BF4
	0x021B1C0C MOV X0, X19
	0x021B1C10 MOV W2, W31
	0x021B1C14 BL 0x1C5C788
	0x021B1C18 B 0x21B1C28
	0x021B1C1C LDRSW X9, [X10]
	0x021B1C20 ADD X8, X8, X9, 0x4, LSL
	0x021B1C24 ADD X0, X8, 0x138
	0x021B1C28 LDP X8, X1, [X0]
	0x021B1C2C MOV X0, X19
	0x021B1C30 BLR X8
	0x021B1C34 CBNZ X20, 0x21B1C78
	0x021B1C38 AND W0, W21, 0x1
	0x021B1C3C LDP X20, X19, [X31 + 0x20]
	0x021B1C40 LDP X22, X21, [X31 + 0x10]
	0x021B1C44 LDP X30, X23, [X31], #0x30
	0x021B1C48 RET
	0x021B1C4C ADRP X0, 0x1F4D000
	0x021B1C50 LDR X0, [X0 + 0x580]
	0x021B1C54 B 0x21B1C60
	0x021B1C58 ADRP X0, 0x1F6A000
	0x021B1C5C LDR X0, [X0 + 0x8F0]
	0x021B1C60 BL 0x1C16D08
	0x021B1C64 MOV X1, X31
	0x021B1C68 BL 0x35DEB28
	0x021B1C6C MOV X1, X20
	0x021B1C70 BL 0x1C16DEC
	0x021B1C74 BL 0x1C16F20
	0x021B1C78 MOV X0, X20
	0x021B1C7C BL 0x1C16F18

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+56], X23
	004 Move [X31+64], X22
	005 Move [X31+72], X21
	006 Move [X31+80], X20
	007 Move [X31+88], X19
	008 Move X8, [X3+56]
	009 Move X20, X3
	010 Move X19, X2
	011 Move W22, W1
	012 Move X21, X0
	013 Compare X8, 0
	014 JumpIfNotEqual {26}
	015 Move X0, 0x1F43000
	016 Move X0, [X0+3576]
	017 Call 0x1C17CF4
	018 Move X0, 0x1F43000
	019 Move X0, [X0+1728]
	020 Call 0x1C17CF4
	021 Move X8, [X20+56]
	022 Compare X8, 0
	023 JumpIfNotEqual {26}
	024 Move X0, X20
	025 Call 0x1C5D6E0
	026 NotImplemented "Instruction MOVI not yet implemented."
	027 Add X0, X31, 0
	028 Move W1, W31
	029 Move X2, X31
	030 Move [X19], W31
	031 Move [X31+16], V0
	032 Move [X31+24], V0
	033 Move [X31], V0
	034 Call EnumResult.Init, X0, X1
	035 Move X8, 0x1F43000
	036 Move X8, [X8+1728]
	037 Move X0, [X8]
	038 Move X8, [X20+56]
	039 Move W9, [X0+224]
	040 Move X23, [X8+16]
	041 Compare W9, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X23
	045 Move X1, X31
	046 Call Type.GetTypeFromHandle, X0
	047 Move X8, 0x1F43000
	048 Move X8, [X8+3576]
	049 Move X23, X0
	050 Move X8, [X8]
	051 Move W9, [X8+224]
	052 Compare W9, 0
	053 JumpIfNotEqual {56}
	054 Move X0, X8
	055 Call 0x1C17DFC
	056 And W2, W22, 1
	057 Add X3, X31, 0
	058 Move X0, X23
	059 Move X1, X21
	060 Move X4, X31
	061 Call Enum.TryParseEnum, X0, X1, X2, X3
	062 Move W21, W0
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfNotEqual {88}
	067 Move X8, [X20+56]
	068 Move X20, [X31]
	069 Move X1, [X8+8]
	070 Move W8, [X1+309]
	071 Move TEMP, X8
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfEqual {78}
	075 Move X0, X1
	076 Call 0x1C5D684
	077 Move X1, X0
	078 Compare X20, 0
	079 JumpIfEqual {97}
	080 Move X8, [X20]
	081 Move X9, [X1+64]
	082 Move X0, X20
	083 Move X8, [X8+64]
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Call 0x1C17E08
	086 Move W8, [X0]
	087 Move [X19], W8
	088 And W0, W21, 1
	089 Move X20, [X31+80]
	090 Move X19, [X31+88]
	091 Move X22, [X31+64]
	092 Move X21, [X31+72]
	093 Move X30, [X31+48]
	094 Move X23, [X31+56]
	095 Add X31, X31, 96
	096 Return X0
	097 Call 0x1C17F20
	098 Call 0x1C181E0

Method: System.Object Parse(System.Type enumType, System.String value)

Disassembly:
	0x033B0150 MOV X0, X20
	0x033B0154 MOV X1, X31
	0x033B0158 MOV X2, X31
	0x033B015C BL 0x3395194
	0x033B0160 TBNZ X0, 0x0, 0x33B01FC
	0x033B0164 CBZ X20, 0x33B0244
	0x033B0168 LDR X8, [X20]
	0x033B016C MOV X0, X20
	0x033B0170 LDR X9, [X8 + 0x588]
	0x033B0174 LDR X1, [X8 + 0x590]
	0x033B0178 BLR X9
	0x033B017C TBZ X0, 0x0, 0x33B0248
	0x033B0180 ADRP X9, 0xD6C000
	0x033B0184 LDR X9, [X9 + 0x4E8]
	0x033B0188 LDR X8, [X20]
	0x033B018C LDR X0, [X9]
	0x033B0190 LDRB W10, [X8 + 0x130]
	0x033B0194 LDRB W9, [X0 + 0x130]
	0x033B0198 CMP W10, W9
	0x033B019C B.CS 0x33B01A8
	0x033B01A0 MOV X20, X31
	0x033B01A4 B 0x33B01BC
	0x033B01A8 LDR X8, [X8 + 0xC8]
	0x033B01AC ADD X8, X8, X9, 0x3, LSL
	0x033B01B0 LDUR X8, [X8 - 0x8]
	0x033B01B4 CMP X8, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x102E000
	007 Move X22, 0xD44000
	008 Move W8, [X21+385]
	009 Move X22, [X22+3576]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD44000
	017 Move X0, [X0+3576]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+385], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move W2, W31
	033 Move X30, [X31+48]

Method: System.Object Parse(System.Type enumType, System.String value, System.Boolean ignoreCase)

Disassembly:
	0x033B01B8 CSEL X20, X20, X31, EQ
	0x033B01BC LDR W8, [X0 + 0xE0]
	0x033B01C0 CBNZ W8, 0x33B01C8
	0x033B01C4 BL 0x1C16DFC
	0x033B01C8 CBZ X20, 0x33B0254
	0x033B01CC ADRP X8, 0xD43000
	0x033B01D0 LDR X8, [X8 + 0xDF8]
	0x033B01D4 LDR X0, [X8]
	0x033B01D8 LDR W8, [X0 + 0xE0]
	0x033B01DC CBNZ W8, 0x33B01E4
	0x033B01E0 BL 0x1C16DFC
	0x033B01E4 MOV X0, X20
	0x033B01E8 MOV X1, X19
	0x033B01EC LDP X20, X19, [X31 + 0x20]
	0x033B01F0 LDP X22, X21, [X31 + 0x10]
	0x033B01F4 LDR X30, [X31], #0x30
	0x033B01F8 B 0x1C87B50
	0x033B01FC ADRP X0, 0xD48000
	0x033B0200 LDR X0, [X0 + 0x528]
	0x033B0204 BL 0x1C16D08
	0x033B0208 BL 0x1C16F10
	0x033B020C MOV X19, X0
	0x033B0210 ADRP X0, 0xD7B000
	0x033B0214 LDR X0, [X0 + 0x3C0]
	0x033B0218 BL 0x1C16D08
	0x033B021C MOV X1, X0
	0x033B0220 MOV X0, X19
	0x033B0224 MOV X2, X31
	0x033B0228 BL 0x330E100
	0x033B022C ADRP X0, 0xD7B000
	0x033B0230 LDR X0, [X0 + 0xEE0]
	0x033B0234 BL 0x1C16D08
	0x033B0238 MOV X1, X0
	0x033B023C MOV X0, X19
	0x033B0240 BL 0x1C16DEC
	0x033B0244 BL 0x1C16F20
	0x033B0248 ADRP X0, 0xD7B000
	0x033B024C LDR X0, [X0 + 0x3B8]
	0x033B0250 B 0x33B025C
	0x033B0254 ADRP X0, 0xD75000
	0x033B0258 LDR X0, [X0 + 0xE58]
	0x033B025C BL 0x1C16D08
	0x033B0260 MOV X1, X31
	0x033B0264 BL 0x33BDD84
	0x033B0268 MOV X19, X0
	0x033B026C ADRP X0, 0xD4B000
	0x033B0270 LDR X0, [X0 + 0x578]
	0x033B0274 BL 0x1C16D08

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+56], X23
	004 Move [X31+64], X22
	005 Move [X31+72], X21
	006 Move [X31+80], X20
	007 Move [X31+88], X19
	008 Move X23, 0x102E000
	009 Move X22, 0xD44000
	010 Move W8, [X23+386]
	011 Move X22, [X22+3576]
	012 Move W21, W2
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xD44000
	020 Move X0, [X0+3576]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X23+386], W8
	024 NotImplemented "Instruction MOVI not yet implemented."
	025 Add X0, X31, 0
	026 Move W1, 1
	027 Move [X31+16], V0
	028 Move [X31+24], V0
	029 Move [X31], V0
	030 Call EnumResult.Init, X0, X1
	031 Move X0, [X22]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 And W2, W21, 1
	037 Add X3, X31, 0
	038 Move X0, X20
	039 Move X1, X19
	040 Call Enum.TryParseEnum, X0, X1, X2, X3
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {54}
	045 Move X0, [X31]
	046 Move X20, [X31+80]
	047 Move X19, [X31+88]
	048 Move X22, [X31+64]
	049 Move X21, [X31+72]
	050 Move X30, [X31+48]
	051 Move X23, [X31+56]
	052 Add X31, X31, 96
	053 Return X0
	054 Add X0, X31, 0
	055 Call EnumResult.GetEnumParseException, X0
	056 Move X19, X0
	057 Move X0, 0xD7C000
	058 Move X0, [X0+3744]
	059 Call 0x1C17D08
	060 Move X1, X0
	061 Move X0, X19
	062 Call 0x1C17DEC

Method: System.Boolean TryParseEnum(System.Type enumType, System.String value, System.Boolean ignoreCase, ref System.Enum/EnumResult parseResult)

Disassembly:
	0x033B02E0 BL 0x1C16CF4
	0x033B02E4 MOVZ W8, 0x1
	0x033B02E8 STRB W8, [X20 + 0x185]
	0x033B02EC LDR X0, [X21]
	0x033B02F0 LDR W8, [X0 + 0xE0]
	0x033B02F4 CBNZ W8, 0x33B02FC
	0x033B02F8 BL 0x1C16DFC
	0x033B02FC MOV X0, X19
	0x033B0300 MOV X1, X31
	0x033B0304 MOV X2, X31
	0x033B0308 BL 0x3395194
	0x033B030C TBNZ X0, 0x0, 0x33B0330
	0x033B0310 CBZ X19, 0x33B0378
	0x033B0314 LDR X8, [X19]
	0x033B0318 MOV X0, X19
	0x033B031C LDP X20, X19, [X31 + 0x10]
	0x033B0320 LDR X2, [X8 + 0x898]
	0x033B0324 LDR X1, [X8 + 0x8A0]
	0x033B0328 LDP X30, X21, [X31], #0x20
	0x033B032C BR X2
	0x033B0330 ADRP X0, 0xD48000
	0x033B0334 LDR X0, [X0 + 0x528]
	0x033B0338 BL 0x1C16D08
	0x033B033C BL 0x1C16F10
	0x033B0340 MOV X19, X0
	0x033B0344 ADRP X0, 0xD7B000
	0x033B0348 LDR X0, [X0 + 0x3C0]
	0x033B034C BL 0x1C16D08
	0x033B0350 MOV X1, X0
	0x033B0354 MOV X0, X19
	0x033B0358 MOV X2, X31
	0x033B035C BL 0x330E100
	0x033B0360 ADRP X0, 0xD7B000
	0x033B0364 LDR X0, [X0 + 0xEE8]
	0x033B0368 BL 0x1C16D08
	0x033B036C MOV X1, X0
	0x033B0370 MOV X0, X19
	0x033B0374 BL 0x1C16DEC
	0x033B0378 BL 0x1C16F20
	0x033B037C STP X30, X21, [X31 - 0x20]!
	0x033B0380 STP X20, X19, [X31 + 0x10]
	0x033B0384 ADRP X20, 0x102D000
	0x033B0388 ADRP X21, 0xD43000
	0x033B038C LDRB W8, [X20 + 0x186]
	0x033B0390 LDR X21, [X21 + 0xDF8]
	0x033B0394 MOV X19, X0
	0x033B0398 TBNZ X8, 0x0, 0x33B03B0
	0x033B039C ADRP X0, 0xD43000
	0x033B03A0 LDR X0, [X0 + 0xDF8]
	0x033B03A4 BL 0x1C16CF4
	0x033B03A8 MOVZ W8, 0x1
	0x033B03AC STRB W8, [X20 + 0x186]
	0x033B03B0 LDR X0, [X21]
	0x033B03B4 LDR W8, [X0 + 0xE0]
	0x033B03B8 CBNZ W8, 0x33B03C0
	0x033B03BC BL 0x1C16DFC
	0x033B03C0 MOV X0, X19
	0x033B03C4 MOV W1, W31
	0x033B03C8 BL 0x33AE5C4
	0x033B03CC CBZ X0, 0x33B03E0
	0x033B03D0 LDR X0, [X0 + 0x10]
	0x033B03D4 LDP X20, X19, [X31 + 0x10]
	0x033B03D8 LDP X30, X21, [X31], #0x20
	0x033B03DC RET
	0x033B03E0 BL 0x1C16F20
	0x033B03E4 STP X30, X21, [X31 - 0x20]!
	0x033B03E8 STP X20, X19, [X31 + 0x10]
	0x033B03EC ADRP X20, 0x102D000
	0x033B03F0 ADRP X21, 0xD43000
	0x033B03F4 LDRB W8, [X20 + 0x188]
	0x033B03F8 LDR X21, [X21 + 0x6C0]
	0x033B03FC MOV X19, X0
	0x033B0400 TBNZ X8, 0x0, 0x33B0418
	0x033B0404 ADRP X0, 0xD43000
	0x033B0408 LDR X0, [X0 + 0x6C0]
	0x033B040C BL 0x1C16CF4
	0x033B0410 MOVZ W8, 0x1
	0x033B0414 STRB W8, [X20 + 0x188]
	0x033B0418 LDR X0, [X21]
	0x033B041C LDR W8, [X0 + 0xE0]
	0x033B0420 CBNZ W8, 0x33B0428
	0x033B0424 BL 0x1C16DFC
	0x033B0428 MOV X0, X19
	0x033B042C MOV X1, X31
	0x033B0430 MOV X2, X31
	0x033B0434 BL 0x3395194
	0x033B0438 TBNZ X0, 0x0, 0x33B045C
	0x033B043C CBZ X19, 0x33B04A4
	0x033B0440 LDR X8, [X19]
	0x033B0444 MOV X0, X19
	0x033B0448 LDP X20, X19, [X31 + 0x10]
	0x033B044C LDR X2, [X8 + 0x268]
	0x033B0450 LDR X1, [X8 + 0x270]
	0x033B0454 LDP X30, X21, [X31], #0x20
	0x033B0458 BR X2
	0x033B045C ADRP X0, 0xD48000
	0x033B0460 LDR X0, [X0 + 0x528]
	0x033B0464 BL 0x1C16D08
	0x033B0468 BL 0x1C16F10
	0x033B046C MOV X19, X0
	0x033B0470 ADRP X0, 0xD7B000
	0x033B0474 LDR X0, [X0 + 0x3C0]
	0x033B0478 BL 0x1C16D08
	0x033B047C MOV X1, X0
	0x033B0480 MOV X0, X19
	0x033B0484 MOV X2, X31
	0x033B0488 BL 0x330E100
	0x033B048C ADRP X0, 0xD7B000
	0x033B0490 LDR X0, [X0 + 0xEF0]
	0x033B0494 BL 0x1C16D08
	0x033B0498 MOV X1, X0
	0x033B049C MOV X0, X19
	0x033B04A0 BL 0x1C16DEC
	0x033B04A4 BL 0x1C16F20
	0x033B04A8 STP X30, X21, [X31 - 0x20]!
	0x033B04AC STP X20, X19, [X31 + 0x10]
	0x033B04B0 ADRP X20, 0x102D000
	0x033B04B4 ADRP X21, 0xD43000
	0x033B04B8 LDRB W8, [X20 + 0x189]
	0x033B04BC LDR X21, [X21 + 0xDF8]
	0x033B04C0 MOV X19, X0
	0x033B04C4 TBNZ X8, 0x0, 0x33B04DC
	0x033B04C8 ADRP X0, 0xD43000
	0x033B04CC LDR X0, [X0 + 0xDF8]
	0x033B04D0 BL 0x1C16CF4
	0x033B04D4 MOVZ W8, 0x1
	0x033B04D8 STRB W8, [X20 + 0x189]
	0x033B04DC LDR X0, [X21]
	0x033B04E0 LDR W8, [X0 + 0xE0]
	0x033B04E4 CBNZ W8, 0x33B04EC
	0x033B04E8 BL 0x1C16DFC
	0x033B04EC MOVZ W1, 0x1
	0x033B04F0 MOV X0, X19
	0x033B04F4 BL 0x33AE5C4
	0x033B04F8 CBZ X0, 0x33B050C
	0x033B04FC LDR X0, [X0 + 0x18]
	0x033B0500 LDP X20, X19, [X31 + 0x10]
	0x033B0504 LDP X30, X21, [X31], #0x20
	0x033B0508 RET
	0x033B050C BL 0x1C16F20
	0x033B0510 STR X30, [X31 - 0x30]!
	0x033B0514 STP X22, X21, [X31 + 0x10]
	0x033B0518 STP X20, X19, [X31 + 0x20]
	0x033B051C ADRP X21, 0x102D000
	0x033B0520 ADRP X22, 0xD43000
	0x033B0524 LDRB W8, [X21 + 0x1A0]
	0x033B0528 LDR X22, [X22 + 0x6C0]
	0x033B052C MOV W19, W1
	0x033B0530 MOV X20, X0
	0x033B0534 TBNZ X8, 0x0, 0x33B0564
	0x033B0538 ADRP X0, 0xD43000
	0x033B053C LDR X0, [X0 + 0xDF8]
	0x033B0540 BL 0x1C16CF4
	0x033B0544 ADRP X0, 0xD6C000
	0x033B0548 LDR X0, [X0 + 0x4E8]
	0x033B054C BL 0x1C16CF4
	0x033B0550 ADRP X0, 0xD43000
	0x033B0554 LDR X0, [X0 + 0x6C0]
	0x033B0558 BL 0x1C16CF4
	0x033B055C MOVZ W8, 0x1
	0x033B0560 STRB W8, [X21 + 0x1A0]
	0x033B0564 LDR X0, [X22]
	0x033B0568 LDR W8, [X0 + 0xE0]
	0x033B056C CBNZ W8, 0x33B0574
	0x033B0570 BL 0x1C16DFC
	0x033B0574 MOV X0, X20
	0x033B0578 MOV X1, X31
	0x033B057C MOV X2, X31
	0x033B0580 BL 0x3395194
	0x033B0584 TBNZ X0, 0x0, 0x33B0620
	0x033B0588 CBZ X20, 0x33B0668
	0x033B058C LDR X8, [X20]
	0x033B0590 MOV X0, X20
	0x033B0594 LDR X9, [X8 + 0x588]
	0x033B0598 LDR X1, [X8 + 0x590]
	0x033B059C BLR X9
	0x033B05A0 TBZ X0, 0x0, 0x33B066C
	0x033B05A4 ADRP X9, 0xD6C000
	0x033B05A8 LDR X9, [X9 + 0x4E8]
	0x033B05AC LDR X8, [X20]
	0x033B05B0 LDR X0, [X9]
	0x033B05B4 LDRB W10, [X8 + 0x130]
	0x033B05B8 LDRB W9, [X0 + 0x130]
	0x033B05BC CMP W10, W9
	0x033B05C0 B.CS 0x33B05CC
	0x033B05C4 MOV X20, X31
	0x033B05C8 B 0x33B05E0
	0x033B05CC LDR X8, [X8 + 0xC8]
	0x033B05D0 ADD X8, X8, X9, 0x3, LSL
	0x033B05D4 LDUR X8, [X8 - 0x8]
	0x033B05D8 CMP X8, X0
	0x033B05DC CSEL X20, X20, X31, EQ
	0x033B05E0 LDR W8, [X0 + 0xE0]
	0x033B05E4 CBNZ W8, 0x33B05EC
	0x033B05E8 BL 0x1C16DFC
	0x033B05EC CBZ X20, 0x33B0678
	0x033B05F0 ADRP X8, 0xD43000
	0x033B05F4 LDR X8, [X8 + 0xDF8]
	0x033B05F8 LDR X0, [X8]
	0x033B05FC LDR W8, [X0 + 0xE0]
	0x033B0600 CBNZ W8, 0x33B0608
	0x033B0604 BL 0x1C16DFC
	0x033B0608 SXTW X1, W19
	0x033B060C MOV X0, X20
	0x033B0610 LDP X20, X19, [X31 + 0x20]
	0x033B0614 LDP X22, X21, [X31 + 0x10]
	0x033B0618 LDR X30, [X31], #0x30
	0x033B061C B 0x1C87B50
	0x033B0620 ADRP X0, 0xD48000
	0x033B0624 LDR X0, [X0 + 0x528]
	0x033B0628 BL 0x1C16D08
	0x033B062C BL 0x1C16F10
	0x033B0630 MOV X19, X0
	0x033B0634 ADRP X0, 0xD7B000
	0x033B0638 LDR X0, [X0 + 0x3C0]
	0x033B063C BL 0x1C16D08
	0x033B0640 MOV X1, X0
	0x033B0644 MOV X0, X19
	0x033B0648 MOV X2, X31
	0x033B064C BL 0x330E100
	0x033B0650 ADRP X0, 0xD7B000
	0x033B0654 LDR X0, [X0 + 0xEF8]
	0x033B0658 BL 0x1C16D08
	0x033B065C MOV X1, X0
	0x033B0660 MOV X0, X19
	0x033B0664 BL 0x1C16DEC
	0x033B0668 BL 0x1C16F20
	0x033B066C ADRP X0, 0xD7B000
	0x033B0670 LDR X0, [X0 + 0x3B8]
	0x033B0674 B 0x33B0680
	0x033B0678 ADRP X0, 0xD75000
	0x033B067C LDR X0, [X0 + 0xE58]
	0x033B0680 BL 0x1C16D08
	0x033B0684 MOV X1, X31
	0x033B0688 BL 0x33BDD84
	0x033B068C MOV X19, X0
	0x033B0690 ADRP X0, 0xD4B000
	0x033B0694 LDR X0, [X0 + 0x578]
	0x033B0698 BL 0x1C16D08
	0x033B069C BL 0x1C16F10
	0x033B06A0 MOV X20, X0
	0x033B06A4 ADRP X0, 0xD7B000
	0x033B06A8 LDR X0, [X0 + 0x3C0]
	0x033B06AC BL 0x1C16D08
	0x033B06B0 MOV X2, X0
	0x033B06B4 MOV X0, X20
	0x033B06B8 MOV X1, X19
	0x033B06BC MOV X3, X31
	0x033B06C0 BL 0x330E16C
	0x033B06C4 ADRP X0, 0xD7B000
	0x033B06C8 LDR X0, [X0 + 0xEF8]
	0x033B06CC BL 0x1C16D08
	0x033B06D0 MOV X1, X0
	0x033B06D4 MOV X0, X20
	0x033B06D8 BL 0x1C16DEC
	0x033B06DC STR X30, [X31 - 0x30]!
	0x033B06E0 STP X22, X21, [X31 + 0x10]
	0x033B06E4 STP X20, X19, [X31 + 0x20]
	0x033B06E8 ADRP X21, 0x102D000
	0x033B06EC ADRP X22, 0xD43000
	0x033B06F0 LDRB W8, [X21 + 0x19E]
	0x033B06F4 LDR X22, [X22 + 0x6C0]
	0x033B06F8 MOV W19, W1
	0x033B06FC MOV X20, X0
	0x033B0700 TBNZ X8, 0x0, 0x33B0730
	0x033B0704 ADRP X0, 0xD43000
	0x033B0708 LDR X0, [X0 + 0xDF8]
	0x033B070C BL 0x1C16CF4
	0x033B0710 ADRP X0, 0xD6C000
	0x033B0714 LDR X0, [X0 + 0x4E8]
	0x033B0718 BL 0x1C16CF4
	0x033B071C ADRP X0, 0xD43000
	0x033B0720 LDR X0, [X0 + 0x6C0]
	0x033B0724 BL 0x1C16CF4
	0x033B0728 MOVZ W8, 0x1
	0x033B072C STRB W8, [X21 + 0x19E]
	0x033B0730 LDR X0, [X22]
	0x033B0734 LDR W8, [X0 + 0xE0]
	0x033B0738 CBNZ W8, 0x33B0740
	0x033B073C BL 0x1C16DFC
	0x033B0740 MOV X0, X20
	0x033B0744 MOV X1, X31
	0x033B0748 MOV X2, X31
	0x033B074C BL 0x3395194
	0x033B0750 TBNZ X0, 0x0, 0x33B07EC
	0x033B0754 CBZ X20, 0x33B0834
	0x033B0758 LDR X8, [X20]
	0x033B075C MOV X0, X20
	0x033B0760 LDR X9, [X8 + 0x588]
	0x033B0764 LDR X1, [X8 + 0x590]
	0x033B0768 BLR X9
	0x033B076C TBZ X0, 0x0, 0x33B0838
	0x033B0770 ADRP X9, 0xD6C000
	0x033B0774 LDR X9, [X9 + 0x4E8]
	0x033B0778 LDR X8, [X20]
	0x033B077C LDR X0, [X9]
	0x033B0780 LDRB W10, [X8 + 0x130]
	0x033B0784 LDRB W9, [X0 + 0x130]
	0x033B0788 CMP W10, W9
	0x033B078C B.CS 0x33B0798
	0x033B0790 MOV X20, X31
	0x033B0794 B 0x33B07AC
	0x033B0798 LDR X8, [X8 + 0xC8]
	0x033B079C ADD X8, X8, X9, 0x3, LSL
	0x033B07A0 LDUR X8, [X8 - 0x8]
	0x033B07A4 CMP X8, X0
	0x033B07A8 CSEL X20, X20, X31, EQ
	0x033B07AC LDR W8, [X0 + 0xE0]
	0x033B07B0 CBNZ W8, 0x33B07B8
	0x033B07B4 BL 0x1C16DFC
	0x033B07B8 CBZ X20, 0x33B0844
	0x033B07BC ADRP X8, 0xD43000
	0x033B07C0 LDR X8, [X8 + 0xDF8]
	0x033B07C4 LDR X0, [X8]
	0x033B07C8 LDR W8, [X0 + 0xE0]
	0x033B07CC CBNZ W8, 0x33B07D4
	0x033B07D0 BL 0x1C16DFC
	0x033B07D4 SXTB X1, W19
	0x033B07D8 MOV X0, X20
	0x033B07DC LDP X20, X19, [X31 + 0x20]
	0x033B07E0 LDP X22, X21, [X31 + 0x10]
	0x033B07E4 LDR X30, [X31], #0x30
	0x033B07E8 B 0x1C87B50
	0x033B07EC ADRP X0, 0xD48000
	0x033B07F0 LDR X0, [X0 + 0x528]
	0x033B07F4 BL 0x1C16D08
	0x033B07F8 BL 0x1C16F10
	0x033B07FC MOV X19, X0
	0x033B0800 ADRP X0, 0xD7B000
	0x033B0804 LDR X0, [X0 + 0x3C0]
	0x033B0808 BL 0x1C16D08
	0x033B080C MOV X1, X0
	0x033B0810 MOV X0, X19
	0x033B0814 MOV X2, X31
	0x033B0818 BL 0x330E100
	0x033B081C ADRP X0, 0xD7B000
	0x033B0820 LDR X0, [X0 + 0xF00]
	0x033B0824 BL 0x1C16D08
	0x033B0828 MOV X1, X0
	0x033B082C MOV X0, X19
	0x033B0830 BL 0x1C16DEC
	0x033B0834 BL 0x1C16F20
	0x033B0838 ADRP X0, 0xD7B000
	0x033B083C LDR X0, [X0 + 0x3B8]
	0x033B0840 B 0x33B084C
	0x033B0844 ADRP X0, 0xD75000
	0x033B0848 LDR X0, [X0 + 0xE58]
	0x033B084C BL 0x1C16D08
	0x033B0850 MOV X1, X31
	0x033B0854 BL 0x33BDD84
	0x033B0858 MOV X19, X0
	0x033B085C ADRP X0, 0xD4B000
	0x033B0860 LDR X0, [X0 + 0x578]
	0x033B0864 BL 0x1C16D08
	0x033B0868 BL 0x1C16F10
	0x033B086C MOV X20, X0
	0x033B0870 ADRP X0, 0xD7B000
	0x033B0874 LDR X0, [X0 + 0x3C0]
	0x033B0878 BL 0x1C16D08
	0x033B087C MOV X2, X0
	0x033B0880 MOV X0, X20
	0x033B0884 MOV X1, X19
	0x033B0888 MOV X3, X31
	0x033B088C BL 0x330E16C
	0x033B0890 ADRP X0, 0xD7B000
	0x033B0894 LDR X0, [X0 + 0xF00]
	0x033B0898 BL 0x1C16D08
	0x033B089C MOV X1, X0
	0x033B08A0 MOV X0, X20
	0x033B08A4 BL 0x1C16DEC
	0x033B08A8 STR X30, [X31 - 0x30]!
	0x033B08AC STP X22, X21, [X31 + 0x10]
	0x033B08B0 STP X20, X19, [X31 + 0x20]
	0x033B08B4 ADRP X21, 0x102D000
	0x033B08B8 ADRP X22, 0xD43000
	0x033B08BC LDRB W8, [X21 + 0x19F]
	0x033B08C0 LDR X22, [X22 + 0x6C0]
	0x033B08C4 MOV W19, W1
	0x033B08C8 MOV X20, X0
	0x033B08CC TBNZ X8, 0x0, 0x33B08FC
	0x033B08D0 ADRP X0, 0xD43000
	0x033B08D4 LDR X0, [X0 + 0xDF8]
	0x033B08D8 BL 0x1C16CF4
	0x033B08DC ADRP X0, 0xD6C000
	0x033B08E0 LDR X0, [X0 + 0x4E8]
	0x033B08E4 BL 0x1C16CF4
	0x033B08E8 ADRP X0, 0xD43000
	0x033B08EC LDR X0, [X0 + 0x6C0]
	0x033B08F0 BL 0x1C16CF4
	0x033B08F4 MOVZ W8, 0x1
	0x033B08F8 STRB W8, [X21 + 0x19F]
	0x033B08FC LDR X0, [X22]
	0x033B0900 LDR W8, [X0 + 0xE0]
	0x033B0904 CBNZ W8, 0x33B090C
	0x033B0908 BL 0x1C16DFC
	0x033B090C MOV X0, X20
	0x033B0910 MOV X1, X31
	0x033B0914 MOV X2, X31
	0x033B0918 BL 0x3395194
	0x033B091C TBNZ X0, 0x0, 0x33B09B8
	0x033B0920 CBZ X20, 0x33B0A00
	0x033B0924 LDR X8, [X20]
	0x033B0928 MOV X0, X20
	0x033B092C LDR X9, [X8 + 0x588]
	0x033B0930 LDR X1, [X8 + 0x590]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X23, 0x102E000
	015 Move X24, 0xD44000
	016 Move W8, [X23+387]
	017 Move X24, [X24+1728]
	018 Move X19, X3
	019 Move W21, W2
	020 Move X22, X1
	021 Move X20, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {55}
	026 Move X0, 0xD46000
	027 Move X0, [X0+368]
	028 Call 0x1C17CF4
	029 Move X0, 0xD4D000
	030 Move X0, [X0+2536]
	031 Call 0x1C17CF4
	032 Move X0, 0xD46000
	033 Move X0, [X0+3144]
	034 Call 0x1C17CF4
	035 Move X0, 0xD44000
	036 Move X0, [X0+3576]
	037 Call 0x1C17CF4
	038 Move X0, 0xD6D000
	039 Move X0, [X0+1256]
	040 Call 0x1C17CF4
	041 Move X0, 0xD44000
	042 Move X0, [X0+1728]
	043 Call 0x1C17CF4
	044 Move X0, 0xD4E000
	045 Move X0, [X0+3784]
	046 Call 0x1C17CF4
	047 Move X0, 0xD7C000
	048 Move X0, [X0+3752]
	049 Call 0x1C17CF4
	050 Move X0, 0xD7C000
	051 Move X0, [X0+3760]
	052 Call 0x1C17CF4
	053 Move W8, 1
	054 Move [X23+387], W8
	055 Move X0, [X24]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move X0, X20
	061 Move X1, X31
	062 Move X2, X31
	063 Call Type.op_Equality, X0, X1
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfEqual {215}
	068 Move X8, 0xD6D000
	069 Move X8, [X8+1256]
	070 Move X0, [X8]
	071 Compare X20, 0
	072 JumpIfEqual {77}
	073 Move X8, [X20]
	074 Move W9, [X0+304]
	075 Move W10, [X8+304]
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move X23, X31
	078 Move X8, [X8+200]
	079 Add X8, X8, X9
	080 NotImplemented "Instruction LDUR not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 NotImplemented "Instruction CSEL not yet implemented."
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {87}
	086 Call 0x1C17DFC
	087 Compare X23, 0
	088 JumpIfEqual {233}
	089 Compare X20, 0
	090 JumpIfEqual {376}
	091 Move X8, [X20]
	092 Move X0, X20
	093 Move X9, [X8+1416]
	094 Move X1, [X8+1424]
	095 NotImplemented "Instruction BLR not yet implemented."
	096 Move TEMP, X0
	097 And TEMP, TEMP, 1
	098 Compare TEMP, 1
	099 JumpIfNotEqual {235}
	100 Compare X22, 0
	101 JumpIfEqual {187}
	102 Move X0, X22
	103 Move X1, X31
	104 Call String.Trim, X0
	105 Compare X0, 0
	106 JumpIfEqual {376}
	107 Move W8, [X0+16]
	108 Move X22, X0
	109 Compare W8, 0
	110 JumpIfEqual {193}
	111 Move X0, X22
	112 Move W1, W31
	113 Move X2, X31
	114 Call String.get_Chars, X0, X1
	115 Move X8, 0xD46000
	116 Move X8, [X8+368]
	117 Move W24, W0
	118 Move X8, [X8]
	119 Move W9, [X8+224]
	120 Compare W9, 0
	121 JumpIfNotEqual {124}
	122 Move X0, X8
	123 Call 0x1C17DFC
	124 Move W0, W24
	125 Move X1, X31
	126 Call Char.IsDigit, X0
	127 Move TEMP, X0
	128 And TEMP, TEMP, 1
	129 Compare TEMP, 1
	130 JumpIfEqual {143}
	131 Move X0, X22
	132 Move W1, W31
	133 Move X2, X31
	134 Call String.get_Chars, X0, X1
	135 And W8, W0, 0xFFFF
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Move X0, X22
	138 Move W1, W31
	139 Move X2, X31
	140 Call String.get_Chars, X0, X1
	141 And W8, W0, 0xFFFF
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Move X26, 0xD44000
	144 Move X26, [X26+3576]
	145 Move X0, [X26]
	146 Move W8, [X0+224]
	147 Compare W8, 0
	148 JumpIfNotEqual {150}
	149 Call 0x1C17DFC
	150 Move X0, X20
	151 Call Enum.GetUnderlyingType, X0
	152 Move X8, 0xD46000
	153 Move X8, [X8+3144]
	154 Move X24, X0
	155 Move X8, [X8]
	156 Move W9, [X8+224]
	157 Compare W9, 0
	158 JumpIfNotEqual {161}
	159 Move X0, X8
	160 Call 0x1C17DFC
	161 Move X0, X31
	162 Call CultureInfo.get_InvariantCulture
	163 Move X8, 0xD4D000
	164 Move X8, [X8+2536]
	165 Move X25, X0
	166 Move X0, [X8]
	167 Move W8, [X0+224]
	168 Compare W8, 0
	169 JumpIfNotEqual {171}
	170 Call 0x1C17DFC
	171 Move X0, X22
	172 Move X1, X24
	173 Move X2, X25
	174 Move X3, X31
	175 Call Convert.ChangeType, X0, X1, X2
	176 Move X24, X0
	177 Move X0, [X26]
	178 Move W8, [X0+224]
	179 Compare W8, 0
	180 JumpIfNotEqual {182}
	181 Call 0x1C17DFC
	182 Move X0, X20
	183 Move X1, X24
	184 Call Enum.ToObject, X0, X1
	185 Move [X19], X0
	186 Move W0, 1
	187 Move X8, 0xD4E000
	188 Move X8, [X8+3784]
	189 Move W1, 2
	190 Move X0, X19
	191 Move X2, [X8]
	192 Call EnumResult.SetFailure, X0, X1, X2
	193 Move X8, 0xD7C000
	194 Move X8, [X8+3760]
	195 Move W1, 1
	196 Move X0, X19
	197 Move X3, X31
	198 Move X2, [X8]
	199 Call EnumResult.SetFailure, X0, X1, X2, X3
	200 Move W0, W31
	201 Move X20, [X31+96]
	202 Move X19, [X31+104]
	203 Move X22, [X31+80]
	204 Move X21, [X31+88]
	205 Move X24, [X31+64]
	206 Move X23, [X31+72]
	207 Move X26, [X31+48]
	208 Move X25, [X31+56]
	209 Move X28, [X31+32]
	210 Move X27, [X31+40]
	211 Move X29, [X31+16]
	212 Move X30, [X31+24]
	213 Add X31, X31, 112
	214 Return X0
	215 Move X0, 0xD49000
	216 Move X0, [X0+1320]
	217 Call 0x1C17D08
	218 Call 0x1C17F10
	219 Move X19, X0
	220 Move X0, 0xD7C000
	221 Move X0, [X0+960]
	222 Call 0x1C17D08
	223 Move X1, X0
	224 Move X0, X19
	225 Move X2, X31
	226 Call ArgumentNullException..ctor, X0, X1
	227 Move X0, 0xD7C000
	228 Move X0, [X0+3768]
	229 Call 0x1C17D08
	230 Move X1, X0
	231 Move X0, X19
	232 Call 0x1C17DEC
	233 Move X0, 0xD76000
	234 Move X0, [X0+3672]
	235 Move X0, 0xD7C000
	236 Move X0, [X0+952]
	237 Call 0x1C17D08
	238 Move X1, X31
	239 Call Environment.GetResourceString, X0
	240 Move X19, X0
	241 Move X0, 0xD4C000
	242 Move X0, [X0+1400]
	243 Call 0x1C17D08
	244 Call 0x1C17F10
	245 Move X20, X0
	246 Move X0, 0xD7C000
	247 Move X0, [X0+960]
	248 Call 0x1C17D08
	249 Move X2, X0
	250 Move X0, X20
	251 Move X1, X19
	252 Move X3, X31
	253 Call ArgumentException..ctor, X0, X1, X2
	254 Move X0, 0xD7C000
	255 Move X0, [X0+3768]
	256 Call 0x1C17D08
	257 Move X1, X0
	258 Move X0, X20
	259 Call 0x1C17DEC
	260 Move X24, X0
	261 NotImplemented "Instruction CMP not yet implemented."
	262 Move X0, X24
	263 Call 0x3EB2AD0
	264 Move X24, X0
	265 Move X0, 0xD71000
	266 Move X0, [X0+3080]
	267 Call 0x1C17D08
	268 Move X8, [X24]
	269 Move X1, [X8]
	270 Call 0x1C18270
	271 Move TEMP, X0
	272 And TEMP, TEMP, 1
	273 Compare TEMP, 1
	274 JumpIfNotEqual {378}
	275 Call 0x3EB2AE0
	276 Move X24, 0xD44000
	277 Move X24, [X24+3576]
	278 Move X0, [X24]
	279 Move W8, [X0+224]
	280 Compare W8, 0
	281 JumpIfNotEqual {284}
	282 Call 0x1C17DFC
	283 Move X0, [X24]
	284 Move X8, [X0+184]
	285 Move X0, X22
	286 Move X2, X31
	287 Move X1, [X8]
	288 Call String.Split, X0, X1
	289 Move X24, X0
	290 Move W1, 1
	291 Move X0, X23
	292 Call Enum.GetCachedValuesAndNames, X0, X1
	293 Compare X0, 0
	294 JumpIfEqual {376}
	295 Compare X24, 0
	296 JumpIfEqual {376}
	297 Move W8, [X24+24]
	298 NotImplemented "Instruction CMP not yet implemented."
	299 Move X23, [X0+16]
	300 Move X28, [X0+24]
	301 Move W26, W31
	302 Move X27, X31
	303 Add X9, X23, 32
	304 Add X25, X28, 32
	305 Move [X31], X9
	306 NotImplemented "Instruction CMP not yet implemented."
	307 Add X29, X24, W26
	308 Add X29, X29, 32
	309 Move X0, [X29]
	310 Compare X0, 0
	311 JumpIfEqual {376}
	312 Move X1, X31
	313 Call String.Trim, X0
	314 Move W8, [X24+24]
	315 NotImplemented "Instruction CMP not yet implemented."
	316 Move [X31+8], X27
	317 Move [X29], X0
	318 Compare X28, 0
	319 JumpIfEqual {376}
	320 Move X8, [X28+24]
	321 NotImplemented "Instruction CMP not yet implemented."
	322 Move X27, X31
	323 And X8, X8, 0
	324 NotImplemented "Instruction CMP not yet implemented."
	325 Move W8, [X24+24]
	326 NotImplemented "Instruction CMP not yet implemented."
	327 Move X0, [X25]
	328 Move X1, [X29]
	329 Move TEMP, X21
	330 And TEMP, TEMP, 1
	331 Compare TEMP, 1
	332 JumpIfNotEqual {338}
	333 Move W2, 5
	334 Move X3, X31
	335 Call String.Compare, X0, X1, X2
	336 Compare W0, 0
	337 JumpIfNotEqual {346}
	338 Compare X0, 0
	339 JumpIfEqual {376}
	340 Move X2, X31
	341 Call String.Equals, X0, X1
	342 Move TEMP, X0
	343 And TEMP, TEMP, 1
	344 Compare TEMP, 1
	345 JumpIfEqual {349}
	346 Move W8, [X28+24]
	347 Add X27, X27, 1
	348 NotImplemented "Instruction CMP not yet implemented."
	349 Compare X23, 0
	350 JumpIfEqual {376}
	351 Move W8, [X23+24]
	352 NotImplemented "Instruction CMP not yet implemented."
	353 Move X9, [X31]
	354 Move W8, [X24+24]
	355 Add W26, W26, 1
	356 Move X9, [X9]
	357 Move X27, [X31+8]
	358 NotImplemented "Instruction CMP not yet implemented."
	359 Or X27, X9, X27
	360 Move X8, 0xD7C000
	361 Move X8, [X8+3752]
	362 Move W1, 3
	363 Move X0, X19
	364 Move X3, X22
	365 Move X27, X31
	366 Move X8, 0xD44000
	367 Move X8, [X8+3576]
	368 Move X0, [X8]
	369 Move W8, [X0+224]
	370 Compare W8, 0
	371 JumpIfNotEqual {373}
	372 Call 0x1C17DFC
	373 Move X0, X20
	374 Move X1, X27
	375 Call Enum.ToObject, X0, X1
	376 Call 0x1C17F20
	377 Call 0x1C17F28
	378 Move X0, 0xD44000
	379 Move X0, [X0+2000]
	380 Call 0x1C17D08
	381 Move X8, [X24]
	382 Move X1, [X8]
	383 Call 0x1C18270
	384 Move TEMP, X0
	385 And TEMP, TEMP, 1
	386 Compare TEMP, 1
	387 JumpIfNotEqual {399}
	388 Move X20, [X24]
	389 Call 0x3EB2AE0
	390 Move W8, [X19+8]
	391 Compare W8, 0
	392 JumpIfNotEqual {397}
	393 Move W0, W31
	394 Move W8, 4
	395 Move [X19+12], W8
	396 Move [X19+40], X20
	397 Move X0, X20
	398 Call 0x1C17F18
	399 Move W0, 8
	400 Call 0x3EB2AF0
	401 Move X8, [X24]
	402 Move [X0], X8
	403 Move X1, 0xB05000
	404 Add X1, X1, 3672
	405 Move X2, X31
	406 Call 0x3EB2B00
	407 Move X24, X0
	408 Call 0x3EB2AE0
	409 Move X0, X24
	410 Call 0x1D2D690
	411 Move X24, X0
	412 NotImplemented "Instruction CMP not yet implemented."
	413 Move X0, X24
	414 Call 0x3EB2AD0
	415 Move X20, X0
	416 Move X0, 0xD44000
	417 Move X0, [X0+2000]
	418 Call 0x1C17D08
	419 Move X8, [X20]
	420 Move X1, [X8]
	421 Call 0x1C18270
	422 Move TEMP, X0
	423 And TEMP, TEMP, 1
	424 Compare TEMP, 1
	425 JumpIfNotEqual {427}
	426 Move X20, [X20]
	427 Move W0, 8
	428 Call 0x3EB2AF0
	429 Move X8, [X20]
	430 Move [X0], X8
	431 Move X1, 0xB05000
	432 Add X1, X1, 3672
	433 Move X2, X31
	434 Call 0x3EB2B00
	435 Move X24, X0
	436 Call 0x3EB2AE0
	437 Call 0x1991590

Method: System.Type GetUnderlyingType(System.Type enumType)

Disassembly:
	0x033B0B1C LDRB W9, [X0 + 0x130]
	0x033B0B20 CMP W10, W9
	0x033B0B24 B.CS 0x33B0B30
	0x033B0B28 MOV X20, X31
	0x033B0B2C B 0x33B0B44
	0x033B0B30 LDR X8, [X8 + 0xC8]
	0x033B0B34 ADD X8, X8, X9, 0x3, LSL
	0x033B0B38 LDUR X8, [X8 - 0x8]
	0x033B0B3C CMP X8, X0
	0x033B0B40 CSEL X20, X20, X31, EQ
	0x033B0B44 LDR W8, [X0 + 0xE0]
	0x033B0B48 CBNZ W8, 0x33B0B50
	0x033B0B4C BL 0x1C16DFC
	0x033B0B50 CBZ X20, 0x33B0BDC
	0x033B0B54 ADRP X8, 0xD43000
	0x033B0B58 LDR X8, [X8 + 0xDF8]
	0x033B0B5C LDR X0, [X8]
	0x033B0B60 LDR W8, [X0 + 0xE0]
	0x033B0B64 CBNZ W8, 0x33B0B6C
	0x033B0B68 BL 0x1C16DFC
	0x033B0B6C MOV X0, X20
	0x033B0B70 MOV X1, X19
	0x033B0B74 LDP X20, X19, [X31 + 0x20]
	0x033B0B78 LDP X22, X21, [X31 + 0x10]
	0x033B0B7C LDR X30, [X31], #0x30
	0x033B0B80 B 0x1C87B50
	0x033B0B84 ADRP X0, 0xD48000
	0x033B0B88 LDR X0, [X0 + 0x528]
	0x033B0B8C BL 0x1C16D08
	0x033B0B90 BL 0x1C16F10
	0x033B0B94 MOV X19, X0
	0x033B0B98 ADRP X0, 0xD7B000
	0x033B0B9C LDR X0, [X0 + 0x3C0]
	0x033B0BA0 BL 0x1C16D08
	0x033B0BA4 MOV X1, X0
	0x033B0BA8 MOV X0, X19
	0x033B0BAC MOV X2, X31
	0x033B0BB0 BL 0x330E100
	0x033B0BB4 ADRP X0, 0xD7B000
	0x033B0BB8 LDR X0, [X0 + 0xF10]
	0x033B0BBC BL 0x1C16D08
	0x033B0BC0 MOV X1, X0
	0x033B0BC4 MOV X0, X19
	0x033B0BC8 BL 0x1C16DEC
	0x033B0BCC BL 0x1C16F20
	0x033B0BD0 ADRP X0, 0xD7B000
	0x033B0BD4 LDR X0, [X0 + 0x3B8]
	0x033B0BD8 B 0x33B0BE4
	0x033B0BDC ADRP X0, 0xD75000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x102E000
	006 Move X21, 0xD44000
	007 Move W8, [X20+388]
	008 Move X21, [X21+1728]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD44000
	015 Move X0, [X0+1728]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+388], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X1, X31
	026 Move X2, X31
	027 Call Type.op_Equality, X0, X1
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {43}
	032 Compare X19, 0
	033 JumpIfEqual {61}
	034 Move X8, [X19]
	035 Move X0, X19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X2, [X8+2184]
	039 Move X1, [X8+2192]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 CallNoReturn X2
	043 Move X0, 0xD49000
	044 Move X0, [X0+1320]
	045 Call 0x1C17D08
	046 Call 0x1C17F10
	047 Move X19, X0
	048 Move X0, 0xD7C000
	049 Move X0, [X0+960]
	050 Call 0x1C17D08
	051 Move X1, X0
	052 Move X0, X19
	053 Move X2, X31
	054 Call ArgumentNullException..ctor, X0, X1
	055 Move X0, 0xD7C000
	056 Move X0, [X0+3792]
	057 Call 0x1C17D08
	058 Move X1, X0
	059 Move X0, X19
	060 Call 0x1C17DEC
	061 Call 0x1C17F20

Method: System.Array GetValues(System.Type enumType)

Disassembly:
	0x033B12B8 LDR X0, [X0 + 0x528]
	0x033B12BC BL 0x1C16D08
	0x033B12C0 BL 0x1C16F10
	0x033B12C4 MOV X19, X0
	0x033B12C8 ADRP X0, 0xD7A000
	0x033B12CC LDR X0, [X0 + 0x3C0]
	0x033B12D0 BL 0x1C16D08
	0x033B12D4 MOV X1, X0
	0x033B12D8 MOV X0, X19
	0x033B12DC MOV X2, X31
	0x033B12E0 BL 0x330E100
	0x033B12E4 ADRP X0, 0xD7A000
	0x033B12E8 LDR X0, [X0 + 0xF30]
	0x033B12EC BL 0x1C16D08
	0x033B12F0 MOV X1, X0
	0x033B12F4 MOV X0, X19
	0x033B12F8 BL 0x1C16DEC
	0x033B12FC BL 0x1C16F20
	0x033B1300 ADRP X0, 0xD7A000
	0x033B1304 LDR X0, [X0 + 0x3B8]
	0x033B1308 B 0x33B1314
	0x033B130C ADRP X0, 0xD74000
	0x033B1310 LDR X0, [X0 + 0xE58]
	0x033B1314 BL 0x1C16D08
	0x033B1318 MOV X1, X31
	0x033B131C BL 0x33BDD84
	0x033B1320 MOV X19, X0
	0x033B1324 ADRP X0, 0xD4A000
	0x033B1328 LDR X0, [X0 + 0x578]
	0x033B132C BL 0x1C16D08
	0x033B1330 BL 0x1C16F10
	0x033B1334 MOV X20, X0
	0x033B1338 ADRP X0, 0xD7A000
	0x033B133C LDR X0, [X0 + 0x3C0]
	0x033B1340 BL 0x1C16D08
	0x033B1344 MOV X2, X0
	0x033B1348 MOV X0, X20
	0x033B134C MOV X1, X19
	0x033B1350 MOV X3, X31
	0x033B1354 BL 0x330E16C
	0x033B1358 ADRP X0, 0xD7A000
	0x033B135C LDR X0, [X0 + 0xF30]
	0x033B1360 BL 0x1C16D08
	0x033B1364 MOV X1, X0
	0x033B1368 MOV X0, X20
	0x033B136C BL 0x1C16DEC
	0x033B1370 STR X30, [X31 - 0x30]!
	0x033B1374 STP X22, X21, [X31 + 0x10]
	0x033B1378 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x102D000
	006 Move X21, 0xD43000
	007 Move W8, [X20+389]
	008 Move X21, [X21+1728]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD43000
	015 Move X0, [X0+1728]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+389], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X1, X31
	026 Move X2, X31
	027 Call Type.op_Equality, X0, X1
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {43}
	032 Compare X19, 0
	033 JumpIfEqual {61}
	034 Move X8, [X19]
	035 Move X0, X19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X2, [X8+2200]
	039 Move X1, [X8+2208]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 CallNoReturn X2
	043 Move X0, 0xD48000
	044 Move X0, [X0+1320]
	045 Call 0x1C17D08
	046 Call 0x1C17F10
	047 Move X19, X0
	048 Move X0, 0xD7B000
	049 Move X0, [X0+960]
	050 Call 0x1C17D08
	051 Move X1, X0
	052 Move X0, X19
	053 Move X2, X31
	054 Call ArgumentNullException..ctor, X0, X1
	055 Move X0, 0xD7B000
	056 Move X0, [X0+3816]
	057 Call 0x1C17D08
	058 Move X1, X0
	059 Move X0, X19
	060 Call 0x1C17DEC
	061 Call 0x1C17F20

Method: System.UInt64[] InternalGetValues(System.RuntimeType enumType)

Disassembly:
	0x033B137C ADRP X21, 0x102C000
	0x033B1380 ADRP X22, 0xD42000
	0x033B1384 LDRB W8, [X21 + 0x1A7]
	0x033B1388 LDR X22, [X22 + 0x6C0]
	0x033B138C MOV W19, W1
	0x033B1390 MOV X20, X0
	0x033B1394 TBNZ X8, 0x0, 0x33B13C4
	0x033B1398 ADRP X0, 0xD42000
	0x033B139C LDR X0, [X0 + 0xDF8]
	0x033B13A0 BL 0x1C16CF4
	0x033B13A4 ADRP X0, 0xD6B000
	0x033B13A8 LDR X0, [X0 + 0x4E8]
	0x033B13AC BL 0x1C16CF4
	0x033B13B0 ADRP X0, 0xD42000
	0x033B13B4 LDR X0, [X0 + 0x6C0]
	0x033B13B8 BL 0x1C16CF4
	0x033B13BC MOVZ W8, 0x1
	0x033B13C0 STRB W8, [X21 + 0x1A7]
	0x033B13C4 LDR X0, [X22]
	0x033B13C8 LDR W8, [X0 + 0xE0]
	0x033B13CC CBNZ W8, 0x33B13D4
	0x033B13D0 BL 0x1C16DFC
	0x033B13D4 MOV X0, X20
	0x033B13D8 MOV X1, X31
	0x033B13DC MOV X2, X31
	0x033B13E0 BL 0x3395194

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x102D000
	006 Move X21, 0xD43000
	007 Move W8, [X20+390]
	008 Move X21, [X21+3576]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD43000
	015 Move X0, [X0+3576]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+390], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move W1, W31
	026 Call Enum.GetCachedValuesAndNames, X0, X1
	027 Compare X0, 0
	028 JumpIfEqual {35}
	029 Move X0, [X0+16]
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return X0
	035 Call 0x1C17F20

Method: System.String GetName(System.Type enumType, System.Object value)

Disassembly:
	0x033AFD00 LDR X9, [X20]
	0x033AFD04 LDR X1, [X8]
	0x033AFD08 LDR X8, [X9 + 0x40]
	0x033AFD0C LDR X9, [X1 + 0x40]
	0x033AFD10 CMP X8, X9
	0x033AFD14 B.NE 0x33B0070
	0x033AFD18 MOV X0, X20
	0x033AFD1C BL 0x1C16E08
	0x033AFD20 LDRB W1, [X0]
	0x033AFD24 MOV X0, X19
	0x033AFD28 LDP X20, X19, [X31 + 0x10]
	0x033AFD2C LDP X30, X21, [X31], #0x20
	0x033AFD30 B 0x33B1370
	0x033AFD34 ADRP X8, 0xD44000
	0x033AFD38 LDR X8, [X8 + 0xDF8]
	0x033AFD3C LDR X0, [X8]
	0x033AFD40 LDR W8, [X0 + 0xE0]
	0x033AFD44 CBNZ W8, 0x33AFD4C
	0x033AFD48 BL 0x1C16DFC
	0x033AFD4C ADRP X8, 0xD46000
	0x033AFD50 LDR X8, [X8 + 0x170]
	0x033AFD54 LDR X9, [X20]
	0x033AFD58 LDR X1, [X8]
	0x033AFD5C LDR X8, [X9 + 0x40]
	0x033AFD60 LDR X9, [X1 + 0x40]
	0x033AFD64 CMP X8, X9
	0x033AFD68 B.NE 0x33B0070
	0x033AFD6C MOV X0, X20
	0x033AFD70 BL 0x1C16E08
	0x033AFD74 LDRH W1, [X0]
	0x033AFD78 MOV X0, X19
	0x033AFD7C LDP X20, X19, [X31 + 0x10]
	0x033AFD80 LDP X30, X21, [X31], #0x20
	0x033AFD84 B 0x33B11A4
	0x033AFD88 ADRP X8, 0xD44000
	0x033AFD8C LDR X8, [X8 + 0xDF8]
	0x033AFD90 LDR X0, [X8]
	0x033AFD94 LDR W8, [X0 + 0xE0]
	0x033AFD98 CBNZ W8, 0x33AFDA0
	0x033AFD9C BL 0x1C16DFC
	0x033AFDA0 ADRP X8, 0xD6D000
	0x033AFDA4 LDR X8, [X8 + 0x6B0]
	0x033AFDA8 LDR X9, [X20]
	0x033AFDAC LDR X1, [X8]
	0x033AFDB0 LDR X8, [X9 + 0x40]
	0x033AFDB4 LDR X9, [X1 + 0x40]
	0x033AFDB8 CMP X8, X9
	0x033AFDBC B.NE 0x33B0070
	0x033AFDC0 MOV X0, X20
	0x033AFDC4 BL 0x1C16E08
	0x033AFDC8 LDRB W1, [X0]
	0x033AFDCC MOV X0, X19
	0x033AFDD0 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x102F000
	007 Move X22, 0xD45000
	008 Move W8, [X21+391]
	009 Move X22, [X22+1728]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD45000
	017 Move X0, [X0+1728]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+391], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X31
	028 Move X2, X31
	029 Call Type.op_Equality, X0, X1
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {47}
	034 Compare X20, 0
	035 JumpIfEqual {65}
	036 Move X8, [X20]
	037 Move X0, X20
	038 Move X1, X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X3, [X8+600]
	042 Move X2, [X8+608]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 CallNoReturn X3
	047 Move X0, 0xD4A000
	048 Move X0, [X0+1320]
	049 Call 0x1C17D08
	050 Call 0x1C17F10
	051 Move X19, X0
	052 Move X0, 0xD7D000
	053 Move X0, [X0+960]
	054 Call 0x1C17D08
	055 Move X1, X0
	056 Move X0, X19
	057 Move X2, X31
	058 Call ArgumentNullException..ctor, X0, X1
	059 Move X0, 0xD7D000
	060 Move X0, [X0+3728]
	061 Call 0x1C17D08
	062 Move X1, X0
	063 Move X0, X19
	064 Call 0x1C17DEC
	065 Call 0x1C17F20

Method: System.String[] GetNames(System.Type enumType)

Disassembly:
	0x033B13E4 TBNZ X0, 0x0, 0x33B1480
	0x033B13E8 CBZ X20, 0x33B14C8
	0x033B13EC LDR X8, [X20]
	0x033B13F0 MOV X0, X20
	0x033B13F4 LDR X9, [X8 + 0x588]
	0x033B13F8 LDR X1, [X8 + 0x590]
	0x033B13FC BLR X9
	0x033B1400 TBZ X0, 0x0, 0x33B14CC
	0x033B1404 ADRP X9, 0xD6B000
	0x033B1408 LDR X9, [X9 + 0x4E8]
	0x033B140C LDR X8, [X20]
	0x033B1410 LDR X0, [X9]
	0x033B1414 LDRB W10, [X8 + 0x130]
	0x033B1418 LDRB W9, [X0 + 0x130]
	0x033B141C CMP W10, W9
	0x033B1420 B.CS 0x33B142C
	0x033B1424 MOV X20, X31
	0x033B1428 B 0x33B1440
	0x033B142C LDR X8, [X8 + 0xC8]
	0x033B1430 ADD X8, X8, X9, 0x3, LSL
	0x033B1434 LDUR X8, [X8 - 0x8]
	0x033B1438 CMP X8, X0
	0x033B143C CSEL X20, X20, X31, EQ
	0x033B1440 LDR W8, [X0 + 0xE0]
	0x033B1444 CBNZ W8, 0x33B144C
	0x033B1448 BL 0x1C16DFC
	0x033B144C CBZ X20, 0x33B14D8
	0x033B1450 ADRP X8, 0xD42000
	0x033B1454 LDR X8, [X8 + 0xDF8]
	0x033B1458 LDR X0, [X8]
	0x033B145C LDR W8, [X0 + 0xE0]
	0x033B1460 CBNZ W8, 0x33B1468
	0x033B1464 BL 0x1C16DFC
	0x033B1468 AND X1, X19, 0x1
	0x033B146C MOV X0, X20
	0x033B1470 LDP X20, X19, [X31 + 0x20]
	0x033B1474 LDP X22, X21, [X31 + 0x10]
	0x033B1478 LDR X30, [X31], #0x30
	0x033B147C B 0x1C87B50
	0x033B1480 ADRP X0, 0xD47000
	0x033B1484 LDR X0, [X0 + 0x528]
	0x033B1488 BL 0x1C16D08
	0x033B148C BL 0x1C16F10
	0x033B1490 MOV X19, X0
	0x033B1494 ADRP X0, 0xD7A000
	0x033B1498 LDR X0, [X0 + 0x3C0]
	0x033B149C BL 0x1C16D08
	0x033B14A0 MOV X1, X0
	0x033B14A4 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x102D000
	006 Move X21, 0xD43000
	007 Move W8, [X20+392]
	008 Move X21, [X21+1728]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD43000
	015 Move X0, [X0+1728]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+392], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X1, X31
	026 Move X2, X31
	027 Call Type.op_Equality, X0, X1
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {43}
	032 Compare X19, 0
	033 JumpIfEqual {61}
	034 Move X8, [X19]
	035 Move X0, X19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X2, [X8+616]
	039 Move X1, [X8+624]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 CallNoReturn X2
	043 Move X0, 0xD48000
	044 Move X0, [X0+1320]
	045 Call 0x1C17D08
	046 Call 0x1C17F10
	047 Move X19, X0
	048 Move X0, 0xD7B000
	049 Move X0, [X0+960]
	050 Call 0x1C17D08
	051 Move X1, X0
	052 Move X0, X19
	053 Move X2, X31
	054 Call ArgumentNullException..ctor, X0, X1
	055 Move X0, 0xD7B000
	056 Move X0, [X0+3824]
	057 Call 0x1C17D08
	058 Move X1, X0
	059 Move X0, X19
	060 Call 0x1C17DEC
	061 Call 0x1C17F20

Method: System.String[] InternalGetNames(System.RuntimeType enumType)

Disassembly:
	0x033B14A8 MOV X2, X31
	0x033B14AC BL 0x330E100
	0x033B14B0 ADRP X0, 0xD7A000
	0x033B14B4 LDR X0, [X0 + 0xF38]
	0x033B14B8 BL 0x1C16D08
	0x033B14BC MOV X1, X0
	0x033B14C0 MOV X0, X19
	0x033B14C4 BL 0x1C16DEC
	0x033B14C8 BL 0x1C16F20
	0x033B14CC ADRP X0, 0xD7A000
	0x033B14D0 LDR X0, [X0 + 0x3B8]
	0x033B14D4 B 0x33B14E0
	0x033B14D8 ADRP X0, 0xD74000
	0x033B14DC LDR X0, [X0 + 0xE58]
	0x033B14E0 BL 0x1C16D08
	0x033B14E4 MOV X1, X31
	0x033B14E8 BL 0x33BDD84
	0x033B14EC MOV X19, X0
	0x033B14F0 ADRP X0, 0xD4A000
	0x033B14F4 LDR X0, [X0 + 0x578]
	0x033B14F8 BL 0x1C16D08
	0x033B14FC BL 0x1C16F10
	0x033B1500 MOV X20, X0
	0x033B1504 ADRP X0, 0xD7A000
	0x033B1508 LDR X0, [X0 + 0x3C0]
	0x033B150C BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x102D000
	006 Move X21, 0xD43000
	007 Move W8, [X20+393]
	008 Move X21, [X21+3576]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD43000
	015 Move X0, [X0+3576]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+393], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move W1, 1
	025 Move X0, X19
	026 Call Enum.GetCachedValuesAndNames, X0, X1
	027 Compare X0, 0
	028 JumpIfEqual {35}
	029 Move X0, [X0+24]
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return X0
	035 Call 0x1C17F20

Method: System.Object ToObject(System.Type enumType, System.Object value)

Disassembly:
	0x033B0BE0 LDR X0, [X0 + 0xE58]
	0x033B0BE4 BL 0x1C16D08
	0x033B0BE8 MOV X1, X31
	0x033B0BEC BL 0x33BDD84
	0x033B0BF0 MOV X19, X0
	0x033B0BF4 ADRP X0, 0xD4B000
	0x033B0BF8 LDR X0, [X0 + 0x578]
	0x033B0BFC BL 0x1C16D08
	0x033B0C00 BL 0x1C16F10
	0x033B0C04 MOV X20, X0
	0x033B0C08 ADRP X0, 0xD7B000
	0x033B0C0C LDR X0, [X0 + 0x3C0]
	0x033B0C10 BL 0x1C16D08
	0x033B0C14 MOV X2, X0
	0x033B0C18 MOV X0, X20
	0x033B0C1C MOV X1, X19
	0x033B0C20 MOV X3, X31
	0x033B0C24 BL 0x330E16C
	0x033B0C28 ADRP X0, 0xD7B000
	0x033B0C2C LDR X0, [X0 + 0xF10]
	0x033B0C30 BL 0x1C16D08
	0x033B0C34 MOV X1, X0
	0x033B0C38 MOV X0, X20
	0x033B0C3C BL 0x1C16DEC
	0x033B0C40 STR X30, [X31 - 0x30]!
	0x033B0C44 STP X22, X21, [X31 + 0x10]
	0x033B0C48 STP X20, X19, [X31 + 0x20]
	0x033B0C4C ADRP X21, 0x102D000
	0x033B0C50 ADRP X22, 0xD43000
	0x033B0C54 LDRB W8, [X21 + 0x1A3]
	0x033B0C58 LDR X22, [X22 + 0x6C0]
	0x033B0C5C MOV W19, W1
	0x033B0C60 MOV X20, X0
	0x033B0C64 TBNZ X8, 0x0, 0x33B0C94
	0x033B0C68 ADRP X0, 0xD43000
	0x033B0C6C LDR X0, [X0 + 0xDF8]
	0x033B0C70 BL 0x1C16CF4
	0x033B0C74 ADRP X0, 0xD6C000
	0x033B0C78 LDR X0, [X0 + 0x4E8]
	0x033B0C7C BL 0x1C16CF4
	0x033B0C80 ADRP X0, 0xD43000
	0x033B0C84 LDR X0, [X0 + 0x6C0]
	0x033B0C88 BL 0x1C16CF4
	0x033B0C8C MOVZ W8, 0x1
	0x033B0C90 STRB W8, [X21 + 0x1A3]
	0x033B0C94 LDR X0, [X22]
	0x033B0C98 LDR W8, [X0 + 0xE0]
	0x033B0C9C CBNZ W8, 0x33B0CA4
	0x033B0CA0 BL 0x1C16DFC
	0x033B0CA4 MOV X0, X20
	0x033B0CA8 MOV X1, X31
	0x033B0CAC MOV X2, X31
	0x033B0CB0 BL 0x3395194
	0x033B0CB4 TBNZ X0, 0x0, 0x33B0D50
	0x033B0CB8 CBZ X20, 0x33B0D98
	0x033B0CBC LDR X8, [X20]
	0x033B0CC0 MOV X0, X20
	0x033B0CC4 LDR X9, [X8 + 0x588]
	0x033B0CC8 LDR X1, [X8 + 0x590]
	0x033B0CCC BLR X9
	0x033B0CD0 TBZ X0, 0x0, 0x33B0D9C
	0x033B0CD4 ADRP X9, 0xD6C000
	0x033B0CD8 LDR X9, [X9 + 0x4E8]
	0x033B0CDC LDR X8, [X20]
	0x033B0CE0 LDR X0, [X9]
	0x033B0CE4 LDRB W10, [X8 + 0x130]
	0x033B0CE8 LDRB W9, [X0 + 0x130]
	0x033B0CEC CMP W10, W9
	0x033B0CF0 B.CS 0x33B0CFC
	0x033B0CF4 MOV X20, X31
	0x033B0CF8 B 0x33B0D10
	0x033B0CFC LDR X8, [X8 + 0xC8]
	0x033B0D00 ADD X8, X8, X9, 0x3, LSL
	0x033B0D04 LDUR X8, [X8 - 0x8]
	0x033B0D08 CMP X8, X0
	0x033B0D0C CSEL X20, X20, X31, EQ
	0x033B0D10 LDR W8, [X0 + 0xE0]
	0x033B0D14 CBNZ W8, 0x33B0D1C
	0x033B0D18 BL 0x1C16DFC
	0x033B0D1C CBZ X20, 0x33B0DA8
	0x033B0D20 ADRP X8, 0xD43000
	0x033B0D24 LDR X8, [X8 + 0xDF8]
	0x033B0D28 LDR X0, [X8]
	0x033B0D2C LDR W8, [X0 + 0xE0]
	0x033B0D30 CBNZ W8, 0x33B0D38
	0x033B0D34 BL 0x1C16DFC
	0x033B0D38 MOV W1, W19
	0x033B0D3C MOV X0, X20
	0x033B0D40 LDP X20, X19, [X31 + 0x20]
	0x033B0D44 LDP X22, X21, [X31 + 0x10]
	0x033B0D48 LDR X30, [X31], #0x30
	0x033B0D4C B 0x1C87B50
	0x033B0D50 ADRP X0, 0xD48000
	0x033B0D54 LDR X0, [X0 + 0x528]
	0x033B0D58 BL 0x1C16D08
	0x033B0D5C BL 0x1C16F10
	0x033B0D60 MOV X19, X0
	0x033B0D64 ADRP X0, 0xD7B000
	0x033B0D68 LDR X0, [X0 + 0x3C0]
	0x033B0D6C BL 0x1C16D08
	0x033B0D70 MOV X1, X0
	0x033B0D74 MOV X0, X19
	0x033B0D78 MOV X2, X31
	0x033B0D7C BL 0x330E100
	0x033B0D80 ADRP X0, 0xD7B000
	0x033B0D84 LDR X0, [X0 + 0xF18]
	0x033B0D88 BL 0x1C16D08
	0x033B0D8C MOV X1, X0
	0x033B0D90 MOV X0, X19
	0x033B0D94 BL 0x1C16DEC
	0x033B0D98 BL 0x1C16F20
	0x033B0D9C ADRP X0, 0xD7B000
	0x033B0DA0 LDR X0, [X0 + 0x3B8]
	0x033B0DA4 B 0x33B0DB0
	0x033B0DA8 ADRP X0, 0xD75000
	0x033B0DAC LDR X0, [X0 + 0xE58]
	0x033B0DB0 BL 0x1C16D08
	0x033B0DB4 MOV X1, X31
	0x033B0DB8 BL 0x33BDD84
	0x033B0DBC MOV X19, X0
	0x033B0DC0 ADRP X0, 0xD4B000
	0x033B0DC4 LDR X0, [X0 + 0x578]
	0x033B0DC8 BL 0x1C16D08
	0x033B0DCC BL 0x1C16F10
	0x033B0DD0 MOV X20, X0
	0x033B0DD4 ADRP X0, 0xD7B000
	0x033B0DD8 LDR X0, [X0 + 0x3C0]
	0x033B0DDC BL 0x1C16D08
	0x033B0DE0 MOV X2, X0
	0x033B0DE4 MOV X0, X20
	0x033B0DE8 MOV X1, X19
	0x033B0DEC MOV X3, X31
	0x033B0DF0 BL 0x330E16C
	0x033B0DF4 ADRP X0, 0xD7B000
	0x033B0DF8 LDR X0, [X0 + 0xF18]
	0x033B0DFC BL 0x1C16D08
	0x033B0E00 MOV X1, X0
	0x033B0E04 MOV X0, X20
	0x033B0E08 BL 0x1C16DEC
	0x033B0E0C STR X30, [X31 - 0x30]!
	0x033B0E10 STP X22, X21, [X31 + 0x10]
	0x033B0E14 STP X20, X19, [X31 + 0x20]
	0x033B0E18 ADRP X21, 0x102D000
	0x033B0E1C ADRP X22, 0xD43000
	0x033B0E20 LDRB W8, [X21 + 0x1A1]
	0x033B0E24 LDR X22, [X22 + 0x6C0]
	0x033B0E28 MOV W19, W1
	0x033B0E2C MOV X20, X0
	0x033B0E30 TBNZ X8, 0x0, 0x33B0E60
	0x033B0E34 ADRP X0, 0xD43000
	0x033B0E38 LDR X0, [X0 + 0xDF8]
	0x033B0E3C BL 0x1C16CF4
	0x033B0E40 ADRP X0, 0xD6C000
	0x033B0E44 LDR X0, [X0 + 0x4E8]
	0x033B0E48 BL 0x1C16CF4
	0x033B0E4C ADRP X0, 0xD43000
	0x033B0E50 LDR X0, [X0 + 0x6C0]
	0x033B0E54 BL 0x1C16CF4
	0x033B0E58 MOVZ W8, 0x1
	0x033B0E5C STRB W8, [X21 + 0x1A1]
	0x033B0E60 LDR X0, [X22]
	0x033B0E64 LDR W8, [X0 + 0xE0]
	0x033B0E68 CBNZ W8, 0x33B0E70
	0x033B0E6C BL 0x1C16DFC
	0x033B0E70 MOV X0, X20
	0x033B0E74 MOV X1, X31
	0x033B0E78 MOV X2, X31
	0x033B0E7C BL 0x3395194
	0x033B0E80 TBNZ X0, 0x0, 0x33B0F1C
	0x033B0E84 CBZ X20, 0x33B0F64
	0x033B0E88 LDR X8, [X20]
	0x033B0E8C MOV X0, X20
	0x033B0E90 LDR X9, [X8 + 0x588]
	0x033B0E94 LDR X1, [X8 + 0x590]
	0x033B0E98 BLR X9
	0x033B0E9C TBZ X0, 0x0, 0x33B0F68
	0x033B0EA0 ADRP X9, 0xD6C000
	0x033B0EA4 LDR X9, [X9 + 0x4E8]
	0x033B0EA8 LDR X8, [X20]
	0x033B0EAC LDR X0, [X9]
	0x033B0EB0 LDRB W10, [X8 + 0x130]
	0x033B0EB4 LDRB W9, [X0 + 0x130]
	0x033B0EB8 CMP W10, W9
	0x033B0EBC B.CS 0x33B0EC8
	0x033B0EC0 MOV X20, X31
	0x033B0EC4 B 0x33B0EDC
	0x033B0EC8 LDR X8, [X8 + 0xC8]
	0x033B0ECC ADD X8, X8, X9, 0x3, LSL
	0x033B0ED0 LDUR X8, [X8 - 0x8]
	0x033B0ED4 CMP X8, X0
	0x033B0ED8 CSEL X20, X20, X31, EQ
	0x033B0EDC LDR W8, [X0 + 0xE0]
	0x033B0EE0 CBNZ W8, 0x33B0EE8
	0x033B0EE4 BL 0x1C16DFC
	0x033B0EE8 CBZ X20, 0x33B0F74
	0x033B0EEC ADRP X8, 0xD43000
	0x033B0EF0 LDR X8, [X8 + 0xDF8]
	0x033B0EF4 LDR X0, [X8]
	0x033B0EF8 LDR W8, [X0 + 0xE0]
	0x033B0EFC CBNZ W8, 0x33B0F04
	0x033B0F00 BL 0x1C16DFC
	0x033B0F04 AND X1, X19, 0xFF
	0x033B0F08 MOV X0, X20
	0x033B0F0C LDP X20, X19, [X31 + 0x20]
	0x033B0F10 LDP X22, X21, [X31 + 0x10]
	0x033B0F14 LDR X30, [X31], #0x30
	0x033B0F18 B 0x1C87B50
	0x033B0F1C ADRP X0, 0xD48000
	0x033B0F20 LDR X0, [X0 + 0x528]
	0x033B0F24 BL 0x1C16D08
	0x033B0F28 BL 0x1C16F10
	0x033B0F2C MOV X19, X0
	0x033B0F30 ADRP X0, 0xD7B000
	0x033B0F34 LDR X0, [X0 + 0x3C0]
	0x033B0F38 BL 0x1C16D08
	0x033B0F3C MOV X1, X0
	0x033B0F40 MOV X0, X19
	0x033B0F44 MOV X2, X31
	0x033B0F48 BL 0x330E100
	0x033B0F4C ADRP X0, 0xD7B000
	0x033B0F50 LDR X0, [X0 + 0xF20]
	0x033B0F54 BL 0x1C16D08
	0x033B0F58 MOV X1, X0
	0x033B0F5C MOV X0, X19
	0x033B0F60 BL 0x1C16DEC
	0x033B0F64 BL 0x1C16F20
	0x033B0F68 ADRP X0, 0xD7B000
	0x033B0F6C LDR X0, [X0 + 0x3B8]
	0x033B0F70 B 0x33B0F7C
	0x033B0F74 ADRP X0, 0xD75000
	0x033B0F78 LDR X0, [X0 + 0xE58]
	0x033B0F7C BL 0x1C16D08
	0x033B0F80 MOV X1, X31
	0x033B0F84 BL 0x33BDD84
	0x033B0F88 MOV X19, X0
	0x033B0F8C ADRP X0, 0xD4B000
	0x033B0F90 LDR X0, [X0 + 0x578]
	0x033B0F94 BL 0x1C16D08
	0x033B0F98 BL 0x1C16F10
	0x033B0F9C MOV X20, X0
	0x033B0FA0 ADRP X0, 0xD7B000
	0x033B0FA4 LDR X0, [X0 + 0x3C0]
	0x033B0FA8 BL 0x1C16D08
	0x033B0FAC MOV X2, X0
	0x033B0FB0 MOV X0, X20
	0x033B0FB4 MOV X1, X19
	0x033B0FB8 MOV X3, X31
	0x033B0FBC BL 0x330E16C
	0x033B0FC0 ADRP X0, 0xD7B000
	0x033B0FC4 LDR X0, [X0 + 0xF20]
	0x033B0FC8 BL 0x1C16D08
	0x033B0FCC MOV X1, X0
	0x033B0FD0 MOV X0, X20
	0x033B0FD4 BL 0x1C16DEC
	0x033B0FD8 STR X30, [X31 - 0x30]!
	0x033B0FDC STP X22, X21, [X31 + 0x10]
	0x033B0FE0 STP X20, X19, [X31 + 0x20]
	0x033B0FE4 ADRP X21, 0x102D000
	0x033B0FE8 ADRP X22, 0xD43000
	0x033B0FEC LDRB W8, [X21 + 0x1A2]
	0x033B0FF0 LDR X22, [X22 + 0x6C0]
	0x033B0FF4 MOV W19, W1
	0x033B0FF8 MOV X20, X0
	0x033B0FFC TBNZ X8, 0x0, 0x33B102C
	0x033B1000 ADRP X0, 0xD42000
	0x033B1004 LDR X0, [X0 + 0xDF8]
	0x033B1008 BL 0x1C16CF4
	0x033B100C ADRP X0, 0xD6B000
	0x033B1010 LDR X0, [X0 + 0x4E8]
	0x033B1014 BL 0x1C16CF4
	0x033B1018 ADRP X0, 0xD42000
	0x033B101C LDR X0, [X0 + 0x6C0]
	0x033B1020 BL 0x1C16CF4
	0x033B1024 MOVZ W8, 0x1
	0x033B1028 STRB W8, [X21 + 0x1A2]
	0x033B102C LDR X0, [X22]
	0x033B1030 LDR W8, [X0 + 0xE0]
	0x033B1034 CBNZ W8, 0x33B103C
	0x033B1038 BL 0x1C16DFC
	0x033B103C MOV X0, X20
	0x033B1040 MOV X1, X31
	0x033B1044 MOV X2, X31
	0x033B1048 BL 0x3395194
	0x033B104C TBNZ X0, 0x0, 0x33B10E8
	0x033B1050 CBZ X20, 0x33B1130
	0x033B1054 LDR X8, [X20]
	0x033B1058 MOV X0, X20
	0x033B105C LDR X9, [X8 + 0x588]
	0x033B1060 LDR X1, [X8 + 0x590]
	0x033B1064 BLR X9
	0x033B1068 TBZ X0, 0x0, 0x33B1134
	0x033B106C ADRP X9, 0xD6B000
	0x033B1070 LDR X9, [X9 + 0x4E8]
	0x033B1074 LDR X8, [X20]
	0x033B1078 LDR X0, [X9]
	0x033B107C LDRB W10, [X8 + 0x130]
	0x033B1080 LDRB W9, [X0 + 0x130]
	0x033B1084 CMP W10, W9
	0x033B1088 B.CS 0x33B1094
	0x033B108C MOV X20, X31
	0x033B1090 B 0x33B10A8
	0x033B1094 LDR X8, [X8 + 0xC8]
	0x033B1098 ADD X8, X8, X9, 0x3, LSL
	0x033B109C LDUR X8, [X8 - 0x8]
	0x033B10A0 CMP X8, X0
	0x033B10A4 CSEL X20, X20, X31, EQ
	0x033B10A8 LDR W8, [X0 + 0xE0]
	0x033B10AC CBNZ W8, 0x33B10B4
	0x033B10B0 BL 0x1C16DFC
	0x033B10B4 CBZ X20, 0x33B1140
	0x033B10B8 ADRP X8, 0xD42000
	0x033B10BC LDR X8, [X8 + 0xDF8]
	0x033B10C0 LDR X0, [X8]
	0x033B10C4 LDR W8, [X0 + 0xE0]
	0x033B10C8 CBNZ W8, 0x33B10D0
	0x033B10CC BL 0x1C16DFC
	0x033B10D0 AND X1, X19, 0xFFFF
	0x033B10D4 MOV X0, X20
	0x033B10D8 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x102E000
	006 Move W8, [X21+394]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {51}
	013 Move X0, 0xD44000
	014 Move X0, [X0+2904]
	015 Call 0x1C17CF4
	016 Move X0, 0xD45000
	017 Move X0, [X0+2520]
	018 Call 0x1C17CF4
	019 Move X0, 0xD46000
	020 Move X0, [X0+368]
	021 Call 0x1C17CF4
	022 Move X0, 0xD4D000
	023 Move X0, [X0+2536]
	024 Call 0x1C17CF4
	025 Move X0, 0xD44000
	026 Move X0, [X0+3576]
	027 Call 0x1C17CF4
	028 Move X0, 0xD48000
	029 Move X0, [X0+1576]
	030 Call 0x1C17CF4
	031 Move X0, 0xD44000
	032 Move X0, [X0+1880]
	033 Call 0x1C17CF4
	034 Move X0, 0xD46000
	035 Move X0, [X0+2656]
	036 Call 0x1C17CF4
	037 Move X0, 0xD6D000
	038 Move X0, [X0+1712]
	039 Call 0x1C17CF4
	040 Move X0, 0xD49000
	041 Move X0, [X0+1624]
	042 Call 0x1C17CF4
	043 Move X0, 0xD4C000
	044 Move X0, [X0+1824]
	045 Call 0x1C17CF4
	046 Move X0, 0xD45000
	047 Move X0, [X0+1880]
	048 Call 0x1C17CF4
	049 Move W8, 1
	050 Move [X21+394], W8
	051 Compare X20, 0
	052 JumpIfEqual {311}
	053 Move X8, 0xD4D000
	054 Move X8, [X8+2536]
	055 Move X0, [X8]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move X0, X20
	061 Move X1, X31
	062 Call Convert.GetTypeCode, X0
	063 Subtract W8, W0, 3
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X9, -42045440
	066 Add X9, X9, 2214
	067 NotImplemented "Instruction ADR not yet implemented."
	068 Move W11, [X9]
	069 Add X10, X10, X11
	070 CallNoReturn X10
	071 Move X8, 0xD44000
	072 Move X8, [X8+3576]
	073 Move X0, [X8]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {78}
	077 Call 0x1C17DFC
	078 Move X8, 0xD44000
	079 Move X8, [X8+2904]
	080 Move X9, [X20]
	081 Move X1, [X8]
	082 Move X8, [X9+64]
	083 Move X9, [X1+64]
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move X0, X20
	086 Call 0x1C17E08
	087 Move W1, [X0]
	088 Move X0, X19
	089 Move X20, [X31+16]
	090 Move X19, [X31+24]
	091 Move X30, [X31+32]
	092 Move X21, [X31+40]
	093 Call Enum.ToObject, X0, X1
	094 Return X0
	095 Move X8, 0xD44000
	096 Move X8, [X8+3576]
	097 Move X0, [X8]
	098 Move W8, [X0+224]
	099 Compare W8, 0
	100 JumpIfNotEqual {102}
	101 Call 0x1C17DFC
	102 Move X8, 0xD46000
	103 Move X8, [X8+368]
	104 Move X9, [X20]
	105 Move X1, [X8]
	106 Move X8, [X9+64]
	107 Move X9, [X1+64]
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Move X0, X20
	110 Call 0x1C17E08
	111 NotImplemented "Instruction LDRH not yet implemented."
	112 Move X0, X19
	113 Move X20, [X31+16]
	114 Move X19, [X31+24]
	115 Move X30, [X31+32]
	116 Move X21, [X31+40]
	117 Call Enum.ToObject, X0, X1
	118 Return X0
	119 Move X8, 0xD44000
	120 Move X8, [X8+3576]
	121 Move X0, [X8]
	122 Move W8, [X0+224]
	123 Compare W8, 0
	124 JumpIfNotEqual {126}
	125 Call 0x1C17DFC
	126 Move X8, 0xD6D000
	127 Move X8, [X8+1712]
	128 Move X9, [X20]
	129 Move X1, [X8]
	130 Move X8, [X9+64]
	131 Move X9, [X1+64]
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Move X0, X20
	134 Call 0x1C17E08
	135 Move W1, [X0]
	136 Move X0, X19
	137 Move X20, [X31+16]
	138 Move X19, [X31+24]
	139 Move X30, [X31+32]
	140 Move X21, [X31+40]
	141 Call Enum.ToObject, X0, X1
	142 Return X0
	143 Move X8, 0xD44000
	144 Move X8, [X8+3576]
	145 Move X0, [X8]
	146 Move W8, [X0+224]
	147 Compare W8, 0
	148 JumpIfNotEqual {150}
	149 Call 0x1C17DFC
	150 Move X8, 0xD45000
	151 Move X8, [X8+2520]
	152 Move X9, [X20]
	153 Move X1, [X8]
	154 Move X8, [X9+64]
	155 Move X9, [X1+64]
	156 NotImplemented "Instruction CMP not yet implemented."
	157 Move X0, X20
	158 Call 0x1C17E08
	159 Move W1, [X0]
	160 Move X0, X19
	161 Move X20, [X31+16]
	162 Move X19, [X31+24]
	163 Move X30, [X31+32]
	164 Move X21, [X31+40]
	165 Call Enum.ToObject, X0, X1
	166 Return X0
	167 Move X8, 0xD44000
	168 Move X8, [X8+3576]
	169 Move X0, [X8]
	170 Move W8, [X0+224]
	171 Compare W8, 0
	172 JumpIfNotEqual {174}
	173 Call 0x1C17DFC
	174 Move X8, 0xD48000
	175 Move X8, [X8+1576]
	176 Move X9, [X20]
	177 Move X1, [X8]
	178 Move X8, [X9+64]
	179 Move X9, [X1+64]
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Move X0, X20
	182 Call 0x1C17E08
	183 NotImplemented "Instruction LDRH not yet implemented."
	184 Move X0, X19
	185 Move X20, [X31+16]
	186 Move X19, [X31+24]
	187 Move X30, [X31+32]
	188 Move X21, [X31+40]
	189 Call Enum.ToObject, X0, X1
	190 Return X0
	191 Move X8, 0xD44000
	192 Move X8, [X8+3576]
	193 Move X0, [X8]
	194 Move W8, [X0+224]
	195 Compare W8, 0
	196 JumpIfNotEqual {198}
	197 Call 0x1C17DFC
	198 Move X8, 0xD49000
	199 Move X8, [X8+1624]
	200 Move X9, [X20]
	201 Move X1, [X8]
	202 Move X8, [X9+64]
	203 Move X9, [X1+64]
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Move X0, X20
	206 Call 0x1C17E08
	207 NotImplemented "Instruction LDRH not yet implemented."
	208 Move X0, X19
	209 Move X20, [X31+16]
	210 Move X19, [X31+24]
	211 Move X30, [X31+32]
	212 Move X21, [X31+40]
	213 Call Enum.ToObject, X0, X1
	214 Return X0
	215 Move X8, 0xD44000
	216 Move X8, [X8+3576]
	217 Move X0, [X8]
	218 Move W8, [X0+224]
	219 Compare W8, 0
	220 JumpIfNotEqual {222}
	221 Call 0x1C17DFC
	222 Move X8, 0xD44000
	223 Move X8, [X8+1880]
	224 Move X9, [X20]
	225 Move X1, [X8]
	226 Move X8, [X9+64]
	227 Move X9, [X1+64]
	228 NotImplemented "Instruction CMP not yet implemented."
	229 Move X0, X20
	230 Call 0x1C17E08
	231 Move W1, [X0]
	232 Move X0, X19
	233 Move X20, [X31+16]
	234 Move X19, [X31+24]
	235 Move X30, [X31+32]
	236 Move X21, [X31+40]
	237 Call Enum.ToObject, X0, X1
	238 Return X0
	239 Move X8, 0xD44000
	240 Move X8, [X8+3576]
	241 Move X0, [X8]
	242 Move W8, [X0+224]
	243 Compare W8, 0
	244 JumpIfNotEqual {246}
	245 Call 0x1C17DFC
	246 Move X8, 0xD4C000
	247 Move X8, [X8+1824]
	248 Move X9, [X20]
	249 Move X1, [X8]
	250 Move X8, [X9+64]
	251 Move X9, [X1+64]
	252 NotImplemented "Instruction CMP not yet implemented."
	253 Move X0, X20
	254 Call 0x1C17E08
	255 Move W1, [X0]
	256 Move X0, X19
	257 Move X20, [X31+16]
	258 Move X19, [X31+24]
	259 Move X30, [X31+32]
	260 Move X21, [X31+40]
	261 Call Enum.ToObject, X0, X1
	262 Return X0
	263 Move X8, 0xD44000
	264 Move X8, [X8+3576]
	265 Move X0, [X8]
	266 Move W8, [X0+224]
	267 Compare W8, 0
	268 JumpIfNotEqual {270}
	269 Call 0x1C17DFC
	270 Move X8, 0xD46000
	271 Move X8, [X8+2656]
	272 Move X9, [X20]
	273 Move X1, [X8]
	274 Move X8, [X9+64]
	275 Move X9, [X1+64]
	276 NotImplemented "Instruction CMP not yet implemented."
	277 Move X0, X20
	278 Call 0x1C17E08
	279 Move X1, [X0]
	280 Move X0, X19
	281 Move X20, [X31+16]
	282 Move X19, [X31+24]
	283 Move X30, [X31+32]
	284 Move X21, [X31+40]
	285 Call Enum.ToObject, X0, X1
	286 Return X0
	287 Move X8, 0xD44000
	288 Move X8, [X8+3576]
	289 Move X0, [X8]
	290 Move W8, [X0+224]
	291 Compare W8, 0
	292 JumpIfNotEqual {294}
	293 Call 0x1C17DFC
	294 Move X8, 0xD45000
	295 Move X8, [X8+1880]
	296 Move X9, [X20]
	297 Move X1, [X8]
	298 Move X8, [X9+64]
	299 Move X9, [X1+64]
	300 NotImplemented "Instruction CMP not yet implemented."
	301 Move X0, X20
	302 Call 0x1C17E08
	303 Move X1, [X0]
	304 Move X0, X19
	305 Move X20, [X31+16]
	306 Move X19, [X31+24]
	307 Move X30, [X31+32]
	308 Move X21, [X31+40]
	309 Call Enum.ToObject, X0, X1
	310 Return X0
	311 Move X0, 0xD48000
	312 Move X0, [X0+1320]
	313 Call 0x1C17D08
	314 Call 0x1C17F10
	315 Move X19, X0
	316 Move X0, 0xD4D000
	317 Move X0, [X0+3784]
	318 Call 0x1C17D08
	319 Move X1, X0
	320 Move X0, X19
	321 Move X2, X31
	322 Call ArgumentNullException..ctor, X0, X1
	323 Move X0, 0xD7B000
	324 Move X0, [X0+3800]
	325 Call 0x1C17D08
	326 Move X1, X0
	327 Move X0, X19
	328 Call 0x1C17DEC
	329 Move X0, X20
	330 Call 0x1C181E0
	331 Move X0, 0xD7B000
	332 Move X0, [X0+1008]
	333 Call 0x1C17D08
	334 Move X1, X31
	335 Call Environment.GetResourceString, X0
	336 Move X19, X0
	337 Move X0, 0xD4B000
	338 Move X0, [X0+1400]
	339 Call 0x1C17D08
	340 Call 0x1C17F10
	341 Move X20, X0
	342 Move X0, 0xD4D000
	343 Move X0, [X0+3784]
	344 Call 0x1C17D08
	345 Move X2, X0
	346 Move X0, X20
	347 Move X1, X19
	348 Move X3, X31
	349 Call ArgumentException..ctor, X0, X1, X2
	350 Move X0, 0xD7B000
	351 Move X0, [X0+3800]
	352 Call 0x1C17D08
	353 Move X1, X0
	354 Move X0, X20
	355 Call 0x1C17DEC

Method: System.Boolean IsDefined(System.Type enumType, System.Object value)

Disassembly:
	0x033B253C LDR X21, [X21 + 0xC48]
	0x033B2540 MOV X19, X0
	0x033B2544 TBNZ X8, 0x0, 0x33B2568
	0x033B2548 ADRP X0, 0xD4A000
	0x033B254C LDR X0, [X0 + 0x9E8]
	0x033B2550 BL 0x1C16CF4
	0x033B2554 ADRP X0, 0xD43000
	0x033B2558 LDR X0, [X0 + 0xC48]
	0x033B255C BL 0x1C16CF4
	0x033B2560 MOVZ W8, 0x1
	0x033B2564 STRB W8, [X20 + 0x197]
	0x033B2568 ADRP X20, 0xD4A000
	0x033B256C LDR X20, [X20 + 0x9E8]
	0x033B2570 MOV X0, X19
	0x033B2574 BL 0x1C87AE4
	0x033B2578 LDR X8, [X21]
	0x033B257C MOV X19, X0
	0x033B2580 LDR W9, [X8 + 0xE0]
	0x033B2584 CBNZ W9, 0x33B2590
	0x033B2588 MOV X0, X8
	0x033B258C BL 0x1C16DFC
	0x033B2590 MOV X0, X31
	0x033B2594 BL 0x33387A0
	0x033B2598 LDR X8, [X20]
	0x033B259C MOV X20, X0
	0x033B25A0 LDR W9, [X8 + 0xE0]
	0x033B25A4 CBNZ W9, 0x33B25B0
	0x033B25A8 MOV X0, X8
	0x033B25AC BL 0x1C16DFC
	0x033B25B0 MOV X0, X19
	0x033B25B4 MOV X1, X20
	0x033B25B8 LDP X20, X19, [X31 + 0x10]
	0x033B25BC MOV X2, X31
	0x033B25C0 LDP X30, X21, [X31], #0x20
	0x033B25C4 B 0x33206F0
	0x033B25C8 STP X30, X21, [X31 - 0x20]!
	0x033B25CC STP X20, X19, [X31 + 0x10]
	0x033B25D0 ADRP X20, 0x102B000
	0x033B25D4 ADRP X21, 0xD43000
	0x033B25D8 LDRB W8, [X20 + 0x198]
	0x033B25DC LDR X21, [X21 + 0xC48]
	0x033B25E0 MOV X19, X0
	0x033B25E4 TBNZ X8, 0x0, 0x33B2608
	0x033B25E8 ADRP X0, 0xD4A000
	0x033B25EC LDR X0, [X0 + 0x9E8]
	0x033B25F0 BL 0x1C16CF4
	0x033B25F4 ADRP X0, 0xD43000
	0x033B25F8 LDR X0, [X0 + 0xC48]
	0x033B25FC BL 0x1C16CF4
	0x033B2600 MOVZ W8, 0x1
	0x033B2604 STRB W8, [X20 + 0x198]
	0x033B2608 ADRP X20, 0xD4A000
	0x033B260C LDR X20, [X20 + 0x9E8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x102C000
	007 Move X22, 0xD42000
	008 Move W8, [X21+395]
	009 Move X22, [X22+1728]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD42000
	017 Move X0, [X0+1728]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+395], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X31
	028 Move X2, X31
	029 Call Type.op_Equality, X0, X1
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {47}
	034 Compare X20, 0
	035 JumpIfEqual {65}
	036 Move X8, [X20]
	037 Move X0, X20
	038 Move X1, X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X3, [X8+584]
	042 Move X2, [X8+592]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 CallNoReturn X3
	047 Move X0, 0xD47000
	048 Move X0, [X0+1320]
	049 Call 0x1C17D08
	050 Call 0x1C17F10
	051 Move X19, X0
	052 Move X0, 0xD7A000
	053 Move X0, [X0+960]
	054 Call 0x1C17D08
	055 Move X1, X0
	056 Move X0, X19
	057 Move X2, X31
	058 Call ArgumentNullException..ctor, X0, X1
	059 Move X0, 0xD7A000
	060 Move X0, [X0+3904]
	061 Call 0x1C17D08
	062 Move X1, X0
	063 Move X0, X19
	064 Call 0x1C17DEC
	065 Call 0x1C17F20

Method: System.Object get_value()

Disassembly:
	0x033B2610 MOV X0, X19

ISIL:
	001 Call 0x1C88AE4
	002 Return X0

Method: System.Object GetValue()

Disassembly:
	0x033B2614 BL 0x1C87AE4

ISIL:
	001 Call 0x1C88AE4
	002 Return X0

Method: System.Boolean InternalHasFlag(System.Enum flags)

Disassembly:
	0x033B2618 LDR X8, [X21]

ISIL:
	001 Call 0x1C88894
	002 Return X0

Method: System.Int32 get_hashcode()

Disassembly:
	0x033B261C MOV X19, X0

ISIL:
	001 Call 0x1C88918
	002 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x033B2620 LDR W9, [X8 + 0xE0]
	0x033B2624 CBNZ W9, 0x33B2630

ISIL:
	001 Move X2, X31
	002 Call ValueType.DefaultEquals, X0, X1
	003 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x033B2628 MOV X0, X8

ISIL:
	001 Call 0x1C88918
	002 Return X0

Method: System.String ToString()

Disassembly:
	0x033B262C BL 0x1C16DFC
	0x033B2630 MOV X0, X31
	0x033B2634 BL 0x33387A0
	0x033B2638 LDR X8, [X20]
	0x033B263C MOV X20, X0
	0x033B2640 LDR W9, [X8 + 0xE0]
	0x033B2644 CBNZ W9, 0x33B2650
	0x033B2648 MOV X0, X8
	0x033B264C BL 0x1C16DFC
	0x033B2650 MOV X0, X19
	0x033B2654 MOV X1, X20
	0x033B2658 LDP X20, X19, [X31 + 0x10]
	0x033B265C MOV X2, X31
	0x033B2660 LDP X30, X21, [X31], #0x20
	0x033B2664 B 0x3320C2C
	0x033B2668 STP X30, X21, [X31 - 0x20]!
	0x033B266C STP X20, X19, [X31 + 0x10]
	0x033B2670 ADRP X20, 0x102B000
	0x033B2674 ADRP X21, 0xD43000
	0x033B2678 LDRB W8, [X20 + 0x199]
	0x033B267C LDR X21, [X21 + 0xC48]
	0x033B2680 MOV X19, X0
	0x033B2684 TBNZ X8, 0x0, 0x33B26A8
	0x033B2688 ADRP X0, 0xD4A000
	0x033B268C LDR X0, [X0 + 0x9E8]
	0x033B2690 BL 0x1C16CF4
	0x033B2694 ADRP X0, 0xD43000
	0x033B2698 LDR X0, [X0 + 0xC48]
	0x033B269C BL 0x1C16CF4
	0x033B26A0 MOVZ W8, 0x1
	0x033B26A4 STRB W8, [X20 + 0x199]
	0x033B26A8 ADRP X20, 0xD4A000
	0x033B26AC LDR X20, [X20 + 0x9E8]
	0x033B26B0 MOV X0, X19
	0x033B26B4 BL 0x1C87AE4
	0x033B26B8 LDR X8, [X21]
	0x033B26BC MOV X19, X0
	0x033B26C0 LDR W9, [X8 + 0xE0]
	0x033B26C4 CBNZ W9, 0x33B26D0
	0x033B26C8 MOV X0, X8
	0x033B26CC BL 0x1C16DFC
	0x033B26D0 MOV X0, X31
	0x033B26D4 BL 0x33387A0
	0x033B26D8 LDR X8, [X20]
	0x033B26DC MOV X20, X0
	0x033B26E0 LDR W9, [X8 + 0xE0]
	0x033B26E4 CBNZ W9, 0x33B26F0
	0x033B26E8 MOV X0, X8
	0x033B26EC BL 0x1C16DFC
	0x033B26F0 MOV X0, X19
	0x033B26F4 MOV X1, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x102C000
	006 Move X21, 0xD42000
	007 Move W8, [X19+396]
	008 Move X21, [X21+3576]
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xD42000
	015 Move X0, [X0+3576]
	016 Call 0x1C17CF4
	017 Move X0, 0xD6B000
	018 Move X0, [X0+1256]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X19+396], W8
	022 Move X0, X20
	023 Move X1, X31
	024 Call "il2cpp_vm_object_is_inst", X0
	025 Move X19, X0
	026 Move X0, X20
	027 Call 0x1C88AE4
	028 Move X8, [X21]
	029 Move X20, X0
	030 Move W9, [X8+224]
	031 Compare W9, 0
	032 JumpIfEqual {35}
	033 Compare X19, 0
	034 JumpIfNotEqual {39}
	035 Move X0, X8
	036 Call 0x1C17DFC
	037 Compare X19, 0
	038 JumpIfEqual {50}
	039 Move X9, 0xD6B000
	040 Move X9, [X9+1256]
	041 Move X8, [X19]
	042 Move X1, [X9]
	043 Move W10, [X8+304]
	044 Move W9, [X1+304]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X8, [X8+200]
	047 Add X8, X8, X9
	048 NotImplemented "Instruction LDUR not yet implemented."
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X0, X19
	051 Move X1, X20
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Call Enum.InternalFormat, X0, X1
	057 Return X0
	058 Move X0, X19
	059 Call 0x1C181E0

Method: System.String ToString(System.String format, System.IFormatProvider provider)

Disassembly:
	0x033B26F8 LDP X20, X19, [X31 + 0x10]

ISIL:
No ISIL was generated
Method: System.Int32 CompareTo(System.Object target)

Disassembly:
	0x033B294C LDR X20, [X20 + 0x98]
	0x033B2950 MOV X0, X20
	0x033B2954 BL 0x1C16D08
	0x033B2958 MOV X1, X0
	0x033B295C MOV X0, X19
	0x033B2960 BL 0x19980B4
	0x033B2964 MOV X0, X20
	0x033B2968 BL 0x1C16D08
	0x033B296C MOV X2, X0
	0x033B2970 MOVZ W1, 0x1
	0x033B2974 MOV X0, X19
	0x033B2978 BL 0x1993444
	0x033B297C ADRP X0, 0xD76000
	0x033B2980 LDR X0, [X0 + 0x30]
	0x033B2984 BL 0x1C16D08
	0x033B2988 MOV X1, X19
	0x033B298C MOV X2, X31
	0x033B2990 BL 0x33BFB40
	0x033B2994 MOV X19, X0
	0x033B2998 ADRP X0, 0xD49000
	0x033B299C LDR X0, [X0 + 0xC08]
	0x033B29A0 BL 0x1C16D08
	0x033B29A4 BL 0x1C16F10
	0x033B29A8 MOV X1, X19
	0x033B29AC MOV X2, X31
	0x033B29B0 MOV X20, X0
	0x033B29B4 BL 0x337B498
	0x033B29B8 ADRP X0, 0xD79000
	0x033B29BC LDR X0, [X0 + 0xF90]
	0x033B29C0 BL 0x1C16D08
	0x033B29C4 MOV X1, X0
	0x033B29C8 MOV X0, X20
	0x033B29CC BL 0x1C16DEC
	0x033B29D0 STP X30, X23, [X31 - 0x30]!
	0x033B29D4 STP X22, X21, [X31 + 0x10]
	0x033B29D8 STP X20, X19, [X31 + 0x20]
	0x033B29DC ADRP X22, 0x102B000
	0x033B29E0 ADRP X23, 0xD4A000
	0x033B29E4 LDRB W8, [X22 + 0x19D]
	0x033B29E8 LDR X23, [X23 + 0x9E8]
	0x033B29EC MOV X19, X2
	0x033B29F0 MOV X20, X1
	0x033B29F4 MOV X21, X0
	0x033B29F8 TBNZ X8, 0x0, 0x33B2A10
	0x033B29FC ADRP X0, 0xD4A000
	0x033B2A00 LDR X0, [X0 + 0x9E8]
	0x033B2A04 BL 0x1C16CF4
	0x033B2A08 MOVZ W8, 0x1
	0x033B2A0C STRB W8, [X22 + 0x19D]
	0x033B2A10 LDR X0, [X23]
	0x033B2A14 LDR W8, [X0 + 0xE0]
	0x033B2A18 CBNZ W8, 0x33B2A20
	0x033B2A1C BL 0x1C16DFC
	0x033B2A20 MOV X0, X21
	0x033B2A24 MOV X1, X20
	0x033B2A28 MOV X2, X19
	0x033B2A2C LDP X20, X19, [X31 + 0x20]
	0x033B2A30 LDP X22, X21, [X31 + 0x10]
	0x033B2A34 MOV X3, X31
	0x033B2A38 LDP X30, X23, [X31], #0x30
	0x033B2A3C B 0x3318718
	0x033B2A40 SUB X31, X31, 0x70
	0x033B2A44 STR X30, [X31 + 0x30]
	0x033B2A48 STP X24, X23, [X31 + 0x40]
	0x033B2A4C STP X22, X21, [X31 + 0x50]
	0x033B2A50 STP X20, X19, [X31 + 0x60]
	0x033B2A54 ADRP X24, 0x102B000
	0x033B2A58 ADRP X23, 0xD41000
	0x033B2A5C LDRB W8, [X24 + 0x1A8]
	0x033B2A60 LDR X23, [X23 + 0xDF8]
	0x033B2A64 MOV X19, X3
	0x033B2A68 MOV W22, W2
	0x033B2A6C MOV X20, X1
	0x033B2A70 MOV X21, X0
	0x033B2A74 TBNZ X8, 0x0, 0x33B2A8C
	0x033B2A78 ADRP X0, 0xD41000
	0x033B2A7C LDR X0, [X0 + 0xDF8]
	0x033B2A80 BL 0x1C16CF4
	0x033B2A84 MOVZ W8, 0x1
	0x033B2A88 STRB W8, [X24 + 0x1A8]
	0x033B2A8C STR X31, [X19]
	0x033B2A90 LDR X0, [X23]
	0x033B2A94 MOVI V0.2D, 0x0
	0x033B2A98 STP V0, V0, [X31 + 0x10]
	0x033B2A9C STR V0, [X31]
	0x033B2AA0 LDR W8, [X0 + 0xE0]
	0x033B2AA4 CBNZ W8, 0x33B2AAC
	0x033B2AA8 BL 0x1C16DFC
	0x033B2AAC AND W2, W22, 0x1
	0x033B2AB0 ADD X3, X31, 0x0
	0x033B2AB4 MOV X0, X21
	0x033B2AB8 MOV X1, X20
	0x033B2ABC BL 0x33AF2E0
	0x033B2AC0 TBZ X0, 0x0, 0x33B2ACC
	0x033B2AC4 LDR X8, [X31]
	0x033B2AC8 STR X8, [X19]
	0x033B2ACC LDP X20, X19, [X31 + 0x60]
	0x033B2AD0 LDP X22, X21, [X31 + 0x50]
	0x033B2AD4 LDP X24, X23, [X31 + 0x40]
	0x033B2AD8 LDR X30, [X31 + 0x30]
	0x033B2ADC AND W0, W0, 0x1
	0x033B2AE0 ADD X31, X31, 0x70
	0x033B2AE4 RET
	0x033B2AE8 STP X30, X23, [X31 - 0x30]!
	0x033B2AEC STP X22, X21, [X31 + 0x10]
	0x033B2AF0 STP X20, X19, [X31 + 0x20]
	0x033B2AF4 ADRP X22, 0x102B000
	0x033B2AF8 ADRP X23, 0xD41000
	0x033B2AFC LDRB W8, [X22 + 0x1A9]
	0x033B2B00 LDR X23, [X23 + 0xDF8]
	0x033B2B04 MOV X19, X2
	0x033B2B08 MOV X20, X1
	0x033B2B0C MOV X21, X0
	0x033B2B10 TBNZ X8, 0x0, 0x33B2B28
	0x033B2B14 ADRP X0, 0xD41000
	0x033B2B18 LDR X0, [X0 + 0xDF8]
	0x033B2B1C BL 0x1C16CF4
	0x033B2B20 MOVZ W8, 0x1
	0x033B2B24 STRB W8, [X22 + 0x1A9]
	0x033B2B28 LDR X0, [X23]
	0x033B2B2C LDR W8, [X0 + 0xE0]
	0x033B2B30 CBNZ W8, 0x33B2B38
	0x033B2B34 BL 0x1C16DFC
	0x033B2B38 MOV X0, X21
	0x033B2B3C MOV X1, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x102C000
	006 Move W8, [X21+397]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD42000
	014 Move X0, [X0+3576]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+397], W8
	018 Compare X20, 0
	019 JumpIfEqual {36}
	020 Move X8, 0xD42000
	021 Move X8, [X8+3576]
	022 Move X0, [X8]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Move X1, X19
	029 Call 0x1C889C8
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Return X0
	036 Move X0, 0xD4D000
	037 Move X0, [X0+2584]
	038 Call 0x1C17D08
	039 Call 0x1C17F10
	040 Move X1, X31
	041 Move X19, X0
	042 Call NullReferenceException..ctor, X0
	043 Move X0, 0xD7A000
	044 Move X0, [X0+3936]
	045 Call 0x1C17D08
	046 Move X1, X0
	047 Move X0, X19
	048 Call 0x1C17DEC
	049 Move X0, X20
	050 Move X1, X31
	051 Call "il2cpp_vm_object_is_inst", X0
	052 Move X20, X0
	053 Move X0, X19
	054 Call 0x19913C0
	055 Move X0, X19
	056 Move X1, X31
	057 Call "il2cpp_vm_object_is_inst", X0
	058 Move X21, X0
	059 Move X0, 0xD42000
	060 Move X0, [X0+2512]
	061 Call 0x1C17D08
	062 Move W1, 2
	063 Call 0x1C17D6C
	064 Move X19, X0
	065 Move X0, X21
	066 Call 0x19913C0
	067 Move X8, [X21]
	068 Move X0, X21
	069 Move X9, [X8+360]
	070 Move X1, [X8+368]
	071 NotImplemented "Instruction BLR not yet implemented."
	072 Move X21, X0
	073 Move X0, X19
	074 Call 0x19913C0
	075 Move X0, X19
	076 Move X1, X21
	077 Call 0x19990B4
	078 Move X0, X19
	079 Move X1, X31
	080 Move X2, X21
	081 Call 0x1994444
	082 Move X0, X20
	083 Call 0x19913C0
	084 Move X8, [X20]
	085 Move X0, X20
	086 Move X9, [X8+360]
	087 Move X1, [X8+368]
	088 NotImplemented "Instruction BLR not yet implemented."
	089 Move X20, X0
	090 Move X0, X19
	091 Call 0x19913C0
	092 Move X0, X19
	093 Move X1, X20
	094 Call 0x19990B4
	095 Move W1, 1
	096 Move X0, X19
	097 Move X2, X20
	098 Call 0x1994444
	099 Move X0, 0xD7A000
	100 Move X0, [X0+992]
	101 Call 0x1C17D08
	102 Move X1, X19
	103 Move X2, X31
	104 Call Environment.GetResourceString, X0, X1
	105 Move X19, X0
	106 Move X0, 0xD4A000
	107 Move X0, [X0+1400]
	108 Call 0x1C17D08
	109 Call 0x1C17F10
	110 Move X1, X19
	111 Move X2, X31
	112 Move X20, X0
	113 Call ArgumentException..ctor, X0, X1
	114 Move X0, 0xD7A000
	115 Move X0, [X0+968]
	116 Call 0x1C17D08
	117 Move X1, X31
	118 Call Environment.GetResourceString, X0
	119 Move X19, X0
	120 Move X0, 0xD42000
	121 Move X0, [X0+1456]
	122 Call 0x1C17D08
	123 Call 0x1C17F10
	124 Move X1, X19
	125 Move X2, X31
	126 Move X20, X0
	127 Call InvalidOperationException..ctor, X0, X1
	128 Move X0, 0xD7A000
	129 Move X0, [X0+3936]
	130 Call 0x1C17D08
	131 Move X1, X0
	132 Move X0, X20
	133 Call 0x1C17DEC

Method: System.String ToString(System.String format)

Disassembly:
	0x033B26FC MOV X2, X31
	0x033B2700 LDP X30, X21, [X31], #0x20
	0x033B2704 B 0x3321110
	0x033B2708 STP X30, X21, [X31 - 0x20]!
	0x033B270C STP X20, X19, [X31 + 0x10]
	0x033B2710 ADRP X20, 0x102B000
	0x033B2714 ADRP X21, 0xD43000
	0x033B2718 LDRB W8, [X20 + 0x19A]
	0x033B271C LDR X21, [X21 + 0xC48]
	0x033B2720 MOV X19, X0
	0x033B2724 TBNZ X8, 0x0, 0x33B2748
	0x033B2728 ADRP X0, 0xD4A000
	0x033B272C LDR X0, [X0 + 0x9E8]
	0x033B2730 BL 0x1C16CF4
	0x033B2734 ADRP X0, 0xD43000
	0x033B2738 LDR X0, [X0 + 0xC48]
	0x033B273C BL 0x1C16CF4
	0x033B2740 MOVZ W8, 0x1
	0x033B2744 STRB W8, [X20 + 0x19A]
	0x033B2748 ADRP X20, 0xD4A000
	0x033B274C LDR X20, [X20 + 0x9E8]
	0x033B2750 MOV X0, X19
	0x033B2754 BL 0x1C87AE4
	0x033B2758 LDR X8, [X21]
	0x033B275C MOV X19, X0
	0x033B2760 LDR W9, [X8 + 0xE0]
	0x033B2764 CBNZ W9, 0x33B2770
	0x033B2768 MOV X0, X8
	0x033B276C BL 0x1C16DFC
	0x033B2770 MOV X0, X31
	0x033B2774 BL 0x33387A0
	0x033B2778 LDR X8, [X20]
	0x033B277C MOV X20, X0
	0x033B2780 LDR W9, [X8 + 0xE0]
	0x033B2784 CBNZ W9, 0x33B2790
	0x033B2788 MOV X0, X8
	0x033B278C BL 0x1C16DFC
	0x033B2790 MOV X0, X19
	0x033B2794 MOV X1, X20
	0x033B2798 LDP X20, X19, [X31 + 0x10]
	0x033B279C MOV X2, X31
	0x033B27A0 LDP X30, X21, [X31], #0x20
	0x033B27A4 B 0x332164C
	0x033B27A8 STP X30, X21, [X31 - 0x20]!
	0x033B27AC STP X20, X19, [X31 + 0x10]
	0x033B27B0 ADRP X20, 0x102B000
	0x033B27B4 ADRP X21, 0xD43000
	0x033B27B8 LDRB W8, [X20 + 0x19B]
	0x033B27BC LDR X21, [X21 + 0xC48]
	0x033B27C0 MOV X19, X0
	0x033B27C4 TBNZ X8, 0x0, 0x33B27E8
	0x033B27C8 ADRP X0, 0xD4A000
	0x033B27CC LDR X0, [X0 + 0x9E8]
	0x033B27D0 BL 0x1C16CF4
	0x033B27D4 ADRP X0, 0xD43000
	0x033B27D8 LDR X0, [X0 + 0xC48]
	0x033B27DC BL 0x1C16CF4
	0x033B27E0 MOVZ W8, 0x1
	0x033B27E4 STRB W8, [X20 + 0x19B]
	0x033B27E8 ADRP X20, 0xD4A000
	0x033B27EC LDR X20, [X20 + 0x9E8]
	0x033B27F0 MOV X0, X19
	0x033B27F4 BL 0x1C87AE4
	0x033B27F8 LDR X8, [X21]
	0x033B27FC MOV X19, X0
	0x033B2800 LDR W9, [X8 + 0xE0]
	0x033B2804 CBNZ W9, 0x33B2810
	0x033B2808 MOV X0, X8
	0x033B280C BL 0x1C16DFC
	0x033B2810 MOV X0, X31
	0x033B2814 BL 0x33387A0
	0x033B2818 LDR X8, [X20]
	0x033B281C MOV X20, X0
	0x033B2820 LDR W9, [X8 + 0xE0]
	0x033B2824 CBNZ W9, 0x33B2830
	0x033B2828 MOV X0, X8
	0x033B282C BL 0x1C16DFC
	0x033B2830 MOV X0, X19
	0x033B2834 MOV X1, X20
	0x033B2838 LDP X20, X19, [X31 + 0x10]
	0x033B283C MOV X2, X31
	0x033B2840 LDP X30, X21, [X31], #0x20
	0x033B2844 B 0x3321990
	0x033B2848 STP X30, X21, [X31 - 0x20]!
	0x033B284C STP X20, X19, [X31 + 0x10]
	0x033B2850 ADRP X20, 0x102B000
	0x033B2854 ADRP X21, 0xD43000
	0x033B2858 LDRB W8, [X20 + 0x19C]
	0x033B285C LDR X21, [X21 + 0xC48]
	0x033B2860 MOV X19, X0
	0x033B2864 TBNZ X8, 0x0, 0x33B2888
	0x033B2868 ADRP X0, 0xD4A000
	0x033B286C LDR X0, [X0 + 0x9E8]
	0x033B2870 BL 0x1C16CF4
	0x033B2874 ADRP X0, 0xD43000
	0x033B2878 LDR X0, [X0 + 0xC48]
	0x033B287C BL 0x1C16CF4
	0x033B2880 MOVZ W8, 0x1
	0x033B2884 STRB W8, [X20 + 0x19C]
	0x033B2888 ADRP X20, 0xD4A000
	0x033B288C LDR X20, [X20 + 0x9E8]
	0x033B2890 MOV X0, X19
	0x033B2894 BL 0x1C87AE4
	0x033B2898 LDR X8, [X21]
	0x033B289C MOV X19, X0
	0x033B28A0 LDR W9, [X8 + 0xE0]
	0x033B28A4 CBNZ W9, 0x33B28B0
	0x033B28A8 MOV X0, X8
	0x033B28AC BL 0x1C16DFC
	0x033B28B0 MOV X0, X31
	0x033B28B4 BL 0x33387A0
	0x033B28B8 LDR X8, [X20]
	0x033B28BC MOV X20, X0
	0x033B28C0 LDR W9, [X8 + 0xE0]
	0x033B28C4 CBNZ W9, 0x33B28D0
	0x033B28C8 MOV X0, X8
	0x033B28CC BL 0x1C16DFC
	0x033B28D0 MOV X0, X19
	0x033B28D4 MOV X1, X20
	0x033B28D8 LDP X20, X19, [X31 + 0x10]
	0x033B28DC MOV X2, X31
	0x033B28E0 LDP X30, X21, [X31], #0x20
	0x033B28E4 B 0x3321B64
	0x033B28E8 STR X30, [X31 - 0x20]!
	0x033B28EC STP X20, X19, [X31 + 0x10]
	0x033B28F0 ADRP X0, 0xD41000
	0x033B28F4 LDR X0, [X0 + 0x9D0]
	0x033B28F8 BL 0x1C16D08
	0x033B28FC MOVZ W1, 0x2
	0x033B2900 BL 0x1C16D6C
	0x033B2904 MOV X19, X0
	0x033B2908 BL 0x19903C0
	0x033B290C ADRP X20, 0xD79000
	0x033B2910 LDR X20, [X20 + 0xF88]
	0x033B2914 MOV X0, X20
	0x033B2918 BL 0x1C16D08
	0x033B291C MOV X1, X0
	0x033B2920 MOV X0, X19
	0x033B2924 BL 0x19980B4
	0x033B2928 MOV X0, X20
	0x033B292C BL 0x1C16D08
	0x033B2930 MOV X2, X0
	0x033B2934 MOV X0, X19
	0x033B2938 MOV X1, X31
	0x033B293C BL 0x1993444
	0x033B2940 MOV X0, X19
	0x033B2944 BL 0x19903C0
	0x033B2948 ADRP X20, 0xD73000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x102C000
	006 Move W8, [X21+398]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {33}
	013 Move X0, 0xD42000
	014 Move X0, [X0+3576]
	015 Call 0x1C17CF4
	016 Move X0, 0xD6B000
	017 Move X0, [X0+1256]
	018 Call 0x1C17CF4
	019 Move X0, 0xD6C000
	020 Move X0, [X0+3824]
	021 Call 0x1C17CF4
	022 Move X0, 0xD6A000
	023 Move X0, [X0+3040]
	024 Call 0x1C17CF4
	025 Move X0, 0xD69000
	026 Move X0, [X0+2312]
	027 Call 0x1C17CF4
	028 Move X0, 0xD7A000
	029 Move X0, [X0+3912]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+398], W8
	033 Move X8, 0xD6C000
	034 Move X8, [X8+3824]
	035 Compare X20, 0
	036 JumpIfEqual {41}
	037 Move W9, [X20+16]
	038 Compare W9, 0
	039 JumpIfEqual {41}
	040 Move X1, [X8]
	041 Move X1, [X8]
	042 Move X20, X1
	043 Move W2, 5
	044 Move X0, X20
	045 Move X3, X31
	046 Call String.Compare, X0, X1, X2
	047 Compare W0, 0
	048 JumpIfEqual {91}
	049 Move X8, 0xD6A000
	050 Move X8, [X8+3040]
	051 Move W2, 5
	052 Move X0, X20
	053 Move X3, X31
	054 Move X1, [X8]
	055 Call String.Compare, X0, X1, X2
	056 Compare W0, 0
	057 JumpIfEqual {93}
	058 Move X8, 0xD69000
	059 Move X8, [X8+2312]
	060 Move W2, 5
	061 Move X0, X20
	062 Move X3, X31
	063 Move X1, [X8]
	064 Call String.Compare, X0, X1, X2
	065 Compare W0, 0
	066 JumpIfEqual {105}
	067 Move X8, 0xD7A000
	068 Move X8, [X8+3912]
	069 Move W2, 5
	070 Move X0, X20
	071 Move X3, X31
	072 Move X1, [X8]
	073 Call String.Compare, X0, X1, X2
	074 Compare W0, 0
	075 JumpIfNotEqual {148}
	076 Move X0, X19
	077 Move X1, X31
	078 Call "il2cpp_vm_object_is_inst", X0
	079 Move X20, X0
	080 Move X0, X19
	081 Call 0x1C88AE4
	082 Move X8, 0xD42000
	083 Move X8, [X8+3576]
	084 Move X19, X0
	085 Move X8, [X8]
	086 Move W9, [X8+224]
	087 Compare W9, 0
	088 JumpIfEqual {123}
	089 Compare X20, 0
	090 JumpIfNotEqual {127}
	091 Move X8, [X19]
	092 Move X0, X19
	093 Move X0, X19
	094 Call 0x1C88AE4
	095 Compare X0, 0
	096 JumpIfEqual {168}
	097 Move X8, [X0]
	098 Move X2, [X8+360]
	099 Move X1, [X8+368]
	100 Move X20, [X31+16]
	101 Move X19, [X31+24]
	102 Move X30, [X31+32]
	103 Move X21, [X31+40]
	104 CallNoReturn X2
	105 Move X0, X19
	106 Call 0x1C88AE4
	107 Move X8, 0xD42000
	108 Move X8, [X8+3576]
	109 Move X19, X0
	110 Move X8, [X8]
	111 Move W9, [X8+224]
	112 Compare W9, 0
	113 JumpIfNotEqual {116}
	114 Move X0, X8
	115 Call 0x1C17DFC
	116 Move X0, X19
	117 Move X20, [X31+16]
	118 Move X19, [X31+24]
	119 Move X30, [X31+32]
	120 Move X21, [X31+40]
	121 Call Enum.InternalFormattedHexString, X0
	122 Return X0
	123 Move X0, X8
	124 Call 0x1C17DFC
	125 Compare X20, 0
	126 JumpIfEqual {138}
	127 Move X9, 0xD6B000
	128 Move X9, [X9+1256]
	129 Move X8, [X20]
	130 Move X1, [X9]
	131 Move W10, [X8+304]
	132 Move W9, [X1+304]
	133 NotImplemented "Instruction CMP not yet implemented."
	134 Move X8, [X8+200]
	135 Add X8, X8, X9
	136 NotImplemented "Instruction LDUR not yet implemented."
	137 NotImplemented "Instruction CMP not yet implemented."
	138 Move X0, X20
	139 Move X1, X19
	140 Move X20, [X31+16]
	141 Move X19, [X31+24]
	142 Move X30, [X31+32]
	143 Move X21, [X31+40]
	144 Call Enum.InternalFlagsFormat, X0, X1
	145 Return X0
	146 Move X0, X20
	147 Call 0x1C181E0
	148 Move X0, 0xD7A000
	149 Move X0, [X0+3920]
	150 Call 0x1C17D08
	151 Move X1, X31
	152 Call Environment.GetResourceString, X0
	153 Move X19, X0
	154 Move X0, 0xD6F000
	155 Move X0, [X0+3080]
	156 Call 0x1C17D08
	157 Call 0x1C17F10
	158 Move X1, X19
	159 Move X2, X31
	160 Move X20, X0
	161 Call FormatException..ctor, X0, X1
	162 Move X0, 0xD7A000
	163 Move X0, [X0+3928]
	164 Call 0x1C17D08
	165 Move X1, X0
	166 Move X0, X20
	167 Call 0x1C17DEC
	168 Call 0x1C17F20

Method: System.String ToString(System.IFormatProvider provider)

Disassembly:
	0x033B2B40 MOV X3, X19
	0x033B2B44 LDP X20, X19, [X31 + 0x20]
	0x033B2B48 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move X8, [X0]
	002 Move X2, [X8+360]
	003 Move X1, [X8+368]
	004 CallNoReturn X2

Method: System.Boolean HasFlag(System.Enum flag)

Disassembly:
	0x033B2B4C MOV W2, W31
	0x033B2B50 LDP X30, X23, [X31], #0x30
	0x033B2B54 B 0x33B2A40
	0x033B2B58 MOV X1, X31
	0x033B2B5C B 0x33D5414
	0x033B2B60 STR X30, [X31 - 0x20]!
	0x033B2B64 STP X20, X19, [X31 + 0x10]
	0x033B2B68 ADRP X19, 0x102B000
	0x033B2B6C ADRP X20, 0xD4A000
	0x033B2B70 LDRB W8, [X19 + 0x1AA]
	0x033B2B74 LDR X20, [X20 + 0x8D8]
	0x033B2B78 TBNZ X8, 0x0, 0x33B2B9C
	0x033B2B7C ADRP X0, 0xD4A000
	0x033B2B80 LDR X0, [X0 + 0x8D8]
	0x033B2B84 BL 0x1C16CF4
	0x033B2B88 ADRP X0, 0xD41000
	0x033B2B8C LDR X0, [X0 + 0xDF8]
	0x033B2B90 BL 0x1C16CF4
	0x033B2B94 MOVZ W8, 0x1
	0x033B2B98 STRB W8, [X19 + 0x1AA]
	0x033B2B9C LDR X0, [X20]
	0x033B2BA0 MOVZ W1, 0x1
	0x033B2BA4 BL 0x1C16D6C
	0x033B2BA8 CBZ X0, 0x33B2BDC
	0x033B2BAC LDR W8, [X0 + 0x18]
	0x033B2BB0 CBZ W8, 0x33B2BE0
	0x033B2BB4 ADRP X8, 0xD41000
	0x033B2BB8 LDR X8, [X8 + 0xDF8]
	0x033B2BBC MOVZ W9, 0x2C
	0x033B2BC0 STRH W9, [X0 + 0x20]
	0x033B2BC4 LDP X20, X19, [X31 + 0x10]
	0x033B2BC8 LDR X8, [X8]
	0x033B2BCC LDR X8, [X8 + 0xB8]
	0x033B2BD0 STR X0, [X8]
	0x033B2BD4 LDR X30, [X31], #0x20
	0x033B2BD8 RET
	0x033B2BDC BL 0x1C16F20
	0x033B2BE0 BL 0x1C16F28
	0x033B2BE4 STP X30, X21, [X31 - 0x20]!
	0x033B2BE8 STP X20, X19, [X31 + 0x10]
	0x033B2BEC ADRP X21, 0x102B000
	0x033B2BF0 ADRP X20, 0xD79000
	0x033B2BF4 LDRB W8, [X21 + 0x1AD]
	0x033B2BF8 LDR X20, [X20 + 0xF98]
	0x033B2BFC MOV X19, X0
	0x033B2C00 TBNZ X8, 0x0, 0x33B2C18
	0x033B2C04 ADRP X0, 0xD79000
	0x033B2C08 LDR X0, [X0 + 0xF98]
	0x033B2C0C BL 0x1C16CF4
	0x033B2C10 MOVZ W8, 0x1
	0x033B2C14 STRB W8, [X21 + 0x1AD]
	0x033B2C18 MOVZ W8, 0x1500
	0x033B2C1C MOVK W8, 0x80130000
	0x033B2C20 STR X31, [X19 + 0x18]
	0x033B2C24 STR X31, [X19 + 0x38]
	0x033B2C28 STR X31, [X19 + 0x58]
	0x033B2C2C STR W8, [X19 + 0x60]
	0x033B2C30 LDR X0, [X20]
	0x033B2C34 BL 0x1C16F10
	0x033B2C38 MOV X1, X31
	0x033B2C3C MOV X20, X0
	0x033B2C40 BL 0x32A75A4
	0x033B2C44 STR X20, [X19 + 0x70]
	0x033B2C48 LDP X20, X19, [X31 + 0x10]
	0x033B2C4C LDP X30, X21, [X31], #0x20
	0x033B2C50 RET
	0x033B2C54 STP X30, X19, [X31 - 0x10]!
	0x033B2C58 MOV X1, X31
	0x033B2C5C MOV X19, X0
	0x033B2C60 BL 0x33BDD8C
	0x033B2C64 MOV X0, X19
	0x033B2C68 LDP X30, X19, [X31], #0x10
	0x033B2C6C B 0x33B2BE4
	0x033B2C70 STR X30, [X31 - 0x20]!
	0x033B2C74 STP X20, X19, [X31 + 0x10]
	0x033B2C78 MOV X19, X1
	0x033B2C7C MOV X1, X31
	0x033B2C80 MOV X20, X0
	0x033B2C84 BL 0x33BDD8C
	0x033B2C88 MOV X0, X20
	0x033B2C8C BL 0x33B2BE4
	0x033B2C90 STR X19, [X20 + 0x18]
	0x033B2C94 LDP X20, X19, [X31 + 0x10]
	0x033B2C98 LDR X30, [X31], #0x20
	0x033B2C9C RET
	0x033B2CA0 STP X30, X21, [X31 - 0x20]!
	0x033B2CA4 STP X20, X19, [X31 + 0x10]
	0x033B2CA8 MOV X20, X1
	0x033B2CAC MOV X1, X31
	0x033B2CB0 MOV X19, X2
	0x033B2CB4 MOV X21, X0
	0x033B2CB8 BL 0x33BDD8C
	0x033B2CBC MOV X0, X21
	0x033B2CC0 BL 0x33B2BE4
	0x033B2CC4 STR X20, [X21 + 0x18]
	0x033B2CC8 STR X19, [X21 + 0x28]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X1, 0
	006 JumpIfEqual {35}
	007 Move X20, X1
	008 Move X1, X31
	009 Move X19, X0
	010 Call "il2cpp_vm_object_is_inst", X0
	011 Move X21, X0
	012 Move X0, X20
	013 Move X1, X31
	014 Call "il2cpp_vm_object_is_inst", X0
	015 Compare X21, 0
	016 JumpIfEqual {53}
	017 Move X8, [X21]
	018 Move X1, X0
	019 Move X0, X21
	020 Move X9, [X8+2168]
	021 Move X2, [X8+2176]
	022 NotImplemented "Instruction BLR not yet implemented."
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {54}
	027 Move X0, X19
	028 Move X1, X20
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call 0x1C88894
	034 Return X0
	035 Move X0, 0xD47000
	036 Move X0, [X0+1320]
	037 Call 0x1C17D08
	038 Call 0x1C17F10
	039 Move X19, X0
	040 Move X0, 0xD7A000
	041 Move X0, [X0+3944]
	042 Call 0x1C17D08
	043 Move X1, X0
	044 Move X0, X19
	045 Move X2, X31
	046 Call ArgumentNullException..ctor, X0, X1
	047 Move X0, 0xD7A000
	048 Move X0, [X0+3952]
	049 Call 0x1C17D08
	050 Move X1, X0
	051 Move X0, X19
	052 Call 0x1C17DEC
	053 Call 0x1C17F20
	054 Move X0, 0xD42000
	055 Move X0, [X0+2512]
	056 Call 0x1C17D08
	057 Move W1, 2
	058 Call 0x1C17D6C
	059 Move X21, X0
	060 Move X0, X20
	061 Move X1, X31
	062 Call "il2cpp_vm_object_is_inst", X0
	063 Move X20, X0
	064 Move X0, X21
	065 Call 0x19913C0
	066 Move X0, X21
	067 Move X1, X20
	068 Call 0x19990B4
	069 Move X0, X21
	070 Move X1, X31
	071 Move X2, X20
	072 Call 0x1994444
	073 Move X0, X19
	074 Move X1, X31
	075 Call "il2cpp_vm_object_is_inst", X0
	076 Move X19, X0
	077 Move X0, X21
	078 Call 0x19913C0
	079 Move X0, X21
	080 Move X1, X19
	081 Call 0x19990B4
	082 Move W1, 1
	083 Move X0, X21
	084 Move X2, X19
	085 Call 0x1994444
	086 Move X0, 0xD7A000
	087 Move X0, [X0+3960]
	088 Call 0x1C17D08
	089 Move X1, X21
	090 Move X2, X31
	091 Call Environment.GetResourceString, X0, X1
	092 Move X19, X0
	093 Move X0, 0xD4A000
	094 Move X0, [X0+1400]
	095 Call 0x1C17D08
	096 Call 0x1C17F10
	097 Move X1, X19
	098 Move X2, X31
	099 Move X20, X0
	100 Call ArgumentException..ctor, X0, X1
	101 Move X0, 0xD7A000
	102 Move X0, [X0+3952]
	103 Call 0x1C17D08
	104 Move X1, X0
	105 Move X0, X20
	106 Call 0x1C17DEC

Method: System.TypeCode GetTypeCode()

Disassembly:
	0x033B2CCC LDP X20, X19, [X31 + 0x10]
	0x033B2CD0 LDP X30, X21, [X31], #0x20
	0x033B2CD4 RET
	0x033B2CD8 STR X30, [X31 - 0x60]!
	0x033B2CDC STP X28, X27, [X31 + 0x10]
	0x033B2CE0 STP X26, X25, [X31 + 0x20]
	0x033B2CE4 STP X24, X23, [X31 + 0x30]
	0x033B2CE8 STP X22, X21, [X31 + 0x40]
	0x033B2CEC STP X20, X19, [X31 + 0x50]
	0x033B2CF0 ADRP X22, 0x102B000
	0x033B2CF4 LDRB W8, [X22 + 0x1AE]
	0x033B2CF8 MOV X20, X3
	0x033B2CFC MOV X21, X1
	0x033B2D00 MOV X19, X0
	0x033B2D04 TBNZ X8, 0x0, 0x33B2DE8
	0x033B2D08 ADRP X0, 0xD79000
	0x033B2D0C LDR X0, [X0 + 0xFA0]
	0x033B2D10 BL 0x1C16CF4
	0x033B2D14 ADRP X0, 0xD41000
	0x033B2D18 LDR X0, [X0 + 0x7D0]
	0x033B2D1C BL 0x1C16CF4
	0x033B2D20 ADRP X0, 0xD71000
	0x033B2D24 LDR X0, [X0 + 0xF38]
	0x033B2D28 BL 0x1C16CF4
	0x033B2D2C ADRP X0, 0xD41000
	0x033B2D30 LDR X0, [X0 + 0x818]
	0x033B2D34 BL 0x1C16CF4
	0x033B2D38 ADRP X0, 0xD72000
	0x033B2D3C LDR X0, [X0 + 0xEC0]
	0x033B2D40 BL 0x1C16CF4
	0x033B2D44 ADRP X0, 0xD79000
	0x033B2D48 LDR X0, [X0 + 0xF98]
	0x033B2D4C BL 0x1C16CF4
	0x033B2D50 ADRP X0, 0xD41000
	0x033B2D54 LDR X0, [X0 + 0x6C0]
	0x033B2D58 BL 0x1C16CF4
	0x033B2D5C ADRP X0, 0xD79000
	0x033B2D60 LDR X0, [X0 + 0xFA8]
	0x033B2D64 BL 0x1C16CF4
	0x033B2D68 ADRP X0, 0xD79000
	0x033B2D6C LDR X0, [X0 + 0xFB0]
	0x033B2D70 BL 0x1C16CF4
	0x033B2D74 ADRP X0, 0xD79000
	0x033B2D78 LDR X0, [X0 + 0xFB8]
	0x033B2D7C BL 0x1C16CF4
	0x033B2D80 ADRP X0, 0xD79000
	0x033B2D84 LDR X0, [X0 + 0xFC0]
	0x033B2D88 BL 0x1C16CF4
	0x033B2D8C ADRP X0, 0xD79000
	0x033B2D90 LDR X0, [X0 + 0xFC8]
	0x033B2D94 BL 0x1C16CF4
	0x033B2D98 ADRP X0, 0xD74000
	0x033B2D9C LDR X0, [X0 + 0x188]
	0x033B2DA0 BL 0x1C16CF4
	0x033B2DA4 ADRP X0, 0xD4C000
	0x033B2DA8 LDR X0, [X0 + 0x698]
	0x033B2DAC BL 0x1C16CF4
	0x033B2DB0 ADRP X0, 0xD79000
	0x033B2DB4 LDR X0, [X0 + 0xFD0]
	0x033B2DB8 BL 0x1C16CF4
	0x033B2DBC ADRP X0, 0xD4D000
	0x033B2DC0 LDR X0, [X0 + 0x650]
	0x033B2DC4 BL 0x1C16CF4
	0x033B2DC8 ADRP X0, 0xD6D000
	0x033B2DCC LDR X0, [X0 + 0x128]
	0x033B2DD0 BL 0x1C16CF4
	0x033B2DD4 ADRP X0, 0xD79000
	0x033B2DD8 LDR X0, [X0 + 0xFD8]
	0x033B2DDC BL 0x1C16CF4
	0x033B2DE0 MOVZ W8, 0x1
	0x033B2DE4 STRB W8, [X22 + 0x1AE]
	0x033B2DE8 MOV X0, X19
	0x033B2DEC MOV X1, X31
	0x033B2DF0 BL 0x33BDD8C
	0x033B2DF4 CBZ X21, 0x33B30EC
	0x033B2DF8 ADRP X8, 0xD74000
	0x033B2DFC LDR X8, [X8 + 0x188]
	0x033B2E00 ADRP X22, 0xD4D000
	0x033B2E04 LDR X22, [X22 + 0x650]
	0x033B2E08 ADRP X24, 0xD71000
	0x033B2E0C LDR X1, [X8]
	0x033B2E10 ADRP X25, 0xD41000
	0x033B2E14 ADRP X23, 0xD6D000
	0x033B2E18 LDR X24, [X24 + 0xF38]
	0x033B2E1C LDR X25, [X25 + 0x6C0]
	0x033B2E20 LDR X23, [X23 + 0x128]
	0x033B2E24 MOV X0, X21
	0x033B2E28 MOV X2, X31
	0x033B2E2C BL 0x32A9F64
	0x033B2E30 STR X0, [X19 + 0x10]
	0x033B2E34 LDR X1, [X22]
	0x033B2E38 MOV X0, X21
	0x033B2E3C MOV X2, X31
	0x033B2E40 BL 0x32A9F64
	0x033B2E44 STR X0, [X19 + 0x18]
	0x033B2E48 LDR X0, [X25]
	0x033B2E4C LDR X22, [X24]
	0x033B2E50 LDR W8, [X0 + 0xE0]
	0x033B2E54 CBNZ W8, 0x33B2E5C
	0x033B2E58 BL 0x1C16DFC
	0x033B2E5C MOV X0, X22
	0x033B2E60 MOV X1, X31
	0x033B2E64 BL 0x338C698
	0x033B2E68 LDR X1, [X23]
	0x033B2E6C MOV X2, X0
	0x033B2E70 MOV X0, X21
	0x033B2E74 MOV X3, X31
	0x033B2E78 BL 0x32A9880
	0x033B2E7C CBZ X0, 0x33B2EC0
	0x033B2E80 ADRP X24, 0xD41000
	0x033B2E84 LDR X24, [X24 + 0x818]
	0x033B2E88 MOV X22, X0
	0x033B2E8C LDR X23, [X24]
	0x033B2E90 MOV X1, X23
	0x033B2E94 BL 0x1C16E00
	0x033B2E98 CBZ X0, 0x33B2EB4
	0x033B2E9C STR X0, [X19 + 0x20]
	0x033B2EA0 LDR X23, [X24]
	0x033B2EA4 MOV X0, X22
	0x033B2EA8 MOV X1, X23
	0x033B2EAC BL 0x1C16E00
	0x033B2EB0 CBNZ X0, 0x33B2EC4
	0x033B2EB4 MOV X0, X22
	0x033B2EB8 MOV X1, X23
	0x033B2EBC B 0x33B2F50
	0x033B2EC0 STR X31, [X19 + 0x20]
	0x033B2EC4 ADRP X8, 0xD79000
	0x033B2EC8 LDR X8, [X8 + 0xFA0]
	0x033B2ECC ADRP X22, 0xD79000
	0x033B2ED0 MOV X1, X31
	0x033B2ED4 LDR X0, [X8]
	0x033B2ED8 LDR X22, [X22 + 0xFC8]
	0x033B2EDC BL 0x338C698
	0x033B2EE0 LDR X1, [X22]
	0x033B2EE4 MOV X2, X0
	0x033B2EE8 MOV X0, X21
	0x033B2EEC MOV X3, X31
	0x033B2EF0 BL 0x32A9678
	0x033B2EF4 CBZ X0, 0x33B2F54
	0x033B2EF8 ADRP X8, 0xD41000
	0x033B2EFC LDR X8, [X8 + 0x7D0]
	0x033B2F00 LDR X9, [X0]
	0x033B2F04 LDR X1, [X8]
	0x033B2F08 LDRB W10, [X9 + 0x130]
	0x033B2F0C LDRB W8, [X1 + 0x130]
	0x033B2F10 CMP W10, W8
	0x033B2F14 B.CC 0x33B2F50
	0x033B2F18 LDR X10, [X9 + 0xC8]
	0x033B2F1C SUB X9, X8, 0x1
	0x033B2F20 LDR X10, [X10, X9, LSL #3]
	0x033B2F24 CMP X10, X1
	0x033B2F28 B.NE 0x33B2F50
	0x033B2F2C STR X0, [X19 + 0x28]
	0x033B2F30 LDR X10, [X0]
	0x033B2F34 LDRB W11, [X10 + 0x130]
	0x033B2F38 CMP W11, W8
	0x033B2F3C B.CC 0x33B2F50
	0x033B2F40 LDR X8, [X10 + 0xC8]
	0x033B2F44 LDR X8, [X8, X9, LSL #3]
	0x033B2F48 CMP X8, X1
	0x033B2F4C B.EQ 0x33B2F58
	0x033B2F50 BL 0x1C171E0
	0x033B2F54 STR X31, [X19 + 0x28]
	0x033B2F58 ADRP X8, 0xD79000
	0x033B2F5C LDR X8, [X8 + 0xFC0]
	0x033B2F60 ADRP X22, 0xD79000
	0x033B2F64 ADRP X23, 0xD79000
	0x033B2F68 ADRP X24, 0xD79000
	0x033B2F6C ADRP X25, 0xD79000
	0x033B2F70 LDR X22, [X22 + 0xFD8]
	0x033B2F74 LDR X23, [X23 + 0xFA8]
	0x033B2F78 LDR X24, [X24 + 0xFB8]
	0x033B2F7C LDR X25, [X25 + 0xFD0]
	0x033B2F80 LDR X1, [X8]
	0x033B2F84 ADRP X26, 0xD4C000
	0x033B2F88 ADRP X27, 0xD72000
	0x033B2F8C ADRP X28, 0xD79000
	0x033B2F90 LDR X26, [X26 + 0x698]
	0x033B2F94 LDR X27, [X27 + 0xEC0]
	0x033B2F98 LDR X28, [X28 + 0xFB0]
	0x033B2F9C MOV X0, X21
	0x033B2FA0 MOV X2, X31
	0x033B2FA4 BL 0x32A9F64
	0x033B2FA8 STR X0, [X19 + 0x30]
	0x033B2FAC LDR X1, [X22]
	0x033B2FB0 MOV X0, X21
	0x033B2FB4 MOV X2, X31
	0x033B2FB8 BL 0x32A9F64
	0x033B2FBC STR X0, [X19 + 0x40]
	0x033B2FC0 LDR X1, [X23]
	0x033B2FC4 MOV X0, X21
	0x033B2FC8 MOV X2, X31
	0x033B2FCC BL 0x32A9F64
	0x033B2FD0 STR X0, [X19 + 0x48]
	0x033B2FD4 LDR X1, [X24]
	0x033B2FD8 MOV X0, X21
	0x033B2FDC MOV X2, X31
	0x033B2FE0 BL 0x32A9B08
	0x033B2FE4 STR W0, [X19 + 0x50]
	0x033B2FE8 LDR X1, [X25]
	0x033B2FEC MOV X0, X21
	0x033B2FF0 MOV X2, X31
	0x033B2FF4 BL 0x32A9B08
	0x033B2FF8 STR W0, [X19 + 0x60]
	0x033B2FFC LDR X1, [X26]
	0x033B3000 MOV X0, X21
	0x033B3004 MOV X2, X31
	0x033B3008 BL 0x32A9F64
	0x033B300C STR X0, [X19 + 0x68]
	0x033B3010 LDR X0, [X27]
	0x033B3014 MOV X1, X31
	0x033B3018 BL 0x338C698
	0x033B301C LDR X1, [X28]
	0x033B3020 MOV X2, X0
	0x033B3024 MOV X0, X21
	0x033B3028 MOV X3, X31
	0x033B302C BL 0x32A9880
	0x033B3030 CBZ X0, 0x33B3050
	0x033B3034 ADRP X8, 0xD78000
	0x033B3038 LDR X8, [X8 + 0xF98]
	0x033B303C LDR X9, [X0]
	0x033B3040 LDR X8, [X8]
	0x033B3044 CMP X9, X8
	0x033B3048 CSEL X8, X0, X31, EQ
	0x033B304C B 0x33B3054
	0x033B3050 MOV X8, X31
	0x033B3054 LDR X9, [X19 + 0x10]
	0x033B3058 STR X8, [X19 + 0x70]
	0x033B305C CBZ X9, 0x33B309C
	0x033B3060 LDR W8, [X19 + 0x60]
	0x033B3064 CBZ W8, 0x33B309C
	0x033B3068 CMP W20, 0x80
	0x033B306C B.NE 0x33B3080
	0x033B3070 LDP X1, X0, [X19 + 0x40]
	0x033B3074 MOV X2, X31
	0x033B3078 BL 0x321B938
	0x033B307C STP X31, X0, [X19 + 0x40]
	0x033B3080 LDP X20, X19, [X31 + 0x50]
	0x033B3084 LDP X22, X21, [X31 + 0x40]
	0x033B3088 LDP X24, X23, [X31 + 0x30]
	0x033B308C LDP X26, X25, [X31 + 0x20]
	0x033B3090 LDP X28, X27, [X31 + 0x10]
	0x033B3094 LDR X30, [X31], #0x60
	0x033B3098 RET
	0x033B309C ADRP X0, 0xD72000
	0x033B30A0 LDR X0, [X0 + 0xE30]
	0x033B30A4 BL 0x1C16D08
	0x033B30A8 MOV X1, X31
	0x033B30AC BL 0x33BDD84
	0x033B30B0 MOV X19, X0
	0x033B30B4 ADRP X0, 0xD6A000
	0x033B30B8 LDR X0, [X0 + 0x2E0]
	0x033B30BC BL 0x1C16D08
	0x033B30C0 BL 0x1C16F10
	0x033B30C4 MOV X1, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x102C000
	007 Move X20, 0xD42000
	008 Move W8, [X21+399]
	009 Move X20, [X20+3576]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {53}
	015 Move X0, 0xD6B000
	016 Move X0, [X0+584]
	017 Call 0x1C17CF4
	018 Move X0, 0xD69000
	019 Move X0, [X0+3432]
	020 Call 0x1C17CF4
	021 Move X0, 0xD69000
	022 Move X0, [X0+3440]
	023 Call 0x1C17CF4
	024 Move X0, 0xD42000
	025 Move X0, [X0+3576]
	026 Call 0x1C17CF4
	027 Move X0, 0xD69000
	028 Move X0, [X0+3448]
	029 Call 0x1C17CF4
	030 Move X0, 0xD69000
	031 Move X0, [X0+3456]
	032 Call 0x1C17CF4
	033 Move X0, 0xD69000
	034 Move X0, [X0+3464]
	035 Call 0x1C17CF4
	036 Move X0, 0xD69000
	037 Move X0, [X0+3472]
	038 Call 0x1C17CF4
	039 Move X0, 0xD42000
	040 Move X0, [X0+1728]
	041 Call 0x1C17CF4
	042 Move X0, 0xD69000
	043 Move X0, [X0+3480]
	044 Call 0x1C17CF4
	045 Move X0, 0xD69000
	046 Move X0, [X0+3488]
	047 Call 0x1C17CF4
	048 Move X0, 0xD69000
	049 Move X0, [X0+3496]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X21+399], W8
	053 Move X22, 0xD69000
	054 Move X21, 0xD42000
	055 Move X22, [X22+3456]
	056 Move X21, [X21+1728]
	057 Move X0, X19
	058 Move X1, X31
	059 Call "il2cpp_vm_object_is_inst", X0
	060 Move X8, [X20]
	061 Move X19, X0
	062 Move W9, [X8+224]
	063 Compare W9, 0
	064 JumpIfNotEqual {67}
	065 Move X0, X8
	066 Call 0x1C17DFC
	067 Move X0, X19
	068 Call Enum.GetUnderlyingType, X0
	069 Move X8, [X21]
	070 Move X20, [X22]
	071 Move X19, X0
	072 Move W9, [X8+224]
	073 Compare W9, 0
	074 JumpIfNotEqual {77}
	075 Move X0, X8
	076 Call 0x1C17DFC
	077 Move X0, X20
	078 Move X1, X31
	079 Call Type.GetTypeFromHandle, X0
	080 Move X1, X0
	081 Move X0, X19
	082 Move X2, X31
	083 Call Type.op_Equality, X0, X1
	084 Move TEMP, X0
	085 And TEMP, TEMP, 1
	086 Compare TEMP, 1
	087 JumpIfNotEqual {89}
	088 Move W0, 9
	089 Move X8, 0xD69000
	090 Move X0, [X21]
	091 Move X8, [X8+3472]
	092 Move W9, [X0+224]
	093 Move X20, [X8]
	094 Compare W9, 0
	095 JumpIfNotEqual {97}
	096 Call 0x1C17DFC
	097 Move X0, X20
	098 Move X1, X31
	099 Call Type.GetTypeFromHandle, X0
	100 Move X1, X0
	101 Move X0, X19
	102 Move X2, X31
	103 Call Type.op_Equality, X0, X1
	104 Move TEMP, X0
	105 And TEMP, TEMP, 1
	106 Compare TEMP, 1
	107 JumpIfNotEqual {109}
	108 Move W0, 5
	109 Move X8, 0xD69000
	110 Move X0, [X21]
	111 Move X8, [X8+3448]
	112 Move W9, [X0+224]
	113 Move X20, [X8]
	114 Compare W9, 0
	115 JumpIfNotEqual {117}
	116 Call 0x1C17DFC
	117 Move X0, X20
	118 Move X1, X31
	119 Call Type.GetTypeFromHandle, X0
	120 Move X1, X0
	121 Move X0, X19
	122 Move X2, X31
	123 Call Type.op_Equality, X0, X1
	124 Move TEMP, X0
	125 And TEMP, TEMP, 1
	126 Compare TEMP, 1
	127 JumpIfNotEqual {129}
	128 Move W0, 7
	129 Move X8, 0xD69000
	130 Move X0, [X21]
	131 Move X8, [X8+3464]
	132 Move W9, [X0+224]
	133 Move X20, [X8]
	134 Compare W9, 0
	135 JumpIfNotEqual {137}
	136 Call 0x1C17DFC
	137 Move X0, X20
	138 Move X1, X31
	139 Call Type.GetTypeFromHandle, X0
	140 Move X1, X0
	141 Move X0, X19
	142 Move X2, X31
	143 Call Type.op_Equality, X0, X1
	144 Move TEMP, X0
	145 And TEMP, TEMP, 1
	146 Compare TEMP, 1
	147 JumpIfNotEqual {149}
	148 Move W0, 11
	149 Move X8, 0xD69000
	150 Move X0, [X21]
	151 Move X8, [X8+3488]
	152 Move W9, [X0+224]
	153 Move X20, [X8]
	154 Compare W9, 0
	155 JumpIfNotEqual {157}
	156 Call 0x1C17DFC
	157 Move X0, X20
	158 Move X1, X31
	159 Call Type.GetTypeFromHandle, X0
	160 Move X1, X0
	161 Move X0, X19
	162 Move X2, X31
	163 Call Type.op_Equality, X0, X1
	164 Move TEMP, X0
	165 And TEMP, TEMP, 1
	166 Compare TEMP, 1
	167 JumpIfNotEqual {169}
	168 Move W0, 10
	169 Move X8, 0xD69000
	170 Move X0, [X21]
	171 Move X8, [X8+3432]
	172 Move W9, [X0+224]
	173 Move X20, [X8]
	174 Compare W9, 0
	175 JumpIfNotEqual {177}
	176 Call 0x1C17DFC
	177 Move X0, X20
	178 Move X1, X31
	179 Call Type.GetTypeFromHandle, X0
	180 Move X1, X0
	181 Move X0, X19
	182 Move X2, X31
	183 Call Type.op_Equality, X0, X1
	184 Move TEMP, X0
	185 And TEMP, TEMP, 1
	186 Compare TEMP, 1
	187 JumpIfNotEqual {189}
	188 Move W0, 6
	189 Move X8, 0xD69000
	190 Move X0, [X21]
	191 Move X8, [X8+3480]
	192 Move W9, [X0+224]
	193 Move X20, [X8]
	194 Compare W9, 0
	195 JumpIfNotEqual {197}
	196 Call 0x1C17DFC
	197 Move X0, X20
	198 Move X1, X31
	199 Call Type.GetTypeFromHandle, X0
	200 Move X1, X0
	201 Move X0, X19
	202 Move X2, X31
	203 Call Type.op_Equality, X0, X1
	204 Move TEMP, X0
	205 And TEMP, TEMP, 1
	206 Compare TEMP, 1
	207 JumpIfNotEqual {209}
	208 Move W0, 8
	209 Move X8, 0xD69000
	210 Move X0, [X21]
	211 Move X8, [X8+3496]
	212 Move W9, [X0+224]
	213 Move X20, [X8]
	214 Compare W9, 0
	215 JumpIfNotEqual {217}
	216 Call 0x1C17DFC
	217 Move X0, X20
	218 Move X1, X31
	219 Call Type.GetTypeFromHandle, X0
	220 Move X1, X0
	221 Move X0, X19
	222 Move X2, X31
	223 Call Type.op_Equality, X0, X1
	224 Move TEMP, X0
	225 And TEMP, TEMP, 1
	226 Compare TEMP, 1
	227 JumpIfNotEqual {229}
	228 Move W0, 12
	229 Move X8, 0xD6B000
	230 Move X0, [X21]
	231 Move X8, [X8+584]
	232 Move W9, [X0+224]
	233 Move X20, [X8]
	234 Compare W9, 0
	235 JumpIfNotEqual {237}
	236 Call 0x1C17DFC
	237 Move X0, X20
	238 Move X1, X31
	239 Call Type.GetTypeFromHandle, X0
	240 Move X1, X0
	241 Move X0, X19
	242 Move X2, X31
	243 Call Type.op_Equality, X0, X1
	244 Move TEMP, X0
	245 And TEMP, TEMP, 1
	246 Compare TEMP, 1
	247 JumpIfNotEqual {249}
	248 Move W0, 3
	249 Move X8, 0xD68000
	250 Move X0, [X21]
	251 Move X8, [X8+3440]
	252 Move W9, [X0+224]
	253 Move X20, [X8]
	254 Compare W9, 0
	255 JumpIfNotEqual {257}
	256 Call 0x1C17DFC
	257 Move X0, X20
	258 Move X1, X31
	259 Call Type.GetTypeFromHandle, X0
	260 Move X1, X0
	261 Move X0, X19
	262 Move X2, X31
	263 Call Type.op_Equality, X0, X1
	264 Move TEMP, X0
	265 And TEMP, TEMP, 1
	266 Compare TEMP, 1
	267 JumpIfNotEqual {275}
	268 Move W0, 4
	269 Move X20, [X31+32]
	270 Move X19, [X31+40]
	271 Move X22, [X31+16]
	272 Move X21, [X31+24]
	273 Move X30, [X31+48]
	274 Return X0
	275 Move X0, 0xD79000
	276 Move X0, [X0+968]
	277 Call 0x1C17D08
	278 Move X1, X31
	279 Call Environment.GetResourceString, X0
	280 Move X19, X0
	281 Move X0, 0xD41000
	282 Move X0, [X0+1456]
	283 Call 0x1C17D08
	284 Call 0x1C17F10
	285 Move X1, X19
	286 Move X2, X31
	287 Move X20, X0
	288 Call InvalidOperationException..ctor, X0, X1
	289 Move X0, 0xD79000
	290 Move X0, [X0+3968]
	291 Call 0x1C17D08
	292 Move X1, X0
	293 Move X0, X20
	294 Call 0x1C17DEC

Method: System.Boolean System.IConvertible.ToBoolean(System.IFormatProvider provider)

Disassembly:
	0x033B30C8 MOV X2, X31
	0x033B30CC MOV X20, X0
	0x033B30D0 BL 0x329F100
	0x033B30D4 ADRP X0, 0xD78000
	0x033B30D8 LDR X0, [X0 + 0xFE0]
	0x033B30DC BL 0x1C16D08
	0x033B30E0 MOV X1, X0
	0x033B30E4 MOV X0, X20
	0x033B30E8 BL 0x1C16DEC
	0x033B30EC ADRP X0, 0xD45000
	0x033B30F0 LDR X0, [X0 + 0x528]
	0x033B30F4 BL 0x1C16D08
	0x033B30F8 BL 0x1C16F10
	0x033B30FC MOV X19, X0
	0x033B3100 ADRP X0, 0xD6A000
	0x033B3104 LDR X0, [X0 + 0x2D8]
	0x033B3108 BL 0x1C16D08
	0x033B310C MOV X1, X0
	0x033B3110 MOV X0, X19
	0x033B3114 MOV X2, X31
	0x033B3118 BL 0x330E100
	0x033B311C ADRP X0, 0xD78000
	0x033B3120 LDR X0, [X0 + 0xFE0]
	0x033B3124 BL 0x1C16D08
	0x033B3128 MOV X1, X0
	0x033B312C MOV X0, X19
	0x033B3130 BL 0x1C16DEC
	0x033B3134 STR X30, [X31 - 0x20]!
	0x033B3138 STP X20, X19, [X31 + 0x10]
	0x033B313C ADRP X20, 0x102A000
	0x033B3140 LDRB W8, [X20 + 0x1AF]
	0x033B3144 MOV X19, X0
	0x033B3148 TBNZ X8, 0x0, 0x33B316C
	0x033B314C ADRP X0, 0xD40000
	0x033B3150 LDR X0, [X0 + 0x9D0]
	0x033B3154 BL 0x1C16CF4
	0x033B3158 ADRP X0, 0xD78000
	0x033B315C LDR X0, [X0 + 0xFE8]
	0x033B3160 BL 0x1C16CF4
	0x033B3164 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x102B000
	006 Move X21, 0xD43000
	007 Move W8, [X20+400]
	008 Move X21, [X21+3144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xD4A000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move X0, 0xD43000
	018 Move X0, [X0+3144]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+400], W8
	022 Move X20, 0xD4A000
	023 Move X20, [X20+2536]
	024 Move X0, X19
	025 Call 0x1C88AE4
	026 Move X8, [X21]
	027 Move X19, X0
	028 Move W9, [X8+224]
	029 Compare W9, 0
	030 JumpIfNotEqual {33}
	031 Move X0, X8
	032 Call 0x1C17DFC
	033 Move X0, X31
	034 Call CultureInfo.get_CurrentCulture
	035 Move X8, [X20]
	036 Move X20, X0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X0, X19
	043 Move X1, X20
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X2, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call Convert.ToBoolean, X0, X1
	050 Return X0

Method: System.Char System.IConvertible.ToChar(System.IFormatProvider provider)

Disassembly:
	0x033B3168 STRB W8, [X20 + 0x1AF]
	0x033B316C LDR X0, [X19 + 0x18]
	0x033B3170 CBZ X0, 0x33B3180
	0x033B3174 LDP X20, X19, [X31 + 0x10]
	0x033B3178 LDR X30, [X31], #0x20
	0x033B317C RET
	0x033B3180 LDR X8, [X19 + 0x10]
	0x033B3184 CBNZ X8, 0x33B3194
	0x033B3188 MOV X0, X19
	0x033B318C BL 0x33B320C
	0x033B3190 STR X0, [X19 + 0x10]
	0x033B3194 ADRP X8, 0xD40000
	0x033B3198 LDR X8, [X8 + 0x9D0]
	0x033B319C MOVZ W1, 0x1
	0x033B31A0 LDR X0, [X8]
	0x033B31A4 BL 0x1C16D6C
	0x033B31A8 CBZ X0, 0x33B31F8
	0x033B31AC LDR X19, [X19 + 0x10]
	0x033B31B0 MOV X20, X0
	0x033B31B4 CBZ X19, 0x33B31CC
	0x033B31B8 LDR X8, [X20]
	0x033B31BC MOV X0, X19
	0x033B31C0 LDR X1, [X8 + 0x40]
	0x033B31C4 BL 0x1C16E00
	0x033B31C8 CBZ X0, 0x33B3200
	0x033B31CC LDR W8, [X20 + 0x18]
	0x033B31D0 CBZ W8, 0x33B31FC
	0x033B31D4 STR X19, [X20 + 0x20]
	0x033B31D8 ADRP X8, 0xD78000
	0x033B31DC LDR X8, [X8 + 0xFE8]
	0x033B31E0 MOV X1, X20
	0x033B31E4 LDP X20, X19, [X31 + 0x10]
	0x033B31E8 MOV X2, X31
	0x033B31EC LDR X0, [X8]
	0x033B31F0 LDR X30, [X31], #0x20
	0x033B31F4 B 0x33BFB40
	0x033B31F8 BL 0x1C16F20
	0x033B31FC BL 0x1C16F28
	0x033B3200 BL 0x1C16F44
	0x033B3204 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x102B000
	006 Move X21, 0xD43000
	007 Move W8, [X20+401]
	008 Move X21, [X21+3144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xD4A000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move X0, 0xD43000
	018 Move X0, [X0+3144]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+401], W8
	022 Move X20, 0xD4A000
	023 Move X20, [X20+2536]
	024 Move X0, X19
	025 Call 0x1C88AE4
	026 Move X8, [X21]
	027 Move X19, X0
	028 Move W9, [X8+224]
	029 Compare W9, 0
	030 JumpIfNotEqual {33}
	031 Move X0, X8
	032 Call 0x1C17DFC
	033 Move X0, X31
	034 Call CultureInfo.get_CurrentCulture
	035 Move X8, [X20]
	036 Move X20, X0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X0, X19
	043 Move X1, X20
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X2, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call Convert.ToChar, X0, X1
	050 Return X0

Method: System.SByte System.IConvertible.ToSByte(System.IFormatProvider provider)

Disassembly:
	0x033B3208 BL 0x1C16DEC
	0x033B320C STP X30, X19, [X31 - 0x10]!
	0x033B3210 MOV X19, X0
	0x033B3214 LDR X0, [X0 + 0x10]
	0x033B3218 CBNZ X0, 0x33B323C
	0x033B321C MOV X0, X19
	0x033B3220 MOV X1, X31
	0x033B3224 BL 0x33BE520
	0x033B3228 CBZ X0, 0x33B3244
	0x033B322C LDR X8, [X0]
	0x033B3230 LDP X9, X1, [X8 + 0x168]
	0x033B3234 BLR X9
	0x033B3238 STR X0, [X19 + 0x10]
	0x033B323C LDP X30, X19, [X31], #0x10
	0x033B3240 RET
	0x033B3244 BL 0x1C16F20
	0x033B3248 STR X30, [X31 - 0x20]!
	0x033B324C STP X20, X19, [X31 + 0x10]
	0x033B3250 ADRP X20, 0x102A000
	0x033B3254 LDRB W8, [X20 + 0x1B0]
	0x033B3258 MOV X19, X0
	0x033B325C TBNZ X8, 0x0, 0x33B3274
	0x033B3260 ADRP X0, 0xD78000
	0x033B3264 LDR X0, [X0 + 0xFF0]
	0x033B3268 BL 0x1C16CF4
	0x033B326C MOVZ W8, 0x1
	0x033B3270 STRB W8, [X20 + 0x1B0]
	0x033B3274 LDR X20, [X19 + 0x20]
	0x033B3278 CBNZ X20, 0x33B329C
	0x033B327C ADRP X8, 0xD78000
	0x033B3280 LDR X8, [X8 + 0xFF0]
	0x033B3284 LDR X0, [X8]
	0x033B3288 BL 0x1C16F10
	0x033B328C MOV X1, X31
	0x033B3290 MOV X20, X0
	0x033B3294 BL 0x33507A4
	0x033B3298 STR X20, [X19 + 0x20]
	0x033B329C MOV X0, X20
	0x033B32A0 LDP X20, X19, [X31 + 0x10]
	0x033B32A4 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x102B000
	006 Move X21, 0xD43000
	007 Move W8, [X20+402]
	008 Move X21, [X21+3144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xD4A000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move X0, 0xD43000
	018 Move X0, [X0+3144]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+402], W8
	022 Move X20, 0xD4A000
	023 Move X20, [X20+2536]
	024 Move X0, X19
	025 Call 0x1C88AE4
	026 Move X8, [X21]
	027 Move X19, X0
	028 Move W9, [X8+224]
	029 Compare W9, 0
	030 JumpIfNotEqual {33}
	031 Move X0, X8
	032 Call 0x1C17DFC
	033 Move X0, X31
	034 Call CultureInfo.get_CurrentCulture
	035 Move X8, [X20]
	036 Move X20, X0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X0, X19
	043 Move X1, X20
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X2, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call Convert.ToSByte, X0, X1
	050 Return X0

Method: System.Byte System.IConvertible.ToByte(System.IFormatProvider provider)

Disassembly:
	0x033B32A8 RET
	0x033B32AC MOV X1, X31
	0x033B32B0 B 0x33BE520
	0x033B32B4 LDR X0, [X0 + 0x28]
	0x033B32B8 RET
	0x033B32BC MOVZ W1, 0x1
	0x033B32C0 B 0x33B32C4
	0x033B32C4 STP X30, X19, [X31 - 0x10]!
	0x033B32C8 LDP X8, X19, [X0 + 0x40]
	0x033B32CC CBZ X8, 0x33B32DC
	0x033B32D0 MOV X0, X19
	0x033B32D4 MOV X1, X8
	0x033B32D8 B 0x33B32F8
	0x033B32DC LDR X8, [X0 + 0x38]
	0x033B32E0 CBZ X8, 0x33B3304
	0x033B32E4 AND W1, W1, 0x1
	0x033B32E8 MOV X2, X31
	0x033B32EC BL 0x33C23B0
	0x033B32F0 MOV X1, X0
	0x033B32F4 MOV X0, X19
	0x033B32F8 MOV X2, X31
	0x033B32FC LDP X30, X19, [X31], #0x10
	0x033B3300 B 0x321B938
	0x033B3304 MOV X0, X19
	0x033B3308 LDP X30, X19, [X31], #0x10
	0x033B330C RET
	0x033B3310 MOV X0, X1
	0x033B3314 RET
	0x033B3318 STR W1, [X0 + 0x60]
	0x033B331C RET
	0x033B3320 STR X30, [X31 - 0x20]!
	0x033B3324 STP X20, X19, [X31 + 0x10]
	0x033B3328 ADRP X20, 0x102A000
	0x033B332C LDRB W8, [X20 + 0x1B1]
	0x033B3330 MOV X19, X0
	0x033B3334 TBNZ X8, 0x0, 0x33B334C
	0x033B3338 ADRP X0, 0xD72000
	0x033B333C LDR X0, [X0 + 0x808]
	0x033B3340 BL 0x1C16CF4
	0x033B3344 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x102B000
	006 Move X21, 0xD43000
	007 Move W8, [X20+403]
	008 Move X21, [X21+3144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xD4A000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move X0, 0xD43000
	018 Move X0, [X0+3144]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+403], W8
	022 Move X20, 0xD4A000
	023 Move X20, [X20+2536]
	024 Move X0, X19
	025 Call 0x1C88AE4
	026 Move X8, [X21]
	027 Move X19, X0
	028 Move W9, [X8+224]
	029 Compare W9, 0
	030 JumpIfNotEqual {33}
	031 Move X0, X8
	032 Call 0x1C17DFC
	033 Move X0, X31
	034 Call CultureInfo.get_CurrentCulture
	035 Move X8, [X20]
	036 Move X20, X0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X0, X19
	043 Move X1, X20
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X2, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call Convert.ToByte, X0, X1
	050 Return X0

Method: System.Int16 System.IConvertible.ToInt16(System.IFormatProvider provider)

Disassembly:
	0x033B3348 STRB W8, [X20 + 0x1B1]
	0x033B334C LDR X8, [X19 + 0x68]
	0x033B3350 CBZ X8, 0x33B3364
	0x033B3354 LDR X0, [X19 + 0x68]
	0x033B3358 LDP X20, X19, [X31 + 0x10]
	0x033B335C LDR X30, [X31], #0x20
	0x033B3360 RET
	0x033B3364 ADRP X8, 0xD72000
	0x033B3368 LDR X8, [X8 + 0x808]
	0x033B336C LDR X0, [X8]
	0x033B3370 BL 0x1C16F10
	0x033B3374 MOVZ W2, 0x1
	0x033B3378 MOV X1, X19
	0x033B337C MOV X3, X31
	0x033B3380 MOV X20, X0
	0x033B3384 BL 0x334E4C0
	0x033B3388 CBZ X20, 0x33B3428
	0x033B338C LDR X8, [X20]
	0x033B3390 MOV X0, X20
	0x033B3394 LDP X9, X1, [X8 + 0x178]
	0x033B3398 BLR X9
	0x033B339C CMP W0, 0x1
	0x033B33A0 B.LT 0x33B3354
	0x033B33A4 LDR X8, [X20]
	0x033B33A8 MOV X0, X20
	0x033B33AC MOV W1, W31
	0x033B33B0 LDP X9, X2, [X8 + 0x188]
	0x033B33B4 BLR X9
	0x033B33B8 CBZ X0, 0x33B3428
	0x033B33BC LDR X8, [X0]
	0x033B33C0 LDP X9, X1, [X8 + 0x1A8]
	0x033B33C4 BLR X9
	0x033B33C8 MOV X1, X31
	0x033B33CC MOV X2, X31
	0x033B33D0 MOV X20, X0
	0x033B33D4 BL 0x32CE114
	0x033B33D8 TBZ X0, 0x0, 0x33B3354
	0x033B33DC CBZ X20, 0x33B3428
	0x033B33E0 LDR X8, [X20]
	0x033B33E4 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x102B000
	006 Move X21, 0xD43000
	007 Move W8, [X20+404]
	008 Move X21, [X21+3144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xD4A000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move X0, 0xD43000
	018 Move X0, [X0+3144]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+404], W8
	022 Move X20, 0xD4A000
	023 Move X20, [X20+2536]
	024 Move X0, X19
	025 Call 0x1C88AE4
	026 Move X8, [X21]
	027 Move X19, X0
	028 Move W9, [X8+224]
	029 Compare W9, 0
	030 JumpIfNotEqual {33}
	031 Move X0, X8
	032 Call 0x1C17DFC
	033 Move X0, X31
	034 Call CultureInfo.get_CurrentCulture
	035 Move X8, [X20]
	036 Move X20, X0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X0, X19
	043 Move X1, X20
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X2, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call Convert.ToInt16, X0, X1
	050 Return X0

Method: System.UInt16 System.IConvertible.ToUInt16(System.IFormatProvider provider)

Disassembly:
	0x033B33E8 LDP X9, X1, [X8 + 0x1B8]
	0x033B33EC BLR X9
	0x033B33F0 CBZ X0, 0x33B3428
	0x033B33F4 LDR X8, [X0]
	0x033B33F8 LDR X9, [X8 + 0x2F8]
	0x033B33FC LDR X1, [X8 + 0x300]
	0x033B3400 BLR X9
	0x033B3404 CBZ X0, 0x33B3428
	0x033B3408 LDR X8, [X0]
	0x033B340C LDR X9, [X8 + 0x258]
	0x033B3410 LDR X1, [X8 + 0x260]
	0x033B3414 BLR X9
	0x033B3418 CBZ X0, 0x33B3428
	0x033B341C LDR X8, [X0 + 0x10]
	0x033B3420 STR X8, [X19 + 0x68]
	0x033B3424 B 0x33B3354
	0x033B3428 BL 0x1C16F20
	0x033B342C MOVZ W1, 0x1
	0x033B3430 MOVZ W2, 0x1
	0x033B3434 B 0x33B3438
	0x033B3438 STP X30, X23, [X31 - 0x30]!
	0x033B343C STP X22, X21, [X31 + 0x10]
	0x033B3440 STP X20, X19, [X31 + 0x20]
	0x033B3444 ADRP X22, 0x102A000
	0x033B3448 LDRB W8, [X22 + 0x1B2]
	0x033B344C MOV W21, W2
	0x033B3450 MOV W19, W1
	0x033B3454 MOV X20, X0
	0x033B3458 TBNZ X8, 0x0, 0x33B34A0
	0x033B345C ADRP X0, 0xD40000
	0x033B3460 LDR X0, [X0 + 0xAC8]
	0x033B3464 BL 0x1C16CF4
	0x033B3468 ADRP X0, 0xD72000
	0x033B346C LDR X0, [X0 + 0x628]
	0x033B3470 BL 0x1C16CF4
	0x033B3474 ADRP X0, 0xD44000
	0x033B3478 LDR X0, [X0 + 0x928]
	0x033B347C BL 0x1C16CF4
	0x033B3480 ADRP X0, 0xD6E000
	0x033B3484 LDR X0, [X0 + 0x258]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x102B000
	006 Move X21, 0xD43000
	007 Move W8, [X20+405]
	008 Move X21, [X21+3144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xD4A000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move X0, 0xD43000
	018 Move X0, [X0+3144]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+405], W8
	022 Move X20, 0xD4A000
	023 Move X20, [X20+2536]
	024 Move X0, X19
	025 Call 0x1C88AE4
	026 Move X8, [X21]
	027 Move X19, X0
	028 Move W9, [X8+224]
	029 Compare W9, 0
	030 JumpIfNotEqual {33}
	031 Move X0, X8
	032 Call 0x1C17DFC
	033 Move X0, X31
	034 Call CultureInfo.get_CurrentCulture
	035 Move X8, [X20]
	036 Move X20, X0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X0, X19
	043 Move X1, X20
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X2, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call Convert.ToUInt16, X0, X1
	050 Return X0

Method: System.Int32 System.IConvertible.ToInt32(System.IFormatProvider provider)

Disassembly:
	0x033B3488 BL 0x1C16CF4
	0x033B348C ADRP X0, 0xD78000
	0x033B3490 LDR X0, [X0 + 0xFF8]
	0x033B3494 BL 0x1C16CF4
	0x033B3498 MOVZ W8, 0x1
	0x033B349C STRB W8, [X22 + 0x1B2]
	0x033B34A0 TBZ X21, 0x0, 0x33B34EC
	0x033B34A4 LDR X8, [X20]
	0x033B34A8 MOV X0, X20
	0x033B34AC LDP X9, X1, [X8 + 0x188]
	0x033B34B0 BLR X9
	0x033B34B4 CBZ X0, 0x33B34EC
	0x033B34B8 LDR W8, [X0 + 0x10]
	0x033B34BC MOV X22, X0
	0x033B34C0 CMP W8, 0x0
	0x033B34C4 B.LE 0x33B34EC
	0x033B34C8 MOV X0, X20
	0x033B34CC BL 0x33B320C
	0x033B34D0 ADRP X8, 0xD44000
	0x033B34D4 LDR X8, [X8 + 0x928]
	0x033B34D8 MOV X2, X22
	0x033B34DC MOV X3, X31
	0x033B34E0 LDR X1, [X8]
	0x033B34E4 BL 0x32274B8
	0x033B34E8 B 0x33B34F4
	0x033B34EC MOV X0, X20
	0x033B34F0 BL 0x33B320C
	0x033B34F4 LDR X8, [X20 + 0x28]
	0x033B34F8 MOV X23, X0
	0x033B34FC CBZ X8, 0x33B35C8
	0x033B3500 ADRP X8, 0xD40000
	0x033B3504 LDR X8, [X8 + 0xAC8]
	0x033B3508 MOVZ W1, 0x6
	0x033B350C LDR X0, [X8]
	0x033B3510 BL 0x1C16D6C
	0x033B3514 CBZ X0, 0x33B361C
	0x033B3518 LDR W8, [X0 + 0x18]
	0x033B351C MOV X22, X0
	0x033B3520 CBZ W8, 0x33B3618
	0x033B3524 CMP W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x102B000
	006 Move X21, 0xD43000
	007 Move W8, [X20+406]
	008 Move X21, [X21+3144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xD4A000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move X0, 0xD43000
	018 Move X0, [X0+3144]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+406], W8
	022 Move X20, 0xD4A000
	023 Move X20, [X20+2536]
	024 Move X0, X19
	025 Call 0x1C88AE4
	026 Move X8, [X21]
	027 Move X19, X0
	028 Move W9, [X8+224]
	029 Compare W9, 0
	030 JumpIfNotEqual {33}
	031 Move X0, X8
	032 Call 0x1C17DFC
	033 Move X0, X31
	034 Call CultureInfo.get_CurrentCulture
	035 Move X8, [X20]
	036 Move X20, X0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X0, X19
	043 Move X1, X20
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X2, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call Convert.ToInt32, X0, X1
	050 Return X0

Method: System.UInt32 System.IConvertible.ToUInt32(System.IFormatProvider provider)

Disassembly:
	0x033B3528 STR X23, [X22 + 0x20]
	0x033B352C B.EQ 0x33B3618
	0x033B3530 ADRP X8, 0xD72000
	0x033B3534 LDR X8, [X8 + 0x628]
	0x033B3538 LDR X8, [X8]
	0x033B353C STR X8, [X22 + 0x28]
	0x033B3540 LDR X0, [X20 + 0x28]
	0x033B3544 CBZ X0, 0x33B361C
	0x033B3548 AND W1, W19, 0x1
	0x033B354C AND W2, W21, 0x1
	0x033B3550 BL 0x33B3438
	0x033B3554 LDR W8, [X22 + 0x18]
	0x033B3558 CMP W8, 0x2
	0x033B355C B.LS 0x33B3618
	0x033B3560 STR X0, [X22 + 0x30]
	0x033B3564 MOV X0, X31
	0x033B3568 BL 0x33C1548
	0x033B356C LDR W8, [X22 + 0x18]
	0x033B3570 CMP W8, 0x3
	0x033B3574 B.LS 0x33B3618
	0x033B3578 CMP W8, 0x4
	0x033B357C STR X0, [X22 + 0x38]
	0x033B3580 B.EQ 0x33B3618
	0x033B3584 ADRP X8, 0xD6E000
	0x033B3588 LDR X8, [X8 + 0x258]
	0x033B358C ADRP X9, 0xD78000
	0x033B3590 MOV X1, X31
	0x033B3594 LDR X8, [X8]
	0x033B3598 LDR X9, [X9 + 0xFF8]
	0x033B359C STR X8, [X22 + 0x40]
	0x033B35A0 LDR X0, [X9]
	0x033B35A4 BL 0x33BDD84
	0x033B35A8 LDR W8, [X22 + 0x18]
	0x033B35AC CMP W8, 0x5
	0x033B35B0 B.LS 0x33B3618
	0x033B35B4 STR X0, [X22 + 0x48]
	0x033B35B8 MOV X0, X22
	0x033B35BC MOV X1, X31
	0x033B35C0 BL 0x32278CC
	0x033B35C4 MOV X23, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x102B000
	006 Move X21, 0xD43000
	007 Move W8, [X20+407]
	008 Move X21, [X21+3144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xD4A000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move X0, 0xD43000
	018 Move X0, [X0+3144]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+407], W8
	022 Move X20, 0xD4A000
	023 Move X20, [X20+2536]
	024 Move X0, X19
	025 Call 0x1C88AE4
	026 Move X8, [X21]
	027 Move X19, X0
	028 Move W9, [X8+224]
	029 Compare W9, 0
	030 JumpIfNotEqual {33}
	031 Move X0, X8
	032 Call 0x1C17DFC
	033 Move X0, X31
	034 Call CultureInfo.get_CurrentCulture
	035 Move X8, [X20]
	036 Move X20, X0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X0, X19
	043 Move X1, X20
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X2, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call Convert.ToUInt32, X0, X1
	050 Return X0

Method: System.Int64 System.IConvertible.ToInt64(System.IFormatProvider provider)

Disassembly:
	0x033B35C8 AND W1, W19, 0x1
	0x033B35CC MOV X0, X20
	0x033B35D0 BL 0x33B32C4
	0x033B35D4 CBZ X0, 0x33B3604
	0x033B35D8 MOV X19, X0
	0x033B35DC MOV X0, X31
	0x033B35E0 BL 0x33C1548
	0x033B35E4 MOV X2, X19
	0x033B35E8 LDP X20, X19, [X31 + 0x20]
	0x033B35EC LDP X22, X21, [X31 + 0x10]
	0x033B35F0 MOV X1, X0
	0x033B35F4 MOV X0, X23
	0x033B35F8 MOV X3, X31
	0x033B35FC LDP X30, X23, [X31], #0x30
	0x033B3600 B 0x32274B8
	0x033B3604 LDP X20, X19, [X31 + 0x20]
	0x033B3608 LDP X22, X21, [X31 + 0x10]
	0x033B360C MOV X0, X23
	0x033B3610 LDP X30, X23, [X31], #0x30
	0x033B3614 RET
	0x033B3618 BL 0x1C16F28
	0x033B361C BL 0x1C16F20
	0x033B3620 SUB X31, X31, 0x80
	0x033B3624 STP X29, X30, [X31 + 0x20]
	0x033B3628 STP X28, X27, [X31 + 0x30]
	0x033B362C STP X26, X25, [X31 + 0x40]
	0x033B3630 STP X24, X23, [X31 + 0x50]
	0x033B3634 STP X22, X21, [X31 + 0x60]
	0x033B3638 STP X20, X19, [X31 + 0x70]
	0x033B363C ADRP X19, 0x102A000
	0x033B3640 LDRB W8, [X19 + 0x1B3]
	0x033B3644 MOV X20, X3
	0x033B3648 MOV X24, X2
	0x033B364C MOV X21, X1
	0x033B3650 MOV X22, X0
	0x033B3654 TBNZ X8, 0x0, 0x33B3744
	0x033B3658 ADRP X0, 0xD78000
	0x033B365C LDR X0, [X0 + 0xFA0]
	0x033B3660 BL 0x1C16CF4
	0x033B3664 ADRP X0, 0xD70000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x102B000
	006 Move X21, 0xD43000
	007 Move W8, [X20+408]
	008 Move X21, [X21+3144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xD4A000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move X0, 0xD43000
	018 Move X0, [X0+3144]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+408], W8
	022 Move X20, 0xD4A000
	023 Move X20, [X20+2536]
	024 Move X0, X19
	025 Call 0x1C88AE4
	026 Move X8, [X21]
	027 Move X19, X0
	028 Move W9, [X8+224]
	029 Compare W9, 0
	030 JumpIfNotEqual {33}
	031 Move X0, X8
	032 Call 0x1C17DFC
	033 Move X0, X31
	034 Call CultureInfo.get_CurrentCulture
	035 Move X8, [X20]
	036 Move X20, X0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X0, X19
	043 Move X1, X20
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X2, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call Convert.ToInt64, X0, X1
	050 Return X0

Method: System.UInt64 System.IConvertible.ToUInt64(System.IFormatProvider provider)

Disassembly:
	0x033B3668 LDR X0, [X0 + 0xF38]
	0x033B366C BL 0x1C16CF4
	0x033B3670 ADRP X0, 0xD67000
	0x033B3674 LDR X0, [X0 + 0xD80]
	0x033B3678 BL 0x1C16CF4
	0x033B367C ADRP X0, 0xD40000
	0x033B3680 LDR X0, [X0 + 0x758]
	0x033B3684 BL 0x1C16CF4
	0x033B3688 ADRP X0, 0xD71000
	0x033B368C LDR X0, [X0 + 0xEC0]
	0x033B3690 BL 0x1C16CF4
	0x033B3694 ADRP X0, 0xD68000
	0x033B3698 LDR X0, [X0 + 0xB60]
	0x033B369C BL 0x1C16CF4
	0x033B36A0 ADRP X0, 0xD40000
	0x033B36A4 LDR X0, [X0 + 0x6C0]
	0x033B36A8 BL 0x1C16CF4
	0x033B36AC ADRP X0, 0xD78000
	0x033B36B0 LDR X0, [X0 + 0xFA8]
	0x033B36B4 BL 0x1C16CF4
	0x033B36B8 ADRP X0, 0xD78000
	0x033B36BC LDR X0, [X0 + 0xFB0]
	0x033B36C0 BL 0x1C16CF4
	0x033B36C4 ADRP X0, 0xD78000
	0x033B36C8 LDR X0, [X0 + 0xFB8]
	0x033B36CC BL 0x1C16CF4
	0x033B36D0 ADRP X0, 0xD78000
	0x033B36D4 LDR X0, [X0 + 0xFC0]
	0x033B36D8 BL 0x1C16CF4
	0x033B36DC ADRP X0, 0xD78000
	0x033B36E0 LDR X0, [X0 + 0xFC8]
	0x033B36E4 BL 0x1C16CF4
	0x033B36E8 ADRP X0, 0xD73000
	0x033B36EC LDR X0, [X0 + 0x188]
	0x033B36F0 BL 0x1C16CF4
	0x033B36F4 ADRP X0, 0xD4B000
	0x033B36F8 LDR X0, [X0 + 0x698]
	0x033B36FC BL 0x1C16CF4
	0x033B3700 ADRP X0, 0xD78000
	0x033B3704 LDR X0, [X0 + 0xFD0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x102B000
	006 Move X21, 0xD43000
	007 Move W8, [X20+409]
	008 Move X21, [X21+3144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xD4A000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move X0, 0xD43000
	018 Move X0, [X0+3144]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+409], W8
	022 Move X20, 0xD4A000
	023 Move X20, [X20+2536]
	024 Move X0, X19
	025 Call 0x1C88AE4
	026 Move X8, [X21]
	027 Move X19, X0
	028 Move W9, [X8+224]
	029 Compare W9, 0
	030 JumpIfNotEqual {33}
	031 Move X0, X8
	032 Call 0x1C17DFC
	033 Move X0, X31
	034 Call CultureInfo.get_CurrentCulture
	035 Move X8, [X20]
	036 Move X20, X0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X0, X19
	043 Move X1, X20
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X2, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call Convert.ToUInt64, X0, X1
	050 Return X0

Method: System.Single System.IConvertible.ToSingle(System.IFormatProvider provider)

Disassembly:
	0x033B3708 BL 0x1C16CF4
	0x033B370C ADRP X0, 0xD4C000
	0x033B3710 LDR X0, [X0 + 0x650]
	0x033B3714 BL 0x1C16CF4
	0x033B3718 ADRP X0, 0xD6C000
	0x033B371C LDR X0, [X0 + 0x128]
	0x033B3720 BL 0x1C16CF4
	0x033B3724 ADRP X0, 0xD78000
	0x033B3728 LDR X0, [X0 + 0xFD8]
	0x033B372C BL 0x1C16CF4
	0x033B3730 ADRP X0, 0xD79000
	0x033B3734 LDR X0, [X0]
	0x033B3738 BL 0x1C16CF4
	0x033B373C MOVZ W8, 0x1
	0x033B3740 STRB W8, [X19 + 0x1B3]
	0x033B3744 CBZ X21, 0x33B3A7C
	0x033B3748 LDR X23, [X22 + 0x40]
	0x033B374C CBNZ X23, 0x33B376C
	0x033B3750 LDR X8, [X22 + 0x38]
	0x033B3754 CBZ X8, 0x33B376C
	0x033B3758 MOVZ W1, 0x1
	0x033B375C MOV X0, X22
	0x033B3760 MOV X2, X31
	0x033B3764 BL 0x33C23B0
	0x033B3768 MOV X23, X0
	0x033B376C STP X24, X20, [X31 + 0x8]
	0x033B3770 ADRP X27, 0xD68000
	0x033B3774 ADRP X24, 0xD40000
	0x033B3778 LDR X8, [X22 + 0x68]
	0x033B377C LDR X27, [X27 + 0xB60]
	0x033B3780 LDR X24, [X24 + 0x6C0]
	0x033B3784 CBNZ X8, 0x33B379C
	0x033B3788 LDR X8, [X22]
	0x033B378C MOV X0, X22
	0x033B3790 LDP X9, X1, [X8 + 0x1C8]
	0x033B3794 BLR X9
	0x033B3798 STR X0, [X22 + 0x68]
	0x033B379C ADRP X26, 0xD73000
	0x033B37A0 ADRP X20, 0xD4C000
	0x033B37A4 ADRP X19, 0xD70000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x102B000
	006 Move X21, 0xD43000
	007 Move W8, [X20+410]
	008 Move X21, [X21+3144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xD4A000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move X0, 0xD43000
	018 Move X0, [X0+3144]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+410], W8
	022 Move X20, 0xD4A000
	023 Move X20, [X20+2536]
	024 Move X0, X19
	025 Call 0x1C88AE4
	026 Move X8, [X21]
	027 Move X19, X0
	028 Move W9, [X8+224]
	029 Compare W9, 0
	030 JumpIfNotEqual {33}
	031 Move X0, X8
	032 Call 0x1C17DFC
	033 Move X0, X31
	034 Call CultureInfo.get_CurrentCulture
	035 Move X8, [X20]
	036 Move X20, X0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X0, X19
	043 Move X1, X20
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X2, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call Convert.ToSingle, X0, X1
	050 Return V0

Method: System.Double System.IConvertible.ToDouble(System.IFormatProvider provider)

Disassembly:
	0x033B37A8 ADRP X29, 0xD6C000
	0x033B37AC ADRP X28, 0xD78000
	0x033B37B0 LDR X26, [X26 + 0x188]
	0x033B37B4 LDR X20, [X20 + 0x650]
	0x033B37B8 LDR X19, [X19 + 0xF38]
	0x033B37BC LDR X29, [X29 + 0x128]
	0x033B37C0 LDR X28, [X28 + 0xFA0]
	0x033B37C4 MOV X0, X22
	0x033B37C8 BL 0x33B320C
	0x033B37CC LDR X8, [X24]
	0x033B37D0 LDR X25, [X27]
	0x033B37D4 MOV X24, X0
	0x033B37D8 LDR W9, [X8 + 0xE0]
	0x033B37DC CBNZ W9, 0x33B37E8
	0x033B37E0 MOV X0, X8
	0x033B37E4 BL 0x1C16DFC
	0x033B37E8 MOV X0, X25
	0x033B37EC MOV X1, X31
	0x033B37F0 BL 0x338C698
	0x033B37F4 LDR X1, [X26]
	0x033B37F8 MOV X3, X0
	0x033B37FC MOV X0, X21
	0x033B3800 MOV X2, X24
	0x033B3804 MOV X4, X31
	0x033B3808 BL 0x32A89BC
	0x033B380C LDR X0, [X27]
	0x033B3810 LDR X24, [X22 + 0x18]
	0x033B3814 MOV X1, X31
	0x033B3818 BL 0x338C698
	0x033B381C LDR X1, [X20]
	0x033B3820 MOV X3, X0
	0x033B3824 MOV X0, X21
	0x033B3828 MOV X2, X24
	0x033B382C MOV X4, X31
	0x033B3830 BL 0x32A89BC
	0x033B3834 LDR X0, [X19]
	0x033B3838 LDR X24, [X22 + 0x20]
	0x033B383C MOV X1, X31
	0x033B3840 BL 0x338C698
	0x033B3844 LDR X1, [X29]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x102B000
	006 Move X21, 0xD43000
	007 Move W8, [X20+411]
	008 Move X21, [X21+3144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xD4A000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move X0, 0xD43000
	018 Move X0, [X0+3144]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+411], W8
	022 Move X20, 0xD4A000
	023 Move X20, [X20+2536]
	024 Move X0, X19
	025 Call 0x1C88AE4
	026 Move X8, [X21]
	027 Move X19, X0
	028 Move W9, [X8+224]
	029 Compare W9, 0
	030 JumpIfNotEqual {33}
	031 Move X0, X8
	032 Call 0x1C17DFC
	033 Move X0, X31
	034 Call CultureInfo.get_CurrentCulture
	035 Move X8, [X20]
	036 Move X20, X0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X0, X19
	043 Move X1, X20
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X2, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call Convert.ToDouble, X0, X1
	050 Return V0

Method: System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider provider)

Disassembly:
	0x033B3848 MOV X3, X0
	0x033B384C MOV X0, X21
	0x033B3850 MOV X2, X24
	0x033B3854 MOV X4, X31
	0x033B3858 BL 0x32A89BC
	0x033B385C LDR X0, [X28]
	0x033B3860 LDR X24, [X22 + 0x28]
	0x033B3864 MOV X1, X31
	0x033B3868 BL 0x338C698
	0x033B386C ADRP X8, 0xD78000
	0x033B3870 LDR X8, [X8 + 0xFC8]
	0x033B3874 MOV X3, X0
	0x033B3878 MOV X0, X21
	0x033B387C MOV X2, X24
	0x033B3880 LDR X1, [X8]
	0x033B3884 MOV X4, X31
	0x033B3888 BL 0x32A89BC
	0x033B388C LDR X0, [X27]
	0x033B3890 LDR X24, [X22 + 0x30]
	0x033B3894 MOV X1, X31
	0x033B3898 BL 0x338C698
	0x033B389C ADRP X8, 0xD78000
	0x033B38A0 LDR X8, [X8 + 0xFC0]
	0x033B38A4 MOV X3, X0
	0x033B38A8 MOV X0, X21
	0x033B38AC MOV X2, X24
	0x033B38B0 LDR X1, [X8]
	0x033B38B4 MOV X4, X31
	0x033B38B8 BL 0x32A89BC
	0x033B38BC LDR X0, [X27]
	0x033B38C0 MOV X1, X31
	0x033B38C4 BL 0x338C698
	0x033B38C8 ADRP X8, 0xD78000
	0x033B38CC LDR X8, [X8 + 0xFD8]
	0x033B38D0 MOV X3, X0
	0x033B38D4 MOV X0, X21
	0x033B38D8 MOV X2, X23
	0x033B38DC LDR X1, [X8]
	0x033B38E0 MOV X4, X31
	0x033B38E4 BL 0x32A89BC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x102B000
	006 Move X21, 0xD43000
	007 Move W8, [X20+412]
	008 Move X21, [X21+3144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xD4A000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move X0, 0xD43000
	018 Move X0, [X0+3144]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+412], W8
	022 Move X20, 0xD4A000
	023 Move X20, [X20+2536]
	024 Move X0, X19
	025 Call 0x1C88AE4
	026 Move X8, [X21]
	027 Move X19, X0
	028 Move W9, [X8+224]
	029 Compare W9, 0
	030 JumpIfNotEqual {33}
	031 Move X0, X8
	032 Call 0x1C17DFC
	033 Move X0, X31
	034 Call CultureInfo.get_CurrentCulture
	035 Move X8, [X20]
	036 Move X20, X0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X0, X19
	043 Move X1, X20
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X2, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call Convert.ToDecimal, X0, X1
	050 Return X0

Method: System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider)

Disassembly:
	0x033B38E8 LDR X0, [X27]
	0x033B38EC LDR X23, [X22 + 0x48]
	0x033B38F0 MOV X1, X31
	0x033B38F4 BL 0x338C698
	0x033B38F8 ADRP X8, 0xD78000
	0x033B38FC LDR X8, [X8 + 0xFA8]
	0x033B3900 MOV X3, X0
	0x033B3904 MOV X0, X21
	0x033B3908 MOV X2, X23
	0x033B390C LDR X1, [X8]
	0x033B3910 MOV X4, X31
	0x033B3914 BL 0x32A89BC
	0x033B3918 ADRP X9, 0xD40000
	0x033B391C LDR W8, [X22 + 0x50]
	0x033B3920 LDR X9, [X9 + 0x758]
	0x033B3924 ADD X1, X31, 0x1C
	0x033B3928 STR W8, [X31 + 0x1C]
	0x033B392C LDR X0, [X9]
	0x033B3930 BL 0x1C16E04
	0x033B3934 ADRP X8, 0xD67000
	0x033B3938 LDR X8, [X8 + 0xD80]
	0x033B393C MOV X23, X0
	0x033B3940 MOV X1, X31
	0x033B3944 LDR X8, [X8]
	0x033B3948 MOV X0, X8
	0x033B394C BL 0x338C698
	0x033B3950 ADRP X8, 0xD78000
	0x033B3954 LDR X8, [X8 + 0xFB8]
	0x033B3958 MOV X3, X0
	0x033B395C MOV X0, X21
	0x033B3960 MOV X2, X23
	0x033B3964 LDR X1, [X8]
	0x033B3968 MOV X4, X31
	0x033B396C BL 0x32A89BC
	0x033B3970 ADRP X8, 0xD79000
	0x033B3974 LDR X8, [X8]
	0x033B3978 MOV X0, X21
	0x033B397C MOV X2, X31
	0x033B3980 MOV X3, X31
	0x033B3984 LDR X1, [X8]
	0x033B3988 BL 0x32A8BF0
	0x033B398C ADRP X8, 0xD78000
	0x033B3990 LDR W2, [X22 + 0x60]
	0x033B3994 LDR X8, [X8 + 0xFD0]
	0x033B3998 MOV X0, X21
	0x033B399C MOV X3, X31
	0x033B39A0 LDR X1, [X8]
	0x033B39A4 BL 0x32A8F28
	0x033B39A8 LDR X0, [X27]
	0x033B39AC LDR X23, [X22 + 0x68]
	0x033B39B0 MOV X1, X31
	0x033B39B4 BL 0x338C698
	0x033B39B8 ADRP X8, 0xD4B000
	0x033B39BC LDR X8, [X8 + 0x698]
	0x033B39C0 MOV X3, X0
	0x033B39C4 MOV X0, X21
	0x033B39C8 MOV X2, X23
	0x033B39CC LDR X1, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0xD41000
	005 Move X0, [X0+2512]
	006 Call 0x1C17D08
	007 Move W1, 2
	008 Call 0x1C17D6C
	009 Move X19, X0
	010 Call 0x19913C0
	011 Move X20, 0xD79000
	012 Move X20, [X20+3976]
	013 Move X0, X20
	014 Call 0x1C17D08
	015 Move X1, X0
	016 Move X0, X19
	017 Call 0x19990B4
	018 Move X0, X20
	019 Call 0x1C17D08
	020 Move X2, X0
	021 Move X0, X19
	022 Move X1, X31
	023 Call 0x1994444
	024 Move X0, X19
	025 Call 0x19913C0
	026 Move X20, 0xD73000
	027 Move X20, [X20+152]
	028 Move X0, X20
	029 Call 0x1C17D08
	030 Move X1, X0
	031 Move X0, X19
	032 Call 0x19990B4
	033 Move X0, X20
	034 Call 0x1C17D08
	035 Move X2, X0
	036 Move W1, 1
	037 Move X0, X19
	038 Call 0x1994444
	039 Move X0, 0xD76000
	040 Move X0, [X0+48]
	041 Call 0x1C17D08
	042 Move X1, X19
	043 Move X2, X31
	044 Call Environment.GetResourceString, X0, X1
	045 Move X19, X0
	046 Move X0, 0xD49000
	047 Move X0, [X0+3080]
	048 Call 0x1C17D08
	049 Call 0x1C17F10
	050 Move X1, X19
	051 Move X2, X31
	052 Move X20, X0
	053 Call InvalidCastException..ctor, X0, X1
	054 Move X0, 0xD79000
	055 Move X0, [X0+3984]
	056 Call 0x1C17D08
	057 Move X1, X0
	058 Move X0, X20
	059 Call 0x1C17DEC

Method: System.Object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider)

Disassembly:
	0x033B39D0 MOV X4, X31
	0x033B39D4 BL 0x32A89BC
	0x033B39D8 LDR X0, [X22 + 0x70]
	0x033B39DC CBZ X0, 0x33B3A5C
	0x033B39E0 MOV X1, X31
	0x033B39E4 BL 0x32A7798
	0x033B39E8 TBZ X0, 0x0, 0x33B3A5C
	0x033B39EC ADRP X8, 0xD40000
	0x033B39F0 LDR X8, [X8 + 0x6C0]
	0x033B39F4 LDR X23, [X22 + 0x70]
	0x033B39F8 LDR X0, [X8]
	0x033B39FC ADRP X8, 0xD71000
	0x033B3A00 LDR X8, [X8 + 0xEC0]
	0x033B3A04 LDR W9, [X0 + 0xE0]
	0x033B3A08 LDR X24, [X8]
	0x033B3A0C CBNZ W9, 0x33B3A14
	0x033B3A10 BL 0x1C16DFC
	0x033B3A14 MOV X0, X24
	0x033B3A18 MOV X1, X31
	0x033B3A1C BL 0x338C698
	0x033B3A20 ADRP X8, 0xD78000
	0x033B3A24 LDR X8, [X8 + 0xFB0]
	0x033B3A28 MOV X3, X0
	0x033B3A2C MOV X0, X21
	0x033B3A30 MOV X2, X23
	0x033B3A34 LDR X1, [X8]
	0x033B3A38 MOV X4, X31
	0x033B3A3C BL 0x32A89BC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x102B000
	008 Move X23, 0xD4A000
	009 Move W8, [X22+413]
	010 Move X23, [X23+2536]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xD4A000
	019 Move X0, [X0+2536]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+413], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X21
	029 Move X1, X20
	030 Move X2, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X3, X31
	036 Move X30, [X31+48]
	037 Move X23, [X31+56]
	038 Call Convert.DefaultToType, X0, X1, X2
	039 Return X0

Method: System.Object ToObject(System.Type enumType, System.SByte value)

Disassembly:
	0x033B16DC MOV X0, X19
	0x033B16E0 MOV X1, X20
	0x033B16E4 LDP X20, X19, [X31 + 0x10]
	0x033B16E8 LDP X30, X21, [X31], #0x20
	0x033B16EC B 0x33AEBEC
	0x033B16F0 MOV X0, X19
	0x033B16F4 BL 0x1C171E0
	0x033B16F8 B 0x33B16FC
	0x033B16FC STP X30, X21, [X31 - 0x20]!
	0x033B1700 STP X20, X19, [X31 + 0x10]
	0x033B1704 ADRP X21, 0x102C000
	0x033B1708 LDRB W8, [X21 + 0x18E]
	0x033B170C MOV X20, X1
	0x033B1710 MOV X19, X0
	0x033B1714 TBNZ X8, 0x0, 0x33B1768
	0x033B1718 ADRP X0, 0xD42000
	0x033B171C LDR X0, [X0 + 0xDF8]
	0x033B1720 BL 0x1C16CF4
	0x033B1724 ADRP X0, 0xD6B000
	0x033B1728 LDR X0, [X0 + 0x4E8]
	0x033B172C BL 0x1C16CF4
	0x033B1730 ADRP X0, 0xD6C000
	0x033B1734 LDR X0, [X0 + 0xEF0]
	0x033B1738 BL 0x1C16CF4
	0x033B173C ADRP X0, 0xD6A000
	0x033B1740 LDR X0, [X0 + 0xBE0]
	0x033B1744 BL 0x1C16CF4
	0x033B1748 ADRP X0, 0xD69000
	0x033B174C LDR X0, [X0 + 0x908]
	0x033B1750 BL 0x1C16CF4
	0x033B1754 ADRP X0, 0xD7A000
	0x033B1758 LDR X0, [X0 + 0xF48]
	0x033B175C BL 0x1C16CF4
	0x033B1760 MOVZ W8, 0x1
	0x033B1764 STRB W8, [X21 + 0x18E]
	0x033B1768 ADRP X8, 0xD6C000
	0x033B176C LDR X8, [X8 + 0xEF0]
	0x033B1770 CBZ X20, 0x33B1784
	0x033B1774 LDR W9, [X20 + 0x10]
	0x033B1778 CBZ W9, 0x33B1784
	0x033B177C LDR X1, [X8]
	0x033B1780 B 0x33B178C
	0x033B1784 LDR X1, [X8]
	0x033B1788 MOV X20, X1
	0x033B178C MOVZ W2, 0x5
	0x033B1790 MOV X0, X20
	0x033B1794 MOV X3, X31
	0x033B1798 BL 0x322590C
	0x033B179C CBZ W0, 0x33B1838
	0x033B17A0 ADRP X8, 0xD6A000
	0x033B17A4 LDR X8, [X8 + 0xBE0]
	0x033B17A8 MOVZ W2, 0x5
	0x033B17AC MOV X0, X20
	0x033B17B0 MOV X3, X31
	0x033B17B4 LDR X1, [X8]
	0x033B17B8 BL 0x322590C
	0x033B17BC CBZ W0, 0x33B1844
	0x033B17C0 ADRP X8, 0xD69000
	0x033B17C4 LDR X8, [X8 + 0x908]
	0x033B17C8 MOVZ W2, 0x5
	0x033B17CC MOV X0, X20
	0x033B17D0 MOV X3, X31
	0x033B17D4 LDR X1, [X8]
	0x033B17D8 BL 0x322590C
	0x033B17DC CBZ W0, 0x33B1864
	0x033B17E0 ADRP X8, 0xD7A000
	0x033B17E4 LDR X8, [X8 + 0xF48]
	0x033B17E8 MOVZ W2, 0x5
	0x033B17EC MOV X0, X20
	0x033B17F0 MOV X3, X31
	0x033B17F4 LDR X1, [X8]
	0x033B17F8 BL 0x322590C
	0x033B17FC CBNZ W0, 0x33B18F8
	0x033B1800 MOV X0, X19
	0x033B1804 MOV X1, X31
	0x033B1808 BL 0x33BE520
	0x033B180C MOV X20, X0
	0x033B1810 MOV X0, X19
	0x033B1814 BL 0x1C87AE4
	0x033B1818 ADRP X8, 0xD42000
	0x033B181C LDR X8, [X8 + 0xDF8]
	0x033B1820 MOV X19, X0
	0x033B1824 LDR X8, [X8]
	0x033B1828 LDR W9, [X8 + 0xE0]
	0x033B182C CBZ W9, 0x33B189C
	0x033B1830 CBNZ X20, 0x33B18A8
	0x033B1834 B 0x33B18DC
	0x033B1838 LDR X8, [X19]
	0x033B183C MOV X0, X19
	0x033B1840 B 0x33B1854
	0x033B1844 MOV X0, X19
	0x033B1848 BL 0x1C87AE4
	0x033B184C CBZ X0, 0x33B1948
	0x033B1850 LDR X8, [X0]
	0x033B1854 LDP X2, X1, [X8 + 0x168]
	0x033B1858 LDP X20, X19, [X31 + 0x10]
	0x033B185C LDP X30, X21, [X31], #0x20
	0x033B1860 BR X2
	0x033B1864 MOV X0, X19
	0x033B1868 BL 0x1C87AE4
	0x033B186C ADRP X8, 0xD42000
	0x033B1870 LDR X8, [X8 + 0xDF8]
	0x033B1874 MOV X19, X0
	0x033B1878 LDR X8, [X8]
	0x033B187C LDR W9, [X8 + 0xE0]
	0x033B1880 CBNZ W9, 0x33B188C
	0x033B1884 MOV X0, X8
	0x033B1888 BL 0x1C16DFC
	0x033B188C MOV X0, X19
	0x033B1890 LDP X20, X19, [X31 + 0x10]
	0x033B1894 LDP X30, X21, [X31], #0x20
	0x033B1898 B 0x33AE740
	0x033B189C MOV X0, X8
	0x033B18A0 BL 0x1C16DFC
	0x033B18A4 CBZ X20, 0x33B18DC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x102D000
	007 Move X22, 0xD43000
	008 Move W8, [X21+414]
	009 Move X22, [X22+1728]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xD43000
	017 Move X0, [X0+3576]
	018 Call 0x1C17CF4
	019 Move X0, 0xD6C000
	020 Move X0, [X0+1256]
	021 Call 0x1C17CF4
	022 Move X0, 0xD43000
	023 Move X0, [X0+1728]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+414], W8
	027 Move X0, [X22]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X20
	033 Move X1, X31
	034 Move X2, X31
	035 Call Type.op_Equality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {86}
	040 Compare X20, 0
	041 JumpIfEqual {104}
	042 Move X8, [X20]
	043 Move X0, X20
	044 Move X9, [X8+1416]
	045 Move X1, [X8+1424]
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {105}
	051 Move X9, 0xD6C000
	052 Move X9, [X9+1256]
	053 Move X8, [X20]
	054 Move X0, [X9]
	055 Move W10, [X8+304]
	056 Move W9, [X0+304]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X20, X31
	059 Move X8, [X8+200]
	060 Add X8, X8, X9
	061 NotImplemented "Instruction LDUR not yet implemented."
	062 NotImplemented "Instruction CMP not yet implemented."
	063 NotImplemented "Instruction CSEL not yet implemented."
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Compare X20, 0
	069 JumpIfEqual {107}
	070 Move X8, 0xD43000
	071 Move X8, [X8+3576]
	072 Move X0, [X8]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 NotImplemented "Instruction SXTB not yet implemented."
	078 Move X0, X20
	079 Move X20, [X31+32]
	080 Move X19, [X31+40]
	081 Move X22, [X31+16]
	082 Move X21, [X31+24]
	083 Move X30, [X31+48]
	084 Call 0x1C88B50
	085 Return X0
	086 Move X0, 0xD48000
	087 Move X0, [X0+1320]
	088 Call 0x1C17D08
	089 Call 0x1C17F10
	090 Move X19, X0
	091 Move X0, 0xD7B000
	092 Move X0, [X0+960]
	093 Call 0x1C17D08
	094 Move X1, X0
	095 Move X0, X19
	096 Move X2, X31
	097 Call ArgumentNullException..ctor, X0, X1
	098 Move X0, 0xD7B000
	099 Move X0, [X0+3840]
	100 Call 0x1C17D08
	101 Move X1, X0
	102 Move X0, X19
	103 Call 0x1C17DEC
	104 Call 0x1C17F20
	105 Move X0, 0xD7B000
	106 Move X0, [X0+952]
	107 Move X0, 0xD75000
	108 Move X0, [X0+3672]
	109 Call 0x1C17D08
	110 Move X1, X31
	111 Call Environment.GetResourceString, X0
	112 Move X19, X0
	113 Move X0, 0xD4B000
	114 Move X0, [X0+1400]
	115 Call 0x1C17D08
	116 Call 0x1C17F10
	117 Move X20, X0
	118 Move X0, 0xD7B000
	119 Move X0, [X0+960]
	120 Call 0x1C17D08
	121 Move X2, X0
	122 Move X0, X20
	123 Move X1, X19
	124 Move X3, X31
	125 Call ArgumentException..ctor, X0, X1, X2
	126 Move X0, 0xD7B000
	127 Move X0, [X0+3840]
	128 Call 0x1C17D08
	129 Move X1, X0
	130 Move X0, X20
	131 Call 0x1C17DEC

Method: System.Object ToObject(System.Type enumType, System.Int16 value)

Disassembly:
	0x033B18A8 ADRP X9, 0xD6B000
	0x033B18AC LDR X9, [X9 + 0x4E8]
	0x033B18B0 LDR X8, [X20]
	0x033B18B4 LDR X1, [X9]
	0x033B18B8 LDRB W10, [X8 + 0x130]
	0x033B18BC LDRB W9, [X1 + 0x130]
	0x033B18C0 CMP W10, W9
	0x033B18C4 B.CC 0x33B18F0
	0x033B18C8 LDR X8, [X8 + 0xC8]
	0x033B18CC ADD X8, X8, X9, 0x3, LSL
	0x033B18D0 LDUR X8, [X8 - 0x8]
	0x033B18D4 CMP X8, X1
	0x033B18D8 B.NE 0x33B18F0
	0x033B18DC MOV X0, X20
	0x033B18E0 MOV X1, X19
	0x033B18E4 LDP X20, X19, [X31 + 0x10]
	0x033B18E8 LDP X30, X21, [X31], #0x20
	0x033B18EC B 0x33AEDD4
	0x033B18F0 MOV X0, X20
	0x033B18F4 BL 0x1C171E0
	0x033B18F8 ADRP X0, 0xD7A000
	0x033B18FC LDR X0, [X0 + 0xF50]
	0x033B1900 BL 0x1C16D08
	0x033B1904 MOV X1, X31
	0x033B1908 BL 0x33BDD84
	0x033B190C MOV X19, X0
	0x033B1910 ADRP X0, 0xD6F000
	0x033B1914 LDR X0, [X0 + 0xC08]
	0x033B1918 BL 0x1C16D08
	0x033B191C BL 0x1C16F10
	0x033B1920 MOV X1, X19
	0x033B1924 MOV X2, X31
	0x033B1928 MOV X20, X0
	0x033B192C BL 0x33674A0
	0x033B1930 ADRP X0, 0xD7A000
	0x033B1934 LDR X0, [X0 + 0xF58]
	0x033B1938 BL 0x1C16D08
	0x033B193C MOV X1, X0
	0x033B1940 MOV X0, X20
	0x033B1944 BL 0x1C16DEC
	0x033B1948 BL 0x1C16F20
	0x033B194C STP X30, X21, [X31 - 0x20]!
	0x033B1950 STP X20, X19, [X31 + 0x10]
	0x033B1954 ADRP X21, 0x102C000
	0x033B1958 LDRB W8, [X21 + 0x18D]
	0x033B195C MOV X19, X1
	0x033B1960 MOV X20, X0
	0x033B1964 TBNZ X8, 0x0, 0x33B197C
	0x033B1968 ADRP X0, 0xD42000
	0x033B196C LDR X0, [X0 + 0xDF8]
	0x033B1970 BL 0x1C16CF4
	0x033B1974 MOVZ W8, 0x1
	0x033B1978 STRB W8, [X21 + 0x18D]
	0x033B197C CBZ X20, 0x33B19B8
	0x033B1980 ADRP X8, 0xD42000
	0x033B1984 LDR X8, [X8 + 0xDF8]
	0x033B1988 LDR X0, [X8]
	0x033B198C LDR W8, [X0 + 0xE0]
	0x033B1990 CBNZ W8, 0x33B1998
	0x033B1994 BL 0x1C16DFC
	0x033B1998 MOV X0, X20
	0x033B199C MOV X1, X19
	0x033B19A0 BL 0x1C879C8
	0x033B19A4 CMP W0, 0x2
	0x033B19A8 B.GE 0x33B19EC
	0x033B19AC LDP X20, X19, [X31 + 0x10]
	0x033B19B0 LDP X30, X21, [X31], #0x20
	0x033B19B4 RET
	0x033B19B8 ADRP X0, 0xD4D000
	0x033B19BC LDR X0, [X0 + 0xA18]
	0x033B19C0 BL 0x1C16D08
	0x033B19C4 BL 0x1C16F10
	0x033B19C8 MOV X1, X31
	0x033B19CC MOV X19, X0
	0x033B19D0 BL 0x3380398
	0x033B19D4 ADRP X0, 0xD7A000
	0x033B19D8 LDR X0, [X0 + 0xF60]
	0x033B19DC BL 0x1C16D08
	0x033B19E0 MOV X1, X0
	0x033B19E4 MOV X0, X19
	0x033B19E8 BL 0x1C16DEC
	0x033B19EC B.NE 0x33B1AF0
	0x033B19F0 MOV X0, X20
	0x033B19F4 MOV X1, X31
	0x033B19F8 BL 0x33BE520
	0x033B19FC MOV X20, X0
	0x033B1A00 MOV X0, X19
	0x033B1A04 BL 0x19903C0
	0x033B1A08 MOV X0, X19
	0x033B1A0C MOV X1, X31
	0x033B1A10 BL 0x33BE520
	0x033B1A14 MOV X21, X0
	0x033B1A18 ADRP X0, 0xD42000
	0x033B1A1C LDR X0, [X0 + 0x9D0]
	0x033B1A20 BL 0x1C16D08
	0x033B1A24 MOVZ W1, 0x2
	0x033B1A28 BL 0x1C16D6C
	0x033B1A2C MOV X19, X0
	0x033B1A30 MOV X0, X21
	0x033B1A34 BL 0x19903C0
	0x033B1A38 LDR X8, [X21]
	0x033B1A3C MOV X0, X21
	0x033B1A40 LDP X9, X1, [X8 + 0x168]
	0x033B1A44 BLR X9
	0x033B1A48 MOV X21, X0
	0x033B1A4C MOV X0, X19
	0x033B1A50 BL 0x19903C0
	0x033B1A54 MOV X0, X19
	0x033B1A58 MOV X1, X21
	0x033B1A5C BL 0x19980B4
	0x033B1A60 MOV X0, X19
	0x033B1A64 MOV X1, X31
	0x033B1A68 MOV X2, X21
	0x033B1A6C BL 0x1993444
	0x033B1A70 MOV X0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x102D000
	007 Move X22, 0xD43000
	008 Move W8, [X21+415]
	009 Move X22, [X22+1728]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xD43000
	017 Move X0, [X0+3576]
	018 Call 0x1C17CF4
	019 Move X0, 0xD6C000
	020 Move X0, [X0+1256]
	021 Call 0x1C17CF4
	022 Move X0, 0xD43000
	023 Move X0, [X0+1728]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+415], W8
	027 Move X0, [X22]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X20
	033 Move X1, X31
	034 Move X2, X31
	035 Call Type.op_Equality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {86}
	040 Compare X20, 0
	041 JumpIfEqual {104}
	042 Move X8, [X20]
	043 Move X0, X20
	044 Move X9, [X8+1416]
	045 Move X1, [X8+1424]
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {105}
	051 Move X9, 0xD6C000
	052 Move X9, [X9+1256]
	053 Move X8, [X20]
	054 Move X0, [X9]
	055 Move W10, [X8+304]
	056 Move W9, [X0+304]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X20, X31
	059 Move X8, [X8+200]
	060 Add X8, X8, X9
	061 NotImplemented "Instruction LDUR not yet implemented."
	062 NotImplemented "Instruction CMP not yet implemented."
	063 NotImplemented "Instruction CSEL not yet implemented."
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Compare X20, 0
	069 JumpIfEqual {107}
	070 Move X8, 0xD43000
	071 Move X8, [X8+3576]
	072 Move X0, [X8]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 NotImplemented "Instruction SXTH not yet implemented."
	078 Move X0, X20
	079 Move X20, [X31+32]
	080 Move X19, [X31+40]
	081 Move X22, [X31+16]
	082 Move X21, [X31+24]
	083 Move X30, [X31+48]
	084 Call 0x1C88B50
	085 Return X0
	086 Move X0, 0xD48000
	087 Move X0, [X0+1320]
	088 Call 0x1C17D08
	089 Call 0x1C17F10
	090 Move X19, X0
	091 Move X0, 0xD7B000
	092 Move X0, [X0+960]
	093 Call 0x1C17D08
	094 Move X1, X0
	095 Move X0, X19
	096 Move X2, X31
	097 Call ArgumentNullException..ctor, X0, X1
	098 Move X0, 0xD7B000
	099 Move X0, [X0+3848]
	100 Call 0x1C17D08
	101 Move X1, X0
	102 Move X0, X19
	103 Call 0x1C17DEC
	104 Call 0x1C17F20
	105 Move X0, 0xD7B000
	106 Move X0, [X0+952]
	107 Move X0, 0xD75000
	108 Move X0, [X0+3672]
	109 Call 0x1C17D08
	110 Move X1, X31
	111 Call Environment.GetResourceString, X0
	112 Move X19, X0
	113 Move X0, 0xD4B000
	114 Move X0, [X0+1400]
	115 Call 0x1C17D08
	116 Call 0x1C17F10
	117 Move X20, X0
	118 Move X0, 0xD7B000
	119 Move X0, [X0+960]
	120 Call 0x1C17D08
	121 Move X2, X0
	122 Move X0, X20
	123 Move X1, X19
	124 Move X3, X31
	125 Call ArgumentException..ctor, X0, X1, X2
	126 Move X0, 0xD7B000
	127 Move X0, [X0+3848]
	128 Call 0x1C17D08
	129 Move X1, X0
	130 Move X0, X20
	131 Call 0x1C17DEC

Method: System.Object ToObject(System.Type enumType, System.Int32 value)

Disassembly:
	0x033B1510 MOV X2, X0
	0x033B1514 MOV X0, X20
	0x033B1518 MOV X1, X19
	0x033B151C MOV X3, X31
	0x033B1520 BL 0x330E16C
	0x033B1524 ADRP X0, 0xD7A000
	0x033B1528 LDR X0, [X0 + 0xF38]
	0x033B152C BL 0x1C16D08
	0x033B1530 MOV X1, X0
	0x033B1534 MOV X0, X20
	0x033B1538 BL 0x1C16DEC
	0x033B153C STR X30, [X31 - 0x30]!
	0x033B1540 STP X22, X21, [X31 + 0x10]
	0x033B1544 STP X20, X19, [X31 + 0x20]
	0x033B1548 ADRP X21, 0x102C000
	0x033B154C ADRP X22, 0xD42000
	0x033B1550 LDRB W8, [X21 + 0x18B]
	0x033B1554 LDR X22, [X22 + 0x6C0]
	0x033B1558 MOV X19, X1
	0x033B155C MOV X20, X0
	0x033B1560 TBNZ X8, 0x0, 0x33B1578
	0x033B1564 ADRP X0, 0xD42000
	0x033B1568 LDR X0, [X0 + 0x6C0]
	0x033B156C BL 0x1C16CF4
	0x033B1570 MOVZ W8, 0x1
	0x033B1574 STRB W8, [X21 + 0x18B]
	0x033B1578 LDR X0, [X22]
	0x033B157C LDR W8, [X0 + 0xE0]
	0x033B1580 CBNZ W8, 0x33B1588
	0x033B1584 BL 0x1C16DFC
	0x033B1588 MOV X0, X20
	0x033B158C MOV X1, X31
	0x033B1590 MOV X2, X31
	0x033B1594 BL 0x3395194
	0x033B1598 TBNZ X0, 0x0, 0x33B15C4
	0x033B159C CBZ X20, 0x33B160C
	0x033B15A0 LDR X8, [X20]
	0x033B15A4 MOV X0, X20
	0x033B15A8 MOV X1, X19
	0x033B15AC LDP X20, X19, [X31 + 0x20]
	0x033B15B0 LDR X3, [X8 + 0x248]
	0x033B15B4 LDR X2, [X8 + 0x250]
	0x033B15B8 LDP X22, X21, [X31 + 0x10]
	0x033B15BC LDR X30, [X31], #0x30
	0x033B15C0 BR X3
	0x033B15C4 ADRP X0, 0xD47000
	0x033B15C8 LDR X0, [X0 + 0x528]
	0x033B15CC BL 0x1C16D08
	0x033B15D0 BL 0x1C16F10
	0x033B15D4 MOV X19, X0
	0x033B15D8 ADRP X0, 0xD7A000
	0x033B15DC LDR X0, [X0 + 0x3C0]
	0x033B15E0 BL 0x1C16D08
	0x033B15E4 MOV X1, X0
	0x033B15E8 MOV X0, X19
	0x033B15EC MOV X2, X31
	0x033B15F0 BL 0x330E100
	0x033B15F4 ADRP X0, 0xD7A000
	0x033B15F8 LDR X0, [X0 + 0xF40]
	0x033B15FC BL 0x1C16D08
	0x033B1600 MOV X1, X0
	0x033B1604 MOV X0, X19
	0x033B1608 BL 0x1C16DEC
	0x033B160C BL 0x1C16F20
	0x033B1610 B 0x1C87AE4
	0x033B1614 B 0x1C87AE4
	0x033B1618 B 0x1C87894
	0x033B161C B 0x1C87918
	0x033B1620 MOV X2, X31
	0x033B1624 B 0x33D5420
	0x033B1628 B 0x1C87918
	0x033B162C STP X30, X21, [X31 - 0x20]!
	0x033B1630 STP X20, X19, [X31 + 0x10]
	0x033B1634 ADRP X19, 0x102C000
	0x033B1638 ADRP X21, 0xD42000
	0x033B163C LDRB W8, [X19 + 0x18C]
	0x033B1640 LDR X21, [X21 + 0xDF8]
	0x033B1644 MOV X20, X0
	0x033B1648 TBNZ X8, 0x0, 0x33B166C
	0x033B164C ADRP X0, 0xD42000
	0x033B1650 LDR X0, [X0 + 0xDF8]
	0x033B1654 BL 0x1C16CF4
	0x033B1658 ADRP X0, 0xD6B000
	0x033B165C LDR X0, [X0 + 0x4E8]
	0x033B1660 BL 0x1C16CF4
	0x033B1664 MOVZ W8, 0x1
	0x033B1668 STRB W8, [X19 + 0x18C]
	0x033B166C MOV X0, X20
	0x033B1670 MOV X1, X31
	0x033B1674 BL 0x33BE520
	0x033B1678 MOV X19, X0
	0x033B167C MOV X0, X20
	0x033B1680 BL 0x1C87AE4
	0x033B1684 LDR X8, [X21]
	0x033B1688 MOV X20, X0
	0x033B168C LDR W9, [X8 + 0xE0]
	0x033B1690 CBZ W9, 0x33B169C
	0x033B1694 CBNZ X19, 0x33B16A8
	0x033B1698 B 0x33B16DC
	0x033B169C MOV X0, X8
	0x033B16A0 BL 0x1C16DFC
	0x033B16A4 CBZ X19, 0x33B16DC
	0x033B16A8 ADRP X9, 0xD6B000
	0x033B16AC LDR X9, [X9 + 0x4E8]
	0x033B16B0 LDR X8, [X19]
	0x033B16B4 LDR X1, [X9]
	0x033B16B8 LDRB W10, [X8 + 0x130]
	0x033B16BC LDRB W9, [X1 + 0x130]
	0x033B16C0 CMP W10, W9
	0x033B16C4 B.CC 0x33B16F0
	0x033B16C8 LDR X8, [X8 + 0xC8]
	0x033B16CC ADD X8, X8, X9, 0x3, LSL
	0x033B16D0 LDUR X8, [X8 - 0x8]
	0x033B16D4 CMP X8, X1
	0x033B16D8 B.NE 0x33B16F0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x102D000
	007 Move X22, 0xD43000
	008 Move W8, [X21+416]
	009 Move X22, [X22+1728]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xD43000
	017 Move X0, [X0+3576]
	018 Call 0x1C17CF4
	019 Move X0, 0xD6C000
	020 Move X0, [X0+1256]
	021 Call 0x1C17CF4
	022 Move X0, 0xD43000
	023 Move X0, [X0+1728]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+416], W8
	027 Move X0, [X22]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X20
	033 Move X1, X31
	034 Move X2, X31
	035 Call Type.op_Equality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {86}
	040 Compare X20, 0
	041 JumpIfEqual {104}
	042 Move X8, [X20]
	043 Move X0, X20
	044 Move X9, [X8+1416]
	045 Move X1, [X8+1424]
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {105}
	051 Move X9, 0xD6C000
	052 Move X9, [X9+1256]
	053 Move X8, [X20]
	054 Move X0, [X9]
	055 Move W10, [X8+304]
	056 Move W9, [X0+304]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X20, X31
	059 Move X8, [X8+200]
	060 Add X8, X8, X9
	061 NotImplemented "Instruction LDUR not yet implemented."
	062 NotImplemented "Instruction CMP not yet implemented."
	063 NotImplemented "Instruction CSEL not yet implemented."
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Compare X20, 0
	069 JumpIfEqual {107}
	070 Move X8, 0xD43000
	071 Move X8, [X8+3576]
	072 Move X0, [X8]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 Move X1, W19
	078 Move X0, X20
	079 Move X20, [X31+32]
	080 Move X19, [X31+40]
	081 Move X22, [X31+16]
	082 Move X21, [X31+24]
	083 Move X30, [X31+48]
	084 Call 0x1C88B50
	085 Return X0
	086 Move X0, 0xD48000
	087 Move X0, [X0+1320]
	088 Call 0x1C17D08
	089 Call 0x1C17F10
	090 Move X19, X0
	091 Move X0, 0xD7B000
	092 Move X0, [X0+960]
	093 Call 0x1C17D08
	094 Move X1, X0
	095 Move X0, X19
	096 Move X2, X31
	097 Call ArgumentNullException..ctor, X0, X1
	098 Move X0, 0xD7B000
	099 Move X0, [X0+3832]
	100 Call 0x1C17D08
	101 Move X1, X0
	102 Move X0, X19
	103 Call 0x1C17DEC
	104 Call 0x1C17F20
	105 Move X0, 0xD7B000
	106 Move X0, [X0+952]
	107 Move X0, 0xD75000
	108 Move X0, [X0+3672]
	109 Call 0x1C17D08
	110 Move X1, X31
	111 Call Environment.GetResourceString, X0
	112 Move X19, X0
	113 Move X0, 0xD4B000
	114 Move X0, [X0+1400]
	115 Call 0x1C17D08
	116 Call 0x1C17F10
	117 Move X20, X0
	118 Move X0, 0xD7B000
	119 Move X0, [X0+960]
	120 Call 0x1C17D08
	121 Move X2, X0
	122 Move X0, X20
	123 Move X1, X19
	124 Move X3, X31
	125 Call ArgumentException..ctor, X0, X1, X2
	126 Move X0, 0xD7B000
	127 Move X0, [X0+3832]
	128 Call 0x1C17D08
	129 Move X1, X0
	130 Move X0, X20
	131 Call 0x1C17DEC

Method: System.Object ToObject(System.Type enumType, System.Byte value)

Disassembly:
	0x033B1E0C LDR X0, [X21]
	0x033B1E10 LDR X8, [X8 + 0xD90]
	0x033B1E14 LDR W9, [X0 + 0xE0]
	0x033B1E18 LDR X20, [X8]
	0x033B1E1C CBNZ W9, 0x33B1E24
	0x033B1E20 BL 0x1C16DFC
	0x033B1E24 MOV X0, X20
	0x033B1E28 MOV X1, X31
	0x033B1E2C BL 0x338C698
	0x033B1E30 MOV X1, X0
	0x033B1E34 MOV X0, X19
	0x033B1E38 MOV X2, X31
	0x033B1E3C BL 0x3395194
	0x033B1E40 TBZ X0, 0x0, 0x33B1E4C
	0x033B1E44 MOVZ W0, 0x5
	0x033B1E48 B 0x33B2068
	0x033B1E4C ADRP X8, 0xD69000
	0x033B1E50 LDR X0, [X21]
	0x033B1E54 LDR X8, [X8 + 0xD78]
	0x033B1E58 LDR W9, [X0 + 0xE0]
	0x033B1E5C LDR X20, [X8]
	0x033B1E60 CBNZ W9, 0x33B1E68
	0x033B1E64 BL 0x1C16DFC
	0x033B1E68 MOV X0, X20
	0x033B1E6C MOV X1, X31
	0x033B1E70 BL 0x338C698
	0x033B1E74 MOV X1, X0
	0x033B1E78 MOV X0, X19
	0x033B1E7C MOV X2, X31
	0x033B1E80 BL 0x3395194
	0x033B1E84 TBZ X0, 0x0, 0x33B1E90
	0x033B1E88 MOVZ W0, 0x7
	0x033B1E8C B 0x33B2068
	0x033B1E90 ADRP X8, 0xD69000
	0x033B1E94 LDR X0, [X21]
	0x033B1E98 LDR X8, [X8 + 0xD88]
	0x033B1E9C LDR W9, [X0 + 0xE0]
	0x033B1EA0 LDR X20, [X8]
	0x033B1EA4 CBNZ W9, 0x33B1EAC
	0x033B1EA8 BL 0x1C16DFC
	0x033B1EAC MOV X0, X20
	0x033B1EB0 MOV X1, X31
	0x033B1EB4 BL 0x338C698
	0x033B1EB8 MOV X1, X0
	0x033B1EBC MOV X0, X19
	0x033B1EC0 MOV X2, X31
	0x033B1EC4 BL 0x3395194
	0x033B1EC8 TBZ X0, 0x0, 0x33B1ED4
	0x033B1ECC MOVZ W0, 0xB
	0x033B1ED0 B 0x33B2068
	0x033B1ED4 ADRP X8, 0xD69000
	0x033B1ED8 LDR X0, [X21]
	0x033B1EDC LDR X8, [X8 + 0xDA0]
	0x033B1EE0 LDR W9, [X0 + 0xE0]
	0x033B1EE4 LDR X20, [X8]
	0x033B1EE8 CBNZ W9, 0x33B1EF0
	0x033B1EEC BL 0x1C16DFC
	0x033B1EF0 MOV X0, X20
	0x033B1EF4 MOV X1, X31
	0x033B1EF8 BL 0x338C698
	0x033B1EFC MOV X1, X0
	0x033B1F00 MOV X0, X19
	0x033B1F04 MOV X2, X31
	0x033B1F08 BL 0x3395194
	0x033B1F0C TBZ X0, 0x0, 0x33B1F18
	0x033B1F10 MOVZ W0, 0xA
	0x033B1F14 B 0x33B2068
	0x033B1F18 ADRP X8, 0xD69000
	0x033B1F1C LDR X0, [X21]
	0x033B1F20 LDR X8, [X8 + 0xD68]
	0x033B1F24 LDR W9, [X0 + 0xE0]
	0x033B1F28 LDR X20, [X8]
	0x033B1F2C CBNZ W9, 0x33B1F34
	0x033B1F30 BL 0x1C16DFC
	0x033B1F34 MOV X0, X20
	0x033B1F38 MOV X1, X31
	0x033B1F3C BL 0x338C698
	0x033B1F40 MOV X1, X0
	0x033B1F44 MOV X0, X19
	0x033B1F48 MOV X2, X31
	0x033B1F4C BL 0x3395194
	0x033B1F50 TBZ X0, 0x0, 0x33B1F5C
	0x033B1F54 MOVZ W0, 0x6
	0x033B1F58 B 0x33B2068
	0x033B1F5C ADRP X8, 0xD69000
	0x033B1F60 LDR X0, [X21]
	0x033B1F64 LDR X8, [X8 + 0xD98]
	0x033B1F68 LDR W9, [X0 + 0xE0]
	0x033B1F6C LDR X20, [X8]
	0x033B1F70 CBNZ W9, 0x33B1F78
	0x033B1F74 BL 0x1C16DFC
	0x033B1F78 MOV X0, X20
	0x033B1F7C MOV X1, X31
	0x033B1F80 BL 0x338C698
	0x033B1F84 MOV X1, X0
	0x033B1F88 MOV X0, X19
	0x033B1F8C MOV X2, X31
	0x033B1F90 BL 0x3395194
	0x033B1F94 TBZ X0, 0x0, 0x33B1FA0
	0x033B1F98 MOVZ W0, 0x8
	0x033B1F9C B 0x33B2068
	0x033B1FA0 ADRP X8, 0xD69000
	0x033B1FA4 LDR X0, [X21]
	0x033B1FA8 LDR X8, [X8 + 0xDA8]
	0x033B1FAC LDR W9, [X0 + 0xE0]
	0x033B1FB0 LDR X20, [X8]
	0x033B1FB4 CBNZ W9, 0x33B1FBC
	0x033B1FB8 BL 0x1C16DFC
	0x033B1FBC MOV X0, X20
	0x033B1FC0 MOV X1, X31
	0x033B1FC4 BL 0x338C698
	0x033B1FC8 MOV X1, X0
	0x033B1FCC MOV X0, X19
	0x033B1FD0 MOV X2, X31
	0x033B1FD4 BL 0x3395194

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x102D000
	007 Move X22, 0xD43000
	008 Move W8, [X21+417]
	009 Move X22, [X22+1728]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xD43000
	017 Move X0, [X0+3576]
	018 Call 0x1C17CF4
	019 Move X0, 0xD6C000
	020 Move X0, [X0+1256]
	021 Call 0x1C17CF4
	022 Move X0, 0xD43000
	023 Move X0, [X0+1728]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+417], W8
	027 Move X0, [X22]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X20
	033 Move X1, X31
	034 Move X2, X31
	035 Call Type.op_Equality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {86}
	040 Compare X20, 0
	041 JumpIfEqual {104}
	042 Move X8, [X20]
	043 Move X0, X20
	044 Move X9, [X8+1416]
	045 Move X1, [X8+1424]
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {105}
	051 Move X9, 0xD6C000
	052 Move X9, [X9+1256]
	053 Move X8, [X20]
	054 Move X0, [X9]
	055 Move W10, [X8+304]
	056 Move W9, [X0+304]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X20, X31
	059 Move X8, [X8+200]
	060 Add X8, X8, X9
	061 NotImplemented "Instruction LDUR not yet implemented."
	062 NotImplemented "Instruction CMP not yet implemented."
	063 NotImplemented "Instruction CSEL not yet implemented."
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Compare X20, 0
	069 JumpIfEqual {107}
	070 Move X8, 0xD43000
	071 Move X8, [X8+3576]
	072 Move X0, [X8]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 And X1, X19, 255
	078 Move X0, X20
	079 Move X20, [X31+32]
	080 Move X19, [X31+40]
	081 Move X22, [X31+16]
	082 Move X21, [X31+24]
	083 Move X30, [X31+48]
	084 Call 0x1C88B50
	085 Return X0
	086 Move X0, 0xD48000
	087 Move X0, [X0+1320]
	088 Call 0x1C17D08
	089 Call 0x1C17F10
	090 Move X19, X0
	091 Move X0, 0xD7B000
	092 Move X0, [X0+960]
	093 Call 0x1C17D08
	094 Move X1, X0
	095 Move X0, X19
	096 Move X2, X31
	097 Call ArgumentNullException..ctor, X0, X1
	098 Move X0, 0xD7B000
	099 Move X0, [X0+3872]
	100 Call 0x1C17D08
	101 Move X1, X0
	102 Move X0, X19
	103 Call 0x1C17DEC
	104 Call 0x1C17F20
	105 Move X0, 0xD7B000
	106 Move X0, [X0+952]
	107 Move X0, 0xD75000
	108 Move X0, [X0+3672]
	109 Call 0x1C17D08
	110 Move X1, X31
	111 Call Environment.GetResourceString, X0
	112 Move X19, X0
	113 Move X0, 0xD4B000
	114 Move X0, [X0+1400]
	115 Call 0x1C17D08
	116 Call 0x1C17F10
	117 Move X20, X0
	118 Move X0, 0xD7B000
	119 Move X0, [X0+960]
	120 Call 0x1C17D08
	121 Move X2, X0
	122 Move X0, X20
	123 Move X1, X19
	124 Move X3, X31
	125 Call ArgumentException..ctor, X0, X1, X2
	126 Move X0, 0xD7B000
	127 Move X0, [X0+3872]
	128 Call 0x1C17D08
	129 Move X1, X0
	130 Move X0, X20
	131 Call 0x1C17DEC

Method: System.Object ToObject(System.Type enumType, System.UInt16 value)

Disassembly:
	0x033B1FD8 TBZ X0, 0x0, 0x33B1FE4
	0x033B1FDC MOVZ W0, 0xC
	0x033B1FE0 B 0x33B2068
	0x033B1FE4 ADRP X8, 0xD6B000
	0x033B1FE8 LDR X0, [X21]
	0x033B1FEC LDR X8, [X8 + 0x248]
	0x033B1FF0 LDR W9, [X0 + 0xE0]
	0x033B1FF4 LDR X20, [X8]
	0x033B1FF8 CBNZ W9, 0x33B2000
	0x033B1FFC BL 0x1C16DFC
	0x033B2000 MOV X0, X20
	0x033B2004 MOV X1, X31
	0x033B2008 BL 0x338C698
	0x033B200C MOV X1, X0
	0x033B2010 MOV X0, X19
	0x033B2014 MOV X2, X31
	0x033B2018 BL 0x3395194
	0x033B201C TBZ X0, 0x0, 0x33B2028
	0x033B2020 MOVZ W0, 0x3
	0x033B2024 B 0x33B2068
	0x033B2028 ADRP X8, 0xD68000
	0x033B202C LDR X0, [X21]
	0x033B2030 LDR X8, [X8 + 0xD70]
	0x033B2034 LDR W9, [X0 + 0xE0]
	0x033B2038 LDR X20, [X8]
	0x033B203C CBNZ W9, 0x33B2044
	0x033B2040 BL 0x1C16DFC
	0x033B2044 MOV X0, X20
	0x033B2048 MOV X1, X31
	0x033B204C BL 0x338C698
	0x033B2050 MOV X1, X0
	0x033B2054 MOV X0, X19
	0x033B2058 MOV X2, X31
	0x033B205C BL 0x3395194
	0x033B2060 TBZ X0, 0x0, 0x33B2078
	0x033B2064 MOVZ W0, 0x4
	0x033B2068 LDP X20, X19, [X31 + 0x20]
	0x033B206C LDP X22, X21, [X31 + 0x10]
	0x033B2070 LDR X30, [X31], #0x30
	0x033B2074 RET
	0x033B2078 ADRP X0, 0xD79000
	0x033B207C LDR X0, [X0 + 0x3C8]
	0x033B2080 BL 0x1C16D08
	0x033B2084 MOV X1, X31
	0x033B2088 BL 0x33BDD84
	0x033B208C MOV X19, X0
	0x033B2090 ADRP X0, 0xD41000
	0x033B2094 LDR X0, [X0 + 0x5B0]
	0x033B2098 BL 0x1C16D08
	0x033B209C BL 0x1C16F10
	0x033B20A0 MOV X1, X19
	0x033B20A4 MOV X2, X31
	0x033B20A8 MOV X20, X0
	0x033B20AC BL 0x337DF1C
	0x033B20B0 ADRP X0, 0xD79000
	0x033B20B4 LDR X0, [X0 + 0xF80]
	0x033B20B8 BL 0x1C16D08
	0x033B20BC MOV X1, X0
	0x033B20C0 MOV X0, X20
	0x033B20C4 BL 0x1C16DEC
	0x033B20C8 STP X30, X21, [X31 - 0x20]!
	0x033B20CC STP X20, X19, [X31 + 0x10]
	0x033B20D0 ADRP X20, 0x102B000
	0x033B20D4 ADRP X21, 0xD43000
	0x033B20D8 LDRB W8, [X20 + 0x190]
	0x033B20DC LDR X21, [X21 + 0xC48]
	0x033B20E0 MOV X19, X0
	0x033B20E4 TBNZ X8, 0x0, 0x33B2108
	0x033B20E8 ADRP X0, 0xD4A000
	0x033B20EC LDR X0, [X0 + 0x9E8]
	0x033B20F0 BL 0x1C16CF4
	0x033B20F4 ADRP X0, 0xD43000
	0x033B20F8 LDR X0, [X0 + 0xC48]
	0x033B20FC BL 0x1C16CF4
	0x033B2100 MOVZ W8, 0x1
	0x033B2104 STRB W8, [X20 + 0x190]
	0x033B2108 ADRP X20, 0xD4A000
	0x033B210C LDR X20, [X20 + 0x9E8]
	0x033B2110 MOV X0, X19
	0x033B2114 BL 0x1C87AE4
	0x033B2118 LDR X8, [X21]
	0x033B211C MOV X19, X0
	0x033B2120 LDR W9, [X8 + 0xE0]
	0x033B2124 CBNZ W9, 0x33B2130
	0x033B2128 MOV X0, X8
	0x033B212C BL 0x1C16DFC
	0x033B2130 MOV X0, X31
	0x033B2134 BL 0x33387A0
	0x033B2138 LDR X8, [X20]
	0x033B213C MOV X20, X0
	0x033B2140 LDR W9, [X8 + 0xE0]
	0x033B2144 CBNZ W9, 0x33B2150
	0x033B2148 MOV X0, X8
	0x033B214C BL 0x1C16DFC
	0x033B2150 MOV X0, X19
	0x033B2154 MOV X1, X20
	0x033B2158 LDP X20, X19, [X31 + 0x10]
	0x033B215C MOV X2, X31
	0x033B2160 LDP X30, X21, [X31], #0x20
	0x033B2164 B 0x331E334
	0x033B2168 STP X30, X21, [X31 - 0x20]!
	0x033B216C STP X20, X19, [X31 + 0x10]
	0x033B2170 ADRP X20, 0x102B000
	0x033B2174 ADRP X21, 0xD43000
	0x033B2178 LDRB W8, [X20 + 0x191]
	0x033B217C LDR X21, [X21 + 0xC48]
	0x033B2180 MOV X19, X0
	0x033B2184 TBNZ X8, 0x0, 0x33B21A8
	0x033B2188 ADRP X0, 0xD4A000
	0x033B218C LDR X0, [X0 + 0x9E8]
	0x033B2190 BL 0x1C16CF4
	0x033B2194 ADRP X0, 0xD43000
	0x033B2198 LDR X0, [X0 + 0xC48]
	0x033B219C BL 0x1C16CF4
	0x033B21A0 MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x102D000
	007 Move X22, 0xD43000
	008 Move W8, [X21+418]
	009 Move X22, [X22+1728]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xD42000
	017 Move X0, [X0+3576]
	018 Call 0x1C17CF4
	019 Move X0, 0xD6B000
	020 Move X0, [X0+1256]
	021 Call 0x1C17CF4
	022 Move X0, 0xD42000
	023 Move X0, [X0+1728]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+418], W8
	027 Move X0, [X22]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X20
	033 Move X1, X31
	034 Move X2, X31
	035 Call Type.op_Equality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {86}
	040 Compare X20, 0
	041 JumpIfEqual {104}
	042 Move X8, [X20]
	043 Move X0, X20
	044 Move X9, [X8+1416]
	045 Move X1, [X8+1424]
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {105}
	051 Move X9, 0xD6B000
	052 Move X9, [X9+1256]
	053 Move X8, [X20]
	054 Move X0, [X9]
	055 Move W10, [X8+304]
	056 Move W9, [X0+304]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X20, X31
	059 Move X8, [X8+200]
	060 Add X8, X8, X9
	061 NotImplemented "Instruction LDUR not yet implemented."
	062 NotImplemented "Instruction CMP not yet implemented."
	063 NotImplemented "Instruction CSEL not yet implemented."
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Compare X20, 0
	069 JumpIfEqual {107}
	070 Move X8, 0xD42000
	071 Move X8, [X8+3576]
	072 Move X0, [X8]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 And X1, X19, 0xFFFF
	078 Move X0, X20
	079 Move X20, [X31+32]
	080 Move X19, [X31+40]
	081 Move X22, [X31+16]
	082 Move X21, [X31+24]
	083 Move X30, [X31+48]
	084 Call 0x1C88B50
	085 Return X0
	086 Move X0, 0xD47000
	087 Move X0, [X0+1320]
	088 Call 0x1C17D08
	089 Call 0x1C17F10
	090 Move X19, X0
	091 Move X0, 0xD7A000
	092 Move X0, [X0+960]
	093 Call 0x1C17D08
	094 Move X1, X0
	095 Move X0, X19
	096 Move X2, X31
	097 Call ArgumentNullException..ctor, X0, X1
	098 Move X0, 0xD7A000
	099 Move X0, [X0+3880]
	100 Call 0x1C17D08
	101 Move X1, X0
	102 Move X0, X19
	103 Call 0x1C17DEC
	104 Call 0x1C17F20
	105 Move X0, 0xD7A000
	106 Move X0, [X0+952]
	107 Move X0, 0xD74000
	108 Move X0, [X0+3672]
	109 Call 0x1C17D08
	110 Move X1, X31
	111 Call Environment.GetResourceString, X0
	112 Move X19, X0
	113 Move X0, 0xD4A000
	114 Move X0, [X0+1400]
	115 Call 0x1C17D08
	116 Call 0x1C17F10
	117 Move X20, X0
	118 Move X0, 0xD7A000
	119 Move X0, [X0+960]
	120 Call 0x1C17D08
	121 Move X2, X0
	122 Move X0, X20
	123 Move X1, X19
	124 Move X3, X31
	125 Call ArgumentException..ctor, X0, X1, X2
	126 Move X0, 0xD7A000
	127 Move X0, [X0+3880]
	128 Call 0x1C17D08
	129 Move X1, X0
	130 Move X0, X20
	131 Call 0x1C17DEC

Method: System.Object ToObject(System.Type enumType, System.UInt32 value)

Disassembly:
	0x033B1C40 BL 0x1993444
	0x033B1C44 MOV X0, X19
	0x033B1C48 MOV X1, X31
	0x033B1C4C BL 0x33BE520
	0x033B1C50 MOV X19, X0
	0x033B1C54 MOV X0, X21
	0x033B1C58 BL 0x19903C0
	0x033B1C5C MOV X0, X21
	0x033B1C60 MOV X1, X19
	0x033B1C64 BL 0x19980B4
	0x033B1C68 MOVZ W1, 0x1
	0x033B1C6C MOV X0, X21
	0x033B1C70 MOV X2, X19
	0x033B1C74 BL 0x1993444
	0x033B1C78 ADRP X0, 0xD7A000
	0x033B1C7C LDR X0, [X0 + 0xF78]
	0x033B1C80 BL 0x1C16D08
	0x033B1C84 MOV X1, X21
	0x033B1C88 MOV X2, X31
	0x033B1C8C BL 0x33BFB40
	0x033B1C90 MOV X19, X0
	0x033B1C94 ADRP X0, 0xD4A000
	0x033B1C98 LDR X0, [X0 + 0x578]
	0x033B1C9C BL 0x1C16D08
	0x033B1CA0 BL 0x1C16F10
	0x033B1CA4 MOV X1, X19
	0x033B1CA8 MOV X2, X31
	0x033B1CAC MOV X20, X0
	0x033B1CB0 BL 0x3314A68
	0x033B1CB4 ADRP X0, 0xD7A000
	0x033B1CB8 LDR X0, [X0 + 0xF70]
	0x033B1CBC BL 0x1C16D08
	0x033B1CC0 MOV X1, X0
	0x033B1CC4 MOV X0, X20
	0x033B1CC8 BL 0x1C16DEC
	0x033B1CCC STR X30, [X31 - 0x30]!
	0x033B1CD0 STP X22, X21, [X31 + 0x10]
	0x033B1CD4 STP X20, X19, [X31 + 0x20]
	0x033B1CD8 ADRP X21, 0x102C000
	0x033B1CDC ADRP X20, 0xD42000
	0x033B1CE0 LDRB W8, [X21 + 0x18F]
	0x033B1CE4 LDR X20, [X20 + 0xDF8]
	0x033B1CE8 MOV X19, X0
	0x033B1CEC TBNZ X8, 0x0, 0x33B1D88
	0x033B1CF0 ADRP X0, 0xD6B000
	0x033B1CF4 LDR X0, [X0 + 0x248]
	0x033B1CF8 BL 0x1C16CF4
	0x033B1CFC ADRP X0, 0xD69000
	0x033B1D00 LDR X0, [X0 + 0xD68]
	0x033B1D04 BL 0x1C16CF4
	0x033B1D08 ADRP X0, 0xD69000
	0x033B1D0C LDR X0, [X0 + 0xD70]
	0x033B1D10 BL 0x1C16CF4
	0x033B1D14 ADRP X0, 0xD42000
	0x033B1D18 LDR X0, [X0 + 0xDF8]
	0x033B1D1C BL 0x1C16CF4
	0x033B1D20 ADRP X0, 0xD69000
	0x033B1D24 LDR X0, [X0 + 0xD78]
	0x033B1D28 BL 0x1C16CF4
	0x033B1D2C ADRP X0, 0xD69000
	0x033B1D30 LDR X0, [X0 + 0xD80]
	0x033B1D34 BL 0x1C16CF4
	0x033B1D38 ADRP X0, 0xD69000
	0x033B1D3C LDR X0, [X0 + 0xD88]
	0x033B1D40 BL 0x1C16CF4
	0x033B1D44 ADRP X0, 0xD69000
	0x033B1D48 LDR X0, [X0 + 0xD90]
	0x033B1D4C BL 0x1C16CF4
	0x033B1D50 ADRP X0, 0xD42000
	0x033B1D54 LDR X0, [X0 + 0x6C0]
	0x033B1D58 BL 0x1C16CF4
	0x033B1D5C ADRP X0, 0xD69000
	0x033B1D60 LDR X0, [X0 + 0xD98]
	0x033B1D64 BL 0x1C16CF4
	0x033B1D68 ADRP X0, 0xD69000
	0x033B1D6C LDR X0, [X0 + 0xDA0]
	0x033B1D70 BL 0x1C16CF4
	0x033B1D74 ADRP X0, 0xD69000
	0x033B1D78 LDR X0, [X0 + 0xDA8]
	0x033B1D7C BL 0x1C16CF4
	0x033B1D80 MOVZ W8, 0x1
	0x033B1D84 STRB W8, [X21 + 0x18F]
	0x033B1D88 ADRP X22, 0xD69000
	0x033B1D8C ADRP X21, 0xD42000
	0x033B1D90 LDR X22, [X22 + 0xD80]
	0x033B1D94 LDR X21, [X21 + 0x6C0]
	0x033B1D98 MOV X0, X19
	0x033B1D9C MOV X1, X31
	0x033B1DA0 BL 0x33BE520
	0x033B1DA4 LDR X8, [X20]
	0x033B1DA8 MOV X19, X0
	0x033B1DAC LDR W9, [X8 + 0xE0]
	0x033B1DB0 CBNZ W9, 0x33B1DBC
	0x033B1DB4 MOV X0, X8
	0x033B1DB8 BL 0x1C16DFC
	0x033B1DBC MOV X0, X19
	0x033B1DC0 BL 0x33AFB1C
	0x033B1DC4 LDR X8, [X21]
	0x033B1DC8 LDR X20, [X22]
	0x033B1DCC MOV X19, X0
	0x033B1DD0 LDR W9, [X8 + 0xE0]
	0x033B1DD4 CBNZ W9, 0x33B1DE0
	0x033B1DD8 MOV X0, X8
	0x033B1DDC BL 0x1C16DFC
	0x033B1DE0 MOV X0, X20
	0x033B1DE4 MOV X1, X31
	0x033B1DE8 BL 0x338C698
	0x033B1DEC MOV X1, X0
	0x033B1DF0 MOV X0, X19
	0x033B1DF4 MOV X2, X31
	0x033B1DF8 BL 0x3395194
	0x033B1DFC TBZ X0, 0x0, 0x33B1E08
	0x033B1E00 MOVZ W0, 0x9
	0x033B1E04 B 0x33B2068
	0x033B1E08 ADRP X8, 0xD69000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x102D000
	007 Move X22, 0xD43000
	008 Move W8, [X21+419]
	009 Move X22, [X22+1728]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xD43000
	017 Move X0, [X0+3576]
	018 Call 0x1C17CF4
	019 Move X0, 0xD6C000
	020 Move X0, [X0+1256]
	021 Call 0x1C17CF4
	022 Move X0, 0xD43000
	023 Move X0, [X0+1728]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+419], W8
	027 Move X0, [X22]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X20
	033 Move X1, X31
	034 Move X2, X31
	035 Call Type.op_Equality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {86}
	040 Compare X20, 0
	041 JumpIfEqual {104}
	042 Move X8, [X20]
	043 Move X0, X20
	044 Move X9, [X8+1416]
	045 Move X1, [X8+1424]
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {105}
	051 Move X9, 0xD6C000
	052 Move X9, [X9+1256]
	053 Move X8, [X20]
	054 Move X0, [X9]
	055 Move W10, [X8+304]
	056 Move W9, [X0+304]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X20, X31
	059 Move X8, [X8+200]
	060 Add X8, X8, X9
	061 NotImplemented "Instruction LDUR not yet implemented."
	062 NotImplemented "Instruction CMP not yet implemented."
	063 NotImplemented "Instruction CSEL not yet implemented."
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Compare X20, 0
	069 JumpIfEqual {107}
	070 Move X8, 0xD43000
	071 Move X8, [X8+3576]
	072 Move X0, [X8]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 Move W1, W19
	078 Move X0, X20
	079 Move X20, [X31+32]
	080 Move X19, [X31+40]
	081 Move X22, [X31+16]
	082 Move X21, [X31+24]
	083 Move X30, [X31+48]
	084 Call 0x1C88B50
	085 Return X0
	086 Move X0, 0xD48000
	087 Move X0, [X0+1320]
	088 Call 0x1C17D08
	089 Call 0x1C17F10
	090 Move X19, X0
	091 Move X0, 0xD7B000
	092 Move X0, [X0+960]
	093 Call 0x1C17D08
	094 Move X1, X0
	095 Move X0, X19
	096 Move X2, X31
	097 Call ArgumentNullException..ctor, X0, X1
	098 Move X0, 0xD7B000
	099 Move X0, [X0+3864]
	100 Call 0x1C17D08
	101 Move X1, X0
	102 Move X0, X19
	103 Call 0x1C17DEC
	104 Call 0x1C17F20
	105 Move X0, 0xD7B000
	106 Move X0, [X0+952]
	107 Move X0, 0xD75000
	108 Move X0, [X0+3672]
	109 Call 0x1C17D08
	110 Move X1, X31
	111 Call Environment.GetResourceString, X0
	112 Move X19, X0
	113 Move X0, 0xD4B000
	114 Move X0, [X0+1400]
	115 Call 0x1C17D08
	116 Call 0x1C17F10
	117 Move X20, X0
	118 Move X0, 0xD7B000
	119 Move X0, [X0+960]
	120 Call 0x1C17D08
	121 Move X2, X0
	122 Move X0, X20
	123 Move X1, X19
	124 Move X3, X31
	125 Call ArgumentException..ctor, X0, X1, X2
	126 Move X0, 0xD7B000
	127 Move X0, [X0+3864]
	128 Call 0x1C17D08
	129 Move X1, X0
	130 Move X0, X20
	131 Call 0x1C17DEC

Method: System.Object ToObject(System.Type enumType, System.Int64 value)

Disassembly:
	0x033B1A74 BL 0x19903C0
	0x033B1A78 LDR X8, [X20]
	0x033B1A7C MOV X0, X20
	0x033B1A80 LDP X9, X1, [X8 + 0x168]
	0x033B1A84 BLR X9
	0x033B1A88 MOV X20, X0
	0x033B1A8C MOV X0, X19
	0x033B1A90 BL 0x19903C0
	0x033B1A94 MOV X0, X19
	0x033B1A98 MOV X1, X20
	0x033B1A9C BL 0x19980B4
	0x033B1AA0 MOVZ W1, 0x1
	0x033B1AA4 MOV X0, X19
	0x033B1AA8 MOV X2, X20
	0x033B1AAC BL 0x1993444
	0x033B1AB0 ADRP X0, 0xD7A000
	0x033B1AB4 LDR X0, [X0 + 0x3E0]
	0x033B1AB8 BL 0x1C16D08
	0x033B1ABC MOV X1, X19
	0x033B1AC0 MOV X2, X31
	0x033B1AC4 BL 0x33BFB40
	0x033B1AC8 MOV X19, X0
	0x033B1ACC ADRP X0, 0xD4A000
	0x033B1AD0 LDR X0, [X0 + 0x578]
	0x033B1AD4 BL 0x1C16D08
	0x033B1AD8 BL 0x1C16F10
	0x033B1ADC MOV X1, X19
	0x033B1AE0 MOV X2, X31
	0x033B1AE4 MOV X20, X0
	0x033B1AE8 BL 0x3314A68
	0x033B1AEC B 0x33B1B28
	0x033B1AF0 ADRP X0, 0xD7A000
	0x033B1AF4 LDR X0, [X0 + 0x3C8]
	0x033B1AF8 BL 0x1C16D08
	0x033B1AFC MOV X1, X31
	0x033B1B00 BL 0x33BDD84
	0x033B1B04 MOV X19, X0
	0x033B1B08 ADRP X0, 0xD42000
	0x033B1B0C LDR X0, [X0 + 0x5B0]
	0x033B1B10 BL 0x1C16D08
	0x033B1B14 BL 0x1C16F10
	0x033B1B18 MOV X1, X19
	0x033B1B1C MOV X2, X31
	0x033B1B20 MOV X20, X0
	0x033B1B24 BL 0x337DF1C
	0x033B1B28 ADRP X0, 0xD7A000
	0x033B1B2C LDR X0, [X0 + 0xF60]
	0x033B1B30 BL 0x1C16D08
	0x033B1B34 MOV X1, X0
	0x033B1B38 MOV X0, X20
	0x033B1B3C BL 0x1C16DEC
	0x033B1B40 LDR X8, [X0]
	0x033B1B44 LDP X2, X1, [X8 + 0x168]
	0x033B1B48 BR X2
	0x033B1B4C STP X30, X21, [X31 - 0x20]!
	0x033B1B50 STP X20, X19, [X31 + 0x10]
	0x033B1B54 CBZ X1, 0x33B1BAC
	0x033B1B58 MOV X20, X1
	0x033B1B5C MOV X1, X31
	0x033B1B60 MOV X19, X0
	0x033B1B64 BL 0x33BE520
	0x033B1B68 MOV X21, X0
	0x033B1B6C MOV X0, X20
	0x033B1B70 MOV X1, X31
	0x033B1B74 BL 0x33BE520
	0x033B1B78 CBZ X21, 0x33B1BF4
	0x033B1B7C LDR X8, [X21]
	0x033B1B80 MOV X1, X0
	0x033B1B84 MOV X0, X21
	0x033B1B88 LDR X9, [X8 + 0x878]
	0x033B1B8C LDR X2, [X8 + 0x880]
	0x033B1B90 BLR X9
	0x033B1B94 TBZ X0, 0x0, 0x33B1BF8
	0x033B1B98 MOV X0, X19
	0x033B1B9C MOV X1, X20
	0x033B1BA0 LDP X20, X19, [X31 + 0x10]
	0x033B1BA4 LDP X30, X21, [X31], #0x20
	0x033B1BA8 B 0x1C87894
	0x033B1BAC ADRP X0, 0xD47000
	0x033B1BB0 LDR X0, [X0 + 0x528]
	0x033B1BB4 BL 0x1C16D08
	0x033B1BB8 BL 0x1C16F10
	0x033B1BBC MOV X19, X0
	0x033B1BC0 ADRP X0, 0xD7A000
	0x033B1BC4 LDR X0, [X0 + 0xF68]
	0x033B1BC8 BL 0x1C16D08
	0x033B1BCC MOV X1, X0
	0x033B1BD0 MOV X0, X19
	0x033B1BD4 MOV X2, X31
	0x033B1BD8 BL 0x330E100
	0x033B1BDC ADRP X0, 0xD7A000
	0x033B1BE0 LDR X0, [X0 + 0xF70]
	0x033B1BE4 BL 0x1C16D08
	0x033B1BE8 MOV X1, X0
	0x033B1BEC MOV X0, X19
	0x033B1BF0 BL 0x1C16DEC
	0x033B1BF4 BL 0x1C16F20
	0x033B1BF8 ADRP X0, 0xD42000
	0x033B1BFC LDR X0, [X0 + 0x9D0]
	0x033B1C00 BL 0x1C16D08
	0x033B1C04 MOVZ W1, 0x2
	0x033B1C08 BL 0x1C16D6C
	0x033B1C0C MOV X21, X0
	0x033B1C10 MOV X0, X20
	0x033B1C14 MOV X1, X31
	0x033B1C18 BL 0x33BE520
	0x033B1C1C MOV X20, X0
	0x033B1C20 MOV X0, X21
	0x033B1C24 BL 0x19903C0
	0x033B1C28 MOV X0, X21
	0x033B1C2C MOV X1, X20
	0x033B1C30 BL 0x19980B4
	0x033B1C34 MOV X0, X21
	0x033B1C38 MOV X1, X31
	0x033B1C3C MOV X2, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x102D000
	007 Move X22, 0xD43000
	008 Move W8, [X21+420]
	009 Move X22, [X22+1728]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xD43000
	017 Move X0, [X0+3576]
	018 Call 0x1C17CF4
	019 Move X0, 0xD6C000
	020 Move X0, [X0+1256]
	021 Call 0x1C17CF4
	022 Move X0, 0xD43000
	023 Move X0, [X0+1728]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+420], W8
	027 Move X0, [X22]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X20
	033 Move X1, X31
	034 Move X2, X31
	035 Call Type.op_Equality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {86}
	040 Compare X20, 0
	041 JumpIfEqual {104}
	042 Move X8, [X20]
	043 Move X0, X20
	044 Move X9, [X8+1416]
	045 Move X1, [X8+1424]
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {105}
	051 Move X9, 0xD6C000
	052 Move X9, [X9+1256]
	053 Move X8, [X20]
	054 Move X0, [X9]
	055 Move W10, [X8+304]
	056 Move W9, [X0+304]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X20, X31
	059 Move X8, [X8+200]
	060 Add X8, X8, X9
	061 NotImplemented "Instruction LDUR not yet implemented."
	062 NotImplemented "Instruction CMP not yet implemented."
	063 NotImplemented "Instruction CSEL not yet implemented."
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Compare X20, 0
	069 JumpIfEqual {107}
	070 Move X8, 0xD43000
	071 Move X8, [X8+3576]
	072 Move X0, [X8]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 Move X0, X20
	078 Move X1, X19
	079 Move X20, [X31+32]
	080 Move X19, [X31+40]
	081 Move X22, [X31+16]
	082 Move X21, [X31+24]
	083 Move X30, [X31+48]
	084 Call 0x1C88B50
	085 Return X0
	086 Move X0, 0xD48000
	087 Move X0, [X0+1320]
	088 Call 0x1C17D08
	089 Call 0x1C17F10
	090 Move X19, X0
	091 Move X0, 0xD7B000
	092 Move X0, [X0+960]
	093 Call 0x1C17D08
	094 Move X1, X0
	095 Move X0, X19
	096 Move X2, X31
	097 Call ArgumentNullException..ctor, X0, X1
	098 Move X0, 0xD7B000
	099 Move X0, [X0+3856]
	100 Call 0x1C17D08
	101 Move X1, X0
	102 Move X0, X19
	103 Call 0x1C17DEC
	104 Call 0x1C17F20
	105 Move X0, 0xD7B000
	106 Move X0, [X0+952]
	107 Move X0, 0xD75000
	108 Move X0, [X0+3672]
	109 Call 0x1C17D08
	110 Move X1, X31
	111 Call Environment.GetResourceString, X0
	112 Move X19, X0
	113 Move X0, 0xD4B000
	114 Move X0, [X0+1400]
	115 Call 0x1C17D08
	116 Call 0x1C17F10
	117 Move X20, X0
	118 Move X0, 0xD7B000
	119 Move X0, [X0+960]
	120 Call 0x1C17D08
	121 Move X2, X0
	122 Move X0, X20
	123 Move X1, X19
	124 Move X3, X31
	125 Call ArgumentException..ctor, X0, X1, X2
	126 Move X0, 0xD7B000
	127 Move X0, [X0+3856]
	128 Call 0x1C17D08
	129 Move X1, X0
	130 Move X0, X20
	131 Call 0x1C17DEC

Method: System.Object ToObject(System.Type enumType, System.UInt64 value)

Disassembly:
	0x033B10EC LDR X0, [X0 + 0x528]
	0x033B10F0 BL 0x1C16D08
	0x033B10F4 BL 0x1C16F10
	0x033B10F8 MOV X19, X0
	0x033B10FC ADRP X0, 0xD7A000
	0x033B1100 LDR X0, [X0 + 0x3C0]
	0x033B1104 BL 0x1C16D08
	0x033B1108 MOV X1, X0
	0x033B110C MOV X0, X19
	0x033B1110 MOV X2, X31
	0x033B1114 BL 0x330E100
	0x033B1118 ADRP X0, 0xD7A000
	0x033B111C LDR X0, [X0 + 0xF28]
	0x033B1120 BL 0x1C16D08
	0x033B1124 MOV X1, X0
	0x033B1128 MOV X0, X19
	0x033B112C BL 0x1C16DEC
	0x033B1130 BL 0x1C16F20
	0x033B1134 ADRP X0, 0xD7A000
	0x033B1138 LDR X0, [X0 + 0x3B8]
	0x033B113C B 0x33B1148
	0x033B1140 ADRP X0, 0xD74000
	0x033B1144 LDR X0, [X0 + 0xE58]
	0x033B1148 BL 0x1C16D08
	0x033B114C MOV X1, X31
	0x033B1150 BL 0x33BDD84
	0x033B1154 MOV X19, X0
	0x033B1158 ADRP X0, 0xD4A000
	0x033B115C LDR X0, [X0 + 0x578]
	0x033B1160 BL 0x1C16D08
	0x033B1164 BL 0x1C16F10
	0x033B1168 MOV X20, X0
	0x033B116C ADRP X0, 0xD7A000
	0x033B1170 LDR X0, [X0 + 0x3C0]
	0x033B1174 BL 0x1C16D08
	0x033B1178 MOV X2, X0
	0x033B117C MOV X0, X20
	0x033B1180 MOV X1, X19
	0x033B1184 MOV X3, X31
	0x033B1188 BL 0x330E16C
	0x033B118C ADRP X0, 0xD7A000
	0x033B1190 LDR X0, [X0 + 0xF28]
	0x033B1194 BL 0x1C16D08
	0x033B1198 MOV X1, X0
	0x033B119C MOV X0, X20
	0x033B11A0 BL 0x1C16DEC
	0x033B11A4 STR X30, [X31 - 0x30]!
	0x033B11A8 STP X22, X21, [X31 + 0x10]
	0x033B11AC STP X20, X19, [X31 + 0x20]
	0x033B11B0 ADRP X21, 0x102C000
	0x033B11B4 ADRP X22, 0xD42000
	0x033B11B8 LDRB W8, [X21 + 0x1A6]
	0x033B11BC LDR X22, [X22 + 0x6C0]
	0x033B11C0 MOV W19, W1
	0x033B11C4 MOV X20, X0
	0x033B11C8 TBNZ X8, 0x0, 0x33B11F8
	0x033B11CC ADRP X0, 0xD42000
	0x033B11D0 LDR X0, [X0 + 0xDF8]
	0x033B11D4 BL 0x1C16CF4
	0x033B11D8 ADRP X0, 0xD6B000
	0x033B11DC LDR X0, [X0 + 0x4E8]
	0x033B11E0 BL 0x1C16CF4
	0x033B11E4 ADRP X0, 0xD42000
	0x033B11E8 LDR X0, [X0 + 0x6C0]
	0x033B11EC BL 0x1C16CF4
	0x033B11F0 MOVZ W8, 0x1
	0x033B11F4 STRB W8, [X21 + 0x1A6]
	0x033B11F8 LDR X0, [X22]
	0x033B11FC LDR W8, [X0 + 0xE0]
	0x033B1200 CBNZ W8, 0x33B1208
	0x033B1204 BL 0x1C16DFC
	0x033B1208 MOV X0, X20
	0x033B120C MOV X1, X31
	0x033B1210 MOV X2, X31
	0x033B1214 BL 0x3395194
	0x033B1218 TBNZ X0, 0x0, 0x33B12B4
	0x033B121C CBZ X20, 0x33B12FC
	0x033B1220 LDR X8, [X20]
	0x033B1224 MOV X0, X20
	0x033B1228 LDR X9, [X8 + 0x588]
	0x033B122C LDR X1, [X8 + 0x590]
	0x033B1230 BLR X9
	0x033B1234 TBZ X0, 0x0, 0x33B1300
	0x033B1238 ADRP X9, 0xD6B000
	0x033B123C LDR X9, [X9 + 0x4E8]
	0x033B1240 LDR X8, [X20]
	0x033B1244 LDR X0, [X9]
	0x033B1248 LDRB W10, [X8 + 0x130]
	0x033B124C LDRB W9, [X0 + 0x130]
	0x033B1250 CMP W10, W9
	0x033B1254 B.CS 0x33B1260
	0x033B1258 MOV X20, X31
	0x033B125C B 0x33B1274
	0x033B1260 LDR X8, [X8 + 0xC8]
	0x033B1264 ADD X8, X8, X9, 0x3, LSL
	0x033B1268 LDUR X8, [X8 - 0x8]
	0x033B126C CMP X8, X0
	0x033B1270 CSEL X20, X20, X31, EQ
	0x033B1274 LDR W8, [X0 + 0xE0]
	0x033B1278 CBNZ W8, 0x33B1280
	0x033B127C BL 0x1C16DFC
	0x033B1280 CBZ X20, 0x33B130C
	0x033B1284 ADRP X8, 0xD42000
	0x033B1288 LDR X8, [X8 + 0xDF8]
	0x033B128C LDR X0, [X8]
	0x033B1290 LDR W8, [X0 + 0xE0]
	0x033B1294 CBNZ W8, 0x33B129C
	0x033B1298 BL 0x1C16DFC
	0x033B129C AND X1, X19, 0xFFFF
	0x033B12A0 MOV X0, X20
	0x033B12A4 LDP X20, X19, [X31 + 0x20]
	0x033B12A8 LDP X22, X21, [X31 + 0x10]
	0x033B12AC LDR X30, [X31], #0x30
	0x033B12B0 B 0x1C87B50
	0x033B12B4 ADRP X0, 0xD47000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x102D000
	007 Move X22, 0xD43000
	008 Move W8, [X21+421]
	009 Move X22, [X22+1728]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xD43000
	017 Move X0, [X0+3576]
	018 Call 0x1C17CF4
	019 Move X0, 0xD6C000
	020 Move X0, [X0+1256]
	021 Call 0x1C17CF4
	022 Move X0, 0xD43000
	023 Move X0, [X0+1728]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+421], W8
	027 Move X0, [X22]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X20
	033 Move X1, X31
	034 Move X2, X31
	035 Call Type.op_Equality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {86}
	040 Compare X20, 0
	041 JumpIfEqual {104}
	042 Move X8, [X20]
	043 Move X0, X20
	044 Move X9, [X8+1416]
	045 Move X1, [X8+1424]
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {105}
	051 Move X9, 0xD6C000
	052 Move X9, [X9+1256]
	053 Move X8, [X20]
	054 Move X0, [X9]
	055 Move W10, [X8+304]
	056 Move W9, [X0+304]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X20, X31
	059 Move X8, [X8+200]
	060 Add X8, X8, X9
	061 NotImplemented "Instruction LDUR not yet implemented."
	062 NotImplemented "Instruction CMP not yet implemented."
	063 NotImplemented "Instruction CSEL not yet implemented."
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Compare X20, 0
	069 JumpIfEqual {107}
	070 Move X8, 0xD43000
	071 Move X8, [X8+3576]
	072 Move X0, [X8]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 Move X0, X20
	078 Move X1, X19
	079 Move X20, [X31+32]
	080 Move X19, [X31+40]
	081 Move X22, [X31+16]
	082 Move X21, [X31+24]
	083 Move X30, [X31+48]
	084 Call 0x1C88B50
	085 Return X0
	086 Move X0, 0xD48000
	087 Move X0, [X0+1320]
	088 Call 0x1C17D08
	089 Call 0x1C17F10
	090 Move X19, X0
	091 Move X0, 0xD7B000
	092 Move X0, [X0+960]
	093 Call 0x1C17D08
	094 Move X1, X0
	095 Move X0, X19
	096 Move X2, X31
	097 Call ArgumentNullException..ctor, X0, X1
	098 Move X0, 0xD7B000
	099 Move X0, [X0+3808]
	100 Call 0x1C17D08
	101 Move X1, X0
	102 Move X0, X19
	103 Call 0x1C17DEC
	104 Call 0x1C17F20
	105 Move X0, 0xD7B000
	106 Move X0, [X0+952]
	107 Move X0, 0xD75000
	108 Move X0, [X0+3672]
	109 Call 0x1C17D08
	110 Move X1, X31
	111 Call Environment.GetResourceString, X0
	112 Move X19, X0
	113 Move X0, 0xD4B000
	114 Move X0, [X0+1400]
	115 Call 0x1C17D08
	116 Call 0x1C17F10
	117 Move X20, X0
	118 Move X0, 0xD7B000
	119 Move X0, [X0+960]
	120 Call 0x1C17D08
	121 Move X2, X0
	122 Move X0, X20
	123 Move X1, X19
	124 Move X3, X31
	125 Call ArgumentException..ctor, X0, X1, X2
	126 Move X0, 0xD7B000
	127 Move X0, [X0+3808]
	128 Call 0x1C17D08
	129 Move X1, X0
	130 Move X0, X20
	131 Call 0x1C17DEC

Method: System.Object ToObject(System.Type enumType, System.Char value)

Disassembly:
	0x033B21A4 STRB W8, [X20 + 0x191]
	0x033B21A8 ADRP X20, 0xD4A000
	0x033B21AC LDR X20, [X20 + 0x9E8]
	0x033B21B0 MOV X0, X19
	0x033B21B4 BL 0x1C87AE4
	0x033B21B8 LDR X8, [X21]
	0x033B21BC MOV X19, X0
	0x033B21C0 LDR W9, [X8 + 0xE0]
	0x033B21C4 CBNZ W9, 0x33B21D0
	0x033B21C8 MOV X0, X8
	0x033B21CC BL 0x1C16DFC
	0x033B21D0 MOV X0, X31
	0x033B21D4 BL 0x33387A0
	0x033B21D8 LDR X8, [X20]
	0x033B21DC MOV X20, X0
	0x033B21E0 LDR W9, [X8 + 0xE0]
	0x033B21E4 CBNZ W9, 0x33B21F0
	0x033B21E8 MOV X0, X8
	0x033B21EC BL 0x1C16DFC
	0x033B21F0 MOV X0, X19
	0x033B21F4 MOV X1, X20
	0x033B21F8 LDP X20, X19, [X31 + 0x10]
	0x033B21FC MOV X2, X31
	0x033B2200 LDP X30, X21, [X31], #0x20
	0x033B2204 B 0x331E6DC
	0x033B2208 STP X30, X21, [X31 - 0x20]!
	0x033B220C STP X20, X19, [X31 + 0x10]
	0x033B2210 ADRP X20, 0x102B000
	0x033B2214 ADRP X21, 0xD43000
	0x033B2218 LDRB W8, [X20 + 0x192]
	0x033B221C LDR X21, [X21 + 0xC48]
	0x033B2220 MOV X19, X0
	0x033B2224 TBNZ X8, 0x0, 0x33B2248
	0x033B2228 ADRP X0, 0xD4A000
	0x033B222C LDR X0, [X0 + 0x9E8]
	0x033B2230 BL 0x1C16CF4
	0x033B2234 ADRP X0, 0xD43000
	0x033B2238 LDR X0, [X0 + 0xC48]
	0x033B223C BL 0x1C16CF4
	0x033B2240 MOVZ W8, 0x1
	0x033B2244 STRB W8, [X20 + 0x192]
	0x033B2248 ADRP X20, 0xD4A000
	0x033B224C LDR X20, [X20 + 0x9E8]
	0x033B2250 MOV X0, X19
	0x033B2254 BL 0x1C87AE4
	0x033B2258 LDR X8, [X21]
	0x033B225C MOV X19, X0
	0x033B2260 LDR W9, [X8 + 0xE0]
	0x033B2264 CBNZ W9, 0x33B2270
	0x033B2268 MOV X0, X8
	0x033B226C BL 0x1C16DFC
	0x033B2270 MOV X0, X31
	0x033B2274 BL 0x33387A0
	0x033B2278 LDR X8, [X20]
	0x033B227C MOV X20, X0
	0x033B2280 LDR W9, [X8 + 0xE0]
	0x033B2284 CBNZ W9, 0x33B2290
	0x033B2288 MOV X0, X8
	0x033B228C BL 0x1C16DFC
	0x033B2290 MOV X0, X19
	0x033B2294 MOV X1, X20
	0x033B2298 LDP X20, X19, [X31 + 0x10]
	0x033B229C MOV X2, X31
	0x033B22A0 LDP X30, X21, [X31], #0x20
	0x033B22A4 B 0x331EBD0
	0x033B22A8 STP X30, X21, [X31 - 0x20]!
	0x033B22AC STP X20, X19, [X31 + 0x10]
	0x033B22B0 ADRP X20, 0x102B000
	0x033B22B4 ADRP X21, 0xD43000
	0x033B22B8 LDRB W8, [X20 + 0x193]
	0x033B22BC LDR X21, [X21 + 0xC48]
	0x033B22C0 MOV X19, X0
	0x033B22C4 TBNZ X8, 0x0, 0x33B22E8
	0x033B22C8 ADRP X0, 0xD4A000
	0x033B22CC LDR X0, [X0 + 0x9E8]
	0x033B22D0 BL 0x1C16CF4
	0x033B22D4 ADRP X0, 0xD43000
	0x033B22D8 LDR X0, [X0 + 0xC48]
	0x033B22DC BL 0x1C16CF4
	0x033B22E0 MOVZ W8, 0x1
	0x033B22E4 STRB W8, [X20 + 0x193]
	0x033B22E8 ADRP X20, 0xD4A000
	0x033B22EC LDR X20, [X20 + 0x9E8]
	0x033B22F0 MOV X0, X19
	0x033B22F4 BL 0x1C87AE4
	0x033B22F8 LDR X8, [X21]
	0x033B22FC MOV X19, X0
	0x033B2300 LDR W9, [X8 + 0xE0]
	0x033B2304 CBNZ W9, 0x33B2310
	0x033B2308 MOV X0, X8
	0x033B230C BL 0x1C16DFC
	0x033B2310 MOV X0, X31
	0x033B2314 BL 0x33387A0
	0x033B2318 LDR X8, [X20]
	0x033B231C MOV X20, X0
	0x033B2320 LDR W9, [X8 + 0xE0]
	0x033B2324 CBNZ W9, 0x33B2330
	0x033B2328 MOV X0, X8
	0x033B232C BL 0x1C16DFC
	0x033B2330 MOV X0, X19
	0x033B2334 MOV X1, X20
	0x033B2338 LDP X20, X19, [X31 + 0x10]
	0x033B233C MOV X2, X31
	0x033B2340 LDP X30, X21, [X31], #0x20
	0x033B2344 B 0x331F224
	0x033B2348 STP X30, X21, [X31 - 0x20]!
	0x033B234C STP X20, X19, [X31 + 0x10]
	0x033B2350 ADRP X20, 0x102B000
	0x033B2354 ADRP X21, 0xD43000
	0x033B2358 LDRB W8, [X20 + 0x194]
	0x033B235C LDR X21, [X21 + 0xC48]
	0x033B2360 MOV X19, X0
	0x033B2364 TBNZ X8, 0x0, 0x33B2388
	0x033B2368 ADRP X0, 0xD4A000
	0x033B236C LDR X0, [X0 + 0x9E8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x102C000
	007 Move X22, 0xD42000
	008 Move W8, [X21+422]
	009 Move X22, [X22+1728]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xD42000
	017 Move X0, [X0+3576]
	018 Call 0x1C17CF4
	019 Move X0, 0xD6B000
	020 Move X0, [X0+1256]
	021 Call 0x1C17CF4
	022 Move X0, 0xD42000
	023 Move X0, [X0+1728]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+422], W8
	027 Move X0, [X22]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X20
	033 Move X1, X31
	034 Move X2, X31
	035 Call Type.op_Equality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {86}
	040 Compare X20, 0
	041 JumpIfEqual {104}
	042 Move X8, [X20]
	043 Move X0, X20
	044 Move X9, [X8+1416]
	045 Move X1, [X8+1424]
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {105}
	051 Move X9, 0xD6B000
	052 Move X9, [X9+1256]
	053 Move X8, [X20]
	054 Move X0, [X9]
	055 Move W10, [X8+304]
	056 Move W9, [X0+304]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X20, X31
	059 Move X8, [X8+200]
	060 Add X8, X8, X9
	061 NotImplemented "Instruction LDUR not yet implemented."
	062 NotImplemented "Instruction CMP not yet implemented."
	063 NotImplemented "Instruction CSEL not yet implemented."
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Compare X20, 0
	069 JumpIfEqual {107}
	070 Move X8, 0xD42000
	071 Move X8, [X8+3576]
	072 Move X0, [X8]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 And X1, X19, 0xFFFF
	078 Move X0, X20
	079 Move X20, [X31+32]
	080 Move X19, [X31+40]
	081 Move X22, [X31+16]
	082 Move X21, [X31+24]
	083 Move X30, [X31+48]
	084 Call 0x1C88B50
	085 Return X0
	086 Move X0, 0xD47000
	087 Move X0, [X0+1320]
	088 Call 0x1C17D08
	089 Call 0x1C17F10
	090 Move X19, X0
	091 Move X0, 0xD7A000
	092 Move X0, [X0+960]
	093 Call 0x1C17D08
	094 Move X1, X0
	095 Move X0, X19
	096 Move X2, X31
	097 Call ArgumentNullException..ctor, X0, X1
	098 Move X0, 0xD7A000
	099 Move X0, [X0+3888]
	100 Call 0x1C17D08
	101 Move X1, X0
	102 Move X0, X19
	103 Call 0x1C17DEC
	104 Call 0x1C17F20
	105 Move X0, 0xD7A000
	106 Move X0, [X0+952]
	107 Move X0, 0xD74000
	108 Move X0, [X0+3672]
	109 Call 0x1C17D08
	110 Move X1, X31
	111 Call Environment.GetResourceString, X0
	112 Move X19, X0
	113 Move X0, 0xD4A000
	114 Move X0, [X0+1400]
	115 Call 0x1C17D08
	116 Call 0x1C17F10
	117 Move X20, X0
	118 Move X0, 0xD7A000
	119 Move X0, [X0+960]
	120 Call 0x1C17D08
	121 Move X2, X0
	122 Move X0, X20
	123 Move X1, X19
	124 Move X3, X31
	125 Call ArgumentException..ctor, X0, X1, X2
	126 Move X0, 0xD7A000
	127 Move X0, [X0+3888]
	128 Call 0x1C17D08
	129 Move X1, X0
	130 Move X0, X20
	131 Call 0x1C17DEC

Method: System.Object ToObject(System.Type enumType, System.Boolean value)

Disassembly:
	0x033B2370 BL 0x1C16CF4
	0x033B2374 ADRP X0, 0xD43000
	0x033B2378 LDR X0, [X0 + 0xC48]
	0x033B237C BL 0x1C16CF4
	0x033B2380 MOVZ W8, 0x1
	0x033B2384 STRB W8, [X20 + 0x194]
	0x033B2388 ADRP X20, 0xD4A000
	0x033B238C LDR X20, [X20 + 0x9E8]
	0x033B2390 MOV X0, X19
	0x033B2394 BL 0x1C87AE4
	0x033B2398 LDR X8, [X21]
	0x033B239C MOV X19, X0
	0x033B23A0 LDR W9, [X8 + 0xE0]
	0x033B23A4 CBNZ W9, 0x33B23B0
	0x033B23A8 MOV X0, X8
	0x033B23AC BL 0x1C16DFC
	0x033B23B0 MOV X0, X31
	0x033B23B4 BL 0x33387A0
	0x033B23B8 LDR X8, [X20]
	0x033B23BC MOV X20, X0
	0x033B23C0 LDR W9, [X8 + 0xE0]
	0x033B23C4 CBNZ W9, 0x33B23D0
	0x033B23C8 MOV X0, X8
	0x033B23CC BL 0x1C16DFC
	0x033B23D0 MOV X0, X19
	0x033B23D4 MOV X1, X20
	0x033B23D8 LDP X20, X19, [X31 + 0x10]
	0x033B23DC MOV X2, X31
	0x033B23E0 LDP X30, X21, [X31], #0x20
	0x033B23E4 B 0x331F840
	0x033B23E8 STP X30, X21, [X31 - 0x20]!
	0x033B23EC STP X20, X19, [X31 + 0x10]
	0x033B23F0 ADRP X20, 0x102B000
	0x033B23F4 ADRP X21, 0xD43000
	0x033B23F8 LDRB W8, [X20 + 0x195]
	0x033B23FC LDR X21, [X21 + 0xC48]
	0x033B2400 MOV X19, X0
	0x033B2404 TBNZ X8, 0x0, 0x33B2428
	0x033B2408 ADRP X0, 0xD4A000
	0x033B240C LDR X0, [X0 + 0x9E8]
	0x033B2410 BL 0x1C16CF4
	0x033B2414 ADRP X0, 0xD43000
	0x033B2418 LDR X0, [X0 + 0xC48]
	0x033B241C BL 0x1C16CF4
	0x033B2420 MOVZ W8, 0x1
	0x033B2424 STRB W8, [X20 + 0x195]
	0x033B2428 ADRP X20, 0xD4A000
	0x033B242C LDR X20, [X20 + 0x9E8]
	0x033B2430 MOV X0, X19
	0x033B2434 BL 0x1C87AE4
	0x033B2438 LDR X8, [X21]
	0x033B243C MOV X19, X0
	0x033B2440 LDR W9, [X8 + 0xE0]
	0x033B2444 CBNZ W9, 0x33B2450
	0x033B2448 MOV X0, X8
	0x033B244C BL 0x1C16DFC
	0x033B2450 MOV X0, X31
	0x033B2454 BL 0x33387A0
	0x033B2458 LDR X8, [X20]
	0x033B245C MOV X20, X0
	0x033B2460 LDR W9, [X8 + 0xE0]
	0x033B2464 CBNZ W9, 0x33B2470
	0x033B2468 MOV X0, X8
	0x033B246C BL 0x1C16DFC
	0x033B2470 MOV X0, X19
	0x033B2474 MOV X1, X20
	0x033B2478 LDP X20, X19, [X31 + 0x10]
	0x033B247C MOV X2, X31
	0x033B2480 LDP X30, X21, [X31], #0x20
	0x033B2484 B 0x331FD3C
	0x033B2488 STP X30, X21, [X31 - 0x20]!
	0x033B248C STP X20, X19, [X31 + 0x10]
	0x033B2490 ADRP X20, 0x102B000
	0x033B2494 ADRP X21, 0xD43000
	0x033B2498 LDRB W8, [X20 + 0x196]
	0x033B249C LDR X21, [X21 + 0xC48]
	0x033B24A0 MOV X19, X0
	0x033B24A4 TBNZ X8, 0x0, 0x33B24C8
	0x033B24A8 ADRP X0, 0xD4A000
	0x033B24AC LDR X0, [X0 + 0x9E8]
	0x033B24B0 BL 0x1C16CF4
	0x033B24B4 ADRP X0, 0xD43000
	0x033B24B8 LDR X0, [X0 + 0xC48]
	0x033B24BC BL 0x1C16CF4
	0x033B24C0 MOVZ W8, 0x1
	0x033B24C4 STRB W8, [X20 + 0x196]
	0x033B24C8 ADRP X20, 0xD4A000
	0x033B24CC LDR X20, [X20 + 0x9E8]
	0x033B24D0 MOV X0, X19
	0x033B24D4 BL 0x1C87AE4
	0x033B24D8 LDR X8, [X21]
	0x033B24DC MOV X19, X0
	0x033B24E0 LDR W9, [X8 + 0xE0]
	0x033B24E4 CBNZ W9, 0x33B24F0
	0x033B24E8 MOV X0, X8
	0x033B24EC BL 0x1C16DFC
	0x033B24F0 MOV X0, X31
	0x033B24F4 BL 0x33387A0
	0x033B24F8 LDR X8, [X20]
	0x033B24FC MOV X20, X0
	0x033B2500 LDR W9, [X8 + 0xE0]
	0x033B2504 CBNZ W9, 0x33B2510
	0x033B2508 MOV X0, X8
	0x033B250C BL 0x1C16DFC
	0x033B2510 MOV X0, X19
	0x033B2514 MOV X1, X20
	0x033B2518 LDP X20, X19, [X31 + 0x10]
	0x033B251C MOV X2, X31
	0x033B2520 LDP X30, X21, [X31], #0x20
	0x033B2524 B 0x3320284
	0x033B2528 STP X30, X21, [X31 - 0x20]!
	0x033B252C STP X20, X19, [X31 + 0x10]
	0x033B2530 ADRP X20, 0x102B000
	0x033B2534 ADRP X21, 0xD43000
	0x033B2538 LDRB W8, [X20 + 0x197]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x102C000
	007 Move X22, 0xD42000
	008 Move W8, [X21+423]
	009 Move X22, [X22+1728]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xD42000
	017 Move X0, [X0+3576]
	018 Call 0x1C17CF4
	019 Move X0, 0xD6B000
	020 Move X0, [X0+1256]
	021 Call 0x1C17CF4
	022 Move X0, 0xD42000
	023 Move X0, [X0+1728]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+423], W8
	027 Move X0, [X22]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X20
	033 Move X1, X31
	034 Move X2, X31
	035 Call Type.op_Equality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {86}
	040 Compare X20, 0
	041 JumpIfEqual {104}
	042 Move X8, [X20]
	043 Move X0, X20
	044 Move X9, [X8+1416]
	045 Move X1, [X8+1424]
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {105}
	051 Move X9, 0xD6B000
	052 Move X9, [X9+1256]
	053 Move X8, [X20]
	054 Move X0, [X9]
	055 Move W10, [X8+304]
	056 Move W9, [X0+304]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X20, X31
	059 Move X8, [X8+200]
	060 Add X8, X8, X9
	061 NotImplemented "Instruction LDUR not yet implemented."
	062 NotImplemented "Instruction CMP not yet implemented."
	063 NotImplemented "Instruction CSEL not yet implemented."
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Compare X20, 0
	069 JumpIfEqual {107}
	070 Move X8, 0xD42000
	071 Move X8, [X8+3576]
	072 Move X0, [X8]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 And X1, X19, 1
	078 Move X0, X20
	079 Move X20, [X31+32]
	080 Move X19, [X31+40]
	081 Move X22, [X31+16]
	082 Move X21, [X31+24]
	083 Move X30, [X31+48]
	084 Call 0x1C88B50
	085 Return X0
	086 Move X0, 0xD47000
	087 Move X0, [X0+1320]
	088 Call 0x1C17D08
	089 Call 0x1C17F10
	090 Move X19, X0
	091 Move X0, 0xD7A000
	092 Move X0, [X0+960]
	093 Call 0x1C17D08
	094 Move X1, X0
	095 Move X0, X19
	096 Move X2, X31
	097 Call ArgumentNullException..ctor, X0, X1
	098 Move X0, 0xD7A000
	099 Move X0, [X0+3896]
	100 Call 0x1C17D08
	101 Move X1, X0
	102 Move X0, X19
	103 Call 0x1C17DEC
	104 Call 0x1C17F20
	105 Move X0, 0xD7A000
	106 Move X0, [X0+952]
	107 Move X0, 0xD74000
	108 Move X0, [X0+3672]
	109 Call 0x1C17D08
	110 Move X1, X31
	111 Call Environment.GetResourceString, X0
	112 Move X19, X0
	113 Move X0, 0xD4A000
	114 Move X0, [X0+1400]
	115 Call 0x1C17D08
	116 Call 0x1C17F10
	117 Move X20, X0
	118 Move X0, 0xD7A000
	119 Move X0, [X0+960]
	120 Call 0x1C17D08
	121 Move X2, X0
	122 Move X0, X20
	123 Move X1, X19
	124 Move X3, X31
	125 Call ArgumentException..ctor, X0, X1, X2
	126 Move X0, 0xD7A000
	127 Move X0, [X0+3896]
	128 Call 0x1C17D08
	129 Move X1, X0
	130 Move X0, X20
	131 Call 0x1C17DEC

Method: TEnum Parse(System.String value)

Disassembly:
	0x021B1650 MOV W23, W31
	0x021B1654 CBNZ X24, 0x21B152C
	0x021B1658 B 0x21B158C
	0x021B165C MOV X19, X31
	0x021B1660 B 0x21B1668
	0x021B1664 MOV X23, X0
	0x021B1668 CBZ X24, 0x21B16CC
	0x021B166C ADRP X10, 0x1F42000
	0x021B1670 LDR X8, [X24]
	0x021B1674 LDR X10, [X10 + 0xE00]
	0x021B1678 LDRH W9, [X8 + 0x12E]
	0x021B167C LDR X1, [X10]
	0x021B1680 CBZ X9, 0x21B16A4
	0x021B1684 LDR X10, [X8 + 0xB0]
	0x021B1688 ADD X10, X10, 0x8
	0x021B168C LDUR X11, [X10 - 0x8]
	0x021B1690 CMP X11, X1
	0x021B1694 B.EQ 0x21B16B4
	0x021B1698 SUBS X9, X9, 0x1
	0x021B169C ADD X10, X10, 0x10
	0x021B16A0 B.NE 0x21B168C
	0x021B16A4 MOV X0, X24
	0x021B16A8 MOV W2, W31
	0x021B16AC BL 0x1C5C788
	0x021B16B0 B 0x21B16C0
	0x021B16B4 LDRSW X9, [X10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+56]
	005 Move X20, X1
	006 Move X19, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {17}
	009 Move X0, 0x1F43000
	010 Move X0, [X0+3576]
	011 Call 0x1C17CF4
	012 Move X8, [X20+56]
	013 Compare X8, 0
	014 JumpIfNotEqual {17}
	015 Move X0, X20
	016 Call 0x1C5D6E0
	017 Move X8, 0x1F43000
	018 Move X8, [X8+3576]
	019 Move X0, [X8]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X8, [X20+56]
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move W1, W31
	029 Move X2, [X8]
	030 Move X30, [X31+32]
	031 Call 0x21B17B0, X0, X1
	032 Return X0

Method: TEnum Parse(System.String value, System.Boolean ignoreCase)

Disassembly:
	0x021B17B0 LDR X23, [X23 + 0xE18]
	0x021B17B4 LDR X8, [X19]
	0x021B17B8 LDR X1, [X23]
	0x021B17BC LDRH W9, [X8 + 0x12E]
	0x021B17C0 CBZ X9, 0x21B17E4
	0x021B17C4 LDR X10, [X8 + 0xB0]
	0x021B17C8 ADD X10, X10, 0x8
	0x021B17CC LDUR X11, [X10 - 0x8]
	0x021B17D0 CMP X11, X1
	0x021B17D4 B.EQ 0x21B17F4
	0x021B17D8 SUBS X9, X9, 0x1
	0x021B17DC ADD X10, X10, 0x10
	0x021B17E0 B.NE 0x21B17CC
	0x021B17E4 MOV X0, X19
	0x021B17E8 MOV W2, W31
	0x021B17EC BL 0x1C5C788
	0x021B17F0 B 0x21B1800
	0x021B17F4 LDRSW X9, [X10]
	0x021B17F8 ADD X8, X8, X9, 0x4, LSL
	0x021B17FC ADD X0, X8, 0x138
	0x021B1800 LDP X8, X1, [X0]
	0x021B1804 MOV X0, X19
	0x021B1808 BLR X8
	0x021B180C MOV W22, W0
	0x021B1810 TBZ X0, 0x0, 0x21B189C
	0x021B1814 LDR X8, [X20 + 0x38]
	0x021B1818 LDR X1, [X8 + 0x18]
	0x021B181C LDRB W8, [X1 + 0x135]
	0x021B1820 TBNZ X8, 0x0, 0x21B1830
	0x021B1824 MOV X0, X1
	0x021B1828 BL 0x1C5C684
	0x021B182C MOV X1, X0
	0x021B1830 LDR X8, [X19]
	0x021B1834 LDRH W9, [X8 + 0x12E]
	0x021B1838 CBZ X9, 0x21B185C
	0x021B183C LDR X10, [X8 + 0xB0]
	0x021B1840 ADD X10, X10, 0x8
	0x021B1844 LDUR X11, [X10 - 0x8]
	0x021B1848 CMP X11, X1
	0x021B184C B.EQ 0x21B186C
	0x021B1850 SUBS X9, X9, 0x1
	0x021B1854 ADD X10, X10, 0x10
	0x021B1858 B.NE 0x21B1844
	0x021B185C MOV X0, X19
	0x021B1860 MOV W2, W31
	0x021B1864 BL 0x1C5C788
	0x021B1868 B 0x21B1878
	0x021B186C LDRSW X9, [X10]
	0x021B1870 ADD X8, X8, X9, 0x4, LSL
	0x021B1874 ADD X0, X8, 0x138
	0x021B1878 LDP X8, X1, [X0]
	0x021B187C MOV X0, X19
	0x021B1880 BLR X8
	0x021B1884 MOV W1, W0
	0x021B1888 LDR X0, [X21 + 0x40]
	0x021B188C LDR X8, [X21 + 0x18]
	0x021B1890 LDR X2, [X21 + 0x28]
	0x021B1894 BLR X8
	0x021B1898 TBNZ X0, 0x0, 0x21B17B4
	0x021B189C MOV X20, X31
	0x021B18A0 EOR W21, W22, 0x1
	0x021B18A4 CBZ X19, 0x21B1908
	0x021B18A8 ADRP X10, 0x1F42000
	0x021B18AC LDR X8, [X19]
	0x021B18B0 LDR X10, [X10 + 0xE00]
	0x021B18B4 LDRH W9, [X8 + 0x12E]
	0x021B18B8 LDR X1, [X10]
	0x021B18BC CBZ X9, 0x21B18E0
	0x021B18C0 LDR X10, [X8 + 0xB0]
	0x021B18C4 ADD X10, X10, 0x8
	0x021B18C8 LDUR X11, [X10 - 0x8]
	0x021B18CC CMP X11, X1
	0x021B18D0 B.EQ 0x21B18F0
	0x021B18D4 SUBS X9, X9, 0x1
	0x021B18D8 ADD X10, X10, 0x10
	0x021B18DC B.NE 0x21B18C8
	0x021B18E0 MOV X0, X19
	0x021B18E4 MOV W2, W31
	0x021B18E8 BL 0x1C5C788
	0x021B18EC B 0x21B18FC
	0x021B18F0 LDRSW X9, [X10]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+64], X22
	004 Move [X31+72], X21
	005 Move [X31+80], X20
	006 Move [X31+88], X19
	007 Move X8, [X2+56]
	008 Move X19, X2
	009 Move W21, W1
	010 Move X20, X0
	011 Compare X8, 0
	012 JumpIfNotEqual {25}
	013 Move X0, 0x1F43000
	014 Move X0, [X0+3576]
	015 Call 0x1C17CF4
	016 Move X0, 0x1F43000
	017 Move X0, [X0+1728]
	018 Call 0x1C17CF4
	019 Move X8, [X19+56]
	020 Compare X8, 0
	021 JumpIfNotEqual {25}
	022 Move X0, X19
	023 Call 0x1C5D6E0
	024 Move X8, [X19+56]
	025 Move [X31], X31
	026 Move X10, 0x1F43000
	027 Move X10, [X10+1728]
	028 Move W9, 1
	029 NotImplemented "Instruction MOVI not yet implemented."
	030 Move [X31+8], W9
	031 Move X0, [X10]
	032 Move [X31+9], V0
	033 Move [X31+25], V0
	034 Move [X31+40], X31
	035 Move W9, [X0+224]
	036 Move X22, [X8]
	037 Compare W9, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X22
	041 Move X1, X31
	042 Call Type.GetTypeFromHandle, X0
	043 Move X8, 0x1F43000
	044 Move X8, [X8+3576]
	045 Move X22, X0
	046 Move X8, [X8]
	047 Move W9, [X8+224]
	048 Compare W9, 0
	049 JumpIfNotEqual {52}
	050 Move X0, X8
	051 Call 0x1C17DFC
	052 And W2, W21, 1
	053 Add X3, X31, 0
	054 Move X0, X22
	055 Move X1, X20
	056 Move X4, X31
	057 Call Enum.TryParseEnum, X0, X1, X2, X3
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {89}
	062 Move X8, [X19+56]
	063 Move X19, [X31]
	064 Move X1, [X8+8]
	065 Move W8, [X1+309]
	066 Move TEMP, X8
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfEqual {73}
	070 Move X0, X1
	071 Call 0x1C5D684
	072 Move X1, X0
	073 Compare X19, 0
	074 JumpIfEqual {94}
	075 Move X8, [X19]
	076 Move X9, [X1+64]
	077 Move X0, X19
	078 Move X8, [X8+64]
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Call 0x1C17E08
	081 Move W0, [X0]
	082 Move X20, [X31+80]
	083 Move X19, [X31+88]
	084 Move X22, [X31+64]
	085 Move X21, [X31+72]
	086 Move X30, [X31+48]
	087 Add X31, X31, 96
	088 Return X0
	089 Add X0, X31, 0
	090 Move X1, X31
	091 Call EnumResult.GetEnumParseException, X0
	092 Move X1, X19
	093 Call 0x1C17DEC
	094 Call 0x1C17F20
	095 Call 0x1C181E0

Method: System.Boolean TryParse(System.Type enumType, System.String value, System.Boolean ignoreCase, out System.Object result)

Disassembly:
	0x033B3A40 LDR X0, [X22 + 0x70]
	0x033B3A44 CBZ X0, 0x33B3AC4
	0x033B3A48 LDP X3, X4, [X31 + 0x8]
	0x033B3A4C MOV X1, X22
	0x033B3A50 MOV X2, X21
	0x033B3A54 MOV X5, X31
	0x033B3A58 BL 0x32A77A8
	0x033B3A5C LDP X20, X19, [X31 + 0x70]
	0x033B3A60 LDP X22, X21, [X31 + 0x60]
	0x033B3A64 LDP X24, X23, [X31 + 0x50]
	0x033B3A68 LDP X26, X25, [X31 + 0x40]
	0x033B3A6C LDP X28, X27, [X31 + 0x30]
	0x033B3A70 LDP X29, X30, [X31 + 0x20]
	0x033B3A74 ADD X31, X31, 0x80
	0x033B3A78 RET
	0x033B3A7C ADRP X0, 0xD45000
	0x033B3A80 LDR X0, [X0 + 0x528]
	0x033B3A84 BL 0x1C16D08
	0x033B3A88 BL 0x1C16F10
	0x033B3A8C MOV X19, X0
	0x033B3A90 ADRP X0, 0xD6A000
	0x033B3A94 LDR X0, [X0 + 0x2D8]
	0x033B3A98 BL 0x1C16D08
	0x033B3A9C MOV X1, X0
	0x033B3AA0 MOV X0, X19
	0x033B3AA4 MOV X2, X31
	0x033B3AA8 BL 0x330E100
	0x033B3AAC ADRP X0, 0xD79000
	0x033B3AB0 LDR X0, [X0 + 0x8]
	0x033B3AB4 BL 0x1C16D08
	0x033B3AB8 MOV X1, X0
	0x033B3ABC MOV X0, X19
	0x033B3AC0 BL 0x1C16DEC
	0x033B3AC4 BL 0x1C16F20
	0x033B3AC8 STR X30, [X31 - 0x20]!
	0x033B3ACC STP X20, X19, [X31 + 0x10]
	0x033B3AD0 ADRP X20, 0x102A000
	0x033B3AD4 LDRB W8, [X20 + 0x1B4]
	0x033B3AD8 MOV X19, X0
	0x033B3ADC TBNZ X8, 0x0, 0x33B3AF4
	0x033B3AE0 ADRP X0, 0xD78000
	0x033B3AE4 LDR X0, [X0 + 0xF98]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+48], X30
	003 Move [X31+64], X24
	004 Move [X31+72], X23
	005 Move [X31+80], X22
	006 Move [X31+88], X21
	007 Move [X31+96], X20
	008 Move [X31+104], X19
	009 Move X24, 0x102B000
	010 Move X23, 0xD41000
	011 Move W8, [X24+424]
	012 Move X23, [X23+3576]
	013 Move X19, X3
	014 Move W22, W2
	015 Move X20, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xD41000
	022 Move X0, [X0+3576]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X24+424], W8
	026 Move [X19], X31
	027 Move X0, [X23]
	028 NotImplemented "Instruction MOVI not yet implemented."
	029 Move [X31+16], V0
	030 Move [X31+24], V0
	031 Move [X31], V0
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 And W2, W22, 1
	037 Add X3, X31, 0
	038 Move X0, X21
	039 Move X1, X20
	040 Call Enum.TryParseEnum, X0, X1, X2, X3
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {47}
	045 Move X8, [X31]
	046 Move [X19], X8
	047 Move X20, [X31+96]
	048 Move X19, [X31+104]
	049 Move X22, [X31+80]
	050 Move X21, [X31+88]
	051 Move X24, [X31+64]
	052 Move X23, [X31+72]
	053 Move X30, [X31+48]
	054 And W0, W0, 1
	055 Add X31, X31, 112
	056 Return X0

Method: System.Boolean TryParse(System.Type enumType, System.String value, out System.Object result)

Disassembly:
	0x033B3AE8 BL 0x1C16CF4
	0x033B3AEC MOVZ W8, 0x1
	0x033B3AF0 STRB W8, [X20 + 0x1B4]
	0x033B3AF4 LDR X0, [X19 + 0x70]
	0x033B3AF8 STR X31, [X19 + 0x38]
	0x033B3AFC CBZ X0, 0x33B3B14
	0x033B3B00 MOV X1, X19
	0x033B3B04 LDP X20, X19, [X31 + 0x10]
	0x033B3B08 MOV X2, X31
	0x033B3B0C LDR X30, [X31], #0x20
	0x033B3B10 B 0x32A7924
	0x033B3B14 ADRP X8, 0xD78000
	0x033B3B18 LDR X8, [X8 + 0xF98]
	0x033B3B1C LDR X0, [X8]
	0x033B3B20 BL 0x1C16F10
	0x033B3B24 MOV X1, X31
	0x033B3B28 MOV X20, X0
	0x033B3B2C BL 0x32A75A4
	0x033B3B30 STR X20, [X19 + 0x70]
	0x033B3B34 LDP X20, X19, [X31 + 0x10]
	0x033B3B38 LDR X30, [X31], #0x20
	0x033B3B3C RET
	0x033B3B40 STR X30, [X31 - 0x30]!
	0x033B3B44 STP X22, X21, [X31 + 0x10]
	0x033B3B48 STP X20, X19, [X31 + 0x20]
	0x033B3B4C ADRP X21, 0x102A000
	0x033B3B50 LDRB W8, [X21 + 0x1B5]
	0x033B3B54 MOV X20, X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x102B000
	008 Move X23, 0xD41000
	009 Move W8, [X22+425]
	010 Move X23, [X23+3576]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xD41000
	019 Move X0, [X0+3576]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+425], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X21
	029 Move X1, X20
	030 Move X3, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move W2, W31
	036 Move X30, [X31+48]
	037 Move X23, [X31+56]
	038 Call Enum.TryParse, X0, X1, X2, X3
	039 Return X0

Method: System.Void .ctor()

Disassembly:
	0x033B3B58 MOV X19, X0
	0x033B3B5C TBNZ X8, 0x0, 0x33B3B74

ISIL:
	001 Move X1, X31
	002 Call ValueType..ctor, X0
	003 Return 

Method: System.Void .cctor()

Disassembly:
	0x033B3B60 ADRP X0, 0xD72000
	0x033B3B64 LDR X0, [X0 + 0x800]
	0x033B3B68 BL 0x1C16CF4
	0x033B3B6C MOVZ W8, 0x1
	0x033B3B70 STRB W8, [X21 + 0x1B5]
	0x033B3B74 CBZ X20, 0x33B3BD8
	0x033B3B78 LDR X20, [X20 + 0x18]
	0x033B3B7C CBZ X20, 0x33B3BC0
	0x033B3B80 ADRP X22, 0xD72000
	0x033B3B84 LDR X22, [X22 + 0x800]
	0x033B3B88 MOV X0, X20
	0x033B3B8C LDR X21, [X22]
	0x033B3B90 MOV X1, X21
	0x033B3B94 BL 0x1C16E00
	0x033B3B98 CBZ X0, 0x33B3BB4
	0x033B3B9C STR X0, [X19 + 0x78]
	0x033B3BA0 LDR X21, [X22]
	0x033B3BA4 MOV X0, X20
	0x033B3BA8 MOV X1, X21
	0x033B3BAC BL 0x1C16E00
	0x033B3BB0 CBNZ X0, 0x33B3BC4
	0x033B3BB4 MOV X0, X20
	0x033B3BB8 MOV X1, X21
	0x033B3BBC BL 0x1C171E0
	0x033B3BC0 STR X31, [X19 + 0x78]
	0x033B3BC4 STP X31, X31, [X19 + 0x38]
	0x033B3BC8 LDP X20, X19, [X31 + 0x20]
	0x033B3BCC LDP X22, X21, [X31 + 0x10]
	0x033B3BD0 LDR X30, [X31], #0x30
	0x033B3BD4 RET
	0x033B3BD8 BL 0x1C16F20
	0x033B3BDC LDR W0, [X0 + 0x60]
	0x033B3BE0 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x102B000
	005 Move X20, 0xD4A000
	006 Move W8, [X19+426]
	007 Move X20, [X20+2264]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xD4A000
	013 Move X0, [X0+2264]
	014 Call 0x1C17CF4
	015 Move X0, 0xD41000
	016 Move X0, [X0+3576]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+426], W8
	020 Move X0, [X20]
	021 Move W1, 1
	022 Call 0x1C17D6C
	023 Compare X0, 0
	024 JumpIfEqual {39}
	025 Move W8, [X0+24]
	026 Compare W8, 0
	027 JumpIfEqual {40}
	028 Move X8, 0xD41000
	029 Move X8, [X8+3576]
	030 Move W9, 44
	031 NotImplemented "Instruction STRH not yet implemented."
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X8, [X8]
	035 Move X8, [X8+184]
	036 Move [X8], X0
	037 Move X30, [X31+32]
	038 Return 
	039 Call 0x1C17F20
	040 Call 0x1C17F28

