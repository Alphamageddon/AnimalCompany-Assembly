Type: System.ParamsArray

Method: System.Void .ctor(System.Object arg0)

Disassembly:
	0x0338DBA8 CMP W25, 0x0
	0x0338DBAC CSEL W8, W25, W8, GE
	0x0338DBB0 TBNZ X21, 0x6, 0x338DC04
	0x0338DBB4 AND W9, W8, 0xFFFF
	0x0338DBB8 ANDS W31, W21, 0x80
	0x0338DBBC CSEL W8, W8, W9, EQ
	0x0338DBC0 CBZ W8, 0x338DC0C
	0x0338DBC4 MOV X23, X31
	0x0338DBC8 MOVZ W9, 0x30
	0x0338DBCC MOVZ W10, 0x57
	0x0338DBD0 CMP X23, 0x42
	0x0338DBD4 B.EQ 0x338DC1C
	0x0338DBD8 UDIV W11, W8, W24
	0x0338DBDC MSUB W12, W11, W24, W8
	0x0338DBE0 CMP W12, 0x9
	0x0338DBE4 CSEL W13, W10, W9, HI
	0x0338DBE8 CMP W8, W24
	0x0338DBEC ADD W8, W13, W12
	0x0338DBF0 STRH W8, [X20, X23, LSL #1]
	0x0338DBF4 ADD X23, X23, 0x1
	0x0338DBF8 MOV W8, W11
	0x0338DBFC B.CS 0x338DBD0
	0x0338DC00 B 0x338DC20
	0x0338DC04 AND W8, W8, 0xFF
	0x0338DC08 CBNZ W8, 0x338DBC4
	0x0338DC0C MOVZ W8, 0x30
	0x0338DC10 STRH W8, [X20]
	0x0338DC14 MOVZ W23, 0x1
	0x0338DC18 B 0x338DC20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1051000
	007 Move X21, 0xD96000
	008 Move W8, [X22+15]
	009 Move X21, [X21+152]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD96000
	017 Move X0, [X0+152]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+15], W8
	021 Move [X19+8], X31
	022 Move [X19+16], X31
	023 Move [X19], X20
	024 Move X0, [X21]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X21]
	030 Move X8, [X0+184]
	031 Move X22, [X31+16]
	032 Move X21, [X31+24]
	033 Move X8, [X8]
	034 Move [X19+24], X8
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+48]
	038 Return 

Method: System.Void .ctor(System.Object arg0, System.Object arg1)

Disassembly:
	0x0338DC1C MOV W23, W31
	0x0338DC20 CMP W24, 0xA
	0x0338DC24 B.EQ 0x338DC80
	0x0338DC28 TBZ X21, 0x5, 0x338DC80
	0x0338DC2C CMP W24, 0x8
	0x0338DC30 B.EQ 0x338DC68
	0x0338DC34 CMP W24, 0x10
	0x0338DC38 B.NE 0x338DC80
	0x0338DC3C CMP W23, 0x42
	0x0338DC40 B.CS 0x338DDC8
	0x0338DC44 MOVZ W8, 0x78
	0x0338DC48 CMP W23, 0x41
	0x0338DC4C STRH W8, [X20, W23, UXTW]
	0x0338DC50 B.EQ 0x338DDC8
	0x0338DC54 ADD W8, W23, 0x1
	0x0338DC58 MOVZ W9, 0x30
	0x0338DC5C ADD W23, W23, 0x2
	0x0338DC60 STRH W9, [X20, W8, UXTW]
	0x0338DC64 B 0x338DC80
	0x0338DC68 CMP W23, 0x42
	0x0338DC6C B.CS 0x338DDC8
	0x0338DC70 ADD W8, W23, 0x1
	0x0338DC74 MOVZ W9, 0x30
	0x0338DC78 STRH W9, [X20, W23, UXTW]
	0x0338DC7C MOV W23, W8
	0x0338DC80 CMP W24, 0xA
	0x0338DC84 B.NE 0x338DCD4
	0x0338DC88 TBNZ X25, 0x1F, 0x338DCA8
	0x0338DC8C TBNZ X21, 0x4, 0x338DCBC
	0x0338DC90 TBZ X21, 0x3, 0x338DCD4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x1051000
	008 Move X22, 0xD96000
	009 Move W8, [X23+16]
	010 Move X22, [X22+152]
	011 Move X20, X2
	012 Move X21, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xD96000
	019 Move X0, [X0+152]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+16], W8
	023 Move [X19], X21
	024 Move [X19+8], X20
	025 Move [X19+16], X31
	026 Move X0, [X22]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X22]
	032 Move X8, [X0+184]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X8, [X8+8]
	036 Move [X19+24], X8
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X30, [X31+48]
	040 Move X23, [X31+56]
	041 Return 

Method: System.Void .ctor(System.Object arg0, System.Object arg1, System.Object arg2)

Disassembly:
	0x0338DC94 CMP W23, 0x42
	0x0338DC98 B.CS 0x338DDC8
	0x0338DC9C ADD W8, W23, 0x1
	0x0338DCA0 MOVZ W9, 0x20
	0x0338DCA4 B 0x338DCCC
	0x0338DCA8 CMP W23, 0x42
	0x0338DCAC B.CS 0x338DDC8
	0x0338DCB0 ADD W8, W23, 0x1
	0x0338DCB4 MOVZ W9, 0x2D
	0x0338DCB8 B 0x338DCCC
	0x0338DCBC CMP W23, 0x42
	0x0338DCC0 B.CS 0x338DDC8
	0x0338DCC4 ADD W8, W23, 0x1
	0x0338DCC8 MOVZ W9, 0x2B
	0x0338DCCC STRH W9, [X20, W23, UXTW]
	0x0338DCD0 MOV W23, W8
	0x0338DCD4 ADRP X8, 0xD66000
	0x0338DCD8 LDR X8, [X8 + 0x5A8]
	0x0338DCDC LDR X0, [X8]
	0x0338DCE0 LDR W8, [X0 + 0xE0]
	0x0338DCE4 CBNZ W8, 0x338DCEC
	0x0338DCE8 BL 0x1C16DFC
	0x0338DCEC MOV W0, W22
	0x0338DCF0 MOV W1, W23
	0x0338DCF4 MOV X2, X31
	0x0338DCF8 BL 0x337EDF0
	0x0338DCFC MOV X1, X31
	0x0338DD00 BL 0x32277A4
	0x0338DD04 CBZ X0, 0x338DE28
	0x0338DD08 MOV X22, X0
	0x0338DD0C MOV X0, X31
	0x0338DD10 BL 0x32C1424
	0x0338DD14 LDR W9, [X22 + 0x10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x1051000
	009 Move X23, 0xD96000
	010 Move W8, [X24+17]
	011 Move X23, [X23+152]
	012 Move X20, X3
	013 Move X21, X2
	014 Move X22, X1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xD96000
	021 Move X0, [X0+152]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+17], W8
	025 Move [X19], X22
	026 Move [X19+8], X21
	027 Move [X19+16], X20
	028 Move X0, [X23]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {34}
	032 Call 0x1C17DFC
	033 Move X0, [X23]
	034 Move X8, [X0+184]
	035 Move X22, [X31+32]
	036 Move X21, [X31+40]
	037 Move X24, [X31+16]
	038 Move X23, [X31+24]
	039 Move X8, [X8+16]
	040 Move [X19+24], X8
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X30, [X31+64]
	044 Return 

Method: System.Void .ctor(System.Object[] args)

Disassembly:
	0x0338DD18 ADD X8, X22, W0, SXTW
	0x0338DD1C SUB W9, W9, W23
	0x0338DD20 TBNZ X21, 0x0, 0x338DD60
	0x0338DD24 SUBS W10, W23, 0x1
	0x0338DD28 B.LT 0x338DD48
	0x0338DD2C MOV W11, W23
	0x0338DD30 CMP W10, 0x42
	0x0338DD34 B.CS 0x338DDC8
	0x0338DD38 SUBS X11, X11, 0x1
	0x0338DD3C LDRH W12, [X20, W11, UXTW]
	0x0338DD40 STRH W12, [X8], #0x2
	0x0338DD44 B.NE 0x338DD30
	0x0338DD48 CMP W9, 0x1
	0x0338DD4C B.LT 0x338DD98
	0x0338DD50 SUBS W9, W9, 0x1
	0x0338DD54 STRH W19, [X8], #0x2
	0x0338DD58 B.NE 0x338DD50
	0x0338DD5C B 0x338DD98
	0x0338DD60 CMP W9, 0x1
	0x0338DD64 B.LT 0x338DD74
	0x0338DD68 SUBS W9, W9, 0x1
	0x0338DD6C STRH W19, [X8], #0x2
	0x0338DD70 B.NE 0x338DD68
	0x0338DD74 SUBS W9, W23, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {21}
	004 Move W8, [X1+24]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X9, [X1+32]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move [X0], X9
	009 Move X9, [X1+40]
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move [X0+8], X9
	012 Move X8, [X1+48]
	013 Move [X0], X31
	014 Move X8, X31
	015 Move [X0+8], X31
	016 Move [X0+16], X8
	017 Move [X0+24], X1
	018 Move X30, [X31+16]
	019 Return 
	020 Move X8, X31
	021 Call 0x1C17F20

Method: System.Int32 get_Length()

Disassembly:
	0x0338DD78 B.LT 0x338DD98
	0x0338DD7C MOV W10, W23
	0x0338DD80 CMP W9, 0x42
	0x0338DD84 B.CS 0x338DDC8
	0x0338DD88 SUBS X10, X10, 0x1
	0x0338DD8C LDRH W11, [X20, W10, UXTW]
	0x0338DD90 STRH W11, [X8], #0x2

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+24]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Object get_Item(System.Int32 index)

Disassembly:
	0x0338DD94 B.NE 0x338DD80
	0x0338DD98 LDR X8, [X26 + 0x28]
	0x0338DD9C LDUR X9, [X29 - 0x8]
	0x0338DDA0 CMP X8, X9
	0x0338DDA4 B.NE 0x338DE2C
	0x0338DDA8 MOV X0, X22
	0x0338DDAC ADD X31, X29, 0x0
	0x0338DDB0 LDP X20, X19, [X31 + 0x40]
	0x0338DDB4 LDP X22, X21, [X31 + 0x30]
	0x0338DDB8 LDP X24, X23, [X31 + 0x20]
	0x0338DDBC LDP X26, X25, [X31 + 0x10]
	0x0338DDC0 LDP X29, X30, [X31], #0x50
	0x0338DDC4 RET
	0x0338DDC8 BL 0x1C16F28
	0x0338DDCC ADRP X0, 0xD6E000
	0x0338DDD0 LDR X0, [X0 + 0x578]
	0x0338DDD4 BL 0x1C16D08
	0x0338DDD8 BL 0x1C16F10
	0x0338DDDC MOV X19, X0
	0x0338DDE0 ADRP X0, 0xD9B000
	0x0338DDE4 LDR X0, [X0 + 0x238]
	0x0338DDE8 BL 0x1C16D08
	0x0338DDEC MOV X20, X0
	0x0338DDF0 ADRP X0, 0xD94000
	0x0338DDF4 LDR X0, [X0 + 0x730]
	0x0338DDF8 BL 0x1C16D08
	0x0338DDFC MOV X2, X0
	0x0338DE00 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1051000
	006 Move W8, [X21+18]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD96000
	014 Move X0, [X0+152]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+18], W8
	018 Compare W19, 0
	019 JumpIfEqual {33}
	020 Move X8, 0xD96000
	021 Move X8, [X8+152]
	022 Move X0, [X8]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Move W1, W19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Move X0, [X20]
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return X0

Method: System.Object GetAtSlow(System.Int32 index)

Disassembly:
	0x0338DE04 MOV X1, X20
	0x0338DE08 MOV X3, X31
	0x0338DE0C BL 0x330E16C
	0x0338DE10 ADRP X0, 0xD9E000
	0x0338DE14 LDR X0, [X0 + 0x1D0]
	0x0338DE18 BL 0x1C16D08
	0x0338DE1C MOV X1, X0
	0x0338DE20 MOV X0, X19
	0x0338DE24 BL 0x1C16DEC
	0x0338DE28 BL 0x1C16F20
	0x0338DE2C BL 0x3EB1B20
	0x0338DE30 STP X29, X30, [X31 - 0x50]!
	0x0338DE34 STP X26, X25, [X31 + 0x10]
	0x0338DE38 STP X24, X23, [X31 + 0x20]
	0x0338DE3C STP X22, X21, [X31 + 0x30]
	0x0338DE40 STP X20, X19, [X31 + 0x40]
	0x0338DE44 ADD X29, X31, 0x0
	0x0338DE48 SUB X31, X31, 0x10
	0x0338DE4C MRS X26, 0xC000
	0x0338DE50 LDR X8, [X26 + 0x28]
	0x0338DE54 ADRP X20, 0x1050000

ISIL:
	001 Move [X31-16], X30
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Add X8, X0, 8
	005 Add X8, X0, 16
	006 Move X8, [X0+24]
	007 Compare X8, 0
	008 JumpIfEqual {16}
	009 Move W9, [X8+24]
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Add X8, X8, W1
	012 Add X8, X8, 32
	013 Move X0, [X8]
	014 Move X30, [X31+16]
	015 Return X0
	016 Call 0x1C17F20
	017 Call 0x1C17F28

Method: System.Void .cctor()

Disassembly:
	0x0338DE58 MOV W21, W4
	0x0338DE5C MOV W19, W3
	0x0338DE60 STUR X8, [X29 - 0x8]
	0x0338DE64 LDRB W8, [X20 + 0x17]
	0x0338DE68 MOV W22, W2
	0x0338DE6C MOV W24, W1
	0x0338DE70 MOV X25, X0
	0x0338DE74 TBNZ X8, 0x0, 0x338DEA4
	0x0338DE78 ADRP X0, 0xD66000
	0x0338DE7C LDR X0, [X0 + 0x5A8]
	0x0338DE80 BL 0x1C16CF4
	0x0338DE84 ADRP X0, 0xD95000
	0x0338DE88 LDR X0, [X0 + 0x4E8]
	0x0338DE8C BL 0x1C16CF4
	0x0338DE90 ADRP X0, 0xD95000
	0x0338DE94 LDR X0, [X0 + 0x588]
	0x0338DE98 BL 0x1C16CF4
	0x0338DE9C MOVZ W8, 0x1
	0x0338DEA0 STRB W8, [X20 + 0x17]
	0x0338DEA4 SUB X20, X31, 0x90
	0x0338DEA8 ADD X31, X20, 0x0
	0x0338DEAC MOVZ W2, 0x86
	0x0338DEB0 MOV X0, X20
	0x0338DEB4 MOV W1, W31
	0x0338DEB8 BL 0x3EB1B10
	0x0338DEBC SUB W8, W24, 0x2
	0x0338DEC0 CMP W8, 0x23
	0x0338DEC4 B.CS 0x338E16C
	0x0338DEC8 CMP W24, 0xA
	0x0338DECC CSNEG X8, X25, X25, NE
	0x0338DED0 CMP X25, 0x0
	0x0338DED4 CSEL X8, X25, X8, GE
	0x0338DED8 TBNZ X21, 0x6, 0x338DEF4
	0x0338DEDC TBNZ X21, 0x7, 0x338DF48
	0x0338DEE0 AND X9, X8, 0x0
	0x0338DEE4 ANDS W31, W21, 0x100
	0x0338DEE8 CSEL X8, X8, X9, EQ
	0x0338DEEC CBNZ X8, 0x338DEFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1051000
	006 Move X20, 0xD67000
	007 Move X19, 0xD96000
	008 Move W8, [X21+19]
	009 Move X20, [X20+2512]
	010 Move X19, [X19+152]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xD67000
	016 Move X0, [X0+2512]
	017 Call 0x1C17CF4
	018 Move X0, 0xD96000
	019 Move X0, [X0+152]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+19], W8
	023 Move X0, [X20]
	024 Move W1, 1
	025 Call 0x1C17D6C
	026 Move X8, [X19]
	027 Move W1, 2
	028 Move X8, [X8+184]
	029 Move [X8], X0
	030 Move X0, [X20]
	031 Call 0x1C17D6C
	032 Move X8, [X19]
	033 Move W1, 3
	034 Move X8, [X8+184]
	035 Move [X8+8], X0
	036 Move X0, [X20]
	037 Call 0x1C17D6C
	038 Move X8, [X19]
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X8, [X8+184]
	042 Move [X8+16], X0
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Return 

