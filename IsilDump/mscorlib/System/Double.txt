Type: System.Double

Method: System.Boolean IsFinite(System.Double d)

Disassembly:
	0x03366EEC LDR X0, [X0 + 0x9E8]
	0x03366EF0 BL 0x1C16CF4
	0x03366EF4 MOVZ W8, 0x1
	0x03366EF8 STRB W8, [X21 + 0xEA4]
	0x03366EFC LDR X0, [X20]

ISIL:
	001 Move X8, D0
	002 Move X9, 0x7FF00000
	003 NotImplemented "Instruction BICS not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Return X0

Method: System.Boolean IsInfinity(System.Double d)

Disassembly:
	0x03366F00 LDR V8, [X19]
	0x03366F04 LDR W8, [X0 + 0xE0]
	0x03366F08 CBNZ W8, 0x3366F10
	0x03366F0C BL 0x1C16DFC
	0x03366F10 LDP X20, X19, [X31 + 0x20]
	0x03366F14 LDP X30, X21, [X31 + 0x10]

ISIL:
	001 Move X8, D0
	002 And X8, X8, 0x7FFFFFFF
	003 Move X9, 0x7FF00000
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CSET not yet implemented."
	006 Return X0

Method: System.Boolean IsNaN(System.Double d)

Disassembly:
	0x03366F18 MOV V0.16B, V8.16B
	0x03366F1C MOV X0, X31
	0x03366F20 LDR V8, [X31], #0x30
	0x03366F24 B 0x33213D0
	0x03366F28 STR D8, [X31 - 0x30]!
	0x03366F2C STP X30, X21, [X31 + 0x10]

ISIL:
	001 Move X8, D0
	002 And X8, X8, 0x7FFFFFFF
	003 Move X9, 0x7FF00000
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CSET not yet implemented."
	006 Return X0

Method: System.Boolean IsNegative(System.Double d)

Disassembly:
	0x03366F30 STP X20, X19, [X31 + 0x20]
	0x03366F34 ADRP X21, 0x1076000
	0x03366F38 ADRP X20, 0xD96000

ISIL:
	001 Move X8, D0
	002 Move X0, X8
	003 ShiftRight X0, 63
	004 And X0, X0, 0x7FFFFFFF
	005 Return X0

Method: System.Boolean IsNegativeInfinity(System.Double d)

Disassembly:
	0x03366F3C LDRB W8, [X21 + 0xEA5]
	0x03366F40 LDR X20, [X20 + 0x9E8]
	0x03366F44 MOV X19, X0
	0x03366F48 TBNZ X8, 0x0, 0x3366F60
	0x03366F4C ADRP X0, 0xD96000

ISIL:
	001 Move X8, 0xFFF00000
	002 Move D1, X8
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Return X0

Method: System.Boolean IsPositiveInfinity(System.Double d)

Disassembly:
	0x03366F50 LDR X0, [X0 + 0x9E8]
	0x03366F54 BL 0x1C16CF4
	0x03366F58 MOVZ W8, 0x1
	0x03366F5C STRB W8, [X21 + 0xEA5]
	0x03366F60 LDR X0, [X20]

ISIL:
	001 Move X8, 0x7FF00000
	002 Move D1, X8
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Return X0

Method: System.Int32 CompareTo(System.Object value)

Disassembly:
	0x03366F64 LDR V8, [X19]
	0x03366F68 LDR W8, [X0 + 0xE0]
	0x03366F6C CBNZ W8, 0x3366F74
	0x03366F70 BL 0x1C16DFC
	0x03366F74 LDP X20, X19, [X31 + 0x20]
	0x03366F78 LDP X30, X21, [X31 + 0x10]
	0x03366F7C MOV V0.16B, V8.16B
	0x03366F80 MOV X0, X31
	0x03366F84 LDR V8, [X31], #0x30
	0x03366F88 B 0x3321798
	0x03366F8C LDR V0, [X0]
	0x03366F90 RET
	0x03366F94 STR D8, [X31 - 0x30]!
	0x03366F98 STP X30, X21, [X31 + 0x10]
	0x03366F9C STP X20, X19, [X31 + 0x20]
	0x03366FA0 ADRP X21, 0x1076000
	0x03366FA4 ADRP X20, 0xD96000
	0x03366FA8 LDRB W8, [X21 + 0xEA6]
	0x03366FAC LDR X20, [X20 + 0x9E8]
	0x03366FB0 MOV X19, X0
	0x03366FB4 TBNZ X8, 0x0, 0x3366FCC
	0x03366FB8 ADRP X0, 0xD96000
	0x03366FBC LDR X0, [X0 + 0x9E8]
	0x03366FC0 BL 0x1C16CF4
	0x03366FC4 MOVZ W8, 0x1
	0x03366FC8 STRB W8, [X21 + 0xEA6]
	0x03366FCC LDR X0, [X20]
	0x03366FD0 LDR V8, [X19]
	0x03366FD4 LDR W8, [X0 + 0xE0]
	0x03366FD8 CBNZ W8, 0x3366FE0
	0x03366FDC BL 0x1C16DFC
	0x03366FE0 LDP X20, X19, [X31 + 0x20]
	0x03366FE4 LDP X30, X21, [X31 + 0x10]
	0x03366FE8 MOV V0.16B, V8.16B
	0x03366FEC MOV X0, X31
	0x03366FF0 LDR V8, [X31], #0x30
	0x03366FF4 B 0x3321F54
	0x03366FF8 STR X30, [X31 - 0x20]!
	0x03366FFC STP X20, X19, [X31 + 0x10]
	0x03367000 ADRP X0, 0xDC1000
	0x03367004 LDR X0, [X0 + 0x30]
	0x03367008 BL 0x1C16D08
	0x0336700C MOV X19, X0
	0x03367010 ADRP X0, 0xDBE000
	0x03367014 LDR X0, [X0 + 0xF0]
	0x03367018 BL 0x1C16D08
	0x0336701C MOV X20, X0
	0x03367020 ADRP X0, 0xDBE000
	0x03367024 LDR X0, [X0 + 0x98]
	0x03367028 BL 0x1C16D08
	0x0336702C MOV X2, X0
	0x03367030 MOV X0, X19
	0x03367034 MOV X1, X20
	0x03367038 MOV X3, X31
	0x0336703C BL 0x320A264
	0x03367040 MOV X19, X0
	0x03367044 ADRP X0, 0xD94000
	0x03367048 LDR X0, [X0 + 0xC08]
	0x0336704C BL 0x1C16D08
	0x03367050 BL 0x1C16F10
	0x03367054 MOV X1, X19
	0x03367058 MOV X2, X31
	0x0336705C MOV X20, X0
	0x03367060 BL 0x337B498
	0x03367064 ADRP X0, 0xDC3000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1077000
	006 Move W8, [X21+3729]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD91000
	014 Move X0, [X0+2424]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3729], W8
	018 Compare X20, 0
	019 JumpIfEqual {40}
	020 Move X8, 0xD91000
	021 Move X8, [X8+2424]
	022 Move X9, [X20]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X0, X20
	026 Call 0x1C17E08
	027 Move V0, [X0]
	028 Move V1, [X19]
	029 NotImplemented "Instruction FCMP not yet implemented."
	030 NotImplemented "Instruction FCMP not yet implemented."
	031 Move X8, D1
	032 And X9, X8, 0x7FFFFFFF
	033 Move X8, 1
	034 NotImplemented "Instruction MOVK not yet implemented."
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X9, D0
	037 And X9, X9, 0x7FFFFFFF
	038 NotImplemented "Instruction CMP not yet implemented."
	039 NotImplemented "Instruction CSINV not yet implemented."
	040 Move W0, 1
	041 Move TEMP, 0
	042 Not TEMP
	043 Move W0, TEMP
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Return X0
	049 Move W0, W31
	050 Move X0, 0xD95000
	051 Move X0, [X0+1400]
	052 Call 0x1C17D08
	053 Call 0x1C17F10
	054 Move X19, X0
	055 Move X0, 0xDC4000
	056 Move X0, [X0+2880]
	057 Call 0x1C17D08
	058 Move X1, X0
	059 Move X0, X19
	060 Move X2, X31
	061 Call ArgumentException..ctor, X0, X1
	062 Move X0, 0xDC4000
	063 Move X0, [X0+2888]
	064 Call 0x1C17D08
	065 Move X1, X0
	066 Move X0, X19
	067 Call 0x1C17DEC

Method: System.Int32 CompareTo(System.Double value)

Disassembly:
	0x03367068 LDR X0, [X0 + 0xB58]
	0x0336706C BL 0x1C16D08
	0x03367070 MOV X1, X0
	0x03367074 MOV X0, X20
	0x03367078 BL 0x1C16DEC
	0x0336707C STR X30, [X31 - 0x40]!
	0x03367080 STP X24, X23, [X31 + 0x10]
	0x03367084 STP X22, X21, [X31 + 0x20]
	0x03367088 STP X20, X19, [X31 + 0x30]
	0x0336708C ADRP X24, 0x1075000
	0x03367090 ADRP X23, 0xD8F000
	0x03367094 ADRP X22, 0xD95000
	0x03367098 LDRB W8, [X24 + 0xEA7]
	0x0336709C LDR X23, [X23 + 0x978]
	0x033670A0 LDR X22, [X22 + 0x9E8]
	0x033670A4 MOV X19, X2
	0x033670A8 MOV X20, X1
	0x033670AC MOV X21, X0
	0x033670B0 TBNZ X8, 0x0, 0x33670D4
	0x033670B4 ADRP X0, 0xD95000
	0x033670B8 LDR X0, [X0 + 0x9E8]
	0x033670BC BL 0x1C16CF4
	0x033670C0 ADRP X0, 0xD8F000

ISIL:
	001 Move V1, [X0]
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 Move TEMP, 0
	004 Not TEMP
	005 Move W0, TEMP
	006 Return X0
	007 Move W0, 1
	008 Return X0
	009 NotImplemented "Instruction FCMP not yet implemented."
	010 Move W0, W31
	011 Return X0
	012 Move X8, D1
	013 And X9, X8, 0x7FFFFFFF
	014 Move X8, 1
	015 NotImplemented "Instruction MOVK not yet implemented."
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move X9, D0
	018 And X9, X9, 0x7FFFFFFF
	019 NotImplemented "Instruction CMP not yet implemented."
	020 NotImplemented "Instruction CSINV not yet implemented."
	021 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x033670C4 LDR X0, [X0 + 0x978]
	0x033670C8 BL 0x1C16CF4
	0x033670CC MOVZ W8, 0x1
	0x033670D0 STRB W8, [X24 + 0xEA7]
	0x033670D4 LDR V0, [X21]
	0x033670D8 LDR X0, [X23]
	0x033670DC ADD X1, X31, 0x8
	0x033670E0 STR D0, [X31 + 0x8]
	0x033670E4 BL 0x1C16E04
	0x033670E8 LDR X8, [X22]
	0x033670EC MOV X21, X0
	0x033670F0 LDR W9, [X8 + 0xE0]
	0x033670F4 CBNZ W9, 0x3367100
	0x033670F8 MOV X0, X8
	0x033670FC BL 0x1C16DFC
	0x03367100 MOV X0, X21
	0x03367104 MOV X1, X20
	0x03367108 MOV X2, X19
	0x0336710C MOV X3, X31
	0x03367110 BL 0x3318718
	0x03367114 LDP X20, X19, [X31 + 0x30]
	0x03367118 LDP X22, X21, [X31 + 0x20]
	0x0336711C LDP X24, X23, [X31 + 0x10]
	0x03367120 LDR X30, [X31], #0x40
	0x03367124 RET
	0x03367128 STP X30, X21, [X31 - 0x20]!
	0x0336712C STP X20, X19, [X31 + 0x10]
	0x03367130 ADRP X20, 0x1075000
	0x03367134 ADRP X21, 0xDC3000
	0x03367138 LDRB W8, [X20 + 0xEA8]
	0x0336713C LDR X21, [X21 + 0xB60]
	0x03367140 MOV X19, X0
	0x03367144 TBNZ X8, 0x0, 0x336715C
	0x03367148 ADRP X0, 0xDC3000
	0x0336714C LDR X0, [X0 + 0xB60]
	0x03367150 BL 0x1C16CF4
	0x03367154 MOVZ W8, 0x1
	0x03367158 STRB W8, [X20 + 0xEA8]
	0x0336715C LDR X1, [X21]
	0x03367160 MOV X0, X19
	0x03367164 MOV X2, X31
	0x03367168 BL 0x33BE6D8
	0x0336716C MOVZ W8, 0x1523

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1076000
	006 Move W8, [X21+3730]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD90000
	014 Move X0, [X0+2424]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3730], W8
	018 Compare X20, 0
	019 JumpIfEqual {25}
	020 Move X8, 0xD90000
	021 Move X8, [X8+2424]
	022 Move X9, [X20]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W0, W31
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0
	031 Move X0, X20
	032 Call 0x1C17E08
	033 Move V1, [X0]
	034 Move V0, [X19]
	035 NotImplemented "Instruction FCMP not yet implemented."
	036 Move X8, D1
	037 Move X9, 1
	038 And X8, X8, 0x7FFFFFFF
	039 NotImplemented "Instruction MOVK not yet implemented."
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X8, D0
	042 And X8, X8, 0x7FFFFFFF
	043 Move X9, 0x7FF00000
	044 NotImplemented "Instruction CMP not yet implemented."
	045 NotImplemented "Instruction CSET not yet implemented."
	046 Move W0, 1

Method: System.Boolean Equals(System.Double obj)

Disassembly:
	0x03367170 MOVK W8, 0x80130000
	0x03367174 STR W8, [X19 + 0x60]
	0x03367178 LDP X20, X19, [X31 + 0x10]
	0x0336717C LDP X30, X21, [X31], #0x20
	0x03367180 RET
	0x03367184 STP X30, X19, [X31 - 0x10]!
	0x03367188 MOV X2, X31
	0x0336718C MOV X19, X0
	0x03367190 BL 0x33BE6D8
	0x03367194 MOVZ W8, 0x1523
	0x03367198 MOVK W8, 0x80130000
	0x0336719C STR W8, [X19 + 0x60]
	0x033671A0 LDP X30, X19, [X31], #0x10
	0x033671A4 RET
	0x033671A8 MOV X4, X31
	0x033671AC B 0x33BE880
	0x033671B0 MOV X1, X31
	0x033671B4 B 0x33BDD8C
	0x033671B8 STR X30, [X31 - 0x20]!

ISIL:
	001 Move V1, [X0]
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 Move W0, 1
	004 Return X0
	005 Move X8, D0
	006 Move X9, 1
	007 And X8, X8, 0x7FFFFFFF
	008 NotImplemented "Instruction MOVK not yet implemented."
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X8, D1
	011 And X8, X8, 0x7FFFFFFF
	012 Move X9, 0x7FF00000
	013 NotImplemented "Instruction CMP not yet implemented."
	014 NotImplemented "Instruction CSET not yet implemented."
	015 Return X0
	016 Move W0, W31
	017 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x033671BC STP X20, X19, [X31 + 0x10]
	0x033671C0 ADRP X19, 0x1075000
	0x033671C4 ADRP X20, 0xDB8000
	0x033671C8 LDRB W8, [X19 + 0xEA9]
	0x033671CC LDR X20, [X20 + 0x158]
	0x033671D0 TBNZ X8, 0x0, 0x33671E8
	0x033671D4 ADRP X0, 0xDB8000
	0x033671D8 LDR X0, [X0 + 0x158]

ISIL:
	001 Move X8, [X0]
	002 Subtract X9, X31, X8
	003 And X10, X8, 0x7FFFFFFFFFFFFFFF
	004 And X31, X9, 0x7FFFFFFFFFFFFFFF
	005 NotImplemented "Instruction CSEL not yet implemented."
	006 Move X9, X8
	007 ShiftRight X9, 32
	008 And X9, X9, 0x7FFFFFFF
	009 Xor W0, W9, W8
	010 Return X0

Method: System.String ToString()

Disassembly:
	0x033671DC BL 0x1C16CF4
	0x033671E0 MOVZ W8, 0x1
	0x033671E4 STRB W8, [X19 + 0xEA9]
	0x033671E8 LDR X0, [X20]
	0x033671EC BL 0x1C16F10
	0x033671F0 MOV X1, X31
	0x033671F4 MOV X19, X0
	0x033671F8 BL 0x33BDD8C
	0x033671FC LDR X8, [X20]
	0x03367200 LDR X8, [X8 + 0xB8]
	0x03367204 STR X19, [X8]
	0x03367208 LDP X20, X19, [X31 + 0x10]
	0x0336720C LDR X30, [X31], #0x20
	0x03367210 RET
	0x03367214 STR X30, [X31 - 0x30]!
	0x03367218 STP X22, X21, [X31 + 0x10]
	0x0336721C STP X20, X19, [X31 + 0x20]
	0x03367220 LDR X8, [X2 + 0x8]
	0x03367224 STP X1, X2, [X0 + 0x20]
	0x03367228 MOV X19, X0
	0x0336722C MOV X20, X2
	0x03367230 STR X8, [X0 + 0x10]
	0x03367234 LDRB W22, [X2 + 0x52]
	0x03367238 STR X0, [X0 + 0x40]
	0x0336723C MOV X0, X2
	0x03367240 MOV X21, X1
	0x03367244 BL 0x1C16D84
	0x03367248 TBZ X0, 0x0, 0x3367260
	0x0336724C CMP W22, 0x2
	0x03367250 B.NE 0x336729C
	0x03367254 ADRP X8, 0xFFFFFFFFFE852000

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1076000
	007 Move X20, 0xDC2000
	008 Move W8, [X21+3731]
	009 Move X20, [X20+120]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xDC2000
	016 Move X0, [X0+120]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3731], W8
	020 Move V8, [X19]
	021 Move X0, X31
	022 Call NumberFormatInfo.get_CurrentInfo
	023 Move X8, [X20]
	024 Move X19, X0
	025 Move W9, [X8+224]
	026 Compare W9, 0
	027 JumpIfNotEqual {30}
	028 Move X0, X8
	029 Call 0x1C17DFC
	030 Move X1, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X30, [X31+16]
	034 Move X21, [X31+24]
	035 Move V0, V8
	036 Move X0, X31
	037 Move X2, X31
	038 Move V8, [X31+48]
	039 Call Number.FormatDouble, V0, X0, X1
	040 Return X0

Method: System.String ToString(System.String format)

Disassembly:
	0x03367258 ADD X8, X8, 0x694
	0x0336725C B 0x33672E0
	0x03367260 CMP W22, 0x1
	0x03367264 B.NE 0x3367298
	0x03367268 LDRB W8, [X19 + 0x70]
	0x0336726C CBZ W8, 0x33672B0
	0x03367270 MOV X0, X20
	0x03367274 BL 0x1C16D7C
	0x03367278 MOV W21, W0
	0x0336727C MOV X0, X20
	0x03367280 BL 0x1C17238
	0x03367284 TBZ X21, 0x0, 0x33672BC
	0x03367288 TBZ X0, 0x0, 0x33672CC
	0x0336728C ADRP X8, 0xFFFFFFFFFE852000
	0x03367290 ADD X8, X8, 0x7B0
	0x03367294 B 0x33672E0
	0x03367298 CBZ X21, 0x3367300
	0x0336729C LDR X8, [X19 + 0x10]
	0x033672A0 LDR X9, [X19 + 0x20]
	0x033672A4 STR X8, [X19 + 0x18]
	0x033672A8 STR X9, [X19 + 0x40]
	0x033672AC B 0x33672E4
	0x033672B0 ADRP X8, 0xFFFFFFFFFE852000
	0x033672B4 ADD X8, X8, 0x670
	0x033672B8 B 0x33672E0
	0x033672BC TBZ X0, 0x0, 0x33672D8
	0x033672C0 ADRP X8, 0xFFFFFFFFFE852000
	0x033672C4 ADD X8, X8, 0x6D8
	0x033672C8 B 0x33672E0
	0x033672CC ADRP X8, 0xFFFFFFFFFE852000
	0x033672D0 ADD X8, X8, 0x764
	0x033672D4 B 0x33672E0
	0x033672D8 ADRP X8, 0xFFFFFFFFFE852000
	0x033672DC ADD X8, X8, 0x6A8

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x1076000
	008 Move X21, 0xDC2000
	009 Move W8, [X22+3732]
	010 Move X21, [X21+120]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xDC2000
	018 Move X0, [X0+120]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+3732], W8
	022 Move V8, [X20]
	023 Move X0, X31
	024 Call NumberFormatInfo.get_CurrentInfo
	025 Move X8, [X21]
	026 Move X20, X0
	027 Move W9, [X8+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {32}
	030 Move X0, X8
	031 Call 0x1C17DFC
	032 Move X0, X19
	033 Move X1, X20
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+8]
	039 Move V0, V8
	040 Move X2, X31
	041 Move V8, [X31+48]
	042 Call Number.FormatDouble, V0, X0, X1
	043 Return X0

Method: System.String ToString(System.IFormatProvider provider)

Disassembly:
	0x033672E0 STR X8, [X19 + 0x18]
	0x033672E4 ADRP X8, 0xFFFFFFFFFE852000
	0x033672E8 ADD X8, X8, 0x618
	0x033672EC STR X8, [X19 + 0x38]
	0x033672F0 LDP X20, X19, [X31 + 0x20]
	0x033672F4 LDP X22, X21, [X31 + 0x10]
	0x033672F8 LDR X30, [X31], #0x30
	0x033672FC RET
	0x03367300 ADRP X1, 0xFFFFFFFFFD7B4000
	0x03367304 ADD X1, X1, 0xEE3
	0x03367308 MOV X0, X31
	0x0336730C BL 0x1C16F3C
	0x03367310 MOV X1, X31
	0x03367314 BL 0x1C16DEC
	0x03367318 LDR X8, [X0 + 0x40]
	0x0336731C LDR X4, [X0 + 0x18]
	0x03367320 LDR X3, [X0 + 0x28]
	0x03367324 MOV X0, X8
	0x03367328 BR X4
	0x0336732C STP X30, X21, [X31 - 0x20]!
	0x03367330 STP X20, X19, [X31 + 0x10]
	0x03367334 ADRP X20, 0x1075000
	0x03367338 ADRP X21, 0xDC3000
	0x0336733C LDRB W8, [X20 + 0xEAA]
	0x03367340 LDR X21, [X21 + 0xB68]
	0x03367344 MOV X19, X0
	0x03367348 TBNZ X8, 0x0, 0x3367360
	0x0336734C ADRP X0, 0xDC3000
	0x03367350 LDR X0, [X0 + 0xB68]
	0x03367354 BL 0x1C16CF4
	0x03367358 MOVZ W8, 0x1
	0x0336735C STRB W8, [X20 + 0xEAA]
	0x03367360 LDR X1, [X21]
	0x03367364 MOV X0, X19
	0x03367368 MOV X2, X31

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x1076000
	008 Move X21, 0xDC2000
	009 Move W8, [X22+3733]
	010 Move X21, [X21+120]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xDC2000
	018 Move X0, [X0+120]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+3733], W8
	022 Move V8, [X20]
	023 Move X0, X19
	024 Move X1, X31
	025 Call NumberFormatInfo.GetInstance, X0
	026 Move X8, [X21]
	027 Move X19, X0
	028 Move W9, [X8+224]
	029 Compare W9, 0
	030 JumpIfNotEqual {33}
	031 Move X0, X8
	032 Call 0x1C17DFC
	033 Move X1, X19
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+8]
	039 Move V0, V8
	040 Move X0, X31
	041 Move X2, X31
	042 Move V8, [X31+48]
	043 Call Number.FormatDouble, V0, X0, X1
	044 Return X0

Method: System.String ToString(System.String format, System.IFormatProvider provider)

Disassembly:
	0x0336736C BL 0x338C8D8
	0x03367370 MOVZ W8, 0x1506
	0x03367374 MOVK W8, 0x80130000
	0x03367378 STR W8, [X19 + 0x60]
	0x0336737C LDP X20, X19, [X31 + 0x10]
	0x03367380 LDP X30, X21, [X31], #0x20
	0x03367384 RET
	0x03367388 STP X30, X19, [X31 - 0x10]!
	0x0336738C MOV X2, X31
	0x03367390 MOV X19, X0
	0x03367394 BL 0x338C8D8
	0x03367398 MOVZ W8, 0x1506
	0x0336739C MOVK W8, 0x80130000
	0x033673A0 STR W8, [X19 + 0x60]
	0x033673A4 LDP X30, X19, [X31], #0x10
	0x033673A8 RET
	0x033673AC MOV X4, X31
	0x033673B0 B 0x338CA74
	0x033673B4 STP X30, X21, [X31 - 0x20]!
	0x033673B8 STP X20, X19, [X31 + 0x10]
	0x033673BC ADRP X20, 0x1075000
	0x033673C0 ADRP X21, 0xDC3000
	0x033673C4 LDRB W8, [X20 + 0xEAB]
	0x033673C8 LDR X21, [X21 + 0xB70]
	0x033673CC MOV X19, X0
	0x033673D0 TBNZ X8, 0x0, 0x33673E8
	0x033673D4 ADRP X0, 0xDC3000
	0x033673D8 LDR X0, [X0 + 0xB70]
	0x033673DC BL 0x1C16CF4
	0x033673E0 MOVZ W8, 0x1
	0x033673E4 STRB W8, [X20 + 0xEAB]
	0x033673E8 LDR X1, [X21]
	0x033673EC MOV X0, X19
	0x033673F0 MOV X2, X31
	0x033673F4 BL 0x337F664
	0x033673F8 MOVZ W8, 0x1507

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x1076000
	009 Move X22, 0xDC2000
	010 Move W8, [X23+3734]
	011 Move X22, [X22+120]
	012 Move X20, X2
	013 Move X19, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xDC2000
	020 Move X0, [X0+120]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X23+3734], W8
	024 Move V8, [X21]
	025 Move X0, X20
	026 Move X1, X31
	027 Call NumberFormatInfo.GetInstance, X0
	028 Move X8, [X22]
	029 Move X20, X0
	030 Move W9, [X8+224]
	031 Compare W9, 0
	032 JumpIfNotEqual {35}
	033 Move X0, X8
	034 Call 0x1C17DFC
	035 Move X0, X19
	036 Move X1, X20
	037 Move X20, [X31+48]
	038 Move X19, [X31+56]
	039 Move X22, [X31+32]
	040 Move X21, [X31+40]
	041 Move X30, [X31+16]
	042 Move X23, [X31+24]
	043 Move V0, V8
	044 Move X2, X31
	045 Move V8, [X31+64]
	046 Call Number.FormatDouble, V0, X0, X1
	047 Return X0

Method: System.Boolean TryFormat(System.Span`1<System.Char> destination, out System.Int32 charsWritten, System.ReadOnlySpan`1<System.Char> format = null, System.IFormatProvider provider = null)

Disassembly:
	0x033673FC MOVK W8, 0x80130000
	0x03367400 STR W8, [X19 + 0x60]
	0x03367404 LDP X20, X19, [X31 + 0x10]
	0x03367408 LDP X30, X21, [X31], #0x20
	0x0336740C RET
	0x03367410 STP X30, X19, [X31 - 0x10]!
	0x03367414 MOV X2, X31
	0x03367418 MOV X19, X0
	0x0336741C BL 0x337F664
	0x03367420 MOVZ W8, 0x1507
	0x03367424 MOVK W8, 0x80130000
	0x03367428 STR W8, [X19 + 0x60]
	0x0336742C LDP X30, X19, [X31], #0x10
	0x03367430 RET
	0x03367434 MOV X4, X31
	0x03367438 B 0x337F688
	0x0336743C MOV X1, X31
	0x03367440 B 0x33A51F0
	0x03367444 STP X30, X21, [X31 - 0x20]!
	0x03367448 STP X20, X19, [X31 + 0x10]
	0x0336744C ADRP X20, 0x1075000
	0x03367450 ADRP X21, 0xDC3000
	0x03367454 LDRB W8, [X20 + 0xEAC]
	0x03367458 LDR X21, [X21 + 0xB78]
	0x0336745C MOV X19, X0
	0x03367460 TBNZ X8, 0x0, 0x3367478
	0x03367464 ADRP X0, 0xDC3000
	0x03367468 LDR X0, [X0 + 0xB78]
	0x0336746C BL 0x1C16CF4
	0x03367470 MOVZ W8, 0x1
	0x03367474 STRB W8, [X20 + 0xEAC]
	0x03367478 LDR X1, [X21]
	0x0336747C MOV X0, X19
	0x03367480 MOV X2, X31
	0x03367484 BL 0x338C8D8
	0x03367488 MOVZ W8, 0x1537
	0x0336748C MOVK W8, 0x80130000
	0x03367490 STR W8, [X19 + 0x60]
	0x03367494 LDP X20, X19, [X31 + 0x10]
	0x03367498 LDP X30, X21, [X31], #0x20
	0x0336749C RET
	0x033674A0 STP X30, X19, [X31 - 0x10]!
	0x033674A4 MOV X2, X31
	0x033674A8 MOV X19, X0
	0x033674AC BL 0x338C8D8
	0x033674B0 MOVZ W8, 0x1537
	0x033674B4 MOVK W8, 0x80130000
	0x033674B8 STR W8, [X19 + 0x60]

ISIL:
	001 Move [X31-96], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X27, 0x1076000
	013 Move X26, 0xDC2000
	014 Move W8, [X27+3735]
	015 Move X26, [X26+120]
	016 Move X24, X6
	017 Move X21, X5
	018 Move X23, X4
	019 Move X19, X3
	020 Move X20, X2
	021 Move X22, X1
	022 Move X25, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {32}
	027 Move X0, 0xDC2000
	028 Move X0, [X0+120]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X27+3735], W8
	032 Move V8, [X25]
	033 Move X0, X24
	034 Move X1, X31
	035 Call NumberFormatInfo.GetInstance, X0
	036 Move X8, [X26]
	037 Move X24, X0
	038 Move W9, [X8+224]
	039 Compare W9, 0
	040 JumpIfNotEqual {43}
	041 Move X0, X8
	042 Call 0x1C17DFC
	043 Move X0, X23
	044 Move X1, X21
	045 Move X2, X24
	046 Move X3, X22
	047 Move X4, X20
	048 Move X5, X19
	049 Move X20, [X31+80]
	050 Move X19, [X31+88]
	051 Move X22, [X31+64]
	052 Move X21, [X31+72]
	053 Move X24, [X31+48]
	054 Move X23, [X31+56]
	055 Move X26, [X31+32]
	056 Move X25, [X31+40]
	057 Move X30, [X31+16]
	058 Move X27, [X31+24]
	059 Move V0, V8
	060 Move X6, X31
	061 Move V8, [X31+96]
	062 Call Number.TryFormatDouble, V0, X0, X1, X2, X3
	063 Return X0

Method: System.Double Parse(System.String s)

Disassembly:
	0x033674BC LDP X30, X19, [X31], #0x10
	0x033674C0 RET
	0x033674C4 STP X30, X19, [X31 - 0x10]!
	0x033674C8 MOV X3, X31
	0x033674CC MOV X19, X0
	0x033674D0 BL 0x338C990
	0x033674D4 MOVZ W8, 0x1537
	0x033674D8 MOVK W8, 0x80130000
	0x033674DC STR W8, [X19 + 0x60]
	0x033674E0 LDP X30, X19, [X31], #0x10
	0x033674E4 RET
	0x033674E8 MOV X4, X31
	0x033674EC B 0x338CA74
	0x033674F0 LDR X8, [X0]
	0x033674F4 MOV X1, X2
	0x033674F8 LDP X3, X8, [X8 + 0x1C8]
	0x033674FC MOV X2, X8
	0x03367500 BR X3
	0x03367504 STP X30, X21, [X31 - 0x20]!
	0x03367508 STP X20, X19, [X31 + 0x10]
	0x0336750C ADRP X20, 0x1075000
	0x03367510 ADRP X21, 0xD8E000
	0x03367514 LDRB W8, [X20 + 0xEAD]
	0x03367518 LDR X21, [X21 + 0xC48]
	0x0336751C MOV X19, X0
	0x03367520 TBNZ X8, 0x0, 0x3367538
	0x03367524 ADRP X0, 0xD8E000
	0x03367528 LDR X0, [X0 + 0xC48]
	0x0336752C BL 0x1C16CF4
	0x03367530 MOVZ W8, 0x1
	0x03367534 STRB W8, [X20 + 0xEAD]
	0x03367538 LDR X0, [X21]
	0x0336753C LDR W8, [X0 + 0xE0]
	0x03367540 CBNZ W8, 0x3367548
	0x03367544 BL 0x1C16DFC
	0x03367548 MOV X0, X31
	0x0336754C BL 0x33387A0
	0x03367550 LDR X8, [X19]
	0x03367554 MOV X1, X0
	0x03367558 MOV X0, X19
	0x0336755C LDP X20, X19, [X31 + 0x10]
	0x03367560 LDP X3, X2, [X8 + 0x1C8]
	0x03367564 LDP X30, X21, [X31], #0x20
	0x03367568 BR X3
	0x0336756C MOV X1, X31
	0x03367570 B 0x33BDD8C
	0x03367574 MOV X1, X31
	0x03367578 B 0x32C01F0
	0x0336757C STR X30, [X31 - 0x30]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1076000
	006 Move W8, [X20+3736]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xDC2000
	013 Move X0, [X0+120]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3736], W8
	017 Compare X19, 0
	018 JumpIfNotEqual {22}
	019 Move W0, 48
	020 Move X1, X31
	021 Call ThrowHelper.ThrowArgumentNullException, X0
	022 Move X20, 0x1073000
	023 Move W8, [X20+1890]
	024 Compare W8, 0
	025 JumpIfNotEqual {31}
	026 Move X0, 0xDB4000
	027 Move X0, [X0+656]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+1890], W8
	031 Move X21, 0xDC2000
	032 Move X21, [X21+120]
	033 Compare X19, 0
	034 JumpIfEqual {40}
	035 Move X0, X19
	036 Move X1, X31
	037 Call String.GetRawStringData, X0
	038 Move W20, [X19+16]
	039 Move X19, X0
	040 Move X20, X31
	041 Move X0, X31
	042 Call NumberFormatInfo.get_CurrentInfo
	043 Move X8, [X21]
	044 Move X21, X0
	045 Move W9, [X8+224]
	046 Compare W9, 0
	047 JumpIfNotEqual {50}
	048 Move X0, X8
	049 Call 0x1C17DFC
	050 Move X0, X19
	051 Move X1, X20
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move W2, 231
	055 Move X3, X21
	056 Move X4, X31
	057 Move X30, [X31+32]
	058 Move X21, [X31+40]
	059 Call Number.ParseDouble, X0, X1, X2
	060 Return V0

Method: System.Double Parse(System.String s, System.IFormatProvider provider)

Disassembly:
	0x03367580 STP X22, X21, [X31 + 0x10]
	0x03367584 STP X20, X19, [X31 + 0x20]
	0x03367588 ADRP X21, 0x1075000
	0x0336758C ADRP X22, 0xDC3000
	0x03367590 LDRB W8, [X21 + 0xEAE]
	0x03367594 LDR X22, [X22 + 0xB80]
	0x03367598 MOV X19, X1
	0x0336759C MOV X20, X0
	0x033675A0 TBNZ X8, 0x0, 0x33675B8
	0x033675A4 ADRP X0, 0xDC3000
	0x033675A8 LDR X0, [X0 + 0xB80]
	0x033675AC BL 0x1C16CF4
	0x033675B0 MOVZ W8, 0x1
	0x033675B4 STRB W8, [X21 + 0xEAE]
	0x033675B8 LDR X0, [X22]
	0x033675BC BL 0x1C16F10
	0x033675C0 MOV X1, X31
	0x033675C4 MOV X21, X0
	0x033675C8 BL 0x32C01F0
	0x033675CC CBZ X21, 0x33675F8
	0x033675D0 MOV X0, X19
	0x033675D4 MOV W1, W31
	0x033675D8 MOV X2, X31
	0x033675DC STR X20, [X21 + 0x10]
	0x033675E0 BL 0x32C0780
	0x033675E4 STR X0, [X21 + 0x18]
	0x033675E8 LDP X20, X19, [X31 + 0x20]
	0x033675EC LDP X22, X21, [X31 + 0x10]
	0x033675F0 LDR X30, [X31], #0x30
	0x033675F4 RET
	0x033675F8 BL 0x1C16F20
	0x033675FC STP X30, X19, [X31 - 0x10]!
	0x03367600 MOV X19, X0
	0x03367604 STR X1, [X0 + 0x10]
	0x03367608 MOV X0, X2
	0x0336760C MOV W1, W31
	0x03367610 MOV X2, X31
	0x03367614 BL 0x32C0780
	0x03367618 STR X0, [X19 + 0x18]
	0x0336761C LDP X30, X19, [X31], #0x10
	0x03367620 RET
	0x03367624 STP X30, X21, [X31 - 0x20]!
	0x03367628 STP X20, X19, [X31 + 0x10]
	0x0336762C ADRP X20, 0x1075000
	0x03367630 LDRB W8, [X20 + 0xEAF]
	0x03367634 MOV X19, X0
	0x03367638 TBNZ X8, 0x0, 0x3367650
	0x0336763C ADRP X0, 0xD93000
	0x03367640 LDR X0, [X0 + 0xC10]
	0x03367644 BL 0x1C16CF4
	0x03367648 MOVZ W8, 0x1
	0x0336764C STRB W8, [X20 + 0xEAF]
	0x03367650 ADD X20, X19, 0x18

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1076000
	007 Move W8, [X21+3737]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDC2000
	015 Move X0, [X0+120]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3737], W8
	019 Compare X20, 0
	020 JumpIfNotEqual {24}
	021 Move W0, 48
	022 Move X1, X31
	023 Call ThrowHelper.ThrowArgumentNullException, X0
	024 Move X21, 0x1073000
	025 Move W8, [X21+1890]
	026 Compare W8, 0
	027 JumpIfNotEqual {33}
	028 Move X0, 0xDB4000
	029 Move X0, [X0+656]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+1890], W8
	033 Move X22, 0xDC2000
	034 Move X22, [X22+120]
	035 Compare X20, 0
	036 JumpIfEqual {42}
	037 Move X0, X20
	038 Move X1, X31
	039 Call String.GetRawStringData, X0
	040 Move W21, [X20+16]
	041 Move X20, X0
	042 Move X21, X31
	043 Move X0, X19
	044 Move X1, X31
	045 Call NumberFormatInfo.GetInstance, X0
	046 Move X8, [X22]
	047 Move X19, X0
	048 Move W9, [X8+224]
	049 Compare W9, 0
	050 JumpIfNotEqual {53}
	051 Move X0, X8
	052 Call 0x1C17DFC
	053 Move X0, X20
	054 Move X1, X21
	055 Move X3, X19
	056 Move X20, [X31+32]
	057 Move X19, [X31+40]
	058 Move X22, [X31+16]
	059 Move X21, [X31+24]
	060 Move W2, 231
	061 Move X4, X31
	062 Move X30, [X31+48]
	063 Call Number.ParseDouble, X0, X1, X2
	064 Return V0

Method: System.Double Parse(System.String s, System.Globalization.NumberStyles style, System.IFormatProvider provider)

Disassembly:
	0x03367654 MOV X0, X20
	0x03367658 MOV X1, X31
	0x0336765C BL 0x32C05F4
	0x03367660 MOV X1, X0
	0x03367664 CBZ X1, 0x33676B8
	0x03367668 LDR X8, [X19 + 0x10]
	0x0336766C CBZ X8, 0x33676D4
	0x03367670 LDR X0, [X8 + 0x40]
	0x03367674 LDR X9, [X8 + 0x18]
	0x03367678 LDR X2, [X8 + 0x28]
	0x0336767C BLR X9
	0x03367680 TBZ X0, 0x0, 0x33676C0
	0x03367684 MOV X0, X31
	0x03367688 BL 0x33C153C
	0x0336768C TBNZ X0, 0x0, 0x33676C0
	0x03367690 ADRP X8, 0xD93000
	0x03367694 LDR X8, [X8 + 0xC10]
	0x03367698 LDR X0, [X8]
	0x0336769C LDR W8, [X0 + 0xE0]
	0x033676A0 CBNZ W8, 0x33676A8
	0x033676A4 BL 0x1C16DFC
	0x033676A8 MOV X0, X19
	0x033676AC MOV X1, X31
	0x033676B0 BL 0x33B3F40
	0x033676B4 B 0x33676C0
	0x033676B8 MOV X0, X20
	0x033676BC BL 0x32C0794
	0x033676C0 MOV X0, X19
	0x033676C4 LDP X20, X19, [X31 + 0x10]
	0x033676C8 MOV X1, X31
	0x033676CC LDP X30, X21, [X31], #0x20
	0x033676D0 B 0x32C2928
	0x033676D4 BL 0x1C16F20
	0x033676D8 B 0x336775C
	0x033676DC B 0x336775C
	0x033676E0 B 0x336775C
	0x033676E4 B 0x33676E8
	0x033676E8 MOV X21, X1
	0x033676EC MOV X20, X0
	0x033676F0 CMP W21, 0x1
	0x033676F4 B.NE 0x3367764
	0x033676F8 MOV X0, X20
	0x033676FC BL 0x3EB1AD0
	0x03367700 MOV X20, X0
	0x03367704 ADRP X0, 0xD92000
	0x03367708 LDR X0, [X0 + 0xCC0]
	0x0336770C BL 0x1C16D08
	0x03367710 LDR X8, [X20]
	0x03367714 LDR X1, [X8]
	0x03367718 BL 0x1C17270
	0x0336771C TBZ X0, 0x0, 0x3367728
	0x03367720 BL 0x3EB1AE0
	0x03367724 B 0x3367684
	0x03367728 MOVZ W0, 0x8
	0x0336772C BL 0x3EB1AF0
	0x03367730 LDR X8, [X20]
	0x03367734 STR X8, [X0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x1076000
	008 Move W8, [X22+3738]
	009 Move X20, X2
	010 Move W19, W1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xDC2000
	017 Move X0, [X0+120]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3738], W8
	021 Move W0, W19
	022 Move X1, X31
	023 Call NumberFormatInfo.ValidateParseStyleFloatingPoint, X0
	024 Compare X21, 0
	025 JumpIfNotEqual {29}
	026 Move W0, 48
	027 Move X1, X31
	028 Call ThrowHelper.ThrowArgumentNullException, X0
	029 Move X22, 0x1073000
	030 Move W8, [X22+1890]
	031 Compare W8, 0
	032 JumpIfNotEqual {38}
	033 Move X0, 0xDB4000
	034 Move X0, [X0+656]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X22+1890], W8
	038 Move X23, 0xDC2000
	039 Move X23, [X23+120]
	040 Compare X21, 0
	041 JumpIfEqual {47}
	042 Move X0, X21
	043 Move X1, X31
	044 Call String.GetRawStringData, X0
	045 Move W21, [X21+16]
	046 Move X22, X0
	047 Move X22, X31
	048 Move X0, X20
	049 Move X1, X31
	050 Call NumberFormatInfo.GetInstance, X0
	051 Move X8, [X23]
	052 Move X20, X0
	053 Move W9, [X8+224]
	054 Compare W9, 0
	055 JumpIfNotEqual {58}
	056 Move X0, X8
	057 Call 0x1C17DFC
	058 Move X0, X22
	059 Move X1, X21
	060 Move W2, W19
	061 Move X3, X20
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X22, [X31+16]
	065 Move X21, [X31+24]
	066 Move X4, X31
	067 Move X30, [X31+48]
	068 Move X23, [X31+56]
	069 Call Number.ParseDouble, X0, X1, X2
	070 Return V0

Method: System.Boolean TryParse(System.String s, out System.Double result)

Disassembly:
	0x03367738 ADRP X1, 0xB4D000
	0x0336773C ADD X1, X1, 0xE58
	0x03367740 MOV X2, X31
	0x03367744 BL 0x3EB1B00
	0x03367748 B 0x336775C
	0x0336774C MOV X21, X1
	0x03367750 MOV X20, X0
	0x03367754 BL 0x3EB1AE0
	0x03367758 B 0x3367764
	0x0336775C MOV X21, X1
	0x03367760 MOV X20, X0
	0x03367764 CMP W21, 0x1
	0x03367768 B.NE 0x3367798
	0x0336776C MOV X0, X20
	0x03367770 BL 0x3EB1AD0
	0x03367774 LDR X21, [X0]
	0x03367778 BL 0x3EB1AE0
	0x0336777C MOV X0, X19
	0x03367780 MOV X1, X31
	0x03367784 BL 0x32C2928
	0x03367788 CBNZ X21, 0x33677A0
	0x0336778C LDP X20, X19, [X31 + 0x10]
	0x03367790 LDP X30, X21, [X31], #0x20
	0x03367794 RET
	0x03367798 MOV X21, X31
	0x0336779C B 0x33677AC
	0x033677A0 MOV X0, X21
	0x033677A4 BL 0x1C16F18
	0x033677A8 MOV X20, X0
	0x033677AC MOV X0, X19
	0x033677B0 MOV X1, X31
	0x033677B4 BL 0x32C2928

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X1
	006 Compare X0, 0
	007 JumpIfEqual {34}
	008 Move X21, 0x1073000
	009 Move W8, [X21+1890]
	010 Move X20, X0
	011 Compare W8, 0
	012 JumpIfNotEqual {18}
	013 Move X0, 0xDB4000
	014 Move X0, [X0+656]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1890], W8
	018 Move X0, X20
	019 Move X1, X31
	020 Call String.GetRawStringData, X0
	021 Move W20, [X20+16]
	022 Move X21, X0
	023 Move X0, X31
	024 Call NumberFormatInfo.get_CurrentInfo
	025 Move X1, X20
	026 Move X4, X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move W2, 231
	030 Move X3, X0
	031 Move X0, X21
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Move [X19], X31
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return X0

Method: System.Boolean TryParse(System.String s, System.Globalization.NumberStyles style, System.IFormatProvider provider, out System.Double result)

Disassembly:
	0x03367A70 CBZ X2, 0x3367A9C
	0x03367A74 MOV W8, W0
	0x03367A78 MOV X0, X2
	0x03367A7C CMP W1, 0x3
	0x03367A80 B.NE 0x3367A90
	0x03367A84 MOV W1, W8
	0x03367A88 MOV X2, X31
	0x03367A8C B 0x3326900
	0x03367A90 MOV W1, W8
	0x03367A94 MOV X2, X31
	0x03367A98 B 0x3326A00
	0x03367A9C STR X30, [X31 - 0x10]!
	0x03367AA0 BL 0x1C16F20
	0x03367AA4 STR X30, [X31 - 0x30]!
	0x03367AA8 STP X22, X21, [X31 + 0x10]
	0x03367AAC STP X20, X19, [X31 + 0x20]
	0x03367AB0 CBZ X3, 0x3367B60
	0x03367AB4 LDR X22, [X3 + 0x78]
	0x03367AB8 MOV X19, X3
	0x03367ABC CBZ X22, 0x3367B60
	0x03367AC0 LDR X8, [X22]
	0x03367AC4 MOV W21, W2
	0x03367AC8 MOV W20, W1
	0x03367ACC MOV X1, X0
	0x03367AD0 LDR X9, [X8 + 0x268]
	0x03367AD4 LDR X2, [X8 + 0x270]
	0x03367AD8 MOV X0, X22
	0x03367ADC BLR X9
	0x03367AE0 LDR X8, [X22]
	0x03367AE4 MOV W1, W0
	0x03367AE8 MOV X0, X22
	0x03367AEC LDR X9, [X8 + 0x278]
	0x03367AF0 LDR X2, [X8 + 0x280]
	0x03367AF4 BLR X9
	0x03367AF8 TBZ X0, 0x0, 0x3367B24
	0x03367AFC CMP W21, 0x3
	0x03367B00 MOV X0, X19
	0x03367B04 MOV W1, W20
	0x03367B08 LDP X20, X19, [X31 + 0x20]
	0x03367B0C LDP X22, X21, [X31 + 0x10]
	0x03367B10 CSET W3, EQ
	0x03367B14 MOVZ W2, 0x2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move W20, W1
	008 Move X22, X0
	009 Move W0, W1
	010 Move X1, X31
	011 Move X19, X3
	012 Move X21, X2
	013 Call NumberFormatInfo.ValidateParseStyleFloatingPoint, X0
	014 Compare X22, 0
	015 JumpIfEqual {46}
	016 Move X23, 0x1073000
	017 Move W8, [X23+1890]
	018 Compare W8, 0
	019 JumpIfNotEqual {25}
	020 Move X0, 0xDB4000
	021 Move X0, [X0+656]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+1890], W8
	025 Move X0, X22
	026 Move X1, X31
	027 Call String.GetRawStringData, X0
	028 Move W22, [X22+16]
	029 Move X23, X0
	030 Move X0, X21
	031 Move X1, X31
	032 Call NumberFormatInfo.GetInstance, X0
	033 Move X1, X22
	034 Move W2, W20
	035 Move X4, X19
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X3, X0
	041 Move X0, X23
	042 Move X30, [X31+48]
	043 Move X23, [X31+56]
	044 Call Double.TryParse, X0, X1, X2, X3
	045 Return X0
	046 Move [X19], X31
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move W0, W31
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: System.Boolean TryParse(System.ReadOnlySpan`1<System.Char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, out System.Double result)

Disassembly:
	0x033677B8 CBNZ X21, 0x33677C4
	0x033677BC MOV X0, X20
	0x033677C0 BL 0x1D2C690
	0x033677C4 MOV X0, X21
	0x033677C8 BL 0x1C16F18
	0x033677CC BL 0x1990590
	0x033677D0 STP X30, X23, [X31 - 0x30]!
	0x033677D4 STP X22, X21, [X31 + 0x10]
	0x033677D8 STP X20, X19, [X31 + 0x20]
	0x033677DC ADRP X22, 0x1075000
	0x033677E0 ADRP X23, 0xDC1000
	0x033677E4 LDRB W8, [X22 + 0xEB0]
	0x033677E8 LDR X23, [X23 + 0x548]
	0x033677EC MOV W19, W2
	0x033677F0 MOV W20, W1
	0x033677F4 MOV X21, X0
	0x033677F8 TBNZ X8, 0x0, 0x3367810
	0x033677FC ADRP X0, 0xDC1000
	0x03367800 LDR X0, [X0 + 0x548]
	0x03367804 BL 0x1C16CF4
	0x03367808 MOVZ W8, 0x1
	0x0336780C STRB W8, [X22 + 0xEB0]
	0x03367810 LDR X0, [X23]
	0x03367814 LDR W8, [X0 + 0xE0]
	0x03367818 CBNZ W8, 0x3367820
	0x0336781C BL 0x1C16DFC
	0x03367820 MOV X0, X21
	0x03367824 MOV W1, W20
	0x03367828 MOV W2, W19
	0x0336782C LDP X20, X19, [X31 + 0x20]
	0x03367830 LDP X22, X21, [X31 + 0x10]
	0x03367834 MOV W3, W31
	0x03367838 LDP X30, X23, [X31], #0x30
	0x0336783C B 0x3367840
	0x03367840 SUB X31, X31, 0x40
	0x03367844 STP X30, X19, [X31 + 0x30]
	0x03367848 MRS X19, 0xC000
	0x0336784C LDR X13, [X19 + 0x28]
	0x03367850 CMP W2, 0x3
	0x03367854 ADD X10, X31, 0x0
	0x03367858 MOVZ W12, 0x6667
	0x0336785C CSET W11, LT
	0x03367860 ADD X9, X10, 0x20
	0x03367864 MOV W8, W1
	0x03367868 MOVI V0.2D, 0x0
	0x0336786C MOVK W12, 0x66660000
	0x03367870 ORR W11, W11, W3, 0x0
	0x03367874 STR X13, [X31 + 0x28]
	0x03367878 MOVZ W13, 0xA
	0x0336787C MOV X1, X9
	0x03367880 STP V0, V0, [X31]
	0x03367884 SMADDL X14, X8, X12, X31
	0x03367888 UBFM X16, X14, 0x3F, 0x3F
	0x0336788C SBFM X14, X14, 0x22, 0x3F
	0x03367890 ADD W14, W14, W16
	0x03367894 ADD W15, W8, 0x9
	0x03367898 MSUB W8, W14, W13, W8
	0x0336789C ADD W8, W8, 0x30
	0x033678A0 CMP W15, 0x13
	0x033678A4 STRH W8, [X1 - 0x2]!
	0x033678A8 B.CC 0x33678B8
	0x033678AC CMP X1, X10
	0x033678B0 MOV W8, W14
	0x033678B4 B.HI 0x3367884
	0x033678B8 ANDS W31, W11, 0x1
	0x033678BC MOVZ W8, 0x2
	0x033678C0 SUB X9, X9, X1
	0x033678C4 CSEL W8, W2, W8, NE
	0x033678C8 CMP X9, 0x0
	0x033678CC CINC X9, X9, LT
	0x033678D0 UBFM X2, X9, 0x1, 0x3F
	0x033678D4 CMP W8, W2
	0x033678D8 B.LE 0x3367908
	0x033678DC ADD X9, X31, 0x0
	0x033678E0 CMP X1, X9
	0x033678E4 B.LS 0x3367908
	0x033678E8 MOVZ W9, 0x30
	0x033678EC ADD X10, X31, 0x0
	0x033678F0 ADD W2, W2, 0x1
	0x033678F4 CMP W2, W8
	0x033678F8 STRH W9, [X1 - 0x2]!
	0x033678FC B.GE 0x3367908
	0x03367900 CMP X1, X10
	0x03367904 B.HI 0x33678F0
	0x03367908 CBZ X0, 0x3367930
	0x0336790C MOV X3, X31
	0x03367910 BL 0x3233290
	0x03367914 LDR X8, [X19 + 0x28]
	0x03367918 LDR X9, [X31 + 0x28]
	0x0336791C CMP X8, X9
	0x03367920 B.NE 0x3367934
	0x03367924 LDP X30, X19, [X31 + 0x30]
	0x03367928 ADD X31, X31, 0x40
	0x0336792C RET
	0x03367930 BL 0x1C16F20
	0x03367934 BL 0x3EB1B20
	0x03367938 STR X30, [X31 - 0x30]!
	0x0336793C STP X22, X21, [X31 + 0x10]
	0x03367940 STP X20, X19, [X31 + 0x20]
	0x03367944 ADRP X21, 0x1075000
	0x03367948 ADRP X22, 0xDC1000
	0x0336794C LDRB W8, [X21 + 0xEB1]
	0x03367950 LDR X22, [X22 + 0x4E8]
	0x03367954 MOV W20, W1
	0x03367958 MOV X19, X0
	0x0336795C TBNZ X8, 0x0, 0x3367974
	0x03367960 ADRP X0, 0xDC1000
	0x03367964 LDR X0, [X0 + 0x4E8]
	0x03367968 BL 0x1C16CF4
	0x0336796C MOVZ W8, 0x1
	0x03367970 STRB W8, [X21 + 0xEB1]
	0x03367974 LDR X0, [X22]
	0x03367978 LDR W8, [X0 + 0xE0]
	0x0336797C CBNZ W8, 0x3367984
	0x03367980 BL 0x1C16DFC
	0x03367984 MOV W0, W20
	0x03367988 MOV X1, X31
	0x0336798C BL 0x332B038
	0x03367990 CBZ X19, 0x33679B0
	0x03367994 MOV X1, X0
	0x03367998 MOV X0, X19
	0x0336799C LDP X20, X19, [X31 + 0x20]
	0x033679A0 LDP X22, X21, [X31 + 0x10]
	0x033679A4 MOV X2, X31
	0x033679A8 LDR X30, [X31], #0x30
	0x033679AC B 0x32333E0
	0x033679B0 BL 0x1C16F20
	0x033679B4 STP X30, X23, [X31 - 0x30]!
	0x033679B8 STP X22, X21, [X31 + 0x10]
	0x033679BC STP X20, X19, [X31 + 0x20]
	0x033679C0 ADRP X23, 0x1075000
	0x033679C4 LDRB W8, [X23 + 0xEB2]
	0x033679C8 MOV W20, W3
	0x033679CC MOV W19, W2
	0x033679D0 MOV X21, X1
	0x033679D4 MOV X22, X0
	0x033679D8 TBNZ X8, 0x0, 0x33679F0
	0x033679DC ADRP X0, 0xDBB000
	0x033679E0 LDR X0, [X0 + 0x28]
	0x033679E4 BL 0x1C16CF4
	0x033679E8 MOVZ W8, 0x1
	0x033679EC STRB W8, [X23 + 0xEB2]
	0x033679F0 ADD W8, W19, 0x1
	0x033679F4 CMP W8, W21
	0x033679F8 CSINC W9, W21, W19, LE
	0x033679FC MOV W8, W19
	0x03367A00 ADD W8, W8, 0x1
	0x03367A04 CMP W8, W21
	0x03367A08 B.GE 0x3367A20
	0x03367A0C B.CS 0x3367A38
	0x03367A10 LDRH W10, [X22, W8, SXTW]
	0x03367A14 CMP W10, W20, UXTH
	0x03367A18 B.EQ 0x3367A00
	0x03367A1C B 0x3367A24
	0x03367A20 MOV W8, W9
	0x03367A24 SUB W0, W8, W19
	0x03367A28 LDP X20, X19, [X31 + 0x20]
	0x03367A2C LDP X22, X21, [X31 + 0x10]
	0x03367A30 LDP X30, X23, [X31], #0x30
	0x03367A34 RET
	0x03367A38 BL 0x1C16F28
	0x03367A3C CBZ X2, 0x3367A68
	0x03367A40 MOV W8, W0
	0x03367A44 MOV X0, X2
	0x03367A48 CMP W1, 0x3
	0x03367A4C B.NE 0x3367A5C
	0x03367A50 MOV W1, W8
	0x03367A54 MOV X2, X31
	0x03367A58 B 0x3326010
	0x03367A5C MOV W1, W8
	0x03367A60 MOV X2, X31
	0x03367A64 B 0x3326804
	0x03367A68 STR X30, [X31 - 0x10]!
	0x03367A6C BL 0x1C16F20

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0x1076000
	011 Move X24, 0xDC2000
	012 Move W8, [X25+3739]
	013 Move X24, [X24+120]
	014 Move X19, X4
	015 Move X22, X3
	016 Move W23, W2
	017 Move X20, X1
	018 Move X21, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0xDC2000
	024 Move X0, [X0+120]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X25+3739], W8
	028 Move X0, [X24]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X21
	034 Move X1, X20
	035 Move W2, W23
	036 Move X3, X22
	037 Move X4, X19
	038 Move X5, X31
	039 Call Number.TryParseDouble, X0, X1, X2, X3
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfEqual {193}
	044 Move X0, X21
	045 Move X1, X20
	046 Move X2, X31
	047 Call MemoryExtensions.Trim, X0
	048 Compare X22, 0
	049 JumpIfEqual {205}
	050 Move X26, 0x1073000
	051 Move W8, [X26+1890]
	052 Move X23, [X22+112]
	053 Move X20, X0
	054 Move X21, X1
	055 Compare W8, 0
	056 JumpIfEqual {64}
	057 Compare X23, 0
	058 JumpIfEqual {71}
	059 Move X0, X23
	060 Move X1, X31
	061 Call String.GetRawStringData, X0
	062 Move W23, [X23+16]
	063 Move X24, X0
	064 Move X0, 0xDB4000
	065 Move X0, [X0+656]
	066 Call 0x1C17CF4
	067 Move W8, 1
	068 Move [X26+1890], W8
	069 Compare X23, 0
	070 JumpIfNotEqual {59}
	071 Move X24, X31
	072 Move X25, 0x1076000
	073 Move W8, [X25+3334]
	074 Compare W8, 0
	075 JumpIfNotEqual {84}
	076 Move X0, 0xDB4000
	077 Move X0, [X0+720]
	078 Call 0x1C17CF4
	079 Move X0, 0xDBC000
	080 Move X0, [X0+40]
	081 Call 0x1C17CF4
	082 Move W8, 1
	083 Move [X25+3334], W8
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Compare W21, 0
	086 JumpIfEqual {99}
	087 Move X8, 0xDB4000
	088 Move X8, [X8+720]
	089 Move X0, X20
	090 Move X1, X21
	091 Move X2, X24
	092 Move X4, [X8]
	093 Move X3, X23
	094 Call 0x1F97ECC
	095 Move TEMP, X0
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 JumpIfNotEqual {100}
	099 Move X8, 0x7FF00000
	100 Move W8, [X26+1890]
	101 Move X23, [X22+120]
	102 Compare W8, 0
	103 JumpIfEqual {111}
	104 Compare X23, 0
	105 JumpIfEqual {118}
	106 Move X0, X23
	107 Move X1, X31
	108 Call String.GetRawStringData, X0
	109 Move W23, [X23+16]
	110 Move X24, X0
	111 Move X0, 0xDB4000
	112 Move X0, [X0+656]
	113 Call 0x1C17CF4
	114 Move W8, 1
	115 Move [X26+1890], W8
	116 Compare X23, 0
	117 JumpIfNotEqual {106}
	118 Move X24, X31
	119 Move W8, [X25+3334]
	120 Compare W8, 0
	121 JumpIfNotEqual {130}
	122 Move X0, 0xDB4000
	123 Move X0, [X0+720]
	124 Call 0x1C17CF4
	125 Move X0, 0xDBC000
	126 Move X0, [X0+40]
	127 Call 0x1C17CF4
	128 Move W8, 1
	129 Move [X25+3334], W8
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Compare W21, 0
	132 JumpIfEqual {145}
	133 Move X8, 0xDB4000
	134 Move X8, [X8+720]
	135 Move X0, X20
	136 Move X1, X21
	137 Move X2, X24
	138 Move X4, [X8]
	139 Move X3, X23
	140 Call 0x1F97ECC
	141 Move TEMP, X0
	142 And TEMP, TEMP, 1
	143 Compare TEMP, 1
	144 JumpIfNotEqual {146}
	145 Move X8, 0xFFF00000
	146 Move W8, [X26+1890]
	147 Move X22, [X22+104]
	148 Compare W8, 0
	149 JumpIfEqual {157}
	150 Compare X22, 0
	151 JumpIfEqual {164}
	152 Move X0, X22
	153 Move X1, X31
	154 Call String.GetRawStringData, X0
	155 Move W22, [X22+16]
	156 Move X23, X0
	157 Move X0, 0xDB4000
	158 Move X0, [X0+656]
	159 Call 0x1C17CF4
	160 Move W8, 1
	161 Move [X26+1890], W8
	162 Compare X22, 0
	163 JumpIfNotEqual {152}
	164 Move X23, X31
	165 Move W8, [X25+3334]
	166 Compare W8, 0
	167 JumpIfNotEqual {176}
	168 Move X0, 0xDB4000
	169 Move X0, [X0+720]
	170 Call 0x1C17CF4
	171 Move X0, 0xDBC000
	172 Move X0, [X0+40]
	173 Call 0x1C17CF4
	174 Move W8, 1
	175 Move [X25+3334], W8
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Compare W21, 0
	178 JumpIfEqual {191}
	179 Move X8, 0xDB4000
	180 Move X8, [X8+720]
	181 Move X0, X20
	182 Move X1, X21
	183 Move X2, X23
	184 Move X4, [X8]
	185 Move X3, X22
	186 Call 0x1F97ECC
	187 Move TEMP, X0
	188 And TEMP, TEMP, 1
	189 Compare TEMP, 1
	190 JumpIfNotEqual {204}
	191 Move X8, 0x7FF80000
	192 Move [X19], X8
	193 Move W0, 1
	194 Move X20, [X31+64]
	195 Move X19, [X31+72]
	196 Move X22, [X31+48]
	197 Move X21, [X31+56]
	198 Move X24, [X31+32]
	199 Move X23, [X31+40]
	200 Move X26, [X31+16]
	201 Move X25, [X31+24]
	202 Move X30, [X31+80]
	203 Return X0
	204 Move W0, W31
	205 Call 0x1C17F20

Method: System.TypeCode GetTypeCode()

Disassembly:
	0x03367B18 MOV X4, X31
	0x03367B1C LDR X30, [X31], #0x30

ISIL:
	001 Move W0, 14
	002 Return X0

Method: System.Boolean System.IConvertible.ToBoolean(System.IFormatProvider provider)

Disassembly:
	0x03367B20 B 0x3325DC8
	0x03367B24 CMP W20, 0x6
	0x03367B28 CINC W1, W20, GT
	0x03367B2C MOV X0, X19
	0x03367B30 CMP W21, 0x3
	0x03367B34 B.NE 0x3367B4C
	0x03367B38 LDP X20, X19, [X31 + 0x20]
	0x03367B3C LDP X22, X21, [X31 + 0x10]
	0x03367B40 MOV X2, X31
	0x03367B44 LDR X30, [X31], #0x30
	0x03367B48 B 0x3326900
	0x03367B4C LDP X20, X19, [X31 + 0x20]
	0x03367B50 LDP X22, X21, [X31 + 0x10]
	0x03367B54 MOV X2, X31
	0x03367B58 LDR X30, [X31], #0x30
	0x03367B5C B 0x3326A00
	0x03367B60 BL 0x1C16F20
	0x03367B64 STR X30, [X31 - 0x40]!
	0x03367B68 STP X24, X23, [X31 + 0x10]
	0x03367B6C STP X22, X21, [X31 + 0x20]
	0x03367B70 STP X20, X19, [X31 + 0x30]
	0x03367B74 ADRP X23, 0x1075000
	0x03367B78 LDRB W8, [X23 + 0xEB3]
	0x03367B7C MOV X20, X3
	0x03367B80 MOV W19, W2

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1076000
	007 Move X20, 0xD96000
	008 Move W8, [X21+3740]
	009 Move X20, [X20+2536]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xD96000
	016 Move X0, [X0+2536]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3740], W8
	020 Move X0, [X20]
	021 Move V8, [X19]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X30, [X31+16]
	029 Move X21, [X31+24]
	030 Move V0, V8
	031 Move X0, X31
	032 Move V8, [X31+48]
	033 Call Convert.ToBoolean, V0
	034 Return X0

Method: System.Char System.IConvertible.ToChar(System.IFormatProvider provider)

Disassembly:
	0x03367B84 MOV X21, X1
	0x03367B88 MOV X22, X0
	0x03367B8C TBNZ X8, 0x0, 0x3367BA4
	0x03367B90 ADRP X0, 0xDBB000
	0x03367B94 LDR X0, [X0 + 0x28]
	0x03367B98 BL 0x1C16CF4
	0x03367B9C MOVZ W8, 0x1
	0x03367BA0 STRB W8, [X23 + 0xEB3]
	0x03367BA4 CMP W21, W19
	0x03367BA8 B.LS 0x3367C30
	0x03367BAC LDRH W23, [X22, W19, SXTW]
	0x03367BB0 ADD W24, W19, 0x1
	0x03367BB4 CMP W24, W21
	0x03367BB8 B.GE 0x3367C34
	0x03367BBC CMP W24, W21
	0x03367BC0 B.CS 0x3367C30
	0x03367BC4 SXTW X8, W24
	0x03367BC8 LDRH W1, [X22, X8, LSL #1]
	0x03367BCC ADD X24, X8, 0x1
	0x03367BD0 CMP W1, W23
	0x03367BD4 B.EQ 0x3367C18
	0x03367BD8 CMP W1, 0x5C
	0x03367BDC B.NE 0x3367C04
	0x03367BE0 CMP W24, W21
	0x03367BE4 B.GE 0x3367CC8
	0x03367BE8 CMP W24, W21
	0x03367BEC B.CS 0x3367C30
	0x03367BF0 CBZ X20, 0x3367CC4
	0x03367BF4 LDRH W1, [X22, X24, LSL #1]
	0x03367BF8 ADD W8, W8, 0x2
	0x03367BFC MOV W24, W8
	0x03367C00 B 0x3367C08
	0x03367C04 CBZ X20, 0x3367CC4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0xDC2000
	005 Move X0, [X0+48]
	006 Call 0x1C17D08
	007 Move X19, X0
	008 Move X0, 0xDBF000
	009 Move X0, [X0+240]
	010 Call 0x1C17D08
	011 Move X20, X0
	012 Move X0, 0xDBF000
	013 Move X0, [X0+224]
	014 Call 0x1C17D08
	015 Move X2, X0
	016 Move X0, X19
	017 Move X1, X20
	018 Move X3, X31
	019 Call SR.Format, X0, X1, X2
	020 Move X19, X0
	021 Move X0, 0xD95000
	022 Move X0, [X0+3080]
	023 Call 0x1C17D08
	024 Call 0x1C17F10
	025 Move X1, X19
	026 Move X2, X31
	027 Move X20, X0
	028 Call InvalidCastException..ctor, X0, X1
	029 Move X0, 0xDC4000
	030 Move X0, [X0+2896]
	031 Call 0x1C17D08
	032 Move X1, X0
	033 Move X0, X20
	034 Call 0x1C17DEC

Method: System.SByte System.IConvertible.ToSByte(System.IFormatProvider provider)

Disassembly:
	0x03367C08 MOV X0, X20
	0x03367C0C MOV X2, X31
	0x03367C10 BL 0x3233D30
	0x03367C14 B 0x3367BB4
	0x03367C18 SUB W0, W24, W19
	0x03367C1C LDP X20, X19, [X31 + 0x30]
	0x03367C20 LDP X22, X21, [X31 + 0x20]
	0x03367C24 LDP X24, X23, [X31 + 0x10]
	0x03367C28 LDR X30, [X31], #0x40
	0x03367C2C RET
	0x03367C30 BL 0x1C16F28
	0x03367C34 ADRP X0, 0xD8E000
	0x03367C38 LDR X0, [X0 + 0xC48]
	0x03367C3C BL 0x1C16D08
	0x03367C40 BL 0x19903D0
	0x03367C44 MOV X0, X31
	0x03367C48 BL 0x33387A0
	0x03367C4C MOV X19, X0
	0x03367C50 STRH W23, [X31 + 0xC]
	0x03367C54 ADRP X0, 0xD8E000
	0x03367C58 LDR X0, [X0 + 0x170]
	0x03367C5C BL 0x1C16D08
	0x03367C60 ADD X1, X31, 0xC
	0x03367C64 BL 0x1C16E04
	0x03367C68 MOV X20, X0

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1076000
	007 Move X20, 0xD96000
	008 Move W8, [X21+3741]
	009 Move X20, [X20+2536]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xD96000
	016 Move X0, [X0+2536]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3741], W8
	020 Move X0, [X20]
	021 Move V8, [X19]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X30, [X31+16]
	029 Move X21, [X31+24]
	030 Move V0, V8
	031 Move X0, X31
	032 Move V8, [X31+48]
	033 Call Convert.ToSByte, V0
	034 Return X0

Method: System.Byte System.IConvertible.ToByte(System.IFormatProvider provider)

Disassembly:
	0x03367C6C ADRP X0, 0xDC1000
	0x03367C70 LDR X0, [X0 + 0x590]
	0x03367C74 BL 0x1C16D08
	0x03367C78 MOV X1, X0
	0x03367C7C MOV X0, X19
	0x03367C80 MOV X2, X20
	0x03367C84 MOV X3, X31
	0x03367C88 BL 0x3227D04
	0x03367C8C MOV X19, X0
	0x03367C90 ADRP X0, 0xDB9000
	0x03367C94 LDR X0, [X0 + 0xC08]
	0x03367C98 BL 0x1C16D08
	0x03367C9C BL 0x1C16F10
	0x03367CA0 MOV X1, X19
	0x03367CA4 MOV X20, X0
	0x03367CA8 BL 0x33674A0
	0x03367CAC ADRP X0, 0xDC3000
	0x03367CB0 LDR X0, [X0 + 0xB88]
	0x03367CB4 BL 0x1C16D08
	0x03367CB8 MOV X1, X0
	0x03367CBC MOV X0, X20
	0x03367CC0 BL 0x1C16DEC
	0x03367CC4 BL 0x1C16F20
	0x03367CC8 ADRP X0, 0xDB9000
	0x03367CCC LDR X0, [X0 + 0xC08]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1076000
	007 Move X20, 0xD96000
	008 Move W8, [X21+3742]
	009 Move X20, [X20+2536]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xD96000
	016 Move X0, [X0+2536]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3742], W8
	020 Move X0, [X20]
	021 Move V8, [X19]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X30, [X31+16]
	029 Move X21, [X31+24]
	030 Move V0, V8
	031 Move X0, X31
	032 Move V8, [X31+48]
	033 Call Convert.ToByte, V0
	034 Return X0

Method: System.Int16 System.IConvertible.ToInt16(System.IFormatProvider provider)

Disassembly:
	0x03367CD0 BL 0x1C16D08
	0x03367CD4 BL 0x1C16F10
	0x03367CD8 MOV X19, X0
	0x03367CDC ADRP X0, 0xDBB000
	0x03367CE0 LDR X0, [X0 + 0x618]
	0x03367CE4 BL 0x1C16D08
	0x03367CE8 MOV X1, X0
	0x03367CEC MOV X0, X19
	0x03367CF0 BL 0x33674A0
	0x03367CF4 ADRP X0, 0xDC3000
	0x03367CF8 LDR X0, [X0 + 0xB88]
	0x03367CFC BL 0x1C16D08
	0x03367D00 MOV X1, X0
	0x03367D04 MOV X0, X19
	0x03367D08 BL 0x1C16DEC
	0x03367D0C STR X30, [X31 - 0x30]!
	0x03367D10 STP X22, X21, [X31 + 0x10]
	0x03367D14 STP X20, X19, [X31 + 0x20]
	0x03367D18 ADRP X22, 0x1075000
	0x03367D1C LDRB W8, [X22 + 0xEB4]
	0x03367D20 MOV W21, W2
	0x03367D24 MOV X20, X1
	0x03367D28 MOV X19, X0
	0x03367D2C TBNZ X8, 0x0, 0x3367D44
	0x03367D30 ADRP X0, 0xDBB000

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1076000
	007 Move X20, 0xD96000
	008 Move W8, [X21+3743]
	009 Move X20, [X20+2536]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xD96000
	016 Move X0, [X0+2536]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3743], W8
	020 Move X0, [X20]
	021 Move V8, [X19]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X30, [X31+16]
	029 Move X21, [X31+24]
	030 Move V0, V8
	031 Move X0, X31
	032 Move V8, [X31+48]
	033 Call Convert.ToInt16, V0
	034 Return X0

Method: System.UInt16 System.IConvertible.ToUInt16(System.IFormatProvider provider)

Disassembly:
	0x03367D34 LDR X0, [X0 + 0x28]
	0x03367D38 BL 0x1C16CF4
	0x03367D3C MOVZ W8, 0x1
	0x03367D40 STRB W8, [X22 + 0xEB4]
	0x03367D44 SUB W8, W20, 0x1
	0x03367D48 CMP W8, W21
	0x03367D4C B.LE 0x3367D64
	0x03367D50 ADD W8, W21, 0x1
	0x03367D54 CMP W8, W20
	0x03367D58 B.CS 0x3367D78
	0x03367D5C LDRH W0, [X19, W8, SXTW]
	0x03367D60 B 0x3367D68
	0x03367D64 MOVN W0, 0x0
	0x03367D68 LDP X20, X19, [X31 + 0x20]
	0x03367D6C LDP X22, X21, [X31 + 0x10]
	0x03367D70 LDR X30, [X31], #0x30
	0x03367D74 RET
	0x03367D78 BL 0x1C16F28
	0x03367D7C STR X30, [X31 - 0x40]!
	0x03367D80 STP X24, X23, [X31 + 0x10]
	0x03367D84 STP X22, X21, [X31 + 0x20]
	0x03367D88 STP X20, X19, [X31 + 0x30]
	0x03367D8C ADRP X24, 0x1075000
	0x03367D90 LDRB W8, [X24 + 0xEB5]
	0x03367D94 MOV W19, W4

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1076000
	007 Move X20, 0xD96000
	008 Move W8, [X21+3744]
	009 Move X20, [X20+2536]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xD96000
	016 Move X0, [X0+2536]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3744], W8
	020 Move X0, [X20]
	021 Move V8, [X19]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X30, [X31+16]
	029 Move X21, [X31+24]
	030 Move V0, V8
	031 Move X0, X31
	032 Move V8, [X31+48]
	033 Call Convert.ToUInt16, V0
	034 Return X0

Method: System.Int32 System.IConvertible.ToInt32(System.IFormatProvider provider)

Disassembly:
	0x03367D98 MOV W22, W3
	0x03367D9C MOV W23, W2
	0x03367DA0 MOV X20, X1
	0x03367DA4 MOV X21, X0
	0x03367DA8 TBNZ X8, 0x0, 0x3367DC0
	0x03367DAC ADRP X0, 0xDBB000
	0x03367DB0 LDR X0, [X0 + 0x28]
	0x03367DB4 BL 0x1C16CF4
	0x03367DB8 MOVZ W8, 0x1
	0x03367DBC STRB W8, [X24 + 0xEB5]
	0x03367DC0 MOV W8, W23
	0x03367DC4 SUBS W8, W8, 0x1
	0x03367DC8 B.MI 0x3367E24
	0x03367DCC CMP W8, W20
	0x03367DD0 B.CS 0x3367ED0
	0x03367DD4 LDRH W9, [X21, W8, UXTW]
	0x03367DD8 CMP W9, W19, UXTH
	0x03367DDC B.NE 0x3367DC4
	0x03367DE0 SUBS W10, W8, 0x1
	0x03367DE4 B.MI 0x3367EB8
	0x03367DE8 MOV W9, W31
	0x03367DEC MOV W11, W8
	0x03367DF0 MOV W12, W10
	0x03367DF4 CMP W10, W20
	0x03367DF8 B.CS 0x3367ED0

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1076000
	007 Move X20, 0xD96000
	008 Move W8, [X21+3745]
	009 Move X20, [X20+2536]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xD96000
	016 Move X0, [X0+2536]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3745], W8
	020 Move X0, [X20]
	021 Move V8, [X19]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X30, [X31+16]
	029 Move X21, [X31+24]
	030 Move V0, V8
	031 Move X0, X31
	032 Move V8, [X31+48]
	033 Call Convert.ToInt32, V0
	034 Return X0

Method: System.UInt32 System.IConvertible.ToUInt32(System.IFormatProvider provider)

Disassembly:
	0x03367DFC LDRH W13, [X21, W12, UXTW]
	0x03367E00 CMP W13, W19, UXTH
	0x03367E04 B.NE 0x3367E1C
	0x03367E08 ADD W9, W9, 0x1
	0x03367E0C SUBS W11, W11, 0x1
	0x03367E10 SUB W12, W12, 0x1
	0x03367E14 B.NE 0x3367DF4
	0x03367E18 MOV W9, W8
	0x03367E1C CMP W9, 0x2
	0x03367E20 B.LT 0x3367EB8
	0x03367E24 ADD W10, W22, W23
	0x03367E28 CMP W10, W20
	0x03367E2C B.GE 0x3367EB0
	0x03367E30 CSEL W9, W10, W20, HI
	0x03367E34 ADD W8, W10, 0x1
	0x03367E38 SUB W9, W31, W9
	0x03367E3C ADD X10, X21, W10, 0x1, SXTW
	0x03367E40 ADD W11, W9, W8
	0x03367E44 CMP W11, 0x1
	0x03367E48 B.EQ 0x3367ED0
	0x03367E4C LDRH W11, [X10]
	0x03367E50 CMP W11, W19, UXTH
	0x03367E54 B.EQ 0x3367E6C
	0x03367E58 CMP W8, W20
	0x03367E5C ADD W8, W8, 0x1

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1076000
	007 Move X20, 0xD96000
	008 Move W8, [X21+3746]
	009 Move X20, [X20+2536]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xD96000
	016 Move X0, [X0+2536]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3746], W8
	020 Move X0, [X20]
	021 Move V8, [X19]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X30, [X31+16]
	029 Move X21, [X31+24]
	030 Move V0, V8
	031 Move X0, X31
	032 Move V8, [X31+48]
	033 Call Convert.ToUInt32, V0
	034 Return X0

Method: System.Int64 System.IConvertible.ToInt64(System.IFormatProvider provider)

Disassembly:
	0x03367E60 ADD X10, X10, 0x2
	0x03367E64 B.LT 0x3367E40
	0x03367E68 B 0x3367EB0
	0x03367E6C SUBS W10, W8, W20
	0x03367E70 B.GE 0x3367EB8
	0x03367E74 MOV W9, W31
	0x03367E78 SUB W11, W20, W8
	0x03367E7C ADD W12, W8, W9
	0x03367E80 CMP W12, W20
	0x03367E84 B.CS 0x3367ED0
	0x03367E88 LDRH W12, [X21, W12, SXTW]
	0x03367E8C CMP W12, W19, UXTH
	0x03367E90 B.NE 0x3367EA8
	0x03367E94 ADD W12, W10, W9
	0x03367E98 ADD W9, W9, 0x1
	0x03367E9C ADDS W31, W12, 0x1
	0x03367EA0 B.NE 0x3367E7C
	0x03367EA4 MOV W9, W11
	0x03367EA8 CMP W9, 0x2
	0x03367EAC B.LT 0x3367EB8
	0x03367EB0 MOV W0, W31
	0x03367EB4 B 0x3367EBC
	0x03367EB8 MOVZ W0, 0x1
	0x03367EBC LDP X20, X19, [X31 + 0x30]
	0x03367EC0 LDP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1076000
	007 Move X20, 0xD96000
	008 Move W8, [X21+3747]
	009 Move X20, [X20+2536]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xD96000
	016 Move X0, [X0+2536]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3747], W8
	020 Move X0, [X20]
	021 Move V8, [X19]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X30, [X31+16]
	029 Move X21, [X31+24]
	030 Move V0, V8
	031 Move X0, X31
	032 Move V8, [X31+48]
	033 Call Convert.ToInt64, V0
	034 Return X0

Method: System.UInt64 System.IConvertible.ToUInt64(System.IFormatProvider provider)

Disassembly:
	0x03367EC4 LDP X24, X23, [X31 + 0x10]
	0x03367EC8 LDR X30, [X31], #0x40
	0x03367ECC RET
	0x03367ED0 BL 0x1C16F28
	0x03367ED4 SUB X31, X31, 0xA0
	0x03367ED8 STP X29, X30, [X31 + 0x40]
	0x03367EDC STP X28, X27, [X31 + 0x50]
	0x03367EE0 STP X26, X25, [X31 + 0x60]
	0x03367EE4 STP X24, X23, [X31 + 0x70]
	0x03367EE8 STP X22, X21, [X31 + 0x80]
	0x03367EEC STP X20, X19, [X31 + 0x90]
	0x03367EF0 ADRP X19, 0x1075000
	0x03367EF4 LDRB W8, [X19 + 0xEB6]
	0x03367EF8 MOV X20, X5
	0x03367EFC MOV X24, X4
	0x03367F00 MOV X21, X3
	0x03367F04 MOV X22, X2
	0x03367F08 MOV X23, X1
	0x03367F0C STR X0, [X31 + 0x18]
	0x03367F10 STR X0, [X31 + 0x38]
	0x03367F14 TBNZ X8, 0x0, 0x3367FA4
	0x03367F18 ADRP X0, 0xDBC000
	0x03367F1C LDR X0, [X0 + 0xB60]
	0x03367F20 BL 0x1C16CF4
	0x03367F24 ADRP X0, 0xD8E000

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1076000
	007 Move X20, 0xD96000
	008 Move W8, [X21+3748]
	009 Move X20, [X20+2536]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xD96000
	016 Move X0, [X0+2536]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3748], W8
	020 Move X0, [X20]
	021 Move V8, [X19]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X30, [X31+16]
	029 Move X21, [X31+24]
	030 Move V0, V8
	031 Move X0, X31
	032 Move V8, [X31+48]
	033 Call Convert.ToUInt64, V0
	034 Return X0

Method: System.Single System.IConvertible.ToSingle(System.IFormatProvider provider)

Disassembly:
	0x03367F28 LDR X0, [X0 + 0xC48]
	0x03367F2C BL 0x1C16CF4
	0x03367F30 ADRP X0, 0xDC1000
	0x03367F34 LDR X0, [X0 + 0x548]
	0x03367F38 BL 0x1C16CF4
	0x03367F3C ADRP X0, 0xD8D000
	0x03367F40 LDR X0, [X0 + 0x9F0]
	0x03367F44 BL 0x1C16CF4
	0x03367F48 ADRP X0, 0xDC0000
	0x03367F4C LDR X0, [X0 + 0x930]
	0x03367F50 BL 0x1C16CF4
	0x03367F54 ADRP X0, 0xD8C000
	0x03367F58 LDR X0, [X0 + 0x5A8]
	0x03367F5C BL 0x1C16CF4
	0x03367F60 ADRP X0, 0xDC3000
	0x03367F64 LDR X0, [X0 + 0xB90]
	0x03367F68 BL 0x1C16CF4
	0x03367F6C ADRP X0, 0xDBB000
	0x03367F70 LDR X0, [X0 + 0x28]
	0x03367F74 BL 0x1C16CF4
	0x03367F78 ADRP X0, 0xDB4000
	0x03367F7C LDR X0, [X0 + 0xBE0]
	0x03367F80 BL 0x1C16CF4
	0x03367F84 ADRP X0, 0xDC1000
	0x03367F88 LDR X0, [X0 + 0x4C8]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1076000
	007 Move X20, 0xD96000
	008 Move W8, [X21+3749]
	009 Move X20, [X20+2536]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xD96000
	016 Move X0, [X0+2536]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3749], W8
	020 Move X0, [X20]
	021 Move V8, [X19]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X30, [X31+16]
	029 Move X21, [X31+24]
	030 Move V0, V8
	031 Move X0, X31
	032 Move V8, [X31+48]
	033 Call Convert.ToSingle, V0
	034 Return V0

Method: System.Double System.IConvertible.ToDouble(System.IFormatProvider provider)

Disassembly:
	0x03367F8C BL 0x1C16CF4
	0x03367F90 ADRP X0, 0xDC1000

ISIL:
	001 Move V0, [X0]
	002 Return V0

Method: System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider provider)

Disassembly:
	0x03367F94 LDR X0, [X0 + 0x4D0]
	0x03367F98 BL 0x1C16CF4
	0x03367F9C MOVZ W8, 0x1
	0x03367FA0 STRB W8, [X19 + 0xEB6]
	0x03367FA4 STR X31, [X31 + 0x30]
	0x03367FA8 STR W31, [X31 + 0x2C]
	0x03367FAC STRH W31, [X31 + 0x28]
	0x03367FB0 CBZ X21, 0x3368FB0
	0x03367FB4 ADRP X19, 0xDC0000
	0x03367FB8 LDR X26, [X21 + 0x78]
	0x03367FBC LDR X19, [X19 + 0x930]
	0x03367FC0 MOV X25, X20
	0x03367FC4 CBNZ X20, 0x3367FD8
	0x03367FC8 MOVZ W0, 0x10
	0x03367FCC MOV X1, X31
	0x03367FD0 BL 0x3235A9C
	0x03367FD4 MOV X25, X0
	0x03367FD8 LDR X0, [X19]
	0x03367FDC LDR W8, [X0 + 0xE0]
	0x03367FE0 CBNZ W8, 0x3367FE8
	0x03367FE4 BL 0x1C16DFC
	0x03367FE8 ADRP X27, 0x1075000
	0x03367FEC LDRB W8, [X27 + 0xAFE]
	0x03367FF0 CBNZ W8, 0x3368008
	0x03367FF4 ADRP X0, 0xDC0000

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1076000
	007 Move X20, 0xD96000
	008 Move W8, [X21+3750]
	009 Move X20, [X20+2536]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xD96000
	016 Move X0, [X0+2536]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3750], W8
	020 Move X0, [X20]
	021 Move V8, [X19]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X30, [X31+16]
	029 Move X21, [X31+24]
	030 Move V0, V8
	031 Move X0, X31
	032 Move V8, [X31+48]
	033 Call Convert.ToDecimal, V0
	034 Return X0

Method: System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider)

Disassembly:
	0x03367FF8 LDR X0, [X0 + 0x930]
	0x03367FFC BL 0x1C16CF4
	0x03368000 MOVZ W8, 0x1
	0x03368004 STRB W8, [X27 + 0xAFE]
	0x03368008 LDR X0, [X19]
	0x0336800C LDR W8, [X0 + 0xE0]
	0x03368010 CBNZ W8, 0x336801C
	0x03368014 BL 0x1C16DFC
	0x03368018 LDR X0, [X19]
	0x0336801C LDR X8, [X0 + 0xB8]
	0x03368020 LDRB W8, [X8]
	0x03368024 CBZ W8, 0x3368030
	0x03368028 MOVZ W8, 0x1
	0x0336802C B 0x3368058
	0x03368030 CBZ X26, 0x3368FB0
	0x03368034 LDR X8, [X26]
	0x03368038 MOV X0, X26
	0x0336803C LDP X9, X1, [X8 + 0x1A8]
	0x03368040 BLR X9
	0x03368044 MOV W8, W0
	0x03368048 LDR X0, [X19]
	0x0336804C AND W8, W8, 0xFFFF
	0x03368050 CMP W8, 0x8
	0x03368054 CSET W8, NE
	0x03368058 STR W8, [X31 + 0x14]
	0x0336805C LDR W8, [X0 + 0xE0]
	0x03368060 CBNZ W8, 0x3368068
	0x03368064 BL 0x1C16DFC
	0x03368068 LDRB W8, [X27 + 0xAFE]
	0x0336806C CBNZ W8, 0x3368084
	0x03368070 ADRP X0, 0xDBF000
	0x03368074 LDR X0, [X0 + 0x930]
	0x03368078 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0xDC1000
	005 Move X0, [X0+48]
	006 Call 0x1C17D08
	007 Move X19, X0
	008 Move X0, 0xDBE000
	009 Move X0, [X0+240]
	010 Call 0x1C17D08
	011 Move X20, X0
	012 Move X0, 0xDBE000
	013 Move X0, [X0+152]
	014 Call 0x1C17D08
	015 Move X2, X0
	016 Move X0, X19
	017 Move X1, X20
	018 Move X3, X31
	019 Call SR.Format, X0, X1, X2
	020 Move X19, X0
	021 Move X0, 0xD94000
	022 Move X0, [X0+3080]
	023 Call 0x1C17D08
	024 Call 0x1C17F10
	025 Move X1, X19
	026 Move X2, X31
	027 Move X20, X0
	028 Call InvalidCastException..ctor, X0, X1
	029 Move X0, 0xDC3000
	030 Move X0, [X0+2904]
	031 Call 0x1C17D08
	032 Move X1, X0
	033 Move X0, X20
	034 Call 0x1C17DEC

Method: System.Object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider)

Disassembly:
	0x0336807C MOVZ W8, 0x1
	0x03368080 STRB W8, [X27 + 0xAFE]
	0x03368084 LDR X0, [X19]
	0x03368088 LDR W8, [X0 + 0xE0]
	0x0336808C CBNZ W8, 0x3368098
	0x03368090 BL 0x1C16DFC
	0x03368094 LDR X0, [X19]
	0x03368098 LDR X8, [X0 + 0xB8]
	0x0336809C STR X20, [X31]
	0x033680A0 LDRB W8, [X8]
	0x033680A4 CBZ W8, 0x33680B0
	0x033680A8 MOVZ W8, 0x1
	0x033680AC B 0x33680D0
	0x033680B0 CBZ X26, 0x3368FB0
	0x033680B4 LDR X8, [X26]
	0x033680B8 MOV X0, X26
	0x033680BC LDP X9, X1, [X8 + 0x1A8]
	0x033680C0 BLR X9
	0x033680C4 AND W8, W0, 0xFFFF
	0x033680C8 CMP W8, 0x3
	0x033680CC CSET W8, NE
	0x033680D0 LDR X20, [X31 + 0x18]
	0x033680D4 STR W8, [X31 + 0x10]
	0x033680D8 SUBS W8, W22, 0x1
	0x033680DC STR W8, [X31 + 0xC]
	0x033680E0 B.LT 0x3368F88
	0x033680E4 ADRP X19, 0xDC0000
	0x033680E8 LDR X19, [X19 + 0x548]
	0x033680EC ORR X27, X31, 0x6666666666666666
	0x033680F0 MOV W28, W31
	0x033680F4 MOVK X27, 0x6667
	0x033680F8 MOVZ W8, 0x1
	0x033680FC STR W8, [X31 + 0x24]
	0x03368100 CMP W28, W22
	0x03368104 B.CS 0x3368FAC
	0x03368108 LDRH W29, [X23, W28, SXTW]
	0x0336810C CMP W29, 0x4B
	0x03368110 B.HI 0x33681B0
	0x03368114 CMP W29, 0x2F
	0x03368118 B.HI 0x3368214
	0x0336811C CMP W29, 0x25
	0x03368120 B.HI 0x33682E0
	0x03368124 CMP W29, 0x22

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x1075000
	009 Move X23, 0xD8F000
	010 Move X22, 0xD95000
	011 Move W8, [X24+3751]
	012 Move X23, [X23+2424]
	013 Move X22, [X22+2536]
	014 Move X19, X2
	015 Move X20, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0xD95000
	022 Move X0, [X0+2536]
	023 Call 0x1C17CF4
	024 Move X0, 0xD8F000
	025 Move X0, [X0+2424]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X24+3751], W8
	029 Move V0, [X21]
	030 Move X0, [X23]
	031 Add X1, X31, 8
	032 Move [X31+8], D0
	033 Call 0x1C17E04
	034 Move X8, [X22]
	035 Move X21, X0
	036 Move W9, [X8+224]
	037 Compare W9, 0
	038 JumpIfNotEqual {41}
	039 Move X0, X8
	040 Call 0x1C17DFC
	041 Move X0, X21
	042 Move X1, X20
	043 Move X2, X19
	044 Move X3, X31
	045 Call Convert.DefaultToType, X0, X1, X2
	046 Move X20, [X31+48]
	047 Move X19, [X31+56]
	048 Move X22, [X31+32]
	049 Move X21, [X31+40]
	050 Move X24, [X31+16]
	051 Move X23, [X31+24]
	052 Move X30, [X31+64]
	053 Return X0

