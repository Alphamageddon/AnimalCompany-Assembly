Type: System.Convert

Method: System.Boolean TryDecodeFromUtf16(System.ReadOnlySpan`1<System.Char> utf16, System.Span`1<System.Byte> bytes, out System.Int32 consumed, out System.Int32 written)

Disassembly:
	0x0331D4D8 LDR X8, [X8 + 0x8]
	0x0331D4DC CBZ X8, 0x331DF90
	0x0331D4E0 LDR W9, [X8 + 0x18]
	0x0331D4E4 CMP W9, 0x6
	0x0331D4E8 B.LS 0x331DF48
	0x0331D4EC LDR X9, [X8 + 0x50]
	0x0331D4F0 CMP X9, X22
	0x0331D4F4 B.EQ 0x331D944
	0x0331D4F8 LDR W9, [X0 + 0xE0]
	0x0331D4FC CBNZ W9, 0x331D514
	0x0331D500 BL 0x1C16DFC
	0x0331D504 LDR X0, [X25]
	0x0331D508 LDR X8, [X0 + 0xB8]
	0x0331D50C LDR X8, [X8 + 0x8]
	0x0331D510 CBZ X8, 0x331DF90
	0x0331D514 LDR W9, [X8 + 0x18]
	0x0331D518 CMP W9, 0x7
	0x0331D51C B.LS 0x331DF48
	0x0331D520 LDR X9, [X8 + 0x58]
	0x0331D524 CMP X9, X22
	0x0331D528 B.EQ 0x331D9B8
	0x0331D52C LDR W9, [X0 + 0xE0]
	0x0331D530 CBNZ W9, 0x331D548
	0x0331D534 BL 0x1C16DFC
	0x0331D538 LDR X0, [X25]
	0x0331D53C LDR X8, [X0 + 0xB8]
	0x0331D540 LDR X8, [X8 + 0x8]
	0x0331D544 CBZ X8, 0x331DF90
	0x0331D548 LDR W9, [X8 + 0x18]
	0x0331D54C CMP W9, 0x8
	0x0331D550 B.LS 0x331DF48
	0x0331D554 LDR X9, [X8 + 0x60]
	0x0331D558 CMP X9, X22
	0x0331D55C B.EQ 0x331DA24
	0x0331D560 LDR W9, [X0 + 0xE0]
	0x0331D564 CBNZ W9, 0x331D57C
	0x0331D568 BL 0x1C16DFC
	0x0331D56C LDR X0, [X25]
	0x0331D570 LDR X8, [X0 + 0xB8]
	0x0331D574 LDR X8, [X8 + 0x8]
	0x0331D578 CBZ X8, 0x331DF90
	0x0331D57C LDR W9, [X8 + 0x18]
	0x0331D580 CMP W9, 0x9
	0x0331D584 B.LS 0x331DF48
	0x0331D588 LDR X9, [X8 + 0x68]
	0x0331D58C CMP X9, X22
	0x0331D590 B.EQ 0x331DAD0
	0x0331D594 LDR W9, [X0 + 0xE0]
	0x0331D598 CBNZ W9, 0x331D5B0
	0x0331D59C BL 0x1C16DFC
	0x0331D5A0 LDR X0, [X25]
	0x0331D5A4 LDR X8, [X0 + 0xB8]
	0x0331D5A8 LDR X8, [X8 + 0x8]
	0x0331D5AC CBZ X8, 0x331DF90
	0x0331D5B0 LDR W9, [X8 + 0x18]
	0x0331D5B4 CMP W9, 0xA
	0x0331D5B8 B.LS 0x331DF48
	0x0331D5BC LDR X9, [X8 + 0x70]
	0x0331D5C0 CMP X9, X22
	0x0331D5C4 B.EQ 0x331DB3C
	0x0331D5C8 LDR W9, [X0 + 0xE0]
	0x0331D5CC CBNZ W9, 0x331D5E4
	0x0331D5D0 BL 0x1C16DFC
	0x0331D5D4 LDR X0, [X25]
	0x0331D5D8 LDR X8, [X0 + 0xB8]
	0x0331D5DC LDR X8, [X8 + 0x8]
	0x0331D5E0 CBZ X8, 0x331DF90
	0x0331D5E4 LDR W9, [X8 + 0x18]
	0x0331D5E8 CMP W9, 0xB
	0x0331D5EC B.LS 0x331DF48
	0x0331D5F0 LDR X9, [X8 + 0x78]
	0x0331D5F4 CMP X9, X22
	0x0331D5F8 B.EQ 0x331DBA8
	0x0331D5FC LDR W9, [X0 + 0xE0]
	0x0331D600 CBNZ W9, 0x331D618
	0x0331D604 BL 0x1C16DFC
	0x0331D608 LDR X0, [X25]
	0x0331D60C LDR X8, [X0 + 0xB8]
	0x0331D610 LDR X8, [X8 + 0x8]
	0x0331D614 CBZ X8, 0x331DF90
	0x0331D618 LDR W9, [X8 + 0x18]
	0x0331D61C CMP W9, 0xC
	0x0331D620 B.LS 0x331DF48
	0x0331D624 LDR X9, [X8 + 0x80]
	0x0331D628 CMP X9, X22
	0x0331D62C B.EQ 0x331DC14
	0x0331D630 LDR W9, [X0 + 0xE0]
	0x0331D634 CBNZ W9, 0x331D64C
	0x0331D638 BL 0x1C16DFC
	0x0331D63C LDR X0, [X25]
	0x0331D640 LDR X8, [X0 + 0xB8]
	0x0331D644 LDR X8, [X8 + 0x8]
	0x0331D648 CBZ X8, 0x331DF90
	0x0331D64C LDR W9, [X8 + 0x18]
	0x0331D650 CMP W9, 0xD
	0x0331D654 B.LS 0x331DF48
	0x0331D658 LDR X9, [X8 + 0x88]
	0x0331D65C CMP X9, X22
	0x0331D660 B.EQ 0x331DC88
	0x0331D664 LDR W9, [X0 + 0xE0]
	0x0331D668 CBNZ W9, 0x331D680
	0x0331D66C BL 0x1C16DFC
	0x0331D670 LDR X0, [X25]
	0x0331D674 LDR X8, [X0 + 0xB8]
	0x0331D678 LDR X8, [X8 + 0x8]
	0x0331D67C CBZ X8, 0x331DF90
	0x0331D680 LDR W9, [X8 + 0x18]
	0x0331D684 CMP W9, 0xE
	0x0331D688 B.LS 0x331DF48
	0x0331D68C LDR X9, [X8 + 0x90]
	0x0331D690 CMP X9, X22
	0x0331D694 B.EQ 0x331DCF4
	0x0331D698 LDR W9, [X0 + 0xE0]
	0x0331D69C CBNZ W9, 0x331D6B4
	0x0331D6A0 BL 0x1C16DFC
	0x0331D6A4 LDR X0, [X25]
	0x0331D6A8 LDR X8, [X0 + 0xB8]
	0x0331D6AC LDR X8, [X8 + 0x8]
	0x0331D6B0 CBZ X8, 0x331DF90
	0x0331D6B4 LDR W9, [X8 + 0x18]
	0x0331D6B8 CMP W9, 0xF
	0x0331D6BC B.LS 0x331DF48
	0x0331D6C0 LDR X9, [X8 + 0x98]
	0x0331D6C4 CMP X9, X22
	0x0331D6C8 B.EQ 0x331DD68
	0x0331D6CC LDR W9, [X0 + 0xE0]
	0x0331D6D0 CBNZ W9, 0x331D6E8
	0x0331D6D4 BL 0x1C16DFC
	0x0331D6D8 LDR X0, [X25]
	0x0331D6DC LDR X8, [X0 + 0xB8]
	0x0331D6E0 LDR X8, [X8 + 0x8]
	0x0331D6E4 CBZ X8, 0x331DF90
	0x0331D6E8 LDR W9, [X8 + 0x18]
	0x0331D6EC CMP W9, 0x10
	0x0331D6F0 B.LS 0x331DF48
	0x0331D6F4 LDR X9, [X8 + 0xA0]
	0x0331D6F8 CMP X9, X22
	0x0331D6FC B.EQ 0x331DDD8
	0x0331D700 LDR W9, [X0 + 0xE0]
	0x0331D704 CBNZ W9, 0x331D71C
	0x0331D708 BL 0x1C16DFC
	0x0331D70C LDR X0, [X25]
	0x0331D710 LDR X8, [X0 + 0xB8]
	0x0331D714 LDR X8, [X8 + 0x8]
	0x0331D718 CBZ X8, 0x331DF90
	0x0331D71C LDR W9, [X8 + 0x18]
	0x0331D720 CMP W9, 0x12
	0x0331D724 B.LS 0x331DF48
	0x0331D728 LDR X9, [X8 + 0xB0]
	0x0331D72C CMP X9, X22
	0x0331D730 B.EQ 0x331DE50
	0x0331D734 LDR W9, [X0 + 0xE0]
	0x0331D738 CBNZ W9, 0x331D750
	0x0331D73C BL 0x1C16DFC
	0x0331D740 LDR X8, [X25]
	0x0331D744 LDR X8, [X8 + 0xB8]
	0x0331D748 LDR X8, [X8 + 0x8]
	0x0331D74C CBZ X8, 0x331DF90
	0x0331D750 LDR W9, [X8 + 0x18]
	0x0331D754 CMP W9, 0x1
	0x0331D758 B.LS 0x331DF48
	0x0331D75C LDR X8, [X8 + 0x28]
	0x0331D760 CMP X8, X22
	0x0331D764 B.EQ 0x331DAA4
	0x0331D768 LDR X8, [X20]
	0x0331D76C LDR X1, [X24]
	0x0331D770 LDRH W9, [X8 + 0x12E]
	0x0331D774 CBZ X9, 0x331D798
	0x0331D778 LDR X10, [X8 + 0xB0]
	0x0331D77C ADD X10, X10, 0x8
	0x0331D780 LDUR X11, [X10 - 0x8]
	0x0331D784 CMP X11, X1
	0x0331D788 B.EQ 0x331DEEC
	0x0331D78C SUBS X9, X9, 0x1
	0x0331D790 ADD X10, X10, 0x10
	0x0331D794 B.NE 0x331D780
	0x0331D798 MOVZ W2, 0x10
	0x0331D79C MOV X0, X20
	0x0331D7A0 BL 0x1C5C788
	0x0331D7A4 B 0x331DEFC
	0x0331D7A8 MOV X0, X22
	0x0331D7AC MOV X1, X31
	0x0331D7B0 BL 0x33970C4
	0x0331D7B4 TBZ X0, 0x0, 0x331DAA4
	0x0331D7B8 ADRP X0, 0xDDE000
	0x0331D7BC LDR X0, [X0 + 0xC08]
	0x0331D7C0 BL 0x1C16D08
	0x0331D7C4 BL 0x1C16F10
	0x0331D7C8 MOV X19, X0
	0x0331D7CC ADRP X0, 0xE0B000
	0x0331D7D0 LDR X0, [X0 + 0x170]
	0x0331D7D4 B 0x331D834
	0x0331D7D8 MOV X0, X21
	0x0331D7DC MOV X1, X31
	0x0331D7E0 BL 0x33BE520
	0x0331D7E4 ADRP X8, 0xDD6000
	0x0331D7E8 LDR X8, [X8 + 0x6C0]
	0x0331D7EC MOV X19, X0
	0x0331D7F0 LDR X8, [X8]
	0x0331D7F4 LDR W9, [X8 + 0xE0]
	0x0331D7F8 CBNZ W9, 0x331D804
	0x0331D7FC MOV X0, X8
	0x0331D800 BL 0x1C16DFC
	0x0331D804 MOV X0, X19
	0x0331D808 MOV X1, X22
	0x0331D80C MOV X2, X31
	0x0331D810 BL 0x3395194
	0x0331D814 TBNZ X0, 0x0, 0x331DAA4
	0x0331D818 ADRP X0, 0xDDE000
	0x0331D81C LDR X0, [X0 + 0xC08]
	0x0331D820 BL 0x1C16D08
	0x0331D824 BL 0x1C16F10
	0x0331D828 MOV X19, X0
	0x0331D82C ADRP X0, 0xE0B000
	0x0331D830 LDR X0, [X0 + 0x158]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X25, 0x10C0000
	015 Move X26, 0xE06000
	016 Move X19, 0xE05000
	017 Move W8, [X25+3054]
	018 Move X26, [X26+32]
	019 Move X19, [X19+2096]
	020 Move X20, X5
	021 Move X27, X4
	022 Move X22, X3
	023 Move X23, X2
	024 Move X21, X1
	025 Move X24, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {47}
	030 Move X0, 0xDE0000
	031 Move X0, [X0+2536]
	032 Call 0x1C17CF4
	033 Move X0, 0xE05000
	034 Move X0, [X0+2096]
	035 Call 0x1C17CF4
	036 Move X0, 0xE06000
	037 Move X0, [X0+32]
	038 Call 0x1C17CF4
	039 Move X0, 0xE06000
	040 Move X0, [X0+40]
	041 Call 0x1C17CF4
	042 Move X0, 0xE06000
	043 Move X0, [X0+2344]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X25+3054], W8
	047 Move X2, [X26]
	048 Move X0, X24
	049 Move X1, X21
	050 Call MemoryMarshal.GetReference, X0
	051 Move X2, [X19]
	052 Move X24, X0
	053 Move X0, X23
	054 Move X1, X22
	055 Call 0x2219CF4, X0
	056 Compare W21, 0
	057 JumpIfEqual {96}
	058 Move X28, 0xDE0000
	059 Move X28, [X28+2536]
	060 Move X23, X0
	061 Move X0, [X28]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {67}
	065 Call 0x1C17DFC
	066 Move X0, [X28]
	067 Move X8, [X0+184]
	068 Move X29, [X8]
	069 Compare X29, 0
	070 JumpIfEqual {257}
	071 Move W8, [X29+24]
	072 Move [X31], X27
	073 Move [X31+8], X20
	074 Compare W8, 0
	075 JumpIfEqual {258}
	076 NotImplemented "Instruction SBFM not yet implemented."
	077 Move W8, W8
	078 ShiftRight W8, 31
	079 And W8, W8, 0x3FFFFFFF
	080 Add W8, W8, W21
	081 NotImplemented "Instruction CMP not yet implemented."
	082 And W27, W21, 0xFFFFFFFC
	083 Move W8, 0x5556
	084 NotImplemented "Instruction MOVK not yet implemented."
	085 NotImplemented "Instruction SMADDL not yet implemented."
	086 Move X9, X8
	087 ShiftRight X9, 63
	088 And X9, X9, 0x7FFFFFFF
	089 Move X8, X8
	090 ShiftRight X8, 32
	091 And X8, X8, 0x7FFFFFFF
	092 Add W8, W8, W9
	093 Move W19, W8
	094 ShiftRight W19, 30
	095 And W19, W19, 0x1FFFFFFF
	096 Move W26, W31
	097 Move W25, W31
	098 Move W0, 1
	099 Subtract W19, W27, 4
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X25, X31
	102 Move W26, W31
	103 Move W8, [X0+224]
	104 Compare W8, 0
	105 JumpIfNotEqual {107}
	106 Call 0x1C17DFC
	107 Add X11, X24, W26
	108 NotImplemented "Instruction LDRH not yet implemented."
	109 NotImplemented "Instruction LDRH not yet implemented."
	110 NotImplemented "Instruction LDRH not yet implemented."
	111 NotImplemented "Instruction LDRH not yet implemented."
	112 Or W12, W10, W8
	113 Or W12, W12, W9
	114 Or W12, W12, W11
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Add X12, X29, 32
	117 NotImplemented "Instruction INVALID not yet implemented."
	118 NotImplemented "Instruction INVALID not yet implemented."
	119 NotImplemented "Instruction INVALID not yet implemented."
	120 NotImplemented "Instruction INVALID not yet implemented."
	121 Move W10, W10
	122 ShiftRight W10, 20
	123 And W10, W10, 0x7FFFF
	124 Or W8, W10, W8
	125 Or W8, W8, W11
	126 Or W20, W8, W9
	127 Move TEMP, X20
	128 And TEMP, TEMP, -2147483648
	129 Compare TEMP, -2147483648
	130 JumpIfEqual {238}
	131 Move X0, [X28]
	132 Move W8, [X0+224]
	133 Compare W8, 0
	134 JumpIfNotEqual {136}
	135 Call 0x1C17DFC
	136 Add W26, W26, 4
	137 Move W8, W20
	138 ShiftRight W8, 16
	139 And W8, W8, 0x7FFFFFFF
	140 Add X9, X23, X25
	141 Move W10, W20
	142 ShiftRight W10, 8
	143 And W10, W10, 0x7FFFFFFF
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Move [X9], W8
	146 Move [X9+1], W10
	147 Move [X9+2], W20
	148 Move X0, [X28]
	149 Add X25, X25, 3
	150 Move W25, W31
	151 Move W26, W31
	152 Add W25, W25, 3
	153 Subtract W8, W27, 4
	154 NotImplemented "Instruction CMP not yet implemented."
	155 NotImplemented "Instruction CMP not yet implemented."
	156 NotImplemented "Instruction LDRH not yet implemented."
	157 Subtract W8, W27, 3
	158 Subtract W10, W27, 2
	159 NotImplemented "Instruction LDRH not yet implemented."
	160 NotImplemented "Instruction LDRH not yet implemented."
	161 Subtract W10, W27, 1
	162 NotImplemented "Instruction LDRH not yet implemented."
	163 Or W12, W11, W9
	164 Or W12, W12, W8
	165 Or W12, W12, W10
	166 NotImplemented "Instruction CMP not yet implemented."
	167 Add X12, X29, 32
	168 NotImplemented "Instruction INVALID not yet implemented."
	169 NotImplemented "Instruction INVALID not yet implemented."
	170 NotImplemented "Instruction CMP not yet implemented."
	171 Move W11, W11
	172 ShiftRight W11, 20
	173 And W11, W11, 0x7FFFF
	174 Or W9, W11, W9
	175 NotImplemented "Instruction CMP not yet implemented."
	176 Subtract W8, W22, 1
	177 NotImplemented "Instruction CMP not yet implemented."
	178 Move TEMP, X9
	179 And TEMP, TEMP, -2147483648
	180 Compare TEMP, -2147483648
	181 JumpIfEqual {238}
	182 Add X8, X23, W25
	183 Move W19, W9
	184 ShiftRight W19, 16
	185 And W19, W19, 0x7FFFFFFF
	186 Move W9, 1
	187 Subtract W11, W22, 3
	188 NotImplemented "Instruction CMP not yet implemented."
	189 NotImplemented "Instruction INVALID not yet implemented."
	190 NotImplemented "Instruction INVALID not yet implemented."
	191 Or W9, W9, W10
	192 Or W19, W9, W8
	193 Move TEMP, X19
	194 And TEMP, TEMP, -2147483648
	195 Compare TEMP, -2147483648
	196 JumpIfEqual {238}
	197 Move X0, [X28]
	198 Add X20, X23, W25
	199 Move W8, [X0+224]
	200 Compare W8, 0
	201 JumpIfNotEqual {203}
	202 Call 0x1C17DFC
	203 Move W9, W19
	204 ShiftRight W9, 16
	205 And W9, W9, 0x7FFFFFFF
	206 Move W10, W19
	207 ShiftRight W10, 8
	208 And W10, W10, 0x7FFFFFFF
	209 Add X8, X20, 2
	210 Move [X20], W9
	211 Move [X20+1], W10
	212 Move W9, 3
	213 Subtract W10, W22, 2
	214 NotImplemented "Instruction CMP not yet implemented."
	215 Add X8, X29, X8
	216 NotImplemented "Instruction INVALID not yet implemented."
	217 Or W8, W9, W8
	218 Move TEMP, X8
	219 And TEMP, TEMP, -2147483648
	220 Compare TEMP, -2147483648
	221 JumpIfEqual {238}
	222 Move W9, W8
	223 ShiftRight W9, 16
	224 And W9, W9, 0x7FFFFFFF
	225 Add W10, W25, 1
	226 Move W19, W8
	227 ShiftRight W19, 8
	228 And W19, W19, 0x7FFFFFFF
	229 Move [X23], W9
	230 Add X8, X23, W10
	231 Move W9, 2
	232 Add W25, W25, W9
	233 NotImplemented "Instruction CMP not yet implemented."
	234 Add W26, W26, 4
	235 Move [X8], W19
	236 Move X27, [X31]
	237 Move X20, [X31+8]
	238 Move X27, [X31]
	239 Move X20, [X31+8]
	240 Move W0, W31
	241 Move [X27], W26
	242 Move [X20], W25
	243 Move X20, [X31+96]
	244 Move X19, [X31+104]
	245 Move X22, [X31+80]
	246 Move X21, [X31+88]
	247 Move X24, [X31+64]
	248 Move X23, [X31+72]
	249 Move X26, [X31+48]
	250 Move X25, [X31+56]
	251 Move X28, [X31+32]
	252 Move X27, [X31+40]
	253 Move X29, [X31+16]
	254 Move X30, [X31+24]
	255 Add X31, X31, 112
	256 Return X0
	257 Call 0x1C17F20
	258 Call 0x1C17F28

Method: System.Int32 Decode(ref System.Char encodedChars, ref System.SByte decodingMap)

Disassembly:
	0x0331D834 BL 0x1C16D08
	0x0331D838 MOV X1, X0
	0x0331D83C MOV X0, X19
	0x0331D840 MOV X2, X31
	0x0331D844 BL 0x337B498
	0x0331D848 B 0x331DF78
	0x0331D84C LDR X8, [X20]
	0x0331D850 LDR X1, [X24]
	0x0331D854 LDRH W9, [X8 + 0x12E]
	0x0331D858 CBZ X9, 0x331D87C
	0x0331D85C LDR X10, [X8 + 0xB0]
	0x0331D860 ADD X10, X10, 0x8
	0x0331D864 LDUR X11, [X10 - 0x8]
	0x0331D868 CMP X11, X1
	0x0331D86C B.EQ 0x331D90C
	0x0331D870 SUBS X9, X9, 0x1
	0x0331D874 ADD X10, X10, 0x10
	0x0331D878 B.NE 0x331D864
	0x0331D87C MOVZ W2, 0x1
	0x0331D880 MOV X0, X20

ISIL:
	001 NotImplemented "Instruction LDRH not yet implemented."
	002 NotImplemented "Instruction LDRH not yet implemented."
	003 NotImplemented "Instruction LDRH not yet implemented."
	004 NotImplemented "Instruction LDRH not yet implemented."
	005 Or W12, W10, W8
	006 Or W12, W12, W9
	007 Or W12, W12, W11
	008 NotImplemented "Instruction CMP not yet implemented."
	009 NotImplemented "Instruction INVALID not yet implemented."
	010 NotImplemented "Instruction INVALID not yet implemented."
	011 NotImplemented "Instruction INVALID not yet implemented."
	012 NotImplemented "Instruction INVALID not yet implemented."
	013 Move W10, W10
	014 ShiftRight W10, 20
	015 And W10, W10, 0x7FFFF
	016 Or W8, W10, W8
	017 Or W8, W8, W11
	018 Or W0, W8, W9
	019 Return X0
	020 Move TEMP, 0
	021 Not TEMP
	022 Move W0, TEMP
	023 Return X0

Method: System.Void WriteThreeLowOrderBytes(ref System.Byte destination, System.Int32 value)

Disassembly:
	0x0331D884 BL 0x1C5C788
	0x0331D888 B 0x331D91C
	0x0331D88C LDR X8, [X20]
	0x0331D890 LDR X1, [X24]
	0x0331D894 LDRH W9, [X8 + 0x12E]
	0x0331D898 CBZ X9, 0x331D8BC

ISIL:
	001 Move W8, W1
	002 ShiftRight W8, 16
	003 And W8, W8, 0x7FFFFFFF
	004 Move W9, W1
	005 ShiftRight W9, 8
	006 And W9, W9, 0x7FFFFFFF
	007 Move [X0], W8
	008 Move [X0+1], W9
	009 Move [X0+2], W1
	010 Return 

Method: System.TypeCode GetTypeCode(System.Object value)

Disassembly:
	0x0331D89C LDR X10, [X8 + 0xB0]
	0x0331D8A0 ADD X10, X10, 0x8
	0x0331D8A4 LDUR X11, [X10 - 0x8]
	0x0331D8A8 CMP X11, X1
	0x0331D8AC B.EQ 0x331D984
	0x0331D8B0 SUBS X9, X9, 0x1
	0x0331D8B4 ADD X10, X10, 0x10
	0x0331D8B8 B.NE 0x331D8A4
	0x0331D8BC MOVZ W2, 0x2
	0x0331D8C0 MOV X0, X20
	0x0331D8C4 BL 0x1C5C788
	0x0331D8C8 B 0x331D994
	0x0331D8CC LDR X8, [X20]
	0x0331D8D0 LDR X1, [X24]
	0x0331D8D4 LDRH W9, [X8 + 0x12E]
	0x0331D8D8 CBZ X9, 0x331D8FC
	0x0331D8DC LDR X10, [X8 + 0xB0]
	0x0331D8E0 ADD X10, X10, 0x8
	0x0331D8E4 LDUR X11, [X10 - 0x8]
	0x0331D8E8 CMP X11, X1
	0x0331D8EC B.EQ 0x331D9F8
	0x0331D8F0 SUBS X9, X9, 0x1
	0x0331D8F4 ADD X10, X10, 0x10
	0x0331D8F8 B.NE 0x331D8E4
	0x0331D8FC MOVZ W2, 0x3
	0x0331D900 MOV X0, X20
	0x0331D904 BL 0x1C5C788
	0x0331D908 B 0x331DA08
	0x0331D90C LDR W9, [X10]
	0x0331D910 ADD W9, W9, 0x1
	0x0331D914 ADD X8, X8, W9, 0x4, SXTW
	0x0331D918 ADD X0, X8, 0x138
	0x0331D91C LDP X8, X2, [X0]
	0x0331D920 MOV X0, X20
	0x0331D924 MOV X1, X19
	0x0331D928 BLR X8
	0x0331D92C ADRP X8, 0xDD6000
	0x0331D930 LDR X8, [X8 + 0xB58]
	0x0331D934 AND W9, W0, 0x1
	0x0331D938 STRB W9, [X31 + 0x8]
	0x0331D93C LDR X8, [X8]
	0x0331D940 B 0x331DA94
	0x0331D944 LDR X8, [X20]
	0x0331D948 LDR X1, [X24]
	0x0331D94C LDRH W9, [X8 + 0x12E]
	0x0331D950 CBZ X9, 0x331D974
	0x0331D954 LDR X10, [X8 + 0xB0]
	0x0331D958 ADD X10, X10, 0x8
	0x0331D95C LDUR X11, [X10 - 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10C0000
	005 Move W8, [X20+3055]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE07000
	012 Move X0, [X0+3600]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3055], W8
	016 Compare X19, 0
	017 JumpIfEqual {40}
	018 Move X20, 0xE07000
	019 Move X20, [X20+3600]
	020 Move X0, X19
	021 Move X1, [X20]
	022 Call 0x1C17E00
	023 Compare X0, 0
	024 JumpIfEqual {41}
	025 Move X8, [X0]
	026 Move X1, [X20]
	027 Move X19, X0
	028 NotImplemented "Instruction LDRH not yet implemented."
	029 Compare X9, 0
	030 JumpIfEqual {37}
	031 Move X10, [X8+176]
	032 Add X10, X10, 8
	033 NotImplemented "Instruction LDUR not yet implemented."
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Subtract X9, X9, 1
	036 Add X10, X10, 16
	037 Move X0, X19
	038 Move W2, W31
	039 Call 0x1C5D788
	040 Move W0, W31
	041 Move W0, 1
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Return X0
	046 NotImplemented "Instruction LDRSW not yet implemented."
	047 Add X8, X8, X9
	048 Add X0, X8, 312
	049 Move X2, [X0]
	050 Move X1, [X0+8]
	051 Move X0, X19
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X30, [X31+32]
	055 CallNoReturn X2

Method: System.Object ChangeType(System.Object value, System.TypeCode typeCode, System.IFormatProvider provider)

Disassembly:
	0x0331D960 CMP X11, X1
	0x0331D964 B.EQ 0x331DA64
	0x0331D968 SUBS X9, X9, 0x1
	0x0331D96C ADD X10, X10, 0x10
	0x0331D970 B.NE 0x331D95C
	0x0331D974 MOVZ W2, 0x4
	0x0331D978 MOV X0, X20
	0x0331D97C BL 0x1C5C788
	0x0331D980 B 0x331DA74
	0x0331D984 LDR W9, [X10]
	0x0331D988 ADD W9, W9, 0x2
	0x0331D98C ADD X8, X8, W9, 0x4, SXTW
	0x0331D990 ADD X0, X8, 0x138
	0x0331D994 LDP X8, X2, [X0]
	0x0331D998 MOV X0, X20
	0x0331D99C MOV X1, X19
	0x0331D9A0 BLR X8
	0x0331D9A4 ADRP X8, 0xDD8000
	0x0331D9A8 LDR X8, [X8 + 0x170]
	0x0331D9AC LDR X8, [X8]
	0x0331D9B0 STRH W0, [X31 + 0x8]
	0x0331D9B4 B 0x331DA94
	0x0331D9B8 LDR X8, [X20]
	0x0331D9BC LDR X1, [X24]
	0x0331D9C0 LDRH W9, [X8 + 0x12E]
	0x0331D9C4 CBZ X9, 0x331D9E8
	0x0331D9C8 LDR X10, [X8 + 0xB0]
	0x0331D9CC ADD X10, X10, 0x8
	0x0331D9D0 LDUR X11, [X10 - 0x8]
	0x0331D9D4 CMP X11, X1
	0x0331D9D8 B.EQ 0x331DB10
	0x0331D9DC SUBS X9, X9, 0x1
	0x0331D9E0 ADD X10, X10, 0x10
	0x0331D9E4 B.NE 0x331D9D0
	0x0331D9E8 MOVZ W2, 0x5
	0x0331D9EC MOV X0, X20
	0x0331D9F0 BL 0x1C5C788
	0x0331D9F4 B 0x331DB20
	0x0331D9F8 LDR W9, [X10]
	0x0331D9FC ADD W9, W9, 0x3
	0x0331DA00 ADD X8, X8, W9, 0x4, SXTW
	0x0331DA04 ADD X0, X8, 0x138
	0x0331DA08 LDP X8, X2, [X0]
	0x0331DA0C MOV X0, X20
	0x0331DA10 MOV X1, X19
	0x0331DA14 BLR X8
	0x0331DA18 ADRP X8, 0xDFF000
	0x0331DA1C LDR X8, [X8 + 0x6B0]
	0x0331DA20 B 0x331DA8C
	0x0331DA24 LDR X8, [X20]
	0x0331DA28 LDR X1, [X24]
	0x0331DA2C LDRH W9, [X8 + 0x12E]
	0x0331DA30 CBZ X9, 0x331DA54
	0x0331DA34 LDR X10, [X8 + 0xB0]
	0x0331DA38 ADD X10, X10, 0x8
	0x0331DA3C LDUR X11, [X10 - 0x8]
	0x0331DA40 CMP X11, X1
	0x0331DA44 B.EQ 0x331DB7C
	0x0331DA48 SUBS X9, X9, 0x1
	0x0331DA4C ADD X10, X10, 0x10
	0x0331DA50 B.NE 0x331DA3C
	0x0331DA54 MOVZ W2, 0x6
	0x0331DA58 MOV X0, X20
	0x0331DA5C BL 0x1C5C788
	0x0331DA60 B 0x331DB8C
	0x0331DA64 LDR W9, [X10]
	0x0331DA68 ADD W9, W9, 0x4
	0x0331DA6C ADD X8, X8, W9, 0x4, SXTW
	0x0331DA70 ADD X0, X8, 0x138
	0x0331DA74 LDP X8, X2, [X0]
	0x0331DA78 MOV X0, X20
	0x0331DA7C MOV X1, X19
	0x0331DA80 BLR X8
	0x0331DA84 ADRP X8, 0xDD7000
	0x0331DA88 LDR X8, [X8 + 0x9D8]
	0x0331DA8C LDR X8, [X8]
	0x0331DA90 STRB W0, [X31 + 0x8]
	0x0331DA94 ADD X1, X31, 0x8
	0x0331DA98 MOV X0, X8
	0x0331DA9C BL 0x1C16E04
	0x0331DAA0 MOV X21, X0
	0x0331DAA4 LDR X8, [X23 + 0x28]
	0x0331DAA8 LDR X9, [X31 + 0x18]
	0x0331DAAC CMP X8, X9
	0x0331DAB0 B.NE 0x331DF44
	0x0331DAB4 MOV X0, X21
	0x0331DAB8 LDP X20, X19, [X31 + 0x50]
	0x0331DABC LDP X22, X21, [X31 + 0x40]
	0x0331DAC0 LDP X24, X23, [X31 + 0x30]
	0x0331DAC4 LDP X30, X25, [X31 + 0x20]
	0x0331DAC8 ADD X31, X31, 0x60
	0x0331DACC RET
	0x0331DAD0 LDR X8, [X20]
	0x0331DAD4 LDR X1, [X24]
	0x0331DAD8 LDRH W9, [X8 + 0x12E]
	0x0331DADC CBZ X9, 0x331DB00
	0x0331DAE0 LDR X10, [X8 + 0xB0]
	0x0331DAE4 ADD X10, X10, 0x8
	0x0331DAE8 LDUR X11, [X10 - 0x8]
	0x0331DAEC CMP X11, X1
	0x0331DAF0 B.EQ 0x331DBE8
	0x0331DAF4 SUBS X9, X9, 0x1
	0x0331DAF8 ADD X10, X10, 0x10
	0x0331DAFC B.NE 0x331DAE8
	0x0331DB00 MOVZ W2, 0x7
	0x0331DB04 MOV X0, X20
	0x0331DB08 BL 0x1C5C788
	0x0331DB0C B 0x331DBF8
	0x0331DB10 LDR W9, [X10]
	0x0331DB14 ADD W9, W9, 0x5
	0x0331DB18 ADD X8, X8, W9, 0x4, SXTW
	0x0331DB1C ADD X0, X8, 0x138
	0x0331DB20 LDP X8, X2, [X0]
	0x0331DB24 MOV X0, X20
	0x0331DB28 MOV X1, X19
	0x0331DB2C BLR X8
	0x0331DB30 ADRP X8, 0xDDA000
	0x0331DB34 LDR X8, [X8 + 0x628]
	0x0331DB38 B 0x331D9AC
	0x0331DB3C LDR X8, [X20]
	0x0331DB40 LDR X1, [X24]
	0x0331DB44 LDRH W9, [X8 + 0x12E]
	0x0331DB48 CBZ X9, 0x331DB6C
	0x0331DB4C LDR X10, [X8 + 0xB0]
	0x0331DB50 ADD X10, X10, 0x8
	0x0331DB54 LDUR X11, [X10 - 0x8]
	0x0331DB58 CMP X11, X1
	0x0331DB5C B.EQ 0x331DC54
	0x0331DB60 SUBS X9, X9, 0x1
	0x0331DB64 ADD X10, X10, 0x10
	0x0331DB68 B.NE 0x331DB54
	0x0331DB6C MOVZ W2, 0x8
	0x0331DB70 MOV X0, X20
	0x0331DB74 BL 0x1C5C788
	0x0331DB78 B 0x331DC64
	0x0331DB7C LDR W9, [X10]
	0x0331DB80 ADD W9, W9, 0x6
	0x0331DB84 ADD X8, X8, W9, 0x4, SXTW
	0x0331DB88 ADD X0, X8, 0x138
	0x0331DB8C LDP X8, X2, [X0]
	0x0331DB90 MOV X0, X20
	0x0331DB94 MOV X1, X19
	0x0331DB98 BLR X8
	0x0331DB9C ADRP X8, 0xDDB000
	0x0331DBA0 LDR X8, [X8 + 0x658]
	0x0331DBA4 B 0x331D9AC
	0x0331DBA8 LDR X8, [X20]
	0x0331DBAC LDR X1, [X24]
	0x0331DBB0 LDRH W9, [X8 + 0x12E]
	0x0331DBB4 CBZ X9, 0x331DBD8
	0x0331DBB8 LDR X10, [X8 + 0xB0]
	0x0331DBBC ADD X10, X10, 0x8
	0x0331DBC0 LDUR X11, [X10 - 0x8]
	0x0331DBC4 CMP X11, X1
	0x0331DBC8 B.EQ 0x331DCC8
	0x0331DBCC SUBS X9, X9, 0x1
	0x0331DBD0 ADD X10, X10, 0x10
	0x0331DBD4 B.NE 0x331DBC0
	0x0331DBD8 MOVZ W2, 0x9
	0x0331DBDC MOV X0, X20
	0x0331DBE0 BL 0x1C5C788
	0x0331DBE4 B 0x331DCD8
	0x0331DBE8 LDR W9, [X10]
	0x0331DBEC ADD W9, W9, 0x7
	0x0331DBF0 ADD X8, X8, W9, 0x4, SXTW
	0x0331DBF4 ADD X0, X8, 0x138
	0x0331DBF8 LDP X8, X2, [X0]
	0x0331DBFC MOV X0, X20
	0x0331DC00 MOV X1, X19
	0x0331DC04 BLR X8
	0x0331DC08 ADRP X8, 0xDD6000
	0x0331DC0C LDR X8, [X8 + 0x758]
	0x0331DC10 B 0x331DC7C
	0x0331DC14 LDR X8, [X20]
	0x0331DC18 LDR X1, [X24]
	0x0331DC1C LDRH W9, [X8 + 0x12E]
	0x0331DC20 CBZ X9, 0x331DC44
	0x0331DC24 LDR X10, [X8 + 0xB0]
	0x0331DC28 ADD X10, X10, 0x8
	0x0331DC2C LDUR X11, [X10 - 0x8]
	0x0331DC30 CMP X11, X1
	0x0331DC34 B.EQ 0x331DD34
	0x0331DC38 SUBS X9, X9, 0x1
	0x0331DC3C ADD X10, X10, 0x10
	0x0331DC40 B.NE 0x331DC2C
	0x0331DC44 MOVZ W2, 0xA
	0x0331DC48 MOV X0, X20
	0x0331DC4C BL 0x1C5C788
	0x0331DC50 B 0x331DD44
	0x0331DC54 LDR W9, [X10]
	0x0331DC58 ADD W9, W9, 0x8
	0x0331DC5C ADD X8, X8, W9, 0x4, SXTW
	0x0331DC60 ADD X0, X8, 0x138
	0x0331DC64 LDP X8, X2, [X0]
	0x0331DC68 MOV X0, X20
	0x0331DC6C MOV X1, X19
	0x0331DC70 BLR X8
	0x0331DC74 ADRP X8, 0xDDE000
	0x0331DC78 LDR X8, [X8 + 0x720]
	0x0331DC7C LDR X8, [X8]
	0x0331DC80 STR W0, [X31 + 0x8]
	0x0331DC84 B 0x331DA94
	0x0331DC88 LDR X8, [X20]
	0x0331DC8C LDR X1, [X24]
	0x0331DC90 LDRH W9, [X8 + 0x12E]
	0x0331DC94 CBZ X9, 0x331DCB8
	0x0331DC98 LDR X10, [X8 + 0xB0]
	0x0331DC9C ADD X10, X10, 0x8
	0x0331DCA0 LDUR X11, [X10 - 0x8]
	0x0331DCA4 CMP X11, X1
	0x0331DCA8 B.EQ 0x331DDA8
	0x0331DCAC SUBS X9, X9, 0x1
	0x0331DCB0 ADD X10, X10, 0x10
	0x0331DCB4 B.NE 0x331DCA0
	0x0331DCB8 MOVZ W2, 0xB
	0x0331DCBC MOV X0, X20
	0x0331DCC0 BL 0x1C5C788
	0x0331DCC4 B 0x331DDB8
	0x0331DCC8 LDR W9, [X10]
	0x0331DCCC ADD W9, W9, 0x9
	0x0331DCD0 ADD X8, X8, W9, 0x4, SXTW
	0x0331DCD4 ADD X0, X8, 0x138
	0x0331DCD8 LDP X8, X2, [X0]
	0x0331DCDC MOV X0, X20
	0x0331DCE0 MOV X1, X19
	0x0331DCE4 BLR X8
	0x0331DCE8 ADRP X8, 0xDD8000
	0x0331DCEC LDR X8, [X8 + 0xA60]
	0x0331DCF0 B 0x331DD5C
	0x0331DCF4 LDR X8, [X20]
	0x0331DCF8 LDR X1, [X24]
	0x0331DCFC LDRH W9, [X8 + 0x12E]
	0x0331DD00 CBZ X9, 0x331DD24
	0x0331DD04 LDR X10, [X8 + 0xB0]
	0x0331DD08 ADD X10, X10, 0x8
	0x0331DD0C LDUR X11, [X10 - 0x8]
	0x0331DD10 CMP X11, X1
	0x0331DD14 B.EQ 0x331DE18
	0x0331DD18 SUBS X9, X9, 0x1
	0x0331DD1C ADD X10, X10, 0x10
	0x0331DD20 B.NE 0x331DD0C
	0x0331DD24 MOVZ W2, 0xC
	0x0331DD28 MOV X0, X20
	0x0331DD2C BL 0x1C5C788
	0x0331DD30 B 0x331DE28
	0x0331DD34 LDR W9, [X10]
	0x0331DD38 ADD W9, W9, 0xA
	0x0331DD3C ADD X8, X8, W9, 0x4, SXTW
	0x0331DD40 ADD X0, X8, 0x138
	0x0331DD44 LDP X8, X2, [X0]
	0x0331DD48 MOV X0, X20
	0x0331DD4C MOV X1, X19
	0x0331DD50 BLR X8
	0x0331DD54 ADRP X8, 0xDD7000
	0x0331DD58 LDR X8, [X8 + 0x758]
	0x0331DD5C LDR X8, [X8]
	0x0331DD60 STR X0, [X31 + 0x8]
	0x0331DD64 B 0x331DA94
	0x0331DD68 LDR X8, [X20]
	0x0331DD6C LDR X1, [X24]
	0x0331DD70 LDRH W9, [X8 + 0x12E]
	0x0331DD74 CBZ X9, 0x331DD98
	0x0331DD78 LDR X10, [X8 + 0xB0]
	0x0331DD7C ADD X10, X10, 0x8
	0x0331DD80 LDUR X11, [X10 - 0x8]
	0x0331DD84 CMP X11, X1
	0x0331DD88 B.EQ 0x331DE90
	0x0331DD8C SUBS X9, X9, 0x1
	0x0331DD90 ADD X10, X10, 0x10
	0x0331DD94 B.NE 0x331DD80
	0x0331DD98 MOVZ W2, 0xD
	0x0331DD9C MOV X0, X20
	0x0331DDA0 BL 0x1C5C788
	0x0331DDA4 B 0x331DEA0
	0x0331DDA8 LDR W9, [X10]
	0x0331DDAC ADD W9, W9, 0xB
	0x0331DDB0 ADD X8, X8, W9, 0x4, SXTW
	0x0331DDB4 ADD X0, X8, 0x138
	0x0331DDB8 LDP X8, X2, [X0]
	0x0331DDBC MOV X0, X20
	0x0331DDC0 MOV X1, X19
	0x0331DDC4 BLR X8
	0x0331DDC8 ADRP X8, 0xDD6000
	0x0331DDCC LDR X8, [X8 + 0xA90]
	0x0331DDD0 STR S0, [X31 + 0x8]
	0x0331DDD4 B 0x331DE44
	0x0331DDD8 LDR X8, [X20]
	0x0331DDDC LDR X1, [X24]
	0x0331DDE0 LDRH W9, [X8 + 0x12E]
	0x0331DDE4 CBZ X9, 0x331DE08
	0x0331DDE8 LDR X10, [X8 + 0xB0]
	0x0331DDEC ADD X10, X10, 0x8
	0x0331DDF0 LDUR X11, [X10 - 0x8]
	0x0331DDF4 CMP X11, X1
	0x0331DDF8 B.EQ 0x331DEC0
	0x0331DDFC SUBS X9, X9, 0x1
	0x0331DE00 ADD X10, X10, 0x10
	0x0331DE04 B.NE 0x331DDF0
	0x0331DE08 MOVZ W2, 0xE
	0x0331DE0C MOV X0, X20
	0x0331DE10 BL 0x1C5C788
	0x0331DE14 B 0x331DED0
	0x0331DE18 LDR W9, [X10]
	0x0331DE1C ADD W9, W9, 0xC
	0x0331DE20 ADD X8, X8, W9, 0x4, SXTW
	0x0331DE24 ADD X0, X8, 0x138
	0x0331DE28 LDP X8, X2, [X0]
	0x0331DE2C MOV X0, X20
	0x0331DE30 MOV X1, X19
	0x0331DE34 BLR X8
	0x0331DE38 ADRP X8, 0xDD9000
	0x0331DE3C LDR X8, [X8 + 0x978]
	0x0331DE40 STR D0, [X31 + 0x8]
	0x0331DE44 LDR X0, [X8]
	0x0331DE48 ADD X1, X31, 0x8
	0x0331DE4C B 0x331DA9C
	0x0331DE50 LDR X8, [X20]
	0x0331DE54 LDR X1, [X24]
	0x0331DE58 LDRH W9, [X8 + 0x12E]
	0x0331DE5C CBZ X9, 0x331DE80
	0x0331DE60 LDR X10, [X8 + 0xB0]
	0x0331DE64 ADD X10, X10, 0x8
	0x0331DE68 LDUR X11, [X10 - 0x8]
	0x0331DE6C CMP X11, X1
	0x0331DE70 B.EQ 0x331DF14
	0x0331DE74 SUBS X9, X9, 0x1
	0x0331DE78 ADD X10, X10, 0x10
	0x0331DE7C B.NE 0x331DE68
	0x0331DE80 MOVZ W2, 0xF
	0x0331DE84 MOV X0, X20
	0x0331DE88 BL 0x1C5C788
	0x0331DE8C B 0x331DF24
	0x0331DE90 LDR W9, [X10]
	0x0331DE94 ADD W9, W9, 0xD
	0x0331DE98 ADD X8, X8, W9, 0x4, SXTW
	0x0331DE9C ADD X0, X8, 0x138
	0x0331DEA0 LDP X8, X2, [X0]
	0x0331DEA4 MOV X0, X20
	0x0331DEA8 MOV X1, X19
	0x0331DEAC BLR X8
	0x0331DEB0 ADRP X8, 0xDFE000
	0x0331DEB4 LDR X8, [X8 + 0x5F0]
	0x0331DEB8 STP X0, X1, [X31 + 0x8]
	0x0331DEBC B 0x331D93C
	0x0331DEC0 LDR W9, [X10]
	0x0331DEC4 ADD W9, W9, 0xE
	0x0331DEC8 ADD X8, X8, W9, 0x4, SXTW
	0x0331DECC ADD X0, X8, 0x138
	0x0331DED0 LDP X8, X2, [X0]
	0x0331DED4 MOV X0, X20
	0x0331DED8 MOV X1, X19
	0x0331DEDC BLR X8
	0x0331DEE0 ADRP X8, 0xDD7000
	0x0331DEE4 LDR X8, [X8 + 0x9F0]
	0x0331DEE8 B 0x331DD5C
	0x0331DEEC LDR W9, [X10]
	0x0331DEF0 ADD W9, W9, 0x10
	0x0331DEF4 ADD X8, X8, W9, 0x4, SXTW
	0x0331DEF8 ADD X0, X8, 0x138
	0x0331DEFC LDP X8, X3, [X0]
	0x0331DF00 MOV X0, X20
	0x0331DF04 MOV X1, X22
	0x0331DF08 MOV X2, X19
	0x0331DF0C BLR X8
	0x0331DF10 B 0x331DF34
	0x0331DF14 LDR W9, [X10]
	0x0331DF18 ADD W9, W9, 0xF
	0x0331DF1C ADD X8, X8, W9, 0x4, SXTW
	0x0331DF20 ADD X0, X8, 0x138
	0x0331DF24 LDP X8, X2, [X0]
	0x0331DF28 MOV X0, X20
	0x0331DF2C MOV X1, X19
	0x0331DF30 BLR X8
	0x0331DF34 LDR X8, [X23 + 0x28]
	0x0331DF38 LDR X9, [X31 + 0x18]
	0x0331DF3C CMP X8, X9
	0x0331DF40 B.EQ 0x331DAB8
	0x0331DF44 BL 0x3EB1B20
	0x0331DF48 BL 0x1C16F28
	0x0331DF4C ADRP X0, 0xDDB000
	0x0331DF50 LDR X0, [X0 + 0x528]
	0x0331DF54 BL 0x1C16D08
	0x0331DF58 BL 0x1C16F10
	0x0331DF5C MOV X19, X0
	0x0331DF60 ADRP X0, 0xE0B000
	0x0331DF64 LDR X0, [X0 + 0x178]
	0x0331DF68 BL 0x1C16D08
	0x0331DF6C MOV X1, X0
	0x0331DF70 MOV X0, X19
	0x0331DF74 BL 0x330E100
	0x0331DF78 ADRP X0, 0xE0B000
	0x0331DF7C LDR X0, [X0 + 0x180]
	0x0331DF80 BL 0x1C16D08
	0x0331DF84 MOV X1, X0
	0x0331DF88 MOV X0, X19
	0x0331DF8C BL 0x1C16DEC
	0x0331DF90 BL 0x1C16F20
	0x0331DF94 STP X30, X19, [X31 - 0x10]!
	0x0331DF98 ADRP X0, 0xDD6000
	0x0331DF9C LDR X0, [X0 + 0x858]
	0x0331DFA0 BL 0x1C16D08
	0x0331DFA4 BL 0x1C16F10
	0x0331DFA8 MOV X19, X0
	0x0331DFAC ADRP X0, 0xE0B000
	0x0331DFB0 LDR X0, [X0 + 0x188]
	0x0331DFB4 BL 0x1C16D08
	0x0331DFB8 MOV X1, X0
	0x0331DFBC MOV X0, X19
	0x0331DFC0 MOV X2, X31
	0x0331DFC4 BL 0x338CB50
	0x0331DFC8 ADRP X0, 0xE0B000
	0x0331DFCC LDR X0, [X0 + 0x190]
	0x0331DFD0 BL 0x1C16D08
	0x0331DFD4 MOV X1, X0
	0x0331DFD8 MOV X0, X19
	0x0331DFDC BL 0x1C16DEC
	0x0331DFE0 STP X30, X19, [X31 - 0x10]!
	0x0331DFE4 ADRP X0, 0xDD6000
	0x0331DFE8 LDR X0, [X0 + 0x858]
	0x0331DFEC BL 0x1C16D08
	0x0331DFF0 BL 0x1C16F10
	0x0331DFF4 MOV X19, X0
	0x0331DFF8 ADRP X0, 0xE0B000
	0x0331DFFC LDR X0, [X0 + 0x80]
	0x0331E000 BL 0x1C16D08
	0x0331E004 MOV X1, X0
	0x0331E008 MOV X0, X19
	0x0331E00C MOV X2, X31
	0x0331E010 BL 0x338CB50
	0x0331E014 ADRP X0, 0xE0A000
	0x0331E018 LDR X0, [X0 + 0x198]
	0x0331E01C BL 0x1C16D08
	0x0331E020 MOV X1, X0
	0x0331E024 MOV X0, X19
	0x0331E028 BL 0x1C16DEC
	0x0331E02C STP X30, X19, [X31 - 0x10]!
	0x0331E030 ADRP X0, 0xDD5000
	0x0331E034 LDR X0, [X0 + 0x858]
	0x0331E038 BL 0x1C16D08
	0x0331E03C BL 0x1C16F10
	0x0331E040 MOV X19, X0
	0x0331E044 ADRP X0, 0xE0A000
	0x0331E048 LDR X0, [X0 + 0x1A0]
	0x0331E04C BL 0x1C16D08
	0x0331E050 MOV X1, X0
	0x0331E054 MOV X0, X19
	0x0331E058 MOV X2, X31
	0x0331E05C BL 0x338CB50
	0x0331E060 ADRP X0, 0xE0A000
	0x0331E064 LDR X0, [X0 + 0x1A8]
	0x0331E068 BL 0x1C16D08
	0x0331E06C MOV X1, X0
	0x0331E070 MOV X0, X19
	0x0331E074 BL 0x1C16DEC
	0x0331E078 STP X30, X19, [X31 - 0x10]!
	0x0331E07C ADRP X0, 0xDD5000
	0x0331E080 LDR X0, [X0 + 0x858]
	0x0331E084 BL 0x1C16D08
	0x0331E088 BL 0x1C16F10
	0x0331E08C MOV X19, X0
	0x0331E090 ADRP X0, 0xE0A000
	0x0331E094 LDR X0, [X0 + 0x1B0]
	0x0331E098 BL 0x1C16D08
	0x0331E09C MOV X1, X0
	0x0331E0A0 MOV X0, X19
	0x0331E0A4 MOV X2, X31
	0x0331E0A8 BL 0x338CB50
	0x0331E0AC ADRP X0, 0xE0A000
	0x0331E0B0 LDR X0, [X0 + 0x1B8]
	0x0331E0B4 BL 0x1C16D08
	0x0331E0B8 MOV X1, X0
	0x0331E0BC MOV X0, X19
	0x0331E0C0 BL 0x1C16DEC
	0x0331E0C4 STP X30, X19, [X31 - 0x10]!
	0x0331E0C8 ADRP X0, 0xDD5000
	0x0331E0CC LDR X0, [X0 + 0x858]
	0x0331E0D0 BL 0x1C16D08
	0x0331E0D4 BL 0x1C16F10
	0x0331E0D8 MOV X19, X0
	0x0331E0DC ADRP X0, 0xE0A000
	0x0331E0E0 LDR X0, [X0 + 0x1C0]
	0x0331E0E4 BL 0x1C16D08
	0x0331E0E8 MOV X1, X0
	0x0331E0EC MOV X0, X19
	0x0331E0F0 MOV X2, X31
	0x0331E0F4 BL 0x338CB50
	0x0331E0F8 ADRP X0, 0xE0A000
	0x0331E0FC LDR X0, [X0 + 0x1C8]
	0x0331E100 BL 0x1C16D08
	0x0331E104 MOV X1, X0
	0x0331E108 MOV X0, X19
	0x0331E10C BL 0x1C16DEC
	0x0331E110 STP X30, X19, [X31 - 0x10]!
	0x0331E114 ADRP X0, 0xDD5000
	0x0331E118 LDR X0, [X0 + 0x858]
	0x0331E11C BL 0x1C16D08
	0x0331E120 BL 0x1C16F10
	0x0331E124 MOV X19, X0
	0x0331E128 ADRP X0, 0xE0A000
	0x0331E12C LDR X0, [X0 + 0x1D0]
	0x0331E130 BL 0x1C16D08
	0x0331E134 MOV X1, X0
	0x0331E138 MOV X0, X19
	0x0331E13C MOV X2, X31
	0x0331E140 BL 0x338CB50
	0x0331E144 ADRP X0, 0xE0A000
	0x0331E148 LDR X0, [X0 + 0x1D8]
	0x0331E14C BL 0x1C16D08
	0x0331E150 MOV X1, X0
	0x0331E154 MOV X0, X19
	0x0331E158 BL 0x1C16DEC
	0x0331E15C STP X30, X19, [X31 - 0x10]!
	0x0331E160 ADRP X0, 0xDD5000
	0x0331E164 LDR X0, [X0 + 0x858]
	0x0331E168 BL 0x1C16D08
	0x0331E16C BL 0x1C16F10
	0x0331E170 MOV X19, X0
	0x0331E174 ADRP X0, 0xE0A000
	0x0331E178 LDR X0, [X0 + 0x1E0]
	0x0331E17C BL 0x1C16D08
	0x0331E180 MOV X1, X0
	0x0331E184 MOV X0, X19
	0x0331E188 MOV X2, X31
	0x0331E18C BL 0x338CB50
	0x0331E190 ADRP X0, 0xE0A000
	0x0331E194 LDR X0, [X0 + 0x1E8]
	0x0331E198 BL 0x1C16D08
	0x0331E19C MOV X1, X0
	0x0331E1A0 MOV X0, X19
	0x0331E1A4 BL 0x1C16DEC
	0x0331E1A8 STP X30, X19, [X31 - 0x10]!
	0x0331E1AC ADRP X0, 0xDD5000
	0x0331E1B0 LDR X0, [X0 + 0x858]
	0x0331E1B4 BL 0x1C16D08
	0x0331E1B8 BL 0x1C16F10
	0x0331E1BC MOV X19, X0
	0x0331E1C0 ADRP X0, 0xE0A000
	0x0331E1C4 LDR X0, [X0 + 0x1F0]
	0x0331E1C8 BL 0x1C16D08
	0x0331E1CC MOV X1, X0
	0x0331E1D0 MOV X0, X19
	0x0331E1D4 MOV X2, X31
	0x0331E1D8 BL 0x338CB50
	0x0331E1DC ADRP X0, 0xE0A000
	0x0331E1E0 LDR X0, [X0 + 0x1F8]
	0x0331E1E4 BL 0x1C16D08
	0x0331E1E8 MOV X1, X0
	0x0331E1EC MOV X0, X19
	0x0331E1F0 BL 0x1C16DEC
	0x0331E1F4 STP X30, X19, [X31 - 0x10]!
	0x0331E1F8 ADRP X0, 0xDD5000
	0x0331E1FC LDR X0, [X0 + 0x858]
	0x0331E200 BL 0x1C16D08
	0x0331E204 BL 0x1C16F10
	0x0331E208 MOV X19, X0
	0x0331E20C ADRP X0, 0xE0A000
	0x0331E210 LDR X0, [X0 + 0x200]
	0x0331E214 BL 0x1C16D08
	0x0331E218 MOV X1, X0
	0x0331E21C MOV X0, X19
	0x0331E220 MOV X2, X31
	0x0331E224 BL 0x338CB50
	0x0331E228 ADRP X0, 0xE0A000
	0x0331E22C LDR X0, [X0 + 0x208]
	0x0331E230 BL 0x1C16D08
	0x0331E234 MOV X1, X0
	0x0331E238 MOV X0, X19
	0x0331E23C BL 0x1C16DEC
	0x0331E240 STP X30, X21, [X31 - 0x20]!
	0x0331E244 STP X20, X19, [X31 + 0x10]
	0x0331E248 ADRP X19, 0x10BE000
	0x0331E24C LDRB W8, [X19 + 0xBF4]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], X30
	003 Move [X31+48], X24
	004 Move [X31+56], X23
	005 Move [X31+64], X22
	006 Move [X31+72], X21
	007 Move [X31+80], X20
	008 Move [X31+88], X19
	009 NotImplemented "Instruction MRS not yet implemented."
	010 Move X8, [X23+40]
	011 Move X20, 0x10C0000
	012 Move X19, X2
	013 Move W22, W1
	014 Move [X31+24], X8
	015 Move W8, [X20+3056]
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {68}
	021 Move X0, 0xDD7000
	022 Move X0, [X0+2904]
	023 Call 0x1C17CF4
	024 Move X0, 0xDD8000
	025 Move X0, [X0+2520]
	026 Call 0x1C17CF4
	027 Move X0, 0xDD9000
	028 Move X0, [X0+368]
	029 Call 0x1C17CF4
	030 Move X0, 0xDD8000
	031 Move X0, [X0+2544]
	032 Call 0x1C17CF4
	033 Move X0, 0xDFF000
	034 Move X0, [X0+1520]
	035 Call 0x1C17CF4
	036 Move X0, 0xDDA000
	037 Move X0, [X0+2424]
	038 Call 0x1C17CF4
	039 Move X0, 0xE07000
	040 Move X0, [X0+3600]
	041 Call 0x1C17CF4
	042 Move X0, 0xDDB000
	043 Move X0, [X0+1576]
	044 Call 0x1C17CF4
	045 Move X0, 0xDD7000
	046 Move X0, [X0+1880]
	047 Call 0x1C17CF4
	048 Move X0, 0xDD9000
	049 Move X0, [X0+2656]
	050 Call 0x1C17CF4
	051 Move X0, 0xE00000
	052 Move X0, [X0+1712]
	053 Call 0x1C17CF4
	054 Move X0, 0xDD7000
	055 Move X0, [X0+2704]
	056 Call 0x1C17CF4
	057 Move X0, 0xDDC000
	058 Move X0, [X0+1624]
	059 Call 0x1C17CF4
	060 Move X0, 0xDDF000
	061 Move X0, [X0+1824]
	062 Call 0x1C17CF4
	063 Move X0, 0xDD8000
	064 Move X0, [X0+1880]
	065 Call 0x1C17CF4
	066 Move W8, 1
	067 Move [X20+3056], W8
	068 Compare X21, 0
	069 JumpIfEqual {100}
	070 Move X24, 0xE07000
	071 Move X24, [X24+3600]
	072 Move X0, X21
	073 Move X1, [X24]
	074 Call 0x1C17E00
	075 Compare X0, 0
	076 JumpIfEqual {503}
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X9, -41443328
	079 Move W8, W22
	080 Add X9, X9, 1604
	081 NotImplemented "Instruction ADR not yet implemented."
	082 NotImplemented "Instruction LDRH not yet implemented."
	083 Add X10, X10, X11
	084 Move X20, X0
	085 CallNoReturn X10
	086 Move X8, [X20]
	087 Move X1, [X24]
	088 NotImplemented "Instruction LDRH not yet implemented."
	089 Compare X9, 0
	090 JumpIfEqual {97}
	091 Move X10, [X8+176]
	092 Add X10, X10, 8
	093 NotImplemented "Instruction LDUR not yet implemented."
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Subtract X9, X9, 1
	096 Add X10, X10, 16
	097 Move W2, 1
	098 Move X0, X20
	099 Call 0x1C5D788
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move W8, 1
	102 Move W9, 3
	103 NotImplemented "Instruction LSLV not yet implemented."
	104 NotImplemented "Instruction MOVK not yet implemented."
	105 And W31, W8, W9
	106 Move X21, X31
	107 Move X8, [X20]
	108 Move X1, [X24]
	109 NotImplemented "Instruction LDRH not yet implemented."
	110 Compare X9, 0
	111 JumpIfEqual {118}
	112 Move X10, [X8+176]
	113 Add X10, X10, 8
	114 NotImplemented "Instruction LDUR not yet implemented."
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Subtract X9, X9, 1
	117 Add X10, X10, 16
	118 Move W2, 12
	119 Move X0, X20
	120 Call 0x1C5D788
	121 Move X8, [X20]
	122 Move X1, [X24]
	123 NotImplemented "Instruction LDRH not yet implemented."
	124 Compare X9, 0
	125 JumpIfEqual {132}
	126 Move X10, [X8+176]
	127 Add X10, X10, 8
	128 NotImplemented "Instruction LDUR not yet implemented."
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Subtract X9, X9, 1
	131 Add X10, X10, 16
	132 Move W2, 9
	133 Move X0, X20
	134 Call 0x1C5D788
	135 Move X8, [X20]
	136 Move X1, [X24]
	137 NotImplemented "Instruction LDRH not yet implemented."
	138 Compare X9, 0
	139 JumpIfEqual {146}
	140 Move X10, [X8+176]
	141 Add X10, X10, 8
	142 NotImplemented "Instruction LDUR not yet implemented."
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Subtract X9, X9, 1
	145 Add X10, X10, 16
	146 Move W2, 14
	147 Move X0, X20
	148 Call 0x1C5D788
	149 Move X8, [X20]
	150 Move X1, [X24]
	151 NotImplemented "Instruction LDRH not yet implemented."
	152 Compare X9, 0
	153 JumpIfEqual {160}
	154 Move X10, [X8+176]
	155 Add X10, X10, 8
	156 NotImplemented "Instruction LDUR not yet implemented."
	157 NotImplemented "Instruction CMP not yet implemented."
	158 Subtract X9, X9, 1
	159 Add X10, X10, 16
	160 Move W2, 4
	161 Move X0, X20
	162 Call 0x1C5D788
	163 Move X8, [X20]
	164 Move X1, [X24]
	165 NotImplemented "Instruction LDRH not yet implemented."
	166 Compare X9, 0
	167 JumpIfEqual {174}
	168 Move X10, [X8+176]
	169 Add X10, X10, 8
	170 NotImplemented "Instruction LDUR not yet implemented."
	171 NotImplemented "Instruction CMP not yet implemented."
	172 Subtract X9, X9, 1
	173 Add X10, X10, 16
	174 Move W2, 6
	175 Move X0, X20
	176 Call 0x1C5D788
	177 Move X8, [X20]
	178 Move X1, [X24]
	179 NotImplemented "Instruction LDRH not yet implemented."
	180 Compare X9, 0
	181 JumpIfEqual {188}
	182 Move X10, [X8+176]
	183 Add X10, X10, 8
	184 NotImplemented "Instruction LDUR not yet implemented."
	185 NotImplemented "Instruction CMP not yet implemented."
	186 Subtract X9, X9, 1
	187 Add X10, X10, 16
	188 Move W2, 10
	189 Move X0, X20
	190 Call 0x1C5D788
	191 Move X8, [X20]
	192 Move X1, [X24]
	193 NotImplemented "Instruction LDRH not yet implemented."
	194 Compare X9, 0
	195 JumpIfEqual {202}
	196 Move X10, [X8+176]
	197 Add X10, X10, 8
	198 NotImplemented "Instruction LDUR not yet implemented."
	199 NotImplemented "Instruction CMP not yet implemented."
	200 Subtract X9, X9, 1
	201 Add X10, X10, 16
	202 Move W2, 15
	203 Move X0, X20
	204 Call 0x1C5D788
	205 Move X8, [X20]
	206 Move X1, [X24]
	207 NotImplemented "Instruction LDRH not yet implemented."
	208 Compare X9, 0
	209 JumpIfEqual {216}
	210 Move X10, [X8+176]
	211 Add X10, X10, 8
	212 NotImplemented "Instruction LDUR not yet implemented."
	213 NotImplemented "Instruction CMP not yet implemented."
	214 Subtract X9, X9, 1
	215 Add X10, X10, 16
	216 Move W2, 2
	217 Move X0, X20
	218 Call 0x1C5D788
	219 Move X8, [X20]
	220 Move X1, [X24]
	221 NotImplemented "Instruction LDRH not yet implemented."
	222 Compare X9, 0
	223 JumpIfEqual {230}
	224 Move X10, [X8+176]
	225 Add X10, X10, 8
	226 NotImplemented "Instruction LDUR not yet implemented."
	227 NotImplemented "Instruction CMP not yet implemented."
	228 Subtract X9, X9, 1
	229 Add X10, X10, 16
	230 Move W2, 3
	231 Move X0, X20
	232 Call 0x1C5D788
	233 Move X8, [X20]
	234 Move X1, [X24]
	235 NotImplemented "Instruction LDRH not yet implemented."
	236 Compare X9, 0
	237 JumpIfEqual {244}
	238 Move X10, [X8+176]
	239 Add X10, X10, 8
	240 NotImplemented "Instruction LDUR not yet implemented."
	241 NotImplemented "Instruction CMP not yet implemented."
	242 Subtract X9, X9, 1
	243 Add X10, X10, 16
	244 Move W2, 5
	245 Move X0, X20
	246 Call 0x1C5D788
	247 Move X8, [X20]
	248 Move X1, [X24]
	249 NotImplemented "Instruction LDRH not yet implemented."
	250 Compare X9, 0
	251 JumpIfEqual {258}
	252 Move X10, [X8+176]
	253 Add X10, X10, 8
	254 NotImplemented "Instruction LDUR not yet implemented."
	255 NotImplemented "Instruction CMP not yet implemented."
	256 Subtract X9, X9, 1
	257 Add X10, X10, 16
	258 Move W2, 7
	259 Move X0, X20
	260 Call 0x1C5D788
	261 Move X8, [X20]
	262 Move X1, [X24]
	263 NotImplemented "Instruction LDRH not yet implemented."
	264 Compare X9, 0
	265 JumpIfEqual {272}
	266 Move X10, [X8+176]
	267 Add X10, X10, 8
	268 NotImplemented "Instruction LDUR not yet implemented."
	269 NotImplemented "Instruction CMP not yet implemented."
	270 Subtract X9, X9, 1
	271 Add X10, X10, 16
	272 Move W2, 8
	273 Move X0, X20
	274 Call 0x1C5D788
	275 Move X8, [X20]
	276 Move X1, [X24]
	277 NotImplemented "Instruction LDRH not yet implemented."
	278 Compare X9, 0
	279 JumpIfEqual {286}
	280 Move X10, [X8+176]
	281 Add X10, X10, 8
	282 NotImplemented "Instruction LDUR not yet implemented."
	283 NotImplemented "Instruction CMP not yet implemented."
	284 Subtract X9, X9, 1
	285 Add X10, X10, 16
	286 Move W2, 11
	287 Move X0, X20
	288 Call 0x1C5D788
	289 Move X8, [X20]
	290 Move X1, [X24]
	291 NotImplemented "Instruction LDRH not yet implemented."
	292 Compare X9, 0
	293 JumpIfEqual {300}
	294 Move X10, [X8+176]
	295 Add X10, X10, 8
	296 NotImplemented "Instruction LDUR not yet implemented."
	297 NotImplemented "Instruction CMP not yet implemented."
	298 Subtract X9, X9, 1
	299 Add X10, X10, 16
	300 Move W2, 13
	301 Move X0, X20
	302 Call 0x1C5D788
	303 Move W9, [X10]
	304 Add W9, W9, 12
	305 Add X8, X8, W9
	306 Add X0, X8, 312
	307 Move X8, [X0]
	308 Move X2, [X0+8]
	309 Move X0, X20
	310 Move X1, X19
	311 NotImplemented "Instruction BLR not yet implemented."
	312 Move X8, 0xDDA000
	313 Move X8, [X8+2424]
	314 Move [X31+8], D0
	315 Move W9, [X10]
	316 Add W9, W9, 1
	317 Add X8, X8, W9
	318 Add X0, X8, 312
	319 Move X8, [X0]
	320 Move X2, [X0+8]
	321 Move X0, X20
	322 Move X1, X19
	323 NotImplemented "Instruction BLR not yet implemented."
	324 Move X8, 0xDD7000
	325 Move X8, [X8+2904]
	326 And W9, W0, 1
	327 Move [X31+8], W9
	328 Move W9, [X10]
	329 Add W9, W9, 9
	330 Add X8, X8, W9
	331 Add X0, X8, 312
	332 Move X8, [X0]
	333 Move X2, [X0+8]
	334 Move X0, X20
	335 Move X1, X19
	336 NotImplemented "Instruction BLR not yet implemented."
	337 Move X8, 0xDD9000
	338 Move X8, [X8+2656]
	339 Move W9, [X10]
	340 Add W9, W9, 14
	341 Add X8, X8, W9
	342 Add X0, X8, 312
	343 Move X8, [X0]
	344 Move X2, [X0+8]
	345 Move X0, X20
	346 Move X1, X19
	347 NotImplemented "Instruction BLR not yet implemented."
	348 Move X8, 0xDD8000
	349 Move X8, [X8+2544]
	350 Move W9, [X10]
	351 Add W9, W9, 4
	352 Add X8, X8, W9
	353 Add X0, X8, 312
	354 Move X8, [X0]
	355 Move X2, [X0+8]
	356 Move X0, X20
	357 Move X1, X19
	358 NotImplemented "Instruction BLR not yet implemented."
	359 Move X8, 0xDD8000
	360 Move X8, [X8+2520]
	361 Move W9, [X10]
	362 Add W9, W9, 6
	363 Add X8, X8, W9
	364 Add X0, X8, 312
	365 Move X8, [X0]
	366 Move X2, [X0+8]
	367 Move X0, X20
	368 Move X1, X19
	369 NotImplemented "Instruction BLR not yet implemented."
	370 Move X8, 0xDDC000
	371 Move X8, [X8+1624]
	372 Move W9, [X10]
	373 Add W9, W9, 10
	374 Add X8, X8, W9
	375 Add X0, X8, 312
	376 Move X8, [X0]
	377 Move X2, [X0+8]
	378 Move X0, X20
	379 Move X1, X19
	380 NotImplemented "Instruction BLR not yet implemented."
	381 Move X8, 0xDD8000
	382 Move X8, [X8+1880]
	383 Move X8, [X8]
	384 Move [X31+8], X0
	385 Move W9, [X10]
	386 Add W9, W9, 15
	387 Add X8, X8, W9
	388 Add X0, X8, 312
	389 Move X8, [X0]
	390 Move X2, [X0+8]
	391 Move X0, X20
	392 Move X1, X19
	393 NotImplemented "Instruction BLR not yet implemented."
	394 Move X8, [X23+40]
	395 Move X9, [X31+24]
	396 NotImplemented "Instruction CMP not yet implemented."
	397 Move W9, [X10]
	398 Add W9, W9, 2
	399 Add X8, X8, W9
	400 Add X0, X8, 312
	401 Move X8, [X0]
	402 Move X2, [X0+8]
	403 Move X0, X20
	404 Move X1, X19
	405 NotImplemented "Instruction BLR not yet implemented."
	406 Move X8, 0xDD8000
	407 Move X8, [X8+368]
	408 Move W9, [X10]
	409 Add W9, W9, 3
	410 Add X8, X8, W9
	411 Add X0, X8, 312
	412 Move X8, [X0]
	413 Move X2, [X0+8]
	414 Move X0, X20
	415 Move X1, X19
	416 NotImplemented "Instruction BLR not yet implemented."
	417 Move X8, 0xDFF000
	418 Move X8, [X8+1712]
	419 Move X8, [X8]
	420 Move [X31+8], W0
	421 Move W9, [X10]
	422 Add W9, W9, 5
	423 Add X8, X8, W9
	424 Add X0, X8, 312
	425 Move X8, [X0]
	426 Move X2, [X0+8]
	427 Move X0, X20
	428 Move X1, X19
	429 NotImplemented "Instruction BLR not yet implemented."
	430 Move X8, 0xDDA000
	431 Move X8, [X8+1576]
	432 Move X8, [X8]
	433 NotImplemented "Instruction STRH not yet implemented."
	434 Move W9, [X10]
	435 Add W9, W9, 7
	436 Add X8, X8, W9
	437 Add X0, X8, 312
	438 Move X8, [X0]
	439 Move X2, [X0+8]
	440 Move X0, X20
	441 Move X1, X19
	442 NotImplemented "Instruction BLR not yet implemented."
	443 Move X8, 0xDD6000
	444 Move X8, [X8+1880]
	445 Move W9, [X10]
	446 Add W9, W9, 8
	447 Add X8, X8, W9
	448 Add X0, X8, 312
	449 Move X8, [X0]
	450 Move X2, [X0+8]
	451 Move X0, X20
	452 Move X1, X19
	453 NotImplemented "Instruction BLR not yet implemented."
	454 Move X8, 0xDDE000
	455 Move X8, [X8+1824]
	456 Move X8, [X8]
	457 Move [X31+8], W0
	458 Move W9, [X10]
	459 Add W9, W9, 11
	460 Add X8, X8, W9
	461 Add X0, X8, 312
	462 Move X8, [X0]
	463 Move X2, [X0+8]
	464 Move X0, X20
	465 Move X1, X19
	466 NotImplemented "Instruction BLR not yet implemented."
	467 Move X8, 0xDD6000
	468 Move X8, [X8+2704]
	469 Move [X31+8], S0
	470 Move X0, [X8]
	471 Add X1, X31, 8
	472 Move W9, [X10]
	473 Add W9, W9, 13
	474 Add X8, X8, W9
	475 Add X0, X8, 312
	476 Move X8, [X0]
	477 Move X2, [X0+8]
	478 Move X0, X20
	479 Move X1, X19
	480 NotImplemented "Instruction BLR not yet implemented."
	481 Move X8, 0xDFE000
	482 Move X8, [X8+1520]
	483 Move [X31+8], X0
	484 Move [X31+16], X1
	485 Move X8, [X8]
	486 Add X1, X31, 8
	487 Move X0, X8
	488 Call 0x1C17E04
	489 Move X21, X0
	490 Move X8, [X23+40]
	491 Move X9, [X31+24]
	492 NotImplemented "Instruction CMP not yet implemented."
	493 Move X0, X21
	494 Move X20, [X31+80]
	495 Move X19, [X31+88]
	496 Move X22, [X31+64]
	497 Move X21, [X31+72]
	498 Move X24, [X31+48]
	499 Move X23, [X31+56]
	500 Move X30, [X31+32]
	501 Add X31, X31, 96
	502 Return X0
	503 Move X0, 0xDDE000
	504 Move X0, [X0+3080]
	505 Call 0x1C17D08
	506 Call 0x1C17F10
	507 Move X19, X0
	508 Move X0, 0xE0B000
	509 Move X0, [X0+344]
	510 Call 0x1C17D08
	511 Move X1, X0
	512 Move X0, X19
	513 Move X2, X31
	514 Call InvalidCastException..ctor, X0, X1
	515 Move X0, 0xE0B000
	516 Move X0, [X0+352]
	517 Call 0x1C17D08
	518 Move X1, X0
	519 Move X0, X19
	520 Call 0x1C17DEC
	521 Move X0, 0xDDE000
	522 Move X0, [X0+3080]
	523 Call 0x1C17D08
	524 Call 0x1C17F10
	525 Move X19, X0
	526 Move X0, 0xE0B000
	527 Move X0, [X0+96]
	528 Move X0, 0xDDE000
	529 Move X0, [X0+3080]
	530 Call 0x1C17D08
	531 Call 0x1C17F10
	532 Move X19, X0
	533 Move X0, 0xE0B000
	534 Move X0, [X0+88]
	535 Move X0, 0xDDE000
	536 Move X0, [X0+1400]
	537 Call 0x1C17D08
	538 Call 0x1C17F10
	539 Move X19, X0
	540 Move X0, 0xE0B000
	541 Move X0, [X0+360]
	542 Call 0x1C17D08
	543 Move X1, X0
	544 Move X0, X19
	545 Call ArgumentException..ctor, X0, X1
	546 Call 0x3EB2B20

Method: System.Object DefaultToType(System.IConvertible value, System.Type targetType, System.IFormatProvider provider)

Disassembly:
	0x03319718 LDRB W0, [X0]
	0x0331971C RET
	0x03319720 STP X30, X21, [X31 - 0x20]!
	0x03319724 STP X20, X19, [X31 + 0x10]
	0x03319728 MOV W19, W1
	0x0331972C MOV X20, X0
	0x03319730 MOV W0, W1
	0x03319734 MOV X1, X31
	0x03319738 BL 0x333B33C
	0x0331973C CBNZ X20, 0x331974C
	0x03319740 MOVZ W0, 0x30
	0x03319744 MOV X1, X31
	0x03319748 BL 0x338F3E0
	0x0331974C ADRP X21, 0x10C0000
	0x03319750 LDRB W8, [X21 + 0x762]
	0x03319754 CBZ W8, 0x3319774
	0x03319758 CBZ X20, 0x331978C
	0x0331975C MOV X0, X20
	0x03319760 MOV X1, X31
	0x03319764 BL 0x3225708
	0x03319768 LDR W20, [X20 + 0x10]
	0x0331976C MOV X21, X0
	0x03319770 B 0x3319790
	0x03319774 ADRP X0, 0xE01000
	0x03319778 LDR X0, [X0 + 0x290]
	0x0331977C BL 0x1C16CF4
	0x03319780 MOVZ W8, 0x1
	0x03319784 STRB W8, [X21 + 0x762]
	0x03319788 CBNZ X20, 0x331975C
	0x0331978C MOV X21, X31
	0x03319790 MOV X0, X31
	0x03319794 BL 0x333AE98
	0x03319798 MOV X1, X20
	0x0331979C MOV W2, W19
	0x033197A0 LDP X20, X19, [X31 + 0x10]
	0x033197A4 MOV X3, X0
	0x033197A8 MOV X0, X21
	0x033197AC LDP X30, X21, [X31], #0x20
	0x033197B0 B 0x33197B4
	0x033197B4 STR X30, [X31 - 0x40]!
	0x033197B8 STP X24, X23, [X31 + 0x10]
	0x033197BC STP X22, X21, [X31 + 0x20]
	0x033197C0 STP X20, X19, [X31 + 0x30]
	0x033197C4 ADRP X23, 0x10C3000
	0x033197C8 ADRP X24, 0xE0F000
	0x033197CC LDRB W8, [X23 + 0xBB3]
	0x033197D0 LDR X24, [X24 + 0x78]
	0x033197D4 MOV X19, X3
	0x033197D8 MOV W20, W2
	0x033197DC MOV X21, X1
	0x033197E0 MOV X22, X0
	0x033197E4 TBNZ X8, 0x0, 0x33197FC
	0x033197E8 ADRP X0, 0xE0F000
	0x033197EC LDR X0, [X0 + 0x78]
	0x033197F0 BL 0x1C16CF4
	0x033197F4 MOVZ W8, 0x1
	0x033197F8 STRB W8, [X23 + 0xBB3]
	0x033197FC LDR X0, [X24]
	0x03319800 LDR W8, [X0 + 0xE0]
	0x03319804 CBNZ W8, 0x331980C
	0x03319808 BL 0x1C16DFC
	0x0331980C MOV X0, X22
	0x03319810 MOV X1, X21
	0x03319814 MOV W2, W20
	0x03319818 MOV X3, X19
	0x0331981C MOV X4, X31
	0x03319820 BL 0x337ADF4
	0x03319824 CMP W0, 0x100
	0x03319828 B.CS 0x3319840
	0x0331982C LDP X20, X19, [X31 + 0x30]
	0x03319830 LDP X22, X21, [X31 + 0x20]
	0x03319834 LDP X24, X23, [X31 + 0x10]
	0x03319838 LDR X30, [X31], #0x40
	0x0331983C RET
	0x03319840 ADRP X0, 0xDDA000
	0x03319844 LDR X0, [X0 + 0x858]
	0x03319848 BL 0x1C16D08
	0x0331984C BL 0x1C16F10
	0x03319850 MOV X19, X0
	0x03319854 ADRP X0, 0xE0F000
	0x03319858 LDR X0, [X0 + 0x80]
	0x0331985C BL 0x1C16D08
	0x03319860 MOV X1, X0
	0x03319864 MOV X0, X19
	0x03319868 MOV X2, X31
	0x0331986C BL 0x338CB50
	0x03319870 ADRP X0, 0xE0F000
	0x03319874 LDR X0, [X0 + 0x88]
	0x03319878 BL 0x1C16D08
	0x0331987C MOV X1, X0
	0x03319880 MOV X0, X19
	0x03319884 BL 0x1C16DEC
	0x03319888 B 0x331988C
	0x0331988C MOV X19, X0
	0x03319890 CMP W1, 0x1
	0x03319894 B.NE 0x331993C
	0x03319898 MOV X0, X19
	0x0331989C BL 0x3EB1AD0
	0x033198A0 MOV X19, X0
	0x033198A4 ADRP X0, 0xDDA000
	0x033198A8 LDR X0, [X0 + 0x858]
	0x033198AC BL 0x1C16D08
	0x033198B0 LDR X8, [X19]
	0x033198B4 LDR X1, [X8]
	0x033198B8 BL 0x1C17270
	0x033198BC TBZ X0, 0x0, 0x3319914
	0x033198C0 LDR X19, [X19]
	0x033198C4 BL 0x3EB1AE0
	0x033198C8 ADRP X0, 0xDDA000
	0x033198CC LDR X0, [X0 + 0x858]
	0x033198D0 BL 0x1C16D08
	0x033198D4 BL 0x1C16F10
	0x033198D8 MOV X20, X0
	0x033198DC ADRP X0, 0xE0F000
	0x033198E0 LDR X0, [X0 + 0x80]
	0x033198E4 BL 0x1C16D08
	0x033198E8 MOV X1, X0
	0x033198EC MOV X0, X20
	0x033198F0 MOV X2, X19
	0x033198F4 MOV X3, X31
	0x033198F8 BL 0x338CB74
	0x033198FC ADRP X0, 0xE0F000
	0x03319900 LDR X0, [X0 + 0x88]
	0x03319904 BL 0x1C16D08
	0x03319908 MOV X1, X0
	0x0331990C MOV X0, X20
	0x03319910 BL 0x1C16DEC
	0x03319914 MOVZ W0, 0x8
	0x03319918 BL 0x3EB1AF0
	0x0331991C LDR X8, [X19]
	0x03319920 STR X8, [X0]
	0x03319924 ADRP X1, 0xB9B000
	0x03319928 ADD X1, X1, 0xE58
	0x0331992C MOV X2, X31
	0x03319930 BL 0x3EB1B00
	0x03319934 MOV X19, X0
	0x03319938 BL 0x3EB1AE0
	0x0331993C MOV X0, X19
	0x03319940 BL 0x1D2C690
	0x03319944 BL 0x1990590
	0x03319948 STP X30, X21, [X31 - 0x20]!
	0x0331994C STP X20, X19, [X31 + 0x10]
	0x03319950 MOV X19, X1
	0x03319954 MOV X20, X0
	0x03319958 CBNZ X0, 0x3319968
	0x0331995C MOVZ W0, 0x30
	0x03319960 MOV X1, X31
	0x03319964 BL 0x338F3E0
	0x03319968 ADRP X21, 0x10C0000
	0x0331996C LDRB W8, [X21 + 0x762]
	0x03319970 CBZ W8, 0x3319990
	0x03319974 CBZ X20, 0x33199A8
	0x03319978 MOV X0, X20
	0x0331997C MOV X1, X31
	0x03319980 BL 0x3225708
	0x03319984 LDR W21, [X20 + 0x10]
	0x03319988 MOV X20, X0
	0x0331998C B 0x33199AC
	0x03319990 ADRP X0, 0xE01000
	0x03319994 LDR X0, [X0 + 0x290]
	0x03319998 BL 0x1C16CF4
	0x0331999C MOVZ W8, 0x1
	0x033199A0 STRB W8, [X21 + 0x762]
	0x033199A4 CBNZ X20, 0x3319978
	0x033199A8 MOV X21, X31
	0x033199AC MOV X0, X19
	0x033199B0 MOV X1, X31
	0x033199B4 BL 0x333ACEC
	0x033199B8 MOV X3, X0
	0x033199BC MOV X0, X20
	0x033199C0 LDP X20, X19, [X31 + 0x10]
	0x033199C4 MOVZ W2, 0x7
	0x033199C8 MOV X1, X21
	0x033199CC LDP X30, X21, [X31], #0x20
	0x033199D0 B 0x33197B4
	0x033199D4 STR X30, [X31 - 0x30]!
	0x033199D8 STP X22, X21, [X31 + 0x10]
	0x033199DC STP X20, X19, [X31 + 0x20]
	0x033199E0 MOV W19, W1
	0x033199E4 MOV X21, X0
	0x033199E8 MOV W0, W1
	0x033199EC MOV X1, X31
	0x033199F0 MOV X20, X2
	0x033199F4 BL 0x333B33C
	0x033199F8 CBNZ X21, 0x3319A08
	0x033199FC MOVZ W0, 0x30
	0x03319A00 MOV X1, X31
	0x03319A04 BL 0x338F3E0
	0x03319A08 ADRP X22, 0x10C0000
	0x03319A0C LDRB W8, [X22 + 0x762]
	0x03319A10 CBZ W8, 0x3319A30
	0x03319A14 CBZ X21, 0x3319A48
	0x03319A18 MOV X0, X21
	0x03319A1C MOV X1, X31
	0x03319A20 BL 0x3225708
	0x03319A24 LDR W21, [X21 + 0x10]
	0x03319A28 MOV X22, X0
	0x03319A2C B 0x3319A4C
	0x03319A30 ADRP X0, 0xE01000
	0x03319A34 LDR X0, [X0 + 0x290]
	0x03319A38 BL 0x1C16CF4
	0x03319A3C MOVZ W8, 0x1
	0x03319A40 STRB W8, [X22 + 0x762]
	0x03319A44 CBNZ X21, 0x3319A18
	0x03319A48 MOV X22, X31
	0x03319A4C MOV X0, X20
	0x03319A50 MOV X1, X31
	0x03319A54 BL 0x333ACEC
	0x03319A58 MOV X3, X0
	0x03319A5C MOV X0, X22
	0x03319A60 MOV X1, X21
	0x03319A64 MOV W2, W19
	0x03319A68 LDP X20, X19, [X31 + 0x20]
	0x03319A6C LDP X22, X21, [X31 + 0x10]
	0x03319A70 LDR X30, [X31], #0x30
	0x03319A74 B 0x33197B4
	0x03319A78 STP X30, X21, [X31 - 0x20]!
	0x03319A7C STP X20, X19, [X31 + 0x10]
	0x03319A80 MOV X19, X1
	0x03319A84 CBZ X0, 0x3319AE8
	0x03319A88 ADRP X21, 0x10C0000
	0x03319A8C LDRB W8, [X21 + 0x762]
	0x03319A90 MOV X20, X0
	0x03319A94 CBNZ W8, 0x3319AAC
	0x03319A98 ADRP X0, 0xE01000
	0x03319A9C LDR X0, [X0 + 0x290]
	0x03319AA0 BL 0x1C16CF4
	0x03319AA4 MOVZ W8, 0x1
	0x03319AA8 STRB W8, [X21 + 0x762]
	0x03319AAC MOV X0, X20
	0x03319AB0 MOV X1, X31
	0x03319AB4 BL 0x3225708
	0x03319AB8 LDR W20, [X20 + 0x10]
	0x03319ABC MOV X21, X0
	0x03319AC0 MOV X0, X31
	0x03319AC4 BL 0x333AE98
	0x03319AC8 MOV X1, X20
	0x03319ACC MOV X4, X19
	0x03319AD0 LDP X20, X19, [X31 + 0x10]
	0x03319AD4 MOVZ W2, 0x7
	0x03319AD8 MOV X3, X0
	0x03319ADC MOV X0, X21
	0x03319AE0 LDP X30, X21, [X31], #0x20
	0x03319AE4 B 0x3319AF8
	0x03319AE8 STRB W31, [X19]
	0x03319AEC LDP X20, X19, [X31 + 0x10]
	0x03319AF0 LDP X30, X21, [X31], #0x20
	0x03319AF4 RET
	0x03319AF8 SUB X31, X31, 0x50
	0x03319AFC STP X30, X25, [X31 + 0x10]
	0x03319B00 STP X24, X23, [X31 + 0x20]
	0x03319B04 STP X22, X21, [X31 + 0x30]
	0x03319B08 STP X20, X19, [X31 + 0x40]
	0x03319B0C ADRP X25, 0x10C3000
	0x03319B10 ADRP X24, 0xE0F000
	0x03319B14 LDRB W8, [X25 + 0xBB4]
	0x03319B18 LDR X24, [X24 + 0x78]
	0x03319B1C MOV X19, X4
	0x03319B20 MOV X20, X3
	0x03319B24 MOV W21, W2
	0x03319B28 MOV X22, X1
	0x03319B2C MOV X23, X0
	0x03319B30 TBNZ X8, 0x0, 0x3319B48
	0x03319B34 ADRP X0, 0xE0F000
	0x03319B38 LDR X0, [X0 + 0x78]
	0x03319B3C BL 0x1C16CF4
	0x03319B40 MOVZ W8, 0x1
	0x03319B44 STRB W8, [X25 + 0xBB4]
	0x03319B48 STR W31, [X31 + 0xC]
	0x03319B4C STRB W31, [X19]
	0x03319B50 LDR X0, [X24]
	0x03319B54 LDR W8, [X0 + 0xE0]
	0x03319B58 CBNZ W8, 0x3319B60
	0x03319B5C BL 0x1C16DFC
	0x03319B60 ADD X4, X31, 0xC
	0x03319B64 MOV X0, X23
	0x03319B68 MOV X1, X22
	0x03319B6C MOV W2, W21
	0x03319B70 MOV X3, X20
	0x03319B74 MOV X5, X31
	0x03319B78 BL 0x337BEC4
	0x03319B7C TBZ X0, 0x0, 0x3319B98
	0x03319B80 LDR W8, [X31 + 0xC]
	0x03319B84 CMP W8, 0xFF
	0x03319B88 B.HI 0x3319B98
	0x03319B8C MOVZ W0, 0x1
	0x03319B90 STRB W8, [X19]
	0x03319B94 B 0x3319B9C
	0x03319B98 MOV W0, W31
	0x03319B9C LDP X20, X19, [X31 + 0x40]
	0x03319BA0 LDP X22, X21, [X31 + 0x30]
	0x03319BA4 LDP X24, X23, [X31 + 0x20]
	0x03319BA8 LDP X30, X25, [X31 + 0x10]
	0x03319BAC ADD X31, X31, 0x50
	0x03319BB0 RET
	0x03319BB4 STR X30, [X31 - 0x30]!
	0x03319BB8 STP X22, X21, [X31 + 0x10]
	0x03319BBC STP X20, X19, [X31 + 0x20]
	0x03319BC0 ADRP X22, 0x10C3000
	0x03319BC4 ADRP X20, 0xE09000
	0x03319BC8 ADRP X21, 0xE0F000
	0x03319BCC LDRB W8, [X22 + 0xBB5]
	0x03319BD0 LDR X20, [X20 + 0x1D8]
	0x03319BD4 LDR X21, [X21 + 0x78]
	0x03319BD8 MOV X19, X0
	0x03319BDC TBNZ X8, 0x0, 0x3319C00
	0x03319BE0 ADRP X0, 0xE0F000
	0x03319BE4 LDR X0, [X0 + 0x78]
	0x03319BE8 BL 0x1C16CF4
	0x03319BEC ADRP X0, 0xE09000
	0x03319BF0 LDR X0, [X0 + 0x1D8]
	0x03319BF4 BL 0x1C16CF4
	0x03319BF8 MOVZ W8, 0x1
	0x03319BFC STRB W8, [X22 + 0xBB5]
	0x03319C00 LDR X1, [X20]
	0x03319C04 LDRB W19, [X19]
	0x03319C08 MOV X0, X31
	0x03319C0C BL 0x25BF134
	0x03319C10 MOV X20, X0
	0x03319C14 LDR X0, [X21]
	0x03319C18 MOV X21, X1
	0x03319C1C LDR W8, [X0 + 0xE0]
	0x03319C20 CBNZ W8, 0x3319C28
	0x03319C24 BL 0x1C16DFC
	0x03319C28 MOV W0, W19
	0x03319C2C MOV X1, X20
	0x03319C30 MOV X2, X21
	0x03319C34 LDP X20, X19, [X31 + 0x20]
	0x03319C38 LDP X22, X21, [X31 + 0x10]
	0x03319C3C MOV X3, X31
	0x03319C40 MOV X4, X31
	0x03319C44 LDR X30, [X31], #0x30
	0x03319C48 B 0x3379D88
	0x03319C4C STR X30, [X31 - 0x30]!
	0x03319C50 STP X22, X21, [X31 + 0x10]
	0x03319C54 STP X20, X19, [X31 + 0x20]
	0x03319C58 ADRP X21, 0x10C3000
	0x03319C5C LDRB W8, [X21 + 0xBB6]
	0x03319C60 MOV X20, X1
	0x03319C64 MOV X19, X0
	0x03319C68 TBNZ X8, 0x0, 0x3319C80
	0x03319C6C ADRP X0, 0xE0F000
	0x03319C70 LDR X0, [X0 + 0x78]
	0x03319C74 BL 0x1C16CF4
	0x03319C78 MOVZ W8, 0x1
	0x03319C7C STRB W8, [X21 + 0xBB6]
	0x03319C80 ADRP X21, 0x10C0000
	0x03319C84 LDRB W8, [X21 + 0x762]
	0x03319C88 LDRB W19, [X19]
	0x03319C8C CBNZ W8, 0x3319CA4
	0x03319C90 ADRP X0, 0xE01000
	0x03319C94 LDR X0, [X0 + 0x290]
	0x03319C98 BL 0x1C16CF4
	0x03319C9C MOVZ W8, 0x1
	0x03319CA0 STRB W8, [X21 + 0x762]
	0x03319CA4 ADRP X22, 0xE0F000
	0x03319CA8 LDR X22, [X22 + 0x78]
	0x03319CAC CBZ X20, 0x3319CC8
	0x03319CB0 MOV X0, X20
	0x03319CB4 MOV X1, X31
	0x03319CB8 BL 0x3225708
	0x03319CBC LDR W20, [X20 + 0x10]
	0x03319CC0 MOV X21, X0
	0x03319CC4 B 0x3319CCC
	0x03319CC8 MOV X21, X31
	0x03319CCC LDR X0, [X22]
	0x03319CD0 LDR W8, [X0 + 0xE0]
	0x03319CD4 CBNZ W8, 0x3319CDC
	0x03319CD8 BL 0x1C16DFC
	0x03319CDC MOV W0, W19
	0x03319CE0 MOV X1, X21
	0x03319CE4 MOV X2, X20
	0x03319CE8 LDP X20, X19, [X31 + 0x20]
	0x03319CEC LDP X22, X21, [X31 + 0x10]
	0x03319CF0 MOV X3, X31
	0x03319CF4 MOV X4, X31
	0x03319CF8 LDR X30, [X31], #0x30
	0x03319CFC B 0x3379D88
	0x03319D00 STP X30, X23, [X31 - 0x30]!
	0x03319D04 STP X22, X21, [X31 + 0x10]
	0x03319D08 STP X20, X19, [X31 + 0x20]
	0x03319D0C ADRP X23, 0x10C3000
	0x03319D10 ADRP X21, 0xE09000
	0x03319D14 ADRP X22, 0xE0F000
	0x03319D18 LDRB W8, [X23 + 0xBB7]
	0x03319D1C LDR X21, [X21 + 0x1D8]
	0x03319D20 LDR X22, [X22 + 0x78]
	0x03319D24 MOV X19, X1
	0x03319D28 MOV X20, X0
	0x03319D2C TBNZ X8, 0x0, 0x3319D50
	0x03319D30 ADRP X0, 0xE0F000
	0x03319D34 LDR X0, [X0 + 0x78]
	0x03319D38 BL 0x1C16CF4
	0x03319D3C ADRP X0, 0xE09000
	0x03319D40 LDR X0, [X0 + 0x1D8]
	0x03319D44 BL 0x1C16CF4
	0x03319D48 MOVZ W8, 0x1
	0x03319D4C STRB W8, [X23 + 0xBB7]
	0x03319D50 LDR X1, [X21]
	0x03319D54 LDRB W20, [X20]
	0x03319D58 MOV X0, X31
	0x03319D5C BL 0x25BF134
	0x03319D60 MOV X21, X0
	0x03319D64 LDR X0, [X22]
	0x03319D68 MOV X22, X1
	0x03319D6C LDR W8, [X0 + 0xE0]
	0x03319D70 CBNZ W8, 0x3319D78
	0x03319D74 BL 0x1C16DFC
	0x03319D78 MOV W0, W20
	0x03319D7C MOV X1, X21
	0x03319D80 MOV X2, X22
	0x03319D84 MOV X3, X19
	0x03319D88 LDP X20, X19, [X31 + 0x20]
	0x03319D8C LDP X22, X21, [X31 + 0x10]
	0x03319D90 MOV X4, X31
	0x03319D94 LDP X30, X23, [X31], #0x30
	0x03319D98 B 0x3379D88
	0x03319D9C STP X30, X23, [X31 - 0x30]!
	0x03319DA0 STP X22, X21, [X31 + 0x10]
	0x03319DA4 STP X20, X19, [X31 + 0x20]
	0x03319DA8 ADRP X22, 0x10C3000
	0x03319DAC LDRB W8, [X22 + 0xBB8]
	0x03319DB0 MOV X19, X2
	0x03319DB4 MOV X21, X1
	0x03319DB8 MOV X20, X0
	0x03319DBC TBNZ X8, 0x0, 0x3319DD4
	0x03319DC0 ADRP X0, 0xE0F000
	0x03319DC4 LDR X0, [X0 + 0x78]
	0x03319DC8 BL 0x1C16CF4
	0x03319DCC MOVZ W8, 0x1
	0x03319DD0 STRB W8, [X22 + 0xBB8]
	0x03319DD4 ADRP X22, 0x10C0000
	0x03319DD8 LDRB W8, [X22 + 0x762]
	0x03319DDC LDRB W20, [X20]
	0x03319DE0 CBNZ W8, 0x3319DF8
	0x03319DE4 ADRP X0, 0xE01000
	0x03319DE8 LDR X0, [X0 + 0x290]
	0x03319DEC BL 0x1C16CF4
	0x03319DF0 MOVZ W8, 0x1
	0x03319DF4 STRB W8, [X22 + 0x762]
	0x03319DF8 ADRP X23, 0xE0F000
	0x03319DFC LDR X23, [X23 + 0x78]
	0x03319E00 CBZ X21, 0x3319E1C
	0x03319E04 MOV X0, X21
	0x03319E08 MOV X1, X31
	0x03319E0C BL 0x3225708
	0x03319E10 LDR W21, [X21 + 0x10]
	0x03319E14 MOV X22, X0
	0x03319E18 B 0x3319E20
	0x03319E1C MOV X22, X31
	0x03319E20 LDR X0, [X23]
	0x03319E24 LDR W8, [X0 + 0xE0]
	0x03319E28 CBNZ W8, 0x3319E30
	0x03319E2C BL 0x1C16DFC
	0x03319E30 MOV W0, W20
	0x03319E34 MOV X1, X22
	0x03319E38 MOV X2, X21
	0x03319E3C MOV X3, X19
	0x03319E40 LDP X20, X19, [X31 + 0x20]
	0x03319E44 LDP X22, X21, [X31 + 0x10]
	0x03319E48 MOV X4, X31
	0x03319E4C LDP X30, X23, [X31], #0x30
	0x03319E50 B 0x3379D88
	0x03319E54 STP X30, X27, [X31 - 0x50]!
	0x03319E58 STP X26, X25, [X31 + 0x10]
	0x03319E5C STP X24, X23, [X31 + 0x20]
	0x03319E60 STP X22, X21, [X31 + 0x30]
	0x03319E64 STP X20, X19, [X31 + 0x40]
	0x03319E68 ADRP X27, 0x10C3000
	0x03319E6C ADRP X26, 0xE0F000
	0x03319E70 LDRB W8, [X27 + 0xBB9]
	0x03319E74 LDR X26, [X26 + 0x78]
	0x03319E78 MOV X20, X6
	0x03319E7C MOV X22, X5
	0x03319E80 MOV X24, X4
	0x03319E84 MOV X19, X3
	0x03319E88 MOV X21, X2
	0x03319E8C MOV X23, X1
	0x03319E90 MOV X25, X0
	0x03319E94 TBNZ X8, 0x0, 0x3319EAC
	0x03319E98 ADRP X0, 0xE0F000
	0x03319E9C LDR X0, [X0 + 0x78]
	0x03319EA0 BL 0x1C16CF4
	0x03319EA4 MOVZ W8, 0x1
	0x03319EA8 STRB W8, [X27 + 0xBB9]
	0x03319EAC LDR X0, [X26]
	0x03319EB0 LDRB W25, [X25]
	0x03319EB4 LDR W8, [X0 + 0xE0]
	0x03319EB8 CBNZ W8, 0x3319EC0
	0x03319EBC BL 0x1C16DFC
	0x03319EC0 MOV W0, W25
	0x03319EC4 MOV X1, X24
	0x03319EC8 MOV X2, X22
	0x03319ECC MOV X3, X20
	0x03319ED0 MOV X4, X23
	0x03319ED4 MOV X5, X21
	0x03319ED8 MOV X6, X19
	0x03319EDC LDP X20, X19, [X31 + 0x40]
	0x03319EE0 LDP X22, X21, [X31 + 0x30]
	0x03319EE4 LDP X24, X23, [X31 + 0x20]
	0x03319EE8 LDP X26, X25, [X31 + 0x10]
	0x03319EEC MOV X7, X31
	0x03319EF0 LDP X30, X27, [X31], #0x50
	0x03319EF4 B 0x337A848
	0x03319EF8 MOVZ W0, 0x6
	0x03319EFC RET
	0x03319F00 STP X30, X21, [X31 - 0x20]!
	0x03319F04 STP X20, X19, [X31 + 0x10]
	0x03319F08 ADRP X21, 0x10C3000
	0x03319F0C ADRP X20, 0xDE3000
	0x03319F10 LDRB W8, [X21 + 0xBBA]
	0x03319F14 LDR X20, [X20 + 0x9E8]
	0x03319F18 MOV X19, X0
	0x03319F1C TBNZ X8, 0x0, 0x3319F34
	0x03319F20 ADRP X0, 0xDE3000
	0x03319F24 LDR X0, [X0 + 0x9E8]
	0x03319F28 BL 0x1C16CF4
	0x03319F2C MOVZ W8, 0x1
	0x03319F30 STRB W8, [X21 + 0xBBA]
	0x03319F34 LDR X0, [X20]
	0x03319F38 LDRB W19, [X19]
	0x03319F3C LDR W8, [X0 + 0xE0]
	0x03319F40 CBNZ W8, 0x3319F48
	0x03319F44 BL 0x1C16DFC
	0x03319F48 CMP W19, 0x0
	0x03319F4C LDP X20, X19, [X31 + 0x10]
	0x03319F50 CSET W0, NE
	0x03319F54 LDP X30, X21, [X31], #0x20
	0x03319F58 RET
	0x03319F5C ANDS W31, W0, 0xFF
	0x03319F60 CSET W0, NE
	0x03319F64 RET
	0x03319F68 STP X30, X21, [X31 - 0x20]!
	0x03319F6C STP X20, X19, [X31 + 0x10]
	0x03319F70 ADRP X21, 0x10C3000
	0x03319F74 ADRP X20, 0xDE3000
	0x03319F78 LDRB W8, [X21 + 0xBBB]
	0x03319F7C LDR X20, [X20 + 0x9E8]
	0x03319F80 MOV X19, X0
	0x03319F84 TBNZ X8, 0x0, 0x3319F9C
	0x03319F88 ADRP X0, 0xDE3000
	0x03319F8C LDR X0, [X0 + 0x9E8]
	0x03319F90 BL 0x1C16CF4
	0x03319F94 MOVZ W8, 0x1
	0x03319F98 STRB W8, [X21 + 0xBBB]
	0x03319F9C LDR X0, [X20]
	0x03319FA0 LDRB W19, [X19]
	0x03319FA4 LDR W8, [X0 + 0xE0]
	0x03319FA8 CBNZ W8, 0x3319FB0
	0x03319FAC BL 0x1C16DFC
	0x03319FB0 MOV W0, W19
	0x03319FB4 LDP X20, X19, [X31 + 0x10]
	0x03319FB8 LDP X30, X21, [X31], #0x20
	0x03319FBC RET
	0x03319FC0 AND W0, W0, 0xFF
	0x03319FC4 RET
	0x03319FC8 STP X30, X21, [X31 - 0x20]!
	0x03319FCC STP X20, X19, [X31 + 0x10]
	0x03319FD0 ADRP X21, 0x10C3000
	0x03319FD4 ADRP X20, 0xDE3000
	0x03319FD8 LDRB W8, [X21 + 0xBBC]
	0x03319FDC LDR X20, [X20 + 0x9E8]
	0x03319FE0 MOV X19, X0
	0x03319FE4 TBNZ X8, 0x0, 0x3319FFC
	0x03319FE8 ADRP X0, 0xDE3000
	0x03319FEC LDR X0, [X0 + 0x9E8]
	0x03319FF0 BL 0x1C16CF4
	0x03319FF4 MOVZ W8, 0x1
	0x03319FF8 STRB W8, [X21 + 0xBBC]
	0x03319FFC LDR X0, [X20]
	0x0331A000 LDRB W19, [X19]
	0x0331A004 LDR W8, [X0 + 0xE0]
	0x0331A008 CBNZ W8, 0x331A010
	0x0331A00C BL 0x1C16DFC
	0x0331A010 MOV W0, W19
	0x0331A014 LDP X20, X19, [X31 + 0x10]
	0x0331A018 LDP X30, X21, [X31], #0x20
	0x0331A01C B 0x331A020
	0x0331A020 STR X30, [X31 - 0x20]!
	0x0331A024 STP X20, X19, [X31 + 0x10]
	0x0331A028 ADRP X20, 0x10C2000
	0x0331A02C LDRB W8, [X20 + 0xC05]
	0x0331A030 MOV W19, W0
	0x0331A034 TBNZ X8, 0x0, 0x331A04C
	0x0331A038 ADRP X0, 0xDE2000
	0x0331A03C LDR X0, [X0 + 0x9E8]
	0x0331A040 BL 0x1C16CF4
	0x0331A044 MOVZ W8, 0x1
	0x0331A048 STRB W8, [X20 + 0xC05]
	0x0331A04C TBNZ X19, 0x7, 0x331A060
	0x0331A050 MOV W0, W19
	0x0331A054 LDP X20, X19, [X31 + 0x10]
	0x0331A058 LDR X30, [X31], #0x20
	0x0331A05C RET
	0x0331A060 ADRP X8, 0xDE2000
	0x0331A064 LDR X8, [X8 + 0x9E8]
	0x0331A068 LDR X0, [X8]
	0x0331A06C BL 0x19903D0
	0x0331A070 BL 0x331E02C
	0x0331A074 LDRB W0, [X0]
	0x0331A078 RET
	0x0331A07C STP X30, X21, [X31 - 0x20]!
	0x0331A080 STP X20, X19, [X31 + 0x10]
	0x0331A084 ADRP X21, 0x10C2000
	0x0331A088 ADRP X20, 0xDE2000
	0x0331A08C LDRB W8, [X21 + 0xBBD]
	0x0331A090 LDR X20, [X20 + 0x9E8]
	0x0331A094 MOV X19, X0
	0x0331A098 TBNZ X8, 0x0, 0x331A0B0
	0x0331A09C ADRP X0, 0xDE2000
	0x0331A0A0 LDR X0, [X0 + 0x9E8]
	0x0331A0A4 BL 0x1C16CF4
	0x0331A0A8 MOVZ W8, 0x1
	0x0331A0AC STRB W8, [X21 + 0xBBD]
	0x0331A0B0 LDR X0, [X20]
	0x0331A0B4 LDRB W19, [X19]
	0x0331A0B8 LDR W8, [X0 + 0xE0]
	0x0331A0BC CBNZ W8, 0x331A0C4
	0x0331A0C0 BL 0x1C16DFC
	0x0331A0C4 MOV W0, W19
	0x0331A0C8 LDP X20, X19, [X31 + 0x10]
	0x0331A0CC LDP X30, X21, [X31], #0x20
	0x0331A0D0 RET
	0x0331A0D4 AND W0, W0, 0xFF
	0x0331A0D8 RET
	0x0331A0DC STP X30, X21, [X31 - 0x20]!
	0x0331A0E0 STP X20, X19, [X31 + 0x10]
	0x0331A0E4 ADRP X21, 0x10C2000
	0x0331A0E8 ADRP X20, 0xDE2000
	0x0331A0EC LDRB W8, [X21 + 0xBBE]
	0x0331A0F0 LDR X20, [X20 + 0x9E8]
	0x0331A0F4 MOV X19, X0
	0x0331A0F8 TBNZ X8, 0x0, 0x331A110
	0x0331A0FC ADRP X0, 0xDE2000
	0x0331A100 LDR X0, [X0 + 0x9E8]
	0x0331A104 BL 0x1C16CF4
	0x0331A108 MOVZ W8, 0x1
	0x0331A10C STRB W8, [X21 + 0xBBE]
	0x0331A110 LDR X0, [X20]
	0x0331A114 LDRB W19, [X19]
	0x0331A118 LDR W8, [X0 + 0xE0]
	0x0331A11C CBNZ W8, 0x331A124
	0x0331A120 BL 0x1C16DFC
	0x0331A124 MOV W0, W19
	0x0331A128 LDP X20, X19, [X31 + 0x10]
	0x0331A12C LDP X30, X21, [X31], #0x20
	0x0331A130 RET
	0x0331A134 AND W0, W0, 0xFF
	0x0331A138 RET
	0x0331A13C STP X30, X21, [X31 - 0x20]!
	0x0331A140 STP X20, X19, [X31 + 0x10]
	0x0331A144 ADRP X21, 0x10C2000
	0x0331A148 ADRP X20, 0xDE2000
	0x0331A14C LDRB W8, [X21 + 0xBBF]
	0x0331A150 LDR X20, [X20 + 0x9E8]
	0x0331A154 MOV X19, X0
	0x0331A158 TBNZ X8, 0x0, 0x331A170
	0x0331A15C ADRP X0, 0xDE2000
	0x0331A160 LDR X0, [X0 + 0x9E8]
	0x0331A164 BL 0x1C16CF4
	0x0331A168 MOVZ W8, 0x1
	0x0331A16C STRB W8, [X21 + 0xBBF]
	0x0331A170 LDR X0, [X20]
	0x0331A174 LDRB W19, [X19]
	0x0331A178 LDR W8, [X0 + 0xE0]
	0x0331A17C CBNZ W8, 0x331A184
	0x0331A180 BL 0x1C16DFC
	0x0331A184 MOV W0, W19
	0x0331A188 LDP X20, X19, [X31 + 0x10]
	0x0331A18C LDP X30, X21, [X31], #0x20
	0x0331A190 RET
	0x0331A194 AND W0, W0, 0xFF
	0x0331A198 RET
	0x0331A19C STP X30, X21, [X31 - 0x20]!
	0x0331A1A0 STP X20, X19, [X31 + 0x10]
	0x0331A1A4 ADRP X21, 0x10C2000
	0x0331A1A8 ADRP X20, 0xDE2000
	0x0331A1AC LDRB W8, [X21 + 0xBC0]
	0x0331A1B0 LDR X20, [X20 + 0x9E8]
	0x0331A1B4 MOV X19, X0
	0x0331A1B8 TBNZ X8, 0x0, 0x331A1D0
	0x0331A1BC ADRP X0, 0xDE2000
	0x0331A1C0 LDR X0, [X0 + 0x9E8]
	0x0331A1C4 BL 0x1C16CF4
	0x0331A1C8 MOVZ W8, 0x1
	0x0331A1CC STRB W8, [X21 + 0xBC0]
	0x0331A1D0 LDR X0, [X20]
	0x0331A1D4 LDRB W19, [X19]
	0x0331A1D8 LDR W8, [X0 + 0xE0]
	0x0331A1DC CBNZ W8, 0x331A1E4
	0x0331A1E0 BL 0x1C16DFC
	0x0331A1E4 MOV W0, W19
	0x0331A1E8 LDP X20, X19, [X31 + 0x10]
	0x0331A1EC LDP X30, X21, [X31], #0x20
	0x0331A1F0 RET
	0x0331A1F4 AND W0, W0, 0xFF
	0x0331A1F8 RET
	0x0331A1FC STP X30, X21, [X31 - 0x20]!
	0x0331A200 STP X20, X19, [X31 + 0x10]
	0x0331A204 ADRP X21, 0x10C2000
	0x0331A208 ADRP X20, 0xDE2000
	0x0331A20C LDRB W8, [X21 + 0xBC1]
	0x0331A210 LDR X20, [X20 + 0x9E8]
	0x0331A214 MOV X19, X0
	0x0331A218 TBNZ X8, 0x0, 0x331A230
	0x0331A21C ADRP X0, 0xDE2000
	0x0331A220 LDR X0, [X0 + 0x9E8]
	0x0331A224 BL 0x1C16CF4
	0x0331A228 MOVZ W8, 0x1
	0x0331A22C STRB W8, [X21 + 0xBC1]
	0x0331A230 LDR X0, [X20]
	0x0331A234 LDRB W19, [X19]
	0x0331A238 LDR W8, [X0 + 0xE0]
	0x0331A23C CBNZ W8, 0x331A244
	0x0331A240 BL 0x1C16DFC
	0x0331A244 MOV X0, X19
	0x0331A248 LDP X20, X19, [X31 + 0x10]
	0x0331A24C LDP X30, X21, [X31], #0x20
	0x0331A250 RET
	0x0331A254 AND X0, X0, 0xFF
	0x0331A258 RET
	0x0331A25C STP X30, X21, [X31 - 0x20]!
	0x0331A260 STP X20, X19, [X31 + 0x10]
	0x0331A264 ADRP X21, 0x10C2000
	0x0331A268 ADRP X20, 0xDE2000
	0x0331A26C LDRB W8, [X21 + 0xBC2]
	0x0331A270 LDR X20, [X20 + 0x9E8]
	0x0331A274 MOV X19, X0
	0x0331A278 TBNZ X8, 0x0, 0x331A290
	0x0331A27C ADRP X0, 0xDE2000
	0x0331A280 LDR X0, [X0 + 0x9E8]
	0x0331A284 BL 0x1C16CF4
	0x0331A288 MOVZ W8, 0x1
	0x0331A28C STRB W8, [X21 + 0xBC2]
	0x0331A290 LDR X0, [X20]
	0x0331A294 LDRB W19, [X19]
	0x0331A298 LDR W8, [X0 + 0xE0]
	0x0331A29C CBNZ W8, 0x331A2A4
	0x0331A2A0 BL 0x1C16DFC
	0x0331A2A4 MOV X0, X19
	0x0331A2A8 LDP X20, X19, [X31 + 0x10]
	0x0331A2AC LDP X30, X21, [X31], #0x20
	0x0331A2B0 RET
	0x0331A2B4 AND X0, X0, 0xFF
	0x0331A2B8 RET
	0x0331A2BC STP X30, X21, [X31 - 0x20]!
	0x0331A2C0 STP X20, X19, [X31 + 0x10]
	0x0331A2C4 ADRP X21, 0x10C2000
	0x0331A2C8 ADRP X20, 0xDE2000
	0x0331A2CC LDRB W8, [X21 + 0xBC3]
	0x0331A2D0 LDR X20, [X20 + 0x9E8]
	0x0331A2D4 MOV X19, X0
	0x0331A2D8 TBNZ X8, 0x0, 0x331A2F0
	0x0331A2DC ADRP X0, 0xDE2000
	0x0331A2E0 LDR X0, [X0 + 0x9E8]
	0x0331A2E4 BL 0x1C16CF4
	0x0331A2E8 MOVZ W8, 0x1
	0x0331A2EC STRB W8, [X21 + 0xBC3]
	0x0331A2F0 LDR X0, [X20]
	0x0331A2F4 LDRB W19, [X19]
	0x0331A2F8 LDR W8, [X0 + 0xE0]
	0x0331A2FC CBNZ W8, 0x331A304
	0x0331A300 BL 0x1C16DFC
	0x0331A304 UCVTF S0, W19
	0x0331A308 LDP X20, X19, [X31 + 0x10]
	0x0331A30C LDP X30, X21, [X31], #0x20
	0x0331A310 RET
	0x0331A314 AND W8, W0, 0xFF
	0x0331A318 UCVTF S0, W8
	0x0331A31C RET
	0x0331A320 STP X30, X21, [X31 - 0x20]!
	0x0331A324 STP X20, X19, [X31 + 0x10]
	0x0331A328 ADRP X21, 0x10C2000
	0x0331A32C ADRP X20, 0xDE2000
	0x0331A330 LDRB W8, [X21 + 0xBC4]
	0x0331A334 LDR X20, [X20 + 0x9E8]
	0x0331A338 MOV X19, X0
	0x0331A33C TBNZ X8, 0x0, 0x331A354
	0x0331A340 ADRP X0, 0xDE2000
	0x0331A344 LDR X0, [X0 + 0x9E8]
	0x0331A348 BL 0x1C16CF4
	0x0331A34C MOVZ W8, 0x1
	0x0331A350 STRB W8, [X21 + 0xBC4]
	0x0331A354 LDR X0, [X20]
	0x0331A358 LDRB W19, [X19]
	0x0331A35C LDR W8, [X0 + 0xE0]
	0x0331A360 CBNZ W8, 0x331A368
	0x0331A364 BL 0x1C16DFC
	0x0331A368 UCVTF D0, W19
	0x0331A36C LDP X20, X19, [X31 + 0x10]
	0x0331A370 LDP X30, X21, [X31], #0x20
	0x0331A374 RET
	0x0331A378 AND W8, W0, 0xFF
	0x0331A37C UCVTF D0, W8
	0x0331A380 RET
	0x0331A384 STP X30, X21, [X31 - 0x20]!
	0x0331A388 STP X20, X19, [X31 + 0x10]
	0x0331A38C ADRP X21, 0x10C2000
	0x0331A390 ADRP X20, 0xDE2000
	0x0331A394 LDRB W8, [X21 + 0xBC5]
	0x0331A398 LDR X20, [X20 + 0x9E8]
	0x0331A39C MOV X19, X0
	0x0331A3A0 TBNZ X8, 0x0, 0x331A3B8
	0x0331A3A4 ADRP X0, 0xDE2000
	0x0331A3A8 LDR X0, [X0 + 0x9E8]
	0x0331A3AC BL 0x1C16CF4
	0x0331A3B0 MOVZ W8, 0x1
	0x0331A3B4 STRB W8, [X21 + 0xBC5]
	0x0331A3B8 LDR X0, [X20]
	0x0331A3BC LDRB W19, [X19]
	0x0331A3C0 LDR W8, [X0 + 0xE0]
	0x0331A3C4 CBNZ W8, 0x331A3CC
	0x0331A3C8 BL 0x1C16DFC
	0x0331A3CC MOV W0, W19
	0x0331A3D0 LDP X20, X19, [X31 + 0x10]
	0x0331A3D4 LDP X30, X21, [X31], #0x20
	0x0331A3D8 B 0x331A3DC
	0x0331A3DC STP X30, X21, [X31 - 0x20]!
	0x0331A3E0 STP X20, X19, [X31 + 0x10]
	0x0331A3E4 ADRP X21, 0x10C2000
	0x0331A3E8 ADRP X20, 0xE01000
	0x0331A3EC LDRB W8, [X21 + 0xC5D]
	0x0331A3F0 LDR X20, [X20 + 0x5F0]
	0x0331A3F4 MOV W19, W0
	0x0331A3F8 TBNZ X8, 0x0, 0x331A410
	0x0331A3FC ADRP X0, 0xE01000
	0x0331A400 LDR X0, [X0 + 0x5F0]
	0x0331A404 BL 0x1C16CF4
	0x0331A408 MOVZ W8, 0x1
	0x0331A40C STRB W8, [X21 + 0xC5D]
	0x0331A410 LDR X0, [X20]
	0x0331A414 LDR W8, [X0 + 0xE0]
	0x0331A418 CBNZ W8, 0x331A420
	0x0331A41C BL 0x1C16DFC
	0x0331A420 MOV W0, W19
	0x0331A424 LDP X20, X19, [X31 + 0x10]
	0x0331A428 MOV X1, X31
	0x0331A42C LDP X30, X21, [X31], #0x20
	0x0331A430 B 0x33D8EA0
	0x0331A434 STR X30, [X31 - 0x20]!
	0x0331A438 STP X20, X19, [X31 + 0x10]
	0x0331A43C ADRP X0, 0xE0E000
	0x0331A440 LDR X0, [X0 + 0x30]
	0x0331A444 BL 0x1C16D08
	0x0331A448 MOV X19, X0
	0x0331A44C ADRP X0, 0xE0B000
	0x0331A450 LDR X0, [X0 + 0x80]
	0x0331A454 BL 0x1C16D08
	0x0331A458 MOV X20, X0
	0x0331A45C ADRP X0, 0xE0B000
	0x0331A460 LDR X0, [X0 + 0x98]
	0x0331A464 BL 0x1C16D08
	0x0331A468 MOV X2, X0
	0x0331A46C MOV X0, X19
	0x0331A470 MOV X1, X20
	0x0331A474 MOV X3, X31
	0x0331A478 BL 0x320A264
	0x0331A47C MOV X19, X0
	0x0331A480 ADRP X0, 0xDE1000
	0x0331A484 LDR X0, [X0 + 0xC08]
	0x0331A488 BL 0x1C16D08
	0x0331A48C BL 0x1C16F10
	0x0331A490 MOV X1, X19
	0x0331A494 MOV X2, X31
	0x0331A498 MOV X20, X0
	0x0331A49C BL 0x337B498
	0x0331A4A0 ADRP X0, 0xE0E000
	0x0331A4A4 LDR X0, [X0 + 0x90]
	0x0331A4A8 BL 0x1C16D08
	0x0331A4AC MOV X1, X0
	0x0331A4B0 MOV X0, X20
	0x0331A4B4 BL 0x1C16DEC
	0x0331A4B8 STR X30, [X31 - 0x40]!
	0x0331A4BC STP X24, X23, [X31 + 0x10]
	0x0331A4C0 STP X22, X21, [X31 + 0x20]
	0x0331A4C4 STP X20, X19, [X31 + 0x30]
	0x0331A4C8 ADRP X24, 0x10C2000
	0x0331A4CC ADRP X23, 0xDDA000
	0x0331A4D0 ADRP X22, 0xDE2000
	0x0331A4D4 LDRB W8, [X24 + 0xBC6]
	0x0331A4D8 LDR X23, [X23 + 0x9D8]
	0x0331A4DC LDR X22, [X22 + 0x9E8]
	0x0331A4E0 MOV X19, X2
	0x0331A4E4 MOV X20, X1
	0x0331A4E8 MOV X21, X0
	0x0331A4EC TBNZ X8, 0x0, 0x331A510
	0x0331A4F0 ADRP X0, 0xDDA000
	0x0331A4F4 LDR X0, [X0 + 0x9D8]
	0x0331A4F8 BL 0x1C16CF4
	0x0331A4FC ADRP X0, 0xDE2000
	0x0331A500 LDR X0, [X0 + 0x9E8]
	0x0331A504 BL 0x1C16CF4
	0x0331A508 MOVZ W8, 0x1
	0x0331A50C STRB W8, [X24 + 0xBC6]
	0x0331A510 LDRB W8, [X21]
	0x0331A514 LDR X0, [X23]
	0x0331A518 ADD X1, X31, 0xC
	0x0331A51C STRB W8, [X31 + 0xC]
	0x0331A520 BL 0x1C16E04
	0x0331A524 LDR X8, [X22]
	0x0331A528 MOV X21, X0
	0x0331A52C LDR W9, [X8 + 0xE0]
	0x0331A530 CBNZ W9, 0x331A53C
	0x0331A534 MOV X0, X8
	0x0331A538 BL 0x1C16DFC
	0x0331A53C MOV X0, X21

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], X30
	003 Move [X31+48], X24
	004 Move [X31+56], X23
	005 Move [X31+64], X22
	006 Move [X31+72], X21
	007 Move [X31+80], X20
	008 Move [X31+88], X19
	009 NotImplemented "Instruction MRS not yet implemented."
	010 Move X8, [X22+40]
	011 Move X23, 0x10C4000
	012 Move X24, 0xDDB000
	013 Move X20, X2
	014 Move [X31+24], X8
	015 Move W8, [X23+3057]
	016 Move X24, [X24+1728]
	017 Move X21, X1
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {79}
	023 Move X0, 0xDDB000
	024 Move X0, [X0+2904]
	025 Call 0x1C17CF4
	026 Move X0, 0xDDC000
	027 Move X0, [X0+2520]
	028 Call 0x1C17CF4
	029 Move X0, 0xDDD000
	030 Move X0, [X0+368]
	031 Call 0x1C17CF4
	032 Move X0, 0xDE4000
	033 Move X0, [X0+2536]
	034 Call 0x1C17CF4
	035 Move X0, 0xDDC000
	036 Move X0, [X0+2544]
	037 Call 0x1C17CF4
	038 Move X0, 0xE03000
	039 Move X0, [X0+1520]
	040 Call 0x1C17CF4
	041 Move X0, 0xDDE000
	042 Move X0, [X0+2424]
	043 Call 0x1C17CF4
	044 Move X0, 0xDDB000
	045 Move X0, [X0+3576]
	046 Call 0x1C17CF4
	047 Move X0, 0xE0B000
	048 Move X0, [X0+3600]
	049 Call 0x1C17CF4
	050 Move X0, 0xDDF000
	051 Move X0, [X0+1576]
	052 Call 0x1C17CF4
	053 Move X0, 0xDDB000
	054 Move X0, [X0+1880]
	055 Call 0x1C17CF4
	056 Move X0, 0xDDD000
	057 Move X0, [X0+2656]
	058 Call 0x1C17CF4
	059 Move X0, 0xE04000
	060 Move X0, [X0+1712]
	061 Call 0x1C17CF4
	062 Move X0, 0xDDB000
	063 Move X0, [X0+2704]
	064 Call 0x1C17CF4
	065 Move X0, 0xDDB000
	066 Move X0, [X0+1728]
	067 Call 0x1C17CF4
	068 Move X0, 0xDE0000
	069 Move X0, [X0+1624]
	070 Call 0x1C17CF4
	071 Move X0, 0xDE3000
	072 Move X0, [X0+1824]
	073 Call 0x1C17CF4
	074 Move X0, 0xDDC000
	075 Move X0, [X0+1880]
	076 Call 0x1C17CF4
	077 Move W8, 1
	078 Move [X23+3057], W8
	079 Move X0, [X24]
	080 Move W8, [X0+224]
	081 Compare W8, 0
	082 JumpIfNotEqual {84}
	083 Call 0x1C17DFC
	084 Move X0, X21
	085 Move X1, X31
	086 Move X2, X31
	087 Call Type.op_Equality, X0, X1
	088 Move TEMP, X0
	089 And TEMP, TEMP, 1
	090 Compare TEMP, 1
	091 JumpIfEqual {771}
	092 Compare X19, 0
	093 JumpIfEqual {802}
	094 Move X0, X19
	095 Move X1, X31
	096 Call "il2cpp_vm_object_is_inst", X0
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move X23, 0xDE4000
	099 Move X23, [X23+2536]
	100 Move X0, [X23]
	101 Move W8, [X0+224]
	102 Compare W8, 0
	103 JumpIfNotEqual {106}
	104 Call 0x1C17DFC
	105 Move X0, [X23]
	106 Move X8, [X0+184]
	107 Move X9, [X8+8]
	108 Compare X9, 0
	109 JumpIfEqual {802}
	110 Move W10, [X9+24]
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Move X10, [X9+56]
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move W10, [X0+224]
	115 Compare W10, 0
	116 JumpIfNotEqual {123}
	117 Call 0x1C17DFC
	118 Move X0, [X23]
	119 Move X8, [X0+184]
	120 Move X9, [X8+8]
	121 Compare X9, 0
	122 JumpIfEqual {802}
	123 Move W10, [X9+24]
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move X10, [X9+64]
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Move W10, [X0+224]
	128 Compare W10, 0
	129 JumpIfNotEqual {136}
	130 Call 0x1C17DFC
	131 Move X0, [X23]
	132 Move X8, [X0+184]
	133 Move X9, [X8+8]
	134 Compare X9, 0
	135 JumpIfEqual {802}
	136 Move W10, [X9+24]
	137 NotImplemented "Instruction CMP not yet implemented."
	138 Move X10, [X9+72]
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Move W10, [X0+224]
	141 Compare W10, 0
	142 JumpIfNotEqual {149}
	143 Call 0x1C17DFC
	144 Move X0, [X23]
	145 Move X8, [X0+184]
	146 Move X9, [X8+8]
	147 Compare X9, 0
	148 JumpIfEqual {802}
	149 Move W10, [X9+24]
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Move X10, [X9+80]
	152 NotImplemented "Instruction CMP not yet implemented."
	153 Move W10, [X0+224]
	154 Compare W10, 0
	155 JumpIfNotEqual {162}
	156 Call 0x1C17DFC
	157 Move X0, [X23]
	158 Move X8, [X0+184]
	159 Move X9, [X8+8]
	160 Compare X9, 0
	161 JumpIfEqual {802}
	162 Move W10, [X9+24]
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Move X10, [X9+88]
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Move W10, [X0+224]
	167 Compare W10, 0
	168 JumpIfNotEqual {175}
	169 Call 0x1C17DFC
	170 Move X0, [X23]
	171 Move X8, [X0+184]
	172 Move X9, [X8+8]
	173 Compare X9, 0
	174 JumpIfEqual {802}
	175 Move W10, [X9+24]
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Move X10, [X9+96]
	178 NotImplemented "Instruction CMP not yet implemented."
	179 Move W10, [X0+224]
	180 Compare W10, 0
	181 JumpIfNotEqual {188}
	182 Call 0x1C17DFC
	183 Move X0, [X23]
	184 Move X8, [X0+184]
	185 Move X9, [X8+8]
	186 Compare X9, 0
	187 JumpIfEqual {802}
	188 Move W10, [X9+24]
	189 NotImplemented "Instruction CMP not yet implemented."
	190 Move X10, [X9+104]
	191 NotImplemented "Instruction CMP not yet implemented."
	192 Move W10, [X0+224]
	193 Compare W10, 0
	194 JumpIfNotEqual {201}
	195 Call 0x1C17DFC
	196 Move X0, [X23]
	197 Move X8, [X0+184]
	198 Move X9, [X8+8]
	199 Compare X9, 0
	200 JumpIfEqual {802}
	201 Move W10, [X9+24]
	202 NotImplemented "Instruction CMP not yet implemented."
	203 Move X10, [X9+112]
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Move W10, [X0+224]
	206 Compare W10, 0
	207 JumpIfNotEqual {214}
	208 Call 0x1C17DFC
	209 Move X0, [X23]
	210 Move X8, [X0+184]
	211 Move X9, [X8+8]
	212 Compare X9, 0
	213 JumpIfEqual {802}
	214 Move W10, [X9+24]
	215 NotImplemented "Instruction CMP not yet implemented."
	216 Move X10, [X9+120]
	217 NotImplemented "Instruction CMP not yet implemented."
	218 Move W10, [X0+224]
	219 Compare W10, 0
	220 JumpIfNotEqual {227}
	221 Call 0x1C17DFC
	222 Move X0, [X23]
	223 Move X8, [X0+184]
	224 Move X9, [X8+8]
	225 Compare X9, 0
	226 JumpIfEqual {802}
	227 Move W10, [X9+24]
	228 NotImplemented "Instruction CMP not yet implemented."
	229 Move X10, [X9+128]
	230 NotImplemented "Instruction CMP not yet implemented."
	231 Move W10, [X0+224]
	232 Compare W10, 0
	233 JumpIfNotEqual {240}
	234 Call 0x1C17DFC
	235 Move X0, [X23]
	236 Move X8, [X0+184]
	237 Move X9, [X8+8]
	238 Compare X9, 0
	239 JumpIfEqual {802}
	240 Move W10, [X9+24]
	241 NotImplemented "Instruction CMP not yet implemented."
	242 Move X10, [X9+136]
	243 NotImplemented "Instruction CMP not yet implemented."
	244 Move W10, [X0+224]
	245 Compare W10, 0
	246 JumpIfNotEqual {253}
	247 Call 0x1C17DFC
	248 Move X0, [X23]
	249 Move X8, [X0+184]
	250 Move X9, [X8+8]
	251 Compare X9, 0
	252 JumpIfEqual {802}
	253 Move W10, [X9+24]
	254 NotImplemented "Instruction CMP not yet implemented."
	255 Move X10, [X9+144]
	256 NotImplemented "Instruction CMP not yet implemented."
	257 Move W10, [X0+224]
	258 Compare W10, 0
	259 JumpIfNotEqual {266}
	260 Call 0x1C17DFC
	261 Move X0, [X23]
	262 Move X8, [X0+184]
	263 Move X9, [X8+8]
	264 Compare X9, 0
	265 JumpIfEqual {802}
	266 Move W10, [X9+24]
	267 NotImplemented "Instruction CMP not yet implemented."
	268 Move X10, [X9+152]
	269 NotImplemented "Instruction CMP not yet implemented."
	270 Move W10, [X0+224]
	271 Compare W10, 0
	272 JumpIfNotEqual {279}
	273 Call 0x1C17DFC
	274 Move X0, [X23]
	275 Move X8, [X0+184]
	276 Move X9, [X8+8]
	277 Compare X9, 0
	278 JumpIfEqual {802}
	279 Move W10, [X9+24]
	280 NotImplemented "Instruction CMP not yet implemented."
	281 Move X10, [X9+160]
	282 NotImplemented "Instruction CMP not yet implemented."
	283 Move W10, [X0+224]
	284 Compare W10, 0
	285 JumpIfNotEqual {292}
	286 Call 0x1C17DFC
	287 Move X0, [X23]
	288 Move X8, [X0+184]
	289 Move X9, [X8+8]
	290 Compare X9, 0
	291 JumpIfEqual {802}
	292 Move W10, [X9+24]
	293 NotImplemented "Instruction CMP not yet implemented."
	294 Move X10, [X9+176]
	295 NotImplemented "Instruction CMP not yet implemented."
	296 Move W10, [X0+224]
	297 Compare W10, 0
	298 JumpIfNotEqual {305}
	299 Call 0x1C17DFC
	300 Move X0, [X23]
	301 Move X8, [X0+184]
	302 Move X9, [X8+8]
	303 Compare X9, 0
	304 JumpIfEqual {802}
	305 Move W10, [X9+24]
	306 NotImplemented "Instruction CMP not yet implemented."
	307 Move X9, [X9+40]
	308 NotImplemented "Instruction CMP not yet implemented."
	309 Move W9, [X0+224]
	310 Compare W9, 0
	311 JumpIfNotEqual {315}
	312 Call 0x1C17DFC
	313 Move X8, [X23]
	314 Move X8, [X8+184]
	315 Move X8, [X8+16]
	316 NotImplemented "Instruction CMP not yet implemented."
	317 Move X9, 0xDDB000
	318 Move X9, [X9+3576]
	319 Move X8, [X19]
	320 Move X1, [X9]
	321 Move W10, [X8+304]
	322 Move W9, [X1+304]
	323 NotImplemented "Instruction CMP not yet implemented."
	324 Move X8, [X8+200]
	325 Add X8, X8, X9
	326 NotImplemented "Instruction LDUR not yet implemented."
	327 NotImplemented "Instruction CMP not yet implemented."
	328 Move X0, X19
	329 Call 0x1C181E0
	330 Move X10, 0xE0B000
	331 Move X8, [X19]
	332 Move X10, [X10+3600]
	333 NotImplemented "Instruction LDRH not yet implemented."
	334 Move X1, [X10]
	335 Compare X9, 0
	336 JumpIfEqual {343}
	337 Move X10, [X8+176]
	338 Add X10, X10, 8
	339 NotImplemented "Instruction LDUR not yet implemented."
	340 NotImplemented "Instruction CMP not yet implemented."
	341 Subtract X9, X9, 1
	342 Add X10, X10, 16
	343 Move W2, 1
	344 Move X0, X19
	345 Call 0x1C5D788
	346 Move X10, 0xE0B000
	347 Move X8, [X19]
	348 Move X10, [X10+3600]
	349 NotImplemented "Instruction LDRH not yet implemented."
	350 Move X1, [X10]
	351 Compare X9, 0
	352 JumpIfEqual {359}
	353 Move X10, [X8+176]
	354 Add X10, X10, 8
	355 NotImplemented "Instruction LDUR not yet implemented."
	356 NotImplemented "Instruction CMP not yet implemented."
	357 Subtract X9, X9, 1
	358 Add X10, X10, 16
	359 Move W2, 2
	360 Move X0, X19
	361 Call 0x1C5D788
	362 Move X10, 0xE0B000
	363 Move X8, [X19]
	364 Move X10, [X10+3600]
	365 NotImplemented "Instruction LDRH not yet implemented."
	366 Move X1, [X10]
	367 Compare X9, 0
	368 JumpIfEqual {375}
	369 Move X10, [X8+176]
	370 Add X10, X10, 8
	371 NotImplemented "Instruction LDUR not yet implemented."
	372 NotImplemented "Instruction CMP not yet implemented."
	373 Subtract X9, X9, 1
	374 Add X10, X10, 16
	375 Move W2, 3
	376 Move X0, X19
	377 Call 0x1C5D788
	378 Move W9, [X10]
	379 Add W9, W9, 1
	380 Add X8, X8, W9
	381 Add X0, X8, 312
	382 Move X8, [X0]
	383 Move X2, [X0+8]
	384 Move X0, X19
	385 Move X1, X20
	386 NotImplemented "Instruction BLR not yet implemented."
	387 Move X8, 0xDDB000
	388 Move X8, [X8+2904]
	389 And W9, W0, 1
	390 Move [X31+8], W9
	391 Move X8, [X8]
	392 Move X10, 0xE0B000
	393 Move X8, [X19]
	394 Move X10, [X10+3600]
	395 NotImplemented "Instruction LDRH not yet implemented."
	396 Move X1, [X10]
	397 Compare X9, 0
	398 JumpIfEqual {405}
	399 Move X10, [X8+176]
	400 Add X10, X10, 8
	401 NotImplemented "Instruction LDUR not yet implemented."
	402 NotImplemented "Instruction CMP not yet implemented."
	403 Subtract X9, X9, 1
	404 Add X10, X10, 16
	405 Move W2, 4
	406 Move X0, X19
	407 Call 0x1C5D788
	408 Move W9, [X10]
	409 Add W9, W9, 2
	410 Add X8, X8, W9
	411 Add X0, X8, 312
	412 Move X8, [X0]
	413 Move X2, [X0+8]
	414 Move X0, X19
	415 Move X1, X20
	416 NotImplemented "Instruction BLR not yet implemented."
	417 Move X8, 0xDDD000
	418 Move X8, [X8+368]
	419 Move X8, [X8]
	420 NotImplemented "Instruction STRH not yet implemented."
	421 Move X10, 0xE0B000
	422 Move X8, [X19]
	423 Move X10, [X10+3600]
	424 NotImplemented "Instruction LDRH not yet implemented."
	425 Move X1, [X10]
	426 Compare X9, 0
	427 JumpIfEqual {434}
	428 Move X10, [X8+176]
	429 Add X10, X10, 8
	430 NotImplemented "Instruction LDUR not yet implemented."
	431 NotImplemented "Instruction CMP not yet implemented."
	432 Subtract X9, X9, 1
	433 Add X10, X10, 16
	434 Move W2, 5
	435 Move X0, X19
	436 Call 0x1C5D788
	437 Move W9, [X10]
	438 Add W9, W9, 3
	439 Add X8, X8, W9
	440 Add X0, X8, 312
	441 Move X8, [X0]
	442 Move X2, [X0+8]
	443 Move X0, X19
	444 Move X1, X20
	445 NotImplemented "Instruction BLR not yet implemented."
	446 Move X8, 0xE04000
	447 Move X8, [X8+1712]
	448 Move X10, 0xE0B000
	449 Move X8, [X19]
	450 Move X10, [X10+3600]
	451 NotImplemented "Instruction LDRH not yet implemented."
	452 Move X1, [X10]
	453 Compare X9, 0
	454 JumpIfEqual {461}
	455 Move X10, [X8+176]
	456 Add X10, X10, 8
	457 NotImplemented "Instruction LDUR not yet implemented."
	458 NotImplemented "Instruction CMP not yet implemented."
	459 Subtract X9, X9, 1
	460 Add X10, X10, 16
	461 Move W2, 6
	462 Move X0, X19
	463 Call 0x1C5D788
	464 Move W9, [X10]
	465 Add W9, W9, 4
	466 Add X8, X8, W9
	467 Add X0, X8, 312
	468 Move X8, [X0]
	469 Move X2, [X0+8]
	470 Move X0, X19
	471 Move X1, X20
	472 NotImplemented "Instruction BLR not yet implemented."
	473 Move X8, 0xDDC000
	474 Move X8, [X8+2520]
	475 Move X8, [X8]
	476 Move [X31+8], W0
	477 Add X1, X31, 8
	478 Move X0, X8
	479 Call 0x1C17E04
	480 Move X19, X0
	481 Move X8, [X22+40]
	482 Move X9, [X31+24]
	483 NotImplemented "Instruction CMP not yet implemented."
	484 Move X0, X19
	485 Move X20, [X31+80]
	486 Move X19, [X31+88]
	487 Move X22, [X31+64]
	488 Move X21, [X31+72]
	489 Move X24, [X31+48]
	490 Move X23, [X31+56]
	491 Move X30, [X31+32]
	492 Add X31, X31, 96
	493 Return X0
	494 Move X10, 0xE0B000
	495 Move X8, [X19]
	496 Move X10, [X10+3600]
	497 NotImplemented "Instruction LDRH not yet implemented."
	498 Move X1, [X10]
	499 Compare X9, 0
	500 JumpIfEqual {507}
	501 Move X10, [X8+176]
	502 Add X10, X10, 8
	503 NotImplemented "Instruction LDUR not yet implemented."
	504 NotImplemented "Instruction CMP not yet implemented."
	505 Subtract X9, X9, 1
	506 Add X10, X10, 16
	507 Move W2, 7
	508 Move X0, X19
	509 Call 0x1C5D788
	510 Move W9, [X10]
	511 Add W9, W9, 5
	512 Add X8, X8, W9
	513 Add X0, X8, 312
	514 Move X8, [X0]
	515 Move X2, [X0+8]
	516 Move X0, X19
	517 Move X1, X20
	518 NotImplemented "Instruction BLR not yet implemented."
	519 Move X8, 0xDDF000
	520 Move X8, [X8+1576]
	521 Move X10, 0xE0B000
	522 Move X8, [X19]
	523 Move X10, [X10+3600]
	524 NotImplemented "Instruction LDRH not yet implemented."
	525 Move X1, [X10]
	526 Compare X9, 0
	527 JumpIfEqual {534}
	528 Move X10, [X8+176]
	529 Add X10, X10, 8
	530 NotImplemented "Instruction LDUR not yet implemented."
	531 NotImplemented "Instruction CMP not yet implemented."
	532 Subtract X9, X9, 1
	533 Add X10, X10, 16
	534 Move W2, 8
	535 Move X0, X19
	536 Call 0x1C5D788
	537 Move W9, [X10]
	538 Add W9, W9, 6
	539 Add X8, X8, W9
	540 Add X0, X8, 312
	541 Move X8, [X0]
	542 Move X2, [X0+8]
	543 Move X0, X19
	544 Move X1, X20
	545 NotImplemented "Instruction BLR not yet implemented."
	546 Move X8, 0xDE0000
	547 Move X8, [X8+1624]
	548 Move X10, 0xE0B000
	549 Move X8, [X19]
	550 Move X10, [X10+3600]
	551 NotImplemented "Instruction LDRH not yet implemented."
	552 Move X1, [X10]
	553 Compare X9, 0
	554 JumpIfEqual {561}
	555 Move X10, [X8+176]
	556 Add X10, X10, 8
	557 NotImplemented "Instruction LDUR not yet implemented."
	558 NotImplemented "Instruction CMP not yet implemented."
	559 Subtract X9, X9, 1
	560 Add X10, X10, 16
	561 Move W2, 9
	562 Move X0, X19
	563 Call 0x1C5D788
	564 Move W9, [X10]
	565 Add W9, W9, 7
	566 Add X8, X8, W9
	567 Add X0, X8, 312
	568 Move X8, [X0]
	569 Move X2, [X0+8]
	570 Move X0, X19
	571 Move X1, X20
	572 NotImplemented "Instruction BLR not yet implemented."
	573 Move X8, 0xDDA000
	574 Move X8, [X8+1880]
	575 Move X10, 0xE0A000
	576 Move X8, [X19]
	577 Move X10, [X10+3600]
	578 NotImplemented "Instruction LDRH not yet implemented."
	579 Move X1, [X10]
	580 Compare X9, 0
	581 JumpIfEqual {588}
	582 Move X10, [X8+176]
	583 Add X10, X10, 8
	584 NotImplemented "Instruction LDUR not yet implemented."
	585 NotImplemented "Instruction CMP not yet implemented."
	586 Subtract X9, X9, 1
	587 Add X10, X10, 16
	588 Move W2, 10
	589 Move X0, X19
	590 Call 0x1C5D788
	591 Move W9, [X10]
	592 Add W9, W9, 8
	593 Add X8, X8, W9
	594 Add X0, X8, 312
	595 Move X8, [X0]
	596 Move X2, [X0+8]
	597 Move X0, X19
	598 Move X1, X20
	599 NotImplemented "Instruction BLR not yet implemented."
	600 Move X8, 0xDE2000
	601 Move X8, [X8+1824]
	602 Move X8, [X8]
	603 Move [X31+8], W0
	604 Move X10, 0xE0A000
	605 Move X8, [X19]
	606 Move X10, [X10+3600]
	607 NotImplemented "Instruction LDRH not yet implemented."
	608 Move X1, [X10]
	609 Compare X9, 0
	610 JumpIfEqual {617}
	611 Move X10, [X8+176]
	612 Add X10, X10, 8
	613 NotImplemented "Instruction LDUR not yet implemented."
	614 NotImplemented "Instruction CMP not yet implemented."
	615 Subtract X9, X9, 1
	616 Add X10, X10, 16
	617 Move W2, 11
	618 Move X0, X19
	619 Call 0x1C5D788
	620 Move W9, [X10]
	621 Add W9, W9, 9
	622 Add X8, X8, W9
	623 Add X0, X8, 312
	624 Move X8, [X0]
	625 Move X2, [X0+8]
	626 Move X0, X19
	627 Move X1, X20
	628 NotImplemented "Instruction BLR not yet implemented."
	629 Move X8, 0xDDC000
	630 Move X8, [X8+2656]
	631 Move X10, 0xE0A000
	632 Move X8, [X19]
	633 Move X10, [X10+3600]
	634 NotImplemented "Instruction LDRH not yet implemented."
	635 Move X1, [X10]
	636 Compare X9, 0
	637 JumpIfEqual {644}
	638 Move X10, [X8+176]
	639 Add X10, X10, 8
	640 NotImplemented "Instruction LDUR not yet implemented."
	641 NotImplemented "Instruction CMP not yet implemented."
	642 Subtract X9, X9, 1
	643 Add X10, X10, 16
	644 Move W2, 12
	645 Move X0, X19
	646 Call 0x1C5D788
	647 Move W9, [X10]
	648 Add W9, W9, 10
	649 Add X8, X8, W9
	650 Add X0, X8, 312
	651 Move X8, [X0]
	652 Move X2, [X0+8]
	653 Move X0, X19
	654 Move X1, X20
	655 NotImplemented "Instruction BLR not yet implemented."
	656 Move X8, 0xDDB000
	657 Move X8, [X8+1880]
	658 Move X8, [X8]
	659 Move [X31+8], X0
	660 Move X10, 0xE0A000
	661 Move X8, [X19]
	662 Move X10, [X10+3600]
	663 NotImplemented "Instruction LDRH not yet implemented."
	664 Move X1, [X10]
	665 Compare X9, 0
	666 JumpIfEqual {673}
	667 Move X10, [X8+176]
	668 Add X10, X10, 8
	669 NotImplemented "Instruction LDUR not yet implemented."
	670 NotImplemented "Instruction CMP not yet implemented."
	671 Subtract X9, X9, 1
	672 Add X10, X10, 16
	673 Move W2, 13
	674 Move X0, X19
	675 Call 0x1C5D788
	676 Move W9, [X10]
	677 Add W9, W9, 11
	678 Add X8, X8, W9
	679 Add X0, X8, 312
	680 Move X8, [X0]
	681 Move X2, [X0+8]
	682 Move X0, X19
	683 Move X1, X20
	684 NotImplemented "Instruction BLR not yet implemented."
	685 Move X8, 0xDDA000
	686 Move X8, [X8+2704]
	687 Move [X31+8], S0
	688 Move X10, 0xE0A000
	689 Move X8, [X19]
	690 Move X10, [X10+3600]
	691 NotImplemented "Instruction LDRH not yet implemented."
	692 Move X1, [X10]
	693 Compare X9, 0
	694 JumpIfEqual {701}
	695 Move X10, [X8+176]
	696 Add X10, X10, 8
	697 NotImplemented "Instruction LDUR not yet implemented."
	698 NotImplemented "Instruction CMP not yet implemented."
	699 Subtract X9, X9, 1
	700 Add X10, X10, 16
	701 Move W2, 14
	702 Move X0, X19
	703 Call 0x1C5D788
	704 Move W9, [X10]
	705 Add W9, W9, 12
	706 Add X8, X8, W9
	707 Add X0, X8, 312
	708 Move X8, [X0]
	709 Move X2, [X0+8]
	710 Move X0, X19
	711 Move X1, X20
	712 NotImplemented "Instruction BLR not yet implemented."
	713 Move X8, 0xDDD000
	714 Move X8, [X8+2424]
	715 Move [X31+8], D0
	716 Move X0, [X8]
	717 Add X1, X31, 8
	718 Move X10, 0xE0A000
	719 Move X8, [X19]
	720 Move X10, [X10+3600]
	721 NotImplemented "Instruction LDRH not yet implemented."
	722 Move X1, [X10]
	723 Compare X9, 0
	724 JumpIfEqual {731}
	725 Move X10, [X8+176]
	726 Add X10, X10, 8
	727 NotImplemented "Instruction LDUR not yet implemented."
	728 NotImplemented "Instruction CMP not yet implemented."
	729 Subtract X9, X9, 1
	730 Add X10, X10, 16
	731 Move W2, 15
	732 Move X0, X19
	733 Call 0x1C5D788
	734 Move W9, [X10]
	735 Add W9, W9, 13
	736 Add X8, X8, W9
	737 Add X0, X8, 312
	738 Move X8, [X0]
	739 Move X2, [X0+8]
	740 Move X0, X19
	741 Move X1, X20
	742 NotImplemented "Instruction BLR not yet implemented."
	743 Move X8, 0xE02000
	744 Move X8, [X8+1520]
	745 Move [X31+8], X0
	746 Move [X31+16], X1
	747 Move W9, [X10]
	748 Add W9, W9, 14
	749 Add X8, X8, W9
	750 Add X0, X8, 312
	751 Move X8, [X0]
	752 Move X2, [X0+8]
	753 Move X0, X19
	754 Move X1, X20
	755 NotImplemented "Instruction BLR not yet implemented."
	756 Move X8, 0xDDB000
	757 Move X8, [X8+2544]
	758 Move W9, [X10]
	759 Add W9, W9, 15
	760 Add X8, X8, W9
	761 Add X0, X8, 312
	762 Move X8, [X0]
	763 Move X2, [X0+8]
	764 Move X0, X19
	765 Move X1, X20
	766 NotImplemented "Instruction BLR not yet implemented."
	767 Move X8, [X22+40]
	768 Move X9, [X31+24]
	769 NotImplemented "Instruction CMP not yet implemented."
	770 Call 0x3EB2B20
	771 Move X0, 0xDDF000
	772 Move X0, [X0+1320]
	773 Call 0x1C17D08
	774 Call 0x1C17F10
	775 Move X19, X0
	776 Move X0, 0xE0F000
	777 Move X0, [X0+72]
	778 Call 0x1C17D08
	779 Move X1, X0
	780 Move X0, X19
	781 Call ArgumentNullException..ctor, X0, X1
	782 Move X0, 0xE0F000
	783 Move X0, [X0+80]
	784 Call 0x1C17D08
	785 Move X1, X0
	786 Move X0, X19
	787 Call 0x1C17DEC
	788 Move X0, 0xDE3000
	789 Move X0, [X0+2536]
	790 Call 0x1C17D08
	791 Move W8, [X0+224]
	792 Compare W8, 0
	793 JumpIfNotEqual {795}
	794 Call 0x1C17DFC
	795 Move X0, 0xDE3000
	796 Move X0, [X0+2536]
	797 Call 0x1C17D08
	798 Move X8, [X0+184]
	799 Move X8, [X8+8]
	800 Compare X8, 0
	801 JumpIfNotEqual {803}
	802 Call 0x1C17F20
	803 Move W9, [X8+24]
	804 NotImplemented "Instruction CMP not yet implemented."
	805 Move X8, [X8+48]
	806 NotImplemented "Instruction CMP not yet implemented."
	807 Move X0, 0xDE2000
	808 Move X0, [X0+3080]
	809 Call 0x1C17D08
	810 Call 0x1C17F10
	811 Move X19, X0
	812 Move X0, 0xE0F000
	813 Move X0, [X0+88]
	814 Call 0x1C17D08
	815 Move X1, X0
	816 Move X0, X19
	817 Move X2, X31
	818 Call InvalidCastException..ctor, X0, X1
	819 Move X0, 0xDE3000
	820 Move X0, [X0+2536]
	821 Call 0x1C17D08
	822 Move W8, [X0+224]
	823 Compare W8, 0
	824 JumpIfNotEqual {826}
	825 Call 0x1C17DFC
	826 Move X0, 0xDE3000
	827 Move X0, [X0+2536]
	828 Call 0x1C17D08
	829 Move X8, [X0+184]
	830 Move X8, [X8+8]
	831 Compare X8, 0
	832 JumpIfEqual {802}
	833 Move W9, [X8+24]
	834 Compare W9, 0
	835 JumpIfNotEqual {837}
	836 Call 0x1C17F28
	837 Move X8, [X8+32]
	838 NotImplemented "Instruction CMP not yet implemented."
	839 Move X0, 0xDE2000
	840 Move X0, [X0+3080]
	841 Call 0x1C17D08
	842 Call 0x1C17F10
	843 Move X19, X0
	844 Move X0, 0xE0F000
	845 Move X0, [X0+96]
	846 Move X0, X19
	847 Call 0x19913C0
	848 Move X0, X19
	849 Move X1, X31
	850 Call "il2cpp_vm_object_is_inst", X0
	851 Move X19, X0
	852 Call 0x19913C0
	853 Move X8, [X19]
	854 Move X0, X19
	855 Move X9, [X8+744]
	856 Move X1, [X8+752]
	857 NotImplemented "Instruction BLR not yet implemented."
	858 Move X19, X0
	859 Move X0, X21
	860 Call 0x19913C0
	861 Move X8, [X21]
	862 Move X0, X21
	863 Move X9, [X8+744]
	864 Move X1, [X8+752]
	865 NotImplemented "Instruction BLR not yet implemented."
	866 Move X20, X0
	867 Move X0, 0xE0F000
	868 Move X0, [X0+48]
	869 Call 0x1C17D08
	870 Move X1, X19
	871 Move X2, X20
	872 Move X3, X31
	873 Call String.Format, X0, X1, X2
	874 Move X19, X0
	875 Move X0, 0xDE2000
	876 Move X0, [X0+3080]
	877 Call 0x1C17D08
	878 Call 0x1C17F10
	879 Move X1, X19
	880 Move X2, X31
	881 Move X20, X0
	882 Call InvalidCastException..ctor, X0, X1
	883 Move X0, 0xE0F000
	884 Move X0, [X0+80]
	885 Call 0x1C17D08
	886 Move X1, X0
	887 Move X0, X20
	888 Call 0x1C17DEC

Method: System.Object ChangeType(System.Object value, System.Type conversionType)

Disassembly:
	0x0331E250 MOV X21, X0
	0x0331E254 TBNZ X8, 0x0, 0x331E26C
	0x0331E258 ADRP X0, 0xE05000
	0x0331E25C LDR X0, [X0 + 0xE10]
	0x0331E260 BL 0x1C16CF4
	0x0331E264 MOVZ W8, 0x1
	0x0331E268 STRB W8, [X19 + 0xBF4]
	0x0331E26C CBZ X21, 0x331E2E4
	0x0331E270 ADRP X20, 0xE05000
	0x0331E274 LDR X20, [X20 + 0xE10]
	0x0331E278 MOV X0, X21
	0x0331E27C LDR X19, [X20]
	0x0331E280 MOV X1, X19
	0x0331E284 BL 0x1C16E00
	0x0331E288 CBZ X0, 0x331E31C
	0x0331E28C LDR X20, [X20]
	0x0331E290 MOV X0, X21
	0x0331E294 MOV X1, X20
	0x0331E298 BL 0x1C16E00
	0x0331E29C CBZ X0, 0x331E328
	0x0331E2A0 LDR X8, [X0]
	0x0331E2A4 MOV X19, X0
	0x0331E2A8 LDRH W9, [X8 + 0x12E]
	0x0331E2AC CBZ X9, 0x331E2D0
	0x0331E2B0 LDR X10, [X8 + 0xB0]
	0x0331E2B4 ADD X10, X10, 0x8
	0x0331E2B8 LDUR X11, [X10 - 0x8]
	0x0331E2BC CMP X11, X20
	0x0331E2C0 B.EQ 0x331E2F4
	0x0331E2C4 SUBS X9, X9, 0x1
	0x0331E2C8 ADD X10, X10, 0x10
	0x0331E2CC B.NE 0x331E2B8
	0x0331E2D0 MOVZ W2, 0x1
	0x0331E2D4 MOV X0, X19
	0x0331E2D8 MOV X1, X20
	0x0331E2DC BL 0x1C5C788
	0x0331E2E0 B 0x331E304
	0x0331E2E4 LDP X20, X19, [X31 + 0x10]
	0x0331E2E8 MOV W0, W31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x10BF000
	007 Move X21, 0xDD8000
	008 Move W8, [X22+3058]
	009 Move X21, [X21+3144]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xDDF000
	017 Move X0, [X0+2536]
	018 Call 0x1C17CF4
	019 Move X0, 0xDD8000
	020 Move X0, [X0+3144]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+3058], W8
	024 Move X0, [X21]
	025 Move X21, 0xDDF000
	026 Move W8, [X0+224]
	027 Move X21, [X21+2536]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X31
	032 Call CultureInfo.get_CurrentCulture
	033 Move X8, [X21]
	034 Move X21, X0
	035 Move W9, [X8+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {40}
	038 Move X0, X8
	039 Call 0x1C17DFC
	040 Move X0, X20
	041 Move X1, X19
	042 Move X2, X21
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X22, [X31+16]
	046 Move X21, [X31+24]
	047 Move X30, [X31+48]

Method: System.Object ChangeType(System.Object value, System.Type conversionType, System.IFormatProvider provider)

Disassembly:
	0x0331E2EC LDP X30, X21, [X31], #0x20
	0x0331E2F0 RET
	0x0331E2F4 LDR W9, [X10]
	0x0331E2F8 ADD W9, W9, 0x1
	0x0331E2FC ADD X8, X8, W9, 0x4, SXTW
	0x0331E300 ADD X0, X8, 0x138
	0x0331E304 LDP X3, X2, [X0]
	0x0331E308 MOV X0, X19
	0x0331E30C LDP X20, X19, [X31 + 0x10]
	0x0331E310 MOV X1, X31
	0x0331E314 LDP X30, X21, [X31], #0x20
	0x0331E318 BR X3
	0x0331E31C MOV X0, X21
	0x0331E320 MOV X1, X19
	0x0331E324 BL 0x1C171E0
	0x0331E328 MOV X0, X21
	0x0331E32C MOV X1, X20
	0x0331E330 BL 0x1C171E0
	0x0331E334 STR X30, [X31 - 0x30]!
	0x0331E338 STP X22, X21, [X31 + 0x10]
	0x0331E33C STP X20, X19, [X31 + 0x20]
	0x0331E340 ADRP X20, 0x10BE000
	0x0331E344 LDRB W8, [X20 + 0xBF5]
	0x0331E348 MOV X19, X1
	0x0331E34C MOV X22, X0
	0x0331E350 TBNZ X8, 0x0, 0x331E368
	0x0331E354 ADRP X0, 0xE05000
	0x0331E358 LDR X0, [X0 + 0xE10]
	0x0331E35C BL 0x1C16CF4
	0x0331E360 MOVZ W8, 0x1
	0x0331E364 STRB W8, [X20 + 0xBF5]
	0x0331E368 CBZ X22, 0x331E3E0
	0x0331E36C ADRP X21, 0xE05000
	0x0331E370 LDR X21, [X21 + 0xE10]
	0x0331E374 MOV X0, X22
	0x0331E378 LDR X20, [X21]
	0x0331E37C MOV X1, X20
	0x0331E380 BL 0x1C16E00
	0x0331E384 CBZ X0, 0x331E420
	0x0331E388 LDR X21, [X21]
	0x0331E38C MOV X0, X22
	0x0331E390 MOV X1, X21
	0x0331E394 BL 0x1C16E00
	0x0331E398 CBZ X0, 0x331E42C
	0x0331E39C LDR X8, [X0]
	0x0331E3A0 MOV X20, X0
	0x0331E3A4 LDRH W9, [X8 + 0x12E]
	0x0331E3A8 CBZ X9, 0x331E3CC
	0x0331E3AC LDR X10, [X8 + 0xB0]
	0x0331E3B0 ADD X10, X10, 0x8
	0x0331E3B4 LDUR X11, [X10 - 0x8]
	0x0331E3B8 CMP X11, X21
	0x0331E3BC B.EQ 0x331E3F4
	0x0331E3C0 SUBS X9, X9, 0x1
	0x0331E3C4 ADD X10, X10, 0x10
	0x0331E3C8 B.NE 0x331E3B4
	0x0331E3CC MOVZ W2, 0x1
	0x0331E3D0 MOV X0, X20
	0x0331E3D4 MOV X1, X21
	0x0331E3D8 BL 0x1C5C788
	0x0331E3DC B 0x331E404
	0x0331E3E0 LDP X20, X19, [X31 + 0x20]
	0x0331E3E4 LDP X22, X21, [X31 + 0x10]
	0x0331E3E8 MOV W0, W31
	0x0331E3EC LDR X30, [X31], #0x30
	0x0331E3F0 RET
	0x0331E3F4 LDR W9, [X10]
	0x0331E3F8 ADD W9, W9, 0x1
	0x0331E3FC ADD X8, X8, W9, 0x4, SXTW
	0x0331E400 ADD X0, X8, 0x138
	0x0331E404 LDP X3, X2, [X0]
	0x0331E408 MOV X0, X20
	0x0331E40C MOV X1, X19
	0x0331E410 LDP X20, X19, [X31 + 0x20]
	0x0331E414 LDP X22, X21, [X31 + 0x10]
	0x0331E418 LDR X30, [X31], #0x30
	0x0331E41C BR X3
	0x0331E420 MOV X0, X22
	0x0331E424 MOV X1, X20
	0x0331E428 BL 0x1C171E0
	0x0331E42C MOV X0, X22
	0x0331E430 MOV X1, X21
	0x0331E434 BL 0x1C171E0
	0x0331E438 ANDS W31, W0, 0xFF
	0x0331E43C CSET W0, NE
	0x0331E440 RET
	0x0331E444 ANDS W31, W0, 0xFFFF
	0x0331E448 CSET W0, NE
	0x0331E44C RET
	0x0331E450 ANDS W31, W0, 0xFFFF
	0x0331E454 CSET W0, NE
	0x0331E458 RET
	0x0331E45C CMP W0, 0x0
	0x0331E460 CSET W0, NE
	0x0331E464 RET
	0x0331E468 CMP W0, 0x0
	0x0331E46C CSET W0, NE
	0x0331E470 RET
	0x0331E474 CMP X0, 0x0
	0x0331E478 CSET W0, NE
	0x0331E47C RET
	0x0331E480 CMP X0, 0x0
	0x0331E484 CSET W0, NE
	0x0331E488 RET
	0x0331E48C STR X30, [X31 - 0x20]!
	0x0331E490 STP X20, X19, [X31 + 0x10]
	0x0331E494 ADRP X20, 0x10BE000
	0x0331E498 LDRB W8, [X20 + 0xBF6]
	0x0331E49C MOV X19, X0
	0x0331E4A0 TBNZ X8, 0x0, 0x331E4B8
	0x0331E4A4 ADRP X0, 0xDD5000
	0x0331E4A8 LDR X0, [X0 + 0xB58]
	0x0331E4AC BL 0x1C16CF4
	0x0331E4B0 MOVZ W8, 0x1
	0x0331E4B4 STRB W8, [X20 + 0xBF6]
	0x0331E4B8 CBZ X19, 0x331E4E4
	0x0331E4BC ADRP X8, 0xDD5000
	0x0331E4C0 LDR X8, [X8 + 0xB58]
	0x0331E4C4 LDR X0, [X8]
	0x0331E4C8 LDR W8, [X0 + 0xE0]
	0x0331E4CC CBNZ W8, 0x331E4D4
	0x0331E4D0 BL 0x1C16DFC
	0x0331E4D4 MOV X0, X19
	0x0331E4D8 LDP X20, X19, [X31 + 0x10]
	0x0331E4DC LDR X30, [X31], #0x20
	0x0331E4E0 B 0x331790C
	0x0331E4E4 LDP X20, X19, [X31 + 0x10]
	0x0331E4E8 MOV W0, W31
	0x0331E4EC LDR X30, [X31], #0x20
	0x0331E4F0 RET
	0x0331E4F4 STR X30, [X31 - 0x20]!
	0x0331E4F8 STP X20, X19, [X31 + 0x10]
	0x0331E4FC ADRP X20, 0x10BE000
	0x0331E500 LDRB W8, [X20 + 0xBF7]
	0x0331E504 MOV X19, X0
	0x0331E508 TBNZ X8, 0x0, 0x331E520
	0x0331E50C ADRP X0, 0xDD5000
	0x0331E510 LDR X0, [X0 + 0xB58]
	0x0331E514 BL 0x1C16CF4
	0x0331E518 MOVZ W8, 0x1
	0x0331E51C STRB W8, [X20 + 0xBF7]
	0x0331E520 CBZ X19, 0x331E54C
	0x0331E524 ADRP X8, 0xDD5000
	0x0331E528 LDR X8, [X8 + 0xB58]
	0x0331E52C LDR X0, [X8]
	0x0331E530 LDR W8, [X0 + 0xE0]
	0x0331E534 CBNZ W8, 0x331E53C
	0x0331E538 BL 0x1C16DFC
	0x0331E53C MOV X0, X19
	0x0331E540 LDP X20, X19, [X31 + 0x10]
	0x0331E544 LDR X30, [X31], #0x20
	0x0331E548 B 0x331790C
	0x0331E54C LDP X20, X19, [X31 + 0x10]
	0x0331E550 MOV W0, W31
	0x0331E554 LDR X30, [X31], #0x20
	0x0331E558 RET
	0x0331E55C FCMP S0, 0x0
	0x0331E560 CSET W0, NE
	0x0331E564 RET
	0x0331E568 FCMP D0, 0x0
	0x0331E56C CSET W0, NE
	0x0331E570 RET
	0x0331E574 STR X30, [X31 - 0x30]!
	0x0331E578 STP X22, X21, [X31 + 0x10]
	0x0331E57C STP X20, X19, [X31 + 0x20]
	0x0331E580 ADRP X22, 0x10BE000
	0x0331E584 ADRP X21, 0xDFD000
	0x0331E588 LDRB W8, [X22 + 0xBF8]
	0x0331E58C LDR X21, [X21 + 0x5F0]
	0x0331E590 MOV X19, X1
	0x0331E594 MOV X20, X0
	0x0331E598 TBNZ X8, 0x0, 0x331E5B0
	0x0331E59C ADRP X0, 0xDFD000
	0x0331E5A0 LDR X0, [X0 + 0x5F0]
	0x0331E5A4 BL 0x1C16CF4
	0x0331E5A8 MOVZ W8, 0x1
	0x0331E5AC STRB W8, [X22 + 0xBF8]
	0x0331E5B0 LDR X0, [X21]
	0x0331E5B4 LDR W8, [X0 + 0xE0]
	0x0331E5B8 CBNZ W8, 0x331E5C4
	0x0331E5BC BL 0x1C16DFC
	0x0331E5C0 LDR X0, [X21]
	0x0331E5C4 LDR X8, [X0 + 0xB8]
	0x0331E5C8 MOV X0, X20
	0x0331E5CC MOV X1, X19
	0x0331E5D0 LDP X20, X19, [X31 + 0x20]
	0x0331E5D4 LDP X2, X3, [X8]
	0x0331E5D8 LDP X22, X21, [X31 + 0x10]
	0x0331E5DC MOV X4, X31
	0x0331E5E0 LDR X30, [X31], #0x30
	0x0331E5E4 B 0x33DA760
	0x0331E5E8 STP X30, X21, [X31 - 0x20]!
	0x0331E5EC STP X20, X19, [X31 + 0x10]
	0x0331E5F0 ADRP X19, 0x10BE000
	0x0331E5F4 LDRB W8, [X19 + 0xBF9]
	0x0331E5F8 MOV X21, X0
	0x0331E5FC TBNZ X8, 0x0, 0x331E614
	0x0331E600 ADRP X0, 0xE05000
	0x0331E604 LDR X0, [X0 + 0xE10]
	0x0331E608 BL 0x1C16CF4
	0x0331E60C MOVZ W8, 0x1
	0x0331E610 STRB W8, [X19 + 0xBF9]
	0x0331E614 CBZ X21, 0x331E68C
	0x0331E618 ADRP X20, 0xE05000
	0x0331E61C LDR X20, [X20 + 0xE10]
	0x0331E620 MOV X0, X21
	0x0331E624 LDR X19, [X20]
	0x0331E628 MOV X1, X19
	0x0331E62C BL 0x1C16E00
	0x0331E630 CBZ X0, 0x331E6C4
	0x0331E634 LDR X20, [X20]
	0x0331E638 MOV X0, X21
	0x0331E63C MOV X1, X20
	0x0331E640 BL 0x1C16E00
	0x0331E644 CBZ X0, 0x331E6D0
	0x0331E648 LDR X8, [X0]
	0x0331E64C MOV X19, X0
	0x0331E650 LDRH W9, [X8 + 0x12E]
	0x0331E654 CBZ X9, 0x331E678
	0x0331E658 LDR X10, [X8 + 0xB0]
	0x0331E65C ADD X10, X10, 0x8
	0x0331E660 LDUR X11, [X10 - 0x8]
	0x0331E664 CMP X11, X20
	0x0331E668 B.EQ 0x331E69C
	0x0331E66C SUBS X9, X9, 0x1
	0x0331E670 ADD X10, X10, 0x10
	0x0331E674 B.NE 0x331E660
	0x0331E678 MOVZ W2, 0x2
	0x0331E67C MOV X0, X19
	0x0331E680 MOV X1, X20
	0x0331E684 BL 0x1C5C788
	0x0331E688 B 0x331E6AC
	0x0331E68C LDP X20, X19, [X31 + 0x10]
	0x0331E690 MOV W0, W31
	0x0331E694 LDP X30, X21, [X31], #0x20
	0x0331E698 RET
	0x0331E69C LDR W9, [X10]
	0x0331E6A0 ADD W9, W9, 0x2
	0x0331E6A4 ADD X8, X8, W9, 0x4, SXTW
	0x0331E6A8 ADD X0, X8, 0x138
	0x0331E6AC LDP X3, X2, [X0]
	0x0331E6B0 MOV X0, X19
	0x0331E6B4 LDP X20, X19, [X31 + 0x10]
	0x0331E6B8 MOV X1, X31
	0x0331E6BC LDP X30, X21, [X31], #0x20
	0x0331E6C0 BR X3
	0x0331E6C4 MOV X0, X21
	0x0331E6C8 MOV X1, X19
	0x0331E6CC BL 0x1C171E0
	0x0331E6D0 MOV X0, X21
	0x0331E6D4 MOV X1, X20
	0x0331E6D8 BL 0x1C171E0
	0x0331E6DC STR X30, [X31 - 0x30]!
	0x0331E6E0 STP X22, X21, [X31 + 0x10]
	0x0331E6E4 STP X20, X19, [X31 + 0x20]
	0x0331E6E8 ADRP X20, 0x10BE000
	0x0331E6EC LDRB W8, [X20 + 0xBFA]
	0x0331E6F0 MOV X19, X1
	0x0331E6F4 MOV X22, X0
	0x0331E6F8 TBNZ X8, 0x0, 0x331E710
	0x0331E6FC ADRP X0, 0xE05000
	0x0331E700 LDR X0, [X0 + 0xE10]
	0x0331E704 BL 0x1C16CF4
	0x0331E708 MOVZ W8, 0x1
	0x0331E70C STRB W8, [X20 + 0xBFA]
	0x0331E710 CBZ X22, 0x331E788
	0x0331E714 ADRP X21, 0xE05000
	0x0331E718 LDR X21, [X21 + 0xE10]
	0x0331E71C MOV X0, X22
	0x0331E720 LDR X20, [X21]
	0x0331E724 MOV X1, X20
	0x0331E728 BL 0x1C16E00
	0x0331E72C CBZ X0, 0x331E7C8
	0x0331E730 LDR X21, [X21]
	0x0331E734 MOV X0, X22
	0x0331E738 MOV X1, X21
	0x0331E73C BL 0x1C16E00
	0x0331E740 CBZ X0, 0x331E7D4
	0x0331E744 LDR X8, [X0]
	0x0331E748 MOV X20, X0
	0x0331E74C LDRH W9, [X8 + 0x12E]
	0x0331E750 CBZ X9, 0x331E774
	0x0331E754 LDR X10, [X8 + 0xB0]
	0x0331E758 ADD X10, X10, 0x8
	0x0331E75C LDUR X11, [X10 - 0x8]
	0x0331E760 CMP X11, X21
	0x0331E764 B.EQ 0x331E79C
	0x0331E768 SUBS X9, X9, 0x1
	0x0331E76C ADD X10, X10, 0x10
	0x0331E770 B.NE 0x331E75C
	0x0331E774 MOVZ W2, 0x2
	0x0331E778 MOV X0, X20
	0x0331E77C MOV X1, X21
	0x0331E780 BL 0x1C5C788
	0x0331E784 B 0x331E7AC
	0x0331E788 LDP X20, X19, [X31 + 0x20]
	0x0331E78C LDP X22, X21, [X31 + 0x10]
	0x0331E790 MOV W0, W31
	0x0331E794 LDR X30, [X31], #0x30
	0x0331E798 RET
	0x0331E79C LDR W9, [X10]
	0x0331E7A0 ADD W9, W9, 0x2
	0x0331E7A4 ADD X8, X8, W9, 0x4, SXTW
	0x0331E7A8 ADD X0, X8, 0x138
	0x0331E7AC LDP X3, X2, [X0]
	0x0331E7B0 MOV X0, X20
	0x0331E7B4 MOV X1, X19
	0x0331E7B8 LDP X20, X19, [X31 + 0x20]
	0x0331E7BC LDP X22, X21, [X31 + 0x10]
	0x0331E7C0 LDR X30, [X31], #0x30
	0x0331E7C4 BR X3
	0x0331E7C8 MOV X0, X22
	0x0331E7CC MOV X1, X20
	0x0331E7D0 BL 0x1C171E0
	0x0331E7D4 MOV X0, X22
	0x0331E7D8 MOV X1, X21
	0x0331E7DC BL 0x1C171E0
	0x0331E7E0 STR X30, [X31 - 0x20]!
	0x0331E7E4 STP X20, X19, [X31 + 0x10]
	0x0331E7E8 ADRP X20, 0x10BE000
	0x0331E7EC LDRB W8, [X20 + 0xBFB]
	0x0331E7F0 MOV W19, W0
	0x0331E7F4 TBNZ X8, 0x0, 0x331E80C
	0x0331E7F8 ADRP X0, 0xDDE000
	0x0331E7FC LDR X0, [X0 + 0x9E8]
	0x0331E800 BL 0x1C16CF4
	0x0331E804 MOVZ W8, 0x1
	0x0331E808 STRB W8, [X20 + 0xBFB]
	0x0331E80C TBNZ X19, 0x7, 0x331E820
	0x0331E810 AND W0, W19, 0xFF
	0x0331E814 LDP X20, X19, [X31 + 0x10]
	0x0331E818 LDR X30, [X31], #0x20
	0x0331E81C RET
	0x0331E820 ADRP X8, 0xDDE000
	0x0331E824 LDR X8, [X8 + 0x9E8]
	0x0331E828 LDR X0, [X8]
	0x0331E82C BL 0x19903D0
	0x0331E830 BL 0x331DF94
	0x0331E834 STR X30, [X31 - 0x20]!
	0x0331E838 STP X20, X19, [X31 + 0x10]
	0x0331E83C ADRP X20, 0x10BE000
	0x0331E840 LDRB W8, [X20 + 0xBFC]
	0x0331E844 MOV W19, W0
	0x0331E848 TBNZ X8, 0x0, 0x331E860
	0x0331E84C ADRP X0, 0xDDE000
	0x0331E850 LDR X0, [X0 + 0x9E8]
	0x0331E854 BL 0x1C16CF4
	0x0331E858 MOVZ W8, 0x1
	0x0331E85C STRB W8, [X20 + 0xBFC]
	0x0331E860 TBNZ X19, 0xF, 0x331E874
	0x0331E864 MOV W0, W19
	0x0331E868 LDP X20, X19, [X31 + 0x10]
	0x0331E86C LDR X30, [X31], #0x20
	0x0331E870 RET
	0x0331E874 ADRP X8, 0xDDE000
	0x0331E878 LDR X8, [X8 + 0x9E8]
	0x0331E87C LDR X0, [X8]
	0x0331E880 BL 0x19903D0
	0x0331E884 BL 0x331DF94
	0x0331E888 RET
	0x0331E88C STR X30, [X31 - 0x20]!
	0x0331E890 STP X20, X19, [X31 + 0x10]
	0x0331E894 ADRP X20, 0x10BE000
	0x0331E898 LDRB W8, [X20 + 0xBFD]
	0x0331E89C MOV W19, W0
	0x0331E8A0 TBNZ X8, 0x0, 0x331E8B8
	0x0331E8A4 ADRP X0, 0xDDE000
	0x0331E8A8 LDR X0, [X0 + 0x9E8]
	0x0331E8AC BL 0x1C16CF4
	0x0331E8B0 MOVZ W8, 0x1
	0x0331E8B4 STRB W8, [X20 + 0xBFD]
	0x0331E8B8 CMP W19, 0x10000
	0x0331E8BC B.CS 0x331E8D0
	0x0331E8C0 MOV W0, W19
	0x0331E8C4 LDP X20, X19, [X31 + 0x10]
	0x0331E8C8 LDR X30, [X31], #0x20
	0x0331E8CC RET
	0x0331E8D0 ADRP X8, 0xDDE000
	0x0331E8D4 LDR X8, [X8 + 0x9E8]
	0x0331E8D8 LDR X0, [X8]
	0x0331E8DC BL 0x19903D0
	0x0331E8E0 BL 0x331DF94
	0x0331E8E4 STR X30, [X31 - 0x20]!
	0x0331E8E8 STP X20, X19, [X31 + 0x10]
	0x0331E8EC ADRP X20, 0x10BE000
	0x0331E8F0 LDRB W8, [X20 + 0xBFE]
	0x0331E8F4 MOV W19, W0
	0x0331E8F8 TBNZ X8, 0x0, 0x331E910
	0x0331E8FC ADRP X0, 0xDDE000
	0x0331E900 LDR X0, [X0 + 0x9E8]
	0x0331E904 BL 0x1C16CF4
	0x0331E908 MOVZ W8, 0x1
	0x0331E90C STRB W8, [X20 + 0xBFE]
	0x0331E910 CMP W19, 0x10000
	0x0331E914 B.CS 0x331E928
	0x0331E918 MOV W0, W19
	0x0331E91C LDP X20, X19, [X31 + 0x10]
	0x0331E920 LDR X30, [X31], #0x20
	0x0331E924 RET
	0x0331E928 ADRP X8, 0xDDE000
	0x0331E92C LDR X8, [X8 + 0x9E8]
	0x0331E930 LDR X0, [X8]
	0x0331E934 BL 0x19903D0
	0x0331E938 BL 0x331DF94
	0x0331E93C STR X30, [X31 - 0x20]!
	0x0331E940 STP X20, X19, [X31 + 0x10]
	0x0331E944 ADRP X20, 0x10BE000
	0x0331E948 LDRB W8, [X20 + 0xBFF]
	0x0331E94C MOV X19, X0
	0x0331E950 TBNZ X8, 0x0, 0x331E968
	0x0331E954 ADRP X0, 0xDDE000
	0x0331E958 LDR X0, [X0 + 0x9E8]
	0x0331E95C BL 0x1C16CF4
	0x0331E960 MOVZ W8, 0x1
	0x0331E964 STRB W8, [X20 + 0xBFF]
	0x0331E968 CMP X19, 0x10000
	0x0331E96C B.CS 0x331E980
	0x0331E970 MOV W0, W19
	0x0331E974 LDP X20, X19, [X31 + 0x10]
	0x0331E978 LDR X30, [X31], #0x20
	0x0331E97C RET
	0x0331E980 ADRP X8, 0xDDE000
	0x0331E984 LDR X8, [X8 + 0x9E8]
	0x0331E988 LDR X0, [X8]
	0x0331E98C BL 0x19903D0
	0x0331E990 BL 0x331DF94
	0x0331E994 STR X30, [X31 - 0x20]!
	0x0331E998 STP X20, X19, [X31 + 0x10]
	0x0331E99C ADRP X20, 0x10BE000
	0x0331E9A0 LDRB W8, [X20 + 0xC00]
	0x0331E9A4 MOV X19, X0
	0x0331E9A8 TBNZ X8, 0x0, 0x331E9C0
	0x0331E9AC ADRP X0, 0xDDE000
	0x0331E9B0 LDR X0, [X0 + 0x9E8]
	0x0331E9B4 BL 0x1C16CF4
	0x0331E9B8 MOVZ W8, 0x1
	0x0331E9BC STRB W8, [X20 + 0xC00]
	0x0331E9C0 CMP X19, 0x10000
	0x0331E9C4 B.CS 0x331E9D8
	0x0331E9C8 MOV W0, W19
	0x0331E9CC LDP X20, X19, [X31 + 0x10]
	0x0331E9D0 LDR X30, [X31], #0x20
	0x0331E9D4 RET
	0x0331E9D8 ADRP X8, 0xDDE000
	0x0331E9DC LDR X8, [X8 + 0x9E8]
	0x0331E9E0 LDR X0, [X8]
	0x0331E9E4 BL 0x19903D0
	0x0331E9E8 BL 0x331DF94
	0x0331E9EC STP X30, X21, [X31 - 0x20]!
	0x0331E9F0 STP X20, X19, [X31 + 0x10]
	0x0331E9F4 ADRP X20, 0x10BE000
	0x0331E9F8 ADRP X21, 0xDDE000
	0x0331E9FC LDRB W8, [X20 + 0xC01]
	0x0331EA00 LDR X21, [X21 + 0x9E8]
	0x0331EA04 MOV X19, X0
	0x0331EA08 TBNZ X8, 0x0, 0x331EA20
	0x0331EA0C ADRP X0, 0xDDE000
	0x0331EA10 LDR X0, [X0 + 0x9E8]
	0x0331EA14 BL 0x1C16CF4
	0x0331EA18 MOVZ W8, 0x1
	0x0331EA1C STRB W8, [X20 + 0xC01]
	0x0331EA20 LDR X0, [X21]
	0x0331EA24 LDR W8, [X0 + 0xE0]
	0x0331EA28 CBNZ W8, 0x331EA30
	0x0331EA2C BL 0x1C16DFC
	0x0331EA30 MOV X0, X19
	0x0331EA34 LDP X20, X19, [X31 + 0x10]
	0x0331EA38 LDP X30, X21, [X31], #0x20
	0x0331EA3C B 0x331EA40
	0x0331EA40 STP X30, X19, [X31 - 0x10]!
	0x0331EA44 CBZ X0, 0x331EA64
	0x0331EA48 LDR W8, [X0 + 0x10]
	0x0331EA4C CMP W8, 0x1
	0x0331EA50 B.NE 0x331EA94
	0x0331EA54 MOV W1, W31
	0x0331EA58 MOV X2, X31
	0x0331EA5C LDP X30, X19, [X31], #0x10
	0x0331EA60 B 0x3222A1C
	0x0331EA64 ADRP X0, 0xDDA000
	0x0331EA68 LDR X0, [X0 + 0x528]
	0x0331EA6C BL 0x1C16D08
	0x0331EA70 BL 0x1C16F10
	0x0331EA74 MOV X19, X0
	0x0331EA78 ADRP X0, 0xDDF000
	0x0331EA7C LDR X0, [X0 + 0xEC8]
	0x0331EA80 BL 0x1C16D08
	0x0331EA84 MOV X1, X0
	0x0331EA88 MOV X0, X19
	0x0331EA8C BL 0x330E100
	0x0331EA90 B 0x331EAC4
	0x0331EA94 ADRP X0, 0xE02000
	0x0331EA98 LDR X0, [X0 + 0xC08]
	0x0331EA9C BL 0x1C16D08
	0x0331EAA0 BL 0x1C16F10
	0x0331EAA4 MOV X19, X0
	0x0331EAA8 ADRP X0, 0xE0A000
	0x0331EAAC LDR X0, [X0 + 0xA8]
	0x0331EAB0 BL 0x1C16D08
	0x0331EAB4 MOV X1, X0
	0x0331EAB8 MOV X0, X19
	0x0331EABC MOV X2, X31
	0x0331EAC0 BL 0x33674A0
	0x0331EAC4 ADRP X0, 0xE0A000
	0x0331EAC8 LDR X0, [X0 + 0x210]
	0x0331EACC BL 0x1C16D08
	0x0331EAD0 MOV X1, X0
	0x0331EAD4 MOV X0, X19
	0x0331EAD8 BL 0x1C16DEC
	0x0331EADC STP X30, X21, [X31 - 0x20]!
	0x0331EAE0 STP X20, X19, [X31 + 0x10]
	0x0331EAE4 ADRP X19, 0x10BE000
	0x0331EAE8 LDRB W8, [X19 + 0xC02]
	0x0331EAEC MOV X21, X0
	0x0331EAF0 TBNZ X8, 0x0, 0x331EB08
	0x0331EAF4 ADRP X0, 0xE05000
	0x0331EAF8 LDR X0, [X0 + 0xE10]
	0x0331EAFC BL 0x1C16CF4
	0x0331EB00 MOVZ W8, 0x1
	0x0331EB04 STRB W8, [X19 + 0xC02]
	0x0331EB08 CBZ X21, 0x331EB80
	0x0331EB0C ADRP X20, 0xE05000
	0x0331EB10 LDR X20, [X20 + 0xE10]
	0x0331EB14 MOV X0, X21
	0x0331EB18 LDR X19, [X20]
	0x0331EB1C MOV X1, X19
	0x0331EB20 BL 0x1C16E00
	0x0331EB24 CBZ X0, 0x331EBB8
	0x0331EB28 LDR X20, [X20]
	0x0331EB2C MOV X0, X21
	0x0331EB30 MOV X1, X20
	0x0331EB34 BL 0x1C16E00
	0x0331EB38 CBZ X0, 0x331EBC4
	0x0331EB3C LDR X8, [X0]
	0x0331EB40 MOV X19, X0
	0x0331EB44 LDRH W9, [X8 + 0x12E]
	0x0331EB48 CBZ X9, 0x331EB6C
	0x0331EB4C LDR X10, [X8 + 0xB0]
	0x0331EB50 ADD X10, X10, 0x8
	0x0331EB54 LDUR X11, [X10 - 0x8]
	0x0331EB58 CMP X11, X20
	0x0331EB5C B.EQ 0x331EB90
	0x0331EB60 SUBS X9, X9, 0x1
	0x0331EB64 ADD X10, X10, 0x10
	0x0331EB68 B.NE 0x331EB54
	0x0331EB6C MOVZ W2, 0x3
	0x0331EB70 MOV X0, X19
	0x0331EB74 MOV X1, X20
	0x0331EB78 BL 0x1C5C788
	0x0331EB7C B 0x331EBA0
	0x0331EB80 LDP X20, X19, [X31 + 0x10]
	0x0331EB84 MOV W0, W31
	0x0331EB88 LDP X30, X21, [X31], #0x20
	0x0331EB8C RET
	0x0331EB90 LDR W9, [X10]
	0x0331EB94 ADD W9, W9, 0x3
	0x0331EB98 ADD X8, X8, W9, 0x4, SXTW
	0x0331EB9C ADD X0, X8, 0x138
	0x0331EBA0 LDP X3, X2, [X0]
	0x0331EBA4 MOV X0, X19
	0x0331EBA8 LDP X20, X19, [X31 + 0x10]
	0x0331EBAC MOV X1, X31
	0x0331EBB0 LDP X30, X21, [X31], #0x20
	0x0331EBB4 BR X3
	0x0331EBB8 MOV X0, X21
	0x0331EBBC MOV X1, X19
	0x0331EBC0 BL 0x1C171E0
	0x0331EBC4 MOV X0, X21
	0x0331EBC8 MOV X1, X20
	0x0331EBCC BL 0x1C171E0
	0x0331EBD0 STR X30, [X31 - 0x30]!
	0x0331EBD4 STP X22, X21, [X31 + 0x10]
	0x0331EBD8 STP X20, X19, [X31 + 0x20]
	0x0331EBDC ADRP X20, 0x10BE000
	0x0331EBE0 LDRB W8, [X20 + 0xC03]
	0x0331EBE4 MOV X19, X1
	0x0331EBE8 MOV X22, X0
	0x0331EBEC TBNZ X8, 0x0, 0x331EC04
	0x0331EBF0 ADRP X0, 0xE05000
	0x0331EBF4 LDR X0, [X0 + 0xE10]
	0x0331EBF8 BL 0x1C16CF4
	0x0331EBFC MOVZ W8, 0x1
	0x0331EC00 STRB W8, [X20 + 0xC03]
	0x0331EC04 CBZ X22, 0x331EC7C
	0x0331EC08 ADRP X21, 0xE05000
	0x0331EC0C LDR X21, [X21 + 0xE10]
	0x0331EC10 MOV X0, X22
	0x0331EC14 LDR X20, [X21]
	0x0331EC18 MOV X1, X20
	0x0331EC1C BL 0x1C16E00
	0x0331EC20 CBZ X0, 0x331ECBC
	0x0331EC24 LDR X21, [X21]
	0x0331EC28 MOV X0, X22
	0x0331EC2C MOV X1, X21
	0x0331EC30 BL 0x1C16E00
	0x0331EC34 CBZ X0, 0x331ECC8
	0x0331EC38 LDR X8, [X0]
	0x0331EC3C MOV X20, X0
	0x0331EC40 LDRH W9, [X8 + 0x12E]
	0x0331EC44 CBZ X9, 0x331EC68
	0x0331EC48 LDR X10, [X8 + 0xB0]
	0x0331EC4C ADD X10, X10, 0x8
	0x0331EC50 LDUR X11, [X10 - 0x8]
	0x0331EC54 CMP X11, X21
	0x0331EC58 B.EQ 0x331EC90
	0x0331EC5C SUBS X9, X9, 0x1
	0x0331EC60 ADD X10, X10, 0x10
	0x0331EC64 B.NE 0x331EC50
	0x0331EC68 MOVZ W2, 0x3
	0x0331EC6C MOV X0, X20
	0x0331EC70 MOV X1, X21
	0x0331EC74 BL 0x1C5C788
	0x0331EC78 B 0x331ECA0
	0x0331EC7C LDP X20, X19, [X31 + 0x20]
	0x0331EC80 LDP X22, X21, [X31 + 0x10]
	0x0331EC84 MOV W0, W31
	0x0331EC88 LDR X30, [X31], #0x30
	0x0331EC8C RET
	0x0331EC90 LDR W9, [X10]
	0x0331EC94 ADD W9, W9, 0x3
	0x0331EC98 ADD X8, X8, W9, 0x4, SXTW
	0x0331EC9C ADD X0, X8, 0x138
	0x0331ECA0 LDP X3, X2, [X0]
	0x0331ECA4 MOV X0, X20
	0x0331ECA8 MOV X1, X19
	0x0331ECAC LDP X20, X19, [X31 + 0x20]
	0x0331ECB0 LDP X22, X21, [X31 + 0x10]
	0x0331ECB4 LDR X30, [X31], #0x30
	0x0331ECB8 BR X3
	0x0331ECBC MOV X0, X22
	0x0331ECC0 MOV X1, X20
	0x0331ECC4 BL 0x1C171E0
	0x0331ECC8 MOV X0, X22
	0x0331ECCC MOV X1, X21
	0x0331ECD0 BL 0x1C171E0
	0x0331ECD4 STR X30, [X31 - 0x20]!
	0x0331ECD8 STP X20, X19, [X31 + 0x10]
	0x0331ECDC ADRP X20, 0x10BE000
	0x0331ECE0 LDRB W8, [X20 + 0xC06]
	0x0331ECE4 MOV W19, W0
	0x0331ECE8 TBNZ X8, 0x0, 0x331ED00
	0x0331ECEC ADRP X0, 0xDDE000
	0x0331ECF0 LDR X0, [X0 + 0x9E8]
	0x0331ECF4 BL 0x1C16CF4
	0x0331ECF8 MOVZ W8, 0x1
	0x0331ECFC STRB W8, [X20 + 0xC06]
	0x0331ED00 SXTB W8, W19
	0x0331ED04 AND W8, W8, 0xFFFF
	0x0331ED08 CMP W8, W19, UXTH
	0x0331ED0C B.NE 0x331ED20
	0x0331ED10 MOV W0, W19
	0x0331ED14 LDP X20, X19, [X31 + 0x10]
	0x0331ED18 LDR X30, [X31], #0x20
	0x0331ED1C RET
	0x0331ED20 ADRP X8, 0xDDE000
	0x0331ED24 LDR X8, [X8 + 0x9E8]
	0x0331ED28 LDR X0, [X8]
	0x0331ED2C BL 0x19903D0
	0x0331ED30 BL 0x331E02C
	0x0331ED34 STR X30, [X31 - 0x20]!
	0x0331ED38 STP X20, X19, [X31 + 0x10]
	0x0331ED3C ADRP X20, 0x10BE000
	0x0331ED40 LDRB W8, [X20 + 0xC07]
	0x0331ED44 MOV W19, W0
	0x0331ED48 TBNZ X8, 0x0, 0x331ED60
	0x0331ED4C ADRP X0, 0xDDE000
	0x0331ED50 LDR X0, [X0 + 0x9E8]
	0x0331ED54 BL 0x1C16CF4
	0x0331ED58 MOVZ W8, 0x1
	0x0331ED5C STRB W8, [X20 + 0xC07]
	0x0331ED60 AND W8, W19, 0xFFFF
	0x0331ED64 CMP W8, 0x80
	0x0331ED68 B.CS 0x331ED7C
	0x0331ED6C MOV W0, W19
	0x0331ED70 LDP X20, X19, [X31 + 0x10]
	0x0331ED74 LDR X30, [X31], #0x20
	0x0331ED78 RET
	0x0331ED7C ADRP X8, 0xDDE000
	0x0331ED80 LDR X8, [X8 + 0x9E8]
	0x0331ED84 LDR X0, [X8]
	0x0331ED88 BL 0x19903D0
	0x0331ED8C BL 0x331E02C
	0x0331ED90 STR X30, [X31 - 0x20]!
	0x0331ED94 STP X20, X19, [X31 + 0x10]
	0x0331ED98 ADRP X20, 0x10BE000
	0x0331ED9C LDRB W8, [X20 + 0xC08]
	0x0331EDA0 MOV W19, W0
	0x0331EDA4 TBNZ X8, 0x0, 0x331EDBC
	0x0331EDA8 ADRP X0, 0xDDE000
	0x0331EDAC LDR X0, [X0 + 0x9E8]
	0x0331EDB0 BL 0x1C16CF4
	0x0331EDB4 MOVZ W8, 0x1
	0x0331EDB8 STRB W8, [X20 + 0xC08]
	0x0331EDBC CMP W19, W19, SXTB
	0x0331EDC0 B.NE 0x331EDD4
	0x0331EDC4 MOV W0, W19
	0x0331EDC8 LDP X20, X19, [X31 + 0x10]
	0x0331EDCC LDR X30, [X31], #0x20
	0x0331EDD0 RET
	0x0331EDD4 ADRP X8, 0xDDE000
	0x0331EDD8 LDR X8, [X8 + 0x9E8]
	0x0331EDDC LDR X0, [X8]
	0x0331EDE0 BL 0x19903D0
	0x0331EDE4 BL 0x331E02C
	0x0331EDE8 STR X30, [X31 - 0x20]!
	0x0331EDEC STP X20, X19, [X31 + 0x10]
	0x0331EDF0 ADRP X20, 0x10BE000
	0x0331EDF4 LDRB W8, [X20 + 0xC09]
	0x0331EDF8 MOV W19, W0
	0x0331EDFC TBNZ X8, 0x0, 0x331EE14
	0x0331EE00 ADRP X0, 0xDDE000
	0x0331EE04 LDR X0, [X0 + 0x9E8]
	0x0331EE08 BL 0x1C16CF4
	0x0331EE0C MOVZ W8, 0x1
	0x0331EE10 STRB W8, [X20 + 0xC09]
	0x0331EE14 CMP W19, 0x80
	0x0331EE18 B.CS 0x331EE2C
	0x0331EE1C MOV W0, W19
	0x0331EE20 LDP X20, X19, [X31 + 0x10]
	0x0331EE24 LDR X30, [X31], #0x20
	0x0331EE28 RET
	0x0331EE2C ADRP X8, 0xDDE000
	0x0331EE30 LDR X8, [X8 + 0x9E8]
	0x0331EE34 LDR X0, [X8]
	0x0331EE38 BL 0x19903D0
	0x0331EE3C BL 0x331E02C
	0x0331EE40 STR X30, [X31 - 0x20]!
	0x0331EE44 STP X20, X19, [X31 + 0x10]
	0x0331EE48 ADRP X20, 0x10BE000
	0x0331EE4C LDRB W8, [X20 + 0xC0A]
	0x0331EE50 MOV X19, X0
	0x0331EE54 TBNZ X8, 0x0, 0x331EE6C
	0x0331EE58 ADRP X0, 0xDDE000
	0x0331EE5C LDR X0, [X0 + 0x9E8]
	0x0331EE60 BL 0x1C16CF4
	0x0331EE64 MOVZ W8, 0x1
	0x0331EE68 STRB W8, [X20 + 0xC0A]
	0x0331EE6C CMP X19, W19, SXTB
	0x0331EE70 B.NE 0x331EE84
	0x0331EE74 MOV W0, W19
	0x0331EE78 LDP X20, X19, [X31 + 0x10]
	0x0331EE7C LDR X30, [X31], #0x20
	0x0331EE80 RET
	0x0331EE84 ADRP X8, 0xDDE000
	0x0331EE88 LDR X8, [X8 + 0x9E8]
	0x0331EE8C LDR X0, [X8]
	0x0331EE90 BL 0x19903D0
	0x0331EE94 BL 0x331E02C
	0x0331EE98 STR X30, [X31 - 0x20]!
	0x0331EE9C STP X20, X19, [X31 + 0x10]
	0x0331EEA0 ADRP X20, 0x10BE000
	0x0331EEA4 LDRB W8, [X20 + 0xC0B]
	0x0331EEA8 MOV X19, X0
	0x0331EEAC TBNZ X8, 0x0, 0x331EEC4
	0x0331EEB0 ADRP X0, 0xDDE000
	0x0331EEB4 LDR X0, [X0 + 0x9E8]
	0x0331EEB8 BL 0x1C16CF4
	0x0331EEBC MOVZ W8, 0x1
	0x0331EEC0 STRB W8, [X20 + 0xC0B]
	0x0331EEC4 CMP X19, 0x80
	0x0331EEC8 B.CS 0x331EEDC
	0x0331EECC MOV W0, W19
	0x0331EED0 LDP X20, X19, [X31 + 0x10]
	0x0331EED4 LDR X30, [X31], #0x20
	0x0331EED8 RET
	0x0331EEDC ADRP X8, 0xDDE000
	0x0331EEE0 LDR X8, [X8 + 0x9E8]
	0x0331EEE4 LDR X0, [X8]
	0x0331EEE8 BL 0x19903D0
	0x0331EEEC BL 0x331E02C
	0x0331EEF0 STR D8, [X31 - 0x20]!
	0x0331EEF4 STR X30, [X31 + 0x8]
	0x0331EEF8 STP X20, X19, [X31 + 0x10]
	0x0331EEFC ADRP X19, 0x10BE000
	0x0331EF00 ADRP X20, 0xDDE000
	0x0331EF04 LDRB W8, [X19 + 0xC0C]
	0x0331EF08 LDR X20, [X20 + 0x9E8]
	0x0331EF0C MOV V8.16B, V0.16B
	0x0331EF10 TBNZ X8, 0x0, 0x331EF28
	0x0331EF14 ADRP X0, 0xDDE000
	0x0331EF18 LDR X0, [X0 + 0x9E8]
	0x0331EF1C BL 0x1C16CF4
	0x0331EF20 MOVZ W8, 0x1
	0x0331EF24 STRB W8, [X19 + 0xC0C]
	0x0331EF28 LDR X0, [X20]
	0x0331EF2C LDR W8, [X0 + 0xE0]
	0x0331EF30 CBNZ W8, 0x331EF38
	0x0331EF34 BL 0x1C16DFC
	0x0331EF38 LDP X20, X19, [X31 + 0x10]
	0x0331EF3C LDR X30, [X31 + 0x8]
	0x0331EF40 FCVT S0, S8
	0x0331EF44 LDR V8, [X31], #0x20
	0x0331EF48 B 0x331EF4C
	0x0331EF4C STR D8, [X31 - 0x20]!
	0x0331EF50 STR X30, [X31 + 0x8]
	0x0331EF54 STP X20, X19, [X31 + 0x10]
	0x0331EF58 ADRP X19, 0x10BE000
	0x0331EF5C ADRP X20, 0xDDE000
	0x0331EF60 LDRB W8, [X19 + 0xC0D]
	0x0331EF64 LDR X20, [X20 + 0x9E8]
	0x0331EF68 MOV V8.16B, V0.16B
	0x0331EF6C TBNZ X8, 0x0, 0x331EF84
	0x0331EF70 ADRP X0, 0xDDE000
	0x0331EF74 LDR X0, [X0 + 0x9E8]
	0x0331EF78 BL 0x1C16CF4
	0x0331EF7C MOVZ W8, 0x1
	0x0331EF80 STRB W8, [X19 + 0xC0D]
	0x0331EF84 LDR X0, [X20]
	0x0331EF88 LDR W8, [X0 + 0xE0]
	0x0331EF8C CBNZ W8, 0x331EF94
	0x0331EF90 BL 0x1C16DFC

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], X30
	003 Move [X31+40], X25
	004 Move [X31+48], X24
	005 Move [X31+56], X23
	006 Move [X31+64], X22
	007 Move [X31+72], X21
	008 Move [X31+80], X20
	009 Move [X31+88], X19
	010 NotImplemented "Instruction MRS not yet implemented."
	011 Move X8, [X23+40]
	012 Move X20, 0x10BF000
	013 Move X19, X2
	014 Move X22, X1
	015 Move [X31+24], X8
	016 Move W8, [X20+3059]
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {75}
	022 Move X0, 0xDD6000
	023 Move X0, [X0+2904]
	024 Call 0x1C17CF4
	025 Move X0, 0xDD7000
	026 Move X0, [X0+2520]
	027 Call 0x1C17CF4
	028 Move X0, 0xDD8000
	029 Move X0, [X0+368]
	030 Call 0x1C17CF4
	031 Move X0, 0xDDF000
	032 Move X0, [X0+2536]
	033 Call 0x1C17CF4
	034 Move X0, 0xDD7000
	035 Move X0, [X0+2544]
	036 Call 0x1C17CF4
	037 Move X0, 0xDFE000
	038 Move X0, [X0+1520]
	039 Call 0x1C17CF4
	040 Move X0, 0xDD9000
	041 Move X0, [X0+2424]
	042 Call 0x1C17CF4
	043 Move X0, 0xE06000
	044 Move X0, [X0+3600]
	045 Call 0x1C17CF4
	046 Move X0, 0xDDA000
	047 Move X0, [X0+1576]
	048 Call 0x1C17CF4
	049 Move X0, 0xDD6000
	050 Move X0, [X0+1880]
	051 Call 0x1C17CF4
	052 Move X0, 0xDD8000
	053 Move X0, [X0+2656]
	054 Call 0x1C17CF4
	055 Move X0, 0xDFF000
	056 Move X0, [X0+1712]
	057 Call 0x1C17CF4
	058 Move X0, 0xDD6000
	059 Move X0, [X0+2704]
	060 Call 0x1C17CF4
	061 Move X0, 0xDD6000
	062 Move X0, [X0+1728]
	063 Call 0x1C17CF4
	064 Move X0, 0xDDB000
	065 Move X0, [X0+1624]
	066 Call 0x1C17CF4
	067 Move X0, 0xDDE000
	068 Move X0, [X0+1824]
	069 Call 0x1C17CF4
	070 Move X0, 0xDD7000
	071 Move X0, [X0+1880]
	072 Call 0x1C17CF4
	073 Move W8, 1
	074 Move [X20+3059], W8
	075 Compare X22, 0
	076 JumpIfEqual {781}
	077 Compare X21, 0
	078 JumpIfEqual {312}
	079 Move X24, 0xE06000
	080 Move X24, [X24+3600]
	081 Move X0, X21
	082 Move X1, [X24]
	083 Call 0x1C17E00
	084 Compare X0, 0
	085 JumpIfEqual {326}
	086 Move X25, 0xDDF000
	087 Move X25, [X25+2536]
	088 Move X20, X0
	089 Move X0, [X25]
	090 Move W8, [X0+224]
	091 Compare W8, 0
	092 JumpIfNotEqual {95}
	093 Call 0x1C17DFC
	094 Move X0, [X25]
	095 Move X8, [X0+184]
	096 Move X8, [X8+8]
	097 Compare X8, 0
	098 JumpIfEqual {798}
	099 Move W9, [X8+24]
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X9, [X8+56]
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move W9, [X0+224]
	104 Compare W9, 0
	105 JumpIfNotEqual {112}
	106 Call 0x1C17DFC
	107 Move X0, [X25]
	108 Move X8, [X0+184]
	109 Move X8, [X8+8]
	110 Compare X8, 0
	111 JumpIfEqual {798}
	112 Move W9, [X8+24]
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move X9, [X8+64]
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move W9, [X0+224]
	117 Compare W9, 0
	118 JumpIfNotEqual {125}
	119 Call 0x1C17DFC
	120 Move X0, [X25]
	121 Move X8, [X0+184]
	122 Move X8, [X8+8]
	123 Compare X8, 0
	124 JumpIfEqual {798}
	125 Move W9, [X8+24]
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Move X9, [X8+72]
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move W9, [X0+224]
	130 Compare W9, 0
	131 JumpIfNotEqual {138}
	132 Call 0x1C17DFC
	133 Move X0, [X25]
	134 Move X8, [X0+184]
	135 Move X8, [X8+8]
	136 Compare X8, 0
	137 JumpIfEqual {798}
	138 Move W9, [X8+24]
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Move X9, [X8+80]
	141 NotImplemented "Instruction CMP not yet implemented."
	142 Move W9, [X0+224]
	143 Compare W9, 0
	144 JumpIfNotEqual {151}
	145 Call 0x1C17DFC
	146 Move X0, [X25]
	147 Move X8, [X0+184]
	148 Move X8, [X8+8]
	149 Compare X8, 0
	150 JumpIfEqual {798}
	151 Move W9, [X8+24]
	152 NotImplemented "Instruction CMP not yet implemented."
	153 Move X9, [X8+88]
	154 NotImplemented "Instruction CMP not yet implemented."
	155 Move W9, [X0+224]
	156 Compare W9, 0
	157 JumpIfNotEqual {164}
	158 Call 0x1C17DFC
	159 Move X0, [X25]
	160 Move X8, [X0+184]
	161 Move X8, [X8+8]
	162 Compare X8, 0
	163 JumpIfEqual {798}
	164 Move W9, [X8+24]
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Move X9, [X8+96]
	167 NotImplemented "Instruction CMP not yet implemented."
	168 Move W9, [X0+224]
	169 Compare W9, 0
	170 JumpIfNotEqual {177}
	171 Call 0x1C17DFC
	172 Move X0, [X25]
	173 Move X8, [X0+184]
	174 Move X8, [X8+8]
	175 Compare X8, 0
	176 JumpIfEqual {798}
	177 Move W9, [X8+24]
	178 NotImplemented "Instruction CMP not yet implemented."
	179 Move X9, [X8+104]
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Move W9, [X0+224]
	182 Compare W9, 0
	183 JumpIfNotEqual {190}
	184 Call 0x1C17DFC
	185 Move X0, [X25]
	186 Move X8, [X0+184]
	187 Move X8, [X8+8]
	188 Compare X8, 0
	189 JumpIfEqual {798}
	190 Move W9, [X8+24]
	191 NotImplemented "Instruction CMP not yet implemented."
	192 Move X9, [X8+112]
	193 NotImplemented "Instruction CMP not yet implemented."
	194 Move W9, [X0+224]
	195 Compare W9, 0
	196 JumpIfNotEqual {203}
	197 Call 0x1C17DFC
	198 Move X0, [X25]
	199 Move X8, [X0+184]
	200 Move X8, [X8+8]
	201 Compare X8, 0
	202 JumpIfEqual {798}
	203 Move W9, [X8+24]
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Move X9, [X8+120]
	206 NotImplemented "Instruction CMP not yet implemented."
	207 Move W9, [X0+224]
	208 Compare W9, 0
	209 JumpIfNotEqual {216}
	210 Call 0x1C17DFC
	211 Move X0, [X25]
	212 Move X8, [X0+184]
	213 Move X8, [X8+8]
	214 Compare X8, 0
	215 JumpIfEqual {798}
	216 Move W9, [X8+24]
	217 NotImplemented "Instruction CMP not yet implemented."
	218 Move X9, [X8+128]
	219 NotImplemented "Instruction CMP not yet implemented."
	220 Move W9, [X0+224]
	221 Compare W9, 0
	222 JumpIfNotEqual {229}
	223 Call 0x1C17DFC
	224 Move X0, [X25]
	225 Move X8, [X0+184]
	226 Move X8, [X8+8]
	227 Compare X8, 0
	228 JumpIfEqual {798}
	229 Move W9, [X8+24]
	230 NotImplemented "Instruction CMP not yet implemented."
	231 Move X9, [X8+136]
	232 NotImplemented "Instruction CMP not yet implemented."
	233 Move W9, [X0+224]
	234 Compare W9, 0
	235 JumpIfNotEqual {242}
	236 Call 0x1C17DFC
	237 Move X0, [X25]
	238 Move X8, [X0+184]
	239 Move X8, [X8+8]
	240 Compare X8, 0
	241 JumpIfEqual {798}
	242 Move W9, [X8+24]
	243 NotImplemented "Instruction CMP not yet implemented."
	244 Move X9, [X8+144]
	245 NotImplemented "Instruction CMP not yet implemented."
	246 Move W9, [X0+224]
	247 Compare W9, 0
	248 JumpIfNotEqual {255}
	249 Call 0x1C17DFC
	250 Move X0, [X25]
	251 Move X8, [X0+184]
	252 Move X8, [X8+8]
	253 Compare X8, 0
	254 JumpIfEqual {798}
	255 Move W9, [X8+24]
	256 NotImplemented "Instruction CMP not yet implemented."
	257 Move X9, [X8+152]
	258 NotImplemented "Instruction CMP not yet implemented."
	259 Move W9, [X0+224]
	260 Compare W9, 0
	261 JumpIfNotEqual {268}
	262 Call 0x1C17DFC
	263 Move X0, [X25]
	264 Move X8, [X0+184]
	265 Move X8, [X8+8]
	266 Compare X8, 0
	267 JumpIfEqual {798}
	268 Move W9, [X8+24]
	269 NotImplemented "Instruction CMP not yet implemented."
	270 Move X9, [X8+160]
	271 NotImplemented "Instruction CMP not yet implemented."
	272 Move W9, [X0+224]
	273 Compare W9, 0
	274 JumpIfNotEqual {281}
	275 Call 0x1C17DFC
	276 Move X0, [X25]
	277 Move X8, [X0+184]
	278 Move X8, [X8+8]
	279 Compare X8, 0
	280 JumpIfEqual {798}
	281 Move W9, [X8+24]
	282 NotImplemented "Instruction CMP not yet implemented."
	283 Move X9, [X8+176]
	284 NotImplemented "Instruction CMP not yet implemented."
	285 Move W9, [X0+224]
	286 Compare W9, 0
	287 JumpIfNotEqual {294}
	288 Call 0x1C17DFC
	289 Move X8, [X25]
	290 Move X8, [X8+184]
	291 Move X8, [X8+8]
	292 Compare X8, 0
	293 JumpIfEqual {798}
	294 Move W9, [X8+24]
	295 NotImplemented "Instruction CMP not yet implemented."
	296 Move X8, [X8+40]
	297 NotImplemented "Instruction CMP not yet implemented."
	298 Move X8, [X20]
	299 Move X1, [X24]
	300 NotImplemented "Instruction LDRH not yet implemented."
	301 Compare X9, 0
	302 JumpIfEqual {309}
	303 Move X10, [X8+176]
	304 Add X10, X10, 8
	305 NotImplemented "Instruction LDUR not yet implemented."
	306 NotImplemented "Instruction CMP not yet implemented."
	307 Subtract X9, X9, 1
	308 Add X10, X10, 16
	309 Move W2, 16
	310 Move X0, X20
	311 Call 0x1C5D788
	312 Move X0, X22
	313 Move X1, X31
	314 Call Type.get_IsValueType, X0
	315 Move TEMP, X0
	316 And TEMP, TEMP, 1
	317 Compare TEMP, 1
	318 JumpIfNotEqual {497}
	319 Move X0, 0xDDE000
	320 Move X0, [X0+3080]
	321 Call 0x1C17D08
	322 Call 0x1C17F10
	323 Move X19, X0
	324 Move X0, 0xE0B000
	325 Move X0, [X0+368]
	326 Move X0, X21
	327 Move X1, X31
	328 Call "il2cpp_vm_object_is_inst", X0
	329 Move X8, 0xDD6000
	330 Move X8, [X8+1728]
	331 Move X19, X0
	332 Move X8, [X8]
	333 Move W9, [X8+224]
	334 Compare W9, 0
	335 JumpIfNotEqual {338}
	336 Move X0, X8
	337 Call 0x1C17DFC
	338 Move X0, X19
	339 Move X1, X22
	340 Move X2, X31
	341 Call Type.op_Equality, X0, X1
	342 Move TEMP, X0
	343 And TEMP, TEMP, 1
	344 Compare TEMP, 1
	345 JumpIfEqual {497}
	346 Move X0, 0xDDE000
	347 Move X0, [X0+3080]
	348 Call 0x1C17D08
	349 Call 0x1C17F10
	350 Move X19, X0
	351 Move X0, 0xE0B000
	352 Move X0, [X0+344]
	353 Call 0x1C17D08
	354 Move X1, X0
	355 Move X0, X19
	356 Move X2, X31
	357 Call InvalidCastException..ctor, X0, X1
	358 Move X8, [X20]
	359 Move X1, [X24]
	360 NotImplemented "Instruction LDRH not yet implemented."
	361 Compare X9, 0
	362 JumpIfEqual {369}
	363 Move X10, [X8+176]
	364 Add X10, X10, 8
	365 NotImplemented "Instruction LDUR not yet implemented."
	366 NotImplemented "Instruction CMP not yet implemented."
	367 Subtract X9, X9, 1
	368 Add X10, X10, 16
	369 Move W2, 1
	370 Move X0, X20
	371 Call 0x1C5D788
	372 Move X8, [X20]
	373 Move X1, [X24]
	374 NotImplemented "Instruction LDRH not yet implemented."
	375 Compare X9, 0
	376 JumpIfEqual {383}
	377 Move X10, [X8+176]
	378 Add X10, X10, 8
	379 NotImplemented "Instruction LDUR not yet implemented."
	380 NotImplemented "Instruction CMP not yet implemented."
	381 Subtract X9, X9, 1
	382 Add X10, X10, 16
	383 Move W2, 2
	384 Move X0, X20
	385 Call 0x1C5D788
	386 Move X8, [X20]
	387 Move X1, [X24]
	388 NotImplemented "Instruction LDRH not yet implemented."
	389 Compare X9, 0
	390 JumpIfEqual {397}
	391 Move X10, [X8+176]
	392 Add X10, X10, 8
	393 NotImplemented "Instruction LDUR not yet implemented."
	394 NotImplemented "Instruction CMP not yet implemented."
	395 Subtract X9, X9, 1
	396 Add X10, X10, 16
	397 Move W2, 3
	398 Move X0, X20
	399 Call 0x1C5D788
	400 Move W9, [X10]
	401 Add W9, W9, 1
	402 Add X8, X8, W9
	403 Add X0, X8, 312
	404 Move X8, [X0]
	405 Move X2, [X0+8]
	406 Move X0, X20
	407 Move X1, X19
	408 NotImplemented "Instruction BLR not yet implemented."
	409 Move X8, 0xDD6000
	410 Move X8, [X8+2904]
	411 And W9, W0, 1
	412 Move [X31+8], W9
	413 Move X8, [X8]
	414 Move X8, [X20]
	415 Move X1, [X24]
	416 NotImplemented "Instruction LDRH not yet implemented."
	417 Compare X9, 0
	418 JumpIfEqual {425}
	419 Move X10, [X8+176]
	420 Add X10, X10, 8
	421 NotImplemented "Instruction LDUR not yet implemented."
	422 NotImplemented "Instruction CMP not yet implemented."
	423 Subtract X9, X9, 1
	424 Add X10, X10, 16
	425 Move W2, 4
	426 Move X0, X20
	427 Call 0x1C5D788
	428 Move W9, [X10]
	429 Add W9, W9, 2
	430 Add X8, X8, W9
	431 Add X0, X8, 312
	432 Move X8, [X0]
	433 Move X2, [X0+8]
	434 Move X0, X20
	435 Move X1, X19
	436 NotImplemented "Instruction BLR not yet implemented."
	437 Move X8, 0xDD8000
	438 Move X8, [X8+368]
	439 Move X8, [X8]
	440 NotImplemented "Instruction STRH not yet implemented."
	441 Move X8, [X20]
	442 Move X1, [X24]
	443 NotImplemented "Instruction LDRH not yet implemented."
	444 Compare X9, 0
	445 JumpIfEqual {452}
	446 Move X10, [X8+176]
	447 Add X10, X10, 8
	448 NotImplemented "Instruction LDUR not yet implemented."
	449 NotImplemented "Instruction CMP not yet implemented."
	450 Subtract X9, X9, 1
	451 Add X10, X10, 16
	452 Move W2, 5
	453 Move X0, X20
	454 Call 0x1C5D788
	455 Move W9, [X10]
	456 Add W9, W9, 3
	457 Add X8, X8, W9
	458 Add X0, X8, 312
	459 Move X8, [X0]
	460 Move X2, [X0+8]
	461 Move X0, X20
	462 Move X1, X19
	463 NotImplemented "Instruction BLR not yet implemented."
	464 Move X8, 0xDFF000
	465 Move X8, [X8+1712]
	466 Move X8, [X20]
	467 Move X1, [X24]
	468 NotImplemented "Instruction LDRH not yet implemented."
	469 Compare X9, 0
	470 JumpIfEqual {477}
	471 Move X10, [X8+176]
	472 Add X10, X10, 8
	473 NotImplemented "Instruction LDUR not yet implemented."
	474 NotImplemented "Instruction CMP not yet implemented."
	475 Subtract X9, X9, 1
	476 Add X10, X10, 16
	477 Move W2, 6
	478 Move X0, X20
	479 Call 0x1C5D788
	480 Move W9, [X10]
	481 Add W9, W9, 4
	482 Add X8, X8, W9
	483 Add X0, X8, 312
	484 Move X8, [X0]
	485 Move X2, [X0+8]
	486 Move X0, X20
	487 Move X1, X19
	488 NotImplemented "Instruction BLR not yet implemented."
	489 Move X8, 0xDD7000
	490 Move X8, [X8+2520]
	491 Move X8, [X8]
	492 Move [X31+8], W0
	493 Add X1, X31, 8
	494 Move X0, X8
	495 Call 0x1C17E04
	496 Move X21, X0
	497 Move X8, [X23+40]
	498 Move X9, [X31+24]
	499 NotImplemented "Instruction CMP not yet implemented."
	500 Move X0, X21
	501 Move X20, [X31+80]
	502 Move X19, [X31+88]
	503 Move X22, [X31+64]
	504 Move X21, [X31+72]
	505 Move X24, [X31+48]
	506 Move X23, [X31+56]
	507 Move X30, [X31+32]
	508 Move X25, [X31+40]
	509 Add X31, X31, 96
	510 Return X0
	511 Move X8, [X20]
	512 Move X1, [X24]
	513 NotImplemented "Instruction LDRH not yet implemented."
	514 Compare X9, 0
	515 JumpIfEqual {522}
	516 Move X10, [X8+176]
	517 Add X10, X10, 8
	518 NotImplemented "Instruction LDUR not yet implemented."
	519 NotImplemented "Instruction CMP not yet implemented."
	520 Subtract X9, X9, 1
	521 Add X10, X10, 16
	522 Move W2, 7
	523 Move X0, X20
	524 Call 0x1C5D788
	525 Move W9, [X10]
	526 Add W9, W9, 5
	527 Add X8, X8, W9
	528 Add X0, X8, 312
	529 Move X8, [X0]
	530 Move X2, [X0+8]
	531 Move X0, X20
	532 Move X1, X19
	533 NotImplemented "Instruction BLR not yet implemented."
	534 Move X8, 0xDDA000
	535 Move X8, [X8+1576]
	536 Move X8, [X20]
	537 Move X1, [X24]
	538 NotImplemented "Instruction LDRH not yet implemented."
	539 Compare X9, 0
	540 JumpIfEqual {547}
	541 Move X10, [X8+176]
	542 Add X10, X10, 8
	543 NotImplemented "Instruction LDUR not yet implemented."
	544 NotImplemented "Instruction CMP not yet implemented."
	545 Subtract X9, X9, 1
	546 Add X10, X10, 16
	547 Move W2, 8
	548 Move X0, X20
	549 Call 0x1C5D788
	550 Move W9, [X10]
	551 Add W9, W9, 6
	552 Add X8, X8, W9
	553 Add X0, X8, 312
	554 Move X8, [X0]
	555 Move X2, [X0+8]
	556 Move X0, X20
	557 Move X1, X19
	558 NotImplemented "Instruction BLR not yet implemented."
	559 Move X8, 0xDDB000
	560 Move X8, [X8+1624]
	561 Move X8, [X20]
	562 Move X1, [X24]
	563 NotImplemented "Instruction LDRH not yet implemented."
	564 Compare X9, 0
	565 JumpIfEqual {572}
	566 Move X10, [X8+176]
	567 Add X10, X10, 8
	568 NotImplemented "Instruction LDUR not yet implemented."
	569 NotImplemented "Instruction CMP not yet implemented."
	570 Subtract X9, X9, 1
	571 Add X10, X10, 16
	572 Move W2, 9
	573 Move X0, X20
	574 Call 0x1C5D788
	575 Move W9, [X10]
	576 Add W9, W9, 7
	577 Add X8, X8, W9
	578 Add X0, X8, 312
	579 Move X8, [X0]
	580 Move X2, [X0+8]
	581 Move X0, X20
	582 Move X1, X19
	583 NotImplemented "Instruction BLR not yet implemented."
	584 Move X8, 0xDD6000
	585 Move X8, [X8+1880]
	586 Move X8, [X20]
	587 Move X1, [X24]
	588 NotImplemented "Instruction LDRH not yet implemented."
	589 Compare X9, 0
	590 JumpIfEqual {597}
	591 Move X10, [X8+176]
	592 Add X10, X10, 8
	593 NotImplemented "Instruction LDUR not yet implemented."
	594 NotImplemented "Instruction CMP not yet implemented."
	595 Subtract X9, X9, 1
	596 Add X10, X10, 16
	597 Move W2, 10
	598 Move X0, X20
	599 Call 0x1C5D788
	600 Move W9, [X10]
	601 Add W9, W9, 8
	602 Add X8, X8, W9
	603 Add X0, X8, 312
	604 Move X8, [X0]
	605 Move X2, [X0+8]
	606 Move X0, X20
	607 Move X1, X19
	608 NotImplemented "Instruction BLR not yet implemented."
	609 Move X8, 0xDDE000
	610 Move X8, [X8+1824]
	611 Move X8, [X8]
	612 Move [X31+8], W0
	613 Move X8, [X20]
	614 Move X1, [X24]
	615 NotImplemented "Instruction LDRH not yet implemented."
	616 Compare X9, 0
	617 JumpIfEqual {624}
	618 Move X10, [X8+176]
	619 Add X10, X10, 8
	620 NotImplemented "Instruction LDUR not yet implemented."
	621 NotImplemented "Instruction CMP not yet implemented."
	622 Subtract X9, X9, 1
	623 Add X10, X10, 16
	624 Move W2, 11
	625 Move X0, X20
	626 Call 0x1C5D788
	627 Move W9, [X10]
	628 Add W9, W9, 9
	629 Add X8, X8, W9
	630 Add X0, X8, 312
	631 Move X8, [X0]
	632 Move X2, [X0+8]
	633 Move X0, X20
	634 Move X1, X19
	635 NotImplemented "Instruction BLR not yet implemented."
	636 Move X8, 0xDD8000
	637 Move X8, [X8+2656]
	638 Move X8, [X20]
	639 Move X1, [X24]
	640 NotImplemented "Instruction LDRH not yet implemented."
	641 Compare X9, 0
	642 JumpIfEqual {649}
	643 Move X10, [X8+176]
	644 Add X10, X10, 8
	645 NotImplemented "Instruction LDUR not yet implemented."
	646 NotImplemented "Instruction CMP not yet implemented."
	647 Subtract X9, X9, 1
	648 Add X10, X10, 16
	649 Move W2, 12
	650 Move X0, X20
	651 Call 0x1C5D788
	652 Move W9, [X10]
	653 Add W9, W9, 10
	654 Add X8, X8, W9
	655 Add X0, X8, 312
	656 Move X8, [X0]
	657 Move X2, [X0+8]
	658 Move X0, X20
	659 Move X1, X19
	660 NotImplemented "Instruction BLR not yet implemented."
	661 Move X8, 0xDD7000
	662 Move X8, [X8+1880]
	663 Move X8, [X8]
	664 Move [X31+8], X0
	665 Move X8, [X20]
	666 Move X1, [X24]
	667 NotImplemented "Instruction LDRH not yet implemented."
	668 Compare X9, 0
	669 JumpIfEqual {676}
	670 Move X10, [X8+176]
	671 Add X10, X10, 8
	672 NotImplemented "Instruction LDUR not yet implemented."
	673 NotImplemented "Instruction CMP not yet implemented."
	674 Subtract X9, X9, 1
	675 Add X10, X10, 16
	676 Move W2, 13
	677 Move X0, X20
	678 Call 0x1C5D788
	679 Move W9, [X10]
	680 Add W9, W9, 11
	681 Add X8, X8, W9
	682 Add X0, X8, 312
	683 Move X8, [X0]
	684 Move X2, [X0+8]
	685 Move X0, X20
	686 Move X1, X19
	687 NotImplemented "Instruction BLR not yet implemented."
	688 Move X8, 0xDD6000
	689 Move X8, [X8+2704]
	690 Move [X31+8], S0
	691 Move X8, [X20]
	692 Move X1, [X24]
	693 NotImplemented "Instruction LDRH not yet implemented."
	694 Compare X9, 0
	695 JumpIfEqual {702}
	696 Move X10, [X8+176]
	697 Add X10, X10, 8
	698 NotImplemented "Instruction LDUR not yet implemented."
	699 NotImplemented "Instruction CMP not yet implemented."
	700 Subtract X9, X9, 1
	701 Add X10, X10, 16
	702 Move W2, 14
	703 Move X0, X20
	704 Call 0x1C5D788
	705 Move W9, [X10]
	706 Add W9, W9, 12
	707 Add X8, X8, W9
	708 Add X0, X8, 312
	709 Move X8, [X0]
	710 Move X2, [X0+8]
	711 Move X0, X20
	712 Move X1, X19
	713 NotImplemented "Instruction BLR not yet implemented."
	714 Move X8, 0xDD9000
	715 Move X8, [X8+2424]
	716 Move [X31+8], D0
	717 Move X0, [X8]
	718 Add X1, X31, 8
	719 Move X8, [X20]
	720 Move X1, [X24]
	721 NotImplemented "Instruction LDRH not yet implemented."
	722 Compare X9, 0
	723 JumpIfEqual {730}
	724 Move X10, [X8+176]
	725 Add X10, X10, 8
	726 NotImplemented "Instruction LDUR not yet implemented."
	727 NotImplemented "Instruction CMP not yet implemented."
	728 Subtract X9, X9, 1
	729 Add X10, X10, 16
	730 Move W2, 15
	731 Move X0, X20
	732 Call 0x1C5D788
	733 Move W9, [X10]
	734 Add W9, W9, 13
	735 Add X8, X8, W9
	736 Add X0, X8, 312
	737 Move X8, [X0]
	738 Move X2, [X0+8]
	739 Move X0, X20
	740 Move X1, X19
	741 NotImplemented "Instruction BLR not yet implemented."
	742 Move X8, 0xDFE000
	743 Move X8, [X8+1520]
	744 Move [X31+8], X0
	745 Move [X31+16], X1
	746 Move W9, [X10]
	747 Add W9, W9, 14
	748 Add X8, X8, W9
	749 Add X0, X8, 312
	750 Move X8, [X0]
	751 Move X2, [X0+8]
	752 Move X0, X20
	753 Move X1, X19
	754 NotImplemented "Instruction BLR not yet implemented."
	755 Move X8, 0xDD7000
	756 Move X8, [X8+2544]
	757 Move W9, [X10]
	758 Add W9, W9, 16
	759 Add X8, X8, W9
	760 Add X0, X8, 312
	761 Move X8, [X0]
	762 Move X3, [X0+8]
	763 Move X0, X20
	764 Move X1, X22
	765 Move X2, X19
	766 NotImplemented "Instruction BLR not yet implemented."
	767 Move W9, [X10]
	768 Add W9, W9, 15
	769 Add X8, X8, W9
	770 Add X0, X8, 312
	771 Move X8, [X0]
	772 Move X2, [X0+8]
	773 Move X0, X20
	774 Move X1, X19
	775 NotImplemented "Instruction BLR not yet implemented."
	776 Move X8, [X23+40]
	777 Move X9, [X31+24]
	778 NotImplemented "Instruction CMP not yet implemented."
	779 Call 0x3EB2B20
	780 Call 0x1C17F28
	781 Move X0, 0xDDB000
	782 Move X0, [X0+1320]
	783 Call 0x1C17D08
	784 Call 0x1C17F10
	785 Move X19, X0
	786 Move X0, 0xE0B000
	787 Move X0, [X0+376]
	788 Call 0x1C17D08
	789 Move X1, X0
	790 Move X0, X19
	791 Call ArgumentNullException..ctor, X0, X1
	792 Move X0, 0xE0B000
	793 Move X0, [X0+384]
	794 Call 0x1C17D08
	795 Move X1, X0
	796 Move X0, X19
	797 Call 0x1C17DEC
	798 Call 0x1C17F20

Method: System.Void ThrowCharOverflowException()

Disassembly:
	0x0331EF94 MOV V0.16B, V8.16B
	0x0331EF98 BL 0x331EFAC
	0x0331EF9C LDP X20, X19, [X31 + 0x10]
	0x0331EFA0 LDR X30, [X31 + 0x8]
	0x0331EFA4 LDR V8, [X31], #0x20
	0x0331EFA8 B 0x331ED90
	0x0331EFAC STP X30, X19, [X31 - 0x10]!
	0x0331EFB0 FCMP D0, 0x0
	0x0331EFB4 B.GE 0x331F00C
	0x0331EFB8 ADRP X8, 0xFFFFFFFFFD7D0000
	0x0331EFBC LDR V1, [X8 + 0x280]
	0x0331EFC0 FCMP D0, D1
	0x0331EFC4 B.LT 0x331F064
	0x0331EFC8 MOVZ X9, 0x7FF00000
	0x0331EFCC FMOV D1, X9
	0x0331EFD0 FCVTZS W8, D0
	0x0331EFD4 MOVZ W10, 0x80000000
	0x0331EFD8 FCMP D0, D1
	0x0331EFDC CSEL W0, W10, W8, EQ

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xDD6000
	004 Move X0, [X0+2136]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xE0B000
	009 Move X0, [X0+392]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call OverflowException..ctor, X0, X1
	015 Move X0, 0xE0B000
	016 Move X0, [X0+400]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Void ThrowByteOverflowException()

Disassembly:
	0x0331EFE0 SCVTF D1, W0
	0x0331EFE4 FSUB D0, D0, D1
	0x0331EFE8 FMOV D1, -0.5
	0x0331EFEC FCMP D0, D1
	0x0331EFF0 B.MI 0x331F004
	0x0331EFF4 TBZ X0, 0x0, 0x331F05C
	0x0331EFF8 FMOV D1, -0.5
	0x0331EFFC FCMP D0, D1
	0x0331F000 B.NE 0x331F05C
	0x0331F004 SUB W0, W0, 0x1
	0x0331F008 B 0x331F05C
	0x0331F00C ADRP X8, 0xFFFFFFFFFD7CE000
	0x0331F010 LDR V1, [X8 + 0xDB8]
	0x0331F014 FCMP D0, D1
	0x0331F018 B.PL 0x331F064
	0x0331F01C MOVZ X9, 0x7FF00000
	0x0331F020 FMOV D1, X9
	0x0331F024 FCVTZS W8, D0
	0x0331F028 MOVZ W10, 0x80000000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xDD6000
	004 Move X0, [X0+2136]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xE0B000
	009 Move X0, [X0+128]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call OverflowException..ctor, X0, X1
	015 Move X0, 0xE0A000
	016 Move X0, [X0+408]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Void ThrowSByteOverflowException()

Disassembly:
	0x0331F02C FCMP D0, D1
	0x0331F030 CSEL W0, W10, W8, EQ
	0x0331F034 SCVTF D1, W0
	0x0331F038 FSUB D0, D0, D1
	0x0331F03C FMOV D1, 0.5
	0x0331F040 FCMP D0, D1
	0x0331F044 B.GT 0x331F058
	0x0331F048 TBZ X0, 0x0, 0x331F05C
	0x0331F04C FMOV D1, 0.5
	0x0331F050 FCMP D0, D1
	0x0331F054 B.NE 0x331F05C
	0x0331F058 ADD W0, W0, 0x1
	0x0331F05C LDP X30, X19, [X31], #0x10
	0x0331F060 RET
	0x0331F064 ADRP X0, 0xDD4000
	0x0331F068 LDR X0, [X0 + 0x858]
	0x0331F06C BL 0x1C16D08
	0x0331F070 BL 0x1C16F10
	0x0331F074 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xDD5000
	004 Move X0, [X0+2136]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xE0A000
	009 Move X0, [X0+416]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call OverflowException..ctor, X0, X1
	015 Move X0, 0xE0A000
	016 Move X0, [X0+424]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Void ThrowInt16OverflowException()

Disassembly:
	0x0331F078 ADRP X0, 0xE09000
	0x0331F07C LDR X0, [X0 + 0x1D0]
	0x0331F080 BL 0x1C16D08
	0x0331F084 MOV X1, X0
	0x0331F088 MOV X0, X19
	0x0331F08C MOV X2, X31
	0x0331F090 BL 0x338CB50
	0x0331F094 ADRP X0, 0xE09000
	0x0331F098 LDR X0, [X0 + 0x218]
	0x0331F09C BL 0x1C16D08
	0x0331F0A0 MOV X1, X0
	0x0331F0A4 MOV X0, X19
	0x0331F0A8 BL 0x1C16DEC
	0x0331F0AC STR X30, [X31 - 0x30]!
	0x0331F0B0 STP X22, X21, [X31 + 0x10]
	0x0331F0B4 STP X20, X19, [X31 + 0x20]
	0x0331F0B8 ADRP X22, 0x10BD000
	0x0331F0BC ADRP X21, 0xDFC000
	0x0331F0C0 LDRB W8, [X22 + 0xC0E]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xDD5000
	004 Move X0, [X0+2136]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xE0A000
	009 Move X0, [X0+432]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call OverflowException..ctor, X0, X1
	015 Move X0, 0xE0A000
	016 Move X0, [X0+440]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Void ThrowUInt16OverflowException()

Disassembly:
	0x0331F0C4 LDR X21, [X21 + 0x5F0]
	0x0331F0C8 MOV X19, X1
	0x0331F0CC MOV X20, X0
	0x0331F0D0 TBNZ X8, 0x0, 0x331F0E8
	0x0331F0D4 ADRP X0, 0xDFC000
	0x0331F0D8 LDR X0, [X0 + 0x5F0]
	0x0331F0DC BL 0x1C16CF4
	0x0331F0E0 MOVZ W8, 0x1
	0x0331F0E4 STRB W8, [X22 + 0xC0E]
	0x0331F0E8 LDR X0, [X21]
	0x0331F0EC LDR W8, [X0 + 0xE0]
	0x0331F0F0 CBNZ W8, 0x331F0F8
	0x0331F0F4 BL 0x1C16DFC
	0x0331F0F8 MOV X0, X20
	0x0331F0FC MOV X1, X19
	0x0331F100 MOV W2, W31
	0x0331F104 MOV X3, X31
	0x0331F108 BL 0x33D7A90
	0x0331F10C LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xDD5000
	004 Move X0, [X0+2136]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xE0A000
	009 Move X0, [X0+448]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call OverflowException..ctor, X0, X1
	015 Move X0, 0xE0A000
	016 Move X0, [X0+456]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Void ThrowInt32OverflowException()

Disassembly:
	0x0331F110 LDP X22, X21, [X31 + 0x10]
	0x0331F114 MOV X2, X31
	0x0331F118 LDR X30, [X31], #0x30
	0x0331F11C B 0x33D8298
	0x0331F120 MOV X2, X1
	0x0331F124 MOVZ W1, 0x7
	0x0331F128 MOV X3, X31
	0x0331F12C B 0x338F59C
	0x0331F130 STP X30, X21, [X31 - 0x20]!
	0x0331F134 STP X20, X19, [X31 + 0x10]
	0x0331F138 ADRP X19, 0x10BD000
	0x0331F13C LDRB W8, [X19 + 0xC0F]
	0x0331F140 MOV X21, X0
	0x0331F144 TBNZ X8, 0x0, 0x331F15C
	0x0331F148 ADRP X0, 0xE04000
	0x0331F14C LDR X0, [X0 + 0xE10]
	0x0331F150 BL 0x1C16CF4
	0x0331F154 MOVZ W8, 0x1
	0x0331F158 STRB W8, [X19 + 0xC0F]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xDD5000
	004 Move X0, [X0+2136]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xE0A000
	009 Move X0, [X0+464]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call OverflowException..ctor, X0, X1
	015 Move X0, 0xE0A000
	016 Move X0, [X0+472]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Void ThrowUInt32OverflowException()

Disassembly:
	0x0331F15C CBZ X21, 0x331F1D4
	0x0331F160 ADRP X20, 0xE04000
	0x0331F164 LDR X20, [X20 + 0xE10]
	0x0331F168 MOV X0, X21
	0x0331F16C LDR X19, [X20]
	0x0331F170 MOV X1, X19
	0x0331F174 BL 0x1C16E00
	0x0331F178 CBZ X0, 0x331F20C
	0x0331F17C LDR X20, [X20]
	0x0331F180 MOV X0, X21
	0x0331F184 MOV X1, X20
	0x0331F188 BL 0x1C16E00
	0x0331F18C CBZ X0, 0x331F218
	0x0331F190 LDR X8, [X0]
	0x0331F194 MOV X19, X0
	0x0331F198 LDRH W9, [X8 + 0x12E]
	0x0331F19C CBZ X9, 0x331F1C0
	0x0331F1A0 LDR X10, [X8 + 0xB0]
	0x0331F1A4 ADD X10, X10, 0x8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xDD5000
	004 Move X0, [X0+2136]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xE0A000
	009 Move X0, [X0+480]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call OverflowException..ctor, X0, X1
	015 Move X0, 0xE0A000
	016 Move X0, [X0+488]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Void ThrowInt64OverflowException()

Disassembly:
	0x0331F1A8 LDUR X11, [X10 - 0x8]
	0x0331F1AC CMP X11, X20
	0x0331F1B0 B.EQ 0x331F1E4
	0x0331F1B4 SUBS X9, X9, 0x1
	0x0331F1B8 ADD X10, X10, 0x10
	0x0331F1BC B.NE 0x331F1A8
	0x0331F1C0 MOVZ W2, 0x4
	0x0331F1C4 MOV X0, X19
	0x0331F1C8 MOV X1, X20
	0x0331F1CC BL 0x1C5C788
	0x0331F1D0 B 0x331F1F4
	0x0331F1D4 LDP X20, X19, [X31 + 0x10]
	0x0331F1D8 MOV W0, W31
	0x0331F1DC LDP X30, X21, [X31], #0x20
	0x0331F1E0 RET
	0x0331F1E4 LDR W9, [X10]
	0x0331F1E8 ADD W9, W9, 0x4
	0x0331F1EC ADD X8, X8, W9, 0x4, SXTW
	0x0331F1F0 ADD X0, X8, 0x138

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xDD5000
	004 Move X0, [X0+2136]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xE0A000
	009 Move X0, [X0+496]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call OverflowException..ctor, X0, X1
	015 Move X0, 0xE0A000
	016 Move X0, [X0+504]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Void ThrowUInt64OverflowException()

Disassembly:
	0x0331F1F4 LDP X3, X2, [X0]
	0x0331F1F8 MOV X0, X19
	0x0331F1FC LDP X20, X19, [X31 + 0x10]
	0x0331F200 MOV X1, X31
	0x0331F204 LDP X30, X21, [X31], #0x20
	0x0331F208 BR X3
	0x0331F20C MOV X0, X21
	0x0331F210 MOV X1, X19
	0x0331F214 BL 0x1C171E0
	0x0331F218 MOV X0, X21
	0x0331F21C MOV X1, X20
	0x0331F220 BL 0x1C171E0
	0x0331F224 STR X30, [X31 - 0x30]!
	0x0331F228 STP X22, X21, [X31 + 0x10]
	0x0331F22C STP X20, X19, [X31 + 0x20]
	0x0331F230 ADRP X20, 0x10BD000
	0x0331F234 LDRB W8, [X20 + 0xC10]
	0x0331F238 MOV X19, X1
	0x0331F23C MOV X22, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xDD5000
	004 Move X0, [X0+2136]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xE0A000
	009 Move X0, [X0+512]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call OverflowException..ctor, X0, X1
	015 Move X0, 0xE0A000
	016 Move X0, [X0+520]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Boolean ToBoolean(System.Object value)

Disassembly:
	0x0331F240 TBNZ X8, 0x0, 0x331F258
	0x0331F244 ADRP X0, 0xE04000
	0x0331F248 LDR X0, [X0 + 0xE10]
	0x0331F24C BL 0x1C16CF4
	0x0331F250 MOVZ W8, 0x1
	0x0331F254 STRB W8, [X20 + 0xC10]
	0x0331F258 CBZ X22, 0x331F2D0
	0x0331F25C ADRP X21, 0xE04000
	0x0331F260 LDR X21, [X21 + 0xE10]
	0x0331F264 MOV X0, X22
	0x0331F268 LDR X20, [X21]
	0x0331F26C MOV X1, X20
	0x0331F270 BL 0x1C16E00
	0x0331F274 CBZ X0, 0x331F310
	0x0331F278 LDR X21, [X21]
	0x0331F27C MOV X0, X22
	0x0331F280 MOV X1, X21
	0x0331F284 BL 0x1C16E00
	0x0331F288 CBZ X0, 0x331F31C
	0x0331F28C LDR X8, [X0]
	0x0331F290 MOV X20, X0
	0x0331F294 LDRH W9, [X8 + 0x12E]
	0x0331F298 CBZ X9, 0x331F2BC
	0x0331F29C LDR X10, [X8 + 0xB0]
	0x0331F2A0 ADD X10, X10, 0x8
	0x0331F2A4 LDUR X11, [X10 - 0x8]
	0x0331F2A8 CMP X11, X21
	0x0331F2AC B.EQ 0x331F2E4
	0x0331F2B0 SUBS X9, X9, 0x1
	0x0331F2B4 ADD X10, X10, 0x10
	0x0331F2B8 B.NE 0x331F2A4
	0x0331F2BC MOVZ W2, 0x4
	0x0331F2C0 MOV X0, X20
	0x0331F2C4 MOV X1, X21
	0x0331F2C8 BL 0x1C5C788
	0x0331F2CC B 0x331F2F4
	0x0331F2D0 LDP X20, X19, [X31 + 0x20]
	0x0331F2D4 LDP X22, X21, [X31 + 0x10]
	0x0331F2D8 MOV W0, W31
	0x0331F2DC LDR X30, [X31], #0x30
	0x0331F2E0 RET
	0x0331F2E4 LDR W9, [X10]
	0x0331F2E8 ADD W9, W9, 0x4
	0x0331F2EC ADD X8, X8, W9, 0x4, SXTW
	0x0331F2F0 ADD X0, X8, 0x138
	0x0331F2F4 LDP X3, X2, [X0]
	0x0331F2F8 MOV X0, X20
	0x0331F2FC MOV X1, X19
	0x0331F300 LDP X20, X19, [X31 + 0x20]
	0x0331F304 LDP X22, X21, [X31 + 0x10]
	0x0331F308 LDR X30, [X31], #0x30
	0x0331F30C BR X3
	0x0331F310 MOV X0, X22
	0x0331F314 MOV X1, X20
	0x0331F318 BL 0x1C171E0
	0x0331F31C MOV X0, X22
	0x0331F320 MOV X1, X21
	0x0331F324 BL 0x1C171E0
	0x0331F328 STR X30, [X31 - 0x20]!
	0x0331F32C STP X20, X19, [X31 + 0x10]
	0x0331F330 ADRP X20, 0x10BD000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10BE000
	006 Move W8, [X19+3060]
	007 Move X21, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE05000
	013 Move X0, [X0+3600]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3060], W8
	017 Compare X21, 0
	018 JumpIfEqual {48}
	019 Move X20, 0xE05000
	020 Move X20, [X20+3600]
	021 Move X0, X21
	022 Move X19, [X20]
	023 Move X1, X19
	024 Call 0x1C17E00
	025 Compare X0, 0
	026 JumpIfEqual {67}
	027 Move X20, [X20]
	028 Move X0, X21
	029 Move X1, X20
	030 Call 0x1C17E00
	031 Compare X0, 0
	032 JumpIfEqual {70}
	033 Move X8, [X0]
	034 Move X19, X0
	035 NotImplemented "Instruction LDRH not yet implemented."
	036 Compare X9, 0
	037 JumpIfEqual {44}
	038 Move X10, [X8+176]
	039 Add X10, X10, 8
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Subtract X9, X9, 1
	043 Add X10, X10, 16
	044 Move W2, 1
	045 Move X0, X19
	046 Move X1, X20
	047 Call 0x1C5D788
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move W0, W31
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Return X0
	054 Move W9, [X10]
	055 Add W9, W9, 1
	056 Add X8, X8, W9
	057 Add X0, X8, 312
	058 Move X3, [X0]
	059 Move X2, [X0+8]
	060 Move X0, X19
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X1, X31
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 CallNoReturn X3
	067 Move X0, X21
	068 Move X1, X19
	069 Call 0x1C181E0
	070 Move X0, X21
	071 Move X1, X20
	072 Call 0x1C181E0

Method: System.Boolean ToBoolean(System.Object value, System.IFormatProvider provider)

Disassembly:
	0x0331F334 LDRB W8, [X20 + 0xC12]
	0x0331F338 MOV W19, W0
	0x0331F33C TBNZ X8, 0x0, 0x331F354
	0x0331F340 ADRP X0, 0xDDD000
	0x0331F344 LDR X0, [X0 + 0x9E8]
	0x0331F348 BL 0x1C16CF4
	0x0331F34C MOVZ W8, 0x1
	0x0331F350 STRB W8, [X20 + 0xC12]
	0x0331F354 TBNZ X19, 0x7, 0x331F368
	0x0331F358 MOV W0, W19
	0x0331F35C LDP X20, X19, [X31 + 0x10]
	0x0331F360 LDR X30, [X31], #0x20
	0x0331F364 RET
	0x0331F368 ADRP X8, 0xDDD000
	0x0331F36C LDR X8, [X8 + 0x9E8]
	0x0331F370 LDR X0, [X8]
	0x0331F374 BL 0x19903D0
	0x0331F378 BL 0x331DFE0
	0x0331F37C STR X30, [X31 - 0x20]!
	0x0331F380 STP X20, X19, [X31 + 0x10]
	0x0331F384 ADRP X20, 0x10BD000
	0x0331F388 LDRB W8, [X20 + 0xC13]
	0x0331F38C MOV W19, W0
	0x0331F390 TBNZ X8, 0x0, 0x331F3A8
	0x0331F394 ADRP X0, 0xDDD000
	0x0331F398 LDR X0, [X0 + 0x9E8]
	0x0331F39C BL 0x1C16CF4
	0x0331F3A0 MOVZ W8, 0x1
	0x0331F3A4 STRB W8, [X20 + 0xC13]
	0x0331F3A8 AND W8, W19, 0xFFFF
	0x0331F3AC CMP W8, 0x100
	0x0331F3B0 B.CS 0x331F3C4
	0x0331F3B4 MOV W0, W19
	0x0331F3B8 LDP X20, X19, [X31 + 0x10]
	0x0331F3BC LDR X30, [X31], #0x20
	0x0331F3C0 RET
	0x0331F3C4 ADRP X8, 0xDDD000
	0x0331F3C8 LDR X8, [X8 + 0x9E8]
	0x0331F3CC LDR X0, [X8]
	0x0331F3D0 BL 0x19903D0
	0x0331F3D4 BL 0x331DFE0
	0x0331F3D8 STR X30, [X31 - 0x20]!
	0x0331F3DC STP X20, X19, [X31 + 0x10]
	0x0331F3E0 ADRP X20, 0x10BD000
	0x0331F3E4 LDRB W8, [X20 + 0xC14]
	0x0331F3E8 MOV W19, W0
	0x0331F3EC TBNZ X8, 0x0, 0x331F404
	0x0331F3F0 ADRP X0, 0xDDD000
	0x0331F3F4 LDR X0, [X0 + 0x9E8]
	0x0331F3F8 BL 0x1C16CF4
	0x0331F3FC MOVZ W8, 0x1
	0x0331F400 STRB W8, [X20 + 0xC14]
	0x0331F404 AND W8, W19, 0xFFFF
	0x0331F408 CMP W8, 0x100
	0x0331F40C B.CS 0x331F420
	0x0331F410 MOV W0, W19
	0x0331F414 LDP X20, X19, [X31 + 0x10]
	0x0331F418 LDR X30, [X31], #0x20
	0x0331F41C RET
	0x0331F420 ADRP X8, 0xDDD000
	0x0331F424 LDR X8, [X8 + 0x9E8]
	0x0331F428 LDR X0, [X8]
	0x0331F42C BL 0x19903D0
	0x0331F430 BL 0x331DFE0
	0x0331F434 STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x10BE000
	007 Move W8, [X20+3061]
	008 Move X19, X1
	009 Move X22, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE05000
	015 Move X0, [X0+3600]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3061], W8
	019 Compare X22, 0
	020 JumpIfEqual {50}
	021 Move X21, 0xE05000
	022 Move X21, [X21+3600]
	023 Move X0, X22
	024 Move X20, [X21]
	025 Move X1, X20
	026 Call 0x1C17E00
	027 Compare X0, 0
	028 JumpIfEqual {71}
	029 Move X21, [X21]
	030 Move X0, X22
	031 Move X1, X21
	032 Call 0x1C17E00
	033 Compare X0, 0
	034 JumpIfEqual {74}
	035 Move X8, [X0]
	036 Move X20, X0
	037 NotImplemented "Instruction LDRH not yet implemented."
	038 Compare X9, 0
	039 JumpIfEqual {46}
	040 Move X10, [X8+176]
	041 Add X10, X10, 8
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Subtract X9, X9, 1
	045 Add X10, X10, 16
	046 Move W2, 1
	047 Move X0, X20
	048 Move X1, X21
	049 Call 0x1C5D788
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move W0, W31
	055 Move X30, [X31+48]
	056 Return X0
	057 Move W9, [X10]
	058 Add W9, W9, 1
	059 Add X8, X8, W9
	060 Add X0, X8, 312
	061 Move X3, [X0]
	062 Move X2, [X0+8]
	063 Move X0, X20
	064 Move X1, X19
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X22, [X31+16]
	068 Move X21, [X31+24]
	069 Move X30, [X31+48]
	070 CallNoReturn X3
	071 Move X0, X22
	072 Move X1, X20
	073 Call 0x1C181E0
	074 Move X0, X22
	075 Move X1, X21
	076 Call 0x1C181E0

Method: System.Boolean ToBoolean(System.SByte value)

Disassembly:
	0x0331F438 STP X20, X19, [X31 + 0x10]
	0x0331F43C ADRP X20, 0x10BD000
	0x0331F440 LDRB W8, [X20 + 0xC15]

ISIL:
	001 And W31, W0, 255
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: System.Boolean ToBoolean(System.Byte value)

Disassembly:
	0x0331AF5C LDR X0, [X0 + 0xA8]
	0x0331AF60 BL 0x1C16D08
	0x0331AF64 MOV X2, X0

ISIL:
	001 And W31, W0, 255
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: System.Boolean ToBoolean(System.Int16 value)

Disassembly:
	0x0331F444 MOV W19, W0
	0x0331F448 TBNZ X8, 0x0, 0x331F460
	0x0331F44C ADRP X0, 0xDDD000

ISIL:
	001 And W31, W0, 0xFFFF
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: System.Boolean ToBoolean(System.UInt16 value)

Disassembly:
	0x0331F450 LDR X0, [X0 + 0x9E8]
	0x0331F454 BL 0x1C16CF4
	0x0331F458 MOVZ W8, 0x1

ISIL:
	001 And W31, W0, 0xFFFF
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: System.Boolean ToBoolean(System.Int32 value)

Disassembly:
	0x0331F45C STRB W8, [X20 + 0xC15]
	0x0331F460 CMP W19, 0x100
	0x0331F464 B.CS 0x331F478

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: System.Boolean ToBoolean(System.UInt32 value)

Disassembly:
	0x0331F468 MOV W0, W19
	0x0331F46C LDP X20, X19, [X31 + 0x10]
	0x0331F470 LDR X30, [X31], #0x20

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: System.Boolean ToBoolean(System.Int64 value)

Disassembly:
	0x0331F474 RET
	0x0331F478 ADRP X8, 0xDDD000
	0x0331F47C LDR X8, [X8 + 0x9E8]

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: System.Boolean ToBoolean(System.UInt64 value)

Disassembly:
	0x0331F480 LDR X0, [X8]
	0x0331F484 BL 0x19903D0
	0x0331F488 BL 0x331DFE0

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: System.Boolean ToBoolean(System.String value)

Disassembly:
	0x0331F48C STR X30, [X31 - 0x20]!
	0x0331F490 STP X20, X19, [X31 + 0x10]
	0x0331F494 ADRP X20, 0x10BD000
	0x0331F498 LDRB W8, [X20 + 0xC16]
	0x0331F49C MOV W19, W0
	0x0331F4A0 TBNZ X8, 0x0, 0x331F4B8
	0x0331F4A4 ADRP X0, 0xDDD000
	0x0331F4A8 LDR X0, [X0 + 0x9E8]
	0x0331F4AC BL 0x1C16CF4
	0x0331F4B0 MOVZ W8, 0x1
	0x0331F4B4 STRB W8, [X20 + 0xC16]
	0x0331F4B8 CMP W19, 0x100
	0x0331F4BC B.CS 0x331F4D0
	0x0331F4C0 MOV W0, W19
	0x0331F4C4 LDP X20, X19, [X31 + 0x10]
	0x0331F4C8 LDR X30, [X31], #0x20
	0x0331F4CC RET
	0x0331F4D0 ADRP X8, 0xDDD000
	0x0331F4D4 LDR X8, [X8 + 0x9E8]
	0x0331F4D8 LDR X0, [X8]
	0x0331F4DC BL 0x19903D0
	0x0331F4E0 BL 0x331DFE0
	0x0331F4E4 STR X30, [X31 - 0x20]!
	0x0331F4E8 STP X20, X19, [X31 + 0x10]
	0x0331F4EC ADRP X20, 0x10BD000
	0x0331F4F0 LDRB W8, [X20 + 0xC17]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BE000
	005 Move W8, [X20+3062]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDD5000
	012 Move X0, [X0+2904]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3062], W8
	016 Compare X19, 0
	017 JumpIfEqual {31}
	018 Move X8, 0xDD5000
	019 Move X8, [X8+2904]
	020 Move X0, [X8]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Call Boolean.Parse, X0
	030 Return X0
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move W0, W31
	034 Move X30, [X31+32]
	035 Return X0

Method: System.Boolean ToBoolean(System.String value, System.IFormatProvider provider)

Disassembly:
	0x0331F4F4 MOV X19, X0
	0x0331F4F8 TBNZ X8, 0x0, 0x331F510
	0x0331F4FC ADRP X0, 0xDDD000
	0x0331F500 LDR X0, [X0 + 0x9E8]
	0x0331F504 BL 0x1C16CF4
	0x0331F508 MOVZ W8, 0x1
	0x0331F50C STRB W8, [X20 + 0xC17]
	0x0331F510 CMP X19, 0x100
	0x0331F514 B.CS 0x331F528
	0x0331F518 MOV W0, W19
	0x0331F51C LDP X20, X19, [X31 + 0x10]
	0x0331F520 LDR X30, [X31], #0x20
	0x0331F524 RET
	0x0331F528 ADRP X8, 0xDDD000
	0x0331F52C LDR X8, [X8 + 0x9E8]
	0x0331F530 LDR X0, [X8]
	0x0331F534 BL 0x19903D0
	0x0331F538 BL 0x331DFE0
	0x0331F53C STR X30, [X31 - 0x20]!
	0x0331F540 STP X20, X19, [X31 + 0x10]
	0x0331F544 ADRP X20, 0x10BD000
	0x0331F548 LDRB W8, [X20 + 0xC18]
	0x0331F54C MOV X19, X0
	0x0331F550 TBNZ X8, 0x0, 0x331F568
	0x0331F554 ADRP X0, 0xDDD000
	0x0331F558 LDR X0, [X0 + 0x9E8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BE000
	005 Move W8, [X20+3063]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDD5000
	012 Move X0, [X0+2904]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3063], W8
	016 Compare X19, 0
	017 JumpIfEqual {31}
	018 Move X8, 0xDD5000
	019 Move X8, [X8+2904]
	020 Move X0, [X8]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Call Boolean.Parse, X0
	030 Return X0
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move W0, W31
	034 Move X30, [X31+32]
	035 Return X0

Method: System.Boolean ToBoolean(System.Single value)

Disassembly:
	0x0331F55C BL 0x1C16CF4
	0x0331F560 MOVZ W8, 0x1
	0x0331F564 STRB W8, [X20 + 0xC18]

ISIL:
	001 NotImplemented "Instruction FCMP not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: System.Boolean ToBoolean(System.Double value)

Disassembly:
	0x0331F568 CMP X19, 0x100
	0x0331F56C B.CS 0x331F580
	0x0331F570 MOV W0, W19

ISIL:
	001 NotImplemented "Instruction FCMP not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: System.Boolean ToBoolean(System.Decimal value)

Disassembly:
	0x0331F574 LDP X20, X19, [X31 + 0x10]
	0x0331F578 LDR X30, [X31], #0x20
	0x0331F57C RET
	0x0331F580 ADRP X8, 0xDDD000
	0x0331F584 LDR X8, [X8 + 0x9E8]
	0x0331F588 LDR X0, [X8]
	0x0331F58C BL 0x19903D0
	0x0331F590 BL 0x331DFE0
	0x0331F594 STR D8, [X31 - 0x20]!
	0x0331F598 STR X30, [X31 + 0x8]
	0x0331F59C STP X20, X19, [X31 + 0x10]
	0x0331F5A0 ADRP X19, 0x10BD000
	0x0331F5A4 ADRP X20, 0xDDD000
	0x0331F5A8 LDRB W8, [X19 + 0xC19]
	0x0331F5AC LDR X20, [X20 + 0x9E8]
	0x0331F5B0 MOV V8.16B, V0.16B
	0x0331F5B4 TBNZ X8, 0x0, 0x331F5CC
	0x0331F5B8 ADRP X0, 0xDDD000
	0x0331F5BC LDR X0, [X0 + 0x9E8]
	0x0331F5C0 BL 0x1C16CF4
	0x0331F5C4 MOVZ W8, 0x1
	0x0331F5C8 STRB W8, [X19 + 0xC19]
	0x0331F5CC LDR X0, [X20]
	0x0331F5D0 LDR W8, [X0 + 0xE0]
	0x0331F5D4 CBNZ W8, 0x331F5DC
	0x0331F5D8 BL 0x1C16DFC
	0x0331F5DC LDP X20, X19, [X31 + 0x10]
	0x0331F5E0 LDR X30, [X31 + 0x8]
	0x0331F5E4 FCVT S0, S8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x10BE000
	007 Move X21, 0xDFD000
	008 Move W8, [X22+3064]
	009 Move X21, [X21+1520]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xDFD000
	017 Move X0, [X0+1520]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3064], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X21]
	027 Move X8, [X0+184]
	028 Move X0, X20
	029 Move X1, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X2, [X8]
	033 Move X3, [X8+8]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move X4, X31
	037 Move X30, [X31+48]
	038 Call Decimal.op_Inequality, X0, X1
	039 Return X0

Method: System.Char ToChar(System.Object value)

Disassembly:
	0x0331F5E8 LDR V8, [X31], #0x20
	0x0331F5EC B 0x331F5F0
	0x0331F5F0 STR D8, [X31 - 0x20]!
	0x0331F5F4 STR X30, [X31 + 0x8]
	0x0331F5F8 STP X20, X19, [X31 + 0x10]
	0x0331F5FC ADRP X19, 0x10BD000
	0x0331F600 ADRP X20, 0xDDD000
	0x0331F604 LDRB W8, [X19 + 0xC1A]
	0x0331F608 LDR X20, [X20 + 0x9E8]
	0x0331F60C MOV V8.16B, V0.16B
	0x0331F610 TBNZ X8, 0x0, 0x331F628
	0x0331F614 ADRP X0, 0xDDD000
	0x0331F618 LDR X0, [X0 + 0x9E8]
	0x0331F61C BL 0x1C16CF4
	0x0331F620 MOVZ W8, 0x1
	0x0331F624 STRB W8, [X19 + 0xC1A]
	0x0331F628 LDR X0, [X20]
	0x0331F62C LDR W8, [X0 + 0xE0]
	0x0331F630 CBNZ W8, 0x331F638
	0x0331F634 BL 0x1C16DFC
	0x0331F638 MOV V0.16B, V8.16B
	0x0331F63C BL 0x331EFAC
	0x0331F640 LDP X20, X19, [X31 + 0x10]
	0x0331F644 LDR X30, [X31 + 0x8]
	0x0331F648 LDR V8, [X31], #0x20
	0x0331F64C B 0x331F434
	0x0331F650 STR X30, [X31 - 0x30]!
	0x0331F654 STP X22, X21, [X31 + 0x10]
	0x0331F658 STP X20, X19, [X31 + 0x20]
	0x0331F65C ADRP X22, 0x10BD000
	0x0331F660 ADRP X21, 0xDFC000
	0x0331F664 LDRB W8, [X22 + 0xC1B]
	0x0331F668 LDR X21, [X21 + 0x5F0]
	0x0331F66C MOV X19, X1
	0x0331F670 MOV X20, X0
	0x0331F674 TBNZ X8, 0x0, 0x331F68C
	0x0331F678 ADRP X0, 0xDFC000
	0x0331F67C LDR X0, [X0 + 0x5F0]
	0x0331F680 BL 0x1C16CF4
	0x0331F684 MOVZ W8, 0x1
	0x0331F688 STRB W8, [X22 + 0xC1B]
	0x0331F68C LDR X0, [X21]
	0x0331F690 LDR W8, [X0 + 0xE0]
	0x0331F694 CBNZ W8, 0x331F69C
	0x0331F698 BL 0x1C16DFC
	0x0331F69C MOV X0, X20
	0x0331F6A0 MOV X1, X19
	0x0331F6A4 MOV W2, W31
	0x0331F6A8 MOV X3, X31
	0x0331F6AC BL 0x33D7A90
	0x0331F6B0 LDP X20, X19, [X31 + 0x20]
	0x0331F6B4 LDP X22, X21, [X31 + 0x10]
	0x0331F6B8 MOV X2, X31
	0x0331F6BC LDR X30, [X31], #0x30
	0x0331F6C0 B 0x33D7FA8
	0x0331F6C4 STR X30, [X31 - 0x20]!
	0x0331F6C8 STP X20, X19, [X31 + 0x10]
	0x0331F6CC ADRP X20, 0x10BD000
	0x0331F6D0 LDRB W8, [X20 + 0xC1C]
	0x0331F6D4 MOV X19, X0
	0x0331F6D8 TBNZ X8, 0x0, 0x331F6F0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10BE000
	006 Move W8, [X19+3065]
	007 Move X21, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE05000
	013 Move X0, [X0+3600]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3065], W8
	017 Compare X21, 0
	018 JumpIfEqual {48}
	019 Move X20, 0xE05000
	020 Move X20, [X20+3600]
	021 Move X0, X21
	022 Move X19, [X20]
	023 Move X1, X19
	024 Call 0x1C17E00
	025 Compare X0, 0
	026 JumpIfEqual {67}
	027 Move X20, [X20]
	028 Move X0, X21
	029 Move X1, X20
	030 Call 0x1C17E00
	031 Compare X0, 0
	032 JumpIfEqual {70}
	033 Move X8, [X0]
	034 Move X19, X0
	035 NotImplemented "Instruction LDRH not yet implemented."
	036 Compare X9, 0
	037 JumpIfEqual {44}
	038 Move X10, [X8+176]
	039 Add X10, X10, 8
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Subtract X9, X9, 1
	043 Add X10, X10, 16
	044 Move W2, 2
	045 Move X0, X19
	046 Move X1, X20
	047 Call 0x1C5D788
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move W0, W31
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Return X0
	054 Move W9, [X10]
	055 Add W9, W9, 2
	056 Add X8, X8, W9
	057 Add X0, X8, 312
	058 Move X3, [X0]
	059 Move X2, [X0+8]
	060 Move X0, X19
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X1, X31
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 CallNoReturn X3
	067 Move X0, X21
	068 Move X1, X19
	069 Call 0x1C181E0
	070 Move X0, X21
	071 Move X1, X20
	072 Call 0x1C181E0

Method: System.Char ToChar(System.Object value, System.IFormatProvider provider)

Disassembly:
	0x0331F6DC ADRP X0, 0xDD6000
	0x0331F6E0 LDR X0, [X0 + 0xC48]
	0x0331F6E4 BL 0x1C16CF4
	0x0331F6E8 MOVZ W8, 0x1
	0x0331F6EC STRB W8, [X20 + 0xC1C]
	0x0331F6F0 CBZ X19, 0x331F728
	0x0331F6F4 ADRP X8, 0xDD6000
	0x0331F6F8 LDR X8, [X8 + 0xC48]
	0x0331F6FC LDR X0, [X8]
	0x0331F700 LDR W8, [X0 + 0xE0]
	0x0331F704 CBNZ W8, 0x331F70C
	0x0331F708 BL 0x1C16DFC
	0x0331F70C MOV X0, X31
	0x0331F710 BL 0x33387A0
	0x0331F714 MOV X1, X0
	0x0331F718 MOV X0, X19
	0x0331F71C LDP X20, X19, [X31 + 0x10]
	0x0331F720 LDR X30, [X31], #0x20
	0x0331F724 B 0x3319948
	0x0331F728 LDP X20, X19, [X31 + 0x10]
	0x0331F72C MOV W0, W31
	0x0331F730 LDR X30, [X31], #0x20
	0x0331F734 RET
	0x0331F738 CBZ X0, 0x331F748
	0x0331F73C MOV X2, X1
	0x0331F740 MOVZ W1, 0x7
	0x0331F744 B 0x33199D4
	0x0331F748 RET
	0x0331F74C STP X30, X21, [X31 - 0x20]!
	0x0331F750 STP X20, X19, [X31 + 0x10]
	0x0331F754 ADRP X19, 0x10BD000
	0x0331F758 LDRB W8, [X19 + 0xC1D]
	0x0331F75C MOV X21, X0
	0x0331F760 TBNZ X8, 0x0, 0x331F778
	0x0331F764 ADRP X0, 0xE04000
	0x0331F768 LDR X0, [X0 + 0xE10]
	0x0331F76C BL 0x1C16CF4
	0x0331F770 MOVZ W8, 0x1
	0x0331F774 STRB W8, [X19 + 0xC1D]
	0x0331F778 CBZ X21, 0x331F7F0
	0x0331F77C ADRP X20, 0xE04000
	0x0331F780 LDR X20, [X20 + 0xE10]
	0x0331F784 MOV X0, X21
	0x0331F788 LDR X19, [X20]
	0x0331F78C MOV X1, X19
	0x0331F790 BL 0x1C16E00
	0x0331F794 CBZ X0, 0x331F828
	0x0331F798 LDR X20, [X20]
	0x0331F79C MOV X0, X21
	0x0331F7A0 MOV X1, X20
	0x0331F7A4 BL 0x1C16E00
	0x0331F7A8 CBZ X0, 0x331F834
	0x0331F7AC LDR X8, [X0]
	0x0331F7B0 MOV X19, X0
	0x0331F7B4 LDRH W9, [X8 + 0x12E]
	0x0331F7B8 CBZ X9, 0x331F7DC
	0x0331F7BC LDR X10, [X8 + 0xB0]
	0x0331F7C0 ADD X10, X10, 0x8
	0x0331F7C4 LDUR X11, [X10 - 0x8]
	0x0331F7C8 CMP X11, X20
	0x0331F7CC B.EQ 0x331F800
	0x0331F7D0 SUBS X9, X9, 0x1
	0x0331F7D4 ADD X10, X10, 0x10
	0x0331F7D8 B.NE 0x331F7C4
	0x0331F7DC MOVZ W2, 0x5

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x10BE000
	007 Move W8, [X20+3066]
	008 Move X19, X1
	009 Move X22, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE05000
	015 Move X0, [X0+3600]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3066], W8
	019 Compare X22, 0
	020 JumpIfEqual {50}
	021 Move X21, 0xE05000
	022 Move X21, [X21+3600]
	023 Move X0, X22
	024 Move X20, [X21]
	025 Move X1, X20
	026 Call 0x1C17E00
	027 Compare X0, 0
	028 JumpIfEqual {71}
	029 Move X21, [X21]
	030 Move X0, X22
	031 Move X1, X21
	032 Call 0x1C17E00
	033 Compare X0, 0
	034 JumpIfEqual {74}
	035 Move X8, [X0]
	036 Move X20, X0
	037 NotImplemented "Instruction LDRH not yet implemented."
	038 Compare X9, 0
	039 JumpIfEqual {46}
	040 Move X10, [X8+176]
	041 Add X10, X10, 8
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Subtract X9, X9, 1
	045 Add X10, X10, 16
	046 Move W2, 2
	047 Move X0, X20
	048 Move X1, X21
	049 Call 0x1C5D788
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move W0, W31
	055 Move X30, [X31+48]
	056 Return X0
	057 Move W9, [X10]
	058 Add W9, W9, 2
	059 Add X8, X8, W9
	060 Add X0, X8, 312
	061 Move X3, [X0]
	062 Move X2, [X0+8]
	063 Move X0, X20
	064 Move X1, X19
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X22, [X31+16]
	068 Move X21, [X31+24]
	069 Move X30, [X31+48]
	070 CallNoReturn X3
	071 Move X0, X22
	072 Move X1, X20
	073 Call 0x1C181E0
	074 Move X0, X22
	075 Move X1, X21
	076 Call 0x1C181E0

Method: System.Char ToChar(System.SByte value)

Disassembly:
	0x0331F7E0 MOV X0, X19
	0x0331F7E4 MOV X1, X20
	0x0331F7E8 BL 0x1C5C788
	0x0331F7EC B 0x331F810
	0x0331F7F0 LDP X20, X19, [X31 + 0x10]
	0x0331F7F4 MOV W0, W31
	0x0331F7F8 LDP X30, X21, [X31], #0x20
	0x0331F7FC RET
	0x0331F800 LDR W9, [X10]
	0x0331F804 ADD W9, W9, 0x5
	0x0331F808 ADD X8, X8, W9, 0x4, SXTW
	0x0331F80C ADD X0, X8, 0x138
	0x0331F810 LDP X3, X2, [X0]
	0x0331F814 MOV X0, X19
	0x0331F818 LDP X20, X19, [X31 + 0x10]
	0x0331F81C MOV X1, X31
	0x0331F820 LDP X30, X21, [X31], #0x20
	0x0331F824 BR X3
	0x0331F828 MOV X0, X21
	0x0331F82C MOV X1, X19
	0x0331F830 BL 0x1C171E0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BE000
	005 Move W8, [X20+3067]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDE000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3067], W8
	016 Move TEMP, X19
	017 And TEMP, TEMP, 128
	018 Compare TEMP, 128
	019 JumpIfEqual {25}
	020 And W0, W19, 255
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0
	025 Move X8, 0xDDE000
	026 Move X8, [X8+2536]
	027 Move X0, [X8]
	028 Call 0x19913D0
	029 Call Convert.ThrowCharOverflowException

Method: System.Char ToChar(System.Byte value)

Disassembly:
	0x0331AFC0 STP X20, X19, [X31 + 0x10]
	0x0331AFC4 ADRP X21, 0x10C2000

ISIL:
	001 And W0, W0, 255
	002 Return X0

Method: System.Char ToChar(System.Int16 value)

Disassembly:
	0x0331F834 MOV X0, X21
	0x0331F838 MOV X1, X20
	0x0331F83C BL 0x1C171E0
	0x0331F840 STR X30, [X31 - 0x30]!
	0x0331F844 STP X22, X21, [X31 + 0x10]
	0x0331F848 STP X20, X19, [X31 + 0x20]
	0x0331F84C ADRP X20, 0x10BD000
	0x0331F850 LDRB W8, [X20 + 0xC1E]
	0x0331F854 MOV X19, X1
	0x0331F858 MOV X22, X0
	0x0331F85C TBNZ X8, 0x0, 0x331F874
	0x0331F860 ADRP X0, 0xE04000
	0x0331F864 LDR X0, [X0 + 0xE10]
	0x0331F868 BL 0x1C16CF4
	0x0331F86C MOVZ W8, 0x1
	0x0331F870 STRB W8, [X20 + 0xC1E]
	0x0331F874 CBZ X22, 0x331F8EC
	0x0331F878 ADRP X21, 0xE04000
	0x0331F87C LDR X21, [X21 + 0xE10]
	0x0331F880 MOV X0, X22
	0x0331F884 LDR X20, [X21]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BE000
	005 Move W8, [X20+3068]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDE000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3068], W8
	016 Move TEMP, X19
	017 And TEMP, TEMP, 0x8000
	018 Compare TEMP, 0x8000
	019 JumpIfEqual {25}
	020 Move W0, W19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0
	025 Move X8, 0xDDE000
	026 Move X8, [X8+2536]
	027 Move X0, [X8]
	028 Call 0x19913D0
	029 Call Convert.ThrowCharOverflowException

Method: System.Char ToChar(System.UInt16 value)

Disassembly:
	0x0331F888 MOV X1, X20

ISIL:
	001 Return X0

Method: System.Char ToChar(System.Int32 value)

Disassembly:
	0x0331F88C BL 0x1C16E00
	0x0331F890 CBZ X0, 0x331F92C
	0x0331F894 LDR X21, [X21]
	0x0331F898 MOV X0, X22
	0x0331F89C MOV X1, X21
	0x0331F8A0 BL 0x1C16E00
	0x0331F8A4 CBZ X0, 0x331F938
	0x0331F8A8 LDR X8, [X0]
	0x0331F8AC MOV X20, X0
	0x0331F8B0 LDRH W9, [X8 + 0x12E]
	0x0331F8B4 CBZ X9, 0x331F8D8
	0x0331F8B8 LDR X10, [X8 + 0xB0]
	0x0331F8BC ADD X10, X10, 0x8
	0x0331F8C0 LDUR X11, [X10 - 0x8]
	0x0331F8C4 CMP X11, X21
	0x0331F8C8 B.EQ 0x331F900
	0x0331F8CC SUBS X9, X9, 0x1
	0x0331F8D0 ADD X10, X10, 0x10
	0x0331F8D4 B.NE 0x331F8C0
	0x0331F8D8 MOVZ W2, 0x5
	0x0331F8DC MOV X0, X20
	0x0331F8E0 MOV X1, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BE000
	005 Move W8, [X20+3069]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDE000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3069], W8
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move X8, 0xDDE000
	023 Move X8, [X8+2536]
	024 Move X0, [X8]
	025 Call 0x19913D0
	026 Call Convert.ThrowCharOverflowException

Method: System.Char ToChar(System.UInt32 value)

Disassembly:
	0x0331F8E4 BL 0x1C5C788
	0x0331F8E8 B 0x331F910
	0x0331F8EC LDP X20, X19, [X31 + 0x20]
	0x0331F8F0 LDP X22, X21, [X31 + 0x10]
	0x0331F8F4 MOV W0, W31
	0x0331F8F8 LDR X30, [X31], #0x30
	0x0331F8FC RET
	0x0331F900 LDR W9, [X10]
	0x0331F904 ADD W9, W9, 0x5
	0x0331F908 ADD X8, X8, W9, 0x4, SXTW
	0x0331F90C ADD X0, X8, 0x138
	0x0331F910 LDP X3, X2, [X0]
	0x0331F914 MOV X0, X20
	0x0331F918 MOV X1, X19
	0x0331F91C LDP X20, X19, [X31 + 0x20]
	0x0331F920 LDP X22, X21, [X31 + 0x10]
	0x0331F924 LDR X30, [X31], #0x30
	0x0331F928 BR X3
	0x0331F92C MOV X0, X22
	0x0331F930 MOV X1, X20
	0x0331F934 BL 0x1C171E0
	0x0331F938 MOV X0, X22

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BE000
	005 Move W8, [X20+3070]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDE000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3070], W8
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move X8, 0xDDE000
	023 Move X8, [X8+2536]
	024 Move X0, [X8]
	025 Call 0x19913D0
	026 Call Convert.ThrowCharOverflowException

Method: System.Char ToChar(System.Int64 value)

Disassembly:
	0x0331F93C MOV X1, X21
	0x0331F940 BL 0x1C171E0
	0x0331F944 SXTB W0, W0
	0x0331F948 RET
	0x0331F94C STR X30, [X31 - 0x20]!
	0x0331F950 STP X20, X19, [X31 + 0x10]
	0x0331F954 ADRP X20, 0x10BD000
	0x0331F958 LDRB W8, [X20 + 0xC20]
	0x0331F95C MOV W19, W0
	0x0331F960 TBNZ X8, 0x0, 0x331F978
	0x0331F964 ADRP X0, 0xDDD000
	0x0331F968 LDR X0, [X0 + 0x9E8]
	0x0331F96C BL 0x1C16CF4
	0x0331F970 MOVZ W8, 0x1
	0x0331F974 STRB W8, [X20 + 0xC20]
	0x0331F978 TBNZ X19, 0xF, 0x331F98C
	0x0331F97C MOV W0, W19
	0x0331F980 LDP X20, X19, [X31 + 0x10]
	0x0331F984 LDR X30, [X31], #0x20
	0x0331F988 RET
	0x0331F98C ADRP X8, 0xDDD000
	0x0331F990 LDR X8, [X8 + 0x9E8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BE000
	005 Move W8, [X20+3071]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDE000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3071], W8
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move X8, 0xDDE000
	023 Move X8, [X8+2536]
	024 Move X0, [X8]
	025 Call 0x19913D0
	026 Call Convert.ThrowCharOverflowException

Method: System.Char ToChar(System.UInt64 value)

Disassembly:
	0x0331F994 LDR X0, [X8]
	0x0331F998 BL 0x19903D0
	0x0331F99C BL 0x331E078
	0x0331F9A0 STR X30, [X31 - 0x20]!
	0x0331F9A4 STP X20, X19, [X31 + 0x10]
	0x0331F9A8 ADRP X20, 0x10BD000
	0x0331F9AC LDRB W8, [X20 + 0xC21]
	0x0331F9B0 MOV W19, W0
	0x0331F9B4 TBNZ X8, 0x0, 0x331F9CC
	0x0331F9B8 ADRP X0, 0xDDD000
	0x0331F9BC LDR X0, [X0 + 0x9E8]
	0x0331F9C0 BL 0x1C16CF4
	0x0331F9C4 MOVZ W8, 0x1
	0x0331F9C8 STRB W8, [X20 + 0xC21]
	0x0331F9CC CMP W19, W19, SXTH
	0x0331F9D0 B.NE 0x331F9E4
	0x0331F9D4 MOV W0, W19
	0x0331F9D8 LDP X20, X19, [X31 + 0x10]
	0x0331F9DC LDR X30, [X31], #0x20
	0x0331F9E0 RET
	0x0331F9E4 ADRP X8, 0xDDD000
	0x0331F9E8 LDR X8, [X8 + 0x9E8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BE000
	005 Move W8, [X20+3072]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDE000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3072], W8
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move X8, 0xDDE000
	023 Move X8, [X8+2536]
	024 Move X0, [X8]
	025 Call 0x19913D0
	026 Call Convert.ThrowCharOverflowException

Method: System.Char ToChar(System.String value)

Disassembly:
	0x0331F9EC LDR X0, [X8]
	0x0331F9F0 BL 0x19903D0
	0x0331F9F4 BL 0x331E078
	0x0331F9F8 STR X30, [X31 - 0x20]!
	0x0331F9FC STP X20, X19, [X31 + 0x10]
	0x0331FA00 ADRP X20, 0x10BD000
	0x0331FA04 LDRB W8, [X20 + 0xC22]
	0x0331FA08 MOV W19, W0
	0x0331FA0C TBNZ X8, 0x0, 0x331FA24
	0x0331FA10 ADRP X0, 0xDDD000
	0x0331FA14 LDR X0, [X0 + 0x9E8]
	0x0331FA18 BL 0x1C16CF4
	0x0331FA1C MOVZ W8, 0x1
	0x0331FA20 STRB W8, [X20 + 0xC22]
	0x0331FA24 CMP W19, 0x8000
	0x0331FA28 B.CS 0x331FA3C
	0x0331FA2C MOV W0, W19
	0x0331FA30 LDP X20, X19, [X31 + 0x10]
	0x0331FA34 LDR X30, [X31], #0x20
	0x0331FA38 RET
	0x0331FA3C ADRP X8, 0xDDD000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x10BE000
	006 Move X21, 0xDDE000
	007 Move W8, [X20+3073]
	008 Move X21, [X21+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDDE000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3073], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]

Method: System.Char ToChar(System.String value, System.IFormatProvider provider)

Disassembly:
	0x0331FA40 LDR X8, [X8 + 0x9E8]
	0x0331FA44 LDR X0, [X8]
	0x0331FA48 BL 0x19903D0
	0x0331FA4C BL 0x331E078
	0x0331FA50 STR X30, [X31 - 0x20]!
	0x0331FA54 STP X20, X19, [X31 + 0x10]
	0x0331FA58 ADRP X20, 0x10BD000
	0x0331FA5C LDRB W8, [X20 + 0xC23]
	0x0331FA60 MOV X19, X0
	0x0331FA64 TBNZ X8, 0x0, 0x331FA7C
	0x0331FA68 ADRP X0, 0xDDD000
	0x0331FA6C LDR X0, [X0 + 0x9E8]
	0x0331FA70 BL 0x1C16CF4
	0x0331FA74 MOVZ W8, 0x1
	0x0331FA78 STRB W8, [X20 + 0xC23]
	0x0331FA7C CMP X19, W19, SXTH
	0x0331FA80 B.NE 0x331FA94
	0x0331FA84 MOV W0, W19
	0x0331FA88 LDP X20, X19, [X31 + 0x10]
	0x0331FA8C LDR X30, [X31], #0x20
	0x0331FA90 RET
	0x0331FA94 ADRP X8, 0xDDD000
	0x0331FA98 LDR X8, [X8 + 0x9E8]
	0x0331FA9C LDR X0, [X8]
	0x0331FAA0 BL 0x19903D0
	0x0331FAA4 BL 0x331E078
	0x0331FAA8 STR X30, [X31 - 0x20]!
	0x0331FAAC STP X20, X19, [X31 + 0x10]
	0x0331FAB0 ADRP X20, 0x10BD000
	0x0331FAB4 LDRB W8, [X20 + 0xC24]
	0x0331FAB8 MOV X19, X0
	0x0331FABC TBNZ X8, 0x0, 0x331FAD4
	0x0331FAC0 ADRP X0, 0xDDD000
	0x0331FAC4 LDR X0, [X0 + 0x9E8]
	0x0331FAC8 BL 0x1C16CF4
	0x0331FACC MOVZ W8, 0x1
	0x0331FAD0 STRB W8, [X20 + 0xC24]
	0x0331FAD4 CMP X19, 0x8000
	0x0331FAD8 B.CS 0x331FAEC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X0, 0
	004 JumpIfEqual {13}
	005 Move W8, [X0+16]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move W1, W31
	008 Move X2, X31
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Call String.get_Chars, X0, X1
	012 Return X0
	013 Move X0, 0xDDA000
	014 Move X0, [X0+1320]
	015 Call 0x1C17D08
	016 Call 0x1C17F10
	017 Move X19, X0
	018 Move X0, 0xDDF000
	019 Move X0, [X0+3784]
	020 Call 0x1C17D08
	021 Move X1, X0
	022 Move X0, X19
	023 Call ArgumentNullException..ctor, X0, X1
	024 Move X0, 0xE02000
	025 Move X0, [X0+3080]
	026 Call 0x1C17D08
	027 Call 0x1C17F10
	028 Move X19, X0
	029 Move X0, 0xE0A000
	030 Move X0, [X0+168]
	031 Call 0x1C17D08
	032 Move X1, X0
	033 Move X0, X19
	034 Move X2, X31
	035 Call FormatException..ctor, X0, X1
	036 Move X0, 0xE0A000
	037 Move X0, [X0+528]
	038 Call 0x1C17D08
	039 Move X1, X0
	040 Move X0, X19
	041 Call 0x1C17DEC

Method: System.SByte ToSByte(System.Object value)

Disassembly:
	0x0331FADC MOV W0, W19
	0x0331FAE0 LDP X20, X19, [X31 + 0x10]
	0x0331FAE4 LDR X30, [X31], #0x20
	0x0331FAE8 RET
	0x0331FAEC ADRP X8, 0xDDD000
	0x0331FAF0 LDR X8, [X8 + 0x9E8]
	0x0331FAF4 LDR X0, [X8]
	0x0331FAF8 BL 0x19903D0
	0x0331FAFC BL 0x331E078
	0x0331FB00 STR D8, [X31 - 0x20]!
	0x0331FB04 STR X30, [X31 + 0x8]
	0x0331FB08 STP X20, X19, [X31 + 0x10]
	0x0331FB0C ADRP X19, 0x10BD000
	0x0331FB10 ADRP X20, 0xDDD000
	0x0331FB14 LDRB W8, [X19 + 0xC25]
	0x0331FB18 LDR X20, [X20 + 0x9E8]
	0x0331FB1C MOV V8.16B, V0.16B
	0x0331FB20 TBNZ X8, 0x0, 0x331FB38
	0x0331FB24 ADRP X0, 0xDDD000
	0x0331FB28 LDR X0, [X0 + 0x9E8]
	0x0331FB2C BL 0x1C16CF4
	0x0331FB30 MOVZ W8, 0x1
	0x0331FB34 STRB W8, [X19 + 0xC25]
	0x0331FB38 LDR X0, [X20]
	0x0331FB3C LDR W8, [X0 + 0xE0]
	0x0331FB40 CBNZ W8, 0x331FB48
	0x0331FB44 BL 0x1C16DFC
	0x0331FB48 LDP X20, X19, [X31 + 0x10]
	0x0331FB4C LDR X30, [X31 + 0x8]
	0x0331FB50 FCVT S0, S8
	0x0331FB54 LDR V8, [X31], #0x20
	0x0331FB58 B 0x331FB5C
	0x0331FB5C STR D8, [X31 - 0x20]!
	0x0331FB60 STR X30, [X31 + 0x8]
	0x0331FB64 STP X20, X19, [X31 + 0x10]
	0x0331FB68 ADRP X19, 0x10BD000
	0x0331FB6C ADRP X20, 0xDDD000
	0x0331FB70 LDRB W8, [X19 + 0xC26]
	0x0331FB74 LDR X20, [X20 + 0x9E8]
	0x0331FB78 MOV V8.16B, V0.16B
	0x0331FB7C TBNZ X8, 0x0, 0x331FB94
	0x0331FB80 ADRP X0, 0xDDD000
	0x0331FB84 LDR X0, [X0 + 0x9E8]
	0x0331FB88 BL 0x1C16CF4
	0x0331FB8C MOVZ W8, 0x1
	0x0331FB90 STRB W8, [X19 + 0xC26]
	0x0331FB94 LDR X0, [X20]
	0x0331FB98 LDR W8, [X0 + 0xE0]
	0x0331FB9C CBNZ W8, 0x331FBA4
	0x0331FBA0 BL 0x1C16DFC
	0x0331FBA4 MOV V0.16B, V8.16B
	0x0331FBA8 BL 0x331EFAC
	0x0331FBAC LDP X20, X19, [X31 + 0x10]
	0x0331FBB0 LDR X30, [X31 + 0x8]
	0x0331FBB4 LDR V8, [X31], #0x20
	0x0331FBB8 B 0x331F9A0
	0x0331FBBC STR X30, [X31 - 0x30]!
	0x0331FBC0 STP X22, X21, [X31 + 0x10]
	0x0331FBC4 STP X20, X19, [X31 + 0x20]
	0x0331FBC8 ADRP X22, 0x10BD000
	0x0331FBCC ADRP X21, 0xDFC000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10BE000
	006 Move W8, [X19+3074]
	007 Move X21, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE05000
	013 Move X0, [X0+3600]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3074], W8
	017 Compare X21, 0
	018 JumpIfEqual {48}
	019 Move X20, 0xE05000
	020 Move X20, [X20+3600]
	021 Move X0, X21
	022 Move X19, [X20]
	023 Move X1, X19
	024 Call 0x1C17E00
	025 Compare X0, 0
	026 JumpIfEqual {67}
	027 Move X20, [X20]
	028 Move X0, X21
	029 Move X1, X20
	030 Call 0x1C17E00
	031 Compare X0, 0
	032 JumpIfEqual {70}
	033 Move X8, [X0]
	034 Move X19, X0
	035 NotImplemented "Instruction LDRH not yet implemented."
	036 Compare X9, 0
	037 JumpIfEqual {44}
	038 Move X10, [X8+176]
	039 Add X10, X10, 8
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Subtract X9, X9, 1
	043 Add X10, X10, 16
	044 Move W2, 3
	045 Move X0, X19
	046 Move X1, X20
	047 Call 0x1C5D788
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move W0, W31
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Return X0
	054 Move W9, [X10]
	055 Add W9, W9, 3
	056 Add X8, X8, W9
	057 Add X0, X8, 312
	058 Move X3, [X0]
	059 Move X2, [X0+8]
	060 Move X0, X19
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X1, X31
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 CallNoReturn X3
	067 Move X0, X21
	068 Move X1, X19
	069 Call 0x1C181E0
	070 Move X0, X21
	071 Move X1, X20
	072 Call 0x1C181E0

Method: System.SByte ToSByte(System.Object value, System.IFormatProvider provider)

Disassembly:
	0x0331FBD0 LDRB W8, [X22 + 0xC27]
	0x0331FBD4 LDR X21, [X21 + 0x5F0]
	0x0331FBD8 MOV X19, X1
	0x0331FBDC MOV X20, X0
	0x0331FBE0 TBNZ X8, 0x0, 0x331FBF8
	0x0331FBE4 ADRP X0, 0xDFC000
	0x0331FBE8 LDR X0, [X0 + 0x5F0]
	0x0331FBEC BL 0x1C16CF4
	0x0331FBF0 MOVZ W8, 0x1
	0x0331FBF4 STRB W8, [X22 + 0xC27]
	0x0331FBF8 LDR X0, [X21]
	0x0331FBFC LDR W8, [X0 + 0xE0]
	0x0331FC00 CBNZ W8, 0x331FC08
	0x0331FC04 BL 0x1C16DFC
	0x0331FC08 MOV X0, X20
	0x0331FC0C MOV X1, X19
	0x0331FC10 MOV W2, W31
	0x0331FC14 MOV X3, X31
	0x0331FC18 BL 0x33D7A90
	0x0331FC1C LDP X20, X19, [X31 + 0x20]
	0x0331FC20 LDP X22, X21, [X31 + 0x10]
	0x0331FC24 MOV X2, X31
	0x0331FC28 LDR X30, [X31], #0x30
	0x0331FC2C B 0x33D8598
	0x0331FC30 CBZ X0, 0x331FC44
	0x0331FC34 MOV X2, X1
	0x0331FC38 MOVZ W1, 0x7
	0x0331FC3C MOV X3, X31
	0x0331FC40 B 0x337AD50
	0x0331FC44 RET
	0x0331FC48 STP X30, X21, [X31 - 0x20]!
	0x0331FC4C STP X20, X19, [X31 + 0x10]
	0x0331FC50 ADRP X19, 0x10BD000
	0x0331FC54 LDRB W8, [X19 + 0xC28]
	0x0331FC58 MOV X21, X0
	0x0331FC5C TBNZ X8, 0x0, 0x331FC74
	0x0331FC60 ADRP X0, 0xE04000
	0x0331FC64 LDR X0, [X0 + 0xE10]
	0x0331FC68 BL 0x1C16CF4
	0x0331FC6C MOVZ W8, 0x1
	0x0331FC70 STRB W8, [X19 + 0xC28]
	0x0331FC74 CBZ X21, 0x331FCEC
	0x0331FC78 ADRP X20, 0xE04000
	0x0331FC7C LDR X20, [X20 + 0xE10]
	0x0331FC80 MOV X0, X21
	0x0331FC84 LDR X19, [X20]
	0x0331FC88 MOV X1, X19
	0x0331FC8C BL 0x1C16E00
	0x0331FC90 CBZ X0, 0x331FD24
	0x0331FC94 LDR X20, [X20]
	0x0331FC98 MOV X0, X21
	0x0331FC9C MOV X1, X20
	0x0331FCA0 BL 0x1C16E00
	0x0331FCA4 CBZ X0, 0x331FD30
	0x0331FCA8 LDR X8, [X0]
	0x0331FCAC MOV X19, X0
	0x0331FCB0 LDRH W9, [X8 + 0x12E]
	0x0331FCB4 CBZ X9, 0x331FCD8
	0x0331FCB8 LDR X10, [X8 + 0xB0]
	0x0331FCBC ADD X10, X10, 0x8
	0x0331FCC0 LDUR X11, [X10 - 0x8]
	0x0331FCC4 CMP X11, X20
	0x0331FCC8 B.EQ 0x331FCFC
	0x0331FCCC SUBS X9, X9, 0x1
	0x0331FCD0 ADD X10, X10, 0x10

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x10BE000
	007 Move W8, [X20+3075]
	008 Move X19, X1
	009 Move X22, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE05000
	015 Move X0, [X0+3600]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3075], W8
	019 Compare X22, 0
	020 JumpIfEqual {50}
	021 Move X21, 0xE05000
	022 Move X21, [X21+3600]
	023 Move X0, X22
	024 Move X20, [X21]
	025 Move X1, X20
	026 Call 0x1C17E00
	027 Compare X0, 0
	028 JumpIfEqual {71}
	029 Move X21, [X21]
	030 Move X0, X22
	031 Move X1, X21
	032 Call 0x1C17E00
	033 Compare X0, 0
	034 JumpIfEqual {74}
	035 Move X8, [X0]
	036 Move X20, X0
	037 NotImplemented "Instruction LDRH not yet implemented."
	038 Compare X9, 0
	039 JumpIfEqual {46}
	040 Move X10, [X8+176]
	041 Add X10, X10, 8
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Subtract X9, X9, 1
	045 Add X10, X10, 16
	046 Move W2, 3
	047 Move X0, X20
	048 Move X1, X21
	049 Call 0x1C5D788
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move W0, W31
	055 Move X30, [X31+48]
	056 Return X0
	057 Move W9, [X10]
	058 Add W9, W9, 3
	059 Add X8, X8, W9
	060 Add X0, X8, 312
	061 Move X3, [X0]
	062 Move X2, [X0+8]
	063 Move X0, X20
	064 Move X1, X19
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X22, [X31+16]
	068 Move X21, [X31+24]
	069 Move X30, [X31+48]
	070 CallNoReturn X3
	071 Move X0, X22
	072 Move X1, X20
	073 Call 0x1C181E0
	074 Move X0, X22
	075 Move X1, X21
	076 Call 0x1C181E0

Method: System.SByte ToSByte(System.Boolean value)

Disassembly:
	0x0331917C MOV X1, X20
	0x03319180 BLR X8

ISIL:
	001 And W0, W0, 1
	002 Return X0

Method: System.SByte ToSByte(System.Char value)

Disassembly:
	0x0331C014 TBNZ X8, 0x0, 0x331C02C
	0x0331C018 ADRP X0, 0xDD9000
	0x0331C01C LDR X0, [X0 + 0x170]
	0x0331C020 BL 0x1C16CF4
	0x0331C024 MOVZ W8, 0x1
	0x0331C028 STRB W8, [X21 + 0xBE9]
	0x0331C02C CBZ X20, 0x331C0B8
	0x0331C030 TBNZ X19, 0x1F, 0x331C088
	0x0331C034 LDR W8, [X20 + 0x10]
	0x0331C038 CMP W8, W19
	0x0331C03C B.LE 0x331C088
	0x0331C040 ADRP X21, 0xDD9000
	0x0331C044 LDR X21, [X21 + 0x170]
	0x0331C048 MOV X0, X20
	0x0331C04C MOV W1, W19
	0x0331C050 MOV X2, X31
	0x0331C054 BL 0x3222A1C
	0x0331C058 LDR X8, [X21]
	0x0331C05C MOV W19, W0
	0x0331C060 LDR W9, [X8 + 0xE0]
	0x0331C064 CBNZ W9, 0x331C070
	0x0331C068 MOV X0, X8
	0x0331C06C BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10C1000
	005 Move W8, [X20+3076]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDE1000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3076], W8
	016 And W8, W19, 0xFFFF
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move W0, W19
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Return X0
	023 Move X8, 0xDE1000
	024 Move X8, [X8+2536]
	025 Move X0, [X8]
	026 Call 0x19913D0
	027 Call Convert.ThrowSByteOverflowException

Method: System.SByte ToSByte(System.Byte value)

Disassembly:
	0x0331B020 LDRB W8, [X20 + 0xC04]
	0x0331B024 MOV W19, W0
	0x0331B028 TBNZ X8, 0x0, 0x331B040
	0x0331B02C ADRP X0, 0xDE1000
	0x0331B030 LDR X0, [X0 + 0x9E8]
	0x0331B034 BL 0x1C16CF4
	0x0331B038 MOVZ W8, 0x1
	0x0331B03C STRB W8, [X20 + 0xC04]
	0x0331B040 AND W8, W19, 0xFFFF
	0x0331B044 CMP W8, 0x80
	0x0331B048 B.CS 0x331B05C
	0x0331B04C MOV W0, W19
	0x0331B050 LDP X20, X19, [X31 + 0x10]
	0x0331B054 LDR X30, [X31], #0x20
	0x0331B058 RET
	0x0331B05C ADRP X8, 0xDE1000
	0x0331B060 LDR X8, [X8 + 0x9E8]
	0x0331B064 LDR X0, [X8]
	0x0331B068 BL 0x19903D0
	0x0331B06C BL 0x331E02C
	0x0331B070 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10C2000
	005 Move W8, [X20+3077]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDE2000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3077], W8
	016 Move TEMP, X19
	017 And TEMP, TEMP, 128
	018 Compare TEMP, 128
	019 JumpIfEqual {25}
	020 Move W0, W19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0
	025 Move X8, 0xDE2000
	026 Move X8, [X8+2536]
	027 Move X0, [X8]
	028 Call 0x19913D0
	029 Call Convert.ThrowSByteOverflowException

Method: System.SByte ToSByte(System.Int16 value)

Disassembly:
	0x0331FCD4 B.NE 0x331FCC0
	0x0331FCD8 MOVZ W2, 0x6
	0x0331FCDC MOV X0, X19
	0x0331FCE0 MOV X1, X20
	0x0331FCE4 BL 0x1C5C788
	0x0331FCE8 B 0x331FD0C
	0x0331FCEC LDP X20, X19, [X31 + 0x10]
	0x0331FCF0 MOV W0, W31
	0x0331FCF4 LDP X30, X21, [X31], #0x20
	0x0331FCF8 RET
	0x0331FCFC LDR W9, [X10]
	0x0331FD00 ADD W9, W9, 0x6
	0x0331FD04 ADD X8, X8, W9, 0x4, SXTW
	0x0331FD08 ADD X0, X8, 0x138
	0x0331FD0C LDP X3, X2, [X0]
	0x0331FD10 MOV X0, X19
	0x0331FD14 LDP X20, X19, [X31 + 0x10]
	0x0331FD18 MOV X1, X31
	0x0331FD1C LDP X30, X21, [X31], #0x20
	0x0331FD20 BR X3
	0x0331FD24 MOV X0, X21
	0x0331FD28 MOV X1, X19
	0x0331FD2C BL 0x1C171E0
	0x0331FD30 MOV X0, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BE000
	005 Move W8, [X20+3078]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDE000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3078], W8
	016 NotImplemented "Instruction SXTB not yet implemented."
	017 And W8, W8, 0xFFFF
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move W0, W19
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0
	024 Move X8, 0xDDE000
	025 Move X8, [X8+2536]
	026 Move X0, [X8]
	027 Call 0x19913D0
	028 Call Convert.ThrowSByteOverflowException

Method: System.SByte ToSByte(System.UInt16 value)

Disassembly:
	0x0331FD34 MOV X1, X20
	0x0331FD38 BL 0x1C171E0
	0x0331FD3C STR X30, [X31 - 0x30]!
	0x0331FD40 STP X22, X21, [X31 + 0x10]
	0x0331FD44 STP X20, X19, [X31 + 0x20]
	0x0331FD48 ADRP X20, 0x10BD000
	0x0331FD4C LDRB W8, [X20 + 0xC29]
	0x0331FD50 MOV X19, X1
	0x0331FD54 MOV X22, X0
	0x0331FD58 TBNZ X8, 0x0, 0x331FD70
	0x0331FD5C ADRP X0, 0xE04000
	0x0331FD60 LDR X0, [X0 + 0xE10]
	0x0331FD64 BL 0x1C16CF4
	0x0331FD68 MOVZ W8, 0x1
	0x0331FD6C STRB W8, [X20 + 0xC29]
	0x0331FD70 CBZ X22, 0x331FDE8
	0x0331FD74 ADRP X21, 0xE04000
	0x0331FD78 LDR X21, [X21 + 0xE10]
	0x0331FD7C MOV X0, X22
	0x0331FD80 LDR X20, [X21]
	0x0331FD84 MOV X1, X20
	0x0331FD88 BL 0x1C16E00
	0x0331FD8C CBZ X0, 0x331FE28

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BE000
	005 Move W8, [X20+3079]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDE000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3079], W8
	016 And W8, W19, 0xFFFF
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move W0, W19
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Return X0
	023 Move X8, 0xDDE000
	024 Move X8, [X8+2536]
	025 Move X0, [X8]
	026 Call 0x19913D0
	027 Call Convert.ThrowSByteOverflowException

Method: System.SByte ToSByte(System.Int32 value)

Disassembly:
	0x0331FD90 LDR X21, [X21]
	0x0331FD94 MOV X0, X22
	0x0331FD98 MOV X1, X21
	0x0331FD9C BL 0x1C16E00
	0x0331FDA0 CBZ X0, 0x331FE34
	0x0331FDA4 LDR X8, [X0]
	0x0331FDA8 MOV X20, X0
	0x0331FDAC LDRH W9, [X8 + 0x12E]
	0x0331FDB0 CBZ X9, 0x331FDD4
	0x0331FDB4 LDR X10, [X8 + 0xB0]
	0x0331FDB8 ADD X10, X10, 0x8
	0x0331FDBC LDUR X11, [X10 - 0x8]
	0x0331FDC0 CMP X11, X21
	0x0331FDC4 B.EQ 0x331FDFC
	0x0331FDC8 SUBS X9, X9, 0x1
	0x0331FDCC ADD X10, X10, 0x10
	0x0331FDD0 B.NE 0x331FDBC
	0x0331FDD4 MOVZ W2, 0x6
	0x0331FDD8 MOV X0, X20
	0x0331FDDC MOV X1, X21
	0x0331FDE0 BL 0x1C5C788
	0x0331FDE4 B 0x331FE0C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BE000
	005 Move W8, [X20+3080]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDE000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3080], W8
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move X8, 0xDDE000
	023 Move X8, [X8+2536]
	024 Move X0, [X8]
	025 Call 0x19913D0
	026 Call Convert.ThrowSByteOverflowException

Method: System.SByte ToSByte(System.UInt32 value)

Disassembly:
	0x0331FDE8 LDP X20, X19, [X31 + 0x20]
	0x0331FDEC LDP X22, X21, [X31 + 0x10]
	0x0331FDF0 MOV W0, W31
	0x0331FDF4 LDR X30, [X31], #0x30
	0x0331FDF8 RET
	0x0331FDFC LDR W9, [X10]
	0x0331FE00 ADD W9, W9, 0x6
	0x0331FE04 ADD X8, X8, W9, 0x4, SXTW
	0x0331FE08 ADD X0, X8, 0x138
	0x0331FE0C LDP X3, X2, [X0]
	0x0331FE10 MOV X0, X20
	0x0331FE14 MOV X1, X19
	0x0331FE18 LDP X20, X19, [X31 + 0x20]
	0x0331FE1C LDP X22, X21, [X31 + 0x10]
	0x0331FE20 LDR X30, [X31], #0x30
	0x0331FE24 BR X3
	0x0331FE28 MOV X0, X22
	0x0331FE2C MOV X1, X20
	0x0331FE30 BL 0x1C171E0
	0x0331FE34 MOV X0, X22
	0x0331FE38 MOV X1, X21
	0x0331FE3C BL 0x1C171E0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BE000
	005 Move W8, [X20+3081]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDE000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3081], W8
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move X8, 0xDDE000
	023 Move X8, [X8+2536]
	024 Move X0, [X8]
	025 Call 0x19913D0
	026 Call Convert.ThrowSByteOverflowException

Method: System.SByte ToSByte(System.Int64 value)

Disassembly:
	0x0331FE40 STR X30, [X31 - 0x20]!
	0x0331FE44 STP X20, X19, [X31 + 0x10]
	0x0331FE48 ADRP X20, 0x10BD000
	0x0331FE4C LDRB W8, [X20 + 0xC2A]
	0x0331FE50 MOV W19, W0
	0x0331FE54 TBNZ X8, 0x0, 0x331FE6C
	0x0331FE58 ADRP X0, 0xDDD000
	0x0331FE5C LDR X0, [X0 + 0x9E8]
	0x0331FE60 BL 0x1C16CF4
	0x0331FE64 MOVZ W8, 0x1
	0x0331FE68 STRB W8, [X20 + 0xC2A]
	0x0331FE6C TBNZ X19, 0x7, 0x331FE80
	0x0331FE70 AND W0, W19, 0xFF
	0x0331FE74 LDP X20, X19, [X31 + 0x10]
	0x0331FE78 LDR X30, [X31], #0x20
	0x0331FE7C RET
	0x0331FE80 ADRP X8, 0xDDD000
	0x0331FE84 LDR X8, [X8 + 0x9E8]
	0x0331FE88 LDR X0, [X8]
	0x0331FE8C BL 0x19903D0
	0x0331FE90 BL 0x331E0C4
	0x0331FE94 STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BE000
	005 Move W8, [X20+3082]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDE000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3082], W8
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move X8, 0xDDE000
	023 Move X8, [X8+2536]
	024 Move X0, [X8]
	025 Call 0x19913D0
	026 Call Convert.ThrowSByteOverflowException

Method: System.SByte ToSByte(System.UInt64 value)

Disassembly:
	0x0331FE98 STP X20, X19, [X31 + 0x10]
	0x0331FE9C ADRP X20, 0x10BD000
	0x0331FEA0 LDRB W8, [X20 + 0xC2B]
	0x0331FEA4 MOV W19, W0
	0x0331FEA8 TBNZ X8, 0x0, 0x331FEC0
	0x0331FEAC ADRP X0, 0xDDD000
	0x0331FEB0 LDR X0, [X0 + 0x9E8]
	0x0331FEB4 BL 0x1C16CF4
	0x0331FEB8 MOVZ W8, 0x1
	0x0331FEBC STRB W8, [X20 + 0xC2B]
	0x0331FEC0 TBNZ X19, 0xF, 0x331FED4
	0x0331FEC4 MOV W0, W19
	0x0331FEC8 LDP X20, X19, [X31 + 0x10]
	0x0331FECC LDR X30, [X31], #0x20
	0x0331FED0 RET
	0x0331FED4 ADRP X8, 0xDDD000
	0x0331FED8 LDR X8, [X8 + 0x9E8]
	0x0331FEDC LDR X0, [X8]
	0x0331FEE0 BL 0x19903D0
	0x0331FEE4 BL 0x331E0C4
	0x0331FEE8 STR X30, [X31 - 0x20]!
	0x0331FEEC STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BE000
	005 Move W8, [X20+3083]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDE000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3083], W8
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move X8, 0xDDE000
	023 Move X8, [X8+2536]
	024 Move X0, [X8]
	025 Call 0x19913D0
	026 Call Convert.ThrowSByteOverflowException

Method: System.SByte ToSByte(System.Single value)

Disassembly:
	0x0331FEF0 ADRP X20, 0x10BD000
	0x0331FEF4 LDRB W8, [X20 + 0xC2C]
	0x0331FEF8 MOV W19, W0
	0x0331FEFC TBNZ X8, 0x0, 0x331FF14
	0x0331FF00 ADRP X0, 0xDDD000
	0x0331FF04 LDR X0, [X0 + 0x9E8]
	0x0331FF08 BL 0x1C16CF4
	0x0331FF0C MOVZ W8, 0x1
	0x0331FF10 STRB W8, [X20 + 0xC2C]
	0x0331FF14 CMP W19, 0x10000
	0x0331FF18 B.CS 0x331FF2C
	0x0331FF1C MOV W0, W19
	0x0331FF20 LDP X20, X19, [X31 + 0x10]
	0x0331FF24 LDR X30, [X31], #0x20
	0x0331FF28 RET
	0x0331FF2C ADRP X8, 0xDDD000
	0x0331FF30 LDR X8, [X8 + 0x9E8]
	0x0331FF34 LDR X0, [X8]
	0x0331FF38 BL 0x19903D0
	0x0331FF3C BL 0x331E0C4
	0x0331FF40 STR X30, [X31 - 0x20]!
	0x0331FF44 STP X20, X19, [X31 + 0x10]
	0x0331FF48 ADRP X20, 0x10BD000

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10BE000
	006 Move X20, 0xDDE000
	007 Move W8, [X19+3084]
	008 Move X20, [X20+2536]
	009 Move V8, V0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDDE000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+3084], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+8]
	027 NotImplemented "Instruction FCVT not yet implemented."
	028 Move V8, [X31+32]

Method: System.SByte ToSByte(System.Double value)

Disassembly:
	0x0331FF4C LDRB W8, [X20 + 0xC2D]
	0x0331FF50 MOV W19, W0
	0x0331FF54 TBNZ X8, 0x0, 0x331FF6C
	0x0331FF58 ADRP X0, 0xDDD000
	0x0331FF5C LDR X0, [X0 + 0x9E8]
	0x0331FF60 BL 0x1C16CF4
	0x0331FF64 MOVZ W8, 0x1
	0x0331FF68 STRB W8, [X20 + 0xC2D]
	0x0331FF6C CMP W19, 0x10000
	0x0331FF70 B.CS 0x331FF84
	0x0331FF74 MOV W0, W19
	0x0331FF78 LDP X20, X19, [X31 + 0x10]
	0x0331FF7C LDR X30, [X31], #0x20
	0x0331FF80 RET
	0x0331FF84 ADRP X8, 0xDDD000
	0x0331FF88 LDR X8, [X8 + 0x9E8]
	0x0331FF8C LDR X0, [X8]
	0x0331FF90 BL 0x19903D0
	0x0331FF94 BL 0x331E0C4
	0x0331FF98 STR X30, [X31 - 0x20]!
	0x0331FF9C STP X20, X19, [X31 + 0x10]
	0x0331FFA0 ADRP X20, 0x10BD000
	0x0331FFA4 LDRB W8, [X20 + 0xC2E]
	0x0331FFA8 MOV X19, X0

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10BE000
	006 Move X20, 0xDDE000
	007 Move W8, [X19+3085]
	008 Move X20, [X20+2536]
	009 Move V8, V0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDDE000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+3085], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move V0, V8
	025 Call Convert.ToInt32, V0
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+8]
	029 Move V8, [X31+32]
	030 Call Convert.ToSByte, X0
	031 Return X0

Method: System.SByte ToSByte(System.Decimal value)

Disassembly:
	0x033200AC STP X20, X19, [X31 + 0x10]
	0x033200B0 ADRP X19, 0x10BC000
	0x033200B4 ADRP X20, 0xDDC000
	0x033200B8 LDRB W8, [X19 + 0xC31]
	0x033200BC LDR X20, [X20 + 0x9E8]
	0x033200C0 MOV V8.16B, V0.16B
	0x033200C4 TBNZ X8, 0x0, 0x33200DC
	0x033200C8 ADRP X0, 0xDDC000
	0x033200CC LDR X0, [X0 + 0x9E8]
	0x033200D0 BL 0x1C16CF4
	0x033200D4 MOVZ W8, 0x1
	0x033200D8 STRB W8, [X19 + 0xC31]
	0x033200DC LDR X0, [X20]
	0x033200E0 LDR W8, [X0 + 0xE0]
	0x033200E4 CBNZ W8, 0x33200EC
	0x033200E8 BL 0x1C16DFC
	0x033200EC MOV V0.16B, V8.16B
	0x033200F0 BL 0x331EFAC
	0x033200F4 LDP X20, X19, [X31 + 0x10]
	0x033200F8 LDR X30, [X31 + 0x8]
	0x033200FC LDR V8, [X31], #0x20
	0x03320100 B 0x331FEE8
	0x03320104 STR X30, [X31 - 0x30]!
	0x03320108 STP X22, X21, [X31 + 0x10]
	0x0332010C STP X20, X19, [X31 + 0x20]
	0x03320110 ADRP X22, 0x10BC000
	0x03320114 ADRP X21, 0xDFB000
	0x03320118 LDRB W8, [X22 + 0xC32]
	0x0332011C LDR X21, [X21 + 0x5F0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x10BD000
	007 Move X21, 0xDFC000
	008 Move W8, [X22+3086]
	009 Move X21, [X21+1520]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xDFC000
	017 Move X0, [X0+1520]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3086], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move W2, W31
	029 Move X3, X31
	030 Call Decimal.Round, X0, X1
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X2, X31
	036 Move X30, [X31+48]
	037 Call Decimal.ToSByte, X0
	038 Return X0

Method: System.SByte ToSByte(System.String value, System.IFormatProvider provider)

Disassembly:
	0x03320120 MOV X19, X1
	0x03320124 MOV X20, X0
	0x03320128 TBNZ X8, 0x0, 0x3320140
	0x0332012C ADRP X0, 0xDFB000

ISIL:
	001 Move X2, X1
	002 Move W1, 7
	003 Move X3, X31
	004 Call SByte.Parse, X0, X1, X2
	005 Return X0

Method: System.Byte ToByte(System.Object value)

Disassembly:
	0x03320130 LDR X0, [X0 + 0x5F0]
	0x03320134 BL 0x1C16CF4
	0x03320138 MOVZ W8, 0x1
	0x0332013C STRB W8, [X22 + 0xC32]
	0x03320140 LDR X0, [X21]
	0x03320144 LDR W8, [X0 + 0xE0]
	0x03320148 CBNZ W8, 0x3320150
	0x0332014C BL 0x1C16DFC
	0x03320150 MOV X0, X20
	0x03320154 MOV X1, X19
	0x03320158 MOV W2, W31
	0x0332015C MOV X3, X31
	0x03320160 BL 0x33D7A90
	0x03320164 LDP X20, X19, [X31 + 0x20]
	0x03320168 LDP X22, X21, [X31 + 0x10]
	0x0332016C MOV X2, X31
	0x03320170 LDR X30, [X31], #0x30
	0x03320174 B 0x33D8A28
	0x03320178 CBZ X0, 0x332018C
	0x0332017C MOV X2, X1
	0x03320180 MOVZ W1, 0x7
	0x03320184 MOV X3, X31
	0x03320188 B 0x339922C
	0x0332018C RET
	0x03320190 STP X30, X21, [X31 - 0x20]!
	0x03320194 STP X20, X19, [X31 + 0x10]
	0x03320198 ADRP X19, 0x10BC000
	0x0332019C LDRB W8, [X19 + 0xC33]
	0x033201A0 MOV X21, X0
	0x033201A4 TBNZ X8, 0x0, 0x33201BC
	0x033201A8 ADRP X0, 0xE03000
	0x033201AC LDR X0, [X0 + 0xE10]
	0x033201B0 BL 0x1C16CF4
	0x033201B4 MOVZ W8, 0x1
	0x033201B8 STRB W8, [X19 + 0xC33]
	0x033201BC CBZ X21, 0x3320234
	0x033201C0 ADRP X20, 0xE03000
	0x033201C4 LDR X20, [X20 + 0xE10]
	0x033201C8 MOV X0, X21
	0x033201CC LDR X19, [X20]
	0x033201D0 MOV X1, X19
	0x033201D4 BL 0x1C16E00
	0x033201D8 CBZ X0, 0x332026C
	0x033201DC LDR X20, [X20]
	0x033201E0 MOV X0, X21
	0x033201E4 MOV X1, X20
	0x033201E8 BL 0x1C16E00
	0x033201EC CBZ X0, 0x3320278
	0x033201F0 LDR X8, [X0]
	0x033201F4 MOV X19, X0
	0x033201F8 LDRH W9, [X8 + 0x12E]
	0x033201FC CBZ X9, 0x3320220
	0x03320200 LDR X10, [X8 + 0xB0]
	0x03320204 ADD X10, X10, 0x8
	0x03320208 LDUR X11, [X10 - 0x8]
	0x0332020C CMP X11, X20
	0x03320210 B.EQ 0x3320244
	0x03320214 SUBS X9, X9, 0x1
	0x03320218 ADD X10, X10, 0x10
	0x0332021C B.NE 0x3320208
	0x03320220 MOVZ W2, 0x7

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10BD000
	006 Move W8, [X19+3087]
	007 Move X21, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE04000
	013 Move X0, [X0+3600]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3087], W8
	017 Compare X21, 0
	018 JumpIfEqual {48}
	019 Move X20, 0xE04000
	020 Move X20, [X20+3600]
	021 Move X0, X21
	022 Move X19, [X20]
	023 Move X1, X19
	024 Call 0x1C17E00
	025 Compare X0, 0
	026 JumpIfEqual {67}
	027 Move X20, [X20]
	028 Move X0, X21
	029 Move X1, X20
	030 Call 0x1C17E00
	031 Compare X0, 0
	032 JumpIfEqual {70}
	033 Move X8, [X0]
	034 Move X19, X0
	035 NotImplemented "Instruction LDRH not yet implemented."
	036 Compare X9, 0
	037 JumpIfEqual {44}
	038 Move X10, [X8+176]
	039 Add X10, X10, 8
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Subtract X9, X9, 1
	043 Add X10, X10, 16
	044 Move W2, 4
	045 Move X0, X19
	046 Move X1, X20
	047 Call 0x1C5D788
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move W0, W31
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Return X0
	054 Move W9, [X10]
	055 Add W9, W9, 4
	056 Add X8, X8, W9
	057 Add X0, X8, 312
	058 Move X3, [X0]
	059 Move X2, [X0+8]
	060 Move X0, X19
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X1, X31
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 CallNoReturn X3
	067 Move X0, X21
	068 Move X1, X19
	069 Call 0x1C181E0
	070 Move X0, X21
	071 Move X1, X20
	072 Call 0x1C181E0

Method: System.Byte ToByte(System.Object value, System.IFormatProvider provider)

Disassembly:
	0x03320224 MOV X0, X19
	0x03320228 MOV X1, X20
	0x0332022C BL 0x1C5C788
	0x03320230 B 0x3320254
	0x03320234 LDP X20, X19, [X31 + 0x10]
	0x03320238 MOV W0, W31
	0x0332023C LDP X30, X21, [X31], #0x20
	0x03320240 RET
	0x03320244 LDR W9, [X10]
	0x03320248 ADD W9, W9, 0x7
	0x0332024C ADD X8, X8, W9, 0x4, SXTW
	0x03320250 ADD X0, X8, 0x138
	0x03320254 LDP X3, X2, [X0]
	0x03320258 MOV X0, X19
	0x0332025C LDP X20, X19, [X31 + 0x10]
	0x03320260 MOV X1, X31
	0x03320264 LDP X30, X21, [X31], #0x20
	0x03320268 BR X3
	0x0332026C MOV X0, X21
	0x03320270 MOV X1, X19
	0x03320274 BL 0x1C171E0
	0x03320278 MOV X0, X21
	0x0332027C MOV X1, X20
	0x03320280 BL 0x1C171E0
	0x03320284 STR X30, [X31 - 0x30]!
	0x03320288 STP X22, X21, [X31 + 0x10]
	0x0332028C STP X20, X19, [X31 + 0x20]
	0x03320290 ADRP X20, 0x10BC000
	0x03320294 LDRB W8, [X20 + 0xC34]
	0x03320298 MOV X19, X1
	0x0332029C MOV X22, X0
	0x033202A0 TBNZ X8, 0x0, 0x33202B8
	0x033202A4 ADRP X0, 0xE03000
	0x033202A8 LDR X0, [X0 + 0xE10]
	0x033202AC BL 0x1C16CF4
	0x033202B0 MOVZ W8, 0x1
	0x033202B4 STRB W8, [X20 + 0xC34]
	0x033202B8 CBZ X22, 0x3320330
	0x033202BC ADRP X21, 0xE03000
	0x033202C0 LDR X21, [X21 + 0xE10]
	0x033202C4 MOV X0, X22
	0x033202C8 LDR X20, [X21]
	0x033202CC MOV X1, X20
	0x033202D0 BL 0x1C16E00
	0x033202D4 CBZ X0, 0x3320370
	0x033202D8 LDR X21, [X21]
	0x033202DC MOV X0, X22
	0x033202E0 MOV X1, X21
	0x033202E4 BL 0x1C16E00
	0x033202E8 CBZ X0, 0x332037C
	0x033202EC LDR X8, [X0]
	0x033202F0 MOV X20, X0
	0x033202F4 LDRH W9, [X8 + 0x12E]
	0x033202F8 CBZ X9, 0x332031C
	0x033202FC LDR X10, [X8 + 0xB0]
	0x03320300 ADD X10, X10, 0x8
	0x03320304 LDUR X11, [X10 - 0x8]
	0x03320308 CMP X11, X21
	0x0332030C B.EQ 0x3320344
	0x03320310 SUBS X9, X9, 0x1
	0x03320314 ADD X10, X10, 0x10
	0x03320318 B.NE 0x3320304
	0x0332031C MOVZ W2, 0x7
	0x03320320 MOV X0, X20
	0x03320324 MOV X1, X21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x10BD000
	007 Move W8, [X20+3088]
	008 Move X19, X1
	009 Move X22, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE04000
	015 Move X0, [X0+3600]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3088], W8
	019 Compare X22, 0
	020 JumpIfEqual {50}
	021 Move X21, 0xE04000
	022 Move X21, [X21+3600]
	023 Move X0, X22
	024 Move X20, [X21]
	025 Move X1, X20
	026 Call 0x1C17E00
	027 Compare X0, 0
	028 JumpIfEqual {71}
	029 Move X21, [X21]
	030 Move X0, X22
	031 Move X1, X21
	032 Call 0x1C17E00
	033 Compare X0, 0
	034 JumpIfEqual {74}
	035 Move X8, [X0]
	036 Move X20, X0
	037 NotImplemented "Instruction LDRH not yet implemented."
	038 Compare X9, 0
	039 JumpIfEqual {46}
	040 Move X10, [X8+176]
	041 Add X10, X10, 8
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Subtract X9, X9, 1
	045 Add X10, X10, 16
	046 Move W2, 4
	047 Move X0, X20
	048 Move X1, X21
	049 Call 0x1C5D788
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move W0, W31
	055 Move X30, [X31+48]
	056 Return X0
	057 Move W9, [X10]
	058 Add W9, W9, 4
	059 Add X8, X8, W9
	060 Add X0, X8, 312
	061 Move X3, [X0]
	062 Move X2, [X0+8]
	063 Move X0, X20
	064 Move X1, X19
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X22, [X31+16]
	068 Move X21, [X31+24]
	069 Move X30, [X31+48]
	070 CallNoReturn X3
	071 Move X0, X22
	072 Move X1, X20
	073 Call 0x1C181E0
	074 Move X0, X22
	075 Move X1, X21
	076 Call 0x1C181E0

Method: System.Byte ToByte(System.Boolean value)

Disassembly:
	0x033191E0 LDR W9, [X10]
	0x033191E4 ADD W9, W9, 0xB

ISIL:
	001 And W0, W0, 1
	002 Return X0

Method: System.Byte ToByte(System.Char value)

Disassembly:
	0x0331C0C8 MOV X19, X0
	0x0331C0CC ADRP X0, 0xE00000
	0x0331C0D0 LDR X0, [X0 + 0xCC0]
	0x0331C0D4 BL 0x1C16D08
	0x0331C0D8 MOV X1, X0
	0x0331C0DC MOV X0, X19
	0x0331C0E0 BL 0x330E100
	0x0331C0E4 ADRP X0, 0xE0C000
	0x0331C0E8 LDR X0, [X0 + 0x110]
	0x0331C0EC BL 0x1C16D08
	0x0331C0F0 MOV X1, X0
	0x0331C0F4 MOV X0, X19
	0x0331C0F8 BL 0x1C16DEC
	0x0331C0FC UBFM W8, W0, 0xA, 0xF
	0x0331C100 CMP W8, 0x37
	0x0331C104 CSET W0, EQ
	0x0331C108 RET
	0x0331C10C UBFM W8, W0, 0xA, 0xF
	0x0331C110 UBFM W9, W1, 0xA, 0xF
	0x0331C114 CMP W8, 0x36
	0x0331C118 CSET W8, EQ
	0x0331C11C CMP W9, 0x37
	0x0331C120 CSET W9, EQ

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10C1000
	005 Move W8, [X20+3089]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDE1000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3089], W8
	016 And W8, W19, 0xFFFF
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move W0, W19
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Return X0
	023 Move X8, 0xDE1000
	024 Move X8, [X8+2536]
	025 Move X0, [X8]
	026 Call 0x19913D0
	027 Call Convert.ThrowByteOverflowException

Method: System.Byte ToByte(System.SByte value)

Disassembly:
	0x03320328 BL 0x1C5C788
	0x0332032C B 0x3320354
	0x03320330 LDP X20, X19, [X31 + 0x20]
	0x03320334 LDP X22, X21, [X31 + 0x10]
	0x03320338 MOV W0, W31
	0x0332033C LDR X30, [X31], #0x30
	0x03320340 RET
	0x03320344 LDR W9, [X10]
	0x03320348 ADD W9, W9, 0x7
	0x0332034C ADD X8, X8, W9, 0x4, SXTW
	0x03320350 ADD X0, X8, 0x138
	0x03320354 LDP X3, X2, [X0]
	0x03320358 MOV X0, X20
	0x0332035C MOV X1, X19
	0x03320360 LDP X20, X19, [X31 + 0x20]
	0x03320364 LDP X22, X21, [X31 + 0x10]
	0x03320368 LDR X30, [X31], #0x30
	0x0332036C BR X3
	0x03320370 MOV X0, X22
	0x03320374 MOV X1, X20
	0x03320378 BL 0x1C171E0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BD000
	005 Move W8, [X20+3090]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDD000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3090], W8
	016 Move TEMP, X19
	017 And TEMP, TEMP, 128
	018 Compare TEMP, 128
	019 JumpIfEqual {25}
	020 Move W0, W19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0
	025 Move X8, 0xDDD000
	026 Move X8, [X8+2536]
	027 Move X0, [X8]
	028 Call 0x19913D0
	029 Call Convert.ThrowByteOverflowException

Method: System.Byte ToByte(System.Int16 value)

Disassembly:
	0x0332037C MOV X0, X22
	0x03320380 MOV X1, X21
	0x03320384 BL 0x1C171E0
	0x03320388 SXTH W0, W0
	0x0332038C RET
	0x03320390 AND W0, W0, 0xFFFF
	0x03320394 RET
	0x03320398 STR X30, [X31 - 0x20]!
	0x0332039C STP X20, X19, [X31 + 0x10]
	0x033203A0 ADRP X20, 0x10BC000
	0x033203A4 LDRB W8, [X20 + 0xC35]
	0x033203A8 MOV W19, W0
	0x033203AC TBNZ X8, 0x0, 0x33203C4
	0x033203B0 ADRP X0, 0xDDC000
	0x033203B4 LDR X0, [X0 + 0x9E8]
	0x033203B8 BL 0x1C16CF4
	0x033203BC MOVZ W8, 0x1
	0x033203C0 STRB W8, [X20 + 0xC35]
	0x033203C4 TBNZ X19, 0x1F, 0x33203D8
	0x033203C8 MOV W0, W19
	0x033203CC LDP X20, X19, [X31 + 0x10]
	0x033203D0 LDR X30, [X31], #0x20
	0x033203D4 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BD000
	005 Move W8, [X20+3091]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDD000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3091], W8
	016 And W8, W19, 0xFFFF
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move W0, W19
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Return X0
	023 Move X8, 0xDDD000
	024 Move X8, [X8+2536]
	025 Move X0, [X8]
	026 Call 0x19913D0
	027 Call Convert.ThrowByteOverflowException

Method: System.Byte ToByte(System.UInt16 value)

Disassembly:
	0x033203D8 ADRP X8, 0xDDC000
	0x033203DC LDR X8, [X8 + 0x9E8]
	0x033203E0 LDR X0, [X8]
	0x033203E4 BL 0x19903D0
	0x033203E8 BL 0x331E110
	0x033203EC STR X30, [X31 - 0x20]!
	0x033203F0 STP X20, X19, [X31 + 0x10]
	0x033203F4 ADRP X20, 0x10BC000
	0x033203F8 LDRB W8, [X20 + 0xC36]
	0x033203FC MOV X19, X0
	0x03320400 TBNZ X8, 0x0, 0x3320418
	0x03320404 ADRP X0, 0xDDC000
	0x03320408 LDR X0, [X0 + 0x9E8]
	0x0332040C BL 0x1C16CF4
	0x03320410 MOVZ W8, 0x1
	0x03320414 STRB W8, [X20 + 0xC36]
	0x03320418 CMP X19, W19, SXTW
	0x0332041C B.NE 0x3320430
	0x03320420 MOV W0, W19
	0x03320424 LDP X20, X19, [X31 + 0x10]
	0x03320428 LDR X30, [X31], #0x20
	0x0332042C RET
	0x03320430 ADRP X8, 0xDDC000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BD000
	005 Move W8, [X20+3092]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDD000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3092], W8
	016 And W8, W19, 0xFFFF
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move W0, W19
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Return X0
	023 Move X8, 0xDDD000
	024 Move X8, [X8+2536]
	025 Move X0, [X8]
	026 Call 0x19913D0
	027 Call Convert.ThrowByteOverflowException

Method: System.Byte ToByte(System.Int32 value)

Disassembly:
	0x03320434 LDR X8, [X8 + 0x9E8]
	0x03320438 LDR X0, [X8]
	0x0332043C BL 0x19903D0
	0x03320440 BL 0x331E110
	0x03320444 STR X30, [X31 - 0x20]!
	0x03320448 STP X20, X19, [X31 + 0x10]
	0x0332044C ADRP X20, 0x10BC000
	0x03320450 LDRB W8, [X20 + 0xC37]
	0x03320454 MOV X19, X0
	0x03320458 TBNZ X8, 0x0, 0x3320470
	0x0332045C ADRP X0, 0xDDC000
	0x03320460 LDR X0, [X0 + 0x9E8]
	0x03320464 BL 0x1C16CF4
	0x03320468 MOVZ W8, 0x1
	0x0332046C STRB W8, [X20 + 0xC37]
	0x03320470 UBFM X8, X19, 0x1F, 0x3F
	0x03320474 CBNZ X8, 0x3320488
	0x03320478 MOV W0, W19
	0x0332047C LDP X20, X19, [X31 + 0x10]
	0x03320480 LDR X30, [X31], #0x20
	0x03320484 RET
	0x03320488 ADRP X8, 0xDDC000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BD000
	005 Move W8, [X20+3093]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDD000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3093], W8
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move X8, 0xDDD000
	023 Move X8, [X8+2536]
	024 Move X0, [X8]
	025 Call 0x19913D0
	026 Call Convert.ThrowByteOverflowException

Method: System.Byte ToByte(System.UInt32 value)

Disassembly:
	0x0332048C LDR X8, [X8 + 0x9E8]
	0x03320490 LDR X0, [X8]
	0x03320494 BL 0x19903D0
	0x03320498 BL 0x331E110
	0x0332049C STR D8, [X31 - 0x20]!
	0x033204A0 STR X30, [X31 + 0x8]
	0x033204A4 STP X20, X19, [X31 + 0x10]
	0x033204A8 ADRP X19, 0x10BC000
	0x033204AC ADRP X20, 0xDDC000
	0x033204B0 LDRB W8, [X19 + 0xC38]
	0x033204B4 LDR X20, [X20 + 0x9E8]
	0x033204B8 MOV V8.16B, V0.16B
	0x033204BC TBNZ X8, 0x0, 0x33204D4
	0x033204C0 ADRP X0, 0xDDC000
	0x033204C4 LDR X0, [X0 + 0x9E8]
	0x033204C8 BL 0x1C16CF4
	0x033204CC MOVZ W8, 0x1
	0x033204D0 STRB W8, [X19 + 0xC38]
	0x033204D4 LDR X0, [X20]
	0x033204D8 LDR W8, [X0 + 0xE0]
	0x033204DC CBNZ W8, 0x33204E4
	0x033204E0 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BD000
	005 Move W8, [X20+3094]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDD000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3094], W8
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move X8, 0xDDD000
	023 Move X8, [X8+2536]
	024 Move X0, [X8]
	025 Call 0x19913D0
	026 Call Convert.ThrowByteOverflowException

Method: System.Byte ToByte(System.Int64 value)

Disassembly:
	0x033204E4 LDP X20, X19, [X31 + 0x10]
	0x033204E8 LDR X30, [X31 + 0x8]
	0x033204EC FCVT S0, S8
	0x033204F0 LDR V8, [X31], #0x20
	0x033204F4 B 0x331EFAC
	0x033204F8 STR X30, [X31 - 0x30]!
	0x033204FC STP X22, X21, [X31 + 0x10]
	0x03320500 STP X20, X19, [X31 + 0x20]
	0x03320504 ADRP X22, 0x10BC000
	0x03320508 ADRP X21, 0xDFB000
	0x0332050C LDRB W8, [X22 + 0xC39]
	0x03320510 LDR X21, [X21 + 0x5F0]
	0x03320514 MOV X19, X1
	0x03320518 MOV X20, X0
	0x0332051C TBNZ X8, 0x0, 0x3320534
	0x03320520 ADRP X0, 0xDFB000
	0x03320524 LDR X0, [X0 + 0x5F0]
	0x03320528 BL 0x1C16CF4
	0x0332052C MOVZ W8, 0x1
	0x03320530 STRB W8, [X22 + 0xC39]
	0x03320534 LDR X0, [X21]
	0x03320538 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BD000
	005 Move W8, [X20+3095]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDD000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3095], W8
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move X8, 0xDDD000
	023 Move X8, [X8+2536]
	024 Move X0, [X8]
	025 Call 0x19913D0
	026 Call Convert.ThrowByteOverflowException

Method: System.Byte ToByte(System.UInt64 value)

Disassembly:
	0x0332053C CBNZ W8, 0x3320544
	0x03320540 BL 0x1C16DFC
	0x03320544 MOV X0, X20
	0x03320548 MOV X1, X19
	0x0332054C MOV W2, W31
	0x03320550 MOV X3, X31
	0x03320554 BL 0x33D7A90
	0x03320558 LDP X20, X19, [X31 + 0x20]
	0x0332055C LDP X22, X21, [X31 + 0x10]
	0x03320560 MOV X2, X31
	0x03320564 LDR X30, [X31], #0x30
	0x03320568 B 0x33D8410
	0x0332056C STR X30, [X31 - 0x20]!
	0x03320570 STP X20, X19, [X31 + 0x10]
	0x03320574 ADRP X20, 0x10BC000
	0x03320578 LDRB W8, [X20 + 0xC3A]
	0x0332057C MOV X19, X0
	0x03320580 TBNZ X8, 0x0, 0x3320598
	0x03320584 ADRP X0, 0xDD5000
	0x03320588 LDR X0, [X0 + 0xC48]
	0x0332058C BL 0x1C16CF4
	0x03320590 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BD000
	005 Move W8, [X20+3096]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDD000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3096], W8
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move X8, 0xDDD000
	023 Move X8, [X8+2536]
	024 Move X0, [X8]
	025 Call 0x19913D0
	026 Call Convert.ThrowByteOverflowException

Method: System.Byte ToByte(System.Single value)

Disassembly:
	0x03320594 STRB W8, [X20 + 0xC3A]
	0x03320598 CBZ X19, 0x33205D4
	0x0332059C ADRP X8, 0xDD5000
	0x033205A0 LDR X8, [X8 + 0xC48]
	0x033205A4 LDR X0, [X8]
	0x033205A8 LDR W8, [X0 + 0xE0]
	0x033205AC CBNZ W8, 0x33205B4
	0x033205B0 BL 0x1C16DFC
	0x033205B4 MOV X0, X31
	0x033205B8 BL 0x33387A0
	0x033205BC MOV X1, X0
	0x033205C0 MOV X0, X19
	0x033205C4 LDP X20, X19, [X31 + 0x10]
	0x033205C8 MOV X2, X31
	0x033205CC LDR X30, [X31], #0x20
	0x033205D0 B 0x337BBA8
	0x033205D4 LDP X20, X19, [X31 + 0x10]
	0x033205D8 MOV W0, W31
	0x033205DC LDR X30, [X31], #0x20
	0x033205E0 RET
	0x033205E4 CBZ X0, 0x33205F8
	0x033205E8 MOV X2, X1
	0x033205EC MOVZ W1, 0x7

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10BD000
	006 Move X20, 0xDDD000
	007 Move W8, [X19+3097]
	008 Move X20, [X20+2536]
	009 Move V8, V0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDDD000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+3097], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+8]
	027 NotImplemented "Instruction FCVT not yet implemented."
	028 Move V8, [X31+32]

Method: System.Byte ToByte(System.Double value)

Disassembly:
	0x033205F0 MOV X3, X31
	0x033205F4 B 0x337BC78
	0x033205F8 RET
	0x033205FC STP X30, X21, [X31 - 0x20]!
	0x03320600 STP X20, X19, [X31 + 0x10]
	0x03320604 ADRP X19, 0x10BC000
	0x03320608 LDRB W8, [X19 + 0xC3B]
	0x0332060C MOV X21, X0
	0x03320610 TBNZ X8, 0x0, 0x3320628
	0x03320614 ADRP X0, 0xE03000
	0x03320618 LDR X0, [X0 + 0xE10]
	0x0332061C BL 0x1C16CF4
	0x03320620 MOVZ W8, 0x1
	0x03320624 STRB W8, [X19 + 0xC3B]
	0x03320628 CBZ X21, 0x33206A0
	0x0332062C ADRP X20, 0xE03000
	0x03320630 LDR X20, [X20 + 0xE10]
	0x03320634 MOV X0, X21
	0x03320638 LDR X19, [X20]
	0x0332063C MOV X1, X19
	0x03320640 BL 0x1C16E00
	0x03320644 CBZ X0, 0x33206D8
	0x03320648 LDR X20, [X20]
	0x0332064C MOV X0, X21

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10BD000
	006 Move X20, 0xDDD000
	007 Move W8, [X19+3098]
	008 Move X20, [X20+2536]
	009 Move V8, V0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDDD000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+3098], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move V0, V8
	025 Call Convert.ToInt32, V0
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+8]
	029 Move V8, [X31+32]
	030 Call Convert.ToByte, X0
	031 Return X0

Method: System.Byte ToByte(System.Decimal value)

Disassembly:
	0x03320650 MOV X1, X20
	0x03320654 BL 0x1C16E00
	0x03320658 CBZ X0, 0x33206E4
	0x0332065C LDR X8, [X0]
	0x03320660 MOV X19, X0
	0x03320664 LDRH W9, [X8 + 0x12E]
	0x03320668 CBZ X9, 0x332068C
	0x0332066C LDR X10, [X8 + 0xB0]
	0x03320670 ADD X10, X10, 0x8
	0x03320674 LDUR X11, [X10 - 0x8]
	0x03320678 CMP X11, X20
	0x0332067C B.EQ 0x33206B0
	0x03320680 SUBS X9, X9, 0x1
	0x03320684 ADD X10, X10, 0x10
	0x03320688 B.NE 0x3320674
	0x0332068C MOVZ W2, 0x8
	0x03320690 MOV X0, X19
	0x03320694 MOV X1, X20
	0x03320698 BL 0x1C5C788
	0x0332069C B 0x33206C0
	0x033206A0 LDP X20, X19, [X31 + 0x10]
	0x033206A4 MOV W0, W31
	0x033206A8 LDP X30, X21, [X31], #0x20
	0x033206AC RET
	0x033206B0 LDR W9, [X10]
	0x033206B4 ADD W9, W9, 0x8
	0x033206B8 ADD X8, X8, W9, 0x4, SXTW
	0x033206BC ADD X0, X8, 0x138
	0x033206C0 LDP X3, X2, [X0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x10BD000
	007 Move X21, 0xDFC000
	008 Move W8, [X22+3099]
	009 Move X21, [X21+1520]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xDFC000
	017 Move X0, [X0+1520]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3099], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move W2, W31
	029 Move X3, X31
	030 Call Decimal.Round, X0, X1
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X2, X31
	036 Move X30, [X31+48]
	037 Call Decimal.ToByte, X0
	038 Return X0

Method: System.Byte ToByte(System.String value)

Disassembly:
	0x033206C4 MOV X0, X19
	0x033206C8 LDP X20, X19, [X31 + 0x10]
	0x033206CC MOV X1, X31
	0x033206D0 LDP X30, X21, [X31], #0x20
	0x033206D4 BR X3
	0x033206D8 MOV X0, X21
	0x033206DC MOV X1, X19
	0x033206E0 BL 0x1C171E0
	0x033206E4 MOV X0, X21
	0x033206E8 MOV X1, X20
	0x033206EC BL 0x1C171E0
	0x033206F0 STR X30, [X31 - 0x30]!
	0x033206F4 STP X22, X21, [X31 + 0x10]
	0x033206F8 STP X20, X19, [X31 + 0x20]
	0x033206FC ADRP X20, 0x10BC000
	0x03320700 LDRB W8, [X20 + 0xC3C]
	0x03320704 MOV X19, X1
	0x03320708 MOV X22, X0
	0x0332070C TBNZ X8, 0x0, 0x3320724
	0x03320710 ADRP X0, 0xE03000
	0x03320714 LDR X0, [X0 + 0xE10]
	0x03320718 BL 0x1C16CF4
	0x0332071C MOVZ W8, 0x1
	0x03320720 STRB W8, [X20 + 0xC3C]
	0x03320724 CBZ X22, 0x332079C
	0x03320728 ADRP X21, 0xE03000
	0x0332072C LDR X21, [X21 + 0xE10]
	0x03320730 MOV X0, X22
	0x03320734 LDR X20, [X21]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BD000
	005 Move W8, [X20+3100]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDD6000
	012 Move X0, [X0+3144]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3100], W8
	016 Compare X19, 0
	017 JumpIfEqual {34}
	018 Move X8, 0xDD6000
	019 Move X8, [X8+3144]
	020 Move X0, [X8]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X31
	026 Call CultureInfo.get_CurrentCulture
	027 Move X1, X0
	028 Move X0, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Call Byte.Parse, X0, X1
	033 Return X0
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move W0, W31
	037 Move X30, [X31+32]
	038 Return X0

Method: System.Byte ToByte(System.String value, System.IFormatProvider provider)

Disassembly:
	0x03320738 MOV X1, X20
	0x0332073C BL 0x1C16E00
	0x03320740 CBZ X0, 0x33207DC
	0x03320744 LDR X21, [X21]
	0x03320748 MOV X0, X22

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {7}
	003 Move X2, X1
	004 Move W1, 7
	005 Call Byte.Parse, X0, X1, X2
	006 Return X0
	007 Return X0

Method: System.Int16 ToInt16(System.Object value)

Disassembly:
	0x0332074C MOV X1, X21
	0x03320750 BL 0x1C16E00
	0x03320754 CBZ X0, 0x33207E8
	0x03320758 LDR X8, [X0]
	0x0332075C MOV X20, X0
	0x03320760 LDRH W9, [X8 + 0x12E]
	0x03320764 CBZ X9, 0x3320788
	0x03320768 LDR X10, [X8 + 0xB0]
	0x0332076C ADD X10, X10, 0x8
	0x03320770 LDUR X11, [X10 - 0x8]
	0x03320774 CMP X11, X21
	0x03320778 B.EQ 0x33207B0
	0x0332077C SUBS X9, X9, 0x1
	0x03320780 ADD X10, X10, 0x10
	0x03320784 B.NE 0x3320770
	0x03320788 MOVZ W2, 0x8
	0x0332078C MOV X0, X20
	0x03320790 MOV X1, X21
	0x03320794 BL 0x1C5C788
	0x03320798 B 0x33207C0
	0x0332079C LDP X20, X19, [X31 + 0x20]
	0x033207A0 LDP X22, X21, [X31 + 0x10]
	0x033207A4 MOV W0, W31
	0x033207A8 LDR X30, [X31], #0x30
	0x033207AC RET
	0x033207B0 LDR W9, [X10]
	0x033207B4 ADD W9, W9, 0x8
	0x033207B8 ADD X8, X8, W9, 0x4, SXTW
	0x033207BC ADD X0, X8, 0x138
	0x033207C0 LDP X3, X2, [X0]
	0x033207C4 MOV X0, X20
	0x033207C8 MOV X1, X19
	0x033207CC LDP X20, X19, [X31 + 0x20]
	0x033207D0 LDP X22, X21, [X31 + 0x10]
	0x033207D4 LDR X30, [X31], #0x30
	0x033207D8 BR X3
	0x033207DC MOV X0, X22
	0x033207E0 MOV X1, X20
	0x033207E4 BL 0x1C171E0
	0x033207E8 MOV X0, X22
	0x033207EC MOV X1, X21
	0x033207F0 BL 0x1C171E0
	0x033207F4 STR X30, [X31 - 0x20]!
	0x033207F8 STP X20, X19, [X31 + 0x10]
	0x033207FC ADRP X20, 0x10BC000
	0x03320800 LDRB W8, [X20 + 0xC3D]
	0x03320804 MOV W19, W0
	0x03320808 TBNZ X8, 0x0, 0x3320820
	0x0332080C ADRP X0, 0xDDC000
	0x03320810 LDR X0, [X0 + 0x9E8]
	0x03320814 BL 0x1C16CF4
	0x03320818 MOVZ W8, 0x1
	0x0332081C STRB W8, [X20 + 0xC3D]
	0x03320820 TBNZ X19, 0x7, 0x3320834
	0x03320824 AND W0, W19, 0xFF
	0x03320828 LDP X20, X19, [X31 + 0x10]
	0x0332082C LDR X30, [X31], #0x20
	0x03320830 RET
	0x03320834 ADRP X8, 0xDDC000
	0x03320838 LDR X8, [X8 + 0x9E8]
	0x0332083C LDR X0, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10BD000
	006 Move W8, [X19+3101]
	007 Move X21, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE04000
	013 Move X0, [X0+3600]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3101], W8
	017 Compare X21, 0
	018 JumpIfEqual {48}
	019 Move X20, 0xE04000
	020 Move X20, [X20+3600]
	021 Move X0, X21
	022 Move X19, [X20]
	023 Move X1, X19
	024 Call 0x1C17E00
	025 Compare X0, 0
	026 JumpIfEqual {67}
	027 Move X20, [X20]
	028 Move X0, X21
	029 Move X1, X20
	030 Call 0x1C17E00
	031 Compare X0, 0
	032 JumpIfEqual {70}
	033 Move X8, [X0]
	034 Move X19, X0
	035 NotImplemented "Instruction LDRH not yet implemented."
	036 Compare X9, 0
	037 JumpIfEqual {44}
	038 Move X10, [X8+176]
	039 Add X10, X10, 8
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Subtract X9, X9, 1
	043 Add X10, X10, 16
	044 Move W2, 5
	045 Move X0, X19
	046 Move X1, X20
	047 Call 0x1C5D788
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move W0, W31
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Return X0
	054 Move W9, [X10]
	055 Add W9, W9, 5
	056 Add X8, X8, W9
	057 Add X0, X8, 312
	058 Move X3, [X0]
	059 Move X2, [X0+8]
	060 Move X0, X19
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X1, X31
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 CallNoReturn X3
	067 Move X0, X21
	068 Move X1, X19
	069 Call 0x1C181E0
	070 Move X0, X21
	071 Move X1, X20
	072 Call 0x1C181E0

Method: System.Int16 ToInt16(System.Object value, System.IFormatProvider provider)

Disassembly:
	0x03320840 BL 0x19903D0
	0x03320844 BL 0x331E15C
	0x03320848 STR X30, [X31 - 0x20]!
	0x0332084C STP X20, X19, [X31 + 0x10]
	0x03320850 ADRP X20, 0x10BC000
	0x03320854 LDRB W8, [X20 + 0xC3E]
	0x03320858 MOV W19, W0
	0x0332085C TBNZ X8, 0x0, 0x3320874
	0x03320860 ADRP X0, 0xDDC000
	0x03320864 LDR X0, [X0 + 0x9E8]
	0x03320868 BL 0x1C16CF4
	0x0332086C MOVZ W8, 0x1
	0x03320870 STRB W8, [X20 + 0xC3E]
	0x03320874 TBNZ X19, 0xF, 0x3320888
	0x03320878 AND W0, W19, 0xFFFF
	0x0332087C LDP X20, X19, [X31 + 0x10]
	0x03320880 LDR X30, [X31], #0x20
	0x03320884 RET
	0x03320888 ADRP X8, 0xDDC000
	0x0332088C LDR X8, [X8 + 0x9E8]
	0x03320890 LDR X0, [X8]
	0x03320894 BL 0x19903D0
	0x03320898 BL 0x331E15C
	0x0332089C AND W0, W0, 0xFFFF
	0x033208A0 RET
	0x033208A4 STR X30, [X31 - 0x20]!
	0x033208A8 STP X20, X19, [X31 + 0x10]
	0x033208AC ADRP X20, 0x10BC000
	0x033208B0 LDRB W8, [X20 + 0xC3F]
	0x033208B4 MOV W19, W0
	0x033208B8 TBNZ X8, 0x0, 0x33208D0
	0x033208BC ADRP X0, 0xDDC000
	0x033208C0 LDR X0, [X0 + 0x9E8]
	0x033208C4 BL 0x1C16CF4
	0x033208C8 MOVZ W8, 0x1
	0x033208CC STRB W8, [X20 + 0xC3F]
	0x033208D0 TBNZ X19, 0x1F, 0x33208E4
	0x033208D4 MOV W0, W19
	0x033208D8 LDP X20, X19, [X31 + 0x10]
	0x033208DC LDR X30, [X31], #0x20
	0x033208E0 RET
	0x033208E4 ADRP X8, 0xDDC000
	0x033208E8 LDR X8, [X8 + 0x9E8]
	0x033208EC LDR X0, [X8]
	0x033208F0 BL 0x19903D0
	0x033208F4 BL 0x331E15C
	0x033208F8 STR X30, [X31 - 0x20]!
	0x033208FC STP X20, X19, [X31 + 0x10]
	0x03320900 ADRP X20, 0x10BC000
	0x03320904 LDRB W8, [X20 + 0xC40]
	0x03320908 MOV X19, X0
	0x0332090C TBNZ X8, 0x0, 0x3320924
	0x03320910 ADRP X0, 0xDDC000
	0x03320914 LDR X0, [X0 + 0x9E8]
	0x03320918 BL 0x1C16CF4
	0x0332091C MOVZ W8, 0x1
	0x03320920 STRB W8, [X20 + 0xC40]
	0x03320924 UBFM X8, X19, 0x20, 0x3F
	0x03320928 CBNZ X8, 0x332093C
	0x0332092C MOV W0, W19
	0x03320930 LDP X20, X19, [X31 + 0x10]
	0x03320934 LDR X30, [X31], #0x20
	0x03320938 RET
	0x0332093C ADRP X8, 0xDDC000
	0x03320940 LDR X8, [X8 + 0x9E8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x10BD000
	007 Move W8, [X20+3102]
	008 Move X19, X1
	009 Move X22, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE04000
	015 Move X0, [X0+3600]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3102], W8
	019 Compare X22, 0
	020 JumpIfEqual {50}
	021 Move X21, 0xE04000
	022 Move X21, [X21+3600]
	023 Move X0, X22
	024 Move X20, [X21]
	025 Move X1, X20
	026 Call 0x1C17E00
	027 Compare X0, 0
	028 JumpIfEqual {71}
	029 Move X21, [X21]
	030 Move X0, X22
	031 Move X1, X21
	032 Call 0x1C17E00
	033 Compare X0, 0
	034 JumpIfEqual {74}
	035 Move X8, [X0]
	036 Move X20, X0
	037 NotImplemented "Instruction LDRH not yet implemented."
	038 Compare X9, 0
	039 JumpIfEqual {46}
	040 Move X10, [X8+176]
	041 Add X10, X10, 8
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Subtract X9, X9, 1
	045 Add X10, X10, 16
	046 Move W2, 5
	047 Move X0, X20
	048 Move X1, X21
	049 Call 0x1C5D788
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move W0, W31
	055 Move X30, [X31+48]
	056 Return X0
	057 Move W9, [X10]
	058 Add W9, W9, 5
	059 Add X8, X8, W9
	060 Add X0, X8, 312
	061 Move X3, [X0]
	062 Move X2, [X0+8]
	063 Move X0, X20
	064 Move X1, X19
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X22, [X31+16]
	068 Move X21, [X31+24]
	069 Move X30, [X31+48]
	070 CallNoReturn X3
	071 Move X0, X22
	072 Move X1, X20
	073 Call 0x1C181E0
	074 Move X0, X22
	075 Move X1, X21
	076 Call 0x1C181E0

Method: System.Int16 ToInt16(System.Boolean value)

Disassembly:
	0x03319244 B.NE 0x3319230
	0x03319248 MOVZ W2, 0xE

ISIL:
	001 And W0, W0, 1
	002 Return X0

Method: System.Int16 ToInt16(System.Char value)

Disassembly:
	0x0331C17C CMP W8, 0x36
	0x0331C180 B.NE 0x331C1C8
	0x0331C184 LDR X0, [X21]
	0x0331C188 LDR W8, [X0 + 0xE0]
	0x0331C18C CBNZ W8, 0x331C194
	0x0331C190 BL 0x1C16DFC
	0x0331C194 UBFM W8, W19, 0xA, 0xF
	0x0331C198 CMP W8, 0x37
	0x0331C19C B.NE 0x331C1F8
	0x0331C1A0 AND W8, W20, 0xFFFF
	0x0331C1A4 UBFM W8, W8, 0x16, 0x15
	0x0331C1A8 ADD W8, W8, W19, UXTH
	0x0331C1AC LDP X20, X19, [X31 + 0x20]
	0x0331C1B0 LDP X22, X21, [X31 + 0x10]
	0x0331C1B4 MOVZ W9, 0x2400
	0x0331C1B8 MOVK W9, 0xFCA00000
	0x0331C1BC ADD W0, W8, W9
	0x0331C1C0 LDR X30, [X31], #0x30
	0x0331C1C4 RET
	0x0331C1C8 ADRP X0, 0xDDF000
	0x0331C1CC LDR X0, [X0 + 0x760]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10C1000
	005 Move W8, [X20+3103]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDE1000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3103], W8
	016 Move TEMP, X19
	017 And TEMP, TEMP, 0x8000
	018 Compare TEMP, 0x8000
	019 JumpIfEqual {25}
	020 Move W0, W19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0
	025 Move X8, 0xDE1000
	026 Move X8, [X8+2536]
	027 Move X0, [X8]
	028 Call 0x19913D0
	029 Call Convert.ThrowInt16OverflowException

Method: System.Int16 ToInt16(System.SByte value)

Disassembly:
	0x03320944 LDR X0, [X8]
	0x03320948 BL 0x19903D0

ISIL:
	001 NotImplemented "Instruction SXTB not yet implemented."
	002 Return X0

Method: System.Int16 ToInt16(System.Byte value)

Disassembly:
	0x0331B0D4 LDRB W8, [X20 + 0xC11]
	0x0331B0D8 MOV W19, W0

ISIL:
	001 And W0, W0, 255
	002 Return X0

Method: System.Int16 ToInt16(System.UInt16 value)

Disassembly:
	0x0332094C BL 0x331E15C
	0x03320950 STR X30, [X31 - 0x20]!
	0x03320954 STP X20, X19, [X31 + 0x10]
	0x03320958 ADRP X20, 0x10BC000
	0x0332095C LDRB W8, [X20 + 0xC41]
	0x03320960 MOV X19, X0
	0x03320964 TBNZ X8, 0x0, 0x332097C
	0x03320968 ADRP X0, 0xDDC000
	0x0332096C LDR X0, [X0 + 0x9E8]
	0x03320970 BL 0x1C16CF4
	0x03320974 MOVZ W8, 0x1
	0x03320978 STRB W8, [X20 + 0xC41]
	0x0332097C UBFM X8, X19, 0x20, 0x3F
	0x03320980 CBNZ X8, 0x3320994
	0x03320984 MOV W0, W19
	0x03320988 LDP X20, X19, [X31 + 0x10]
	0x0332098C LDR X30, [X31], #0x20
	0x03320990 RET
	0x03320994 ADRP X8, 0xDDC000
	0x03320998 LDR X8, [X8 + 0x9E8]
	0x0332099C LDR X0, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BD000
	005 Move W8, [X20+3104]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDD000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3104], W8
	016 Move TEMP, X19
	017 And TEMP, TEMP, 0x8000
	018 Compare TEMP, 0x8000
	019 JumpIfEqual {25}
	020 Move W0, W19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0
	025 Move X8, 0xDDD000
	026 Move X8, [X8+2536]
	027 Move X0, [X8]
	028 Call 0x19913D0
	029 Call Convert.ThrowInt16OverflowException

Method: System.Int16 ToInt16(System.Int32 value)

Disassembly:
	0x033209A0 BL 0x19903D0
	0x033209A4 BL 0x331E15C
	0x033209A8 STR D8, [X31 - 0x20]!
	0x033209AC STR X30, [X31 + 0x8]
	0x033209B0 STP X20, X19, [X31 + 0x10]
	0x033209B4 ADRP X19, 0x10BC000
	0x033209B8 ADRP X20, 0xDDC000
	0x033209BC LDRB W8, [X19 + 0xC42]
	0x033209C0 LDR X20, [X20 + 0x9E8]
	0x033209C4 MOV V8.16B, V0.16B
	0x033209C8 TBNZ X8, 0x0, 0x33209E0
	0x033209CC ADRP X0, 0xDDC000
	0x033209D0 LDR X0, [X0 + 0x9E8]
	0x033209D4 BL 0x1C16CF4
	0x033209D8 MOVZ W8, 0x1
	0x033209DC STRB W8, [X19 + 0xC42]
	0x033209E0 LDR X0, [X20]
	0x033209E4 LDR W8, [X0 + 0xE0]
	0x033209E8 CBNZ W8, 0x33209F0
	0x033209EC BL 0x1C16DFC
	0x033209F0 LDP X20, X19, [X31 + 0x10]
	0x033209F4 LDR X30, [X31 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BD000
	005 Move W8, [X20+3105]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDD000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3105], W8
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move X8, 0xDDD000
	023 Move X8, [X8+2536]
	024 Move X0, [X8]
	025 Call 0x19913D0
	026 Call Convert.ThrowInt16OverflowException

Method: System.Int16 ToInt16(System.UInt32 value)

Disassembly:
	0x033209F8 FCVT S0, S8
	0x033209FC LDR V8, [X31], #0x20
	0x03320A00 B 0x3320A04
	0x03320A04 STP X30, X19, [X31 - 0x10]!
	0x03320A08 FMOV D1, -0.5
	0x03320A0C FCMP D0, D1
	0x03320A10 B.LT 0x3320A64
	0x03320A14 ADRP X8, 0xFFFFFFFFFD7CD000
	0x03320A18 LDR V1, [X8 + 0x700]
	0x03320A1C FCMP D0, D1
	0x03320A20 B.PL 0x3320A64
	0x03320A24 FCVTZS W8, D0
	0x03320A28 FCVTZU W9, D0
	0x03320A2C FCMP D0, 0x0
	0x03320A30 CSEL W0, W8, W9, MI
	0x03320A34 UCVTF D1, W0
	0x03320A38 FSUB D0, D0, D1
	0x03320A3C FMOV D1, 0.5
	0x03320A40 FCMP D0, D1
	0x03320A44 B.GT 0x3320A58
	0x03320A48 TBZ X0, 0x0, 0x3320A5C
	0x03320A4C FMOV D1, 0.5

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BD000
	005 Move W8, [X20+3106]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDD000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3106], W8
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move X8, 0xDDD000
	023 Move X8, [X8+2536]
	024 Move X0, [X8]
	025 Call 0x19913D0
	026 Call Convert.ThrowInt16OverflowException

Method: System.Int16 ToInt16(System.Int64 value)

Disassembly:
	0x03320A50 FCMP D0, D1
	0x03320A54 B.NE 0x3320A5C
	0x03320A58 ADD W0, W0, 0x1
	0x03320A5C LDP X30, X19, [X31], #0x10
	0x03320A60 RET
	0x03320A64 ADRP X0, 0xDD3000
	0x03320A68 LDR X0, [X0 + 0x858]
	0x03320A6C BL 0x1C16D08
	0x03320A70 BL 0x1C16F10
	0x03320A74 MOV X19, X0
	0x03320A78 ADRP X0, 0xE08000
	0x03320A7C LDR X0, [X0 + 0x1E0]
	0x03320A80 BL 0x1C16D08
	0x03320A84 MOV X1, X0
	0x03320A88 MOV X0, X19
	0x03320A8C MOV X2, X31
	0x03320A90 BL 0x338CB50
	0x03320A94 ADRP X0, 0xE08000
	0x03320A98 LDR X0, [X0 + 0x220]
	0x03320A9C BL 0x1C16D08
	0x03320AA0 MOV X1, X0
	0x03320AA4 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BD000
	005 Move W8, [X20+3107]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDD000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3107], W8
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move X8, 0xDDD000
	023 Move X8, [X8+2536]
	024 Move X0, [X8]
	025 Call 0x19913D0
	026 Call Convert.ThrowInt16OverflowException

Method: System.Int16 ToInt16(System.UInt64 value)

Disassembly:
	0x03320AA8 BL 0x1C16DEC
	0x03320AAC STR X30, [X31 - 0x30]!
	0x03320AB0 STP X22, X21, [X31 + 0x10]
	0x03320AB4 STP X20, X19, [X31 + 0x20]
	0x03320AB8 ADRP X22, 0x10BC000
	0x03320ABC ADRP X21, 0xDFB000
	0x03320AC0 LDRB W8, [X22 + 0xC43]
	0x03320AC4 LDR X21, [X21 + 0x5F0]
	0x03320AC8 MOV X19, X1
	0x03320ACC MOV X20, X0
	0x03320AD0 TBNZ X8, 0x0, 0x3320AE8
	0x03320AD4 ADRP X0, 0xDFB000
	0x03320AD8 LDR X0, [X0 + 0x5F0]
	0x03320ADC BL 0x1C16CF4
	0x03320AE0 MOVZ W8, 0x1
	0x03320AE4 STRB W8, [X22 + 0xC43]
	0x03320AE8 LDR X0, [X21]
	0x03320AEC LDR W8, [X0 + 0xE0]
	0x03320AF0 CBNZ W8, 0x3320AF8
	0x03320AF4 BL 0x1C16DFC
	0x03320AF8 MOV X0, X20
	0x03320AFC MOV X1, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BD000
	005 Move W8, [X20+3108]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDD000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3108], W8
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move X8, 0xDDD000
	023 Move X8, [X8+2536]
	024 Move X0, [X8]
	025 Call 0x19913D0
	026 Call Convert.ThrowInt16OverflowException

Method: System.Int16 ToInt16(System.Single value)

Disassembly:
	0x03320B00 MOV W2, W31
	0x03320B04 MOV X3, X31
	0x03320B08 BL 0x33D7A90
	0x03320B0C LDP X20, X19, [X31 + 0x20]
	0x03320B10 LDP X22, X21, [X31 + 0x10]
	0x03320B14 MOV X2, X31
	0x03320B18 LDR X30, [X31], #0x30
	0x03320B1C B 0x33D8120
	0x03320B20 CBZ X0, 0x3320B34
	0x03320B24 MOV X2, X1
	0x03320B28 MOVZ W1, 0x7
	0x03320B2C MOV X3, X31
	0x03320B30 B 0x3399FBC
	0x03320B34 RET
	0x03320B38 STP X30, X21, [X31 - 0x20]!
	0x03320B3C STP X20, X19, [X31 + 0x10]
	0x03320B40 ADRP X19, 0x10BC000
	0x03320B44 LDRB W8, [X19 + 0xC44]
	0x03320B48 MOV X21, X0
	0x03320B4C TBNZ X8, 0x0, 0x3320B64
	0x03320B50 ADRP X0, 0xE03000
	0x03320B54 LDR X0, [X0 + 0xE10]
	0x03320B58 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10BD000
	006 Move X20, 0xDDD000
	007 Move W8, [X19+3109]
	008 Move X20, [X20+2536]
	009 Move V8, V0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDDD000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+3109], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+8]
	027 NotImplemented "Instruction FCVT not yet implemented."
	028 Move V8, [X31+32]

Method: System.Int16 ToInt16(System.Double value)

Disassembly:
	0x03320B5C MOVZ W8, 0x1
	0x03320B60 STRB W8, [X19 + 0xC44]
	0x03320B64 CBZ X21, 0x3320BDC
	0x03320B68 ADRP X20, 0xE03000
	0x03320B6C LDR X20, [X20 + 0xE10]
	0x03320B70 MOV X0, X21
	0x03320B74 LDR X19, [X20]
	0x03320B78 MOV X1, X19
	0x03320B7C BL 0x1C16E00
	0x03320B80 CBZ X0, 0x3320C14
	0x03320B84 LDR X20, [X20]
	0x03320B88 MOV X0, X21
	0x03320B8C MOV X1, X20
	0x03320B90 BL 0x1C16E00
	0x03320B94 CBZ X0, 0x3320C20
	0x03320B98 LDR X8, [X0]
	0x03320B9C MOV X19, X0
	0x03320BA0 LDRH W9, [X8 + 0x12E]
	0x03320BA4 CBZ X9, 0x3320BC8
	0x03320BA8 LDR X10, [X8 + 0xB0]
	0x03320BAC ADD X10, X10, 0x8
	0x03320BB0 LDUR X11, [X10 - 0x8]
	0x03320BB4 CMP X11, X20
	0x03320BB8 B.EQ 0x3320BEC

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10BD000
	006 Move X20, 0xDDD000
	007 Move W8, [X19+3110]
	008 Move X20, [X20+2536]
	009 Move V8, V0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDDD000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+3110], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move V0, V8
	025 Call Convert.ToInt32, V0
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+8]
	029 Move V8, [X31+32]
	030 Call Convert.ToInt16, X0
	031 Return X0

Method: System.Int16 ToInt16(System.Decimal value)

Disassembly:
	0x03320BBC SUBS X9, X9, 0x1
	0x03320BC0 ADD X10, X10, 0x10
	0x03320BC4 B.NE 0x3320BB0
	0x03320BC8 MOVZ W2, 0x9
	0x03320BCC MOV X0, X19
	0x03320BD0 MOV X1, X20
	0x03320BD4 BL 0x1C5C788
	0x03320BD8 B 0x3320BFC
	0x03320BDC LDP X20, X19, [X31 + 0x10]
	0x03320BE0 MOV X0, X31
	0x03320BE4 LDP X30, X21, [X31], #0x20
	0x03320BE8 RET
	0x03320BEC LDR W9, [X10]
	0x03320BF0 ADD W9, W9, 0x9
	0x03320BF4 ADD X8, X8, W9, 0x4, SXTW
	0x03320BF8 ADD X0, X8, 0x138
	0x03320BFC LDP X3, X2, [X0]
	0x03320C00 MOV X0, X19
	0x03320C04 LDP X20, X19, [X31 + 0x10]
	0x03320C08 MOV X1, X31
	0x03320C0C LDP X30, X21, [X31], #0x20
	0x03320C10 BR X3
	0x03320C14 MOV X0, X21
	0x03320C18 MOV X1, X19
	0x03320C1C BL 0x1C171E0
	0x03320C20 MOV X0, X21
	0x03320C24 MOV X1, X20
	0x03320C28 BL 0x1C171E0
	0x03320C2C STR X30, [X31 - 0x30]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x10BD000
	007 Move X21, 0xDFC000
	008 Move W8, [X22+3111]
	009 Move X21, [X21+1520]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xDFC000
	017 Move X0, [X0+1520]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3111], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move W2, W31
	029 Move X3, X31
	030 Call Decimal.Round, X0, X1
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X2, X31
	036 Move X30, [X31+48]
	037 Call Decimal.ToInt16, X0
	038 Return X0

Method: System.Int16 ToInt16(System.String value, System.IFormatProvider provider)

Disassembly:
	0x03320C30 STP X22, X21, [X31 + 0x10]
	0x03320C34 STP X20, X19, [X31 + 0x20]
	0x03320C38 ADRP X20, 0x10BC000
	0x03320C3C LDRB W8, [X20 + 0xC45]
	0x03320C40 MOV X19, X1
	0x03320C44 MOV X22, X0

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {8}
	003 Move X2, X1
	004 Move W1, 7
	005 Move X3, X31
	006 Call Int16.Parse, X0, X1, X2
	007 Return X0
	008 Return X0

Method: System.UInt16 ToUInt16(System.Object value)

Disassembly:
	0x03320C48 TBNZ X8, 0x0, 0x3320C60
	0x03320C4C ADRP X0, 0xE03000
	0x03320C50 LDR X0, [X0 + 0xE10]
	0x03320C54 BL 0x1C16CF4
	0x03320C58 MOVZ W8, 0x1
	0x03320C5C STRB W8, [X20 + 0xC45]
	0x03320C60 CBZ X22, 0x3320CD8
	0x03320C64 ADRP X21, 0xE03000
	0x03320C68 LDR X21, [X21 + 0xE10]
	0x03320C6C MOV X0, X22
	0x03320C70 LDR X20, [X21]
	0x03320C74 MOV X1, X20
	0x03320C78 BL 0x1C16E00
	0x03320C7C CBZ X0, 0x3320D18
	0x03320C80 LDR X21, [X21]
	0x03320C84 MOV X0, X22
	0x03320C88 MOV X1, X21
	0x03320C8C BL 0x1C16E00
	0x03320C90 CBZ X0, 0x3320D24
	0x03320C94 LDR X8, [X0]
	0x03320C98 MOV X20, X0
	0x03320C9C LDRH W9, [X8 + 0x12E]
	0x03320CA0 CBZ X9, 0x3320CC4
	0x03320CA4 LDR X10, [X8 + 0xB0]
	0x03320CA8 ADD X10, X10, 0x8
	0x03320CAC LDUR X11, [X10 - 0x8]
	0x03320CB0 CMP X11, X21
	0x03320CB4 B.EQ 0x3320CEC
	0x03320CB8 SUBS X9, X9, 0x1
	0x03320CBC ADD X10, X10, 0x10
	0x03320CC0 B.NE 0x3320CAC
	0x03320CC4 MOVZ W2, 0x9
	0x03320CC8 MOV X0, X20
	0x03320CCC MOV X1, X21
	0x03320CD0 BL 0x1C5C788
	0x03320CD4 B 0x3320CFC
	0x03320CD8 LDP X20, X19, [X31 + 0x20]
	0x03320CDC LDP X22, X21, [X31 + 0x10]
	0x03320CE0 MOV X0, X31
	0x03320CE4 LDR X30, [X31], #0x30
	0x03320CE8 RET
	0x03320CEC LDR W9, [X10]
	0x03320CF0 ADD W9, W9, 0x9
	0x03320CF4 ADD X8, X8, W9, 0x4, SXTW
	0x03320CF8 ADD X0, X8, 0x138
	0x03320CFC LDP X3, X2, [X0]
	0x03320D00 MOV X0, X20
	0x03320D04 MOV X1, X19
	0x03320D08 LDP X20, X19, [X31 + 0x20]
	0x03320D0C LDP X22, X21, [X31 + 0x10]
	0x03320D10 LDR X30, [X31], #0x30
	0x03320D14 BR X3
	0x03320D18 MOV X0, X22
	0x03320D1C MOV X1, X20
	0x03320D20 BL 0x1C171E0
	0x03320D24 MOV X0, X22
	0x03320D28 MOV X1, X21
	0x03320D2C BL 0x1C171E0
	0x03320D30 SXTB X0, W0
	0x03320D34 RET
	0x03320D38 SXTH X0, W0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10BD000
	006 Move W8, [X19+3112]
	007 Move X21, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE04000
	013 Move X0, [X0+3600]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3112], W8
	017 Compare X21, 0
	018 JumpIfEqual {48}
	019 Move X20, 0xE04000
	020 Move X20, [X20+3600]
	021 Move X0, X21
	022 Move X19, [X20]
	023 Move X1, X19
	024 Call 0x1C17E00
	025 Compare X0, 0
	026 JumpIfEqual {67}
	027 Move X20, [X20]
	028 Move X0, X21
	029 Move X1, X20
	030 Call 0x1C17E00
	031 Compare X0, 0
	032 JumpIfEqual {70}
	033 Move X8, [X0]
	034 Move X19, X0
	035 NotImplemented "Instruction LDRH not yet implemented."
	036 Compare X9, 0
	037 JumpIfEqual {44}
	038 Move X10, [X8+176]
	039 Add X10, X10, 8
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Subtract X9, X9, 1
	043 Add X10, X10, 16
	044 Move W2, 6
	045 Move X0, X19
	046 Move X1, X20
	047 Call 0x1C5D788
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move W0, W31
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Return X0
	054 Move W9, [X10]
	055 Add W9, W9, 6
	056 Add X8, X8, W9
	057 Add X0, X8, 312
	058 Move X3, [X0]
	059 Move X2, [X0+8]
	060 Move X0, X19
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X1, X31
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 CallNoReturn X3
	067 Move X0, X21
	068 Move X1, X19
	069 Call 0x1C181E0
	070 Move X0, X21
	071 Move X1, X20
	072 Call 0x1C181E0

Method: System.UInt16 ToUInt16(System.Object value, System.IFormatProvider provider)

Disassembly:
	0x03320D3C RET
	0x03320D40 AND X0, X0, 0xFFFF
	0x03320D44 RET
	0x03320D48 SXTW X0, W0
	0x03320D4C RET
	0x03320D50 MOV W0, W0
	0x03320D54 RET
	0x03320D58 STR X30, [X31 - 0x20]!
	0x03320D5C STP X20, X19, [X31 + 0x10]
	0x03320D60 ADRP X20, 0x10BC000
	0x03320D64 LDRB W8, [X20 + 0xC46]
	0x03320D68 MOV X19, X0
	0x03320D6C TBNZ X8, 0x0, 0x3320D84
	0x03320D70 ADRP X0, 0xDDC000
	0x03320D74 LDR X0, [X0 + 0x9E8]
	0x03320D78 BL 0x1C16CF4
	0x03320D7C MOVZ W8, 0x1
	0x03320D80 STRB W8, [X20 + 0xC46]
	0x03320D84 TBNZ X19, 0x0, 0x3320D98
	0x03320D88 MOV X0, X19
	0x03320D8C LDP X20, X19, [X31 + 0x10]
	0x03320D90 LDR X30, [X31], #0x20
	0x03320D94 RET
	0x03320D98 ADRP X8, 0xDDC000
	0x03320D9C LDR X8, [X8 + 0x9E8]
	0x03320DA0 LDR X0, [X8]
	0x03320DA4 BL 0x19903D0
	0x03320DA8 BL 0x331E1A8
	0x03320DAC STR D8, [X31 - 0x20]!
	0x03320DB0 STR X30, [X31 + 0x8]
	0x03320DB4 STP X20, X19, [X31 + 0x10]
	0x03320DB8 ADRP X19, 0x10BC000
	0x03320DBC ADRP X20, 0xDDC000
	0x03320DC0 LDRB W8, [X19 + 0xC47]
	0x03320DC4 LDR X20, [X20 + 0x9E8]
	0x03320DC8 MOV V8.16B, V0.16B
	0x03320DCC TBNZ X8, 0x0, 0x3320DE4
	0x03320DD0 ADRP X0, 0xDDC000
	0x03320DD4 LDR X0, [X0 + 0x9E8]
	0x03320DD8 BL 0x1C16CF4
	0x03320DDC MOVZ W8, 0x1
	0x03320DE0 STRB W8, [X19 + 0xC47]
	0x03320DE4 LDR X0, [X20]
	0x03320DE8 LDR W8, [X0 + 0xE0]
	0x03320DEC CBNZ W8, 0x3320DF4
	0x03320DF0 BL 0x1C16DFC
	0x03320DF4 LDP X20, X19, [X31 + 0x10]
	0x03320DF8 LDR X30, [X31 + 0x8]
	0x03320DFC FCVT S0, S8
	0x03320E00 LDR V8, [X31], #0x20
	0x03320E04 B 0x3320E08
	0x03320E08 SUB X31, X31, 0x30
	0x03320E0C STR D8, [X31 + 0x10]
	0x03320E10 STR X30, [X31 + 0x18]
	0x03320E14 STP X20, X19, [X31 + 0x20]
	0x03320E18 ADRP X19, 0x10BC000
	0x03320E1C ADRP X20, 0xDD3000
	0x03320E20 LDRB W8, [X19 + 0xC48]
	0x03320E24 LDR X20, [X20 + 0x5A8]
	0x03320E28 MOV V8.16B, V0.16B
	0x03320E2C TBNZ X8, 0x0, 0x3320E50
	0x03320E30 ADRP X0, 0xE08000
	0x03320E34 LDR X0, [X0 + 0x228]
	0x03320E38 BL 0x1C16CF4
	0x03320E3C ADRP X0, 0xDD3000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x10BD000
	007 Move W8, [X20+3113]
	008 Move X19, X1
	009 Move X22, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE04000
	015 Move X0, [X0+3600]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3113], W8
	019 Compare X22, 0
	020 JumpIfEqual {50}
	021 Move X21, 0xE04000
	022 Move X21, [X21+3600]
	023 Move X0, X22
	024 Move X20, [X21]
	025 Move X1, X20
	026 Call 0x1C17E00
	027 Compare X0, 0
	028 JumpIfEqual {71}
	029 Move X21, [X21]
	030 Move X0, X22
	031 Move X1, X21
	032 Call 0x1C17E00
	033 Compare X0, 0
	034 JumpIfEqual {74}
	035 Move X8, [X0]
	036 Move X20, X0
	037 NotImplemented "Instruction LDRH not yet implemented."
	038 Compare X9, 0
	039 JumpIfEqual {46}
	040 Move X10, [X8+176]
	041 Add X10, X10, 8
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Subtract X9, X9, 1
	045 Add X10, X10, 16
	046 Move W2, 6
	047 Move X0, X20
	048 Move X1, X21
	049 Call 0x1C5D788
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move W0, W31
	055 Move X30, [X31+48]
	056 Return X0
	057 Move W9, [X10]
	058 Add W9, W9, 6
	059 Add X8, X8, W9
	060 Add X0, X8, 312
	061 Move X3, [X0]
	062 Move X2, [X0+8]
	063 Move X0, X20
	064 Move X1, X19
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X22, [X31+16]
	068 Move X21, [X31+24]
	069 Move X30, [X31+48]
	070 CallNoReturn X3
	071 Move X0, X22
	072 Move X1, X20
	073 Call 0x1C181E0
	074 Move X0, X22
	075 Move X1, X21
	076 Call 0x1C181E0

Method: System.UInt16 ToUInt16(System.Boolean value)

Disassembly:
	0x033192A8 LDR X10, [X8 + 0xB0]
	0x033192AC ADD X10, X10, 0x8

ISIL:
	001 And W0, W0, 1
	002 Return X0

Method: System.UInt16 ToUInt16(System.Char value)

Disassembly:
	0x0331C228 MOV X2, X0

ISIL:
	001 Return X0

Method: System.UInt16 ToUInt16(System.SByte value)

Disassembly:
	0x03320E40 LDR X0, [X0 + 0x5A8]
	0x03320E44 BL 0x1C16CF4
	0x03320E48 MOVZ W8, 0x1
	0x03320E4C STRB W8, [X19 + 0xC48]
	0x03320E50 LDR X0, [X20]
	0x03320E54 LDR W8, [X0 + 0xE0]
	0x03320E58 CBNZ W8, 0x3320E60
	0x03320E5C BL 0x1C16DFC
	0x03320E60 ADD X0, X31, 0x8
	0x03320E64 MOV V0.16B, V8.16B
	0x03320E68 BL 0x3EB1C00
	0x03320E6C FCMP D8, 0x0
	0x03320E70 B.GE 0x3320E8C
	0x03320E74 FMOV D1, -0.5
	0x03320E78 FCMP D0, D1
	0x03320E7C B.NE 0x3320EB4
	0x03320E80 LDR V0, [X31 + 0x8]
	0x03320E84 FMOV D1, -1
	0x03320E88 B 0x3320EA0
	0x03320E8C FMOV D1, 0.5
	0x03320E90 FCMP D0, D1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BD000
	005 Move W8, [X20+3114]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDD000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3114], W8
	016 Move TEMP, X19
	017 And TEMP, TEMP, 128
	018 Compare TEMP, 128
	019 JumpIfEqual {25}
	020 And W0, W19, 255
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0
	025 Move X8, 0xDDD000
	026 Move X8, [X8+2536]
	027 Move X0, [X8]
	028 Call 0x19913D0
	029 Call Convert.ThrowUInt16OverflowException

Method: System.UInt16 ToUInt16(System.Byte value)

Disassembly:
	0x0331B134 LDRB W8, [X21 + 0xBD9]
	0x0331B138 LDR X20, [X20 + 0x9E8]

ISIL:
	001 And W0, W0, 255
	002 Return X0

Method: System.UInt16 ToUInt16(System.Int16 value)

Disassembly:
	0x03320E94 B.NE 0x3320EC0
	0x03320E98 LDR V0, [X31 + 0x8]
	0x03320E9C FMOV D1, 1
	0x03320EA0 FCVTZS X8, D0
	0x03320EA4 FADD D1, D0, D1
	0x03320EA8 ANDS X31, X8, 0x1
	0x03320EAC FCSEL D0, D0, D1, EQ
	0x03320EB0 B 0x3320EC8
	0x03320EB4 FADD D0, D8, D1
	0x03320EB8 FRINTP D0, D0
	0x03320EBC B 0x3320EC8
	0x03320EC0 FADD D0, D8, D1
	0x03320EC4 FRINTM D0, D0
	0x03320EC8 MOVZ X8, 0x43E00000
	0x03320ECC FMOV D1, X8
	0x03320ED0 FCMP D0, D1
	0x03320ED4 B.GT 0x3320F04
	0x03320ED8 MOVZ X8, 0x7FF00000
	0x03320EDC LDP X20, X19, [X31 + 0x20]
	0x03320EE0 LDR X30, [X31 + 0x18]
	0x03320EE4 LDR V8, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BD000
	005 Move W8, [X20+3115]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDD000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3115], W8
	016 Move TEMP, X19
	017 And TEMP, TEMP, 0x8000
	018 Compare TEMP, 0x8000
	019 JumpIfEqual {25}
	020 Move W0, W19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0
	025 Move X8, 0xDDD000
	026 Move X8, [X8+2536]
	027 Move X0, [X8]
	028 Call 0x19913D0
	029 Call Convert.ThrowUInt16OverflowException

Method: System.UInt16 ToUInt16(System.Int32 value)

Disassembly:
	0x03320EE8 FMOV D1, X8
	0x03320EEC FCVTZS X9, D0
	0x03320EF0 FCMP D0, D1
	0x03320EF4 MOVZ X8, 0x80000000
	0x03320EF8 CSEL X0, X8, X9, EQ
	0x03320EFC ADD X31, X31, 0x30
	0x03320F00 RET
	0x03320F04 BL 0x1C16F30
	0x03320F08 ADRP X8, 0xE08000
	0x03320F0C LDR X8, [X8 + 0x228]
	0x03320F10 LDR X1, [X8]
	0x03320F14 BL 0x1C16DEC
	0x03320F18 STR X30, [X31 - 0x30]!
	0x03320F1C STP X22, X21, [X31 + 0x10]
	0x03320F20 STP X20, X19, [X31 + 0x20]
	0x03320F24 ADRP X22, 0x10BC000
	0x03320F28 ADRP X21, 0xDFB000
	0x03320F2C LDRB W8, [X22 + 0xC49]
	0x03320F30 LDR X21, [X21 + 0x5F0]
	0x03320F34 MOV X19, X1
	0x03320F38 MOV X20, X0
	0x03320F3C TBNZ X8, 0x0, 0x3320F54

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BD000
	005 Move W8, [X20+3116]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDD000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3116], W8
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move X8, 0xDDD000
	023 Move X8, [X8+2536]
	024 Move X0, [X8]
	025 Call 0x19913D0
	026 Call Convert.ThrowUInt16OverflowException

Method: System.UInt16 ToUInt16(System.UInt32 value)

Disassembly:
	0x03320F40 ADRP X0, 0xDFB000
	0x03320F44 LDR X0, [X0 + 0x5F0]
	0x03320F48 BL 0x1C16CF4
	0x03320F4C MOVZ W8, 0x1
	0x03320F50 STRB W8, [X22 + 0xC49]
	0x03320F54 LDR X0, [X21]
	0x03320F58 LDR W8, [X0 + 0xE0]
	0x03320F5C CBNZ W8, 0x3320F64
	0x03320F60 BL 0x1C16DFC
	0x03320F64 MOV X0, X20
	0x03320F68 MOV X1, X19
	0x03320F6C MOV W2, W31
	0x03320F70 MOV X3, X31
	0x03320F74 BL 0x33D7A90
	0x03320F78 LDP X20, X19, [X31 + 0x20]
	0x03320F7C LDP X22, X21, [X31 + 0x10]
	0x03320F80 MOV X2, X31
	0x03320F84 LDR X30, [X31], #0x30
	0x03320F88 B 0x33D8890
	0x03320F8C STR X30, [X31 - 0x20]!
	0x03320F90 STP X20, X19, [X31 + 0x10]
	0x03320F94 ADRP X20, 0x10BC000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BD000
	005 Move W8, [X20+3117]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDD000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3117], W8
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move X8, 0xDDD000
	023 Move X8, [X8+2536]
	024 Move X0, [X8]
	025 Call 0x19913D0
	026 Call Convert.ThrowUInt16OverflowException

Method: System.UInt16 ToUInt16(System.Int64 value)

Disassembly:
	0x03320F98 LDRB W8, [X20 + 0xC4A]
	0x03320F9C MOV X19, X0
	0x03320FA0 TBNZ X8, 0x0, 0x3320FB8
	0x03320FA4 ADRP X0, 0xDD5000
	0x03320FA8 LDR X0, [X0 + 0xC48]
	0x03320FAC BL 0x1C16CF4
	0x03320FB0 MOVZ W8, 0x1
	0x03320FB4 STRB W8, [X20 + 0xC4A]
	0x03320FB8 CBZ X19, 0x3320FF4
	0x03320FBC ADRP X8, 0xDD5000
	0x03320FC0 LDR X8, [X8 + 0xC48]
	0x03320FC4 LDR X0, [X8]
	0x03320FC8 LDR W8, [X0 + 0xE0]
	0x03320FCC CBNZ W8, 0x3320FD4
	0x03320FD0 BL 0x1C16DFC
	0x03320FD4 MOV X0, X31
	0x03320FD8 BL 0x33387A0
	0x03320FDC MOV X1, X0
	0x03320FE0 MOV X0, X19
	0x03320FE4 LDP X20, X19, [X31 + 0x10]
	0x03320FE8 MOV X2, X31
	0x03320FEC LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BD000
	005 Move W8, [X20+3118]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDD000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3118], W8
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move X8, 0xDDD000
	023 Move X8, [X8+2536]
	024 Move X0, [X8]
	025 Call 0x19913D0
	026 Call Convert.ThrowUInt16OverflowException

Method: System.UInt16 ToUInt16(System.UInt64 value)

Disassembly:
	0x03320FF0 B 0x337D210
	0x03320FF4 LDP X20, X19, [X31 + 0x10]
	0x03320FF8 MOV X0, X31
	0x03320FFC LDR X30, [X31], #0x20
	0x03321000 RET
	0x03321004 CBZ X0, 0x3321018
	0x03321008 MOV X2, X1
	0x0332100C MOVZ W1, 0x7
	0x03321010 MOV X3, X31
	0x03321014 B 0x337D4A8
	0x03321018 RET
	0x0332101C STP X30, X21, [X31 - 0x20]!
	0x03321020 STP X20, X19, [X31 + 0x10]
	0x03321024 ADRP X19, 0x10BB000
	0x03321028 LDRB W8, [X19 + 0xC4B]
	0x0332102C MOV X21, X0
	0x03321030 TBNZ X8, 0x0, 0x3321048
	0x03321034 ADRP X0, 0xE02000
	0x03321038 LDR X0, [X0 + 0xE10]
	0x0332103C BL 0x1C16CF4
	0x03321040 MOVZ W8, 0x1
	0x03321044 STRB W8, [X19 + 0xC4B]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BD000
	005 Move W8, [X20+3119]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDC000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3119], W8
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move X8, 0xDDC000
	023 Move X8, [X8+2536]
	024 Move X0, [X8]
	025 Call 0x19913D0
	026 Call Convert.ThrowUInt16OverflowException

Method: System.UInt16 ToUInt16(System.Single value)

Disassembly:
	0x03321048 CBZ X21, 0x33210C0
	0x0332104C ADRP X20, 0xE02000
	0x03321050 LDR X20, [X20 + 0xE10]
	0x03321054 MOV X0, X21
	0x03321058 LDR X19, [X20]
	0x0332105C MOV X1, X19
	0x03321060 BL 0x1C16E00
	0x03321064 CBZ X0, 0x33210F8
	0x03321068 LDR X20, [X20]
	0x0332106C MOV X0, X21
	0x03321070 MOV X1, X20
	0x03321074 BL 0x1C16E00
	0x03321078 CBZ X0, 0x3321104
	0x0332107C LDR X8, [X0]
	0x03321080 MOV X19, X0
	0x03321084 LDRH W9, [X8 + 0x12E]
	0x03321088 CBZ X9, 0x33210AC
	0x0332108C LDR X10, [X8 + 0xB0]
	0x03321090 ADD X10, X10, 0x8
	0x03321094 LDUR X11, [X10 - 0x8]
	0x03321098 CMP X11, X20
	0x0332109C B.EQ 0x33210D0
	0x033210A0 SUBS X9, X9, 0x1

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10BC000
	006 Move X20, 0xDDC000
	007 Move W8, [X19+3120]
	008 Move X20, [X20+2536]
	009 Move V8, V0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDDC000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+3120], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+8]
	027 NotImplemented "Instruction FCVT not yet implemented."
	028 Move V8, [X31+32]

Method: System.UInt16 ToUInt16(System.Double value)

Disassembly:
	0x033210A4 ADD X10, X10, 0x10
	0x033210A8 B.NE 0x3321094
	0x033210AC MOVZ W2, 0xA
	0x033210B0 MOV X0, X19
	0x033210B4 MOV X1, X20
	0x033210B8 BL 0x1C5C788
	0x033210BC B 0x33210E0
	0x033210C0 LDP X20, X19, [X31 + 0x10]
	0x033210C4 MOV X0, X31
	0x033210C8 LDP X30, X21, [X31], #0x20
	0x033210CC RET
	0x033210D0 LDR W9, [X10]
	0x033210D4 ADD W9, W9, 0xA
	0x033210D8 ADD X8, X8, W9, 0x4, SXTW
	0x033210DC ADD X0, X8, 0x138
	0x033210E0 LDP X3, X2, [X0]
	0x033210E4 MOV X0, X19
	0x033210E8 LDP X20, X19, [X31 + 0x10]
	0x033210EC MOV X1, X31
	0x033210F0 LDP X30, X21, [X31], #0x20
	0x033210F4 BR X3
	0x033210F8 MOV X0, X21
	0x033210FC MOV X1, X19
	0x03321100 BL 0x1C171E0

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10BC000
	006 Move X20, 0xDDC000
	007 Move W8, [X19+3121]
	008 Move X20, [X20+2536]
	009 Move V8, V0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDDC000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+3121], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move V0, V8
	025 Call Convert.ToInt32, V0
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+8]
	029 Move V8, [X31+32]
	030 Call Convert.ToUInt16, X0
	031 Return X0

Method: System.UInt16 ToUInt16(System.Decimal value)

Disassembly:
	0x03321104 MOV X0, X21
	0x03321108 MOV X1, X20
	0x0332110C BL 0x1C171E0
	0x03321110 STR X30, [X31 - 0x30]!
	0x03321114 STP X22, X21, [X31 + 0x10]
	0x03321118 STP X20, X19, [X31 + 0x20]
	0x0332111C ADRP X20, 0x10BB000
	0x03321120 LDRB W8, [X20 + 0xC4C]
	0x03321124 MOV X19, X1
	0x03321128 MOV X22, X0
	0x0332112C TBNZ X8, 0x0, 0x3321144
	0x03321130 ADRP X0, 0xE02000
	0x03321134 LDR X0, [X0 + 0xE10]
	0x03321138 BL 0x1C16CF4
	0x0332113C MOVZ W8, 0x1
	0x03321140 STRB W8, [X20 + 0xC4C]
	0x03321144 CBZ X22, 0x33211BC
	0x03321148 ADRP X21, 0xE02000
	0x0332114C LDR X21, [X21 + 0xE10]
	0x03321150 MOV X0, X22
	0x03321154 LDR X20, [X21]
	0x03321158 MOV X1, X20
	0x0332115C BL 0x1C16E00
	0x03321160 CBZ X0, 0x33211FC
	0x03321164 LDR X21, [X21]
	0x03321168 MOV X0, X22
	0x0332116C MOV X1, X21
	0x03321170 BL 0x1C16E00
	0x03321174 CBZ X0, 0x3321208

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x10BC000
	007 Move X21, 0xDFB000
	008 Move W8, [X22+3122]
	009 Move X21, [X21+1520]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xDFB000
	017 Move X0, [X0+1520]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3122], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move W2, W31
	029 Move X3, X31
	030 Call Decimal.Round, X0, X1
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X2, X31
	036 Move X30, [X31+48]
	037 Call Decimal.ToUInt16, X0
	038 Return X0

Method: System.UInt16 ToUInt16(System.String value, System.IFormatProvider provider)

Disassembly:
	0x03321178 LDR X8, [X0]
	0x0332117C MOV X20, X0
	0x03321180 LDRH W9, [X8 + 0x12E]
	0x03321184 CBZ X9, 0x33211A8
	0x03321188 LDR X10, [X8 + 0xB0]
	0x0332118C ADD X10, X10, 0x8

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {8}
	003 Move X2, X1
	004 Move W1, 7
	005 Move X3, X31
	006 Call UInt16.Parse, X0, X1, X2
	007 Return X0
	008 Return X0

Method: System.Int32 ToInt32(System.Object value)

Disassembly:
	0x03321190 LDUR X11, [X10 - 0x8]
	0x03321194 CMP X11, X21
	0x03321198 B.EQ 0x33211D0
	0x0332119C SUBS X9, X9, 0x1
	0x033211A0 ADD X10, X10, 0x10
	0x033211A4 B.NE 0x3321190
	0x033211A8 MOVZ W2, 0xA
	0x033211AC MOV X0, X20
	0x033211B0 MOV X1, X21
	0x033211B4 BL 0x1C5C788
	0x033211B8 B 0x33211E0
	0x033211BC LDP X20, X19, [X31 + 0x20]
	0x033211C0 LDP X22, X21, [X31 + 0x10]
	0x033211C4 MOV X0, X31
	0x033211C8 LDR X30, [X31], #0x30
	0x033211CC RET
	0x033211D0 LDR W9, [X10]
	0x033211D4 ADD W9, W9, 0xA
	0x033211D8 ADD X8, X8, W9, 0x4, SXTW
	0x033211DC ADD X0, X8, 0x138
	0x033211E0 LDP X3, X2, [X0]
	0x033211E4 MOV X0, X20
	0x033211E8 MOV X1, X19
	0x033211EC LDP X20, X19, [X31 + 0x20]
	0x033211F0 LDP X22, X21, [X31 + 0x10]
	0x033211F4 LDR X30, [X31], #0x30
	0x033211F8 BR X3
	0x033211FC MOV X0, X22
	0x03321200 MOV X1, X20
	0x03321204 BL 0x1C171E0
	0x03321208 MOV X0, X22
	0x0332120C MOV X1, X21
	0x03321210 BL 0x1C171E0
	0x03321214 STR X30, [X31 - 0x20]!
	0x03321218 STP X20, X19, [X31 + 0x10]
	0x0332121C ADRP X20, 0x10BB000
	0x03321220 LDRB W8, [X20 + 0xC4D]
	0x03321224 MOV W19, W0
	0x03321228 TBNZ X8, 0x0, 0x3321240
	0x0332122C ADRP X0, 0xDDB000
	0x03321230 LDR X0, [X0 + 0x9E8]
	0x03321234 BL 0x1C16CF4
	0x03321238 MOVZ W8, 0x1
	0x0332123C STRB W8, [X20 + 0xC4D]
	0x03321240 TBNZ X19, 0x7, 0x3321254
	0x03321244 AND X0, X19, 0xFF
	0x03321248 LDP X20, X19, [X31 + 0x10]
	0x0332124C LDR X30, [X31], #0x20
	0x03321250 RET
	0x03321254 ADRP X8, 0xDDB000
	0x03321258 LDR X8, [X8 + 0x9E8]
	0x0332125C LDR X0, [X8]
	0x03321260 BL 0x19903D0
	0x03321264 BL 0x331E1F4
	0x03321268 STR X30, [X31 - 0x20]!
	0x0332126C STP X20, X19, [X31 + 0x10]
	0x03321270 ADRP X20, 0x10BB000
	0x03321274 LDRB W8, [X20 + 0xC4E]
	0x03321278 MOV W19, W0
	0x0332127C TBNZ X8, 0x0, 0x3321294
	0x03321280 ADRP X0, 0xDDB000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10BC000
	006 Move W8, [X19+3123]
	007 Move X21, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE03000
	013 Move X0, [X0+3600]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3123], W8
	017 Compare X21, 0
	018 JumpIfEqual {48}
	019 Move X20, 0xE03000
	020 Move X20, [X20+3600]
	021 Move X0, X21
	022 Move X19, [X20]
	023 Move X1, X19
	024 Call 0x1C17E00
	025 Compare X0, 0
	026 JumpIfEqual {67}
	027 Move X20, [X20]
	028 Move X0, X21
	029 Move X1, X20
	030 Call 0x1C17E00
	031 Compare X0, 0
	032 JumpIfEqual {70}
	033 Move X8, [X0]
	034 Move X19, X0
	035 NotImplemented "Instruction LDRH not yet implemented."
	036 Compare X9, 0
	037 JumpIfEqual {44}
	038 Move X10, [X8+176]
	039 Add X10, X10, 8
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Subtract X9, X9, 1
	043 Add X10, X10, 16
	044 Move W2, 7
	045 Move X0, X19
	046 Move X1, X20
	047 Call 0x1C5D788
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move W0, W31
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Return X0
	054 Move W9, [X10]
	055 Add W9, W9, 7
	056 Add X8, X8, W9
	057 Add X0, X8, 312
	058 Move X3, [X0]
	059 Move X2, [X0+8]
	060 Move X0, X19
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X1, X31
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 CallNoReturn X3
	067 Move X0, X21
	068 Move X1, X19
	069 Call 0x1C181E0
	070 Move X0, X21
	071 Move X1, X20
	072 Call 0x1C181E0

Method: System.Int32 ToInt32(System.Object value, System.IFormatProvider provider)

Disassembly:
	0x03321284 LDR X0, [X0 + 0x9E8]
	0x03321288 BL 0x1C16CF4
	0x0332128C MOVZ W8, 0x1
	0x03321290 STRB W8, [X20 + 0xC4E]
	0x03321294 TBNZ X19, 0xF, 0x33212A8
	0x03321298 AND X0, X19, 0xFFFF
	0x0332129C LDP X20, X19, [X31 + 0x10]
	0x033212A0 LDR X30, [X31], #0x20
	0x033212A4 RET
	0x033212A8 ADRP X8, 0xDDB000
	0x033212AC LDR X8, [X8 + 0x9E8]
	0x033212B0 LDR X0, [X8]
	0x033212B4 BL 0x19903D0
	0x033212B8 BL 0x331E1F4
	0x033212BC AND X0, X0, 0xFFFF
	0x033212C0 RET
	0x033212C4 STR X30, [X31 - 0x20]!
	0x033212C8 STP X20, X19, [X31 + 0x10]
	0x033212CC ADRP X20, 0x10BB000
	0x033212D0 LDRB W8, [X20 + 0xC4F]
	0x033212D4 MOV W19, W0
	0x033212D8 TBNZ X8, 0x0, 0x33212F0
	0x033212DC ADRP X0, 0xDDB000
	0x033212E0 LDR X0, [X0 + 0x9E8]
	0x033212E4 BL 0x1C16CF4
	0x033212E8 MOVZ W8, 0x1
	0x033212EC STRB W8, [X20 + 0xC4F]
	0x033212F0 TBNZ X19, 0x1F, 0x3321304
	0x033212F4 MOV W0, W19
	0x033212F8 LDP X20, X19, [X31 + 0x10]
	0x033212FC LDR X30, [X31], #0x20
	0x03321300 RET
	0x03321304 ADRP X8, 0xDDB000
	0x03321308 LDR X8, [X8 + 0x9E8]
	0x0332130C LDR X0, [X8]
	0x03321310 BL 0x19903D0
	0x03321314 BL 0x331E1F4
	0x03321318 MOV W0, W0
	0x0332131C RET
	0x03321320 STR X30, [X31 - 0x20]!
	0x03321324 STP X20, X19, [X31 + 0x10]
	0x03321328 ADRP X20, 0x10BB000
	0x0332132C LDRB W8, [X20 + 0xC50]
	0x03321330 MOV X19, X0
	0x03321334 TBNZ X8, 0x0, 0x332134C
	0x03321338 ADRP X0, 0xDDB000
	0x0332133C LDR X0, [X0 + 0x9E8]
	0x03321340 BL 0x1C16CF4
	0x03321344 MOVZ W8, 0x1
	0x03321348 STRB W8, [X20 + 0xC50]
	0x0332134C TBNZ X19, 0x0, 0x3321360
	0x03321350 MOV X0, X19
	0x03321354 LDP X20, X19, [X31 + 0x10]
	0x03321358 LDR X30, [X31], #0x20
	0x0332135C RET
	0x03321360 ADRP X8, 0xDDB000
	0x03321364 LDR X8, [X8 + 0x9E8]
	0x03321368 LDR X0, [X8]
	0x0332136C BL 0x19903D0
	0x03321370 BL 0x331E1F4
	0x03321374 STR D8, [X31 - 0x20]!
	0x03321378 STR X30, [X31 + 0x8]
	0x0332137C STP X20, X19, [X31 + 0x10]
	0x03321380 ADRP X19, 0x10BB000
	0x03321384 ADRP X20, 0xDDB000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x10BC000
	007 Move W8, [X20+3124]
	008 Move X19, X1
	009 Move X22, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE03000
	015 Move X0, [X0+3600]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3124], W8
	019 Compare X22, 0
	020 JumpIfEqual {50}
	021 Move X21, 0xE03000
	022 Move X21, [X21+3600]
	023 Move X0, X22
	024 Move X20, [X21]
	025 Move X1, X20
	026 Call 0x1C17E00
	027 Compare X0, 0
	028 JumpIfEqual {71}
	029 Move X21, [X21]
	030 Move X0, X22
	031 Move X1, X21
	032 Call 0x1C17E00
	033 Compare X0, 0
	034 JumpIfEqual {74}
	035 Move X8, [X0]
	036 Move X20, X0
	037 NotImplemented "Instruction LDRH not yet implemented."
	038 Compare X9, 0
	039 JumpIfEqual {46}
	040 Move X10, [X8+176]
	041 Add X10, X10, 8
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Subtract X9, X9, 1
	045 Add X10, X10, 16
	046 Move W2, 7
	047 Move X0, X20
	048 Move X1, X21
	049 Call 0x1C5D788
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move W0, W31
	055 Move X30, [X31+48]
	056 Return X0
	057 Move W9, [X10]
	058 Add W9, W9, 7
	059 Add X8, X8, W9
	060 Add X0, X8, 312
	061 Move X3, [X0]
	062 Move X2, [X0+8]
	063 Move X0, X20
	064 Move X1, X19
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X22, [X31+16]
	068 Move X21, [X31+24]
	069 Move X30, [X31+48]
	070 CallNoReturn X3
	071 Move X0, X22
	072 Move X1, X20
	073 Call 0x1C181E0
	074 Move X0, X22
	075 Move X1, X21
	076 Call 0x1C181E0

Method: System.Int32 ToInt32(System.Boolean value)

Disassembly:
	0x0331930C ADD W9, W9, 0xE
	0x03319310 ADD X8, X8, W9, 0x4, SXTW

ISIL:
	001 And W0, W0, 1
	002 Return X0

Method: System.Int32 ToInt32(System.Char value)

Disassembly:
	0x0331C284 LDR X0, [X0 + 0x618]
	0x0331C288 BL 0x1C16CF4

ISIL:
	001 And W0, W0, 0xFFFF
	002 Return X0

Method: System.Int32 ToInt32(System.Byte value)

Disassembly:
	0x0331B194 ADRP X0, 0xDE1000
	0x0331B198 LDR X0, [X0 + 0x9E8]

ISIL:
	001 And W0, W0, 255
	002 Return X0

Method: System.Int32 ToInt32(System.Int16 value)

Disassembly:
	0x03321388 LDRB W8, [X19 + 0xC51]
	0x0332138C LDR X20, [X20 + 0x9E8]

ISIL:
	001 NotImplemented "Instruction SXTH not yet implemented."
	002 Return X0

Method: System.Int32 ToInt32(System.UInt16 value)

Disassembly:
	0x03321390 MOV V8.16B, V0.16B
	0x03321394 TBNZ X8, 0x0, 0x33213AC

ISIL:
	001 And W0, W0, 0xFFFF
	002 Return X0

Method: System.Int32 ToInt32(System.UInt32 value)

Disassembly:
	0x03321398 ADRP X0, 0xDDB000
	0x0332139C LDR X0, [X0 + 0x9E8]
	0x033213A0 BL 0x1C16CF4
	0x033213A4 MOVZ W8, 0x1
	0x033213A8 STRB W8, [X19 + 0xC51]
	0x033213AC LDR X0, [X20]
	0x033213B0 LDR W8, [X0 + 0xE0]
	0x033213B4 CBNZ W8, 0x33213BC
	0x033213B8 BL 0x1C16DFC
	0x033213BC LDP X20, X19, [X31 + 0x10]
	0x033213C0 LDR X30, [X31 + 0x8]
	0x033213C4 FCVT S0, S8
	0x033213C8 LDR V8, [X31], #0x20
	0x033213CC B 0x33213D0
	0x033213D0 SUB X31, X31, 0x30
	0x033213D4 STR D8, [X31 + 0x10]
	0x033213D8 STR X30, [X31 + 0x18]
	0x033213DC STP X20, X19, [X31 + 0x20]
	0x033213E0 ADRP X19, 0x10BB000
	0x033213E4 ADRP X20, 0xDD2000
	0x033213E8 LDRB W8, [X19 + 0xC52]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BC000
	005 Move W8, [X20+3125]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDC000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3125], W8
	016 Move TEMP, X19
	017 And TEMP, TEMP, -2147483648
	018 Compare TEMP, -2147483648
	019 JumpIfEqual {25}
	020 Move W0, W19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0
	025 Move X8, 0xDDC000
	026 Move X8, [X8+2536]
	027 Move X0, [X8]
	028 Call 0x19913D0
	029 Call Convert.ThrowInt32OverflowException

Method: System.Int32 ToInt32(System.Int64 value)

Disassembly:
	0x033213EC LDR X20, [X20 + 0x5A8]
	0x033213F0 MOV V8.16B, V0.16B
	0x033213F4 TBNZ X8, 0x0, 0x3321418
	0x033213F8 ADRP X0, 0xE07000
	0x033213FC LDR X0, [X0 + 0x230]
	0x03321400 BL 0x1C16CF4
	0x03321404 ADRP X0, 0xDD2000
	0x03321408 LDR X0, [X0 + 0x5A8]
	0x0332140C BL 0x1C16CF4
	0x03321410 MOVZ W8, 0x1
	0x03321414 STRB W8, [X19 + 0xC52]
	0x03321418 LDR X0, [X20]
	0x0332141C LDR W8, [X0 + 0xE0]
	0x03321420 CBNZ W8, 0x3321428
	0x03321424 BL 0x1C16DFC
	0x03321428 ADD X0, X31, 0x8
	0x0332142C MOV V0.16B, V8.16B
	0x03321430 BL 0x3EB1C00
	0x03321434 FCMP D8, 0x0
	0x03321438 B.GE 0x3321454
	0x0332143C FMOV D1, -0.5
	0x03321440 FCMP D0, D1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BC000
	005 Move W8, [X20+3126]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDC000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3126], W8
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move X8, 0xDDC000
	023 Move X8, [X8+2536]
	024 Move X0, [X8]
	025 Call 0x19913D0
	026 Call Convert.ThrowInt32OverflowException

Method: System.Int32 ToInt32(System.UInt64 value)

Disassembly:
	0x03321444 B.NE 0x332147C
	0x03321448 LDR V0, [X31 + 0x8]
	0x0332144C FMOV D1, -1
	0x03321450 B 0x3321468
	0x03321454 FMOV D1, 0.5
	0x03321458 FCMP D0, D1
	0x0332145C B.NE 0x3321488
	0x03321460 LDR V0, [X31 + 0x8]
	0x03321464 FMOV D1, 1
	0x03321468 FCVTZS X8, D0
	0x0332146C FADD D1, D0, D1
	0x03321470 ANDS X31, X8, 0x1
	0x03321474 FCSEL D0, D0, D1, EQ
	0x03321478 B 0x3321490
	0x0332147C FADD D0, D8, D1
	0x03321480 FRINTP D0, D0
	0x03321484 B 0x3321490
	0x03321488 FADD D0, D8, D1
	0x0332148C FRINTM D0, D0
	0x03321490 MOVZ X8, 0x43F00000
	0x03321494 FMOV D1, X8
	0x03321498 FCMP D0, D1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BC000
	005 Move W8, [X20+3127]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDC000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3127], W8
	016 Move X8, X19
	017 ShiftRight X8, 31
	018 And X8, X8, 0x7FFFFFFF
	019 Compare X8, 0
	020 JumpIfNotEqual {26}
	021 Move W0, W19
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Return X0
	026 Move X8, 0xDDC000
	027 Move X8, [X8+2536]
	028 Move X0, [X8]
	029 Call 0x19913D0
	030 Call Convert.ThrowInt32OverflowException

Method: System.Int32 ToInt32(System.Single value)

Disassembly:
	0x0332149C B.GT 0x33214B8
	0x033214A0 LDP X20, X19, [X31 + 0x20]
	0x033214A4 LDR X30, [X31 + 0x18]
	0x033214A8 LDR V8, [X31 + 0x10]
	0x033214AC FCVTZU X0, D0
	0x033214B0 ADD X31, X31, 0x30
	0x033214B4 RET
	0x033214B8 BL 0x1C16F30
	0x033214BC ADRP X8, 0xE07000
	0x033214C0 LDR X8, [X8 + 0x230]
	0x033214C4 LDR X1, [X8]
	0x033214C8 BL 0x1C16DEC
	0x033214CC STR X30, [X31 - 0x30]!
	0x033214D0 STP X22, X21, [X31 + 0x10]
	0x033214D4 STP X20, X19, [X31 + 0x20]
	0x033214D8 ADRP X22, 0x10BB000
	0x033214DC ADRP X21, 0xDFA000
	0x033214E0 LDRB W8, [X22 + 0xC53]
	0x033214E4 LDR X21, [X21 + 0x5F0]
	0x033214E8 MOV X19, X1
	0x033214EC MOV X20, X0
	0x033214F0 TBNZ X8, 0x0, 0x3321508
	0x033214F4 ADRP X0, 0xDFA000

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10BC000
	006 Move X20, 0xDDC000
	007 Move W8, [X19+3128]
	008 Move X20, [X20+2536]
	009 Move V8, V0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDDC000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+3128], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+8]
	027 NotImplemented "Instruction FCVT not yet implemented."
	028 Move V8, [X31+32]
	029 Call Convert.ToInt32, V0
	030 Return X0

Method: System.Int32 ToInt32(System.Double value)

Disassembly:
	0x0331FFAC TBNZ X8, 0x0, 0x331FFC4
	0x0331FFB0 ADRP X0, 0xDDD000
	0x0331FFB4 LDR X0, [X0 + 0x9E8]
	0x0331FFB8 BL 0x1C16CF4
	0x0331FFBC MOVZ W8, 0x1
	0x0331FFC0 STRB W8, [X20 + 0xC2E]
	0x0331FFC4 CMP X19, 0x10000
	0x0331FFC8 B.CS 0x331FFDC
	0x0331FFCC MOV W0, W19
	0x0331FFD0 LDP X20, X19, [X31 + 0x10]
	0x0331FFD4 LDR X30, [X31], #0x20
	0x0331FFD8 RET
	0x0331FFDC ADRP X8, 0xDDD000
	0x0331FFE0 LDR X8, [X8 + 0x9E8]
	0x0331FFE4 LDR X0, [X8]
	0x0331FFE8 BL 0x19903D0
	0x0331FFEC BL 0x331E0C4
	0x0331FFF0 STR X30, [X31 - 0x20]!
	0x0331FFF4 STP X20, X19, [X31 + 0x10]
	0x0331FFF8 ADRP X20, 0x10BD000
	0x0331FFFC LDRB W8, [X20 + 0xC2F]
	0x03320000 MOV X19, X0
	0x03320004 TBNZ X8, 0x0, 0x332001C
	0x03320008 ADRP X0, 0xDDC000
	0x0332000C LDR X0, [X0 + 0x9E8]
	0x03320010 BL 0x1C16CF4
	0x03320014 MOVZ W8, 0x1
	0x03320018 STRB W8, [X20 + 0xC2F]
	0x0332001C CMP X19, 0x10000
	0x03320020 B.CS 0x3320034
	0x03320024 MOV W0, W19
	0x03320028 LDP X20, X19, [X31 + 0x10]
	0x0332002C LDR X30, [X31], #0x20
	0x03320030 RET
	0x03320034 ADRP X8, 0xDDC000
	0x03320038 LDR X8, [X8 + 0x9E8]
	0x0332003C LDR X0, [X8]
	0x03320040 BL 0x19903D0
	0x03320044 BL 0x331E0C4
	0x03320048 STR D8, [X31 - 0x20]!
	0x0332004C STR X30, [X31 + 0x8]
	0x03320050 STP X20, X19, [X31 + 0x10]
	0x03320054 ADRP X19, 0x10BC000
	0x03320058 ADRP X20, 0xDDC000
	0x0332005C LDRB W8, [X19 + 0xC30]
	0x03320060 LDR X20, [X20 + 0x9E8]
	0x03320064 MOV V8.16B, V0.16B
	0x03320068 TBNZ X8, 0x0, 0x3320080
	0x0332006C ADRP X0, 0xDDC000
	0x03320070 LDR X0, [X0 + 0x9E8]
	0x03320074 BL 0x1C16CF4
	0x03320078 MOVZ W8, 0x1
	0x0332007C STRB W8, [X19 + 0xC30]
	0x03320080 LDR X0, [X20]
	0x03320084 LDR W8, [X0 + 0xE0]
	0x03320088 CBNZ W8, 0x3320090
	0x0332008C BL 0x1C16DFC
	0x03320090 LDP X20, X19, [X31 + 0x10]
	0x03320094 LDR X30, [X31 + 0x8]
	0x03320098 FCVT S0, S8
	0x0332009C LDR V8, [X31], #0x20
	0x033200A0 B 0x33200A4
	0x033200A4 STR D8, [X31 - 0x20]!
	0x033200A8 STR X30, [X31 + 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 Move X8, -42139648
	005 Move V1, [X8+640]
	006 NotImplemented "Instruction FCMP not yet implemented."
	007 Move X9, 0x7FF00000
	008 Move D1, X9
	009 NotImplemented "Instruction FCVTZS not yet implemented."
	010 Move W10, 0x80000000
	011 NotImplemented "Instruction FCMP not yet implemented."
	012 NotImplemented "Instruction CSEL not yet implemented."
	013 NotImplemented "Instruction SCVTF not yet implemented."
	014 Subtract D0, D0, D1
	015 Move D1, -0.5
	016 NotImplemented "Instruction FCMP not yet implemented."
	017 Move TEMP, X0
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfNotEqual {44}
	021 Move D1, -0.5
	022 NotImplemented "Instruction FCMP not yet implemented."
	023 Subtract W0, W0, 1
	024 Move X8, -42147840
	025 Move V1, [X8+3512]
	026 NotImplemented "Instruction FCMP not yet implemented."
	027 Move X9, 0x7FF00000
	028 Move D1, X9
	029 NotImplemented "Instruction FCVTZS not yet implemented."
	030 Move W10, 0x80000000
	031 NotImplemented "Instruction FCMP not yet implemented."
	032 NotImplemented "Instruction CSEL not yet implemented."
	033 NotImplemented "Instruction SCVTF not yet implemented."
	034 Subtract D0, D0, D1
	035 Move D1, 0.5
	036 NotImplemented "Instruction FCMP not yet implemented."
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {44}
	041 Move D1, 0.5
	042 NotImplemented "Instruction FCMP not yet implemented."
	043 Add W0, W0, 1
	044 Move X30, [X31+16]
	045 Move X19, [X31+24]
	046 Return X0
	047 Move X0, 0xDD4000
	048 Move X0, [X0+2136]
	049 Call 0x1C17D08
	050 Call 0x1C17F10
	051 Move X19, X0
	052 Move X0, 0xE09000
	053 Move X0, [X0+464]
	054 Call 0x1C17D08
	055 Move X1, X0
	056 Move X0, X19
	057 Move X2, X31
	058 Call OverflowException..ctor, X0, X1
	059 Move X0, 0xE09000
	060 Move X0, [X0+536]
	061 Call 0x1C17D08
	062 Move X1, X0
	063 Move X0, X19
	064 Call 0x1C17DEC

Method: System.Int32 ToInt32(System.Decimal value)

Disassembly:
	0x033214F8 LDR X0, [X0 + 0x5F0]
	0x033214FC BL 0x1C16CF4
	0x03321500 MOVZ W8, 0x1
	0x03321504 STRB W8, [X22 + 0xC53]
	0x03321508 LDR X0, [X21]
	0x0332150C LDR W8, [X0 + 0xE0]
	0x03321510 CBNZ W8, 0x3321518
	0x03321514 BL 0x1C16DFC
	0x03321518 MOV X0, X20
	0x0332151C MOV X1, X19
	0x03321520 MOV W2, W31
	0x03321524 MOV X3, X31
	0x03321528 BL 0x33D7A90
	0x0332152C LDP X20, X19, [X31 + 0x20]
	0x03321530 LDP X22, X21, [X31 + 0x10]
	0x03321534 MOV X2, X31
	0x03321538 LDR X30, [X31], #0x30
	0x0332153C B 0x33D8BA0
	0x03321540 CBZ X0, 0x3321554
	0x03321544 MOV X2, X1
	0x03321548 MOVZ W1, 0x7
	0x0332154C MOV X3, X31
	0x03321550 B 0x339AE24
	0x03321554 RET
	0x03321558 STP X30, X21, [X31 - 0x20]!
	0x0332155C STP X20, X19, [X31 + 0x10]
	0x03321560 ADRP X19, 0x10BB000
	0x03321564 LDRB W8, [X19 + 0xC54]
	0x03321568 MOV X21, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x10BC000
	007 Move X21, 0xDFB000
	008 Move W8, [X22+3129]
	009 Move X21, [X21+1520]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xDFB000
	017 Move X0, [X0+1520]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3129], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move W2, W31
	029 Move X3, X31
	030 Call Decimal.Round, X0, X1
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X2, X31
	036 Move X30, [X31+48]
	037 Call Decimal.ToInt32, X0
	038 Return X0

Method: System.Int32 ToInt32(System.String value)

Disassembly:
	0x0332156C TBNZ X8, 0x0, 0x3321584
	0x03321570 ADRP X0, 0xE02000
	0x03321574 LDR X0, [X0 + 0xE10]
	0x03321578 BL 0x1C16CF4
	0x0332157C MOVZ W8, 0x1
	0x03321580 STRB W8, [X19 + 0xC54]
	0x03321584 CBZ X21, 0x33215FC
	0x03321588 ADRP X20, 0xE02000
	0x0332158C LDR X20, [X20 + 0xE10]
	0x03321590 MOV X0, X21
	0x03321594 LDR X19, [X20]
	0x03321598 MOV X1, X19
	0x0332159C BL 0x1C16E00
	0x033215A0 CBZ X0, 0x3321634
	0x033215A4 LDR X20, [X20]
	0x033215A8 MOV X0, X21
	0x033215AC MOV X1, X20
	0x033215B0 BL 0x1C16E00
	0x033215B4 CBZ X0, 0x3321640
	0x033215B8 LDR X8, [X0]
	0x033215BC MOV X19, X0
	0x033215C0 LDRH W9, [X8 + 0x12E]
	0x033215C4 CBZ X9, 0x33215E8
	0x033215C8 LDR X10, [X8 + 0xB0]
	0x033215CC ADD X10, X10, 0x8
	0x033215D0 LDUR X11, [X10 - 0x8]
	0x033215D4 CMP X11, X20
	0x033215D8 B.EQ 0x332160C
	0x033215DC SUBS X9, X9, 0x1
	0x033215E0 ADD X10, X10, 0x10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BC000
	005 Move W8, [X20+3130]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDD5000
	012 Move X0, [X0+3144]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3130], W8
	016 Compare X19, 0
	017 JumpIfEqual {35}
	018 Move X8, 0xDD5000
	019 Move X8, [X8+3144]
	020 Move X0, [X8]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X31
	026 Call CultureInfo.get_CurrentCulture
	027 Move X1, X0
	028 Move X0, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X2, X31
	032 Move X30, [X31+32]
	033 Call Int32.Parse, X0, X1
	034 Return X0
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move W0, W31
	038 Move X30, [X31+32]
	039 Return X0

Method: System.Int32 ToInt32(System.String value, System.IFormatProvider provider)

Disassembly:
	0x033215E4 B.NE 0x33215D0
	0x033215E8 MOVZ W2, 0xB
	0x033215EC MOV X0, X19
	0x033215F0 MOV X1, X20
	0x033215F4 BL 0x1C5C788
	0x033215F8 B 0x332161C

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {8}
	003 Move X2, X1
	004 Move W1, 7
	005 Move X3, X31
	006 Call Int32.Parse, X0, X1, X2
	007 Return X0
	008 Return X0

Method: System.UInt32 ToUInt32(System.Object value)

Disassembly:
	0x033215FC LDP X20, X19, [X31 + 0x10]
	0x03321600 FMOV S0, W31
	0x03321604 LDP X30, X21, [X31], #0x20
	0x03321608 RET
	0x0332160C LDR W9, [X10]
	0x03321610 ADD W9, W9, 0xB
	0x03321614 ADD X8, X8, W9, 0x4, SXTW
	0x03321618 ADD X0, X8, 0x138
	0x0332161C LDP X3, X2, [X0]
	0x03321620 MOV X0, X19
	0x03321624 LDP X20, X19, [X31 + 0x10]
	0x03321628 MOV X1, X31
	0x0332162C LDP X30, X21, [X31], #0x20
	0x03321630 BR X3
	0x03321634 MOV X0, X21
	0x03321638 MOV X1, X19
	0x0332163C BL 0x1C171E0
	0x03321640 MOV X0, X21
	0x03321644 MOV X1, X20
	0x03321648 BL 0x1C171E0
	0x0332164C STR X30, [X31 - 0x30]!
	0x03321650 STP X22, X21, [X31 + 0x10]
	0x03321654 STP X20, X19, [X31 + 0x20]
	0x03321658 ADRP X20, 0x10BB000
	0x0332165C LDRB W8, [X20 + 0xC55]
	0x03321660 MOV X19, X1
	0x03321664 MOV X22, X0
	0x03321668 TBNZ X8, 0x0, 0x3321680
	0x0332166C ADRP X0, 0xE02000
	0x03321670 LDR X0, [X0 + 0xE10]
	0x03321674 BL 0x1C16CF4
	0x03321678 MOVZ W8, 0x1
	0x0332167C STRB W8, [X20 + 0xC55]
	0x03321680 CBZ X22, 0x33216F8
	0x03321684 ADRP X21, 0xE02000
	0x03321688 LDR X21, [X21 + 0xE10]
	0x0332168C MOV X0, X22
	0x03321690 LDR X20, [X21]
	0x03321694 MOV X1, X20
	0x03321698 BL 0x1C16E00
	0x0332169C CBZ X0, 0x3321738
	0x033216A0 LDR X21, [X21]
	0x033216A4 MOV X0, X22
	0x033216A8 MOV X1, X21
	0x033216AC BL 0x1C16E00
	0x033216B0 CBZ X0, 0x3321744
	0x033216B4 LDR X8, [X0]
	0x033216B8 MOV X20, X0
	0x033216BC LDRH W9, [X8 + 0x12E]
	0x033216C0 CBZ X9, 0x33216E4
	0x033216C4 LDR X10, [X8 + 0xB0]
	0x033216C8 ADD X10, X10, 0x8
	0x033216CC LDUR X11, [X10 - 0x8]
	0x033216D0 CMP X11, X21
	0x033216D4 B.EQ 0x332170C
	0x033216D8 SUBS X9, X9, 0x1
	0x033216DC ADD X10, X10, 0x10
	0x033216E0 B.NE 0x33216CC
	0x033216E4 MOVZ W2, 0xB
	0x033216E8 MOV X0, X20
	0x033216EC MOV X1, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10BC000
	006 Move W8, [X19+3131]
	007 Move X21, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE03000
	013 Move X0, [X0+3600]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3131], W8
	017 Compare X21, 0
	018 JumpIfEqual {48}
	019 Move X20, 0xE03000
	020 Move X20, [X20+3600]
	021 Move X0, X21
	022 Move X19, [X20]
	023 Move X1, X19
	024 Call 0x1C17E00
	025 Compare X0, 0
	026 JumpIfEqual {67}
	027 Move X20, [X20]
	028 Move X0, X21
	029 Move X1, X20
	030 Call 0x1C17E00
	031 Compare X0, 0
	032 JumpIfEqual {70}
	033 Move X8, [X0]
	034 Move X19, X0
	035 NotImplemented "Instruction LDRH not yet implemented."
	036 Compare X9, 0
	037 JumpIfEqual {44}
	038 Move X10, [X8+176]
	039 Add X10, X10, 8
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Subtract X9, X9, 1
	043 Add X10, X10, 16
	044 Move W2, 8
	045 Move X0, X19
	046 Move X1, X20
	047 Call 0x1C5D788
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move W0, W31
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Return X0
	054 Move W9, [X10]
	055 Add W9, W9, 8
	056 Add X8, X8, W9
	057 Add X0, X8, 312
	058 Move X3, [X0]
	059 Move X2, [X0+8]
	060 Move X0, X19
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X1, X31
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 CallNoReturn X3
	067 Move X0, X21
	068 Move X1, X19
	069 Call 0x1C181E0
	070 Move X0, X21
	071 Move X1, X20
	072 Call 0x1C181E0

Method: System.UInt32 ToUInt32(System.Object value, System.IFormatProvider provider)

Disassembly:
	0x033216F0 BL 0x1C5C788
	0x033216F4 B 0x332171C
	0x033216F8 LDP X20, X19, [X31 + 0x20]
	0x033216FC LDP X22, X21, [X31 + 0x10]
	0x03321700 FMOV S0, W31
	0x03321704 LDR X30, [X31], #0x30
	0x03321708 RET
	0x0332170C LDR W9, [X10]
	0x03321710 ADD W9, W9, 0xB
	0x03321714 ADD X8, X8, W9, 0x4, SXTW
	0x03321718 ADD X0, X8, 0x138
	0x0332171C LDP X3, X2, [X0]
	0x03321720 MOV X0, X20
	0x03321724 MOV X1, X19
	0x03321728 LDP X20, X19, [X31 + 0x20]
	0x0332172C LDP X22, X21, [X31 + 0x10]
	0x03321730 LDR X30, [X31], #0x30
	0x03321734 BR X3
	0x03321738 MOV X0, X22
	0x0332173C MOV X1, X20
	0x03321740 BL 0x1C171E0
	0x03321744 MOV X0, X22
	0x03321748 MOV X1, X21
	0x0332174C BL 0x1C171E0
	0x03321750 SXTB W8, W0
	0x03321754 SCVTF S0, W8
	0x03321758 RET
	0x0332175C SXTH W8, W0
	0x03321760 SCVTF S0, W8
	0x03321764 RET
	0x03321768 AND W8, W0, 0xFFFF
	0x0332176C UCVTF S0, W8
	0x03321770 RET
	0x03321774 SCVTF S0, W0
	0x03321778 RET
	0x0332177C UCVTF S0, W0
	0x03321780 RET
	0x03321784 SCVTF S0, X0
	0x03321788 RET
	0x0332178C UCVTF D0, X0
	0x00000000 INVALID
	0x03321794 RET
	0x00000000 INVALID
	0x0332179C RET
	0x033217A0 STR X30, [X31 - 0x30]!
	0x033217A4 STP X22, X21, [X31 + 0x10]
	0x033217A8 STP X20, X19, [X31 + 0x20]
	0x033217AC ADRP X22, 0x10BB000
	0x033217B0 ADRP X21, 0xDFA000
	0x033217B4 LDRB W8, [X22 + 0xC56]
	0x033217B8 LDR X21, [X21 + 0x5F0]
	0x033217BC MOV X19, X1
	0x033217C0 MOV X20, X0
	0x033217C4 TBNZ X8, 0x0, 0x33217DC
	0x033217C8 ADRP X0, 0xDFA000
	0x033217CC LDR X0, [X0 + 0x5F0]
	0x033217D0 BL 0x1C16CF4
	0x033217D4 MOVZ W8, 0x1
	0x033217D8 STRB W8, [X22 + 0xC56]
	0x033217DC LDR X0, [X21]
	0x033217E0 LDR W8, [X0 + 0xE0]
	0x033217E4 CBNZ W8, 0x33217EC
	0x033217E8 BL 0x1C16DFC
	0x033217EC MOV X0, X20
	0x033217F0 MOV X1, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x10BC000
	007 Move W8, [X20+3132]
	008 Move X19, X1
	009 Move X22, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE03000
	015 Move X0, [X0+3600]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3132], W8
	019 Compare X22, 0
	020 JumpIfEqual {50}
	021 Move X21, 0xE03000
	022 Move X21, [X21+3600]
	023 Move X0, X22
	024 Move X20, [X21]
	025 Move X1, X20
	026 Call 0x1C17E00
	027 Compare X0, 0
	028 JumpIfEqual {71}
	029 Move X21, [X21]
	030 Move X0, X22
	031 Move X1, X21
	032 Call 0x1C17E00
	033 Compare X0, 0
	034 JumpIfEqual {74}
	035 Move X8, [X0]
	036 Move X20, X0
	037 NotImplemented "Instruction LDRH not yet implemented."
	038 Compare X9, 0
	039 JumpIfEqual {46}
	040 Move X10, [X8+176]
	041 Add X10, X10, 8
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Subtract X9, X9, 1
	045 Add X10, X10, 16
	046 Move W2, 8
	047 Move X0, X20
	048 Move X1, X21
	049 Call 0x1C5D788
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move W0, W31
	055 Move X30, [X31+48]
	056 Return X0
	057 Move W9, [X10]
	058 Add W9, W9, 8
	059 Add X8, X8, W9
	060 Add X0, X8, 312
	061 Move X3, [X0]
	062 Move X2, [X0+8]
	063 Move X0, X20
	064 Move X1, X19
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X22, [X31+16]
	068 Move X21, [X31+24]
	069 Move X30, [X31+48]
	070 CallNoReturn X3
	071 Move X0, X22
	072 Move X1, X20
	073 Call 0x1C181E0
	074 Move X0, X22
	075 Move X1, X21
	076 Call 0x1C181E0

Method: System.UInt32 ToUInt32(System.Boolean value)

Disassembly:
	0x03319370 BL 0x1C16D08
	0x03319374 BL 0x1C16F10

ISIL:
	001 And W0, W0, 1
	002 Return X0

Method: System.UInt32 ToUInt32(System.Char value)

Disassembly:
	0x0331C2E4 STR X30, [X31 - 0x20]!
	0x0331C2E8 STP X20, X19, [X31 + 0x10]

ISIL:
	001 And W0, W0, 0xFFFF
	002 Return X0

Method: System.UInt32 ToUInt32(System.SByte value)

Disassembly:
	0x033217F4 LDP X20, X19, [X31 + 0x20]
	0x033217F8 LDP X22, X21, [X31 + 0x10]
	0x033217FC MOV X2, X31
	0x03321800 LDR X30, [X31], #0x30
	0x03321804 B 0x33D907C
	0x03321808 STR X30, [X31 - 0x20]!
	0x0332180C STP X20, X19, [X31 + 0x10]
	0x03321810 ADRP X20, 0x10BB000
	0x03321814 LDRB W8, [X20 + 0xC57]
	0x03321818 MOV X19, X0
	0x0332181C TBNZ X8, 0x0, 0x3321834
	0x03321820 ADRP X0, 0xDD4000
	0x03321824 LDR X0, [X0 + 0xC48]
	0x03321828 BL 0x1C16CF4
	0x0332182C MOVZ W8, 0x1
	0x03321830 STRB W8, [X20 + 0xC57]
	0x03321834 CBZ X19, 0x3321870
	0x03321838 ADRP X8, 0xDD4000
	0x0332183C LDR X8, [X8 + 0xC48]
	0x03321840 LDR X0, [X8]
	0x03321844 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BC000
	005 Move W8, [X20+3133]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDC000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3133], W8
	016 Move TEMP, X19
	017 And TEMP, TEMP, 128
	018 Compare TEMP, 128
	019 JumpIfEqual {25}
	020 And W0, W19, 255
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0
	025 Move X8, 0xDDC000
	026 Move X8, [X8+2536]
	027 Move X0, [X8]
	028 Call 0x19913D0
	029 Call Convert.ThrowUInt32OverflowException

Method: System.UInt32 ToUInt32(System.Byte value)

Disassembly:
	0x0331B1F4 LDR X0, [X0 + 0x9E8]
	0x0331B1F8 BL 0x1C16CF4

ISIL:
	001 And W0, W0, 255
	002 Return X0

Method: System.UInt32 ToUInt32(System.Int16 value)

Disassembly:
	0x03321848 CBNZ W8, 0x3321850
	0x0332184C BL 0x1C16DFC
	0x03321850 MOV X0, X31
	0x03321854 BL 0x33387A0
	0x03321858 MOV X1, X0
	0x0332185C MOV X0, X19
	0x03321860 LDP X20, X19, [X31 + 0x10]
	0x03321864 MOV X2, X31
	0x03321868 LDR X30, [X31], #0x20
	0x0332186C B 0x33901B8
	0x03321870 LDP X20, X19, [X31 + 0x10]
	0x03321874 FMOV S0, W31
	0x03321878 LDR X30, [X31], #0x20
	0x0332187C RET
	0x03321880 CBZ X0, 0x3321894
	0x03321884 MOV X2, X1
	0x03321888 MOVZ W1, 0xE7
	0x0332188C MOV X3, X31
	0x03321890 B 0x339027C
	0x03321894 FMOV S0, W31
	0x03321898 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BC000
	005 Move W8, [X20+3134]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDC000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3134], W8
	016 Move TEMP, X19
	017 And TEMP, TEMP, 0x8000
	018 Compare TEMP, 0x8000
	019 JumpIfEqual {25}
	020 And W0, W19, 0xFFFF
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0
	025 Move X8, 0xDDC000
	026 Move X8, [X8+2536]
	027 Move X0, [X8]
	028 Call 0x19913D0
	029 Call Convert.ThrowUInt32OverflowException

Method: System.UInt32 ToUInt32(System.UInt16 value)

Disassembly:
	0x0332189C STP X30, X21, [X31 - 0x20]!
	0x033218A0 STP X20, X19, [X31 + 0x10]

ISIL:
	001 And W0, W0, 0xFFFF
	002 Return X0

Method: System.UInt32 ToUInt32(System.Int32 value)

Disassembly:
	0x033218A4 ADRP X19, 0x10BB000
	0x033218A8 LDRB W8, [X19 + 0xC58]
	0x033218AC MOV X21, X0
	0x033218B0 TBNZ X8, 0x0, 0x33218C8
	0x033218B4 ADRP X0, 0xE02000
	0x033218B8 LDR X0, [X0 + 0xE10]
	0x033218BC BL 0x1C16CF4
	0x033218C0 MOVZ W8, 0x1
	0x033218C4 STRB W8, [X19 + 0xC58]
	0x033218C8 CBZ X21, 0x3321940
	0x033218CC ADRP X20, 0xE02000
	0x033218D0 LDR X20, [X20 + 0xE10]
	0x033218D4 MOV X0, X21
	0x033218D8 LDR X19, [X20]
	0x033218DC MOV X1, X19
	0x033218E0 BL 0x1C16E00
	0x033218E4 CBZ X0, 0x3321978
	0x033218E8 LDR X20, [X20]
	0x033218EC MOV X0, X21
	0x033218F0 MOV X1, X20
	0x033218F4 BL 0x1C16E00

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BC000
	005 Move W8, [X20+3135]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDC000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3135], W8
	016 Move TEMP, X19
	017 And TEMP, TEMP, -2147483648
	018 Compare TEMP, -2147483648
	019 JumpIfEqual {25}
	020 Move W0, W19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0
	025 Move X8, 0xDDC000
	026 Move X8, [X8+2536]
	027 Move X0, [X8]
	028 Call 0x19913D0
	029 Call Convert.ThrowUInt32OverflowException

Method: System.UInt32 ToUInt32(System.Int64 value)

Disassembly:
	0x033218F8 CBZ X0, 0x3321984
	0x033218FC LDR X8, [X0]
	0x03321900 MOV X19, X0
	0x03321904 LDRH W9, [X8 + 0x12E]
	0x03321908 CBZ X9, 0x332192C
	0x0332190C LDR X10, [X8 + 0xB0]
	0x03321910 ADD X10, X10, 0x8
	0x03321914 LDUR X11, [X10 - 0x8]
	0x03321918 CMP X11, X20
	0x0332191C B.EQ 0x3321950
	0x03321920 SUBS X9, X9, 0x1
	0x03321924 ADD X10, X10, 0x10
	0x03321928 B.NE 0x3321914
	0x0332192C MOVZ W2, 0xC
	0x03321930 MOV X0, X19
	0x03321934 MOV X1, X20
	0x03321938 BL 0x1C5C788
	0x0332193C B 0x3321960
	0x03321940 LDP X20, X19, [X31 + 0x10]
	0x03321944 FMOV D0, X31
	0x03321948 LDP X30, X21, [X31], #0x20
	0x0332194C RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BC000
	005 Move W8, [X20+3136]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDC000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3136], W8
	016 Move X8, X19
	017 ShiftRight X8, 32
	018 And X8, X8, 0x7FFFFFFF
	019 Compare X8, 0
	020 JumpIfNotEqual {26}
	021 Move W0, W19
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Return X0
	026 Move X8, 0xDDC000
	027 Move X8, [X8+2536]
	028 Move X0, [X8]
	029 Call 0x19913D0
	030 Call Convert.ThrowUInt32OverflowException

Method: System.UInt32 ToUInt32(System.UInt64 value)

Disassembly:
	0x03321950 LDR W9, [X10]
	0x03321954 ADD W9, W9, 0xC
	0x03321958 ADD X8, X8, W9, 0x4, SXTW
	0x0332195C ADD X0, X8, 0x138
	0x03321960 LDP X3, X2, [X0]
	0x03321964 MOV X0, X19
	0x03321968 LDP X20, X19, [X31 + 0x10]
	0x0332196C MOV X1, X31
	0x03321970 LDP X30, X21, [X31], #0x20
	0x03321974 BR X3
	0x03321978 MOV X0, X21
	0x0332197C MOV X1, X19
	0x03321980 BL 0x1C171E0
	0x03321984 MOV X0, X21
	0x03321988 MOV X1, X20
	0x0332198C BL 0x1C171E0
	0x03321990 STR X30, [X31 - 0x30]!
	0x03321994 STP X22, X21, [X31 + 0x10]
	0x03321998 STP X20, X19, [X31 + 0x20]
	0x0332199C ADRP X20, 0x10BB000
	0x033219A0 LDRB W8, [X20 + 0xC59]
	0x033219A4 MOV X19, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BC000
	005 Move W8, [X20+3137]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDC000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3137], W8
	016 Move X8, X19
	017 ShiftRight X8, 32
	018 And X8, X8, 0x7FFFFFFF
	019 Compare X8, 0
	020 JumpIfNotEqual {26}
	021 Move W0, W19
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Return X0
	026 Move X8, 0xDDC000
	027 Move X8, [X8+2536]
	028 Move X0, [X8]
	029 Call 0x19913D0
	030 Call Convert.ThrowUInt32OverflowException

Method: System.UInt32 ToUInt32(System.Single value)

Disassembly:
	0x033219A8 MOV X22, X0
	0x033219AC TBNZ X8, 0x0, 0x33219C4
	0x033219B0 ADRP X0, 0xE02000
	0x033219B4 LDR X0, [X0 + 0xE10]
	0x033219B8 BL 0x1C16CF4
	0x033219BC MOVZ W8, 0x1
	0x033219C0 STRB W8, [X20 + 0xC59]
	0x033219C4 CBZ X22, 0x3321A3C
	0x033219C8 ADRP X21, 0xE02000
	0x033219CC LDR X21, [X21 + 0xE10]
	0x033219D0 MOV X0, X22
	0x033219D4 LDR X20, [X21]
	0x033219D8 MOV X1, X20
	0x033219DC BL 0x1C16E00
	0x033219E0 CBZ X0, 0x3321A7C
	0x033219E4 LDR X21, [X21]
	0x033219E8 MOV X0, X22
	0x033219EC MOV X1, X21
	0x033219F0 BL 0x1C16E00
	0x033219F4 CBZ X0, 0x3321A88
	0x033219F8 LDR X8, [X0]
	0x033219FC MOV X20, X0
	0x03321A00 LDRH W9, [X8 + 0x12E]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10BC000
	006 Move X20, 0xDDC000
	007 Move W8, [X19+3138]
	008 Move X20, [X20+2536]
	009 Move V8, V0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDDC000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+3138], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+8]
	027 NotImplemented "Instruction FCVT not yet implemented."
	028 Move V8, [X31+32]

Method: System.UInt32 ToUInt32(System.Double value)

Disassembly:
	0x03321A04 CBZ X9, 0x3321A28
	0x03321A08 LDR X10, [X8 + 0xB0]
	0x03321A0C ADD X10, X10, 0x8
	0x03321A10 LDUR X11, [X10 - 0x8]
	0x03321A14 CMP X11, X21
	0x03321A18 B.EQ 0x3321A50
	0x03321A1C SUBS X9, X9, 0x1
	0x03321A20 ADD X10, X10, 0x10
	0x03321A24 B.NE 0x3321A10
	0x03321A28 MOVZ W2, 0xC
	0x03321A2C MOV X0, X20
	0x03321A30 MOV X1, X21
	0x03321A34 BL 0x1C5C788
	0x03321A38 B 0x3321A60
	0x03321A3C LDP X20, X19, [X31 + 0x20]
	0x03321A40 LDP X22, X21, [X31 + 0x10]
	0x03321A44 FMOV D0, X31
	0x03321A48 LDR X30, [X31], #0x30
	0x03321A4C RET
	0x03321A50 LDR W9, [X10]
	0x03321A54 ADD W9, W9, 0xC
	0x03321A58 ADD X8, X8, W9, 0x4, SXTW
	0x03321A5C ADD X0, X8, 0x138
	0x03321A60 LDP X3, X2, [X0]
	0x03321A64 MOV X0, X20
	0x03321A68 MOV X1, X19
	0x03321A6C LDP X20, X19, [X31 + 0x20]
	0x03321A70 LDP X22, X21, [X31 + 0x10]
	0x03321A74 LDR X30, [X31], #0x30
	0x03321A78 BR X3
	0x03321A7C MOV X0, X22
	0x03321A80 MOV X1, X20
	0x03321A84 BL 0x1C171E0
	0x03321A88 MOV X0, X22
	0x03321A8C MOV X1, X21
	0x03321A90 BL 0x1C171E0
	0x03321A94 SXTB W8, W0
	0x03321A98 SCVTF D0, W8
	0x03321A9C RET
	0x03321AA0 SXTH W8, W0
	0x03321AA4 SCVTF D0, W8
	0x03321AA8 RET

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move D1, -0.5
	004 NotImplemented "Instruction FCMP not yet implemented."
	005 Move X8, -42151936
	006 Move V1, [X8+1792]
	007 NotImplemented "Instruction FCMP not yet implemented."
	008 NotImplemented "Instruction FCVTZS not yet implemented."
	009 NotImplemented "Instruction FCVTZU not yet implemented."
	010 NotImplemented "Instruction FCMP not yet implemented."
	011 NotImplemented "Instruction CSEL not yet implemented."
	012 NotImplemented "Instruction UCVTF not yet implemented."
	013 Subtract D0, D0, D1
	014 Move D1, 0.5
	015 NotImplemented "Instruction FCMP not yet implemented."
	016 Move TEMP, X0
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfNotEqual {23}
	020 Move D1, 0.5
	021 NotImplemented "Instruction FCMP not yet implemented."
	022 Add W0, W0, 1
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Return X0
	026 Move X0, 0xDD3000
	027 Move X0, [X0+2136]
	028 Call 0x1C17D08
	029 Call 0x1C17F10
	030 Move X19, X0
	031 Move X0, 0xE08000
	032 Move X0, [X0+480]
	033 Call 0x1C17D08
	034 Move X1, X0
	035 Move X0, X19
	036 Move X2, X31
	037 Call OverflowException..ctor, X0, X1
	038 Move X0, 0xE08000
	039 Move X0, [X0+544]
	040 Call 0x1C17D08
	041 Move X1, X0
	042 Move X0, X19
	043 Call 0x1C17DEC

Method: System.UInt32 ToUInt32(System.Decimal value)

Disassembly:
	0x03321AAC AND W8, W0, 0xFFFF
	0x03321AB0 UCVTF D0, W8
	0x03321AB4 RET
	0x03321AB8 SCVTF D0, W0
	0x03321ABC RET
	0x03321AC0 UCVTF D0, W0
	0x03321AC4 RET
	0x03321AC8 SCVTF D0, X0
	0x03321ACC RET
	0x03321AD0 UCVTF D0, X0
	0x03321AD4 RET
	0x03321AD8 FCVT S0, S0
	0x03321ADC RET
	0x03321AE0 STR X30, [X31 - 0x30]!
	0x03321AE4 STP X22, X21, [X31 + 0x10]
	0x03321AE8 STP X20, X19, [X31 + 0x20]
	0x03321AEC ADRP X22, 0x10BB000
	0x03321AF0 ADRP X21, 0xDFA000
	0x03321AF4 LDRB W8, [X22 + 0xC5A]
	0x03321AF8 LDR X21, [X21 + 0x5F0]
	0x03321AFC MOV X19, X1
	0x03321B00 MOV X20, X0
	0x03321B04 TBNZ X8, 0x0, 0x3321B1C
	0x03321B08 ADRP X0, 0xDFA000
	0x03321B0C LDR X0, [X0 + 0x5F0]
	0x03321B10 BL 0x1C16CF4
	0x03321B14 MOVZ W8, 0x1
	0x03321B18 STRB W8, [X22 + 0xC5A]
	0x03321B1C LDR X0, [X21]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x10BC000
	007 Move X21, 0xDFB000
	008 Move W8, [X22+3139]
	009 Move X21, [X21+1520]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xDFB000
	017 Move X0, [X0+1520]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3139], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move W2, W31
	029 Move X3, X31
	030 Call Decimal.Round, X0, X1
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X2, X31
	036 Move X30, [X31+48]
	037 Call Decimal.ToUInt32, X0
	038 Return X0

Method: System.UInt32 ToUInt32(System.String value, System.IFormatProvider provider)

Disassembly:
	0x03321B20 LDR W8, [X0 + 0xE0]
	0x03321B24 CBNZ W8, 0x3321B2C
	0x03321B28 BL 0x1C16DFC
	0x03321B2C MOV X0, X20
	0x03321B30 MOV X1, X19
	0x03321B34 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {8}
	003 Move X2, X1
	004 Move W1, 7
	005 Move X3, X31
	006 Call UInt32.Parse, X0, X1, X2
	007 Return X0
	008 Return X0

Method: System.Int64 ToInt64(System.Object value)

Disassembly:
	0x03321B38 LDP X22, X21, [X31 + 0x10]
	0x03321B3C MOV X2, X31
	0x03321B40 LDR X30, [X31], #0x30
	0x03321B44 B 0x33D90E0
	0x03321B48 CBZ X0, 0x3321B5C
	0x03321B4C MOV X2, X1
	0x03321B50 MOVZ W1, 0xE7
	0x03321B54 MOV X3, X31
	0x03321B58 B 0x3366654
	0x03321B5C FMOV D0, X31
	0x03321B60 RET
	0x03321B64 STR X30, [X31 - 0x30]!
	0x03321B68 STP X22, X21, [X31 + 0x10]
	0x03321B6C STP X20, X19, [X31 + 0x20]
	0x03321B70 ADRP X20, 0x10BB000
	0x03321B74 LDRB W8, [X20 + 0xC5B]
	0x03321B78 MOV X19, X1
	0x03321B7C MOV X22, X0
	0x03321B80 TBNZ X8, 0x0, 0x3321BA4
	0x03321B84 ADRP X0, 0xDFA000
	0x03321B88 LDR X0, [X0 + 0x5F0]
	0x03321B8C BL 0x1C16CF4
	0x03321B90 ADRP X0, 0xE02000
	0x03321B94 LDR X0, [X0 + 0xE10]
	0x03321B98 BL 0x1C16CF4
	0x03321B9C MOVZ W8, 0x1
	0x03321BA0 STRB W8, [X20 + 0xC5B]
	0x03321BA4 CBZ X22, 0x3321C1C
	0x03321BA8 ADRP X21, 0xE02000
	0x03321BAC LDR X21, [X21 + 0xE10]
	0x03321BB0 MOV X0, X22
	0x03321BB4 LDR X20, [X21]
	0x03321BB8 MOV X1, X20
	0x03321BBC BL 0x1C16E00
	0x03321BC0 CBZ X0, 0x3321C74
	0x03321BC4 LDR X21, [X21]
	0x03321BC8 MOV X0, X22
	0x03321BCC MOV X1, X21
	0x03321BD0 BL 0x1C16E00
	0x03321BD4 CBZ X0, 0x3321C80
	0x03321BD8 LDR X8, [X0]
	0x03321BDC MOV X20, X0
	0x03321BE0 LDRH W9, [X8 + 0x12E]
	0x03321BE4 CBZ X9, 0x3321C08
	0x03321BE8 LDR X10, [X8 + 0xB0]
	0x03321BEC ADD X10, X10, 0x8
	0x03321BF0 LDUR X11, [X10 - 0x8]
	0x03321BF4 CMP X11, X21
	0x03321BF8 B.EQ 0x3321C44
	0x03321BFC SUBS X9, X9, 0x1
	0x03321C00 ADD X10, X10, 0x10
	0x03321C04 B.NE 0x3321BF0
	0x03321C08 MOVZ W2, 0xD
	0x03321C0C MOV X0, X20
	0x03321C10 MOV X1, X21
	0x03321C14 BL 0x1C5C788
	0x03321C18 B 0x3321C54
	0x03321C1C ADRP X19, 0xDFA000
	0x03321C20 LDR X19, [X19 + 0x5F0]
	0x03321C24 LDR X0, [X19]
	0x03321C28 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10BC000
	006 Move W8, [X19+3140]
	007 Move X21, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE03000
	013 Move X0, [X0+3600]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3140], W8
	017 Compare X21, 0
	018 JumpIfEqual {48}
	019 Move X20, 0xE03000
	020 Move X20, [X20+3600]
	021 Move X0, X21
	022 Move X19, [X20]
	023 Move X1, X19
	024 Call 0x1C17E00
	025 Compare X0, 0
	026 JumpIfEqual {67}
	027 Move X20, [X20]
	028 Move X0, X21
	029 Move X1, X20
	030 Call 0x1C17E00
	031 Compare X0, 0
	032 JumpIfEqual {70}
	033 Move X8, [X0]
	034 Move X19, X0
	035 NotImplemented "Instruction LDRH not yet implemented."
	036 Compare X9, 0
	037 JumpIfEqual {44}
	038 Move X10, [X8+176]
	039 Add X10, X10, 8
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Subtract X9, X9, 1
	043 Add X10, X10, 16
	044 Move W2, 9
	045 Move X0, X19
	046 Move X1, X20
	047 Call 0x1C5D788
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X0, X31
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Return X0
	054 Move W9, [X10]
	055 Add W9, W9, 9
	056 Add X8, X8, W9
	057 Add X0, X8, 312
	058 Move X3, [X0]
	059 Move X2, [X0+8]
	060 Move X0, X19
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X1, X31
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 CallNoReturn X3
	067 Move X0, X21
	068 Move X1, X19
	069 Call 0x1C181E0
	070 Move X0, X21
	071 Move X1, X20
	072 Call 0x1C181E0

Method: System.Int64 ToInt64(System.Object value, System.IFormatProvider provider)

Disassembly:
	0x03321C2C CBNZ W8, 0x3321C38
	0x03321C30 BL 0x1C16DFC
	0x03321C34 LDR X0, [X19]
	0x03321C38 LDR X8, [X0 + 0xB8]
	0x03321C3C LDP X0, X1, [X8]
	0x03321C40 B 0x3321C64
	0x03321C44 LDR W9, [X10]
	0x03321C48 ADD W9, W9, 0xD
	0x03321C4C ADD X8, X8, W9, 0x4, SXTW
	0x03321C50 ADD X0, X8, 0x138
	0x03321C54 LDP X8, X2, [X0]
	0x03321C58 MOV X0, X20
	0x03321C5C MOV X1, X19
	0x03321C60 BLR X8
	0x03321C64 LDP X20, X19, [X31 + 0x20]
	0x03321C68 LDP X22, X21, [X31 + 0x10]
	0x03321C6C LDR X30, [X31], #0x30
	0x03321C70 RET
	0x03321C74 MOV X0, X22
	0x03321C78 MOV X1, X20
	0x03321C7C BL 0x1C171E0
	0x03321C80 MOV X0, X22
	0x03321C84 MOV X1, X21
	0x03321C88 BL 0x1C171E0
	0x03321C8C STP X30, X21, [X31 - 0x20]!
	0x03321C90 STP X20, X19, [X31 + 0x10]
	0x03321C94 ADRP X21, 0x10BB000
	0x03321C98 ADRP X20, 0xDFA000
	0x03321C9C LDRB W8, [X21 + 0xC5C]
	0x03321CA0 LDR X20, [X20 + 0x5F0]
	0x03321CA4 MOV W19, W0
	0x03321CA8 TBNZ X8, 0x0, 0x3321CC0
	0x03321CAC ADRP X0, 0xDFA000
	0x03321CB0 LDR X0, [X0 + 0x5F0]
	0x03321CB4 BL 0x1C16CF4
	0x03321CB8 MOVZ W8, 0x1
	0x03321CBC STRB W8, [X21 + 0xC5C]
	0x03321CC0 LDR X0, [X20]
	0x03321CC4 LDR W8, [X0 + 0xE0]
	0x03321CC8 CBNZ W8, 0x3321CD0
	0x03321CCC BL 0x1C16DFC
	0x03321CD0 MOV W0, W19
	0x03321CD4 LDP X20, X19, [X31 + 0x10]
	0x03321CD8 MOV X1, X31
	0x03321CDC LDP X30, X21, [X31], #0x20
	0x03321CE0 B 0x33D8EAC
	0x03321CE4 STP X30, X21, [X31 - 0x20]!
	0x03321CE8 STP X20, X19, [X31 + 0x10]
	0x03321CEC ADRP X21, 0x10BB000
	0x03321CF0 ADRP X20, 0xDFA000
	0x03321CF4 LDRB W8, [X21 + 0xC5E]
	0x03321CF8 LDR X20, [X20 + 0x5F0]
	0x03321CFC MOV W19, W0
	0x03321D00 TBNZ X8, 0x0, 0x3321D18
	0x03321D04 ADRP X0, 0xDFA000
	0x03321D08 LDR X0, [X0 + 0x5F0]
	0x03321D0C BL 0x1C16CF4
	0x03321D10 MOVZ W8, 0x1
	0x03321D14 STRB W8, [X21 + 0xC5E]
	0x03321D18 LDR X0, [X20]
	0x03321D1C LDR W8, [X0 + 0xE0]
	0x03321D20 CBNZ W8, 0x3321D28
	0x03321D24 BL 0x1C16DFC
	0x03321D28 MOV W0, W19
	0x03321D2C LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x10BC000
	007 Move W8, [X20+3141]
	008 Move X19, X1
	009 Move X22, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE03000
	015 Move X0, [X0+3600]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3141], W8
	019 Compare X22, 0
	020 JumpIfEqual {50}
	021 Move X21, 0xE03000
	022 Move X21, [X21+3600]
	023 Move X0, X22
	024 Move X20, [X21]
	025 Move X1, X20
	026 Call 0x1C17E00
	027 Compare X0, 0
	028 JumpIfEqual {71}
	029 Move X21, [X21]
	030 Move X0, X22
	031 Move X1, X21
	032 Call 0x1C17E00
	033 Compare X0, 0
	034 JumpIfEqual {74}
	035 Move X8, [X0]
	036 Move X20, X0
	037 NotImplemented "Instruction LDRH not yet implemented."
	038 Compare X9, 0
	039 JumpIfEqual {46}
	040 Move X10, [X8+176]
	041 Add X10, X10, 8
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Subtract X9, X9, 1
	045 Add X10, X10, 16
	046 Move W2, 9
	047 Move X0, X20
	048 Move X1, X21
	049 Call 0x1C5D788
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X0, X31
	055 Move X30, [X31+48]
	056 Return X0
	057 Move W9, [X10]
	058 Add W9, W9, 9
	059 Add X8, X8, W9
	060 Add X0, X8, 312
	061 Move X3, [X0]
	062 Move X2, [X0+8]
	063 Move X0, X20
	064 Move X1, X19
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X22, [X31+16]
	068 Move X21, [X31+24]
	069 Move X30, [X31+48]
	070 CallNoReturn X3
	071 Move X0, X22
	072 Move X1, X20
	073 Call 0x1C181E0
	074 Move X0, X22
	075 Move X1, X21
	076 Call 0x1C181E0

Method: System.Int64 ToInt64(System.Boolean value)

Disassembly:
	0x033193D4 LDR X8, [X8 + 0x8]
	0x033193D8 CBNZ X8, 0x33193E0

ISIL:
	001 And X0, X0, 1
	002 Return X0

Method: System.Int64 ToInt64(System.Char value)

Disassembly:
	0x0331C344 ADD W1, W20, 0x1
	0x0331C348 MOV X2, X31

ISIL:
	001 And X0, X0, 0xFFFF
	002 Return X0

Method: System.Int64 ToInt64(System.SByte value)

Disassembly:
	0x03321D30 MOV X1, X31
	0x03321D34 LDP X30, X21, [X31], #0x20

ISIL:
	001 NotImplemented "Instruction SXTB not yet implemented."
	002 Return X0

Method: System.Int64 ToInt64(System.Byte value)

Disassembly:
	0x0331B254 BL 0x1C16CF4
	0x0331B258 MOVZ W8, 0x1

ISIL:
	001 And X0, X0, 255
	002 Return X0

Method: System.Int64 ToInt64(System.Int16 value)

Disassembly:
	0x03321D38 B 0x33D8EC4
	0x03321D3C STP X30, X21, [X31 - 0x20]!

ISIL:
	001 NotImplemented "Instruction SXTH not yet implemented."
	002 Return X0

Method: System.Int64 ToInt64(System.UInt16 value)

Disassembly:
	0x03321D40 STP X20, X19, [X31 + 0x10]
	0x03321D44 ADRP X21, 0x10BB000

ISIL:
	001 And X0, X0, 0xFFFF
	002 Return X0

Method: System.Int64 ToInt64(System.Int32 value)

Disassembly:
	0x03321D48 ADRP X20, 0xDFA000
	0x03321D4C LDRB W8, [X21 + 0xC5F]

ISIL:
	001 Move X0, W0
	002 Return X0

Method: System.Int64 ToInt64(System.UInt32 value)

Disassembly:
	0x03321D50 LDR X20, [X20 + 0x5F0]
	0x03321D54 MOV W19, W0

ISIL:
	001 Move W0, W0
	002 Return X0

Method: System.Int64 ToInt64(System.UInt64 value)

Disassembly:
	0x03321D58 TBNZ X8, 0x0, 0x3321D70
	0x03321D5C ADRP X0, 0xDFA000
	0x03321D60 LDR X0, [X0 + 0x5F0]
	0x03321D64 BL 0x1C16CF4
	0x03321D68 MOVZ W8, 0x1
	0x03321D6C STRB W8, [X21 + 0xC5F]
	0x03321D70 LDR X0, [X20]
	0x03321D74 LDR W8, [X0 + 0xE0]
	0x03321D78 CBNZ W8, 0x3321D80
	0x03321D7C BL 0x1C16DFC
	0x03321D80 MOV W0, W19
	0x03321D84 LDP X20, X19, [X31 + 0x10]
	0x03321D88 MOV X1, X31
	0x03321D8C LDP X30, X21, [X31], #0x20
	0x03321D90 B 0x33D8EDC
	0x03321D94 STP X30, X21, [X31 - 0x20]!
	0x03321D98 STP X20, X19, [X31 + 0x10]
	0x03321D9C ADRP X20, 0x10BB000
	0x03321DA0 ADRP X21, 0xDFA000
	0x03321DA4 LDRB W8, [X20 + 0xC60]
	0x03321DA8 LDR X21, [X21 + 0x5F0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BC000
	005 Move W8, [X20+3142]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDC000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3142], W8
	016 Move TEMP, X19
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0
	025 Move X8, 0xDDC000
	026 Move X8, [X8+2536]
	027 Move X0, [X8]
	028 Call 0x19913D0
	029 Call Convert.ThrowInt64OverflowException

Method: System.Int64 ToInt64(System.Single value)

Disassembly:
	0x03321DAC MOV W19, W0
	0x03321DB0 TBNZ X8, 0x0, 0x3321DC8
	0x03321DB4 ADRP X0, 0xDFA000
	0x03321DB8 LDR X0, [X0 + 0x5F0]
	0x03321DBC BL 0x1C16CF4
	0x03321DC0 MOVZ W8, 0x1
	0x03321DC4 STRB W8, [X20 + 0xC60]
	0x03321DC8 LDR X0, [X21]
	0x03321DCC LDR W8, [X0 + 0xE0]
	0x03321DD0 CBNZ W8, 0x3321DD8
	0x03321DD4 BL 0x1C16DFC
	0x03321DD8 MOV W0, W19
	0x03321DDC LDP X20, X19, [X31 + 0x10]
	0x03321DE0 MOV X1, X31
	0x03321DE4 LDP X30, X21, [X31], #0x20
	0x03321DE8 B 0x33D8EE8
	0x03321DEC STP X30, X21, [X31 - 0x20]!
	0x03321DF0 STP X20, X19, [X31 + 0x10]
	0x03321DF4 ADRP X20, 0x10BB000
	0x03321DF8 ADRP X21, 0xDFA000
	0x03321DFC LDRB W8, [X20 + 0xC61]
	0x03321E00 LDR X21, [X21 + 0x5F0]
	0x03321E04 MOV W19, W0

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10BC000
	006 Move X20, 0xDDC000
	007 Move W8, [X19+3143]
	008 Move X20, [X20+2536]
	009 Move V8, V0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDDC000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+3143], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+8]
	027 NotImplemented "Instruction FCVT not yet implemented."
	028 Move V8, [X31+32]

Method: System.Int64 ToInt64(System.Double value)

Disassembly:
	0x03321E08 TBNZ X8, 0x0, 0x3321E20
	0x03321E0C ADRP X0, 0xDFA000
	0x03321E10 LDR X0, [X0 + 0x5F0]
	0x03321E14 BL 0x1C16CF4
	0x03321E18 MOVZ W8, 0x1
	0x03321E1C STRB W8, [X20 + 0xC61]
	0x03321E20 LDR X0, [X21]
	0x03321E24 LDR W8, [X0 + 0xE0]
	0x03321E28 CBNZ W8, 0x3321E30
	0x03321E2C BL 0x1C16DFC
	0x03321E30 MOV W0, W19
	0x03321E34 LDP X20, X19, [X31 + 0x10]
	0x03321E38 MOV X1, X31
	0x03321E3C LDP X30, X21, [X31], #0x20
	0x03321E40 B 0x33D8EFC
	0x03321E44 STP X30, X21, [X31 - 0x20]!
	0x03321E48 STP X20, X19, [X31 + 0x10]
	0x03321E4C ADRP X20, 0x10BB000
	0x03321E50 ADRP X21, 0xDFA000
	0x03321E54 LDRB W8, [X20 + 0xC62]
	0x03321E58 LDR X21, [X21 + 0x5F0]
	0x03321E5C MOV X19, X0
	0x03321E60 TBNZ X8, 0x0, 0x3321E78
	0x03321E64 ADRP X0, 0xDFA000
	0x03321E68 LDR X0, [X0 + 0x5F0]
	0x03321E6C BL 0x1C16CF4
	0x03321E70 MOVZ W8, 0x1
	0x03321E74 STRB W8, [X20 + 0xC62]
	0x03321E78 LDR X0, [X21]
	0x03321E7C LDR W8, [X0 + 0xE0]
	0x03321E80 CBNZ W8, 0x3321E88
	0x03321E84 BL 0x1C16DFC
	0x03321E88 MOV X0, X19
	0x03321E8C LDP X20, X19, [X31 + 0x10]
	0x03321E90 MOV X1, X31
	0x03321E94 LDP X30, X21, [X31], #0x20
	0x03321E98 B 0x33D8F08
	0x03321E9C STP X30, X21, [X31 - 0x20]!
	0x03321EA0 STP X20, X19, [X31 + 0x10]
	0x03321EA4 ADRP X20, 0x10BB000
	0x03321EA8 ADRP X21, 0xDFA000
	0x03321EAC LDRB W8, [X20 + 0xC63]
	0x03321EB0 LDR X21, [X21 + 0x5F0]
	0x03321EB4 MOV X19, X0
	0x03321EB8 TBNZ X8, 0x0, 0x3321ED0
	0x03321EBC ADRP X0, 0xDFA000
	0x03321EC0 LDR X0, [X0 + 0x5F0]
	0x03321EC4 BL 0x1C16CF4
	0x03321EC8 MOVZ W8, 0x1
	0x03321ECC STRB W8, [X20 + 0xC63]
	0x03321ED0 LDR X0, [X21]
	0x03321ED4 LDR W8, [X0 + 0xE0]
	0x03321ED8 CBNZ W8, 0x3321EE0
	0x03321EDC BL 0x1C16DFC
	0x03321EE0 MOV X0, X19
	0x03321EE4 LDP X20, X19, [X31 + 0x10]
	0x03321EE8 MOV X1, X31
	0x03321EEC LDP X30, X21, [X31], #0x20
	0x03321EF0 B 0x33D8F20
	0x03321EF4 STR D8, [X31 - 0x20]!
	0x03321EF8 STR X30, [X31 + 0x8]
	0x03321EFC STP X20, X19, [X31 + 0x10]
	0x03321F00 ADRP X19, 0x10BB000
	0x03321F04 ADRP X20, 0xDFA000
	0x03321F08 LDRB W8, [X19 + 0xC64]
	0x03321F0C LDR X20, [X20 + 0x5F0]
	0x03321F10 MOV V8.16B, V0.16B
	0x03321F14 TBNZ X8, 0x0, 0x3321F2C

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], D8
	003 Move [X31+24], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0x10BC000
	007 Move X20, 0xDD3000
	008 Move W8, [X19+3144]
	009 Move X20, [X20+1448]
	010 Move V8, V0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xE08000
	016 Move X0, [X0+552]
	017 Call 0x1C17CF4
	018 Move X0, 0xDD3000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+3144], W8
	023 Move X0, [X20]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Add X0, X31, 8
	029 Move V0, V8
	030 Call 0x3EB2C00
	031 NotImplemented "Instruction FCMP not yet implemented."
	032 Move D1, -0.5
	033 NotImplemented "Instruction FCMP not yet implemented."
	034 Move V0, [X31+8]
	035 Move D1, -1
	036 Move D1, 0.5
	037 NotImplemented "Instruction FCMP not yet implemented."
	038 Move V0, [X31+8]
	039 Move D1, 1
	040 NotImplemented "Instruction FCVTZS not yet implemented."
	041 Add D1, D0, D1
	042 And X31, X8, 1
	043 NotImplemented "Instruction FCSEL not yet implemented."
	044 Add D0, D8, D1
	045 NotImplemented "Instruction FRINTP not yet implemented."
	046 Add D0, D8, D1
	047 NotImplemented "Instruction FRINTM not yet implemented."
	048 Move X8, 0x43E00000
	049 Move D1, X8
	050 NotImplemented "Instruction FCMP not yet implemented."
	051 Move X8, 0x7FF00000
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X30, [X31+24]
	055 Move V8, [X31+16]
	056 Move D1, X8
	057 NotImplemented "Instruction FCVTZS not yet implemented."
	058 NotImplemented "Instruction FCMP not yet implemented."
	059 Move X8, 0x80000000
	060 NotImplemented "Instruction CSEL not yet implemented."
	061 Add X31, X31, 48
	062 Return X0
	063 Call 0x1C17F30
	064 Move X8, 0xE08000
	065 Move X8, [X8+552]
	066 Move X1, [X8]
	067 Call 0x1C17DEC

Method: System.Int64 ToInt64(System.Decimal value)

Disassembly:
	0x03321F18 ADRP X0, 0xDFA000
	0x03321F1C LDR X0, [X0 + 0x5F0]
	0x03321F20 BL 0x1C16CF4
	0x03321F24 MOVZ W8, 0x1
	0x03321F28 STRB W8, [X19 + 0xC64]
	0x03321F2C LDR X0, [X20]
	0x03321F30 LDR W8, [X0 + 0xE0]
	0x03321F34 CBNZ W8, 0x3321F3C
	0x03321F38 BL 0x1C16DFC
	0x03321F3C LDP X20, X19, [X31 + 0x10]
	0x03321F40 LDR X30, [X31 + 0x8]
	0x03321F44 MOV V0.16B, V8.16B
	0x03321F48 MOV X0, X31
	0x03321F4C LDR V8, [X31], #0x20
	0x03321F50 B 0x33D8F2C
	0x03321F54 STR D8, [X31 - 0x20]!
	0x03321F58 STR X30, [X31 + 0x8]
	0x03321F5C STP X20, X19, [X31 + 0x10]
	0x03321F60 ADRP X19, 0x10BB000
	0x03321F64 ADRP X20, 0xDFA000
	0x03321F68 LDRB W8, [X19 + 0xC65]
	0x03321F6C LDR X20, [X20 + 0x5F0]
	0x03321F70 MOV V8.16B, V0.16B
	0x03321F74 TBNZ X8, 0x0, 0x3321F8C
	0x03321F78 ADRP X0, 0xDFA000
	0x03321F7C LDR X0, [X0 + 0x5F0]
	0x03321F80 BL 0x1C16CF4
	0x03321F84 MOVZ W8, 0x1
	0x03321F88 STRB W8, [X19 + 0xC65]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x10BC000
	007 Move X21, 0xDFB000
	008 Move W8, [X22+3145]
	009 Move X21, [X21+1520]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xDFB000
	017 Move X0, [X0+1520]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3145], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move W2, W31
	029 Move X3, X31
	030 Call Decimal.Round, X0, X1
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X2, X31
	036 Move X30, [X31+48]
	037 Call Decimal.ToInt64, X0
	038 Return X0

Method: System.Int64 ToInt64(System.String value)

Disassembly:
	0x03321F8C LDR X0, [X20]
	0x03321F90 LDR W8, [X0 + 0xE0]
	0x03321F94 CBNZ W8, 0x3321F9C
	0x03321F98 BL 0x1C16DFC
	0x03321F9C LDP X20, X19, [X31 + 0x10]
	0x03321FA0 LDR X30, [X31 + 0x8]
	0x03321FA4 MOV V0.16B, V8.16B
	0x03321FA8 MOV X0, X31
	0x03321FAC LDR V8, [X31], #0x20
	0x03321FB0 B 0x33D8F70
	0x03321FB4 STR X30, [X31 - 0x30]!
	0x03321FB8 STP X22, X21, [X31 + 0x10]
	0x03321FBC STP X20, X19, [X31 + 0x20]
	0x03321FC0 ADRP X22, 0x10BB000
	0x03321FC4 ADRP X21, 0xDFA000
	0x03321FC8 LDRB W8, [X22 + 0xC66]
	0x03321FCC LDR X21, [X21 + 0x5F0]
	0x03321FD0 MOV X19, X1
	0x03321FD4 MOV X20, X0
	0x03321FD8 TBNZ X8, 0x0, 0x3321FF0
	0x03321FDC ADRP X0, 0xDFA000
	0x03321FE0 LDR X0, [X0 + 0x5F0]
	0x03321FE4 BL 0x1C16CF4
	0x03321FE8 MOVZ W8, 0x1
	0x03321FEC STRB W8, [X22 + 0xC66]
	0x03321FF0 LDR X0, [X21]
	0x03321FF4 LDR W8, [X0 + 0xE0]
	0x03321FF8 CBZ W8, 0x3322018
	0x03321FFC CBZ X20, 0x3322020
	0x03322000 MOVZ W1, 0x6F

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BC000
	005 Move W8, [X20+3146]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDD5000
	012 Move X0, [X0+3144]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3146], W8
	016 Compare X19, 0
	017 JumpIfEqual {35}
	018 Move X8, 0xDD5000
	019 Move X8, [X8+3144]
	020 Move X0, [X8]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X31
	026 Call CultureInfo.get_CurrentCulture
	027 Move X1, X0
	028 Move X0, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X2, X31
	032 Move X30, [X31+32]
	033 Call Int64.Parse, X0, X1
	034 Return X0
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X0, X31
	038 Move X30, [X31+32]
	039 Return X0

Method: System.Int64 ToInt64(System.String value, System.IFormatProvider provider)

Disassembly:
	0x03322004 MOV X0, X20
	0x03322008 MOV X2, X19
	0x0332200C MOV X3, X31
	0x03322010 BL 0x33D77E0
	0x03322014 B 0x332202C
	0x03322018 BL 0x1C16DFC

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {8}
	003 Move X2, X1
	004 Move W1, 7
	005 Move X3, X31
	006 Call Int64.Parse, X0, X1, X2
	007 Return X0
	008 Return X0

Method: System.UInt64 ToUInt64(System.Object value)

Disassembly:
	0x0332201C CBNZ X20, 0x3322000
	0x03322020 LDR X8, [X21]
	0x03322024 LDR X8, [X8 + 0xB8]
	0x03322028 LDP X0, X1, [X8]
	0x0332202C LDP X20, X19, [X31 + 0x20]
	0x03322030 LDP X22, X21, [X31 + 0x10]
	0x03322034 LDR X30, [X31], #0x30
	0x03322038 RET
	0x0332203C SUB X31, X31, 0x30
	0x03322040 STP X30, X21, [X31 + 0x10]
	0x03322044 STP X20, X19, [X31 + 0x20]
	0x03322048 ADRP X21, 0x10BA000
	0x0332204C LDRB W8, [X21 + 0xC68]
	0x03322050 MOV X19, X1
	0x03322054 MOV X20, X0
	0x03322058 TBNZ X8, 0x0, 0x3322070
	0x0332205C ADRP X0, 0xDD2000
	0x03322060 LDR X0, [X0 + 0x9F0]
	0x03322064 BL 0x1C16CF4
	0x03322068 MOVZ W8, 0x1
	0x0332206C STRB W8, [X21 + 0xC68]
	0x03322070 CBZ X20, 0x33220A4
	0x03322074 ADRP X8, 0xDD2000
	0x03322078 LDR X8, [X8 + 0x9F0]
	0x0332207C LDR X0, [X8]
	0x03322080 LDR W8, [X0 + 0xE0]
	0x03322084 CBNZ W8, 0x332208C
	0x03322088 BL 0x1C16DFC
	0x0332208C MOV X0, X20
	0x03322090 MOV X1, X19
	0x03322094 MOV X2, X31
	0x03322098 BL 0x3361A94
	0x0332209C STR X0, [X31 + 0x8]
	0x033220A0 B 0x33220BC
	0x033220A4 ADD X0, X31, 0x8
	0x033220A8 MOV X1, X31
	0x033220AC MOV X2, X31
	0x033220B0 STR X31, [X31 + 0x8]
	0x033220B4 BL 0x335EEB0
	0x033220B8 LDR X0, [X31 + 0x8]
	0x033220BC LDP X20, X19, [X31 + 0x20]
	0x033220C0 LDP X30, X21, [X31 + 0x10]
	0x033220C4 ADD X31, X31, 0x30
	0x033220C8 RET
	0x033220CC STR X30, [X31 - 0x30]!
	0x033220D0 STP X22, X21, [X31 + 0x10]
	0x033220D4 STP X20, X19, [X31 + 0x20]
	0x033220D8 ADRP X20, 0x10BA000
	0x033220DC ADRP X22, 0xE01000
	0x033220E0 LDRB W8, [X20 + 0xC69]
	0x033220E4 LDR X22, [X22 + 0xE10]
	0x033220E8 MOV X19, X1
	0x033220EC MOV X21, X0
	0x033220F0 TBNZ X8, 0x0, 0x3322120
	0x033220F4 ADRP X0, 0xE01000
	0x033220F8 LDR X0, [X0 + 0xE10]
	0x033220FC BL 0x1C16CF4
	0x03322100 ADRP X0, 0xDFB000
	0x03322104 LDR X0, [X0 + 0xEF8]
	0x03322108 BL 0x1C16CF4
	0x0332210C ADRP X0, 0xDD3000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10BB000
	006 Move W8, [X19+3147]
	007 Move X21, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE02000
	013 Move X0, [X0+3600]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3147], W8
	017 Compare X21, 0
	018 JumpIfEqual {48}
	019 Move X20, 0xE02000
	020 Move X20, [X20+3600]
	021 Move X0, X21
	022 Move X19, [X20]
	023 Move X1, X19
	024 Call 0x1C17E00
	025 Compare X0, 0
	026 JumpIfEqual {67}
	027 Move X20, [X20]
	028 Move X0, X21
	029 Move X1, X20
	030 Call 0x1C17E00
	031 Compare X0, 0
	032 JumpIfEqual {70}
	033 Move X8, [X0]
	034 Move X19, X0
	035 NotImplemented "Instruction LDRH not yet implemented."
	036 Compare X9, 0
	037 JumpIfEqual {44}
	038 Move X10, [X8+176]
	039 Add X10, X10, 8
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Subtract X9, X9, 1
	043 Add X10, X10, 16
	044 Move W2, 10
	045 Move X0, X19
	046 Move X1, X20
	047 Call 0x1C5D788
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X0, X31
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Return X0
	054 Move W9, [X10]
	055 Add W9, W9, 10
	056 Add X8, X8, W9
	057 Add X0, X8, 312
	058 Move X3, [X0]
	059 Move X2, [X0+8]
	060 Move X0, X19
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X1, X31
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 CallNoReturn X3
	067 Move X0, X21
	068 Move X1, X19
	069 Call 0x1C181E0
	070 Move X0, X21
	071 Move X1, X20
	072 Call 0x1C181E0

Method: System.UInt64 ToUInt64(System.Object value, System.IFormatProvider provider)

Disassembly:
	0x03322110 LDR X0, [X0 + 0x278]
	0x03322114 BL 0x1C16CF4
	0x03322118 MOVZ W8, 0x1
	0x0332211C STRB W8, [X20 + 0xC69]
	0x03322120 LDR X1, [X22]
	0x03322124 MOV X0, X21
	0x03322128 BL 0x1C16E00
	0x0332212C CBZ X0, 0x3322174
	0x03322130 LDR X8, [X0]
	0x03322134 LDR X1, [X22]
	0x03322138 MOV X20, X0
	0x0332213C LDRH W9, [X8 + 0x12E]
	0x03322140 CBZ X9, 0x3322164
	0x03322144 LDR X10, [X8 + 0xB0]
	0x03322148 ADD X10, X10, 0x8
	0x0332214C LDUR X11, [X10 - 0x8]
	0x03322150 CMP X11, X1
	0x03322154 B.EQ 0x33221D0
	0x03322158 SUBS X9, X9, 0x1
	0x0332215C ADD X10, X10, 0x10
	0x03322160 B.NE 0x332214C
	0x03322164 MOVZ W2, 0xF
	0x03322168 MOV X0, X20
	0x0332216C BL 0x1C5C788
	0x03322170 B 0x33221E0
	0x03322174 ADRP X22, 0xDFB000
	0x03322178 LDR X22, [X22 + 0xEF8]
	0x0332217C MOV X0, X21
	0x03322180 LDR X1, [X22]
	0x03322184 BL 0x1C16E00
	0x03322188 CBZ X0, 0x33221FC
	0x0332218C LDR X8, [X0]
	0x03322190 LDR X1, [X22]
	0x03322194 MOV X20, X0
	0x03322198 LDRH W9, [X8 + 0x12E]
	0x0332219C CBZ X9, 0x33221C0
	0x033221A0 LDR X10, [X8 + 0xB0]
	0x033221A4 ADD X10, X10, 0x8
	0x033221A8 LDUR X11, [X10 - 0x8]
	0x033221AC CMP X11, X1
	0x033221B0 B.EQ 0x332221C
	0x033221B4 SUBS X9, X9, 0x1
	0x033221B8 ADD X10, X10, 0x10
	0x033221BC B.NE 0x33221A8
	0x033221C0 MOV X0, X20
	0x033221C4 MOV W2, W31
	0x033221C8 BL 0x1C5C788
	0x033221CC B 0x3322228
	0x033221D0 LDR W9, [X10]
	0x033221D4 ADD W9, W9, 0xF
	0x033221D8 ADD X8, X8, W9, 0x4, SXTW
	0x033221DC ADD X0, X8, 0x138
	0x033221E0 LDP X3, X2, [X0]
	0x033221E4 MOV X0, X20
	0x033221E8 MOV X1, X19
	0x033221EC LDP X20, X19, [X31 + 0x20]
	0x033221F0 LDP X22, X21, [X31 + 0x10]
	0x033221F4 LDR X30, [X31], #0x30
	0x033221F8 BR X3
	0x033221FC CBZ X21, 0x3322248
	0x03322200 LDR X8, [X21]
	0x03322204 MOV X0, X21
	0x03322208 LDP X20, X19, [X31 + 0x20]
	0x0332220C LDP X22, X21, [X31 + 0x10]
	0x03322210 LDP X2, X1, [X8 + 0x168]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x10BB000
	007 Move W8, [X20+3148]
	008 Move X19, X1
	009 Move X22, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE02000
	015 Move X0, [X0+3600]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3148], W8
	019 Compare X22, 0
	020 JumpIfEqual {50}
	021 Move X21, 0xE02000
	022 Move X21, [X21+3600]
	023 Move X0, X22
	024 Move X20, [X21]
	025 Move X1, X20
	026 Call 0x1C17E00
	027 Compare X0, 0
	028 JumpIfEqual {71}
	029 Move X21, [X21]
	030 Move X0, X22
	031 Move X1, X21
	032 Call 0x1C17E00
	033 Compare X0, 0
	034 JumpIfEqual {74}
	035 Move X8, [X0]
	036 Move X20, X0
	037 NotImplemented "Instruction LDRH not yet implemented."
	038 Compare X9, 0
	039 JumpIfEqual {46}
	040 Move X10, [X8+176]
	041 Add X10, X10, 8
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Subtract X9, X9, 1
	045 Add X10, X10, 16
	046 Move W2, 10
	047 Move X0, X20
	048 Move X1, X21
	049 Call 0x1C5D788
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X0, X31
	055 Move X30, [X31+48]
	056 Return X0
	057 Move W9, [X10]
	058 Add W9, W9, 10
	059 Add X8, X8, W9
	060 Add X0, X8, 312
	061 Move X3, [X0]
	062 Move X2, [X0+8]
	063 Move X0, X20
	064 Move X1, X19
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X22, [X31+16]
	068 Move X21, [X31+24]
	069 Move X30, [X31+48]
	070 CallNoReturn X3
	071 Move X0, X22
	072 Move X1, X20
	073 Call 0x1C181E0
	074 Move X0, X22
	075 Move X1, X21
	076 Call 0x1C181E0

Method: System.UInt64 ToUInt64(System.Boolean value)

Disassembly:
	0x03319438 LDR W8, [X0 + 0xE0]
	0x0331943C CBNZ W8, 0x3319444

ISIL:
	001 And X0, X0, 1
	002 Return X0

Method: System.UInt64 ToUInt64(System.Char value)

Disassembly:
	0x0331C3A4 LDRB W8, [X21 + 0xBEC]
	0x0331C3A8 LDR X20, [X20 + 0x170]

ISIL:
	001 And X0, X0, 0xFFFF
	002 Return X0

Method: System.UInt64 ToUInt64(System.SByte value)

Disassembly:
	0x03322214 LDR X30, [X31], #0x30
	0x03322218 BR X2
	0x0332221C LDRSW X9, [X10]
	0x03322220 ADD X8, X8, X9, 0x4, LSL
	0x03322224 ADD X0, X8, 0x138
	0x03322228 LDP X4, X3, [X0]
	0x0332222C MOV X0, X20
	0x03322230 MOV X2, X19
	0x03322234 LDP X20, X19, [X31 + 0x20]
	0x03322238 LDP X22, X21, [X31 + 0x10]
	0x0332223C MOV X1, X31
	0x03322240 LDR X30, [X31], #0x30
	0x03322244 BR X4
	0x03322248 ADRP X8, 0xDD3000
	0x0332224C LDR X8, [X8 + 0x278]
	0x03322250 LDP X20, X19, [X31 + 0x20]
	0x03322254 LDP X22, X21, [X31 + 0x10]
	0x03322258 LDR X8, [X8]
	0x0332225C LDR X8, [X8 + 0xB8]
	0x03322260 LDR X0, [X8]
	0x03322264 LDR X30, [X31], #0x30

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BB000
	005 Move W8, [X20+3149]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDB000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3149], W8
	016 Move TEMP, X19
	017 And TEMP, TEMP, 128
	018 Compare TEMP, 128
	019 JumpIfEqual {25}
	020 And X0, X19, 255
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0
	025 Move X8, 0xDDB000
	026 Move X8, [X8+2536]
	027 Move X0, [X8]
	028 Call 0x19913D0
	029 Call Convert.ThrowUInt64OverflowException

Method: System.UInt64 ToUInt64(System.Byte value)

Disassembly:
	0x0331B2B4 BL 0x1C16CF4
	0x0331B2B8 MOVZ W8, 0x1

ISIL:
	001 And X0, X0, 255
	002 Return X0

Method: System.UInt64 ToUInt64(System.Int16 value)

Disassembly:
	0x03322268 RET
	0x0332226C STR X30, [X31 - 0x20]!
	0x03322270 STP X20, X19, [X31 + 0x10]
	0x03322274 ADRP X19, 0x10BA000
	0x03322278 STRH W0, [X31 + 0xC]
	0x0332227C ADRP X20, 0xDD3000
	0x03322280 LDRB W8, [X19 + 0xC6A]
	0x03322284 LDR X20, [X20 + 0x170]
	0x03322288 TBNZ X8, 0x0, 0x33222A0
	0x0332228C ADRP X0, 0xDD3000
	0x03322290 LDR X0, [X0 + 0x170]
	0x03322294 BL 0x1C16CF4
	0x03322298 MOVZ W8, 0x1
	0x0332229C STRB W8, [X19 + 0xC6A]
	0x033222A0 LDR X0, [X20]
	0x033222A4 LDR W8, [X0 + 0xE0]
	0x033222A8 CBNZ W8, 0x33222B0
	0x033222AC BL 0x1C16DFC
	0x033222B0 ADD X0, X31, 0xC
	0x033222B4 BL 0x330A76C
	0x033222B8 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BB000
	005 Move W8, [X20+3150]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDB000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3150], W8
	016 Move TEMP, X19
	017 And TEMP, TEMP, 0x8000
	018 Compare TEMP, 0x8000
	019 JumpIfEqual {25}
	020 And X0, X19, 0xFFFF
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0
	025 Move X8, 0xDDB000
	026 Move X8, [X8+2536]
	027 Move X0, [X8]
	028 Call 0x19913D0
	029 Call Convert.ThrowUInt64OverflowException

Method: System.UInt64 ToUInt64(System.UInt16 value)

Disassembly:
	0x033222BC LDR X30, [X31], #0x20
	0x033222C0 RET

ISIL:
	001 And X0, X0, 0xFFFF
	002 Return X0

Method: System.UInt64 ToUInt64(System.Int32 value)

Disassembly:
	0x033222C4 STR X30, [X31 - 0x10]!
	0x033222C8 STR W0, [X31 + 0xC]
	0x033222CC ADD X0, X31, 0xC
	0x033222D0 MOV X2, X31
	0x033222D4 BL 0x337B824
	0x033222D8 LDR X30, [X31], #0x10
	0x033222DC RET
	0x033222E0 STR X30, [X31 - 0x20]!
	0x033222E4 STP X20, X19, [X31 + 0x10]
	0x033222E8 ADRP X19, 0x10BA000
	0x033222EC STR X0, [X31 + 0x8]
	0x033222F0 ADRP X20, 0xDD3000
	0x033222F4 LDRB W8, [X19 + 0xC6B]
	0x033222F8 LDR X20, [X20 + 0xC48]
	0x033222FC TBNZ X8, 0x0, 0x3322314
	0x03322300 ADRP X0, 0xDD3000
	0x03322304 LDR X0, [X0 + 0xC48]
	0x03322308 BL 0x1C16CF4
	0x0332230C MOVZ W8, 0x1
	0x03322310 STRB W8, [X19 + 0xC6B]
	0x03322314 LDR X0, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BB000
	005 Move W8, [X20+3151]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDB000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3151], W8
	016 Move TEMP, X19
	017 And TEMP, TEMP, -2147483648
	018 Compare TEMP, -2147483648
	019 JumpIfEqual {25}
	020 Move W0, W19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0
	025 Move X8, 0xDDB000
	026 Move X8, [X8+2536]
	027 Move X0, [X8]
	028 Call 0x19913D0
	029 Call Convert.ThrowUInt64OverflowException

Method: System.UInt64 ToUInt64(System.UInt32 value)

Disassembly:
	0x03322318 LDR W8, [X0 + 0xE0]
	0x0332231C CBNZ W8, 0x3322324

ISIL:
	001 Move W0, W0
	002 Return X0

Method: System.UInt64 ToUInt64(System.Int64 value)

Disassembly:
	0x03322320 BL 0x1C16DFC
	0x03322324 MOV X0, X31
	0x03322328 BL 0x33387A0
	0x0332232C MOV X1, X0
	0x03322330 ADD X0, X31, 0x8
	0x03322334 MOV X2, X31
	0x03322338 BL 0x337CC98
	0x0332233C LDP X20, X19, [X31 + 0x10]
	0x03322340 LDR X30, [X31], #0x20
	0x03322344 RET
	0x03322348 STP X30, X21, [X31 - 0x20]!
	0x0332234C STP X20, X19, [X31 + 0x10]
	0x03322350 SUB W8, W1, 0x2
	0x03322354 EXTR W8, W8, W8, 0x1
	0x03322358 CMP W8, 0x7
	0x0332235C B.HI 0x33223D8
	0x03322360 MOVZ W9, 0x1
	0x03322364 LSLV W8, W9, W8
	0x03322368 MOVZ W9, 0x99
	0x0332236C ANDS W31, W8, W9, 0x0
	0x03322370 B.EQ 0x33223D8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BB000
	005 Move W8, [X20+3152]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDDB000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3152], W8
	016 Move TEMP, X19
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0
	025 Move X8, 0xDDB000
	026 Move X8, [X8+2536]
	027 Move X0, [X8]
	028 Call 0x19913D0
	029 Call Convert.ThrowUInt64OverflowException

Method: System.UInt64 ToUInt64(System.Single value)

Disassembly:
	0x03322374 MOV X20, X0
	0x03322378 CBZ X0, 0x33223C8
	0x0332237C ADRP X21, 0x10BA000
	0x03322380 LDRB W8, [X21 + 0x3AB]
	0x03322384 MOV W19, W1
	0x03322388 CBNZ W8, 0x33223A0
	0x0332238C ADRP X0, 0xDF8000
	0x03322390 LDR X0, [X0 + 0x290]
	0x03322394 BL 0x1C16CF4
	0x03322398 MOVZ W8, 0x1
	0x0332239C STRB W8, [X21 + 0x3AB]
	0x033223A0 MOV X0, X20
	0x033223A4 MOV X1, X31
	0x033223A8 BL 0x3225708
	0x033223AC LDR W1, [X20 + 0x10]
	0x033223B0 MOV W2, W19
	0x033223B4 LDP X20, X19, [X31 + 0x10]
	0x033223B8 MOVZ W3, 0x1000
	0x033223BC MOV X4, X31
	0x033223C0 LDP X30, X21, [X31], #0x20
	0x033223C4 B 0x338D514
	0x033223C8 LDP X20, X19, [X31 + 0x10]
	0x033223CC MOV W0, W31

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10BB000
	006 Move X20, 0xDDB000
	007 Move W8, [X19+3153]
	008 Move X20, [X20+2536]
	009 Move V8, V0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDDB000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+3153], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+8]
	027 NotImplemented "Instruction FCVT not yet implemented."
	028 Move V8, [X31+32]

Method: System.UInt64 ToUInt64(System.Double value)

Disassembly:
	0x033223D0 LDP X30, X21, [X31], #0x20
	0x033223D4 RET
	0x033223D8 ADRP X0, 0xDD9000
	0x033223DC LDR X0, [X0 + 0x578]
	0x033223E0 BL 0x1C16D08
	0x033223E4 BL 0x1C16F10
	0x033223E8 MOV X19, X0
	0x033223EC ADRP X0, 0xE06000
	0x033223F0 LDR X0, [X0 + 0x238]
	0x033223F4 BL 0x1C16D08
	0x033223F8 MOV X1, X0
	0x033223FC MOV X0, X19
	0x03322400 BL 0x3314A68
	0x03322404 ADRP X0, 0xE06000
	0x03322408 LDR X0, [X0 + 0x240]
	0x0332240C BL 0x1C16D08
	0x03322410 MOV X1, X0
	0x03322414 MOV X0, X19
	0x03322418 BL 0x1C16DEC
	0x0332241C SUB W8, W1, 0x2
	0x03322420 EXTR W8, W8, W8, 0x1
	0x03322424 CMP W8, 0x7
	0x03322428 B.HI 0x3322458
	0x0332242C MOVZ W9, 0x1
	0x03322430 LSLV W8, W9, W8
	0x03322434 MOVZ W9, 0x99
	0x03322438 ANDS W31, W8, W9, 0x0
	0x0332243C B.EQ 0x3322458
	0x03322440 AND W0, W0, 0xFF
	0x03322444 MOVN W2, 0x0
	0x03322448 MOVZ W3, 0x20
	0x0332244C MOVZ W4, 0x40
	0x03322450 MOV X5, X31
	0x03322454 B 0x338DB08
	0x03322458 STP X30, X19, [X31 - 0x10]!
	0x0332245C ADRP X0, 0xDD9000
	0x03322460 LDR X0, [X0 + 0x578]
	0x03322464 BL 0x1C16D08
	0x03322468 BL 0x1C16F10
	0x0332246C MOV X19, X0
	0x03322470 ADRP X0, 0xE06000
	0x03322474 LDR X0, [X0 + 0x238]
	0x03322478 BL 0x1C16D08
	0x0332247C MOV X1, X0
	0x03322480 MOV X0, X19
	0x03322484 BL 0x3314A68
	0x03322488 ADRP X0, 0xE06000
	0x0332248C LDR X0, [X0 + 0x248]
	0x03322490 BL 0x1C16D08
	0x03322494 MOV X1, X0
	0x03322498 MOV X0, X19
	0x0332249C BL 0x1C16DEC
	0x033224A0 SUB W8, W1, 0x2
	0x033224A4 EXTR W8, W8, W8, 0x1
	0x033224A8 CMP W8, 0x7
	0x033224AC B.HI 0x33224D8
	0x033224B0 MOVZ W9, 0x1
	0x033224B4 LSLV W8, W9, W8
	0x033224B8 MOVZ W9, 0x99
	0x033224BC ANDS W31, W8, W9, 0x0
	0x033224C0 B.EQ 0x33224D8
	0x033224C4 MOVN W2, 0x0
	0x033224C8 MOVZ W3, 0x20

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], D8
	003 Move [X31+24], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0x10BB000
	007 Move X20, 0xDD2000
	008 Move W8, [X19+3154]
	009 Move X20, [X20+1448]
	010 Move V8, V0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xE07000
	016 Move X0, [X0+560]
	017 Call 0x1C17CF4
	018 Move X0, 0xDD2000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+3154], W8
	023 Move X0, [X20]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Add X0, X31, 8
	029 Move V0, V8
	030 Call 0x3EB2C00
	031 NotImplemented "Instruction FCMP not yet implemented."
	032 Move D1, -0.5
	033 NotImplemented "Instruction FCMP not yet implemented."
	034 Move V0, [X31+8]
	035 Move D1, -1
	036 Move D1, 0.5
	037 NotImplemented "Instruction FCMP not yet implemented."
	038 Move V0, [X31+8]
	039 Move D1, 1
	040 NotImplemented "Instruction FCVTZS not yet implemented."
	041 Add D1, D0, D1
	042 And X31, X8, 1
	043 NotImplemented "Instruction FCSEL not yet implemented."
	044 Add D0, D8, D1
	045 NotImplemented "Instruction FRINTP not yet implemented."
	046 Add D0, D8, D1
	047 NotImplemented "Instruction FRINTM not yet implemented."
	048 Move X8, 0x43F00000
	049 Move D1, X8
	050 NotImplemented "Instruction FCMP not yet implemented."
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X30, [X31+24]
	054 Move V8, [X31+16]
	055 NotImplemented "Instruction FCVTZU not yet implemented."
	056 Add X31, X31, 48
	057 Return X0
	058 Call 0x1C17F30
	059 Move X8, 0xE07000
	060 Move X8, [X8+560]
	061 Move X1, [X8]
	062 Call 0x1C17DEC

Method: System.UInt64 ToUInt64(System.Decimal value)

Disassembly:
	0x033224CC MOV W4, W31
	0x033224D0 MOV X5, X31
	0x033224D4 B 0x338DB08
	0x033224D8 STP X30, X19, [X31 - 0x10]!
	0x033224DC ADRP X0, 0xDD9000
	0x033224E0 LDR X0, [X0 + 0x578]
	0x033224E4 BL 0x1C16D08
	0x033224E8 BL 0x1C16F10
	0x033224EC MOV X19, X0
	0x033224F0 ADRP X0, 0xE06000
	0x033224F4 LDR X0, [X0 + 0x238]
	0x033224F8 BL 0x1C16D08
	0x033224FC MOV X1, X0
	0x03322500 MOV X0, X19
	0x03322504 BL 0x3314A68
	0x03322508 ADRP X0, 0xE06000
	0x0332250C LDR X0, [X0 + 0x250]
	0x03322510 BL 0x1C16D08
	0x03322514 MOV X1, X0
	0x03322518 MOV X0, X19
	0x0332251C BL 0x1C16DEC
	0x03322520 SUB W8, W1, 0x2
	0x03322524 EXTR W8, W8, W8, 0x1
	0x03322528 CMP W8, 0x7
	0x0332252C B.HI 0x3322558
	0x03322530 MOVZ W9, 0x1
	0x03322534 LSLV W8, W9, W8
	0x03322538 MOVZ W9, 0x99
	0x0332253C ANDS W31, W8, W9, 0x0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x10BB000
	007 Move X21, 0xDFA000
	008 Move W8, [X22+3155]
	009 Move X21, [X21+1520]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xDFA000
	017 Move X0, [X0+1520]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3155], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move W2, W31
	029 Move X3, X31
	030 Call Decimal.Round, X0, X1
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X2, X31
	036 Move X30, [X31+48]
	037 Call Decimal.ToUInt64, X0
	038 Return X0

Method: System.UInt64 ToUInt64(System.String value, System.IFormatProvider provider)

Disassembly:
	0x03322540 B.EQ 0x3322558
	0x03322544 MOVN W2, 0x0
	0x03322548 MOVZ W3, 0x20
	0x0332254C MOV W4, W31
	0x03322550 MOV X5, X31
	0x03322554 B 0x338DE30

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {8}
	003 Move X2, X1
	004 Move W1, 7
	005 Move X3, X31
	006 Call UInt64.Parse, X0, X1, X2
	007 Return X0
	008 Return X0

Method: System.Single ToSingle(System.Object value)

Disassembly:
	0x03322558 STP X30, X19, [X31 - 0x10]!
	0x0332255C ADRP X0, 0xDD9000
	0x03322560 LDR X0, [X0 + 0x578]
	0x03322564 BL 0x1C16D08
	0x03322568 BL 0x1C16F10
	0x0332256C MOV X19, X0
	0x03322570 ADRP X0, 0xE06000
	0x03322574 LDR X0, [X0 + 0x238]
	0x03322578 BL 0x1C16D08
	0x0332257C MOV X1, X0
	0x03322580 MOV X0, X19
	0x03322584 BL 0x3314A68
	0x03322588 ADRP X0, 0xE06000
	0x0332258C LDR X0, [X0 + 0x258]
	0x03322590 BL 0x1C16D08
	0x03322594 MOV X1, X0
	0x03322598 MOV X0, X19
	0x0332259C BL 0x1C16DEC
	0x033225A0 STR X30, [X31 - 0x20]!
	0x033225A4 STP X20, X19, [X31 + 0x10]
	0x033225A8 ADRP X20, 0x10BA000
	0x033225AC LDRB W8, [X20 + 0xC6C]
	0x033225B0 MOV X19, X0
	0x033225B4 TBNZ X8, 0x0, 0x33225D8
	0x033225B8 ADRP X0, 0xDDA000
	0x033225BC LDR X0, [X0 + 0x9E8]
	0x033225C0 BL 0x1C16CF4
	0x033225C4 ADRP X0, 0xE06000
	0x033225C8 LDR X0, [X0 + 0x260]
	0x033225CC BL 0x1C16CF4
	0x033225D0 MOVZ W8, 0x1
	0x033225D4 STRB W8, [X20 + 0xC6C]
	0x033225D8 CBZ X19, 0x3322610
	0x033225DC ADRP X8, 0xDDA000
	0x033225E0 LDR X8, [X8 + 0x9E8]
	0x033225E4 LDR W20, [X19 + 0x18]
	0x033225E8 LDR X0, [X8]
	0x033225EC LDR W8, [X0 + 0xE0]
	0x033225F0 CBNZ W8, 0x33225F8
	0x033225F4 BL 0x1C16DFC
	0x033225F8 ADD X0, X19, 0x20
	0x033225FC MOV X1, X20
	0x03322600 LDP X20, X19, [X31 + 0x10]
	0x03322604 MOV W2, W31
	0x03322608 LDR X30, [X31], #0x20
	0x0332260C B 0x3322654
	0x03322610 ADRP X0, 0xDD6000
	0x03322614 LDR X0, [X0 + 0x528]
	0x03322618 BL 0x1C16D08
	0x0332261C BL 0x1C16F10
	0x03322620 MOV X19, X0
	0x03322624 ADRP X0, 0xE06000
	0x03322628 LDR X0, [X0 + 0x268]
	0x0332262C BL 0x1C16D08
	0x03322630 MOV X1, X0
	0x03322634 MOV X0, X19
	0x03322638 BL 0x330E100
	0x0332263C ADRP X0, 0xE06000
	0x03322640 LDR X0, [X0 + 0x270]
	0x03322644 BL 0x1C16D08
	0x03322648 MOV X1, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10BB000
	006 Move W8, [X19+3156]
	007 Move X21, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE02000
	013 Move X0, [X0+3600]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3156], W8
	017 Compare X21, 0
	018 JumpIfEqual {48}
	019 Move X20, 0xE02000
	020 Move X20, [X20+3600]
	021 Move X0, X21
	022 Move X19, [X20]
	023 Move X1, X19
	024 Call 0x1C17E00
	025 Compare X0, 0
	026 JumpIfEqual {67}
	027 Move X20, [X20]
	028 Move X0, X21
	029 Move X1, X20
	030 Call 0x1C17E00
	031 Compare X0, 0
	032 JumpIfEqual {70}
	033 Move X8, [X0]
	034 Move X19, X0
	035 NotImplemented "Instruction LDRH not yet implemented."
	036 Compare X9, 0
	037 JumpIfEqual {44}
	038 Move X10, [X8+176]
	039 Add X10, X10, 8
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Subtract X9, X9, 1
	043 Add X10, X10, 16
	044 Move W2, 11
	045 Move X0, X19
	046 Move X1, X20
	047 Call 0x1C5D788
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move S0, W31
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Return V0
	054 Move W9, [X10]
	055 Add W9, W9, 11
	056 Add X8, X8, W9
	057 Add X0, X8, 312
	058 Move X3, [X0]
	059 Move X2, [X0+8]
	060 Move X0, X19
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X1, X31
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 CallNoReturn X3
	067 Move X0, X21
	068 Move X1, X19
	069 Call 0x1C181E0
	070 Move X0, X21
	071 Move X1, X20
	072 Call 0x1C181E0

Method: System.Single ToSingle(System.Object value, System.IFormatProvider provider)

Disassembly:
	0x0332264C MOV X0, X19
	0x03322650 BL 0x1C16DEC
	0x03322654 STR X30, [X31 - 0x40]!
	0x03322658 STP X24, X23, [X31 + 0x10]
	0x0332265C STP X22, X21, [X31 + 0x20]
	0x03322660 STP X20, X19, [X31 + 0x30]
	0x03322664 ADRP X22, 0x10BA000
	0x03322668 LDRB W8, [X22 + 0xC6F]
	0x0332266C MOV W20, W2
	0x03322670 MOV X19, X1
	0x03322674 MOV X21, X0
	0x03322678 TBNZ X8, 0x0, 0x33226B4
	0x0332267C ADRP X0, 0xDDA000
	0x03322680 LDR X0, [X0 + 0x9E8]
	0x03322684 BL 0x1C16CF4
	0x03322688 ADRP X0, 0xE04000
	0x0332268C LDR X0, [X0 + 0xDD0]
	0x03322690 BL 0x1C16CF4
	0x03322694 ADRP X0, 0xE00000
	0x03322698 LDR X0, [X0 + 0xAC0]
	0x0332269C BL 0x1C16CF4
	0x033226A0 ADRP X0, 0xDD3000
	0x033226A4 LDR X0, [X0 + 0x278]
	0x033226A8 BL 0x1C16CF4
	0x033226AC MOVZ W8, 0x1
	0x033226B0 STRB W8, [X22 + 0xC6F]
	0x033226B4 CMP W20, 0x2
	0x033226B8 B.CS 0x3322784
	0x033226BC CBZ W19, 0x3322724
	0x033226C0 ADRP X24, 0xDDA000
	0x033226C4 LDR X24, [X24 + 0x9E8]
	0x033226C8 ADRP X22, 0xE04000
	0x033226CC LDR X0, [X24]
	0x033226D0 LDR W8, [X0 + 0xE0]
	0x033226D4 LDR X22, [X22 + 0xDD0]
	0x033226D8 CBNZ W8, 0x33226E0
	0x033226DC BL 0x1C16DFC
	0x033226E0 CMP W20, 0x1
	0x033226E4 CSET W1, EQ
	0x033226E8 MOV W0, W19
	0x033226EC BL 0x3322A10
	0x033226F0 MOV X1, X31
	0x033226F4 BL 0x32277A4
	0x033226F8 LDR X2, [X22]
	0x033226FC MOV X22, X0
	0x03322700 MOV X0, X21
	0x03322704 MOV X1, X19
	0x03322708 BL 0x2218CF0
	0x0332270C MOV X21, X0
	0x03322710 CBZ X22, 0x332273C
	0x03322714 MOV X0, X31
	0x03322718 BL 0x32C1424
	0x0332271C ADD X23, X22, W0, SXTW
	0x03322720 B 0x3322740
	0x03322724 ADRP X8, 0xDD3000
	0x03322728 LDR X8, [X8 + 0x278]
	0x0332272C LDR X8, [X8]
	0x03322730 LDR X8, [X8 + 0xB8]
	0x03322734 LDR X22, [X8]
	0x03322738 B 0x332276C
	0x0332273C MOV X23, X22
	0x03322740 LDR X0, [X24]
	0x03322744 LDR W8, [X0 + 0xE0]
	0x03322748 CBNZ W8, 0x3322750
	0x0332274C BL 0x1C16DFC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x10BB000
	007 Move W8, [X20+3157]
	008 Move X19, X1
	009 Move X22, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE02000
	015 Move X0, [X0+3600]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3157], W8
	019 Compare X22, 0
	020 JumpIfEqual {50}
	021 Move X21, 0xE02000
	022 Move X21, [X21+3600]
	023 Move X0, X22
	024 Move X20, [X21]
	025 Move X1, X20
	026 Call 0x1C17E00
	027 Compare X0, 0
	028 JumpIfEqual {71}
	029 Move X21, [X21]
	030 Move X0, X22
	031 Move X1, X21
	032 Call 0x1C17E00
	033 Compare X0, 0
	034 JumpIfEqual {74}
	035 Move X8, [X0]
	036 Move X20, X0
	037 NotImplemented "Instruction LDRH not yet implemented."
	038 Compare X9, 0
	039 JumpIfEqual {46}
	040 Move X10, [X8+176]
	041 Add X10, X10, 8
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Subtract X9, X9, 1
	045 Add X10, X10, 16
	046 Move W2, 11
	047 Move X0, X20
	048 Move X1, X21
	049 Call 0x1C5D788
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move S0, W31
	055 Move X30, [X31+48]
	056 Return V0
	057 Move W9, [X10]
	058 Add W9, W9, 11
	059 Add X8, X8, W9
	060 Add X0, X8, 312
	061 Move X3, [X0]
	062 Move X2, [X0+8]
	063 Move X0, X20
	064 Move X1, X19
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X22, [X31+16]
	068 Move X21, [X31+24]
	069 Move X30, [X31+48]
	070 CallNoReturn X3
	071 Move X0, X22
	072 Move X1, X20
	073 Call 0x1C181E0
	074 Move X0, X22
	075 Move X1, X21
	076 Call 0x1C181E0

Method: System.Single ToSingle(System.SByte value)

Disassembly:
	0x03322750 CMP W20, 0x1
	0x03322754 CSET W4, EQ
	0x03322758 MOV X0, X23

ISIL:
	001 NotImplemented "Instruction SXTB not yet implemented."
	002 NotImplemented "Instruction SCVTF not yet implemented."
	003 Return V0

Method: System.Single ToSingle(System.Byte value)

Disassembly:
	0x0331B314 BL 0x1C16CF4
	0x0331B318 MOVZ W8, 0x1
	0x0331B31C STRB W8, [X21 + 0xBDD]

ISIL:
	001 And W8, W0, 255
	002 NotImplemented "Instruction UCVTF not yet implemented."
	003 Return V0

Method: System.Single ToSingle(System.Int16 value)

Disassembly:
	0x0332275C MOV X1, X21
	0x03322760 MOV W2, W31
	0x03322764 MOV W3, W19

ISIL:
	001 NotImplemented "Instruction SXTH not yet implemented."
	002 NotImplemented "Instruction SCVTF not yet implemented."
	003 Return V0

Method: System.Single ToSingle(System.UInt16 value)

Disassembly:
	0x03322768 BL 0x3322AC0
	0x0332276C MOV X0, X22
	0x03322770 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 And W8, W0, 0xFFFF
	002 NotImplemented "Instruction UCVTF not yet implemented."
	003 Return V0

Method: System.Single ToSingle(System.Int32 value)

Disassembly:
	0x03322774 LDP X22, X21, [X31 + 0x20]
	0x03322778 LDP X24, X23, [X31 + 0x10]

ISIL:
	001 NotImplemented "Instruction SCVTF not yet implemented."
	002 Return V0

Method: System.Single ToSingle(System.UInt32 value)

Disassembly:
	0x0332277C LDR X30, [X31], #0x40
	0x03322780 RET

ISIL:
	001 NotImplemented "Instruction UCVTF not yet implemented."
	002 Return V0

Method: System.Single ToSingle(System.Int64 value)

Disassembly:
	0x03322784 STR W20, [X31 + 0xC]
	0x03322788 ADRP X0, 0xDD1000

ISIL:
	001 NotImplemented "Instruction SCVTF not yet implemented."
	002 Return V0

Method: System.Single ToSingle(System.UInt64 value)

Disassembly:
	0x0332278C LDR X0, [X0 + 0x758]
	0x03322790 BL 0x1C16D08
	0x03322794 ADD X1, X31, 0xC

ISIL:
	001 NotImplemented "Instruction UCVTF not yet implemented."
	002 NotImplemented "Instruction INVALID not yet implemented."
	003 Return V0

Method: System.Single ToSingle(System.Double value)

Disassembly:
	0x03322798 BL 0x1C16E04
	0x0332279C MOV X19, X0

ISIL:
	001 NotImplemented "Instruction INVALID not yet implemented."
	002 Return V0

Method: System.Single ToSingle(System.Decimal value)

Disassembly:
	0x033227A0 ADRP X0, 0xE00000
	0x033227A4 LDR X0, [X0 + 0x1D0]
	0x033227A8 BL 0x1C16D08
	0x033227AC MOV X1, X19
	0x033227B0 MOV X2, X31
	0x033227B4 BL 0x321EFD0
	0x033227B8 MOV X19, X0
	0x033227BC ADRP X0, 0xDD9000
	0x033227C0 LDR X0, [X0 + 0x578]
	0x033227C4 BL 0x1C16D08
	0x033227C8 BL 0x1C16F10
	0x033227CC MOV X20, X0
	0x033227D0 ADRP X0, 0xE05000
	0x033227D4 LDR X0, [X0 + 0x830]
	0x033227D8 BL 0x1C16D08
	0x033227DC MOV X2, X0
	0x033227E0 MOV X0, X20
	0x033227E4 MOV X1, X19
	0x033227E8 BL 0x330E16C
	0x033227EC ADRP X0, 0xE06000
	0x033227F0 LDR X0, [X0 + 0x278]
	0x033227F4 BL 0x1C16D08
	0x033227F8 MOV X1, X0
	0x033227FC MOV X0, X20
	0x03322800 BL 0x1C16DEC
	0x03322804 STP X30, X23, [X31 - 0x30]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x10BB000
	007 Move X21, 0xDFA000
	008 Move W8, [X22+3158]
	009 Move X21, [X21+1520]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xDFA000
	017 Move X0, [X0+1520]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3158], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+48]
	034 Call Decimal.op_Explicit, X0
	035 Return V0

Method: System.Single ToSingle(System.String value)

Disassembly:
	0x03322808 STP X22, X21, [X31 + 0x10]
	0x0332280C STP X20, X19, [X31 + 0x20]
	0x03322810 ADRP X22, 0x10BA000
	0x03322814 ADRP X23, 0xDDA000
	0x03322818 LDRB W8, [X22 + 0xC6D]
	0x0332281C LDR X23, [X23 + 0x9E8]
	0x03322820 MOV W19, W2
	0x03322824 MOV W20, W1
	0x03322828 MOV X21, X0
	0x0332282C TBNZ X8, 0x0, 0x3322844
	0x03322830 ADRP X0, 0xDDA000
	0x03322834 LDR X0, [X0 + 0x9E8]
	0x03322838 BL 0x1C16CF4
	0x0332283C MOVZ W8, 0x1
	0x03322840 STRB W8, [X22 + 0xC6D]
	0x03322844 LDR X0, [X23]
	0x03322848 LDR W8, [X0 + 0xE0]
	0x0332284C CBNZ W8, 0x3322854
	0x03322850 BL 0x1C16DFC
	0x03322854 MOV X0, X21
	0x03322858 MOV W1, W20
	0x0332285C MOV W2, W19
	0x03322860 LDP X20, X19, [X31 + 0x20]
	0x03322864 LDP X22, X21, [X31 + 0x10]
	0x03322868 MOV W3, W31
	0x0332286C LDP X30, X23, [X31], #0x30
	0x03322870 B 0x3322874
	0x03322874 STP X30, X23, [X31 - 0x30]!
	0x03322878 STP X22, X21, [X31 + 0x10]
	0x0332287C STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BB000
	005 Move W8, [X20+3159]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDD4000
	012 Move X0, [X0+3144]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3159], W8
	016 Compare X19, 0
	017 JumpIfEqual {35}
	018 Move X8, 0xDD4000
	019 Move X8, [X8+3144]
	020 Move X0, [X8]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X31
	026 Call CultureInfo.get_CurrentCulture
	027 Move X1, X0
	028 Move X0, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X2, X31
	032 Move X30, [X31+32]
	033 Call Single.Parse, X0, X1
	034 Return V0
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move S0, W31
	038 Move X30, [X31+32]
	039 Return V0

Method: System.Single ToSingle(System.String value, System.IFormatProvider provider)

Disassembly:
	0x03322880 ADRP X23, 0x10BA000
	0x03322884 LDRB W8, [X23 + 0xC6E]
	0x03322888 MOV W19, W3
	0x0332288C MOV W21, W2
	0x03322890 MOV W20, W1
	0x03322894 MOV X22, X0
	0x03322898 TBNZ X8, 0x0, 0x33228BC

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {8}
	003 Move X2, X1
	004 Move W1, 231
	005 Move X3, X31
	006 Call Single.Parse, X0, X1, X2
	007 Return V0
	008 Move S0, W31
	009 Return V0

Method: System.Single ToSingle(System.Boolean value)

Disassembly:
	0x033194A4 BL 0x33BE520
	0x033194A8 MOV X19, X0
	0x033194AC BL 0x19903C0
	0x033194B0 LDR X8, [X19]
	0x033194B4 MOV X0, X19

ISIL:
	001 And W31, W0, 1
	002 Move S0, W31
	003 Move S1, 1
	004 NotImplemented "Instruction FCSEL not yet implemented."
	005 Return V0

Method: System.Double ToDouble(System.Object value)

Disassembly:
	0x0332289C ADRP X0, 0xDDA000
	0x033228A0 LDR X0, [X0 + 0x9E8]
	0x033228A4 BL 0x1C16CF4
	0x033228A8 ADRP X0, 0xE04000
	0x033228AC LDR X0, [X0 + 0xE48]
	0x033228B0 BL 0x1C16CF4
	0x033228B4 MOVZ W8, 0x1
	0x033228B8 STRB W8, [X23 + 0xC6E]
	0x033228BC CBZ X22, 0x3322928
	0x033228C0 TBNZ X21, 0x1F, 0x3322958
	0x033228C4 TBNZ X20, 0x1F, 0x3322988
	0x033228C8 LDR W8, [X22 + 0x18]
	0x033228CC SUB W9, W8, W21
	0x033228D0 CMP W9, W20
	0x033228D4 B.LT 0x33229B8
	0x033228D8 ADRP X23, 0xDDA000
	0x033228DC LDR X23, [X23 + 0x9E8]
	0x033228E0 SUBS W8, W8, W20
	0x033228E4 B.CC 0x33228F0
	0x033228E8 CMP W8, W21
	0x033228EC B.CS 0x33228F8
	0x033228F0 MOV X0, X31
	0x033228F4 BL 0x339D6EC
	0x033228F8 LDR X0, [X23]
	0x033228FC LDR W8, [X0 + 0xE0]
	0x03322900 CBNZ W8, 0x3322908
	0x03322904 BL 0x1C16DFC
	0x03322908 MOV W1, W21
	0x0332290C ADD X8, X22, W20, UXTW
	0x03322910 MOV W2, W19
	0x03322914 LDP X20, X19, [X31 + 0x20]
	0x03322918 LDP X22, X21, [X31 + 0x10]
	0x0332291C ADD X0, X8, 0x20
	0x03322920 LDP X30, X23, [X31], #0x30
	0x03322924 B 0x3322654
	0x03322928 ADRP X0, 0xDD6000
	0x0332292C LDR X0, [X0 + 0x528]
	0x03322930 BL 0x1C16D08
	0x03322934 BL 0x1C16F10
	0x03322938 MOV X19, X0
	0x0332293C ADRP X0, 0xE06000
	0x03322940 LDR X0, [X0 + 0x268]
	0x03322944 BL 0x1C16D08
	0x03322948 MOV X1, X0
	0x0332294C MOV X0, X19
	0x03322950 BL 0x330E100
	0x03322954 B 0x33229F8
	0x03322958 ADRP X0, 0xDD9000
	0x0332295C LDR X0, [X0 + 0x760]
	0x03322960 BL 0x1C16D08
	0x03322964 BL 0x1C16F10
	0x03322968 MOV X19, X0
	0x0332296C ADRP X0, 0xDD9000
	0x03322970 LDR X0, [X0 + 0x768]
	0x03322974 BL 0x1C16D08
	0x03322978 MOV X20, X0
	0x0332297C ADRP X0, 0xDF9000
	0x03322980 LDR X0, [X0 + 0x660]
	0x03322984 B 0x33229E4
	0x03322988 ADRP X0, 0xDD9000
	0x0332298C LDR X0, [X0 + 0x760]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10BB000
	006 Move W8, [X19+3160]
	007 Move X21, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE02000
	013 Move X0, [X0+3600]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3160], W8
	017 Compare X21, 0
	018 JumpIfEqual {48}
	019 Move X20, 0xE02000
	020 Move X20, [X20+3600]
	021 Move X0, X21
	022 Move X19, [X20]
	023 Move X1, X19
	024 Call 0x1C17E00
	025 Compare X0, 0
	026 JumpIfEqual {67}
	027 Move X20, [X20]
	028 Move X0, X21
	029 Move X1, X20
	030 Call 0x1C17E00
	031 Compare X0, 0
	032 JumpIfEqual {70}
	033 Move X8, [X0]
	034 Move X19, X0
	035 NotImplemented "Instruction LDRH not yet implemented."
	036 Compare X9, 0
	037 JumpIfEqual {44}
	038 Move X10, [X8+176]
	039 Add X10, X10, 8
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Subtract X9, X9, 1
	043 Add X10, X10, 16
	044 Move W2, 12
	045 Move X0, X19
	046 Move X1, X20
	047 Call 0x1C5D788
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move D0, X31
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Return V0
	054 Move W9, [X10]
	055 Add W9, W9, 12
	056 Add X8, X8, W9
	057 Add X0, X8, 312
	058 Move X3, [X0]
	059 Move X2, [X0+8]
	060 Move X0, X19
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X1, X31
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 CallNoReturn X3
	067 Move X0, X21
	068 Move X1, X19
	069 Call 0x1C181E0
	070 Move X0, X21
	071 Move X1, X20
	072 Call 0x1C181E0

Method: System.Double ToDouble(System.Object value, System.IFormatProvider provider)

Disassembly:
	0x03322990 BL 0x1C16D08
	0x03322994 BL 0x1C16F10
	0x03322998 MOV X19, X0
	0x0332299C ADRP X0, 0xE00000
	0x033229A0 LDR X0, [X0 + 0xD90]
	0x033229A4 BL 0x1C16D08
	0x033229A8 MOV X20, X0
	0x033229AC ADRP X0, 0xE00000
	0x033229B0 LDR X0, [X0 + 0x550]
	0x033229B4 B 0x33229E4
	0x033229B8 ADRP X0, 0xDD9000
	0x033229BC LDR X0, [X0 + 0x760]
	0x033229C0 BL 0x1C16D08
	0x033229C4 BL 0x1C16F10
	0x033229C8 MOV X19, X0
	0x033229CC ADRP X0, 0xE00000
	0x033229D0 LDR X0, [X0 + 0xD90]
	0x033229D4 BL 0x1C16D08
	0x033229D8 MOV X20, X0
	0x033229DC ADRP X0, 0xE05000
	0x033229E0 LDR X0, [X0 + 0x988]
	0x033229E4 BL 0x1C16D08
	0x033229E8 MOV X2, X0
	0x033229EC MOV X0, X19
	0x033229F0 MOV X1, X20
	0x033229F4 BL 0x3311888
	0x033229F8 ADRP X0, 0xE06000
	0x033229FC LDR X0, [X0 + 0x280]
	0x03322A00 BL 0x1C16D08
	0x03322A04 MOV X1, X0
	0x03322A08 MOV X0, X19
	0x03322A0C BL 0x1C16DEC
	0x03322A10 MOVZ W8, 0x5556
	0x03322A14 MOVK W8, 0x55550000
	0x03322A18 SMADDL X8, X0, X8, X31
	0x03322A1C UBFM X9, X8, 0x3F, 0x3F
	0x03322A20 UBFM X8, X8, 0x20, 0x3F
	0x03322A24 ADD W8, W8, W9
	0x03322A28 ADD W9, W8, W8, 0x1, LSL
	0x03322A2C CMP W0, W9
	0x03322A30 CSET W9, NE
	0x03322A34 UBFM X9, X9, 0x3E, 0x3D
	0x03322A38 ADDS X0, X9, W8, 0x2, SXTW
	0x03322A3C B.EQ 0x3322A84
	0x03322A40 TBZ X1, 0x0, 0x3322A78
	0x03322A44 MOVZ X8, 0xCA1B
	0x03322A48 MOVK X8, 0x286B0000
	0x03322A4C MOVK X8, 0xA1AF
	0x03322A50 MOVK X8, 0x6BC0000
	0x03322A54 SMULH X8, X0, X8, X31
	0x03322A58 SBFM X9, X8, 0x1, 0x3F
	0x03322A5C ADD X8, X9, X8, 0x3F, LSR
	0x03322A60 MOVZ W9, 0x4C
	0x03322A64 MSUB X9, X8, X9, X0
	0x03322A68 CMP X9, 0x0
	0x03322A6C CSET W9, EQ
	0x03322A70 SUB X8, X8, X9
	0x03322A74 ADD X0, X0, X8, 0x1, LSL
	0x03322A78 MOVZ W8, 0x80000000
	0x03322A7C CMP X0, X8
	0x03322A80 B.GE 0x3322A88
	0x03322A84 RET
	0x03322A88 STP X30, X19, [X31 - 0x10]!
	0x03322A8C ADRP X0, 0xDDA000
	0x03322A90 LDR X0, [X0 + 0xDB8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x10BB000
	007 Move W8, [X20+3161]
	008 Move X19, X1
	009 Move X22, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE02000
	015 Move X0, [X0+3600]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3161], W8
	019 Compare X22, 0
	020 JumpIfEqual {50}
	021 Move X21, 0xE02000
	022 Move X21, [X21+3600]
	023 Move X0, X22
	024 Move X20, [X21]
	025 Move X1, X20
	026 Call 0x1C17E00
	027 Compare X0, 0
	028 JumpIfEqual {71}
	029 Move X21, [X21]
	030 Move X0, X22
	031 Move X1, X21
	032 Call 0x1C17E00
	033 Compare X0, 0
	034 JumpIfEqual {74}
	035 Move X8, [X0]
	036 Move X20, X0
	037 NotImplemented "Instruction LDRH not yet implemented."
	038 Compare X9, 0
	039 JumpIfEqual {46}
	040 Move X10, [X8+176]
	041 Add X10, X10, 8
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Subtract X9, X9, 1
	045 Add X10, X10, 16
	046 Move W2, 12
	047 Move X0, X20
	048 Move X1, X21
	049 Call 0x1C5D788
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move D0, X31
	055 Move X30, [X31+48]
	056 Return V0
	057 Move W9, [X10]
	058 Add W9, W9, 12
	059 Add X8, X8, W9
	060 Add X0, X8, 312
	061 Move X3, [X0]
	062 Move X2, [X0+8]
	063 Move X0, X20
	064 Move X1, X19
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X22, [X31+16]
	068 Move X21, [X31+24]
	069 Move X30, [X31+48]
	070 CallNoReturn X3
	071 Move X0, X22
	072 Move X1, X20
	073 Call 0x1C181E0
	074 Move X0, X22
	075 Move X1, X21
	076 Call 0x1C181E0

Method: System.Double ToDouble(System.SByte value)

Disassembly:
	0x03322A94 BL 0x1C16D08
	0x03322A98 BL 0x1C16F10
	0x03322A9C MOV X1, X31

ISIL:
	001 NotImplemented "Instruction SXTB not yet implemented."
	002 NotImplemented "Instruction SCVTF not yet implemented."
	003 Return V0

Method: System.Double ToDouble(System.Byte value)

Disassembly:
	0x0331B378 MOVZ W8, 0x1
	0x0331B37C STRB W8, [X21 + 0xBDE]
	0x0331B380 LDR X0, [X20]

ISIL:
	001 And W8, W0, 255
	002 NotImplemented "Instruction UCVTF not yet implemented."
	003 Return V0

Method: System.Double ToDouble(System.Int16 value)

Disassembly:
	0x03322AA0 MOV X19, X0
	0x03322AA4 BL 0x339F30C
	0x03322AA8 ADRP X0, 0xE06000

ISIL:
	001 NotImplemented "Instruction SXTH not yet implemented."
	002 NotImplemented "Instruction SCVTF not yet implemented."
	003 Return V0

Method: System.Double ToDouble(System.UInt16 value)

Disassembly:
	0x03322AAC LDR X0, [X0 + 0x288]
	0x03322AB0 BL 0x1C16D08
	0x03322AB4 MOV X1, X0

ISIL:
	001 And W8, W0, 0xFFFF
	002 NotImplemented "Instruction UCVTF not yet implemented."
	003 Return V0

Method: System.Double ToDouble(System.Int32 value)

Disassembly:
	0x03322AB8 MOV X0, X19
	0x03322ABC BL 0x1C16DEC

ISIL:
	001 NotImplemented "Instruction SCVTF not yet implemented."
	002 Return V0

Method: System.Double ToDouble(System.UInt32 value)

Disassembly:
	0x03322AC0 STP X30, X25, [X31 - 0x40]!
	0x03322AC4 STP X24, X23, [X31 + 0x10]

ISIL:
	001 NotImplemented "Instruction UCVTF not yet implemented."
	002 Return V0

Method: System.Double ToDouble(System.Int64 value)

Disassembly:
	0x03322AC8 STP X22, X21, [X31 + 0x20]
	0x03322ACC STP X20, X19, [X31 + 0x30]

ISIL:
	001 NotImplemented "Instruction SCVTF not yet implemented."
	002 Return V0

Method: System.Double ToDouble(System.UInt64 value)

Disassembly:
	0x03322AD0 ADRP X25, 0x10BA000
	0x03322AD4 ADRP X24, 0xDDA000

ISIL:
	001 NotImplemented "Instruction UCVTF not yet implemented."
	002 Return V0

Method: System.Double ToDouble(System.Single value)

Disassembly:
	0x03322AD8 LDRB W8, [X25 + 0xC70]
	0x03322ADC LDR X24, [X24 + 0x9E8]

ISIL:
	001 NotImplemented "Instruction FCVT not yet implemented."
	002 Return V0

Method: System.Double ToDouble(System.Decimal value)

Disassembly:
	0x03322AE0 MOV W21, W4
	0x03322AE4 MOV W23, W3
	0x03322AE8 MOV W22, W2
	0x03322AEC MOV X20, X1
	0x03322AF0 MOV X19, X0
	0x03322AF4 TBNZ X8, 0x0, 0x3322B0C
	0x03322AF8 ADRP X0, 0xDDA000
	0x03322AFC LDR X0, [X0 + 0x9E8]
	0x03322B00 BL 0x1C16CF4
	0x03322B04 MOVZ W8, 0x1
	0x03322B08 STRB W8, [X25 + 0xC70]
	0x03322B0C LDR X0, [X24]
	0x03322B10 LDR W8, [X0 + 0xE0]
	0x03322B14 CBNZ W8, 0x3322B20
	0x03322B18 BL 0x1C16DFC
	0x03322B1C LDR X0, [X24]
	0x03322B20 LDR X8, [X0 + 0xB8]
	0x03322B24 LDR X8, [X8 + 0x18]
	0x03322B28 CBZ X8, 0x3322CFC
	0x03322B2C LDR W9, [X8 + 0x18]
	0x03322B30 CBZ W9, 0x3322D00
	0x03322B34 MOVZ W9, 0x5556
	0x03322B38 MOVK W9, 0x55550000
	0x03322B3C SMADDL X9, X23, X9, X31
	0x03322B40 UBFM X10, X9, 0x3F, 0x3F
	0x03322B44 UBFM X9, X9, 0x20, 0x3F

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x10BB000
	007 Move X21, 0xDFA000
	008 Move W8, [X22+3162]
	009 Move X21, [X21+1520]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xDFA000
	017 Move X0, [X0+1520]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3162], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+48]
	034 Call Decimal.op_Explicit, X0
	035 Return V0

Method: System.Double ToDouble(System.String value, System.IFormatProvider provider)

Disassembly:
	0x03322B48 ADD W9, W9, W10
	0x03322B4C ADD W9, W9, W9, 0x1, LSL
	0x03322B50 SUB W10, W23, W9
	0x03322B54 ADD W9, W9, W22
	0x03322B58 CMP W9, W22
	0x03322B5C ADD X8, X8, 0x20
	0x03322B60 MOV W0, W31

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {8}
	003 Move X2, X1
	004 Move W1, 231
	005 Move X3, X31
	006 Call Double.Parse, X0, X1, X2
	007 Return V0
	008 Move D0, X31
	009 Return V0

Method: System.Double ToDouble(System.Boolean value)

Disassembly:
	0x0331951C MOV X2, X31
	0x03319520 MOV X20, X0
	0x03319524 BL 0x337B498
	0x03319528 ADRP X0, 0xE0F000
	0x0331952C LDR X0, [X0 + 0x50]

ISIL:
	001 And W31, W0, 1
	002 Move D0, X31
	003 Move D1, 1
	004 NotImplemented "Instruction FCSEL not yet implemented."
	005 Return V0

Method: System.Decimal ToDecimal(System.Object value, System.IFormatProvider provider)

Disassembly:
	0x03322B64 B.LE 0x3322C40
	0x03322B68 MOV W11, W31
	0x03322B6C MOVZ W12, 0xD
	0x03322B70 MOVZ W13, 0xA
	0x03322B74 TBZ X21, 0x0, 0x3322B98
	0x03322B78 CMP W11, 0x4C
	0x03322B7C B.NE 0x3322B94
	0x03322B80 MOV W11, W31
	0x03322B84 ADD W14, W0, 0x1
	0x03322B88 STRH W12, [X19, W0, SXTW]
	0x03322B8C ADD W0, W0, 0x2
	0x03322B90 STRH W13, [X19, W14, SXTW]
	0x03322B94 ADD W11, W11, 0x4
	0x03322B98 LDRB W15, [X20, W22, SXTW]
	0x03322B9C ADD W16, W22, 0x1
	0x03322BA0 MOV W14, W0
	0x03322BA4 UBFM X15, X15, 0x1, 0x3F
	0x03322BA8 AND X15, X15, 0x7F
	0x03322BAC LDRH W15, [X15, X8, LSL]
	0x03322BB0 STRH W15, [X19, W0, SXTW]
	0x03322BB4 LDRB W15, [X20, W16, SXTW]
	0x03322BB8 LDRB W17, [X20, W22, SXTW]
	0x03322BBC UBFM W15, W15, 0x4, 0x1F
	0x03322BC0 BFM W15, W17, 0x1C, 0x1
	0x03322BC4 LDRH W15, [X8, W15, UXTW]
	0x03322BC8 ADD W17, W0, 0x1
	0x03322BCC STRH W15, [X19, W17, SXTW]
	0x03322BD0 ADD W15, W22, 0x2
	0x03322BD4 LDRB W17, [X20, W15, SXTW]
	0x03322BD8 LDRB W16, [X20, W16, SXTW]
	0x03322BDC ADD W22, W22, 0x3
	0x03322BE0 CMP W22, W9
	0x03322BE4 UBFM W17, W17, 0x6, 0x1F
	0x03322BE8 BFM W17, W16, 0x1E, 0x3
	0x03322BEC LDRH W16, [X8, W17, UXTW]
	0x03322BF0 ADD W17, W0, 0x2
	0x03322BF4 STRH W16, [X19, W17, SXTW]
	0x03322BF8 LDRB W15, [X20, W15, SXTW]
	0x03322BFC ADD W16, W0, 0x3
	0x03322C00 ADD W0, W0, 0x4
	0x03322C04 UBFM W15, W15, 0x1F, 0x1E
	0x03322C08 AND X15, X15, 0x7F
	0x03322C0C LDRH W15, [X15, X8, LSL]
	0x03322C10 STRH W15, [X19, W16, SXTW]
	0x03322C14 B.LT 0x3322B74
	0x03322C18 CBZ W10, 0x3322C40
	0x03322C1C TBZ X21, 0x0, 0x3322C40
	0x03322C20 CMP W11, 0x4C
	0x03322C24 B.NE 0x3322C40
	0x03322C28 MOVZ W12, 0xD
	0x03322C2C ADD W11, W14, 0x5
	0x03322C30 MOVZ W13, 0xA
	0x03322C34 STRH W12, [X19, W0, SXTW]
	0x03322C38 ADD W0, W14, 0x6
	0x03322C3C STRH W13, [X19, W11, SXTW]
	0x03322C40 CMP W10, 0x1
	0x03322C44 B.EQ 0x3322CA0
	0x03322C48 CMP W10, 0x2
	0x03322C4C B.NE 0x3322CE8
	0x03322C50 LDRB W10, [X20, W9, SXTW]
	0x03322C54 ADD W11, W9, 0x1
	0x03322C58 UBFM X10, X10, 0x1, 0x3F
	0x03322C5C AND X10, X10, 0x7F
	0x03322C60 LDRH W10, [X10, X8, LSL]
	0x03322C64 STRH W10, [X19, W0, SXTW]
	0x03322C68 LDRB W10, [X20, W11, SXTW]
	0x03322C6C LDRB W9, [X20, W9, SXTW]
	0x03322C70 UBFM W10, W10, 0x4, 0x1F
	0x03322C74 BFM W10, W9, 0x1C, 0x1
	0x03322C78 LDRH W9, [X8, W10, UXTW]
	0x03322C7C ADD W10, W0, 0x1
	0x03322C80 STRH W9, [X19, W10, SXTW]
	0x03322C84 LDRB W9, [X20, W11, SXTW]
	0x03322C88 ADD W10, W0, 0x2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x10BB000
	007 Move W8, [X20+3163]
	008 Move X19, X1
	009 Move X22, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xDFA000
	015 Move X0, [X0+1520]
	016 Call 0x1C17CF4
	017 Move X0, 0xE02000
	018 Move X0, [X0+3600]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3163], W8
	022 Compare X22, 0
	023 JumpIfEqual {53}
	024 Move X21, 0xE02000
	025 Move X21, [X21+3600]
	026 Move X0, X22
	027 Move X20, [X21]
	028 Move X1, X20
	029 Call 0x1C17E00
	030 Compare X0, 0
	031 JumpIfEqual {79}
	032 Move X21, [X21]
	033 Move X0, X22
	034 Move X1, X21
	035 Call 0x1C17E00
	036 Compare X0, 0
	037 JumpIfEqual {82}
	038 Move X8, [X0]
	039 Move X20, X0
	040 NotImplemented "Instruction LDRH not yet implemented."
	041 Compare X9, 0
	042 JumpIfEqual {49}
	043 Move X10, [X8+176]
	044 Add X10, X10, 8
	045 NotImplemented "Instruction LDUR not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Subtract X9, X9, 1
	048 Add X10, X10, 16
	049 Move W2, 13
	050 Move X0, X20
	051 Move X1, X21
	052 Call 0x1C5D788
	053 Move X19, 0xDFA000
	054 Move X19, [X19+1520]
	055 Move X0, [X19]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {61}
	059 Call 0x1C17DFC
	060 Move X0, [X19]
	061 Move X8, [X0+184]
	062 Move X0, [X8]
	063 Move X1, [X8+8]
	064 Move W9, [X10]
	065 Add W9, W9, 13
	066 Add X8, X8, W9
	067 Add X0, X8, 312
	068 Move X8, [X0]
	069 Move X2, [X0+8]
	070 Move X0, X20
	071 Move X1, X19
	072 NotImplemented "Instruction BLR not yet implemented."
	073 Move X20, [X31+32]
	074 Move X19, [X31+40]
	075 Move X22, [X31+16]
	076 Move X21, [X31+24]
	077 Move X30, [X31+48]
	078 Return X0
	079 Move X0, X22
	080 Move X1, X20
	081 Call 0x1C181E0
	082 Move X0, X22
	083 Move X1, X21
	084 Call 0x1C181E0

Method: System.Decimal ToDecimal(System.SByte value)

Disassembly:
	0x03322C8C UBFM W9, W9, 0x1D, 0x1C
	0x03322C90 AND X9, X9, 0x7F
	0x03322C94 LDRH W9, [X9, X8, LSL]
	0x03322C98 ADD X8, X8, 0x80
	0x03322C9C B 0x3322CD4
	0x03322CA0 LDRB W10, [X20, W9, SXTW]
	0x03322CA4 UBFM X10, X10, 0x1, 0x3F
	0x03322CA8 AND X10, X10, 0x7F
	0x03322CAC LDRH W10, [X10, X8, LSL]
	0x03322CB0 STRH W10, [X19, W0, SXTW]
	0x03322CB4 LDRB W9, [X20, W9, SXTW]
	0x03322CB8 ADD W10, W0, 0x1
	0x03322CBC UBFM W9, W9, 0x1B, 0x1A
	0x03322CC0 AND X9, X9, 0x7F
	0x03322CC4 LDRH W9, [X9, X8, LSL]
	0x03322CC8 STRH W9, [X19, W10, SXTW]
	0x03322CCC LDRH W9, [X8 + 0x80]!
	0x03322CD0 ADD W10, W0, 0x2
	0x03322CD4 STRH W9, [X19, W10, SXTW]
	0x03322CD8 LDRH W8, [X8]
	0x03322CDC ADD W9, W0, 0x3
	0x03322CE0 ADD W0, W0, 0x4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10BB000
	006 Move X20, 0xDFA000
	007 Move W8, [X21+3164]
	008 Move X20, [X20+1520]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDFA000
	015 Move X0, [X0+1520]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3164], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move W0, W19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call Decimal.op_Implicit, X0
	031 Return X0

Method: System.Decimal ToDecimal(System.Byte value)

Disassembly:
	0x0331B3DC BL 0x1C16D08
	0x0331B3E0 MOV X2, X0
	0x0331B3E4 MOV X0, X19
	0x0331B3E8 MOV X1, X20
	0x0331B3EC MOV X3, X31
	0x0331B3F0 BL 0x320A264
	0x0331B3F4 MOV X19, X0
	0x0331B3F8 ADRP X0, 0xDE0000
	0x0331B3FC LDR X0, [X0 + 0xC08]
	0x0331B400 BL 0x1C16D08
	0x0331B404 BL 0x1C16F10
	0x0331B408 MOV X1, X19
	0x0331B40C MOV X2, X31
	0x0331B410 MOV X20, X0
	0x0331B414 BL 0x337B498
	0x0331B418 ADRP X0, 0xE0D000
	0x0331B41C LDR X0, [X0 + 0xC8]
	0x0331B420 BL 0x1C16D08
	0x0331B424 MOV X1, X0
	0x0331B428 MOV X0, X20
	0x0331B42C BL 0x1C16DEC
	0x0331B430 STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10C2000
	006 Move X20, 0xE01000
	007 Move W8, [X21+3165]
	008 Move X20, [X20+1520]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE01000
	015 Move X0, [X0+1520]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3165], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move W0, W19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call Decimal.op_Implicit, X0
	031 Return X0

Method: System.Decimal ToDecimal(System.Int16 value)

Disassembly:
	0x03322CE4 STRH W8, [X19, W9, SXTW]
	0x03322CE8 LDP X20, X19, [X31 + 0x30]
	0x03322CEC LDP X22, X21, [X31 + 0x20]
	0x03322CF0 LDP X24, X23, [X31 + 0x10]
	0x03322CF4 LDP X30, X25, [X31], #0x40
	0x03322CF8 RET
	0x03322CFC BL 0x1C16F20
	0x03322D00 BL 0x1C16F28
	0x03322D04 STP X30, X21, [X31 - 0x20]!
	0x03322D08 STP X20, X19, [X31 + 0x10]
	0x03322D0C ADRP X20, 0x10BA000
	0x03322D10 LDRB W8, [X20 + 0xC71]
	0x03322D14 MOV X19, X0
	0x03322D18 TBNZ X8, 0x0, 0x3322D30
	0x03322D1C ADRP X0, 0xDDA000
	0x03322D20 LDR X0, [X0 + 0x9E8]
	0x03322D24 BL 0x1C16CF4
	0x03322D28 MOVZ W8, 0x1
	0x03322D2C STRB W8, [X20 + 0xC71]
	0x03322D30 CBZ X19, 0x3322D74
	0x03322D34 ADRP X20, 0xDDA000
	0x03322D38 LDR X20, [X20 + 0x9E8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10BB000
	006 Move X20, 0xDFA000
	007 Move W8, [X21+3166]
	008 Move X20, [X20+1520]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDFA000
	015 Move X0, [X0+1520]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3166], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move W0, W19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call Decimal.op_Implicit, X0
	031 Return X0

Method: System.Decimal ToDecimal(System.UInt16 value)

Disassembly:
	0x03322D3C MOV X0, X31
	0x03322D40 BL 0x32C1424
	0x03322D44 LDR X8, [X20]
	0x03322D48 LDR W20, [X19 + 0x10]
	0x03322D4C MOV W21, W0
	0x03322D50 LDR W9, [X8 + 0xE0]
	0x03322D54 CBNZ W9, 0x3322D60
	0x03322D58 MOV X0, X8
	0x03322D5C BL 0x1C16DFC
	0x03322D60 ADD X0, X19, W21, SXTW
	0x03322D64 MOV W1, W20
	0x03322D68 LDP X20, X19, [X31 + 0x10]
	0x03322D6C LDP X30, X21, [X31], #0x20
	0x03322D70 B 0x3322DB8
	0x03322D74 ADRP X0, 0xDD6000
	0x03322D78 LDR X0, [X0 + 0x528]
	0x03322D7C BL 0x1C16D08
	0x03322D80 BL 0x1C16F10
	0x03322D84 MOV X19, X0
	0x03322D88 ADRP X0, 0xDFA000
	0x03322D8C LDR X0, [X0 + 0xCC0]
	0x03322D90 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10BB000
	006 Move X20, 0xDFA000
	007 Move W8, [X21+3167]
	008 Move X20, [X20+1520]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDFA000
	015 Move X0, [X0+1520]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3167], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move W0, W19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call Decimal.op_Implicit, X0
	031 Return X0

Method: System.Decimal ToDecimal(System.Int32 value)

Disassembly:
	0x03322D94 MOV X1, X0
	0x03322D98 MOV X0, X19
	0x03322D9C BL 0x330E100
	0x03322DA0 ADRP X0, 0xE06000
	0x03322DA4 LDR X0, [X0 + 0x290]
	0x03322DA8 BL 0x1C16D08
	0x03322DAC MOV X1, X0
	0x03322DB0 MOV X0, X19
	0x03322DB4 BL 0x1C16DEC
	0x03322DB8 STR X30, [X31 - 0x30]!
	0x03322DBC STP X22, X21, [X31 + 0x10]
	0x03322DC0 STP X20, X19, [X31 + 0x20]
	0x03322DC4 ADRP X21, 0x10BA000
	0x03322DC8 LDRB W8, [X21 + 0xC74]
	0x03322DCC MOV W20, W1
	0x03322DD0 MOV X19, X0
	0x03322DD4 TBNZ X8, 0x0, 0x3322E10
	0x03322DD8 ADRP X0, 0xDD1000
	0x03322DDC LDR X0, [X0 + 0x618]
	0x03322DE0 BL 0x1C16CF4
	0x03322DE4 ADRP X0, 0xDDA000
	0x03322DE8 LDR X0, [X0 + 0x9E8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x10BB000
	006 Move X21, 0xDFA000
	007 Move W8, [X20+3168]
	008 Move X21, [X21+1520]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDFA000
	015 Move X0, [X0+1520]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3168], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move W0, W19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call Decimal.op_Implicit, X0
	031 Return X0

Method: System.Decimal ToDecimal(System.UInt32 value)

Disassembly:
	0x03322DEC BL 0x1C16CF4
	0x03322DF0 ADRP X0, 0xE06000
	0x03322DF4 LDR X0, [X0 + 0x298]
	0x03322DF8 BL 0x1C16CF4
	0x03322DFC ADRP X0, 0xE00000
	0x03322E00 LDR X0, [X0 + 0x2F8]
	0x03322E04 BL 0x1C16CF4
	0x03322E08 MOVZ W8, 0x1
	0x03322E0C STRB W8, [X21 + 0xC74]
	0x03322E10 ADRP X8, 0xDDA000
	0x03322E14 LDR X8, [X8 + 0x9E8]
	0x03322E18 CMP W20, 0x1
	0x03322E1C STR W31, [X31 + 0xC]
	0x03322E20 B.LT 0x3322E6C
	0x03322E24 ADD X10, X19, W20, 0x1, UXTW
	0x03322E28 MOVZ X11, 0x2600
	0x03322E2C MOV W20, W20
	0x03322E30 MOVZ W9, 0x1
	0x03322E34 SUB X10, X10, 0x2
	0x03322E38 MOVK X11, 0x1
	0x03322E3C LDRH W12, [X10]
	0x03322E40 CMP W12, 0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x10BB000
	006 Move X21, 0xDFA000
	007 Move W8, [X20+3169]
	008 Move X21, [X21+1520]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDFA000
	015 Move X0, [X0+1520]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3169], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move W0, W19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call Decimal.op_Implicit, X0
	031 Return X0

Method: System.Decimal ToDecimal(System.Int64 value)

Disassembly:
	0x03322E44 B.HI 0x3322E6C
	0x03322E48 LSLV X12, X9, X12
	0x03322E4C ANDS X31, X12, X11, 0x0
	0x03322E50 B.EQ 0x3322E6C
	0x03322E54 SUB X20, X20, 0x1
	0x03322E58 ADD X12, X20, 0x1
	0x03322E5C CMP X12, 0x1
	0x03322E60 SUB X10, X10, 0x2
	0x03322E64 B.GT 0x3322E3C
	0x03322E68 MOV W20, W31
	0x03322E6C LDR X0, [X8]
	0x03322E70 ADRP X21, 0xDD1000
	0x03322E74 LDR W8, [X0 + 0xE0]
	0x03322E78 LDR X21, [X21 + 0x618]
	0x03322E7C CBNZ W8, 0x3322E84
	0x03322E80 BL 0x1C16DFC
	0x03322E84 ADRP X22, 0xE00000
	0x03322E88 LDR X22, [X22 + 0x2F8]
	0x03322E8C MOV X0, X19
	0x03322E90 MOV W1, W20
	0x03322E94 BL 0x3323564
	0x03322E98 LDR X8, [X21]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x10BB000
	006 Move X21, 0xDFA000
	007 Move W8, [X20+3170]
	008 Move X21, [X21+1520]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDFA000
	015 Move X0, [X0+1520]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3170], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call Decimal.op_Implicit, X0
	031 Return X0

Method: System.Decimal ToDecimal(System.UInt64 value)

Disassembly:
	0x03322E9C MOV W1, W0
	0x03322EA0 MOV X0, X8
	0x03322EA4 BL 0x1C16D6C
	0x03322EA8 MOV X21, X0
	0x03322EAC TBZ X20, 0x1F, 0x3322EB8
	0x03322EB0 MOV X0, X31
	0x03322EB4 BL 0x339D6EC
	0x03322EB8 LDR X1, [X22]
	0x03322EBC MOV X0, X21
	0x03322EC0 MOV W20, W20
	0x03322EC4 BL 0x25FB4C0
	0x03322EC8 MOV X2, X0
	0x03322ECC MOV X3, X1
	0x03322ED0 ADD X4, X31, 0xC
	0x03322ED4 MOV X0, X19
	0x03322ED8 MOV X1, X20
	0x03322EDC BL 0x3322F40
	0x03322EE0 TBZ X0, 0x0, 0x3322EF8
	0x03322EE4 MOV X0, X21
	0x03322EE8 LDP X20, X19, [X31 + 0x20]
	0x03322EEC LDP X22, X21, [X31 + 0x10]
	0x03322EF0 LDR X30, [X31], #0x30

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x10BB000
	006 Move X21, 0xDFA000
	007 Move W8, [X20+3171]
	008 Move X21, [X21+1520]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDFA000
	015 Move X0, [X0+1520]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3171], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call Decimal.op_Implicit, X0
	031 Return X0

Method: System.Decimal ToDecimal(System.Single value)

Disassembly:
	0x03322EF4 RET
	0x03322EF8 ADRP X0, 0xDFE000
	0x03322EFC LDR X0, [X0 + 0xC08]
	0x03322F00 BL 0x1C16D08
	0x03322F04 BL 0x1C16F10
	0x03322F08 MOV X19, X0
	0x03322F0C ADRP X0, 0xE06000
	0x03322F10 LDR X0, [X0 + 0x2A0]
	0x03322F14 BL 0x1C16D08
	0x03322F18 MOV X1, X0
	0x03322F1C MOV X0, X19
	0x03322F20 MOV X2, X31
	0x03322F24 BL 0x33674A0
	0x03322F28 ADRP X0, 0xE06000
	0x03322F2C LDR X0, [X0 + 0x2A8]
	0x03322F30 BL 0x1C16D08
	0x03322F34 MOV X1, X0
	0x03322F38 MOV X0, X19
	0x03322F3C BL 0x1C16DEC
	0x03322F40 STP X29, X30, [X31 - 0x60]!
	0x03322F44 STP X28, X27, [X31 + 0x10]
	0x03322F48 STP X26, X25, [X31 + 0x20]
	0x03322F4C STP X24, X23, [X31 + 0x30]
	0x03322F50 STP X22, X21, [X31 + 0x40]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10BB000
	006 Move X20, 0xDFA000
	007 Move W8, [X19+3172]
	008 Move X20, [X20+1520]
	009 Move V8, V0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDFA000
	015 Move X0, [X0+1520]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+3172], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+8]
	027 Move V0, V8
	028 Move X0, X31
	029 Move V8, [X31+32]
	030 Call Decimal.op_Explicit, V0
	031 Return X0

Method: System.Decimal ToDecimal(System.Double value)

Disassembly:
	0x03322F54 STP X20, X19, [X31 + 0x50]
	0x03322F58 ADD X29, X31, 0x0
	0x03322F5C SUB X31, X31, 0x50
	0x03322F60 ADRP X22, 0x10BA000
	0x03322F64 LDRB W8, [X22 + 0xC72]
	0x03322F68 MOV X20, X3
	0x03322F6C MOV X26, X1
	0x03322F70 MOV X25, X0
	0x03322F74 AND X21, X1, 0x0
	0x03322F78 AND X19, X3, 0x0
	0x03322F7C STP X4, X2, [X29 - 0x28]
	0x03322F80 TBNZ X8, 0x0, 0x3322FE0
	0x03322F84 ADRP X0, 0xDDA000
	0x03322F88 LDR X0, [X0 + 0x9E8]
	0x03322F8C BL 0x1C16CF4
	0x03322F90 ADRP X0, 0xE05000
	0x03322F94 LDR X0, [X0 + 0x7E8]
	0x03322F98 BL 0x1C16CF4
	0x03322F9C ADRP X0, 0xE00000
	0x03322FA0 LDR X0, [X0 + 0x28]
	0x03322FA4 BL 0x1C16CF4
	0x03322FA8 ADRP X0, 0xE05000
	0x03322FAC LDR X0, [X0 + 0x28]
	0x03322FB0 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10BB000
	006 Move X20, 0xDFA000
	007 Move W8, [X19+3173]
	008 Move X20, [X20+1520]
	009 Move V8, V0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDFA000
	015 Move X0, [X0+1520]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+3173], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+8]
	027 Move V0, V8
	028 Move X0, X31
	029 Move V8, [X31+32]
	030 Call Decimal.op_Explicit, V0
	031 Return X0

Method: System.Decimal ToDecimal(System.String value, System.IFormatProvider provider)

Disassembly:
	0x03322FB4 ADRP X0, 0xDFF000
	0x03322FB8 LDR X0, [X0 + 0x850]
	0x03322FBC BL 0x1C16CF4
	0x03322FC0 ADRP X0, 0xE00000
	0x03322FC4 LDR X0, [X0 + 0x4E8]
	0x03322FC8 BL 0x1C16CF4
	0x03322FCC ADRP X0, 0xDFF000
	0x03322FD0 LDR X0, [X0 + 0x858]
	0x03322FD4 BL 0x1C16CF4
	0x03322FD8 MOVZ W8, 0x1
	0x03322FDC STRB W8, [X22 + 0xC72]
	0x03322FE0 ADRP X27, 0xDDA000
	0x03322FE4 LDR X27, [X27 + 0x9E8]
	0x03322FE8 ADD X8, X31, 0x0
	0x03322FEC SUB X9, X8, 0x10
	0x03322FF0 STP X31, X31, [X29 - 0x10]
	0x03322FF4 STUR X31, [X29 - 0x18]
	0x03322FF8 STUR X9, [X29 - 0x38]
	0x03322FFC ADD X31, X9, 0x0
	0x03323000 STUR X31, [X8 - 0x10]
	0x03323004 LDUR X8, [X29 - 0x28]
	0x03323008 MOVZ X24, 0x2600
	0x0332300C MOVZ W22, 0x1
	0x03323010 MOVK X24, 0x1
	0x03323014 STR W31, [X8]
	0x03323018 MOVZ W8, 0x4
	0x0332301C CBZ W26, 0x33233EC
	0x03323020 MOV X23, X25
	0x03323024 STUR X8, [X29 - 0x30]
	0x03323028 LDR X0, [X27]
	0x0332302C MOV W28, W26
	0x03323030 MOV W25, W20
	0x03323034 LDR W8, [X0 + 0xE0]
	0x03323038 CBNZ W8, 0x3323040

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x10BB000
	007 Move X21, 0xDFA000
	008 Move W8, [X22+3174]
	009 Move X21, [X21+1520]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xDFA000
	017 Move X0, [X0+1520]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3174], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfEqual {32}
	025 Compare X20, 0
	026 JumpIfEqual {35}
	027 Move W1, 111
	028 Move X0, X20
	029 Move X2, X19
	030 Move X3, X31
	031 Call Decimal.Parse, X0, X1, X2
	032 Call 0x1C17DFC
	033 Compare X20, 0
	034 JumpIfNotEqual {27}
	035 Move X8, [X21]
	036 Move X8, [X8+184]
	037 Move X0, [X8]
	038 Move X1, [X8+8]
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Return X0

Method: System.Decimal ToDecimal(System.Boolean value)

Disassembly:
	0x0331958C LDR X0, [X0]
	0x03319590 BL 0x1C16CF4
	0x03319594 MOVZ W8, 0x1
	0x03319598 STRB W8, [X22 + 0xBB0]
	0x0331959C LDR X8, [X20]
	0x033195A0 LDR X9, [X21]
	0x033195A4 LDP X22, X21, [X31 + 0x10]
	0x033195A8 LDR X8, [X8 + 0xB8]
	0x033195AC STR X9, [X8]
	0x033195B0 LDR X8, [X20]
	0x033195B4 LDR X9, [X19]
	0x033195B8 LDP X20, X19, [X31 + 0x20]
	0x033195BC LDR X8, [X8 + 0xB8]
	0x033195C0 STR X9, [X8 + 0x8]
	0x033195C4 LDR X30, [X31], #0x30
	0x033195C8 RET
	0x033195CC STP X30, X21, [X31 - 0x20]!
	0x033195D0 STP X20, X19, [X31 + 0x10]
	0x033195D4 ADRP X21, 0x10C3000
	0x033195D8 LDRB W8, [X21 + 0xBB1]
	0x033195DC MOV X19, X1
	0x033195E0 MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x10C4000
	006 Move X21, 0xE03000
	007 Move W8, [X20+3175]
	008 Move X21, [X21+1520]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE03000
	015 Move X0, [X0+1520]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3175], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 And W0, W19, 1
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call Decimal.op_Implicit, X0
	031 Return X0

Method: System.DateTime ToDateTime(System.String value, System.IFormatProvider provider)

Disassembly:
	0x0332303C BL 0x1C16DFC
	0x03323040 LDUR X2, [X29 - 0x20]
	0x03323044 ORR X1, X21, X28, 0x0
	0x03323048 ORR X3, X19, X25, 0x0
	0x0332304C SUB X4, X29, 0x4
	0x03323050 SUB X5, X29, 0x8
	0x03323054 MOV X0, X23
	0x03323058 BL 0x331C4D8
	0x0332305C LDUR X9, [X29 - 0x28]
	0x03323060 LDURSW X19, [X29 - 0x8]
	0x03323064 LDR W8, [X9]
	0x03323068 ADD W8, W19, W8
	0x0332306C STR W8, [X9]
	0x03323070 TBNZ X0, 0x0, 0x33233EC
	0x03323074 ADRP X8, 0xE04000
	0x03323078 LDURSW X28, [X29 - 0x4]
	0x0332307C LDR X8, [X8 + 0x7E8]
	0x03323080 CMP W26, W28
	0x03323084 LDR X21, [X8]
	0x03323088 B.CS 0x3323094
	0x0332308C MOV X0, X31
	0x03323090 BL 0x339D6EC
	0x03323094 LDR X0, [X21 + 0x20]
	0x03323098 LDRB W8, [X0 + 0x135]
	0x0332309C TBNZ X8, 0x0, 0x33230A4
	0x033230A0 BL 0x1C5C684
	0x033230A4 ADRP X8, 0xE04000
	0x033230A8 LDR X8, [X8 + 0x28]
	0x033230AC CMP W20, W19
	0x033230B0 LDR X21, [X8]
	0x033230B4 B.CS 0x33230C0
	0x033230B8 MOV X0, X31
	0x033230BC BL 0x339D6EC
	0x033230C0 LDR X0, [X21 + 0x20]
	0x033230C4 SUB W26, W26, W28
	0x033230C8 LDRB W8, [X0 + 0x135]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x10BA000
	007 Move W8, [X21+3176]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDD2000
	015 Move X0, [X0+2544]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3176], W8
	019 Compare X20, 0
	020 JumpIfEqual {33}
	021 Move X8, 0xDD2000
	022 Move X8, [X8+2544]
	023 Move X0, [X8]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X19
	030 Move X2, X31
	031 Call DateTime.Parse, X0, X1
	032 Move [X31+8], X0
	033 Add X0, X31, 8
	034 Move X1, X31
	035 Move X2, X31
	036 Move [X31+8], X31
	037 Call DateTime..ctor, X0, X1
	038 Move X0, [X31+8]
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+16]
	042 Move X21, [X31+24]
	043 Add X31, X31, 48
	044 Return X0

Method: System.String ToString(System.Object value, System.IFormatProvider provider)

Disassembly:
	0x033230CC TBNZ X8, 0x0, 0x33230D4
	0x033230D0 BL 0x1C5C684
	0x033230D4 CBZ W26, 0x3323410
	0x033230D8 LDR X0, [X27]
	0x033230DC ADD X25, X23, X28, 0x1, LSL
	0x033230E0 LDRH W21, [X25]
	0x033230E4 LDR W8, [X0 + 0xE0]
	0x033230E8 CBNZ W8, 0x33230F0
	0x033230EC BL 0x1C16DFC
	0x033230F0 LDUR X8, [X29 - 0x20]
	0x033230F4 SUB W20, W20, W19
	0x033230F8 CMP W21, 0x20
	0x033230FC ADD X8, X8, X19
	0x03323100 STUR X8, [X29 - 0x20]
	0x03323104 B.HI 0x33231E0
	0x03323108 MOV W8, W21
	0x0332310C LSLV X8, X22, X8
	0x03323110 ANDS X31, X8, X24, 0x0
	0x03323114 B.EQ 0x33231E0
	0x03323118 CMP W26, 0x1
	0x0332311C B.EQ 0x3323164
	0x03323120 MOVZ W23, 0x1
	0x03323124 CMP W26, W23
	0x03323128 B.EQ 0x3323410
	0x0332312C LDR X0, [X27]
	0x03323130 LDRH W21, [X25, W23, SXTW]
	0x03323134 LDR W8, [X0 + 0xE0]
	0x03323138 CBNZ W8, 0x3323140
	0x0332313C BL 0x1C16DFC
	0x03323140 CMP W21, 0x20
	0x03323144 B.HI 0x33231C0
	0x03323148 MOV W8, W21
	0x0332314C LSLV X8, X22, X8
	0x03323150 ANDS X31, X8, X24, 0x0
	0x03323154 B.EQ 0x33231C0
	0x03323158 ADD W23, W23, 0x1
	0x0332315C CMP W26, W23
	0x03323160 B.NE 0x3323124
	0x03323164 ADRP X8, 0xE04000
	0x03323168 LDR X8, [X8 + 0x7E8]
	0x0332316C MOV W23, W26
	0x03323170 LDR X21, [X8]
	0x03323174 LDR X0, [X21 + 0x20]
	0x03323178 LDRB W8, [X0 + 0x135]
	0x0332317C TBNZ X8, 0x0, 0x3323184
	0x03323180 BL 0x1C5C684
	0x03323184 MOVZ W8, 0xAAAB
	0x03323188 MOVZ W9, 0xAAAA
	0x0332318C MOVK W8, 0xAAAA0000
	0x03323190 MOVK W9, 0x2AAA0000
	0x03323194 MADD W8, W19, W8, W9
	0x03323198 MOVZ W9, 0x5554
	0x0332319C MOVK W9, 0x55550000
	0x033231A0 CMP W8, W9
	0x033231A4 SUB W26, W26, W23
	0x033231A8 B.HI 0x33233D8
	0x033231AC MOV X21, X31
	0x033231B0 MOV X19, X31
	0x033231B4 ADD X23, X25, W23, 0x1, SXTW
	0x033231B8 CBNZ W26, 0x3323028
	0x033231BC B 0x33233EC
	0x033231C0 ADRP X8, 0xE04000
	0x033231C4 LDR X8, [X8 + 0x7E8]
	0x033231C8 CMP W26, W23
	0x033231CC LDR X21, [X8]
	0x033231D0 B.CS 0x3323174
	0x033231D4 MOV X0, X31
	0x033231D8 BL 0x339D6EC
	0x033231DC B 0x3323174
	0x033231E0 LDR X0, [X27]
	0x033231E4 MOV W19, W26
	0x033231E8 LDR W8, [X0 + 0xE0]
	0x033231EC CBNZ W8, 0x33231F4
	0x033231F0 BL 0x1C16DFC
	0x033231F4 MOV X1, X19
	0x033231F8 LDP X21, X19, [X29 - 0x38]
	0x033231FC SUB X4, X29, 0xC
	0x03323200 SUB X5, X29, 0x10
	0x03323204 MOV X0, X25
	0x03323208 MOV X2, X21
	0x0332320C MOV X3, X19
	0x03323210 BL 0x3323414
	0x03323214 LDUR W1, [X29 - 0x10]
	0x03323218 ANDS W31, W1, 0x3
	0x0332321C B.NE 0x33233DC
	0x03323220 ADRP X8, 0xDFE000
	0x03323224 LDR X8, [X8 + 0x850]
	0x03323228 CMP W1, W19
	0x0332322C STUR X1, [X29 - 0x30]
	0x03323230 LDR X8, [X8]
	0x03323234 B.LS 0x332324C
	0x03323238 MOV X0, X31
	0x0332323C MOV X19, X8
	0x03323240 BL 0x339D6EC
	0x03323244 LDUR X1, [X29 - 0x30]
	0x03323248 MOV X8, X19
	0x0332324C LDR X0, [X8 + 0x20]
	0x03323250 LDRB W8, [X0 + 0x135]
	0x03323254 TBNZ X8, 0x0, 0x3323260
	0x03323258 BL 0x1C5C684
	0x0332325C LDUR X1, [X29 - 0x30]
	0x03323260 ADRP X8, 0xDFE000
	0x03323264 LDR X8, [X8 + 0x858]
	0x03323268 MOV X0, X21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x10BA000
	007 Move X22, 0xE01000
	008 Move W8, [X20+3177]
	009 Move X22, [X22+3600]
	010 Move X19, X1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xE01000
	017 Move X0, [X0+3600]
	018 Call 0x1C17CF4
	019 Move X0, 0xDFB000
	020 Move X0, [X0+3832]
	021 Call 0x1C17CF4
	022 Move X0, 0xDD3000
	023 Move X0, [X0+632]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+3177], W8
	027 Move X1, [X22]
	028 Move X0, X21
	029 Call 0x1C17E00
	030 Compare X0, 0
	031 JumpIfEqual {47}
	032 Move X8, [X0]
	033 Move X1, [X22]
	034 Move X20, X0
	035 NotImplemented "Instruction LDRH not yet implemented."
	036 Compare X9, 0
	037 JumpIfEqual {44}
	038 Move X10, [X8+176]
	039 Add X10, X10, 8
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Subtract X9, X9, 1
	043 Add X10, X10, 16
	044 Move W2, 15
	045 Move X0, X20
	046 Call 0x1C5D788
	047 Move X22, 0xDFB000
	048 Move X22, [X22+3832]
	049 Move X0, X21
	050 Move X1, [X22]
	051 Call 0x1C17E00
	052 Compare X0, 0
	053 JumpIfEqual {83}
	054 Move X8, [X0]
	055 Move X1, [X22]
	056 Move X20, X0
	057 NotImplemented "Instruction LDRH not yet implemented."
	058 Compare X9, 0
	059 JumpIfEqual {66}
	060 Move X10, [X8+176]
	061 Add X10, X10, 8
	062 NotImplemented "Instruction LDUR not yet implemented."
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Subtract X9, X9, 1
	065 Add X10, X10, 16
	066 Move X0, X20
	067 Move W2, W31
	068 Call 0x1C5D788
	069 Move W9, [X10]
	070 Add W9, W9, 15
	071 Add X8, X8, W9
	072 Add X0, X8, 312
	073 Move X3, [X0]
	074 Move X2, [X0+8]
	075 Move X0, X20
	076 Move X1, X19
	077 Move X20, [X31+32]
	078 Move X19, [X31+40]
	079 Move X22, [X31+16]
	080 Move X21, [X31+24]
	081 Move X30, [X31+48]
	082 CallNoReturn X3
	083 Compare X21, 0
	084 JumpIfEqual {109}
	085 Move X8, [X21]
	086 Move X0, X21
	087 Move X20, [X31+32]
	088 Move X19, [X31+40]
	089 Move X22, [X31+16]
	090 Move X21, [X31+24]
	091 Move X2, [X8+360]
	092 Move X1, [X8+368]
	093 Move X30, [X31+48]
	094 CallNoReturn X2
	095 NotImplemented "Instruction LDRSW not yet implemented."
	096 Add X8, X8, X9
	097 Add X0, X8, 312
	098 Move X4, [X0]
	099 Move X3, [X0+8]
	100 Move X0, X20
	101 Move X2, X19
	102 Move X20, [X31+32]
	103 Move X19, [X31+40]
	104 Move X22, [X31+16]
	105 Move X21, [X31+24]
	106 Move X1, X31
	107 Move X30, [X31+48]
	108 CallNoReturn X4
	109 Move X8, 0xDD3000
	110 Move X8, [X8+632]
	111 Move X20, [X31+32]
	112 Move X19, [X31+40]
	113 Move X22, [X31+16]
	114 Move X21, [X31+24]
	115 Move X8, [X8]
	116 Move X8, [X8+184]
	117 Move X0, [X8]
	118 Move X30, [X31+48]
	119 Return X0

Method: System.String ToString(System.Char value, System.IFormatProvider provider)

Disassembly:
	0x0332326C MOV W19, W20
	0x03323270 LDR X2, [X8]
	0x03323274 BL 0x25FB81C
	0x03323278 MOV X21, X0
	0x0332327C LDR X0, [X27]
	0x03323280 LDR W8, [X0 + 0xE0]
	0x03323284 CBNZ W8, 0x3323294
	0x03323288 STUR X1, [X29 - 0x40]
	0x0332328C BL 0x1C16DFC
	0x03323290 LDUR X1, [X29 - 0x40]
	0x03323294 LDUR X2, [X29 - 0x20]
	0x03323298 SUB X4, X29, 0x14
	0x0332329C SUB X5, X29, 0x18
	0x033232A0 MOV X0, X21
	0x033232A4 MOV X3, X19
	0x033232A8 BL 0x331C4D8
	0x033232AC TBZ X0, 0x0, 0x33233DC
	0x033232B0 LDUR X9, [X29 - 0x28]
	0x033232B4 LDURSW X10, [X29 - 0x18]
	0x033232B8 LDR W8, [X9]
	0x033232BC STUR X10, [X29 - 0x40]
	0x033232C0 ADD W8, W10, W8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x10BA000
	005 NotImplemented "Instruction STRH not yet implemented."
	006 Move X20, 0xDD3000
	007 Move W8, [X19+3178]
	008 Move X20, [X20+368]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xDD3000
	014 Move X0, [X0+368]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X19+3178], W8
	018 Move X0, [X20]
	019 Move W8, [X0+224]
	020 Compare W8, 0
	021 JumpIfNotEqual {23}
	022 Call 0x1C17DFC
	023 Add X0, X31, 12
	024 Call Char.ToString, X0
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.String ToString(System.Int32 value, System.IFormatProvider provider)

Disassembly:
	0x033232C4 STR W8, [X9]
	0x033232C8 ADRP X8, 0xE04000
	0x033232CC LDURSW X21, [X29 - 0xC]
	0x033232D0 LDR X8, [X8 + 0x7E8]
	0x033232D4 CMP W26, W21
	0x033232D8 LDR X19, [X8]
	0x033232DC B.CS 0x33232E8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31+12], W0
	003 Add X0, X31, 12
	004 Move X2, X31
	005 Call Int32.ToString, X0, X1
	006 Move X30, [X31+16]
	007 Return X0

Method: System.String ToString(System.Int64 value)

Disassembly:
	0x033232E0 MOV X0, X31
	0x033232E4 BL 0x339D6EC
	0x033232E8 LDR X0, [X19 + 0x20]
	0x033232EC LDRB W8, [X0 + 0x135]
	0x033232F0 TBNZ X8, 0x0, 0x33232F8
	0x033232F4 BL 0x1C5C684
	0x033232F8 ADRP X8, 0xE04000
	0x033232FC LDR X8, [X8 + 0x28]
	0x03323300 LDR X19, [X8]
	0x03323304 LDUR X8, [X29 - 0x40]
	0x03323308 CMP W20, W8
	0x0332330C B.CS 0x3323318
	0x03323310 MOV X0, X31
	0x03323314 BL 0x339D6EC
	0x03323318 LDR X0, [X19 + 0x20]
	0x0332331C SUB W26, W26, W21
	0x03323320 STUR X21, [X29 - 0x48]
	0x03323324 LDRB W8, [X0 + 0x135]
	0x03323328 TBNZ X8, 0x0, 0x3323330
	0x0332332C BL 0x1C5C684
	0x03323330 LDP X8, X10, [X29 - 0x48]
	0x03323334 MOVZ W9, 0xAAAA
	0x03323338 MOVK W9, 0x2AAA0000
	0x0332333C MOV X19, X31
	0x03323340 ADD X25, X25, X8, 0x1, LSL
	0x03323344 MOVZ W8, 0xAAAB

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x10BA000
	005 Move [X31+8], X0
	006 Move X20, 0xDD3000
	007 Move W8, [X19+3179]
	008 Move X20, [X20+3144]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xDD3000
	014 Move X0, [X0+3144]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X19+3179], W8
	018 Move X0, [X20]
	019 Move W8, [X0+224]
	020 Compare W8, 0
	021 JumpIfNotEqual {23}
	022 Call 0x1C17DFC
	023 Move X0, X31
	024 Call CultureInfo.get_CurrentCulture
	025 Move X1, X0
	026 Add X0, X31, 8
	027 Move X2, X31
	028 Call Int64.ToString, X0, X1
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Return X0

Method: System.Int32 ToInt32(System.String value, System.Int32 fromBase)

Disassembly:
	0x03323348 MOVK W8, 0xAAAA0000
	0x0332334C MADD W8, W10, W8, W9
	0x03323350 ORR W9, W31, 0x55555555
	0x03323354 CMP W8, W9
	0x03323358 LDUR X8, [X29 - 0x20]
	0x0332335C MOV X21, X31
	0x03323360 SUB W20, W20, W10
	0x03323364 ADD X8, X8, X10
	0x03323368 STUR X8, [X29 - 0x20]
	0x0332336C LDUR X8, [X29 - 0x30]
	0x03323370 B.CC 0x332301C
	0x03323374 CMP W26, 0x1
	0x03323378 B.LT 0x33233EC
	0x0332337C LDUR X8, [X29 - 0x48]
	0x03323380 MOVZ X22, 0x2600
	0x03323384 MOV W19, W26
	0x03323388 MOVZ W20, 0x1
	0x0332338C ADD X8, X23, X8, 0x1, LSL
	0x03323390 ADD X21, X8, X28, 0x1, LSL
	0x03323394 MOVK X22, 0x1
	0x03323398 LDR X0, [X27]
	0x0332339C LDRH W23, [X21]
	0x033233A0 LDR W8, [X0 + 0xE0]
	0x033233A4 CBNZ W8, 0x33233AC
	0x033233A8 BL 0x1C16DFC
	0x033233AC CMP W23, 0x20
	0x033233B0 B.HI 0x33233DC
	0x033233B4 MOV W8, W23
	0x033233B8 LSLV X8, X20, X8
	0x033233BC ANDS X31, X8, X22, 0x0
	0x033233C0 B.EQ 0x33233DC
	0x033233C4 ADD X21, X21, 0x2
	0x033233C8 SUBS X19, X19, 0x1
	0x033233CC MOVZ W0, 0x1
	0x033233D0 B.NE 0x3323398
	0x033233D4 B 0x33233F0
	0x033233D8 CBZ W26, 0x33233EC
	0x033233DC LDUR X8, [X29 - 0x28]
	0x033233E0 MOV W0, W31
	0x033233E4 STR W31, [X8]
	0x033233E8 B 0x33233F0
	0x033233EC MOVZ W0, 0x1
	0x033233F0 ADD X31, X29, 0x0
	0x033233F4 LDP X20, X19, [X31 + 0x50]
	0x033233F8 LDP X22, X21, [X31 + 0x40]
	0x033233FC LDP X24, X23, [X31 + 0x30]
	0x03323400 LDP X26, X25, [X31 + 0x20]
	0x03323404 LDP X28, X27, [X31 + 0x10]
	0x03323408 LDP X29, X30, [X31], #0x60
	0x0332340C RET
	0x03323410 BL 0x1C16F28
	0x03323414 SUB X31, X31, 0x70
	0x03323418 STP X29, X30, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Subtract W8, W1, 2
	006 NotImplemented "Instruction EXTR not yet implemented."
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move W9, 1
	009 NotImplemented "Instruction LSLV not yet implemented."
	010 Move W9, 153
	011 And W31, W8, W9
	012 Move X20, X0
	013 Compare X0, 0
	014 JumpIfEqual {38}
	015 Move X21, 0x10BA000
	016 Move W8, [X21+939]
	017 Move W19, W1
	018 Compare W8, 0
	019 JumpIfNotEqual {25}
	020 Move X0, 0xDF8000
	021 Move X0, [X0+656]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+939], W8
	025 Move X0, X20
	026 Move X1, X31
	027 Call String.GetRawStringData, X0
	028 Move W1, [X20+16]
	029 Move W2, W19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move W3, 4096
	033 Move X4, X31
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call ParseNumbers.StringToInt, X0, X1, X2
	037 Return X0
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move W0, W31
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Return X0
	044 Move X0, 0xDD9000
	045 Move X0, [X0+1400]
	046 Call 0x1C17D08
	047 Call 0x1C17F10
	048 Move X19, X0
	049 Move X0, 0xE06000
	050 Move X0, [X0+568]
	051 Call 0x1C17D08
	052 Move X1, X0
	053 Move X0, X19
	054 Call ArgumentException..ctor, X0, X1
	055 Move X0, 0xE06000
	056 Move X0, [X0+576]
	057 Call 0x1C17D08
	058 Move X1, X0
	059 Move X0, X19
	060 Call 0x1C17DEC

Method: System.String ToString(System.Byte value, System.Int32 toBase)

Disassembly:
	0x0332341C STP X28, X27, [X31 + 0x20]
	0x03323420 STP X26, X25, [X31 + 0x30]
	0x03323424 STP X24, X23, [X31 + 0x40]
	0x03323428 STP X22, X21, [X31 + 0x50]
	0x0332342C STP X20, X19, [X31 + 0x60]
	0x03323430 ADRP X19, 0x10B9000
	0x03323434 LDRB W8, [X19 + 0xC73]
	0x03323438 MOV X21, X5
	0x0332343C MOV X25, X4
	0x03323440 MOV X22, X3
	0x03323444 MOV X23, X2
	0x03323448 MOV X20, X1
	0x0332344C MOV X24, X0
	0x03323450 TBNZ X8, 0x0, 0x3323480
	0x03323454 ADRP X0, 0xDD9000
	0x03323458 LDR X0, [X0 + 0x9E8]
	0x0332345C BL 0x1C16CF4
	0x03323460 ADRP X0, 0xDFF000
	0x03323464 LDR X0, [X0 + 0x28]
	0x03323468 BL 0x1C16CF4
	0x0332346C ADRP X0, 0xDFF000
	0x03323470 LDR X0, [X0 + 0x588]
	0x03323474 BL 0x1C16CF4
	0x03323478 MOVZ W8, 0x1
	0x0332347C STRB W8, [X19 + 0xC73]
	0x03323480 CMP W20, 0x1
	0x03323484 STR W31, [X21]
	0x03323488 B.LT 0x3323510
	0x0332348C STR X25, [X31 + 0x8]
	0x03323490 ADRP X26, 0xDD9000
	0x03323494 LDR X26, [X26 + 0x9E8]
	0x03323498 MOVZ X29, 0x2600
	0x0332349C MOV X25, X31

ISIL:
	001 Subtract W8, W1, 2
	002 NotImplemented "Instruction EXTR not yet implemented."
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move W9, 1
	005 NotImplemented "Instruction LSLV not yet implemented."
	006 Move W9, 153
	007 And W31, W8, W9
	008 And W0, W0, 255
	009 Move TEMP, 0
	010 Not TEMP
	011 Move W2, TEMP
	012 Move W3, 32
	013 Move W4, 64
	014 Move X5, X31
	015 Call ParseNumbers.IntToString, X0, X1, X2, X3, X4
	016 Return X0
	017 Move [X31-16], X30
	018 Move [X31-8], X19
	019 Move X0, 0xDD9000
	020 Move X0, [X0+1400]
	021 Call 0x1C17D08
	022 Call 0x1C17F10
	023 Move X19, X0
	024 Move X0, 0xE06000
	025 Move X0, [X0+568]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call ArgumentException..ctor, X0, X1
	030 Move X0, 0xE06000
	031 Move X0, [X0+584]
	032 Call 0x1C17D08
	033 Move X1, X0
	034 Move X0, X19
	035 Call 0x1C17DEC

Method: System.String ToString(System.Int32 value, System.Int32 toBase)

Disassembly:
	0x033234A0 AND X27, X20, 0x0
	0x033234A4 MOVZ W28, 0x1
	0x033234A8 MOVK X29, 0x1
	0x033234AC LDR X0, [X26]
	0x033234B0 LDRH W19, [X24, X25, LSL #1]
	0x033234B4 LDR W8, [X0 + 0xE0]
	0x033234B8 CBNZ W8, 0x33234C0
	0x033234BC BL 0x1C16DFC
	0x033234C0 CMP W19, 0x20
	0x033234C4 B.HI 0x33234E8
	0x033234C8 MOV W8, W19
	0x033234CC LSLV X8, X28, X8
	0x033234D0 ANDS X31, X8, X29, 0x0
	0x033234D4 B.EQ 0x33234E8
	0x033234D8 ADD X25, X25, 0x1
	0x033234DC CMP X27, X25
	0x033234E0 B.NE 0x33234AC
	0x033234E4 B 0x332350C
	0x033234E8 LDRSW X8, [X21]
	0x033234EC ADD W9, W8, 0x1
	0x033234F0 CMP W8, W22
	0x033234F4 STR W9, [X21]
	0x033234F8 B.CS 0x3323534
	0x033234FC CMP W9, W22
	0x03323500 STRH W19, [X23, X8, LSL #1]
	0x03323504 B.NE 0x33234D8
	0x03323508 ADD W20, W25, 0x1
	0x0332350C LDR X25, [X31 + 0x8]
	0x03323510 STR W20, [X25]
	0x03323514 LDP X20, X19, [X31 + 0x60]
	0x03323518 LDP X22, X21, [X31 + 0x50]
	0x0332351C LDP X24, X23, [X31 + 0x40]

ISIL:
	001 Subtract W8, W1, 2
	002 NotImplemented "Instruction EXTR not yet implemented."
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move W9, 1
	005 NotImplemented "Instruction LSLV not yet implemented."
	006 Move W9, 153
	007 And W31, W8, W9
	008 Move TEMP, 0
	009 Not TEMP
	010 Move W2, TEMP
	011 Move W3, 32
	012 Move W4, W31
	013 Move X5, X31
	014 Call ParseNumbers.IntToString, X0, X1, X2, X3, X4
	015 Return X0
	016 Move [X31-16], X30
	017 Move [X31-8], X19
	018 Move X0, 0xDD9000
	019 Move X0, [X0+1400]
	020 Call 0x1C17D08
	021 Call 0x1C17F10
	022 Move X19, X0
	023 Move X0, 0xE06000
	024 Move X0, [X0+568]
	025 Call 0x1C17D08
	026 Move X1, X0
	027 Move X0, X19
	028 Call ArgumentException..ctor, X0, X1
	029 Move X0, 0xE06000
	030 Move X0, [X0+592]
	031 Call 0x1C17D08
	032 Move X1, X0
	033 Move X0, X19
	034 Call 0x1C17DEC

Method: System.String ToString(System.Int64 value, System.Int32 toBase)

Disassembly:
	0x03323520 LDP X26, X25, [X31 + 0x30]
	0x03323524 LDP X28, X27, [X31 + 0x20]
	0x03323528 LDP X29, X30, [X31 + 0x10]
	0x0332352C ADD X31, X31, 0x70
	0x03323530 RET
	0x03323534 BL 0x1C16F28
	0x03323538 SUB W8, W0, 0x9
	0x0332353C AND W9, W8, 0xFFFF
	0x03323540 CMP W9, 0x17
	0x03323544 B.HI 0x332355C
	0x03323548 MOVZ W9, 0x13
	0x0332354C MOVK W9, 0x800000
	0x03323550 LSRV W8, W9, W8
	0x03323554 AND W0, W8, 0x1
	0x03323558 RET
	0x0332355C MOV W0, W31
	0x03323560 RET
	0x03323564 STP X30, X19, [X31 - 0x10]!
	0x03323568 MOV W8, W31
	0x0332356C ADD X9, X0, W1, 0x1, SXTW
	0x03323570 CMP X9, X0
	0x03323574 B.LS 0x33235A0
	0x03323578 LDRH W10, [X0], #0x2
	0x0332357C CMP W10, 0x20
	0x03323580 B.LS 0x3323598
	0x03323584 CMP W10, 0x3D
	0x03323588 B.NE 0x3323570
	0x0332358C SUB W1, W1, 0x1
	0x03323590 ADD W8, W8, 0x1
	0x03323594 B 0x3323570
	0x03323598 SUB W1, W1, 0x1
	0x0332359C B 0x3323570

ISIL:
	001 Subtract W8, W1, 2
	002 NotImplemented "Instruction EXTR not yet implemented."
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move W9, 1
	005 NotImplemented "Instruction LSLV not yet implemented."
	006 Move W9, 153
	007 And W31, W8, W9
	008 Move TEMP, 0
	009 Not TEMP
	010 Move W2, TEMP
	011 Move W3, 32
	012 Move W4, W31
	013 Move X5, X31
	014 Call ParseNumbers.LongToString, X0, X1, X2, X3, X4
	015 Return X0
	016 Move [X31-16], X30
	017 Move [X31-8], X19
	018 Move X0, 0xDD9000
	019 Move X0, [X0+1400]
	020 Call 0x1C17D08
	021 Call 0x1C17F10
	022 Move X19, X0
	023 Move X0, 0xE06000
	024 Move X0, [X0+568]
	025 Call 0x1C17D08
	026 Move X1, X0
	027 Move X0, X19
	028 Call ArgumentException..ctor, X0, X1
	029 Move X0, 0xE06000
	030 Move X0, [X0+600]
	031 Call 0x1C17D08
	032 Move X1, X0
	033 Move X0, X19
	034 Call 0x1C17DEC

Method: System.String ToBase64String(System.Byte[] inArray)

Disassembly:
	0x033235A0 CMP W8, 0x3
	0x033235A4 B.CS 0x33235D8
	0x033235A8 ADRP X9, 0xFFFFFFFFFD873000
	0x033235AC ADD X9, X9, 0x66C
	0x033235B0 ADD W10, W1, 0x3
	0x033235B4 CMP W1, 0x0
	0x033235B8 LDR W8, [X9, W8, SXTW]
	0x033235BC CSEL W9, W10, W1, LT
	0x033235C0 SBFM W10, W9, 0x2, 0x1F
	0x033235C4 UBFM W10, W10, 0x1F, 0x1E
	0x033235C8 ADD W9, W10, W9, 0x2, ASR
	0x033235CC ADD W0, W8, W9
	0x033235D0 LDP X30, X19, [X31], #0x10
	0x033235D4 RET
	0x033235D8 ADRP X0, 0xDFD000
	0x033235DC LDR X0, [X0 + 0xC08]
	0x033235E0 BL 0x1C16D08
	0x033235E4 BL 0x1C16F10
	0x033235E8 MOV X19, X0
	0x033235EC ADRP X0, 0xE05000
	0x033235F0 LDR X0, [X0 + 0x2A0]
	0x033235F4 BL 0x1C16D08
	0x033235F8 MOV X1, X0
	0x033235FC MOV X0, X19
	0x03323600 MOV X2, X31
	0x03323604 BL 0x33674A0
	0x03323608 ADRP X0, 0xE05000
	0x0332360C LDR X0, [X0 + 0x2B0]
	0x03323610 BL 0x1C16D08
	0x03323614 MOV X1, X0
	0x03323618 MOV X0, X19
	0x0332361C BL 0x1C16DEC
	0x03323620 STP X30, X25, [X31 - 0x40]!
	0x03323624 STP X24, X23, [X31 + 0x10]
	0x03323628 STP X22, X21, [X31 + 0x20]
	0x0332362C STP X20, X19, [X31 + 0x30]
	0x03323630 ADRP X24, 0x10B9000
	0x03323634 ADRP X25, 0xDFF000
	0x03323638 ADRP X19, 0xE05000
	0x0332363C ADRP X21, 0xDD9000
	0x03323640 ADRP X23, 0xDD8000
	0x03323644 ADRP X20, 0xE05000
	0x03323648 ADRP X22, 0xDD0000
	0x0332364C LDR X25, [X25 + 0x708]
	0x03323650 LDRB W8, [X24 + 0xC75]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10BA000
	005 Move W8, [X20+3180]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xDDA000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move X0, 0xE06000
	015 Move X0, [X0+608]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3180], W8
	019 Compare X19, 0
	020 JumpIfEqual {35}
	021 Move X8, 0xDDA000
	022 Move X8, [X8+2536]
	023 Move W20, [X19+24]
	024 Move X0, [X8]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Add X0, X19, 32
	030 Move X1, X20
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move W2, W31
	034 Move X30, [X31+32]
	035 Move X0, 0xDD6000
	036 Move X0, [X0+1320]
	037 Call 0x1C17D08
	038 Call 0x1C17F10
	039 Move X19, X0
	040 Move X0, 0xE06000
	041 Move X0, [X0+616]
	042 Call 0x1C17D08
	043 Move X1, X0
	044 Move X0, X19
	045 Call ArgumentNullException..ctor, X0, X1
	046 Move X0, 0xE06000
	047 Move X0, [X0+624]
	048 Call 0x1C17D08
	049 Move X1, X0
	050 Move X0, X19
	051 Call 0x1C17DEC

Method: System.String ToBase64String(System.Byte[] inArray, System.Int32 offset, System.Int32 length)

Disassembly:
	0x03323804 BL 0x1C16DFC
	0x03323808 MOV X0, X20
	0x0332380C MOV X1, X31
	0x03323810 BL 0x338C698
	0x03323814 CBZ X19, 0x3323D70
	0x03323818 MOV X20, X0
	0x0332381C CBZ X0, 0x3323834
	0x03323820 LDR X8, [X19]
	0x03323824 MOV X0, X20
	0x03323828 LDR X1, [X8 + 0x40]
	0x0332382C BL 0x1C16E00
	0x03323830 CBZ X0, 0x3323D64
	0x03323834 LDR W8, [X19 + 0x18]
	0x03323838 CBZ W8, 0x3323D60
	0x0332383C ADRP X22, 0xDDA000
	0x03323840 LDR X22, [X22 + 0x968]
	0x03323844 STR X20, [X19 + 0x20]
	0x03323848 MOV X1, X31
	0x0332384C LDR X0, [X22]
	0x03323850 BL 0x338C698
	0x03323854 MOV X20, X0
	0x03323858 CBZ X0, 0x3323870
	0x0332385C LDR X8, [X19]
	0x03323860 MOV X0, X20
	0x03323864 LDR X1, [X8 + 0x40]
	0x03323868 BL 0x1C16E00
	0x0332386C CBZ X0, 0x3323D64
	0x03323870 LDR W8, [X19 + 0x18]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x10BA000
	008 Move X23, 0xDDA000
	009 Move W8, [X22+3181]
	010 Move X23, [X23+2536]
	011 Move W19, W2
	012 Move W20, W1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xDDA000
	019 Move X0, [X0+2536]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+3181], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X21
	029 Move W1, W20
	030 Move W2, W19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move W3, W31
	036 Move X30, [X31+48]
	037 Move X23, [X31+56]

Method: System.String ToBase64String(System.Byte[] inArray, System.Int32 offset, System.Int32 length, System.Base64FormattingOptions options)

Disassembly:
	0x03323874 CMP W8, 0x1
	0x03323878 B.LS 0x3323D60
	0x0332387C ADRP X8, 0xE05000
	0x03323880 LDR X8, [X8 + 0x2C8]
	0x03323884 STR X20, [X19 + 0x28]
	0x03323888 MOV X1, X31
	0x0332388C LDR X0, [X8]
	0x03323890 BL 0x338C698
	0x03323894 MOV X20, X0
	0x03323898 CBZ X0, 0x33238B0
	0x0332389C LDR X8, [X19]
	0x033238A0 MOV X0, X20
	0x033238A4 LDR X1, [X8 + 0x40]
	0x033238A8 BL 0x1C16E00
	0x033238AC CBZ X0, 0x3323D64
	0x033238B0 LDR W8, [X19 + 0x18]
	0x033238B4 CMP W8, 0x2
	0x033238B8 B.LS 0x3323D60
	0x033238BC ADRP X8, 0xDF9000
	0x033238C0 LDR X8, [X8 + 0x248]
	0x033238C4 STR X20, [X19 + 0x30]
	0x033238C8 MOV X1, X31
	0x033238CC LDR X0, [X8]
	0x033238D0 BL 0x338C698
	0x033238D4 MOV X20, X0
	0x033238D8 CBZ X0, 0x33238F0
	0x033238DC LDR X8, [X19]
	0x033238E0 MOV X0, X20
	0x033238E4 LDR X1, [X8 + 0x40]
	0x033238E8 BL 0x1C16E00
	0x033238EC CBZ X0, 0x3323D64
	0x033238F0 LDR W8, [X19 + 0x18]
	0x033238F4 CMP W8, 0x3
	0x033238F8 B.LS 0x3323D60
	0x033238FC ADRP X8, 0xDF7000
	0x03323900 LDR X8, [X8 + 0xD70]
	0x03323904 STR X20, [X19 + 0x38]
	0x03323908 MOV X1, X31
	0x0332390C LDR X0, [X8]
	0x03323910 BL 0x338C698
	0x03323914 MOV X20, X0
	0x03323918 CBZ X0, 0x3323930
	0x0332391C LDR X8, [X19]
	0x03323920 MOV X0, X20
	0x03323924 LDR X1, [X8 + 0x40]
	0x03323928 BL 0x1C16E00
	0x0332392C CBZ X0, 0x3323D64
	0x03323930 LDR W8, [X19 + 0x18]
	0x03323934 CMP W8, 0x4
	0x03323938 B.LS 0x3323D60
	0x0332393C ADRP X8, 0xDF7000
	0x03323940 LDR X8, [X8 + 0xD90]
	0x03323944 STR X20, [X19 + 0x40]
	0x03323948 MOV X1, X31
	0x0332394C LDR X0, [X8]
	0x03323950 BL 0x338C698
	0x03323954 MOV X20, X0
	0x03323958 CBZ X0, 0x3323970
	0x0332395C LDR X8, [X19]
	0x03323960 MOV X0, X20
	0x03323964 LDR X1, [X8 + 0x40]
	0x03323968 BL 0x1C16E00
	0x0332396C CBZ X0, 0x3323D64
	0x03323970 LDR W8, [X19 + 0x18]
	0x03323974 CMP W8, 0x5
	0x03323978 B.LS 0x3323D60
	0x0332397C ADRP X8, 0xDF7000
	0x03323980 LDR X8, [X8 + 0xD68]
	0x03323984 STR X20, [X19 + 0x48]
	0x03323988 MOV X1, X31
	0x0332398C LDR X0, [X8]
	0x03323990 BL 0x338C698
	0x03323994 MOV X20, X0
	0x03323998 CBZ X0, 0x33239B0
	0x0332399C LDR X8, [X19]
	0x033239A0 MOV X0, X20
	0x033239A4 LDR X1, [X8 + 0x40]
	0x033239A8 BL 0x1C16E00
	0x033239AC CBZ X0, 0x3323D64
	0x033239B0 LDR W8, [X19 + 0x18]
	0x033239B4 CMP W8, 0x6
	0x033239B8 B.LS 0x3323D60
	0x033239BC ADRP X8, 0xDF7000
	0x033239C0 LDR X8, [X8 + 0xD78]
	0x033239C4 STR X20, [X19 + 0x50]
	0x033239C8 MOV X1, X31
	0x033239CC LDR X0, [X8]
	0x033239D0 BL 0x338C698
	0x033239D4 MOV X20, X0
	0x033239D8 CBZ X0, 0x33239F0
	0x033239DC LDR X8, [X19]
	0x033239E0 MOV X0, X20
	0x033239E4 LDR X1, [X8 + 0x40]
	0x033239E8 BL 0x1C16E00
	0x033239EC CBZ X0, 0x3323D64
	0x033239F0 LDR W8, [X19 + 0x18]
	0x033239F4 CMP W8, 0x7
	0x033239F8 B.LS 0x3323D60
	0x033239FC ADRP X8, 0xDF7000
	0x03323A00 LDR X8, [X8 + 0xD98]
	0x03323A04 STR X20, [X19 + 0x58]
	0x03323A08 MOV X1, X31
	0x03323A0C LDR X0, [X8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x10BA000
	008 Move W8, [X23+3182]
	009 Move W19, W3
	010 Move W21, W2
	011 Move W20, W1
	012 Move X22, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xDDA000
	018 Move X0, [X0+2536]
	019 Call 0x1C17CF4
	020 Move X0, 0xE04000
	021 Move X0, [X0+3656]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+3182], W8
	025 Compare X22, 0
	026 JumpIfEqual {61}
	027 Move TEMP, X21
	028 And TEMP, TEMP, -2147483648
	029 Compare TEMP, -2147483648
	030 JumpIfEqual {72}
	031 Move TEMP, X20
	032 And TEMP, TEMP, -2147483648
	033 Compare TEMP, -2147483648
	034 JumpIfEqual {83}
	035 Move W8, [X22+24]
	036 Subtract W9, W8, W21
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X23, 0xDDA000
	039 Move X23, [X23+2536]
	040 Subtract W8, W8, W20
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X0, X31
	043 Call ThrowHelper.ThrowArgumentOutOfRangeException
	044 Move X0, [X23]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move W1, W21
	050 Add X8, X22, W20
	051 Move W2, W19
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X22, [X31+16]
	055 Move X21, [X31+24]
	056 Add X0, X8, 32
	057 Move X30, [X31+48]
	058 Move X23, [X31+56]
	059 Call Convert.ToBase64String, X0, X1
	060 Return X0
	061 Move X0, 0xDD6000
	062 Move X0, [X0+1320]
	063 Call 0x1C17D08
	064 Call 0x1C17F10
	065 Move X19, X0
	066 Move X0, 0xE06000
	067 Move X0, [X0+616]
	068 Call 0x1C17D08
	069 Move X1, X0
	070 Move X0, X19
	071 Call ArgumentNullException..ctor, X0, X1
	072 Move X0, 0xDD9000
	073 Move X0, [X0+1888]
	074 Call 0x1C17D08
	075 Call 0x1C17F10
	076 Move X19, X0
	077 Move X0, 0xDD9000
	078 Move X0, [X0+1896]
	079 Call 0x1C17D08
	080 Move X20, X0
	081 Move X0, 0xDF9000
	082 Move X0, [X0+1632]
	083 Move X0, 0xDD9000
	084 Move X0, [X0+1888]
	085 Call 0x1C17D08
	086 Call 0x1C17F10
	087 Move X19, X0
	088 Move X0, 0xE00000
	089 Move X0, [X0+3472]
	090 Call 0x1C17D08
	091 Move X20, X0
	092 Move X0, 0xE00000
	093 Move X0, [X0+1360]
	094 Move X0, 0xDD9000
	095 Move X0, [X0+1888]
	096 Call 0x1C17D08
	097 Call 0x1C17F10
	098 Move X19, X0
	099 Move X0, 0xE00000
	100 Move X0, [X0+3472]
	101 Call 0x1C17D08
	102 Move X20, X0
	103 Move X0, 0xE05000
	104 Move X0, [X0+2440]
	105 Call 0x1C17D08
	106 Move X2, X0
	107 Move X0, X19
	108 Move X1, X20
	109 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	110 Move X0, 0xE06000
	111 Move X0, [X0+640]
	112 Call 0x1C17D08
	113 Move X1, X0
	114 Move X0, X19
	115 Call 0x1C17DEC

Method: System.String ToBase64String(System.ReadOnlySpan`1<System.Byte> bytes, System.Base64FormattingOptions options = 0)

Disassembly:
	0x03323654 LDR X19, [X19 + 0x2B8]
	0x03323658 LDR X21, [X21 + 0x9E8]
	0x0332365C LDR X23, [X23 + 0xC60]
	0x03323660 LDR X20, [X20 + 0x2C0]
	0x03323664 LDR X22, [X22 + 0x6C0]
	0x03323668 TBNZ X8, 0x0, 0x33237B8
	0x0332366C ADRP X0, 0xDF9000
	0x03323670 LDR X0, [X0 + 0x248]
	0x03323674 BL 0x1C16CF4
	0x03323678 ADRP X0, 0xDF7000
	0x0332367C LDR X0, [X0 + 0xD68]
	0x03323680 BL 0x1C16CF4
	0x03323684 ADRP X0, 0xDD9000
	0x03323688 LDR X0, [X0 + 0x8D8]
	0x0332368C BL 0x1C16CF4
	0x03323690 ADRP X0, 0xDF7000
	0x03323694 LDR X0, [X0 + 0xD70]
	0x03323698 BL 0x1C16CF4
	0x0332369C ADRP X0, 0xDD9000
	0x033236A0 LDR X0, [X0 + 0x9E8]
	0x033236A4 BL 0x1C16CF4
	0x033236A8 ADRP X0, 0xE05000
	0x033236AC LDR X0, [X0 + 0x2C8]
	0x033236B0 BL 0x1C16CF4
	0x033236B4 ADRP X0, 0xE03000
	0x033236B8 LDR X0, [X0 + 0x538]
	0x033236BC BL 0x1C16CF4
	0x033236C0 ADRP X0, 0xE01000
	0x033236C4 LDR X0, [X0 + 0xF38]
	0x033236C8 BL 0x1C16CF4
	0x033236CC ADRP X0, 0xE02000
	0x033236D0 LDR X0, [X0 + 0x140]
	0x033236D4 BL 0x1C16CF4
	0x033236D8 ADRP X0, 0xDF8000
	0x033236DC LDR X0, [X0 + 0xA78]
	0x033236E0 BL 0x1C16CF4
	0x033236E4 ADRP X0, 0xE05000
	0x033236E8 LDR X0, [X0 + 0x2C0]
	0x033236EC BL 0x1C16CF4
	0x033236F0 ADRP X0, 0xE05000
	0x033236F4 LDR X0, [X0 + 0x2D0]
	0x033236F8 BL 0x1C16CF4
	0x033236FC ADRP X0, 0xDF7000
	0x03323700 LDR X0, [X0 + 0xD78]
	0x03323704 BL 0x1C16CF4
	0x03323708 ADRP X0, 0xDF7000
	0x0332370C LDR X0, [X0 + 0xD80]
	0x03323710 BL 0x1C16CF4
	0x03323714 ADRP X0, 0xDF7000
	0x03323718 LDR X0, [X0 + 0xD88]
	0x0332371C BL 0x1C16CF4
	0x03323720 ADRP X0, 0xDDA000
	0x03323724 LDR X0, [X0 + 0x968]
	0x03323728 BL 0x1C16CF4
	0x0332372C ADRP X0, 0xDFF000
	0x03323730 LDR X0, [X0 + 0x708]
	0x03323734 BL 0x1C16CF4
	0x03323738 ADRP X0, 0xDF7000
	0x0332373C LDR X0, [X0 + 0xD90]
	0x03323740 BL 0x1C16CF4
	0x03323744 ADRP X0, 0xDF8000
	0x03323748 LDR X0, [X0 + 0xA80]
	0x0332374C BL 0x1C16CF4
	0x03323750 ADRP X0, 0xDF8000
	0x03323754 LDR X0, [X0 + 0xB60]
	0x03323758 BL 0x1C16CF4
	0x0332375C ADRP X0, 0xDD8000
	0x03323760 LDR X0, [X0 + 0xC60]
	0x03323764 BL 0x1C16CF4
	0x03323768 ADRP X0, 0xDD0000
	0x0332376C LDR X0, [X0 + 0x6C0]
	0x03323770 BL 0x1C16CF4
	0x03323774 ADRP X0, 0xE05000
	0x03323778 LDR X0, [X0 + 0x2D8]
	0x0332377C BL 0x1C16CF4
	0x03323780 ADRP X0, 0xE05000
	0x03323784 LDR X0, [X0 + 0x2B8]
	0x03323788 BL 0x1C16CF4
	0x0332378C ADRP X0, 0xDF7000
	0x03323790 LDR X0, [X0 + 0xD98]
	0x03323794 BL 0x1C16CF4
	0x03323798 ADRP X0, 0xDF7000
	0x0332379C LDR X0, [X0 + 0xDA0]
	0x033237A0 BL 0x1C16CF4
	0x033237A4 ADRP X0, 0xDF7000
	0x033237A8 LDR X0, [X0 + 0xDA8]
	0x033237AC BL 0x1C16CF4
	0x033237B0 MOVZ W8, 0x1
	0x033237B4 STRB W8, [X24 + 0xC75]
	0x033237B8 LDR X0, [X25]
	0x033237BC MOVZ W1, 0x100
	0x033237C0 BL 0x1C16D6C
	0x033237C4 LDR X1, [X19]
	0x033237C8 MOV X2, X31
	0x033237CC MOV X19, X0
	0x033237D0 BL 0x32C5BD8
	0x033237D4 LDR X8, [X21]
	0x033237D8 MOVZ W1, 0x13
	0x033237DC LDR X8, [X8 + 0xB8]
	0x033237E0 STR X19, [X8]
	0x033237E4 LDR X0, [X23]
	0x033237E8 BL 0x1C16D6C
	0x033237EC LDR X8, [X22]
	0x033237F0 LDR X20, [X20]
	0x033237F4 MOV X19, X0
	0x033237F8 LDR W9, [X8 + 0xE0]
	0x033237FC CBNZ W9, 0x3323808
	0x03323800 MOV X0, X8

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x10BA000
	009 Move W8, [X22+3183]
	010 Move W20, W2
	011 Move X19, X1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0xDDA000
	018 Move X0, [X0+2536]
	019 Call 0x1C17CF4
	020 Move X0, 0xE04000
	021 Move X0, [X0+3536]
	022 Call 0x1C17CF4
	023 Move X0, 0xE00000
	024 Move X0, [X0+2752]
	025 Call 0x1C17CF4
	026 Move X0, 0xDD3000
	027 Move X0, [X0+632]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+3183], W8
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Compare W19, 0
	033 JumpIfEqual {60}
	034 Move X24, 0xDDA000
	035 Move X24, [X24+2536]
	036 Move X22, 0xE04000
	037 Move X0, [X24]
	038 Move W8, [X0+224]
	039 Move X22, [X22+3536]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 NotImplemented "Instruction CMP not yet implemented."
	044 NotImplemented "Instruction CSET not yet implemented."
	045 Move W0, W19
	046 Call Convert.ToBase64_CalculateAndValidateOutputLength, X0, X1
	047 Move X1, X31
	048 Call String.FastAllocateString, X0
	049 Move X2, [X22]
	050 Move X22, X0
	051 Move X0, X21
	052 Move X1, X19
	053 Call 0x2219CF0, X0
	054 Move X21, X0
	055 Compare X22, 0
	056 JumpIfEqual {65}
	057 Move X0, X31
	058 Call RuntimeHelpers.get_OffsetToStringData
	059 Add X23, X22, W0
	060 Move X8, 0xDD3000
	061 Move X8, [X8+632]
	062 Move X8, [X8]
	063 Move X8, [X8+184]
	064 Move X22, [X8]
	065 Move X23, X22
	066 Move X0, [X24]
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfNotEqual {71}
	070 Call 0x1C17DFC
	071 NotImplemented "Instruction CMP not yet implemented."
	072 NotImplemented "Instruction CSET not yet implemented."
	073 Move X0, X23
	074 Move X1, X21
	075 Move W2, W31
	076 Move W3, W19
	077 Call Convert.ConvertToBase64Array, X0, X1, X2, X3, X4
	078 Move X0, X22
	079 Move X20, [X31+48]
	080 Move X19, [X31+56]
	081 Move X22, [X31+32]
	082 Move X21, [X31+40]
	083 Move X24, [X31+16]
	084 Move X23, [X31+24]
	085 Move X30, [X31+64]
	086 Return X0
	087 Move [X31+12], W20
	088 Move X0, 0xDD1000
	089 Move X0, [X0+1880]
	090 Call 0x1C17D08
	091 Add X1, X31, 12
	092 Call 0x1C17E04
	093 Move X19, X0
	094 Move X0, 0xE00000
	095 Move X0, [X0+464]
	096 Call 0x1C17D08
	097 Move X1, X19
	098 Move X2, X31
	099 Call String.Format, X0, X1
	100 Move X19, X0
	101 Move X0, 0xDD9000
	102 Move X0, [X0+1400]
	103 Call 0x1C17D08
	104 Call 0x1C17F10
	105 Move X20, X0
	106 Move X0, 0xE05000
	107 Move X0, [X0+2096]
	108 Call 0x1C17D08
	109 Move X2, X0
	110 Move X0, X20
	111 Move X1, X19
	112 Call ArgumentException..ctor, X0, X1, X2
	113 Move X0, 0xE06000
	114 Move X0, [X0+632]
	115 Call 0x1C17D08
	116 Move X1, X0
	117 Move X0, X20
	118 Call 0x1C17DEC

Method: System.Int32 ConvertToBase64Array(System.Char* outChars, System.Byte* inData, System.Int32 offset, System.Int32 length, System.Boolean insertLineBreaks)

Disassembly:
	0x03323AC0 LDR X8, [X8 + 0xD88]
	0x03323AC4 STR X20, [X19 + 0x70]
	0x03323AC8 MOV X1, X31
	0x03323ACC LDR X0, [X8]
	0x03323AD0 BL 0x338C698
	0x03323AD4 MOV X20, X0
	0x03323AD8 CBZ X0, 0x3323AF0
	0x03323ADC LDR X8, [X19]
	0x03323AE0 MOV X0, X20
	0x03323AE4 LDR X1, [X8 + 0x40]
	0x03323AE8 BL 0x1C16E00
	0x03323AEC CBZ X0, 0x3323D64
	0x03323AF0 LDR W8, [X19 + 0x18]
	0x03323AF4 CMP W8, 0xB
	0x03323AF8 B.LS 0x3323D60
	0x03323AFC ADRP X8, 0xDF7000
	0x03323B00 LDR X8, [X8 + 0xDA8]
	0x03323B04 STR X20, [X19 + 0x78]
	0x03323B08 MOV X1, X31
	0x03323B0C LDR X0, [X8]
	0x03323B10 BL 0x338C698
	0x03323B14 MOV X20, X0
	0x03323B18 CBZ X0, 0x3323B30
	0x03323B1C LDR X8, [X19]
	0x03323B20 MOV X0, X20
	0x03323B24 LDR X1, [X8 + 0x40]
	0x03323B28 BL 0x1C16E00
	0x03323B2C CBZ X0, 0x3323D64
	0x03323B30 LDR W8, [X19 + 0x18]
	0x03323B34 CMP W8, 0xC
	0x03323B38 B.LS 0x3323D60
	0x03323B3C ADRP X8, 0xDF8000
	0x03323B40 LDR X8, [X8 + 0xA80]
	0x03323B44 STR X20, [X19 + 0x80]
	0x03323B48 MOV X1, X31
	0x03323B4C LDR X0, [X8]
	0x03323B50 BL 0x338C698
	0x03323B54 MOV X20, X0
	0x03323B58 CBZ X0, 0x3323B70
	0x03323B5C LDR X8, [X19]
	0x03323B60 MOV X0, X20
	0x03323B64 LDR X1, [X8 + 0x40]
	0x03323B68 BL 0x1C16E00
	0x03323B6C CBZ X0, 0x3323D64
	0x03323B70 LDR W8, [X19 + 0x18]
	0x03323B74 CMP W8, 0xD
	0x03323B78 B.LS 0x3323D60
	0x03323B7C ADRP X8, 0xDF8000
	0x03323B80 LDR X8, [X8 + 0xA78]
	0x03323B84 STR X20, [X19 + 0x88]
	0x03323B88 MOV X1, X31
	0x03323B8C LDR X0, [X8]
	0x03323B90 BL 0x338C698
	0x03323B94 MOV X20, X0
	0x03323B98 CBZ X0, 0x3323BB0
	0x03323B9C LDR X8, [X19]
	0x03323BA0 MOV X0, X20
	0x03323BA4 LDR X1, [X8 + 0x40]
	0x03323BA8 BL 0x1C16E00
	0x03323BAC CBZ X0, 0x3323D64
	0x03323BB0 LDR W8, [X19 + 0x18]
	0x03323BB4 CMP W8, 0xE
	0x03323BB8 B.LS 0x3323D60
	0x03323BBC ADRP X8, 0xE02000
	0x03323BC0 LDR X8, [X8 + 0x140]
	0x03323BC4 STR X20, [X19 + 0x90]
	0x03323BC8 MOV X1, X31
	0x03323BCC LDR X0, [X8]
	0x03323BD0 BL 0x338C698
	0x03323BD4 MOV X20, X0
	0x03323BD8 CBZ X0, 0x3323BF0
	0x03323BDC LDR X8, [X19]
	0x03323BE0 MOV X0, X20
	0x03323BE4 LDR X1, [X8 + 0x40]
	0x03323BE8 BL 0x1C16E00
	0x03323BEC CBZ X0, 0x3323D64
	0x03323BF0 LDR W8, [X19 + 0x18]
	0x03323BF4 CMP W8, 0xF
	0x03323BF8 B.LS 0x3323D60
	0x03323BFC ADRP X8, 0xE01000
	0x03323C00 LDR X8, [X8 + 0xF38]
	0x03323C04 STR X20, [X19 + 0x98]
	0x03323C08 MOV X1, X31
	0x03323C0C LDR X0, [X8]
	0x03323C10 BL 0x338C698
	0x03323C14 MOV X20, X0
	0x03323C18 CBZ X0, 0x3323C30
	0x03323C1C LDR X8, [X19]
	0x03323C20 MOV X0, X20
	0x03323C24 LDR X1, [X8 + 0x40]
	0x03323C28 BL 0x1C16E00
	0x03323C2C CBZ X0, 0x3323D64
	0x03323C30 LDR W8, [X19 + 0x18]
	0x03323C34 CMP W8, 0x10
	0x03323C38 B.LS 0x3323D60
	0x03323C3C STR X20, [X19 + 0xA0]
	0x03323C40 LDR X0, [X22]
	0x03323C44 MOV X1, X31
	0x03323C48 BL 0x338C698
	0x03323C4C MOV X20, X0
	0x03323C50 CBZ X0, 0x3323C68
	0x03323C54 LDR X8, [X19]
	0x03323C58 MOV X0, X20
	0x03323C5C LDR X1, [X8 + 0x40]
	0x03323C60 BL 0x1C16E00
	0x03323C64 CBZ X0, 0x3323D64
	0x03323C68 LDR W8, [X19 + 0x18]
	0x03323C6C CMP W8, 0x11
	0x03323C70 B.LS 0x3323D60
	0x03323C74 ADRP X8, 0xDF8000
	0x03323C78 LDR X8, [X8 + 0xB60]
	0x03323C7C STR X20, [X19 + 0xA8]
	0x03323C80 MOV X1, X31
	0x03323C84 LDR X0, [X8]
	0x03323C88 BL 0x338C698
	0x03323C8C MOV X20, X0
	0x03323C90 CBZ X0, 0x3323CA8
	0x03323C94 LDR X8, [X19]
	0x03323C98 MOV X0, X20
	0x03323C9C LDR X1, [X8 + 0x40]
	0x03323CA0 BL 0x1C16E00
	0x03323CA4 CBZ X0, 0x3323D64
	0x03323CA8 LDR W8, [X19 + 0x18]
	0x03323CAC CMP W8, 0x12
	0x03323CB0 B.LS 0x3323D60
	0x03323CB4 STR X20, [X19 + 0xB0]
	0x03323CB8 LDR X8, [X21]
	0x03323CBC ADRP X9, 0xE05000
	0x03323CC0 ADRP X22, 0xE05000
	0x03323CC4 ADRP X20, 0xE03000
	0x03323CC8 LDR X8, [X8 + 0xB8]
	0x03323CCC LDR X9, [X9 + 0x2D0]
	0x03323CD0 MOV X1, X31
	0x03323CD4 STR X19, [X8 + 0x8]
	0x03323CD8 LDR X0, [X9]
	0x03323CDC ADRP X19, 0xDD9000
	0x03323CE0 LDR X19, [X19 + 0x8D8]
	0x03323CE4 LDR X22, [X22 + 0x2D8]
	0x03323CE8 LDR X20, [X20 + 0x538]
	0x03323CEC BL 0x338C698
	0x03323CF0 LDR X8, [X21]
	0x03323CF4 MOVZ W1, 0x41
	0x03323CF8 LDR X8, [X8 + 0xB8]
	0x03323CFC STR X0, [X8 + 0x10]
	0x03323D00 LDR X0, [X19]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0x10BA000
	010 Move X24, 0xDDA000
	011 Move W8, [X25+3184]
	012 Move X24, [X24+2536]
	013 Move W21, W4
	014 Move W23, W3
	015 Move W22, W2
	016 Move X20, X1
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xDDA000
	023 Move X0, [X0+2536]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X25+3184], W8
	027 Move X0, [X24]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {33}
	031 Call 0x1C17DFC
	032 Move X0, [X24]
	033 Move X8, [X0+184]
	034 Move X8, [X8+24]
	035 Compare X8, 0
	036 JumpIfEqual {180}
	037 Move W9, [X8+24]
	038 Compare W9, 0
	039 JumpIfEqual {181}
	040 Move W9, 0x5556
	041 NotImplemented "Instruction MOVK not yet implemented."
	042 NotImplemented "Instruction SMADDL not yet implemented."
	043 Move X10, X9
	044 ShiftRight X10, 63
	045 And X10, X10, 0x7FFFFFFF
	046 Move X9, X9
	047 ShiftRight X9, 32
	048 And X9, X9, 0x7FFFFFFF
	049 Add W9, W9, W10
	050 Add W9, W9, W9
	051 Subtract W10, W23, W9
	052 Add W9, W9, W22
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Add X8, X8, 32
	055 Move W0, W31
	056 Move W11, W31
	057 Move W12, 13
	058 Move W13, 10
	059 Move TEMP, X21
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {70}
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move W11, W31
	065 Add W14, W0, 1
	066 NotImplemented "Instruction STRH not yet implemented."
	067 Add W0, W0, 2
	068 NotImplemented "Instruction STRH not yet implemented."
	069 Add W11, W11, 4
	070 Move W15, [X20]
	071 Add W16, W22, 1
	072 Move W14, W0
	073 Move X15, X15
	074 ShiftRight X15, 1
	075 And X15, X15, 0x7FFFFFFF
	076 And X15, X15, 127
	077 NotImplemented "Instruction LDRH not yet implemented."
	078 NotImplemented "Instruction STRH not yet implemented."
	079 Move W15, [X20]
	080 Move W17, [X20]
	081 Move W15, W15
	082 ShiftRight W15, 4
	083 And W15, W15, 0x7FFFFFFF
	084 NotImplemented "Instruction BFM not yet implemented."
	085 NotImplemented "Instruction LDRH not yet implemented."
	086 Add W17, W0, 1
	087 NotImplemented "Instruction STRH not yet implemented."
	088 Add W15, W22, 2
	089 Move W17, [X20]
	090 Move W16, [X20]
	091 Add W22, W22, 3
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move W17, W17
	094 ShiftRight W17, 6
	095 And W17, W17, 0x7FFFFFFF
	096 NotImplemented "Instruction BFM not yet implemented."
	097 NotImplemented "Instruction LDRH not yet implemented."
	098 Add W17, W0, 2
	099 NotImplemented "Instruction STRH not yet implemented."
	100 Move W15, [X20]
	101 Add W16, W0, 3
	102 Add W0, W0, 4
	103 Move W15, W15
	104 ShiftRight W15, 31
	105 And W15, W15, 0x3FFFFFFF
	106 And X15, X15, 127
	107 NotImplemented "Instruction LDRH not yet implemented."
	108 NotImplemented "Instruction STRH not yet implemented."
	109 Compare W10, 0
	110 JumpIfEqual {122}
	111 Move TEMP, X21
	112 And TEMP, TEMP, 1
	113 Compare TEMP, 1
	114 JumpIfNotEqual {122}
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move W12, 13
	117 Add W11, W14, 5
	118 Move W13, 10
	119 NotImplemented "Instruction STRH not yet implemented."
	120 Add W0, W14, 6
	121 NotImplemented "Instruction STRH not yet implemented."
	122 NotImplemented "Instruction CMP not yet implemented."
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Move W10, [X20]
	125 Add W11, W9, 1
	126 Move X10, X10
	127 ShiftRight X10, 1
	128 And X10, X10, 0x7FFFFFFF
	129 And X10, X10, 127
	130 NotImplemented "Instruction LDRH not yet implemented."
	131 NotImplemented "Instruction STRH not yet implemented."
	132 Move W10, [X20]
	133 Move W9, [X20]
	134 Move W10, W10
	135 ShiftRight W10, 4
	136 And W10, W10, 0x7FFFFFFF
	137 NotImplemented "Instruction BFM not yet implemented."
	138 NotImplemented "Instruction LDRH not yet implemented."
	139 Add W10, W0, 1
	140 NotImplemented "Instruction STRH not yet implemented."
	141 Move W9, [X20]
	142 Add W10, W0, 2
	143 Move W9, W9
	144 ShiftRight W9, 29
	145 And W9, W9, 0xFFFFFFF
	146 And X9, X9, 127
	147 NotImplemented "Instruction LDRH not yet implemented."
	148 Add X8, X8, 128
	149 Move W10, [X20]
	150 Move X10, X10
	151 ShiftRight X10, 1
	152 And X10, X10, 0x7FFFFFFF
	153 And X10, X10, 127
	154 NotImplemented "Instruction LDRH not yet implemented."
	155 NotImplemented "Instruction STRH not yet implemented."
	156 Move W9, [X20]
	157 Add W10, W0, 1
	158 Move W9, W9
	159 ShiftRight W9, 27
	160 And W9, W9, 0x3FFFFFF
	161 And X9, X9, 127
	162 NotImplemented "Instruction LDRH not yet implemented."
	163 NotImplemented "Instruction STRH not yet implemented."
	164 NotImplemented "Instruction LDRH not yet implemented."
	165 Add W10, W0, 2
	166 NotImplemented "Instruction STRH not yet implemented."
	167 NotImplemented "Instruction LDRH not yet implemented."
	168 Add W9, W0, 3
	169 Add W0, W0, 4
	170 NotImplemented "Instruction STRH not yet implemented."
	171 Move X20, [X31+48]
	172 Move X19, [X31+56]
	173 Move X22, [X31+32]
	174 Move X21, [X31+40]
	175 Move X24, [X31+16]
	176 Move X23, [X31+24]
	177 Move X30, [X31+64]
	178 Move X25, [X31+72]
	179 Return X0
	180 Call 0x1C17F20
	181 Call 0x1C17F28

Method: System.Int32 ToBase64_CalculateAndValidateOutputLength(System.Int32 inputLength, System.Boolean insertLineBreaks)

Disassembly:
	0x03323A10 BL 0x338C698
	0x03323A14 MOV X20, X0
	0x03323A18 CBZ X0, 0x3323A30
	0x03323A1C LDR X8, [X19]
	0x03323A20 MOV X0, X20
	0x03323A24 LDR X1, [X8 + 0x40]
	0x03323A28 BL 0x1C16E00
	0x03323A2C CBZ X0, 0x3323D64
	0x03323A30 LDR W8, [X19 + 0x18]
	0x03323A34 CMP W8, 0x8
	0x03323A38 B.LS 0x3323D60
	0x03323A3C ADRP X8, 0xDF7000
	0x03323A40 LDR X8, [X8 + 0xD80]
	0x03323A44 STR X20, [X19 + 0x60]
	0x03323A48 MOV X1, X31
	0x03323A4C LDR X0, [X8]
	0x03323A50 BL 0x338C698
	0x03323A54 MOV X20, X0
	0x03323A58 CBZ X0, 0x3323A70
	0x03323A5C LDR X8, [X19]
	0x03323A60 MOV X0, X20
	0x03323A64 LDR X1, [X8 + 0x40]
	0x03323A68 BL 0x1C16E00
	0x03323A6C CBZ X0, 0x3323D64
	0x03323A70 LDR W8, [X19 + 0x18]
	0x03323A74 CMP W8, 0x9
	0x03323A78 B.LS 0x3323D60
	0x03323A7C ADRP X8, 0xDF7000
	0x03323A80 LDR X8, [X8 + 0xDA0]
	0x03323A84 STR X20, [X19 + 0x68]
	0x03323A88 MOV X1, X31
	0x03323A8C LDR X0, [X8]
	0x03323A90 BL 0x338C698
	0x03323A94 MOV X20, X0
	0x03323A98 CBZ X0, 0x3323AB0
	0x03323A9C LDR X8, [X19]
	0x03323AA0 MOV X0, X20
	0x03323AA4 LDR X1, [X8 + 0x40]
	0x03323AA8 BL 0x1C16E00
	0x03323AAC CBZ X0, 0x3323D64
	0x03323AB0 LDR W8, [X19 + 0x18]
	0x03323AB4 CMP W8, 0xA
	0x03323AB8 B.LS 0x3323D60
	0x03323ABC ADRP X8, 0xDF7000

ISIL:
	001 Move W8, 0x5556
	002 NotImplemented "Instruction MOVK not yet implemented."
	003 NotImplemented "Instruction SMADDL not yet implemented."
	004 Move X9, X8
	005 ShiftRight X9, 63
	006 And X9, X9, 0x7FFFFFFF
	007 Move X8, X8
	008 ShiftRight X8, 32
	009 And X8, X8, 0x7FFFFFFF
	010 Add W8, W8, W9
	011 Add W9, W8, W8
	012 NotImplemented "Instruction CMP not yet implemented."
	013 NotImplemented "Instruction CSET not yet implemented."
	014 Move X9, X9
	015 ShiftRight X9, 62
	016 And X9, X9, 0x1FFFFFFF
	017 Add X0, X9, W8
	018 Move TEMP, X1
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfNotEqual {35}
	022 Move X8, 0xCA1B
	023 NotImplemented "Instruction MOVK not yet implemented."
	024 NotImplemented "Instruction MOVK not yet implemented."
	025 NotImplemented "Instruction MOVK not yet implemented."
	026 NotImplemented "Instruction SMULH not yet implemented."
	027 NotImplemented "Instruction SBFM not yet implemented."
	028 Add X8, X9, X8
	029 Move W9, 76
	030 NotImplemented "Instruction MSUB not yet implemented."
	031 NotImplemented "Instruction CMP not yet implemented."
	032 NotImplemented "Instruction CSET not yet implemented."
	033 Subtract X8, X8, X9
	034 Add X0, X0, X8
	035 Move W8, 0x80000000
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Return X0
	038 Move [X31-16], X30
	039 Move [X31-8], X19
	040 Move X0, 0xDDA000
	041 Move X0, [X0+3512]
	042 Call 0x1C17D08
	043 Call 0x1C17F10
	044 Move X1, X31
	045 Move X19, X0
	046 Call OutOfMemoryException..ctor, X0
	047 Move X0, 0xE06000
	048 Move X0, [X0+648]
	049 Call 0x1C17D08
	050 Move X1, X0
	051 Move X0, X19
	052 Call 0x1C17DEC

Method: System.Byte[] FromBase64String(System.String s)

Disassembly:
	0x03323D04 BL 0x1C16D6C
	0x03323D08 LDR X1, [X22]
	0x03323D0C MOV X2, X31
	0x03323D10 MOV X19, X0
	0x03323D14 BL 0x32C5BD8
	0x03323D18 LDR X8, [X21]
	0x03323D1C LDR X8, [X8 + 0xB8]
	0x03323D20 STR X19, [X8 + 0x18]
	0x03323D24 LDR X0, [X20]
	0x03323D28 LDR W9, [X0 + 0xE0]
	0x03323D2C CBNZ W9, 0x3323D40
	0x03323D30 BL 0x1C16DFC
	0x03323D34 LDR X8, [X21]
	0x03323D38 LDR X0, [X20]
	0x03323D3C LDR X8, [X8 + 0xB8]
	0x03323D40 LDR X9, [X0 + 0xB8]
	0x03323D44 LDP X20, X19, [X31 + 0x30]
	0x03323D48 LDP X22, X21, [X31 + 0x20]
	0x03323D4C LDP X24, X23, [X31 + 0x10]
	0x03323D50 LDR X9, [X9]
	0x03323D54 STR X9, [X8 + 0x20]
	0x03323D58 LDP X30, X25, [X31], #0x40
	0x03323D5C RET
	0x03323D60 BL 0x1C16F28
	0x03323D64 BL 0x1C16F44
	0x03323D68 MOV X1, X31
	0x03323D6C BL 0x1C16DEC
	0x03323D70 BL 0x1C16F20
	0x03323D74 STP X30, X21, [X31 - 0x20]!
	0x03323D78 STP X20, X19, [X31 + 0x10]
	0x03323D7C ADRP X20, 0x10B9000
	0x03323D80 ADRP X21, 0xE05000
	0x03323D84 LDRB W8, [X20 + 0xC7B]
	0x03323D88 LDR X21, [X21 + 0x2E0]
	0x03323D8C MOV X19, X0
	0x03323D90 TBNZ X8, 0x0, 0x3323DA8
	0x03323D94 ADRP X0, 0xE05000
	0x03323D98 LDR X0, [X0 + 0x2E0]
	0x03323D9C BL 0x1C16CF4
	0x03323DA0 MOVZ W8, 0x1
	0x03323DA4 STRB W8, [X20 + 0xC7B]
	0x03323DA8 LDR X1, [X21]
	0x03323DAC MOV X0, X19
	0x03323DB0 LDP X20, X19, [X31 + 0x10]
	0x03323DB4 MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x10BA000
	006 Move W8, [X20+3185]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xDDA000
	013 Move X0, [X0+2536]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3185], W8
	017 Compare X19, 0
	018 JumpIfEqual {37}
	019 Move X20, 0xDDA000
	020 Move X20, [X20+2536]
	021 Move X0, X31
	022 Call RuntimeHelpers.get_OffsetToStringData
	023 Move X8, [X20]
	024 Move W20, [X19+16]
	025 Move W21, W0
	026 Move W9, [X8+224]
	027 Compare W9, 0
	028 JumpIfNotEqual {31}
	029 Move X0, X8
	030 Call 0x1C17DFC
	031 Add X0, X19, W21
	032 Move W1, W20
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Move X0, 0xDD6000
	038 Move X0, [X0+1320]
	039 Call 0x1C17D08
	040 Call 0x1C17F10
	041 Move X19, X0
	042 Move X0, 0xDFA000
	043 Move X0, [X0+3264]
	044 Call 0x1C17D08
	045 Move X1, X0
	046 Move X0, X19
	047 Call ArgumentNullException..ctor, X0, X1
	048 Move X0, 0xE06000
	049 Move X0, [X0+656]
	050 Call 0x1C17D08
	051 Move X1, X0
	052 Move X0, X19
	053 Call 0x1C17DEC

Method: System.Boolean TryFromBase64Chars(System.ReadOnlySpan`1<System.Char> chars, System.Span`1<System.Byte> bytes, out System.Int32 bytesWritten)

Disassembly:
	0x03323F40 LDR X23, [X23 + 0x2F8]
	0x03323F44 MOV X2, X21
	0x03323F48 BL 0x1C16E0C
	0x03323F4C LDR X8, [X21]
	0x03323F50 MOV X1, X31
	0x03323F54 STR X8, [X19 + 0xA0]
	0x03323F58 LDR X0, [X22]
	0x03323F5C BL 0x338C698
	0x03323F60 LDR X1, [X23]
	0x03323F64 MOV X2, X0
	0x03323F68 MOV X0, X20
	0x03323F6C MOV X3, X31
	0x03323F70 BL 0x32A9678
	0x03323F74 CBZ X0, 0x3323FA4
	0x03323F78 ADRP X8, 0xDD2000
	0x03323F7C LDR X8, [X8 + 0x278]
	0x03323F80 LDR X1, [X8]
	0x03323F84 LDR X8, [X0]
	0x03323F88 CMP X8, X1
	0x03323F8C B.NE 0x3323FCC
	0x03323F90 STR X0, [X19 + 0x98]
	0x03323F94 LDR X8, [X0]
	0x03323F98 CMP X8, X1
	0x03323F9C B.EQ 0x3323FA8
	0x03323FA0 B 0x3323FCC
	0x03323FA4 STR X31, [X19 + 0x98]
	0x03323FA8 ADD X31, X29, 0x0
	0x03323FAC LDP X20, X19, [X31 + 0x40]
	0x03323FB0 LDP X22, X21, [X31 + 0x30]
	0x03323FB4 LDP X24, X23, [X31 + 0x20]
	0x03323FB8 LDR X25, [X31 + 0x10]
	0x03323FBC LDP X29, X30, [X31], #0x50
	0x03323FC0 RET
	0x03323FC4 BL 0x1C16F20
	0x03323FC8 MOV X1, X8
	0x03323FCC BL 0x1C171E0
	0x03323FD0 STR X30, [X31 - 0x50]!
	0x03323FD4 STP X26, X25, [X31 + 0x10]
	0x03323FD8 STP X24, X23, [X31 + 0x20]
	0x03323FDC STP X22, X21, [X31 + 0x30]
	0x03323FE0 STP X20, X19, [X31 + 0x40]
	0x03323FE4 ADRP X26, 0x10B9000
	0x03323FE8 ADRP X25, 0xDD1000
	0x03323FEC ADRP X23, 0xE05000
	0x03323FF0 ADRP X24, 0xDD0000
	0x03323FF4 LDRB W8, [X26 + 0xC7A]
	0x03323FF8 LDR X25, [X25 + 0x478]
	0x03323FFC LDR X23, [X23 + 0x2E8]
	0x03324000 LDR X24, [X24 + 0x6C0]
	0x03324004 MOV X21, X3
	0x03324008 MOV X22, X2
	0x0332400C MOV X19, X1
	0x03324010 MOV X20, X0
	0x03324014 TBNZ X8, 0x0, 0x3324068
	0x03324018 ADRP X0, 0xE04000
	0x0332401C LDR X0, [X0 + 0x2E8]
	0x03324020 BL 0x1C16CF4
	0x03324024 ADRP X0, 0xDD0000
	0x03324028 LDR X0, [X0 + 0x478]
	0x0332402C BL 0x1C16CF4
	0x03324030 ADRP X0, 0xDF7000
	0x03324034 LDR X0, [X0 + 0xB60]
	0x03324038 BL 0x1C16CF4
	0x0332403C ADRP X0, 0xDCF000
	0x03324040 LDR X0, [X0 + 0x6C0]
	0x03324044 BL 0x1C16CF4
	0x03324048 ADRP X0, 0xE04000
	0x0332404C LDR X0, [X0 + 0x2F0]
	0x03324050 BL 0x1C16CF4
	0x03324054 ADRP X0, 0xE04000
	0x03324058 LDR X0, [X0 + 0x2F8]
	0x0332405C BL 0x1C16CF4
	0x03324060 MOVZ W8, 0x1
	0x03324064 STRB W8, [X26 + 0xC7A]
	0x03324068 MOV X0, X20
	0x0332406C MOV X1, X19
	0x03324070 MOV X2, X22
	0x03324074 MOV X3, X21
	0x03324078 MOV X4, X31
	0x0332407C BL 0x3315DA4
	0x03324080 LDR X8, [X20 + 0xA0]
	0x03324084 LDR X0, [X25]
	0x03324088 ADD X1, X31, 0x8
	0x0332408C STR X8, [X31 + 0x8]
	0x03324090 BL 0x1C16E04
	0x03324094 LDR X8, [X24]
	0x03324098 LDR X22, [X23]
	0x0332409C MOV X21, X0
	0x033240A0 LDR W9, [X8 + 0xE0]
	0x033240A4 CBNZ W9, 0x33240B0
	0x033240A8 MOV X0, X8
	0x033240AC BL 0x1C16DFC
	0x033240B0 MOV X0, X22
	0x033240B4 MOV X1, X31
	0x033240B8 BL 0x338C698
	0x033240BC CBZ X19, 0x3324130
	0x033240C0 ADRP X8, 0xE04000
	0x033240C4 LDR X8, [X8 + 0x2F0]
	0x033240C8 ADRP X22, 0xDF7000
	0x033240CC ADRP X23, 0xE04000
	0x033240D0 MOV X3, X0
	0x033240D4 LDR X1, [X8]
	0x033240D8 LDR X22, [X22 + 0xB60]
	0x033240DC LDR X23, [X23 + 0x2F8]
	0x033240E0 MOV X0, X19
	0x033240E4 MOV X2, X21
	0x033240E8 MOV X4, X31
	0x033240EC BL 0x32A89BC
	0x033240F0 LDR X0, [X22]
	0x033240F4 LDR X20, [X20 + 0x98]
	0x033240F8 MOV X1, X31
	0x033240FC BL 0x338C698
	0x03324100 LDR X1, [X23]
	0x03324104 MOV X3, X0
	0x03324108 MOV X0, X19
	0x0332410C MOV X2, X20
	0x03324110 MOV X4, X31
	0x03324114 BL 0x32A89BC
	0x03324118 LDP X20, X19, [X31 + 0x40]
	0x0332411C LDP X22, X21, [X31 + 0x30]
	0x03324120 LDP X24, X23, [X31 + 0x20]
	0x03324124 LDP X26, X25, [X31 + 0x10]
	0x03324128 LDR X30, [X31], #0x50
	0x0332412C RET
	0x03324130 BL 0x1C16F20
	0x03324134 LDR X0, [X0 + 0xA0]
	0x03324138 RET
	0x0332413C LDR X0, [X0 + 0x98]
	0x03324140 RET
	0x03324144 SUB X31, X31, 0x40
	0x03324148 STP X30, X23, [X31 + 0x10]
	0x0332414C STP X22, X21, [X31 + 0x20]
	0x03324150 STP X20, X19, [X31 + 0x30]
	0x03324154 ADRP X20, 0x10B8000
	0x03324158 LDRB W8, [X20 + 0xC7C]
	0x0332415C MOV X19, X0
	0x03324160 TBNZ X8, 0x0, 0x33241A8
	0x03324164 ADRP X0, 0xDD1000
	0x03324168 LDR X0, [X0 + 0xC48]
	0x0332416C BL 0x1C16CF4
	0x03324170 ADRP X0, 0xDCF000
	0x03324174 LDR X0, [X0 + 0x758]
	0x03324178 BL 0x1C16CF4
	0x0332417C ADRP X0, 0xDD2000
	0x03324180 LDR X0, [X0 + 0xEF8]
	0x03324184 BL 0x1C16CF4
	0x03324188 ADRP X0, 0xDD2000
	0x0332418C LDR X0, [X0 + 0xF00]
	0x03324190 BL 0x1C16CF4
	0x03324194 ADRP X0, 0xE04000
	0x03324198 LDR X0, [X0 + 0x300]
	0x0332419C BL 0x1C16CF4
	0x033241A0 MOVZ W8, 0x1
	0x033241A4 STRB W8, [X20 + 0xC7C]
	0x033241A8 STR X31, [X31 + 0x8]
	0x033241AC LDR X8, [X19]
	0x033241B0 MOV X0, X19
	0x033241B4 LDP X9, X1, [X8 + 0x1F8]
	0x033241B8 BLR X9
	0x033241BC ANDS W31, W0, 0xFF
	0x033241C0 STR X0, [X31 + 0x8]
	0x033241C4 B.EQ 0x3324250
	0x033241C8 ADRP X8, 0xDD1000
	0x033241CC LDR X8, [X8 + 0xC48]
	0x033241D0 ADRP X23, 0xDD2000
	0x033241D4 ADRP X22, 0xDCF000
	0x033241D8 ADRP X21, 0xE04000
	0x033241DC LDR X0, [X8]
	0x033241E0 LDR W8, [X0 + 0xE0]
	0x033241E4 LDR X23, [X23 + 0xF00]
	0x033241E8 LDR X22, [X22 + 0x758]
	0x033241EC LDR X21, [X21 + 0x300]
	0x033241F0 CBNZ W8, 0x33241F8
	0x033241F4 BL 0x1C16DFC
	0x033241F8 MOV X0, X31
	0x033241FC BL 0x3338524
	0x03324200 LDR X8, [X19]
	0x03324204 MOV X20, X0
	0x03324208 MOV X0, X19
	0x0332420C LDP X9, X1, [X8 + 0x1F8]
	0x03324210 BLR X9
	0x03324214 LDR X1, [X23]
	0x03324218 STR X0, [X31 + 0x8]
	0x0332421C ADD X0, X31, 0x8
	0x03324220 BL 0x2434214
	0x03324224 LDR X8, [X22]
	0x03324228 STR W0, [X31 + 0x4]
	0x0332422C ADD X1, X31, 0x4
	0x03324230 MOV X0, X8
	0x03324234 BL 0x1C16E04
	0x03324238 LDR X1, [X21]
	0x0332423C MOV X2, X0
	0x03324240 MOV X0, X20
	0x03324244 MOV X3, X31
	0x03324248 BL 0x3227D04
	0x0332424C B 0x3324264
	0x03324250 LDR X8, [X19]
	0x03324254 MOV X0, X19
	0x03324258 LDR X9, [X8 + 0x208]
	0x0332425C LDR X1, [X8 + 0x210]
	0x03324260 BLR X9
	0x03324264 LDP X20, X19, [X31 + 0x30]
	0x03324268 LDP X22, X21, [X31 + 0x20]
	0x0332426C LDP X30, X23, [X31 + 0x10]
	0x03324270 ADD X31, X31, 0x40
	0x03324274 RET
	0x03324278 STP X30, X21, [X31 - 0x20]!
	0x0332427C STP X20, X19, [X31 + 0x10]
	0x03324280 ADRP X19, 0x10B8000
	0x03324284 LDRB W8, [X19 + 0xC7D]
	0x03324288 MOV X20, X0
	0x0332428C TBNZ X8, 0x0, 0x33242B0
	0x03324290 ADRP X0, 0xDD2000
	0x03324294 LDR X0, [X0 + 0xEF8]
	0x03324298 BL 0x1C16CF4
	0x0332429C ADRP X0, 0xE04000
	0x033242A0 LDR X0, [X0 + 0x308]
	0x033242A4 BL 0x1C16CF4
	0x033242A8 MOVZ W8, 0x1
	0x033242AC STRB W8, [X19 + 0xC7D]
	0x033242B0 MOV X0, X20
	0x033242B4 MOV X1, X31
	0x033242B8 BL 0x3315E80
	0x033242BC LDRB W8, [X20 + 0xA0]
	0x033242C0 MOV X19, X0
	0x033242C4 CBNZ W8, 0x33242D0
	0x033242C8 LDR X8, [X20 + 0x98]
	0x033242CC CBZ X8, 0x3324324
	0x033242D0 ADRP X21, 0xE04000
	0x033242D4 LDR X21, [X21 + 0x308]
	0x033242D8 MOV X0, X20
	0x033242DC BL 0x3324144
	0x033242E0 LDR X8, [X21]
	0x033242E4 MOV X1, X0
	0x033242E8 MOV X2, X31
	0x033242EC MOV X0, X8
	0x033242F0 BL 0x32094D4
	0x033242F4 MOV X20, X0
	0x033242F8 CBZ X19, 0x3324320
	0x033242FC MOV X0, X31
	0x03324300 BL 0x33C1548
	0x03324304 MOV X1, X0
	0x03324308 MOV X0, X19
	0x0332430C MOV X2, X20
	0x03324310 LDP X20, X19, [X31 + 0x10]
	0x03324314 MOV X3, X31
	0x03324318 LDP X30, X21, [X31], #0x20
	0x0332431C B 0x32274B8
	0x03324320 MOV X19, X20
	0x03324324 MOV X0, X19
	0x03324328 LDP X20, X19, [X31 + 0x10]
	0x0332432C LDP X30, X21, [X31], #0x20
	0x03324330 RET
	0x03324334 STR X30, [X31 - 0x10]!
	0x03324338 LDR X8, [X0 + 0x18]
	0x0332433C CBNZ X8, 0x3324350
	0x03324340 LDR X8, [X0 + 0x10]
	0x03324344 CBZ X8, 0x332435C
	0x03324348 LDR X8, [X8 + 0x58]
	0x0332434C STR X8, [X0 + 0x18]
	0x03324350 MOV X0, X8
	0x03324354 LDR X30, [X31], #0x10
	0x03324358 RET
	0x0332435C BL 0x1C16F20
	0x03324360 STR X30, [X31 - 0x20]!
	0x03324364 STP X20, X19, [X31 + 0x10]
	0x03324368 ADRP X20, 0x10B8000
	0x0332436C LDRB W8, [X20 + 0xC7E]
	0x03324370 MOV X19, X0
	0x03324374 TBNZ X8, 0x0, 0x332438C
	0x03324378 ADRP X0, 0xDD1000
	0x0332437C LDR X0, [X0 + 0xC48]
	0x03324380 BL 0x1C16CF4
	0x03324384 MOVZ W8, 0x1
	0x03324388 STRB W8, [X20 + 0xC7E]
	0x0332438C LDR X0, [X19 + 0x30]
	0x03324390 CBNZ X0, 0x33243D4
	0x03324394 LDR X20, [X19 + 0x18]
	0x03324398 CBNZ X20, 0x33243AC
	0x0332439C LDR X8, [X19 + 0x10]
	0x033243A0 CBZ X8, 0x33243E0
	0x033243A4 LDR X20, [X8 + 0x58]
	0x033243A8 STR X20, [X19 + 0x18]
	0x033243AC ADRP X8, 0xDD1000
	0x033243B0 LDR X8, [X8 + 0xC48]
	0x033243B4 LDR X0, [X8]
	0x033243B8 LDR W8, [X0 + 0xE0]
	0x033243BC CBNZ W8, 0x33243C4
	0x033243C0 BL 0x1C16DFC
	0x033243C4 MOV X0, X20
	0x033243C8 MOV X1, X31
	0x033243CC BL 0x333C3F8
	0x033243D0 STR X0, [X19 + 0x30]
	0x033243D4 LDP X20, X19, [X31 + 0x10]
	0x033243D8 LDR X30, [X31], #0x20
	0x033243DC RET
	0x033243E0 BL 0x1C16F20
	0x033243E4 STR X30, [X31 - 0x10]!
	0x033243E8 LDR X8, [X0 + 0x20]
	0x033243EC CBNZ X8, 0x3324400
	0x033243F0 LDR X8, [X0 + 0x10]
	0x033243F4 CBZ X8, 0x332440C
	0x033243F8 LDR X8, [X8 + 0x50]
	0x033243FC STR X8, [X0 + 0x20]
	0x03324400 MOV X0, X8
	0x03324404 LDR X30, [X31], #0x10
	0x03324408 RET
	0x0332440C BL 0x1C16F20
	0x03324410 LDR X8, [X0 + 0x90]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Add X29, X31, 0
	014 Subtract X31, X31, 80
	015 Move X22, 0x10BA000
	016 Move W8, [X22+3186]
	017 Move X20, X3
	018 Move X26, X1
	019 Move X25, X0
	020 And X21, X1, 0
	021 And X19, X3, 0
	022 Move [X29-40], X4
	023 Move [X29-32], X2
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {51}
	028 Move X0, 0xDDA000
	029 Move X0, [X0+2536]
	030 Call 0x1C17CF4
	031 Move X0, 0xE05000
	032 Move X0, [X0+2024]
	033 Call 0x1C17CF4
	034 Move X0, 0xE00000
	035 Move X0, [X0+40]
	036 Call 0x1C17CF4
	037 Move X0, 0xE05000
	038 Move X0, [X0+40]
	039 Call 0x1C17CF4
	040 Move X0, 0xDFF000
	041 Move X0, [X0+2128]
	042 Call 0x1C17CF4
	043 Move X0, 0xE00000
	044 Move X0, [X0+1256]
	045 Call 0x1C17CF4
	046 Move X0, 0xDFF000
	047 Move X0, [X0+2136]
	048 Call 0x1C17CF4
	049 Move W8, 1
	050 Move [X22+3186], W8
	051 Move X27, 0xDDA000
	052 Move X27, [X27+2536]
	053 Add X8, X31, 0
	054 Subtract X9, X8, 16
	055 Move [X29-16], X31
	056 Move [X29-8], X31
	057 Move [X29-24], X31
	058 Move [X29-56], X9
	059 Add X31, X9, 0
	060 Move [X8-16], X31
	061 NotImplemented "Instruction LDUR not yet implemented."
	062 Move X24, 0x2600
	063 Move W22, 1
	064 NotImplemented "Instruction MOVK not yet implemented."
	065 Move [X8], W31
	066 Move W8, 4
	067 Compare W26, 0
	068 JumpIfEqual {323}
	069 Move X23, X25
	070 Move [X29-48], X8
	071 Move X0, [X27]
	072 Move W28, W26
	073 Move W25, W20
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {78}
	077 Call 0x1C17DFC
	078 NotImplemented "Instruction LDUR not yet implemented."
	079 Or X1, X21, X28
	080 Or X3, X19, X25
	081 Subtract X4, X29, 4
	082 Subtract X5, X29, 8
	083 Move X0, X23
	084 Call Convert.TryDecodeFromUtf16, X0, X1, X2, X3
	085 NotImplemented "Instruction LDUR not yet implemented."
	086 NotImplemented "Instruction LDURSW not yet implemented."
	087 Move W8, [X9]
	088 Add W8, W19, W8
	089 Move [X9], W8
	090 Move TEMP, X0
	091 And TEMP, TEMP, 1
	092 Compare TEMP, 1
	093 JumpIfEqual {323}
	094 Move X8, 0xE04000
	095 NotImplemented "Instruction LDURSW not yet implemented."
	096 Move X8, [X8+2024]
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move X21, [X8]
	099 Move X0, X31
	100 Call ThrowHelper.ThrowArgumentOutOfRangeException
	101 Move X0, [X21+32]
	102 Move W8, [X0+309]
	103 Move TEMP, X8
	104 And TEMP, TEMP, 1
	105 Compare TEMP, 1
	106 JumpIfEqual {108}
	107 Call 0x1C5D684
	108 Move X8, 0xE04000
	109 Move X8, [X8+40]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Move X21, [X8]
	112 Move X0, X31
	113 Call ThrowHelper.ThrowArgumentOutOfRangeException
	114 Move X0, [X21+32]
	115 Subtract W26, W26, W28
	116 Move W8, [X0+309]
	117 Move TEMP, X8
	118 And TEMP, TEMP, 1
	119 Compare TEMP, 1
	120 JumpIfEqual {122}
	121 Call 0x1C5D684
	122 Compare W26, 0
	123 JumpIfEqual {338}
	124 Move X0, [X27]
	125 Add X25, X23, X28
	126 NotImplemented "Instruction LDRH not yet implemented."
	127 Move W8, [X0+224]
	128 Compare W8, 0
	129 JumpIfNotEqual {131}
	130 Call 0x1C17DFC
	131 NotImplemented "Instruction LDUR not yet implemented."
	132 Subtract W20, W20, W19
	133 NotImplemented "Instruction CMP not yet implemented."
	134 Add X8, X8, X19
	135 Move [X29-32], X8
	136 Move W8, W21
	137 NotImplemented "Instruction LSLV not yet implemented."
	138 And X31, X8, X24
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Move W23, 1
	141 NotImplemented "Instruction CMP not yet implemented."
	142 Move X0, [X27]
	143 NotImplemented "Instruction LDRH not yet implemented."
	144 Move W8, [X0+224]
	145 Compare W8, 0
	146 JumpIfNotEqual {148}
	147 Call 0x1C17DFC
	148 NotImplemented "Instruction CMP not yet implemented."
	149 Move W8, W21
	150 NotImplemented "Instruction LSLV not yet implemented."
	151 And X31, X8, X24
	152 Add W23, W23, 1
	153 NotImplemented "Instruction CMP not yet implemented."
	154 Move X8, 0xE04000
	155 Move X8, [X8+2024]
	156 Move W23, W26
	157 Move X21, [X8]
	158 Move X0, [X21+32]
	159 Move W8, [X0+309]
	160 Move TEMP, X8
	161 And TEMP, TEMP, 1
	162 Compare TEMP, 1
	163 JumpIfEqual {165}
	164 Call 0x1C5D684
	165 Move W8, 0xAAAB
	166 Move W9, 0xAAAA
	167 NotImplemented "Instruction MOVK not yet implemented."
	168 NotImplemented "Instruction MOVK not yet implemented."
	169 NotImplemented "Instruction MADD not yet implemented."
	170 Move W9, 0x5554
	171 NotImplemented "Instruction MOVK not yet implemented."
	172 NotImplemented "Instruction CMP not yet implemented."
	173 Subtract W26, W26, W23
	174 Move X21, X31
	175 Move X19, X31
	176 Add X23, X25, W23
	177 Compare W26, 0
	178 JumpIfNotEqual {71}
	179 Move X8, 0xE04000
	180 Move X8, [X8+2024]
	181 NotImplemented "Instruction CMP not yet implemented."
	182 Move X21, [X8]
	183 Move X0, X31
	184 Call ThrowHelper.ThrowArgumentOutOfRangeException
	185 Move X0, [X27]
	186 Move W19, W26
	187 Move W8, [X0+224]
	188 Compare W8, 0
	189 JumpIfNotEqual {191}
	190 Call 0x1C17DFC
	191 Move X1, X19
	192 Move X21, [X29-56]
	193 Move X19, [X29-48]
	194 Subtract X4, X29, 12
	195 Subtract X5, X29, 16
	196 Move X0, X25
	197 Move X2, X21
	198 Move X3, X19
	199 Call Convert.CopyToTempBufferWithoutWhiteSpace, X0, X1, X2, X3
	200 NotImplemented "Instruction LDUR not yet implemented."
	201 And W31, W1, 3
	202 Move X8, 0xDFE000
	203 Move X8, [X8+2128]
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Move [X29-48], X1
	206 Move X8, [X8]
	207 Move X0, X31
	208 Move X19, X8
	209 Call ThrowHelper.ThrowArgumentOutOfRangeException
	210 NotImplemented "Instruction LDUR not yet implemented."
	211 Move X8, X19
	212 Move X0, [X8+32]
	213 Move W8, [X0+309]
	214 Move TEMP, X8
	215 And TEMP, TEMP, 1
	216 Compare TEMP, 1
	217 JumpIfEqual {220}
	218 Call 0x1C5D684
	219 NotImplemented "Instruction LDUR not yet implemented."
	220 Move X8, 0xDFE000
	221 Move X8, [X8+2136]
	222 Move X0, X21
	223 Move W19, W20
	224 Move X2, [X8]
	225 Call Span`1<Char>.op_Implicit, X0
	226 Move X21, X0
	227 Move X0, [X27]
	228 Move W8, [X0+224]
	229 Compare W8, 0
	230 JumpIfNotEqual {234}
	231 Move [X29-64], X1
	232 Call 0x1C17DFC
	233 NotImplemented "Instruction LDUR not yet implemented."
	234 NotImplemented "Instruction LDUR not yet implemented."
	235 Subtract X4, X29, 20
	236 Subtract X5, X29, 24
	237 Move X0, X21
	238 Move X3, X19
	239 Call Convert.TryDecodeFromUtf16, X0, X1, X2, X3
	240 Move TEMP, X0
	241 And TEMP, TEMP, 1
	242 Compare TEMP, 1
	243 JumpIfNotEqual {320}
	244 NotImplemented "Instruction LDUR not yet implemented."
	245 NotImplemented "Instruction LDURSW not yet implemented."
	246 Move W8, [X9]
	247 Move [X29-64], X10
	248 Add W8, W10, W8
	249 Move [X9], W8
	250 Move X8, 0xE04000
	251 NotImplemented "Instruction LDURSW not yet implemented."
	252 Move X8, [X8+2024]
	253 NotImplemented "Instruction CMP not yet implemented."
	254 Move X19, [X8]
	255 Move X0, X31
	256 Call ThrowHelper.ThrowArgumentOutOfRangeException
	257 Move X0, [X19+32]
	258 Move W8, [X0+309]
	259 Move TEMP, X8
	260 And TEMP, TEMP, 1
	261 Compare TEMP, 1
	262 JumpIfEqual {264}
	263 Call 0x1C5D684
	264 Move X8, 0xE04000
	265 Move X8, [X8+40]
	266 Move X19, [X8]
	267 NotImplemented "Instruction LDUR not yet implemented."
	268 NotImplemented "Instruction CMP not yet implemented."
	269 Move X0, X31
	270 Call ThrowHelper.ThrowArgumentOutOfRangeException
	271 Move X0, [X19+32]
	272 Subtract W26, W26, W21
	273 Move [X29-72], X21
	274 Move W8, [X0+309]
	275 Move TEMP, X8
	276 And TEMP, TEMP, 1
	277 Compare TEMP, 1
	278 JumpIfEqual {280}
	279 Call 0x1C5D684
	280 Move X8, [X29-72]
	281 Move X10, [X29-64]
	282 Move W9, 0xAAAA
	283 NotImplemented "Instruction MOVK not yet implemented."
	284 Move X19, X31
	285 Add X25, X25, X8
	286 Move W8, 0xAAAB
	287 NotImplemented "Instruction MOVK not yet implemented."
	288 NotImplemented "Instruction MADD not yet implemented."
	289 Or W9, W31, 0x55555555
	290 NotImplemented "Instruction CMP not yet implemented."
	291 NotImplemented "Instruction LDUR not yet implemented."
	292 Move X21, X31
	293 Subtract W20, W20, W10
	294 Add X8, X8, X10
	295 Move [X29-32], X8
	296 NotImplemented "Instruction LDUR not yet implemented."
	297 NotImplemented "Instruction CMP not yet implemented."
	298 NotImplemented "Instruction LDUR not yet implemented."
	299 Move X22, 0x2600
	300 Move W19, W26
	301 Move W20, 1
	302 Add X8, X23, X8
	303 Add X21, X8, X28
	304 NotImplemented "Instruction MOVK not yet implemented."
	305 Move X0, [X27]
	306 NotImplemented "Instruction LDRH not yet implemented."
	307 Move W8, [X0+224]
	308 Compare W8, 0
	309 JumpIfNotEqual {311}
	310 Call 0x1C17DFC
	311 NotImplemented "Instruction CMP not yet implemented."
	312 Move W8, W23
	313 NotImplemented "Instruction LSLV not yet implemented."
	314 And X31, X8, X22
	315 Add X21, X21, 2
	316 Subtract X19, X19, 1
	317 Move W0, 1
	318 Compare W26, 0
	319 JumpIfEqual {323}
	320 NotImplemented "Instruction LDUR not yet implemented."
	321 Move W0, W31
	322 Move [X8], W31
	323 Move W0, 1
	324 Add X31, X29, 0
	325 Move X20, [X31+80]
	326 Move X19, [X31+88]
	327 Move X22, [X31+64]
	328 Move X21, [X31+72]
	329 Move X24, [X31+48]
	330 Move X23, [X31+56]
	331 Move X26, [X31+32]
	332 Move X25, [X31+40]
	333 Move X28, [X31+16]
	334 Move X27, [X31+24]
	335 Move X29, [X31+96]
	336 Move X30, [X31+104]
	337 Return X0
	338 Call 0x1C17F28

Method: System.Void CopyToTempBufferWithoutWhiteSpace(System.ReadOnlySpan`1<System.Char> chars, System.Span`1<System.Char> tempBuffer, out System.Int32 consumed, out System.Int32 charsWritten)

Disassembly:
	0x03324414 CBZ X8, 0x3324420
	0x03324418 MOV X0, X8
	0x0332441C RET
	0x03324420 B 0x3324424
	0x03324424 STR X30, [X31 - 0x20]!
	0x03324428 STP X20, X19, [X31 + 0x10]
	0x0332442C MOV X19, X0
	0x03324430 LDR X0, [X0 + 0x78]
	0x03324434 CBZ X0, 0x332446C
	0x03324438 LDR X8, [X0]
	0x0332443C LDR X20, [X19 + 0x10]
	0x03324440 LDP X9, X1, [X8 + 0x1A8]
	0x03324444 BLR X9
	0x03324448 CBZ X20, 0x332446C
	0x0332444C MOV W1, W0
	0x03324450 MOV X0, X20
	0x03324454 MOV X2, X31
	0x03324458 BL 0x334075C
	0x0332445C STR X0, [X19 + 0x90]
	0x03324460 LDP X20, X19, [X31 + 0x10]
	0x03324464 LDR X30, [X31], #0x20
	0x03324468 RET
	0x0332446C BL 0x1C16F20
	0x03324470 LDR X8, [X0 + 0xA0]
	0x03324474 CBZ X8, 0x3324480
	0x03324478 MOV X0, X8
	0x0332447C RET
	0x03324480 B 0x3324484
	0x03324484 STR X30, [X31 - 0x20]!
	0x03324488 STP X20, X19, [X31 + 0x10]
	0x0332448C MOV X19, X0
	0x03324490 LDR X0, [X0 + 0x78]
	0x03324494 CBZ X0, 0x33244CC
	0x03324498 LDR X8, [X0]
	0x0332449C LDR X20, [X19 + 0x10]
	0x033244A0 LDP X9, X1, [X8 + 0x1A8]
	0x033244A4 BLR X9
	0x033244A8 CBZ X20, 0x33244CC
	0x033244AC MOV W1, W0
	0x033244B0 MOV X0, X20
	0x033244B4 MOV X2, X31
	0x033244B8 BL 0x3340740
	0x033244BC STR X0, [X19 + 0xA0]
	0x033244C0 LDP X20, X19, [X31 + 0x10]
	0x033244C4 LDR X30, [X31], #0x20
	0x033244C8 RET
	0x033244CC BL 0x1C16F20
	0x033244D0 LDR X8, [X0 + 0xA8]
	0x033244D4 CBZ X8, 0x33244E0
	0x033244D8 MOV X0, X8
	0x033244DC RET
	0x033244E0 B 0x33244E4
	0x033244E4 STR X30, [X31 - 0x20]!
	0x033244E8 STP X20, X19, [X31 + 0x10]
	0x033244EC MOV X19, X0
	0x033244F0 LDR X0, [X0 + 0x78]
	0x033244F4 CBZ X0, 0x332452C
	0x033244F8 LDR X8, [X0]
	0x033244FC LDR X20, [X19 + 0x10]
	0x03324500 LDP X9, X1, [X8 + 0x1A8]
	0x03324504 BLR X9
	0x03324508 CBZ X20, 0x332452C
	0x0332450C MOV W1, W0
	0x03324510 MOV X0, X20
	0x03324514 MOV X2, X31
	0x03324518 BL 0x33407B0
	0x0332451C STR X0, [X19 + 0xA8]
	0x03324520 LDP X20, X19, [X31 + 0x10]
	0x03324524 LDR X30, [X31], #0x20
	0x03324528 RET
	0x0332452C BL 0x1C16F20
	0x03324530 LDR X8, [X0 + 0xB0]
	0x03324534 CBZ X8, 0x3324540

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X19, 0x10B9000
	015 Move W8, [X19+3187]
	016 Move X21, X5
	017 Move X25, X4
	018 Move X22, X3
	019 Move X23, X2
	020 Move X20, X1
	021 Move X24, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {37}
	026 Move X0, 0xDD9000
	027 Move X0, [X0+2536]
	028 Call 0x1C17CF4
	029 Move X0, 0xDFF000
	030 Move X0, [X0+40]
	031 Call 0x1C17CF4
	032 Move X0, 0xDFF000
	033 Move X0, [X0+1416]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X19+3187], W8
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move [X21], W31
	039 Move [X31+8], X25
	040 Move X26, 0xDD9000
	041 Move X26, [X26+2536]
	042 Move X29, 0x2600
	043 Move X25, X31
	044 And X27, X20, 0
	045 Move W28, 1
	046 NotImplemented "Instruction MOVK not yet implemented."
	047 Move X0, [X26]
	048 NotImplemented "Instruction LDRH not yet implemented."
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move W8, W19
	055 NotImplemented "Instruction LSLV not yet implemented."
	056 And X31, X8, X29
	057 Add X25, X25, 1
	058 NotImplemented "Instruction CMP not yet implemented."
	059 NotImplemented "Instruction LDRSW not yet implemented."
	060 Add W9, W8, 1
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move [X21], W9
	063 NotImplemented "Instruction CMP not yet implemented."
	064 NotImplemented "Instruction STRH not yet implemented."
	065 Add W20, W25, 1
	066 Move X25, [X31+8]
	067 Move [X25], W20
	068 Move X20, [X31+96]
	069 Move X19, [X31+104]
	070 Move X22, [X31+80]
	071 Move X21, [X31+88]
	072 Move X24, [X31+64]
	073 Move X23, [X31+72]
	074 Move X26, [X31+48]
	075 Move X25, [X31+56]
	076 Move X28, [X31+32]
	077 Move X27, [X31+40]
	078 Move X29, [X31+16]
	079 Move X30, [X31+24]
	080 Add X31, X31, 112
	081 Return 
	082 Call 0x1C17F28

Method: System.Boolean IsSpace(System.Char c)

Disassembly:
	0x03324538 MOV X0, X8
	0x0332453C RET
	0x03324540 B 0x3324544
	0x03324544 STR X30, [X31 - 0x20]!
	0x03324548 STP X20, X19, [X31 + 0x10]
	0x0332454C MOV X19, X0
	0x03324550 LDR X0, [X0 + 0x78]
	0x03324554 CBZ X0, 0x332458C
	0x03324558 LDR X8, [X0]
	0x0332455C LDR X20, [X19 + 0x10]
	0x03324560 LDP X9, X1, [X8 + 0x1A8]

ISIL:
	001 Subtract W8, W0, 9
	002 And W9, W8, 0xFFFF
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move W9, 19
	005 NotImplemented "Instruction MOVK not yet implemented."
	006 NotImplemented "Instruction LSRV not yet implemented."
	007 And W0, W8, 1
	008 Return X0
	009 Move W0, W31
	010 Return X0

Method: System.Byte[] FromBase64CharPtr(System.Char* inputPtr, System.Int32 inputLength)

Disassembly:
	0x03323DB8 LDP X30, X21, [X31], #0x20
	0x03323DBC B 0x3314A68
	0x03323DC0 STR X30, [X31 - 0x20]!
	0x03323DC4 STP X20, X19, [X31 + 0x10]
	0x03323DC8 ADRP X19, 0x10B9000
	0x03323DCC ADRP X20, 0xE05000
	0x03323DD0 LDRB W8, [X19 + 0xC7B]
	0x03323DD4 LDR X20, [X20 + 0x2E0]
	0x03323DD8 TBNZ X8, 0x0, 0x3323DF0
	0x03323DDC ADRP X0, 0xE05000
	0x03323DE0 LDR X0, [X0 + 0x2E0]
	0x03323DE4 BL 0x1C16CF4
	0x03323DE8 MOVZ W8, 0x1
	0x03323DEC STRB W8, [X19 + 0xC7B]
	0x03323DF0 LDR X0, [X20]
	0x03323DF4 LDP X20, X19, [X31 + 0x10]
	0x03323DF8 LDR X30, [X31], #0x20
	0x03323DFC RET
	0x03323E00 MOV X8, X1
	0x03323E04 MOV X1, X2
	0x03323E08 MOV X2, X8
	0x03323E0C MOV X3, X31
	0x03323E10 B 0x330E16C
	0x03323E14 STP X29, X30, [X31 - 0x50]!
	0x03323E18 STR X25, [X31 + 0x10]
	0x03323E1C STP X24, X23, [X31 + 0x20]
	0x03323E20 STP X22, X21, [X31 + 0x30]
	0x03323E24 STP X20, X19, [X31 + 0x40]
	0x03323E28 ADD X29, X31, 0x0
	0x03323E2C ADRP X21, 0x10B9000
	0x03323E30 ADRP X24, 0xE05000
	0x03323E34 ADRP X25, 0xDD0000
	0x03323E38 LDRB W8, [X21 + 0xC79]
	0x03323E3C LDR X24, [X24 + 0x2E8]
	0x03323E40 LDR X25, [X25 + 0x6C0]
	0x03323E44 MOV X22, X3
	0x03323E48 MOV X23, X2
	0x03323E4C MOV X20, X1
	0x03323E50 MOV X19, X0
	0x03323E54 TBNZ X8, 0x0, 0x3323EB4
	0x03323E58 ADRP X0, 0xE05000
	0x03323E5C LDR X0, [X0 + 0x2E8]
	0x03323E60 BL 0x1C16CF4
	0x03323E64 ADRP X0, 0xDD1000
	0x03323E68 LDR X0, [X0 + 0x478]
	0x03323E6C BL 0x1C16CF4
	0x03323E70 ADRP X0, 0xDF8000
	0x03323E74 LDR X0, [X0 + 0xB60]
	0x03323E78 BL 0x1C16CF4
	0x03323E7C ADRP X0, 0xDD2000
	0x03323E80 LDR X0, [X0 + 0x278]
	0x03323E84 BL 0x1C16CF4
	0x03323E88 ADRP X0, 0xDD0000
	0x03323E8C LDR X0, [X0 + 0x6C0]
	0x03323E90 BL 0x1C16CF4
	0x03323E94 ADRP X0, 0xE05000
	0x03323E98 LDR X0, [X0 + 0x2F0]
	0x03323E9C BL 0x1C16CF4
	0x03323EA0 ADRP X0, 0xE05000
	0x03323EA4 LDR X0, [X0 + 0x2F8]
	0x03323EA8 BL 0x1C16CF4
	0x03323EAC MOVZ W8, 0x1
	0x03323EB0 STRB W8, [X21 + 0xC79]
	0x03323EB4 SUB X21, X31, 0x10
	0x03323EB8 ADD X31, X21, 0x0
	0x03323EBC MOV X0, X19
	0x03323EC0 MOV X1, X20
	0x03323EC4 MOV X2, X23
	0x03323EC8 MOV X3, X22
	0x03323ECC MOV X4, X31
	0x03323ED0 BL 0x3315D1C
	0x03323ED4 LDR X0, [X25]
	0x03323ED8 LDR X22, [X24]
	0x03323EDC LDR W8, [X0 + 0xE0]
	0x03323EE0 CBNZ W8, 0x3323EE8
	0x03323EE4 BL 0x1C16DFC
	0x03323EE8 MOV X0, X22
	0x03323EEC MOV X1, X31
	0x03323EF0 BL 0x338C698
	0x03323EF4 CBZ X20, 0x3323FC4
	0x03323EF8 ADRP X8, 0xE05000
	0x03323EFC LDR X8, [X8 + 0x2F0]
	0x03323F00 ADRP X22, 0xDD1000
	0x03323F04 MOV X2, X0
	0x03323F08 MOV X0, X20
	0x03323F0C LDR X1, [X8]
	0x03323F10 LDR X22, [X22 + 0x478]
	0x03323F14 MOV X3, X31
	0x03323F18 BL 0x32A9678
	0x03323F1C LDR X1, [X22]
	0x03323F20 CBZ X0, 0x3323F34
	0x03323F24 LDR X9, [X0]
	0x03323F28 LDR X8, [X1 + 0x40]
	0x03323F2C CMP X9, X8
	0x03323F30 B.NE 0x3323FC8
	0x03323F34 ADRP X22, 0xDF8000
	0x03323F38 ADRP X23, 0xE05000
	0x03323F3C LDR X22, [X22 + 0xB60]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x10BA000
	007 Move W8, [X21+3188]
	008 Move W20, W1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0xDD1000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move X0, 0xDDA000
	018 Move X0, [X0+2536]
	019 Call 0x1C17CF4
	020 Move X0, 0xE06000
	021 Move X0, [X0+664]
	022 Call 0x1C17CF4
	023 Move X0, 0xE00000
	024 Move X0, [X0+760]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+3188], W8
	028 Move X8, 0xDDA000
	029 Move X8, [X8+2536]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move [X31+12], W31
	032 Add X10, X19, W20
	033 Move X11, 0x2600
	034 Move W20, W20
	035 Move W9, 1
	036 Subtract X10, X10, 2
	037 NotImplemented "Instruction MOVK not yet implemented."
	038 NotImplemented "Instruction LDRH not yet implemented."
	039 NotImplemented "Instruction CMP not yet implemented."
	040 NotImplemented "Instruction LSLV not yet implemented."
	041 And X31, X12, X11
	042 Subtract X20, X20, 1
	043 Add X12, X20, 1
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Subtract X10, X10, 2
	046 Move W20, W31
	047 Move X0, [X8]
	048 Move X21, 0xDD1000
	049 Move W8, [X0+224]
	050 Move X21, [X21+1560]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X22, 0xE00000
	055 Move X22, [X22+760]
	056 Move X0, X19
	057 Move W1, W20
	058 Call Convert.FromBase64_ComputeResultLength, X0, X1
	059 Move X8, [X21]
	060 Move W1, W0
	061 Move X0, X8
	062 Call 0x1C17D6C
	063 Move X21, X0
	064 Move TEMP, X20
	065 And TEMP, TEMP, -2147483648
	066 Compare TEMP, -2147483648
	067 JumpIfNotEqual {70}
	068 Move X0, X31
	069 Call ThrowHelper.ThrowArgumentOutOfRangeException
	070 Move X1, [X22]
	071 Move X0, X21
	072 Move W20, W20
	073 Call 0x25FC4C0, X0
	074 Move X2, X0
	075 Move X3, X1
	076 Add X4, X31, 12
	077 Move X0, X19
	078 Move X1, X20
	079 Call Convert.TryFromBase64Chars, X0, X1, X2
	080 Move TEMP, X0
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfNotEqual {91}
	084 Move X0, X21
	085 Move X20, [X31+32]
	086 Move X19, [X31+40]
	087 Move X22, [X31+16]
	088 Move X21, [X31+24]
	089 Move X30, [X31+48]
	090 Return X0
	091 Move X0, 0xDFE000
	092 Move X0, [X0+3080]
	093 Call 0x1C17D08
	094 Call 0x1C17F10
	095 Move X19, X0
	096 Move X0, 0xE06000
	097 Move X0, [X0+672]
	098 Call 0x1C17D08
	099 Move X1, X0
	100 Move X0, X19
	101 Move X2, X31
	102 Call FormatException..ctor, X0, X1
	103 Move X0, 0xE06000
	104 Move X0, [X0+680]
	105 Call 0x1C17D08
	106 Move X1, X0
	107 Move X0, X19
	108 Call 0x1C17DEC

Method: System.Int32 FromBase64_ComputeResultLength(System.Char* inputPtr, System.Int32 inputLength)

Disassembly:
	0x03324564 BLR X9
	0x03324568 CBZ X20, 0x332458C
	0x0332456C MOV W1, W0
	0x03324570 MOV X0, X20
	0x03324574 MOV X2, X31
	0x03324578 BL 0x3340778
	0x0332457C STR X0, [X19 + 0xB0]
	0x03324580 LDP X20, X19, [X31 + 0x10]
	0x03324584 LDR X30, [X31], #0x20
	0x03324588 RET
	0x0332458C BL 0x1C16F20
	0x03324590 STP X30, X21, [X31 - 0x20]!
	0x03324594 STP X20, X19, [X31 + 0x10]
	0x03324598 ADRP X21, 0x10B8000
	0x0332459C ADRP X20, 0xDD1000
	0x033245A0 LDRB W8, [X21 + 0xC7F]
	0x033245A4 LDR X20, [X20 + 0xC48]
	0x033245A8 MOV X19, X0
	0x033245AC TBNZ X8, 0x0, 0x33245D0
	0x033245B0 ADRP X0, 0xDD1000
	0x033245B4 LDR X0, [X0 + 0xC48]
	0x033245B8 BL 0x1C16CF4
	0x033245BC ADRP X0, 0xE04000
	0x033245C0 LDR X0, [X0 + 0x310]
	0x033245C4 BL 0x1C16CF4
	0x033245C8 MOVZ W8, 0x1
	0x033245CC STRB W8, [X21 + 0xC7F]
	0x033245D0 MOVI V0.2D, 0xFFFFFFFFFFFFFFFF
	0x033245D4 MOVN W8, 0x0
	0x033245D8 MOV X0, X19
	0x033245DC MOV X1, X31
	0x033245E0 STR D0, [X19 + 0x80]
	0x033245E4 STR W8, [X19 + 0x144]
	0x033245E8 BL 0x33BDD8C
	0x033245EC LDR X0, [X20]
	0x033245F0 LDR W8, [X0 + 0xE0]
	0x033245F4 CBNZ W8, 0x33245FC
	0x033245F8 BL 0x1C16DFC
	0x033245FC MOV X0, X31
	0x03324600 BL 0x3338524
	0x03324604 CBZ X0, 0x332465C
	0x03324608 LDR X8, [X0 + 0xC0]
	0x0332460C ADRP X9, 0xE04000
	0x03324610 LDR X9, [X9 + 0x310]
	0x03324614 STR X8, [X19 + 0x10]
	0x03324618 LDR X0, [X9]
	0x0332461C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, W31
	004 Add X9, X0, W1
	005 NotImplemented "Instruction CMP not yet implemented."
	006 NotImplemented "Instruction LDRH not yet implemented."
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Subtract W1, W1, 1
	010 Add W8, W8, 1
	011 Subtract W1, W1, 1
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move X9, -41472000
	014 Add X9, X9, 1644
	015 Add W10, W1, 3
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W8, [X9]
	018 NotImplemented "Instruction CSEL not yet implemented."
	019 NotImplemented "Instruction SBFM not yet implemented."
	020 Move W10, W10
	021 ShiftRight W10, 31
	022 And W10, W10, 0x3FFFFFFF
	023 Add W9, W10, W9
	024 Add W0, W8, W9
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Return X0
	028 Move X0, 0xDFD000
	029 Move X0, [X0+3080]
	030 Call 0x1C17D08
	031 Call 0x1C17F10
	032 Move X19, X0
	033 Move X0, 0xE05000
	034 Move X0, [X0+672]
	035 Call 0x1C17D08
	036 Move X1, X0
	037 Move X0, X19
	038 Move X2, X31
	039 Call FormatException..ctor, X0, X1
	040 Move X0, 0xE05000
	041 Move X0, [X0+688]
	042 Call 0x1C17D08
	043 Move X1, X0
	044 Move X0, X19
	045 Call 0x1C17DEC

Method: System.Void .cctor()

Disassembly:
	0x03324620 CBNZ W8, 0x3324628
	0x03324624 BL 0x1C16DFC
	0x03324628 BL 0x3324660
	0x0332462C STR X0, [X19 + 0x78]
	0x03324630 CBZ X0, 0x332465C
	0x03324634 LDR X8, [X0]
	0x03324638 LDR X20, [X19 + 0x10]
	0x0332463C LDP X9, X1, [X8 + 0x1A8]
	0x03324640 BLR X9
	0x03324644 MOV W2, W0
	0x03324648 MOV X0, X19
	0x0332464C MOV X1, X20
	0x03324650 LDP X20, X19, [X31 + 0x10]
	0x03324654 LDP X30, X21, [X31], #0x20
	0x03324658 B 0x3324728
	0x0332465C BL 0x1C16F20
	0x03324660 STR X30, [X31 - 0x20]!
	0x03324664 STP X20, X19, [X31 + 0x10]
	0x03324668 ADRP X19, 0x10B8000
	0x0332466C ADRP X20, 0xE04000
	0x03324670 LDRB W8, [X19 + 0xCE7]
	0x03324674 LDR X20, [X20 + 0x310]
	0x03324678 TBNZ X8, 0x0, 0x3324690
	0x0332467C ADRP X0, 0xE04000
	0x03324680 LDR X0, [X0 + 0x310]
	0x03324684 BL 0x1C16CF4
	0x03324688 MOVZ W8, 0x1
	0x0332468C STRB W8, [X19 + 0xCE7]
	0x03324690 LDR X0, [X20]
	0x03324694 LDR W8, [X0 + 0xE0]
	0x03324698 CBNZ W8, 0x33246A4
	0x0332469C BL 0x1C16DFC
	0x033246A0 LDR X0, [X20]
	0x033246A4 LDR X8, [X0 + 0xB8]
	0x033246A8 LDR X19, [X8 + 0x10]
	0x033246AC BL 0x1C16D44
	0x033246B0 LDR X0, [X20]
	0x033246B4 CBNZ X19, 0x33246FC
	0x033246B8 BL 0x1C16F10
	0x033246BC MOVN W8, 0x0
	0x033246C0 MOV X1, X31
	0x033246C4 MOV X19, X0
	0x033246C8 STR W8, [X0 + 0x10]
	0x033246CC STR W8, [X0 + 0x18]
	0x033246D0 BL 0x33BDD8C
	0x033246D4 MOVZ W8, 0x1
	0x033246D8 STR W8, [X19 + 0x1C]
	0x033246DC LDR X0, [X20]
	0x033246E0 LDR W8, [X0 + 0xE0]
	0x033246E4 CBNZ W8, 0x33246EC
	0x033246E8 BL 0x1C16DFC
	0x033246EC BL 0x1C16D44
	0x033246F0 LDR X0, [X20]
	0x033246F4 LDR X8, [X0 + 0xB8]
	0x033246F8 STR X19, [X8 + 0x10]
	0x033246FC LDR W8, [X0 + 0xE0]
	0x03324700 CBNZ W8, 0x332470C
	0x03324704 BL 0x1C16DFC
	0x03324708 LDR X0, [X20]
	0x0332470C LDR X8, [X0 + 0xB8]
	0x03324710 LDR X19, [X8 + 0x10]
	0x03324714 BL 0x1C16D44
	0x03324718 MOV X0, X19
	0x0332471C LDP X20, X19, [X31 + 0x10]
	0x03324720 LDR X30, [X31], #0x20
	0x03324724 RET
	0x03324728 STP X30, X21, [X31 - 0x20]!
	0x0332472C STP X20, X19, [X31 + 0x10]
	0x03324730 LDR W8, [X0 + 0x80]
	0x03324734 MOV W20, W2
	0x03324738 MOV X19, X0
	0x0332473C MOV X21, X1
	0x03324740 ADDS W31, W8, 0x1
	0x03324744 B.NE 0x3324754
	0x03324748 CBZ X21, 0x3324840
	0x0332474C LDR W8, [X21 + 0x38]
	0x03324750 STR W8, [X19 + 0x80]
	0x03324754 LDR W8, [X19 + 0x84]
	0x03324758 ADDS W31, W8, 0x1
	0x0332475C B.NE 0x332476C
	0x03324760 CBZ X21, 0x3324840
	0x03324764 LDR W8, [X21 + 0x3C]
	0x03324768 STR W8, [X19 + 0x84]
	0x0332476C LDR X8, [X19 + 0x38]
	0x03324770 CBNZ X8, 0x3324780
	0x03324774 CBZ X21, 0x3324840
	0x03324778 LDR X8, [X21 + 0x10]
	0x0332477C STR X8, [X19 + 0x38]
	0x03324780 LDR X8, [X19 + 0x40]
	0x03324784 CBNZ X8, 0x3324794
	0x03324788 CBZ X21, 0x3324840
	0x0332478C LDR X8, [X21 + 0x18]
	0x03324790 STR X8, [X19 + 0x40]
	0x03324794 LDR X8, [X19 + 0x60]
	0x03324798 CBNZ X8, 0x33247A8
	0x0332479C CBZ X21, 0x3324840
	0x033247A0 LDR X8, [X21 + 0x20]
	0x033247A4 STR X8, [X19 + 0x60]
	0x033247A8 LDR X8, [X19 + 0x48]
	0x033247AC CBNZ X8, 0x33247C8
	0x033247B0 CBZ X21, 0x3324840
	0x033247B4 MOV X0, X21
	0x033247B8 MOV W1, W20
	0x033247BC MOV X2, X31
	0x033247C0 BL 0x3340820
	0x033247C4 STR X0, [X19 + 0x48]
	0x033247C8 LDR X0, [X19 + 0x10]
	0x033247CC CBZ X0, 0x3324840
	0x033247D0 MOV X1, X31
	0x033247D4 BL 0x3340348
	0x033247D8 LDR X8, [X19 + 0x10]
	0x033247DC STR X0, [X19 + 0x118]
	0x033247E0 CBZ X8, 0x3324840
	0x033247E4 MOV X0, X8
	0x033247E8 MOV X1, X31
	0x033247EC BL 0x3340360
	0x033247F0 STR X0, [X19 + 0x110]
	0x033247F4 CBZ X21, 0x3324840
	0x033247F8 MOV X0, X21
	0x033247FC MOV W1, W20
	0x03324800 MOV X2, X31
	0x03324804 BL 0x3340708
	0x03324808 STR X0, [X19 + 0x108]
	0x0332480C MOV X0, X21
	0x03324810 MOV W1, W20
	0x03324814 MOV X2, X31
	0x03324818 BL 0x33406EC
	0x0332481C STR X0, [X19 + 0x100]
	0x03324820 MOV X0, X21
	0x03324824 MOV W1, W20
	0x03324828 MOV X2, X31
	0x0332482C BL 0x3340724
	0x03324830 STR X0, [X19 + 0xF8]
	0x03324834 LDP X20, X19, [X31 + 0x10]
	0x03324838 LDP X30, X21, [X31], #0x20
	0x0332483C RET
	0x03324840 BL 0x1C16F20
	0x03324844 STP X30, X21, [X31 - 0x20]!
	0x03324848 STP X20, X19, [X31 + 0x10]
	0x0332484C MOV X20, X1
	0x03324850 MOVI V0.2D, 0xFFFFFFFFFFFFFFFF
	0x03324854 MOVN W8, 0x0
	0x03324858 MOV X1, X31
	0x0332485C MOV X19, X2
	0x03324860 MOV X21, X0
	0x03324864 STR D0, [X0 + 0x80]
	0x03324868 STR W8, [X0 + 0x144]
	0x0332486C BL 0x33BDD8C
	0x03324870 STR X20, [X21 + 0x10]
	0x03324874 MOV X1, X19
	0x03324878 LDP X20, X19, [X31 + 0x10]
	0x0332487C MOV X0, X21
	0x03324880 LDP X30, X21, [X31], #0x20
	0x03324884 B 0x3324888
	0x03324888 STR X30, [X31 - 0x30]!
	0x0332488C STP X22, X21, [X31 + 0x10]
	0x03324890 STP X20, X19, [X31 + 0x20]
	0x03324894 ADRP X22, 0x10B8000
	0x03324898 ADRP X21, 0xE03000
	0x0332489C LDRB W8, [X22 + 0xC85]
	0x033248A0 LDR X21, [X21 + 0x930]
	0x033248A4 MOV X20, X1
	0x033248A8 MOV X19, X0
	0x033248AC TBNZ X8, 0x0, 0x33248C4
	0x033248B0 ADRP X0, 0xE03000
	0x033248B4 LDR X0, [X0 + 0x930]
	0x033248B8 BL 0x1C16CF4
	0x033248BC MOVZ W8, 0x1
	0x033248C0 STRB W8, [X22 + 0xC85]
	0x033248C4 LDR X0, [X21]
	0x033248C8 LDR W8, [X0 + 0xE0]
	0x033248CC CBNZ W8, 0x33248D4
	0x033248D0 BL 0x1C16DFC
	0x033248D4 ADRP X22, 0x10B8000
	0x033248D8 LDRB W8, [X22 + 0xAFE]
	0x033248DC CBNZ W8, 0x33248F4
	0x033248E0 ADRP X0, 0xE03000
	0x033248E4 LDR X0, [X0 + 0x930]
	0x033248E8 BL 0x1C16CF4
	0x033248EC MOVZ W8, 0x1
	0x033248F0 STRB W8, [X22 + 0xAFE]
	0x033248F4 LDR X0, [X21]
	0x033248F8 LDR W8, [X0 + 0xE0]
	0x033248FC CBNZ W8, 0x3324908
	0x03324900 BL 0x1C16DFC
	0x03324904 LDR X0, [X21]
	0x03324908 LDR X8, [X0 + 0xB8]
	0x0332490C LDRB W8, [X8]
	0x03324910 CBNZ W8, 0x3324A84
	0x03324914 MOV X0, X19
	0x03324918 BL 0x3325078
	0x0332491C TBNZ X0, 0x0, 0x3324AA4
	0x03324920 CBZ X20, 0x3324AD8
	0x03324924 LDR X8, [X19 + 0x78]
	0x03324928 CMP X20, X8
	0x0332492C B.EQ 0x3324A14
	0x03324930 MOV X0, X19
	0x03324934 BL 0x332511C
	0x03324938 CBZ X0, 0x3324994
	0x0332493C MOV X21, X31
	0x03324940 LDR W8, [X0 + 0x18]
	0x03324944 CMP W21, W8
	0x03324948 B.GE 0x3324A24
	0x0332494C MOV X0, X19
	0x03324950 BL 0x332511C
	0x03324954 CBZ X0, 0x3324994
	0x03324958 LDR W8, [X0 + 0x18]
	0x0332495C CMP W21, W8
	0x03324960 B.CS 0x3324A80
	0x03324964 LDR X8, [X20]
	0x03324968 ADD X9, X0, X21, 0x1, LSL
	0x0332496C LDRH W22, [X9 + 0x20]
	0x03324970 MOV X0, X20
	0x03324974 LDP X9, X1, [X8 + 0x1A8]
	0x03324978 BLR X9
	0x0332497C CMP W22, W0, UXTH
	0x03324980 B.EQ 0x3324998
	0x03324984 MOV X0, X19
	0x03324988 BL 0x332511C
	0x0332498C ADD X21, X21, 0x1
	0x03324990 CBNZ X0, 0x3324940
	0x03324994 BL 0x1C16F20
	0x03324998 LDR X8, [X19 + 0x78]
	0x0332499C CBZ X8, 0x33249E0
	0x033249A0 MOVI V0.2D, 0x0
	0x033249A4 MOVN W8, 0x0
	0x033249A8 STP X31, X31, [X19 + 0x68]
	0x033249AC STP X31, X31, [X19 + 0x128]
	0x033249B0 STR X31, [X19 + 0x120]
	0x033249B4 STR X31, [X19 + 0x88]
	0x033249B8 STR X31, [X19 + 0x158]
	0x033249BC STP X31, X31, [X19 + 0x50]
	0x033249C0 STR X31, [X19 + 0x48]
	0x033249C4 STP X31, X31, [X19 + 0xD8]
	0x033249C8 STR X31, [X19 + 0xD0]
	0x033249CC STP X31, X31, [X19 + 0xF8]
	0x033249D0 STR X31, [X19 + 0x108]
	0x033249D4 STP V0, V0, [X19 + 0x90]
	0x033249D8 STP V0, V0, [X19 + 0xB0]
	0x033249DC STR W8, [X19 + 0x144]
	0x033249E0 STR X20, [X19 + 0x78]
	0x033249E4 LDR X8, [X20]
	0x033249E8 LDR X21, [X19 + 0x10]
	0x033249EC MOV X0, X20
	0x033249F0 LDP X9, X1, [X8 + 0x1A8]
	0x033249F4 BLR X9
	0x033249F8 MOV W2, W0
	0x033249FC MOV X0, X19
	0x03324A00 MOV X1, X21
	0x03324A04 LDP X20, X19, [X31 + 0x20]
	0x03324A08 LDP X22, X21, [X31 + 0x10]
	0x03324A0C LDR X30, [X31], #0x30
	0x03324A10 B 0x3324728
	0x03324A14 LDP X20, X19, [X31 + 0x20]
	0x03324A18 LDP X22, X21, [X31 + 0x10]
	0x03324A1C LDR X30, [X31], #0x30
	0x03324A20 RET
	0x03324A24 ADRP X0, 0xDD7000
	0x03324A28 LDR X0, [X0 + 0x760]
	0x03324A2C BL 0x1C16D08
	0x03324A30 BL 0x1C16F10
	0x03324A34 MOV X19, X0
	0x03324A38 ADRP X0, 0xDD9000
	0x03324A3C LDR X0, [X0 + 0xEC8]
	0x03324A40 BL 0x1C16D08
	0x03324A44 MOV X20, X0
	0x03324A48 ADRP X0, 0xE04000
	0x03324A4C LDR X0, [X0 + 0x318]
	0x03324A50 BL 0x1C16D08
	0x03324A54 MOV X2, X0
	0x03324A58 MOV X0, X19
	0x03324A5C MOV X1, X20
	0x03324A60 MOV X3, X31
	0x03324A64 BL 0x3311888
	0x03324A68 ADRP X0, 0xE04000
	0x03324A6C LDR X0, [X0 + 0x320]
	0x03324A70 BL 0x1C16D08
	0x03324A74 MOV X1, X0
	0x03324A78 MOV X0, X19
	0x03324A7C BL 0x1C16DEC
	0x03324A80 BL 0x1C16F28
	0x03324A84 ADRP X0, 0xDFA000
	0x03324A88 LDR X0, [X0 + 0xC50]
	0x03324A8C BL 0x1C16D08
	0x03324A90 BL 0x1C16F10
	0x03324A94 MOV X1, X31
	0x03324A98 MOV X19, X0
	0x03324A9C BL 0x338E344
	0x03324AA0 B 0x3324A68
	0x03324AA4 ADRP X0, 0xDCF000
	0x03324AA8 LDR X0, [X0 + 0x5B0]
	0x03324AAC BL 0x1C16D08
	0x03324AB0 BL 0x1C16F10
	0x03324AB4 MOV X19, X0
	0x03324AB8 ADRP X0, 0xDFE000
	0x03324ABC LDR X0, [X0 + 0xA38]
	0x03324AC0 BL 0x1C16D08
	0x03324AC4 MOV X1, X0
	0x03324AC8 MOV X0, X19
	0x03324ACC MOV X2, X31
	0x03324AD0 BL 0x337DF1C
	0x03324AD4 B 0x3324A68
	0x03324AD8 ADRP X0, 0xDD4000
	0x03324ADC LDR X0, [X0 + 0x528]
	0x03324AE0 BL 0x1C16D08
	0x03324AE4 BL 0x1C16F10
	0x03324AE8 MOV X19, X0
	0x03324AEC ADRP X0, 0xDD9000
	0x03324AF0 LDR X0, [X0 + 0xEC8]
	0x03324AF4 BL 0x1C16D08
	0x03324AF8 MOV X20, X0
	0x03324AFC ADRP X0, 0xE00000
	0x03324B00 LDR X0, [X0 + 0xCB0]
	0x03324B04 BL 0x1C16D08
	0x03324B08 MOV X2, X0
	0x03324B0C MOV X0, X19
	0x03324B10 MOV X1, X20
	0x03324B14 MOV X3, X31
	0x03324B18 BL 0x3315F7C
	0x03324B1C B 0x3324A68
	0x03324B20 STR X30, [X31 - 0x20]!
	0x03324B24 STP X20, X19, [X31 + 0x10]
	0x03324B28 ADRP X19, 0x10B8000
	0x03324B2C ADRP X20, 0xE04000
	0x03324B30 LDRB W8, [X19 + 0xC80]
	0x03324B34 LDR X20, [X20 + 0x328]
	0x03324B38 TBNZ X8, 0x0, 0x3324B50
	0x03324B3C ADRP X0, 0xE04000
	0x03324B40 LDR X0, [X0 + 0x328]
	0x03324B44 BL 0x1C16CF4
	0x03324B48 MOVZ W8, 0x1
	0x03324B4C STRB W8, [X19 + 0xC80]
	0x03324B50 LDR X0, [X20]
	0x03324B54 LDR W8, [X0 + 0xE0]
	0x03324B58 CBNZ W8, 0x3324B64
	0x03324B5C BL 0x1C16DFC
	0x03324B60 LDR X0, [X20]
	0x03324B64 LDR X8, [X0 + 0xB8]
	0x03324B68 LDR X19, [X8]
	0x03324B6C BL 0x1C16D44
	0x03324B70 CBNZ X19, 0x3324BBC
	0x03324B74 LDR X0, [X20]
	0x03324B78 BL 0x1C16F10
	0x03324B7C MOV X19, X0
	0x03324B80 BL 0x3324590
	0x03324B84 CBZ X19, 0x3324BEC
	0x03324B88 LDR X8, [X19 + 0x78]
	0x03324B8C CBZ X8, 0x3324BEC
	0x03324B90 MOVZ W9, 0x1
	0x03324B94 STRB W9, [X8 + 0x14]
	0x03324B98 STRB W9, [X19 + 0x140]
	0x03324B9C LDR X0, [X20]
	0x03324BA0 LDR W8, [X0 + 0xE0]
	0x03324BA4 CBNZ W8, 0x3324BAC
	0x03324BA8 BL 0x1C16DFC
	0x03324BAC BL 0x1C16D44
	0x03324BB0 LDR X8, [X20]
	0x03324BB4 LDR X8, [X8 + 0xB8]
	0x03324BB8 STR X19, [X8]
	0x03324BBC LDR X0, [X20]
	0x03324BC0 LDR W8, [X0 + 0xE0]
	0x03324BC4 CBNZ W8, 0x3324BD0
	0x03324BC8 BL 0x1C16DFC
	0x03324BCC LDR X0, [X20]
	0x03324BD0 LDR X8, [X0 + 0xB8]
	0x03324BD4 LDR X19, [X8]
	0x03324BD8 BL 0x1C16D44
	0x03324BDC MOV X0, X19
	0x03324BE0 LDP X20, X19, [X31 + 0x10]
	0x03324BE4 LDR X30, [X31], #0x20
	0x03324BE8 RET
	0x03324BEC BL 0x1C16F20
	0x03324BF0 STR X30, [X31 - 0x20]!
	0x03324BF4 STP X20, X19, [X31 + 0x10]
	0x03324BF8 ADRP X19, 0x10B8000
	0x03324BFC ADRP X20, 0xDD1000
	0x03324C00 LDRB W8, [X19 + 0xC81]
	0x03324C04 LDR X20, [X20 + 0xC48]
	0x03324C08 TBNZ X8, 0x0, 0x3324C44
	0x03324C0C ADRP X0, 0xDD1000
	0x03324C10 LDR X0, [X0 + 0xC48]
	0x03324C14 BL 0x1C16CF4
	0x03324C18 ADRP X0, 0xE04000
	0x03324C1C LDR X0, [X0 + 0x330]
	0x03324C20 BL 0x1C16CF4
	0x03324C24 ADRP X0, 0xE04000
	0x03324C28 LDR X0, [X0 + 0x328]
	0x03324C2C BL 0x1C16CF4
	0x03324C30 ADRP X0, 0xDCF000
	0x03324C34 LDR X0, [X0 + 0x6C0]
	0x03324C38 BL 0x1C16CF4
	0x03324C3C MOVZ W8, 0x1
	0x03324C40 STRB W8, [X19 + 0xC81]
	0x03324C44 LDR X0, [X20]
	0x03324C48 LDR W8, [X0 + 0xE0]
	0x03324C4C CBNZ W8, 0x3324C54
	0x03324C50 BL 0x1C16DFC
	0x03324C54 MOV X0, X31
	0x03324C58 BL 0x33387A0
	0x03324C5C CBZ X0, 0x3324CF8
	0x03324C60 LDRB W8, [X0 + 0xC8]
	0x03324C64 MOV X19, X0
	0x03324C68 CBZ W8, 0x3324CDC
	0x03324C6C ADRP X8, 0xDCF000
	0x03324C70 LDR X8, [X8 + 0x6C0]
	0x03324C74 LDR X0, [X8]
	0x03324C78 ADRP X8, 0xE04000
	0x03324C7C LDR X8, [X8 + 0x330]
	0x03324C80 LDR W9, [X0 + 0xE0]
	0x03324C84 LDR X20, [X8]
	0x03324C88 CBNZ W9, 0x3324C90
	0x03324C8C BL 0x1C16DFC
	0x03324C90 MOV X0, X20
	0x03324C94 MOV X1, X31
	0x03324C98 BL 0x338C698
	0x03324C9C LDR X8, [X19]
	0x03324CA0 MOV X1, X0
	0x03324CA4 MOV X0, X19
	0x03324CA8 LDR X9, [X8 + 0x268]
	0x03324CAC LDR X2, [X8 + 0x270]
	0x03324CB0 BLR X9
	0x03324CB4 MOV X20, X0
	0x03324CB8 CBZ X0, 0x3324CE8
	0x03324CBC ADRP X8, 0xE04000
	0x03324CC0 LDR X8, [X8 + 0x328]
	0x03324CC4 LDR X1, [X8]
	0x03324CC8 LDR X8, [X20]
	0x03324CCC CMP X8, X1
	0x03324CD0 B.EQ 0x3324CE8
	0x03324CD4 MOV X0, X20
	0x03324CD8 BL 0x1C171E0
	0x03324CDC LDR X20, [X19 + 0x38]
	0x03324CE0 BL 0x1C16D44
	0x03324CE4 CBZ X20, 0x3324C6C
	0x03324CE8 MOV X0, X20
	0x03324CEC LDP X20, X19, [X31 + 0x10]
	0x03324CF0 LDR X30, [X31], #0x20
	0x03324CF4 RET
	0x03324CF8 BL 0x1C16F20
	0x03324CFC STP X30, X21, [X31 - 0x20]!
	0x03324D00 STP X20, X19, [X31 + 0x10]
	0x03324D04 ADRP X20, 0x10B8000
	0x03324D08 LDRB W8, [X20 + 0xC82]
	0x03324D0C MOV X19, X0
	0x03324D10 TBNZ X8, 0x0, 0x3324D58
	0x03324D14 ADRP X0, 0xDD1000
	0x03324D18 LDR X0, [X0 + 0xC48]
	0x03324D1C BL 0x1C16CF4
	0x03324D20 ADRP X0, 0xE04000
	0x03324D24 LDR X0, [X0 + 0x330]
	0x03324D28 BL 0x1C16CF4
	0x03324D2C ADRP X0, 0xE04000
	0x03324D30 LDR X0, [X0 + 0x328]
	0x03324D34 BL 0x1C16CF4
	0x03324D38 ADRP X0, 0xDFE000
	0x03324D3C LDR X0, [X0 + 0x5F0]
	0x03324D40 BL 0x1C16CF4
	0x03324D44 ADRP X0, 0xDCF000
	0x03324D48 LDR X0, [X0 + 0x6C0]
	0x03324D4C BL 0x1C16CF4
	0x03324D50 MOVZ W8, 0x1
	0x03324D54 STRB W8, [X20 + 0xC82]
	0x03324D58 ADRP X21, 0xE04000
	0x03324D5C LDR X21, [X21 + 0x328]
	0x03324D60 CBZ X19, 0x3324DBC
	0x03324D64 ADRP X9, 0xDD1000
	0x03324D68 LDR X9, [X9 + 0xC48]
	0x03324D6C LDR X8, [X19]
	0x03324D70 LDR X9, [X9]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0x10B9000
	010 Move X25, 0xDFF000
	011 Move X19, 0xE05000
	012 Move X21, 0xDD9000
	013 Move X23, 0xDD8000
	014 Move X20, 0xE05000
	015 Move X22, 0xDD0000
	016 Move X25, [X25+1800]
	017 Move W8, [X24+3189]
	018 Move X19, [X19+696]
	019 Move X21, [X21+2536]
	020 Move X23, [X23+3168]
	021 Move X20, [X20+704]
	022 Move X22, [X22+1728]
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {110}
	027 Move X0, 0xDF9000
	028 Move X0, [X0+584]
	029 Call 0x1C17CF4
	030 Move X0, 0xDF7000
	031 Move X0, [X0+3432]
	032 Call 0x1C17CF4
	033 Move X0, 0xDD9000
	034 Move X0, [X0+2264]
	035 Call 0x1C17CF4
	036 Move X0, 0xDF7000
	037 Move X0, [X0+3440]
	038 Call 0x1C17CF4
	039 Move X0, 0xDD9000
	040 Move X0, [X0+2536]
	041 Call 0x1C17CF4
	042 Move X0, 0xE05000
	043 Move X0, [X0+712]
	044 Call 0x1C17CF4
	045 Move X0, 0xE03000
	046 Move X0, [X0+1336]
	047 Call 0x1C17CF4
	048 Move X0, 0xE01000
	049 Move X0, [X0+3896]
	050 Call 0x1C17CF4
	051 Move X0, 0xE02000
	052 Move X0, [X0+320]
	053 Call 0x1C17CF4
	054 Move X0, 0xDF8000
	055 Move X0, [X0+2680]
	056 Call 0x1C17CF4
	057 Move X0, 0xE05000
	058 Move X0, [X0+704]
	059 Call 0x1C17CF4
	060 Move X0, 0xE05000
	061 Move X0, [X0+720]
	062 Call 0x1C17CF4
	063 Move X0, 0xDF7000
	064 Move X0, [X0+3448]
	065 Call 0x1C17CF4
	066 Move X0, 0xDF7000
	067 Move X0, [X0+3456]
	068 Call 0x1C17CF4
	069 Move X0, 0xDF7000
	070 Move X0, [X0+3464]
	071 Call 0x1C17CF4
	072 Move X0, 0xDDA000
	073 Move X0, [X0+2408]
	074 Call 0x1C17CF4
	075 Move X0, 0xDFF000
	076 Move X0, [X0+1800]
	077 Call 0x1C17CF4
	078 Move X0, 0xDF7000
	079 Move X0, [X0+3472]
	080 Call 0x1C17CF4
	081 Move X0, 0xDF8000
	082 Move X0, [X0+2688]
	083 Call 0x1C17CF4
	084 Move X0, 0xDF8000
	085 Move X0, [X0+2912]
	086 Call 0x1C17CF4
	087 Move X0, 0xDD8000
	088 Move X0, [X0+3168]
	089 Call 0x1C17CF4
	090 Move X0, 0xDD0000
	091 Move X0, [X0+1728]
	092 Call 0x1C17CF4
	093 Move X0, 0xE05000
	094 Move X0, [X0+728]
	095 Call 0x1C17CF4
	096 Move X0, 0xE05000
	097 Move X0, [X0+696]
	098 Call 0x1C17CF4
	099 Move X0, 0xDF7000
	100 Move X0, [X0+3480]
	101 Call 0x1C17CF4
	102 Move X0, 0xDF7000
	103 Move X0, [X0+3488]
	104 Call 0x1C17CF4
	105 Move X0, 0xDF7000
	106 Move X0, [X0+3496]
	107 Call 0x1C17CF4
	108 Move W8, 1
	109 Move [X24+3189], W8
	110 Move X0, [X25]
	111 Move W1, 256
	112 Call 0x1C17D6C
	113 Move X1, [X19]
	114 Move X2, X31
	115 Move X19, X0
	116 Call RuntimeHelpers.InitializeArray, X0, X1
	117 Move X8, [X21]
	118 Move W1, 19
	119 Move X8, [X8+184]
	120 Move [X8], X19
	121 Move X0, [X23]
	122 Call 0x1C17D6C
	123 Move X8, [X22]
	124 Move X20, [X20]
	125 Move X19, X0
	126 Move W9, [X8+224]
	127 Compare W9, 0
	128 JumpIfNotEqual {131}
	129 Move X0, X8
	130 Call 0x1C17DFC
	131 Move X0, X20
	132 Move X1, X31
	133 Call Type.GetTypeFromHandle, X0
	134 Compare X19, 0
	135 JumpIfEqual {504}
	136 Move X20, X0
	137 Compare X0, 0
	138 JumpIfEqual {145}
	139 Move X8, [X19]
	140 Move X0, X20
	141 Move X1, [X8+64]
	142 Call 0x1C17E00
	143 Compare X0, 0
	144 JumpIfEqual {501}
	145 Move W8, [X19+24]
	146 Compare W8, 0
	147 JumpIfEqual {500}
	148 Move X22, 0xDDA000
	149 Move X22, [X22+2408]
	150 Move [X19+32], X20
	151 Move X1, X31
	152 Move X0, [X22]
	153 Call Type.GetTypeFromHandle, X0
	154 Move X20, X0
	155 Compare X0, 0
	156 JumpIfEqual {163}
	157 Move X8, [X19]
	158 Move X0, X20
	159 Move X1, [X8+64]
	160 Call 0x1C17E00
	161 Compare X0, 0
	162 JumpIfEqual {501}
	163 Move W8, [X19+24]
	164 NotImplemented "Instruction CMP not yet implemented."
	165 Move X8, 0xE05000
	166 Move X8, [X8+712]
	167 Move [X19+40], X20
	168 Move X1, X31
	169 Move X0, [X8]
	170 Call Type.GetTypeFromHandle, X0
	171 Move X20, X0
	172 Compare X0, 0
	173 JumpIfEqual {180}
	174 Move X8, [X19]
	175 Move X0, X20
	176 Move X1, [X8+64]
	177 Call 0x1C17E00
	178 Compare X0, 0
	179 JumpIfEqual {501}
	180 Move W8, [X19+24]
	181 NotImplemented "Instruction CMP not yet implemented."
	182 Move X8, 0xDF9000
	183 Move X8, [X8+584]
	184 Move [X19+48], X20
	185 Move X1, X31
	186 Move X0, [X8]
	187 Call Type.GetTypeFromHandle, X0
	188 Move X20, X0
	189 Compare X0, 0
	190 JumpIfEqual {197}
	191 Move X8, [X19]
	192 Move X0, X20
	193 Move X1, [X8+64]
	194 Call 0x1C17E00
	195 Compare X0, 0
	196 JumpIfEqual {501}
	197 Move W8, [X19+24]
	198 NotImplemented "Instruction CMP not yet implemented."
	199 Move X8, 0xDF7000
	200 Move X8, [X8+3440]
	201 Move [X19+56], X20
	202 Move X1, X31
	203 Move X0, [X8]
	204 Call Type.GetTypeFromHandle, X0
	205 Move X20, X0
	206 Compare X0, 0
	207 JumpIfEqual {214}
	208 Move X8, [X19]
	209 Move X0, X20
	210 Move X1, [X8+64]
	211 Call 0x1C17E00
	212 Compare X0, 0
	213 JumpIfEqual {501}
	214 Move W8, [X19+24]
	215 NotImplemented "Instruction CMP not yet implemented."
	216 Move X8, 0xDF7000
	217 Move X8, [X8+3472]
	218 Move [X19+64], X20
	219 Move X1, X31
	220 Move X0, [X8]
	221 Call Type.GetTypeFromHandle, X0
	222 Move X20, X0
	223 Compare X0, 0
	224 JumpIfEqual {231}
	225 Move X8, [X19]
	226 Move X0, X20
	227 Move X1, [X8+64]
	228 Call 0x1C17E00
	229 Compare X0, 0
	230 JumpIfEqual {501}
	231 Move W8, [X19+24]
	232 NotImplemented "Instruction CMP not yet implemented."
	233 Move X8, 0xDF7000
	234 Move X8, [X8+3432]
	235 Move [X19+72], X20
	236 Move X1, X31
	237 Move X0, [X8]
	238 Call Type.GetTypeFromHandle, X0
	239 Move X20, X0
	240 Compare X0, 0
	241 JumpIfEqual {248}
	242 Move X8, [X19]
	243 Move X0, X20
	244 Move X1, [X8+64]
	245 Call 0x1C17E00
	246 Compare X0, 0
	247 JumpIfEqual {501}
	248 Move W8, [X19+24]
	249 NotImplemented "Instruction CMP not yet implemented."
	250 Move X8, 0xDF7000
	251 Move X8, [X8+3448]
	252 Move [X19+80], X20
	253 Move X1, X31
	254 Move X0, [X8]
	255 Call Type.GetTypeFromHandle, X0
	256 Move X20, X0
	257 Compare X0, 0
	258 JumpIfEqual {265}
	259 Move X8, [X19]
	260 Move X0, X20
	261 Move X1, [X8+64]
	262 Call 0x1C17E00
	263 Compare X0, 0
	264 JumpIfEqual {501}
	265 Move W8, [X19+24]
	266 NotImplemented "Instruction CMP not yet implemented."
	267 Move X8, 0xDF7000
	268 Move X8, [X8+3480]
	269 Move [X19+88], X20
	270 Move X1, X31
	271 Move X0, [X8]
	272 Call Type.GetTypeFromHandle, X0
	273 Move X20, X0
	274 Compare X0, 0
	275 JumpIfEqual {282}
	276 Move X8, [X19]
	277 Move X0, X20
	278 Move X1, [X8+64]
	279 Call 0x1C17E00
	280 Compare X0, 0
	281 JumpIfEqual {501}
	282 Move W8, [X19+24]
	283 NotImplemented "Instruction CMP not yet implemented."
	284 Move X8, 0xDF7000
	285 Move X8, [X8+3456]
	286 Move [X19+96], X20
	287 Move X1, X31
	288 Move X0, [X8]
	289 Call Type.GetTypeFromHandle, X0
	290 Move X20, X0
	291 Compare X0, 0
	292 JumpIfEqual {299}
	293 Move X8, [X19]
	294 Move X0, X20
	295 Move X1, [X8+64]
	296 Call 0x1C17E00
	297 Compare X0, 0
	298 JumpIfEqual {501}
	299 Move W8, [X19+24]
	300 NotImplemented "Instruction CMP not yet implemented."
	301 Move X8, 0xDF7000
	302 Move X8, [X8+3488]
	303 Move [X19+104], X20
	304 Move X1, X31
	305 Move X0, [X8]
	306 Call Type.GetTypeFromHandle, X0
	307 Move X20, X0
	308 Compare X0, 0
	309 JumpIfEqual {316}
	310 Move X8, [X19]
	311 Move X0, X20
	312 Move X1, [X8+64]
	313 Call 0x1C17E00
	314 Compare X0, 0
	315 JumpIfEqual {501}
	316 Move W8, [X19+24]
	317 NotImplemented "Instruction CMP not yet implemented."
	318 Move X8, 0xDF7000
	319 Move X8, [X8+3464]
	320 Move [X19+112], X20
	321 Move X1, X31
	322 Move X0, [X8]
	323 Call Type.GetTypeFromHandle, X0
	324 Move X20, X0
	325 Compare X0, 0
	326 JumpIfEqual {333}
	327 Move X8, [X19]
	328 Move X0, X20
	329 Move X1, [X8+64]
	330 Call 0x1C17E00
	331 Compare X0, 0
	332 JumpIfEqual {501}
	333 Move W8, [X19+24]
	334 NotImplemented "Instruction CMP not yet implemented."
	335 Move X8, 0xDF7000
	336 Move X8, [X8+3496]
	337 Move [X19+120], X20
	338 Move X1, X31
	339 Move X0, [X8]
	340 Call Type.GetTypeFromHandle, X0
	341 Move X20, X0
	342 Compare X0, 0
	343 JumpIfEqual {350}
	344 Move X8, [X19]
	345 Move X0, X20
	346 Move X1, [X8+64]
	347 Call 0x1C17E00
	348 Compare X0, 0
	349 JumpIfEqual {501}
	350 Move W8, [X19+24]
	351 NotImplemented "Instruction CMP not yet implemented."
	352 Move X8, 0xDF8000
	353 Move X8, [X8+2688]
	354 Move [X19+128], X20
	355 Move X1, X31
	356 Move X0, [X8]
	357 Call Type.GetTypeFromHandle, X0
	358 Move X20, X0
	359 Compare X0, 0
	360 JumpIfEqual {367}
	361 Move X8, [X19]
	362 Move X0, X20
	363 Move X1, [X8+64]
	364 Call 0x1C17E00
	365 Compare X0, 0
	366 JumpIfEqual {501}
	367 Move W8, [X19+24]
	368 NotImplemented "Instruction CMP not yet implemented."
	369 Move X8, 0xDF8000
	370 Move X8, [X8+2680]
	371 Move [X19+136], X20
	372 Move X1, X31
	373 Move X0, [X8]
	374 Call Type.GetTypeFromHandle, X0
	375 Move X20, X0
	376 Compare X0, 0
	377 JumpIfEqual {384}
	378 Move X8, [X19]
	379 Move X0, X20
	380 Move X1, [X8+64]
	381 Call 0x1C17E00
	382 Compare X0, 0
	383 JumpIfEqual {501}
	384 Move W8, [X19+24]
	385 NotImplemented "Instruction CMP not yet implemented."
	386 Move X8, 0xE02000
	387 Move X8, [X8+320]
	388 Move [X19+144], X20
	389 Move X1, X31
	390 Move X0, [X8]
	391 Call Type.GetTypeFromHandle, X0
	392 Move X20, X0
	393 Compare X0, 0
	394 JumpIfEqual {401}
	395 Move X8, [X19]
	396 Move X0, X20
	397 Move X1, [X8+64]
	398 Call 0x1C17E00
	399 Compare X0, 0
	400 JumpIfEqual {501}
	401 Move W8, [X19+24]
	402 NotImplemented "Instruction CMP not yet implemented."
	403 Move X8, 0xE01000
	404 Move X8, [X8+3896]
	405 Move [X19+152], X20
	406 Move X1, X31
	407 Move X0, [X8]
	408 Call Type.GetTypeFromHandle, X0
	409 Move X20, X0
	410 Compare X0, 0
	411 JumpIfEqual {418}
	412 Move X8, [X19]
	413 Move X0, X20
	414 Move X1, [X8+64]
	415 Call 0x1C17E00
	416 Compare X0, 0
	417 JumpIfEqual {501}
	418 Move W8, [X19+24]
	419 NotImplemented "Instruction CMP not yet implemented."
	420 Move [X19+160], X20
	421 Move X0, [X22]
	422 Move X1, X31
	423 Call Type.GetTypeFromHandle, X0
	424 Move X20, X0
	425 Compare X0, 0
	426 JumpIfEqual {433}
	427 Move X8, [X19]
	428 Move X0, X20
	429 Move X1, [X8+64]
	430 Call 0x1C17E00
	431 Compare X0, 0
	432 JumpIfEqual {501}
	433 Move W8, [X19+24]
	434 NotImplemented "Instruction CMP not yet implemented."
	435 Move X8, 0xDF8000
	436 Move X8, [X8+2912]
	437 Move [X19+168], X20
	438 Move X1, X31
	439 Move X0, [X8]
	440 Call Type.GetTypeFromHandle, X0
	441 Move X20, X0
	442 Compare X0, 0
	443 JumpIfEqual {450}
	444 Move X8, [X19]
	445 Move X0, X20
	446 Move X1, [X8+64]
	447 Call 0x1C17E00
	448 Compare X0, 0
	449 JumpIfEqual {501}
	450 Move W8, [X19+24]
	451 NotImplemented "Instruction CMP not yet implemented."
	452 Move [X19+176], X20
	453 Move X8, [X21]
	454 Move X9, 0xE05000
	455 Move X22, 0xE05000
	456 Move X20, 0xE03000
	457 Move X8, [X8+184]
	458 Move X9, [X9+720]
	459 Move X1, X31
	460 Move [X8+8], X19
	461 Move X0, [X9]
	462 Move X19, 0xDD9000
	463 Move X19, [X19+2264]
	464 Move X22, [X22+728]
	465 Move X20, [X20+1336]
	466 Call Type.GetTypeFromHandle, X0
	467 Move X8, [X21]
	468 Move W1, 65
	469 Move X8, [X8+184]
	470 Move [X8+16], X0
	471 Move X0, [X19]
	472 Call 0x1C17D6C
	473 Move X1, [X22]
	474 Move X2, X31
	475 Move X19, X0
	476 Call RuntimeHelpers.InitializeArray, X0, X1
	477 Move X8, [X21]
	478 Move X8, [X8+184]
	479 Move [X8+24], X19
	480 Move X0, [X20]
	481 Move W9, [X0+224]
	482 Compare W9, 0
	483 JumpIfNotEqual {488}
	484 Call 0x1C17DFC
	485 Move X8, [X21]
	486 Move X0, [X20]
	487 Move X8, [X8+184]
	488 Move X9, [X0+184]
	489 Move X20, [X31+48]
	490 Move X19, [X31+56]
	491 Move X22, [X31+32]
	492 Move X21, [X31+40]
	493 Move X24, [X31+16]
	494 Move X23, [X31+24]
	495 Move X9, [X9]
	496 Move [X8+32], X9
	497 Move X30, [X31+64]
	498 Move X25, [X31+72]
	499 Return 
	500 Call 0x1C17F28
	501 Call 0x1C17F44
	502 Move X1, X31
	503 Call 0x1C17DEC
	504 Call 0x1C17F20

