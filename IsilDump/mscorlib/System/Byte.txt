Type: System.Byte

Method: System.Int32 CompareTo(System.Object value)

Disassembly:
	0x0331A5CC LDR X0, [X0 + 0x170]
	0x0331A5D0 BL 0x1C16CF4
	0x0331A5D4 MOVZ W8, 0x1
	0x0331A5D8 STRB W8, [X21 + 0xBC7]
	0x0331A5DC LDR X0, [X20]
	0x0331A5E0 LDR W8, [X0 + 0xE0]
	0x0331A5E4 CBNZ W8, 0x331A5F0
	0x0331A5E8 BL 0x1C16DFC
	0x0331A5EC LDR X0, [X20]
	0x0331A5F0 LDR X8, [X0 + 0xB8]
	0x0331A5F4 LDR X8, [X8]
	0x0331A5F8 CBZ X8, 0x331A61C
	0x0331A5FC LDR W9, [X8 + 0x18]
	0x0331A600 CMP W9, W19, UXTH
	0x0331A604 B.LS 0x331A620
	0x0331A608 ADD X8, X8, W19, UXTH
	0x0331A60C LDRB W0, [X8 + 0x20]
	0x0331A610 LDP X20, X19, [X31 + 0x10]
	0x0331A614 LDP X30, X21, [X31], #0x20
	0x0331A618 RET
	0x0331A61C BL 0x1C16F20
	0x0331A620 BL 0x1C16F28
	0x0331A624 LDRH W0, [X0]
	0x0331A628 BFM W0, W0, 0x10, 0xF
	0x0331A62C RET
	0x0331A630 STP X30, X21, [X31 - 0x20]!
	0x0331A634 STP X20, X19, [X31 + 0x10]
	0x0331A638 ADRP X21, 0x10C2000
	0x0331A63C LDRB W8, [X21 + 0xBC8]
	0x0331A640 MOV X19, X1
	0x0331A644 MOV X20, X0
	0x0331A648 TBNZ X8, 0x0, 0x331A660
	0x0331A64C ADRP X0, 0xDDB000
	0x0331A650 LDR X0, [X0 + 0x170]
	0x0331A654 BL 0x1C16CF4
	0x0331A658 MOVZ W8, 0x1
	0x0331A65C STRB W8, [X21 + 0xBC8]
	0x0331A660 CBZ X19, 0x331A67C
	0x0331A664 ADRP X8, 0xDDB000
	0x0331A668 LDR X8, [X8 + 0x170]
	0x0331A66C LDR X9, [X19]
	0x0331A670 LDR X8, [X8]
	0x0331A674 CMP X9, X8
	0x0331A678 B.EQ 0x331A684
	0x0331A67C MOV W0, W31
	0x0331A680 B 0x331A69C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10C3000
	006 Move W8, [X21+2993]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xDDB000
	014 Move X0, [X0+2520]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2993], W8
	018 Compare X19, 0
	019 JumpIfEqual {30}
	020 Move X8, 0xDDB000
	021 Move X8, [X8+2520]
	022 Move X9, [X19]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W20, [X20]
	026 Move X0, X19
	027 Call 0x1C17E08
	028 Move W8, [X0]
	029 Subtract W0, W20, W8
	030 Move W0, 1
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Return X0
	036 Move X0, 0xDE2000
	037 Move X0, [X0+1400]
	038 Call 0x1C17D08
	039 Call 0x1C17F10
	040 Move X19, X0
	041 Move X0, 0xE0F000
	042 Move X0, [X0+104]
	043 Call 0x1C17D08
	044 Move X1, X0
	045 Move X0, X19
	046 Call ArgumentException..ctor, X0, X1
	047 Move X0, 0xE0F000
	048 Move X0, [X0+112]
	049 Call 0x1C17D08
	050 Move X1, X0
	051 Move X0, X19
	052 Call 0x1C17DEC

Method: System.Int32 CompareTo(System.Byte value)

Disassembly:
	0x0331A684 LDRH W20, [X20]
	0x0331A688 MOV X0, X19
	0x0331A68C BL 0x1C16E08

ISIL:
	001 Move W8, [X0]
	002 Subtract W0, W8, W1
	003 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x0331A690 LDRH W8, [X0]
	0x0331A694 CMP W20, W8
	0x0331A698 CSET W0, EQ
	0x0331A69C LDP X20, X19, [X31 + 0x10]
	0x0331A6A0 LDP X30, X21, [X31], #0x20
	0x0331A6A4 RET
	0x0331A6A8 LDRH W8, [X0]
	0x0331A6AC CMP W8, W1, UXTH
	0x0331A6B0 CSET W0, EQ
	0x0331A6B4 RET
	0x0331A6B8 STP X30, X21, [X31 - 0x20]!
	0x0331A6BC STP X20, X19, [X31 + 0x10]
	0x0331A6C0 ADRP X21, 0x10C2000
	0x0331A6C4 LDRB W8, [X21 + 0xBC9]
	0x0331A6C8 MOV X19, X1
	0x0331A6CC MOV X20, X0
	0x0331A6D0 TBNZ X8, 0x0, 0x331A6E8
	0x0331A6D4 ADRP X0, 0xDDB000
	0x0331A6D8 LDR X0, [X0 + 0x170]
	0x0331A6DC BL 0x1C16CF4
	0x0331A6E0 MOVZ W8, 0x1
	0x0331A6E4 STRB W8, [X21 + 0xBC9]
	0x0331A6E8 CBZ X19, 0x331A71C
	0x0331A6EC ADRP X8, 0xDDB000
	0x0331A6F0 LDR X8, [X8 + 0x170]
	0x0331A6F4 LDR X9, [X19]
	0x0331A6F8 LDR X8, [X8]
	0x0331A6FC CMP X9, X8
	0x0331A700 B.NE 0x331A72C
	0x0331A704 LDRH W20, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10C3000
	006 Move W8, [X21+2994]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xDDB000
	014 Move X0, [X0+2520]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2994], W8
	018 Compare X19, 0
	019 JumpIfEqual {25}
	020 Move X8, 0xDDB000
	021 Move X8, [X8+2520]
	022 Move X9, [X19]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W0, W31
	026 Move W20, [X20]
	027 Move X0, X19
	028 Call 0x1C17E08
	029 Move W8, [X0]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSET not yet implemented."
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return X0

Method: System.Boolean Equals(System.Byte obj)

Disassembly:
	0x0331A708 MOV X0, X19
	0x0331A70C BL 0x1C16E08
	0x0331A710 LDRH W8, [X0]
	0x0331A714 SUB W0, W20, W8

ISIL:
	001 Move W8, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x0331A718 B 0x331A720
	0x0331A71C MOVZ W0, 0x1

ISIL:
	001 Move W0, [X0]
	002 Return X0

Method: System.Byte Parse(System.String s, System.Globalization.NumberStyles style)

Disassembly:
	0x0331A720 LDP X20, X19, [X31 + 0x10]
	0x0331A724 LDP X30, X21, [X31], #0x20
	0x0331A728 RET
	0x0331A72C ADRP X0, 0xDE1000
	0x0331A730 LDR X0, [X0 + 0x578]
	0x0331A734 BL 0x1C16D08
	0x0331A738 BL 0x1C16F10
	0x0331A73C MOV X19, X0
	0x0331A740 ADRP X0, 0xE0E000
	0x0331A744 LDR X0, [X0 + 0x98]
	0x0331A748 BL 0x1C16D08
	0x0331A74C MOV X1, X0
	0x0331A750 MOV X0, X19
	0x0331A754 BL 0x3314A68
	0x0331A758 ADRP X0, 0xE0E000
	0x0331A75C LDR X0, [X0 + 0xA0]
	0x0331A760 BL 0x1C16D08
	0x0331A764 MOV X1, X0
	0x0331A768 MOV X0, X19
	0x0331A76C BL 0x1C16DEC
	0x0331A770 LDRH W8, [X0]
	0x0331A774 SUB W0, W8, W1, UXTH
	0x0331A778 RET
	0x0331A77C MOV X1, X31
	0x0331A780 B 0x322DBBC
	0x0331A784 STP X30, X21, [X31 - 0x20]!
	0x0331A788 STP X20, X19, [X31 + 0x10]
	0x0331A78C ADRP X21, 0x10C2000
	0x0331A790 ADRP X20, 0xDDB000
	0x0331A794 LDRB W8, [X21 + 0xBCB]
	0x0331A798 LDR X20, [X20 + 0x170]
	0x0331A79C MOV X19, X0
	0x0331A7A0 TBNZ X8, 0x0, 0x331A7B8
	0x0331A7A4 ADRP X0, 0xDDB000
	0x0331A7A8 LDR X0, [X0 + 0x170]
	0x0331A7AC BL 0x1C16CF4
	0x0331A7B0 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W19, W1
	006 Move X20, X0
	007 Move W0, W1
	008 Move X1, X31
	009 Call NumberFormatInfo.ValidateParseStyleInteger, X0
	010 Compare X20, 0
	011 JumpIfNotEqual {15}
	012 Move W0, 48
	013 Move X1, X31
	014 Call ThrowHelper.ThrowArgumentNullException, X0
	015 Move X21, 0x10C0000
	016 Move W8, [X21+1890]
	017 Compare W8, 0
	018 JumpIfEqual {26}
	019 Compare X20, 0
	020 JumpIfEqual {33}
	021 Move X0, X20
	022 Move X1, X31
	023 Call String.GetRawStringData, X0
	024 Move W20, [X20+16]
	025 Move X21, X0
	026 Move X0, 0xE01000
	027 Move X0, [X0+656]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X21+1890], W8
	031 Compare X20, 0
	032 JumpIfNotEqual {21}
	033 Move X21, X31
	034 Move X0, X31
	035 Call NumberFormatInfo.get_CurrentInfo
	036 Move X1, X20
	037 Move W2, W19
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X3, X0
	041 Move X0, X21
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]

Method: System.Byte Parse(System.String s, System.IFormatProvider provider)

Disassembly:
	0x0331A948 MOV W19, W0
	0x0331A94C CMP W19, 0x5
	0x0331A950 LDP X20, X19, [X31 + 0x10]
	0x0331A954 CSET W0, CC
	0x0331A958 LDP X30, X21, [X31], #0x20
	0x0331A95C RET
	0x0331A960 AND W8, W0, 0xFFFF
	0x0331A964 CMP W8, 0x20
	0x0331A968 B.NE 0x331A974
	0x0331A96C MOVZ W0, 0x1
	0x0331A970 RET
	0x0331A974 SUB W9, W8, 0x9
	0x0331A978 CMP W9, 0x5
	0x0331A97C CSET W9, CC
	0x0331A980 CMP W8, 0xA0
	0x0331A984 CSET W10, EQ
	0x0331A988 CMP W8, 0x85
	0x0331A98C ORR W8, W10, W9, 0x0
	0x0331A990 CSET W9, EQ
	0x0331A994 ORR W0, W9, W8, 0x0
	0x0331A998 RET
	0x0331A99C STP X30, X21, [X31 - 0x20]!
	0x0331A9A0 STP X20, X19, [X31 + 0x10]
	0x0331A9A4 ADRP X21, 0x10C2000
	0x0331A9A8 ADRP X20, 0xDDB000
	0x0331A9AC LDRB W8, [X21 + 0xBCF]
	0x0331A9B0 LDR X20, [X20 + 0x170]
	0x0331A9B4 MOV W19, W0
	0x0331A9B8 TBNZ X8, 0x0, 0x331A9D0
	0x0331A9BC ADRP X0, 0xDDB000
	0x0331A9C0 LDR X0, [X0 + 0x170]
	0x0331A9C4 BL 0x1C16CF4
	0x0331A9C8 MOVZ W8, 0x1
	0x0331A9CC STRB W8, [X21 + 0xBCF]
	0x0331A9D0 LDR X0, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X1
	006 Move X20, X0
	007 Compare X0, 0
	008 JumpIfNotEqual {12}
	009 Move W0, 48
	010 Move X1, X31
	011 Call ThrowHelper.ThrowArgumentNullException, X0
	012 Move X21, 0x10C0000
	013 Move W8, [X21+1890]
	014 Compare W8, 0
	015 JumpIfEqual {23}
	016 Compare X20, 0
	017 JumpIfEqual {30}
	018 Move X0, X20
	019 Move X1, X31
	020 Call String.GetRawStringData, X0
	021 Move W21, [X20+16]
	022 Move X20, X0
	023 Move X0, 0xE01000
	024 Move X0, [X0+656]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+1890], W8
	028 Compare X20, 0
	029 JumpIfNotEqual {18}
	030 Move X21, X31
	031 Move X0, X19
	032 Move X1, X31
	033 Call NumberFormatInfo.GetInstance, X0
	034 Move X3, X0
	035 Move X0, X20
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move W2, 7
	039 Move X1, X21
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Call Byte.Parse, X0, X1, X2
	043 Return X0

Method: System.Byte Parse(System.String s, System.Globalization.NumberStyles style, System.IFormatProvider provider)

Disassembly:
	0x0331A9D4 LDR W8, [X0 + 0xE0]
	0x0331A9D8 CBNZ W8, 0x331A9E0
	0x0331A9DC BL 0x1C16DFC
	0x0331A9E0 AND W8, W19, 0xFFFF
	0x0331A9E4 CMP W8, 0xFF
	0x0331A9E8 B.HI 0x331AA1C
	0x0331A9EC LDR X0, [X20]
	0x0331A9F0 LDR W8, [X0 + 0xE0]
	0x0331A9F4 CBNZ W8, 0x331A9FC
	0x0331A9F8 BL 0x1C16DFC
	0x0331A9FC AND W8, W19, 0xFFFF
	0x0331AA00 CMP W8, 0x7F
	0x0331AA04 B.HI 0x331AA2C
	0x0331AA08 SUB W8, W19, 0x41
	0x0331AA0C AND W8, W8, 0xFFFF
	0x0331AA10 CMP W8, 0x1A
	0x0331AA14 CSET W0, CC
	0x0331AA18 B 0x331AA4C
	0x0331AA1C MOV W0, W19
	0x0331AA20 MOV X1, X31
	0x0331AA24 BL 0x330331C
	0x0331AA28 B 0x331AA44
	0x0331AA2C LDR X0, [X20]
	0x0331AA30 LDR W8, [X0 + 0xE0]
	0x0331AA34 CBNZ W8, 0x331AA3C
	0x0331AA38 BL 0x1C16DFC
	0x0331AA3C MOV W0, W19
	0x0331AA40 BL 0x331A5A8
	0x0331AA44 CMP W0, 0x0
	0x0331AA48 CSET W0, EQ
	0x0331AA4C LDP X20, X19, [X31 + 0x10]
	0x0331AA50 LDP X30, X21, [X31], #0x20
	0x0331AA54 RET
	0x0331AA58 STP X30, X21, [X31 - 0x20]!
	0x0331AA5C STP X20, X19, [X31 + 0x10]
	0x0331AA60 ADRP X21, 0x10C2000
	0x0331AA64 ADRP X20, 0xDDB000
	0x0331AA68 LDRB W8, [X21 + 0xBD0]
	0x0331AA6C LDR X20, [X20 + 0x170]
	0x0331AA70 MOV W19, W0
	0x0331AA74 TBNZ X8, 0x0, 0x331AA8C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W19, W1
	007 Move X21, X0
	008 Move W0, W1
	009 Move X1, X31
	010 Move X20, X2
	011 Call NumberFormatInfo.ValidateParseStyleInteger, X0
	012 Compare X21, 0
	013 JumpIfNotEqual {17}
	014 Move W0, 48
	015 Move X1, X31
	016 Call ThrowHelper.ThrowArgumentNullException, X0
	017 Move X22, 0x10C0000
	018 Move W8, [X22+1890]
	019 Compare W8, 0
	020 JumpIfEqual {28}
	021 Compare X21, 0
	022 JumpIfEqual {35}
	023 Move X0, X21
	024 Move X1, X31
	025 Call String.GetRawStringData, X0
	026 Move W21, [X21+16]
	027 Move X22, X0
	028 Move X0, 0xE01000
	029 Move X0, [X0+656]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X22+1890], W8
	033 Compare X21, 0
	034 JumpIfNotEqual {23}
	035 Move X22, X31
	036 Move X0, X20
	037 Move X1, X31
	038 Call NumberFormatInfo.GetInstance, X0
	039 Move X3, X0
	040 Move X0, X22
	041 Move X1, X21
	042 Move W2, W19
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X22, [X31+16]
	046 Move X21, [X31+24]
	047 Move X30, [X31+48]
	048 Call Byte.Parse, X0, X1, X2
	049 Return X0

Method: System.Byte Parse(System.ReadOnlySpan`1<System.Char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info)

Disassembly:
	0x0331A7B4 STRB W8, [X21 + 0xBCB]
	0x0331A7B8 LDR X0, [X20]
	0x0331A7BC LDRH W19, [X19]
	0x0331A7C0 LDR W8, [X0 + 0xE0]
	0x0331A7C4 CBNZ W8, 0x331A7CC
	0x0331A7C8 BL 0x1C16DFC
	0x0331A7CC MOV W0, W19
	0x0331A7D0 LDP X20, X19, [X31 + 0x10]
	0x0331A7D4 MOV X1, X31
	0x0331A7D8 LDP X30, X21, [X31], #0x20
	0x0331A7DC B 0x322DBBC
	0x0331A7E0 STP X30, X19, [X31 - 0x10]!
	0x0331A7E4 CBZ X0, 0x331A804
	0x0331A7E8 LDR W8, [X0 + 0x10]
	0x0331A7EC CMP W8, 0x1
	0x0331A7F0 B.NE 0x331A834
	0x0331A7F4 MOV W1, W31
	0x0331A7F8 MOV X2, X31
	0x0331A7FC LDP X30, X19, [X31], #0x10
	0x0331A800 B 0x3222A1C
	0x0331A804 ADRP X0, 0xDDE000
	0x0331A808 LDR X0, [X0 + 0x528]
	0x0331A80C BL 0x1C16D08
	0x0331A810 BL 0x1C16F10
	0x0331A814 MOV X19, X0
	0x0331A818 ADRP X0, 0xE02000
	0x0331A81C LDR X0, [X0 + 0xCC0]
	0x0331A820 BL 0x1C16D08
	0x0331A824 MOV X1, X0
	0x0331A828 MOV X0, X19
	0x0331A82C BL 0x330E100
	0x0331A830 B 0x331A864
	0x0331A834 ADRP X0, 0xE06000
	0x0331A838 LDR X0, [X0 + 0xC08]
	0x0331A83C BL 0x1C16D08
	0x0331A840 BL 0x1C16F10
	0x0331A844 MOV X19, X0
	0x0331A848 ADRP X0, 0xE0E000
	0x0331A84C LDR X0, [X0 + 0xA8]
	0x0331A850 BL 0x1C16D08
	0x0331A854 MOV X1, X0
	0x0331A858 MOV X0, X19
	0x0331A85C MOV X2, X31
	0x0331A860 BL 0x33674A0
	0x0331A864 ADRP X0, 0xE0E000
	0x0331A868 LDR X0, [X0 + 0xB0]
	0x0331A86C BL 0x1C16D08
	0x0331A870 MOV X1, X0
	0x0331A874 MOV X0, X19
	0x0331A878 BL 0x1C16DEC
	0x0331A87C CMP W0, 0x5
	0x0331A880 CSET W0, CC
	0x0331A884 RET
	0x0331A888 STP X30, X21, [X31 - 0x20]!
	0x0331A88C STP X20, X19, [X31 + 0x10]
	0x0331A890 ADRP X21, 0x10C2000
	0x0331A894 ADRP X20, 0xDDB000
	0x0331A898 LDRB W8, [X21 + 0xBCD]
	0x0331A89C LDR X20, [X20 + 0x170]
	0x0331A8A0 MOV W19, W0
	0x0331A8A4 TBNZ X8, 0x0, 0x331A8BC
	0x0331A8A8 ADRP X0, 0xDDB000
	0x0331A8AC LDR X0, [X0 + 0x170]
	0x0331A8B0 BL 0x1C16CF4
	0x0331A8B4 MOVZ W8, 0x1
	0x0331A8B8 STRB W8, [X21 + 0xBCD]
	0x0331A8BC LDR X0, [X20]
	0x0331A8C0 LDR W8, [X0 + 0xE0]
	0x0331A8C4 CBNZ W8, 0x331A8CC
	0x0331A8C8 BL 0x1C16DFC
	0x0331A8CC AND W8, W19, 0xFFFF
	0x0331A8D0 CMP W8, 0xFF
	0x0331A8D4 B.HI 0x331A908
	0x0331A8D8 LDR X0, [X20]
	0x0331A8DC LDR W8, [X0 + 0xE0]
	0x0331A8E0 CBNZ W8, 0x331A8E8
	0x0331A8E4 BL 0x1C16DFC
	0x0331A8E8 AND W8, W19, 0xFFFF
	0x0331A8EC CMP W8, 0x7F
	0x0331A8F0 B.HI 0x331A930
	0x0331A8F4 ORR W8, W19, 0x20
	0x0331A8F8 SUB W8, W8, 0x61
	0x0331A8FC AND W8, W8, 0xFFFF
	0x0331A900 CMP W8, 0x1A
	0x0331A904 B 0x331A950
	0x0331A908 MOV W0, W19
	0x0331A90C MOV X1, X31
	0x0331A910 BL 0x330331C
	0x0331A914 LDR X8, [X20]
	0x0331A918 MOV W19, W0
	0x0331A91C LDR W9, [X8 + 0xE0]
	0x0331A920 CBNZ W9, 0x331A94C
	0x0331A924 MOV X0, X8
	0x0331A928 BL 0x1C16DFC
	0x0331A92C B 0x331A94C
	0x0331A930 LDR X0, [X20]
	0x0331A934 LDR W8, [X0 + 0xE0]
	0x0331A938 CBNZ W8, 0x331A940
	0x0331A93C BL 0x1C16DFC
	0x0331A940 MOV W0, W19
	0x0331A944 BL 0x331A5A8

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x10C3000
	009 Move X24, 0xE0F000
	010 Move W8, [X23+2995]
	011 Move X24, [X24+120]
	012 Move X19, X3
	013 Move W20, W2
	014 Move X21, X1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xE0F000
	021 Move X0, [X0+120]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+2995], W8
	025 Move X0, [X24]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X22
	031 Move X1, X21
	032 Move W2, W20
	033 Move X3, X19
	034 Move X4, X31
	035 Call Number.ParseInt32, X0, X1, X2
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X20, [X31+48]
	038 Move X19, [X31+56]
	039 Move X22, [X31+32]
	040 Move X21, [X31+40]
	041 Move X24, [X31+16]
	042 Move X23, [X31+24]
	043 Move X30, [X31+64]
	044 Return X0
	045 Move X0, 0xDDA000
	046 Move X0, [X0+2136]
	047 Call 0x1C17D08
	048 Call 0x1C17F10
	049 Move X19, X0
	050 Move X0, 0xE0F000
	051 Move X0, [X0+128]
	052 Call 0x1C17D08
	053 Move X1, X0
	054 Move X0, X19
	055 Move X2, X31
	056 Call OverflowException..ctor, X0, X1
	057 Move X0, 0xE0F000
	058 Move X0, [X0+136]
	059 Call 0x1C17D08
	060 Move X1, X0
	061 Move X0, X19
	062 Call 0x1C17DEC
	063 Move X19, X0
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X0, X19
	066 Call 0x3EB2AD0
	067 Move X19, X0
	068 Move X0, 0xDDA000
	069 Move X0, [X0+2136]
	070 Call 0x1C17D08
	071 Move X8, [X19]
	072 Move X1, [X8]
	073 Call 0x1C18270
	074 Move TEMP, X0
	075 And TEMP, TEMP, 1
	076 Compare TEMP, 1
	077 JumpIfNotEqual {99}
	078 Move X19, [X19]
	079 Call 0x3EB2AE0
	080 Move X0, 0xDDA000
	081 Move X0, [X0+2136]
	082 Call 0x1C17D08
	083 Call 0x1C17F10
	084 Move X20, X0
	085 Move X0, 0xE0F000
	086 Move X0, [X0+128]
	087 Call 0x1C17D08
	088 Move X1, X0
	089 Move X0, X20
	090 Move X2, X19
	091 Move X3, X31
	092 Call OverflowException..ctor, X0, X1, X2
	093 Move X0, 0xE0F000
	094 Move X0, [X0+136]
	095 Call 0x1C17D08
	096 Move X1, X0
	097 Move X0, X20
	098 Call 0x1C17DEC
	099 Move W0, 8
	100 Call 0x3EB2AF0
	101 Move X8, [X19]
	102 Move [X0], X8
	103 Move X1, 0xB9B000
	104 Add X1, X1, 3672
	105 Move X2, X31
	106 Call 0x3EB2B00
	107 Move X19, X0
	108 Call 0x3EB2AE0
	109 Move X0, X19
	110 Call 0x1D2D690
	111 Call 0x1991590

Method: System.Boolean TryParse(System.String s, out System.Byte result)

Disassembly:
	0x0331AA78 ADRP X0, 0xDDB000
	0x0331AA7C LDR X0, [X0 + 0x170]
	0x0331AA80 BL 0x1C16CF4
	0x0331AA84 MOVZ W8, 0x1
	0x0331AA88 STRB W8, [X21 + 0xBD0]
	0x0331AA8C LDR X0, [X20]
	0x0331AA90 LDR W8, [X0 + 0xE0]
	0x0331AA94 CBNZ W8, 0x331AA9C
	0x0331AA98 BL 0x1C16DFC
	0x0331AA9C AND W8, W19, 0xFFFF
	0x0331AAA0 CMP W8, 0xFF
	0x0331AAA4 B.HI 0x331AAD8
	0x0331AAA8 LDR X0, [X20]
	0x0331AAAC LDR W8, [X0 + 0xE0]
	0x0331AAB0 CBNZ W8, 0x331AAB8
	0x0331AAB4 BL 0x1C16DFC
	0x0331AAB8 AND W8, W19, 0xFFFF
	0x0331AABC CMP W8, 0x7F
	0x0331AAC0 B.HI 0x331AAE8
	0x0331AAC4 SUB W8, W19, 0x61
	0x0331AAC8 AND W8, W8, 0xFFFF
	0x0331AACC CMP W8, 0x1A
	0x0331AAD0 CSET W0, CC
	0x0331AAD4 B 0x331AB08
	0x0331AAD8 MOV W0, W19
	0x0331AADC MOV X1, X31
	0x0331AAE0 BL 0x330331C
	0x0331AAE4 B 0x331AB00
	0x0331AAE8 LDR X0, [X20]
	0x0331AAEC LDR W8, [X0 + 0xE0]
	0x0331AAF0 CBNZ W8, 0x331AAF8
	0x0331AAF4 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X1
	006 Compare X0, 0
	007 JumpIfEqual {34}
	008 Move X21, 0x10C0000
	009 Move W8, [X21+1890]
	010 Move X20, X0
	011 Compare W8, 0
	012 JumpIfNotEqual {18}
	013 Move X0, 0xE01000
	014 Move X0, [X0+656]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1890], W8
	018 Move X0, X20
	019 Move X1, X31
	020 Call String.GetRawStringData, X0
	021 Move W20, [X20+16]
	022 Move X21, X0
	023 Move X0, X31
	024 Call NumberFormatInfo.get_CurrentInfo
	025 Move X1, X20
	026 Move X4, X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move W2, 7
	030 Move X3, X0
	031 Move X0, X21
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Move [X19], W31
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return X0

Method: System.Boolean TryParse(System.ReadOnlySpan`1<System.Char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, out System.Byte result)

Disassembly:
	0x0331AAF8 MOV W0, W19
	0x0331AAFC BL 0x331A5A8
	0x0331AB00 CMP W0, 0x1
	0x0331AB04 CSET W0, EQ
	0x0331AB08 LDP X20, X19, [X31 + 0x10]
	0x0331AB0C LDP X30, X21, [X31], #0x20
	0x0331AB10 RET
	0x0331AB14 SUB W8, W0, 0x12
	0x0331AB18 CMP W8, 0x7
	0x0331AB1C CSET W0, CC
	0x0331AB20 RET
	0x0331AB24 STP X30, X21, [X31 - 0x20]!
	0x0331AB28 STP X20, X19, [X31 + 0x10]
	0x0331AB2C ADRP X21, 0x10C2000
	0x0331AB30 ADRP X20, 0xDDB000
	0x0331AB34 LDRB W8, [X21 + 0xBD1]
	0x0331AB38 LDR X20, [X20 + 0x170]
	0x0331AB3C MOV W19, W0
	0x0331AB40 TBNZ X8, 0x0, 0x331AB58
	0x0331AB44 ADRP X0, 0xDDB000
	0x0331AB48 LDR X0, [X0 + 0x170]
	0x0331AB4C BL 0x1C16CF4
	0x0331AB50 MOVZ W8, 0x1
	0x0331AB54 STRB W8, [X21 + 0xBD1]
	0x0331AB58 LDR X0, [X20]
	0x0331AB5C LDR W8, [X0 + 0xE0]
	0x0331AB60 CBNZ W8, 0x331AB68
	0x0331AB64 BL 0x1C16DFC
	0x0331AB68 AND W8, W19, 0xFFFF
	0x0331AB6C CMP W8, 0xFF
	0x0331AB70 B.HI 0x331AB94
	0x0331AB74 LDR X0, [X20]
	0x0331AB78 LDR W8, [X0 + 0xE0]
	0x0331AB7C CBNZ W8, 0x331AB84
	0x0331AB80 BL 0x1C16DFC
	0x0331AB84 MOV W0, W19
	0x0331AB88 BL 0x331A5A8
	0x0331AB8C MOV W19, W0
	0x0331AB90 B 0x331ABB8
	0x0331AB94 MOV W0, W19
	0x0331AB98 MOV X1, X31
	0x0331AB9C BL 0x330331C
	0x0331ABA0 LDR X8, [X20]
	0x0331ABA4 MOV W19, W0
	0x0331ABA8 LDR W9, [X8 + 0xE0]
	0x0331ABAC CBNZ W9, 0x331ABB8
	0x0331ABB0 MOV X0, X8

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0x10C3000
	011 Move X24, 0xE0F000
	012 Move W8, [X25+2996]
	013 Move X24, [X24+120]
	014 Move X19, X4
	015 Move X20, X3
	016 Move W21, W2
	017 Move X22, X1
	018 Move X23, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0xE0F000
	024 Move X0, [X0+120]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X25+2996], W8
	028 Move [X31+12], W31
	029 Move [X19], W31
	030 Move X0, [X24]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Add X4, X31, 12
	036 Move X0, X23
	037 Move X1, X22
	038 Move W2, W21
	039 Move X3, X20
	040 Move X5, X31
	041 Call Number.TryParseInt32, X0, X1, X2, X3
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {50}
	046 Move W8, [X31+12]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move W0, 1
	049 Move [X19], W8
	050 Move W0, W31
	051 Move X20, [X31+64]
	052 Move X19, [X31+72]
	053 Move X22, [X31+48]
	054 Move X21, [X31+56]
	055 Move X24, [X31+32]
	056 Move X23, [X31+40]
	057 Move X30, [X31+16]
	058 Move X25, [X31+24]
	059 Add X31, X31, 80
	060 Return X0

Method: System.String ToString()

Disassembly:
	0x0331ABB4 BL 0x1C16DFC
	0x0331ABB8 SUB W8, W19, 0x12
	0x0331ABBC LDP X20, X19, [X31 + 0x10]
	0x0331ABC0 CMP W8, 0x7
	0x0331ABC4 CSET W0, CC
	0x0331ABC8 LDP X30, X21, [X31], #0x20
	0x0331ABCC RET
	0x0331ABD0 CMP W0, 0x8
	0x0331ABD4 B.HI 0x331ABE8
	0x0331ABD8 MOVZ W8, 0x11F
	0x0331ABDC LSRV W8, W8, W0
	0x0331ABE0 AND W0, W8, 0x1
	0x0331ABE4 RET
	0x0331ABE8 MOV W0, W31
	0x0331ABEC RET
	0x0331ABF0 STP X30, X21, [X31 - 0x20]!
	0x0331ABF4 STP X20, X19, [X31 + 0x10]
	0x0331ABF8 ADRP X21, 0x10C2000
	0x0331ABFC ADRP X20, 0xDDB000
	0x0331AC00 LDRB W8, [X21 + 0xBD2]
	0x0331AC04 LDR X20, [X20 + 0x170]
	0x0331AC08 MOV W19, W0
	0x0331AC0C TBNZ X8, 0x0, 0x331AC24
	0x0331AC10 ADRP X0, 0xDDB000
	0x0331AC14 LDR X0, [X0 + 0x170]
	0x0331AC18 BL 0x1C16CF4
	0x0331AC1C MOVZ W8, 0x1
	0x0331AC20 STRB W8, [X21 + 0xBD2]
	0x0331AC24 LDR X0, [X20]
	0x0331AC28 LDR W8, [X0 + 0xE0]
	0x0331AC2C CBNZ W8, 0x331AC34
	0x0331AC30 BL 0x1C16DFC
	0x0331AC34 AND W8, W19, 0xFFFF
	0x0331AC38 CMP W8, 0xFF
	0x0331AC3C B.HI 0x331AC6C
	0x0331AC40 LDR X0, [X20]
	0x0331AC44 LDR W8, [X0 + 0xE0]
	0x0331AC48 CBNZ W8, 0x331AC50

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x10C3000
	007 Move X20, 0xE09000
	008 Move X21, 0xE0F000
	009 Move W8, [X22+2997]
	010 Move X20, [X20+472]
	011 Move X21, [X21+120]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xE0F000
	018 Move X0, [X0+120]
	019 Call 0x1C17CF4
	020 Move X0, 0xE09000
	021 Move X0, [X0+472]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+2997], W8
	025 Move X1, [X20]
	026 Move W19, [X19]
	027 Move X0, X31
	028 Call ReadOnlySpan`1<Char>.op_Implicit, X0
	029 Move X20, X0
	030 Move X0, [X21]
	031 Move X21, X1
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move W0, W19
	037 Move X1, X20
	038 Move X2, X21
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X3, X31
	044 Move X4, X31
	045 Move X30, [X31+48]
	046 Call Number.FormatInt32, X0, X1, X2
	047 Return X0

Method: System.String ToString(System.String format)

Disassembly:
	0x0331AC4C BL 0x1C16DFC
	0x0331AC50 MOV W0, W19
	0x0331AC54 BL 0x331A5A8
	0x0331AC58 CMP W0, 0x9
	0x0331AC5C B.CS 0x331ACA8
	0x0331AC60 MOVZ W8, 0x11F
	0x0331AC64 LSRV W8, W8, W0
	0x0331AC68 B 0x331ACA0
	0x0331AC6C MOV W0, W19
	0x0331AC70 MOV X1, X31
	0x0331AC74 BL 0x330331C
	0x0331AC78 LDR X8, [X20]
	0x0331AC7C MOV W19, W0
	0x0331AC80 LDR W9, [X8 + 0xE0]
	0x0331AC84 CBNZ W9, 0x331AC90
	0x0331AC88 MOV X0, X8
	0x0331AC8C BL 0x1C16DFC
	0x0331AC90 CMP W19, 0x9
	0x0331AC94 B.CS 0x331ACA8
	0x0331AC98 MOVZ W8, 0x11F
	0x0331AC9C LSRV W8, W8, W19
	0x0331ACA0 AND W0, W8, 0x1
	0x0331ACA4 B 0x331ACAC
	0x0331ACA8 MOV W0, W31
	0x0331ACAC LDP X20, X19, [X31 + 0x10]
	0x0331ACB0 LDP X30, X21, [X31], #0x20
	0x0331ACB4 RET
	0x0331ACB8 STP X30, X21, [X31 - 0x20]!
	0x0331ACBC STP X20, X19, [X31 + 0x10]
	0x0331ACC0 ADRP X20, 0x10C2000
	0x0331ACC4 ADRP X21, 0xDDB000
	0x0331ACC8 LDRB W8, [X20 + 0xBD3]
	0x0331ACCC LDR X21, [X21 + 0xC48]
	0x0331ACD0 MOV W19, W0
	0x0331ACD4 TBNZ X8, 0x0, 0x331ACEC
	0x0331ACD8 ADRP X0, 0xDDB000
	0x0331ACDC LDR X0, [X0 + 0xC48]
	0x0331ACE0 BL 0x1C16CF4
	0x0331ACE4 MOVZ W8, 0x1
	0x0331ACE8 STRB W8, [X20 + 0xBD3]
	0x0331ACEC LDR X0, [X21]
	0x0331ACF0 LDR W8, [X0 + 0xE0]
	0x0331ACF4 CBNZ W8, 0x331ACFC
	0x0331ACF8 BL 0x1C16DFC
	0x0331ACFC MOV X0, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x10C3000
	007 Move W8, [X21+2998]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE0F000
	015 Move X0, [X0+120]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2998], W8
	019 Move X21, 0x10C0000
	020 Move W8, [X21+1890]
	021 Move W19, [X19]
	022 Compare W8, 0
	023 JumpIfNotEqual {29}
	024 Move X0, 0xE01000
	025 Move X0, [X0+656]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+1890], W8
	029 Move X22, 0xE0F000
	030 Move X22, [X22+120]
	031 Compare X20, 0
	032 JumpIfEqual {38}
	033 Move X0, X20
	034 Move X1, X31
	035 Call String.GetRawStringData, X0
	036 Move W20, [X20+16]
	037 Move X21, X0
	038 Move X21, X31
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move W0, W19
	045 Move X1, X21
	046 Move X2, X20
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X3, X31
	052 Move X4, X31
	053 Move X30, [X31+48]
	054 Call Number.FormatInt32, X0, X1, X2
	055 Return X0

Method: System.String ToString(System.IFormatProvider provider)

Disassembly:
	0x0331AD00 BL 0x33387A0
	0x0331AD04 CBZ X0, 0x331AD30
	0x0331AD08 LDR X8, [X0]
	0x0331AD0C LDP X9, X1, [X8 + 0x1D8]
	0x0331AD10 BLR X9
	0x0331AD14 CBZ X0, 0x331AD30
	0x0331AD18 LDR X8, [X0]
	0x0331AD1C MOV W1, W19
	0x0331AD20 LDP X20, X19, [X31 + 0x10]
	0x0331AD24 LDP X3, X2, [X8 + 0x1C8]
	0x0331AD28 LDP X30, X21, [X31], #0x20
	0x0331AD2C BR X3
	0x0331AD30 BL 0x1C16F20
	0x0331AD34 STP X30, X21, [X31 - 0x20]!
	0x0331AD38 STP X20, X19, [X31 + 0x10]
	0x0331AD3C ADRP X20, 0x10C2000
	0x0331AD40 ADRP X21, 0xDDB000
	0x0331AD44 LDRB W8, [X20 + 0xBD4]
	0x0331AD48 LDR X21, [X21 + 0xC48]
	0x0331AD4C MOV W19, W0
	0x0331AD50 TBNZ X8, 0x0, 0x331AD68
	0x0331AD54 ADRP X0, 0xDDB000
	0x0331AD58 LDR X0, [X0 + 0xC48]
	0x0331AD5C BL 0x1C16CF4
	0x0331AD60 MOVZ W8, 0x1
	0x0331AD64 STRB W8, [X20 + 0xBD4]
	0x0331AD68 LDR X0, [X21]
	0x0331AD6C LDR W8, [X0 + 0xE0]
	0x0331AD70 CBNZ W8, 0x331AD78
	0x0331AD74 BL 0x1C16DFC
	0x0331AD78 MOV X0, X31
	0x0331AD7C BL 0x3338524
	0x0331AD80 CBZ X0, 0x331ADAC
	0x0331AD84 LDR X8, [X0]
	0x0331AD88 LDP X9, X1, [X8 + 0x1D8]
	0x0331AD8C BLR X9
	0x0331AD90 CBZ X0, 0x331ADAC
	0x0331AD94 LDR X8, [X0]
	0x0331AD98 MOV W1, W19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x10C3000
	008 Move X21, 0xE09000
	009 Move X22, 0xE0F000
	010 Move W8, [X23+2999]
	011 Move X21, [X21+472]
	012 Move X22, [X22+120]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xE0F000
	020 Move X0, [X0+120]
	021 Call 0x1C17CF4
	022 Move X0, 0xE09000
	023 Move X0, [X0+472]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+2999], W8
	027 Move X1, [X21]
	028 Move W20, [X20]
	029 Move X0, X31
	030 Call ReadOnlySpan`1<Char>.op_Implicit, X0
	031 Move X21, X0
	032 Move X0, [X22]
	033 Move X22, X1
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move W0, W20
	039 Move X1, X21
	040 Move X2, X22
	041 Move X3, X19
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X4, X31
	047 Move X30, [X31+48]
	048 Move X23, [X31+56]
	049 Call Number.FormatInt32, X0, X1, X2
	050 Return X0

Method: System.String ToString(System.String format, System.IFormatProvider provider)

Disassembly:
	0x0331AD9C LDP X20, X19, [X31 + 0x10]
	0x0331ADA0 LDP X3, X2, [X8 + 0x1C8]
	0x0331ADA4 LDP X30, X21, [X31], #0x20
	0x0331ADA8 BR X3
	0x0331ADAC BL 0x1C16F20
	0x0331ADB0 STP X30, X19, [X31 - 0x10]!
	0x0331ADB4 CBZ X1, 0x331ADE8
	0x0331ADB8 LDR X8, [X1]
	0x0331ADBC MOV W19, W0
	0x0331ADC0 MOV X0, X1
	0x0331ADC4 LDP X9, X8, [X8 + 0x1D8]
	0x0331ADC8 MOV X1, X8
	0x0331ADCC BLR X9
	0x0331ADD0 CBZ X0, 0x331AE2C
	0x0331ADD4 LDR X8, [X0]
	0x0331ADD8 MOV W1, W19
	0x0331ADDC LDP X3, X2, [X8 + 0x1A8]
	0x0331ADE0 LDP X30, X19, [X31], #0x10
	0x0331ADE4 BR X3
	0x0331ADE8 ADRP X0, 0xDDE000
	0x0331ADEC LDR X0, [X0 + 0x528]
	0x0331ADF0 BL 0x1C16D08
	0x0331ADF4 BL 0x1C16F10
	0x0331ADF8 MOV X19, X0
	0x0331ADFC ADRP X0, 0xE07000
	0x0331AE00 LDR X0, [X0 + 0xFF0]
	0x0331AE04 BL 0x1C16D08
	0x0331AE08 MOV X1, X0
	0x0331AE0C MOV X0, X19
	0x0331AE10 BL 0x330E100
	0x0331AE14 ADRP X0, 0xE0E000
	0x0331AE18 LDR X0, [X0 + 0xB8]
	0x0331AE1C BL 0x1C16D08
	0x0331AE20 MOV X1, X0
	0x0331AE24 MOV X0, X19
	0x0331AE28 BL 0x1C16DEC
	0x0331AE2C BL 0x1C16F20
	0x0331AE30 STP X30, X21, [X31 - 0x20]!
	0x0331AE34 STP X20, X19, [X31 + 0x10]
	0x0331AE38 ADRP X20, 0x10C2000
	0x0331AE3C ADRP X21, 0xDDB000
	0x0331AE40 LDRB W8, [X20 + 0xBD5]
	0x0331AE44 LDR X21, [X21 + 0xC48]
	0x0331AE48 MOV W19, W0
	0x0331AE4C TBNZ X8, 0x0, 0x331AE64
	0x0331AE50 ADRP X0, 0xDDB000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x10C3000
	008 Move W8, [X22+3000]
	009 Move X19, X2
	010 Move X21, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xE0F000
	017 Move X0, [X0+120]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3000], W8
	021 Move X22, 0x10C0000
	022 Move W8, [X22+1890]
	023 Move W20, [X20]
	024 Compare W8, 0
	025 JumpIfNotEqual {31}
	026 Move X0, 0xE01000
	027 Move X0, [X0+656]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+1890], W8
	031 Move X23, 0xE0F000
	032 Move X23, [X23+120]
	033 Compare X21, 0
	034 JumpIfEqual {40}
	035 Move X0, X21
	036 Move X1, X31
	037 Call String.GetRawStringData, X0
	038 Move W21, [X21+16]
	039 Move X22, X0
	040 Move X22, X31
	041 Move X0, [X23]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move W0, W20
	047 Move X1, X22
	048 Move X2, X21
	049 Move X3, X19
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X4, X31
	055 Move X30, [X31+48]
	056 Move X23, [X31+56]
	057 Call Number.FormatInt32, X0, X1, X2
	058 Return X0

Method: System.Boolean TryFormat(System.Span`1<System.Char> destination, out System.Int32 charsWritten, System.ReadOnlySpan`1<System.Char> format = null, System.IFormatProvider provider = null)

Disassembly:
	0x0331AE54 LDR X0, [X0 + 0xC48]
	0x0331AE58 BL 0x1C16CF4
	0x0331AE5C MOVZ W8, 0x1
	0x0331AE60 STRB W8, [X20 + 0xBD5]
	0x0331AE64 LDR X0, [X21]
	0x0331AE68 LDR W8, [X0 + 0xE0]
	0x0331AE6C CBNZ W8, 0x331AE74
	0x0331AE70 BL 0x1C16DFC
	0x0331AE74 MOV X0, X31
	0x0331AE78 BL 0x33387A0
	0x0331AE7C CBZ X0, 0x331AEA8
	0x0331AE80 LDR X8, [X0]
	0x0331AE84 LDP X9, X1, [X8 + 0x1D8]
	0x0331AE88 BLR X9
	0x0331AE8C CBZ X0, 0x331AEA8
	0x0331AE90 LDR X8, [X0]
	0x0331AE94 MOV W1, W19
	0x0331AE98 LDP X20, X19, [X31 + 0x10]
	0x0331AE9C LDP X3, X2, [X8 + 0x1A8]
	0x0331AEA0 LDP X30, X21, [X31], #0x20
	0x0331AEA4 BR X3
	0x0331AEA8 BL 0x1C16F20
	0x0331AEAC STP X30, X21, [X31 - 0x20]!
	0x0331AEB0 STP X20, X19, [X31 + 0x10]
	0x0331AEB4 ADRP X20, 0x10C2000
	0x0331AEB8 ADRP X21, 0xDDB000
	0x0331AEBC LDRB W8, [X20 + 0xBD6]
	0x0331AEC0 LDR X21, [X21 + 0xC48]
	0x0331AEC4 MOV W19, W0
	0x0331AEC8 TBNZ X8, 0x0, 0x331AEE0
	0x0331AECC ADRP X0, 0xDDB000
	0x0331AED0 LDR X0, [X0 + 0xC48]
	0x0331AED4 BL 0x1C16CF4
	0x0331AED8 MOVZ W8, 0x1
	0x0331AEDC STRB W8, [X20 + 0xBD6]
	0x0331AEE0 LDR X0, [X21]
	0x0331AEE4 LDR W8, [X0 + 0xE0]
	0x0331AEE8 CBNZ W8, 0x331AEF0
	0x0331AEEC BL 0x1C16DFC
	0x0331AEF0 MOV X0, X31
	0x0331AEF4 BL 0x3338524

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X27, 0x10C3000
	012 Move X26, 0xE0F000
	013 Move W8, [X27+3001]
	014 Move X26, [X26+120]
	015 Move X20, X6
	016 Move X22, X5
	017 Move X24, X4
	018 Move X19, X3
	019 Move X21, X2
	020 Move X23, X1
	021 Move X25, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {31}
	026 Move X0, 0xE0F000
	027 Move X0, [X0+120]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X27+3001], W8
	031 Move X0, [X26]
	032 Move W25, [X25]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move W0, W25
	038 Move X1, X24
	039 Move X2, X22
	040 Move X3, X20
	041 Move X4, X23
	042 Move X5, X21
	043 Move X6, X19
	044 Move X20, [X31+64]
	045 Move X19, [X31+72]
	046 Move X22, [X31+48]
	047 Move X21, [X31+56]
	048 Move X24, [X31+32]
	049 Move X23, [X31+40]
	050 Move X26, [X31+16]
	051 Move X25, [X31+24]
	052 Move X7, X31
	053 Move X30, [X31+80]
	054 Move X27, [X31+88]
	055 Call Number.TryFormatInt32, X0, X1, X2, X3, X4
	056 Return X0

Method: System.TypeCode GetTypeCode()

Disassembly:
	0x0331AEF8 CBZ X0, 0x331AF24
	0x0331AEFC LDR X8, [X0]

ISIL:
	001 Move W0, 6
	002 Return X0

Method: System.Boolean System.IConvertible.ToBoolean(System.IFormatProvider provider)

Disassembly:
	0x0331AF00 LDP X9, X1, [X8 + 0x1D8]
	0x0331AF04 BLR X9
	0x0331AF08 CBZ X0, 0x331AF24
	0x0331AF0C LDR X8, [X0]
	0x0331AF10 MOV W1, W19
	0x0331AF14 LDP X20, X19, [X31 + 0x10]
	0x0331AF18 LDP X3, X2, [X8 + 0x1A8]
	0x0331AF1C LDP X30, X21, [X31], #0x20
	0x0331AF20 BR X3
	0x0331AF24 BL 0x1C16F20
	0x0331AF28 MOVZ W0, 0x4
	0x0331AF2C RET
	0x0331AF30 STR X30, [X31 - 0x20]!
	0x0331AF34 STP X20, X19, [X31 + 0x10]
	0x0331AF38 ADRP X0, 0xE0E000
	0x0331AF3C LDR X0, [X0 + 0x30]
	0x0331AF40 BL 0x1C16D08
	0x0331AF44 MOV X19, X0
	0x0331AF48 ADRP X0, 0xE0B000
	0x0331AF4C LDR X0, [X0 + 0xE0]
	0x0331AF50 BL 0x1C16D08
	0x0331AF54 MOV X20, X0
	0x0331AF58 ADRP X0, 0xE0B000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10C3000
	006 Move X20, 0xDE3000
	007 Move W8, [X21+3002]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDE3000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3002], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 NotImplemented "Instruction CSET not yet implemented."
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.Char System.IConvertible.ToChar(System.IFormatProvider provider)

Disassembly:
	0x0331AF68 MOV X0, X19
	0x0331AF6C MOV X1, X20
	0x0331AF70 MOV X3, X31
	0x0331AF74 BL 0x320A264
	0x0331AF78 MOV X19, X0
	0x0331AF7C ADRP X0, 0xDE1000
	0x0331AF80 LDR X0, [X0 + 0xC08]
	0x0331AF84 BL 0x1C16D08
	0x0331AF88 BL 0x1C16F10
	0x0331AF8C MOV X1, X19
	0x0331AF90 MOV X2, X31
	0x0331AF94 MOV X20, X0
	0x0331AF98 BL 0x337B498
	0x0331AF9C ADRP X0, 0xE0E000
	0x0331AFA0 LDR X0, [X0 + 0xC0]
	0x0331AFA4 BL 0x1C16D08
	0x0331AFA8 MOV X1, X0
	0x0331AFAC MOV X0, X20
	0x0331AFB0 BL 0x1C16DEC
	0x0331AFB4 LDRH W0, [X0]
	0x0331AFB8 RET
	0x0331AFBC STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10C3000
	006 Move X20, 0xDE3000
	007 Move W8, [X21+3003]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDE3000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3003], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0

Method: System.SByte System.IConvertible.ToSByte(System.IFormatProvider provider)

Disassembly:
	0x0331AFC8 ADRP X20, 0xDE2000
	0x0331AFCC LDRB W8, [X21 + 0xBD7]
	0x0331AFD0 LDR X20, [X20 + 0x9E8]
	0x0331AFD4 MOV X19, X0
	0x0331AFD8 TBNZ X8, 0x0, 0x331AFF0
	0x0331AFDC ADRP X0, 0xDE2000
	0x0331AFE0 LDR X0, [X0 + 0x9E8]
	0x0331AFE4 BL 0x1C16CF4
	0x0331AFE8 MOVZ W8, 0x1
	0x0331AFEC STRB W8, [X21 + 0xBD7]
	0x0331AFF0 LDR X0, [X20]
	0x0331AFF4 LDRH W19, [X19]
	0x0331AFF8 LDR W8, [X0 + 0xE0]
	0x0331AFFC CBNZ W8, 0x331B004
	0x0331B000 BL 0x1C16DFC
	0x0331B004 MOV W0, W19
	0x0331B008 LDP X20, X19, [X31 + 0x10]
	0x0331B00C LDP X30, X21, [X31], #0x20
	0x0331B010 B 0x331B014
	0x0331B014 STR X30, [X31 - 0x20]!
	0x0331B018 STP X20, X19, [X31 + 0x10]
	0x0331B01C ADRP X20, 0x10C1000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10C3000
	006 Move X20, 0xDE3000
	007 Move W8, [X21+3004]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDE3000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3004], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]

Method: System.Byte System.IConvertible.ToByte(System.IFormatProvider provider)

Disassembly:
	0x0331B074 STP X20, X19, [X31 + 0x10]
	0x0331B078 ADRP X21, 0x10C1000

ISIL:
	001 Move W0, [X0]
	002 Return X0

Method: System.Int16 System.IConvertible.ToInt16(System.IFormatProvider provider)

Disassembly:
	0x0331B07C ADRP X20, 0xDE1000
	0x0331B080 LDRB W8, [X21 + 0xBD8]
	0x0331B084 LDR X20, [X20 + 0x9E8]
	0x0331B088 MOV X19, X0
	0x0331B08C TBNZ X8, 0x0, 0x331B0A4
	0x0331B090 ADRP X0, 0xDE1000
	0x0331B094 LDR X0, [X0 + 0x9E8]
	0x0331B098 BL 0x1C16CF4
	0x0331B09C MOVZ W8, 0x1
	0x0331B0A0 STRB W8, [X21 + 0xBD8]
	0x0331B0A4 LDR X0, [X20]
	0x0331B0A8 LDRH W19, [X19]
	0x0331B0AC LDR W8, [X0 + 0xE0]
	0x0331B0B0 CBNZ W8, 0x331B0B8
	0x0331B0B4 BL 0x1C16DFC
	0x0331B0B8 MOV W0, W19
	0x0331B0BC LDP X20, X19, [X31 + 0x10]
	0x0331B0C0 LDP X30, X21, [X31], #0x20
	0x0331B0C4 B 0x331B0C8
	0x0331B0C8 STR X30, [X31 - 0x20]!
	0x0331B0CC STP X20, X19, [X31 + 0x10]
	0x0331B0D0 ADRP X20, 0x10C1000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10C2000
	006 Move X20, 0xDE2000
	007 Move W8, [X21+3005]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDE2000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3005], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0

Method: System.UInt16 System.IConvertible.ToUInt16(System.IFormatProvider provider)

Disassembly:
	0x0331B0DC TBNZ X8, 0x0, 0x331B0F4
	0x0331B0E0 ADRP X0, 0xDE1000
	0x0331B0E4 LDR X0, [X0 + 0x9E8]
	0x0331B0E8 BL 0x1C16CF4
	0x0331B0EC MOVZ W8, 0x1
	0x0331B0F0 STRB W8, [X20 + 0xC11]
	0x0331B0F4 AND W8, W19, 0xFFFF
	0x0331B0F8 CMP W8, 0x100
	0x0331B0FC B.CS 0x331B110
	0x0331B100 MOV W0, W19
	0x0331B104 LDP X20, X19, [X31 + 0x10]
	0x0331B108 LDR X30, [X31], #0x20
	0x0331B10C RET
	0x0331B110 ADRP X8, 0xDE1000
	0x0331B114 LDR X8, [X8 + 0x9E8]
	0x0331B118 LDR X0, [X8]
	0x0331B11C BL 0x19903D0
	0x0331B120 BL 0x331DFE0
	0x0331B124 STP X30, X21, [X31 - 0x20]!
	0x0331B128 STP X20, X19, [X31 + 0x10]
	0x0331B12C ADRP X21, 0x10C1000
	0x0331B130 ADRP X20, 0xDE1000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10C2000
	006 Move X20, 0xDE2000
	007 Move W8, [X21+3006]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDE2000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3006], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0

Method: System.Int32 System.IConvertible.ToInt32(System.IFormatProvider provider)

Disassembly:
	0x0331B13C MOV X19, X0
	0x0331B140 TBNZ X8, 0x0, 0x331B158
	0x0331B144 ADRP X0, 0xDE1000
	0x0331B148 LDR X0, [X0 + 0x9E8]
	0x0331B14C BL 0x1C16CF4
	0x0331B150 MOVZ W8, 0x1
	0x0331B154 STRB W8, [X21 + 0xBD9]
	0x0331B158 LDR X0, [X20]
	0x0331B15C LDRH W19, [X19]
	0x0331B160 LDR W8, [X0 + 0xE0]
	0x0331B164 CBNZ W8, 0x331B16C
	0x0331B168 BL 0x1C16DFC
	0x0331B16C MOV W0, W19
	0x0331B170 LDP X20, X19, [X31 + 0x10]
	0x0331B174 LDP X30, X21, [X31], #0x20
	0x0331B178 B 0x331B17C
	0x0331B17C STR X30, [X31 - 0x20]!
	0x0331B180 STP X20, X19, [X31 + 0x10]
	0x0331B184 ADRP X20, 0x10C1000
	0x0331B188 LDRB W8, [X20 + 0xC1F]
	0x0331B18C MOV W19, W0
	0x0331B190 TBNZ X8, 0x0, 0x331B1A8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10C2000
	006 Move X20, 0xDE2000
	007 Move W8, [X21+3007]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDE2000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3007], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0

Method: System.UInt32 System.IConvertible.ToUInt32(System.IFormatProvider provider)

Disassembly:
	0x0331B19C BL 0x1C16CF4
	0x0331B1A0 MOVZ W8, 0x1
	0x0331B1A4 STRB W8, [X20 + 0xC1F]
	0x0331B1A8 TBNZ X19, 0xF, 0x331B1BC
	0x0331B1AC MOV W0, W19
	0x0331B1B0 LDP X20, X19, [X31 + 0x10]
	0x0331B1B4 LDR X30, [X31], #0x20
	0x0331B1B8 RET
	0x0331B1BC ADRP X8, 0xDE1000
	0x0331B1C0 LDR X8, [X8 + 0x9E8]
	0x0331B1C4 LDR X0, [X8]
	0x0331B1C8 BL 0x19903D0
	0x0331B1CC BL 0x331E078
	0x0331B1D0 STP X30, X21, [X31 - 0x20]!
	0x0331B1D4 STP X20, X19, [X31 + 0x10]
	0x0331B1D8 ADRP X21, 0x10C1000
	0x0331B1DC ADRP X20, 0xDE1000
	0x0331B1E0 LDRB W8, [X21 + 0xBDA]
	0x0331B1E4 LDR X20, [X20 + 0x9E8]
	0x0331B1E8 MOV X19, X0
	0x0331B1EC TBNZ X8, 0x0, 0x331B204
	0x0331B1F0 ADRP X0, 0xDE1000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10C2000
	006 Move X20, 0xDE2000
	007 Move W8, [X21+3008]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDE2000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3008], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0

Method: System.Int64 System.IConvertible.ToInt64(System.IFormatProvider provider)

Disassembly:
	0x0331B1FC MOVZ W8, 0x1
	0x0331B200 STRB W8, [X21 + 0xBDA]
	0x0331B204 LDR X0, [X20]
	0x0331B208 LDRH W19, [X19]
	0x0331B20C LDR W8, [X0 + 0xE0]
	0x0331B210 CBNZ W8, 0x331B218
	0x0331B214 BL 0x1C16DFC
	0x0331B218 MOV W0, W19
	0x0331B21C LDP X20, X19, [X31 + 0x10]
	0x0331B220 LDP X30, X21, [X31], #0x20
	0x0331B224 RET
	0x0331B228 RET
	0x0331B22C STP X30, X21, [X31 - 0x20]!
	0x0331B230 STP X20, X19, [X31 + 0x10]
	0x0331B234 ADRP X21, 0x10C1000
	0x0331B238 ADRP X20, 0xDE1000
	0x0331B23C LDRB W8, [X21 + 0xBDB]
	0x0331B240 LDR X20, [X20 + 0x9E8]
	0x0331B244 MOV X19, X0
	0x0331B248 TBNZ X8, 0x0, 0x331B260
	0x0331B24C ADRP X0, 0xDE1000
	0x0331B250 LDR X0, [X0 + 0x9E8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10C2000
	006 Move X20, 0xDE2000
	007 Move W8, [X21+3009]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDE2000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3009], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0

Method: System.UInt64 System.IConvertible.ToUInt64(System.IFormatProvider provider)

Disassembly:
	0x0331B25C STRB W8, [X21 + 0xBDB]
	0x0331B260 LDR X0, [X20]
	0x0331B264 LDRH W19, [X19]
	0x0331B268 LDR W8, [X0 + 0xE0]
	0x0331B26C CBNZ W8, 0x331B274
	0x0331B270 BL 0x1C16DFC
	0x0331B274 MOV W0, W19
	0x0331B278 LDP X20, X19, [X31 + 0x10]
	0x0331B27C LDP X30, X21, [X31], #0x20
	0x0331B280 RET
	0x0331B284 AND W0, W0, 0xFFFF
	0x0331B288 RET
	0x0331B28C STP X30, X21, [X31 - 0x20]!
	0x0331B290 STP X20, X19, [X31 + 0x10]
	0x0331B294 ADRP X21, 0x10C1000
	0x0331B298 ADRP X20, 0xDE1000
	0x0331B29C LDRB W8, [X21 + 0xBDC]
	0x0331B2A0 LDR X20, [X20 + 0x9E8]
	0x0331B2A4 MOV X19, X0
	0x0331B2A8 TBNZ X8, 0x0, 0x331B2C0
	0x0331B2AC ADRP X0, 0xDE1000
	0x0331B2B0 LDR X0, [X0 + 0x9E8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10C2000
	006 Move X20, 0xDE2000
	007 Move W8, [X21+3010]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDE2000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3010], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0

Method: System.Single System.IConvertible.ToSingle(System.IFormatProvider provider)

Disassembly:
	0x0331B2BC STRB W8, [X21 + 0xBDC]
	0x0331B2C0 LDR X0, [X20]
	0x0331B2C4 LDRH W19, [X19]
	0x0331B2C8 LDR W8, [X0 + 0xE0]
	0x0331B2CC CBNZ W8, 0x331B2D4
	0x0331B2D0 BL 0x1C16DFC
	0x0331B2D4 MOV W0, W19
	0x0331B2D8 LDP X20, X19, [X31 + 0x10]
	0x0331B2DC LDP X30, X21, [X31], #0x20
	0x0331B2E0 RET
	0x0331B2E4 AND W0, W0, 0xFFFF
	0x0331B2E8 RET
	0x0331B2EC STP X30, X21, [X31 - 0x20]!
	0x0331B2F0 STP X20, X19, [X31 + 0x10]
	0x0331B2F4 ADRP X21, 0x10C1000
	0x0331B2F8 ADRP X20, 0xDE1000
	0x0331B2FC LDRB W8, [X21 + 0xBDD]
	0x0331B300 LDR X20, [X20 + 0x9E8]
	0x0331B304 MOV X19, X0
	0x0331B308 TBNZ X8, 0x0, 0x331B320
	0x0331B30C ADRP X0, 0xDE1000
	0x0331B310 LDR X0, [X0 + 0x9E8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10C2000
	006 Move X20, 0xDE2000
	007 Move W8, [X21+3011]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDE2000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3011], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 NotImplemented "Instruction UCVTF not yet implemented."
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return V0

Method: System.Double System.IConvertible.ToDouble(System.IFormatProvider provider)

Disassembly:
	0x0331B320 LDR X0, [X20]
	0x0331B324 LDRH W19, [X19]
	0x0331B328 LDR W8, [X0 + 0xE0]
	0x0331B32C CBNZ W8, 0x331B334
	0x0331B330 BL 0x1C16DFC
	0x0331B334 MOV X0, X19
	0x0331B338 LDP X20, X19, [X31 + 0x10]
	0x0331B33C LDP X30, X21, [X31], #0x20
	0x0331B340 RET
	0x0331B344 AND X0, X0, 0xFFFF
	0x0331B348 RET
	0x0331B34C STP X30, X21, [X31 - 0x20]!
	0x0331B350 STP X20, X19, [X31 + 0x10]
	0x0331B354 ADRP X21, 0x10C1000
	0x0331B358 ADRP X20, 0xDE1000
	0x0331B35C LDRB W8, [X21 + 0xBDE]
	0x0331B360 LDR X20, [X20 + 0x9E8]
	0x0331B364 MOV X19, X0
	0x0331B368 TBNZ X8, 0x0, 0x331B380
	0x0331B36C ADRP X0, 0xDE1000
	0x0331B370 LDR X0, [X0 + 0x9E8]
	0x0331B374 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10C2000
	006 Move X20, 0xDE2000
	007 Move W8, [X21+3012]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDE2000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3012], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 NotImplemented "Instruction UCVTF not yet implemented."
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return V0

Method: System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider provider)

Disassembly:
	0x0331B384 LDRH W19, [X19]
	0x0331B388 LDR W8, [X0 + 0xE0]
	0x0331B38C CBNZ W8, 0x331B394
	0x0331B390 BL 0x1C16DFC
	0x0331B394 MOV X0, X19
	0x0331B398 LDP X20, X19, [X31 + 0x10]
	0x0331B39C LDP X30, X21, [X31], #0x20
	0x0331B3A0 RET
	0x0331B3A4 AND X0, X0, 0xFFFF
	0x0331B3A8 RET
	0x0331B3AC STR X30, [X31 - 0x20]!
	0x0331B3B0 STP X20, X19, [X31 + 0x10]
	0x0331B3B4 ADRP X0, 0xE0D000
	0x0331B3B8 LDR X0, [X0 + 0x30]
	0x0331B3BC BL 0x1C16D08
	0x0331B3C0 MOV X19, X0
	0x0331B3C4 ADRP X0, 0xE0A000
	0x0331B3C8 LDR X0, [X0 + 0xE0]
	0x0331B3CC BL 0x1C16D08
	0x0331B3D0 MOV X20, X0
	0x0331B3D4 ADRP X0, 0xE0A000
	0x0331B3D8 LDR X0, [X0 + 0xE8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10C2000
	006 Move X20, 0xDE2000
	007 Move W8, [X21+3013]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDE2000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3013], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]

Method: System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider)

Disassembly:
	0x0331B434 STP X20, X19, [X31 + 0x10]
	0x0331B438 ADRP X0, 0xE0D000
	0x0331B43C LDR X0, [X0 + 0x30]
	0x0331B440 BL 0x1C16D08
	0x0331B444 MOV X19, X0
	0x0331B448 ADRP X0, 0xE0A000
	0x0331B44C LDR X0, [X0 + 0xE0]
	0x0331B450 BL 0x1C16D08
	0x0331B454 MOV X20, X0
	0x0331B458 ADRP X0, 0xE0A000
	0x0331B45C LDR X0, [X0 + 0xF0]
	0x0331B460 BL 0x1C16D08
	0x0331B464 MOV X2, X0
	0x0331B468 MOV X0, X19
	0x0331B46C MOV X1, X20
	0x0331B470 MOV X3, X31
	0x0331B474 BL 0x320A264
	0x0331B478 MOV X19, X0
	0x0331B47C ADRP X0, 0xDE0000
	0x0331B480 LDR X0, [X0 + 0xC08]
	0x0331B484 BL 0x1C16D08
	0x0331B488 BL 0x1C16F10
	0x0331B48C MOV X1, X19
	0x0331B490 MOV X2, X31
	0x0331B494 MOV X20, X0
	0x0331B498 BL 0x337B498
	0x0331B49C ADRP X0, 0xE0D000
	0x0331B4A0 LDR X0, [X0 + 0xD0]
	0x0331B4A4 BL 0x1C16D08
	0x0331B4A8 MOV X1, X0
	0x0331B4AC MOV X0, X20
	0x0331B4B0 BL 0x1C16DEC
	0x0331B4B4 STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0xE0E000
	005 Move X0, [X0+48]
	006 Call 0x1C17D08
	007 Move X19, X0
	008 Move X0, 0xE0B000
	009 Move X0, [X0+128]
	010 Call 0x1C17D08
	011 Move X20, X0
	012 Move X0, 0xE0B000
	013 Move X0, [X0+152]
	014 Call 0x1C17D08
	015 Move X2, X0
	016 Move X0, X19
	017 Move X1, X20
	018 Move X3, X31
	019 Call SR.Format, X0, X1, X2
	020 Move X19, X0
	021 Move X0, 0xDE1000
	022 Move X0, [X0+3080]
	023 Call 0x1C17D08
	024 Call 0x1C17F10
	025 Move X1, X19
	026 Move X2, X31
	027 Move X20, X0
	028 Call InvalidCastException..ctor, X0, X1
	029 Move X0, 0xE0E000
	030 Move X0, [X0+144]
	031 Call 0x1C17D08
	032 Move X1, X0
	033 Move X0, X20
	034 Call 0x1C17DEC

Method: System.Object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider)

Disassembly:
	0x0331B4B8 STP X20, X19, [X31 + 0x10]
	0x0331B4BC ADRP X0, 0xE0D000
	0x0331B4C0 LDR X0, [X0 + 0x30]
	0x0331B4C4 BL 0x1C16D08
	0x0331B4C8 MOV X19, X0
	0x0331B4CC ADRP X0, 0xE0A000
	0x0331B4D0 LDR X0, [X0 + 0xE0]
	0x0331B4D4 BL 0x1C16D08
	0x0331B4D8 MOV X20, X0
	0x0331B4DC ADRP X0, 0xE0A000
	0x0331B4E0 LDR X0, [X0 + 0xA0]
	0x0331B4E4 BL 0x1C16D08
	0x0331B4E8 MOV X2, X0
	0x0331B4EC MOV X0, X19
	0x0331B4F0 MOV X1, X20
	0x0331B4F4 MOV X3, X31
	0x0331B4F8 BL 0x320A264
	0x0331B4FC MOV X19, X0
	0x0331B500 ADRP X0, 0xDE0000
	0x0331B504 LDR X0, [X0 + 0xC08]
	0x0331B508 BL 0x1C16D08
	0x0331B50C BL 0x1C16F10
	0x0331B510 MOV X1, X19
	0x0331B514 MOV X2, X31
	0x0331B518 MOV X20, X0
	0x0331B51C BL 0x337B498
	0x0331B520 ADRP X0, 0xE0D000
	0x0331B524 LDR X0, [X0 + 0xD8]
	0x0331B528 BL 0x1C16D08
	0x0331B52C MOV X1, X0
	0x0331B530 MOV X0, X20
	0x0331B534 BL 0x1C16DEC
	0x0331B538 STR X30, [X31 - 0x20]!
	0x0331B53C STP X20, X19, [X31 + 0x10]
	0x0331B540 ADRP X0, 0xE0D000
	0x0331B544 LDR X0, [X0 + 0x30]
	0x0331B548 BL 0x1C16D08
	0x0331B54C MOV X19, X0
	0x0331B550 ADRP X0, 0xE0A000
	0x0331B554 LDR X0, [X0 + 0xE0]
	0x0331B558 BL 0x1C16D08
	0x0331B55C MOV X20, X0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x10C2000
	009 Move X23, 0xDDA000
	010 Move X22, 0xDE2000
	011 Move W8, [X24+3014]
	012 Move X23, [X23+2520]
	013 Move X22, [X22+2536]
	014 Move X19, X2
	015 Move X20, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0xDDA000
	022 Move X0, [X0+2520]
	023 Call 0x1C17CF4
	024 Move X0, 0xDE2000
	025 Move X0, [X0+2536]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X24+3014], W8
	029 Move W8, [X21]
	030 Move X0, [X23]
	031 Add X1, X31, 12
	032 Move [X31+12], W8
	033 Call 0x1C17E04
	034 Move X8, [X22]
	035 Move X21, X0
	036 Move W9, [X8+224]
	037 Compare W9, 0
	038 JumpIfNotEqual {41}
	039 Move X0, X8
	040 Call 0x1C17DFC
	041 Move X0, X21
	042 Move X1, X20
	043 Move X2, X19
	044 Call Convert.DefaultToType, X0, X1, X2
	045 Move X20, [X31+48]
	046 Move X19, [X31+56]
	047 Move X22, [X31+32]
	048 Move X21, [X31+40]
	049 Move X24, [X31+16]
	050 Move X23, [X31+24]
	051 Move X30, [X31+64]
	052 Return X0

