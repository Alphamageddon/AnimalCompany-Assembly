Type: System.BitConverter

Method: System.Byte[] GetBytes(System.Int32 value)

Disassembly:
	0x03317C94 MOV X20, X0
	0x03317C98 MOV X21, X1
	0x03317C9C CBNZ W8, 0x3317CC0
	0x03317CA0 ADRP X0, 0xE0A000
	0x03317CA4 LDR X0, [X0 + 0xFD0]
	0x03317CA8 BL 0x1C16CF4
	0x03317CAC ADRP X0, 0xE0B000
	0x03317CB0 LDR X0, [X0 + 0x28]
	0x03317CB4 BL 0x1C16CF4
	0x03317CB8 MOVZ W8, 0x1
	0x03317CBC STRB W8, [X26 + 0xC78]
	0x03317CC0 CMP W22, W21
	0x03317CC4 B.NE 0x3317D28
	0x03317CC8 CBZ W22, 0x3317D74
	0x03317CCC ADRP X8, 0xE0A000
	0x03317CD0 LDR X8, [X8 + 0xFD0]
	0x03317CD4 LDR X0, [X8]
	0x03317CD8 LDR W8, [X0 + 0xE0]
	0x03317CDC CBNZ W8, 0x3317CE4
	0x03317CE0 BL 0x1C16DFC
	0x03317CE4 MOV X0, X23
	0x03317CE8 MOV X1, X22
	0x03317CEC MOV X2, X20
	0x03317CF0 MOV X3, X21
	0x03317CF4 MOV X4, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x10C6000
	006 Move X21, 0xDDD000
	007 Move W8, [X20+2960]
	008 Move X21, [X21+1560]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDDD000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2960], W8
	019 Move X0, [X21]
	020 Move W1, 4
	021 Call 0x1C17D6C
	022 Compare X0, 0
	023 JumpIfEqual {33}
	024 Move W8, [X0+24]
	025 Compare W8, 0
	026 JumpIfEqual {34}
	027 Move [X0+32], W19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0
	033 Call 0x1C17F20
	034 Call 0x1C17F28

Method: System.Byte[] GetBytes(System.Int64 value)

Disassembly:
	0x03317CF8 BL 0x33043D4
	0x03317CFC CBZ W0, 0x3317D74
	0x03317D00 LDRB W8, [X26 + 0xC78]
	0x03317D04 CBNZ W8, 0x3317D28
	0x03317D08 ADRP X0, 0xE0A000
	0x03317D0C LDR X0, [X0 + 0xFD0]
	0x03317D10 BL 0x1C16CF4
	0x03317D14 ADRP X0, 0xE0B000
	0x03317D18 LDR X0, [X0 + 0x28]
	0x03317D1C BL 0x1C16CF4
	0x03317D20 MOVZ W8, 0x1
	0x03317D24 STRB W8, [X26 + 0xC78]
	0x03317D28 CMP W24, W21
	0x03317D2C B.NE 0x3317DA0
	0x03317D30 CBZ W24, 0x3317D7C
	0x03317D34 ADRP X8, 0xE0A000
	0x03317D38 LDR X8, [X8 + 0xFD0]
	0x03317D3C LDR X0, [X8]
	0x03317D40 LDR W8, [X0 + 0xE0]
	0x03317D44 CBNZ W8, 0x3317D4C
	0x03317D48 BL 0x1C16DFC
	0x03317D4C MOV X0, X25
	0x03317D50 MOV X1, X24
	0x03317D54 MOV X2, X20
	0x03317D58 MOV X3, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x10C6000
	006 Move X21, 0xDDD000
	007 Move W8, [X20+2961]
	008 Move X21, [X21+1560]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDDD000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2961], W8
	019 Move X0, [X21]
	020 Move W1, 8
	021 Call 0x1C17D6C
	022 Compare X0, 0
	023 JumpIfEqual {33}
	024 Move W8, [X0+24]
	025 Compare W8, 0
	026 JumpIfEqual {34}
	027 Move [X0+32], X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0
	033 Call 0x1C17F20
	034 Call 0x1C17F28

Method: System.Byte[] GetBytes(System.UInt16 value)

Disassembly:
	0x03317D5C MOV X4, X31
	0x03317D60 BL 0x33043D4
	0x03317D64 CMP W0, 0x0
	0x03317D68 MOV W8, W31
	0x03317D6C CSET W0, EQ
	0x03317D70 B 0x3317D84
	0x03317D74 MOVZ W8, 0x1
	0x03317D78 B 0x3317D80
	0x03317D7C MOV W8, W31
	0x03317D80 MOVZ W0, 0x1
	0x03317D84 STRB W8, [X19]
	0x03317D88 LDP X20, X19, [X31 + 0x40]
	0x03317D8C LDP X22, X21, [X31 + 0x30]
	0x03317D90 LDP X24, X23, [X31 + 0x20]
	0x03317D94 LDP X26, X25, [X31 + 0x10]
	0x03317D98 LDR X30, [X31], #0x50
	0x03317D9C RET
	0x03317DA0 MOV W8, W31
	0x03317DA4 MOV W0, W31
	0x03317DA8 B 0x3317D84
	0x03317DAC STR X30, [X31 - 0x30]!
	0x03317DB0 STP X22, X21, [X31 + 0x10]
	0x03317DB4 STP X20, X19, [X31 + 0x20]
	0x03317DB8 ADRP X21, 0x10C5000
	0x03317DBC LDRB W8, [X21 + 0xBA1]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x10C6000
	006 Move X21, 0xDDD000
	007 Move W8, [X20+2962]
	008 Move X21, [X21+1560]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDDD000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2962], W8
	019 Move X0, [X21]
	020 Move W1, 2
	021 Call 0x1C17D6C
	022 Compare X0, 0
	023 JumpIfEqual {33}
	024 Move W8, [X0+24]
	025 Compare W8, 0
	026 JumpIfEqual {34}
	027 NotImplemented "Instruction STRH not yet implemented."
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0
	033 Call 0x1C17F20
	034 Call 0x1C17F28

Method: System.Byte[] GetBytes(System.UInt32 value)

Disassembly:
	0x03317DC0 MOV X19, X1
	0x03317DC4 MOV X20, X0
	0x03317DC8 TBNZ X8, 0x0, 0x3317DE0
	0x03317DCC ADRP X0, 0xDDC000
	0x03317DD0 LDR X0, [X0 + 0xB58]
	0x03317DD4 BL 0x1C16CF4
	0x03317DD8 MOVZ W8, 0x1
	0x03317DDC STRB W8, [X21 + 0xBA1]
	0x03317DE0 CBZ X20, 0x3317E50
	0x03317DE4 ADRP X22, 0x10C5000
	0x03317DE8 ADRP X21, 0xDDC000
	0x03317DEC LDRB W8, [X22 + 0x3AB]
	0x03317DF0 LDR X21, [X21 + 0xB58]
	0x03317DF4 CBNZ W8, 0x3317E0C
	0x03317DF8 ADRP X0, 0xE03000
	0x03317DFC LDR X0, [X0 + 0x290]
	0x03317E00 BL 0x1C16CF4
	0x03317E04 MOVZ W8, 0x1
	0x03317E08 STRB W8, [X22 + 0x3AB]
	0x03317E0C MOV X0, X20
	0x03317E10 MOV X1, X31
	0x03317E14 BL 0x3225708
	0x03317E18 LDR X8, [X21]
	0x03317E1C LDR W20, [X20 + 0x10]
	0x03317E20 MOV X21, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x10C6000
	006 Move X21, 0xDDD000
	007 Move W8, [X20+2963]
	008 Move X21, [X21+1560]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDDD000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2963], W8
	019 Move X0, [X21]
	020 Move W1, 4
	021 Call 0x1C17D6C
	022 Compare X0, 0
	023 JumpIfEqual {33}
	024 Move W8, [X0+24]
	025 Compare W8, 0
	026 JumpIfEqual {34}
	027 Move [X0+32], W19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0
	033 Call 0x1C17F20
	034 Call 0x1C17F28

Method: System.Boolean TryWriteBytes(System.Span`1<System.Byte> destination, System.UInt32 value)

Disassembly:
	0x03317E24 LDR W9, [X8 + 0xE0]
	0x03317E28 CBNZ W9, 0x3317E34
	0x03317E2C MOV X0, X8
	0x03317E30 BL 0x1C16DFC
	0x03317E34 MOV X0, X21
	0x03317E38 MOV X1, X20
	0x03317E3C MOV X2, X19
	0x03317E40 LDP X20, X19, [X31 + 0x20]
	0x03317E44 LDP X22, X21, [X31 + 0x10]
	0x03317E48 LDR X30, [X31], #0x30
	0x03317E4C B 0x3317AA4
	0x03317E50 STRB W31, [X19]
	0x03317E54 LDP X20, X19, [X31 + 0x20]
	0x03317E58 LDP X22, X21, [X31 + 0x10]
	0x03317E5C MOV W0, W31
	0x03317E60 LDR X30, [X31], #0x30
	0x03317E64 RET
	0x03317E68 STR X30, [X31 - 0x50]!
	0x03317E6C STP X26, X25, [X31 + 0x10]
	0x03317E70 STP X24, X23, [X31 + 0x20]
	0x03317E74 STP X22, X21, [X31 + 0x30]
	0x03317E78 STP X20, X19, [X31 + 0x40]
	0x03317E7C ADRP X21, 0x10C5000
	0x03317E80 LDRB W8, [X21 + 0xBA3]
	0x03317E84 MOV X20, X1
	0x03317E88 MOV X19, X0
	0x03317E8C TBNZ X8, 0x0, 0x3317EBC
	0x03317E90 ADRP X0, 0xDDE000
	0x03317E94 LDR X0, [X0 + 0x170]
	0x03317E98 BL 0x1C16CF4
	0x03317E9C ADRP X0, 0xE0F000
	0x03317EA0 LDR X0, [X0 + 0xD90]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x10C6000
	007 Move W8, [X22+2964]
	008 Move W20, W2
	009 Move X19, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xE0B000
	016 Move X0, [X0+2096]
	017 Call 0x1C17CF4
	018 Move X0, 0xE0C000
	019 Move X0, [X0+2344]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2964], W8
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X8, 0xE0B000
	025 Move X8, [X8+2096]
	026 Move X0, X21
	027 Move X1, X19
	028 Move X2, [X8]
	029 Call 0x2219CF4, X0
	030 Move [X0], W20
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 NotImplemented "Instruction CSET not yet implemented."
	037 Move X30, [X31+48]
	038 Return X0

Method: System.Byte[] GetBytes(System.UInt64 value)

Disassembly:
	0x03317EA4 BL 0x1C16CF4
	0x03317EA8 ADRP X0, 0xE0B000
	0x03317EAC LDR X0, [X0 + 0x28]
	0x03317EB0 BL 0x1C16CF4
	0x03317EB4 MOVZ W8, 0x1
	0x03317EB8 STRB W8, [X21 + 0xBA3]
	0x03317EBC ADRP X24, 0xDDE000
	0x03317EC0 LDR X24, [X24 + 0x170]
	0x03317EC4 SUBS W23, W20, 0x1
	0x03317EC8 B.LT 0x3317F10
	0x03317ECC MOV X22, X31
	0x03317ED0 AND X25, X20, 0x0
	0x03317ED4 LDR X0, [X24]
	0x03317ED8 LDRH W21, [X19, X22, LSL #1]
	0x03317EDC LDR W8, [X0 + 0xE0]
	0x03317EE0 CBNZ W8, 0x3317EE8
	0x03317EE4 BL 0x1C16DFC
	0x03317EE8 MOV W0, W21
	0x03317EEC BL 0x3317FCC
	0x03317EF0 TBNZ X0, 0x0, 0x3317EFC
	0x03317EF4 LDRH W8, [X19, X22, LSL #1]
	0x03317EF8 CBNZ W8, 0x3317F14
	0x03317EFC ADD X22, X22, 0x1
	0x03317F00 CMP X25, X22
	0x03317F04 B.NE 0x3317ED4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x10C6000
	006 Move X21, 0xDDD000
	007 Move W8, [X20+2965]
	008 Move X21, [X21+1560]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDDD000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2965], W8
	019 Move X0, [X21]
	020 Move W1, 8
	021 Call 0x1C17D6C
	022 Compare X0, 0
	023 JumpIfEqual {33}
	024 Move W8, [X0+24]
	025 Compare W8, 0
	026 JumpIfEqual {34}
	027 Move [X0+32], X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0
	033 Call 0x1C17F20
	034 Call 0x1C17F28

Method: System.Int16 ToInt16(System.Byte[] value, System.Int32 startIndex)

Disassembly:
	0x03317F08 MOV W22, W20
	0x03317F0C B 0x3317F14
	0x03317F10 MOV W22, W31
	0x03317F14 CMP W23, W22
	0x03317F18 B.LT 0x3317F6C
	0x03317F1C SXTW X25, W23
	0x03317F20 AND X26, X20, 0x0
	0x03317F24 SUB W23, W22, 0x1
	0x03317F28 CMP X25, X26
	0x03317F2C B.CS 0x3317FC8
	0x03317F30 LDR X0, [X24]
	0x03317F34 LDRH W21, [X19, X25, LSL #1]
	0x03317F38 LDR W8, [X0 + 0xE0]
	0x03317F3C CBNZ W8, 0x3317F44
	0x03317F40 BL 0x1C16DFC
	0x03317F44 MOV W0, W21
	0x03317F48 BL 0x3317FCC
	0x03317F4C TBNZ X0, 0x0, 0x3317F58
	0x03317F50 LDRH W8, [X19, X25, LSL #1]
	0x03317F54 CBNZ W8, 0x3317F68
	0x03317F58 SUB X25, X25, 0x1
	0x03317F5C CMP W25, W22
	0x03317F60 B.GE 0x3317F28
	0x03317F64 B 0x3317F6C
	0x03317F68 MOV W23, W25
	0x03317F6C ADRP X8, 0xE0F000
	0x03317F70 LDR X8, [X8 + 0xD90]
	0x03317F74 SUB W9, W23, W22
	0x03317F78 LDR X21, [X8]
	0x03317F7C SUBS W8, W20, W22
	0x03317F80 ADD W20, W9, 0x1
	0x03317F84 B.CC 0x3317F90
	0x03317F88 CMP W8, W20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X0, 0
	005 JumpIfEqual {29}
	006 Move W8, [X0+24]
	007 Move W19, W1
	008 Move X20, X0
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move W0, 14
	011 Move W1, 22
	012 Move X2, X31
	013 Call ThrowHelper.ThrowArgumentOutOfRangeException, X0, X1
	014 Move W8, [X20+24]
	015 Subtract W9, W8, 2
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, 5
	018 Move W1, 15
	019 Move X2, X31
	020 Call ThrowHelper.ThrowArgumentException, X0, X1
	021 Move W8, [X20+24]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Add X8, X20, W19
	024 NotImplemented "Instruction LDRH not yet implemented."
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return X0
	029 Move W0, 15
	030 Move X1, X31
	031 Call ThrowHelper.ThrowArgumentNullException, X0
	032 Call 0x1C17F20
	033 Call 0x1C17F28

Method: System.Int32 ToInt32(System.Byte[] value, System.Int32 startIndex)

Disassembly:
	0x03317F8C B.CS 0x3317F98
	0x03317F90 MOV X0, X31
	0x03317F94 BL 0x339D6EC
	0x03317F98 LDR X0, [X21 + 0x20]
	0x03317F9C LDRB W8, [X0 + 0x135]
	0x03317FA0 TBNZ X8, 0x0, 0x3317FA8
	0x03317FA4 BL 0x1C5C684
	0x03317FA8 ADD X0, X19, W22, 0x1, SXTW
	0x03317FAC MOV W1, W20
	0x03317FB0 LDP X20, X19, [X31 + 0x40]
	0x03317FB4 LDP X22, X21, [X31 + 0x30]
	0x03317FB8 LDP X24, X23, [X31 + 0x20]
	0x03317FBC LDP X26, X25, [X31 + 0x10]
	0x03317FC0 LDR X30, [X31], #0x50
	0x03317FC4 RET
	0x03317FC8 BL 0x1C16F28
	0x03317FCC STP X30, X21, [X31 - 0x20]!
	0x03317FD0 STP X20, X19, [X31 + 0x10]
	0x03317FD4 ADRP X21, 0x10C5000
	0x03317FD8 ADRP X20, 0xDDE000
	0x03317FDC LDRB W8, [X21 + 0xBCE]
	0x03317FE0 LDR X20, [X20 + 0x170]
	0x03317FE4 MOV W19, W0
	0x03317FE8 TBNZ X8, 0x0, 0x3318000
	0x03317FEC ADRP X0, 0xDDE000
	0x03317FF0 LDR X0, [X0 + 0x170]
	0x03317FF4 BL 0x1C16CF4
	0x03317FF8 MOVZ W8, 0x1
	0x03317FFC STRB W8, [X21 + 0xBCE]
	0x03318000 LDR X0, [X20]
	0x03318004 LDR W8, [X0 + 0xE0]
	0x03318008 CBNZ W8, 0x3318010
	0x0331800C BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X0, 0
	005 JumpIfEqual {29}
	006 Move W8, [X0+24]
	007 Move W19, W1
	008 Move X20, X0
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move W0, 14
	011 Move W1, 22
	012 Move X2, X31
	013 Call ThrowHelper.ThrowArgumentOutOfRangeException, X0, X1
	014 Move W8, [X20+24]
	015 Subtract W9, W8, 4
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, 5
	018 Move W1, 15
	019 Move X2, X31
	020 Call ThrowHelper.ThrowArgumentException, X0, X1
	021 Move W8, [X20+24]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Add X8, X20, W19
	024 Move W0, [X8+32]
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return X0
	029 Move W0, 15
	030 Move X1, X31
	031 Call ThrowHelper.ThrowArgumentNullException, X0
	032 Call 0x1C17F20
	033 Call 0x1C17F28

Method: System.Int32 ToInt32(System.ReadOnlySpan`1<System.Byte> value)

Disassembly:
	0x03318010 AND W8, W19, 0xFFFF
	0x03318014 CMP W8, 0xFF
	0x03318018 B.HI 0x3318040
	0x0331801C LDR X0, [X20]
	0x03318020 LDR W8, [X0 + 0xE0]
	0x03318024 CBNZ W8, 0x331802C
	0x03318028 BL 0x1C16DFC
	0x0331802C AND W8, W19, 0xFFFF
	0x03318030 CMP W8, 0x20
	0x03318034 B.NE 0x3318054
	0x03318038 MOVZ W0, 0x1
	0x0331803C B 0x3318078
	0x03318040 MOV W0, W19
	0x03318044 LDP X20, X19, [X31 + 0x10]
	0x03318048 MOV X1, X31
	0x0331804C LDP X30, X21, [X31], #0x20
	0x03318050 B 0x330363C
	0x03318054 SUB W9, W8, 0x9
	0x03318058 CMP W9, 0x5
	0x0331805C CSET W9, CC
	0x03318060 CMP W8, 0xA0
	0x03318064 CSET W10, EQ
	0x03318068 CMP W8, 0x85
	0x0331806C ORR W8, W10, W9, 0x0
	0x03318070 CSET W9, EQ
	0x03318074 ORR W0, W9, W8, 0x0
	0x03318078 LDP X20, X19, [X31 + 0x10]
	0x0331807C LDP X30, X21, [X31], #0x20
	0x03318080 RET
	0x03318084 MOVZ W0, 0x3

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10C5000
	006 Move W8, [X21+2966]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xE0F000
	014 Move X0, [X0+3536]
	015 Call 0x1C17CF4
	016 Move X0, 0xE0B000
	017 Move X0, [X0+2752]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2966], W8
	021 Move X21, 0xE0F000
	022 Move X21, [X21+3536]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move W0, 15
	025 Move X1, X31
	026 Call ThrowHelper.ThrowArgumentOutOfRangeException, X0
	027 Move X2, [X21]
	028 Move X0, X20
	029 Move X1, X19
	030 Call 0x2219CF0, X0
	031 Move W0, [X0]
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return X0

Method: System.Int64 ToInt64(System.Byte[] value, System.Int32 startIndex)

Disassembly:
	0x03318088 RET
	0x0331808C LDRB W8, [X0]
	0x03318090 CMP W8, 0x0
	0x03318094 CSET W0, NE
	0x03318098 RET
	0x0331809C STR X30, [X31 - 0x20]!
	0x033180A0 STP X20, X19, [X31 + 0x10]
	0x033180A4 ADRP X0, 0xE10000
	0x033180A8 LDR X0, [X0 + 0x30]
	0x033180AC BL 0x1C16D08
	0x033180B0 MOV X19, X0
	0x033180B4 ADRP X0, 0xE0D000
	0x033180B8 LDR X0, [X0 + 0xA8]
	0x033180BC BL 0x1C16D08
	0x033180C0 MOV X20, X0
	0x033180C4 ADRP X0, 0xE0D000
	0x033180C8 LDR X0, [X0 + 0xE0]
	0x033180CC BL 0x1C16D08
	0x033180D0 MOV X2, X0
	0x033180D4 MOV X0, X19
	0x033180D8 MOV X1, X20
	0x033180DC MOV X3, X31
	0x033180E0 BL 0x320A264
	0x033180E4 MOV X19, X0
	0x033180E8 ADRP X0, 0xDE3000
	0x033180EC LDR X0, [X0 + 0xC08]
	0x033180F0 BL 0x1C16D08
	0x033180F4 BL 0x1C16F10
	0x033180F8 MOV X1, X19
	0x033180FC MOV X2, X31
	0x03318100 MOV X20, X0
	0x03318104 BL 0x337B498
	0x03318108 ADRP X0, 0xE10000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X0, 0
	005 JumpIfEqual {29}
	006 Move W8, [X0+24]
	007 Move W19, W1
	008 Move X20, X0
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move W0, 14
	011 Move W1, 22
	012 Move X2, X31
	013 Call ThrowHelper.ThrowArgumentOutOfRangeException, X0, X1
	014 Move W8, [X20+24]
	015 Subtract W9, W8, 8
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, 5
	018 Move W1, 15
	019 Move X2, X31
	020 Call ThrowHelper.ThrowArgumentException, X0, X1
	021 Move W8, [X20+24]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Add X8, X20, W19
	024 Move X0, [X8+32]
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return X0
	029 Move W0, 15
	030 Move X1, X31
	031 Call ThrowHelper.ThrowArgumentNullException, X0
	032 Call 0x1C17F20
	033 Call 0x1C17F28

Method: System.UInt16 ToUInt16(System.Byte[] value, System.Int32 startIndex)

Disassembly:
	0x0331810C LDR X0, [X0 + 0x38]

ISIL:
	001 Call BitConverter.ToInt16, X0, X1
	002 Return X0

Method: System.UInt32 ToUInt32(System.Byte[] value, System.Int32 startIndex)

Disassembly:
	0x03318110 BL 0x1C16D08

ISIL:
	001 Call BitConverter.ToInt32, X0, X1
	002 Return X0

Method: System.UInt64 ToUInt64(System.Byte[] value, System.Int32 startIndex)

Disassembly:
	0x03318114 MOV X1, X0

ISIL:
	001 Call BitConverter.ToInt64, X0, X1
	002 Return X0

Method: System.Single ToSingle(System.Byte[] value, System.Int32 startIndex)

Disassembly:
	0x03318118 MOV X0, X20
	0x0331811C BL 0x1C16DEC
	0x03318120 STP X30, X21, [X31 - 0x20]!
	0x03318124 STP X20, X19, [X31 + 0x10]
	0x03318128 ADRP X21, 0x10C4000

ISIL:
	001 Move [X31-16], X30
	002 Call BitConverter.ToInt32, X0, X1
	003 Move S0, W0
	004 Move X30, [X31+16]
	005 Return V0

Method: System.Double ToDouble(System.Byte[] value, System.Int32 startIndex)

Disassembly:
	0x0331812C ADRP X20, 0xDE4000
	0x03318130 LDRB W8, [X21 + 0xBA4]
	0x03318134 LDR X20, [X20 + 0x9E8]
	0x03318138 MOV X19, X0
	0x0331813C TBNZ X8, 0x0, 0x3318154

ISIL:
	001 Move [X31-16], X30
	002 Call BitConverter.ToInt64, X0, X1
	003 Move D0, X0
	004 Move X30, [X31+16]
	005 Return V0

Method: System.String ToString(System.Byte[] value, System.Int32 startIndex, System.Int32 length)

Disassembly:
	0x03318140 ADRP X0, 0xDE4000
	0x03318144 LDR X0, [X0 + 0x9E8]
	0x03318148 BL 0x1C16CF4
	0x0331814C MOVZ W8, 0x1
	0x03318150 STRB W8, [X21 + 0xBA4]
	0x03318154 LDR X0, [X20]
	0x03318158 LDRB W19, [X19]
	0x0331815C LDR W8, [X0 + 0xE0]
	0x03318160 CBNZ W8, 0x3318168
	0x03318164 BL 0x1C16DFC
	0x03318168 CMP W19, 0x0
	0x0331816C LDP X20, X19, [X31 + 0x10]
	0x03318170 CSET W0, NE
	0x03318174 LDP X30, X21, [X31], #0x20
	0x03318178 RET
	0x0331817C AND W0, W0, 0x1
	0x03318180 RET
	0x03318184 STP X30, X21, [X31 - 0x20]!
	0x03318188 STP X20, X19, [X31 + 0x10]
	0x0331818C ADRP X21, 0x10C4000
	0x03318190 ADRP X20, 0xDE4000
	0x03318194 LDRB W8, [X21 + 0xBA5]
	0x03318198 LDR X20, [X20 + 0x9E8]
	0x0331819C MOV X19, X0
	0x033181A0 TBNZ X8, 0x0, 0x33181B8
	0x033181A4 ADRP X0, 0xDE4000
	0x033181A8 LDR X0, [X0 + 0x9E8]
	0x033181AC BL 0x1C16CF4
	0x033181B0 MOVZ W8, 0x1
	0x033181B4 STRB W8, [X21 + 0xBA5]
	0x033181B8 LDR X0, [X20]
	0x033181BC LDRB W19, [X19]
	0x033181C0 LDR W8, [X0 + 0xE0]
	0x033181C4 CBNZ W8, 0x33181CC
	0x033181C8 BL 0x1C16DFC
	0x033181CC CMP W19, 0x0
	0x033181D0 LDP X20, X19, [X31 + 0x10]
	0x033181D4 CSET W0, NE
	0x033181D8 LDP X30, X21, [X31], #0x20
	0x033181DC RET
	0x033181E0 AND W0, W0, 0x1
	0x033181E4 RET
	0x033181E8 STP X30, X21, [X31 - 0x20]!
	0x033181EC STP X20, X19, [X31 + 0x10]
	0x033181F0 ADRP X21, 0x10C4000
	0x033181F4 ADRP X20, 0xDE4000
	0x033181F8 LDRB W8, [X21 + 0xBA6]
	0x033181FC LDR X20, [X20 + 0x9E8]
	0x03318200 MOV X19, X0
	0x03318204 TBNZ X8, 0x0, 0x331821C
	0x03318208 ADRP X0, 0xDE4000
	0x0331820C LDR X0, [X0 + 0x9E8]
	0x03318210 BL 0x1C16CF4
	0x03318214 MOVZ W8, 0x1
	0x03318218 STRB W8, [X21 + 0xBA6]
	0x0331821C LDR X0, [X20]
	0x03318220 LDRB W19, [X19]
	0x03318224 LDR W8, [X0 + 0xE0]
	0x03318228 CBNZ W8, 0x3318230
	0x0331822C BL 0x1C16DFC
	0x03318230 CMP W19, 0x0
	0x03318234 LDP X20, X19, [X31 + 0x10]
	0x03318238 CSET W0, NE
	0x0331823C LDP X30, X21, [X31], #0x20
	0x03318240 RET
	0x03318244 AND W0, W0, 0x1
	0x03318248 RET
	0x0331824C STP X30, X21, [X31 - 0x20]!
	0x03318250 STP X20, X19, [X31 + 0x10]
	0x03318254 ADRP X21, 0x10C4000
	0x03318258 ADRP X20, 0xDE4000
	0x0331825C LDRB W8, [X21 + 0xBA7]
	0x03318260 LDR X20, [X20 + 0x9E8]
	0x03318264 MOV X19, X0
	0x03318268 TBNZ X8, 0x0, 0x3318280
	0x0331826C ADRP X0, 0xDE4000
	0x03318270 LDR X0, [X0 + 0x9E8]
	0x03318274 BL 0x1C16CF4
	0x03318278 MOVZ W8, 0x1
	0x0331827C STRB W8, [X21 + 0xBA7]
	0x03318280 LDR X0, [X20]
	0x03318284 LDRB W19, [X19]
	0x03318288 LDR W8, [X0 + 0xE0]
	0x0331828C CBNZ W8, 0x3318294
	0x03318290 BL 0x1C16DFC
	0x03318294 CMP W19, 0x0
	0x03318298 LDP X20, X19, [X31 + 0x10]
	0x0331829C CSET W0, NE
	0x033182A0 LDP X30, X21, [X31], #0x20
	0x033182A4 RET
	0x033182A8 AND W0, W0, 0x1
	0x033182AC RET
	0x033182B0 STP X30, X21, [X31 - 0x20]!
	0x033182B4 STP X20, X19, [X31 + 0x10]
	0x033182B8 ADRP X21, 0x10C4000
	0x033182BC ADRP X20, 0xDE4000
	0x033182C0 LDRB W8, [X21 + 0xBA8]
	0x033182C4 LDR X20, [X20 + 0x9E8]
	0x033182C8 MOV X19, X0
	0x033182CC TBNZ X8, 0x0, 0x33182E4
	0x033182D0 ADRP X0, 0xDE4000
	0x033182D4 LDR X0, [X0 + 0x9E8]
	0x033182D8 BL 0x1C16CF4
	0x033182DC MOVZ W8, 0x1
	0x033182E0 STRB W8, [X21 + 0xBA8]
	0x033182E4 LDR X0, [X20]
	0x033182E8 LDRB W19, [X19]
	0x033182EC LDR W8, [X0 + 0xE0]
	0x033182F0 CBNZ W8, 0x33182F8
	0x033182F4 BL 0x1C16DFC
	0x033182F8 CMP W19, 0x0
	0x033182FC LDP X20, X19, [X31 + 0x10]
	0x03318300 CSET W0, NE
	0x03318304 LDP X30, X21, [X31], #0x20
	0x03318308 RET
	0x0331830C AND W0, W0, 0x1
	0x03318310 RET
	0x03318314 STP X30, X21, [X31 - 0x20]!
	0x03318318 STP X20, X19, [X31 + 0x10]
	0x0331831C ADRP X21, 0x10C4000
	0x03318320 ADRP X20, 0xDE4000
	0x03318324 LDRB W8, [X21 + 0xBA9]
	0x03318328 LDR X20, [X20 + 0x9E8]
	0x0331832C MOV X19, X0
	0x03318330 TBNZ X8, 0x0, 0x3318348
	0x03318334 ADRP X0, 0xDE4000
	0x03318338 LDR X0, [X0 + 0x9E8]
	0x0331833C BL 0x1C16CF4
	0x03318340 MOVZ W8, 0x1
	0x03318344 STRB W8, [X21 + 0xBA9]
	0x03318348 LDR X0, [X20]
	0x0331834C LDRB W19, [X19]
	0x03318350 LDR W8, [X0 + 0xE0]
	0x03318354 CBNZ W8, 0x331835C
	0x03318358 BL 0x1C16DFC
	0x0331835C CMP W19, 0x0
	0x03318360 LDP X20, X19, [X31 + 0x10]
	0x03318364 CSET W0, NE
	0x03318368 LDP X30, X21, [X31], #0x20
	0x0331836C RET
	0x03318370 AND W0, W0, 0x1
	0x03318374 RET
	0x03318378 STP X30, X21, [X31 - 0x20]!
	0x0331837C STP X20, X19, [X31 + 0x10]
	0x03318380 ADRP X21, 0x10C4000
	0x03318384 ADRP X20, 0xDE4000
	0x03318388 LDRB W8, [X21 + 0xBAA]
	0x0331838C LDR X20, [X20 + 0x9E8]
	0x03318390 MOV X19, X0
	0x03318394 TBNZ X8, 0x0, 0x33183AC
	0x03318398 ADRP X0, 0xDE4000
	0x0331839C LDR X0, [X0 + 0x9E8]
	0x033183A0 BL 0x1C16CF4
	0x033183A4 MOVZ W8, 0x1
	0x033183A8 STRB W8, [X21 + 0xBAA]
	0x033183AC LDR X0, [X20]
	0x033183B0 LDRB W19, [X19]
	0x033183B4 LDR W8, [X0 + 0xE0]
	0x033183B8 CBNZ W8, 0x33183C0
	0x033183BC BL 0x1C16DFC
	0x033183C0 CMP W19, 0x0
	0x033183C4 LDP X20, X19, [X31 + 0x10]
	0x033183C8 CSET W0, NE
	0x033183CC LDP X30, X21, [X31], #0x20
	0x033183D0 RET
	0x033183D4 AND X0, X0, 0x1
	0x033183D8 RET
	0x033183DC STP X30, X21, [X31 - 0x20]!
	0x033183E0 STP X20, X19, [X31 + 0x10]
	0x033183E4 ADRP X21, 0x10C4000
	0x033183E8 ADRP X20, 0xDE4000
	0x033183EC LDRB W8, [X21 + 0xBAB]
	0x033183F0 LDR X20, [X20 + 0x9E8]
	0x033183F4 MOV X19, X0
	0x033183F8 TBNZ X8, 0x0, 0x3318410
	0x033183FC ADRP X0, 0xDE4000
	0x03318400 LDR X0, [X0 + 0x9E8]
	0x03318404 BL 0x1C16CF4
	0x03318408 MOVZ W8, 0x1
	0x0331840C STRB W8, [X21 + 0xBAB]
	0x03318410 LDR X0, [X20]
	0x03318414 LDRB W19, [X19]
	0x03318418 LDR W8, [X0 + 0xE0]
	0x0331841C CBNZ W8, 0x3318424
	0x03318420 BL 0x1C16DFC

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X22, 0x10C5000
	011 Move W8, [X22+2967]
	012 Move W19, W2
	013 Move W20, W1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {39}
	019 Move X0, 0xE10000
	020 Move X0, [X0+4016]
	021 Call 0x1C17CF4
	022 Move X0, 0xE10000
	023 Move X0, [X0+4024]
	024 Call 0x1C17CF4
	025 Move X0, 0xDDE000
	026 Move X0, [X0+632]
	027 Call 0x1C17CF4
	028 Move X0, 0xE10000
	029 Move X0, [X0+4032]
	030 Call 0x1C17CF4
	031 Move X0, 0xE10000
	032 Move X0, [X0+4040]
	033 Call 0x1C17CF4
	034 Move X0, 0xE10000
	035 Move X0, [X0+4048]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X22+2967], W8
	039 Compare X21, 0
	040 JumpIfEqual {146}
	041 Move TEMP, X20
	042 And TEMP, TEMP, -2147483648
	043 Compare TEMP, -2147483648
	044 JumpIfEqual {49}
	045 Compare W20, 0
	046 JumpIfEqual {59}
	047 Move W8, [X21+24]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move W0, 14
	050 Move W1, 22
	051 Move X2, X31
	052 Call ThrowHelper.ThrowArgumentOutOfRangeException, X0, X1
	053 Move TEMP, X19
	054 And TEMP, TEMP, -2147483648
	055 Compare TEMP, -2147483648
	056 JumpIfEqual {162}
	057 Compare X21, 0
	058 JumpIfNotEqual {63}
	059 Move TEMP, X19
	060 And TEMP, TEMP, -2147483648
	061 Compare TEMP, -2147483648
	062 JumpIfEqual {162}
	063 Move W8, [X21+24]
	064 Subtract W8, W8, W19
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move W0, 5
	067 Move W1, 15
	068 Move X2, X31
	069 Call ThrowHelper.ThrowArgumentException, X0, X1
	070 Compare W19, 0
	071 JumpIfEqual {131}
	072 Move W8, 0xAAAA
	073 NotImplemented "Instruction MOVK not yet implemented."
	074 Or W9, W8, 1
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move X8, 0xE10000
	077 Move X8, [X8+4048]
	078 Move X24, 0xE10000
	079 Add X0, X31, 0
	080 Move X1, X21
	081 Move X4, [X8]
	082 Move X24, [X24+4040]
	083 Move W2, W20
	084 Move W3, W19
	085 Move [X31], X31
	086 Move [X31+8], X31
	087 Call ValueTuple`3<Object, Int32, Int32>..ctor, X0, X1, X2, X3
	088 Move X0, [X24]
	089 Move W8, [X0+224]
	090 Compare W8, 0
	091 JumpIfNotEqual {94}
	092 Call 0x1C17DFC
	093 Move X0, [X24]
	094 Move X8, [X0+184]
	095 Move X25, 0xE10000
	096 Move X20, [X31]
	097 Move X21, [X31+8]
	098 Move X22, [X8+8]
	099 Move X25, [X25+4024]
	100 Add W8, W19, W19
	101 Subtract W19, W8, 1
	102 Compare X22, 0
	103 JumpIfNotEqual {125}
	104 Move W8, [X0+224]
	105 Compare W8, 0
	106 JumpIfNotEqual {109}
	107 Call 0x1C17DFC
	108 Move X0, [X24]
	109 Move X9, 0xE10000
	110 Move X8, [X0+184]
	111 Move X9, [X9+4016]
	112 Move X23, [X8]
	113 Move X0, [X9]
	114 Call 0x1C17F10
	115 Move X8, 0xE10000
	116 Move X8, [X8+4032]
	117 Move X1, X23
	118 Move X3, X31
	119 Move X22, X0
	120 Move X2, [X8]
	121 Call 0x25FBB7C, X0, X1, X2
	122 Move X8, [X24]
	123 Move X8, [X8+184]
	124 Move [X8+8], X22
	125 Move X4, [X25]
	126 Move W0, W19
	127 Move X1, X20
	128 Move X2, X21
	129 Move X3, X22
	130 Call 0x226BF24, X0, X1, X2
	131 Move X8, 0xDDE000
	132 Move X8, [X8+632]
	133 Move X8, [X8]
	134 Move X8, [X8+184]
	135 Move X0, [X8]
	136 Move X20, [X31+64]
	137 Move X19, [X31+72]
	138 Move X22, [X31+48]
	139 Move X21, [X31+56]
	140 Move X24, [X31+32]
	141 Move X23, [X31+40]
	142 Move X30, [X31+16]
	143 Move X25, [X31+24]
	144 Add X31, X31, 80
	145 Return X0
	146 Move W0, 15
	147 Move X1, X31
	148 Call ThrowHelper.ThrowArgumentNullException, X0
	149 Move TEMP, X20
	150 And TEMP, TEMP, -2147483648
	151 Compare TEMP, -2147483648
	152 JumpIfNotEqual {161}
	153 Move W0, 14
	154 Move W1, 22
	155 Move X2, X31
	156 Call ThrowHelper.ThrowArgumentOutOfRangeException, X0, X1
	157 Move TEMP, X19
	158 And TEMP, TEMP, -2147483648
	159 Compare TEMP, -2147483648
	160 JumpIfEqual {162}
	161 Call 0x1C17F20
	162 Move X0, 0xDE4000
	163 Move X0, [X0+1888]
	164 Call 0x1C17D08
	165 Call 0x1C17F10
	166 Move X19, X0
	167 Move X0, 0xDE4000
	168 Move X0, [X0+1896]
	169 Call 0x1C17D08
	170 Move X20, X0
	171 Move X0, 0xE0B000
	172 Move X0, [X0+1360]
	173 Call 0x1C17D08
	174 Move X2, X0
	175 Move X0, X19
	176 Move X1, X20
	177 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	178 Move X0, 0xE10000
	179 Move X0, [X0+4056]
	180 Call 0x1C17D08
	181 Move X1, X0
	182 Move X0, X19
	183 Call 0x1C17DEC
	184 Move [X31], W8
	185 Move X0, 0xDDC000
	186 Move X0, [X0+1880]
	187 Call 0x1C17D08
	188 Add X1, X31, 0
	189 Call 0x1C17E04
	190 Move X19, X0
	191 Move X0, 0xE10000
	192 Move X0, [X0+4064]
	193 Call 0x1C17D08
	194 Move X1, X19
	195 Move X2, X31
	196 Call SR.Format, X0, X1
	197 Move X19, X0
	198 Move X0, 0xDE4000
	199 Move X0, [X0+1888]
	200 Call 0x1C17D08
	201 Call 0x1C17F10
	202 Move X20, X0
	203 Move X0, 0xDE4000
	204 Move X0, [X0+1896]
	205 Call 0x1C17D08
	206 Move X1, X0
	207 Move X0, X20
	208 Move X2, X19
	209 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	210 Move X0, 0xE10000
	211 Move X0, [X0+4056]
	212 Call 0x1C17D08
	213 Move X1, X0
	214 Move X0, X20
	215 Call 0x1C17DEC

Method: System.String ToString(System.Byte[] value)

Disassembly:
	0x03318424 CMP W19, 0x0
	0x03318428 LDP X20, X19, [X31 + 0x10]
	0x0331842C CSET W0, NE
	0x03318430 LDP X30, X21, [X31], #0x20
	0x03318434 RET
	0x03318438 AND X0, X0, 0x1
	0x0331843C RET
	0x03318440 STP X30, X21, [X31 - 0x20]!
	0x03318444 STP X20, X19, [X31 + 0x10]
	0x03318448 ADRP X21, 0x10C4000

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {9}
	004 Move W2, [X0+24]
	005 Move W1, W31
	006 Move X30, [X31+16]
	007 Call BitConverter.ToString, X0, X1, X2
	008 Return X0
	009 Move W0, 15
	010 Move X1, X31
	011 Call ThrowHelper.ThrowArgumentNullException, X0
	012 Call 0x1C17F20

Method: System.Int64 DoubleToInt64Bits(System.Double value)

Disassembly:
	0x0331844C ADRP X20, 0xDE4000
	0x03318450 LDRB W8, [X21 + 0xBAC]

ISIL:
	001 Move X0, D0
	002 Return X0

Method: System.Double Int64BitsToDouble(System.Int64 value)

Disassembly:
	0x03318454 LDR X20, [X20 + 0x9E8]
	0x03318458 MOV X19, X0

ISIL:
	001 Move D0, X0
	002 Return V0

Method: System.Int32 SingleToInt32Bits(System.Single value)

Disassembly:
	0x0331845C TBNZ X8, 0x0, 0x3318474
	0x03318460 ADRP X0, 0xDE4000

ISIL:
	001 Move W0, S0
	002 Return X0

Method: System.Single Int32BitsToSingle(System.Int32 value)

Disassembly:
	0x03318464 LDR X0, [X0 + 0x9E8]
	0x03318468 BL 0x1C16CF4

ISIL:
	001 Move S0, W0
	002 Return V0

Method: System.Void .cctor()

Disassembly:
	0x0331846C MOVZ W8, 0x1
	0x03318470 STRB W8, [X21 + 0xBAC]
	0x03318474 LDR X0, [X20]
	0x03318478 LDRB W19, [X19]
	0x0331847C LDR W8, [X0 + 0xE0]
	0x03318480 CBNZ W8, 0x3318488
	0x03318484 BL 0x1C16DFC
	0x03318488 CMP W19, 0x0
	0x0331848C LDP X20, X19, [X31 + 0x10]
	0x03318490 FMOV S0, 1
	0x03318494 FMOV S1, W31
	0x03318498 FCSEL S0, S1, S0, EQ
	0x0331849C LDP X30, X21, [X31], #0x20
	0x033184A0 RET
	0x033184A4 ANDS W31, W0, 0x1
	0x033184A8 FMOV S0, W31
	0x033184AC FMOV S1, 1
	0x033184B0 FCSEL S0, S1, S0, NE
	0x033184B4 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x10C5000
	005 Move X20, 0xE10000
	006 Move W8, [X19+2968]
	007 Move X20, [X20+4072]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE10000
	013 Move X0, [X0+4072]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+2968], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move W9, 1
	021 Move X8, [X8+184]
	022 Move [X8], W9
	023 Move X30, [X31+32]
	024 Return 

