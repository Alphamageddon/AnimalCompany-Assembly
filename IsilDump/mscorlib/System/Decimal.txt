Type: System.Decimal

Method: System.UInt32 get_High()

Disassembly:
	0x033D7050 LDP X20, X19, [X31 + 0x20]
	0x033D7054 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move W0, [X0+4]
	002 Return X0

Method: System.UInt32 get_Low()

Disassembly:
	0x033D7058 LDR X30, [X31], #0x30
	0x033D705C RET

ISIL:
	001 Move W0, [X0+8]
	002 Return X0

Method: System.UInt32 get_Mid()

Disassembly:
	0x033D7060 SUB X31, X31, 0x50
	0x033D7064 STR X30, [X31 + 0x20]

ISIL:
	001 Move W0, [X0+12]
	002 Return X0

Method: System.Boolean get_IsNegative()

Disassembly:
	0x033D7068 STP X22, X21, [X31 + 0x30]
	0x033D706C STP X20, X19, [X31 + 0x40]
	0x033D7070 MRS X20, 0xC000

ISIL:
	001 Move W8, [X0]
	002 Move W0, W8
	003 ShiftRight W0, 31
	004 And W0, W0, 0x7FFFFFFF
	005 Return X0

Method: System.Int32 get_Scale()

Disassembly:
	0x033D7074 LDR X8, [X20 + 0x28]
	0x033D7078 ADRP X21, 0x1006000

ISIL:
	001 Move W0, [X0+2]
	002 Return X0

Method: System.UInt64 get_Low64()

Disassembly:
	0x033D707C ADRP X22, 0xD55000
	0x033D7080 MOV X19, X0
	0x033D7084 STR X8, [X31 + 0x18]
	0x033D7088 STP X1, X2, [X31 + 0x8]
	0x033D708C LDRB W8, [X21 + 0x317]
	0x033D7090 LDR X22, [X22 + 0xDE8]
	0x033D7094 TBNZ X8, 0x0, 0x33D70AC
	0x033D7098 ADRP X0, 0xD55000
	0x033D709C LDR X0, [X0 + 0xDE8]
	0x033D70A0 BL 0x1C16CF4
	0x033D70A4 MOVZ W8, 0x1
	0x033D70A8 STRB W8, [X21 + 0x317]
	0x033D70AC LDR X0, [X22]
	0x033D70B0 LDR W8, [X0 + 0xE0]
	0x033D70B4 CBNZ W8, 0x33D70BC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1007000
	005 Move W8, [X20+784]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xD45000
	012 Move X0, [X0+1520]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+784], W8
	016 Move X0, [X19+8]
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+32]
	020 Return X0

Method: System.Decimal/DecCalc AsMutable(ref System.Decimal d)

Disassembly:
	0x033D70B8 BL 0x1C16DFC

ISIL:
	001 Return X0

Method: System.UInt32 DecDivMod1E9(ref System.Decimal value)

Disassembly:
	0x033D70BC ADD X1, X31, 0x8
	0x033D70C0 MOV X0, X19
	0x033D70C4 BL 0x33D6F50
	0x033D70C8 LDR X8, [X20 + 0x28]
	0x033D70CC LDR X9, [X31 + 0x18]
	0x033D70D0 CMP X8, X9
	0x033D70D4 B.NE 0x33D70EC
	0x033D70D8 LDP X20, X19, [X31 + 0x40]
	0x033D70DC LDP X22, X21, [X31 + 0x30]
	0x033D70E0 LDR X30, [X31 + 0x20]
	0x033D70E4 ADD X31, X31, 0x50
	0x033D70E8 RET
	0x033D70EC BL 0x3EB1B20
	0x033D70F0 SUB X31, X31, 0x50
	0x033D70F4 STR X30, [X31 + 0x20]
	0x033D70F8 STP X22, X21, [X31 + 0x30]
	0x033D70FC STP X20, X19, [X31 + 0x40]
	0x033D7100 MRS X21, 0xC000
	0x033D7104 LDR X8, [X21 + 0x28]
	0x033D7108 ADRP X22, 0x1006000
	0x033D710C MOV X20, X1
	0x033D7110 MOV X19, X0
	0x033D7114 STR X8, [X31 + 0x18]
	0x033D7118 LDRB W8, [X22 + 0x318]
	0x033D711C TBNZ X8, 0x0, 0x33D7140
	0x033D7120 ADRP X0, 0xD55000
	0x033D7124 LDR X0, [X0 + 0xDE8]
	0x033D7128 BL 0x1C16CF4
	0x033D712C ADRP X0, 0xD44000
	0x033D7130 LDR X0, [X0 + 0x5F0]
	0x033D7134 BL 0x1C16CF4
	0x033D7138 MOVZ W8, 0x1
	0x033D713C STRB W8, [X22 + 0x318]
	0x033D7140 CBZ X20, 0x33D715C
	0x033D7144 ADRP X8, 0xD44000
	0x033D7148 LDR X8, [X8 + 0x5F0]
	0x033D714C LDR X9, [X20]
	0x033D7150 LDR X8, [X8]
	0x033D7154 CMP X9, X8
	0x033D7158 B.EQ 0x33D7164
	0x033D715C MOV W0, W31
	0x033D7160 B 0x33D71A0
	0x033D7164 MOV X0, X20
	0x033D7168 BL 0x1C16E08
	0x033D716C ADRP X8, 0xD55000
	0x033D7170 LDR V0, [X0]
	0x033D7174 LDR X8, [X8 + 0xDE8]
	0x033D7178 STR V0, [X31]
	0x033D717C LDR X0, [X8]
	0x033D7180 LDR W8, [X0 + 0xE0]
	0x033D7184 CBNZ W8, 0x33D718C
	0x033D7188 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1007000
	006 Move X20, 0xD45000
	007 Move W8, [X21+785]
	008 Move X20, [X20+1520]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xD56000
	015 Move X0, [X0+3560]
	016 Call 0x1C17CF4
	017 Move X0, 0xD45000
	018 Move X0, [X0+1520]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+785], W8
	022 Move X0, [X20]
	023 Move X20, 0xD56000
	024 Move W8, [X0+224]
	025 Move X20, [X20+3560]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, [X20]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move W11, [X19+8]
	035 Move W8, [X19+12]
	036 Move W9, [X19+4]
	037 Move X10, 0x5A53
	038 NotImplemented "Instruction MOVK not yet implemented."
	039 Move X13, X8
	040 NotImplemented "Instruction MOVK not yet implemented."
	041 NotImplemented "Instruction BFM not yet implemented."
	042 NotImplemented "Instruction MOVK not yet implemented."
	043 Move X9, X13
	044 ShiftRight X9, 9
	045 And X9, X9, 0x7FFFFFFF
	046 Move W12, 0x3600
	047 NotImplemented "Instruction INVALID not yet implemented."
	048 NotImplemented "Instruction MOVK not yet implemented."
	049 Move X13, X9
	050 ShiftRight X13, 11
	051 And X13, X13, 0x7FFFFFFF
	052 Move [X19+12], W13
	053 NotImplemented "Instruction MADD not yet implemented."
	054 Move X13, X11
	055 NotImplemented "Instruction BFM not yet implemented."
	056 Move X8, X9
	057 ShiftRight X8, 43
	058 And X8, X8, 0x7FFFFFFF
	059 Move X9, X13
	060 ShiftRight X9, 9
	061 And X9, X9, 0x7FFFFFFF
	062 NotImplemented "Instruction INVALID not yet implemented."
	063 Move X9, X9
	064 ShiftRight X9, 11
	065 And X9, X9, 0x7FFFFFFF
	066 Move [X19+4], W8
	067 Move [X19+8], W9
	068 Move X20, [X31+16]
	069 Move X19, [X31+24]
	070 NotImplemented "Instruction MADD not yet implemented."
	071 Move X30, [X31+32]
	072 Move X21, [X31+40]
	073 Return X0

Method: System.Void .ctor(System.Int32 value)

Disassembly:
	0x033D71F0 STP X1, X2, [X31 + 0x8]
	0x033D71F4 LDRB W8, [X21 + 0x319]
	0x033D71F8 LDR X22, [X22 + 0xDE8]
	0x033D71FC TBNZ X8, 0x0, 0x33D7214
	0x033D7200 ADRP X0, 0xD55000
	0x033D7204 LDR X0, [X0 + 0xDE8]
	0x033D7208 BL 0x1C16CF4
	0x033D720C MOVZ W8, 0x1
	0x033D7210 STRB W8, [X21 + 0x319]

ISIL:
	001 Move TEMP, X1
	002 And TEMP, TEMP, -2147483648
	003 Compare TEMP, -2147483648
	004 JumpIfEqual {6}
	005 Move [X0], W31
	006 Move W8, 0x80000000
	007 Subtract W1, W31, W1
	008 Move [X0], W8
	009 Move [X0+8], W1
	010 Move [X0+12], W31
	011 Move [X0+4], W31
	012 Return 

Method: System.Void .ctor(System.UInt32 value)

Disassembly:
	0x033D7214 LDR X0, [X22]
	0x033D7218 LDR W8, [X0 + 0xE0]
	0x033D721C CBNZ W8, 0x33D7224

ISIL:
	001 Move [X0+8], W1
	002 Move [X0+12], W31
	003 Move [X0], X31
	004 Return 

Method: System.Void .ctor(System.Int64 value)

Disassembly:
	0x033D7220 BL 0x1C16DFC
	0x033D7224 ADD X1, X31, 0x8
	0x033D7228 MOV X0, X19
	0x033D722C BL 0x33D6F50
	0x033D7230 LDR X8, [X20 + 0x28]
	0x033D7234 LDR X9, [X31 + 0x18]
	0x033D7238 CMP W0, 0x0
	0x033D723C CSET W0, EQ
	0x033D7240 CMP X8, X9

ISIL:
	001 Move TEMP, X1
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfEqual {6}
	005 Move [X0], W31
	006 Move W8, 0x80000000
	007 Subtract X1, X31, X1
	008 Move [X0], W8
	009 Move [X0+8], X1
	010 Move [X0+4], W31
	011 Return 

Method: System.Void .ctor(System.UInt64 value)

Disassembly:
	0x033D7244 B.NE 0x33D725C
	0x033D7248 LDP X20, X19, [X31 + 0x40]

ISIL:
	001 Move [X0], X31
	002 Move [X0+8], X1
	003 Return 

Method: System.Void .ctor(System.Single value)

Disassembly:
	0x033D724C LDP X22, X21, [X31 + 0x30]
	0x033D7250 LDR X30, [X31 + 0x20]
	0x033D7254 ADD X31, X31, 0x50
	0x033D7258 RET
	0x033D725C BL 0x3EB1B20
	0x033D7260 STP X30, X21, [X31 - 0x20]!
	0x033D7264 STP X20, X19, [X31 + 0x10]
	0x033D7268 ADRP X20, 0x1006000
	0x033D726C ADRP X21, 0xD55000
	0x033D7270 LDRB W8, [X20 + 0x31A]
	0x033D7274 LDR X21, [X21 + 0xDE8]
	0x033D7278 MOV X19, X0
	0x033D727C TBNZ X8, 0x0, 0x33D7294
	0x033D7280 ADRP X0, 0xD55000
	0x033D7284 LDR X0, [X0 + 0xDE8]
	0x033D7288 BL 0x1C16CF4
	0x033D728C MOVZ W8, 0x1
	0x033D7290 STRB W8, [X20 + 0x31A]
	0x033D7294 LDR X0, [X21]
	0x033D7298 LDR W8, [X0 + 0xE0]
	0x033D729C CBNZ W8, 0x33D72A4
	0x033D72A0 BL 0x1C16DFC
	0x033D72A4 MOV X0, X19
	0x033D72A8 LDP X20, X19, [X31 + 0x10]
	0x033D72AC LDP X30, X21, [X31], #0x20
	0x033D72B0 B 0x33D72B4
	0x033D72B4 SUB X31, X31, 0x30
	0x033D72B8 STP X30, X21, [X31 + 0x10]
	0x033D72BC STP X20, X19, [X31 + 0x20]
	0x033D72C0 ADRP X20, 0x1006000
	0x033D72C4 ADRP X21, 0xD44000
	0x033D72C8 LDRB W8, [X20 + 0x358]
	0x033D72CC LDR X21, [X21 + 0x5F0]
	0x033D72D0 MOV X19, X0

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1007000
	007 Move X20, 0xD45000
	008 Move W8, [X21+786]
	009 Move X20, [X20+1520]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xD56000
	017 Move X0, [X0+3560]
	018 Call 0x1C17CF4
	019 Move X0, 0xD45000
	020 Move X0, [X0+1520]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+786], W8
	024 Move X0, [X20]
	025 Move X20, 0xD56000
	026 Move W8, [X0+224]
	027 Move X20, [X20+3560]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, [X20]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X19
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X30, [X31+16]
	040 Move X21, [X31+24]
	041 Move V0, V8
	042 Move V8, [X31+48]

Method: System.Void .ctor(System.Double value)

Disassembly:
	0x033D76F0 LDP X22, X21, [X31 + 0x40]
	0x033D76F4 LDP X24, X23, [X31 + 0x30]
	0x033D76F8 LDP X26, X25, [X31 + 0x20]
	0x033D76FC LDP X30, X27, [X31 + 0x10]
	0x033D7700 AND W0, W0, 0x1
	0x033D7704 ADD X31, X31, 0x60
	0x033D7708 RET
	0x033D770C STR X30, [X31 - 0x30]!
	0x033D7710 STP X22, X21, [X31 + 0x10]
	0x033D7714 STP X20, X19, [X31 + 0x20]
	0x033D7718 ADRP X21, 0x1006000
	0x033D771C LDRB W8, [X21 + 0x31F]
	0x033D7720 MOV X19, X1
	0x033D7724 MOV X20, X0
	0x033D7728 TBNZ X8, 0x0, 0x33D7740
	0x033D772C ADRP X0, 0xD51000
	0x033D7730 LDR X0, [X0 + 0x78]
	0x033D7734 BL 0x1C16CF4
	0x033D7738 MOVZ W8, 0x1
	0x033D773C STRB W8, [X21 + 0x31F]
	0x033D7740 CBNZ X20, 0x33D7750
	0x033D7744 MOVZ W0, 0x30
	0x033D7748 MOV X1, X31
	0x033D774C BL 0x338F3E0
	0x033D7750 ADRP X21, 0x1002000
	0x033D7754 LDRB W8, [X21 + 0x762]
	0x033D7758 CBNZ W8, 0x33D7770
	0x033D775C ADRP X0, 0xD43000
	0x033D7760 LDR X0, [X0 + 0x290]
	0x033D7764 BL 0x1C16CF4
	0x033D7768 MOVZ W8, 0x1
	0x033D776C STRB W8, [X21 + 0x762]
	0x033D7770 ADRP X22, 0xD51000
	0x033D7774 LDR X22, [X22 + 0x78]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1007000
	007 Move X20, 0xD45000
	008 Move W8, [X21+787]
	009 Move X20, [X20+1520]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xD56000
	017 Move X0, [X0+3560]
	018 Call 0x1C17CF4
	019 Move X0, 0xD45000
	020 Move X0, [X0+1520]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+787], W8
	024 Move X0, [X20]
	025 Move X20, 0xD56000
	026 Move W8, [X0+224]
	027 Move X20, [X20+3560]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, [X20]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X19
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X30, [X31+16]
	040 Move X21, [X31+24]
	041 Move V0, V8
	042 Move V8, [X31+48]

Method: System.Boolean IsValid(System.Int32 flags)

Disassembly:
	0x033D7B94 SUB W21, W8, W21
	0x033D7B98 CMP W21, 0x1
	0x033D7B9C B.LT 0x33D7BD8
	0x033D7BA0 LDR X0, [X22]
	0x033D7BA4 ADRP X22, 0xD55000
	0x033D7BA8 LDR W8, [X0 + 0xE0]
	0x033D7BAC LDR X22, [X22 + 0xDE8]
	0x033D7BB0 CBNZ W8, 0x33D7BB8

ISIL:
	001 Move TEMP, 0x80FF0000
	002 Not TEMP
	003 Move W8, TEMP
	004 And W9, W0, 0xFF0000
	005 And W31, W0, W8
	006 NotImplemented "Instruction CSET not yet implemented."
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 And W0, W8, W9
	010 Return X0

Method: System.Void .ctor(System.Int32[] bits)

Disassembly:
	0x033D7BB4 BL 0x1C16DFC
	0x033D7BB8 LDR X0, [X22]
	0x033D7BBC LDR W8, [X0 + 0xE0]
	0x033D7BC0 CBNZ W8, 0x33D7BC8
	0x033D7BC4 BL 0x1C16DFC
	0x033D7BC8 MOV X0, X20
	0x033D7BCC MOV W1, W21
	0x033D7BD0 MOV W2, W19
	0x033D7BD4 BL 0x33D7CE4
	0x033D7BD8 LDP X0, X1, [X20]
	0x033D7BDC LDP X20, X19, [X31 + 0x20]
	0x033D7BE0 LDP X22, X21, [X31 + 0x10]
	0x033D7BE4 LDR X30, [X31], #0x30
	0x033D7BE8 RET
	0x033D7BEC ADRP X0, 0xD24000
	0x033D7BF0 LDR X0, [X0 + 0x760]
	0x033D7BF4 BL 0x1C16D08
	0x033D7BF8 BL 0x1C16F10
	0x033D7BFC MOV X19, X0
	0x033D7C00 ADRP X0, 0xD55000
	0x033D7C04 LDR X0, [X0 + 0xE38]
	0x033D7C08 BL 0x1C16D08
	0x033D7C0C MOV X20, X0
	0x033D7C10 ADRP X0, 0xD55000
	0x033D7C14 LDR X0, [X0 + 0xE40]
	0x033D7C18 BL 0x1C16D08
	0x033D7C1C MOV X2, X0
	0x033D7C20 MOV X0, X19
	0x033D7C24 MOV X1, X20
	0x033D7C28 MOV X3, X31
	0x033D7C2C BL 0x3311888
	0x033D7C30 ADRP X0, 0xD55000
	0x033D7C34 LDR X0, [X0 + 0xE48]
	0x033D7C38 BL 0x1C16D08
	0x033D7C3C MOV X1, X0
	0x033D7C40 MOV X0, X19
	0x033D7C44 BL 0x1C16DEC
	0x033D7C48 STR W19, [X31 + 0xC]
	0x033D7C4C ADRP X0, 0xD53000
	0x033D7C50 LDR X0, [X0 + 0xF20]
	0x033D7C54 BL 0x1C16D08
	0x033D7C58 ADD X1, X31, 0xC
	0x033D7C5C BL 0x1C16E04
	0x033D7C60 MOV X19, X0
	0x033D7C64 ADRP X0, 0xD53000
	0x033D7C68 LDR X0, [X0 + 0xF28]
	0x033D7C6C BL 0x1C16D08
	0x033D7C70 MOV X20, X0
	0x033D7C74 ADRP X0, 0xD53000
	0x033D7C78 LDR X0, [X0 + 0xF30]
	0x033D7C7C BL 0x1C16D08
	0x033D7C80 MOV X2, X0
	0x033D7C84 MOV X0, X20
	0x033D7C88 MOV X1, X19
	0x033D7C8C MOV X3, X31
	0x033D7C90 BL 0x320A264
	0x033D7C94 MOV X19, X0
	0x033D7C98 ADRP X0, 0xD24000
	0x033D7C9C LDR X0, [X0 + 0x578]
	0x033D7CA0 BL 0x1C16D08
	0x033D7CA4 BL 0x1C16F10
	0x033D7CA8 MOV X20, X0
	0x033D7CAC ADRP X0, 0xD4D000
	0x033D7CB0 LDR X0, [X0 + 0x68]
	0x033D7CB4 BL 0x1C16D08
	0x033D7CB8 MOV X2, X0
	0x033D7CBC MOV X0, X20
	0x033D7CC0 MOV X1, X19
	0x033D7CC4 MOV X3, X31
	0x033D7CC8 BL 0x330E16C
	0x033D7CCC ADRP X0, 0xD55000
	0x033D7CD0 LDR X0, [X0 + 0xE48]
	0x033D7CD4 BL 0x1C16D08
	0x033D7CD8 MOV X1, X0
	0x033D7CDC MOV X0, X20
	0x033D7CE0 BL 0x1C16DEC
	0x033D7CE4 STP X30, X25, [X31 - 0x40]!
	0x033D7CE8 STP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1007000
	006 Move W8, [X21+788]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD45000
	014 Move X0, [X0+1520]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+788], W8
	018 Compare X19, 0
	019 JumpIfEqual {68}
	020 Move W8, [X19+24]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X8, 0xD45000
	023 Move X8, [X8+1520]
	024 Move W21, [X19+44]
	025 Move X0, [X8]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move TEMP, 0x80FF0000
	031 Not TEMP
	032 Move W8, TEMP
	033 And W31, W21, W8
	034 And W8, W21, 0xFF0000
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move W8, [X19+24]
	037 Compare W8, 0
	038 JumpIfEqual {55}
	039 Move W8, [X19+32]
	040 Move [X20+8], W8
	041 Move W8, [X19+24]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move W8, [X19+36]
	044 Move [X20+12], W8
	045 Move W8, [X19+24]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move W8, [X19+40]
	048 Move [X20], W21
	049 Move [X20+4], W8
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move X30, [X31+32]
	053 Move X21, [X31+40]
	054 Return 
	055 Call 0x1C17F28
	056 Move X0, 0xD25000
	057 Move X0, [X0+1400]
	058 Call 0x1C17D08
	059 Call 0x1C17F10
	060 Move X19, X0
	061 Move X0, 0xD51000
	062 Move X0, [X0+856]
	063 Call 0x1C17D08
	064 Move X1, X0
	065 Move X0, X19
	066 Move X2, X31
	067 Call ArgumentException..ctor, X0, X1
	068 Move X0, 0xD22000
	069 Move X0, [X0+1320]
	070 Call 0x1C17D08
	071 Call 0x1C17F10
	072 Move X19, X0
	073 Move X0, 0xD54000
	074 Move X0, [X0+1400]
	075 Call 0x1C17D08
	076 Move X1, X0
	077 Move X0, X19
	078 Move X2, X31
	079 Call ArgumentNullException..ctor, X0, X1
	080 Move X0, 0xD56000
	081 Move X0, [X0+3584]
	082 Call 0x1C17D08
	083 Move X1, X0
	084 Move X0, X19
	085 Call 0x1C17DEC

Method: System.Void .ctor(System.Int32 lo, System.Int32 mid, System.Int32 hi, System.Boolean isNegative, System.Byte scale)

Disassembly:
	0x033D7CEC STP X22, X21, [X31 + 0x20]
	0x033D7CF0 STP X20, X19, [X31 + 0x30]
	0x033D7CF4 ADRP X22, 0x1006000
	0x033D7CF8 LDRB W8, [X22 + 0x35A]
	0x033D7CFC MOV W20, W2
	0x033D7D00 MOV W21, W1
	0x033D7D04 MOV X19, X0
	0x033D7D08 TBNZ X8, 0x0, 0x33D7D20
	0x033D7D0C ADRP X0, 0xD55000
	0x033D7D10 LDR X0, [X0 + 0xDE8]
	0x033D7D14 BL 0x1C16CF4
	0x033D7D18 MOVZ W8, 0x1
	0x033D7D1C STRB W8, [X22 + 0x35A]
	0x033D7D20 LDR W8, [X19]
	0x033D7D24 ADRP X22, 0xD55000
	0x033D7D28 LDR X22, [X22 + 0xDE8]
	0x033D7D2C CMP W21, 0x9
	0x033D7D30 SUB W8, W8, W21, 0x10, LSL
	0x033D7D34 MOV W23, W31
	0x033D7D38 STR W8, [X19]
	0x033D7D3C B.CC 0x33D7DE8
	0x033D7D40 MOVZ W24, 0xCA00
	0x033D7D44 MOVZ W25, 0x3600
	0x033D7D48 MOVK W24, 0x3B9A0000
	0x033D7D4C MOVK W25, 0xC4650000
	0x033D7D50 LDR W8, [X19 + 0x4]
	0x033D7D54 CBZ W8, 0x33D7DAC
	0x033D7D58 LDR W9, [X19 + 0xC]
	0x033D7D5C UDIV W10, W8, W24
	0x033D7D60 MADD W8, W10, W25, W8
	0x033D7D64 STR W10, [X19 + 0x4]
	0x033D7D68 ORR W11, W9, W8, 0x0
	0x033D7D6C CBZ W11, 0x33D7D84
	0x033D7D70 MOV X10, X9
	0x033D7D74 BFM X10, X8, 0x20, 0x1F
	0x033D7D78 UDIV X8, X10, X24
	0x033D7D7C STR W8, [X19 + 0xC]
	0x033D7D80 MADD W8, W8, W25, W9

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 And W8, W5, 255
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move W9, 0x80000000
	007 Move X20, [X31+16]
	008 Move X19, [X31+24]
	009 Move W8, W5
	010 ShiftRight W8, 16
	011 And W8, W8, 127
	012 And W31, W4, 1
	013 NotImplemented "Instruction BFM not yet implemented."
	014 NotImplemented "Instruction CSEL not yet implemented."
	015 Move [X0+8], W1
	016 Move [X0+12], W2
	017 Move [X0], W8
	018 Move [X0+4], W3
	019 Move X30, [X31+32]
	020 Return 
	021 Move X0, 0xD25000
	022 Move X0, [X0+1888]
	023 Call 0x1C17D08
	024 Call 0x1C17F10
	025 Move X19, X0
	026 Move X0, 0xD56000
	027 Move X0, [X0+3592]
	028 Call 0x1C17D08
	029 Move X20, X0
	030 Move X0, 0xD56000
	031 Move X0, [X0+3600]
	032 Call 0x1C17D08
	033 Move X2, X0
	034 Move X0, X19
	035 Move X1, X20
	036 Move X3, X31
	037 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	038 Move X0, 0xD56000
	039 Move X0, [X0+3608]
	040 Call 0x1C17D08
	041 Move X1, X0
	042 Move X0, X19
	043 Call 0x1C17DEC

Method: System.Void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object sender)

Disassembly:
	0x033D7D84 LDR W9, [X19 + 0x8]
	0x033D7D88 ORR W10, W9, W8, 0x0
	0x033D7D8C CBZ W10, 0x33D7DD0
	0x033D7D90 MOV X10, X9
	0x033D7D94 BFM X10, X8, 0x20, 0x1F
	0x033D7D98 UDIV X10, X10, X24
	0x033D7D9C MADD W8, W10, W25, W9
	0x033D7DA0 MOV W9, W10
	0x033D7DA4 STR W10, [X19 + 0x8]
	0x033D7DA8 B 0x33D7DD0
	0x033D7DAC LDR X0, [X22]
	0x033D7DB0 LDR W8, [X0 + 0xE0]
	0x033D7DB4 CBNZ W8, 0x33D7DBC
	0x033D7DB8 BL 0x1C16DFC
	0x033D7DBC LDR X8, [X19 + 0x8]
	0x033D7DC0 UDIV X9, X8, X24
	0x033D7DC4 STR X9, [X19 + 0x8]
	0x033D7DC8 MADD W8, W9, W25, W8
	0x033D7DCC B 0x33D7DD0
	0x033D7DD0 CMP W21, 0x9
	0x033D7DD4 B.EQ 0x33D7EB0
	0x033D7DD8 SUB W21, W21, 0x9
	0x033D7DDC CMP W21, 0x8
	0x033D7DE0 ORR W23, W8, W23, 0x0
	0x033D7DE4 B.HI 0x33D7D50
	0x033D7DE8 LDR X0, [X22]
	0x033D7DEC LDR W8, [X0 + 0xE0]
	0x033D7DF0 CBNZ W8, 0x33D7DFC
	0x033D7DF4 BL 0x1C16DFC
	0x033D7DF8 LDR X0, [X22]
	0x033D7DFC LDR X8, [X0 + 0xB8]
	0x033D7E00 LDR X8, [X8]
	0x033D7E04 CBZ X8, 0x33D7FA0
	0x033D7E08 LDR W9, [X8 + 0x18]
	0x033D7E0C CMP W21, W9
	0x033D7E10 B.CS 0x33D7FA4
	0x033D7E14 ADD X9, X8, W21, 0x2, UXTW
	0x033D7E18 LDR W8, [X19 + 0x4]
	0x033D7E1C LDR W21, [X9 + 0x20]
	0x033D7E20 CBZ W8, 0x33D7E78
	0x033D7E24 LDR W9, [X19 + 0xC]
	0x033D7E28 UDIV W10, W8, W21
	0x033D7E2C MSUB W8, W10, W21, W8
	0x033D7E30 STR W10, [X19 + 0x4]
	0x033D7E34 ORR W11, W9, W8, 0x0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1007000
	006 Move X20, 0xD45000
	007 Move W8, [X21+789]
	008 Move X20, [X20+1520]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD45000
	015 Move X0, [X0+1520]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+789], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move TEMP, 0x80FF0000
	026 Not TEMP
	027 Move W8, TEMP
	028 And W31, W19, W8
	029 And W8, W19, 0xFF0000
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Return 
	036 Move X0, 0xD47000
	037 Move X0, [X0+736]
	038 Call 0x1C17D08
	039 Call 0x1C17F10
	040 Move X19, X0
	041 Move X0, 0xD54000
	042 Move X0, [X0+4072]
	043 Call 0x1C17D08
	044 Move X1, X0
	045 Move X0, X19
	046 Move X2, X31
	047 Call SerializationException..ctor, X0, X1
	048 Move X0, 0xD56000
	049 Move X0, [X0+3616]
	050 Call 0x1C17D08
	051 Move X1, X0
	052 Move X0, X19
	053 Call 0x1C17DEC

Method: System.Int32 CompareTo(System.Object value)

Disassembly:
	0x033D7E38 CBZ W11, 0x33D7E50
	0x033D7E3C MOV X10, X9
	0x033D7E40 BFM X10, X8, 0x20, 0x1F
	0x033D7E44 UDIV X8, X10, X21
	0x033D7E48 STR W8, [X19 + 0xC]
	0x033D7E4C MSUB W8, W21, W8, W9
	0x033D7E50 LDR W9, [X19 + 0x8]
	0x033D7E54 ORR W10, W9, W8, 0x0
	0x033D7E58 CBZ W10, 0x33D7EB8
	0x033D7E5C MOV X10, X9
	0x033D7E60 BFM X10, X8, 0x20, 0x1F
	0x033D7E64 UDIV X10, X10, X21
	0x033D7E68 MSUB W8, W21, W10, W9
	0x033D7E6C MOV W9, W10
	0x033D7E70 STR W10, [X19 + 0x8]
	0x033D7E74 B 0x33D7ECC
	0x033D7E78 LDR W8, [X0 + 0xE0]
	0x033D7E7C CBNZ W8, 0x33D7E84
	0x033D7E80 BL 0x1C16DFC
	0x033D7E84 LDR X24, [X19 + 0x8]
	0x033D7E88 CBZ X24, 0x33D7EBC
	0x033D7E8C LDR X0, [X22]
	0x033D7E90 UDIV X25, X24, X21
	0x033D7E94 LDR W8, [X0 + 0xE0]
	0x033D7E98 CBNZ W8, 0x33D7EA0
	0x033D7E9C BL 0x1C16DFC
	0x033D7EA0 STR X25, [X19 + 0x8]
	0x033D7EA4 MSUB W8, W25, W21, W24
	0x033D7EA8 MOV W9, W25
	0x033D7EAC B 0x33D7ECC
	0x033D7EB0 MOV W21, W24
	0x033D7EB4 B 0x33D7ECC
	0x033D7EB8 B 0x33D7ECC
	0x033D7EBC CMP W20, 0x2
	0x033D7EC0 B.LE 0x33D7F8C
	0x033D7EC4 MOV W9, W31
	0x033D7EC8 MOV W8, W31
	0x033D7ECC CMP W20, 0x3
	0x033D7ED0 B.HI 0x33D7F10
	0x033D7ED4 ADRP X11, 0xFFFFFFFFFD7BF000
	0x033D7ED8 MOV W10, W20
	0x033D7EDC ADD X11, X11, 0xA2A
	0x033D7EE0 ADR X12, 0x10
	0x033D7EE4 LDRB W13, [X11, X10, LSL]
	0x033D7EE8 ADD X12, X12, X13, 0x2, LSL
	0x033D7EEC BR X12
	0x033D7EF0 AND W9, W9, 0x1
	0x033D7EF4 ORR W9, W9, W23, 0x0
	0x033D7EF8 CMP W9, 0x0
	0x033D7EFC CSET W9, NE
	0x033D7F00 BFM W9, W8, 0x1F, 0x1E
	0x033D7F04 CMP W21, W9
	0x033D7F08 B.CC 0x33D7F60
	0x033D7F0C B 0x33D7F8C
	0x033D7F10 ORR W8, W8, W23, 0x0
	0x033D7F14 CBZ W8, 0x33D7F8C
	0x033D7F18 LDR X0, [X22]
	0x033D7F1C LDR W8, [X0 + 0xE0]
	0x033D7F20 CBNZ W8, 0x33D7F28
	0x033D7F24 BL 0x1C16DFC
	0x033D7F28 LDR W8, [X19]
	0x033D7F2C TBZ X8, 0x1F, 0x33D7F60
	0x033D7F30 B 0x33D7F8C
	0x033D7F34 CMP W21, W8, LSL
	0x033D7F38 B.LS 0x33D7F60
	0x033D7F3C B 0x33D7F8C
	0x033D7F40 ORR W8, W8, W23, 0x0
	0x033D7F44 CBZ W8, 0x33D7F8C
	0x033D7F48 LDR X0, [X22]
	0x033D7F4C LDR W8, [X0 + 0xE0]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 NotImplemented "Instruction MRS not yet implemented."
	008 Move X8, [X21+40]
	009 Move X22, 0x1007000
	010 Move X20, X1
	011 Move X19, X0
	012 Move [X31+24], X8
	013 Move W8, [X22+790]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0xD56000
	019 Move X0, [X0+3560]
	020 Call 0x1C17CF4
	021 Move X0, 0xD45000
	022 Move X0, [X0+1520]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+790], W8
	026 Compare X20, 0
	027 JumpIfEqual {47}
	028 Move X8, 0xD45000
	029 Move X8, [X8+1520]
	030 Move X9, [X20]
	031 Move X8, [X8]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X22, 0xD56000
	034 Move X22, [X22+3560]
	035 Move X0, X20
	036 Call 0x1C17E08
	037 Move V0, [X0]
	038 Move X0, [X22]
	039 Move [X31], V0
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Add X1, X31, 0
	045 Move X0, X19
	046 Call DecCalc.VarDecCmp, X0, X1
	047 Move W0, 1
	048 Move X8, [X21+40]
	049 Move X9, [X31+24]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X20, [X31+64]
	052 Move X19, [X31+72]
	053 Move X22, [X31+48]
	054 Move X21, [X31+56]
	055 Move X30, [X31+32]
	056 Add X31, X31, 80
	057 Return X0
	058 Move X0, 0xD25000
	059 Move X0, [X0+1400]
	060 Call 0x1C17D08
	061 Call 0x1C17F10
	062 Move X19, X0
	063 Move X0, 0xD56000
	064 Move X0, [X0+3624]
	065 Call 0x1C17D08
	066 Move X1, X0
	067 Move X0, X19
	068 Move X2, X31
	069 Call ArgumentException..ctor, X0, X1
	070 Move X0, 0xD56000
	071 Move X0, [X0+3632]
	072 Call 0x1C17D08
	073 Move X1, X0
	074 Move X0, X19
	075 Call 0x1C17DEC
	076 Call 0x3EB2B20

Method: System.Int32 CompareTo(System.Decimal value)

Disassembly:
	0x033D8060 B 0x33D8064
	0x033D8064 MOV X19, X0
	0x033D8068 CMP W1, 0x1
	0x033D806C B.NE 0x33D8114
	0x033D8070 MOV X0, X19
	0x033D8074 BL 0x3EB1AD0
	0x033D8078 MOV X19, X0
	0x033D807C ADRP X0, 0xD1B000
	0x033D8080 LDR X0, [X0 + 0x858]
	0x033D8084 BL 0x1C16D08
	0x033D8088 LDR X8, [X19]
	0x033D808C LDR X1, [X8]
	0x033D8090 BL 0x1C17270
	0x033D8094 TBZ X0, 0x0, 0x33D80EC
	0x033D8098 LDR X19, [X19]
	0x033D809C BL 0x3EB1AE0
	0x033D80A0 ADRP X0, 0xD1B000
	0x033D80A4 LDR X0, [X0 + 0x858]
	0x033D80A8 BL 0x1C16D08
	0x033D80AC BL 0x1C16F10
	0x033D80B0 MOV X20, X0
	0x033D80B4 ADRP X0, 0xD50000
	0x033D80B8 LDR X0, [X0 + 0x80]
	0x033D80BC BL 0x1C16D08
	0x033D80C0 MOV X1, X0
	0x033D80C4 MOV X0, X20
	0x033D80C8 MOV X2, X19
	0x033D80CC MOV X3, X31
	0x033D80D0 BL 0x338CB74
	0x033D80D4 ADRP X0, 0xD54000
	0x033D80D8 LDR X0, [X0 + 0xE50]
	0x033D80DC BL 0x1C16D08
	0x033D80E0 MOV X1, X0
	0x033D80E4 MOV X0, X20
	0x033D80E8 BL 0x1C16DEC
	0x033D80EC MOVZ W0, 0x8

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 NotImplemented "Instruction MRS not yet implemented."
	008 Move X8, [X20+40]
	009 Move X21, 0x1006000
	010 Move X22, 0xD55000
	011 Move X19, X0
	012 Move [X31+24], X8
	013 Move [X31+8], X1
	014 Move [X31+16], X2
	015 Move W8, [X21+791]
	016 Move X22, [X22+3560]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xD55000
	022 Move X0, [X0+3560]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+791], W8
	026 Move X0, [X22]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Add X1, X31, 8
	032 Move X0, X19
	033 Call DecCalc.VarDecCmp, X0, X1
	034 Move X8, [X20+40]
	035 Move X9, [X31+24]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X20, [X31+64]
	038 Move X19, [X31+72]
	039 Move X22, [X31+48]
	040 Move X21, [X31+56]
	041 Move X30, [X31+32]
	042 Add X31, X31, 80
	043 Return X0
	044 Call 0x3EB2B20

Method: System.Boolean Equals(System.Object value)

Disassembly:
	0x033D80F0 BL 0x3EB1AF0
	0x033D80F4 LDR X8, [X19]
	0x033D80F8 STR X8, [X0]
	0x033D80FC ADRP X1, 0xADC000
	0x033D8100 ADD X1, X1, 0xE58
	0x033D8104 MOV X2, X31
	0x033D8108 BL 0x3EB1B00
	0x033D810C MOV X19, X0
	0x033D8110 BL 0x3EB1AE0
	0x033D8114 MOV X0, X19
	0x033D8118 BL 0x1D2C690
	0x033D811C BL 0x1990590
	0x033D8120 SUB X31, X31, 0x50
	0x033D8124 STP X30, X23, [X31 + 0x20]
	0x033D8128 STP X22, X21, [X31 + 0x30]
	0x033D812C STP X20, X19, [X31 + 0x40]
	0x033D8130 MRS X21, 0xC000
	0x033D8134 LDR X8, [X21 + 0x28]
	0x033D8138 ADRP X23, 0x1005000
	0x033D813C ADRP X22, 0xD43000
	0x033D8140 MOV X20, X1
	0x033D8144 STR X8, [X31 + 0x18]
	0x033D8148 STP X0, X1, [X31 + 0x8]
	0x033D814C LDRB W8, [X23 + 0x32C]
	0x033D8150 LDR X22, [X22 + 0x5F0]
	0x033D8154 MOV X19, X0
	0x033D8158 TBNZ X8, 0x0, 0x33D8170
	0x033D815C ADRP X0, 0xD43000
	0x033D8160 LDR X0, [X0 + 0x5F0]
	0x033D8164 BL 0x1C16CF4
	0x033D8168 MOVZ W8, 0x1
	0x033D816C STRB W8, [X23 + 0x32C]
	0x033D8170 LDR X0, [X22]
	0x033D8174 LDR W8, [X0 + 0xE0]
	0x033D8178 CBNZ W8, 0x33D8180
	0x033D817C BL 0x1C16DFC
	0x033D8180 ADRP X23, 0x1005000
	0x033D8184 LDRB W8, [X23 + 0x3E6]
	0x033D8188 CBNZ W8, 0x33D81AC
	0x033D818C ADRP X0, 0xD54000
	0x033D8190 LDR X0, [X0 + 0xDE8]
	0x033D8194 BL 0x1C16CF4
	0x033D8198 ADRP X0, 0xD43000
	0x033D819C LDR X0, [X0 + 0x5F0]
	0x033D81A0 BL 0x1C16CF4
	0x033D81A4 MOVZ W8, 0x1
	0x033D81A8 STRB W8, [X23 + 0x3E6]
	0x033D81AC ANDS W31, W19, 0xFF0000
	0x033D81B0 B.EQ 0x33D81F8
	0x033D81B4 LDR X0, [X22]
	0x033D81B8 LDR W8, [X0 + 0xE0]
	0x033D81BC CBNZ W8, 0x33D81C4
	0x033D81C0 BL 0x1C16DFC
	0x033D81C4 ADRP X8, 0xD54000

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 NotImplemented "Instruction MRS not yet implemented."
	008 Move X8, [X21+40]
	009 Move X22, 0x1006000
	010 Move X20, X1
	011 Move X19, X0
	012 Move [X31+24], X8
	013 Move W8, [X22+792]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0xD55000
	019 Move X0, [X0+3560]
	020 Call 0x1C17CF4
	021 Move X0, 0xD44000
	022 Move X0, [X0+1520]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+792], W8
	026 Compare X20, 0
	027 JumpIfEqual {33}
	028 Move X8, 0xD44000
	029 Move X8, [X8+1520]
	030 Move X9, [X20]
	031 Move X8, [X8]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W0, W31
	034 Move X0, X20
	035 Call 0x1C17E08
	036 Move X8, 0xD55000
	037 Move V0, [X0]
	038 Move X8, [X8+3560]
	039 Move [X31], V0
	040 Move X0, [X8]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Add X1, X31, 0
	046 Move X0, X19
	047 Call DecCalc.VarDecCmp, X0, X1
	048 NotImplemented "Instruction CMP not yet implemented."
	049 NotImplemented "Instruction CSET not yet implemented."
	050 Move X8, [X21+40]
	051 Move X9, [X31+24]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X20, [X31+64]
	054 Move X19, [X31+72]
	055 Move X22, [X31+48]
	056 Move X21, [X31+56]
	057 Move X30, [X31+32]
	058 Add X31, X31, 80
	059 Return X0
	060 Call 0x3EB2B20

Method: System.Boolean Equals(System.Decimal value)

Disassembly:
	0x033D81C8 LDR X8, [X8 + 0xDE8]
	0x033D81CC LDR X0, [X8]
	0x033D81D0 LDR W8, [X0 + 0xE0]
	0x033D81D4 CBNZ W8, 0x33D81DC
	0x033D81D8 BL 0x1C16DFC
	0x033D81DC UBFM W1, W19, 0x10, 0x17
	0x033D81E0 ADD X0, X31, 0x8
	0x033D81E4 MOVZ W2, 0x2
	0x033D81E8 BL 0x33D7CE4
	0x033D81EC LDR W8, [X31 + 0xC]
	0x033D81F0 LDR W9, [X31 + 0x14]
	0x033D81F4 B 0x33D8200
	0x033D81F8 UBFM X8, X19, 0x20, 0x3F
	0x033D81FC UBFM X9, X20, 0x20, 0x3F
	0x033D8200 ORR W8, W9, W8, 0x0
	0x033D8204 CBNZ W8, 0x33D824C
	0x033D8208 LDR X0, [X22]
	0x033D820C LDR W8, [X0 + 0xE0]
	0x033D8210 CBNZ W8, 0x33D8218
	0x033D8214 BL 0x1C16DFC
	0x033D8218 LDR W0, [X31 + 0x10]
	0x033D821C CBZ W0, 0x33D8228
	0x033D8220 LDR W8, [X31 + 0x8]
	0x033D8224 TBNZ X8, 0x1F, 0x33D824C
	0x033D8228 LDR X8, [X21 + 0x28]
	0x033D822C LDR X9, [X31 + 0x18]
	0x033D8230 CMP X8, X9
	0x033D8234 B.NE 0x33D8294
	0x033D8238 LDP X20, X19, [X31 + 0x40]
	0x033D823C LDP X22, X21, [X31 + 0x30]
	0x033D8240 LDP X30, X23, [X31 + 0x20]
	0x033D8244 ADD X31, X31, 0x50
	0x033D8248 RET
	0x033D824C ADRP X0, 0xD1B000
	0x033D8250 LDR X0, [X0 + 0x858]
	0x033D8254 BL 0x1C16D08
	0x033D8258 BL 0x1C16F10
	0x033D825C MOV X19, X0

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 NotImplemented "Instruction MRS not yet implemented."
	008 Move X8, [X20+40]
	009 Move X21, 0x1006000
	010 Move X22, 0xD55000
	011 Move X19, X0
	012 Move [X31+24], X8
	013 Move [X31+8], X1
	014 Move [X31+16], X2
	015 Move W8, [X21+793]
	016 Move X22, [X22+3560]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xD55000
	022 Move X0, [X0+3560]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+793], W8
	026 Move X0, [X22]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Add X1, X31, 8
	032 Move X0, X19
	033 Call DecCalc.VarDecCmp, X0, X1
	034 Move X8, [X20+40]
	035 Move X9, [X31+24]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction CSET not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X20, [X31+64]
	040 Move X19, [X31+72]
	041 Move X22, [X31+48]
	042 Move X21, [X31+56]
	043 Move X30, [X31+32]
	044 Add X31, X31, 80
	045 Return X0
	046 Call 0x3EB2B20

Method: System.Int32 GetHashCode()

Disassembly:
	0x033D8260 ADRP X0, 0xD50000
	0x033D8264 LDR X0, [X0 + 0x1E0]
	0x033D8268 BL 0x1C16D08
	0x033D826C MOV X1, X0
	0x033D8270 MOV X0, X19
	0x033D8274 MOV X2, X31
	0x033D8278 BL 0x338CB50
	0x033D827C ADRP X0, 0xD54000
	0x033D8280 LDR X0, [X0 + 0xE58]
	0x033D8284 BL 0x1C16D08
	0x033D8288 MOV X1, X0
	0x033D828C MOV X0, X19
	0x033D8290 BL 0x1C16DEC
	0x033D8294 BL 0x3EB1B20
	0x033D8298 STR X30, [X31 - 0x30]!
	0x033D829C STP X22, X21, [X31 + 0x10]
	0x033D82A0 STP X20, X19, [X31 + 0x20]
	0x033D82A4 ADRP X21, 0x1005000
	0x033D82A8 ADRP X22, 0xD43000
	0x033D82AC LDRB W8, [X21 + 0x326]
	0x033D82B0 LDR X22, [X22 + 0x5F0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1006000
	006 Move X21, 0xD55000
	007 Move W8, [X20+794]
	008 Move X21, [X21+3560]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD55000
	015 Move X0, [X0+3560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+794], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]

Method: System.String ToString()

Disassembly:
	0x033D8400 BL 0x3EB1AE0
	0x033D8404 MOV X0, X19
	0x033D8408 BL 0x1D2C690
	0x033D840C BL 0x1990590
	0x033D8410 SUB X31, X31, 0x50
	0x033D8414 STP X30, X23, [X31 + 0x20]
	0x033D8418 STP X22, X21, [X31 + 0x30]
	0x033D841C STP X20, X19, [X31 + 0x40]
	0x033D8420 MRS X21, 0xC000
	0x033D8424 LDR X8, [X21 + 0x28]
	0x033D8428 ADRP X23, 0x1005000
	0x033D842C ADRP X22, 0xD43000
	0x033D8430 MOV X20, X1
	0x033D8434 STR X8, [X31 + 0x18]
	0x033D8438 STP X0, X1, [X31 + 0x8]
	0x033D843C LDRB W8, [X23 + 0x329]
	0x033D8440 LDR X22, [X22 + 0x5F0]
	0x033D8444 MOV X19, X0
	0x033D8448 TBNZ X8, 0x0, 0x33D8460
	0x033D844C ADRP X0, 0xD43000
	0x033D8450 LDR X0, [X0 + 0x5F0]
	0x033D8454 BL 0x1C16CF4
	0x033D8458 MOVZ W8, 0x1
	0x033D845C STRB W8, [X23 + 0x329]
	0x033D8460 LDR X0, [X22]
	0x033D8464 LDR W8, [X0 + 0xE0]
	0x033D8468 CBNZ W8, 0x33D8470
	0x033D846C BL 0x1C16DFC
	0x033D8470 ADRP X23, 0x1005000
	0x033D8474 LDRB W8, [X23 + 0x3E6]
	0x033D8478 CBNZ W8, 0x33D849C
	0x033D847C ADRP X0, 0xD54000
	0x033D8480 LDR X0, [X0 + 0xDE8]
	0x033D8484 BL 0x1C16CF4
	0x033D8488 ADRP X0, 0xD43000
	0x033D848C LDR X0, [X0 + 0x5F0]
	0x033D8490 BL 0x1C16CF4
	0x033D8494 MOVZ W8, 0x1
	0x033D8498 STRB W8, [X23 + 0x3E6]
	0x033D849C ANDS W31, W19, 0xFF0000
	0x033D84A0 B.EQ 0x33D84E8
	0x033D84A4 LDR X0, [X22]
	0x033D84A8 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, 0x1006000
	008 Move X21, 0xD4B000
	009 Move X23, 0xD51000
	010 Move W8, [X19+795]
	011 Move X21, [X21+472]
	012 Move X23, [X23+120]
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0xD51000
	019 Move X0, [X0+120]
	020 Call 0x1C17CF4
	021 Move X0, 0xD4B000
	022 Move X0, [X0+472]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X19+795], W8
	026 Move X1, [X21]
	027 Move X19, [X20]
	028 Move X20, [X20+8]
	029 Move X0, X31
	030 Call ReadOnlySpan`1<Char>.op_Implicit, X0
	031 Move X21, X0
	032 Move X0, X31
	033 Move X22, X1
	034 Call NumberFormatInfo.get_CurrentInfo
	035 Move X8, [X23]
	036 Move X23, X0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X0, X19
	043 Move X1, X20
	044 Move X2, X21
	045 Move X3, X22
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X4, X23
	051 Move X5, X31
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Call Number.FormatDecimal, X0, X1, X2
	055 Return X0

Method: System.String ToString(System.IFormatProvider provider)

Disassembly:
	0x033D84AC CBNZ W8, 0x33D84B4
	0x033D84B0 BL 0x1C16DFC
	0x033D84B4 ADRP X8, 0xD54000
	0x033D84B8 LDR X8, [X8 + 0xDE8]
	0x033D84BC LDR X0, [X8]
	0x033D84C0 LDR W8, [X0 + 0xE0]
	0x033D84C4 CBNZ W8, 0x33D84CC
	0x033D84C8 BL 0x1C16DFC
	0x033D84CC UBFM W1, W19, 0x10, 0x17
	0x033D84D0 ADD X0, X31, 0x8
	0x033D84D4 MOVZ W2, 0x2
	0x033D84D8 BL 0x33D7CE4
	0x033D84DC LDR W8, [X31 + 0xC]
	0x033D84E0 LDR W9, [X31 + 0x14]
	0x033D84E4 B 0x33D84F0
	0x033D84E8 UBFM X8, X19, 0x20, 0x3F
	0x033D84EC UBFM X9, X20, 0x20, 0x3F
	0x033D84F0 ORR W8, W9, W8, 0x0
	0x033D84F4 CBNZ W8, 0x33D854C
	0x033D84F8 LDR X0, [X22]
	0x033D84FC LDR W19, [X31 + 0x10]
	0x033D8500 LDR W8, [X0 + 0xE0]
	0x033D8504 CBNZ W8, 0x33D850C
	0x033D8508 BL 0x1C16DFC
	0x033D850C LDR W8, [X31 + 0x8]
	0x033D8510 TBNZ X8, 0x1F, 0x33D8540
	0x033D8514 TBNZ X19, 0x1F, 0x33D854C
	0x033D8518 LDR X8, [X21 + 0x28]
	0x033D851C LDR X9, [X31 + 0x18]
	0x033D8520 CMP X8, X9
	0x033D8524 B.NE 0x33D8594
	0x033D8528 MOV W0, W19
	0x033D852C LDP X20, X19, [X31 + 0x40]
	0x033D8530 LDP X22, X21, [X31 + 0x30]
	0x033D8534 LDP X30, X23, [X31 + 0x20]
	0x033D8538 ADD X31, X31, 0x50
	0x033D853C RET
	0x033D8540 SUB W19, W31, W19
	0x033D8544 CMP W19, 0x1
	0x033D8548 B.LT 0x33D8518
	0x033D854C ADRP X0, 0xD1B000
	0x033D8550 LDR X0, [X0 + 0x858]
	0x033D8554 BL 0x1C16D08
	0x033D8558 BL 0x1C16F10
	0x033D855C MOV X19, X0
	0x033D8560 ADRP X0, 0xD50000
	0x033D8564 LDR X0, [X0 + 0x1D0]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x1006000
	009 Move X22, 0xD4B000
	010 Move X24, 0xD51000
	011 Move W8, [X20+796]
	012 Move X22, [X22+472]
	013 Move X24, [X24+120]
	014 Move X19, X1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0xD51000
	021 Move X0, [X0+120]
	022 Call 0x1C17CF4
	023 Move X0, 0xD4B000
	024 Move X0, [X0+472]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+796], W8
	028 Move X1, [X22]
	029 Move X20, [X21]
	030 Move X21, [X21+8]
	031 Move X0, X31
	032 Call ReadOnlySpan`1<Char>.op_Implicit, X0
	033 Move X22, X0
	034 Move X23, X1
	035 Move X0, X19
	036 Move X1, X31
	037 Call NumberFormatInfo.GetInstance, X0
	038 Move X8, [X24]
	039 Move X19, X0
	040 Move W9, [X8+224]
	041 Compare W9, 0
	042 JumpIfNotEqual {45}
	043 Move X0, X8
	044 Call 0x1C17DFC
	045 Move X0, X20
	046 Move X1, X21
	047 Move X2, X22
	048 Move X3, X23
	049 Move X4, X19
	050 Move X20, [X31+48]
	051 Move X19, [X31+56]
	052 Move X22, [X31+32]
	053 Move X21, [X31+40]
	054 Move X24, [X31+16]
	055 Move X23, [X31+24]
	056 Move X5, X31
	057 Move X30, [X31+64]
	058 Call Number.FormatDecimal, X0, X1, X2
	059 Return X0

Method: System.String ToString(System.String format, System.IFormatProvider provider)

Disassembly:
	0x033D8568 BL 0x1C16D08
	0x033D856C MOV X1, X0
	0x033D8570 MOV X0, X19
	0x033D8574 MOV X2, X31
	0x033D8578 BL 0x338CB50
	0x033D857C ADRP X0, 0xD54000
	0x033D8580 LDR X0, [X0 + 0xE68]
	0x033D8584 BL 0x1C16D08
	0x033D8588 MOV X1, X0
	0x033D858C MOV X0, X19
	0x033D8590 BL 0x1C16DEC
	0x033D8594 BL 0x3EB1B20
	0x033D8598 STR X30, [X31 - 0x30]!
	0x033D859C STP X22, X21, [X31 + 0x10]
	0x033D85A0 STP X20, X19, [X31 + 0x20]
	0x033D85A4 ADRP X21, 0x1005000
	0x033D85A8 ADRP X22, 0xD43000
	0x033D85AC LDRB W8, [X21 + 0x327]
	0x033D85B0 LDR X22, [X22 + 0x5F0]
	0x033D85B4 MOV X19, X1
	0x033D85B8 MOV X20, X0
	0x033D85BC TBNZ X8, 0x0, 0x33D85D4
	0x033D85C0 ADRP X0, 0xD43000
	0x033D85C4 LDR X0, [X0 + 0x5F0]
	0x033D85C8 BL 0x1C16CF4
	0x033D85CC MOVZ W8, 0x1
	0x033D85D0 STRB W8, [X21 + 0x327]
	0x033D85D4 LDR X0, [X22]
	0x033D85D8 LDR W8, [X0 + 0xE0]
	0x033D85DC CBNZ W8, 0x33D85E4
	0x033D85E0 BL 0x1C16DFC
	0x033D85E4 MOV X0, X20
	0x033D85E8 MOV X1, X19
	0x033D85EC BL 0x33D8410
	0x033D85F0 CMP W0, W0, SXTH
	0x033D85F4 B.NE 0x33D8608
	0x033D85F8 LDP X20, X19, [X31 + 0x20]
	0x033D85FC LDP X22, X21, [X31 + 0x10]
	0x033D8600 LDR X30, [X31], #0x30
	0x033D8604 RET
	0x033D8608 ADRP X0, 0xD1B000
	0x033D860C LDR X0, [X0 + 0x858]
	0x033D8610 BL 0x1C16D08
	0x033D8614 BL 0x1C16F10
	0x033D8618 MOV X19, X0
	0x033D861C ADRP X0, 0xD50000
	0x033D8620 LDR X0, [X0 + 0x1B0]
	0x033D8624 BL 0x1C16D08
	0x033D8628 MOV X1, X0
	0x033D862C MOV X0, X19
	0x033D8630 MOV X2, X31
	0x033D8634 BL 0x338CB50
	0x033D8638 ADRP X0, 0xD54000
	0x033D863C LDR X0, [X0 + 0xE70]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x1006000
	009 Move W8, [X21+797]
	010 Move X19, X2
	011 Move X22, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xD51000
	018 Move X0, [X0+120]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+797], W8
	022 Move X23, 0x1002000
	023 Move W8, [X23+1890]
	024 Move X21, [X20]
	025 Move X20, [X20+8]
	026 Compare W8, 0
	027 JumpIfNotEqual {33}
	028 Move X0, 0xD43000
	029 Move X0, [X0+656]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X23+1890], W8
	033 Move X24, 0xD51000
	034 Move X24, [X24+120]
	035 Compare X22, 0
	036 JumpIfEqual {42}
	037 Move X0, X22
	038 Move X1, X31
	039 Call String.GetRawStringData, X0
	040 Move W22, [X22+16]
	041 Move X23, X0
	042 Move X23, X31
	043 Move X0, X19
	044 Move X1, X31
	045 Call NumberFormatInfo.GetInstance, X0
	046 Move X8, [X24]
	047 Move X19, X0
	048 Move W9, [X8+224]
	049 Compare W9, 0
	050 JumpIfNotEqual {53}
	051 Move X0, X8
	052 Call 0x1C17DFC
	053 Move X0, X21
	054 Move X1, X20
	055 Move X2, X23
	056 Move X3, X22
	057 Move X4, X19
	058 Move X20, [X31+48]
	059 Move X19, [X31+56]
	060 Move X22, [X31+32]
	061 Move X21, [X31+40]
	062 Move X24, [X31+16]
	063 Move X23, [X31+24]
	064 Move X5, X31
	065 Move X30, [X31+64]
	066 Call Number.FormatDecimal, X0, X1, X2
	067 Return X0

Method: System.Boolean TryFormat(System.Span`1<System.Char> destination, out System.Int32 charsWritten, System.ReadOnlySpan`1<System.Char> format = null, System.IFormatProvider provider = null)

Disassembly:
	0x033D8640 BL 0x1C16D08
	0x033D8644 MOV X1, X0
	0x033D8648 MOV X0, X19
	0x033D864C BL 0x1C16DEC
	0x033D8650 B 0x33D8654
	0x033D8654 MOV X19, X0
	0x033D8658 CMP W1, 0x1
	0x033D865C B.NE 0x33D8704
	0x033D8660 MOV X0, X19
	0x033D8664 BL 0x3EB1AD0
	0x033D8668 MOV X19, X0
	0x033D866C ADRP X0, 0xD1B000
	0x033D8670 LDR X0, [X0 + 0x858]
	0x033D8674 BL 0x1C16D08
	0x033D8678 LDR X8, [X19]
	0x033D867C LDR X1, [X8]
	0x033D8680 BL 0x1C17270
	0x033D8684 TBZ X0, 0x0, 0x33D86DC
	0x033D8688 LDR X19, [X19]
	0x033D868C BL 0x3EB1AE0
	0x033D8690 ADRP X0, 0xD1B000
	0x033D8694 LDR X0, [X0 + 0x858]
	0x033D8698 BL 0x1C16D08
	0x033D869C BL 0x1C16F10
	0x033D86A0 MOV X20, X0
	0x033D86A4 ADRP X0, 0xD50000
	0x033D86A8 LDR X0, [X0 + 0x1B0]
	0x033D86AC BL 0x1C16D08
	0x033D86B0 MOV X1, X0
	0x033D86B4 MOV X0, X20
	0x033D86B8 MOV X2, X19
	0x033D86BC MOV X3, X31
	0x033D86C0 BL 0x338CB74
	0x033D86C4 ADRP X0, 0xD54000
	0x033D86C8 LDR X0, [X0 + 0xE70]
	0x033D86CC BL 0x1C16D08
	0x033D86D0 MOV X1, X0
	0x033D86D4 MOV X0, X20
	0x033D86D8 BL 0x1C16DEC
	0x033D86DC MOVZ W0, 0x8
	0x033D86E0 BL 0x3EB1AF0
	0x033D86E4 LDR X8, [X19]
	0x033D86E8 STR X8, [X0]
	0x033D86EC ADRP X1, 0xADC000
	0x033D86F0 ADD X1, X1, 0xE58
	0x033D86F4 MOV X2, X31
	0x033D86F8 BL 0x3EB1B00
	0x033D86FC MOV X19, X0
	0x033D8700 BL 0x3EB1AE0
	0x033D8704 MOV X0, X19
	0x033D8708 BL 0x1D2C690

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X25, 0x1006000
	013 Move X27, 0xD51000
	014 Move W8, [X25+798]
	015 Move X27, [X27+120]
	016 Move X24, X6
	017 Move X21, X5
	018 Move X23, X4
	019 Move X19, X3
	020 Move X20, X2
	021 Move X22, X1
	022 Move X26, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {32}
	027 Move X0, 0xD51000
	028 Move X0, [X0+120]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X25+798], W8
	032 Move X25, [X26]
	033 Move X26, [X26+8]
	034 Move X0, X24
	035 Move X1, X31
	036 Call NumberFormatInfo.GetInstance, X0
	037 Move X8, [X27]
	038 Move X24, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {44}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X0, X25
	045 Move X1, X26
	046 Move X2, X23
	047 Move X3, X21
	048 Move X4, X24
	049 Move X5, X22
	050 Move X6, X20
	051 Move X7, X19
	052 Move [X31], X31
	053 Call Number.TryFormatDecimal, X0, X1, X2, X3, X4
	054 Move X20, [X31+80]
	055 Move X19, [X31+88]
	056 Move X22, [X31+64]
	057 Move X21, [X31+72]
	058 Move X24, [X31+48]
	059 Move X23, [X31+56]
	060 Move X26, [X31+32]
	061 Move X25, [X31+40]
	062 Move X30, [X31+16]
	063 Move X27, [X31+24]
	064 And W0, W0, 1
	065 Add X31, X31, 96
	066 Return X0

Method: System.Decimal Parse(System.String s, System.IFormatProvider provider)

Disassembly:
	0x033D870C BL 0x1990590
	0x033D8710 SUB X31, X31, 0x40
	0x033D8714 STP X30, X21, [X31 + 0x20]
	0x033D8718 STP X20, X19, [X31 + 0x30]
	0x033D871C MRS X19, 0xC000
	0x033D8720 LDR X8, [X19 + 0x28]
	0x033D8724 ADRP X20, 0x1005000
	0x033D8728 ADRP X21, 0xD54000
	0x033D872C STR X8, [X31 + 0x18]
	0x033D8730 STP X0, X1, [X31 + 0x8]
	0x033D8734 LDRB W8, [X20 + 0x328]
	0x033D8738 LDR X21, [X21 + 0xDE8]
	0x033D873C TBNZ X8, 0x0, 0x33D8754
	0x033D8740 ADRP X0, 0xD54000
	0x033D8744 LDR X0, [X0 + 0xDE8]
	0x033D8748 BL 0x1C16CF4
	0x033D874C MOVZ W8, 0x1
	0x033D8750 STRB W8, [X20 + 0x328]
	0x033D8754 LDR X0, [X21]
	0x033D8758 LDR W8, [X0 + 0xE0]
	0x033D875C CBNZ W8, 0x33D8764
	0x033D8760 BL 0x1C16DFC
	0x033D8764 ADD X0, X31, 0x8
	0x033D8768 BL 0x33D8790
	0x033D876C LDR X8, [X19 + 0x28]
	0x033D8770 LDR X9, [X31 + 0x18]
	0x033D8774 CMP X8, X9
	0x033D8778 B.NE 0x33D878C
	0x033D877C LDP X20, X19, [X31 + 0x30]
	0x033D8780 LDP X30, X21, [X31 + 0x20]
	0x033D8784 ADD X31, X31, 0x40
	0x033D8788 RET
	0x033D878C BL 0x3EB1B20
	0x033D8790 STR X30, [X31 - 0x30]!
	0x033D8794 STP X22, X21, [X31 + 0x10]
	0x033D8798 STP X20, X19, [X31 + 0x20]
	0x033D879C ADRP X20, 0x1005000
	0x033D87A0 ADRP X21, 0xD43000
	0x033D87A4 LDRB W8, [X20 + 0x357]
	0x033D87A8 LDR X21, [X21 + 0x5F0]
	0x033D87AC MOV X19, X0
	0x033D87B0 TBNZ X8, 0x0, 0x33D87D4
	0x033D87B4 ADRP X0, 0xD54000
	0x033D87B8 LDR X0, [X0 + 0xDE8]
	0x033D87BC BL 0x1C16CF4
	0x033D87C0 ADRP X0, 0xD43000
	0x033D87C4 LDR X0, [X0 + 0x5F0]
	0x033D87C8 BL 0x1C16CF4
	0x033D87CC MOVZ W8, 0x1
	0x033D87D0 STRB W8, [X20 + 0x357]
	0x033D87D4 LDR X0, [X21]
	0x033D87D8 LDR W8, [X0 + 0xE0]
	0x033D87DC CBNZ W8, 0x33D87E4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1006000
	007 Move W8, [X21+799]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD51000
	015 Move X0, [X0+120]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+799], W8
	019 Compare X20, 0
	020 JumpIfNotEqual {24}
	021 Move W0, 48
	022 Move X1, X31
	023 Call ThrowHelper.ThrowArgumentNullException, X0
	024 Move X21, 0x1002000
	025 Move W8, [X21+1890]
	026 Compare W8, 0
	027 JumpIfNotEqual {33}
	028 Move X0, 0xD43000
	029 Move X0, [X0+656]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+1890], W8
	033 Move X22, 0xD51000
	034 Move X22, [X22+120]
	035 Compare X20, 0
	036 JumpIfEqual {42}
	037 Move X0, X20
	038 Move X1, X31
	039 Call String.GetRawStringData, X0
	040 Move W21, [X20+16]
	041 Move X20, X0
	042 Move X21, X31
	043 Move X0, X19
	044 Move X1, X31
	045 Call NumberFormatInfo.GetInstance, X0
	046 Move X8, [X22]
	047 Move X19, X0
	048 Move W9, [X8+224]
	049 Compare W9, 0
	050 JumpIfNotEqual {53}
	051 Move X0, X8
	052 Call 0x1C17DFC
	053 Move X0, X20
	054 Move X1, X21
	055 Move X3, X19
	056 Move X20, [X31+32]
	057 Move X19, [X31+40]
	058 Move X22, [X31+16]
	059 Move X21, [X31+24]
	060 Move W2, 111
	061 Move X4, X31
	062 Move X30, [X31+48]
	063 Call Number.ParseDecimal, X0, X1, X2
	064 Return X0

Method: System.Decimal Parse(System.String s, System.Globalization.NumberStyles style, System.IFormatProvider provider)

Disassembly:
	0x033D87E0 BL 0x1C16DFC
	0x033D87E4 ADRP X20, 0x1005000
	0x033D87E8 ADRP X22, 0xD54000
	0x033D87EC LDRB W8, [X20 + 0x310]
	0x033D87F0 LDR X22, [X22 + 0xDE8]
	0x033D87F4 TBNZ X8, 0x0, 0x33D880C
	0x033D87F8 ADRP X0, 0xD43000
	0x033D87FC LDR X0, [X0 + 0x5F0]
	0x033D8800 BL 0x1C16CF4
	0x033D8804 MOVZ W8, 0x1
	0x033D8808 STRB W8, [X20 + 0x310]
	0x033D880C LDR X0, [X22]
	0x033D8810 LDR X21, [X19 + 0x8]
	0x033D8814 LDR W20, [X19 + 0x4]
	0x033D8818 LDR W8, [X0 + 0xE0]
	0x033D881C CBNZ W8, 0x33D8828
	0x033D8820 BL 0x1C16DFC
	0x033D8824 LDR X0, [X22]
	0x033D8828 LDR X8, [X0 + 0xB8]
	0x033D882C LDR X9, [X8 + 0x10]
	0x033D8830 CBZ X9, 0x33D8888
	0x033D8834 LDR W8, [X19]
	0x033D8838 LDR W11, [X9 + 0x18]
	0x033D883C UBFM X10, X8, 0x10, 0x17
	0x033D8840 CMP W10, W11
	0x033D8844 B.CS 0x33D888C
	0x033D8848 ADD X9, X9, X10, 0x3, LSL
	0x033D884C MOVZ X10, 0x43F00000
	0x033D8850 LDR V1, [X9 + 0x20]
	0x033D8854 UCVTF D2, W20
	0x033D8858 FMOV D3, X10
	0x033D885C UCVTF D0, X21
	0x033D8860 FMUL D2, D2, D3
	0x033D8864 FADD D0, D2, D0
	0x033D8868 LDP X20, X19, [X31 + 0x20]
	0x033D886C LDP X22, X21, [X31 + 0x10]
	0x033D8870 FDIV D0, D0, D1
	0x033D8874 FNEG D1, D0
	0x033D8878 CMP W8, 0x0
	0x033D887C FCSEL D0, D1, D0, LT
	0x033D8880 LDR X30, [X31], #0x30
	0x033D8884 RET
	0x033D8888 BL 0x1C16F20
	0x033D888C BL 0x1C16F28
	0x033D8890 SUB X31, X31, 0x50
	0x033D8894 STR X30, [X31 + 0x20]
	0x033D8898 STP X22, X21, [X31 + 0x30]
	0x033D889C STP X20, X19, [X31 + 0x40]
	0x033D88A0 MRS X20, 0xC000
	0x033D88A4 LDR X8, [X20 + 0x28]
	0x033D88A8 ADRP X22, 0x1005000
	0x033D88AC ADRP X21, 0xD43000
	0x033D88B0 MOV X19, X0
	0x033D88B4 STR X8, [X31 + 0x18]
	0x033D88B8 STP X0, X1, [X31 + 0x8]
	0x033D88BC LDRB W8, [X22 + 0x32A]
	0x033D88C0 LDR X21, [X21 + 0x5F0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x1006000
	008 Move W8, [X22+800]
	009 Move X20, X2
	010 Move W19, W1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD51000
	017 Move X0, [X0+120]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+800], W8
	021 Move W0, W19
	022 Move X1, X31
	023 Call NumberFormatInfo.ValidateParseStyleFloatingPoint, X0
	024 Compare X21, 0
	025 JumpIfNotEqual {29}
	026 Move W0, 48
	027 Move X1, X31
	028 Call ThrowHelper.ThrowArgumentNullException, X0
	029 Move X22, 0x1002000
	030 Move W8, [X22+1890]
	031 Compare W8, 0
	032 JumpIfNotEqual {38}
	033 Move X0, 0xD43000
	034 Move X0, [X0+656]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X22+1890], W8
	038 Move X23, 0xD51000
	039 Move X23, [X23+120]
	040 Compare X21, 0
	041 JumpIfEqual {47}
	042 Move X0, X21
	043 Move X1, X31
	044 Call String.GetRawStringData, X0
	045 Move W21, [X21+16]
	046 Move X22, X0
	047 Move X22, X31
	048 Move X0, X20
	049 Move X1, X31
	050 Call NumberFormatInfo.GetInstance, X0
	051 Move X8, [X23]
	052 Move X20, X0
	053 Move W9, [X8+224]
	054 Compare W9, 0
	055 JumpIfNotEqual {58}
	056 Move X0, X8
	057 Call 0x1C17DFC
	058 Move X0, X22
	059 Move X1, X21
	060 Move W2, W19
	061 Move X3, X20
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X22, [X31+16]
	065 Move X21, [X31+24]
	066 Move X4, X31
	067 Move X30, [X31+48]
	068 Move X23, [X31+56]
	069 Call Number.ParseDecimal, X0, X1, X2
	070 Return X0

Method: System.Boolean TryParse(System.String s, out System.Decimal result)

Disassembly:
	0x033D88C4 TBNZ X8, 0x0, 0x33D88DC
	0x033D88C8 ADRP X0, 0xD43000
	0x033D88CC LDR X0, [X0 + 0x5F0]
	0x033D88D0 BL 0x1C16CF4
	0x033D88D4 MOVZ W8, 0x1
	0x033D88D8 STRB W8, [X22 + 0x32A]
	0x033D88DC LDR X0, [X21]
	0x033D88E0 LDR W8, [X0 + 0xE0]
	0x033D88E4 CBNZ W8, 0x33D88EC
	0x033D88E8 BL 0x1C16DFC
	0x033D88EC ADRP X22, 0x1005000
	0x033D88F0 LDRB W8, [X22 + 0x3E6]
	0x033D88F4 CBNZ W8, 0x33D8918
	0x033D88F8 ADRP X0, 0xD54000
	0x033D88FC LDR X0, [X0 + 0xDE8]
	0x033D8900 BL 0x1C16CF4
	0x033D8904 ADRP X0, 0xD43000
	0x033D8908 LDR X0, [X0 + 0x5F0]
	0x033D890C BL 0x1C16CF4
	0x033D8910 MOVZ W8, 0x1
	0x033D8914 STRB W8, [X22 + 0x3E6]
	0x033D8918 ANDS W31, W19, 0xFF0000
	0x033D891C B.EQ 0x33D8964
	0x033D8920 LDR X0, [X21]
	0x033D8924 LDR W8, [X0 + 0xE0]
	0x033D8928 CBNZ W8, 0x33D8930
	0x033D892C BL 0x1C16DFC
	0x033D8930 ADRP X8, 0xD54000
	0x033D8934 LDR X8, [X8 + 0xDE8]
	0x033D8938 LDR X0, [X8]
	0x033D893C LDR W8, [X0 + 0xE0]
	0x033D8940 CBNZ W8, 0x33D8948
	0x033D8944 BL 0x1C16DFC
	0x033D8948 UBFM W1, W19, 0x10, 0x17
	0x033D894C ADD X0, X31, 0x8
	0x033D8950 MOVZ W2, 0x2
	0x033D8954 BL 0x33D7CE4
	0x033D8958 LDR W8, [X31 + 0xC]
	0x033D895C CBZ W8, 0x33D896C
	0x033D8960 B 0x33D89DC
	0x033D8964 UBFM X8, X19, 0x20, 0x3F
	0x033D8968 CBNZ W8, 0x33D89DC
	0x033D896C LDR X0, [X21]
	0x033D8970 LDR W8, [X0 + 0xE0]
	0x033D8974 CBNZ W8, 0x33D897C
	0x033D8978 BL 0x1C16DFC
	0x033D897C ADRP X19, 0x1005000
	0x033D8980 LDRB W8, [X19 + 0x310]
	0x033D8984 TBNZ X8, 0x0, 0x33D899C
	0x033D8988 ADRP X0, 0xD43000
	0x033D898C LDR X0, [X0 + 0x5F0]
	0x033D8990 BL 0x1C16CF4
	0x033D8994 MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1006000
	007 Move W8, [X21+801]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD51000
	015 Move X0, [X0+120]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+801], W8
	019 Compare X20, 0
	020 JumpIfEqual {59}
	021 Move X21, 0x1002000
	022 Move X22, 0xD51000
	023 Move W8, [X21+1890]
	024 Move X22, [X22+120]
	025 Compare W8, 0
	026 JumpIfNotEqual {32}
	027 Move X0, 0xD43000
	028 Move X0, [X0+656]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X21+1890], W8
	032 Move X0, X20
	033 Move X1, X31
	034 Call String.GetRawStringData, X0
	035 Move W20, [X20+16]
	036 Move X21, X0
	037 Move X0, X31
	038 Call NumberFormatInfo.get_CurrentInfo
	039 Move X8, [X22]
	040 Move X22, X0
	041 Move W9, [X8+224]
	042 Compare W9, 0
	043 JumpIfNotEqual {46}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X0, X21
	047 Move X1, X20
	048 Move X3, X22
	049 Move X4, X19
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move W2, 111
	055 Move X5, X31
	056 Move X30, [X31+48]
	057 Call Number.TryParseDecimal, X0, X1, X2, X3
	058 Return X0
	059 Move [X19], X31
	060 Move [X19+8], X31
	061 Move X20, [X31+32]
	062 Move X19, [X31+40]
	063 Move X22, [X31+16]
	064 Move X21, [X31+24]
	065 Move W0, W31
	066 Move X30, [X31+48]
	067 Return X0

Method: System.Boolean TryParse(System.String s, System.Globalization.NumberStyles style, System.IFormatProvider provider, out System.Decimal result)

Disassembly:
	0x033D8998 STRB W8, [X19 + 0x310]
	0x033D899C LDR W8, [X31 + 0x8]
	0x033D89A0 LDR X0, [X31 + 0x10]
	0x033D89A4 TBNZ X8, 0x1F, 0x33D89D0
	0x033D89A8 TBNZ X0, 0x0, 0x33D89DC
	0x033D89AC LDR X8, [X20 + 0x28]
	0x033D89B0 LDR X9, [X31 + 0x18]
	0x033D89B4 CMP X8, X9
	0x033D89B8 B.NE 0x33D8A24
	0x033D89BC LDP X20, X19, [X31 + 0x40]
	0x033D89C0 LDP X22, X21, [X31 + 0x30]
	0x033D89C4 LDR X30, [X31 + 0x20]
	0x033D89C8 ADD X31, X31, 0x50
	0x033D89CC RET
	0x033D89D0 SUB X0, X31, X0
	0x033D89D4 CMP X0, 0x1
	0x033D89D8 B.LT 0x33D89AC
	0x033D89DC ADRP X0, 0xD1B000
	0x033D89E0 LDR X0, [X0 + 0x858]
	0x033D89E4 BL 0x1C16D08
	0x033D89E8 BL 0x1C16F10
	0x033D89EC MOV X19, X0
	0x033D89F0 ADRP X0, 0xD50000
	0x033D89F4 LDR X0, [X0 + 0x1F0]
	0x033D89F8 BL 0x1C16D08
	0x033D89FC MOV X1, X0
	0x033D8A00 MOV X0, X19
	0x033D8A04 MOV X2, X31
	0x033D8A08 BL 0x338CB50
	0x033D8A0C ADRP X0, 0xD54000
	0x033D8A10 LDR X0, [X0 + 0xE78]
	0x033D8A14 BL 0x1C16D08
	0x033D8A18 MOV X1, X0
	0x033D8A1C MOV X0, X19
	0x033D8A20 BL 0x1C16DEC
	0x033D8A24 BL 0x3EB1B20
	0x033D8A28 STR X30, [X31 - 0x30]!
	0x033D8A2C STP X22, X21, [X31 + 0x10]
	0x033D8A30 STP X20, X19, [X31 + 0x20]
	0x033D8A34 ADRP X21, 0x1005000
	0x033D8A38 ADRP X22, 0xD43000
	0x033D8A3C LDRB W8, [X21 + 0x32B]
	0x033D8A40 LDR X22, [X22 + 0x5F0]
	0x033D8A44 MOV X19, X1
	0x033D8A48 MOV X20, X0
	0x033D8A4C TBNZ X8, 0x0, 0x33D8A64
	0x033D8A50 ADRP X0, 0xD43000
	0x033D8A54 LDR X0, [X0 + 0x5F0]
	0x033D8A58 BL 0x1C16CF4
	0x033D8A5C MOVZ W8, 0x1
	0x033D8A60 STRB W8, [X21 + 0x32B]
	0x033D8A64 LDR X0, [X22]
	0x033D8A68 LDR W8, [X0 + 0xE0]
	0x033D8A6C CBNZ W8, 0x33D8A74
	0x033D8A70 BL 0x1C16DFC
	0x033D8A74 MOV X0, X20
	0x033D8A78 MOV X1, X19
	0x033D8A7C BL 0x33D8120
	0x033D8A80 CMP W0, 0x10000
	0x033D8A84 B.CS 0x33D8A98
	0x033D8A88 LDP X20, X19, [X31 + 0x20]
	0x033D8A8C LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x1006000
	009 Move W8, [X23+802]
	010 Move X19, X3
	011 Move X21, X2
	012 Move W20, W1
	013 Move X22, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xD51000
	019 Move X0, [X0+120]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+802], W8
	023 Move W0, W20
	024 Move X1, X31
	025 Call NumberFormatInfo.ValidateParseStyleFloatingPoint, X0
	026 Compare X22, 0
	027 JumpIfEqual {69}
	028 Move X23, 0x1002000
	029 Move X24, 0xD51000
	030 Move W8, [X23+1890]
	031 Move X24, [X24+120]
	032 Compare W8, 0
	033 JumpIfNotEqual {39}
	034 Move X0, 0xD43000
	035 Move X0, [X0+656]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X23+1890], W8
	039 Move X0, X22
	040 Move X1, X31
	041 Call String.GetRawStringData, X0
	042 Move W22, [X22+16]
	043 Move X23, X0
	044 Move X0, X21
	045 Move X1, X31
	046 Call NumberFormatInfo.GetInstance, X0
	047 Move X8, [X24]
	048 Move X21, X0
	049 Move W9, [X8+224]
	050 Compare W9, 0
	051 JumpIfNotEqual {54}
	052 Move X0, X8
	053 Call 0x1C17DFC
	054 Move X0, X23
	055 Move X1, X22
	056 Move W2, W20
	057 Move X3, X21
	058 Move X4, X19
	059 Move X20, [X31+48]
	060 Move X19, [X31+56]
	061 Move X22, [X31+32]
	062 Move X21, [X31+40]
	063 Move X24, [X31+16]
	064 Move X23, [X31+24]
	065 Move X5, X31
	066 Move X30, [X31+64]
	067 Call Number.TryParseDecimal, X0, X1, X2, X3
	068 Return X0
	069 Move [X19], X31
	070 Move [X19+8], X31
	071 Move X20, [X31+48]
	072 Move X19, [X31+56]
	073 Move X22, [X31+32]
	074 Move X21, [X31+40]
	075 Move X24, [X31+16]
	076 Move X23, [X31+24]
	077 Move W0, W31
	078 Move X30, [X31+64]
	079 Return X0

Method: System.Decimal Round(System.Decimal d, System.Int32 decimals)

Disassembly:
	0x033D8A90 LDR X30, [X31], #0x30
	0x033D8A94 RET
	0x033D8A98 ADRP X0, 0xD1B000
	0x033D8A9C LDR X0, [X0 + 0x858]
	0x033D8AA0 BL 0x1C16D08
	0x033D8AA4 BL 0x1C16F10
	0x033D8AA8 MOV X19, X0
	0x033D8AAC ADRP X0, 0xD50000
	0x033D8AB0 LDR X0, [X0 + 0x1C0]
	0x033D8AB4 BL 0x1C16D08
	0x033D8AB8 MOV X1, X0
	0x033D8ABC MOV X0, X19
	0x033D8AC0 MOV X2, X31
	0x033D8AC4 BL 0x338CB50
	0x033D8AC8 ADRP X0, 0xD54000
	0x033D8ACC LDR X0, [X0 + 0xE80]
	0x033D8AD0 BL 0x1C16D08
	0x033D8AD4 MOV X1, X0
	0x033D8AD8 MOV X0, X19
	0x033D8ADC BL 0x1C16DEC
	0x033D8AE0 B 0x33D8AE4
	0x033D8AE4 MOV X19, X0
	0x033D8AE8 CMP W1, 0x1
	0x033D8AEC B.NE 0x33D8B94
	0x033D8AF0 MOV X0, X19
	0x033D8AF4 BL 0x3EB1AD0
	0x033D8AF8 MOV X19, X0
	0x033D8AFC ADRP X0, 0xD1B000
	0x033D8B00 LDR X0, [X0 + 0x858]
	0x033D8B04 BL 0x1C16D08
	0x033D8B08 LDR X8, [X19]
	0x033D8B0C LDR X1, [X8]
	0x033D8B10 BL 0x1C17270
	0x033D8B14 TBZ X0, 0x0, 0x33D8B6C
	0x033D8B18 LDR X19, [X19]
	0x033D8B1C BL 0x3EB1AE0
	0x033D8B20 ADRP X0, 0xD1B000

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 NotImplemented "Instruction MRS not yet implemented."
	008 Move X8, [X20+40]
	009 Move X21, 0x1006000
	010 Move X22, 0xD44000
	011 Move W19, W2
	012 Move [X31+24], X8
	013 Move [X31+8], X0
	014 Move [X31+16], X1
	015 Move W8, [X21+803]
	016 Move X22, [X22+1520]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xD44000
	022 Move X0, [X0+1520]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+803], W8
	026 Move X0, [X22]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Add X0, X31, 8
	032 Move W1, W19
	033 Move W2, W31
	034 Call Decimal.Round, X0, X1, X2
	035 Move X8, [X20+40]
	036 Move X9, [X31+24]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X20, [X31+64]
	039 Move X19, [X31+72]
	040 Move X22, [X31+48]
	041 Move X21, [X31+56]
	042 Move X30, [X31+32]
	043 Add X31, X31, 80
	044 Return X0
	045 Call 0x3EB2B20

Method: System.Decimal Round(ref System.Decimal d, System.Int32 decimals, System.MidpointRounding mode)

Disassembly:
	0x033D8B24 LDR X0, [X0 + 0x858]
	0x033D8B28 BL 0x1C16D08
	0x033D8B2C BL 0x1C16F10
	0x033D8B30 MOV X20, X0
	0x033D8B34 ADRP X0, 0xD50000
	0x033D8B38 LDR X0, [X0 + 0x1C0]
	0x033D8B3C BL 0x1C16D08
	0x033D8B40 MOV X1, X0
	0x033D8B44 MOV X0, X20
	0x033D8B48 MOV X2, X19
	0x033D8B4C MOV X3, X31
	0x033D8B50 BL 0x338CB74
	0x033D8B54 ADRP X0, 0xD54000
	0x033D8B58 LDR X0, [X0 + 0xE80]
	0x033D8B5C BL 0x1C16D08
	0x033D8B60 MOV X1, X0
	0x033D8B64 MOV X0, X20
	0x033D8B68 BL 0x1C16DEC
	0x033D8B6C MOVZ W0, 0x8
	0x033D8B70 BL 0x3EB1AF0
	0x033D8B74 LDR X8, [X19]
	0x033D8B78 STR X8, [X0]
	0x033D8B7C ADRP X1, 0xADC000
	0x033D8B80 ADD X1, X1, 0xE58
	0x033D8B84 MOV X2, X31
	0x033D8B88 BL 0x3EB1B00
	0x033D8B8C MOV X19, X0
	0x033D8B90 BL 0x3EB1AE0
	0x033D8B94 MOV X0, X19
	0x033D8B98 BL 0x1D2C690
	0x033D8B9C BL 0x1990590
	0x033D8BA0 SUB X31, X31, 0x50
	0x033D8BA4 STR X30, [X31 + 0x20]
	0x033D8BA8 STP X22, X21, [X31 + 0x30]
	0x033D8BAC STP X20, X19, [X31 + 0x40]
	0x033D8BB0 MRS X20, 0xC000
	0x033D8BB4 LDR X8, [X20 + 0x28]
	0x033D8BB8 ADRP X22, 0x1005000
	0x033D8BBC ADRP X21, 0xD43000
	0x033D8BC0 MOV X19, X0
	0x033D8BC4 STR X8, [X31 + 0x18]
	0x033D8BC8 STP X0, X1, [X31 + 0x8]
	0x033D8BCC LDRB W8, [X22 + 0x32D]
	0x033D8BD0 LDR X21, [X21 + 0x5F0]
	0x033D8BD4 TBNZ X8, 0x0, 0x33D8BEC
	0x033D8BD8 ADRP X0, 0xD43000
	0x033D8BDC LDR X0, [X0 + 0x5F0]
	0x033D8BE0 BL 0x1C16CF4
	0x033D8BE4 MOVZ W8, 0x1
	0x033D8BE8 STRB W8, [X22 + 0x32D]
	0x033D8BEC LDR X0, [X21]
	0x033D8BF0 LDR W8, [X0 + 0xE0]
	0x033D8BF4 CBNZ W8, 0x33D8BFC
	0x033D8BF8 BL 0x1C16DFC
	0x033D8BFC ADRP X22, 0x1005000
	0x033D8C00 LDRB W8, [X22 + 0x3E6]
	0x033D8C04 CBNZ W8, 0x33D8C28
	0x033D8C08 ADRP X0, 0xD54000
	0x033D8C0C LDR X0, [X0 + 0xDE8]
	0x033D8C10 BL 0x1C16CF4
	0x033D8C14 ADRP X0, 0xD43000
	0x033D8C18 LDR X0, [X0 + 0x5F0]
	0x033D8C1C BL 0x1C16CF4
	0x033D8C20 MOVZ W8, 0x1
	0x033D8C24 STRB W8, [X22 + 0x3E6]
	0x033D8C28 ANDS W31, W19, 0xFF0000
	0x033D8C2C B.EQ 0x33D8C74
	0x033D8C30 LDR X0, [X21]
	0x033D8C34 LDR W8, [X0 + 0xE0]
	0x033D8C38 CBNZ W8, 0x33D8C40
	0x033D8C3C BL 0x1C16DFC
	0x033D8C40 ADRP X8, 0xD54000
	0x033D8C44 LDR X8, [X8 + 0xDE8]
	0x033D8C48 LDR X0, [X8]
	0x033D8C4C LDR W8, [X0 + 0xE0]
	0x033D8C50 CBNZ W8, 0x33D8C58
	0x033D8C54 BL 0x1C16DFC
	0x033D8C58 UBFM W1, W19, 0x10, 0x17
	0x033D8C5C ADD X0, X31, 0x8
	0x033D8C60 MOVZ W2, 0x2
	0x033D8C64 BL 0x33D7CE4
	0x033D8C68 LDR W8, [X31 + 0xC]
	0x033D8C6C CBZ W8, 0x33D8C7C
	0x033D8C70 B 0x33D8CE0
	0x033D8C74 UBFM X8, X19, 0x20, 0x3F
	0x033D8C78 CBNZ W8, 0x33D8CE0
	0x033D8C7C LDR X0, [X21]
	0x033D8C80 LDR W8, [X0 + 0xE0]
	0x033D8C84 CBNZ W8, 0x33D8C8C
	0x033D8C88 BL 0x1C16DFC
	0x033D8C8C ADRP X19, 0x1005000
	0x033D8C90 LDRB W8, [X19 + 0x310]
	0x033D8C94 TBNZ X8, 0x0, 0x33D8CAC
	0x033D8C98 ADRP X0, 0xD43000
	0x033D8C9C LDR X0, [X0 + 0x5F0]
	0x033D8CA0 BL 0x1C16CF4
	0x033D8CA4 MOVZ W8, 0x1
	0x033D8CA8 STRB W8, [X19 + 0x310]
	0x033D8CAC LDR X0, [X31 + 0x10]
	0x033D8CB0 CBZ X0, 0x33D8CBC
	0x033D8CB4 LDR W8, [X31 + 0x8]
	0x033D8CB8 TBNZ X8, 0x1F, 0x33D8CE0
	0x033D8CBC LDR X8, [X20 + 0x28]
	0x033D8CC0 LDR X9, [X31 + 0x18]
	0x033D8CC4 CMP X8, X9
	0x033D8CC8 B.NE 0x33D8D28
	0x033D8CCC LDP X20, X19, [X31 + 0x40]
	0x033D8CD0 LDP X22, X21, [X31 + 0x30]
	0x033D8CD4 LDR X30, [X31 + 0x20]
	0x033D8CD8 ADD X31, X31, 0x50
	0x033D8CDC RET
	0x033D8CE0 ADRP X0, 0xD1B000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1006000
	007 Move W8, [X22+804]
	008 Move W19, W2
	009 Move W21, W1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xD55000
	016 Move X0, [X0+3560]
	017 Call 0x1C17CF4
	018 Move X0, 0xD44000
	019 Move X0, [X0+1520]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+804], W8
	023 NotImplemented "Instruction CMP not yet implemented."
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X22, 0xD44000
	026 Move X22, [X22+1520]
	027 Move X0, [X22]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move W8, [X20+2]
	033 Subtract W21, W8, W21
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X0, [X22]
	036 Move X22, 0xD55000
	037 Move W8, [X0+224]
	038 Move X22, [X22+3560]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, [X22]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X20
	048 Move W1, W21
	049 Move W2, W19
	050 Call DecCalc.InternalRound, X0, X1, X2
	051 Move X0, [X20]
	052 Move X1, [X20+8]
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X30, [X31+48]
	058 Return X0
	059 Move X0, 0xD24000
	060 Move X0, [X0+1888]
	061 Call 0x1C17D08
	062 Call 0x1C17F10
	063 Move X19, X0
	064 Move X0, 0xD55000
	065 Move X0, [X0+3640]
	066 Call 0x1C17D08
	067 Move X20, X0
	068 Move X0, 0xD55000
	069 Move X0, [X0+3648]
	070 Call 0x1C17D08
	071 Move X2, X0
	072 Move X0, X19
	073 Move X1, X20
	074 Move X3, X31
	075 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	076 Move X0, 0xD55000
	077 Move X0, [X0+3656]
	078 Call 0x1C17D08
	079 Move X1, X0
	080 Move X0, X19
	081 Call 0x1C17DEC
	082 Move [X31+12], W19
	083 Move X0, 0xD53000
	084 Move X0, [X0+3872]
	085 Call 0x1C17D08
	086 Add X1, X31, 12
	087 Call 0x1C17E04
	088 Move X19, X0
	089 Move X0, 0xD53000
	090 Move X0, [X0+3880]
	091 Call 0x1C17D08
	092 Move X20, X0
	093 Move X0, 0xD53000
	094 Move X0, [X0+3888]
	095 Call 0x1C17D08
	096 Move X2, X0
	097 Move X0, X20
	098 Move X1, X19
	099 Move X3, X31
	100 Call SR.Format, X0, X1, X2
	101 Move X19, X0
	102 Move X0, 0xD24000
	103 Move X0, [X0+1400]
	104 Call 0x1C17D08
	105 Call 0x1C17F10
	106 Move X20, X0
	107 Move X0, 0xD4D000
	108 Move X0, [X0+104]
	109 Call 0x1C17D08
	110 Move X2, X0
	111 Move X0, X20
	112 Move X1, X19
	113 Move X3, X31
	114 Call ArgumentException..ctor, X0, X1, X2
	115 Move X0, 0xD55000
	116 Move X0, [X0+3656]
	117 Call 0x1C17D08
	118 Move X1, X0
	119 Move X0, X20
	120 Call 0x1C17DEC

Method: System.Byte ToByte(System.Decimal value)

Disassembly:
	0x033D8FA8 ADD X31, X31, 0x30
	0x033D8FAC RET
	0x033D8FB0 BL 0x3EB1B20
	0x033D8FB4 STR X30, [X31 - 0x30]!
	0x033D8FB8 STP X22, X21, [X31 + 0x10]
	0x033D8FBC STP X20, X19, [X31 + 0x20]
	0x033D8FC0 ADRP X22, 0x1005000
	0x033D8FC4 ADRP X21, 0xD43000
	0x033D8FC8 LDRB W8, [X22 + 0x330]
	0x033D8FCC LDR X21, [X21 + 0x5F0]
	0x033D8FD0 MOV X19, X1
	0x033D8FD4 MOV X20, X0
	0x033D8FD8 TBNZ X8, 0x0, 0x33D8FF0
	0x033D8FDC ADRP X0, 0xD43000
	0x033D8FE0 LDR X0, [X0 + 0x5F0]
	0x033D8FE4 BL 0x1C16CF4
	0x033D8FE8 MOVZ W8, 0x1
	0x033D8FEC STRB W8, [X22 + 0x330]
	0x033D8FF0 LDR X0, [X21]
	0x033D8FF4 LDR W8, [X0 + 0xE0]
	0x033D8FF8 CBNZ W8, 0x33D9000
	0x033D8FFC BL 0x1C16DFC
	0x033D9000 MOV X0, X20
	0x033D9004 MOV X1, X19
	0x033D9008 LDP X20, X19, [X31 + 0x20]
	0x033D900C LDP X22, X21, [X31 + 0x10]
	0x033D9010 LDR X30, [X31], #0x30
	0x033D9014 B 0x33D8410
	0x033D9018 STR X30, [X31 - 0x30]!
	0x033D901C STP X22, X21, [X31 + 0x10]
	0x033D9020 STP X20, X19, [X31 + 0x20]
	0x033D9024 ADRP X22, 0x1004000
	0x033D9028 ADRP X21, 0xD42000
	0x033D902C LDRB W8, [X22 + 0x331]
	0x033D9030 LDR X21, [X21 + 0x5F0]
	0x033D9034 MOV X19, X1
	0x033D9038 MOV X20, X0
	0x033D903C TBNZ X8, 0x0, 0x33D9054
	0x033D9040 ADRP X0, 0xD42000
	0x033D9044 LDR X0, [X0 + 0x5F0]
	0x033D9048 BL 0x1C16CF4
	0x033D904C MOVZ W8, 0x1
	0x033D9050 STRB W8, [X22 + 0x331]
	0x033D9054 LDR X0, [X21]
	0x033D9058 LDR W8, [X0 + 0xE0]
	0x033D905C CBNZ W8, 0x33D9064
	0x033D9060 BL 0x1C16DFC
	0x033D9064 MOV X0, X20
	0x033D9068 MOV X1, X19
	0x033D906C LDP X20, X19, [X31 + 0x20]
	0x033D9070 LDP X22, X21, [X31 + 0x10]
	0x033D9074 LDR X30, [X31], #0x30
	0x033D9078 B 0x33D8890
	0x033D907C STR X30, [X31 - 0x30]!
	0x033D9080 STP X22, X21, [X31 + 0x10]
	0x033D9084 STP X20, X19, [X31 + 0x20]
	0x033D9088 ADRP X22, 0x1004000
	0x033D908C ADRP X21, 0xD42000
	0x033D9090 LDRB W8, [X22 + 0x332]
	0x033D9094 LDR X21, [X21 + 0x5F0]
	0x033D9098 MOV X19, X1
	0x033D909C MOV X20, X0
	0x033D90A0 TBNZ X8, 0x0, 0x33D90B8
	0x033D90A4 ADRP X0, 0xD42000
	0x033D90A8 LDR X0, [X0 + 0x5F0]
	0x033D90AC BL 0x1C16CF4
	0x033D90B0 MOVZ W8, 0x1
	0x033D90B4 STRB W8, [X22 + 0x332]
	0x033D90B8 LDR X0, [X21]
	0x033D90BC LDR W8, [X0 + 0xE0]
	0x033D90C0 CBNZ W8, 0x33D90C8
	0x033D90C4 BL 0x1C16DFC
	0x033D90C8 MOV X0, X20
	0x033D90CC MOV X1, X19
	0x033D90D0 LDP X20, X19, [X31 + 0x20]
	0x033D90D4 LDP X22, X21, [X31 + 0x10]
	0x033D90D8 LDR X30, [X31], #0x30
	0x033D90DC B 0x33D8D2C
	0x033D90E0 STR X30, [X31 - 0x30]!
	0x033D90E4 STP X22, X21, [X31 + 0x10]
	0x033D90E8 STP X20, X19, [X31 + 0x20]
	0x033D90EC ADRP X22, 0x1004000
	0x033D90F0 ADRP X21, 0xD42000
	0x033D90F4 LDRB W8, [X22 + 0x333]
	0x033D90F8 LDR X21, [X21 + 0x5F0]
	0x033D90FC MOV X19, X1
	0x033D9100 MOV X20, X0
	0x033D9104 TBNZ X8, 0x0, 0x33D911C
	0x033D9108 ADRP X0, 0xD42000
	0x033D910C LDR X0, [X0 + 0x5F0]
	0x033D9110 BL 0x1C16CF4
	0x033D9114 MOVZ W8, 0x1
	0x033D9118 STRB W8, [X22 + 0x333]
	0x033D911C LDR X0, [X21]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1006000
	007 Move X22, 0xD44000
	008 Move W8, [X21+805]
	009 Move X22, [X22+1520]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD44000
	017 Move X0, [X0+1520]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+805], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Call Decimal.ToUInt32, X0
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Return X0
	036 Move X0, 0xD1B000
	037 Move X0, [X0+2136]
	038 Call 0x1C17D08
	039 Call 0x1C17F10
	040 Move X19, X0
	041 Move X0, 0xD50000
	042 Move X0, [X0+128]
	043 Call 0x1C17D08
	044 Move X1, X0
	045 Move X0, X19
	046 Move X2, X31
	047 Call OverflowException..ctor, X0, X1
	048 Move X0, 0xD54000
	049 Move X0, [X0+3664]
	050 Call 0x1C17D08
	051 Move X1, X0
	052 Move X0, X19
	053 Call 0x1C17DEC
	054 Move X19, X0
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X0, X19
	057 Call 0x3EB2AD0
	058 Move X19, X0
	059 Move X0, 0xD1B000
	060 Move X0, [X0+2136]
	061 Call 0x1C17D08
	062 Move X8, [X19]
	063 Move X1, [X8]
	064 Call 0x1C18270
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {90}
	069 Move X19, [X19]
	070 Call 0x3EB2AE0
	071 Move X0, 0xD1B000
	072 Move X0, [X0+2136]
	073 Call 0x1C17D08
	074 Call 0x1C17F10
	075 Move X20, X0
	076 Move X0, 0xD50000
	077 Move X0, [X0+128]
	078 Call 0x1C17D08
	079 Move X1, X0
	080 Move X0, X20
	081 Move X2, X19
	082 Move X3, X31
	083 Call OverflowException..ctor, X0, X1, X2
	084 Move X0, 0xD54000
	085 Move X0, [X0+3664]
	086 Call 0x1C17D08
	087 Move X1, X0
	088 Move X0, X20
	089 Call 0x1C17DEC
	090 Move W0, 8
	091 Call 0x3EB2AF0
	092 Move X8, [X19]
	093 Move [X0], X8
	094 Move X1, 0xADC000
	095 Add X1, X1, 3672
	096 Move X2, X31
	097 Call 0x3EB2B00
	098 Move X19, X0
	099 Call 0x3EB2AE0
	100 Move X0, X19
	101 Call 0x1D2D690
	102 Call 0x1991590

Method: System.SByte ToSByte(System.Decimal value)

Disassembly:
	0x033D9298 ORR W8, W8, W9, 0x0
	0x033D929C SUBS W9, W8, W24
	0x033D92A0 STR X28, [X31]
	0x033D92A4 SBFM W28, W9, 0x10, 0x1F
	0x033D92A8 B.MI 0x33D92B8
	0x033D92AC MOV W24, W8
	0x033D92B0 CBNZ W27, 0x33D93C4
	0x033D92B4 B 0x33D92F0
	0x033D92B8 LDR X0, [X23]
	0x033D92BC LDP W11, W10, [X31 + 0x8]
	0x033D92C0 EOR W9, W24, 0x80000000
	0x033D92C4 SUB W28, W31, W28
	0x033D92C8 LDR W8, [X0 + 0xE0]
	0x033D92CC CMP W11, W10
	0x033D92D0 CSEL W24, W24, W9, EQ
	0x033D92D4 CBNZ W8, 0x33D92DC
	0x033D92D8 BL 0x1C16DFC
	0x033D92DC LDR X26, [X20 + 0x8]
	0x033D92E0 LDR V0, [X19]
	0x033D92E4 LDR W27, [X20 + 0x4]
	0x033D92E8 STR V0, [X20]
	0x033D92EC CBNZ W27, 0x33D93C4
	0x033D92F0 UBFM X8, X26, 0x20, 0x3F
	0x033D92F4 CBNZ X8, 0x33D9334
	0x033D92F8 CBZ W26, 0x33D978C
	0x033D92FC MOVZ W22, 0xCA00
	0x033D9300 SXTW X28, W28
	0x033D9304 MOVK W22, 0x3B9A0000
	0x033D9308 CMP W28, 0x9
	0x033D930C B.LE 0x33D97BC
	0x033D9310 LDR X0, [X23]
	0x033D9314 LDR W8, [X0 + 0xE0]
	0x033D9318 CBNZ W8, 0x33D9320
	0x033D931C BL 0x1C16DFC
	0x033D9320 AND X8, X26, 0x0
	0x033D9324 MUL X26, X8, X22
	0x033D9328 UBFM X8, X26, 0x20, 0x3F
	0x033D932C SUB X28, X28, 0x9
	0x033D9330 CBZ X8, 0x33D9308
	0x033D9334 SXTW X27, W28
	0x033D9338 LDR X28, [X31]
	0x033D933C LDR X0, [X23]
	0x033D9340 CMP X27, 0x8
	0x033D9344 B.LE 0x33D9354
	0x033D9348 MOVZ W22, 0xCA00
	0x033D934C MOVK W22, 0x3B9A0000
	0x033D9350 B 0x33D9384
	0x033D9354 LDR W8, [X0 + 0xE0]
	0x033D9358 CBNZ W8, 0x33D9364
	0x033D935C BL 0x1C16DFC
	0x033D9360 LDR X0, [X23]
	0x033D9364 LDR X8, [X0 + 0xB8]
	0x033D9368 LDR X8, [X8]
	0x033D936C CBZ X8, 0x33D980C
	0x033D9370 LDR W9, [X8 + 0x18]
	0x033D9374 CMP W27, W9
	0x033D9378 B.CS 0x33D9810
	0x033D937C ADD X8, X8, X27, 0x2, LSL
	0x033D9380 LDR W22, [X8 + 0x20]
	0x033D9384 LDR W8, [X0 + 0xE0]
	0x033D9388 CBNZ W8, 0x33D9390
	0x033D938C BL 0x1C16DFC
	0x033D9390 MOV W8, W22
	0x033D9394 UBFM X9, X26, 0x20, 0x3F
	0x033D9398 UMADDL X26, X26, X22, X31
	0x033D939C MUL X8, X9, X8
	0x033D93A0 ADD X8, X8, X26, 0x20, LSR
	0x033D93A4 BFM X26, X8, 0x20, 0x1F
	0x033D93A8 CMP X27, 0xA
	0x033D93AC UBFM X8, X8, 0x20, 0x3F
	0x033D93B0 B.LT 0x33D9570
	0x033D93B4 SUB X27, X27, 0x9
	0x033D93B8 CBZ X8, 0x33D933C
	0x033D93BC MOV W28, W27
	0x033D93C0 MOV W27, W8
	0x033D93C4 SXTW X28, W28
	0x033D93C8 LDR X0, [X23]
	0x033D93CC SUBS X29, X28, 0x9
	0x033D93D0 B.LT 0x33D93E0
	0x033D93D4 MOVZ W22, 0xCA00
	0x033D93D8 MOVK W22, 0x3B9A0000
	0x033D93DC B 0x33D9410
	0x033D93E0 LDR W8, [X0 + 0xE0]
	0x033D93E4 CBNZ W8, 0x33D93F0
	0x033D93E8 BL 0x1C16DFC
	0x033D93EC LDR X0, [X23]
	0x033D93F0 LDR X8, [X0 + 0xB8]
	0x033D93F4 LDR X8, [X8]
	0x033D93F8 CBZ X8, 0x33D980C
	0x033D93FC LDR W9, [X8 + 0x18]
	0x033D9400 CMP W28, W9
	0x033D9404 B.CS 0x33D9810
	0x033D9408 ADD X8, X8, X28, 0x2, LSL
	0x033D940C LDR W22, [X8 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1005000
	007 Move X22, 0xD43000
	008 Move W8, [X21+806]
	009 Move X22, [X22+1520]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD43000
	017 Move X0, [X0+1520]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+806], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Call Decimal.ToInt32, X0
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Return X0
	036 Move X0, 0xD1B000
	037 Move X0, [X0+2136]
	038 Call 0x1C17D08
	039 Call 0x1C17F10
	040 Move X19, X0
	041 Move X0, 0xD50000
	042 Move X0, [X0+416]
	043 Call 0x1C17D08
	044 Move X1, X0
	045 Move X0, X19
	046 Move X2, X31
	047 Call OverflowException..ctor, X0, X1
	048 Move X0, 0xD54000
	049 Move X0, [X0+3680]
	050 Call 0x1C17D08
	051 Move X1, X0
	052 Move X0, X19
	053 Call 0x1C17DEC
	054 Move X19, X0
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X0, X19
	057 Call 0x3EB2AD0
	058 Move X19, X0
	059 Move X0, 0xD1B000
	060 Move X0, [X0+2136]
	061 Call 0x1C17D08
	062 Move X8, [X19]
	063 Move X1, [X8]
	064 Call 0x1C18270
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {90}
	069 Move X19, [X19]
	070 Call 0x3EB2AE0
	071 Move X0, 0xD1B000
	072 Move X0, [X0+2136]
	073 Call 0x1C17D08
	074 Call 0x1C17F10
	075 Move X20, X0
	076 Move X0, 0xD50000
	077 Move X0, [X0+416]
	078 Call 0x1C17D08
	079 Move X1, X0
	080 Move X0, X20
	081 Move X2, X19
	082 Move X3, X31
	083 Call OverflowException..ctor, X0, X1, X2
	084 Move X0, 0xD54000
	085 Move X0, [X0+3680]
	086 Call 0x1C17D08
	087 Move X1, X0
	088 Move X0, X20
	089 Call 0x1C17DEC
	090 Move W0, 8
	091 Call 0x3EB2AF0
	092 Move X8, [X19]
	093 Move [X0], X8
	094 Move X1, 0xADC000
	095 Add X1, X1, 3672
	096 Move X2, X31
	097 Call 0x3EB2B00
	098 Move X19, X0
	099 Call 0x3EB2AE0
	100 Move X0, X19
	101 Call 0x1D2D690
	102 Call 0x1991590

Method: System.Int16 ToInt16(System.Decimal value)

Disassembly:
	0x033D9598 ADDS X21, X8, X26
	0x033D959C ADD W25, W9, W27
	0x033D95A0 B.CC 0x33D95D8
	0x033D95A4 ADD W25, W25, 0x1
	0x033D95A8 CMP W25, W27
	0x033D95AC B.LS 0x33D95E0
	0x033D95B0 B 0x33D9734
	0x033D95B4 LDR W9, [X20 + 0x4]
	0x033D95B8 SUBS X21, X26, X8
	0x033D95BC SUB W25, W27, W9
	0x033D95C0 B.CS 0x33D9658
	0x033D95C4 SUB W8, W25, 0x1
	0x033D95C8 CMP W8, W27
	0x033D95CC B.CS 0x33D9678
	0x033D95D0 MOV W25, W8
	0x033D95D4 B 0x33D9734
	0x033D95D8 CMP W25, W27
	0x033D95DC B.CS 0x33D9734
	0x033D95E0 ANDS W31, W24, 0xFF0000
	0x033D95E4 B.EQ 0x33D9814
	0x033D95E8 MOV W8, W25
	0x033D95EC ORR X10, X31, 0xCCCCCCCCCCCCCCCC
	0x033D95F0 MOVK X10, 0xCCCD
	0x033D95F4 ORR X8, X8, 0x1FFFFFFFF
	0x00000000 INVALID
	0x033D95FC MOVN W11, 0x9
	0x033D9600 UBFM X8, X8, 0x3, 0x3F
	0x033D9604 MADD W9, W8, W11, W25
	0x033D9608 EXTR X12, X9, X21, 0x20
	0x00000000 INVALID
	0x033D9610 UBFM X13, X9, 0x3, 0x3F
	0x033D9614 UBFM X9, X13, 0x20, 0x1F
	0x033D9618 MADD W12, W13, W11, W12
	0x033D961C AND X13, X21, 0xFFFFFFFF
	0x033D9620 BFM X13, X12, 0x20, 0x1F
	0x00000000 INVALID
	0x033D9628 UBFM X10, X12, 0x3, 0x3F
	0x033D962C MADD W11, W10, W11, W21
	0x033D9630 SUB W24, W24, 0x10000
	0x033D9634 CMP W11, 0x5
	0x033D9638 BFM X9, X12, 0x3, 0x22
	0x033D963C B.CC 0x33D964C
	0x033D9640 TBNZ X10, 0x0, 0x33D9780
	0x033D9644 CMP W11, 0x5
	0x033D9648 B.NE 0x33D9780
	0x033D964C MOV W25, W8
	0x033D9650 MOV X21, X9
	0x033D9654 B 0x33D9734
	0x033D9658 CMP W27, W9
	0x033D965C B.CS 0x33D9734
	0x033D9660 CMP X21, 0x0
	0x033D9664 SUB W8, W31, W25
	0x033D9668 EOR W24, W24, 0x80000000
	0x033D966C SUB X21, X31, X21
	0x033D9670 CSINV W25, W8, W25, EQ
	0x033D9674 B 0x33D9734
	0x033D9678 EOR W24, W24, 0x80000000
	0x033D967C SUB W25, W31, W25
	0x033D9680 SUB X21, X31, X21
	0x033D9684 B 0x33D9734
	0x033D9688 CMP W25, W8
	0x033D968C B.CS 0x33D96F8
	0x033D9690 MOVZ W20, 0x3
	0x033D9694 ADD X8, X31, 0x10
	0x033D9698 LDR W9, [X8, W20, UXTW]
	0x033D969C ADDS W9, W9, 0x1
	0x033D96A0 STR W9, [X8, W20, UXTW]
	0x033D96A4 B.CC 0x33D96F8
	0x033D96A8 ADD W20, W20, 0x1
	0x033D96AC CMP W27, W20
	0x033D96B0 B.CS 0x33D9698
	0x033D96B4 ADD X8, X31, 0x10
	0x033D96B8 MOVZ W9, 0x1
	0x033D96BC STR W9, [X8, W20, UXTW]
	0x033D96C0 B 0x33D96FC
	0x033D96C4 CMP W8, W9
	0x033D96C8 B.CS 0x33D96F8
	0x033D96CC MOVZ W8, 0x3
	0x033D96D0 ADD X9, X31, 0x10
	0x033D96D4 LDR W10, [X9, W8, UXTW]
	0x033D96D8 ADD W11, W8, 0x1
	0x033D96DC SUB W12, W10, 0x1
	0x033D96E0 STR W12, [X9, W8, UXTW]
	0x033D96E4 MOV W8, W11
	0x033D96E8 CBZ W10, 0x33D96D4
	0x033D96EC ADD X8, X31, 0x10
	0x033D96F0 LDR W8, [X8, W27, UXTW]
	0x033D96F4 CBZ W8, 0x33D97FC
	0x033D96F8 MOV W20, W27
	0x033D96FC LDR X0, [X23]
	0x033D9700 STR X21, [X31 + 0x10]
	0x033D9704 STR W25, [X31 + 0x18]
	0x033D9708 LDR W8, [X0 + 0xE0]
	0x033D970C CBNZ W8, 0x33D9714

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1005000
	007 Move X22, 0xD43000
	008 Move W8, [X21+807]
	009 Move X22, [X22+1520]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD43000
	017 Move X0, [X0+1520]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+807], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Call Decimal.ToInt32, X0
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Return X0
	036 Move X0, 0xD1B000
	037 Move X0, [X0+2136]
	038 Call 0x1C17D08
	039 Call 0x1C17F10
	040 Move X19, X0
	041 Move X0, 0xD50000
	042 Move X0, [X0+432]
	043 Call 0x1C17D08
	044 Move X1, X0
	045 Move X0, X19
	046 Move X2, X31
	047 Call OverflowException..ctor, X0, X1
	048 Move X0, 0xD54000
	049 Move X0, [X0+3696]
	050 Call 0x1C17D08
	051 Move X1, X0
	052 Move X0, X19
	053 Call 0x1C17DEC
	054 Move X19, X0
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X0, X19
	057 Call 0x3EB2AD0
	058 Move X19, X0
	059 Move X0, 0xD1B000
	060 Move X0, [X0+2136]
	061 Call 0x1C17D08
	062 Move X8, [X19]
	063 Move X1, [X8]
	064 Call 0x1C18270
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {90}
	069 Move X19, [X19]
	070 Call 0x3EB2AE0
	071 Move X0, 0xD1B000
	072 Move X0, [X0+2136]
	073 Call 0x1C17D08
	074 Call 0x1C17F10
	075 Move X20, X0
	076 Move X0, 0xD50000
	077 Move X0, [X0+432]
	078 Call 0x1C17D08
	079 Move X1, X0
	080 Move X0, X20
	081 Move X2, X19
	082 Move X3, X31
	083 Call OverflowException..ctor, X0, X1, X2
	084 Move X0, 0xD54000
	085 Move X0, [X0+3696]
	086 Call 0x1C17D08
	087 Move X1, X0
	088 Move X0, X20
	089 Call 0x1C17DEC
	090 Move W0, 8
	091 Call 0x3EB2AF0
	092 Move X8, [X19]
	093 Move [X0], X8
	094 Move X1, 0xADC000
	095 Add X1, X1, 3672
	096 Move X2, X31
	097 Call 0x3EB2B00
	098 Move X19, X0
	099 Call 0x3EB2AE0
	100 Move X0, X19
	101 Call 0x1D2D690
	102 Call 0x1991590

Method: System.Double ToDouble(System.Decimal d)

Disassembly:
	0x033D9710 BL 0x1C16DFC
	0x033D9714 UBFM W2, W24, 0x10, 0x17
	0x033D9718 ADD X0, X31, 0x10
	0x033D971C MOV W1, W20
	0x033D9720 BL 0x33DB670
	0x033D9724 LDR X21, [X31 + 0x10]
	0x033D9728 LDR W25, [X31 + 0x18]
	0x033D972C AND W8, W24, 0xFF00FFFF
	0x033D9730 ORR W24, W8, W0, 0x10
	0x033D9734 STR W24, [X19]
	0x033D9738 LDR X0, [X23]
	0x033D973C LDR W8, [X0 + 0xE0]
	0x033D9740 CBNZ W8, 0x33D9748
	0x033D9744 BL 0x1C16DFC
	0x033D9748 STR W25, [X19 + 0x4]
	0x033D974C STR X21, [X19 + 0x8]
	0x033D9750 LDR X8, [X28 + 0x28]
	0x033D9754 LDR X9, [X31 + 0x28]
	0x033D9758 CMP X8, X9
	0x033D975C B.NE 0x33D985C
	0x033D9760 LDP X20, X19, [X31 + 0x80]
	0x033D9764 LDP X22, X21, [X31 + 0x70]
	0x033D9768 LDP X24, X23, [X31 + 0x60]
	0x033D976C LDP X26, X25, [X31 + 0x50]
	0x033D9770 LDP X28, X27, [X31 + 0x40]
	0x033D9774 LDP X29, X30, [X31 + 0x30]
	0x033D9778 ADD X31, X31, 0x90
	0x033D977C RET
	0x033D9780 ADDS X21, X9, 0x1
	0x033D9784 CINC W25, W8, CS
	0x033D9788 B 0x33D9734
	0x033D978C LDR V0, [X20]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 NotImplemented "Instruction MRS not yet implemented."
	007 Move X8, [X19+40]
	008 Move X20, 0x1005000
	009 Move X21, 0xD54000
	010 Move [X31+24], X8
	011 Move [X31+8], X0
	012 Move [X31+16], X1
	013 Move W8, [X20+808]
	014 Move X21, [X21+3560]
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xD54000
	020 Move X0, [X0+3560]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+808], W8
	024 Move X0, [X21]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Add X0, X31, 8
	030 Call DecCalc.VarR8FromDec, X0
	031 Move X8, [X19+40]
	032 Move X9, [X31+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X20, [X31+48]
	035 Move X19, [X31+56]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Add X31, X31, 64
	039 Return V0
	040 Call 0x3EB2B20

Method: System.Int32 ToInt32(System.Decimal d)

Disassembly:
	0x033D9410 LDR W8, [X0 + 0xE0]
	0x033D9414 CBNZ W8, 0x33D941C
	0x033D9418 BL 0x1C16DFC
	0x033D941C MOV W8, W22
	0x033D9420 UBFM X9, X26, 0x20, 0x3F
	0x033D9424 UMADDL X26, X26, X22, X31
	0x033D9428 MUL X8, X9, X8
	0x033D942C ADD X8, X8, X26, 0x20, LSR
	0x033D9430 UBFM X9, X8, 0x20, 0x3F
	0x033D9434 UMADDL X27, X22, X27, X9
	0x033D9438 UBFM X9, X27, 0x20, 0x3F
	0x033D943C BFM X26, X8, 0x20, 0x1F
	0x033D9440 CBNZ X9, 0x33D945C
	0x033D9444 ADD X8, X29, 0x9
	0x033D9448 CMP X8, 0x9
	0x033D944C MOV X28, X29
	0x033D9450 B.GT 0x33D93C8
	0x033D9454 LDR X28, [X31]
	0x033D9458 B 0x33D9574
	0x033D945C SUB W28, W28, 0x9
	0x033D9460 CMP W28, 0x1
	0x033D9464 STP X26, X27, [X31 + 0x10]
	0x033D9468 MOVZ W27, 0x3
	0x033D946C B.LT 0x33D950C
	0x033D9470 ADD X26, X31, 0x10
	0x033D9474 MOVZ W9, 0xCA00
	0x033D9478 CMP W28, 0x8
	0x033D947C MOVK W9, 0x3B9A0000
	0x033D9480 B.GT 0x33D94B8
	0x033D9484 LDR X0, [X23]
	0x033D9488 LDR W8, [X0 + 0xE0]
	0x033D948C CBNZ W8, 0x33D9498
	0x033D9490 BL 0x1C16DFC
	0x033D9494 LDR X0, [X23]
	0x033D9498 LDR X8, [X0 + 0xB8]
	0x033D949C LDR X8, [X8]
	0x033D94A0 CBZ X8, 0x33D980C
	0x033D94A4 LDR W9, [X8 + 0x18]
	0x033D94A8 CMP W28, W9
	0x033D94AC B.CS 0x33D9810
	0x033D94B0 ADD X8, X8, W28, 0x2, UXTW
	0x033D94B4 LDR W9, [X8 + 0x20]
	0x033D94B8 MOV W8, W31
	0x033D94BC MOV X22, X31
	0x033D94C0 MOV W29, W9
	0x033D94C4 LDR X0, [X23]
	0x033D94C8 LDR W25, [X26, W8, UXTW]
	0x033D94CC MOV W21, W8
	0x033D94D0 LDR W9, [X0 + 0xE0]
	0x033D94D4 CBNZ W9, 0x33D94DC
	0x033D94D8 BL 0x1C16DFC
	0x033D94DC MADD X9, X25, X29, X22
	0x033D94E0 ADD W8, W21, 0x1
	0x033D94E4 CMP W8, W27
	0x033D94E8 UBFM X22, X9, 0x20, 0x3F
	0x033D94EC STR W9, [X26, X21, LSL #2]
	0x033D94F0 B.LS 0x33D94C4
	0x033D94F4 CBZ W22, 0x33D9500
	0x033D94F8 ADD W27, W27, 0x1
	0x033D94FC STR W22, [X26, W27, UXTW]
	0x033D9500 SUBS W28, W28, 0x9
	0x033D9504 B.GT 0x33D9474
	0x033D9508 LDR X26, [X31 + 0x10]
	0x033D950C LDR X0, [X23]
	0x033D9510 LDR X28, [X31]
	0x033D9514 LDR W8, [X0 + 0xE0]
	0x033D9518 CBNZ W8, 0x33D9520
	0x033D951C BL 0x1C16DFC
	0x033D9520 LDP W12, W11, [X31 + 0x8]
	0x033D9524 LDR X10, [X20 + 0x8]
	0x033D9528 LDR W8, [X31 + 0x18]
	0x033D952C LDR W9, [X20 + 0x4]
	0x033D9530 CMP W12, W11
	0x033D9534 B.NE 0x33D9554
	0x033D9538 ADDS X21, X10, X26
	0x033D953C ADD W25, W9, W8
	0x033D9540 B.CC 0x33D9688
	0x033D9544 ADD W25, W25, 0x1
	0x033D9548 CMP W25, W8
	0x033D954C B.LS 0x33D9690
	0x033D9550 B 0x33D96F8
	0x033D9554 SUBS X21, X26, X10
	0x033D9558 SUB W25, W8, W9
	0x033D955C B.CS 0x33D96C4
	0x033D9560 SUB W25, W25, 0x1
	0x033D9564 CMP W25, W8
	0x033D9568 B.CS 0x33D96CC
	0x033D956C B 0x33D96F8
	0x033D9570 MOV W27, W8
	0x033D9574 LDR X0, [X23]
	0x033D9578 LDR W8, [X0 + 0xE0]
	0x033D957C CBNZ W8, 0x33D9584
	0x033D9580 BL 0x1C16DFC
	0x033D9584 LDP W10, W9, [X31 + 0x8]
	0x033D9588 LDR X8, [X20 + 0x8]
	0x033D958C CMP W10, W9
	0x033D9590 B.NE 0x33D95B4
	0x033D9594 LDR W9, [X20 + 0x4]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 NotImplemented "Instruction MRS not yet implemented."
	009 Move X8, [X21+40]
	010 Move X23, 0x1005000
	011 Move X22, 0xD43000
	012 Move X20, X1
	013 Move [X31+24], X8
	014 Move [X31+8], X0
	015 Move [X31+16], X1
	016 Move W8, [X23+809]
	017 Move X22, [X22+1520]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0xD43000
	024 Move X0, [X0+1520]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X23+809], W8
	028 Move X0, [X22]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X23, 0x1005000
	034 Move W8, [X23+998]
	035 Compare W8, 0
	036 JumpIfNotEqual {45}
	037 Move X0, 0xD54000
	038 Move X0, [X0+3560]
	039 Call 0x1C17CF4
	040 Move X0, 0xD43000
	041 Move X0, [X0+1520]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X23+998], W8
	045 And W31, W19, 0xFF0000
	046 Move X0, [X22]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 Move X8, 0xD54000
	052 Move X8, [X8+3560]
	053 Move X0, [X8]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move W1, W19
	059 ShiftRight W1, 16
	060 And W1, W1, 0x7FFFFF
	061 Add X0, X31, 8
	062 Move W2, 2
	063 Call DecCalc.InternalRound, X0, X1, X2
	064 Move W8, [X31+12]
	065 Move W9, [X31+20]
	066 Move X8, X19
	067 ShiftRight X8, 32
	068 And X8, X8, 0x7FFFFFFF
	069 Move X9, X20
	070 ShiftRight X9, 32
	071 And X9, X9, 0x7FFFFFFF
	072 Or W8, W9, W8
	073 Compare W8, 0
	074 JumpIfNotEqual {104}
	075 Move X0, [X22]
	076 Move W19, [X31+16]
	077 Move W8, [X0+224]
	078 Compare W8, 0
	079 JumpIfNotEqual {81}
	080 Call 0x1C17DFC
	081 Move W8, [X31+8]
	082 Move TEMP, X8
	083 And TEMP, TEMP, -2147483648
	084 Compare TEMP, -2147483648
	085 JumpIfEqual {102}
	086 Move TEMP, X19
	087 And TEMP, TEMP, -2147483648
	088 Compare TEMP, -2147483648
	089 JumpIfEqual {104}
	090 Move X8, [X21+40]
	091 Move X9, [X31+24]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move W0, W19
	094 Move X20, [X31+64]
	095 Move X19, [X31+72]
	096 Move X22, [X31+48]
	097 Move X21, [X31+56]
	098 Move X30, [X31+32]
	099 Move X23, [X31+40]
	100 Add X31, X31, 80
	101 Return X0
	102 Subtract W19, W31, W19
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Move X0, 0xD1B000
	105 Move X0, [X0+2136]
	106 Call 0x1C17D08
	107 Call 0x1C17F10
	108 Move X19, X0
	109 Move X0, 0xD50000
	110 Move X0, [X0+464]
	111 Call 0x1C17D08
	112 Move X1, X0
	113 Move X0, X19
	114 Move X2, X31
	115 Call OverflowException..ctor, X0, X1
	116 Move X0, 0xD54000
	117 Move X0, [X0+3688]
	118 Call 0x1C17D08
	119 Move X1, X0
	120 Move X0, X19
	121 Call 0x1C17DEC
	122 Call 0x3EB2B20

Method: System.Int64 ToInt64(System.Decimal d)

Disassembly:
	0x033D9890 TBNZ X8, 0x0, 0x33D98B4
	0x033D9894 ADRP X0, 0xD53000
	0x033D9898 LDR X0, [X0 + 0xDE8]
	0x033D989C BL 0x1C16CF4
	0x033D98A0 ADRP X0, 0xD42000
	0x033D98A4 LDR X0, [X0 + 0x5F0]
	0x033D98A8 BL 0x1C16CF4
	0x033D98AC MOVZ W8, 0x1
	0x033D98B0 STRB W8, [X20 + 0x335]
	0x033D98B4 LDR X0, [X21]
	0x033D98B8 ADRP X20, 0xD53000
	0x033D98BC LDR W8, [X0 + 0xE0]
	0x033D98C0 LDR X20, [X20 + 0xDE8]
	0x033D98C4 CBNZ W8, 0x33D98CC
	0x033D98C8 BL 0x1C16DFC
	0x033D98CC LDR X0, [X20]
	0x033D98D0 LDR W8, [X0 + 0xE0]
	0x033D98D4 CBNZ W8, 0x33D98DC
	0x033D98D8 BL 0x1C16DFC
	0x033D98DC ADD X0, X31, 0x18
	0x033D98E0 ADD X1, X31, 0x8
	0x033D98E4 MOVZ W2, 0x1
	0x033D98E8 BL 0x33D91F8
	0x033D98EC LDP X0, X1, [X31 + 0x18]
	0x033D98F0 LDR X8, [X19 + 0x28]
	0x033D98F4 LDR X9, [X31 + 0x28]
	0x033D98F8 CMP X8, X9
	0x033D98FC B.NE 0x33D9910
	0x033D9900 LDP X20, X19, [X31 + 0x40]
	0x033D9904 LDP X30, X21, [X31 + 0x30]
	0x033D9908 ADD X31, X31, 0x50
	0x033D990C RET
	0x033D9910 BL 0x3EB1B20
	0x033D9914 SUB X31, X31, 0x50
	0x033D9918 STP X30, X21, [X31 + 0x30]
	0x033D991C STP X20, X19, [X31 + 0x40]
	0x033D9920 MRS X19, 0xC000
	0x033D9924 LDR X8, [X19 + 0x28]
	0x033D9928 ADRP X20, 0x1004000
	0x033D992C ADRP X21, 0xD42000
	0x033D9930 STR X8, [X31 + 0x28]
	0x033D9934 STP X0, X1, [X31 + 0x18]
	0x033D9938 STP X2, X3, [X31 + 0x8]
	0x033D993C LDRB W8, [X20 + 0x336]
	0x033D9940 LDR X21, [X21 + 0x5F0]
	0x033D9944 TBNZ X8, 0x0, 0x33D9968
	0x033D9948 ADRP X0, 0xD53000
	0x033D994C LDR X0, [X0 + 0xDE8]
	0x033D9950 BL 0x1C16CF4
	0x033D9954 ADRP X0, 0xD42000
	0x033D9958 LDR X0, [X0 + 0x5F0]
	0x033D995C BL 0x1C16CF4
	0x033D9960 MOVZ W8, 0x1
	0x033D9964 STRB W8, [X20 + 0x336]
	0x033D9968 LDR X0, [X21]
	0x033D996C ADRP X20, 0xD53000
	0x033D9970 LDR W8, [X0 + 0xE0]
	0x033D9974 LDR X20, [X20 + 0xDE8]
	0x033D9978 CBNZ W8, 0x33D9980
	0x033D997C BL 0x1C16DFC
	0x033D9980 LDR X0, [X20]
	0x033D9984 LDR W8, [X0 + 0xE0]
	0x033D9988 CBNZ W8, 0x33D9990
	0x033D998C BL 0x1C16DFC
	0x033D9990 ADD X0, X31, 0x18
	0x033D9994 ADD X1, X31, 0x8
	0x033D9998 BL 0x33D99C4
	0x033D999C LDP X0, X1, [X31 + 0x18]
	0x033D99A0 LDR X8, [X19 + 0x28]
	0x033D99A4 LDR X9, [X31 + 0x28]
	0x033D99A8 CMP X8, X9
	0x033D99AC B.NE 0x33D99C0
	0x033D99B0 LDP X20, X19, [X31 + 0x40]
	0x033D99B4 LDP X30, X21, [X31 + 0x30]
	0x033D99B8 ADD X31, X31, 0x50
	0x033D99BC RET
	0x033D99C0 BL 0x3EB1B20
	0x033D99C4 SUB X31, X31, 0x70
	0x033D99C8 STP X30, X27, [X31 + 0x20]
	0x033D99CC STP X26, X25, [X31 + 0x30]
	0x033D99D0 STP X24, X23, [X31 + 0x40]
	0x033D99D4 STP X22, X21, [X31 + 0x50]
	0x033D99D8 STP X20, X19, [X31 + 0x60]
	0x033D99DC MRS X23, 0xC000
	0x033D99E0 LDR X8, [X23 + 0x28]
	0x033D99E4 ADRP X21, 0x1004000
	0x033D99E8 ADRP X24, 0xD53000
	0x033D99EC MOV X20, X1
	0x033D99F0 STR X8, [X31 + 0x18]
	0x033D99F4 LDRB W8, [X21 + 0x353]
	0x033D99F8 LDR X24, [X24 + 0xDE8]
	0x033D99FC MOV X19, X0
	0x033D9A00 TBNZ X8, 0x0, 0x33D9A18
	0x033D9A04 ADRP X0, 0xD53000
	0x033D9A08 LDR X0, [X0 + 0xDE8]
	0x033D9A0C BL 0x1C16CF4
	0x033D9A10 MOVZ W8, 0x1
	0x033D9A14 STRB W8, [X21 + 0x353]
	0x033D9A18 LDR X0, [X24]
	0x033D9A1C STP X31, X31, [X31]
	0x033D9A20 STR X31, [X31 + 0x10]
	0x033D9A24 LDR W21, [X19]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 NotImplemented "Instruction MRS not yet implemented."
	008 Move X8, [X20+40]
	009 Move X22, 0x1005000
	010 Move X21, 0xD43000
	011 Move X19, X0
	012 Move [X31+24], X8
	013 Move [X31+8], X0
	014 Move [X31+16], X1
	015 Move W8, [X22+810]
	016 Move X21, [X21+1520]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xD43000
	022 Move X0, [X0+1520]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+810], W8
	026 Move X0, [X21]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X22, 0x1005000
	032 Move W8, [X22+998]
	033 Compare W8, 0
	034 JumpIfNotEqual {43}
	035 Move X0, 0xD54000
	036 Move X0, [X0+3560]
	037 Call 0x1C17CF4
	038 Move X0, 0xD43000
	039 Move X0, [X0+1520]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X22+998], W8
	043 And W31, W19, 0xFF0000
	044 Move X0, [X21]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X8, 0xD54000
	050 Move X8, [X8+3560]
	051 Move X0, [X8]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Move W1, W19
	057 ShiftRight W1, 16
	058 And W1, W1, 0x7FFFFF
	059 Add X0, X31, 8
	060 Move W2, 2
	061 Call DecCalc.InternalRound, X0, X1, X2
	062 Move W8, [X31+12]
	063 Compare W8, 0
	064 JumpIfEqual {70}
	065 Move X8, X19
	066 ShiftRight X8, 32
	067 And X8, X8, 0x7FFFFFFF
	068 Compare W8, 0
	069 JumpIfNotEqual {108}
	070 Move X0, [X21]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Move X19, 0x1005000
	076 Move W8, [X19+784]
	077 Move TEMP, X8
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfEqual {86}
	081 Move X0, 0xD43000
	082 Move X0, [X0+1520]
	083 Call 0x1C17CF4
	084 Move W8, 1
	085 Move [X19+784], W8
	086 Move W8, [X31+8]
	087 Move X0, [X31+16]
	088 Move TEMP, X8
	089 And TEMP, TEMP, -2147483648
	090 Compare TEMP, -2147483648
	091 JumpIfEqual {106}
	092 Move TEMP, X0
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfEqual {108}
	096 Move X8, [X20+40]
	097 Move X9, [X31+24]
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move X20, [X31+64]
	100 Move X19, [X31+72]
	101 Move X22, [X31+48]
	102 Move X21, [X31+56]
	103 Move X30, [X31+32]
	104 Add X31, X31, 80
	105 Return X0
	106 Subtract X0, X31, X0
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move X0, 0xD1B000
	109 Move X0, [X0+2136]
	110 Call 0x1C17D08
	111 Call 0x1C17F10
	112 Move X19, X0
	113 Move X0, 0xD50000
	114 Move X0, [X0+496]
	115 Call 0x1C17D08
	116 Move X1, X0
	117 Move X0, X19
	118 Move X2, X31
	119 Call OverflowException..ctor, X0, X1
	120 Move X0, 0xD54000
	121 Move X0, [X0+3704]
	122 Call 0x1C17D08
	123 Move X1, X0
	124 Move X0, X19
	125 Call 0x1C17DEC
	126 Call 0x3EB2B20

Method: System.UInt16 ToUInt16(System.Decimal value)

Disassembly:
	0x033D9A28 LDR W8, [X0 + 0xE0]
	0x033D9A2C LDR W26, [X20]
	0x033D9A30 CBNZ W8, 0x33D9A40
	0x033D9A34 BL 0x1C16DFC
	0x033D9A38 LDR X0, [X24]
	0x033D9A3C LDR W8, [X0 + 0xE0]
	0x033D9A40 LDR W22, [X19 + 0x4]
	0x033D9A44 LDR W25, [X19 + 0xC]
	0x033D9A48 ADD W21, W26, W21
	0x033D9A4C CBNZ W8, 0x33D9A5C
	0x033D9A50 BL 0x1C16DFC
	0x033D9A54 LDR X0, [X24]
	0x033D9A58 LDR W8, [X0 + 0xE0]
	0x033D9A5C LDR W26, [X20 + 0x4]
	0x033D9A60 LDR W27, [X20 + 0xC]
	0x033D9A64 UBFM W21, W21, 0x10, 0x17
	0x033D9A68 ORR W22, W25, W22, 0x0
	0x033D9A6C CBNZ W8, 0x33D9A74
	0x033D9A70 BL 0x1C16DFC
	0x033D9A74 ORR W9, W27, W26, 0x0
	0x033D9A78 CBZ W22, 0x33D9BC8
	0x033D9A7C CBZ W9, 0x33D9C10
	0x033D9A80 LDP W10, W9, [X19 + 0x8]
	0x033D9A84 LDP W11, W8, [X20 + 0x8]
	0x033D9A88 LDR X0, [X24]
	0x033D9A8C MUL X12, X11, X10
	0x033D9A90 MUL X10, X8, X10
	0x033D9A94 ADD X10, X10, X12, 0x20, LSR
	0x033D9A98 MUL X11, X9, X11
	0x033D9A9C ADDS X10, X10, X11
	0x033D9AA0 STP W12, W10, [X31]
	0x033D9AA4 LDR W11, [X0 + 0xE0]
	0x033D9AA8 MOVZ X12, 0x1
	0x033D9AAC BFM X12, X10, 0x20, 0x3F
	0x033D9AB0 UBFM X10, X10, 0x20, 0x3F
	0x033D9AB4 CSEL X22, X12, X10, CS
	0x033D9AB8 CBNZ W11, 0x33D9AC8
	0x033D9ABC BL 0x1C16DFC
	0x033D9AC0 LDR W9, [X19 + 0xC]
	0x033D9AC4 LDR W8, [X20 + 0xC]
	0x033D9AC8 LDR W11, [X19 + 0x4]
	0x033D9ACC LDR W10, [X20 + 0x4]
	0x033D9AD0 NOP
	0x033D9AD4 MADD X22, X8, X9, X22
	0x033D9AD8 ORR W11, W10, W11, 0x0
	0x033D9ADC CBZ W11, 0x33D9C78
	0x033D9AE0 LDR X0, [X24]
	0x033D9AE4 LDR W8, [X0 + 0xE0]
	0x033D9AE8 CBNZ W8, 0x33D9AFC
	0x033D9AEC BL 0x1C16DFC
	0x033D9AF0 LDR X0, [X24]
	0x033D9AF4 LDR W10, [X20 + 0x4]
	0x033D9AF8 LDR W8, [X0 + 0xE0]
	0x033D9AFC LDR W9, [X19 + 0x8]
	0x033D9B00 MOV W10, W10
	0x033D9B04 MUL X26, X10, X9
	0x033D9B08 ADDS X25, X26, X22
	0x033D9B0C CSET W22, CS
	0x033D9B10 CBNZ W8, 0x33D9B20
	0x033D9B14 BL 0x1C16DFC
	0x033D9B18 LDR X0, [X24]
	0x033D9B1C LDR W8, [X0 + 0xE0]
	0x033D9B20 LDR W9, [X19 + 0x4]
	0x033D9B24 LDR W10, [X20 + 0x8]
	0x033D9B28 CMP X25, X26
	0x033D9B2C MOVZ W11, 0x1
	0x033D9B30 CINC X11, X11, CC
	0x033D9B34 MUL X9, X10, X9
	0x033D9B38 ADDS X9, X9, X25
	0x033D9B3C CSEL X10, X11, X22, CS
	0x033D9B40 EXTR X22, X10, X9, 0x20
	0x033D9B44 STR W9, [X31 + 0x8]
	0x033D9B48 CBNZ W8, 0x33D9B58
	0x033D9B4C BL 0x1C16DFC
	0x033D9B50 LDR X0, [X24]
	0x033D9B54 LDR W8, [X0 + 0xE0]
	0x033D9B58 LDR W9, [X19 + 0xC]
	0x033D9B5C LDR W10, [X20 + 0x4]
	0x033D9B60 MUL X9, X10, X9
	0x033D9B64 ADDS X26, X9, X22
	0x033D9B68 CSET W25, CS
	0x033D9B6C CBNZ W8, 0x33D9B7C
	0x033D9B70 BL 0x1C16DFC
	0x033D9B74 LDR X0, [X24]
	0x033D9B78 LDR W8, [X0 + 0xE0]
	0x033D9B7C LDR W9, [X19 + 0x4]
	0x033D9B80 LDR W10, [X20 + 0xC]
	0x033D9B84 CMP X26, X22
	0x033D9B88 MOVZ W11, 0x1
	0x033D9B8C CINC X11, X11, CC
	0x033D9B90 MUL X10, X10, X9
	0x033D9B94 ADDS X10, X10, X26
	0x033D9B98 CSEL X11, X11, X25, CS
	0x033D9B9C EXTR X22, X11, X10, 0x20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1005000
	007 Move X22, 0xD43000
	008 Move W8, [X21+811]
	009 Move X22, [X22+1520]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD43000
	017 Move X0, [X0+1520]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+811], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Call Decimal.ToUInt32, X0
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Return X0
	036 Move X0, 0xD1B000
	037 Move X0, [X0+2136]
	038 Call 0x1C17D08
	039 Call 0x1C17F10
	040 Move X19, X0
	041 Move X0, 0xD50000
	042 Move X0, [X0+448]
	043 Call 0x1C17D08
	044 Move X1, X0
	045 Move X0, X19
	046 Move X2, X31
	047 Call OverflowException..ctor, X0, X1
	048 Move X0, 0xD54000
	049 Move X0, [X0+3712]
	050 Call 0x1C17D08
	051 Move X1, X0
	052 Move X0, X19
	053 Call 0x1C17DEC
	054 Move X19, X0
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X0, X19
	057 Call 0x3EB2AD0
	058 Move X19, X0
	059 Move X0, 0xD1B000
	060 Move X0, [X0+2136]
	061 Call 0x1C17D08
	062 Move X8, [X19]
	063 Move X1, [X8]
	064 Call 0x1C18270
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {90}
	069 Move X19, [X19]
	070 Call 0x3EB2AE0
	071 Move X0, 0xD1B000
	072 Move X0, [X0+2136]
	073 Call 0x1C17D08
	074 Call 0x1C17F10
	075 Move X20, X0
	076 Move X0, 0xD50000
	077 Move X0, [X0+448]
	078 Call 0x1C17D08
	079 Move X1, X0
	080 Move X0, X20
	081 Move X2, X19
	082 Move X3, X31
	083 Call OverflowException..ctor, X0, X1, X2
	084 Move X0, 0xD54000
	085 Move X0, [X0+3712]
	086 Call 0x1C17D08
	087 Move X1, X0
	088 Move X0, X20
	089 Call 0x1C17DEC
	090 Move W0, 8
	091 Call 0x3EB2AF0
	092 Move X8, [X19]
	093 Move [X0], X8
	094 Move X1, 0xADC000
	095 Add X1, X1, 3672
	096 Move X2, X31
	097 Call 0x3EB2B00
	098 Move X19, X0
	099 Call 0x3EB2AE0
	100 Move X0, X19
	101 Call 0x1D2D690
	102 Call 0x1991590

Method: System.UInt32 ToUInt32(System.Decimal d)

Disassembly:
	0x033D9120 LDR W8, [X0 + 0xE0]
	0x033D9124 CBNZ W8, 0x33D912C
	0x033D9128 BL 0x1C16DFC
	0x033D912C MOV X0, X20
	0x033D9130 MOV X1, X19
	0x033D9134 LDP X20, X19, [X31 + 0x20]
	0x033D9138 LDP X22, X21, [X31 + 0x10]
	0x033D913C LDR X30, [X31], #0x30
	0x033D9140 B 0x33D8710
	0x033D9144 SUB X31, X31, 0x50
	0x033D9148 STP X30, X21, [X31 + 0x30]
	0x033D914C STP X20, X19, [X31 + 0x40]
	0x033D9150 MRS X19, 0xC000
	0x033D9154 LDR X8, [X19 + 0x28]
	0x033D9158 ADRP X20, 0x1004000
	0x033D915C ADRP X21, 0xD42000
	0x033D9160 STR X8, [X31 + 0x28]
	0x033D9164 STP X0, X1, [X31 + 0x18]
	0x033D9168 STP X2, X3, [X31 + 0x8]
	0x033D916C LDRB W8, [X20 + 0x334]
	0x033D9170 LDR X21, [X21 + 0x5F0]
	0x033D9174 TBNZ X8, 0x0, 0x33D9198
	0x033D9178 ADRP X0, 0xD53000
	0x033D917C LDR X0, [X0 + 0xDE8]
	0x033D9180 BL 0x1C16CF4
	0x033D9184 ADRP X0, 0xD42000
	0x033D9188 LDR X0, [X0 + 0x5F0]
	0x033D918C BL 0x1C16CF4
	0x033D9190 MOVZ W8, 0x1
	0x033D9194 STRB W8, [X20 + 0x334]
	0x033D9198 LDR X0, [X21]
	0x033D919C ADRP X20, 0xD53000
	0x033D91A0 LDR W8, [X0 + 0xE0]
	0x033D91A4 LDR X20, [X20 + 0xDE8]
	0x033D91A8 CBNZ W8, 0x33D91B0
	0x033D91AC BL 0x1C16DFC
	0x033D91B0 LDR X0, [X20]
	0x033D91B4 LDR W8, [X0 + 0xE0]
	0x033D91B8 CBNZ W8, 0x33D91C0
	0x033D91BC BL 0x1C16DFC
	0x033D91C0 ADD X0, X31, 0x18
	0x033D91C4 ADD X1, X31, 0x8
	0x033D91C8 MOV W2, W31
	0x033D91CC BL 0x33D91F8
	0x033D91D0 LDP X0, X1, [X31 + 0x18]
	0x033D91D4 LDR X8, [X19 + 0x28]
	0x033D91D8 LDR X9, [X31 + 0x28]
	0x033D91DC CMP X8, X9
	0x033D91E0 B.NE 0x33D91F4
	0x033D91E4 LDP X20, X19, [X31 + 0x40]
	0x033D91E8 LDP X30, X21, [X31 + 0x30]
	0x033D91EC ADD X31, X31, 0x50
	0x033D91F0 RET
	0x033D91F4 BL 0x3EB1B20
	0x033D91F8 SUB X31, X31, 0x90
	0x033D91FC STP X29, X30, [X31 + 0x30]
	0x033D9200 STP X28, X27, [X31 + 0x40]
	0x033D9204 STP X26, X25, [X31 + 0x50]
	0x033D9208 STP X24, X23, [X31 + 0x60]
	0x033D920C STP X22, X21, [X31 + 0x70]
	0x033D9210 STP X20, X19, [X31 + 0x80]
	0x033D9214 MRS X28, 0xC000
	0x033D9218 LDR X8, [X28 + 0x28]
	0x033D921C ADRP X22, 0x1004000
	0x033D9220 ADRP X23, 0xD53000
	0x033D9224 MOV W21, W2
	0x033D9228 STR X8, [X31 + 0x28]
	0x033D922C LDRB W8, [X22 + 0x350]
	0x033D9230 LDR X23, [X23 + 0xDE8]
	0x033D9234 MOV X20, X1
	0x033D9238 MOV X19, X0
	0x033D923C TBNZ X8, 0x0, 0x33D9254
	0x033D9240 ADRP X0, 0xD53000
	0x033D9244 LDR X0, [X0 + 0xDE8]
	0x033D9248 BL 0x1C16CF4
	0x033D924C MOVZ W8, 0x1
	0x033D9250 STRB W8, [X22 + 0x350]
	0x033D9254 LDR X0, [X23]
	0x033D9258 STP X31, X31, [X31 + 0x10]
	0x033D925C STR X31, [X31 + 0x20]
	0x033D9260 LDR W8, [X0 + 0xE0]
	0x033D9264 CBNZ W8, 0x33D926C
	0x033D9268 BL 0x1C16DFC
	0x033D926C LDP W24, W27, [X19]
	0x033D9270 LDR W8, [X20]
	0x033D9274 LDR X26, [X19 + 0x8]
	0x033D9278 AND W10, W21, 0x1
	0x033D927C EOR W9, W8, W24, 0x0
	0x033D9280 ANDS W31, W9, 0xFF0000
	0x033D9284 UBFM W9, W9, 0x1F, 0x1F
	0x033D9288 STP W9, W10, [X31 + 0x8]
	0x033D928C B.EQ 0x33D9574
	0x033D9290 AND W8, W8, 0xFF0000
	0x033D9294 AND W9, W24, 0x80000000

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 NotImplemented "Instruction MRS not yet implemented."
	009 Move X8, [X21+40]
	010 Move X23, 0x1005000
	011 Move X22, 0xD43000
	012 Move X20, X1
	013 Move [X31+24], X8
	014 Move [X31+8], X0
	015 Move [X31+16], X1
	016 Move W8, [X23+812]
	017 Move X22, [X22+1520]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0xD43000
	024 Move X0, [X0+1520]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X23+812], W8
	028 Move X0, [X22]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X23, 0x1005000
	034 Move W8, [X23+998]
	035 Compare W8, 0
	036 JumpIfNotEqual {45}
	037 Move X0, 0xD54000
	038 Move X0, [X0+3560]
	039 Call 0x1C17CF4
	040 Move X0, 0xD43000
	041 Move X0, [X0+1520]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X23+998], W8
	045 And W31, W19, 0xFF0000
	046 Move X0, [X22]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 Move X8, 0xD54000
	052 Move X8, [X8+3560]
	053 Move X0, [X8]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move W1, W19
	059 ShiftRight W1, 16
	060 And W1, W1, 0x7FFFFF
	061 Add X0, X31, 8
	062 Move W2, 2
	063 Call DecCalc.InternalRound, X0, X1, X2
	064 Move W8, [X31+12]
	065 Move W9, [X31+20]
	066 Move X8, X19
	067 ShiftRight X8, 32
	068 And X8, X8, 0x7FFFFFFF
	069 Move X9, X20
	070 ShiftRight X9, 32
	071 And X9, X9, 0x7FFFFFFF
	072 Or W8, W9, W8
	073 Compare W8, 0
	074 JumpIfNotEqual {99}
	075 Move X0, [X22]
	076 Move W8, [X0+224]
	077 Compare W8, 0
	078 JumpIfNotEqual {80}
	079 Call 0x1C17DFC
	080 Move W0, [X31+16]
	081 Compare W0, 0
	082 JumpIfEqual {88}
	083 Move W8, [X31+8]
	084 Move TEMP, X8
	085 And TEMP, TEMP, -2147483648
	086 Compare TEMP, -2147483648
	087 JumpIfEqual {99}
	088 Move X8, [X21+40]
	089 Move X9, [X31+24]
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move X20, [X31+64]
	092 Move X19, [X31+72]
	093 Move X22, [X31+48]
	094 Move X21, [X31+56]
	095 Move X30, [X31+32]
	096 Move X23, [X31+40]
	097 Add X31, X31, 80
	098 Return X0
	099 Move X0, 0xD1B000
	100 Move X0, [X0+2136]
	101 Call 0x1C17D08
	102 Call 0x1C17F10
	103 Move X19, X0
	104 Move X0, 0xD50000
	105 Move X0, [X0+480]
	106 Call 0x1C17D08
	107 Move X1, X0
	108 Move X0, X19
	109 Move X2, X31
	110 Call OverflowException..ctor, X0, X1
	111 Move X0, 0xD54000
	112 Move X0, [X0+3672]
	113 Call 0x1C17D08
	114 Move X1, X0
	115 Move X0, X19
	116 Call 0x1C17DEC
	117 Call 0x3EB2B20

Method: System.UInt64 ToUInt64(System.Decimal d)

Disassembly:
	0x033D9BA0 STR W10, [X31 + 0xC]
	0x033D9BA4 CBNZ W8, 0x33D9BB0
	0x033D9BA8 BL 0x1C16DFC
	0x033D9BAC LDR W9, [X19 + 0x4]
	0x033D9BB0 LDR W8, [X20 + 0x4]
	0x033D9BB4 NOP
	0x033D9BB8 MADD X8, X9, X8, X22
	0x033D9BBC STR X8, [X31 + 0x10]
	0x033D9BC0 MOVZ W22, 0x5
	0x033D9BC4 B 0x33D9C8C
	0x033D9BC8 LDR W8, [X19 + 0x8]
	0x033D9BCC LDR W10, [X20 + 0x8]
	0x033D9BD0 MUL X22, X10, X8
	0x033D9BD4 CBZ W9, 0x33D9D50
	0x033D9BD8 LDR W9, [X20 + 0xC]
	0x033D9BDC MUL X9, X9, X8
	0x033D9BE0 ADD X10, X9, X22, 0x20, LSR
	0x033D9BE4 STP W22, W10, [X31]
	0x033D9BE8 LDR W9, [X20 + 0x4]
	0x033D9BEC UBFM X22, X10, 0x20, 0x3F
	0x033D9BF0 CBZ W9, 0x33D9C68
	0x033D9BF4 LDR X0, [X24]
	0x033D9BF8 LDR W10, [X0 + 0xE0]
	0x033D9BFC CBNZ W10, 0x33D9C4C
	0x033D9C00 BL 0x1C16DFC
	0x033D9C04 LDR W8, [X19 + 0x8]
	0x033D9C08 LDR W9, [X20 + 0x4]
	0x033D9C0C B 0x33D9C4C
	0x033D9C10 LDR W8, [X20 + 0x8]
	0x033D9C14 LDP W9, W10, [X19 + 0x8]
	0x033D9C18 MUL X9, X9, X8
	0x033D9C1C MUL X10, X10, X8
	0x033D9C20 ADD X10, X10, X9, 0x20, LSR
	0x033D9C24 STP W9, W10, [X31]
	0x033D9C28 LDR W9, [X19 + 0x4]
	0x033D9C2C UBFM X22, X10, 0x20, 0x3F
	0x033D9C30 CBZ W9, 0x33D9C68
	0x033D9C34 LDR X0, [X24]
	0x033D9C38 LDR W10, [X0 + 0xE0]
	0x033D9C3C CBNZ W10, 0x33D9C4C
	0x033D9C40 BL 0x1C16DFC
	0x033D9C44 LDR W8, [X20 + 0x8]
	0x033D9C48 LDR W9, [X19 + 0x4]
	0x033D9C4C MOV W9, W9
	0x033D9C50 MADD X22, X8, X9, X22
	0x033D9C54 UBFM X8, X22, 0x20, 0x3F
	0x033D9C58 CBZ X8, 0x33D9C68
	0x033D9C5C STR X22, [X31 + 0x8]
	0x033D9C60 MOVZ W22, 0x3
	0x033D9C64 B 0x33D9CC8
	0x033D9C68 CBZ W22, 0x33D9C88
	0x033D9C6C STR W22, [X31 + 0x8]
	0x033D9C70 MOVZ W22, 0x2
	0x033D9C74 B 0x33D9CB8
	0x033D9C78 CBZ X22, 0x33D9C88
	0x033D9C7C STR X22, [X31 + 0x8]
	0x033D9C80 MOVZ W22, 0x3
	0x033D9C84 B 0x33D9C8C
	0x033D9C88 MOVZ W22, 0x1
	0x033D9C8C ADD X9, X31, 0x0
	0x033D9C90 LDR W8, [X9, W22, UXTW]
	0x033D9C94 CBNZ W8, 0x33D9CB8
	0x033D9C98 ADD X9, X9, W22, 0x2, UXTW
	0x033D9C9C MOV W8, W22
	0x033D9CA0 SUB X9, X9, 0x4
	0x033D9CA4 CBZ X8, 0x33D9D90
	0x033D9CA8 LDR W10, [X9], #0xFFFFFFFFFFFFFFFC
	0x033D9CAC SUB X8, X8, 0x1
	0x033D9CB0 CBZ W10, 0x33D9CA4
	0x033D9CB4 MOV W22, W8
	0x033D9CB8 CMP W21, 0x1C
	0x033D9CBC B.HI 0x33D9CC8
	0x033D9CC0 CMP W22, 0x3
	0x033D9CC4 B.CC 0x33D9CEC
	0x033D9CC8 LDR X0, [X24]
	0x033D9CCC LDR W8, [X0 + 0xE0]
	0x033D9CD0 CBNZ W8, 0x33D9CD8
	0x033D9CD4 BL 0x1C16DFC
	0x033D9CD8 ADD X0, X31, 0x0
	0x033D9CDC MOV W1, W22
	0x033D9CE0 MOV W2, W21
	0x033D9CE4 BL 0x33DB670
	0x033D9CE8 MOV W21, W0
	0x033D9CEC LDR X0, [X24]
	0x033D9CF0 LDR X22, [X31]
	0x033D9CF4 LDR W8, [X0 + 0xE0]
	0x033D9CF8 CBNZ W8, 0x33D9D00
	0x033D9CFC BL 0x1C16DFC
	0x033D9D00 STR X22, [X19 + 0x8]
	0x033D9D04 LDR W8, [X31 + 0x8]
	0x033D9D08 LDR W9, [X19]
	0x033D9D0C STR W8, [X19 + 0x4]
	0x033D9D10 LDR W8, [X20]
	0x033D9D14 EOR W8, W9, W8, 0x0
	0x033D9D18 AND W8, W8, 0x80000000
	0x033D9D1C ORR W8, W8, W21, 0x10
	0x033D9D20 STR W8, [X19]
	0x033D9D24 LDR X8, [X23 + 0x28]
	0x033D9D28 LDR X9, [X31 + 0x18]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 NotImplemented "Instruction MRS not yet implemented."
	008 Move X8, [X20+40]
	009 Move X22, 0x1005000
	010 Move X21, 0xD43000
	011 Move X19, X0
	012 Move [X31+24], X8
	013 Move [X31+8], X0
	014 Move [X31+16], X1
	015 Move W8, [X22+813]
	016 Move X21, [X21+1520]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xD43000
	022 Move X0, [X0+1520]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+813], W8
	026 Move X0, [X21]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X22, 0x1005000
	032 Move W8, [X22+998]
	033 Compare W8, 0
	034 JumpIfNotEqual {43}
	035 Move X0, 0xD54000
	036 Move X0, [X0+3560]
	037 Call 0x1C17CF4
	038 Move X0, 0xD43000
	039 Move X0, [X0+1520]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X22+998], W8
	043 And W31, W19, 0xFF0000
	044 Move X0, [X21]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X8, 0xD54000
	050 Move X8, [X8+3560]
	051 Move X0, [X8]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Move W1, W19
	057 ShiftRight W1, 16
	058 And W1, W1, 0x7FFFFF
	059 Add X0, X31, 8
	060 Move W2, 2
	061 Call DecCalc.InternalRound, X0, X1, X2
	062 Move W8, [X31+12]
	063 Compare W8, 0
	064 JumpIfEqual {70}
	065 Move X8, X19
	066 ShiftRight X8, 32
	067 And X8, X8, 0x7FFFFFFF
	068 Compare W8, 0
	069 JumpIfNotEqual {104}
	070 Move X0, [X21]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Move X19, 0x1005000
	076 Move W8, [X19+784]
	077 Move TEMP, X8
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfEqual {86}
	081 Move X0, 0xD43000
	082 Move X0, [X0+1520]
	083 Call 0x1C17CF4
	084 Move W8, 1
	085 Move [X19+784], W8
	086 Move X0, [X31+16]
	087 Compare X0, 0
	088 JumpIfEqual {94}
	089 Move W8, [X31+8]
	090 Move TEMP, X8
	091 And TEMP, TEMP, -2147483648
	092 Compare TEMP, -2147483648
	093 JumpIfEqual {104}
	094 Move X8, [X20+40]
	095 Move X9, [X31+24]
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Move X20, [X31+64]
	098 Move X19, [X31+72]
	099 Move X22, [X31+48]
	100 Move X21, [X31+56]
	101 Move X30, [X31+32]
	102 Add X31, X31, 80
	103 Return X0
	104 Move X0, 0xD1B000
	105 Move X0, [X0+2136]
	106 Call 0x1C17D08
	107 Call 0x1C17F10
	108 Move X19, X0
	109 Move X0, 0xD50000
	110 Move X0, [X0+512]
	111 Call 0x1C17D08
	112 Move X1, X0
	113 Move X0, X19
	114 Move X2, X31
	115 Call OverflowException..ctor, X0, X1
	116 Move X0, 0xD54000
	117 Move X0, [X0+3720]
	118 Call 0x1C17D08
	119 Move X1, X0
	120 Move X0, X19
	121 Call 0x1C17DEC
	122 Call 0x3EB2B20

Method: System.Single ToSingle(System.Decimal d)

Disassembly:
	0x033D9D2C CMP X8, X9
	0x033D9D30 B.NE 0x33D9E14
	0x033D9D34 LDP X20, X19, [X31 + 0x60]
	0x033D9D38 LDP X22, X21, [X31 + 0x50]
	0x033D9D3C LDP X24, X23, [X31 + 0x40]
	0x033D9D40 LDP X26, X25, [X31 + 0x30]
	0x033D9D44 LDP X30, X27, [X31 + 0x20]
	0x033D9D48 ADD X31, X31, 0x70
	0x033D9D4C RET
	0x033D9D50 CMP W21, 0x1C
	0x033D9D54 B.HI 0x33D9D88
	0x033D9D58 LDR X0, [X24]
	0x033D9D5C UBFM W21, W21, 0x10, 0xF
	0x033D9D60 LDR W8, [X0 + 0xE0]
	0x033D9D64 CBNZ W8, 0x33D9D6C
	0x033D9D68 BL 0x1C16DFC
	0x033D9D6C STR X22, [X19 + 0x8]
	0x033D9D70 LDR W8, [X20]
	0x033D9D74 LDR W9, [X19]
	0x033D9D78 EOR W8, W9, W8, 0x0
	0x033D9D7C AND W8, W8, 0x80000000
	0x033D9D80 ORR W8, W8, W21, 0x0
	0x033D9D84 B 0x33D9D20
	0x033D9D88 CMP W21, 0x2F
	0x033D9D8C B.LS 0x33D9D98
	0x033D9D90 STP X31, X31, [X19]
	0x033D9D94 B 0x33D9D24
	0x033D9D98 LDR X0, [X24]
	0x033D9D9C LDR W8, [X0 + 0xE0]
	0x033D9DA0 CBNZ W8, 0x33D9DAC
	0x033D9DA4 BL 0x1C16DFC
	0x033D9DA8 LDR X0, [X24]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 NotImplemented "Instruction MRS not yet implemented."
	007 Move X8, [X19+40]
	008 Move X20, 0x1005000
	009 Move X21, 0xD54000
	010 Move [X31+24], X8
	011 Move [X31+8], X0
	012 Move [X31+16], X1
	013 Move W8, [X20+814]
	014 Move X21, [X21+3560]
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xD54000
	020 Move X0, [X0+3560]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+814], W8
	024 Move X0, [X21]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Add X0, X31, 8
	030 Call DecCalc.VarR4FromDec, X0
	031 Move X8, [X19+40]
	032 Move X9, [X31+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X20, [X31+48]
	035 Move X19, [X31+56]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Add X31, X31, 64
	039 Return V0
	040 Call 0x3EB2B20

Method: System.Void Truncate(ref System.Decimal d)

Disassembly:
	0x033D9E08 B 0x33D9D60
	0x033D9E0C BL 0x1C16F20
	0x033D9E10 BL 0x1C16F28
	0x033D9E14 BL 0x3EB1B20
	0x033D9E18 SUB X31, X31, 0x50
	0x033D9E1C STP X30, X21, [X31 + 0x30]
	0x033D9E20 STP X20, X19, [X31 + 0x40]
	0x033D9E24 MRS X19, 0xC000
	0x033D9E28 LDR X8, [X19 + 0x28]
	0x033D9E2C ADRP X20, 0x1004000
	0x033D9E30 ADRP X21, 0xD42000
	0x033D9E34 STR X8, [X31 + 0x28]
	0x033D9E38 STP X0, X1, [X31 + 0x18]
	0x033D9E3C STP X2, X3, [X31 + 0x8]
	0x033D9E40 LDRB W8, [X20 + 0x337]
	0x033D9E44 LDR X21, [X21 + 0x5F0]
	0x033D9E48 TBNZ X8, 0x0, 0x33D9E6C
	0x033D9E4C ADRP X0, 0xD53000
	0x033D9E50 LDR X0, [X0 + 0xDE8]
	0x033D9E54 BL 0x1C16CF4
	0x033D9E58 ADRP X0, 0xD42000
	0x033D9E5C LDR X0, [X0 + 0x5F0]
	0x033D9E60 BL 0x1C16CF4
	0x033D9E64 MOVZ W8, 0x1
	0x033D9E68 STRB W8, [X20 + 0x337]
	0x033D9E6C LDR X0, [X21]
	0x033D9E70 ADRP X20, 0xD53000
	0x033D9E74 LDR W8, [X0 + 0xE0]
	0x033D9E78 LDR X20, [X20 + 0xDE8]
	0x033D9E7C CBNZ W8, 0x33D9E84
	0x033D9E80 BL 0x1C16DFC
	0x033D9E84 LDR X0, [X20]
	0x033D9E88 LDR W8, [X0 + 0xE0]
	0x033D9E8C CBNZ W8, 0x33D9E94
	0x033D9E90 BL 0x1C16DFC
	0x033D9E94 ADD X0, X31, 0x18
	0x033D9E98 ADD X1, X31, 0x8
	0x033D9E9C BL 0x33D9EC8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1005000
	006 Move W8, [X20+815]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xD54000
	013 Move X0, [X0+3560]
	014 Call 0x1C17CF4
	015 Move X0, 0xD43000
	016 Move X0, [X0+1520]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+815], W8
	020 Move W20, [X19]
	021 And W31, W20, 0xFF0000
	022 Move X8, 0xD43000
	023 Move X8, [X8+1520]
	024 Move X21, 0xD54000
	025 Move X0, [X8]
	026 Move W8, [X0+224]
	027 Move X21, [X21+3560]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, [X21]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move W1, W20
	037 ShiftRight W1, 16
	038 And W1, W1, 0x7FFFFF
	039 Move X0, X19
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move W2, 2
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Call DecCalc.InternalRound, X0, X1, X2
	046 Return 
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 

Method: System.Decimal op_Implicit(System.Byte value)

Disassembly:
	0x033D9EA0 LDP X0, X1, [X31 + 0x18]
	0x033D9EA4 LDR X8, [X19 + 0x28]
	0x033D9EA8 LDR X9, [X31 + 0x28]

ISIL:
	001 And X1, X0, 255
	002 Move X0, X31
	003 Return X0

Method: System.Decimal op_Implicit(System.SByte value)

Disassembly:
	0x033D9EAC CMP X8, X9
	0x033D9EB0 B.NE 0x33D9EC4
	0x033D9EB4 LDP X20, X19, [X31 + 0x40]
	0x033D9EB8 LDP X30, X21, [X31 + 0x30]
	0x033D9EBC ADD X31, X31, 0x50
	0x033D9EC0 RET

ISIL:
	001 NotImplemented "Instruction SXTB not yet implemented."
	002 And X9, X0, 255
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move X0, X9
	005 ShiftRight X0, 40
	006 And X0, X0, 127
	007 NotImplemented "Instruction CSNEG not yet implemented."
	008 Return X0

Method: System.Decimal op_Implicit(System.Int16 value)

Disassembly:
	0x033D9EC4 BL 0x3EB1B20
	0x033D9EC8 SUB X31, X31, 0xB0
	0x033D9ECC STP X29, X30, [X31 + 0x50]
	0x033D9ED0 STP X28, X27, [X31 + 0x60]
	0x033D9ED4 STP X26, X25, [X31 + 0x70]
	0x033D9ED8 STP X24, X23, [X31 + 0x80]

ISIL:
	001 NotImplemented "Instruction SXTH not yet implemented."
	002 And X9, X0, 0xFFFF
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move X0, X9
	005 ShiftRight X0, 48
	006 And X0, X0, 0x7FFF
	007 NotImplemented "Instruction CSNEG not yet implemented."
	008 Return X0

Method: System.Decimal op_Implicit(System.UInt16 value)

Disassembly:
	0x033D9EDC STP X22, X21, [X31 + 0x90]
	0x033D9EE0 STP X20, X19, [X31 + 0xA0]
	0x033D9EE4 MRS X24, 0xC000

ISIL:
	001 And X1, X0, 0xFFFF
	002 Move X0, X31
	003 Return X0

Method: System.Decimal op_Implicit(System.Int32 value)

Disassembly:
	0x033D9EE8 LDR X8, [X24 + 0x28]
	0x033D9EEC ADRP X21, 0x1004000
	0x033D9EF0 ADRP X25, 0xD53000
	0x033D9EF4 MOV X20, X1
	0x033D9EF8 STR X8, [X31 + 0x48]

ISIL:
	001 And W8, W0, 0x80000000
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSNEG not yet implemented."
	004 Move X0, X8
	005 Return X0

Method: System.Decimal op_Implicit(System.UInt32 value)

Disassembly:
	0x033D9EFC LDRB W8, [X21 + 0x359]
	0x033D9F00 LDR X25, [X25 + 0xDE8]
	0x033D9F04 MOV X19, X0

ISIL:
	001 Move W1, W0
	002 Move X0, X31
	003 Return X0

Method: System.Decimal op_Implicit(System.Int64 value)

Disassembly:
	0x033D9F08 TBNZ X8, 0x0, 0x33D9F2C
	0x033D9F0C ADRP X0, 0xD53000
	0x033D9F10 LDR X0, [X0 + 0xDE8]
	0x033D9F14 BL 0x1C16CF4
	0x033D9F18 ADRP X0, 0xD1A000
	0x033D9F1C LDR X0, [X0 + 0x5A8]

ISIL:
	001 Move X8, X0
	002 ShiftRight X8, 32
	003 And X8, X8, 0x7FFFFFFF
	004 NotImplemented "Instruction CMP not yet implemented."
	005 And X8, X8, 0xFFFFFFFF
	006 NotImplemented "Instruction CSNEG not yet implemented."
	007 Move X0, X8
	008 Return X0

Method: System.Decimal op_Implicit(System.UInt64 value)

Disassembly:
	0x033D9F20 BL 0x1C16CF4
	0x033D9F24 MOVZ W8, 0x1
	0x033D9F28 STRB W8, [X21 + 0x359]

ISIL:
	001 Move X1, X0
	002 Move X0, X31
	003 Return X0

Method: System.Decimal op_Explicit(System.Single value)

Disassembly:
	0x033D9F2C STP X31, X31, [X31 + 0x28]
	0x033D9F30 STP X31, X31, [X31 + 0x38]
	0x033D9F34 STP X31, X31, [X31 + 0x10]
	0x033D9F38 STR W31, [X31 + 0xC]
	0x033D9F3C STR X31, [X31]
	0x033D9F40 LDR W8, [X19]
	0x033D9F44 LDR W9, [X20]
	0x033D9F48 LDR X0, [X25]
	0x033D9F4C SUB W8, W8, W9
	0x033D9F50 SBFM W22, W8, 0x10, 0x17
	0x033D9F54 STR W22, [X31 + 0x24]
	0x033D9F58 LDR W8, [X0 + 0xE0]
	0x033D9F5C CBNZ W8, 0x33D9F6C
	0x033D9F60 BL 0x1C16DFC
	0x033D9F64 LDR X0, [X25]
	0x033D9F68 LDR W8, [X0 + 0xE0]
	0x033D9F6C LDR W9, [X20 + 0x4]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move [X31+40], X19
	004 NotImplemented "Instruction MRS not yet implemented."
	005 Move X8, [X19+40]
	006 Add X0, X31, 8
	007 Move [X31+24], X8
	008 Move [X31+8], X31
	009 Move [X31+16], X31
	010 Call Decimal..ctor, X0, V0
	011 Move X0, [X31+8]
	012 Move X1, [X31+16]
	013 Move X8, [X19+40]
	014 Move X9, [X31+24]
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move X30, [X31+32]
	017 Move X19, [X31+40]
	018 Add X31, X31, 48
	019 Return X0
	020 Call 0x3EB2B20

Method: System.Decimal op_Explicit(System.Double value)

Disassembly:
	0x033D9F70 LDR W10, [X20 + 0xC]
	0x033D9F74 ORR W21, W10, W9, 0x0
	0x033D9F78 CBZ W8, 0x33DA1BC
	0x033D9F7C CBZ W21, 0x33DA1C4
	0x033D9F80 LDR W21, [X20 + 0x4]
	0x033D9F84 CBNZ W21, 0x33D9F9C
	0x033D9F88 LDR X0, [X25]
	0x033D9F8C LDR W8, [X0 + 0xE0]
	0x033D9F90 CBNZ W8, 0x33D9F98
	0x033D9F94 BL 0x1C16DFC
	0x033D9F98 LDR W21, [X20 + 0xC]
	0x033D9F9C LDR X0, [X25]
	0x033D9FA0 LDR W8, [X0 + 0xE0]
	0x033D9FA4 CBNZ W8, 0x33D9FAC
	0x033D9FA8 BL 0x1C16DFC
	0x033D9FAC UBFM W8, W21, 0x10, 0xF
	0x033D9FB0 CMP W21, 0x10000

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move [X31+40], X19
	004 NotImplemented "Instruction MRS not yet implemented."
	005 Move X8, [X19+40]
	006 Add X0, X31, 8
	007 Move [X31+24], X8
	008 Move [X31+8], X31
	009 Move [X31+16], X31
	010 Call Decimal..ctor, X0, V0
	011 Move X0, [X31+8]
	012 Move X1, [X31+16]
	013 Move X8, [X19+40]
	014 Move X9, [X31+24]
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move X30, [X31+32]
	017 Move X19, [X31+40]
	018 Add X31, X31, 48
	019 Return X0
	020 Call 0x3EB2B20

Method: System.Int32 op_Explicit(System.Decimal value)

Disassembly:
	0x033D9FB4 CSEL W8, W8, W21, CC
	0x033D9FB8 MOVZ W9, 0x11
	0x033D9FBC UBFM W12, W8, 0x18, 0x1F
	0x033D9FC0 CSINC W9, W9, W31, CC
	0x033D9FC4 UBFM W11, W8, 0x18, 0x17
	0x033D9FC8 CMP W12, 0x0
	0x033D9FCC ORR W12, W9, 0x8
	0x033D9FD0 CSEL W8, W11, W8, EQ
	0x033D9FD4 CSEL W9, W12, W9, EQ
	0x033D9FD8 UBFM W12, W8, 0x1C, 0x1F
	0x033D9FDC UBFM W11, W8, 0x1C, 0x1B
	0x033D9FE0 CMP W12, 0x0
	0x033D9FE4 ORR W12, W9, 0x4
	0x033D9FE8 CSEL W8, W11, W8, EQ
	0x033D9FEC LDR X10, [X19 + 0x8]
	0x033D9FF0 CSEL W9, W12, W9, EQ
	0x033D9FF4 UBFM W12, W8, 0x1E, 0x1F
	0x033D9FF8 UBFM W11, W8, 0x1E, 0x1D
	0x033D9FFC CMP W12, 0x0
	0x033DA000 ORR W12, W9, 0x2
	0x033DA004 CSEL W9, W12, W9, EQ
	0x033DA008 CSEL W8, W11, W8, EQ
	0x033DA00C ADD W11, W9, W8, 0x1F, ASR
	0x033DA010 LSLV X12, X10, X11
	0x033DA014 LDR W8, [X19 + 0xC]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1005000
	007 Move X21, 0xD43000
	008 Move W8, [X22+816]
	009 Move X21, [X21+1520]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD43000
	017 Move X0, [X0+1520]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+816], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]
	033 Call Decimal.ToInt32, X0
	034 Return X0

Method: System.Int64 op_Explicit(System.Decimal value)

Disassembly:
	0x033DA018 LDR W10, [X19 + 0x4]
	0x033DA01C MOVZ W9, 0x20
	0x033DA020 SUB W9, W9, W11
	0x033DA024 BFM X8, X10, 0x20, 0x1F
	0x033DA028 LSRV X8, X8, X9
	0x033DA02C STP X12, X8, [X31 + 0x38]
	0x033DA030 LDR X10, [X20 + 0x8]
	0x033DA034 LDR W8, [X20 + 0x4]
	0x033DA038 LSLV X21, X10, X11
	0x033DA03C CBZ W8, 0x33DA21C
	0x033DA040 LDR X0, [X25]
	0x033DA044 STR X21, [X31 + 0x10]
	0x033DA048 AND W22, W9, 0x3F
	0x033DA04C LDR W10, [X0 + 0xE0]
	0x033DA050 CBNZ W10, 0x33DA05C
	0x033DA054 BL 0x1C16DFC
	0x033DA058 LDR W8, [X20 + 0x4]
	0x033DA05C LDR W9, [X20 + 0xC]
	0x033DA060 ADD X0, X31, 0x38
	0x033DA064 ADD X1, X31, 0x10
	0x033DA068 BFM X9, X8, 0x20, 0x1F
	0x033DA06C LSRV X26, X9, X22
	0x033DA070 STR W26, [X31 + 0x18]
	0x033DA074 BL 0x33DB438
	0x033DA078 MOV W8, W0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1004000
	007 Move X21, 0xD42000
	008 Move W8, [X22+817]
	009 Move X21, [X21+1520]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD42000
	017 Move X0, [X0+1520]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+817], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]
	033 Call Decimal.ToInt64, X0
	034 Return X0

Method: System.Single op_Explicit(System.Decimal value)

Disassembly:
	0x033DA07C STR X8, [X31 + 0x28]
	0x033DA080 ADRP X28, 0xD19000
	0x033DA084 LDR X28, [X28 + 0x5A8]
	0x033DA088 MOV W27, W31
	0x033DA08C LDR X29, [X31 + 0x38]
	0x033DA090 LDR W23, [X31 + 0x40]
	0x033DA094 LDR W22, [X31 + 0x24]
	0x033DA098 ORR X8, X29, X23, 0x0
	0x033DA09C CBZ X8, 0x33DA0D4
	0x033DA0A0 CMP W22, 0x1C
	0x033DA0A4 B.EQ 0x33DA39C
	0x033DA0A8 LDR X0, [X25]
	0x033DA0AC LDR W8, [X0 + 0xE0]
	0x033DA0B0 CBNZ W8, 0x33DA0B8
	0x033DA0B4 BL 0x1C16DFC
	0x033DA0B8 ADD X0, X31, 0x28
	0x033DA0BC MOV W1, W22
	0x033DA0C0 BL 0x33DC404
	0x033DA0C4 CBZ W0, 0x33DA39C
	0x033DA0C8 MOV W22, W0
	0x033DA0CC MOVZ W27, 0x1
	0x033DA0D0 B 0x33DA0FC
	0x033DA0D4 TBZ X22, 0x1F, 0x33DA59C
	0x033DA0D8 LDR X0, [X28]
	0x033DA0DC LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1004000
	007 Move X21, 0xD42000
	008 Move W8, [X22+818]
	009 Move X21, [X21+1520]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD42000
	017 Move X0, [X0+1520]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+818], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]
	033 Call Decimal.ToSingle, X0
	034 Return V0

Method: System.Double op_Explicit(System.Decimal value)

Disassembly:
	0x033DA0E0 CBNZ W8, 0x33DA0E8
	0x033DA0E4 BL 0x1C16DFC
	0x033DA0E8 SUB W1, W31, W22
	0x033DA0EC MOVZ W0, 0x9
	0x033DA0F0 MOV X2, X31
	0x033DA0F4 BL 0x337EE94
	0x033DA0F8 MOV W22, W0
	0x033DA0FC LDR X0, [X25]
	0x033DA100 LDR W8, [X0 + 0xE0]
	0x033DA104 CBNZ W8, 0x33DA110
	0x033DA108 BL 0x1C16DFC
	0x033DA10C LDR X0, [X25]
	0x033DA110 LDR X8, [X0 + 0xB8]
	0x033DA114 LDR X8, [X8]
	0x033DA118 CBZ X8, 0x33DA65C
	0x033DA11C LDR W9, [X8 + 0x18]
	0x033DA120 CMP W22, W9
	0x033DA124 B.CS 0x33DA660
	0x033DA128 ADD X8, X8, W22, 0x2, SXTW
	0x033DA12C LDR W9, [X31 + 0x24]
	0x033DA130 LDR W23, [X8 + 0x20]
	0x033DA134 ADD X0, X31, 0x28
	0x033DA138 ADD W8, W9, W22
	0x033DA13C MOV W1, W23
	0x033DA140 STR W8, [X31 + 0x24]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1004000
	007 Move X21, 0xD42000
	008 Move W8, [X22+819]
	009 Move X21, [X21+1520]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD42000
	017 Move X0, [X0+1520]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+819], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]
	033 Call Decimal.ToDouble, X0
	034 Return V0

Method: System.Decimal op_Addition(System.Decimal d1, System.Decimal d2)

Disassembly:
	0x033DA144 BL 0x33DB56C
	0x033DA148 CBNZ W0, 0x33DA664
	0x033DA14C LDR X0, [X25]
	0x033DA150 LDR W8, [X0 + 0xE0]
	0x033DA154 CBNZ W8, 0x33DA15C
	0x033DA158 BL 0x1C16DFC
	0x033DA15C ADD X0, X31, 0x38
	0x033DA160 MOV W1, W23
	0x033DA164 BL 0x33DB56C
	0x033DA168 STR W0, [X31 + 0x44]
	0x033DA16C ADD X0, X31, 0x38
	0x033DA170 ADD X1, X31, 0x10
	0x033DA174 BL 0x33DB438
	0x033DA178 LDR X8, [X31 + 0x28]
	0x033DA17C ADDS X8, X8, W0, UXTW
	0x033DA180 STR X8, [X31 + 0x28]
	0x033DA184 B.CC 0x33DA08C
	0x033DA188 LDR W8, [X31 + 0x30]
	0x033DA18C ADDS W8, W8, 0x1
	0x033DA190 STR W8, [X31 + 0x30]
	0x033DA194 B.CC 0x33DA08C
	0x033DA198 LDR X0, [X25]
	0x033DA19C LDR W21, [X31 + 0x24]
	0x033DA1A0 LDP X22, X23, [X31 + 0x38]
	0x033DA1A4 LDR W8, [X0 + 0xE0]
	0x033DA1A8 CBNZ W8, 0x33DA1B0
	0x033DA1AC BL 0x1C16DFC
	0x033DA1B0 ORR X8, X23, X22, 0x0
	0x033DA1B4 CMP X8, 0x0
	0x033DA1B8 B 0x33DA584
	0x033DA1BC BL 0x1C16DFC
	0x033DA1C0 CBNZ W21, 0x33D9F80
	0x033DA1C4 LDR W23, [X20 + 0x8]
	0x033DA1C8 CBZ W23, 0x33DA6AC
	0x033DA1CC LDR X0, [X25]
	0x033DA1D0 LDR W8, [X0 + 0xE0]
	0x033DA1D4 CBNZ W8, 0x33DA1DC
	0x033DA1D8 BL 0x1C16DFC
	0x033DA1DC LDR X8, [X19 + 0x8]
	0x033DA1E0 STR X8, [X31 + 0x28]
	0x033DA1E4 LDR W9, [X19 + 0x4]
	0x033DA1E8 STR W9, [X31 + 0x30]
	0x033DA1EC CBZ W9, 0x33DA3C4
	0x033DA1F0 LDUR X9, [X31 + 0x2C]
	0x033DA1F4 UDIV X10, X9, X23

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+56], X21
	004 Move [X31+64], X20
	005 Move [X31+72], X19
	006 NotImplemented "Instruction MRS not yet implemented."
	007 Move X8, [X19+40]
	008 Move X20, 0x1004000
	009 Move X21, 0xD42000
	010 Move [X31+40], X8
	011 Move [X31+24], X0
	012 Move [X31+32], X1
	013 Move [X31+8], X2
	014 Move [X31+16], X3
	015 Move W8, [X20+820]
	016 Move X21, [X21+1520]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0xD53000
	022 Move X0, [X0+3560]
	023 Call 0x1C17CF4
	024 Move X0, 0xD42000
	025 Move X0, [X0+1520]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+820], W8
	029 Move X0, [X21]
	030 Move X20, 0xD53000
	031 Move W8, [X0+224]
	032 Move X20, [X20+3560]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, [X20]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Add X0, X31, 24
	042 Add X1, X31, 8
	043 Move W2, W31
	044 Call DecCalc.DecAddSub, X0, X1, X2
	045 Move X0, [X31+24]
	046 Move X1, [X31+32]
	047 Move X8, [X19+40]
	048 Move X9, [X31+40]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X20, [X31+64]
	051 Move X19, [X31+72]
	052 Move X30, [X31+48]
	053 Move X21, [X31+56]
	054 Add X31, X31, 80
	055 Return X0
	056 Call 0x3EB2B20

Method: System.Decimal op_Subtraction(System.Decimal d1, System.Decimal d2)

Disassembly:
	0x033DA860 ADRP X0, 0xD4E000
	0x033DA864 LDR X0, [X0 + 0x30]
	0x033DA868 BL 0x1C16D08
	0x033DA86C MOV X19, X0
	0x033DA870 ADRP X0, 0xD4B000
	0x033DA874 LDR X0, [X0 + 0xA0]
	0x033DA878 BL 0x1C16D08
	0x033DA87C MOV X20, X0
	0x033DA880 ADRP X0, 0xD4B000
	0x033DA884 LDR X0, [X0 + 0xE0]
	0x033DA888 BL 0x1C16D08
	0x033DA88C MOV X2, X0
	0x033DA890 MOV X0, X19
	0x033DA894 MOV X1, X20
	0x033DA898 MOV X3, X31
	0x033DA89C BL 0x320A264
	0x033DA8A0 MOV X19, X0
	0x033DA8A4 ADRP X0, 0xD21000
	0x033DA8A8 LDR X0, [X0 + 0xC08]
	0x033DA8AC BL 0x1C16D08
	0x033DA8B0 BL 0x1C16F10
	0x033DA8B4 MOV X1, X19
	0x033DA8B8 MOV X2, X31
	0x033DA8BC MOV X20, X0
	0x033DA8C0 BL 0x337B498
	0x033DA8C4 ADRP X0, 0xD52000
	0x033DA8C8 LDR X0, [X0 + 0xEA8]
	0x033DA8CC BL 0x1C16D08
	0x033DA8D0 MOV X1, X0
	0x033DA8D4 MOV X0, X20
	0x033DA8D8 BL 0x1C16DEC
	0x033DA8DC STP X30, X21, [X31 - 0x20]!
	0x033DA8E0 STP X20, X19, [X31 + 0x10]
	0x033DA8E4 ADRP X21, 0x1003000
	0x033DA8E8 ADRP X20, 0xD22000
	0x033DA8EC LDRB W8, [X21 + 0x33B]
	0x033DA8F0 LDR X20, [X20 + 0x9E8]
	0x033DA8F4 MOV X19, X0
	0x033DA8F8 TBNZ X8, 0x0, 0x33DA910
	0x033DA8FC ADRP X0, 0xD22000
	0x033DA900 LDR X0, [X0 + 0x9E8]
	0x033DA904 BL 0x1C16CF4
	0x033DA908 MOVZ W8, 0x1
	0x033DA90C STRB W8, [X21 + 0x33B]
	0x033DA910 LDR X0, [X20]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+56], X21
	004 Move [X31+64], X20
	005 Move [X31+72], X19
	006 NotImplemented "Instruction MRS not yet implemented."
	007 Move X8, [X19+40]
	008 Move X20, 0x1004000
	009 Move X21, 0xD42000
	010 Move [X31+40], X8
	011 Move [X31+24], X0
	012 Move [X31+32], X1
	013 Move [X31+8], X2
	014 Move [X31+16], X3
	015 Move W8, [X20+821]
	016 Move X21, [X21+1520]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0xD53000
	022 Move X0, [X0+3560]
	023 Call 0x1C17CF4
	024 Move X0, 0xD42000
	025 Move X0, [X0+1520]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+821], W8
	029 Move X0, [X21]
	030 Move X20, 0xD53000
	031 Move W8, [X0+224]
	032 Move X20, [X20+3560]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, [X20]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Add X0, X31, 24
	042 Add X1, X31, 8
	043 Move W2, 1
	044 Call DecCalc.DecAddSub, X0, X1, X2
	045 Move X0, [X31+24]
	046 Move X1, [X31+32]
	047 Move X8, [X19+40]
	048 Move X9, [X31+40]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X20, [X31+64]
	051 Move X19, [X31+72]
	052 Move X30, [X31+48]
	053 Move X21, [X31+56]
	054 Add X31, X31, 80
	055 Return X0
	056 Call 0x3EB2B20

Method: System.Decimal op_Multiply(System.Decimal d1, System.Decimal d2)

Disassembly:
	0x033DA914 LDP X20, X19, [X19]
	0x033DA918 LDR W8, [X0 + 0xE0]
	0x033DA91C CBNZ W8, 0x33DA924
	0x033DA920 BL 0x1C16DFC
	0x033DA924 MOV X0, X20
	0x033DA928 MOV X1, X19
	0x033DA92C LDP X20, X19, [X31 + 0x10]
	0x033DA930 MOV X2, X31
	0x033DA934 LDP X30, X21, [X31], #0x20
	0x033DA938 B 0x331F0AC
	0x033DA93C STP X30, X21, [X31 - 0x20]!
	0x033DA940 STP X20, X19, [X31 + 0x10]
	0x033DA944 ADRP X21, 0x1003000
	0x033DA948 ADRP X20, 0xD22000
	0x033DA94C LDRB W8, [X21 + 0x33C]
	0x033DA950 LDR X20, [X20 + 0x9E8]
	0x033DA954 MOV X19, X0
	0x033DA958 TBNZ X8, 0x0, 0x33DA970
	0x033DA95C ADRP X0, 0xD22000
	0x033DA960 LDR X0, [X0 + 0x9E8]
	0x033DA964 BL 0x1C16CF4
	0x033DA968 MOVZ W8, 0x1
	0x033DA96C STRB W8, [X21 + 0x33C]
	0x033DA970 LDR X0, [X20]
	0x033DA974 LDP X20, X19, [X19]
	0x033DA978 LDR W8, [X0 + 0xE0]
	0x033DA97C CBNZ W8, 0x33DA984
	0x033DA980 BL 0x1C16DFC
	0x033DA984 MOV X0, X20
	0x033DA988 MOV X1, X19
	0x033DA98C LDP X20, X19, [X31 + 0x10]
	0x033DA990 MOV X2, X31
	0x033DA994 LDP X30, X21, [X31], #0x20
	0x033DA998 B 0x331F650
	0x033DA99C STP X30, X21, [X31 - 0x20]!
	0x033DA9A0 STP X20, X19, [X31 + 0x10]
	0x033DA9A4 ADRP X21, 0x1003000
	0x033DA9A8 ADRP X20, 0xD22000
	0x033DA9AC LDRB W8, [X21 + 0x33D]
	0x033DA9B0 LDR X20, [X20 + 0x9E8]
	0x033DA9B4 MOV X19, X0
	0x033DA9B8 TBNZ X8, 0x0, 0x33DA9D0
	0x033DA9BC ADRP X0, 0xD22000
	0x033DA9C0 LDR X0, [X0 + 0x9E8]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+56], X21
	004 Move [X31+64], X20
	005 Move [X31+72], X19
	006 NotImplemented "Instruction MRS not yet implemented."
	007 Move X8, [X19+40]
	008 Move X20, 0x1004000
	009 Move X21, 0xD42000
	010 Move [X31+40], X8
	011 Move [X31+24], X0
	012 Move [X31+32], X1
	013 Move [X31+8], X2
	014 Move [X31+16], X3
	015 Move W8, [X20+822]
	016 Move X21, [X21+1520]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0xD53000
	022 Move X0, [X0+3560]
	023 Call 0x1C17CF4
	024 Move X0, 0xD42000
	025 Move X0, [X0+1520]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+822], W8
	029 Move X0, [X21]
	030 Move X20, 0xD53000
	031 Move W8, [X0+224]
	032 Move X20, [X20+3560]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, [X20]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Add X0, X31, 24
	042 Add X1, X31, 8
	043 Call DecCalc.VarDecMul, X0, X1
	044 Move X0, [X31+24]
	045 Move X1, [X31+32]
	046 Move X8, [X19+40]
	047 Move X9, [X31+40]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move X20, [X31+64]
	050 Move X19, [X31+72]
	051 Move X30, [X31+48]
	052 Move X21, [X31+56]
	053 Add X31, X31, 80
	054 Return X0
	055 Call 0x3EB2B20

Method: System.Decimal op_Division(System.Decimal d1, System.Decimal d2)

Disassembly:
	0x033DAE18 TBNZ X8, 0x0, 0x33DAE30
	0x033DAE1C ADRP X0, 0xD41000
	0x033DAE20 LDR X0, [X0 + 0x5F0]
	0x033DAE24 BL 0x1C16CF4
	0x033DAE28 MOVZ W8, 0x1
	0x033DAE2C STRB W8, [X20 + 0x346]
	0x033DAE30 LDR X8, [X19]
	0x033DAE34 ADRP X9, 0xFFFFFFFFFD710000
	0x033DAE38 LDR V0, [X9 + 0x79]
	0x033DAE3C ADRP X10, 0xFFFFFFFFFD712000
	0x033DAE40 LDR X8, [X8 + 0xB8]
	0x033DAE44 STP X31, X31, [X8]
	0x033DAE48 LDR X8, [X19]
	0x033DAE4C LDP X20, X19, [X31 + 0x10]
	0x033DAE50 LDR X9, [X8 + 0xB8]
	0x033DAE54 STR V0, [X9 + 0x1]
	0x033DAE58 LDR V0, [X10 + 0x1D]
	0x033DAE5C LDR X9, [X8 + 0xB8]
	0x033DAE60 ADRP X10, 0xFFFFFFFFFD710000
	0x033DAE64 STR V0, [X9 + 0x2]
	0x033DAE68 LDR V0, [X10 + 0xC1]
	0x033DAE6C LDR X9, [X8 + 0xB8]
	0x033DAE70 ADRP X10, 0xFFFFFFFFFD712000
	0x033DAE74 STR V0, [X9 + 0x3]
	0x033DAE78 LDR X8, [X8 + 0xB8]
	0x033DAE7C LDR V0, [X10 + 0x1E]
	0x033DAE80 STR V0, [X8 + 0x4]
	0x033DAE84 LDR X30, [X31], #0x20
	0x033DAE88 RET
	0x033DAE8C LDR W0, [X0 + 0x4]
	0x033DAE90 RET
	0x033DAE94 STR W1, [X0 + 0x4]
	0x033DAE98 RET
	0x033DAE9C LDR W0, [X0 + 0x8]
	0x033DAEA0 RET
	0x033DAEA4 STR W1, [X0 + 0x8]
	0x033DAEA8 RET
	0x033DAEAC LDR W0, [X0 + 0xC]
	0x033DAEB0 RET
	0x033DAEB4 STR W1, [X0 + 0xC]
	0x033DAEB8 RET
	0x033DAEBC LDR W8, [X0]
	0x033DAEC0 UBFM W0, W8, 0x1F, 0x1F
	0x033DAEC4 RET

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+56], X21
	004 Move [X31+64], X20
	005 Move [X31+72], X19
	006 NotImplemented "Instruction MRS not yet implemented."
	007 Move X8, [X19+40]
	008 Move X20, 0x1004000
	009 Move X21, 0xD42000
	010 Move [X31+40], X8
	011 Move [X31+24], X0
	012 Move [X31+32], X1
	013 Move [X31+8], X2
	014 Move [X31+16], X3
	015 Move W8, [X20+823]
	016 Move X21, [X21+1520]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0xD53000
	022 Move X0, [X0+3560]
	023 Call 0x1C17CF4
	024 Move X0, 0xD42000
	025 Move X0, [X0+1520]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+823], W8
	029 Move X0, [X21]
	030 Move X20, 0xD53000
	031 Move W8, [X0+224]
	032 Move X20, [X20+3560]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, [X20]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Add X0, X31, 24
	042 Add X1, X31, 8
	043 Call DecCalc.VarDecDiv, X0, X1
	044 Move X0, [X31+24]
	045 Move X1, [X31+32]
	046 Move X8, [X19+40]
	047 Move X9, [X31+40]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move X20, [X31+64]
	050 Move X19, [X31+72]
	051 Move X30, [X31+48]
	052 Move X21, [X31+56]
	053 Add X31, X31, 80
	054 Return X0
	055 Call 0x3EB2B20

Method: System.Boolean op_Equality(System.Decimal d1, System.Decimal d2)

Disassembly:
	0x033DB6D0 UBFM W19, W21, 0x1B, 0x1A
	0x033DB6D4 LDR W8, [X0 + 0xE0]
	0x033DB6D8 CBNZ W8, 0x33DB6E8
	0x033DB6DC BL 0x1C16DFC
	0x033DB6E0 ADRP X15, 0xD51000
	0x033DB6E4 LDR X15, [X15 + 0xDE8]
	0x033DB6E8 UBFM W8, W22, 0x10, 0xF
	0x033DB6EC CMP W22, 0x10000
	0x033DB6F0 CSEL W8, W8, W22, CC
	0x033DB6F4 MOVZ W9, 0x11
	0x033DB6F8 UBFM W12, W8, 0x18, 0x1F
	0x033DB6FC CSINC W9, W9, W31, CC
	0x033DB700 UBFM W11, W8, 0x18, 0x17
	0x033DB704 CMP W12, 0x0
	0x033DB708 ORR W12, W9, 0x8
	0x033DB70C CSEL W8, W11, W8, EQ
	0x033DB710 CSEL W9, W12, W9, EQ
	0x033DB714 UBFM W12, W8, 0x1C, 0x1F
	0x033DB718 UBFM W11, W8, 0x1C, 0x1B
	0x033DB71C CMP W12, 0x0
	0x033DB720 ORR W12, W9, 0x4
	0x033DB724 CSEL W8, W11, W8, EQ
	0x033DB728 CSEL W9, W12, W9, EQ
	0x033DB72C UBFM W12, W8, 0x1E, 0x1F
	0x033DB730 CMP W12, 0x0
	0x033DB734 ORR W12, W9, 0x2
	0x033DB738 UBFM W11, W8, 0x1E, 0x1D
	0x033DB73C CSEL W9, W12, W9, EQ
	0x033DB740 CSEL W8, W11, W8, EQ
	0x033DB744 SUB W9, W19, W9
	0x033DB748 MOVZ W10, 0x4D
	0x033DB74C ADD W8, W9, W8, 0x1F, LSR
	0x033DB750 MOVN W9, 0x138C
	0x033DB754 MADD W8, W8, W10, W9
	0x033DB758 SBFM W8, W8, 0x8, 0x1F
	0x033DB75C CMP W8, W26

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+56], X21
	004 Move [X31+64], X20
	005 Move [X31+72], X19
	006 NotImplemented "Instruction MRS not yet implemented."
	007 Move X8, [X19+40]
	008 Move X20, 0x1003000
	009 Move X21, 0xD52000
	010 Move [X31+40], X8
	011 Move [X31+24], X0
	012 Move [X31+32], X1
	013 Move [X31+8], X2
	014 Move [X31+16], X3
	015 Move W8, [X20+824]
	016 Move X21, [X21+3560]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xD52000
	022 Move X0, [X0+3560]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+824], W8
	026 Move X0, [X21]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Add X0, X31, 24
	032 Add X1, X31, 8
	033 Call DecCalc.VarDecCmp, X0, X1
	034 Move X8, [X19+40]
	035 Move X9, [X31+40]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction CSET not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X20, [X31+64]
	040 Move X19, [X31+72]
	041 Move X30, [X31+48]
	042 Move X21, [X31+56]
	043 Add X31, X31, 80
	044 Return X0
	045 Call 0x3EB2B20

Method: System.Boolean op_Inequality(System.Decimal d1, System.Decimal d2)

Disassembly:
	0x033DB760 B.GE 0x33DC1AC
	0x033DB764 ADD W8, W8, 0x1
	0x033DB768 B 0x33DB770
	0x033DB76C MOV W8, W31
	0x033DB770 SUB W9, W26, 0x1C
	0x033DB774 CMP W8, W9
	0x033DB778 CSEL W25, W9, W8, LT
	0x033DB77C CBZ W25, 0x33DC188
	0x033DB780 MOVZ X3, 0x5A53
	0x033DB784 MOVZ X6, 0xF5C3
	0x033DB788 MOVZ X7, 0xF7CF
	0x033DB78C MOVZ X30, 0x594B
	0x033DB790 MOVZ X24, 0xCEFD
	0x033DB794 MOVK X3, 0xA09B0000
	0x033DB798 MOVK X6, 0x5C280000
	0x033DB79C MOVK X7, 0xE3530000
	0x033DB7A0 MOVK X30, 0x38860000
	0x033DB7A4 MOVK X24, 0x84610000
	0x033DB7A8 MOVZ W16, 0x7960
	0x033DB7AC MOVZ W17, 0xBDC0
	0x033DB7B0 MOVZ W1, 0x6980
	0x033DB7B4 MOVZ W2, 0x1F00
	0x033DB7B8 MOVZ W27, 0x3600
	0x033DB7BC MOVK X3, 0xB82F
	0x033DB7C0 ADRP X4, 0xFFFFFFFFFD7BB000
	0x033DB7C4 ORR X5, X31, 0xCCCCCCCCCCCCCCCC
	0x033DB7C8 MOVK X6, 0xC28F
	0x033DB7CC MOVK X7, 0x9BA5
	0x033DB7D0 MOVK X30, 0xC5D6
	0x033DB7D4 MOVK X24, 0x7711
	0x033DB7D8 MOV W10, W31
	0x033DB7DC MOV W28, W31
	0x033DB7E0 MOVK W16, 0xFFFE0000
	0x033DB7E4 MOVK W17, 0xFFF00000
	0x033DB7E8 MOVK W1, 0xFF670000
	0x033DB7EC MOVK W2, 0xFA0A0000

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+56], X21
	004 Move [X31+64], X20
	005 Move [X31+72], X19
	006 NotImplemented "Instruction MRS not yet implemented."
	007 Move X8, [X19+40]
	008 Move X20, 0x1003000
	009 Move X21, 0xD52000
	010 Move [X31+40], X8
	011 Move [X31+24], X0
	012 Move [X31+32], X1
	013 Move [X31+8], X2
	014 Move [X31+16], X3
	015 Move W8, [X20+825]
	016 Move X21, [X21+3560]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xD52000
	022 Move X0, [X0+3560]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+825], W8
	026 Move X0, [X21]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Add X0, X31, 24
	032 Add X1, X31, 8
	033 Call DecCalc.VarDecCmp, X0, X1
	034 Move X8, [X19+40]
	035 Move X9, [X31+40]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction CSET not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X20, [X31+64]
	040 Move X19, [X31+72]
	041 Move X30, [X31+48]
	042 Move X21, [X31+56]
	043 Add X31, X31, 80
	044 Return X0
	045 Call 0x3EB2B20

Method: System.TypeCode GetTypeCode()

Disassembly:
	0x033DB7F0 MOVK W27, 0xC4650000
	0x033DB7F4 SUB W26, W26, W25

ISIL:
	001 Move W0, 15
	002 Return X0

Method: System.Boolean System.IConvertible.ToBoolean(System.IFormatProvider provider)

Disassembly:
	0x033DB7F8 MOVK X3, 0x440000
	0x033DB7FC ADD X4, X4, 0xA2E
	0x033DB800 MOVN W19, 0x9
	0x033DB804 MOVK X5, 0xCCCD
	0x033DB808 MOVN W22, 0x63
	0x033DB80C MOVK X6, 0x28F50000
	0x033DB810 MOVN W29, 0x3E7
	0x033DB814 MOVK X7, 0x20C40000
	0x033DB818 MOVN W23, 0x270F
	0x033DB81C MOVK X30, 0x346D0000
	0x033DB820 MOVK X24, 0xABCC0000
	0x033DB824 STR W26, [X31 + 0xC]
	0x033DB828 SUB W8, W25, 0x1
	0x033DB82C CMP W8, 0x7
	0x033DB830 MOV W26, W10
	0x033DB834 B.HI 0x33DB930
	0x033DB838 ADR X9, 0x10
	0x033DB83C LDRH W10, [X4, X8, LSL #1]
	0x033DB840 ADD X9, X9, X10, 0x2, LSL
	0x033DB844 BR X9
	0x033DB848 LDR X0, [X15]
	0x033DB84C LDR W8, [X0 + 0xE0]
	0x033DB850 CBNZ W8, 0x33DB8D0
	0x033DB854 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1003000
	006 Move X20, 0xD22000
	007 Move W8, [X21+826]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD22000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+826], W8
	019 Move X0, [X20]
	020 Move X20, [X19]
	021 Move X19, [X19+8]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X2, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call Convert.ToBoolean, X0
	034 Return X0

Method: System.Char System.IConvertible.ToChar(System.IFormatProvider provider)

Disassembly:
	0x033DB858 ADRP X15, 0xD51000
	0x033DB85C MOVZ X30, 0x594B
	0x033DB860 MOVZ X7, 0xF7CF
	0x033DB864 MOVZ X6, 0xF5C3
	0x033DB868 MOVZ X3, 0x5A53
	0x033DB86C LDR X15, [X15 + 0xDE8]
	0x033DB870 MOVK X30, 0x38860000
	0x033DB874 MOVK X7, 0xE3530000
	0x033DB878 MOVK X6, 0x5C280000
	0x033DB87C MOVK X3, 0xA09B0000
	0x033DB880 MOVK X30, 0xC5D6
	0x033DB884 MOVK X7, 0x9BA5
	0x033DB888 MOVK X6, 0xC28F
	0x033DB88C ORR X5, X31, 0xCCCCCCCCCCCCCCCC
	0x033DB890 ADRP X4, 0xFFFFFFFFFD7BB000
	0x033DB894 MOVK X3, 0xB82F
	0x033DB898 MOVZ W2, 0x1F00
	0x033DB89C MOVZ W1, 0x6980
	0x033DB8A0 MOVZ W17, 0xBDC0
	0x033DB8A4 MOVZ W16, 0x7960
	0x033DB8A8 MOVK X30, 0x346D0000
	0x033DB8AC MOVK X7, 0x20C40000
	0x033DB8B0 MOVK X6, 0x28F50000
	0x033DB8B4 MOVK X5, 0xCCCD
	0x033DB8B8 ADD X4, X4, 0xA2E
	0x033DB8BC MOVK X3, 0x440000
	0x033DB8C0 MOVK W2, 0xFA0A0000
	0x033DB8C4 MOVK W1, 0xFF670000
	0x033DB8C8 MOVK W17, 0xFFF00000
	0x033DB8CC MOVK W16, 0xFFFE0000
	0x033DB8D0 ADD X8, X20, W21, 0x2, UXTW
	0x033DB8D4 LDR W10, [X8]
	0x033DB8D8 MOVZ W9, 0xCCCD

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0xD4E000
	005 Move X0, [X0+48]
	006 Call 0x1C17D08
	007 Move X19, X0
	008 Move X0, 0xD4B000
	009 Move X0, [X0+160]
	010 Call 0x1C17D08
	011 Move X20, X0
	012 Move X0, 0xD4B000
	013 Move X0, [X0+224]
	014 Call 0x1C17D08
	015 Move X2, X0
	016 Move X0, X19
	017 Move X1, X20
	018 Move X3, X31
	019 Call SR.Format, X0, X1, X2
	020 Move X19, X0
	021 Move X0, 0xD21000
	022 Move X0, [X0+3080]
	023 Call 0x1C17D08
	024 Call 0x1C17F10
	025 Move X1, X19
	026 Move X2, X31
	027 Move X20, X0
	028 Call InvalidCastException..ctor, X0, X1
	029 Move X0, 0xD52000
	030 Move X0, [X0+3752]
	031 Call 0x1C17D08
	032 Move X1, X0
	033 Move X0, X20
	034 Call 0x1C17DEC

Method: System.SByte System.IConvertible.ToSByte(System.IFormatProvider provider)

Disassembly:
	0x033DB8DC MOVK W9, 0xCCCC0000
	0x033DB8E0 SUBS W12, W21, 0x1
	0x033DB8E4 MUL X9, X10, X9
	0x033DB8E8 UBFM X9, X9, 0x23, 0x3F
	0x033DB8EC MADD W10, W9, W19, W10
	0x033DB8F0 B.MI 0x33DB928
	0x033DB8F4 MOV W11, W12
	0x033DB8F8 ADD X11, X11, 0x1
	0x033DB8FC ADD X12, X20, W12, 0x2, UXTW
	0x033DB900 LDR W13, [X12]
	0x033DB904 SUB X11, X11, 0x1
	0x033DB908 CMP X11, 0x0
	0x033DB90C MOV X14, X13
	0x033DB910 BFM X14, X10, 0x20, 0x1F
	0x00000000 INVALID
	0x033DB918 UBFM X10, X10, 0x3, 0x3F
	0x033DB91C STR W10, [X12], #0xFFFFFFFFFFFFFFFC
	0x033DB920 MADD W10, W10, W19, W13
	0x033DB924 B.GT 0x33DB900
	0x033DB928 MOVZ W11, 0x5
	0x033DB92C B 0x33DC0E4
	0x033DB930 LDR X0, [X15]
	0x033DB934 LDR W8, [X0 + 0xE0]
	0x033DB938 CBNZ W8, 0x33DB9B8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1003000
	006 Move X20, 0xD22000
	007 Move W8, [X21+827]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD22000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+827], W8
	019 Move X0, [X20]
	020 Move X20, [X19]
	021 Move X19, [X19+8]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X2, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call Convert.ToSByte, X0
	034 Return X0

Method: System.Byte System.IConvertible.ToByte(System.IFormatProvider provider)

Disassembly:
	0x033DB93C BL 0x1C16DFC
	0x033DB940 ADRP X15, 0xD51000
	0x033DB944 MOVZ X30, 0x594B
	0x033DB948 MOVZ X7, 0xF7CF
	0x033DB94C MOVZ X6, 0xF5C3
	0x033DB950 MOVZ X3, 0x5A53
	0x033DB954 LDR X15, [X15 + 0xDE8]
	0x033DB958 MOVK X30, 0x38860000
	0x033DB95C MOVK X7, 0xE3530000
	0x033DB960 MOVK X6, 0x5C280000
	0x033DB964 MOVK X3, 0xA09B0000
	0x033DB968 MOVK X30, 0xC5D6
	0x033DB96C MOVK X7, 0x9BA5
	0x033DB970 MOVK X6, 0xC28F
	0x033DB974 ORR X5, X31, 0xCCCCCCCCCCCCCCCC
	0x033DB978 ADRP X4, 0xFFFFFFFFFD7BB000
	0x033DB97C MOVK X3, 0xB82F
	0x033DB980 MOVZ W2, 0x1F00
	0x033DB984 MOVZ W1, 0x6980
	0x033DB988 MOVZ W17, 0xBDC0
	0x033DB98C MOVZ W16, 0x7960
	0x033DB990 MOVK X30, 0x346D0000
	0x033DB994 MOVK X7, 0x20C40000
	0x033DB998 MOVK X6, 0x28F50000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1003000
	006 Move X20, 0xD22000
	007 Move W8, [X21+828]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD22000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+828], W8
	019 Move X0, [X20]
	020 Move X20, [X19]
	021 Move X19, [X19+8]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X2, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call Convert.ToByte, X0
	034 Return X0

Method: System.Int16 System.IConvertible.ToInt16(System.IFormatProvider provider)

Disassembly:
	0x033DB99C MOVK X5, 0xCCCD
	0x033DB9A0 ADD X4, X4, 0xA2E
	0x033DB9A4 MOVK X3, 0x440000
	0x033DB9A8 MOVK W2, 0xFA0A0000
	0x033DB9AC MOVK W1, 0xFF670000
	0x033DB9B0 MOVK W17, 0xFFF00000
	0x033DB9B4 MOVK W16, 0xFFFE0000
	0x033DB9B8 ADD X8, X20, W21, 0x2, UXTW
	0x033DB9BC LDR W10, [X8]
	0x033DB9C0 MOVZ W11, 0x4B83
	0x033DB9C4 MOVK W11, 0x40000
	0x033DB9C8 SUBS W12, W21, 0x1
	0x033DB9CC UBFM W9, W10, 0x9, 0x1F
	0x033DB9D0 UMADDL X9, X9, X11, X31
	0x033DB9D4 UBFM X9, X9, 0x27, 0x3F
	0x033DB9D8 MADD W10, W9, W27, W10
	0x033DB9DC B.MI 0x33DBA18
	0x033DB9E0 MOV W11, W12
	0x033DB9E4 ADD X11, X11, 0x1
	0x033DB9E8 ADD X12, X20, W12, 0x2, UXTW
	0x033DB9EC LDR W13, [X12]
	0x033DB9F0 SUB X11, X11, 0x1
	0x033DB9F4 CMP X11, 0x0
	0x033DB9F8 MOV X14, X13

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1003000
	006 Move X20, 0xD22000
	007 Move W8, [X21+829]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD22000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+829], W8
	019 Move X0, [X20]
	020 Move X20, [X19]
	021 Move X19, [X19+8]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X2, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call Convert.ToInt16, X0
	034 Return X0

Method: System.UInt16 System.IConvertible.ToUInt16(System.IFormatProvider provider)

Disassembly:
	0x033DB9FC BFM X14, X10, 0x20, 0x1F
	0x033DBA00 UBFM X10, X14, 0x9, 0x3F
	0x00000000 INVALID
	0x033DBA08 UBFM X10, X10, 0xB, 0x3F
	0x033DBA0C STR W10, [X12], #0xFFFFFFFFFFFFFFFC
	0x033DBA10 MADD W10, W10, W27, W13
	0x033DBA14 B.GT 0x33DB9EC
	0x033DBA18 MOVZ W11, 0x6500
	0x033DBA1C MOVK W11, 0x1DCD0000
	0x033DBA20 B 0x33DC0E4
	0x033DBA24 LDR X0, [X15]
	0x033DBA28 LDR W8, [X0 + 0xE0]
	0x033DBA2C CBNZ W8, 0x33DBAAC
	0x033DBA30 BL 0x1C16DFC
	0x033DBA34 ADRP X15, 0xD51000
	0x033DBA38 MOVZ X30, 0x594B
	0x033DBA3C MOVZ X7, 0xF7CF
	0x033DBA40 MOVZ X6, 0xF5C3
	0x033DBA44 MOVZ X3, 0x5A53
	0x033DBA48 LDR X15, [X15 + 0xDE8]
	0x033DBA4C MOVK X30, 0x38860000
	0x033DBA50 MOVK X7, 0xE3530000
	0x033DBA54 MOVK X6, 0x5C280000
	0x033DBA58 MOVK X3, 0xA09B0000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1003000
	006 Move X20, 0xD22000
	007 Move W8, [X21+830]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD22000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+830], W8
	019 Move X0, [X20]
	020 Move X20, [X19]
	021 Move X19, [X19+8]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X2, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call Convert.ToUInt16, X0
	034 Return X0

Method: System.Int32 System.IConvertible.ToInt32(System.IFormatProvider provider)

Disassembly:
	0x033DBA5C MOVK X30, 0xC5D6
	0x033DBA60 MOVK X7, 0x9BA5
	0x033DBA64 MOVK X6, 0xC28F
	0x033DBA68 ORR X5, X31, 0xCCCCCCCCCCCCCCCC
	0x033DBA6C ADRP X4, 0xFFFFFFFFFD7BB000
	0x033DBA70 MOVK X3, 0xB82F
	0x033DBA74 MOVZ W2, 0x1F00
	0x033DBA78 MOVZ W1, 0x6980
	0x033DBA7C MOVZ W17, 0xBDC0
	0x033DBA80 MOVZ W16, 0x7960
	0x033DBA84 MOVK X30, 0x346D0000
	0x033DBA88 MOVK X7, 0x20C40000
	0x033DBA8C MOVK X6, 0x28F50000
	0x033DBA90 MOVK X5, 0xCCCD
	0x033DBA94 ADD X4, X4, 0xA2E
	0x033DBA98 MOVK X3, 0x440000
	0x033DBA9C MOVK W2, 0xFA0A0000
	0x033DBAA0 MOVK W1, 0xFF670000
	0x033DBAA4 MOVK W17, 0xFFF00000
	0x033DBAA8 MOVK W16, 0xFFFE0000
	0x033DBAAC ADD X8, X20, W21, 0x2, UXTW
	0x033DBAB0 LDR W10, [X8]
	0x033DBAB4 MOVZ W9, 0x851F
	0x033DBAB8 MOVK W9, 0x51EB0000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1003000
	006 Move X20, 0xD22000
	007 Move W8, [X21+831]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD22000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+831], W8
	019 Move X0, [X20]
	020 Move X20, [X19]
	021 Move X19, [X19+8]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X2, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call Convert.ToInt32, X0
	034 Return X0

Method: System.UInt32 System.IConvertible.ToUInt32(System.IFormatProvider provider)

Disassembly:
	0x033DBABC SUBS W12, W21, 0x1
	0x033DBAC0 MUL X9, X10, X9
	0x033DBAC4 UBFM X9, X9, 0x25, 0x3F
	0x033DBAC8 MADD W10, W9, W22, W10
	0x033DBACC B.MI 0x33DC0C8
	0x033DBAD0 MOV W11, W12
	0x033DBAD4 ADD X11, X11, 0x1
	0x033DBAD8 ADD X12, X20, W12, 0x2, UXTW
	0x033DBADC LDR W13, [X12]
	0x033DBAE0 SUB X11, X11, 0x1
	0x033DBAE4 CMP X11, 0x0
	0x033DBAE8 MOV X14, X13
	0x033DBAEC BFM X14, X10, 0x20, 0x1F
	0x033DBAF0 UBFM X10, X14, 0x2, 0x3F
	0x00000000 INVALID
	0x033DBAF8 UBFM X10, X10, 0x2, 0x3F
	0x033DBAFC STR W10, [X12], #0xFFFFFFFFFFFFFFFC
	0x033DBB00 MADD W10, W10, W22, W13
	0x033DBB04 B.GT 0x33DBADC
	0x033DBB08 MOVZ W11, 0x32
	0x033DBB0C B 0x33DBDE0
	0x033DBB10 LDR X0, [X15]
	0x033DBB14 LDR W8, [X0 + 0xE0]
	0x033DBB18 CBNZ W8, 0x33DBB98

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1003000
	006 Move X20, 0xD22000
	007 Move W8, [X21+832]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD22000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+832], W8
	019 Move X0, [X20]
	020 Move X20, [X19]
	021 Move X19, [X19+8]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X2, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call Convert.ToUInt32, X0
	034 Return X0

Method: System.Int64 System.IConvertible.ToInt64(System.IFormatProvider provider)

Disassembly:
	0x033DBB1C BL 0x1C16DFC
	0x033DBB20 ADRP X15, 0xD51000
	0x033DBB24 MOVZ X30, 0x594B
	0x033DBB28 MOVZ X7, 0xF7CF
	0x033DBB2C MOVZ X6, 0xF5C3
	0x033DBB30 MOVZ X3, 0x5A53
	0x033DBB34 LDR X15, [X15 + 0xDE8]
	0x033DBB38 MOVK X30, 0x38860000
	0x033DBB3C MOVK X7, 0xE3530000
	0x033DBB40 MOVK X6, 0x5C280000
	0x033DBB44 MOVK X3, 0xA09B0000
	0x033DBB48 MOVK X30, 0xC5D6
	0x033DBB4C MOVK X7, 0x9BA5
	0x033DBB50 MOVK X6, 0xC28F
	0x033DBB54 ORR X5, X31, 0xCCCCCCCCCCCCCCCC
	0x033DBB58 ADRP X4, 0xFFFFFFFFFD7BB000
	0x033DBB5C MOVK X3, 0xB82F
	0x033DBB60 MOVZ W2, 0x1F00
	0x033DBB64 MOVZ W1, 0x6980
	0x033DBB68 MOVZ W17, 0xBDC0
	0x033DBB6C MOVZ W16, 0x7960
	0x033DBB70 MOVK X30, 0x346D0000
	0x033DBB74 MOVK X7, 0x20C40000
	0x033DBB78 MOVK X6, 0x28F50000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1003000
	006 Move X20, 0xD22000
	007 Move W8, [X21+833]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD22000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+833], W8
	019 Move X0, [X20]
	020 Move X20, [X19]
	021 Move X19, [X19+8]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X2, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call Convert.ToInt64, X0
	034 Return X0

Method: System.UInt64 System.IConvertible.ToUInt64(System.IFormatProvider provider)

Disassembly:
	0x033DBB7C MOVK X5, 0xCCCD
	0x033DBB80 ADD X4, X4, 0xA2E
	0x033DBB84 MOVK X3, 0x440000
	0x033DBB88 MOVK W2, 0xFA0A0000
	0x033DBB8C MOVK W1, 0xFF670000
	0x033DBB90 MOVK W17, 0xFFF00000
	0x033DBB94 MOVK W16, 0xFFFE0000
	0x033DBB98 ADD X8, X20, W21, 0x2, UXTW
	0x033DBB9C LDR W10, [X8]
	0x033DBBA0 MOVZ W9, 0x4DD3
	0x033DBBA4 MOVK W9, 0x10620000
	0x033DBBA8 SUBS W12, W21, 0x1
	0x033DBBAC MUL X9, X10, X9
	0x033DBBB0 UBFM X9, X9, 0x26, 0x3F
	0x033DBBB4 MADD W10, W9, W29, W10
	0x033DBBB8 B.MI 0x33DC0D0
	0x033DBBBC MOV W11, W12
	0x033DBBC0 ADD X11, X11, 0x1
	0x033DBBC4 ADD X12, X20, W12, 0x2, UXTW
	0x033DBBC8 LDR W13, [X12]
	0x033DBBCC SUB X11, X11, 0x1
	0x033DBBD0 CMP X11, 0x0
	0x033DBBD4 MOV X14, X13
	0x033DBBD8 BFM X14, X10, 0x20, 0x1F

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1003000
	006 Move X20, 0xD22000
	007 Move W8, [X21+834]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD22000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+834], W8
	019 Move X0, [X20]
	020 Move X20, [X19]
	021 Move X19, [X19+8]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X2, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call Convert.ToUInt64, X0
	034 Return X0

Method: System.Single System.IConvertible.ToSingle(System.IFormatProvider provider)

Disassembly:
	0x033DBBDC UBFM X10, X14, 0x3, 0x3F
	0x00000000 INVALID
	0x033DBBE4 UBFM X10, X10, 0x4, 0x3F
	0x033DBBE8 STR W10, [X12], #0xFFFFFFFFFFFFFFFC
	0x033DBBEC MADD W10, W10, W29, W13
	0x033DBBF0 B.GT 0x33DBBC8
	0x033DBBF4 MOVZ W11, 0x1F4
	0x033DBBF8 B 0x33DBDE0
	0x033DBBFC LDR X0, [X15]
	0x033DBC00 LDR W8, [X0 + 0xE0]
	0x033DBC04 CBNZ W8, 0x33DBC84
	0x033DBC08 BL 0x1C16DFC
	0x033DBC0C ADRP X15, 0xD51000
	0x033DBC10 MOVZ X30, 0x594B
	0x033DBC14 MOVZ X7, 0xF7CF
	0x033DBC18 MOVZ X6, 0xF5C3
	0x033DBC1C MOVZ X3, 0x5A53
	0x033DBC20 LDR X15, [X15 + 0xDE8]
	0x033DBC24 MOVK X30, 0x38860000
	0x033DBC28 MOVK X7, 0xE3530000
	0x033DBC2C MOVK X6, 0x5C280000
	0x033DBC30 MOVK X3, 0xA09B0000
	0x033DBC34 MOVK X30, 0xC5D6
	0x033DBC38 MOVK X7, 0x9BA5

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1003000
	006 Move X20, 0xD22000
	007 Move W8, [X21+835]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD22000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+835], W8
	019 Move X0, [X20]
	020 Move X20, [X19]
	021 Move X19, [X19+8]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X2, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call Convert.ToSingle, X0
	034 Return V0

Method: System.Double System.IConvertible.ToDouble(System.IFormatProvider provider)

Disassembly:
	0x033DBC3C MOVK X6, 0xC28F
	0x033DBC40 ORR X5, X31, 0xCCCCCCCCCCCCCCCC
	0x033DBC44 ADRP X4, 0xFFFFFFFFFD7BB000
	0x033DBC48 MOVK X3, 0xB82F
	0x033DBC4C MOVZ W2, 0x1F00
	0x033DBC50 MOVZ W1, 0x6980
	0x033DBC54 MOVZ W17, 0xBDC0
	0x033DBC58 MOVZ W16, 0x7960
	0x033DBC5C MOVK X30, 0x346D0000
	0x033DBC60 MOVK X7, 0x20C40000
	0x033DBC64 MOVK X6, 0x28F50000
	0x033DBC68 MOVK X5, 0xCCCD
	0x033DBC6C ADD X4, X4, 0xA2E
	0x033DBC70 MOVK X3, 0x440000
	0x033DBC74 MOVK W2, 0xFA0A0000
	0x033DBC78 MOVK W1, 0xFF670000
	0x033DBC7C MOVK W17, 0xFFF00000
	0x033DBC80 MOVK W16, 0xFFFE0000
	0x033DBC84 ADD X8, X20, W21, 0x2, UXTW
	0x033DBC88 LDR W10, [X8]
	0x033DBC8C MOVZ W9, 0x1759
	0x033DBC90 MOVK W9, 0xD1B70000
	0x033DBC94 SUBS W12, W21, 0x1
	0x033DBC98 MUL X9, X10, X9

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1003000
	006 Move X20, 0xD22000
	007 Move W8, [X21+836]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD22000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+836], W8
	019 Move X0, [X20]
	020 Move X20, [X19]
	021 Move X19, [X19+8]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X2, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call Convert.ToDouble, X0
	034 Return V0

Method: System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider provider)

Disassembly:
	0x033DBC9C UBFM X9, X9, 0x2D, 0x3F
	0x033DBCA0 MADD W10, W9, W23, W10
	0x033DBCA4 B.MI 0x33DC0D8

ISIL:
	001 Move X8, [X0]
	002 Move X1, [X0+8]
	003 Move X0, X8
	004 Return X0

Method: System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider)

Disassembly:
	0x033DBCA8 MOV W11, W12
	0x033DBCAC ADD X11, X11, 0x1
	0x033DBCB0 ADD X12, X20, W12, 0x2, UXTW
	0x033DBCB4 LDR W13, [X12]
	0x033DBCB8 SUB X11, X11, 0x1
	0x033DBCBC CMP X11, 0x0
	0x033DBCC0 MOV X14, X13
	0x033DBCC4 BFM X14, X10, 0x20, 0x1F
	0x00000000 INVALID
	0x033DBCCC UBFM X10, X10, 0xB, 0x3F
	0x033DBCD0 STR W10, [X12], #0xFFFFFFFFFFFFFFFC
	0x033DBCD4 MADD W10, W10, W23, W13
	0x033DBCD8 B.GT 0x33DBCB4
	0x033DBCDC MOVZ W11, 0x1388
	0x033DBCE0 B 0x33DBDE0
	0x033DBCE4 LDR X0, [X15]
	0x033DBCE8 LDR W8, [X0 + 0xE0]
	0x033DBCEC CBNZ W8, 0x33DBD6C
	0x033DBCF0 BL 0x1C16DFC
	0x033DBCF4 ADRP X15, 0xD51000
	0x033DBCF8 MOVZ X30, 0x594B
	0x033DBCFC MOVZ X7, 0xF7CF
	0x033DBD00 MOVZ X6, 0xF5C3
	0x033DBD04 MOVZ X3, 0x5A53
	0x033DBD08 LDR X15, [X15 + 0xDE8]
	0x033DBD0C MOVK X30, 0x38860000
	0x033DBD10 MOVK X7, 0xE3530000
	0x033DBD14 MOVK X6, 0x5C280000
	0x033DBD18 MOVK X3, 0xA09B0000
	0x033DBD1C MOVK X30, 0xC5D6
	0x033DBD20 MOVK X7, 0x9BA5
	0x033DBD24 MOVK X6, 0xC28F
	0x033DBD28 ORR X5, X31, 0xCCCCCCCCCCCCCCCC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0xD4E000
	005 Move X0, [X0+48]
	006 Call 0x1C17D08
	007 Move X19, X0
	008 Move X0, 0xD4B000
	009 Move X0, [X0+160]
	010 Call 0x1C17D08
	011 Move X20, X0
	012 Move X0, 0xD4B000
	013 Move X0, [X0+152]
	014 Call 0x1C17D08
	015 Move X2, X0
	016 Move X0, X19
	017 Move X1, X20
	018 Move X3, X31
	019 Call SR.Format, X0, X1, X2
	020 Move X19, X0
	021 Move X0, 0xD21000
	022 Move X0, [X0+3080]
	023 Call 0x1C17D08
	024 Call 0x1C17F10
	025 Move X1, X19
	026 Move X2, X31
	027 Move X20, X0
	028 Call InvalidCastException..ctor, X0, X1
	029 Move X0, 0xD52000
	030 Move X0, [X0+3760]
	031 Call 0x1C17D08
	032 Move X1, X0
	033 Move X0, X20
	034 Call 0x1C17DEC

Method: System.Object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider)

Disassembly:
	0x033DBD2C ADRP X4, 0xFFFFFFFFFD7BB000
	0x033DBD30 MOVK X3, 0xB82F
	0x033DBD34 MOVZ W2, 0x1F00
	0x033DBD38 MOVZ W1, 0x6980
	0x033DBD3C MOVZ W17, 0xBDC0
	0x033DBD40 MOVZ W16, 0x7960
	0x033DBD44 MOVK X30, 0x346D0000
	0x033DBD48 MOVK X7, 0x20C40000
	0x033DBD4C MOVK X6, 0x28F50000
	0x033DBD50 MOVK X5, 0xCCCD
	0x033DBD54 ADD X4, X4, 0xA2E
	0x033DBD58 MOVK X3, 0x440000
	0x033DBD5C MOVK W2, 0xFA0A0000
	0x033DBD60 MOVK W1, 0xFF670000
	0x033DBD64 MOVK W17, 0xFFF00000
	0x033DBD68 MOVK W16, 0xFFFE0000
	0x033DBD6C ADD X8, X20, W21, 0x2, UXTW
	0x033DBD70 LDR W10, [X8]
	0x033DBD74 MOVZ W11, 0x5AC5
	0x033DBD78 MOVK W11, 0xA7C0000
	0x033DBD7C SUBS W12, W21, 0x1
	0x033DBD80 UBFM W9, W10, 0x5, 0x1F
	0x033DBD84 UMADDL X9, X9, X11, X31
	0x033DBD88 UBFM X9, X9, 0x27, 0x3F
	0x033DBD8C MADD W10, W9, W16, W10
	0x033DBD90 B.MI 0x33DC0E0
	0x033DBD94 MOVZ X0, 0x7843
	0x033DBD98 MOVK X0, 0x71B40000
	0x033DBD9C MOV W11, W12
	0x033DBDA0 MOVK X0, 0x5AC4
	0x033DBDA4 ADD X11, X11, 0x1
	0x033DBDA8 ADD X12, X20, W12, 0x2, UXTW
	0x033DBDAC MOVK X0, 0xA7C0000
	0x033DBDB0 LDR W13, [X12]
	0x033DBDB4 SUB X11, X11, 0x1
	0x033DBDB8 CMP X11, 0x0
	0x033DBDBC MOV X14, X13
	0x033DBDC0 BFM X14, X10, 0x20, 0x1F
	0x033DBDC4 UBFM X10, X14, 0x5, 0x3F
	0x00000000 INVALID
	0x033DBDCC UBFM X10, X10, 0x7, 0x3F
	0x033DBDD0 STR W10, [X12], #0xFFFFFFFFFFFFFFFC
	0x033DBDD4 MADD W10, W10, W16, W13
	0x033DBDD8 B.GT 0x33DBDB0
	0x033DBDDC MOVZ W11, 0xC350
	0x033DBDE0 B 0x33DC0E4
	0x033DBDE4 LDR X0, [X15]
	0x033DBDE8 LDR W8, [X0 + 0xE0]
	0x033DBDEC CBNZ W8, 0x33DBE6C
	0x033DBDF0 BL 0x1C16DFC
	0x033DBDF4 ADRP X15, 0xD51000
	0x033DBDF8 MOVZ X30, 0x594B
	0x033DBDFC MOVZ X7, 0xF7CF

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], X30
	003 Move [X31+40], X25
	004 Move [X31+48], X24
	005 Move [X31+56], X23
	006 Move [X31+64], X22
	007 Move [X31+72], X21
	008 Move [X31+80], X20
	009 Move [X31+88], X19
	010 NotImplemented "Instruction MRS not yet implemented."
	011 Move X8, [X22+40]
	012 Move X25, 0x1003000
	013 Move X24, 0xD41000
	014 Move X23, 0xD22000
	015 Move [X31+24], X8
	016 Move W8, [X25+837]
	017 Move X24, [X24+1520]
	018 Move X23, [X23+2536]
	019 Move X19, X2
	020 Move X20, X1
	021 Move X21, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {34}
	026 Move X0, 0xD22000
	027 Move X0, [X0+2536]
	028 Call 0x1C17CF4
	029 Move X0, 0xD41000
	030 Move X0, [X0+1520]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X25+837], W8
	034 Move V0, [X21]
	035 Move X0, [X24]
	036 Add X1, X31, 0
	037 Move [X31], V0
	038 Call 0x1C17E04
	039 Move X8, [X23]
	040 Move X21, X0
	041 Move W9, [X8+224]
	042 Compare W9, 0
	043 JumpIfNotEqual {46}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X0, X21
	047 Move X1, X20
	048 Move X2, X19
	049 Move X3, X31
	050 Call Convert.DefaultToType, X0, X1, X2
	051 Move X8, [X22+40]
	052 Move X9, [X31+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X20, [X31+80]
	055 Move X19, [X31+88]
	056 Move X22, [X31+64]
	057 Move X21, [X31+72]
	058 Move X24, [X31+48]
	059 Move X23, [X31+56]
	060 Move X30, [X31+32]
	061 Move X25, [X31+40]
	062 Add X31, X31, 96
	063 Return X0
	064 Call 0x3EB2B20

Method: System.Void .cctor()

Disassembly:
	0x033DBE00 MOVZ X6, 0xF5C3
	0x033DBE04 MOVZ X3, 0x5A53
	0x033DBE08 LDR X15, [X15 + 0xDE8]
	0x033DBE0C MOVK X30, 0x38860000
	0x033DBE10 MOVK X7, 0xE3530000
	0x033DBE14 MOVK X6, 0x5C280000
	0x033DBE18 MOVK X3, 0xA09B0000
	0x033DBE1C MOVK X30, 0xC5D6
	0x033DBE20 MOVK X7, 0x9BA5
	0x033DBE24 MOVK X6, 0xC28F
	0x033DBE28 ORR X5, X31, 0xCCCCCCCCCCCCCCCC
	0x033DBE2C ADRP X4, 0xFFFFFFFFFD7BB000
	0x033DBE30 MOVK X3, 0xB82F
	0x033DBE34 MOVZ W2, 0x1F00
	0x033DBE38 MOVZ W1, 0x6980
	0x033DBE3C MOVZ W17, 0xBDC0
	0x033DBE40 MOVZ W16, 0x7960
	0x033DBE44 MOVK X30, 0x346D0000
	0x033DBE48 MOVK X7, 0x20C40000
	0x033DBE4C MOVK X6, 0x28F50000
	0x033DBE50 MOVK X5, 0xCCCD
	0x033DBE54 ADD X4, X4, 0xA2E
	0x033DBE58 MOVK X3, 0x440000
	0x033DBE5C MOVK W2, 0xFA0A0000
	0x033DBE60 MOVK W1, 0xFF670000
	0x033DBE64 MOVK W17, 0xFFF00000
	0x033DBE68 MOVK W16, 0xFFFE0000
	0x033DBE6C ADD X8, X20, W21, 0x2, UXTW
	0x033DBE70 LDR W10, [X8]
	0x033DBE74 MOVZ W9, 0xDE83
	0x033DBE78 MOVK W9, 0x431B0000
	0x033DBE7C SUBS W12, W21, 0x1
	0x033DBE80 MUL X9, X10, X9
	0x033DBE84 UBFM X9, X9, 0x32, 0x3F
	0x033DBE88 MADD W10, W9, W17, W10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1003000
	005 Move X19, 0xD41000
	006 Move W8, [X20+838]
	007 Move X19, [X19+1520]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xD41000
	013 Move X0, [X0+1520]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+838], W8
	017 Move X8, [X19]
	018 Move X9, -42926080
	019 Move V0, [X9+121]
	020 Move X10, -42917888
	021 Move X8, [X8+184]
	022 Move [X8], X31
	023 Move [X8+8], X31
	024 Move X8, [X19]
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X9, [X8+184]
	028 Move [X9+1], V0
	029 Move V0, [X10+29]
	030 Move X9, [X8+184]
	031 Move X10, -42926080
	032 Move [X9+2], V0
	033 Move V0, [X10+193]
	034 Move X9, [X8+184]
	035 Move X10, -42917888
	036 Move [X9+3], V0
	037 Move X8, [X8+184]
	038 Move V0, [X10+30]
	039 Move [X8+4], V0
	040 Move X30, [X31+32]
	041 Return 

