Type: System.ParameterizedStrings

Method: System.String Evaluate(System.String format, System.ParameterizedStrings/FormatParam[] args)

Disassembly:
	0x033CF158 STP X30, X19, [X31 - 0x10]!
	0x033CF15C LDR W2, [X0 + 0x118]
	0x033CF160 CBZ W2, 0x33CF180
	0x033CF164 MOV X19, X0
	0x033CF168 LDR X0, [X0 + 0x68]
	0x033CF16C CBZ X0, 0x33CF188
	0x033CF170 LDR X1, [X19 + 0x110]
	0x033CF174 MOV X3, X31
	0x033CF178 BL 0x3300E94
	0x033CF17C STR W31, [X19 + 0x118]
	0x033CF180 LDP X30, X19, [X31], #0x10
	0x033CF184 RET
	0x033CF188 BL 0x1C16F20
	0x033CF18C SUB X31, X31, 0x70
	0x033CF190 STP X29, X30, [X31 + 0x10]
	0x033CF194 STP X28, X27, [X31 + 0x20]
	0x033CF198 STP X26, X25, [X31 + 0x30]
	0x033CF19C STP X24, X23, [X31 + 0x40]
	0x033CF1A0 STP X22, X21, [X31 + 0x50]
	0x033CF1A4 STP X20, X19, [X31 + 0x60]
	0x033CF1A8 ADRP X22, 0x100E000
	0x033CF1AC ADRP X20, 0xD24000
	0x033CF1B0 LDRB W8, [X22 + 0x2AC]
	0x033CF1B4 LDR X20, [X20 + 0x8F0]
	0x033CF1B8 MOV W27, W3
	0x033CF1BC MOV W23, W2
	0x033CF1C0 MOV X21, X1
	0x033CF1C4 MOV X19, X0
	0x033CF1C8 TBNZ X8, 0x0, 0x33CF1EC
	0x033CF1CC ADRP X0, 0xD5C000
	0x033CF1D0 LDR X0, [X0 + 0x698]
	0x033CF1D4 BL 0x1C16CF4
	0x033CF1D8 ADRP X0, 0xD24000
	0x033CF1DC LDR X0, [X0 + 0x8F0]
	0x033CF1E0 BL 0x1C16CF4
	0x033CF1E4 MOVZ W8, 0x1
	0x033CF1E8 STRB W8, [X22 + 0x2AC]
	0x033CF1EC LDR X0, [X20]
	0x033CF1F0 STRB W31, [X31 + 0xC]
	0x033CF1F4 BL 0x1C16F10
	0x033CF1F8 MOV X1, X31
	0x033CF1FC MOV X20, X0
	0x033CF200 BL 0x3231AC4
	0x033CF204 MOVZ W1, 0x1
	0x033CF208 MOV X0, X19
	0x033CF20C BL 0x33CE510
	0x033CF210 MOV W24, W31
	0x033CF214 CBZ X0, 0x33CF2CC
	0x033CF218 ADRP X26, 0xD5C000
	0x033CF21C LDR X26, [X26 + 0x698]
	0x033CF220 LDR X8, [X0]
	0x033CF224 LDR X1, [X26]
	0x033CF228 LDR X8, [X8 + 0x40]
	0x033CF22C LDR X9, [X1 + 0x40]
	0x033CF230 CMP X8, X9
	0x033CF234 B.NE 0x33CF4A4
	0x033CF238 BL 0x1C16E08
	0x033CF23C LDR X25, [X0]
	0x033CF240 UBFM X8, X25, 0x20, 0x3F
	0x033CF244 CMP W8, 0x8
	0x033CF248 B.NE 0x33CF294
	0x033CF24C CBZ X20, 0x33CF42C
	0x033CF250 MOV X0, X20
	0x033CF254 MOV X1, X31
	0x033CF258 BL 0x323260C
	0x033CF25C CMP W0, W24
	0x033CF260 B.LE 0x33CF280
	0x033CF264 MOV X0, X20
	0x033CF268 MOV X1, X31
	0x033CF26C BL 0x323260C
	0x033CF270 SUB W1, W0, 0x1
	0x033CF274 MOV X0, X20
	0x033CF278 MOV X2, X31
	0x033CF27C BL 0x3232ADC
	0x033CF280 MOVZ W1, 0x1
	0x033CF284 MOV X0, X19
	0x033CF288 BL 0x33CE510
	0x033CF28C CBNZ X0, 0x33CF220
	0x033CF290 B 0x33CF2CC
	0x033CF294 CMP W8, 0xD
	0x033CF298 B.NE 0x33CF2B4
	0x033CF29C CBZ X20, 0x33CF42C
	0x033CF2A0 MOV X0, X20
	0x033CF2A4 MOV X1, X31
	0x033CF2A8 BL 0x323260C
	0x033CF2AC MOV W24, W0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X21, 0x100F000
	008 Move W8, [X21+690]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xD5E000
	016 Move X0, [X0+2936]
	017 Call 0x1C17CF4
	018 Move X0, 0xD5E000
	019 Move X0, [X0+2944]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+690], W8
	023 Move [X31+24], X31
	024 Move [X31+8], X31
	025 Compare X20, 0
	026 JumpIfEqual {70}
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xD5E000
	030 Move X22, [X22+2944]
	031 Move X0, [X22]
	032 Call 0x1C17D0C
	033 Move X21, [X0]
	034 Compare X21, 0
	035 JumpIfEqual {42}
	036 Move X0, [X21+16]
	037 Move W2, [X21+24]
	038 Move W1, W31
	039 Move X3, X31
	040 Call Array.Clear, X0, X1, X2
	041 Move [X21+24], W31
	042 Move X8, 0xD5E000
	043 Move X8, [X8+2936]
	044 Move X0, [X8]
	045 Call 0x1C17F10
	046 Move X21, X0
	047 Call LowLevelStack..ctor, X0
	048 Move X0, [X22]
	049 Call 0x1C17D0C
	050 Move [X0], X21
	051 Move X0, [X22]
	052 Call 0x1C17D0C
	053 Add X1, X31, 4
	054 Add X4, X31, 24
	055 Add X5, X31, 8
	056 Move X0, X20
	057 Move X2, X19
	058 Move X3, X21
	059 Move [X31+24], X31
	060 Move [X31+8], X31
	061 Move [X31+4], W31
	062 Call ParameterizedStrings.EvaluateInternal, X0, X1, X2, X3, X4, X5
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X30, [X31+16]
	068 Add X31, X31, 64
	069 Return X0
	070 Move X0, 0xD2A000
	071 Move X0, [X0+1320]
	072 Call 0x1C17D08
	073 Call 0x1C17F10
	074 Move X19, X0
	075 Move X0, 0xD54000
	076 Move X0, [X0+160]
	077 Move X0, 0xD2A000
	078 Move X0, [X0+1320]
	079 Call 0x1C17D08
	080 Call 0x1C17F10
	081 Move X19, X0
	082 Move X0, 0xD54000
	083 Move X0, [X0+136]
	084 Call 0x1C17D08
	085 Move X1, X0
	086 Move X0, X19
	087 Move X2, X31
	088 Call ArgumentNullException..ctor, X0, X1
	089 Move X0, 0xD5E000
	090 Move X0, [X0+2952]
	091 Call 0x1C17D08
	092 Move X1, X0
	093 Move X0, X19
	094 Call 0x1C17DEC

Method: System.String EvaluateInternal(System.String format, ref System.Int32 pos, System.ParameterizedStrings/FormatParam[] args, System.ParameterizedStrings/LowLevelStack stack, ref System.ParameterizedStrings/FormatParam[] dynamicVars, ref System.ParameterizedStrings/FormatParam[] staticVars)

Disassembly:
	0x033D2A0C MOV X1, X20
	0x033D2A10 MOV X2, X22
	0x033D2A14 MOV W3, W19
	0x033D2A18 BLR X8
	0x033D2A1C MOV W19, W0
	0x033D2A20 MOV X0, X22
	0x033D2A24 BL 0x1C17290
	0x033D2A28 MOV W0, W19
	0x033D2A2C LDP X20, X19, [X31 + 0x50]
	0x033D2A30 LDP X22, X21, [X31 + 0x40]
	0x033D2A34 LDP X30, X23, [X31 + 0x30]
	0x033D2A38 ADD X31, X31, 0x60
	0x033D2A3C RET
	0x033D2A40 STR W1, [X0]
	0x033D2A44 STR X31, [X0 + 0x8]
	0x033D2A48 RET
	0x033D2A4C STR W1, [X0]
	0x033D2A50 STR X2, [X0 + 0x8]
	0x033D2A54 RET
	0x033D2A58 LDR W0, [X0]
	0x033D2A5C RET
	0x033D2A60 STP X30, X21, [X31 - 0x20]!
	0x033D2A64 STP X20, X19, [X31 + 0x10]
	0x033D2A68 MOV X19, X2
	0x033D2A6C LDR W2, [X2]
	0x033D2A70 MOV X20, X1
	0x033D2A74 MOV X21, X0
	0x033D2A78 BL 0x33D2BFC
	0x033D2A7C LDR W8, [X19]
	0x033D2A80 MOV W1, W0
	0x033D2A84 MOV X0, X21
	0x033D2A88 ADD W8, W8, 0x2
	0x033D2A8C STR W8, [X19]
	0x033D2A90 BL 0x33D2B54
	0x033D2A94 LDR W2, [X19]
	0x033D2A98 MOV X1, X20
	0x033D2A9C BL 0x33D2BFC
	0x033D2AA0 LDR W8, [X19]
	0x033D2AA4 MOV X1, X20
	0x033D2AA8 ADD W2, W8, 0x2
	0x033D2AAC STR W2, [X19]
	0x033D2AB0 BL 0x33D2BFC
	0x033D2AB4 SXTH W8, W0
	0x033D2AB8 STR W8, [X21 + 0x10]
	0x033D2ABC LDR W8, [X19]
	0x033D2AC0 MOV X1, X20
	0x033D2AC4 ADD W2, W8, 0x2
	0x033D2AC8 STR W2, [X19]
	0x033D2ACC BL 0x33D2BFC
	0x033D2AD0 SXTH W8, W0
	0x033D2AD4 STR W8, [X21 + 0x14]
	0x033D2AD8 LDR W8, [X19]
	0x033D2ADC MOV X1, X20
	0x033D2AE0 ADD W2, W8, 0x2
	0x033D2AE4 STR W2, [X19]
	0x033D2AE8 BL 0x33D2BFC
	0x033D2AEC SXTH W8, W0
	0x033D2AF0 STR W8, [X21 + 0x18]
	0x033D2AF4 LDR W8, [X19]
	0x033D2AF8 MOV X1, X20
	0x033D2AFC ADD W2, W8, 0x2
	0x033D2B00 STR W2, [X19]
	0x033D2B04 BL 0x33D2BFC
	0x033D2B08 LDR W8, [X19]
	0x033D2B0C ADD W8, W8, 0x2
	0x033D2B10 STR W8, [X19]
	0x033D2B14 LDP X20, X19, [X31 + 0x10]
	0x033D2B18 LDP X30, X21, [X31], #0x20
	0x033D2B1C RET
	0x033D2B20 STP X30, X19, [X31 - 0x10]!
	0x033D2B24 MOV X19, X2
	0x033D2B28 LDR W2, [X2]
	0x033D2B2C BL 0x33D2C4C
	0x033D2B30 CBZ X0, 0x33D2B50
	0x033D2B34 LDR W8, [X19]
	0x033D2B38 LDR W9, [X0 + 0x10]
	0x033D2B3C ADD W8, W8, W9
	0x033D2B40 ADD W8, W8, 0x1
	0x033D2B44 STR W8, [X19]
	0x033D2B48 LDP X30, X19, [X31], #0x10
	0x033D2B4C RET
	0x033D2B50 BL 0x1C16F20
	0x033D2B54 STR X30, [X31 - 0x20]!
	0x033D2B58 STP X20, X19, [X31 + 0x10]
	0x033D2B5C AND W8, W1, 0xFFFF
	0x033D2B60 CMP W8, 0x11A
	0x033D2B64 B.EQ 0x33D2B78
	0x033D2B68 CMP W8, 0x21E
	0x033D2B6C B.NE 0x33D2B8C
	0x033D2B70 MOVZ W8, 0x4
	0x033D2B74 B 0x33D2B7C
	0x033D2B78 MOVZ W8, 0x2
	0x033D2B7C LDP X20, X19, [X31 + 0x10]
	0x033D2B80 STR W8, [X0 + 0x2C]
	0x033D2B84 LDR X30, [X31], #0x20
	0x033D2B88 RET
	0x033D2B8C STRH W1, [X31 + 0xC]
	0x033D2B90 ADRP X0, 0xD25000
	0x033D2B94 LDR X0, [X0 + 0x628]
	0x033D2B98 BL 0x1C16D08
	0x033D2B9C ADD X1, X31, 0xC
	0x033D2BA0 BL 0x1C16E04
	0x033D2BA4 MOV X19, X0
	0x033D2BA8 ADRP X0, 0xD5A000
	0x033D2BAC LDR X0, [X0 + 0xC18]
	0x033D2BB0 BL 0x1C16D08
	0x033D2BB4 MOV X1, X19
	0x033D2BB8 MOV X2, X31
	0x033D2BBC BL 0x321EFD0
	0x033D2BC0 MOV X19, X0
	0x033D2BC4 ADRP X0, 0xD21000
	0x033D2BC8 LDR X0, [X0 + 0x7D0]
	0x033D2BCC BL 0x1C16D08
	0x033D2BD0 BL 0x1C16F10
	0x033D2BD4 MOV X1, X19
	0x033D2BD8 MOV X2, X31
	0x033D2BDC MOV X20, X0
	0x033D2BE0 BL 0x33B2C70
	0x033D2BE4 ADRP X0, 0xD5A000
	0x033D2BE8 LDR X0, [X0 + 0xC20]
	0x033D2BEC BL 0x1C16D08
	0x033D2BF0 MOV X1, X0
	0x033D2BF4 MOV X0, X20
	0x033D2BF8 BL 0x1C16DEC
	0x033D2BFC STR X30, [X31 - 0x10]!
	0x033D2C00 CBZ X1, 0x33D2C48
	0x033D2C04 LDR W9, [X1 + 0x18]
	0x033D2C08 CMP W9, W2
	0x033D2C0C B.LS 0x33D2C44
	0x033D2C10 ADD W8, W2, 0x1
	0x033D2C14 CMP W8, W9
	0x033D2C18 B.CS 0x33D2C44
	0x033D2C1C ADD X9, X1, W2, SXTW
	0x033D2C20 ADD X8, X1, W8, SXTW
	0x033D2C24 LDRB W9, [X9 + 0x20]
	0x033D2C28 LDRB W8, [X8 + 0x20]
	0x033D2C2C AND W10, W9, W8, 0x0
	0x033D2C30 BFM W9, W8, 0x18, 0x17
	0x033D2C34 CMP W10, 0xFF
	0x033D2C38 CSINV W0, W9, W31, NE
	0x033D2C3C LDR X30, [X31], #0x10
	0x033D2C40 RET
	0x033D2C44 BL 0x1C16F28
	0x033D2C48 BL 0x1C16F20
	0x033D2C4C STP X30, X21, [X31 - 0x20]!
	0x033D2C50 STP X20, X19, [X31 + 0x10]
	0x033D2C54 CBZ X1, 0x33D2CC4
	0x033D2C58 LDR W8, [X1 + 0x18]
	0x033D2C5C MOV W19, W2
	0x033D2C60 MOV X20, X1
	0x033D2C64 SUBS W8, W8, W2
	0x033D2C68 CSEL W8, W31, W8, CC
	0x033D2C6C B.LS 0x33D2C90
	0x033D2C70 MOV W21, W31
	0x033D2C74 ADD W9, W19, W21
	0x033D2C78 ADD X9, X20, W9, SXTW
	0x033D2C7C LDRB W9, [X9 + 0x20]
	0x033D2C80 CBZ W9, 0x33D2C94
	0x033D2C84 ADD W21, W21, 0x1
	0x033D2C88 CMP W8, W21
	0x033D2C8C B.NE 0x33D2C74
	0x033D2C90 BL 0x1C16F28
	0x033D2C94 MOV X0, X31
	0x033D2C98 BL 0x3242EC8
	0x033D2C9C CBZ X0, 0x33D2CC4
	0x033D2CA0 LDR X8, [X0]
	0x033D2CA4 MOV X1, X20
	0x033D2CA8 MOV W2, W19
	0x033D2CAC LDP X20, X19, [X31 + 0x10]
	0x033D2CB0 LDR X5, [X8 + 0x388]
	0x033D2CB4 LDR X4, [X8 + 0x390]
	0x033D2CB8 MOV W3, W21
	0x033D2CBC LDP X30, X21, [X31], #0x20
	0x033D2CC0 BR X5
	0x033D2CC4 BL 0x1C16F20
	0x033D2CC8 STR X30, [X31 - 0x30]!
	0x033D2CCC STP X22, X21, [X31 + 0x10]
	0x033D2CD0 STP X20, X19, [X31 + 0x20]
	0x033D2CD4 ADRP X21, 0x100B000
	0x033D2CD8 LDRB W8, [X21 + 0x2D3]
	0x033D2CDC MOV W19, W2
	0x033D2CE0 MOV X20, X1
	0x033D2CE4 TBNZ X8, 0x0, 0x33D2CFC
	0x033D2CE8 ADRP X0, 0xD21000
	0x033D2CEC LDR X0, [X0 + 0x618]
	0x033D2CF0 BL 0x1C16CF4
	0x033D2CF4 MOVZ W8, 0x1
	0x033D2CF8 STRB W8, [X21 + 0x2D3]
	0x033D2CFC CBZ X20, 0x33D2D7C
	0x033D2D00 LDR W8, [X20 + 0x18]
	0x033D2D04 SUBS W8, W8, W19
	0x033D2D08 CSEL W8, W31, W8, CC
	0x033D2D0C B.LS 0x33D2D38
	0x033D2D10 ADRP X9, 0xD21000
	0x033D2D14 LDR X9, [X9 + 0x618]
	0x033D2D18 MOV W21, W31
	0x033D2D1C ADD W10, W19, W21
	0x033D2D20 ADD X10, X20, W10, SXTW
	0x033D2D24 LDRB W10, [X10 + 0x20]
	0x033D2D28 CBZ W10, 0x33D2D3C
	0x033D2D2C ADD W21, W21, 0x1
	0x033D2D30 CMP W8, W21
	0x033D2D34 B.NE 0x33D2D1C
	0x033D2D38 BL 0x1C16F28
	0x033D2D3C LDR X0, [X9]
	0x033D2D40 MOV W1, W21
	0x033D2D44 BL 0x1C16D6C
	0x033D2D48 MOV X22, X0
	0x033D2D4C MOV X0, X20
	0x033D2D50 MOV W1, W19
	0x033D2D54 MOV X2, X22
	0x033D2D58 MOV W3, W31
	0x033D2D5C MOV W4, W21
	0x033D2D60 MOV X5, X31
	0x033D2D64 BL 0x33A8750
	0x033D2D68 MOV X0, X22
	0x033D2D6C LDP X20, X19, [X31 + 0x20]
	0x033D2D70 LDP X22, X21, [X31 + 0x10]
	0x033D2D74 LDR X30, [X31], #0x30
	0x033D2D78 RET
	0x033D2D7C BL 0x1C16F20
	0x033D2D80 STP X30, X21, [X31 - 0x20]!
	0x033D2D84 STP X20, X19, [X31 + 0x10]
	0x033D2D88 ADRP X21, 0x100B000
	0x033D2D8C LDRB W8, [X21 + 0x2D4]
	0x033D2D90 MOV X19, X1
	0x033D2D94 MOV X20, X0
	0x033D2D98 TBNZ X8, 0x0, 0x33D2DB0
	0x033D2D9C ADRP X0, 0xD5A000
	0x033D2DA0 LDR X0, [X0 + 0xC28]
	0x033D2DA4 BL 0x1C16CF4
	0x033D2DA8 MOVZ W8, 0x1
	0x033D2DAC STRB W8, [X21 + 0x2D4]
	0x033D2DB0 CBZ X19, 0x33D2E10
	0x033D2DB4 LDR X8, [X20]
	0x033D2DB8 ADRP X21, 0xD5A000
	0x033D2DBC MOV X0, X20
	0x033D2DC0 LDP X9, X1, [X8 + 0x198]
	0x033D2DC4 LDR X21, [X21 + 0xC28]
	0x033D2DC8 BLR X9
	0x033D2DCC LDR X8, [X19]
	0x033D2DD0 LDR X1, [X21]
	0x033D2DD4 MOV X20, X0
	0x033D2DD8 LDRH W9, [X8 + 0x12E]
	0x033D2DDC CBZ X9, 0x33D2E00
	0x033D2DE0 LDR X10, [X8 + 0xB0]
	0x033D2DE4 ADD X10, X10, 0x8
	0x033D2DE8 LDUR X11, [X10 - 0x8]
	0x033D2DEC CMP X11, X1
	0x033D2DF0 B.EQ 0x33D2E20
	0x033D2DF4 SUBS X9, X9, 0x1
	0x033D2DF8 ADD X10, X10, 0x10
	0x033D2DFC B.NE 0x33D2DE8
	0x033D2E00 MOV X0, X19
	0x033D2E04 MOV W2, W31
	0x033D2E08 BL 0x1C5C788
	0x033D2E0C B 0x33D2E2C
	0x033D2E10 LDP X20, X19, [X31 + 0x10]
	0x033D2E14 MOV W0, W31
	0x033D2E18 LDP X30, X21, [X31], #0x20
	0x033D2E1C RET
	0x033D2E20 LDRSW X9, [X10]
	0x033D2E24 ADD X8, X8, X9, 0x4, LSL
	0x033D2E28 ADD X0, X8, 0x138
	0x033D2E2C LDP X8, X1, [X0]
	0x033D2E30 MOV X0, X19
	0x033D2E34 BLR X8
	0x033D2E38 MOV X1, X0
	0x033D2E3C MOV X0, X20
	0x033D2E40 LDP X20, X19, [X31 + 0x10]
	0x033D2E44 MOV X2, X31
	0x033D2E48 LDP X30, X21, [X31], #0x20
	0x033D2E4C B 0x321BA08
	0x033D2E50 STR X30, [X31 - 0x10]!
	0x033D2E54 LDR X8, [X0]
	0x033D2E58 LDP X9, X1, [X8 + 0x198]
	0x033D2E5C BLR X9
	0x033D2E60 CBZ X0, 0x33D2E74
	0x033D2E64 LDR X8, [X0]
	0x033D2E68 LDP X2, X1, [X8 + 0x158]
	0x033D2E6C LDR X30, [X31], #0x10
	0x033D2E70 BR X2
	0x033D2E74 BL 0x1C16F20
	0x033D2E78 STR X30, [X31 - 0x30]!
	0x033D2E7C STP X22, X21, [X31 + 0x10]
	0x033D2E80 STP X20, X19, [X31 + 0x20]
	0x033D2E84 ADRP X21, 0x100B000
	0x033D2E88 ADRP X22, 0xD5A000
	0x033D2E8C LDRB W8, [X21 + 0x2D5]
	0x033D2E90 LDR X22, [X22 + 0xC28]
	0x033D2E94 MOV X20, X1
	0x033D2E98 MOV X19, X0
	0x033D2E9C TBNZ X8, 0x0, 0x33D2EB4
	0x033D2EA0 ADRP X0, 0xD5A000
	0x033D2EA4 LDR X0, [X0 + 0xC28]
	0x033D2EA8 BL 0x1C16CF4
	0x033D2EAC MOVZ W8, 0x1
	0x033D2EB0 STRB W8, [X21 + 0x2D5]
	0x033D2EB4 LDR X1, [X22]
	0x033D2EB8 MOV X0, X20
	0x033D2EBC BL 0x1C16E00
	0x033D2EC0 MOV X1, X0
	0x033D2EC4 MOV X0, X19
	0x033D2EC8 LDP X20, X19, [X31 + 0x20]
	0x033D2ECC LDP X22, X21, [X31 + 0x10]
	0x033D2ED0 LDR X30, [X31], #0x30
	0x033D2ED4 B 0x33D2D80
	0x033D2ED8 RET
	0x033D2EDC STP X30, X21, [X31 - 0x20]!
	0x033D2EE0 STP X20, X19, [X31 + 0x10]
	0x033D2EE4 ADRP X20, 0x100B000
	0x033D2EE8 ADRP X21, 0xD5A000
	0x033D2EEC LDRB W8, [X20 + 0x2D6]
	0x033D2EF0 LDR X21, [X21 + 0xC30]
	0x033D2EF4 MOV X19, X0
	0x033D2EF8 TBNZ X8, 0x0, 0x33D2F10
	0x033D2EFC ADRP X0, 0xD5A000
	0x033D2F00 LDR X0, [X0 + 0xC30]
	0x033D2F04 BL 0x1C16CF4
	0x033D2F08 MOVZ W8, 0x1
	0x033D2F0C STRB W8, [X20 + 0x2D6]
	0x033D2F10 LDR X0, [X21]
	0x033D2F14 BL 0x1C16F10
	0x033D2F18 STP X19, X31, [X0 + 0x10]
	0x033D2F1C LDP X20, X19, [X31 + 0x10]
	0x033D2F20 LDP X30, X21, [X31], #0x20
	0x033D2F24 RET
	0x033D2F28 STP X1, X31, [X0 + 0x10]
	0x033D2F2C RET
	0x033D2F30 LDR X0, [X0 + 0x10]
	0x033D2F34 RET
	0x033D2F38 STP X30, X19, [X31 - 0x10]!
	0x033D2F3C MOV X19, X0
	0x033D2F40 LDR X0, [X0 + 0x18]
	0x033D2F44 CBNZ X0, 0x33D2F58
	0x033D2F48 LDR X0, [X19 + 0x10]
	0x033D2F4C MOV X1, X31
	0x033D2F50 BL 0x33D4510
	0x033D2F54 STR X0, [X19 + 0x18]
	0x033D2F58 LDP X30, X19, [X31], #0x10
	0x033D2F5C RET
	0x033D2F60 LDR X0, [X0 + 0x10]
	0x033D2F64 MOV X1, X31
	0x033D2F68 B 0x33D4510
	0x033D2F6C AND W8, W2, 0x1
	0x033D2F70 STR W1, [X0 + 0x10]
	0x033D2F74 STRB W8, [X0 + 0x14]
	0x033D2F78 RET
	0x033D2F7C STR X30, [X31 - 0x10]!
	0x033D2F80 LDRB W9, [X0 + 0x14]
	0x033D2F84 MOV X8, X1
	0x033D2F88 CBZ W9, 0x33D2F9C
	0x033D2F8C CBZ X8, 0x33D2FE0
	0x033D2F90 LDR X9, [X8]
	0x033D2F94 MOVZ W1, 0x1
	0x033D2F98 B 0x33D2FCC
	0x033D2F9C LDR W1, [X0 + 0x10]
	0x033D2FA0 CMP W1, 0x1
	0x033D2FA4 B.NE 0x33D2FC4
	0x033D2FA8 CBZ X8, 0x33D2FE0
	0x033D2FAC LDR X9, [X8]
	0x033D2FB0 MOV X0, X8
	0x033D2FB4 LDR X2, [X9 + 0x8A8]
	0x033D2FB8 LDR X1, [X9 + 0x8B0]
	0x033D2FBC LDR X30, [X31], #0x10
	0x033D2FC0 BR X2
	0x033D2FC4 CBZ X8, 0x33D2FE0
	0x033D2FC8 LDR X9, [X8]
	0x033D2FCC LDR X3, [X9 + 0x8B8]
	0x033D2FD0 LDR X2, [X9 + 0x8C0]
	0x033D2FD4 MOV X0, X8
	0x033D2FD8 LDR X30, [X31], #0x10
	0x033D2FDC BR X3
	0x033D2FE0 BL 0x1C16F20
	0x033D2FE4 STP X30, X21, [X31 - 0x20]!
	0x033D2FE8 STP X20, X19, [X31 + 0x10]
	0x033D2FEC ADRP X21, 0x100B000
	0x033D2FF0 LDRB W8, [X21 + 0x2D7]
	0x033D2FF4 MOV X20, X1
	0x033D2FF8 MOV X19, X0
	0x033D2FFC TBNZ X8, 0x0, 0x33D3014
	0x033D3000 ADRP X0, 0xD52000
	0x033D3004 LDR X0, [X0 + 0xE88]
	0x033D3008 BL 0x1C16CF4
	0x033D300C MOVZ W8, 0x1
	0x033D3010 STRB W8, [X21 + 0x2D7]
	0x033D3014 CBZ X20, 0x33D3080
	0x033D3018 LDRB W8, [X19 + 0x14]
	0x033D301C CBZ W8, 0x33D3040
	0x033D3020 ADRP X8, 0xD52000
	0x033D3024 LDR X8, [X8 + 0xE88]
	0x033D3028 MOV X0, X20
	0x033D302C LDP X20, X19, [X31 + 0x10]
	0x033D3030 MOV X2, X31
	0x033D3034 LDR X1, [X8]
	0x033D3038 LDP X30, X21, [X31], #0x20
	0x033D303C B 0x32333E0
	0x033D3040 MOVZ W1, 0x5B
	0x033D3044 MOV X0, X20
	0x033D3048 MOV X2, X31
	0x033D304C BL 0x3233D30
	0x033D3050 CBZ X0, 0x33D3080
	0x033D3054 LDR W8, [X19 + 0x10]
	0x033D3058 MOVZ W1, 0x2C
	0x033D305C MOV X3, X31
	0x033D3060 SUB W2, W8, 0x1
	0x033D3064 BL 0x3232D24
	0x033D3068 CBZ X0, 0x33D3080
	0x033D306C LDP X20, X19, [X31 + 0x10]
	0x033D3070 MOVZ W1, 0x5D
	0x033D3074 MOV X2, X31
	0x033D3078 LDP X30, X21, [X31], #0x20
	0x033D307C B 0x3233D30
	0x033D3080 BL 0x1C16F20
	0x033D3084 STP X30, X21, [X31 - 0x20]!
	0x033D3088 STP X20, X19, [X31 + 0x10]
	0x033D308C ADRP X20, 0x100A000
	0x033D3090 ADRP X21, 0xD20000
	0x033D3094 LDRB W8, [X20 + 0x2D8]
	0x033D3098 LDR X21, [X21 + 0x8F0]
	0x033D309C MOV X19, X0
	0x033D30A0 TBNZ X8, 0x0, 0x33D30B8
	0x033D30A4 ADRP X0, 0xD20000
	0x033D30A8 LDR X0, [X0 + 0x8F0]
	0x033D30AC BL 0x1C16CF4
	0x033D30B0 MOVZ W8, 0x1
	0x033D30B4 STRB W8, [X20 + 0x2D8]
	0x033D30B8 LDR X0, [X21]
	0x033D30BC BL 0x1C16F10
	0x033D30C0 MOV X1, X31
	0x033D30C4 MOV X20, X0
	0x033D30C8 BL 0x3231AC4
	0x033D30CC MOV X0, X19
	0x033D30D0 MOV X1, X20
	0x033D30D4 BL 0x33D2FE4
	0x033D30D8 CBZ X0, 0x33D30F0
	0x033D30DC LDR X8, [X0]
	0x033D30E0 LDP X20, X19, [X31 + 0x10]
	0x033D30E4 LDP X2, X1, [X8 + 0x168]
	0x033D30E8 LDP X30, X21, [X31], #0x20
	0x033D30EC BR X2
	0x033D30F0 BL 0x1C16F20
	0x033D30F4 STR X30, [X31 - 0x20]!
	0x033D30F8 STP X20, X19, [X31 + 0x10]
	0x033D30FC MOV W19, W1
	0x033D3100 MOV X1, X31
	0x033D3104 MOV X20, X0
	0x033D3108 BL 0x33BDD8C
	0x033D310C STR W19, [X20 + 0x10]
	0x033D3110 LDP X20, X19, [X31 + 0x10]
	0x033D3114 LDR X30, [X31], #0x20
	0x033D3118 RET
	0x033D311C STR X30, [X31 - 0x20]!
	0x033D3120 STP X20, X19, [X31 + 0x10]
	0x033D3124 LDR W8, [X0 + 0x10]
	0x033D3128 MOV X19, X0
	0x033D312C MOV X0, X1
	0x033D3130 CMP W8, 0x1
	0x033D3134 B.LT 0x33D3160
	0x033D3138 MOV W20, W31
	0x033D313C CBZ X0, 0x33D316C
	0x033D3140 LDR X8, [X0]
	0x033D3144 LDR X9, [X8 + 0x8E8]
	0x033D3148 LDR X1, [X8 + 0x8F0]
	0x033D314C BLR X9
	0x033D3150 LDR W8, [X19 + 0x10]
	0x033D3154 ADD W20, W20, 0x1
	0x033D3158 CMP W20, W8
	0x033D315C B.LT 0x33D313C
	0x033D3160 LDP X20, X19, [X31 + 0x10]
	0x033D3164 LDR X30, [X31], #0x20
	0x033D3168 RET
	0x033D316C BL 0x1C16F20
	0x033D3170 STR X30, [X31 - 0x10]!
	0x033D3174 CBZ X1, 0x33D3194
	0x033D3178 LDR W2, [X0 + 0x10]
	0x033D317C MOV X8, X1
	0x033D3180 MOVZ W1, 0x2A
	0x033D3184 MOV X0, X8
	0x033D3188 MOV X3, X31
	0x033D318C LDR X30, [X31], #0x10
	0x033D3190 B 0x3232D24
	0x033D3194 BL 0x1C16F20
	0x033D3198 STP X30, X21, [X31 - 0x20]!
	0x033D319C STP X20, X19, [X31 + 0x10]
	0x033D31A0 ADRP X20, 0x100A000
	0x033D31A4 ADRP X21, 0xD20000
	0x033D31A8 LDRB W8, [X20 + 0x2DB]
	0x033D31AC LDR X21, [X21 + 0x8F0]
	0x033D31B0 MOV X19, X0
	0x033D31B4 TBNZ X8, 0x0, 0x33D31CC
	0x033D31B8 ADRP X0, 0xD20000
	0x033D31BC LDR X0, [X0 + 0x8F0]
	0x033D31C0 BL 0x1C16CF4
	0x033D31C4 MOVZ W8, 0x1
	0x033D31C8 STRB W8, [X20 + 0x2DB]
	0x033D31CC LDR X0, [X21]
	0x033D31D0 BL 0x1C16F10
	0x033D31D4 MOV X1, X31
	0x033D31D8 MOV X20, X0
	0x033D31DC BL 0x3231AC4
	0x033D31E0 MOV X0, X19
	0x033D31E4 MOV X1, X20
	0x033D31E8 BL 0x33D3170
	0x033D31EC CBZ X0, 0x33D3204
	0x033D31F0 LDR X8, [X0]
	0x033D31F4 LDP X20, X19, [X31 + 0x10]
	0x033D31F8 LDP X2, X1, [X8 + 0x168]
	0x033D31FC LDP X30, X21, [X31], #0x20
	0x033D3200 BR X2
	0x033D3204 BL 0x1C16F20
	0x033D3208 LDR X8, [X0 + 0x30]
	0x033D320C CMP X8, 0x0
	0x033D3210 CSET W0, NE
	0x033D3214 RET
	0x033D3218 SUB X31, X31, 0x90
	0x033D321C STR X30, [X31 + 0x40]
	0x033D3220 STP X26, X25, [X31 + 0x50]
	0x033D3224 STP X24, X23, [X31 + 0x60]
	0x033D3228 STP X22, X21, [X31 + 0x70]
	0x033D322C STP X20, X19, [X31 + 0x80]
	0x033D3230 ADRP X21, 0x100A000
	0x033D3234 LDRB W8, [X21 + 0x2DC]
	0x033D3238 MOV W20, W1
	0x033D323C MOV X19, X0
	0x033D3240 TBNZ X8, 0x0, 0x33D32B8
	0x033D3244 ADRP X0, 0xD59000
	0x033D3248 LDR X0, [X0 + 0xC38]
	0x033D324C BL 0x1C16CF4
	0x033D3250 ADRP X0, 0xD59000
	0x033D3254 LDR X0, [X0 + 0xC40]
	0x033D3258 BL 0x1C16CF4
	0x033D325C ADRP X0, 0xD59000
	0x033D3260 LDR X0, [X0 + 0xC48]
	0x033D3264 BL 0x1C16CF4
	0x033D3268 ADRP X0, 0xD59000

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+48], X29
	003 Move [X31+56], X30
	004 Move [X31+64], X28
	005 Move [X31+72], X27
	006 Move [X31+80], X26
	007 Move [X31+88], X25
	008 Move [X31+96], X24
	009 Move [X31+104], X23
	010 Move [X31+112], X22
	011 Move [X31+120], X21
	012 Move [X31+128], X20
	013 Move [X31+136], X19
	014 Move X19, 0x100C000
	015 Move W8, [X19+691]
	016 Move X20, X3
	017 Move X24, X2
	018 Move X23, X1
	019 Move X25, X0
	020 Move [X31+8], X4
	021 Move [X31+16], X5
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {31}
	026 Move X0, 0xD22000
	027 Move X0, [X0+2288]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X19+691], W8
	031 Move [X31+32], X31
	032 Move [X31+40], X31
	033 Move [X31+24], X31
	034 Compare X25, 0
	035 JumpIfEqual {544}
	036 Move X8, 0xD22000
	037 Move X8, [X8+2288]
	038 Move W26, [X25+16]
	039 Move X0, [X8]
	040 Call 0x1C17F10
	041 Move W1, W26
	042 Move X2, X31
	043 Move X19, X0
	044 Call StringBuilder..ctor, X0, X1
	045 Move W1, [X23]
	046 Move W8, [X25+16]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X22, -42184704
	049 Move W29, W31
	050 Move W26, 1
	051 Add X22, X22, 2378
	052 Move W21, 10
	053 Move X0, X25
	054 Move X2, X31
	055 Call String.get_Chars, X0, X1
	056 Move W1, [X23]
	057 And W8, W0, 0xFFFF
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Add W1, W1, 1
	060 Move X0, X25
	061 Move X2, X31
	062 Move [X23], W1
	063 Call String.get_Chars, X0, X1
	064 And W8, W0, 0xFFFF
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Subtract W8, W8, 33
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move X11, -42184704
	069 Add X11, X11, 2444
	070 NotImplemented "Instruction ADR not yet implemented."
	071 NotImplemented "Instruction LDRH not yet implemented."
	072 Add X9, X9, X10
	073 Move W8, 1
	074 CallNoReturn X9
	075 Compare X19, 0
	076 JumpIfEqual {544}
	077 Move W1, 37
	078 Move X0, X25
	079 Move X2, X31
	080 Call String.get_Chars, X0, X1
	081 Compare X19, 0
	082 JumpIfEqual {544}
	083 Move W1, W0
	084 Move X0, X19
	085 Move X2, X31
	086 Call StringBuilder.Append, X0, X1
	087 Subtract W8, W8, 94
	088 NotImplemented "Instruction CMP not yet implemented."
	089 NotImplemented "Instruction ADR not yet implemented."
	090 NotImplemented "Instruction LDRH not yet implemented."
	091 Add X9, X9, X10
	092 CallNoReturn X9
	093 Compare X20, 0
	094 JumpIfEqual {544}
	095 Move X0, X20
	096 Call LowLevelStack.Pop, X0
	097 Move X27, X0
	098 Move X0, X20
	099 Call LowLevelStack.Pop, X0
	100 Move [X31+24], X0
	101 Move [X31+32], X1
	102 Move W1, [X23]
	103 Move X28, X0
	104 Move X0, X25
	105 Move X2, X31
	106 Call String.get_Chars, X0, X1
	107 And W9, W0, 0xFFFF
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Subtract W10, W9, 38
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Move W8, W31
	112 Move X12, -42184704
	113 Add X12, X12, 2556
	114 NotImplemented "Instruction ADR not yet implemented."
	115 NotImplemented "Instruction LDRH not yet implemented."
	116 Add X9, X9, X11
	117 CallNoReturn X9
	118 And W8, W28, W27
	119 Move W27, [X23]
	120 Move W8, [X25+16]
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Move X0, X25
	123 Move W1, W27
	124 Move X2, X31
	125 Call String.get_Chars, X0, X1
	126 And W8, W0, 0xFFFF
	127 Subtract W8, W8, 88
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move X9, 0x1001
	130 NotImplemented "Instruction MOVK not yet implemented."
	131 NotImplemented "Instruction LSLV not yet implemented."
	132 NotImplemented "Instruction MOVK not yet implemented."
	133 And X31, X8, X9
	134 Move W8, [X25+16]
	135 Add W27, W27, 1
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Move W8, [X25+16]
	138 NotImplemented "Instruction CMP not yet implemented."
	139 Move W8, [X23]
	140 Move X0, X25
	141 Move X3, X31
	142 Subtract W1, W8, 1
	143 Subtract W8, W27, W8
	144 Add W2, W8, 2
	145 Call String.Substring, X0, X1, X2
	146 Compare X0, 0
	147 JumpIfEqual {544}
	148 Move W8, [X0+16]
	149 Move X27, X0
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Move W1, 1
	152 Move X0, X27
	153 Move X2, X31
	154 Call String.get_Chars, X0, X1
	155 And W8, W0, 0xFFFF
	156 NotImplemented "Instruction CMP not yet implemented."
	157 Move W1, 1
	158 Move W2, 1
	159 Move X0, X27
	160 Move X3, X31
	161 Call String.Remove, X0, X1, X2
	162 Move X27, X0
	163 Compare X20, 0
	164 JumpIfEqual {544}
	165 Move X0, X20
	166 Call LowLevelStack.Pop, X0
	167 Move [X31+24], X0
	168 Move [X31+32], X1
	169 Add X0, X31, 24
	170 Call FormatParam.get_Object, X0
	171 Move X1, X0
	172 Move X0, X27
	173 Call ParameterizedStrings.FormatPrintF, X0, X1
	174 Compare X19, 0
	175 JumpIfEqual {544}
	176 Move X1, X0
	177 Move X0, X19
	178 Move X2, X31
	179 Call StringBuilder.Append, X0, X1
	180 And W8, W0, 0xFFFF
	181 NotImplemented "Instruction CMP not yet implemented."
	182 NotImplemented "Instruction CMP not yet implemented."
	183 NotImplemented "Instruction CMP not yet implemented."
	184 Xor W8, W28, W27
	185 NotImplemented "Instruction CMP not yet implemented."
	186 NotImplemented "Instruction CMP not yet implemented."
	187 Or W8, W28, W27
	188 Subtract W9, W9, 60
	189 NotImplemented "Instruction CMP not yet implemented."
	190 Move X12, -42184704
	191 Add X12, X12, 2576
	192 NotImplemented "Instruction ADR not yet implemented."
	193 NotImplemented "Instruction LDRH not yet implemented."
	194 Add X10, X10, X11
	195 CallNoReturn X10
	196 NotImplemented "Instruction CMP not yet implemented."
	197 NotImplemented "Instruction CSET not yet implemented."
	198 Compare X20, 0
	199 JumpIfEqual {544}
	200 Move X0, X20
	201 Call LowLevelStack.Pop, X0
	202 Move [X31+24], X0
	203 Move [X31+32], X1
	204 Move W1, [X23]
	205 Move X27, X0
	206 Move X0, X25
	207 Move X2, X31
	208 Call String.get_Chars, X0, X1
	209 And W8, W0, 0xFFFF
	210 NotImplemented "Instruction CMP not yet implemented."
	211 NotImplemented "Instruction ORN not yet implemented."
	212 NotImplemented "Instruction CSET not yet implemented."
	213 NotImplemented "Instruction CMP not yet implemented."
	214 NotImplemented "Instruction CSEL not yet implemented."
	215 And X1, X8, 0
	216 Move W8, W31
	217 Compare X20, 0
	218 JumpIfEqual {544}
	219 Move X0, X20
	220 Call LowLevelStack.Pop, X0
	221 Move [X31+24], X0
	222 Move [X31+32], X1
	223 Compare X19, 0
	224 JumpIfEqual {544}
	225 Move X8, X0
	226 Move X0, X19
	227 Move W1, W8
	228 Compare X20, 0
	229 JumpIfEqual {544}
	230 Move X0, X20
	231 Call LowLevelStack.Pop, X0
	232 Move [X31+24], X0
	233 Move [X31+32], X1
	234 Compare X19, 0
	235 JumpIfEqual {544}
	236 Move X8, X0
	237 Move X0, X19
	238 Move W1, W8
	239 Move X2, X31
	240 Call StringBuilder.Append, X0, X1
	241 Move W8, [X23]
	242 Move X0, X25
	243 Move X2, X31
	244 Add W1, W8, 1
	245 Move [X23], W1
	246 Call String.get_Chars, X0, X1
	247 Move X1, [X31+8]
	248 Move X2, [X31+16]
	249 Add X3, X31, 40
	250 Call ParameterizedStrings.GetDynamicOrStaticVariables, X0, X1, X2, X3
	251 Compare X0, 0
	252 JumpIfEqual {544}
	253 NotImplemented "Instruction LDRSW not yet implemented."
	254 Move W9, [X0+24]
	255 NotImplemented "Instruction CMP not yet implemented."
	256 Compare X20, 0
	257 JumpIfEqual {544}
	258 Add X8, X0, X8
	259 Compare X24, 0
	260 JumpIfEqual {544}
	261 Move W8, [X24+24]
	262 Compare W8, 0
	263 JumpIfEqual {563}
	264 Move W9, [X24+32]
	265 NotImplemented "Instruction CMP not yet implemented."
	266 Add W8, W9, 1
	267 Move [X24+32], X8
	268 Move [X24+40], X31
	269 Move W8, [X24+48]
	270 Add W8, W8, 1
	271 Move [X24+48], X8
	272 Move [X24+56], X31
	273 Compare X20, 0
	274 JumpIfEqual {544}
	275 Move X0, X20
	276 Call LowLevelStack.Pop, X0
	277 Move X8, 0x100C000
	278 Move W8, [X8+714]
	279 Move X27, X1
	280 Move [X31+24], X0
	281 Move [X31+32], X1
	282 Move TEMP, X8
	283 And TEMP, TEMP, 1
	284 Compare TEMP, 1
	285 JumpIfNotEqual {453}
	286 Compare X27, 0
	287 JumpIfEqual {460}
	288 Compare X27, 0
	289 JumpIfNotEqual {467}
	290 Move W8, [X23]
	291 Move X0, X25
	292 Move X2, X31
	293 Add W1, W8, 1
	294 Move [X23], W1
	295 Call String.get_Chars, X0, X1
	296 Compare X24, 0
	297 JumpIfEqual {544}
	298 Move W9, [X24+24]
	299 And X8, X0, 0xFFFF
	300 Subtract X8, X8, 49
	301 NotImplemented "Instruction CMP not yet implemented."
	302 Compare X20, 0
	303 JumpIfEqual {544}
	304 Add X8, X24, X8
	305 Move X1, [X8+32]
	306 Move X2, [X8+40]
	307 Move X0, X20
	308 Compare X20, 0
	309 JumpIfEqual {544}
	310 Move X0, X20
	311 Call LowLevelStack.Pop, X0
	312 Move X8, 0x100C000
	313 Move W8, [X8+714]
	314 Move X27, X1
	315 Move [X31+24], X0
	316 Move [X31+32], X1
	317 Move TEMP, X8
	318 And TEMP, TEMP, 1
	319 Compare TEMP, 1
	320 JumpIfNotEqual {468}
	321 Compare X27, 0
	322 JumpIfEqual {475}
	323 Compare X19, 0
	324 JumpIfNotEqual {482}
	325 Compare X20, 0
	326 JumpIfEqual {544}
	327 Move X0, X20
	328 Call LowLevelStack.Pop, X0
	329 Move W8, [X23]
	330 Move X4, [X31+8]
	331 Move X5, [X31+16]
	332 Move X27, X0
	333 Move X0, X25
	334 Add W8, W8, 1
	335 Move X1, X23
	336 Move X2, X24
	337 Move X3, X20
	338 Move [X23], W8
	339 Call ParameterizedStrings.EvaluateInternal, X0, X1, X2, X3, X4, X5
	340 Compare W27, 0
	341 JumpIfEqual {348}
	342 Compare X19, 0
	343 JumpIfEqual {544}
	344 Move X1, X0
	345 Move X0, X19
	346 Move X2, X31
	347 Call StringBuilder.Append, X0, X1
	348 Move X0, X20
	349 Call LowLevelStack.Pop, X0
	350 Move [X31+24], X0
	351 Move [X31+32], X1
	352 Compare W0, 0
	353 JumpIfNotEqual {378}
	354 Move W8, [X23]
	355 Move X4, [X31+8]
	356 Move X5, [X31+16]
	357 Move X0, X25
	358 Move X1, X23
	359 Add W8, W8, 1
	360 Move X2, X24
	361 Move X3, X20
	362 Move [X23], W8
	363 Call ParameterizedStrings.EvaluateInternal, X0, X1, X2, X3, X4, X5
	364 Compare W27, 0
	365 JumpIfNotEqual {372}
	366 Compare X19, 0
	367 JumpIfEqual {544}
	368 Move X1, X0
	369 Move X0, X19
	370 Move X2, X31
	371 Call StringBuilder.Append, X0, X1
	372 Move X0, X20
	373 Call LowLevelStack.Pop, X0
	374 Move [X31+24], X0
	375 Move [X31+32], X1
	376 Compare W0, 0
	377 JumpIfEqual {545}
	378 Move TEMP, X29
	379 And TEMP, TEMP, 1
	380 Compare TEMP, 1
	381 JumpIfNotEqual {510}
	382 Move W8, W31
	383 Move W8, [X23]
	384 Move X0, X25
	385 Move X2, X31
	386 Add W1, W8, 1
	387 Move [X23], W1
	388 Call String.get_Chars, X0, X1
	389 And W8, W0, 0xFFFF
	390 NotImplemented "Instruction CMP not yet implemented."
	391 Move W27, W31
	392 Or W8, W28, W27
	393 NotImplemented "Instruction CMP not yet implemented."
	394 NotImplemented "Instruction CSET not yet implemented."
	395 NotImplemented "Instruction SDIV not yet implemented."
	396 NotImplemented "Instruction MSUB not yet implemented."
	397 Move W8, [X23]
	398 Move X0, X25
	399 Move X2, X31
	400 Add W1, W8, 1
	401 Call String.get_Chars, X0, X1
	402 Compare X20, 0
	403 JumpIfEqual {544}
	404 And X1, X0, 0xFFFF
	405 Move X0, X20
	406 Move X2, X31
	407 Call LowLevelStack.Push, X0, X1
	408 Move W8, [X23]
	409 Add W8, W8, 2
	410 Move [X23], W8
	411 Move W8, [X23]
	412 Move X0, X25
	413 Move X2, X31
	414 Add W1, W8, 1
	415 Move [X23], W1
	416 Call String.get_Chars, X0, X1
	417 Move X1, [X31+8]
	418 Move X2, [X31+16]
	419 Add X3, X31, 44
	420 Call ParameterizedStrings.GetDynamicOrStaticVariables, X0, X1, X2, X3
	421 Compare X20, 0
	422 JumpIfEqual {544}
	423 NotImplemented "Instruction LDRSW not yet implemented."
	424 Move X27, X0
	425 Move X0, X20
	426 Call LowLevelStack.Pop, X0
	427 Compare X27, 0
	428 JumpIfEqual {544}
	429 Move W8, [X27+24]
	430 NotImplemented "Instruction CMP not yet implemented."
	431 Add X8, X27, X28
	432 Move [X8+32], X0
	433 Move [X8+40], X1
	434 Move W27, W31
	435 Move W1, [X23]
	436 Move X0, X25
	437 Move X2, X31
	438 Call String.get_Chars, X0, X1
	439 Move W8, [X23]
	440 Multiply W9, W27, W21
	441 Add W9, W9, W0
	442 Move X0, X25
	443 Add W1, W8, 1
	444 Move X2, X31
	445 Subtract W27, W9, 48
	446 Move [X23], W1
	447 Call String.get_Chars, X0, X1
	448 And W8, W0, 0xFFFF
	449 NotImplemented "Instruction CMP not yet implemented."
	450 Compare X20, 0
	451 JumpIfEqual {544}
	452 Move W1, W27
	453 Move X0, 0xD23000
	454 Move X0, [X0+632]
	455 Call 0x1C17CF4
	456 Move X8, 0x100B000
	457 Move [X8+714], W26
	458 Compare X27, 0
	459 JumpIfNotEqual {288}
	460 Move X8, 0xD23000
	461 Move X8, [X8+632]
	462 Move X8, [X8]
	463 Move X8, [X8+184]
	464 Move X27, [X8]
	465 Compare X27, 0
	466 JumpIfEqual {544}
	467 Move W1, [X27+16]
	468 Move X0, 0xD23000
	469 Move X0, [X0+632]
	470 Call 0x1C17CF4
	471 Move X8, 0x100B000
	472 Move [X8+714], W26
	473 Compare X27, 0
	474 JumpIfNotEqual {323}
	475 Move X8, 0xD23000
	476 Move X8, [X8+632]
	477 Move X8, [X8]
	478 Move X8, [X8+184]
	479 Move X27, [X8]
	480 Compare X19, 0
	481 JumpIfEqual {544}
	482 Move X0, X19
	483 Move X1, X27
	484 Multiply W8, W28, W27
	485 Add W8, W28, W27
	486 Subtract W8, W28, W27
	487 NotImplemented "Instruction SDIV not yet implemented."
	488 NotImplemented "Instruction CMP not yet implemented."
	489 NotImplemented "Instruction CSET not yet implemented."
	490 NotImplemented "Instruction CMP not yet implemented."
	491 NotImplemented "Instruction CSET not yet implemented."
	492 NotImplemented "Instruction CMP not yet implemented."
	493 NotImplemented "Instruction CSET not yet implemented."
	494 NotImplemented "Instruction CMP not yet implemented."
	495 NotImplemented "Instruction CSET not yet implemented."
	496 And W8, W9, W8
	497 Move W1, W8
	498 Move X0, X20
	499 Move X2, X31
	500 Call LowLevelStack.Push, X0, X1
	501 Move W8, W29
	502 Move W9, [X23]
	503 Move W29, W8
	504 Add W1, W9, 1
	505 Move [X23], W1
	506 Move W9, [X25+16]
	507 NotImplemented "Instruction CMP not yet implemented."
	508 Compare X20, 0
	509 JumpIfEqual {544}
	510 Move W1, 1
	511 Move X0, X20
	512 Move X2, X31
	513 Call LowLevelStack.Push, X0, X1
	514 Compare X19, 0
	515 JumpIfEqual {544}
	516 Move X8, [X19]
	517 Move X0, X19
	518 Move X9, [X8+360]
	519 Move X1, [X8+368]
	520 NotImplemented "Instruction BLR not yet implemented."
	521 Move X20, [X31+128]
	522 Move X19, [X31+136]
	523 Move X22, [X31+112]
	524 Move X21, [X31+120]
	525 Move X24, [X31+96]
	526 Move X23, [X31+104]
	527 Move X26, [X31+80]
	528 Move X25, [X31+88]
	529 Move X28, [X31+64]
	530 Move X27, [X31+72]
	531 Move X29, [X31+48]
	532 Move X30, [X31+56]
	533 Add X31, X31, 144
	534 Return X0
	535 Move W1, [X23]
	536 Move X0, X25
	537 Move X2, X31
	538 Call String.get_Chars, X0, X1
	539 Compare X20, 0
	540 JumpIfEqual {544}
	541 And W8, W0, 0xFFFF
	542 NotImplemented "Instruction CMP not yet implemented."
	543 NotImplemented "Instruction CSET not yet implemented."
	544 Call 0x1C17F20
	545 Move X0, 0xD21000
	546 Move X0, [X0+1456]
	547 Call 0x1C17D08
	548 Call 0x1C17F10
	549 Move X19, X0
	550 Move X0, 0xD5A000
	551 Move X0, [X0+3032]
	552 Call 0x1C17D08
	553 Move X1, X0
	554 Move X0, X19
	555 Move X2, X31
	556 Call InvalidOperationException..ctor, X0, X1
	557 Move X0, 0xD5A000
	558 Move X0, [X0+3040]
	559 Call 0x1C17D08
	560 Move X1, X0
	561 Move X0, X19
	562 Call 0x1C17DEC
	563 Call 0x1C17F28

Method: System.Boolean AsBool(System.Int32 i)

Disassembly:
	0x033D37B8 B 0x33D37CC
	0x033D37BC LDR W9, [X10]
	0x033D37C0 ADD W9, W9, 0x1

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: System.Int32 AsInt(System.Boolean b)

Disassembly:
	0x033D37B0 MOV X0, X21
	0x033D37B4 BL 0x1C5C788

ISIL:
	001 And W0, W0, 1
	002 Return X0

Method: System.String StringFromAsciiBytes(System.Byte[] buffer, System.Int32 offset, System.Int32 length)

Disassembly:
	0x033D37C4 ADD X8, X8, W9, 0x4, SXTW
	0x033D37C8 ADD X0, X8, 0x138
	0x033D37CC LDP X8, X2, [X0]
	0x033D37D0 MOV X0, X21
	0x033D37D4 MOV X1, X19
	0x033D37D8 BLR X8
	0x033D37DC B 0x33D3764
	0x033D37E0 LDR X1, [X22]
	0x033D37E4 ADD X0, X31, 0x20
	0x033D37E8 BL 0x2BC434C
	0x033D37EC LDRB W8, [X20 + 0x38]
	0x033D37F0 CBZ W8, 0x33D3808
	0x033D37F4 CBZ X19, 0x33D382C
	0x033D37F8 MOVZ W1, 0x26
	0x033D37FC MOV X0, X19
	0x033D3800 MOV X2, X31
	0x033D3804 BL 0x3233D30
	0x033D3808 MOV X0, X19
	0x033D380C LDP X20, X19, [X31 + 0x70]
	0x033D3810 LDP X22, X21, [X31 + 0x60]
	0x033D3814 LDP X24, X23, [X31 + 0x50]
	0x033D3818 LDR X30, [X31 + 0x40]
	0x033D381C ADD X31, X31, 0x80
	0x033D3820 RET
	0x033D3824 MOV X23, X22
	0x033D3828 BL 0x1C16F20
	0x033D382C BL 0x1C16F20
	0x033D3830 B 0x33D383C
	0x033D3834 B 0x33D3838
	0x033D3838 MOV X23, X22
	0x033D383C MOV X21, X0
	0x033D3840 CMP W1, 0x1
	0x033D3844 B.NE 0x33D3870
	0x033D3848 MOV X0, X21
	0x033D384C BL 0x3EB1AD0
	0x033D3850 LDR X22, [X0]
	0x033D3854 BL 0x3EB1AE0
	0x033D3858 LDR X1, [X23]
	0x033D385C ADD X0, X31, 0x20
	0x033D3860 BL 0x2BC434C
	0x033D3864 CBZ X22, 0x33D37EC
	0x033D3868 MOV X0, X22
	0x033D386C BL 0x1C16F18
	0x033D3870 MOV X22, X31
	0x033D3874 B 0x33D387C
	0x033D3878 MOV X21, X0
	0x033D387C LDR X1, [X23]
	0x033D3880 ADD X0, X31, 0x20
	0x033D3884 BL 0x2BC434C
	0x033D3888 CBNZ X22, 0x33D3894
	0x033D388C MOV X0, X21
	0x033D3890 BL 0x1D2C690
	0x033D3894 MOV X0, X22
	0x033D3898 BL 0x1C16F18
	0x033D389C BL 0x1990590
	0x033D38A0 STR X30, [X31 - 0x20]!
	0x033D38A4 STP X20, X19, [X31 + 0x10]
	0x033D38A8 STR W31, [X31 + 0xC]
	0x033D38AC CBZ X0, 0x33D38E0
	0x033D38B0 ADD X1, X31, 0xC
	0x033D38B4 MOVZ W3, 0x1
	0x033D38B8 MOV W2, W31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x100B000
	007 Move W8, [X22+692]
	008 Move W21, W2
	009 Move W20, W1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xD2A000
	016 Move X0, [X0+2264]
	017 Call 0x1C17CF4
	018 Move X0, 0xD23000
	019 Move X0, [X0+632]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+692], W8
	023 Compare W21, 0
	024 JumpIfEqual {59}
	025 Move X8, 0xD2A000
	026 Move X8, [X8+2264]
	027 Move W1, W21
	028 Move X0, [X8]
	029 Call 0x1C17D6C
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X1, X0
	032 Compare X19, 0
	033 JumpIfEqual {71}
	034 Move W9, [X19+24]
	035 Move X8, X31
	036 Move W10, W21
	037 Add X11, X1, 32
	038 Move W12, W20
	039 Add X13, X12, X8
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Compare X1, 0
	042 JumpIfEqual {71}
	043 Move W14, [X1+24]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Add X13, X19, W13
	046 Move W13, [X13+32]
	047 NotImplemented "Instruction STRH not yet implemented."
	048 Add X8, X8, 1
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X0, X31
	055 Move X2, X31
	056 Move X30, [X31+48]
	057 Call String.CreateString, X0, X1
	058 Return X0
	059 Move X8, 0xD23000
	060 Move X8, [X8+632]
	061 Move X20, [X31+32]
	062 Move X19, [X31+40]
	063 Move X22, [X31+16]
	064 Move X21, [X31+24]
	065 Move X8, [X8]
	066 Move X8, [X8+184]
	067 Move X0, [X8]
	068 Move X30, [X31+48]
	069 Return X0
	070 Call 0x1C17F28
	071 Call 0x1C17F20

Method: System.Int32 snprintf(System.Byte* str, System.IntPtr size, System.String format, System.String arg1)

Disassembly:
	0x033D38BC MOV X19, X0
	0x033D38C0 BL 0x33D3970
	0x033D38C4 LDR W8, [X31 + 0xC]
	0x033D38C8 LDR W9, [X19 + 0x10]
	0x033D38CC CMP W8, W9
	0x033D38D0 B.LT 0x33D3914
	0x033D38D4 LDP X20, X19, [X31 + 0x10]
	0x033D38D8 LDR X30, [X31], #0x20
	0x033D38DC RET
	0x033D38E0 ADRP X0, 0xD25000
	0x033D38E4 LDR X0, [X0 + 0x528]
	0x033D38E8 BL 0x1C16D08
	0x033D38EC BL 0x1C16F10
	0x033D38F0 MOV X19, X0
	0x033D38F4 ADRP X0, 0xD52000
	0x033D38F8 LDR X0, [X0 + 0x970]
	0x033D38FC BL 0x1C16D08
	0x033D3900 MOV X1, X0
	0x033D3904 MOV X0, X19
	0x033D3908 MOV X2, X31
	0x033D390C BL 0x330E100
	0x033D3910 B 0x33D3958
	0x033D3914 ADRP X0, 0xD28000
	0x033D3918 LDR X0, [X0 + 0x578]
	0x033D391C BL 0x1C16D08
	0x033D3920 BL 0x1C16F10
	0x033D3924 MOV X19, X0
	0x033D3928 ADRP X0, 0xD59000
	0x033D392C LDR X0, [X0 + 0xC90]
	0x033D3930 BL 0x1C16D08
	0x033D3934 MOV X20, X0
	0x033D3938 ADRP X0, 0xD52000
	0x033D393C LDR X0, [X0 + 0x970]
	0x033D3940 BL 0x1C16D08
	0x033D3944 MOV X2, X0
	0x033D3948 MOV X0, X19
	0x033D394C MOV X1, X20
	0x033D3950 MOV X3, X31
	0x033D3954 BL 0x330E16C
	0x033D3958 ADRP X0, 0xD59000
	0x033D395C LDR X0, [X0 + 0xC98]
	0x033D3960 BL 0x1C16D08
	0x033D3964 MOV X1, X0
	0x033D3968 MOV X0, X19
	0x033D396C BL 0x1C16DEC
	0x033D3970 SUB X31, X31, 0x70
	0x033D3974 STP X29, X30, [X31 + 0x10]
	0x033D3978 STP X28, X27, [X31 + 0x20]
	0x033D397C STP X26, X25, [X31 + 0x30]
	0x033D3980 STP X24, X23, [X31 + 0x40]
	0x033D3984 STP X22, X21, [X31 + 0x50]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+56], X23
	004 Move [X31+64], X22
	005 Move [X31+72], X21
	006 Move [X31+80], X20
	007 Move [X31+88], X19
	008 Move X23, 0x100B000
	009 Move X8, [X23+696]
	010 Move X21, X3
	011 Move X22, X2
	012 Move X19, X1
	013 Move X20, X0
	014 Compare X8, 0
	015 JumpIfNotEqual {35}
	016 Move X12, -42881024
	017 Move V0, [X12+1800]
	018 Move X8, -42803200
	019 Move X10, -42844160
	020 Add X8, X8, 360
	021 Move W9, 4
	022 Add X10, X10, 1252
	023 Move W11, 8
	024 Move W13, 32
	025 Add X0, X31, 0
	026 Move [X31], X8
	027 Move [X31+8], X9
	028 Move [X31+16], X10
	029 Move [X31+24], X11
	030 Move [X31+40], W13
	031 Move [X31+32], D0
	032 Move [X31+44], W31
	033 Call 0x1C1829C
	034 Move [X23+696], X0
	035 Move X0, X22
	036 Call 0x1C1827C
	037 Move X22, X0
	038 Move X0, X21
	039 Call 0x1C1827C
	040 Move X8, [X23+696]
	041 Move X21, X0
	042 Move X0, X20
	043 Move X1, X19
	044 Move X2, X22
	045 Move X3, X21
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move W19, W0
	048 Move X0, X22
	049 Call 0x1C18290
	050 Move X0, X21
	051 Call 0x1C18290
	052 Move W0, W19
	053 Move X20, [X31+80]
	054 Move X19, [X31+88]
	055 Move X22, [X31+64]
	056 Move X21, [X31+72]
	057 Move X30, [X31+48]
	058 Move X23, [X31+56]
	059 Add X31, X31, 96
	060 Return X0

Method: System.Int32 snprintf(System.Byte* str, System.IntPtr size, System.String format, System.Int32 arg1)

Disassembly:
	0x033D3988 STP X20, X19, [X31 + 0x60]
	0x033D398C ADRP X24, 0x100A000
	0x033D3990 ADRP X21, 0xD59000
	0x033D3994 LDRB W8, [X24 + 0x2E3]
	0x033D3998 LDR X21, [X21 + 0xCA0]
	0x033D399C MOV W23, W3
	0x033D39A0 MOV W22, W2
	0x033D39A4 MOV X19, X1
	0x033D39A8 MOV X20, X0
	0x033D39AC TBNZ X8, 0x0, 0x33D3A0C
	0x033D39B0 ADRP X0, 0xD59000
	0x033D39B4 LDR X0, [X0 + 0xCA8]
	0x033D39B8 BL 0x1C16CF4
	0x033D39BC ADRP X0, 0xD59000
	0x033D39C0 LDR X0, [X0 + 0xCB0]
	0x033D39C4 BL 0x1C16CF4
	0x033D39C8 ADRP X0, 0xD59000
	0x033D39CC LDR X0, [X0 + 0xCB8]
	0x033D39D0 BL 0x1C16CF4
	0x033D39D4 ADRP X0, 0xD59000
	0x033D39D8 LDR X0, [X0 + 0xCC0]
	0x033D39DC BL 0x1C16CF4
	0x033D39E0 ADRP X0, 0xD59000
	0x033D39E4 LDR X0, [X0 + 0xCC8]
	0x033D39E8 BL 0x1C16CF4
	0x033D39EC ADRP X0, 0xD22000
	0x033D39F0 LDR X0, [X0 + 0x278]
	0x033D39F4 BL 0x1C16CF4
	0x033D39F8 ADRP X0, 0xD59000
	0x033D39FC LDR X0, [X0 + 0xCA0]
	0x033D3A00 BL 0x1C16CF4
	0x033D3A04 MOVZ W8, 0x1
	0x033D3A08 STRB W8, [X24 + 0x2E3]
	0x033D3A0C STRH W31, [X31 + 0x8]
	0x033D3A10 LDR W8, [X19]
	0x033D3A14 LDR X0, [X21]
	0x033D3A18 STR W8, [X31 + 0xC]
	0x033D3A1C BL 0x1C16F10
	0x033D3A20 MOV X1, X31
	0x033D3A24 MOV X21, X0
	0x033D3A28 BL 0x33BDD8C
	0x033D3A2C ADD X1, X31, 0xC
	0x033D3A30 MOV X0, X20
	0x033D3A34 BL 0x33D50F0
	0x033D3A38 CBZ X20, 0x33D41A4
	0x033D3A3C LDR W24, [X31 + 0xC]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+56], X23
	004 Move [X31+64], X22
	005 Move [X31+72], X21
	006 Move [X31+80], X20
	007 Move [X31+88], X19
	008 Move X23, 0x100B000
	009 Move X8, [X23+704]
	010 Move W19, W3
	011 Move X22, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Compare X8, 0
	015 JumpIfNotEqual {35}
	016 Move X12, -42881024
	017 Move V0, [X12+1800]
	018 Move X8, -42803200
	019 Move X10, -42844160
	020 Add X8, X8, 360
	021 Move W9, 4
	022 Add X10, X10, 1252
	023 Move W11, 8
	024 Move W13, 28
	025 Add X0, X31, 0
	026 Move [X31], X8
	027 Move [X31+8], X9
	028 Move [X31+16], X10
	029 Move [X31+24], X11
	030 Move [X31+40], W13
	031 Move [X31+32], D0
	032 Move [X31+44], W31
	033 Call 0x1C1829C
	034 Move [X23+704], X0
	035 Move X0, X22
	036 Call 0x1C1827C
	037 Move X8, [X23+704]
	038 Move X22, X0
	039 Move X0, X21
	040 Move X1, X20
	041 Move X2, X22
	042 Move W3, W19
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Move W19, W0
	045 Move X0, X22
	046 Call 0x1C18290
	047 Move W0, W19
	048 Move X20, [X31+80]
	049 Move X19, [X31+88]
	050 Move X22, [X31+64]
	051 Move X21, [X31+72]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Add X31, X31, 96
	055 Return X0

Method: System.String FormatPrintF(System.String format, System.Object arg)

Disassembly:
	0x033D33AC MOV X2, X31
	0x033D33B0 BL 0x3233D30
	0x033D33B4 CBZ X23, 0x33D3604
	0x033D33B8 LDR X8, [X23]
	0x033D33BC LDR X1, [X25]
	0x033D33C0 MOV X22, X0
	0x033D33C4 LDRH W9, [X8 + 0x12E]
	0x033D33C8 CBZ X9, 0x33D33EC
	0x033D33CC LDR X10, [X8 + 0xB0]
	0x033D33D0 ADD X10, X10, 0x8
	0x033D33D4 LDUR X11, [X10 - 0x8]
	0x033D33D8 CMP X11, X1
	0x033D33DC B.EQ 0x33D33FC
	0x033D33E0 SUBS X9, X9, 0x1
	0x033D33E4 ADD X10, X10, 0x10
	0x033D33E8 B.NE 0x33D33D4
	0x033D33EC MOV X0, X23
	0x033D33F0 MOV W2, W31
	0x033D33F4 BL 0x1C5C788
	0x033D33F8 B 0x33D3408
	0x033D33FC LDRSW X9, [X10]
	0x033D3400 ADD X8, X8, X9, 0x4, LSL
	0x033D3404 ADD X0, X8, 0x138
	0x033D3408 LDP X8, X1, [X0]
	0x033D340C MOV X0, X23
	0x033D3410 BLR X8
	0x033D3414 MOV X1, X0
	0x033D3418 CBZ X22, 0x33D35FC
	0x033D341C MOV X0, X22
	0x033D3420 MOV X2, X31
	0x033D3424 BL 0x32333E0
	0x033D3428 B 0x33D338C
	0x033D342C LDR X1, [X24]
	0x033D3430 ADD X0, X31, 0x20
	0x033D3434 BL 0x2BC434C
	0x033D3438 ADRP X25, 0xD20000
	0x033D343C LDR X8, [X19 + 0x28]
	0x033D3440 LDR X25, [X25 + 0x838]
	0x033D3444 CBZ X8, 0x33D3580
	0x033D3448 CBZ X21, 0x33D356C
	0x033D344C MOVZ W1, 0x5B
	0x033D3450 MOV X0, X21
	0x033D3454 MOV X2, X31
	0x033D3458 BL 0x3233D30
	0x033D345C LDR X0, [X19 + 0x28]
	0x033D3460 CBZ X0, 0x33D356C
	0x033D3464 ADRP X26, 0xD59000
	0x033D3468 LDR X26, [X26 + 0xC60]
	0x033D346C MOV W22, W31
	0x033D3470 LDR W8, [X0 + 0x18]
	0x033D3474 CMP W22, W8
	0x033D3478 B.GE 0x33D3570
	0x033D347C CBZ W22, 0x33D3498
	0x033D3480 LDR X1, [X25]
	0x033D3484 MOV X0, X21
	0x033D3488 MOV X2, X31
	0x033D348C BL 0x32333E0
	0x033D3490 LDR X0, [X19 + 0x28]
	0x033D3494 CBZ X0, 0x33D356C
	0x033D3498 LDR X2, [X26]
	0x033D349C MOV W1, W22
	0x033D34A0 BL 0x301BCCC
	0x033D34A4 CBZ X0, 0x33D356C
	0x033D34A8 LDR X8, [X0 + 0x18]
	0x033D34AC CBZ X8, 0x33D3520
	0x033D34B0 MOVZ W1, 0x5B
	0x033D34B4 MOV X0, X21
	0x033D34B8 MOV X2, X31
	0x033D34BC BL 0x3233D30
	0x033D34C0 LDR X8, [X19 + 0x28]
	0x033D34C4 CBZ X8, 0x33D356C
	0x033D34C8 LDR X2, [X26]
	0x033D34CC MOV X23, X0
	0x033D34D0 MOV X0, X8
	0x033D34D4 MOV W1, W22
	0x033D34D8 BL 0x301BCCC
	0x033D34DC CBZ X0, 0x33D356C
	0x033D34E0 LDR X1, [X0 + 0x40]
	0x033D34E4 MOV X24, X0
	0x033D34E8 CBNZ X1, 0x33D34FC
	0x033D34EC MOV X0, X24
	0x033D34F0 BL 0x33D3218
	0x033D34F4 MOV X1, X0
	0x033D34F8 STR X0, [X24 + 0x40]
	0x033D34FC CBZ X23, 0x33D356C
	0x033D3500 MOV X0, X23
	0x033D3504 MOV X2, X31
	0x033D3508 BL 0x32333E0
	0x033D350C CBZ X0, 0x33D356C
	0x033D3510 MOVZ W1, 0x5D
	0x033D3514 MOV X2, X31
	0x033D3518 BL 0x3233D30
	0x033D351C B 0x33D3560
	0x033D3520 LDR X0, [X19 + 0x28]
	0x033D3524 CBZ X0, 0x33D356C
	0x033D3528 LDR X2, [X26]
	0x033D352C MOV W1, W22
	0x033D3530 BL 0x301BCCC
	0x033D3534 CBZ X0, 0x33D356C
	0x033D3538 LDR X1, [X0 + 0x40]
	0x033D353C MOV X23, X0
	0x033D3540 CBNZ X1, 0x33D3554
	0x033D3544 MOV X0, X23
	0x033D3548 BL 0x33D3218
	0x033D354C MOV X1, X0
	0x033D3550 STR X0, [X23 + 0x40]
	0x033D3554 MOV X0, X21
	0x033D3558 MOV X2, X31
	0x033D355C BL 0x32333E0
	0x033D3560 LDR X0, [X19 + 0x28]
	0x033D3564 ADD W22, W22, 0x1
	0x033D3568 CBNZ X0, 0x33D3470
	0x033D356C BL 0x1C16F20
	0x033D3570 MOVZ W1, 0x5D
	0x033D3574 MOV X0, X21
	0x033D3578 MOV X2, X31
	0x033D357C BL 0x3233D30
	0x033D3580 TBNZ X20, 0x1, 0x33D3590
	0x033D3584 MOV X0, X19
	0x033D3588 MOV X1, X21
	0x033D358C BL 0x33D36AC
	0x033D3590 LDR X8, [X19 + 0x18]
	0x033D3594 CMP X8, 0x0
	0x033D3598 CSET W8, NE
	0x033D359C ANDS W31, W8, W20, 0x0
	0x033D35A0 B.EQ 0x33D35CC
	0x033D35A4 CBZ X21, 0x33D356C
	0x033D35A8 LDR X1, [X25]
	0x033D35AC MOV X0, X21
	0x033D35B0 MOV X2, X31
	0x033D35B4 BL 0x32333E0
	0x033D35B8 CBZ X0, 0x33D356C
	0x033D35BC LDR X1, [X19 + 0x18]
	0x033D35C0 MOV X2, X31
	0x033D35C4 BL 0x32333E0
	0x033D35C8 B 0x33D35D0

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0x100B000
	012 Move W8, [X21+712]
	013 Move X20, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {30}
	019 Move X0, 0xD21000
	020 Move X0, [X0+1560]
	021 Call 0x1C17CF4
	022 Move X0, 0xD21000
	023 Move X0, [X0+1880]
	024 Call 0x1C17CF4
	025 Move X0, 0xD23000
	026 Move X0, [X0+632]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+712], W8
	030 Compare X20, 0
	031 JumpIfEqual {128}
	032 Move X22, 0xD23000
	033 Move X22, [X22+632]
	034 Move X27, [X20]
	035 Move X26, 0xD21000
	036 Move X25, [X22]
	037 Move X26, [X26+1880]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X1, [X26]
	040 Move X8, [X27+64]
	041 Move X9, [X1+64]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X0, X20
	044 Call 0x1C17E08
	045 Move W3, [X0]
	046 Move X0, X31
	047 Move X1, X31
	048 Move X2, X19
	049 Call ParameterizedStrings.snprintf, X0, X1, X2, X3
	050 Move W21, W0
	051 Move X23, X31
	052 Compare W21, 0
	053 JumpIfEqual {93}
	054 Move TEMP, X21
	055 And TEMP, TEMP, -2147483648
	056 Compare TEMP, -2147483648
	057 JumpIfEqual {131}
	058 Move X8, 0xD21000
	059 Move X8, [X8+1560]
	060 Add W1, W21, 1
	061 Move X0, [X8]
	062 Call 0x1C17D6C
	063 Compare X0, 0
	064 JumpIfEqual {128}
	065 Move X8, [X0+24]
	066 Add X9, X0, 32
	067 Move X22, X0
	068 NotImplemented "Instruction CMP not yet implemented."
	069 NotImplemented "Instruction CSEL not yet implemented."
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X25, W8
	072 Move X8, [X20]
	073 Move X1, [X26]
	074 Move X8, [X8+64]
	075 Move X9, [X1+64]
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move X0, X20
	078 Call 0x1C17E08
	079 Move W3, [X0]
	080 Move X0, X24
	081 Move X1, X25
	082 Move X2, X19
	083 Call ParameterizedStrings.snprintf, X0, X1, X2, X3
	084 Move X0, X31
	085 Move X1, X31
	086 Move X2, X19
	087 Move X3, X20
	088 Call ParameterizedStrings.snprintf, X0, X1, X2, X3
	089 Move W21, W0
	090 Move X23, X20
	091 Compare W21, 0
	092 JumpIfNotEqual {54}
	093 Move X8, [X22]
	094 Move X20, [X31+64]
	095 Move X19, [X31+72]
	096 Move X22, [X31+48]
	097 Move X21, [X31+56]
	098 Move X24, [X31+32]
	099 Move X23, [X31+40]
	100 Move X8, [X8+184]
	101 Move X26, [X31+16]
	102 Move X25, [X31+24]
	103 Move X0, [X8]
	104 Move X30, [X31+80]
	105 Move X27, [X31+88]
	106 Return X0
	107 Move X0, X24
	108 Move X1, X25
	109 Move X2, X19
	110 Move X3, X23
	111 Call ParameterizedStrings.snprintf, X0, X1, X2, X3
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X0, X22
	114 Move W2, W21
	115 Move X20, [X31+64]
	116 Move X19, [X31+72]
	117 Move X22, [X31+48]
	118 Move X21, [X31+56]
	119 Move X24, [X31+32]
	120 Move X23, [X31+40]
	121 Move X26, [X31+16]
	122 Move X25, [X31+24]
	123 Move W1, W31
	124 Move X30, [X31+80]
	125 Move X27, [X31+88]
	126 Call ParameterizedStrings.StringFromAsciiBytes, X0, X1, X2
	127 Return X0
	128 Call 0x1C17F20
	129 Move X0, X20
	130 Call 0x1C181E0
	131 Move X0, 0xD21000
	132 Move X0, [X0+1456]
	133 Call 0x1C17D08
	134 Call 0x1C17F10
	135 Move X19, X0
	136 Move X0, 0xD5A000
	137 Move X0, [X0+3064]
	138 Move X0, 0xD21000
	139 Move X0, [X0+1456]
	140 Call 0x1C17D08
	141 Call 0x1C17F10
	142 Move X19, X0
	143 Move X0, 0xD5A000
	144 Move X0, [X0+3072]
	145 Call 0x1C17D08
	146 Move X1, X0
	147 Move X0, X19
	148 Move X2, X31
	149 Call InvalidOperationException..ctor, X0, X1
	150 Move X0, 0xD5A000
	151 Move X0, [X0+3080]
	152 Call 0x1C17D08
	153 Move X1, X0
	154 Move X0, X19
	155 Call 0x1C17DEC

Method: System.ParameterizedStrings/FormatParam[] GetDynamicOrStaticVariables(System.Char c, ref System.ParameterizedStrings/FormatParam[] dynamicVars, ref System.ParameterizedStrings/FormatParam[] staticVars, out System.Int32 index)

Disassembly:
	0x033D36A4 LDP X30, X19, [X31], #0x10
	0x033D36A8 RET
	0x033D36AC SUB X31, X31, 0x80
	0x033D36B0 STR X30, [X31 + 0x40]
	0x033D36B4 STP X24, X23, [X31 + 0x50]
	0x033D36B8 STP X22, X21, [X31 + 0x60]
	0x033D36BC STP X20, X19, [X31 + 0x70]
	0x033D36C0 ADRP X21, 0x100A000
	0x033D36C4 LDRB W8, [X21 + 0x2DD]
	0x033D36C8 MOV X19, X1
	0x033D36CC MOV X20, X0
	0x033D36D0 TBNZ X8, 0x0, 0x33D3718
	0x033D36D4 ADRP X0, 0xD59000
	0x033D36D8 LDR X0, [X0 + 0xC68]
	0x033D36DC BL 0x1C16CF4
	0x033D36E0 ADRP X0, 0xD59000
	0x033D36E4 LDR X0, [X0 + 0xC70]
	0x033D36E8 BL 0x1C16CF4
	0x033D36EC ADRP X0, 0xD59000
	0x033D36F0 LDR X0, [X0 + 0xC78]
	0x033D36F4 BL 0x1C16CF4
	0x033D36F8 ADRP X0, 0xD59000
	0x033D36FC LDR X0, [X0 + 0xC80]
	0x033D3700 BL 0x1C16CF4
	0x033D3704 ADRP X0, 0xD59000
	0x033D3708 LDR X0, [X0 + 0xC88]
	0x033D370C BL 0x1C16CF4
	0x033D3710 MOVZ W8, 0x1
	0x033D3714 STRB W8, [X21 + 0x2DD]
	0x033D3718 STP X31, X31, [X31 + 0x20]
	0x033D371C STR X31, [X31 + 0x30]
	0x033D3720 LDR X0, [X20 + 0x30]
	0x033D3724 CBZ X0, 0x33D37EC
	0x033D3728 ADRP X8, 0xD59000
	0x033D372C LDR X8, [X8 + 0xC80]
	0x033D3730 ADRP X23, 0xD59000
	0x033D3734 ADRP X24, 0xD59000
	0x033D3738 ADRP X22, 0xD59000
	0x033D373C LDR X1, [X8]
	0x033D3740 LDR X23, [X23 + 0xC70]
	0x033D3744 LDR X24, [X24 + 0xC88]
	0x033D3748 LDR X22, [X22 + 0xC68]
	0x033D374C ADD X8, X31, 0x8
	0x033D3750 BL 0x301CB58
	0x033D3754 LDUR V0, [X31 + 0x8]
	0x033D3758 LDR X8, [X31 + 0x18]
	0x033D375C STR V0, [X31 + 0x2]
	0x033D3760 STR X8, [X31 + 0x30]
	0x033D3764 LDR X1, [X23]
	0x033D3768 ADD X0, X31, 0x20
	0x033D376C BL 0x2BC4350
	0x033D3770 TBZ X0, 0x0, 0x33D37E0
	0x033D3774 LDR X21, [X31 + 0x30]
	0x033D3778 CBZ X21, 0x33D3824
	0x033D377C LDR X8, [X21]
	0x033D3780 LDR X1, [X24]
	0x033D3784 LDRH W9, [X8 + 0x12E]
	0x033D3788 CBZ X9, 0x33D37AC
	0x033D378C LDR X10, [X8 + 0xB0]
	0x033D3790 ADD X10, X10, 0x8
	0x033D3794 LDUR X11, [X10 - 0x8]
	0x033D3798 CMP X11, X1
	0x033D379C B.EQ 0x33D37BC
	0x033D37A0 SUBS X9, X9, 0x1
	0x033D37A4 ADD X10, X10, 0x10
	0x033D37A8 B.NE 0x33D3794
	0x033D37AC MOVZ W2, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x100B000
	008 Move W8, [X23+713]
	009 Move X21, X3
	010 Move X20, X2
	011 Move X19, X1
	012 Move W22, W0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xD5A000
	018 Move X0, [X0+2864]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+713], W8
	022 Subtract W8, W22, 65
	023 And W8, W8, 0xFFFF
	024 NotImplemented "Instruction CMP not yet implemented."
	025 And W8, W22, 0xFFFF
	026 Subtract W9, W22, 97
	027 And W9, W9, 0xFFFF
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Subtract W8, W8, 97
	030 Move [X21], W8
	031 Move X0, [X19]
	032 Compare X0, 0
	033 JumpIfNotEqual {51}
	034 Move X8, 0xD5A000
	035 Move X8, [X8+2864]
	036 Move W1, 26
	037 Move X0, [X8]
	038 Call 0x1C17D6C
	039 Move [X19], X0
	040 Subtract W8, W8, 65
	041 Move [X21], W8
	042 Move X0, [X20]
	043 Compare X0, 0
	044 JumpIfNotEqual {51}
	045 Move X8, 0xD5A000
	046 Move X8, [X8+2864]
	047 Move W1, 26
	048 Move X0, [X8]
	049 Call 0x1C17D6C
	050 Move [X20], X0
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move X30, [X31+48]
	056 Move X23, [X31+56]
	057 Return X0
	058 Move X0, 0xD21000
	059 Move X0, [X0+1456]
	060 Call 0x1C17D08
	061 Call 0x1C17F10
	062 Move X19, X0
	063 Move X0, 0xD5A000
	064 Move X0, [X0+3032]
	065 Call 0x1C17D08
	066 Move X1, X0
	067 Move X0, X19
	068 Move X2, X31
	069 Call InvalidOperationException..ctor, X0, X1
	070 Move X0, 0xD5A000
	071 Move X0, [X0+3088]
	072 Call 0x1C17D08
	073 Move X1, X0
	074 Move X0, X19
	075 Call 0x1C17DEC

