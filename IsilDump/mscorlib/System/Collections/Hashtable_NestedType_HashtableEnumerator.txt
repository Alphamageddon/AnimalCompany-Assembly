Type: System.Collections.Hashtable/HashtableEnumerator

Method: System.Void .ctor(System.Collections.Hashtable hashtable, System.Int32 getObjRetType)

Disassembly:
	0x0335C444 BL 0x32A9678
	0x0335C448 CBZ X0, 0x335C60C
	0x0335C44C ADRP X8, 0xDC1000
	0x0335C450 LDR X8, [X8 + 0x918]
	0x0335C454 MOV X26, X0
	0x0335C458 LDR X27, [X8]
	0x0335C45C MOV X1, X27
	0x0335C460 BL 0x1C16E00
	0x0335C464 MOV X24, X0
	0x0335C468 CBNZ X0, 0x335C634
	0x0335C46C B 0x335C7F0
	0x0335C470 ADRP X8, 0xDCE000
	0x0335C474 LDR X8, [X8 + 0x780]
	0x0335C478 MOV X0, X26
	0x0335C47C MOV X2, X31
	0x0335C480 LDR X1, [X8]
	0x0335C484 BL 0x321BA08
	0x0335C488 TBZ X0, 0x0, 0x335C634
	0x0335C48C ADRP X8, 0xD97000
	0x0335C490 LDR X8, [X8 + 0x6C0]
	0x0335C494 ADRP X9, 0xDCE000
	0x0335C498 LDR X26, [X31 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, X1
	006 Move X1, X31
	007 Move W19, W2
	008 Move X20, X0
	009 Call Object..ctor, X0
	010 Move [X20+16], X21
	011 Compare X21, 0
	012 JumpIfEqual {28}
	013 Move X8, [X21+16]
	014 Compare X8, 0
	015 JumpIfEqual {28}
	016 Move X8, [X8+24]
	017 Move [X20+24], W8
	018 Move W21, [X21+40]
	019 Call 0x1C17D44
	020 Move [X20+28], W21
	021 Move [X20+32], W31
	022 Move [X20+36], W19
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 Return 
	028 Call 0x1C17F20

Method: System.Object Clone()

Disassembly:
	0x0335E788 RET
	0x0335E78C STP X30, X19, [X31 - 0x10]!

ISIL:
	001 Move X1, X31
	002 Call Object.MemberwiseClone, X0
	003 Return X0

Method: System.Object get_Key()

Disassembly:
	0x0335E790 ADRP X0, 0xDC0000
	0x0335E794 LDR X0, [X0 + 0xC50]
	0x0335E798 BL 0x1C16D08
	0x0335E79C BL 0x1C16F10
	0x0335E7A0 MOV X1, X31
	0x0335E7A4 MOV X19, X0
	0x0335E7A8 BL 0x338E344
	0x0335E7AC ADRP X0, 0xDCC000
	0x0335E7B0 LDR X0, [X0 + 0x860]
	0x0335E7B4 BL 0x1C16D08
	0x0335E7B8 MOV X1, X0
	0x0335E7BC MOV X0, X19
	0x0335E7C0 BL 0x1C16DEC
	0x0335E7C4 STR X30, [X31 - 0x30]!
	0x0335E7C8 STP X22, X21, [X31 + 0x10]
	0x0335E7CC STP X20, X19, [X31 + 0x20]
	0x0335E7D0 ADRP X20, 0x107E000
	0x0335E7D4 ADRP X22, 0xDC5000
	0x0335E7D8 ADRP X21, 0xDC9000
	0x0335E7DC LDRB W8, [X20 + 0xE28]
	0x0335E7E0 LDR X22, [X22 + 0xDB8]
	0x0335E7E4 LDR X21, [X21 + 0xA38]
	0x0335E7E8 MOV X19, X0
	0x0335E7EC TBNZ X8, 0x0, 0x335E81C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+32]
	004 Compare W8, 0
	005 JumpIfEqual {10}
	006 Move X0, [X0+40]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0xD96000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0xDC1000
	016 Move X0, [X0+3144]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0xDCD000
	023 Move X0, [X0+2016]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Boolean MoveNext()

Disassembly:
	0x0335E7F0 ADRP X0, 0xDC5000
	0x0335E7F4 LDR X0, [X0 + 0xDB8]
	0x0335E7F8 BL 0x1C16CF4
	0x0335E7FC ADRP X0, 0xD97000
	0x0335E800 LDR X0, [X0 + 0x570]
	0x0335E804 BL 0x1C16CF4
	0x0335E808 ADRP X0, 0xDC9000
	0x0335E80C LDR X0, [X0 + 0xA38]
	0x0335E810 BL 0x1C16CF4
	0x0335E814 MOVZ W8, 0x1
	0x0335E818 STRB W8, [X20 + 0xE28]
	0x0335E81C LDR X0, [X22]
	0x0335E820 BL 0x1C16F10
	0x0335E824 MOV X1, X31
	0x0335E828 MOV X20, X0
	0x0335E82C BL 0x335A0A0
	0x0335E830 MOV X0, X19
	0x0335E834 MOV X1, X31
	0x0335E838 STR X20, [X19 + 0x28]
	0x0335E83C BL 0x3394D78
	0x0335E840 LDR X0, [X21]
	0x0335E844 LDR W8, [X0 + 0xE0]
	0x0335E848 CBNZ W8, 0x335E850
	0x0335E84C BL 0x1C16DFC
	0x0335E850 MOV X0, X31
	0x0335E854 BL 0x330A840
	0x0335E858 CBZ X0, 0x335E8B0
	0x0335E85C ADRP X8, 0xD97000
	0x0335E860 LDR X8, [X8 + 0x570]
	0x0335E864 MOV X20, X0
	0x0335E868 LDR X21, [X20 + 0x30]
	0x0335E86C LDR X0, [X8]
	0x0335E870 LDR W8, [X0 + 0xE0]
	0x0335E874 CBNZ W8, 0x335E87C
	0x0335E878 BL 0x1C16DFC
	0x0335E87C MOV X0, X20
	0x0335E880 MOV X1, X31
	0x0335E884 STR X21, [X19 + 0x10]
	0x0335E888 BL 0x330D434
	0x0335E88C STR X0, [X19 + 0x18]
	0x0335E890 MOV X0, X20
	0x0335E894 MOV X1, X31
	0x0335E898 BL 0x330D488
	0x0335E89C STR X0, [X19 + 0x20]
	0x0335E8A0 LDP X20, X19, [X31 + 0x20]
	0x0335E8A4 LDP X22, X21, [X31 + 0x10]
	0x0335E8A8 LDR X30, [X31], #0x30
	0x0335E8AC RET
	0x0335E8B0 BL 0x1C16F20
	0x0335E8B4 B 0x1C255B4
	0x0335E8B8 MOV X1, X31
	0x0335E8BC B 0x33BDD8C
	0x0335E8C0 STP X30, X19, [X31 - 0x10]!
	0x0335E8C4 MOV X1, X31
	0x0335E8C8 BL 0x33BDD8C
	0x0335E8CC ADRP X0, 0xD95000
	0x0335E8D0 LDR X0, [X0 + 0xB40]
	0x0335E8D4 BL 0x1C16D08
	0x0335E8D8 BL 0x1C16F10
	0x0335E8DC MOV X19, X0
	0x0335E8E0 ADRP X0, 0xDCC000
	0x0335E8E4 LDR X0, [X0 + 0x868]
	0x0335E8E8 BL 0x1C16D08
	0x0335E8EC MOV X1, X0
	0x0335E8F0 MOV X0, X19
	0x0335E8F4 MOV X2, X31
	0x0335E8F8 BL 0x3379A44
	0x0335E8FC ADRP X0, 0xDCC000
	0x0335E900 LDR X0, [X0 + 0x870]
	0x0335E904 BL 0x1C16D08
	0x0335E908 MOV X1, X0
	0x0335E90C MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X0+16]
	006 Compare X8, 0
	007 JumpIfEqual {55}
	008 Move W20, [X0+28]
	009 Move W21, [X8+40]
	010 Move X19, X0
	011 Call 0x1C17D44
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W8, [X19+24]
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Move X9, [X19+16]
	016 Add X10, X8, 1
	017 Subtract W8, W8, 1
	018 Move W11, 24
	019 Compare X9, 0
	020 JumpIfEqual {51}
	021 Move X12, [X9+16]
	022 Compare X12, 0
	023 JumpIfEqual {51}
	024 Move W13, [X12+24]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction UMADDL not yet implemented."
	027 Move X13, [X13+32]
	028 Compare X13, 0
	029 JumpIfEqual {31}
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Subtract X10, X10, 1
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Subtract W8, W8, 1
	034 Move W0, W31
	035 Move [X19+24], W31
	036 Move W0, W31
	037 Move W9, 24
	038 Move [X19+24], W8
	039 Move [X19+40], X13
	040 NotImplemented "Instruction NOP not yet implemented."
	041 NotImplemented "Instruction UMADDL not yet implemented."
	042 Move X8, [X8+40]
	043 Move W0, 1
	044 Move [X19+48], X8
	045 Move [X19+32], W0
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Return X0
	051 Move [X19+24], W8
	052 Call 0x1C17F20
	053 Move [X19+24], W8
	054 Call 0x1C17F28
	055 Call 0x1C17F20
	056 Move X0, 0xD96000
	057 Move X0, [X0+1456]
	058 Call 0x1C17D08
	059 Call 0x1C17F10
	060 Move X19, X0
	061 Move X0, 0xDC0000
	062 Move X0, [X0+648]
	063 Call 0x1C17D08
	064 Move X1, X0
	065 Move X0, X19
	066 Move X2, X31
	067 Call InvalidOperationException..ctor, X0, X1
	068 Move X0, 0xDCD000
	069 Move X0, [X0+2024]
	070 Call 0x1C17D08
	071 Move X1, X0
	072 Move X0, X19
	073 Call 0x1C17DEC

Method: System.Collections.DictionaryEntry get_Entry()

Disassembly:
	0x0335E910 BL 0x1C16DEC
	0x0335E914 MOV X0, X1
	0x0335E918 MOVZ W1, 0x2
	0x0335E91C MOV X2, X31
	0x0335E920 B 0x33BF05C
	0x0335E924 STR X30, [X31 - 0x20]!
	0x0335E928 STP X20, X19, [X31 + 0x10]
	0x0335E92C ADRP X19, 0x107E000
	0x0335E930 ADRP X20, 0xD97000
	0x0335E934 LDRB W8, [X19 + 0xE29]
	0x0335E938 LDR X20, [X20 + 0x278]
	0x0335E93C TBNZ X8, 0x0, 0x335E954
	0x0335E940 ADRP X0, 0xD97000
	0x0335E944 LDR X0, [X0 + 0x278]
	0x0335E948 BL 0x1C16CF4
	0x0335E94C MOVZ W8, 0x1
	0x0335E950 STRB W8, [X19 + 0xE29]
	0x0335E954 LDR X8, [X20]
	0x0335E958 LDP X20, X19, [X31 + 0x10]
	0x0335E95C LDR X8, [X8 + 0xB8]
	0x0335E960 LDR X0, [X8]
	0x0335E964 LDR X30, [X31], #0x20
	0x0335E968 RET
	0x0335E96C STR X30, [X31 - 0x20]!
	0x0335E970 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+32]
	004 Compare W8, 0
	005 JumpIfEqual {12}
	006 Move X8, [X0+40]
	007 Move X1, [X0+48]
	008 Move X0, X8
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0xD96000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0xDC0000
	018 Move X0, [X0+656]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0xDCD000
	025 Move X0, [X0+2032]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Object get_Current()

Disassembly:
	0x0335E974 ADRP X19, 0x107E000
	0x0335E978 ADRP X20, 0xD97000
	0x0335E97C LDRB W8, [X19 + 0xE2A]
	0x0335E980 LDR X20, [X20 + 0x278]
	0x0335E984 TBNZ X8, 0x0, 0x335E99C
	0x0335E988 ADRP X0, 0xD97000
	0x0335E98C LDR X0, [X0 + 0x278]
	0x0335E990 BL 0x1C16CF4
	0x0335E994 MOVZ W8, 0x1
	0x0335E998 STRB W8, [X19 + 0xE2A]
	0x0335E99C LDR X8, [X20]
	0x0335E9A0 LDP X20, X19, [X31 + 0x10]
	0x0335E9A4 LDR X8, [X8 + 0xB8]
	0x0335E9A8 LDR X0, [X8]
	0x0335E9AC LDR X30, [X31], #0x20
	0x0335E9B0 RET
	0x0335E9B4 MOVZ W0, 0x2
	0x0335E9B8 RET
	0x0335E9BC STP X30, X19, [X31 - 0x10]!
	0x0335E9C0 ADRP X0, 0xD9D000
	0x0335E9C4 LDR X0, [X0 + 0xC08]
	0x0335E9C8 BL 0x1C16D08
	0x0335E9CC BL 0x1C16F10
	0x0335E9D0 MOV X19, X0
	0x0335E9D4 ADRP X0, 0xDCC000
	0x0335E9D8 LDR X0, [X0 + 0x878]
	0x0335E9DC BL 0x1C16D08
	0x0335E9E0 MOV X1, X0
	0x0335E9E4 MOV X0, X19
	0x0335E9E8 MOV X2, X31
	0x0335E9EC BL 0x337B498
	0x0335E9F0 ADRP X0, 0xDCC000
	0x0335E9F4 LDR X0, [X0 + 0x880]
	0x0335E9F8 BL 0x1C16D08
	0x0335E9FC MOV X1, X0
	0x0335EA00 MOV X0, X19
	0x0335EA04 BL 0x1C16DEC
	0x0335EA08 STP X30, X19, [X31 - 0x10]!
	0x0335EA0C ADRP X0, 0xD9D000
	0x0335EA10 LDR X0, [X0 + 0xC08]
	0x0335EA14 BL 0x1C16D08
	0x0335EA18 BL 0x1C16F10
	0x0335EA1C MOV X19, X0
	0x0335EA20 ADRP X0, 0xDCC000
	0x0335EA24 LDR X0, [X0 + 0x878]
	0x0335EA28 BL 0x1C16D08
	0x0335EA2C MOV X1, X0
	0x0335EA30 MOV X0, X19
	0x0335EA34 MOV X2, X31
	0x0335EA38 BL 0x337B498
	0x0335EA3C ADRP X0, 0xDCC000
	0x0335EA40 LDR X0, [X0 + 0x888]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x107F000
	006 Move W8, [X20+3612]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xD9E000
	013 Move X0, [X0+3856]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3612], W8
	017 Move W8, [X19+32]
	018 Compare W8, 0
	019 JumpIfEqual {37}
	020 Move W8, [X19+36]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X0, [X19+40]
	024 Move X0, [X19+48]
	025 Move X8, 0xD9E000
	026 NotImplemented "Instruction LDUR not yet implemented."
	027 Move X8, [X8+3856]
	028 Add X1, X31, 0
	029 Move [X31], V0
	030 Move X0, [X8]
	031 Call 0x1C17E04
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X30, [X31+16]
	035 Add X31, X31, 48
	036 Return X0
	037 Move X0, 0xD96000
	038 Move X0, [X0+1456]
	039 Call 0x1C17D08
	040 Call 0x1C17F10
	041 Move X19, X0
	042 Move X0, 0xDC0000
	043 Move X0, [X0+656]
	044 Call 0x1C17D08
	045 Move X1, X0
	046 Move X0, X19
	047 Move X2, X31
	048 Call InvalidOperationException..ctor, X0, X1
	049 Move X0, 0xDCD000
	050 Move X0, [X0+2040]
	051 Call 0x1C17D08
	052 Move X1, X0
	053 Move X0, X19
	054 Call 0x1C17DEC

Method: System.Object get_Value()

Disassembly:
	0x0335EA44 BL 0x1C16D08
	0x0335EA48 MOV X1, X0
	0x0335EA4C MOV X0, X19
	0x0335EA50 BL 0x1C16DEC
	0x0335EA54 STP X30, X19, [X31 - 0x10]!
	0x0335EA58 ADRP X0, 0xD9D000
	0x0335EA5C LDR X0, [X0 + 0xC08]
	0x0335EA60 BL 0x1C16D08
	0x0335EA64 BL 0x1C16F10
	0x0335EA68 MOV X19, X0
	0x0335EA6C ADRP X0, 0xDCC000
	0x0335EA70 LDR X0, [X0 + 0x878]
	0x0335EA74 BL 0x1C16D08
	0x0335EA78 MOV X1, X0
	0x0335EA7C MOV X0, X19
	0x0335EA80 MOV X2, X31
	0x0335EA84 BL 0x337B498
	0x0335EA88 ADRP X0, 0xDCC000
	0x0335EA8C LDR X0, [X0 + 0x890]
	0x0335EA90 BL 0x1C16D08
	0x0335EA94 MOV X1, X0
	0x0335EA98 MOV X0, X19
	0x0335EA9C BL 0x1C16DEC
	0x0335EAA0 STP X30, X19, [X31 - 0x10]!

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+32]
	004 Compare W8, 0
	005 JumpIfEqual {10}
	006 Move X0, [X0+48]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0xD96000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0xDC0000
	016 Move X0, [X0+656]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0xDCD000
	023 Move X0, [X0+2048]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void Reset()

Disassembly:
	0x0335EAA4 ADRP X0, 0xD9D000
	0x0335EAA8 LDR X0, [X0 + 0xC08]
	0x0335EAAC BL 0x1C16D08
	0x0335EAB0 BL 0x1C16F10
	0x0335EAB4 MOV X19, X0
	0x0335EAB8 ADRP X0, 0xDCC000
	0x0335EABC LDR X0, [X0 + 0x878]
	0x0335EAC0 BL 0x1C16D08
	0x0335EAC4 MOV X1, X0
	0x0335EAC8 MOV X0, X19
	0x0335EACC MOV X2, X31
	0x0335EAD0 BL 0x337B498
	0x0335EAD4 ADRP X0, 0xDCC000
	0x0335EAD8 LDR X0, [X0 + 0x898]
	0x0335EADC BL 0x1C16D08
	0x0335EAE0 MOV X1, X0
	0x0335EAE4 MOV X0, X19
	0x0335EAE8 BL 0x1C16DEC
	0x0335EAEC STP X30, X19, [X31 - 0x10]!
	0x0335EAF0 ADRP X0, 0xD9D000
	0x0335EAF4 LDR X0, [X0 + 0xC08]
	0x0335EAF8 BL 0x1C16D08
	0x0335EAFC BL 0x1C16F10
	0x0335EB00 MOV X19, X0
	0x0335EB04 ADRP X0, 0xDCC000
	0x0335EB08 LDR X0, [X0 + 0x878]
	0x0335EB0C BL 0x1C16D08
	0x0335EB10 MOV X1, X0
	0x0335EB14 MOV X0, X19
	0x0335EB18 MOV X2, X31
	0x0335EB1C BL 0x337B498
	0x0335EB20 ADRP X0, 0xDCC000
	0x0335EB24 LDR X0, [X0 + 0x8A0]
	0x0335EB28 BL 0x1C16D08
	0x0335EB2C MOV X1, X0
	0x0335EB30 MOV X0, X19
	0x0335EB34 BL 0x1C16DEC
	0x0335EB38 STP X30, X19, [X31 - 0x10]!
	0x0335EB3C ADRP X0, 0xD9D000
	0x0335EB40 LDR X0, [X0 + 0xC08]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X0+16]
	006 Compare X8, 0
	007 JumpIfEqual {29}
	008 Move W20, [X0+28]
	009 Move W21, [X8+40]
	010 Move X19, X0
	011 Call 0x1C17D44
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move X8, [X19+16]
	014 Move [X19+32], W31
	015 Compare X8, 0
	016 JumpIfEqual {29}
	017 Move X8, [X8+16]
	018 Compare X8, 0
	019 JumpIfEqual {29}
	020 Move X8, [X8+24]
	021 Move [X19+40], X31
	022 Move [X19+48], X31
	023 Move [X19+24], W8
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Move X21, [X31+40]
	028 Return 
	029 Call 0x1C17F20
	030 Move X0, 0xD96000
	031 Move X0, [X0+1456]
	032 Call 0x1C17D08
	033 Call 0x1C17F10
	034 Move X19, X0
	035 Move X0, 0xDC0000
	036 Move X0, [X0+648]
	037 Call 0x1C17D08
	038 Move X1, X0
	039 Move X0, X19
	040 Move X2, X31
	041 Call InvalidOperationException..ctor, X0, X1
	042 Move X0, 0xDCD000
	043 Move X0, [X0+2056]
	044 Call 0x1C17D08
	045 Move X1, X0
	046 Move X0, X19
	047 Call 0x1C17DEC

