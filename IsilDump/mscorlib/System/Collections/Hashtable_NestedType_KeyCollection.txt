Type: System.Collections.Hashtable/KeyCollection

Method: System.Void .ctor(System.Collections.Hashtable hashtable)

Disassembly:
	0x0335C738 B.LT 0x335C700
	0x0335C73C LDR X0, [X31 + 0x8]
	0x0335C740 CBZ X0, 0x335C7EC
	0x0335C744 ADRP X8, 0xD98000
	0x0335C748 LDR X8, [X8 + 0x2A0]
	0x0335C74C MOV X2, X31
	0x0335C750 LDR X1, [X8]
	0x0335C754 BL 0x32A9B08
	0x0335C758 MOV W20, W0
	0x0335C75C BL 0x1C16D44

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], X19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Void CopyTo(System.Array array, System.Int32 arrayIndex)

Disassembly:
	0x0335D8F8 ADRP X0, 0xDCD000
	0x0335D8FC LDR X0, [X0 + 0x7E8]
	0x0335D900 BL 0x1C16D08
	0x0335D904 MOV X1, X0
	0x0335D908 MOV X0, X19
	0x0335D90C BL 0x1C16DEC
	0x0335D910 STP X30, X19, [X31 - 0x10]!
	0x0335D914 LDRB W8, [X0 + 0x20]
	0x0335D918 CBZ W8, 0x335D92C
	0x0335D91C LDP X8, X1, [X0 + 0x28]
	0x0335D920 MOV X0, X8
	0x0335D924 LDP X30, X19, [X31], #0x10
	0x0335D928 RET
	0x0335D92C ADRP X0, 0xD96000
	0x0335D930 LDR X0, [X0 + 0x5B0]
	0x0335D934 BL 0x1C16D08
	0x0335D938 BL 0x1C16F10
	0x0335D93C MOV X19, X0
	0x0335D940 ADRP X0, 0xDC0000
	0x0335D944 LDR X0, [X0 + 0x290]
	0x0335D948 BL 0x1C16D08
	0x0335D94C MOV X1, X0
	0x0335D950 MOV X0, X19
	0x0335D954 MOV X2, X31
	0x0335D958 BL 0x337DF1C
	0x0335D95C ADRP X0, 0xDCD000
	0x0335D960 LDR X0, [X0 + 0x7F0]
	0x0335D964 BL 0x1C16D08
	0x0335D968 MOV X1, X0
	0x0335D96C MOV X0, X19
	0x0335D970 BL 0x1C16DEC
	0x0335D974 SUB X31, X31, 0x30
	0x0335D978 STR X30, [X31 + 0x10]
	0x0335D97C STP X20, X19, [X31 + 0x20]
	0x0335D980 ADRP X20, 0x107F000
	0x0335D984 LDRB W8, [X20 + 0xE1C]
	0x0335D988 MOV X19, X0
	0x0335D98C TBNZ X8, 0x0, 0x335D9A4
	0x0335D990 ADRP X0, 0xD9E000
	0x0335D994 LDR X0, [X0 + 0xF10]
	0x0335D998 BL 0x1C16CF4
	0x0335D99C MOVZ W8, 0x1
	0x0335D9A0 STRB W8, [X20 + 0xE1C]
	0x0335D9A4 LDRB W8, [X19 + 0x20]
	0x0335D9A8 CBZ W8, 0x335D9FC
	0x0335D9AC LDR W8, [X19 + 0x24]
	0x0335D9B0 CMP W8, 0x2
	0x0335D9B4 B.EQ 0x335D9C8
	0x0335D9B8 CMP W8, 0x1
	0x0335D9BC B.NE 0x335D9D0
	0x0335D9C0 LDR X0, [X19 + 0x28]
	0x0335D9C4 B 0x335D9EC
	0x0335D9C8 LDR X0, [X19 + 0x30]
	0x0335D9CC B 0x335D9EC
	0x0335D9D0 ADRP X8, 0xD9E000
	0x0335D9D4 LDUR V0, [X19 + 0x28]
	0x0335D9D8 LDR X8, [X8 + 0xF10]
	0x0335D9DC ADD X1, X31, 0x0
	0x0335D9E0 STR V0, [X31]
	0x0335D9E4 LDR X0, [X8]
	0x0335D9E8 BL 0x1C16E04
	0x0335D9EC LDP X20, X19, [X31 + 0x20]
	0x0335D9F0 LDR X30, [X31 + 0x10]
	0x0335D9F4 ADD X31, X31, 0x30
	0x0335D9F8 RET
	0x0335D9FC ADRP X0, 0xD96000
	0x0335DA00 LDR X0, [X0 + 0x5B0]
	0x0335DA04 BL 0x1C16D08
	0x0335DA08 BL 0x1C16F10
	0x0335DA0C MOV X19, X0
	0x0335DA10 ADRP X0, 0xDC0000
	0x0335DA14 LDR X0, [X0 + 0x290]
	0x0335DA18 BL 0x1C16D08
	0x0335DA1C MOV X1, X0
	0x0335DA20 MOV X0, X19
	0x0335DA24 MOV X2, X31
	0x0335DA28 BL 0x337DF1C
	0x0335DA2C ADRP X0, 0xDCD000
	0x0335DA30 LDR X0, [X0 + 0x7F8]
	0x0335DA34 BL 0x1C16D08
	0x0335DA38 MOV X1, X0
	0x0335DA3C MOV X0, X19
	0x0335DA40 BL 0x1C16DEC
	0x0335DA44 STP X30, X19, [X31 - 0x10]!
	0x0335DA48 LDRB W8, [X0 + 0x20]
	0x0335DA4C CBZ W8, 0x335DA5C
	0x0335DA50 LDR X0, [X0 + 0x30]
	0x0335DA54 LDP X30, X19, [X31], #0x10
	0x0335DA58 RET
	0x0335DA5C ADRP X0, 0xD96000
	0x0335DA60 LDR X0, [X0 + 0x5B0]
	0x0335DA64 BL 0x1C16D08
	0x0335DA68 BL 0x1C16F10
	0x0335DA6C MOV X19, X0
	0x0335DA70 ADRP X0, 0xDC0000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X1, 0
	006 JumpIfEqual {36}
	007 Move X20, X1
	008 Move X21, X0
	009 Move X0, X1
	010 Move X1, X31
	011 Move W19, W2
	012 Call Array.get_Rank, X0
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move TEMP, X19
	015 And TEMP, TEMP, -2147483648
	016 Compare TEMP, -2147483648
	017 JumpIfEqual {65}
	018 Move X0, X20
	019 Move X1, X31
	020 Call Array.get_Length, X0
	021 Move X8, [X21+16]
	022 Compare X8, 0
	023 JumpIfEqual {82}
	024 Move W9, [X8+24]
	025 Subtract W10, W0, W19
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X1, X20
	028 Move W2, W19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X0, X8
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Call Hashtable.CopyKeys, X0, X1, X2
	035 Return 
	036 Move X0, 0xD9C000
	037 Move X0, [X0+1320]
	038 Call 0x1C17D08
	039 Call 0x1C17F10
	040 Move X19, X0
	041 Move X0, 0xDBF000
	042 Move X0, [X0+1600]
	043 Call 0x1C17D08
	044 Move X1, X0
	045 Move X0, X19
	046 Move X2, X31
	047 Call ArgumentNullException..ctor, X0, X1
	048 Move X0, 0xD9F000
	049 Move X0, [X0+1400]
	050 Call 0x1C17D08
	051 Call 0x1C17F10
	052 Move X19, X0
	053 Move X0, 0xDC0000
	054 Move X0, [X0+776]
	055 Call 0x1C17D08
	056 Move X20, X0
	057 Move X0, 0xDBF000
	058 Move X0, [X0+1600]
	059 Call 0x1C17D08
	060 Move X2, X0
	061 Move X0, X19
	062 Move X1, X20
	063 Move X3, X31
	064 Call ArgumentException..ctor, X0, X1, X2
	065 Move X0, 0xD9F000
	066 Move X0, [X0+1888]
	067 Call 0x1C17D08
	068 Call 0x1C17F10
	069 Move X19, X0
	070 Move X0, 0xDC1000
	071 Move X0, [X0+688]
	072 Call 0x1C17D08
	073 Move X20, X0
	074 Move X0, 0xDBF000
	075 Move X0, [X0+1648]
	076 Call 0x1C17D08
	077 Move X2, X0
	078 Move X0, X19
	079 Move X1, X20
	080 Move X3, X31
	081 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	082 Call 0x1C17F20
	083 Move X0, 0xD9F000
	084 Move X0, [X0+1400]
	085 Call 0x1C17D08
	086 Call 0x1C17F10
	087 Move X19, X0
	088 Move X0, 0xDC0000
	089 Move X0, [X0+792]
	090 Call 0x1C17D08
	091 Move X1, X0
	092 Move X0, X19
	093 Move X2, X31
	094 Call ArgumentException..ctor, X0, X1
	095 Move X0, 0xDCE000
	096 Move X0, [X0+1976]
	097 Call 0x1C17D08
	098 Move X1, X0
	099 Move X0, X19
	100 Call 0x1C17DEC

Method: System.Collections.IEnumerator GetEnumerator()

Disassembly:
	0x0335DA74 LDR X0, [X0 + 0x290]
	0x0335DA78 BL 0x1C16D08
	0x0335DA7C MOV X1, X0
	0x0335DA80 MOV X0, X19
	0x0335DA84 MOV X2, X31
	0x0335DA88 BL 0x337DF1C
	0x0335DA8C ADRP X0, 0xDCD000
	0x0335DA90 LDR X0, [X0 + 0x800]
	0x0335DA94 BL 0x1C16D08
	0x0335DA98 MOV X1, X0
	0x0335DA9C MOV X0, X19
	0x0335DAA0 BL 0x1C16DEC
	0x0335DAA4 STP X30, X21, [X31 - 0x20]!
	0x0335DAA8 STP X20, X19, [X31 + 0x10]
	0x0335DAAC LDR X8, [X0 + 0x10]
	0x0335DAB0 CBZ X8, 0x335DAF8
	0x0335DAB4 LDR W20, [X0 + 0x1C]
	0x0335DAB8 LDR W21, [X8 + 0x28]
	0x0335DABC MOV X19, X0
	0x0335DAC0 BL 0x1C16D44
	0x0335DAC4 CMP W20, W21
	0x0335DAC8 B.NE 0x335DAFC
	0x0335DACC LDR X8, [X19 + 0x10]
	0x0335DAD0 STRB W31, [X19 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1080000
	006 Move X20, 0xDCE000
	007 Move W8, [X21+3609]
	008 Move X20, [X20+1816]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDCE000
	015 Move X0, [X0+1816]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3609], W8
	019 Move X0, [X20]
	020 Move X19, [X19+16]
	021 Call 0x1C17F10
	022 Move W2, 1
	023 Move X1, X19
	024 Move X20, X0
	025 Call HashtableEnumerator..ctor, X0, X1, X2
	026 Move X0, X20
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.Boolean get_IsSynchronized()

Disassembly:
	0x0335DAD4 CBZ X8, 0x335DAF8
	0x0335DAD8 LDR X8, [X8 + 0x10]
	0x0335DADC CBZ X8, 0x335DAF8
	0x0335DAE0 LDR X8, [X8 + 0x18]
	0x0335DAE4 STP X31, X31, [X19 + 0x28]
	0x0335DAE8 STR W8, [X19 + 0x18]
	0x0335DAEC LDP X20, X19, [X31 + 0x10]
	0x0335DAF0 LDP X30, X21, [X31], #0x20
	0x0335DAF4 RET

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+792]
	007 Move X1, [X8+800]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Object get_SyncRoot()

Disassembly:
	0x0335DAF8 BL 0x1C16F20
	0x0335DAFC ADRP X0, 0xD96000
	0x0335DB00 LDR X0, [X0 + 0x5B0]
	0x0335DB04 BL 0x1C16D08
	0x0335DB08 BL 0x1C16F10
	0x0335DB0C MOV X19, X0
	0x0335DB10 ADRP X0, 0xDC0000
	0x0335DB14 LDR X0, [X0 + 0x288]
	0x0335DB18 BL 0x1C16D08

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+872]
	007 Move X1, [X8+880]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Int32 get_Count()

Disassembly:
	0x0335DB1C MOV X1, X0
	0x0335DB20 MOV X0, X19
	0x0335DB24 MOV X2, X31
	0x0335DB28 BL 0x337DF1C
	0x0335DB2C ADRP X0, 0xDCD000
	0x0335DB30 LDR X0, [X0 + 0x808]
	0x0335DB34 BL 0x1C16D08

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

