Type: System.Collections.ArrayList

Method: System.Void .ctor()

Disassembly:
	0x03352F5C ADRP X20, 0xDD2000
	0x03352F60 LDRB W8, [X21 + 0xDD2]
	0x03352F64 LDR X20, [X20 + 0x4F8]
	0x03352F68 MOV X19, X0
	0x03352F6C TBNZ X8, 0x0, 0x3352F84
	0x03352F70 ADRP X0, 0xDD2000
	0x03352F74 LDR X0, [X0 + 0x4F8]
	0x03352F78 BL 0x1C16CF4
	0x03352F7C MOVZ W8, 0x1
	0x03352F80 STRB W8, [X21 + 0xDD2]
	0x03352F84 LDR X0, [X20]
	0x03352F88 LDR W21, [X19 + 0x20]
	0x03352F8C BL 0x1C16F10
	0x03352F90 FMOV S0, 2
	0x03352F94 MOV W1, W21
	0x03352F98 MOV X20, X0
	0x03352F9C BL 0x3352B0C
	0x03352FA0 CBZ X20, 0x335302C
	0x03352FA4 LDR W8, [X19 + 0x20]
	0x03352FA8 STR W8, [X20 + 0x20]
	0x03352FAC LDR X0, [X19 + 0x10]
	0x03352FB0 CBZ X0, 0x335302C
	0x03352FB4 LDR W1, [X19 + 0x18]
	0x03352FB8 LDR W8, [X0 + 0x18]
	0x03352FBC LDR W22, [X19 + 0x20]
	0x03352FC0 LDR X2, [X20 + 0x10]
	0x03352FC4 MOV W3, W31
	0x03352FC8 SUB W8, W8, W1
	0x03352FCC CMP W8, W22
	0x03352FD0 CSEL W21, W8, W22, LT
	0x03352FD4 MOV W4, W21
	0x03352FD8 MOV X5, X31
	0x03352FDC BL 0x339FCE8
	0x03352FE0 SUB W4, W22, W21
	0x03352FE4 CMP W4, 0x1
	0x03352FE8 B.LT 0x3353010
	0x03352FEC LDR X0, [X19 + 0x10]
	0x03352FF0 CBZ X0, 0x335302C
	0x03352FF4 LDR W8, [X19 + 0x18]
	0x03352FF8 LDR W9, [X0 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x108B000
	006 Move X20, 0xDA2000
	007 Move W8, [X21+3573]
	008 Move X20, [X20+2504]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDA2000
	015 Move X0, [X0+2504]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3573], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call Object..ctor, X0
	022 Move X20, [X20]
	023 Move X8, [X20+56]
	024 Compare X8, 0
	025 JumpIfNotEqual {29}
	026 Move X0, X20
	027 Call 0x1C5D6E0
	028 Move X8, [X20+56]
	029 Move X0, [X8+16]
	030 Move W8, [X0+309]
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {36}
	035 Call 0x1C5D684
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X8, [X20+56]
	041 Move X0, [X8+16]
	042 Move W8, [X0+309]
	043 Move TEMP, X8
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfEqual {48}
	047 Call 0x1C5D684
	048 Move X8, [X0+184]
	049 Move X8, [X8]
	050 Move [X19+16], X8
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Return 

Method: System.Void .ctor(System.Int32 capacity)

Disassembly:
	0x03359210 LDP X20, X19, [X31 + 0x10]
	0x03359214 LDR X30, [X31], #0x20
	0x03359218 RET
	0x0335921C ADRP X0, 0xD9F000
	0x03359220 LDR X0, [X0 + 0x528]
	0x03359224 BL 0x1C16D08
	0x03359228 BL 0x1C16F10
	0x0335922C MOV X19, X0
	0x03359230 ADRP X0, 0xDC3000
	0x03359234 LDR X0, [X0 + 0x1C0]
	0x03359238 BL 0x1C16D08
	0x0335923C MOV X1, X0
	0x03359240 MOV X0, X19
	0x03359244 MOV X2, X31
	0x03359248 BL 0x330E100
	0x0335924C ADRP X0, 0xDD1000
	0x03359250 LDR X0, [X0 + 0x640]
	0x03359254 BL 0x1C16D08
	0x03359258 MOV X1, X0
	0x0335925C MOV X0, X19
	0x03359260 BL 0x1C16DEC
	0x03359264 STR X30, [X31 - 0x20]!
	0x03359268 STP X20, X19, [X31 + 0x10]
	0x0335926C MOV X19, X1
	0x03359270 MOV X20, X0
	0x03359274 BL 0x3351F5C
	0x03359278 STR X19, [X20 + 0x28]
	0x0335927C LDP X20, X19, [X31 + 0x10]
	0x03359280 LDR X30, [X31], #0x20
	0x03359284 RET
	0x03359288 STP X30, X19, [X31 - 0x10]!
	0x0335928C LDR X8, [X0]
	0x03359290 MOV X19, X0
	0x03359294 LDR X9, [X8 + 0x398]
	0x03359298 LDR X2, [X8 + 0x3A0]
	0x0335929C BLR X9
	0x033592A0 TBNZ X0, 0x1F, 0x33592C0
	0x033592A4 LDR X8, [X19]
	0x033592A8 MOV W1, W0
	0x033592AC MOV X0, X19
	0x033592B0 LDR X3, [X8 + 0x3D8]
	0x033592B4 LDR X2, [X8 + 0x3E0]
	0x033592B8 LDP X30, X19, [X31], #0x10
	0x033592BC BR X3
	0x033592C0 LDP X30, X19, [X31], #0x10
	0x033592C4 RET
	0x033592C8 STR X30, [X31 - 0x20]!
	0x033592CC STP X20, X19, [X31 + 0x10]
	0x033592D0 TBNZ X1, 0x1F, 0x3359344
	0x033592D4 LDR W8, [X0 + 0x18]
	0x033592D8 MOV W3, W1
	0x033592DC MOV X19, X0
	0x033592E0 CMP W8, W1
	0x033592E4 B.LE 0x3359344
	0x033592E8 SUB W8, W8, 0x1
	0x033592EC SUBS W4, W8, W3
	0x033592F0 STR W8, [X19 + 0x18]
	0x033592F4 B.LE 0x3359310
	0x033592F8 LDR X0, [X19 + 0x10]
	0x033592FC ADD W1, W3, 0x1
	0x03359300 MOV X5, X31
	0x03359304 MOV X2, X0
	0x03359308 BL 0x339FCE8
	0x0335930C LDR W8, [X19 + 0x18]
	0x03359310 LDR X9, [X19 + 0x10]
	0x03359314 CBZ X9, 0x33593A0
	0x03359318 LDR W10, [X9 + 0x18]
	0x0335931C CMP W8, W10
	0x03359320 B.CS 0x33593A4
	0x03359324 ADD X8, X9, W8, 0x3, SXTW
	0x03359328 STR X31, [X8 + 0x20]
	0x0335932C LDR W8, [X19 + 0x1C]
	0x03359330 ADD W8, W8, 0x1
	0x03359334 STR W8, [X19 + 0x1C]
	0x03359338 LDP X20, X19, [X31 + 0x10]
	0x0335933C LDR X30, [X31], #0x20
	0x03359340 RET
	0x03359344 ADRP X0, 0xDA2000
	0x03359348 LDR X0, [X0 + 0x760]
	0x0335934C BL 0x1C16D08
	0x03359350 BL 0x1C16F10
	0x03359354 MOV X19, X0
	0x03359358 ADRP X0, 0xDA5000
	0x0335935C LDR X0, [X0 + 0x130]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1084000
	006 Move W8, [X21+3574]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xD9B000
	014 Move X0, [X0+2504]
	015 Call 0x1C17CF4
	016 Move X0, 0xD9B000
	017 Move X0, [X0+2512]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3574], W8
	021 Move X0, X19
	022 Move X1, X31
	023 Call Object..ctor, X0
	024 Move TEMP, X20
	025 And TEMP, TEMP, -2147483648
	026 Compare TEMP, -2147483648
	027 JumpIfEqual {72}
	028 Compare W20, 0
	029 JumpIfEqual {36}
	030 Move X8, 0xD9B000
	031 Move X8, [X8+2512]
	032 Move W1, W20
	033 Move X0, [X8]
	034 Call 0x1C17D6C
	035 Move [X19+16], X0
	036 Move X8, 0xD9B000
	037 Move X8, [X8+2504]
	038 Move X20, [X8]
	039 Move X8, [X20+56]
	040 Compare X8, 0
	041 JumpIfNotEqual {45}
	042 Move X0, X20
	043 Call 0x1C5D6E0
	044 Move X8, [X20+56]
	045 Move X0, [X8+16]
	046 Move W8, [X0+309]
	047 Move TEMP, X8
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfEqual {52}
	051 Call 0x1C5D684
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Move X8, [X20+56]
	057 Move X0, [X8+16]
	058 Move W8, [X0+309]
	059 Move TEMP, X8
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfEqual {64}
	063 Call 0x1C5D684
	064 Move X8, [X0+184]
	065 Move X8, [X8]
	066 Move [X19+16], X8
	067 Move X20, [X31+16]
	068 Move X19, [X31+24]
	069 Move X30, [X31+32]
	070 Move X21, [X31+40]
	071 Return 
	072 Move X0, 0xDCA000
	073 Move X0, [X0+1144]
	074 Call 0x1C17D08
	075 Move X20, 0xDC5000
	076 Move X20, [X20+88]
	077 Move X19, X0
	078 Move X0, X20
	079 Call 0x1C17D08
	080 Move X1, X0
	081 Move X0, X19
	082 Move X2, X31
	083 Call SR.Format, X0, X1
	084 Move X19, X0
	085 Move X0, 0xDA3000
	086 Move X0, [X0+1888]
	087 Call 0x1C17D08
	088 Call 0x1C17F10
	089 Move X21, X0
	090 Move X0, X20
	091 Call 0x1C17D08
	092 Move X1, X0
	093 Move X0, X21
	094 Move X2, X19
	095 Move X3, X31
	096 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	097 Move X0, 0xDD2000
	098 Move X0, [X0+1488]
	099 Call 0x1C17D08
	100 Move X1, X0
	101 Move X0, X21
	102 Call 0x1C17DEC

Method: System.Void .ctor(System.Collections.ICollection c)

Disassembly:
	0x03359360 BL 0x1C16D08
	0x03359364 MOV X20, X0
	0x03359368 ADRP X0, 0xDC2000
	0x0335936C LDR X0, [X0 + 0x660]
	0x03359370 BL 0x1C16D08
	0x03359374 MOV X2, X0
	0x03359378 MOV X0, X19
	0x0335937C MOV X1, X20
	0x03359380 MOV X3, X31
	0x03359384 BL 0x3311888
	0x03359388 ADRP X0, 0xDD1000
	0x0335938C LDR X0, [X0 + 0x648]
	0x03359390 BL 0x1C16D08
	0x03359394 MOV X1, X0
	0x03359398 MOV X0, X19
	0x0335939C BL 0x1C16DEC
	0x033593A0 BL 0x1C16F20
	0x033593A4 BL 0x1C16F28
	0x033593A8 STR X30, [X31 - 0x20]!
	0x033593AC STP X20, X19, [X31 + 0x10]
	0x033593B0 TBNZ X1, 0x1F, 0x335945C
	0x033593B4 TBNZ X2, 0x1F, 0x335947C
	0x033593B8 LDRSW X20, [X0 + 0x18]
	0x033593BC MOV W3, W1
	0x033593C0 MOV X19, X0
	0x033593C4 SUB W8, W20, W1
	0x033593C8 CMP W8, W2
	0x033593CC B.LT 0x33594C4
	0x033593D0 CMP W2, 0x1
	0x033593D4 B.LT 0x3359448
	0x033593D8 SUB W8, W20, W2
	0x033593DC SUBS W4, W8, W3
	0x033593E0 STR W8, [X19 + 0x18]
	0x033593E4 B.LE 0x3359400
	0x033593E8 LDR X0, [X19 + 0x10]
	0x033593EC ADD W1, W2, W3
	0x033593F0 MOV X5, X31
	0x033593F4 MOV X2, X0
	0x033593F8 BL 0x339FCE8
	0x033593FC LDR W8, [X19 + 0x18]
	0x03359400 CMP W20, W8
	0x03359404 B.LE 0x335943C
	0x03359408 SXTW X8, W8
	0x0335940C SUB W9, W20, 0x1
	0x03359410 LDR X10, [X19 + 0x10]
	0x03359414 CBZ X10, 0x3359454
	0x03359418 LDR W11, [X10 + 0x18]
	0x0335941C CMP W9, W11
	0x03359420 B.CS 0x3359458
	0x03359424 ADD X10, X10, X20, 0x3, LSL
	0x03359428 SUB X20, X20, 0x1
	0x0335942C CMP X20, X8
	0x03359430 SUB W9, W9, 0x1
	0x03359434 STR X31, [X10 + 0x18]
	0x03359438 B.GT 0x3359410
	0x0335943C LDR W8, [X19 + 0x1C]
	0x03359440 ADD W8, W8, 0x1
	0x03359444 STR W8, [X19 + 0x1C]
	0x03359448 LDP X20, X19, [X31 + 0x10]
	0x0335944C LDR X30, [X31], #0x20
	0x03359450 RET
	0x03359454 BL 0x1C16F20
	0x03359458 BL 0x1C16F28
	0x0335945C ADRP X0, 0xDA2000
	0x03359460 LDR X0, [X0 + 0x760]
	0x03359464 BL 0x1C16D08
	0x03359468 BL 0x1C16F10
	0x0335946C MOV X19, X0
	0x03359470 ADRP X0, 0xDA5000
	0x03359474 LDR X0, [X0 + 0x130]
	0x03359478 B 0x3359498
	0x0335947C ADRP X0, 0xDA2000
	0x03359480 LDR X0, [X0 + 0x760]
	0x03359484 BL 0x1C16D08
	0x03359488 BL 0x1C16F10
	0x0335948C MOV X19, X0
	0x03359490 ADRP X0, 0xDC2000
	0x03359494 LDR X0, [X0 + 0x648]
	0x03359498 BL 0x1C16D08
	0x0335949C MOV X20, X0
	0x033594A0 ADRP X0, 0xDC2000
	0x033594A4 LDR X0, [X0 + 0x670]
	0x033594A8 BL 0x1C16D08
	0x033594AC MOV X2, X0
	0x033594B0 MOV X0, X19
	0x033594B4 MOV X1, X20
	0x033594B8 MOV X3, X31
	0x033594BC BL 0x3311888
	0x033594C0 B 0x33594F4
	0x033594C4 ADRP X0, 0xDA2000
	0x033594C8 LDR X0, [X0 + 0x578]
	0x033594CC BL 0x1C16D08
	0x033594D0 BL 0x1C16F10
	0x033594D4 MOV X19, X0
	0x033594D8 ADRP X0, 0xDC2000
	0x033594DC LDR X0, [X0 + 0x760]
	0x033594E0 BL 0x1C16D08
	0x033594E4 MOV X1, X0
	0x033594E8 MOV X0, X19
	0x033594EC MOV X2, X31
	0x033594F0 BL 0x3314A68
	0x033594F4 ADRP X0, 0xDD1000
	0x033594F8 LDR X0, [X0 + 0x650]
	0x033594FC BL 0x1C16D08
	0x03359500 MOV X1, X0
	0x03359504 MOV X0, X19
	0x03359508 BL 0x1C16DEC
	0x0335950C STR X30, [X31 - 0x20]!
	0x03359510 STP X20, X19, [X31 + 0x10]
	0x03359514 ADRP X20, 0x1083000
	0x03359518 LDRB W8, [X20 + 0xDFE]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1084000
	006 Move W8, [X21+3575]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0xD9B000
	014 Move X0, [X0+2504]
	015 Call 0x1C17CF4
	016 Move X0, 0xDA2000
	017 Move X0, [X0+752]
	018 Call 0x1C17CF4
	019 Move X0, 0xD9B000
	020 Move X0, [X0+2512]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+3575], W8
	024 Move X0, X19
	025 Move X1, X31
	026 Call Object..ctor, X0
	027 Compare X20, 0
	028 JumpIfEqual {107}
	029 Move X10, 0xDA2000
	030 Move X8, [X20]
	031 Move X10, [X10+752]
	032 NotImplemented "Instruction LDRH not yet implemented."
	033 Move X1, [X10]
	034 Compare X9, 0
	035 JumpIfEqual {42}
	036 Move X10, [X8+176]
	037 Add X10, X10, 8
	038 NotImplemented "Instruction LDUR not yet implemented."
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Subtract X9, X9, 1
	041 Add X10, X10, 16
	042 Move W2, 1
	043 Move X0, X20
	044 Call 0x1C5D788
	045 Move W9, [X10]
	046 Add W9, W9, 1
	047 Add X8, X8, W9
	048 Add X0, X8, 312
	049 Move X8, [X0]
	050 Move X1, [X0+8]
	051 Move X0, X20
	052 NotImplemented "Instruction BLR not yet implemented."
	053 Compare W0, 0
	054 JumpIfEqual {71}
	055 Move X8, 0xD9B000
	056 Move X8, [X8+2512]
	057 Move W1, W0
	058 Move X0, [X8]
	059 Call 0x1C17D6C
	060 Move X8, [X19]
	061 Move [X19+16], X0
	062 Move X0, X19
	063 Move X1, X20
	064 Move X3, [X8+792]
	065 Move X2, [X8+800]
	066 Move X20, [X31+16]
	067 Move X19, [X31+24]
	068 Move X30, [X31+32]
	069 Move X21, [X31+40]
	070 CallNoReturn X3
	071 Move X8, 0xD9B000
	072 Move X8, [X8+2504]
	073 Move X20, [X8]
	074 Move X8, [X20+56]
	075 Compare X8, 0
	076 JumpIfNotEqual {80}
	077 Move X0, X20
	078 Call 0x1C5D6E0
	079 Move X8, [X20+56]
	080 Move X0, [X8+16]
	081 Move W8, [X0+309]
	082 Move TEMP, X8
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfEqual {87}
	086 Call 0x1C5D684
	087 Move W8, [X0+224]
	088 Compare W8, 0
	089 JumpIfNotEqual {91}
	090 Call 0x1C17DFC
	091 Move X8, [X20+56]
	092 Move X0, [X8+16]
	093 Move W8, [X0+309]
	094 Move TEMP, X8
	095 And TEMP, TEMP, 1
	096 Compare TEMP, 1
	097 JumpIfEqual {99}
	098 Call 0x1C5D684
	099 Move X8, [X0+184]
	100 Move X8, [X8]
	101 Move [X19+16], X8
	102 Move X20, [X31+16]
	103 Move X19, [X31+24]
	104 Move X30, [X31+32]
	105 Move X21, [X31+40]
	106 Return 
	107 Move X0, 0xDA0000
	108 Move X0, [X0+1320]
	109 Call 0x1C17D08
	110 Call 0x1C17F10
	111 Move X19, X0
	112 Move X0, 0xDD0000
	113 Move X0, [X0+1336]
	114 Call 0x1C17D08
	115 Move X20, X0
	116 Move X0, 0xDD2000
	117 Move X0, [X0+1496]
	118 Call 0x1C17D08
	119 Move X2, X0
	120 Move X0, X19
	121 Move X1, X20
	122 Move X3, X31
	123 Call ArgumentNullException..ctor, X0, X1, X2
	124 Move X0, 0xDD2000
	125 Move X0, [X0+1504]
	126 Call 0x1C17D08
	127 Move X1, X0
	128 Move X0, X19
	129 Call 0x1C17DEC

Method: System.Void set_Capacity(System.Int32 value)

Disassembly:
	0x0335951C MOV X19, X0
	0x03359520 TBNZ X8, 0x0, 0x3359544
	0x03359524 ADRP X0, 0xD9A000
	0x03359528 LDR X0, [X0 + 0x9C8]
	0x0335952C BL 0x1C16CF4
	0x03359530 ADRP X0, 0xD9A000
	0x03359534 LDR X0, [X0 + 0x9D0]
	0x03359538 BL 0x1C16CF4
	0x0335953C MOVZ W8, 0x1
	0x03359540 STRB W8, [X20 + 0xDFE]
	0x03359544 LDR W1, [X19 + 0x18]
	0x03359548 CBZ W1, 0x3359584
	0x0335954C ADRP X8, 0xD9A000
	0x03359550 LDR X8, [X8 + 0x9D0]
	0x03359554 LDR X0, [X8]
	0x03359558 BL 0x1C16D6C
	0x0335955C LDR X8, [X19 + 0x10]
	0x03359560 LDR W4, [X19 + 0x18]
	0x03359564 MOV X19, X0
	0x03359568 MOV W1, W31
	0x0335956C MOV X0, X8
	0x03359570 MOV X2, X19
	0x03359574 MOV W3, W31
	0x03359578 MOV X5, X31
	0x0335957C BL 0x339FCE8
	0x03359580 B 0x33595DC
	0x03359584 ADRP X8, 0xD9A000
	0x03359588 LDR X8, [X8 + 0x9C8]
	0x0335958C LDR X19, [X8]
	0x03359590 LDR X8, [X19 + 0x38]
	0x03359594 CBNZ X8, 0x33595A4
	0x03359598 MOV X0, X19
	0x0335959C BL 0x1C5C6E0
	0x033595A0 LDR X8, [X19 + 0x38]
	0x033595A4 LDR X0, [X8 + 0x10]
	0x033595A8 LDRB W8, [X0 + 0x135]
	0x033595AC TBNZ X8, 0x0, 0x33595B4
	0x033595B0 BL 0x1C5C684
	0x033595B4 LDR W8, [X0 + 0xE0]
	0x033595B8 CBNZ W8, 0x33595C0
	0x033595BC BL 0x1C16DFC
	0x033595C0 LDR X8, [X19 + 0x38]
	0x033595C4 LDR X0, [X8 + 0x10]
	0x033595C8 LDRB W8, [X0 + 0x135]
	0x033595CC TBNZ X8, 0x0, 0x33595D4
	0x033595D0 BL 0x1C5C684
	0x033595D4 LDR X8, [X0 + 0xB8]
	0x033595D8 LDR X19, [X8]
	0x033595DC MOV X0, X19
	0x033595E0 LDP X20, X19, [X31 + 0x10]
	0x033595E4 LDR X30, [X31], #0x20
	0x033595E8 RET
	0x033595EC STR X30, [X31 - 0x30]!
	0x033595F0 STP X22, X21, [X31 + 0x10]
	0x033595F4 STP X20, X19, [X31 + 0x20]
	0x033595F8 ADRP X21, 0x1083000
	0x033595FC ADRP X22, 0xD9A000
	0x03359600 LDRB W8, [X21 + 0xDFF]
	0x03359604 LDR X22, [X22 + 0x6C0]
	0x03359608 MOV X20, X1
	0x0335960C MOV X19, X0
	0x03359610 TBNZ X8, 0x0, 0x3359628
	0x03359614 ADRP X0, 0xD9A000
	0x03359618 LDR X0, [X0 + 0x6C0]
	0x0335961C BL 0x1C16CF4
	0x03359620 MOVZ W8, 0x1
	0x03359624 STRB W8, [X21 + 0xDFF]
	0x03359628 LDR X0, [X22]
	0x0335962C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1084000
	006 Move W8, [X21+3576]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD9B000
	014 Move X0, [X0+2512]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3576], W8
	018 Move W8, [X19+24]
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X8, [X19+16]
	021 Compare X8, 0
	022 JumpIfEqual {72}
	023 Move W8, [X8+24]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X8, 0xD9B000
	026 Move X8, [X8+2512]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X0, [X8]
	029 Move W1, W20
	030 Call 0x1C17D6C
	031 Move W4, [X19+24]
	032 Move X20, X0
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X0, [X19+16]
	035 Move W1, W31
	036 Move X2, X20
	037 Move W3, W31
	038 Move X5, X31
	039 Call Array.Copy, X0, X1, X2, X3, X4
	040 Move [X19+16], X20
	041 Move W1, 4
	042 Call 0x1C17D6C
	043 Move [X19+16], X0
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Return 
	049 Move X0, 0xDA3000
	050 Move X0, [X0+1888]
	051 Call 0x1C17D08
	052 Call 0x1C17F10
	053 Move X19, X0
	054 Move X0, 0xDA5000
	055 Move X0, [X0+3784]
	056 Call 0x1C17D08
	057 Move X20, X0
	058 Move X0, 0xDC5000
	059 Move X0, [X0+672]
	060 Call 0x1C17D08
	061 Move X2, X0
	062 Move X0, X19
	063 Move X1, X20
	064 Move X3, X31
	065 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	066 Move X0, 0xDD2000
	067 Move X0, [X0+1512]
	068 Call 0x1C17D08
	069 Move X1, X0
	070 Move X0, X19
	071 Call 0x1C17DEC
	072 Call 0x1C17F20

Method: System.Int32 get_Count()

Disassembly:
	0x03359630 CBNZ W8, 0x3359638
	0x03359634 BL 0x1C16DFC

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Boolean get_IsFixedSize()

Disassembly:
	0x03359638 MOV X0, X20
	0x0335963C MOV X1, X31

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Boolean get_IsReadOnly()

Disassembly:
	0x03359640 MOV X2, X31
	0x03359644 BL 0x3395194

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Boolean get_IsSynchronized()

Disassembly:
	0x03359648 TBNZ X0, 0x0, 0x3359694
	0x0335964C LDR W1, [X19 + 0x18]

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Object get_SyncRoot()

Disassembly:
	0x03359650 MOV X0, X20
	0x03359654 MOV X2, X31
	0x03359658 BL 0x33A2DF8
	0x0335965C LDR X8, [X19 + 0x10]
	0x03359660 LDR W4, [X19 + 0x18]
	0x03359664 MOV X19, X0
	0x03359668 MOV W1, W31
	0x0335966C MOV X0, X8
	0x03359670 MOV X2, X19
	0x03359674 MOV W3, W31
	0x03359678 MOV X5, X31
	0x0335967C BL 0x339FCE8
	0x03359680 MOV X0, X19
	0x03359684 LDP X20, X19, [X31 + 0x20]
	0x03359688 LDP X22, X21, [X31 + 0x10]
	0x0335968C LDR X30, [X31], #0x30
	0x03359690 RET
	0x03359694 ADRP X0, 0xD9F000
	0x03359698 LDR X0, [X0 + 0x528]
	0x0335969C BL 0x1C16D08
	0x033596A0 BL 0x1C16F10
	0x033596A4 MOV X19, X0
	0x033596A8 ADRP X0, 0xDA2000
	0x033596AC LDR X0, [X0 + 0x5E8]
	0x033596B0 BL 0x1C16D08
	0x033596B4 MOV X1, X0
	0x033596B8 MOV X0, X19
	0x033596BC MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1084000
	005 Move W8, [X20+3577]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDA1000
	012 Move X0, [X0+3264]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3577], W8
	016 Add X19, X19, 32
	017 Move X0, [X19]
	018 Compare X0, 0
	019 JumpIfNotEqual {32}
	020 Move X8, 0xDA1000
	021 Move X8, [X8+3264]
	022 Move X0, [X8]
	023 Call 0x1C17F10
	024 Move X1, X31
	025 Move X20, X0
	026 Call Object..ctor, X0
	027 Move X0, X19
	028 Move X1, X20
	029 Move X2, X31
	030 Call 0x1C25138
	031 Move X0, [X19]
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return X0

Method: System.Object get_Item(System.Int32 index)

Disassembly:
	0x033596C0 BL 0x330E100
	0x033596C4 ADRP X0, 0xDD1000
	0x033596C8 LDR X0, [X0 + 0x658]
	0x033596CC BL 0x1C16D08
	0x033596D0 MOV X1, X0
	0x033596D4 MOV X0, X19
	0x033596D8 BL 0x1C16DEC
	0x033596DC STR X30, [X31 - 0x10]!
	0x033596E0 LDR X0, [X0 + 0x28]
	0x033596E4 CBZ X0, 0x33596FC
	0x033596E8 LDR X8, [X0]
	0x033596EC LDR X2, [X8 + 0x298]
	0x033596F0 LDR X1, [X8 + 0x2A0]
	0x033596F4 LDR X30, [X31], #0x10
	0x033596F8 BR X2
	0x033596FC BL 0x1C16F20
	0x03359700 MOVZ W0, 0x1
	0x03359704 RET
	0x03359708 MOVZ W0, 0x1
	0x0335970C RET
	0x03359710 STR X30, [X31 - 0x10]!
	0x03359714 LDR X0, [X0 + 0x28]
	0x03359718 CBZ X0, 0x3359730
	0x0335971C LDR X8, [X0]
	0x03359720 LDR X2, [X8 + 0x2C8]
	0x03359724 LDR X1, [X8 + 0x2D0]
	0x03359728 LDR X30, [X31], #0x10
	0x0335972C BR X2
	0x03359730 BL 0x1C16F20
	0x03359734 STR X30, [X31 - 0x10]!
	0x03359738 LDR X0, [X0 + 0x28]
	0x0335973C CBZ X0, 0x3359754
	0x03359740 LDR X8, [X0]
	0x03359744 LDR X3, [X8 + 0x2E8]
	0x03359748 LDR X2, [X8 + 0x2F0]
	0x0335974C LDR X30, [X31], #0x10
	0x03359750 BR X3
	0x03359754 BL 0x1C16F20
	0x03359758 STP X30, X19, [X31 - 0x10]!
	0x0335975C ADRP X0, 0xD9A000
	0x03359760 LDR X0, [X0 + 0xB40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move TEMP, X1
	005 And TEMP, TEMP, -2147483648
	006 Compare TEMP, -2147483648
	007 JumpIfEqual {21}
	008 Move W8, [X0+24]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X8, [X0+16]
	011 Compare X8, 0
	012 JumpIfEqual {44}
	013 Move W9, [X8+24]
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Add X8, X8, W1
	016 Move X0, [X8+32]
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+32]
	020 Return X0
	021 Move X0, 0xDA3000
	022 Move X0, [X0+1888]
	023 Call 0x1C17D08
	024 Call 0x1C17F10
	025 Move X19, X0
	026 Move X0, 0xDA6000
	027 Move X0, [X0+304]
	028 Call 0x1C17D08
	029 Move X20, X0
	030 Move X0, 0xDC3000
	031 Move X0, [X0+1632]
	032 Call 0x1C17D08
	033 Move X2, X0
	034 Move X0, X19
	035 Move X1, X20
	036 Move X3, X31
	037 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	038 Move X0, 0xDD2000
	039 Move X0, [X0+1520]
	040 Call 0x1C17D08
	041 Move X1, X0
	042 Move X0, X19
	043 Call 0x1C17DEC
	044 Call 0x1C17F20
	045 Call 0x1C17F28

Method: System.Void set_Item(System.Int32 index, System.Object value)

Disassembly:
	0x03359764 BL 0x1C16D08
	0x03359768 BL 0x1C16F10
	0x0335976C MOV X19, X0
	0x03359770 ADRP X0, 0xDC4000
	0x03359774 LDR X0, [X0 + 0x68]
	0x03359778 BL 0x1C16D08
	0x0335977C MOV X1, X0
	0x03359780 MOV X0, X19
	0x03359784 MOV X2, X31
	0x03359788 BL 0x3379A44
	0x0335978C ADRP X0, 0xDD1000
	0x03359790 LDR X0, [X0 + 0x660]
	0x03359794 BL 0x1C16D08
	0x03359798 MOV X1, X0
	0x0335979C MOV X0, X19
	0x033597A0 BL 0x1C16DEC
	0x033597A4 STR X30, [X31 - 0x10]!
	0x033597A8 LDR X0, [X0 + 0x28]
	0x033597AC CBZ X0, 0x33597C4
	0x033597B0 LDR X8, [X0]
	0x033597B4 LDR X2, [X8 + 0x2D8]
	0x033597B8 LDR X1, [X8 + 0x2E0]
	0x033597BC LDR X30, [X31], #0x10
	0x033597C0 BR X2
	0x033597C4 BL 0x1C16F20
	0x033597C8 STP X30, X19, [X31 - 0x10]!
	0x033597CC ADRP X0, 0xD9A000
	0x033597D0 LDR X0, [X0 + 0xB40]
	0x033597D4 BL 0x1C16D08
	0x033597D8 BL 0x1C16F10
	0x033597DC MOV X19, X0
	0x033597E0 ADRP X0, 0xDC4000
	0x033597E4 LDR X0, [X0 + 0x68]
	0x033597E8 BL 0x1C16D08
	0x033597EC MOV X1, X0
	0x033597F0 MOV X0, X19
	0x033597F4 MOV X2, X31
	0x033597F8 BL 0x3379A44
	0x033597FC ADRP X0, 0xDD1000
	0x03359800 LDR X0, [X0 + 0x668]
	0x03359804 BL 0x1C16D08
	0x03359808 MOV X1, X0
	0x0335980C MOV X0, X19
	0x03359810 BL 0x1C16DEC
	0x03359814 STP X30, X19, [X31 - 0x10]!
	0x03359818 ADRP X0, 0xD9A000
	0x0335981C LDR X0, [X0 + 0xB40]
	0x03359820 BL 0x1C16D08
	0x03359824 BL 0x1C16F10
	0x03359828 MOV X19, X0
	0x0335982C ADRP X0, 0xDC4000
	0x03359830 LDR X0, [X0 + 0x68]
	0x03359834 BL 0x1C16D08
	0x03359838 MOV X1, X0
	0x0335983C MOV X0, X19
	0x03359840 MOV X2, X31
	0x03359844 BL 0x3379A44
	0x03359848 ADRP X0, 0xDD1000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move TEMP, X1
	007 And TEMP, TEMP, -2147483648
	008 Compare TEMP, -2147483648
	009 JumpIfEqual {39}
	010 Move W8, [X0+24]
	011 Move W21, W1
	012 Move X19, X0
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X22, [X19+16]
	015 Compare X22, 0
	016 JumpIfEqual {62}
	017 Move X20, X2
	018 Compare X2, 0
	019 JumpIfEqual {26}
	020 Move X8, [X22]
	021 Move X0, X20
	022 Move X1, [X8+64]
	023 Call 0x1C17E00
	024 Compare X0, 0
	025 JumpIfEqual {64}
	026 Move W8, [X22+24]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Add X8, X22, W21
	029 Move [X8+32], X20
	030 Move W8, [X19+28]
	031 Move X22, [X31+16]
	032 Move X21, [X31+24]
	033 Add W8, W8, 1
	034 Move [X19+28], W8
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+48]
	038 Return 
	039 Move X0, 0xDA3000
	040 Move X0, [X0+1888]
	041 Call 0x1C17D08
	042 Call 0x1C17F10
	043 Move X19, X0
	044 Move X0, 0xDA6000
	045 Move X0, [X0+304]
	046 Call 0x1C17D08
	047 Move X20, X0
	048 Move X0, 0xDC3000
	049 Move X0, [X0+1632]
	050 Call 0x1C17D08
	051 Move X2, X0
	052 Move X0, X19
	053 Move X1, X20
	054 Move X3, X31
	055 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	056 Move X0, 0xDD2000
	057 Move X0, [X0+1528]
	058 Call 0x1C17D08
	059 Move X1, X0
	060 Move X0, X19
	061 Call 0x1C17DEC
	062 Call 0x1C17F20
	063 Call 0x1C17F28
	064 Call 0x1C17F44
	065 Move X1, X31
	066 Call 0x1C17DEC

Method: System.Int32 Add(System.Object value)

Disassembly:
	0x0335984C LDR X0, [X0 + 0x670]
	0x03359850 BL 0x1C16D08
	0x03359854 MOV X1, X0
	0x03359858 MOV X0, X19
	0x0335985C BL 0x1C16DEC
	0x03359860 STP X30, X19, [X31 - 0x10]!
	0x03359864 ADRP X0, 0xD9A000
	0x03359868 LDR X0, [X0 + 0xB40]
	0x0335986C BL 0x1C16D08
	0x03359870 BL 0x1C16F10
	0x03359874 MOV X19, X0
	0x03359878 ADRP X0, 0xDC4000
	0x0335987C LDR X0, [X0 + 0x68]
	0x03359880 BL 0x1C16D08
	0x03359884 MOV X1, X0
	0x03359888 MOV X0, X19
	0x0335988C MOV X2, X31
	0x03359890 BL 0x3379A44
	0x03359894 ADRP X0, 0xDD1000
	0x03359898 LDR X0, [X0 + 0x678]
	0x0335989C BL 0x1C16D08
	0x033598A0 MOV X1, X0
	0x033598A4 MOV X0, X19
	0x033598A8 BL 0x1C16DEC
	0x033598AC STP X30, X19, [X31 - 0x10]!
	0x033598B0 ADRP X0, 0xD9A000
	0x033598B4 LDR X0, [X0 + 0xB40]
	0x033598B8 BL 0x1C16D08
	0x033598BC BL 0x1C16F10
	0x033598C0 MOV X19, X0
	0x033598C4 ADRP X0, 0xDC4000
	0x033598C8 LDR X0, [X0 + 0x68]
	0x033598CC BL 0x1C16D08
	0x033598D0 MOV X1, X0
	0x033598D4 MOV X0, X19
	0x033598D8 MOV X2, X31
	0x033598DC BL 0x3379A44
	0x033598E0 ADRP X0, 0xDD1000
	0x033598E4 LDR X0, [X0 + 0x680]
	0x033598E8 BL 0x1C16D08
	0x033598EC MOV X1, X0
	0x033598F0 MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, [X0+16]
	007 Compare X21, 0
	008 JumpIfEqual {44}
	009 Move W22, [X0+24]
	010 Move W8, [X21+24]
	011 Move X19, X0
	012 Move X20, X1
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Add W1, W22, 1
	015 Move X0, X19
	016 Call ArrayList.EnsureCapacity, X0, X1
	017 Move X21, [X19+16]
	018 Compare X21, 0
	019 JumpIfEqual {44}
	020 Move W22, [X19+24]
	021 Compare X20, 0
	022 JumpIfEqual {29}
	023 Move X8, [X21]
	024 Move X0, X20
	025 Move X1, [X8+64]
	026 Call 0x1C17E00
	027 Compare X0, 0
	028 JumpIfEqual {46}
	029 Move W8, [X21+24]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Add X8, X21, W22
	032 Move [X8+32], X20
	033 Move V0, [X19+24]
	034 NotImplemented "Instruction MOVI not yet implemented."
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Add S1, S0, S1
	038 Move [X19+24], D1
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move W0, S0
	042 Move X30, [X31+48]
	043 Return X0
	044 Call 0x1C17F20
	045 Call 0x1C17F28
	046 Call 0x1C17F44
	047 Move X1, X31
	048 Call 0x1C17DEC

Method: System.Void AddRange(System.Collections.ICollection c)

Disassembly:
	0x03359950 LDR X0, [X20 + 0x28]
	0x03359954 CBZ X0, 0x33599DC
	0x03359958 LDR X8, [X0]
	0x0335995C LDR X9, [X8 + 0x338]
	0x03359960 LDR X1, [X8 + 0x340]
	0x03359964 BLR X9
	0x03359968 CBZ X0, 0x33599C8

ISIL:
	001 Move X9, [X0]
	002 Move W8, [X0+24]
	003 Move X2, X1
	004 Move X4, [X9+952]
	005 Move X3, [X9+960]
	006 Move W1, W8
	007 CallNoReturn X4

Method: System.Void Clear()

Disassembly:
	0x0335996C ADRP X8, 0xDC7000
	0x03359970 LDR X8, [X8 + 0xBA0]
	0x03359974 LDR X9, [X0]
	0x03359978 LDR X1, [X8]
	0x0335997C LDRB W10, [X9 + 0x130]
	0x03359980 LDRB W8, [X1 + 0x130]
	0x03359984 CMP W10, W8
	0x03359988 B.CC 0x33599C4
	0x0335998C LDR X10, [X9 + 0xC8]
	0x03359990 SUB X9, X8, 0x1
	0x03359994 LDR X10, [X10, X9, LSL #3]
	0x03359998 CMP X10, X1
	0x0335999C B.NE 0x33599C4
	0x033599A0 STR X0, [X19 + 0x28]
	0x033599A4 LDR X10, [X0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W2, [X0+24]
	004 Move X19, X0
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X0, [X19+16]
	007 Move W1, W31
	008 Move X3, X31
	009 Call Array.Clear, X0, X1, X2
	010 Move [X19+24], W31
	011 Move W8, [X19+28]
	012 Add W8, W8, 1
	013 Move [X19+28], W8
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Return 

Method: System.Object Clone()

Disassembly:
	0x033599A8 LDRB W11, [X10 + 0x130]
	0x033599AC CMP W11, W8
	0x033599B0 B.CC 0x33599C4
	0x033599B4 LDR X8, [X10 + 0xC8]
	0x033599B8 LDR X8, [X8, X9, LSL #3]
	0x033599BC CMP X8, X1
	0x033599C0 B.EQ 0x33599CC
	0x033599C4 BL 0x1C171E0
	0x033599C8 STR X31, [X19 + 0x28]
	0x033599CC MOV X0, X19
	0x033599D0 LDP X20, X19, [X31 + 0x10]
	0x033599D4 LDP X30, X21, [X31], #0x20
	0x033599D8 RET
	0x033599DC BL 0x1C16F20
	0x033599E0 STR X30, [X31 - 0x10]!
	0x033599E4 LDR X0, [X0 + 0x28]
	0x033599E8 CBZ X0, 0x3359A00
	0x033599EC LDR X8, [X0]
	0x033599F0 LDR X3, [X8 + 0x348]
	0x033599F4 LDR X2, [X8 + 0x350]
	0x033599F8 LDR X30, [X31], #0x10
	0x033599FC BR X3
	0x03359A00 BL 0x1C16F20
	0x03359A04 STR X30, [X31 - 0x10]!
	0x03359A08 LDR X0, [X0 + 0x28]
	0x03359A0C CBZ X0, 0x3359A24
	0x03359A10 LDR X8, [X0]
	0x03359A14 LDR X4, [X8 + 0x368]
	0x03359A18 LDR X3, [X8 + 0x370]
	0x03359A1C LDR X30, [X31], #0x10
	0x03359A20 BR X4
	0x03359A24 BL 0x1C16F20
	0x03359A28 STR X30, [X31 - 0x10]!
	0x03359A2C LDR X0, [X0 + 0x28]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1084000
	006 Move X20, 0xDC8000
	007 Move W8, [X21+3578]
	008 Move X20, [X20+2976]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDC8000
	015 Move X0, [X0+2976]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3578], W8
	019 Move X0, [X20]
	020 Move W21, [X19+24]
	021 Call 0x1C17F10
	022 Move W1, W21
	023 Move X20, X0
	024 Call ArrayList..ctor, X0, X1
	025 Compare X20, 0
	026 JumpIfEqual {42}
	027 Move V0, [X19+24]
	028 Move X2, [X20+16]
	029 Move W1, W31
	030 Move W3, W31
	031 Move [X20+24], D0
	032 Move X0, [X19+16]
	033 Move W4, [X19+24]
	034 Move X5, X31
	035 Call Array.Copy, X0, X1, X2, X3, X4
	036 Move X0, X20
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return X0
	042 Call 0x1C17F20

Method: System.Boolean Contains(System.Object item)

Disassembly:
	0x03359A30 CBZ X0, 0x3359A48
	0x03359A34 LDR X8, [X0]
	0x03359A38 LDR X6, [X8 + 0x378]
	0x03359A3C LDR X5, [X8 + 0x380]
	0x03359A40 LDR X30, [X31], #0x10
	0x03359A44 BR X6
	0x03359A48 BL 0x1C16F20
	0x03359A4C STR X30, [X31 - 0x10]!
	0x03359A50 LDR X0, [X0 + 0x28]
	0x03359A54 CBZ X0, 0x3359A6C
	0x03359A58 LDR X8, [X0]
	0x03359A5C LDR X2, [X8 + 0x388]
	0x03359A60 LDR X1, [X8 + 0x390]
	0x03359A64 LDR X30, [X31], #0x10
	0x03359A68 BR X2
	0x03359A6C BL 0x1C16F20
	0x03359A70 STR X30, [X31 - 0x10]!
	0x03359A74 LDR X0, [X0 + 0x28]
	0x03359A78 CBZ X0, 0x3359A90
	0x03359A7C LDR X8, [X0]
	0x03359A80 LDR X3, [X8 + 0x398]
	0x03359A84 LDR X2, [X8 + 0x3A0]
	0x03359A88 LDR X30, [X31], #0x10
	0x03359A8C BR X3
	0x03359A90 BL 0x1C16F20
	0x03359A94 STP X30, X19, [X31 - 0x10]!
	0x03359A98 ADRP X0, 0xD9A000
	0x03359A9C LDR X0, [X0 + 0xB40]
	0x03359AA0 BL 0x1C16D08
	0x03359AA4 BL 0x1C16F10
	0x03359AA8 MOV X19, X0
	0x03359AAC ADRP X0, 0xDC4000
	0x03359AB0 LDR X0, [X0 + 0x68]
	0x03359AB4 BL 0x1C16D08
	0x03359AB8 MOV X1, X0
	0x03359ABC MOV X0, X19
	0x03359AC0 MOV X2, X31
	0x03359AC4 BL 0x3379A44
	0x03359AC8 ADRP X0, 0xDD1000
	0x03359ACC LDR X0, [X0 + 0x688]
	0x03359AD0 BL 0x1C16D08
	0x03359AD4 MOV X1, X0
	0x03359AD8 MOV X0, X19
	0x03359ADC BL 0x1C16DEC
	0x03359AE0 STP X30, X19, [X31 - 0x10]!
	0x03359AE4 ADRP X0, 0xD9A000
	0x03359AE8 LDR X0, [X0 + 0xB40]
	0x03359AEC BL 0x1C16D08
	0x03359AF0 BL 0x1C16F10
	0x03359AF4 MOV X19, X0
	0x03359AF8 ADRP X0, 0xDC4000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W8, [X0+24]
	006 Move X19, X0
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Compare X1, 0
	009 Invalid "Jump target not found in method."
	010 Move X20, X1
	011 Move X21, X31
	012 Move X9, [X19+16]
	013 Compare X9, 0
	014 JumpIfEqual {55}
	015 Move W10, [X9+24]
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Add X9, X9, X21
	018 Move X0, [X9+32]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, [X0]
	022 Move X1, X20
	023 Move X9, [X8+312]
	024 Move X2, [X8+320]
	025 NotImplemented "Instruction BLR not yet implemented."
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {53}
	030 Move W8, [X19+24]
	031 Add X21, X21, 1
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X11, [X19+16]
	034 Compare X11, 0
	035 JumpIfEqual {55}
	036 Move W10, [X11+24]
	037 Move X9, X31
	038 Add X11, X11, 32
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X12, [X11]
	041 Add X9, X9, 1
	042 NotImplemented "Instruction CMP not yet implemented."
	043 NotImplemented "Instruction CSET not yet implemented."
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Compare X12, 0
	046 JumpIfNotEqual {39}
	047 Move W0, W31
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Return X0
	053 Move W0, 1
	054 Call 0x1C17F28
	055 Call 0x1C17F20

Method: System.Void CopyTo(System.Array array)

Disassembly:
	0x03359AFC LDR X0, [X0 + 0x68]
	0x03359B00 BL 0x1C16D08
	0x03359B04 MOV X1, X0
	0x03359B08 MOV X0, X19
	0x03359B0C MOV X2, X31

ISIL:
	001 Move X8, [X0]
	002 Move W2, W31
	003 Move X4, [X8+872]
	004 Move X3, [X8+880]
	005 CallNoReturn X4

Method: System.Void CopyTo(System.Array array, System.Int32 arrayIndex)

Disassembly:
	0x03359B10 BL 0x3379A44
	0x03359B14 ADRP X0, 0xDD1000
	0x03359B18 LDR X0, [X0 + 0x690]
	0x03359B1C BL 0x1C16D08
	0x03359B20 MOV X1, X0
	0x03359B24 MOV X0, X19
	0x03359B28 BL 0x1C16DEC
	0x03359B2C STP X30, X19, [X31 - 0x10]!
	0x03359B30 ADRP X0, 0xD9A000
	0x03359B34 LDR X0, [X0 + 0xB40]
	0x03359B38 BL 0x1C16D08
	0x03359B3C BL 0x1C16F10
	0x03359B40 MOV X19, X0
	0x03359B44 ADRP X0, 0xDC4000
	0x03359B48 LDR X0, [X0 + 0x68]
	0x03359B4C BL 0x1C16D08
	0x03359B50 MOV X1, X0
	0x03359B54 MOV X0, X19
	0x03359B58 MOV X2, X31
	0x03359B5C BL 0x3379A44
	0x03359B60 ADRP X0, 0xDD1000
	0x03359B64 LDR X0, [X0 + 0x698]
	0x03359B68 BL 0x1C16D08
	0x03359B6C MOV X1, X0
	0x03359B70 MOV X0, X19
	0x03359B74 BL 0x1C16DEC
	0x03359B78 STP X30, X19, [X31 - 0x10]!
	0x03359B7C ADRP X0, 0xD9A000
	0x03359B80 LDR X0, [X0 + 0xB40]
	0x03359B84 BL 0x1C16D08
	0x03359B88 BL 0x1C16F10
	0x03359B8C MOV X19, X0
	0x03359B90 ADRP X0, 0xDC4000
	0x03359B94 LDR X0, [X0 + 0x68]
	0x03359B98 BL 0x1C16D08
	0x03359B9C MOV X1, X0
	0x03359BA0 MOV X0, X19
	0x03359BA4 MOV X2, X31
	0x03359BA8 BL 0x3379A44
	0x03359BAC ADRP X0, 0xDD1000
	0x03359BB0 LDR X0, [X0 + 0x6A0]
	0x03359BB4 BL 0x1C16D08
	0x03359BB8 MOV X1, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W19, W2
	006 Move X20, X1
	007 Move X21, X0
	008 Compare X1, 0
	009 JumpIfEqual {14}
	010 Move X0, X20
	011 Move X1, X31
	012 Call Array.get_Rank, X0
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X0, [X21+16]
	015 Move W4, [X21+24]
	016 Move X2, X20
	017 Move W3, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move W1, W31
	021 Move X5, X31
	022 Move X30, [X31+32]
	023 Move X21, [X31+40]
	024 Call Array.Copy, X0, X1, X2, X3, X4
	025 Return 
	026 Move X0, 0xDA3000
	027 Move X0, [X0+1400]
	028 Call 0x1C17D08
	029 Call 0x1C17F10
	030 Move X19, X0
	031 Move X0, 0xDC4000
	032 Move X0, [X0+776]
	033 Call 0x1C17D08
	034 Move X20, X0
	035 Move X0, 0xDC3000
	036 Move X0, [X0+1600]
	037 Call 0x1C17D08
	038 Move X2, X0
	039 Move X0, X19
	040 Move X1, X20
	041 Move X3, X31
	042 Call ArgumentException..ctor, X0, X1, X2
	043 Move X0, 0xDD2000
	044 Move X0, [X0+1536]
	045 Call 0x1C17D08
	046 Move X1, X0
	047 Move X0, X19
	048 Call 0x1C17DEC

Method: System.Void CopyTo(System.Int32 index, System.Array array, System.Int32 arrayIndex, System.Int32 count)

Disassembly:
	0x03359BBC MOV X0, X19
	0x03359BC0 BL 0x1C16DEC
	0x03359BC4 STP X30, X19, [X31 - 0x10]!
	0x03359BC8 ADRP X0, 0xD9A000
	0x03359BCC LDR X0, [X0 + 0xB40]
	0x03359BD0 BL 0x1C16D08
	0x03359BD4 BL 0x1C16F10
	0x03359BD8 MOV X19, X0
	0x03359BDC ADRP X0, 0xDC4000
	0x03359BE0 LDR X0, [X0 + 0x68]
	0x03359BE4 BL 0x1C16D08
	0x03359BE8 MOV X1, X0
	0x03359BEC MOV X0, X19
	0x03359BF0 MOV X2, X31
	0x03359BF4 BL 0x3379A44
	0x03359BF8 ADRP X0, 0xDD1000
	0x03359BFC LDR X0, [X0 + 0x6A8]
	0x03359C00 BL 0x1C16D08
	0x03359C04 MOV X1, X0
	0x03359C08 MOV X0, X19
	0x03359C0C BL 0x1C16DEC
	0x03359C10 STR X30, [X31 - 0x10]!
	0x03359C14 LDR X0, [X0 + 0x28]
	0x03359C18 CBZ X0, 0x3359C30
	0x03359C1C LDR X8, [X0]
	0x03359C20 LDR X2, [X8 + 0x3F8]
	0x03359C24 LDR X1, [X8 + 0x400]
	0x03359C28 LDR X30, [X31], #0x10
	0x03359C2C BR X2
	0x03359C30 BL 0x1C16F20
	0x03359C34 STR X30, [X31 - 0x10]!
	0x03359C38 LDR X0, [X0 + 0x28]
	0x03359C3C CBZ X0, 0x3359C54
	0x03359C40 LDR X8, [X0]
	0x03359C44 LDR X3, [X8 + 0x408]
	0x03359C48 LDR X2, [X8 + 0x410]
	0x03359C4C LDR X30, [X31], #0x10
	0x03359C50 BR X3
	0x03359C54 BL 0x1C16F20
	0x03359C58 MOV X1, X31
	0x03359C5C B 0x33C5A24
	0x03359C60 STR X30, [X31 - 0x20]!
	0x03359C64 STP X20, X19, [X31 + 0x10]
	0x03359C68 ADRP X20, 0x1083000
	0x03359C6C LDRB W8, [X20 + 0xE02]
	0x03359C70 MOV X19, X0
	0x03359C74 TBNZ X8, 0x0, 0x3359C8C
	0x03359C78 ADRP X0, 0xDD1000
	0x03359C7C LDR X0, [X0 + 0x610]
	0x03359C80 BL 0x1C16CF4
	0x03359C84 MOVZ W8, 0x1
	0x03359C88 STRB W8, [X20 + 0xE02]
	0x03359C8C LDR X0, [X19 + 0x10]
	0x03359C90 CBZ X0, 0x3359DE4
	0x03359C94 LDR W8, [X19 + 0x1C]
	0x03359C98 LDR W9, [X0 + 0x1C]
	0x03359C9C CMP W8, W9
	0x03359CA0 B.NE 0x3359DE8
	0x03359CA4 LDRB W8, [X19 + 0x28]
	0x03359CA8 LDR W20, [X19 + 0x18]
	0x03359CAC CBZ W8, 0x3359CEC
	0x03359CB0 LDR W8, [X0 + 0x18]
	0x03359CB4 SUB W8, W8, 0x1
	0x03359CB8 CMP W20, W8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move W8, [X0+24]
	008 Subtract W8, W8, W1
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move W19, W4
	011 Move W20, W3
	012 Move X23, X0
	013 Move W21, W1
	014 Move X22, X2
	015 Compare X2, 0
	016 JumpIfEqual {21}
	017 Move X0, X22
	018 Move X1, X31
	019 Call Array.get_Rank, X0
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move X0, [X23+16]
	022 Move W1, W21
	023 Move X2, X22
	024 Move W3, W20
	025 Move W4, W19
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X22, [X31+16]
	029 Move X21, [X31+24]
	030 Move X5, X31
	031 Move X30, [X31+48]
	032 Move X23, [X31+56]
	033 Call Array.Copy, X0, X1, X2, X3, X4
	034 Return 
	035 Move X0, 0xDA3000
	036 Move X0, [X0+1400]
	037 Call 0x1C17D08
	038 Call 0x1C17F10
	039 Move X19, X0
	040 Move X0, 0xDC3000
	041 Move X0, [X0+1888]
	042 Call 0x1C17D08
	043 Move X1, X0
	044 Move X0, X19
	045 Move X2, X31
	046 Call ArgumentException..ctor, X0, X1
	047 Move X0, 0xDA3000
	048 Move X0, [X0+1400]
	049 Call 0x1C17D08
	050 Call 0x1C17F10
	051 Move X19, X0
	052 Move X0, 0xDC4000
	053 Move X0, [X0+776]
	054 Call 0x1C17D08
	055 Move X20, X0
	056 Move X0, 0xDC3000
	057 Move X0, [X0+1600]
	058 Call 0x1C17D08
	059 Move X2, X0
	060 Move X0, X19
	061 Move X1, X20
	062 Move X3, X31
	063 Call ArgumentException..ctor, X0, X1, X2
	064 Move X0, 0xDD2000
	065 Move X0, [X0+1544]
	066 Call 0x1C17D08
	067 Move X1, X0
	068 Move X0, X19
	069 Call 0x1C17DEC

Method: System.Void EnsureCapacity(System.Int32 min)

Disassembly:
	0x033598F4 BL 0x1C16DEC
	0x033598F8 STP X30, X21, [X31 - 0x20]!
	0x033598FC STP X20, X19, [X31 + 0x10]
	0x03359900 ADRP X21, 0x1083000
	0x03359904 ADRP X19, 0xDD1000
	0x03359908 LDRB W8, [X21 + 0xE00]
	0x0335990C LDR X19, [X19 + 0x638]
	0x03359910 MOV X20, X0
	0x03359914 TBNZ X8, 0x0, 0x3359938
	0x03359918 ADRP X0, 0xDC7000
	0x0335991C LDR X0, [X0 + 0xBA0]
	0x03359920 BL 0x1C16CF4
	0x03359924 ADRP X0, 0xDD1000
	0x03359928 LDR X0, [X0 + 0x638]
	0x0335992C BL 0x1C16CF4
	0x03359930 MOVZ W8, 0x1
	0x03359934 STRB W8, [X21 + 0xE00]
	0x03359938 LDR X0, [X19]
	0x0335993C LDR X21, [X20 + 0x28]
	0x03359940 BL 0x1C16F10
	0x03359944 MOV X19, X0
	0x03359948 BL 0x3351F5C
	0x0335994C STR X21, [X19 + 0x28]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {27}
	005 Move X8, [X8+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X12, [X0]
	008 Move W9, W8
	009 ShiftRight W9, 31
	010 And W9, W9, 0x3FFFFFFF
	011 Move TEMP, 0x80100000
	012 Not TEMP
	013 Move W10, TEMP
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Move W11, 4
	016 NotImplemented "Instruction CSEL not yet implemented."
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X3, [X12+648]
	019 Move X2, [X12+656]
	020 NotImplemented "Instruction CSEL not yet implemented."
	021 NotImplemented "Instruction CMP not yet implemented."
	022 NotImplemented "Instruction CSEL not yet implemented."
	023 Move X30, [X31+16]
	024 CallNoReturn X3
	025 Move X30, [X31+16]
	026 Return 
	027 Call 0x1C17F20

Method: System.Collections.IEnumerator GetEnumerator()

Disassembly:
	0x03359CBC B.GE 0x3359D3C
	0x03359CC0 LDR X8, [X0 + 0x10]
	0x03359CC4 ADD W9, W20, 0x1
	0x03359CC8 STR W9, [X19 + 0x18]
	0x03359CCC CBZ X8, 0x3359DE4
	0x03359CD0 LDR W10, [X8 + 0x18]
	0x03359CD4 CMP W9, W10
	0x03359CD8 B.CS 0x3359E30
	0x03359CDC ADD X8, X8, W9, 0x3, SXTW
	0x03359CE0 LDR X8, [X8 + 0x20]
	0x03359CE4 STR X8, [X19 + 0x20]
	0x03359CE8 B 0x3359D34
	0x03359CEC LDR X8, [X0]
	0x03359CF0 LDR X9, [X8 + 0x298]
	0x03359CF4 LDR X1, [X8 + 0x2A0]
	0x03359CF8 BLR X9
	0x03359CFC MOV W8, W0
	0x03359D00 LDR X0, [X19 + 0x10]
	0x03359D04 SUB W8, W8, 0x1
	0x03359D08 CMP W20, W8
	0x03359D0C B.GE 0x3359D60
	0x03359D10 LDR W8, [X19 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1084000
	006 Move X21, 0xDD2000
	007 Move W8, [X20+3579]
	008 Move X21, [X21+1552]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDD2000
	015 Move X0, [X0+1552]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3579], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X19
	022 Move X20, X0
	023 Call ArrayListEnumeratorSimple..ctor, X0, X1
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: System.Int32 IndexOf(System.Object value)

Disassembly:
	0x03359E1C LDR X0, [X0 + 0x6B0]
	0x03359E20 BL 0x1C16D08
	0x03359E24 MOV X1, X0
	0x03359E28 MOV X0, X19
	0x03359E2C BL 0x1C16DEC
	0x03359E30 BL 0x1C16F28

ISIL:
	001 Move X8, [X0+16]
	002 Move W3, [X0+24]
	003 Move W2, W31
	004 Move X4, X31
	005 Move X0, X8
	006 Call Array.IndexOf, X0, X1, X2, X3
	007 Return X0

Method: System.Void Insert(System.Int32 index, System.Object value)

Disassembly:
	0x03359E34 STP X30, X21, [X31 - 0x20]!
	0x03359E38 STP X20, X19, [X31 + 0x10]
	0x03359E3C ADRP X20, 0x1083000
	0x03359E40 ADRP X21, 0xDD1000
	0x03359E44 LDRB W8, [X20 + 0xE03]
	0x03359E48 LDR X21, [X21 + 0x610]
	0x03359E4C MOV X19, X0
	0x03359E50 TBNZ X8, 0x0, 0x3359E68
	0x03359E54 ADRP X0, 0xDD1000
	0x03359E58 LDR X0, [X0 + 0x610]
	0x03359E5C BL 0x1C16CF4
	0x03359E60 MOVZ W8, 0x1
	0x03359E64 STRB W8, [X20 + 0xE03]
	0x03359E68 LDR X0, [X21]
	0x03359E6C LDR X20, [X19 + 0x20]
	0x03359E70 LDR W8, [X0 + 0xE0]
	0x03359E74 CBNZ W8, 0x3359E80
	0x03359E78 BL 0x1C16DFC
	0x03359E7C LDR X0, [X21]
	0x03359E80 LDR X8, [X0 + 0xB8]
	0x03359E84 LDR X8, [X8]
	0x03359E88 CMP X8, X20
	0x03359E8C B.EQ 0x3359EA0
	0x03359E90 MOV X0, X20
	0x03359E94 LDP X20, X19, [X31 + 0x10]
	0x03359E98 LDP X30, X21, [X31], #0x20
	0x03359E9C RET
	0x03359EA0 ADRP X0, 0xD9A000
	0x03359EA4 LDR W19, [X19 + 0x18]
	0x03359EA8 LDR X0, [X0 + 0x5B0]
	0x03359EAC BL 0x1C16D08
	0x03359EB0 BL 0x1C16F10
	0x03359EB4 ADDS W31, W19, 0x1
	0x03359EB8 MOV X19, X0
	0x03359EBC B.NE 0x3359ECC
	0x03359EC0 ADRP X0, 0xDC5000
	0x03359EC4 LDR X0, [X0 + 0xC48]
	0x03359EC8 B 0x3359ED4
	0x03359ECC ADRP X0, 0xDC5000
	0x03359ED0 LDR X0, [X0 + 0xC40]
	0x03359ED4 BL 0x1C16D08
	0x03359ED8 MOV X1, X0
	0x03359EDC MOV X0, X19
	0x03359EE0 MOV X2, X31
	0x03359EE4 BL 0x337DF1C
	0x03359EE8 ADRP X0, 0xDD1000
	0x03359EEC LDR X0, [X0 + 0x6B8]
	0x03359EF0 BL 0x1C16D08
	0x03359EF4 MOV X1, X0
	0x03359EF8 MOV X0, X19
	0x03359EFC BL 0x1C16DEC
	0x03359F00 STR X30, [X31 - 0x20]!
	0x03359F04 STP X20, X19, [X31 + 0x10]
	0x03359F08 ADRP X20, 0x1083000
	0x03359F0C LDRB W8, [X20 + 0xE04]
	0x03359F10 MOV X19, X0
	0x03359F14 TBNZ X8, 0x0, 0x3359F2C
	0x03359F18 ADRP X0, 0xDD1000
	0x03359F1C LDR X0, [X0 + 0x610]
	0x03359F20 BL 0x1C16CF4
	0x03359F24 MOVZ W8, 0x1
	0x03359F28 STRB W8, [X20 + 0xE04]
	0x03359F2C LDR X8, [X19 + 0x10]
	0x03359F30 CBZ X8, 0x3359F80
	0x03359F34 LDR W9, [X19 + 0x1C]
	0x03359F38 LDR W8, [X8 + 0x1C]
	0x03359F3C CMP W9, W8
	0x03359F40 B.NE 0x3359F84
	0x03359F44 ADRP X20, 0xDD1000
	0x03359F48 LDR X20, [X20 + 0x610]
	0x03359F4C LDR X0, [X20]
	0x03359F50 LDR W8, [X0 + 0xE0]
	0x03359F54 CBNZ W8, 0x3359F60
	0x03359F58 BL 0x1C16DFC
	0x03359F5C LDR X0, [X20]
	0x03359F60 LDR X8, [X0 + 0xB8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move TEMP, X1
	007 And TEMP, TEMP, -2147483648
	008 Compare TEMP, -2147483648
	009 JumpIfEqual {56}
	010 Move W8, [X0+24]
	011 Move W21, W1
	012 Move X19, X0
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X9, [X19+16]
	015 Compare X9, 0
	016 JumpIfEqual {79}
	017 Move W9, [X9+24]
	018 Move X20, X2
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Add W1, W8, 1
	021 Move X0, X19
	022 Call ArrayList.EnsureCapacity, X0, X1
	023 Move W8, [X19+24]
	024 Subtract W4, W8, W21
	025 Move X0, [X19+16]
	026 Add W3, W21, 1
	027 Move W1, W21
	028 Move X5, X31
	029 Move X2, X0
	030 Call Array.Copy, X0, X1, X2, X3, X4
	031 Move X22, [X19+16]
	032 Compare X22, 0
	033 JumpIfEqual {79}
	034 Compare X20, 0
	035 JumpIfEqual {42}
	036 Move X8, [X22]
	037 Move X0, X20
	038 Move X1, [X8+64]
	039 Call 0x1C17E00
	040 Compare X0, 0
	041 JumpIfEqual {81}
	042 Move W8, [X22+24]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Add X8, X22, W21
	045 Move [X8+32], X20
	046 Move V0, [X19+24]
	047 NotImplemented "Instruction MOVI not yet implemented."
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Add S0, S0, S1
	051 Move [X19+24], D0
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X30, [X31+48]
	055 Return 
	056 Move X0, 0xDA3000
	057 Move X0, [X0+1888]
	058 Call 0x1C17D08
	059 Call 0x1C17F10
	060 Move X19, X0
	061 Move X0, 0xDA6000
	062 Move X0, [X0+304]
	063 Call 0x1C17D08
	064 Move X20, X0
	065 Move X0, 0xDD2000
	066 Move X0, [X0+1568]
	067 Call 0x1C17D08
	068 Move X2, X0
	069 Move X0, X19
	070 Move X1, X20
	071 Move X3, X31
	072 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	073 Move X0, 0xDD2000
	074 Move X0, [X0+1576]
	075 Call 0x1C17D08
	076 Move X1, X0
	077 Move X0, X19
	078 Call 0x1C17DEC
	079 Call 0x1C17F20
	080 Call 0x1C17F28
	081 Call 0x1C17F44
	082 Move X1, X31
	083 Call 0x1C17DEC

Method: System.Void InsertRange(System.Int32 index, System.Collections.ICollection c)

Disassembly:
	0x03359F64 MOVN W9, 0x0
	0x03359F68 LDR X8, [X8]
	0x03359F6C STR W9, [X19 + 0x18]
	0x03359F70 STR X8, [X19 + 0x20]
	0x03359F74 LDP X20, X19, [X31 + 0x10]
	0x03359F78 LDR X30, [X31], #0x20
	0x03359F7C RET
	0x03359F80 BL 0x1C16F20
	0x03359F84 ADRP X0, 0xD9A000
	0x03359F88 LDR X0, [X0 + 0x5B0]
	0x03359F8C BL 0x1C16D08
	0x03359F90 BL 0x1C16F10
	0x03359F94 MOV X19, X0
	0x03359F98 ADRP X0, 0xDC4000
	0x03359F9C LDR X0, [X0 + 0x288]
	0x03359FA0 BL 0x1C16D08
	0x03359FA4 MOV X1, X0
	0x03359FA8 MOV X0, X19
	0x03359FAC MOV X2, X31
	0x03359FB0 BL 0x337DF1C
	0x03359FB4 ADRP X0, 0xDD1000
	0x03359FB8 LDR X0, [X0 + 0x6C0]
	0x03359FBC BL 0x1C16D08
	0x03359FC0 MOV X1, X0
	0x03359FC4 MOV X0, X19
	0x03359FC8 BL 0x1C16DEC
	0x03359FCC STP X30, X21, [X31 - 0x20]!
	0x03359FD0 STP X20, X19, [X31 + 0x10]
	0x03359FD4 ADRP X19, 0x1083000
	0x03359FD8 ADRP X21, 0xDA0000
	0x03359FDC ADRP X20, 0xDD1000
	0x03359FE0 LDRB W8, [X19 + 0xE05]
	0x03359FE4 LDR X21, [X21 + 0xCC0]
	0x03359FE8 LDR X20, [X20 + 0x610]
	0x03359FEC TBNZ X8, 0x0, 0x335A010
	0x03359FF0 ADRP X0, 0xDD1000
	0x03359FF4 LDR X0, [X0 + 0x610]
	0x03359FF8 BL 0x1C16CF4
	0x03359FFC ADRP X0, 0xDA0000
	0x0335A000 LDR X0, [X0 + 0xCC0]
	0x0335A004 BL 0x1C16CF4
	0x0335A008 MOVZ W8, 0x1
	0x0335A00C STRB W8, [X19 + 0xE05]
	0x0335A010 LDR X0, [X21]
	0x0335A014 BL 0x1C16F10
	0x0335A018 MOV X1, X31
	0x0335A01C MOV X19, X0
	0x0335A020 BL 0x33BDD8C
	0x0335A024 LDR X8, [X20]
	0x0335A028 LDR X8, [X8 + 0xB8]
	0x0335A02C STR X19, [X8]
	0x0335A030 LDP X20, X19, [X31 + 0x10]
	0x0335A034 LDP X30, X21, [X31], #0x20
	0x0335A038 RET
	0x0335A03C STP X30, X21, [X31 - 0x20]!
	0x0335A040 STP X20, X19, [X31 + 0x10]
	0x0335A044 ADRP X20, 0x1082000
	0x0335A048 ADRP X21, 0xDC9000
	0x0335A04C ADRP X19, 0xDD0000
	0x0335A050 LDRB W8, [X20 + 0xE06]
	0x0335A054 LDR X21, [X21 + 0xDB8]
	0x0335A058 LDR X19, [X19 + 0x6C8]
	0x0335A05C TBNZ X8, 0x0, 0x335A080
	0x0335A060 ADRP X0, 0xDC9000
	0x0335A064 LDR X0, [X0 + 0xDB8]
	0x0335A068 BL 0x1C16CF4
	0x0335A06C ADRP X0, 0xDD0000
	0x0335A070 LDR X0, [X0 + 0x6C8]
	0x0335A074 BL 0x1C16CF4
	0x0335A078 MOVZ W8, 0x1
	0x0335A07C STRB W8, [X20 + 0xE06]
	0x0335A080 LDR X8, [X21]
	0x0335A084 LDR X1, [X19]
	0x0335A088 LDP X20, X19, [X31 + 0x10]
	0x0335A08C LDR X0, [X8 + 0xB8]
	0x0335A090 LDP X30, X21, [X31], #0x20
	0x0335A094 B 0x22129EC
	0x0335A098 MOV X1, X31
	0x0335A09C B 0x33BDD8C
	0x0335A0A0 FMOV S0, 1
	0x0335A0A4 MOV W1, W31
	0x0335A0A8 B 0x335A0AC
	0x0335A0AC SUB X31, X31, 0x40
	0x0335A0B0 STR D8, [X31 + 0x10]
	0x0335A0B4 STP X30, X21, [X31 + 0x20]
	0x0335A0B8 STP X20, X19, [X31 + 0x30]
	0x0335A0BC ADRP X21, 0x1082000
	0x0335A0C0 LDRB W8, [X21 + 0xE07]
	0x0335A0C4 MOV V8.16B, V0.16B
	0x0335A0C8 MOV W20, W1
	0x0335A0CC MOV X19, X0
	0x0335A0D0 TBNZ X8, 0x0, 0x335A0F4
	0x0335A0D4 ADRP X0, 0xDC4000
	0x0335A0D8 LDR X0, [X0 + 0x548]
	0x0335A0DC BL 0x1C16CF4
	0x0335A0E0 ADRP X0, 0xDD0000
	0x0335A0E4 LDR X0, [X0 + 0x6D0]
	0x0335A0E8 BL 0x1C16CF4
	0x0335A0EC MOVZ W8, 0x1
	0x0335A0F0 STRB W8, [X21 + 0xE07]
	0x0335A0F4 MOV X0, X19
	0x0335A0F8 MOV X1, X31
	0x0335A0FC BL 0x33BDD8C
	0x0335A100 TBNZ X20, 0x1F, 0x335A1F4
	0x0335A104 ADRP X8, 0xFFFFFFFFFD790000
	0x0335A108 LDR V0, [X8 + 0xBC]
	0x0335A10C FCMP S8, S0
	0x0335A110 B.LT 0x335A23C
	0x0335A114 FMOV S0, 1
	0x0335A118 FCMP S8, S0
	0x0335A11C B.HI 0x335A23C
	0x0335A120 ADRP X8, 0xFFFFFFFFFD790000
	0x0335A124 LDR V0, [X8 + 0x20]
	0x0335A128 ADRP X8, 0xFFFFFFFFFD793000
	0x0335A12C LDR V1, [X8 + 0xAB8]
	0x0335A130 SCVTF S2, W20
	0x0335A134 FMUL S0, S8, S0
	0x0335A138 FDIV S8, S2, S0
	0x0335A13C FCVT S2, S8
	0x0335A140 FCMP D2, D1
	0x0335A144 STR S0, [X19 + 0x24]
	0x0335A148 B.GT 0x335A2F0
	0x0335A14C ADRP X21, 0xDD0000
	0x0335A150 LDR X21, [X21 + 0x6D0]
	0x0335A154 FMOV S0, 3
	0x0335A158 FCMP S8, S0
	0x0335A15C B.LE 0x335A19C
	0x0335A160 ADRP X8, 0xDC4000
	0x0335A164 LDR X8, [X8 + 0x548]
	0x0335A168 LDR X0, [X8]
	0x0335A16C LDR W8, [X0 + 0xE0]
	0x0335A170 CBNZ W8, 0x335A178
	0x0335A174 BL 0x1C16DFC
	0x0335A178 MOVZ W8, 0x7F800000
	0x0335A17C FMOV S0, W8
	0x0335A180 FCVTZS W9, S8
	0x0335A184 FCMP S8, S0
	0x0335A188 MOVZ W8, 0x80000000
	0x0335A18C CSEL W0, W8, W9, EQ
	0x0335A190 BL 0x335042C
	0x0335A194 MOV W20, W0
	0x0335A198 B 0x335A1A0
	0x0335A19C MOVZ W20, 0x3
	0x0335A1A0 LDR X0, [X21]
	0x0335A1A4 MOV W1, W20
	0x0335A1A8 BL 0x1C16D6C
	0x0335A1AC LDR V0, [X19 + 0x24]
	0x0335A1B0 MOVZ W8, 0x7F800000
	0x0335A1B4 SCVTF S1, W20
	0x0335A1B8 FMOV S2, W8
	0x0335A1BC FMUL S0, S0, S1

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x1084000
	009 Move W8, [X22+3580]
	010 Move X21, X2
	011 Move W20, W1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xDA2000
	018 Move X0, [X0+752]
	019 Call 0x1C17CF4
	020 Move X0, 0xD9B000
	021 Move X0, [X0+2512]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3580], W8
	025 Compare X21, 0
	026 JumpIfEqual {138}
	027 Move TEMP, X20
	028 And TEMP, TEMP, -2147483648
	029 Compare TEMP, -2147483648
	030 JumpIfEqual {121}
	031 Move W8, [X19+24]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X23, 0xDA2000
	034 Move X8, [X21]
	035 Move X23, [X23+752]
	036 NotImplemented "Instruction LDRH not yet implemented."
	037 Move X1, [X23]
	038 Compare X9, 0
	039 JumpIfEqual {46}
	040 Move X10, [X8+176]
	041 Add X10, X10, 8
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Subtract X9, X9, 1
	045 Add X10, X10, 16
	046 Move W2, 1
	047 Move X0, X21
	048 Call 0x1C5D788
	049 Move W9, [X10]
	050 Add W9, W9, 1
	051 Add X8, X8, W9
	052 Add X0, X8, 312
	053 Move X8, [X0]
	054 Move X1, [X0+8]
	055 Move X0, X21
	056 NotImplemented "Instruction BLR not yet implemented."
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move W8, [X19+24]
	059 Move X24, 0xD9A000
	060 Move X24, [X24+2512]
	061 Move W22, W0
	062 Add W1, W8, W0
	063 Move X0, X19
	064 Call ArrayList.EnsureCapacity, X0, X1
	065 Move W8, [X19+24]
	066 Subtract W4, W8, W20
	067 Move X0, [X19+16]
	068 Add W3, W22, W20
	069 Move W1, W20
	070 Move X5, X31
	071 Move X2, X0
	072 Call Array.Copy, X0, X1, X2, X3, X4
	073 Move X0, [X24]
	074 Move W1, W22
	075 Call 0x1C17D6C
	076 Move X8, [X21]
	077 Move X1, [X23]
	078 Move X23, X0
	079 NotImplemented "Instruction LDRH not yet implemented."
	080 Compare X9, 0
	081 JumpIfEqual {88}
	082 Move X10, [X8+176]
	083 Add X10, X10, 8
	084 NotImplemented "Instruction LDUR not yet implemented."
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Subtract X9, X9, 1
	087 Add X10, X10, 16
	088 Move X0, X21
	089 Move W2, W31
	090 Call 0x1C5D788
	091 NotImplemented "Instruction LDRSW not yet implemented."
	092 Add X8, X8, X9
	093 Add X0, X8, 312
	094 Move X8, [X0]
	095 Move X3, [X0+8]
	096 Move X0, X21
	097 Move X1, X23
	098 Move W2, W31
	099 NotImplemented "Instruction BLR not yet implemented."
	100 Compare X23, 0
	101 JumpIfEqual {161}
	102 Move X1, [X19+16]
	103 Move X0, X23
	104 Move W2, W20
	105 Move X3, X31
	106 Call Array.CopyTo, X0, X1, X2
	107 Move W8, [X19+24]
	108 Move W9, [X19+28]
	109 Add W8, W8, W22
	110 Add W9, W9, 1
	111 Move [X19+24], W8
	112 Move [X19+28], W9
	113 Move X20, [X31+48]
	114 Move X19, [X31+56]
	115 Move X22, [X31+32]
	116 Move X21, [X31+40]
	117 Move X24, [X31+16]
	118 Move X23, [X31+24]
	119 Move X30, [X31+64]
	120 Return 
	121 Move X0, 0xDA2000
	122 Move X0, [X0+1888]
	123 Call 0x1C17D08
	124 Call 0x1C17F10
	125 Move X19, X0
	126 Move X0, 0xDA5000
	127 Move X0, [X0+304]
	128 Call 0x1C17D08
	129 Move X20, X0
	130 Move X0, 0xDC2000
	131 Move X0, [X0+1632]
	132 Call 0x1C17D08
	133 Move X2, X0
	134 Move X0, X19
	135 Move X1, X20
	136 Move X3, X31
	137 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	138 Move X0, 0xD9F000
	139 Move X0, [X0+1320]
	140 Call 0x1C17D08
	141 Call 0x1C17F10
	142 Move X19, X0
	143 Move X0, 0xDCF000
	144 Move X0, [X0+1336]
	145 Call 0x1C17D08
	146 Move X20, X0
	147 Move X0, 0xDD1000
	148 Move X0, [X0+1496]
	149 Call 0x1C17D08
	150 Move X2, X0
	151 Move X0, X19
	152 Move X1, X20
	153 Move X3, X31
	154 Call ArgumentNullException..ctor, X0, X1, X2
	155 Move X0, 0xDD1000
	156 Move X0, [X0+1584]
	157 Call 0x1C17D08
	158 Move X1, X0
	159 Move X0, X19
	160 Call 0x1C17DEC
	161 Call 0x1C17F20

Method: System.Collections.ArrayList ReadOnly(System.Collections.ArrayList list)

Disassembly:
	0x0335A1C0 FCVTZS W8, S0
	0x0335A1C4 FCMP S0, S2
	0x0335A1C8 MOVZ W9, 0x80000000
	0x0335A1CC CSEL W8, W9, W8, EQ
	0x0335A1D0 STR X0, [X19 + 0x10]
	0x0335A1D4 STR W8, [X19 + 0x20]
	0x0335A1D8 BL 0x1C16D44
	0x0335A1DC STRB W31, [X19 + 0x2C]
	0x0335A1E0 LDP X20, X19, [X31 + 0x30]
	0x0335A1E4 LDP X30, X21, [X31 + 0x20]
	0x0335A1E8 LDR V8, [X31 + 0x10]
	0x0335A1EC ADD X31, X31, 0x40
	0x0335A1F0 RET
	0x0335A1F4 ADRP X0, 0xDA1000
	0x0335A1F8 LDR X0, [X0 + 0x760]
	0x0335A1FC BL 0x1C16D08
	0x0335A200 BL 0x1C16F10
	0x0335A204 MOV X19, X0
	0x0335A208 ADRP X0, 0xDC3000
	0x0335A20C LDR X0, [X0 + 0x58]
	0x0335A210 BL 0x1C16D08
	0x0335A214 MOV X20, X0
	0x0335A218 ADRP X0, 0xDC1000
	0x0335A21C LDR X0, [X0 + 0x670]
	0x0335A220 BL 0x1C16D08
	0x0335A224 MOV X2, X0
	0x0335A228 MOV X0, X19
	0x0335A22C MOV X1, X20
	0x0335A230 MOV X3, X31
	0x0335A234 BL 0x3311888
	0x0335A238 B 0x335A334
	0x0335A23C ORR X8, X31, 0x9999999999999999
	0x0335A240 MOVK X8, 0x999A
	0x0335A244 MOVK X8, 0x3FB90000
	0x0335A248 STR X8, [X31 + 0x18]
	0x0335A24C ADRP X19, 0xD9C000
	0x0335A250 LDR X19, [X19 + 0x978]
	0x0335A254 MOV X0, X19
	0x0335A258 BL 0x1C16D08
	0x0335A25C ADD X1, X31, 0x18
	0x0335A260 BL 0x1C16E04

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1083000
	005 Move W8, [X20+3581]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDD1000
	012 Move X0, [X0+1592]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3581], W8
	016 Compare X19, 0
	017 JumpIfEqual {30}
	018 Move X8, 0xDD1000
	019 Move X8, [X8+1592]
	020 Move X0, [X8]
	021 Call 0x1C17F10
	022 Move X20, X0
	023 Call ArrayList..ctor, X0
	024 Move [X20+40], X19
	025 Move X0, X20
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return X0
	030 Move X0, 0xD9F000
	031 Move X0, [X0+1320]
	032 Call 0x1C17D08
	033 Call 0x1C17F10
	034 Move X19, X0
	035 Move X0, 0xDC3000
	036 Move X0, [X0+448]
	037 Call 0x1C17D08
	038 Move X1, X0
	039 Move X0, X19
	040 Move X2, X31
	041 Call ArgumentNullException..ctor, X0, X1
	042 Move X0, 0xDD1000
	043 Move X0, [X0+1600]
	044 Call 0x1C17D08
	045 Move X1, X0
	046 Move X0, X19
	047 Call 0x1C17DEC

Method: System.Void Remove(System.Object obj)

Disassembly:
	0x0335A288 LDR X0, [X0 + 0x6D8]
	0x0335A28C BL 0x1C16D08
	0x0335A290 MOV X1, X20
	0x0335A294 MOV X2, X19
	0x0335A298 MOV X3, X31
	0x0335A29C BL 0x320A264
	0x0335A2A0 MOV X19, X0
	0x0335A2A4 ADRP X0, 0xDA1000
	0x0335A2A8 LDR X0, [X0 + 0x760]
	0x0335A2AC BL 0x1C16D08
	0x0335A2B0 BL 0x1C16F10
	0x0335A2B4 MOV X20, X0
	0x0335A2B8 ADRP X0, 0xDD0000
	0x0335A2BC LDR X0, [X0 + 0x6E0]
	0x0335A2C0 BL 0x1C16D08
	0x0335A2C4 MOV X1, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Move X19, X0
	005 Move X9, [X8+920]
	006 Move X2, [X8+928]
	007 NotImplemented "Instruction BLR not yet implemented."
	008 Move TEMP, X0
	009 And TEMP, TEMP, -2147483648
	010 Compare TEMP, -2147483648
	011 JumpIfEqual {20}
	012 Move X8, [X19]
	013 Move W1, W0
	014 Move X0, X19
	015 Move X3, [X8+984]
	016 Move X2, [X8+992]
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 CallNoReturn X3
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Return 

Method: System.Void RemoveAt(System.Int32 index)

Disassembly:
	0x0335A2C8 MOV X0, X20
	0x0335A2CC MOV X2, X19
	0x0335A2D0 MOV X3, X31
	0x0335A2D4 BL 0x3311888
	0x0335A2D8 ADRP X0, 0xDD0000
	0x0335A2DC LDR X0, [X0 + 0x6E8]
	0x0335A2E0 BL 0x1C16D08
	0x0335A2E4 MOV X1, X0
	0x0335A2E8 MOV X0, X20
	0x0335A2EC BL 0x1C16DEC
	0x0335A2F0 ADRP X0, 0xDA1000
	0x0335A2F4 LDR X0, [X0 + 0x578]
	0x0335A2F8 BL 0x1C16D08
	0x0335A2FC BL 0x1C16F10
	0x0335A300 MOV X19, X0
	0x0335A304 ADRP X0, 0xDD0000
	0x0335A308 LDR X0, [X0 + 0x260]
	0x0335A30C BL 0x1C16D08
	0x0335A310 MOV X20, X0
	0x0335A314 ADRP X0, 0xDC3000
	0x0335A318 LDR X0, [X0 + 0x58]
	0x0335A31C BL 0x1C16D08
	0x0335A320 MOV X2, X0
	0x0335A324 MOV X0, X19
	0x0335A328 MOV X1, X20
	0x0335A32C MOV X3, X31
	0x0335A330 BL 0x330E16C
	0x0335A334 ADRP X0, 0xDD0000
	0x0335A338 LDR X0, [X0 + 0x6E8]
	0x0335A33C BL 0x1C16D08
	0x0335A340 MOV X1, X0
	0x0335A344 MOV X0, X19
	0x0335A348 BL 0x1C16DEC
	0x0335A34C FMOV S0, 1
	0x0335A350 B 0x335A0AC
	0x0335A354 STR X30, [X31 - 0x20]!
	0x0335A358 STP X20, X19, [X31 + 0x10]
	0x0335A35C MOV X19, X2
	0x0335A360 MOV X20, X0
	0x0335A364 BL 0x335A0AC
	0x0335A368 STR X19, [X20 + 0x40]
	0x0335A36C LDP X20, X19, [X31 + 0x10]
	0x0335A370 LDR X30, [X31], #0x20
	0x0335A374 RET
	0x0335A378 STR X30, [X31 - 0x20]!
	0x0335A37C STP X20, X19, [X31 + 0x10]
	0x0335A380 MOV X19, X1
	0x0335A384 FMOV S0, 1
	0x0335A388 MOV W1, W31
	0x0335A38C MOV X20, X0
	0x0335A390 BL 0x335A0AC
	0x0335A394 STR X19, [X20 + 0x40]
	0x0335A398 LDP X20, X19, [X31 + 0x10]
	0x0335A39C LDR X30, [X31], #0x20
	0x0335A3A0 RET
	0x0335A3A4 STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move TEMP, X1
	005 And TEMP, TEMP, -2147483648
	006 Compare TEMP, -2147483648
	007 JumpIfEqual {35}
	008 Move W8, [X0+24]
	009 Move W3, W1
	010 Move X19, X0
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Subtract W8, W8, 1
	013 Subtract W4, W8, W3
	014 Move [X19+24], W8
	015 Move X0, [X19+16]
	016 Add W1, W3, 1
	017 Move X5, X31
	018 Move X2, X0
	019 Call Array.Copy, X0, X1, X2, X3, X4
	020 Move W8, [X19+24]
	021 Move X9, [X19+16]
	022 Compare X9, 0
	023 JumpIfEqual {58}
	024 Move W10, [X9+24]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Add X8, X9, W8
	027 Move [X8+32], X31
	028 Move W8, [X19+28]
	029 Add W8, W8, 1
	030 Move [X19+28], W8
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return 
	035 Move X0, 0xDA2000
	036 Move X0, [X0+1888]
	037 Call 0x1C17D08
	038 Call 0x1C17F10
	039 Move X19, X0
	040 Move X0, 0xDA5000
	041 Move X0, [X0+304]
	042 Call 0x1C17D08
	043 Move X20, X0
	044 Move X0, 0xDC2000
	045 Move X0, [X0+1632]
	046 Call 0x1C17D08
	047 Move X2, X0
	048 Move X0, X19
	049 Move X1, X20
	050 Move X3, X31
	051 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	052 Move X0, 0xDD1000
	053 Move X0, [X0+1608]
	054 Call 0x1C17D08
	055 Move X1, X0
	056 Move X0, X19
	057 Call 0x1C17DEC
	058 Call 0x1C17F20
	059 Call 0x1C17F28

Method: System.Void RemoveRange(System.Int32 index, System.Int32 count)

Disassembly:
	0x0335A3A8 STP X20, X19, [X31 + 0x10]
	0x0335A3AC FMOV S0, 1
	0x0335A3B0 MOV X19, X2
	0x0335A3B4 MOV X20, X0
	0x0335A3B8 BL 0x335A0AC
	0x0335A3BC STR X19, [X20 + 0x40]
	0x0335A3C0 LDP X20, X19, [X31 + 0x10]
	0x0335A3C4 LDR X30, [X31], #0x20
	0x0335A3C8 RET
	0x0335A3CC STP X30, X21, [X31 - 0x20]!
	0x0335A3D0 STP X20, X19, [X31 + 0x10]
	0x0335A3D4 ADRP X21, 0x1082000
	0x0335A3D8 LDRB W8, [X21 + 0xE08]
	0x0335A3DC MOV X19, X1
	0x0335A3E0 MOV X20, X0
	0x0335A3E4 TBNZ X8, 0x0, 0x335A3FC
	0x0335A3E8 ADRP X0, 0xDC4000
	0x0335A3EC LDR X0, [X0 + 0x628]
	0x0335A3F0 BL 0x1C16CF4
	0x0335A3F4 MOVZ W8, 0x1
	0x0335A3F8 STRB W8, [X21 + 0xE08]
	0x0335A3FC MOV X0, X20
	0x0335A400 MOV X1, X31
	0x0335A404 BL 0x33BDD8C
	0x0335A408 BL 0x335A03C
	0x0335A40C CBZ X0, 0x335A430
	0x0335A410 ADRP X8, 0xDC4000
	0x0335A414 LDR X8, [X8 + 0x628]
	0x0335A418 MOV X1, X20
	0x0335A41C MOV X2, X19
	0x0335A420 LDP X20, X19, [X31 + 0x10]
	0x0335A424 LDR X3, [X8]
	0x0335A428 LDP X30, X21, [X31], #0x20
	0x0335A42C B 0x29969F8
	0x0335A430 BL 0x1C16F20
	0x0335A434 STP X30, X21, [X31 - 0x20]!
	0x0335A438 STP X20, X19, [X31 + 0x10]
	0x0335A43C LDR X8, [X0]
	0x0335A440 MOV W21, W2
	0x0335A444 MOV X19, X4
	0x0335A448 MOV X20, X3
	0x0335A44C LDR X9, [X8 + 0x308]
	0x0335A450 LDR X2, [X8 + 0x310]
	0x0335A454 BLR X9
	0x0335A458 AND W0, W0, 0x7FFFFFFF
	0x0335A45C MOVZ W8, 0x65
	0x0335A460 MUL W8, W0, W8
	0x0335A464 SUB W9, W21, 0x1
	0x0335A468 UDIV W10, W8, W9
	0x0335A46C MSUB W8, W10, W9, W8
	0x0335A470 ADD W8, W8, 0x1
	0x0335A474 STR W0, [X20]
	0x0335A478 STR W8, [X19]
	0x0335A47C LDP X20, X19, [X31 + 0x10]
	0x0335A480 LDP X30, X21, [X31], #0x20
	0x0335A484 RET
	0x0335A488 MOVZ W3, 0x1
	0x0335A48C B 0x335A490
	0x0335A490 STP X29, X30, [X31 - 0x60]!
	0x0335A494 STP X28, X27, [X31 + 0x10]
	0x0335A498 STP X26, X25, [X31 + 0x20]
	0x0335A49C STP X24, X23, [X31 + 0x30]
	0x0335A4A0 STP X22, X21, [X31 + 0x40]
	0x0335A4A4 STP X20, X19, [X31 + 0x50]
	0x0335A4A8 CBZ X1, 0x335A740
	0x0335A4AC LDR W9, [X0 + 0x18]
	0x0335A4B0 LDR W8, [X0 + 0x20]
	0x0335A4B4 MOV W22, W3
	0x0335A4B8 MOV X21, X2
	0x0335A4BC MOV X20, X1
	0x0335A4C0 MOV X19, X0
	0x0335A4C4 CMP W9, W8
	0x0335A4C8 B.GE 0x335A4EC
	0x0335A4CC CMP W9, 0x65
	0x0335A4D0 B.LT 0x335A4F4
	0x0335A4D4 LDR W9, [X19 + 0x1C]
	0x0335A4D8 CMP W9, W8
	0x0335A4DC B.LE 0x335A4F4
	0x0335A4E0 MOV X0, X19
	0x0335A4E4 BL 0x335B31C
	0x0335A4E8 B 0x335A4F4
	0x0335A4EC MOV X0, X19
	0x0335A4F0 BL 0x335B190
	0x0335A4F4 LDR X8, [X19 + 0x10]
	0x0335A4F8 CBZ X8, 0x335A73C
	0x0335A4FC LDR X9, [X19]
	0x0335A500 LDR X23, [X8 + 0x18]
	0x0335A504 MOV X0, X19
	0x0335A508 MOV X1, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move TEMP, X1
	005 And TEMP, TEMP, -2147483648
	006 Compare TEMP, -2147483648
	007 JumpIfEqual {49}
	008 Move TEMP, X2
	009 And TEMP, TEMP, -2147483648
	010 Compare TEMP, -2147483648
	011 JumpIfEqual {56}
	012 NotImplemented "Instruction LDRSW not yet implemented."
	013 Move W3, W1
	014 Move X19, X0
	015 Subtract W8, W20, W1
	016 NotImplemented "Instruction CMP not yet implemented."
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Subtract W8, W20, W2
	019 Subtract W4, W8, W3
	020 Move [X19+24], W8
	021 Move X0, [X19+16]
	022 Add W1, W2, W3
	023 Move X5, X31
	024 Move X2, X0
	025 Call Array.Copy, X0, X1, X2, X3, X4
	026 Move W8, [X19+24]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X8, W8
	029 Subtract W9, W20, 1
	030 Move X10, [X19+16]
	031 Compare X10, 0
	032 JumpIfEqual {47}
	033 Move W11, [X10+24]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Add X10, X10, X20
	036 Subtract X20, X20, 1
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Subtract W9, W9, 1
	039 Move [X10+24], X31
	040 Move W8, [X19+28]
	041 Add W8, W8, 1
	042 Move [X19+28], W8
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Return 
	047 Call 0x1C17F20
	048 Call 0x1C17F28
	049 Move X0, 0xDA2000
	050 Move X0, [X0+1888]
	051 Call 0x1C17D08
	052 Call 0x1C17F10
	053 Move X19, X0
	054 Move X0, 0xDA5000
	055 Move X0, [X0+304]
	056 Move X0, 0xDA2000
	057 Move X0, [X0+1888]
	058 Call 0x1C17D08
	059 Call 0x1C17F10
	060 Move X19, X0
	061 Move X0, 0xDC2000
	062 Move X0, [X0+1608]
	063 Call 0x1C17D08
	064 Move X20, X0
	065 Move X0, 0xDC2000
	066 Move X0, [X0+1648]
	067 Call 0x1C17D08
	068 Move X2, X0
	069 Move X0, X19
	070 Move X1, X20
	071 Move X3, X31
	072 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	073 Move X0, 0xDA2000
	074 Move X0, [X0+1400]
	075 Call 0x1C17D08
	076 Call 0x1C17F10
	077 Move X19, X0
	078 Move X0, 0xDC2000
	079 Move X0, [X0+1888]
	080 Call 0x1C17D08
	081 Move X1, X0
	082 Move X0, X19
	083 Move X2, X31
	084 Call ArgumentException..ctor, X0, X1
	085 Move X0, 0xDD1000
	086 Move X0, [X0+1616]
	087 Call 0x1C17D08
	088 Move X1, X0
	089 Move X0, X19
	090 Call 0x1C17DEC

Method: System.Object[] ToArray()

Disassembly:
	0x0335A50C LDR X8, [X9 + 0x308]
	0x0335A510 LDR X2, [X9 + 0x310]
	0x0335A514 BLR X8
	0x0335A518 LDR X8, [X19 + 0x10]
	0x0335A51C CBZ X8, 0x335A73C
	0x0335A520 AND W24, W0, 0x7FFFFFFF
	0x0335A524 MOVZ W10, 0x65
	0x0335A528 LDR X9, [X8 + 0x18]
	0x0335A52C SUB W11, W23, 0x1
	0x0335A530 MUL W10, W24, W10
	0x0335A534 UDIV W12, W10, W11
	0x0335A538 MSUB W10, W12, W11, W10
	0x0335A53C ADD W27, W10, 0x1
	0x0335A540 UDIV W10, W24, W9
	0x0335A544 MOV W25, W31
	0x0335A548 MOVN W26, 0x0
	0x0335A54C MSUB W29, W10, W9, W24
	0x0335A550 MOVZ W28, 0x18
	0x0335A554 ADDS W31, W26, 0x1
	0x0335A558 B.NE 0x335A594
	0x0335A55C CMP W29, W9
	0x0335A560 B.CS 0x335A738
	0x0335A564 SMADDL X10, X29, X28, X8
	0x0335A568 LDR X10, [X10 + 0x20]
	0x0335A56C CMP X10, X8
	0x0335A570 B.EQ 0x335A57C
	0x0335A574 MOVN W26, 0x0
	0x0335A578 B 0x335A594
	0x0335A57C MOV W10, W29
	0x0335A580 SXTW X10, W10
	0x0335A584 MADD X10, X10, X28, X8
	0x0335A588 LDR W10, [X10 + 0x30]
	0x0335A58C CMP W10, 0x0
	0x0335A590 CSINV W26, W29, W31, LT
	0x0335A594 CMP W29, W9
	0x0335A598 B.CS 0x335A738
	0x0335A59C SXTW X23, W29
	0x0335A5A0 MADD X9, X23, X28, X8
	0x0335A5A4 LDR X1, [X9 + 0x20]
	0x0335A5A8 CBZ X1, 0x335A680
	0x0335A5AC MADD X9, X23, X28, X8
	0x0335A5B0 LDR W9, [X9 + 0x30]
	0x0335A5B4 CMP X1, X8
	0x0335A5B8 B.NE 0x335A5C0
	0x0335A5BC TBZ X9, 0x1F, 0x335A680
	0x0335A5C0 AND W8, W9, 0x7FFFFFFF
	0x0335A5C4 CMP W8, W24
	0x0335A5C8 B.NE 0x335A5E8
	0x0335A5CC LDR X8, [X19]
	0x0335A5D0 MOV X0, X19
	0x0335A5D4 MOV X2, X20
	0x0335A5D8 LDR X9, [X8 + 0x328]
	0x0335A5DC LDR X3, [X8 + 0x330]
	0x0335A5E0 BLR X9
	0x0335A5E4 TBNZ X0, 0x0, 0x335A704
	0x0335A5E8 LDR X8, [X19 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1083000
	005 Move W8, [X20+3582]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xD9A000
	012 Move X0, [X0+2504]
	013 Call 0x1C17CF4
	014 Move X0, 0xD9A000
	015 Move X0, [X0+2512]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3582], W8
	019 Move W1, [X19+24]
	020 Compare W1, 0
	021 JumpIfEqual {35}
	022 Move X8, 0xD9A000
	023 Move X8, [X8+2512]
	024 Move X0, [X8]
	025 Call 0x1C17D6C
	026 Move X8, [X19+16]
	027 Move W4, [X19+24]
	028 Move X19, X0
	029 Move W1, W31
	030 Move X0, X8
	031 Move X2, X19
	032 Move W3, W31
	033 Move X5, X31
	034 Call Array.Copy, X0, X1, X2, X3, X4
	035 Move X8, 0xD9A000
	036 Move X8, [X8+2504]
	037 Move X19, [X8]
	038 Move X8, [X19+56]
	039 Compare X8, 0
	040 JumpIfNotEqual {44}
	041 Move X0, X19
	042 Call 0x1C5D6E0
	043 Move X8, [X19+56]
	044 Move X0, [X8+16]
	045 Move W8, [X0+309]
	046 Move TEMP, X8
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfEqual {51}
	050 Call 0x1C5D684
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move X8, [X19+56]
	056 Move X0, [X8+16]
	057 Move W8, [X0+309]
	058 Move TEMP, X8
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfEqual {63}
	062 Call 0x1C5D684
	063 Move X8, [X0+184]
	064 Move X19, [X8]
	065 Move X0, X19
	066 Move X20, [X31+16]
	067 Move X19, [X31+24]
	068 Move X30, [X31+32]
	069 Return X0

Method: System.Array ToArray(System.Type type)

Disassembly:
	0x0335A5EC ADDS W31, W26, 0x1
	0x0335A5F0 B.EQ 0x335A5FC
	0x0335A5F4 CBNZ X8, 0x335A62C
	0x0335A5F8 B 0x335A73C
	0x0335A5FC CBZ X8, 0x335A73C
	0x0335A600 LDR W9, [X8 + 0x18]
	0x0335A604 CMP W29, W9
	0x0335A608 B.CS 0x335A738
	0x0335A60C MADD X9, X23, X28, X8
	0x0335A610 LDR W10, [X9 + 0x30]!
	0x0335A614 TBNZ X10, 0x1F, 0x335A62C
	0x0335A618 ORR W10, W10, 0x80000000
	0x0335A61C STR W10, [X9]
	0x0335A620 LDR W9, [X19 + 0x1C]
	0x0335A624 ADD W9, W9, 0x1
	0x0335A628 STR W9, [X19 + 0x1C]
	0x0335A62C LDR X10, [X8 + 0x18]
	0x0335A630 ADD X11, X23, X27
	0x0335A634 ADD W25, W25, 0x1
	0x0335A638 AND X9, X10, 0x0
	0x0335A63C SDIV X12, X11, X9
	0x0335A640 CMP W25, W10
	0x0335A644 MSUB W29, W12, W10, W11
	0x0335A648 B.LT 0x335A554
	0x0335A64C ADDS W31, W26, 0x1
	0x0335A650 B.EQ 0x335A788
	0x0335A654 BL 0x1C16D44
	0x0335A658 LDR X8, [X19 + 0x10]
	0x0335A65C MOVZ W9, 0x1
	0x0335A660 STRB W9, [X19 + 0x2C]
	0x0335A664 CBZ X8, 0x335A73C
	0x0335A668 LDR W9, [X8 + 0x18]
	0x0335A66C CMP W26, W9
	0x0335A670 B.CS 0x335A738
	0x0335A674 MOVZ W9, 0x18
	0x0335A678 SMADDL X8, X26, X9, X8
	0x0335A67C B 0x335A6B0
	0x0335A680 ADDS W31, W26, 0x1
	0x0335A684 CSEL W22, W29, W26, EQ
	0x0335A688 BL 0x1C16D44
	0x0335A68C LDR X8, [X19 + 0x10]
	0x0335A690 MOVZ W9, 0x1
	0x0335A694 STRB W9, [X19 + 0x2C]
	0x0335A698 CBZ X8, 0x335A73C
	0x0335A69C LDR W9, [X8 + 0x18]
	0x0335A6A0 CMP W22, W9
	0x0335A6A4 B.CS 0x335A738
	0x0335A6A8 MOVZ W9, 0x18
	0x0335A6AC SMADDL X8, X22, X9, X8
	0x0335A6B0 LDR W9, [X8 + 0x30]
	0x0335A6B4 STP X20, X21, [X8 + 0x20]
	0x0335A6B8 ORR W9, W9, W24, 0x0
	0x0335A6BC STR W9, [X8 + 0x30]
	0x0335A6C0 LDR W8, [X19 + 0x18]
	0x0335A6C4 ADD W8, W8, 0x1
	0x0335A6C8 STR W8, [X19 + 0x18]
	0x0335A6CC LDR W20, [X19 + 0x28]
	0x0335A6D0 BL 0x1C16D44
	0x0335A6D4 BL 0x1C16D44
	0x0335A6D8 ADD W8, W20, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1083000
	007 Move X22, 0xD9A000
	008 Move W8, [X21+3583]
	009 Move X22, [X22+1728]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD9A000
	017 Move X0, [X0+1728]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3583], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X31
	028 Move X2, X31
	029 Call Type.op_Equality, X0, X1
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {54}
	034 Move W1, [X19+24]
	035 Move X0, X20
	036 Move X2, X31
	037 Call Array.CreateInstance, X0, X1
	038 Move X8, [X19+16]
	039 Move W4, [X19+24]
	040 Move X19, X0
	041 Move W1, W31
	042 Move X0, X8
	043 Move X2, X19
	044 Move W3, W31
	045 Move X5, X31
	046 Call Array.Copy, X0, X1, X2, X3, X4
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Return X0
	054 Move X0, 0xD9F000
	055 Move X0, [X0+1320]
	056 Call 0x1C17D08
	057 Call 0x1C17F10
	058 Move X19, X0
	059 Move X0, 0xDA2000
	060 Move X0, [X0+1512]
	061 Call 0x1C17D08
	062 Move X1, X0
	063 Move X0, X19
	064 Move X2, X31
	065 Call ArgumentNullException..ctor, X0, X1
	066 Move X0, 0xDD1000
	067 Move X0, [X0+1624]
	068 Call 0x1C17D08
	069 Move X1, X0
	070 Move X0, X19
	071 Call 0x1C17DEC

