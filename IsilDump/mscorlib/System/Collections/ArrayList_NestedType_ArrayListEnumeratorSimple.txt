Type: System.Collections.ArrayList/ArrayListEnumeratorSimple

Method: System.Void .ctor(System.Collections.ArrayList list)

Disassembly:
	0x03359D14 ADD W1, W8, 0x1
	0x03359D18 STR W1, [X19 + 0x18]
	0x03359D1C CBZ X0, 0x3359DE4
	0x03359D20 LDR X8, [X0]
	0x03359D24 LDR X9, [X8 + 0x2E8]
	0x03359D28 LDR X2, [X8 + 0x2F0]
	0x03359D2C BLR X9
	0x03359D30 STR X0, [X19 + 0x20]
	0x03359D34 MOVZ W8, 0x1
	0x03359D38 B 0x3359DD4
	0x03359D3C ADRP X20, 0xDD1000
	0x03359D40 LDR X20, [X20 + 0x610]
	0x03359D44 LDR X8, [X20]
	0x03359D48 LDR W9, [X8 + 0xE0]
	0x03359D4C CBZ W9, 0x3359DA8
	0x03359D50 LDR X8, [X8 + 0xB8]
	0x03359D54 LDR X8, [X8]
	0x03359D58 STR X8, [X19 + 0x20]
	0x03359D5C B 0x3359DC8
	0x03359D60 CBZ X0, 0x3359DE4
	0x03359D64 LDR X8, [X0]
	0x03359D68 LDR X9, [X8 + 0x298]
	0x03359D6C LDR X1, [X8 + 0x2A0]
	0x03359D70 BLR X9
	0x03359D74 STR W0, [X19 + 0x18]
	0x03359D78 ADRP X20, 0xDD1000
	0x03359D7C LDR X20, [X20 + 0x610]
	0x03359D80 LDR X0, [X20]
	0x03359D84 LDR W8, [X0 + 0xE0]
	0x03359D88 CBNZ W8, 0x3359D94
	0x03359D8C BL 0x1C16DFC
	0x03359D90 LDR X0, [X20]
	0x03359D94 LDR X9, [X0 + 0xB8]
	0x03359D98 MOV W8, W31
	0x03359D9C LDR X9, [X9]
	0x03359DA0 STR X9, [X19 + 0x20]
	0x03359DA4 B 0x3359DD4
	0x03359DA8 MOV X0, X8
	0x03359DAC BL 0x1C16DFC
	0x03359DB0 LDR X8, [X20]
	0x03359DB4 LDR X0, [X19 + 0x10]
	0x03359DB8 LDR X8, [X8 + 0xB8]
	0x03359DBC LDR X8, [X8]
	0x03359DC0 STR X8, [X19 + 0x20]
	0x03359DC4 CBZ X0, 0x3359DE4
	0x03359DC8 LDR W9, [X0 + 0x18]
	0x03359DCC MOV W8, W31
	0x03359DD0 STR W9, [X19 + 0x18]
	0x03359DD4 LDP X20, X19, [X31 + 0x10]
	0x03359DD8 MOV W0, W8
	0x03359DDC LDR X30, [X31], #0x20
	0x03359DE0 RET
	0x03359DE4 BL 0x1C16F20
	0x03359DE8 ADRP X0, 0xD9A000
	0x03359DEC LDR X0, [X0 + 0x5B0]
	0x03359DF0 BL 0x1C16D08
	0x03359DF4 BL 0x1C16F10
	0x03359DF8 MOV X19, X0
	0x03359DFC ADRP X0, 0xDC4000
	0x03359E00 LDR X0, [X0 + 0x288]
	0x03359E04 BL 0x1C16D08
	0x03359E08 MOV X1, X0
	0x03359E0C MOV X0, X19
	0x03359E10 MOV X2, X31
	0x03359E14 BL 0x337DF1C
	0x03359E18 ADRP X0, 0xDD1000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x1084000
	008 Move W8, [X21+3585]
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0xDD2000
	016 Move X0, [X0+1552]
	017 Call 0x1C17CF4
	018 Move X0, 0xDD2000
	019 Move X0, [X0+1560]
	020 Call 0x1C17CF4
	021 Move X0, 0xD9B000
	022 Move X0, [X0+1728]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+3585], W8
	026 Move X0, X19
	027 Move X1, X31
	028 Call Object..ctor, X0
	029 Move TEMP, 0
	030 Not TEMP
	031 Move W8, TEMP
	032 Move [X19+16], X20
	033 Move [X19+24], W8
	034 Compare X20, 0
	035 JumpIfEqual {80}
	036 Move W8, [X20+28]
	037 Move X21, 0xDD2000
	038 Move X23, 0xD9B000
	039 Move X22, 0xDD2000
	040 Move X21, [X21+1560]
	041 Move X23, [X23+1728]
	042 Move X22, [X22+1552]
	043 Move X0, X20
	044 Move X1, X31
	045 Move [X19+28], W8
	046 Call "il2cpp_vm_object_is_inst", X0
	047 Move X8, [X23]
	048 Move X21, [X21]
	049 Move X20, X0
	050 Move W9, [X8+224]
	051 Compare W9, 0
	052 JumpIfNotEqual {55}
	053 Move X0, X8
	054 Call 0x1C17DFC
	055 Move X0, X21
	056 Move X1, X31
	057 Call Type.GetTypeFromHandle, X0
	058 Move X1, X0
	059 Move X0, X20
	060 Move X2, X31
	061 Call Type.op_Equality, X0, X1
	062 And W8, W0, 1
	063 Move [X19+40], W8
	064 Move X0, [X22]
	065 Move W8, [X0+224]
	066 Compare W8, 0
	067 JumpIfNotEqual {70}
	068 Call 0x1C17DFC
	069 Move X0, [X22]
	070 Move X8, [X0+184]
	071 Move X22, [X31+16]
	072 Move X21, [X31+24]
	073 Move X8, [X8]
	074 Move [X19+32], X8
	075 Move X20, [X31+32]
	076 Move X19, [X31+40]
	077 Move X30, [X31+48]
	078 Move X23, [X31+56]
	079 Return 
	080 Call 0x1C17F20

Method: System.Object Clone()

Disassembly:
	0x0335AC58 MOV X20, X1
	0x0335AC5C MOV X21, X0

ISIL:
	001 Move X1, X31
	002 Call Object.MemberwiseClone, X0
	003 Return X0

Method: System.Boolean MoveNext()

Disassembly:
	0x0335AC60 TBNZ X8, 0x0, 0x335AC78
	0x0335AC64 ADRP X0, 0xDA1000
	0x0335AC68 LDR X0, [X0 + 0xF10]
	0x0335AC6C BL 0x1C16CF4
	0x0335AC70 MOVZ W8, 0x1
	0x0335AC74 STRB W8, [X22 + 0xE0A]
	0x0335AC78 LDR X22, [X21 + 0x10]
	0x0335AC7C CBZ X22, 0x335AD20
	0x0335AC80 LDR X8, [X22 + 0x18]
	0x0335AC84 SUBS W23, W8, 0x1
	0x0335AC88 B.MI 0x335AD04
	0x0335AC8C ADRP X25, 0xDA1000
	0x0335AC90 LDR X25, [X25 + 0xF10]
	0x0335AC94 MOVZ W24, 0x18
	0x0335AC98 CMP W23, W8
	0x0335AC9C B.CS 0x335AD1C
	0x0335ACA0 UMADDL X10, X23, X24, X22
	0x0335ACA4 LDR X9, [X10 + 0x20]
	0x0335ACA8 CBZ X9, 0x335ACB8
	0x0335ACAC LDR X11, [X21 + 0x10]
	0x0335ACB0 CMP X9, X11
	0x0335ACB4 B.NE 0x335ACC4
	0x0335ACB8 SUBS W23, W23, 0x1
	0x0335ACBC B.PL 0x335AC98
	0x0335ACC0 B 0x335AD04
	0x0335ACC4 LDR X8, [X10 + 0x28]
	0x0335ACC8 LDR X0, [X25]
	0x0335ACCC ADD X1, X31, 0x0
	0x0335ACD0 STP X9, X8, [X31]
	0x0335ACD4 BL 0x1C16E04
	0x0335ACD8 CBZ X20, 0x335AD20
	0x0335ACDC MOV X1, X0
	0x0335ACE0 MOV X0, X20
	0x0335ACE4 MOV W2, W19
	0x0335ACE8 MOV X3, X31
	0x0335ACEC BL 0x339F798
	0x0335ACF0 SUBS W23, W23, 0x1
	0x0335ACF4 B.MI 0x335AD04
	0x0335ACF8 LDR X8, [X22 + 0x18]
	0x0335ACFC ADD W19, W19, 0x1
	0x0335AD00 B 0x335AC98
	0x0335AD04 LDP X20, X19, [X31 + 0x40]
	0x0335AD08 LDP X22, X21, [X31 + 0x30]
	0x0335AD0C LDP X24, X23, [X31 + 0x20]
	0x0335AD10 LDP X30, X25, [X31 + 0x10]
	0x0335AD14 ADD X31, X31, 0x50
	0x0335AD18 RET
	0x0335AD1C BL 0x1C16F28
	0x0335AD20 BL 0x1C16F20
	0x0335AD24 STR X30, [X31 - 0x30]!
	0x0335AD28 STP X22, X21, [X31 + 0x10]
	0x0335AD2C STP X20, X19, [X31 + 0x20]
	0x0335AD30 CBZ X1, 0x335ADA4
	0x0335AD34 MOV X20, X1
	0x0335AD38 MOV X21, X0
	0x0335AD3C MOV X0, X1
	0x0335AD40 MOV X1, X31
	0x0335AD44 MOV W19, W2
	0x0335AD48 BL 0x339FCE4
	0x0335AD4C CMP W0, 0x1
	0x0335AD50 B.NE 0x335ADEC
	0x0335AD54 TBNZ X19, 0x1F, 0x335AE34
	0x0335AD58 MOV X0, X20
	0x0335AD5C MOV X1, X31
	0x0335AD60 BL 0x3395B7C
	0x0335AD64 LDR X8, [X21]
	0x0335AD68 MOV W22, W0
	0x0335AD6C MOV X0, X21
	0x0335AD70 LDR X9, [X8 + 0x378]
	0x0335AD74 LDR X1, [X8 + 0x380]
	0x0335AD78 BLR X9
	0x0335AD7C SUB W8, W22, W19
	0x0335AD80 CMP W8, W0
	0x0335AD84 B.LT 0x335AE7C
	0x0335AD88 MOV X0, X21
	0x0335AD8C MOV X1, X20
	0x0335AD90 MOV W2, W19
	0x0335AD94 LDP X20, X19, [X31 + 0x20]
	0x0335AD98 LDP X22, X21, [X31 + 0x10]
	0x0335AD9C LDR X30, [X31], #0x30
	0x0335ADA0 B 0x335AC38
	0x0335ADA4 ADRP X0, 0xD9E000
	0x0335ADA8 LDR X0, [X0 + 0x528]
	0x0335ADAC BL 0x1C16D08
	0x0335ADB0 BL 0x1C16F10
	0x0335ADB4 MOV X19, X0
	0x0335ADB8 ADRP X0, 0xDC1000
	0x0335ADBC LDR X0, [X0 + 0x640]
	0x0335ADC0 BL 0x1C16D08
	0x0335ADC4 MOV X20, X0
	0x0335ADC8 ADRP X0, 0xDC8000
	0x0335ADCC LDR X0, [X0 + 0x2E0]
	0x0335ADD0 BL 0x1C16D08
	0x0335ADD4 MOV X2, X0
	0x0335ADD8 MOV X0, X19
	0x0335ADDC MOV X1, X20
	0x0335ADE0 MOV X3, X31
	0x0335ADE4 BL 0x3315F7C
	0x0335ADE8 B 0x335AEAC
	0x0335ADEC ADRP X0, 0xDA1000
	0x0335ADF0 LDR X0, [X0 + 0x578]
	0x0335ADF4 BL 0x1C16D08
	0x0335ADF8 BL 0x1C16F10
	0x0335ADFC MOV X19, X0
	0x0335AE00 ADRP X0, 0xDC2000
	0x0335AE04 LDR X0, [X0 + 0x308]
	0x0335AE08 BL 0x1C16D08
	0x0335AE0C MOV X20, X0
	0x0335AE10 ADRP X0, 0xDC1000
	0x0335AE14 LDR X0, [X0 + 0x640]
	0x0335AE18 BL 0x1C16D08
	0x0335AE1C MOV X2, X0
	0x0335AE20 MOV X0, X19
	0x0335AE24 MOV X1, X20
	0x0335AE28 MOV X3, X31
	0x0335AE2C BL 0x330E16C
	0x0335AE30 B 0x335AEAC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1083000
	005 Move W8, [X20+3586]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDD1000
	012 Move X0, [X0+1552]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3586], W8
	016 Move X0, [X19+16]
	017 Compare X0, 0
	018 JumpIfEqual {103}
	019 Move W8, [X19+28]
	020 Move W9, [X0+28]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move W8, [X19+40]
	023 Move W20, [X19+24]
	024 Compare W8, 0
	025 JumpIfEqual {39}
	026 Move W8, [X0+24]
	027 Subtract W8, W8, 1
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X8, [X0+16]
	030 Add W9, W20, 1
	031 Move [X19+24], W9
	032 Compare X8, 0
	033 JumpIfEqual {103}
	034 Move W10, [X8+24]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Add X8, X8, W9
	037 Move X8, [X8+32]
	038 Move [X19+32], X8
	039 Move X8, [X0]
	040 Move X9, [X8+664]
	041 Move X1, [X8+672]
	042 NotImplemented "Instruction BLR not yet implemented."
	043 Move W8, W0
	044 Move X0, [X19+16]
	045 Subtract W8, W8, 1
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move W8, [X19+24]
	048 Add W1, W8, 1
	049 Move [X19+24], W1
	050 Compare X0, 0
	051 JumpIfEqual {103}
	052 Move X8, [X0]
	053 Move X9, [X8+744]
	054 Move X2, [X8+752]
	055 NotImplemented "Instruction BLR not yet implemented."
	056 Move [X19+32], X0
	057 Move W8, 1
	058 Move X20, 0xDD1000
	059 Move X20, [X20+1552]
	060 Move X8, [X20]
	061 Move W9, [X8+224]
	062 Compare W9, 0
	063 JumpIfEqual {86}
	064 Move X8, [X8+184]
	065 Move X8, [X8]
	066 Move [X19+32], X8
	067 Compare X0, 0
	068 JumpIfEqual {103}
	069 Move X8, [X0]
	070 Move X9, [X8+664]
	071 Move X1, [X8+672]
	072 NotImplemented "Instruction BLR not yet implemented."
	073 Move [X19+24], W0
	074 Move X20, 0xDD1000
	075 Move X20, [X20+1552]
	076 Move X0, [X20]
	077 Move W8, [X0+224]
	078 Compare W8, 0
	079 JumpIfNotEqual {82}
	080 Call 0x1C17DFC
	081 Move X0, [X20]
	082 Move X9, [X0+184]
	083 Move W8, W31
	084 Move X9, [X9]
	085 Move [X19+32], X9
	086 Move X0, X8
	087 Call 0x1C17DFC
	088 Move X8, [X20]
	089 Move X0, [X19+16]
	090 Move X8, [X8+184]
	091 Move X8, [X8]
	092 Move [X19+32], X8
	093 Compare X0, 0
	094 JumpIfEqual {103}
	095 Move W9, [X0+24]
	096 Move W8, W31
	097 Move [X19+24], W9
	098 Move X20, [X31+16]
	099 Move X19, [X31+24]
	100 Move W0, W8
	101 Move X30, [X31+32]
	102 Return X0
	103 Call 0x1C17F20
	104 Move X0, 0xD9A000
	105 Move X0, [X0+1456]
	106 Call 0x1C17D08
	107 Call 0x1C17F10
	108 Move X19, X0
	109 Move X0, 0xDC4000
	110 Move X0, [X0+648]
	111 Call 0x1C17D08
	112 Move X1, X0
	113 Move X0, X19
	114 Move X2, X31
	115 Call InvalidOperationException..ctor, X0, X1
	116 Move X0, 0xDD1000
	117 Move X0, [X0+1712]
	118 Call 0x1C17D08
	119 Move X1, X0
	120 Move X0, X19
	121 Call 0x1C17DEC
	122 Call 0x1C17F28

Method: System.Object get_Current()

Disassembly:
	0x0335AE34 ADRP X0, 0xDA1000
	0x0335AE38 LDR X0, [X0 + 0x760]
	0x0335AE3C BL 0x1C16D08
	0x0335AE40 BL 0x1C16F10
	0x0335AE44 MOV X19, X0
	0x0335AE48 ADRP X0, 0xDC3000
	0x0335AE4C LDR X0, [X0 + 0x2B0]
	0x0335AE50 BL 0x1C16D08
	0x0335AE54 MOV X20, X0
	0x0335AE58 ADRP X0, 0xDC1000
	0x0335AE5C LDR X0, [X0 + 0x670]
	0x0335AE60 BL 0x1C16D08
	0x0335AE64 MOV X2, X0
	0x0335AE68 MOV X0, X19
	0x0335AE6C MOV X1, X20
	0x0335AE70 MOV X3, X31
	0x0335AE74 BL 0x3311888
	0x0335AE78 B 0x335AEAC
	0x0335AE7C ADRP X0, 0xDA1000
	0x0335AE80 LDR X0, [X0 + 0x578]
	0x0335AE84 BL 0x1C16D08
	0x0335AE88 BL 0x1C16F10
	0x0335AE8C MOV X19, X0
	0x0335AE90 ADRP X0, 0xDC2000
	0x0335AE94 LDR X0, [X0 + 0x318]
	0x0335AE98 BL 0x1C16D08
	0x0335AE9C MOV X1, X0
	0x0335AEA0 MOV X0, X19
	0x0335AEA4 MOV X2, X31
	0x0335AEA8 BL 0x3314A68
	0x0335AEAC ADRP X0, 0xDD0000
	0x0335AEB0 LDR X0, [X0 + 0x708]
	0x0335AEB4 BL 0x1C16D08
	0x0335AEB8 MOV X1, X0
	0x0335AEBC MOV X0, X19
	0x0335AEC0 BL 0x1C16DEC
	0x0335AEC4 STR X30, [X31 - 0x40]!
	0x0335AEC8 STP X24, X23, [X31 + 0x10]
	0x0335AECC STP X22, X21, [X31 + 0x20]
	0x0335AED0 STP X20, X19, [X31 + 0x30]
	0x0335AED4 LDR X22, [X0 + 0x10]
	0x0335AED8 CBZ X22, 0x335AF68
	0x0335AEDC LDR X8, [X22 + 0x18]
	0x0335AEE0 SUBS W23, W8, 0x1
	0x0335AEE4 B.MI 0x335AF50
	0x0335AEE8 MOV W19, W2
	0x0335AEEC MOV X20, X0
	0x0335AEF0 MOV X21, X1
	0x0335AEF4 MOVZ W24, 0x18
	0x0335AEF8 CMP W23, W8
	0x0335AEFC B.CS 0x335AF64

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1083000
	006 Move X21, 0xDD1000
	007 Move W8, [X20+3587]
	008 Move X21, [X21+1552]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDD1000
	015 Move X0, [X0+1552]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3587], W8
	019 Move X0, [X21]
	020 Move X20, [X19+32]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X21]
	026 Move X8, [X0+184]
	027 Move X8, [X8]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X0, X20
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return X0
	035 Move X0, 0xD9A000
	036 Move W19, [X19+24]
	037 Move X0, [X0+1456]
	038 Call 0x1C17D08
	039 Call 0x1C17F10
	040 Add W31, W19, 1
	041 Move X19, X0
	042 Move X0, 0xDC5000
	043 Move X0, [X0+3144]
	044 Move X0, 0xDC5000
	045 Move X0, [X0+3136]
	046 Call 0x1C17D08
	047 Move X1, X0
	048 Move X0, X19
	049 Move X2, X31
	050 Call InvalidOperationException..ctor, X0, X1
	051 Move X0, 0xDD1000
	052 Move X0, [X0+1720]
	053 Call 0x1C17D08
	054 Move X1, X0
	055 Move X0, X19
	056 Call 0x1C17DEC

Method: System.Void Reset()

Disassembly:
	0x0335AF00 UMADDL X9, X23, X24, X22
	0x0335AF04 LDR X10, [X9 + 0x20]
	0x0335AF08 CBZ X10, 0x335AF18
	0x0335AF0C LDR X11, [X20 + 0x10]
	0x0335AF10 CMP X10, X11
	0x0335AF14 B.NE 0x335AF24
	0x0335AF18 SUBS W23, W23, 0x1
	0x0335AF1C B.PL 0x335AEF8
	0x0335AF20 B 0x335AF50
	0x0335AF24 CBZ X21, 0x335AF68
	0x0335AF28 LDR X1, [X9 + 0x28]
	0x0335AF2C MOV X0, X21
	0x0335AF30 MOV W2, W19
	0x0335AF34 MOV X3, X31
	0x0335AF38 BL 0x339F798
	0x0335AF3C SUBS W23, W23, 0x1
	0x0335AF40 B.MI 0x335AF50
	0x0335AF44 LDR X8, [X22 + 0x18]
	0x0335AF48 ADD W19, W19, 0x1
	0x0335AF4C B 0x335AEF8
	0x0335AF50 LDP X20, X19, [X31 + 0x30]
	0x0335AF54 LDP X22, X21, [X31 + 0x20]
	0x0335AF58 LDP X24, X23, [X31 + 0x10]
	0x0335AF5C LDR X30, [X31], #0x40
	0x0335AF60 RET
	0x0335AF64 BL 0x1C16F28
	0x0335AF68 BL 0x1C16F20
	0x0335AF6C SUB X31, X31, 0x90
	0x0335AF70 STP X29, X30, [X31 + 0x30]
	0x0335AF74 STP X28, X27, [X31 + 0x40]
	0x0335AF78 STP X26, X25, [X31 + 0x50]
	0x0335AF7C STP X24, X23, [X31 + 0x60]
	0x0335AF80 STP X22, X21, [X31 + 0x70]
	0x0335AF84 STP X20, X19, [X31 + 0x80]
	0x0335AF88 ADRP X19, 0x1082000
	0x0335AF8C LDRB W8, [X19 + 0xE0B]
	0x0335AF90 MOV X20, X0
	0x0335AF94 STR X1, [X31 + 0x8]
	0x0335AF98 TBNZ X8, 0x0, 0x335AFB0
	0x0335AF9C ADRP X0, 0xDA5000
	0x0335AFA0 LDR X0, [X0 + 0x470]
	0x0335AFA4 BL 0x1C16CF4
	0x0335AFA8 MOVZ W8, 0x1
	0x0335AFAC STRB W8, [X19 + 0xE0B]
	0x0335AFB0 LDR X8, [X31 + 0x8]
	0x0335AFB4 CBZ X8, 0x335B128
	0x0335AFB8 LDR X23, [X20 + 0x10]
	0x0335AFBC CBZ X23, 0x335B184
	0x0335AFC0 LDR X8, [X20]
	0x0335AFC4 LDR X1, [X31 + 0x8]
	0x0335AFC8 LDR W19, [X23 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1083000
	005 Move W8, [X20+3588]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDD1000
	012 Move X0, [X0+1552]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3588], W8
	016 Move X8, [X19+16]
	017 Compare X8, 0
	018 JumpIfEqual {41}
	019 Move W9, [X19+28]
	020 Move W8, [X8+28]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X20, 0xDD1000
	023 Move X20, [X20+1552]
	024 Move X0, [X20]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X20]
	030 Move X8, [X0+184]
	031 Move TEMP, 0
	032 Not TEMP
	033 Move W9, TEMP
	034 Move X8, [X8]
	035 Move [X19+24], W9
	036 Move [X19+32], X8
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Return 
	041 Call 0x1C17F20
	042 Move X0, 0xD9A000
	043 Move X0, [X0+1456]
	044 Call 0x1C17D08
	045 Call 0x1C17F10
	046 Move X19, X0
	047 Move X0, 0xDC4000
	048 Move X0, [X0+648]
	049 Call 0x1C17D08
	050 Move X1, X0
	051 Move X0, X19
	052 Move X2, X31
	053 Call InvalidOperationException..ctor, X0, X1
	054 Move X0, 0xDD1000
	055 Move X0, [X0+1728]
	056 Call 0x1C17D08
	057 Move X1, X0
	058 Move X0, X19
	059 Call 0x1C17DEC

Method: System.Void .cctor()

Disassembly:
	0x0335AFCC MOV X0, X20
	0x0335AFD0 LDR X9, [X8 + 0x308]
	0x0335AFD4 LDR X2, [X8 + 0x310]
	0x0335AFD8 BLR X9
	0x0335AFDC AND W13, W0, 0x7FFFFFFF
	0x0335AFE0 MOVZ W8, 0x65
	0x0335AFE4 SUB W9, W19, 0x1
	0x0335AFE8 LDR W10, [X23 + 0x18]
	0x0335AFEC MUL W8, W13, W8
	0x0335AFF0 UDIV W11, W8, W9
	0x0335AFF4 MSUB W8, W11, W9, W8
	0x0335AFF8 ADD W8, W8, 0x1
	0x0335AFFC STP X8, X13, [X31 + 0x10]
	0x0335B000 UDIV W8, W13, W10
	0x0335B004 MOV W12, W31
	0x0335B008 MSUB W19, W8, W10, W13
	0x0335B00C STP W12, W31, [X31 + 0x24]
	0x0335B010 LDR W26, [X20 + 0x28]
	0x0335B014 BL 0x1C16D44
	0x0335B018 LDR W8, [X23 + 0x18]
	0x0335B01C CMP W19, W8
	0x0335B020 B.CS 0x335B124
	0x0335B024 SXTW X29, W19
	0x0335B028 MOVZ W8, 0x18
	0x0335B02C MADD X8, X29, X8, X23
	0x0335B030 ADD X28, X8, 0x20
	0x0335B034 ADD X19, X8, 0x28
	0x0335B038 ADD X27, X8, 0x30

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x1083000
	006 Move X21, 0xDA0000
	007 Move X20, 0xDD1000
	008 Move W8, [X19+3589]
	009 Move X21, [X21+3264]
	010 Move X20, [X20+1552]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xDD1000
	016 Move X0, [X0+1552]
	017 Call 0x1C17CF4
	018 Move X0, 0xDA0000
	019 Move X0, [X0+3264]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+3589], W8
	023 Move X0, [X21]
	024 Call 0x1C17F10
	025 Move X1, X31
	026 Move X19, X0
	027 Call Object..ctor, X0
	028 Move X8, [X20]
	029 Move X8, [X8+184]
	030 Move [X8], X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Return 

