Type: System.Collections.ListDictionaryInternal

Method: System.Void .ctor()

Disassembly:
	0x033517A4 STP X30, X19, [X31 - 0x10]!
	0x033517A8 LDR X8, [X0 + 0x10]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Object get_Item(System.Object key)

Disassembly:
	0x033517AC CBZ X8, 0x33517D4
	0x033517B0 LDR W9, [X0 + 0x20]
	0x033517B4 LDR W8, [X8 + 0x18]
	0x033517B8 CMP W9, W8
	0x033517BC B.NE 0x33517D8
	0x033517C0 MOVZ W8, 0x1
	0x033517C4 STRB W8, [X0 + 0x25]
	0x033517C8 STR X31, [X0 + 0x18]
	0x033517CC LDP X30, X19, [X31], #0x10
	0x033517D0 RET
	0x033517D4 BL 0x1C16F20
	0x033517D8 ADRP X0, 0xDA2000
	0x033517DC LDR X0, [X0 + 0x5B0]
	0x033517E0 BL 0x1C16D08
	0x033517E4 BL 0x1C16F10
	0x033517E8 MOV X19, X0
	0x033517EC ADRP X0, 0xDCC000
	0x033517F0 LDR X0, [X0 + 0x288]
	0x033517F4 BL 0x1C16D08
	0x033517F8 MOV X1, X0
	0x033517FC MOV X0, X19
	0x03351800 MOV X2, X31
	0x03351804 BL 0x337DF1C
	0x03351808 ADRP X0, 0xDD9000
	0x0335180C LDR X0, [X0 + 0x328]
	0x03351810 BL 0x1C16D08
	0x03351814 MOV X1, X0
	0x03351818 MOV X0, X19
	0x0335181C BL 0x1C16DEC
	0x03351820 STP X30, X21, [X31 - 0x20]!
	0x03351824 STP X20, X19, [X31 + 0x10]
	0x03351828 MOV X20, X1
	0x0335182C MOV X1, X31
	0x03351830 MOV X19, X2
	0x03351834 MOV X21, X0
	0x03351838 BL 0x33BDD8C
	0x0335183C STP X20, X19, [X21 + 0x10]
	0x03351840 LDP X20, X19, [X31 + 0x10]
	0x03351844 LDP X30, X21, [X31], #0x20
	0x03351848 RET
	0x0335184C LDR X0, [X0 + 0x10]
	0x03351850 RET
	0x03351854 LDR X0, [X0 + 0x18]
	0x03351858 RET
	0x0335185C STR X30, [X31 - 0x10]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {32}
	006 Move X20, [X0+16]
	007 Compare X20, 0
	008 JumpIfEqual {25}
	009 Move X19, X1
	010 Move X0, [X20+16]
	011 Compare X0, 0
	012 JumpIfEqual {31}
	013 Move X8, [X0]
	014 Move X1, X19
	015 Move X9, [X8+312]
	016 Move X2, [X8+320]
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move TEMP, X0
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {26}
	022 Move X20, [X20+32]
	023 Compare X20, 0
	024 JumpIfNotEqual {10}
	025 Move X0, X31
	026 Move X0, [X20+24]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Return X0
	031 Call 0x1C17F20
	032 Move X0, 0xDA8000
	033 Move X0, [X0+1320]
	034 Call 0x1C17D08
	035 Call 0x1C17F10
	036 Move X19, X0
	037 Move X0, 0xDCD000
	038 Move X0, [X0+112]
	039 Call 0x1C17D08
	040 Move X20, X0
	041 Move X0, 0xDDA000
	042 Move X0, [X0+648]
	043 Call 0x1C17D08
	044 Move X2, X0
	045 Move X0, X19
	046 Move X1, X20
	047 Move X3, X31
	048 Call ArgumentNullException..ctor, X0, X1, X2
	049 Move X0, 0xDDA000
	050 Move X0, [X0+656]
	051 Call 0x1C17D08
	052 Move X1, X0
	053 Move X0, X19
	054 Call 0x1C17DEC

Method: System.Void set_Item(System.Object key, System.Object value)

Disassembly:
	0x03351860 BL 0x3351874
	0x03351864 CMP W0, 0x0
	0x03351868 CSET W0, EQ
	0x0335186C LDR X30, [X31], #0x10
	0x03351870 RET
	0x03351874 STR X30, [X31 - 0x30]!
	0x03351878 STP X22, X21, [X31 + 0x10]
	0x0335187C STP X20, X19, [X31 + 0x20]
	0x03351880 ADRP X22, 0x108B000
	0x03351884 LDRB W8, [X22 + 0xDC9]
	0x03351888 MOV X19, X2
	0x0335188C MOV X20, X1
	0x03351890 MOV X21, X0
	0x03351894 TBNZ X8, 0x0, 0x33518B8
	0x03351898 ADRP X0, 0xDD9000
	0x0335189C LDR X0, [X0 + 0x248]
	0x033518A0 BL 0x1C16CF4
	0x033518A4 ADRP X0, 0xDCC000
	0x033518A8 LDR X0, [X0 + 0x918]
	0x033518AC BL 0x1C16CF4
	0x033518B0 MOVZ W8, 0x1
	0x033518B4 STRB W8, [X22 + 0xDC9]
	0x033518B8 CMP X20, X19
	0x033518BC B.EQ 0x3351918
	0x033518C0 CBZ X20, 0x3351920
	0x033518C4 CBZ X19, 0x3351928
	0x033518C8 LDR X21, [X21 + 0x18]
	0x033518CC CBZ X21, 0x335193C
	0x033518D0 ADRP X10, 0xDCC000
	0x033518D4 LDR X8, [X21]
	0x033518D8 LDR X10, [X10 + 0x918]
	0x033518DC LDRH W9, [X8 + 0x12E]
	0x033518E0 LDR X1, [X10]
	0x033518E4 CBZ X9, 0x3351908
	0x033518E8 LDR X10, [X8 + 0xB0]
	0x033518EC ADD X10, X10, 0x8
	0x033518F0 LDUR X11, [X10 - 0x8]
	0x033518F4 CMP X11, X1
	0x033518F8 B.EQ 0x3351998
	0x033518FC SUBS X9, X9, 0x1
	0x03351900 ADD X10, X10, 0x10
	0x03351904 B.NE 0x33518F0
	0x03351908 MOV X0, X21
	0x0335190C MOV W2, W31
	0x03351910 BL 0x1C5C788
	0x03351914 B 0x33519A4
	0x03351918 MOV W0, W31
	0x0335191C B 0x335192C
	0x03351920 MOVN W0, 0x0
	0x03351924 B 0x335192C
	0x03351928 MOVZ W0, 0x1
	0x0335192C LDP X20, X19, [X31 + 0x20]
	0x03351930 LDP X22, X21, [X31 + 0x10]
	0x03351934 LDR X30, [X31], #0x30
	0x03351938 RET
	0x0335193C ADRP X21, 0xDD9000
	0x03351940 LDR X21, [X21 + 0x248]
	0x03351944 MOV X0, X20
	0x03351948 LDR X1, [X21]
	0x0335194C BL 0x1C16E00
	0x03351950 CBZ X0, 0x33519EC
	0x03351954 LDR X8, [X0]
	0x03351958 LDR X1, [X21]
	0x0335195C MOV X20, X0
	0x03351960 LDRH W9, [X8 + 0x12E]
	0x03351964 CBZ X9, 0x3351988
	0x03351968 LDR X10, [X8 + 0xB0]
	0x0335196C ADD X10, X10, 0x8
	0x03351970 LDUR X11, [X10 - 0x8]
	0x03351974 CMP X11, X1
	0x03351978 B.EQ 0x33519C4
	0x0335197C SUBS X9, X9, 0x1
	0x03351980 ADD X10, X10, 0x10
	0x03351984 B.NE 0x3351970
	0x03351988 MOV X0, X20
	0x0335198C MOV W2, W31
	0x03351990 BL 0x1C5C788
	0x03351994 B 0x33519D0
	0x03351998 LDRSW X9, [X10]
	0x0335199C ADD X8, X8, X9, 0x4, LSL
	0x033519A0 ADD X0, X8, 0x138

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x108C000
	009 Move W8, [X22+3519]
	010 Move X20, X2
	011 Move X21, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xDDA000
	018 Move X0, [X0+664]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+3519], W8
	022 Compare X21, 0
	023 JumpIfEqual {77}
	024 Move X23, X19
	025 Add X23, X23, 16
	026 Move X8, [X23]
	027 Move W9, [X23+8]
	028 Add W9, W9, 1
	029 Move [X23+8], W9
	030 Compare X8, 0
	031 JumpIfEqual {48}
	032 Move X0, [X8+16]
	033 Compare X0, 0
	034 JumpIfEqual {76}
	035 Move X24, X8
	036 Move X8, [X0]
	037 Move X1, X21
	038 Move X9, [X8+312]
	039 Move X2, [X8+320]
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfEqual {67}
	045 Move X8, [X24+32]
	046 Compare X8, 0
	047 JumpIfNotEqual {32}
	048 Move X24, X31
	049 Move X8, 0xDDA000
	050 Move X8, [X8+664]
	051 Move X0, [X8]
	052 Call 0x1C17F10
	053 Move X1, X31
	054 Move X22, X0
	055 Call Object..ctor, X0
	056 Compare X22, 0
	057 JumpIfEqual {76}
	058 Add X8, X24, 32
	059 NotImplemented "Instruction CMP not yet implemented."
	060 NotImplemented "Instruction CSEL not yet implemented."
	061 Move [X22+16], X21
	062 Move [X22+24], X20
	063 Move [X8], X22
	064 Move W8, [X19+28]
	065 Add W8, W8, 1
	066 Move [X19+28], W8
	067 Move [X24+24], X20
	068 Move X20, [X31+48]
	069 Move X19, [X31+56]
	070 Move X22, [X31+32]
	071 Move X21, [X31+40]
	072 Move X24, [X31+16]
	073 Move X23, [X31+24]
	074 Move X30, [X31+64]
	075 Return 
	076 Call 0x1C17F20
	077 Move X0, 0xDA8000
	078 Move X0, [X0+1320]
	079 Call 0x1C17D08
	080 Call 0x1C17F10
	081 Move X19, X0
	082 Move X0, 0xDCD000
	083 Move X0, [X0+112]
	084 Call 0x1C17D08
	085 Move X20, X0
	086 Move X0, 0xDDA000
	087 Move X0, [X0+648]
	088 Call 0x1C17D08
	089 Move X2, X0
	090 Move X0, X19
	091 Move X1, X20
	092 Move X3, X31
	093 Call ArgumentNullException..ctor, X0, X1, X2
	094 Move X0, 0xDDA000
	095 Move X0, [X0+672]
	096 Call 0x1C17D08
	097 Move X1, X0
	098 Move X0, X19
	099 Call 0x1C17DEC

Method: System.Int32 get_Count()

Disassembly:
	0x033519AC MOV X1, X20
	0x033519B0 MOV X2, X19

ISIL:
	001 Move W0, [X0+28]
	002 Return X0

Method: System.Collections.ICollection get_Keys()

Disassembly:
	0x033519B4 LDP X20, X19, [X31 + 0x20]
	0x033519B8 LDP X22, X21, [X31 + 0x10]
	0x033519BC LDR X30, [X31], #0x30
	0x033519C0 BR X4
	0x033519C4 LDRSW X9, [X10]
	0x033519C8 ADD X8, X8, X9, 0x4, LSL
	0x033519CC ADD X0, X8, 0x138
	0x033519D0 LDP X3, X2, [X0]
	0x033519D4 MOV X0, X20
	0x033519D8 MOV X1, X19
	0x033519DC LDP X20, X19, [X31 + 0x20]
	0x033519E0 LDP X22, X21, [X31 + 0x10]
	0x033519E4 LDR X30, [X31], #0x30
	0x033519E8 BR X3
	0x033519EC ADRP X0, 0xDAA000
	0x033519F0 LDR X0, [X0 + 0x578]
	0x033519F4 BL 0x1C16D08
	0x033519F8 BL 0x1C16F10
	0x033519FC MOV X19, X0
	0x03351A00 ADRP X0, 0xDD9000
	0x03351A04 LDR X0, [X0 + 0x250]
	0x03351A08 BL 0x1C16D08
	0x03351A0C MOV X1, X0
	0x03351A10 MOV X0, X19
	0x03351A14 MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x108C000
	006 Move X21, 0xDDA000
	007 Move W8, [X20+3520]
	008 Move X21, [X21+680]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDDA000
	015 Move X0, [X0+680]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3520], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X31
	022 Move X20, X0
	023 Call Object..ctor, X0
	024 Move W8, 1
	025 Move [X20+16], X19
	026 Move [X20+24], W8
	027 Move X0, X20
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0

Method: System.Boolean get_IsSynchronized()

Disassembly:
	0x03351A48 MOV X20, X0
	0x03351A4C TBNZ X8, 0x0, 0x3351A64

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Object get_SyncRoot()

Disassembly:
	0x03351A50 ADRP X0, 0xDD9000
	0x03351A54 LDR X0, [X0 + 0x338]
	0x03351A58 BL 0x1C16CF4
	0x03351A5C MOVZ W8, 0x1
	0x03351A60 STRB W8, [X21 + 0xDCA]
	0x03351A64 CBZ X19, 0x3351AF4
	0x03351A68 LDR X20, [X20 + 0x10]
	0x03351A6C CBZ X20, 0x3351AB8
	0x03351A70 ADRP X10, 0xDD9000
	0x03351A74 LDR X8, [X20]
	0x03351A78 LDR X10, [X10 + 0x338]
	0x03351A7C LDRH W9, [X8 + 0x12E]
	0x03351A80 LDR X1, [X10]
	0x03351A84 CBZ X9, 0x3351AA8
	0x03351A88 LDR X10, [X8 + 0xB0]
	0x03351A8C ADD X10, X10, 0x8
	0x03351A90 LDUR X11, [X10 - 0x8]
	0x03351A94 CMP X11, X1
	0x03351A98 B.EQ 0x3351AD0
	0x03351A9C SUBS X9, X9, 0x1
	0x03351AA0 ADD X10, X10, 0x10
	0x03351AA4 B.NE 0x3351A90
	0x03351AA8 MOV X0, X20
	0x03351AAC MOV W2, W31
	0x03351AB0 BL 0x1C5C788
	0x03351AB4 B 0x3351ADC
	0x03351AB8 LDR X8, [X19]
	0x03351ABC MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x108C000
	005 Move W8, [X20+3521]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDA9000
	012 Move X0, [X0+3264]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3521], W8
	016 Add X19, X19, 32
	017 Move X0, [X19]
	018 Compare X0, 0
	019 JumpIfNotEqual {32}
	020 Move X8, 0xDA9000
	021 Move X8, [X8+3264]
	022 Move X0, [X8]
	023 Call 0x1C17F10
	024 Move X1, X31
	025 Move X20, X0
	026 Call Object..ctor, X0
	027 Move X0, X19
	028 Move X1, X20
	029 Move X2, X31
	030 Call 0x1C25138
	031 Move X0, [X19]
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return X0

Method: System.Collections.ICollection get_Values()

Disassembly:
	0x03351AC0 LDP X20, X19, [X31 + 0x10]
	0x03351AC4 LDP X2, X1, [X8 + 0x158]
	0x03351AC8 LDP X30, X21, [X31], #0x20
	0x03351ACC BR X2
	0x03351AD0 LDRSW X9, [X10]
	0x03351AD4 ADD X8, X8, X9, 0x4, LSL
	0x03351AD8 ADD X0, X8, 0x138
	0x03351ADC LDP X3, X2, [X0]
	0x03351AE0 MOV X0, X20
	0x03351AE4 MOV X1, X19
	0x03351AE8 LDP X20, X19, [X31 + 0x10]
	0x03351AEC LDP X30, X21, [X31], #0x20
	0x03351AF0 BR X3
	0x03351AF4 ADRP X0, 0xDA7000
	0x03351AF8 LDR X0, [X0 + 0x528]
	0x03351AFC BL 0x1C16D08
	0x03351B00 BL 0x1C16F10
	0x03351B04 MOV X19, X0
	0x03351B08 ADRP X0, 0xDAD000
	0x03351B0C LDR X0, [X0 + 0x8A8]
	0x03351B10 BL 0x1C16D08
	0x03351B14 MOV X1, X0
	0x03351B18 MOV X0, X19
	0x03351B1C MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x108C000
	006 Move X21, 0xDDA000
	007 Move W8, [X20+3522]
	008 Move X21, [X21+680]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDDA000
	015 Move X0, [X0+680]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3522], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X31
	022 Move X20, X0
	023 Call Object..ctor, X0
	024 Move [X20+16], X19
	025 Move [X20+24], W31
	026 Move X0, X20
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.Void Add(System.Object key, System.Object value)

Disassembly:
	0x03351B20 BL 0x330E100
	0x03351B24 ADRP X0, 0xDD9000
	0x03351B28 LDR X0, [X0 + 0x340]
	0x03351B2C BL 0x1C16D08
	0x03351B30 MOV X1, X0
	0x03351B34 MOV X0, X19
	0x03351B38 BL 0x1C16DEC
	0x03351B3C STP X30, X21, [X31 - 0x20]!
	0x03351B40 STP X20, X19, [X31 + 0x10]
	0x03351B44 ADRP X21, 0x108B000
	0x03351B48 ADRP X20, 0xDA4000
	0x03351B4C LDRB W8, [X21 + 0xDCB]
	0x03351B50 LDR X20, [X20 + 0xC48]
	0x03351B54 MOV X19, X0
	0x03351B58 TBNZ X8, 0x0, 0x3351B70
	0x03351B5C ADRP X0, 0xDA4000
	0x03351B60 LDR X0, [X0 + 0xC48]
	0x03351B64 BL 0x1C16CF4
	0x03351B68 MOVZ W8, 0x1
	0x03351B6C STRB W8, [X21 + 0xDCB]
	0x03351B70 MOV X0, X19
	0x03351B74 MOV X1, X31
	0x03351B78 BL 0x33BDD8C
	0x03351B7C LDR X0, [X20]
	0x03351B80 LDR W8, [X0 + 0xE0]
	0x03351B84 CBNZ W8, 0x3351B8C
	0x03351B88 BL 0x1C16DFC
	0x03351B8C MOV X0, X31
	0x03351B90 BL 0x33387A0
	0x03351B94 CBZ X0, 0x3351BB4
	0x03351B98 LDR X8, [X0]
	0x03351B9C LDP X9, X1, [X8 + 0x1F8]
	0x03351BA0 BLR X9
	0x03351BA4 STR X0, [X19 + 0x10]
	0x03351BA8 LDP X20, X19, [X31 + 0x10]
	0x03351BAC LDP X30, X21, [X31], #0x20
	0x03351BB0 RET
	0x03351BB4 BL 0x1C16F20
	0x03351BB8 STR X30, [X31 - 0x20]!
	0x03351BBC STP X20, X19, [X31 + 0x10]
	0x03351BC0 MOV X20, X1
	0x03351BC4 MOV X1, X31
	0x03351BC8 MOV X19, X0
	0x03351BCC BL 0x33BDD8C
	0x03351BD0 CBZ X20, 0x3351BF4
	0x03351BD4 LDR X8, [X20]
	0x03351BD8 MOV X0, X20
	0x03351BDC LDP X9, X1, [X8 + 0x1F8]
	0x03351BE0 BLR X9
	0x03351BE4 STR X0, [X19 + 0x10]
	0x03351BE8 LDP X20, X19, [X31 + 0x10]
	0x03351BEC LDR X30, [X31], #0x20
	0x03351BF0 RET
	0x03351BF4 ADRP X0, 0xDA7000
	0x03351BF8 LDR X0, [X0 + 0x528]
	0x03351BFC BL 0x1C16D08
	0x03351C00 BL 0x1C16F10
	0x03351C04 MOV X19, X0
	0x03351C08 ADRP X0, 0xDD0000
	0x03351C0C LDR X0, [X0 + 0xFF0]
	0x03351C10 BL 0x1C16D08
	0x03351C14 MOV X1, X0
	0x03351C18 MOV X0, X19
	0x03351C1C MOV X2, X31
	0x03351C20 BL 0x330E100
	0x03351C24 ADRP X0, 0xDD9000
	0x03351C28 LDR X0, [X0 + 0x348]
	0x03351C2C BL 0x1C16D08
	0x03351C30 MOV X1, X0
	0x03351C34 MOV X0, X19
	0x03351C38 BL 0x1C16DEC
	0x03351C3C STP X30, X23, [X31 - 0x30]!
	0x03351C40 STP X22, X21, [X31 + 0x10]
	0x03351C44 STP X20, X19, [X31 + 0x20]
	0x03351C48 ADRP X22, 0x108B000
	0x03351C4C ADRP X23, 0xDA4000
	0x03351C50 LDRB W8, [X22 + 0xDCC]
	0x03351C54 LDR X23, [X23 + 0x278]
	0x03351C58 MOV X19, X2
	0x03351C5C MOV X20, X1
	0x03351C60 MOV X21, X0
	0x03351C64 TBNZ X8, 0x0, 0x3351C88
	0x03351C68 ADRP X0, 0xDCB000
	0x03351C6C LDR X0, [X0 + 0xD30]
	0x03351C70 BL 0x1C16CF4
	0x03351C74 ADRP X0, 0xDA4000
	0x03351C78 LDR X0, [X0 + 0x278]
	0x03351C7C BL 0x1C16CF4
	0x03351C80 MOVZ W8, 0x1
	0x03351C84 STRB W8, [X22 + 0xDCC]
	0x03351C88 LDR X8, [X23]
	0x03351C8C CBZ X20, 0x3351CA4
	0x03351C90 LDR X9, [X20]
	0x03351C94 CMP X9, X8
	0x03351C98 CSEL X1, X20, X31, EQ
	0x03351C9C CBNZ X19, 0x3351CAC
	0x03351CA0 B 0x3351CE4
	0x03351CA4 MOV X1, X31
	0x03351CA8 CBZ X19, 0x3351CE4
	0x03351CAC LDR X9, [X19]
	0x03351CB0 CMP X9, X8
	0x03351CB4 CSEL X2, X19, X31, EQ

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x108C000
	009 Move W8, [X22+3523]
	010 Move X21, X2
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xDDA000
	018 Move X0, [X0+664]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+3523], W8
	022 Compare X19, 0
	023 JumpIfEqual {99}
	024 Move X23, X20
	025 Add X23, X23, 16
	026 Move X8, [X23]
	027 Move W9, [X23+8]
	028 Add W9, W9, 1
	029 Move [X23+8], W9
	030 Compare X8, 0
	031 JumpIfEqual {48}
	032 Move X0, [X8+16]
	033 Compare X0, 0
	034 JumpIfEqual {75}
	035 Move X24, X8
	036 Move X8, [X0]
	037 Move X1, X19
	038 Move X9, [X8+312]
	039 Move X2, [X8+320]
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfEqual {76}
	045 Move X8, [X24+32]
	046 Compare X8, 0
	047 JumpIfNotEqual {32}
	048 Move X24, X31
	049 Move X8, 0xDDA000
	050 Move X8, [X8+664]
	051 Move X0, [X8]
	052 Call 0x1C17F10
	053 Move X1, X31
	054 Move X22, X0
	055 Call Object..ctor, X0
	056 Compare X22, 0
	057 JumpIfEqual {75}
	058 Add X8, X24, 32
	059 NotImplemented "Instruction CMP not yet implemented."
	060 NotImplemented "Instruction CSEL not yet implemented."
	061 Move [X22+16], X19
	062 Move [X22+24], X21
	063 Move [X8], X22
	064 Move W8, [X20+28]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X24, [X31+16]
	068 Move X23, [X31+24]
	069 Add W8, W8, 1
	070 Move [X20+28], W8
	071 Move X20, [X31+48]
	072 Move X19, [X31+56]
	073 Move X30, [X31+64]
	074 Return 
	075 Call 0x1C17F20
	076 Move X0, 0xDDA000
	077 Move X20, [X24+16]
	078 Move X0, [X0+688]
	079 Call 0x1C17D08
	080 Move X1, X20
	081 Move X2, X19
	082 Move X3, X31
	083 Call SR.Format, X0, X1, X2
	084 Move X19, X0
	085 Move X0, 0xDAB000
	086 Move X0, [X0+1400]
	087 Call 0x1C17D08
	088 Call 0x1C17F10
	089 Move X1, X19
	090 Move X2, X31
	091 Move X20, X0
	092 Call ArgumentException..ctor, X0, X1
	093 Move X0, 0xDDA000
	094 Move X0, [X0+696]
	095 Call 0x1C17D08
	096 Move X1, X0
	097 Move X0, X20
	098 Call 0x1C17DEC
	099 Move X0, 0xDA8000
	100 Move X0, [X0+1320]
	101 Call 0x1C17D08
	102 Call 0x1C17F10
	103 Move X19, X0
	104 Move X0, 0xDCD000
	105 Move X0, [X0+112]
	106 Call 0x1C17D08
	107 Move X20, X0
	108 Move X0, 0xDDA000
	109 Move X0, [X0+648]
	110 Call 0x1C17D08
	111 Move X2, X0
	112 Move X0, X19
	113 Move X1, X20
	114 Move X3, X31
	115 Call ArgumentNullException..ctor, X0, X1, X2
	116 Move X0, 0xDDA000
	117 Move X0, [X0+696]
	118 Call 0x1C17D08
	119 Move X1, X0
	120 Move X0, X19
	121 Call 0x1C17DEC

Method: System.Boolean Contains(System.Object key)

Disassembly:
	0x03351CB8 CBZ X1, 0x3351CE4
	0x03351CBC CBZ X2, 0x3351CE4
	0x03351CC0 LDR X0, [X21 + 0x10]
	0x03351CC4 CBZ X0, 0x3351D24
	0x03351CC8 LDR X8, [X0]
	0x03351CCC LDP X20, X19, [X31 + 0x20]
	0x03351CD0 LDP X22, X21, [X31 + 0x10]
	0x03351CD4 MOVZ W3, 0x1
	0x03351CD8 LDP X5, X4, [X8 + 0x1A8]
	0x03351CDC LDP X30, X23, [X31], #0x30
	0x03351CE0 BR X5
	0x03351CE4 ADRP X21, 0xDCB000
	0x03351CE8 LDR X21, [X21 + 0xD30]
	0x03351CEC LDR X0, [X21]
	0x03351CF0 LDR W8, [X0 + 0xE0]
	0x03351CF4 CBNZ W8, 0x3351D00
	0x03351CF8 BL 0x1C16DFC
	0x03351CFC LDR X0, [X21]
	0x03351D00 LDR X8, [X0 + 0xB8]
	0x03351D04 LDR X0, [X8]
	0x03351D08 CBZ X0, 0x3351D24
	0x03351D0C MOV X1, X20
	0x03351D10 MOV X2, X19
	0x03351D14 LDP X20, X19, [X31 + 0x20]
	0x03351D18 LDP X22, X21, [X31 + 0x10]
	0x03351D1C LDP X30, X23, [X31], #0x30
	0x03351D20 B 0x3350090
	0x03351D24 BL 0x1C16F20
	0x03351D28 STP X30, X21, [X31 - 0x20]!
	0x03351D2C STP X20, X19, [X31 + 0x10]
	0x03351D30 ADRP X21, 0x108B000
	0x03351D34 ADRP X20, 0xDA4000
	0x03351D38 LDRB W8, [X21 + 0xDCD]
	0x03351D3C LDR X20, [X20 + 0xC48]
	0x03351D40 MOV X19, X0
	0x03351D44 TBNZ X8, 0x0, 0x3351D5C
	0x03351D48 ADRP X0, 0xDA4000
	0x03351D4C LDR X0, [X0 + 0xC48]
	0x03351D50 BL 0x1C16CF4
	0x03351D54 MOVZ W8, 0x1
	0x03351D58 STRB W8, [X21 + 0xDCD]
	0x03351D5C MOV X0, X19
	0x03351D60 MOV X1, X31
	0x03351D64 BL 0x33BDD8C
	0x03351D68 LDR X0, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {32}
	006 Move X20, [X0+16]
	007 Compare X20, 0
	008 JumpIfEqual {25}
	009 Move X19, X1
	010 Move X0, [X20+16]
	011 Compare X0, 0
	012 JumpIfEqual {31}
	013 Move X8, [X0]
	014 Move X1, X19
	015 Move X9, [X8+312]
	016 Move X2, [X8+320]
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move TEMP, X0
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {26}
	022 Move X20, [X20+32]
	023 Compare X20, 0
	024 JumpIfNotEqual {10}
	025 Move W0, W31
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 And W0, W0, 1
	029 Move X30, [X31+32]
	030 Return X0
	031 Call 0x1C17F20
	032 Move X0, 0xDA8000
	033 Move X0, [X0+1320]
	034 Call 0x1C17D08
	035 Call 0x1C17F10
	036 Move X19, X0
	037 Move X0, 0xDCD000
	038 Move X0, [X0+112]
	039 Call 0x1C17D08
	040 Move X20, X0
	041 Move X0, 0xDDA000
	042 Move X0, [X0+648]
	043 Call 0x1C17D08
	044 Move X2, X0
	045 Move X0, X19
	046 Move X1, X20
	047 Move X3, X31
	048 Call ArgumentNullException..ctor, X0, X1, X2
	049 Move X0, 0xDDA000
	050 Move X0, [X0+704]
	051 Call 0x1C17D08
	052 Move X1, X0
	053 Move X0, X19
	054 Call 0x1C17DEC

Method: System.Void CopyTo(System.Array array, System.Int32 index)

Disassembly:
	0x03351D6C LDR W8, [X0 + 0xE0]
	0x03351D70 CBNZ W8, 0x3351D78
	0x03351D74 BL 0x1C16DFC
	0x03351D78 MOV X0, X31
	0x03351D7C BL 0x33387A0
	0x03351D80 CBZ X0, 0x3351DA0
	0x03351D84 LDR X8, [X0]
	0x03351D88 LDP X9, X1, [X8 + 0x1F8]
	0x03351D8C BLR X9
	0x03351D90 STR X0, [X19 + 0x10]
	0x03351D94 LDP X20, X19, [X31 + 0x10]
	0x03351D98 LDP X30, X21, [X31], #0x20
	0x03351D9C RET
	0x03351DA0 BL 0x1C16F20
	0x03351DA4 STR X30, [X31 - 0x20]!
	0x03351DA8 STP X20, X19, [X31 + 0x10]
	0x03351DAC MOV X20, X1
	0x03351DB0 MOV X1, X31
	0x03351DB4 MOV X19, X0
	0x03351DB8 BL 0x33BDD8C
	0x03351DBC CBZ X20, 0x3351DE0
	0x03351DC0 LDR X8, [X20]
	0x03351DC4 MOV X0, X20
	0x03351DC8 LDP X9, X1, [X8 + 0x1F8]
	0x03351DCC BLR X9
	0x03351DD0 STR X0, [X19 + 0x10]
	0x03351DD4 LDP X20, X19, [X31 + 0x10]
	0x03351DD8 LDR X30, [X31], #0x20
	0x03351DDC RET
	0x03351DE0 ADRP X0, 0xDA7000
	0x03351DE4 LDR X0, [X0 + 0x528]
	0x03351DE8 BL 0x1C16D08
	0x03351DEC BL 0x1C16F10
	0x03351DF0 MOV X19, X0
	0x03351DF4 ADRP X0, 0xDD0000
	0x03351DF8 LDR X0, [X0 + 0xFF0]
	0x03351DFC BL 0x1C16D08
	0x03351E00 MOV X1, X0
	0x03351E04 MOV X0, X19
	0x03351E08 MOV X2, X31
	0x03351E0C BL 0x330E100
	0x03351E10 ADRP X0, 0xDD9000
	0x03351E14 LDR X0, [X0 + 0x350]
	0x03351E18 BL 0x1C16D08
	0x03351E1C MOV X1, X0
	0x03351E20 MOV X0, X19
	0x03351E24 BL 0x1C16DEC
	0x03351E28 STP X30, X21, [X31 - 0x20]!
	0x03351E2C STP X20, X19, [X31 + 0x10]
	0x03351E30 ADRP X21, 0x108B000
	0x03351E34 LDRB W8, [X21 + 0xDCE]
	0x03351E38 MOV X19, X1
	0x03351E3C MOV X20, X0
	0x03351E40 TBNZ X8, 0x0, 0x3351E58
	0x03351E44 ADRP X0, 0xDA4000
	0x03351E48 LDR X0, [X0 + 0x278]
	0x03351E4C BL 0x1C16CF4
	0x03351E50 MOVZ W8, 0x1
	0x03351E54 STRB W8, [X21 + 0xDCE]
	0x03351E58 CBZ X19, 0x3351EB0
	0x03351E5C ADRP X8, 0xDA4000
	0x03351E60 LDR X8, [X8 + 0x278]
	0x03351E64 LDR X9, [X8]
	0x03351E68 LDR X8, [X19]
	0x03351E6C CMP X8, X9
	0x03351E70 CSEL X1, X19, X31, EQ
	0x03351E74 CBZ X1, 0x3351E9C
	0x03351E78 LDR X0, [X20 + 0x10]
	0x03351E7C CBZ X0, 0x3351EF8
	0x03351E80 LDR X8, [X0]
	0x03351E84 LDP X20, X19, [X31 + 0x10]
	0x03351E88 MOVZ W2, 0x1
	0x03351E8C LDR X4, [X8 + 0x218]
	0x03351E90 LDR X3, [X8 + 0x220]
	0x03351E94 LDP X30, X21, [X31], #0x20
	0x03351E98 BR X4
	0x03351E9C LDP X2, X1, [X8 + 0x158]
	0x03351EA0 MOV X0, X19
	0x03351EA4 LDP X20, X19, [X31 + 0x10]
	0x03351EA8 LDP X30, X21, [X31], #0x20
	0x03351EAC BR X2
	0x03351EB0 ADRP X0, 0xDA7000
	0x03351EB4 LDR X0, [X0 + 0x528]
	0x03351EB8 BL 0x1C16D08
	0x03351EBC BL 0x1C16F10
	0x03351EC0 MOV X19, X0
	0x03351EC4 ADRP X0, 0xDAD000
	0x03351EC8 LDR X0, [X0 + 0x8A8]
	0x03351ECC BL 0x1C16D08
	0x03351ED0 MOV X1, X0
	0x03351ED4 MOV X0, X19
	0x03351ED8 MOV X2, X31
	0x03351EDC BL 0x330E100
	0x03351EE0 ADRP X0, 0xDD9000
	0x03351EE4 LDR X0, [X0 + 0x358]
	0x03351EE8 BL 0x1C16D08
	0x03351EEC MOV X1, X0
	0x03351EF0 MOV X0, X19
	0x03351EF4 BL 0x1C16DEC
	0x03351EF8 BL 0x1C16F20
	0x03351EFC STP X30, X21, [X31 - 0x20]!
	0x03351F00 STP X20, X19, [X31 + 0x10]
	0x03351F04 ADRP X21, 0x108B000
	0x03351F08 ADRP X20, 0xDCF000
	0x03351F0C LDRB W8, [X21 + 0xDCF]
	0x03351F10 LDR X20, [X20 + 0xBA0]
	0x03351F14 MOV X19, X0
	0x03351F18 TBNZ X8, 0x0, 0x3351F30
	0x03351F1C ADRP X0, 0xDCF000
	0x03351F20 LDR X0, [X0 + 0xBA0]
	0x03351F24 BL 0x1C16CF4
	0x03351F28 MOVZ W8, 0x1
	0x03351F2C STRB W8, [X21 + 0xDCF]
	0x03351F30 MOV X0, X19
	0x03351F34 MOV X1, X31
	0x03351F38 BL 0x33BDD8C
	0x03351F3C LDR X0, [X20]
	0x03351F40 BL 0x1C16F10

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X22, 0x108C000
	008 Move W8, [X22+3524]
	009 Move W19, W2
	010 Move X20, X1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xDAB000
	017 Move X0, [X0+3856]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3524], W8
	021 Compare X20, 0
	022 JumpIfEqual {63}
	023 Move X0, X20
	024 Move X1, X31
	025 Call Array.get_Rank, X0
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move TEMP, X19
	028 And TEMP, TEMP, -2147483648
	029 Compare TEMP, -2147483648
	030 JumpIfEqual {87}
	031 Move X0, X20
	032 Move X1, X31
	033 Call Array.get_Length, X0
	034 Move W8, [X21+28]
	035 Subtract W9, W0, W19
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X21, [X21+16]
	038 Compare X21, 0
	039 JumpIfEqual {56}
	040 Move X22, 0xDAB000
	041 Move X22, [X22+3856]
	042 Move V0, [X21+1]
	043 Move X0, [X22]
	044 Add X1, X31, 0
	045 Move [X31], V0
	046 Call 0x1C17E04
	047 Move X1, X0
	048 Move X0, X20
	049 Move W2, W19
	050 Move X3, X31
	051 Call Array.SetValue, X0, X1, X2
	052 Move X21, [X21+32]
	053 Add W19, W19, 1
	054 Compare X21, 0
	055 JumpIfNotEqual {42}
	056 Move X20, [X31+48]
	057 Move X19, [X31+56]
	058 Move X22, [X31+32]
	059 Move X21, [X31+40]
	060 Move X30, [X31+16]
	061 Add X31, X31, 64
	062 Return 
	063 Move X0, 0xDA8000
	064 Move X0, [X0+1320]
	065 Call 0x1C17D08
	066 Call 0x1C17F10
	067 Move X19, X0
	068 Move X0, 0xDCB000
	069 Move X0, [X0+1600]
	070 Call 0x1C17D08
	071 Move X1, X0
	072 Move X0, X19
	073 Move X2, X31
	074 Call ArgumentNullException..ctor, X0, X1
	075 Move X0, 0xDAB000
	076 Move X0, [X0+1400]
	077 Call 0x1C17D08
	078 Call 0x1C17F10
	079 Move X19, X0
	080 Move X0, 0xDCC000
	081 Move X0, [X0+776]
	082 Call 0x1C17D08
	083 Move X1, X0
	084 Move X0, X19
	085 Move X2, X31
	086 Call ArgumentException..ctor, X0, X1
	087 Move X0, 0xDAB000
	088 Move X0, [X0+1888]
	089 Call 0x1C17D08
	090 Call 0x1C17F10
	091 Move X19, X0
	092 Move X0, 0xDAE000
	093 Move X0, [X0+304]
	094 Call 0x1C17D08
	095 Move X20, X0
	096 Move X0, 0xDCB000
	097 Move X0, [X0+1648]
	098 Call 0x1C17D08
	099 Move X2, X0
	100 Move X0, X19
	101 Move X1, X20
	102 Move X3, X31
	103 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	104 Move X0, 0xDAB000
	105 Move X0, [X0+1400]
	106 Call 0x1C17D08
	107 Call 0x1C17F10
	108 Move X19, X0
	109 Move X0, 0xDCB000
	110 Move X0, [X0+1632]
	111 Call 0x1C17D08
	112 Move X20, X0
	113 Move X0, 0xDAE000
	114 Move X0, [X0+304]
	115 Call 0x1C17D08
	116 Move X2, X0
	117 Move X0, X19
	118 Move X1, X20
	119 Move X3, X31
	120 Call ArgumentException..ctor, X0, X1, X2
	121 Move X0, 0xDDA000
	122 Move X0, [X0+712]
	123 Call 0x1C17D08
	124 Move X1, X0
	125 Move X0, X19
	126 Call 0x1C17DEC

Method: System.Collections.IDictionaryEnumerator GetEnumerator()

Disassembly:
	0x03351F44 MOV X20, X0
	0x03351F48 BL 0x3351F5C
	0x03351F4C STR X20, [X19 + 0x10]
	0x03351F50 LDP X20, X19, [X31 + 0x10]
	0x03351F54 LDP X30, X21, [X31], #0x20
	0x03351F58 RET
	0x03351F5C STP X30, X21, [X31 - 0x20]!
	0x03351F60 STP X20, X19, [X31 + 0x10]
	0x03351F64 ADRP X21, 0x108B000
	0x03351F68 ADRP X20, 0xDA2000
	0x03351F6C LDRB W8, [X21 + 0xDF5]
	0x03351F70 LDR X20, [X20 + 0x9C8]
	0x03351F74 MOV X19, X0
	0x03351F78 TBNZ X8, 0x0, 0x3351F90
	0x03351F7C ADRP X0, 0xDA2000
	0x03351F80 LDR X0, [X0 + 0x9C8]
	0x03351F84 BL 0x1C16CF4
	0x03351F88 MOVZ W8, 0x1
	0x03351F8C STRB W8, [X21 + 0xDF5]
	0x03351F90 MOV X0, X19
	0x03351F94 MOV X1, X31
	0x03351F98 BL 0x33BDD8C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x108C000
	006 Move X21, 0xDDA000
	007 Move W8, [X20+3525]
	008 Move X21, [X21+720]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDDA000
	015 Move X0, [X0+720]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3525], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X19
	022 Move X20, X0
	023 Call NodeEnumerator..ctor, X0, X1
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x03351FE0 BL 0x1C5C684
	0x03351FE4 LDR X8, [X0 + 0xB8]
	0x03351FE8 LDR X8, [X8]
	0x03351FEC STR X8, [X19 + 0x10]
	0x03351FF0 LDP X20, X19, [X31 + 0x10]
	0x03351FF4 LDP X30, X21, [X31], #0x20
	0x03351FF8 RET
	0x03351FFC LDR X0, [X0 + 0x10]
	0x03352000 RET
	0x03352004 STR X30, [X31 - 0x10]!
	0x03352008 LDR X0, [X0 + 0x10]
	0x0335200C CBZ X0, 0x3352024
	0x03352010 LDR X8, [X0]
	0x03352014 LDR X2, [X8 + 0x298]
	0x03352018 LDR X1, [X8 + 0x2A0]
	0x0335201C LDR X30, [X31], #0x10
	0x03352020 BR X2
	0x03352024 BL 0x1C16F20
	0x03352028 STP X30, X19, [X31 - 0x10]!
	0x0335202C LDR X8, [X0]
	0x03352030 MOV X19, X0
	0x03352034 LDR X9, [X8 + 0x298]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x108C000
	006 Move X21, 0xDDA000
	007 Move W8, [X20+3526]
	008 Move X21, [X21+720]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDD9000
	015 Move X0, [X0+720]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3526], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X19
	022 Move X20, X0
	023 Call NodeEnumerator..ctor, X0, X1
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: System.Void Remove(System.Object key)

Disassembly:
	0x03352038 LDR X1, [X8 + 0x2A0]
	0x0335203C BLR X9
	0x03352040 LDR X0, [X19 + 0x10]
	0x03352044 CBZ X0, 0x3352070
	0x03352048 LDR X8, [X0]
	0x0335204C LDR X9, [X8 + 0x328]
	0x03352050 LDR X1, [X8 + 0x330]
	0x03352054 BLR X9
	0x03352058 LDR X8, [X19]
	0x0335205C MOV X0, X19
	0x03352060 LDR X2, [X8 + 0x2E8]
	0x03352064 LDR X1, [X8 + 0x2F0]
	0x03352068 LDP X30, X19, [X31], #0x10
	0x0335206C BR X2
	0x03352070 BL 0x1C16F20
	0x03352074 STR X30, [X31 - 0x30]!
	0x03352078 STP X22, X21, [X31 + 0x10]
	0x0335207C STP X20, X19, [X31 + 0x20]
	0x03352080 TBNZ X1, 0x1F, 0x335214C
	0x03352084 MOV X20, X0
	0x03352088 LDR X0, [X0 + 0x10]
	0x0335208C CBZ X0, 0x3352148
	0x03352090 LDR X8, [X0]
	0x03352094 MOV W19, W1
	0x03352098 LDR X9, [X8 + 0x298]
	0x0335209C LDR X1, [X8 + 0x2A0]
	0x033520A0 BLR X9
	0x033520A4 CMP W0, W19
	0x033520A8 B.LE 0x335214C
	0x033520AC LDR X0, [X20 + 0x10]
	0x033520B0 CBZ X0, 0x3352148
	0x033520B4 LDR X8, [X0]
	0x033520B8 MOV W1, W19
	0x033520BC LDR X9, [X8 + 0x2E8]
	0x033520C0 LDR X2, [X8 + 0x2F0]
	0x033520C4 BLR X9
	0x033520C8 LDR X8, [X20]
	0x033520CC MOV X21, X0
	0x033520D0 MOV X0, X20
	0x033520D4 MOV X1, X21
	0x033520D8 LDR X9, [X8 + 0x2B8]
	0x033520DC LDR X2, [X8 + 0x2C0]
	0x033520E0 BLR X9
	0x033520E4 LDR X8, [X20]
	0x033520E8 MOV X0, X20
	0x033520EC MOV W1, W19
	0x033520F0 MOV X2, X21
	0x033520F4 LDR X9, [X8 + 0x2A8]
	0x033520F8 LDR X3, [X8 + 0x2B0]
	0x033520FC BLR X9
	0x03352100 LDR X0, [X20 + 0x10]
	0x03352104 CBZ X0, 0x3352148
	0x03352108 LDR X8, [X0]
	0x0335210C MOV W1, W19
	0x03352110 LDR X9, [X8 + 0x3D8]
	0x03352114 LDR X2, [X8 + 0x3E0]
	0x03352118 BLR X9
	0x0335211C LDR X8, [X20]
	0x03352120 LDR X9, [X8 + 0x2F8]
	0x03352124 LDR X3, [X8 + 0x300]
	0x03352128 MOV X0, X20
	0x0335212C MOV W1, W19
	0x03352130 MOV X2, X21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Compare X1, 0
	008 JumpIfEqual {55}
	009 Move X21, X0
	010 Add X21, X21, 16
	011 Move X8, [X21]
	012 Move X19, X0
	013 Move W9, [X21+8]
	014 Add W9, W9, 1
	015 Move [X21+8], W9
	016 Compare X8, 0
	017 JumpIfEqual {47}
	018 Move X20, X1
	019 Move X22, X31
	020 Move X0, [X8+16]
	021 Compare X0, 0
	022 JumpIfEqual {54}
	023 Move X23, X8
	024 Move X8, [X0]
	025 Move X1, X20
	026 Move X9, [X8+312]
	027 Move X2, [X8+320]
	028 NotImplemented "Instruction BLR not yet implemented."
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {37}
	033 Move X8, [X23+32]
	034 Move X22, X23
	035 Compare X8, 0
	036 JumpIfNotEqual {20}
	037 Move X9, [X21]
	038 Move X8, [X23+32]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Compare X22, 0
	041 JumpIfEqual {54}
	042 Add X21, X22, 32
	043 Move [X21], X8
	044 Move W8, [X19+28]
	045 Subtract W8, W8, 1
	046 Move [X19+28], W8
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Return 
	054 Call 0x1C17F20
	055 Move X0, 0xDA7000
	056 Move X0, [X0+1320]
	057 Call 0x1C17D08
	058 Call 0x1C17F10
	059 Move X19, X0
	060 Move X0, 0xDCC000
	061 Move X0, [X0+112]
	062 Call 0x1C17D08
	063 Move X20, X0
	064 Move X0, 0xDD9000
	065 Move X0, [X0+648]
	066 Call 0x1C17D08
	067 Move X2, X0
	068 Move X0, X19
	069 Move X1, X20
	070 Move X3, X31
	071 Call ArgumentNullException..ctor, X0, X1, X2
	072 Move X0, 0xDD9000
	073 Move X0, [X0+728]
	074 Call 0x1C17D08
	075 Move X1, X0
	076 Move X0, X19
	077 Call 0x1C17DEC

