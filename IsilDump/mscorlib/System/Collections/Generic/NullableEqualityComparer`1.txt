Type: System.Collections.Generic.NullableEqualityComparer`1

Method: System.Boolean Equals(System.Nullable`1<T> x, System.Nullable`1<T> y)

Disassembly:
	0x0242BFC0 BL 0x1C5C684
	0x0242BFC4 LDR X8, [X0 + 0xC0]
	0x0242BFC8 MOV X0, X21
	0x0242BFCC MOV X1, X19
	0x0242BFD0 LDP X20, X19, [X31 + 0x20]
	0x0242BFD4 LDR X2, [X8 + 0x10]
	0x0242BFD8 LDP X22, X21, [X31 + 0x10]
	0x0242BFDC LDR X30, [X31], #0x30
	0x0242BFE0 B 0x2B87E18
	0x0242BFE4 LDP X20, X19, [X31 + 0x20]
	0x0242BFE8 LDP X22, X21, [X31 + 0x10]
	0x0242BFEC AND W0, W10, W8, 0x0
	0x0242BFF0 LDR X30, [X31], #0x30
	0x0242BFF4 RET
	0x0242BFF8 STP X30, X21, [X31 - 0x20]!
	0x0242BFFC STP X20, X19, [X31 + 0x10]
	0x0242C000 ADRP X21, 0x1FAD000
	0x0242C004 LDRB W8, [X21 + 0x9DC]
	0x0242C008 MOV X19, X1
	0x0242C00C MOV X20, X0
	0x0242C010 TBNZ X8, 0x0, 0x242C028
	0x0242C014 ADRP X0, 0x1CEF000
	0x0242C018 LDR X0, [X0 + 0x5B0]
	0x0242C01C BL 0x1C16CF4
	0x0242C020 MOVZ W8, 0x1
	0x0242C024 STRB W8, [X21 + 0x9DC]
	0x0242C028 LDRB W8, [X20]
	0x0242C02C CBZ W8, 0x242C074
	0x0242C030 ADRP X8, 0x1CEF000
	0x0242C034 LDR X8, [X8 + 0x5B0]
	0x0242C038 ADD X20, X20, 0x8
	0x0242C03C LDR X0, [X8]
	0x0242C040 LDR W8, [X0 + 0xE0]
	0x0242C044 CBNZ W8, 0x242C04C
	0x0242C048 BL 0x1C16DFC
	0x0242C04C LDR X0, [X19 + 0x20]
	0x0242C050 LDRB W8, [X0 + 0x135]
	0x0242C054 TBNZ X8, 0x0, 0x242C05C
	0x0242C058 BL 0x1C5C684

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move W9, [X1]
	007 Move W8, [X2]
	008 Or W10, W9, W8
	009 And W31, W10, 255
	010 NotImplemented "Instruction CSET not yet implemented."
	011 Compare W9, 0
	012 JumpIfEqual {54}
	013 Compare W8, 0
	014 JumpIfEqual {54}
	015 Move S0, [X2+4]
	016 Move S10, [X2+8]
	017 Move S9, [X2+12]
	018 Move S8, [X2+16]
	019 Move X19, X1
	020 Add X0, X1, 4
	021 Move X1, X31
	022 Call Single.Equals, X0, V0
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {53}
	027 Add X0, X19, 8
	028 Move V0, V10
	029 Move X1, X31
	030 Call Single.Equals, X0, V0
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {53}
	035 Add X0, X19, 12
	036 Move V0, V9
	037 Move X1, X31
	038 Call Single.Equals, X0, V0
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {53}
	043 Add X0, X19, 16
	044 Move V0, V8
	045 Move X30, [X31+32]
	046 Move X19, [X31+40]
	047 Move D9, [X31+16]
	048 Move D8, [X31+24]
	049 Move X1, X31
	050 Move V10, [X31+48]
	051 Call Single.Equals, X0, V0
	052 Return X0
	053 Move W0, W31
	054 Move X30, [X31+32]
	055 Move X19, [X31+40]
	056 Move D9, [X31+16]
	057 Move D8, [X31+24]
	058 Move V10, [X31+48]
	059 Return X0

Method: System.Int32 GetHashCode(System.Nullable`1<T> obj)

Disassembly:
	0x0242C05C LDR X8, [X0 + 0xC0]
	0x0242C060 MOV X0, X20
	0x0242C064 LDP X20, X19, [X31 + 0x10]
	0x0242C068 LDR X1, [X8 + 0x18]
	0x0242C06C LDP X30, X21, [X31], #0x20
	0x0242C070 B 0x2B87CD8

ISIL:
	001 Move X8, [X2+32]
	002 Move X0, X1
	003 Move X8, [X8+192]
	004 Move X8, [X8+48]
	005 Move X1, X8
	006 Call Nullable`1<Quaternion>.GetHashCode, X0
	007 Return X0

Method: System.Int32 IndexOf(System.Nullable`1<T>[] array, System.Nullable`1<T> value, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x0242C074 LDP X20, X19, [X31 + 0x10]
	0x0242C078 MOV W0, W31
	0x0242C07C LDP X30, X21, [X31], #0x20
	0x0242C080 RET
	0x0242C084 SUB X31, X31, 0x40
	0x0242C088 STP X30, X21, [X31 + 0x20]
	0x0242C08C STP X20, X19, [X31 + 0x30]
	0x0242C090 ADRP X21, 0x1FAD000
	0x0242C094 LDRB W8, [X21 + 0x9DD]
	0x0242C098 MOV X20, X1
	0x0242C09C MOV X19, X0
	0x0242C0A0 TBNZ X8, 0x0, 0x242C0B8
	0x0242C0A4 ADRP X0, 0x1CC7000
	0x0242C0A8 LDR X0, [X0 + 0x988]
	0x0242C0AC BL 0x1C16CF4
	0x0242C0B0 MOVZ W8, 0x1
	0x0242C0B4 STRB W8, [X21 + 0x9DD]
	0x0242C0B8 LDRB W8, [X19]
	0x0242C0BC CBZ W8, 0x242C108
	0x0242C0C0 LDR X0, [X20 + 0x20]
	0x0242C0C4 LDRB W8, [X0 + 0x135]
	0x0242C0C8 TBNZ X8, 0x0, 0x242C0D0
	0x0242C0CC BL 0x1C5C684
	0x0242C0D0 LDR X8, [X0 + 0xC0]
	0x0242C0D4 ADD X19, X19, 0x8
	0x0242C0D8 LDR X0, [X8]
	0x0242C0DC LDRB W8, [X0 + 0x135]
	0x0242C0E0 TBNZ X8, 0x0, 0x242C0E8
	0x0242C0E4 BL 0x1C5C684
	0x0242C0E8 MOVN X8, 0x0
	0x0242C0EC STP X0, X8, [X31]
	0x0242C0F0 LDR V0, [X19]
	0x0242C0F4 ADD X0, X31, 0x0
	0x0242C0F8 MOV X1, X31
	0x0242C0FC STR V0, [X31 + 0x1]
	0x0242C100 BL 0x33D5650
	0x0242C104 B 0x242C114
	0x0242C108 ADRP X8, 0x1CC7000
	0x0242C10C LDR X8, [X8 + 0x988]
	0x0242C110 LDR X0, [X8]
	0x0242C114 LDP X20, X19, [X31 + 0x30]
	0x0242C118 LDP X30, X21, [X31 + 0x20]
	0x0242C11C ADD X31, X31, 0x40
	0x0242C120 RET
	0x0242C124 SUB X31, X31, 0x40
	0x0242C128 STR X30, [X31 + 0x30]
	0x0242C12C LDRB W8, [X0]
	0x0242C130 TBNZ X8, 0x0, 0x242C13C
	0x0242C134 MOV X0, X31
	0x0242C138 B 0x242C174
	0x0242C13C LDR X8, [X0 + 0x10]
	0x0242C140 LDR V0, [X0]
	0x0242C144 STR X8, [X31 + 0x20]
	0x0242C148 STR V0, [X31 + 0x1]
	0x0242C14C LDUR V0, [X31 + 0x18]
	0x0242C150 STR V0, [X31]
	0x0242C154 LDR X0, [X1 + 0x20]
	0x0242C158 LDRB W8, [X0 + 0x135]
	0x0242C15C TBNZ X8, 0x0, 0x242C164
	0x0242C160 BL 0x1C5C684
	0x0242C164 LDR X8, [X0 + 0xC0]
	0x0242C168 ADD X1, X31, 0x0
	0x0242C16C LDR X0, [X8]
	0x0242C170 BL 0x1C16E04
	0x0242C174 LDR X30, [X31 + 0x30]
	0x0242C178 ADD X31, X31, 0x40
	0x0242C17C RET
	0x0242C180 SUB X31, X31, 0x30
	0x0242C184 STP X30, X21, [X31 + 0x10]
	0x0242C188 STP X20, X19, [X31 + 0x20]
	0x0242C18C MOV X19, X8
	0x0242C190 CBZ X0, 0x242C21C
	0x0242C194 STP X31, X31, [X19]

ISIL:
	001 Move [X31-80], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move W9, [X2]
	011 Move W19, W3
	012 Move X20, X1
	013 Add W8, W4, W3
	014 Compare W9, 0
	015 JumpIfEqual {68}
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Compare X20, 0
	018 JumpIfEqual {95}
	019 Move W9, 20
	020 Move X8, W8
	021 NotImplemented "Instruction SMADDL not yet implemented."
	022 Move X21, X2
	023 Add X22, X9, 48
	024 Subtract X23, X8, W19
	025 Move W8, [X20+24]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction LDURB not yet implemented."
	028 Compare W8, 0
	029 JumpIfEqual {65}
	030 Move S0, [X21+4]
	031 Move S10, [X21+8]
	032 Move S9, [X21+12]
	033 Move S8, [X21+16]
	034 Subtract X0, X22, 12
	035 Move X1, X31
	036 Call Single.Equals, X0, V0
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {65}
	041 Subtract X0, X22, 8
	042 Move V0, V10
	043 Move X1, X31
	044 Call Single.Equals, X0, V0
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {65}
	049 Subtract X0, X22, 4
	050 Move V0, V9
	051 Move X1, X31
	052 Call Single.Equals, X0, V0
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {65}
	057 Move X0, X22
	058 Move V0, V8
	059 Move X1, X31
	060 Call Single.Equals, X0, V0
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfEqual {83}
	065 Add W19, W19, 1
	066 Subtract X23, X23, 1
	067 Add X22, X22, 20
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Compare X20, 0
	070 JumpIfEqual {95}
	071 Move W8, [X20+24]
	072 Move W9, 20
	073 NotImplemented "Instruction CMP not yet implemented."
	074 NotImplemented "Instruction SMADDL not yet implemented."
	075 Move W10, [X10+32]
	076 Compare W10, 0
	077 JumpIfEqual {83}
	078 Subtract W4, W4, 1
	079 Add W19, W19, 1
	080 Move TEMP, 0
	081 Not TEMP
	082 Move W19, TEMP
	083 Move W0, W19
	084 Move X20, [X31+64]
	085 Move X19, [X31+72]
	086 Move X22, [X31+48]
	087 Move X21, [X31+56]
	088 Move X30, [X31+32]
	089 Move X23, [X31+40]
	090 Move D9, [X31+16]
	091 Move D8, [X31+24]
	092 Move V10, [X31+80]
	093 Return X0
	094 Call 0x1C17F28
	095 Call 0x1C17F20

Method: System.Int32 LastIndexOf(System.Nullable`1<T>[] array, System.Nullable`1<T> value, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x0242C198 STR X31, [X19 + 0x10]
	0x0242C19C MOV X21, X0
	0x0242C1A0 LDR X0, [X1 + 0x20]
	0x0242C1A4 MOV X20, X1
	0x0242C1A8 LDRB W8, [X0 + 0x135]
	0x0242C1AC TBNZ X8, 0x0, 0x242C1B4
	0x0242C1B0 BL 0x1C5C684
	0x0242C1B4 LDR X8, [X0 + 0xC0]
	0x0242C1B8 LDR X1, [X8]
	0x0242C1BC LDRB W8, [X1 + 0x135]
	0x0242C1C0 TBNZ X8, 0x0, 0x242C1D0
	0x0242C1C4 MOV X0, X1
	0x0242C1C8 BL 0x1C5C684
	0x0242C1CC MOV X1, X0
	0x0242C1D0 LDR X8, [X21]
	0x0242C1D4 LDR X9, [X1 + 0x40]
	0x0242C1D8 MOV X0, X21
	0x0242C1DC LDR X8, [X8 + 0x40]
	0x0242C1E0 CMP X8, X9
	0x0242C1E4 B.NE 0x242C234
	0x0242C1E8 BL 0x1C16E08
	0x0242C1EC MOV X8, X0
	0x0242C1F0 LDR X0, [X20 + 0x20]
	0x0242C1F4 LDR V0, [X8]
	0x0242C1F8 LDRB W9, [X0 + 0x135]
	0x0242C1FC TBNZ X9, 0x0, 0x242C20C
	0x0242C200 STR V0, [X31]
	0x0242C204 BL 0x1C5C684
	0x0242C208 LDR V0, [X31]
	0x0242C20C MOVZ W8, 0x1
	0x0242C210 STUR V0, [X19 + 0x8]
	0x0242C214 STRB W8, [X19]
	0x0242C218 B 0x242C224
	0x0242C21C STP X31, X31, [X19]
	0x0242C220 STR X31, [X19 + 0x10]
	0x0242C224 LDP X20, X19, [X31 + 0x20]
	0x0242C228 LDP X30, X21, [X31 + 0x10]
	0x0242C22C ADD X31, X31, 0x30
	0x0242C230 RET
	0x0242C234 BL 0x1C171E0
	0x0242C238 SUB X31, X31, 0x40
	0x0242C23C STP X30, X23, [X31 + 0x10]
	0x0242C240 STP X22, X21, [X31 + 0x20]
	0x0242C244 STP X20, X19, [X31 + 0x30]
	0x0242C248 ADRP X22, 0x1FAD000
	0x0242C24C LDRB W9, [X22 + 0x9DE]
	0x0242C250 MOV X19, X1
	0x0242C254 MOV X21, X0
	0x0242C258 MOV X20, X8
	0x0242C25C TBNZ X9, 0x0, 0x242C274
	0x0242C260 ADRP X0, 0x1CC7000
	0x0242C264 LDR X0, [X0 + 0x6C0]
	0x0242C268 BL 0x1C16CF4
	0x0242C26C MOVZ W8, 0x1
	0x0242C270 STRB W8, [X22 + 0x9DE]
	0x0242C274 CBZ X21, 0x242C360
	0x0242C278 ADRP X23, 0x1CC7000
	0x0242C27C LDR X23, [X23 + 0x6C0]
	0x0242C280 MOV X0, X21
	0x0242C284 MOV X1, X31
	0x0242C288 BL 0x33BE520
	0x0242C28C LDR X8, [X19 + 0x20]
	0x0242C290 MOV X22, X0
	0x0242C294 LDRB W9, [X8 + 0x135]
	0x0242C298 TBNZ X9, 0x0, 0x242C2A8
	0x0242C29C MOV X0, X8
	0x0242C2A0 BL 0x1C5C684
	0x0242C2A4 MOV X8, X0
	0x0242C2A8 LDR X0, [X23]
	0x0242C2AC LDR X8, [X8 + 0xC0]
	0x0242C2B0 LDR W9, [X0 + 0xE0]
	0x0242C2B4 LDR X23, [X8 + 0x30]
	0x0242C2B8 CBNZ W9, 0x242C2C0
	0x0242C2BC BL 0x1C16DFC
	0x0242C2C0 MOV X0, X23
	0x0242C2C4 MOV X1, X31

ISIL:
	001 Move [X31-80], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move W8, [X2]
	012 Subtract W9, W3, W4
	013 Add W22, W9, 1
	014 Move W19, W3
	015 Move X20, X1
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Compare W8, 0
	018 Invalid "Jump target not found in method."
	019 Compare X20, 0
	020 JumpIfEqual {98}
	021 Move X21, X2
	022 Move W23, 20
	023 Move W8, [X20+24]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 NotImplemented "Instruction SMADDL not yet implemented."
	026 Move W8, [X8+32]
	027 Compare W8, 0
	028 JumpIfEqual {69}
	029 Move S0, [X21+4]
	030 Move S10, [X21+8]
	031 Move S9, [X21+12]
	032 Move S8, [X21+16]
	033 Move X24, W19
	034 NotImplemented "Instruction MADD not yet implemented."
	035 Add X0, X8, 36
	036 Move X1, X31
	037 Call Single.Equals, X0, V0
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {69}
	042 NotImplemented "Instruction MADD not yet implemented."
	043 Add X0, X8, 40
	044 Move V0, V10
	045 Move X1, X31
	046 Call Single.Equals, X0, V0
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {69}
	051 NotImplemented "Instruction MADD not yet implemented."
	052 Add X0, X8, 44
	053 Move V0, V9
	054 Move X1, X31
	055 Call Single.Equals, X0, V0
	056 Move TEMP, X0
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfNotEqual {69}
	060 NotImplemented "Instruction MADD not yet implemented."
	061 Add X0, X8, 48
	062 Move V0, V8
	063 Move X1, X31
	064 Call Single.Equals, X0, V0
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfEqual {85}
	069 Subtract W19, W19, 1
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Compare X20, 0
	072 JumpIfEqual {98}
	073 Move W8, [X20+24]
	074 Move W9, 20
	075 NotImplemented "Instruction CMP not yet implemented."
	076 NotImplemented "Instruction SMADDL not yet implemented."
	077 Move W10, [X10+32]
	078 Compare W10, 0
	079 JumpIfEqual {85}
	080 Subtract W19, W19, 1
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move TEMP, 0
	083 Not TEMP
	084 Move W19, TEMP
	085 Move W0, W19
	086 Move X20, [X31+64]
	087 Move X19, [X31+72]
	088 Move X22, [X31+48]
	089 Move X21, [X31+56]
	090 Move X24, [X31+32]
	091 Move X23, [X31+40]
	092 Move X30, [X31+24]
	093 Move D9, [X31+8]
	094 Move D8, [X31+16]
	095 Move V10, [X31+80]
	096 Return X0
	097 Call 0x1C17F28
	098 Call 0x1C17F20

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x0242C2C8 BL 0x338C698
	0x0242C2CC MOV X1, X0
	0x0242C2D0 MOV X0, X22
	0x0242C2D4 MOV X2, X31
	0x0242C2D8 BL 0x3395F0C
	0x0242C2DC TBNZ X0, 0x0, 0x242C37C
	0x0242C2E0 STP X31, X31, [X20]
	0x0242C2E4 STR X31, [X20 + 0x10]
	0x0242C2E8 LDR X0, [X19 + 0x20]
	0x0242C2EC LDRB W8, [X0 + 0x135]
	0x0242C2F0 TBNZ X8, 0x0, 0x242C2F8
	0x0242C2F4 BL 0x1C5C684
	0x0242C2F8 LDR X8, [X0 + 0xC0]
	0x0242C2FC LDR X1, [X8]
	0x0242C300 LDRB W8, [X1 + 0x135]
	0x0242C304 TBNZ X8, 0x0, 0x242C314
	0x0242C308 MOV X0, X1
	0x0242C30C BL 0x1C5C684
	0x0242C310 MOV X1, X0
	0x0242C314 LDR X8, [X21]
	0x0242C318 LDR X9, [X1 + 0x40]
	0x0242C31C MOV X0, X21
	0x0242C320 LDR X8, [X8 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X2+32]
	004 Move X19, X1
	005 Move X8, [X8+192]
	006 Move X0, [X8+64]
	007 Move W8, [X0+309]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {13}
	012 Call 0x1C5D684
	013 Compare X19, 0
	014 JumpIfEqual {19}
	015 Move X8, [X19]
	016 Move W9, [X0+304]
	017 Move W10, [X8+304]
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move W0, W31
	020 Move X8, [X8+200]
	021 Add X8, X8, X9
	022 NotImplemented "Instruction LDUR not yet implemented."
	023 NotImplemented "Instruction CMP not yet implemented."
	024 NotImplemented "Instruction CSET not yet implemented."
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x0242C324 CMP X8, X9
	0x0242C328 B.NE 0x242C3A4
	0x0242C32C BL 0x1C16E08
	0x0242C330 MOV X8, X0
	0x0242C334 LDR X0, [X19 + 0x20]
	0x0242C338 LDR V0, [X8]
	0x0242C33C LDRB W9, [X0 + 0x135]
	0x0242C340 TBNZ X9, 0x0, 0x242C350
	0x0242C344 STR V0, [X31]
	0x0242C348 BL 0x1C5C684
	0x0242C34C LDR V0, [X31]
	0x0242C350 MOVZ W8, 0x1
	0x0242C354 STUR V0, [X20 + 0x8]
	0x0242C358 STRB W8, [X20]

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {19}
	004 Move X1, X31
	005 Call "il2cpp_vm_object_is_inst", X0
	006 Compare X0, 0
	007 JumpIfEqual {19}
	008 Move X8, [X0]
	009 Move X9, [X8+424]
	010 Move X1, [X8+432]
	011 NotImplemented "Instruction BLR not yet implemented."
	012 Compare X0, 0
	013 JumpIfEqual {19}
	014 Move X8, [X0]
	015 Move X2, [X8+344]
	016 Move X1, [X8+352]
	017 Move X30, [X31+16]
	018 CallNoReturn X2
	019 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x0242C35C B 0x242C368
	0x0242C360 STP X31, X31, [X20]
	0x0242C364 STR X31, [X20 + 0x10]
	0x0242C368 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Move X8, [X1+32]
	002 Move X8, [X8+192]
	003 Move X1, [X8+72]
	004 Call EqualityComparer`1<Nullable`1<Quaternion>>..ctor, X0
	005 Return 

