Type: System.Collections.Generic.EqualityComparer`1

Method: System.Collections.Generic.EqualityComparer`1<T> get_Default()

Disassembly:
	0x02C287F4 LDR X1, [X8 + 0x590]
	0x02C287F8 BLR X9
	0x02C287FC TBZ X0, 0x0, 0x2C2887C
	0x02C28800 ADRP X8, 0x14CB000
	0x02C28804 LDR X8, [X8 + 0xDF8]
	0x02C28808 LDR X0, [X8]
	0x02C2880C LDR W8, [X0 + 0xE0]
	0x02C28810 CBNZ W8, 0x2C28818
	0x02C28814 BL 0x1C16DFC
	0x02C28818 MOV X0, X20
	0x02C2881C MOV X1, X31
	0x02C28820 BL 0x33AFB1C
	0x02C28824 LDR X8, [X25]
	0x02C28828 MOV X21, X0
	0x02C2882C LDR W9, [X8 + 0xE0]
	0x02C28830 CBNZ W9, 0x2C2883C
	0x02C28834 MOV X0, X8
	0x02C28838 BL 0x1C16DFC
	0x02C2883C MOV X0, X21
	0x02C28840 MOV X1, X31
	0x02C28844 BL 0x3397AFC
	0x02C28848 SUB W8, W0, 0x5
	0x02C2884C CMP W8, 0x7
	0x02C28850 B.HI 0x2C2887C
	0x02C28854 ADRP X9, 0xFFFFFFFFFDF05000
	0x02C28858 ADD X9, X9, 0xD92
	0x02C2885C ADR X10, 0x10
	0x02C28860 LDRB W11, [X9, X8, LSL]
	0x02C28864 ADD X10, X10, X11, 0x2, LSL
	0x02C28868 BR X10
	0x02C2886C ADRP X8, 0x14F6000
	0x02C28870 LDR X0, [X25]
	0x02C28874 LDR X8, [X8 + 0xC78]
	0x02C28878 B 0x2C2856C
	0x02C2887C LDR X0, [X19 + 0x20]
	0x02C28880 LDRB W8, [X0 + 0x135]
	0x02C28884 TBNZ X8, 0x0, 0x2C2888C
	0x02C28888 BL 0x1C5C684
	0x02C2888C LDR X8, [X0 + 0xC0]
	0x02C28890 LDR X0, [X8 + 0x30]
	0x02C28894 LDRB W8, [X0 + 0x135]
	0x02C28898 TBNZ X8, 0x0, 0x2C288A0
	0x02C2889C BL 0x1C5C684
	0x02C288A0 BL 0x1C16F10
	0x02C288A4 LDR X8, [X19 + 0x20]
	0x02C288A8 MOV X20, X0
	0x02C288AC LDRB W9, [X8 + 0x135]
	0x02C288B0 TBNZ X9, 0x0, 0x2C288C0
	0x02C288B4 MOV X0, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+32]
	006 Move W8, [X0+309]
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {12}
	011 Call 0x1C5D684
	012 Move X8, [X0+192]
	013 Move X0, [X8+16]
	014 Move W8, [X0+309]
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {20}
	019 Call 0x1C5D684
	020 Move X8, [X0+184]
	021 Move X20, [X8]
	022 Call 0x1C17D44
	023 Compare X20, 0
	024 JumpIfNotEqual {69}
	025 Move X0, [X19+32]
	026 Move W8, [X0+309]
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {32}
	031 Call 0x1C5D684
	032 Move X8, [X0+192]
	033 Move X0, [X8+24]
	034 Call 0x2C288B8
	035 Move X20, X0
	036 Call 0x1C17D44
	037 Move X0, [X19+32]
	038 Move W8, [X0+309]
	039 Move TEMP, X8
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {44}
	043 Call 0x1C5D684
	044 Move X8, [X0+192]
	045 Move X0, [X8+16]
	046 Move W8, [X0+309]
	047 Move TEMP, X8
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfEqual {52}
	051 Call 0x1C5D684
	052 Move X8, [X0+184]
	053 Move [X8], X20
	054 Move X0, [X19+32]
	055 Move W8, [X0+309]
	056 Move TEMP, X8
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfEqual {61}
	060 Call 0x1C5D684
	061 Move X8, [X0+192]
	062 Move X0, [X8+16]
	063 Move W8, [X0+309]
	064 Move TEMP, X8
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfEqual {69}
	068 Call 0x1C5D684
	069 Move X0, X20
	070 Move X20, [X31+16]
	071 Move X19, [X31+24]
	072 Move X30, [X31+32]
	073 Return X0

Method: System.Collections.Generic.EqualityComparer`1<T> CreateComparer()

Disassembly:
	0x02C288B8 BL 0x1C5C684
	0x02C288BC MOV X8, X0
	0x02C288C0 LDR X8, [X8 + 0xC0]
	0x02C288C4 MOV X0, X20
	0x02C288C8 LDR X1, [X8 + 0x38]
	0x02C288CC BL 0x2454C34
	0x02C288D0 B 0x2C28614
	0x02C288D4 ADRP X8, 0x14F6000
	0x02C288D8 LDR X0, [X25]
	0x02C288DC LDR X8, [X8 + 0xC98]
	0x02C288E0 B 0x2C2856C
	0x02C288E4 ADRP X8, 0x14F6000
	0x02C288E8 LDR X0, [X25]
	0x02C288EC LDR X8, [X8 + 0xCA8]
	0x02C288F0 B 0x2C2856C
	0x02C288F4 ADRP X8, 0x14F6000
	0x02C288F8 LDR X0, [X25]
	0x02C288FC LDR X8, [X8 + 0xCB0]
	0x02C28900 B 0x2C2856C
	0x02C28904 MOV X0, X20
	0x02C28908 BL 0x1C171E0
	0x02C2890C BL 0x1C16F20
	0x02C28910 BL 0x1C16F28
	0x02C28914 MOV X0, X21
	0x02C28918 BL 0x1C171E0
	0x02C2891C BL 0x1C16F44
	0x02C28920 MOV X1, X31
	0x02C28924 BL 0x1C16DEC
	0x02C28928 STR X30, [X31 - 0x40]!
	0x02C2892C STP X24, X23, [X31 + 0x10]
	0x02C28930 STP X22, X21, [X31 + 0x20]
	0x02C28934 STP X20, X19, [X31 + 0x30]
	0x02C28938 ADD W8, W4, W3
	0x02C2893C CMP W8, W3
	0x02C28940 B.LE 0x2C289A0
	0x02C28944 MOV X21, X1
	0x02C28948 CBZ X1, 0x2C289C0
	0x02C2894C SXTW X8, W8
	0x02C28950 ADD X9, X21, W3, 0x3, SXTW
	0x02C28954 MOV W19, W3
	0x02C28958 MOV X20, X2
	0x02C2895C MOV X22, X0
	0x02C28960 ADD X23, X9, 0x20
	0x02C28964 SUB X24, X8, W3, SXTW
	0x02C28968 LDR W8, [X21 + 0x18]
	0x02C2896C CMP W19, W8
	0x02C28970 B.CS 0x2C289BC
	0x02C28974 LDR X8, [X22]
	0x02C28978 LDR X1, [X23]
	0x02C2897C MOV X0, X22
	0x02C28980 MOV X2, X20
	0x02C28984 LDP X9, X3, [X8 + 0x1B8]
	0x02C28988 BLR X9
	0x02C2898C TBNZ X0, 0x0, 0x2C289A4
	0x02C28990 ADD W19, W19, 0x1
	0x02C28994 SUBS X24, X24, 0x1
	0x02C28998 ADD X23, X23, 0x8
	0x02C2899C B.NE 0x2C28968
	0x02C289A0 MOVN W19, 0x0
	0x02C289A4 MOV W0, W19
	0x02C289A8 LDP X20, X19, [X31 + 0x30]
	0x02C289AC LDP X22, X21, [X31 + 0x20]
	0x02C289B0 LDP X24, X23, [X31 + 0x10]
	0x02C289B4 LDR X30, [X31], #0x40
	0x02C289B8 RET
	0x02C289BC BL 0x1C16F28
	0x02C289C0 BL 0x1C16F20
	0x02C289C4 STP X30, X23, [X31 - 0x30]!
	0x02C289C8 STP X22, X21, [X31 + 0x10]
	0x02C289CC STP X20, X19, [X31 + 0x20]
	0x02C289D0 SUB W8, W3, W4
	0x02C289D4 ADD W23, W8, 0x1
	0x02C289D8 CMP W23, W3
	0x02C289DC B.GT 0x2C28A2C
	0x02C289E0 MOV X21, X1
	0x02C289E4 CBZ X1, 0x2C28A48
	0x02C289E8 MOV W19, W3
	0x02C289EC MOV X20, X2
	0x02C289F0 MOV X22, X0
	0x02C289F4 LDR W8, [X21 + 0x18]
	0x02C289F8 CMP W19, W8
	0x02C289FC B.CS 0x2C28A44
	0x02C28A00 LDR X8, [X22]
	0x02C28A04 ADD X9, X21, W19, 0x3, SXTW
	0x02C28A08 LDR X1, [X9 + 0x20]
	0x02C28A0C MOV X0, X22
	0x02C28A10 LDP X9, X3, [X8 + 0x1B8]
	0x02C28A14 MOV X2, X20
	0x02C28A18 BLR X9
	0x02C28A1C TBNZ X0, 0x0, 0x2C28A30
	0x02C28A20 SUB W19, W19, 0x1
	0x02C28A24 CMP W19, W23
	0x02C28A28 B.GE 0x2C289F4
	0x02C28A2C MOVN W19, 0x0
	0x02C28A30 MOV W0, W19
	0x02C28A34 LDP X20, X19, [X31 + 0x20]
	0x02C28A38 LDP X22, X21, [X31 + 0x10]
	0x02C28A3C LDP X30, X23, [X31], #0x30
	0x02C28A40 RET
	0x02C28A44 BL 0x1C16F28
	0x02C28A48 BL 0x1C16F20
	0x02C28A4C STP X30, X21, [X31 - 0x20]!
	0x02C28A50 STP X20, X19, [X31 + 0x10]
	0x02C28A54 CBZ X1, 0x2C28AF4
	0x02C28A58 LDR X8, [X2 + 0x20]
	0x02C28A5C MOV X20, X1
	0x02C28A60 MOV X21, X2
	0x02C28A64 MOV X19, X0
	0x02C28A68 LDR X8, [X8 + 0xC0]
	0x02C28A6C LDR X1, [X8 + 0x48]
	0x02C28A70 LDRB W8, [X1 + 0x135]
	0x02C28A74 TBNZ X8, 0x0, 0x2C28A84
	0x02C28A78 MOV X0, X1
	0x02C28A7C BL 0x1C5C684
	0x02C28A80 MOV X1, X0
	0x02C28A84 MOV X0, X20
	0x02C28A88 BL 0x1C16E00
	0x02C28A8C CBZ X0, 0x2C28AE8
	0x02C28A90 LDR X8, [X21 + 0x20]
	0x02C28A94 LDR X8, [X8 + 0xC0]
	0x02C28A98 LDR X1, [X8 + 0x48]
	0x02C28A9C LDRB W8, [X1 + 0x135]
	0x02C28AA0 TBNZ X8, 0x0, 0x2C28AB0
	0x02C28AA4 MOV X0, X1
	0x02C28AA8 BL 0x1C5C684
	0x02C28AAC MOV X1, X0
	0x02C28AB0 LDR X8, [X20]
	0x02C28AB4 LDR X9, [X1 + 0x40]
	0x02C28AB8 MOV X0, X20
	0x02C28ABC LDR X8, [X8 + 0x40]
	0x02C28AC0 CMP X8, X9
	0x02C28AC4 B.NE 0x2C28B04
	0x02C28AC8 BL 0x1C16E08
	0x02C28ACC LDR X8, [X19]
	0x02C28AD0 LDR X1, [X0]
	0x02C28AD4 MOV X0, X19
	0x02C28AD8 LDP X20, X19, [X31 + 0x10]
	0x02C28ADC LDP X3, X2, [X8 + 0x1C8]
	0x02C28AE0 LDP X30, X21, [X31], #0x20
	0x02C28AE4 BR X3
	0x02C28AE8 MOVZ W0, 0x2
	0x02C28AEC MOV X1, X31
	0x02C28AF0 BL 0x339DA4C
	0x02C28AF4 LDP X20, X19, [X31 + 0x10]
	0x02C28AF8 MOV W0, W31
	0x02C28AFC LDP X30, X21, [X31], #0x20
	0x02C28B00 RET
	0x02C28B04 BL 0x1C171E0
	0x02C28B08 STR X30, [X31 - 0x30]!
	0x02C28B0C STP X22, X21, [X31 + 0x10]
	0x02C28B10 STP X20, X19, [X31 + 0x20]
	0x02C28B14 CMP X1, X2
	0x02C28B18 B.EQ 0x2C28C30
	0x02C28B1C MOV X22, X1
	0x02C28B20 MOV X19, X0
	0x02C28B24 MOV W0, W31
	0x02C28B28 CBZ X1, 0x2C28C48
	0x02C28B2C MOV X20, X2
	0x02C28B30 CBZ X2, 0x2C28C48
	0x02C28B34 LDR X8, [X3 + 0x20]
	0x02C28B38 MOV X21, X3
	0x02C28B3C LDR X8, [X8 + 0xC0]
	0x02C28B40 LDR X1, [X8 + 0x48]
	0x02C28B44 LDRB W8, [X1 + 0x135]
	0x02C28B48 TBNZ X8, 0x0, 0x2C28B58
	0x02C28B4C MOV X0, X1
	0x02C28B50 BL 0x1C5C684
	0x02C28B54 MOV X1, X0
	0x02C28B58 MOV X0, X22
	0x02C28B5C BL 0x1C16E00
	0x02C28B60 CBZ X0, 0x2C28C38
	0x02C28B64 LDR X8, [X21 + 0x20]
	0x02C28B68 LDR X8, [X8 + 0xC0]
	0x02C28B6C LDR X1, [X8 + 0x48]
	0x02C28B70 LDRB W8, [X1 + 0x135]
	0x02C28B74 TBNZ X8, 0x0, 0x2C28B84
	0x02C28B78 MOV X0, X1
	0x02C28B7C BL 0x1C5C684
	0x02C28B80 MOV X1, X0
	0x02C28B84 MOV X0, X20
	0x02C28B88 BL 0x1C16E00
	0x02C28B8C CBZ X0, 0x2C28C38
	0x02C28B90 LDR X8, [X21 + 0x20]
	0x02C28B94 LDR X8, [X8 + 0xC0]
	0x02C28B98 LDR X1, [X8 + 0x48]
	0x02C28B9C LDRB W8, [X1 + 0x135]
	0x02C28BA0 TBNZ X8, 0x0, 0x2C28BB0
	0x02C28BA4 MOV X0, X1
	0x02C28BA8 BL 0x1C5C684
	0x02C28BAC MOV X1, X0
	0x02C28BB0 LDR X8, [X22]
	0x02C28BB4 LDR X9, [X1 + 0x40]
	0x02C28BB8 MOV X0, X22
	0x02C28BBC LDR X8, [X8 + 0x40]
	0x02C28BC0 CMP X8, X9
	0x02C28BC4 B.NE 0x2C28C58
	0x02C28BC8 BL 0x1C16E08
	0x02C28BCC LDR X8, [X21 + 0x20]
	0x02C28BD0 LDR X21, [X0]
	0x02C28BD4 LDR X8, [X8 + 0xC0]
	0x02C28BD8 LDR X1, [X8 + 0x48]
	0x02C28BDC LDRB W8, [X1 + 0x135]
	0x02C28BE0 TBNZ X8, 0x0, 0x2C28BF0
	0x02C28BE4 MOV X0, X1
	0x02C28BE8 BL 0x1C5C684
	0x02C28BEC MOV X1, X0
	0x02C28BF0 LDR X8, [X20]
	0x02C28BF4 LDR X9, [X1 + 0x40]
	0x02C28BF8 MOV X0, X20
	0x02C28BFC LDR X8, [X8 + 0x40]
	0x02C28C00 CMP X8, X9
	0x02C28C04 B.NE 0x2C28C58
	0x02C28C08 BL 0x1C16E08
	0x02C28C0C LDR X8, [X19]
	0x02C28C10 LDR X2, [X0]
	0x02C28C14 MOV X0, X19
	0x02C28C18 MOV X1, X21
	0x02C28C1C LDP X4, X3, [X8 + 0x1B8]
	0x02C28C20 LDP X20, X19, [X31 + 0x20]
	0x02C28C24 LDP X22, X21, [X31 + 0x10]
	0x02C28C28 LDR X30, [X31], #0x30
	0x02C28C2C BR X4
	0x02C28C30 MOVZ W0, 0x1
	0x02C28C34 B 0x2C28C48
	0x02C28C38 MOVZ W0, 0x2
	0x02C28C3C MOV X1, X31
	0x02C28C40 BL 0x339DA4C
	0x02C28C44 MOV W0, W31
	0x02C28C48 LDP X20, X19, [X31 + 0x20]
	0x02C28C4C LDP X22, X21, [X31 + 0x10]
	0x02C28C50 LDR X30, [X31], #0x30
	0x02C28C54 RET
	0x02C28C58 BL 0x1C171E0
	0x02C28C5C MOV X1, X31
	0x02C28C60 B 0x33BDD8C
	0x02C28C64 STR X30, [X31 - 0x20]!
	0x02C28C68 STP X20, X19, [X31 + 0x10]
	0x02C28C6C MOV X19, X0
	0x02C28C70 LDR X0, [X0 + 0x20]
	0x02C28C74 LDRB W8, [X0 + 0x135]
	0x02C28C78 TBNZ X8, 0x0, 0x2C28C80
	0x02C28C7C BL 0x1C5C684
	0x02C28C80 LDR X8, [X0 + 0xC0]
	0x02C28C84 LDR X0, [X8 + 0x10]
	0x02C28C88 LDRB W8, [X0 + 0x135]
	0x02C28C8C TBNZ X8, 0x0, 0x2C28C94
	0x02C28C90 BL 0x1C5C684
	0x02C28C94 LDR X8, [X0 + 0xB8]
	0x02C28C98 LDR X20, [X8]
	0x02C28C9C BL 0x1C16D44
	0x02C28CA0 CBNZ X20, 0x2C28D18
	0x02C28CA4 LDR X0, [X19 + 0x20]
	0x02C28CA8 LDRB W8, [X0 + 0x135]
	0x02C28CAC TBNZ X8, 0x0, 0x2C28CB4
	0x02C28CB0 BL 0x1C5C684
	0x02C28CB4 LDR X8, [X0 + 0xC0]
	0x02C28CB8 LDR X0, [X8 + 0x18]
	0x02C28CBC BL 0x2C28D28
	0x02C28CC0 MOV X20, X0
	0x02C28CC4 BL 0x1C16D44
	0x02C28CC8 LDR X0, [X19 + 0x20]
	0x02C28CCC LDRB W8, [X0 + 0x135]
	0x02C28CD0 TBNZ X8, 0x0, 0x2C28CD8
	0x02C28CD4 BL 0x1C5C684
	0x02C28CD8 LDR X8, [X0 + 0xC0]
	0x02C28CDC LDR X0, [X8 + 0x10]
	0x02C28CE0 LDRB W8, [X0 + 0x135]
	0x02C28CE4 TBNZ X8, 0x0, 0x2C28CEC
	0x02C28CE8 BL 0x1C5C684
	0x02C28CEC LDR X8, [X0 + 0xB8]
	0x02C28CF0 STR X20, [X8]
	0x02C28CF4 LDR X0, [X19 + 0x20]
	0x02C28CF8 LDRB W8, [X0 + 0x135]
	0x02C28CFC TBNZ X8, 0x0, 0x2C28D04
	0x02C28D00 BL 0x1C5C684
	0x02C28D04 LDR X8, [X0 + 0xC0]
	0x02C28D08 LDR X0, [X8 + 0x10]
	0x02C28D0C LDRB W8, [X0 + 0x135]
	0x02C28D10 TBNZ X8, 0x0, 0x2C28D18
	0x02C28D14 BL 0x1C5C684
	0x02C28D18 MOV X0, X20
	0x02C28D1C LDP X20, X19, [X31 + 0x10]
	0x02C28D20 LDR X30, [X31], #0x20
	0x02C28D24 RET
	0x02C28D28 STP X30, X25, [X31 - 0x40]!
	0x02C28D2C STP X24, X23, [X31 + 0x10]
	0x02C28D30 STP X22, X21, [X31 + 0x20]
	0x02C28D34 STP X20, X19, [X31 + 0x30]
	0x02C28D38 ADRP X20, 0x17B3000
	0x02C28D3C LDRB W8, [X20 + 0x678]
	0x02C28D40 MOV X19, X0
	0x02C28D44 TBNZ X8, 0x0, 0x2C28E10
	0x02C28D48 ADRP X0, 0x14F6000
	0x02C28D4C LDR X0, [X0 + 0xC70]
	0x02C28D50 BL 0x1C16CF4
	0x02C28D54 ADRP X0, 0x14F2000
	0x02C28D58 LDR X0, [X0 + 0xD68]
	0x02C28D5C BL 0x1C16CF4
	0x02C28D60 ADRP X0, 0x14F6000
	0x02C28D64 LDR X0, [X0 + 0xC78]
	0x02C28D68 BL 0x1C16CF4
	0x02C28D6C ADRP X0, 0x14CB000
	0x02C28D70 LDR X0, [X0 + 0xDF8]
	0x02C28D74 BL 0x1C16CF4
	0x02C28D78 ADRP X0, 0x14F6000
	0x02C28D7C LDR X0, [X0 + 0xC80]
	0x02C28D80 BL 0x1C16CF4
	0x02C28D84 ADRP X0, 0x14F6000
	0x02C28D88 LDR X0, [X0 + 0xC88]
	0x02C28D8C BL 0x1C16CF4
	0x02C28D90 ADRP X0, 0x14F6000
	0x02C28D94 LDR X0, [X0 + 0xC90]
	0x02C28D98 BL 0x1C16CF4
	0x02C28D9C ADRP X0, 0x14F6000
	0x02C28DA0 LDR X0, [X0 + 0xC98]
	0x02C28DA4 BL 0x1C16CF4
	0x02C28DA8 ADRP X0, 0x14F6000
	0x02C28DAC LDR X0, [X0 + 0xCA0]
	0x02C28DB0 BL 0x1C16CF4
	0x02C28DB4 ADRP X0, 0x14F6000
	0x02C28DB8 LDR X0, [X0 + 0x238]
	0x02C28DBC BL 0x1C16CF4
	0x02C28DC0 ADRP X0, 0x14F4000
	0x02C28DC4 LDR X0, [X0 + 0x4E8]
	0x02C28DC8 BL 0x1C16CF4
	0x02C28DCC ADRP X0, 0x14F6000
	0x02C28DD0 LDR X0, [X0 + 0xCA8]
	0x02C28DD4 BL 0x1C16CF4
	0x02C28DD8 ADRP X0, 0x14F6000
	0x02C28DDC LDR X0, [X0 + 0xCB0]
	0x02C28DE0 BL 0x1C16CF4
	0x02C28DE4 ADRP X0, 0x14F3000
	0x02C28DE8 LDR X0, [X0 + 0xB60]
	0x02C28DEC BL 0x1C16CF4
	0x02C28DF0 ADRP X0, 0x14D3000
	0x02C28DF4 LDR X0, [X0 + 0xC60]
	0x02C28DF8 BL 0x1C16CF4
	0x02C28DFC ADRP X0, 0x14CB000
	0x02C28E00 LDR X0, [X0 + 0x6C0]
	0x02C28E04 BL 0x1C16CF4
	0x02C28E08 MOVZ W8, 0x1
	0x02C28E0C STRB W8, [X20 + 0x678]
	0x02C28E10 LDR X0, [X19 + 0x20]
	0x02C28E14 ADRP X25, 0x14CB000
	0x02C28E18 LDRB W8, [X0 + 0x135]
	0x02C28E1C LDR X25, [X25 + 0x6C0]
	0x02C28E20 TBNZ X8, 0x0, 0x2C28E28
	0x02C28E24 BL 0x1C5C684
	0x02C28E28 LDR X8, [X25]
	0x02C28E2C LDR X9, [X0 + 0xC0]
	0x02C28E30 LDR W10, [X8 + 0xE0]
	0x02C28E34 LDR X20, [X9 + 0x20]
	0x02C28E38 CBNZ W10, 0x2C28E44
	0x02C28E3C MOV X0, X8
	0x02C28E40 BL 0x1C16DFC
	0x02C28E44 ADRP X24, 0x14F4000
	0x02C28E48 LDR X24, [X24 + 0x4E8]
	0x02C28E4C MOV X0, X20
	0x02C28E50 MOV X1, X31
	0x02C28E54 BL 0x338C698
	0x02C28E58 MOV X20, X0
	0x02C28E5C CBZ X0, 0x2C28E8C
	0x02C28E60 LDR X8, [X20]
	0x02C28E64 LDR X1, [X24]
	0x02C28E68 LDRB W10, [X8 + 0x130]
	0x02C28E6C LDRB W9, [X1 + 0x130]
	0x02C28E70 CMP W10, W9
	0x02C28E74 B.CC 0x2C2933C
	0x02C28E78 LDR X8, [X8 + 0xC8]
	0x02C28E7C ADD X8, X8, X9, 0x3, LSL
	0x02C28E80 LDUR X8, [X8 - 0x8]
	0x02C28E84 CMP X8, X1
	0x02C28E88 B.NE 0x2C2933C
	0x02C28E8C ADRP X8, 0x14F2000
	0x02C28E90 LDR X8, [X8 + 0xD68]
	0x02C28E94 MOV X1, X31
	0x02C28E98 LDR X0, [X8]
	0x02C28E9C BL 0x338C698
	0x02C28EA0 MOV X1, X0
	0x02C28EA4 MOV X0, X20
	0x02C28EA8 MOV X2, X31
	0x02C28EAC BL 0x3395194
	0x02C28EB0 TBZ X0, 0x0, 0x2C28ED4
	0x02C28EB4 ADRP X8, 0x14F6000
	0x02C28EB8 LDR X8, [X8 + 0xC70]
	0x02C28EBC LDR X0, [X8]
	0x02C28EC0 BL 0x1C16F10
	0x02C28EC4 MOV X1, X31
	0x02C28EC8 MOV X20, X0
	0x02C28ECC BL 0x335E02C
	0x02C28ED0 B 0x2C28F2C
	0x02C28ED4 ADRP X8, 0x14F3000
	0x02C28ED8 LDR X0, [X25]
	0x02C28EDC LDR X8, [X8 + 0xB60]
	0x02C28EE0 LDR W9, [X0 + 0xE0]
	0x02C28EE4 LDR X21, [X8]
	0x02C28EE8 CBNZ W9, 0x2C28EF0
	0x02C28EEC BL 0x1C16DFC

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x17B4000
	010 Move W8, [X20+1654]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {66}
	016 Move X0, 0x14F7000
	017 Move X0, [X0+3184]
	018 Call 0x1C17CF4
	019 Move X0, 0x14F3000
	020 Move X0, [X0+3432]
	021 Call 0x1C17CF4
	022 Move X0, 0x14F7000
	023 Move X0, [X0+3192]
	024 Call 0x1C17CF4
	025 Move X0, 0x14CC000
	026 Move X0, [X0+3576]
	027 Call 0x1C17CF4
	028 Move X0, 0x14F7000
	029 Move X0, [X0+3200]
	030 Call 0x1C17CF4
	031 Move X0, 0x14F7000
	032 Move X0, [X0+3208]
	033 Call 0x1C17CF4
	034 Move X0, 0x14F7000
	035 Move X0, [X0+3216]
	036 Call 0x1C17CF4
	037 Move X0, 0x14F7000
	038 Move X0, [X0+3224]
	039 Call 0x1C17CF4
	040 Move X0, 0x14F7000
	041 Move X0, [X0+3232]
	042 Call 0x1C17CF4
	043 Move X0, 0x14F7000
	044 Move X0, [X0+568]
	045 Call 0x1C17CF4
	046 Move X0, 0x14F5000
	047 Move X0, [X0+1256]
	048 Call 0x1C17CF4
	049 Move X0, 0x14F7000
	050 Move X0, [X0+3240]
	051 Call 0x1C17CF4
	052 Move X0, 0x14F7000
	053 Move X0, [X0+3248]
	054 Call 0x1C17CF4
	055 Move X0, 0x14F4000
	056 Move X0, [X0+2912]
	057 Call 0x1C17CF4
	058 Move X0, 0x14D4000
	059 Move X0, [X0+3168]
	060 Call 0x1C17CF4
	061 Move X0, 0x14CC000
	062 Move X0, [X0+1728]
	063 Call 0x1C17CF4
	064 Move W8, 1
	065 Move [X20+1654], W8
	066 Move X0, [X19+32]
	067 Move X25, 0x14CC000
	068 Move W8, [X0+309]
	069 Move X25, [X25+1728]
	070 Move TEMP, X8
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfEqual {75}
	074 Call 0x1C5D684
	075 Move X8, [X25]
	076 Move X9, [X0+192]
	077 Move W10, [X8+224]
	078 Move X20, [X9+32]
	079 Compare W10, 0
	080 JumpIfNotEqual {83}
	081 Move X0, X8
	082 Call 0x1C17DFC
	083 Move X24, 0x14F5000
	084 Move X24, [X24+1256]
	085 Move X0, X20
	086 Move X1, X31
	087 Call Type.GetTypeFromHandle, X0
	088 Move X20, X0
	089 Compare X0, 0
	090 JumpIfEqual {100}
	091 Move X8, [X20]
	092 Move X1, [X24]
	093 Move W10, [X8+304]
	094 Move W9, [X1+304]
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move X8, [X8+200]
	097 Add X8, X8, X9
	098 NotImplemented "Instruction LDUR not yet implemented."
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Move X8, 0x14F3000
	101 Move X8, [X8+3432]
	102 Move X1, X31
	103 Move X0, [X8]
	104 Call Type.GetTypeFromHandle, X0
	105 Move X1, X0
	106 Move X0, X20
	107 Move X2, X31
	108 Call Type.op_Equality, X0, X1
	109 Move TEMP, X0
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfNotEqual {120}
	113 Move X8, 0x14F7000
	114 Move X8, [X8+3184]
	115 Move X0, [X8]
	116 Call 0x1C17F10
	117 Move X1, X31
	118 Move X20, X0
	119 Call ByteEqualityComparer..ctor, X0
	120 Move X8, 0x14F4000
	121 Move X0, [X25]
	122 Move X8, [X8+2912]
	123 Move W9, [X0+224]
	124 Move X21, [X8]
	125 Compare W9, 0
	126 JumpIfNotEqual {128}
	127 Call 0x1C17DFC
	128 Move X0, X21
	129 Move X1, X31
	130 Call Type.GetTypeFromHandle, X0
	131 Move X1, X0
	132 Move X0, X20
	133 Move X2, X31
	134 Call Type.op_Equality, X0, X1
	135 Move TEMP, X0
	136 And TEMP, TEMP, 1
	137 Compare TEMP, 1
	138 JumpIfNotEqual {154}
	139 Move X8, 0x14F7000
	140 Move X8, [X8+3216]
	141 Move X0, [X8]
	142 Call 0x1C17F10
	143 Move X1, X31
	144 Move X20, X0
	145 Call InternalStringComparer..ctor, X0
	146 Move X0, [X19+32]
	147 Move W8, [X0+309]
	148 Move TEMP, X8
	149 And TEMP, TEMP, 1
	150 Compare TEMP, 1
	151 JumpIfEqual {153}
	152 Call 0x1C5D684
	153 Move X8, [X0+192]
	154 Move X0, [X19+32]
	155 Move W8, [X0+309]
	156 Move TEMP, X8
	157 And TEMP, TEMP, 1
	158 Compare TEMP, 1
	159 JumpIfEqual {161}
	160 Call 0x1C5D684
	161 Move X8, [X25]
	162 Move X9, [X0+192]
	163 Move W10, [X8+224]
	164 Move X21, [X9+40]
	165 Compare W10, 0
	166 JumpIfNotEqual {169}
	167 Move X0, X8
	168 Call 0x1C17DFC
	169 Move X0, X21
	170 Move X1, X31
	171 Call Type.GetTypeFromHandle, X0
	172 Compare X0, 0
	173 JumpIfEqual {457}
	174 Move X8, [X0]
	175 Move X1, X20
	176 Move X9, [X8+680]
	177 Move X2, [X8+688]
	178 NotImplemented "Instruction BLR not yet implemented."
	179 Move TEMP, X0
	180 And TEMP, TEMP, 1
	181 Compare TEMP, 1
	182 JumpIfNotEqual {245}
	183 Move X8, 0x14F7000
	184 Move X0, [X25]
	185 Move X8, [X8+3200]
	186 Move W9, [X0+224]
	187 Move X21, [X8]
	188 Compare W9, 0
	189 JumpIfNotEqual {191}
	190 Call 0x1C17DFC
	191 Move X0, X21
	192 Move X1, X31
	193 Call Type.GetTypeFromHandle, X0
	194 Move X8, [X24]
	195 Move X21, X0
	196 Move W9, [X8+224]
	197 Compare W9, 0
	198 JumpIfNotEqual {201}
	199 Move X0, X8
	200 Call 0x1C17DFC
	201 Move X0, X21
	202 Move X1, X20
	203 Move X2, X31
	204 Call RuntimeType.CreateInstanceForAnotherGenericParameter, X0, X1
	205 Move X8, [X19+32]
	206 Move X20, X0
	207 Move W9, [X8+309]
	208 Move TEMP, X9
	209 And TEMP, TEMP, 1
	210 Compare TEMP, 1
	211 JumpIfEqual {215}
	212 Move X0, X8
	213 Call 0x1C5D684
	214 Move X8, X0
	215 Move X8, [X8+192]
	216 Move X1, [X8]
	217 Move W8, [X1+309]
	218 Move TEMP, X8
	219 And TEMP, TEMP, 1
	220 Compare TEMP, 1
	221 JumpIfEqual {225}
	222 Move X0, X1
	223 Call 0x1C5D684
	224 Move X1, X0
	225 Compare X20, 0
	226 JumpIfEqual {235}
	227 Move X8, [X20]
	228 Move W9, [X1+304]
	229 Move W10, [X8+304]
	230 NotImplemented "Instruction CMP not yet implemented."
	231 Move X8, [X8+200]
	232 Add X8, X8, X9
	233 NotImplemented "Instruction LDUR not yet implemented."
	234 NotImplemented "Instruction CMP not yet implemented."
	235 Move X0, X20
	236 Move X20, [X31+48]
	237 Move X19, [X31+56]
	238 Move X22, [X31+32]
	239 Move X21, [X31+40]
	240 Move X24, [X31+16]
	241 Move X23, [X31+24]
	242 Move X30, [X31+64]
	243 Move X25, [X31+72]
	244 Return X0
	245 Compare X20, 0
	246 JumpIfEqual {457}
	247 Move X8, [X20]
	248 Move X0, X20
	249 Move X9, [X8+968]
	250 Move X1, [X8+976]
	251 NotImplemented "Instruction BLR not yet implemented."
	252 Move TEMP, X0
	253 And TEMP, TEMP, 1
	254 Compare TEMP, 1
	255 JumpIfNotEqual {376}
	256 Move X8, [X20]
	257 Move X0, X20
	258 Move X9, [X8+1096]
	259 Move X1, [X8+1104]
	260 NotImplemented "Instruction BLR not yet implemented."
	261 Move X9, 0x14F7000
	262 Move X8, [X25]
	263 Move X9, [X9+568]
	264 Move X21, X0
	265 Move W10, [X8+224]
	266 Move X22, [X9]
	267 Compare W10, 0
	268 JumpIfNotEqual {271}
	269 Move X0, X8
	270 Call 0x1C17DFC
	271 Move X0, X22
	272 Move X1, X31
	273 Call Type.GetTypeFromHandle, X0
	274 Move X1, X0
	275 Move X0, X21
	276 Move X2, X31
	277 Call Type.op_Equality, X0, X1
	278 Move TEMP, X0
	279 And TEMP, TEMP, 1
	280 Compare TEMP, 1
	281 JumpIfNotEqual {376}
	282 Move X8, [X20]
	283 Move X0, X20
	284 Move X9, [X8+1128]
	285 Move X1, [X8+1136]
	286 NotImplemented "Instruction BLR not yet implemented."
	287 Compare X0, 0
	288 JumpIfEqual {457}
	289 Move W8, [X0+24]
	290 Compare W8, 0
	291 JumpIfEqual {458}
	292 Move X21, [X0+32]
	293 Compare X21, 0
	294 JumpIfEqual {304}
	295 Move X8, [X21]
	296 Move X1, [X24]
	297 Move W10, [X8+304]
	298 Move W9, [X1+304]
	299 NotImplemented "Instruction CMP not yet implemented."
	300 Move X8, [X8+200]
	301 Add X8, X8, X9
	302 NotImplemented "Instruction LDUR not yet implemented."
	303 NotImplemented "Instruction CMP not yet implemented."
	304 Move X8, 0x14F7000
	305 Move X0, [X25]
	306 Move X8, [X8+3208]
	307 Move W9, [X0+224]
	308 Move X22, [X8]
	309 Compare W9, 0
	310 JumpIfNotEqual {312}
	311 Call 0x1C17DFC
	312 Move X0, X22
	313 Move X1, X31
	314 Call Type.GetTypeFromHandle, X0
	315 Move X8, 0x14D4000
	316 Move X8, [X8+3168]
	317 Move X22, X0
	318 Move W1, 1
	319 Move X8, [X8]
	320 Move X0, X8
	321 Call 0x1C17D6C
	322 Compare X0, 0
	323 JumpIfEqual {457}
	324 Move X23, X0
	325 Compare X21, 0
	326 JumpIfEqual {333}
	327 Move X8, [X23]
	328 Move X0, X21
	329 Move X1, [X8+64]
	330 Call 0x1C17E00
	331 Compare X0, 0
	332 JumpIfEqual {461}
	333 Move W8, [X23+24]
	334 Compare W8, 0
	335 JumpIfEqual {458}
	336 Move [X23+32], X21
	337 Compare X22, 0
	338 JumpIfEqual {457}
	339 Move X8, [X22]
	340 Move X0, X22
	341 Move X1, X23
	342 Move X9, [X8+2264]
	343 Move X2, [X8+2272]
	344 NotImplemented "Instruction BLR not yet implemented."
	345 Compare X0, 0
	346 JumpIfEqual {457}
	347 Move X8, [X0]
	348 Move X1, X21
	349 Move X9, [X8+680]
	350 Move X2, [X8+688]
	351 NotImplemented "Instruction BLR not yet implemented."
	352 Move TEMP, X0
	353 And TEMP, TEMP, 1
	354 Compare TEMP, 1
	355 JumpIfNotEqual {376}
	356 Move X8, 0x14F7000
	357 Move X0, [X25]
	358 Move X8, [X8+3232]
	359 Move W9, [X0+224]
	360 Move X20, [X8]
	361 Compare W9, 0
	362 JumpIfNotEqual {364}
	363 Call 0x1C17DFC
	364 Move X0, X20
	365 Move X1, X31
	366 Call Type.GetTypeFromHandle, X0
	367 Move X8, [X24]
	368 Move X20, X0
	369 Move W9, [X8+224]
	370 Compare W9, 0
	371 JumpIfNotEqual {374}
	372 Move X0, X8
	373 Call 0x1C17DFC
	374 Move X0, X20
	375 Move X1, X21
	376 Move X8, [X20]
	377 Move X0, X20
	378 Move X9, [X8+1416]
	379 Move X1, [X8+1424]
	380 NotImplemented "Instruction BLR not yet implemented."
	381 Move TEMP, X0
	382 And TEMP, TEMP, 1
	383 Compare TEMP, 1
	384 JumpIfNotEqual {416}
	385 Move X8, 0x14CC000
	386 Move X8, [X8+3576]
	387 Move X0, [X8]
	388 Move W8, [X0+224]
	389 Compare W8, 0
	390 JumpIfNotEqual {392}
	391 Call 0x1C17DFC
	392 Move X0, X20
	393 Move X1, X31
	394 Call Enum.GetUnderlyingType, X0
	395 Move X8, [X25]
	396 Move X21, X0
	397 Move W9, [X8+224]
	398 Compare W9, 0
	399 JumpIfNotEqual {402}
	400 Move X0, X8
	401 Call 0x1C17DFC
	402 Move X0, X21
	403 Move X1, X31
	404 Call Type.GetTypeCode, X0
	405 Subtract W8, W0, 5
	406 NotImplemented "Instruction CMP not yet implemented."
	407 Move X9, -34578432
	408 Add X9, X9, 3474
	409 NotImplemented "Instruction ADR not yet implemented."
	410 Move W11, [X9]
	411 Add X10, X10, X11
	412 CallNoReturn X10
	413 Move X8, 0x14F7000
	414 Move X0, [X25]
	415 Move X8, [X8+3192]
	416 Move X0, [X19+32]
	417 Move W8, [X0+309]
	418 Move TEMP, X8
	419 And TEMP, TEMP, 1
	420 Compare TEMP, 1
	421 JumpIfEqual {423}
	422 Call 0x1C5D684
	423 Move X8, [X0+192]
	424 Move X0, [X8+48]
	425 Move W8, [X0+309]
	426 Move TEMP, X8
	427 And TEMP, TEMP, 1
	428 Compare TEMP, 1
	429 JumpIfEqual {431}
	430 Call 0x1C5D684
	431 Call 0x1C17F10
	432 Move X8, [X19+32]
	433 Move X20, X0
	434 Move W9, [X8+309]
	435 Move TEMP, X9
	436 And TEMP, TEMP, 1
	437 Compare TEMP, 1
	438 JumpIfEqual {442}
	439 Move X0, X8
	440 Call 0x1C5D684
	441 Move X8, X0
	442 Move X8, [X8+192]
	443 Move X0, X20
	444 Move X1, [X8+56]
	445 Call 0x2455260, X0
	446 Move X8, 0x14F7000
	447 Move X0, [X25]
	448 Move X8, [X8+3224]
	449 Move X8, 0x14F7000
	450 Move X0, [X25]
	451 Move X8, [X8+3240]
	452 Move X8, 0x14F7000
	453 Move X0, [X25]
	454 Move X8, [X8+3248]
	455 Move X0, X20
	456 Call 0x1C181E0
	457 Call 0x1C17F20
	458 Call 0x1C17F28
	459 Move X0, X21
	460 Call 0x1C181E0
	461 Call 0x1C17F44
	462 Move X1, X31
	463 Call 0x1C17DEC

Method: System.Boolean Equals(T x, T y)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Int32 GetHashCode(T obj)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Int32 IndexOf(T[] array, T value, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x02C28EF0 MOV X0, X21
	0x02C28EF4 MOV X1, X31
	0x02C28EF8 BL 0x338C698
	0x02C28EFC MOV X1, X0
	0x02C28F00 MOV X0, X20
	0x02C28F04 MOV X2, X31
	0x02C28F08 BL 0x3395194
	0x02C28F0C TBZ X0, 0x0, 0x2C28F44
	0x02C28F10 ADRP X8, 0x14F6000
	0x02C28F14 LDR X8, [X8 + 0xC90]
	0x02C28F18 LDR X0, [X8]
	0x02C28F1C BL 0x1C16F10
	0x02C28F20 MOV X1, X31
	0x02C28F24 MOV X20, X0
	0x02C28F28 BL 0x335E12C
	0x02C28F2C LDR X0, [X19 + 0x20]
	0x02C28F30 LDRB W8, [X0 + 0x135]
	0x02C28F34 TBNZ X8, 0x0, 0x2C28F3C
	0x02C28F38 BL 0x1C5C684
	0x02C28F3C LDR X8, [X0 + 0xC0]
	0x02C28F40 B 0x2C29008
	0x02C28F44 LDR X0, [X19 + 0x20]
	0x02C28F48 LDRB W8, [X0 + 0x135]
	0x02C28F4C TBNZ X8, 0x0, 0x2C28F54
	0x02C28F50 BL 0x1C5C684
	0x02C28F54 LDR X8, [X25]
	0x02C28F58 LDR X9, [X0 + 0xC0]
	0x02C28F5C LDR W10, [X8 + 0xE0]
	0x02C28F60 LDR X21, [X9 + 0x28]
	0x02C28F64 CBNZ W10, 0x2C28F70
	0x02C28F68 MOV X0, X8
	0x02C28F6C BL 0x1C16DFC
	0x02C28F70 MOV X0, X21
	0x02C28F74 MOV X1, X31
	0x02C28F78 BL 0x338C698
	0x02C28F7C CBZ X0, 0x2C29344
	0x02C28F80 LDR X8, [X0]
	0x02C28F84 MOV X1, X20
	0x02C28F88 LDR X9, [X8 + 0x2A8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Add W8, W4, W3
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X21, X1
	011 Compare X1, 0
	012 JumpIfEqual {49}
	013 Move X8, W8
	014 Add X9, X21, W3
	015 Move W19, W3
	016 Move X20, X2
	017 Move X22, X0
	018 Add X23, X9, 32
	019 Subtract X24, X8, W3
	020 Move W8, [X21+24]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X8, [X22]
	023 Move X1, [X23]
	024 Move X0, X22
	025 Move X2, X20
	026 Move X9, [X8+440]
	027 Move X3, [X8+448]
	028 NotImplemented "Instruction BLR not yet implemented."
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {39}
	033 Add W19, W19, 1
	034 Subtract X24, X24, 1
	035 Add X23, X23, 8
	036 Move TEMP, 0
	037 Not TEMP
	038 Move W19, TEMP
	039 Move W0, W19
	040 Move X20, [X31+48]
	041 Move X19, [X31+56]
	042 Move X22, [X31+32]
	043 Move X21, [X31+40]
	044 Move X24, [X31+16]
	045 Move X23, [X31+24]
	046 Move X30, [X31+64]
	047 Return X0
	048 Call 0x1C17F28
	049 Call 0x1C17F20

Method: System.Int32 LastIndexOf(T[] array, T value, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x02C28F8C LDR X2, [X8 + 0x2B0]
	0x02C28F90 BLR X9
	0x02C28F94 TBZ X0, 0x0, 0x2C29064
	0x02C28F98 ADRP X8, 0x14F6000
	0x02C28F9C LDR X0, [X25]
	0x02C28FA0 LDR X8, [X8 + 0xC80]
	0x02C28FA4 LDR W9, [X0 + 0xE0]
	0x02C28FA8 LDR X21, [X8]
	0x02C28FAC CBNZ W9, 0x2C28FB4
	0x02C28FB0 BL 0x1C16DFC
	0x02C28FB4 MOV X0, X21
	0x02C28FB8 MOV X1, X31
	0x02C28FBC BL 0x338C698
	0x02C28FC0 LDR X8, [X24]
	0x02C28FC4 MOV X21, X0
	0x02C28FC8 LDR W9, [X8 + 0xE0]
	0x02C28FCC CBNZ W9, 0x2C28FD8
	0x02C28FD0 MOV X0, X8
	0x02C28FD4 BL 0x1C16DFC
	0x02C28FD8 MOV X0, X21
	0x02C28FDC MOV X1, X20
	0x02C28FE0 MOV X2, X31
	0x02C28FE4 BL 0x33BCFB0
	0x02C28FE8 LDR X8, [X19 + 0x20]
	0x02C28FEC MOV X20, X0
	0x02C28FF0 LDRB W9, [X8 + 0x135]
	0x02C28FF4 TBNZ X9, 0x0, 0x2C29004
	0x02C28FF8 MOV X0, X8
	0x02C28FFC BL 0x1C5C684
	0x02C29000 MOV X8, X0
	0x02C29004 LDR X8, [X8 + 0xC0]
	0x02C29008 LDR X1, [X8]
	0x02C2900C LDRB W8, [X1 + 0x135]
	0x02C29010 TBNZ X8, 0x0, 0x2C29020

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Subtract W8, W3, W4
	008 Add W23, W8, 1
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X21, X1
	011 Compare X1, 0
	012 JumpIfEqual {44}
	013 Move W19, W3
	014 Move X20, X2
	015 Move X22, X0
	016 Move W8, [X21+24]
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X8, [X22]
	019 Add X9, X21, W19
	020 Move X1, [X9+32]
	021 Move X0, X22
	022 Move X9, [X8+440]
	023 Move X3, [X8+448]
	024 Move X2, X20
	025 NotImplemented "Instruction BLR not yet implemented."
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {35}
	030 Subtract W19, W19, 1
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move TEMP, 0
	033 Not TEMP
	034 Move W19, TEMP
	035 Move W0, W19
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X30, [X31+48]
	041 Move X23, [X31+56]
	042 Return X0
	043 Call 0x1C17F28
	044 Call 0x1C17F20

Method: System.Int32 System.Collections.IEqualityComparer.GetHashCode(System.Object obj)

Disassembly:
	0x02C29014 MOV X0, X1
	0x02C29018 BL 0x1C5C684
	0x02C2901C MOV X1, X0
	0x02C29020 CBZ X20, 0x2C2904C
	0x02C29024 LDR X8, [X20]
	0x02C29028 LDRB W9, [X1 + 0x130]
	0x02C2902C LDRB W10, [X8 + 0x130]
	0x02C29030 CMP W10, W9
	0x02C29034 B.CC 0x2C2933C
	0x02C29038 LDR X8, [X8 + 0xC8]
	0x02C2903C ADD X8, X8, X9, 0x3, LSL
	0x02C29040 LDUR X8, [X8 - 0x8]
	0x02C29044 CMP X8, X1
	0x02C29048 B.NE 0x2C2933C
	0x02C2904C MOV X0, X20
	0x02C29050 LDP X20, X19, [X31 + 0x30]
	0x02C29054 LDP X22, X21, [X31 + 0x20]
	0x02C29058 LDP X24, X23, [X31 + 0x10]
	0x02C2905C LDP X30, X25, [X31], #0x40
	0x02C29060 RET
	0x02C29064 CBZ X20, 0x2C29344
	0x02C29068 LDR X8, [X20]
	0x02C2906C MOV X0, X20
	0x02C29070 LDR X9, [X8 + 0x3C8]
	0x02C29074 LDR X1, [X8 + 0x3D0]
	0x02C29078 BLR X9
	0x02C2907C TBZ X0, 0x0, 0x2C29220
	0x02C29080 LDR X8, [X20]
	0x02C29084 MOV X0, X20
	0x02C29088 LDR X9, [X8 + 0x448]
	0x02C2908C LDR X1, [X8 + 0x450]
	0x02C29090 BLR X9
	0x02C29094 ADRP X9, 0x14F5000
	0x02C29098 LDR X8, [X25]
	0x02C2909C LDR X9, [X9 + 0x238]
	0x02C290A0 MOV X21, X0
	0x02C290A4 LDR W10, [X8 + 0xE0]
	0x02C290A8 LDR X22, [X9]
	0x02C290AC CBNZ W10, 0x2C290B8
	0x02C290B0 MOV X0, X8
	0x02C290B4 BL 0x1C16DFC
	0x02C290B8 MOV X0, X22
	0x02C290BC MOV X1, X31
	0x02C290C0 BL 0x338C698
	0x02C290C4 MOV X1, X0
	0x02C290C8 MOV X0, X21
	0x02C290CC MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X1, 0
	006 JumpIfEqual {55}
	007 Move X8, [X2+32]
	008 Move X20, X1
	009 Move X21, X2
	010 Move X19, X0
	011 Move X8, [X8+192]
	012 Move X1, [X8+72]
	013 Move W8, [X1+309]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {21}
	018 Move X0, X1
	019 Call 0x1C5D684
	020 Move X1, X0
	021 Move X0, X20
	022 Call 0x1C17E00
	023 Compare X0, 0
	024 JumpIfEqual {52}
	025 Move X8, [X21+32]
	026 Move X8, [X8+192]
	027 Move X1, [X8+72]
	028 Move W8, [X1+309]
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {36}
	033 Move X0, X1
	034 Call 0x1C5D684
	035 Move X1, X0
	036 Move X8, [X20]
	037 Move X9, [X1+64]
	038 Move X0, X20
	039 Move X8, [X8+64]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Call 0x1C17E08
	042 Move X8, [X19]
	043 Move X1, [X0]
	044 Move X0, X19
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X3, [X8+456]
	048 Move X2, [X8+464]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 CallNoReturn X3
	052 Move W0, 2
	053 Move X1, X31
	054 Call ThrowHelper.ThrowArgumentException, X0
	055 Move X20, [X31+16]
	056 Move X19, [X31+24]
	057 Move W0, W31
	058 Move X30, [X31+32]
	059 Move X21, [X31+40]
	060 Return X0
	061 Call 0x1C181E0

Method: System.Boolean System.Collections.IEqualityComparer.Equals(System.Object x, System.Object y)

Disassembly:
	0x02C290D0 BL 0x3395194
	0x02C290D4 TBZ X0, 0x0, 0x2C29220
	0x02C290D8 LDR X8, [X20]
	0x02C290DC MOV X0, X20
	0x02C290E0 LDR X9, [X8 + 0x468]
	0x02C290E4 LDR X1, [X8 + 0x470]
	0x02C290E8 BLR X9
	0x02C290EC CBZ X0, 0x2C29344
	0x02C290F0 LDR W8, [X0 + 0x18]
	0x02C290F4 CBZ W8, 0x2C29348
	0x02C290F8 LDR X21, [X0 + 0x20]
	0x02C290FC CBZ X21, 0x2C2912C
	0x02C29100 LDR X8, [X21]
	0x02C29104 LDR X1, [X24]
	0x02C29108 LDRB W10, [X8 + 0x130]
	0x02C2910C LDRB W9, [X1 + 0x130]
	0x02C29110 CMP W10, W9
	0x02C29114 B.CC 0x2C2934C
	0x02C29118 LDR X8, [X8 + 0xC8]
	0x02C2911C ADD X8, X8, X9, 0x3, LSL
	0x02C29120 LDUR X8, [X8 - 0x8]
	0x02C29124 CMP X8, X1
	0x02C29128 B.NE 0x2C2934C
	0x02C2912C ADRP X8, 0x14F5000
	0x02C29130 LDR X0, [X25]
	0x02C29134 LDR X8, [X8 + 0xC88]
	0x02C29138 LDR W9, [X0 + 0xE0]
	0x02C2913C LDR X22, [X8]
	0x02C29140 CBNZ W9, 0x2C29148
	0x02C29144 BL 0x1C16DFC
	0x02C29148 MOV X0, X22
	0x02C2914C MOV X1, X31
	0x02C29150 BL 0x338C698
	0x02C29154 ADRP X8, 0x14D2000
	0x02C29158 LDR X8, [X8 + 0xC60]
	0x02C2915C MOV X22, X0
	0x02C29160 MOVZ W1, 0x1
	0x02C29164 LDR X8, [X8]
	0x02C29168 MOV X0, X8
	0x02C2916C BL 0x1C16D6C
	0x02C29170 CBZ X0, 0x2C29344
	0x02C29174 MOV X23, X0
	0x02C29178 CBZ X21, 0x2C29190
	0x02C2917C LDR X8, [X23]
	0x02C29180 MOV X0, X21
	0x02C29184 LDR X1, [X8 + 0x40]
	0x02C29188 BL 0x1C16E00
	0x02C2918C CBZ X0, 0x2C29354
	0x02C29190 LDR W8, [X23 + 0x18]
	0x02C29194 CBZ W8, 0x2C29348
	0x02C29198 STR X21, [X23 + 0x20]
	0x02C2919C CBZ X22, 0x2C29344
	0x02C291A0 LDR X8, [X22]
	0x02C291A4 MOV X0, X22
	0x02C291A8 MOV X1, X23
	0x02C291AC LDR X9, [X8 + 0x8D8]
	0x02C291B0 LDR X2, [X8 + 0x8E0]
	0x02C291B4 BLR X9
	0x02C291B8 CBZ X0, 0x2C29344
	0x02C291BC LDR X8, [X0]
	0x02C291C0 MOV X1, X21
	0x02C291C4 LDR X9, [X8 + 0x2A8]
	0x02C291C8 LDR X2, [X8 + 0x2B0]
	0x02C291CC BLR X9
	0x02C291D0 TBZ X0, 0x0, 0x2C29220
	0x02C291D4 ADRP X8, 0x14F5000
	0x02C291D8 LDR X0, [X25]
	0x02C291DC LDR X8, [X8 + 0xCA0]
	0x02C291E0 LDR W9, [X0 + 0xE0]
	0x02C291E4 LDR X20, [X8]
	0x02C291E8 CBNZ W9, 0x2C291F0
	0x02C291EC BL 0x1C16DFC
	0x02C291F0 MOV X0, X20
	0x02C291F4 MOV X1, X31
	0x02C291F8 BL 0x338C698
	0x02C291FC LDR X8, [X24]
	0x02C29200 MOV X20, X0
	0x02C29204 LDR W9, [X8 + 0xE0]
	0x02C29208 CBNZ W9, 0x2C29214
	0x02C2920C MOV X0, X8
	0x02C29210 BL 0x1C16DFC
	0x02C29214 MOV X0, X20
	0x02C29218 MOV X1, X21
	0x02C2921C B 0x2C28FE0
	0x02C29220 LDR X8, [X20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X22, X1
	008 Move X19, X0
	009 Move W0, W31
	010 Compare X1, 0
	011 JumpIfEqual {98}
	012 Move X20, X2
	013 Compare X2, 0
	014 JumpIfEqual {98}
	015 Move X8, [X3+32]
	016 Move X21, X3
	017 Move X8, [X8+192]
	018 Move X1, [X8+72]
	019 Move W8, [X1+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {27}
	024 Move X0, X1
	025 Call 0x1C5D684
	026 Move X1, X0
	027 Move X0, X22
	028 Call 0x1C17E00
	029 Compare X0, 0
	030 JumpIfEqual {94}
	031 Move X8, [X21+32]
	032 Move X8, [X8+192]
	033 Move X1, [X8+72]
	034 Move W8, [X1+309]
	035 Move TEMP, X8
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {42}
	039 Move X0, X1
	040 Call 0x1C5D684
	041 Move X1, X0
	042 Move X0, X20
	043 Call 0x1C17E00
	044 Compare X0, 0
	045 JumpIfEqual {94}
	046 Move X8, [X21+32]
	047 Move X8, [X8+192]
	048 Move X1, [X8+72]
	049 Move W8, [X1+309]
	050 Move TEMP, X8
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfEqual {57}
	054 Move X0, X1
	055 Call 0x1C5D684
	056 Move X1, X0
	057 Move X8, [X22]
	058 Move X9, [X1+64]
	059 Move X0, X22
	060 Move X8, [X8+64]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Call 0x1C17E08
	063 Move X8, [X21+32]
	064 Move X21, [X0]
	065 Move X8, [X8+192]
	066 Move X1, [X8+72]
	067 Move W8, [X1+309]
	068 Move TEMP, X8
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfEqual {75}
	072 Move X0, X1
	073 Call 0x1C5D684
	074 Move X1, X0
	075 Move X8, [X20]
	076 Move X9, [X1+64]
	077 Move X0, X20
	078 Move X8, [X8+64]
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Call 0x1C17E08
	081 Move X8, [X19]
	082 Move X2, [X0]
	083 Move X0, X19
	084 Move X1, X21
	085 Move X4, [X8+440]
	086 Move X3, [X8+448]
	087 Move X20, [X31+32]
	088 Move X19, [X31+40]
	089 Move X22, [X31+16]
	090 Move X21, [X31+24]
	091 Move X30, [X31+48]
	092 CallNoReturn X4
	093 Move W0, 1
	094 Move W0, 2
	095 Move X1, X31
	096 Call ThrowHelper.ThrowArgumentException, X0
	097 Move W0, W31
	098 Move X20, [X31+32]
	099 Move X19, [X31+40]
	100 Move X22, [X31+16]
	101 Move X21, [X31+24]
	102 Move X30, [X31+48]
	103 Return X0
	104 Call 0x1C181E0

Method: System.Void .ctor()

Disassembly:
	0x02C29224 MOV X0, X20
	0x02C29228 LDR X9, [X8 + 0x588]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

