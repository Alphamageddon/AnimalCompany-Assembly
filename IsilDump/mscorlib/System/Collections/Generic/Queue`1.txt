Type: System.Collections.Generic.Queue`1

Method: System.Void .ctor()

Disassembly:
	0x024EFB18 STP X31, X31, [X31 + 0x18]
	0x024EFB1C STR X31, [X31 + 0x28]
	0x024EFB20 LDR X8, [X1 + 0x20]
	0x024EFB24 MOV X19, X1
	0x024EFB28 MOV X1, X0
	0x024EFB2C ADD X0, X31, 0x18
	0x024EFB30 LDR X8, [X8 + 0xC0]
	0x024EFB34 LDR X2, [X8 + 0x48]
	0x024EFB38 BL 0x2BB40AC
	0x024EFB3C LDUR V0, [X31 + 0x18]
	0x024EFB40 LDR X8, [X31 + 0x28]
	0x024EFB44 ADD X1, X31, 0x0
	0x024EFB48 STR V0, [X31]
	0x024EFB4C STR X8, [X31 + 0x10]
	0x024EFB50 LDR X8, [X19 + 0x20]
	0x024EFB54 LDR X8, [X8 + 0xC0]
	0x024EFB58 LDR X0, [X8 + 0x40]
	0x024EFB5C BL 0x1C16E04
	0x024EFB60 LDP X30, X19, [X31 + 0x30]
	0x024EFB64 ADD X31, X31, 0x40
	0x024EFB68 RET
	0x024EFB6C STR X30, [X31 - 0x10]!
	0x024EFB70 LDR W8, [X0 + 0x20]
	0x024EFB74 CBZ W8, 0x24EFBC4
	0x024EFB78 LDR X11, [X0 + 0x10]
	0x024EFB7C CBZ X11, 0x24EFBD4
	0x024EFB80 LDRSW X9, [X0 + 0x18]
	0x024EFB84 LDR W10, [X11 + 0x18]
	0x024EFB88 CMP W9, W10
	0x024EFB8C B.CS 0x24EFBD8
	0x024EFB90 ADD X11, X11, X9, 0x3, LSL
	0x024EFB94 LDR W14, [X0 + 0x24]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move X1, X31
	006 Move X19, X0
	007 Call Object..ctor, X0
	008 Move X8, [X20+32]
	009 Move X8, [X8+192]
	010 Move X20, [X8]
	011 Move X8, [X20+56]
	012 Compare X8, 0
	013 JumpIfNotEqual {17}
	014 Move X0, X20
	015 Call 0x1C5D6E0
	016 Move X8, [X20+56]
	017 Move X0, [X8+16]
	018 Move W8, [X0+309]
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {24}
	023 Call 0x1C5D684
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X8, [X20+56]
	029 Move X0, [X8+16]
	030 Move W8, [X0+309]
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {36}
	035 Call 0x1C5D684
	036 Move X8, [X0+184]
	037 Move X8, [X8]
	038 Move [X19+16], X8
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Return 

Method: System.Void .ctor(System.Int32 capacity)

Disassembly:
	0x024EFB98 ADD W12, W9, 0x1
	0x024EFB9C SUB W13, W8, 0x1
	0x024EFBA0 LDR X8, [X11 + 0x20]
	0x024EFBA4 CMP W12, W10
	0x024EFBA8 CSINC W9, W31, W9, EQ
	0x024EFBAC STR W9, [X0 + 0x18]
	0x024EFBB0 ADD W9, W14, 0x1
	0x024EFBB4 STP W13, W9, [X0 + 0x20]
	0x024EFBB8 MOV X0, X8
	0x024EFBBC LDR X30, [X31], #0x10
	0x024EFBC0 RET
	0x024EFBC4 LDR X8, [X1 + 0x20]
	0x024EFBC8 LDR X8, [X8 + 0xC0]
	0x024EFBCC LDR X1, [X8 + 0x58]
	0x024EFBD0 BL 0x24EFE34
	0x024EFBD4 BL 0x1C16F20
	0x024EFBD8 BL 0x1C16F28
	0x024EFBDC STR X30, [X31 - 0x10]!
	0x024EFBE0 LDR W8, [X0 + 0x20]
	0x024EFBE4 CBZ W8, 0x24EFC10
	0x024EFBE8 LDR X8, [X0 + 0x10]
	0x024EFBEC CBZ X8, 0x24EFC20
	0x024EFBF0 LDRSW X9, [X0 + 0x18]
	0x024EFBF4 LDR W10, [X8 + 0x18]
	0x024EFBF8 CMP W9, W10
	0x024EFBFC B.CS 0x24EFC24
	0x024EFC00 ADD X8, X8, X9, 0x3, LSL
	0x024EFC04 LDR X0, [X8 + 0x20]
	0x024EFC08 LDR X30, [X31], #0x10
	0x024EFC0C RET
	0x024EFC10 LDR X8, [X1 + 0x20]
	0x024EFC14 LDR X8, [X8 + 0xC0]
	0x024EFC18 LDR X1, [X8 + 0x58]
	0x024EFC1C BL 0x24EFE34
	0x024EFC20 BL 0x1C16F20
	0x024EFC24 BL 0x1C16F28
	0x024EFC28 STR X30, [X31 - 0x20]!
	0x024EFC2C STP X20, X19, [X31 + 0x10]
	0x024EFC30 LDR X8, [X1 + 0x20]
	0x024EFC34 LDR W20, [X0 + 0x20]
	0x024EFC38 LDR X8, [X8 + 0xC0]
	0x024EFC3C CBZ W20, 0x24EFC80
	0x024EFC40 MOV X19, X0
	0x024EFC44 LDR X0, [X8 + 0x18]
	0x024EFC48 LDRB W8, [X0 + 0x135]
	0x024EFC4C TBNZ X8, 0x0, 0x24EFC54
	0x024EFC50 BL 0x1C5C684
	0x024EFC54 MOV W1, W20
	0x024EFC58 BL 0x1C16D6C
	0x024EFC5C LDP W1, W8, [X19 + 0x18]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W21, W1
	007 Move X1, X31
	008 Move X19, X2
	009 Move X20, X0
	010 Call Object..ctor, X0
	011 Move TEMP, X21
	012 And TEMP, TEMP, -2147483648
	013 Compare TEMP, -2147483648
	014 JumpIfEqual {33}
	015 Move X8, [X19+32]
	016 Move X8, [X8+192]
	017 Move X0, [X8+24]
	018 Move W8, [X0+309]
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {24}
	023 Call 0x1C5D684
	024 Move W1, W21
	025 Call 0x1C17D6C
	026 Move [X20+16], X0
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X22, [X31+16]
	030 Move X21, [X31+24]
	031 Move X30, [X31+48]
	032 Return 
	033 Move [X31+12], W21
	034 Move X0, 0x1C05000
	035 Move X0, [X0+1880]
	036 Call 0x1C17D08
	037 Add X1, X31, 12
	038 Call 0x1C17E04
	039 Move X20, X0
	040 Move X0, 0x1C0D000
	041 Move X0, [X0+1888]
	042 Call 0x1C17D08
	043 Call 0x1C17F10
	044 Move X21, X0
	045 Move X0, 0x1C2F000
	046 Move X0, [X0+88]
	047 Call 0x1C17D08
	048 Move X22, X0
	049 Move X0, 0x1C2D000
	050 Move X0, [X0+1648]
	051 Call 0x1C17D08
	052 Move X3, X0
	053 Move X0, X21
	054 Move X1, X22
	055 Move X2, X20
	056 Move X4, X31
	057 Call ArgumentOutOfRangeException..ctor, X0, X1, X2, X3
	058 Move X0, X21
	059 Move X1, X19
	060 Call 0x1C17DEC

Method: System.Int32 get_Count()

Disassembly:
	0x024EFC60 MOV X20, X0
	0x024EFC64 CMP W1, W8

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Boolean System.Collections.ICollection.get_IsSynchronized()

Disassembly:
	0x024EFC68 B.GE 0x24EFCD4
	0x024EFC6C LDR X0, [X19 + 0x10]

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Object System.Collections.ICollection.get_SyncRoot()

Disassembly:
	0x024EFC70 LDR W4, [X19 + 0x20]
	0x024EFC74 MOV X2, X20
	0x024EFC78 MOV W3, W31
	0x024EFC7C B 0x24EFD10
	0x024EFC80 LDR X19, [X8]
	0x024EFC84 LDR X8, [X19 + 0x38]
	0x024EFC88 CBNZ X8, 0x24EFC98
	0x024EFC8C MOV X0, X19
	0x024EFC90 BL 0x1C5C6E0
	0x024EFC94 LDR X8, [X19 + 0x38]
	0x024EFC98 LDR X0, [X8 + 0x10]
	0x024EFC9C LDRB W8, [X0 + 0x135]
	0x024EFCA0 TBNZ X8, 0x0, 0x24EFCA8
	0x024EFCA4 BL 0x1C5C684
	0x024EFCA8 LDR W8, [X0 + 0xE0]
	0x024EFCAC CBNZ W8, 0x24EFCB4
	0x024EFCB0 BL 0x1C16DFC
	0x024EFCB4 LDR X8, [X19 + 0x38]
	0x024EFCB8 LDR X0, [X8 + 0x10]
	0x024EFCBC LDRB W8, [X0 + 0x135]
	0x024EFCC0 TBNZ X8, 0x0, 0x24EFCC8
	0x024EFCC4 BL 0x1C5C684
	0x024EFCC8 LDR X8, [X0 + 0xB8]
	0x024EFCCC LDR X20, [X8]
	0x024EFCD0 B 0x24EFD18
	0x024EFCD4 LDR X0, [X19 + 0x10]
	0x024EFCD8 CBZ X0, 0x24EFD28
	0x024EFCDC LDR W8, [X0 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1EEB000
	005 Move W8, [X20+3233]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x1C0B000
	012 Move X0, [X0+3264]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3233], W8
	016 Add X19, X19, 40
	017 Move X0, [X19]
	018 Compare X0, 0
	019 JumpIfNotEqual {32}
	020 Move X8, 0x1C0B000
	021 Move X8, [X8+3264]
	022 Move X0, [X8]
	023 Call 0x1C17F10
	024 Move X1, X31
	025 Move X20, X0
	026 Call Object..ctor, X0
	027 Move X0, X19
	028 Move X1, X20
	029 Move X2, X31
	030 Call 0x1C25138
	031 Move X0, [X19]
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return X0

Method: System.Void Clear()

Disassembly:
	0x024EFCE0 MOV X2, X20
	0x024EFCE4 MOV W3, W31
	0x024EFCE8 MOV X5, X31
	0x024EFCEC SUB W4, W8, W1
	0x024EFCF0 BL 0x339FCE8
	0x024EFCF4 LDR X0, [X19 + 0x10]
	0x024EFCF8 CBZ X0, 0x24EFD28
	0x024EFCFC LDR W8, [X0 + 0x18]
	0x024EFD00 LDP W9, W4, [X19 + 0x18]
	0x024EFD04 MOV W1, W31
	0x024EFD08 MOV X2, X20
	0x024EFD0C SUB W3, W8, W9
	0x024EFD10 MOV X5, X31
	0x024EFD14 BL 0x339FCE8
	0x024EFD18 MOV X0, X20
	0x024EFD1C LDP X20, X19, [X31 + 0x10]
	0x024EFD20 LDR X30, [X31], #0x20
	0x024EFD24 RET
	0x024EFD28 BL 0x1C16F20
	0x024EFD2C STP X30, X21, [X31 - 0x20]!
	0x024EFD30 STP X20, X19, [X31 + 0x10]
	0x024EFD34 LDR X8, [X2 + 0x20]
	0x024EFD38 MOV W19, W1
	0x024EFD3C MOV X20, X0
	0x024EFD40 LDR X8, [X8 + 0xC0]
	0x024EFD44 LDR X8, [X8 + 0x18]
	0x024EFD48 LDRB W9, [X8 + 0x135]
	0x024EFD4C TBNZ X9, 0x0, 0x24EFD5C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W2, [X0+32]
	004 Move X19, X0
	005 Compare W2, 0
	006 JumpIfEqual {24}
	007 Move W1, [X19+24]
	008 Move W8, [X19+28]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X0, [X19+16]
	011 Move X0, [X19+16]
	012 Compare X0, 0
	013 JumpIfEqual {31}
	014 Move W8, [X0+24]
	015 Move X3, X31
	016 Subtract W2, W8, W1
	017 Call Array.Clear, X0, X1, X2
	018 Move X0, [X19+16]
	019 Move W2, [X19+28]
	020 Move W1, W31
	021 Move X3, X31
	022 Call Array.Clear, X0, X1, X2
	023 Move [X19+32], W31
	024 Move W8, [X19+36]
	025 Move [X19+24], X31
	026 Add W8, W8, 1
	027 Move [X19+36], W8
	028 Move X30, [X31+16]
	029 Move X19, [X31+24]
	030 Return 
	031 Call 0x1C17F20

Method: System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)

Disassembly:
	0x024EFD50 MOV X0, X8
	0x024EFD54 BL 0x1C5C684
	0x024EFD58 MOV X8, X0
	0x024EFD5C MOV X0, X8
	0x024EFD60 MOV W1, W19
	0x024EFD64 BL 0x1C16D6C
	0x024EFD68 LDR W4, [X20 + 0x20]
	0x024EFD6C MOV X21, X0
	0x024EFD70 CMP W4, 0x1
	0x024EFD74 B.LT 0x24EFDD8
	0x024EFD78 LDP W1, W8, [X20 + 0x18]
	0x024EFD7C CMP W1, W8
	0x024EFD80 B.GE 0x24EFD94
	0x024EFD84 LDR X0, [X20 + 0x10]
	0x024EFD88 MOV X2, X21
	0x024EFD8C MOV W3, W31
	0x024EFD90 B 0x24EFDD0
	0x024EFD94 LDR X0, [X20 + 0x10]
	0x024EFD98 CBZ X0, 0x24EFE00
	0x024EFD9C LDR W8, [X0 + 0x18]
	0x024EFDA0 MOV X2, X21
	0x024EFDA4 MOV W3, W31
	0x024EFDA8 MOV X5, X31
	0x024EFDAC SUB W4, W8, W1
	0x024EFDB0 BL 0x339FCE8
	0x024EFDB4 LDR X0, [X20 + 0x10]
	0x024EFDB8 CBZ X0, 0x24EFE00
	0x024EFDBC LDR W8, [X0 + 0x18]
	0x024EFDC0 LDP W9, W4, [X20 + 0x18]
	0x024EFDC4 MOV W1, W31
	0x024EFDC8 MOV X2, X21
	0x024EFDCC SUB W3, W8, W9
	0x024EFDD0 MOV X5, X31
	0x024EFDD4 BL 0x339FCE8
	0x024EFDD8 LDP W8, W9, [X20 + 0x20]
	0x024EFDDC STR X21, [X20 + 0x10]
	0x024EFDE0 CMP W8, W19
	0x024EFDE4 ADD W9, W9, 0x1
	0x024EFDE8 CSEL W8, W31, W8, EQ
	0x024EFDEC STP W31, W8, [X20 + 0x18]
	0x024EFDF0 STR W9, [X20 + 0x24]
	0x024EFDF4 LDP X20, X19, [X31 + 0x10]
	0x024EFDF8 LDP X30, X21, [X31], #0x20
	0x024EFDFC RET
	0x024EFE00 BL 0x1C16F20
	0x024EFE04 STR X30, [X31 - 0x10]!
	0x024EFE08 LDR X8, [X0 + 0x10]
	0x024EFE0C CBZ X8, 0x24EFE30
	0x024EFE10 LDR W9, [X1]
	0x024EFE14 LDR W8, [X8 + 0x18]
	0x024EFE18 ADD W9, W9, 0x1
	0x024EFE1C CMP W9, W8
	0x024EFE20 CSEL W8, W31, W9, EQ
	0x024EFE24 STR W8, [X1]
	0x024EFE28 LDR X30, [X31], #0x10
	0x024EFE2C RET
	0x024EFE30 BL 0x1C16F20
	0x024EFE34 STR X30, [X31 - 0x20]!
	0x024EFE38 STP X20, X19, [X31 + 0x10]
	0x024EFE3C ADRP X0, 0x1C04000
	0x024EFE40 LDR X0, [X0 + 0x5B0]
	0x024EFE44 MOV X19, X1
	0x024EFE48 BL 0x1C16D08
	0x024EFE4C BL 0x1C16F10
	0x024EFE50 MOV X20, X0
	0x024EFE54 ADRP X0, 0x1C2E000
	0x024EFE58 LDR X0, [X0 + 0x60]
	0x024EFE5C BL 0x1C16D08
	0x024EFE60 MOV X1, X0
	0x024EFE64 MOV X0, X20
	0x024EFE68 MOV X2, X31
	0x024EFE6C BL 0x337DF1C
	0x024EFE70 MOV X0, X20
	0x024EFE74 MOV X1, X19
	0x024EFE78 BL 0x1C16DEC
	0x024EFE7C STR X30, [X31 - 0x10]!
	0x024EFE80 LDR X8, [X0 + 0x10]
	0x024EFE84 CBZ X8, 0x24EFEE0
	0x024EFE88 LDR W9, [X8 + 0x18]
	0x024EFE8C ADRP X8, 0xFFFFFFFFFE5FE000
	0x024EFE90 LDR V0, [X8 + 0x4C0]
	0x024EFE94 MOVZ X10, 0x7FF00000
	0x024EFE98 LDR W8, [X0 + 0x20]
	0x024EFE9C SCVTF D2, W9
	0x024EFEA0 FMOV D1, X10
	0x024EFEA4 FMUL D0, D2, D0
	0x024EFEA8 FCVTZS W9, D0
	0x024EFEAC FCMP D0, D1
	0x024EFEB0 MOVZ W10, 0x80000000
	0x024EFEB4 CSEL W9, W10, W9, EQ
	0x024EFEB8 CMP W8, W9
	0x024EFEBC B.GE 0x24EFED8
	0x024EFEC0 LDR X9, [X1 + 0x20]
	0x024EFEC4 MOV W1, W8
	0x024EFEC8 LDR X9, [X9 + 0xC0]
	0x024EFECC LDR X2, [X9 + 0x28]
	0x024EFED0 LDR X30, [X31], #0x10
	0x024EFED4 B 0x24EFD2C
	0x024EFED8 LDR X30, [X31], #0x10
	0x024EFEDC RET
	0x024EFEE0 BL 0x1C16F20
	0x024EFEE4 STR X30, [X31 - 0x20]!
	0x024EFEE8 STP X20, X19, [X31 + 0x10]
	0x024EFEEC MOV X20, X1
	0x024EFEF0 MOV X1, X31
	0x024EFEF4 MOV X19, X0
	0x024EFEF8 BL 0x33BDD8C
	0x024EFEFC LDR X8, [X20 + 0x20]
	0x024EFF00 LDR X8, [X8 + 0xC0]
	0x024EFF04 LDR X20, [X8]
	0x024EFF08 LDR X8, [X20 + 0x38]
	0x024EFF0C CBNZ X8, 0x24EFF1C
	0x024EFF10 MOV X0, X20
	0x024EFF14 BL 0x1C5C6E0
	0x024EFF18 LDR X8, [X20 + 0x38]
	0x024EFF1C LDR X0, [X8 + 0x10]
	0x024EFF20 LDRB W8, [X0 + 0x135]
	0x024EFF24 TBNZ X8, 0x0, 0x24EFF2C
	0x024EFF28 BL 0x1C5C684
	0x024EFF2C LDR W8, [X0 + 0xE0]
	0x024EFF30 CBNZ W8, 0x24EFF38
	0x024EFF34 BL 0x1C16DFC
	0x024EFF38 LDR X8, [X20 + 0x38]
	0x024EFF3C LDR X0, [X8 + 0x10]
	0x024EFF40 LDRB W8, [X0 + 0x135]
	0x024EFF44 TBNZ X8, 0x0, 0x24EFF4C
	0x024EFF48 BL 0x1C5C684
	0x024EFF4C LDR X8, [X0 + 0xB8]
	0x024EFF50 LDR X8, [X8]
	0x024EFF54 STR X8, [X19 + 0x10]
	0x024EFF58 LDP X20, X19, [X31 + 0x10]
	0x024EFF5C LDR X30, [X31], #0x20
	0x024EFF60 RET
	0x024EFF64 STR X30, [X31 - 0x30]!
	0x024EFF68 STP X22, X21, [X31 + 0x10]
	0x024EFF6C STP X20, X19, [X31 + 0x20]
	0x024EFF70 MOV W21, W1
	0x024EFF74 MOV X1, X31
	0x024EFF78 MOV X19, X2
	0x024EFF7C MOV X20, X0
	0x024EFF80 BL 0x33BDD8C
	0x024EFF84 TBNZ X21, 0x1F, 0x24EFFBC
	0x024EFF88 LDR X8, [X19 + 0x20]
	0x024EFF8C LDR X8, [X8 + 0xC0]
	0x024EFF90 LDR X0, [X8 + 0x18]
	0x024EFF94 LDRB W8, [X0 + 0x135]
	0x024EFF98 TBNZ X8, 0x0, 0x24EFFA0
	0x024EFF9C BL 0x1C5C684
	0x024EFFA0 MOV W1, W21
	0x024EFFA4 BL 0x1C16D6C
	0x024EFFA8 STR X0, [X20 + 0x10]
	0x024EFFAC LDP X20, X19, [X31 + 0x20]
	0x024EFFB0 LDP X22, X21, [X31 + 0x10]
	0x024EFFB4 LDR X30, [X31], #0x30
	0x024EFFB8 RET
	0x024EFFBC STR W21, [X31 + 0xC]
	0x024EFFC0 ADRP X0, 0x1C04000
	0x024EFFC4 LDR X0, [X0 + 0x758]
	0x024EFFC8 BL 0x1C16D08
	0x024EFFCC ADD X1, X31, 0xC
	0x024EFFD0 BL 0x1C16E04
	0x024EFFD4 MOV X20, X0
	0x024EFFD8 ADRP X0, 0x1C0C000
	0x024EFFDC LDR X0, [X0 + 0x760]
	0x024EFFE0 BL 0x1C16D08
	0x024EFFE4 BL 0x1C16F10
	0x024EFFE8 MOV X21, X0
	0x024EFFEC ADRP X0, 0x1C2E000
	0x024EFFF0 LDR X0, [X0 + 0x58]
	0x024EFFF4 BL 0x1C16D08
	0x024EFFF8 MOV X22, X0
	0x024EFFFC ADRP X0, 0x1C2C000
	0x024F0000 LDR X0, [X0 + 0x670]
	0x024F0004 BL 0x1C16D08
	0x024F0008 MOV X3, X0
	0x024F000C MOV X0, X21
	0x024F0010 MOV X1, X22
	0x024F0014 MOV X2, X20
	0x024F0018 MOV X4, X31
	0x024F001C BL 0x3312C8C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, X3
	009 Compare X1, 0
	010 JumpIfEqual {70}
	011 Move X20, X1
	012 Move X22, X0
	013 Move X0, X1
	014 Move X1, X31
	015 Move W21, W2
	016 Call Array.get_Rank, X0
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X0, X20
	019 Move W1, W31
	020 Move X2, X31
	021 Call Array.GetLowerBound, X0, X1
	022 Compare W0, 0
	023 JumpIfNotEqual {89}
	024 Move X0, X20
	025 Move X1, X31
	026 Call Array.get_Length, X0
	027 Move TEMP, X21
	028 And TEMP, TEMP, -2147483648
	029 Compare TEMP, -2147483648
	030 JumpIfEqual {106}
	031 Subtract W8, W0, W21
	032 Move W24, [X22+32]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Compare W24, 0
	035 JumpIfEqual {62}
	036 Move X0, [X22+16]
	037 Compare X0, 0
	038 JumpIfEqual {147}
	039 Move W1, [X22+24]
	040 Move W8, [X0+24]
	041 Subtract W8, W8, W1
	042 NotImplemented "Instruction CMP not yet implemented."
	043 NotImplemented "Instruction CSEL not yet implemented."
	044 Move X2, X20
	045 Move W3, W21
	046 Move W4, W23
	047 Move X5, X31
	048 Call Array.Copy, X0, X1, X2, X3, X4
	049 Subtract W4, W24, W23
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X0, [X22+16]
	052 Compare X0, 0
	053 JumpIfEqual {148}
	054 Move W8, [X22+24]
	055 Move W9, [X0+24]
	056 Subtract W8, W21, W8
	057 Add W3, W8, W9
	058 Move W1, W31
	059 Move X2, X20
	060 Move X5, X31
	061 Call Array.Copy, X0, X1, X2, X3, X4
	062 Move X20, [X31+48]
	063 Move X19, [X31+56]
	064 Move X22, [X31+32]
	065 Move X21, [X31+40]
	066 Move X24, [X31+16]
	067 Move X23, [X31+24]
	068 Move X30, [X31+64]
	069 Return 
	070 Move X0, 0x1C0A000
	071 Move X0, [X0+1320]
	072 Call 0x1C17D08
	073 Call 0x1C17F10
	074 Move X20, X0
	075 Move X0, 0x1C2D000
	076 Move X0, [X0+1600]
	077 Call 0x1C17D08
	078 Move X1, X0
	079 Move X0, X20
	080 Move X2, X31
	081 Call ArgumentNullException..ctor, X0, X1
	082 Move X0, 0x1C0D000
	083 Move X0, [X0+1400]
	084 Call 0x1C17D08
	085 Call 0x1C17F10
	086 Move X20, X0
	087 Move X0, 0x1C2E000
	088 Move X0, [X0+776]
	089 Move X0, 0x1C0D000
	090 Move X0, [X0+1400]
	091 Call 0x1C17D08
	092 Call 0x1C17F10
	093 Move X20, X0
	094 Move X0, 0x1C2E000
	095 Move X0, [X0+784]
	096 Call 0x1C17D08
	097 Move X21, X0
	098 Move X0, 0x1C2D000
	099 Move X0, [X0+1600]
	100 Call 0x1C17D08
	101 Move X2, X0
	102 Move X0, X20
	103 Move X1, X21
	104 Move X3, X31
	105 Call ArgumentException..ctor, X0, X1, X2
	106 Move [X31+12], W21
	107 Move X0, 0x1C05000
	108 Move X0, [X0+1880]
	109 Call 0x1C17D08
	110 Add X1, X31, 12
	111 Call 0x1C17E04
	112 Move X20, X0
	113 Move X0, 0x1C0D000
	114 Move X0, [X0+1888]
	115 Call 0x1C17D08
	116 Call 0x1C17F10
	117 Move X21, X0
	118 Move X0, 0x1C10000
	119 Move X0, [X0+304]
	120 Call 0x1C17D08
	121 Move X22, X0
	122 Move X0, 0x1C2D000
	123 Move X0, [X0+1632]
	124 Call 0x1C17D08
	125 Move X3, X0
	126 Move X0, X21
	127 Move X1, X22
	128 Move X2, X20
	129 Move X4, X31
	130 Call ArgumentOutOfRangeException..ctor, X0, X1, X2, X3
	131 Move X0, X21
	132 Move X0, 0x1C0D000
	133 Move X0, [X0+1400]
	134 Call 0x1C17D08
	135 Call 0x1C17F10
	136 Move X20, X0
	137 Move X0, 0x1C2D000
	138 Move X0, [X0+1888]
	139 Call 0x1C17D08
	140 Move X1, X0
	141 Move X0, X20
	142 Move X2, X31
	143 Call ArgumentException..ctor, X0, X1
	144 Move X0, X20
	145 Move X1, X19
	146 Call 0x1C17DEC
	147 Call 0x1C17F20
	148 Call 0x1C17F20
	149 Move X20, X0
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Move X0, X20
	152 Call 0x3EB2AD0
	153 Move X20, X0
	154 Move X0, 0x1C2E000
	155 Move X0, [X0+800]
	156 Call 0x1C17D08
	157 Move X8, [X20]
	158 Move X1, [X8]
	159 Call 0x1C18270
	160 Move TEMP, X0
	161 And TEMP, TEMP, 1
	162 Compare TEMP, 1
	163 JumpIfNotEqual {172}
	164 Call 0x3EB2AE0
	165 Move X0, 0x1C0D000
	166 Move X0, [X0+1400]
	167 Call 0x1C17D08
	168 Call 0x1C17F10
	169 Move X20, X0
	170 Move X0, 0x1C2E000
	171 Move X0, [X0+808]
	172 Move W0, 8
	173 Call 0x3EB2AF0
	174 Move X8, [X20]
	175 Move [X0], X8
	176 Move X1, 0x19C6000
	177 Add X1, X1, 3672
	178 Move X2, X31
	179 Call 0x3EB2B00
	180 Move X20, X0
	181 Call 0x3EB2AE0
	182 Move X0, X20
	183 Call 0x1D2D690
	184 Call 0x1991590

Method: System.Void Enqueue(T item)

Disassembly:
	0x024F0020 MOV X0, X21
	0x024F0024 MOV X1, X19
	0x024F0028 BL 0x1C16DEC
	0x024F002C LDR W0, [X0 + 0x20]
	0x024F0030 RET
	0x024F0034 MOV W0, W31
	0x024F0038 RET
	0x024F003C STR X30, [X31 - 0x20]!
	0x024F0040 STP X20, X19, [X31 + 0x10]
	0x024F0044 ADRP X20, 0x1EE9000
	0x024F0048 LDRB W8, [X20 + 0xCA3]
	0x024F004C MOV X19, X0
	0x024F0050 TBNZ X8, 0x0, 0x24F0068
	0x024F0054 ADRP X0, 0x1C09000
	0x024F0058 LDR X0, [X0 + 0xCC0]
	0x024F005C BL 0x1C16CF4
	0x024F0060 MOVZ W8, 0x1
	0x024F0064 STRB W8, [X20 + 0xCA3]
	0x024F0068 LDR X0, [X19 + 0x28]!
	0x024F006C CBNZ X0, 0x24F00A0
	0x024F0070 ADRP X8, 0x1C09000
	0x024F0074 LDR X8, [X8 + 0xCC0]
	0x024F0078 LDR X0, [X8]
	0x024F007C BL 0x1C16F10
	0x024F0080 MOV X1, X31
	0x024F0084 MOV X20, X0
	0x024F0088 BL 0x33BDD8C
	0x024F008C MOV X0, X19
	0x024F0090 MOV X1, X20
	0x024F0094 MOV X2, X31
	0x024F0098 BL 0x1C24138
	0x024F009C LDR X0, [X19]
	0x024F00A0 LDP X20, X19, [X31 + 0x10]
	0x024F00A4 LDR X30, [X31], #0x20
	0x024F00A8 RET
	0x024F00AC LDR W8, [X0 + 0x20]
	0x024F00B0 CBZ W8, 0x24F00B8
	0x024F00B4 STR W31, [X0 + 0x20]
	0x024F00B8 LDR W8, [X0 + 0x24]
	0x024F00BC STR X31, [X0 + 0x18]
	0x024F00C0 ADD W8, W8, 0x1
	0x024F00C4 STR W8, [X0 + 0x24]
	0x024F00C8 RET
	0x024F00CC STR X30, [X31 - 0x40]!
	0x024F00D0 STP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X0+16]
	006 Compare X8, 0
	007 JumpIfEqual {52}
	008 Move W9, [X0+32]
	009 Move W10, [X8+24]
	010 Move X20, X2
	011 Move X19, X0
	012 Move X21, X1
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X8, [X3+32]
	015 Move W10, W9
	016 ShiftRight W10, 31
	017 And W10, W10, 0x3FFFFFFF
	018 Move X0, X19
	019 Move X8, [X8+192]
	020 Move X2, [X8+40]
	021 Add W8, W9, 4
	022 NotImplemented "Instruction CMP not yet implemented."
	023 NotImplemented "Instruction CSEL not yet implemented."
	024 Call 0x24F0374, X0, X1
	025 Move X8, [X19+16]
	026 Compare X8, 0
	027 JumpIfEqual {52}
	028 NotImplemented "Instruction LDRSW not yet implemented."
	029 Move W10, [X8+24]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Add X8, X8, X9
	032 Move [X8+32], X21
	033 Move [X8+40], X20
	034 Move X8, [X19+16]
	035 Compare X8, 0
	036 JumpIfEqual {52}
	037 Move W9, [X19+28]
	038 Move W8, [X8+24]
	039 Move V0, [X19+32]
	040 NotImplemented "Instruction MOVI not yet implemented."
	041 Add W9, W9, 1
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Add S0, S0, S1
	044 NotImplemented "Instruction CSEL not yet implemented."
	045 Move [X19+28], W8
	046 Move [X19+32], D0
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 
	052 Call 0x1C17F20
	053 Call 0x1C17F28

Method: System.Collections.Generic.Queue`1/Enumerator<T> GetEnumerator()

Disassembly:
	0x024F00D4 STP X22, X21, [X31 + 0x20]
	0x024F00D8 STP X20, X19, [X31 + 0x30]
	0x024F00DC MOV X19, X3
	0x024F00E0 CBZ X1, 0x24F01B8
	0x024F00E4 MOV X20, X1
	0x024F00E8 MOV X22, X0
	0x024F00EC MOV X0, X1
	0x024F00F0 MOV X1, X31

ISIL:
	001 NotImplemented "Instruction MOVI not yet implemented."
	002 Move [X8], V0
	003 Move [X8+8], V0
	004 Move X9, [X1+32]
	005 Move X1, X0
	006 Move X0, X8
	007 Move X9, [X9+192]
	008 Move X2, [X9+72]
	009 Call 0x2BB4524, X0, X1
	010 Return X0

Method: System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()

Disassembly:
	0x024F00F4 MOV W21, W2
	0x024F00F8 BL 0x339FCE4
	0x024F00FC CMP W0, 0x1
	0x024F0100 B.NE 0x24F01EC
	0x024F0104 MOV X0, X20
	0x024F0108 MOV W1, W31
	0x024F010C MOV X2, X31
	0x024F0110 BL 0x339FA30
	0x024F0114 CBNZ W0, 0x24F020C
	0x024F0118 MOV X0, X20
	0x024F011C MOV X1, X31
	0x024F0120 BL 0x3395B7C
	0x024F0124 TBNZ X21, 0x1F, 0x24F0254
	0x024F0128 SUBS W8, W0, W21
	0x024F012C B.LT 0x24F0254
	0x024F0130 LDR W24, [X22 + 0x20]
	0x024F0134 CMP W8, W24
	0x024F0138 B.LT 0x24F02C0
	0x024F013C CBZ W24, 0x24F01A4
	0x024F0140 LDR X0, [X22 + 0x10]
	0x024F0144 CBZ X0, 0x24F02FC

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+64], X30
	003 Move [X31+72], X19
	004 NotImplemented "Instruction MOVI not yet implemented."
	005 Move [X31+32], V0
	006 Move [X31+40], V0
	007 Move X8, [X1+32]
	008 Move X19, X1
	009 Move X1, X0
	010 Add X0, X31, 32
	011 Move X8, [X8+192]
	012 Move X2, [X8+72]
	013 Call 0x2BB4524, X0, X1
	014 Move V0, [X31+32]
	015 Move V1, [X31+48]
	016 Add X1, X31, 0
	017 Move [X31], V0
	018 Move [X31+8], V1
	019 Move X8, [X19+32]
	020 Move X8, [X8+192]
	021 Move X0, [X8+64]
	022 Call 0x1C17E04
	023 Move X30, [X31+64]
	024 Move X19, [X31+72]
	025 Add X31, X31, 80
	026 Return X0

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x024F0148 LDR W1, [X22 + 0x18]
	0x024F014C LDR W8, [X0 + 0x18]
	0x024F0150 SUB W8, W8, W1
	0x024F0154 CMP W8, W24
	0x024F0158 CSEL W23, W8, W24, LT
	0x024F015C MOV X2, X20
	0x024F0160 MOV W3, W21
	0x024F0164 MOV W4, W23
	0x024F0168 MOV X5, X31
	0x024F016C BL 0x339FCE8
	0x024F0170 SUB W4, W24, W23
	0x024F0174 CMP W4, 0x0
	0x024F0178 B.LE 0x24F01A4
	0x024F017C LDR X0, [X22 + 0x10]
	0x024F0180 CBZ X0, 0x24F0300
	0x024F0184 LDR W8, [X22 + 0x18]
	0x024F0188 LDR W9, [X0 + 0x18]
	0x024F018C SUB W8, W21, W8
	0x024F0190 ADD W3, W8, W9
	0x024F0194 MOV W1, W31
	0x024F0198 MOV X2, X20

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+64], X30
	003 Move [X31+72], X19
	004 NotImplemented "Instruction MOVI not yet implemented."
	005 Move [X31+32], V0
	006 Move [X31+40], V0
	007 Move X8, [X1+32]
	008 Move X19, X1
	009 Move X1, X0
	010 Add X0, X31, 32
	011 Move X8, [X8+192]
	012 Move X2, [X8+72]
	013 Call 0x2BB4524, X0, X1
	014 Move V0, [X31+32]
	015 Move V1, [X31+48]
	016 Add X1, X31, 0
	017 Move [X31], V0
	018 Move [X31+8], V1
	019 Move X8, [X19+32]
	020 Move X8, [X8+192]
	021 Move X0, [X8+64]
	022 Call 0x1C17E04
	023 Move X30, [X31+64]
	024 Move X19, [X31+72]
	025 Add X31, X31, 80
	026 Return X0

Method: T Dequeue()

Disassembly:
	0x024F019C MOV X5, X31
	0x024F01A0 BL 0x339FCE8
	0x024F01A4 LDP X20, X19, [X31 + 0x30]
	0x024F01A8 LDP X22, X21, [X31 + 0x20]
	0x024F01AC LDP X24, X23, [X31 + 0x10]
	0x024F01B0 LDR X30, [X31], #0x40
	0x024F01B4 RET
	0x024F01B8 ADRP X0, 0x1C08000
	0x024F01BC LDR X0, [X0 + 0x528]
	0x024F01C0 BL 0x1C16D08
	0x024F01C4 BL 0x1C16F10
	0x024F01C8 MOV X20, X0
	0x024F01CC ADRP X0, 0x1C2B000
	0x024F01D0 LDR X0, [X0 + 0x640]
	0x024F01D4 BL 0x1C16D08
	0x024F01D8 MOV X1, X0
	0x024F01DC MOV X0, X20
	0x024F01E0 MOV X2, X31
	0x024F01E4 BL 0x330E100
	0x024F01E8 B 0x24F02F0
	0x024F01EC ADRP X0, 0x1C0B000
	0x024F01F0 LDR X0, [X0 + 0x578]
	0x024F01F4 BL 0x1C16D08
	0x024F01F8 BL 0x1C16F10
	0x024F01FC MOV X20, X0
	0x024F0200 ADRP X0, 0x1C2C000
	0x024F0204 LDR X0, [X0 + 0x308]
	0x024F0208 B 0x24F0228
	0x024F020C ADRP X0, 0x1C0B000
	0x024F0210 LDR X0, [X0 + 0x578]
	0x024F0214 BL 0x1C16D08
	0x024F0218 BL 0x1C16F10
	0x024F021C MOV X20, X0
	0x024F0220 ADRP X0, 0x1C2C000

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+32]
	003 Compare W8, 0
	004 JumpIfEqual {34}
	005 Move X8, [X0+16]
	006 Compare X8, 0
	007 JumpIfEqual {33}
	008 NotImplemented "Instruction LDRSW not yet implemented."
	009 Move W10, [X8+24]
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Add X9, X8, X9
	012 Move X8, [X9+32]
	013 Move X1, [X9+40]
	014 Move [X9+32], X31
	015 Move [X9+40], X31
	016 Move X9, [X0+16]
	017 Compare X9, 0
	018 JumpIfEqual {33}
	019 Move W10, [X0+24]
	020 Move W9, [X9+24]
	021 Move X11, -27267072
	022 Move V0, [X0+32]
	023 Move V1, [X11+1024]
	024 Add W10, W10, 1
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction CSEL not yet implemented."
	027 Add S0, S0, S1
	028 Move [X0+24], W9
	029 Move [X0+32], D0
	030 Move X0, X8
	031 Move X30, [X31+16]
	032 Return X0
	033 Call 0x1C17F20
	034 Move X8, [X1+32]
	035 Move X8, [X8+192]
	036 Move X1, [X8+88]
	037 Call 0x24F047C, X0
	038 Call 0x1C17F28

Method: T Peek()

Disassembly:
	0x024F0224 LDR X0, [X0 + 0x310]
	0x024F0228 BL 0x1C16D08
	0x024F022C MOV X21, X0
	0x024F0230 ADRP X0, 0x1C2B000
	0x024F0234 LDR X0, [X0 + 0x640]
	0x024F0238 BL 0x1C16D08
	0x024F023C MOV X2, X0
	0x024F0240 MOV X0, X20
	0x024F0244 MOV X1, X21
	0x024F0248 MOV X3, X31
	0x024F024C BL 0x330E16C
	0x024F0250 B 0x24F02F0
	0x024F0254 STR W21, [X31 + 0xC]
	0x024F0258 ADRP X0, 0x1C03000
	0x024F025C LDR X0, [X0 + 0x758]
	0x024F0260 BL 0x1C16D08
	0x024F0264 ADD X1, X31, 0xC
	0x024F0268 BL 0x1C16E04
	0x024F026C MOV X20, X0

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+32]
	003 Compare W8, 0
	004 JumpIfEqual {16}
	005 Move X8, [X0+16]
	006 Compare X8, 0
	007 JumpIfEqual {20}
	008 NotImplemented "Instruction LDRSW not yet implemented."
	009 Move W10, [X8+24]
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Add X8, X8, X9
	012 Move X0, [X8+32]
	013 Move X1, [X8+40]
	014 Move X30, [X31+16]
	015 Return X0
	016 Move X8, [X1+32]
	017 Move X8, [X8+192]
	018 Move X1, [X8+88]
	019 Call 0x24F047C, X0
	020 Call 0x1C17F20
	021 Call 0x1C17F28

Method: T[] ToArray()

Disassembly:
	0x024F0270 ADRP X0, 0x1C0B000
	0x024F0274 LDR X0, [X0 + 0x760]
	0x024F0278 BL 0x1C16D08
	0x024F027C BL 0x1C16F10
	0x024F0280 MOV X21, X0
	0x024F0284 ADRP X0, 0x1C0E000
	0x024F0288 LDR X0, [X0 + 0x130]
	0x024F028C BL 0x1C16D08
	0x024F0290 MOV X22, X0
	0x024F0294 ADRP X0, 0x1C2B000
	0x024F0298 LDR X0, [X0 + 0x660]
	0x024F029C BL 0x1C16D08
	0x024F02A0 MOV X3, X0
	0x024F02A4 MOV X0, X21
	0x024F02A8 MOV X1, X22
	0x024F02AC MOV X2, X20
	0x024F02B0 MOV X4, X31
	0x024F02B4 BL 0x3312C8C
	0x024F02B8 MOV X0, X21
	0x024F02BC B 0x24F02F4
	0x024F02C0 ADRP X0, 0x1C0B000
	0x024F02C4 LDR X0, [X0 + 0x578]
	0x024F02C8 BL 0x1C16D08
	0x024F02CC BL 0x1C16F10
	0x024F02D0 MOV X20, X0
	0x024F02D4 ADRP X0, 0x1C2B000
	0x024F02D8 LDR X0, [X0 + 0x760]
	0x024F02DC BL 0x1C16D08
	0x024F02E0 MOV X1, X0
	0x024F02E4 MOV X0, X20
	0x024F02E8 MOV X2, X31
	0x024F02EC BL 0x3314A68
	0x024F02F0 MOV X0, X20
	0x024F02F4 MOV X1, X19
	0x024F02F8 BL 0x1C16DEC
	0x024F02FC BL 0x1C16F20
	0x024F0300 BL 0x1C16F20
	0x024F0304 B 0x24F0310
	0x024F0308 B 0x24F0310
	0x024F030C B 0x24F0310
	0x024F0310 MOV X20, X0
	0x024F0314 CMP W1, 0x1
	0x024F0318 B.NE 0x24F0390
	0x024F031C MOV X0, X20
	0x024F0320 BL 0x3EB1AD0
	0x024F0324 MOV X20, X0
	0x024F0328 ADRP X0, 0x1C2C000
	0x024F032C LDR X0, [X0 + 0x320]
	0x024F0330 BL 0x1C16D08
	0x024F0334 LDR X8, [X20]
	0x024F0338 LDR X1, [X8]
	0x024F033C BL 0x1C17270
	0x024F0340 TBZ X0, 0x0, 0x24F0368
	0x024F0344 BL 0x3EB1AE0
	0x024F0348 ADRP X0, 0x1C0B000
	0x024F034C LDR X0, [X0 + 0x578]
	0x024F0350 BL 0x1C16D08
	0x024F0354 BL 0x1C16F10
	0x024F0358 MOV X20, X0
	0x024F035C ADRP X0, 0x1C2C000
	0x024F0360 LDR X0, [X0 + 0x328]
	0x024F0364 B 0x24F0228
	0x024F0368 MOVZ W0, 0x8
	0x024F036C BL 0x3EB1AF0
	0x024F0370 LDR X8, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+32]
	005 Move W20, [X0+32]
	006 Move X8, [X8+192]
	007 Compare W20, 0
	008 JumpIfEqual {27}
	009 Move X19, X0
	010 Move X0, [X8+24]
	011 Move W8, [X0+309]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {17}
	016 Call 0x1C5D684
	017 Move W1, W20
	018 Call 0x1C17D6C
	019 Move W1, [X19+24]
	020 Move W8, [X19+28]
	021 Move X20, X0
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X0, [X19+16]
	024 Move W4, [X19+32]
	025 Move X2, X20
	026 Move W3, W31
	027 Move X19, [X8]
	028 Move X8, [X19+56]
	029 Compare X8, 0
	030 JumpIfNotEqual {34}
	031 Move X0, X19
	032 Call 0x1C5D6E0
	033 Move X8, [X19+56]
	034 Move X0, [X8+16]
	035 Move W8, [X0+309]
	036 Move TEMP, X8
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {41}
	040 Call 0x1C5D684
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X8, [X19+56]
	046 Move X0, [X8+16]
	047 Move W8, [X0+309]
	048 Move TEMP, X8
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfEqual {53}
	052 Call 0x1C5D684
	053 Move X8, [X0+184]
	054 Move X20, [X8]
	055 Move X0, [X19+16]
	056 Compare X0, 0
	057 JumpIfEqual {80}
	058 Move W8, [X0+24]
	059 Move X2, X20
	060 Move W3, W31
	061 Move X5, X31
	062 Subtract W4, W8, W1
	063 Call Array.Copy, X0, X1, X2, X3, X4
	064 Move X0, [X19+16]
	065 Compare X0, 0
	066 JumpIfEqual {80}
	067 Move W8, [X0+24]
	068 Move W9, [X19+24]
	069 Move W4, [X19+28]
	070 Move W1, W31
	071 Move X2, X20
	072 Subtract W3, W8, W9
	073 Move X5, X31
	074 Call Array.Copy, X0, X1, X2, X3, X4
	075 Move X0, X20
	076 Move X20, [X31+16]
	077 Move X19, [X31+24]
	078 Move X30, [X31+32]
	079 Return X0
	080 Call 0x1C17F20

Method: System.Void SetCapacity(System.Int32 capacity)

Disassembly:
	0x024F0374 STR X8, [X0]
	0x024F0378 ADRP X1, 0x19C4000
	0x024F037C ADD X1, X1, 0xE58
	0x024F0380 MOV X2, X31
	0x024F0384 BL 0x3EB1B00
	0x024F0388 MOV X20, X0
	0x024F038C BL 0x3EB1AE0
	0x024F0390 MOV X0, X20
	0x024F0394 BL 0x1D2C690
	0x024F0398 BL 0x1990590
	0x024F039C STR X30, [X31 - 0x20]!
	0x024F03A0 STP X20, X19, [X31 + 0x10]
	0x024F03A4 LDR X8, [X0 + 0x10]
	0x024F03A8 CBZ X8, 0x24F0438
	0x024F03AC LDR W9, [X0 + 0x20]
	0x024F03B0 LDR W10, [X8 + 0x18]
	0x024F03B4 MOV X19, X0
	0x024F03B8 MOV W20, W1
	0x024F03BC CMP W9, W10
	0x024F03C0 B.NE 0x24F03F0
	0x024F03C4 LDR X8, [X2 + 0x20]
	0x024F03C8 UBFM W10, W9, 0x1F, 0x1E
	0x024F03CC MOV X0, X19
	0x024F03D0 LDR X8, [X8 + 0xC0]
	0x024F03D4 LDR X2, [X8 + 0x28]
	0x024F03D8 ADD W8, W9, 0x4
	0x024F03DC CMP W8, W9, LSL
	0x024F03E0 CSEL W1, W8, W10, GT
	0x024F03E4 BL 0x24F06D8
	0x024F03E8 LDR X8, [X19 + 0x10]
	0x024F03EC CBZ X8, 0x24F0438
	0x024F03F0 LDRSW X10, [X19 + 0x1C]
	0x024F03F4 LDR W9, [X8 + 0x18]
	0x024F03F8 CMP W10, W9
	0x024F03FC B.CS 0x24F043C
	0x024F0400 ADD X8, X8, X10, 0x2, LSL
	0x024F0404 STR W20, [X8 + 0x20]
	0x024F0408 LDR W8, [X19 + 0x1C]
	0x024F040C LDR V0, [X19 + 0x20]
	0x024F0410 MOVI V1.2S, 0x1
	0x024F0414 ADD W10, W8, 0x1
	0x024F0418 CMP W10, W9
	0x024F041C ADD S0.2S, S0.2S, S1.2S
	0x024F0420 CSINC W8, W31, W8, EQ
	0x024F0424 STR W8, [X19 + 0x1C]
	0x024F0428 STR D0, [X19 + 0x20]
	0x024F042C LDP X20, X19, [X31 + 0x10]
	0x024F0430 LDR X30, [X31], #0x20
	0x024F0434 RET
	0x024F0438 BL 0x1C16F20
	0x024F043C BL 0x1C16F28
	0x024F0440 STP X31, X31, [X8]
	0x024F0444 STR X31, [X8 + 0x10]
	0x024F0448 LDR X9, [X1 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+32]
	006 Move W19, W1
	007 Move X20, X0
	008 Move X8, [X8+192]
	009 Move X8, [X8+24]
	010 Move W9, [X8+309]
	011 Move TEMP, X9
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {18}
	015 Move X0, X8
	016 Call 0x1C5D684
	017 Move X8, X0
	018 Move X0, X8
	019 Move W1, W19
	020 Call 0x1C17D6C
	021 Move W4, [X20+32]
	022 Move X21, X0
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move W1, [X20+24]
	025 Move W8, [X20+28]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X0, [X20+16]
	028 Move X2, X21
	029 Move W3, W31
	030 Move X0, [X20+16]
	031 Compare X0, 0
	032 JumpIfEqual {64}
	033 Move W8, [X0+24]
	034 Move X2, X21
	035 Move W3, W31
	036 Move X5, X31
	037 Subtract W4, W8, W1
	038 Call Array.Copy, X0, X1, X2, X3, X4
	039 Move X0, [X20+16]
	040 Compare X0, 0
	041 JumpIfEqual {64}
	042 Move W8, [X0+24]
	043 Move W9, [X20+24]
	044 Move W4, [X20+28]
	045 Move W1, W31
	046 Move X2, X21
	047 Subtract W3, W8, W9
	048 Move X5, X31
	049 Call Array.Copy, X0, X1, X2, X3, X4
	050 Move W8, [X20+32]
	051 Move W9, [X20+36]
	052 Move [X20+16], X21
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Add W9, W9, 1
	055 NotImplemented "Instruction CSEL not yet implemented."
	056 Move [X20+24], W31
	057 Move [X20+28], W8
	058 Move [X20+36], W9
	059 Move X20, [X31+16]
	060 Move X19, [X31+24]
	061 Move X30, [X31+32]
	062 Move X21, [X31+40]
	063 Return 
	064 Call 0x1C17F20

Method: System.Void MoveNext(ref System.Int32 index)

Disassembly:
	0x024F044C MOV X1, X0
	0x024F0450 MOV X0, X8
	0x024F0454 LDR X9, [X9 + 0xC0]
	0x024F0458 LDR X2, [X9 + 0x48]
	0x024F045C B 0x2BBE040
	0x024F0460 SUB X31, X31, 0x40
	0x024F0464 STP X30, X19, [X31 + 0x30]
	0x024F0468 STP X31, X31, [X31 + 0x18]
	0x024F046C STR X31, [X31 + 0x28]
	0x024F0470 LDR X8, [X1 + 0x20]
	0x024F0474 MOV X19, X1
	0x024F0478 MOV X1, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {13}
	005 Move W9, [X1]
	006 Move W8, [X8+24]
	007 Add W9, W9, 1
	008 NotImplemented "Instruction CMP not yet implemented."
	009 NotImplemented "Instruction CSEL not yet implemented."
	010 Move [X1], W8
	011 Move X30, [X31+16]
	012 Return 
	013 Call 0x1C17F20

Method: System.Void ThrowForEmptyQueue()

Disassembly:
	0x024F047C ADD X0, X31, 0x18
	0x024F0480 LDR X8, [X8 + 0xC0]
	0x024F0484 LDR X2, [X8 + 0x48]
	0x024F0488 BL 0x2BBE040
	0x024F048C LDUR V0, [X31 + 0x18]
	0x024F0490 LDR X8, [X31 + 0x28]
	0x024F0494 ADD X1, X31, 0x0
	0x024F0498 STR V0, [X31]
	0x024F049C STR X8, [X31 + 0x10]
	0x024F04A0 LDR X8, [X19 + 0x20]
	0x024F04A4 LDR X8, [X8 + 0xC0]
	0x024F04A8 LDR X0, [X8 + 0x40]
	0x024F04AC BL 0x1C16E04
	0x024F04B0 LDP X30, X19, [X31 + 0x30]
	0x024F04B4 ADD X31, X31, 0x40
	0x024F04B8 RET
	0x024F04BC SUB X31, X31, 0x40
	0x024F04C0 STP X30, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0x1C04000
	005 Move X0, [X0+1456]
	006 Move X19, X1
	007 Call 0x1C17D08
	008 Call 0x1C17F10
	009 Move X20, X0
	010 Move X0, 0x1C2E000
	011 Move X0, [X0+96]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X20
	015 Move X2, X31
	016 Call InvalidOperationException..ctor, X0, X1
	017 Move X0, X20
	018 Move X1, X19
	019 Call 0x1C17DEC

Method: System.Void TrimExcess()

Disassembly:
	0x024F04C4 STP X31, X31, [X31 + 0x18]
	0x024F04C8 STR X31, [X31 + 0x28]
	0x024F04CC LDR X8, [X1 + 0x20]
	0x024F04D0 MOV X19, X1
	0x024F04D4 MOV X1, X0
	0x024F04D8 ADD X0, X31, 0x18
	0x024F04DC LDR X8, [X8 + 0xC0]
	0x024F04E0 LDR X2, [X8 + 0x48]
	0x024F04E4 BL 0x2BBE040
	0x024F04E8 LDUR V0, [X31 + 0x18]
	0x024F04EC LDR X8, [X31 + 0x28]
	0x024F04F0 ADD X1, X31, 0x0
	0x024F04F4 STR V0, [X31]
	0x024F04F8 STR X8, [X31 + 0x10]
	0x024F04FC LDR X8, [X19 + 0x20]
	0x024F0500 LDR X8, [X8 + 0xC0]
	0x024F0504 LDR X0, [X8 + 0x40]
	0x024F0508 BL 0x1C16E04
	0x024F050C LDP X30, X19, [X31 + 0x30]
	0x024F0510 ADD X31, X31, 0x40
	0x024F0514 RET
	0x024F0518 STR X30, [X31 - 0x10]!
	0x024F051C LDR W8, [X0 + 0x20]
	0x024F0520 CBZ W8, 0x24F0570
	0x024F0524 LDR X11, [X0 + 0x10]
	0x024F0528 CBZ X11, 0x24F0580

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {27}
	005 Move W9, [X8+24]
	006 Move X8, -27271168
	007 Move V0, [X8+1216]
	008 Move X10, 0x7FF00000
	009 Move W8, [X0+32]
	010 NotImplemented "Instruction SCVTF not yet implemented."
	011 Move D1, X10
	012 Multiply D0, D2, D0
	013 NotImplemented "Instruction FCVTZS not yet implemented."
	014 NotImplemented "Instruction FCMP not yet implemented."
	015 Move W10, 0x80000000
	016 NotImplemented "Instruction CSEL not yet implemented."
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X9, [X1+32]
	019 Move W1, W8
	020 Move X9, [X9+192]
	021 Move X2, [X9+40]
	022 Move X30, [X31+16]
	023 Call 0x24F0374, X0, X1
	024 Return 
	025 Move X30, [X31+16]
	026 Return 
	027 Call 0x1C17F20

