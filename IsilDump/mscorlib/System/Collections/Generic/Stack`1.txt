Type: System.Collections.Generic.Stack`1

Method: System.Void .ctor()

Disassembly:
	0x02600E8C LDRB W8, [X0 + 0x135]
	0x02600E90 TBNZ X8, 0x0, 0x2600E98
	0x02600E94 BL 0x1C5C684
	0x02600E98 LDR X8, [X0 + 0xB8]
	0x02600E9C LDR X8, [X8]
	0x02600EA0 STR X8, [X19 + 0x10]
	0x02600EA4 LDP X20, X19, [X31 + 0x10]
	0x02600EA8 LDR X30, [X31], #0x20
	0x02600EAC RET
	0x02600EB0 STR X30, [X31 - 0x30]!
	0x02600EB4 STP X22, X21, [X31 + 0x10]
	0x02600EB8 STP X20, X19, [X31 + 0x20]
	0x02600EBC MOV W21, W1
	0x02600EC0 MOV X1, X31
	0x02600EC4 MOV X19, X2
	0x02600EC8 MOV X20, X0
	0x02600ECC BL 0x33BDD8C
	0x02600ED0 TBNZ X21, 0x1F, 0x2600F08
	0x02600ED4 LDR X8, [X19 + 0x20]
	0x02600ED8 LDR X8, [X8 + 0xC0]
	0x02600EDC LDR X0, [X8 + 0x18]
	0x02600EE0 LDRB W8, [X0 + 0x135]
	0x02600EE4 TBNZ X8, 0x0, 0x2600EEC
	0x02600EE8 BL 0x1C5C684
	0x02600EEC MOV W1, W21
	0x02600EF0 BL 0x1C16D6C
	0x02600EF4 STR X0, [X20 + 0x10]
	0x02600EF8 LDP X20, X19, [X31 + 0x20]
	0x02600EFC LDP X22, X21, [X31 + 0x10]
	0x02600F00 LDR X30, [X31], #0x30
	0x02600F04 RET
	0x02600F08 STR W21, [X31 + 0xC]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move X1, X31
	006 Move X19, X0
	007 Call Object..ctor, X0
	008 Move X8, [X20+32]
	009 Move X8, [X8+192]
	010 Move X20, [X8]
	011 Move X8, [X20+56]
	012 Compare X8, 0
	013 JumpIfNotEqual {17}
	014 Move X0, X20
	015 Call 0x1C5D6E0
	016 Move X8, [X20+56]
	017 Move X0, [X8+16]
	018 Move W8, [X0+309]
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {24}
	023 Call 0x1C5D684
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X8, [X20+56]
	029 Move X0, [X8+16]
	030 Move W8, [X0+309]
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {36}
	035 Call 0x1C5D684
	036 Move X8, [X0+184]
	037 Move X8, [X8]
	038 Move [X19+16], X8
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Return 

Method: System.Void .ctor(System.Int32 capacity)

Disassembly:
	0x02600F0C ADRP X0, 0x1AF3000
	0x02600F10 LDR X0, [X0 + 0x758]
	0x02600F14 BL 0x1C16D08
	0x02600F18 ADD X1, X31, 0xC
	0x02600F1C BL 0x1C16E04
	0x02600F20 MOV X20, X0
	0x02600F24 ADRP X0, 0x1AFB000
	0x02600F28 LDR X0, [X0 + 0x760]
	0x02600F2C BL 0x1C16D08
	0x02600F30 BL 0x1C16F10
	0x02600F34 MOV X21, X0
	0x02600F38 ADRP X0, 0x1B1D000
	0x02600F3C LDR X0, [X0 + 0x58]
	0x02600F40 BL 0x1C16D08
	0x02600F44 MOV X22, X0
	0x02600F48 ADRP X0, 0x1B1B000
	0x02600F4C LDR X0, [X0 + 0x670]
	0x02600F50 BL 0x1C16D08
	0x02600F54 MOV X3, X0
	0x02600F58 MOV X0, X21
	0x02600F5C MOV X1, X22
	0x02600F60 MOV X2, X20
	0x02600F64 MOV X4, X31
	0x02600F68 BL 0x3312C8C
	0x02600F6C MOV X0, X21
	0x02600F70 MOV X1, X19
	0x02600F74 BL 0x1C16DEC
	0x02600F78 LDR W0, [X0 + 0x18]
	0x02600F7C RET
	0x02600F80 MOV W0, W31
	0x02600F84 RET
	0x02600F88 STR X30, [X31 - 0x20]!
	0x02600F8C STP X20, X19, [X31 + 0x10]
	0x02600F90 ADRP X20, 0x1DD9000
	0x02600F94 LDRB W8, [X20 + 0xFE4]
	0x02600F98 MOV X19, X0
	0x02600F9C TBNZ X8, 0x0, 0x2600FB4
	0x02600FA0 ADRP X0, 0x1AF9000
	0x02600FA4 LDR X0, [X0 + 0xCC0]
	0x02600FA8 BL 0x1C16CF4
	0x02600FAC MOVZ W8, 0x1
	0x02600FB0 STRB W8, [X20 + 0xFE4]
	0x02600FB4 LDR X0, [X19 + 0x20]!
	0x02600FB8 CBNZ X0, 0x2600FEC
	0x02600FBC ADRP X8, 0x1AF9000
	0x02600FC0 LDR X8, [X8 + 0xCC0]
	0x02600FC4 LDR X0, [X8]
	0x02600FC8 BL 0x1C16F10
	0x02600FCC MOV X1, X31
	0x02600FD0 MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W21, W1
	007 Move X1, X31
	008 Move X19, X2
	009 Move X20, X0
	010 Call Object..ctor, X0
	011 Move TEMP, X21
	012 And TEMP, TEMP, -2147483648
	013 Compare TEMP, -2147483648
	014 JumpIfEqual {33}
	015 Move X8, [X19+32]
	016 Move X8, [X8+192]
	017 Move X0, [X8+24]
	018 Move W8, [X0+309]
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {24}
	023 Call 0x1C5D684
	024 Move W1, W21
	025 Call 0x1C17D6C
	026 Move [X20+16], X0
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X22, [X31+16]
	030 Move X21, [X31+24]
	031 Move X30, [X31+48]
	032 Return 
	033 Move [X31+12], W21
	034 Move X0, 0x1AF4000
	035 Move X0, [X0+1880]
	036 Call 0x1C17D08
	037 Add X1, X31, 12
	038 Call 0x1C17E04
	039 Move X20, X0
	040 Move X0, 0x1AFC000
	041 Move X0, [X0+1888]
	042 Call 0x1C17D08
	043 Call 0x1C17F10
	044 Move X21, X0
	045 Move X0, 0x1B1E000
	046 Move X0, [X0+88]
	047 Call 0x1C17D08
	048 Move X22, X0
	049 Move X0, 0x1B1C000
	050 Move X0, [X0+1648]
	051 Call 0x1C17D08
	052 Move X3, X0
	053 Move X0, X21
	054 Move X1, X22
	055 Move X2, X20
	056 Move X4, X31
	057 Call ArgumentOutOfRangeException..ctor, X0, X1, X2, X3
	058 Move X0, X21
	059 Move X1, X19
	060 Call 0x1C17DEC

Method: System.Int32 get_Count()

Disassembly:
	0x02600FD4 BL 0x33BDD8C
	0x02600FD8 MOV X0, X19

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Boolean System.Collections.ICollection.get_IsSynchronized()

Disassembly:
	0x02600FDC MOV X1, X20
	0x02600FE0 MOV X2, X31

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Object System.Collections.ICollection.get_SyncRoot()

Disassembly:
	0x02600FE4 BL 0x1C24138
	0x02600FE8 LDR X0, [X19]
	0x02600FEC LDP X20, X19, [X31 + 0x10]
	0x02600FF0 LDR X30, [X31], #0x20
	0x02600FF4 RET
	0x02600FF8 LDR W8, [X0 + 0x1C]
	0x02600FFC ADD W8, W8, 0x1
	0x02601000 STP W31, W8, [X0 + 0x18]
	0x02601004 RET
	0x02601008 STR X30, [X31 - 0x10]!
	0x0260100C LDR W8, [X0 + 0x18]
	0x02601010 CBZ W8, 0x2601038
	0x02601014 LDR X9, [X2 + 0x20]
	0x02601018 LDR X0, [X0 + 0x10]
	0x0260101C SUB W2, W8, 0x1
	0x02601020 LDR X9, [X9 + 0xC0]
	0x02601024 LDR X3, [X9 + 0x30]
	0x02601028 BL 0x20F7BA4
	0x0260102C ADDS W31, W0, 0x1
	0x02601030 CSET W0, NE
	0x02601034 B 0x260103C
	0x02601038 MOV W0, W31
	0x0260103C LDR X30, [X31], #0x10
	0x02601040 RET
	0x02601044 STR X30, [X31 - 0x30]!
	0x02601048 STP X22, X21, [X31 + 0x10]
	0x0260104C STP X20, X19, [X31 + 0x20]
	0x02601050 MOV X19, X3

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1DDA000
	005 Move W8, [X20+4066]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x1AFA000
	012 Move X0, [X0+3264]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+4066], W8
	016 Add X19, X19, 32
	017 Move X0, [X19]
	018 Compare X0, 0
	019 JumpIfNotEqual {32}
	020 Move X8, 0x1AF9000
	021 Move X8, [X8+3264]
	022 Move X0, [X8]
	023 Call 0x1C17F10
	024 Move X1, X31
	025 Move X20, X0
	026 Call Object..ctor, X0
	027 Move X0, X19
	028 Move X1, X20
	029 Move X2, X31
	030 Call 0x1C25138
	031 Move X0, [X19]
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return X0

Method: System.Void Clear()

Disassembly:
	0x02601054 CBZ X1, 0x2601168
	0x02601058 MOV X21, X1
	0x0260105C MOV X22, X0
	0x02601060 MOV X0, X1
	0x02601064 MOV X1, X31
	0x02601068 MOV W20, W2
	0x0260106C BL 0x339FCE4
	0x02601070 CMP W0, 0x1
	0x02601074 B.NE 0x260119C
	0x02601078 MOV X0, X21
	0x0260107C MOV W1, W31
	0x02601080 MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+16]
	005 Move W2, [X19+24]
	006 Move W1, W31
	007 Move X3, X31
	008 Call Array.Clear, X0, X1, X2
	009 Move W8, [X19+28]
	010 Add W8, W8, 1
	011 Move [X19+24], W31
	012 Move [X19+28], W8
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Return 

Method: System.Boolean Contains(T item)

Disassembly:
	0x02601084 BL 0x339FA30
	0x02601088 CBNZ W0, 0x26011BC
	0x0260108C TBNZ X20, 0x1F, 0x26010FC
	0x02601090 MOV X0, X21
	0x02601094 MOV X1, X31
	0x02601098 BL 0x3395B7C
	0x0260109C CMP W0, W20
	0x026010A0 B.LT 0x26010FC
	0x026010A4 MOV X0, X21
	0x026010A8 MOV X1, X31
	0x026010AC BL 0x3395B7C
	0x026010B0 LDR W4, [X22 + 0x18]
	0x026010B4 SUB W8, W0, W20
	0x026010B8 CMP W8, W4
	0x026010BC B.LT 0x2601204
	0x026010C0 LDR X0, [X22 + 0x10]
	0x026010C4 MOV W1, W31
	0x026010C8 MOV X2, X21
	0x026010CC MOV W3, W20
	0x026010D0 MOV X5, X31
	0x026010D4 BL 0x339FCE8
	0x026010D8 LDR W2, [X22 + 0x18]
	0x026010DC MOV X0, X21
	0x026010E0 MOV W1, W20
	0x026010E4 MOV X3, X31
	0x026010E8 BL 0x33A1B8C
	0x026010EC LDP X20, X19, [X31 + 0x20]
	0x026010F0 LDP X22, X21, [X31 + 0x10]
	0x026010F4 LDR X30, [X31], #0x30
	0x026010F8 RET
	0x026010FC STR W20, [X31 + 0xC]
	0x02601100 ADRP X0, 0x1AF2000
	0x02601104 LDR X0, [X0 + 0x758]

ISIL:
	001 Subtract X31, X31, 288
	002 Move [X31+240], X29
	003 Move [X31+256], X30
	004 Move [X31+264], X21
	005 Move [X31+272], X20
	006 Move [X31+280], X19
	007 Move W21, [X0+24]
	008 Compare W21, 0
	009 JumpIfEqual {30}
	010 Move X20, [X0+16]
	011 Move X19, X2
	012 Add X0, X31, 0
	013 Move W2, 120
	014 Call 0x3EB2AC0
	015 Move X8, [X19+32]
	016 Add X0, X31, 120
	017 Add X1, X31, 0
	018 Move W2, 120
	019 Move X8, [X8+192]
	020 Subtract W21, W21, 1
	021 Move X19, [X8+48]
	022 Call 0x3EB2AC0
	023 Add X1, X31, 120
	024 Move X0, X20
	025 Move W2, W21
	026 Move X3, X19
	027 Call 0x20F89F0, X0, X1, X2
	028 Add W31, W0, 1
	029 NotImplemented "Instruction CSET not yet implemented."
	030 Move W0, W31
	031 Move X20, [X31+272]
	032 Move X19, [X31+280]
	033 Move X30, [X31+256]
	034 Move X21, [X31+264]
	035 Move X29, [X31+240]
	036 Add X31, X31, 288
	037 Return X0

Method: System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 arrayIndex)

Disassembly:
	0x02601108 BL 0x1C16D08
	0x0260110C ADD X1, X31, 0xC
	0x02601110 BL 0x1C16E04
	0x02601114 MOV X20, X0
	0x02601118 ADRP X0, 0x1AFA000
	0x0260111C LDR X0, [X0 + 0x760]
	0x02601120 BL 0x1C16D08
	0x02601124 BL 0x1C16F10
	0x02601128 MOV X21, X0
	0x0260112C ADRP X0, 0x1B1C000
	0x02601130 LDR X0, [X0 + 0x2B0]
	0x02601134 BL 0x1C16D08
	0x02601138 MOV X22, X0
	0x0260113C ADRP X0, 0x1B1A000
	0x02601140 LDR X0, [X0 + 0x660]
	0x02601144 BL 0x1C16D08
	0x02601148 MOV X3, X0
	0x0260114C MOV X0, X21
	0x02601150 MOV X1, X22
	0x02601154 MOV X2, X20
	0x02601158 MOV X4, X31
	0x0260115C BL 0x3312C8C
	0x02601160 MOV X0, X21
	0x02601164 B 0x2601238
	0x02601168 ADRP X0, 0x1AF7000
	0x0260116C LDR X0, [X0 + 0x528]
	0x02601170 BL 0x1C16D08
	0x02601174 BL 0x1C16F10
	0x02601178 MOV X20, X0
	0x0260117C ADRP X0, 0x1B1A000
	0x02601180 LDR X0, [X0 + 0x640]
	0x02601184 BL 0x1C16D08
	0x02601188 MOV X1, X0
	0x0260118C MOV X0, X20
	0x02601190 MOV X2, X31
	0x02601194 BL 0x330E100
	0x02601198 B 0x2601234
	0x0260119C ADRP X0, 0x1AFA000
	0x026011A0 LDR X0, [X0 + 0x578]
	0x026011A4 BL 0x1C16D08
	0x026011A8 BL 0x1C16F10
	0x026011AC MOV X20, X0
	0x026011B0 ADRP X0, 0x1B1B000
	0x026011B4 LDR X0, [X0 + 0x308]
	0x026011B8 B 0x26011D8
	0x026011BC ADRP X0, 0x1AFA000
	0x026011C0 LDR X0, [X0 + 0x578]
	0x026011C4 BL 0x1C16D08
	0x026011C8 BL 0x1C16F10
	0x026011CC MOV X20, X0
	0x026011D0 ADRP X0, 0x1B1B000
	0x026011D4 LDR X0, [X0 + 0x310]
	0x026011D8 BL 0x1C16D08
	0x026011DC MOV X21, X0
	0x026011E0 ADRP X0, 0x1B1A000
	0x026011E4 LDR X0, [X0 + 0x640]
	0x026011E8 BL 0x1C16D08
	0x026011EC MOV X2, X0
	0x026011F0 MOV X0, X20
	0x026011F4 MOV X1, X21
	0x026011F8 MOV X3, X31
	0x026011FC BL 0x330E16C
	0x02601200 B 0x2601234
	0x02601204 ADRP X0, 0x1AFA000
	0x02601208 LDR X0, [X0 + 0x578]
	0x0260120C BL 0x1C16D08
	0x02601210 BL 0x1C16F10
	0x02601214 MOV X20, X0
	0x02601218 ADRP X0, 0x1B1A000
	0x0260121C LDR X0, [X0 + 0x760]
	0x02601220 BL 0x1C16D08
	0x02601224 MOV X1, X0
	0x02601228 MOV X0, X20
	0x0260122C MOV X2, X31
	0x02601230 BL 0x3314A68
	0x02601234 MOV X0, X20
	0x02601238 MOV X1, X19
	0x0260123C BL 0x1C16DEC
	0x02601240 B 0x2601244
	0x02601244 MOV X20, X0
	0x02601248 CMP W1, 0x1
	0x0260124C B.NE 0x26012C4
	0x02601250 MOV X0, X20
	0x02601254 BL 0x3EB1AD0
	0x02601258 MOV X20, X0
	0x0260125C ADRP X0, 0x1B1B000
	0x02601260 LDR X0, [X0 + 0x320]
	0x02601264 BL 0x1C16D08
	0x02601268 LDR X8, [X20]
	0x0260126C LDR X1, [X8]
	0x02601270 BL 0x1C17270
	0x02601274 TBZ X0, 0x0, 0x260129C
	0x02601278 BL 0x3EB1AE0
	0x0260127C ADRP X0, 0x1AFA000
	0x02601280 LDR X0, [X0 + 0x578]
	0x02601284 BL 0x1C16D08
	0x02601288 BL 0x1C16F10
	0x0260128C MOV X20, X0
	0x02601290 ADRP X0, 0x1B1B000
	0x02601294 LDR X0, [X0 + 0x328]
	0x02601298 B 0x26011D8
	0x0260129C MOVZ W0, 0x8
	0x026012A0 BL 0x3EB1AF0
	0x026012A4 LDR X8, [X20]
	0x026012A8 STR X8, [X0]
	0x026012AC ADRP X1, 0x18B3000
	0x026012B0 ADD X1, X1, 0xE58
	0x026012B4 MOV X2, X31
	0x026012B8 BL 0x3EB1B00
	0x026012BC MOV X20, X0
	0x026012C0 BL 0x3EB1AE0
	0x026012C4 MOV X0, X20
	0x026012C8 BL 0x1D2C690
	0x026012CC BL 0x1990590
	0x026012D0 SUB X31, X31, 0x40
	0x026012D4 STP X30, X19, [X31 + 0x30]
	0x026012D8 STP X31, X31, [X31 + 0x18]
	0x026012DC STR X31, [X31 + 0x28]
	0x026012E0 LDR X8, [X1 + 0x20]
	0x026012E4 MOV X19, X1
	0x026012E8 MOV X1, X0
	0x026012EC ADD X0, X31, 0x18
	0x026012F0 LDR X8, [X8 + 0xC0]
	0x026012F4 LDR X2, [X8 + 0x40]
	0x026012F8 BL 0x2BBEBAC
	0x026012FC LDUR V0, [X31 + 0x18]
	0x02601300 LDR X8, [X31 + 0x28]
	0x02601304 ADD X1, X31, 0x0
	0x02601308 STR V0, [X31]
	0x0260130C STR X8, [X31 + 0x10]
	0x02601310 LDR X8, [X19 + 0x20]
	0x02601314 LDR X8, [X8 + 0xC0]
	0x02601318 LDR X0, [X8 + 0x38]
	0x0260131C BL 0x1C16E04
	0x02601320 LDP X30, X19, [X31 + 0x30]
	0x02601324 ADD X31, X31, 0x40
	0x02601328 RET
	0x0260132C SUB X31, X31, 0x40
	0x02601330 STP X30, X19, [X31 + 0x30]
	0x02601334 STP X31, X31, [X31 + 0x18]
	0x02601338 STR X31, [X31 + 0x28]
	0x0260133C LDR X8, [X1 + 0x20]
	0x02601340 MOV X19, X1
	0x02601344 MOV X1, X0
	0x02601348 ADD X0, X31, 0x18
	0x0260134C LDR X8, [X8 + 0xC0]
	0x02601350 LDR X2, [X8 + 0x40]
	0x02601354 BL 0x2BBEBAC
	0x02601358 LDUR V0, [X31 + 0x18]
	0x0260135C LDR X8, [X31 + 0x28]
	0x02601360 ADD X1, X31, 0x0
	0x02601364 STR V0, [X31]
	0x02601368 STR X8, [X31 + 0x10]
	0x0260136C LDR X8, [X19 + 0x20]
	0x02601370 LDR X8, [X8 + 0xC0]
	0x02601374 LDR X0, [X8 + 0x38]
	0x02601378 BL 0x1C16E04
	0x0260137C LDP X30, X19, [X31 + 0x30]
	0x02601380 ADD X31, X31, 0x40
	0x02601384 RET
	0x02601388 STR X30, [X31 - 0x10]!
	0x0260138C LDR X8, [X0 + 0x10]
	0x02601390 CBZ X8, 0x26013B8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, X3
	007 Compare X1, 0
	008 JumpIfEqual {79}
	009 Move X21, X1
	010 Move X22, X0
	011 Move X0, X1
	012 Move X1, X31
	013 Move W20, W2
	014 Call Array.get_Rank, X0
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move X0, X21
	017 Move W1, W31
	018 Move X2, X31
	019 Call Array.GetLowerBound, X0, X1
	020 Compare W0, 0
	021 JumpIfNotEqual {98}
	022 Move TEMP, X20
	023 And TEMP, TEMP, -2147483648
	024 Compare TEMP, -2147483648
	025 JumpIfEqual {53}
	026 Move X0, X21
	027 Move X1, X31
	028 Call Array.get_Length, X0
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X0, X21
	031 Move X1, X31
	032 Call Array.get_Length, X0
	033 Move W4, [X22+24]
	034 Subtract W8, W0, W20
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X0, [X22+16]
	037 Move W1, W31
	038 Move X2, X21
	039 Move W3, W20
	040 Move X5, X31
	041 Call Array.Copy, X0, X1, X2, X3, X4
	042 Move W2, [X22+24]
	043 Move X0, X21
	044 Move W1, W20
	045 Move X3, X31
	046 Call Array.Reverse, X0, X1, X2
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X30, [X31+48]
	052 Return 
	053 Move [X31+12], W20
	054 Move X0, 0x1AF3000
	055 Move X0, [X0+1880]
	056 Call 0x1C17D08
	057 Add X1, X31, 12
	058 Call 0x1C17E04
	059 Move X20, X0
	060 Move X0, 0x1AFB000
	061 Move X0, [X0+1888]
	062 Call 0x1C17D08
	063 Call 0x1C17F10
	064 Move X21, X0
	065 Move X0, 0x1B1D000
	066 Move X0, [X0+688]
	067 Call 0x1C17D08
	068 Move X22, X0
	069 Move X0, 0x1B1B000
	070 Move X0, [X0+1632]
	071 Call 0x1C17D08
	072 Move X3, X0
	073 Move X0, X21
	074 Move X1, X22
	075 Move X2, X20
	076 Move X4, X31
	077 Call ArgumentOutOfRangeException..ctor, X0, X1, X2, X3
	078 Move X0, X21
	079 Move X0, 0x1AF8000
	080 Move X0, [X0+1320]
	081 Call 0x1C17D08
	082 Call 0x1C17F10
	083 Move X20, X0
	084 Move X0, 0x1B1B000
	085 Move X0, [X0+1600]
	086 Call 0x1C17D08
	087 Move X1, X0
	088 Move X0, X20
	089 Move X2, X31
	090 Call ArgumentNullException..ctor, X0, X1
	091 Move X0, 0x1AFB000
	092 Move X0, [X0+1400]
	093 Call 0x1C17D08
	094 Call 0x1C17F10
	095 Move X20, X0
	096 Move X0, 0x1B1C000
	097 Move X0, [X0+776]
	098 Move X0, 0x1AFB000
	099 Move X0, [X0+1400]
	100 Call 0x1C17D08
	101 Call 0x1C17F10
	102 Move X20, X0
	103 Move X0, 0x1B1C000
	104 Move X0, [X0+784]
	105 Call 0x1C17D08
	106 Move X21, X0
	107 Move X0, 0x1B1B000
	108 Move X0, [X0+1600]
	109 Call 0x1C17D08
	110 Move X2, X0
	111 Move X0, X20
	112 Move X1, X21
	113 Move X3, X31
	114 Call ArgumentException..ctor, X0, X1, X2
	115 Move X0, 0x1AFB000
	116 Move X0, [X0+1400]
	117 Call 0x1C17D08
	118 Call 0x1C17F10
	119 Move X20, X0
	120 Move X0, 0x1B1B000
	121 Move X0, [X0+1888]
	122 Call 0x1C17D08
	123 Move X1, X0
	124 Move X0, X20
	125 Move X2, X31
	126 Call ArgumentException..ctor, X0, X1
	127 Move X0, X20
	128 Move X1, X19
	129 Call 0x1C17DEC
	130 Move X20, X0
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move X0, X20
	133 Call 0x3EB2AD0
	134 Move X20, X0
	135 Move X0, 0x1B1C000
	136 Move X0, [X0+800]
	137 Call 0x1C17D08
	138 Move X8, [X20]
	139 Move X1, [X8]
	140 Call 0x1C18270
	141 Move TEMP, X0
	142 And TEMP, TEMP, 1
	143 Compare TEMP, 1
	144 JumpIfNotEqual {153}
	145 Call 0x3EB2AE0
	146 Move X0, 0x1AFB000
	147 Move X0, [X0+1400]
	148 Call 0x1C17D08
	149 Call 0x1C17F10
	150 Move X20, X0
	151 Move X0, 0x1B1C000
	152 Move X0, [X0+808]
	153 Move W0, 8
	154 Call 0x3EB2AF0
	155 Move X8, [X20]
	156 Move [X0], X8
	157 Move X1, 0x18B4000
	158 Add X1, X1, 3672
	159 Move X2, X31
	160 Call 0x3EB2B00
	161 Move X20, X0
	162 Call 0x3EB2AE0
	163 Move X0, X20
	164 Call 0x1D2D690
	165 Call 0x1991590

Method: System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()

Disassembly:
	0x02601394 LDR W9, [X0 + 0x18]
	0x02601398 LDR W10, [X8 + 0x18]
	0x0260139C SUB W9, W9, 0x1
	0x026013A0 CMP W9, W10
	0x026013A4 B.CS 0x26013BC
	0x026013A8 ADD X8, X8, W9, 0x2, SXTW
	0x026013AC LDR W0, [X8 + 0x20]
	0x026013B0 LDR X30, [X31], #0x10
	0x026013B4 RET
	0x026013B8 BL 0x1C16F20
	0x026013BC LDR X8, [X1 + 0x20]
	0x026013C0 LDR X8, [X8 + 0xC0]
	0x026013C4 LDR X1, [X8 + 0x50]
	0x026013C8 BL 0x26014F0
	0x026013CC STR X30, [X31 - 0x10]!
	0x026013D0 LDR X8, [X0 + 0x10]
	0x026013D4 CBZ X8, 0x2601408
	0x026013D8 LDR W9, [X0 + 0x18]
	0x026013DC LDR W10, [X8 + 0x18]
	0x026013E0 SUB W9, W9, 0x1
	0x026013E4 CMP W9, W10
	0x026013E8 B.CS 0x260140C
	0x026013EC LDR W10, [X0 + 0x1C]
	0x026013F0 ADD X8, X8, W9, 0x2, SXTW
	0x026013F4 ADD W10, W10, 0x1
	0x026013F8 STP W9, W10, [X0 + 0x18]
	0x026013FC LDR W0, [X8 + 0x20]
	0x02601400 LDR X30, [X31], #0x10

ISIL:
	001 Subtract X31, X31, 304
	002 Move [X31+272], X29
	003 Move [X31+280], X30
	004 Move [X31+288], X20
	005 Move [X31+296], X19
	006 Move X19, X1
	007 Move X20, X0
	008 Add X0, X31, 136
	009 Move W2, 136
	010 Move W1, W31
	011 Call 0x3EB2B10
	012 Move X8, [X19+32]
	013 Add X0, X31, 136
	014 Move X1, X20
	015 Move X8, [X8+192]
	016 Move X2, [X8+64]
	017 Call 0x2BB68C0, X0, X1
	018 Add X0, X31, 0
	019 Add X1, X31, 136
	020 Move W2, 136
	021 Call 0x3EB2AC0
	022 Move X8, [X19+32]
	023 Add X1, X31, 0
	024 Move X8, [X8+192]
	025 Move X0, [X8+56]
	026 Call 0x1C17E04
	027 Move X20, [X31+288]
	028 Move X19, [X31+296]
	029 Move X29, [X31+272]
	030 Move X30, [X31+280]
	031 Add X31, X31, 304
	032 Return X0

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x02601404 RET
	0x02601408 BL 0x1C16F20
	0x0260140C LDR X8, [X1 + 0x20]
	0x02601410 LDR X8, [X8 + 0xC0]
	0x02601414 LDR X1, [X8 + 0x50]
	0x02601418 BL 0x26014F0
	0x0260141C STR X30, [X31 - 0x10]!
	0x02601420 LDR X9, [X0 + 0x10]
	0x02601424 CBZ X9, 0x260146C
	0x02601428 LDRSW X8, [X0 + 0x18]
	0x0260142C LDR W10, [X9 + 0x18]
	0x02601430 CMP W8, W10
	0x02601434 B.CS 0x2601458
	0x02601438 ADD X9, X9, X8, 0x2, LSL
	0x0260143C STR W1, [X9 + 0x20]
	0x02601440 LDR W9, [X0 + 0x1C]
	0x02601444 ADD W8, W8, 0x1
	0x02601448 ADD W9, W9, 0x1
	0x0260144C STP W8, W9, [X0 + 0x18]
	0x02601450 LDR X30, [X31], #0x10
	0x02601454 RET
	0x02601458 LDR X8, [X2 + 0x20]
	0x0260145C LDR X8, [X8 + 0xC0]
	0x02601460 LDR X2, [X8 + 0x58]
	0x02601464 LDR X30, [X31], #0x10
	0x02601468 B 0x2601470
	0x0260146C BL 0x1C16F20
	0x02601470 STR X30, [X31 - 0x20]!

ISIL:
	001 Subtract X31, X31, 304
	002 Move [X31+272], X29
	003 Move [X31+280], X30
	004 Move [X31+288], X20
	005 Move [X31+296], X19
	006 Move X19, X1
	007 Move X20, X0
	008 Add X0, X31, 136
	009 Move W2, 136
	010 Move W1, W31
	011 Call 0x3EB2B10
	012 Move X8, [X19+32]
	013 Add X0, X31, 136
	014 Move X1, X20
	015 Move X8, [X8+192]
	016 Move X2, [X8+64]
	017 Call 0x2BB68C0, X0, X1
	018 Add X0, X31, 0
	019 Add X1, X31, 136
	020 Move W2, 136
	021 Call 0x3EB2AC0
	022 Move X8, [X19+32]
	023 Add X1, X31, 0
	024 Move X8, [X8+192]
	025 Move X0, [X8+56]
	026 Call 0x1C17E04
	027 Move X20, [X31+288]
	028 Move X19, [X31+296]
	029 Move X29, [X31+272]
	030 Move X30, [X31+280]
	031 Add X31, X31, 304
	032 Return X0

Method: T Peek()

Disassembly:
	0x02601474 STP X20, X19, [X31 + 0x10]
	0x02601478 MOV X19, X0
	0x0260147C LDR X8, [X0 + 0x10]!
	0x02601480 CBZ X8, 0x26014E8
	0x02601484 LDR X9, [X2 + 0x20]
	0x02601488 LDR X8, [X8 + 0x18]
	0x0260148C MOV W20, W1
	0x02601490 LDR X9, [X9 + 0xC0]
	0x02601494 UBFM W10, W8, 0x1F, 0x1E
	0x02601498 CMP X8, 0x0
	0x0260149C MOVZ W8, 0x4
	0x026014A0 LDR X2, [X9 + 0x60]
	0x026014A4 CSEL W1, W8, W10, EQ
	0x026014A8 BL 0x21163A0
	0x026014AC LDR X8, [X19 + 0x10]
	0x026014B0 CBZ X8, 0x26014E8
	0x026014B4 LDRSW X9, [X19 + 0x18]
	0x026014B8 LDR W10, [X8 + 0x18]
	0x026014BC CMP W9, W10
	0x026014C0 B.CS 0x26014EC

ISIL:
	001 Move [X31-16], X30
	002 Move X9, [X0+16]
	003 Compare X9, 0
	004 JumpIfEqual {17}
	005 Move W10, [X0+24]
	006 Move W11, [X9+24]
	007 Subtract W10, W10, 1
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move W11, 120
	010 NotImplemented "Instruction SMADDL not yet implemented."
	011 Add X1, X9, 32
	012 Move W2, 120
	013 Move X0, X8
	014 Move X30, [X31+16]
	015 Call 0x3EB2AC0
	016 Return X0
	017 Call 0x1C17F20
	018 Move X8, [X1+32]
	019 Move X8, [X8+192]
	020 Move X1, [X8+80]
	021 Call 0x26016E0, X0

Method: T Pop()

Disassembly:
	0x026014C4 ADD X8, X8, X9, 0x2, LSL
	0x026014C8 STR W20, [X8 + 0x20]
	0x026014CC LDR V0, [X19 + 0x18]
	0x026014D0 MOVI V1.2S, 0x1
	0x026014D4 ADD S0.2S, S0.2S, S1.2S
	0x026014D8 STR D0, [X19 + 0x18]
	0x026014DC LDP X20, X19, [X31 + 0x10]
	0x026014E0 LDR X30, [X31], #0x20
	0x026014E4 RET
	0x026014E8 BL 0x1C16F20
	0x026014EC BL 0x1C16F28
	0x026014F0 STR X30, [X31 - 0x20]!
	0x026014F4 STP X20, X19, [X31 + 0x10]
	0x026014F8 ADRP X0, 0x1AF2000
	0x026014FC LDR X0, [X0 + 0x5B0]
	0x02601500 MOV X19, X1
	0x02601504 BL 0x1C16D08
	0x02601508 BL 0x1C16F10
	0x0260150C MOV X20, X0
	0x02601510 ADRP X0, 0x1B1C000
	0x02601514 LDR X0, [X0 + 0x308]
	0x02601518 BL 0x1C16D08
	0x0260151C MOV X1, X0
	0x02601520 MOV X0, X20
	0x02601524 MOV X2, X31
	0x02601528 BL 0x337DF1C
	0x0260152C MOV X0, X20
	0x02601530 MOV X1, X19
	0x02601534 BL 0x1C16DEC
	0x02601538 STR X30, [X31 - 0x20]!
	0x0260153C STP X20, X19, [X31 + 0x10]
	0x02601540 MOV X20, X1
	0x02601544 MOV X1, X31
	0x02601548 MOV X19, X0
	0x0260154C BL 0x33BDD8C
	0x02601550 LDR X8, [X20 + 0x20]
	0x02601554 LDR X8, [X8 + 0xC0]
	0x02601558 LDR X20, [X8]
	0x0260155C LDR X8, [X20 + 0x38]
	0x02601560 CBNZ X8, 0x2601570
	0x02601564 MOV X0, X20
	0x02601568 BL 0x1C5C6E0
	0x0260156C LDR X8, [X20 + 0x38]
	0x02601570 LDR X0, [X8 + 0x10]
	0x02601574 LDRB W8, [X0 + 0x135]

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+128], X30
	003 Move [X31+144], X20
	004 Move [X31+152], X19
	005 NotImplemented "Instruction MOVI not yet implemented."
	006 Move [X8+112], X31
	007 Move [X8+80], V0
	008 Move [X8+88], V0
	009 Move [X8+48], V0
	010 Move [X8+56], V0
	011 Move [X8+16], V0
	012 Move [X8+24], V0
	013 Move [X8], V0
	014 Move X19, X8
	015 Move X8, [X0+16]
	016 Compare X8, 0
	017 JumpIfEqual {50}
	018 Move W9, [X0+24]
	019 Move W10, [X8+24]
	020 Subtract W9, W9, 1
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move W10, [X0+28]
	023 Move W11, 120
	024 NotImplemented "Instruction SMADDL not yet implemented."
	025 Add X1, X20, 32
	026 Add W8, W10, 1
	027 Move [X0+24], W9
	028 Move [X0+28], W8
	029 Add X0, X31, 8
	030 Move W2, 120
	031 Call 0x3EB2AC0
	032 NotImplemented "Instruction MOVI not yet implemented."
	033 Add X1, X31, 8
	034 Move W2, 120
	035 Move X0, X19
	036 Move [X20+32], V0
	037 Move [X20+40], V0
	038 Move [X20+64], V0
	039 Move [X20+72], V0
	040 Move [X20+96], V0
	041 Move [X20+104], V0
	042 Move [X20+8], V0
	043 Move [X20+144], X31
	044 Call 0x3EB2AC0
	045 Move X20, [X31+144]
	046 Move X19, [X31+152]
	047 Move X30, [X31+128]
	048 Add X31, X31, 160
	049 Return X0
	050 Call 0x1C17F20
	051 Move X8, [X1+32]
	052 Move X8, [X8+192]
	053 Move X1, [X8+80]
	054 Call 0x26016E0, X0

Method: System.Void Push(T item)

Disassembly:
	0x02601578 TBNZ X8, 0x0, 0x2601580
	0x0260157C BL 0x1C5C684
	0x02601580 LDR W8, [X0 + 0xE0]
	0x02601584 CBNZ W8, 0x260158C
	0x02601588 BL 0x1C16DFC
	0x0260158C LDR X8, [X20 + 0x38]
	0x02601590 LDR X0, [X8 + 0x10]
	0x02601594 LDRB W8, [X0 + 0x135]
	0x02601598 TBNZ X8, 0x0, 0x26015A0
	0x0260159C BL 0x1C5C684
	0x026015A0 LDR X8, [X0 + 0xB8]
	0x026015A4 LDR X8, [X8]
	0x026015A8 STR X8, [X19 + 0x10]
	0x026015AC LDP X20, X19, [X31 + 0x10]
	0x026015B0 LDR X30, [X31], #0x20
	0x026015B4 RET
	0x026015B8 STR X30, [X31 - 0x30]!
	0x026015BC STP X22, X21, [X31 + 0x10]
	0x026015C0 STP X20, X19, [X31 + 0x20]
	0x026015C4 MOV W21, W1
	0x026015C8 MOV X1, X31
	0x026015CC MOV X19, X2
	0x026015D0 MOV X20, X0
	0x026015D4 BL 0x33BDD8C
	0x026015D8 TBNZ X21, 0x1F, 0x2601610
	0x026015DC LDR X8, [X19 + 0x20]
	0x026015E0 LDR X8, [X8 + 0xC0]
	0x026015E4 LDR X0, [X8 + 0x18]
	0x026015E8 LDRB W8, [X0 + 0x135]
	0x026015EC TBNZ X8, 0x0, 0x26015F4
	0x026015F0 BL 0x1C5C684
	0x026015F4 MOV W1, W21
	0x026015F8 BL 0x1C16D6C
	0x026015FC STR X0, [X20 + 0x10]
	0x02601600 LDP X20, X19, [X31 + 0x20]
	0x02601604 LDP X22, X21, [X31 + 0x10]
	0x02601608 LDR X30, [X31], #0x30
	0x0260160C RET
	0x02601610 STR W21, [X31 + 0xC]
	0x02601614 ADRP X0, 0x1AF2000
	0x02601618 LDR X0, [X0 + 0x758]
	0x0260161C BL 0x1C16D08

ISIL:
	001 Subtract X31, X31, 288
	002 Move [X31+240], X29
	003 Move [X31+256], X30
	004 Move [X31+264], X21
	005 Move [X31+272], X20
	006 Move [X31+280], X19
	007 Move X8, [X0+16]
	008 Compare X8, 0
	009 JumpIfEqual {46}
	010 NotImplemented "Instruction LDRSW not yet implemented."
	011 Move W9, [X8+24]
	012 Move X19, X0
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move W9, 120
	015 NotImplemented "Instruction MADD not yet implemented."
	016 Add X0, X8, 32
	017 Move W2, 120
	018 Call 0x3EB2B30
	019 Move W8, [X19+28]
	020 Add W9, W21, 1
	021 Add W8, W8, 1
	022 Move [X19+24], W9
	023 Move [X19+28], W8
	024 Move X20, X2
	025 Add X0, X31, 0
	026 Move W2, 120
	027 Call 0x3EB2AC0
	028 Move X8, [X20+32]
	029 Add X0, X31, 120
	030 Add X1, X31, 0
	031 Move W2, 120
	032 Move X8, [X8+192]
	033 Move X20, [X8+88]
	034 Call 0x3EB2AC0
	035 Add X1, X31, 120
	036 Move X0, X19
	037 Move X2, X20
	038 Call 0x2601620, X0, X1
	039 Move X20, [X31+272]
	040 Move X19, [X31+280]
	041 Move X30, [X31+256]
	042 Move X21, [X31+264]
	043 Move X29, [X31+240]
	044 Add X31, X31, 288
	045 Return 
	046 Call 0x1C17F20

Method: System.Void PushWithResize(T item)

Disassembly:
	0x02601620 ADD X1, X31, 0xC
	0x02601624 BL 0x1C16E04
	0x02601628 MOV X20, X0
	0x0260162C ADRP X0, 0x1AFA000
	0x02601630 LDR X0, [X0 + 0x760]
	0x02601634 BL 0x1C16D08
	0x02601638 BL 0x1C16F10
	0x0260163C MOV X21, X0
	0x02601640 ADRP X0, 0x1B1C000
	0x02601644 LDR X0, [X0 + 0x58]
	0x02601648 BL 0x1C16D08
	0x0260164C MOV X22, X0
	0x02601650 ADRP X0, 0x1B1A000
	0x02601654 LDR X0, [X0 + 0x670]
	0x02601658 BL 0x1C16D08
	0x0260165C MOV X3, X0
	0x02601660 MOV X0, X21
	0x02601664 MOV X1, X22
	0x02601668 MOV X2, X20
	0x0260166C MOV X4, X31
	0x02601670 BL 0x3312C8C
	0x02601674 MOV X0, X21
	0x02601678 MOV X1, X19
	0x0260167C BL 0x1C16DEC
	0x02601680 LDR W0, [X0 + 0x18]
	0x02601684 RET
	0x02601688 MOV W0, W31
	0x0260168C RET
	0x02601690 STR X30, [X31 - 0x20]!
	0x02601694 STP X20, X19, [X31 + 0x10]
	0x02601698 ADRP X20, 0x1DD8000
	0x0260169C LDRB W8, [X20 + 0xFE5]
	0x026016A0 MOV X19, X0
	0x026016A4 TBNZ X8, 0x0, 0x26016BC
	0x026016A8 ADRP X0, 0x1AF8000
	0x026016AC LDR X0, [X0 + 0xCC0]
	0x026016B0 BL 0x1C16CF4
	0x026016B4 MOVZ W8, 0x1
	0x026016B8 STRB W8, [X20 + 0xFE5]
	0x026016BC LDR X0, [X19 + 0x20]!
	0x026016C0 CBNZ X0, 0x26016F4
	0x026016C4 ADRP X8, 0x1AF8000
	0x026016C8 LDR X8, [X8 + 0xCC0]
	0x026016CC LDR X0, [X8]
	0x026016D0 BL 0x1C16F10
	0x026016D4 MOV X1, X31
	0x026016D8 MOV X20, X0
	0x026016DC BL 0x33BDD8C

ISIL:
	001 Subtract X31, X31, 288
	002 Move [X31+240], X29
	003 Move [X31+248], X30
	004 Move [X31+256], X22
	005 Move [X31+264], X21
	006 Move [X31+272], X20
	007 Move [X31+280], X19
	008 Move X19, X0
	009 Add X0, X0, 16
	010 Move X8, [X0]
	011 Compare X8, 0
	012 JumpIfEqual {57}
	013 Move X9, [X2+32]
	014 Move X8, [X8+24]
	015 Move X20, X1
	016 Move X9, [X9+192]
	017 Move W10, W8
	018 ShiftRight W10, 31
	019 And W10, W10, 0x3FFFFFFF
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move W8, 4
	022 Move X2, [X9+96]
	023 NotImplemented "Instruction CSEL not yet implemented."
	024 Call Array.Resize, X0, X1
	025 Move X21, [X19+16]
	026 NotImplemented "Instruction LDRSW not yet implemented."
	027 Add X0, X31, 120
	028 Move W2, 120
	029 Move X1, X20
	030 Call 0x3EB2AC0
	031 Compare X21, 0
	032 JumpIfEqual {57}
	033 Add X0, X31, 0
	034 Add X1, X31, 120
	035 Move W2, 120
	036 Call 0x3EB2AC0
	037 Move W8, [X21+24]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move W8, 120
	040 NotImplemented "Instruction MADD not yet implemented."
	041 Add X0, X8, 32
	042 Add X1, X31, 0
	043 Move W2, 120
	044 Call 0x3EB2AC0
	045 Move V0, [X19+24]
	046 NotImplemented "Instruction MOVI not yet implemented."
	047 Move X22, [X31+256]
	048 Move X21, [X31+264]
	049 Move X29, [X31+240]
	050 Move X30, [X31+248]
	051 Add S0, S0, S1
	052 Move [X19+24], D0
	053 Move X20, [X31+272]
	054 Move X19, [X31+280]
	055 Add X31, X31, 288
	056 Return 
	057 Call 0x1C17F20
	058 Call 0x1C17F28

Method: System.Void ThrowForEmptyStack()

Disassembly:
	0x026016E0 MOV X0, X19
	0x026016E4 MOV X1, X20
	0x026016E8 MOV X2, X31
	0x026016EC BL 0x1C24138
	0x026016F0 LDR X0, [X19]
	0x026016F4 LDP X20, X19, [X31 + 0x10]
	0x026016F8 LDR X30, [X31], #0x20
	0x026016FC RET
	0x02601700 LDR W8, [X0 + 0x1C]
	0x02601704 ADD W8, W8, 0x1
	0x02601708 STP W31, W8, [X0 + 0x18]
	0x0260170C RET
	0x02601710 SUB X31, X31, 0x90
	0x02601714 STR X30, [X31 + 0x80]
	0x02601718 LDR W8, [X0 + 0x18]
	0x0260171C CBZ W8, 0x2601760
	0x02601720 LDP V0, V1, [X1 + 0x20]
	0x02601724 LDP V2, V3, [X1]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0x1AF3000
	005 Move X0, [X0+1456]
	006 Move X19, X1
	007 Call 0x1C17D08
	008 Call 0x1C17F10
	009 Move X20, X0
	010 Move X0, 0x1B1D000
	011 Move X0, [X0+776]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X20
	015 Move X2, X31
	016 Call InvalidOperationException..ctor, X0, X1
	017 Move X0, X20
	018 Move X1, X19
	019 Call 0x1C17DEC

