Type: System.Collections.Concurrent.ConcurrentDictionary`2/DictionaryEnumerator

Method: System.Void .ctor(System.Collections.Concurrent.ConcurrentDictionary`2<TKey, TValue> dictionary)

Disassembly:
	0x029B631C ADD X8, X8, X9, 0x4, LSL
	0x029B6320 ADD X0, X8, 0x138
	0x029B6324 LDP X8, X1, [X0]
	0x029B6328 MOV X0, X20
	0x029B632C BLR X8
	0x029B6330 LDR X8, [X19 + 0x20]
	0x029B6334 MOV X20, X0
	0x029B6338 LDRB W9, [X8 + 0x135]
	0x029B633C TBNZ X9, 0x0, 0x29B6348
	0x029B6340 MOV X0, X8
	0x029B6344 BL 0x1C5C684
	0x029B6348 LDR X21, [X21 + 0x8]
	0x029B634C CBZ X21, 0x29B6410
	0x029B6350 LDR X0, [X19 + 0x20]
	0x029B6354 LDRB W8, [X0 + 0x135]
	0x029B6358 TBNZ X8, 0x0, 0x29B6360
	0x029B635C BL 0x1C5C684
	0x029B6360 LDR X8, [X0 + 0xC0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, X1
	006 Move X1, X31
	007 Move X21, X2
	008 Move X19, X0
	009 Call Object..ctor, X0
	010 Compare X20, 0
	011 JumpIfEqual {23}
	012 Move X8, [X21+32]
	013 Move X0, X20
	014 Move X8, [X8+192]
	015 Move X1, [X8+8]
	016 Call 0x29631A8, X0
	017 Move [X19+16], X0
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 Return 
	023 Call 0x1C17F20

Method: System.Collections.DictionaryEntry get_Entry()

Disassembly:
	0x029B6364 LDR X1, [X8 + 0x20]
	0x029B6368 LDRB W8, [X1 + 0x135]
	0x029B636C TBNZ X8, 0x0, 0x29B637C
	0x029B6370 MOV X0, X1
	0x029B6374 BL 0x1C5C684
	0x029B6378 MOV X1, X0
	0x029B637C LDR X8, [X21]
	0x029B6380 LDRH W9, [X8 + 0x12E]
	0x029B6384 CBZ X9, 0x29B63A8
	0x029B6388 LDR X10, [X8 + 0xB0]
	0x029B638C ADD X10, X10, 0x8
	0x029B6390 LDUR X11, [X10 - 0x8]
	0x029B6394 CMP X11, X1
	0x029B6398 B.EQ 0x29B63B8
	0x029B639C SUBS X9, X9, 0x1
	0x029B63A0 ADD X10, X10, 0x10
	0x029B63A4 B.NE 0x29B6390
	0x029B63A8 MOV X0, X21
	0x029B63AC MOV W2, W31
	0x029B63B0 BL 0x1C5C788
	0x029B63B4 B 0x29B63C4
	0x029B63B8 LDRSW X9, [X10]
	0x029B63BC ADD X8, X8, X9, 0x4, LSL
	0x029B63C0 ADD X0, X8, 0x138
	0x029B63C4 LDP X8, X1, [X0]
	0x029B63C8 MOV X0, X21
	0x029B63CC BLR X8
	0x029B63D0 LDR X0, [X19 + 0x20]
	0x029B63D4 MOV X19, X1
	0x029B63D8 LDRB W8, [X0 + 0x135]
	0x029B63DC TBNZ X8, 0x0, 0x29B63E4
	0x029B63E0 BL 0x1C5C684
	0x029B63E4 ADD X0, X31, 0x0
	0x029B63E8 MOV X1, X20
	0x029B63EC MOV X2, X19
	0x029B63F0 MOV X3, X31
	0x029B63F4 STP X31, X31, [X31]
	0x029B63F8 BL 0x335035C
	0x029B63FC LDP X0, X1, [X31]
	0x029B6400 LDP X20, X19, [X31 + 0x20]
	0x029B6404 LDP X30, X21, [X31 + 0x10]
	0x029B6408 ADD X31, X31, 0x30
	0x029B640C RET
	0x029B6410 BL 0x1C16F20
	0x029B6414 STR X30, [X31 - 0x20]!
	0x029B6418 STP X20, X19, [X31 + 0x10]
	0x029B641C LDR X20, [X0 + 0x8]
	0x029B6420 CBZ X20, 0x29B64D0
	0x029B6424 LDR X0, [X1 + 0x20]
	0x029B6428 MOV X19, X1
	0x029B642C LDRB W8, [X0 + 0x135]
	0x029B6430 TBNZ X8, 0x0, 0x29B6438
	0x029B6434 BL 0x1C5C684
	0x029B6438 LDR X8, [X0 + 0xC0]
	0x029B643C LDR X1, [X8 + 0x20]
	0x029B6440 LDRB W8, [X1 + 0x135]
	0x029B6444 TBNZ X8, 0x0, 0x29B6454
	0x029B6448 MOV X0, X1
	0x029B644C BL 0x1C5C684
	0x029B6450 MOV X1, X0
	0x029B6454 LDR X8, [X20]
	0x029B6458 LDRH W9, [X8 + 0x12E]
	0x029B645C CBZ X9, 0x29B6480
	0x029B6460 LDR X10, [X8 + 0xB0]
	0x029B6464 ADD X10, X10, 0x8
	0x029B6468 LDUR X11, [X10 - 0x8]
	0x029B646C CMP X11, X1
	0x029B6470 B.EQ 0x29B6490
	0x029B6474 SUBS X9, X9, 0x1
	0x029B6478 ADD X10, X10, 0x10
	0x029B647C B.NE 0x29B6468
	0x029B6480 MOV X0, X20
	0x029B6484 MOV W2, W31
	0x029B6488 BL 0x1C5C788
	0x029B648C B 0x29B649C
	0x029B6490 LDRSW X9, [X10]
	0x029B6494 ADD X8, X8, X9, 0x4, LSL
	0x029B6498 ADD X0, X8, 0x138
	0x029B649C LDP X8, X1, [X0]
	0x029B64A0 MOV X0, X20
	0x029B64A4 BLR X8
	0x029B64A8 LDR X8, [X19 + 0x20]
	0x029B64AC MOV X19, X0
	0x029B64B0 LDRB W9, [X8 + 0x135]
	0x029B64B4 TBNZ X9, 0x0, 0x29B64C0
	0x029B64B8 MOV X0, X8
	0x029B64BC BL 0x1C5C684
	0x029B64C0 MOV X0, X19
	0x029B64C4 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move X21, [X0+16]
	007 Compare X21, 0
	008 JumpIfEqual {103}
	009 Move X8, [X1+32]
	010 Move X19, X1
	011 Move X20, X0
	012 Move X8, [X8+192]
	013 Move X1, [X8+16]
	014 Move W8, [X1+309]
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {22}
	019 Move X0, X1
	020 Call 0x1C5D684
	021 Move X1, X0
	022 Move X8, [X21]
	023 NotImplemented "Instruction LDRH not yet implemented."
	024 Compare X9, 0
	025 JumpIfEqual {32}
	026 Move X10, [X8+176]
	027 Add X10, X10, 8
	028 NotImplemented "Instruction LDUR not yet implemented."
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Subtract X9, X9, 1
	031 Add X10, X10, 16
	032 Move X0, X21
	033 Move W2, W31
	034 Call 0x1C5D788
	035 NotImplemented "Instruction LDRSW not yet implemented."
	036 Add X8, X8, X9
	037 Add X0, X8, 312
	038 Move X9, [X0]
	039 Move X1, [X0+8]
	040 Add X8, X31, 24
	041 Move X0, X21
	042 NotImplemented "Instruction BLR not yet implemented."
	043 Move X8, [X19+32]
	044 Move X9, [X31+24]
	045 Move X10, [X31+32]
	046 Add X1, X31, 8
	047 Move X8, [X8+192]
	048 Move [X31+8], X9
	049 Move [X31+16], X10
	050 Move X0, [X8+64]
	051 Call 0x1C17E04
	052 Move X21, [X20+16]
	053 Compare X21, 0
	054 JumpIfEqual {103}
	055 Move X8, [X19+32]
	056 Move X20, X0
	057 Move X8, [X8+192]
	058 Move X1, [X8+16]
	059 Move W8, [X1+309]
	060 Move TEMP, X8
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfEqual {67}
	064 Move X0, X1
	065 Call 0x1C5D684
	066 Move X1, X0
	067 Move X8, [X21]
	068 NotImplemented "Instruction LDRH not yet implemented."
	069 Compare X9, 0
	070 JumpIfEqual {77}
	071 Move X10, [X8+176]
	072 Add X10, X10, 8
	073 NotImplemented "Instruction LDUR not yet implemented."
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Subtract X9, X9, 1
	076 Add X10, X10, 16
	077 Move X0, X21
	078 Move W2, W31
	079 Call 0x1C5D788
	080 NotImplemented "Instruction LDRSW not yet implemented."
	081 Add X8, X8, X9
	082 Add X0, X8, 312
	083 Move X9, [X0]
	084 Move X1, [X0+8]
	085 Add X8, X31, 24
	086 Move X0, X21
	087 NotImplemented "Instruction BLR not yet implemented."
	088 Move X2, [X31+40]
	089 Add X0, X31, 48
	090 Move X1, X20
	091 Move X3, X31
	092 Move [X31+48], X31
	093 Move [X31+56], X31
	094 Call DictionaryEntry..ctor, X0, X1, X2
	095 Move X0, [X31+48]
	096 Move X1, [X31+56]
	097 Move X20, [X31+80]
	098 Move X19, [X31+88]
	099 Move X30, [X31+64]
	100 Move X21, [X31+72]
	101 Add X31, X31, 96
	102 Return X0
	103 Call 0x1C17F20

Method: System.Object get_Key()

Disassembly:
	0x029B64C8 LDR X30, [X31], #0x20
	0x029B64CC RET
	0x029B64D0 BL 0x1C16F20
	0x029B64D4 STR X30, [X31 - 0x20]!
	0x029B64D8 STP X20, X19, [X31 + 0x10]
	0x029B64DC LDR X20, [X0 + 0x8]
	0x029B64E0 CBZ X20, 0x29B658C
	0x029B64E4 LDR X0, [X1 + 0x20]
	0x029B64E8 MOV X19, X1
	0x029B64EC LDRB W8, [X0 + 0x135]
	0x029B64F0 TBNZ X8, 0x0, 0x29B64F8
	0x029B64F4 BL 0x1C5C684
	0x029B64F8 LDR X8, [X0 + 0xC0]
	0x029B64FC LDR X1, [X8 + 0x20]
	0x029B6500 LDRB W8, [X1 + 0x135]
	0x029B6504 TBNZ X8, 0x0, 0x29B6514
	0x029B6508 MOV X0, X1
	0x029B650C BL 0x1C5C684
	0x029B6510 MOV X1, X0
	0x029B6514 LDR X8, [X20]
	0x029B6518 LDRH W9, [X8 + 0x12E]
	0x029B651C CBZ X9, 0x29B6540
	0x029B6520 LDR X10, [X8 + 0xB0]
	0x029B6524 ADD X10, X10, 0x8
	0x029B6528 LDUR X11, [X10 - 0x8]
	0x029B652C CMP X11, X1
	0x029B6530 B.EQ 0x29B6550
	0x029B6534 SUBS X9, X9, 0x1
	0x029B6538 ADD X10, X10, 0x10
	0x029B653C B.NE 0x29B6528
	0x029B6540 MOV X0, X20
	0x029B6544 MOV W2, W31
	0x029B6548 BL 0x1C5C788
	0x029B654C B 0x29B655C
	0x029B6550 LDRSW X9, [X10]
	0x029B6554 ADD X8, X8, X9, 0x4, LSL
	0x029B6558 ADD X0, X8, 0x138
	0x029B655C LDP X8, X1, [X0]
	0x029B6560 MOV X0, X20
	0x029B6564 BLR X8
	0x029B6568 LDR X0, [X19 + 0x20]
	0x029B656C MOV X19, X1
	0x029B6570 LDRB W8, [X0 + 0x135]
	0x029B6574 TBNZ X8, 0x0, 0x29B657C
	0x029B6578 BL 0x1C5C684
	0x029B657C MOV X0, X19
	0x029B6580 LDP X20, X19, [X31 + 0x10]
	0x029B6584 LDR X30, [X31], #0x20

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, [X0+16]
	006 Compare X20, 0
	007 JumpIfEqual {55}
	008 Move X8, [X1+32]
	009 Move X19, X1
	010 Move X8, [X8+192]
	011 Move X1, [X8+16]
	012 Move W8, [X1+309]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {20}
	017 Move X0, X1
	018 Call 0x1C5D684
	019 Move X1, X0
	020 Move X8, [X20]
	021 NotImplemented "Instruction LDRH not yet implemented."
	022 Compare X9, 0
	023 JumpIfEqual {30}
	024 Move X10, [X8+176]
	025 Add X10, X10, 8
	026 NotImplemented "Instruction LDUR not yet implemented."
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Subtract X9, X9, 1
	029 Add X10, X10, 16
	030 Move X0, X20
	031 Move W2, W31
	032 Call 0x1C5D788
	033 NotImplemented "Instruction LDRSW not yet implemented."
	034 Add X8, X8, X9
	035 Add X0, X8, 312
	036 Move X9, [X0]
	037 Move X1, [X0+8]
	038 Add X8, X31, 8
	039 Move X0, X20
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X8, [X19+32]
	042 Move X9, [X31+8]
	043 Move X10, [X31+16]
	044 Add X1, X31, 8
	045 Move X8, [X8+192]
	046 Move [X31+8], X9
	047 Move [X31+16], X10
	048 Move X0, [X8+64]
	049 Call 0x1C17E04
	050 Move X20, [X31+48]
	051 Move X19, [X31+56]
	052 Move X30, [X31+32]
	053 Add X31, X31, 64
	054 Return X0
	055 Call 0x1C17F20

Method: System.Object get_Value()

Disassembly:
	0x029B6588 RET
	0x029B658C BL 0x1C16F20
	0x029B6590 SUB X31, X31, 0x30
	0x029B6594 STP X30, X21, [X31 + 0x10]
	0x029B6598 STP X20, X19, [X31 + 0x20]
	0x029B659C ADRP X21, 0x1A24000
	0x029B65A0 LDRB W8, [X21 + 0xFCF]
	0x029B65A4 MOV X20, X1
	0x029B65A8 MOV X19, X0
	0x029B65AC TBNZ X8, 0x0, 0x29B65C4
	0x029B65B0 ADRP X0, 0x1745000
	0x029B65B4 LDR X0, [X0 + 0xF10]
	0x029B65B8 BL 0x1C16CF4
	0x029B65BC MOVZ W8, 0x1
	0x029B65C0 STRB W8, [X21 + 0xFCF]
	0x029B65C4 LDR X0, [X20 + 0x20]
	0x029B65C8 ADRP X20, 0x1745000
	0x029B65CC LDRB W8, [X0 + 0x135]
	0x029B65D0 LDR X20, [X20 + 0xF10]
	0x029B65D4 TBNZ X8, 0x0, 0x29B65DC
	0x029B65D8 BL 0x1C5C684
	0x029B65DC LDR X8, [X0 + 0xC0]
	0x029B65E0 MOV X0, X19
	0x029B65E4 LDR X1, [X8 + 0x60]
	0x029B65E8 BL 0x29B6294
	0x029B65EC LDR X8, [X20]
	0x029B65F0 STP X0, X1, [X31]
	0x029B65F4 ADD X1, X31, 0x0
	0x029B65F8 MOV X0, X8
	0x029B65FC BL 0x1C16E04
	0x029B6600 LDP X20, X19, [X31 + 0x20]
	0x029B6604 LDP X30, X21, [X31 + 0x10]
	0x029B6608 ADD X31, X31, 0x30
	0x029B660C RET
	0x029B6610 STR X30, [X31 - 0x20]!
	0x029B6614 STP X20, X19, [X31 + 0x10]
	0x029B6618 ADRP X20, 0x1A24000
	0x029B661C LDRB W8, [X20 + 0xFD0]
	0x029B6620 MOV X19, X0

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move [X31+40], X19
	004 Move X19, [X0+16]
	005 Compare X19, 0
	006 JumpIfEqual {44}
	007 Move X8, [X1+32]
	008 Move X8, [X8+192]
	009 Move X1, [X8+16]
	010 Move W8, [X1+309]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {18}
	015 Move X0, X1
	016 Call 0x1C5D684
	017 Move X1, X0
	018 Move X8, [X19]
	019 NotImplemented "Instruction LDRH not yet implemented."
	020 Compare X9, 0
	021 JumpIfEqual {28}
	022 Move X10, [X8+176]
	023 Add X10, X10, 8
	024 NotImplemented "Instruction LDUR not yet implemented."
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Subtract X9, X9, 1
	027 Add X10, X10, 16
	028 Move X0, X19
	029 Move W2, W31
	030 Call 0x1C5D788
	031 NotImplemented "Instruction LDRSW not yet implemented."
	032 Add X8, X8, X9
	033 Add X0, X8, 312
	034 Move X9, [X0]
	035 Move X1, [X0+8]
	036 Add X8, X31, 8
	037 Move X0, X19
	038 NotImplemented "Instruction BLR not yet implemented."
	039 Move X0, [X31+24]
	040 Move X30, [X31+32]
	041 Move X19, [X31+40]
	042 Add X31, X31, 48
	043 Return X0
	044 Call 0x1C17F20

Method: System.Object get_Current()

Disassembly:
	0x029B6624 TBNZ X8, 0x0, 0x29B663C
	0x029B6628 ADRP X0, 0x173D000
	0x029B662C LDR X0, [X0 + 0xE18]
	0x029B6630 BL 0x1C16CF4
	0x029B6634 MOVZ W8, 0x1
	0x029B6638 STRB W8, [X20 + 0xFD0]
	0x029B663C LDR X19, [X19 + 0x8]
	0x029B6640 CBZ X19, 0x29B66AC
	0x029B6644 ADRP X10, 0x173D000
	0x029B6648 LDR X8, [X19]
	0x029B664C LDR X10, [X10 + 0xE18]
	0x029B6650 LDRH W9, [X8 + 0x12E]
	0x029B6654 LDR X1, [X10]
	0x029B6658 CBZ X9, 0x29B667C
	0x029B665C LDR X10, [X8 + 0xB0]
	0x029B6660 ADD X10, X10, 0x8
	0x029B6664 LDUR X11, [X10 - 0x8]
	0x029B6668 CMP X11, X1
	0x029B666C B.EQ 0x29B668C
	0x029B6670 SUBS X9, X9, 0x1
	0x029B6674 ADD X10, X10, 0x10
	0x029B6678 B.NE 0x29B6664
	0x029B667C MOV X0, X19
	0x029B6680 MOV W2, W31
	0x029B6684 BL 0x1C5C788
	0x029B6688 B 0x29B6698
	0x029B668C LDRSW X9, [X10]
	0x029B6690 ADD X8, X8, X9, 0x4, LSL
	0x029B6694 ADD X0, X8, 0x138
	0x029B6698 LDP X2, X1, [X0]
	0x029B669C MOV X0, X19

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X22, 0x1A25000
	008 Move X21, 0x1746000
	009 Move W8, [X22+4038]
	010 Move X21, [X21+3856]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x1746000
	018 Move X0, [X0+3856]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+4038], W8
	022 Move X8, [X20+32]
	023 Move X0, X19
	024 Move X8, [X8+192]
	025 Move X1, [X8+88]
	026 Call 0x29B6364, X0
	027 Move X8, [X21]
	028 Move [X31], X0
	029 Move [X31+8], X1
	030 Add X1, X31, 0
	031 Move X0, X8
	032 Call 0x1C17E04
	033 Move X20, [X31+48]
	034 Move X19, [X31+56]
	035 Move X22, [X31+32]
	036 Move X21, [X31+40]
	037 Move X30, [X31+16]
	038 Add X31, X31, 64
	039 Return X0

Method: System.Boolean MoveNext()

Disassembly:
	0x029B66A0 LDP X20, X19, [X31 + 0x10]
	0x029B66A4 LDR X30, [X31], #0x20
	0x029B66A8 BR X2
	0x029B66AC BL 0x1C16F20
	0x029B66B0 STR X30, [X31 - 0x20]!
	0x029B66B4 STP X20, X19, [X31 + 0x10]
	0x029B66B8 ADRP X20, 0x1A24000
	0x029B66BC LDRB W8, [X20 + 0xFD1]
	0x029B66C0 MOV X19, X0
	0x029B66C4 TBNZ X8, 0x0, 0x29B66DC
	0x029B66C8 ADRP X0, 0x173D000
	0x029B66CC LDR X0, [X0 + 0xE18]
	0x029B66D0 BL 0x1C16CF4
	0x029B66D4 MOVZ W8, 0x1
	0x029B66D8 STRB W8, [X20 + 0xFD1]
	0x029B66DC LDR X19, [X19 + 0x8]
	0x029B66E0 CBZ X19, 0x29B6750
	0x029B66E4 ADRP X10, 0x173D000
	0x029B66E8 LDR X8, [X19]
	0x029B66EC LDR X10, [X10 + 0xE18]
	0x029B66F0 LDRH W9, [X8 + 0x12E]
	0x029B66F4 LDR X1, [X10]
	0x029B66F8 CBZ X9, 0x29B671C
	0x029B66FC LDR X10, [X8 + 0xB0]
	0x029B6700 ADD X10, X10, 0x8
	0x029B6704 LDUR X11, [X10 - 0x8]
	0x029B6708 CMP X11, X1
	0x029B670C B.EQ 0x29B672C
	0x029B6710 SUBS X9, X9, 0x1
	0x029B6714 ADD X10, X10, 0x10
	0x029B6718 B.NE 0x29B6704
	0x029B671C MOVZ W2, 0x2
	0x029B6720 MOV X0, X19
	0x029B6724 BL 0x1C5C788
	0x029B6728 B 0x29B673C
	0x029B672C LDR W9, [X10]
	0x029B6730 ADD W9, W9, 0x2
	0x029B6734 ADD X8, X8, W9, 0x4, SXTW
	0x029B6738 ADD X0, X8, 0x138
	0x029B673C LDP X2, X1, [X0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1A25000
	005 Move W8, [X20+4039]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x173E000
	012 Move X0, [X0+3608]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+4039], W8
	016 Move X19, [X19+16]
	017 Compare X19, 0
	018 JumpIfEqual {45}
	019 Move X10, 0x173E000
	020 Move X8, [X19]
	021 Move X10, [X10+3608]
	022 NotImplemented "Instruction LDRH not yet implemented."
	023 Move X1, [X10]
	024 Compare X9, 0
	025 JumpIfEqual {32}
	026 Move X10, [X8+176]
	027 Add X10, X10, 8
	028 NotImplemented "Instruction LDUR not yet implemented."
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Subtract X9, X9, 1
	031 Add X10, X10, 16
	032 Move X0, X19
	033 Move W2, W31
	034 Call 0x1C5D788
	035 NotImplemented "Instruction LDRSW not yet implemented."
	036 Add X8, X8, X9
	037 Add X0, X8, 312
	038 Move X2, [X0]
	039 Move X1, [X0+8]
	040 Move X0, X19
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 CallNoReturn X2
	045 Call 0x1C17F20

Method: System.Void Reset()

Disassembly:
	0x029B6740 MOV X0, X19
	0x029B6744 LDP X20, X19, [X31 + 0x10]
	0x029B6748 LDR X30, [X31], #0x20
	0x029B674C BR X2
	0x029B6750 BL 0x1C16F20
	0x029B6754 STP X30, X21, [X31 - 0x20]!
	0x029B6758 STP X20, X19, [X31 + 0x10]
	0x029B675C MOV X20, X1
	0x029B6760 MOV X1, X31
	0x029B6764 MOV X21, X2
	0x029B6768 MOV X19, X0
	0x029B676C BL 0x33BDD8C
	0x029B6770 CBZ X20, 0x29B679C
	0x029B6774 LDR X8, [X21 + 0x20]
	0x029B6778 MOV X0, X20
	0x029B677C LDR X8, [X8 + 0xC0]
	0x029B6780 LDR X1, [X8 + 0x8]
	0x029B6784 LDR X8, [X1]
	0x029B6788 BLR X8
	0x029B678C STR X0, [X19 + 0x10]
	0x029B6790 LDP X20, X19, [X31 + 0x10]
	0x029B6794 LDP X30, X21, [X31], #0x20
	0x029B6798 RET
	0x029B679C BL 0x1C16F20
	0x029B67A0 STP X29, X30, [X31 - 0x60]!
	0x029B67A4 STP X28, X27, [X31 + 0x10]
	0x029B67A8 STP X26, X25, [X31 + 0x20]
	0x029B67AC STP X24, X23, [X31 + 0x30]
	0x029B67B0 STP X22, X21, [X31 + 0x40]
	0x029B67B4 STP X20, X19, [X31 + 0x50]
	0x029B67B8 ADD X29, X31, 0x0
	0x029B67BC SUB X31, X31, 0x30
	0x029B67C0 MRS X8, 0xC000
	0x029B67C4 STUR X8, [X29 - 0x28]
	0x029B67C8 LDR X8, [X8 + 0x28]
	0x029B67CC MOV X19, X1
	0x029B67D0 MOV X24, X0
	0x029B67D4 STUR X8, [X29 - 0x8]
	0x029B67D8 LDR X28, [X1 + 0x20]
	0x029B67DC LDR X8, [X28 + 0xC0]
	0x029B67E0 LDR X9, [X8 + 0x28]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1A25000
	005 Move W8, [X20+4040]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x173E000
	012 Move X0, [X0+3608]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+4040], W8
	016 Move X19, [X19+16]
	017 Compare X19, 0
	018 JumpIfEqual {46}
	019 Move X10, 0x173E000
	020 Move X8, [X19]
	021 Move X10, [X10+3608]
	022 NotImplemented "Instruction LDRH not yet implemented."
	023 Move X1, [X10]
	024 Compare X9, 0
	025 JumpIfEqual {32}
	026 Move X10, [X8+176]
	027 Add X10, X10, 8
	028 NotImplemented "Instruction LDUR not yet implemented."
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Subtract X9, X9, 1
	031 Add X10, X10, 16
	032 Move W2, 2
	033 Move X0, X19
	034 Call 0x1C5D788
	035 Move W9, [X10]
	036 Add W9, W9, 2
	037 Add X8, X8, W9
	038 Add X0, X8, 312
	039 Move X2, [X0]
	040 Move X1, [X0+8]
	041 Move X0, X19
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 CallNoReturn X2
	046 Call 0x1C17F20

