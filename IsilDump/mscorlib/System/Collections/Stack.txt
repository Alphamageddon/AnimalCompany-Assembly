Type: System.Collections.Stack

Method: System.Void .ctor()

Disassembly:
	0x03357984 ADD X8, X8, W23, 0x2, UXTW
	0x03357988 LDR W8, [X8 + 0x20]
	0x0335798C MOVN W10, 0x0
	0x03357990 LSLV W10, W10, W21
	0x03357994 ADD X9, X22, W9, 0x2, SXTW
	0x03357998 BIC W8, W8, W10, 0x0
	0x0335799C STR W8, [X9 + 0x20]
	0x033579A0 B 0x3357B9C
	0x033579A4 MOV X2, X22
	0x033579A8 MOV W3, W19
	0x033579AC LDP X20, X19, [X31 + 0x40]
	0x033579B0 LDP X22, X21, [X31 + 0x30]
	0x033579B4 LDP X24, X23, [X31 + 0x20]
	0x033579B8 LDP X30, X25, [X31 + 0x10]
	0x033579BC MOV W1, W31
	0x033579C0 MOV X5, X31
	0x033579C4 ADD X31, X31, 0x50
	0x033579C8 B 0x339FCE8
	0x033579CC ADRP X22, 0xD9E000
	0x033579D0 LDR X22, [X22 + 0x9B8]
	0x033579D4 MOV X0, X21
	0x033579D8 LDR X1, [X22]
	0x033579DC BL 0x1C16E00

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1086000
	006 Move X20, 0xD9D000
	007 Move W8, [X21+3558]
	008 Move X20, [X20+2512]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD9D000
	015 Move X0, [X0+2512]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3558], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call Object..ctor, X0
	022 Move X0, [X20]
	023 Move W1, 10
	024 Call 0x1C17D6C
	025 Move [X19+16], X0
	026 Move [X19+24], X31
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return 

Method: System.Void .ctor(System.Int32 initialCapacity)

Disassembly:
	0x033579E0 CBZ X0, 0x3357D08
	0x033579E4 MOV X0, X21
	0x033579E8 MOV X1, X31
	0x033579EC BL 0x3395B7C
	0x033579F0 LDR W8, [X20 + 0x18]
	0x033579F4 SUB W9, W0, W19
	0x033579F8 CMP W9, W8
	0x033579FC B.LT 0x3357CB4
	0x03357A00 LDR X22, [X22]
	0x03357A04 MOV X0, X21
	0x03357A08 MOV X1, X22
	0x03357A0C BL 0x1C16E00
	0x03357A10 CBZ X0, 0x3357CFC
	0x03357A14 LDRSW X8, [X20 + 0x18]
	0x03357A18 CMP W8, 0x1
	0x03357A1C B.LT 0x3357B9C
	0x03357A20 LDR X9, [X20 + 0x10]
	0x03357A24 CBZ X9, 0x3357BB8
	0x03357A28 LDR W11, [X9 + 0x18]
	0x03357A2C MOV W12, W19
	0x03357A30 MOV X10, X31
	0x03357A34 UBFM X13, X12, 0x20, 0x1F
	0x03357A38 MOVZ X14, 0x1
	0x03357A3C UBFM X15, X10, 0x5, 0x1F
	0x03357A40 CMP W15, W11
	0x03357A44 B.CS 0x3357BB4
	0x03357A48 LDR W16, [X0 + 0x18]
	0x03357A4C ADD X17, X12, X10
	0x03357A50 CMP X17, X16
	0x03357A54 B.CS 0x3357BB4
	0x03357A58 ADD X15, X9, W15, 0x2, UXTW
	0x03357A5C LDR W15, [X15 + 0x20]
	0x03357A60 ADD X16, X0, X13, 0x20, ASR
	0x03357A64 ADD X13, X13, X14
	0x03357A68 LSRV W15, W15, W10
	0x03357A6C ADD X10, X10, 0x1
	0x03357A70 AND W15, W15, 0x1
	0x03357A74 CMP X10, X8
	0x03357A78 STRB W15, [X16 + 0x20]
	0x03357A7C B.LT 0x3357A3C
	0x03357A80 B 0x3357B9C
	0x03357A84 MOV W24, W31
	0x03357A88 MOV X0, X21
	0x03357A8C MOV X1, X31
	0x03357A90 BL 0x3395B7C
	0x03357A94 SUB W8, W0, W19
	0x03357A98 CMP W8, W24
	0x03357A9C B.LT 0x3357CB4
	0x03357AA0 LDR X22, [X22]
	0x03357AA4 AND W8, W25, 0xFFFFFFF8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1086000
	006 Move W8, [X21+3559]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD9D000
	014 Move X0, [X0+2512]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3559], W8
	018 Move X0, X19
	019 Move X1, X31
	020 Call Object..ctor, X0
	021 Move TEMP, X20
	022 And TEMP, TEMP, -2147483648
	023 Compare TEMP, -2147483648
	024 JumpIfEqual {39}
	025 Move X8, 0xD9D000
	026 Move X8, [X8+2512]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X0, [X8]
	029 Move W8, 10
	030 NotImplemented "Instruction CSEL not yet implemented."
	031 Call 0x1C17D6C
	032 Move [X19+16], X0
	033 Move [X19+24], X31
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return 
	039 Move X0, 0xDA5000
	040 Move X0, [X0+1888]
	041 Call 0x1C17D08
	042 Call 0x1C17F10
	043 Move X19, X0
	044 Move X0, 0xDD4000
	045 Move X0, [X0+1016]
	046 Call 0x1C17D08
	047 Move X20, X0
	048 Move X0, 0xDC5000
	049 Move X0, [X0+1648]
	050 Call 0x1C17D08
	051 Move X2, X0
	052 Move X0, X19
	053 Move X1, X20
	054 Move X3, X31
	055 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	056 Move X0, 0xDD4000
	057 Move X0, [X0+1328]
	058 Call 0x1C17D08
	059 Move X1, X0
	060 Move X0, X19
	061 Call 0x1C17DEC

Method: System.Int32 get_Count()

Disassembly:
	0x03357AA8 SUB W23, W23, W8
	0x03357AAC CMP W23, 0x0

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Boolean get_IsSynchronized()

Disassembly:
	0x03357AB0 MOV X0, X21
	0x03357AB4 MOV X1, X22

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Object get_SyncRoot()

Disassembly:
	0x03357AB8 CSET W25, GT
	0x03357ABC BL 0x1C16E00
	0x03357AC0 CBZ X0, 0x3357CFC
	0x03357AC4 SUB W8, W24, W25
	0x03357AC8 CMP W8, 0x1
	0x03357ACC B.LT 0x3357B3C
	0x03357AD0 MOV W11, W19
	0x03357AD4 MOV W9, W31
	0x03357AD8 MOV X10, X31
	0x03357ADC MOV W12, W8
	0x03357AE0 UBFM X13, X11, 0x20, 0x1F
	0x03357AE4 MOVZ X14, 0x1
	0x03357AE8 LDR X15, [X20 + 0x10]
	0x03357AEC CBZ X15, 0x3357BB8
	0x03357AF0 LDR W17, [X15 + 0x18]
	0x03357AF4 UBFM X16, X10, 0x2, 0x1F
	0x03357AF8 CMP W16, W17
	0x03357AFC B.CS 0x3357BB4
	0x03357B00 LDR W17, [X0 + 0x18]
	0x03357B04 ADD X1, X11, X10
	0x03357B08 CMP X1, X17
	0x03357B0C B.CS 0x3357BB4
	0x03357B10 ADD X15, X15, W16, 0x2, UXTW
	0x03357B14 LDR W15, [X15 + 0x20]
	0x03357B18 AND W16, W9, 0x18
	0x03357B1C ADD X10, X10, 0x1
	0x03357B20 ADD X17, X0, X13, 0x20, ASR
	0x03357B24 ADD W9, W9, 0x8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1086000
	005 Move W8, [X20+3560]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDA3000
	012 Move X0, [X0+3264]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3560], W8
	016 Add X19, X19, 32
	017 Move X0, [X19]
	018 Compare X0, 0
	019 JumpIfNotEqual {32}
	020 Move X8, 0xDA3000
	021 Move X8, [X8+3264]
	022 Move X0, [X8]
	023 Call 0x1C17F10
	024 Move X1, X31
	025 Move X20, X0
	026 Call Object..ctor, X0
	027 Move X0, X19
	028 Move X1, X20
	029 Move X2, X31
	030 Call 0x1C25138
	031 Move X0, [X19]
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return X0

Method: System.Void Clear()

Disassembly:
	0x03357B28 CMP X12, X10
	0x03357B2C ASRV W15, W15, W16
	0x03357B30 ADD X13, X13, X14
	0x03357B34 STRB W15, [X17 + 0x20]
	0x03357B38 B.NE 0x3357AE8
	0x03357B3C CMP W23, 0x1
	0x03357B40 B.LT 0x3357B9C
	0x03357B44 LDR X9, [X20 + 0x10]
	0x03357B48 CBZ X9, 0x3357BB8
	0x03357B4C LDR W12, [X9 + 0x18]
	0x03357B50 ADD W10, W8, 0x3
	0x03357B54 CMP W8, 0x0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+16]
	005 Move W2, [X19+24]
	006 Move W1, W31
	007 Move X3, X31
	008 Call Array.Clear, X0, X1, X2
	009 Move W8, [X19+28]
	010 Add W8, W8, 1
	011 Move [X19+24], W31
	012 Move [X19+28], W8
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Return 

Method: System.Object Clone()

Disassembly:
	0x03357B58 CSEL W10, W10, W8, LT
	0x03357B5C SBFM W11, W10, 0x2, 0x1F
	0x03357B60 CMP W11, W12
	0x03357B64 B.CS 0x3357BB4
	0x03357B68 LDR W12, [X0 + 0x18]
	0x03357B6C ADD W10, W8, W19
	0x03357B70 CMP W10, W12
	0x03357B74 B.CS 0x3357BB4
	0x03357B78 ADD X9, X9, W11, 0x2, SXTW
	0x03357B7C LDR W9, [X9 + 0x20]
	0x03357B80 UBFM W8, W8, 0x1D, 0x1
	0x03357B84 MOVN W11, 0x0
	0x03357B88 LSLV W11, W11, W23
	0x03357B8C ASRV W8, W9, W8
	0x03357B90 BIC W8, W8, W11, 0x0
	0x03357B94 ADD X9, X0, W10, SXTW
	0x03357B98 STRB W8, [X9 + 0x20]
	0x03357B9C LDP X20, X19, [X31 + 0x40]
	0x03357BA0 LDP X22, X21, [X31 + 0x30]
	0x03357BA4 LDP X24, X23, [X31 + 0x20]
	0x03357BA8 LDP X30, X25, [X31 + 0x10]
	0x03357BAC ADD X31, X31, 0x50
	0x03357BB0 RET
	0x03357BB4 BL 0x1C16F28
	0x03357BB8 BL 0x1C16F20
	0x03357BBC ADRP X0, 0xDA1000
	0x03357BC0 LDR X0, [X0 + 0x528]
	0x03357BC4 BL 0x1C16D08
	0x03357BC8 BL 0x1C16F10
	0x03357BCC MOV X19, X0
	0x03357BD0 ADRP X0, 0xDC4000
	0x03357BD4 LDR X0, [X0 + 0x640]
	0x03357BD8 BL 0x1C16D08
	0x03357BDC MOV X1, X0
	0x03357BE0 MOV X0, X19
	0x03357BE4 MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1086000
	006 Move X20, 0xDCB000
	007 Move W8, [X21+3561]
	008 Move X20, [X20+2248]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDCB000
	015 Move X0, [X0+2248]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3561], W8
	019 Move X0, [X20]
	020 Move W21, [X19+24]
	021 Call 0x1C17F10
	022 Move W1, W21
	023 Move X20, X0
	024 Call Stack..ctor, X0, X1
	025 Compare X20, 0
	026 JumpIfEqual {44}
	027 Move W8, [X19+24]
	028 Move X2, [X20+16]
	029 Move W1, W31
	030 Move W3, W31
	031 Move [X20+24], W8
	032 Move X0, [X19+16]
	033 Move W4, [X19+24]
	034 Move X5, X31
	035 Call Array.Copy, X0, X1, X2, X3, X4
	036 Move W8, [X19+28]
	037 Move X0, X20
	038 Move [X20+28], W8
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Return X0
	044 Call 0x1C17F20

Method: System.Void CopyTo(System.Array array, System.Int32 index)

Disassembly:
	0x03357BE8 BL 0x330E100
	0x03357BEC B 0x3357CE4
	0x03357BF0 STR W19, [X31 + 0xC]
	0x03357BF4 ADRP X0, 0xD9C000
	0x03357BF8 LDR X0, [X0 + 0x758]
	0x03357BFC BL 0x1C16D08
	0x03357C00 ADD X1, X31, 0xC
	0x03357C04 BL 0x1C16E04
	0x03357C08 MOV X19, X0
	0x03357C0C ADRP X0, 0xDA4000
	0x03357C10 LDR X0, [X0 + 0x760]
	0x03357C14 BL 0x1C16D08
	0x03357C18 BL 0x1C16F10
	0x03357C1C MOV X20, X0
	0x03357C20 ADRP X0, 0xDA7000
	0x03357C24 LDR X0, [X0 + 0x130]
	0x03357C28 BL 0x1C16D08
	0x03357C2C MOV X21, X0
	0x03357C30 ADRP X0, 0xDC4000
	0x03357C34 LDR X0, [X0 + 0x670]
	0x03357C38 BL 0x1C16D08
	0x03357C3C MOV X3, X0
	0x03357C40 MOV X0, X20
	0x03357C44 MOV X1, X21
	0x03357C48 MOV X2, X19
	0x03357C4C MOV X4, X31
	0x03357C50 BL 0x3312C8C
	0x03357C54 ADRP X0, 0xDD3000
	0x03357C58 LDR X0, [X0 + 0x598]
	0x03357C5C BL 0x1C16D08
	0x03357C60 MOV X1, X0
	0x03357C64 MOV X0, X20
	0x03357C68 BL 0x1C16DEC
	0x03357C6C ADRP X0, 0xDA4000
	0x03357C70 LDR X0, [X0 + 0x578]
	0x03357C74 BL 0x1C16D08
	0x03357C78 BL 0x1C16F10
	0x03357C7C MOV X19, X0
	0x03357C80 ADRP X0, 0xDC5000
	0x03357C84 LDR X0, [X0 + 0x308]
	0x03357C88 BL 0x1C16D08
	0x03357C8C MOV X20, X0
	0x03357C90 ADRP X0, 0xDC4000
	0x03357C94 LDR X0, [X0 + 0x640]
	0x03357C98 BL 0x1C16D08
	0x03357C9C MOV X2, X0
	0x03357CA0 MOV X0, X19
	0x03357CA4 MOV X1, X20
	0x03357CA8 MOV X3, X31
	0x03357CAC BL 0x330E16C
	0x03357CB0 B 0x3357CE4
	0x03357CB4 ADRP X0, 0xDA4000
	0x03357CB8 LDR X0, [X0 + 0x578]
	0x03357CBC BL 0x1C16D08
	0x03357CC0 BL 0x1C16F10
	0x03357CC4 MOV X19, X0
	0x03357CC8 ADRP X0, 0xDC4000
	0x03357CCC LDR X0, [X0 + 0x760]
	0x03357CD0 BL 0x1C16D08
	0x03357CD4 MOV X1, X0
	0x03357CD8 MOV X0, X19
	0x03357CDC MOV X2, X31
	0x03357CE0 BL 0x3314A68
	0x03357CE4 ADRP X0, 0xDD3000
	0x03357CE8 LDR X0, [X0 + 0x598]
	0x03357CEC BL 0x1C16D08
	0x03357CF0 MOV X1, X0
	0x03357CF4 MOV X0, X19
	0x03357CF8 BL 0x1C16DEC
	0x03357CFC MOV X0, X21
	0x03357D00 MOV X1, X22
	0x03357D04 BL 0x1C171E0
	0x03357D08 ADRP X0, 0xDA4000
	0x03357D0C LDR X0, [X0 + 0x578]
	0x03357D10 BL 0x1C16D08
	0x03357D14 BL 0x1C16F10
	0x03357D18 MOV X19, X0
	0x03357D1C ADRP X0, 0xDD3000
	0x03357D20 LDR X0, [X0 + 0x5A0]
	0x03357D24 B 0x3357C88
	0x03357D28 LDR W0, [X0 + 0x18]
	0x03357D2C RET
	0x03357D30 STR X30, [X31 - 0x20]!
	0x03357D34 STP X20, X19, [X31 + 0x10]
	0x03357D38 ADRP X20, 0x1085000
	0x03357D3C LDRB W8, [X20 + 0xDF0]
	0x03357D40 MOV X19, X0
	0x03357D44 TBNZ X8, 0x0, 0x3357D5C
	0x03357D48 ADRP X0, 0xDA2000
	0x03357D4C LDR X0, [X0 + 0xCC0]
	0x03357D50 BL 0x1C16CF4
	0x03357D54 MOVZ W8, 0x1
	0x03357D58 STRB W8, [X20 + 0xDF0]
	0x03357D5C LDR X0, [X19 + 0x20]!
	0x03357D60 CBNZ X0, 0x3357D94
	0x03357D64 ADRP X8, 0xDA2000
	0x03357D68 LDR X8, [X8 + 0xCC0]
	0x03357D6C LDR X0, [X8]
	0x03357D70 BL 0x1C16F10
	0x03357D74 MOV X1, X31
	0x03357D78 MOV X20, X0
	0x03357D7C BL 0x33BDD8C
	0x03357D80 MOV X0, X19
	0x03357D84 MOV X1, X20
	0x03357D88 MOV X2, X31
	0x03357D8C BL 0x1C24138
	0x03357D90 LDR X0, [X19]
	0x03357D94 LDP X20, X19, [X31 + 0x10]
	0x03357D98 LDR X30, [X31], #0x20
	0x03357D9C RET
	0x03357DA0 MOV W0, W31
	0x03357DA4 RET
	0x03357DA8 STP X30, X21, [X31 - 0x20]!
	0x03357DAC STP X20, X19, [X31 + 0x10]
	0x03357DB0 ADRP X20, 0x1085000
	0x03357DB4 ADRP X21, 0xDD3000
	0x03357DB8 LDRB W8, [X20 + 0xDF1]
	0x03357DBC LDR X21, [X21 + 0x5A8]
	0x03357DC0 MOV X19, X0
	0x03357DC4 TBNZ X8, 0x0, 0x3357DDC
	0x03357DC8 ADRP X0, 0xDD3000
	0x03357DCC LDR X0, [X0 + 0x5A8]
	0x03357DD0 BL 0x1C16CF4
	0x03357DD4 MOVZ W8, 0x1
	0x03357DD8 STRB W8, [X20 + 0xDF1]
	0x03357DDC LDR X0, [X21]
	0x03357DE0 BL 0x1C16F10
	0x03357DE4 MOV X1, X19
	0x03357DE8 MOV X20, X0
	0x03357DEC BL 0x33574D8
	0x03357DF0 MOV X0, X20
	0x03357DF4 LDP X20, X19, [X31 + 0x10]
	0x03357DF8 LDP X30, X21, [X31], #0x20
	0x03357DFC RET
	0x03357E00 STP X30, X21, [X31 - 0x20]!
	0x03357E04 STP X20, X19, [X31 + 0x10]
	0x03357E08 ADRP X20, 0x1085000
	0x03357E0C ADRP X21, 0xDD3000
	0x03357E10 LDRB W8, [X20 + 0xDF2]
	0x03357E14 LDR X21, [X21 + 0x5B0]
	0x03357E18 MOV X19, X0
	0x03357E1C TBNZ X8, 0x0, 0x3357E34
	0x03357E20 ADRP X0, 0xDD3000
	0x03357E24 LDR X0, [X0 + 0x5B0]
	0x03357E28 BL 0x1C16CF4
	0x03357E2C MOVZ W8, 0x1
	0x03357E30 STRB W8, [X20 + 0xDF2]
	0x03357E34 LDR X0, [X21]
	0x03357E38 BL 0x1C16F10
	0x03357E3C MOV X1, X19
	0x03357E40 MOV X20, X0
	0x03357E44 BL 0x3357E58
	0x03357E48 MOV X0, X20
	0x03357E4C LDP X20, X19, [X31 + 0x10]
	0x03357E50 LDP X30, X21, [X31], #0x20
	0x03357E54 RET
	0x03357E58 STR X30, [X31 - 0x20]!
	0x03357E5C STP X20, X19, [X31 + 0x10]
	0x03357E60 MOV X20, X1
	0x03357E64 MOV X1, X31
	0x03357E68 MOV X19, X0
	0x03357E6C BL 0x33BDD8C
	0x03357E70 MOVN W8, 0x0
	0x03357E74 STR X20, [X19 + 0x10]
	0x03357E78 STR W8, [X19 + 0x18]
	0x03357E7C CBZ X20, 0x3357E94
	0x03357E80 LDR W8, [X20 + 0x1C]
	0x03357E84 STR W8, [X19 + 0x1C]
	0x03357E88 LDP X20, X19, [X31 + 0x10]
	0x03357E8C LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X22, 0x1086000
	011 Move W8, [X22+3562]
	012 Move W20, W2
	013 Move X21, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xD9D000
	020 Move X0, [X0+2512]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+3562], W8
	024 Compare X21, 0
	025 JumpIfEqual {120}
	026 Move X0, X21
	027 Move X1, X31
	028 Call Array.get_Rank, X0
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move TEMP, X20
	031 And TEMP, TEMP, -2147483648
	032 Compare TEMP, -2147483648
	033 JumpIfEqual {149}
	034 Move X0, X21
	035 Move X1, X31
	036 Call Array.get_Length, X0
	037 Move W8, [X19+24]
	038 Subtract W9, W0, W20
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X8, 0xD9D000
	041 Move X8, [X8+2512]
	042 Move X0, X21
	043 Move X1, [X8]
	044 Call 0x1C17E00
	045 Move W8, [X19+24]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Compare X0, 0
	048 Invalid "Jump target not found in method."
	049 Move W23, W20
	050 Move X22, X0
	051 Move X21, X31
	052 Move TEMP, 0
	053 Not TEMP
	054 Move W24, TEMP
	055 Move X25, X23
	056 ShiftRight X25, 32
	057 And X25, X25, 0x7FFFFFFF
	058 Move X26, 1
	059 Move X9, [X19+16]
	060 Compare X9, 0
	061 JumpIfEqual {116}
	062 Move W10, [X9+24]
	063 Add W8, W8, W24
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Add X8, X9, W8
	066 Move X20, [X8+32]
	067 Compare X20, 0
	068 JumpIfEqual {75}
	069 Move X8, [X22]
	070 Move X0, X20
	071 Move X1, [X8+64]
	072 Call 0x1C17E00
	073 Compare X0, 0
	074 JumpIfEqual {117}
	075 Move W8, [X22+24]
	076 Add X9, X23, X21
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Add X8, X22, X25
	079 Move [X8+32], X20
	080 NotImplemented "Instruction LDRSW not yet implemented."
	081 Add X21, X21, 1
	082 Subtract W24, W24, 1
	083 Add X25, X25, X26
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move W22, W31
	086 Move TEMP, 0
	087 Not TEMP
	088 Move W23, TEMP
	089 Move X9, [X19+16]
	090 Compare X9, 0
	091 JumpIfEqual {116}
	092 Move W10, [X9+24]
	093 Add W8, W8, W23
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Add X8, X9, W8
	096 Move X1, [X8+32]
	097 Add W2, W20, W22
	098 Move X0, X21
	099 Move X3, X31
	100 Call Array.SetValue, X0, X1, X2
	101 Move W8, [X19+24]
	102 Add W22, W22, 1
	103 Subtract W23, W23, 1
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move X20, [X31+64]
	106 Move X19, [X31+72]
	107 Move X22, [X31+48]
	108 Move X21, [X31+56]
	109 Move X24, [X31+32]
	110 Move X23, [X31+40]
	111 Move X26, [X31+16]
	112 Move X25, [X31+24]
	113 Move X30, [X31+80]
	114 Return 
	115 Call 0x1C17F28
	116 Call 0x1C17F20
	117 Call 0x1C17F44
	118 Move X1, X31
	119 Call 0x1C17DEC
	120 Move X0, 0xDA2000
	121 Move X0, [X0+1320]
	122 Call 0x1C17D08
	123 Call 0x1C17F10
	124 Move X19, X0
	125 Move X0, 0xDC5000
	126 Move X0, [X0+1600]
	127 Call 0x1C17D08
	128 Move X1, X0
	129 Move X0, X19
	130 Move X2, X31
	131 Call ArgumentNullException..ctor, X0, X1
	132 Move X0, 0xDA5000
	133 Move X0, [X0+1400]
	134 Call 0x1C17D08
	135 Call 0x1C17F10
	136 Move X19, X0
	137 Move X0, 0xDC6000
	138 Move X0, [X0+776]
	139 Call 0x1C17D08
	140 Move X20, X0
	141 Move X0, 0xDC5000
	142 Move X0, [X0+1600]
	143 Call 0x1C17D08
	144 Move X2, X0
	145 Move X0, X19
	146 Move X1, X20
	147 Move X3, X31
	148 Call ArgumentException..ctor, X0, X1, X2
	149 Move X0, 0xDA5000
	150 Move X0, [X0+1888]
	151 Call 0x1C17D08
	152 Call 0x1C17F10
	153 Move X19, X0
	154 Move X0, 0xDA8000
	155 Move X0, [X0+304]
	156 Call 0x1C17D08
	157 Move X20, X0
	158 Move X0, 0xDC5000
	159 Move X0, [X0+1648]
	160 Call 0x1C17D08
	161 Move X2, X0
	162 Move X0, X19
	163 Move X1, X20
	164 Move X3, X31
	165 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	166 Move X0, 0xDA5000
	167 Move X0, [X0+1400]
	168 Call 0x1C17D08
	169 Call 0x1C17F10
	170 Move X19, X0
	171 Move X0, 0xDC5000
	172 Move X0, [X0+1888]
	173 Call 0x1C17D08
	174 Move X1, X0
	175 Move X0, X19
	176 Move X2, X31
	177 Call ArgumentException..ctor, X0, X1
	178 Move X0, 0xDD4000
	179 Move X0, [X0+1336]
	180 Call 0x1C17D08
	181 Move X1, X0
	182 Move X0, X19
	183 Call 0x1C17DEC

Method: System.Collections.IEnumerator GetEnumerator()

Disassembly:
	0x03357E90 RET
	0x03357E94 BL 0x1C16F20
	0x03357E98 MOV X1, X31
	0x03357E9C B 0x33C5A24
	0x03357EA0 STP X30, X23, [X31 - 0x30]!
	0x03357EA4 STP X22, X21, [X31 + 0x10]
	0x03357EA8 STP X20, X19, [X31 + 0x20]
	0x03357EAC ADRP X20, 0x1085000
	0x03357EB0 LDRB W8, [X20 + 0xDF3]
	0x03357EB4 MOV X19, X0
	0x03357EB8 TBNZ X8, 0x0, 0x3357ED0
	0x03357EBC ADRP X0, 0xDA3000
	0x03357EC0 LDR X0, [X0 + 0x2F0]
	0x03357EC4 BL 0x1C16CF4
	0x03357EC8 MOVZ W8, 0x1
	0x03357ECC STRB W8, [X20 + 0xDF3]
	0x03357ED0 LDR X20, [X19 + 0x10]
	0x03357ED4 CBZ X20, 0x3357FF8
	0x03357ED8 LDR W8, [X19 + 0x1C]
	0x03357EDC LDR W9, [X20 + 0x1C]
	0x03357EE0 CMP W8, W9
	0x03357EE4 B.NE 0x3357FFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1086000
	006 Move X21, 0xDD4000
	007 Move W8, [X20+3563]
	008 Move X21, [X21+1344]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDD4000
	015 Move X0, [X0+1344]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3563], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X19
	022 Move X20, X0
	023 Call StackEnumerator..ctor, X0, X1
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: System.Object Peek()

Disassembly:
	0x03357F28 MOV X0, X20
	0x03357F2C BL 0x1C5C788
	0x03357F30 B 0x3357F44
	0x03357F34 LDR W9, [X10]
	0x03357F38 ADD W9, W9, 0x1
	0x03357F3C ADD X8, X8, W9, 0x4, SXTW
	0x03357F40 ADD X0, X8, 0x138
	0x03357F44 LDP X8, X1, [X0]
	0x03357F48 MOV X0, X20
	0x03357F4C BLR X8
	0x03357F50 SUB W22, W0, 0x1
	0x03357F54 CMP W21, W22
	0x03357F58 B.GE 0x3357F80
	0x03357F5C LDR W8, [X19 + 0x18]
	0x03357F60 LDR X0, [X19 + 0x10]
	0x03357F64 ADD W1, W8, 0x1
	0x03357F68 STR W1, [X19 + 0x18]
	0x03357F6C CBZ X0, 0x3357FF8
	0x03357F70 BL 0x33575D4
	0x03357F74 AND W8, W0, 0x1
	0x03357F78 STRB W8, [X19 + 0x20]
	0x03357F7C B 0x3357FE0
	0x03357F80 LDR X8, [X20]
	0x03357F84 LDR X1, [X23]
	0x03357F88 LDRH W9, [X8 + 0x12E]
	0x03357F8C CBZ X9, 0x3357FB0
	0x03357F90 LDR X10, [X8 + 0xB0]
	0x03357F94 ADD X10, X10, 0x8
	0x03357F98 LDUR X11, [X10 - 0x8]
	0x03357F9C CMP X11, X1
	0x03357FA0 B.EQ 0x3357FC0
	0x03357FA4 SUBS X9, X9, 0x1
	0x03357FA8 ADD X10, X10, 0x10

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W9, [X0+24]
	004 Compare W9, 0
	005 JumpIfEqual {17}
	006 Move X8, [X0+16]
	007 Compare X8, 0
	008 JumpIfEqual {35}
	009 Move W10, [X8+24]
	010 Subtract W9, W9, 1
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Add X8, X8, W9
	013 Move X0, [X8+32]
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Return X0
	017 Move X0, 0xD9D000
	018 Move X0, [X0+1456]
	019 Call 0x1C17D08
	020 Call 0x1C17F10
	021 Move X19, X0
	022 Move X0, 0xDC7000
	023 Move X0, [X0+776]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Move X2, X31
	028 Call InvalidOperationException..ctor, X0, X1
	029 Move X0, 0xDD4000
	030 Move X0, [X0+1352]
	031 Call 0x1C17D08
	032 Move X1, X0
	033 Move X0, X19
	034 Call 0x1C17DEC
	035 Call 0x1C17F20
	036 Call 0x1C17F28

Method: System.Object Pop()

Disassembly:
	0x03357FAC B.NE 0x3357F98
	0x03357FB0 MOVZ W2, 0x1
	0x03357FB4 MOV X0, X20
	0x03357FB8 BL 0x1C5C788
	0x03357FBC B 0x3357FD0
	0x03357FC0 LDR W9, [X10]
	0x03357FC4 ADD W9, W9, 0x1
	0x03357FC8 ADD X8, X8, W9, 0x4, SXTW
	0x03357FCC ADD X0, X8, 0x138
	0x03357FD0 LDP X8, X1, [X0]
	0x03357FD4 MOV X0, X20
	0x03357FD8 BLR X8
	0x03357FDC STR W0, [X19 + 0x18]
	0x03357FE0 CMP W21, W22
	0x03357FE4 LDP X20, X19, [X31 + 0x20]
	0x03357FE8 LDP X22, X21, [X31 + 0x10]
	0x03357FEC CSET W0, LT
	0x03357FF0 LDP X30, X23, [X31], #0x30
	0x03357FF4 RET
	0x03357FF8 BL 0x1C16F20
	0x03357FFC ADRP X0, 0xD9C000
	0x03358000 LDR X0, [X0 + 0x5B0]
	0x03358004 BL 0x1C16D08
	0x03358008 BL 0x1C16F10
	0x0335800C MOV X19, X0
	0x03358010 ADRP X0, 0xDC5000
	0x03358014 LDR X0, [X0 + 0x288]
	0x03358018 BL 0x1C16D08
	0x0335801C MOV X1, X0
	0x03358020 MOV X0, X19
	0x03358024 MOV X2, X31
	0x03358028 BL 0x337DF1C
	0x0335802C ADRP X0, 0xDD2000
	0x03358030 LDR X0, [X0 + 0x5B8]
	0x03358034 BL 0x1C16D08
	0x03358038 MOV X1, X0
	0x0335803C MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W9, [X0+24]
	004 Compare W9, 0
	005 JumpIfEqual {22}
	006 Move W10, [X0+28]
	007 Move X8, [X0+16]
	008 Subtract W9, W9, 1
	009 Add W10, W10, 1
	010 Move [X0+24], W9
	011 Move [X0+28], W10
	012 Compare X8, 0
	013 JumpIfEqual {40}
	014 Move W10, [X8+24]
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Add X8, X8, W9
	017 Move X0, [X8+32]
	018 Move [X8+32], X31
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Return X0
	022 Move X0, 0xD9D000
	023 Move X0, [X0+1456]
	024 Call 0x1C17D08
	025 Call 0x1C17F10
	026 Move X19, X0
	027 Move X0, 0xDC6000
	028 Move X0, [X0+776]
	029 Call 0x1C17D08
	030 Move X1, X0
	031 Move X0, X19
	032 Move X2, X31
	033 Call InvalidOperationException..ctor, X0, X1
	034 Move X0, 0xDD3000
	035 Move X0, [X0+1360]
	036 Call 0x1C17D08
	037 Move X1, X0
	038 Move X0, X19
	039 Call 0x1C17DEC
	040 Call 0x1C17F20
	041 Call 0x1C17F28

Method: System.Void Push(System.Object obj)

Disassembly:
	0x03358040 BL 0x1C16DEC
	0x03358044 SUB X31, X31, 0x30
	0x03358048 STP X30, X21, [X31 + 0x10]
	0x0335804C STP X20, X19, [X31 + 0x20]
	0x03358050 ADRP X20, 0x1084000
	0x03358054 LDRB W8, [X20 + 0xDF4]
	0x03358058 MOV X19, X0
	0x0335805C TBNZ X8, 0x0, 0x3358080
	0x03358060 ADRP X0, 0xD9B000
	0x03358064 LDR X0, [X0 + 0xB58]
	0x03358068 BL 0x1C16CF4
	0x0335806C ADRP X0, 0xDA2000
	0x03358070 LDR X0, [X0 + 0x2F0]
	0x03358074 BL 0x1C16CF4
	0x03358078 MOVZ W8, 0x1
	0x0335807C STRB W8, [X20 + 0xDF4]
	0x03358080 LDR W21, [X19 + 0x18]
	0x03358084 ADDS W31, W21, 0x1
	0x03358088 B.EQ 0x335812C
	0x0335808C LDR X20, [X19 + 0x10]
	0x03358090 CBZ X20, 0x335814C
	0x03358094 ADRP X10, 0xDA2000
	0x03358098 LDR X8, [X20]
	0x0335809C LDR X10, [X10 + 0x2F0]
	0x033580A0 LDRH W9, [X8 + 0x12E]
	0x033580A4 LDR X1, [X10]
	0x033580A8 CBZ X9, 0x33580CC
	0x033580AC LDR X10, [X8 + 0xB0]
	0x033580B0 ADD X10, X10, 0x8
	0x033580B4 LDUR X11, [X10 - 0x8]
	0x033580B8 CMP X11, X1
	0x033580BC B.EQ 0x33580DC
	0x033580C0 SUBS X9, X9, 0x1
	0x033580C4 ADD X10, X10, 0x10
	0x033580C8 B.NE 0x33580B4
	0x033580CC MOVZ W2, 0x1
	0x033580D0 MOV X0, X20
	0x033580D4 BL 0x1C5C788
	0x033580D8 B 0x33580EC
	0x033580DC LDR W9, [X10]
	0x033580E0 ADD W9, W9, 0x1
	0x033580E4 ADD X8, X8, W9, 0x4, SXTW
	0x033580E8 ADD X0, X8, 0x138
	0x033580EC LDP X8, X1, [X0]
	0x033580F0 MOV X0, X20
	0x033580F4 BLR X8
	0x033580F8 CMP W21, W0
	0x033580FC B.GE 0x3358150
	0x03358100 ADRP X8, 0xD9B000
	0x03358104 LDR X8, [X8 + 0xB58]
	0x03358108 LDRB W9, [X19 + 0x20]
	0x0335810C ADD X1, X31, 0xC
	0x03358110 LDR X0, [X8]
	0x03358114 STRB W9, [X31 + 0xC]
	0x03358118 BL 0x1C16E04
	0x0335811C LDP X20, X19, [X31 + 0x20]
	0x03358120 LDP X30, X21, [X31 + 0x10]
	0x03358124 ADD X31, X31, 0x30
	0x03358128 RET
	0x0335812C ADRP X0, 0xD9B000
	0x03358130 LDR X0, [X0 + 0x5B0]
	0x03358134 BL 0x1C16D08
	0x03358138 BL 0x1C16F10
	0x0335813C MOV X19, X0
	0x03358140 ADRP X0, 0xDC6000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1085000
	007 Move W8, [X21+3564]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD9C000
	015 Move X0, [X0+2512]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3564], W8
	019 Move X21, [X20+16]
	020 Compare X21, 0
	021 JumpIfEqual {72}
	022 Move W22, [X20+24]
	023 Move W8, [X21+24]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X8, 0xD9C000
	026 Move X8, [X8+2512]
	027 Move W1, W22
	028 ShiftRight W1, 31
	029 And W1, W1, 0x3FFFFFFF
	030 Move X0, [X8]
	031 Call 0x1C17D6C
	032 Move X8, [X20+16]
	033 Move W4, [X20+24]
	034 Move X21, X0
	035 Move W1, W31
	036 Move X0, X8
	037 Move X2, X21
	038 Move W3, W31
	039 Move X5, X31
	040 Call Array.Copy, X0, X1, X2, X3, X4
	041 Move W22, [X20+24]
	042 Move [X20+16], X21
	043 Add W8, W22, 1
	044 Move [X20+24], W8
	045 Compare X21, 0
	046 JumpIfEqual {72}
	047 Compare X19, 0
	048 JumpIfNotEqual {53}
	049 Add W8, W22, 1
	050 Move [X20+24], W8
	051 Compare X19, 0
	052 JumpIfEqual {59}
	053 Move X8, [X21]
	054 Move X0, X19
	055 Move X1, [X8+64]
	056 Call 0x1C17E00
	057 Compare X0, 0
	058 JumpIfEqual {74}
	059 Move W8, [X21+24]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Add X8, X21, W22
	062 Move [X8+32], X19
	063 Move W8, [X20+28]
	064 Move X22, [X31+16]
	065 Move X21, [X31+24]
	066 Add W8, W8, 1
	067 Move [X20+28], W8
	068 Move X20, [X31+32]
	069 Move X19, [X31+40]
	070 Move X30, [X31+48]
	071 Return 
	072 Call 0x1C17F20
	073 Call 0x1C17F28
	074 Call 0x1C17F44
	075 Move X1, X31
	076 Call 0x1C17DEC

