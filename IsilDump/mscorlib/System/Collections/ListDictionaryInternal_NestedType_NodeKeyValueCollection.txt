Type: System.Collections.ListDictionaryInternal/NodeKeyValueCollection

Method: System.Void .ctor(System.Collections.ListDictionaryInternal list, System.Boolean isKeys)

Disassembly:
	0x03351A18 BL 0x3314A68
	0x03351A1C ADRP X0, 0xDD9000
	0x03351A20 LDR X0, [X0 + 0x330]
	0x03351A24 BL 0x1C16D08
	0x03351A28 MOV X1, X0
	0x03351A2C MOV X0, X19
	0x03351A30 BL 0x1C16DEC
	0x03351A34 STP X30, X21, [X31 - 0x20]!
	0x03351A38 STP X20, X19, [X31 + 0x10]
	0x03351A3C ADRP X21, 0x108B000
	0x03351A40 LDRB W8, [X21 + 0xDCA]
	0x03351A44 MOV X19, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X1
	006 Move X1, X31
	007 Move X20, X0
	008 And W21, W2, 1
	009 Call Object..ctor, X0
	010 Move [X20+16], X19
	011 Move [X20+24], W21
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X30, [X31+32]
	015 Move X21, [X31+40]
	016 Return 

Method: System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)

Disassembly:
	0x033523D0 LDR X8, [X0]
	0x033523D4 MOV W19, W1
	0x033523D8 MOV X22, X2
	0x033523DC LDR X9, [X8 + 0x298]
	0x033523E0 LDR X1, [X8 + 0x2A0]
	0x033523E4 BLR X9
	0x033523E8 CMP W0, W19
	0x033523EC B.LE 0x335249C
	0x033523F0 LDR X8, [X20]
	0x033523F4 MOV X0, X20
	0x033523F8 MOV X1, X22
	0x033523FC LDR X9, [X8 + 0x2B8]
	0x03352400 LDR X2, [X8 + 0x2C0]
	0x03352404 BLR X9
	0x03352408 LDR X0, [X20 + 0x10]
	0x0335240C CBZ X0, 0x3352498
	0x03352410 LDR X8, [X0]
	0x03352414 MOV W1, W19
	0x03352418 LDR X9, [X8 + 0x2E8]
	0x0335241C LDR X2, [X8 + 0x2F0]
	0x03352420 BLR X9
	0x03352424 LDR X8, [X20]
	0x03352428 MOV X21, X0
	0x0335242C MOV X0, X20
	0x03352430 MOV W1, W19
	0x03352434 LDR X9, [X8 + 0x278]
	0x03352438 LDR X4, [X8 + 0x280]
	0x0335243C MOV X2, X21
	0x03352440 MOV X3, X22
	0x03352444 BLR X9
	0x03352448 LDR X0, [X20 + 0x10]
	0x0335244C CBZ X0, 0x3352498
	0x03352450 LDR X8, [X0]
	0x03352454 MOV W1, W19
	0x03352458 MOV X2, X22
	0x0335245C LDR X9, [X8 + 0x2F8]
	0x03352460 LDR X3, [X8 + 0x300]
	0x03352464 BLR X9
	0x03352468 LDR X8, [X20]
	0x0335246C LDR X9, [X8 + 0x2C8]
	0x03352470 LDR X4, [X8 + 0x2D0]
	0x03352474 MOV X0, X20
	0x03352478 MOV W1, W19
	0x0335247C MOV X2, X21
	0x03352480 MOV X3, X22
	0x03352484 BLR X9
	0x03352488 LDP X20, X19, [X31 + 0x20]
	0x0335248C LDP X22, X21, [X31 + 0x10]
	0x03352490 LDR X30, [X31], #0x30
	0x03352494 RET
	0x03352498 BL 0x1C16F20
	0x0335249C ADRP X0, 0xDA9000
	0x033524A0 LDR X0, [X0 + 0x760]
	0x033524A4 BL 0x1C16D08
	0x033524A8 BL 0x1C16F10
	0x033524AC MOV X19, X0
	0x033524B0 ADRP X0, 0xDAC000
	0x033524B4 LDR X0, [X0 + 0x130]
	0x033524B8 BL 0x1C16D08
	0x033524BC MOV X20, X0
	0x033524C0 ADRP X0, 0xDC9000
	0x033524C4 LDR X0, [X0 + 0x660]
	0x033524C8 BL 0x1C16D08
	0x033524CC MOV X2, X0
	0x033524D0 MOV X0, X19
	0x033524D4 MOV X1, X20
	0x033524D8 MOV X3, X31
	0x033524DC BL 0x3311888
	0x033524E0 ADRP X0, 0xDD8000
	0x033524E4 LDR X0, [X0 + 0x370]
	0x033524E8 BL 0x1C16D08
	0x033524EC MOV X1, X0
	0x033524F0 MOV X0, X19
	0x033524F4 BL 0x1C16DEC
	0x033524F8 CMP W1, 0x1
	0x033524FC MOV X22, X0
	0x03352500 B.NE 0x335258C
	0x03352504 MOV X0, X22
	0x03352508 BL 0x3EB1AD0
	0x0335250C MOV X22, X0
	0x03352510 ADRP X0, 0xDA7000
	0x03352514 LDR X0, [X0 + 0xCC0]
	0x03352518 BL 0x1C16D08
	0x0335251C LDR X8, [X22]
	0x03352520 LDR X1, [X8]
	0x03352524 BL 0x1C17270
	0x03352528 TBZ X0, 0x0, 0x3352564
	0x0335252C LDR X22, [X22]
	0x03352530 BL 0x3EB1AE0
	0x03352534 LDR X20, [X20 + 0x10]
	0x03352538 MOV X0, X20
	0x0335253C BL 0x19903C0
	0x03352540 LDR X8, [X20]
	0x03352544 MOV X0, X20
	0x03352548 MOV W1, W19
	0x0335254C MOV X2, X21
	0x03352550 LDR X9, [X8 + 0x2F8]
	0x03352554 LDR X3, [X8 + 0x300]
	0x03352558 BLR X9
	0x0335255C MOV X0, X22
	0x03352560 BL 0x1C16F18
	0x03352564 MOVZ W0, 0x8
	0x03352568 BL 0x3EB1AF0
	0x0335256C LDR X8, [X22]
	0x03352570 STR X8, [X0]
	0x03352574 ADRP X1, 0xB62000
	0x03352578 ADD X1, X1, 0xE58
	0x0335257C MOV X2, X31
	0x03352580 BL 0x3EB1B00
	0x03352584 MOV X22, X0
	0x03352588 BL 0x3EB1AE0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Compare X1, 0
	009 JumpIfEqual {55}
	010 Move X20, X1
	011 Move X21, X0
	012 Move X0, X1
	013 Move X1, X31
	014 Move W19, W2
	015 Call Array.get_Rank, X0
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move TEMP, X19
	018 And TEMP, TEMP, -2147483648
	019 Compare TEMP, -2147483648
	020 JumpIfEqual {79}
	021 Move X0, X20
	022 Move X1, X31
	023 Call Array.get_Length, X0
	024 Move X8, [X21+16]
	025 Compare X8, 0
	026 JumpIfEqual {96}
	027 Move W9, [X8+28]
	028 Subtract W10, W0, W19
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X22, [X8+16]
	031 Compare X22, 0
	032 JumpIfEqual {47}
	033 Move W23, 16
	034 Move W24, 24
	035 Move W8, [X21+24]
	036 Move X0, X20
	037 Move W2, W19
	038 Move X3, X31
	039 NotImplemented "Instruction CMP not yet implemented."
	040 NotImplemented "Instruction CSEL not yet implemented."
	041 Move X1, [X22]
	042 Call Array.SetValue, X0, X1, X2
	043 Move X22, [X22+32]
	044 Add W19, W19, 1
	045 Compare X22, 0
	046 JumpIfNotEqual {35}
	047 Move X20, [X31+48]
	048 Move X19, [X31+56]
	049 Move X22, [X31+32]
	050 Move X21, [X31+40]
	051 Move X24, [X31+16]
	052 Move X23, [X31+24]
	053 Move X30, [X31+64]
	054 Return 
	055 Move X0, 0xDA7000
	056 Move X0, [X0+1320]
	057 Call 0x1C17D08
	058 Call 0x1C17F10
	059 Move X19, X0
	060 Move X0, 0xDCA000
	061 Move X0, [X0+1600]
	062 Call 0x1C17D08
	063 Move X1, X0
	064 Move X0, X19
	065 Move X2, X31
	066 Call ArgumentNullException..ctor, X0, X1
	067 Move X0, 0xDAA000
	068 Move X0, [X0+1400]
	069 Call 0x1C17D08
	070 Call 0x1C17F10
	071 Move X19, X0
	072 Move X0, 0xDCB000
	073 Move X0, [X0+776]
	074 Call 0x1C17D08
	075 Move X1, X0
	076 Move X0, X19
	077 Move X2, X31
	078 Call ArgumentException..ctor, X0, X1
	079 Move X0, 0xDAA000
	080 Move X0, [X0+1888]
	081 Call 0x1C17D08
	082 Call 0x1C17F10
	083 Move X19, X0
	084 Move X0, 0xDAD000
	085 Move X0, [X0+304]
	086 Call 0x1C17D08
	087 Move X20, X0
	088 Move X0, 0xDCA000
	089 Move X0, [X0+1648]
	090 Call 0x1C17D08
	091 Move X2, X0
	092 Move X0, X19
	093 Move X1, X20
	094 Move X3, X31
	095 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	096 Call 0x1C17F20
	097 Move X0, 0xDAA000
	098 Move X0, [X0+1400]
	099 Call 0x1C17D08
	100 Call 0x1C17F10
	101 Move X19, X0
	102 Move X0, 0xDCA000
	103 Move X0, [X0+1632]
	104 Call 0x1C17D08
	105 Move X20, X0
	106 Move X0, 0xDAD000
	107 Move X0, [X0+304]
	108 Call 0x1C17D08
	109 Move X2, X0
	110 Move X0, X19
	111 Move X1, X20
	112 Move X3, X31
	113 Call ArgumentException..ctor, X0, X1, X2
	114 Move X0, 0xDD9000
	115 Move X0, [X0+776]
	116 Call 0x1C17D08
	117 Move X1, X0
	118 Move X0, X19
	119 Call 0x1C17DEC

Method: System.Int32 System.Collections.ICollection.get_Count()

Disassembly:
	0x0335258C MOV X0, X22
	0x03352590 BL 0x1D2C690
	0x03352594 BL 0x1990590
	0x03352598 STR X30, [X31 - 0x10]!
	0x0335259C LDR X0, [X0 + 0x10]
	0x033525A0 CBZ X0, 0x33525B8
	0x033525A4 LDR X8, [X0]
	0x033525A8 LDR X3, [X8 + 0x348]
	0x033525AC LDR X2, [X8 + 0x350]
	0x033525B0 LDR X30, [X31], #0x10
	0x033525B4 BR X3
	0x033525B8 BL 0x1C16F20
	0x033525BC STP X30, X21, [X31 - 0x20]!
	0x033525C0 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {16}
	005 Move X8, [X8+16]
	006 Compare X8, 0
	007 JumpIfEqual {13}
	008 Move W0, W31
	009 Move X8, [X8+32]
	010 Add W0, W0, 1
	011 Compare X8, 0
	012 JumpIfNotEqual {9}
	013 Move W0, W31
	014 Move X30, [X31+16]
	015 Return X0
	016 Call 0x1C17F20

Method: System.Boolean System.Collections.ICollection.get_IsSynchronized()

Disassembly:
	0x033525C4 LDR X8, [X0]
	0x033525C8 MOV X19, X0

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Object System.Collections.ICollection.get_SyncRoot()

Disassembly:
	0x033525CC MOV X21, X1
	0x033525D0 LDR X9, [X8 + 0x2B8]
	0x033525D4 LDR X2, [X8 + 0x2C0]
	0x033525D8 BLR X9
	0x033525DC LDR X0, [X19 + 0x10]
	0x033525E0 CBZ X0, 0x335265C

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X30, [X31+16]
	006 Call ListDictionaryInternal.get_SyncRoot, X0
	007 Return X0
	008 Call 0x1C17F20

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x033525E4 LDR X8, [X0]
	0x033525E8 LDR X9, [X8 + 0x298]
	0x033525EC LDR X1, [X8 + 0x2A0]
	0x033525F0 BLR X9
	0x033525F4 LDR X8, [X19]
	0x033525F8 MOV W1, W0
	0x033525FC MOV X0, X19
	0x03352600 MOV X2, X21
	0x03352604 LDR X9, [X8 + 0x288]
	0x03352608 LDR X3, [X8 + 0x290]
	0x0335260C BLR X9
	0x03352610 LDR X0, [X19 + 0x10]
	0x03352614 CBZ X0, 0x335265C
	0x03352618 LDR X8, [X0]
	0x0335261C MOV X1, X21
	0x03352620 LDR X9, [X8 + 0x308]
	0x03352624 LDR X2, [X8 + 0x310]
	0x03352628 BLR X9
	0x0335262C LDR X8, [X19]
	0x03352630 MOV W20, W0
	0x03352634 LDR X9, [X8 + 0x2D8]
	0x03352638 LDR X3, [X8 + 0x2E0]
	0x0335263C MOV X0, X19
	0x03352640 MOV W1, W20
	0x03352644 MOV X2, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x108B000
	006 Move X21, 0xDD9000
	007 Move W8, [X20+3528]
	008 Move X21, [X21+784]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDD9000
	015 Move X0, [X0+784]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3528], W8
	019 Move X0, [X21]
	020 Move X20, [X19+16]
	021 Move W19, [X19+24]
	022 Call 0x1C17F10
	023 Move X1, X20
	024 Move W2, W19
	025 Move X21, X0
	026 Call NodeKeyValueEnumerator..ctor, X0, X1, X2
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X0, X21
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0

