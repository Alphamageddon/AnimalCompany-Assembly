Type: System.Collections.Hashtable/ValueCollection

Method: System.Void .ctor(System.Collections.Hashtable hashtable)

Disassembly:
	0x0335C7C8 MOV X0, X19
	0x0335C7CC MOV X2, X31
	0x0335C7D0 BL 0x329F100
	0x0335C7D4 ADRP X0, 0xDCE000
	0x0335C7D8 LDR X0, [X0 + 0x7A8]
	0x0335C7DC BL 0x1C16D08
	0x0335C7E0 MOV X1, X0
	0x0335C7E4 MOV X0, X19
	0x0335C7E8 BL 0x1C16DEC
	0x0335C7EC BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], X19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Void CopyTo(System.Array array, System.Int32 arrayIndex)

Disassembly:
	0x0335DB38 MOV X1, X0
	0x0335DB3C MOV X0, X19
	0x0335DB40 BL 0x1C16DEC
	0x0335DB44 B 0x334F7E0
	0x0335DB48 RET
	0x0335DB4C RET
	0x0335DB50 RET
	0x0335DB54 STR X30, [X31 - 0x20]!
	0x0335DB58 STP X20, X19, [X31 + 0x10]
	0x0335DB5C ADRP X19, 0x107F000
	0x0335DB60 ADRP X20, 0xDC1000
	0x0335DB64 LDRB W8, [X19 + 0xE1D]
	0x0335DB68 LDR X20, [X20 + 0x2B0]
	0x0335DB6C TBNZ X8, 0x0, 0x335DB84
	0x0335DB70 ADRP X0, 0xDC1000
	0x0335DB74 LDR X0, [X0 + 0x2B0]
	0x0335DB78 BL 0x1C16CF4
	0x0335DB7C MOVZ W8, 0x1
	0x0335DB80 STRB W8, [X19 + 0xE1D]
	0x0335DB84 LDR X0, [X20]
	0x0335DB88 BL 0x1C16F10
	0x0335DB8C MOV X19, X0
	0x0335DB90 BL 0x334F7E0
	0x0335DB94 LDR X8, [X20]
	0x0335DB98 LDR X8, [X8 + 0xB8]
	0x0335DB9C STR X19, [X8]
	0x0335DBA0 LDP X20, X19, [X31 + 0x10]
	0x0335DBA4 LDR X30, [X31], #0x20
	0x0335DBA8 RET
	0x0335DBAC STP X30, X21, [X31 - 0x20]!
	0x0335DBB0 STP X20, X19, [X31 + 0x10]
	0x0335DBB4 ADRP X20, 0x107F000
	0x0335DBB8 ADRP X21, 0xDCD000
	0x0335DBBC LDRB W8, [X20 + 0xE1E]
	0x0335DBC0 LDR X21, [X21 + 0x810]
	0x0335DBC4 MOV X19, X0
	0x0335DBC8 TBNZ X8, 0x0, 0x335DBE0
	0x0335DBCC ADRP X0, 0xDCD000
	0x0335DBD0 LDR X0, [X0 + 0x810]
	0x0335DBD4 BL 0x1C16CF4
	0x0335DBD8 MOVZ W8, 0x1
	0x0335DBDC STRB W8, [X20 + 0xE1E]
	0x0335DBE0 LDR X1, [X21]
	0x0335DBE4 MOV X0, X19
	0x0335DBE8 MOV X2, X31
	0x0335DBEC BL 0x338C8D8
	0x0335DBF0 MOVZ W8, 0x1577
	0x0335DBF4 MOVK W8, 0x80130000
	0x0335DBF8 STR W8, [X19 + 0x60]
	0x0335DBFC LDP X20, X19, [X31 + 0x10]
	0x0335DC00 LDP X30, X21, [X31], #0x20
	0x0335DC04 RET
	0x0335DC08 STP X30, X19, [X31 - 0x10]!
	0x0335DC0C MOV X2, X31
	0x0335DC10 MOV X19, X0
	0x0335DC14 BL 0x338C8D8
	0x0335DC18 MOVZ W8, 0x1577
	0x0335DC1C MOVK W8, 0x80130000
	0x0335DC20 STR W8, [X19 + 0x60]
	0x0335DC24 LDP X30, X19, [X31], #0x10
	0x0335DC28 RET
	0x0335DC2C MOV X4, X31
	0x0335DC30 B 0x338CA74
	0x0335DC34 STR X30, [X31 - 0x30]!
	0x0335DC38 STP X22, X21, [X31 + 0x10]
	0x0335DC3C STP X20, X19, [X31 + 0x20]
	0x0335DC40 ADRP X20, 0x107F000
	0x0335DC44 LDRB W8, [X20 + 0xE1F]
	0x0335DC48 MOV X19, X1
	0x0335DC4C MOV X21, X0
	0x0335DC50 TBNZ X8, 0x0, 0x335DC68
	0x0335DC54 ADRP X0, 0xD96000
	0x0335DC58 LDR X0, [X0 + 0x838]
	0x0335DC5C BL 0x1C16CF4
	0x0335DC60 MOVZ W8, 0x1
	0x0335DC64 STRB W8, [X20 + 0xE1F]
	0x0335DC68 MOVZ W0, 0x10
	0x0335DC6C MOV X1, X31
	0x0335DC70 BL 0x3235A9C
	0x0335DC74 CBZ X0, 0x335DCF0
	0x0335DC78 ADRP X22, 0xD96000
	0x0335DC7C LDR X22, [X22 + 0x838]
	0x0335DC80 MOVZ W1, 0x5B
	0x0335DC84 MOV X2, X31
	0x0335DC88 MOV X20, X0
	0x0335DC8C BL 0x3233D30
	0x0335DC90 CBZ X21, 0x335DCA4
	0x0335DC94 MOV X0, X20
	0x0335DC98 MOV X1, X21
	0x0335DC9C MOV X2, X31
	0x0335DCA0 BL 0x3233F90
	0x0335DCA4 LDR X1, [X22]
	0x0335DCA8 MOV X0, X20
	0x0335DCAC MOV X2, X31
	0x0335DCB0 BL 0x32333E0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X1, 0
	006 JumpIfEqual {36}
	007 Move X20, X1
	008 Move X21, X0
	009 Move X0, X1
	010 Move X1, X31
	011 Move W19, W2
	012 Call Array.get_Rank, X0
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move TEMP, X19
	015 And TEMP, TEMP, -2147483648
	016 Compare TEMP, -2147483648
	017 JumpIfEqual {65}
	018 Move X0, X20
	019 Move X1, X31
	020 Call Array.get_Length, X0
	021 Move X8, [X21+16]
	022 Compare X8, 0
	023 JumpIfEqual {82}
	024 Move W9, [X8+24]
	025 Subtract W10, W0, W19
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X1, X20
	028 Move W2, W19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X0, X8
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Call Hashtable.CopyValues, X0, X1, X2
	035 Return 
	036 Move X0, 0xD9C000
	037 Move X0, [X0+1320]
	038 Call 0x1C17D08
	039 Call 0x1C17F10
	040 Move X19, X0
	041 Move X0, 0xDBF000
	042 Move X0, [X0+1600]
	043 Call 0x1C17D08
	044 Move X1, X0
	045 Move X0, X19
	046 Move X2, X31
	047 Call ArgumentNullException..ctor, X0, X1
	048 Move X0, 0xD9F000
	049 Move X0, [X0+1400]
	050 Call 0x1C17D08
	051 Call 0x1C17F10
	052 Move X19, X0
	053 Move X0, 0xDC0000
	054 Move X0, [X0+776]
	055 Call 0x1C17D08
	056 Move X20, X0
	057 Move X0, 0xDBF000
	058 Move X0, [X0+1600]
	059 Call 0x1C17D08
	060 Move X2, X0
	061 Move X0, X19
	062 Move X1, X20
	063 Move X3, X31
	064 Call ArgumentException..ctor, X0, X1, X2
	065 Move X0, 0xD9F000
	066 Move X0, [X0+1888]
	067 Call 0x1C17D08
	068 Call 0x1C17F10
	069 Move X19, X0
	070 Move X0, 0xDC1000
	071 Move X0, [X0+688]
	072 Call 0x1C17D08
	073 Move X20, X0
	074 Move X0, 0xDBF000
	075 Move X0, [X0+1648]
	076 Call 0x1C17D08
	077 Move X2, X0
	078 Move X0, X19
	079 Move X1, X20
	080 Move X3, X31
	081 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	082 Call 0x1C17F20
	083 Move X0, 0xD9F000
	084 Move X0, [X0+1400]
	085 Call 0x1C17D08
	086 Call 0x1C17F10
	087 Move X19, X0
	088 Move X0, 0xDC0000
	089 Move X0, [X0+792]
	090 Call 0x1C17D08
	091 Move X1, X0
	092 Move X0, X19
	093 Move X2, X31
	094 Call ArgumentException..ctor, X0, X1
	095 Move X0, 0xDCE000
	096 Move X0, [X0+1984]
	097 Call 0x1C17D08
	098 Move X1, X0
	099 Move X0, X19
	100 Call 0x1C17DEC

Method: System.Collections.IEnumerator GetEnumerator()

Disassembly:
	0x0335DCB4 CBZ X19, 0x335DCC8
	0x0335DCB8 MOV X0, X20
	0x0335DCBC MOV X1, X19
	0x0335DCC0 MOV X2, X31
	0x0335DCC4 BL 0x3233F90
	0x0335DCC8 MOVZ W1, 0x5D
	0x0335DCCC MOV X0, X20
	0x0335DCD0 MOV X2, X31
	0x0335DCD4 BL 0x3233D30
	0x0335DCD8 MOV X0, X20
	0x0335DCDC LDP X20, X19, [X31 + 0x20]
	0x0335DCE0 LDP X22, X21, [X31 + 0x10]
	0x0335DCE4 MOV X1, X31
	0x0335DCE8 LDR X30, [X31], #0x30
	0x0335DCEC B 0x3235BE8
	0x0335DCF0 BL 0x1C16F20
	0x0335DCF4 CMP W0, 0x1
	0x0335DCF8 B.LT 0x335DD10
	0x0335DCFC MOV W8, W31
	0x0335DD00 UBFM W0, W0, 0x1, 0x1F
	0x0335DD04 ADD W8, W8, 0x1
	0x0335DD08 CBNZ W0, 0x335DD00
	0x0335DD0C B 0x335DD14
	0x0335DD10 MOV W8, W31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1080000
	006 Move X20, 0xDCE000
	007 Move W8, [X21+3610]
	008 Move X20, [X20+1816]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDCE000
	015 Move X0, [X0+1816]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3610], W8
	019 Move X0, [X20]
	020 Move X19, [X19+16]
	021 Call 0x1C17F10
	022 Move W2, 2
	023 Move X1, X19
	024 Move X20, X0
	025 Call HashtableEnumerator..ctor, X0, X1, X2
	026 Move X0, X20
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.Boolean get_IsSynchronized()

Disassembly:
	0x0335DD14 MOV W0, W8
	0x0335DD18 RET
	0x0335DD1C STR X30, [X31 - 0x20]!
	0x0335DD20 STP X20, X19, [X31 + 0x10]
	0x0335DD24 MOV X19, X0
	0x0335DD28 ADRP X0, 0xDCD000
	0x0335DD2C LDR X0, [X0 + 0x818]
	0x0335DD30 BL 0x1C16D08
	0x0335DD34 MOV X1, X19

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+792]
	007 Move X1, [X8+800]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Object get_SyncRoot()

Disassembly:
	0x0335DD38 MOV X2, X31
	0x0335DD3C BL 0x32094D4
	0x0335DD40 MOV X19, X0
	0x0335DD44 ADRP X0, 0xD9E000
	0x0335DD48 LDR X0, [X0 + 0x578]
	0x0335DD4C BL 0x1C16D08
	0x0335DD50 BL 0x1C16F10
	0x0335DD54 MOV X1, X19
	0x0335DD58 MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+872]
	007 Move X1, [X8+880]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Int32 get_Count()

Disassembly:
	0x0335DD5C MOV X20, X0
	0x0335DD60 BL 0x3314A68
	0x0335DD64 ADRP X0, 0xDCD000
	0x0335DD68 LDR X0, [X0 + 0x820]
	0x0335DD6C BL 0x1C16D08
	0x0335DD70 MOV X1, X0
	0x0335DD74 MOV X0, X20

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

