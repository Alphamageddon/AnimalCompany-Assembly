Type: System.GC

Method: System.Int32 GetMaxGeneration()

Disassembly:
	0x033B4DCC BL 0x1C16D08

ISIL:
	001 Call 0x1C337E8
	002 Return X0

Method: System.Void InternalCollect(System.Int32 generation)

Disassembly:
	0x033B4DD0 MOV X1, X0

ISIL:
	001 Call 0x1C3AE04
	002 Return 

Method: System.Void register_ephemeron_array(System.Runtime.CompilerServices.Ephemeron[] array)

Disassembly:
	0x033B4DD4 MOV X0, X19

ISIL:
	001 Call 0x1C3AE08
	002 Return 

Method: System.Object get_ephemeron_tombstone()

Disassembly:
	0x033B4DD8 BL 0x1C16DEC

ISIL:
	001 Call 0x1C3ADB0
	002 Return X0

Method: System.Void GetMemoryInfo(out System.UInt32 highMemLoadThreshold, out System.UInt64 totalPhysicalMem, out System.UInt32 lastRecordedMemLoad, out System.UIntPtr lastRecordedHeapSize, out System.UIntPtr lastRecordedFragmentation)

Disassembly:
	0x033B4DDC SUB X31, X31, 0xB0
	0x033B4DE0 STP X29, X30, [X31 + 0x50]
	0x033B4DE4 STP X28, X27, [X31 + 0x60]
	0x033B4DE8 STP X26, X25, [X31 + 0x70]
	0x033B4DEC STP X24, X23, [X31 + 0x80]
	0x033B4DF0 STP X22, X21, [X31 + 0x90]
	0x033B4DF4 STP X20, X19, [X31 + 0xA0]

ISIL:
	001 Move TEMP, 0
	002 Not TEMP
	003 Move X8, TEMP
	004 Move [X0], W31
	005 Move [X1], X8
	006 Move [X2], W31
	007 Move [X3], X31
	008 Move [X4], X31
	009 Return 

Method: System.Void Collect()

Disassembly:
	0x033B4DF8 ADRP X21, 0x1029000
	0x033B4DFC STR X8, [X31 + 0x8]
	0x033B4E00 LDRB W8, [X21 + 0x1C8]
	0x033B4E04 MOV W24, W6
	0x033B4E08 MOV W19, W5
	0x033B4E0C MOV X20, X4
	0x033B4E10 MOV W22, W3
	0x033B4E14 MOV W23, W2
	0x033B4E18 MOV X25, X0
	0x033B4E1C STR X1, [X31 + 0x48]
	0x033B4E20 TBNZ X8, 0x0, 0x33B4E50
	0x033B4E24 ADRP X0, 0xD78000
	0x033B4E28 LDR X0, [X0 + 0x70]
	0x033B4E2C BL 0x1C16CF4
	0x033B4E30 ADRP X0, 0xD78000
	0x033B4E34 LDR X0, [X0 + 0x78]
	0x033B4E38 BL 0x1C16CF4
	0x033B4E3C ADRP X0, 0xD68000
	0x033B4E40 LDR X0, [X0 + 0x4E8]
	0x033B4E44 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x102A000
	005 Move X20, 0xD47000
	006 Move W8, [X19+441]
	007 Move X20, [X20+3088]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xD47000
	013 Move X0, [X0+3088]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+441], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Call GC.get_MaxGeneration
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Call 0x1C3AE04
	027 Return 

Method: System.Void KeepAlive(System.Object obj)

Disassembly:
	0x033B4E94 BL 0x33B4524

ISIL:
	001 Return 

Method: System.Int32 get_MaxGeneration()

Disassembly:
	0x033B4E48 MOVZ W8, 0x1
	0x033B4E4C STRB W8, [X21 + 0x1C8]
	0x033B4E50 STRB W31, [X31 + 0x44]
	0x033B4E54 STRB W31, [X31 + 0x40]
	0x033B4E58 STR W31, [X31 + 0x3C]
	0x033B4E5C ADRP X8, 0xD68000
	0x033B4E60 LDR X8, [X8 + 0x4E8]
	0x033B4E64 STP X31, X31, [X31 + 0x20]
	0x033B4E68 STR X31, [X31 + 0x30]
	0x033B4E6C LDR X0, [X8]
	0x033B4E70 LDR W8, [X0 + 0xE0]
	0x033B4E74 CBNZ W8, 0x33B4E7C
	0x033B4E78 BL 0x1C16DFC
	0x033B4E7C AND W2, W24, 0x1
	0x033B4E80 ADD X1, X31, 0x48
	0x033B4E84 ADD X3, X31, 0x44
	0x033B4E88 ADD X4, X31, 0x40
	0x033B4E8C ADD X5, X31, 0x3C
	0x033B4E90 MOV W0, W23

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x102A000
	005 Move X20, 0xD47000
	006 Move W8, [X19+442]
	007 Move X20, [X20+3088]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xD47000
	013 Move X0, [X0+3088]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+442], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Call 0x1C337E8
	026 Return X0

Method: System.Void _SuppressFinalize(System.Object o)

Disassembly:
	0x033B4E98 LDR X1, [X31 + 0x48]

ISIL:
	001 Call 0x1C3ADE4
	002 Return 

Method: System.Void SuppressFinalize(System.Object obj)

Disassembly:
	0x033B4E9C LDR W3, [X31 + 0x3C]
	0x033B4EA0 MOV X0, X25
	0x033B4EA4 MOV W2, W23
	0x033B4EA8 MOV X4, X25
	0x033B4EAC STR X1, [X31 + 0x18]
	0x033B4EB0 BL 0x33B5038
	0x033B4EB4 CBZ X0, 0x33B5034
	0x033B4EB8 ADRP X8, 0xD78000
	0x033B4EBC LDR X8, [X8 + 0x78]
	0x033B4EC0 LDR W1, [X0 + 0x18]
	0x033B4EC4 MOV X25, X0
	0x033B4EC8 ADD X0, X31, 0x20
	0x033B4ECC LDR X2, [X8]
	0x033B4ED0 BL 0x2EF1B28
	0x033B4ED4 LDR X8, [X25 + 0x18]
	0x033B4ED8 CMP W8, 0x1
	0x033B4EDC B.LT 0x33B4FFC
	0x033B4EE0 LDRB W29, [X31 + 0x44]
	0x033B4EE4 LDRB W9, [X31 + 0x40]
	0x033B4EE8 MOV X28, X31
	0x033B4EEC AND X8, X8, 0x0
	0x033B4EF0 ADD X21, X25, 0x20
	0x033B4EF4 STR W9, [X31 + 0x14]
	0x033B4EF8 CMP X28, W8, UXTW
	0x033B4EFC B.CS 0x33B5030
	0x033B4F00 LDR X26, [X21, X28, LSL #3]
	0x033B4F04 ADDS W31, W19, 0x1
	0x033B4F08 B.EQ 0x33B4F6C
	0x033B4F0C CBZ X26, 0x33B5034
	0x033B4F10 LDR X8, [X26]
	0x033B4F14 CMP W19, 0x1
	0x033B4F18 CSET W24, LT
	0x033B4F1C CMP W19, 0x0
	0x033B4F20 LDR X9, [X8 + 0x2D8]
	0x033B4F24 LDR X1, [X8 + 0x2E0]
	0x033B4F28 MOV X0, X26
	0x033B4F2C CSET W27, EQ
	0x033B4F30 BLR X9
	0x033B4F34 ORR W9, W24, W0, 0x0
	0x033B4F38 AND W8, W27, W0, 0x0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x102A000
	005 Move W8, [X20+443]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xD47000
	012 Move X0, [X0+3088]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+443], W8
	016 Compare X19, 0
	017 JumpIfEqual {31}
	018 Move X8, 0xD47000
	019 Move X8, [X8+3088]
	020 Move X0, [X8]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Call 0x1C3ADE4
	030 Return 
	031 Move X0, 0xD45000
	032 Move X0, [X0+1320]
	033 Call 0x1C17D08
	034 Call 0x1C17F10
	035 Move X19, X0
	036 Move X0, 0xD4B000
	037 Move X0, [X0+2216]
	038 Call 0x1C17D08
	039 Move X1, X0
	040 Move X0, X19
	041 Move X2, X31
	042 Call ArgumentNullException..ctor, X0, X1
	043 Move X0, 0xD79000
	044 Move X0, [X0+48]
	045 Call 0x1C17D08
	046 Move X1, X0
	047 Move X0, X19
	048 Call 0x1C17DEC

Method: System.Void _ReRegisterForFinalize(System.Object o)

Disassembly:
	0x033B4F3C AND W9, W9, 0x1

ISIL:
	001 Call 0x1C3ADC4
	002 Return 

Method: System.Void ReRegisterForFinalize(System.Object obj)

Disassembly:
	0x033B4F40 CMP W8, W9
	0x033B4F44 B.EQ 0x33B4FEC
	0x033B4F48 LDR X8, [X26]
	0x033B4F4C MOV X0, X26
	0x033B4F50 LDR X9, [X8 + 0x2F8]
	0x033B4F54 LDR X1, [X8 + 0x300]
	0x033B4F58 BLR X9
	0x033B4F5C CBZ X0, 0x33B5034
	0x033B4F60 LDR W8, [X0 + 0x18]
	0x033B4F64 CMP W8, W19
	0x033B4F68 B.NE 0x33B4FEC
	0x033B4F6C ADRP X8, 0xD68000
	0x033B4F70 LDR X8, [X8 + 0x4E8]
	0x033B4F74 LDR X0, [X8]
	0x033B4F78 LDR W8, [X0 + 0xE0]
	0x033B4F7C CBNZ W8, 0x33B4F84
	0x033B4F80 BL 0x1C16DFC
	0x033B4F84 MOV X0, X26
	0x033B4F88 MOV W1, W23
	0x033B4F8C MOV W2, W22
	0x033B4F90 MOV X3, X20
	0x033B4F94 BL 0x33B4A34
	0x033B4F98 TBZ X0, 0x0, 0x33B4FEC
	0x033B4F9C CBZ W29, 0x33B4FD4
	0x033B4FA0 ADRP X8, 0xD68000
	0x033B4FA4 LDR X8, [X8 + 0x4E8]
	0x033B4FA8 LDR X0, [X8]
	0x033B4FAC LDR W8, [X0 + 0xE0]
	0x033B4FB0 CBNZ W8, 0x33B4FB8
	0x033B4FB4 BL 0x1C16DFC
	0x033B4FB8 LDR W8, [X31 + 0x14]
	0x033B4FBC LDR X1, [X31 + 0x18]
	0x033B4FC0 MOV X0, X26
	0x033B4FC4 CMP W8, 0x0
	0x033B4FC8 CSET W2, NE
	0x033B4FCC BL 0x33B46D0
	0x033B4FD0 TBZ X0, 0x0, 0x33B4FEC
	0x033B4FD4 ADRP X8, 0xD78000
	0x033B4FD8 LDR X8, [X8 + 0x70]
	0x033B4FDC ADD X0, X31, 0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x102A000
	005 Move W8, [X20+444]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xD47000
	012 Move X0, [X0+3088]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+444], W8
	016 Compare X19, 0
	017 JumpIfEqual {31}
	018 Move X8, 0xD47000
	019 Move X8, [X8+3088]
	020 Move X0, [X8]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Call 0x1C3ADC4
	030 Return 
	031 Move X0, 0xD45000
	032 Move X0, [X0+1320]
	033 Call 0x1C17D08
	034 Call 0x1C17F10
	035 Move X19, X0
	036 Move X0, 0xD4B000
	037 Move X0, [X0+2216]
	038 Call 0x1C17D08
	039 Move X1, X0
	040 Move X0, X19
	041 Move X2, X31
	042 Call ArgumentNullException..ctor, X0, X1
	043 Move X0, 0xD79000
	044 Move X0, [X0+56]
	045 Call 0x1C17D08
	046 Move X1, X0
	047 Move X0, X19
	048 Call 0x1C17DEC

Method: System.Void .cctor()

Disassembly:
	0x033B4FE0 MOV X1, X26
	0x033B4FE4 LDR X2, [X8]
	0x033B4FE8 BL 0x2EF1D14
	0x033B4FEC LDR W8, [X25 + 0x18]
	0x033B4FF0 ADD X28, X28, 0x1
	0x033B4FF4 CMP X28, W8, SXTW
	0x033B4FF8 B.LT 0x33B4EF8
	0x033B4FFC LDR X8, [X31 + 0x30]
	0x033B5000 LDR V0, [X31 + 0x2]
	0x033B5004 LDR X9, [X31 + 0x8]
	0x033B5008 LDP X20, X19, [X31 + 0xA0]
	0x033B500C LDP X22, X21, [X31 + 0x90]
	0x033B5010 LDP X24, X23, [X31 + 0x80]
	0x033B5014 LDP X26, X25, [X31 + 0x70]
	0x033B5018 LDP X28, X27, [X31 + 0x60]
	0x033B501C LDP X29, X30, [X31 + 0x50]
	0x033B5020 STR X8, [X9 + 0x10]
	0x033B5024 STR V0, [X9]
	0x033B5028 ADD X31, X31, 0xB0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x102A000
	005 Move X19, 0xD47000
	006 Move W8, [X20+445]
	007 Move X19, [X19+3088]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xD47000
	013 Move X0, [X0+3088]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+445], W8
	017 Call 0x1C3ADB0
	018 Move X8, [X19]
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X8, [X8+184]
	022 Move [X8], X0
	023 Move X30, [X31+32]
	024 Return 

