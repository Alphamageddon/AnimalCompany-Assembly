Type: System.Threading.Thread

Method: System.Void .ctor(System.Threading.ThreadStart start)

Disassembly:
	0x033E77F0 MOV X1, X31
	0x033E77F4 BL 0x33BDD8C
	0x033E77F8 LDR X0, [X20]
	0x033E77FC BL 0x1C16F10
	0x033E7800 MOV X20, X0
	0x033E7804 BL 0x33E7824
	0x033E7808 BL 0x1C16D44
	0x033E780C STR X20, [X19 + 0x10]
	0x033E7810 BL 0x1C16D44
	0x033E7814 STR X20, [X19 + 0x18]
	0x033E7818 LDP X20, X19, [X31 + 0x10]
	0x033E781C LDP X30, X21, [X31], #0x20
	0x033E7820 RET
	0x033E7824 STP X30, X21, [X31 - 0x20]!
	0x033E7828 STP X20, X19, [X31 + 0x10]
	0x033E782C ADRP X21, 0xFF6000
	0x033E7830 ADRP X20, 0xD46000
	0x033E7834 LDRB W8, [X21 + 0x3F8]
	0x033E7838 LDR X20, [X20 + 0x458]
	0x033E783C MOV X19, X0
	0x033E7840 TBNZ X8, 0x0, 0x33E7858
	0x033E7844 ADRP X0, 0xD46000
	0x033E7848 LDR X0, [X0 + 0x458]
	0x033E784C BL 0x1C16CF4
	0x033E7850 MOVZ W8, 0x1
	0x033E7854 STRB W8, [X21 + 0x3F8]
	0x033E7858 MOV X0, X19
	0x033E785C MOV X1, X31
	0x033E7860 BL 0x33BDD8C
	0x033E7864 LDR X0, [X20]
	0x033E7868 MOVZ W1, 0x100

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X1, X31
	006 Move X20, X0
	007 Call CriticalFinalizerObject..ctor, X0
	008 Compare X19, 0
	009 JumpIfEqual {16}
	010 Move X0, X20
	011 Move X1, X19
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move W2, W31
	015 Move X30, [X31+32]
	016 Move X0, 0xD12000
	017 Move X0, [X0+1320]
	018 Call 0x1C17D08
	019 Call 0x1C17F10
	020 Move X19, X0
	021 Move X0, 0xD47000
	022 Move X0, [X0+976]
	023 Call 0x1C17D08
	024 Move X1, X0
	025 Move X0, X19
	026 Move X2, X31
	027 Call ArgumentNullException..ctor, X0, X1
	028 Move X0, 0xD47000
	029 Move X0, [X0+984]
	030 Call 0x1C17D08
	031 Move X1, X0
	032 Move X0, X19
	033 Call 0x1C17DEC

Method: System.Void .ctor(System.Threading.ParameterizedThreadStart start, System.Int32 maxStackSize)

Disassembly:
	0x033E7984 MOV X1, X31
	0x033E7988 BL 0x33E3CC4
	0x033E798C LDR X8, [X21]
	0x033E7990 MOV W21, W0
	0x033E7994 MOV X0, X8
	0x033E7998 BL 0x1C16F10
	0x033E799C MOV W1, W21
	0x033E79A0 MOV X2, X31
	0x033E79A4 MOV X22, X0
	0x033E79A8 BL 0x338E5E8
	0x033E79AC MOV X0, X19
	0x033E79B0 MOV X1, X31
	0x033E79B4 STR X22, [X19 + 0x20]
	0x033E79B8 BL 0x33BDD8C
	0x033E79BC STR X20, [X19 + 0x10]
	0x033E79C0 LDR X0, [X24]
	0x033E79C4 BL 0x1C16F10
	0x033E79C8 MOV X20, X0
	0x033E79CC BL 0x33E9310
	0x033E79D0 STR X20, [X19 + 0x18]
	0x033E79D4 LDR X0, [X23]
	0x033E79D8 LDR W8, [X0 + 0xE0]
	0x033E79DC CBNZ W8, 0x33E79E8
	0x033E79E0 BL 0x1C16DFC
	0x033E79E4 LDR X0, [X23]
	0x033E79E8 LDR X8, [X0 + 0xB8]
	0x033E79EC LDR X0, [X8]
	0x033E79F0 CBZ X0, 0x33E7A18
	0x033E79F4 ADRP X8, 0xD46000
	0x033E79F8 LDR X8, [X8 + 0x468]
	0x033E79FC LDR X1, [X19 + 0x18]
	0x033E7A00 LDP X20, X19, [X31 + 0x30]
	0x033E7A04 LDP X22, X21, [X31 + 0x20]
	0x033E7A08 LDR X2, [X8]
	0x033E7A0C LDP X24, X23, [X31 + 0x10]
	0x033E7A10 LDR X30, [X31], #0x40
	0x033E7A14 B 0x25FF718
	0x033E7A18 BL 0x1C16F20
	0x033E7A1C STP X30, X21, [X31 - 0x20]!
	0x033E7A20 STP X20, X19, [X31 + 0x10]
	0x033E7A24 ADRP X20, 0xFF6000
	0x033E7A28 LDRB W8, [X20 + 0x3ED]
	0x033E7A2C MOV X19, X0
	0x033E7A30 TBNZ X8, 0x0, 0x33E7A48
	0x033E7A34 ADRP X0, 0xD46000
	0x033E7A38 LDR X0, [X0 + 0x440]
	0x033E7A3C BL 0x1C16CF4
	0x033E7A40 MOVZ W8, 0x1
	0x033E7A44 STRB W8, [X20 + 0x3ED]
	0x033E7A48 ADRP X21, 0xD46000
	0x033E7A4C LDR W20, [X19 + 0x20]!
	0x033E7A50 LDR X21, [X21 + 0x440]
	0x033E7A54 BL 0x1C16D44
	0x033E7A58 LDR X0, [X21]
	0x033E7A5C LDR W8, [X0 + 0xE0]
	0x033E7A60 CBNZ W8, 0x33E7A6C
	0x033E7A64 BL 0x1C16DFC
	0x033E7A68 LDR X0, [X21]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, X1
	006 Move X1, X31
	007 Move W19, W2
	008 Move X21, X0
	009 Call CriticalFinalizerObject..ctor, X0
	010 Compare X20, 0
	011 JumpIfEqual {25}
	012 Move TEMP, X19
	013 And TEMP, TEMP, -2147483648
	014 Compare TEMP, -2147483648
	015 JumpIfEqual {43}
	016 Move X1, X20
	017 Move W2, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X0, X21
	021 Move X30, [X31+32]
	022 Move X21, [X31+40]
	023 Call Thread.SetStartHelper, X0, X1, X2
	024 Return 
	025 Move X0, 0xD12000
	026 Move X0, [X0+1320]
	027 Call 0x1C17D08
	028 Call 0x1C17F10
	029 Move X19, X0
	030 Move X0, 0xD47000
	031 Move X0, [X0+976]
	032 Call 0x1C17D08
	033 Move X1, X0
	034 Move X0, X19
	035 Move X2, X31
	036 Call ArgumentNullException..ctor, X0, X1
	037 Move X0, 0xD47000
	038 Move X0, [X0+1008]
	039 Call 0x1C17D08
	040 Move X1, X0
	041 Move X0, X19
	042 Call 0x1C17DEC
	043 Move X0, 0xD35000
	044 Move X0, [X0+1648]
	045 Call 0x1C17D08
	046 Move X1, X31
	047 Call Environment.GetResourceString, X0
	048 Move X19, X0
	049 Move X0, 0xD15000
	050 Move X0, [X0+1888]
	051 Call 0x1C17D08
	052 Call 0x1C17F10
	053 Move X20, X0
	054 Move X0, 0xD47000
	055 Move X0, [X0+1016]
	056 Call 0x1C17D08
	057 Move X1, X0
	058 Move X0, X20
	059 Move X2, X19
	060 Move X3, X31
	061 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	062 Move X0, 0xD47000
	063 Move X0, [X0+1008]
	064 Call 0x1C17D08
	065 Move X1, X0
	066 Move X0, X20
	067 Call 0x1C17DEC

Method: System.Void Start()

Disassembly:
	0x033E7A6C LDR X8, [X0 + 0xB8]
	0x033E7A70 LDR W8, [X8]
	0x033E7A74 CMP W20, W8
	0x033E7A78 B.GE 0x33E7AA8
	0x033E7A7C BL 0x1C16D44

ISIL:
	001 Move [X31-16], X30
	002 Add X1, X31, 12
	003 Call Thread.Start, X0, X1
	004 Move X30, [X31+16]
	005 Return 

Method: System.Void Start(System.Object parameter)

Disassembly:
	0x033E7B3C LDR X0, [X0 + 0x460]
	0x033E7B40 BL 0x1C16CF4
	0x033E7B44 MOVZ W8, 0x1
	0x033E7B48 STRB W8, [X22 + 0x3EE]
	0x033E7B4C TBNZ X21, 0x0, 0x33E7B7C
	0x033E7B50 ADRP X8, 0xD46000
	0x033E7B54 LDR X8, [X8 + 0x460]
	0x033E7B58 LDR X0, [X8]
	0x033E7B5C BL 0x1C16D0C
	0x033E7B60 LDR X8, [X0]
	0x033E7B64 CBZ X8, 0x33E7B7C
	0x033E7B68 LDR X0, [X8 + 0x18]
	0x033E7B6C CBZ X0, 0x33E7C30
	0x033E7B70 MOV X1, X20
	0x033E7B74 BL 0x33E7C34
	0x033E7B78 B 0x33E7C14
	0x033E7B7C MOV X21, X19
	0x033E7B80 LDR X22, [X21 + 0x10]!
	0x033E7B84 BL 0x1C16D44
	0x033E7B88 CBZ X22, 0x33E7C30
	0x033E7B8C MOV X0, X22
	0x033E7B90 MOV X1, X20
	0x033E7B94 BL 0x33E80FC
	0x033E7B98 TBNZ X0, 0x0, 0x33E7C14
	0x033E7B9C ADRP X25, 0xD46000
	0x033E7BA0 LDR X25, [X25 + 0x450]
	0x033E7BA4 ADD X23, X22, 0x20
	0x033E7BA8 BL 0x1C16D44
	0x033E7BAC LDR X0, [X25]
	0x033E7BB0 BL 0x1C16F10
	0x033E7BB4 MOV X24, X0
	0x033E7BB8 BL 0x33E7824
	0x033E7BBC MOV X0, X23
	0x033E7BC0 MOV X1, X24
	0x033E7BC4 MOV X2, X31
	0x033E7BC8 BL 0x1C24138
	0x033E7BCC LDR X23, [X22 + 0x20]
	0x033E7BD0 BL 0x1C16D44
	0x033E7BD4 CBZ X23, 0x33E7C04
	0x033E7BD8 BL 0x1C16D44
	0x033E7BDC LDR X23, [X22 + 0x20]
	0x033E7BE0 BL 0x1C16D44
	0x033E7BE4 MOV X0, X21
	0x033E7BE8 MOV X1, X23
	0x033E7BEC MOV X2, X22
	0x033E7BF0 BL 0x1C24138
	0x033E7BF4 LDR X22, [X21]
	0x033E7BF8 BL 0x1C16D44
	0x033E7BFC CBNZ X22, 0x33E7BCC

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xFF7000
	007 Move W8, [X21+988]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD39000
	015 Move X0, [X0+464]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+988], W8
	019 Move X8, [X19+40]
	020 Compare X8, 0
	021 JumpIfEqual {27}
	022 Move X9, 0xD39000
	023 Move X9, [X9+464]
	024 Move X8, [X8]
	025 Move X9, [X9]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Add X1, X31, 12
	028 Move X0, X19
	029 Move [X19+24], X20
	030 Call Thread.Start, X0, X1
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X30, [X31+16]
	034 Move X21, [X31+24]
	035 Add X31, X31, 48
	036 Return 
	037 Move X0, 0xD47000
	038 Move X0, [X0+1024]
	039 Call 0x1C17D08
	040 Move X1, X31
	041 Call Environment.GetResourceString, X0
	042 Move X19, X0
	043 Move X0, 0xD0D000
	044 Move X0, [X0+1456]
	045 Call 0x1C17D08
	046 Call 0x1C17F10
	047 Move X1, X19
	048 Move X2, X31
	049 Move X20, X0
	050 Call InvalidOperationException..ctor, X0, X1
	051 Move X0, 0xD47000
	052 Move X0, [X0+1032]
	053 Call 0x1C17D08
	054 Move X1, X0
	055 Move X0, X20
	056 Call 0x1C17DEC

Method: System.Void Start(ref System.Threading.StackCrawlMark stackMark)

Disassembly:
	0x033E7A80 ADD W1, W20, 0x1
	0x033E7A84 MOV X0, X19
	0x033E7A88 MOV W2, W20
	0x033E7A8C BL 0x1C241D4
	0x033E7A90 CMP W0, W20
	0x033E7A94 MOV W20, W0
	0x033E7A98 B.NE 0x33E7A58
	0x033E7A9C LDP X20, X19, [X31 + 0x10]
	0x033E7AA0 LDP X30, X21, [X31], #0x20
	0x033E7AA4 B 0x1C967F4
	0x033E7AA8 LDP X20, X19, [X31 + 0x10]
	0x033E7AAC LDP X30, X21, [X31], #0x20
	0x033E7AB0 RET
	0x033E7AB4 B 0x1C241D4
	0x033E7AB8 B 0x1C967F4
	0x033E7ABC STR X30, [X31 - 0x20]!
	0x033E7AC0 STP X20, X19, [X31 + 0x10]
	0x033E7AC4 MOV X19, X0
	0x033E7AC8 LDR W20, [X19 + 0x20]!
	0x033E7ACC BL 0x1C16D44
	0x033E7AD0 CMP W20, 0x0
	0x033E7AD4 B.LE 0x33E7AF8
	0x033E7AD8 BL 0x1C16D44
	0x033E7ADC SUB W1, W20, 0x1
	0x033E7AE0 MOV X0, X19
	0x033E7AE4 MOV W2, W20
	0x033E7AE8 BL 0x1C241D4
	0x033E7AEC CMP W0, W20
	0x033E7AF0 MOV W20, W0
	0x033E7AF4 B.NE 0x33E7AD0
	0x033E7AF8 LDP X20, X19, [X31 + 0x10]
	0x033E7AFC LDR X30, [X31], #0x20
	0x033E7B00 RET
	0x033E7B04 STP X30, X25, [X31 - 0x40]!
	0x033E7B08 STP X24, X23, [X31 + 0x10]
	0x033E7B0C STP X22, X21, [X31 + 0x20]
	0x033E7B10 STP X20, X19, [X31 + 0x30]
	0x033E7B14 ADRP X22, 0xFF6000
	0x033E7B18 LDRB W8, [X22 + 0x3EE]
	0x033E7B1C MOV W21, W2
	0x033E7B20 MOV X20, X1
	0x033E7B24 MOV X19, X0
	0x033E7B28 TBNZ X8, 0x0, 0x33E7B4C
	0x033E7B2C ADRP X0, 0xD46000
	0x033E7B30 LDR X0, [X0 + 0x450]
	0x033E7B34 BL 0x1C16CF4
	0x033E7B38 ADRP X0, 0xD46000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xFF7000
	005 Move W8, [X20+989]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xD35000
	012 Move X0, [X0+1408]
	013 Call 0x1C17CF4
	014 Move X0, 0xD47000
	015 Move X0, [X0+960]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+989], W8
	019 Move X8, [X19+40]
	020 Compare X8, 0
	021 JumpIfEqual {46}
	022 Move X9, 0xD35000
	023 Move X9, [X9+1408]
	024 Move X20, [X8+32]
	025 Move X0, [X9]
	026 Move W9, [X0+224]
	027 Compare W9, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move W1, 1
	031 Call ExecutionContext.Capture, X0, X1
	032 Compare X20, 0
	033 JumpIfEqual {54}
	034 Move X9, 0xD47000
	035 Move X9, [X9+960]
	036 Move X8, [X20]
	037 Move X1, [X9]
	038 Move W10, [X8+304]
	039 Move W9, [X1+304]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X8, [X8+200]
	042 Add X8, X8, X9
	043 NotImplemented "Instruction LDUR not yet implemented."
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move [X20+32], X0
	046 Move X0, X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Call Thread.StartInternal, X0, X1, X2
	051 Return 
	052 Move X0, X20
	053 Call 0x1C181E0
	054 Call 0x1C17F20

Method: System.Threading.ExecutionContext/Reader GetExecutionContextReader()

Disassembly:
	0x033E5374 LDR W8, [X0 + 0xE0]
	0x033E5378 CBNZ W8, 0x33E5384

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Boolean get_ExecutionContextBelongsToCurrentScope()

Disassembly:
	0x033E5F84 BL 0x3EB1AE0
	0x033E5F88 ADRP X0, 0xD0E000
	0x033E5F8C LDR X0, [X0 + 0x7D0]
	0x033E5F90 BL 0x1C16D08

ISIL:
	001 Move W8, [X0+56]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Void set_ExecutionContextBelongsToCurrentScope(System.Boolean value)

Disassembly:
	0x033E5F94 LDR W8, [X0 + 0xE0]
	0x033E5F98 CBNZ W8, 0x33E5FA0
	0x033E5F9C BL 0x1C16DFC
	0x033E5FA0 MOV X0, X19

ISIL:
	001 NotImplemented "Instruction ORN not yet implemented."
	002 And W8, W8, 1
	003 Move [X0+56], W8
	004 Return 

Method: System.Threading.ExecutionContext GetMutableExecutionContext()

Disassembly:
	0x033E6BCC LDR X0, [X0 + 0x5B0]
	0x033E6BD0 BL 0x1C16D08
	0x033E6BD4 BL 0x1C16F10
	0x033E6BD8 MOV X1, X19
	0x033E6BDC MOV X2, X31
	0x033E6BE0 MOV X20, X0
	0x033E6BE4 BL 0x337DF1C
	0x033E6BE8 ADRP X0, 0xD47000
	0x033E6BEC LDR X0, [X0 + 0x408]
	0x033E6BF0 BL 0x1C16D08
	0x033E6BF4 MOV X1, X0
	0x033E6BF8 MOV X0, X20
	0x033E6BFC BL 0x1C16DEC
	0x033E6C00 STP X30, X19, [X31 - 0x10]!
	0x033E6C04 LDR X1, [X0 + 0x28]
	0x033E6C08 MOV X19, X0
	0x033E6C0C BL 0x1C4C0F4
	0x033E6C10 TBZ X0, 0x0, 0x33E6C20
	0x033E6C14 STR X31, [X19 + 0x18]
	0x033E6C18 LDP X30, X19, [X31], #0x10
	0x033E6C1C RET
	0x033E6C20 ADRP X0, 0xD3B000
	0x033E6C24 LDR X0, [X0 + 0xBE8]
	0x033E6C28 BL 0x1C16D08
	0x033E6C2C BL 0x1C16F10
	0x033E6C30 MOV X19, X0
	0x033E6C34 ADRP X0, 0xD47000
	0x033E6C38 LDR X0, [X0 + 0x410]
	0x033E6C3C BL 0x1C16D08
	0x033E6C40 MOV X1, X0
	0x033E6C44 MOV X0, X19
	0x033E6C48 MOV X2, X31
	0x033E6C4C BL 0x338C8D8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xFF8000
	005 Move W8, [X20+990]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xD36000
	012 Move X0, [X0+1408]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+990], W8
	016 Move X20, [X19+48]
	017 Compare X20, 0
	018 JumpIfEqual {26}
	019 Move W8, [X19+56]
	020 Compare W8, 0
	021 JumpIfEqual {34}
	022 Move X0, X20
	023 Call ExecutionContext.CreateMutableCopy, X0
	024 Move X20, X0
	025 Move [X19+48], X0
	026 Move X8, 0xD36000
	027 Move X8, [X8+1408]
	028 Move X0, [X8]
	029 Call 0x1C17F10
	030 Move X1, X31
	031 Move X20, X0
	032 Call Object..ctor, X0
	033 Move [X19+48], X20
	034 Move [X19+56], W31
	035 Move X0, X20
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Return X0

Method: System.Void SetExecutionContext(System.Threading.ExecutionContext value, System.Boolean belongsToCurrentScope)

Disassembly:
	0x033E5FD4 BL 0x3EB1AE0
	0x033E5FD8 MOV X0, X19
	0x033E5FDC BL 0x1D2C690
	0x033E5FE0 BL 0x1990590
	0x033E5FE4 STR X30, [X31 - 0x20]!

ISIL:
	001 NotImplemented "Instruction ORN not yet implemented."
	002 And W8, W8, 1
	003 Move [X0+48], X1
	004 Move [X0+56], W8
	005 Return 

Method: System.Void SetExecutionContext(System.Threading.ExecutionContext/Reader value, System.Boolean belongsToCurrentScope)

Disassembly:
	0x033E537C BL 0x1C16DFC
	0x033E5380 LDR X0, [X23]
	0x033E5384 LDR X8, [X0 + 0xB8]
	0x033E5388 LDR X20, [X8]
	0x033E538C B 0x33E53C0

ISIL:
	001 NotImplemented "Instruction ORN not yet implemented."
	002 And W8, W8, 1
	003 Move [X0+48], X1
	004 Move [X0+56], W8
	005 Return 

Method: System.Boolean JoinInternal(System.Int32 millisecondsTimeout)

Disassembly:
	0x033E7C68 BL 0x1C16CF4

ISIL:
	001 Call 0x1C4D020
	002 Return X0

Method: System.Boolean Join(System.Int32 millisecondsTimeout)

Disassembly:
	0x033E7C6C ADRP X0, 0xD46000
	0x033E7C70 LDR X0, [X0 + 0x200]
	0x033E7C74 BL 0x1C16CF4
	0x033E7C78 MOVZ W8, 0x1
	0x033E7C7C STRB W8, [X21 + 0x3F3]
	0x033E7C80 STRB W31, [X31 + 0xC]
	0x033E7C84 STRB W31, [X31 + 0x8]
	0x033E7C88 LDR W24, [X19 + 0x20]
	0x033E7C8C BL 0x1C16D44
	0x033E7C90 MOVN W8, 0x80000000
	0x033E7C94 CMP W24, W8
	0x033E7C98 B.NE 0x33E7D50
	0x033E7C9C ADRP X22, 0xD46000
	0x033E7CA0 LDR X22, [X22 + 0x200]
	0x033E7CA4 STRB W31, [X31 + 0xC]
	0x033E7CA8 LDR X0, [X22]
	0x033E7CAC LDR W8, [X0 + 0xE0]
	0x033E7CB0 CBNZ W8, 0x33E7CB8
	0x033E7CB4 BL 0x1C16DFC
	0x033E7CB8 ADD X0, X19, 0x24
	0x033E7CBC ADD X1, X31, 0xC
	0x033E7CC0 MOV X2, X31
	0x033E7CC4 BL 0x33E32A4
	0x033E7CC8 LDR W21, [X19 + 0x20]
	0x033E7CCC BL 0x1C16D44
	0x033E7CD0 MOVN W24, 0x80000000
	0x033E7CD4 CMP W21, W24
	0x033E7CD8 B.NE 0x33E7D1C
	0x033E7CDC LDR W21, [X19 + 0x1C]
	0x033E7CE0 BL 0x1C16D44

ISIL:
	001 Add W31, W1, 2
	002 Call 0x1C4D020
	003 Return X0
	004 Move [X31-32], X30
	005 Move [X31+16], X20
	006 Move [X31+24], X19
	007 Move X0, 0xD46000
	008 Move X0, [X0+4080]
	009 Call 0x1C17D08
	010 Move X1, X31
	011 Call Environment.GetResourceString, X0
	012 Move X19, X0
	013 Move X0, 0xD15000
	014 Move X0, [X0+1888]
	015 Call 0x1C17D08
	016 Call 0x1C17F10
	017 Move X20, X0
	018 Move X0, 0xD46000
	019 Move X0, [X0+4056]
	020 Call 0x1C17D08
	021 Move X1, X0
	022 Move X0, X20
	023 Move X2, X19
	024 Move X3, X31
	025 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	026 Move X0, 0xD47000
	027 Move X0, [X0+1056]
	028 Call 0x1C17D08
	029 Move X1, X0
	030 Move X0, X20
	031 Call 0x1C17DEC

Method: System.Void SleepInternal(System.Int32 millisecondsTimeout)

Disassembly:
	0x033E7CE4 LDR W23, [X19 + 0x18]

ISIL:
	001 Call 0x1C4D4FC
	002 Return 

Method: System.Void Sleep(System.Int32 millisecondsTimeout)

Disassembly:
	0x033E4BEC MOV X19, X0
	0x033E4BF0 CMP W1, 0x1
	0x033E4BF4 B.NE 0x33E4C1C
	0x033E4BF8 MOV X0, X19
	0x033E4BFC BL 0x3EB1AD0
	0x033E4C00 LDR X20, [X0]
	0x033E4C04 BL 0x3EB1AE0
	0x033E4C08 ADD X0, X31, 0x20
	0x033E4C0C BL 0x33E42EC
	0x033E4C10 CBZ X20, 0x33E4B78
	0x033E4C14 MOV X0, X20
	0x033E4C18 BL 0x1C16F18
	0x033E4C1C MOV X20, X31
	0x033E4C20 B 0x33E4C28
	0x033E4C24 MOV X19, X0
	0x033E4C28 ADD X0, X31, 0x20
	0x033E4C2C BL 0x33E42EC
	0x033E4C30 CBNZ X20, 0x33E4C3C
	0x033E4C34 MOV X0, X19
	0x033E4C38 BL 0x1D2C690
	0x033E4C3C MOV X0, X20
	0x033E4C40 BL 0x1C16F18
	0x033E4C44 BL 0x1990590
	0x033E4C48 STP X30, X23, [X31 - 0x30]!
	0x033E4C4C STP X22, X21, [X31 + 0x10]
	0x033E4C50 STP X20, X19, [X31 + 0x20]
	0x033E4C54 ADRP X22, 0xFF9000
	0x033E4C58 ADRP X23, 0xD37000
	0x033E4C5C LDRB W8, [X22 + 0x3C1]
	0x033E4C60 LDR X23, [X23 + 0x580]

ISIL:
	001 Add W31, W0, 2
	002 Call 0x1C4D4FC
	003 Return 
	004 Move [X31-32], X30
	005 Move [X31+16], X20
	006 Move [X31+24], X19
	007 Move X0, 0xD49000
	008 Move X0, [X0+4080]
	009 Call 0x1C17D08
	010 Move X1, X31
	011 Call Environment.GetResourceString, X0
	012 Move X19, X0
	013 Move X0, 0xD18000
	014 Move X0, [X0+1888]
	015 Call 0x1C17D08
	016 Call 0x1C17F10
	017 Move X20, X0
	018 Move X0, 0xD49000
	019 Move X0, [X0+4056]
	020 Call 0x1C17D08
	021 Move X1, X0
	022 Move X0, X20
	023 Move X2, X19
	024 Move X3, X31
	025 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	026 Move X0, 0xD4A000
	027 Move X0, [X0+568]
	028 Call 0x1C17D08
	029 Move X1, X0
	030 Move X0, X20
	031 Call 0x1C17DEC

Method: System.Boolean YieldInternal()

Disassembly:
	0x033E7CE8 BL 0x1C16D44

ISIL:
	001 Call 0x1C4D33C
	002 Return X0

Method: System.Boolean Yield()

Disassembly:
	0x033E4C64 MOV X19, X2

ISIL:
	001 Call 0x1C4D33C
	002 Return X0

Method: System.Void SetStartHelper(System.Delegate start, System.Int32 maxStackSize)

Disassembly:
	0x033E786C BL 0x1C16D6C
	0x033E7870 STR X0, [X19 + 0x10]
	0x033E7874 LDP X20, X19, [X31 + 0x10]
	0x033E7878 LDP X30, X21, [X31], #0x20
	0x033E787C RET
	0x033E7880 STP X30, X21, [X31 - 0x20]!
	0x033E7884 STP X20, X19, [X31 + 0x10]
	0x033E7888 ADRP X20, 0xFF6000
	0x033E788C ADRP X21, 0xD46000
	0x033E7890 LDRB W8, [X20 + 0x3EC]
	0x033E7894 LDR X21, [X21 + 0x460]
	0x033E7898 MOV X19, X0
	0x033E789C TBNZ X8, 0x0, 0x33E78B4
	0x033E78A0 ADRP X0, 0xD46000
	0x033E78A4 LDR X0, [X0 + 0x460]
	0x033E78A8 BL 0x1C16CF4
	0x033E78AC MOVZ W8, 0x1
	0x033E78B0 STRB W8, [X20 + 0x3EC]
	0x033E78B4 LDR X0, [X21]
	0x033E78B8 BL 0x1C16D0C
	0x033E78BC LDR X8, [X0]
	0x033E78C0 CBNZ X8, 0x33E78EC
	0x033E78C4 LDR X0, [X21]
	0x033E78C8 BL 0x1C16F10
	0x033E78CC MOV X1, X19
	0x033E78D0 MOV X20, X0
	0x033E78D4 BL 0x33E7904
	0x033E78D8 LDR X0, [X21]
	0x033E78DC BL 0x1C16D0C
	0x033E78E0 STR X20, [X0]
	0x033E78E4 LDR X0, [X21]
	0x033E78E8 BL 0x1C16D0C
	0x033E78EC LDR X0, [X21]
	0x033E78F0 BL 0x1C16D0C
	0x033E78F4 LDR X0, [X0]
	0x033E78F8 LDP X20, X19, [X31 + 0x10]
	0x033E78FC LDP X30, X21, [X31], #0x20
	0x033E7900 RET
	0x033E7904 STR X30, [X31 - 0x40]!
	0x033E7908 STP X24, X23, [X31 + 0x10]
	0x033E790C STP X22, X21, [X31 + 0x20]
	0x033E7910 STP X20, X19, [X31 + 0x30]
	0x033E7914 ADRP X21, 0xFF6000
	0x033E7918 LDRB W8, [X21 + 0x3FA]
	0x033E791C MOV X20, X1
	0x033E7920 MOV X19, X0
	0x033E7924 TBNZ X8, 0x0, 0x33E7960
	0x033E7928 ADRP X0, 0xD13000
	0x033E792C LDR X0, [X0 + 0x2E8]
	0x033E7930 BL 0x1C16CF4
	0x033E7934 ADRP X0, 0xD46000
	0x033E7938 LDR X0, [X0 + 0x468]
	0x033E793C BL 0x1C16CF4
	0x033E7940 ADRP X0, 0xD46000
	0x033E7944 LDR X0, [X0 + 0x448]
	0x033E7948 BL 0x1C16CF4
	0x033E794C ADRP X0, 0xD46000
	0x033E7950 LDR X0, [X0 + 0x470]
	0x033E7954 BL 0x1C16CF4
	0x033E7958 MOVZ W8, 0x1
	0x033E795C STRB W8, [X21 + 0x3FA]
	0x033E7960 MOV X0, X31
	0x033E7964 BL 0x33E3C68
	0x033E7968 CBZ X0, 0x33E7A18
	0x033E796C ADRP X21, 0xD13000
	0x033E7970 ADRP X24, 0xD46000
	0x033E7974 ADRP X23, 0xD46000
	0x033E7978 LDR X21, [X21 + 0x2E8]
	0x033E797C LDR X24, [X24 + 0x470]
	0x033E7980 LDR X23, [X23 + 0x448]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xFF7000
	008 Move X22, 0xD47000
	009 Move W8, [X23+991]
	010 Move X22, [X22+960]
	011 Move W20, W2
	012 Move X21, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {35}
	018 Move X0, 0xD47000
	019 Move X0, [X0+952]
	020 Call 0x1C17CF4
	021 Move X0, 0xD47000
	022 Move X0, [X0+992]
	023 Call 0x1C17CF4
	024 Move X0, 0xD47000
	025 Move X0, [X0+1000]
	026 Call 0x1C17CF4
	027 Move X0, 0xD47000
	028 Move X0, [X0+960]
	029 Call 0x1C17CF4
	030 Move X0, 0xD39000
	031 Move X0, [X0+464]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X23+991], W8
	035 Move W0, W20
	036 Call Thread.GetProcessDefaultStackSize, X0
	037 Move X8, [X22]
	038 Move W20, W0
	039 Move X0, X8
	040 Call 0x1C17F10
	041 Move X1, X31
	042 Move X22, X0
	043 Call Object..ctor, X0
	044 Move [X22+16], X21
	045 Compare X21, 0
	046 JumpIfEqual {52}
	047 Move X8, 0xD39000
	048 Move X8, [X8+464]
	049 Move X0, [X8]
	050 Move X8, [X21]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X8, 0xD47000
	053 Move X8, [X8+952]
	054 Move X21, 0xD47000
	055 Move X0, [X8]
	056 Move X21, [X21+992]
	057 Call 0x1C17F10
	058 Move X2, [X21]
	059 Move X1, X22
	060 Move X21, X0
	061 Call ParameterizedThreadStart..ctor, X0, X1, X2
	062 Call 0x1C17F10
	063 Move X8, 0xD47000
	064 Move X8, [X8+1000]
	065 Move X1, X22
	066 Move X21, X0
	067 Move X2, [X8]
	068 Call ThreadStart..ctor, X0, X1, X2
	069 Move X0, X19
	070 Move X1, X21
	071 Move W2, W20
	072 Move X20, [X31+32]
	073 Move X19, [X31+40]
	074 Move X22, [X31+16]
	075 Move X21, [X31+24]
	076 Move X30, [X31+48]
	077 Move X23, [X31+56]
	078 Call Thread.SetStart, X0, X1, X2
	079 Return 

Method: System.Globalization.CultureInfo get_CurrentUICulture()

Disassembly:
	0x033E7DD4 BL 0x33E32A4
	0x033E7DD8 LDR W26, [X19 + 0x1C]
	0x033E7DDC BL 0x1C16D44
	0x033E7DE0 LDR W21, [X19 + 0x20]
	0x033E7DE4 BL 0x1C16D44
	0x033E7DE8 LDR W22, [X19 + 0x1C]
	0x033E7DEC BL 0x1C16D44
	0x033E7DF0 LDR W27, [X19 + 0x18]
	0x033E7DF4 BL 0x1C16D44
	0x033E7DF8 SUB W25, W21, W22
	0x033E7DFC CMP W25, W27

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0xFF7000
	004 Move W8, [X19+992]
	005 Move TEMP, X8
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfEqual {14}
	009 Move X0, 0xD0F000
	010 Move X0, [X0+3144]
	011 Call 0x1C17CF4
	012 Move W8, 1
	013 Move [X19+992], W8
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]

Method: System.Globalization.CultureInfo GetCurrentUICultureNoAppX()

Disassembly:
	0x033E7E00 B.LT 0x33E7EE4
	0x033E7E04 LDR X21, [X19 + 0x10]
	0x033E7E08 BL 0x1C16D44
	0x033E7E0C CBZ X21, 0x33E7FB0
	0x033E7E10 ADRP X8, 0xD46000
	0x033E7E14 LDR X8, [X8 + 0x458]
	0x033E7E18 LDR W9, [X21 + 0x18]
	0x033E7E1C LDR X0, [X8]
	0x033E7E20 UBFM W1, W9, 0x1F, 0x1E
	0x033E7E24 BL 0x1C16D6C
	0x033E7E28 MOV X21, X0
	0x033E7E2C MOV X24, X31
	0x033E7E30 LDR X22, [X19 + 0x10]
	0x033E7E34 BL 0x1C16D44
	0x033E7E38 CBZ X22, 0x33E7F70
	0x033E7E3C LDRSW X8, [X22 + 0x18]
	0x033E7E40 CMP X24, X8
	0x033E7E44 B.GE 0x33E7EB0
	0x033E7E48 LDR X22, [X19 + 0x10]
	0x033E7E4C BL 0x1C16D44
	0x033E7E50 LDR W27, [X19 + 0x18]
	0x033E7E54 BL 0x1C16D44
	0x033E7E58 CBZ X22, 0x33E7F7C
	0x033E7E5C LDR W9, [X22 + 0x18]
	0x033E7E60 ADD W8, W26, W24
	0x033E7E64 AND W8, W27, W8, 0x0
	0x033E7E68 CMP W8, W9
	0x033E7E6C B.CS 0x33E7F78
	0x033E7E70 CBZ X21, 0x33E7F80
	0x033E7E74 ADD X8, X22, W8, 0x3, SXTW
	0x033E7E78 LDR X22, [X8 + 0x20]
	0x033E7E7C CBZ X22, 0x33E7E94
	0x033E7E80 LDR X8, [X21]
	0x033E7E84 LDR X1, [X8 + 0x40]
	0x033E7E88 MOV X0, X22
	0x033E7E8C BL 0x1C16E00
	0x033E7E90 CBZ X0, 0x33E7F84
	0x033E7E94 LDR W8, [X21 + 0x18]
	0x033E7E98 CMP X24, X8
	0x033E7E9C B.CS 0x33E7F74
	0x033E7EA0 ADD X8, X21, X24, 0x3, LSL
	0x033E7EA4 ADD X24, X24, 0x1
	0x033E7EA8 STR X22, [X8 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xFF7000
	005 Move X19, 0xD39000
	006 Move W8, [X20+993]
	007 Move X19, [X19+472]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xD0F000
	013 Move X0, [X0+3144]
	014 Call 0x1C17CF4
	015 Move X0, 0xD39000
	016 Move X0, [X0+472]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+993], W8
	020 Move X0, [X19]
	021 Call 0x1C17D0C
	022 Move X8, [X0+16]
	023 Compare X8, 0
	024 JumpIfEqual {28}
	025 Move X0, [X19]
	026 Call 0x1C17D0C
	027 Move X0, [X0+16]
	028 Move X19, 0xD0F000
	029 Move X19, [X19+3144]
	030 Move X0, [X19]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X31
	036 Call CultureInfo.get_DefaultThreadCurrentUICulture
	037 Compare X0, 0
	038 JumpIfEqual {43}
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Return X0
	043 Move X0, [X19]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X0, X31
	051 Move X30, [X31+32]
	052 Call CultureInfo.get_UserDefaultUICulture
	053 Return X0

Method: System.Globalization.CultureInfo get_CurrentCulture()

Disassembly:
	0x033E7EAC B 0x33E7E30
	0x033E7EB0 BL 0x1C16D44
	0x033E7EB4 STR X21, [X19 + 0x10]
	0x033E7EB8 BL 0x1C16D44
	0x033E7EBC STR W31, [X19 + 0x1C]
	0x033E7EC0 BL 0x1C16D44
	0x033E7EC4 LDR W21, [X19 + 0x18]
	0x033E7EC8 STR W25, [X19 + 0x20]
	0x033E7ECC BL 0x1C16D44
	0x033E7ED0 BL 0x1C16D44
	0x033E7ED4 MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0xFF7000
	004 Move W8, [X19+994]
	005 Move TEMP, X8
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfEqual {14}
	009 Move X0, 0xD0F000
	010 Move X0, [X0+3144]
	011 Call 0x1C17CF4
	012 Move W8, 1
	013 Move [X19+994], W8
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]

Method: System.Globalization.CultureInfo GetCurrentCultureNoAppX()

Disassembly:
	0x033E7ED8 BFM W8, W21, 0x1F, 0x1E
	0x033E7EDC MOV W24, W25
	0x033E7EE0 STR W8, [X19 + 0x18]
	0x033E7EE4 LDR X21, [X19 + 0x10]
	0x033E7EE8 BL 0x1C16D44
	0x033E7EEC LDR W22, [X19 + 0x18]
	0x033E7EF0 BL 0x1C16D44
	0x033E7EF4 CBZ X21, 0x33E7FA8
	0x033E7EF8 LDR W8, [X21 + 0x18]
	0x033E7EFC AND W22, W22, W24, 0x0
	0x033E7F00 CMP W22, W8
	0x033E7F04 B.CS 0x33E7FAC
	0x033E7F08 BL 0x1C16D44
	0x033E7F0C ADD X8, X21, W22, 0x3, SXTW
	0x033E7F10 STR X20, [X8 + 0x20]
	0x033E7F14 BL 0x1C16D44
	0x033E7F18 ADD W8, W24, 0x1
	0x033E7F1C MOV X20, X31
	0x033E7F20 STR W8, [X19 + 0x20]
	0x033E7F24 LDRB W8, [X31 + 0x8]
	0x033E7F28 CBZ W8, 0x33E7F50
	0x033E7F2C LDR X0, [X23]
	0x033E7F30 ADD X19, X19, 0x24
	0x033E7F34 LDR W8, [X0 + 0xE0]
	0x033E7F38 CBNZ W8, 0x33E7F40
	0x033E7F3C BL 0x1C16DFC
	0x033E7F40 MOV X0, X19
	0x033E7F44 MOV W1, W31
	0x033E7F48 MOV X2, X31
	0x033E7F4C BL 0x33E3CF0
	0x033E7F50 CBNZ X20, 0x33E7F9C
	0x033E7F54 LDP X20, X19, [X31 + 0x50]
	0x033E7F58 LDP X22, X21, [X31 + 0x40]
	0x033E7F5C LDP X24, X23, [X31 + 0x30]
	0x033E7F60 LDP X26, X25, [X31 + 0x20]
	0x033E7F64 LDP X30, X27, [X31 + 0x10]
	0x033E7F68 ADD X31, X31, 0x60
	0x033E7F6C RET
	0x033E7F70 BL 0x1C16F20
	0x033E7F74 BL 0x1C16F28
	0x033E7F78 BL 0x1C16F28
	0x033E7F7C BL 0x1C16F20
	0x033E7F80 BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xFF7000
	005 Move X19, 0xD39000
	006 Move W8, [X20+995]
	007 Move X19, [X19+472]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xD0F000
	013 Move X0, [X0+3144]
	014 Call 0x1C17CF4
	015 Move X0, 0xD39000
	016 Move X0, [X0+472]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+995], W8
	020 Move X0, [X19]
	021 Call 0x1C17D0C
	022 Move X8, [X0+8]
	023 Compare X8, 0
	024 JumpIfEqual {28}
	025 Move X0, [X19]
	026 Call 0x1C17D0C
	027 Move X0, [X0+8]
	028 Move X19, 0xD0F000
	029 Move X19, [X19+3144]
	030 Move X0, [X19]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X31
	036 Call CultureInfo.get_DefaultThreadCurrentCulture
	037 Compare X0, 0
	038 JumpIfEqual {43}
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Return X0
	043 Move X0, [X19]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X0, X31
	051 Move X30, [X31+32]
	052 Call CultureInfo.get_UserDefaultCulture
	053 Return X0

Method: System.Void MemoryBarrier()

Disassembly:
	0x033E7F84 BL 0x1C16F44

ISIL:
	001 Call 0x1C2E5AC
	002 Return 

Method: System.Void ConstructInternalThread()

Disassembly:
	0x033E7F88 MOV X1, X31

ISIL:
	001 Call 0x1C4D3AC
	002 Return 

Method: System.Threading.InternalThread get_Internal()

Disassembly:
	0x033E7F8C BL 0x1C16DEC
	0x033E7F90 MOV X0, X21
	0x033E7F94 BL 0x1C16F18
	0x033E7F98 BL 0x1C16F20
	0x033E7F9C MOV X0, X20
	0x033E7FA0 BL 0x1C16F18
	0x033E7FA4 BL 0x1C16F28
	0x033E7FA8 BL 0x1C16F20
	0x033E7FAC BL 0x1C16F28

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+16]
	005 Compare X0, 0
	006 JumpIfNotEqual {10}
	007 Move X0, X19
	008 Call 0x1C4D3AC
	009 Move X0, [X19+16]
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return X0

Method: System.Runtime.Remoting.Contexts.Context get_CurrentContext()

Disassembly:
	0x033E7FB0 BL 0x1C16F20
	0x033E7FB4 B 0x33E8090

ISIL:
	001 Move X0, X31
	002 Call AppDomain.InternalGetContext
	003 Return X0

Method: System.Void GetCurrentThread_icall(ref System.Threading.Thread thread)

Disassembly:
	0x033E7FB8 B 0x33E8090

ISIL:
	001 Call 0x1C4D400
	002 Return 

Method: System.Threading.Thread GetCurrentThread()

Disassembly:
	0x033E7FBC MOV X21, X0
	0x033E7FC0 B 0x33E8008
	0x033E7FC4 B 0x33E8000
	0x033E7FC8 B 0x33E8000
	0x033E7FCC B 0x33E8000
	0x033E7FD0 B 0x33E8090
	0x033E7FD4 B 0x33E8090

ISIL:
	001 Move [X31-16], X30
	002 Add X0, X31, 8
	003 Move [X31+8], X31
	004 Call 0x1C4D400
	005 Move X0, [X31+8]
	006 Move X30, [X31+16]
	007 Return X0

Method: System.Threading.Thread get_CurrentThread()

Disassembly:
	0x033E4C68 MOV X20, X1
	0x033E4C6C MOV X21, X0
	0x033E4C70 TBNZ X8, 0x0, 0x33E4C88
	0x033E4C74 ADRP X0, 0xD37000
	0x033E4C78 LDR X0, [X0 + 0x580]
	0x033E4C7C BL 0x1C16CF4
	0x033E4C80 MOVZ W8, 0x1
	0x033E4C84 STRB W8, [X22 + 0x3C1]
	0x033E4C88 LDR X0, [X23]
	0x033E4C8C LDR W8, [X0 + 0xE0]
	0x033E4C90 CBNZ W8, 0x33E4C98
	0x033E4C94 BL 0x1C16DFC
	0x033E4C98 MOV X0, X21
	0x033E4C9C MOV X1, X20
	0x033E4CA0 MOV X2, X19
	0x033E4CA4 LDP X20, X19, [X31 + 0x20]
	0x033E4CA8 LDP X22, X21, [X31 + 0x10]
	0x033E4CAC MOV W3, W31
	0x033E4CB0 LDP X30, X23, [X31], #0x30
	0x033E4CB4 B 0x33E4A54
	0x033E4CB8 LDR X8, [X0]
	0x033E4CBC CMP X8, 0x0
	0x033E4CC0 CSET W0, EQ

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xFFA000
	005 Move X20, 0xD3C000
	006 Move W8, [X19+996]
	007 Move X20, [X20+472]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xD3C000
	013 Move X0, [X0+472]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+996], W8
	017 Move X0, [X20]
	018 Call 0x1C17D0C
	019 Move X0, [X0+24]
	020 Compare X0, 0
	021 JumpIfNotEqual {26}
	022 Add X0, X31, 8
	023 Move [X31+8], X31
	024 Call 0x1C4D400
	025 Move X0, [X31+8]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return X0

Method: System.Int32 GetDomainID()

Disassembly:
	0x033E7FD8 B 0x33E8090

ISIL:
	001 Call 0x1C4D340
	002 Return X0

Method: System.Boolean Thread_internal(System.MulticastDelegate start)

Disassembly:
	0x033E7FDC B 0x33E8090

ISIL:
	001 Call 0x1C4D0F4
	002 Return X0

Method: System.Void Finalize()

Disassembly:
	0x033E7FE0 B 0x33E8090
	0x033E7FE4 B 0x33E8090

ISIL:
	001 Move X1, X31
	002 Call CriticalFinalizerObject.Finalize, X0
	003 Return 

Method: System.Boolean get_IsThreadPoolThread()

Disassembly:
	0x033E7FE8 B 0x33E8090

ISIL:
No ISIL was generated
Method: System.Boolean get_IsThreadPoolThreadInternal()

Disassembly:
	0x033E7FEC B 0x33E8000
	0x033E7FF0 B 0x33E8090
	0x033E7FF4 B 0x33E8090
	0x033E7FF8 B 0x33E8000
	0x033E7FFC B 0x33E8090
	0x033E8000 MOV X21, X0
	0x033E8004 MOVN W24, 0x80000000
	0x033E8008 CMP W1, 0x1
	0x033E800C B.NE 0x33E802C
	0x033E8010 MOV X0, X21
	0x033E8014 BL 0x3EB1AD0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+16]
	004 Compare X8, 0
	005 JumpIfNotEqual {11}
	006 Move X19, X0
	007 Call 0x1C4D3AC
	008 Move X8, [X19+16]
	009 Compare X8, 0
	010 JumpIfEqual {15}
	011 Move W0, [X8+168]
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return X0
	015 Call 0x1C17F20

Method: System.Void set_IsBackground(System.Boolean value)

Disassembly:
	0x033E8018 LDR X8, [X0]
	0x033E801C STR X8, [X31]
	0x033E8020 BL 0x3EB1AE0
	0x033E8024 LDR X21, [X31]
	0x033E8028 B 0x33E7D20
	0x033E802C STR X31, [X31]
	0x033E8030 B 0x33E8038
	0x033E8034 MOV X21, X0
	0x033E8038 LDRB W8, [X31 + 0xC]
	0x033E803C CBZ W8, 0x33E8060
	0x033E8040 LDR X0, [X22]
	0x033E8044 LDR W8, [X0 + 0xE0]
	0x033E8048 CBNZ W8, 0x33E8050
	0x033E804C BL 0x1C16DFC
	0x033E8050 ADD X0, X19, 0x24
	0x033E8054 MOVZ W1, 0x1
	0x033E8058 MOV X2, X31
	0x033E805C BL 0x33E3CF0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X20, X0
	006 Call Thread.ValidateThreadState, X0
	007 Move X0, [X20+16]
	008 Compare X0, 0
	009 JumpIfNotEqual {13}
	010 Move X0, X20
	011 Call 0x1C4D3AC
	012 Move X0, [X20+16]
	013 Move W1, 4
	014 Move TEMP, X19
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {23}
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Call 0x1C4D098
	022 Return 
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Call 0x1C4D0F0
	027 Return 

Method: System.Void SetName_icall(System.Threading.InternalThread thread, System.Char* name, System.Int32 nameLength)

Disassembly:
	0x033E80D8 MOV W1, W31

ISIL:
	001 Call 0x1C4D418
	002 Return 

Method: System.Void SetName_internal(System.Threading.InternalThread thread, System.String name)

Disassembly:
	0x033E80DC MOV X2, X31
	0x033E80E0 BL 0x33E3CF0
	0x033E80E4 CBNZ X20, 0x33E80F0
	0x033E80E8 MOV X0, X21
	0x033E80EC BL 0x1D2C690
	0x033E80F0 MOV X0, X20
	0x033E80F4 BL 0x1C16F18
	0x033E80F8 BL 0x1990590
	0x033E80FC STP X30, X25, [X31 - 0x40]!
	0x033E8100 STP X24, X23, [X31 + 0x10]
	0x033E8104 STP X22, X21, [X31 + 0x20]
	0x033E8108 STP X20, X19, [X31 + 0x30]
	0x033E810C MOV X21, X0
	0x033E8110 LDR W22, [X21 + 0x18]!
	0x033E8114 MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Compare X1, 0
	006 JumpIfEqual {12}
	007 Move X0, X31
	008 Move X20, X1
	009 Call RuntimeHelpers.get_OffsetToStringData
	010 Move W2, [X20+16]
	011 Add X1, X20, W0
	012 Move W2, W31
	013 Move X0, X19
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Move X30, [X31+32]
	017 Call 0x1C4D418
	018 Return 

Method: System.Void set_Name(System.String value)

Disassembly:
	0x033E8118 MOV X19, X1
	0x033E811C BL 0x1C16D44
	0x033E8120 UBFM W8, W22, 0x10, 0x1F
	0x033E8124 LDR X9, [X20 + 0x10]
	0x033E8128 CBZ X9, 0x33E81A8
	0x033E812C LDR W25, [X9 + 0x18]
	0x033E8130 MOV W24, W8
	0x033E8134 CMP W8, W25
	0x033E8138 B.EQ 0x33E818C
	0x033E813C AND W23, W22, 0xFFFF
	0x033E8140 BFM W23, W24, 0x10, 0xF
	0x033E8144 ADD W22, W23, 0x10000
	0x033E8148 BL 0x1C16D44

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X0
	005 Move X0, [X0+16]
	006 Move X19, X1
	007 Compare X0, 0
	008 JumpIfNotEqual {12}
	009 Move X0, X20
	010 Call 0x1C4D3AC
	011 Move X0, [X20+16]
	012 Move X1, X19
	013 Move X20, [X31+16]
	014 Move X19, [X31+24]
	015 Move X30, [X31+32]
	016 Call Thread.SetName_internal, X0, X1
	017 Return 

Method: System.Void Abort_internal(System.Threading.InternalThread thread, System.Object stateInfo)

Disassembly:
	0x033E814C MOV X0, X21

ISIL:
	001 Call 0x1C4D3A8
	002 Return 

Method: System.Void Abort()

Disassembly:
	0x033E8150 MOV W1, W22
	0x033E8154 MOV W2, W23
	0x033E8158 BL 0x1C241D4
	0x033E815C MOV W22, W0
	0x033E8160 CMP W0, W23
	0x033E8164 UBFM W8, W0, 0x10, 0x1F
	0x033E8168 B.NE 0x33E8124
	0x033E816C LDR X9, [X20 + 0x10]
	0x033E8170 CBZ X9, 0x33E81A8
	0x033E8174 LDR W10, [X9 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+16]
	005 Compare X0, 0
	006 JumpIfNotEqual {10}
	007 Move X0, X19
	008 Call 0x1C4D3AC
	009 Move X0, [X19+16]
	010 Move X1, X31
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Call 0x1C4D3A8
	014 Return 

Method: System.Void SpinWait_nop()

Disassembly:
	0x033E8178 CMP W8, W10

ISIL:
	001 Call 0x1C17D14
	002 Return 

Method: System.Void SpinWait(System.Int32 iterations)

Disassembly:
	0x033E4BC4 BL 0x1C16F20
	0x033E4BC8 BL 0x1C16F20
	0x033E4BCC BL 0x1C16F20
	0x033E4BD0 B 0x33E4BEC
	0x033E4BD4 B 0x33E4BEC
	0x033E4BD8 B 0x33E4BEC
	0x033E4BDC B 0x33E4BEC
	0x033E4BE0 B 0x33E4BEC
	0x033E4BE4 B 0x33E4BEC
	0x033E4BE8 B 0x33E4BEC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Add W19, W0, 1
	005 Call 0x1C17D14
	006 Subtract W19, W19, 1
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 

Method: System.Void StartInternal(System.Object principal, ref System.Threading.StackCrawlMark stackMark)

Disassembly:
	0x033E7C00 B 0x33E7C30
	0x033E7C04 MOV X0, X22
	0x033E7C08 MOV X1, X20
	0x033E7C0C BL 0x33E80FC
	0x033E7C10 TBZ X0, 0x0, 0x33E7BA4
	0x033E7C14 BL 0x1C16D14
	0x033E7C18 MOV X0, X19
	0x033E7C1C LDP X20, X19, [X31 + 0x30]
	0x033E7C20 LDP X22, X21, [X31 + 0x20]
	0x033E7C24 LDP X24, X23, [X31 + 0x10]
	0x033E7C28 LDP X30, X25, [X31], #0x40
	0x033E7C2C B 0x33E7A1C
	0x033E7C30 BL 0x1C16F20
	0x033E7C34 SUB X31, X31, 0x60
	0x033E7C38 STP X30, X27, [X31 + 0x10]
	0x033E7C3C STP X26, X25, [X31 + 0x20]
	0x033E7C40 STP X24, X23, [X31 + 0x30]
	0x033E7C44 STP X22, X21, [X31 + 0x40]
	0x033E7C48 STP X20, X19, [X31 + 0x50]
	0x033E7C4C ADRP X21, 0xFF6000
	0x033E7C50 LDRB W8, [X21 + 0x3F3]
	0x033E7C54 MOV X20, X1
	0x033E7C58 MOV X19, X0
	0x033E7C5C TBNZ X8, 0x0, 0x33E7C80
	0x033E7C60 ADRP X0, 0xD46000
	0x033E7C64 LDR X0, [X0 + 0x458]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, [X0+40]
	004 Move X19, X0
	005 Call 0x1C4D0F4
	006 Move TEMP, X0
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfNotEqual {14}
	010 Move [X19+24], X31
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Return 
	014 Move X0, 0xD3B000
	015 Move X0, [X0+3048]
	016 Call 0x1C17D08
	017 Call 0x1C17F10
	018 Move X19, X0
	019 Move X0, 0xD47000
	020 Move X0, [X0+1040]
	021 Call 0x1C17D08
	022 Move X1, X0
	023 Move X0, X19
	024 Move X2, X31
	025 Call SystemException..ctor, X0, X1
	026 Move X0, 0xD47000
	027 Move X0, [X0+1048]
	028 Call 0x1C17D08
	029 Move X1, X0
	030 Move X0, X19
	031 Call 0x1C17DEC

Method: System.Void SetState(System.Threading.InternalThread thread, System.Threading.ThreadState set)

Disassembly:
	0x033E80D0 BL 0x1C16DFC

ISIL:
	001 Call 0x1C4D098
	002 Return 

Method: System.Void ClrState(System.Threading.InternalThread thread, System.Threading.ThreadState clr)

Disassembly:
	0x033E80D4 ADD X0, X19, 0x24

ISIL:
	001 Call 0x1C4D0F0
	002 Return 

Method: System.Threading.ThreadState GetState(System.Threading.InternalThread thread)

Disassembly:
	0x033E817C B.CS 0x33E81AC

ISIL:
	001 Call 0x1C4D364
	002 Return X0

Method: System.Int32 VolatileRead(ref System.Int32 address)

Disassembly:
	0x033E8180 ADD X20, X9, W8, 0x3, UXTW

ISIL:
	001 Call 0x1C4D358
	002 Return X0

Method: System.Int32 SystemMaxStackStize()

Disassembly:
	0x033E8184 BL 0x1C16D44

ISIL:
	001 Call 0x1C4D354
	002 Return X0

Method: System.Int32 GetProcessDefaultStackSize(System.Int32 maxStackSize)

Disassembly:
	0x033E7CEC BL 0x1C16D44
	0x033E7CF0 LDR W24, [X19 + 0x20]
	0x033E7CF4 AND W8, W23, W21, 0x0
	0x033E7CF8 STR W8, [X19 + 0x1C]
	0x033E7CFC BL 0x1C16D44
	0x033E7D00 LDR W21, [X19 + 0x18]
	0x033E7D04 BL 0x1C16D44
	0x033E7D08 AND W24, W21, W24, 0x0
	0x033E7D0C BL 0x1C16D44
	0x033E7D10 MOV X21, X31
	0x033E7D14 STR W24, [X19 + 0x20]
	0x033E7D18 B 0x33E7D20
	0x033E7D1C MOV X21, X31
	0x033E7D20 LDRB W8, [X31 + 0xC]
	0x033E7D24 CBZ W8, 0x33E7D4C
	0x033E7D28 LDR X0, [X22]
	0x033E7D2C ADD X22, X19, 0x24
	0x033E7D30 LDR W8, [X0 + 0xE0]
	0x033E7D34 CBNZ W8, 0x33E7D3C
	0x033E7D38 BL 0x1C16DFC
	0x033E7D3C MOVZ W1, 0x1
	0x033E7D40 MOV X0, X22
	0x033E7D44 MOV X2, X31
	0x033E7D48 BL 0x33E3CF0
	0x033E7D4C CBNZ X21, 0x33E7F90
	0x033E7D50 LDR W21, [X19 + 0x1C]
	0x033E7D54 BL 0x1C16D44
	0x033E7D58 LDR W22, [X19 + 0x18]
	0x033E7D5C BL 0x1C16D44
	0x033E7D60 ADD W8, W22, W21
	0x033E7D64 CMP W24, W8
	0x033E7D68 B.GE 0x33E7DAC
	0x033E7D6C LDR X21, [X19 + 0x10]
	0x033E7D70 BL 0x1C16D44
	0x033E7D74 LDR W22, [X19 + 0x18]
	0x033E7D78 BL 0x1C16D44
	0x033E7D7C CBZ X21, 0x33E7F98
	0x033E7D80 LDR W9, [X21 + 0x18]
	0x033E7D84 AND W8, W22, W24, 0x0
	0x033E7D88 CMP W8, W9
	0x033E7D8C B.CS 0x33E7FA4
	0x033E7D90 ADD X21, X21, W8, 0x3, SXTW
	0x033E7D94 BL 0x1C16D44

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xFF7000
	005 Move W8, [X20+997]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xD0D000
	012 Move X0, [X0+1448]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+997], W8
	016 Compare W19, 0
	017 JumpIfEqual {46}
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move X0, X31
	020 Call Environment.GetPageSize
	021 NotImplemented "Instruction SDIV not yet implemented."
	022 NotImplemented "Instruction MSUB not yet implemented."
	023 Compare W8, 0
	024 JumpIfEqual {28}
	025 Subtract W8, W0, 1
	026 NotImplemented "Instruction SDIV not yet implemented."
	027 Multiply W19, W8, W0
	028 Call 0x1C4D354
	029 Move X8, 0xD0D000
	030 Move X8, [X8+1448]
	031 Move W20, W0
	032 Move X8, [X8]
	033 Move W9, [X8+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Move W0, W19
	039 Move W1, W20
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X2, X31
	043 Move X30, [X31+32]
	044 Call Math.Min, X0, X1
	045 Return X0
	046 Move W0, W31
	047 Move W0, 0x20000
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X30, [X31+32]
	051 Return X0

Method: System.Void SetStart(System.MulticastDelegate start, System.Int32 maxStackSize)

Disassembly:
	0x033E7D98 STR X20, [X21 + 0x20]
	0x033E7D9C BL 0x1C16D44
	0x033E7DA0 ADD W8, W24, 0x1
	0x033E7DA4 STR W8, [X19 + 0x20]
	0x033E7DA8 B 0x33E7F54
	0x033E7DAC ADRP X23, 0xD46000
	0x033E7DB0 LDR X23, [X23 + 0x200]
	0x033E7DB4 STRB W31, [X31 + 0x8]
	0x033E7DB8 LDR X0, [X23]
	0x033E7DBC LDR W8, [X0 + 0xE0]
	0x033E7DC0 CBNZ W8, 0x33E7DC8
	0x033E7DC4 BL 0x1C16DFC
	0x033E7DC8 ADD X0, X19, 0x24
	0x033E7DCC ADD X1, X31, 0x8
	0x033E7DD0 MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0+16]
	005 Move W19, W2
	006 Move [X0+40], X1
	007 Compare X8, 0
	008 JumpIfNotEqual {14}
	009 Move X20, X0
	010 Call 0x1C4D3AC
	011 Move X8, [X20+16]
	012 Compare X8, 0
	013 JumpIfEqual {19}
	014 Move [X8+172], W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 Return 
	019 Call 0x1C17F20

Method: System.Int32 get_ManagedThreadId()

Disassembly:
	0x033E4CC4 RET
	0x033E4CC8 STR X30, [X31 - 0x10]!
	0x033E4CCC LDR X0, [X0]
	0x033E4CD0 CBZ X0, 0x33E4CE0
	0x033E4CD4 AND W1, W1, 0x1
	0x033E4CD8 LDR X30, [X31], #0x10
	0x033E4CDC B 0x33E4CE4
	0x033E4CE0 BL 0x1C16F20
	0x033E4CE4 STP X30, X19, [X31 - 0x10]!
	0x033E4CE8 MOV X19, X0
	0x033E4CEC TBNZ X1, 0x0, 0x33E4CF8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+16]
	004 Compare X8, 0
	005 JumpIfNotEqual {11}
	006 Move X19, X0
	007 Call 0x1C4D3AC
	008 Move X8, [X19+16]
	009 Compare X8, 0
	010 JumpIfEqual {15}
	011 Move W0, [X8+184]
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return X0
	015 Call 0x1C17F20

Method: System.Void BeginCriticalRegion()

Disassembly:
	0x033E4358 LDP X20, X19, [X31 + 0x10]
	0x033E435C MOV X0, X21
	0x033E4360 LDP X30, X21, [X31], #0x20
	0x033E4364 B 0x33E4390
	0x033E4368 LDP X20, X19, [X31 + 0x10]
	0x033E436C LDP X30, X21, [X31], #0x20
	0x033E4370 RET
	0x033E4374 LDR X0, [X0 + 0x30]
	0x033E4378 RET
	0x033E437C ORN W8, W31, W2, 0x0
	0x033E4380 AND W8, W8, 0x1
	0x033E4384 STR X1, [X0 + 0x30]
	0x033E4388 STRB W8, [X0 + 0x38]
	0x033E438C RET
	0x033E4390 SUB X31, X31, 0xB0
	0x033E4394 STP X30, X27, [X31 + 0x60]
	0x033E4398 STP X26, X25, [X31 + 0x70]
	0x033E439C STP X24, X23, [X31 + 0x80]
	0x033E43A0 STP X22, X21, [X31 + 0x90]
	0x033E43A4 STP X20, X19, [X31 + 0xA0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Call Thread.get_CurrentThread
	005 Compare X0, 0
	006 JumpIfEqual {25}
	007 Move X20, [X0+16]
	008 Move X19, X0
	009 Compare X20, 0
	010 JumpIfNotEqual {16}
	011 Move X0, X19
	012 Call 0x1C4D3AC
	013 Move X20, [X19+16]
	014 Compare X20, 0
	015 JumpIfEqual {25}
	016 Move W19, [X20+180]
	017 Call 0x1C17D44
	018 Call 0x1C17D44
	019 Add W8, W19, 1
	020 Move [X20+180], W8
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return 
	025 Call 0x1C17F20

Method: System.Void EndCriticalRegion()

Disassembly:
	0x033E494C STP X20, X19, [X31 + 0x10]
	0x033E4950 ADRP X20, 0xFF9000
	0x033E4954 LDRB W8, [X20 + 0x3BE]
	0x033E4958 MOV X19, X0
	0x033E495C TBNZ X8, 0x0, 0x33E4974
	0x033E4960 ADRP X0, 0xD40000
	0x033E4964 LDR X0, [X0 + 0x760]
	0x033E4968 BL 0x1C16CF4
	0x033E496C MOVZ W8, 0x1
	0x033E4970 STRB W8, [X20 + 0x3BE]
	0x033E4974 LDR X20, [X19 + 0x28]
	0x033E4978 CBNZ X20, 0x33E499C
	0x033E497C ADRP X8, 0xD40000
	0x033E4980 LDR X8, [X8 + 0x760]
	0x033E4984 LDR X0, [X8]
	0x033E4988 BL 0x1C16F10
	0x033E498C MOV X1, X31
	0x033E4990 MOV X20, X0
	0x033E4994 BL 0x3291710
	0x033E4998 STR X20, [X19 + 0x28]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Call Thread.get_CurrentThread
	005 Compare X0, 0
	006 JumpIfEqual {25}
	007 Move X20, [X0+16]
	008 Move X19, X0
	009 Compare X20, 0
	010 JumpIfNotEqual {16}
	011 Move X0, X19
	012 Call 0x1C4D3AC
	013 Move X20, [X19+16]
	014 Compare X20, 0
	015 JumpIfEqual {25}
	016 Move W19, [X20+180]
	017 Call 0x1C17D44
	018 Call 0x1C17D44
	019 Subtract W8, W19, 1
	020 Move [X20+180], W8
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return 
	025 Call 0x1C17F20

Method: System.Int32 GetHashCode()

Disassembly:
	0x033E8188 STR X19, [X20 + 0x20]
	0x033E818C CMP W24, W25
	0x033E8190 LDP X20, X19, [X31 + 0x30]
	0x033E8194 LDP X22, X21, [X31 + 0x20]
	0x033E8198 LDP X24, X23, [X31 + 0x10]
	0x033E819C CSET W0, NE
	0x033E81A0 LDP X30, X25, [X31], #0x40
	0x033E81A4 RET
	0x033E81A8 BL 0x1C16F20
	0x033E81AC BL 0x1C16F28
	0x033E81B0 B 0x1C16D14
	0x033E81B4 STP X30, X21, [X31 - 0x20]!
	0x033E81B8 STP X20, X19, [X31 + 0x10]
	0x033E81BC ADRP X20, 0xFF5000
	0x033E81C0 ADRP X21, 0xD45000
	0x033E81C4 LDRB W8, [X20 + 0x3EF]
	0x033E81C8 LDR X21, [X21 + 0x460]
	0x033E81CC MOV X19, X1
	0x033E81D0 TBNZ X8, 0x0, 0x33E81E8
	0x033E81D4 ADRP X0, 0xD45000
	0x033E81D8 LDR X0, [X0 + 0x460]
	0x033E81DC BL 0x1C16CF4
	0x033E81E0 MOVZ W8, 0x1
	0x033E81E4 STRB W8, [X20 + 0x3EF]
	0x033E81E8 LDR X0, [X21]
	0x033E81EC BL 0x1C16D0C
	0x033E81F0 LDR X8, [X0]
	0x033E81F4 CBZ X8, 0x33E8210
	0x033E81F8 LDR X0, [X8 + 0x18]
	0x033E81FC CBZ X0, 0x33E8220
	0x033E8200 MOV X1, X19
	0x033E8204 LDP X20, X19, [X31 + 0x10]
	0x033E8208 LDP X30, X21, [X31], #0x20
	0x033E820C B 0x33E8224
	0x033E8210 LDP X20, X19, [X31 + 0x10]
	0x033E8214 MOV W0, W31
	0x033E8218 LDP X30, X21, [X31], #0x20
	0x033E821C RET
	0x033E8220 BL 0x1C16F20
	0x033E8224 SUB X31, X31, 0x60
	0x033E8228 STP X30, X27, [X31 + 0x10]
	0x033E822C STP X26, X25, [X31 + 0x20]
	0x033E8230 STP X24, X23, [X31 + 0x30]
	0x033E8234 STP X22, X21, [X31 + 0x40]
	0x033E8238 STP X20, X19, [X31 + 0x50]
	0x033E823C ADRP X21, 0xFF5000
	0x033E8240 LDRB W8, [X21 + 0x3F4]
	0x033E8244 MOV X20, X1
	0x033E8248 MOV X19, X0
	0x033E824C TBNZ X8, 0x0, 0x33E8264
	0x033E8250 ADRP X0, 0xD45000
	0x033E8254 LDR X0, [X0 + 0x200]
	0x033E8258 BL 0x1C16CF4
	0x033E825C MOVZ W8, 0x1
	0x033E8260 STRB W8, [X21 + 0x3F4]
	0x033E8264 STR X31, [X31 + 0x8]
	0x033E8268 STRB W31, [X31 + 0x4]
	0x033E826C LDR X21, [X19 + 0x10]
	0x033E8270 BL 0x1C16D44
	0x033E8274 LDR W22, [X19 + 0x20]
	0x033E8278 BL 0x1C16D44
	0x033E827C LDR W23, [X19 + 0x18]
	0x033E8280 BL 0x1C16D44
	0x033E8284 CBZ X21, 0x33E84F8
	0x033E8288 LDR W9, [X21 + 0x18]
	0x033E828C SUB W8, W22, 0x1
	0x033E8290 AND W8, W23, W8, 0x0
	0x033E8294 CMP W8, W9
	0x033E8298 B.CS 0x33E84F4
	0x033E829C ADD X8, X21, W8, 0x3, SXTW
	0x033E82A0 LDR X8, [X8 + 0x20]
	0x033E82A4 CMP X8, X20
	0x033E82A8 B.EQ 0x33E82D0
	0x033E82AC LDR W21, [X19 + 0x20]
	0x033E82B0 BL 0x1C16D44
	0x033E82B4 LDR W22, [X19 + 0x1C]
	0x033E82B8 SUB W26, W21, 0x2
	0x033E82BC BL 0x1C16D44
	0x033E82C0 CMP W26, W22
	0x033E82C4 B.GE 0x33E8300
	0x033E82C8 MOV W22, W31
	0x033E82CC B 0x33E82E0
	0x033E82D0 ADD X1, X31, 0x8
	0x033E82D4 MOV X0, X19
	0x033E82D8 BL 0x33E8718
	0x033E82DC MOV W22, W0
	0x033E82E0 AND W0, W22, 0x1
	0x033E82E4 LDP X20, X19, [X31 + 0x50]
	0x033E82E8 LDP X22, X21, [X31 + 0x40]
	0x033E82EC LDP X24, X23, [X31 + 0x30]
	0x033E82F0 LDP X26, X25, [X31 + 0x20]
	0x033E82F4 LDP X30, X27, [X31 + 0x10]
	0x033E82F8 ADD X31, X31, 0x60
	0x033E82FC RET
	0x033E8300 ADRP X25, 0xD45000
	0x033E8304 LDR X25, [X25 + 0x200]
	0x033E8308 MOV W22, W31
	0x033E830C ADD X21, X19, 0x24
	0x033E8310 LDR X23, [X19 + 0x10]
	0x033E8314 BL 0x1C16D44
	0x033E8318 LDR W24, [X19 + 0x18]
	0x033E831C BL 0x1C16D44
	0x033E8320 CBZ X23, 0x33E84F8
	0x033E8324 LDR W9, [X23 + 0x18]
	0x033E8328 AND W8, W24, W26, 0x0
	0x033E832C CMP W8, W9
	0x033E8330 B.CS 0x33E84F4
	0x033E8334 ADD X8, X23, W8, 0x3, SXTW
	0x033E8338 LDR X8, [X8 + 0x20]
	0x033E833C CMP X8, X20
	0x033E8340 B.NE 0x33E8474
	0x033E8344 LDR X0, [X25]
	0x033E8348 STRB W31, [X31 + 0x4]
	0x033E834C LDR W8, [X0 + 0xE0]
	0x033E8350 CBNZ W8, 0x33E8358
	0x033E8354 BL 0x1C16DFC
	0x033E8358 ADD X1, X31, 0x4
	0x033E835C MOV X0, X21
	0x033E8360 MOV X2, X31
	0x033E8364 BL 0x33E32A4
	0x033E8368 LDR X23, [X19 + 0x10]
	0x033E836C BL 0x1C16D44
	0x033E8370 LDR W24, [X19 + 0x18]
	0x033E8374 BL 0x1C16D44
	0x033E8378 CBZ X23, 0x33E848C
	0x033E837C LDR W9, [X23 + 0x18]
	0x033E8380 AND W8, W24, W26, 0x0
	0x033E8384 CMP W8, W9
	0x033E8388 B.CS 0x33E8494
	0x033E838C ADD X8, X23, W8, 0x3, SXTW
	0x033E8390 LDR X8, [X8 + 0x20]
	0x033E8394 CBZ X8, 0x33E83F8
	0x033E8398 LDR X23, [X19 + 0x10]
	0x033E839C BL 0x1C16D44
	0x033E83A0 LDR W24, [X19 + 0x18]
	0x033E83A4 BL 0x1C16D44
	0x033E83A8 CBZ X23, 0x33E849C
	0x033E83AC LDR W8, [X23 + 0x18]
	0x033E83B0 AND W24, W24, W26, 0x0
	0x033E83B4 CMP W24, W8
	0x033E83B8 B.CS 0x33E84A4
	0x033E83BC BL 0x1C16D44
	0x033E83C0 ADD X8, X23, W24, 0x3, SXTW
	0x033E83C4 STR X31, [X8 + 0x20]
	0x033E83C8 LDR W23, [X19 + 0x20]
	0x033E83CC BL 0x1C16D44
	0x033E83D0 CMP W26, W23
	0x033E83D4 B.NE 0x33E8408
	0x033E83D8 LDR W27, [X19 + 0x20]
	0x033E83DC BL 0x1C16D44
	0x033E83E0 BL 0x1C16D44
	0x033E83E4 SUB W8, W27, 0x1
	0x033E83E8 MOV X23, X31
	0x033E83EC MOV W24, W31
	0x033E83F0 STR W8, [X19 + 0x20]
	0x033E83F4 B 0x33E8440
	0x033E83F8 MOV X23, X31
	0x033E83FC MOV W24, W31

ISIL:
	001 Call Thread.get_ManagedThreadId, X0
	002 Return X0
	003 Move [X31-64], X30
	004 Move [X31+16], X24
	005 Move [X31+24], X23
	006 Move [X31+32], X22
	007 Move [X31+40], X21
	008 Move [X31+48], X20
	009 Move [X31+56], X19
	010 Move X22, 0xFF6000
	011 Move W8, [X22+999]
	012 Move X19, X2
	013 Move X20, X1
	014 Move X21, X0
	015 Compare W8, 0
	016 JumpIfNotEqual {22}
	017 Move X0, 0xD45000
	018 Move X0, [X0+3560]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+999], W8
	022 Move W8, [X21]
	023 And W31, W8, 255
	024 And W31, W8, 15
	025 Move W9, [X19]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X9, 0xD45000
	028 Move X9, [X9+3560]
	029 Move X0, [X9]
	030 Move W9, [X0+224]
	031 Compare W9, 0
	032 JumpIfNotEqual {35}
	033 Call 0x1C17DFC
	034 Move W8, [X21]
	035 Move X10, [X20]
	036 Move X11, 0x594B
	037 NotImplemented "Instruction MOVK not yet implemented."
	038 NotImplemented "Instruction MOVK not yet implemented."
	039 NotImplemented "Instruction MOVK not yet implemented."
	040 NotImplemented "Instruction INVALID not yet implemented."
	041 Move TEMP, 0x270F
	042 Not TEMP
	043 Move W12, TEMP
	044 Move X9, X9
	045 ShiftRight X9, 11
	046 And X9, X9, 0x7FFFFFFF
	047 Move W13, W8
	048 NotImplemented "Instruction MADD not yet implemented."
	049 NotImplemented "Instruction BFM not yet implemented."
	050 NotImplemented "Instruction INVALID not yet implemented."
	051 Move X10, X10
	052 ShiftRight X10, 11
	053 And X10, X10, 0x7FFFFFFF
	054 Move W11, 0x2710
	055 Multiply W11, W10, W11
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move [X20], X9
	058 Move [X21], W10
	059 Move W8, [X19]
	060 Subtract W8, W8, 4
	061 Move [X19], W8
	062 Move W8, [X21]
	063 And W31, W8, 3
	064 Move W9, [X19]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X9, 0xD45000
	067 Move X9, [X9+3560]
	068 Move X0, [X9]
	069 Move W9, [X0+224]
	070 Compare W9, 0
	071 JumpIfNotEqual {74}
	072 Call 0x1C17DFC
	073 Move W8, [X21]
	074 Move X10, [X20]
	075 Move X11, 0xF5C3
	076 NotImplemented "Instruction MOVK not yet implemented."
	077 NotImplemented "Instruction MOVK not yet implemented."
	078 NotImplemented "Instruction MOVK not yet implemented."
	079 Move X9, X10
	080 ShiftRight X9, 2
	081 And X9, X9, 0x7FFFFFFF
	082 NotImplemented "Instruction INVALID not yet implemented."
	083 Move TEMP, 99
	084 Not TEMP
	085 Move W12, TEMP
	086 Move X9, X9
	087 ShiftRight X9, 2
	088 And X9, X9, 0x7FFFFFFF
	089 Move W13, W8
	090 NotImplemented "Instruction MADD not yet implemented."
	091 NotImplemented "Instruction BFM not yet implemented."
	092 Move X10, X13
	093 ShiftRight X10, 2
	094 And X10, X10, 0x7FFFFFFF
	095 NotImplemented "Instruction INVALID not yet implemented."
	096 Move X10, X10
	097 ShiftRight X10, 2
	098 And X10, X10, 0x7FFFFFFF
	099 Move W11, 100
	100 Multiply W11, W10, W11
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move [X20], X9
	103 Move [X21], W10
	104 Move W8, [X19]
	105 Subtract W8, W8, 2
	106 Move [X19], W8
	107 Move W8, [X21]
	108 Move TEMP, X8
	109 And TEMP, TEMP, 1
	110 Compare TEMP, 1
	111 JumpIfEqual {146}
	112 Move W9, [X19]
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move X9, 0xD45000
	115 Move X9, [X9+3560]
	116 Move X0, [X9]
	117 Move W9, [X0+224]
	118 Compare W9, 0
	119 JumpIfNotEqual {122}
	120 Call 0x1C17DFC
	121 Move W8, [X21]
	122 Move X10, [X20]
	123 Or X11, X31, -3689348814741910324
	124 NotImplemented "Instruction MOVK not yet implemented."
	125 Move TEMP, 9
	126 Not TEMP
	127 Move W12, TEMP
	128 NotImplemented "Instruction INVALID not yet implemented."
	129 Move X9, X9
	130 ShiftRight X9, 3
	131 And X9, X9, 0x7FFFFFFF
	132 NotImplemented "Instruction MADD not yet implemented."
	133 Move W12, W8
	134 NotImplemented "Instruction BFM not yet implemented."
	135 NotImplemented "Instruction INVALID not yet implemented."
	136 Move X10, X10
	137 ShiftRight X10, 3
	138 And X10, X10, 0x7FFFFFFF
	139 Add W11, W10, W10
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Move [X20], X9
	142 Move [X21], W10
	143 Move W8, [X19]
	144 Subtract W8, W8, 1
	145 Move [X19], W8
	146 Move X20, [X31+48]
	147 Move X19, [X31+56]
	148 Move X22, [X31+32]
	149 Move X21, [X31+40]
	150 Move X24, [X31+16]
	151 Move X23, [X31+24]
	152 Move X30, [X31+64]
	153 Return X0
	154 Move X23, 0xD45000
	155 Move W9, [X19]
	156 Move X23, [X23+3560]
	157 Move W22, 0xE100
	158 Move W24, 0x1F00
	159 NotImplemented "Instruction MOVK not yet implemented."
	160 NotImplemented "Instruction MOVK not yet implemented."
	161 NotImplemented "Instruction CMP not yet implemented."
	162 Move X0, [X23]
	163 Move W9, [X0+224]
	164 Compare W9, 0
	165 JumpIfNotEqual {168}
	166 Call 0x1C17DFC
	167 Move W8, [X21]
	168 Move X10, [X20]
	169 Move W11, W8
	170 NotImplemented "Instruction UDIV not yet implemented."
	171 NotImplemented "Instruction MADD not yet implemented."
	172 NotImplemented "Instruction BFM not yet implemented."
	173 NotImplemented "Instruction UDIV not yet implemented."
	174 Multiply W11, W10, W22
	175 NotImplemented "Instruction CMP not yet implemented."
	176 Move [X20], X9
	177 Move [X21], W10
	178 Move W8, [X19]
	179 Subtract W9, W8, 8
	180 Move [X19], W9
	181 Move W8, [X21]
	182 And W31, W8, 255

Method: System.Threading.ThreadState ValidateThreadState()

Disassembly:
	0x033E8060 LDR X8, [X31]
	0x033E8064 CBZ X8, 0x33E80E8
	0x033E8068 LDR X0, [X31]
	0x033E806C BL 0x1C16F18
	0x033E8070 B 0x33E8090
	0x033E8074 B 0x33E8090
	0x033E8078 B 0x33E8090
	0x033E807C B 0x33E8090
	0x033E8080 B 0x33E8090
	0x033E8084 B 0x33E8090
	0x033E8088 B 0x33E8090
	0x033E808C B 0x33E8090
	0x033E8090 MOV X21, X0
	0x033E8094 CMP W1, 0x1
	0x033E8098 B.NE 0x33E80B0
	0x033E809C MOV X0, X21
	0x033E80A0 BL 0x3EB1AD0
	0x033E80A4 LDR X20, [X0]
	0x033E80A8 BL 0x3EB1AE0
	0x033E80AC B 0x33E7F24
	0x033E80B0 MOV X20, X31
	0x033E80B4 B 0x33E80BC
	0x033E80B8 MOV X21, X0
	0x033E80BC LDRB W8, [X31 + 0x8]
	0x033E80C0 CBZ W8, 0x33E80E4
	0x033E80C4 LDR X0, [X23]
	0x033E80C8 LDR W8, [X0 + 0xE0]
	0x033E80CC CBNZ W8, 0x33E80D4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+16]
	005 Compare X0, 0
	006 JumpIfNotEqual {10}
	007 Move X0, X19
	008 Call 0x1C4D3AC
	009 Move X0, [X19+16]
	010 Call 0x1C4D364
	011 Move TEMP, X0
	012 And TEMP, TEMP, 16
	013 Compare TEMP, 16
	014 JumpIfEqual {18}
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Return X0
	018 Move X0, 0xD46000
	019 Move X0, [X0+1064]
	020 Call 0x1C17D08
	021 Call 0x1C17F10
	022 Move X19, X0
	023 Move X0, 0xD46000
	024 Move X0, [X0+1072]
	025 Call 0x1C17D08
	026 Move X1, X0
	027 Move X0, X19
	028 Call ThreadStateException..ctor, X0, X1
	029 Move X0, 0xD46000
	030 Move X0, [X0+1080]
	031 Call 0x1C17D08
	032 Move X1, X0
	033 Move X0, X19
	034 Call 0x1C17DEC

