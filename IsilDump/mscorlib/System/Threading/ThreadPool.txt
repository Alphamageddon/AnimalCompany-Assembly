Type: System.Threading.ThreadPool

Method: System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, System.Object state, System.UInt32 millisecondsTimeOutInterval, System.Boolean executeOnlyOnce, ref System.Threading.StackCrawlMark stackMark, System.Boolean compressStack)

Disassembly:
	0x033EA8C0 RET
	0x033EA8C4 BL 0x1C16F28
	0x033EA8C8 BL 0x1C16F20
	0x033EA8CC ADRP X0, 0xD43000
	0x033EA8D0 LDR X0, [X0 + 0x530]
	0x033EA8D4 BL 0x1C16D08
	0x033EA8D8 MOV X1, X31
	0x033EA8DC BL 0x33BDD84
	0x033EA8E0 MOV X19, X0
	0x033EA8E4 ADRP X0, 0xD0E000
	0x033EA8E8 LDR X0, [X0 + 0x528]
	0x033EA8EC BL 0x1C16D08
	0x033EA8F0 BL 0x1C16F10
	0x033EA8F4 MOV X1, X19
	0x033EA8F8 MOV X2, X31
	0x033EA8FC MOV X20, X0
	0x033EA900 BL 0x330E100
	0x033EA904 ADRP X0, 0xD43000
	0x033EA908 LDR X0, [X0 + 0x538]
	0x033EA90C BL 0x1C16D08
	0x033EA910 MOV X1, X0
	0x033EA914 MOV X0, X20
	0x033EA918 BL 0x1C16DEC
	0x033EA91C BL 0x1C16F44
	0x033EA920 MOV X1, X31
	0x033EA924 BL 0x1C16DEC
	0x033EA928 ADRP X0, 0xD43000
	0x033EA92C LDR X0, [X0 + 0x540]
	0x033EA930 B 0x33EA8D4
	0x033EA934 ADRP X0, 0xD43000
	0x033EA938 LDR X0, [X0 + 0x548]
	0x033EA93C BL 0x1C16D08
	0x033EA940 MOV X1, X31
	0x033EA944 BL 0x33BDD84
	0x033EA948 MOV X19, X0
	0x033EA94C ADRP X0, 0xD11000
	0x033EA950 LDR X0, [X0 + 0x578]
	0x033EA954 BL 0x1C16D08
	0x033EA958 BL 0x1C16F10
	0x033EA95C MOV X1, X19
	0x033EA960 MOV X2, X31
	0x033EA964 MOV X20, X0
	0x033EA968 BL 0x3314A68
	0x033EA96C B 0x33EA904
	0x033EA970 ADRP X0, 0xD43000
	0x033EA974 LDR X0, [X0 + 0x550]
	0x033EA978 BL 0x1C16D08
	0x033EA97C MOV X1, X31
	0x033EA980 BL 0x33BDD84
	0x033EA984 MOV X19, X0
	0x033EA988 ADRP X0, 0xD09000
	0x033EA98C LDR X0, [X0 + 0xB40]
	0x033EA990 BL 0x1C16D08
	0x033EA994 BL 0x1C16F10
	0x033EA998 MOV X1, X19
	0x033EA99C MOV X2, X31
	0x033EA9A0 MOV X20, X0
	0x033EA9A4 BL 0x3379A44
	0x033EA9A8 B 0x33EA904
	0x033EA9AC ADRP X0, 0xD42000
	0x033EA9B0 LDR X0, [X0 + 0xFF0]
	0x033EA9B4 BL 0x1C16D08
	0x033EA9B8 MOV X1, X31
	0x033EA9BC BL 0x33BDD84
	0x033EA9C0 MOV X19, X0
	0x033EA9C4 ADRP X0, 0xD11000
	0x033EA9C8 LDR X0, [X0 + 0x760]
	0x033EA9CC BL 0x1C16D08
	0x033EA9D0 BL 0x1C16F10
	0x033EA9D4 MOV X20, X0
	0x033EA9D8 ADRP X0, 0xD42000
	0x033EA9DC LDR X0, [X0 + 0xFD8]
	0x033EA9E0 BL 0x1C16D08
	0x033EA9E4 MOV X1, X0
	0x033EA9E8 MOV X0, X20
	0x033EA9EC MOV X2, X19
	0x033EA9F0 MOV X3, X31
	0x033EA9F4 BL 0x3311888
	0x033EA9F8 B 0x33EA904
	0x033EA9FC CMP W19, W8
	0x033EAA00 B.GE 0x33EAA34
	0x033EAA04 MOV X0, X20
	0x033EAA08 BL 0x19903C0
	0x033EAA0C MOV W1, W19
	0x033EAA10 MOV X0, X20
	0x033EAA14 BL 0x1BB5160
	0x033EAA18 LDR X8, [X22]
	0x033EAA1C MOV X20, X0
	0x033EAA20 MOV X0, X8
	0x033EAA24 BL 0x19903D0
	0x033EAA28 MOV W0, W19
	0x033EAA2C MOV X1, X20
	0x033EAA30 BL 0x33EAE14
	0x033EAA34 LDR X0, [X22]
	0x033EAA38 BL 0x19903D0
	0x033EAA3C BL 0x33EA724
	0x033EAA40 STP X29, X30, [X31 - 0x60]!
	0x033EAA44 STP X28, X27, [X31 + 0x10]
	0x033EAA48 STP X26, X25, [X31 + 0x20]
	0x033EAA4C STP X24, X23, [X31 + 0x30]
	0x033EAA50 STP X22, X21, [X31 + 0x40]
	0x033EAA54 STP X20, X19, [X31 + 0x50]
	0x033EAA58 ADD X29, X31, 0x0
	0x033EAA5C SUB X31, X31, 0x10
	0x033EAA60 MRS X25, 0xC000
	0x033EAA64 LDR X8, [X25 + 0x28]
	0x033EAA68 ADRP X22, 0xFF3000
	0x033EAA6C MOV W21, W3
	0x033EAA70 MOV W20, W1
	0x033EAA74 STUR X8, [X29 - 0x8]
	0x033EAA78 LDRB W8, [X22 + 0x413]
	0x033EAA7C MOV X19, X0
	0x033EAA80 TBNZ X8, 0x0, 0x33EAAB0

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X25, 0xFF4000
	013 Move W8, [X25+1025]
	014 Move W19, W6
	015 Move W22, W4
	016 Move W24, W3
	017 Move X20, X2
	018 Move X21, X1
	019 Move X23, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {35}
	024 Move X0, 0xD44000
	025 Move X0, [X0+1200]
	026 Call 0x1C17CF4
	027 Move X0, 0xD44000
	028 Move X0, [X0+1208]
	029 Call 0x1C17CF4
	030 Move X0, 0xD13000
	031 Move X0, [X0+2392]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X25+1025], W8
	035 Compare X23, 0
	036 JumpIfEqual {91}
	037 Compare X21, 0
	038 JumpIfEqual {98}
	039 Add W31, W24, 2
	040 Move X25, 0xD44000
	041 Move X26, 0xD13000
	042 Move X27, 0xD44000
	043 Move X25, [X25+1208]
	044 Move X26, [X26+2392]
	045 Move X27, [X27+1200]
	046 Add X0, X31, 8
	047 Move W1, W31
	048 Move W2, W31
	049 Move W3, W31
	050 Move W4, W31
	051 Move W5, W24
	052 Move X6, X31
	053 Move [X31+8], X31
	054 Call TimeSpan..ctor, X0, X1, X2, X3, X4, X5
	055 Move X0, [X25]
	056 Call 0x1C17F10
	057 Move X4, [X31+8]
	058 And W5, W22, 1
	059 Move X1, X23
	060 Move X2, X21
	061 Move X3, X20
	062 Move X24, X0
	063 Call RegisteredWaitHandle..ctor, X0, X1, X2, X3, X4, X5
	064 Move X0, [X26]
	065 Call 0x1C17F10
	066 Move X2, [X27]
	067 Move X1, X24
	068 Move X20, X0
	069 Call WaitCallback..ctor, X0, X1, X2
	070 Move X0, X20
	071 Move X1, X31
	072 Move TEMP, X19
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfNotEqual {77}
	076 Call ThreadPool.QueueUserWorkItem, X0, X1
	077 Call ThreadPool.UnsafeQueueUserWorkItem, X0, X1
	078 Move X0, X24
	079 Move X20, [X31+80]
	080 Move X19, [X31+88]
	081 Move X22, [X31+64]
	082 Move X21, [X31+72]
	083 Move X24, [X31+48]
	084 Move X23, [X31+56]
	085 Move X26, [X31+32]
	086 Move X25, [X31+40]
	087 Move X30, [X31+16]
	088 Move X27, [X31+24]
	089 Add X31, X31, 96
	090 Return X0
	091 Move X0, 0xD0F000
	092 Move X0, [X0+1320]
	093 Call 0x1C17D08
	094 Call 0x1C17F10
	095 Move X19, X0
	096 Move X0, 0xD44000
	097 Move X0, [X0+1216]
	098 Move X0, 0xD0F000
	099 Move X0, [X0+1320]
	100 Call 0x1C17D08
	101 Call 0x1C17F10
	102 Move X19, X0
	103 Move X0, 0xD33000
	104 Move X0, [X0+1968]
	105 Call 0x1C17D08
	106 Move X1, X0
	107 Move X0, X19
	108 Move X2, X31
	109 Call ArgumentNullException..ctor, X0, X1
	110 Move X0, 0xD0A000
	111 Move X0, [X0+2880]
	112 Call 0x1C17D08
	113 Call 0x1C17F10
	114 Move X19, X0
	115 Move X0, 0xD44000
	116 Move X0, [X0+1224]
	117 Call 0x1C17D08
	118 Move X1, X0
	119 Move X0, X19
	120 Move X2, X31
	121 Call NotSupportedException..ctor, X0, X1
	122 Move X0, 0xD44000
	123 Move X0, [X0+1232]
	124 Call 0x1C17D08
	125 Move X1, X0
	126 Move X0, X19
	127 Call 0x1C17DEC

Method: System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, System.Object state, System.TimeSpan timeout, System.Boolean executeOnlyOnce)

Disassembly:
	0x033EAB84 CBZ X0, 0x33EAD2C
	0x033EAB88 CBZ X21, 0x33EAD24
	0x033EAB8C LDR W8, [X21 + 0x18]
	0x033EAB90 CMP W23, W8
	0x033EAB94 B.CS 0x33EAD30
	0x033EAB98 LDR X8, [X0 + 0x10]
	0x033EAB9C STR X8, [X26, X23, LSL #3]
	0x033EABA0 LDR W8, [X19 + 0x18]
	0x033EABA4 ADD X23, X23, 0x1
	0x033EABA8 CMP W23, W8
	0x033EABAC B.LT 0x33EAB70
	0x033EABB0 LDR X8, [X22]
	0x033EABB4 LDP X9, X4, [X8 + 0x1B8]
	0x033EABB8 MOV X0, X22
	0x033EABBC MOV X1, X21
	0x033EABC0 MOV W2, W31
	0x033EABC4 MOV W3, W20
	0x033EABC8 BLR X9
	0x033EABCC B 0x33EAC84
	0x033EABD0 MOVN W20, 0x80000000
	0x033EABD4 B 0x33EACD0
	0x033EABD8 LDR X23, [X19 + 0x18]
	0x033EABDC UBFM X8, X23, 0x20, 0x1F
	0x033EABE0 SBFM X2, X23, 0x3D, 0x1F
	0x033EABE4 CBZ X8, 0x33EAC00
	0x033EABE8 ADD X9, X2, 0xF
	0x033EABEC ADD X8, X31, 0x0
	0x033EABF0 AND X9, X9, 0xFFFFFFFF
	0x033EABF4 SUB X22, X8, X9
	0x033EABF8 ADD X31, X22, 0x0
	0x033EABFC B 0x33EAC04
	0x033EAC00 MOV X22, X31
	0x033EAC04 MOV X0, X22
	0x033EAC08 MOV W1, W31
	0x033EAC0C BL 0x3EB1B10
	0x033EAC10 CMP W23, 0x1
	0x033EAC14 B.LT 0x33EAC54
	0x033EAC18 MOV X26, X31
	0x033EAC1C ADD X27, X19, 0x20
	0x033EAC20 MOV X28, X22
	0x033EAC24 CMP W26, W23
	0x033EAC28 B.CS 0x33EAD20
	0x033EAC2C LDR X0, [X27, X26, LSL #3]
	0x033EAC30 CBZ X0, 0x33EAD18
	0x033EAC34 BL 0x33EA154
	0x033EAC38 CBZ X0, 0x33EAD1C
	0x033EAC3C LDR X8, [X0 + 0x10]
	0x033EAC40 ADD X26, X26, 0x1
	0x033EAC44 STR X8, [X28], #0x8
	0x033EAC48 LDR X23, [X19 + 0x18]
	0x033EAC4C CMP W26, W23
	0x033EAC50 B.LT 0x33EAC24
	0x033EAC54 ADRP X8, 0xD43000
	0x033EAC58 LDR X8, [X8 + 0x268]
	0x033EAC5C LDR X0, [X8]
	0x033EAC60 LDR W8, [X0 + 0xE0]
	0x033EAC64 CBNZ W8, 0x33EAC70
	0x033EAC68 BL 0x1C16DFC
	0x033EAC6C LDR X23, [X19 + 0x18]
	0x033EAC70 AND W2, W21, 0x1
	0x033EAC74 MOV X0, X22
	0x033EAC78 MOV W1, W23
	0x033EAC7C MOV W3, W20
	0x033EAC80 BL 0x1C4C540
	0x033EAC84 MOV W20, W0
	0x033EAC88 MOV X21, X31
	0x033EAC8C TBNZ X24, 0x1F, 0x33EACCC
	0x033EAC90 ADD X8, X19, W24, 0x3, UXTW
	0x033EAC94 ADD X22, X8, 0x20
	0x033EAC98 LDR W8, [X19 + 0x18]
	0x033EAC9C CMP W24, W8
	0x033EACA0 B.CS 0x33EAD08
	0x033EACA4 LDR X0, [X22]
	0x033EACA8 CBZ X0, 0x33EAD04
	0x033EACAC BL 0x33EA154
	0x033EACB0 CBZ X0, 0x33EAD04

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xFF4000
	009 Move [X31+8], X3
	010 Move X24, 0xD0C000
	011 Move W8, [X23+1026]
	012 Move X24, [X24+1392]
	013 Move W22, W4
	014 Move X19, X2
	015 Move X20, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xD0C000
	022 Move X0, [X0+1392]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+1026], W8
	026 Move X0, [X24]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Add X0, X31, 8
	032 Move X1, X31
	033 Call TimeSpan.get_TotalMilliseconds, X0
	034 Move X8, 0x7FF00000
	035 Move D1, X8
	036 NotImplemented "Instruction FCVTZS not yet implemented."
	037 NotImplemented "Instruction FCMP not yet implemented."
	038 Move X8, 0x80000000
	039 NotImplemented "Instruction CSEL not yet implemented."
	040 Add X31, X3, 2
	041 Move W8, 0x80000000
	042 NotImplemented "Instruction CMP not yet implemented."
	043 And W4, W22, 1
	044 Move W6, 1
	045 Move X0, X21
	046 Move X1, X20
	047 Move X2, X19
	048 Call ThreadPool.RegisterWaitForSingleObject, X0, X1, X2, X3, X4, X5, X6
	049 Move X20, [X31+48]
	050 Move X19, [X31+56]
	051 Move X22, [X31+32]
	052 Move X21, [X31+40]
	053 Move X24, [X31+16]
	054 Move X23, [X31+24]
	055 Move X30, [X31+64]
	056 Return X0
	057 Move X0, 0xD43000
	058 Move X0, [X0+4080]
	059 Move X0, 0xD44000
	060 Move X0, [X0+1240]
	061 Call 0x1C17D08
	062 Move X1, X31
	063 Call Environment.GetResourceString, X0
	064 Move X19, X0
	065 Move X0, 0xD12000
	066 Move X0, [X0+1888]
	067 Call 0x1C17D08
	068 Call 0x1C17F10
	069 Move X20, X0
	070 Move X0, 0xD44000
	071 Move X0, [X0+1248]
	072 Call 0x1C17D08
	073 Move X1, X0
	074 Move X0, X20
	075 Move X2, X19
	076 Move X3, X31
	077 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	078 Move X0, 0xD44000
	079 Move X0, [X0+1256]
	080 Call 0x1C17D08
	081 Move X1, X0
	082 Move X0, X20
	083 Call 0x1C17DEC

Method: System.Boolean QueueUserWorkItem(System.Threading.WaitCallback callBack, System.Object state)

Disassembly:
	0x033EAB34 MOV X1, X31
	0x033EAB38 BL 0x33E59F4
	0x033EAB3C TBZ X0, 0x0, 0x33EABD8
	0x033EAB40 ADRP X8, 0xD42000
	0x033EAB44 LDR X8, [X8 + 0x448]
	0x033EAB48 LDR W1, [X19 + 0x18]
	0x033EAB4C LDR X0, [X8]
	0x033EAB50 BL 0x1C16D6C
	0x033EAB54 LDR W8, [X19 + 0x18]
	0x033EAB58 MOV X21, X0

ISIL:
	001 Move [X31-16], X30
	002 Move W8, 1
	003 Add X2, X31, 12
	004 Move W3, 1
	005 Move W4, 1
	006 Move [X31+12], W8
	007 Call ThreadPool.QueueUserWorkItemHelper, X0, X1, X2, X3, X4
	008 And W0, W0, 1
	009 Move X30, [X31+16]
	010 Return X0

Method: System.Boolean QueueUserWorkItem(System.Threading.WaitCallback callBack)

Disassembly:
	0x033EADCC BL 0x33EA154
	0x033EADD0 CBZ X0, 0x33EAE08
	0x033EADD4 MOV X1, X31
	0x033EADD8 BL 0x32BFAB4
	0x033EADDC CMP W24, 0x0
	0x033EADE0 SUB W24, W24, 0x1
	0x033EADE4 SUB X22, X22, 0x8
	0x033EADE8 B.GT 0x33EADB8
	0x033EADEC CBNZ X21, 0x33EADF8
	0x033EADF0 MOV X0, X20
	0x033EADF4 BL 0x1D2C690

ISIL:
	001 Move [X31-16], X30
	002 Move W8, 1
	003 Add X2, X31, 12
	004 Move W3, 1
	005 Move W4, 1
	006 Move X1, X31
	007 Move [X31+12], W8
	008 Call ThreadPool.QueueUserWorkItemHelper, X0, X1, X2, X3, X4
	009 And W0, W0, 1
	010 Move X30, [X31+16]
	011 Return X0

Method: System.Boolean UnsafeQueueUserWorkItem(System.Threading.WaitCallback callBack, System.Object state)

Disassembly:
	0x033EAB5C CMP W8, 0x1
	0x033EAB60 B.LT 0x33EABB0
	0x033EAB64 MOV X23, X31
	0x033EAB68 ADD X26, X21, 0x20
	0x033EAB6C ADD X27, X19, 0x20
	0x033EAB70 CMP W23, W8
	0x033EAB74 B.CS 0x33EAD34
	0x033EAB78 LDR X0, [X27, X23, LSL #3]
	0x033EAB7C CBZ X0, 0x33EAD28
	0x033EAB80 BL 0x33EA154

ISIL:
	001 Move [X31-16], X30
	002 Move W8, 1
	003 Add X2, X31, 12
	004 Move W4, 1
	005 Move W3, W31
	006 Move [X31+12], W8
	007 Call ThreadPool.QueueUserWorkItemHelper, X0, X1, X2, X3, X4
	008 And W0, W0, 1
	009 Move X30, [X31+16]
	010 Return X0

Method: System.Boolean QueueUserWorkItem(System.Action`1<TState> callBack, TState state, System.Boolean preferLocal)

Disassembly:
	0x0229DB40 MOV X2, X21
	0x0229DB44 BL 0x3EB1B10
	0x0229DB48 MOV X0, X22
	0x0229DB4C MOV X1, X23
	0x0229DB50 MOV X2, X21
	0x0229DB54 BL 0x3EB1AC0
	0x0229DB58 LDR X0, [X25]
	0x0229DB5C MOV X1, X22
	0x0229DB60 BL 0x1C16ED4
	0x0229DB64 TBZ X0, 0x0, 0x229DB74
	0x0229DB68 MOV W0, W19
	0x0229DB6C MOV X1, X31
	0x0229DB70 BL 0x338F3E0
	0x0229DB74 LDR X8, [X24 + 0x28]
	0x0229DB78 LDUR X9, [X29 - 0x8]
	0x0229DB7C CMP X8, X9
	0x0229DB80 B.NE 0x229DBA0
	0x0229DB84 ADD X31, X29, 0x0
	0x0229DB88 LDP X20, X19, [X31 + 0x40]
	0x0229DB8C LDP X22, X21, [X31 + 0x30]
	0x0229DB90 LDP X24, X23, [X31 + 0x20]
	0x0229DB94 LDR X25, [X31 + 0x10]
	0x0229DB98 LDP X29, X30, [X31], #0x50
	0x0229DB9C RET
	0x0229DBA0 BL 0x3EB1B20
	0x0229DBA4 CBZ X0, 0x229DBAC
	0x0229DBA8 RET
	0x0229DBAC MOV W0, W1
	0x0229DBB0 MOV X1, X31
	0x0229DBB4 B 0x338F3E0
	0x0229DBB8 CBZ X0, 0x229DBC0
	0x0229DBBC RET
	0x0229DBC0 MOV W0, W1
	0x0229DBC4 MOV X1, X31
	0x0229DBC8 B 0x338F3E0
	0x0229DBCC CBZ X0, 0x229DBD4
	0x0229DBD0 RET
	0x0229DBD4 MOV W0, W1
	0x0229DBD8 MOV X1, X31
	0x0229DBDC B 0x338F3E0
	0x0229DBE0 CBZ X0, 0x229DBE8
	0x0229DBE4 RET
	0x0229DBE8 MOV W0, W1
	0x0229DBEC MOV X1, X31
	0x0229DBF0 B 0x338F3E0
	0x0229DBF4 CBZ X0, 0x229DBFC
	0x0229DBF8 RET
	0x0229DBFC MOV W0, W1
	0x0229DC00 MOV X1, X31
	0x0229DC04 B 0x338F3E0
	0x0229DC08 CBZ X0, 0x229DC10
	0x0229DC0C RET
	0x0229DC10 MOV W0, W1
	0x0229DC14 MOV X1, X31
	0x0229DC18 B 0x338F3E0
	0x0229DC1C CBZ X0, 0x229DC24
	0x0229DC20 RET
	0x0229DC24 MOV W0, W1
	0x0229DC28 MOV X1, X31
	0x0229DC2C B 0x338F3E0
	0x0229DC30 CBZ X0, 0x229DC38
	0x0229DC34 RET
	0x0229DC38 MOV W0, W1
	0x0229DC3C MOV X1, X31
	0x0229DC40 B 0x338F3E0
	0x0229DC44 CBZ X0, 0x229DC4C
	0x0229DC48 RET
	0x0229DC4C MOV W0, W1
	0x0229DC50 MOV X1, X31
	0x0229DC54 B 0x338F3E0
	0x0229DC58 CBZ X0, 0x229DC60
	0x0229DC5C RET

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X3+56]
	009 Move X19, X3
	010 Move W21, W2
	011 Move X20, X1
	012 Move X22, X0
	013 Compare X8, 0
	014 JumpIfNotEqual {24}
	015 Move X0, 0x1E60000
	016 Move X0, [X0+2392]
	017 Call 0x1C17CF4
	018 Move X8, [X19+56]
	019 Compare X8, 0
	020 JumpIfNotEqual {24}
	021 Move X0, X19
	022 Call 0x1C5D6E0
	023 Move X8, [X19+56]
	024 Move X0, [X8]
	025 Move W8, [X0+309]
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {31}
	030 Call 0x1C5D684
	031 Call 0x1C17F10
	032 Move X8, [X19+56]
	033 Move X23, X0
	034 Move X1, [X8+8]
	035 Call 0x2373F1C, X0
	036 Compare X23, 0
	037 JumpIfEqual {70}
	038 Move [X23+16], X22
	039 Compare X22, 0
	040 JumpIfEqual {71}
	041 Move X8, 0x1E60000
	042 Move X8, [X8+2392]
	043 Move X0, [X8]
	044 Move W8, 1
	045 Move [X31+12], W8
	046 Call 0x1C17F10
	047 Move X8, [X19+56]
	048 Move X1, X23
	049 Move X3, X31
	050 Move X19, X0
	051 Move X2, [X8+24]
	052 Call WaitCallback..ctor, X0, X1, X2
	053 NotImplemented "Instruction ORN not yet implemented."
	054 And W4, W8, 1
	055 Add X2, X31, 12
	056 Move W3, 1
	057 Move X0, X19
	058 Move X1, X20
	059 Move X5, X31
	060 Call ThreadPool.QueueUserWorkItemHelper, X0, X1, X2, X3, X4
	061 Move X20, [X31+48]
	062 Move X19, [X31+56]
	063 Move X22, [X31+32]
	064 Move X21, [X31+40]
	065 Move X30, [X31+16]
	066 Move X23, [X31+24]
	067 And W0, W0, 1
	068 Add X31, X31, 64
	069 Return X0
	070 Call 0x1C17F20
	071 Move X0, 0x1E5C000
	072 Move X0, [X0+1320]
	073 Call 0x1C17D08
	074 Call 0x1C17F10
	075 Move X20, X0
	076 Move X0, 0x1E80000
	077 Move X0, [X0+1968]
	078 Call 0x1C17D08
	079 Move X1, X0
	080 Move X0, X20
	081 Move X2, X31
	082 Call ArgumentNullException..ctor, X0, X1
	083 Move X0, X20
	084 Move X1, X19
	085 Call 0x1C17DEC

Method: System.Boolean QueueUserWorkItemHelper(System.Threading.WaitCallback callBack, System.Object state, ref System.Threading.StackCrawlMark stackMark, System.Boolean compressStack, System.Boolean forceGlobal = True)

Disassembly:
	0x033EACB4 MOV X1, X31
	0x033EACB8 BL 0x32BFAB4
	0x033EACBC CMP W24, 0x0
	0x033EACC0 SUB W24, W24, 0x1
	0x033EACC4 SUB X22, X22, 0x8
	0x033EACC8 B.GT 0x33EAC98
	0x033EACCC CBNZ X21, 0x33EAD38
	0x033EACD0 LDR X8, [X25 + 0x28]
	0x033EACD4 LDUR X9, [X29 - 0x8]
	0x033EACD8 CMP X8, X9
	0x033EACDC B.NE 0x33EAD40
	0x033EACE0 MOV W0, W20
	0x033EACE4 ADD X31, X29, 0x0
	0x033EACE8 LDP X20, X19, [X31 + 0x50]
	0x033EACEC LDP X22, X21, [X31 + 0x40]
	0x033EACF0 LDP X24, X23, [X31 + 0x30]
	0x033EACF4 LDP X26, X25, [X31 + 0x20]
	0x033EACF8 LDP X28, X27, [X31 + 0x10]
	0x033EACFC LDP X29, X30, [X31], #0x60
	0x033EAD00 RET
	0x033EAD04 BL 0x1C16F20
	0x033EAD08 BL 0x1C16F28
	0x033EAD0C BL 0x1C16F20
	0x033EAD10 BL 0x1C16F20
	0x033EAD14 BL 0x1C16F28
	0x033EAD18 BL 0x1C16F20
	0x033EAD1C BL 0x1C16F20
	0x033EAD20 BL 0x1C16F28
	0x033EAD24 BL 0x1C16F20
	0x033EAD28 BL 0x1C16F20
	0x033EAD2C BL 0x1C16F20
	0x033EAD30 BL 0x1C16F28
	0x033EAD34 BL 0x1C16F28
	0x033EAD38 MOV X0, X21
	0x033EAD3C BL 0x1C16F18
	0x033EAD40 BL 0x3EB1B20
	0x033EAD44 B 0x33EAD78
	0x033EAD48 B 0x33EAD78
	0x033EAD4C B 0x33EAD78
	0x033EAD50 B 0x33EAD78
	0x033EAD54 B 0x33EAD78
	0x033EAD58 B 0x33EAD78
	0x033EAD5C B 0x33EAD78
	0x033EAD60 B 0x33EAD78
	0x033EAD64 B 0x33EAD78
	0x033EAD68 B 0x33EAD78
	0x033EAD6C B 0x33EAD78
	0x033EAD70 B 0x33EAD78
	0x033EAD74 B 0x33EAD78
	0x033EAD78 MOV X20, X0
	0x033EAD7C CMP W1, 0x1
	0x033EAD80 B.NE 0x33EADA0
	0x033EAD84 MOV X0, X20
	0x033EAD88 BL 0x3EB1AD0
	0x033EAD8C LDR X21, [X0]
	0x033EAD90 BL 0x3EB1AE0
	0x033EAD94 MOV W20, W31
	0x033EAD98 TBZ X24, 0x1F, 0x33EAC90
	0x033EAD9C B 0x33EACCC
	0x033EADA0 MOV X21, X31
	0x033EADA4 B 0x33EADAC
	0x033EADA8 MOV X20, X0
	0x033EADAC TBNZ X24, 0x1F, 0x33EADEC
	0x033EADB0 ADD X8, X19, W24, 0x3, UXTW
	0x033EADB4 ADD X22, X8, 0x20
	0x033EADB8 LDR W8, [X19 + 0x18]
	0x033EADBC CMP W24, W8
	0x033EADC0 B.CS 0x33EAE00
	0x033EADC4 LDR X0, [X22]
	0x033EADC8 CBZ X0, 0x33EAE04

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X23, 0xFF4000
	010 Move W8, [X23+1027]
	011 Move W19, W4
	012 Move W22, W3
	013 Move X20, X2
	014 Move X21, X1
	015 Move X24, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0xD44000
	021 Move X0, [X0+1184]
	022 Call 0x1C17CF4
	023 Move X0, 0xD44000
	024 Move X0, [X0+1088]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X23+1027], W8
	028 Compare X24, 0
	029 JumpIfEqual {66}
	030 Move X23, 0xD44000
	031 Move X25, 0xD44000
	032 Move X23, [X23+1184]
	033 Move X25, [X25+1088]
	034 Call ThreadPool.EnsureVMInitialized
	035 Move X0, [X23]
	036 Call 0x1C17F10
	037 And W3, W22, 1
	038 Move X1, X24
	039 Move X2, X21
	040 Move X4, X20
	041 Move X23, X0
	042 Call QueueUserWorkItemCallback..ctor, X0, X1, X2, X3, X4
	043 Move X0, [X25]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {49}
	047 Call 0x1C17DFC
	048 Move X0, [X25]
	049 Move X8, [X0+184]
	050 Move X0, [X8+8]
	051 Compare X0, 0
	052 JumpIfEqual {84}
	053 And W2, W19, 1
	054 Move X1, X23
	055 Call ThreadPoolWorkQueue.Enqueue, X0, X1, X2
	056 Move X20, [X31+48]
	057 Move X19, [X31+56]
	058 Move X22, [X31+32]
	059 Move X21, [X31+40]
	060 Move X24, [X31+16]
	061 Move X23, [X31+24]
	062 Move W0, 1
	063 Move X30, [X31+64]
	064 Move X25, [X31+72]
	065 Return X0
	066 Move X0, 0xD0F000
	067 Move X0, [X0+1320]
	068 Call 0x1C17D08
	069 Call 0x1C17F10
	070 Move X19, X0
	071 Move X0, 0xD44000
	072 Move X0, [X0+1264]
	073 Call 0x1C17D08
	074 Move X1, X0
	075 Move X0, X19
	076 Move X2, X31
	077 Call ArgumentNullException..ctor, X0, X1
	078 Move X0, 0xD44000
	079 Move X0, [X0+1272]
	080 Call 0x1C17D08
	081 Move X1, X0
	082 Move X0, X19
	083 Call 0x1C17DEC
	084 Call 0x1C17F20

Method: System.Void UnsafeQueueCustomWorkItem(System.Threading.IThreadPoolWorkItem workItem, System.Boolean forceGlobal)

Disassembly:
	0x033EAE8C ADRP X0, 0xD0B000
	0x033EAE90 LDR X0, [X0 + 0x570]
	0x033EAE94 BL 0x1C16CF4
	0x033EAE98 ADRP X0, 0xD43000
	0x033EAE9C LDR X0, [X0 + 0x268]
	0x033EAEA0 BL 0x1C16CF4
	0x033EAEA4 MOVZ W8, 0x1
	0x033EAEA8 STRB W8, [X21 + 0x40F]
	0x033EAEAC LDR X0, [X22]
	0x033EAEB0 LDR W8, [X0 + 0xE0]
	0x033EAEB4 CBNZ W8, 0x33EAEBC
	0x033EAEB8 BL 0x1C16DFC
	0x033EAEBC ADD X0, X31, 0x8
	0x033EAEC0 MOV X1, X31
	0x033EAEC4 BL 0x3394200
	0x033EAEC8 MOVZ X9, 0x7FF00000
	0x033EAECC FMOV D1, X9
	0x033EAED0 FCVTZS X8, D0
	0x033EAED4 MOVZ X10, 0x80000000
	0x033EAED8 FCMP D0, D1
	0x033EAEDC CSEL X21, X10, X8, EQ
	0x033EAEE0 ADD X8, X21, 0x1
	0x033EAEE4 ORR W9, W31, 0x80000001
	0x033EAEE8 CMP X8, X9
	0x033EAEEC B.CS 0x33EAF28
	0x033EAEF0 ADRP X8, 0xD43000
	0x033EAEF4 LDR X8, [X8 + 0x268]
	0x033EAEF8 LDR X0, [X8]
	0x033EAEFC LDR W8, [X0 + 0xE0]
	0x033EAF00 CBNZ W8, 0x33EAF08
	0x033EAF04 BL 0x1C16DFC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xFF4000
	007 Move X21, 0xD44000
	008 Move W8, [X22+1028]
	009 Move X21, [X21+1088]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD44000
	017 Move X0, [X0+1088]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1028], W8
	021 Call ThreadPool.EnsureVMInitialized
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X21]
	028 Move X8, [X0+184]
	029 Move X0, [X8+8]
	030 Compare X0, 0
	031 JumpIfEqual {41}
	032 And W2, W20, 1
	033 Move X1, X19
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Call ThreadPoolWorkQueue.Enqueue, X0, X1, X2
	040 Return 
	041 Call 0x1C17F20

Method: System.Boolean TryPopCustomWorkItem(System.Threading.IThreadPoolWorkItem workItem)

Disassembly:
	0x033EAF08 AND W2, W19, 0x1
	0x033EAF0C MOV X0, X20
	0x033EAF10 MOV W1, W21
	0x033EAF14 BL 0x33EA75C
	0x033EAF18 LDP X20, X19, [X31 + 0x20]
	0x033EAF1C LDP X22, X21, [X31 + 0x10]
	0x033EAF20 LDR X30, [X31], #0x30
	0x033EAF24 RET
	0x033EAF28 ADRP X0, 0xD42000
	0x033EAF2C LDR X0, [X0 + 0xFF0]
	0x033EAF30 BL 0x1C16D08
	0x033EAF34 MOV X1, X31
	0x033EAF38 BL 0x33BDD84
	0x033EAF3C MOV X19, X0
	0x033EAF40 ADRP X0, 0xD11000
	0x033EAF44 LDR X0, [X0 + 0x760]
	0x033EAF48 BL 0x1C16D08
	0x033EAF4C BL 0x1C16F10
	0x033EAF50 MOV X20, X0
	0x033EAF54 ADRP X0, 0xD43000
	0x033EAF58 LDR X0, [X0 + 0x4E0]
	0x033EAF5C BL 0x1C16D08
	0x033EAF60 MOV X1, X0
	0x033EAF64 MOV X0, X20
	0x033EAF68 MOV X2, X19
	0x033EAF6C MOV X3, X31
	0x033EAF70 BL 0x3311888
	0x033EAF74 ADRP X0, 0xD43000
	0x033EAF78 LDR X0, [X0 + 0x568]
	0x033EAF7C BL 0x1C16D08
	0x033EAF80 MOV X1, X0
	0x033EAF84 MOV X0, X20
	0x033EAF88 BL 0x1C16DEC
	0x033EAF8C STP X30, X21, [X31 - 0x20]!
	0x033EAF90 STP X20, X19, [X31 + 0x10]
	0x033EAF94 ADRP X21, 0xFF3000
	0x033EAF98 ADRP X20, 0xD10000
	0x033EAF9C LDRB W8, [X21 + 0x410]
	0x033EAFA0 LDR X20, [X20 + 0xC10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xFF4000
	006 Move X20, 0xD44000
	007 Move W8, [X21+1029]
	008 Move X20, [X20+1088]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD44000
	015 Move X0, [X0+1088]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1029], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move W21, [X8+4]
	027 Call 0x1C17D44
	028 Compare W21, 0
	029 JumpIfEqual {47}
	030 Move X0, [X20]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {36}
	034 Call 0x1C17DFC
	035 Move X0, [X20]
	036 Move X8, [X0+184]
	037 Move X8, [X8+8]
	038 Compare X8, 0
	039 JumpIfEqual {53}
	040 Move X1, X19
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Call ThreadPoolWorkQueue.LocalFindAndPop, X0, X1
	046 Return X0
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move W0, W31
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Return X0
	053 Call 0x1C17F20

Method: System.Boolean RequestWorkerThread()

Disassembly:
	0x033E8AB8 CBNZ X26, 0x33E8AE4

ISIL:
	001 Call 0x1C977F4
	002 Return X0

Method: System.Void EnsureVMInitialized()

Disassembly:
	0x033EADF8 MOV X0, X21
	0x033EADFC BL 0x1C16F18
	0x033EAE00 BL 0x1C16F28
	0x033EAE04 BL 0x1C16F20
	0x033EAE08 BL 0x1C16F20
	0x033EAE0C BL 0x1990590
	0x033EAE10 BL 0x1990590
	0x033EAE14 STP X30, X21, [X31 - 0x20]!
	0x033EAE18 STP X20, X19, [X31 + 0x10]
	0x033EAE1C MOV W20, W0
	0x033EAE20 ADRP X0, 0xD43000
	0x033EAE24 LDR X0, [X0 + 0x518]
	0x033EAE28 MOV X19, X1
	0x033EAE2C BL 0x1C16D08
	0x033EAE30 BL 0x1C16F10
	0x033EAE34 MOV W1, W20
	0x033EAE38 MOV X2, X19
	0x033EAE3C MOV X3, X31
	0x033EAE40 MOV X21, X0
	0x033EAE44 BL 0x33DCA70
	0x033EAE48 ADRP X0, 0xD43000
	0x033EAE4C LDR X0, [X0 + 0x560]
	0x033EAE50 BL 0x1C16D08
	0x033EAE54 MOV X1, X0
	0x033EAE58 MOV X0, X21
	0x033EAE5C BL 0x1C16DEC
	0x033EAE60 STR X30, [X31 - 0x30]!
	0x033EAE64 STP X22, X21, [X31 + 0x10]
	0x033EAE68 STP X20, X19, [X31 + 0x20]
	0x033EAE6C ADRP X21, 0xFF3000
	0x033EAE70 STR X1, [X31 + 0x8]
	0x033EAE74 ADRP X22, 0xD0B000
	0x033EAE78 LDRB W8, [X21 + 0x40F]
	0x033EAE7C LDR X22, [X22 + 0x570]
	0x033EAE80 MOV W19, W2
	0x033EAE84 MOV X20, X0
	0x033EAE88 TBNZ X8, 0x0, 0x33EAEAC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xFF4000
	005 Move X19, 0xD44000
	006 Move W8, [X20+1030]
	007 Move X19, [X19+1088]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xD44000
	013 Move X0, [X0+1088]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1030], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move W20, [X8+4]
	025 Call 0x1C17D44
	026 Compare W20, 0
	027 JumpIfNotEqual {42}
	028 Move X0, [X19]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {34}
	032 Call 0x1C17DFC
	033 Move X0, [X19]
	034 Move X8, [X0+184]
	035 Add X0, X8, 5
	036 Call 0x1C9706C
	037 Call 0x1C17D44
	038 Move X8, [X19]
	039 Move W9, 1
	040 Move X8, [X8+184]
	041 Move [X8+4], W9
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Return 

Method: System.Boolean NotifyWorkItemComplete()

Disassembly:
	0x033E9FD0 CBZ X0, 0x33E9FE0

ISIL:
	001 Call 0x1C970E4
	002 Return X0

Method: System.Void ReportThreadStatus(System.Boolean isWorking)

Disassembly:
	0x033EAFA8 TBNZ X8, 0x0, 0x33EAFC0
	0x033EAFAC ADRP X0, 0xD10000

ISIL:
	001 And W0, W0, 1
	002 Call 0x1C17CAC
	003 Return 

Method: System.Void NotifyWorkItemProgress()

Disassembly:
	0x033EAFB0 LDR X0, [X0 + 0xC10]
	0x033EAFB4 BL 0x1C16CF4
	0x033EAFB8 MOVZ W8, 0x1
	0x033EAFBC STRB W8, [X21 + 0x410]

ISIL:
	001 Move [X31-16], X30
	002 Call ThreadPool.EnsureVMInitialized
	003 Move X30, [X31+16]
	004 Call 0x1C97780
	005 Return 

Method: System.Void NotifyWorkItemProgressNative()

Disassembly:
	0x033EAFC0 LDR X8, [X19]

ISIL:
	001 Call 0x1C97780
	002 Return 

Method: System.Void NotifyWorkItemQueued()

Disassembly:
	0x033E91B0 MOVZ W8, 0x1

ISIL:
	001 Call 0x1C17D14
	002 Return 

Method: System.Void InitializeVMTp(ref System.Boolean enableWorkerTracking)

Disassembly:
	0x033EAFA4 MOV X19, X0

ISIL:
	001 Call 0x1C9706C
	002 Return 

Method: System.Boolean get_IsThreadPoolThread()

Disassembly:
	0x033EAFC4 MOVZ W1, 0x1
	0x033EAFC8 MOV X0, X19
	0x033EAFCC LDR X9, [X8 + 0x218]
	0x033EAFD0 LDR X2, [X8 + 0x220]
	0x033EAFD4 BLR X9
	0x033EAFD8 LDR X0, [X20]
	0x033EAFDC LDR W8, [X0 + 0xE0]
	0x033EAFE0 CBNZ W8, 0x33EAFE8

ISIL:
	001 Move [X31-16], X30
	002 Move X0, X31
	003 Call Thread.get_CurrentThread
	004 Compare X0, 0
	005 JumpIfEqual {10}
	006 Move X1, X31
	007 Move X30, [X31+16]
	008 Call Thread.get_IsThreadPoolThread, X0
	009 Return X0
	010 Call 0x1C17F20

