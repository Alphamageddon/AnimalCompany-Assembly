Type: System.Threading.ManualResetEventSlim

Method: System.Threading.WaitHandle get_WaitHandle()

Disassembly:
	0x033DEE94 ADRP X0, 0xD4E000
	0x033DEE98 LDR X0, [X0 + 0xFF0]
	0x033DEE9C BL 0x1C16D08
	0x033DEEA0 MOV X3, X0
	0x033DEEA4 MOV X0, X20
	0x033DEEA8 MOV X1, X21
	0x033DEEAC MOV X2, X19
	0x033DEEB0 MOV X4, X31
	0x033DEEB4 BL 0x3312C8C
	0x033DEEB8 ADRP X0, 0xD4E000
	0x033DEEBC LDR X0, [X0 + 0xFF8]
	0x033DEEC0 BL 0x1C16D08
	0x033DEEC4 MOV X1, X0
	0x033DEEC8 MOV X0, X20
	0x033DEECC BL 0x1C16DEC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Call ManualResetEventSlim.ThrowIfDisposed, X0
	006 Move X20, [X19+24]
	007 Call 0x1C17D44
	008 Compare X20, 0
	009 JumpIfNotEqual {12}
	010 Move X0, X19
	011 Call ManualResetEventSlim.LazyInitializeEvent, X0
	012 Move X19, [X19+24]
	013 Call 0x1C17D44
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 Return X0

Method: System.Boolean get_IsSet()

Disassembly:
	0x033DF0A8 LDR X8, [X8 + 0xF98]
	0x033DF0AC LDR X9, [X20]
	0x033DF0B0 LDR X8, [X8]
	0x033DF0B4 LDRB W11, [X9 + 0x130]
	0x033DF0B8 LDRB W10, [X8 + 0x130]
	0x033DF0BC CMP W11, W10
	0x033DF0C0 B.CC 0x33DF128
	0x033DF0C4 LDR X9, [X9 + 0xC8]
	0x033DF0C8 ADD X9, X9, X10, 0x3, LSL
	0x033DF0CC LDUR X9, [X9 - 0x8]
	0x033DF0D0 CMP X9, X8
	0x033DF0D4 B.NE 0x33DF128
	0x033DF0D8 LDR X19, [X20 + 0x10]
	0x033DF0DC BL 0x1C16D44
	0x033DF0E0 STRB W31, [X31 + 0xC]
	0x033DF0E4 ADD X1, X31, 0xC
	0x033DF0E8 MOV X0, X19
	0x033DF0EC BL 0x33DE64C
	0x033DF0F0 LDR X20, [X20 + 0x10]
	0x033DF0F4 BL 0x1C16D44
	0x033DF0F8 MOV X0, X20
	0x033DF0FC BL 0x33DE87C
	0x033DF100 MOV X20, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xFFF000
	006 Move X20, 0xD4E000
	007 Move W8, [X21+885]
	008 Move X20, [X20+3992]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD4E000
	015 Move X0, [X0+3992]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+885], W8
	019 Move W19, [X19+32]
	020 Call 0x1C17D44
	021 Move X0, [X20]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move W0, W19
	027 ShiftRight W0, 31
	028 And W0, W0, 0x7FFFFFFF
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return X0

Method: System.Void set_IsSet(System.Boolean value)

Disassembly:
	0x033DF10C MOV X0, X19
	0x033DF110 BL 0x1C4BEB4
	0x033DF114 CBNZ X20, 0x33DF12C
	0x033DF118 LDP X20, X19, [X31 + 0x20]
	0x033DF11C LDP X30, X21, [X31 + 0x10]
	0x033DF120 ADD X31, X31, 0x30
	0x033DF124 RET
	0x033DF128 BL 0x1C16F20

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {7}
	003 And W31, W1, 1
	004 Move W8, 0x80000000
	005 NotImplemented "Instruction CSEL not yet implemented."
	006 Move W2, 0x80000000
	007 Move [X31-16], X30
	008 Call 0x1C17F20

Method: System.Int32 get_SpinCount()

Disassembly:
	0x033DF204 LDR X22, [X22 + 0xE48]
	0x033DF208 LDR X19, [X19]
	0x033DF20C LDR X20, [X20 + 0xF98]
	0x033DF210 TBNZ X8, 0x0, 0x33DF240
	0x033DF214 ADRP X0, 0xD3E000
	0x033DF218 LDR X0, [X0 + 0xE48]
	0x033DF21C BL 0x1C16CF4
	0x033DF220 ADRP X0, 0xD4E000
	0x033DF224 LDR X0, [X0]
	0x033DF228 BL 0x1C16CF4
	0x033DF22C ADRP X0, 0xD4D000
	0x033DF230 LDR X0, [X0 + 0xF98]
	0x033DF234 BL 0x1C16CF4
	0x033DF238 MOVZ W8, 0x1
	0x033DF23C STRB W8, [X21 + 0x380]
	0x033DF240 LDR X0, [X22]
	0x033DF244 BL 0x1C16F10
	0x033DF248 LDR X2, [X19]
	0x033DF24C MOV X1, X31
	0x033DF250 MOV X3, X31
	0x033DF254 MOV X19, X0
	0x033DF258 BL 0x2A6B948
	0x033DF25C LDR X8, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xFFF000
	006 Move X20, 0xD4E000
	007 Move W8, [X21+886]
	008 Move X20, [X20+3992]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD4E000
	015 Move X0, [X0+3992]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+886], W8
	019 Move W19, [X19+32]
	020 Call 0x1C17D44
	021 Move X0, [X20]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move W0, W19
	027 ShiftRight W0, 19
	028 And W0, W0, 0x1FFFFFFF
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return X0

Method: System.Void set_SpinCount(System.Int32 value)

Disassembly:
	0x033DF26C LDP X20, X19, [X31 + 0x20]
	0x033DF270 LDR X30, [X31], #0x30
	0x033DF274 RET
	0x033DF278 LDR W0, [X0]
	0x033DF27C RET
	0x033DF280 STR X30, [X31 - 0x20]!
	0x033DF284 STP X20, X19, [X31 + 0x10]
	0x033DF288 ADRP X20, 0xFFE000
	0x033DF28C LDRB W8, [X20 + 0x381]
	0x033DF290 MOV X19, X0
	0x033DF294 TBNZ X8, 0x0, 0x33DF2AC
	0x033DF298 ADRP X0, 0xD3F000
	0x033DF29C LDR X0, [X0 + 0x2A8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W21, [X0+32]
	006 Move X19, X0
	007 Move W20, W1
	008 Call 0x1C17D44
	009 Call 0x1C17D44
	010 And W8, W21, 0xC007FFFF
	011 Or W8, W8, W20
	012 Move [X19+32], W8
	013 Move X20, [X31+16]
	014 Move X19, [X31+24]
	015 Move X30, [X31+32]
	016 Move X21, [X31+40]
	017 Return 

Method: System.Int32 get_Waiters()

Disassembly:
	0x033DF2A0 BL 0x1C16CF4
	0x033DF2A4 MOVZ W8, 0x1
	0x033DF2A8 STRB W8, [X20 + 0x381]
	0x033DF2AC LDR W8, [X19]
	0x033DF2B0 CMP W8, 0x9
	0x033DF2B4 B.LE 0x33DF2C0
	0x033DF2B8 MOVZ W0, 0x1
	0x033DF2BC B 0x33DF2EC
	0x033DF2C0 ADRP X19, 0xD3F000
	0x033DF2C4 LDR X19, [X19 + 0x2A8]
	0x033DF2C8 LDR X0, [X19]
	0x033DF2CC LDR W8, [X0 + 0xE0]
	0x033DF2D0 CBNZ W8, 0x33DF2DC
	0x033DF2D4 BL 0x1C16DFC
	0x033DF2D8 LDR X0, [X19]
	0x033DF2DC LDR X8, [X0 + 0xB8]
	0x033DF2E0 LDRB W8, [X8 + 0x8]
	0x033DF2E4 CMP W8, 0x0
	0x033DF2E8 CSET W0, NE
	0x033DF2EC LDP X20, X19, [X31 + 0x10]
	0x033DF2F0 LDR X30, [X31], #0x20
	0x033DF2F4 RET
	0x033DF2F8 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xFFF000
	006 Move X20, 0xD4E000
	007 Move W8, [X21+887]
	008 Move X20, [X20+3992]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD4E000
	015 Move X0, [X0+3992]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+887], W8
	019 Move W19, [X19+32]
	020 Call 0x1C17D44
	021 Move X0, [X20]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 And W0, W19, 0x7FFFF
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.Void set_Waiters(System.Int32 value)

Disassembly:
	0x033DF2FC STP X20, X19, [X31 + 0x10]
	0x033DF300 ADRP X21, 0xFFE000
	0x033DF304 LDRB W8, [X21 + 0x384]
	0x033DF308 MOV W20, W1
	0x033DF30C MOV X19, X0
	0x033DF310 TBNZ X8, 0x0, 0x33DF334
	0x033DF314 ADRP X0, 0xD3F000
	0x033DF318 LDR X0, [X0 + 0x2A8]
	0x033DF31C BL 0x1C16CF4
	0x033DF320 ADRP X0, 0xD3D000
	0x033DF324 LDR X0, [X0 + 0xE48]
	0x033DF328 BL 0x1C16CF4
	0x033DF32C MOVZ W8, 0x1
	0x033DF330 STRB W8, [X21 + 0x384]
	0x033DF334 LDR W8, [X19]
	0x033DF338 CMP W8, 0xA
	0x033DF33C B.LT 0x33DF35C
	0x033DF340 CMP W8, W20
	0x033DF344 CSET W9, GE
	0x033DF348 CMP W20, 0x0
	0x033DF34C CSET W10, GE
	0x033DF350 AND W9, W10, W9, 0x0
	0x033DF354 TBNZ X9, 0x0, 0x33DF388
	0x033DF358 TBZ X8, 0x0, 0x33DF388
	0x033DF35C ADRP X21, 0xD3F000
	0x033DF360 LDR X21, [X21 + 0x2A8]
	0x033DF364 LDR X0, [X21]
	0x033DF368 LDR W8, [X0 + 0xE0]
	0x033DF36C CBNZ W8, 0x33DF378
	0x033DF370 BL 0x1C16DFC
	0x033DF374 LDR X0, [X21]
	0x033DF378 LDR X8, [X0 + 0xB8]
	0x033DF37C LDRB W8, [X8 + 0x8]
	0x033DF380 CBZ W8, 0x33DF41C
	0x033DF384 LDR W8, [X19]

ISIL:
	001 Move TEMP, 0xFFF80000
	002 Not TEMP
	003 Move W8, TEMP
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move TEMP, 0xFFF80000
	006 Not TEMP
	007 Move W2, TEMP
	008 Call ManualResetEventSlim.UpdateStateAtomically, X0, X1, X2
	009 Return 
	010 Move [X31-32], X30
	011 Move [X31+16], X20
	012 Move [X31+24], X19
	013 Move [X31+12], W8
	014 Move X0, 0xD15000
	015 Move X0, [X0+1880]
	016 Call 0x1C17D08
	017 Add X1, X31, 12
	018 Call 0x1C17E04
	019 Move X19, X0
	020 Move X0, 0xD4E000
	021 Move X0, [X0+4000]
	022 Call 0x1C17D08
	023 Move X1, X19
	024 Move X2, X31
	025 Call String.Format, X0, X1
	026 Move X19, X0
	027 Move X0, 0xD15000
	028 Move X0, [X0+1456]
	029 Call 0x1C17D08
	030 Call 0x1C17F10
	031 Move X1, X19
	032 Move X2, X31
	033 Move X20, X0
	034 Call InvalidOperationException..ctor, X0, X1
	035 Move X0, 0xD4E000
	036 Move X0, [X0+4008]
	037 Call 0x1C17D08
	038 Move X1, X0
	039 Move X0, X20
	040 Call 0x1C17DEC

Method: System.Void .ctor(System.Boolean initialState)

Disassembly:
	0x033DF388 TBNZ X20, 0x1F, 0x33DF3B4
	0x033DF38C CMP W8, W20
	0x033DF390 B.LT 0x33DF3B4
	0x033DF394 ADRP X8, 0xD3D000
	0x033DF398 LDR X8, [X8 + 0xE48]
	0x033DF39C LDR X0, [X8]
	0x033DF3A0 LDR W8, [X0 + 0xE0]
	0x033DF3A4 CBNZ W8, 0x33DF3AC
	0x033DF3A8 BL 0x1C16DFC
	0x033DF3AC MOVZ W0, 0x1
	0x033DF3B0 B 0x33DF410
	0x033DF3B4 SUBS W9, W8, 0xA
	0x033DF3B8 B.LT 0x33DF3CC
	0x033DF3BC SUB W8, W8, 0x9
	0x033DF3C0 CMP W9, 0x0
	0x033DF3C4 CSEL W8, W8, W9, LT
	0x033DF3C8 SBFM W8, W8, 0x1, 0x1F
	0x033DF3CC ADRP X9, 0xD3D000
	0x033DF3D0 LDR X9, [X9 + 0xE48]
	0x033DF3D4 LDR X0, [X9]
	0x033DF3D8 MOVZ W9, 0x6667
	0x033DF3DC MOVK W9, 0x66660000
	0x033DF3E0 SMADDL X9, X8, X9, X31
	0x033DF3E4 UBFM X10, X9, 0x3F, 0x3F
	0x033DF3E8 LDR W11, [X0 + 0xE0]
	0x033DF3EC SBFM X9, X9, 0x21, 0x3F
	0x033DF3F0 ADD W9, W9, W10
	0x033DF3F4 ADD W9, W9, W9, 0x2, LSL
	0x033DF3F8 SUB W20, W8, W9
	0x033DF3FC CBNZ W11, 0x33DF404
	0x033DF400 BL 0x1C16DFC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xFFF000
	007 Move X21, 0xD21000
	008 Move W8, [X22+888]
	009 Move X21, [X21+1136]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD21000
	017 Move X0, [X0+1136]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+888], W8
	021 Move X0, X19
	022 Move X1, X31
	023 Call Object..ctor, X0
	024 Move X0, [X21]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X21]
	030 Move X8, [X0+184]
	031 And W1, W20, 1
	032 Move X0, X19
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move W2, [X8]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]

Method: System.Void .ctor(System.Boolean initialState, System.Int32 spinCount)

Disassembly:
	0x033DF4B4 LDRB W8, [X20 + 0x385]
	0x033DF4B8 LDR X19, [X19 + 0x2A8]
	0x033DF4BC TBNZ X8, 0x0, 0x33DF4E0
	0x033DF4C0 ADRP X0, 0xD3F000
	0x033DF4C4 LDR X0, [X0 + 0x2A8]
	0x033DF4C8 BL 0x1C16CF4
	0x033DF4CC ADRP X0, 0xD20000
	0x033DF4D0 LDR X0, [X0 + 0x470]
	0x033DF4D4 BL 0x1C16CF4
	0x033DF4D8 MOVZ W8, 0x1
	0x033DF4DC STRB W8, [X20 + 0x385]
	0x033DF4E0 LDR X0, [X19]
	0x033DF4E4 ADRP X20, 0xD20000
	0x033DF4E8 LDR W8, [X0 + 0xE0]
	0x033DF4EC LDR X20, [X20 + 0x470]
	0x033DF4F0 CBNZ W8, 0x33DF4FC
	0x033DF4F4 BL 0x1C16DFC
	0x033DF4F8 LDR X0, [X19]
	0x033DF4FC LDR X8, [X0 + 0xB8]
	0x033DF500 LDR X9, [X20]
	0x033DF504 LDP X20, X19, [X31 + 0x10]
	0x033DF508 LDRB W8, [X8 + 0x8]
	0x033DF50C LDR X9, [X9 + 0xB8]
	0x033DF510 CMP W8, 0x0
	0x033DF514 MOVZ W8, 0x23
	0x033DF518 CSINC W8, W8, W31, EQ
	0x033DF51C STR W8, [X9]
	0x033DF520 LDR X30, [X31], #0x20
	0x033DF524 RET
	0x033DF528 STR X30, [X31 - 0x30]!
	0x033DF52C STP X22, X21, [X31 + 0x10]
	0x033DF530 STP X20, X19, [X31 + 0x20]
	0x033DF534 ADRP X19, 0xFFE000
	0x033DF538 ADRP X21, 0xD3F000
	0x033DF53C LDRB W8, [X19 + 0x386]
	0x033DF540 LDR X21, [X21 + 0x2A8]
	0x033DF544 TBNZ X8, 0x0, 0x33DF55C
	0x033DF548 ADRP X0, 0xD3F000
	0x033DF54C LDR X0, [X0 + 0x2A8]
	0x033DF550 BL 0x1C16CF4
	0x033DF554 MOVZ W8, 0x1
	0x033DF558 STRB W8, [X19 + 0x386]
	0x033DF55C MOV X0, X31
	0x033DF560 BL 0x33C18F4
	0x033DF564 LDR X8, [X21]
	0x033DF568 MOV W19, W0
	0x033DF56C LDR W9, [X8 + 0xE0]
	0x033DF570 CBNZ W9, 0x33DF580
	0x033DF574 MOV X0, X8
	0x033DF578 BL 0x1C16DFC
	0x033DF57C LDR X8, [X21]
	0x033DF580 LDR X8, [X8 + 0xB8]
	0x033DF584 LDR W20, [X8]
	0x033DF588 BL 0x1C16D44
	0x033DF58C CBZ W20, 0x33DF5C0
	0x033DF590 LDR X0, [X21]
	0x033DF594 LDR W8, [X0 + 0xE0]
	0x033DF598 CBNZ W8, 0x33DF5A4
	0x033DF59C BL 0x1C16DFC
	0x033DF5A0 LDR X0, [X21]
	0x033DF5A4 LDR X8, [X0 + 0xB8]
	0x033DF5A8 LDR W22, [X8 + 0x4]
	0x033DF5AC BL 0x1C16D44
	0x033DF5B0 SUB W8, W19, W22
	0x033DF5B4 MOVZ W9, 0x7530
	0x033DF5B8 CMP W8, W9
	0x033DF5BC B.LT 0x33DF600
	0x033DF5C0 MOV X0, X31
	0x033DF5C4 BL 0x33C236C
	0x033DF5C8 LDR X8, [X21]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W21, W1
	007 Move X1, X31
	008 Move W19, W2
	009 Move X20, X0
	010 Call Object..ctor, X0
	011 Move TEMP, X19
	012 And TEMP, TEMP, -2147483648
	013 Compare TEMP, -2147483648
	014 JumpIfEqual {26}
	015 NotImplemented "Instruction CMP not yet implemented."
	016 And W1, W21, 1
	017 Move X0, X20
	018 Move W2, W19
	019 Move X20, [X31+32]
	020 Move X19, [X31+40]
	021 Move X30, [X31+16]
	022 Move X21, [X31+24]
	023 Add X31, X31, 48
	024 Call ManualResetEventSlim.Initialize, X0, X1, X2
	025 Return 
	026 Move X0, 0xD1D000
	027 Move X0, [X0+1888]
	028 Call 0x1C17D08
	029 Call 0x1C17F10
	030 Move X19, X0
	031 Move X0, 0xD4E000
	032 Move X0, [X0+4016]
	033 Call 0x1C17D08
	034 Move X1, X0
	035 Move X0, X19
	036 Move X2, X31
	037 Call ArgumentOutOfRangeException..ctor, X0, X1
	038 Move X0, 0xD4E000
	039 Move X0, [X0+4024]
	040 Call 0x1C17D08
	041 Move X1, X0
	042 Move X0, X19
	043 Call 0x1C17DEC
	044 Move W8, 2047
	045 Move [X31+12], W8
	046 Move X0, 0xD15000
	047 Move X0, [X0+1880]
	048 Call 0x1C17D08
	049 Add X1, X31, 12
	050 Call 0x1C17E04
	051 Move X19, X0
	052 Move X0, 0xD4E000
	053 Move X0, [X0+4032]
	054 Call 0x1C17D08
	055 Move X1, X19
	056 Move X2, X31
	057 Call String.Format, X0, X1
	058 Move X19, X0
	059 Move X0, 0xD1D000
	060 Move X0, [X0+1888]
	061 Call 0x1C17D08
	062 Call 0x1C17F10
	063 Move X20, X0
	064 Move X0, 0xD4E000
	065 Move X0, [X0+4016]
	066 Call 0x1C17D08
	067 Move X1, X0
	068 Move X0, X20
	069 Move X2, X19
	070 Move X3, X31
	071 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	072 Move X0, 0xD4E000
	073 Move X0, [X0+4024]
	074 Call 0x1C17D08
	075 Move X1, X0
	076 Move X0, X20
	077 Call 0x1C17DEC

Method: System.Void Initialize(System.Boolean initialState, System.Int32 spinCount)

Disassembly:
	0x033DF404 CMP W20, 0x4
	0x033DF408 B.NE 0x33DF478
	0x033DF40C MOV W0, W31
	0x033DF410 MOV X1, X31
	0x033DF414 BL 0x32254C8
	0x033DF418 B 0x33DF480
	0x033DF41C ADRP X20, 0xD3D000
	0x033DF420 LDR X20, [X20 + 0xE48]
	0x033DF424 LDR X0, [X20]
	0x033DF428 LDR W8, [X0 + 0xE0]
	0x033DF42C CBNZ W8, 0x33DF43C
	0x033DF430 BL 0x1C16DFC
	0x033DF434 LDR X0, [X20]
	0x033DF438 LDR W8, [X0 + 0xE0]
	0x033DF43C LDR X9, [X0 + 0xB8]
	0x033DF440 LDR W10, [X19]
	0x033DF444 MOVZ W11, 0x1
	0x033DF448 LDR W9, [X9]
	0x033DF44C LSLV W11, W11, W10
	0x033DF450 CMP W11, W9
	0x033DF454 CSEL W11, W11, W9, LT
	0x033DF458 CMP W10, 0x1E
	0x033DF45C CSEL W20, W9, W11, GT
	0x033DF460 CBNZ W8, 0x33DF468
	0x033DF464 BL 0x1C16DFC
	0x033DF468 MOV W0, W20
	0x033DF46C MOV X1, X31
	0x033DF470 BL 0x32254D8
	0x033DF474 B 0x33DF480
	0x033DF478 MOV X0, X31
	0x033DF47C BL 0x32254D0
	0x033DF480 LDR W8, [X19]
	0x033DF484 MOVN W9, 0x80000000
	0x033DF488 CMP W8, W9
	0x033DF48C MOVZ W9, 0xA
	0x033DF490 CSINC W8, W9, W8, EQ
	0x033DF494 STR W8, [X19]
	0x033DF498 LDP X20, X19, [X31 + 0x10]
	0x033DF49C LDP X30, X21, [X31], #0x20
	0x033DF4A0 RET
	0x033DF4A4 STR X30, [X31 - 0x20]!
	0x033DF4A8 STP X20, X19, [X31 + 0x10]
	0x033DF4AC ADRP X20, 0xFFE000
	0x033DF4B0 ADRP X19, 0xD3F000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xFFF000
	007 Move W8, [X22+889]
	008 Move W20, W2
	009 Move W21, W1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xD40000
	016 Move X0, [X0+680]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+889], W8
	020 Compare X19, 0
	021 JumpIfEqual {55}
	022 Move X22, 0xD40000
	023 Move X22, [X22+680]
	024 And W31, W21, 1
	025 Move W8, 0x80000000
	026 NotImplemented "Instruction CSEL not yet implemented."
	027 Call 0x1C17D44
	028 Move [X19+32], W21
	029 Move X0, [X22]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {36}
	033 Call 0x1C17DFC
	034 Move X0, [X22]
	035 Move W21, [X19+32]
	036 Move X8, [X0+184]
	037 Move W22, [X8+8]
	038 Call 0x1C17D44
	039 Call 0x1C17D44
	040 Move W9, W20
	041 ShiftRight W9, 13
	042 And W9, W9, 4095
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move W10, 0x80000
	045 And W8, W21, 0xC007FFFF
	046 NotImplemented "Instruction CSEL not yet implemented."
	047 Or W8, W8, W9
	048 Move [X19+32], W8
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Return 
	055 Call 0x1C17F20

Method: System.Void EnsureLockObjectCreated()

Disassembly:
	0x033DF5CC MOV W20, W0
	0x033DF5D0 LDR W9, [X8 + 0xE0]
	0x033DF5D4 CBNZ W9, 0x33DF5E0
	0x033DF5D8 MOV X0, X8
	0x033DF5DC BL 0x1C16DFC
	0x033DF5E0 BL 0x1C16D44
	0x033DF5E4 LDR X8, [X21]
	0x033DF5E8 LDR X8, [X8 + 0xB8]
	0x033DF5EC STR W20, [X8]
	0x033DF5F0 BL 0x1C16D44
	0x033DF5F4 LDR X8, [X21]
	0x033DF5F8 LDR X8, [X8 + 0xB8]
	0x033DF5FC STR W19, [X8 + 0x4]
	0x033DF600 MOV W0, W20
	0x033DF604 LDP X20, X19, [X31 + 0x20]
	0x033DF608 LDP X22, X21, [X31 + 0x10]
	0x033DF60C LDR X30, [X31], #0x30
	0x033DF610 RET
	0x033DF614 STR X30, [X31 - 0x20]!
	0x033DF618 STP X20, X19, [X31 + 0x10]
	0x033DF61C ADRP X20, 0xFFE000
	0x033DF620 ADRP X19, 0xD3F000
	0x033DF624 LDRB W8, [X20 + 0x387]
	0x033DF628 LDR X19, [X19 + 0x2A8]
	0x033DF62C TBNZ X8, 0x0, 0x33DF644
	0x033DF630 ADRP X0, 0xD3F000
	0x033DF634 LDR X0, [X0 + 0x2A8]
	0x033DF638 BL 0x1C16CF4
	0x033DF63C MOVZ W8, 0x1
	0x033DF640 STRB W8, [X20 + 0x387]
	0x033DF644 BL 0x33DF528
	0x033DF648 LDR X8, [X19]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xFFF000
	005 Move W8, [X20+890]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xD1B000
	012 Move X0, [X0+3264]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+890], W8
	016 Add X19, X19, 16
	017 Move X20, [X19]
	018 Call 0x1C17D44
	019 Compare X20, 0
	020 JumpIfEqual {25}
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return 
	025 Move X8, 0xD1B000
	026 Move X8, [X8+3264]
	027 Move X0, [X8]
	028 Call 0x1C17F10
	029 Move X1, X31
	030 Move X20, X0
	031 Call Object..ctor, X0
	032 Call 0x1C17D44
	033 Move X0, X19
	034 Move X1, X20
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X2, X31
	038 Move X3, X31
	039 Move X30, [X31+32]
	040 Call Interlocked.CompareExchange, X0, X1, X2
	041 Return 

Method: System.Boolean LazyInitializeEvent()

Disassembly:
	0x033DEF30 TBNZ X8, 0x0, 0x33DEF48
	0x033DEF34 ADRP X0, 0xD1C000
	0x033DEF38 LDR X0, [X0 + 0xC10]
	0x033DEF3C BL 0x1C16CF4
	0x033DEF40 MOVZ W8, 0x1
	0x033DEF44 STRB W8, [X21 + 0x37D]
	0x033DEF48 LDR X8, [X19]
	0x033DEF4C MOVZ W1, 0x1
	0x033DEF50 MOV X0, X19
	0x033DEF54 LDP X9, X2, [X8 + 0x188]
	0x033DEF58 BLR X9
	0x033DEF5C LDR X0, [X20]
	0x033DEF60 LDR W8, [X0 + 0xE0]
	0x033DEF64 CBNZ W8, 0x33DEF6C
	0x033DEF68 BL 0x1C16DFC
	0x033DEF6C MOV X0, X19
	0x033DEF70 LDP X20, X19, [X31 + 0x10]
	0x033DEF74 MOV X1, X31
	0x033DEF78 LDP X30, X21, [X31], #0x20
	0x033DEF7C B 0x33B3E9C
	0x033DEF80 SUB X31, X31, 0x30
	0x033DEF84 STP X30, X21, [X31 + 0x10]
	0x033DEF88 STP X20, X19, [X31 + 0x20]
	0x033DEF8C LDR W21, [X0 + 0x20]
	0x033DEF90 MOV X20, X0
	0x033DEF94 MOV W19, W1
	0x033DEF98 BL 0x1C16D44
	0x033DEF9C TBNZ X21, 0x1E, 0x33DF000
	0x033DEFA0 LDR W21, [X20 + 0x20]
	0x033DEFA4 BL 0x1C16D44
	0x033DEFA8 BL 0x1C16D44
	0x033DEFAC ORR W8, W21, 0x40000000
	0x033DEFB0 STR W8, [X20 + 0x20]
	0x033DEFB4 TBZ X19, 0x0, 0x33DF000
	0x033DEFB8 LDR X19, [X20 + 0x18]
	0x033DEFBC BL 0x1C16D44
	0x033DEFC0 CBZ X19, 0x33DF000
	0x033DEFC4 STRB W31, [X31 + 0xC]
	0x033DEFC8 ADD X1, X31, 0xC
	0x033DEFCC MOV X0, X19
	0x033DEFD0 BL 0x33DE64C
	0x033DEFD4 MOV X0, X19
	0x033DEFD8 MOV X1, X31
	0x033DEFDC BL 0x33EB044
	0x033DEFE0 BL 0x1C16D44
	0x033DEFE4 MOV X21, X31
	0x033DEFE8 STR X31, [X20 + 0x18]
	0x033DEFEC LDRB W8, [X31 + 0xC]
	0x033DEFF0 CBZ W8, 0x33DEFFC
	0x033DEFF4 MOV X0, X19
	0x033DEFF8 BL 0x1C4BEB4
	0x033DEFFC CBNZ X21, 0x33DF010
	0x033DF000 LDP X20, X19, [X31 + 0x20]
	0x033DF004 LDP X30, X21, [X31 + 0x10]
	0x033DF008 ADD X31, X31, 0x30
	0x033DF00C RET
	0x033DF010 MOV X0, X21
	0x033DF014 BL 0x1C16F18
	0x033DF018 B 0x33DF01C
	0x033DF01C MOV X20, X0
	0x033DF020 CMP W1, 0x1
	0x033DF024 B.NE 0x33DF03C
	0x033DF028 MOV X0, X20
	0x033DF02C BL 0x3EB1AD0
	0x033DF030 LDR X21, [X0]
	0x033DF034 BL 0x3EB1AE0
	0x033DF038 B 0x33DEFEC
	0x033DF03C MOV X21, X31
	0x033DF040 B 0x33DF048
	0x033DF044 MOV X20, X0
	0x033DF048 LDRB W8, [X31 + 0xC]
	0x033DF04C CBZ W8, 0x33DF058
	0x033DF050 MOV X0, X19
	0x033DF054 BL 0x1C4BEB4
	0x033DF058 CBNZ X21, 0x33DF064
	0x033DF05C MOV X0, X20
	0x033DF060 BL 0x1D2C690
	0x033DF064 MOV X0, X21
	0x033DF068 BL 0x1C16F18
	0x033DF06C BL 0x1990590
	0x033DF070 SUB X31, X31, 0x30
	0x033DF074 STP X30, X21, [X31 + 0x10]
	0x033DF078 STP X20, X19, [X31 + 0x20]
	0x033DF07C ADRP X19, 0xFFE000
	0x033DF080 LDRB W8, [X19 + 0x37E]
	0x033DF084 MOV X20, X0
	0x033DF088 TBNZ X8, 0x0, 0x33DF0A0
	0x033DF08C ADRP X0, 0xD4D000
	0x033DF090 LDR X0, [X0 + 0xF98]
	0x033DF094 BL 0x1C16CF4
	0x033DF098 MOVZ W8, 0x1
	0x033DF09C STRB W8, [X19 + 0x37E]
	0x033DF0A0 CBZ X20, 0x33DF128
	0x033DF0A4 ADRP X8, 0xD4D000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1000000
	007 Move X19, 0xD47000
	008 Move W8, [X21+891]
	009 Move X19, [X19+1992]
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xD47000
	016 Move X0, [X0+1992]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+891], W8
	020 Move X0, X20
	021 Call ManualResetEventSlim.get_IsSet, X0
	022 Move X8, [X19]
	023 Move W21, W0
	024 Move X0, X8
	025 Call 0x1C17F10
	026 And W22, W21, 1
	027 Move W2, 1
	028 Move W1, W22
	029 Move X3, X31
	030 Move X19, X0
	031 Call EventWaitHandle..ctor, X0, X1, X2, X3
	032 Add X21, X20, 24
	033 Call 0x1C17D44
	034 Move X0, X21
	035 Move X1, X19
	036 Move X2, X31
	037 Call 0x1C25138
	038 Compare X0, 0
	039 JumpIfEqual {46}
	040 Compare X19, 0
	041 JumpIfEqual {76}
	042 Move X0, X19
	043 Move X1, X31
	044 Call WaitHandle.Dispose, X0
	045 Move W0, W31
	046 Move X0, X20
	047 Call ManualResetEventSlim.get_IsSet, X0
	048 And W8, W0, 1
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move [X31+12], W31
	051 Add X1, X31, 12
	052 Move X0, X19
	053 Call Monitor.Enter, X0, X1
	054 Move X20, [X21]
	055 Call 0x1C17D44
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Compare X19, 0
	058 JumpIfEqual {79}
	059 Move X0, X19
	060 Call EventWaitHandle.Set, X0
	061 Move X20, X31
	062 Move W8, [X31+12]
	063 Compare W8, 0
	064 JumpIfEqual {67}
	065 Move X0, X19
	066 Call 0x1C4CEB4
	067 Compare X20, 0
	068 JumpIfNotEqual {77}
	069 Move W0, 1
	070 Move X20, [X31+32]
	071 Move X19, [X31+40]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Return X0
	076 Call 0x1C17F20
	077 Move X0, X20
	078 Call 0x1C17F18
	079 Call 0x1C17F20
	080 Move X21, X0
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move X0, X21
	083 Call 0x3EB2AD0
	084 Move X20, [X0]
	085 Call 0x3EB2AE0
	086 Move X20, X31
	087 Move X21, X0
	088 Move W8, [X31+12]
	089 Compare W8, 0
	090 JumpIfEqual {93}
	091 Move X0, X19
	092 Call 0x1C4CEB4
	093 Compare X20, 0
	094 JumpIfNotEqual {97}
	095 Move X0, X21
	096 Call 0x1D2D690
	097 Move X0, X20
	098 Call 0x1C17F18
	099 Call 0x1991590

Method: System.Void Set()

Disassembly:
	0x033DF6C8 LDR X2, [X19]
	0x033DF6CC LDR W1, [X19 + 0x10]

ISIL:
	001 Move W1, W31

Method: System.Void Set(System.Boolean duringCancellation)

Disassembly:
	0x033DF6D0 LDR X3, [X8]
	0x033DF6D4 BL 0x25FFB9C
	0x033DF6D8 LDR X8, [X19]
	0x033DF6DC CMP X0, X8
	0x033DF6E0 CSET W0, EQ
	0x033DF6E4 LDP X20, X19, [X31 + 0x10]
	0x033DF6E8 LDR X30, [X31], #0x20
	0x033DF6EC RET
	0x033DF6F0 STR X30, [X31 - 0x30]!
	0x033DF6F4 STP X22, X21, [X31 + 0x10]
	0x033DF6F8 STP X20, X19, [X31 + 0x20]
	0x033DF6FC MOV X19, X0
	0x033DF700 BL 0x33DF674
	0x033DF704 LDR X8, [X19]
	0x033DF708 CBZ X8, 0x33DF758
	0x033DF70C LDR X20, [X8 + 0x28]
	0x033DF710 CBZ X20, 0x33DF780
	0x033DF714 LDR W22, [X20 + 0x20]
	0x033DF718 MOV W21, W0
	0x033DF71C BL 0x1C16D44
	0x033DF720 CMP W22, 0x2
	0x033DF724 B.LT 0x33DF758
	0x033DF728 LDR W22, [X20 + 0x20]
	0x033DF72C BL 0x1C16D44
	0x033DF730 CMP W22, 0x3
	0x033DF734 B.EQ 0x33DF758
	0x033DF738 EOR W8, W21, 0x1
	0x033DF73C TBZ X8, 0x0, 0x33DF758
	0x033DF740 LDR W21, [X20 + 0x24]
	0x033DF744 BL 0x1C16D44
	0x033DF748 MOV X0, X31
	0x033DF74C BL 0x33C151C
	0x033DF750 CMP W21, W0
	0x033DF754 B.NE 0x33DF768
	0x033DF758 LDP X20, X19, [X31 + 0x20]
	0x033DF75C LDP X22, X21, [X31 + 0x10]
	0x033DF760 LDR X30, [X31], #0x30
	0x033DF764 RET
	0x033DF768 LDR X1, [X19]
	0x033DF76C MOV X0, X20
	0x033DF770 LDP X20, X19, [X31 + 0x20]
	0x033DF774 LDP X22, X21, [X31 + 0x10]
	0x033DF778 LDR X30, [X31], #0x30
	0x033DF77C B 0x33DF7B8
	0x033DF780 BL 0x1C16F20
	0x033DF784 STP X30, X19, [X31 - 0x10]!
	0x033DF788 LDR W19, [X0 + 0x20]
	0x033DF78C BL 0x1C16D44
	0x033DF790 CMP W19, 0x3
	0x033DF794 CSET W0, EQ
	0x033DF798 LDP X30, X19, [X31], #0x10
	0x033DF79C RET
	0x033DF7A0 STP X30, X19, [X31 - 0x10]!
	0x033DF7A4 LDR W19, [X0 + 0x24]
	0x033DF7A8 BL 0x1C16D44
	0x033DF7AC MOV W0, W19
	0x033DF7B0 LDP X30, X19, [X31], #0x10
	0x033DF7B4 RET
	0x033DF7B8 STR X30, [X31 - 0x30]!
	0x033DF7BC STP X22, X21, [X31 + 0x10]
	0x033DF7C0 STP X20, X19, [X31 + 0x20]
	0x033DF7C4 ADRP X21, 0xFFE000
	0x033DF7C8 LDRB W8, [X21 + 0x399]
	0x033DF7CC MOV X19, X1
	0x033DF7D0 MOV X20, X0
	0x033DF7D4 TBNZ X8, 0x0, 0x33DF7EC
	0x033DF7D8 ADRP X0, 0xD20000
	0x033DF7DC LDR X0, [X0 + 0x470]
	0x033DF7E0 BL 0x1C16CF4
	0x033DF7E4 MOVZ W8, 0x1
	0x033DF7E8 STRB W8, [X21 + 0x399]
	0x033DF7EC STR W31, [X31 + 0x8]
	0x033DF7F0 LDR X21, [X20 + 0x30]
	0x033DF7F4 BL 0x1C16D44
	0x033DF7F8 CMP X21, X19
	0x033DF7FC B.NE 0x33DF830
	0x033DF800 ADRP X21, 0xD20000
	0x033DF804 LDR X21, [X21 + 0x470]
	0x033DF808 LDR X0, [X21]
	0x033DF80C LDR W8, [X0 + 0xE0]
	0x033DF810 CBNZ W8, 0x33DF818
	0x033DF814 BL 0x1C16DFC
	0x033DF818 ADD X0, X31, 0x8
	0x033DF81C BL 0x33DF18C
	0x033DF820 LDR X22, [X20 + 0x30]
	0x033DF824 BL 0x1C16D44
	0x033DF828 CMP X22, X19
	0x033DF82C B.EQ 0x33DF808
	0x033DF830 LDP X20, X19, [X31 + 0x20]
	0x033DF834 LDP X22, X21, [X31 + 0x10]
	0x033DF838 LDR X30, [X31], #0x30
	0x033DF83C RET
	0x033DF840 SUB X31, X31, 0x40
	0x033DF844 STP X30, X21, [X31 + 0x20]
	0x033DF848 STP X20, X19, [X31 + 0x30]
	0x033DF84C ADRP X21, 0xFFE000
	0x033DF850 LDRB W8, [X21 + 0x389]
	0x033DF854 MOV X20, X1
	0x033DF858 MOV X19, X0
	0x033DF85C TBNZ X8, 0x0, 0x33DF874
	0x033DF860 ADRP X0, 0xD4E000
	0x033DF864 LDR X0, [X0 + 0x20]
	0x033DF868 BL 0x1C16CF4
	0x033DF86C MOVZ W8, 0x1
	0x033DF870 STRB W8, [X21 + 0x389]
	0x033DF874 CBZ X20, 0x33DF890
	0x033DF878 ADRP X8, 0xD4E000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move [X31+12], W31
	009 Compare X0, 0
	010 JumpIfEqual {75}
	011 Move W21, W1
	012 Move W1, 0x80000000
	013 Move W2, 0x80000000
	014 Move X20, X0
	015 Call ManualResetEventSlim.UpdateStateAtomically, X0, X1, X2
	016 Move X0, X20
	017 Call ManualResetEventSlim.get_Waiters, X0
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move X19, [X20+16]
	020 Call 0x1C17D44
	021 Move [X31+12], W31
	022 Add X1, X31, 12
	023 Move X0, X19
	024 Call Monitor.Enter, X0, X1
	025 Move X22, [X20+16]
	026 Call 0x1C17D44
	027 Move X0, X22
	028 Call Monitor.PulseAll, X0
	029 Move X22, X31
	030 Move W8, [X31+12]
	031 Compare W8, 0
	032 JumpIfEqual {35}
	033 Move X0, X19
	034 Call 0x1C4CEB4
	035 Compare X22, 0
	036 JumpIfNotEqual {76}
	037 Move X19, [X20+24]
	038 Call 0x1C17D44
	039 Compare X19, 0
	040 JumpIfEqual {67}
	041 Move TEMP, X21
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfEqual {67}
	045 Move [X31+12], W31
	046 Add X1, X31, 12
	047 Move X0, X19
	048 Call Monitor.Enter, X0, X1
	049 Move X21, [X20+24]
	050 Call 0x1C17D44
	051 Compare X21, 0
	052 JumpIfEqual {59}
	053 Move X20, [X20+24]
	054 Call 0x1C17D44
	055 Compare X20, 0
	056 JumpIfEqual {80}
	057 Move X0, X20
	058 Call EventWaitHandle.Set, X0
	059 Move X20, X31
	060 Move W8, [X31+12]
	061 Compare W8, 0
	062 JumpIfEqual {65}
	063 Move X0, X19
	064 Call 0x1C4CEB4
	065 Compare X20, 0
	066 JumpIfNotEqual {78}
	067 Move X20, [X31+48]
	068 Move X19, [X31+56]
	069 Move X22, [X31+32]
	070 Move X21, [X31+40]
	071 Move X30, [X31+16]
	072 Move X23, [X31+24]
	073 Add X31, X31, 64
	074 Return 
	075 Call 0x1C17F20
	076 Move X0, X22
	077 Call 0x1C17F18
	078 Move X0, X20
	079 Call 0x1C17F18
	080 Call 0x1C17F20
	081 Move X23, X0
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X0, X23
	084 Call 0x3EB2AD0
	085 Move X20, [X0]
	086 Call 0x3EB2AE0
	087 Move X20, X31
	088 Move X23, X0
	089 Move W8, [X31+12]
	090 Compare W8, 0
	091 JumpIfEqual {94}
	092 Move X0, X19
	093 Call 0x1C4CEB4
	094 Compare X20, 0
	095 JumpIfEqual {113}
	096 Move X0, X20
	097 Call 0x1C17F18
	098 Move X23, X0
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Move X0, X23
	101 Call 0x3EB2AD0
	102 Move X22, [X0]
	103 Call 0x3EB2AE0
	104 Move X22, X31
	105 Move X23, X0
	106 Move W8, [X31+12]
	107 Compare W8, 0
	108 JumpIfEqual {111}
	109 Move X0, X19
	110 Call 0x1C4CEB4
	111 Compare X22, 0
	112 JumpIfNotEqual {115}
	113 Move X0, X23
	114 Call 0x1D2D690
	115 Move X0, X22
	116 Call 0x1C17F18
	117 Call 0x1991590

Method: System.Boolean Wait(System.Int32 millisecondsTimeout, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x033DF8D0 STP X30, X21, [X31 - 0x20]!
	0x033DF8D4 STP X20, X19, [X31 + 0x10]
	0x033DF8D8 ADRP X21, 0xFFE000
	0x033DF8DC LDRB W8, [X21 + 0x38A]
	0x033DF8E0 MOV X19, X1
	0x033DF8E4 MOV X20, X0
	0x033DF8E8 TBNZ X8, 0x0, 0x33DF90C
	0x033DF8EC ADRP X0, 0xD4E000
	0x033DF8F0 LDR X0, [X0 + 0x8]
	0x033DF8F4 BL 0x1C16CF4
	0x033DF8F8 ADRP X0, 0xD4E000
	0x033DF8FC LDR X0, [X0 + 0x10]
	0x033DF900 BL 0x1C16CF4
	0x033DF904 MOVZ W8, 0x1
	0x033DF908 STRB W8, [X21 + 0x38A]
	0x033DF90C LDR X8, [X20]
	0x033DF910 LDR X9, [X19]
	0x033DF914 CMP X8, X9
	0x033DF918 B.NE 0x33DF92C
	0x033DF91C LDR X8, [X20 + 0x8]
	0x033DF920 LDR X9, [X19 + 0x8]
	0x033DF924 CMP X8, X9
	0x033DF928 B.EQ 0x33DF93C
	0x033DF92C MOV W0, W31
	0x033DF930 LDP X20, X19, [X31 + 0x10]
	0x033DF934 LDP X30, X21, [X31], #0x20
	0x033DF938 RET
	0x033DF93C LDR W8, [X20 + 0x10]
	0x033DF940 LDR W9, [X19 + 0x10]
	0x033DF944 CMP W8, W9
	0x033DF948 CSET W0, EQ
	0x033DF94C B 0x33DF930
	0x033DF950 STR X30, [X31 - 0x20]!
	0x033DF954 STP X20, X19, [X31 + 0x10]
	0x033DF958 ADRP X20, 0xFFE000
	0x033DF95C LDRB W8, [X20 + 0x38B]
	0x033DF960 MOV X19, X0
	0x033DF964 TBNZ X8, 0x0, 0x33DF988
	0x033DF968 ADRP X0, 0xD4E000
	0x033DF96C LDR X0, [X0 + 0x8]
	0x033DF970 BL 0x1C16CF4
	0x033DF974 ADRP X0, 0xD4E000
	0x033DF978 LDR X0, [X0 + 0x10]
	0x033DF97C BL 0x1C16CF4
	0x033DF980 MOVZ W8, 0x1
	0x033DF984 STRB W8, [X20 + 0x38B]
	0x033DF988 LDR X0, [X19 + 0x8]
	0x033DF98C CBZ X0, 0x33DF9BC
	0x033DF990 LDR X8, [X0]
	0x033DF994 LDP X9, X1, [X8 + 0x158]
	0x033DF998 BLR X9
	0x033DF99C LDR W8, [X19 + 0x10]
	0x033DF9A0 MOV W20, W0
	0x033DF9A4 ADD X0, X31, 0xC
	0x033DF9A8 MOV X1, X31
	0x033DF9AC STR W8, [X31 + 0xC]
	0x033DF9B0 BL 0x337B6D8
	0x033DF9B4 EOR W0, W0, W20, 0x0
	0x033DF9B8 B 0x33DF9D0
	0x033DF9BC LDR W8, [X19 + 0x10]
	0x033DF9C0 ADD X0, X31, 0xC
	0x033DF9C4 MOV X1, X31
	0x033DF9C8 STR W8, [X31 + 0xC]
	0x033DF9CC BL 0x337B6D8
	0x033DF9D0 LDP X20, X19, [X31 + 0x10]
	0x033DF9D4 LDR X30, [X31], #0x20
	0x033DF9D8 RET
	0x033DF9DC LDRB W0, [X0 + 0x28]
	0x033DF9E0 RET
	0x033DF9E4 STR X30, [X31 - 0x20]!
	0x033DF9E8 STP X20, X19, [X31 + 0x10]
	0x033DF9EC MOV W19, W1
	0x033DF9F0 MOV X20, X0
	0x033DF9F4 BL 0x1C16D44
	0x033DF9F8 STR W19, [X20 + 0x24]
	0x033DF9FC LDP X20, X19, [X31 + 0x10]
	0x033DFA00 LDR X30, [X31], #0x20
	0x033DFA04 RET
	0x033DFA08 STP X30, X19, [X31 - 0x10]!
	0x033DFA0C MOV X19, X0
	0x033DFA10 BL 0x33DFA20
	0x033DFA14 MOV X0, X19
	0x033DFA18 LDP X30, X19, [X31], #0x10
	0x033DFA1C RET
	0x033DFA20 STR X30, [X31 - 0x20]!
	0x033DFA24 STP X20, X19, [X31 + 0x10]
	0x033DFA28 ADRP X20, 0xFFE000
	0x033DFA2C LDRB W8, [X20 + 0x392]
	0x033DFA30 MOV X19, X0
	0x033DFA34 TBNZ X8, 0x0, 0x33DFA4C
	0x033DFA38 ADRP X0, 0xD16000
	0x033DFA3C LDR X0, [X0 + 0xA50]
	0x033DFA40 BL 0x1C16CF4
	0x033DFA44 MOVZ W8, 0x1
	0x033DFA48 STRB W8, [X20 + 0x392]
	0x033DFA4C LDRB W8, [X19 + 0x28]
	0x033DFA50 CBNZ W8, 0x33DFA60
	0x033DFA54 LDP X20, X19, [X31 + 0x10]
	0x033DFA58 LDR X30, [X31], #0x20
	0x033DFA5C RET
	0x033DFA60 ADRP X8, 0xD16000
	0x033DFA64 LDR X8, [X8 + 0xA50]
	0x033DFA68 LDR X0, [X8]
	0x033DFA6C BL 0x19903D0
	0x033DFA70 BL 0x33E02C8
	0x033DFA74 STP X30, X19, [X31 - 0x10]!
	0x033DFA78 LDR X19, [X0 + 0x30]
	0x033DFA7C BL 0x1C16D44
	0x033DFA80 MOV X0, X19
	0x033DFA84 LDP X30, X19, [X31], #0x10
	0x033DFA88 RET
	0x033DFA8C STP X30, X19, [X31 - 0x10]!
	0x033DFA90 MOV X19, X0
	0x033DFA94 BL 0x1C16D44
	0x033DFA98 MOVN W8, 0x0
	0x033DFA9C MOV X0, X19
	0x033DFAA0 MOV X1, X31
	0x033DFAA4 STR W8, [X19 + 0x24]
	0x033DFAA8 BL 0x33BDD8C
	0x033DFAAC BL 0x1C16D44
	0x033DFAB0 MOVZ W8, 0x1
	0x033DFAB4 STR W8, [X19 + 0x20]
	0x033DFAB8 LDP X30, X19, [X31], #0x10
	0x033DFABC RET
	0x033DFAC0 SUB X31, X31, 0x30
	0x033DFAC4 STP X30, X21, [X31 + 0x10]
	0x033DFAC8 STP X20, X19, [X31 + 0x20]
	0x033DFACC ADRP X21, 0xFFE000
	0x033DFAD0 STR X1, [X31 + 0x8]
	0x033DFAD4 ADRP X20, 0xD16000
	0x033DFAD8 LDRB W8, [X21 + 0x38C]
	0x033DFADC LDR X20, [X20 + 0x570]
	0x033DFAE0 MOV X19, X0
	0x033DFAE4 TBNZ X8, 0x0, 0x33DFAFC
	0x033DFAE8 ADRP X0, 0xD16000
	0x033DFAEC LDR X0, [X0 + 0x570]
	0x033DFAF0 BL 0x1C16CF4
	0x033DFAF4 MOVZ W8, 0x1
	0x033DFAF8 STRB W8, [X21 + 0x38C]
	0x033DFAFC BL 0x1C16D44
	0x033DFB00 MOVN W8, 0x0
	0x033DFB04 MOV X0, X19
	0x033DFB08 MOV X1, X31
	0x033DFB0C STR W8, [X19 + 0x24]
	0x033DFB10 BL 0x33BDD8C
	0x033DFB14 LDR X0, [X20]
	0x033DFB18 LDR W8, [X0 + 0xE0]
	0x033DFB1C CBNZ W8, 0x33DFB24
	0x033DFB20 BL 0x1C16DFC
	0x033DFB24 ADD X0, X31, 0x8
	0x033DFB28 MOV X1, X31
	0x033DFB2C BL 0x3394200
	0x033DFB30 MOVZ X9, 0x7FF00000
	0x033DFB34 FMOV D1, X9
	0x033DFB38 FCVTZS X8, D0
	0x033DFB3C MOVZ X10, 0x80000000
	0x033DFB40 FCMP D0, D1
	0x033DFB44 CSEL X1, X10, X8, EQ
	0x033DFB48 ADD X8, X1, 0x1
	0x033DFB4C ORR W9, W31, 0x80000001
	0x033DFB50 CMP X8, X9
	0x033DFB54 B.CS 0x33DFB70
	0x033DFB58 MOV X0, X19
	0x033DFB5C BL 0x33DFBB8
	0x033DFB60 LDP X20, X19, [X31 + 0x20]
	0x033DFB64 LDP X30, X21, [X31 + 0x10]
	0x033DFB68 ADD X31, X31, 0x30
	0x033DFB6C RET
	0x033DFB70 ADRP X0, 0xD1C000
	0x033DFB74 LDR X0, [X0 + 0x760]
	0x033DFB78 BL 0x1C16D08
	0x033DFB7C BL 0x1C16F10
	0x033DFB80 MOV X19, X0
	0x033DFB84 ADRP X0, 0xD4E000
	0x033DFB88 LDR X0, [X0 + 0x28]
	0x033DFB8C BL 0x1C16D08
	0x033DFB90 MOV X1, X0
	0x033DFB94 MOV X0, X19
	0x033DFB98 MOV X2, X31
	0x033DFB9C BL 0x3316014
	0x033DFBA0 ADRP X0, 0xD4E000
	0x033DFBA4 LDR X0, [X0 + 0x30]
	0x033DFBA8 BL 0x1C16D08
	0x033DFBAC MOV X1, X0
	0x033DFBB0 MOV X0, X19
	0x033DFBB4 BL 0x1C16DEC
	0x033DFBB8 STR X30, [X31 - 0x30]!
	0x033DFBBC STP X22, X21, [X31 + 0x10]
	0x033DFBC0 STP X20, X19, [X31 + 0x20]
	0x033DFBC4 ADRP X22, 0xFFE000
	0x033DFBC8 ADRP X21, 0xD16000
	0x033DFBCC LDRB W8, [X22 + 0x38D]
	0x033DFBD0 LDR X21, [X21 + 0xA50]
	0x033DFBD4 MOV W20, W1
	0x033DFBD8 MOV X19, X0
	0x033DFBDC TBNZ X8, 0x0, 0x33DFC00
	0x033DFBE0 ADRP X0, 0xD16000
	0x033DFBE4 LDR X0, [X0 + 0xA50]
	0x033DFBE8 BL 0x1C16CF4
	0x033DFBEC ADRP X0, 0xD1C000
	0x033DFBF0 LDR X0, [X0 + 0xC80]
	0x033DFBF4 BL 0x1C16CF4
	0x033DFBF8 MOVZ W8, 0x1
	0x033DFBFC STRB W8, [X22 + 0x38D]
	0x033DFC00 ADRP X22, 0xD1C000
	0x033DFC04 LDR X22, [X22 + 0xC80]
	0x033DFC08 BL 0x1C16D44
	0x033DFC0C MOVZ W8, 0x1
	0x033DFC10 STR W8, [X19 + 0x20]
	0x033DFC14 LDR X0, [X21]
	0x033DFC18 LDR W8, [X0 + 0xE0]
	0x033DFC1C CBNZ W8, 0x33DFC28
	0x033DFC20 BL 0x1C16DFC
	0x033DFC24 LDR X0, [X21]
	0x033DFC28 LDR X8, [X0 + 0xB8]
	0x033DFC2C LDR X0, [X22]
	0x033DFC30 LDR X21, [X8 + 0x18]
	0x033DFC34 BL 0x1C16F10
	0x033DFC38 MOVN W4, 0x0
	0x033DFC3C MOV X1, X21
	0x033DFC40 MOV X2, X19
	0x033DFC44 MOV W3, W20
	0x033DFC48 MOV X5, X31
	0x033DFC4C MOV X22, X0
	0x033DFC50 BL 0x33EBB48
	0x033DFC54 BL 0x1C16D44
	0x033DFC58 STR X22, [X19 + 0x38]
	0x033DFC5C LDP X20, X19, [X31 + 0x20]
	0x033DFC60 LDP X22, X21, [X31 + 0x10]
	0x033DFC64 LDR X30, [X31], #0x30
	0x033DFC68 RET
	0x033DFC6C STR X30, [X31 - 0x20]!
	0x033DFC70 STP X20, X19, [X31 + 0x10]
	0x033DFC74 MOV W19, W1
	0x033DFC78 MOV X20, X0
	0x033DFC7C BL 0x1C16D44
	0x033DFC80 MOVN W8, 0x0
	0x033DFC84 MOV X0, X20
	0x033DFC88 MOV X1, X31
	0x033DFC8C STR W8, [X20 + 0x24]
	0x033DFC90 BL 0x33BDD8C
	0x033DFC94 ADDS W31, W19, 0x2
	0x033DFC98 B.LE 0x33DFCB0
	0x033DFC9C MOV X0, X20
	0x033DFCA0 MOV W1, W19
	0x033DFCA4 LDP X20, X19, [X31 + 0x10]
	0x033DFCA8 LDR X30, [X31], #0x20
	0x033DFCAC B 0x33DFBB8
	0x033DFCB0 ADRP X0, 0xD1C000
	0x033DFCB4 LDR X0, [X0 + 0x760]
	0x033DFCB8 BL 0x1C16D08
	0x033DFCBC BL 0x1C16F10
	0x033DFCC0 MOV X19, X0
	0x033DFCC4 ADRP X0, 0xD4E000
	0x033DFCC8 LDR X0, [X0 + 0x38]
	0x033DFCCC BL 0x1C16D08
	0x033DFCD0 MOV X1, X0
	0x033DFCD4 MOV X0, X19
	0x033DFCD8 MOV X2, X31
	0x033DFCDC BL 0x3316014
	0x033DFCE0 ADRP X0, 0xD4E000
	0x033DFCE4 LDR X0, [X0 + 0x40]
	0x033DFCE8 BL 0x1C16D08
	0x033DFCEC MOV X1, X0
	0x033DFCF0 MOV X0, X19
	0x033DFCF4 BL 0x1C16DEC
	0x033DFCF8 STP X30, X19, [X31 - 0x10]!
	0x033DFCFC MOV X19, X0
	0x033DFD00 BL 0x33DFA20
	0x033DFD04 MOV X0, X19
	0x033DFD08 MOV W1, W31
	0x033DFD0C LDP X30, X19, [X31], #0x10
	0x033DFD10 B 0x33DFD3C
	0x033DFD14 STR X30, [X31 - 0x20]!
	0x033DFD18 STP X20, X19, [X31 + 0x10]
	0x033DFD1C MOV W19, W1
	0x033DFD20 MOV X20, X0
	0x033DFD24 BL 0x33DFA20
	0x033DFD28 AND W1, W19, 0x1
	0x033DFD2C MOV X0, X20
	0x033DFD30 LDP X20, X19, [X31 + 0x10]
	0x033DFD34 LDR X30, [X31], #0x20
	0x033DFD38 B 0x33DFD3C
	0x033DFD3C STR X30, [X31 - 0x30]!
	0x033DFD40 STP X22, X21, [X31 + 0x10]
	0x033DFD44 STP X20, X19, [X31 + 0x20]
	0x033DFD48 MOV X21, X0
	0x033DFD4C LDR W22, [X21 + 0x20]!
	0x033DFD50 MOV X19, X0
	0x033DFD54 MOV W20, W1
	0x033DFD58 BL 0x1C16D44
	0x033DFD5C CMP W22, 0x1
	0x033DFD60 B.GT 0x33DFDDC
	0x033DFD64 BL 0x1C16D44
	0x033DFD68 MOVZ W1, 0x2
	0x033DFD6C MOVZ W2, 0x1
	0x033DFD70 MOV X0, X21
	0x033DFD74 MOV X3, X31
	0x033DFD78 BL 0x33E7AB4
	0x033DFD7C CMP W0, 0x1
	0x033DFD80 B.NE 0x33DFDDC
	0x033DFD84 LDR X21, [X19 + 0x38]
	0x033DFD88 BL 0x1C16D44
	0x033DFD8C CBZ X21, 0x33DFD9C
	0x033DFD90 MOV X0, X21
	0x033DFD94 MOV X1, X31
	0x033DFD98 BL 0x33EBF78
	0x033DFD9C MOV X0, X31
	0x033DFDA0 BL 0x33C151C
	0x033DFDA4 MOV W22, W0
	0x033DFDA8 BL 0x1C16D44
	0x033DFDAC LDR X21, [X19 + 0x10]
	0x033DFDB0 STR W22, [X19 + 0x24]
	0x033DFDB4 BL 0x1C16D44
	0x033DFDB8 CBZ X21, 0x33DFDC4
	0x033DFDBC MOV X0, X21
	0x033DFDC0 BL 0x33DE66C
	0x033DFDC4 AND W1, W20, 0x1
	0x033DFDC8 MOV X0, X19
	0x033DFDCC LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+64], X29
	003 Move [X31+72], X30
	004 Move [X31+80], X28
	005 Move [X31+88], X27
	006 Move [X31+96], X26
	007 Move [X31+104], X25
	008 Move [X31+112], X24
	009 Move [X31+120], X23
	010 Move [X31+128], X22
	011 Move [X31+136], X21
	012 Move [X31+144], X20
	013 Move [X31+152], X19
	014 Move X20, 0xFFF000
	015 Move [X31+56], X2
	016 Move X26, 0xD1D000
	017 Move W8, [X20+892]
	018 Move X26, [X26+2008]
	019 Move W21, W1
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {36}
	025 Move X0, 0xD1D000
	026 Move X0, [X0+2008]
	027 Call 0x1C17CF4
	028 Move X0, 0xD4E000
	029 Move X0, [X0+3992]
	030 Call 0x1C17CF4
	031 Move X0, 0xD21000
	032 Move X0, [X0+1136]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X20+892], W8
	036 Move X0, X19
	037 Move [X31+24], X31
	038 Move [X31+32], X31
	039 Move [X31+40], X31
	040 Move [X31+20], W31
	041 Call ManualResetEventSlim.ThrowIfDisposed, X0
	042 Move X0, [X26]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Add X0, X31, 56
	048 Call CancellationToken.ThrowIfCancellationRequested, X0
	049 Add W31, W21, 2
	050 Move X0, X19
	051 Call ManualResetEventSlim.get_IsSet, X0
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {57}
	056 Move W0, 1
	057 Compare W21, 0
	058 JumpIfEqual {63}
	059 Add W31, W21, 1
	060 Move X0, X31
	061 Call Environment.get_TickCount
	062 Move W22, W0
	063 Move W0, W31
	064 Move W22, W31
	065 Move X0, X19
	066 Call ManualResetEventSlim.get_SpinCount, X0
	067 Move [X31+48], W31
	068 Move X23, 0xD21000
	069 Move X23, [X23+1136]
	070 Move W24, 0xCCCD
	071 Move W25, 0x9999
	072 Move W20, W0
	073 Move W27, W31
	074 NotImplemented "Instruction MOVK not yet implemented."
	075 NotImplemented "Instruction MOVK not yet implemented."
	076 Move X0, [X23]
	077 Move W8, [X0+224]
	078 Compare W8, 0
	079 JumpIfNotEqual {81}
	080 Call 0x1C17DFC
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move X0, [X23]
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {87}
	086 Call 0x1C17DFC
	087 Add X0, X31, 48
	088 Move W1, 40
	089 Call SpinWait.SpinOnce, X0, X1
	090 Move X0, X19
	091 Call ManualResetEventSlim.get_IsSet, X0
	092 Move TEMP, X0
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfEqual {56}
	096 Move X0, [X23]
	097 Move W8, [X0+224]
	098 Compare W8, 0
	099 JumpIfNotEqual {101}
	100 Call 0x1C17DFC
	101 Move W27, [X31+48]
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move X0, [X23]
	104 Move W8, [X0+224]
	105 Compare W8, 0
	106 JumpIfNotEqual {108}
	107 Call 0x1C17DFC
	108 Multiply W8, W27, W24
	109 NotImplemented "Instruction EXTR not yet implemented."
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Move X0, [X26]
	112 Move W8, [X0+224]
	113 Compare W8, 0
	114 JumpIfNotEqual {116}
	115 Call 0x1C17DFC
	116 Add X0, X31, 56
	117 Call CancellationToken.ThrowIfCancellationRequested, X0
	118 Move X0, X19
	119 Call ManualResetEventSlim.EnsureLockObjectCreated, X0
	120 Move X20, 0xD4E000
	121 Move X20, [X20+3992]
	122 Move X0, [X20]
	123 Move W8, [X0+224]
	124 Compare W8, 0
	125 JumpIfNotEqual {128}
	126 Call 0x1C17DFC
	127 Move X0, [X20]
	128 Move X8, [X26]
	129 Move X9, [X0+184]
	130 Move W10, [X8+224]
	131 Move X20, [X9]
	132 Compare W10, 0
	133 JumpIfNotEqual {136}
	134 Move X0, X8
	135 Call 0x1C17DFC
	136 Add X8, X31, 24
	137 Add X0, X31, 56
	138 Move X1, X20
	139 Move X2, X19
	140 Call CancellationToken.InternalRegisterWithoutEC, X0, X1, X2
	141 Move X20, [X19+16]
	142 Call 0x1C17D44
	143 Move [X31+20], W31
	144 Add X1, X31, 20
	145 Move X0, X20
	146 Call Monitor.Enter, X0, X1
	147 Move W27, 14
	148 Move W28, 11
	149 Move W24, W21
	150 Move X0, X19
	151 Call ManualResetEventSlim.get_IsSet, X0
	152 Move TEMP, X0
	153 And TEMP, TEMP, 1
	154 Compare TEMP, 1
	155 JumpIfEqual {216}
	156 Move X0, [X26]
	157 Move W8, [X0+224]
	158 Compare W8, 0
	159 JumpIfNotEqual {161}
	160 Call 0x1C17DFC
	161 Add X0, X31, 56
	162 Call CancellationToken.ThrowIfCancellationRequested, X0
	163 Add W31, W21, 1
	164 Move X0, X31
	165 Call Environment.get_TickCount
	166 Move W29, W31
	167 Move X23, X31
	168 Subtract W8, W0, W22
	169 Move W25, 14
	170 Move TEMP, X8
	171 And TEMP, TEMP, -2147483648
	172 Compare TEMP, -2147483648
	173 JumpIfEqual {229}
	174 Subtract W24, W21, W8
	175 NotImplemented "Instruction CMP not yet implemented."
	176 Move X0, X19
	177 Call ManualResetEventSlim.get_Waiters, X0
	178 Add W1, W0, 1
	179 Move X0, X19
	180 Call ManualResetEventSlim.set_Waiters, X0, X1
	181 Move X0, X19
	182 Call ManualResetEventSlim.get_IsSet, X0
	183 Move TEMP, X0
	184 And TEMP, TEMP, 1
	185 Compare TEMP, 1
	186 JumpIfEqual {219}
	187 Move X23, [X19+16]
	188 Call 0x1C17D44
	189 Move X0, X23
	190 Move W1, W24
	191 Move W2, W31
	192 Call Monitor.Wait, X0, X1, X2
	193 And W31, W0, 1
	194 Move X23, X31
	195 NotImplemented "Instruction CSEL not yet implemented."
	196 Move X0, X19
	197 Call ManualResetEventSlim.get_Waiters, X0
	198 Subtract W1, W0, 1
	199 Move X0, X19
	200 Call ManualResetEventSlim.set_Waiters, X0, X1
	201 Compare X23, 0
	202 JumpIfNotEqual {255}
	203 NotImplemented "Instruction CMP not yet implemented."
	204 Compare W25, 0
	205 JumpIfEqual {150}
	206 Move X25, X1
	207 Move X23, X0
	208 NotImplemented "Instruction CMP not yet implemented."
	209 Move X0, X23
	210 Call 0x3EB2AD0
	211 Move X8, [X0]
	212 Move [X31+8], X8
	213 Call 0x3EB2AE0
	214 Move X23, [X31+8]
	215 Move W25, W31
	216 Move X23, X31
	217 Move W29, W31
	218 Move W25, 5
	219 Move X0, X19
	220 Call ManualResetEventSlim.get_Waiters, X0
	221 Subtract W1, W0, 1
	222 Move X0, X19
	223 Call ManualResetEventSlim.set_Waiters, X0, X1
	224 Move X23, X31
	225 Move W29, 1
	226 Move W25, 14
	227 Move X23, X31
	228 Move W29, W31
	229 Move W8, [X31+20]
	230 Compare W8, 0
	231 JumpIfEqual {234}
	232 Move X0, X20
	233 Call 0x1C4CEB4
	234 Compare X23, 0
	235 JumpIfNotEqual {275}
	236 Add X0, X31, 24
	237 Call CancellationTokenRegistration.Dispose, X0
	238 NotImplemented "Instruction CMP not yet implemented."
	239 NotImplemented "Instruction CSET not yet implemented."
	240 Or W0, W8, W29
	241 Move X20, [X31+144]
	242 Move X19, [X31+152]
	243 Move X22, [X31+128]
	244 Move X21, [X31+136]
	245 Move X24, [X31+112]
	246 Move X23, [X31+120]
	247 Move X26, [X31+96]
	248 Move X25, [X31+104]
	249 Move X28, [X31+80]
	250 Move X27, [X31+88]
	251 Move X29, [X31+64]
	252 Move X30, [X31+72]
	253 Add X31, X31, 160
	254 Return X0
	255 Move X0, X23
	256 Call 0x1C17F18
	257 Move X0, 0xD1D000
	258 Move X0, [X0+1888]
	259 Call 0x1C17D08
	260 Call 0x1C17F10
	261 Move X19, X0
	262 Move X0, 0xD4E000
	263 Move X0, [X0+4056]
	264 Call 0x1C17D08
	265 Move X1, X0
	266 Move X0, X19
	267 Move X2, X31
	268 Call ArgumentOutOfRangeException..ctor, X0, X1
	269 Move X0, 0xD4E000
	270 Move X0, [X0+4064]
	271 Call 0x1C17D08
	272 Move X1, X0
	273 Move X0, X19
	274 Call 0x1C17DEC
	275 Move X0, X23
	276 Call 0x1C17F18
	277 Move [X31+8], X31
	278 Move X0, X19
	279 Call ManualResetEventSlim.get_Waiters, X0
	280 Subtract W1, W0, 1
	281 Move X0, X19
	282 Call ManualResetEventSlim.set_Waiters, X0, X1
	283 Move X8, [X31+8]
	284 Compare X8, 0
	285 JumpIfEqual {294}
	286 Move X0, [X31+8]
	287 Call 0x1C17F18
	288 Move X25, X1
	289 Move X23, X0
	290 Move X25, X1
	291 Move X23, X0
	292 Move X25, X1
	293 Move X23, X0
	294 NotImplemented "Instruction CMP not yet implemented."
	295 Move X0, X23
	296 Call 0x3EB2AD0
	297 Move X19, [X0]
	298 Call 0x3EB2AE0
	299 Move W25, W31
	300 Move W29, W31
	301 Move X23, X19
	302 Move X19, X31
	303 Move W8, [X31+20]
	304 Compare W8, 0
	305 JumpIfEqual {308}
	306 Move X0, X20
	307 Call 0x1C4CEB4
	308 Compare X19, 0
	309 JumpIfNotEqual {322}
	310 NotImplemented "Instruction CMP not yet implemented."
	311 Move X0, X23
	312 Call 0x3EB2AD0
	313 Move X19, [X0]
	314 Call 0x3EB2AE0
	315 Add X0, X31, 24
	316 Call CancellationTokenRegistration.Dispose, X0
	317 Compare X19, 0
	318 JumpIfEqual {56}
	319 Move X0, X19
	320 Call 0x1C17F18
	321 Move X19, X31
	322 Move X0, X19
	323 Call 0x1C17F18
	324 Move X25, X1
	325 Move X23, X0
	326 Move X23, X0
	327 Add X0, X31, 24
	328 Call CancellationTokenRegistration.Dispose, X0
	329 Compare X19, 0
	330 JumpIfNotEqual {333}
	331 Move X0, X23
	332 Call 0x1D2D690
	333 Move X0, X19
	334 Call 0x1C17F18
	335 Call 0x1991590

Method: System.Void Dispose()

Disassembly:
	0x033DFF14 ADDS W31, W19, 0x2
	0x033DFF18 B.LE 0x33DFFE4
	0x033DFF1C LDR W21, [X20 + 0x20]
	0x033DFF20 BL 0x1C16D44
	0x033DFF24 CMP W21, 0x1
	0x033DFF28 B.GT 0x33DFFD4
	0x033DFF2C MOV X21, X20
	0x033DFF30 LDR X22, [X21 + 0x38]!
	0x033DFF34 BL 0x1C16D44
	0x033DFF38 CBNZ X22, 0x33DFFB4
	0x033DFF3C ADRP X22, 0xD16000
	0x033DFF40 LDR X22, [X22 + 0xA50]
	0x033DFF44 LDR X0, [X22]
	0x033DFF48 LDR W8, [X0 + 0xE0]
	0x033DFF4C CBNZ W8, 0x33DFF58
	0x033DFF50 BL 0x1C16DFC
	0x033DFF54 LDR X0, [X22]
	0x033DFF58 ADRP X9, 0xD1C000
	0x033DFF5C LDR X8, [X0 + 0xB8]
	0x033DFF60 LDR X9, [X9 + 0xC80]
	0x033DFF64 LDR X23, [X8 + 0x18]
	0x033DFF68 LDR X0, [X9]
	0x033DFF6C BL 0x1C16F10
	0x033DFF70 MOVN W3, 0x0
	0x033DFF74 MOVN W4, 0x0
	0x033DFF78 MOV X1, X23
	0x033DFF7C MOV X2, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xFFF000
	006 Move X20, 0xD1C000
	007 Move W8, [X21+893]
	008 Move X20, [X20+3088]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD1C000
	015 Move X0, [X0+3088]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+893], W8
	019 Move X8, [X19]
	020 Move W1, 1
	021 Move X0, X19
	022 Move X9, [X8+392]
	023 Move X2, [X8+400]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X1, X31
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call GC.SuppressFinalize, X0
	037 Return 

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x033DFF80 MOV X5, X31
	0x033DFF84 MOV X22, X0
	0x033DFF88 BL 0x33EBB48
	0x033DFF8C BL 0x1C16D44
	0x033DFF90 MOV X0, X21
	0x033DFF94 MOV X1, X22
	0x033DFF98 MOV X2, X31
	0x033DFF9C BL 0x1C24138
	0x033DFFA0 CBZ X0, 0x33DFFB4
	0x033DFFA4 CBZ X22, 0x33E0030
	0x033DFFA8 MOV X0, X22
	0x033DFFAC MOV X1, X31
	0x033DFFB0 BL 0x33EBF78
	0x033DFFB4 LDR X20, [X21]
	0x033DFFB8 BL 0x1C16D44
	0x033DFFBC CBZ X20, 0x33E002C
	0x033DFFC0 MOVN W2, 0x0
	0x033DFFC4 MOV X0, X20
	0x033DFFC8 MOV W1, W19
	0x033DFFCC MOV X3, X31
	0x033DFFD0 BL 0x33EBEA0
	0x033DFFD4 LDP X20, X19, [X31 + 0x20]
	0x033DFFD8 LDP X22, X21, [X31 + 0x10]
	0x033DFFDC LDP X30, X23, [X31], #0x30
	0x033DFFE0 RET
	0x033DFFE4 ADRP X0, 0xD1C000
	0x033DFFE8 LDR X0, [X0 + 0x760]
	0x033DFFEC BL 0x1C16D08
	0x033DFFF0 BL 0x1C16F10
	0x033DFFF4 MOV X19, X0
	0x033DFFF8 ADRP X0, 0xD4E000
	0x033DFFFC LDR X0, [X0 + 0x38]
	0x033E0000 BL 0x1C16D08
	0x033E0004 MOV X1, X0
	0x033E0008 MOV X0, X19
	0x033E000C MOV X2, X31
	0x033E0010 BL 0x3316014
	0x033E0014 ADRP X0, 0xD4D000
	0x033E0018 LDR X0, [X0 + 0x50]
	0x033E001C BL 0x1C16D08
	0x033E0020 MOV X1, X0
	0x033E0024 MOV X0, X19
	0x033E0028 BL 0x1C16DEC
	0x033E002C BL 0x1C16F20
	0x033E0030 BL 0x1C16F20
	0x033E0034 B 0x33E003C
	0x033E0038 B 0x33E003C
	0x033E003C MOV X19, X0
	0x033E0040 CMP W1, 0x1
	0x033E0044 B.NE 0x33E00A8
	0x033E0048 MOV X0, X19
	0x033E004C BL 0x3EB1AD0
	0x033E0050 MOV X19, X0
	0x033E0054 ADRP X0, 0xD3C000
	0x033E0058 LDR X0, [X0 + 0x4B8]
	0x033E005C BL 0x1C16D08
	0x033E0060 LDR X8, [X19]
	0x033E0064 LDR X1, [X8]
	0x033E0068 BL 0x1C17270
	0x033E006C TBZ X0, 0x0, 0x33E0080

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W21, [X0+32]
	007 Move X20, X0
	008 Move W19, W1
	009 Call 0x1C17D44
	010 Move TEMP, X21
	011 And TEMP, TEMP, 0x40000000
	012 Compare TEMP, 0x40000000
	013 JumpIfEqual {44}
	014 Move W21, [X20+32]
	015 Call 0x1C17D44
	016 Call 0x1C17D44
	017 Or W8, W21, 0x40000000
	018 Move [X20+32], W8
	019 Move TEMP, X19
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {44}
	023 Move X19, [X20+24]
	024 Call 0x1C17D44
	025 Compare X19, 0
	026 JumpIfEqual {44}
	027 Move [X31+12], W31
	028 Add X1, X31, 12
	029 Move X0, X19
	030 Call Monitor.Enter, X0, X1
	031 Move X0, X19
	032 Move X1, X31
	033 Call WaitHandle.Dispose, X0
	034 Call 0x1C17D44
	035 Move X21, X31
	036 Move [X20+24], X31
	037 Move W8, [X31+12]
	038 Compare W8, 0
	039 JumpIfEqual {42}
	040 Move X0, X19
	041 Call 0x1C4CEB4
	042 Compare X21, 0
	043 JumpIfNotEqual {50}
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X30, [X31+16]
	047 Move X21, [X31+24]
	048 Add X31, X31, 48
	049 Return 
	050 Move X0, X21
	051 Call 0x1C17F18
	052 Move X20, X0
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X0, X20
	055 Call 0x3EB2AD0
	056 Move X21, [X0]
	057 Call 0x3EB2AE0
	058 Move X21, X31
	059 Move X20, X0
	060 Move W8, [X31+12]
	061 Compare W8, 0
	062 JumpIfEqual {65}
	063 Move X0, X19
	064 Call 0x1C4CEB4
	065 Compare X21, 0
	066 JumpIfNotEqual {69}
	067 Move X0, X20
	068 Call 0x1D2D690
	069 Move X0, X21
	070 Call 0x1C17F18
	071 Call 0x1991590

Method: System.Void ThrowIfDisposed()

Disassembly:
	0x033DEED0 STR X30, [X31 - 0x20]!
	0x033DEED4 STP X20, X19, [X31 + 0x10]
	0x033DEED8 MOV W20, W0
	0x033DEEDC MOV X0, X31
	0x033DEEE0 MOV W19, W1
	0x033DEEE4 BL 0x33C18F4
	0x033DEEE8 SUBS W8, W0, W20
	0x033DEEEC B.MI 0x33DEEFC
	0x033DEEF0 SUB W8, W19, W8
	0x033DEEF4 BIC W0, W8, W8, 0x1F
	0x033DEEF8 B 0x33DEF00
	0x033DEEFC MOV W0, W31
	0x033DEF00 LDP X20, X19, [X31 + 0x10]
	0x033DEF04 LDR X30, [X31], #0x20
	0x033DEF08 RET
	0x033DEF0C MOV W2, W31
	0x033DEF10 B 0x33E5778
	0x033DEF14 STP X30, X21, [X31 - 0x20]!
	0x033DEF18 STP X20, X19, [X31 + 0x10]
	0x033DEF1C ADRP X21, 0xFFF000
	0x033DEF20 ADRP X20, 0xD1C000
	0x033DEF24 LDRB W8, [X21 + 0x37D]
	0x033DEF28 LDR X20, [X20 + 0xC10]
	0x033DEF2C MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, [X0+32]
	004 Call 0x1C17D44
	005 Move TEMP, X19
	006 And TEMP, TEMP, 0x40000000
	007 Compare TEMP, 0x40000000
	008 JumpIfEqual {12}
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 
	012 Move X0, 0xD3F000
	013 Move X0, [X0+1208]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0xD4F000
	018 Move X0, [X0+3976]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call ObjectDisposedException..ctor, X0, X1
	024 Move X0, 0xD4F000
	025 Move X0, [X0+3984]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Void CancellationTokenCallback(System.Object obj)

Disassembly:
	0x033E0070 LDP X20, X19, [X31 + 0x20]
	0x033E0074 LDP X22, X21, [X31 + 0x10]
	0x033E0078 LDP X30, X23, [X31], #0x30
	0x033E007C B 0x3EB1AE0
	0x033E0080 MOVZ W0, 0x8
	0x033E0084 BL 0x3EB1AF0
	0x033E0088 LDR X8, [X19]
	0x033E008C STR X8, [X0]
	0x033E0090 ADRP X1, 0xAD4000
	0x033E0094 ADD X1, X1, 0xE58
	0x033E0098 MOV X2, X31
	0x033E009C BL 0x3EB1B00
	0x033E00A0 MOV X19, X0
	0x033E00A4 BL 0x3EB1AE0
	0x033E00A8 MOV X0, X19
	0x033E00AC BL 0x1D2C690
	0x033E00B0 BL 0x1990590
	0x033E00B4 STR X30, [X31 - 0x20]!
	0x033E00B8 STP X20, X19, [X31 + 0x10]
	0x033E00BC ADRP X20, 0xFFD000
	0x033E00C0 LDRB W8, [X20 + 0x390]
	0x033E00C4 MOV X19, X0
	0x033E00C8 TBNZ X8, 0x0, 0x33E00E0
	0x033E00CC ADRP X0, 0xD15000
	0x033E00D0 LDR X0, [X0 + 0xA50]
	0x033E00D4 BL 0x1C16CF4
	0x033E00D8 MOVZ W8, 0x1
	0x033E00DC STRB W8, [X20 + 0x390]
	0x033E00E0 CBZ X19, 0x33E0148
	0x033E00E4 ADRP X9, 0xD15000
	0x033E00E8 LDR X9, [X9 + 0xA50]
	0x033E00EC LDR X8, [X19]
	0x033E00F0 LDR X1, [X9]
	0x033E00F4 LDRB W10, [X8 + 0x130]
	0x033E00F8 LDRB W9, [X1 + 0x130]
	0x033E00FC CMP W10, W9
	0x033E0100 B.CC 0x33E0140
	0x033E0104 LDR X8, [X8 + 0xC8]
	0x033E0108 ADD X8, X8, X9, 0x3, LSL
	0x033E010C LDUR X8, [X8 - 0x8]
	0x033E0110 CMP X8, X1
	0x033E0114 B.NE 0x33E0140
	0x033E0118 LDRB W8, [X19 + 0x28]
	0x033E011C CBNZ W8, 0x33E0134
	0x033E0120 MOV X0, X19
	0x033E0124 BL 0x33DFA20
	0x033E0128 MOV X0, X19
	0x033E012C MOV W1, W31
	0x033E0130 BL 0x33DFD3C
	0x033E0134 LDP X20, X19, [X31 + 0x10]
	0x033E0138 LDR X30, [X31], #0x20
	0x033E013C RET
	0x033E0140 MOV X0, X19
	0x033E0144 BL 0x1C171E0
	0x033E0148 BL 0x1C16F20
	0x033E014C CMP W1, 0x1
	0x033E0150 MOV X20, X0
	0x033E0154 B.NE 0x33E01C0
	0x033E0158 MOV X0, X20
	0x033E015C BL 0x3EB1AD0
	0x033E0160 MOV X20, X0
	0x033E0164 ADRP X0, 0xD3C000
	0x033E0168 LDR X0, [X0 + 0x4B8]
	0x033E016C BL 0x1C16D08
	0x033E0170 LDR X8, [X20]
	0x033E0174 LDR X1, [X8]
	0x033E0178 BL 0x1C17270
	0x033E017C TBZ X0, 0x0, 0x33E0198
	0x033E0180 LDR X20, [X20]
	0x033E0184 BL 0x3EB1AE0
	0x033E0188 LDRB W8, [X19 + 0x28]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xFFE000
	007 Move W8, [X19+894]
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD4D000
	014 Move X0, [X0+3992]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X19+894], W8
	018 Compare X20, 0
	019 JumpIfEqual {55}
	020 Move X8, 0xD4D000
	021 Move X8, [X8+3992]
	022 Move X9, [X20]
	023 Move X8, [X8]
	024 Move W11, [X9+304]
	025 Move W10, [X8+304]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X9, [X9+200]
	028 Add X9, X9, X10
	029 NotImplemented "Instruction LDUR not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X19, [X20+16]
	032 Call 0x1C17D44
	033 Move [X31+12], W31
	034 Add X1, X31, 12
	035 Move X0, X19
	036 Call Monitor.Enter, X0, X1
	037 Move X20, [X20+16]
	038 Call 0x1C17D44
	039 Move X0, X20
	040 Call Monitor.PulseAll, X0
	041 Move X20, X31
	042 Move W8, [X31+12]
	043 Compare W8, 0
	044 JumpIfEqual {47}
	045 Move X0, X19
	046 Call 0x1C4CEB4
	047 Compare X20, 0
	048 JumpIfNotEqual {56}
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X30, [X31+16]
	052 Move X21, [X31+24]
	053 Add X31, X31, 48
	054 Return 
	055 Call 0x1C17F20
	056 Move X0, X20
	057 Call 0x1C17F18
	058 Move X21, X0
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X0, X21
	061 Call 0x3EB2AD0
	062 Move X20, [X0]
	063 Call 0x3EB2AE0
	064 Move X20, X31
	065 Move X21, X0
	066 Move W8, [X31+12]
	067 Compare W8, 0
	068 JumpIfEqual {71}
	069 Move X0, X19
	070 Call 0x1C4CEB4
	071 Compare X20, 0
	072 JumpIfNotEqual {75}
	073 Move X0, X21
	074 Call 0x1D2D690
	075 Move X0, X20
	076 Call 0x1C17F18
	077 Call 0x1991590

Method: System.Void UpdateStateAtomically(System.Int32 newBits, System.Int32 updateBitsMask)

Disassembly:
	0x033DF12C MOV X0, X20
	0x033DF130 BL 0x1C16F18
	0x033DF134 B 0x33DF138
	0x033DF138 MOV X21, X0
	0x033DF13C CMP W1, 0x1
	0x033DF140 B.NE 0x33DF158
	0x033DF144 MOV X0, X21
	0x033DF148 BL 0x3EB1AD0
	0x033DF14C LDR X20, [X0]
	0x033DF150 BL 0x3EB1AE0
	0x033DF154 B 0x33DF104
	0x033DF158 MOV X20, X31
	0x033DF15C B 0x33DF164
	0x033DF160 MOV X21, X0
	0x033DF164 LDRB W8, [X31 + 0xC]
	0x033DF168 CBZ W8, 0x33DF174
	0x033DF16C MOV X0, X19
	0x033DF170 BL 0x1C4BEB4
	0x033DF174 CBNZ X20, 0x33DF180
	0x033DF178 MOV X0, X21
	0x033DF17C BL 0x1D2C690
	0x033DF180 MOV X0, X20
	0x033DF184 BL 0x1C16F18
	0x033DF188 BL 0x1990590
	0x033DF18C STP X30, X21, [X31 - 0x20]!
	0x033DF190 STP X20, X19, [X31 + 0x10]
	0x033DF194 ADRP X20, 0xFFE000
	0x033DF198 ADRP X21, 0xD20000
	0x033DF19C LDRB W8, [X20 + 0x382]
	0x033DF1A0 LDR X21, [X21 + 0x470]
	0x033DF1A4 MOV X19, X0
	0x033DF1A8 TBNZ X8, 0x0, 0x33DF1C0
	0x033DF1AC ADRP X0, 0xD20000
	0x033DF1B0 LDR X0, [X0 + 0x470]
	0x033DF1B4 BL 0x1C16CF4
	0x033DF1B8 MOVZ W8, 0x1
	0x033DF1BC STRB W8, [X20 + 0x382]
	0x033DF1C0 LDR X0, [X21]
	0x033DF1C4 LDR W8, [X0 + 0xE0]
	0x033DF1C8 CBNZ W8, 0x33DF1D0
	0x033DF1CC BL 0x1C16DFC
	0x033DF1D0 MOV X0, X19
	0x033DF1D4 LDP X20, X19, [X31 + 0x10]
	0x033DF1D8 MOVZ W1, 0x14
	0x033DF1DC LDP X30, X21, [X31], #0x20
	0x033DF1E0 B 0x33DF2F8
	0x033DF1E4 STR X30, [X31 - 0x30]!
	0x033DF1E8 STP X22, X21, [X31 + 0x10]
	0x033DF1EC STP X20, X19, [X31 + 0x20]
	0x033DF1F0 ADRP X21, 0xFFE000
	0x033DF1F4 ADRP X22, 0xD3E000
	0x033DF1F8 ADRP X19, 0xD4E000
	0x033DF1FC ADRP X20, 0xD4D000
	0x033DF200 LDRB W8, [X21 + 0x380]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0xFFF000
	009 Move W8, [X22+895]
	010 Move W21, W2
	011 Move W19, W1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xD21000
	018 Move X0, [X0+1136]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+895], W8
	022 Move [X31+8], W31
	023 Add X20, X20, 32
	024 Move W22, [X20]
	025 Call 0x1C17D44
	026 NotImplemented "Instruction BIC not yet implemented."
	027 Or W23, W8, W19
	028 Call 0x1C17D44
	029 Move X0, X20
	030 Move W1, W23
	031 Move W2, W22
	032 Move X3, X31
	033 Call Interlocked.CompareExchange, X0, X1, X2
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X23, 0xD21000
	036 Move X23, [X23+1136]
	037 NotImplemented "Instruction ORN not yet implemented."
	038 Move X0, [X23]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Add X0, X31, 8
	044 Call SpinWait.SpinOnce, X0
	045 Move W21, [X20]
	046 Call 0x1C17D44
	047 And W8, W21, W24
	048 Or W22, W8, W19
	049 Call 0x1C17D44
	050 Move X0, X20
	051 Move W1, W22
	052 Move W2, W21
	053 Move X3, X31
	054 Call Interlocked.CompareExchange, X0, X1, X2
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X20, [X31+48]
	057 Move X19, [X31+56]
	058 Move X22, [X31+32]
	059 Move X21, [X31+40]
	060 Move X24, [X31+16]
	061 Move X23, [X31+24]
	062 Move X30, [X31+64]
	063 Return 

Method: System.Int32 ExtractStatePortionAndShiftRight(System.Int32 state, System.Int32 mask, System.Int32 rightBitShiftCount)

Disassembly:
	0x033DF260 LDP X22, X21, [X31 + 0x10]
	0x033DF264 LDR X8, [X8 + 0xB8]
	0x033DF268 STR X19, [X8]

ISIL:
	001 And W8, W1, W0
	002 NotImplemented "Instruction LSRV not yet implemented."
	003 Return X0

Method: System.Int32 ExtractStatePortion(System.Int32 state, System.Int32 mask)

Disassembly:
	0x033DF104 LDRB W8, [X31 + 0xC]
	0x033DF108 CBZ W8, 0x33DF114

ISIL:
	001 And W0, W1, W0
	002 Return X0

Method: System.Void .cctor()

Disassembly:
	0x033E01E4 MOV X19, X0
	0x033E01E8 TBNZ X8, 0x0, 0x33E0200
	0x033E01EC ADRP X0, 0xD1A000
	0x033E01F0 LDR X0, [X0 + 0xC10]
	0x033E01F4 BL 0x1C16CF4
	0x033E01F8 MOVZ W8, 0x1
	0x033E01FC STRB W8, [X21 + 0x391]
	0x033E0200 LDR X8, [X19]
	0x033E0204 MOVZ W1, 0x1
	0x033E0208 MOV X0, X19
	0x033E020C LDP X9, X2, [X8 + 0x188]
	0x033E0210 BLR X9
	0x033E0214 LDR X0, [X20]
	0x033E0218 LDR W8, [X0 + 0xE0]
	0x033E021C CBNZ W8, 0x33E0224
	0x033E0220 BL 0x1C16DFC
	0x033E0224 MOV X0, X19
	0x033E0228 LDP X20, X19, [X31 + 0x10]
	0x033E022C MOV X1, X31
	0x033E0230 LDP X30, X21, [X31], #0x20
	0x033E0234 B 0x33B3E9C
	0x033E0238 STP X30, X21, [X31 - 0x20]!
	0x033E023C STP X20, X19, [X31 + 0x10]
	0x033E0240 TBZ X1, 0x0, 0x33E02BC
	0x033E0244 LDRB W8, [X0 + 0x28]
	0x033E0248 MOV X19, X0
	0x033E024C CBNZ W8, 0x33E02BC
	0x033E0250 LDR X20, [X19 + 0x38]
	0x033E0254 BL 0x1C16D44
	0x033E0258 CBZ X20, 0x33E0268
	0x033E025C MOV X0, X20
	0x033E0260 MOV X1, X31
	0x033E0264 BL 0x33EBF78
	0x033E0268 BL 0x1C16D44
	0x033E026C MOV X20, X19
	0x033E0270 LDR X21, [X20 + 0x10]!
	0x033E0274 STR X31, [X20 + 0x8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xFFE000
	007 Move X22, 0xD3E000
	008 Move X19, 0xD4E000
	009 Move X20, 0xD4D000
	010 Move W8, [X21+896]
	011 Move X22, [X22+3656]
	012 Move X19, [X19]
	013 Move X20, [X20+3992]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0xD3E000
	019 Move X0, [X0+3656]
	020 Call 0x1C17CF4
	021 Move X0, 0xD4E000
	022 Move X0, [X0]
	023 Call 0x1C17CF4
	024 Move X0, 0xD4D000
	025 Move X0, [X0+3992]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+896], W8
	029 Move X0, [X22]
	030 Call 0x1C17F10
	031 Move X2, [X19]
	032 Move X1, X31
	033 Move X3, X31
	034 Move X19, X0
	035 Call Action`1<Object>..ctor, X0, X1, X2
	036 Move X8, [X20]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X8, [X8+184]
	040 Move [X8], X19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X30, [X31+48]
	044 Return 

