Type: System.Threading.Monitor

Method: System.Void Enter(System.Object obj)

Disassembly:
	0x033E24E0 LDP X26, X25, [X31 + 0x10]

ISIL:
	001 Call 0x1C4CE94
	002 Return 

Method: System.Void Enter(System.Object obj, ref System.Boolean lockTaken)

Disassembly:
	0x033DF64C LDP X20, X19, [X31 + 0x10]
	0x033DF650 CMP W0, 0x1
	0x033DF654 CSET W9, EQ
	0x033DF658 LDR X8, [X8 + 0xB8]
	0x033DF65C STRB W9, [X8 + 0x8]
	0x033DF660 LDR X30, [X31], #0x20
	0x033DF664 RET
	0x033DF668 STP X1, X2, [X0]

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X1]
	003 Compare W8, 0
	004 JumpIfNotEqual {12}
	005 Move X2, X1
	006 Move TEMP, 0
	007 Not TEMP
	008 Move W1, TEMP
	009 Move X30, [X31+16]
	010 Call Monitor.ReliableEnterTimeout, X0, X1, X2
	011 Return 
	012 Call Monitor.ThrowLockTakenException

Method: System.Void ThrowLockTakenException()

Disassembly:
	0x033E6700 MOV X1, X21
	0x033E6704 MOV X2, X19
	0x033E6708 LDP X20, X19, [X31 + 0x20]
	0x033E670C LDP X22, X21, [X31 + 0x10]
	0x033E6710 LDR X30, [X31], #0x30
	0x033E6714 B 0x33E1324
	0x033E6718 LDR X0, [X19 + 0x10]
	0x033E671C CBZ X0, 0x33E6758
	0x033E6720 ADRP X8, 0xD39000
	0x033E6724 LDR X8, [X8 + 0x1D0]
	0x033E6728 LDR X1, [X8]
	0x033E672C LDR X8, [X0]
	0x033E6730 CMP X8, X1
	0x033E6734 B.NE 0x33E675C
	0x033E6738 LDR X8, [X0 + 0x40]
	0x033E673C LDR X2, [X0 + 0x18]
	0x033E6740 LDR X1, [X0 + 0x28]
	0x033E6744 LDP X20, X19, [X31 + 0x20]
	0x033E6748 LDP X22, X21, [X31 + 0x10]
	0x033E674C MOV X0, X8
	0x033E6750 LDR X30, [X31], #0x30
	0x033E6754 BR X2
	0x033E6758 BL 0x1C16F20
	0x033E675C BL 0x1C171E0
	0x033E6760 STR X30, [X31 - 0x30]!
	0x033E6764 STP X22, X21, [X31 + 0x10]
	0x033E6768 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0xD48000
	005 Move X0, [X0+752]
	006 Call 0x1C17D08
	007 Move X1, X31
	008 Call Environment.GetResourceString, X0
	009 Move X19, X0
	010 Move X0, 0xD16000
	011 Move X0, [X0+1400]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X20, X0
	015 Move X0, 0xD48000
	016 Move X0, [X0+760]
	017 Call 0x1C17D08
	018 Move X2, X0
	019 Move X0, X20
	020 Move X1, X19
	021 Move X3, X31
	022 Call ArgumentException..ctor, X0, X1, X2
	023 Move X0, 0xD48000
	024 Move X0, [X0+768]
	025 Call 0x1C17D08
	026 Move X1, X0
	027 Move X0, X20
	028 Call 0x1C17DEC

Method: System.Void Exit(System.Object obj)

Disassembly:
	0x033E24E4 LDR X30, [X31], #0x50

ISIL:
	001 Call 0x1C4CEB4
	002 Return 

Method: System.Boolean Wait(System.Object obj, System.Int32 millisecondsTimeout, System.Boolean exitContext)

Disassembly:
	0x033E6778 ADRP X20, 0xD47000
	0x033E677C LDRB W8, [X21 + 0x3DB]
	0x033E6780 LDR X22, [X22 + 0x948]
	0x033E6784 LDR X19, [X19 + 0x3C8]
	0x033E6788 LDR X20, [X20 + 0x3C0]
	0x033E678C TBNZ X8, 0x0, 0x33E67BC
	0x033E6790 ADRP X0, 0xD3F000
	0x033E6794 LDR X0, [X0 + 0x948]
	0x033E6798 BL 0x1C16CF4
	0x033E679C ADRP X0, 0xD47000
	0x033E67A0 LDR X0, [X0 + 0x3C8]
	0x033E67A4 BL 0x1C16CF4
	0x033E67A8 ADRP X0, 0xD47000
	0x033E67AC LDR X0, [X0 + 0x3C0]
	0x033E67B0 BL 0x1C16CF4
	0x033E67B4 MOVZ W8, 0x1
	0x033E67B8 STRB W8, [X21 + 0x3DB]
	0x033E67BC LDR X0, [X22]
	0x033E67C0 BL 0x1C16F10
	0x033E67C4 LDR X2, [X19]
	0x033E67C8 MOV X1, X31
	0x033E67CC MOV X19, X0
	0x033E67D0 BL 0x33E1224

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {5}
	003 Move X2, X0
	004 Move W0, W31
	005 Move [X31-16], X30
	006 Move [X31-8], X19
	007 Move X0, 0xD13000
	008 Move X0, [X0+1320]
	009 Call 0x1C17D08
	010 Call 0x1C17F10
	011 Move X19, X0
	012 Move X0, 0xD19000
	013 Move X0, [X0+2216]
	014 Call 0x1C17D08
	015 Move X1, X0
	016 Move X0, X19
	017 Move X2, X31
	018 Call ArgumentNullException..ctor, X0, X1
	019 Move X0, 0xD48000
	020 Move X0, [X0+776]
	021 Call 0x1C17D08
	022 Move X1, X0
	023 Move X0, X19
	024 Call 0x1C17DEC

Method: System.Boolean Wait(System.Object obj, System.Int32 millisecondsTimeout)

Disassembly:
	0x033DFF0C MOV X0, X20
	0x033DFF10 BL 0x33DFA20

ISIL:
	001 Move W2, W31
	002 Call Monitor.Wait, X0, X1, X2
	003 Return X0

Method: System.Void Pulse(System.Object obj)

Disassembly:
	0x033E3640 B.NE 0x33E35B4
	0x033E3644 ADDS W31, W21, 0x1
	0x033E3648 B.EQ 0x33E366C
	0x033E364C MOV X0, X31
	0x033E3650 BL 0x33C18F4
	0x033E3654 LDR W8, [X31 + 0x8]
	0x033E3658 SUB W8, W0, W8
	0x033E365C TBNZ X8, 0x1F, 0x33E3768
	0x033E3660 SUB W8, W21, W8
	0x033E3664 CMP W8, 0x0
	0x033E3668 B.LE 0x33E3768
	0x033E366C MOVZ W27, 0xCCCD
	0x033E3670 MOVZ W28, 0x9998
	0x033E3674 MOVZ W29, 0x6666
	0x033E3678 MOVZ W22, 0x6667
	0x033E367C MOV W25, W31
	0x033E3680 MOVK W27, 0xCCCC0000
	0x033E3684 MOVK W28, 0x19990000
	0x033E3688 MOVK W29, 0x6660000
	0x033E368C MOVK W22, 0x66660000
	0x033E3690 MOVZ W26, 0xA

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {5}
	003 Call Monitor.ObjPulse, X0
	004 Return 
	005 Move [X31-16], X30
	006 Move [X31-8], X19
	007 Move X0, 0xD16000
	008 Move X0, [X0+1320]
	009 Call 0x1C17D08
	010 Call 0x1C17F10
	011 Move X19, X0
	012 Move X0, 0xD1C000
	013 Move X0, [X0+2216]
	014 Call 0x1C17D08
	015 Move X1, X0
	016 Move X0, X19
	017 Move X2, X31
	018 Call ArgumentNullException..ctor, X0, X1
	019 Move X0, 0xD4B000
	020 Move X0, [X0+424]
	021 Call 0x1C17D08
	022 Move X1, X0
	023 Move X0, X19
	024 Call 0x1C17DEC

Method: System.Void PulseAll(System.Object obj)

Disassembly:
	0x033DF87C LDR X8, [X8 + 0x20]
	0x033DF880 LDR X9, [X20]
	0x033DF884 LDR X8, [X8]
	0x033DF888 CMP X9, X8
	0x033DF88C B.EQ 0x33DF898
	0x033DF890 MOV W0, W31
	0x033DF894 B 0x33DF8BC
	0x033DF898 MOV X0, X20
	0x033DF89C BL 0x1C16E08
	0x033DF8A0 LDR V0, [X0]
	0x033DF8A4 LDR X8, [X0 + 0x10]
	0x033DF8A8 ADD X1, X31, 0x0
	0x033DF8AC MOV X0, X19
	0x033DF8B0 STR V0, [X31]
	0x033DF8B4 STR X8, [X31 + 0x10]
	0x033DF8B8 BL 0x33DF8D0
	0x033DF8BC LDP X20, X19, [X31 + 0x30]
	0x033DF8C0 LDP X30, X21, [X31 + 0x20]
	0x033DF8C4 AND W0, W0, 0x1
	0x033DF8C8 ADD X31, X31, 0x40
	0x033DF8CC RET

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {5}
	003 Call Monitor.ObjPulseAll, X0
	004 Return 
	005 Move [X31-16], X30
	006 Move [X31-8], X19
	007 Move X0, 0xD1A000
	008 Move X0, [X0+1320]
	009 Call 0x1C17D08
	010 Call 0x1C17F10
	011 Move X19, X0
	012 Move X0, 0xD20000
	013 Move X0, [X0+2216]
	014 Call 0x1C17D08
	015 Move X1, X0
	016 Move X0, X19
	017 Move X2, X31
	018 Call ArgumentNullException..ctor, X0, X1
	019 Move X0, 0xD4E000
	020 Move X0, [X0+4048]
	021 Call 0x1C17D08
	022 Move X1, X0
	023 Move X0, X19
	024 Call 0x1C17DEC

Method: System.Boolean Monitor_test_synchronised(System.Object obj)

Disassembly:
	0x033E6944 BL 0x33DCD88

ISIL:
	001 Call 0x1C4CE54
	002 Return X0

Method: System.Void Monitor_pulse(System.Object obj)

Disassembly:
	0x033E6948 B 0x33E6968

ISIL:
	001 Call 0x1C4CED4
	002 Return 

Method: System.Void ObjPulse(System.Object obj)

Disassembly:
	0x033E6884 LDR X22, [X22 + 0x3C0]
	0x033E6888 MOV W20, W2
	0x033E688C MOV X21, X1
	0x033E6890 MOV X19, X0
	0x033E6894 TBNZ X8, 0x0, 0x33E68DC
	0x033E6898 ADRP X0, 0xD47000
	0x033E689C LDR X0, [X0 + 0x3B8]
	0x033E68A0 BL 0x1C16CF4
	0x033E68A4 ADRP X0, 0xD47000
	0x033E68A8 LDR X0, [X0 + 0x3E0]
	0x033E68AC BL 0x1C16CF4
	0x033E68B0 ADRP X0, 0xD47000
	0x033E68B4 LDR X0, [X0 + 0x3E8]
	0x033E68B8 BL 0x1C16CF4
	0x033E68BC ADRP X0, 0xD47000
	0x033E68C0 LDR X0, [X0 + 0x3C0]
	0x033E68C4 BL 0x1C16CF4
	0x033E68C8 ADRP X0, 0xD39000
	0x033E68CC LDR X0, [X0 + 0x1D0]
	0x033E68D0 BL 0x1C16CF4
	0x033E68D4 MOVZ W8, 0x1
	0x033E68D8 STRB W8, [X23 + 0x3DF]
	0x033E68DC MOV W0, W20
	0x033E68E0 BL 0x33E6CEC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call 0x1C4CE54
	005 Move TEMP, X0
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfNotEqual {14}
	009 Move X0, X19
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Call 0x1C4CED4
	013 Return 
	014 Move X0, 0xD48000
	015 Move X0, [X0+584]
	016 Call 0x1C17D08
	017 Call 0x1C17F10
	018 Move X19, X0
	019 Move X0, 0xD48000
	020 Move X0, [X0+784]
	021 Call 0x1C17D08
	022 Move X1, X0
	023 Move X0, X19
	024 Call SynchronizationLockException..ctor, X0, X1
	025 Move X0, 0xD48000
	026 Move X0, [X0+800]
	027 Call 0x1C17D08
	028 Move X1, X0
	029 Move X0, X19
	030 Call 0x1C17DEC

Method: System.Void Monitor_pulse_all(System.Object obj)

Disassembly:
	0x033E694C BL 0x1C16F10

ISIL:
	001 Call 0x1C4CEF4
	002 Return 

Method: System.Void ObjPulseAll(System.Object obj)

Disassembly:
	0x033E68E4 LDR X8, [X22]
	0x033E68E8 MOV W20, W0
	0x033E68EC MOV X0, X8
	0x033E68F0 BL 0x1C16F10
	0x033E68F4 MOV X1, X31
	0x033E68F8 MOV X22, X0
	0x033E68FC BL 0x33BDD8C
	0x033E6900 STR X21, [X22 + 0x10]
	0x033E6904 CBZ X21, 0x33E6920
	0x033E6908 ADRP X8, 0xD39000
	0x033E690C LDR X8, [X8 + 0x1D0]
	0x033E6910 LDR X0, [X8]
	0x033E6914 LDR X8, [X21]
	0x033E6918 CMP X8, X0
	0x033E691C B.EQ 0x33E694C
	0x033E6920 ADRP X8, 0xD47000
	0x033E6924 LDR X8, [X8 + 0x3B8]
	0x033E6928 ADRP X21, 0xD47000
	0x033E692C LDR X0, [X8]
	0x033E6930 LDR X21, [X21 + 0x3E0]
	0x033E6934 BL 0x1C16F10
	0x033E6938 LDR X2, [X21]
	0x033E693C MOV X1, X22
	0x033E6940 MOV X21, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call 0x1C4CE54
	005 Move TEMP, X0
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfNotEqual {14}
	009 Move X0, X19
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Call 0x1C4CEF4
	013 Return 
	014 Move X0, 0xD48000
	015 Move X0, [X0+584]
	016 Call 0x1C17D08
	017 Call 0x1C17F10
	018 Move X19, X0
	019 Move X0, 0xD48000
	020 Move X0, [X0+784]
	021 Call 0x1C17D08
	022 Move X1, X0
	023 Move X0, X19
	024 Call SynchronizationLockException..ctor, X0, X1
	025 Move X0, 0xD48000
	026 Move X0, [X0+808]
	027 Call 0x1C17D08
	028 Move X1, X0
	029 Move X0, X19
	030 Call 0x1C17DEC

Method: System.Boolean Monitor_wait(System.Object obj, System.Int32 ms)

Disassembly:
	0x033E6950 ADRP X8, 0xD47000

ISIL:
	001 Call 0x1C4CE74
	002 Return X0

Method: System.Boolean ObjWait(System.Boolean exitContext, System.Int32 millisecondsTimeout, System.Object obj)

Disassembly:
	0x033E67D4 LDR X8, [X20]
	0x033E67D8 LDP X22, X21, [X31 + 0x10]
	0x033E67DC LDR X8, [X8 + 0xB8]
	0x033E67E0 STR X19, [X8]
	0x033E67E4 LDP X20, X19, [X31 + 0x20]
	0x033E67E8 LDR X30, [X31], #0x30
	0x033E67EC RET
	0x033E67F0 STR X30, [X31 - 0x20]!
	0x033E67F4 STP X20, X19, [X31 + 0x10]
	0x033E67F8 MOV X19, X1
	0x033E67FC MOV X1, X31
	0x033E6800 MOV X20, X0
	0x033E6804 BL 0x32C01F0
	0x033E6808 CBZ X19, 0x33E6824
	0x033E680C MOV X0, X20
	0x033E6810 MOV X1, X19
	0x033E6814 LDP X20, X19, [X31 + 0x10]
	0x033E6818 MOV W2, W31
	0x033E681C LDR X30, [X31], #0x20
	0x033E6820 B 0x33E686C
	0x033E6824 ADRP X0, 0xD12000
	0x033E6828 LDR X0, [X0 + 0x528]
	0x033E682C BL 0x1C16D08
	0x033E6830 BL 0x1C16F10
	0x033E6834 MOV X19, X0
	0x033E6838 ADRP X0, 0xD47000
	0x033E683C LDR X0, [X0 + 0x3D0]
	0x033E6840 BL 0x1C16D08
	0x033E6844 MOV X1, X0
	0x033E6848 MOV X0, X19
	0x033E684C MOV X2, X31
	0x033E6850 BL 0x330E100
	0x033E6854 ADRP X0, 0xD47000
	0x033E6858 LDR X0, [X0 + 0x3D8]
	0x033E685C BL 0x1C16D08
	0x033E6860 MOV X1, X0
	0x033E6864 MOV X0, X19
	0x033E6868 BL 0x1C16DEC
	0x033E686C STP X30, X23, [X31 - 0x30]!
	0x033E6870 STP X22, X21, [X31 + 0x10]
	0x033E6874 STP X20, X19, [X31 + 0x20]
	0x033E6878 ADRP X23, 0xFF7000
	0x033E687C ADRP X22, 0xD47000
	0x033E6880 LDRB W8, [X23 + 0x3DF]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Add W31, W1, 2
	005 Move X0, X2
	006 Move W19, W1
	007 Move X20, X2
	008 Call 0x1C4CE54
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {32}
	013 Move X0, X20
	014 Move W1, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 Call 0x1C4CE74
	019 Return X0
	020 Move X0, 0xD16000
	021 Move X0, [X0+1888]
	022 Call 0x1C17D08
	023 Call 0x1C17F10
	024 Move X19, X0
	025 Move X0, 0xD47000
	026 Move X0, [X0+4056]
	027 Call 0x1C17D08
	028 Move X1, X0
	029 Move X0, X19
	030 Move X2, X31
	031 Call ArgumentOutOfRangeException..ctor, X0, X1
	032 Move X0, 0xD48000
	033 Move X0, [X0+584]
	034 Call 0x1C17D08
	035 Call 0x1C17F10
	036 Move X19, X0
	037 Move X0, 0xD48000
	038 Move X0, [X0+784]
	039 Call 0x1C17D08
	040 Move X1, X0
	041 Move X0, X19
	042 Call SynchronizationLockException..ctor, X0, X1
	043 Move X0, 0xD48000
	044 Move X0, [X0+792]
	045 Call 0x1C17D08
	046 Move X1, X0
	047 Move X0, X19
	048 Call 0x1C17DEC

Method: System.Void try_enter_with_atomic_var(System.Object obj, System.Int32 millisecondsTimeout, ref System.Boolean lockTaken)

Disassembly:
	0x033E6954 LDR X8, [X8 + 0x3E8]

ISIL:
	001 Call 0x1C4CF14
	002 Return 

Method: System.Void ReliableEnterTimeout(System.Object obj, System.Int32 timeout, ref System.Boolean lockTaken)

Disassembly:
	0x033E6958 MOV X1, X22
	0x033E695C MOV X21, X0
	0x033E6960 LDR X2, [X8]
	0x033E6964 BL 0x33DD08C
	0x033E6968 MOV X0, X19
	0x033E696C MOV X1, X21
	0x033E6970 MOV W2, W20
	0x033E6974 LDP X20, X19, [X31 + 0x20]
	0x033E6978 LDP X22, X21, [X31 + 0x10]
	0x033E697C LDP X30, X23, [X31], #0x30
	0x033E6980 B 0x33E6D98
	0x033E6984 STP X30, X21, [X31 - 0x20]!
	0x033E6988 STP X20, X19, [X31 + 0x10]
	0x033E698C MOV X20, X1
	0x033E6990 MOV X1, X31
	0x033E6994 MOV W19, W2
	0x033E6998 MOV X21, X0
	0x033E699C BL 0x32C01F0
	0x033E69A0 CBZ X20, 0x33E69C0
	0x033E69A4 TBNZ X19, 0x1F, 0x33E6A08
	0x033E69A8 MOV X1, X20
	0x033E69AC MOV W2, W19
	0x033E69B0 LDP X20, X19, [X31 + 0x10]
	0x033E69B4 MOV X0, X21
	0x033E69B8 LDP X30, X21, [X31], #0x20
	0x033E69BC B 0x33E686C
	0x033E69C0 ADRP X0, 0xD12000
	0x033E69C4 LDR X0, [X0 + 0x528]
	0x033E69C8 BL 0x1C16D08
	0x033E69CC BL 0x1C16F10
	0x033E69D0 MOV X19, X0
	0x033E69D4 ADRP X0, 0xD47000
	0x033E69D8 LDR X0, [X0 + 0x3D0]
	0x033E69DC BL 0x1C16D08
	0x033E69E0 MOV X1, X0
	0x033E69E4 MOV X0, X19
	0x033E69E8 MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Add W31, W1, 2
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Call 0x1C4CF14
	009 Return 
	010 Move X0, 0xD13000
	011 Move X0, [X0+1320]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0xD19000
	016 Move X0, [X0+2216]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call ArgumentNullException..ctor, X0, X1
	022 Move X0, 0xD16000
	023 Move X0, [X0+1888]
	024 Call 0x1C17D08
	025 Call 0x1C17F10
	026 Move X19, X0
	027 Move X0, 0xD47000
	028 Move X0, [X0+4056]
	029 Call 0x1C17D08
	030 Move X1, X0
	031 Move X0, X19
	032 Move X2, X31
	033 Call ArgumentOutOfRangeException..ctor, X0, X1
	034 Move X0, 0xD48000
	035 Move X0, [X0+816]
	036 Call 0x1C17D08
	037 Move X1, X0
	038 Move X0, X19
	039 Call 0x1C17DEC

Method: System.Void ReliableEnter(System.Object obj, ref System.Boolean lockTaken)

Disassembly:
	0x033E676C ADRP X21, 0xFF7000
	0x033E6770 ADRP X22, 0xD3F000
	0x033E6774 ADRP X19, 0xD47000

ISIL:
	001 Move X2, X1
	002 Move TEMP, 0
	003 Not TEMP
	004 Move W1, TEMP
	005 Call Monitor.ReliableEnterTimeout, X0, X1, X2
	006 Return 

