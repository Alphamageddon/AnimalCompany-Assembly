Type: System.Threading.SparselyPopulatedArray`1

Method: System.Void .ctor(System.Int32 initialSize)

Disassembly:
	0x02600C00 STR V0, [X31]
	0x02600C04 STR X8, [X31 + 0x10]
	0x02600C08 LDR X8, [X19 + 0x20]
	0x02600C0C LDR X8, [X8 + 0xC0]
	0x02600C10 LDR X0, [X8 + 0x38]
	0x02600C14 BL 0x1C16E04
	0x02600C18 LDP X30, X19, [X31 + 0x30]
	0x02600C1C ADD X31, X31, 0x40
	0x02600C20 RET
	0x02600C24 SUB X31, X31, 0x40
	0x02600C28 STP X30, X19, [X31 + 0x30]
	0x02600C2C STP X31, X31, [X31 + 0x18]
	0x02600C30 STR X31, [X31 + 0x28]
	0x02600C34 LDR X8, [X1 + 0x20]
	0x02600C38 MOV X19, X1
	0x02600C3C MOV X1, X0
	0x02600C40 ADD X0, X31, 0x18
	0x02600C44 LDR X8, [X8 + 0xC0]
	0x02600C48 LDR X2, [X8 + 0x40]
	0x02600C4C BL 0x2BBE2DC
	0x02600C50 LDUR V0, [X31 + 0x18]
	0x02600C54 LDR X8, [X31 + 0x28]
	0x02600C58 ADD X1, X31, 0x0
	0x02600C5C STR V0, [X31]
	0x02600C60 STR X8, [X31 + 0x10]
	0x02600C64 LDR X8, [X19 + 0x20]
	0x02600C68 LDR X8, [X8 + 0xC0]
	0x02600C6C LDR X0, [X8 + 0x38]
	0x02600C70 BL 0x1C16E04

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W20, W1
	006 Move X1, X31
	007 Move X21, X2
	008 Move X19, X0
	009 Call Object..ctor, X0
	010 Move X8, [X21+32]
	011 Move X8, [X8+192]
	012 Move X0, [X8]
	013 Move W8, [X0+309]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {19}
	018 Call 0x1C5D684
	019 Call 0x1C17F10
	020 Move X8, [X21+32]
	021 Move W1, W20
	022 Move X2, X31
	023 Move X21, X0
	024 Move X8, [X8+192]
	025 Move X8, [X8+8]
	026 Move X8, [X8+32]
	027 Move X8, [X8+192]
	028 Move X3, [X8]
	029 Call 0x2600AC8, X0, X1, X2
	030 Call 0x1C17D44
	031 Move [X19+16], X21
	032 Move [X19+24], X21
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return 

Method: System.Threading.SparselyPopulatedArrayFragment`1<T> get_Tail()

Disassembly:
	0x02600C74 LDP X30, X19, [X31 + 0x30]
	0x02600C78 ADD X31, X31, 0x40
	0x02600C7C RET
	0x02600C80 STR X30, [X31 - 0x10]!
	0x02600C84 LDR X8, [X0 + 0x10]
	0x02600C88 CBZ X8, 0x2600CB0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+24]
	004 Call 0x1C17D44
	005 Move X0, X19
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return X0

Method: System.Threading.SparselyPopulatedArrayAddInfo`1<T> Add(T element)

Disassembly:
	0x02600C8C LDR W9, [X0 + 0x18]
	0x02600C90 LDR W10, [X8 + 0x18]
	0x02600C94 SUB W9, W9, 0x1
	0x02600C98 CMP W9, W10
	0x02600C9C B.CS 0x2600CB4
	0x02600CA0 ADD X8, X8, W9, 0x2, SXTW
	0x02600CA4 LDR W0, [X8 + 0x20]
	0x02600CA8 LDR X30, [X31], #0x10
	0x02600CAC RET
	0x02600CB0 BL 0x1C16F20
	0x02600CB4 LDR X8, [X1 + 0x20]
	0x02600CB8 LDR X8, [X8 + 0xC0]
	0x02600CBC LDR X1, [X8 + 0x50]
	0x02600CC0 BL 0x2600DE8
	0x02600CC4 STR X30, [X31 - 0x10]!
	0x02600CC8 LDR X8, [X0 + 0x10]
	0x02600CCC CBZ X8, 0x2600D00
	0x02600CD0 LDR W9, [X0 + 0x18]
	0x02600CD4 LDR W10, [X8 + 0x18]
	0x02600CD8 SUB W9, W9, 0x1
	0x02600CDC CMP W9, W10
	0x02600CE0 B.CS 0x2600D04
	0x02600CE4 LDR W10, [X0 + 0x1C]
	0x02600CE8 ADD X8, X8, W9, 0x2, SXTW
	0x02600CEC ADD W10, W10, 0x1
	0x02600CF0 STP W9, W10, [X0 + 0x18]
	0x02600CF4 LDR W0, [X8 + 0x20]
	0x02600CF8 LDR X30, [X31], #0x10
	0x02600CFC RET
	0x02600D00 BL 0x1C16F20
	0x02600D04 LDR X8, [X1 + 0x20]
	0x02600D08 LDR X8, [X8 + 0xC0]
	0x02600D0C LDR X1, [X8 + 0x50]
	0x02600D10 BL 0x2600DE8
	0x02600D14 STR X30, [X31 - 0x10]!
	0x02600D18 LDR X9, [X0 + 0x10]
	0x02600D1C CBZ X9, 0x2600D64
	0x02600D20 LDRSW X8, [X0 + 0x18]
	0x02600D24 LDR W10, [X9 + 0x18]
	0x02600D28 CMP W8, W10
	0x02600D2C B.CS 0x2600D50
	0x02600D30 ADD X9, X9, X8, 0x2, LSL
	0x02600D34 STR W1, [X9 + 0x20]
	0x02600D38 LDR W9, [X0 + 0x1C]
	0x02600D3C ADD W8, W8, 0x1
	0x02600D40 ADD W9, W9, 0x1
	0x02600D44 STP W8, W9, [X0 + 0x18]
	0x02600D48 LDR X30, [X31], #0x10
	0x02600D4C RET
	0x02600D50 LDR X8, [X2 + 0x20]
	0x02600D54 LDR X8, [X8 + 0xC0]
	0x02600D58 LDR X2, [X8 + 0x58]
	0x02600D5C LDR X30, [X31], #0x10
	0x02600D60 B 0x2600D68
	0x02600D64 BL 0x1C16F20
	0x02600D68 STR X30, [X31 - 0x20]!
	0x02600D6C STP X20, X19, [X31 + 0x10]
	0x02600D70 MOV X19, X0
	0x02600D74 LDR X8, [X0 + 0x10]!
	0x02600D78 CBZ X8, 0x2600DE0
	0x02600D7C LDR X9, [X2 + 0x20]
	0x02600D80 LDR X8, [X8 + 0x18]
	0x02600D84 MOV W20, W1
	0x02600D88 LDR X9, [X9 + 0xC0]
	0x02600D8C UBFM W10, W8, 0x1F, 0x1E
	0x02600D90 CMP X8, 0x0
	0x02600D94 MOVZ W8, 0x4
	0x02600D98 LDR X2, [X9 + 0x60]
	0x02600D9C CSEL W1, W8, W10, EQ
	0x02600DA0 BL 0x2116294
	0x02600DA4 LDR X8, [X19 + 0x10]
	0x02600DA8 CBZ X8, 0x2600DE0
	0x02600DAC LDRSW X9, [X19 + 0x18]
	0x02600DB0 LDR W10, [X8 + 0x18]
	0x02600DB4 CMP W9, W10
	0x02600DB8 B.CS 0x2600DE4
	0x02600DBC ADD X8, X8, X9, 0x2, LSL
	0x02600DC0 STR W20, [X8 + 0x20]
	0x02600DC4 LDR V0, [X19 + 0x18]
	0x02600DC8 MOVI V1.2S, 0x1
	0x02600DCC ADD S0.2S, S0.2S, S1.2S
	0x02600DD0 STR D0, [X19 + 0x18]
	0x02600DD4 LDP X20, X19, [X31 + 0x10]
	0x02600DD8 LDR X30, [X31], #0x20
	0x02600DDC RET
	0x02600DE0 BL 0x1C16F20
	0x02600DE4 BL 0x1C16F28
	0x02600DE8 STR X30, [X31 - 0x20]!
	0x02600DEC STP X20, X19, [X31 + 0x10]
	0x02600DF0 ADRP X0, 0x1AF3000
	0x02600DF4 LDR X0, [X0 + 0x5B0]
	0x02600DF8 MOV X19, X1
	0x02600DFC BL 0x1C16D08
	0x02600E00 BL 0x1C16F10
	0x02600E04 MOV X20, X0
	0x02600E08 ADRP X0, 0x1B1D000
	0x02600E0C LDR X0, [X0 + 0x308]
	0x02600E10 BL 0x1C16D08
	0x02600E14 MOV X1, X0
	0x02600E18 MOV X0, X20
	0x02600E1C MOV X2, X31
	0x02600E20 BL 0x337DF1C
	0x02600E24 MOV X0, X20
	0x02600E28 MOV X1, X19
	0x02600E2C BL 0x1C16DEC
	0x02600E30 STR X30, [X31 - 0x20]!
	0x02600E34 STP X20, X19, [X31 + 0x10]
	0x02600E38 MOV X20, X1
	0x02600E3C MOV X1, X31
	0x02600E40 MOV X19, X0
	0x02600E44 BL 0x33BDD8C
	0x02600E48 LDR X8, [X20 + 0x20]
	0x02600E4C LDR X8, [X8 + 0xC0]
	0x02600E50 LDR X20, [X8]
	0x02600E54 LDR X8, [X20 + 0x38]
	0x02600E58 CBNZ X8, 0x2600E68
	0x02600E5C MOV X0, X20
	0x02600E60 BL 0x1C5C6E0
	0x02600E64 LDR X8, [X20 + 0x38]
	0x02600E68 LDR X0, [X8 + 0x10]
	0x02600E6C LDRB W8, [X0 + 0x135]
	0x02600E70 TBNZ X8, 0x0, 0x2600E78
	0x02600E74 BL 0x1C5C684
	0x02600E78 LDR W8, [X0 + 0xE0]
	0x02600E7C CBNZ W8, 0x2600E84
	0x02600E80 BL 0x1C16DFC

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X22, [X0+24]
	013 Move X19, X2
	014 Move X20, X0
	015 Move X21, X1
	016 Call 0x1C17D44
	017 Compare X22, 0
	018 JumpIfEqual {146}
	019 Move X23, X22
	020 Add X23, X23, 32
	021 Move X24, [X23]
	022 Call 0x1C17D44
	023 Compare X24, 0
	024 JumpIfEqual {31}
	025 Move X22, [X23]
	026 Call 0x1C17D44
	027 Call 0x1C17D44
	028 Move [X20+24], X22
	029 Compare X22, 0
	030 JumpIfNotEqual {19}
	031 Move X24, X22
	032 Move W26, [X24+24]
	033 Call 0x1C17D44
	034 Move W25, [X24+24]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Call 0x1C17D44
	037 Call 0x1C17D44
	038 Subtract W25, W25, 1
	039 Move [X24+24], W25
	040 Call 0x1C17D44
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move W25, [X24+24]
	043 Call 0x1C17D44
	044 Add W31, W25, 11
	045 Move X8, [X24+16]
	046 Compare X8, 0
	047 JumpIfEqual {146}
	048 Move W25, [X8+24]
	049 Move W26, [X24+24]
	050 Call 0x1C17D44
	051 Subtract W8, W25, W26
	052 NotImplemented "Instruction SDIV not yet implemented."
	053 NotImplemented "Instruction MSUB not yet implemented."
	054 Move TEMP, X26
	055 And TEMP, TEMP, -2147483648
	056 Compare TEMP, -2147483648
	057 JumpIfNotEqual {64}
	058 Move W27, [X24+24]
	059 Call 0x1C17D44
	060 Call 0x1C17D44
	061 Move W26, W31
	062 Subtract W8, W27, 1
	063 Move [X24+24], W8
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move W27, W25
	066 Move X8, [X24+16]
	067 Compare X8, 0
	068 JumpIfEqual {146}
	069 Move W9, [X8+24]
	070 NotImplemented "Instruction SDIV not yet implemented."
	071 NotImplemented "Instruction MSUB not yet implemented."
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Add X0, X8, W28
	074 Add X0, X0, 32
	075 Move X8, [X0]
	076 Compare X8, 0
	077 JumpIfNotEqual {83}
	078 Move X1, X21
	079 Move X2, X31
	080 Call 0x1C25138
	081 Compare X0, 0
	082 JumpIfEqual {126}
	083 Subtract W27, W27, 1
	084 Add W26, W26, 1
	085 Move X24, [X24+40]
	086 Call 0x1C17D44
	087 Compare X24, 0
	088 JumpIfNotEqual {32}
	089 Move X8, [X22+16]
	090 Compare X8, 0
	091 JumpIfEqual {146}
	092 Move X9, [X19+32]
	093 Move W8, [X8+24]
	094 Move X9, [X9+192]
	095 Move W10, W8
	096 ShiftRight W10, 31
	097 And W10, W10, 0x3FFFFFFF
	098 NotImplemented "Instruction CMP not yet implemented."
	099 NotImplemented "Instruction CSEL not yet implemented."
	100 Move X0, [X9]
	101 Move W9, [X0+309]
	102 Move TEMP, X9
	103 And TEMP, TEMP, 1
	104 Compare TEMP, 1
	105 JumpIfEqual {107}
	106 Call 0x1C5D684
	107 Call 0x1C17F10
	108 Move X8, [X19+32]
	109 Move W1, W25
	110 Move X2, X22
	111 Move X24, X0
	112 Move X8, [X8+192]
	113 Move X3, [X8+80]
	114 Call 0x2600AC8, X0, X1, X2
	115 Call 0x1C17D44
	116 Move X0, X23
	117 Move X1, X24
	118 Move X2, X31
	119 Call 0x1C25138
	120 Compare X0, 0
	121 JumpIfEqual {123}
	122 Move X22, [X20+24]
	123 Call 0x1C17D44
	124 Move X22, X24
	125 Move [X20+24], X24
	126 Move W19, [X24+24]
	127 Call 0x1C17D44
	128 Subtract W8, W19, 1
	129 NotImplemented "Instruction BIC not yet implemented."
	130 Call 0x1C17D44
	131 Move W1, W28
	132 Move [X24+24], W19
	133 Move X0, X24
	134 Move X20, [X31+80]
	135 Move X19, [X31+88]
	136 Move X22, [X31+64]
	137 Move X21, [X31+72]
	138 Move X24, [X31+48]
	139 Move X23, [X31+56]
	140 Move X26, [X31+32]
	141 Move X25, [X31+40]
	142 Move X28, [X31+16]
	143 Move X27, [X31+24]
	144 Move X30, [X31+96]
	145 Return X0
	146 Call 0x1C17F20
	147 Call 0x1C17F28

