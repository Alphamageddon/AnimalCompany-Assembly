Type: System.Threading.SparselyPopulatedArrayFragment`1

Method: System.Void .ctor(System.Int32 size)

Disassembly:
	0x02600AB4 ADRP X0, 0x1AFB000
	0x02600AB8 LDR X0, [X0 + 0x578]
	0x02600ABC BL 0x1C16D08
	0x02600AC0 BL 0x1C16F10
	0x02600AC4 MOV X20, X0

ISIL:
	001 Move X8, [X2+32]
	002 Move X2, X31
	003 Move X8, [X8+192]
	004 Move X3, [X8]

Method: System.Void .ctor(System.Int32 size, System.Threading.SparselyPopulatedArrayFragment`1<T> prev)

Disassembly:
	0x02600AC8 ADRP X0, 0x1B1C000
	0x02600ACC LDR X0, [X0 + 0x310]
	0x02600AD0 BL 0x1C16D08
	0x02600AD4 MOV X21, X0
	0x02600AD8 ADRP X0, 0x1B1B000
	0x02600ADC LDR X0, [X0 + 0x640]
	0x02600AE0 BL 0x1C16D08
	0x02600AE4 MOV X2, X0
	0x02600AE8 MOV X0, X20
	0x02600AEC MOV X1, X21
	0x02600AF0 MOV X3, X31
	0x02600AF4 BL 0x330E16C
	0x02600AF8 B 0x2600B2C
	0x02600AFC ADRP X0, 0x1AFB000
	0x02600B00 LDR X0, [X0 + 0x578]
	0x02600B04 BL 0x1C16D08
	0x02600B08 BL 0x1C16F10
	0x02600B0C MOV X20, X0
	0x02600B10 ADRP X0, 0x1B1B000
	0x02600B14 LDR X0, [X0 + 0x760]
	0x02600B18 BL 0x1C16D08
	0x02600B1C MOV X1, X0
	0x02600B20 MOV X0, X20
	0x02600B24 MOV X2, X31
	0x02600B28 BL 0x3314A68
	0x02600B2C MOV X0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W21, W1
	007 Move X1, X31
	008 Move X22, X3
	009 Move X19, X2
	010 Move X20, X0
	011 Call Object..ctor, X0
	012 Move X8, [X22+32]
	013 Move X8, [X8+192]
	014 Move X0, [X8+16]
	015 Move W8, [X0+309]
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {21}
	020 Call 0x1C5D684
	021 Move W1, W21
	022 Call 0x1C17D6C
	023 Move [X20+16], X0
	024 Call 0x1C17D44
	025 Move [X20+24], W21
	026 Call 0x1C17D44
	027 Move [X20+40], X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]
	033 Return 

Method: T get_Item(System.Int32 index)

Disassembly:
	0x02600B30 MOV X1, X19
	0x02600B34 BL 0x1C16DEC
	0x02600B38 B 0x2600B3C
	0x02600B3C MOV X20, X0
	0x02600B40 CMP W1, 0x1
	0x02600B44 B.NE 0x2600BBC
	0x02600B48 MOV X0, X20
	0x02600B4C BL 0x3EB1AD0
	0x02600B50 MOV X20, X0
	0x02600B54 ADRP X0, 0x1B1C000
	0x02600B58 LDR X0, [X0 + 0x320]
	0x02600B5C BL 0x1C16D08
	0x02600B60 LDR X8, [X20]
	0x02600B64 LDR X1, [X8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+16]
	004 Compare X8, 0
	005 JumpIfEqual {15}
	006 Move W9, [X8+24]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Add X8, X8, W1
	009 Move X19, [X8+32]
	010 Call 0x1C17D44
	011 Move X0, X19
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return X0
	015 Call 0x1C17F20
	016 Call 0x1C17F28

Method: System.Int32 get_Length()

Disassembly:
	0x02600B68 BL 0x1C17270
	0x02600B6C TBZ X0, 0x0, 0x2600B94
	0x02600B70 BL 0x3EB1AE0
	0x02600B74 ADRP X0, 0x1AFB000
	0x02600B78 LDR X0, [X0 + 0x578]
	0x02600B7C BL 0x1C16D08
	0x02600B80 BL 0x1C16F10

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Threading.SparselyPopulatedArrayFragment`1<T> get_Prev()

Disassembly:
	0x02600B84 MOV X20, X0
	0x02600B88 ADRP X0, 0x1B1C000
	0x02600B8C LDR X0, [X0 + 0x328]
	0x02600B90 B 0x2600AD0
	0x02600B94 MOVZ W0, 0x8
	0x02600B98 BL 0x3EB1AF0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+40]
	004 Call 0x1C17D44
	005 Move X0, X19
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return X0

Method: T SafeAtomicRemove(System.Int32 index, T expectedElement)

Disassembly:
	0x02600B9C LDR X8, [X20]
	0x02600BA0 STR X8, [X0]
	0x02600BA4 ADRP X1, 0x18B4000
	0x02600BA8 ADD X1, X1, 0xE58
	0x02600BAC MOV X2, X31
	0x02600BB0 BL 0x3EB1B00
	0x02600BB4 MOV X20, X0
	0x02600BB8 BL 0x3EB1AE0
	0x02600BBC MOV X0, X20
	0x02600BC0 BL 0x1D2C690
	0x02600BC4 BL 0x1990590
	0x02600BC8 SUB X31, X31, 0x40
	0x02600BCC STP X30, X19, [X31 + 0x30]
	0x02600BD0 STP X31, X31, [X31 + 0x18]
	0x02600BD4 STR X31, [X31 + 0x28]
	0x02600BD8 LDR X8, [X1 + 0x20]
	0x02600BDC MOV X19, X1
	0x02600BE0 MOV X1, X0
	0x02600BE4 ADD X0, X31, 0x18
	0x02600BE8 LDR X8, [X8 + 0xC0]
	0x02600BEC LDR X2, [X8 + 0x40]
	0x02600BF0 BL 0x2BBE2DC
	0x02600BF4 LDUR V0, [X31 + 0x18]
	0x02600BF8 LDR X8, [X31 + 0x28]
	0x02600BFC ADD X1, X31, 0x0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X0+16]
	006 Compare X8, 0
	007 JumpIfEqual {29}
	008 Move W9, [X8+24]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Add X8, X8, W1
	011 Move X19, X0
	012 Add X0, X8, 32
	013 Move X1, X31
	014 Call 0x1C25138
	015 Move X20, X0
	016 Compare X0, 0
	017 JumpIfEqual {23}
	018 Move W21, [X19+24]
	019 Call 0x1C17D44
	020 Call 0x1C17D44
	021 Add W8, W21, 1
	022 Move [X19+24], W8
	023 Move X0, X20
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Move X21, [X31+40]
	028 Return X0
	029 Call 0x1C17F20
	030 Call 0x1C17F28

