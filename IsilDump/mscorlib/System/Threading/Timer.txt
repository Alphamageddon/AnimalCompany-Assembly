Type: System.Threading.Timer

Method: System.Threading.Timer/Scheduler get_scheduler()

Disassembly:
	0x033ECAC0 LDR X8, [X19]
	0x033ECAC4 CMP X8, X1
	0x033ECAC8 B.NE 0x33ECAF4
	0x033ECACC LDR X8, [X19 + 0x18]
	0x033ECAD0 CBZ X8, 0x33ECAF0
	0x033ECAD4 LDR X1, [X19 + 0x20]
	0x033ECAD8 LDR X3, [X8 + 0x18]
	0x033ECADC LDR X0, [X8 + 0x40]
	0x033ECAE0 LDR X2, [X8 + 0x28]
	0x033ECAE4 LDP X20, X19, [X31 + 0x10]
	0x033ECAE8 LDR X30, [X31], #0x20
	0x033ECAEC BR X3
	0x033ECAF0 BL 0x1C16F20
	0x033ECAF4 MOV X0, X19
	0x033ECAF8 BL 0x1C171E0
	0x033ECAFC STP X30, X21, [X31 - 0x20]!
	0x033ECB00 STP X20, X19, [X31 + 0x10]
	0x033ECB04 ADRP X20, 0xFF1000
	0x033ECB08 LDRB W8, [X20 + 0x423]
	0x033ECB0C MOV X19, X1
	0x033ECB10 TBNZ X8, 0x0, 0x33ECB34
	0x033ECB14 ADRP X0, 0xD41000
	0x033ECB18 LDR X0, [X0 + 0x608]
	0x033ECB1C BL 0x1C16CF4
	0x033ECB20 ADRP X0, 0xD10000
	0x033ECB24 LDR X0, [X0 + 0x958]
	0x033ECB28 BL 0x1C16CF4
	0x033ECB2C MOVZ W8, 0x1
	0x033ECB30 STRB W8, [X20 + 0x423]
	0x033ECB34 CBZ X19, 0x33ECBB8
	0x033ECB38 LDR X8, [X19 + 0x30]
	0x033ECB3C ADRP X21, 0xD10000
	0x033ECB40 ADRP X20, 0xD41000
	0x033ECB44 LDR X21, [X21 + 0x958]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xFF2000
	005 Move X19, 0xD42000
	006 Move W8, [X20+1048]
	007 Move X19, [X19+1400]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xD42000
	013 Move X0, [X0+1400]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1048], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X20, 0xFF2000
	023 Move W8, [X20+1280]
	024 Compare W8, 0
	025 JumpIfNotEqual {31}
	026 Move X0, 0xD42000
	027 Move X0, [X0+1400]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+1280], W8
	031 Move X0, [X19]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1C17DFC
	036 Move X0, [X19]
	037 Move X8, [X0+184]
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X0, [X8]
	041 Move X30, [X31+32]
	042 Return X0

Method: System.Void .ctor(System.Threading.TimerCallback callback, System.Object state, System.Int32 dueTime, System.Int32 period)

Disassembly:
	0x033ECB48 LDR X20, [X20 + 0x608]
	0x033ECB4C ADDS X31, X8, 0x1
	0x033ECB50 B.EQ 0x33ECB64
	0x033ECB54 CBNZ X8, 0x33ECB70
	0x033ECB58 LDR X8, [X19 + 0x28]
	0x033ECB5C ADDS X31, X8, 0x1
	0x033ECB60 B.EQ 0x33ECB70
	0x033ECB64 MOVZ W8, 0x1
	0x033ECB68 MOVN X9, 0x80000000
	0x033ECB6C B 0x33ECB84
	0x033ECB70 BL 0x1C4C53C
	0x033ECB74 LDR X9, [X19 + 0x30]
	0x033ECB78 MOVZ W10, 0x2710
	0x033ECB7C MOV W8, W31
	0x033ECB80 MADD X9, X9, X10, X0
	0x033ECB84 STR X9, [X19 + 0x38]
	0x033ECB88 STRB W8, [X19 + 0x41]
	0x033ECB8C LDR X0, [X21]
	0x033ECB90 BL 0x1C16F10

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, X1
	008 Move X1, X31
	009 Move W19, W4
	010 Move W20, W3
	011 Move X21, X2
	012 Move X23, X0
	013 Call MarshalByRefObject..ctor, X0
	014 Move X3, W20
	015 Move X4, W19
	016 Move X1, X22
	017 Move X2, X21
	018 Move X20, [X31+32]
	019 Move X19, [X31+40]
	020 Move X22, [X31+16]
	021 Move X21, [X31+24]
	022 Move X0, X23
	023 Move X30, [X31+48]
	024 Move X23, [X31+56]

Method: System.Void .ctor(System.Threading.TimerCallback callback, System.Object state, System.TimeSpan dueTime, System.TimeSpan period)

Disassembly:
	0x033ECC04 STR X19, [X8]
	0x033ECC08 LDP X20, X19, [X31 + 0x10]
	0x033ECC0C LDR X30, [X31], #0x20
	0x033ECC10 RET
	0x033ECC14 STR X30, [X31 - 0x30]!
	0x033ECC18 STP X22, X21, [X31 + 0x10]
	0x033ECC1C STP X20, X19, [X31 + 0x20]
	0x033ECC20 LDR X8, [X2 + 0x8]
	0x033ECC24 STP X1, X2, [X0 + 0x20]
	0x033ECC28 MOV X19, X0
	0x033ECC2C MOV X20, X2
	0x033ECC30 STR X8, [X0 + 0x10]
	0x033ECC34 LDRB W22, [X2 + 0x52]
	0x033ECC38 STR X0, [X0 + 0x40]
	0x033ECC3C MOV X0, X2
	0x033ECC40 MOV X21, X1
	0x033ECC44 BL 0x1C16D84
	0x033ECC48 TBZ X0, 0x0, 0x33ECC60
	0x033ECC4C CMP W22, 0x1
	0x033ECC50 B.NE 0x33ECC68
	0x033ECC54 ADRP X8, 0xFFFFFFFFFE7D0000
	0x033ECC58 ADD X8, X8, 0xFE4
	0x033ECC5C B 0x33ECCDC
	0x033ECC60 CBZ W22, 0x33ECC7C
	0x033ECC64 CBZ X21, 0x33ECCFC
	0x033ECC68 LDR X8, [X19 + 0x10]
	0x033ECC6C LDR X9, [X19 + 0x20]
	0x033ECC70 STR X8, [X19 + 0x18]
	0x033ECC74 STR X9, [X19 + 0x40]
	0x033ECC78 B 0x33ECCE0
	0x033ECC7C LDRB W8, [X19 + 0x70]
	0x033ECC80 CBZ W8, 0x33ECCAC
	0x033ECC84 MOV X0, X20
	0x033ECC88 BL 0x1C16D7C
	0x033ECC8C MOV W21, W0
	0x033ECC90 MOV X0, X20
	0x033ECC94 BL 0x1C17238
	0x033ECC98 TBZ X21, 0x0, 0x33ECCB8
	0x033ECC9C TBZ X0, 0x0, 0x33ECCC8
	0x033ECCA0 ADRP X8, 0xFFFFFFFFFE7D1000
	0x033ECCA4 ADD X8, X8, 0xE0
	0x033ECCA8 B 0x33ECCDC
	0x033ECCAC ADRP X8, 0xFFFFFFFFFE7D0000
	0x033ECCB0 ADD X8, X8, 0xFC4
	0x033ECCB4 B 0x33ECCDC
	0x033ECCB8 TBZ X0, 0x0, 0x33ECCD4
	0x033ECCBC ADRP X8, 0xFFFFFFFFFE7D1000
	0x033ECCC0 ADD X8, X8, 0x20
	0x033ECCC4 B 0x33ECCDC
	0x033ECCC8 ADRP X8, 0xFFFFFFFFFE7D1000
	0x033ECCCC ADD X8, X8, 0xA4
	0x033ECCD0 B 0x33ECCDC
	0x033ECCD4 ADRP X8, 0xFFFFFFFFFE7D0000

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], D8
	003 Move [X31+32], X30
	004 Move [X31+40], X23
	005 Move [X31+48], X22
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X23, 0xFF2000
	010 Move [X31+24], X3
	011 Move [X31+8], X4
	012 Move X22, 0xD0A000
	013 Move W8, [X23+1049]
	014 Move X22, [X22+1392]
	015 Move X19, X2
	016 Move X20, X1
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xD0A000
	023 Move X0, [X0+1392]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+1049], W8
	027 Move X0, X21
	028 Move X1, X31
	029 Call MarshalByRefObject..ctor, X0
	030 Move X0, [X22]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Add X0, X31, 24
	036 Move X1, X31
	037 Call TimeSpan.get_TotalMilliseconds, X0
	038 Add X0, X31, 8
	039 Move X1, X31
	040 Move V8, V0
	041 Call TimeSpan.get_TotalMilliseconds, X0
	042 Move X9, 0x7FF00000
	043 Move D1, X9
	044 NotImplemented "Instruction FCVTZS not yet implemented."
	045 Move X10, 0x80000000
	046 NotImplemented "Instruction FCMP not yet implemented."
	047 NotImplemented "Instruction FCVTZS not yet implemented."
	048 NotImplemented "Instruction CSEL not yet implemented."
	049 NotImplemented "Instruction FCMP not yet implemented."
	050 NotImplemented "Instruction CSEL not yet implemented."
	051 Move X0, X21
	052 Move X1, X20
	053 Move X2, X19
	054 Call Timer.Init, X0, X1, X2, X3, X4
	055 Move X20, [X31+64]
	056 Move X19, [X31+72]
	057 Move X22, [X31+48]
	058 Move X21, [X31+56]
	059 Move X30, [X31+32]
	060 Move X23, [X31+40]
	061 Move V8, [X31+16]
	062 Add X31, X31, 80
	063 Return 

Method: System.Void Init(System.Threading.TimerCallback callback, System.Object state, System.Int64 dueTime, System.Int64 period)

Disassembly:
	0x033ECB94 LDR X2, [X20]
	0x033ECB98 MOV X1, X31
	0x033ECB9C MOV X20, X0
	0x033ECBA0 BL 0x33E7508
	0x033ECBA4 MOV X0, X20
	0x033ECBA8 MOV X1, X19
	0x033ECBAC LDP X20, X19, [X31 + 0x10]
	0x033ECBB0 LDP X30, X21, [X31], #0x20
	0x033ECBB4 B 0x33E9B5C
	0x033ECBB8 BL 0x1C16F20
	0x033ECBBC STR X30, [X31 - 0x20]!
	0x033ECBC0 STP X20, X19, [X31 + 0x10]
	0x033ECBC4 ADRP X19, 0xFF1000
	0x033ECBC8 ADRP X20, 0xD41000
	0x033ECBCC LDRB W8, [X19 + 0x425]
	0x033ECBD0 LDR X20, [X20 + 0x578]
	0x033ECBD4 TBNZ X8, 0x0, 0x33ECBEC
	0x033ECBD8 ADRP X0, 0xD41000
	0x033ECBDC LDR X0, [X0 + 0x578]
	0x033ECBE0 BL 0x1C16CF4
	0x033ECBE4 MOVZ W8, 0x1
	0x033ECBE8 STRB W8, [X19 + 0x425]
	0x033ECBEC LDR X0, [X20]
	0x033ECBF0 BL 0x1C16F10
	0x033ECBF4 MOV X19, X0
	0x033ECBF8 BL 0x33EC8CC
	0x033ECBFC LDR X8, [X20]
	0x033ECC00 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X1, 0
	004 JumpIfEqual {16}
	005 Move X8, X3
	006 Move [X0+24], X1
	007 Move [X0+32], X2
	008 Move W3, 1
	009 NotImplemented "Instruction STURH not yet implemented."
	010 Move X1, X8
	011 Move X2, X4
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Call Timer.Change, X0, X1, X2, X3
	015 Return 
	016 Move X0, 0xD0D000
	017 Move X0, [X0+1320]
	018 Call 0x1C17D08
	019 Call 0x1C17F10
	020 Move X19, X0
	021 Move X0, 0xD41000
	022 Move X0, [X0+3880]
	023 Call 0x1C17D08
	024 Move X1, X0
	025 Move X0, X19
	026 Move X2, X31
	027 Call ArgumentNullException..ctor, X0, X1
	028 Move X0, 0xD42000
	029 Move X0, [X0+1408]
	030 Call 0x1C17D08
	031 Move X1, X0
	032 Move X0, X19
	033 Call 0x1C17DEC

Method: System.Boolean Change(System.Int32 dueTime, System.Int32 period)

Disassembly:
	0x033ECEA0 B 0x33ECEA8
	0x033ECEA4 MOV X0, X31
	0x033ECEA8 LDP X30, X19, [X31], #0x10
	0x033ECEAC RET
	0x033ECEB0 MOV X4, X31
	0x033ECEB4 B 0x338CA70
	0x033ECEB8 STP X30, X21, [X31 - 0x20]!
	0x033ECEBC STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move W3, W31
	003 Move X1, W1
	004 Move X2, W2
	005 Call Timer.Change, X0, X1, X2, X3
	006 Move W0, 1
	007 Move X30, [X31+16]
	008 Return X0

Method: System.Boolean Change(System.TimeSpan dueTime, System.TimeSpan period)

Disassembly:
	0x033ECEC0 ADRP X21, 0xFF1000
	0x033ECEC4 ADRP X20, 0xD07000
	0x033ECEC8 LDRB W8, [X21 + 0x428]
	0x033ECECC LDR X20, [X20 + 0x7D0]
	0x033ECED0 MOV X19, X0
	0x033ECED4 TBNZ X8, 0x0, 0x33ECEF8
	0x033ECED8 ADRP X0, 0xD07000
	0x033ECEDC LDR X0, [X0 + 0x7D0]
	0x033ECEE0 BL 0x1C16CF4
	0x033ECEE4 ADRP X0, 0xD41000
	0x033ECEE8 LDR X0, [X0 + 0x618]
	0x033ECEEC BL 0x1C16CF4
	0x033ECEF0 MOVZ W8, 0x1
	0x033ECEF4 STRB W8, [X21 + 0x428]
	0x033ECEF8 LDR X0, [X20]
	0x033ECEFC ADRP X20, 0xD41000
	0x033ECF00 LDR W8, [X0 + 0xE0]
	0x033ECF04 LDR X20, [X20 + 0x618]
	0x033ECF08 CBNZ W8, 0x33ECF10
	0x033ECF0C BL 0x1C16DFC
	0x033ECF10 LDR X1, [X20]
	0x033ECF14 MOV X0, X19
	0x033ECF18 LDP X20, X19, [X31 + 0x10]
	0x033ECF1C MOV X2, X31
	0x033ECF20 LDP X30, X21, [X31], #0x20
	0x033ECF24 B 0x33B2C70
	0x033ECF28 STR X30, [X31 - 0x30]!
	0x033ECF2C STP X22, X21, [X31 + 0x10]
	0x033ECF30 STP X20, X19, [X31 + 0x20]
	0x033ECF34 ADRP X22, 0xFF1000
	0x033ECF38 ADRP X21, 0xD07000
	0x033ECF3C LDRB W8, [X22 + 0x429]
	0x033ECF40 LDR X21, [X21 + 0x7D0]
	0x033ECF44 MOV X19, X1
	0x033ECF48 MOV X20, X0
	0x033ECF4C TBNZ X8, 0x0, 0x33ECF70
	0x033ECF50 ADRP X0, 0xD07000
	0x033ECF54 LDR X0, [X0 + 0x7D0]
	0x033ECF58 BL 0x1C16CF4
	0x033ECF5C ADRP X0, 0xD41000
	0x033ECF60 LDR X0, [X0 + 0x618]
	0x033ECF64 BL 0x1C16CF4
	0x033ECF68 MOVZ W8, 0x1
	0x033ECF6C STRB W8, [X22 + 0x429]
	0x033ECF70 LDR X0, [X21]
	0x033ECF74 ADRP X21, 0xD41000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], D8
	003 Move [X31+32], X30
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X20, 0xFF2000
	008 Move [X31+24], X1
	009 Move [X31+8], X2
	010 Move X21, 0xD0A000
	011 Move W8, [X20+1050]
	012 Move X21, [X21+1392]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xD0A000
	019 Move X0, [X0+1392]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1050], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Add X0, X31, 24
	029 Move X1, X31
	030 Call TimeSpan.get_TotalMilliseconds, X0
	031 Add X0, X31, 8
	032 Move X1, X31
	033 Move V8, V0
	034 Call TimeSpan.get_TotalMilliseconds, X0
	035 Move X9, 0x7FF00000
	036 Move D1, X9
	037 NotImplemented "Instruction FCVTZS not yet implemented."
	038 Move X10, 0x80000000
	039 NotImplemented "Instruction FCMP not yet implemented."
	040 NotImplemented "Instruction FCVTZS not yet implemented."
	041 NotImplemented "Instruction CSEL not yet implemented."
	042 NotImplemented "Instruction FCMP not yet implemented."
	043 NotImplemented "Instruction CSEL not yet implemented."
	044 Move X0, X19
	045 Move W3, W31
	046 Call Timer.Change, X0, X1, X2, X3
	047 Move X20, [X31+48]
	048 Move X19, [X31+56]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Move V8, [X31+16]
	052 Move W0, 1
	053 Add X31, X31, 64
	054 Return X0

Method: System.Void Dispose()

Disassembly:
	0x033ECF78 LDR W8, [X0 + 0xE0]
	0x033ECF7C LDR X21, [X21 + 0x618]
	0x033ECF80 CBNZ W8, 0x33ECF88
	0x033ECF84 BL 0x1C16DFC
	0x033ECF88 LDR X1, [X21]
	0x033ECF8C MOV X0, X20
	0x033ECF90 MOV X2, X19
	0x033ECF94 LDP X20, X19, [X31 + 0x20]
	0x033ECF98 LDP X22, X21, [X31 + 0x10]
	0x033ECF9C MOV X3, X31
	0x033ECFA0 LDR X30, [X31], #0x30
	0x033ECFA4 B 0x33B2CA0
	0x033ECFA8 STR X30, [X31 - 0x40]!
	0x033ECFAC STP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+64]
	004 Compare W8, 0
	005 JumpIfEqual {9}
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return 
	009 Move W8, 1
	010 Move X19, X0
	011 Move [X0+64], W8
	012 Call Timer.get_scheduler
	013 Compare X0, 0
	014 JumpIfEqual {18}
	015 Move X1, X19
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Call 0x1C17F20

Method: System.Boolean Change(System.Int64 dueTime, System.Int64 period, System.Boolean first)

Disassembly:
	0x033ECCD8 ADD X8, X8, 0xFF4
	0x033ECCDC STR X8, [X19 + 0x18]
	0x033ECCE0 ADRP X8, 0xFFFFFFFFFE7D0000
	0x033ECCE4 ADD X8, X8, 0xF7C
	0x033ECCE8 STR X8, [X19 + 0x38]
	0x033ECCEC LDP X20, X19, [X31 + 0x20]
	0x033ECCF0 LDP X22, X21, [X31 + 0x10]
	0x033ECCF4 LDR X30, [X31], #0x30
	0x033ECCF8 RET
	0x033ECCFC ADRP X1, 0xFFFFFFFFFD72F000
	0x033ECD00 ADD X1, X1, 0xEE3
	0x033ECD04 MOV X0, X31
	0x033ECD08 BL 0x1C16F3C
	0x033ECD0C MOV X1, X31
	0x033ECD10 BL 0x1C16DEC
	0x033ECD14 LDR X8, [X0 + 0x40]
	0x033ECD18 LDR X3, [X0 + 0x18]
	0x033ECD1C LDR X2, [X0 + 0x28]
	0x033ECD20 MOV X0, X8
	0x033ECD24 BR X3
	0x033ECD28 STP X30, X19, [X31 - 0x10]!
	0x033ECD2C LDRB W19, [X0]
	0x033ECD30 BL 0x1C16D44
	0x033ECD34 MOV W0, W19
	0x033ECD38 LDP X30, X19, [X31], #0x10
	0x033ECD3C RET
	0x033ECD40 STR X30, [X31 - 0x20]!
	0x033ECD44 STP X20, X19, [X31 + 0x10]
	0x033ECD48 MOV X19, X0
	0x033ECD4C AND W20, W1, 0x1
	0x033ECD50 BL 0x1C16D44
	0x033ECD54 STRB W20, [X19]
	0x033ECD58 LDP X20, X19, [X31 + 0x10]
	0x033ECD5C LDR X30, [X31], #0x20
	0x033ECD60 RET
	0x033ECD64 STP X30, X19, [X31 - 0x10]!
	0x033ECD68 LDR W19, [X0]
	0x033ECD6C BL 0x1C16D44
	0x033ECD70 MOV W0, W19
	0x033ECD74 LDP X30, X19, [X31], #0x10
	0x033ECD78 RET
	0x033ECD7C STR X30, [X31 - 0x20]!
	0x033ECD80 STP X20, X19, [X31 + 0x10]
	0x033ECD84 MOV W19, W1
	0x033ECD88 MOV X20, X0
	0x033ECD8C BL 0x1C16D44
	0x033ECD90 STR W19, [X20]
	0x033ECD94 LDP X20, X19, [X31 + 0x10]
	0x033ECD98 LDR X30, [X31], #0x20
	0x033ECD9C RET
	0x033ECDA0 STP X30, X19, [X31 - 0x10]!
	0x033ECDA4 LDR X19, [X0]
	0x033ECDA8 BL 0x1C16D44
	0x033ECDAC MOV X0, X19
	0x033ECDB0 LDP X30, X19, [X31], #0x10
	0x033ECDB4 RET
	0x033ECDB8 STP X30, X21, [X31 - 0x20]!
	0x033ECDBC STP X20, X19, [X31 + 0x10]
	0x033ECDC0 ADRP X20, 0xFF1000
	0x033ECDC4 ADRP X21, 0xD41000
	0x033ECDC8 LDRB W8, [X20 + 0x426]
	0x033ECDCC LDR X21, [X21 + 0x610]
	0x033ECDD0 MOV X19, X0
	0x033ECDD4 TBNZ X8, 0x0, 0x33ECDEC
	0x033ECDD8 ADRP X0, 0xD41000
	0x033ECDDC LDR X0, [X0 + 0x610]
	0x033ECDE0 BL 0x1C16CF4
	0x033ECDE4 MOVZ W8, 0x1
	0x033ECDE8 STRB W8, [X20 + 0x426]
	0x033ECDEC LDR X1, [X21]
	0x033ECDF0 MOV X0, X19
	0x033ECDF4 LDP X20, X19, [X31 + 0x10]
	0x033ECDF8 MOV X2, X31
	0x033ECDFC LDP X30, X21, [X31], #0x20
	0x033ECE00 B 0x338C950
	0x033ECE04 MOV X3, X31
	0x033ECE08 B 0x338C970
	0x033ECE0C STR X30, [X31 - 0x30]!
	0x033ECE10 STP X22, X21, [X31 + 0x10]
	0x033ECE14 STP X20, X19, [X31 + 0x20]
	0x033ECE18 ADRP X21, 0xFF1000
	0x033ECE1C ADRP X22, 0xD41000
	0x033ECE20 LDRB W8, [X21 + 0x427]
	0x033ECE24 LDR X22, [X22 + 0x610]
	0x033ECE28 MOV X19, X1
	0x033ECE2C MOV X20, X0
	0x033ECE30 TBNZ X8, 0x0, 0x33ECE48
	0x033ECE34 ADRP X0, 0xD41000
	0x033ECE38 LDR X0, [X0 + 0x610]
	0x033ECE3C BL 0x1C16CF4
	0x033ECE40 MOVZ W8, 0x1
	0x033ECE44 STRB W8, [X21 + 0x427]
	0x033ECE48 LDR X21, [X22]
	0x033ECE4C CBZ X19, 0x33ECE64
	0x033ECE50 LDR X22, [X19 + 0x48]
	0x033ECE54 BL 0x1C16D44
	0x033ECE58 CBZ X22, 0x33ECE64
	0x033ECE5C LDR X2, [X22 + 0x28]
	0x033ECE60 B 0x33ECE68
	0x033ECE64 MOV X2, X31
	0x033ECE68 MOV X0, X20
	0x033ECE6C MOV X1, X21
	0x033ECE70 MOV X3, X31
	0x033ECE74 BL 0x338CA10
	0x033ECE78 STR X19, [X20 + 0x98]
	0x033ECE7C LDP X20, X19, [X31 + 0x20]
	0x033ECE80 LDP X22, X21, [X31 + 0x10]
	0x033ECE84 LDR X30, [X31], #0x30
	0x033ECE88 RET
	0x033ECE8C STP X30, X19, [X31 - 0x10]!
	0x033ECE90 LDR X19, [X0 + 0x48]
	0x033ECE94 BL 0x1C16D44
	0x033ECE98 CBZ X19, 0x33ECEA4
	0x033ECE9C LDR X0, [X19 + 0x28]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move TEMP, 0
	005 Not TEMP
	006 Move W8, TEMP
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move TEMP, 0
	009 Not TEMP
	010 Move W8, TEMP
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move X20, X1
	013 Add X31, X1, 2
	014 Add X31, X2, 2
	015 Move W8, [X0+64]
	016 Move X19, X0
	017 Compare W8, 0
	018 JumpIfNotEqual {102}
	019 Move [X19+40], X20
	020 Move [X19+48], X2
	021 Compare X20, 0
	022 JumpIfEqual {38}
	023 Move TEMP, X20
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {30}
	027 Call 0x1C4D53C
	028 Move W8, 0x2710
	029 NotImplemented "Instruction MADD not yet implemented."
	030 Move TEMP, 0x80000000
	031 Not TEMP
	032 Move X20, TEMP
	033 Move TEMP, X3
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {38}
	037 Move [X19+56], X20
	038 Call Timer.get_scheduler
	039 Compare X0, 0
	040 JumpIfEqual {123}
	041 Move X1, X19
	042 Move X2, X20
	043 Call Scheduler.Change, X0, X1, X2
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move W0, 1
	047 Move X30, [X31+32]
	048 Return X0
	049 Move X0, 0xD10000
	050 Move X0, [X0+1888]
	051 Call 0x1C17D08
	052 Call 0x1C17F10
	053 Move X19, X0
	054 Move X0, 0xD42000
	055 Move X0, [X0+1416]
	056 Call 0x1C17D08
	057 Move X20, X0
	058 Move X0, 0xD42000
	059 Move X0, [X0+1424]
	060 Move X0, 0xD10000
	061 Move X0, [X0+1888]
	062 Call 0x1C17D08
	063 Call 0x1C17F10
	064 Move X19, X0
	065 Move X0, 0xD42000
	066 Move X0, [X0+1432]
	067 Call 0x1C17D08
	068 Move X20, X0
	069 Move X0, 0xD42000
	070 Move X0, [X0+1440]
	071 Call 0x1C17D08
	072 Move X2, X0
	073 Move X0, X19
	074 Move X1, X20
	075 Move X3, X31
	076 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	077 Move X0, 0xD10000
	078 Move X0, [X0+1888]
	079 Call 0x1C17D08
	080 Call 0x1C17F10
	081 Move X19, X0
	082 Move X0, 0xD42000
	083 Move X0, [X0+1416]
	084 Move X0, 0xD10000
	085 Move X0, [X0+1888]
	086 Call 0x1C17D08
	087 Call 0x1C17F10
	088 Move X19, X0
	089 Move X0, 0xD42000
	090 Move X0, [X0+1432]
	091 Call 0x1C17D08
	092 Move X1, X0
	093 Move X0, X19
	094 Move X2, X31
	095 Call ArgumentOutOfRangeException..ctor, X0, X1
	096 Move X0, 0xD42000
	097 Move X0, [X0+1448]
	098 Call 0x1C17D08
	099 Move X1, X0
	100 Move X0, X19
	101 Call 0x1C17DEC
	102 Move X0, 0xD40000
	103 Move X0, [X0+368]
	104 Call 0x1C17D08
	105 Move X1, X31
	106 Call Environment.GetResourceString, X0
	107 Move X19, X0
	108 Move X0, 0xD31000
	109 Move X0, [X0+1208]
	110 Call 0x1C17D08
	111 Call 0x1C17F10
	112 Move X1, X31
	113 Move X2, X19
	114 Move X3, X31
	115 Move X20, X0
	116 Call ObjectDisposedException..ctor, X0, X1, X2
	117 Move X0, 0xD42000
	118 Move X0, [X0+1448]
	119 Call 0x1C17D08
	120 Move X1, X0
	121 Move X0, X20
	122 Call 0x1C17DEC
	123 Call 0x1C17F20

Method: System.Void KeepRootedWhileScheduled()

Disassembly:
	0x033ED20C BL 0x1C16CF4

ISIL:
	001 Return 

Method: System.Int64 GetTimeMonotonic()

Disassembly:
	0x033ED07C BL 0x1C16F10

ISIL:
	001 Call 0x1C4D53C
	002 Return X0

