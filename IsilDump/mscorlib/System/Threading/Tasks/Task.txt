Type: System.Threading.Tasks.Task

Method: System.Void .ctor(System.Boolean canceled, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.CancellationToken ct)

Disassembly:
	0x033EFB10 LDR X20, [X20 + 0x7B8]
	0x033EFB14 LDR X0, [X20]
	0x033EFB18 LDR W8, [X0 + 0xE0]
	0x033EFB1C CBNZ W8, 0x33EFB28
	0x033EFB20 BL 0x1C16DFC
	0x033EFB24 LDR X0, [X20]
	0x033EFB28 LDR X8, [X0 + 0xB8]
	0x033EFB2C LDRB W8, [X8 + 0x10]
	0x033EFB30 CBZ W8, 0x33EFB4C
	0x033EFB34 LDR X0, [X22]
	0x033EFB38 LDR W8, [X0 + 0xE0]
	0x033EFB3C CBNZ W8, 0x33EFB44
	0x033EFB40 BL 0x1C16DFC
	0x033EFB44 MOV X0, X19
	0x033EFB48 BL 0x33EE8F8
	0x033EFB4C MOV X0, X19
	0x033EFB50 LDP X20, X19, [X31 + 0x20]
	0x033EFB54 LDP X22, X21, [X31 + 0x10]
	0x033EFB58 LDR X30, [X31], #0x30
	0x033EFB5C B 0x33F1C00
	0x033EFB60 MOV W2, W31
	0x033EFB64 B 0x33F0D74
	0x033EFB68 STR X30, [X31 - 0x30]!
	0x033EFB6C STP X22, X21, [X31 + 0x10]
	0x033EFB70 STP X20, X19, [X31 + 0x20]
	0x033EFB74 ADRP X21, 0xFEE000
	0x033EFB78 LDRB W8, [X21 + 0x45C]
	0x033EFB7C MOV W20, W1
	0x033EFB80 MOV X19, X0
	0x033EFB84 TBNZ X8, 0x0, 0x33EFBA8
	0x033EFB88 ADRP X0, 0xD3E000
	0x033EFB8C LDR X0, [X0 + 0x710]
	0x033EFB90 BL 0x1C16CF4
	0x033EFB94 ADRP X0, 0xD05000
	0x033EFB98 LDR X0, [X0 + 0x7B8]
	0x033EFB9C BL 0x1C16CF4
	0x033EFBA0 MOVZ W8, 0x1
	0x033EFBA4 STRB W8, [X21 + 0x45C]
	0x033EFBA8 TBZ X20, 0x0, 0x33EFBF0
	0x033EFBAC LDR X21, [X19 + 0x48]
	0x033EFBB0 BL 0x1C16D44
	0x033EFBB4 CBZ X21, 0x33EFBF0
	0x033EFBB8 MOV X20, X21
	0x033EFBBC LDR W22, [X20 + 0x3C]!
	0x033EFBC0 BL 0x1C16D44
	0x033EFBC4 CMP W22, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xFEF000
	008 Move W8, [X23+1088]
	009 Move X19, X3
	010 Move W21, W2
	011 Move W22, W1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xD3F000
	018 Move X0, [X0+1680]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+1088], W8
	022 Move X0, X20
	023 Move X1, X31
	024 Call Object..ctor, X0
	025 Call 0x1C17D44
	026 Move TEMP, X22
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {49}
	030 Move X8, 0xD3F000
	031 Move X8, [X8+1680]
	032 Move W9, 0x500000
	033 Or W9, W21, W9
	034 Move [X20+56], W9
	035 Move X0, [X8]
	036 Call 0x1C17F10
	037 Move X21, X0
	038 Call 0x1C17D44
	039 Move W22, 1
	040 Move X0, X21
	041 Move X1, X31
	042 Move [X21+60], W22
	043 Call Object..ctor, X0
	044 Call 0x1C17D44
	045 Move [X20+72], X21
	046 Move [X21+40], X19
	047 Call 0x1C17D44
	048 Move [X21+56], W22
	049 Or W8, W21, 0x1000000
	050 Move [X20+56], W8
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move X30, [X31+48]
	056 Move X23, [X31+56]
	057 Return 

Method: System.Void .ctor()

Disassembly:
	0x033EFBEC B 0x33EFC04
	0x033EFBF0 MOV X0, X19
	0x033EFBF4 BL 0x33F1408
	0x033EFBF8 B 0x33EFC78
	0x033EFBFC MOV X0, X19
	0x033EFC00 BL 0x33F1408
	0x033EFC04 LDR X19, [X21 + 0x40]
	0x033EFC08 BL 0x1C16D44
	0x033EFC0C CBZ X19, 0x33EFC78
	0x033EFC10 STRB W31, [X31 + 0xC]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call Object..ctor, X0
	006 Call 0x1C17D44
	007 Move W8, 1024
	008 NotImplemented "Instruction MOVK not yet implemented."
	009 Move [X19+56], W8
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 

Method: System.Void .ctor(System.Object state, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Boolean promiseStyle)

Disassembly:
	0x033EFC14 ADD X1, X31, 0xC
	0x033EFC18 MOV X0, X19
	0x033EFC1C MOV X2, X31
	0x033EFC20 BL 0x33DE64C
	0x033EFC24 ADRP X20, 0xD05000
	0x033EFC28 LDR X20, [X20 + 0x7B8]
	0x033EFC2C LDR X0, [X20]
	0x033EFC30 LDR W8, [X0 + 0xE0]
	0x033EFC34 CBNZ W8, 0x33EFC40
	0x033EFC38 BL 0x1C16DFC
	0x033EFC3C LDR X0, [X20]
	0x033EFC40 LDR X8, [X0 + 0xB8]
	0x033EFC44 ADRP X9, 0xD3E000
	0x033EFC48 LDR X9, [X9 + 0x710]
	0x033EFC4C LDR X1, [X8 + 0x38]
	0x033EFC50 LDR X2, [X9]
	0x033EFC54 MOV X0, X19
	0x033EFC58 BL 0x319BF80
	0x033EFC5C MOV X20, X31
	0x033EFC60 LDRB W8, [X31 + 0xC]
	0x033EFC64 CBZ W8, 0x33EFC74
	0x033EFC68 MOV X0, X19
	0x033EFC6C MOV X1, X31
	0x033EFC70 BL 0x33E14E4
	0x033EFC74 CBNZ X20, 0x33EFC88
	0x033EFC78 LDP X20, X19, [X31 + 0x20]
	0x033EFC7C LDP X22, X21, [X31 + 0x10]
	0x033EFC80 LDR X30, [X31], #0x30
	0x033EFC84 RET
	0x033EFC88 MOV X0, X20
	0x033EFC8C BL 0x1C16F18
	0x033EFC90 B 0x33EFC98
	0x033EFC94 B 0x33EFC98
	0x033EFC98 MOV X21, X0
	0x033EFC9C CMP W1, 0x1
	0x033EFCA0 B.NE 0x33EFCB8
	0x033EFCA4 MOV X0, X21
	0x033EFCA8 BL 0x3EB1AD0
	0x033EFCAC LDR X20, [X0]
	0x033EFCB0 BL 0x3EB1AE0
	0x033EFCB4 B 0x33EFC60
	0x033EFCB8 MOV X20, X31
	0x033EFCBC B 0x33EFCC4
	0x033EFCC0 MOV X21, X0
	0x033EFCC4 LDRB W8, [X31 + 0xC]
	0x033EFCC8 CBZ W8, 0x33EFCD8
	0x033EFCCC MOV X0, X19
	0x033EFCD0 MOV X1, X31
	0x033EFCD4 BL 0x33E14E4
	0x033EFCD8 CBNZ X20, 0x33EFCE4
	0x033EFCDC MOV X0, X21
	0x033EFCE0 BL 0x1D2C690
	0x033EFCE4 MOV X0, X20
	0x033EFCE8 BL 0x1C16F18
	0x033EFCEC BL 0x1990590
	0x033EFCF0 AND W0, W0, 0xFFFF
	0x033EFCF4 RET
	0x033EFCF8 SUB X31, X31, 0x50
	0x033EFCFC STP X30, X25, [X31 + 0x10]
	0x033EFD00 STP X24, X23, [X31 + 0x20]
	0x033EFD04 STP X22, X21, [X31 + 0x30]
	0x033EFD08 STP X20, X19, [X31 + 0x40]
	0x033EFD0C ADRP X23, 0xFEE000
	0x033EFD10 LDRB W8, [X23 + 0x447]
	0x033EFD14 MOV X19, X3
	0x033EFD18 MOV W20, W2
	0x033EFD1C MOV W21, W1
	0x033EFD20 MOV X22, X0
	0x033EFD24 TBNZ X8, 0x0, 0x33EFD3C
	0x033EFD28 ADRP X0, 0xD10000
	0x033EFD2C LDR X0, [X0 + 0x470]
	0x033EFD30 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xFEF000
	008 Move W8, [X22+1089]
	009 Move W19, W2
	010 Move X20, X1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD06000
	017 Move X0, [X0+1976]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1089], W8
	021 Move X0, X21
	022 Move X1, X31
	023 Call Object..ctor, X0
	024 Move TEMP, 68
	025 Not TEMP
	026 Move W8, TEMP
	027 And W31, W19, W8
	028 Move TEMP, X19
	029 And TEMP, TEMP, 4
	030 Compare TEMP, 4
	031 JumpIfNotEqual {57}
	032 Move X22, 0xD06000
	033 Move X22, [X22+1976]
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X23, 0xFEB000
	040 Move W8, [X23+2190]
	041 Compare W8, 0
	042 JumpIfNotEqual {48}
	043 Move X0, 0xD06000
	044 Move X0, [X0+1976]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X23+2190], W8
	048 Move X0, [X22]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {54}
	052 Call 0x1C17DFC
	053 Move X0, [X22]
	054 Call 0x1C17D0C
	055 Move X8, [X0]
	056 Move [X21+48], X8
	057 Move X0, X21
	058 Move X2, X20
	059 Move W4, W19
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X22, [X31+16]
	063 Move X21, [X31+24]
	064 Move W5, 1024
	065 Move X1, X31
	066 Move X3, X31
	067 Move X6, X31
	068 Move X30, [X31+48]
	069 Move X23, [X31+56]
	070 Move X0, 0xD0D000
	071 Move X0, [X0+1888]
	072 Call 0x1C17D08
	073 Call 0x1C17F10
	074 Move X19, X0
	075 Move X0, 0xD3F000
	076 Move X0, [X0+1688]
	077 Call 0x1C17D08
	078 Move X1, X0
	079 Move X0, X19
	080 Move X2, X31
	081 Call ArgumentOutOfRangeException..ctor, X0, X1
	082 Move X0, 0xD3F000
	083 Move X0, [X0+1696]
	084 Call 0x1C17D08
	085 Move X1, X0
	086 Move X0, X19
	087 Call 0x1C17DEC

Method: System.Void .ctor(System.Delegate action, System.Object state, System.Threading.Tasks.Task parent, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler)

Disassembly:
	0x033EFEAC LDR W20, [X0 + 0x38]
	0x033EFEB0 MOV X19, X0
	0x033EFEB4 BL 0x1C16D44
	0x033EFEB8 TBZ X20, 0x1C, 0x33EFEE4
	0x033EFEBC LDR X8, [X19]
	0x033EFEC0 MOV X0, X19
	0x033EFEC4 LDP X9, X1, [X8 + 0x1E8]
	0x033EFEC8 BLR X9
	0x033EFECC TBZ X0, 0x0, 0x33EFEE4
	0x033EFED0 MOV X0, X19
	0x033EFED4 MOV X1, X31
	0x033EFED8 BL 0x33EFF0C
	0x033EFEDC MOVZ W0, 0x1
	0x033EFEE0 B 0x33EFEE8
	0x033EFEE4 MOV W0, W31
	0x033EFEE8 LDP X20, X19, [X31 + 0x10]
	0x033EFEEC LDR X30, [X31], #0x20
	0x033EFEF0 RET
	0x033EFEF4 STP X30, X19, [X31 - 0x10]!
	0x033EFEF8 LDR W19, [X0 + 0x38]
	0x033EFEFC BL 0x1C16D44
	0x033EFF00 UBFM W0, W19, 0x1C, 0x1C
	0x033EFF04 LDP X30, X19, [X31], #0x10
	0x033EFF08 RET
	0x033EFF0C SUB X31, X31, 0x20
	0x033EFF10 STR X30, [X31 + 0x10]
	0x033EFF14 STR X0, [X31 + 0x18]
	0x033EFF18 STR X1, [X31 + 0x8]
	0x033EFF1C LDR X0, [X31 + 0x18]
	0x033EFF20 AND W1, W31, 0x1
	0x033EFF24 BL 0x33EFDD0
	0x033EFF28 LDR X30, [X31 + 0x10]
	0x033EFF2C ADD X31, X31, 0x20
	0x033EFF30 RET
	0x033EFF34 STR X30, [X31 - 0x40]!
	0x033EFF38 STP X24, X23, [X31 + 0x10]
	0x033EFF3C STP X22, X21, [X31 + 0x20]
	0x033EFF40 STP X20, X19, [X31 + 0x30]
	0x033EFF44 CBZ X0, 0x33EFFCC
	0x033EFF48 LDR X8, [X0 + 0x18]
	0x033EFF4C MOV X19, X0
	0x033EFF50 CMP W8, 0x0
	0x033EFF54 CSET W21, GT
	0x033EFF58 CMP W8, 0x1
	0x033EFF5C B.LT 0x33EFFB0
	0x033EFF60 MOV X22, X31
	0x033EFF64 AND X8, X8, 0x0
	0x033EFF68 ADD X23, X19, 0x20
	0x033EFF6C CMP X22, W8, UXTW

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X24, X1
	011 Move X1, X31
	012 Move X19, X7
	013 Move W20, W6
	014 Move W21, W5
	015 Move X22, X4
	016 Move X25, X3
	017 Move X23, X2
	018 Move X26, X0
	019 Call Object..ctor, X0
	020 Compare X24, 0
	021 JumpIfEqual {45}
	022 Move TEMP, X21
	023 And TEMP, TEMP, 4
	024 Compare TEMP, 4
	025 JumpIfNotEqual {27}
	026 Move [X26+48], X25
	027 Move X0, X26
	028 Move X1, X24
	029 Move X2, X23
	030 Move X3, X22
	031 Move W4, W21
	032 Move W5, W20
	033 Move X6, X19
	034 Move X20, [X31+64]
	035 Move X19, [X31+72]
	036 Move X22, [X31+48]
	037 Move X21, [X31+56]
	038 Move X24, [X31+32]
	039 Move X23, [X31+40]
	040 Move X26, [X31+16]
	041 Move X25, [X31+24]
	042 Move X30, [X31+80]
	043 Call Task.TaskConstructorCore, X0, X1, X2, X3, X4, X5, X6
	044 Return 
	045 Move X0, 0xD0A000
	046 Move X0, [X0+1320]
	047 Call 0x1C17D08
	048 Call 0x1C17F10
	049 Move X19, X0
	050 Move X0, 0xD2D000
	051 Move X0, [X0+3064]
	052 Call 0x1C17D08
	053 Move X1, X0
	054 Move X0, X19
	055 Move X2, X31
	056 Call ArgumentNullException..ctor, X0, X1
	057 Move X0, 0xD3F000
	058 Move X0, [X0+1712]
	059 Call 0x1C17D08
	060 Move X1, X0
	061 Move X0, X19
	062 Call 0x1C17DEC

Method: System.Void TaskConstructorCore(System.Delegate action, System.Object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler)

Disassembly:
	0x033EFD34 MOVZ W8, 0x1
	0x033EFD38 STRB W8, [X23 + 0x447]
	0x033EFD3C STR W31, [X31 + 0x8]
	0x033EFD40 LDR W24, [X22 + 0x38]!
	0x033EFD44 BL 0x1C16D44
	0x033EFD48 MOV W23, W31
	0x033EFD4C ANDS W31, W24, W20, 0x0
	0x033EFD50 STR W24, [X19]
	0x033EFD54 B.NE 0x33EFDB4
	0x033EFD58 ADRP X24, 0xD10000
	0x033EFD5C LDR X24, [X24 + 0x470]
	0x033EFD60 BL 0x1C16D44
	0x033EFD64 LDR W2, [X19]
	0x033EFD68 MOV X0, X22
	0x033EFD6C ORR W1, W2, W21, 0x0
	0x033EFD70 BL 0x1C241D4
	0x033EFD74 LDR W8, [X19]
	0x033EFD78 CMP W0, W8
	0x033EFD7C CSET W23, EQ
	0x033EFD80 B.EQ 0x33EFDB4
	0x033EFD84 LDR X0, [X24]
	0x033EFD88 LDR W8, [X0 + 0xE0]
	0x033EFD8C CBNZ W8, 0x33EFD94
	0x033EFD90 BL 0x1C16DFC
	0x033EFD94 ADD X0, X31, 0x8
	0x033EFD98 MOV X1, X31
	0x033EFD9C BL 0x33DF18C
	0x033EFDA0 LDR W25, [X22]
	0x033EFDA4 BL 0x1C16D44
	0x033EFDA8 ANDS W31, W25, W20, 0x0
	0x033EFDAC STR W25, [X19]
	0x033EFDB0 B.EQ 0x33EFD60
	0x033EFDB4 MOV W0, W23
	0x033EFDB8 LDP X20, X19, [X31 + 0x40]
	0x033EFDBC LDP X22, X21, [X31 + 0x30]
	0x033EFDC0 LDP X24, X23, [X31 + 0x20]
	0x033EFDC4 LDP X30, X25, [X31 + 0x10]
	0x033EFDC8 ADD X31, X31, 0x50
	0x033EFDCC RET
	0x033EFDD0 STR X30, [X31 - 0x30]!
	0x033EFDD4 STP X22, X21, [X31 + 0x10]
	0x033EFDD8 STP X20, X19, [X31 + 0x20]
	0x033EFDDC ADRP X21, 0xFEE000
	0x033EFDE0 LDRB W8, [X21 + 0x448]
	0x033EFDE4 MOV W20, W1
	0x033EFDE8 MOV X19, X0
	0x033EFDEC TBNZ X8, 0x0, 0x33EFE04
	0x033EFDF0 ADRP X0, 0xD10000
	0x033EFDF4 LDR X0, [X0 + 0x470]
	0x033EFDF8 BL 0x1C16CF4
	0x033EFDFC MOVZ W8, 0x1
	0x033EFE00 STRB W8, [X21 + 0x448]
	0x033EFE04 TBZ X20, 0x0, 0x33EFE1C
	0x033EFE08 MOVZ W1, 0x10000000
	0x033EFE0C MOVZ W2, 0x5600000
	0x033EFE10 MOV X0, X19
	0x033EFE14 BL 0x33EF944
	0x033EFE18 B 0x33EFE94
	0x033EFE1C STR W31, [X31 + 0x8]
	0x033EFE20 LDR W20, [X19 + 0x38]!
	0x033EFE24 BL 0x1C16D44
	0x033EFE28 AND W21, W20, 0xEFFFFFFF
	0x033EFE2C BL 0x1C16D44
	0x033EFE30 MOV X0, X19
	0x033EFE34 MOV W1, W21
	0x033EFE38 MOV W2, W20
	0x033EFE3C BL 0x1C241D4
	0x033EFE40 CMP W0, W20
	0x033EFE44 B.EQ 0x33EFE94
	0x033EFE48 ADRP X22, 0xD10000
	0x033EFE4C LDR X22, [X22 + 0x470]
	0x033EFE50 LDR X0, [X22]
	0x033EFE54 LDR W8, [X0 + 0xE0]
	0x033EFE58 CBNZ W8, 0x33EFE60
	0x033EFE5C BL 0x1C16DFC
	0x033EFE60 ADD X0, X31, 0x8
	0x033EFE64 MOV X1, X31
	0x033EFE68 BL 0x33DF18C
	0x033EFE6C LDR W20, [X19]
	0x033EFE70 BL 0x1C16D44
	0x033EFE74 AND W21, W20, 0xEFFFFFFF
	0x033EFE78 BL 0x1C16D44
	0x033EFE7C MOV X0, X19
	0x033EFE80 MOV W1, W21
	0x033EFE84 MOV W2, W20
	0x033EFE88 BL 0x1C241D4
	0x033EFE8C CMP W0, W20
	0x033EFE90 B.NE 0x33EFE50
	0x033EFE94 LDP X20, X19, [X31 + 0x20]
	0x033EFE98 LDP X22, X21, [X31 + 0x10]
	0x033EFE9C LDR X30, [X31], #0x30
	0x033EFEA0 RET
	0x033EFEA4 STR X30, [X31 - 0x20]!
	0x033EFEA8 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0xFEF000
	011 Move W8, [X25+1090]
	012 Move X23, X6
	013 Move W21, W5
	014 Move W20, W4
	015 Move X24, X2
	016 Move X22, X1
	017 Move X19, X0
	018 Move [X31+8], X3
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {31}
	023 Move X0, 0xD0D000
	024 Move X0, [X0+2008]
	025 Call 0x1C17CF4
	026 Move X0, 0xD2D000
	027 Move X0, [X0+1408]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X25+1090], W8
	031 Move TEMP, 95
	032 Not TEMP
	033 Move W8, TEMP
	034 And W31, W20, W8
	035 Move [X19+24], X22
	036 Move [X19+32], X24
	037 Move [X19+40], X23
	038 Or W8, W21, W20
	039 And W31, W21, 512
	040 NotImplemented "Instruction CCMP not yet implemented."
	041 Or W9, W8, 0x2000000
	042 NotImplemented "Instruction CSEL not yet implemented."
	043 Call 0x1C17D44
	044 Move [X19+56], W21
	045 Move TEMP, X20
	046 And TEMP, TEMP, 4
	047 Compare TEMP, 4
	048 JumpIfNotEqual {61}
	049 Move X0, [X19+48]
	050 Compare X0, 0
	051 JumpIfEqual {61}
	052 Call Task.get_Options, X0
	053 Move TEMP, X0
	054 And TEMP, TEMP, 8
	055 Compare TEMP, 8
	056 JumpIfEqual {61}
	057 Move X0, [X19+48]
	058 Compare X0, 0
	059 JumpIfEqual {120}
	060 Call Task.AddNewChild, X0
	061 Move X8, 0xD0D000
	062 Move X8, [X8+2008]
	063 Move X0, [X8]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move X20, 0xD2D000
	069 Move X20, [X20+1408]
	070 Add X0, X31, 8
	071 Move X1, X31
	072 Call CancellationToken.get_CanBeCanceled, X0
	073 Move TEMP, X0
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {82}
	077 Move X1, [X31+8]
	078 Move X0, X19
	079 Move X2, X31
	080 Move X3, X31
	081 Call Task.AssignCancellationToken, X0, X1, X2, X3
	082 Move X0, [X20]
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {87}
	086 Call 0x1C17DFC
	087 Move X0, X31
	088 Call ExecutionContext.Capture
	089 Move X1, X0
	090 Move X0, X19
	091 Call Task.set_CapturedContext, X0, X1
	092 Move X20, [X31+64]
	093 Move X19, [X31+72]
	094 Move X22, [X31+48]
	095 Move X21, [X31+56]
	096 Move X24, [X31+32]
	097 Move X23, [X31+40]
	098 Move X30, [X31+16]
	099 Move X25, [X31+24]
	100 Add X31, X31, 80
	101 Return 
	102 Move X0, 0xD0D000
	103 Move X0, [X0+1888]
	104 Call 0x1C17D08
	105 Call 0x1C17F10
	106 Move X19, X0
	107 Move X0, 0xD3F000
	108 Move X0, [X0+1688]
	109 Call 0x1C17D08
	110 Move X1, X0
	111 Move X0, X19
	112 Move X2, X31
	113 Call ArgumentOutOfRangeException..ctor, X0, X1
	114 Move X0, 0xD3F000
	115 Move X0, [X0+1704]
	116 Call 0x1C17D08
	117 Move X1, X0
	118 Move X0, X19
	119 Call 0x1C17DEC
	120 Call 0x1C17F20

Method: System.Void AssignCancellationToken(System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.Task antecedent, System.Threading.Tasks.TaskContinuation continuation)

Disassembly:
	0x033EFFF8 STP X30, X19, [X31 - 0x10]!
	0x033EFFFC LDR W19, [X0 + 0x38]
	0x033F0000 BL 0x1C16D44
	0x033F0004 UBFM W0, W19, 0x1C, 0x1C
	0x033F0008 LDP X30, X19, [X31], #0x10
	0x033F000C RET
	0x033F0010 MOVZ W1, 0x10000
	0x033F0014 MOVZ W2, 0x410000
	0x033F0018 B 0x33EF944
	0x033F001C SUB X31, X31, 0x60
	0x033F0020 STR X30, [X31 + 0x10]
	0x033F0024 STP X26, X25, [X31 + 0x20]
	0x033F0028 STP X24, X23, [X31 + 0x30]
	0x033F002C STP X22, X21, [X31 + 0x40]
	0x033F0030 STP X20, X19, [X31 + 0x50]
	0x033F0034 ADRP X26, 0xFED000
	0x033F0038 LDRB W8, [X26 + 0x449]
	0x033F003C MOV W23, W6
	0x033F0040 MOV W20, W5
	0x033F0044 MOV X19, X4
	0x033F0048 MOV X21, X3
	0x033F004C MOV X22, X2
	0x033F0050 MOV X24, X1
	0x033F0054 MOV X25, X0
	0x033F0058 TBNZ X8, 0x0, 0x33F0070
	0x033F005C ADRP X0, 0xD04000
	0x033F0060 LDR X0, [X0 + 0x7B8]
	0x033F0064 BL 0x1C16CF4
	0x033F0068 MOVZ W8, 0x1
	0x033F006C STRB W8, [X26 + 0x449]
	0x033F0070 CBZ X19, 0x33F00D8
	0x033F0074 ADRP X8, 0xD04000
	0x033F0078 LDR X8, [X8 + 0x7B8]
	0x033F007C LDR X0, [X8]
	0x033F0080 BL 0x1C16F10
	0x033F0084 ORR W6, W23, 0x2000
	0x033F0088 MOV X1, X24
	0x033F008C MOV X2, X22
	0x033F0090 MOV X3, X25
	0x033F0094 MOV X4, X21
	0x033F0098 MOV W5, W20
	0x033F009C MOV X7, X19
	0x033F00A0 MOV X26, X0
	0x033F00A4 BL 0x33EEEAC
	0x033F00A8 CBZ X26, 0x33F0120
	0x033F00AC MOV X0, X26
	0x033F00B0 MOV W1, W31
	0x033F00B4 BL 0x33F0124
	0x033F00B8 MOV X0, X26
	0x033F00BC LDP X20, X19, [X31 + 0x50]
	0x033F00C0 LDP X22, X21, [X31 + 0x40]
	0x033F00C4 LDP X24, X23, [X31 + 0x30]
	0x033F00C8 LDP X26, X25, [X31 + 0x20]
	0x033F00CC LDR X30, [X31 + 0x10]
	0x033F00D0 ADD X31, X31, 0x60
	0x033F00D4 RET
	0x033F00D8 ADRP X0, 0xD08000
	0x033F00DC LDR X0, [X0 + 0x528]
	0x033F00E0 BL 0x1C16D08
	0x033F00E4 BL 0x1C16F10
	0x033F00E8 MOV X19, X0
	0x033F00EC ADRP X0, 0xD2B000
	0x033F00F0 LDR X0, [X0 + 0x758]
	0x033F00F4 BL 0x1C16D08
	0x033F00F8 MOV X1, X0
	0x033F00FC MOV X0, X19
	0x033F0100 MOV X2, X31
	0x033F0104 BL 0x330E100
	0x033F0108 ADRP X0, 0xD3D000
	0x033F010C LDR X0, [X0 + 0x718]
	0x033F0110 BL 0x1C16D08
	0x033F0114 MOV X1, X0
	0x033F0118 MOV X0, X19
	0x033F011C BL 0x1C16DEC
	0x033F0120 BL 0x1C16F20
	0x033F0124 STP X30, X21, [X31 - 0x20]!
	0x033F0128 STP X20, X19, [X31 + 0x10]
	0x033F012C ADRP X21, 0xFED000
	0x033F0130 LDRB W8, [X21 + 0x457]
	0x033F0134 MOV W20, W1
	0x033F0138 MOV X19, X0
	0x033F013C TBNZ X8, 0x0, 0x33F0160
	0x033F0140 ADRP X0, 0xD2B000
	0x033F0144 LDR X0, [X0 + 0x728]
	0x033F0148 BL 0x1C16CF4
	0x033F014C ADRP X0, 0xD3D000
	0x033F0150 LDR X0, [X0 + 0x720]
	0x033F0154 BL 0x1C16CF4
	0x033F0158 MOVZ W8, 0x1
	0x033F015C STRB W8, [X21 + 0x457]
	0x033F0160 TBZ X20, 0x0, 0x33F017C
	0x033F0164 MOVZ W1, 0x10000
	0x033F0168 MOVZ W2, 0x410000
	0x033F016C MOV X0, X19
	0x033F0170 BL 0x33EF944
	0x033F0174 TBNZ X0, 0x0, 0x33F0190
	0x033F0178 B 0x33F022C
	0x033F017C LDR W20, [X19 + 0x38]
	0x033F0180 BL 0x1C16D44
	0x033F0184 BL 0x1C16D44
	0x033F0188 ORR W8, W20, 0x10000
	0x033F018C STR W8, [X19 + 0x38]
	0x033F0190 ADRP X20, 0xD2B000
	0x033F0194 LDR X20, [X20 + 0x728]
	0x033F0198 LDR X0, [X20]
	0x033F019C LDR W8, [X0 + 0xE0]
	0x033F01A0 CBNZ W8, 0x33F01A8
	0x033F01A4 BL 0x1C16DFC
	0x033F01A8 ADRP X21, 0xFE9000
	0x033F01AC LDRB W8, [X21 + 0x828]
	0x033F01B0 CBNZ W8, 0x33F01D4
	0x033F01B4 ADRP X0, 0xD2B000
	0x033F01B8 LDR X0, [X0 + 0x728]
	0x033F01BC BL 0x1C16CF4
	0x033F01C0 ADRP X0, 0xD04000
	0x033F01C4 LDR X0, [X0 + 0x7B8]
	0x033F01C8 BL 0x1C16CF4
	0x033F01CC MOVZ W8, 0x1
	0x033F01D0 STRB W8, [X21 + 0x828]
	0x033F01D4 ADRP X21, 0xD04000
	0x033F01D8 LDR X21, [X21 + 0x7B8]
	0x033F01DC LDR X0, [X21]
	0x033F01E0 LDR W8, [X0 + 0xE0]
	0x033F01E4 CBNZ W8, 0x33F01F0
	0x033F01E8 BL 0x1C16DFC
	0x033F01EC LDR X0, [X21]
	0x033F01F0 LDR X8, [X0 + 0xB8]
	0x033F01F4 LDRB W8, [X8 + 0x10]
	0x033F01F8 CBZ W8, 0x33F0214
	0x033F01FC LDR X0, [X20]
	0x033F0200 LDR W8, [X0 + 0xE0]
	0x033F0204 CBNZ W8, 0x33F020C
	0x033F0208 BL 0x1C16DFC
	0x033F020C MOV X0, X19
	0x033F0210 BL 0x33EE67C
	0x033F0214 LDR X0, [X19 + 0x28]
	0x033F0218 CBZ X0, 0x33F0238
	0x033F021C LDR X8, [X0]
	0x033F0220 LDP X9, X2, [X8 + 0x178]
	0x033F0224 MOV X1, X19
	0x033F0228 BLR X9
	0x033F022C LDP X20, X19, [X31 + 0x10]
	0x033F0230 LDP X30, X21, [X31], #0x20
	0x033F0234 RET
	0x033F0238 BL 0x1C16F20
	0x033F023C CMP W1, 0x1
	0x033F0240 MOV X20, X0
	0x033F0244 B.NE 0x33F0324
	0x033F0248 MOV X0, X20
	0x033F024C BL 0x3EB1AD0
	0x033F0250 MOV X20, X0
	0x033F0254 ADRP X0, 0xD03000
	0x033F0258 LDR X0, [X0 + 0x7D0]
	0x033F025C BL 0x1C16D08
	0x033F0260 LDR X8, [X20]
	0x033F0264 LDR X1, [X8]
	0x033F0268 BL 0x1C17270
	0x033F026C TBZ X0, 0x0, 0x33F02D8
	0x033F0270 LDR X21, [X20]
	0x033F0274 BL 0x3EB1AE0
	0x033F0278 ADRP X0, 0xD3D000
	0x033F027C LDR X0, [X0 + 0x6D0]
	0x033F0280 BL 0x1C16D08
	0x033F0284 BL 0x1C16F10
	0x033F0288 MOV X1, X21
	0x033F028C MOV X20, X0
	0x033F0290 BL 0x33ECF28
	0x033F0294 MOV X0, X19
	0x033F0298 MOV X1, X20
	0x033F029C MOV W2, W31
	0x033F02A0 BL 0x33F0D74
	0x033F02A4 MOV X0, X19
	0x033F02A8 MOV W1, W31
	0x033F02AC BL 0x33EFB68
	0x033F02B0 MOV X0, X19
	0x033F02B4 BL 0x33EF398
	0x033F02B8 TBNZ X0, 0x9, 0x33F0304
	0x033F02BC LDR X19, [X19 + 0x48]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+64], X30
	003 Move [X31+72], X25
	004 Move [X31+80], X24
	005 Move [X31+88], X23
	006 Move [X31+96], X22
	007 Move [X31+104], X21
	008 Move [X31+112], X20
	009 Move [X31+120], X19
	010 Move X20, 0xFEE000
	011 Move W8, [X20+1091]
	012 Move X21, X3
	013 Move X22, X2
	014 Move X23, X1
	015 Move X19, X0
	016 Move [X31+56], X1
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {38}
	021 Move X0, 0xD3E000
	022 Move X0, [X0+32]
	023 Call 0x1C17CF4
	024 Move X0, 0xD0C000
	025 Move X0, [X0+2008]
	026 Call 0x1C17CF4
	027 Move X0, 0xD05000
	028 Move X0, [X0+1976]
	029 Call 0x1C17CF4
	030 Move X0, 0xD3E000
	031 Move X0, [X0+1720]
	032 Call 0x1C17CF4
	033 Move X0, 0xD3E000
	034 Move X0, [X0+1728]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X20+1091], W8
	038 Move X20, [X19+72]
	039 Call 0x1C17D44
	040 Compare X20, 0
	041 JumpIfNotEqual {48}
	042 Move X0, X19
	043 Move W1, W31
	044 Call Task.EnsureContingentPropertiesInitializedCore, X0, X1
	045 Move X20, X0
	046 Compare X0, 0
	047 JumpIfEqual {185}
	048 Move [X20+40], X23
	049 Move X0, X19
	050 Call Task.get_Options, X0
	051 Move W8, 0x3400
	052 And W31, W0, W8
	053 Move X25, 0xD0C000
	054 Move X25, [X25+2008]
	055 Move X0, [X25]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Add X0, X31, 56
	061 Move X1, X31
	062 Call CancellationToken.get_IsCancellationRequested, X0
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfNotEqual {70}
	067 Move X0, X19
	068 Move W1, W31
	069 Call Task.InternalCancel, X0, X1
	070 Move X23, 0xD05000
	071 Move X23, [X23+1976]
	072 Move X0, [X23]
	073 Move W8, [X0+224]
	074 Compare X22, 0
	075 JumpIfEqual {105}
	076 Compare W8, 0
	077 JumpIfNotEqual {80}
	078 Call 0x1C17DFC
	079 Move X0, [X23]
	080 Move X9, 0xD3E000
	081 Move X8, [X0+184]
	082 Move X9, [X9+1728]
	083 Move X23, [X8+24]
	084 Move X0, [X9]
	085 Call 0x1C17F10
	086 Move X8, 0xD3E000
	087 Move X8, [X8+1720]
	088 Move X24, X0
	089 Move X4, [X8]
	090 Move X1, X19
	091 Move X2, X22
	092 Move X3, X21
	093 Call Tuple`3<Object, Object, Object>..ctor, X0, X1, X2, X3
	094 Move X0, [X25]
	095 Move W8, [X0+224]
	096 Compare W8, 0
	097 JumpIfNotEqual {99}
	098 Call 0x1C17DFC
	099 Add X8, X31, 0
	100 Add X0, X31, 56
	101 Move X1, X23
	102 Move X2, X24
	103 Move X3, X31
	104 Call CancellationToken.InternalRegisterWithoutEC, X0, X1, X2
	105 Compare W8, 0
	106 JumpIfNotEqual {109}
	107 Call 0x1C17DFC
	108 Move X0, [X23]
	109 Move X8, [X25]
	110 Move X9, [X0+184]
	111 Move W10, [X8+224]
	112 Move X21, [X9+24]
	113 Compare W10, 0
	114 JumpIfNotEqual {117}
	115 Move X0, X8
	116 Call 0x1C17DFC
	117 Add X8, X31, 0
	118 Add X0, X31, 56
	119 Move X1, X21
	120 Move X2, X19
	121 Move X3, X31
	122 Call CancellationToken.InternalRegisterWithoutEC, X0, X1, X2
	123 Move V0, [X31]
	124 Move X8, [X31+16]
	125 Move X9, 0xD3E000
	126 Move [X31+2], V0
	127 Move [X31+48], X8
	128 Move V0, [X31+2]
	129 Move X9, [X9+32]
	130 Move [X31+16], X8
	131 Move [X31], V0
	132 Move X0, [X9]
	133 Add X1, X31, 0
	134 Call 0x1C17E04
	135 Move [X20+48], X0
	136 Move X20, [X31+112]
	137 Move X19, [X31+120]
	138 Move X22, [X31+96]
	139 Move X21, [X31+104]
	140 Move X24, [X31+80]
	141 Move X23, [X31+88]
	142 Move X30, [X31+64]
	143 Move X25, [X31+72]
	144 Add X31, X31, 128
	145 Return 
	146 Move X20, X0
	147 NotImplemented "Instruction CMP not yet implemented."
	148 Move X0, X20
	149 Call 0x3EB2AD0
	150 Move X20, X0
	151 Move X0, 0xD0A000
	152 Move X0, [X0+3264]
	153 Call 0x1C17D08
	154 Move X8, [X20]
	155 Move X1, [X8]
	156 Call 0x1C18270
	157 Move TEMP, X0
	158 And TEMP, TEMP, 1
	159 Compare TEMP, 1
	160 JumpIfNotEqual {174}
	161 Move X20, [X20]
	162 Call 0x3EB2AE0
	163 Move X8, [X19+48]
	164 Compare X8, 0
	165 JumpIfEqual {172}
	166 Move X0, X19
	167 Call Task.get_Options, X0
	168 Move TEMP, X0
	169 And TEMP, TEMP, 4
	170 Compare TEMP, 4
	171 JumpIfEqual {182}
	172 Move X0, X20
	173 Call 0x1C17F18
	174 Move W0, 8
	175 Call 0x3EB2AF0
	176 Move X8, [X20]
	177 Move [X0], X8
	178 Move X1, 0xAC5000
	179 Add X1, X1, 3672
	180 Move X2, X31
	181 Call 0x3EB2B00
	182 Move X0, [X19+48]
	183 Compare X0, 0
	184 JumpIfNotEqual {186}
	185 Call 0x1C17F20
	186 Call Task.get_Options, X0
	187 Move TEMP, X0
	188 And TEMP, TEMP, 8
	189 Compare TEMP, 8
	190 JumpIfEqual {172}
	191 Move X0, [X19+48]
	192 Compare X0, 0
	193 JumpIfEqual {185}
	194 Call Task.DisregardChild, X0
	195 Move X20, X0
	196 Call 0x3EB2AE0
	197 Move X0, X20
	198 Call 0x1D2D690
	199 Call 0x1991590

Method: System.Void TaskCancelCallback(System.Object o)

Disassembly:
	0x033F060C MOV X20, X0
	0x033F0610 MOV X0, X19
	0x033F0614 LDR X1, [X8 + 0x40]
	0x033F0618 BL 0x1C16E00
	0x033F061C CBZ X0, 0x33F0668
	0x033F0620 LDR W8, [X20 + 0x18]
	0x033F0624 CBZ W8, 0x33F0674
	0x033F0628 STR X19, [X20 + 0x20]
	0x033F062C ADRP X8, 0xD35000
	0x033F0630 LDR X8, [X8 + 0x8D0]
	0x033F0634 LDR X0, [X8]
	0x033F0638 BL 0x1C16F10
	0x033F063C MOV X1, X20
	0x033F0640 MOV X2, X31
	0x033F0644 MOV X19, X0
	0x033F0648 BL 0x331463C
	0x033F064C MOV X0, X19
	0x033F0650 B 0x33F0658
	0x033F0654 MOV X0, X31
	0x033F0658 LDP X20, X19, [X31 + 0x10]
	0x033F065C LDP X30, X21, [X31], #0x20
	0x033F0660 RET
	0x033F0664 BL 0x1C16F20
	0x033F0668 BL 0x1C16F44
	0x033F066C MOV X1, X31
	0x033F0670 BL 0x1C16DEC
	0x033F0674 BL 0x1C16F28
	0x033F0678 STP X30, X19, [X31 - 0x10]!
	0x033F067C LDR W19, [X0 + 0x38]
	0x033F0680 BL 0x1C16D44
	0x033F0684 TBNZ X19, 0x15, 0x33F06A4
	0x033F0688 TBNZ X19, 0x16, 0x33F06AC
	0x033F068C TBNZ X19, 0x18, 0x33F06B4
	0x033F0690 TBNZ X19, 0x17, 0x33F06BC
	0x033F0694 TBNZ X19, 0x11, 0x33F06C4
	0x033F0698 TBNZ X19, 0x10, 0x33F06CC
	0x033F069C UBFM W0, W19, 0x19, 0x19
	0x033F06A0 B 0x33F06D0
	0x033F06A4 MOVZ W0, 0x7
	0x033F06A8 B 0x33F06D0
	0x033F06AC MOVZ W0, 0x6
	0x033F06B0 B 0x33F06D0
	0x033F06B4 MOVZ W0, 0x5
	0x033F06B8 B 0x33F06D0
	0x033F06BC MOVZ W0, 0x4
	0x033F06C0 B 0x33F06D0
	0x033F06C4 MOVZ W0, 0x3
	0x033F06C8 B 0x33F06D0
	0x033F06CC MOVZ W0, 0x2
	0x033F06D0 LDP X30, X19, [X31], #0x10
	0x033F06D4 RET
	0x033F06D8 STP X30, X19, [X31 - 0x10]!
	0x033F06DC LDR W19, [X0 + 0x38]
	0x033F06E0 BL 0x1C16D44
	0x033F06E4 AND W8, W19, 0x600000
	0x033F06E8 CMP W8, 0x400000
	0x033F06EC CSET W0, EQ
	0x033F06F0 LDP X30, X19, [X31], #0x10
	0x033F06F4 RET
	0x033F06F8 STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xFEE000
	005 Move W8, [X20+1092]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {28}
	011 Move X0, 0xD05000
	012 Move X0, [X0+1976]
	013 Call 0x1C17CF4
	014 Move X0, 0xD3E000
	015 Move X0, [X0+1752]
	016 Call 0x1C17CF4
	017 Move X0, 0xD3E000
	018 Move X0, [X0+1760]
	019 Call 0x1C17CF4
	020 Move X0, 0xD3E000
	021 Move X0, [X0+1768]
	022 Call 0x1C17CF4
	023 Move X0, 0xD3E000
	024 Move X0, [X0+1728]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+1092], W8
	028 Compare X19, 0
	029 JumpIfEqual {65}
	030 Move X9, 0xD05000
	031 Move X9, [X9+1976]
	032 Move X8, [X19]
	033 Move X10, [X9]
	034 Move W9, [X8+304]
	035 Move W11, [X10+304]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X12, [X8+200]
	038 Add X11, X12, X11
	039 NotImplemented "Instruction LDUR not yet implemented."
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X10, 0xD3E000
	042 Move X10, [X10+1728]
	043 Move X10, [X10]
	044 Move W11, [X10+304]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X8, [X8+200]
	047 Add X8, X8, X11
	048 NotImplemented "Instruction LDUR not yet implemented."
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X0, [X19+24]
	051 Compare X0, 0
	052 JumpIfEqual {65}
	053 Move X1, [X19+32]
	054 Move X19, [X19+16]
	055 Call Task.RemoveContinuation, X0, X1
	056 Compare X19, 0
	057 JumpIfEqual {65}
	058 Move X0, X19
	059 Move X20, [X31+16]
	060 Move X19, [X31+24]
	061 Move W1, W31
	062 Move X30, [X31+32]
	063 Call Task.InternalCancel, X0, X1
	064 Return 
	065 Call 0x1C17F20

Method: System.Boolean TrySetCanceled(System.Threading.CancellationToken tokenToRecord)

Disassembly:
	0x033EF464 MOV W23, W31
	0x033EF468 MOV X21, X31

ISIL:
	001 Move X2, X31
	002 Call Task.TrySetCanceled, X0, X1, X2
	003 Return X0

Method: System.Boolean TrySetCanceled(System.Threading.CancellationToken tokenToRecord, System.Object cancellationException)

Disassembly:
	0x033EEA6C ADRP X21, 0xD0B000
	0x033EEA70 LDRB W8, [X22 + 0x43F]
	0x033EEA74 LDR X23, [X23 + 0x680]
	0x033EEA78 LDR X19, [X19 + 0x688]
	0x033EEA7C LDR X20, [X20 + 0x728]
	0x033EEA80 LDR X21, [X21 + 0xCC0]
	0x033EEA84 TBNZ X8, 0x0, 0x33EEAC0
	0x033EEA88 ADRP X0, 0xD2D000
	0x033EEA8C LDR X0, [X0 + 0x728]
	0x033EEA90 BL 0x1C16CF4
	0x033EEA94 ADRP X0, 0xD3F000
	0x033EEA98 LDR X0, [X0 + 0x688]
	0x033EEA9C BL 0x1C16CF4
	0x033EEAA0 ADRP X0, 0xD3F000
	0x033EEAA4 LDR X0, [X0 + 0x680]
	0x033EEAA8 BL 0x1C16CF4
	0x033EEAAC ADRP X0, 0xD0B000
	0x033EEAB0 LDR X0, [X0 + 0xCC0]
	0x033EEAB4 BL 0x1C16CF4
	0x033EEAB8 MOVZ W8, 0x1
	0x033EEABC STRB W8, [X22 + 0x43F]
	0x033EEAC0 LDR X0, [X23]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, X2
	007 Move X21, X1
	008 Move W1, 0x4000000
	009 Move W2, 0x5600000
	010 Move X19, X0
	011 Call Task.AtomicStateUpdate, X0, X1, X2
	012 Move W22, W0
	013 Move TEMP, X0
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfNotEqual {23}
	017 Move X0, X19
	018 Move X1, X21
	019 Move X2, X20
	020 Call Task.RecordInternalCancellationRequest, X0, X1, X2
	021 Move X0, X19
	022 Call Task.CancellationCleanupLogic, X0
	023 And W0, W22, 1
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Return X0

Method: System.Boolean TrySetException(System.Object exceptionObject)

Disassembly:
	0x033EF46C MOV W8, W31
	0x033EF470 BIC W9, W20, W23, 0x0
	0x033EF474 CMP W23, 0x0
	0x033EF478 AND W8, W9, W8, 0x0
	0x033EF47C CSET W23, NE
	0x033EF480 CBZ W8, 0x33EF4A0
	0x033EF484 MOVZ W1, 0x400000
	0x033EF488 MOVZ W2, 0x420000
	0x033EF48C MOV X0, X19
	0x033EF490 BL 0x33EF944
	0x033EF494 MOV W22, W0
	0x033EF498 TBZ X22, 0x0, 0x33EF4A8
	0x033EF49C B 0x33EF4B0
	0x033EF4A0 MOV W22, W31
	0x033EF4A4 TBNZ X22, 0x0, 0x33EF4B0
	0x033EF4A8 TBNZ X23, 0x0, 0x33EF4B0
	0x033EF4AC TBNZ X20, 0x0, 0x33EF500
	0x033EF4B0 MOV X0, X19
	0x033EF4B4 BL 0x33F3CE4
	0x033EF4B8 TBZ X23, 0x0, 0x33EF4D4
	0x033EF4BC MOVZ W1, 0x400000
	0x033EF4C0 MOVZ W2, 0x420000
	0x033EF4C4 MOV X0, X19
	0x033EF4C8 BL 0x33EF944
	0x033EF4CC TBNZ X0, 0x0, 0x33EF4D8
	0x033EF4D0 B 0x33EF500
	0x033EF4D4 TBZ X22, 0x0, 0x33EF4E8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, [X0+72]
	006 Move X19, X0
	007 Move X20, X1
	008 Call 0x1C17D44
	009 Compare X21, 0
	010 JumpIfNotEqual {14}
	011 Move W1, 1
	012 Move X0, X19
	013 Call Task.EnsureContingentPropertiesInitializedCore, X0, X1
	014 Move W1, 0x4000000
	015 Move W2, 0x5600000
	016 Move X0, X19
	017 Call Task.AtomicStateUpdate, X0, X1, X2
	018 Move W21, W0
	019 Move TEMP, X0
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {30}
	023 Move X0, X19
	024 Move X1, X20
	025 Move W2, W31
	026 Call Task.AddException, X0, X1, X2
	027 Move X0, X19
	028 Move W1, W31
	029 Call Task.Finish, X0, X1
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 And W0, W21, 1
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Return X0

Method: System.Threading.Tasks.TaskCreationOptions get_Options()

Disassembly:
	0x033F0398 MOV W19, W0
	0x033F039C TBZ X8, 0x0, 0x33F03AC
	0x033F03A0 TBNZ X19, 0x2, 0x33F03C4
	0x033F03A4 MOV X0, X31
	0x033F03A8 B 0x33F0418
	0x033F03AC ADRP X0, 0xD04000
	0x033F03B0 LDR X0, [X0 + 0x7B8]
	0x033F03B4 BL 0x1C16CF4
	0x033F03B8 MOVZ W8, 0x1
	0x033F03BC STRB W8, [X20 + 0x44C]
	0x033F03C0 TBZ X19, 0x2, 0x33F03A4
	0x033F03C4 ADRP X19, 0xD04000
	0x033F03C8 LDR X19, [X19 + 0x7B8]
	0x033F03CC LDR X0, [X19]
	0x033F03D0 LDR W8, [X0 + 0xE0]
	0x033F03D4 CBNZ W8, 0x33F03DC
	0x033F03D8 BL 0x1C16DFC
	0x033F03DC ADRP X20, 0xFE9000
	0x033F03E0 LDRB W8, [X20 + 0x88E]
	0x033F03E4 CBNZ W8, 0x33F03FC
	0x033F03E8 ADRP X0, 0xD04000
	0x033F03EC LDR X0, [X0 + 0x7B8]
	0x033F03F0 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xFEE000
	006 Move X20, 0xD05000
	007 Move W8, [X21+1093]
	008 Move X20, [X20+1976]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD05000
	015 Move X0, [X0+1976]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1093], W8
	019 NotImplemented "Instruction LDRH not yet implemented."
	020 Call 0x1C17D44
	021 Move X0, [X20]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move W0, W19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.Threading.Tasks.TaskCreationOptions OptionsMethod(System.Int32 flags)

Disassembly:
	0x033F0CF0 MOV X0, X19
	0x033F0CF4 BL 0x1C16DEC

ISIL:
	001 And W0, W0, 0xFFFF
	002 Return X0

Method: System.Boolean AtomicStateUpdate(System.Int32 newBits, System.Int32 illegalBits)

Disassembly:
	0x033F0944 BL 0x1C16D44
	0x033F0948 CBNZ X19, 0x33F0960
	0x033F094C MOVZ W1, 0x1
	0x033F0950 MOV X0, X20
	0x033F0954 BL 0x33F0788
	0x033F0958 MOV X19, X0
	0x033F095C CBZ X0, 0x33F0A04
	0x033F0960 LDR X21, [X19 + 0x18]!
	0x033F0964 BL 0x1C16D44
	0x033F0968 CBNZ X21, 0x33F09E8
	0x033F096C MOV X0, X20
	0x033F0970 BL 0x33ED11C
	0x033F0974 ADRP X8, 0xD3C000
	0x033F0978 LDR X8, [X8 + 0xF98]
	0x033F097C MOV W22, W0
	0x033F0980 LDR X8, [X8]
	0x033F0984 MOV X0, X8
	0x033F0988 BL 0x1C16F10
	0x033F098C AND W1, W22, 0x1
	0x033F0990 MOV X2, X31
	0x033F0994 MOV X21, X0
	0x033F0998 BL 0x33DE388
	0x033F099C BL 0x1C16D44
	0x033F09A0 MOV X0, X19
	0x033F09A4 MOV X1, X21
	0x033F09A8 MOV X2, X31
	0x033F09AC BL 0x1C24138
	0x033F09B0 CBZ X0, 0x33F09C8
	0x033F09B4 CBZ X21, 0x33F0A04
	0x033F09B8 MOV X0, X21
	0x033F09BC MOV X1, X31
	0x033F09C0 BL 0x33DEF14
	0x033F09C4 B 0x33F09E8
	0x033F09C8 TBNZ X22, 0x0, 0x33F09E8
	0x033F09CC MOV X0, X20
	0x033F09D0 BL 0x33ED11C
	0x033F09D4 TBZ X0, 0x0, 0x33F09E8
	0x033F09D8 CBZ X21, 0x33F0A04
	0x033F09DC MOV X0, X21
	0x033F09E0 MOV X1, X31
	0x033F09E4 BL 0x33DE6C8
	0x033F09E8 LDR X19, [X19]
	0x033F09EC BL 0x1C16D44
	0x033F09F0 MOV X0, X19
	0x033F09F4 LDP X20, X19, [X31 + 0x20]
	0x033F09F8 LDP X22, X21, [X31 + 0x10]
	0x033F09FC LDR X30, [X31], #0x30
	0x033F0A00 RET

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0xFEE000
	009 Move W8, [X22+1094]
	010 Move W19, W2
	011 Move W20, W1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xD10000
	018 Move X0, [X0+1136]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+1094], W8
	022 Move [X31+8], W31
	023 Add X21, X21, 56
	024 Move W23, [X21]
	025 Call 0x1C17D44
	026 And W31, W23, W19
	027 Move W22, W31
	028 Move X24, 0xD10000
	029 Move X24, [X24+1136]
	030 Call 0x1C17D44
	031 Or W1, W23, W20
	032 Move X0, X21
	033 Move W2, W23
	034 Call 0x1C251D4
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CSET not yet implemented."
	037 Move X0, [X24]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Add X0, X31, 8
	043 Move X1, X31
	044 Call SpinWait.SpinOnce, X0
	045 Move W23, [X21]
	046 Call 0x1C17D44
	047 And W31, W23, W19
	048 Move W0, W22
	049 Move X20, [X31+48]
	050 Move X19, [X31+56]
	051 Move X22, [X31+32]
	052 Move X21, [X31+40]
	053 Move X24, [X31+16]
	054 Move X23, [X31+24]
	055 Move X30, [X31+64]
	056 Return X0

Method: System.Boolean AtomicStateUpdate(System.Int32 newBits, System.Int32 illegalBits, ref System.Int32 oldFlags)

Disassembly:
	0x033F0CF8 STP X30, X21, [X31 - 0x20]!
	0x033F0CFC STP X20, X19, [X31 + 0x10]
	0x033F0D00 ADRP X21, 0xFED000
	0x033F0D04 LDRB W8, [X21 + 0x4AC]
	0x033F0D08 MOV W20, W1
	0x033F0D0C MOV X19, X0
	0x033F0D10 TBNZ X8, 0x0, 0x33F0D28
	0x033F0D14 ADRP X0, 0xD0A000
	0x033F0D18 LDR X0, [X0 + 0xC10]
	0x033F0D1C BL 0x1C16CF4
	0x033F0D20 MOVZ W8, 0x1
	0x033F0D24 STRB W8, [X21 + 0x4AC]
	0x033F0D28 LDRB W21, [X19 + 0x28]
	0x033F0D2C BL 0x1C16D44
	0x033F0D30 CBNZ W21, 0x33F0D68
	0x033F0D34 TBNZ X20, 0x0, 0x33F0D5C
	0x033F0D38 ADRP X8, 0xD0A000
	0x033F0D3C LDR X8, [X8 + 0xC10]
	0x033F0D40 LDR X0, [X8]
	0x033F0D44 LDR W8, [X0 + 0xE0]
	0x033F0D48 CBNZ W8, 0x33F0D50
	0x033F0D4C BL 0x1C16DFC
	0x033F0D50 MOV X0, X19
	0x033F0D54 MOV X1, X31
	0x033F0D58 BL 0x33B3E9C
	0x033F0D5C BL 0x1C16D44
	0x033F0D60 MOVZ W8, 0x1
	0x033F0D64 STRB W8, [X19 + 0x28]
	0x033F0D68 LDP X20, X19, [X31 + 0x10]
	0x033F0D6C LDP X30, X21, [X31], #0x20
	0x033F0D70 RET
	0x033F0D74 STR X30, [X31 - 0x40]!
	0x033F0D78 STP X24, X23, [X31 + 0x10]
	0x033F0D7C STP X22, X21, [X31 + 0x20]
	0x033F0D80 STP X20, X19, [X31 + 0x30]
	0x033F0D84 ADRP X19, 0xFED000
	0x033F0D88 LDRB W8, [X19 + 0x458]
	0x033F0D8C MOV W21, W2
	0x033F0D90 MOV X20, X1
	0x033F0D94 MOV X23, X0
	0x033F0D98 TBNZ X8, 0x0, 0x33F0DB0
	0x033F0D9C ADRP X0, 0xD3D000
	0x033F0DA0 LDR X0, [X0 + 0x760]
	0x033F0DA4 BL 0x1C16CF4
	0x033F0DA8 MOVZ W8, 0x1
	0x033F0DAC STRB W8, [X19 + 0x458]
	0x033F0DB0 STRB W31, [X31 + 0xC]
	0x033F0DB4 LDR X19, [X23 + 0x48]
	0x033F0DB8 BL 0x1C16D44
	0x033F0DBC CBNZ X19, 0x33F0DD4
	0x033F0DC0 MOVZ W1, 0x1
	0x033F0DC4 MOV X0, X23
	0x033F0DC8 BL 0x33F0788
	0x033F0DCC MOV X19, X0

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X23, 0xFEE000
	011 Move W8, [X23+1095]
	012 Move X19, X3
	013 Move W20, W2
	014 Move W21, W1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xD10000
	021 Move X0, [X0+1136]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+1095], W8
	025 Move [X31+8], W31
	026 Add X22, X22, 56
	027 Move W24, [X22]
	028 Call 0x1C17D44
	029 Move W23, W31
	030 And W31, W24, W20
	031 Move [X19], W24
	032 Move X24, 0xD10000
	033 Move X24, [X24+1136]
	034 Call 0x1C17D44
	035 Move W2, [X19]
	036 Move X0, X22
	037 Or W1, W2, W21
	038 Call 0x1C251D4
	039 Move W8, [X19]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 NotImplemented "Instruction CSET not yet implemented."
	042 Move X0, [X24]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Add X0, X31, 8
	048 Move X1, X31
	049 Call SpinWait.SpinOnce, X0
	050 Move W25, [X22]
	051 Call 0x1C17D44
	052 And W31, W25, W20
	053 Move [X19], W25
	054 Move W0, W23
	055 Move X20, [X31+64]
	056 Move X19, [X31+72]
	057 Move X22, [X31+48]
	058 Move X21, [X31+56]
	059 Move X24, [X31+32]
	060 Move X23, [X31+40]
	061 Move X30, [X31+16]
	062 Move X25, [X31+24]
	063 Add X31, X31, 80
	064 Return X0

Method: System.Void SetNotificationForWaitCompletion(System.Boolean enabled)

Disassembly:
	0x033F0DD0 CBZ X0, 0x33F0EA4
	0x033F0DD4 MOV X22, X19
	0x033F0DD8 LDR X24, [X22 + 0x20]!
	0x033F0DDC BL 0x1C16D44
	0x033F0DE0 CBNZ X24, 0x33F0E28
	0x033F0DE4 ADRP X8, 0xD3D000
	0x033F0DE8 LDR X8, [X8 + 0x760]
	0x033F0DEC LDR X0, [X8]
	0x033F0DF0 BL 0x1C16F10
	0x033F0DF4 MOV X1, X31
	0x033F0DF8 MOV X24, X0
	0x033F0DFC BL 0x33BDD8C
	0x033F0E00 STR X23, [X24 + 0x10]
	0x033F0E04 BL 0x1C16D44
	0x033F0E08 MOV X0, X22
	0x033F0E0C MOV X1, X24
	0x033F0E10 MOV X2, X31
	0x033F0E14 BL 0x1C24138
	0x033F0E18 CBZ X0, 0x33F0E28
	0x033F0E1C MOV X0, X24
	0x033F0E20 MOV W1, W31
	0x033F0E24 BL 0x33F0CF8
	0x033F0E28 STRB W31, [X31 + 0xC]
	0x033F0E2C ADD X1, X31, 0xC
	0x033F0E30 MOV X0, X19
	0x033F0E34 MOV X2, X31
	0x033F0E38 BL 0x33DE64C
	0x033F0E3C LDR X22, [X22]
	0x033F0E40 BL 0x1C16D44
	0x033F0E44 CBZ X22, 0x33F0EA0
	0x033F0E48 TBZ X21, 0x0, 0x33F0E5C
	0x033F0E4C MOV X0, X22
	0x033F0E50 MOV X1, X20
	0x033F0E54 BL 0x33F8D64
	0x033F0E58 B 0x33F0E68
	0x033F0E5C MOV X0, X22
	0x033F0E60 MOV X1, X20
	0x033F0E64 BL 0x33F8E20
	0x033F0E68 MOV X20, X31
	0x033F0E6C LDRB W8, [X31 + 0xC]
	0x033F0E70 CBZ W8, 0x33F0E80
	0x033F0E74 MOV X0, X19
	0x033F0E78 MOV X1, X31
	0x033F0E7C BL 0x33E14E4
	0x033F0E80 CBNZ X20, 0x33F0E98
	0x033F0E84 LDP X20, X19, [X31 + 0x30]
	0x033F0E88 LDP X22, X21, [X31 + 0x20]
	0x033F0E8C LDP X24, X23, [X31 + 0x10]
	0x033F0E90 LDR X30, [X31], #0x40
	0x033F0E94 RET
	0x033F0E98 MOV X0, X20
	0x033F0E9C BL 0x1C16F18
	0x033F0EA0 BL 0x1C16F20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xFEE000
	007 Move W8, [X21+1096]
	008 Move W20, W1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD10000
	015 Move X0, [X0+1136]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1096], W8
	019 Move TEMP, X20
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {27}
	023 Move W1, 0x10000000
	024 Move W2, 0x5600000
	025 Move X0, X19
	026 Call Task.AtomicStateUpdate, X0, X1, X2
	027 Move [X31+8], W31
	028 Add X19, X19, 56
	029 Move W20, [X19]
	030 Call 0x1C17D44
	031 And W21, W20, 0xEFFFFFFF
	032 Call 0x1C17D44
	033 Move X0, X19
	034 Move W1, W21
	035 Move W2, W20
	036 Call 0x1C251D4
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X22, 0xD10000
	039 Move X22, [X22+1136]
	040 Move X0, [X22]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Add X0, X31, 8
	046 Move X1, X31
	047 Call SpinWait.SpinOnce, X0
	048 Move W20, [X19]
	049 Call 0x1C17D44
	050 And W21, W20, 0xEFFFFFFF
	051 Call 0x1C17D44
	052 Move X0, X19
	053 Move W1, W21
	054 Move W2, W20
	055 Call 0x1C251D4
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X22, [X31+16]
	060 Move X21, [X31+24]
	061 Move X30, [X31+48]
	062 Return 

Method: System.Boolean NotifyDebuggerOfWaitCompletionIfNecessary()

Disassembly:
	0x033F0EA4 BL 0x1C16F20
	0x033F0EA8 B 0x33F0EB0
	0x033F0EAC B 0x33F0EB0
	0x033F0EB0 MOV X21, X0
	0x033F0EB4 CMP W1, 0x1
	0x033F0EB8 B.NE 0x33F0ED0
	0x033F0EBC MOV X0, X21
	0x033F0EC0 BL 0x3EB1AD0
	0x033F0EC4 LDR X20, [X0]
	0x033F0EC8 BL 0x3EB1AE0
	0x033F0ECC B 0x33F0E6C
	0x033F0ED0 MOV X20, X31
	0x033F0ED4 B 0x33F0EDC
	0x033F0ED8 MOV X21, X0
	0x033F0EDC LDRB W8, [X31 + 0xC]
	0x033F0EE0 CBZ W8, 0x33F0EF0
	0x033F0EE4 MOV X0, X19
	0x033F0EE8 MOV X1, X31
	0x033F0EEC BL 0x33E14E4
	0x033F0EF0 CBNZ X20, 0x33F0EFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W20, [X0+56]
	005 Move X19, X0
	006 Call 0x1C17D44
	007 Move TEMP, X20
	008 And TEMP, TEMP, 0x10000000
	009 Compare TEMP, 0x10000000
	010 JumpIfNotEqual {24}
	011 Move X8, [X19]
	012 Move X0, X19
	013 Move X9, [X8+488]
	014 Move X1, [X8+496]
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move TEMP, X0
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfNotEqual {24}
	020 Move X0, X19
	021 Move X1, X31
	022 Call Task.NotifyDebuggerOfWaitCompletion, X0
	023 Move W0, 1
	024 Move W0, W31
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Boolean AnyTaskRequiresNotifyDebuggerOfWaitCompletion(System.Threading.Tasks.Task[] tasks)

Disassembly:
	0x033F0F34 B 0x33F8D64
	0x033F0F38 B 0x33F8E20
	0x033F0F3C STR X30, [X31 - 0x50]!
	0x033F0F40 STP X26, X25, [X31 + 0x10]
	0x033F0F44 STP X24, X23, [X31 + 0x20]
	0x033F0F48 STP X22, X21, [X31 + 0x30]
	0x033F0F4C STP X20, X19, [X31 + 0x40]
	0x033F0F50 ADRP X20, 0xFED000
	0x033F0F54 LDRB W8, [X20 + 0x4AD]
	0x033F0F58 MOV X19, X2
	0x033F0F5C MOV W21, W1
	0x033F0F60 MOV X22, X0
	0x033F0F64 TBNZ X8, 0x0, 0x33F0FA0
	0x033F0F68 ADRP X0, 0xD35000
	0x033F0F6C LDR X0, [X0 + 0x8D0]
	0x033F0F70 BL 0x1C16CF4
	0x033F0F74 ADRP X0, 0xD35000
	0x033F0F78 LDR X0, [X0 + 0x8C8]
	0x033F0F7C BL 0x1C16CF4
	0x033F0F80 ADRP X0, 0xD3D000
	0x033F0F84 LDR X0, [X0 + 0x768]
	0x033F0F88 BL 0x1C16CF4
	0x033F0F8C ADRP X0, 0xD3D000
	0x033F0F90 LDR X0, [X0 + 0x770]
	0x033F0F94 BL 0x1C16CF4
	0x033F0F98 MOVZ W8, 0x1
	0x033F0F9C STRB W8, [X20 + 0x4AD]
	0x033F0FA0 ADRP X24, 0xD35000
	0x033F0FA4 LDR X20, [X22 + 0x18]
	0x033F0FA8 LDR X24, [X24 + 0x8D0]
	0x033F0FAC BL 0x1C16D44
	0x033F0FB0 AND W1, W21, 0x1
	0x033F0FB4 MOV X0, X22
	0x033F0FB8 BL 0x33F0CF8
	0x033F0FBC CBZ X19, 0x33F10A0
	0x033F0FC0 CBZ X20, 0x33F10D4
	0x033F0FC4 ADRP X8, 0xD35000
	0x033F0FC8 LDR X8, [X8 + 0x8C8]
	0x033F0FCC LDR W9, [X20 + 0x18]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Compare X0, 0
	009 JumpIfEqual {51}
	010 Move X8, [X0+24]
	011 Move X19, X0
	012 NotImplemented "Instruction CMP not yet implemented."
	013 NotImplemented "Instruction CSET not yet implemented."
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Move X22, X31
	016 And X8, X8, 0
	017 Add X23, X19, 32
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move X20, [X23]
	020 Compare X20, 0
	021 JumpIfEqual {37}
	022 Move W24, [X20+56]
	023 Call 0x1C17D44
	024 Move TEMP, X24
	025 And TEMP, TEMP, 0x10000000
	026 Compare TEMP, 0x10000000
	027 JumpIfNotEqual {37}
	028 Move X8, [X20]
	029 Move X0, X20
	030 Move X9, [X8+488]
	031 Move X1, [X8+496]
	032 NotImplemented "Instruction BLR not yet implemented."
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {41}
	037 Move W8, [X19+24]
	038 Add X22, X22, 1
	039 NotImplemented "Instruction CMP not yet implemented."
	040 NotImplemented "Instruction CSET not yet implemented."
	041 And W0, W21, 1
	042 Move X20, [X31+48]
	043 Move X19, [X31+56]
	044 Move X22, [X31+32]
	045 Move X21, [X31+40]
	046 Move X24, [X31+16]
	047 Move X23, [X31+24]
	048 Move X30, [X31+64]
	049 Return X0
	050 Call 0x1C17F28
	051 Call 0x1C17F20

Method: System.Boolean get_IsWaitNotificationEnabledOrNotRanToCompletion()

Disassembly:
	0x033F0FD0 LDR X0, [X8]
	0x033F0FD4 ADD W1, W9, 0x1
	0x033F0FD8 BL 0x1C16D6C
	0x033F0FDC CBZ X0, 0x33F10D4
	0x033F0FE0 LDR X8, [X0 + 0x18]
	0x033F0FE4 MOV X9, INVALID
	0x033F0FE8 MOV X21, X0
	0x033F0FEC ADD X8, X9, X8, 0x20, LSL
	0x033F0FF0 CMP X8, 0x1
	0x033F0FF4 B.LT 0x33F1058

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, [X0+56]
	004 Call 0x1C17D44
	005 Move W8, 0x11000000
	006 And W8, W19, W8
	007 Move W9, 0x1000000
	008 NotImplemented "Instruction CMP not yet implemented."
	009 NotImplemented "Instruction CSET not yet implemented."
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return X0

Method: System.Boolean get_ShouldNotifyDebuggerOfWaitCompletion()

Disassembly:
	0x033F0FF8 ADRP X26, 0xD3D000
	0x033F0FFC LDR X26, [X26 + 0x770]
	0x033F1000 MOV X22, X31
	0x033F1004 ADD X25, X21, 0x20
	0x033F1008 LDR X2, [X26]
	0x033F100C MOV X0, X20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, [X0+56]
	004 Call 0x1C17D44
	005 Move W0, W19
	006 ShiftRight W0, 28
	007 And W0, W0, 0xFFFFFFF
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return X0

Method: System.Boolean get_IsWaitNotificationEnabled()

Disassembly:
	0x033F0EF4 MOV X0, X21
	0x033F0EF8 BL 0x1D2C690
	0x033F0EFC MOV X0, X20
	0x033F0F00 BL 0x1C16F18
	0x033F0F04 BL 0x1990590
	0x033F0F08 STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, [X0+56]
	004 Call 0x1C17D44
	005 Move W0, W19
	006 ShiftRight W0, 28
	007 And W0, W0, 0xFFFFFFF
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return X0

Method: System.Void NotifyDebuggerOfWaitCompletion()

Disassembly:
	0x033F0F0C STP X20, X19, [X31 + 0x10]
	0x033F0F10 MOV X19, X1
	0x033F0F14 MOV X1, X31
	0x033F0F18 MOV X20, X0
	0x033F0F1C BL 0x33BDD8C
	0x033F0F20 STR X19, [X20 + 0x10]
	0x033F0F24 LDP X20, X19, [X31 + 0x10]
	0x033F0F28 LDR X30, [X31], #0x20
	0x033F0F2C RET
	0x033F0F30 TBZ X2, 0x0, 0x33F0F38

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X0
	004 Move [X31+8], X1
	005 Move X0, [X31+24]
	006 And W1, W31, 1
	007 Call Task.SetNotificationForWaitCompletion, X0, X1
	008 Move X30, [X31+16]
	009 Add X31, X31, 32
	010 Return 

Method: System.Boolean MarkStarted()

Disassembly:
	0x033F1010 MOV W1, W22
	0x033F1014 BL 0x319B580
	0x033F1018 CBZ X0, 0x33F10D4

ISIL:
	001 Move W1, 0x10000
	002 Move W2, 0x410000
	003 Call Task.AtomicStateUpdate, X0, X1, X2
	004 Return X0

Method: System.Void AddNewChild()

Disassembly:
	0x033EFF84 TBZ X24, 0x1C, 0x33EFF9C
	0x033EFF88 LDR X8, [X20]
	0x033EFF8C MOV X0, X20
	0x033EFF90 LDP X9, X1, [X8 + 0x1E8]
	0x033EFF94 BLR X9
	0x033EFF98 TBNZ X0, 0x0, 0x33EFFB0
	0x033EFF9C LDR W8, [X19 + 0x18]
	0x033EFFA0 ADD X22, X22, 0x1
	0x033EFFA4 CMP X22, W8, SXTW
	0x033EFFA8 CSET W21, LT
	0x033EFFAC B.LT 0x33EFF6C
	0x033EFFB0 AND W0, W21, 0x1
	0x033EFFB4 LDP X20, X19, [X31 + 0x30]
	0x033EFFB8 LDP X22, X21, [X31 + 0x20]
	0x033EFFBC LDP X24, X23, [X31 + 0x10]
	0x033EFFC0 LDR X30, [X31], #0x40
	0x033EFFC4 RET
	0x033EFFC8 BL 0x1C16F28
	0x033EFFCC BL 0x1C16F20
	0x033EFFD0 STP X30, X19, [X31 - 0x10]!
	0x033EFFD4 LDR W19, [X0 + 0x38]
	0x033EFFD8 BL 0x1C16D44
	0x033EFFDC MOVZ W8, 0x11000000
	0x033EFFE0 AND W8, W19, W8, 0x0
	0x033EFFE4 MOVZ W9, 0x1000000
	0x033EFFE8 CMP W8, W9
	0x033EFFEC CSET W0, NE
	0x033EFFF0 LDP X30, X19, [X31], #0x10
	0x033EFFF4 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, [X0+72]
	005 Move X20, X0
	006 Call 0x1C17D44
	007 Compare X19, 0
	008 JumpIfNotEqual {15}
	009 Move W1, 1
	010 Move X0, X20
	011 Call Task.EnsureContingentPropertiesInitializedCore, X0, X1
	012 Move X19, X0
	013 Compare X0, 0
	014 JumpIfEqual {35}
	015 Add X19, X19, 60
	016 Move W20, [X19]
	017 Call 0x1C17D44
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move W20, [X19]
	020 Call 0x1C17D44
	021 Call 0x1C17D44
	022 Add W8, W20, 1
	023 Move [X19], W8
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Return 
	028 Call 0x1C17D44
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Call 0x1C25278
	034 Return 
	035 Call 0x1C17F20

Method: System.Void DisregardChild()

Disassembly:
	0x033F05C4 CBZ X20, 0x33F0664
	0x033F05C8 LDR X20, [X20 + 0x20]
	0x033F05CC BL 0x1C16D44
	0x033F05D0 CBZ X20, 0x33F0664
	0x033F05D4 MOV X0, X20
	0x033F05D8 MOV X2, X19
	0x033F05DC LDP X20, X19, [X31 + 0x10]
	0x033F05E0 MOV W1, W31
	0x033F05E4 LDP X30, X21, [X31], #0x20
	0x033F05E8 B 0x33F0F3C
	0x033F05EC CBZ X19, 0x33F0654
	0x033F05F0 ADRP X8, 0xD35000
	0x033F05F4 LDR X8, [X8 + 0x8C8]
	0x033F05F8 MOVZ W1, 0x1
	0x033F05FC LDR X0, [X8]
	0x033F0600 BL 0x1C16D6C
	0x033F0604 CBZ X0, 0x33F0664
	0x033F0608 LDR X8, [X0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, [X0+72]
	005 Move X20, X0
	006 Call 0x1C17D44
	007 Compare X19, 0
	008 JumpIfNotEqual {15}
	009 Move W1, 1
	010 Move X0, X20
	011 Call Task.EnsureContingentPropertiesInitializedCore, X0, X1
	012 Move X19, X0
	013 Compare X0, 0
	014 JumpIfEqual {23}
	015 Add X19, X19, 60
	016 Call 0x1C17D44
	017 Move X0, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Call 0x1C252B0
	022 Return 
	023 Call 0x1C17F20

Method: System.Threading.Tasks.Task InternalStartNew(System.Threading.Tasks.Task creatingTask, System.Delegate action, System.Object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.Tasks.TaskCreationOptions options, System.Threading.Tasks.InternalTaskOptions internalOptions)

Disassembly:
	0x033F101C LDR X23, [X0 + 0x10]
	0x033F1020 CBZ X23, 0x33F1038
	0x033F1024 LDR X8, [X21]
	0x033F1028 MOV X0, X23
	0x033F102C LDR X1, [X8 + 0x40]
	0x033F1030 BL 0x1C16E00
	0x033F1034 CBZ X0, 0x33F10DC
	0x033F1038 LDR W8, [X21 + 0x18]
	0x033F103C CMP X22, X8
	0x033F1040 B.CS 0x33F10D8
	0x033F1044 STR X23, [X25, X22, LSL #3]
	0x033F1048 ADD X22, X22, 0x1
	0x033F104C SUB W8, W8, 0x1
	0x033F1050 CMP X22, W8, SXTW
	0x033F1054 B.LT 0x33F1008
	0x033F1058 LDR X8, [X21]
	0x033F105C MOV X0, X19
	0x033F1060 LDR X1, [X8 + 0x40]
	0x033F1064 BL 0x1C16E00
	0x033F1068 CBZ X0, 0x33F10DC
	0x033F106C LDR X8, [X21 + 0x18]
	0x033F1070 CBZ W8, 0x33F10D8
	0x033F1074 MOV X9, INVALID
	0x033F1078 ADD X8, X9, X8, 0x20, LSL
	0x033F107C ADD X8, X21, X8, 0x1D, ASR
	0x033F1080 STR X19, [X8 + 0x20]
	0x033F1084 LDR X0, [X24]
	0x033F1088 BL 0x1C16F10
	0x033F108C MOV X1, X21
	0x033F1090 MOV X2, X31
	0x033F1094 MOV X19, X0
	0x033F1098 BL 0x331463C
	0x033F109C B 0x33F10B8
	0x033F10A0 LDR X0, [X24]
	0x033F10A4 BL 0x1C16F10
	0x033F10A8 MOV X1, X20
	0x033F10AC MOV X2, X31
	0x033F10B0 MOV X19, X0
	0x033F10B4 BL 0x3314A8C
	0x033F10B8 MOV X0, X19
	0x033F10BC LDP X20, X19, [X31 + 0x40]
	0x033F10C0 LDP X22, X21, [X31 + 0x30]
	0x033F10C4 LDP X24, X23, [X31 + 0x20]
	0x033F10C8 LDP X26, X25, [X31 + 0x10]
	0x033F10CC LDR X30, [X31], #0x50
	0x033F10D0 RET
	0x033F10D4 BL 0x1C16F20
	0x033F10D8 BL 0x1C16F28
	0x033F10DC BL 0x1C16F44
	0x033F10E0 MOV X1, X31
	0x033F10E4 BL 0x1C16DEC
	0x033F10E8 STP X30, X21, [X31 - 0x20]!
	0x033F10EC STP X20, X19, [X31 + 0x10]
	0x033F10F0 ADRP X20, 0xFEC000
	0x033F10F4 LDRB W8, [X20 + 0x45A]
	0x033F10F8 MOV X19, X0
	0x033F10FC TBNZ X8, 0x0, 0x33F112C
	0x033F1100 ADRP X0, 0xD3C000
	0x033F1104 LDR X0, [X0 + 0x778]
	0x033F1108 BL 0x1C16CF4
	0x033F110C ADRP X0, 0xD3C000
	0x033F1110 LDR X0, [X0 + 0x780]
	0x033F1114 BL 0x1C16CF4
	0x033F1118 ADRP X0, 0xD3C000
	0x033F111C LDR X0, [X0 + 0x788]
	0x033F1120 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+32], X26
	004 Move [X31+40], X25
	005 Move [X31+48], X24
	006 Move [X31+56], X23
	007 Move [X31+64], X22
	008 Move [X31+72], X21
	009 Move [X31+80], X20
	010 Move [X31+88], X19
	011 Move X26, 0xFED000
	012 Move W8, [X26+1097]
	013 Move W23, W6
	014 Move W20, W5
	015 Move X19, X4
	016 Move X21, X3
	017 Move X22, X2
	018 Move X24, X1
	019 Move X25, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0xD04000
	025 Move X0, [X0+1976]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X26+1097], W8
	029 Compare X19, 0
	030 JumpIfEqual {61}
	031 Move X8, 0xD04000
	032 Move X8, [X8+1976]
	033 Move X0, [X8]
	034 Call 0x1C17F10
	035 Or W6, W23, 0x2000
	036 Move X1, X24
	037 Move X2, X22
	038 Move X3, X25
	039 Move X4, X21
	040 Move W5, W20
	041 Move X7, X19
	042 Move X26, X0
	043 Call Task..ctor, X0, X1, X2, X3, X4, X5, X6, X7
	044 Compare X26, 0
	045 JumpIfEqual {79}
	046 Move X0, X26
	047 Move W1, W31
	048 Call Task.ScheduleAndStart, X0, X1
	049 Move X0, X26
	050 Move X20, [X31+80]
	051 Move X19, [X31+88]
	052 Move X22, [X31+64]
	053 Move X21, [X31+72]
	054 Move X24, [X31+48]
	055 Move X23, [X31+56]
	056 Move X26, [X31+32]
	057 Move X25, [X31+40]
	058 Move X30, [X31+16]
	059 Add X31, X31, 96
	060 Return X0
	061 Move X0, 0xD08000
	062 Move X0, [X0+1320]
	063 Call 0x1C17D08
	064 Call 0x1C17F10
	065 Move X19, X0
	066 Move X0, 0xD2B000
	067 Move X0, [X0+1880]
	068 Call 0x1C17D08
	069 Move X1, X0
	070 Move X0, X19
	071 Move X2, X31
	072 Call ArgumentNullException..ctor, X0, X1
	073 Move X0, 0xD3D000
	074 Move X0, [X0+1816]
	075 Call 0x1C17D08
	076 Move X1, X0
	077 Move X0, X19
	078 Call 0x1C17DEC
	079 Call 0x1C17F20

Method: System.Int32 get_Id()

Disassembly:
	0x033EF7D4 MOV X19, X0
	0x033EF7D8 LDR X1, [X8]
	0x033EF7DC BL 0x319AF58
	0x033EF7E0 ADD X1, X31, 0x18
	0x033EF7E4 ADD X2, X31, 0x10
	0x033EF7E8 ADD X3, X31, 0x8
	0x033EF7EC MOV X0, X21
	0x033EF7F0 STP X20, X19, [X31 + 0x10]
	0x033EF7F4 STR X31, [X31 + 0x8]
	0x033EF7F8 BL 0x1C2416C
	0x033EF7FC LDR X8, [X31 + 0x8]
	0x033EF800 CMP X8, X20
	0x033EF804 B.EQ 0x33EF8C4
	0x033EF808 LDR X19, [X21]
	0x033EF80C BL 0x1C16D44
	0x033EF810 CBZ X19, 0x33EF8C4
	0x033EF814 LDR X8, [X23]
	0x033EF818 LDR X9, [X19]
	0x033EF81C CMP X9, X8
	0x033EF820 B.NE 0x33EF8C4
	0x033EF824 STRB W31, [X31 + 0x4]
	0x033EF828 ADD X1, X31, 0x4
	0x033EF82C MOV X0, X19
	0x033EF830 MOV X2, X31
	0x033EF834 BL 0x33DE64C
	0x033EF838 LDR X21, [X21]
	0x033EF83C BL 0x1C16D44
	0x033EF840 LDR X0, [X22]
	0x033EF844 LDR W8, [X0 + 0xE0]
	0x033EF848 CBNZ W8, 0x33EF854
	0x033EF84C BL 0x1C16DFC
	0x033EF850 LDR X0, [X22]
	0x033EF854 LDR X8, [X0 + 0xB8]
	0x033EF858 LDR X8, [X8 + 0x8]
	0x033EF85C CMP X21, X8
	0x033EF860 B.EQ 0x33EF8A8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xFEF000
	006 Move W8, [X20+1098]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xD06000
	013 Move X0, [X0+1976]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1098], W8
	017 Add X19, X19, 16
	018 Move W20, [X19]
	019 Call 0x1C17D44
	020 Compare W20, 0
	021 JumpIfNotEqual {40}
	022 Move X21, 0xD06000
	023 Move X21, [X21+1976]
	024 Move X0, [X21]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X21]
	030 Move X0, [X0+184]
	031 Call 0x1C25278
	032 Compare W0, 0
	033 JumpIfEqual {24}
	034 Move W20, W0
	035 Call 0x1C17D44
	036 Move X0, X19
	037 Move W1, W20
	038 Move W2, W31
	039 Call 0x1C251D4
	040 Move W19, [X19]
	041 Call 0x1C17D44
	042 Move W0, W19
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Return X0

Method: System.Threading.Tasks.Task get_InternalCurrent()

Disassembly:
	0x033F1330 LDR X8, [X19 + 0x30]
	0x033F1334 CBZ X8, 0x33F13C8
	0x033F1338 MOV X0, X19
	0x033F133C BL 0x33EF398
	0x033F1340 TBZ X0, 0x2, 0x33F13C8
	0x033F1344 LDR X0, [X19 + 0x30]
	0x033F1348 CBZ X0, 0x33F13D4
	0x033F134C BL 0x33EF398
	0x033F1350 TBNZ X0, 0x3, 0x33F13C8
	0x033F1354 ADRP X20, 0xD03000
	0x033F1358 LDR X20, [X20 + 0x7B8]
	0x033F135C LDR X0, [X20]
	0x033F1360 LDR W8, [X0 + 0xE0]
	0x033F1364 CBNZ W8, 0x33F136C
	0x033F1368 BL 0x1C16DFC
	0x033F136C ADRP X21, 0xFE8000
	0x033F1370 LDRB W8, [X21 + 0x88E]
	0x033F1374 CBNZ W8, 0x33F138C
	0x033F1378 ADRP X0, 0xD03000
	0x033F137C LDR X0, [X0 + 0x7B8]
	0x033F1380 BL 0x1C16CF4
	0x033F1384 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xFED000
	005 Move X19, 0xD04000
	006 Move W8, [X20+1099]
	007 Move X19, [X19+1976]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xD04000
	013 Move X0, [X0+1976]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1099], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Call 0x1C17D0C
	024 Move X0, [X0]
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Threading.Tasks.Task InternalCurrentIfAttached(System.Threading.Tasks.TaskCreationOptions creationOptions)

Disassembly:
	0x033F1388 STRB W8, [X21 + 0x88E]
	0x033F138C LDR X0, [X20]
	0x033F1390 LDR W8, [X0 + 0xE0]
	0x033F1394 CBNZ W8, 0x33F13A0
	0x033F1398 BL 0x1C16DFC
	0x033F139C LDR X0, [X20]
	0x033F13A0 BL 0x1C16D0C
	0x033F13A4 LDR X8, [X0]
	0x033F13A8 LDR X9, [X19 + 0x30]
	0x033F13AC CMP X8, X9
	0x033F13B0 B.NE 0x33F13C8
	0x033F13B4 LDR W20, [X19 + 0x38]
	0x033F13B8 BL 0x1C16D44
	0x033F13BC BL 0x1C16D44
	0x033F13C0 ORR W8, W20, 0x80000
	0x033F13C4 STR W8, [X19 + 0x38]
	0x033F13C8 LDP X20, X19, [X31 + 0x10]
	0x033F13CC LDP X30, X21, [X31], #0x20
	0x033F13D0 RET
	0x033F13D4 BL 0x1C16F20
	0x033F13D8 STP X30, X19, [X31 - 0x10]!
	0x033F13DC LDR W19, [X0 + 0x38]
	0x033F13E0 BL 0x1C16D44
	0x033F13E4 UBFM W0, W19, 0x13, 0x13
	0x033F13E8 LDP X30, X19, [X31], #0x10
	0x033F13EC RET
	0x033F13F0 STP X30, X19, [X31 - 0x10]!
	0x033F13F4 LDR W19, [X0 + 0x38]
	0x033F13F8 BL 0x1C16D44
	0x033F13FC UBFM W0, W19, 0x11, 0x11
	0x033F1400 LDP X30, X19, [X31], #0x10
	0x033F1404 RET
	0x033F1408 STR X30, [X31 - 0x30]!
	0x033F140C STP X22, X21, [X31 + 0x10]
	0x033F1410 STP X20, X19, [X31 + 0x20]
	0x033F1414 ADRP X20, 0xFEC000
	0x033F1418 LDRB W8, [X20 + 0x45D]
	0x033F141C MOV X19, X0
	0x033F1420 TBNZ X8, 0x0, 0x33F1438

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xFED000
	005 Move W8, [X20+1100]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {16}
	011 Move TEMP, X19
	012 And TEMP, TEMP, 4
	013 Compare TEMP, 4
	014 JumpIfEqual {25}
	015 Move X0, X31
	016 Move X0, 0xD04000
	017 Move X0, [X0+1976]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+1100], W8
	021 Move TEMP, X19
	022 And TEMP, TEMP, 4
	023 Compare TEMP, 4
	024 JumpIfNotEqual {15}
	025 Move X19, 0xD04000
	026 Move X19, [X19+1976]
	027 Move X0, [X19]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X20, 0xFE9000
	033 Move W8, [X20+2190]
	034 Compare W8, 0
	035 JumpIfNotEqual {41}
	036 Move X0, 0xD04000
	037 Move X0, [X0+1976]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X20+2190], W8
	041 Move X0, [X19]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X19]
	047 Call 0x1C17D0C
	048 Move X0, [X0]
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+32]
	052 Return X0

Method: System.Threading.Tasks.StackGuard get_CurrentStackGuard()

Disassembly:
	0x033F1424 ADRP X0, 0xD2A000
	0x033F1428 LDR X0, [X0 + 0x728]
	0x033F142C BL 0x1C16CF4
	0x033F1430 MOVZ W8, 0x1
	0x033F1434 STRB W8, [X20 + 0x45D]
	0x033F1438 MOV X0, X19
	0x033F143C BL 0x33F1690
	0x033F1440 MOV X0, X19
	0x033F1444 BL 0x33F0AD0
	0x033F1448 TBZ X0, 0x0, 0x33F14E8
	0x033F144C ADRP X20, 0xD2A000
	0x033F1450 LDR X20, [X20 + 0x728]
	0x033F1454 LDR X0, [X20]
	0x033F1458 LDR W8, [X0 + 0xE0]
	0x033F145C CBNZ W8, 0x33F1474
	0x033F1460 BL 0x1C16DFC
	0x033F1464 LDR X0, [X20]
	0x033F1468 LDR W8, [X0 + 0xE0]
	0x033F146C CBNZ W8, 0x33F1474
	0x033F1470 BL 0x1C16DFC
	0x033F1474 ADRP X21, 0xFE8000
	0x033F1478 LDRB W8, [X21 + 0x829]
	0x033F147C CBNZ W8, 0x33F14A0
	0x033F1480 ADRP X0, 0xD2A000
	0x033F1484 LDR X0, [X0 + 0x728]
	0x033F1488 BL 0x1C16CF4
	0x033F148C ADRP X0, 0xD03000
	0x033F1490 LDR X0, [X0 + 0x7B8]
	0x033F1494 BL 0x1C16CF4
	0x033F1498 MOVZ W8, 0x1
	0x033F149C STRB W8, [X21 + 0x829]
	0x033F14A0 ADRP X21, 0xD03000
	0x033F14A4 LDR X21, [X21 + 0x7B8]
	0x033F14A8 LDR X0, [X21]
	0x033F14AC LDR W8, [X0 + 0xE0]
	0x033F14B0 CBNZ W8, 0x33F14BC
	0x033F14B4 BL 0x1C16DFC
	0x033F14B8 LDR X0, [X21]
	0x033F14BC LDR X8, [X0 + 0xB8]
	0x033F14C0 LDRB W8, [X8 + 0x10]
	0x033F14C4 CBZ W8, 0x33F14E0
	0x033F14C8 LDR X0, [X20]
	0x033F14CC LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xFED000
	005 Move X20, 0xD04000
	006 Move W8, [X19+1101]
	007 Move X20, [X20+1976]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xD3D000
	013 Move X0, [X0+1840]
	014 Call 0x1C17CF4
	015 Move X0, 0xD04000
	016 Move X0, [X0+1976]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+1101], W8
	020 Move X0, [X20]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X20]
	026 Call 0x1C17D0C
	027 Move X19, [X0+8]
	028 Compare X19, 0
	029 JumpIfNotEqual {47}
	030 Move X8, 0xD3D000
	031 Move X8, [X8+1840]
	032 Move X0, [X8]
	033 Call 0x1C17F10
	034 Move X1, X31
	035 Move X19, X0
	036 Call Object..ctor, X0
	037 Move X0, [X20]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {43}
	041 Call 0x1C17DFC
	042 Move X0, [X20]
	043 Call 0x1C17D0C
	044 Move [X0+8], X19
	045 Move X0, [X20]
	046 Call 0x1C17D0C
	047 Move X0, X19
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X30, [X31+32]
	051 Return X0

Method: System.AggregateException get_Exception()

Disassembly:
	0x033F14D8 MOV X0, X19
	0x033F14DC BL 0x33EE8F8
	0x033F14E0 MOVZ W21, 0x200000
	0x033F14E4 B 0x33F1634
	0x033F14E8 MOV X0, X19
	0x033F14EC BL 0x33F06F8
	0x033F14F0 TBZ X0, 0x0, 0x33F1500
	0x033F14F4 LDR W20, [X19 + 0x38]
	0x033F14F8 BL 0x1C16D44
	0x033F14FC TBNZ X20, 0x14, 0x33F159C
	0x033F1500 ADRP X20, 0xD2A000
	0x033F1504 LDR X20, [X20 + 0x728]
	0x033F1508 LDR X0, [X20]
	0x033F150C LDR W8, [X0 + 0xE0]
	0x033F1510 CBNZ W8, 0x33F1528

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W20, [X0+56]
	005 Move X19, X0
	006 Call 0x1C17D44
	007 Move TEMP, X20
	008 And TEMP, TEMP, 0x200000
	009 Compare TEMP, 0x200000
	010 JumpIfEqual {16}
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X0, X31
	014 Move X30, [X31+32]
	015 Return X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move W1, W31
	020 Move X30, [X31+32]
	021 Call Task.GetExceptions, X0, X1
	022 Return X0

Method: System.Threading.Tasks.TaskStatus get_Status()

Disassembly:
	0x033F1678 BL 0x33F1AF8
	0x033F167C MOV X0, X19
	0x033F1680 LDP X20, X19, [X31 + 0x20]
	0x033F1684 LDP X22, X21, [X31 + 0x10]
	0x033F1688 LDR X30, [X31], #0x30
	0x033F168C B 0x33F1C00
	0x033F1690 STR X30, [X31 - 0x50]!
	0x033F1694 STP X26, X25, [X31 + 0x10]
	0x033F1698 STP X24, X23, [X31 + 0x20]
	0x033F169C STP X22, X21, [X31 + 0x30]
	0x033F16A0 STP X20, X19, [X31 + 0x40]
	0x033F16A4 ADRP X19, 0xFEC000
	0x033F16A8 LDRB W8, [X19 + 0x45F]
	0x033F16AC MOV X21, X0
	0x033F16B0 TBNZ X8, 0x0, 0x33F16EC
	0x033F16B4 ADRP X0, 0xD02000
	0x033F16B8 LDR X0, [X0 + 0xE00]
	0x033F16BC BL 0x1C16CF4
	0x033F16C0 ADRP X0, 0xD3C000
	0x033F16C4 LDR X0, [X0 + 0x798]
	0x033F16C8 BL 0x1C16CF4
	0x033F16CC ADRP X0, 0xD3C000
	0x033F16D0 LDR X0, [X0 + 0x7A0]
	0x033F16D4 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, [X0+56]
	004 Call 0x1C17D44
	005 Move TEMP, X19
	006 And TEMP, TEMP, 0x200000
	007 Compare TEMP, 0x200000
	008 JumpIfEqual {32}
	009 Move TEMP, X19
	010 And TEMP, TEMP, 0x400000
	011 Compare TEMP, 0x400000
	012 JumpIfEqual {33}
	013 Move TEMP, X19
	014 And TEMP, TEMP, 0x1000000
	015 Compare TEMP, 0x1000000
	016 JumpIfEqual {34}
	017 Move TEMP, X19
	018 And TEMP, TEMP, 0x800000
	019 Compare TEMP, 0x800000
	020 JumpIfEqual {35}
	021 Move TEMP, X19
	022 And TEMP, TEMP, 0x20000
	023 Compare TEMP, 0x20000
	024 JumpIfEqual {36}
	025 Move TEMP, X19
	026 And TEMP, TEMP, 0x10000
	027 Compare TEMP, 0x10000
	028 JumpIfEqual {37}
	029 Move W0, W19
	030 ShiftRight W0, 25
	031 And W0, W0, 0x1FFFFFF
	032 Move W0, 7
	033 Move W0, 6
	034 Move W0, 5
	035 Move W0, 4
	036 Move W0, 3
	037 Move W0, 2
	038 Move X30, [X31+16]
	039 Move X19, [X31+24]
	040 Return X0

Method: System.Boolean get_IsCanceled()

Disassembly:
	0x033F16D8 ADRP X0, 0xD02000
	0x033F16DC LDR X0, [X0 + 0xE18]
	0x033F16E0 BL 0x1C16CF4
	0x033F16E4 MOVZ W8, 0x1
	0x033F16E8 STRB W8, [X19 + 0x45F]
	0x033F16EC LDR X24, [X21 + 0x48]
	0x033F16F0 BL 0x1C16D44
	0x033F16F4 CBZ X24, 0x33F1954

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, [X0+56]
	004 Call 0x1C17D44
	005 And W8, W19, 0x600000
	006 NotImplemented "Instruction CMP not yet implemented."
	007 NotImplemented "Instruction CSET not yet implemented."
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return X0

Method: System.Boolean get_IsCancellationRequested()

Disassembly:
	0x033F16F8 LDR X19, [X24 + 0x40]
	0x033F16FC BL 0x1C16D44
	0x033F1700 CBZ X19, 0x33F1954
	0x033F1704 STRB W31, [X31 + 0xC]
	0x033F1708 ADD X1, X31, 0xC
	0x033F170C MOV X0, X19
	0x033F1710 MOV X2, X31
	0x033F1714 BL 0x33DE64C
	0x033F1718 ADRP X10, 0xD3C000
	0x033F171C LDR X8, [X19]
	0x033F1720 LDR X10, [X10 + 0x798]
	0x033F1724 LDRH W9, [X8 + 0x12E]
	0x033F1728 LDR X1, [X10]
	0x033F172C CBZ X9, 0x33F1750
	0x033F1730 LDR X10, [X8 + 0xB0]
	0x033F1734 ADD X10, X10, 0x8
	0x033F1738 LDUR X11, [X10 - 0x8]
	0x033F173C CMP X11, X1
	0x033F1740 B.EQ 0x33F1760
	0x033F1744 SUBS X9, X9, 0x1
	0x033F1748 ADD X10, X10, 0x10
	0x033F174C B.NE 0x33F1738
	0x033F1750 MOV X0, X19
	0x033F1754 MOV W2, W31
	0x033F1758 BL 0x1C5C788
	0x033F175C B 0x33F176C
	0x033F1760 LDRSW X9, [X10]
	0x033F1764 ADD X8, X8, X9, 0x4, LSL
	0x033F1768 ADD X0, X8, 0x138
	0x033F176C LDP X8, X1, [X0]
	0x033F1770 MOV X0, X19
	0x033F1774 BLR X8
	0x033F1778 MOV X20, X0
	0x033F177C CBZ X0, 0x33F1980
	0x033F1780 ADRP X23, 0xD02000
	0x033F1784 ADRP X25, 0xD3C000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xFED000
	005 Move W8, [X20+1102]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xD0B000
	012 Move X0, [X0+2008]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1102], W8
	016 Move X19, [X19+72]
	017 Call 0x1C17D44
	018 Compare X19, 0
	019 JumpIfEqual {24}
	020 Move W20, [X19+56]
	021 Call 0x1C17D44
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move W0, 1
	024 Move W0, W31
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return X0
	029 Move X8, 0xD0B000
	030 Move X8, [X8+2008]
	031 Add X19, X19, 40
	032 Move X0, [X8]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X19
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X1, X31
	041 Move X30, [X31+32]
	042 Call CancellationToken.get_IsCancellationRequested, X0
	043 Return X0

Method: System.Threading.Tasks.Task/ContingentProperties EnsureContingentPropertiesInitialized(System.Boolean needsProtection)

Disassembly:
	0x033F0358 MOVZ W8, 0x1
	0x033F035C STRB W8, [X20 + 0x44B]
	0x033F0360 LDR X0, [X19]
	0x033F0364 LDR W8, [X0 + 0xE0]
	0x033F0368 CBNZ W8, 0x33F0374
	0x033F036C BL 0x1C16DFC
	0x033F0370 LDR X0, [X19]
	0x033F0374 BL 0x1C16D0C
	0x033F0378 LDR X0, [X0]
	0x033F037C LDP X20, X19, [X31 + 0x10]
	0x033F0380 LDR X30, [X31], #0x20
	0x033F0384 RET
	0x033F0388 STR X30, [X31 - 0x20]!
	0x033F038C STP X20, X19, [X31 + 0x10]
	0x033F0390 ADRP X20, 0xFED000
	0x033F0394 LDRB W8, [X20 + 0x44C]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, [X0+72]
	006 Move X19, X0
	007 Move W21, W1
	008 Call 0x1C17D44
	009 Compare X20, 0
	010 JumpIfEqual {17}
	011 Move X0, X20
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X30, [X31+32]
	015 Move X21, [X31+40]
	016 Return X0
	017 Move X0, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 And W1, W21, 1
	021 Move X30, [X31+32]
	022 Move X21, [X31+40]
	023 Call Task.EnsureContingentPropertiesInitializedCore, X0, X1
	024 Return X0

Method: System.Threading.Tasks.Task/ContingentProperties EnsureContingentPropertiesInitializedCore(System.Boolean needsProtection)

Disassembly:
	0x033F1788 LDR X23, [X23 + 0xE18]
	0x033F178C LDR X25, [X25 + 0x7A0]
	0x033F1790 LDR X8, [X20]
	0x033F1794 LDR X1, [X23]
	0x033F1798 LDRH W9, [X8 + 0x12E]
	0x033F179C CBZ X9, 0x33F17C0
	0x033F17A0 LDR X10, [X8 + 0xB0]
	0x033F17A4 ADD X10, X10, 0x8
	0x033F17A8 LDUR X11, [X10 - 0x8]
	0x033F17AC CMP X11, X1
	0x033F17B0 B.EQ 0x33F17D0
	0x033F17B4 SUBS X9, X9, 0x1
	0x033F17B8 ADD X10, X10, 0x10
	0x033F17BC B.NE 0x33F17A8
	0x033F17C0 MOV X0, X20
	0x033F17C4 MOV W2, W31
	0x033F17C8 BL 0x1C5C788
	0x033F17CC B 0x33F17DC
	0x033F17D0 LDRSW X9, [X10]
	0x033F17D4 ADD X8, X8, X9, 0x4, LSL
	0x033F17D8 ADD X0, X8, 0x138
	0x033F17DC LDP X8, X1, [X0]
	0x033F17E0 MOV X0, X20
	0x033F17E4 BLR X8
	0x033F17E8 TBZ X0, 0x0, 0x33F18A0
	0x033F17EC LDR X8, [X20]
	0x033F17F0 LDR X1, [X25]
	0x033F17F4 LDRH W9, [X8 + 0x12E]
	0x033F17F8 CBZ X9, 0x33F181C
	0x033F17FC LDR X10, [X8 + 0xB0]
	0x033F1800 ADD X10, X10, 0x8
	0x033F1804 LDUR X11, [X10 - 0x8]
	0x033F1808 CMP X11, X1
	0x033F180C B.EQ 0x33F182C
	0x033F1810 SUBS X9, X9, 0x1
	0x033F1814 ADD X10, X10, 0x10
	0x033F1818 B.NE 0x33F1804
	0x033F181C MOV X0, X20
	0x033F1820 MOV W2, W31
	0x033F1824 BL 0x1C5C788
	0x033F1828 B 0x33F1838
	0x033F182C LDRSW X9, [X10]
	0x033F1830 ADD X8, X8, X9, 0x4, LSL
	0x033F1834 ADD X0, X8, 0x138
	0x033F1838 LDP X8, X1, [X0]
	0x033F183C MOV X0, X20
	0x033F1840 BLR X8
	0x033F1844 MOV X22, X0
	0x033F1848 CBZ X0, 0x33F196C
	0x033F184C LDR W26, [X22 + 0x38]
	0x033F1850 BL 0x1C16D44
	0x033F1854 TBZ X26, 0x15, 0x33F1790
	0x033F1858 LDR W26, [X22 + 0x38]
	0x033F185C BL 0x1C16D44
	0x033F1860 TBNZ X26, 0x13, 0x33F1790

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xFED000
	006 Move W8, [X21+1103]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {39}
	013 Move TEMP, X20
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfNotEqual {54}
	017 Move X21, 0xD04000
	018 Move X20, 0xD3D000
	019 Move X21, [X21+1976]
	020 Move X20, [X20+1848]
	021 Add X19, X19, 72
	022 Call 0x1C17D44
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X21]
	029 Move X8, [X0+184]
	030 Move X2, [X20]
	031 Move X0, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X1, [X8+32]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call 0x2213A40, X0, X1
	038 Return X0
	039 Move X0, 0xD3D000
	040 Move X0, [X0+1680]
	041 Call 0x1C17CF4
	042 Move X0, 0xD3D000
	043 Move X0, [X0+1848]
	044 Call 0x1C17CF4
	045 Move X0, 0xD04000
	046 Move X0, [X0+1976]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X21+1103], W8
	050 Move TEMP, X20
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfEqual {17}
	054 Move X8, 0xD3D000
	055 Move X8, [X8+1680]
	056 Move X0, [X8]
	057 Call 0x1C17F10
	058 Move X20, X0
	059 Call 0x1C17D44
	060 Move W8, 1
	061 Move X0, X20
	062 Move X1, X31
	063 Move [X20+60], W8
	064 Call Object..ctor, X0
	065 Call 0x1C17D44
	066 Move [X19+72], X20
	067 Move X0, X20
	068 Move X20, [X31+16]
	069 Move X19, [X31+24]
	070 Move X30, [X31+32]
	071 Move X21, [X31+40]
	072 Return X0

Method: System.Threading.CancellationToken get_CancellationToken()

Disassembly:
	0x033EDE8C STR X30, [X31 - 0x20]!
	0x033EDE90 STP X20, X19, [X31 + 0x10]
	0x033EDE94 ADRP X19, 0xFF0000
	0x033EDE98 LDRB W8, [X19 + 0x435]
	0x033EDE9C MOV X20, X0
	0x033EDEA0 TBNZ X8, 0x0, 0x33EDEC4
	0x033EDEA4 ADRP X0, 0xD35000
	0x033EDEA8 LDR X0, [X0 + 0xEA8]
	0x033EDEAC BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+72]
	004 Call 0x1C17D44
	005 Compare X19, 0
	006 JumpIfEqual {8}
	007 Move X0, [X19+40]
	008 Move X0, X31
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0

Method: System.Boolean get_IsCancellationAcknowledged()

Disassembly:
	0x033F1864 LDR X22, [X22 + 0x48]
	0x033F1868 BL 0x1C16D44
	0x033F186C CBZ X22, 0x33F1970
	0x033F1870 LDR X22, [X22 + 0x20]
	0x033F1874 BL 0x1C16D44
	0x033F1878 CBZ X22, 0x33F1974

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, [X0+56]
	004 Call 0x1C17D44
	005 Move W0, W19
	006 ShiftRight W0, 20
	007 And W0, W0, 0xFFFFF
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return X0

Method: System.Boolean get_IsCompleted()

Disassembly:
	0x033EE11C LDR X8, [X0 + 0xB8]
	0x033EE120 LDR X0, [X22]
	0x033EE124 LDR X19, [X8]
	0x033EE128 BL 0x1C16F10
	0x033EE12C LDR X2, [X20]
	0x033EE130 MOV X1, X19
	0x033EE134 MOV X3, X31
	0x033EE138 MOV X20, X0
	0x033EE13C BL 0x2A6B948
	0x033EE140 LDR X8, [X21]
	0x033EE144 LDP X22, X21, [X31 + 0x10]
	0x033EE148 LDR X8, [X8 + 0xB8]
	0x033EE14C STR X20, [X8]
	0x033EE150 LDP X20, X19, [X31 + 0x20]
	0x033EE154 LDR X30, [X31], #0x30
	0x033EE158 RET
	0x033EE15C STR X30, [X31 - 0x20]!
	0x033EE160 STP X20, X19, [X31 + 0x10]
	0x033EE164 ADRP X19, 0xFEF000
	0x033EE168 ADRP X20, 0xD3F000
	0x033EE16C LDRB W8, [X19 + 0x439]
	0x033EE170 LDR X20, [X20 + 0x658]
	0x033EE174 TBNZ X8, 0x0, 0x33EE18C
	0x033EE178 ADRP X0, 0xD3F000
	0x033EE17C LDR X0, [X0 + 0x658]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xFF0000
	006 Move X20, 0xD07000
	007 Move W8, [X21+1104]
	008 Move X20, [X20+1976]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD07000
	015 Move X0, [X0+1976]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1104], W8
	019 Move W19, [X19+56]
	020 Call 0x1C17D44
	021 Move X0, [X20]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move W8, 0x1600000
	027 And W31, W19, W8
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 NotImplemented "Instruction CSET not yet implemented."
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return X0

Method: System.Boolean IsCompletedMethod(System.Int32 flags)

Disassembly:
	0x033F187C MOV X0, X22
	0x033F1880 MOV W1, W31
	0x033F1884 MOV X2, X31
	0x033F1888 BL 0x33F0F3C

ISIL:
	001 Move W8, 0x1600000
	002 And W31, W0, W8
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Boolean get_IsCompletedSuccessfully()

Disassembly:
	0x033EEE64 LDR X0, [X0 + 0x760]
	0x033EEE68 BL 0x1C16D08
	0x033EEE6C BL 0x1C16F10
	0x033EEE70 MOV X19, X0
	0x033EEE74 ADRP X0, 0xD3F000
	0x033EEE78 LDR X0, [X0 + 0x698]
	0x033EEE7C BL 0x1C16D08
	0x033EEE80 MOV X1, X0
	0x033EEE84 MOV X0, X19
	0x033EEE88 MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, [X0+56]
	004 Call 0x1C17D44
	005 Move W8, 0x1600000
	006 And W8, W19, W8
	007 Move W9, 0x1000000
	008 NotImplemented "Instruction CMP not yet implemented."
	009 NotImplemented "Instruction CSET not yet implemented."
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return X0

Method: System.Threading.Tasks.TaskCreationOptions get_CreationOptions()

Disassembly:
	0x033EFF70 B.CS 0x33EFFC8
	0x033EFF74 LDR X20, [X23, X22, LSL #3]
	0x033EFF78 CBZ X20, 0x33EFF9C
	0x033EFF7C LDR W24, [X20 + 0x38]
	0x033EFF80 BL 0x1C16D44

ISIL:
	001 Move [X31-16], X30
	002 Call Task.get_Options, X0
	003 And W0, W0, 0xFFFF00FF
	004 Move X30, [X31+16]
	005 Return X0

Method: System.Threading.WaitHandle System.IAsyncResult.get_AsyncWaitHandle()

Disassembly:
	0x033F188C MOV X1, X0
	0x033F1890 MOV X0, X21
	0x033F1894 MOV W2, W31
	0x033F1898 BL 0x33F0D74
	0x033F189C B 0x33F1790
	0x033F18A0 MOV X22, X31
	0x033F18A4 MOV W25, W31
	0x033F18A8 MOVZ W23, 0x7
	0x033F18AC CBZ X20, 0x33F1910
	0x033F18B0 ADRP X10, 0xD02000
	0x033F18B4 LDR X8, [X20]
	0x033F18B8 LDR X10, [X10 + 0xE00]
	0x033F18BC LDRH W9, [X8 + 0x12E]
	0x033F18C0 LDR X1, [X10]
	0x033F18C4 CBZ X9, 0x33F18E8
	0x033F18C8 LDR X10, [X8 + 0xB0]
	0x033F18CC ADD X10, X10, 0x8
	0x033F18D0 LDUR X11, [X10 - 0x8]
	0x033F18D4 CMP X11, X1
	0x033F18D8 B.EQ 0x33F18F8
	0x033F18DC SUBS X9, X9, 0x1
	0x033F18E0 ADD X10, X10, 0x10
	0x033F18E4 B.NE 0x33F18D0
	0x033F18E8 MOV X0, X20
	0x033F18EC MOV W2, W31
	0x033F18F0 BL 0x1C5C788
	0x033F18F4 B 0x33F1904
	0x033F18F8 LDRSW X9, [X10]
	0x033F18FC ADD X8, X8, X9, 0x4, LSL
	0x033F1900 ADD X0, X8, 0x138
	0x033F1904 LDP X8, X1, [X0]
	0x033F1908 MOV X0, X20
	0x033F190C BLR X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W20, [X0+56]
	005 Move X19, X0
	006 Call 0x1C17D44
	007 Move TEMP, X20
	008 And TEMP, TEMP, 0x40000
	009 Compare TEMP, 0x40000
	010 JumpIfEqual {21}
	011 Move X0, X19
	012 Call Task.get_CompletedEvent, X0
	013 Compare X0, 0
	014 JumpIfEqual {40}
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X1, X31
	018 Move X30, [X31+32]
	019 Call ManualResetEventSlim.get_WaitHandle, X0
	020 Return X0
	021 Move X0, 0xD2C000
	022 Move X0, [X0+1208]
	023 Call 0x1C17D08
	024 Call 0x1C17F10
	025 Move X19, X0
	026 Move X0, 0xD3D000
	027 Move X0, [X0+1856]
	028 Call 0x1C17D08
	029 Move X2, X0
	030 Move X0, X19
	031 Move X1, X31
	032 Move X3, X31
	033 Call ObjectDisposedException..ctor, X0, X1, X2
	034 Move X0, 0xD3D000
	035 Move X0, [X0+1864]
	036 Call 0x1C17D08
	037 Move X1, X0
	038 Move X0, X19
	039 Call 0x1C17DEC
	040 Call 0x1C17F20

Method: System.Object get_AsyncState()

Disassembly:
	0x033F1A08 LDR X10, [X10 + 0xE00]
	0x033F1A0C LDRH W9, [X8 + 0x12E]

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Boolean System.IAsyncResult.get_CompletedSynchronously()

Disassembly:
	0x033F1A10 LDR X1, [X10]
	0x033F1A14 CBZ X9, 0x33F1A38

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Threading.Tasks.TaskScheduler get_ExecutingTaskScheduler()

Disassembly:
	0x033F1A18 LDR X10, [X8 + 0xB0]
	0x033F1A1C ADD X10, X10, 0x8

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Threading.Tasks.TaskFactory get_Factory()

Disassembly:
	0x033F1A20 LDUR X11, [X10 - 0x8]
	0x033F1A24 CMP X11, X1
	0x033F1A28 B.EQ 0x33F1A48
	0x033F1A2C SUBS X9, X9, 0x1
	0x033F1A30 ADD X10, X10, 0x10
	0x033F1A34 B.NE 0x33F1A20
	0x033F1A38 MOV X0, X20
	0x033F1A3C MOV W2, W31
	0x033F1A40 BL 0x1C5C788
	0x033F1A44 B 0x33F1A54
	0x033F1A48 LDRSW X9, [X10]
	0x033F1A4C ADD X8, X8, X9, 0x4, LSL
	0x033F1A50 ADD X0, X8, 0x138
	0x033F1A54 LDP X8, X1, [X0]
	0x033F1A58 MOV X0, X20
	0x033F1A5C BLR X8
	0x033F1A60 CBNZ X22, 0x33F1A88
	0x033F1A64 CMP W21, 0x1
	0x033F1A68 B.NE 0x33F1A80
	0x033F1A6C MOV X0, X23
	0x033F1A70 BL 0x3EB1AD0
	0x033F1A74 LDR X20, [X0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xFED000
	005 Move X19, 0xD04000
	006 Move W8, [X20+1105]
	007 Move X19, [X19+1976]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xD04000
	013 Move X0, [X0+1976]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1105], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8+40]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Threading.Tasks.Task get_CompletedTask()

Disassembly:
	0x033F1A78 BL 0x3EB1AE0
	0x033F1A7C B 0x33F1920
	0x033F1A80 MOV X20, X31
	0x033F1A84 B 0x33F1AA4
	0x033F1A88 MOV X0, X22
	0x033F1A8C BL 0x1C16F18
	0x033F1A90 MOV X21, X1
	0x033F1A94 MOV X23, X0
	0x033F1A98 CBNZ X20, 0x33F1A00
	0x033F1A9C B 0x33F1A60
	0x033F1AA0 MOV X23, X0
	0x033F1AA4 LDRB W8, [X31 + 0xC]
	0x033F1AA8 CBZ W8, 0x33F1AB8
	0x033F1AAC MOV X0, X19
	0x033F1AB0 MOV X1, X31
	0x033F1AB4 BL 0x33E14E4
	0x033F1AB8 CBNZ X20, 0x33F1AC4
	0x033F1ABC MOV X0, X23
	0x033F1AC0 BL 0x1D2C690
	0x033F1AC4 MOV X0, X20
	0x033F1AC8 BL 0x1C16F18
	0x033F1ACC BL 0x1990590

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xFED000
	005 Move X19, 0xD04000
	006 Move W8, [X20+1106]
	007 Move X19, [X19+1976]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xD04000
	013 Move X0, [X0+1976]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1106], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8+48]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Threading.ManualResetEventSlim get_CompletedEvent()

Disassembly:
	0x033F1910 CBNZ X22, 0x33F1984
	0x033F1914 MOV X20, X31
	0x033F1918 MOV X21, X31
	0x033F191C TBZ X25, 0x0, 0x33F1928
	0x033F1920 MOV W23, W31
	0x033F1924 MOV X21, X20
	0x033F1928 LDRB W8, [X31 + 0xC]
	0x033F192C CBZ W8, 0x33F193C
	0x033F1930 MOV X0, X19
	0x033F1934 MOV X1, X31
	0x033F1938 BL 0x33E14E4
	0x033F193C CBNZ X21, 0x33F1978
	0x033F1940 CMP W23, 0x7
	0x033F1944 B.EQ 0x33F194C
	0x033F1948 CBNZ W23, 0x33F1954
	0x033F194C BL 0x1C16D44
	0x033F1950 STR X31, [X24 + 0x40]
	0x033F1954 LDP X20, X19, [X31 + 0x40]
	0x033F1958 LDP X22, X21, [X31 + 0x30]
	0x033F195C LDP X24, X23, [X31 + 0x20]
	0x033F1960 LDP X26, X25, [X31 + 0x10]
	0x033F1964 LDR X30, [X31], #0x50
	0x033F1968 RET
	0x033F196C BL 0x1C16F20
	0x033F1970 BL 0x1C16F20
	0x033F1974 BL 0x1C16F20
	0x033F1978 MOV X0, X21
	0x033F197C BL 0x1C16F18
	0x033F1980 BL 0x1C16F20
	0x033F1984 MOV X0, X22
	0x033F1988 BL 0x1C16F18
	0x033F198C B 0x33F19C8
	0x033F1990 B 0x33F1998
	0x033F1994 B 0x33F1998
	0x033F1998 MOV X21, X1
	0x033F199C MOV X23, X0
	0x033F19A0 B 0x33F1A64
	0x033F19A4 B 0x33F19C8
	0x033F19A8 B 0x33F19C8
	0x033F19AC B 0x33F19C8
	0x033F19B0 B 0x33F19C8
	0x033F19B4 B 0x33F19C8
	0x033F19B8 B 0x33F19C8
	0x033F19BC B 0x33F19C8
	0x033F19C0 B 0x33F19C8
	0x033F19C4 B 0x33F19C8
	0x033F19C8 MOV X23, X0
	0x033F19CC CMP W1, 0x1
	0x033F19D0 B.NE 0x33F19F4
	0x033F19D4 MOV X0, X23
	0x033F19D8 BL 0x3EB1AD0
	0x033F19DC LDR X22, [X0]
	0x033F19E0 BL 0x3EB1AE0
	0x033F19E4 MOV W23, W31
	0x033F19E8 MOVZ W25, 0x1
	0x033F19EC CBNZ X20, 0x33F18B0
	0x033F19F0 B 0x33F1910
	0x033F19F4 MOV X21, X1
	0x033F19F8 MOV X22, X31
	0x033F19FC CBZ X20, 0x33F1A60
	0x033F1A00 ADRP X10, 0xD02000
	0x033F1A04 LDR X8, [X20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xFED000
	007 Move W8, [X19+1107]
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD3C000
	014 Move X0, [X0+3992]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X19+1107], W8
	018 Move X19, [X20+72]
	019 Call 0x1C17D44
	020 Compare X19, 0
	021 JumpIfNotEqual {28}
	022 Move W1, 1
	023 Move X0, X20
	024 Call Task.EnsureContingentPropertiesInitializedCore, X0, X1
	025 Move X19, X0
	026 Compare X0, 0
	027 JumpIfEqual {81}
	028 Add X19, X19, 24
	029 Move X21, [X19]
	030 Call 0x1C17D44
	031 Compare X21, 0
	032 JumpIfNotEqual {72}
	033 Move X0, X20
	034 Call Task.get_IsCompleted, X0
	035 Move X8, 0xD3C000
	036 Move X8, [X8+3992]
	037 Move W22, W0
	038 Move X8, [X8]
	039 Move X0, X8
	040 Call 0x1C17F10
	041 And W1, W22, 1
	042 Move X2, X31
	043 Move X21, X0
	044 Call ManualResetEventSlim..ctor, X0, X1
	045 Call 0x1C17D44
	046 Move X0, X19
	047 Move X1, X21
	048 Move X2, X31
	049 Call 0x1C25138
	050 Compare X0, 0
	051 JumpIfEqual {57}
	052 Compare X21, 0
	053 JumpIfEqual {81}
	054 Move X0, X21
	055 Move X1, X31
	056 Call ManualResetEventSlim.Dispose, X0
	057 Move TEMP, X22
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfEqual {72}
	061 Move X0, X20
	062 Call Task.get_IsCompleted, X0
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfNotEqual {72}
	067 Compare X21, 0
	068 JumpIfEqual {81}
	069 Move X0, X21
	070 Move X1, X31
	071 Call ManualResetEventSlim.Set, X0
	072 Move X19, [X19]
	073 Call 0x1C17D44
	074 Move X0, X19
	075 Move X20, [X31+32]
	076 Move X19, [X31+40]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X30, [X31+48]
	080 Return X0
	081 Call 0x1C17F20

Method: System.Boolean get_ExceptionRecorded()

Disassembly:
	0x033F1AD0 STP X30, X19, [X31 - 0x10]!
	0x033F1AD4 LDR X19, [X0 + 0x18]
	0x033F1AD8 BL 0x1C16D44
	0x033F1ADC CBZ X19, 0x33F1AF0
	0x033F1AE0 MOV X0, X19
	0x033F1AE4 MOV X1, X31
	0x033F1AE8 LDP X30, X19, [X31], #0x10
	0x033F1AEC B 0x33DE6C8
	0x033F1AF0 LDP X30, X19, [X31], #0x10
	0x033F1AF4 RET
	0x033F1AF8 SUB X31, X31, 0x40
	0x033F1AFC STR X30, [X31 + 0x20]
	0x033F1B00 STP X20, X19, [X31 + 0x30]
	0x033F1B04 ADRP X20, 0xFEC000
	0x033F1B08 LDRB W8, [X20 + 0x486]
	0x033F1B0C MOV X19, X0
	0x033F1B10 TBNZ X8, 0x0, 0x33F1B28
	0x033F1B14 ADRP X0, 0xD3C000
	0x033F1B18 LDR X0, [X0 + 0x20]
	0x033F1B1C BL 0x1C16CF4
	0x033F1B20 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, [X0+72]
	005 Call 0x1C17D44
	006 Compare X19, 0
	007 JumpIfEqual {20}
	008 Move X20, [X19+32]
	009 Call 0x1C17D44
	010 Compare X20, 0
	011 JumpIfEqual {20}
	012 Move X19, [X19+32]
	013 Call 0x1C17D44
	014 Compare X19, 0
	015 JumpIfEqual {25}
	016 Move X19, [X19+24]
	017 Call 0x1C17D44
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction CSET not yet implemented."
	020 Move W0, W31
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0
	025 Call 0x1C17F20

Method: System.Boolean get_IsFaulted()

Disassembly:
	0x033F1514 BL 0x1C16DFC
	0x033F1518 LDR X0, [X20]
	0x033F151C LDR W8, [X0 + 0xE0]
	0x033F1520 CBNZ W8, 0x33F1528
	0x033F1524 BL 0x1C16DFC
	0x033F1528 ADRP X21, 0xFE8000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, [X0+56]
	004 Call 0x1C17D44
	005 Move W0, W19
	006 ShiftRight W0, 21
	007 And W0, W0, 0x1FFFFF
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return X0

Method: System.Threading.ExecutionContext get_CapturedContext()

Disassembly:
	0x033F1B40 LDR X9, [X0]
	0x033F1B44 LDR X1, [X8]
	0x033F1B48 LDR X8, [X9 + 0x40]
	0x033F1B4C LDR X9, [X1 + 0x40]
	0x033F1B50 CMP X8, X9
	0x033F1B54 B.NE 0x33F1B8C
	0x033F1B58 BL 0x1C16E08
	0x033F1B5C LDR X8, [X0 + 0x10]
	0x033F1B60 LDR V0, [X0]
	0x033F1B64 STR X8, [X31 + 0x10]
	0x033F1B68 STR V0, [X31]
	0x033F1B6C ADD X0, X31, 0x0
	0x033F1B70 MOV X1, X31
	0x033F1B74 BL 0x33DF6F0
	0x033F1B78 STR X31, [X19 + 0x30]
	0x033F1B7C LDP X20, X19, [X31 + 0x30]
	0x033F1B80 LDR X30, [X31 + 0x20]
	0x033F1B84 ADD X31, X31, 0x40
	0x033F1B88 RET
	0x033F1B8C BL 0x1C171E0
	0x033F1B90 CMP W1, 0x1
	0x033F1B94 MOV X20, X0
	0x033F1B98 B.NE 0x33F1BF4
	0x033F1B9C MOV X0, X20
	0x033F1BA0 BL 0x3EB1AD0
	0x033F1BA4 MOV X20, X0
	0x033F1BA8 ADRP X0, 0xD2B000
	0x033F1BAC LDR X0, [X0 + 0x4B8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xFED000
	005 Move W8, [X20+1108]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xD2B000
	012 Move X0, [X0+1408]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1108], W8
	016 Move X19, [X19+72]
	017 Call 0x1C17D44
	018 Compare X19, 0
	019 JumpIfEqual {23}
	020 Move X0, [X19+16]
	021 Compare X0, 0
	022 JumpIfNotEqual {33}
	023 Move X19, 0xD2B000
	024 Move X19, [X19+1408]
	025 Move X0, [X19]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {31}
	029 Call 0x1C17DFC
	030 Move X0, [X19]
	031 Move X8, [X0+184]
	032 Move X0, [X8+8]
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0

Method: System.Void set_CapturedContext(System.Threading.ExecutionContext value)

Disassembly:
	0x033F02C0 BL 0x1C16D44
	0x033F02C4 CBZ X19, 0x33F02D4
	0x033F02C8 LDR X19, [X19 + 0x20]
	0x033F02CC BL 0x1C16D44
	0x033F02D0 CBNZ X19, 0x33F02F8
	0x033F02D4 BL 0x1C16F20
	0x033F02D8 MOVZ W0, 0x8
	0x033F02DC BL 0x3EB1AF0
	0x033F02E0 LDR X8, [X20]
	0x033F02E4 STR X8, [X0]
	0x033F02E8 ADRP X1, 0xAC4000
	0x033F02EC ADD X1, X1, 0xE58
	0x033F02F0 MOV X2, X31
	0x033F02F4 BL 0x3EB1B00
	0x033F02F8 MOV X0, X19
	0x033F02FC MOV W1, W31
	0x033F0300 BL 0x33F0CF8
	0x033F0304 ADRP X0, 0xD3D000
	0x033F0308 LDR X0, [X0 + 0x728]
	0x033F030C BL 0x1C16D08
	0x033F0310 MOV X1, X0
	0x033F0314 MOV X0, X20
	0x033F0318 BL 0x1C16DEC
	0x033F031C MOV X20, X0
	0x033F0320 BL 0x3EB1AE0
	0x033F0324 MOV X0, X20
	0x033F0328 BL 0x1D2C690
	0x033F032C BL 0x1990590
	0x033F0330 STR X30, [X31 - 0x20]!
	0x033F0334 STP X20, X19, [X31 + 0x10]
	0x033F0338 ADRP X20, 0xFED000
	0x033F033C ADRP X19, 0xD04000
	0x033F0340 LDRB W8, [X20 + 0x44B]
	0x033F0344 LDR X19, [X19 + 0x7B8]
	0x033F0348 TBNZ X8, 0x0, 0x33F0360
	0x033F034C ADRP X0, 0xD04000
	0x033F0350 LDR X0, [X0 + 0x7B8]
	0x033F0354 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xFEE000
	007 Move X21, 0xD2C000
	008 Move W8, [X22+1109]
	009 Move X21, [X21+1408]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD2C000
	017 Move X0, [X0+1408]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1109], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X21]
	027 Move X8, [X0+184]
	028 Move X8, [X8+8]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X21, [X20+72]
	031 Call 0x1C17D44
	032 Compare X21, 0
	033 JumpIfNotEqual {40}
	034 Move X0, X20
	035 Move W1, W31
	036 Call Task.EnsureContingentPropertiesInitializedCore, X0, X1
	037 Move X21, X0
	038 Compare X0, 0
	039 JumpIfEqual {47}
	040 Move [X21+16], X19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Return 
	047 Call 0x1C17F20

Method: System.Void Dispose()

Disassembly:
	0x033F1BB0 BL 0x1C16D08
	0x033F1BB4 LDR X8, [X20]
	0x033F1BB8 LDR X1, [X8]
	0x033F1BBC BL 0x1C17270
	0x033F1BC0 TBZ X0, 0x0, 0x33F1BCC
	0x033F1BC4 BL 0x3EB1AE0
	0x033F1BC8 B 0x33F1B78
	0x033F1BCC MOVZ W0, 0x8
	0x033F1BD0 BL 0x3EB1AF0
	0x033F1BD4 LDR X8, [X20]
	0x033F1BD8 STR X8, [X0]
	0x033F1BDC ADRP X1, 0xAC3000
	0x033F1BE0 ADD X1, X1, 0xE58
	0x033F1BE4 MOV X2, X31
	0x033F1BE8 BL 0x3EB1B00
	0x033F1BEC MOV X20, X0
	0x033F1BF0 BL 0x3EB1AE0
	0x033F1BF4 MOV X0, X20
	0x033F1BF8 BL 0x1D2C690
	0x033F1BFC BL 0x1990590
	0x033F1C00 STR X30, [X31 - 0x20]!
	0x033F1C04 STP X20, X19, [X31 + 0x10]
	0x033F1C08 MOV X19, X0
	0x033F1C0C LDR X0, [X0 + 0x30]
	0x033F1C10 STR X31, [X19 + 0x18]
	0x033F1C14 CBZ X0, 0x33F1C3C
	0x033F1C18 BL 0x33EF398

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xFED000
	006 Move X20, 0xD0A000
	007 Move W8, [X21+1110]
	008 Move X20, [X20+3088]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD0A000
	015 Move X0, [X0+3088]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1110], W8
	019 Move X8, [X19]
	020 Move W1, 1
	021 Move X0, X19
	022 Move X9, [X8+504]
	023 Move X2, [X8+512]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X1, X31
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call GC.SuppressFinalize, X0
	037 Return 

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x033F1C1C TBNZ X0, 0x3, 0x33F1C3C
	0x033F1C20 LDR W20, [X19 + 0x38]
	0x033F1C24 BL 0x1C16D44
	0x033F1C28 TBZ X20, 0x2, 0x33F1C3C
	0x033F1C2C LDR X0, [X19 + 0x30]
	0x033F1C30 CBZ X0, 0x33F1C4C
	0x033F1C34 MOV X1, X19
	0x033F1C38 BL 0x33F1C50
	0x033F1C3C MOV X0, X19
	0x033F1C40 LDP X20, X19, [X31 + 0x10]
	0x033F1C44 LDR X30, [X31], #0x20
	0x033F1C48 B 0x33F1E04
	0x033F1C4C BL 0x1C16F20
	0x033F1C50 SUB X31, X31, 0x40
	0x033F1C54 STP X30, X23, [X31 + 0x10]
	0x033F1C58 STP X22, X21, [X31 + 0x20]
	0x033F1C5C STP X20, X19, [X31 + 0x30]
	0x033F1C60 ADRP X21, 0xFEC000
	0x033F1C64 LDRB W8, [X21 + 0x45E]
	0x033F1C68 MOV X20, X1
	0x033F1C6C MOV X19, X0
	0x033F1C70 TBNZ X8, 0x0, 0x33F1CA0
	0x033F1C74 ADRP X0, 0xD3C000
	0x033F1C78 LDR X0, [X0 + 0x7A8]
	0x033F1C7C BL 0x1C16CF4
	0x033F1C80 ADRP X0, 0xD3C000
	0x033F1C84 LDR X0, [X0 + 0x7B0]
	0x033F1C88 BL 0x1C16CF4
	0x033F1C8C ADRP X0, 0xD3C000
	0x033F1C90 LDR X0, [X0 + 0x7B8]
	0x033F1C94 BL 0x1C16CF4
	0x033F1C98 MOVZ W8, 0x1
	0x033F1C9C STRB W8, [X21 + 0x45E]
	0x033F1CA0 STRB W31, [X31 + 0xC]
	0x033F1CA4 LDR X23, [X19 + 0x48]
	0x033F1CA8 BL 0x1C16D44
	0x033F1CAC CBZ X20, 0x33F1DA4
	0x033F1CB0 LDR W21, [X20 + 0x38]
	0x033F1CB4 BL 0x1C16D44
	0x033F1CB8 TBZ X21, 0x15, 0x33F1D70
	0x033F1CBC LDR W21, [X20 + 0x38]
	0x033F1CC0 BL 0x1C16D44
	0x033F1CC4 TBNZ X21, 0x13, 0x33F1D70
	0x033F1CC8 CBZ X23, 0x33F1DA4
	0x033F1CCC MOV X21, X23
	0x033F1CD0 LDR X22, [X21 + 0x40]!
	0x033F1CD4 BL 0x1C16D44
	0x033F1CD8 CBNZ X22, 0x33F1D14
	0x033F1CDC BL 0x1C16D44
	0x033F1CE0 ADRP X8, 0xD3C000
	0x033F1CE4 LDR X8, [X8 + 0x7B0]
	0x033F1CE8 LDR X0, [X8]
	0x033F1CEC BL 0x1C16F10
	0x033F1CF0 ADRP X8, 0xD3C000
	0x033F1CF4 LDR X8, [X8 + 0x7A8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Move TEMP, X1
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfNotEqual {46}
	010 Move X0, X19
	011 Call Task.get_Options, X0
	012 Move TEMP, X0
	013 And TEMP, TEMP, 0x4000
	014 Compare TEMP, 0x4000
	015 JumpIfEqual {51}
	016 Move X0, X19
	017 Call Task.get_IsCompleted, X0
	018 Move TEMP, X0
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfNotEqual {56}
	022 Call 0x1C17D44
	023 Move X21, [X19+72]
	024 Call 0x1C17D44
	025 Compare X21, 0
	026 JumpIfEqual {46}
	027 Move X20, [X21+24]
	028 Call 0x1C17D44
	029 Compare X20, 0
	030 JumpIfEqual {46}
	031 Call 0x1C17D44
	032 Move X0, X20
	033 Move X1, X31
	034 Move [X21+24], X31
	035 Call ManualResetEventSlim.get_IsSet, X0
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {43}
	040 Move X0, X20
	041 Move X1, X31
	042 Call ManualResetEventSlim.Set, X0
	043 Move X0, X20
	044 Move X1, X31
	045 Call ManualResetEventSlim.Dispose, X0
	046 Move W20, [X19+56]
	047 Call 0x1C17D44
	048 Call 0x1C17D44
	049 Or W8, W20, 0x40000
	050 Move [X19+56], W8
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Return 
	056 Move X0, 0xD03000
	057 Move X0, [X0+1456]
	058 Call 0x1C17D08
	059 Call 0x1C17F10
	060 Move X19, X0
	061 Move X0, 0xD3D000
	062 Move X0, [X0+1872]
	063 Call 0x1C17D08
	064 Move X1, X0
	065 Move X0, X19
	066 Move X2, X31
	067 Call InvalidOperationException..ctor, X0, X1
	068 Move X0, 0xD3D000
	069 Move X0, [X0+1880]
	070 Call 0x1C17D08
	071 Move X1, X0
	072 Move X0, X19
	073 Call 0x1C17DEC

Method: System.Void ScheduleAndStart(System.Boolean needsProtection)

Disassembly:
	0x033F1124 MOVZ W8, 0x1
	0x033F1128 STRB W8, [X20 + 0x45A]
	0x033F112C LDR W20, [X19 + 0x38]
	0x033F1130 BL 0x1C16D44
	0x033F1134 TBZ X20, 0x15, 0x33F116C
	0x033F1138 MOV X0, X19
	0x033F113C BL 0x33F0AD0
	0x033F1140 TBZ X0, 0x0, 0x33F116C
	0x033F1144 LDR X19, [X19 + 0x48]
	0x033F1148 BL 0x1C16D44
	0x033F114C CBZ X19, 0x33F11FC
	0x033F1150 LDR X19, [X19 + 0x20]
	0x033F1154 BL 0x1C16D44
	0x033F1158 CBZ X19, 0x33F11FC
	0x033F115C MOV X0, X19
	0x033F1160 LDP X20, X19, [X31 + 0x10]
	0x033F1164 LDP X30, X21, [X31], #0x20
	0x033F1168 B 0x33F1200
	0x033F116C ADRP X8, 0xD3C000
	0x033F1170 LDR X8, [X8 + 0x778]
	0x033F1174 LDR X19, [X8]
	0x033F1178 LDR X8, [X19 + 0x38]
	0x033F117C CBNZ X8, 0x33F118C
	0x033F1180 MOV X0, X19
	0x033F1184 BL 0x1C5C6E0
	0x033F1188 LDR X8, [X19 + 0x38]
	0x033F118C LDR X0, [X8 + 0x10]
	0x033F1190 LDRB W8, [X0 + 0x135]
	0x033F1194 TBNZ X8, 0x0, 0x33F119C
	0x033F1198 BL 0x1C5C684
	0x033F119C LDR W8, [X0 + 0xE0]
	0x033F11A0 CBNZ W8, 0x33F11A8
	0x033F11A4 BL 0x1C16DFC
	0x033F11A8 LDR X8, [X19 + 0x38]
	0x033F11AC ADRP X21, 0xD3C000
	0x033F11B0 ADRP X20, 0xD3C000
	0x033F11B4 LDR X0, [X8 + 0x10]
	0x033F11B8 LDRB W8, [X0 + 0x135]
	0x033F11BC LDR X21, [X21 + 0x788]
	0x033F11C0 LDR X20, [X20 + 0x780]
	0x033F11C4 TBNZ X8, 0x0, 0x33F11CC
	0x033F11C8 BL 0x1C5C684
	0x033F11CC LDR X8, [X0 + 0xB8]
	0x033F11D0 LDR X0, [X21]
	0x033F11D4 LDR X19, [X8]
	0x033F11D8 BL 0x1C16F10
	0x033F11DC LDR X2, [X20]
	0x033F11E0 MOV X1, X19
	0x033F11E4 MOV X20, X0
	0x033F11E8 BL 0x2551884
	0x033F11EC MOV X0, X20
	0x033F11F0 LDP X20, X19, [X31 + 0x10]
	0x033F11F4 LDP X30, X21, [X31], #0x20
	0x033F11F8 RET
	0x033F11FC BL 0x1C16F20
	0x033F1200 STR X30, [X31 - 0x30]!
	0x033F1204 STP X22, X21, [X31 + 0x10]
	0x033F1208 STP X20, X19, [X31 + 0x20]
	0x033F120C ADRP X20, 0xFEC000
	0x033F1210 ADRP X22, 0xD3C000
	0x033F1214 ADRP X21, 0xD3C000
	0x033F1218 LDRB W8, [X20 + 0x4AE]
	0x033F121C LDR X22, [X22 + 0x788]
	0x033F1220 LDR X21, [X21 + 0x780]
	0x033F1224 MOV X19, X0
	0x033F1228 TBNZ X8, 0x0, 0x33F124C
	0x033F122C ADRP X0, 0xD3C000
	0x033F1230 LDR X0, [X0 + 0x780]
	0x033F1234 BL 0x1C16CF4
	0x033F1238 ADRP X0, 0xD3C000
	0x033F123C LDR X0, [X0 + 0x788]
	0x033F1240 BL 0x1C16CF4
	0x033F1244 MOVZ W8, 0x1
	0x033F1248 STRB W8, [X20 + 0x4AE]
	0x033F124C LDR X20, [X19 + 0x18]
	0x033F1250 BL 0x1C16D44
	0x033F1254 MOV X0, X19
	0x033F1258 MOV W1, W31
	0x033F125C BL 0x33F0CF8
	0x033F1260 LDR X0, [X22]
	0x033F1264 BL 0x1C16F10
	0x033F1268 LDR X2, [X21]
	0x033F126C MOV X1, X20
	0x033F1270 MOV X19, X0
	0x033F1274 BL 0x2551884
	0x033F1278 MOV X0, X19
	0x033F127C LDP X20, X19, [X31 + 0x20]
	0x033F1280 LDP X22, X21, [X31 + 0x10]
	0x033F1284 LDR X30, [X31], #0x30
	0x033F1288 RET
	0x033F128C STP X30, X19, [X31 - 0x10]!
	0x033F1290 LDR X19, [X0 + 0x48]
	0x033F1294 BL 0x1C16D44
	0x033F1298 CBZ X19, 0x33F12B0
	0x033F129C LDR X19, [X19 + 0x20]
	0x033F12A0 BL 0x1C16D44
	0x033F12A4 CBZ X19, 0x33F12B0
	0x033F12A8 LDR X0, [X19 + 0x20]
	0x033F12AC B 0x33F12B4
	0x033F12B0 MOV X0, X31
	0x033F12B4 LDP X30, X19, [X31], #0x10
	0x033F12B8 RET
	0x033F12BC STR X30, [X31 - 0x20]!
	0x033F12C0 STP X20, X19, [X31 + 0x10]
	0x033F12C4 AND W1, W1, 0x1
	0x033F12C8 MOV X19, X0
	0x033F12CC BL 0x33F052C
	0x033F12D0 CBNZ X0, 0x33F12E0
	0x033F12D4 LDP X20, X19, [X31 + 0x10]
	0x033F12D8 LDR X30, [X31], #0x20
	0x033F12DC RET
	0x033F12E0 MOV X20, X0
	0x033F12E4 MOV X0, X19
	0x033F12E8 BL 0x33F1304
	0x033F12EC ADRP X0, 0xD3C000
	0x033F12F0 LDR X0, [X0 + 0x790]
	0x033F12F4 BL 0x1C16D08
	0x033F12F8 MOV X1, X0
	0x033F12FC MOV X0, X20
	0x033F1300 BL 0x1C16DEC
	0x033F1304 STP X30, X21, [X31 - 0x20]!
	0x033F1308 STP X20, X19, [X31 + 0x10]
	0x033F130C ADRP X20, 0xFEC000
	0x033F1310 LDRB W8, [X20 + 0x45B]
	0x033F1314 MOV X19, X0
	0x033F1318 TBNZ X8, 0x0, 0x33F1330
	0x033F131C ADRP X0, 0xD03000
	0x033F1320 LDR X0, [X0 + 0x7B8]
	0x033F1324 BL 0x1C16CF4
	0x033F1328 MOVZ W8, 0x1
	0x033F132C STRB W8, [X20 + 0x45B]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xFED000
	006 Move W8, [X21+1111]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xD2B000
	014 Move X0, [X0+1832]
	015 Call 0x1C17CF4
	016 Move X0, 0xD3D000
	017 Move X0, [X0+1824]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1111], W8
	021 Move TEMP, X20
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {33}
	025 Move W1, 0x10000
	026 Move W2, 0x410000
	027 Move X0, X19
	028 Call Task.AtomicStateUpdate, X0, X1, X2
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {38}
	033 Move W20, [X19+56]
	034 Call 0x1C17D44
	035 Call 0x1C17D44
	036 Or W8, W20, 0x10000
	037 Move [X19+56], W8
	038 Move X20, 0xD2B000
	039 Move X20, [X20+1832]
	040 Move X0, [X20]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X21, 0xFE9000
	046 Move W8, [X21+2088]
	047 Compare W8, 0
	048 JumpIfNotEqual {57}
	049 Move X0, 0xD2B000
	050 Move X0, [X0+1832]
	051 Call 0x1C17CF4
	052 Move X0, 0xD04000
	053 Move X0, [X0+1976]
	054 Call 0x1C17CF4
	055 Move W8, 1
	056 Move [X21+2088], W8
	057 Move X21, 0xD04000
	058 Move X21, [X21+1976]
	059 Move X0, [X21]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {65}
	063 Call 0x1C17DFC
	064 Move X0, [X21]
	065 Move X8, [X0+184]
	066 Move W8, [X8+16]
	067 Compare W8, 0
	068 JumpIfEqual {76}
	069 Move X0, [X20]
	070 Move W8, [X0+224]
	071 Compare W8, 0
	072 JumpIfNotEqual {74}
	073 Call 0x1C17DFC
	074 Move X0, X19
	075 Call DebuggerSupport.AddToActiveTasksNonInlined, X0
	076 Move X0, [X19+40]
	077 Compare X0, 0
	078 JumpIfEqual {89}
	079 Move X8, [X0]
	080 Move X9, [X8+376]
	081 Move X2, [X8+384]
	082 Move X1, X19
	083 NotImplemented "Instruction BLR not yet implemented."
	084 Move X20, [X31+16]
	085 Move X19, [X31+24]
	086 Move X30, [X31+32]
	087 Move X21, [X31+40]
	088 Return 
	089 Call 0x1C17F20
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move X20, X0
	092 Move X0, X20
	093 Call 0x3EB2AD0
	094 Move X20, X0
	095 Move X0, 0xD03000
	096 Move X0, [X0+2000]
	097 Call 0x1C17D08
	098 Move X8, [X20]
	099 Move X1, [X8]
	100 Call 0x1C18270
	101 Move TEMP, X0
	102 And TEMP, TEMP, 1
	103 Compare TEMP, 1
	104 JumpIfNotEqual {136}
	105 Move X21, [X20]
	106 Call 0x3EB2AE0
	107 Move X0, 0xD3D000
	108 Move X0, [X0+1744]
	109 Call 0x1C17D08
	110 Call 0x1C17F10
	111 Move X1, X21
	112 Move X20, X0
	113 Call TaskSchedulerException..ctor, X0, X1
	114 Move X0, X19
	115 Move X1, X20
	116 Move W2, W31
	117 Call Task.AddException, X0, X1, X2
	118 Move X0, X19
	119 Move W1, W31
	120 Call Task.Finish, X0, X1
	121 Move X0, X19
	122 Call Task.get_Options, X0
	123 Move TEMP, X0
	124 And TEMP, TEMP, 512
	125 Compare TEMP, 512
	126 JumpIfEqual {147}
	127 Move X19, [X19+72]
	128 Call 0x1C17D44
	129 Compare X19, 0
	130 JumpIfEqual {135}
	131 Move X19, [X19+32]
	132 Call 0x1C17D44
	133 Compare X19, 0
	134 JumpIfNotEqual {144}
	135 Call 0x1C17F20
	136 Move W0, 8
	137 Call 0x3EB2AF0
	138 Move X8, [X20]
	139 Move [X0], X8
	140 Move X1, 0xAC4000
	141 Add X1, X1, 3672
	142 Move X2, X31
	143 Call 0x3EB2B00
	144 Move X0, X19
	145 Move W1, W31
	146 Call TaskExceptionHolder.MarkAsHandled, X0, X1
	147 Move X0, 0xD3D000
	148 Move X0, [X0+1832]
	149 Call 0x1C17D08
	150 Move X1, X0
	151 Move X0, X20
	152 Call 0x1C17DEC
	153 Move X20, X0
	154 Call 0x3EB2AE0
	155 Move X0, X20
	156 Call 0x1D2D690
	157 Call 0x1991590

Method: System.Void AddException(System.Object exceptionObject)

Disassembly:
	0x033F0B60 BL 0x1C16CF4
	0x033F0B64 MOVZ W8, 0x1

ISIL:
	001 Move W2, W31
	002 Call Task.AddException, X0, X1, X2
	003 Return 

Method: System.Void AddException(System.Object exceptionObject, System.Boolean representsCancellation)

Disassembly:
	0x033F1D74 ADD X20, X23, 0x3C
	0x033F1D78 BL 0x1C16D44
	0x033F1D7C MOV X0, X20
	0x033F1D80 BL 0x1C242B0
	0x033F1D84 CBNZ W0, 0x33F1D90
	0x033F1D88 MOV X0, X19
	0x033F1D8C BL 0x33F1408
	0x033F1D90 LDP X20, X19, [X31 + 0x30]
	0x033F1D94 LDP X22, X21, [X31 + 0x20]
	0x033F1D98 LDP X30, X23, [X31 + 0x10]
	0x033F1D9C ADD X31, X31, 0x40
	0x033F1DA0 RET
	0x033F1DA4 BL 0x1C16F20
	0x033F1DA8 B 0x33F1DAC
	0x033F1DAC MOV X22, X0
	0x033F1DB0 CMP W1, 0x1
	0x033F1DB4 B.NE 0x33F1DCC
	0x033F1DB8 MOV X0, X22
	0x033F1DBC BL 0x3EB1AD0
	0x033F1DC0 LDR X20, [X0]
	0x033F1DC4 BL 0x3EB1AE0
	0x033F1DC8 B 0x33F1D50
	0x033F1DCC MOV X20, X31
	0x033F1DD0 B 0x33F1DD8
	0x033F1DD4 MOV X22, X0
	0x033F1DD8 LDRB W8, [X31 + 0xC]
	0x033F1DDC CBZ W8, 0x33F1DEC
	0x033F1DE0 MOV X0, X21
	0x033F1DE4 MOV X1, X31
	0x033F1DE8 BL 0x33E14E4
	0x033F1DEC CBNZ X20, 0x33F1DF8
	0x033F1DF0 MOV X0, X22
	0x033F1DF4 BL 0x1D2C690
	0x033F1DF8 MOV X0, X20
	0x033F1DFC BL 0x1C16F18
	0x033F1E00 BL 0x1990590
	0x033F1E04 SUB X31, X31, 0x80
	0x033F1E08 STP X29, X30, [X31 + 0x20]
	0x033F1E0C STP X28, X27, [X31 + 0x30]
	0x033F1E10 STP X26, X25, [X31 + 0x40]
	0x033F1E14 STP X24, X23, [X31 + 0x50]
	0x033F1E18 STP X22, X21, [X31 + 0x60]
	0x033F1E1C STP X20, X19, [X31 + 0x70]
	0x033F1E20 ADRP X20, 0xFEC000
	0x033F1E24 ADRP X27, 0xD03000
	0x033F1E28 LDRB W8, [X20 + 0x46B]
	0x033F1E2C LDR X27, [X27 + 0x7B8]
	0x033F1E30 MOV X19, X0
	0x033F1E34 TBNZ X8, 0x0, 0x33F1EC4
	0x033F1E38 ADRP X0, 0xD03000
	0x033F1E3C LDR X0, [X0 + 0xE70]
	0x033F1E40 BL 0x1C16CF4
	0x033F1E44 ADRP X0, 0xD3C000
	0x033F1E48 LDR X0, [X0 + 0x7C0]
	0x033F1E4C BL 0x1C16CF4
	0x033F1E50 ADRP X0, 0xD2A000
	0x033F1E54 LDR X0, [X0 + 0x728]
	0x033F1E58 BL 0x1C16CF4
	0x033F1E5C ADRP X0, 0xD3C000
	0x033F1E60 LDR X0, [X0 + 0x7C8]
	0x033F1E64 BL 0x1C16CF4
	0x033F1E68 ADRP X0, 0xD3C000
	0x033F1E6C LDR X0, [X0 + 0x6F8]
	0x033F1E70 BL 0x1C16CF4
	0x033F1E74 ADRP X0, 0xD3C000
	0x033F1E78 LDR X0, [X0 + 0x7D0]
	0x033F1E7C BL 0x1C16CF4
	0x033F1E80 ADRP X0, 0xD3C000
	0x033F1E84 LDR X0, [X0 + 0x7D8]
	0x033F1E88 BL 0x1C16CF4
	0x033F1E8C ADRP X0, 0xD3C000
	0x033F1E90 LDR X0, [X0 + 0x708]
	0x033F1E94 BL 0x1C16CF4
	0x033F1E98 ADRP X0, 0xD3C000
	0x033F1E9C LDR X0, [X0 + 0x7E0]
	0x033F1EA0 BL 0x1C16CF4
	0x033F1EA4 ADRP X0, 0xD3C000
	0x033F1EA8 LDR X0, [X0 + 0x7E8]
	0x033F1EAC BL 0x1C16CF4
	0x033F1EB0 ADRP X0, 0xD03000
	0x033F1EB4 LDR X0, [X0 + 0x7B8]
	0x033F1EB8 BL 0x1C16CF4
	0x033F1EBC MOVZ W8, 0x1
	0x033F1EC0 STRB W8, [X20 + 0x46B]
	0x033F1EC4 STRB W31, [X31 + 0xC]
	0x033F1EC8 ADD X20, X19, 0x40
	0x033F1ECC BL 0x1C16D44
	0x033F1ED0 LDR X0, [X27]
	0x033F1ED4 LDR W8, [X0 + 0xE0]
	0x033F1ED8 CBNZ W8, 0x33F1EE4
	0x033F1EDC BL 0x1C16DFC
	0x033F1EE0 LDR X0, [X27]
	0x033F1EE4 LDR X8, [X0 + 0xB8]
	0x033F1EE8 ADD X1, X31, 0x18
	0x033F1EEC ADD X2, X31, 0x10
	0x033F1EF0 MOV X0, X20
	0x033F1EF4 LDR X8, [X8 + 0x8]
	0x033F1EF8 STP X31, X8, [X31 + 0x10]
	0x033F1EFC BL 0x1C24318
	0x033F1F00 LDR X20, [X31 + 0x10]
	0x033F1F04 CBZ X20, 0x33F2438

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, 0xFED000
	009 Move W8, [X19+1112]
	010 Move W21, W2
	011 Move X20, X1
	012 Move X23, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xD3D000
	018 Move X0, [X0+1888]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X19+1112], W8
	022 Move [X31+12], W31
	023 Move X19, [X23+72]
	024 Call 0x1C17D44
	025 Compare X19, 0
	026 JumpIfNotEqual {33}
	027 Move W1, 1
	028 Move X0, X23
	029 Call Task.EnsureContingentPropertiesInitializedCore, X0, X1
	030 Move X19, X0
	031 Compare X0, 0
	032 JumpIfEqual {96}
	033 Move X22, X19
	034 Add X22, X22, 32
	035 Move X24, [X22]
	036 Call 0x1C17D44
	037 Compare X24, 0
	038 JumpIfNotEqual {57}
	039 Move X8, 0xD3D000
	040 Move X8, [X8+1888]
	041 Move X0, [X8]
	042 Call 0x1C17F10
	043 Move X1, X31
	044 Move X24, X0
	045 Call Object..ctor, X0
	046 Move [X24+16], X23
	047 Call 0x1C17D44
	048 Move X0, X22
	049 Move X1, X24
	050 Move X2, X31
	051 Call 0x1C25138
	052 Compare X0, 0
	053 JumpIfEqual {57}
	054 Move X0, X24
	055 Move W1, W31
	056 Call TaskExceptionHolder.MarkAsHandled, X0, X1
	057 Move [X31+12], W31
	058 Add X1, X31, 12
	059 Move X0, X19
	060 Move X2, X31
	061 Call Monitor.Enter, X0, X1
	062 Move X22, [X22]
	063 Call 0x1C17D44
	064 Compare X22, 0
	065 JumpIfEqual {95}
	066 Move TEMP, X21
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfNotEqual {73}
	070 Move X0, X22
	071 Move X1, X20
	072 Call TaskExceptionHolder.SetCancellationException, X0, X1
	073 Move X0, X22
	074 Move X1, X20
	075 Call TaskExceptionHolder.AddFaultException, X0, X1
	076 Move X20, X31
	077 Move W8, [X31+12]
	078 Compare W8, 0
	079 JumpIfEqual {83}
	080 Move X0, X19
	081 Move X1, X31
	082 Call Monitor.Exit, X0
	083 Compare X20, 0
	084 JumpIfNotEqual {93}
	085 Move X20, [X31+48]
	086 Move X19, [X31+56]
	087 Move X22, [X31+32]
	088 Move X21, [X31+40]
	089 Move X24, [X31+16]
	090 Move X23, [X31+24]
	091 Move X30, [X31+64]
	092 Return 
	093 Move X0, X20
	094 Call 0x1C17F18
	095 Call 0x1C17F20
	096 Call 0x1C17F20
	097 Move X21, X0
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move X0, X21
	100 Call 0x3EB2AD0
	101 Move X20, [X0]
	102 Call 0x3EB2AE0
	103 Move X20, X31
	104 Move X21, X0
	105 Move W8, [X31+12]
	106 Compare W8, 0
	107 JumpIfEqual {111}
	108 Move X0, X19
	109 Move X1, X31
	110 Call Monitor.Exit, X0
	111 Compare X20, 0
	112 JumpIfNotEqual {115}
	113 Move X0, X21
	114 Call 0x1D2D690
	115 Move X0, X20
	116 Call 0x1C17F18
	117 Call 0x1991590

Method: System.AggregateException GetExceptions(System.Boolean includeTaskCanceledExceptions)

Disassembly:
	0x033F152C LDRB W8, [X21 + 0x829]
	0x033F1530 CBNZ W8, 0x33F1554
	0x033F1534 ADRP X0, 0xD2A000
	0x033F1538 LDR X0, [X0 + 0x728]
	0x033F153C BL 0x1C16CF4
	0x033F1540 ADRP X0, 0xD03000
	0x033F1544 LDR X0, [X0 + 0x7B8]
	0x033F1548 BL 0x1C16CF4
	0x033F154C MOVZ W8, 0x1
	0x033F1550 STRB W8, [X21 + 0x829]
	0x033F1554 ADRP X21, 0xD03000
	0x033F1558 LDR X21, [X21 + 0x7B8]
	0x033F155C LDR X0, [X21]
	0x033F1560 LDR W8, [X0 + 0xE0]
	0x033F1564 CBNZ W8, 0x33F1570
	0x033F1568 BL 0x1C16DFC
	0x033F156C LDR X0, [X21]
	0x033F1570 LDR X8, [X0 + 0xB8]
	0x033F1574 LDRB W8, [X8 + 0x10]
	0x033F1578 CBZ W8, 0x33F1594
	0x033F157C LDR X0, [X20]
	0x033F1580 LDR W8, [X0 + 0xE0]
	0x033F1584 CBNZ W8, 0x33F158C
	0x033F1588 BL 0x1C16DFC
	0x033F158C MOV X0, X19
	0x033F1590 BL 0x33EE8F8
	0x033F1594 MOVZ W21, 0x1000000
	0x033F1598 B 0x33F1634
	0x033F159C ADRP X20, 0xD2A000
	0x033F15A0 LDR X20, [X20 + 0x728]
	0x033F15A4 LDR X0, [X20]
	0x033F15A8 LDR W8, [X0 + 0xE0]
	0x033F15AC CBNZ W8, 0x33F15C4
	0x033F15B0 BL 0x1C16DFC
	0x033F15B4 LDR X0, [X20]
	0x033F15B8 LDR W8, [X0 + 0xE0]
	0x033F15BC CBNZ W8, 0x33F15C4
	0x033F15C0 BL 0x1C16DFC
	0x033F15C4 ADRP X21, 0xFE8000
	0x033F15C8 LDRB W8, [X21 + 0x829]
	0x033F15CC CBNZ W8, 0x33F15F0
	0x033F15D0 ADRP X0, 0xD2A000
	0x033F15D4 LDR X0, [X0 + 0x728]
	0x033F15D8 BL 0x1C16CF4
	0x033F15DC ADRP X0, 0xD03000
	0x033F15E0 LDR X0, [X0 + 0x7B8]
	0x033F15E4 BL 0x1C16CF4
	0x033F15E8 MOVZ W8, 0x1
	0x033F15EC STRB W8, [X21 + 0x829]
	0x033F15F0 ADRP X21, 0xD03000
	0x033F15F4 LDR X21, [X21 + 0x7B8]
	0x033F15F8 LDR X0, [X21]
	0x033F15FC LDR W8, [X0 + 0xE0]
	0x033F1600 CBNZ W8, 0x33F160C
	0x033F1604 BL 0x1C16DFC
	0x033F1608 LDR X0, [X21]
	0x033F160C LDR X8, [X0 + 0xB8]
	0x033F1610 LDRB W8, [X8 + 0x10]
	0x033F1614 CBZ W8, 0x33F1630
	0x033F1618 LDR X0, [X20]
	0x033F161C LDR W8, [X0 + 0xE0]
	0x033F1620 CBNZ W8, 0x33F1628
	0x033F1624 BL 0x1C16DFC
	0x033F1628 MOV X0, X19
	0x033F162C BL 0x33EE8F8
	0x033F1630 MOVZ W21, 0x400000
	0x033F1634 BL 0x1C16D44
	0x033F1638 MOV X20, X19
	0x033F163C LDR W22, [X20 + 0x38]!
	0x033F1640 BL 0x1C16D44
	0x033F1644 ORR W1, W22, W21, 0x0
	0x033F1648 MOV X0, X20
	0x033F164C BL 0x1C24300
	0x033F1650 LDR X20, [X20 + 0x10]
	0x033F1654 BL 0x1C16D44
	0x033F1658 CBZ X20, 0x33F167C
	0x033F165C LDR X21, [X20 + 0x18]
	0x033F1660 BL 0x1C16D44
	0x033F1664 CBZ X21, 0x33F1674
	0x033F1668 MOV X0, X21
	0x033F166C MOV X1, X31
	0x033F1670 BL 0x33DE6C8
	0x033F1674 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xFED000
	006 Move W8, [X21+1113]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0xD35000
	014 Move X0, [X0+2256]
	015 Call 0x1C17CF4
	016 Move X0, 0xD35000
	017 Move X0, [X0+2248]
	018 Call 0x1C17CF4
	019 Move X0, 0xD04000
	020 Move X0, [X0+2208]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1113], W8
	024 Move TEMP, X19
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {39}
	028 Move W19, [X20+56]
	029 Call 0x1C17D44
	030 And W8, W19, 0x600000
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X8, 0xD04000
	033 Move X8, [X8+2208]
	034 Move X0, [X8]
	035 Call 0x1C17F10
	036 Move X1, X20
	037 Move X19, X0
	038 Call TaskCanceledException..ctor, X0, X1
	039 Move X19, X31
	040 Move X0, X20
	041 Call Task.get_ExceptionRecorded, X0
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {63}
	046 Move X20, [X20+72]
	047 Call 0x1C17D44
	048 Compare X20, 0
	049 JumpIfEqual {98}
	050 Move X20, [X20+32]
	051 Call 0x1C17D44
	052 Compare X20, 0
	053 JumpIfEqual {98}
	054 Move X0, X20
	055 Move X2, X19
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move W1, W31
	059 Move X30, [X31+32]
	060 Move X21, [X31+40]
	061 Call TaskExceptionHolder.CreateExceptionObject, X0, X1, X2
	062 Return X0
	063 Compare X19, 0
	064 JumpIfEqual {92}
	065 Move X8, 0xD35000
	066 Move X8, [X8+2248]
	067 Move W1, 1
	068 Move X0, [X8]
	069 Call 0x1C17D6C
	070 Compare X0, 0
	071 JumpIfEqual {98}
	072 Move X8, [X0]
	073 Move X20, X0
	074 Move X0, X19
	075 Move X1, [X8+64]
	076 Call 0x1C17E00
	077 Compare X0, 0
	078 JumpIfEqual {99}
	079 Move W8, [X20+24]
	080 Compare W8, 0
	081 JumpIfEqual {102}
	082 Move [X20+32], X19
	083 Move X8, 0xD35000
	084 Move X8, [X8+2256]
	085 Move X0, [X8]
	086 Call 0x1C17F10
	087 Move X1, X20
	088 Move X2, X31
	089 Move X19, X0
	090 Call AggregateException..ctor, X0, X1
	091 Move X0, X19
	092 Move X0, X31
	093 Move X20, [X31+16]
	094 Move X19, [X31+24]
	095 Move X30, [X31+32]
	096 Move X21, [X31+40]
	097 Return X0
	098 Call 0x1C17F20
	099 Call 0x1C17F44
	100 Move X1, X31
	101 Call 0x1C17DEC
	102 Call 0x1C17F28

Method: System.Collections.ObjectModel.ReadOnlyCollection`1<System.Runtime.ExceptionServices.ExceptionDispatchInfo> GetExceptionDispatchInfos()

Disassembly:
	0x033F20E8 MOV W1, W22
	0x033F20EC MOV X2, X31
	0x033F20F0 LDR X3, [X8]
	0x033F20F4 BL 0x319B5F0
	0x033F20F8 LDR X8, [X23]
	0x033F20FC MOV X0, X23
	0x033F2100 MOV X1, X19
	0x033F2104 MOV W2, W21
	0x033F2108 LDP X9, X3, [X8 + 0x178]
	0x033F210C BLR X9
	0x033F2110 ADD W22, W22, 0x1
	0x033F2114 CMP W28, W22
	0x033F2118 B.NE 0x33F2090
	0x033F211C CMP W28, 0x1
	0x033F2120 B.LT 0x33F232C
	0x033F2124 MOV W22, W31
	0x033F2128 LDR X2, [X25]
	0x033F212C MOV X0, X20
	0x033F2130 MOV W1, W22
	0x033F2134 BL 0x319B580
	0x033F2138 CBZ X0, 0x33F2320
	0x033F213C ADRP X8, 0xD3B000
	0x033F2140 LDR X8, [X8 + 0x708]
	0x033F2144 MOV X24, X0
	0x033F2148 MOV X0, X20
	0x033F214C MOV W1, W22
	0x033F2150 LDR X3, [X8]
	0x033F2154 MOV X2, X31
	0x033F2158 BL 0x319B5F0
	0x033F215C LDR X9, [X29]
	0x033F2160 LDR X8, [X24]
	0x033F2164 CMP X8, X9
	0x033F2168 CSEL X23, X24, X31, EQ
	0x033F216C CBZ X23, 0x33F219C
	0x033F2170 LDR X0, [X27]
	0x033F2174 LDR W8, [X0 + 0xE0]
	0x033F2178 CBNZ W8, 0x33F2184
	0x033F217C BL 0x1C16DFC
	0x033F2180 LDR X0, [X27]
	0x033F2184 BL 0x1C16D0C
	0x033F2188 MOV X2, X0
	0x033F218C MOV X0, X23
	0x033F2190 MOV W1, W21
	0x033F2194 BL 0x33F3DB8
	0x033F2198 B 0x33F2320
	0x033F219C ADRP X9, 0xD3B000
	0x033F21A0 LDR X9, [X9 + 0x7E8]
	0x033F21A4 LDRB W11, [X8 + 0x130]
	0x033F21A8 LDR X9, [X9]
	0x033F21AC LDRB W10, [X9 + 0x130]
	0x033F21B0 CMP W11, W10
	0x033F21B4 B.CC 0x33F21CC
	0x033F21B8 LDR X11, [X8 + 0xC8]
	0x033F21BC ADD X10, X11, X10, 0x3, LSL
	0x033F21C0 LDUR X10, [X10 - 0x8]
	0x033F21C4 CMP X10, X9
	0x033F21C8 B.EQ 0x33F225C
	0x033F21CC MOV W23, W28
	0x033F21D0 MOV W28, W21
	0x033F21D4 MOV X21, X27
	0x033F21D8 MOV X27, X29
	0x033F21DC MOV X29, X25
	0x033F21E0 MOV X25, X26
	0x033F21E4 LDR X26, [X26]
	0x033F21E8 MOV X0, X24
	0x033F21EC MOV X1, X26
	0x033F21F0 BL 0x1C16E00
	0x033F21F4 CBZ X0, 0x33F2470
	0x033F21F8 MOV X26, X25
	0x033F21FC MOV X25, X29

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xFEC000
	006 Move W8, [X20+1114]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0xD3C000
	013 Move X0, [X0+1912]
	014 Call 0x1C17CF4
	015 Move X0, 0xD3C000
	016 Move X0, [X0+1920]
	017 Call 0x1C17CF4
	018 Move X0, 0xD3C000
	019 Move X0, [X0+1928]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1114], W8
	023 Move W20, [X19+56]
	024 Call 0x1C17D44
	025 Move TEMP, X20
	026 And TEMP, TEMP, 0x200000
	027 Compare TEMP, 0x200000
	028 JumpIfNotEqual {48}
	029 Move X0, X19
	030 Call Task.get_ExceptionRecorded, X0
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {48}
	035 Move X19, [X19+72]
	036 Call 0x1C17D44
	037 Compare X19, 0
	038 JumpIfEqual {94}
	039 Move X19, [X19+32]
	040 Call 0x1C17D44
	041 Compare X19, 0
	042 JumpIfEqual {94}
	043 Move X0, X19
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Move X8, 0xD3C000
	049 Move X8, [X8+1912]
	050 Move X19, [X8]
	051 Move X8, [X19+56]
	052 Compare X8, 0
	053 JumpIfNotEqual {57}
	054 Move X0, X19
	055 Call 0x1C5D6E0
	056 Move X8, [X19+56]
	057 Move X0, [X8+16]
	058 Move W8, [X0+309]
	059 Move TEMP, X8
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfEqual {64}
	063 Call 0x1C5D684
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move X8, [X19+56]
	069 Move X21, 0xD3C000
	070 Move X20, 0xD3C000
	071 Move X0, [X8+16]
	072 Move W8, [X0+309]
	073 Move X21, [X21+1928]
	074 Move X20, [X20+1920]
	075 Move TEMP, X8
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfEqual {80}
	079 Call 0x1C5D684
	080 Move X8, [X0+184]
	081 Move X0, [X21]
	082 Move X19, [X8]
	083 Call 0x1C17F10
	084 Move X2, [X20]
	085 Move X1, X19
	086 Move X20, X0
	087 Call ReadOnlyCollection`1<Object>..ctor, X0, X1
	088 Move X0, X20
	089 Move X20, [X31+16]
	090 Move X19, [X31+24]
	091 Move X30, [X31+32]
	092 Move X21, [X31+40]
	093 Return X0
	094 Call 0x1C17F20

Method: System.Runtime.ExceptionServices.ExceptionDispatchInfo GetCancellationExceptionDispatchInfo()

Disassembly:
	0x033F228C BLR X8
	0x033F2290 TBZ X0, 0x0, 0x33F22C4
	0x033F2294 ADRP X8, 0xD3B000
	0x033F2298 LDR X8, [X8 + 0x7C0]
	0x033F229C LDR X0, [X8]
	0x033F22A0 BL 0x1C16F10
	0x033F22A4 MOV X1, X31
	0x033F22A8 MOV X24, X0
	0x033F22AC BL 0x33BDD8C
	0x033F22B0 MOV X0, X24
	0x033F22B4 MOV W1, W31
	0x033F22B8 STP X23, X19, [X24 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+72]
	004 Call 0x1C17D44
	005 Compare X19, 0
	006 JumpIfEqual {12}
	007 Move X19, [X19+32]
	008 Call 0x1C17D44
	009 Compare X19, 0
	010 JumpIfEqual {12}
	011 Move X0, [X19+32]
	012 Move X0, X31
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Return X0

Method: System.Void ThrowIfExceptional(System.Boolean includeTaskCanceledExceptions)

Disassembly:
	0x033F22BC BL 0x33E9E8C
	0x033F22C0 B 0x33F2320
	0x033F22C4 LDR X8, [X23]
	0x033F22C8 LDR X1, [X26]
	0x033F22CC LDRH W9, [X8 + 0x12E]
	0x033F22D0 CBZ X9, 0x33F22F4
	0x033F22D4 LDR X10, [X8 + 0xB0]
	0x033F22D8 ADD X10, X10, 0x8
	0x033F22DC LDUR X11, [X10 - 0x8]
	0x033F22E0 CMP X11, X1
	0x033F22E4 B.EQ 0x33F2304
	0x033F22E8 SUBS X9, X9, 0x1
	0x033F22EC ADD X10, X10, 0x10
	0x033F22F0 B.NE 0x33F22DC
	0x033F22F4 MOV X0, X23
	0x033F22F8 MOV W2, W31
	0x033F22FC BL 0x1C5C788
	0x033F2300 B 0x33F2310

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 And W1, W1, 1
	005 Move X19, X0
	006 Call Task.GetExceptions, X0, X1
	007 Compare X0, 0
	008 JumpIfNotEqual {13}
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 
	013 Move X20, X0
	014 Move X0, X19
	015 Call Task.UpdateExceptionObservedStatus, X0
	016 Move X0, 0xD3C000
	017 Move X0, [X0+1936]
	018 Call 0x1C17D08
	019 Move X1, X0
	020 Move X0, X20
	021 Call 0x1C17DEC

Method: System.Void UpdateExceptionObservedStatus()

Disassembly:
	0x033F2304 LDRSW X9, [X10]
	0x033F2308 ADD X8, X8, X9, 0x4, LSL
	0x033F230C ADD X0, X8, 0x138
	0x033F2310 LDP X8, X2, [X0]
	0x033F2314 MOV X0, X23
	0x033F2318 MOV X1, X19
	0x033F231C BLR X8
	0x033F2320 ADD W22, W22, 0x1
	0x033F2324 CMP W22, W28
	0x033F2328 B.NE 0x33F2128
	0x033F232C ADRP X19, 0xFEB000
	0x033F2330 LDRB W8, [X19 + 0x502]
	0x033F2334 CBNZ W8, 0x33F234C
	0x033F2338 ADRP X0, 0xD29000
	0x033F233C LDR X0, [X0 + 0x728]
	0x033F2340 BL 0x1C16CF4
	0x033F2344 MOVZ W8, 0x1
	0x033F2348 STRB W8, [X19 + 0x502]
	0x033F234C ADRP X8, 0xD29000
	0x033F2350 LDR X8, [X8 + 0x728]
	0x033F2354 LDR X0, [X8]
	0x033F2358 B 0x33F242C
	0x033F235C LDR W9, [X10]
	0x033F2360 ADD W9, W9, 0x1
	0x033F2364 ADD X8, X8, W9, 0x4, SXTW
	0x033F2368 ADD X0, X8, 0x138
	0x033F236C LDP X8, X1, [X0]
	0x033F2370 MOV X0, X22
	0x033F2374 BLR X8
	0x033F2378 TBZ X0, 0x0, 0x33F23AC
	0x033F237C ADRP X8, 0xD3B000
	0x033F2380 LDR X8, [X8 + 0x7C0]
	0x033F2384 LDR X0, [X8]
	0x033F2388 BL 0x1C16F10
	0x033F238C MOV X1, X31
	0x033F2390 MOV X20, X0
	0x033F2394 BL 0x33BDD8C
	0x033F2398 MOV X0, X20
	0x033F239C MOV W1, W31
	0x033F23A0 STP X22, X19, [X20 + 0x10]
	0x033F23A4 BL 0x33E9E8C
	0x033F23A8 B 0x33F2408
	0x033F23AC LDR X8, [X22]
	0x033F23B0 LDR X1, [X26]
	0x033F23B4 LDRH W9, [X8 + 0x12E]
	0x033F23B8 CBZ X9, 0x33F23DC
	0x033F23BC LDR X10, [X8 + 0xB0]
	0x033F23C0 ADD X10, X10, 0x8
	0x033F23C4 LDUR X11, [X10 - 0x8]
	0x033F23C8 CMP X11, X1
	0x033F23CC B.EQ 0x33F23EC
	0x033F23D0 SUBS X9, X9, 0x1
	0x033F23D4 ADD X10, X10, 0x10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xFEC000
	006 Move W8, [X20+1115]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xD03000
	013 Move X0, [X0+1976]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1115], W8
	017 Move X8, [X19+48]
	018 Compare X8, 0
	019 JumpIfEqual {65}
	020 Move X0, X19
	021 Call Task.get_Options, X0
	022 Move TEMP, X0
	023 And TEMP, TEMP, 4
	024 Compare TEMP, 4
	025 JumpIfNotEqual {65}
	026 Move X0, [X19+48]
	027 Compare X0, 0
	028 JumpIfEqual {70}
	029 Call Task.get_Options, X0
	030 Move TEMP, X0
	031 And TEMP, TEMP, 8
	032 Compare TEMP, 8
	033 JumpIfEqual {65}
	034 Move X20, 0xD03000
	035 Move X20, [X20+1976]
	036 Move X0, [X20]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X21, 0xFE8000
	042 Move W8, [X21+2190]
	043 Compare W8, 0
	044 JumpIfNotEqual {50}
	045 Move X0, 0xD03000
	046 Move X0, [X0+1976]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X21+2190], W8
	050 Move X0, [X20]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X20]
	056 Call 0x1C17D0C
	057 Move X8, [X0]
	058 Move X9, [X19+48]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move W20, [X19+56]
	061 Call 0x1C17D44
	062 Call 0x1C17D44
	063 Or W8, W20, 0x80000
	064 Move [X19+56], W8
	065 Move X20, [X31+16]
	066 Move X19, [X31+24]
	067 Move X30, [X31+32]
	068 Move X21, [X31+40]
	069 Return 
	070 Call 0x1C17F20

Method: System.Boolean get_IsExceptionObservedByParent()

Disassembly:
	0x033F23D8 B.NE 0x33F23C4
	0x033F23DC MOV X0, X22
	0x033F23E0 MOV W2, W31
	0x033F23E4 BL 0x1C5C788
	0x033F23E8 B 0x33F23F8
	0x033F23EC LDRSW X9, [X10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, [X0+56]
	004 Call 0x1C17D44
	005 Move W0, W19
	006 ShiftRight W0, 19
	007 And W0, W0, 0x7FFFF
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return X0

Method: System.Boolean get_IsDelegateInvoked()

Disassembly:
	0x033F23F0 ADD X8, X8, X9, 0x4, LSL
	0x033F23F4 ADD X0, X8, 0x138
	0x033F23F8 LDP X8, X2, [X0]
	0x033F23FC MOV X0, X22
	0x033F2400 MOV X1, X19
	0x033F2404 BLR X8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, [X0+56]
	004 Call 0x1C17D44
	005 Move W0, W19
	006 ShiftRight W0, 17
	007 And W0, W0, 0x1FFFF
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return X0

Method: System.Void Finish(System.Boolean bUserDelegateExecuted)

Disassembly:
	0x033F0B68 STRB W8, [X20 + 0x454]
	0x033F0B6C LDR X19, [X19 + 0x48]
	0x033F0B70 BL 0x1C16D44
	0x033F0B74 CBZ X19, 0x33F0B80
	0x033F0B78 LDR X0, [X19 + 0x10]
	0x033F0B7C CBNZ X0, 0x33F0BA4
	0x033F0B80 ADRP X19, 0xD2B000
	0x033F0B84 LDR X19, [X19 + 0x580]
	0x033F0B88 LDR X0, [X19]
	0x033F0B8C LDR W8, [X0 + 0xE0]
	0x033F0B90 CBNZ W8, 0x33F0B9C
	0x033F0B94 BL 0x1C16DFC
	0x033F0B98 LDR X0, [X19]
	0x033F0B9C LDR X8, [X0 + 0xB8]
	0x033F0BA0 LDR X0, [X8 + 0x8]
	0x033F0BA4 LDP X20, X19, [X31 + 0x10]
	0x033F0BA8 LDR X30, [X31], #0x20
	0x033F0BAC RET
	0x033F0BB0 STP X30, X21, [X31 - 0x20]!
	0x033F0BB4 STP X20, X19, [X31 + 0x10]
	0x033F0BB8 ADRP X21, 0xFED000
	0x033F0BBC ADRP X20, 0xD0A000
	0x033F0BC0 LDRB W8, [X21 + 0x456]
	0x033F0BC4 LDR X20, [X20 + 0xC10]
	0x033F0BC8 MOV X19, X0
	0x033F0BCC TBNZ X8, 0x0, 0x33F0BE4
	0x033F0BD0 ADRP X0, 0xD0A000
	0x033F0BD4 LDR X0, [X0 + 0xC10]
	0x033F0BD8 BL 0x1C16CF4
	0x033F0BDC MOVZ W8, 0x1
	0x033F0BE0 STRB W8, [X21 + 0x456]
	0x033F0BE4 LDR X8, [X19]
	0x033F0BE8 MOVZ W1, 0x1
	0x033F0BEC MOV X0, X19
	0x033F0BF0 LDP X9, X2, [X8 + 0x1F8]
	0x033F0BF4 BLR X9
	0x033F0BF8 LDR X0, [X20]
	0x033F0BFC LDR W8, [X0 + 0xE0]
	0x033F0C00 CBNZ W8, 0x33F0C08
	0x033F0C04 BL 0x1C16DFC
	0x033F0C08 MOV X0, X19
	0x033F0C0C LDP X20, X19, [X31 + 0x10]
	0x033F0C10 MOV X1, X31
	0x033F0C14 LDP X30, X21, [X31], #0x20
	0x033F0C18 B 0x33B3E9C
	0x033F0C1C STP X30, X21, [X31 - 0x20]!
	0x033F0C20 STP X20, X19, [X31 + 0x10]
	0x033F0C24 MOV X19, X0
	0x033F0C28 TBZ X1, 0x0, 0x33F0C90
	0x033F0C2C MOV X0, X19
	0x033F0C30 BL 0x33EF398
	0x033F0C34 TBNZ X0, 0xE, 0x33F0CA4
	0x033F0C38 MOV X0, X19
	0x033F0C3C BL 0x33ED11C
	0x033F0C40 TBZ X0, 0x0, 0x33F0CB0
	0x033F0C44 BL 0x1C16D44
	0x033F0C48 LDR X21, [X19 + 0x48]
	0x033F0C4C BL 0x1C16D44
	0x033F0C50 CBZ X21, 0x33F0C90
	0x033F0C54 LDR X20, [X21 + 0x18]
	0x033F0C58 BL 0x1C16D44
	0x033F0C5C CBZ X20, 0x33F0C90
	0x033F0C60 BL 0x1C16D44
	0x033F0C64 MOV X0, X20
	0x033F0C68 MOV X1, X31
	0x033F0C6C STR X31, [X21 + 0x18]
	0x033F0C70 BL 0x33DE0A8
	0x033F0C74 TBNZ X0, 0x0, 0x33F0C84
	0x033F0C78 MOV X0, X20
	0x033F0C7C MOV X1, X31
	0x033F0C80 BL 0x33DE6C8
	0x033F0C84 MOV X0, X20
	0x033F0C88 MOV X1, X31
	0x033F0C8C BL 0x33DEF14
	0x033F0C90 LDR W20, [X19 + 0x38]
	0x033F0C94 BL 0x1C16D44
	0x033F0C98 BL 0x1C16D44
	0x033F0C9C ORR W8, W20, 0x40000
	0x033F0CA0 STR W8, [X19 + 0x38]
	0x033F0CA4 LDP X20, X19, [X31 + 0x10]
	0x033F0CA8 LDP X30, X21, [X31], #0x20
	0x033F0CAC RET
	0x033F0CB0 ADRP X0, 0xD03000
	0x033F0CB4 LDR X0, [X0 + 0x5B0]
	0x033F0CB8 BL 0x1C16D08
	0x033F0CBC BL 0x1C16F10
	0x033F0CC0 MOV X19, X0
	0x033F0CC4 ADRP X0, 0xD3D000
	0x033F0CC8 LDR X0, [X0 + 0x750]
	0x033F0CCC BL 0x1C16D08
	0x033F0CD0 MOV X1, X0
	0x033F0CD4 MOV X0, X19
	0x033F0CD8 MOV X2, X31
	0x033F0CDC BL 0x337DF1C
	0x033F0CE0 ADRP X0, 0xD3D000
	0x033F0CE4 LDR X0, [X0 + 0x758]
	0x033F0CE8 BL 0x1C16D08
	0x033F0CEC MOV X1, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xFEE000
	007 Move W8, [X21+1116]
	008 Move W20, W1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xD3E000
	015 Move X0, [X0+1808]
	016 Call 0x1C17CF4
	017 Move X0, 0xD05000
	018 Move X0, [X0+1976]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1116], W8
	022 Move TEMP, X20
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {44}
	026 Move X21, [X19+72]
	027 Call 0x1C17D44
	028 Compare X21, 0
	029 JumpIfEqual {44}
	030 Move X20, X21
	031 Add X20, X20, 60
	032 Move W22, [X20]
	033 Call 0x1C17D44
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Call 0x1C17D44
	036 Move X0, X20
	037 Call 0x1C252B0
	038 Compare W0, 0
	039 JumpIfEqual {46}
	040 Move W1, 0x800000
	041 Move W2, 0x1600000
	042 Move X0, X19
	043 Call Task.AtomicStateUpdate, X0, X1, X2
	044 Move X0, X19
	045 Call Task.FinishStageTwo, X0
	046 Move X0, X19
	047 Call Task.FinishStageTwo, X0
	048 Move X19, [X21+64]
	049 Call 0x1C17D44
	050 Compare X19, 0
	051 JumpIfEqual {81}
	052 Move [X31+12], W31
	053 Add X1, X31, 12
	054 Move X0, X19
	055 Move X2, X31
	056 Call Monitor.Enter, X0, X1
	057 Move X20, 0xD05000
	058 Move X20, [X20+1976]
	059 Move X0, [X20]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {65}
	063 Call 0x1C17DFC
	064 Move X0, [X20]
	065 Move X8, [X0+184]
	066 Move X9, 0xD3E000
	067 Move X9, [X9+1808]
	068 Move X1, [X8+56]
	069 Move X2, [X9]
	070 Move X0, X19
	071 Call 0x319CF80, X0, X1
	072 Move X20, X31
	073 Move W8, [X31+12]
	074 Compare W8, 0
	075 JumpIfEqual {79}
	076 Move X0, X19
	077 Move X1, X31
	078 Call Monitor.Exit, X0
	079 Compare X20, 0
	080 JumpIfNotEqual {87}
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X22, [X31+16]
	084 Move X21, [X31+24]
	085 Move X30, [X31+48]
	086 Return 
	087 Move X0, X20
	088 Call 0x1C17F18
	089 Move X21, X0
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move X0, X21
	092 Call 0x3EB2AD0
	093 Move X20, [X0]
	094 Call 0x3EB2AE0
	095 Move X20, X31
	096 Move X21, X0
	097 Move W8, [X31+12]
	098 Compare W8, 0
	099 JumpIfEqual {103}
	100 Move X0, X19
	101 Move X1, X31
	102 Call Monitor.Exit, X0
	103 Compare X20, 0
	104 JumpIfNotEqual {107}
	105 Move X0, X21
	106 Call 0x1D2D690
	107 Move X0, X20
	108 Call 0x1C17F18
	109 Call 0x1991590

Method: System.Void FinishStageTwo()

Disassembly:
	0x033F2408 ADRP X19, 0xFEB000
	0x033F240C LDRB W8, [X19 + 0x502]
	0x033F2410 CBNZ W8, 0x33F2428
	0x033F2414 ADRP X0, 0xD29000
	0x033F2418 LDR X0, [X0 + 0x728]
	0x033F241C BL 0x1C16CF4
	0x033F2420 MOVZ W8, 0x1
	0x033F2424 STRB W8, [X19 + 0x502]
	0x033F2428 LDR X0, [X23]
	0x033F242C LDR W8, [X0 + 0xE0]
	0x033F2430 CBNZ W8, 0x33F2438
	0x033F2434 BL 0x1C16DFC
	0x033F2438 LDP X20, X19, [X31 + 0x70]
	0x033F243C LDP X22, X21, [X31 + 0x60]
	0x033F2440 LDP X24, X23, [X31 + 0x50]
	0x033F2444 LDP X26, X25, [X31 + 0x40]
	0x033F2448 LDP X28, X27, [X31 + 0x30]
	0x033F244C LDP X29, X30, [X31 + 0x20]
	0x033F2450 ADD X31, X31, 0x80
	0x033F2454 RET
	0x033F2458 LDP X9, X3, [X8 + 0x178]
	0x033F245C MOV X0, X20
	0x033F2460 MOV X1, X19
	0x033F2464 MOV W2, W21
	0x033F2468 BLR X9
	0x033F246C B 0x33F2408
	0x033F2470 MOV X0, X24
	0x033F2474 MOV X1, X26
	0x033F2478 BL 0x1C171E0
	0x033F247C MOV X0, X22
	0x033F2480 BL 0x1C16F18
	0x033F2484 CMP W1, 0x1
	0x033F2488 MOV X23, X0
	0x033F248C B.NE 0x33F24A8
	0x033F2490 MOV X0, X23
	0x033F2494 BL 0x3EB1AD0
	0x033F2498 LDR X22, [X0]
	0x033F249C BL 0x3EB1AE0
	0x033F24A0 MOV W23, W31
	0x033F24A4 B 0x33F204C
	0x033F24A8 MOV X22, X31
	0x033F24AC B 0x33F24B4
	0x033F24B0 MOV X23, X0
	0x033F24B4 LDRB W8, [X31 + 0xC]
	0x033F24B8 CBZ W8, 0x33F24C8
	0x033F24BC MOV X0, X20
	0x033F24C0 MOV X1, X31
	0x033F24C4 BL 0x33E14E4
	0x033F24C8 CBNZ X22, 0x33F24D4
	0x033F24CC MOV X0, X23
	0x033F24D0 BL 0x1D2C690
	0x033F24D4 MOV X0, X22
	0x033F24D8 BL 0x1C16F18
	0x033F24DC BL 0x1990590
	0x033F24E0 STR X30, [X31 - 0x20]!
	0x033F24E4 STP X20, X19, [X31 + 0x10]
	0x033F24E8 LDR X8, [X0]
	0x033F24EC MOV X19, X0
	0x033F24F0 LDR X1, [X8 + 0x210]
	0x033F24F4 LDR X9, [X8 + 0x208]
	0x033F24F8 BLR X9
	0x033F24FC LDP X20, X19, [X31 + 0x10]
	0x033F2500 LDR X30, [X31], #0x20
	0x033F2504 RET
	0x033F2508 CMP W1, 0x1
	0x033F250C MOV X20, X0
	0x033F2510 B.NE 0x33F2580
	0x033F2514 MOV X0, X20
	0x033F2518 BL 0x3EB1AD0
	0x033F251C MOV X20, X0
	0x033F2520 ADRP X0, 0xD01000
	0x033F2524 LDR X0, [X0 + 0x7D0]
	0x033F2528 BL 0x1C16D08
	0x033F252C LDR X8, [X20]
	0x033F2530 LDR X1, [X8]
	0x033F2534 BL 0x1C17270
	0x033F2538 TBZ X0, 0x0, 0x33F2558
	0x033F253C LDR X20, [X20]
	0x033F2540 BL 0x3EB1AE0
	0x033F2544 MOV X0, X19
	0x033F2548 MOV X1, X20
	0x033F254C LDP X20, X19, [X31 + 0x10]
	0x033F2550 LDR X30, [X31], #0x20
	0x033F2554 B 0x33F258C
	0x033F2558 MOVZ W0, 0x8
	0x033F255C BL 0x3EB1AF0
	0x033F2560 LDR X8, [X20]
	0x033F2564 STR X8, [X0]
	0x033F2568 ADRP X1, 0xAC2000
	0x033F256C ADD X1, X1, 0xE58
	0x033F2570 MOV X2, X31
	0x033F2574 BL 0x3EB1B00
	0x033F2578 MOV X20, X0
	0x033F257C BL 0x3EB1AE0
	0x033F2580 MOV X0, X20
	0x033F2584 BL 0x1D2C690
	0x033F2588 BL 0x1990590
	0x033F258C STR X30, [X31 - 0x30]!
	0x033F2590 STP X22, X21, [X31 + 0x10]
	0x033F2594 STP X20, X19, [X31 + 0x20]
	0x033F2598 ADRP X21, 0xFEB000
	0x033F259C LDRB W8, [X21 + 0x463]
	0x033F25A0 MOV X19, X1
	0x033F25A4 MOV X20, X0
	0x033F25A8 TBNZ X8, 0x0, 0x33F25CC
	0x033F25AC ADRP X0, 0xD09000
	0x033F25B0 LDR X0, [X0 + 0x7D8]
	0x033F25B4 BL 0x1C16CF4
	0x033F25B8 ADRP X0, 0xD09000
	0x033F25BC LDR X0, [X0 + 0x8A8]
	0x033F25C0 BL 0x1C16CF4
	0x033F25C4 MOVZ W8, 0x1
	0x033F25C8 STRB W8, [X21 + 0x463]
	0x033F25CC CBZ X19, 0x33F2674
	0x033F25D0 ADRP X8, 0xD09000
	0x033F25D4 LDR X8, [X8 + 0x8A8]
	0x033F25D8 LDR X9, [X19]
	0x033F25DC LDR X8, [X8]
	0x033F25E0 LDRB W11, [X9 + 0x130]
	0x033F25E4 LDRB W10, [X8 + 0x130]
	0x033F25E8 CMP W11, W10
	0x033F25EC B.CC 0x33F2674
	0x033F25F0 LDR X9, [X9 + 0xC8]
	0x033F25F4 ADD X9, X9, X10, 0x3, LSL
	0x033F25F8 LDUR X9, [X9 - 0x8]
	0x033F25FC CMP X9, X8
	0x033F2600 B.NE 0x33F2674
	0x033F2604 MOV X0, X20
	0x033F2608 BL 0x33F06F8
	0x033F260C TBZ X0, 0x0, 0x33F2674
	0x033F2610 LDR X21, [X20 + 0x48]
	0x033F2614 BL 0x1C16D44
	0x033F2618 CBZ X21, 0x33F2690
	0x033F261C ADRP X8, 0xD09000
	0x033F2620 LDR X8, [X8 + 0x7D8]
	0x033F2624 LDR X21, [X21 + 0x28]
	0x033F2628 LDR X22, [X19 + 0x90]
	0x033F262C LDR X0, [X8]
	0x033F2630 LDR W8, [X0 + 0xE0]
	0x033F2634 CBNZ W8, 0x33F263C
	0x033F2638 BL 0x1C16DFC
	0x033F263C MOV X0, X21
	0x033F2640 MOV X1, X22
	0x033F2644 MOV X2, X31
	0x033F2648 BL 0x33DDB68
	0x033F264C TBZ X0, 0x0, 0x33F2674
	0x033F2650 LDR W21, [X20 + 0x38]
	0x033F2654 BL 0x1C16D44
	0x033F2658 BL 0x1C16D44
	0x033F265C ORR W8, W21, 0x100000
	0x033F2660 MOVZ W2, 0x1
	0x033F2664 STR W8, [X20 + 0x38]
	0x033F2668 MOV X0, X20
	0x033F266C MOV X1, X19
	0x033F2670 B 0x33F2680
	0x033F2674 MOV X0, X20
	0x033F2678 MOV X1, X19
	0x033F267C MOV W2, W31
	0x033F2680 LDP X20, X19, [X31 + 0x20]
	0x033F2684 LDP X22, X21, [X31 + 0x10]
	0x033F2688 LDR X30, [X31], #0x30
	0x033F268C B 0x33F0D74

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xFEC000
	007 Move W8, [X20+1117]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD2A000
	014 Move X0, [X0+1832]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+1117], W8
	018 Move X0, X19
	019 Call Task.AddExceptionsFromChildren, X0
	020 Move X0, X19
	021 Call Task.get_ExceptionRecorded, X0
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {70}
	026 Move X20, 0xD2A000
	027 Move X20, [X20+1832]
	028 Move X0, [X20]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {38}
	032 Call 0x1C17DFC
	033 Move X0, [X20]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X21, 0xFE8000
	039 Move W8, [X21+2089]
	040 Compare W8, 0
	041 JumpIfNotEqual {50}
	042 Move X0, 0xD2A000
	043 Move X0, [X0+1832]
	044 Call 0x1C17CF4
	045 Move X0, 0xD03000
	046 Move X0, [X0+1976]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X21+2089], W8
	050 Move X21, 0xD03000
	051 Move X21, [X21+1976]
	052 Move X0, [X21]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {58}
	056 Call 0x1C17DFC
	057 Move X0, [X21]
	058 Move X8, [X0+184]
	059 Move W8, [X8+16]
	060 Compare W8, 0
	061 JumpIfEqual {69}
	062 Move X0, [X20]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1C17DFC
	067 Move X0, X19
	068 Call DebuggerSupport.RemoveFromActiveTasksNonInlined, X0
	069 Move W21, 0x200000
	070 Move X0, X19
	071 Call Task.get_IsCancellationRequested, X0
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfNotEqual {82}
	076 Move W20, [X19+56]
	077 Call 0x1C17D44
	078 Move TEMP, X20
	079 And TEMP, TEMP, 0x100000
	080 Compare TEMP, 0x100000
	081 JumpIfEqual {126}
	082 Move X20, 0xD2A000
	083 Move X20, [X20+1832]
	084 Move X0, [X20]
	085 Move W8, [X0+224]
	086 Compare W8, 0
	087 JumpIfNotEqual {94}
	088 Call 0x1C17DFC
	089 Move X0, [X20]
	090 Move W8, [X0+224]
	091 Compare W8, 0
	092 JumpIfNotEqual {94}
	093 Call 0x1C17DFC
	094 Move X21, 0xFE8000
	095 Move W8, [X21+2089]
	096 Compare W8, 0
	097 JumpIfNotEqual {106}
	098 Move X0, 0xD2A000
	099 Move X0, [X0+1832]
	100 Call 0x1C17CF4
	101 Move X0, 0xD03000
	102 Move X0, [X0+1976]
	103 Call 0x1C17CF4
	104 Move W8, 1
	105 Move [X21+2089], W8
	106 Move X21, 0xD03000
	107 Move X21, [X21+1976]
	108 Move X0, [X21]
	109 Move W8, [X0+224]
	110 Compare W8, 0
	111 JumpIfNotEqual {114}
	112 Call 0x1C17DFC
	113 Move X0, [X21]
	114 Move X8, [X0+184]
	115 Move W8, [X8+16]
	116 Compare W8, 0
	117 JumpIfEqual {125}
	118 Move X0, [X20]
	119 Move W8, [X0+224]
	120 Compare W8, 0
	121 JumpIfNotEqual {123}
	122 Call 0x1C17DFC
	123 Move X0, X19
	124 Call DebuggerSupport.RemoveFromActiveTasksNonInlined, X0
	125 Move W21, 0x1000000
	126 Move X20, 0xD2A000
	127 Move X20, [X20+1832]
	128 Move X0, [X20]
	129 Move W8, [X0+224]
	130 Compare W8, 0
	131 JumpIfNotEqual {138}
	132 Call 0x1C17DFC
	133 Move X0, [X20]
	134 Move W8, [X0+224]
	135 Compare W8, 0
	136 JumpIfNotEqual {138}
	137 Call 0x1C17DFC
	138 Move X21, 0xFE8000
	139 Move W8, [X21+2089]
	140 Compare W8, 0
	141 JumpIfNotEqual {150}
	142 Move X0, 0xD2A000
	143 Move X0, [X0+1832]
	144 Call 0x1C17CF4
	145 Move X0, 0xD03000
	146 Move X0, [X0+1976]
	147 Call 0x1C17CF4
	148 Move W8, 1
	149 Move [X21+2089], W8
	150 Move X21, 0xD03000
	151 Move X21, [X21+1976]
	152 Move X0, [X21]
	153 Move W8, [X0+224]
	154 Compare W8, 0
	155 JumpIfNotEqual {158}
	156 Call 0x1C17DFC
	157 Move X0, [X21]
	158 Move X8, [X0+184]
	159 Move W8, [X8+16]
	160 Compare W8, 0
	161 JumpIfEqual {169}
	162 Move X0, [X20]
	163 Move W8, [X0+224]
	164 Compare W8, 0
	165 JumpIfNotEqual {167}
	166 Call 0x1C17DFC
	167 Move X0, X19
	168 Call DebuggerSupport.RemoveFromActiveTasksNonInlined, X0
	169 Move W21, 0x400000
	170 Call 0x1C17D44
	171 Move X20, X19
	172 Add X20, X20, 56
	173 Move W22, [X20]
	174 Call 0x1C17D44
	175 Or W1, W22, W21
	176 Move X0, X20
	177 Call 0x1C25300
	178 Move X20, [X20+16]
	179 Call 0x1C17D44
	180 Compare X20, 0
	181 JumpIfEqual {191}
	182 Move X21, [X20+24]
	183 Call 0x1C17D44
	184 Compare X21, 0
	185 JumpIfEqual {189}
	186 Move X0, X21
	187 Move X1, X31
	188 Call ManualResetEventSlim.Set, X0
	189 Move X0, X20
	190 Call ContingentProperties.UnregisterCancellationCallback, X0
	191 Move X0, X19
	192 Move X20, [X31+32]
	193 Move X19, [X31+40]
	194 Move X22, [X31+16]
	195 Move X21, [X31+24]
	196 Move X30, [X31+48]
	197 Call Task.FinishStageThree, X0
	198 Return 

Method: System.Void FinishStageThree()

Disassembly:
	0x033F2C00 ADRP X8, 0xD3B000
	0x033F2C04 LDR X8, [X8 + 0x800]
	0x033F2C08 LDR X0, [X8]
	0x033F2C0C BL 0x1C16F10
	0x033F2C10 AND W2, W21, 0x1
	0x033F2C14 MOV X1, X20
	0x033F2C18 MOV X23, X0
	0x033F2C1C BL 0x33F7A98
	0x033F2C20 MOV X0, X19
	0x033F2C24 MOV X1, X23
	0x033F2C28 MOV W2, W31
	0x033F2C2C STR X22, [X23 + 0x20]
	0x033F2C30 BL 0x33F2DA4
	0x033F2C34 TBNZ X0, 0x0, 0x33F2C74
	0x033F2C38 LDR X8, [X23]
	0x033F2C3C MOV X0, X23
	0x033F2C40 MOV X1, X19
	0x033F2C44 LDP X20, X19, [X31 + 0x30]
	0x033F2C48 LDP X4, X3, [X8 + 0x178]
	0x033F2C4C LDP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+48]
	006 Move [X19+24], X31
	007 Compare X0, 0
	008 JumpIfEqual {25}
	009 Call Task.get_Options, X0
	010 Move TEMP, X0
	011 And TEMP, TEMP, 8
	012 Compare TEMP, 8
	013 JumpIfEqual {25}
	014 Move W20, [X19+56]
	015 Call 0x1C17D44
	016 Move TEMP, X20
	017 And TEMP, TEMP, 4
	018 Compare TEMP, 4
	019 JumpIfNotEqual {25}
	020 Move X0, [X19+48]
	021 Compare X0, 0
	022 JumpIfEqual {31}
	023 Move X1, X19
	024 Call Task.ProcessChildCompletion, X0, X1
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Call Task.FinishContinuations, X0
	030 Return 
	031 Call 0x1C17F20

Method: System.Void ProcessChildCompletion(System.Threading.Tasks.Task childTask)

Disassembly:
	0x033F2C50 LDP X24, X23, [X31 + 0x10]
	0x033F2C54 MOV W2, W31
	0x033F2C58 LDR X30, [X31], #0x40
	0x033F2C5C BR X4
	0x033F2C60 MOV X0, X19
	0x033F2C64 MOV X1, X20
	0x033F2C68 MOV W2, W31
	0x033F2C6C BL 0x33F2DA4
	0x033F2C70 TBZ X0, 0x0, 0x33F2C88
	0x033F2C74 LDP X20, X19, [X31 + 0x30]
	0x033F2C78 LDP X22, X21, [X31 + 0x20]
	0x033F2C7C LDP X24, X23, [X31 + 0x10]
	0x033F2C80 LDR X30, [X31], #0x40
	0x033F2C84 RET
	0x033F2C88 MOV X0, X20
	0x033F2C8C LDP X20, X19, [X31 + 0x30]
	0x033F2C90 LDP X22, X21, [X31 + 0x20]
	0x033F2C94 LDP X24, X23, [X31 + 0x10]
	0x033F2C98 LDR X30, [X31], #0x40
	0x033F2C9C B 0x33F2E38
	0x033F2CA0 STR X30, [X31 - 0x20]!
	0x033F2CA4 STP X20, X19, [X31 + 0x10]
	0x033F2CA8 MOV X8, X2
	0x033F2CAC MOV X19, X1
	0x033F2CB0 AND W2, W3, 0x1
	0x033F2CB4 MOV X1, X8
	0x033F2CB8 MOV X20, X0
	0x033F2CBC BL 0x33F7A98
	0x033F2CC0 STR X19, [X20 + 0x20]
	0x033F2CC4 LDP X20, X19, [X31 + 0x10]
	0x033F2CC8 LDR X30, [X31], #0x20
	0x033F2CCC RET
	0x033F2CD0 STR X30, [X31 - 0x20]!
	0x033F2CD4 STP X20, X19, [X31 + 0x10]
	0x033F2CD8 ADRP X20, 0xFEB000
	0x033F2CDC ADRP X19, 0xD02000
	0x033F2CE0 LDRB W8, [X20 + 0x4BE]
	0x033F2CE4 LDR X19, [X19 + 0x7B8]
	0x033F2CE8 TBNZ X8, 0x0, 0x33F2D00
	0x033F2CEC ADRP X0, 0xD02000
	0x033F2CF0 LDR X0, [X0 + 0x7B8]
	0x033F2CF4 BL 0x1C16CF4
	0x033F2CF8 MOVZ W8, 0x1
	0x033F2CFC STRB W8, [X20 + 0x4BE]
	0x033F2D00 LDR X0, [X19]
	0x033F2D04 LDR W8, [X0 + 0xE0]
	0x033F2D08 CBNZ W8, 0x33F2D10
	0x033F2D0C BL 0x1C16DFC
	0x033F2D10 ADRP X20, 0xFE7000
	0x033F2D14 LDRB W8, [X20 + 0x88E]
	0x033F2D18 CBNZ W8, 0x33F2D30
	0x033F2D1C ADRP X0, 0xD02000
	0x033F2D20 LDR X0, [X0 + 0x7B8]
	0x033F2D24 BL 0x1C16CF4
	0x033F2D28 MOVZ W8, 0x1
	0x033F2D2C STRB W8, [X20 + 0x88E]
	0x033F2D30 LDR X0, [X19]
	0x033F2D34 LDR W8, [X0 + 0xE0]
	0x033F2D38 CBNZ W8, 0x33F2D44
	0x033F2D3C BL 0x1C16DFC
	0x033F2D40 LDR X0, [X19]
	0x033F2D44 BL 0x1C16D0C
	0x033F2D48 LDR X19, [X0]
	0x033F2D4C CBZ X19, 0x33F2D64
	0x033F2D50 MOV X0, X19
	0x033F2D54 BL 0x33EF398
	0x033F2D58 TBNZ X0, 0x4, 0x33F2D64
	0x033F2D5C LDR X0, [X19 + 0x28]
	0x033F2D60 B 0x33F2D68
	0x033F2D64 MOV X0, X31
	0x033F2D68 LDP X20, X19, [X31 + 0x10]
	0x033F2D6C LDR X30, [X31], #0x20
	0x033F2D70 RET
	0x033F2D74 STR X30, [X31 - 0x20]!
	0x033F2D78 STP X20, X19, [X31 + 0x10]
	0x033F2D7C MOV X8, X2
	0x033F2D80 MOV X19, X1
	0x033F2D84 AND W2, W3, 0x1
	0x033F2D88 MOV X1, X8
	0x033F2D8C MOV X20, X0
	0x033F2D90 BL 0x33F7A98
	0x033F2D94 STR X19, [X20 + 0x20]
	0x033F2D98 LDP X20, X19, [X31 + 0x10]
	0x033F2D9C LDR X30, [X31], #0x20
	0x033F2DA0 RET
	0x033F2DA4 SUB X31, X31, 0x50
	0x033F2DA8 STP X30, X23, [X31 + 0x20]
	0x033F2DAC STP X22, X21, [X31 + 0x30]
	0x033F2DB0 STP X20, X19, [X31 + 0x40]
	0x033F2DB4 MOV W20, W2
	0x033F2DB8 MOV X19, X1
	0x033F2DBC MOV X21, X0
	0x033F2DC0 BL 0x33ED11C
	0x033F2DC4 TBZ X0, 0x0, 0x33F2DD0
	0x033F2DC8 MOV W0, W31
	0x033F2DCC B 0x33F2E18
	0x033F2DD0 MOV X22, X21
	0x033F2DD4 LDR X23, [X22 + 0x40]!
	0x033F2DD8 BL 0x1C16D44
	0x033F2DDC CBNZ X23, 0x33F2E08
	0x033F2DE0 BL 0x1C16D44
	0x033F2DE4 ADD X1, X31, 0x18
	0x033F2DE8 ADD X2, X31, 0x10
	0x033F2DEC ADD X3, X31, 0x8
	0x033F2DF0 MOV X0, X22
	0x033F2DF4 STP X31, X19, [X31 + 0x10]
	0x033F2DF8 STR X31, [X31 + 0x8]
	0x033F2DFC BL 0x1C2416C
	0x033F2E00 LDR X8, [X31 + 0x8]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xFEC000
	009 Move W8, [X21+1118]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xD3C000
	017 Move X0, [X0+1960]
	018 Call 0x1C17CF4
	019 Move X0, 0xD3C000
	020 Move X0, [X0+1968]
	021 Call 0x1C17CF4
	022 Move X0, 0xD3C000
	023 Move X0, [X0+1976]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+1118], W8
	027 Move [X31+12], W31
	028 Move X23, [X19+72]
	029 Call 0x1C17D44
	030 Compare X20, 0
	031 JumpIfEqual {110}
	032 Move W21, [X20+56]
	033 Call 0x1C17D44
	034 Move TEMP, X21
	035 And TEMP, TEMP, 0x200000
	036 Compare TEMP, 0x200000
	037 JumpIfNotEqual {92}
	038 Move W21, [X20+56]
	039 Call 0x1C17D44
	040 Move TEMP, X21
	041 And TEMP, TEMP, 0x80000
	042 Compare TEMP, 0x80000
	043 JumpIfEqual {92}
	044 Compare X23, 0
	045 JumpIfEqual {110}
	046 Move X21, X23
	047 Add X21, X21, 64
	048 Move X22, [X21]
	049 Call 0x1C17D44
	050 Compare X22, 0
	051 JumpIfNotEqual {66}
	052 Call 0x1C17D44
	053 Move X8, 0xD3C000
	054 Move X8, [X8+1968]
	055 Move X0, [X8]
	056 Call 0x1C17F10
	057 Move X8, 0xD3C000
	058 Move X8, [X8+1960]
	059 Move X22, X0
	060 Move X1, [X8]
	061 Call 0x319BF58, X0
	062 Move X0, X21
	063 Move X1, X22
	064 Move X2, X31
	065 Call 0x1C25138
	066 Move X21, [X21]
	067 Call 0x1C17D44
	068 Compare X21, 0
	069 JumpIfEqual {94}
	070 Move [X31+12], W31
	071 Add X1, X31, 12
	072 Move X0, X21
	073 Move X2, X31
	074 Call Monitor.Enter, X0, X1
	075 Move X8, 0xD3C000
	076 Move X8, [X8+1976]
	077 Move X2, [X8]
	078 Move X0, X21
	079 Move X1, X20
	080 Call 0x319C66C, X0, X1
	081 Move X20, X31
	082 Move W8, [X31+12]
	083 Compare W8, 0
	084 JumpIfEqual {88}
	085 Move X0, X21
	086 Move X1, X31
	087 Call Monitor.Exit, X0
	088 Compare X20, 0
	089 JumpIfEqual {94}
	090 Move X0, X20
	091 Call 0x1C17F18
	092 Compare X23, 0
	093 JumpIfEqual {110}
	094 Add X20, X23, 60
	095 Call 0x1C17D44
	096 Move X0, X20
	097 Call 0x1C252B0
	098 Compare W0, 0
	099 JumpIfNotEqual {102}
	100 Move X0, X19
	101 Call Task.FinishStageTwo, X0
	102 Move X20, [X31+48]
	103 Move X19, [X31+56]
	104 Move X22, [X31+32]
	105 Move X21, [X31+40]
	106 Move X30, [X31+16]
	107 Move X23, [X31+24]
	108 Add X31, X31, 64
	109 Return 
	110 Call 0x1C17F20
	111 Move X22, X0
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X0, X22
	114 Call 0x3EB2AD0
	115 Move X20, [X0]
	116 Call 0x3EB2AE0
	117 Move X20, X31
	118 Move X22, X0
	119 Move W8, [X31+12]
	120 Compare W8, 0
	121 JumpIfEqual {125}
	122 Move X0, X21
	123 Move X1, X31
	124 Call Monitor.Exit, X0
	125 Compare X20, 0
	126 JumpIfNotEqual {129}
	127 Move X0, X22
	128 Call 0x1D2D690
	129 Move X0, X20
	130 Call 0x1C17F18
	131 Call 0x1991590

Method: System.Void AddExceptionsFromChildren()

Disassembly:
	0x033F2690 BL 0x1C16F20
	0x033F2694 MOV W1, W31
	0x033F2698 B 0x33F269C
	0x033F269C SUB X31, X31, 0x30
	0x033F26A0 STP X30, X21, [X31 + 0x10]
	0x033F26A4 STP X20, X19, [X31 + 0x20]
	0x033F26A8 ADRP X21, 0xFEB000
	0x033F26AC LDRB W8, [X21 + 0x460]
	0x033F26B0 MOV W20, W1
	0x033F26B4 MOV X19, X0
	0x033F26B8 TBNZ X8, 0x0, 0x33F26D0
	0x033F26BC ADRP X0, 0xD02000
	0x033F26C0 LDR X0, [X0 + 0x7B8]
	0x033F26C4 BL 0x1C16CF4
	0x033F26C8 MOVZ W8, 0x1
	0x033F26CC STRB W8, [X21 + 0x460]
	0x033F26D0 TBZ X20, 0x0, 0x33F2700
	0x033F26D4 ADD X3, X31, 0xC
	0x033F26D8 MOVZ W1, 0x20000
	0x033F26DC MOVZ W2, 0x1620000
	0x033F26E0 MOV X0, X19
	0x033F26E4 STR W31, [X31 + 0xC]
	0x033F26E8 BL 0x33EFCF8
	0x033F26EC TBNZ X0, 0x0, 0x33F2714
	0x033F26F0 LDRB W8, [X31 + 0xE]
	0x033F26F4 TBNZ X8, 0x6, 0x33F2714
	0x033F26F8 MOV W0, W31
	0x033F26FC B 0x33F27A4
	0x033F2700 LDR W20, [X19 + 0x38]
	0x033F2704 BL 0x1C16D44
	0x033F2708 BL 0x1C16D44
	0x033F270C ORR W8, W20, 0x20000
	0x033F2710 STR W8, [X19 + 0x38]
	0x033F2714 MOV X0, X19
	0x033F2718 BL 0x33F06F8
	0x033F271C TBNZ X0, 0x0, 0x33F2734
	0x033F2720 LDR W20, [X19 + 0x38]
	0x033F2724 BL 0x1C16D44
	0x033F2728 AND W8, W20, 0x600000
	0x033F272C CMP W8, 0x400000
	0x033F2730 B.NE 0x33F2774
	0x033F2734 MOV X20, X19
	0x033F2738 LDR W21, [X20 + 0x38]!
	0x033F273C BL 0x1C16D44
	0x033F2740 AND W8, W21, 0x600000
	0x033F2744 CMP W8, 0x400000
	0x033F2748 B.EQ 0x33F27A0
	0x033F274C BL 0x1C16D44
	0x033F2750 LDR W21, [X20]
	0x033F2754 BL 0x1C16D44
	0x033F2758 ORR W1, W21, 0x400000
	0x033F275C MOV X0, X20
	0x033F2760 BL 0x1C24300
	0x033F2764 TBNZ X0, 0x16, 0x33F27A0
	0x033F2768 MOV X0, X19
	0x033F276C BL 0x33EFA40
	0x033F2770 B 0x33F27A0
	0x033F2774 ADRP X20, 0xD02000
	0x033F2778 LDR X20, [X20 + 0x7B8]
	0x033F277C LDR X0, [X20]
	0x033F2780 LDR W8, [X0 + 0xE0]
	0x033F2784 CBNZ W8, 0x33F2790
	0x033F2788 BL 0x1C16DFC
	0x033F278C LDR X0, [X20]
	0x033F2790 BL 0x1C16D0C
	0x033F2794 MOV X1, X0
	0x033F2798 MOV X0, X19
	0x033F279C BL 0x33F27B4
	0x033F27A0 MOVZ W0, 0x1
	0x033F27A4 LDP X20, X19, [X31 + 0x20]
	0x033F27A8 LDP X30, X21, [X31 + 0x10]
	0x033F27AC ADD X31, X31, 0x30
	0x033F27B0 RET
	0x033F27B4 STR X30, [X31 - 0x40]!
	0x033F27B8 STP X24, X23, [X31 + 0x10]
	0x033F27BC STP X22, X21, [X31 + 0x20]
	0x033F27C0 STP X20, X19, [X31 + 0x30]
	0x033F27C4 ADRP X21, 0xFEB000
	0x033F27C8 LDRB W8, [X21 + 0x484]
	0x033F27CC MOV X19, X1
	0x033F27D0 MOV X20, X0
	0x033F27D4 TBNZ X8, 0x0, 0x33F2810
	0x033F27D8 ADRP X0, 0xD33000
	0x033F27DC LDR X0, [X0 + 0x948]
	0x033F27E0 BL 0x1C16CF4
	0x033F27E4 ADRP X0, 0xD29000
	0x033F27E8 LDR X0, [X0 + 0x580]
	0x033F27EC BL 0x1C16CF4
	0x033F27F0 ADRP X0, 0xD3B000
	0x033F27F4 LDR X0, [X0 + 0x7F0]
	0x033F27F8 BL 0x1C16CF4
	0x033F27FC ADRP X0, 0xD02000
	0x033F2800 LDR X0, [X0 + 0x7B8]
	0x033F2804 BL 0x1C16CF4
	0x033F2808 MOVZ W8, 0x1
	0x033F280C STRB W8, [X21 + 0x484]
	0x033F2810 LDR X23, [X19]
	0x033F2814 STR X20, [X19]
	0x033F2818 MOV X0, X20
	0x033F281C BL 0x33F0B40
	0x033F2820 MOV X21, X0
	0x033F2824 CBZ X0, 0x33F28CC
	0x033F2828 ADRP X24, 0xD02000
	0x033F282C LDR X24, [X24 + 0x7B8]
	0x033F2830 LDR X0, [X24]
	0x033F2834 LDR W8, [X0 + 0xE0]
	0x033F2838 CBNZ W8, 0x33F2844
	0x033F283C BL 0x1C16DFC
	0x033F2840 LDR X0, [X24]
	0x033F2844 LDR X8, [X0 + 0xB8]
	0x033F2848 LDR X22, [X8 + 0x40]
	0x033F284C CBNZ X22, 0x33F2898
	0x033F2850 ADRP X8, 0xD33000
	0x033F2854 LDR X8, [X8 + 0x948]
	0x033F2858 LDR X0, [X8]
	0x033F285C BL 0x1C16F10
	0x033F2860 ADRP X8, 0xD3B000
	0x033F2864 LDR X8, [X8 + 0x7F0]
	0x033F2868 MOV X22, X0
	0x033F286C LDR X2, [X8]
	0x033F2870 MOV X1, X31
	0x033F2874 MOV X3, X31
	0x033F2878 BL 0x33E1224
	0x033F287C LDR X0, [X24]
	0x033F2880 LDR W8, [X0 + 0xE0]
	0x033F2884 CBNZ W8, 0x33F2890
	0x033F2888 BL 0x1C16DFC
	0x033F288C LDR X0, [X24]
	0x033F2890 LDR X8, [X0 + 0xB8]
	0x033F2894 STR X22, [X8 + 0x40]
	0x033F2898 ADRP X8, 0xD29000
	0x033F289C LDR X8, [X8 + 0x580]
	0x033F28A0 LDR X0, [X8]
	0x033F28A4 LDR W8, [X0 + 0xE0]
	0x033F28A8 CBNZ W8, 0x33F28B0
	0x033F28AC BL 0x1C16DFC
	0x033F28B0 MOVZ W3, 0x1
	0x033F28B4 MOV X0, X21
	0x033F28B8 MOV X1, X22
	0x033F28BC MOV X2, X20
	0x033F28C0 MOV X4, X31
	0x033F28C4 BL 0x33E49D8
	0x033F28C8 B 0x33F28D4
	0x033F28CC MOV X0, X20
	0x033F28D0 BL 0x33F24E0
	0x033F28D4 MOVZ W1, 0x1
	0x033F28D8 MOV X0, X20
	0x033F28DC BL 0x33EFB68
	0x033F28E0 STR X23, [X19]
	0x033F28E4 LDP X20, X19, [X31 + 0x30]
	0x033F28E8 LDP X22, X21, [X31 + 0x20]
	0x033F28EC LDP X24, X23, [X31 + 0x10]
	0x033F28F0 LDR X30, [X31], #0x40
	0x033F28F4 RET
	0x033F28F8 B 0x33F2908
	0x033F28FC B 0x33F2908
	0x033F2900 B 0x33F2908
	0x033F2904 B 0x33F2908
	0x033F2908 CMP W1, 0x1
	0x033F290C B.NE 0x33F292C
	0x033F2910 BL 0x3EB1AD0
	0x033F2914 LDR X20, [X0]
	0x033F2918 BL 0x3EB1AE0
	0x033F291C STR X23, [X19]
	0x033F2920 CBZ X20, 0x33F28E4
	0x033F2924 MOV X0, X20
	0x033F2928 BL 0x1C16F18
	0x033F292C STR X23, [X19]
	0x033F2930 B 0x33F293C
	0x033F2934 STR X23, [X19]
	0x033F2938 CBNZ X20, 0x33F2940
	0x033F293C BL 0x1D2C690
	0x033F2940 MOV X0, X20
	0x033F2944 BL 0x1C16F18
	0x033F2948 BL 0x1990590
	0x033F294C STR X30, [X31 - 0x20]!
	0x033F2950 STP X20, X19, [X31 + 0x10]
	0x033F2954 ADRP X20, 0xFEB000
	0x033F2958 LDRB W8, [X20 + 0x461]
	0x033F295C MOV X19, X0
	0x033F2960 TBNZ X8, 0x0, 0x33F2978
	0x033F2964 ADRP X0, 0xD02000
	0x033F2968 LDR X0, [X0 + 0x7B8]
	0x033F296C BL 0x1C16CF4
	0x033F2970 MOVZ W8, 0x1
	0x033F2974 STRB W8, [X20 + 0x461]
	0x033F2978 CBZ X19, 0x33F29C0
	0x033F297C ADRP X8, 0xD02000
	0x033F2980 LDR X8, [X8 + 0x7B8]
	0x033F2984 LDR X9, [X19]
	0x033F2988 LDR X8, [X8]
	0x033F298C LDRB W11, [X9 + 0x130]
	0x033F2990 LDRB W10, [X8 + 0x130]
	0x033F2994 CMP W11, W10
	0x033F2998 B.CC 0x33F29C0
	0x033F299C LDR X9, [X9 + 0xC8]
	0x033F29A0 ADD X9, X9, X10, 0x3, LSL
	0x033F29A4 LDUR X9, [X9 - 0x8]
	0x033F29A8 CMP X9, X8
	0x033F29AC B.NE 0x33F29C0
	0x033F29B0 MOV X0, X19
	0x033F29B4 LDP X20, X19, [X31 + 0x10]
	0x033F29B8 LDR X30, [X31], #0x20
	0x033F29BC B 0x33F24E0
	0x033F29C0 BL 0x1C16F20
	0x033F29C4 STR X30, [X31 - 0x20]!
	0x033F29C8 STP X20, X19, [X31 + 0x10]
	0x033F29CC ADRP X20, 0xFEB000
	0x033F29D0 LDRB W8, [X20 + 0x462]
	0x033F29D4 MOV X19, X0
	0x033F29D8 TBNZ X8, 0x0, 0x33F29FC
	0x033F29DC ADRP X0, 0xD2B000
	0x033F29E0 LDR X0, [X0 + 0xE48]
	0x033F29E4 BL 0x1C16CF4
	0x033F29E8 ADRP X0, 0xD02000
	0x033F29EC LDR X0, [X0 + 0xE70]
	0x033F29F0 BL 0x1C16CF4
	0x033F29F4 MOVZ W8, 0x1
	0x033F29F8 STRB W8, [X20 + 0x462]
	0x033F29FC LDR X0, [X19 + 0x18]
	0x033F2A00 CBZ X0, 0x33F2A1C
	0x033F2A04 ADRP X8, 0xD02000
	0x033F2A08 LDR X8, [X8 + 0xE70]
	0x033F2A0C LDR X9, [X0]
	0x033F2A10 LDR X8, [X8]
	0x033F2A14 CMP X9, X8
	0x033F2A18 B.EQ 0x33F2A5C
	0x033F2A1C ADRP X8, 0xD2B000
	0x033F2A20 LDR X8, [X8 + 0xE48]
	0x033F2A24 LDR X1, [X8]
	0x033F2A28 BL 0x1C16E00
	0x033F2A2C CBZ X0, 0x33F2A50
	0x033F2A30 LDR X8, [X0 + 0x40]
	0x033F2A34 LDR X1, [X19 + 0x20]
	0x033F2A38 LDR X3, [X0 + 0x18]
	0x033F2A3C LDR X2, [X0 + 0x28]
	0x033F2A40 LDP X20, X19, [X31 + 0x10]
	0x033F2A44 MOV X0, X8
	0x033F2A48 LDR X30, [X31], #0x20
	0x033F2A4C BR X3
	0x033F2A50 LDP X20, X19, [X31 + 0x10]
	0x033F2A54 LDR X30, [X31], #0x20
	0x033F2A58 RET
	0x033F2A5C LDR X8, [X0 + 0x40]
	0x033F2A60 LDR X2, [X0 + 0x18]
	0x033F2A64 LDR X1, [X0 + 0x28]
	0x033F2A68 LDP X20, X19, [X31 + 0x10]
	0x033F2A6C MOV X0, X8
	0x033F2A70 LDR X30, [X31], #0x20
	0x033F2A74 BR X2
	0x033F2A78 STR X30, [X31 - 0x20]!
	0x033F2A7C STP X20, X19, [X31 + 0x10]
	0x033F2A80 LDR W20, [X0 + 0x38]
	0x033F2A84 MOV X19, X0
	0x033F2A88 BL 0x1C16D44
	0x033F2A8C BL 0x1C16D44
	0x033F2A90 ORR W8, W20, 0x100000
	0x033F2A94 STR W8, [X19 + 0x38]
	0x033F2A98 LDP X20, X19, [X31 + 0x10]
	0x033F2A9C LDR X30, [X31], #0x20
	0x033F2AA0 RET
	0x033F2AA4 STR X30, [X31 - 0x40]!
	0x033F2AA8 STP X24, X23, [X31 + 0x10]
	0x033F2AAC STP X22, X21, [X31 + 0x20]
	0x033F2AB0 STP X20, X19, [X31 + 0x30]
	0x033F2AB4 ADRP X23, 0xFEB000
	0x033F2AB8 LDRB W8, [X23 + 0x464]
	0x033F2ABC MOV W21, W3
	0x033F2AC0 MOV W22, W2
	0x033F2AC4 MOV X20, X1
	0x033F2AC8 MOV X19, X0
	0x033F2ACC TBNZ X8, 0x0, 0x33F2B14

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X19, 0xFEC000
	011 Move W8, [X19+1119]
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0xD02000
	018 Move X0, [X0+3584]
	019 Call 0x1C17CF4
	020 Move X0, 0xD3C000
	021 Move X0, [X0+1944]
	022 Call 0x1C17CF4
	023 Move X0, 0xD3C000
	024 Move X0, [X0+1952]
	025 Call 0x1C17CF4
	026 Move X0, 0xD02000
	027 Move X0, [X0+3608]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X19+1119], W8
	031 Move X24, [X21+72]
	032 Call 0x1C17D44
	033 Compare X24, 0
	034 JumpIfEqual {202}
	035 Move X19, [X24+64]
	036 Call 0x1C17D44
	037 Compare X19, 0
	038 JumpIfEqual {202}
	039 Move [X31+12], W31
	040 Add X1, X31, 12
	041 Move X0, X19
	042 Move X2, X31
	043 Call Monitor.Enter, X0, X1
	044 Move X10, 0xD3C000
	045 Move X8, [X19]
	046 Move X10, [X10+1944]
	047 NotImplemented "Instruction LDRH not yet implemented."
	048 Move X1, [X10]
	049 Compare X9, 0
	050 JumpIfEqual {57}
	051 Move X10, [X8+176]
	052 Add X10, X10, 8
	053 NotImplemented "Instruction LDUR not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Subtract X9, X9, 1
	056 Add X10, X10, 16
	057 Move X0, X19
	058 Move W2, W31
	059 Call 0x1C5D788
	060 NotImplemented "Instruction LDRSW not yet implemented."
	061 Add X8, X8, X9
	062 Add X0, X8, 312
	063 Move X8, [X0]
	064 Move X1, [X0+8]
	065 Move X0, X19
	066 NotImplemented "Instruction BLR not yet implemented."
	067 Move X20, X0
	068 Compare X0, 0
	069 JumpIfEqual {217}
	070 Move X23, 0xD02000
	071 Move X25, 0xD3C000
	072 Move X23, [X23+3608]
	073 Move X25, [X25+1952]
	074 Move X8, [X20]
	075 Move X1, [X23]
	076 NotImplemented "Instruction LDRH not yet implemented."
	077 Compare X9, 0
	078 JumpIfEqual {85}
	079 Move X10, [X8+176]
	080 Add X10, X10, 8
	081 NotImplemented "Instruction LDUR not yet implemented."
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Subtract X9, X9, 1
	084 Add X10, X10, 16
	085 Move X0, X20
	086 Move W2, W31
	087 Call 0x1C5D788
	088 NotImplemented "Instruction LDRSW not yet implemented."
	089 Add X8, X8, X9
	090 Add X0, X8, 312
	091 Move X8, [X0]
	092 Move X1, [X0+8]
	093 Move X0, X20
	094 NotImplemented "Instruction BLR not yet implemented."
	095 Move TEMP, X0
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 JumpIfNotEqual {151}
	099 Move X8, [X20]
	100 Move X1, [X25]
	101 NotImplemented "Instruction LDRH not yet implemented."
	102 Compare X9, 0
	103 JumpIfEqual {110}
	104 Move X10, [X8+176]
	105 Add X10, X10, 8
	106 NotImplemented "Instruction LDUR not yet implemented."
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Subtract X9, X9, 1
	109 Add X10, X10, 16
	110 Move X0, X20
	111 Move W2, W31
	112 Call 0x1C5D788
	113 NotImplemented "Instruction LDRSW not yet implemented."
	114 Add X8, X8, X9
	115 Add X0, X8, 312
	116 Move X8, [X0]
	117 Move X1, [X0+8]
	118 Move X0, X20
	119 NotImplemented "Instruction BLR not yet implemented."
	120 Move X22, X0
	121 Compare X0, 0
	122 JumpIfEqual {212}
	123 Move W26, [X22+56]
	124 Call 0x1C17D44
	125 Move TEMP, X26
	126 And TEMP, TEMP, 0x200000
	127 Compare TEMP, 0x200000
	128 JumpIfNotEqual {74}
	129 Move W26, [X22+56]
	130 Call 0x1C17D44
	131 Move TEMP, X26
	132 And TEMP, TEMP, 0x80000
	133 Compare TEMP, 0x80000
	134 JumpIfEqual {74}
	135 Move X22, [X22+72]
	136 Call 0x1C17D44
	137 Compare X22, 0
	138 JumpIfEqual {213}
	139 Move X22, [X22+32]
	140 Call 0x1C17D44
	141 Compare X22, 0
	142 JumpIfEqual {214}
	143 Move X0, X22
	144 Move W1, W31
	145 Move X2, X31
	146 Call TaskExceptionHolder.CreateExceptionObject, X0, X1, X2
	147 Move X1, X0
	148 Move X0, X21
	149 Move W2, W31
	150 Call Task.AddException, X0, X1, X2
	151 Move X22, X31
	152 Move W25, W31
	153 Move W23, 7
	154 Compare X20, 0
	155 JumpIfEqual {179}
	156 Move X10, 0xD02000
	157 Move X8, [X20]
	158 Move X10, [X10+3584]
	159 NotImplemented "Instruction LDRH not yet implemented."
	160 Move X1, [X10]
	161 Compare X9, 0
	162 JumpIfEqual {169}
	163 Move X10, [X8+176]
	164 Add X10, X10, 8
	165 NotImplemented "Instruction LDUR not yet implemented."
	166 NotImplemented "Instruction CMP not yet implemented."
	167 Subtract X9, X9, 1
	168 Add X10, X10, 16
	169 Move X0, X20
	170 Move W2, W31
	171 Call 0x1C5D788
	172 NotImplemented "Instruction LDRSW not yet implemented."
	173 Add X8, X8, X9
	174 Add X0, X8, 312
	175 Move X8, [X0]
	176 Move X1, [X0+8]
	177 Move X0, X20
	178 NotImplemented "Instruction BLR not yet implemented."
	179 Compare X22, 0
	180 JumpIfNotEqual {218}
	181 Move X20, X31
	182 Move X21, X31
	183 Move TEMP, X25
	184 And TEMP, TEMP, 1
	185 Compare TEMP, 1
	186 JumpIfNotEqual {189}
	187 Move W23, W31
	188 Move X21, X20
	189 Move W8, [X31+12]
	190 Compare W8, 0
	191 JumpIfEqual {195}
	192 Move X0, X19
	193 Move X1, X31
	194 Call Monitor.Exit, X0
	195 Compare X21, 0
	196 JumpIfNotEqual {215}
	197 NotImplemented "Instruction CMP not yet implemented."
	198 Compare W23, 0
	199 JumpIfNotEqual {202}
	200 Call 0x1C17D44
	201 Move [X24+64], X31
	202 Move X20, [X31+64]
	203 Move X19, [X31+72]
	204 Move X22, [X31+48]
	205 Move X21, [X31+56]
	206 Move X24, [X31+32]
	207 Move X23, [X31+40]
	208 Move X26, [X31+16]
	209 Move X25, [X31+24]
	210 Move X30, [X31+80]
	211 Return 
	212 Call 0x1C17F20
	213 Call 0x1C17F20
	214 Call 0x1C17F20
	215 Move X0, X21
	216 Call 0x1C17F18
	217 Call 0x1C17F20
	218 Move X0, X22
	219 Call 0x1C17F18
	220 Move X21, X1
	221 Move X23, X0
	222 Move X23, X0
	223 NotImplemented "Instruction CMP not yet implemented."
	224 Move X0, X23
	225 Call 0x3EB2AD0
	226 Move X22, [X0]
	227 Call 0x3EB2AE0
	228 Move W23, W31
	229 Move W25, 1
	230 Compare X20, 0
	231 JumpIfNotEqual {156}
	232 Move X21, X1
	233 Move X22, X31
	234 Compare X20, 0
	235 JumpIfEqual {259}
	236 Move X10, 0xD02000
	237 Move X8, [X20]
	238 Move X10, [X10+3584]
	239 NotImplemented "Instruction LDRH not yet implemented."
	240 Move X1, [X10]
	241 Compare X9, 0
	242 JumpIfEqual {249}
	243 Move X10, [X8+176]
	244 Add X10, X10, 8
	245 NotImplemented "Instruction LDUR not yet implemented."
	246 NotImplemented "Instruction CMP not yet implemented."
	247 Subtract X9, X9, 1
	248 Add X10, X10, 16
	249 Move X0, X20
	250 Move W2, W31
	251 Call 0x1C5D788
	252 NotImplemented "Instruction LDRSW not yet implemented."
	253 Add X8, X8, X9
	254 Add X0, X8, 312
	255 Move X8, [X0]
	256 Move X1, [X0+8]
	257 Move X0, X20
	258 NotImplemented "Instruction BLR not yet implemented."
	259 Compare X22, 0
	260 JumpIfNotEqual {267}
	261 NotImplemented "Instruction CMP not yet implemented."
	262 Move X0, X23
	263 Call 0x3EB2AD0
	264 Move X20, [X0]
	265 Call 0x3EB2AE0
	266 Move X20, X31
	267 Move X0, X22
	268 Call 0x1C17F18
	269 Move X21, X1
	270 Move X23, X0
	271 Compare X20, 0
	272 JumpIfNotEqual {236}
	273 Move X23, X0
	274 Move W8, [X31+12]
	275 Compare W8, 0
	276 JumpIfEqual {280}
	277 Move X0, X19
	278 Move X1, X31
	279 Call Monitor.Exit, X0
	280 Compare X20, 0
	281 JumpIfNotEqual {284}
	282 Move X0, X23
	283 Call 0x1D2D690
	284 Move X0, X20
	285 Call 0x1C17F18
	286 Call 0x1991590

Method: System.Void Execute()

Disassembly:
	0x033F34E0 STR X8, [X31 + 0x30]
	0x033F34E4 LDR X0, [X31 + 0x30]
	0x033F34E8 BL 0x19903C0
	0x033F34EC LDR X0, [X31 + 0x30]
	0x033F34F0 BL 0x33F3894
	0x033F34F4 STR W0, [X31 + 0x2C]
	0x033F34F8 LDR X8, [X19 + 0x68]
	0x033F34FC STR X8, [X31 + 0x20]
	0x033F3500 LDR X0, [X31 + 0x20]
	0x033F3504 BL 0x19903C0
	0x033F3508 LDR X0, [X31 + 0x20]
	0x033F350C BL 0x33EE7D4
	0x033F3510 STR W0, [X31 + 0x1C]
	0x033F3514 LDR X0, [X19 + 0x90]
	0x033F3518 BL 0x33EE7D4
	0x033F351C STR W0, [X31 + 0x18]
	0x033F3520 LDR W0, [X31 + 0x2C]
	0x033F3524 LDR W1, [X31 + 0x1C]
	0x033F3528 LDR W2, [X31 + 0x18]
	0x033F352C MOV X3, X31
	0x033F3530 BL 0x3225164
	0x033F3534 MOVZ W8, 0x9
	0x033F3538 STR W8, [X31 + 0xE4]
	0x033F353C LDR W8, [X31 + 0xE4]
	0x033F3540 CMP W8, 0x9
	0x033F3544 B.EQ 0x33F359C
	0x033F3548 B 0x33F35BC
	0x033F354C ADRP X8, 0xD08000
	0x033F3550 LDR X8, [X8 + 0x7E8]
	0x033F3554 LDR X0, [X8]
	0x033F3558 BL 0x19903D0
	0x033F355C MOV X0, X31
	0x033F3560 BL 0x340013C
	0x033F3564 STR X0, [X31 + 0x10]
	0x033F3568 LDR X0, [X31 + 0x10]
	0x033F356C BL 0x19903C0
	0x033F3570 LDR X0, [X31 + 0x10]
	0x033F3574 BL 0x33F3894
	0x033F3578 STR W0, [X31 + 0xC]
	0x033F357C LDR X0, [X19 + 0x90]
	0x033F3580 BL 0x33EE7D4
	0x033F3584 STR W0, [X31 + 0x8]
	0x033F3588 LDR W0, [X31 + 0xC]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0]
	005 Move X19, X0
	006 Move X1, [X8+528]
	007 Move X9, [X8+520]
	008 NotImplemented "Instruction BLR not yet implemented."
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X20, X0
	015 Move X0, X20
	016 Call 0x3EB2AD0
	017 Move X20, X0
	018 Move X0, 0xD01000
	019 Move X0, [X0+2000]
	020 Call 0x1C17D08
	021 Move X8, [X20]
	022 Move X1, [X8]
	023 Call 0x1C18270
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {35}
	028 Move X20, [X20]
	029 Call 0x3EB2AE0
	030 Move X0, X19
	031 Move X1, X20
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move W0, 8
	036 Call 0x3EB2AF0
	037 Move X8, [X20]
	038 Move [X0], X8
	039 Move X1, 0xAC2000
	040 Add X1, X1, 3672
	041 Move X2, X31
	042 Call 0x3EB2B00
	043 Move X20, X0
	044 Call 0x3EB2AE0
	045 Move X0, X20
	046 Call 0x1D2D690
	047 Call 0x1991590

Method: System.Void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()

Disassembly:
	0x033F3694 MOV X0, X19
	0x033F3698 BL 0x1D2C690

ISIL:
	001 Move W1, W31

Method: System.Boolean ExecuteEntry(System.Boolean bPreventDoubleExecution)

Disassembly:
	0x033F369C BL 0x1990590
	0x033F36A0 STR X30, [X31 - 0x30]!
	0x033F36A4 STP X22, X21, [X31 + 0x10]
	0x033F36A8 STP X20, X19, [X31 + 0x20]
	0x033F36AC ADRP X22, 0xFEA000
	0x033F36B0 LDRB W8, [X22 + 0x4BB]
	0x033F36B4 MOV W20, W2
	0x033F36B8 MOV X19, X1
	0x033F36BC MOV X21, X0
	0x033F36C0 TBNZ X8, 0x0, 0x33F36D8
	0x033F36C4 ADRP X0, 0xD01000
	0x033F36C8 LDR X0, [X0 + 0x7B8]
	0x033F36CC BL 0x1C16CF4
	0x033F36D0 MOVZ W8, 0x1
	0x033F36D4 STRB W8, [X22 + 0x4BB]
	0x033F36D8 CBZ X19, 0x33F37CC
	0x033F36DC LDR X0, [X19 + 0x28]
	0x033F36E0 CMP X0, X21
	0x033F36E4 B.EQ 0x33F3704
	0x033F36E8 CBZ X0, 0x33F3704
	0x033F36EC AND W2, W20, 0x1
	0x033F36F0 MOV X1, X19
	0x033F36F4 LDP X20, X19, [X31 + 0x20]
	0x033F36F8 LDP X22, X21, [X31 + 0x10]
	0x033F36FC LDR X30, [X31], #0x30
	0x033F3700 B 0x33F36A0
	0x033F3704 CBZ X0, 0x33F3844
	0x033F3708 LDR X8, [X19 + 0x18]
	0x033F370C CBZ X8, 0x33F3840
	0x033F3710 LDR W22, [X19 + 0x38]
	0x033F3714 BL 0x1C16D44
	0x033F3718 TBNZ X22, 0x11, 0x33F3840
	0x033F371C LDR W22, [X19 + 0x38]
	0x033F3720 BL 0x1C16D44
	0x033F3724 AND W8, W22, 0x600000
	0x033F3728 CMP W8, 0x400000
	0x033F372C B.EQ 0x33F3840
	0x033F3730 ADRP X8, 0xD01000
	0x033F3734 LDR X8, [X8 + 0x7B8]
	0x033F3738 LDR X0, [X8]
	0x033F373C LDR W8, [X0 + 0xE0]
	0x033F3740 CBNZ W8, 0x33F3748
	0x033F3744 BL 0x1C16DFC
	0x033F3748 BL 0x33F0424
	0x033F374C CBZ X0, 0x33F37CC
	0x033F3750 LDR W8, [X0 + 0x10]
	0x033F3754 MOV X22, X0
	0x033F3758 CMP W8, 0x14
	0x033F375C B.LT 0x33F3770
	0x033F3760 MOV X0, X31
	0x033F3764 BL 0x32C5C54
	0x033F3768 TBZ X0, 0x0, 0x33F3840
	0x033F376C LDR W8, [X22 + 0x10]
	0x033F3770 ADD W8, W8, 0x1
	0x033F3774 STR W8, [X22 + 0x10]
	0x033F3778 LDR X8, [X21]
	0x033F377C LDP X9, X3, [X8 + 0x188]
	0x033F3780 AND W2, W20, 0x1
	0x033F3784 MOV X0, X21
	0x033F3788 MOV X1, X19
	0x033F378C BLR X9
	0x033F3790 LDR W8, [X22 + 0x10]
	0x033F3794 SUB W8, W8, 0x1
	0x033F3798 BIC W8, W8, W8, 0x1F
	0x033F379C STR W8, [X22 + 0x10]
	0x033F37A0 TBZ X0, 0x0, 0x33F3840
	0x033F37A4 LDR W20, [X19 + 0x38]
	0x033F37A8 BL 0x1C16D44
	0x033F37AC TBNZ X20, 0x11, 0x33F37C4
	0x033F37B0 LDR W19, [X19 + 0x38]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xFEB000
	007 Move W8, [X21+1120]
	008 Move W20, W1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD02000
	015 Move X0, [X0+1976]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1120], W8
	019 Move TEMP, X20
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {39}
	023 Add X3, X31, 12
	024 Move W1, 0x20000
	025 Move W2, 0x1620000
	026 Move X0, X19
	027 Move [X31+12], W31
	028 Call Task.AtomicStateUpdate, X0, X1, X2, X3
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {44}
	033 Move W8, [X31+14]
	034 Move TEMP, X8
	035 And TEMP, TEMP, 64
	036 Compare TEMP, 64
	037 JumpIfEqual {44}
	038 Move W0, W31
	039 Move W20, [X19+56]
	040 Call 0x1C17D44
	041 Call 0x1C17D44
	042 Or W8, W20, 0x20000
	043 Move [X19+56], W8
	044 Move X0, X19
	045 Call Task.get_IsCancellationRequested, X0
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfEqual {54}
	050 Move W20, [X19+56]
	051 Call 0x1C17D44
	052 And W8, W20, 0x600000
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X20, X19
	055 Add X20, X20, 56
	056 Move W21, [X20]
	057 Call 0x1C17D44
	058 And W8, W21, 0x600000
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Call 0x1C17D44
	061 Move W21, [X20]
	062 Call 0x1C17D44
	063 Or W1, W21, 0x400000
	064 Move X0, X20
	065 Call 0x1C25300
	066 Move TEMP, X0
	067 And TEMP, TEMP, 0x400000
	068 Compare TEMP, 0x400000
	069 JumpIfEqual {84}
	070 Move X0, X19
	071 Call Task.CancellationCleanupLogic, X0
	072 Move X20, 0xD02000
	073 Move X20, [X20+1976]
	074 Move X0, [X20]
	075 Move W8, [X0+224]
	076 Compare W8, 0
	077 JumpIfNotEqual {80}
	078 Call 0x1C17DFC
	079 Move X0, [X20]
	080 Call 0x1C17D0C
	081 Move X1, X0
	082 Move X0, X19
	083 Call Task.ExecuteWithThreadLocal, X0, X1
	084 Move W0, 1
	085 Move X20, [X31+32]
	086 Move X19, [X31+40]
	087 Move X30, [X31+16]
	088 Move X21, [X31+24]
	089 Add X31, X31, 48
	090 Return X0

Method: System.Void ExecutionContextCallback(System.Object obj)

Disassembly:
	0x033F394C ADRP X0, 0xD3A000
	0x033F3950 LDR X0, [X0 + 0x830]
	0x033F3954 BL 0x1C16CF4
	0x033F3958 MOVZ W8, 0x1
	0x033F395C STRB W8, [X20 + 0x467]
	0x033F3960 ADDS W31, W22, 0x1
	0x033F3964 B.EQ 0x33F3978
	0x033F3968 MOV X0, X31
	0x033F396C BL 0x33C18F4
	0x033F3970 MOV W23, W0
	0x033F3974 B 0x33F397C
	0x033F3978 MOV W23, W31
	0x033F397C MOV X0, X19
	0x033F3980 MOV W1, W22
	0x033F3984 BL 0x33F3AD4
	0x033F3988 TBZ X0, 0x0, 0x33F3994
	0x033F398C MOVZ W22, 0x1
	0x033F3990 B 0x33F3A40
	0x033F3994 ADRP X8, 0xD3A000
	0x033F3998 LDR X8, [X8 + 0x830]
	0x033F399C LDR X0, [X8]
	0x033F39A0 BL 0x1C16F10
	0x033F39A4 MOV X20, X0
	0x033F39A8 BL 0x33F3BB0
	0x033F39AC MOVZ W2, 0x1
	0x033F39B0 MOV X0, X19
	0x033F39B4 MOV X1, X20
	0x033F39B8 BL 0x33F3C10
	0x033F39BC ADDS W31, W22, 0x1
	0x033F39C0 B.EQ 0x33F39F8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xFEB000
	005 Move W8, [X20+1121]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xD02000
	012 Move X0, [X0+1976]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1121], W8
	016 Compare X19, 0
	017 JumpIfEqual {35}
	018 Move X8, 0xD02000
	019 Move X8, [X8+1976]
	020 Move X9, [X19]
	021 Move X8, [X8]
	022 Move W11, [X9+304]
	023 Move W10, [X8+304]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X9, [X9+200]
	026 Add X9, X9, X10
	027 NotImplemented "Instruction LDUR not yet implemented."
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Call Task.Execute, X0
	034 Return 
	035 Call 0x1C17F20

Method: System.Void InnerInvoke()

Disassembly:
	0x033F39C4 MOV X0, X31
	0x033F39C8 BL 0x33C18F4
	0x033F39CC SUB W8, W0, W23
	0x033F39D0 SXTW X9, W22
	0x033F39D4 CMP X9, X8
	0x033F39D8 B.LE 0x33F3A1C
	0x033F39DC CBZ X20, 0x33F3A60
	0x033F39E0 SUB W1, W22, W8
	0x033F39E4 MOV X0, X20
	0x033F39E8 MOV X2, X21
	0x033F39EC MOV X3, X31
	0x033F39F0 BL 0x33DE8D0
	0x033F39F4 B 0x33F3A10
	0x033F39F8 CBZ X20, 0x33F3A5C
	0x033F39FC MOVN W1, 0x0
	0x033F3A00 MOV X0, X20
	0x033F3A04 MOV X2, X21
	0x033F3A08 MOV X3, X31
	0x033F3A0C BL 0x33DE8D0
	0x033F3A10 MOV W22, W0
	0x033F3A14 MOV X21, X31
	0x033F3A18 B 0x33F3A24
	0x033F3A1C MOV X21, X31
	0x033F3A20 MOV W22, W31
	0x033F3A24 MOV X0, X19
	0x033F3A28 BL 0x33ED11C
	0x033F3A2C TBNZ X0, 0x0, 0x33F3A3C
	0x033F3A30 MOV X0, X19
	0x033F3A34 MOV X1, X20
	0x033F3A38 BL 0x33EF6FC
	0x033F3A3C CBNZ X21, 0x33F3A54
	0x033F3A40 AND W0, W22, 0x1
	0x033F3A44 LDP X20, X19, [X31 + 0x20]
	0x033F3A48 LDP X22, X21, [X31 + 0x10]
	0x033F3A4C LDP X30, X23, [X31], #0x30
	0x033F3A50 RET
	0x033F3A54 MOV X0, X21
	0x033F3A58 BL 0x1C16F18
	0x033F3A5C BL 0x1C16F20
	0x033F3A60 BL 0x1C16F20
	0x033F3A64 B 0x33F3A78
	0x033F3A68 B 0x33F3A78
	0x033F3A6C B 0x33F3A78
	0x033F3A70 B 0x33F3A78
	0x033F3A74 B 0x33F3A78

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xFEB000
	005 Move W8, [X20+1122]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xD2B000
	012 Move X0, [X0+3656]
	013 Call 0x1C17CF4
	014 Move X0, 0xD02000
	015 Move X0, [X0+3696]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1122], W8
	019 Move X0, [X19+24]
	020 Compare X0, 0
	021 JumpIfEqual {27}
	022 Move X8, 0xD02000
	023 Move X8, [X8+3696]
	024 Move X9, [X0]
	025 Move X8, [X8]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X8, 0xD2B000
	028 Move X8, [X8+3656]
	029 Move X1, [X8]
	030 Call 0x1C17E00
	031 Compare X0, 0
	032 JumpIfEqual {42}
	033 Move X8, [X0+64]
	034 Move X1, [X19+32]
	035 Move X3, [X0+24]
	036 Move X2, [X0+40]
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X0, X8
	040 Move X30, [X31+32]
	041 CallNoReturn X3
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Return 
	046 Move X8, [X0+64]
	047 Move X2, [X0+24]
	048 Move X1, [X0+40]
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X0, X8
	052 Move X30, [X31+32]
	053 CallNoReturn X2

Method: System.Void HandleException(System.Exception unhandledException)

Disassembly:
	0x033F358C LDR W2, [X31 + 0x8]
	0x033F3590 MOV W1, W31
	0x033F3594 MOV X3, X31
	0x033F3598 BL 0x3225164
	0x033F359C LDRB W8, [X31 + 0x114]
	0x033F35A0 AND W8, W8, 0x1
	0x033F35A4 STRB W8, [X31 + 0x4]
	0x033F35A8 LDRB W8, [X31 + 0x4]
	0x033F35AC AND W8, W8, 0x1
	0x033F35B0 STRB W8, [X31 + 0x13F]
	0x033F35B4 MOVZ W8, 0x1
	0x033F35B8 STR W8, [X31 + 0xE4]
	0x033F35BC LDRB W0, [X31 + 0x13F]
	0x033F35C0 LDP X30, X19, [X31 + 0x150]
	0x033F35C4 LDR X29, [X31 + 0x140]
	0x033F35C8 ADD X31, X31, 0x160
	0x033F35CC RET
	0x033F35D0 STR X30, [X31 - 0x20]!
	0x033F35D4 STP X20, X19, [X31 + 0x10]
	0x033F35D8 MOV X1, X0
	0x033F35DC LDR X0, [X0 + 0x28]
	0x033F35E0 CBZ X0, 0x33F35EC
	0x033F35E4 MOVZ W2, 0x1
	0x033F35E8 BL 0x33F36A0
	0x033F35EC LDP X20, X19, [X31 + 0x10]
	0x033F35F0 AND W0, W0, 0x1
	0x033F35F4 LDR X30, [X31], #0x20
	0x033F35F8 RET
	0x033F35FC CMP W1, 0x1
	0x033F3600 MOV X19, X0
	0x033F3604 B.NE 0x33F3694
	0x033F3608 MOV X0, X19
	0x033F360C BL 0x3EB1AD0
	0x033F3610 MOV X19, X0
	0x033F3614 ADRP X0, 0xD00000
	0x033F3618 LDR X0, [X0 + 0x7D0]
	0x033F361C BL 0x1C16D08
	0x033F3620 LDR X8, [X19]
	0x033F3624 LDR X1, [X8]
	0x033F3628 BL 0x1C17270
	0x033F362C TBZ X0, 0x0, 0x33F366C
	0x033F3630 LDR X19, [X19]
	0x033F3634 BL 0x3EB1AE0
	0x033F3638 ADRP X0, 0xD3A000
	0x033F363C LDR X0, [X0 + 0x6D0]
	0x033F3640 BL 0x1C16D08
	0x033F3644 BL 0x1C16F10
	0x033F3648 MOV X1, X19
	0x033F364C MOV X20, X0
	0x033F3650 BL 0x33ECF28
	0x033F3654 ADRP X0, 0xD3A000
	0x033F3658 LDR X0, [X0 + 0x818]
	0x033F365C BL 0x1C16D08
	0x033F3660 MOV X1, X0
	0x033F3664 MOV X0, X20
	0x033F3668 BL 0x1C16DEC
	0x033F366C MOVZ W0, 0x8
	0x033F3670 BL 0x3EB1AF0
	0x033F3674 LDR X8, [X19]
	0x033F3678 STR X8, [X0]
	0x033F367C ADRP X1, 0xAC1000
	0x033F3680 ADD X1, X1, 0xE58
	0x033F3684 MOV X2, X31
	0x033F3688 BL 0x3EB1B00
	0x033F368C MOV X19, X0
	0x033F3690 BL 0x3EB1AE0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xFEB000
	007 Move W8, [X21+1123]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xD09000
	015 Move X0, [X0+2008]
	016 Call 0x1C17CF4
	017 Move X0, 0xD09000
	018 Move X0, [X0+2216]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1123], W8
	022 Compare X19, 0
	023 JumpIfEqual {70}
	024 Move X8, 0xD09000
	025 Move X8, [X8+2216]
	026 Move X9, [X19]
	027 Move X8, [X8]
	028 Move W11, [X9+304]
	029 Move W10, [X8+304]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X9, [X9+200]
	032 Add X9, X9, X10
	033 NotImplemented "Instruction LDUR not yet implemented."
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X0, X20
	036 Call Task.get_IsCancellationRequested, X0
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {70}
	041 Move X21, [X20+72]
	042 Call 0x1C17D44
	043 Compare X21, 0
	044 JumpIfEqual {80}
	045 Move X8, 0xD09000
	046 Move X8, [X8+2008]
	047 Move X21, [X21+40]
	048 Move X22, [X19+144]
	049 Move X0, [X8]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X0, X21
	055 Move X1, X22
	056 Move X2, X31
	057 Call CancellationToken.op_Equality, X0, X1
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {70}
	062 Move W21, [X20+56]
	063 Call 0x1C17D44
	064 Call 0x1C17D44
	065 Or W8, W21, 0x100000
	066 Move W2, 1
	067 Move [X20+56], W8
	068 Move X0, X20
	069 Move X1, X19
	070 Move X0, X20
	071 Move X1, X19
	072 Move W2, W31
	073 Move X20, [X31+32]
	074 Move X19, [X31+40]
	075 Move X22, [X31+16]
	076 Move X21, [X31+24]
	077 Move X30, [X31+48]
	078 Call Task.AddException, X0, X1, X2
	079 Return 
	080 Call 0x1C17F20

Method: System.Runtime.CompilerServices.TaskAwaiter GetAwaiter()

Disassembly:
	0x033EE394 ADRP X0, 0xD0D000

ISIL:
	001 Return X0

Method: System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait(System.Boolean continueOnCapturedContext)

Disassembly:
	0x033EE3A0 CBZ X21, 0x33EE3CC
	0x033EE3A4 LDR X8, [X21]
	0x033EE3A8 LDRB W9, [X0 + 0x130]
	0x033EE3AC LDRB W10, [X8 + 0x130]
	0x033EE3B0 CMP W10, W9
	0x033EE3B4 B.CC 0x33EE3CC
	0x033EE3B8 LDR X8, [X8 + 0xC8]
	0x033EE3BC ADD X8, X8, X9, 0x3, LSL
	0x033EE3C0 LDUR X8, [X8 - 0x8]
	0x033EE3C4 CMP X8, X0
	0x033EE3C8 B.EQ 0x33EE410
	0x033EE3CC ADD X0, X31, 0x8
	0x033EE3D0 MOVZ W1, 0x1

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+8], X31
	003 Move [X31+16], X30
	004 Move X8, X0
	005 And W2, W1, 1
	006 Add X0, X31, 0
	007 Move X1, X8
	008 Move X3, X31
	009 Move [X31], X31
	010 Call ConfiguredTaskAwaitable..ctor, X0, X1, X2
	011 Move X0, [X31]
	012 Move X1, [X31+8]
	013 Move X30, [X31+16]
	014 Add X31, X31, 32
	015 Return X0

Method: System.Void SetContinuationForAwait(System.Action continuationAction, System.Boolean continueOnCapturedContext, System.Boolean flowExecutionContext)

Disassembly:
	0x033F3AA4 MOV X0, X19
	0x033F3AA8 BL 0x33ED11C
	0x033F3AAC TBNZ X0, 0x0, 0x33F3ABC
	0x033F3AB0 MOV X0, X19
	0x033F3AB4 MOV X1, X20
	0x033F3AB8 BL 0x33EF6FC
	0x033F3ABC CBNZ X21, 0x33F3AC8
	0x033F3AC0 MOV X0, X22
	0x033F3AC4 BL 0x1D2C690
	0x033F3AC8 MOV X0, X21
	0x033F3ACC BL 0x1C16F18
	0x033F3AD0 BL 0x1990590
	0x033F3AD4 STR X30, [X31 - 0x30]!
	0x033F3AD8 STP X22, X21, [X31 + 0x10]
	0x033F3ADC STP X20, X19, [X31 + 0x20]
	0x033F3AE0 ADRP X21, 0xFEA000
	0x033F3AE4 LDRB W8, [X21 + 0x468]
	0x033F3AE8 MOV W20, W1
	0x033F3AEC MOV X19, X0
	0x033F3AF0 TBNZ X8, 0x0, 0x33F3B08
	0x033F3AF4 ADRP X0, 0xD0C000
	0x033F3AF8 LDR X0, [X0 + 0x470]
	0x033F3AFC BL 0x1C16CF4
	0x033F3B00 MOVZ W8, 0x1
	0x033F3B04 STRB W8, [X21 + 0x468]
	0x033F3B08 MOV X0, X19
	0x033F3B0C STR W31, [X31 + 0x8]
	0x033F3B10 BL 0x33ED11C
	0x033F3B14 TBZ X0, 0x0, 0x33F3B20
	0x033F3B18 MOVZ W20, 0x1
	0x033F3B1C B 0x33F3B9C
	0x033F3B20 CBZ W20, 0x33F3B9C
	0x033F3B24 ADRP X21, 0xD0C000
	0x033F3B28 LDR X21, [X21 + 0x470]
	0x033F3B2C LDR X0, [X21]
	0x033F3B30 LDR W8, [X0 + 0xE0]
	0x033F3B34 CBNZ W8, 0x33F3B40
	0x033F3B38 BL 0x1C16DFC
	0x033F3B3C LDR X0, [X21]
	0x033F3B40 LDR X8, [X0 + 0xB8]
	0x033F3B44 LDR W22, [X8]
	0x033F3B48 STR W31, [X31 + 0x8]
	0x033F3B4C LDR W8, [X0 + 0xE0]
	0x033F3B50 CBNZ W8, 0x33F3B58
	0x033F3B54 BL 0x1C16DFC
	0x033F3B58 LDR W8, [X31 + 0x8]
	0x033F3B5C CMP W8, W22
	0x033F3B60 CSET W20, LT
	0x033F3B64 B.GE 0x33F3B9C
	0x033F3B68 LDR X0, [X21]
	0x033F3B6C LDR W8, [X0 + 0xE0]
	0x033F3B70 CBNZ W8, 0x33F3B78
	0x033F3B74 BL 0x1C16DFC
	0x033F3B78 ADD X0, X31, 0x8
	0x033F3B7C MOVN W1, 0x0
	0x033F3B80 MOV X2, X31
	0x033F3B84 BL 0x33DEDD8
	0x033F3B88 MOV X0, X19
	0x033F3B8C BL 0x33ED11C
	0x033F3B90 TBNZ X0, 0x0, 0x33F3B9C
	0x033F3B94 LDR X0, [X21]
	0x033F3B98 B 0x33F3B4C
	0x033F3B9C MOV W0, W20
	0x033F3BA0 LDP X20, X19, [X31 + 0x20]
	0x033F3BA4 LDP X22, X21, [X31 + 0x10]
	0x033F3BA8 LDR X30, [X31], #0x30
	0x033F3BAC RET
	0x033F3BB0 STP X30, X21, [X31 - 0x20]!
	0x033F3BB4 STP X20, X19, [X31 + 0x10]
	0x033F3BB8 ADRP X20, 0xFEA000
	0x033F3BBC ADRP X21, 0xD39000
	0x033F3BC0 LDRB W8, [X20 + 0x487]
	0x033F3BC4 LDR X21, [X21 + 0xF98]
	0x033F3BC8 MOV X19, X0
	0x033F3BCC TBNZ X8, 0x0, 0x33F3BE4
	0x033F3BD0 ADRP X0, 0xD39000
	0x033F3BD4 LDR X0, [X0 + 0xF98]
	0x033F3BD8 BL 0x1C16CF4
	0x033F3BDC MOVZ W8, 0x1
	0x033F3BE0 STRB W8, [X20 + 0x487]
	0x033F3BE4 LDR X0, [X21]
	0x033F3BE8 LDR W8, [X0 + 0xE0]
	0x033F3BEC CBNZ W8, 0x33F3BF4
	0x033F3BF0 BL 0x1C16DFC
	0x033F3BF4 MOV X0, X19
	0x033F3BF8 LDP X20, X19, [X31 + 0x10]
	0x033F3BFC MOV W1, W31
	0x033F3C00 MOV W2, W31
	0x033F3C04 MOV X3, X31
	0x033F3C08 LDP X30, X21, [X31], #0x20
	0x033F3C0C B 0x33DE4B4
	0x033F3C10 STR X30, [X31 - 0x30]!
	0x033F3C14 STP X22, X21, [X31 + 0x10]
	0x033F3C18 STP X20, X19, [X31 + 0x20]
	0x033F3C1C ADRP X22, 0xFEA000
	0x033F3C20 LDRB W8, [X22 + 0x471]
	0x033F3C24 MOV W21, W2
	0x033F3C28 MOV X19, X1
	0x033F3C2C MOV X20, X0
	0x033F3C30 TBNZ X8, 0x0, 0x33F3C48
	0x033F3C34 ADRP X0, 0xD3A000
	0x033F3C38 LDR X0, [X0 + 0x7C8]
	0x033F3C3C BL 0x1C16CF4
	0x033F3C40 MOVZ W8, 0x1
	0x033F3C44 STRB W8, [X22 + 0x471]
	0x033F3C48 AND W2, W21, 0x1
	0x033F3C4C MOV X0, X20
	0x033F3C50 MOV X1, X19
	0x033F3C54 BL 0x33F2DA4
	0x033F3C58 TBZ X0, 0x0, 0x33F3C6C
	0x033F3C5C LDP X20, X19, [X31 + 0x20]
	0x033F3C60 LDP X22, X21, [X31 + 0x10]
	0x033F3C64 LDR X30, [X31], #0x30
	0x033F3C68 RET
	0x033F3C6C CBZ X19, 0x33F3CE0
	0x033F3C70 ADRP X10, 0xD3A000
	0x033F3C74 LDR X8, [X19]
	0x033F3C78 LDR X10, [X10 + 0x7C8]
	0x033F3C7C LDRH W9, [X8 + 0x12E]
	0x033F3C80 LDR X1, [X10]
	0x033F3C84 CBZ X9, 0x33F3CA8
	0x033F3C88 LDR X10, [X8 + 0xB0]
	0x033F3C8C ADD X10, X10, 0x8
	0x033F3C90 LDUR X11, [X10 - 0x8]
	0x033F3C94 CMP X11, X1
	0x033F3C98 B.EQ 0x33F3CB8
	0x033F3C9C SUBS X9, X9, 0x1

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xFEB000
	009 Move W8, [X23+1124]
	010 Move W21, W3
	011 Move W22, W2
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {35}
	018 Move X0, 0xD3B000
	019 Move X0, [X0+2040]
	020 Call 0x1C17CF4
	021 Move X0, 0xD33000
	022 Move X0, [X0+2392]
	023 Call 0x1C17CF4
	024 Move X0, 0xD3B000
	025 Move X0, [X0+2048]
	026 Call 0x1C17CF4
	027 Move X0, 0xD09000
	028 Move X0, [X0+2024]
	029 Call 0x1C17CF4
	030 Move X0, 0xD01000
	031 Move X0, [X0+1728]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X23+1124], W8
	035 Move TEMP, X22
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {136}
	039 Move X0, X31
	040 Call SynchronizationContext.get_Current
	041 Compare X0, 0
	042 JumpIfEqual {71}
	043 Move X1, X31
	044 Move X22, X0
	045 Call "il2cpp_vm_object_is_inst", X0
	046 Move X8, 0xD01000
	047 Move X8, [X8+1728]
	048 Move X9, 0xD33000
	049 Move X23, X0
	050 Move X8, [X8]
	051 Move X9, [X9+2392]
	052 Move W10, [X8+224]
	053 Move X24, [X9]
	054 Compare W10, 0
	055 JumpIfNotEqual {58}
	056 Move X0, X8
	057 Call 0x1C17DFC
	058 Move X0, X24
	059 Move X1, X31
	060 Call Type.GetTypeFromHandle, X0
	061 Move X1, X0
	062 Move X0, X23
	063 Move X2, X31
	064 Call Type.op_Inequality, X0, X1
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {71}
	069 Move X8, 0xD3B000
	070 Move X8, [X8+2040]
	071 Move X23, 0xD09000
	072 Move X23, [X23+2024]
	073 Move X0, [X23]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {78}
	077 Call 0x1C17DFC
	078 Call TaskScheduler.get_InternalCurrent
	079 Compare X0, 0
	080 JumpIfEqual {136}
	081 Move X22, X0
	082 Move X0, [X23]
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {87}
	086 Call 0x1C17DFC
	087 Move X24, 0xFE7000
	088 Move W8, [X24+2189]
	089 Compare W8, 0
	090 JumpIfNotEqual {96}
	091 Move X0, 0xD09000
	092 Move X0, [X0+2024]
	093 Call 0x1C17CF4
	094 Move W8, 1
	095 Move [X24+2189], W8
	096 Move X0, [X23]
	097 Move W8, [X0+224]
	098 Compare W8, 0
	099 JumpIfNotEqual {102}
	100 Call 0x1C17DFC
	101 Move X0, [X23]
	102 Move X8, [X0+184]
	103 Move X8, [X8+8]
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move X8, 0xD3B000
	106 Move X8, [X8+2048]
	107 Move X0, [X8]
	108 Call 0x1C17F10
	109 And W2, W21, 1
	110 Move X1, X20
	111 Move X23, X0
	112 Call AwaitTaskContinuation..ctor, X0, X1, X2
	113 Move X0, X19
	114 Move X1, X23
	115 Move W2, W31
	116 Move [X23+32], X22
	117 Call Task.AddTaskContinuation, X0, X1, X2
	118 Move TEMP, X0
	119 And TEMP, TEMP, 1
	120 Compare TEMP, 1
	121 JumpIfEqual {144}
	122 Move X8, [X23]
	123 Move X0, X23
	124 Move X1, X19
	125 Move X20, [X31+48]
	126 Move X19, [X31+56]
	127 Move X4, [X8+376]
	128 Move X3, [X8+384]
	129 Move X22, [X31+32]
	130 Move X21, [X31+40]
	131 Move X24, [X31+16]
	132 Move X23, [X31+24]
	133 Move W2, W31
	134 Move X30, [X31+64]
	135 CallNoReturn X4
	136 Move X0, X19
	137 Move X1, X20
	138 Move W2, W31
	139 Call Task.AddTaskContinuation, X0, X1, X2
	140 Move TEMP, X0
	141 And TEMP, TEMP, 1
	142 Compare TEMP, 1
	143 JumpIfNotEqual {152}
	144 Move X20, [X31+48]
	145 Move X19, [X31+56]
	146 Move X22, [X31+32]
	147 Move X21, [X31+40]
	148 Move X24, [X31+16]
	149 Move X23, [X31+24]
	150 Move X30, [X31+64]
	151 Return 
	152 Move X0, X20
	153 Move X20, [X31+48]
	154 Move X19, [X31+56]
	155 Move X22, [X31+32]
	156 Move X21, [X31+40]
	157 Move X24, [X31+16]
	158 Move X23, [X31+24]
	159 Move X30, [X31+64]
	160 Call AwaitTaskContinuation.UnsafeScheduleAction, X0
	161 Return 

Method: System.Runtime.CompilerServices.YieldAwaitable Yield()

Disassembly:
	0x033F3EBC CMP W1, W8
	0x033F3EC0 B.NE 0x33F3EE4

ISIL:
	001 Move X0, X31
	002 Return X0

Method: System.Void Wait()

Disassembly:
	0x033F3EC4 MOV X0, X20
	0x033F3EC8 BL 0x3EB1AD0
	0x033F3ECC LDR X8, [X0]

ISIL:
	001 Move TEMP, 0
	002 Not TEMP
	003 Move W1, TEMP
	004 Move X2, X31

Method: System.Boolean Wait(System.Int32 millisecondsTimeout)

Disassembly:
	0x033F4020 TBNZ X8, 0x0, 0x33F4038
	0x033F4024 ADRP X0, 0xD07000

ISIL:
	001 Move X2, X31
	002 Call Task.Wait, X0, X1, X2
	003 Return X0

Method: System.Boolean Wait(System.Int32 millisecondsTimeout, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x033F3ED0 STR X8, [X31 + 0x8]
	0x033F3ED4 BL 0x3EB1AE0
	0x033F3ED8 LDR X0, [X31 + 0x8]
	0x033F3EDC CBNZ X21, 0x33F3E00
	0x033F3EE0 B 0x33F3E04
	0x033F3EE4 STR X31, [X31 + 0x8]
	0x033F3EE8 B 0x33F3EF0
	0x033F3EEC MOV X20, X0
	0x033F3EF0 CBZ X21, 0x33F3EF8
	0x033F3EF4 STR X21, [X19]
	0x033F3EF8 LDR X8, [X31 + 0x8]
	0x033F3EFC CBNZ X8, 0x33F3F08
	0x033F3F00 MOV X0, X20
	0x033F3F04 BL 0x1D2C690
	0x033F3F08 LDR X0, [X31 + 0x8]
	0x033F3F0C BL 0x1C16F18
	0x033F3F10 BL 0x1990590
	0x033F3F14 STP X30, X21, [X31 - 0x20]!
	0x033F3F18 STP X20, X19, [X31 + 0x10]
	0x033F3F1C MOV X20, X1
	0x033F3F20 MOV X1, X31
	0x033F3F24 MOV X19, X2
	0x033F3F28 MOV X21, X0
	0x033F3F2C BL 0x33BDD8C
	0x033F3F30 STP X20, X19, [X21 + 0x10]
	0x033F3F34 LDP X20, X19, [X31 + 0x10]
	0x033F3F38 LDP X30, X21, [X31], #0x20
	0x033F3F3C RET
	0x033F3F40 STR X30, [X31 - 0x20]!
	0x033F3F44 STP X20, X19, [X31 + 0x10]
	0x033F3F48 ADRP X19, 0xFEA000
	0x033F3F4C ADRP X20, 0xD28000
	0x033F3F50 LDRB W8, [X19 + 0x46C]
	0x033F3F54 LDR X20, [X20 + 0x728]
	0x033F3F58 TBNZ X8, 0x0, 0x33F3F70
	0x033F3F5C ADRP X0, 0xD28000
	0x033F3F60 LDR X0, [X0 + 0x728]
	0x033F3F64 BL 0x1C16CF4
	0x033F3F68 MOVZ W8, 0x1
	0x033F3F6C STRB W8, [X19 + 0x46C]
	0x033F3F70 LDR X0, [X20]
	0x033F3F74 LDR W8, [X0 + 0xE0]
	0x033F3F78 CBZ W8, 0x33F3F88
	0x033F3F7C LDP X20, X19, [X31 + 0x10]
	0x033F3F80 LDR X30, [X31], #0x20
	0x033F3F84 RET
	0x033F3F88 LDP X20, X19, [X31 + 0x10]
	0x033F3F8C LDR X30, [X31], #0x20
	0x033F3F90 B 0x1C16DFC
	0x033F3F94 STR X30, [X31 - 0x30]!
	0x033F3F98 STP X22, X21, [X31 + 0x10]
	0x033F3F9C STP X20, X19, [X31 + 0x20]
	0x033F3FA0 ADRP X21, 0xFEA000
	0x033F3FA4 ADRP X22, 0xD08000
	0x033F3FA8 LDRB W8, [X21 + 0x46D]
	0x033F3FAC LDR X22, [X22 + 0x7E8]
	0x033F3FB0 MOV X19, X1
	0x033F3FB4 MOV X20, X0
	0x033F3FB8 TBNZ X8, 0x0, 0x33F3FD0
	0x033F3FBC ADRP X0, 0xD08000
	0x033F3FC0 LDR X0, [X0 + 0x7E8]
	0x033F3FC4 BL 0x1C16CF4
	0x033F3FC8 MOVZ W8, 0x1
	0x033F3FCC STRB W8, [X21 + 0x46D]
	0x033F3FD0 LDR X0, [X22]
	0x033F3FD4 LDR W8, [X0 + 0xE0]
	0x033F3FD8 CBNZ W8, 0x33F3FE0
	0x033F3FDC BL 0x1C16DFC
	0x033F3FE0 BL 0x33F4008
	0x033F3FE4 MOV X2, X0
	0x033F3FE8 MOV X0, X20
	0x033F3FEC MOV X1, X19
	0x033F3FF0 LDP X20, X19, [X31 + 0x20]
	0x033F3FF4 LDP X22, X21, [X31 + 0x10]
	0x033F3FF8 MOV X3, X31
	0x033F3FFC MOV W4, W31
	0x033F4000 LDR X30, [X31], #0x30
	0x033F4004 B 0x33F40A8
	0x033F4008 STR X30, [X31 - 0x20]!
	0x033F400C STP X20, X19, [X31 + 0x10]
	0x033F4010 ADRP X20, 0xFE9000
	0x033F4014 ADRP X19, 0xD07000
	0x033F4018 LDRB W8, [X20 + 0x4BD]
	0x033F401C LDR X19, [X19 + 0x7E8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xFEB000
	007 Move W8, [X22+1125]
	008 Move X20, X2
	009 Move W21, W1
	010 Move X19, X0
	011 Move [X31+8], X2
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD09000
	017 Move X0, [X0+2008]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1125], W8
	021 Add W31, W21, 2
	022 Move W22, [X19+56]
	023 Call 0x1C17D44
	024 Move W8, 0x11000000
	025 And W8, W22, W8
	026 Move W9, 0x1000000
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move W20, 1
	029 Move X0, X19
	030 Move W1, W21
	031 Move X2, X20
	032 Move X3, X31
	033 Call Task.InternalWait, X0, X1, X2
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {64}
	038 Move W20, [X19+56]
	039 Call 0x1C17D44
	040 Move W8, 0x11000000
	041 And W8, W20, W8
	042 Move W9, 0x1000000
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X0, X19
	045 Call Task.NotifyDebuggerOfWaitCompletionIfNecessary, X0
	046 Move W20, [X19+56]
	047 Call 0x1C17D44
	048 And W8, W20, 0x600000
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X8, 0xD09000
	051 Move X8, [X8+2008]
	052 Move X0, [X8]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Add X0, X31, 8
	058 Move X1, X31
	059 Call CancellationToken.ThrowIfCancellationRequested, X0
	060 Move W1, 1
	061 Move X0, X19
	062 Move W20, 1
	063 Call Task.ThrowIfExceptional, X0, X1
	064 Move W20, W31
	065 Move W0, W20
	066 Move X20, [X31+32]
	067 Move X19, [X31+40]
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Move X30, [X31+48]
	071 Return X0
	072 Move X0, 0xD09000
	073 Move X0, [X0+1888]
	074 Call 0x1C17D08
	075 Call 0x1C17F10
	076 Move X19, X0
	077 Move X0, 0xD3A000
	078 Move X0, [X0+4056]
	079 Call 0x1C17D08
	080 Move X1, X0
	081 Move X0, X19
	082 Move X2, X31
	083 Call ArgumentOutOfRangeException..ctor, X0, X1
	084 Move X0, 0xD3A000
	085 Move X0, [X0+2064]
	086 Call 0x1C17D08
	087 Move X1, X0
	088 Move X0, X19
	089 Call 0x1C17DEC

Method: System.Boolean WrappedTryRunInline()

Disassembly:
	0x033F45D0 LDR X27, [X27 + 0x838]
	0x033F45D4 CBNZ W8, 0x33F45DC
	0x033F45D8 BL 0x1C16DFC
	0x033F45DC ADD X1, X31, 0xC
	0x033F45E0 ADD X2, X31, 0x8
	0x033F45E4 MOV W0, W19
	0x033F45E8 BL 0x33F4210
	0x033F45EC LDR X0, [X27]
	0x033F45F0 LDP W26, W25, [X31 + 0x8]
	0x033F45F4 BL 0x1C16F10
	0x033F45F8 MOV X1, X22
	0x033F45FC MOV X2, X24
	0x033F4600 MOV X3, X23
	0x033F4604 MOV W4, W25
	0x033F4608 MOV W5, W26
	0x033F460C MOV X27, X0
	0x033F4610 BL 0x33F4330
	0x033F4614 MOV X0, X22
	0x033F4618 MOV X1, X27
	0x033F461C MOV X2, X21
	0x033F4620 MOV X3, X20
	0x033F4624 MOV W4, W19
	0x033F4628 BL 0x33F43E4
	0x033F462C MOV X0, X27
	0x033F4630 LDP X20, X19, [X31 + 0x50]
	0x033F4634 LDP X22, X21, [X31 + 0x40]
	0x033F4638 LDP X24, X23, [X31 + 0x30]
	0x033F463C LDP X26, X25, [X31 + 0x20]
	0x033F4640 LDP X30, X27, [X31 + 0x10]
	0x033F4644 ADD X31, X31, 0x60
	0x033F4648 RET
	0x033F464C ADRP X0, 0xD04000
	0x033F4650 LDR X0, [X0 + 0x528]
	0x033F4654 BL 0x1C16D08
	0x033F4658 BL 0x1C16F10
	0x033F465C MOV X19, X0
	0x033F4660 ADRP X0, 0xD29000
	0x033F4664 LDR X0, [X0 + 0x620]
	0x033F4668 B 0x33F4688
	0x033F466C ADRP X0, 0xD04000
	0x033F4670 LDR X0, [X0 + 0x528]
	0x033F4674 BL 0x1C16D08
	0x033F4678 BL 0x1C16F10
	0x033F467C MOV X19, X0
	0x033F4680 ADRP X0, 0xD27000
	0x033F4684 LDR X0, [X0 + 0x758]
	0x033F4688 BL 0x1C16D08
	0x033F468C MOV X1, X0
	0x033F4690 MOV X0, X19
	0x033F4694 MOV X2, X31
	0x033F4698 BL 0x330E100
	0x033F469C ADRP X0, 0xD39000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X1, X0
	005 Move X0, [X0+40]
	006 Compare X0, 0
	007 JumpIfEqual {10}
	008 Move W2, 1
	009 Call TaskScheduler.TryRunInline, X0, X1, X2
	010 Move X20, [X31+16]
	011 Move X19, [X31+24]
	012 And W0, W0, 1
	013 Move X30, [X31+32]
	014 Return X0
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move X19, X0
	017 Move X0, X19
	018 Call 0x3EB2AD0
	019 Move X19, X0
	020 Move X0, 0xD00000
	021 Move X0, [X0+2000]
	022 Call 0x1C17D08
	023 Move X8, [X19]
	024 Move X1, [X8]
	025 Call 0x1C18270
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {45}
	030 Move X19, [X19]
	031 Call 0x3EB2AE0
	032 Move X0, 0xD3A000
	033 Move X0, [X0+1744]
	034 Call 0x1C17D08
	035 Call 0x1C17F10
	036 Move X1, X19
	037 Move X20, X0
	038 Call TaskSchedulerException..ctor, X0, X1
	039 Move X0, 0xD3A000
	040 Move X0, [X0+2072]
	041 Call 0x1C17D08
	042 Move X1, X0
	043 Move X0, X20
	044 Call 0x1C17DEC
	045 Move W0, 8
	046 Call 0x3EB2AF0
	047 Move X8, [X19]
	048 Move [X0], X8
	049 Move X1, 0xAC1000
	050 Add X1, X1, 3672
	051 Move X2, X31
	052 Call 0x3EB2B00
	053 Move X19, X0
	054 Call 0x3EB2AE0
	055 Move X0, X19
	056 Call 0x1D2D690
	057 Call 0x1991590

Method: System.Boolean InternalWait(System.Int32 millisecondsTimeout, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x033F4028 LDR X0, [X0 + 0x7E8]
	0x033F402C BL 0x1C16CF4
	0x033F4030 MOVZ W8, 0x1
	0x033F4034 STRB W8, [X20 + 0x4BD]
	0x033F4038 LDR X0, [X19]
	0x033F403C LDR W8, [X0 + 0xE0]
	0x033F4040 CBNZ W8, 0x33F4048
	0x033F4044 BL 0x1C16DFC
	0x033F4048 BL 0x33F2CD0
	0x033F404C CBNZ X0, 0x33F409C
	0x033F4050 LDR X0, [X19]
	0x033F4054 LDR W8, [X0 + 0xE0]
	0x033F4058 CBNZ W8, 0x33F4060
	0x033F405C BL 0x1C16DFC
	0x033F4060 ADRP X20, 0xFE5000
	0x033F4064 LDRB W8, [X20 + 0x88D]
	0x033F4068 CBNZ W8, 0x33F4080
	0x033F406C ADRP X0, 0xD07000
	0x033F4070 LDR X0, [X0 + 0x7E8]
	0x033F4074 BL 0x1C16CF4
	0x033F4078 MOVZ W8, 0x1
	0x033F407C STRB W8, [X20 + 0x88D]
	0x033F4080 LDR X0, [X19]
	0x033F4084 LDR W8, [X0 + 0xE0]
	0x033F4088 CBNZ W8, 0x33F4094
	0x033F408C BL 0x1C16DFC
	0x033F4090 LDR X0, [X19]
	0x033F4094 LDR X8, [X0 + 0xB8]
	0x033F4098 LDR X0, [X8 + 0x8]
	0x033F409C LDP X20, X19, [X31 + 0x10]
	0x033F40A0 LDR X30, [X31], #0x20
	0x033F40A4 RET
	0x033F40A8 STR X30, [X31 - 0x50]!
	0x033F40AC STP X26, X25, [X31 + 0x10]
	0x033F40B0 STP X24, X23, [X31 + 0x20]
	0x033F40B4 STP X22, X21, [X31 + 0x30]
	0x033F40B8 STP X20, X19, [X31 + 0x40]
	0x033F40BC ADRP X24, 0xFE9000
	0x033F40C0 LDRB W8, [X24 + 0x46E]
	0x033F40C4 MOV W19, W4
	0x033F40C8 MOV X20, X3
	0x033F40CC MOV X21, X2
	0x033F40D0 MOV X23, X1
	0x033F40D4 MOV X22, X0
	0x033F40D8 TBNZ X8, 0x0, 0x33F40FC
	0x033F40DC ADRP X0, 0xD39000
	0x033F40E0 LDR X0, [X0 + 0x838]
	0x033F40E4 BL 0x1C16CF4
	0x033F40E8 ADRP X0, 0xD00000
	0x033F40EC LDR X0, [X0 + 0x7B8]
	0x033F40F0 BL 0x1C16CF4
	0x033F40F4 MOVZ W8, 0x1
	0x033F40F8 STRB W8, [X24 + 0x46E]
	0x033F40FC STR X31, [X31 + 0x8]
	0x033F4100 CBZ X23, 0x33F4194
	0x033F4104 CBZ X21, 0x33F41B4
	0x033F4108 ADRP X8, 0xD00000
	0x033F410C LDR X8, [X8 + 0x7B8]
	0x033F4110 ADRP X26, 0xD39000
	0x033F4114 LDR X0, [X8]
	0x033F4118 LDR W8, [X0 + 0xE0]
	0x033F411C LDR X26, [X26 + 0x838]
	0x033F4120 CBNZ W8, 0x33F4128
	0x033F4124 BL 0x1C16DFC
	0x033F4128 ADD X1, X31, 0xC
	0x033F412C ADD X2, X31, 0x8
	0x033F4130 MOV W0, W19
	0x033F4134 BL 0x33F4210
	0x033F4138 LDR X0, [X26]
	0x033F413C LDP W25, W24, [X31 + 0x8]
	0x033F4140 BL 0x1C16F10
	0x033F4144 MOV X1, X22
	0x033F4148 MOV X2, X23
	0x033F414C MOV X3, X31
	0x033F4150 MOV W4, W24
	0x033F4154 MOV W5, W25
	0x033F4158 MOV X26, X0
	0x033F415C BL 0x33F4330
	0x033F4160 MOV X0, X22
	0x033F4164 MOV X1, X26
	0x033F4168 MOV X2, X21
	0x033F416C MOV X3, X20
	0x033F4170 MOV W4, W19
	0x033F4174 BL 0x33F43E4
	0x033F4178 MOV X0, X26
	0x033F417C LDP X20, X19, [X31 + 0x40]
	0x033F4180 LDP X22, X21, [X31 + 0x30]
	0x033F4184 LDP X24, X23, [X31 + 0x20]
	0x033F4188 LDP X26, X25, [X31 + 0x10]
	0x033F418C LDR X30, [X31], #0x50
	0x033F4190 RET
	0x033F4194 ADRP X0, 0xD04000
	0x033F4198 LDR X0, [X0 + 0x528]
	0x033F419C BL 0x1C16D08
	0x033F41A0 BL 0x1C16F10
	0x033F41A4 MOV X19, X0
	0x033F41A8 ADRP X0, 0xD29000
	0x033F41AC LDR X0, [X0 + 0x620]
	0x033F41B0 B 0x33F41D0
	0x033F41B4 ADRP X0, 0xD04000
	0x033F41B8 LDR X0, [X0 + 0x528]
	0x033F41BC BL 0x1C16D08
	0x033F41C0 BL 0x1C16F10
	0x033F41C4 MOV X19, X0
	0x033F41C8 ADRP X0, 0xD27000
	0x033F41CC LDR X0, [X0 + 0x758]
	0x033F41D0 BL 0x1C16D08
	0x033F41D4 MOV X1, X0
	0x033F41D8 MOV X0, X19
	0x033F41DC MOV X2, X31
	0x033F41E0 BL 0x330E100
	0x033F41E4 ADRP X0, 0xD39000
	0x033F41E8 LDR X0, [X0 + 0x840]
	0x033F41EC BL 0x1C16D08
	0x033F41F0 MOV X1, X0
	0x033F41F4 MOV X0, X19
	0x033F41F8 BL 0x1C16DEC
	0x033F41FC MOV W8, W3
	0x033F4200 MOV X3, X2
	0x033F4204 MOV X2, X4
	0x033F4208 MOV W4, W8
	0x033F420C B 0x33F40A8
	0x033F4210 STR X30, [X31 - 0x20]!
	0x033F4214 STP X20, X19, [X31 + 0x10]
	0x033F4218 MOVZ W8, 0x2
	0x033F421C MOVK W8, 0x80000
	0x033F4220 BICS W31, W8, W0, 0x0
	0x033F4224 B.EQ 0x33F4270
	0x033F4228 MOVZ W8, 0xFF80
	0x033F422C MOVK W8, 0xFFF00000
	0x033F4230 ANDS W31, W0, W8, 0x0
	0x033F4234 B.NE 0x33F42A0
	0x033F4238 ORN W8, W31, W0, 0x0
	0x033F423C ANDS W31, W8, 0x70000
	0x033F4240 B.EQ 0x33F42D4
	0x033F4244 LDP X20, X19, [X31 + 0x10]
	0x033F4248 MOVZ W8, 0x5F
	0x033F424C ANDS W31, W0, 0x20
	0x033F4250 MOVZ W9, 0x1200
	0x033F4254 MOVZ W10, 0x200
	0x033F4258 AND W8, W0, W8, 0x0
	0x033F425C CSEL W9, W10, W9, EQ
	0x033F4260 STR W8, [X1]
	0x033F4264 STR W9, [X2]
	0x033F4268 LDR X30, [X31], #0x20
	0x033F426C RET
	0x033F4270 ADRP X0, 0xD07000
	0x033F4274 LDR X0, [X0 + 0x760]
	0x033F4278 BL 0x1C16D08
	0x033F427C BL 0x1C16F10
	0x033F4280 MOV X19, X0
	0x033F4284 ADRP X0, 0xD39000
	0x033F4288 LDR X0, [X0 + 0x848]
	0x033F428C BL 0x1C16D08
	0x033F4290 MOV X20, X0
	0x033F4294 ADRP X0, 0xD39000
	0x033F4298 LDR X0, [X0 + 0x850]
	0x033F429C B 0x33F4300
	0x033F42A0 ADRP X0, 0xD07000
	0x033F42A4 LDR X0, [X0 + 0x760]
	0x033F42A8 BL 0x1C16D08
	0x033F42AC BL 0x1C16F10
	0x033F42B0 MOV X19, X0
	0x033F42B4 ADRP X0, 0xD39000
	0x033F42B8 LDR X0, [X0 + 0x848]
	0x033F42BC BL 0x1C16D08
	0x033F42C0 MOV X1, X0
	0x033F42C4 MOV X0, X19
	0x033F42C8 MOV X2, X31
	0x033F42CC BL 0x3316014
	0x033F42D0 B 0x33F4318
	0x033F42D4 ADRP X0, 0xD07000
	0x033F42D8 LDR X0, [X0 + 0x760]
	0x033F42DC BL 0x1C16D08
	0x033F42E0 BL 0x1C16F10
	0x033F42E4 MOV X19, X0
	0x033F42E8 ADRP X0, 0xD39000
	0x033F42EC LDR X0, [X0 + 0x848]
	0x033F42F0 BL 0x1C16D08
	0x033F42F4 MOV X20, X0
	0x033F42F8 ADRP X0, 0xD39000
	0x033F42FC LDR X0, [X0 + 0x858]
	0x033F4300 BL 0x1C16D08
	0x033F4304 MOV X2, X0
	0x033F4308 MOV X0, X19
	0x033F430C MOV X1, X20
	0x033F4310 MOV X3, X31
	0x033F4314 BL 0x3311888
	0x033F4318 ADRP X0, 0xD39000
	0x033F431C LDR X0, [X0 + 0x860]
	0x033F4320 BL 0x1C16D08
	0x033F4324 MOV X1, X0
	0x033F4328 MOV X0, X19
	0x033F432C BL 0x1C16DEC
	0x033F4330 SUB X31, X31, 0x60
	0x033F4334 STR X30, [X31 + 0x10]
	0x033F4338 STP X26, X25, [X31 + 0x20]
	0x033F433C STP X24, X23, [X31 + 0x30]
	0x033F4340 STP X22, X21, [X31 + 0x40]
	0x033F4344 STP X20, X19, [X31 + 0x50]
	0x033F4348 ADRP X25, 0xFE9000
	0x033F434C ADRP X26, 0xD00000
	0x033F4350 LDRB W8, [X25 + 0x492]
	0x033F4354 LDR X26, [X26 + 0x7B8]
	0x033F4358 MOV W20, W5
	0x033F435C MOV W22, W4
	0x033F4360 MOV X23, X3
	0x033F4364 MOV X24, X2
	0x033F4368 MOV X19, X1
	0x033F436C MOV X21, X0
	0x033F4370 TBNZ X8, 0x0, 0x33F4388
	0x033F4374 ADRP X0, 0xD00000
	0x033F4378 LDR X0, [X0 + 0x7B8]
	0x033F437C BL 0x1C16CF4
	0x033F4380 MOVZ W8, 0x1
	0x033F4384 STRB W8, [X25 + 0x492]
	0x033F4388 LDR X0, [X26]
	0x033F438C LDR W8, [X0 + 0xE0]
	0x033F4390 CBNZ W8, 0x33F4398
	0x033F4394 BL 0x1C16DFC
	0x033F4398 MOV W0, W22
	0x033F439C BL 0x33F0388
	0x033F43A0 MOV X3, X0
	0x033F43A4 MOV X0, X21
	0x033F43A8 MOV X1, X24
	0x033F43AC MOV X2, X23
	0x033F43B0 MOV X4, X31
	0x033F43B4 MOV W5, W22
	0x033F43B8 MOV W6, W20
	0x033F43BC MOV X7, X31
	0x033F43C0 BL 0x33EEEAC
	0x033F43C4 STR X19, [X21 + 0x50]
	0x033F43C8 LDP X20, X19, [X31 + 0x50]
	0x033F43CC LDP X22, X21, [X31 + 0x40]
	0x033F43D0 LDP X24, X23, [X31 + 0x30]
	0x033F43D4 LDP X26, X25, [X31 + 0x20]
	0x033F43D8 LDR X30, [X31 + 0x10]
	0x033F43DC ADD X31, X31, 0x60
	0x033F43E0 RET
	0x033F43E4 SUB X31, X31, 0x50
	0x033F43E8 STP X30, X25, [X31 + 0x10]
	0x033F43EC STP X24, X23, [X31 + 0x20]
	0x033F43F0 STP X22, X21, [X31 + 0x30]
	0x033F43F4 STP X20, X19, [X31 + 0x40]
	0x033F43F8 ADRP X20, 0xFE9000
	0x033F43FC STR X3, [X31 + 0x8]
	0x033F4400 ADRP X25, 0xD39000
	0x033F4404 ADRP X24, 0xD07000
	0x033F4408 LDRB W8, [X20 + 0x470]
	0x033F440C LDR X25, [X25 + 0x7E0]
	0x033F4410 LDR X24, [X24 + 0x7D8]
	0x033F4414 MOV W22, W4
	0x033F4418 MOV X23, X2
	0x033F441C MOV X21, X1
	0x033F4420 MOV X19, X0
	0x033F4424 TBNZ X8, 0x0, 0x33F4448
	0x033F4428 ADRP X0, 0xD07000
	0x033F442C LDR X0, [X0 + 0x7D8]
	0x033F4430 BL 0x1C16CF4
	0x033F4434 ADRP X0, 0xD39000
	0x033F4438 LDR X0, [X0 + 0x7E0]
	0x033F443C BL 0x1C16CF4
	0x033F4440 MOVZ W8, 0x1
	0x033F4444 STRB W8, [X20 + 0x470]
	0x033F4448 LDR X0, [X25]
	0x033F444C BL 0x1C16F10
	0x033F4450 MOV X1, X21
	0x033F4454 MOV W2, W22
	0x033F4458 MOV X3, X23
	0x033F445C MOV X20, X0
	0x033F4460 BL 0x33F46B4
	0x033F4464 LDR X0, [X24]
	0x033F4468 LDR W8, [X0 + 0xE0]
	0x033F446C CBNZ W8, 0x33F4474
	0x033F4470 BL 0x1C16DFC
	0x033F4474 ADD X0, X31, 0x8
	0x033F4478 MOV X1, X31
	0x033F447C BL 0x33DD2F8
	0x033F4480 TBZ X0, 0x0, 0x33F44C8
	0x033F4484 MOV X0, X19
	0x033F4488 BL 0x33ED11C
	0x033F448C TBNZ X0, 0x0, 0x33F44B0
	0x033F4490 LDR X0, [X24]
	0x033F4494 LDR W8, [X0 + 0xE0]
	0x033F4498 CBNZ W8, 0x33F44A0
	0x033F449C BL 0x1C16DFC
	0x033F44A0 ADD X0, X31, 0x8
	0x033F44A4 MOV X1, X31
	0x033F44A8 BL 0x33DD2B0
	0x033F44AC TBZ X0, 0x0, 0x33F44D0
	0x033F44B0 CBZ X21, 0x33F453C
	0x033F44B4 LDR X1, [X31 + 0x8]
	0x033F44B8 MOV X0, X21
	0x033F44BC MOV X2, X31
	0x033F44C0 MOV X3, X31
	0x033F44C4 B 0x33F44E4
	0x033F44C8 CBNZ X21, 0x33F44E8
	0x033F44CC B 0x33F453C
	0x033F44D0 CBZ X21, 0x33F453C
	0x033F44D4 LDR X1, [X31 + 0x8]
	0x033F44D8 MOV X0, X21
	0x033F44DC MOV X2, X19
	0x033F44E0 MOV X3, X20
	0x033F44E4 BL 0x33EEFF8
	0x033F44E8 MOV X0, X21
	0x033F44EC BL 0x33ED11C
	0x033F44F0 TBNZ X0, 0x0, 0x33F4524
	0x033F44F4 MOV X0, X19
	0x033F44F8 MOV X1, X20
	0x033F44FC MOV W2, W31
	0x033F4500 BL 0x33F2DA4
	0x033F4504 TBNZ X0, 0x0, 0x33F4524
	0x033F4508 CBZ X20, 0x33F453C
	0x033F450C LDR X8, [X20]
	0x033F4510 MOVZ W2, 0x1
	0x033F4514 MOV X0, X20
	0x033F4518 MOV X1, X19
	0x033F451C LDP X9, X3, [X8 + 0x178]
	0x033F4520 BLR X9
	0x033F4524 LDP X20, X19, [X31 + 0x40]
	0x033F4528 LDP X22, X21, [X31 + 0x30]
	0x033F452C LDP X24, X23, [X31 + 0x20]
	0x033F4530 LDP X30, X25, [X31 + 0x10]
	0x033F4534 ADD X31, X31, 0x50
	0x033F4538 RET
	0x033F453C BL 0x1C16F20
	0x033F4540 MOV W8, W4
	0x033F4544 MOV X4, X3
	0x033F4548 MOV X3, X5
	0x033F454C MOV W5, W8
	0x033F4550 B 0x33F4554
	0x033F4554 SUB X31, X31, 0x60
	0x033F4558 STP X30, X27, [X31 + 0x10]
	0x033F455C STP X26, X25, [X31 + 0x20]
	0x033F4560 STP X24, X23, [X31 + 0x30]
	0x033F4564 STP X22, X21, [X31 + 0x40]
	0x033F4568 STP X20, X19, [X31 + 0x50]
	0x033F456C ADRP X25, 0xFE9000
	0x033F4570 LDRB W8, [X25 + 0x46F]
	0x033F4574 MOV W19, W5
	0x033F4578 MOV X20, X4
	0x033F457C MOV X21, X3
	0x033F4580 MOV X23, X2
	0x033F4584 MOV X24, X1
	0x033F4588 MOV X22, X0
	0x033F458C TBNZ X8, 0x0, 0x33F45B0
	0x033F4590 ADRP X0, 0xD39000
	0x033F4594 LDR X0, [X0 + 0x838]
	0x033F4598 BL 0x1C16CF4
	0x033F459C ADRP X0, 0xD00000
	0x033F45A0 LDR X0, [X0 + 0x7B8]
	0x033F45A4 BL 0x1C16CF4
	0x033F45A8 MOVZ W8, 0x1
	0x033F45AC STRB W8, [X25 + 0x46F]
	0x033F45B0 STR X31, [X31 + 0x8]
	0x033F45B4 CBZ X24, 0x33F464C
	0x033F45B8 CBZ X21, 0x33F466C
	0x033F45BC ADRP X8, 0xD00000
	0x033F45C0 LDR X8, [X8 + 0x7B8]
	0x033F45C4 ADRP X27, 0xD39000
	0x033F45C8 LDR X0, [X8]
	0x033F45CC LDR W8, [X0 + 0xE0]

ISIL:
	001 Subtract X31, X31, 352
	002 Move [X31+320], X29
	003 Move [X31+336], X30
	004 Move [X31+344], X19
	005 Add X19, X31, 152
	006 Move [X19+152], X2
	007 Move [X19+144], X0
	008 Move [X31+292], W1
	009 Move [X19+128], X3
	010 Move X8, 0xFEA000
	011 Add X8, X8, 1126
	012 Move W8, [X8]
	013 And W8, W8, 1
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {32}
	018 Move X8, 0xD08000
	019 Move X0, [X8+2008]
	020 Call 0x1C17CF4
	021 Move X8, 0xD08000
	022 Move X0, [X8+2024]
	023 Call 0x1C17CF4
	024 Move X8, 0xD01000
	025 Move X0, [X8+1976]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move X9, 0xFEA000
	029 Add X9, X9, 1126
	030 And W8, W8, 1
	031 Move [X9], W8
	032 Move [X31+276], W31
	033 Move [X19+112], X31
	034 Move [X19+104], X31
	035 Move [X31+252], W31
	036 Move [X31+248], W31
	037 Move [X31+244], W31
	038 Move [X31+240], W31
	039 Move [X31+236], W31
	040 Move X0, X31
	041 Call TaskTrace.get_Enabled
	042 And W8, W0, 1
	043 Move [X31+232], W8
	044 Move W8, [X31+232]
	045 Move TEMP, X8
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {51}
	049 Move W8, 2
	050 Move [X31+228], W8
	051 Move [X31+228], W31
	052 Move W8, [X31+228]
	053 Compare W8, 0
	054 JumpIfEqual {56}
	055 Subtract W8, W8, 2
	056 Move X8, 0xD01000
	057 Move X8, [X8+1976]
	058 Move X0, [X8]
	059 Call 0x19913D0
	060 Move X0, X31
	061 Call 0x34010EC
	062 Move [X19+64], X0
	063 Move X8, [X19+64]
	064 Move [X19+112], X8
	065 Move X8, [X19+112]
	066 Move [X19+56], X8
	067 Move X8, [X19+56]
	068 Compare X8, 0
	069 JumpIfEqual {72}
	070 Move W8, 3
	071 Move [X31+228], W8
	072 Move [X31+228], W31
	073 Move W8, [X31+228]
	074 Compare W8, 0
	075 JumpIfEqual {77}
	076 Subtract W8, W8, 3
	077 Move X8, 0xD08000
	078 Move X8, [X8+2024]
	079 Move X0, [X8]
	080 Call 0x19913D0
	081 Move X0, X31
	082 Call 0x340113C
	083 Move [X19+48], X0
	084 Move X0, [X19+48]
	085 Call 0x19913C0
	086 Move X0, [X19+48]
	087 Call TaskScheduler.get_Id, X0
	088 Move [X31+196], W0
	089 Move W8, [X31+196]
	090 Move [X31+252], W8
	091 Move W8, 4
	092 Move [X31+228], W8
	093 Move W8, [X31+228]
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move X8, [X19+112]
	096 Move [X19+32], X8
	097 Move X0, [X19+32]
	098 Call 0x19913C0
	099 Move X8, [X19+32]
	100 Move X8, [X8+40]
	101 Move [X19+24], X8
	102 Move X0, [X19+24]
	103 Call 0x19913C0
	104 Move X0, [X19+24]
	105 Call TaskScheduler.get_Id, X0
	106 Move [X31+172], W0
	107 Move W8, [X31+172]
	108 Move [X31+252], W8
	109 Move X8, [X19+112]
	110 Move [X19+8], X8
	111 Move X8, [X19+8]
	112 Compare X8, 0
	113 JumpIfEqual {118}
	114 Move W8, [X31+252]
	115 Move [X31+248], W8
	116 Move W8, 5
	117 Move [X31+228], W8
	118 Move W8, [X31+252]
	119 Move [X31+244], W8
	120 Move [X31+228], W31
	121 Move W8, [X31+228]
	122 Compare W8, 0
	123 JumpIfEqual {125}
	124 Subtract W8, W8, 5
	125 Move [X31+240], W31
	126 Move W8, [X31+244]
	127 Move [X31+236], W8
	128 Move X8, [X19+112]
	129 Move [X19], X8
	130 Move X0, [X19]
	131 Call 0x19913C0
	132 Move X0, [X19]
	133 Call Task.get_Id, X0
	134 Move [X31+148], W0
	135 Move W8, [X31+148]
	136 Move [X31+240], W8
	137 Move W8, [X31+248]
	138 Move [X31+236], W8
	139 Move X0, [X19+144]
	140 Call Task.get_Id, X0
	141 Move [X31+144], W0
	142 Move W0, [X31+236]
	143 Move W1, [X31+240]
	144 Move W2, [X31+144]
	145 Move X3, X31
	146 Call TaskTrace.TaskWaitBegin_Synchronous, X0, X1, X2
	147 Move X0, [X19+144]
	148 Call Task.get_IsCompleted, X0
	149 And W8, W0, 1
	150 Move [X31+140], W8
	151 Move W8, [X31+140]
	152 And W8, W8, 1
	153 Move [X31+276], W8
	154 Move W8, [X31+276]
	155 And W8, W8, 1
	156 Move [X31+136], W8
	157 Move W8, [X31+136]
	158 Move TEMP, X8
	159 And TEMP, TEMP, 1
	160 Compare TEMP, 1
	161 JumpIfNotEqual {164}
	162 Move W8, 7
	163 Move [X31+228], W8
	164 Move [X31+228], W31
	165 Move W8, [X31+228]
	166 Compare W8, 0
	167 JumpIfEqual {169}
	168 Subtract W8, W8, 7
	169 Move W8, [X31+292]
	170 Move [X31+132], W8
	171 Move W8, [X31+132]
	172 Add W31, W8, 1
	173 Move W8, 8
	174 Move [X31+228], W8
	175 Move [X31+228], W31
	176 Move W8, [X31+228]
	177 Compare W8, 0
	178 JumpIfEqual {180}
	179 Subtract W8, W8, 8
	180 Move X8, 0xD08000
	181 Move X8, [X8+2008]
	182 Move X0, [X8]
	183 Call 0x19913D0
	184 Add X0, X31, 304
	185 Move X1, X31
	186 Call CancellationToken.get_CanBeCanceled, X0
	187 And W8, W0, 1
	188 Move [X31+128], W8
	189 Move W8, [X31+128]
	190 Move TEMP, X8
	191 And TEMP, TEMP, 1
	192 Compare TEMP, 1
	193 JumpIfNotEqual {196}
	194 Move W8, 8
	195 Move [X31+228], W8
	196 Move [X31+228], W31
	197 Move W8, [X31+228]
	198 Compare W8, 0
	199 JumpIfEqual {201}
	200 Subtract W8, W8, 8
	201 Move X0, [X19+144]
	202 Call Task.WrappedTryRunInline, X0
	203 And W8, W0, 1
	204 Move [X31+124], W8
	205 Move W8, [X31+124]
	206 Move TEMP, X8
	207 And TEMP, TEMP, 1
	208 Compare TEMP, 1
	209 JumpIfEqual {212}
	210 Move W8, 8
	211 Move [X31+228], W8
	212 Move [X31+228], W31
	213 Move W8, [X31+228]
	214 Compare W8, 0
	215 JumpIfEqual {217}
	216 Subtract W8, W8, 8
	217 Move X0, [X19+144]
	218 Call Task.get_IsCompleted, X0
	219 And W8, W0, 1
	220 Move [X31+120], W8
	221 Move W8, [X31+120]
	222 Move TEMP, X8
	223 And TEMP, TEMP, 1
	224 Compare TEMP, 1
	225 JumpIfEqual {228}
	226 Move W8, 8
	227 Move [X31+228], W8
	228 Move [X31+228], W31
	229 Move W8, [X31+228]
	230 Compare W8, 0
	231 JumpIfEqual {233}
	232 Subtract W8, W8, 8
	233 Move W8, 1
	234 Move [X31+276], W8
	235 Move W8, [X31+292]
	236 Move [X31+116], W8
	237 Move X8, [X19+152]
	238 Move [X31+104], X8
	239 Move X0, [X19+144]
	240 Move W1, [X31+116]
	241 Move X8, [X31+104]
	242 Move [X31+88], X8
	243 Move X2, [X31+88]
	244 Call Task.SpinThenBlockingWait, X0, X1, X2
	245 And W8, W0, 1
	246 Move [X31+100], W8
	247 Move W8, [X31+100]
	248 And W8, W8, 1
	249 Move [X31+276], W8
	250 Move X0, X31
	251 Call TaskTrace.get_Enabled
	252 And W8, W0, 1
	253 Move [X31+84], W8
	254 Move W8, [X31+84]
	255 Move TEMP, X8
	256 And TEMP, TEMP, 1
	257 Compare TEMP, 1
	258 JumpIfEqual {261}
	259 Move W8, 9
	260 Move [X31+228], W8
	261 Move [X31+228], W31
	262 Move W8, [X31+228]
	263 Compare W8, 0
	264 JumpIfEqual {266}
	265 Subtract W8, W8, 9
	266 Move X8, 0xD01000
	267 Move X8, [X8+1976]
	268 Move X0, [X8]
	269 Call 0x19913D0
	270 Move X0, X31
	271 Call 0x34010EC
	272 Move [X31+72], X0
	273 Move X8, [X31+72]
	274 Move [X19+104], X8
	275 Move X8, [X19+104]
	276 Move [X31+64], X8
	277 Move X8, [X31+64]
	278 Compare X8, 0
	279 JumpIfNotEqual {282}
	280 Move W8, 10
	281 Move [X31+228], W8
	282 Move [X31+228], W31
	283 Move W8, [X31+228]
	284 Compare W8, 0
	285 JumpIfEqual {287}
	286 Subtract W8, W8, 10
	287 Move X8, [X19+104]
	288 Move [X31+56], X8
	289 Move X0, [X31+56]
	290 Call 0x19913C0
	291 Move X8, [X31+56]
	292 Move X8, [X8+40]
	293 Move [X31+48], X8
	294 Move X0, [X31+48]
	295 Call 0x19913C0
	296 Move X0, [X31+48]
	297 Call TaskScheduler.get_Id, X0
	298 Move [X31+44], W0
	299 Move X8, [X19+104]
	300 Move [X31+32], X8
	301 Move X0, [X31+32]
	302 Call 0x19913C0
	303 Move X0, [X31+32]
	304 Call Task.get_Id, X0
	305 Move [X31+28], W0
	306 Move X0, [X19+144]
	307 Call Task.get_Id, X0
	308 Move [X31+24], W0
	309 Move W0, [X31+44]
	310 Move W1, [X31+28]
	311 Move W2, [X31+24]
	312 Move X3, X31
	313 Call TaskTrace.TaskWaitEnd, X0, X1, X2
	314 Move W8, 9
	315 Move [X31+228], W8
	316 Move W8, [X31+228]
	317 NotImplemented "Instruction CMP not yet implemented."
	318 Move X8, 0xD08000
	319 Move X8, [X8+2024]
	320 Move X0, [X8]
	321 Call 0x19913D0
	322 Move X0, X31
	323 Call 0x340113C
	324 Move [X31+16], X0
	325 Move X0, [X31+16]
	326 Call 0x19913C0
	327 Move X0, [X31+16]
	328 Call TaskScheduler.get_Id, X0
	329 Move [X31+12], W0
	330 Move X0, [X19+144]
	331 Call Task.get_Id, X0
	332 Move [X31+8], W0
	333 Move W0, [X31+12]
	334 Move W2, [X31+8]
	335 Move W1, W31
	336 Move X3, X31
	337 Call TaskTrace.TaskWaitEnd, X0, X1, X2
	338 Move W8, [X31+276]
	339 And W8, W8, 1
	340 Move [X31+4], W8
	341 Move W8, [X31+4]
	342 And W8, W8, 1
	343 Move [X31+319], W8
	344 Move W8, 1
	345 Move [X31+228], W8
	346 Move W0, [X31+319]
	347 Move X30, [X31+336]
	348 Move X19, [X31+344]
	349 Move X29, [X31+320]
	350 Add X31, X31, 352
	351 Return X0

Method: System.Boolean SpinThenBlockingWait(System.Int32 millisecondsTimeout, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x033F4928 LDR X9, [X19]
	0x033F492C CMP X9, X8
	0x033F4930 CSEL X23, X19, X31, EQ
	0x033F4934 B.EQ 0x33F4940
	0x033F4938 MOV W20, W31
	0x033F493C B 0x33F4A3C
	0x033F4940 STRB W31, [X31 + 0x4]
	0x033F4944 ADD X1, X31, 0x4
	0x033F4948 MOV X0, X23
	0x033F494C MOV X2, X31
	0x033F4950 BL 0x33DE64C
	0x033F4954 LDR X22, [X22]
	0x033F4958 BL 0x1C16D44
	0x033F495C LDR X0, [X24]
	0x033F4960 LDR W8, [X0 + 0xE0]
	0x033F4964 CBNZ W8, 0x33F4970
	0x033F4968 BL 0x1C16DFC
	0x033F496C LDR X0, [X24]
	0x033F4970 LDR X8, [X0 + 0xB8]
	0x033F4974 LDR X8, [X8 + 0x8]
	0x033F4978 CMP X22, X8
	0x033F497C B.EQ 0x33F49F8
	0x033F4980 CBZ X23, 0x33F4A64
	0x033F4984 ADRP X8, 0xD39000
	0x033F4988 LDR W22, [X23 + 0x18]
	0x033F498C LDR X8, [X8 + 0x890]
	0x033F4990 LDR X1, [X8]
	0x033F4994 MOV X0, X23
	0x033F4998 BL 0x319B448
	0x033F499C CMP W22, W0
	0x033F49A0 B.NE 0x33F49D4
	0x033F49A4 LDR X0, [X24]
	0x033F49A8 LDR W8, [X0 + 0xE0]
	0x033F49AC CBNZ W8, 0x33F49B8
	0x033F49B0 BL 0x1C16DFC
	0x033F49B4 LDR X0, [X24]
	0x033F49B8 LDR X8, [X0 + 0xB8]
	0x033F49BC ADRP X9, 0xD39000
	0x033F49C0 LDR X9, [X9 + 0x888]
	0x033F49C4 LDR X1, [X8 + 0x48]
	0x033F49C8 LDR X2, [X9]
	0x033F49CC MOV X0, X23
	0x033F49D0 BL 0x319BF80
	0x033F49D4 TBZ X21, 0x0, 0x33F4A04
	0x033F49D8 ADRP X8, 0xD39000
	0x033F49DC LDR X8, [X8 + 0x880]
	0x033F49E0 LDR X3, [X8]
	0x033F49E4 MOV X0, X23
	0x033F49E8 MOV W1, W31
	0x033F49EC MOV X2, X20
	0x033F49F0 BL 0x319B87C
	0x033F49F4 B 0x33F4A1C
	0x033F49F8 MOV X21, X31
	0x033F49FC MOV W20, W31
	0x033F4A00 B 0x33F4A24
	0x033F4A04 ADRP X8, 0xD39000
	0x033F4A08 LDR X8, [X8 + 0x878]
	0x033F4A0C LDR X2, [X8]
	0x033F4A10 MOV X0, X23
	0x033F4A14 MOV X1, X20
	0x033F4A18 BL 0x319B66C
	0x033F4A1C MOV X21, X31
	0x033F4A20 MOVZ W20, 0x1
	0x033F4A24 LDRB W8, [X31 + 0x4]
	0x033F4A28 CBZ W8, 0x33F4A38
	0x033F4A2C MOV X0, X19
	0x033F4A30 MOV X1, X31
	0x033F4A34 BL 0x33E14E4
	0x033F4A38 CBNZ X21, 0x33F4A5C
	0x033F4A3C MOV W0, W20
	0x033F4A40 LDP X20, X19, [X31 + 0x50]
	0x033F4A44 LDP X22, X21, [X31 + 0x40]
	0x033F4A48 LDP X24, X23, [X31 + 0x30]
	0x033F4A4C LDP X30, X25, [X31 + 0x20]
	0x033F4A50 ADD X31, X31, 0x60
	0x033F4A54 RET
	0x033F4A58 BL 0x1C16F20
	0x033F4A5C MOV X0, X21
	0x033F4A60 BL 0x1C16F18
	0x033F4A64 BL 0x1C16F20
	0x033F4A68 B 0x33F4A8C
	0x033F4A6C B 0x33F4A8C
	0x033F4A70 B 0x33F4A8C
	0x033F4A74 B 0x33F4A8C
	0x033F4A78 B 0x33F4A8C
	0x033F4A7C MOV X20, X0
	0x033F4A80 MOV X19, X31
	0x033F4A84 B 0x33F4A90
	0x033F4A88 B 0x33F4A8C
	0x033F4A8C MOV X20, X0
	0x033F4A90 CMP W1, 0x1
	0x033F4A94 B.NE 0x33F4AAC
	0x033F4A98 MOV X0, X20
	0x033F4A9C BL 0x3EB1AD0
	0x033F4AA0 LDR X21, [X0]
	0x033F4AA4 BL 0x3EB1AE0
	0x033F4AA8 B 0x33F49FC
	0x033F4AAC MOV X21, X31
	0x033F4AB0 B 0x33F4AB8
	0x033F4AB4 MOV X20, X0
	0x033F4AB8 LDRB W8, [X31 + 0x4]
	0x033F4ABC CBZ W8, 0x33F4ACC
	0x033F4AC0 MOV X0, X19
	0x033F4AC4 MOV X1, X31
	0x033F4AC8 BL 0x33E14E4
	0x033F4ACC CBNZ X21, 0x33F4AD8
	0x033F4AD0 MOV X0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0xFEA000
	008 Move W8, [X20+1127]
	009 Move X21, X2
	010 Move W22, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD3A000
	017 Move X0, [X0+2096]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+1127], W8
	021 Add W31, W22, 1
	022 Move X0, X31
	023 Call Environment.get_TickCount
	024 Move W23, W0
	025 Move W23, W31
	026 Move X0, X19
	027 Move W1, W22
	028 Call Task.SpinWait, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {34}
	033 Move W22, 1
	034 Move X8, 0xD3A000
	035 Move X8, [X8+2096]
	036 Move X0, [X8]
	037 Call 0x1C17F10
	038 Move X20, X0
	039 Call SetOnInvokeMres..ctor, X0
	040 Move W2, 1
	041 Move X0, X19
	042 Move X1, X20
	043 Call Task.AddCompletionAction, X0, X1, X2
	044 Add W31, W22, 1
	045 Move X0, X31
	046 Call Environment.get_TickCount
	047 Subtract W8, W0, W23
	048 Move X9, W22
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Compare X20, 0
	051 JumpIfEqual {92}
	052 Subtract W1, W22, W8
	053 Move X0, X20
	054 Move X2, X21
	055 Move X3, X31
	056 Call ManualResetEventSlim.Wait, X0, X1, X2
	057 Compare X20, 0
	058 JumpIfEqual {91}
	059 Move TEMP, 0
	060 Not TEMP
	061 Move W1, TEMP
	062 Move X0, X20
	063 Move X2, X21
	064 Move X3, X31
	065 Call ManualResetEventSlim.Wait, X0, X1, X2
	066 Move W22, W0
	067 Move X21, X31
	068 Move X21, X31
	069 Move W22, W31
	070 Move X0, X19
	071 Call Task.get_IsCompleted, X0
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfEqual {79}
	076 Move X0, X19
	077 Move X1, X20
	078 Call Task.RemoveContinuation, X0, X1
	079 Compare X21, 0
	080 JumpIfNotEqual {89}
	081 And W0, W22, 1
	082 Move X20, [X31+32]
	083 Move X19, [X31+40]
	084 Move X22, [X31+16]
	085 Move X21, [X31+24]
	086 Move X30, [X31+48]
	087 Move X23, [X31+56]
	088 Return X0
	089 Move X0, X21
	090 Call 0x1C17F18
	091 Call 0x1C17F20
	092 Call 0x1C17F20
	093 Move X22, X0
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move X0, X22
	096 Call 0x3EB2AD0
	097 Move X21, [X0]
	098 Call 0x3EB2AE0
	099 Move X21, X31
	100 Move X22, X0
	101 Move X0, X19
	102 Call Task.get_IsCompleted, X0
	103 Move TEMP, X0
	104 And TEMP, TEMP, 1
	105 Compare TEMP, 1
	106 JumpIfEqual {110}
	107 Move X0, X19
	108 Move X1, X20
	109 Call Task.RemoveContinuation, X0, X1
	110 Compare X21, 0
	111 JumpIfNotEqual {114}
	112 Move X0, X22
	113 Call 0x1D2D690
	114 Move X0, X21
	115 Call 0x1C17F18
	116 Call 0x1991590

Method: System.Boolean SpinWait(System.Int32 millisecondsTimeout)

Disassembly:
	0x033F4AD4 BL 0x1D2C690
	0x033F4AD8 MOV X0, X21
	0x033F4ADC BL 0x1C16F18
	0x033F4AE0 BL 0x1990590
	0x033F4AE4 STR X30, [X31 - 0x20]!
	0x033F4AE8 STP X20, X19, [X31 + 0x10]
	0x033F4AEC ADRP X19, 0xFE9000
	0x033F4AF0 STR X0, [X31 + 0x8]
	0x033F4AF4 ADRP X20, 0xD07000
	0x033F4AF8 LDRB W8, [X19 + 0x475]
	0x033F4AFC LDR X20, [X20 + 0x7D8]
	0x033F4B00 TBNZ X8, 0x0, 0x33F4B24
	0x033F4B04 ADRP X0, 0xD07000
	0x033F4B08 LDR X0, [X0 + 0x7D8]
	0x033F4B0C BL 0x1C16CF4
	0x033F4B10 ADRP X0, 0xD00000
	0x033F4B14 LDR X0, [X0 + 0x7B8]
	0x033F4B18 BL 0x1C16CF4
	0x033F4B1C MOVZ W8, 0x1
	0x033F4B20 STRB W8, [X19 + 0x475]
	0x033F4B24 LDR X0, [X20]
	0x033F4B28 LDR W8, [X0 + 0xE0]
	0x033F4B2C CBNZ W8, 0x33F4B34
	0x033F4B30 BL 0x1C16DFC
	0x033F4B34 ADD X0, X31, 0x8
	0x033F4B38 MOV X1, X31
	0x033F4B3C BL 0x33DD2B0
	0x033F4B40 TBZ X0, 0x0, 0x33F4B7C
	0x033F4B44 ADRP X8, 0xD00000
	0x033F4B48 LDR X8, [X8 + 0x7B8]
	0x033F4B4C LDR X19, [X31 + 0x8]
	0x033F4B50 LDR X0, [X8]
	0x033F4B54 BL 0x1C16F10
	0x033F4B58 MOVZ W1, 0x1
	0x033F4B5C MOV W2, W31
	0x033F4B60 MOV X3, X19
	0x033F4B64 MOV X20, X0
	0x033F4B68 BL 0x33EEB10
	0x033F4B6C MOV X0, X20
	0x033F4B70 LDP X20, X19, [X31 + 0x10]
	0x033F4B74 LDR X30, [X31], #0x20
	0x033F4B78 RET
	0x033F4B7C ADRP X0, 0xD07000
	0x033F4B80 LDR X0, [X0 + 0x760]
	0x033F4B84 BL 0x1C16D08
	0x033F4B88 BL 0x1C16F10
	0x033F4B8C MOV X19, X0
	0x033F4B90 ADRP X0, 0xD28000
	0x033F4B94 LDR X0, [X0 + 0x770]
	0x033F4B98 BL 0x1C16D08
	0x033F4B9C MOV X1, X0
	0x033F4BA0 MOV X0, X19
	0x033F4BA4 MOV X2, X31
	0x033F4BA8 BL 0x3316014
	0x033F4BAC ADRP X0, 0xD39000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xFEA000
	007 Move W8, [X21+1128]
	008 Move W20, W1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD0C000
	015 Move X0, [X0+1136]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1128], W8
	019 Move X0, X19
	020 Move [X31+8], W31
	021 Call Task.get_IsCompleted, X0
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {27}
	026 Move W20, 1
	027 Compare W20, 0
	028 JumpIfEqual {65}
	029 Move X21, 0xD0C000
	030 Move X21, [X21+1136]
	031 Move X0, [X21]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1C17DFC
	036 Move X0, [X21]
	037 Move X8, [X0+184]
	038 Move W22, [X8]
	039 Move [X31+8], W31
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move W8, [X31+8]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction CSET not yet implemented."
	047 Move X0, [X21]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Add X0, X31, 8
	053 Move TEMP, 0
	054 Not TEMP
	055 Move W1, TEMP
	056 Move X2, X31
	057 Call SpinWait.SpinOnce, X0, X1
	058 Move X0, X19
	059 Call Task.get_IsCompleted, X0
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfEqual {65}
	064 Move X0, [X21]
	065 Move W0, W20
	066 Move X20, [X31+32]
	067 Move X19, [X31+40]
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Move X30, [X31+48]
	071 Return X0

Method: System.Boolean InternalCancel(System.Boolean bCancelNonExecutingOnly)

Disassembly:
	0x033F03F4 MOVZ W8, 0x1
	0x033F03F8 STRB W8, [X20 + 0x88E]
	0x033F03FC LDR X0, [X19]
	0x033F0400 LDR W8, [X0 + 0xE0]
	0x033F0404 CBNZ W8, 0x33F0410
	0x033F0408 BL 0x1C16DFC
	0x033F040C LDR X0, [X19]
	0x033F0410 BL 0x1C16D0C
	0x033F0414 LDR X0, [X0]
	0x033F0418 LDP X20, X19, [X31 + 0x10]
	0x033F041C LDR X30, [X31], #0x20
	0x033F0420 RET
	0x033F0424 STR X30, [X31 - 0x20]!
	0x033F0428 STP X20, X19, [X31 + 0x10]
	0x033F042C ADRP X19, 0xFED000
	0x033F0430 ADRP X20, 0xD04000
	0x033F0434 LDRB W8, [X19 + 0x44D]
	0x033F0438 LDR X20, [X20 + 0x7B8]
	0x033F043C TBNZ X8, 0x0, 0x33F0460
	0x033F0440 ADRP X0, 0xD3D000
	0x033F0444 LDR X0, [X0 + 0x730]
	0x033F0448 BL 0x1C16CF4
	0x033F044C ADRP X0, 0xD04000
	0x033F0450 LDR X0, [X0 + 0x7B8]
	0x033F0454 BL 0x1C16CF4
	0x033F0458 MOVZ W8, 0x1
	0x033F045C STRB W8, [X19 + 0x44D]
	0x033F0460 LDR X0, [X20]
	0x033F0464 LDR W8, [X0 + 0xE0]
	0x033F0468 CBNZ W8, 0x33F0474
	0x033F046C BL 0x1C16DFC
	0x033F0470 LDR X0, [X20]
	0x033F0474 BL 0x1C16D0C
	0x033F0478 LDR X19, [X0 + 0x8]
	0x033F047C CBNZ X19, 0x33F04C0
	0x033F0480 ADRP X8, 0xD3D000
	0x033F0484 LDR X8, [X8 + 0x730]
	0x033F0488 LDR X0, [X8]
	0x033F048C BL 0x1C16F10
	0x033F0490 MOV X1, X31
	0x033F0494 MOV X19, X0
	0x033F0498 BL 0x33BDD8C
	0x033F049C LDR X0, [X20]
	0x033F04A0 LDR W8, [X0 + 0xE0]
	0x033F04A4 CBNZ W8, 0x33F04B0
	0x033F04A8 BL 0x1C16DFC
	0x033F04AC LDR X0, [X20]
	0x033F04B0 BL 0x1C16D0C
	0x033F04B4 STR X19, [X0 + 0x8]
	0x033F04B8 LDR X0, [X20]
	0x033F04BC BL 0x1C16D0C
	0x033F04C0 MOV X0, X19
	0x033F04C4 LDP X20, X19, [X31 + 0x10]
	0x033F04C8 LDR X30, [X31], #0x20
	0x033F04CC RET
	0x033F04D0 MOV X1, X31
	0x033F04D4 B 0x33BDD8C
	0x033F04D8 STR X30, [X31 - 0x20]!
	0x033F04DC STP X20, X19, [X31 + 0x10]
	0x033F04E0 LDR W20, [X0 + 0x38]
	0x033F04E4 MOV X19, X0
	0x033F04E8 BL 0x1C16D44
	0x033F04EC TBNZ X20, 0x15, 0x33F0500
	0x033F04F0 LDP X20, X19, [X31 + 0x10]
	0x033F04F4 MOV X0, X31
	0x033F04F8 LDR X30, [X31], #0x20
	0x033F04FC RET
	0x033F0500 MOV X0, X19
	0x033F0504 LDP X20, X19, [X31 + 0x10]
	0x033F0508 MOV W1, W31
	0x033F050C LDR X30, [X31], #0x20
	0x033F0510 B 0x33F052C
	0x033F0514 STP X30, X19, [X31 - 0x10]!
	0x033F0518 LDR W19, [X0 + 0x38]
	0x033F051C BL 0x1C16D44
	0x033F0520 UBFM W0, W19, 0x15, 0x15
	0x033F0524 LDP X30, X19, [X31], #0x10
	0x033F0528 RET
	0x033F052C STP X30, X21, [X31 - 0x20]!
	0x033F0530 STP X20, X19, [X31 + 0x10]
	0x033F0534 ADRP X21, 0xFED000
	0x033F0538 LDRB W8, [X21 + 0x459]
	0x033F053C MOV W19, W1
	0x033F0540 MOV X20, X0
	0x033F0544 TBNZ X8, 0x0, 0x33F0574
	0x033F0548 ADRP X0, 0xD35000
	0x033F054C LDR X0, [X0 + 0x8D0]
	0x033F0550 BL 0x1C16CF4
	0x033F0554 ADRP X0, 0xD35000
	0x033F0558 LDR X0, [X0 + 0x8C8]
	0x033F055C BL 0x1C16CF4
	0x033F0560 ADRP X0, 0xD04000
	0x033F0564 LDR X0, [X0 + 0x8A0]
	0x033F0568 BL 0x1C16CF4
	0x033F056C MOVZ W8, 0x1
	0x033F0570 STRB W8, [X21 + 0x459]
	0x033F0574 TBZ X19, 0x0, 0x33F05AC
	0x033F0578 LDR W19, [X20 + 0x38]
	0x033F057C BL 0x1C16D44
	0x033F0580 AND W8, W19, 0x600000
	0x033F0584 CMP W8, 0x400000
	0x033F0588 B.NE 0x33F05AC
	0x033F058C ADRP X8, 0xD04000
	0x033F0590 LDR X8, [X8 + 0x8A0]
	0x033F0594 LDR X0, [X8]
	0x033F0598 BL 0x1C16F10
	0x033F059C MOV X1, X20
	0x033F05A0 MOV X19, X0
	0x033F05A4 BL 0x33ECE0C
	0x033F05A8 B 0x33F05B0
	0x033F05AC MOV X19, X31
	0x033F05B0 MOV X0, X20
	0x033F05B4 BL 0x33F0AD0
	0x033F05B8 TBZ X0, 0x0, 0x33F05EC
	0x033F05BC LDR X20, [X20 + 0x48]
	0x033F05C0 BL 0x1C16D44

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move W21, [X0+56]
	008 Move X19, X0
	009 Move W20, W1
	010 Call 0x1C17D44
	011 Move TEMP, X21
	012 And TEMP, TEMP, 0x10000
	013 Compare TEMP, 0x10000
	014 JumpIfEqual {22}
	015 Move X21, X31
	016 Move W22, W31
	017 Move W23, W31
	018 Move TEMP, X22
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfNotEqual {62}
	022 Move X22, [X19+40]
	023 Compare X22, 0
	024 JumpIfEqual {39}
	025 Move X8, [X22]
	026 Move X9, [X8+408]
	027 Move X2, [X8+416]
	028 Move X0, X22
	029 Move X1, X19
	030 NotImplemented "Instruction BLR not yet implemented."
	031 Move X21, X31
	032 And W23, W0, 1
	033 Move X8, [X22]
	034 Move X0, X22
	035 Move X9, [X8+440]
	036 Move X1, [X8+448]
	037 NotImplemented "Instruction BLR not yet implemented."
	038 And W8, W0, 1
	039 Move W23, W31
	040 Move X21, X31
	041 Move W8, W31
	042 NotImplemented "Instruction BIC not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 And W8, W9, W8
	045 NotImplemented "Instruction CSET not yet implemented."
	046 Compare W8, 0
	047 JumpIfEqual {57}
	048 Move W1, 0x400000
	049 Move W2, 0x420000
	050 Move X0, X19
	051 Call Task.AtomicStateUpdate, X0, X1, X2
	052 Move W22, W0
	053 Move TEMP, X22
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {62}
	057 Move W22, W31
	058 Move TEMP, X22
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfEqual {70}
	062 Move TEMP, X23
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfEqual {70}
	066 Move TEMP, X20
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfEqual {99}
	070 Move X0, X19
	071 Call Task.RecordInternalCancellationRequest, X0
	072 Move TEMP, X23
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfNotEqual {84}
	076 Move W1, 0x400000
	077 Move W2, 0x420000
	078 Move X0, X19
	079 Call Task.AtomicStateUpdate, X0, X1, X2
	080 Move TEMP, X0
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfEqual {88}
	084 Move TEMP, X22
	085 And TEMP, TEMP, 1
	086 Compare TEMP, 1
	087 JumpIfNotEqual {91}
	088 Move X0, X19
	089 Call Task.CancellationCleanupLogic, X0
	090 Move W0, 1
	091 Move W20, [X19+56]
	092 Call 0x1C17D44
	093 Move TEMP, X20
	094 And TEMP, TEMP, 0x10000
	095 Compare TEMP, 0x10000
	096 JumpIfEqual {99}
	097 Move W1, 0x400000
	098 Move W2, 0x1630000
	099 Move W0, W31
	100 Compare X21, 0
	101 JumpIfNotEqual {109}
	102 Move X20, [X31+32]
	103 Move X19, [X31+40]
	104 Move X22, [X31+16]
	105 Move X21, [X31+24]
	106 Move X30, [X31+48]
	107 Move X23, [X31+56]
	108 Return X0
	109 Move X0, 0xD3E000
	110 Move X0, [X0+1736]
	111 Call 0x1C17D08
	112 Move X1, X0
	113 Move X0, X21
	114 Call 0x1C17DEC
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move X21, X0
	117 Move X0, X21
	118 Call 0x3EB2AD0
	119 Move X21, X0
	120 Move X0, 0xD04000
	121 Move X0, [X0+2000]
	122 Call 0x1C17D08
	123 Move X8, [X21]
	124 Move X1, [X8]
	125 Call 0x1C18270
	126 Move TEMP, X0
	127 And TEMP, TEMP, 1
	128 Compare TEMP, 1
	129 JumpIfNotEqual {140}
	130 Move X23, [X21]
	131 Call 0x3EB2AE0
	132 Move X0, 0xD3E000
	133 Move X0, [X0+1744]
	134 Call 0x1C17D08
	135 Call 0x1C17F10
	136 Move X1, X23
	137 Move X21, X0
	138 Call TaskSchedulerException..ctor, X0, X1
	139 Move W23, W31
	140 Move W0, 8
	141 Call 0x3EB2AF0
	142 Move X8, [X21]
	143 Move [X0], X8
	144 Move X1, 0xAC5000
	145 Add X1, X1, 3672
	146 Move X2, X31
	147 Call 0x3EB2B00
	148 Move X21, X0
	149 Call 0x3EB2AE0
	150 Move X0, X21
	151 Call 0x1D2D690
	152 Call 0x1991590

Method: System.Void RecordInternalCancellationRequest()

Disassembly:
	0x033F4CE4 LDP X30, X21, [X31], #0x20
	0x033F4CE8 B 0x33F4CEC
	0x033F4CEC SUB X31, X31, 0x40
	0x033F4CF0 STP X30, X23, [X31 + 0x10]
	0x033F4CF4 STP X22, X21, [X31 + 0x20]
	0x033F4CF8 STP X20, X19, [X31 + 0x30]
	0x033F4CFC ADRP X20, 0xFE9000
	0x033F4D00 LDRB W8, [X20 + 0x479]
	0x033F4D04 MOV X19, X0
	0x033F4D08 STR X1, [X31 + 0x8]
	0x033F4D0C TBNZ X8, 0x0, 0x33F4D60
	0x033F4D10 ADRP X0, 0xD07000
	0x033F4D14 LDR X0, [X0 + 0x7D8]
	0x033F4D18 BL 0x1C16CF4
	0x033F4D1C ADRP X0, 0xD07000
	0x033F4D20 LDR X0, [X0 + 0x820]
	0x033F4D24 BL 0x1C16CF4
	0x033F4D28 ADRP X0, 0xD07000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, [X0+72]
	005 Move X20, X0
	006 Call 0x1C17D44
	007 Compare X19, 0
	008 JumpIfNotEqual {15}
	009 Move W1, 1
	010 Move X0, X20
	011 Call Task.EnsureContingentPropertiesInitializedCore, X0, X1
	012 Move X19, X0
	013 Compare X0, 0
	014 JumpIfEqual {22}
	015 Call 0x1C17D44
	016 Move W8, 1
	017 Move [X19+56], W8
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return 
	022 Call 0x1C17F20

Method: System.Void RecordInternalCancellationRequest(System.Threading.CancellationToken tokenToRecord)

Disassembly:
	0x033F4D2C LDR X0, [X0 + 0x7E8]
	0x033F4D30 BL 0x1C16CF4
	0x033F4D34 ADRP X0, 0xD00000
	0x033F4D38 LDR X0, [X0 + 0x7B8]
	0x033F4D3C BL 0x1C16CF4
	0x033F4D40 ADRP X0, 0xD39000
	0x033F4D44 LDR X0, [X0 + 0x8A0]
	0x033F4D48 BL 0x1C16CF4
	0x033F4D4C ADRP X0, 0xD39000
	0x033F4D50 LDR X0, [X0 + 0x8A8]
	0x033F4D54 BL 0x1C16CF4
	0x033F4D58 MOVZ W8, 0x1
	0x033F4D5C STRB W8, [X20 + 0x479]
	0x033F4D60 CBZ X19, 0x33F4ED4
	0x033F4D64 ADRP X8, 0xD07000
	0x033F4D68 LDR X8, [X8 + 0x7D8]
	0x033F4D6C LDR X0, [X8]
	0x033F4D70 LDR W8, [X0 + 0xE0]
	0x033F4D74 CBNZ W8, 0x33F4D7C
	0x033F4D78 BL 0x1C16DFC
	0x033F4D7C ADD X0, X31, 0x8
	0x033F4D80 MOV X1, X31
	0x033F4D84 BL 0x33DD2B0
	0x033F4D88 TBZ X0, 0x0, 0x33F4DB8
	0x033F4D8C ADRP X8, 0xD00000
	0x033F4D90 LDR X8, [X8 + 0x7B8]
	0x033F4D94 LDR X19, [X31 + 0x8]
	0x033F4D98 LDR X0, [X8]
	0x033F4D9C LDR W8, [X0 + 0xE0]
	0x033F4DA0 CBNZ W8, 0x33F4DA8
	0x033F4DA4 BL 0x1C16DFC
	0x033F4DA8 MOV X0, X19
	0x033F4DAC BL 0x33F4AE4
	0x033F4DB0 MOV X19, X0
	0x033F4DB4 B 0x33F4EBC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xFEA000
	007 Move X21, 0xD08000
	008 Move W8, [X22+1129]
	009 Move X21, [X21+2008]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD08000
	017 Move X0, [X0+2008]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1129], W8
	021 Move X0, X20
	022 Call Task.RecordInternalCancellationRequest, X0
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X1, X31
	030 Move X2, X31
	031 Call CancellationToken.op_Inequality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {41}
	036 Move X20, [X20+72]
	037 Call 0x1C17D44
	038 Compare X20, 0
	039 JumpIfEqual {47}
	040 Move [X20+40], X19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Return 
	047 Call 0x1C17F20

Method: System.Void RecordInternalCancellationRequest(System.Threading.CancellationToken tokenToRecord, System.Object cancellationException)

Disassembly:
	0x033F0A04 BL 0x1C16F20
	0x033F0A08 LDR X0, [X0 + 0x20]
	0x033F0A0C RET
	0x033F0A10 MOV W0, W31
	0x033F0A14 RET
	0x033F0A18 LDR X0, [X0 + 0x28]
	0x033F0A1C RET
	0x033F0A20 STR X30, [X31 - 0x20]!
	0x033F0A24 STP X20, X19, [X31 + 0x10]
	0x033F0A28 ADRP X20, 0xFED000
	0x033F0A2C ADRP X19, 0xD04000
	0x033F0A30 LDRB W8, [X20 + 0x451]
	0x033F0A34 LDR X19, [X19 + 0x7B8]
	0x033F0A38 TBNZ X8, 0x0, 0x33F0A50
	0x033F0A3C ADRP X0, 0xD04000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X2
	005 Move X20, X0
	006 Call Task.RecordInternalCancellationRequest, X0, X1
	007 Compare X19, 0
	008 JumpIfEqual {17}
	009 Move X0, X20
	010 Move X1, X19
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move W2, 1
	014 Move X30, [X31+32]
	015 Call Task.AddException, X0, X1, X2
	016 Return 
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+32]
	020 Return 

Method: System.Void CancellationCleanupLogic()

Disassembly:
	0x033F0A40 LDR X0, [X0 + 0x7B8]
	0x033F0A44 BL 0x1C16CF4
	0x033F0A48 MOVZ W8, 0x1
	0x033F0A4C STRB W8, [X20 + 0x451]
	0x033F0A50 LDR X0, [X19]
	0x033F0A54 LDR W8, [X0 + 0xE0]
	0x033F0A58 CBNZ W8, 0x33F0A64
	0x033F0A5C BL 0x1C16DFC
	0x033F0A60 LDR X0, [X19]
	0x033F0A64 LDR X8, [X0 + 0xB8]
	0x033F0A68 LDP X20, X19, [X31 + 0x10]
	0x033F0A6C LDR X0, [X8 + 0x28]
	0x033F0A70 LDR X30, [X31], #0x20
	0x033F0A74 RET
	0x033F0A78 STR X30, [X31 - 0x20]!
	0x033F0A7C STP X20, X19, [X31 + 0x10]
	0x033F0A80 ADRP X20, 0xFED000
	0x033F0A84 ADRP X19, 0xD04000
	0x033F0A88 LDRB W8, [X20 + 0x452]
	0x033F0A8C LDR X19, [X19 + 0x7B8]
	0x033F0A90 TBNZ X8, 0x0, 0x33F0AA8
	0x033F0A94 ADRP X0, 0xD04000
	0x033F0A98 LDR X0, [X0 + 0x7B8]
	0x033F0A9C BL 0x1C16CF4
	0x033F0AA0 MOVZ W8, 0x1
	0x033F0AA4 STRB W8, [X20 + 0x452]
	0x033F0AA8 LDR X0, [X19]
	0x033F0AAC LDR W8, [X0 + 0xE0]
	0x033F0AB0 CBNZ W8, 0x33F0ABC
	0x033F0AB4 BL 0x1C16DFC
	0x033F0AB8 LDR X0, [X19]
	0x033F0ABC LDR X8, [X0 + 0xB8]
	0x033F0AC0 LDP X20, X19, [X31 + 0x10]
	0x033F0AC4 LDR X0, [X8 + 0x30]
	0x033F0AC8 LDR X30, [X31], #0x20
	0x033F0ACC RET
	0x033F0AD0 STR X30, [X31 - 0x20]!
	0x033F0AD4 STP X20, X19, [X31 + 0x10]
	0x033F0AD8 LDR X19, [X0 + 0x48]
	0x033F0ADC BL 0x1C16D44
	0x033F0AE0 CBZ X19, 0x33F0B10
	0x033F0AE4 LDR X20, [X19 + 0x20]
	0x033F0AE8 BL 0x1C16D44
	0x033F0AEC CBZ X20, 0x33F0B10
	0x033F0AF0 LDR X19, [X19 + 0x20]
	0x033F0AF4 BL 0x1C16D44
	0x033F0AF8 CBZ X19, 0x33F0B20
	0x033F0AFC LDR X19, [X19 + 0x18]
	0x033F0B00 BL 0x1C16D44
	0x033F0B04 CMP X19, 0x0
	0x033F0B08 CSET W0, NE
	0x033F0B0C B 0x33F0B14
	0x033F0B10 MOV W0, W31
	0x033F0B14 LDP X20, X19, [X31 + 0x10]
	0x033F0B18 LDR X30, [X31], #0x20
	0x033F0B1C RET
	0x033F0B20 BL 0x1C16F20
	0x033F0B24 STP X30, X19, [X31 - 0x10]!
	0x033F0B28 LDR X19, [X0 + 0x18]
	0x033F0B2C BL 0x1C16D44
	0x033F0B30 CMP X19, 0x0
	0x033F0B34 CSET W0, NE
	0x033F0B38 LDP X30, X19, [X31], #0x10
	0x033F0B3C RET
	0x033F0B40 STR X30, [X31 - 0x20]!
	0x033F0B44 STP X20, X19, [X31 + 0x10]
	0x033F0B48 ADRP X20, 0xFED000
	0x033F0B4C LDRB W8, [X20 + 0x454]
	0x033F0B50 MOV X19, X0
	0x033F0B54 TBNZ X8, 0x0, 0x33F0B6C
	0x033F0B58 ADRP X0, 0xD2B000
	0x033F0B5C LDR X0, [X0 + 0x580]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xFEE000
	007 Move W8, [X20+1130]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD2C000
	014 Move X0, [X0+1832]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+1130], W8
	018 Move X22, 0xD2C000
	019 Move X22, [X22+1832]
	020 Call 0x1C17D44
	021 Move X20, X19
	022 Add X20, X20, 56
	023 Move W21, [X20]
	024 Call 0x1C17D44
	025 Or W1, W21, 0x400000
	026 Move X0, X20
	027 Call 0x1C25300
	028 Move X20, [X20+16]
	029 Call 0x1C17D44
	030 Compare X20, 0
	031 JumpIfEqual {41}
	032 Move X21, [X20+24]
	033 Call 0x1C17D44
	034 Compare X21, 0
	035 JumpIfEqual {39}
	036 Move X0, X21
	037 Move X1, X31
	038 Call ManualResetEventSlim.Set, X0
	039 Move X0, X20
	040 Call ContingentProperties.UnregisterCancellationCallback, X0
	041 Move X0, [X22]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {51}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 Move X20, 0xFEA000
	052 Move W8, [X20+2089]
	053 Compare W8, 0
	054 JumpIfNotEqual {63}
	055 Move X0, 0xD2C000
	056 Move X0, [X0+1832]
	057 Call 0x1C17CF4
	058 Move X0, 0xD05000
	059 Move X0, [X0+1976]
	060 Call 0x1C17CF4
	061 Move W8, 1
	062 Move [X20+2089], W8
	063 Move X20, 0xD05000
	064 Move X20, [X20+1976]
	065 Move X0, [X20]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {71}
	069 Call 0x1C17DFC
	070 Move X0, [X20]
	071 Move X8, [X0+184]
	072 Move W8, [X8+16]
	073 Compare W8, 0
	074 JumpIfEqual {82}
	075 Move X0, [X22]
	076 Move W8, [X0+224]
	077 Compare W8, 0
	078 JumpIfNotEqual {80}
	079 Call 0x1C17DFC
	080 Move X0, X19
	081 Call DebuggerSupport.RemoveFromActiveTasksNonInlined, X0
	082 Move X0, X19
	083 Move X20, [X31+32]
	084 Move X19, [X31+40]
	085 Move X22, [X31+16]
	086 Move X21, [X31+24]
	087 Move X30, [X31+48]
	088 Call Task.FinishStageThree, X0
	089 Return 

Method: System.Void SetCancellationAcknowledged()

Disassembly:
	0x033F3A78 MOV X22, X0
	0x033F3A7C CMP W1, 0x1
	0x033F3A80 B.NE 0x33F3A98
	0x033F3A84 MOV X0, X22
	0x033F3A88 BL 0x3EB1AD0
	0x033F3A8C LDR X21, [X0]
	0x033F3A90 BL 0x3EB1AE0
	0x033F3A94 B 0x33F3A20
	0x033F3A98 MOV X21, X31
	0x033F3A9C B 0x33F3AA4
	0x033F3AA0 MOV X22, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W20, [X0+56]
	005 Move X19, X0
	006 Call 0x1C17D44
	007 Call 0x1C17D44
	008 Or W8, W20, 0x100000
	009 Move [X19+56], W8
	010 Move X20, [X31+16]
	011 Move X19, [X31+24]
	012 Move X30, [X31+32]
	013 Return 

Method: System.Void FinishContinuations()

Disassembly:
	0x033F2E04 CBZ X8, 0x33F2E30
	0x033F2E08 AND W2, W20, 0x1
	0x033F2E0C MOV X0, X21
	0x033F2E10 MOV X1, X19
	0x033F2E14 BL 0x33F47DC
	0x033F2E18 LDP X20, X19, [X31 + 0x40]
	0x033F2E1C LDP X22, X21, [X31 + 0x30]
	0x033F2E20 LDP X30, X23, [X31 + 0x20]
	0x033F2E24 AND W0, W0, 0x1
	0x033F2E28 ADD X31, X31, 0x50
	0x033F2E2C RET
	0x033F2E30 MOVZ W0, 0x1
	0x033F2E34 B 0x33F2E18
	0x033F2E38 STP X30, X21, [X31 - 0x20]!
	0x033F2E3C STP X20, X19, [X31 + 0x10]
	0x033F2E40 ADRP X20, 0xFEB000
	0x033F2E44 ADRP X21, 0xD3B000
	0x033F2E48 LDRB W8, [X20 + 0x4A6]
	0x033F2E4C LDR X21, [X21 + 0x808]
	0x033F2E50 MOV X19, X0
	0x033F2E54 TBNZ X8, 0x0, 0x33F2E6C
	0x033F2E58 ADRP X0, 0xD3B000
	0x033F2E5C LDR X0, [X0 + 0x808]
	0x033F2E60 BL 0x1C16CF4
	0x033F2E64 MOVZ W8, 0x1
	0x033F2E68 STRB W8, [X20 + 0x4A6]
	0x033F2E6C LDR X0, [X21]
	0x033F2E70 BL 0x1C16F10
	0x033F2E74 ADRP X21, 0xFEB000
	0x033F2E78 LDRB W8, [X21 + 0x49F]
	0x033F2E7C MOV X20, X0
	0x033F2E80 TBNZ X8, 0x0, 0x33F2E98
	0x033F2E84 ADRP X0, 0xD29000
	0x033F2E88 LDR X0, [X0 + 0x580]
	0x033F2E8C BL 0x1C16CF4
	0x033F2E90 MOVZ W8, 0x1
	0x033F2E94 STRB W8, [X21 + 0x49F]
	0x033F2E98 MOV X0, X20
	0x033F2E9C MOV X1, X31
	0x033F2EA0 BL 0x33BDD8C
	0x033F2EA4 STR X19, [X20 + 0x18]
	0x033F2EA8 MOV X0, X20
	0x033F2EAC LDP X20, X19, [X31 + 0x10]
	0x033F2EB0 MOV W1, W31
	0x033F2EB4 LDP X30, X21, [X31], #0x20
	0x033F2EB8 B 0x33E9E8C
	0x033F2EBC MOV X0, X31
	0x033F2EC0 RET
	0x033F2EC4 MOVN W1, 0x0
	0x033F2EC8 MOV X2, X31
	0x033F2ECC B 0x33F2ED0
	0x033F2ED0 STR X30, [X31 - 0x30]!
	0x033F2ED4 STP X22, X21, [X31 + 0x10]
	0x033F2ED8 STP X20, X19, [X31 + 0x20]
	0x033F2EDC ADRP X22, 0xFEB000
	0x033F2EE0 LDRB W8, [X22 + 0x465]
	0x033F2EE4 MOV X20, X2
	0x033F2EE8 MOV W21, W1
	0x033F2EEC MOV X19, X0
	0x033F2EF0 STR X2, [X31 + 0x8]
	0x033F2EF4 TBNZ X8, 0x0, 0x33F2F0C
	0x033F2EF8 ADRP X0, 0xD09000
	0x033F2EFC LDR X0, [X0 + 0x7D8]
	0x033F2F00 BL 0x1C16CF4
	0x033F2F04 MOVZ W8, 0x1
	0x033F2F08 STRB W8, [X22 + 0x465]
	0x033F2F0C ADDS W31, W21, 0x2
	0x033F2F10 B.LE 0x33F2FD8
	0x033F2F14 LDR W22, [X19 + 0x38]
	0x033F2F18 BL 0x1C16D44
	0x033F2F1C MOVZ W8, 0x11000000
	0x033F2F20 AND W8, W22, W8, 0x0
	0x033F2F24 MOVZ W9, 0x1000000
	0x033F2F28 CMP W8, W9
	0x033F2F2C B.NE 0x33F2F38
	0x033F2F30 MOVZ W20, 0x1
	0x033F2F34 B 0x33F2FC4
	0x033F2F38 MOV X0, X19
	0x033F2F3C MOV W1, W21
	0x033F2F40 MOV X2, X20
	0x033F2F44 MOV X3, X31
	0x033F2F48 BL 0x33F3028
	0x033F2F4C TBZ X0, 0x0, 0x33F2FC0
	0x033F2F50 LDR W20, [X19 + 0x38]
	0x033F2F54 BL 0x1C16D44
	0x033F2F58 MOVZ W8, 0x11000000
	0x033F2F5C AND W8, W20, W8, 0x0
	0x033F2F60 MOVZ W9, 0x1000000
	0x033F2F64 CMP W8, W9
	0x033F2F68 B.EQ 0x33F2F30
	0x033F2F6C MOV X0, X19
	0x033F2F70 BL 0x33EFEA4
	0x033F2F74 LDR W20, [X19 + 0x38]
	0x033F2F78 BL 0x1C16D44
	0x033F2F7C AND W8, W20, 0x600000
	0x033F2F80 CMP W8, 0x400000
	0x033F2F84 B.NE 0x33F2FAC
	0x033F2F88 ADRP X8, 0xD09000
	0x033F2F8C LDR X8, [X8 + 0x7D8]
	0x033F2F90 LDR X0, [X8]
	0x033F2F94 LDR W8, [X0 + 0xE0]
	0x033F2F98 CBNZ W8, 0x33F2FA0
	0x033F2F9C BL 0x1C16DFC
	0x033F2FA0 ADD X0, X31, 0x8
	0x033F2FA4 MOV X1, X31
	0x033F2FA8 BL 0x33DDC30
	0x033F2FAC MOVZ W1, 0x1
	0x033F2FB0 MOV X0, X19
	0x033F2FB4 MOVZ W20, 0x1
	0x033F2FB8 BL 0x33F12BC
	0x033F2FBC B 0x33F2FC4
	0x033F2FC0 MOV W20, W31
	0x033F2FC4 MOV W0, W20
	0x033F2FC8 LDP X20, X19, [X31 + 0x20]
	0x033F2FCC LDP X22, X21, [X31 + 0x10]
	0x033F2FD0 LDR X30, [X31], #0x30
	0x033F2FD4 RET
	0x033F2FD8 ADRP X0, 0xD09000
	0x033F2FDC LDR X0, [X0 + 0x760]
	0x033F2FE0 BL 0x1C16D08
	0x033F2FE4 BL 0x1C16F10
	0x033F2FE8 MOV X19, X0
	0x033F2FEC ADRP X0, 0xD3A000
	0x033F2FF0 LDR X0, [X0 + 0xFD8]
	0x033F2FF4 BL 0x1C16D08
	0x033F2FF8 MOV X1, X0
	0x033F2FFC MOV X0, X19
	0x033F3000 MOV X2, X31
	0x033F3004 BL 0x3316014
	0x033F3008 ADRP X0, 0xD3A000
	0x033F300C LDR X0, [X0 + 0x810]
	0x033F3010 BL 0x1C16D08
	0x033F3014 MOV X1, X0
	0x033F3018 MOV X0, X19
	0x033F301C BL 0x1C16DEC
	0x033F3020 MOV X2, X31
	0x033F3024 B 0x33F2ED0
	0x033F3028 SUB X31, X31, 0x160
	0x033F302C STR X29, [X31 + 0x140]
	0x033F3030 STP X30, X19, [X31 + 0x150]
	0x033F3034 ADD X19, X31, 0x98
	0x033F3038 STR X2, [X19 + 0x98]
	0x033F303C STR X0, [X19 + 0x90]
	0x033F3040 STR W1, [X31 + 0x124]
	0x033F3044 STR X3, [X19 + 0x80]
	0x033F3048 ADRP X8, 0xFEA000
	0x033F304C ADD X8, X8, 0x466
	0x033F3050 LDRB W8, [X8]
	0x033F3054 AND W8, W8, 0x1
	0x033F3058 TBNZ X8, 0x0, 0x33F3094
	0x033F305C ADRP X8, 0xD08000
	0x033F3060 LDR X0, [X8 + 0x7D8]
	0x033F3064 BL 0x1C16CF4
	0x033F3068 ADRP X8, 0xD08000
	0x033F306C LDR X0, [X8 + 0x7E8]
	0x033F3070 BL 0x1C16CF4
	0x033F3074 ADRP X8, 0xD01000
	0x033F3078 LDR X0, [X8 + 0x7B8]
	0x033F307C BL 0x1C16CF4
	0x033F3080 MOVZ W8, 0x1
	0x033F3084 ADRP X9, 0xFEA000
	0x033F3088 ADD X9, X9, 0x466
	0x033F308C AND W8, W8, 0x1
	0x033F3090 STRB W8, [X9]
	0x033F3094 STRB W31, [X31 + 0x114]
	0x033F3098 STR X31, [X19 + 0x70]
	0x033F309C STR X31, [X19 + 0x68]
	0x033F30A0 STR W31, [X31 + 0xFC]
	0x033F30A4 STR W31, [X31 + 0xF8]
	0x033F30A8 STR W31, [X31 + 0xF4]
	0x033F30AC STR W31, [X31 + 0xF0]
	0x033F30B0 STR W31, [X31 + 0xEC]
	0x033F30B4 MOV X0, X31
	0x033F30B8 BL 0x3224FFC
	0x033F30BC AND W8, W0, 0x1
	0x033F30C0 STRB W8, [X31 + 0xE8]
	0x033F30C4 LDRB W8, [X31 + 0xE8]
	0x033F30C8 TBNZ X8, 0x0, 0x33F30D8
	0x033F30CC MOVZ W8, 0x2
	0x033F30D0 STR W8, [X31 + 0xE4]
	0x033F30D4 B 0x33F30DC
	0x033F30D8 STR W31, [X31 + 0xE4]
	0x033F30DC LDR W8, [X31 + 0xE4]
	0x033F30E0 CBZ W8, 0x33F30F4
	0x033F30E4 B 0x33F30E8
	0x033F30E8 SUBS W8, W8, 0x2
	0x033F30EC B.EQ 0x33F327C
	0x033F30F0 B 0x33F35BC
	0x033F30F4 ADRP X8, 0xD01000
	0x033F30F8 LDR X8, [X8 + 0x7B8]
	0x033F30FC LDR X0, [X8]
	0x033F3100 BL 0x19903D0
	0x033F3104 MOV X0, X31
	0x033F3108 BL 0x34000EC
	0x033F310C STR X0, [X19 + 0x40]
	0x033F3110 LDR X8, [X19 + 0x40]
	0x033F3114 STR X8, [X19 + 0x70]
	0x033F3118 LDR X8, [X19 + 0x70]
	0x033F311C STR X8, [X19 + 0x38]
	0x033F3120 LDR X8, [X19 + 0x38]
	0x033F3124 CBZ X8, 0x33F3134
	0x033F3128 MOVZ W8, 0x3
	0x033F312C STR W8, [X31 + 0xE4]
	0x033F3130 B 0x33F3138
	0x033F3134 STR W31, [X31 + 0xE4]
	0x033F3138 LDR W8, [X31 + 0xE4]
	0x033F313C CBZ W8, 0x33F3150
	0x033F3140 B 0x33F3144
	0x033F3144 SUBS W8, W8, 0x3
	0x033F3148 B.EQ 0x33F31A0
	0x033F314C B 0x33F35BC
	0x033F3150 ADRP X8, 0xD08000
	0x033F3154 LDR X8, [X8 + 0x7E8]
	0x033F3158 LDR X0, [X8]
	0x033F315C BL 0x19903D0
	0x033F3160 MOV X0, X31
	0x033F3164 BL 0x340013C
	0x033F3168 STR X0, [X19 + 0x30]
	0x033F316C LDR X0, [X19 + 0x30]
	0x033F3170 BL 0x19903C0
	0x033F3174 LDR X0, [X19 + 0x30]
	0x033F3178 BL 0x33F3894
	0x033F317C STR W0, [X31 + 0xC4]
	0x033F3180 LDR W8, [X31 + 0xC4]
	0x033F3184 STR W8, [X31 + 0xFC]
	0x033F3188 MOVZ W8, 0x4
	0x033F318C STR W8, [X31 + 0xE4]
	0x033F3190 LDR W8, [X31 + 0xE4]
	0x033F3194 CMP W8, 0x4
	0x033F3198 B.EQ 0x33F31D8
	0x033F319C B 0x33F35BC
	0x033F31A0 LDR X8, [X19 + 0x70]
	0x033F31A4 STR X8, [X19 + 0x20]
	0x033F31A8 LDR X0, [X19 + 0x20]
	0x033F31AC BL 0x19903C0
	0x033F31B0 LDR X8, [X19 + 0x20]
	0x033F31B4 LDR X8, [X8 + 0x28]
	0x033F31B8 STR X8, [X19 + 0x18]
	0x033F31BC LDR X0, [X19 + 0x18]
	0x033F31C0 BL 0x19903C0
	0x033F31C4 LDR X0, [X19 + 0x18]
	0x033F31C8 BL 0x33F3894
	0x033F31CC STR W0, [X31 + 0xAC]
	0x033F31D0 LDR W8, [X31 + 0xAC]
	0x033F31D4 STR W8, [X31 + 0xFC]
	0x033F31D8 LDR X8, [X19 + 0x70]
	0x033F31DC STR X8, [X19 + 0x8]
	0x033F31E0 LDR X8, [X19 + 0x8]
	0x033F31E4 CBZ X8, 0x33F31FC
	0x033F31E8 LDR W8, [X31 + 0xFC]
	0x033F31EC STR W8, [X31 + 0xF8]
	0x033F31F0 MOVZ W8, 0x5
	0x033F31F4 STR W8, [X31 + 0xE4]
	0x033F31F8 B 0x33F3208
	0x033F31FC LDR W8, [X31 + 0xFC]
	0x033F3200 STR W8, [X31 + 0xF4]
	0x033F3204 STR W31, [X31 + 0xE4]
	0x033F3208 LDR W8, [X31 + 0xE4]
	0x033F320C CBZ W8, 0x33F3220
	0x033F3210 B 0x33F3214
	0x033F3214 SUBS W8, W8, 0x5
	0x033F3218 B.EQ 0x33F3230
	0x033F321C B 0x33F35BC
	0x033F3220 STR W31, [X31 + 0xF0]
	0x033F3224 LDR W8, [X31 + 0xF4]
	0x033F3228 STR W8, [X31 + 0xEC]
	0x033F322C B 0x33F325C
	0x033F3230 LDR X8, [X19 + 0x70]
	0x033F3234 STR X8, [X19]
	0x033F3238 LDR X0, [X19]
	0x033F323C BL 0x19903C0
	0x033F3240 LDR X0, [X19]
	0x033F3244 BL 0x33EE7D4
	0x033F3248 STR W0, [X31 + 0x94]
	0x033F324C LDR W8, [X31 + 0x94]
	0x033F3250 STR W8, [X31 + 0xF0]
	0x033F3254 LDR W8, [X31 + 0xF8]
	0x033F3258 STR W8, [X31 + 0xEC]
	0x033F325C LDR X0, [X19 + 0x90]
	0x033F3260 BL 0x33EE7D4
	0x033F3264 STR W0, [X31 + 0x90]
	0x033F3268 LDR W0, [X31 + 0xEC]
	0x033F326C LDR W1, [X31 + 0xF0]
	0x033F3270 LDR W2, [X31 + 0x90]
	0x033F3274 MOV X3, X31
	0x033F3278 BL 0x32250E0
	0x033F327C LDR X0, [X19 + 0x90]
	0x033F3280 BL 0x33ED11C
	0x033F3284 AND W8, W0, 0x1
	0x033F3288 STRB W8, [X31 + 0x8C]
	0x033F328C LDRB W8, [X31 + 0x8C]
	0x033F3290 AND W8, W8, 0x1
	0x033F3294 STRB W8, [X31 + 0x114]
	0x033F3298 LDRB W8, [X31 + 0x114]
	0x033F329C AND W8, W8, 0x1
	0x033F32A0 STRB W8, [X31 + 0x88]
	0x033F32A4 LDRB W8, [X31 + 0x88]
	0x033F32A8 TBZ X8, 0x0, 0x33F32B8
	0x033F32AC MOVZ W8, 0x7
	0x033F32B0 STR W8, [X31 + 0xE4]
	0x033F32B4 B 0x33F32BC
	0x033F32B8 STR W31, [X31 + 0xE4]
	0x033F32BC LDR W8, [X31 + 0xE4]
	0x033F32C0 CBZ W8, 0x33F32D4
	0x033F32C4 B 0x33F32C8
	0x033F32C8 SUBS W8, W8, 0x7
	0x033F32CC B.EQ 0x33F342C
	0x033F32D0 B 0x33F35BC
	0x033F32D4 LDR W8, [X31 + 0x124]
	0x033F32D8 STR W8, [X31 + 0x84]
	0x033F32DC LDR W8, [X31 + 0x84]
	0x033F32E0 ADDS W31, W8, 0x1
	0x033F32E4 B.EQ 0x33F32F4
	0x033F32E8 MOVZ W8, 0x8
	0x033F32EC STR W8, [X31 + 0xE4]
	0x033F32F0 B 0x33F32F8
	0x033F32F4 STR W31, [X31 + 0xE4]
	0x033F32F8 LDR W8, [X31 + 0xE4]
	0x033F32FC CBZ W8, 0x33F3310
	0x033F3300 B 0x33F3304
	0x033F3304 SUBS W8, W8, 0x8
	0x033F3308 B.EQ 0x33F33F0
	0x033F330C B 0x33F35BC
	0x033F3310 ADRP X8, 0xD08000
	0x033F3314 LDR X8, [X8 + 0x7D8]
	0x033F3318 LDR X0, [X8]
	0x033F331C BL 0x19903D0
	0x033F3320 ADD X0, X31, 0x130
	0x033F3324 MOV X1, X31
	0x033F3328 BL 0x33DD2F8
	0x033F332C AND W8, W0, 0x1
	0x033F3330 STRB W8, [X31 + 0x80]
	0x033F3334 LDRB W8, [X31 + 0x80]
	0x033F3338 TBZ X8, 0x0, 0x33F3348
	0x033F333C MOVZ W8, 0x8
	0x033F3340 STR W8, [X31 + 0xE4]
	0x033F3344 B 0x33F334C
	0x033F3348 STR W31, [X31 + 0xE4]
	0x033F334C LDR W8, [X31 + 0xE4]
	0x033F3350 CBZ W8, 0x33F3364
	0x033F3354 B 0x33F3358
	0x033F3358 SUBS W8, W8, 0x8
	0x033F335C B.EQ 0x33F33F0
	0x033F3360 B 0x33F35BC
	0x033F3364 LDR X0, [X19 + 0x90]
	0x033F3368 BL 0x33F35D0
	0x033F336C AND W8, W0, 0x1
	0x033F3370 STRB W8, [X31 + 0x7C]
	0x033F3374 LDRB W8, [X31 + 0x7C]
	0x033F3378 TBNZ X8, 0x0, 0x33F3388
	0x033F337C MOVZ W8, 0x8
	0x033F3380 STR W8, [X31 + 0xE4]
	0x033F3384 B 0x33F338C
	0x033F3388 STR W31, [X31 + 0xE4]
	0x033F338C LDR W8, [X31 + 0xE4]
	0x033F3390 CBZ W8, 0x33F33A4
	0x033F3394 B 0x33F3398
	0x033F3398 SUBS W8, W8, 0x8
	0x033F339C B.EQ 0x33F33F0
	0x033F33A0 B 0x33F35BC
	0x033F33A4 LDR X0, [X19 + 0x90]
	0x033F33A8 BL 0x33ED11C
	0x033F33AC AND W8, W0, 0x1
	0x033F33B0 STRB W8, [X31 + 0x78]
	0x033F33B4 LDRB W8, [X31 + 0x78]
	0x033F33B8 TBNZ X8, 0x0, 0x33F33C8
	0x033F33BC MOVZ W8, 0x8
	0x033F33C0 STR W8, [X31 + 0xE4]
	0x033F33C4 B 0x33F33CC
	0x033F33C8 STR W31, [X31 + 0xE4]
	0x033F33CC LDR W8, [X31 + 0xE4]
	0x033F33D0 CBZ W8, 0x33F33E4
	0x033F33D4 B 0x33F33D8
	0x033F33D8 SUBS W8, W8, 0x8
	0x033F33DC B.EQ 0x33F33F0
	0x033F33E0 B 0x33F35BC
	0x033F33E4 MOVZ W8, 0x1
	0x033F33E8 STRB W8, [X31 + 0x114]
	0x033F33EC B 0x33F342C
	0x033F33F0 LDR W8, [X31 + 0x124]
	0x033F33F4 STR W8, [X31 + 0x74]
	0x033F33F8 LDR X8, [X19 + 0x98]
	0x033F33FC STR X8, [X31 + 0x68]
	0x033F3400 LDR X0, [X19 + 0x90]
	0x033F3404 LDR W1, [X31 + 0x74]
	0x033F3408 LDR X8, [X31 + 0x68]
	0x033F340C STR X8, [X31 + 0x58]
	0x033F3410 LDR X2, [X31 + 0x58]
	0x033F3414 BL 0x33F3928
	0x033F3418 AND W8, W0, 0x1
	0x033F341C STRB W8, [X31 + 0x64]
	0x033F3420 LDRB W8, [X31 + 0x64]
	0x033F3424 AND W8, W8, 0x1
	0x033F3428 STRB W8, [X31 + 0x114]
	0x033F342C MOV X0, X31
	0x033F3430 BL 0x3224FFC
	0x033F3434 AND W8, W0, 0x1
	0x033F3438 STRB W8, [X31 + 0x54]
	0x033F343C LDRB W8, [X31 + 0x54]
	0x033F3440 TBNZ X8, 0x0, 0x33F3450
	0x033F3444 MOVZ W8, 0x9
	0x033F3448 STR W8, [X31 + 0xE4]
	0x033F344C B 0x33F3454
	0x033F3450 STR W31, [X31 + 0xE4]
	0x033F3454 LDR W8, [X31 + 0xE4]
	0x033F3458 CBZ W8, 0x33F346C
	0x033F345C B 0x33F3460
	0x033F3460 SUBS W8, W8, 0x9
	0x033F3464 B.EQ 0x33F359C
	0x033F3468 B 0x33F35BC
	0x033F346C ADRP X8, 0xD01000
	0x033F3470 LDR X8, [X8 + 0x7B8]
	0x033F3474 LDR X0, [X8]
	0x033F3478 BL 0x19903D0
	0x033F347C MOV X0, X31
	0x033F3480 BL 0x34000EC
	0x033F3484 STR X0, [X31 + 0x48]
	0x033F3488 LDR X8, [X31 + 0x48]
	0x033F348C STR X8, [X19 + 0x68]
	0x033F3490 LDR X8, [X19 + 0x68]
	0x033F3494 STR X8, [X31 + 0x40]
	0x033F3498 LDR X8, [X31 + 0x40]
	0x033F349C CBNZ X8, 0x33F34AC
	0x033F34A0 MOVZ W8, 0xA
	0x033F34A4 STR W8, [X31 + 0xE4]
	0x033F34A8 B 0x33F34B0
	0x033F34AC STR W31, [X31 + 0xE4]
	0x033F34B0 LDR W8, [X31 + 0xE4]
	0x033F34B4 CBZ W8, 0x33F34C8
	0x033F34B8 B 0x33F34BC
	0x033F34BC SUBS W8, W8, 0xA
	0x033F34C0 B.EQ 0x33F354C
	0x033F34C4 B 0x33F35BC
	0x033F34C8 LDR X8, [X19 + 0x68]
	0x033F34CC STR X8, [X31 + 0x38]
	0x033F34D0 LDR X0, [X31 + 0x38]
	0x033F34D4 BL 0x19903C0
	0x033F34D8 LDR X8, [X31 + 0x38]
	0x033F34DC LDR X8, [X8 + 0x28]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], X29
	003 Move [X31+40], X30
	004 Move [X31+48], X28
	005 Move [X31+56], X27
	006 Move [X31+64], X26
	007 Move [X31+72], X25
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X20, 0xFEC000
	015 Move X27, 0xD03000
	016 Move W8, [X20+1131]
	017 Move X27, [X27+1976]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {58}
	023 Move X0, 0xD03000
	024 Move X0, [X0+3696]
	025 Call 0x1C17CF4
	026 Move X0, 0xD3C000
	027 Move X0, [X0+1984]
	028 Call 0x1C17CF4
	029 Move X0, 0xD2A000
	030 Move X0, [X0+1832]
	031 Call 0x1C17CF4
	032 Move X0, 0xD3C000
	033 Move X0, [X0+1992]
	034 Call 0x1C17CF4
	035 Move X0, 0xD3C000
	036 Move X0, [X0+1784]
	037 Call 0x1C17CF4
	038 Move X0, 0xD3C000
	039 Move X0, [X0+2000]
	040 Call 0x1C17CF4
	041 Move X0, 0xD3C000
	042 Move X0, [X0+2008]
	043 Call 0x1C17CF4
	044 Move X0, 0xD3C000
	045 Move X0, [X0+1800]
	046 Call 0x1C17CF4
	047 Move X0, 0xD3C000
	048 Move X0, [X0+2016]
	049 Call 0x1C17CF4
	050 Move X0, 0xD3C000
	051 Move X0, [X0+2024]
	052 Call 0x1C17CF4
	053 Move X0, 0xD03000
	054 Move X0, [X0+1976]
	055 Call 0x1C17CF4
	056 Move W8, 1
	057 Move [X20+1131], W8
	058 Move [X31+12], W31
	059 Add X20, X19, 64
	060 Call 0x1C17D44
	061 Move X0, [X27]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {67}
	065 Call 0x1C17DFC
	066 Move X0, [X27]
	067 Move X8, [X0+184]
	068 Add X1, X31, 24
	069 Add X2, X31, 16
	070 Move X0, X20
	071 Move X8, [X8+8]
	072 Move [X31+16], X31
	073 Move [X31+24], X8
	074 Call 0x1C25318
	075 Move X20, [X31+16]
	076 Compare X20, 0
	077 JumpIfEqual {418}
	078 Move X23, 0xD2A000
	079 Move X23, [X23+1832]
	080 Move X0, [X23]
	081 Move W8, [X0+224]
	082 Compare W8, 0
	083 JumpIfNotEqual {85}
	084 Call 0x1C17DFC
	085 Move X29, 0xD03000
	086 Move W21, [X19+56]
	087 Move X29, [X29+3696]
	088 Call 0x1C17D44
	089 Move TEMP, X21
	090 And TEMP, TEMP, 0x8000000
	091 Compare TEMP, 0x8000000
	092 JumpIfEqual {97}
	093 Move W21, [X19+56]
	094 Call 0x1C17D44
	095 Move W8, 1
	096 NotImplemented "Instruction BIC not yet implemented."
	097 Move W21, W31
	098 Move X8, [X29]
	099 Move X9, [X20]
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X26, 0xD3C000
	102 Move X26, [X26+1992]
	103 Move X0, X20
	104 Move X1, [X26]
	105 Call 0x1C17E00
	106 Compare X0, 0
	107 JumpIfEqual {136}
	108 Move X22, X0
	109 Compare W21, 0
	110 JumpIfNotEqual {382}
	111 Move X8, [X22]
	112 Move X1, [X26]
	113 NotImplemented "Instruction LDRH not yet implemented."
	114 Compare X9, 0
	115 JumpIfEqual {122}
	116 Move X10, [X8+176]
	117 Add X10, X10, 8
	118 NotImplemented "Instruction LDUR not yet implemented."
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Subtract X9, X9, 1
	121 Add X10, X10, 16
	122 Move W2, 1
	123 Move X0, X22
	124 Call 0x1C5D788
	125 Move X0, [X27]
	126 Move W8, [X0+224]
	127 Compare W8, 0
	128 JumpIfNotEqual {131}
	129 Call 0x1C17DFC
	130 Move X0, [X27]
	131 Call 0x1C17D0C
	132 Move X2, X0
	133 Move X0, X20
	134 Move W1, W21
	135 Call AwaitTaskContinuation.RunOrScheduleAction, X0, X1, X2
	136 Move X9, 0xD3C000
	137 Move X9, [X9+2024]
	138 Move X8, [X20]
	139 Move X9, [X9]
	140 Move W11, [X8+304]
	141 Move W10, [X9+304]
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Move X11, [X8+200]
	144 Add X10, X11, X10
	145 NotImplemented "Instruction LDUR not yet implemented."
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Move X9, 0xD3B000
	148 Move X9, [X9+1784]
	149 Move X9, [X9]
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Move [X31+12], W31
	152 Add X1, X31, 12
	153 Move X0, X20
	154 Move X2, X31
	155 Call Monitor.Enter, X0, X1
	156 Move X22, X31
	157 Move W23, 13
	158 Move W8, [X31+12]
	159 Compare W8, 0
	160 JumpIfEqual {164}
	161 Move X0, X20
	162 Move X1, X31
	163 Call Monitor.Exit, X0
	164 Compare X22, 0
	165 JumpIfNotEqual {441}
	166 NotImplemented "Instruction CMP not yet implemented."
	167 Compare W23, 0
	168 JumpIfNotEqual {418}
	169 Move W28, [X20+24]
	170 NotImplemented "Instruction CMP not yet implemented."
	171 Move X25, 0xD3B000
	172 Move X24, 0xD3B000
	173 Move X25, [X25+2008]
	174 Move X24, [X24+2016]
	175 Move W22, W31
	176 Move X2, [X25]
	177 Move X0, X20
	178 Move W1, W22
	179 Call 0x319C580, X0, X1
	180 Compare X0, 0
	181 JumpIfEqual {211}
	182 Move X9, [X0]
	183 Move X8, [X24]
	184 Move X23, X0
	185 Move W11, [X9+304]
	186 Move W10, [X8+304]
	187 NotImplemented "Instruction CMP not yet implemented."
	188 Move X9, [X9+200]
	189 Add X9, X9, X10
	190 NotImplemented "Instruction LDUR not yet implemented."
	191 NotImplemented "Instruction CMP not yet implemented."
	192 Move W8, [X23+26]
	193 Move TEMP, X8
	194 And TEMP, TEMP, 8
	195 Compare TEMP, 8
	196 JumpIfEqual {211}
	197 Move X8, 0xD3B000
	198 Move X8, [X8+1800]
	199 Move X0, X20
	200 Move W1, W22
	201 Move X2, X31
	202 Move X3, [X8]
	203 Call 0x319C5F0, X0, X1, X2
	204 Move X8, [X23]
	205 Move X0, X23
	206 Move X1, X19
	207 Move W2, W21
	208 Move X9, [X8+376]
	209 Move X3, [X8+384]
	210 NotImplemented "Instruction BLR not yet implemented."
	211 Add W22, W22, 1
	212 NotImplemented "Instruction CMP not yet implemented."
	213 NotImplemented "Instruction CMP not yet implemented."
	214 Move W22, W31
	215 Move X2, [X25]
	216 Move X0, X20
	217 Move W1, W22
	218 Call 0x319C580, X0, X1
	219 Compare X0, 0
	220 JumpIfEqual {344}
	221 Move X8, 0xD3B000
	222 Move X8, [X8+1800]
	223 Move X24, X0
	224 Move X0, X20
	225 Move W1, W22
	226 Move X3, [X8]
	227 Move X2, X31
	228 Call 0x319C5F0, X0, X1, X2
	229 Move X9, [X29]
	230 Move X8, [X24]
	231 NotImplemented "Instruction CMP not yet implemented."
	232 NotImplemented "Instruction CSEL not yet implemented."
	233 Compare X23, 0
	234 JumpIfEqual {246}
	235 Move X0, [X27]
	236 Move W8, [X0+224]
	237 Compare W8, 0
	238 JumpIfNotEqual {241}
	239 Call 0x1C17DFC
	240 Move X0, [X27]
	241 Call 0x1C17D0C
	242 Move X2, X0
	243 Move X0, X23
	244 Move W1, W21
	245 Call AwaitTaskContinuation.RunOrScheduleAction, X0, X1, X2
	246 Move X9, 0xD3B000
	247 Move X9, [X9+2024]
	248 Move W11, [X8+304]
	249 Move X9, [X9]
	250 Move W10, [X9+304]
	251 NotImplemented "Instruction CMP not yet implemented."
	252 Move X11, [X8+200]
	253 Add X10, X11, X10
	254 NotImplemented "Instruction LDUR not yet implemented."
	255 NotImplemented "Instruction CMP not yet implemented."
	256 Move W23, W28
	257 Move W28, W21
	258 Move X21, X27
	259 Move X27, X29
	260 Move X29, X25
	261 Move X25, X26
	262 Move X26, [X26]
	263 Move X0, X24
	264 Move X1, X26
	265 Call 0x1C17E00
	266 Compare X0, 0
	267 JumpIfEqual {438}
	268 Move X26, X25
	269 Move X25, X29
	270 Move X29, X27
	271 Move X27, X21
	272 Move W21, W28
	273 Move W28, W23
	274 Move X23, X0
	275 Move X8, X0
	276 Compare W21, 0
	277 JumpIfNotEqual {322}
	278 Move X8, [X23]
	279 Move X1, [X26]
	280 NotImplemented "Instruction LDRH not yet implemented."
	281 Compare X9, 0
	282 JumpIfEqual {289}
	283 Move X10, [X8+176]
	284 Add X10, X10, 8
	285 NotImplemented "Instruction LDUR not yet implemented."
	286 NotImplemented "Instruction CMP not yet implemented."
	287 Subtract X9, X9, 1
	288 Add X10, X10, 16
	289 Move W2, 1
	290 Move X0, X23
	291 Call 0x1C5D788
	292 Move X9, [X8+376]
	293 Move X3, [X8+384]
	294 Move X0, X24
	295 Move X1, X19
	296 Move W2, W21
	297 NotImplemented "Instruction BLR not yet implemented."
	298 Move W9, [X10]
	299 Add W9, W9, 1
	300 Add X8, X8, W9
	301 Add X0, X8, 312
	302 Move X8, [X0]
	303 Move X1, [X0+8]
	304 Move X0, X23
	305 NotImplemented "Instruction BLR not yet implemented."
	306 Move TEMP, X0
	307 And TEMP, TEMP, 1
	308 Compare TEMP, 1
	309 JumpIfNotEqual {322}
	310 Move X8, 0xD3B000
	311 Move X8, [X8+1984]
	312 Move X0, [X8]
	313 Call 0x1C17F10
	314 Move X1, X31
	315 Move X24, X0
	316 Call Object..ctor, X0
	317 Move X0, X24
	318 Move W1, W31
	319 Move [X24+16], X23
	320 Move [X24+24], X19
	321 Call ThreadPool.UnsafeQueueCustomWorkItem, X0, X1
	322 Move X8, [X23]
	323 Move X1, [X26]
	324 NotImplemented "Instruction LDRH not yet implemented."
	325 Compare X9, 0
	326 JumpIfEqual {333}
	327 Move X10, [X8+176]
	328 Add X10, X10, 8
	329 NotImplemented "Instruction LDUR not yet implemented."
	330 NotImplemented "Instruction CMP not yet implemented."
	331 Subtract X9, X9, 1
	332 Add X10, X10, 16
	333 Move X0, X23
	334 Move W2, W31
	335 Call 0x1C5D788
	336 NotImplemented "Instruction LDRSW not yet implemented."
	337 Add X8, X8, X9
	338 Add X0, X8, 312
	339 Move X8, [X0]
	340 Move X2, [X0+8]
	341 Move X0, X23
	342 Move X1, X19
	343 NotImplemented "Instruction BLR not yet implemented."
	344 Add W22, W22, 1
	345 NotImplemented "Instruction CMP not yet implemented."
	346 Move X19, 0xFEB000
	347 Move W8, [X19+1282]
	348 Compare W8, 0
	349 JumpIfNotEqual {355}
	350 Move X0, 0xD29000
	351 Move X0, [X0+1832]
	352 Call 0x1C17CF4
	353 Move W8, 1
	354 Move [X19+1282], W8
	355 Move X8, 0xD29000
	356 Move X8, [X8+1832]
	357 Move X0, [X8]
	358 Move W9, [X10]
	359 Add W9, W9, 1
	360 Add X8, X8, W9
	361 Add X0, X8, 312
	362 Move X8, [X0]
	363 Move X1, [X0+8]
	364 Move X0, X22
	365 NotImplemented "Instruction BLR not yet implemented."
	366 Move TEMP, X0
	367 And TEMP, TEMP, 1
	368 Compare TEMP, 1
	369 JumpIfNotEqual {382}
	370 Move X8, 0xD3B000
	371 Move X8, [X8+1984]
	372 Move X0, [X8]
	373 Call 0x1C17F10
	374 Move X1, X31
	375 Move X20, X0
	376 Call Object..ctor, X0
	377 Move X0, X20
	378 Move W1, W31
	379 Move [X20+16], X22
	380 Move [X20+24], X19
	381 Call ThreadPool.UnsafeQueueCustomWorkItem, X0, X1
	382 Move X8, [X22]
	383 Move X1, [X26]
	384 NotImplemented "Instruction LDRH not yet implemented."
	385 Compare X9, 0
	386 JumpIfEqual {393}
	387 Move X10, [X8+176]
	388 Add X10, X10, 8
	389 NotImplemented "Instruction LDUR not yet implemented."
	390 NotImplemented "Instruction CMP not yet implemented."
	391 Subtract X9, X9, 1
	392 Add X10, X10, 16
	393 Move X0, X22
	394 Move W2, W31
	395 Call 0x1C5D788
	396 NotImplemented "Instruction LDRSW not yet implemented."
	397 Add X8, X8, X9
	398 Add X0, X8, 312
	399 Move X8, [X0]
	400 Move X2, [X0+8]
	401 Move X0, X22
	402 Move X1, X19
	403 NotImplemented "Instruction BLR not yet implemented."
	404 Move X19, 0xFEB000
	405 Move W8, [X19+1282]
	406 Compare W8, 0
	407 JumpIfNotEqual {413}
	408 Move X0, 0xD29000
	409 Move X0, [X0+1832]
	410 Call 0x1C17CF4
	411 Move W8, 1
	412 Move [X19+1282], W8
	413 Move X0, [X23]
	414 Move W8, [X0+224]
	415 Compare W8, 0
	416 JumpIfNotEqual {418}
	417 Call 0x1C17DFC
	418 Move X20, [X31+112]
	419 Move X19, [X31+120]
	420 Move X22, [X31+96]
	421 Move X21, [X31+104]
	422 Move X24, [X31+80]
	423 Move X23, [X31+88]
	424 Move X26, [X31+64]
	425 Move X25, [X31+72]
	426 Move X28, [X31+48]
	427 Move X27, [X31+56]
	428 Move X29, [X31+32]
	429 Move X30, [X31+40]
	430 Add X31, X31, 128
	431 Return 
	432 Move X9, [X8+376]
	433 Move X3, [X8+384]
	434 Move X0, X20
	435 Move X1, X19
	436 Move W2, W21
	437 NotImplemented "Instruction BLR not yet implemented."
	438 Move X0, X24
	439 Move X1, X26
	440 Call 0x1C181E0
	441 Move X0, X22
	442 Call 0x1C17F18
	443 NotImplemented "Instruction CMP not yet implemented."
	444 Move X23, X0
	445 Move X0, X23
	446 Call 0x3EB2AD0
	447 Move X22, [X0]
	448 Call 0x3EB2AE0
	449 Move W23, W31
	450 Move X22, X31
	451 Move X23, X0
	452 Move W8, [X31+12]
	453 Compare W8, 0
	454 JumpIfEqual {458}
	455 Move X0, X20
	456 Move X1, X31
	457 Call Monitor.Exit, X0
	458 Compare X22, 0
	459 JumpIfNotEqual {462}
	460 Move X0, X23
	461 Call 0x1D2D690
	462 Move X0, X22
	463 Call 0x1C17F18
	464 Call 0x1991590

Method: System.Void LogFinishCompletionNotification()

Disassembly:
	0x033F4F40 MOV X19, X1
	0x033F4F44 TBNZ X8, 0x0, 0x33F4F68
	0x033F4F48 ADRP X0, 0xD00000
	0x033F4F4C LDR X0, [X0 + 0x7B8]
	0x033F4F50 BL 0x1C16CF4
	0x033F4F54 ADRP X0, 0xD01000
	0x033F4F58 LDR X0, [X0 + 0x570]
	0x033F4F5C BL 0x1C16CF4
	0x033F4F60 MOVZ W8, 0x1
	0x033F4F64 STRB W8, [X20 + 0x47A]
	0x033F4F68 LDR X0, [X21]
	0x033F4F6C LDR W8, [X0 + 0xE0]
	0x033F4F70 CBNZ W8, 0x33F4F78
	0x033F4F74 BL 0x1C16DFC
	0x033F4F78 ADD X0, X31, 0x8
	0x033F4F7C MOV X1, X31
	0x033F4F80 BL 0x3394200
	0x033F4F84 MOVZ X9, 0x7FF00000
	0x033F4F88 FMOV D1, X9
	0x033F4F8C FCVTZS X8, D0
	0x033F4F90 MOVZ X10, 0x80000000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xFEA000
	005 Move X20, 0xD28000
	006 Move W8, [X19+1132]
	007 Move X20, [X20+1832]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xD28000
	013 Move X0, [X0+1832]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1132], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfEqual {25}
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return 
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Call 0x1C17DFC
	029 Return 

Method: System.Threading.Tasks.Task ContinueWith(System.Action`1<System.Threading.Tasks.Task> continuationAction)

Disassembly:
	0x033F4F94 FCMP D0, D1
	0x033F4F98 CSEL X20, X10, X8, EQ
	0x033F4F9C ADD X8, X20, 0x1
	0x033F4FA0 ORR W9, W31, 0x80000001
	0x033F4FA4 CMP X8, X9
	0x033F4FA8 B.CS 0x33F4FE0
	0x033F4FAC ADRP X8, 0xD00000
	0x033F4FB0 LDR X8, [X8 + 0x7B8]
	0x033F4FB4 LDR X0, [X8]
	0x033F4FB8 LDR W8, [X0 + 0xE0]
	0x033F4FBC CBNZ W8, 0x33F4FC4
	0x033F4FC0 BL 0x1C16DFC
	0x033F4FC4 MOV W0, W20
	0x033F4FC8 MOV X1, X19
	0x033F4FCC BL 0x33F503C
	0x033F4FD0 LDP X20, X19, [X31 + 0x20]
	0x033F4FD4 LDP X30, X21, [X31 + 0x10]
	0x033F4FD8 ADD X31, X31, 0x30
	0x033F4FDC RET
	0x033F4FE0 ADRP X0, 0xD07000
	0x033F4FE4 LDR X0, [X0 + 0x760]
	0x033F4FE8 BL 0x1C16D08
	0x033F4FEC BL 0x1C16F10
	0x033F4FF0 MOV X19, X0
	0x033F4FF4 ADRP X0, 0xD39000
	0x033F4FF8 LDR X0, [X0 + 0x28]
	0x033F4FFC BL 0x1C16D08
	0x033F5000 MOV X20, X0
	0x033F5004 ADRP X0, 0xD38000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xFEA000
	007 Move X22, 0xD08000
	008 Move W8, [X21+1133]
	009 Move X22, [X22+2024]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD08000
	017 Move X0, [X0+2024]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1133], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Call TaskScheduler.get_Current
	027 Move X2, X0
	028 Move X0, X20
	029 Move X1, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X3, X31
	035 Move W4, W31
	036 Move X30, [X31+48]
	037 Call Task.ContinueWith, X0, X1, X2, X3, X4
	038 Return X0

Method: System.Threading.Tasks.Task ContinueWith(System.Action`1<System.Threading.Tasks.Task> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler)

Disassembly:
	0x033F51FC ADD X8, X31, 0x8
	0x033F5200 ADD X0, X31, 0x48
	0x033F5204 MOV X1, X21
	0x033F5208 MOV X2, X20
	0x033F520C MOV X3, X31

ISIL:
	001 Move W8, W3
	002 Move X3, X2
	003 Move X2, X4
	004 Move W4, W8
	005 Call Task.ContinueWith, X0, X1, X2, X3, X4
	006 Return X0

Method: System.Threading.Tasks.Task ContinueWith(System.Action`1<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions)

Disassembly:
	0x033F50A8 ADRP X0, 0xD38000
	0x033F50AC LDR X0, [X0 + 0x8D0]
	0x033F50B0 BL 0x1C16CF4
	0x033F50B4 ADRP X0, 0xD38000
	0x033F50B8 LDR X0, [X0 + 0x8D8]
	0x033F50BC BL 0x1C16CF4
	0x033F50C0 ADRP X0, 0xD38000
	0x033F50C4 LDR X0, [X0 + 0x8E0]
	0x033F50C8 BL 0x1C16CF4
	0x033F50CC MOVZ W8, 0x1
	0x033F50D0 STRB W8, [X20 + 0x47C]
	0x033F50D4 ADDS W31, W19, 0x2
	0x033F50D8 B.LE 0x33F5368
	0x033F50DC ADRP X23, 0xD06000
	0x033F50E0 LDR X23, [X23 + 0x7D8]
	0x033F50E4 LDR X0, [X23]
	0x033F50E8 LDR W8, [X0 + 0xE0]
	0x033F50EC CBNZ W8, 0x33F50F4
	0x033F50F0 BL 0x1C16DFC
	0x033F50F4 ADD X0, X31, 0x48
	0x033F50F8 MOV X1, X31
	0x033F50FC BL 0x33DD2B0
	0x033F5100 TBZ X0, 0x0, 0x33F5130
	0x033F5104 ADRP X8, 0xCFF000
	0x033F5108 LDR X8, [X8 + 0x7B8]
	0x033F510C LDR X19, [X31 + 0x48]
	0x033F5110 LDR X0, [X8]
	0x033F5114 LDR W8, [X0 + 0xE0]
	0x033F5118 CBNZ W8, 0x33F5120
	0x033F511C BL 0x1C16DFC
	0x033F5120 MOV X0, X19
	0x033F5124 BL 0x33F4AE4
	0x033F5128 MOV X20, X0
	0x033F512C B 0x33F534C
	0x033F5130 CBZ W19, 0x33F52F8
	0x033F5134 ADRP X8, 0xD38000
	0x033F5138 LDR X21, [X31 + 0x48]
	0x033F513C LDR X8, [X8 + 0x8C8]
	0x033F5140 LDR X0, [X8]
	0x033F5144 BL 0x1C16F10
	0x033F5148 MOV X1, X21
	0x033F514C MOV X20, X0
	0x033F5150 BL 0x33F541C
	0x033F5154 LDR X0, [X23]
	0x033F5158 LDR W8, [X0 + 0xE0]
	0x033F515C CBNZ W8, 0x33F5164
	0x033F5160 BL 0x1C16DFC
	0x033F5164 ADD X0, X31, 0x48
	0x033F5168 MOV X1, X31
	0x033F516C BL 0x33DD2F8
	0x033F5170 TBZ X0, 0x0, 0x33F5238
	0x033F5174 ADRP X24, 0xD38000
	0x033F5178 LDR X24, [X24 + 0x8E0]
	0x033F517C LDR X0, [X24]
	0x033F5180 LDR W8, [X0 + 0xE0]
	0x033F5184 CBNZ W8, 0x33F5190
	0x033F5188 BL 0x1C16DFC
	0x033F518C LDR X0, [X24]
	0x033F5190 LDR X8, [X0 + 0xB8]
	0x033F5194 LDR X21, [X8 + 0x8]
	0x033F5198 CBNZ X21, 0x33F51EC
	0x033F519C LDR W8, [X0 + 0xE0]
	0x033F51A0 CBNZ W8, 0x33F51AC
	0x033F51A4 BL 0x1C16DFC
	0x033F51A8 LDR X0, [X24]
	0x033F51AC ADRP X9, 0xD28000
	0x033F51B0 LDR X8, [X0 + 0xB8]
	0x033F51B4 LDR X9, [X9 + 0xE48]
	0x033F51B8 LDR X22, [X8]
	0x033F51BC LDR X0, [X9]
	0x033F51C0 BL 0x1C16F10
	0x033F51C4 ADRP X8, 0xD38000
	0x033F51C8 LDR X8, [X8 + 0x8D0]
	0x033F51CC MOV X1, X22
	0x033F51D0 MOV X3, X31
	0x033F51D4 MOV X21, X0
	0x033F51D8 LDR X2, [X8]
	0x033F51DC BL 0x2A6B948
	0x033F51E0 LDR X8, [X24]
	0x033F51E4 LDR X8, [X8 + 0xB8]
	0x033F51E8 STR X21, [X8 + 0x8]
	0x033F51EC LDR X0, [X23]
	0x033F51F0 LDR W8, [X0 + 0xE0]
	0x033F51F4 CBNZ W8, 0x33F51FC
	0x033F51F8 BL 0x1C16DFC

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X24, 0xFE9000
	011 Move W8, [X24+1134]
	012 Move W19, W4
	013 Move X20, X3
	014 Move X21, X2
	015 Move X23, X1
	016 Move X22, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0xD39000
	022 Move X0, [X0+2104]
	023 Call 0x1C17CF4
	024 Move X0, 0xD00000
	025 Move X0, [X0+1976]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X24+1134], W8
	029 Move [X31+8], X31
	030 Compare X23, 0
	031 JumpIfEqual {75}
	032 Compare X21, 0
	033 JumpIfEqual {82}
	034 Move X8, 0xD00000
	035 Move X8, [X8+1976]
	036 Move X26, 0xD39000
	037 Move X0, [X8]
	038 Move W8, [X0+224]
	039 Move X26, [X26+2104]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Add X1, X31, 12
	044 Add X2, X31, 8
	045 Move W0, W19
	046 Call Task.CreationOptionsFromContinuationOptions, X0, X1, X2
	047 Move X0, [X26]
	048 Move W25, [X31+8]
	049 Move W24, [X31+12]
	050 Call 0x1C17F10
	051 Move X1, X22
	052 Move X2, X23
	053 Move X3, X31
	054 Move W4, W24
	055 Move W5, W25
	056 Move X26, X0
	057 Call ContinuationTaskFromTask..ctor, X0, X1, X2, X3, X4, X5
	058 Move X0, X22
	059 Move X1, X26
	060 Move X2, X21
	061 Move X3, X20
	062 Move W4, W19
	063 Call Task.ContinueWithCore, X0, X1, X2, X3, X4
	064 Move X0, X26
	065 Move X20, [X31+64]
	066 Move X19, [X31+72]
	067 Move X22, [X31+48]
	068 Move X21, [X31+56]
	069 Move X24, [X31+32]
	070 Move X23, [X31+40]
	071 Move X26, [X31+16]
	072 Move X25, [X31+24]
	073 Move X30, [X31+80]
	074 Return X0
	075 Move X0, 0xD04000
	076 Move X0, [X0+1320]
	077 Call 0x1C17D08
	078 Call 0x1C17F10
	079 Move X19, X0
	080 Move X0, 0xD29000
	081 Move X0, [X0+1568]
	082 Move X0, 0xD04000
	083 Move X0, [X0+1320]
	084 Call 0x1C17D08
	085 Call 0x1C17F10
	086 Move X19, X0
	087 Move X0, 0xD27000
	088 Move X0, [X0+1880]
	089 Call 0x1C17D08
	090 Move X1, X0
	091 Move X0, X19
	092 Move X2, X31
	093 Call ArgumentNullException..ctor, X0, X1
	094 Move X0, 0xD39000
	095 Move X0, [X0+2112]
	096 Call 0x1C17D08
	097 Move X1, X0
	098 Move X0, X19
	099 Call 0x1C17DEC

Method: System.Threading.Tasks.Task ContinueWith(System.Action`2<System.Threading.Tasks.Task, System.Object> continuationAction, System.Object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler)

Disassembly:
	0x033F5540 ADRP X19, 0xFE8000
	0x033F5544 ADRP X21, 0xD07000
	0x033F5548 LDRB W8, [X19 + 0x47D]
	0x033F554C LDR X21, [X21 + 0xC20]
	0x033F5550 MOV X20, X0

ISIL:
	001 Move W8, W4
	002 Move X4, X3
	003 Move X3, X5
	004 Move W5, W8

Method: System.Threading.Tasks.Task ContinueWith(System.Action`2<System.Threading.Tasks.Task, System.Object> continuationAction, System.Object state, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions)

Disassembly:
	0x033F5554 TBNZ X8, 0x0, 0x33F55E4
	0x033F5558 ADRP X0, 0xD38000
	0x033F555C LDR X0, [X0 + 0x900]
	0x033F5560 BL 0x1C16CF4
	0x033F5564 ADRP X0, 0xCFE000
	0x033F5568 LDR X0, [X0 + 0xE00]
	0x033F556C BL 0x1C16CF4
	0x033F5570 ADRP X0, 0xD38000
	0x033F5574 LDR X0, [X0 + 0x798]
	0x033F5578 BL 0x1C16CF4
	0x033F557C ADRP X0, 0xD38000
	0x033F5580 LDR X0, [X0 + 0x7A0]
	0x033F5584 BL 0x1C16CF4
	0x033F5588 ADRP X0, 0xCFE000
	0x033F558C LDR X0, [X0 + 0xE18]
	0x033F5590 BL 0x1C16CF4
	0x033F5594 ADRP X0, 0xD38000
	0x033F5598 LDR X0, [X0 + 0x7A8]
	0x033F559C BL 0x1C16CF4
	0x033F55A0 ADRP X0, 0xD38000
	0x033F55A4 LDR X0, [X0 + 0x7B0]
	0x033F55A8 BL 0x1C16CF4
	0x033F55AC ADRP X0, 0xD38000
	0x033F55B0 LDR X0, [X0 + 0x7B8]
	0x033F55B4 BL 0x1C16CF4
	0x033F55B8 ADRP X0, 0xD38000
	0x033F55BC LDR X0, [X0 + 0x908]
	0x033F55C0 BL 0x1C16CF4
	0x033F55C4 ADRP X0, 0xD07000
	0x033F55C8 LDR X0, [X0 + 0xC20]
	0x033F55CC BL 0x1C16CF4
	0x033F55D0 ADRP X0, 0xCFF000
	0x033F55D4 LDR X0, [X0 + 0x7B8]
	0x033F55D8 BL 0x1C16CF4
	0x033F55DC MOVZ W8, 0x1
	0x033F55E0 STRB W8, [X19 + 0x47D]
	0x033F55E4 LDR X1, [X21]
	0x033F55E8 ADRP X23, 0xCFF000
	0x033F55EC LDR X23, [X23 + 0x7B8]
	0x033F55F0 MOV X0, X20
	0x033F55F4 BL 0x1C16E00
	0x033F55F8 CBZ X0, 0x33F5628
	0x033F55FC MOV X19, X0
	0x033F5600 LDR X0, [X23]
	0x033F5604 LDR W8, [X0 + 0xE0]
	0x033F5608 CBNZ W8, 0x33F5610
	0x033F560C BL 0x1C16DFC
	0x033F5610 MOV X0, X19
	0x033F5614 LDP X20, X19, [X31 + 0x30]
	0x033F5618 LDP X22, X21, [X31 + 0x20]
	0x033F561C LDP X24, X23, [X31 + 0x10]
	0x033F5620 LDP X30, X25, [X31], #0x40
	0x033F5624 B 0x33F5DA4
	0x033F5628 ADRP X22, 0xD38000
	0x033F562C LDR X22, [X22 + 0x900]
	0x033F5630 MOV X0, X20
	0x033F5634 LDR X1, [X22]
	0x033F5638 BL 0x1C16E00
	0x033F563C CBZ X0, 0x33F5684
	0x033F5640 LDR X8, [X0]
	0x033F5644 LDR X1, [X22]
	0x033F5648 MOV X19, X0
	0x033F564C LDRH W9, [X8 + 0x12E]
	0x033F5650 CBZ X9, 0x33F5674
	0x033F5654 LDR X10, [X8 + 0xB0]
	0x033F5658 ADD X10, X10, 0x8
	0x033F565C LDUR X11, [X10 - 0x8]
	0x033F5660 CMP X11, X1
	0x033F5664 B.EQ 0x33F56F4
	0x033F5668 SUBS X9, X9, 0x1
	0x033F566C ADD X10, X10, 0x10
	0x033F5670 B.NE 0x33F565C
	0x033F5674 MOV X0, X19
	0x033F5678 MOV W2, W31
	0x033F567C BL 0x1C5C788
	0x033F5680 B 0x33F5700
	0x033F5684 CBZ X20, 0x33F5BDC
	0x033F5688 ADRP X8, 0xD38000
	0x033F568C LDR X8, [X8 + 0x7B0]
	0x033F5690 LDR X0, [X8]
	0x033F5694 BL 0x1C16F10
	0x033F5698 ADRP X8, 0xD38000
	0x033F569C LDR X8, [X8 + 0x7A8]
	0x033F56A0 MOV X19, X0
	0x033F56A4 LDR X1, [X8]
	0x033F56A8 BL 0x319AF58
	0x033F56AC ADRP X10, 0xD38000
	0x033F56B0 LDR X8, [X20]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X25, 0xFE9000
	013 Move W8, [X25+1135]
	014 Move W19, W5
	015 Move X20, X4
	016 Move X21, X3
	017 Move X23, X2
	018 Move X24, X1
	019 Move X22, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {32}
	024 Move X0, 0xD39000
	025 Move X0, [X0+2104]
	026 Call 0x1C17CF4
	027 Move X0, 0xD00000
	028 Move X0, [X0+1976]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X25+1135], W8
	032 Move [X31+8], X31
	033 Compare X24, 0
	034 JumpIfEqual {80}
	035 Compare X21, 0
	036 JumpIfEqual {87}
	037 Move X8, 0xD00000
	038 Move X8, [X8+1976]
	039 Move X27, 0xD39000
	040 Move X0, [X8]
	041 Move W8, [X0+224]
	042 Move X27, [X27+2104]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Add X1, X31, 12
	047 Add X2, X31, 8
	048 Move W0, W19
	049 Call Task.CreationOptionsFromContinuationOptions, X0, X1, X2
	050 Move X0, [X27]
	051 Move W26, [X31+8]
	052 Move W25, [X31+12]
	053 Call 0x1C17F10
	054 Move X1, X22
	055 Move X2, X24
	056 Move X3, X23
	057 Move W4, W25
	058 Move W5, W26
	059 Move X27, X0
	060 Call ContinuationTaskFromTask..ctor, X0, X1, X2, X3, X4, X5
	061 Move X0, X22
	062 Move X1, X27
	063 Move X2, X21
	064 Move X3, X20
	065 Move W4, W19
	066 Call Task.ContinueWithCore, X0, X1, X2, X3, X4
	067 Move X0, X27
	068 Move X20, [X31+80]
	069 Move X19, [X31+88]
	070 Move X22, [X31+64]
	071 Move X21, [X31+72]
	072 Move X24, [X31+48]
	073 Move X23, [X31+56]
	074 Move X26, [X31+32]
	075 Move X25, [X31+40]
	076 Move X30, [X31+16]
	077 Move X27, [X31+24]
	078 Add X31, X31, 96
	079 Return X0
	080 Move X0, 0xD04000
	081 Move X0, [X0+1320]
	082 Call 0x1C17D08
	083 Call 0x1C17F10
	084 Move X19, X0
	085 Move X0, 0xD29000
	086 Move X0, [X0+1568]
	087 Move X0, 0xD04000
	088 Move X0, [X0+1320]
	089 Call 0x1C17D08
	090 Call 0x1C17F10
	091 Move X19, X0
	092 Move X0, 0xD27000
	093 Move X0, [X0+1880]
	094 Call 0x1C17D08
	095 Move X1, X0
	096 Move X0, X19
	097 Move X2, X31
	098 Call ArgumentNullException..ctor, X0, X1
	099 Move X0, 0xD39000
	100 Move X0, [X0+2152]
	101 Call 0x1C17D08
	102 Move X1, X0
	103 Move X0, X19
	104 Call 0x1C17DEC

Method: System.Void CreationOptionsFromContinuationOptions(System.Threading.Tasks.TaskContinuationOptions continuationOptions, out System.Threading.Tasks.TaskCreationOptions creationOptions, out System.Threading.Tasks.InternalTaskOptions internalOptions)

Disassembly:
	0x033F5210 BL 0x33DD664
	0x033F5214 LDUR V0, [X31 + 0x8]
	0x033F5218 LDR X8, [X31 + 0x18]
	0x033F521C STR V0, [X31 + 0x2]
	0x033F5220 STR X8, [X31 + 0x30]
	0x033F5224 CBZ X20, 0x33F52F4
	0x033F5228 LDR X8, [X31 + 0x30]
	0x033F522C LDR V0, [X31 + 0x2]
	0x033F5230 STR X8, [X20 + 0x70]
	0x033F5234 STR V0, [X20 + 0x6]
	0x033F5238 ADDS W31, W19, 0x1
	0x033F523C B.EQ 0x33F534C
	0x033F5240 ADRP X23, 0xD38000
	0x033F5244 LDR X23, [X23 + 0x8E0]
	0x033F5248 LDR X0, [X23]
	0x033F524C LDR W8, [X0 + 0xE0]
	0x033F5250 CBNZ W8, 0x33F525C
	0x033F5254 BL 0x1C16DFC
	0x033F5258 LDR X0, [X23]
	0x033F525C LDR X8, [X0 + 0xB8]
	0x033F5260 LDR X21, [X8 + 0x10]
	0x033F5264 CBNZ X21, 0x33F52B4
	0x033F5268 LDR W8, [X0 + 0xE0]
	0x033F526C CBNZ W8, 0x33F5278
	0x033F5270 BL 0x1C16DFC
	0x033F5274 LDR X0, [X23]
	0x033F5278 ADRP X9, 0xD06000
	0x033F527C LDR X8, [X0 + 0xB8]
	0x033F5280 LDR X9, [X9 + 0xC78]
	0x033F5284 LDR X22, [X8]
	0x033F5288 LDR X0, [X9]
	0x033F528C BL 0x1C16F10
	0x033F5290 ADRP X8, 0xD38000
	0x033F5294 LDR X8, [X8 + 0x8D8]
	0x033F5298 MOV X1, X22
	0x033F529C MOV X21, X0
	0x033F52A0 LDR X2, [X8]
	0x033F52A4 BL 0x33ECC14
	0x033F52A8 LDR X8, [X23]
	0x033F52AC LDR X8, [X8 + 0xB8]
	0x033F52B0 STR X21, [X8 + 0x10]
	0x033F52B4 ADRP X8, 0xD06000
	0x033F52B8 LDR X8, [X8 + 0xC80]
	0x033F52BC LDR X0, [X8]
	0x033F52C0 BL 0x1C16F10
	0x033F52C4 MOV X1, X31
	0x033F52C8 MOV X22, X0
	0x033F52CC BL 0x33C011C
	0x033F52D0 MOV W3, W19
	0x033F52D4 MOVN X4, 0x0
	0x033F52D8 MOV X0, X22
	0x033F52DC MOV X1, X21
	0x033F52E0 MOV X2, X20
	0x033F52E4 BL 0x33EBB94
	0x033F52E8 CBZ X20, 0x33F52F4
	0x033F52EC STR X22, [X20 + 0x78]
	0x033F52F0 CBNZ X22, 0x33F534C
	0x033F52F4 BL 0x1C16F20
	0x033F52F8 ADRP X19, 0xCFF000
	0x033F52FC LDR X19, [X19 + 0x7B8]
	0x033F5300 LDR X0, [X19]
	0x033F5304 LDR W8, [X0 + 0xE0]
	0x033F5308 CBNZ W8, 0x33F5310
	0x033F530C BL 0x1C16DFC
	0x033F5310 ADRP X20, 0xFE3000
	0x033F5314 LDRB W8, [X20 + 0xF1D]
	0x033F5318 CBNZ W8, 0x33F5330
	0x033F531C ADRP X0, 0xCFF000
	0x033F5320 LDR X0, [X0 + 0x7B8]
	0x033F5324 BL 0x1C16CF4
	0x033F5328 MOVZ W8, 0x1
	0x033F532C STRB W8, [X20 + 0xF1D]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, 2
	005 NotImplemented "Instruction MOVK not yet implemented."
	006 NotImplemented "Instruction BICS not yet implemented."
	007 Move W8, 0xFF80
	008 NotImplemented "Instruction MOVK not yet implemented."
	009 And W31, W0, W8
	010 NotImplemented "Instruction ORN not yet implemented."
	011 And W31, W8, 0x70000
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move W8, 95
	015 And W31, W0, 32
	016 Move W9, 0x1200
	017 Move W10, 512
	018 And W8, W0, W8
	019 NotImplemented "Instruction CSEL not yet implemented."
	020 Move [X1], W8
	021 Move [X2], W9
	022 Move X30, [X31+32]
	023 Return 
	024 Move X0, 0xD07000
	025 Move X0, [X0+1888]
	026 Call 0x1C17D08
	027 Call 0x1C17F10
	028 Move X19, X0
	029 Move X0, 0xD39000
	030 Move X0, [X0+2120]
	031 Call 0x1C17D08
	032 Move X20, X0
	033 Move X0, 0xD39000
	034 Move X0, [X0+2128]
	035 Move X0, 0xD07000
	036 Move X0, [X0+1888]
	037 Call 0x1C17D08
	038 Call 0x1C17F10
	039 Move X19, X0
	040 Move X0, 0xD39000
	041 Move X0, [X0+2120]
	042 Call 0x1C17D08
	043 Move X1, X0
	044 Move X0, X19
	045 Move X2, X31
	046 Call ArgumentOutOfRangeException..ctor, X0, X1
	047 Move X0, 0xD07000
	048 Move X0, [X0+1888]
	049 Call 0x1C17D08
	050 Call 0x1C17F10
	051 Move X19, X0
	052 Move X0, 0xD39000
	053 Move X0, [X0+2120]
	054 Call 0x1C17D08
	055 Move X20, X0
	056 Move X0, 0xD39000
	057 Move X0, [X0+2136]
	058 Call 0x1C17D08
	059 Move X2, X0
	060 Move X0, X19
	061 Move X1, X20
	062 Move X3, X31
	063 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	064 Move X0, 0xD39000
	065 Move X0, [X0+2144]
	066 Call 0x1C17D08
	067 Move X1, X0
	068 Move X0, X19
	069 Call 0x1C17DEC

Method: System.Void ContinueWithCore(System.Threading.Tasks.Task continuationTask, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions options)

Disassembly:
	0x033F53E4 ADRP X0, 0xCFF000
	0x033F53E8 LDR X0, [X0 + 0x7B8]
	0x033F53EC BL 0x1C16CF4
	0x033F53F0 MOVZ W8, 0x1
	0x033F53F4 STRB W8, [X20 + 0x47B]
	0x033F53F8 LDR X0, [X21]
	0x033F53FC LDR W8, [X0 + 0xE0]
	0x033F5400 CBNZ W8, 0x33F5408
	0x033F5404 BL 0x1C16DFC
	0x033F5408 MOV W0, W19
	0x033F540C LDP X20, X19, [X31 + 0x10]
	0x033F5410 MOV X1, X31
	0x033F5414 LDP X30, X21, [X31], #0x20
	0x033F5418 B 0x33F503C
	0x033F541C STP X30, X23, [X31 - 0x30]!
	0x033F5420 STP X22, X21, [X31 + 0x10]
	0x033F5424 STP X20, X19, [X31 + 0x20]
	0x033F5428 ADRP X22, 0xFE8000
	0x033F542C ADRP X23, 0xD38000
	0x033F5430 ADRP X21, 0xD26000
	0x033F5434 LDRB W8, [X22 + 0x488]
	0x033F5438 LDR X23, [X23 + 0x648]
	0x033F543C LDR X21, [X21 + 0x728]
	0x033F5440 MOV X20, X1
	0x033F5444 MOV X19, X0
	0x033F5448 TBNZ X8, 0x0, 0x33F5478
	0x033F544C ADRP X0, 0xD26000
	0x033F5450 LDR X0, [X0 + 0x728]
	0x033F5454 BL 0x1C16CF4
	0x033F5458 ADRP X0, 0xD38000
	0x033F545C LDR X0, [X0 + 0x648]
	0x033F5460 BL 0x1C16CF4
	0x033F5464 ADRP X0, 0xD38000
	0x033F5468 LDR X0, [X0 + 0x8F8]
	0x033F546C BL 0x1C16CF4
	0x033F5470 MOVZ W8, 0x1
	0x033F5474 STRB W8, [X22 + 0x488]
	0x033F5478 LDR X1, [X23]
	0x033F547C MOV X0, X19
	0x033F5480 BL 0x26A3D50
	0x033F5484 STR X20, [X19 + 0x58]
	0x033F5488 LDR X0, [X21]
	0x033F548C LDR W8, [X0 + 0xE0]
	0x033F5490 CBNZ W8, 0x33F54A8
	0x033F5494 BL 0x1C16DFC
	0x033F5498 LDR X0, [X21]
	0x033F549C LDR W8, [X0 + 0xE0]
	0x033F54A0 CBNZ W8, 0x33F54A8
	0x033F54A4 BL 0x1C16DFC
	0x033F54A8 ADRP X20, 0xFE4000
	0x033F54AC LDRB W8, [X20 + 0x828]
	0x033F54B0 CBNZ W8, 0x33F54D4
	0x033F54B4 ADRP X0, 0xD26000
	0x033F54B8 LDR X0, [X0 + 0x728]
	0x033F54BC BL 0x1C16CF4
	0x033F54C0 ADRP X0, 0xCFF000
	0x033F54C4 LDR X0, [X0 + 0x7B8]
	0x033F54C8 BL 0x1C16CF4
	0x033F54CC MOVZ W8, 0x1
	0x033F54D0 STRB W8, [X20 + 0x828]
	0x033F54D4 ADRP X20, 0xCFF000
	0x033F54D8 LDR X20, [X20 + 0x7B8]
	0x033F54DC LDR X0, [X20]
	0x033F54E0 LDR W8, [X0 + 0xE0]
	0x033F54E4 CBNZ W8, 0x33F54F0
	0x033F54E8 BL 0x1C16DFC
	0x033F54EC LDR X0, [X20]
	0x033F54F0 LDR X8, [X0 + 0xB8]
	0x033F54F4 LDRB W8, [X8 + 0x10]
	0x033F54F8 CBZ W8, 0x33F5520
	0x033F54FC LDR X0, [X21]
	0x033F5500 LDR W8, [X0 + 0xE0]
	0x033F5504 CBNZ W8, 0x33F550C
	0x033F5508 BL 0x1C16DFC
	0x033F550C MOV X0, X19
	0x033F5510 LDP X20, X19, [X31 + 0x20]
	0x033F5514 LDP X22, X21, [X31 + 0x10]
	0x033F5518 LDP X30, X23, [X31], #0x30
	0x033F551C B 0x33EE67C
	0x033F5520 LDP X20, X19, [X31 + 0x20]
	0x033F5524 LDP X22, X21, [X31 + 0x10]
	0x033F5528 LDP X30, X23, [X31], #0x30
	0x033F552C RET
	0x033F5530 STP X30, X25, [X31 - 0x40]!
	0x033F5534 STP X24, X23, [X31 + 0x10]
	0x033F5538 STP X22, X21, [X31 + 0x20]
	0x033F553C STP X20, X19, [X31 + 0x30]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0xFE9000
	011 Move [X31+8], X3
	012 Move X25, 0xD39000
	013 Move X24, 0xD07000
	014 Move W8, [X20+1136]
	015 Move X25, [X25+2016]
	016 Move X24, [X24+2008]
	017 Move W22, W4
	018 Move X23, X2
	019 Move X21, X1
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {33}
	025 Move X0, 0xD07000
	026 Move X0, [X0+2008]
	027 Call 0x1C17CF4
	028 Move X0, 0xD39000
	029 Move X0, [X0+2016]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X20+1136], W8
	033 Move X0, [X25]
	034 Call 0x1C17F10
	035 Move X1, X21
	036 Move W2, W22
	037 Move X3, X23
	038 Move X20, X0
	039 Call StandardTaskContinuation..ctor, X0, X1, X2, X3
	040 Move X0, [X24]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Add X0, X31, 8
	046 Move X1, X31
	047 Call CancellationToken.get_CanBeCanceled, X0
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {76}
	052 Move X0, X19
	053 Call Task.get_IsCompleted, X0
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfEqual {70}
	058 Move X0, [X24]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {63}
	062 Call 0x1C17DFC
	063 Add X0, X31, 8
	064 Move X1, X31
	065 Call CancellationToken.get_IsCancellationRequested, X0
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfNotEqual {78}
	070 Compare X21, 0
	071 JumpIfEqual {118}
	072 Move X1, [X31+8]
	073 Move X0, X21
	074 Move X2, X31
	075 Move X3, X31
	076 Compare X21, 0
	077 JumpIfNotEqual {85}
	078 Compare X21, 0
	079 JumpIfEqual {118}
	080 Move X1, [X31+8]
	081 Move X0, X21
	082 Move X2, X19
	083 Move X3, X20
	084 Call Task.AssignCancellationToken, X0, X1, X2, X3
	085 Move X0, X21
	086 Call Task.get_IsCompleted, X0
	087 Move TEMP, X0
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfEqual {108}
	091 Move X0, X19
	092 Move X1, X20
	093 Move W2, W31
	094 Call Task.AddTaskContinuation, X0, X1, X2
	095 Move TEMP, X0
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 JumpIfEqual {108}
	099 Compare X20, 0
	100 JumpIfEqual {118}
	101 Move X8, [X20]
	102 Move W2, 1
	103 Move X0, X20
	104 Move X1, X19
	105 Move X9, [X8+376]
	106 Move X3, [X8+384]
	107 NotImplemented "Instruction BLR not yet implemented."
	108 Move X20, [X31+64]
	109 Move X19, [X31+72]
	110 Move X22, [X31+48]
	111 Move X21, [X31+56]
	112 Move X24, [X31+32]
	113 Move X23, [X31+40]
	114 Move X30, [X31+16]
	115 Move X25, [X31+24]
	116 Add X31, X31, 80
	117 Return 
	118 Call 0x1C17F20

Method: System.Void AddCompletionAction(System.Threading.Tasks.ITaskCompletionAction action)

Disassembly:
	0x033F57D4 MOV W2, W31
	0x033F57D8 BL 0x1C5C788

ISIL:
	001 Move W2, W31
	002 Call Task.AddCompletionAction, X0, X1, X2
	003 Return 

Method: System.Void AddCompletionAction(System.Threading.Tasks.ITaskCompletionAction action, System.Boolean addBeforeOthers)

Disassembly:
	0x033F4C10 BL 0x1C16DFC
	0x033F4C14 ADRP X21, 0xFE5000
	0x033F4C18 LDRB W8, [X21 + 0x88D]
	0x033F4C1C CBNZ W8, 0x33F4C34
	0x033F4C20 ADRP X0, 0xD07000
	0x033F4C24 LDR X0, [X0 + 0x7E8]
	0x033F4C28 BL 0x1C16CF4
	0x033F4C2C MOVZ W8, 0x1
	0x033F4C30 STRB W8, [X21 + 0x88D]
	0x033F4C34 LDR X0, [X20]
	0x033F4C38 ADRP X21, 0xD00000
	0x033F4C3C LDR W8, [X0 + 0xE0]
	0x033F4C40 LDR X21, [X21 + 0x7B8]
	0x033F4C44 CBNZ W8, 0x33F4C50
	0x033F4C48 BL 0x1C16DFC
	0x033F4C4C LDR X0, [X20]
	0x033F4C50 LDR X8, [X21]
	0x033F4C54 LDR X9, [X0 + 0xB8]
	0x033F4C58 LDR W10, [X8 + 0xE0]
	0x033F4C5C LDR X20, [X9 + 0x8]
	0x033F4C60 CBNZ W10, 0x33F4C6C
	0x033F4C64 MOV X0, X8
	0x033F4C68 BL 0x1C16DFC
	0x033F4C6C MOV X1, X19
	0x033F4C70 MOV X4, X20
	0x033F4C74 LDP X20, X19, [X31 + 0x10]
	0x033F4C78 MOVZ W5, 0x8
	0x033F4C7C MOV X0, X31
	0x033F4C80 MOV X2, X31
	0x033F4C84 MOV X3, X31
	0x033F4C88 MOV W6, W31
	0x033F4C8C LDP X30, X21, [X31], #0x20
	0x033F4C90 B 0x33F001C
	0x033F4C94 STP X30, X21, [X31 - 0x20]!
	0x033F4C98 STP X20, X19, [X31 + 0x10]
	0x033F4C9C ADRP X20, 0xFE9000
	0x033F4CA0 ADRP X21, 0xD00000
	0x033F4CA4 LDRB W8, [X20 + 0x478]
	0x033F4CA8 LDR X21, [X21 + 0x7B8]
	0x033F4CAC MOV X19, X0
	0x033F4CB0 TBNZ X8, 0x0, 0x33F4CC8
	0x033F4CB4 ADRP X0, 0xD00000
	0x033F4CB8 LDR X0, [X0 + 0x7B8]
	0x033F4CBC BL 0x1C16CF4
	0x033F4CC0 MOVZ W8, 0x1
	0x033F4CC4 STRB W8, [X20 + 0x478]
	0x033F4CC8 LDR X0, [X21]
	0x033F4CCC LDR W8, [X0 + 0xE0]
	0x033F4CD0 CBNZ W8, 0x33F4CD8
	0x033F4CD4 BL 0x1C16DFC
	0x033F4CD8 MOV X0, X19
	0x033F4CDC LDP X20, X19, [X31 + 0x10]
	0x033F4CE0 MOV X1, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xFEA000
	007 Move W8, [X22+1137]
	008 Move W21, W2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xD3A000
	016 Move X0, [X0+1992]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1137], W8
	020 And W2, W21, 1
	021 Move X0, X20
	022 Move X1, X19
	023 Call Task.AddTaskContinuation, X0, X1, X2
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {34}
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]
	033 Return 
	034 Compare X19, 0
	035 JumpIfEqual {65}
	036 Move X10, 0xD3A000
	037 Move X8, [X19]
	038 Move X10, [X10+1992]
	039 NotImplemented "Instruction LDRH not yet implemented."
	040 Move X1, [X10]
	041 Compare X9, 0
	042 JumpIfEqual {49}
	043 Move X10, [X8+176]
	044 Add X10, X10, 8
	045 NotImplemented "Instruction LDUR not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Subtract X9, X9, 1
	048 Add X10, X10, 16
	049 Move X0, X19
	050 Move W2, W31
	051 Call 0x1C5D788
	052 NotImplemented "Instruction LDRSW not yet implemented."
	053 Add X8, X8, X9
	054 Add X0, X8, 312
	055 Move X3, [X0]
	056 Move X2, [X0+8]
	057 Move X0, X19
	058 Move X1, X20
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X22, [X31+16]
	062 Move X21, [X31+24]
	063 Move X30, [X31+48]
	064 CallNoReturn X3
	065 Call 0x1C17F20

Method: System.Boolean AddTaskContinuationComplex(System.Object tc, System.Boolean addBeforeOthers)

Disassembly:
	0x033F57DC B 0x33F57EC
	0x033F57E0 LDRSW X9, [X10]
	0x033F57E4 ADD X8, X8, X9, 0x4, LSL
	0x033F57E8 ADD X0, X8, 0x138
	0x033F57EC LDP X8, X1, [X0]
	0x033F57F0 MOV X0, X20
	0x033F57F4 BLR X8
	0x033F57F8 TBZ X0, 0x0, 0x33F5890
	0x033F57FC LDR X8, [X20]
	0x033F5800 LDR X1, [X25]
	0x033F5804 LDRH W9, [X8 + 0x12E]
	0x033F5808 CBZ X9, 0x33F582C
	0x033F580C LDR X10, [X8 + 0xB0]
	0x033F5810 ADD X10, X10, 0x8
	0x033F5814 LDUR X11, [X10 - 0x8]
	0x033F5818 CMP X11, X1
	0x033F581C B.EQ 0x33F583C
	0x033F5820 SUBS X9, X9, 0x1
	0x033F5824 ADD X10, X10, 0x10
	0x033F5828 B.NE 0x33F5814
	0x033F582C MOV X0, X20
	0x033F5830 MOV W2, W31
	0x033F5834 BL 0x1C5C788
	0x033F5838 B 0x33F5848
	0x033F583C LDRSW X9, [X10]
	0x033F5840 ADD X8, X8, X9, 0x4, LSL
	0x033F5844 ADD X0, X8, 0x138
	0x033F5848 LDP X8, X1, [X0]
	0x033F584C MOV X0, X20
	0x033F5850 BLR X8
	0x033F5854 MOV X21, X0
	0x033F5858 CBZ X0, 0x33F5B0C
	0x033F585C CBZ X19, 0x33F5B68
	0x033F5860 LDR X8, [X19]
	0x033F5864 LDR X1, [X8 + 0x40]
	0x033F5868 MOV X0, X21
	0x033F586C BL 0x1C16E00
	0x033F5870 CBZ X0, 0x33F5AFC
	0x033F5874 LDR W8, [X19 + 0x18]
	0x033F5878 CMP W22, W8
	0x033F587C B.CS 0x33F5B08
	0x033F5880 ADD X8, X19, W22, 0x3, SXTW
	0x033F5884 ADD W22, W22, 0x1
	0x033F5888 STR X21, [X8 + 0x20]
	0x033F588C B 0x33F57A0
	0x033F5890 MOV X21, X31
	0x033F5894 MOVZ W22, 0x9
	0x033F5898 CBZ X20, 0x33F58FC
	0x033F589C ADRP X10, 0xCFE000
	0x033F58A0 LDR X8, [X20]
	0x033F58A4 LDR X10, [X10 + 0xE00]
	0x033F58A8 LDRH W9, [X8 + 0x12E]
	0x033F58AC LDR X1, [X10]
	0x033F58B0 CBZ X9, 0x33F58D4
	0x033F58B4 LDR X10, [X8 + 0xB0]
	0x033F58B8 ADD X10, X10, 0x8
	0x033F58BC LDUR X11, [X10 - 0x8]
	0x033F58C0 CMP X11, X1
	0x033F58C4 B.EQ 0x33F58E4
	0x033F58C8 SUBS X9, X9, 0x1
	0x033F58CC ADD X10, X10, 0x10
	0x033F58D0 B.NE 0x33F58BC
	0x033F58D4 MOV X0, X20
	0x033F58D8 MOV W2, W31
	0x033F58DC BL 0x1C5C788
	0x033F58E0 B 0x33F58F0
	0x033F58E4 LDRSW X9, [X10]
	0x033F58E8 ADD X8, X8, X9, 0x4, LSL
	0x033F58EC ADD X0, X8, 0x138
	0x033F58F0 LDP X8, X1, [X0]
	0x033F58F4 MOV X0, X20
	0x033F58F8 BLR X8
	0x033F58FC CBNZ X21, 0x33F5BCC
	0x033F5900 CMP W22, 0x9
	0x033F5904 B.EQ 0x33F590C
	0x033F5908 CBNZ W22, 0x33F5AE8
	0x033F590C LDR X0, [X23]
	0x033F5910 LDR W8, [X0 + 0xE0]
	0x033F5914 CBNZ W8, 0x33F5AD0
	0x033F5918 B 0x33F5ACC
	0x033F591C LDRSW X9, [X10]
	0x033F5920 ADD X8, X8, X9, 0x4, LSL
	0x033F5924 ADD X0, X8, 0x138
	0x033F5928 LDP X8, X1, [X0]
	0x033F592C MOV X0, X20
	0x033F5930 BLR X8
	0x033F5934 MOV X20, X0
	0x033F5938 CBZ X0, 0x33F5C24
	0x033F593C ADRP X21, 0xCFE000
	0x033F5940 ADRP X22, 0xD38000
	0x033F5944 ADRP X24, 0xD38000
	0x033F5948 LDR X21, [X21 + 0xE18]
	0x033F594C LDR X22, [X22 + 0x7A0]
	0x033F5950 LDR X24, [X24 + 0x7B8]
	0x033F5954 LDR X8, [X20]
	0x033F5958 LDR X1, [X21]
	0x033F595C LDRH W9, [X8 + 0x12E]
	0x033F5960 CBZ X9, 0x33F5984
	0x033F5964 LDR X10, [X8 + 0xB0]
	0x033F5968 ADD X10, X10, 0x8
	0x033F596C LDUR X11, [X10 - 0x8]
	0x033F5970 CMP X11, X1
	0x033F5974 B.EQ 0x33F5994
	0x033F5978 SUBS X9, X9, 0x1
	0x033F597C ADD X10, X10, 0x10
	0x033F5980 B.NE 0x33F596C
	0x033F5984 MOV X0, X20
	0x033F5988 MOV W2, W31
	0x033F598C BL 0x1C5C788
	0x033F5990 B 0x33F59A0
	0x033F5994 LDRSW X9, [X10]
	0x033F5998 ADD X8, X8, X9, 0x4, LSL
	0x033F599C ADD X0, X8, 0x138
	0x033F59A0 LDP X8, X1, [X0]
	0x033F59A4 MOV X0, X20
	0x033F59A8 BLR X8
	0x033F59AC TBZ X0, 0x0, 0x33F5A24
	0x033F59B0 LDR X8, [X20]
	0x033F59B4 LDR X1, [X22]
	0x033F59B8 LDRH W9, [X8 + 0x12E]
	0x033F59BC CBZ X9, 0x33F59E0
	0x033F59C0 LDR X10, [X8 + 0xB0]
	0x033F59C4 ADD X10, X10, 0x8
	0x033F59C8 LDUR X11, [X10 - 0x8]
	0x033F59CC CMP X11, X1
	0x033F59D0 B.EQ 0x33F59F0
	0x033F59D4 SUBS X9, X9, 0x1
	0x033F59D8 ADD X10, X10, 0x10
	0x033F59DC B.NE 0x33F59C8
	0x033F59E0 MOV X0, X20
	0x033F59E4 MOV W2, W31
	0x033F59E8 BL 0x1C5C788
	0x033F59EC B 0x33F59FC
	0x033F59F0 LDRSW X9, [X10]
	0x033F59F4 ADD X8, X8, X9, 0x4, LSL
	0x033F59F8 ADD X0, X8, 0x138
	0x033F59FC LDP X8, X1, [X0]
	0x033F5A00 MOV X0, X20
	0x033F5A04 BLR X8
	0x033F5A08 MOV X1, X0
	0x033F5A0C CBZ X1, 0x33F5B6C
	0x033F5A10 CBZ X19, 0x33F5BC8
	0x033F5A14 LDR X2, [X24]
	0x033F5A18 MOV X0, X19
	0x033F5A1C BL 0x319B66C
	0x033F5A20 B 0x33F5954
	0x033F5A24 MOV X21, X31
	0x033F5A28 MOVZ W22, 0x12
	0x033F5A2C CBZ X20, 0x33F5A90
	0x033F5A30 ADRP X10, 0xCFE000
	0x033F5A34 LDR X8, [X20]
	0x033F5A38 LDR X10, [X10 + 0xE00]
	0x033F5A3C LDRH W9, [X8 + 0x12E]
	0x033F5A40 LDR X1, [X10]
	0x033F5A44 CBZ X9, 0x33F5A68
	0x033F5A48 LDR X10, [X8 + 0xB0]
	0x033F5A4C ADD X10, X10, 0x8
	0x033F5A50 LDUR X11, [X10 - 0x8]
	0x033F5A54 CMP X11, X1
	0x033F5A58 B.EQ 0x33F5A78
	0x033F5A5C SUBS X9, X9, 0x1
	0x033F5A60 ADD X10, X10, 0x10
	0x033F5A64 B.NE 0x33F5A50
	0x033F5A68 MOV X0, X20
	0x033F5A6C MOV W2, W31
	0x033F5A70 BL 0x1C5C788
	0x033F5A74 B 0x33F5A84
	0x033F5A78 LDRSW X9, [X10]
	0x033F5A7C ADD X8, X8, X9, 0x4, LSL
	0x033F5A80 ADD X0, X8, 0x138
	0x033F5A84 LDP X8, X1, [X0]
	0x033F5A88 MOV X0, X20
	0x033F5A8C BLR X8
	0x033F5A90 CBNZ X21, 0x33F5BCC
	0x033F5A94 CMP W22, 0x12
	0x033F5A98 B.EQ 0x33F5AA0
	0x033F5A9C CBNZ W22, 0x33F5AE8
	0x033F5AA0 CBZ X19, 0x33F5BD4
	0x033F5AA4 ADRP X8, 0xD38000
	0x033F5AA8 LDR X8, [X8 + 0x908]
	0x033F5AAC MOV X0, X19
	0x033F5AB0 LDR X1, [X8]
	0x033F5AB4 BL 0x319C1DC
	0x033F5AB8 LDR X8, [X23]
	0x033F5ABC MOV X19, X0
	0x033F5AC0 LDR W9, [X8 + 0xE0]
	0x033F5AC4 CBNZ W9, 0x33F5AD0
	0x033F5AC8 MOV X0, X8
	0x033F5ACC BL 0x1C16DFC
	0x033F5AD0 MOV X0, X19
	0x033F5AD4 LDP X20, X19, [X31 + 0x30]
	0x033F5AD8 LDP X22, X21, [X31 + 0x20]
	0x033F5ADC LDP X24, X23, [X31 + 0x10]
	0x033F5AE0 LDP X30, X25, [X31], #0x40

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], X30
	003 Move [X31+40], X25
	004 Move [X31+48], X24
	005 Move [X31+56], X23
	006 Move [X31+64], X22
	007 Move [X31+72], X21
	008 Move [X31+80], X20
	009 Move [X31+88], X19
	010 Move X19, 0xFE9000
	011 Move X24, 0xD00000
	012 Move W8, [X19+1138]
	013 Move X24, [X24+1976]
	014 Move W21, W2
	015 Move X20, X1
	016 Move X22, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {47}
	021 Move X0, 0xD39000
	022 Move X0, [X0+1776]
	023 Call 0x1C17CF4
	024 Move X0, 0xD39000
	025 Move X0, [X0+1784]
	026 Call 0x1C17CF4
	027 Move X0, 0xD39000
	028 Move X0, [X0+2168]
	029 Call 0x1C17CF4
	030 Move X0, 0xD39000
	031 Move X0, [X0+2176]
	032 Call 0x1C17CF4
	033 Move X0, 0xD39000
	034 Move X0, [X0+2184]
	035 Call 0x1C17CF4
	036 Move X0, 0xD39000
	037 Move X0, [X0+2192]
	038 Call 0x1C17CF4
	039 Move X0, 0xD39000
	040 Move X0, [X0+2000]
	041 Call 0x1C17CF4
	042 Move X0, 0xD00000
	043 Move X0, [X0+1976]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X19+1138], W8
	047 Move [X31+4], W31
	048 Add X22, X22, 64
	049 Move X19, [X22]
	050 Call 0x1C17D44
	051 Move X0, [X24]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {57}
	055 Call 0x1C17DFC
	056 Move X0, [X24]
	057 Move X8, [X0+184]
	058 Move X25, 0xD39000
	059 Move X8, [X8+8]
	060 Move X25, [X25+1784]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X0, [X25]
	063 Compare X19, 0
	064 JumpIfEqual {67}
	065 Move X8, [X19]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Call 0x1C17F10
	068 Move X8, 0xD39000
	069 Move X8, [X8+1776]
	070 Move X23, X0
	071 Move X1, [X8]
	072 Call 0x319BF58, X0
	073 Compare X23, 0
	074 JumpIfEqual {177}
	075 Move X8, 0xD39000
	076 Move X8, [X8+2168]
	077 Move X0, X23
	078 Move X1, X19
	079 Move X2, [X8]
	080 Call 0x319C66C, X0, X1
	081 Call 0x1C17D44
	082 Add X1, X31, 24
	083 Add X2, X31, 16
	084 Add X3, X31, 8
	085 Move X0, X22
	086 Move [X31+16], X19
	087 Move [X31+24], X23
	088 Move [X31+8], X31
	089 Call 0x1C2516C
	090 Move X19, [X22]
	091 Call 0x1C17D44
	092 Compare X19, 0
	093 JumpIfEqual {98}
	094 Move X8, [X25]
	095 Move X9, [X19]
	096 NotImplemented "Instruction CMP not yet implemented."
	097 NotImplemented "Instruction CSEL not yet implemented."
	098 Move W20, W31
	099 Move [X31+4], W31
	100 Add X1, X31, 4
	101 Move X0, X23
	102 Move X2, X31
	103 Call Monitor.Enter, X0, X1
	104 Move X22, [X22]
	105 Call 0x1C17D44
	106 Move X0, [X24]
	107 Move W8, [X0+224]
	108 Compare W8, 0
	109 JumpIfNotEqual {112}
	110 Call 0x1C17DFC
	111 Move X0, [X24]
	112 Move X8, [X0+184]
	113 Move X8, [X8+8]
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Compare X23, 0
	116 JumpIfEqual {180}
	117 Move X8, 0xD39000
	118 Move W22, [X23+24]
	119 Move X8, [X8+2192]
	120 Move X1, [X8]
	121 Move X0, X23
	122 Call 0x319C448, X0
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Move X0, [X24]
	125 Move W8, [X0+224]
	126 Compare W8, 0
	127 JumpIfNotEqual {130}
	128 Call 0x1C17DFC
	129 Move X0, [X24]
	130 Move X8, [X0+184]
	131 Move X9, 0xD39000
	132 Move X9, [X9+2184]
	133 Move X1, [X8+72]
	134 Move X2, [X9]
	135 Move X0, X23
	136 Call 0x319CF80, X0, X1
	137 Move TEMP, X21
	138 And TEMP, TEMP, 1
	139 Compare TEMP, 1
	140 JumpIfNotEqual {150}
	141 Move X8, 0xD39000
	142 Move X8, [X8+2176]
	143 Move X3, [X8]
	144 Move X0, X23
	145 Move W1, W31
	146 Move X2, X20
	147 Call 0x319C87C, X0, X1, X2
	148 Move X21, X31
	149 Move W20, W31
	150 Move X8, 0xD39000
	151 Move X8, [X8+2168]
	152 Move X2, [X8]
	153 Move X0, X23
	154 Move X1, X20
	155 Call 0x319C66C, X0, X1
	156 Move X21, X31
	157 Move W20, 1
	158 Move W8, [X31+4]
	159 Compare W8, 0
	160 JumpIfEqual {164}
	161 Move X0, X19
	162 Move X1, X31
	163 Call Monitor.Exit, X0
	164 Compare X21, 0
	165 JumpIfNotEqual {178}
	166 Move W0, W20
	167 Move X20, [X31+80]
	168 Move X19, [X31+88]
	169 Move X22, [X31+64]
	170 Move X21, [X31+72]
	171 Move X24, [X31+48]
	172 Move X23, [X31+56]
	173 Move X30, [X31+32]
	174 Move X25, [X31+40]
	175 Add X31, X31, 96
	176 Return X0
	177 Call 0x1C17F20
	178 Move X0, X21
	179 Call 0x1C17F18
	180 Call 0x1C17F20
	181 Move X20, X0
	182 Move X19, X31
	183 Move X20, X0
	184 NotImplemented "Instruction CMP not yet implemented."
	185 Move X0, X20
	186 Call 0x3EB2AD0
	187 Move X21, [X0]
	188 Call 0x3EB2AE0
	189 Move X21, X31
	190 Move X20, X0
	191 Move W8, [X31+4]
	192 Compare W8, 0
	193 JumpIfEqual {197}
	194 Move X0, X19
	195 Move X1, X31
	196 Call Monitor.Exit, X0
	197 Compare X21, 0
	198 JumpIfNotEqual {201}
	199 Move X0, X20
	200 Call 0x1D2D690
	201 Move X0, X21
	202 Call 0x1C17F18
	203 Call 0x1991590

Method: System.Boolean AddTaskContinuation(System.Object tc, System.Boolean addBeforeOthers)

Disassembly:
	0x033F3DA4 LDP X20, X19, [X31 + 0x20]
	0x033F3DA8 LDP X22, X21, [X31 + 0x10]
	0x033F3DAC LDR X30, [X31], #0x30
	0x033F3DB0 RET
	0x033F3DB4 BL 0x1C16F20
	0x033F3DB8 STR X30, [X31 - 0x30]!
	0x033F3DBC STP X22, X21, [X31 + 0x10]
	0x033F3DC0 STP X20, X19, [X31 + 0x20]
	0x033F3DC4 MOV X20, X0
	0x033F3DC8 TBZ X1, 0x0, 0x33F3E18
	0x033F3DCC MOV X19, X2
	0x033F3DD0 BL 0x33F865C
	0x033F3DD4 TBZ X0, 0x0, 0x33F3E18
	0x033F3DD8 LDR X21, [X19]
	0x033F3DDC CBZ X21, 0x33F3DE4
	0x033F3DE0 STR X31, [X19]
	0x033F3DE4 CBZ X20, 0x33F3E2C
	0x033F3DE8 LDR X0, [X20 + 0x40]
	0x033F3DEC LDR X1, [X20 + 0x28]
	0x033F3DF0 LDR X8, [X20 + 0x18]
	0x033F3DF4 BLR X8
	0x033F3DF8 MOV X0, X31
	0x033F3DFC CBZ X21, 0x33F3E04
	0x033F3E00 STR X21, [X19]
	0x033F3E04 CBNZ X0, 0x33F3E30
	0x033F3E08 LDP X20, X19, [X31 + 0x20]
	0x033F3E0C LDP X22, X21, [X31 + 0x10]
	0x033F3E10 LDR X30, [X31], #0x30
	0x033F3E14 RET
	0x033F3E18 MOV X0, X20
	0x033F3E1C LDP X20, X19, [X31 + 0x20]
	0x033F3E20 LDP X22, X21, [X31 + 0x10]
	0x033F3E24 LDR X30, [X31], #0x30
	0x033F3E28 B 0x33F2E38
	0x033F3E2C BL 0x1C16F20
	0x033F3E30 BL 0x1C16F18
	0x033F3E34 CMP W1, 0x1

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move W20, W2
	009 Move X19, X1
	010 Move X21, X0
	011 Call Task.get_IsCompleted, X0
	012 Move TEMP, X0
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfNotEqual {17}
	016 Move W0, W31
	017 Move X22, X21
	018 Add X22, X22, 64
	019 Move X23, [X22]
	020 Call 0x1C17D44
	021 Compare X23, 0
	022 JumpIfNotEqual {35}
	023 Call 0x1C17D44
	024 Add X1, X31, 24
	025 Add X2, X31, 16
	026 Add X3, X31, 8
	027 Move X0, X22
	028 Move [X31+16], X31
	029 Move [X31+24], X19
	030 Move [X31+8], X31
	031 Call 0x1C2516C
	032 Move X8, [X31+8]
	033 Compare X8, 0
	034 JumpIfEqual {48}
	035 And W2, W20, 1
	036 Move X0, X21
	037 Move X1, X19
	038 Call Task.AddTaskContinuationComplex, X0, X1, X2
	039 Move X20, [X31+64]
	040 Move X19, [X31+72]
	041 Move X22, [X31+48]
	042 Move X21, [X31+56]
	043 Move X30, [X31+32]
	044 Move X23, [X31+40]
	045 And W0, W0, 1
	046 Add X31, X31, 80
	047 Return X0
	048 Move W0, 1

Method: System.Void RemoveContinuation(System.Object continuationObject)

Disassembly:
	0x033F06FC STP X20, X19, [X31 + 0x10]
	0x033F0700 ADRP X20, 0xFED000
	0x033F0704 LDRB W8, [X20 + 0x44E]
	0x033F0708 MOV X19, X0
	0x033F070C TBNZ X8, 0x0, 0x33F0724
	0x033F0710 ADRP X0, 0xD0B000
	0x033F0714 LDR X0, [X0 + 0x7D8]
	0x033F0718 BL 0x1C16CF4
	0x033F071C MOVZ W8, 0x1
	0x033F0720 STRB W8, [X20 + 0x44E]
	0x033F0724 LDR X19, [X19 + 0x48]
	0x033F0728 BL 0x1C16D44
	0x033F072C CBZ X19, 0x33F0748
	0x033F0730 LDR W20, [X19 + 0x38]
	0x033F0734 BL 0x1C16D44
	0x033F0738 CMP W20, 0x1
	0x033F073C B.NE 0x33F0758
	0x033F0740 MOVZ W0, 0x1
	0x033F0744 B 0x33F074C
	0x033F0748 MOV W0, W31
	0x033F074C LDP X20, X19, [X31 + 0x10]
	0x033F0750 LDR X30, [X31], #0x20
	0x033F0754 RET
	0x033F0758 ADRP X8, 0xD0B000
	0x033F075C LDR X8, [X8 + 0x7D8]
	0x033F0760 ADD X19, X19, 0x28
	0x033F0764 LDR X0, [X8]
	0x033F0768 LDR W8, [X0 + 0xE0]
	0x033F076C CBNZ W8, 0x33F0774
	0x033F0770 BL 0x1C16DFC
	0x033F0774 MOV X0, X19
	0x033F0778 LDP X20, X19, [X31 + 0x10]
	0x033F077C MOV X1, X31
	0x033F0780 LDR X30, [X31], #0x20
	0x033F0784 B 0x33DD2B0
	0x033F0788 STP X30, X21, [X31 - 0x20]!
	0x033F078C STP X20, X19, [X31 + 0x10]
	0x033F0790 ADRP X21, 0xFED000
	0x033F0794 LDRB W8, [X21 + 0x44F]
	0x033F0798 MOV W20, W1
	0x033F079C MOV X19, X0
	0x033F07A0 TBZ X8, 0x0, 0x33F07F0
	0x033F07A4 TBZ X20, 0x0, 0x33F0820
	0x033F07A8 ADRP X21, 0xD04000
	0x033F07AC ADRP X20, 0xD3D000
	0x033F07B0 LDR X21, [X21 + 0x7B8]
	0x033F07B4 LDR X20, [X20 + 0x738]
	0x033F07B8 ADD X19, X19, 0x48
	0x033F07BC BL 0x1C16D44
	0x033F07C0 LDR X0, [X21]
	0x033F07C4 LDR W8, [X0 + 0xE0]
	0x033F07C8 CBNZ W8, 0x33F07D4
	0x033F07CC BL 0x1C16DFC
	0x033F07D0 LDR X0, [X21]
	0x033F07D4 LDR X8, [X0 + 0xB8]
	0x033F07D8 LDR X2, [X20]
	0x033F07DC MOV X0, X19
	0x033F07E0 LDP X20, X19, [X31 + 0x10]
	0x033F07E4 LDR X1, [X8 + 0x20]
	0x033F07E8 LDP X30, X21, [X31], #0x20
	0x033F07EC B 0x2212A40
	0x033F07F0 ADRP X0, 0xD3D000
	0x033F07F4 LDR X0, [X0 + 0x690]
	0x033F07F8 BL 0x1C16CF4
	0x033F07FC ADRP X0, 0xD3D000
	0x033F0800 LDR X0, [X0 + 0x738]
	0x033F0804 BL 0x1C16CF4
	0x033F0808 ADRP X0, 0xD04000
	0x033F080C LDR X0, [X0 + 0x7B8]
	0x033F0810 BL 0x1C16CF4
	0x033F0814 MOVZ W8, 0x1
	0x033F0818 STRB W8, [X21 + 0x44F]
	0x033F081C TBNZ X20, 0x0, 0x33F07A8
	0x033F0820 ADRP X8, 0xD3D000
	0x033F0824 LDR X8, [X8 + 0x690]
	0x033F0828 LDR X0, [X8]
	0x033F082C BL 0x1C16F10
	0x033F0830 MOV X20, X0
	0x033F0834 BL 0x1C16D44
	0x033F0838 MOVZ W8, 0x1
	0x033F083C MOV X0, X20
	0x033F0840 MOV X1, X31
	0x033F0844 STR W8, [X20 + 0x3C]
	0x033F0848 BL 0x33BDD8C
	0x033F084C BL 0x1C16D44
	0x033F0850 STR X20, [X19 + 0x48]
	0x033F0854 MOV X0, X20
	0x033F0858 LDP X20, X19, [X31 + 0x10]
	0x033F085C LDP X30, X21, [X31], #0x20
	0x033F0860 RET
	0x033F0864 STP X30, X19, [X31 - 0x10]!
	0x033F0868 LDR W19, [X0 + 0x38]
	0x033F086C BL 0x1C16D44
	0x033F0870 UBFM W0, W19, 0x14, 0x14
	0x033F0874 LDP X30, X19, [X31], #0x10
	0x033F0878 RET
	0x033F087C MOVZ W8, 0x1600000
	0x033F0880 ANDS W31, W0, W8, 0x0
	0x033F0884 CSET W0, NE
	0x033F0888 RET
	0x033F088C STR X30, [X31 - 0x20]!
	0x033F0890 STP X20, X19, [X31 + 0x10]
	0x033F0894 LDR W20, [X0 + 0x38]
	0x033F0898 MOV X19, X0
	0x033F089C BL 0x1C16D44
	0x033F08A0 TBNZ X20, 0x12, 0x33F08C0
	0x033F08A4 MOV X0, X19
	0x033F08A8 BL 0x33F0910
	0x033F08AC CBZ X0, 0x33F090C
	0x033F08B0 LDP X20, X19, [X31 + 0x10]
	0x033F08B4 MOV X1, X31
	0x033F08B8 LDR X30, [X31], #0x20
	0x033F08BC B 0x33DDE94
	0x033F08C0 ADRP X0, 0xD2C000
	0x033F08C4 LDR X0, [X0 + 0x4B8]
	0x033F08C8 BL 0x1C16D08
	0x033F08CC BL 0x1C16F10
	0x033F08D0 MOV X19, X0
	0x033F08D4 ADRP X0, 0xD3D000
	0x033F08D8 LDR X0, [X0 + 0x740]
	0x033F08DC BL 0x1C16D08
	0x033F08E0 MOV X2, X0
	0x033F08E4 MOV X0, X19
	0x033F08E8 MOV X1, X31
	0x033F08EC MOV X3, X31
	0x033F08F0 BL 0x338C410
	0x033F08F4 ADRP X0, 0xD3D000
	0x033F08F8 LDR X0, [X0 + 0x748]
	0x033F08FC BL 0x1C16D08
	0x033F0900 MOV X1, X0
	0x033F0904 MOV X0, X19
	0x033F0908 BL 0x1C16DEC
	0x033F090C BL 0x1C16F20
	0x033F0910 STR X30, [X31 - 0x30]!
	0x033F0914 STP X22, X21, [X31 + 0x10]
	0x033F0918 STP X20, X19, [X31 + 0x20]
	0x033F091C ADRP X19, 0xFED000
	0x033F0920 LDRB W8, [X19 + 0x453]
	0x033F0924 MOV X20, X0
	0x033F0928 TBNZ X8, 0x0, 0x33F0940
	0x033F092C ADRP X0, 0xD3C000
	0x033F0930 LDR X0, [X0 + 0xF98]
	0x033F0934 BL 0x1C16CF4
	0x033F0938 MOVZ W8, 0x1
	0x033F093C STRB W8, [X19 + 0x453]
	0x033F0940 LDR X19, [X20 + 0x48]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X19, 0xFEE000
	009 Move X22, 0xD05000
	010 Move W8, [X19+1139]
	011 Move X22, [X22+1976]
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {35}
	018 Move X0, 0xD3E000
	019 Move X0, [X0+1776]
	020 Call 0x1C17CF4
	021 Move X0, 0xD3E000
	022 Move X0, [X0+1784]
	023 Call 0x1C17CF4
	024 Move X0, 0xD3E000
	025 Move X0, [X0+1792]
	026 Call 0x1C17CF4
	027 Move X0, 0xD3E000
	028 Move X0, [X0+1800]
	029 Call 0x1C17CF4
	030 Move X0, 0xD05000
	031 Move X0, [X0+1976]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X19+1139], W8
	035 Move [X31+4], W31
	036 Add X21, X21, 64
	037 Move X19, [X21]
	038 Call 0x1C17D44
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {45}
	043 Call 0x1C17DFC
	044 Move X0, [X22]
	045 Move X8, [X0+184]
	046 Move X8, [X8+8]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Compare X19, 0
	049 JumpIfEqual {55}
	050 Move X8, 0xD3E000
	051 Move X8, [X8+1784]
	052 Move X9, [X19]
	053 Move X8, [X8]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Call 0x1C17D44
	056 Move X23, 0xD3E000
	057 Move X23, [X23+1784]
	058 Move X0, [X23]
	059 Call 0x1C17F10
	060 Move X8, 0xD3E000
	061 Move X8, [X8+1776]
	062 Move X19, X0
	063 Move X1, [X8]
	064 Call 0x319BF58, X0
	065 Add X1, X31, 24
	066 Add X2, X31, 16
	067 Add X3, X31, 8
	068 Move X0, X21
	069 Move [X31+16], X20
	070 Move [X31+24], X19
	071 Move [X31+8], X31
	072 Call 0x1C2516C
	073 Move X8, [X31+8]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X19, [X21]
	076 Call 0x1C17D44
	077 Compare X19, 0
	078 JumpIfEqual {122}
	079 Move X8, [X23]
	080 Move X9, [X19]
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move [X31+4], W31
	083 Add X1, X31, 4
	084 Move X0, X19
	085 Move X2, X31
	086 Call Monitor.Enter, X0, X1
	087 Move X21, [X21]
	088 Call 0x1C17D44
	089 Move X0, [X22]
	090 Move W8, [X0+224]
	091 Compare W8, 0
	092 JumpIfNotEqual {95}
	093 Call 0x1C17DFC
	094 Move X0, [X22]
	095 Move X8, [X0+184]
	096 Move X8, [X8+8]
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move X8, 0xD3E000
	099 Move X8, [X8+1792]
	100 Move X2, [X8]
	101 Move X0, X19
	102 Move X1, X20
	103 Call 0x319C85C, X0, X1
	104 Move W1, W0
	105 Add W31, W1, 1
	106 Move X8, 0xD3E000
	107 Move X8, [X8+1800]
	108 Move X3, [X8]
	109 Move X0, X19
	110 Move X2, X31
	111 Call 0x319C5F0, X0, X1, X2
	112 Move X20, X31
	113 Move X20, X31
	114 Move W8, [X31+4]
	115 Compare W8, 0
	116 JumpIfEqual {120}
	117 Move X0, X19
	118 Move X1, X31
	119 Call Monitor.Exit, X0
	120 Compare X20, 0
	121 JumpIfNotEqual {130}
	122 Move X20, [X31+64]
	123 Move X19, [X31+72]
	124 Move X22, [X31+48]
	125 Move X21, [X31+56]
	126 Move X30, [X31+32]
	127 Move X23, [X31+40]
	128 Add X31, X31, 80
	129 Return 
	130 Move X0, X20
	131 Call 0x1C17F18
	132 Move X21, X0
	133 NotImplemented "Instruction CMP not yet implemented."
	134 Move X0, X21
	135 Call 0x3EB2AD0
	136 Move X20, [X0]
	137 Call 0x3EB2AE0
	138 Move X20, X31
	139 Move X21, X0
	140 Move W8, [X31+4]
	141 Compare W8, 0
	142 JumpIfEqual {146}
	143 Move X0, X19
	144 Move X1, X31
	145 Call Monitor.Exit, X0
	146 Compare X20, 0
	147 JumpIfNotEqual {150}
	148 Move X0, X21
	149 Call 0x1D2D690
	150 Move X0, X20
	151 Call 0x1C17F18
	152 Call 0x1991590

Method: System.Threading.Tasks.Task`1<TResult> FromResult(TResult result)

Disassembly:
	0x0229B0C0 MOV X2, X21
	0x0229B0C4 MOV X3, X20
	0x0229B0C8 MOV X4, X19
	0x0229B0CC LDP X20, X19, [X31 + 0x30]
	0x0229B0D0 LDP X22, X21, [X31 + 0x20]
	0x0229B0D4 LDP X24, X23, [X31 + 0x10]
	0x0229B0D8 LDR X30, [X31], #0x40
	0x0229B0DC B 0x229B1E0
	0x0229B0E0 STP X29, X30, [X31 - 0x50]!
	0x0229B0E4 STP X26, X25, [X31 + 0x10]
	0x0229B0E8 STP X24, X23, [X31 + 0x20]
	0x0229B0EC STP X22, X21, [X31 + 0x30]
	0x0229B0F0 STP X20, X19, [X31 + 0x40]
	0x0229B0F4 ADD X29, X31, 0x0
	0x0229B0F8 SUB X31, X31, 0x50
	0x0229B0FC MRS X25, 0xC000
	0x0229B100 LDR X8, [X25 + 0x28]
	0x0229B104 MOV X20, X4
	0x0229B108 MOV X23, X3
	0x0229B10C MOV X21, X2
	0x0229B110 STUR X8, [X29 - 0x8]
	0x0229B114 STUR X3, [X29 - 0x48]
	0x0229B118 LDR X26, [X5 + 0x38]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X1+56]
	006 Move X19, X1
	007 Move X20, X0
	008 Compare X8, 0
	009 JumpIfNotEqual {13}
	010 Move X0, X19
	011 Call 0x1C5D6E0
	012 Move X8, [X19+56]
	013 Move X0, [X8+8]
	014 Move W8, [X0+309]
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {20}
	019 Call 0x1C5D684
	020 Call 0x1C17F10
	021 Move X8, [X19+56]
	022 And X1, X20, 0xFFFF
	023 Move X21, X0
	024 Move X2, [X8+16]
	025 Call Task`1<AffordanceStateData>..ctor, X0, X1
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X0, X21
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.Threading.Tasks.Task FromException(System.Exception exception)

Disassembly:
	0x033EEAC4 BL 0x1C16F10
	0x033EEAC8 LDR X1, [X19]
	0x033EEACC MOV X19, X0
	0x033EEAD0 BL 0x31997BC
	0x033EEAD4 LDR X8, [X20]
	0x033EEAD8 LDR X8, [X8 + 0xB8]
	0x033EEADC STR X19, [X8]
	0x033EEAE0 LDR X0, [X21]
	0x033EEAE4 BL 0x1C16F10
	0x033EEAE8 MOV X1, X31
	0x033EEAEC MOV X19, X0
	0x033EEAF0 BL 0x33BDD8C
	0x033EEAF4 LDR X8, [X20]
	0x033EEAF8 LDP X22, X21, [X31 + 0x10]
	0x033EEAFC LDR X8, [X8 + 0xB8]
	0x033EEB00 STR X19, [X8 + 0x8]
	0x033EEB04 LDP X20, X19, [X31 + 0x20]
	0x033EEB08 LDP X30, X23, [X31], #0x30
	0x033EEB0C RET
	0x033EEB10 STP X30, X23, [X31 - 0x30]!
	0x033EEB14 STP X22, X21, [X31 + 0x10]
	0x033EEB18 STP X20, X19, [X31 + 0x20]
	0x033EEB1C ADRP X23, 0xFEF000
	0x033EEB20 LDRB W8, [X23 + 0x440]
	0x033EEB24 MOV X19, X3
	0x033EEB28 MOV W21, W2
	0x033EEB2C MOV W22, W1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xFF0000
	006 Move X20, 0xD07000
	007 Move W8, [X21+1140]
	008 Move X20, [X20+1976]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xD40000
	015 Move X0, [X0+1616]
	016 Call 0x1C17CF4
	017 Move X0, 0xD07000
	018 Move X0, [X0+1976]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1140], W8
	022 Move X0, [X20]
	023 Move X20, 0xD40000
	024 Move W8, [X0+224]
	025 Move X20, [X20+1616]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X1, [X20]
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call Task.FromException, X0
	036 Return X0

Method: System.Threading.Tasks.Task`1<TResult> FromException(System.Exception exception)

Disassembly:
	0x0229AD4C MOV X0, X19
	0x0229AD50 BL 0x1C5C6E0
	0x0229AD54 CBZ X20, 0x229AEE4
	0x0229AD58 ADRP X8, 0x1E61000
	0x0229AD5C LDR X8, [X8 + 0x7D8]
	0x0229AD60 LDR X0, [X8]
	0x0229AD64 LDR W8, [X0 + 0xE0]
	0x0229AD68 CBNZ W8, 0x229AD70
	0x0229AD6C BL 0x1C16DFC
	0x0229AD70 ADD X0, X31, 0x8
	0x0229AD74 MOV X1, X31
	0x0229AD78 BL 0x33DD2B0
	0x0229AD7C TBZ X0, 0x0, 0x229ADB8
	0x0229AD80 ADRP X8, 0x1E5A000
	0x0229AD84 LDR X8, [X8 + 0x7B8]
	0x0229AD88 LDR X20, [X31 + 0x8]
	0x0229AD8C LDR X0, [X8]
	0x0229AD90 LDR W8, [X0 + 0xE0]
	0x0229AD94 CBNZ W8, 0x229AD9C
	0x0229AD98 BL 0x1C16DFC
	0x0229AD9C LDR X8, [X19 + 0x38]
	0x0229ADA0 MOV X0, X20
	0x0229ADA4 LDR X1, [X8 + 0x8]
	0x0229ADA8 LDR X8, [X1]
	0x0229ADAC BLR X8
	0x0229ADB0 MOV X19, X0
	0x0229ADB4 B 0x229AECC
	0x0229ADB8 ADRP X21, 0x1E5A000
	0x0229ADBC LDR X21, [X21 + 0x7B8]
	0x0229ADC0 LDR X0, [X21]
	0x0229ADC4 LDR W8, [X0 + 0xE0]
	0x0229ADC8 CBNZ W8, 0x229ADD0
	0x0229ADCC BL 0x1C16DFC
	0x0229ADD0 ADRP X22, 0x213E000
	0x0229ADD4 LDRB W8, [X22 + 0xF1B]
	0x0229ADD8 CBNZ W8, 0x229ADF0
	0x0229ADDC ADRP X0, 0x1E5A000
	0x0229ADE0 LDR X0, [X0 + 0x7B8]
	0x0229ADE4 BL 0x1C16CF4
	0x0229ADE8 MOVZ W8, 0x1
	0x0229ADEC STRB W8, [X22 + 0xF1B]
	0x0229ADF0 LDR X0, [X21]
	0x0229ADF4 LDR W8, [X0 + 0xE0]
	0x0229ADF8 CBNZ W8, 0x229AE04

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+56]
	005 Move X19, X1
	006 Move X20, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {11}
	009 Move X0, X19
	010 Call 0x1C5D6E0
	011 Compare X20, 0
	012 JumpIfEqual {37}
	013 Move X8, [X19+56]
	014 Move X0, [X8]
	015 Move W8, [X0+309]
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {21}
	020 Call 0x1C5D684
	021 Call 0x1C17F10
	022 Move X8, [X19+56]
	023 Move X19, X0
	024 Move X1, [X8+8]
	025 Call Task`1<Int16>..ctor, X0
	026 Compare X19, 0
	027 JumpIfEqual {52}
	028 Move X0, X19
	029 Move X1, X20
	030 Move X2, X31
	031 Call Task.TrySetException, X0, X1
	032 Move X0, X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0
	037 Move X0, 0x1E5F000
	038 Move X0, [X0+1320]
	039 Call 0x1C17D08
	040 Call 0x1C17F10
	041 Move X20, X0
	042 Move X0, 0x1E83000
	043 Move X0, [X0+1912]
	044 Call 0x1C17D08
	045 Move X1, X0
	046 Move X0, X20
	047 Move X2, X31
	048 Call ArgumentNullException..ctor, X0, X1
	049 Move X0, X20
	050 Move X1, X19
	051 Call 0x1C17DEC
	052 Call 0x1C17F20

Method: System.Threading.Tasks.Task FromCancellation(System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x033F5AE4 B 0x33F5F54
	0x033F5AE8 LDP X20, X19, [X31 + 0x30]
	0x033F5AEC LDP X22, X21, [X31 + 0x20]
	0x033F5AF0 LDP X24, X23, [X31 + 0x10]
	0x033F5AF4 LDP X30, X25, [X31], #0x40
	0x033F5AF8 RET
	0x033F5AFC BL 0x1C16F44
	0x033F5B00 MOV X1, X31
	0x033F5B04 BL 0x1C16DEC
	0x033F5B08 BL 0x1C16F28
	0x033F5B0C ADRP X0, 0xD06000
	0x033F5B10 LDR X0, [X0 + 0x578]
	0x033F5B14 BL 0x1C16D08
	0x033F5B18 BL 0x1C16F10
	0x033F5B1C MOV X21, X0
	0x033F5B20 ADRP X0, 0xD38000
	0x033F5B24 LDR X0, [X0 + 0x910]
	0x033F5B28 BL 0x1C16D08
	0x033F5B2C MOV X22, X0
	0x033F5B30 ADRP X0, 0xD28000
	0x033F5B34 LDR X0, [X0 + 0x618]
	0x033F5B38 BL 0x1C16D08
	0x033F5B3C MOV X2, X0
	0x033F5B40 MOV X0, X21
	0x033F5B44 MOV X1, X22
	0x033F5B48 MOV X3, X31
	0x033F5B4C BL 0x330E16C
	0x033F5B50 ADRP X0, 0xD38000
	0x033F5B54 LDR X0, [X0 + 0x918]
	0x033F5B58 BL 0x1C16D08
	0x033F5B5C MOV X1, X0
	0x033F5B60 MOV X0, X21
	0x033F5B64 BL 0x1C16DEC
	0x033F5B68 BL 0x1C16F20
	0x033F5B6C ADRP X0, 0xD06000
	0x033F5B70 LDR X0, [X0 + 0x578]
	0x033F5B74 BL 0x1C16D08
	0x033F5B78 BL 0x1C16F10
	0x033F5B7C MOV X21, X0
	0x033F5B80 ADRP X0, 0xD38000
	0x033F5B84 LDR X0, [X0 + 0x910]
	0x033F5B88 BL 0x1C16D08
	0x033F5B8C MOV X22, X0
	0x033F5B90 ADRP X0, 0xD28000
	0x033F5B94 LDR X0, [X0 + 0x618]
	0x033F5B98 BL 0x1C16D08
	0x033F5B9C MOV X2, X0
	0x033F5BA0 MOV X0, X21
	0x033F5BA4 MOV X1, X22
	0x033F5BA8 MOV X3, X31
	0x033F5BAC BL 0x330E16C
	0x033F5BB0 ADRP X0, 0xD38000
	0x033F5BB4 LDR X0, [X0 + 0x918]
	0x033F5BB8 BL 0x1C16D08
	0x033F5BBC MOV X1, X0
	0x033F5BC0 MOV X0, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xFE9000
	005 Move [X31+8], X0
	006 Move X20, 0xD07000
	007 Move W8, [X19+1141]
	008 Move X20, [X20+2008]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xD07000
	014 Move X0, [X0+2008]
	015 Call 0x1C17CF4
	016 Move X0, 0xD00000
	017 Move X0, [X0+1976]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X19+1141], W8
	021 Move X0, [X20]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Add X0, X31, 8
	027 Move X1, X31
	028 Call CancellationToken.get_IsCancellationRequested, X0
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {48}
	033 Move X8, 0xD00000
	034 Move X8, [X8+1976]
	035 Move X19, [X31+8]
	036 Move X0, [X8]
	037 Call 0x1C17F10
	038 Move W1, 1
	039 Move W2, W31
	040 Move X3, X19
	041 Move X20, X0
	042 Call Task..ctor, X0, X1, X2, X3
	043 Move X0, X20
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X30, [X31+32]
	047 Return X0
	048 Move X0, 0xD07000
	049 Move X0, [X0+1888]
	050 Call 0x1C17D08
	051 Call 0x1C17F10
	052 Move X19, X0
	053 Move X0, 0xD28000
	054 Move X0, [X0+1904]
	055 Call 0x1C17D08
	056 Move X1, X0
	057 Move X0, X19
	058 Move X2, X31
	059 Call ArgumentOutOfRangeException..ctor, X0, X1
	060 Move X0, 0xD39000
	061 Move X0, [X0+2200]
	062 Call 0x1C17D08
	063 Move X1, X0
	064 Move X0, X19
	065 Call 0x1C17DEC

Method: System.Threading.Tasks.Task FromCanceled(System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x033EF044 ADRP X0, 0xD05000
	0x033EF048 LDR X0, [X0 + 0x7B8]
	0x033EF04C BL 0x1C16CF4
	0x033EF050 ADRP X0, 0xD3E000
	0x033EF054 LDR X0, [X0 + 0x6B8]
	0x033EF058 BL 0x1C16CF4
	0x033EF05C ADRP X0, 0xD3E000
	0x033EF060 LDR X0, [X0 + 0x6C0]
	0x033EF064 BL 0x1C16CF4
	0x033EF068 MOVZ W8, 0x1
	0x033EF06C STRB W8, [X20 + 0x443]
	0x033EF070 LDR X20, [X19 + 0x48]
	0x033EF074 BL 0x1C16D44
	0x033EF078 CBNZ X20, 0x33EF090
	0x033EF07C MOV X0, X19
	0x033EF080 MOV W1, W31
	0x033EF084 BL 0x33F0788
	0x033EF088 MOV X20, X0
	0x033EF08C CBZ X0, 0x33EF290
	0x033EF090 STR X23, [X20 + 0x28]
	0x033EF094 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xFEF000
	006 Move X21, 0xD06000
	007 Move W8, [X20+1142]
	008 Move X21, [X21+1976]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD06000
	015 Move X0, [X0+1976]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1142], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call Task.FromCancellation, X0
	030 Return X0

Method: System.Threading.Tasks.Task`1<TResult> FromCancellation(System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x0229A6C8 MOV X0, X19
	0x0229A6CC BL 0x1C5C6E0
	0x0229A6D0 LDR X8, [X19 + 0x38]
	0x0229A6D4 LDR X0, [X8 + 0x8]
	0x0229A6D8 LDRB W8, [X0 + 0x135]
	0x0229A6DC TBNZ X8, 0x0, 0x229A6E4
	0x0229A6E0 BL 0x1C5C684
	0x0229A6E4 BL 0x1C16F10
	0x0229A6E8 LDR X8, [X19 + 0x38]
	0x0229A6EC MOV V0.16B, V11.16B
	0x0229A6F0 MOV V1.16B, V10.16B
	0x0229A6F4 MOV V2.16B, V9.16B
	0x0229A6F8 LDR X1, [X8 + 0x10]
	0x0229A6FC MOV V3.16B, V8.16B
	0x0229A700 MOV X19, X0
	0x0229A704 BL 0x26A7230
	0x0229A708 MOV X0, X19
	0x0229A70C LDP X30, X19, [X31 + 0x20]
	0x0229A710 LDP D9, D8, [X31 + 0x10]
	0x0229A714 LDP D11, D10, [X31], #0x30
	0x0229A718 RET
	0x0229A71C STR X30, [X31 - 0x30]!
	0x0229A720 STP X22, X21, [X31 + 0x10]
	0x0229A724 STP X20, X19, [X31 + 0x20]
	0x0229A728 LDR X8, [X1 + 0x38]
	0x0229A72C MOV X20, X1
	0x0229A730 MOV X19, X0
	0x0229A734 CBNZ X8, 0x229A754
	0x0229A738 ADRP X0, 0x1E61000
	0x0229A73C LDR X0, [X0 + 0x7E8]
	0x0229A740 BL 0x1C16CF4
	0x0229A744 LDR X8, [X20 + 0x38]
	0x0229A748 CBNZ X8, 0x229A754
	0x0229A74C MOV X0, X20
	0x0229A750 BL 0x1C5C6E0
	0x0229A754 ADRP X21, 0x1E61000
	0x0229A758 LDR X21, [X21 + 0x7E8]
	0x0229A75C LDR X0, [X21]
	0x0229A760 LDR W8, [X0 + 0xE0]
	0x0229A764 CBNZ W8, 0x229A76C
	0x0229A768 BL 0x1C16DFC
	0x0229A76C ADRP X22, 0x213F000
	0x0229A770 LDRB W8, [X22 + 0x88D]
	0x0229A774 CBNZ W8, 0x229A78C
	0x0229A778 ADRP X0, 0x1E61000
	0x0229A77C LDR X0, [X0 + 0x7E8]
	0x0229A780 BL 0x1C16CF4
	0x0229A784 MOVZ W8, 0x1
	0x0229A788 STRB W8, [X22 + 0x88D]
	0x0229A78C LDR X0, [X21]
	0x0229A790 LDR W8, [X0 + 0xE0]
	0x0229A794 CBNZ W8, 0x229A7A0
	0x0229A798 BL 0x1C16DFC
	0x0229A79C LDR X0, [X21]
	0x0229A7A0 LDR X8, [X0 + 0xB8]
	0x0229A7A4 LDR X9, [X20 + 0x38]
	0x0229A7A8 MOV X1, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move [X31+8], X0
	005 Move X8, [X1+56]
	006 Move X19, X1
	007 Compare X8, 0
	008 JumpIfNotEqual {17}
	009 Move X0, 0x1E62000
	010 Move X0, [X0+2008]
	011 Call 0x1C17CF4
	012 Move X8, [X19+56]
	013 Compare X8, 0
	014 JumpIfNotEqual {17}
	015 Move X0, X19
	016 Call 0x1C5D6E0
	017 Move X8, 0x1E62000
	018 Move X8, [X8+2008]
	019 Move X0, [X8]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Add X0, X31, 8
	025 Move X1, X31
	026 Call CancellationToken.get_IsCancellationRequested, X0
	027 Move TEMP, X0
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfNotEqual {54}
	031 Move X8, [X19+56]
	032 Move X20, [X31+8]
	033 Move X0, [X8+8]
	034 Move W8, [X0+309]
	035 Move TEMP, X8
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {40}
	039 Call 0x1C5D684
	040 Call 0x1C17F10
	041 Move X8, [X19+56]
	042 Move W1, 1
	043 Move W2, W31
	044 Move W3, W31
	045 Move X5, [X8+16]
	046 Move X4, X20
	047 Move X19, X0
	048 Call Task`1<Boolean>..ctor, X0, X1, X2, X3, X4
	049 Move X0, X19
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move X30, [X31+32]
	053 Return X0
	054 Move X0, 0x1E62000
	055 Move X0, [X0+1888]
	056 Call 0x1C17D08
	057 Call 0x1C17F10
	058 Move X20, X0
	059 Move X0, 0x1E83000
	060 Move X0, [X0+1904]
	061 Call 0x1C17D08
	062 Move X1, X0
	063 Move X0, X20
	064 Move X2, X31
	065 Call ArgumentOutOfRangeException..ctor, X0, X1
	066 Move X0, X20
	067 Move X1, X19
	068 Call 0x1C17DEC

Method: System.Threading.Tasks.Task`1<TResult> FromCanceled(System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x0229A598 LDR X8, [X22 + 0x28]
	0x0229A59C LDUR X9, [X29 - 0x8]
	0x0229A5A0 CMP X8, X9
	0x0229A5A4 B.NE 0x229A5C4
	0x0229A5A8 MOV X0, X19
	0x0229A5AC ADD X31, X29, 0x0
	0x0229A5B0 LDP X20, X19, [X31 + 0x30]
	0x0229A5B4 LDP X22, X21, [X31 + 0x20]
	0x0229A5B8 LDR X23, [X31 + 0x10]
	0x0229A5BC LDP X29, X30, [X31], #0x40
	0x0229A5C0 RET
	0x0229A5C4 BL 0x3EB1B20
	0x0229A5C8 STP D9, D8, [X31 - 0x20]!
	0x0229A5CC STP X30, X19, [X31 + 0x10]
	0x0229A5D0 LDR X8, [X0 + 0x38]
	0x0229A5D4 MOV X19, X0
	0x0229A5D8 MOV V8.16B, V1.16B
	0x0229A5DC MOV V9.16B, V0.16B
	0x0229A5E0 CBNZ X8, 0x229A5F0
	0x0229A5E4 MOV X0, X19
	0x0229A5E8 BL 0x1C5C6E0
	0x0229A5EC LDR X8, [X19 + 0x38]
	0x0229A5F0 LDR X0, [X8 + 0x8]
	0x0229A5F4 LDRB W8, [X0 + 0x135]
	0x0229A5F8 TBNZ X8, 0x0, 0x229A600

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+56]
	005 Move X19, X1
	006 Move X20, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {17}
	009 Move X0, 0x1E5B000
	010 Move X0, [X0+1976]
	011 Call 0x1C17CF4
	012 Move X8, [X19+56]
	013 Compare X8, 0
	014 JumpIfNotEqual {17}
	015 Move X0, X19
	016 Call 0x1C5D6E0
	017 Move X8, 0x1E5B000
	018 Move X8, [X8+1976]
	019 Move X0, [X8]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X8, [X19+56]
	025 Move X0, X20
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, [X8]
	029 Move X30, [X31+32]
	030 Call Task.FromCancellation, X0
	031 Return X0

Method: System.Threading.Tasks.Task`1<TResult> FromCancellation(System.OperationCanceledException exception)

Disassembly:
	0x0229A890 LDRB W8, [X22 + 0x88D]
	0x0229A894 CBNZ W8, 0x229A8AC
	0x0229A898 ADRP X0, 0x1E61000
	0x0229A89C LDR X0, [X0 + 0x7E8]
	0x0229A8A0 BL 0x1C16CF4
	0x0229A8A4 MOVZ W8, 0x1
	0x0229A8A8 STRB W8, [X22 + 0x88D]
	0x0229A8AC LDR X0, [X21]
	0x0229A8B0 LDR W8, [X0 + 0xE0]
	0x0229A8B4 CBNZ W8, 0x229A8C0
	0x0229A8B8 BL 0x1C16DFC
	0x0229A8BC LDR X0, [X21]
	0x0229A8C0 LDR X8, [X20 + 0x38]
	0x0229A8C4 LDR X9, [X0 + 0xB8]
	0x0229A8C8 MOV X1, X19
	0x0229A8CC LDP X20, X19, [X31 + 0x20]
	0x0229A8D0 LDR X6, [X8 + 0x8]
	0x0229A8D4 LDR X5, [X9 + 0x8]
	0x0229A8D8 LDP X22, X21, [X31 + 0x10]
	0x0229A8DC MOVZ W3, 0x8
	0x0229A8E0 LDR X7, [X6]
	0x0229A8E4 MOV X0, X31
	0x0229A8E8 MOV X2, X31
	0x0229A8EC MOV W4, W31
	0x0229A8F0 LDR X30, [X31], #0x30
	0x0229A8F4 BR X7
	0x0229A8F8 STR X30, [X31 - 0x20]!
	0x0229A8FC STP X20, X19, [X31 + 0x10]
	0x0229A900 LDR X8, [X1 + 0x38]
	0x0229A904 MOV X20, X1
	0x0229A908 MOV X19, X0
	0x0229A90C CBNZ X8, 0x229A92C
	0x0229A910 ADRP X0, 0x1E5A000
	0x0229A914 LDR X0, [X0 + 0x7B8]
	0x0229A918 BL 0x1C16CF4
	0x0229A91C LDR X8, [X20 + 0x38]
	0x0229A920 CBNZ X8, 0x229A92C
	0x0229A924 MOV X0, X20
	0x0229A928 BL 0x1C5C6E0
	0x0229A92C ADRP X8, 0x1E5A000
	0x0229A930 LDR X8, [X8 + 0x7B8]
	0x0229A934 LDR X0, [X8]
	0x0229A938 LDR W8, [X0 + 0xE0]
	0x0229A93C CBNZ W8, 0x229A944
	0x0229A940 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+56]
	005 Move X19, X1
	006 Move X20, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {11}
	009 Move X0, X19
	010 Call 0x1C5D6E0
	011 Compare X20, 0
	012 JumpIfEqual {38}
	013 Move X8, [X19+56]
	014 Move X0, [X8]
	015 Move W8, [X0+309]
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {21}
	020 Call 0x1C5D684
	021 Call 0x1C17F10
	022 Move X8, [X19+56]
	023 Move X19, X0
	024 Move X1, [X8+8]
	025 Call Task`1<Int32>..ctor, X0
	026 Compare X19, 0
	027 JumpIfEqual {53}
	028 Move X1, [X20+144]
	029 Move X0, X19
	030 Move X2, X20
	031 Move X3, X31
	032 Call Task.TrySetCanceled, X0, X1, X2
	033 Move X0, X19
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return X0
	038 Move X0, 0x1E5F000
	039 Move X0, [X0+1320]
	040 Call 0x1C17D08
	041 Call 0x1C17F10
	042 Move X20, X0
	043 Move X0, 0x1E83000
	044 Move X0, [X0+1912]
	045 Call 0x1C17D08
	046 Move X1, X0
	047 Move X0, X20
	048 Move X2, X31
	049 Call ArgumentNullException..ctor, X0, X1
	050 Move X0, X20
	051 Move X1, X19
	052 Call 0x1C17DEC
	053 Call 0x1C17F20

Method: System.Threading.Tasks.Task Run(System.Action action)

Disassembly:
	0x033F5BC4 BL 0x1C16DEC
	0x033F5BC8 BL 0x1C16F20
	0x033F5BCC MOV X0, X21
	0x033F5BD0 BL 0x1C16F18
	0x033F5BD4 BL 0x1C16F20
	0x033F5BD8 BL 0x1C16F20
	0x033F5BDC ADRP X0, 0xD03000
	0x033F5BE0 LDR X0, [X0 + 0x528]
	0x033F5BE4 BL 0x1C16D08
	0x033F5BE8 BL 0x1C16F10
	0x033F5BEC MOV X19, X0
	0x033F5BF0 ADRP X0, 0xD28000
	0x033F5BF4 LDR X0, [X0 + 0x618]
	0x033F5BF8 BL 0x1C16D08
	0x033F5BFC MOV X1, X0
	0x033F5C00 MOV X0, X19
	0x033F5C04 MOV X2, X31
	0x033F5C08 BL 0x330E100
	0x033F5C0C ADRP X0, 0xD38000
	0x033F5C10 LDR X0, [X0 + 0x918]
	0x033F5C14 BL 0x1C16D08
	0x033F5C18 MOV X1, X0
	0x033F5C1C MOV X0, X19
	0x033F5C20 BL 0x1C16DEC
	0x033F5C24 BL 0x1C16F20
	0x033F5C28 B 0x33F5C48
	0x033F5C2C B 0x33F5CF4
	0x033F5C30 B 0x33F5C48
	0x033F5C34 B 0x33F5C48
	0x033F5C38 B 0x33F5C48
	0x033F5C3C B 0x33F5CF4
	0x033F5C40 B 0x33F5CF4
	0x033F5C44 B 0x33F5C48
	0x033F5C48 MOV X22, X0
	0x033F5C4C CMP W1, 0x1
	0x033F5C50 B.NE 0x33F5C70
	0x033F5C54 MOV X0, X22
	0x033F5C58 BL 0x3EB1AD0
	0x033F5C5C LDR X21, [X0]
	0x033F5C60 BL 0x3EB1AE0
	0x033F5C64 MOV W22, W31
	0x033F5C68 CBNZ X20, 0x33F5A30
	0x033F5C6C B 0x33F5A90
	0x033F5C70 MOV X21, X31
	0x033F5C74 B 0x33F5C7C
	0x033F5C78 MOV X22, X0
	0x033F5C7C CBZ X20, 0x33F5CE0
	0x033F5C80 ADRP X10, 0xCFE000
	0x033F5C84 LDR X8, [X20]
	0x033F5C88 LDR X10, [X10 + 0xE00]
	0x033F5C8C LDRH W9, [X8 + 0x12E]
	0x033F5C90 LDR X1, [X10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xFE9000
	006 Move X20, 0xD07000
	007 Move W8, [X21+1143]
	008 Move X20, [X20+2024]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xD07000
	015 Move X0, [X0+2024]
	016 Call 0x1C17CF4
	017 Move X0, 0xD00000
	018 Move X0, [X0+1976]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1143], W8
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X21, 0xFE5000
	028 Move W8, [X21+2189]
	029 Compare W8, 0
	030 JumpIfNotEqual {36}
	031 Move X0, 0xD07000
	032 Move X0, [X0+2024]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X21+2189], W8
	036 Move X0, [X20]
	037 Move X21, 0xD00000
	038 Move W8, [X0+224]
	039 Move X21, [X21+1976]
	040 Compare W8, 0
	041 JumpIfNotEqual {44}
	042 Call 0x1C17DFC
	043 Move X0, [X20]
	044 Move X8, [X21]
	045 Move X9, [X0+184]
	046 Move W10, [X8+224]
	047 Move X20, [X9+8]
	048 Compare W10, 0
	049 JumpIfNotEqual {52}
	050 Move X0, X8
	051 Call 0x1C17DFC
	052 Move X1, X19
	053 Move X4, X20
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move W5, 8
	057 Move X0, X31
	058 Move X2, X31
	059 Move X3, X31
	060 Move W6, W31
	061 Move X30, [X31+32]
	062 Move X21, [X31+40]
	063 Call Task.InternalStartNew, X0, X1, X2, X3, X4, X5, X6
	064 Return X0

Method: System.Threading.Tasks.Task`1<TResult> Run(System.Func`1<TResult> function)

Disassembly:
	0x0229B71C LDR X8, [X22 + 0x38]
	0x0229B720 CBNZ X8, 0x229B72C
	0x0229B724 MOV X0, X22
	0x0229B728 BL 0x1C5C6E0
	0x0229B72C ADRP X24, 0x1E59000
	0x0229B730 LDR X24, [X24 + 0x7B8]
	0x0229B734 LDR X0, [X24]
	0x0229B738 LDR W8, [X0 + 0xE0]
	0x0229B73C CBNZ W8, 0x229B744
	0x0229B740 BL 0x1C16DFC
	0x0229B744 ADRP X25, 0x213E000
	0x0229B748 LDRB W8, [X25 + 0x88E]
	0x0229B74C CBNZ W8, 0x229B764
	0x0229B750 ADRP X0, 0x1E59000
	0x0229B754 LDR X0, [X0 + 0x7B8]
	0x0229B758 BL 0x1C16CF4
	0x0229B75C MOVZ W8, 0x1
	0x0229B760 STRB W8, [X25 + 0x88E]
	0x0229B764 LDR X0, [X24]
	0x0229B768 LDR W8, [X0 + 0xE0]
	0x0229B76C CBNZ W8, 0x229B778
	0x0229B770 BL 0x1C16DFC
	0x0229B774 LDR X0, [X24]
	0x0229B778 BL 0x1C16D0C
	0x0229B77C LDR X24, [X0]
	0x0229B780 LDR W25, [X23 + 0x20]
	0x0229B784 MOV X0, X23
	0x0229B788 MOV X2, X31
	0x0229B78C MOV X1, X24
	0x0229B790 BL 0x33F93F0
	0x0229B794 LDR X8, [X22 + 0x38]
	0x0229B798 MOV X6, X0
	0x0229B79C MOV X0, X24
	0x0229B7A0 MOV X1, X21
	0x0229B7A4 LDR X7, [X8 + 0x8]
	0x0229B7A8 MOV X2, X20
	0x0229B7AC MOV X3, X19
	0x0229B7B0 LDP X20, X19, [X31 + 0x30]
	0x0229B7B4 LDP X22, X21, [X31 + 0x20]
	0x0229B7B8 LDP X24, X23, [X31 + 0x10]
	0x0229B7BC MOV W4, W25
	0x0229B7C0 MOV W5, W31
	0x0229B7C4 LDP X30, X25, [X31], #0x40
	0x0229B7C8 B 0x269F130
	0x0229B7CC STP X30, X25, [X31 - 0x40]!
	0x0229B7D0 STP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X1+56]
	007 Move X20, X1
	008 Move X19, X0
	009 Compare X8, 0
	010 JumpIfNotEqual {19}
	011 Move X0, 0x1E61000
	012 Move X0, [X0+2024]
	013 Call 0x1C17CF4
	014 Move X8, [X20+56]
	015 Compare X8, 0
	016 JumpIfNotEqual {19}
	017 Move X0, X20
	018 Call 0x1C5D6E0
	019 Move X21, 0x1E61000
	020 Move X21, [X21+2024]
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X22, 0x213F000
	027 Move W8, [X22+2189]
	028 Compare W8, 0
	029 JumpIfNotEqual {35}
	030 Move X0, 0x1E61000
	031 Move X0, [X0+2024]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X22+2189], W8
	035 Move X0, [X21]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X21]
	041 Move X8, [X0+184]
	042 Move X9, [X20+56]
	043 Move X1, X19
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X5, [X8+8]
	047 Move X6, [X9+8]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move W3, 8
	051 Move X0, X31
	052 Move X2, X31
	053 Move W4, W31
	054 Move X30, [X31+48]
	055 Call Task`1<Int32>.StartNew, X0, X1, X2, X3, X4, X5
	056 Return X0

Method: System.Threading.Tasks.Task`1<TResult> Run(System.Func`1<TResult> function, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x0229B964 MOV W20, W3
	0x0229B968 MOV X21, X2
	0x0229B96C MOV X23, X1
	0x0229B970 CBNZ X8, 0x229B990
	0x0229B974 ADRP X0, 0x1E59000
	0x0229B978 LDR X0, [X0 + 0x7B8]
	0x0229B97C BL 0x1C16CF4
	0x0229B980 LDR X8, [X22 + 0x38]
	0x0229B984 CBNZ X8, 0x229B990
	0x0229B988 MOV X0, X22
	0x0229B98C BL 0x1C5C6E0
	0x0229B990 ADRP X8, 0x1E59000
	0x0229B994 LDR X8, [X8 + 0x7B8]
	0x0229B998 LDR X0, [X8]
	0x0229B99C LDR W8, [X0 + 0xE0]
	0x0229B9A0 CBNZ W8, 0x229B9A8
	0x0229B9A4 BL 0x1C16DFC
	0x0229B9A8 MOV W0, W20
	0x0229B9AC MOV X1, X31
	0x0229B9B0 BL 0x33F0388
	0x0229B9B4 LDR X8, [X22 + 0x38]
	0x0229B9B8 MOV X2, X21
	0x0229B9BC MOV W3, W20
	0x0229B9C0 MOV X5, X19
	0x0229B9C4 LDR X6, [X8 + 0x8]
	0x0229B9C8 LDP X20, X19, [X31 + 0x20]
	0x0229B9CC LDP X22, X21, [X31 + 0x10]
	0x0229B9D0 MOV X1, X23
	0x0229B9D4 LDR X7, [X6]
	0x0229B9D8 MOV W4, W31
	0x0229B9DC LDP X30, X23, [X31], #0x30
	0x0229B9E0 BR X7
	0x0229B9E4 STR X30, [X31 - 0x40]!
	0x0229B9E8 STP X24, X23, [X31 + 0x10]
	0x0229B9EC STP X22, X21, [X31 + 0x20]
	0x0229B9F0 STP X20, X19, [X31 + 0x30]
	0x0229B9F4 LDR X8, [X6 + 0x38]
	0x0229B9F8 MOV X23, X6
	0x0229B9FC MOV X19, X5
	0x0229BA00 MOV W20, W4
	0x0229BA04 MOV X21, X3
	0x0229BA08 MOV X22, X2
	0x0229BA0C MOV X24, X1
	0x0229BA10 CBNZ X8, 0x229BA30
	0x0229BA14 ADRP X0, 0x1E59000
	0x0229BA18 LDR X0, [X0 + 0x7B8]
	0x0229BA1C BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X2+56]
	008 Move X21, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Compare X8, 0
	012 JumpIfNotEqual {21}
	013 Move X0, 0x1E61000
	014 Move X0, [X0+2024]
	015 Call 0x1C17CF4
	016 Move X8, [X21+56]
	017 Compare X8, 0
	018 JumpIfNotEqual {21}
	019 Move X0, X21
	020 Call 0x1C5D6E0
	021 Move X22, 0x1E61000
	022 Move X22, [X22+2024]
	023 Move X0, [X22]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X23, 0x213F000
	029 Move W8, [X23+2189]
	030 Compare W8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, 0x1E61000
	033 Move X0, [X0+2024]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X23+2189], W8
	037 Move X0, [X22]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {43}
	041 Call 0x1C17DFC
	042 Move X0, [X22]
	043 Move X8, [X0+184]
	044 Move X9, [X21+56]
	045 Move X1, X20
	046 Move X2, X19
	047 Move X5, [X8+8]
	048 Move X6, [X9+8]
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move W3, 8
	054 Move X0, X31
	055 Move W4, W31
	056 Move X30, [X31+48]
	057 Move X23, [X31+56]
	058 Call Task`1<Boolean>.StartNew, X0, X1, X2, X3, X4, X5
	059 Return X0

Method: System.Threading.Tasks.Task Run(System.Func`1<System.Threading.Tasks.Task> function)

Disassembly:
	0x033F5C94 CBZ X9, 0x33F5CB8
	0x033F5C98 LDR X10, [X8 + 0xB0]
	0x033F5C9C ADD X10, X10, 0x8
	0x033F5CA0 LDUR X11, [X10 - 0x8]
	0x033F5CA4 CMP X11, X1
	0x033F5CA8 B.EQ 0x33F5CC8
	0x033F5CAC SUBS X9, X9, 0x1
	0x033F5CB0 ADD X10, X10, 0x10
	0x033F5CB4 B.NE 0x33F5CA0
	0x033F5CB8 MOV X0, X20
	0x033F5CBC MOV W2, W31
	0x033F5CC0 BL 0x1C5C788
	0x033F5CC4 B 0x33F5CD4
	0x033F5CC8 LDRSW X9, [X10]
	0x033F5CCC ADD X8, X8, X9, 0x4, LSL
	0x033F5CD0 ADD X0, X8, 0x138
	0x033F5CD4 LDP X8, X1, [X0]
	0x033F5CD8 MOV X0, X20
	0x033F5CDC BLR X8
	0x033F5CE0 CBZ X21, 0x33F5D90
	0x033F5CE4 MOV X0, X21
	0x033F5CE8 BL 0x1C16F18

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xFE9000
	006 Move X21, 0xD00000
	007 Move W8, [X20+1144]
	008 Move X21, [X21+1976]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD00000
	015 Move X0, [X0+1976]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1144], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]

Method: System.Threading.Tasks.Task Run(System.Func`1<System.Threading.Tasks.Task> function, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x033F5CEC B 0x33F5CF4
	0x033F5CF0 B 0x33F5CF4
	0x033F5CF4 MOV X22, X0
	0x033F5CF8 CMP W1, 0x1
	0x033F5CFC B.NE 0x33F5D1C
	0x033F5D00 MOV X0, X22
	0x033F5D04 BL 0x3EB1AD0
	0x033F5D08 LDR X21, [X0]
	0x033F5D0C BL 0x3EB1AE0
	0x033F5D10 MOV W22, W31
	0x033F5D14 CBNZ X20, 0x33F589C
	0x033F5D18 B 0x33F58FC
	0x033F5D1C MOV X21, X31
	0x033F5D20 B 0x33F5D28
	0x033F5D24 MOV X22, X0
	0x033F5D28 CBZ X20, 0x33F5D8C
	0x033F5D2C ADRP X10, 0xCFE000
	0x033F5D30 LDR X8, [X20]
	0x033F5D34 LDR X10, [X10 + 0xE00]
	0x033F5D38 LDRH W9, [X8 + 0x12E]
	0x033F5D3C LDR X1, [X10]
	0x033F5D40 CBZ X9, 0x33F5D64
	0x033F5D44 LDR X10, [X8 + 0xB0]
	0x033F5D48 ADD X10, X10, 0x8
	0x033F5D4C LDUR X11, [X10 - 0x8]
	0x033F5D50 CMP X11, X1
	0x033F5D54 B.EQ 0x33F5D74
	0x033F5D58 SUBS X9, X9, 0x1
	0x033F5D5C ADD X10, X10, 0x10
	0x033F5D60 B.NE 0x33F5D4C
	0x033F5D64 MOV X0, X20
	0x033F5D68 MOV W2, W31
	0x033F5D6C BL 0x1C5C788
	0x033F5D70 B 0x33F5D80
	0x033F5D74 LDRSW X9, [X10]
	0x033F5D78 ADD X8, X8, X9, 0x4, LSL
	0x033F5D7C ADD X0, X8, 0x138
	0x033F5D80 LDP X8, X1, [X0]
	0x033F5D84 MOV X0, X20
	0x033F5D88 BLR X8
	0x033F5D8C CBNZ X21, 0x33F5D98
	0x033F5D90 MOV X0, X22
	0x033F5D94 BL 0x1D2C690
	0x033F5D98 MOV X0, X21
	0x033F5D9C BL 0x1C16F18
	0x033F5DA0 BL 0x1990590
	0x033F5DA4 STR X30, [X31 - 0x40]!
	0x033F5DA8 STP X24, X23, [X31 + 0x10]
	0x033F5DAC STP X22, X21, [X31 + 0x20]
	0x033F5DB0 STP X20, X19, [X31 + 0x30]
	0x033F5DB4 ADRP X20, 0xFE8000
	0x033F5DB8 LDRB W8, [X20 + 0x47E]
	0x033F5DBC MOV X19, X0
	0x033F5DC0 TBNZ X8, 0x0, 0x33F5DE4
	0x033F5DC4 ADRP X0, 0xD07000
	0x033F5DC8 LDR X0, [X0 + 0xC20]
	0x033F5DCC BL 0x1C16CF4
	0x033F5DD0 ADRP X0, 0xCFF000
	0x033F5DD4 LDR X0, [X0 + 0x7B8]
	0x033F5DD8 BL 0x1C16CF4
	0x033F5DDC MOVZ W8, 0x1
	0x033F5DE0 STRB W8, [X20 + 0x47E]
	0x033F5DE4 CBZ X19, 0x33F5F20
	0x033F5DE8 ADRP X23, 0xCFF000
	0x033F5DEC LDR W20, [X19 + 0x18]
	0x033F5DF0 LDR X23, [X23 + 0x7B8]
	0x033F5DF4 CBZ W20, 0x33F5E88
	0x033F5DF8 ADRP X8, 0xD07000
	0x033F5DFC LDR X8, [X8 + 0xC20]
	0x033F5E00 MOV W1, W20
	0x033F5E04 LDR X0, [X8]
	0x033F5E08 BL 0x1C16D6C
	0x033F5E0C CMP W20, 0x1
	0x033F5E10 MOV X21, X0
	0x033F5E14 B.LT 0x33F5E70
	0x033F5E18 MOV W8, W31
	0x033F5E1C LDR W9, [X19 + 0x18]
	0x033F5E20 CMP W8, W9
	0x033F5E24 B.CS 0x33F5EB0
	0x033F5E28 SXTW X24, W8
	0x033F5E2C ADD X8, X19, X24, 0x3, LSL
	0x033F5E30 LDR X22, [X8 + 0x20]
	0x033F5E34 CBZ X22, 0x33F5EB4
	0x033F5E38 CBZ X21, 0x33F5F10
	0x033F5E3C LDR X8, [X21]
	0x033F5E40 MOV X0, X22
	0x033F5E44 LDR X1, [X8 + 0x40]
	0x033F5E48 BL 0x1C16E00
	0x033F5E4C CBZ X0, 0x33F5F14
	0x033F5E50 LDR W8, [X21 + 0x18]
	0x033F5E54 CMP W24, W8
	0x033F5E58 B.CS 0x33F5EB0
	0x033F5E5C ADD W8, W24, 0x1
	0x033F5E60 ADD X9, X21, X24, 0x3, LSL
	0x033F5E64 CMP W20, W8
	0x033F5E68 STR X22, [X9 + 0x20]
	0x033F5E6C B.NE 0x33F5E1C
	0x033F5E70 LDR X0, [X23]
	0x033F5E74 LDR W8, [X0 + 0xE0]
	0x033F5E78 CBNZ W8, 0x33F5E80
	0x033F5E7C BL 0x1C16DFC
	0x033F5E80 MOV X0, X21
	0x033F5E84 B 0x33F5E9C
	0x033F5E88 LDR X0, [X23]
	0x033F5E8C LDR W8, [X0 + 0xE0]
	0x033F5E90 CBNZ W8, 0x33F5E98
	0x033F5E94 BL 0x1C16DFC
	0x033F5E98 MOV X0, X19
	0x033F5E9C LDP X20, X19, [X31 + 0x30]
	0x033F5EA0 LDP X22, X21, [X31 + 0x20]
	0x033F5EA4 LDP X24, X23, [X31 + 0x10]
	0x033F5EA8 LDR X30, [X31], #0x40
	0x033F5EAC B 0x33F5F54
	0x033F5EB0 BL 0x1C16F28
	0x033F5EB4 ADRP X0, 0xD06000
	0x033F5EB8 LDR X0, [X0 + 0x578]
	0x033F5EBC BL 0x1C16D08
	0x033F5EC0 BL 0x1C16F10
	0x033F5EC4 MOV X19, X0
	0x033F5EC8 ADRP X0, 0xD38000
	0x033F5ECC LDR X0, [X0 + 0x910]
	0x033F5ED0 BL 0x1C16D08
	0x033F5ED4 MOV X20, X0
	0x033F5ED8 ADRP X0, 0xD28000
	0x033F5EDC LDR X0, [X0 + 0x618]
	0x033F5EE0 BL 0x1C16D08
	0x033F5EE4 MOV X2, X0
	0x033F5EE8 MOV X0, X19
	0x033F5EEC MOV X1, X20
	0x033F5EF0 MOV X3, X31
	0x033F5EF4 BL 0x330E16C
	0x033F5EF8 ADRP X0, 0xD38000
	0x033F5EFC LDR X0, [X0 + 0x920]
	0x033F5F00 BL 0x1C16D08
	0x033F5F04 MOV X1, X0
	0x033F5F08 MOV X0, X19
	0x033F5F0C BL 0x1C16DEC
	0x033F5F10 BL 0x1C16F20
	0x033F5F14 BL 0x1C16F44
	0x033F5F18 MOV X1, X31
	0x033F5F1C BL 0x1C16DEC

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xFE9000
	009 Move W8, [X20+1145]
	010 Move X19, X0
	011 Move [X31+8], X1
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {36}
	016 Move X0, 0xD07000
	017 Move X0, [X0+2008]
	018 Call 0x1C17CF4
	019 Move X0, 0xD07000
	020 Move X0, [X0+2080]
	021 Call 0x1C17CF4
	022 Move X0, 0xD07000
	023 Move X0, [X0+2024]
	024 Call 0x1C17CF4
	025 Move X0, 0xD00000
	026 Move X0, [X0+1976]
	027 Call 0x1C17CF4
	028 Move X0, 0xD39000
	029 Move X0, [X0+2208]
	030 Call 0x1C17CF4
	031 Move X0, 0xD39000
	032 Move X0, [X0+2216]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X20+1145], W8
	036 Compare X19, 0
	037 JumpIfEqual {144}
	038 Move X8, 0xD07000
	039 Move X8, [X8+2008]
	040 Move X0, [X8]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Add X0, X31, 8
	046 Move X1, X31
	047 Call CancellationToken.get_IsCancellationRequested, X0
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {63}
	052 Move X8, 0xD00000
	053 Move X8, [X8+1976]
	054 Move X19, [X31+8]
	055 Move X0, [X8]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move X0, X19
	061 Call Task.FromCancellation, X0
	062 Move X19, X0
	063 Move X20, 0xD00000
	064 Move X20, [X20+1976]
	065 Move X0, [X20]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move X21, 0xFE4000
	071 Move W8, [X21+3867]
	072 Compare W8, 0
	073 JumpIfNotEqual {79}
	074 Move X0, 0xD00000
	075 Move X0, [X0+1976]
	076 Call 0x1C17CF4
	077 Move W8, 1
	078 Move [X21+3867], W8
	079 Move X0, [X20]
	080 Move W8, [X0+224]
	081 Compare W8, 0
	082 JumpIfNotEqual {85}
	083 Call 0x1C17DFC
	084 Move X0, [X20]
	085 Move X22, 0xD07000
	086 Move X8, [X0+184]
	087 Move X22, [X22+2024]
	088 Move X21, [X31+8]
	089 Move X20, [X8+40]
	090 Move X0, [X22]
	091 Move W8, [X0+224]
	092 Compare W8, 0
	093 JumpIfNotEqual {95}
	094 Call 0x1C17DFC
	095 Move X23, 0xFE5000
	096 Move W8, [X23+2189]
	097 Compare W8, 0
	098 JumpIfNotEqual {104}
	099 Move X0, 0xD07000
	100 Move X0, [X0+2024]
	101 Call 0x1C17CF4
	102 Move W8, 1
	103 Move [X23+2189], W8
	104 Move X0, [X22]
	105 Move W8, [X0+224]
	106 Compare W8, 0
	107 JumpIfNotEqual {110}
	108 Call 0x1C17DFC
	109 Move X0, [X22]
	110 Compare X20, 0
	111 JumpIfEqual {162}
	112 Move X9, 0xD07000
	113 Move X8, [X0+184]
	114 Move X9, [X9+2080]
	115 Move W3, 8
	116 Move X0, X20
	117 Move X4, [X8+8]
	118 Move X5, [X9]
	119 Move X1, X19
	120 Move X2, X21
	121 Call 0x229C8B8, X0, X1, X2, X3, X4
	122 Move X8, 0xD39000
	123 Move X8, [X8+2216]
	124 Move X20, X0
	125 Move X8, [X8]
	126 Move X0, X8
	127 Call 0x1C17F10
	128 Move X8, 0xD39000
	129 Move X8, [X8+2208]
	130 Move W2, 1
	131 Move X1, X20
	132 Move X19, X0
	133 Move X3, [X8]
	134 Call UnwrapPromise`1<VoidTaskResult>..ctor, X0, X1, X2
	135 Move X0, X19
	136 Move X20, [X31+48]
	137 Move X19, [X31+56]
	138 Move X22, [X31+32]
	139 Move X21, [X31+40]
	140 Move X30, [X31+16]
	141 Move X23, [X31+24]
	142 Add X31, X31, 64
	143 Return X0
	144 Move X0, 0xD04000
	145 Move X0, [X0+1320]
	146 Call 0x1C17D08
	147 Call 0x1C17F10
	148 Move X19, X0
	149 Move X0, 0xD28000
	150 Move X0, [X0+1920]
	151 Call 0x1C17D08
	152 Move X1, X0
	153 Move X0, X19
	154 Move X2, X31
	155 Call ArgumentNullException..ctor, X0, X1
	156 Move X0, 0xD39000
	157 Move X0, [X0+2224]
	158 Call 0x1C17D08
	159 Move X1, X0
	160 Move X0, X19
	161 Call 0x1C17DEC
	162 Call 0x1C17F20

Method: System.Threading.Tasks.Task`1<TResult> Run(System.Func`1<System.Threading.Tasks.Task`1<TResult>> function)

Disassembly:
	0x0229B7D4 STP X22, X21, [X31 + 0x20]
	0x0229B7D8 STP X20, X19, [X31 + 0x30]
	0x0229B7DC LDR X8, [X4 + 0x38]
	0x0229B7E0 MOV X22, X4
	0x0229B7E4 MOV X19, X3
	0x0229B7E8 MOV X20, X2
	0x0229B7EC MOV X21, X1
	0x0229B7F0 MOV X23, X0
	0x0229B7F4 CBNZ X8, 0x229B814
	0x0229B7F8 ADRP X0, 0x1E59000
	0x0229B7FC LDR X0, [X0 + 0x7B8]
	0x0229B800 BL 0x1C16CF4
	0x0229B804 LDR X8, [X22 + 0x38]
	0x0229B808 CBNZ X8, 0x229B814
	0x0229B80C MOV X0, X22
	0x0229B810 BL 0x1C5C6E0
	0x0229B814 ADRP X24, 0x1E59000
	0x0229B818 LDR X24, [X24 + 0x7B8]
	0x0229B81C LDR X0, [X24]
	0x0229B820 LDR W8, [X0 + 0xE0]
	0x0229B824 CBNZ W8, 0x229B82C
	0x0229B828 BL 0x1C16DFC
	0x0229B82C ADRP X25, 0x213E000
	0x0229B830 LDRB W8, [X25 + 0x88E]
	0x0229B834 CBNZ W8, 0x229B84C
	0x0229B838 ADRP X0, 0x1E59000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+56]
	005 Move X20, X1
	006 Move X19, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {17}
	009 Move X0, 0x1E5A000
	010 Move X0, [X0+1976]
	011 Call 0x1C17CF4
	012 Move X8, [X20+56]
	013 Compare X8, 0
	014 JumpIfNotEqual {17}
	015 Move X0, X20
	016 Call 0x1C5D6E0
	017 Move X8, 0x1E5A000
	018 Move X8, [X8+1976]
	019 Move X0, [X8]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X8, [X20+56]
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X2, [X8+8]
	030 Move X30, [X31+32]
	031 Call 0x229BA20, X0, X1
	032 Return X0

Method: System.Threading.Tasks.Task`1<TResult> Run(System.Func`1<System.Threading.Tasks.Task`1<TResult>> function, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x0229BA20 LDR X8, [X23 + 0x38]
	0x0229BA24 CBNZ X8, 0x229BA30
	0x0229BA28 MOV X0, X23
	0x0229BA2C BL 0x1C5C6E0
	0x0229BA30 ADRP X8, 0x1E59000
	0x0229BA34 LDR X8, [X8 + 0x7B8]
	0x0229BA38 LDR X0, [X8]
	0x0229BA3C LDR W8, [X0 + 0xE0]
	0x0229BA40 CBNZ W8, 0x229BA48
	0x0229BA44 BL 0x1C16DFC
	0x0229BA48 MOV W0, W20
	0x0229BA4C MOV X1, X31
	0x0229BA50 BL 0x33F0388
	0x0229BA54 LDR X8, [X23 + 0x38]
	0x0229BA58 MOV X1, X24
	0x0229BA5C MOV X2, X22
	0x0229BA60 MOV X3, X21
	0x0229BA64 LDR X7, [X8 + 0x8]
	0x0229BA68 MOV W4, W20
	0x0229BA6C MOV X6, X19
	0x0229BA70 LDP X20, X19, [X31 + 0x30]
	0x0229BA74 LDP X22, X21, [X31 + 0x20]
	0x0229BA78 LDP X24, X23, [X31 + 0x10]
	0x0229BA7C MOV W5, W31
	0x0229BA80 LDR X30, [X31], #0x40
	0x0229BA84 B 0x269AC64
	0x0229BA88 STR X30, [X31 - 0x40]!
	0x0229BA8C STP X24, X23, [X31 + 0x10]
	0x0229BA90 STP X22, X21, [X31 + 0x20]
	0x0229BA94 STP X20, X19, [X31 + 0x30]
	0x0229BA98 LDR X8, [X6 + 0x38]
	0x0229BA9C MOV X23, X6
	0x0229BAA0 MOV X19, X5
	0x0229BAA4 MOV W20, W4
	0x0229BAA8 MOV X21, X3
	0x0229BAAC MOV X22, X2
	0x0229BAB0 MOV X24, X1
	0x0229BAB4 CBNZ X8, 0x229BAD4
	0x0229BAB8 ADRP X0, 0x1E59000
	0x0229BABC LDR X0, [X0 + 0x7B8]
	0x0229BAC0 BL 0x1C16CF4
	0x0229BAC4 LDR X8, [X23 + 0x38]
	0x0229BAC8 CBNZ X8, 0x229BAD4
	0x0229BACC MOV X0, X23
	0x0229BAD0 BL 0x1C5C6E0
	0x0229BAD4 ADRP X8, 0x1E59000
	0x0229BAD8 LDR X8, [X8 + 0x7B8]
	0x0229BADC LDR X0, [X8]
	0x0229BAE0 LDR W8, [X0 + 0xE0]
	0x0229BAE4 CBNZ W8, 0x229BAEC
	0x0229BAE8 BL 0x1C16DFC
	0x0229BAEC MOV W0, W20
	0x0229BAF0 MOV X1, X31
	0x0229BAF4 BL 0x33F0388
	0x0229BAF8 LDR X8, [X23 + 0x38]
	0x0229BAFC MOV X1, X24
	0x0229BB00 MOV X2, X22
	0x0229BB04 MOV X3, X21
	0x0229BB08 LDR X7, [X8 + 0x8]
	0x0229BB0C MOV W4, W20
	0x0229BB10 MOV X6, X19
	0x0229BB14 LDP X20, X19, [X31 + 0x30]
	0x0229BB18 LDR X8, [X7]
	0x0229BB1C LDP X22, X21, [X31 + 0x20]
	0x0229BB20 LDP X24, X23, [X31 + 0x10]
	0x0229BB24 MOV W5, W31
	0x0229BB28 LDR X30, [X31], #0x40
	0x0229BB2C BR X8
	0x0229BB30 STR X30, [X31 - 0x20]!
	0x0229BB34 STP X20, X19, [X31 + 0x10]
	0x0229BB38 LDR X8, [X1 + 0x38]
	0x0229BB3C MOV X19, X1
	0x0229BB40 MOV X20, X0
	0x0229BB44 CBNZ X8, 0x229BB64
	0x0229BB48 ADRP X0, 0x1E81000
	0x0229BB4C LDR X0, [X0 + 0x788]
	0x0229BB50 BL 0x1C16CF4
	0x0229BB54 LDR X8, [X19 + 0x38]
	0x0229BB58 CBNZ X8, 0x229BB64
	0x0229BB5C MOV X0, X19
	0x0229BB60 BL 0x1C5C6E0
	0x0229BB64 STR X31, [X31 + 0x8]
	0x0229BB68 CBZ X20, 0x229BB84
	0x0229BB6C ADRP X8, 0x1E81000
	0x0229BB70 LDR X8, [X8 + 0x788]
	0x0229BB74 LDR X9, [X20]
	0x0229BB78 LDR X8, [X8]
	0x0229BB7C CMP X9, X8
	0x0229BB80 B.EQ 0x229BB8C
	0x0229BB84 LDR X8, [X19 + 0x38]
	0x0229BB88 B 0x229BB94
	0x0229BB8C LDR X8, [X19 + 0x38]
	0x0229BB90 LDR X20, [X20 + 0x10]
	0x0229BB94 LDR X0, [X8]
	0x0229BB98 LDRB W8, [X0 + 0x135]
	0x0229BB9C TBNZ X8, 0x0, 0x229BBA4
	0x0229BBA0 BL 0x1C5C684
	0x0229BBA4 CBZ X20, 0x229BC00
	0x0229BBA8 LDR X8, [X20]
	0x0229BBAC LDRB W9, [X0 + 0x130]
	0x0229BBB0 LDRB W10, [X8 + 0x130]
	0x0229BBB4 CMP W10, W9
	0x0229BBB8 B.CC 0x229BC00
	0x0229BBBC LDR X8, [X8 + 0xC8]
	0x0229BBC0 ADD X8, X8, X9, 0x3, LSL
	0x0229BBC4 LDUR X8, [X8 - 0x8]
	0x0229BBC8 CMP X8, X0
	0x0229BBCC B.NE 0x229BC00
	0x0229BBD0 LDR X8, [X19 + 0x38]
	0x0229BBD4 MOV X0, X20
	0x0229BBD8 LDR X1, [X8 + 0x8]
	0x0229BBDC BL 0x269D3A4
	0x0229BBE0 STR X0, [X31 + 0x8]
	0x0229BBE4 LDR X8, [X19 + 0x38]
	0x0229BBE8 ADD X0, X31, 0x8
	0x0229BBEC LDR X1, [X8 + 0x18]
	0x0229BBF0 BL 0x26772B8
	0x0229BBF4 LDP X20, X19, [X31 + 0x10]
	0x0229BBF8 LDR X30, [X31], #0x20
	0x0229BBFC RET
	0x0229BC00 ADRP X0, 0x1E5D000
	0x0229BC04 LDR X0, [X0 + 0x528]
	0x0229BC08 BL 0x1C16D08
	0x0229BC0C BL 0x1C16F10
	0x0229BC10 MOV X1, X31
	0x0229BC14 MOV X20, X0
	0x0229BC18 BL 0x3315F20
	0x0229BC1C MOV X0, X20
	0x0229BC20 MOV X1, X19
	0x0229BC24 BL 0x1C16DEC
	0x0229BC28 STR X30, [X31 - 0x20]!
	0x0229BC2C STP X20, X19, [X31 + 0x10]
	0x0229BC30 LDR X8, [X1 + 0x38]
	0x0229BC34 MOV X19, X1
	0x0229BC38 MOV X20, X0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move [X31+8], X1
	009 Move X8, [X2+56]
	010 Move X19, X2
	011 Move X20, X0
	012 Compare X8, 0
	013 JumpIfNotEqual {28}
	014 Move X0, 0x1E61000
	015 Move X0, [X0+2008]
	016 Call 0x1C17CF4
	017 Move X0, 0x1E61000
	018 Move X0, [X0+2024]
	019 Call 0x1C17CF4
	020 Move X0, 0x1E5A000
	021 Move X0, [X0+1976]
	022 Call 0x1C17CF4
	023 Move X8, [X19+56]
	024 Compare X8, 0
	025 JumpIfNotEqual {28}
	026 Move X0, X19
	027 Call 0x1C5D6E0
	028 Compare X20, 0
	029 JumpIfEqual {143}
	030 Move X8, 0x1E61000
	031 Move X8, [X8+2008]
	032 Move X0, [X8]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Add X0, X31, 8
	038 Move X1, X31
	039 Call CancellationToken.get_IsCancellationRequested, X0
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {57}
	044 Move X8, 0x1E5A000
	045 Move X8, [X8+1976]
	046 Move X20, [X31+8]
	047 Move X0, [X8]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Move X8, [X19+56]
	053 Move X0, X20
	054 Move X1, [X8+8]
	055 Call Task.FromCancellation, X0
	056 Move X19, X0
	057 Move X21, 0x1E5A000
	058 Move X21, [X21+1976]
	059 Move X0, [X21]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Move X22, 0x213E000
	065 Move W8, [X22+3867]
	066 Compare W8, 0
	067 JumpIfNotEqual {73}
	068 Move X0, 0x1E5A000
	069 Move X0, [X0+1976]
	070 Call 0x1C17CF4
	071 Move W8, 1
	072 Move [X22+3867], W8
	073 Move X0, [X21]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {79}
	077 Call 0x1C17DFC
	078 Move X0, [X21]
	079 Move X23, 0x1E61000
	080 Move X8, [X0+184]
	081 Move X23, [X23+2024]
	082 Move X22, [X31+8]
	083 Move X21, [X8+40]
	084 Move X0, [X23]
	085 Move W8, [X0+224]
	086 Compare W8, 0
	087 JumpIfNotEqual {89}
	088 Call 0x1C17DFC
	089 Move X24, 0x213F000
	090 Move W8, [X24+2189]
	091 Compare W8, 0
	092 JumpIfNotEqual {98}
	093 Move X0, 0x1E61000
	094 Move X0, [X0+2024]
	095 Call 0x1C17CF4
	096 Move W8, 1
	097 Move [X24+2189], W8
	098 Move X0, [X23]
	099 Move W8, [X0+224]
	100 Compare W8, 0
	101 JumpIfNotEqual {104}
	102 Call 0x1C17DFC
	103 Move X0, [X23]
	104 Compare X21, 0
	105 JumpIfEqual {158}
	106 Move X8, [X0+184]
	107 Move X9, [X19+56]
	108 Move W3, 8
	109 Move X0, X21
	110 Move X4, [X8+8]
	111 Move X5, [X9+24]
	112 Move X1, X20
	113 Move X2, X22
	114 Call 0x229C8B8, X0, X1, X2, X3, X4
	115 Move X8, [X19+56]
	116 Move X20, X0
	117 Move X8, [X8+40]
	118 Move W9, [X8+309]
	119 Move TEMP, X9
	120 And TEMP, TEMP, 1
	121 Compare TEMP, 1
	122 JumpIfEqual {126}
	123 Move X0, X8
	124 Call 0x1C5D684
	125 Move X8, X0
	126 Move X0, X8
	127 Call 0x1C17F10
	128 Move X8, [X19+56]
	129 Move W2, 1
	130 Move X1, X20
	131 Move X19, X0
	132 Move X3, [X8+48]
	133 Call 0x2733B04, X0, X1, X2
	134 Move X0, X19
	135 Move X20, [X31+48]
	136 Move X19, [X31+56]
	137 Move X22, [X31+32]
	138 Move X21, [X31+40]
	139 Move X24, [X31+16]
	140 Move X23, [X31+24]
	141 Move X30, [X31+64]
	142 Return X0
	143 Move X0, 0x1E5E000
	144 Move X0, [X0+1320]
	145 Call 0x1C17D08
	146 Call 0x1C17F10
	147 Move X20, X0
	148 Move X0, 0x1E82000
	149 Move X0, [X0+1920]
	150 Call 0x1C17D08
	151 Move X1, X0
	152 Move X0, X20
	153 Move X2, X31
	154 Call ArgumentNullException..ctor, X0, X1
	155 Move X0, X20
	156 Move X1, X19
	157 Call 0x1C17DEC
	158 Call 0x1C17F20

Method: System.Threading.Tasks.Task Delay(System.TimeSpan delay, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x033F5F20 ADRP X0, 0xD03000
	0x033F5F24 LDR X0, [X0 + 0x528]
	0x033F5F28 BL 0x1C16D08
	0x033F5F2C BL 0x1C16F10
	0x033F5F30 MOV X19, X0
	0x033F5F34 ADRP X0, 0xD28000
	0x033F5F38 LDR X0, [X0 + 0x618]
	0x033F5F3C BL 0x1C16D08
	0x033F5F40 MOV X1, X0
	0x033F5F44 MOV X0, X19
	0x033F5F48 MOV X2, X31
	0x033F5F4C BL 0x330E100
	0x033F5F50 B 0x33F5EF8
	0x033F5F54 STR X30, [X31 - 0x20]!
	0x033F5F58 STP X20, X19, [X31 + 0x10]
	0x033F5F5C ADRP X20, 0xFE8000
	0x033F5F60 LDRB W8, [X20 + 0x47F]
	0x033F5F64 MOV X19, X0
	0x033F5F68 TBNZ X8, 0x0, 0x33F5F8C
	0x033F5F6C ADRP X0, 0xCFF000
	0x033F5F70 LDR X0, [X0 + 0x7B8]
	0x033F5F74 BL 0x1C16CF4
	0x033F5F78 ADRP X0, 0xD38000
	0x033F5F7C LDR X0, [X0 + 0x928]
	0x033F5F80 BL 0x1C16CF4
	0x033F5F84 MOVZ W8, 0x1
	0x033F5F88 STRB W8, [X20 + 0x47F]
	0x033F5F8C CBZ X19, 0x33F601C
	0x033F5F90 LDR X8, [X19 + 0x18]
	0x033F5F94 CBZ X8, 0x33F5FB8
	0x033F5F98 ADRP X8, 0xD38000
	0x033F5F9C LDR X8, [X8 + 0x928]
	0x033F5FA0 LDR X0, [X8]
	0x033F5FA4 BL 0x1C16F10
	0x033F5FA8 MOV X1, X19
	0x033F5FAC MOV X20, X0
	0x033F5FB0 BL 0x33F6020
	0x033F5FB4 B 0x33F600C
	0x033F5FB8 ADRP X19, 0xCFF000
	0x033F5FBC LDR X19, [X19 + 0x7B8]
	0x033F5FC0 LDR X0, [X19]
	0x033F5FC4 LDR W8, [X0 + 0xE0]
	0x033F5FC8 CBNZ W8, 0x33F5FD0
	0x033F5FCC BL 0x1C16DFC
	0x033F5FD0 ADRP X20, 0xFE3000
	0x033F5FD4 LDRB W8, [X20 + 0xF1D]
	0x033F5FD8 CBNZ W8, 0x33F5FF0
	0x033F5FDC ADRP X0, 0xCFF000
	0x033F5FE0 LDR X0, [X0 + 0x7B8]
	0x033F5FE4 BL 0x1C16CF4
	0x033F5FE8 MOVZ W8, 0x1
	0x033F5FEC STRB W8, [X20 + 0xF1D]
	0x033F5FF0 LDR X0, [X19]
	0x033F5FF4 LDR W8, [X0 + 0xE0]
	0x033F5FF8 CBNZ W8, 0x33F6004
	0x033F5FFC BL 0x1C16DFC
	0x033F6000 LDR X0, [X19]
	0x033F6004 LDR X8, [X0 + 0xB8]
	0x033F6008 LDR X20, [X8 + 0x30]
	0x033F600C MOV X0, X20
	0x033F6010 LDP X20, X19, [X31 + 0x10]
	0x033F6014 LDR X30, [X31], #0x20
	0x033F6018 RET
	0x033F601C BL 0x1C16F20
	0x033F6020 STP X30, X23, [X31 - 0x30]!
	0x033F6024 STP X22, X21, [X31 + 0x10]
	0x033F6028 STP X20, X19, [X31 + 0x20]
	0x033F602C ADRP X22, 0xFE7000
	0x033F6030 ADRP X23, 0xD37000
	0x033F6034 ADRP X21, 0xD25000
	0x033F6038 LDRB W8, [X22 + 0x48A]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xFE9000
	007 Move [X31+8], X0
	008 Move X21, 0xD01000
	009 Move W8, [X20+1146]
	010 Move X21, [X21+1392]
	011 Move X19, X1
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xD00000
	017 Move X0, [X0+1976]
	018 Call 0x1C17CF4
	019 Move X0, 0xD01000
	020 Move X0, [X0+1392]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+1146], W8
	024 Move X0, [X21]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Add X0, X31, 8
	030 Move X1, X31
	031 Call TimeSpan.get_TotalMilliseconds, X0
	032 Move X9, 0x7FF00000
	033 Move D1, X9
	034 NotImplemented "Instruction FCVTZS not yet implemented."
	035 Move X10, 0x80000000
	036 NotImplemented "Instruction FCMP not yet implemented."
	037 NotImplemented "Instruction CSEL not yet implemented."
	038 Add X8, X20, 1
	039 Or W9, W31, 0x80000001
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X8, 0xD00000
	042 Move X8, [X8+1976]
	043 Move X0, [X8]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move W0, W20
	049 Move X1, X19
	050 Call Task.Delay, X0, X1
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X30, [X31+16]
	054 Move X21, [X31+24]
	055 Add X31, X31, 48
	056 Return X0
	057 Move X0, 0xD07000
	058 Move X0, [X0+1888]
	059 Call 0x1C17D08
	060 Call 0x1C17F10
	061 Move X19, X0
	062 Move X0, 0xD39000
	063 Move X0, [X0+40]
	064 Call 0x1C17D08
	065 Move X20, X0
	066 Move X0, 0xD38000
	067 Move X0, [X0+2232]
	068 Call 0x1C17D08
	069 Move X2, X0
	070 Move X0, X19
	071 Move X1, X20
	072 Move X3, X31
	073 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	074 Move X0, 0xD38000
	075 Move X0, [X0+2240]
	076 Call 0x1C17D08
	077 Move X1, X0
	078 Move X0, X19
	079 Call 0x1C17DEC

Method: System.Threading.Tasks.Task Delay(System.Int32 millisecondsDelay)

Disassembly:
	0x033F63C4 MOV X0, X19
	0x033F63C8 MOV W2, W31
	0x033F63CC BL 0x1C5C788
	0x033F63D0 B 0x33F63E0
	0x033F63D4 LDRSW X9, [X10]
	0x033F63D8 ADD X8, X8, X9, 0x4, LSL
	0x033F63DC ADD X0, X8, 0x138
	0x033F63E0 LDP X8, X1, [X0]
	0x033F63E4 MOV X0, X19
	0x033F63E8 BLR X8
	0x033F63EC CMP W0, 0x1
	0x033F63F0 B.LT 0x33F64E0
	0x033F63F4 ADRP X24, 0xD37000
	0x033F63F8 LDR X24, [X24 + 0x950]
	0x033F63FC MOV W21, W0
	0x033F6400 MOV W25, W31
	0x033F6404 MOV W22, W31
	0x033F6408 LDR X8, [X19]
	0x033F640C LDR X1, [X24]
	0x033F6410 LDRH W9, [X8 + 0x12E]
	0x033F6414 CBZ X9, 0x33F6438
	0x033F6418 LDR X10, [X8 + 0xB0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xFE8000
	006 Move X21, 0xCFF000
	007 Move W8, [X20+1147]
	008 Move X21, [X21+1976]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xCFF000
	015 Move X0, [X0+1976]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1147], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move W0, W19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call Task.Delay, X0, X1
	031 Return X0

Method: System.Threading.Tasks.Task Delay(System.Int32 millisecondsDelay, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x033F603C LDR X23, [X23 + 0x648]
	0x033F6040 LDR X21, [X21 + 0x728]
	0x033F6044 MOV X19, X1
	0x033F6048 MOV X20, X0
	0x033F604C TBNZ X8, 0x0, 0x33F607C
	0x033F6050 ADRP X0, 0xD25000
	0x033F6054 LDR X0, [X0 + 0x728]
	0x033F6058 BL 0x1C16CF4
	0x033F605C ADRP X0, 0xD37000
	0x033F6060 LDR X0, [X0 + 0x648]
	0x033F6064 BL 0x1C16CF4
	0x033F6068 ADRP X0, 0xD37000
	0x033F606C LDR X0, [X0 + 0x930]
	0x033F6070 BL 0x1C16CF4
	0x033F6074 MOVZ W8, 0x1
	0x033F6078 STRB W8, [X22 + 0x48A]
	0x033F607C LDR X1, [X23]
	0x033F6080 MOV X0, X20
	0x033F6084 BL 0x26A3D50
	0x033F6088 LDR X0, [X21]
	0x033F608C LDR W8, [X0 + 0xE0]
	0x033F6090 CBNZ W8, 0x33F60A8
	0x033F6094 BL 0x1C16DFC
	0x033F6098 LDR X0, [X21]
	0x033F609C LDR W8, [X0 + 0xE0]
	0x033F60A0 CBNZ W8, 0x33F60A8
	0x033F60A4 BL 0x1C16DFC
	0x033F60A8 ADRP X22, 0xFE3000
	0x033F60AC LDRB W8, [X22 + 0x828]
	0x033F60B0 CBNZ W8, 0x33F60D4
	0x033F60B4 ADRP X0, 0xD25000
	0x033F60B8 LDR X0, [X0 + 0x728]
	0x033F60BC BL 0x1C16CF4
	0x033F60C0 ADRP X0, 0xCFE000
	0x033F60C4 LDR X0, [X0 + 0x7B8]
	0x033F60C8 BL 0x1C16CF4
	0x033F60CC MOVZ W8, 0x1
	0x033F60D0 STRB W8, [X22 + 0x828]
	0x033F60D4 ADRP X22, 0xCFE000
	0x033F60D8 LDR X22, [X22 + 0x7B8]
	0x033F60DC LDR X0, [X22]
	0x033F60E0 LDR W8, [X0 + 0xE0]
	0x033F60E4 CBNZ W8, 0x33F60F0
	0x033F60E8 BL 0x1C16DFC
	0x033F60EC LDR X0, [X22]
	0x033F60F0 LDR X8, [X0 + 0xB8]
	0x033F60F4 LDRB W8, [X8 + 0x10]
	0x033F60F8 CBZ W8, 0x33F6114
	0x033F60FC LDR X0, [X21]
	0x033F6100 LDR W8, [X0 + 0xE0]
	0x033F6104 CBNZ W8, 0x33F610C
	0x033F6108 BL 0x1C16DFC
	0x033F610C MOV X0, X20
	0x033F6110 BL 0x33EE67C
	0x033F6114 STR X19, [X20 + 0x58]
	0x033F6118 CBZ X19, 0x33F6190
	0x033F611C LDR W8, [X19 + 0x18]
	0x033F6120 CMP W8, 0x1
	0x033F6124 STR W8, [X20 + 0x60]
	0x033F6128 B.LT 0x33F617C
	0x033F612C MOV X22, X31
	0x033F6130 ADD X23, X19, 0x20
	0x033F6134 CMP W22, W8
	0x033F6138 B.CS 0x33F618C
	0x033F613C LDR X21, [X23, X22, LSL #3]
	0x033F6140 CBZ X21, 0x33F6190
	0x033F6144 MOV X0, X21
	0x033F6148 BL 0x33ED11C
	0x033F614C TBZ X0, 0x0, 0x33F615C
	0x033F6150 MOV X0, X20
	0x033F6154 BL 0x33F70F0
	0x033F6158 B 0x33F616C
	0x033F615C MOV X0, X21
	0x033F6160 MOV X1, X20
	0x033F6164 MOV W2, W31
	0x033F6168 BL 0x33F3C10
	0x033F616C LDR W8, [X19 + 0x18]
	0x033F6170 ADD X22, X22, 0x1
	0x033F6174 CMP W22, W8
	0x033F6178 B.LT 0x33F6134
	0x033F617C LDP X20, X19, [X31 + 0x20]
	0x033F6180 LDP X22, X21, [X31 + 0x10]
	0x033F6184 LDP X30, X23, [X31], #0x30
	0x033F6188 RET
	0x033F618C BL 0x1C16F28
	0x033F6190 BL 0x1C16F20
	0x033F6194 STP X30, X23, [X31 - 0x30]!
	0x033F6198 STP X22, X21, [X31 + 0x10]
	0x033F619C STP X20, X19, [X31 + 0x20]
	0x033F61A0 ADRP X20, 0xFE7000
	0x033F61A4 LDRB W8, [X20 + 0x480]
	0x033F61A8 MOV X19, X0
	0x033F61AC TBNZ X8, 0x0, 0x33F61C4
	0x033F61B0 ADRP X0, 0xD06000
	0x033F61B4 LDR X0, [X0 + 0xC20]
	0x033F61B8 BL 0x1C16CF4
	0x033F61BC MOVZ W8, 0x1
	0x033F61C0 STRB W8, [X20 + 0x480]
	0x033F61C4 CBZ X19, 0x33F62CC
	0x033F61C8 LDR X20, [X19 + 0x18]
	0x033F61CC CBZ X20, 0x33F6300
	0x033F61D0 ADRP X8, 0xD06000
	0x033F61D4 LDR X8, [X8 + 0xC20]
	0x033F61D8 MOV W1, W20
	0x033F61DC LDR X0, [X8]
	0x033F61E0 BL 0x1C16D6C
	0x033F61E4 CMP W20, 0x1
	0x033F61E8 MOV X21, X0
	0x033F61EC B.LT 0x33F6248
	0x033F61F0 MOV W8, W31
	0x033F61F4 LDR W9, [X19 + 0x18]
	0x033F61F8 CMP W8, W9
	0x033F61FC B.CS 0x33F625C
	0x033F6200 SXTW X23, W8
	0x033F6204 ADD X8, X19, X23, 0x3, LSL
	0x033F6208 LDR X22, [X8 + 0x20]
	0x033F620C CBZ X22, 0x33F6260
	0x033F6210 CBZ X21, 0x33F62BC
	0x033F6214 LDR X8, [X21]
	0x033F6218 MOV X0, X22
	0x033F621C LDR X1, [X8 + 0x40]
	0x033F6220 BL 0x1C16E00
	0x033F6224 CBZ X0, 0x33F62C0
	0x033F6228 LDR W8, [X21 + 0x18]
	0x033F622C CMP W23, W8
	0x033F6230 B.CS 0x33F625C
	0x033F6234 ADD W8, W23, 0x1
	0x033F6238 ADD X9, X21, X23, 0x3, LSL
	0x033F623C CMP W20, W8
	0x033F6240 STR X22, [X9 + 0x20]
	0x033F6244 B.NE 0x33F61F4
	0x033F6248 MOV X0, X21
	0x033F624C LDP X20, X19, [X31 + 0x20]
	0x033F6250 LDP X22, X21, [X31 + 0x10]
	0x033F6254 LDP X30, X23, [X31], #0x30
	0x033F6258 B 0x33F6320
	0x033F625C BL 0x1C16F28
	0x033F6260 ADRP X0, 0xD05000
	0x033F6264 LDR X0, [X0 + 0x578]
	0x033F6268 BL 0x1C16D08
	0x033F626C BL 0x1C16F10
	0x033F6270 MOV X19, X0
	0x033F6274 ADRP X0, 0xD37000
	0x033F6278 LDR X0, [X0 + 0x910]
	0x033F627C BL 0x1C16D08
	0x033F6280 MOV X20, X0
	0x033F6284 ADRP X0, 0xD27000
	0x033F6288 LDR X0, [X0 + 0x618]
	0x033F628C BL 0x1C16D08
	0x033F6290 MOV X2, X0
	0x033F6294 MOV X0, X19
	0x033F6298 MOV X1, X20
	0x033F629C MOV X3, X31
	0x033F62A0 BL 0x330E16C
	0x033F62A4 ADRP X0, 0xD37000
	0x033F62A8 LDR X0, [X0 + 0x938]
	0x033F62AC BL 0x1C16D08
	0x033F62B0 MOV X1, X0
	0x033F62B4 MOV X0, X19
	0x033F62B8 BL 0x1C16DEC
	0x033F62BC BL 0x1C16F20
	0x033F62C0 BL 0x1C16F44
	0x033F62C4 MOV X1, X31
	0x033F62C8 BL 0x1C16DEC
	0x033F62CC ADRP X0, 0xD02000
	0x033F62D0 LDR X0, [X0 + 0x528]
	0x033F62D4 BL 0x1C16D08
	0x033F62D8 BL 0x1C16F10
	0x033F62DC MOV X19, X0
	0x033F62E0 ADRP X0, 0xD27000
	0x033F62E4 LDR X0, [X0 + 0x618]
	0x033F62E8 BL 0x1C16D08
	0x033F62EC MOV X1, X0
	0x033F62F0 MOV X0, X19
	0x033F62F4 MOV X2, X31
	0x033F62F8 BL 0x330E100
	0x033F62FC B 0x33F62A4
	0x033F6300 ADRP X0, 0xD05000
	0x033F6304 LDR X0, [X0 + 0x578]
	0x033F6308 BL 0x1C16D08
	0x033F630C BL 0x1C16F10
	0x033F6310 MOV X19, X0
	0x033F6314 ADRP X0, 0xD37000
	0x033F6318 LDR X0, [X0 + 0x940]
	0x033F631C B 0x33F627C
	0x033F6320 STP X30, X25, [X31 - 0x40]!
	0x033F6324 STP X24, X23, [X31 + 0x10]
	0x033F6328 STP X22, X21, [X31 + 0x20]
	0x033F632C STP X20, X19, [X31 + 0x30]
	0x033F6330 ADRP X20, 0xFE7000
	0x033F6334 ADRP X21, 0xD37000
	0x033F6338 LDRB W8, [X20 + 0x4B4]
	0x033F633C LDR X21, [X21 + 0x948]
	0x033F6340 MOV X19, X0
	0x033F6344 TBNZ X8, 0x0, 0x33F6374
	0x033F6348 ADRP X0, 0xD37000
	0x033F634C LDR X0, [X0 + 0x948]
	0x033F6350 BL 0x1C16CF4
	0x033F6354 ADRP X0, 0xD37000
	0x033F6358 LDR X0, [X0 + 0x900]
	0x033F635C BL 0x1C16CF4
	0x033F6360 ADRP X0, 0xD37000
	0x033F6364 LDR X0, [X0 + 0x950]
	0x033F6368 BL 0x1C16CF4
	0x033F636C MOVZ W8, 0x1
	0x033F6370 STRB W8, [X20 + 0x4B4]
	0x033F6374 LDR X0, [X21]
	0x033F6378 BL 0x1C16F10
	0x033F637C MOV X1, X19
	0x033F6380 MOV X20, X0
	0x033F6384 BL 0x33F9BAC
	0x033F6388 CBZ X19, 0x33F6554
	0x033F638C ADRP X10, 0xD37000
	0x033F6390 LDR X8, [X19]
	0x033F6394 LDR X10, [X10 + 0x900]
	0x033F6398 LDRH W9, [X8 + 0x12E]
	0x033F639C LDR X1, [X10]
	0x033F63A0 CBZ X9, 0x33F63C4
	0x033F63A4 LDR X10, [X8 + 0xB0]
	0x033F63A8 ADD X10, X10, 0x8
	0x033F63AC LDUR X11, [X10 - 0x8]
	0x033F63B0 CMP X11, X1
	0x033F63B4 B.EQ 0x33F63D4
	0x033F63B8 SUBS X9, X9, 0x1
	0x033F63BC ADD X10, X10, 0x10
	0x033F63C0 B.NE 0x33F63AC

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+64], X30
	003 Move [X31+72], X1
	004 Move [X31+80], X24
	005 Move [X31+88], X23
	006 Move [X31+96], X22
	007 Move [X31+104], X21
	008 Move [X31+112], X20
	009 Move [X31+120], X19
	010 Move X20, 0xFE8000
	011 Move W8, [X20+1148]
	012 Move W19, W0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {46}
	017 Move X0, 0xD28000
	018 Move X0, [X0+3656]
	019 Call 0x1C17CF4
	020 Move X0, 0xD06000
	021 Move X0, [X0+2008]
	022 Call 0x1C17CF4
	023 Move X0, 0xD38000
	024 Move X0, [X0+2248]
	025 Call 0x1C17CF4
	026 Move X0, 0xCFF000
	027 Move X0, [X0+1976]
	028 Call 0x1C17CF4
	029 Move X0, 0xD06000
	030 Move X0, [X0+3192]
	031 Call 0x1C17CF4
	032 Move X0, 0xD06000
	033 Move X0, [X0+3200]
	034 Call 0x1C17CF4
	035 Move X0, 0xD38000
	036 Move X0, [X0+2256]
	037 Call 0x1C17CF4
	038 Move X0, 0xD38000
	039 Move X0, [X0+2264]
	040 Call 0x1C17CF4
	041 Move X0, 0xD38000
	042 Move X0, [X0+2272]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X20+1148], W8
	046 Add W31, W19, 2
	047 Move X23, 0xD06000
	048 Move X23, [X23+2008]
	049 Move X0, [X23]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Add X0, X31, 72
	055 Move X1, X31
	056 Call CancellationToken.get_IsCancellationRequested, X0
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {72}
	061 Move X8, 0xCFF000
	062 Move X8, [X8+1976]
	063 Move X19, [X31+72]
	064 Move X0, [X8]
	065 Move W8, [X0+224]
	066 Compare W8, 0
	067 JumpIfNotEqual {69}
	068 Call 0x1C17DFC
	069 Move X0, X19
	070 Call Task.FromCancellation, X0
	071 Move X20, X0
	072 Compare W19, 0
	073 JumpIfEqual {202}
	074 Move X8, 0xD38000
	075 Move X21, [X31+72]
	076 Move X8, [X8+2248]
	077 Move X0, [X8]
	078 Call 0x1C17F10
	079 Move X1, X21
	080 Move X20, X0
	081 Call DelayPromise..ctor, X0, X1
	082 Move X0, [X23]
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {87}
	086 Call 0x1C17DFC
	087 Add X0, X31, 72
	088 Move X1, X31
	089 Call CancellationToken.get_CanBeCanceled, X0
	090 Move TEMP, X0
	091 And TEMP, TEMP, 1
	092 Compare TEMP, 1
	093 JumpIfNotEqual {148}
	094 Move X24, 0xD38000
	095 Move X24, [X24+2272]
	096 Move X0, [X24]
	097 Move W8, [X0+224]
	098 Compare W8, 0
	099 JumpIfNotEqual {102}
	100 Call 0x1C17DFC
	101 Move X0, [X24]
	102 Move X8, [X0+184]
	103 Move X21, [X8+8]
	104 Compare X21, 0
	105 JumpIfNotEqual {127}
	106 Move W8, [X0+224]
	107 Compare W8, 0
	108 JumpIfNotEqual {111}
	109 Call 0x1C17DFC
	110 Move X0, [X24]
	111 Move X9, 0xD28000
	112 Move X8, [X0+184]
	113 Move X9, [X9+3656]
	114 Move X22, [X8]
	115 Move X0, [X9]
	116 Call 0x1C17F10
	117 Move X8, 0xD38000
	118 Move X8, [X8+2256]
	119 Move X1, X22
	120 Move X3, X31
	121 Move X21, X0
	122 Move X2, [X8]
	123 Call Action`1<Object>..ctor, X0, X1, X2
	124 Move X8, [X24]
	125 Move X8, [X8+184]
	126 Move [X8+8], X21
	127 Move X0, [X23]
	128 Move W8, [X0+224]
	129 Compare W8, 0
	130 JumpIfNotEqual {132}
	131 Call 0x1C17DFC
	132 Add X8, X31, 8
	133 Add X0, X31, 72
	134 Move X1, X21
	135 Move X2, X20
	136 Move X3, X31
	137 Call CancellationToken.InternalRegisterWithoutEC, X0, X1, X2
	138 NotImplemented "Instruction LDUR not yet implemented."
	139 Move X8, [X31+24]
	140 Move [X31+2], V0
	141 Move [X31+48], X8
	142 Compare X20, 0
	143 JumpIfEqual {201}
	144 Move X8, [X31+48]
	145 Move V0, [X31+2]
	146 Move [X20+112], X8
	147 Move [X20+6], V0
	148 Add W31, W19, 1
	149 Move X23, 0xD38000
	150 Move X23, [X23+2272]
	151 Move X0, [X23]
	152 Move W8, [X0+224]
	153 Compare W8, 0
	154 JumpIfNotEqual {157}
	155 Call 0x1C17DFC
	156 Move X0, [X23]
	157 Move X8, [X0+184]
	158 Move X21, [X8+16]
	159 Compare X21, 0
	160 JumpIfNotEqual {181}
	161 Move W8, [X0+224]
	162 Compare W8, 0
	163 JumpIfNotEqual {166}
	164 Call 0x1C17DFC
	165 Move X0, [X23]
	166 Move X9, 0xD06000
	167 Move X8, [X0+184]
	168 Move X9, [X9+3192]
	169 Move X22, [X8]
	170 Move X0, [X9]
	171 Call 0x1C17F10
	172 Move X8, 0xD38000
	173 Move X8, [X8+2264]
	174 Move X1, X22
	175 Move X21, X0
	176 Move X2, [X8]
	177 Call TimerCallback..ctor, X0, X1, X2
	178 Move X8, [X23]
	179 Move X8, [X8+184]
	180 Move [X8+16], X21
	181 Move X8, 0xD06000
	182 Move X8, [X8+3200]
	183 Move X0, [X8]
	184 Call 0x1C17F10
	185 Move X1, X31
	186 Move X22, X0
	187 Call MarshalByRefObject..ctor, X0
	188 Move W3, W19
	189 Move TEMP, 0
	190 Not TEMP
	191 Move X4, TEMP
	192 Move X0, X22
	193 Move X1, X21
	194 Move X2, X20
	195 Call Timer.Init, X0, X1, X2, X3, X4
	196 Compare X20, 0
	197 JumpIfEqual {201}
	198 Move [X20+120], X22
	199 Compare X22, 0
	200 JumpIfNotEqual {226}
	201 Call 0x1C17F20
	202 Move X19, 0xCFF000
	203 Move X19, [X19+1976]
	204 Move X0, [X19]
	205 Move W8, [X0+224]
	206 Compare W8, 0
	207 JumpIfNotEqual {209}
	208 Call 0x1C17DFC
	209 Move X20, 0xFE3000
	210 Move W8, [X20+3869]
	211 Compare W8, 0
	212 JumpIfNotEqual {218}
	213 Move X0, 0xCFF000
	214 Move X0, [X0+1976]
	215 Call 0x1C17CF4
	216 Move W8, 1
	217 Move [X20+3869], W8
	218 Move X0, [X19]
	219 Move W8, [X0+224]
	220 Compare W8, 0
	221 JumpIfNotEqual {224}
	222 Call 0x1C17DFC
	223 Move X0, [X19]
	224 Move X8, [X0+184]
	225 Move X20, [X8+48]
	226 Move X0, X20
	227 Move X20, [X31+112]
	228 Move X19, [X31+120]
	229 Move X22, [X31+96]
	230 Move X21, [X31+104]
	231 Move X24, [X31+80]
	232 Move X23, [X31+88]
	233 Move X30, [X31+64]
	234 Add X31, X31, 128
	235 Return X0
	236 Move X0, 0xD06000
	237 Move X0, [X0+1888]
	238 Call 0x1C17D08
	239 Call 0x1C17F10
	240 Move X19, X0
	241 Move X0, 0xD38000
	242 Move X0, [X0+56]
	243 Call 0x1C17D08
	244 Move X20, X0
	245 Move X0, 0xD38000
	246 Move X0, [X0+2280]
	247 Call 0x1C17D08
	248 Move X2, X0
	249 Move X0, X19
	250 Move X1, X20
	251 Move X3, X31
	252 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	253 Move X0, 0xD38000
	254 Move X0, [X0+2288]
	255 Call 0x1C17D08
	256 Move X1, X0
	257 Move X0, X19
	258 Call 0x1C17DEC

Method: System.Threading.Tasks.Task WhenAll(System.Collections.Generic.IEnumerable`1<System.Threading.Tasks.Task> tasks)

Disassembly:
	0x033F6530 MOV X1, X20
	0x033F6534 MOV X3, X31
	0x033F6538 BL 0x330E16C
	0x033F653C ADRP X0, 0xD37000
	0x033F6540 LDR X0, [X0 + 0x958]
	0x033F6544 BL 0x1C16D08
	0x033F6548 MOV X1, X0
	0x033F654C MOV X0, X19
	0x033F6550 BL 0x1C16DEC
	0x033F6554 BL 0x1C16F20
	0x033F6558 STR X30, [X31 - 0x40]!
	0x033F655C STP X24, X23, [X31 + 0x10]
	0x033F6560 STP X22, X21, [X31 + 0x20]
	0x033F6564 STP X20, X19, [X31 + 0x30]
	0x033F6568 ADRP X19, 0xFE7000
	0x033F656C LDRB W8, [X19 + 0x481]
	0x033F6570 MOV X20, X0
	0x033F6574 TBNZ X8, 0x0, 0x33F65E0
	0x033F6578 ADRP X0, 0xCFD000
	0x033F657C LDR X0, [X0 + 0xE00]
	0x033F6580 BL 0x1C16CF4
	0x033F6584 ADRP X0, 0xD37000
	0x033F6588 LDR X0, [X0 + 0x798]
	0x033F658C BL 0x1C16CF4
	0x033F6590 ADRP X0, 0xD37000
	0x033F6594 LDR X0, [X0 + 0x7A0]
	0x033F6598 BL 0x1C16CF4
	0x033F659C ADRP X0, 0xCFD000
	0x033F65A0 LDR X0, [X0 + 0xE18]
	0x033F65A4 BL 0x1C16CF4
	0x033F65A8 ADRP X0, 0xD37000
	0x033F65AC LDR X0, [X0 + 0x7A8]
	0x033F65B0 BL 0x1C16CF4
	0x033F65B4 ADRP X0, 0xD37000
	0x033F65B8 LDR X0, [X0 + 0x7B0]
	0x033F65BC BL 0x1C16CF4
	0x033F65C0 ADRP X0, 0xD37000
	0x033F65C4 LDR X0, [X0 + 0x7B8]
	0x033F65C8 BL 0x1C16CF4
	0x033F65CC ADRP X0, 0xD37000
	0x033F65D0 LDR X0, [X0 + 0x960]
	0x033F65D4 BL 0x1C16CF4
	0x033F65D8 MOVZ W8, 0x1
	0x033F65DC STRB W8, [X19 + 0x481]
	0x033F65E0 CBZ X20, 0x33F6870
	0x033F65E4 ADRP X8, 0xD37000
	0x033F65E8 LDR X8, [X8 + 0x7B0]
	0x033F65EC ADRP X19, 0xD37000
	0x033F65F0 ADRP X21, 0xD37000
	0x033F65F4 LDR X0, [X8]
	0x033F65F8 LDR X19, [X19 + 0x7A8]
	0x033F65FC LDR X21, [X21 + 0x798]
	0x033F6600 BL 0x1C16F10
	0x033F6604 LDR X1, [X19]
	0x033F6608 MOV X19, X0
	0x033F660C BL 0x319AF58
	0x033F6610 LDR X8, [X20]
	0x033F6614 LDR X1, [X21]
	0x033F6618 LDRH W9, [X8 + 0x12E]
	0x033F661C CBZ X9, 0x33F6640
	0x033F6620 LDR X10, [X8 + 0xB0]
	0x033F6624 ADD X10, X10, 0x8
	0x033F6628 LDUR X11, [X10 - 0x8]
	0x033F662C CMP X11, X1
	0x033F6630 B.EQ 0x33F6650
	0x033F6634 SUBS X9, X9, 0x1
	0x033F6638 ADD X10, X10, 0x10
	0x033F663C B.NE 0x33F6628
	0x033F6640 MOV X0, X20
	0x033F6644 MOV W2, W31
	0x033F6648 BL 0x1C5C788
	0x033F664C B 0x33F665C
	0x033F6650 LDRSW X9, [X10]
	0x033F6654 ADD X8, X8, X9, 0x4, LSL
	0x033F6658 ADD X0, X8, 0x138
	0x033F665C LDP X8, X1, [X0]
	0x033F6660 ADRP X22, 0xCFD000
	0x033F6664 LDR X22, [X22 + 0xE00]
	0x033F6668 MOV X0, X20
	0x033F666C BLR X8
	0x033F6670 MOV X20, X0
	0x033F6674 CBZ X0, 0x33F68A4
	0x033F6678 ADRP X21, 0xCFD000
	0x033F667C ADRP X23, 0xD37000
	0x033F6680 ADRP X24, 0xD37000
	0x033F6684 LDR X21, [X21 + 0xE18]
	0x033F6688 LDR X23, [X23 + 0x7A0]
	0x033F668C LDR X24, [X24 + 0x7B8]
	0x033F6690 LDR X8, [X20]
	0x033F6694 LDR X1, [X21]
	0x033F6698 LDRH W9, [X8 + 0x12E]
	0x033F669C CBZ X9, 0x33F66C0
	0x033F66A0 LDR X10, [X8 + 0xB0]
	0x033F66A4 ADD X10, X10, 0x8
	0x033F66A8 LDUR X11, [X10 - 0x8]
	0x033F66AC CMP X11, X1
	0x033F66B0 B.EQ 0x33F66D0
	0x033F66B4 SUBS X9, X9, 0x1
	0x033F66B8 ADD X10, X10, 0x10
	0x033F66BC B.NE 0x33F66A8
	0x033F66C0 MOV X0, X20
	0x033F66C4 MOV W2, W31
	0x033F66C8 BL 0x1C5C788
	0x033F66CC B 0x33F66DC
	0x033F66D0 LDRSW X9, [X10]
	0x033F66D4 ADD X8, X8, X9, 0x4, LSL
	0x033F66D8 ADD X0, X8, 0x138
	0x033F66DC LDP X8, X1, [X0]
	0x033F66E0 MOV X0, X20
	0x033F66E4 BLR X8
	0x033F66E8 TBZ X0, 0x0, 0x33F6760
	0x033F66EC LDR X8, [X20]
	0x033F66F0 LDR X1, [X23]
	0x033F66F4 LDRH W9, [X8 + 0x12E]
	0x033F66F8 CBZ X9, 0x33F671C
	0x033F66FC LDR X10, [X8 + 0xB0]
	0x033F6700 ADD X10, X10, 0x8
	0x033F6704 LDUR X11, [X10 - 0x8]
	0x033F6708 CMP X11, X1
	0x033F670C B.EQ 0x33F672C
	0x033F6710 SUBS X9, X9, 0x1
	0x033F6714 ADD X10, X10, 0x10
	0x033F6718 B.NE 0x33F6704
	0x033F671C MOV X0, X20
	0x033F6720 MOV W2, W31
	0x033F6724 BL 0x1C5C788
	0x033F6728 B 0x33F6738
	0x033F672C LDRSW X9, [X10]
	0x033F6730 ADD X8, X8, X9, 0x4, LSL
	0x033F6734 ADD X0, X8, 0x138
	0x033F6738 LDP X8, X1, [X0]
	0x033F673C MOV X0, X20
	0x033F6740 BLR X8
	0x033F6744 MOV X1, X0
	0x033F6748 CBZ X1, 0x33F680C
	0x033F674C CBZ X19, 0x33F686C
	0x033F6750 LDR X2, [X24]
	0x033F6754 MOV X0, X19
	0x033F6758 BL 0x319B66C
	0x033F675C B 0x33F6690
	0x033F6760 MOV X21, X31
	0x033F6764 MOVZ W23, 0xA
	0x033F6768 CBZ X20, 0x33F67C4
	0x033F676C LDR X8, [X20]
	0x033F6770 LDR X1, [X22]
	0x033F6774 LDRH W9, [X8 + 0x12E]
	0x033F6778 CBZ X9, 0x33F679C
	0x033F677C LDR X10, [X8 + 0xB0]
	0x033F6780 ADD X10, X10, 0x8
	0x033F6784 LDUR X11, [X10 - 0x8]
	0x033F6788 CMP X11, X1
	0x033F678C B.EQ 0x33F67AC
	0x033F6790 SUBS X9, X9, 0x1
	0x033F6794 ADD X10, X10, 0x10
	0x033F6798 B.NE 0x33F6784
	0x033F679C MOV X0, X20
	0x033F67A0 MOV W2, W31
	0x033F67A4 BL 0x1C5C788
	0x033F67A8 B 0x33F67B8
	0x033F67AC LDRSW X9, [X10]
	0x033F67B0 ADD X8, X8, X9, 0x4, LSL
	0x033F67B4 ADD X0, X8, 0x138
	0x033F67B8 LDP X8, X1, [X0]
	0x033F67BC MOV X0, X20
	0x033F67C0 BLR X8
	0x033F67C4 CBNZ X21, 0x33F68A8
	0x033F67C8 CMP W23, 0xA
	0x033F67CC B.EQ 0x33F67D4
	0x033F67D0 CBNZ W23, 0x33F67F8
	0x033F67D4 CBZ X19, 0x33F68B0
	0x033F67D8 LDR W8, [X19 + 0x18]
	0x033F67DC CBZ W8, 0x33F68B4
	0x033F67E0 MOV X0, X19
	0x033F67E4 LDP X20, X19, [X31 + 0x30]
	0x033F67E8 LDP X22, X21, [X31 + 0x20]
	0x033F67EC LDP X24, X23, [X31 + 0x10]
	0x033F67F0 LDR X30, [X31], #0x40
	0x033F67F4 B 0x33F6320
	0x033F67F8 LDP X20, X19, [X31 + 0x30]
	0x033F67FC LDP X22, X21, [X31 + 0x20]
	0x033F6800 LDP X24, X23, [X31 + 0x10]
	0x033F6804 LDR X30, [X31], #0x40
	0x033F6808 RET
	0x033F680C ADRP X0, 0xD05000
	0x033F6810 LDR X0, [X0 + 0x578]
	0x033F6814 MOV X23, X22
	0x033F6818 BL 0x1C16D08
	0x033F681C BL 0x1C16F10
	0x033F6820 MOV X21, X0
	0x033F6824 ADRP X0, 0xD37000
	0x033F6828 LDR X0, [X0 + 0x910]
	0x033F682C BL 0x1C16D08
	0x033F6830 MOV X22, X0
	0x033F6834 ADRP X0, 0xD27000
	0x033F6838 LDR X0, [X0 + 0x618]
	0x033F683C BL 0x1C16D08
	0x033F6840 MOV X2, X0
	0x033F6844 MOV X0, X21
	0x033F6848 MOV X1, X22
	0x033F684C MOV X3, X31
	0x033F6850 BL 0x330E16C
	0x033F6854 ADRP X0, 0xD37000
	0x033F6858 LDR X0, [X0 + 0x968]
	0x033F685C BL 0x1C16D08
	0x033F6860 MOV X1, X0
	0x033F6864 MOV X0, X21
	0x033F6868 BL 0x1C16DEC
	0x033F686C BL 0x1C16F20
	0x033F6870 ADRP X0, 0xD02000
	0x033F6874 LDR X0, [X0 + 0x528]
	0x033F6878 BL 0x1C16D08
	0x033F687C BL 0x1C16F10
	0x033F6880 MOV X19, X0
	0x033F6884 ADRP X0, 0xD27000
	0x033F6888 LDR X0, [X0 + 0x618]
	0x033F688C BL 0x1C16D08
	0x033F6890 MOV X1, X0
	0x033F6894 MOV X0, X19
	0x033F6898 MOV X2, X31
	0x033F689C BL 0x330E100
	0x033F68A0 B 0x33F68F8
	0x033F68A4 BL 0x1C16F20
	0x033F68A8 MOV X0, X21
	0x033F68AC BL 0x1C16F18
	0x033F68B0 BL 0x1C16F20
	0x033F68B4 ADRP X0, 0xD05000
	0x033F68B8 LDR X0, [X0 + 0x578]
	0x033F68BC BL 0x1C16D08
	0x033F68C0 BL 0x1C16F10
	0x033F68C4 MOV X19, X0
	0x033F68C8 ADRP X0, 0xD37000
	0x033F68CC LDR X0, [X0 + 0x940]
	0x033F68D0 BL 0x1C16D08
	0x033F68D4 MOV X20, X0
	0x033F68D8 ADRP X0, 0xD27000
	0x033F68DC LDR X0, [X0 + 0x618]
	0x033F68E0 BL 0x1C16D08
	0x033F68E4 MOV X2, X0
	0x033F68E8 MOV X0, X19
	0x033F68EC MOV X1, X20
	0x033F68F0 MOV X3, X31
	0x033F68F4 BL 0x330E16C
	0x033F68F8 ADRP X0, 0xD37000
	0x033F68FC LDR X0, [X0 + 0x968]
	0x033F6900 BL 0x1C16D08
	0x033F6904 MOV X1, X0
	0x033F6908 MOV X0, X19
	0x033F690C BL 0x1C16DEC
	0x033F6910 B 0x33F6928
	0x033F6914 B 0x33F6928
	0x033F6918 MOV X22, X23
	0x033F691C B 0x33F6928
	0x033F6920 B 0x33F6928
	0x033F6924 B 0x33F6928
	0x033F6928 CMP W1, 0x1
	0x033F692C B.NE 0x33F6948
	0x033F6930 BL 0x3EB1AD0
	0x033F6934 LDR X21, [X0]
	0x033F6938 BL 0x3EB1AE0
	0x033F693C MOV W23, W31
	0x033F6940 CBNZ X20, 0x33F676C
	0x033F6944 B 0x33F67C4
	0x033F6948 MOV X19, X0
	0x033F694C MOV X21, X31
	0x033F6950 B 0x33F6958
	0x033F6954 MOV X19, X0
	0x033F6958 CBZ X20, 0x33F69B4
	0x033F695C LDR X8, [X20]
	0x033F6960 LDR X1, [X22]
	0x033F6964 LDRH W9, [X8 + 0x12E]
	0x033F6968 CBZ X9, 0x33F698C
	0x033F696C LDR X10, [X8 + 0xB0]
	0x033F6970 ADD X10, X10, 0x8
	0x033F6974 LDUR X11, [X10 - 0x8]
	0x033F6978 CMP X11, X1
	0x033F697C B.EQ 0x33F699C
	0x033F6980 SUBS X9, X9, 0x1
	0x033F6984 ADD X10, X10, 0x10
	0x033F6988 B.NE 0x33F6974
	0x033F698C MOV X0, X20
	0x033F6990 MOV W2, W31
	0x033F6994 BL 0x1C5C788
	0x033F6998 B 0x33F69A8
	0x033F699C LDRSW X9, [X10]
	0x033F69A0 ADD X8, X8, X9, 0x4, LSL
	0x033F69A4 ADD X0, X8, 0x138
	0x033F69A8 LDP X8, X1, [X0]
	0x033F69AC MOV X0, X20
	0x033F69B0 BLR X8
	0x033F69B4 CBNZ X21, 0x33F69C0
	0x033F69B8 MOV X0, X19
	0x033F69BC BL 0x1D2C690
	0x033F69C0 MOV X0, X21
	0x033F69C4 BL 0x1C16F18
	0x033F69C8 BL 0x1990590
	0x033F69CC SUB X31, X31, 0x30
	0x033F69D0 STP X30, X21, [X31 + 0x10]
	0x033F69D4 STP X20, X19, [X31 + 0x20]
	0x033F69D8 ADRP X19, 0xFE7000
	0x033F69DC ADRP X21, 0xCFE000
	0x033F69E0 LDRB W8, [X19 + 0x482]
	0x033F69E4 LDR X21, [X21 + 0x7B8]
	0x033F69E8 MOV X20, X0
	0x033F69EC TBNZ X8, 0x0, 0x33F6A10
	0x033F69F0 ADRP X0, 0xD37000
	0x033F69F4 LDR X0, [X0 + 0x970]
	0x033F69F8 BL 0x1C16CF4
	0x033F69FC ADRP X0, 0xCFE000
	0x033F6A00 LDR X0, [X0 + 0x7B8]
	0x033F6A04 BL 0x1C16CF4
	0x033F6A08 MOVZ W8, 0x1
	0x033F6A0C STRB W8, [X19 + 0x482]
	0x033F6A10 LDR X0, [X21]
	0x033F6A14 LDR W8, [X0 + 0xE0]
	0x033F6A18 CBNZ W8, 0x33F6A24
	0x033F6A1C BL 0x1C16DFC
	0x033F6A20 LDR X0, [X21]
	0x033F6A24 LDR X8, [X0 + 0xB8]
	0x033F6A28 LDR X19, [X8 + 0x58]
	0x033F6A2C STRB W31, [X31 + 0xC]
	0x033F6A30 ADD X1, X31, 0xC
	0x033F6A34 MOV X0, X19
	0x033F6A38 MOV X2, X31
	0x033F6A3C BL 0x33DE64C
	0x033F6A40 LDR X0, [X21]
	0x033F6A44 LDR W8, [X0 + 0xE0]
	0x033F6A48 CBNZ W8, 0x33F6A54
	0x033F6A4C BL 0x1C16DFC
	0x033F6A50 LDR X0, [X21]
	0x033F6A54 CBZ X20, 0x33F6AC0
	0x033F6A58 LDR X8, [X0 + 0xB8]
	0x033F6A5C LDR X21, [X8 + 0x50]
	0x033F6A60 MOV X0, X20
	0x033F6A64 BL 0x33EE7D4
	0x033F6A68 MOV W1, W0
	0x033F6A6C CBZ X21, 0x33F6AC4
	0x033F6A70 ADRP X8, 0xD37000
	0x033F6A74 LDR X8, [X8 + 0x970]
	0x033F6A78 LDR X3, [X8]
	0x033F6A7C MOV X0, X21
	0x033F6A80 MOV X2, X20
	0x033F6A84 BL 0x2A13678
	0x033F6A88 MOV X20, X31
	0x033F6A8C LDRB W8, [X31 + 0xC]
	0x033F6A90 CBZ W8, 0x33F6AA0
	0x033F6A94 MOV X0, X19
	0x033F6A98 MOV X1, X31
	0x033F6A9C BL 0x33E14E4
	0x033F6AA0 CBNZ X20, 0x33F6AB8
	0x033F6AA4 LDP X20, X19, [X31 + 0x20]
	0x033F6AA8 LDP X30, X21, [X31 + 0x10]
	0x033F6AAC MOVZ W0, 0x1
	0x033F6AB0 ADD X31, X31, 0x30
	0x033F6AB4 RET
	0x033F6AB8 MOV X0, X20
	0x033F6ABC BL 0x1C16F18
	0x033F6AC0 BL 0x1C16F20
	0x033F6AC4 BL 0x1C16F20
	0x033F6AC8 B 0x33F6AD4
	0x033F6ACC B 0x33F6AD4
	0x033F6AD0 B 0x33F6AD4
	0x033F6AD4 MOV X21, X0
	0x033F6AD8 CMP W1, 0x1
	0x033F6ADC B.NE 0x33F6AF4
	0x033F6AE0 MOV X0, X21
	0x033F6AE4 BL 0x3EB1AD0
	0x033F6AE8 LDR X20, [X0]
	0x033F6AEC BL 0x3EB1AE0
	0x033F6AF0 B 0x33F6A8C
	0x033F6AF4 MOV X20, X31
	0x033F6AF8 B 0x33F6B00
	0x033F6AFC MOV X21, X0
	0x033F6B00 LDRB W8, [X31 + 0xC]
	0x033F6B04 CBZ W8, 0x33F6B14
	0x033F6B08 MOV X0, X19
	0x033F6B0C MOV X1, X31
	0x033F6B10 BL 0x33E14E4
	0x033F6B14 CBNZ X20, 0x33F6B20
	0x033F6B18 MOV X0, X21
	0x033F6B1C BL 0x1D2C690
	0x033F6B20 MOV X0, X20
	0x033F6B24 BL 0x1C16F18
	0x033F6B28 BL 0x1990590
	0x033F6B2C SUB X31, X31, 0x30
	0x033F6B30 STP X30, X21, [X31 + 0x10]
	0x033F6B34 STP X20, X19, [X31 + 0x20]
	0x033F6B38 ADRP X19, 0xFE7000
	0x033F6B3C ADRP X21, 0xCFE000
	0x033F6B40 LDRB W8, [X19 + 0x483]
	0x033F6B44 LDR X21, [X21 + 0x7B8]
	0x033F6B48 MOV W20, W0
	0x033F6B4C TBNZ X8, 0x0, 0x33F6B70
	0x033F6B50 ADRP X0, 0xD37000
	0x033F6B54 LDR X0, [X0 + 0x978]
	0x033F6B58 BL 0x1C16CF4
	0x033F6B5C ADRP X0, 0xCFE000
	0x033F6B60 LDR X0, [X0 + 0x7B8]
	0x033F6B64 BL 0x1C16CF4
	0x033F6B68 MOVZ W8, 0x1
	0x033F6B6C STRB W8, [X19 + 0x483]
	0x033F6B70 LDR X0, [X21]
	0x033F6B74 LDR W8, [X0 + 0xE0]
	0x033F6B78 CBNZ W8, 0x33F6B84
	0x033F6B7C BL 0x1C16DFC
	0x033F6B80 LDR X0, [X21]
	0x033F6B84 LDR X8, [X0 + 0xB8]
	0x033F6B88 LDR X19, [X8 + 0x58]
	0x033F6B8C STRB W31, [X31 + 0xC]
	0x033F6B90 ADD X1, X31, 0xC
	0x033F6B94 MOV X0, X19
	0x033F6B98 MOV X2, X31
	0x033F6B9C BL 0x33DE64C
	0x033F6BA0 LDR X0, [X21]
	0x033F6BA4 LDR W8, [X0 + 0xE0]
	0x033F6BA8 CBNZ W8, 0x33F6BB4
	0x033F6BAC BL 0x1C16DFC
	0x033F6BB0 LDR X0, [X21]
	0x033F6BB4 LDR X8, [X0 + 0xB8]
	0x033F6BB8 LDR X0, [X8 + 0x50]
	0x033F6BBC CBZ X0, 0x33F6C08
	0x033F6BC0 ADRP X8, 0xD37000
	0x033F6BC4 LDR X8, [X8 + 0x978]
	0x033F6BC8 LDR X2, [X8]
	0x033F6BCC MOV W1, W20
	0x033F6BD0 BL 0x2A14A88
	0x033F6BD4 MOV X20, X31
	0x033F6BD8 LDRB W8, [X31 + 0xC]
	0x033F6BDC CBZ W8, 0x33F6BEC
	0x033F6BE0 MOV X0, X19
	0x033F6BE4 MOV X1, X31
	0x033F6BE8 BL 0x33E14E4
	0x033F6BEC CBNZ X20, 0x33F6C00
	0x033F6BF0 LDP X20, X19, [X31 + 0x20]
	0x033F6BF4 LDP X30, X21, [X31 + 0x10]
	0x033F6BF8 ADD X31, X31, 0x30
	0x033F6BFC RET
	0x033F6C00 MOV X0, X20
	0x033F6C04 BL 0x1C16F18
	0x033F6C08 BL 0x1C16F20
	0x033F6C0C B 0x33F6C14
	0x033F6C10 B 0x33F6C14
	0x033F6C14 MOV X21, X0
	0x033F6C18 CMP W1, 0x1
	0x033F6C1C B.NE 0x33F6C34
	0x033F6C20 MOV X0, X21
	0x033F6C24 BL 0x3EB1AD0
	0x033F6C28 LDR X20, [X0]
	0x033F6C2C BL 0x3EB1AE0
	0x033F6C30 B 0x33F6BD8
	0x033F6C34 MOV X20, X31
	0x033F6C38 B 0x33F6C40
	0x033F6C3C MOV X21, X0
	0x033F6C40 LDRB W8, [X31 + 0xC]
	0x033F6C44 CBZ W8, 0x33F6C54
	0x033F6C48 MOV X0, X19
	0x033F6C4C MOV X1, X31
	0x033F6C50 BL 0x33E14E4
	0x033F6C54 CBNZ X20, 0x33F6C60
	0x033F6C58 MOV X0, X21
	0x033F6C5C BL 0x1D2C690
	0x033F6C60 MOV X0, X20
	0x033F6C64 BL 0x1C16F18
	0x033F6C68 BL 0x1990590
	0x033F6C6C RET
	0x033F6C70 MOV W0, W31
	0x033F6C74 RET
	0x033F6C78 RET
	0x033F6C7C STP X29, X30, [X31 - 0x60]!
	0x033F6C80 STP X28, X27, [X31 + 0x10]
	0x033F6C84 STP X26, X25, [X31 + 0x20]
	0x033F6C88 STP X24, X23, [X31 + 0x30]
	0x033F6C8C STP X22, X21, [X31 + 0x40]
	0x033F6C90 STP X20, X19, [X31 + 0x50]
	0x033F6C94 ADRP X19, 0xFE7000
	0x033F6C98 ADRP X9, 0xD03000
	0x033F6C9C ADRP X21, 0xCFE000
	0x033F6CA0 ADRP X22, 0xD27000
	0x033F6CA4 ADRP X20, 0xD37000
	0x033F6CA8 ADRP X23, 0xD37000
	0x033F6CAC LDRB W8, [X19 + 0x485]
	0x033F6CB0 LDR X9, [X9 + 0xCC0]
	0x033F6CB4 LDR X21, [X21 + 0x7B8]
	0x033F6CB8 LDR X22, [X22 + 0xE48]
	0x033F6CBC LDR X20, [X20 + 0x980]
	0x033F6CC0 LDR X23, [X23 + 0x8E0]
	0x033F6CC4 TBNZ X8, 0x0, 0x33F6D80
	0x033F6CC8 ADRP X0, 0xD27000
	0x033F6CCC LDR X0, [X0 + 0xE48]
	0x033F6CD0 MOV X24, X9
	0x033F6CD4 BL 0x1C16CF4
	0x033F6CD8 ADRP X0, 0xD37000
	0x033F6CDC LDR X0, [X0 + 0x988]
	0x033F6CE0 BL 0x1C16CF4
	0x033F6CE4 ADRP X0, 0xD37000
	0x033F6CE8 LDR X0, [X0 + 0x990]
	0x033F6CEC BL 0x1C16CF4
	0x033F6CF0 ADRP X0, 0xD37000
	0x033F6CF4 LDR X0, [X0 + 0x998]
	0x033F6CF8 BL 0x1C16CF4
	0x033F6CFC ADRP X0, 0xD37000
	0x033F6D00 LDR X0, [X0 + 0x9A0]
	0x033F6D04 BL 0x1C16CF4
	0x033F6D08 ADRP X0, 0xD37000
	0x033F6D0C LDR X0, [X0 + 0x9A8]
	0x033F6D10 BL 0x1C16CF4
	0x033F6D14 ADRP X0, 0xD03000
	0x033F6D18 LDR X0, [X0 + 0xCC0]
	0x033F6D1C BL 0x1C16CF4
	0x033F6D20 ADRP X0, 0xD05000
	0x033F6D24 LDR X0, [X0 + 0x7E0]
	0x033F6D28 BL 0x1C16CF4
	0x033F6D2C ADRP X0, 0xD37000
	0x033F6D30 LDR X0, [X0 + 0x980]
	0x033F6D34 BL 0x1C16CF4
	0x033F6D38 ADRP X0, 0xCFE000
	0x033F6D3C LDR X0, [X0 + 0x7B8]
	0x033F6D40 BL 0x1C16CF4
	0x033F6D44 ADRP X0, 0xD37000
	0x033F6D48 LDR X0, [X0 + 0x9B0]
	0x033F6D4C BL 0x1C16CF4
	0x033F6D50 ADRP X0, 0xD37000
	0x033F6D54 LDR X0, [X0 + 0x9B8]
	0x033F6D58 BL 0x1C16CF4
	0x033F6D5C ADRP X0, 0xD37000
	0x033F6D60 LDR X0, [X0 + 0x9C0]
	0x033F6D64 BL 0x1C16CF4
	0x033F6D68 ADRP X0, 0xD37000
	0x033F6D6C LDR X0, [X0 + 0x8E0]
	0x033F6D70 BL 0x1C16CF4
	0x033F6D74 MOV X9, X24
	0x033F6D78 MOVZ W8, 0x1
	0x033F6D7C STRB W8, [X19 + 0x485]
	0x033F6D80 ADRP X26, 0xD37000
	0x033F6D84 ADRP X25, 0xD37000
	0x033F6D88 ADRP X24, 0xD05000
	0x033F6D8C ADRP X29, 0xD37000
	0x033F6D90 ADRP X28, 0xD37000
	0x033F6D94 LDR X26, [X26 + 0x998]
	0x033F6D98 LDR X25, [X25 + 0x9B0]
	0x033F6D9C LDR X24, [X24 + 0x7E0]
	0x033F6DA0 LDR X29, [X29 + 0x9A0]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X19, 0xFE8000
	010 Move X21, 0xD07000
	011 Move W8, [X19+1149]
	012 Move X21, [X21+3104]
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {53}
	018 Move X0, 0xD38000
	019 Move X0, [X0+2304]
	020 Call 0x1C17CF4
	021 Move X0, 0xCFE000
	022 Move X0, [X0+3584]
	023 Call 0x1C17CF4
	024 Move X0, 0xD38000
	025 Move X0, [X0+1944]
	026 Call 0x1C17CF4
	027 Move X0, 0xD38000
	028 Move X0, [X0+1952]
	029 Call 0x1C17CF4
	030 Move X0, 0xCFE000
	031 Move X0, [X0+3608]
	032 Call 0x1C17CF4
	033 Move X0, 0xD38000
	034 Move X0, [X0+1960]
	035 Call 0x1C17CF4
	036 Move X0, 0xD38000
	037 Move X0, [X0+1968]
	038 Call 0x1C17CF4
	039 Move X0, 0xD38000
	040 Move X0, [X0+1976]
	041 Call 0x1C17CF4
	042 Move X0, 0xD38000
	043 Move X0, [X0+2312]
	044 Call 0x1C17CF4
	045 Move X0, 0xD07000
	046 Move X0, [X0+3104]
	047 Call 0x1C17CF4
	048 Move X0, 0xCFF000
	049 Move X0, [X0+1976]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X19+1149], W8
	053 Move X1, [X21]
	054 Move X23, 0xCFF000
	055 Move X23, [X23+1976]
	056 Move X0, X20
	057 Call 0x1C17E00
	058 Compare X0, 0
	059 JumpIfEqual {75}
	060 Move X19, X0
	061 Move X0, [X23]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X0, X19
	067 Move X20, [X31+48]
	068 Move X19, [X31+56]
	069 Move X22, [X31+32]
	070 Move X21, [X31+40]
	071 Move X24, [X31+16]
	072 Move X23, [X31+24]
	073 Move X30, [X31+64]
	074 Move X25, [X31+72]
	075 Move X22, 0xD38000
	076 Move X22, [X22+2304]
	077 Move X0, X20
	078 Move X1, [X22]
	079 Call 0x1C17E00
	080 Compare X0, 0
	081 JumpIfEqual {97}
	082 Move X8, [X0]
	083 Move X1, [X22]
	084 Move X19, X0
	085 NotImplemented "Instruction LDRH not yet implemented."
	086 Compare X9, 0
	087 JumpIfEqual {94}
	088 Move X10, [X8+176]
	089 Add X10, X10, 8
	090 NotImplemented "Instruction LDUR not yet implemented."
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Subtract X9, X9, 1
	093 Add X10, X10, 16
	094 Move X0, X19
	095 Move W2, W31
	096 Call 0x1C5D788
	097 Compare X20, 0
	098 JumpIfEqual {459}
	099 Move X8, 0xD38000
	100 Move X8, [X8+1968]
	101 Move X0, [X8]
	102 Call 0x1C17F10
	103 Move X8, 0xD38000
	104 Move X8, [X8+1960]
	105 Move X19, X0
	106 Move X1, [X8]
	107 Call 0x319BF58, X0
	108 Move X10, 0xD38000
	109 Move X8, [X20]
	110 Move X10, [X10+1944]
	111 NotImplemented "Instruction LDRH not yet implemented."
	112 Move X1, [X10]
	113 Compare X9, 0
	114 JumpIfEqual {121}
	115 Move X10, [X8+176]
	116 Add X10, X10, 8
	117 NotImplemented "Instruction LDUR not yet implemented."
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Subtract X9, X9, 1
	120 Add X10, X10, 16
	121 Move X0, X20
	122 Move W2, W31
	123 Call 0x1C5D788
	124 NotImplemented "Instruction LDRSW not yet implemented."
	125 Add X8, X8, X9
	126 Add X0, X8, 312
	127 Move X8, [X0]
	128 Move X1, [X0+8]
	129 Move X0, X19
	130 NotImplemented "Instruction BLR not yet implemented."
	131 Move X8, [X21]
	132 Move W1, W0
	133 Move X0, X8
	134 Call 0x1C17D6C
	135 Compare X20, 0
	136 JumpIfEqual {457}
	137 Move X10, 0xD38000
	138 Move X8, [X20]
	139 Move X10, [X10+1944]
	140 Move X19, X0
	141 NotImplemented "Instruction LDRH not yet implemented."
	142 Move X1, [X10]
	143 Compare X9, 0
	144 JumpIfEqual {151}
	145 Move X10, [X8+176]
	146 Add X10, X10, 8
	147 NotImplemented "Instruction LDUR not yet implemented."
	148 NotImplemented "Instruction CMP not yet implemented."
	149 Subtract X9, X9, 1
	150 Add X10, X10, 16
	151 Move X0, X20
	152 Move W2, W31
	153 Call 0x1C5D788
	154 NotImplemented "Instruction LDRSW not yet implemented."
	155 Add X8, X8, X9
	156 Add X0, X8, 312
	157 Move X8, [X0]
	158 Move X1, [X0+8]
	159 Move X0, X20
	160 NotImplemented "Instruction BLR not yet implemented."
	161 Move X20, X0
	162 Compare X0, 0
	163 JumpIfEqual {458}
	164 Move X24, 0xCFE000
	165 Move X25, 0xD38000
	166 Move X24, [X24+3608]
	167 Move X25, [X25+1952]
	168 Move W22, W31
	169 Move X8, [X20]
	170 Move X1, [X24]
	171 NotImplemented "Instruction LDRH not yet implemented."
	172 Compare X9, 0
	173 JumpIfEqual {180}
	174 Move X10, [X8+176]
	175 Add X10, X10, 8
	176 NotImplemented "Instruction LDUR not yet implemented."
	177 NotImplemented "Instruction CMP not yet implemented."
	178 Subtract X9, X9, 1
	179 Add X10, X10, 16
	180 Move X0, X20
	181 Move W2, W31
	182 Call 0x1C5D788
	183 NotImplemented "Instruction LDRSW not yet implemented."
	184 Add X8, X8, X9
	185 Add X0, X8, 312
	186 Move X8, [X0]
	187 Move X1, [X0+8]
	188 Move X0, X20
	189 NotImplemented "Instruction BLR not yet implemented."
	190 Move TEMP, X0
	191 And TEMP, TEMP, 1
	192 Compare TEMP, 1
	193 JumpIfNotEqual {231}
	194 Move X8, [X20]
	195 Move X1, [X25]
	196 NotImplemented "Instruction LDRH not yet implemented."
	197 Compare X9, 0
	198 JumpIfEqual {205}
	199 Move X10, [X8+176]
	200 Add X10, X10, 8
	201 NotImplemented "Instruction LDUR not yet implemented."
	202 NotImplemented "Instruction CMP not yet implemented."
	203 Subtract X9, X9, 1
	204 Add X10, X10, 16
	205 Move X0, X20
	206 Move W2, W31
	207 Call 0x1C5D788
	208 NotImplemented "Instruction LDRSW not yet implemented."
	209 Add X8, X8, X9
	210 Add X0, X8, 312
	211 Move X8, [X0]
	212 Move X1, [X0+8]
	213 Move X0, X20
	214 NotImplemented "Instruction BLR not yet implemented."
	215 Move X21, X0
	216 Compare X0, 0
	217 JumpIfEqual {407}
	218 Compare X19, 0
	219 JumpIfEqual {430}
	220 Move X8, [X19]
	221 Move X1, [X8+64]
	222 Move X0, X21
	223 Call 0x1C17E00
	224 Compare X0, 0
	225 JumpIfEqual {403}
	226 Move W8, [X19+24]
	227 NotImplemented "Instruction CMP not yet implemented."
	228 Add X8, X19, W22
	229 Add W22, W22, 1
	230 Move [X8+32], X21
	231 Move X21, X31
	232 Move W22, 9
	233 Compare X20, 0
	234 JumpIfEqual {258}
	235 Move X10, 0xCFE000
	236 Move X8, [X20]
	237 Move X10, [X10+3584]
	238 NotImplemented "Instruction LDRH not yet implemented."
	239 Move X1, [X10]
	240 Compare X9, 0
	241 JumpIfEqual {248}
	242 Move X10, [X8+176]
	243 Add X10, X10, 8
	244 NotImplemented "Instruction LDUR not yet implemented."
	245 NotImplemented "Instruction CMP not yet implemented."
	246 Subtract X9, X9, 1
	247 Add X10, X10, 16
	248 Move X0, X20
	249 Move W2, W31
	250 Call 0x1C5D788
	251 NotImplemented "Instruction LDRSW not yet implemented."
	252 Add X8, X8, X9
	253 Add X0, X8, 312
	254 Move X8, [X0]
	255 Move X1, [X0+8]
	256 Move X0, X20
	257 NotImplemented "Instruction BLR not yet implemented."
	258 Compare X21, 0
	259 JumpIfNotEqual {455}
	260 NotImplemented "Instruction CMP not yet implemented."
	261 Compare W22, 0
	262 JumpIfNotEqual {394}
	263 Move X0, [X23]
	264 Move W8, [X0+224]
	265 Compare W8, 0
	266 JumpIfNotEqual {383}
	267 NotImplemented "Instruction LDRSW not yet implemented."
	268 Add X8, X8, X9
	269 Add X0, X8, 312
	270 Move X8, [X0]
	271 Move X1, [X0+8]
	272 Move X0, X20
	273 NotImplemented "Instruction BLR not yet implemented."
	274 Move X20, X0
	275 Compare X0, 0
	276 JumpIfEqual {477}
	277 Move X21, 0xCFE000
	278 Move X22, 0xD38000
	279 Move X24, 0xD38000
	280 Move X21, [X21+3608]
	281 Move X22, [X22+1952]
	282 Move X24, [X24+1976]
	283 Move X8, [X20]
	284 Move X1, [X21]
	285 NotImplemented "Instruction LDRH not yet implemented."
	286 Compare X9, 0
	287 JumpIfEqual {294}
	288 Move X10, [X8+176]
	289 Add X10, X10, 8
	290 NotImplemented "Instruction LDUR not yet implemented."
	291 NotImplemented "Instruction CMP not yet implemented."
	292 Subtract X9, X9, 1
	293 Add X10, X10, 16
	294 Move X0, X20
	295 Move W2, W31
	296 Call 0x1C5D788
	297 NotImplemented "Instruction LDRSW not yet implemented."
	298 Add X8, X8, X9
	299 Add X0, X8, 312
	300 Move X8, [X0]
	301 Move X1, [X0+8]
	302 Move X0, X20
	303 NotImplemented "Instruction BLR not yet implemented."
	304 Move TEMP, X0
	305 And TEMP, TEMP, 1
	306 Compare TEMP, 1
	307 JumpIfNotEqual {337}
	308 Move X8, [X20]
	309 Move X1, [X22]
	310 NotImplemented "Instruction LDRH not yet implemented."
	311 Compare X9, 0
	312 JumpIfEqual {319}
	313 Move X10, [X8+176]
	314 Add X10, X10, 8
	315 NotImplemented "Instruction LDUR not yet implemented."
	316 NotImplemented "Instruction CMP not yet implemented."
	317 Subtract X9, X9, 1
	318 Add X10, X10, 16
	319 Move X0, X20
	320 Move W2, W31
	321 Call 0x1C5D788
	322 NotImplemented "Instruction LDRSW not yet implemented."
	323 Add X8, X8, X9
	324 Add X0, X8, 312
	325 Move X8, [X0]
	326 Move X1, [X0+8]
	327 Move X0, X20
	328 NotImplemented "Instruction BLR not yet implemented."
	329 Move X1, X0
	330 Compare X1, 0
	331 JumpIfEqual {431}
	332 Compare X19, 0
	333 JumpIfEqual {454}
	334 Move X2, [X24]
	335 Move X0, X19
	336 Call 0x319C66C, X0, X1
	337 Move X21, X31
	338 Move W22, 18
	339 Compare X20, 0
	340 JumpIfEqual {364}
	341 Move X10, 0xCFE000
	342 Move X8, [X20]
	343 Move X10, [X10+3584]
	344 NotImplemented "Instruction LDRH not yet implemented."
	345 Move X1, [X10]
	346 Compare X9, 0
	347 JumpIfEqual {354}
	348 Move X10, [X8+176]
	349 Add X10, X10, 8
	350 NotImplemented "Instruction LDUR not yet implemented."
	351 NotImplemented "Instruction CMP not yet implemented."
	352 Subtract X9, X9, 1
	353 Add X10, X10, 16
	354 Move X0, X20
	355 Move W2, W31
	356 Call 0x1C5D788
	357 NotImplemented "Instruction LDRSW not yet implemented."
	358 Add X8, X8, X9
	359 Add X0, X8, 312
	360 Move X8, [X0]
	361 Move X1, [X0+8]
	362 Move X0, X20
	363 NotImplemented "Instruction BLR not yet implemented."
	364 Compare X21, 0
	365 JumpIfNotEqual {455}
	366 NotImplemented "Instruction CMP not yet implemented."
	367 Compare W22, 0
	368 JumpIfNotEqual {394}
	369 Compare X19, 0
	370 JumpIfEqual {457}
	371 Move X8, 0xD38000
	372 Move X8, [X8+2312]
	373 Move X0, X19
	374 Move X1, [X8]
	375 Call 0x319D1DC, X0
	376 Move X8, [X23]
	377 Move X19, X0
	378 Move W9, [X8+224]
	379 Compare W9, 0
	380 JumpIfNotEqual {383}
	381 Move X0, X8
	382 Call 0x1C17DFC
	383 Move X0, X19
	384 Move X20, [X31+48]
	385 Move X19, [X31+56]
	386 Move X22, [X31+32]
	387 Move X21, [X31+40]
	388 Move X24, [X31+16]
	389 Move X23, [X31+24]
	390 Move X30, [X31+64]
	391 Move X25, [X31+72]
	392 Call Task.InternalWhenAll, X0
	393 Return X0
	394 Move X20, [X31+48]
	395 Move X19, [X31+56]
	396 Move X22, [X31+32]
	397 Move X21, [X31+40]
	398 Move X24, [X31+16]
	399 Move X23, [X31+24]
	400 Move X30, [X31+64]
	401 Move X25, [X31+72]
	402 Return X0
	403 Call 0x1C17F44
	404 Move X1, X31
	405 Call 0x1C17DEC
	406 Call 0x1C17F28
	407 Move X0, 0xD06000
	408 Move X0, [X0+1400]
	409 Call 0x1C17D08
	410 Call 0x1C17F10
	411 Move X21, X0
	412 Move X0, 0xD38000
	413 Move X0, [X0+2320]
	414 Call 0x1C17D08
	415 Move X22, X0
	416 Move X0, 0xD28000
	417 Move X0, [X0+1560]
	418 Call 0x1C17D08
	419 Move X2, X0
	420 Move X0, X21
	421 Move X1, X22
	422 Move X3, X31
	423 Call ArgumentException..ctor, X0, X1, X2
	424 Move X0, 0xD38000
	425 Move X0, [X0+2328]
	426 Call 0x1C17D08
	427 Move X1, X0
	428 Move X0, X21
	429 Call 0x1C17DEC
	430 Call 0x1C17F20
	431 Move X0, 0xD06000
	432 Move X0, [X0+1400]
	433 Call 0x1C17D08
	434 Call 0x1C17F10
	435 Move X21, X0
	436 Move X0, 0xD38000
	437 Move X0, [X0+2320]
	438 Call 0x1C17D08
	439 Move X22, X0
	440 Move X0, 0xD28000
	441 Move X0, [X0+1560]
	442 Call 0x1C17D08
	443 Move X2, X0
	444 Move X0, X21
	445 Move X1, X22
	446 Move X3, X31
	447 Call ArgumentException..ctor, X0, X1, X2
	448 Move X0, 0xD38000
	449 Move X0, [X0+2328]
	450 Call 0x1C17D08
	451 Move X1, X0
	452 Move X0, X21
	453 Call 0x1C17DEC
	454 Call 0x1C17F20
	455 Move X0, X21
	456 Call 0x1C17F18
	457 Call 0x1C17F20
	458 Call 0x1C17F20
	459 Move X0, 0xD03000
	460 Move X0, [X0+1320]
	461 Call 0x1C17D08
	462 Call 0x1C17F10
	463 Move X19, X0
	464 Move X0, 0xD28000
	465 Move X0, [X0+1560]
	466 Call 0x1C17D08
	467 Move X1, X0
	468 Move X0, X19
	469 Move X2, X31
	470 Call ArgumentNullException..ctor, X0, X1
	471 Move X0, 0xD38000
	472 Move X0, [X0+2328]
	473 Call 0x1C17D08
	474 Move X1, X0
	475 Move X0, X19
	476 Call 0x1C17DEC
	477 Call 0x1C17F20
	478 Move X22, X0
	479 NotImplemented "Instruction CMP not yet implemented."
	480 Move X0, X22
	481 Call 0x3EB2AD0
	482 Move X21, [X0]
	483 Call 0x3EB2AE0
	484 Move W22, W31
	485 Compare X20, 0
	486 JumpIfNotEqual {341}
	487 Move X21, X31
	488 Move X22, X0
	489 Compare X20, 0
	490 JumpIfEqual {514}
	491 Move X10, 0xCFE000
	492 Move X8, [X20]
	493 Move X10, [X10+3584]
	494 NotImplemented "Instruction LDRH not yet implemented."
	495 Move X1, [X10]
	496 Compare X9, 0
	497 JumpIfEqual {504}
	498 Move X10, [X8+176]
	499 Add X10, X10, 8
	500 NotImplemented "Instruction LDUR not yet implemented."
	501 NotImplemented "Instruction CMP not yet implemented."
	502 Subtract X9, X9, 1
	503 Add X10, X10, 16
	504 Move X0, X20
	505 Move W2, W31
	506 Call 0x1C5D788
	507 NotImplemented "Instruction LDRSW not yet implemented."
	508 Add X8, X8, X9
	509 Add X0, X8, 312
	510 Move X8, [X0]
	511 Move X1, [X0+8]
	512 Move X0, X20
	513 NotImplemented "Instruction BLR not yet implemented."
	514 Compare X21, 0
	515 JumpIfEqual {556}
	516 Move X0, X21
	517 Call 0x1C17F18
	518 Move X22, X0
	519 NotImplemented "Instruction CMP not yet implemented."
	520 Move X0, X22
	521 Call 0x3EB2AD0
	522 Move X21, [X0]
	523 Call 0x3EB2AE0
	524 Move W22, W31
	525 Compare X20, 0
	526 JumpIfNotEqual {235}
	527 Move X21, X31
	528 Move X22, X0
	529 Compare X20, 0
	530 JumpIfEqual {554}
	531 Move X10, 0xCFE000
	532 Move X8, [X20]
	533 Move X10, [X10+3584]
	534 NotImplemented "Instruction LDRH not yet implemented."
	535 Move X1, [X10]
	536 Compare X9, 0
	537 JumpIfEqual {544}
	538 Move X10, [X8+176]
	539 Add X10, X10, 8
	540 NotImplemented "Instruction LDUR not yet implemented."
	541 NotImplemented "Instruction CMP not yet implemented."
	542 Subtract X9, X9, 1
	543 Add X10, X10, 16
	544 Move X0, X20
	545 Move W2, W31
	546 Call 0x1C5D788
	547 NotImplemented "Instruction LDRSW not yet implemented."
	548 Add X8, X8, X9
	549 Add X0, X8, 312
	550 Move X8, [X0]
	551 Move X1, [X0+8]
	552 Move X0, X20
	553 NotImplemented "Instruction BLR not yet implemented."
	554 Compare X21, 0
	555 JumpIfNotEqual {558}
	556 Move X0, X22
	557 Call 0x1D2D690
	558 Move X0, X21
	559 Call 0x1C17F18
	560 Call 0x1991590

Method: System.Threading.Tasks.Task WhenAll(System.Threading.Tasks.Task[] tasks)

Disassembly:
	0x033F6DA4 LDR X28, [X28 + 0x9B8]
	0x033F6DA8 LDR X0, [X9]
	0x033F6DAC MOV X27, X9
	0x033F6DB0 BL 0x1C16F10
	0x033F6DB4 MOV X1, X31
	0x033F6DB8 MOV X19, X0
	0x033F6DBC BL 0x33BDD8C
	0x033F6DC0 LDR X8, [X21]
	0x033F6DC4 LDR X8, [X8 + 0xB8]
	0x033F6DC8 STR X19, [X8 + 0x8]
	0x033F6DCC LDR X0, [X22]
	0x033F6DD0 BL 0x1C16F10
	0x033F6DD4 LDR X2, [X20]
	0x033F6DD8 MOV X1, X31
	0x033F6DDC MOV X3, X31
	0x033F6DE0 MOV X19, X0
	0x033F6DE4 BL 0x2A6B948
	0x033F6DE8 LDR X8, [X21]
	0x033F6DEC LDR X8, [X8 + 0xB8]
	0x033F6DF0 STR X19, [X8 + 0x18]
	0x033F6DF4 LDR X0, [X23]
	0x033F6DF8 LDR W8, [X0 + 0xE0]
	0x033F6DFC CBNZ W8, 0x33F6E08
	0x033F6E00 BL 0x1C16DFC
	0x033F6E04 LDR X0, [X23]
	0x033F6E08 LDR X8, [X0 + 0xB8]
	0x033F6E0C LDR X0, [X26]
	0x033F6E10 LDR X19, [X8]
	0x033F6E14 BL 0x1C16F10
	0x033F6E18 LDR X2, [X25]
	0x033F6E1C MOV X1, X19
	0x033F6E20 MOV X3, X31
	0x033F6E24 MOV X20, X0
	0x033F6E28 BL 0x2D27AA8
	0x033F6E2C LDR X8, [X21]
	0x033F6E30 LDR X8, [X8 + 0xB8]
	0x033F6E34 STR X20, [X8 + 0x20]
	0x033F6E38 LDR X0, [X24]
	0x033F6E3C BL 0x1C16F10
	0x033F6E40 MOV X1, X31
	0x033F6E44 MOV W2, W31
	0x033F6E48 MOV W3, W31
	0x033F6E4C MOV X4, X31
	0x033F6E50 MOV X19, X0
	0x033F6E54 BL 0x33F94A4
	0x033F6E58 LDR X0, [X21]
	0x033F6E5C LDR X8, [X0 + 0xB8]
	0x033F6E60 STR X19, [X8 + 0x28]
	0x033F6E64 BL 0x1C16F10
	0x033F6E68 MOVZ W2, 0x4000
	0x033F6E6C MOV W1, W31
	0x033F6E70 MOV X3, X31
	0x033F6E74 MOV X19, X0
	0x033F6E78 BL 0x33EEB10
	0x033F6E7C LDR X8, [X21]
	0x033F6E80 LDR X8, [X8 + 0xB8]
	0x033F6E84 STR X19, [X8 + 0x30]
	0x033F6E88 LDR X8, [X23]
	0x033F6E8C LDR X0, [X29]
	0x033F6E90 LDR X8, [X8 + 0xB8]
	0x033F6E94 LDR X19, [X8]
	0x033F6E98 BL 0x1C16F10
	0x033F6E9C LDR X2, [X28]
	0x033F6EA0 MOV X1, X19
	0x033F6EA4 MOV X3, X31
	0x033F6EA8 MOV X20, X0
	0x033F6EAC BL 0x24AD1FC
	0x033F6EB0 LDR X8, [X21]
	0x033F6EB4 LDR X8, [X8 + 0xB8]
	0x033F6EB8 STR X20, [X8 + 0x38]
	0x033F6EBC LDR X8, [X23]
	0x033F6EC0 LDR X8, [X8 + 0xB8]
	0x033F6EC4 LDR X19, [X8]
	0x033F6EC8 ADRP X8, 0xD37000
	0x033F6ECC LDR X8, [X8 + 0x9A8]
	0x033F6ED0 LDR X0, [X8]
	0x033F6ED4 BL 0x1C16F10
	0x033F6ED8 ADRP X8, 0xD37000
	0x033F6EDC LDR X8, [X8 + 0x9C0]
	0x033F6EE0 MOV X1, X19
	0x033F6EE4 MOV X3, X31
	0x033F6EE8 MOV X20, X0
	0x033F6EEC LDR X2, [X8]
	0x033F6EF0 BL 0x24AD1FC
	0x033F6EF4 LDR X8, [X21]
	0x033F6EF8 LDR X8, [X8 + 0xB8]
	0x033F6EFC STR X20, [X8 + 0x48]
	0x033F6F00 ADRP X8, 0xD37000
	0x033F6F04 LDR X8, [X8 + 0x990]
	0x033F6F08 LDR X0, [X8]
	0x033F6F0C BL 0x1C16F10
	0x033F6F10 ADRP X8, 0xD37000
	0x033F6F14 LDR X8, [X8 + 0x988]
	0x033F6F18 MOV X19, X0
	0x033F6F1C LDR X1, [X8]
	0x033F6F20 BL 0x2A12DD4
	0x033F6F24 LDR X8, [X21]
	0x033F6F28 LDR X8, [X8 + 0xB8]
	0x033F6F2C STR X19, [X8 + 0x50]
	0x033F6F30 LDR X0, [X27]
	0x033F6F34 BL 0x1C16F10
	0x033F6F38 MOV X1, X31
	0x033F6F3C MOV X19, X0
	0x033F6F40 BL 0x33BDD8C
	0x033F6F44 LDR X8, [X21]
	0x033F6F48 LDP X22, X21, [X31 + 0x40]
	0x033F6F4C LDP X24, X23, [X31 + 0x30]
	0x033F6F50 LDP X26, X25, [X31 + 0x20]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xFE8000
	009 Move W8, [X20+1150]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xD07000
	016 Move X0, [X0+3104]
	017 Call 0x1C17CF4
	018 Move X0, 0xCFF000
	019 Move X0, [X0+1976]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1150], W8
	023 Compare X19, 0
	024 JumpIfEqual {106}
	025 Move X23, 0xCFF000
	026 Move W20, [X19+24]
	027 Move X23, [X23+1976]
	028 Compare W20, 0
	029 JumpIfEqual {65}
	030 Move X8, 0xD07000
	031 Move X8, [X8+3104]
	032 Move W1, W20
	033 Move X0, [X8]
	034 Call 0x1C17D6C
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X21, X0
	037 Move W8, W31
	038 Move W9, [X19+24]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X24, W8
	041 Add X8, X19, X24
	042 Move X22, [X8+32]
	043 Compare X22, 0
	044 JumpIfEqual {79}
	045 Compare X21, 0
	046 JumpIfEqual {102}
	047 Move X8, [X21]
	048 Move X0, X22
	049 Move X1, [X8+64]
	050 Call 0x1C17E00
	051 Compare X0, 0
	052 JumpIfEqual {103}
	053 Move W8, [X21+24]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Add W8, W24, 1
	056 Add X9, X21, X24
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move [X9+32], X22
	059 Move X0, [X23]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Move X0, X21
	065 Move X0, [X23]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move X0, X19
	071 Move X20, [X31+48]
	072 Move X19, [X31+56]
	073 Move X22, [X31+32]
	074 Move X21, [X31+40]
	075 Move X24, [X31+16]
	076 Move X23, [X31+24]
	077 Move X30, [X31+64]
	078 Call 0x1C17F28
	079 Move X0, 0xD06000
	080 Move X0, [X0+1400]
	081 Call 0x1C17D08
	082 Call 0x1C17F10
	083 Move X19, X0
	084 Move X0, 0xD38000
	085 Move X0, [X0+2320]
	086 Call 0x1C17D08
	087 Move X20, X0
	088 Move X0, 0xD28000
	089 Move X0, [X0+1560]
	090 Call 0x1C17D08
	091 Move X2, X0
	092 Move X0, X19
	093 Move X1, X20
	094 Move X3, X31
	095 Call ArgumentException..ctor, X0, X1, X2
	096 Move X0, 0xD38000
	097 Move X0, [X0+2336]
	098 Call 0x1C17D08
	099 Move X1, X0
	100 Move X0, X19
	101 Call 0x1C17DEC
	102 Call 0x1C17F20
	103 Call 0x1C17F44
	104 Move X1, X31
	105 Call 0x1C17DEC
	106 Move X0, 0xD03000
	107 Move X0, [X0+1320]
	108 Call 0x1C17D08
	109 Call 0x1C17F10
	110 Move X19, X0
	111 Move X0, 0xD28000
	112 Move X0, [X0+1560]
	113 Call 0x1C17D08
	114 Move X1, X0
	115 Move X0, X19
	116 Move X2, X31
	117 Call ArgumentNullException..ctor, X0, X1

Method: System.Threading.Tasks.Task InternalWhenAll(System.Threading.Tasks.Task[] tasks)

Disassembly:
	0x033F6F54 LDR X8, [X8 + 0xB8]
	0x033F6F58 LDP X28, X27, [X31 + 0x10]
	0x033F6F5C STR X19, [X8 + 0x58]
	0x033F6F60 LDP X20, X19, [X31 + 0x50]
	0x033F6F64 LDP X29, X30, [X31], #0x60
	0x033F6F68 RET
	0x033F6F6C MOV X1, X31
	0x033F6F70 MOV W2, W31
	0x033F6F74 MOV W3, W31
	0x033F6F78 MOV X4, X31
	0x033F6F7C B 0x33F94A4
	0x033F6F80 MOV X1, X31
	0x033F6F84 B 0x33DE6C8
	0x033F6F88 MOV W0, W31
	0x033F6F8C RET
	0x033F6F90 STP X30, X21, [X31 - 0x20]!
	0x033F6F94 STP X20, X19, [X31 + 0x10]
	0x033F6F98 ADRP X21, 0xFE7000
	0x033F6F9C ADRP X20, 0xD05000
	0x033F6FA0 LDRB W8, [X21 + 0x489]
	0x033F6FA4 LDR X20, [X20 + 0x7D8]
	0x033F6FA8 MOV X19, X0
	0x033F6FAC TBNZ X8, 0x0, 0x33F6FDC
	0x033F6FB0 ADRP X0, 0xD05000
	0x033F6FB4 LDR X0, [X0 + 0x7D8]
	0x033F6FB8 BL 0x1C16CF4
	0x033F6FBC ADRP X0, 0xD25000
	0x033F6FC0 LDR X0, [X0 + 0x728]
	0x033F6FC4 BL 0x1C16CF4
	0x033F6FC8 ADRP X0, 0xD37000
	0x033F6FCC LDR X0, [X0 + 0x668]
	0x033F6FD0 BL 0x1C16CF4
	0x033F6FD4 MOVZ W8, 0x1
	0x033F6FD8 STRB W8, [X21 + 0x489]
	0x033F6FDC LDR X0, [X20]
	0x033F6FE0 ADD X20, X19, 0x58
	0x033F6FE4 LDR W8, [X0 + 0xE0]
	0x033F6FE8 CBNZ W8, 0x33F6FF0
	0x033F6FEC BL 0x1C16DFC
	0x033F6FF0 MOV X0, X20
	0x033F6FF4 MOV X1, X31
	0x033F6FF8 BL 0x33DD2B0
	0x033F6FFC TBZ X0, 0x0, 0x33F7020
	0x033F7000 LDR X1, [X19 + 0x58]
	0x033F7004 MOV X0, X19
	0x033F7008 MOV X2, X31
	0x033F700C BL 0x33EDA6C
	0x033F7010 TBNZ X0, 0x0, 0x33F70D0
	0x033F7014 LDP X20, X19, [X31 + 0x10]
	0x033F7018 LDP X30, X21, [X31], #0x20
	0x033F701C RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xFE8000
	005 Move W8, [X20+1151]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xCFF000
	012 Move X0, [X0+1976]
	013 Call 0x1C17CF4
	014 Move X0, 0xD38000
	015 Move X0, [X0+2344]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1151], W8
	019 Compare X19, 0
	020 JumpIfEqual {60}
	021 Move X8, [X19+24]
	022 Compare X8, 0
	023 JumpIfEqual {31}
	024 Move X8, 0xD38000
	025 Move X8, [X8+2344]
	026 Move X0, [X8]
	027 Call 0x1C17F10
	028 Move X1, X19
	029 Move X20, X0
	030 Call WhenAllPromise..ctor, X0, X1
	031 Move X19, 0xCFF000
	032 Move X19, [X19+1976]
	033 Move X0, [X19]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X20, 0xFE3000
	039 Move W8, [X20+3869]
	040 Compare W8, 0
	041 JumpIfNotEqual {47}
	042 Move X0, 0xCFF000
	043 Move X0, [X0+1976]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X20+3869], W8
	047 Move X0, [X19]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X19]
	053 Move X8, [X0+184]
	054 Move X20, [X8+48]
	055 Move X0, X20
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X30, [X31+32]
	059 Return X0
	060 Call 0x1C17F20

Method: System.Threading.Tasks.Task`1<System.Threading.Tasks.Task> WhenAny(System.Threading.Tasks.Task[] tasks)

Disassembly:
	0x033F7194 LDP X29, X30, [X31], #0x60
	0x033F7198 RET
	0x033F719C LDR X8, [X19 + 0x58]
	0x033F71A0 CBZ X8, 0x33F7290
	0x033F71A4 ADRP X25, 0xD36000
	0x033F71A8 ADRP X26, 0xD36000
	0x033F71AC ADRP X27, 0xD36000
	0x033F71B0 LDR X25, [X25 + 0x9D0]
	0x033F71B4 LDR X26, [X26 + 0x9C8]
	0x033F71B8 LDR X27, [X27 + 0x9D8]
	0x033F71BC MOV X21, X31
	0x033F71C0 MOV X20, X31
	0x033F71C4 MOVZ W24, 0x4
	0x033F71C8 LDR W9, [X8 + 0x18]
	0x033F71CC SUB X28, X24, 0x4
	0x033F71D0 CMP W28, W9
	0x033F71D4 B.GE 0x33F7294
	0x033F71D8 CMP W28, W9
	0x033F71DC B.CS 0x33F73BC
	0x033F71E0 LDR X22, [X8, X24, LSL #3]
	0x033F71E4 CBZ X22, 0x33F7290
	0x033F71E8 LDR W29, [X22 + 0x38]
	0x033F71EC BL 0x1C16D44
	0x033F71F0 TBNZ X29, 0x15, 0x33F7210
	0x033F71F4 LDR W29, [X22 + 0x38]
	0x033F71F8 BL 0x1C16D44
	0x033F71FC AND W8, W29, 0x600000
	0x033F7200 CMP W8, 0x400000
	0x033F7204 CCMP X20, 0x0, 0x0, EQ
	0x033F7208 CSEL X20, X22, X20, EQ
	0x033F720C B 0x33F7250
	0x033F7210 CBZ X21, 0x33F7220
	0x033F7214 MOV X0, X22
	0x033F7218 BL 0x33F10E8
	0x033F721C B 0x33F7240
	0x033F7220 LDR X0, [X25]
	0x033F7224 BL 0x1C16F10
	0x033F7228 LDR X1, [X26]
	0x033F722C MOV X21, X0
	0x033F7230 BL 0x319AF58
	0x033F7234 MOV X0, X22
	0x033F7238 BL 0x33F10E8
	0x033F723C CBZ X21, 0x33F7290
	0x033F7240 LDR X2, [X27]
	0x033F7244 MOV X1, X0
	0x033F7248 MOV X0, X21
	0x033F724C BL 0x319B748
	0x033F7250 LDR W22, [X22 + 0x38]
	0x033F7254 BL 0x1C16D44
	0x033F7258 TBNZ X22, 0x1C, 0x33F7278
	0x033F725C LDR X8, [X19 + 0x58]
	0x033F7260 CBZ X8, 0x33F7290
	0x033F7264 LDR W9, [X8 + 0x18]
	0x033F7268 CMP W28, W9
	0x033F726C B.CS 0x33F73BC
	0x033F7270 STR X31, [X8, X24, LSL #3]
	0x033F7274 B 0x33F7284
	0x033F7278 MOVZ W1, 0x1
	0x033F727C MOV X0, X19
	0x033F7280 BL 0x33EFDD0
	0x033F7284 LDR X8, [X19 + 0x58]
	0x033F7288 ADD X24, X24, 0x1
	0x033F728C CBNZ X8, 0x33F71C8
	0x033F7290 BL 0x1C16F20
	0x033F7294 CBZ X21, 0x33F72BC
	0x033F7298 MOV X0, X19
	0x033F729C MOV X1, X21
	0x033F72A0 LDP X20, X19, [X31 + 0x50]
	0x033F72A4 LDP X22, X21, [X31 + 0x40]
	0x033F72A8 LDP X24, X23, [X31 + 0x30]
	0x033F72AC LDP X26, X25, [X31 + 0x20]
	0x033F72B0 LDP X28, X27, [X31 + 0x10]
	0x033F72B4 LDP X29, X30, [X31], #0x60
	0x033F72B8 B 0x33EE46C
	0x033F72BC CBZ X20, 0x33F7300
	0x033F72C0 LDR X21, [X20 + 0x48]
	0x033F72C4 BL 0x1C16D44
	0x033F72C8 CBZ X21, 0x33F72D0
	0x033F72CC LDR X21, [X21 + 0x28]
	0x033F72D0 MOV X0, X20
	0x033F72D4 BL 0x33F128C
	0x033F72D8 MOV X2, X0
	0x033F72DC MOV X0, X19
	0x033F72E0 MOV X1, X21
	0x033F72E4 LDP X20, X19, [X31 + 0x50]
	0x033F72E8 LDP X22, X21, [X31 + 0x40]
	0x033F72EC LDP X24, X23, [X31 + 0x30]
	0x033F72F0 LDP X26, X25, [X31 + 0x20]
	0x033F72F4 LDP X28, X27, [X31 + 0x10]
	0x033F72F8 LDP X29, X30, [X31], #0x60
	0x033F72FC B 0x33EDA6C
	0x033F7300 LDR X0, [X23]
	0x033F7304 LDR W8, [X0 + 0xE0]
	0x033F7308 CBNZ W8, 0x33F7320
	0x033F730C BL 0x1C16DFC
	0x033F7310 LDR X0, [X23]
	0x033F7314 LDR W8, [X0 + 0xE0]
	0x033F7318 CBNZ W8, 0x33F7320
	0x033F731C BL 0x1C16DFC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0xFE7000
	008 Move W8, [X20+1152]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD06000
	015 Move X0, [X0+3104]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1152], W8
	019 Compare X19, 0
	020 JumpIfEqual {88}
	021 Move X20, [X19+24]
	022 Compare X20, 0
	023 JumpIfEqual {100}
	024 Move X8, 0xD06000
	025 Move X8, [X8+3104]
	026 Move W1, W20
	027 Move X0, [X8]
	028 Call 0x1C17D6C
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X21, X0
	031 Move W8, W31
	032 Move W9, [X19+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X23, W8
	035 Add X8, X19, X23
	036 Move X22, [X8+32]
	037 Compare X22, 0
	038 JumpIfEqual {61}
	039 Compare X21, 0
	040 JumpIfEqual {84}
	041 Move X8, [X21]
	042 Move X0, X22
	043 Move X1, [X8+64]
	044 Call 0x1C17E00
	045 Compare X0, 0
	046 JumpIfEqual {85}
	047 Move W8, [X21+24]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Add W8, W23, 1
	050 Add X9, X21, X23
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move [X9+32], X22
	053 Move X0, X21
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move X30, [X31+48]
	059 Move X23, [X31+56]
	060 Call 0x1C17F28
	061 Move X0, 0xD05000
	062 Move X0, [X0+1400]
	063 Call 0x1C17D08
	064 Call 0x1C17F10
	065 Move X19, X0
	066 Move X0, 0xD37000
	067 Move X0, [X0+2320]
	068 Call 0x1C17D08
	069 Move X20, X0
	070 Move X0, 0xD27000
	071 Move X0, [X0+1560]
	072 Call 0x1C17D08
	073 Move X2, X0
	074 Move X0, X19
	075 Move X1, X20
	076 Move X3, X31
	077 Call ArgumentException..ctor, X0, X1, X2
	078 Move X0, 0xD37000
	079 Move X0, [X0+2360]
	080 Call 0x1C17D08
	081 Move X1, X0
	082 Move X0, X19
	083 Call 0x1C17DEC
	084 Call 0x1C17F20
	085 Call 0x1C17F44
	086 Move X1, X31
	087 Call 0x1C17DEC
	088 Move X0, 0xD02000
	089 Move X0, [X0+1320]
	090 Call 0x1C17D08
	091 Call 0x1C17F10
	092 Move X19, X0
	093 Move X0, 0xD27000
	094 Move X0, [X0+1560]
	095 Call 0x1C17D08
	096 Move X1, X0
	097 Move X0, X19
	098 Move X2, X31
	099 Call ArgumentNullException..ctor, X0, X1
	100 Move X0, 0xD05000
	101 Move X0, [X0+1400]
	102 Call 0x1C17D08
	103 Call 0x1C17F10
	104 Move X19, X0
	105 Move X0, 0xD37000
	106 Move X0, [X0+2368]

Method: System.Threading.Tasks.Task`1<System.Threading.Tasks.Task> WhenAny(System.Collections.Generic.IEnumerable`1<System.Threading.Tasks.Task> tasks)

Disassembly:
	0x033F7558 BL 0x1C16F20
	0x033F755C BL 0x1C171E0
	0x033F7560 STR X30, [X31 - 0x20]!
	0x033F7564 STP X20, X19, [X31 + 0x10]
	0x033F7568 ADRP X19, 0xFE6000
	0x033F756C ADRP X20, 0xD36000
	0x033F7570 LDRB W8, [X19 + 0x490]
	0x033F7574 LDR X20, [X20 + 0x690]
	0x033F7578 TBNZ X8, 0x0, 0x33F7590
	0x033F757C ADRP X0, 0xD36000
	0x033F7580 LDR X0, [X0 + 0x690]
	0x033F7584 BL 0x1C16CF4
	0x033F7588 MOVZ W8, 0x1
	0x033F758C STRB W8, [X19 + 0x490]
	0x033F7590 LDR X0, [X20]
	0x033F7594 BL 0x1C16F10
	0x033F7598 MOV X19, X0
	0x033F759C BL 0x1C16D44
	0x033F75A0 MOVZ W8, 0x1
	0x033F75A4 MOV X0, X19
	0x033F75A8 MOV X1, X31
	0x033F75AC STR W8, [X19 + 0x3C]
	0x033F75B0 BL 0x33BDD8C
	0x033F75B4 MOV X0, X19
	0x033F75B8 LDP X20, X19, [X31 + 0x10]
	0x033F75BC LDR X30, [X31], #0x20
	0x033F75C0 RET
	0x033F75C4 STP X30, X19, [X31 - 0x10]!
	0x033F75C8 CBZ X1, 0x33F75E0
	0x033F75CC LDR W19, [X1 + 0x38]
	0x033F75D0 BL 0x1C16D44
	0x033F75D4 UBFM W0, W19, 0x13, 0x13
	0x033F75D8 LDP X30, X19, [X31], #0x10
	0x033F75DC RET
	0x033F75E0 BL 0x1C16F20
	0x033F75E4 CMP X1, 0x0
	0x033F75E8 CSET W0, EQ
	0x033F75EC RET
	0x033F75F0 STR X30, [X31 - 0x20]!
	0x033F75F4 STP X20, X19, [X31 + 0x10]
	0x033F75F8 ADRP X19, 0xFE6000
	0x033F75FC LDRB W8, [X19 + 0x491]
	0x033F7600 MOV X20, X0
	0x033F7604 TBNZ X8, 0x0, 0x33F761C
	0x033F7608 ADRP X0, 0xD36000
	0x033F760C LDR X0, [X0 + 0x7C8]
	0x033F7610 BL 0x1C16CF4
	0x033F7614 MOVZ W8, 0x1
	0x033F7618 STRB W8, [X19 + 0x491]
	0x033F761C LDR X19, [X20 + 0x10]
	0x033F7620 CBZ X19, 0x33F7694
	0x033F7624 ADRP X10, 0xD36000
	0x033F7628 LDR X8, [X19]
	0x033F762C LDR X10, [X10 + 0x7C8]
	0x033F7630 LDR X20, [X20 + 0x18]
	0x033F7634 LDRH W9, [X8 + 0x12E]
	0x033F7638 LDR X1, [X10]
	0x033F763C CBZ X9, 0x33F7660
	0x033F7640 LDR X10, [X8 + 0xB0]
	0x033F7644 ADD X10, X10, 0x8
	0x033F7648 LDUR X11, [X10 - 0x8]
	0x033F764C CMP X11, X1
	0x033F7650 B.EQ 0x33F7670
	0x033F7654 SUBS X9, X9, 0x1
	0x033F7658 ADD X10, X10, 0x10
	0x033F765C B.NE 0x33F7648
	0x033F7660 MOV X0, X19
	0x033F7664 MOV W2, W31
	0x033F7668 BL 0x1C5C788
	0x033F766C B 0x33F767C
	0x033F7670 LDRSW X9, [X10]
	0x033F7674 ADD X8, X8, X9, 0x4, LSL
	0x033F7678 ADD X0, X8, 0x138
	0x033F767C LDP X3, X2, [X0]
	0x033F7680 MOV X0, X19
	0x033F7684 MOV X1, X20
	0x033F7688 LDP X20, X19, [X31 + 0x10]
	0x033F768C LDR X30, [X31], #0x20
	0x033F7690 BR X3
	0x033F7694 BL 0x1C16F20
	0x033F7698 RET
	0x033F769C STP X30, X19, [X31 - 0x10]!
	0x033F76A0 LDR W8, [X0 + 0x10]
	0x033F76A4 MOV X19, X0
	0x033F76A8 CMP W8, 0x14
	0x033F76AC B.LT 0x33F76C0
	0x033F76B0 MOV X0, X31
	0x033F76B4 BL 0x32C5C54
	0x033F76B8 TBZ X0, 0x0, 0x33F76D0
	0x033F76BC LDR W8, [X19 + 0x10]
	0x033F76C0 ADD W8, W8, 0x1
	0x033F76C4 MOVZ W0, 0x1
	0x033F76C8 STR W8, [X19 + 0x10]
	0x033F76CC B 0x33F76D4
	0x033F76D0 MOV W0, W31
	0x033F76D4 LDP X30, X19, [X31], #0x10
	0x033F76D8 RET
	0x033F76DC LDR W8, [X0 + 0x10]
	0x033F76E0 SUB W8, W8, 0x1
	0x033F76E4 BIC W8, W8, W8, 0x1F
	0x033F76E8 STR W8, [X0 + 0x10]
	0x033F76EC RET
	0x033F76F0 STP X30, X21, [X31 - 0x20]!
	0x033F76F4 STP X20, X19, [X31 + 0x10]
	0x033F76F8 ADRP X20, 0xFE6000
	0x033F76FC LDRB W8, [X20 + 0x493]
	0x033F7700 MOV X19, X0
	0x033F7704 TBNZ X8, 0x0, 0x33F7728
	0x033F7708 ADRP X0, 0xD08000
	0x033F770C LDR X0, [X0 + 0x710]
	0x033F7710 BL 0x1C16CF4
	0x033F7714 ADRP X0, 0xD30000
	0x033F7718 LDR X0, [X0 + 0x148]
	0x033F771C BL 0x1C16CF4
	0x033F7720 MOVZ W8, 0x1
	0x033F7724 STRB W8, [X20 + 0x493]
	0x033F7728 LDR X20, [X19 + 0x50]
	0x033F772C STR X31, [X19 + 0x50]
	0x033F7730 CBZ X20, 0x33F77BC
	0x033F7734 ADRP X21, 0xD08000
	0x033F7738 LDR X21, [X21 + 0x710]
	0x033F773C MOV X0, X20
	0x033F7740 BL 0x33EFEA4
	0x033F7744 LDR X0, [X19 + 0x18]
	0x033F7748 LDR X1, [X21]
	0x033F774C BL 0x1C16E00
	0x033F7750 CBZ X0, 0x33F7774
	0x033F7754 LDR X8, [X0 + 0x40]
	0x033F7758 LDR X3, [X0 + 0x18]
	0x033F775C LDR X2, [X0 + 0x28]
	0x033F7760 MOV X1, X20
	0x033F7764 LDP X20, X19, [X31 + 0x10]
	0x033F7768 MOV X0, X8
	0x033F776C LDP X30, X21, [X31], #0x20
	0x033F7770 BR X3
	0x033F7774 ADRP X8, 0xD30000
	0x033F7778 LDR X0, [X19 + 0x18]
	0x033F777C LDR X8, [X8 + 0x148]
	0x033F7780 LDR X1, [X8]
	0x033F7784 BL 0x1C16E00
	0x033F7788 CBZ X0, 0x33F77B0
	0x033F778C LDR X8, [X0 + 0x40]
	0x033F7790 LDR X2, [X19 + 0x20]
	0x033F7794 LDR X4, [X0 + 0x18]
	0x033F7798 LDR X3, [X0 + 0x28]
	0x033F779C MOV X1, X20
	0x033F77A0 LDP X20, X19, [X31 + 0x10]
	0x033F77A4 MOV X0, X8
	0x033F77A8 LDP X30, X21, [X31], #0x20
	0x033F77AC BR X4
	0x033F77B0 LDP X20, X19, [X31 + 0x10]
	0x033F77B4 LDP X30, X21, [X31], #0x20
	0x033F77B8 RET
	0x033F77BC BL 0x1C16F20
	0x033F77C0 STP X30, X21, [X31 - 0x20]!
	0x033F77C4 STP X20, X19, [X31 + 0x10]
	0x033F77C8 CBZ X0, 0x33F783C
	0x033F77CC MOV X19, X0
	0x033F77D0 TBZ X1, 0x0, 0x33F77EC
	0x033F77D4 MOVZ W1, 0x10000
	0x033F77D8 MOVZ W2, 0x410000
	0x033F77DC MOV X0, X19
	0x033F77E0 BL 0x33EF944
	0x033F77E4 TBNZ X0, 0x0, 0x33F7800
	0x033F77E8 B 0x33F7830
	0x033F77EC LDR W20, [X19 + 0x38]
	0x033F77F0 BL 0x1C16D44
	0x033F77F4 BL 0x1C16D44
	0x033F77F8 ORR W8, W20, 0x10000
	0x033F77FC STR W8, [X19 + 0x38]
	0x033F7800 LDR X0, [X19 + 0x28]
	0x033F7804 CBZ X0, 0x33F7840
	0x033F7808 MOV X1, X19
	0x033F780C MOV W2, W31
	0x033F7810 BL 0x33F36A0
	0x033F7814 TBNZ X0, 0x0, 0x33F7830
	0x033F7818 LDR X0, [X19 + 0x28]
	0x033F781C CBZ X0, 0x33F7844
	0x033F7820 LDR X8, [X0]
	0x033F7824 LDP X9, X2, [X8 + 0x178]
	0x033F7828 MOV X1, X19
	0x033F782C BLR X9
	0x033F7830 LDP X20, X19, [X31 + 0x10]
	0x033F7834 LDP X30, X21, [X31], #0x20
	0x033F7838 RET
	0x033F783C BL 0x1C16F20
	0x033F7840 BL 0x1C16F20
	0x033F7844 BL 0x1C16F20
	0x033F7848 B 0x33F7850
	0x033F784C B 0x33F7850
	0x033F7850 MOV X20, X0
	0x033F7854 CMP W1, 0x1
	0x033F7858 B.NE 0x33F78F4
	0x033F785C MOV X0, X20
	0x033F7860 BL 0x3EB1AD0
	0x033F7864 MOV X20, X0
	0x033F7868 ADRP X0, 0xCFC000
	0x033F786C LDR X0, [X0 + 0x7D0]
	0x033F7870 BL 0x1C16D08
	0x033F7874 LDR X8, [X20]
	0x033F7878 LDR X1, [X8]
	0x033F787C BL 0x1C17270
	0x033F7880 TBZ X0, 0x0, 0x33F78CC
	0x033F7884 LDR X20, [X20]
	0x033F7888 BL 0x3EB1AE0
	0x033F788C ADRP X0, 0xD36000
	0x033F7890 LDR X0, [X0 + 0x6D0]
	0x033F7894 BL 0x1C16D08
	0x033F7898 BL 0x1C16F10
	0x033F789C MOV X1, X20
	0x033F78A0 MOV X21, X0
	0x033F78A4 BL 0x33ECF28
	0x033F78A8 MOV X0, X19
	0x033F78AC MOV X1, X21
	0x033F78B0 MOV W2, W31
	0x033F78B4 BL 0x33F0D74
	0x033F78B8 MOV X0, X19
	0x033F78BC LDP X20, X19, [X31 + 0x10]
	0x033F78C0 MOV W1, W31
	0x033F78C4 LDP X30, X21, [X31], #0x20
	0x033F78C8 B 0x33EFB68
	0x033F78CC MOVZ W0, 0x8
	0x033F78D0 BL 0x3EB1AF0
	0x033F78D4 LDR X8, [X20]
	0x033F78D8 STR X8, [X0]
	0x033F78DC ADRP X1, 0xABD000
	0x033F78E0 ADD X1, X1, 0xE58
	0x033F78E4 MOV X2, X31
	0x033F78E8 BL 0x3EB1B00
	0x033F78EC MOV X20, X0
	0x033F78F0 BL 0x3EB1AE0
	0x033F78F4 MOV X0, X20
	0x033F78F8 BL 0x1D2C690
	0x033F78FC BL 0x1990590
	0x033F7900 MOV X1, X31
	0x033F7904 B 0x33BDD8C
	0x033F7908 STP X30, X23, [X31 - 0x30]!
	0x033F790C STP X22, X21, [X31 + 0x10]
	0x033F7910 STP X20, X19, [X31 + 0x20]
	0x033F7914 ADRP X22, 0xFE6000
	0x033F7918 LDRB W8, [X22 + 0x495]
	0x033F791C MOV W19, W2
	0x033F7920 MOV X21, X1
	0x033F7924 MOV X20, X0
	0x033F7928 TBNZ X8, 0x0, 0x33F7940
	0x033F792C ADRP X0, 0xD24000
	0x033F7930 LDR X0, [X0 + 0x728]
	0x033F7934 BL 0x1C16CF4
	0x033F7938 MOVZ W8, 0x1
	0x033F793C STRB W8, [X22 + 0x495]
	0x033F7940 CBZ X21, 0x33F7A1C
	0x033F7944 LDR W22, [X20 + 0x18]
	0x033F7948 LDR W23, [X21 + 0x38]
	0x033F794C BL 0x1C16D44
	0x033F7950 MOVZ W8, 0x1600000
	0x033F7954 AND W8, W23, W8, 0x0
	0x033F7958 MOVZ W9, 0x1000000
	0x033F795C CMP W8, W9
	0x033F7960 B.NE 0x33F796C
	0x033F7964 MOVZ W8, 0x10
	0x033F7968 B 0x33F7984
	0x033F796C LDR W21, [X21 + 0x38]
	0x033F7970 BL 0x1C16D44
	0x033F7974 AND W8, W21, 0x600000
	0x033F7978 CMP W8, 0x400000
	0x033F797C MOVZ W8, 0x11
	0x033F7980 CINC W8, W8, EQ
	0x033F7984 LDR X21, [X20 + 0x10]
	0x033F7988 CBZ X21, 0x33F7A1C
	0x033F798C LSRV W8, W22, W8
	0x033F7990 TBZ X8, 0x0, 0x33F79AC
	0x033F7994 MOV X0, X21
	0x033F7998 LDP X20, X19, [X31 + 0x20]
	0x033F799C LDP X22, X21, [X31 + 0x10]
	0x033F79A0 MOV W1, W31
	0x033F79A4 LDP X30, X23, [X31], #0x30
	0x033F79A8 B 0x33EF3F4
	0x033F79AC LDR W23, [X21 + 0x38]
	0x033F79B0 BL 0x1C16D44
	0x033F79B4 AND W8, W23, 0x600000
	0x033F79B8 CMP W8, 0x400000
	0x033F79BC B.EQ 0x33F79D8
	0x033F79C0 ADRP X8, 0xD24000
	0x033F79C4 LDR X8, [X8 + 0x728]
	0x033F79C8 LDR X0, [X8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, 0xFE7000
	009 Move W8, [X19+1153]
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {41}
	015 Move X0, 0xCFD000
	016 Move X0, [X0+3584]
	017 Call 0x1C17CF4
	018 Move X0, 0xD37000
	019 Move X0, [X0+1944]
	020 Call 0x1C17CF4
	021 Move X0, 0xD37000
	022 Move X0, [X0+1952]
	023 Call 0x1C17CF4
	024 Move X0, 0xCFD000
	025 Move X0, [X0+3608]
	026 Call 0x1C17CF4
	027 Move X0, 0xD37000
	028 Move X0, [X0+1960]
	029 Call 0x1C17CF4
	030 Move X0, 0xD37000
	031 Move X0, [X0+1968]
	032 Call 0x1C17CF4
	033 Move X0, 0xD37000
	034 Move X0, [X0+1976]
	035 Call 0x1C17CF4
	036 Move X0, 0xD37000
	037 Move X0, [X0+2400]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X19+1153], W8
	041 Compare X20, 0
	042 JumpIfEqual {218}
	043 Move X8, 0xD37000
	044 Move X8, [X8+1968]
	045 Move X19, 0xD37000
	046 Move X21, 0xD37000
	047 Move X0, [X8]
	048 Move X19, [X19+1960]
	049 Move X21, [X21+1944]
	050 Call 0x1C17F10
	051 Move X1, [X19]
	052 Move X19, X0
	053 Call 0x319BF58, X0
	054 Move X8, [X20]
	055 Move X1, [X21]
	056 NotImplemented "Instruction LDRH not yet implemented."
	057 Compare X9, 0
	058 JumpIfEqual {65}
	059 Move X10, [X8+176]
	060 Add X10, X10, 8
	061 NotImplemented "Instruction LDUR not yet implemented."
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Subtract X9, X9, 1
	064 Add X10, X10, 16
	065 Move X0, X20
	066 Move W2, W31
	067 Call 0x1C5D788
	068 NotImplemented "Instruction LDRSW not yet implemented."
	069 Add X8, X8, X9
	070 Add X0, X8, 312
	071 Move X8, [X0]
	072 Move X1, [X0+8]
	073 Move X22, 0xCFD000
	074 Move X22, [X22+3584]
	075 Move X0, X20
	076 NotImplemented "Instruction BLR not yet implemented."
	077 Move X20, X0
	078 Compare X0, 0
	079 JumpIfEqual {230}
	080 Move X21, 0xCFD000
	081 Move X23, 0xD37000
	082 Move X24, 0xD37000
	083 Move X21, [X21+3608]
	084 Move X23, [X23+1952]
	085 Move X24, [X24+1976]
	086 Move X8, [X20]
	087 Move X1, [X21]
	088 NotImplemented "Instruction LDRH not yet implemented."
	089 Compare X9, 0
	090 JumpIfEqual {97}
	091 Move X10, [X8+176]
	092 Add X10, X10, 8
	093 NotImplemented "Instruction LDUR not yet implemented."
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Subtract X9, X9, 1
	096 Add X10, X10, 16
	097 Move X0, X20
	098 Move W2, W31
	099 Call 0x1C5D788
	100 NotImplemented "Instruction LDRSW not yet implemented."
	101 Add X8, X8, X9
	102 Add X0, X8, 312
	103 Move X8, [X0]
	104 Move X1, [X0+8]
	105 Move X0, X20
	106 NotImplemented "Instruction BLR not yet implemented."
	107 Move TEMP, X0
	108 And TEMP, TEMP, 1
	109 Compare TEMP, 1
	110 JumpIfNotEqual {140}
	111 Move X8, [X20]
	112 Move X1, [X23]
	113 NotImplemented "Instruction LDRH not yet implemented."
	114 Compare X9, 0
	115 JumpIfEqual {122}
	116 Move X10, [X8+176]
	117 Add X10, X10, 8
	118 NotImplemented "Instruction LDUR not yet implemented."
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Subtract X9, X9, 1
	121 Add X10, X10, 16
	122 Move X0, X20
	123 Move W2, W31
	124 Call 0x1C5D788
	125 NotImplemented "Instruction LDRSW not yet implemented."
	126 Add X8, X8, X9
	127 Add X0, X8, 312
	128 Move X8, [X0]
	129 Move X1, [X0+8]
	130 Move X0, X20
	131 NotImplemented "Instruction BLR not yet implemented."
	132 Move X1, X0
	133 Compare X1, 0
	134 JumpIfEqual {193}
	135 Compare X19, 0
	136 JumpIfEqual {217}
	137 Move X2, [X24]
	138 Move X0, X19
	139 Call 0x319C66C, X0, X1
	140 Move X21, X31
	141 Move W23, 10
	142 Compare X20, 0
	143 JumpIfEqual {165}
	144 Move X8, [X20]
	145 Move X1, [X22]
	146 NotImplemented "Instruction LDRH not yet implemented."
	147 Compare X9, 0
	148 JumpIfEqual {155}
	149 Move X10, [X8+176]
	150 Add X10, X10, 8
	151 NotImplemented "Instruction LDUR not yet implemented."
	152 NotImplemented "Instruction CMP not yet implemented."
	153 Subtract X9, X9, 1
	154 Add X10, X10, 16
	155 Move X0, X20
	156 Move W2, W31
	157 Call 0x1C5D788
	158 NotImplemented "Instruction LDRSW not yet implemented."
	159 Add X8, X8, X9
	160 Add X0, X8, 312
	161 Move X8, [X0]
	162 Move X1, [X0+8]
	163 Move X0, X20
	164 NotImplemented "Instruction BLR not yet implemented."
	165 Compare X21, 0
	166 JumpIfNotEqual {231}
	167 NotImplemented "Instruction CMP not yet implemented."
	168 Compare W23, 0
	169 JumpIfNotEqual {185}
	170 Compare X19, 0
	171 JumpIfEqual {233}
	172 Move W8, [X19+24]
	173 Compare W8, 0
	174 JumpIfEqual {234}
	175 Move X0, X19
	176 Move X20, [X31+48]
	177 Move X19, [X31+56]
	178 Move X22, [X31+32]
	179 Move X21, [X31+40]
	180 Move X24, [X31+16]
	181 Move X23, [X31+24]
	182 Move X30, [X31+64]
	183 Call TaskFactory.CommonCWAnyLogic, X0
	184 Return X0
	185 Move X20, [X31+48]
	186 Move X19, [X31+56]
	187 Move X22, [X31+32]
	188 Move X21, [X31+40]
	189 Move X24, [X31+16]
	190 Move X23, [X31+24]
	191 Move X30, [X31+64]
	192 Return X0
	193 Move X0, 0xD05000
	194 Move X0, [X0+1400]
	195 Move X23, X22
	196 Call 0x1C17D08
	197 Call 0x1C17F10
	198 Move X21, X0
	199 Move X0, 0xD37000
	200 Move X0, [X0+2320]
	201 Call 0x1C17D08
	202 Move X22, X0
	203 Move X0, 0xD27000
	204 Move X0, [X0+1560]
	205 Call 0x1C17D08
	206 Move X2, X0
	207 Move X0, X21
	208 Move X1, X22
	209 Move X3, X31
	210 Call ArgumentException..ctor, X0, X1, X2
	211 Move X0, 0xD37000
	212 Move X0, [X0+2408]
	213 Call 0x1C17D08
	214 Move X1, X0
	215 Move X0, X21
	216 Call 0x1C17DEC
	217 Call 0x1C17F20
	218 Move X0, 0xD02000
	219 Move X0, [X0+1320]
	220 Call 0x1C17D08
	221 Call 0x1C17F10
	222 Move X19, X0
	223 Move X0, 0xD27000
	224 Move X0, [X0+1560]
	225 Call 0x1C17D08
	226 Move X1, X0
	227 Move X0, X19
	228 Move X2, X31
	229 Call ArgumentNullException..ctor, X0, X1
	230 Call 0x1C17F20
	231 Move X0, X21
	232 Call 0x1C17F18
	233 Call 0x1C17F20
	234 Move X0, 0xD05000
	235 Move X0, [X0+1400]
	236 Call 0x1C17D08
	237 Call 0x1C17F10
	238 Move X19, X0
	239 Move X0, 0xD37000
	240 Move X0, [X0+2368]
	241 Call 0x1C17D08
	242 Move X20, X0
	243 Move X0, 0xD27000
	244 Move X0, [X0+1560]
	245 Call 0x1C17D08
	246 Move X2, X0
	247 Move X0, X19
	248 Move X1, X20
	249 Move X3, X31
	250 Call ArgumentException..ctor, X0, X1, X2
	251 Move X0, 0xD37000
	252 Move X0, [X0+2408]
	253 Call 0x1C17D08
	254 Move X1, X0
	255 Move X0, X19
	256 Call 0x1C17DEC
	257 Move X22, X23
	258 NotImplemented "Instruction CMP not yet implemented."
	259 Call 0x3EB2AD0
	260 Move X21, [X0]
	261 Call 0x3EB2AE0
	262 Move W23, W31
	263 Compare X20, 0
	264 JumpIfNotEqual {144}
	265 Move X19, X0
	266 Move X21, X31
	267 Move X19, X0
	268 Compare X20, 0
	269 JumpIfEqual {291}
	270 Move X8, [X20]
	271 Move X1, [X22]
	272 NotImplemented "Instruction LDRH not yet implemented."
	273 Compare X9, 0
	274 JumpIfEqual {281}
	275 Move X10, [X8+176]
	276 Add X10, X10, 8
	277 NotImplemented "Instruction LDUR not yet implemented."
	278 NotImplemented "Instruction CMP not yet implemented."
	279 Subtract X9, X9, 1
	280 Add X10, X10, 16
	281 Move X0, X20
	282 Move W2, W31
	283 Call 0x1C5D788
	284 NotImplemented "Instruction LDRSW not yet implemented."
	285 Add X8, X8, X9
	286 Add X0, X8, 312
	287 Move X8, [X0]
	288 Move X1, [X0+8]
	289 Move X0, X20
	290 NotImplemented "Instruction BLR not yet implemented."
	291 Compare X21, 0
	292 JumpIfNotEqual {295}
	293 Move X0, X19
	294 Call 0x1D2D690
	295 Move X0, X21
	296 Call 0x1C17F18
	297 Call 0x1991590

Method: System.Boolean AddToActiveTasks(System.Threading.Tasks.Task task)

Disassembly:
	0x033F79CC LDR W8, [X0 + 0xE0]
	0x033F79D0 CBNZ W8, 0x33F79D8
	0x033F79D4 BL 0x1C16DFC
	0x033F79D8 LDR X8, [X20 + 0x20]
	0x033F79DC STR X8, [X21 + 0x28]
	0x033F79E0 TBZ X22, 0x13, 0x33F7A00
	0x033F79E4 TBZ X19, 0x0, 0x33F7A00
	0x033F79E8 MOV X0, X21
	0x033F79EC LDP X20, X19, [X31 + 0x20]
	0x033F79F0 LDP X22, X21, [X31 + 0x10]
	0x033F79F4 MOVZ W1, 0x1
	0x033F79F8 LDP X30, X23, [X31], #0x30
	0x033F79FC B 0x33F77C0
	0x033F7A00 MOVZ W1, 0x1
	0x033F7A04 MOV X0, X21
	0x033F7A08 BL 0x33F0124
	0x033F7A0C LDP X20, X19, [X31 + 0x20]
	0x033F7A10 LDP X22, X21, [X31 + 0x10]
	0x033F7A14 LDP X30, X23, [X31], #0x30
	0x033F7A18 RET
	0x033F7A1C BL 0x1C16F20
	0x033F7A20 CMP W1, 0x1
	0x033F7A24 MOV X19, X0
	0x033F7A28 B.NE 0x33F7A8C
	0x033F7A2C MOV X0, X19
	0x033F7A30 BL 0x3EB1AD0
	0x033F7A34 MOV X19, X0
	0x033F7A38 ADRP X0, 0xD36000
	0x033F7A3C LDR X0, [X0 + 0x6D0]
	0x033F7A40 BL 0x1C16D08
	0x033F7A44 LDR X8, [X19]
	0x033F7A48 LDR X1, [X8]
	0x033F7A4C BL 0x1C17270
	0x033F7A50 TBZ X0, 0x0, 0x33F7A64
	0x033F7A54 LDP X20, X19, [X31 + 0x20]
	0x033F7A58 LDP X22, X21, [X31 + 0x10]
	0x033F7A5C LDP X30, X23, [X31], #0x30
	0x033F7A60 B 0x3EB1AE0
	0x033F7A64 MOVZ W0, 0x8
	0x033F7A68 BL 0x3EB1AF0
	0x033F7A6C LDR X8, [X19]
	0x033F7A70 STR X8, [X0]
	0x033F7A74 ADRP X1, 0xABD000
	0x033F7A78 ADD X1, X1, 0xE58
	0x033F7A7C MOV X2, X31
	0x033F7A80 BL 0x3EB1B00
	0x033F7A84 MOV X19, X0
	0x033F7A88 BL 0x3EB1AE0
	0x033F7A8C MOV X0, X19
	0x033F7A90 BL 0x1D2C690
	0x033F7A94 BL 0x1990590
	0x033F7A98 STR X30, [X31 - 0x30]!
	0x033F7A9C STP X22, X21, [X31 + 0x10]
	0x033F7AA0 STP X20, X19, [X31 + 0x20]
	0x033F7AA4 ADRP X22, 0xFE6000
	0x033F7AA8 LDRB W8, [X22 + 0x49F]
	0x033F7AAC MOV W20, W2
	0x033F7AB0 MOV X21, X1
	0x033F7AB4 MOV X19, X0
	0x033F7AB8 TBNZ X8, 0x0, 0x33F7AD0
	0x033F7ABC ADRP X0, 0xD24000
	0x033F7AC0 LDR X0, [X0 + 0x580]
	0x033F7AC4 BL 0x1C16CF4
	0x033F7AC8 MOVZ W8, 0x1
	0x033F7ACC STRB W8, [X22 + 0x49F]
	0x033F7AD0 MOV X0, X19
	0x033F7AD4 MOV X1, X31
	0x033F7AD8 BL 0x33BDD8C
	0x033F7ADC STR X21, [X19 + 0x18]
	0x033F7AE0 TBZ X20, 0x0, 0x33F7B08
	0x033F7AE4 ADRP X8, 0xD24000
	0x033F7AE8 LDR X8, [X8 + 0x580]
	0x033F7AEC LDR X0, [X8]
	0x033F7AF0 LDR W8, [X0 + 0xE0]
	0x033F7AF4 CBNZ W8, 0x33F7AFC
	0x033F7AF8 BL 0x1C16DFC
	0x033F7AFC MOV X0, X31
	0x033F7B00 BL 0x33DD730
	0x033F7B04 STR X0, [X19 + 0x10]
	0x033F7B08 LDP X20, X19, [X31 + 0x20]
	0x033F7B0C LDP X22, X21, [X31 + 0x10]
	0x033F7B10 LDR X30, [X31], #0x30
	0x033F7B14 RET
	0x033F7B18 STR X30, [X31 - 0x30]!
	0x033F7B1C STP X22, X21, [X31 + 0x10]
	0x033F7B20 STP X20, X19, [X31 + 0x20]
	0x033F7B24 ADRP X21, 0xFE6000
	0x033F7B28 LDRB W8, [X21 + 0x496]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xFE7000
	007 Move X21, 0xCFE000
	008 Move W8, [X19+1154]
	009 Move X21, [X21+1976]
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xD37000
	016 Move X0, [X0+2416]
	017 Call 0x1C17CF4
	018 Move X0, 0xCFE000
	019 Move X0, [X0+1976]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+1154], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X21]
	029 Move X8, [X0+184]
	030 Move X19, [X8+88]
	031 Move [X31+12], W31
	032 Add X1, X31, 12
	033 Move X0, X19
	034 Move X2, X31
	035 Call Monitor.Enter, X0, X1
	036 Move X0, [X21]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {42}
	040 Call 0x1C17DFC
	041 Move X0, [X21]
	042 Compare X20, 0
	043 JumpIfEqual {75}
	044 Move X8, [X0+184]
	045 Move X21, [X8+80]
	046 Move X0, X20
	047 Call Task.get_Id, X0
	048 Move W1, W0
	049 Compare X21, 0
	050 JumpIfEqual {76}
	051 Move X8, 0xD37000
	052 Move X8, [X8+2416]
	053 Move X3, [X8]
	054 Move X0, X21
	055 Move X2, X20
	056 Call Dictionary`2<Int32, Object>.set_Item, X0, X1, X2
	057 Move X20, X31
	058 Move W8, [X31+12]
	059 Compare W8, 0
	060 JumpIfEqual {64}
	061 Move X0, X19
	062 Move X1, X31
	063 Call Monitor.Exit, X0
	064 Compare X20, 0
	065 JumpIfNotEqual {73}
	066 Move X20, [X31+32]
	067 Move X19, [X31+40]
	068 Move X30, [X31+16]
	069 Move X21, [X31+24]
	070 Move W0, 1
	071 Add X31, X31, 48
	072 Return X0
	073 Move X0, X20
	074 Call 0x1C17F18
	075 Call 0x1C17F20
	076 Call 0x1C17F20
	077 Move X21, X0
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X0, X21
	080 Call 0x3EB2AD0
	081 Move X20, [X0]
	082 Call 0x3EB2AE0
	083 Move X20, X31
	084 Move X21, X0
	085 Move W8, [X31+12]
	086 Compare W8, 0
	087 JumpIfEqual {91}
	088 Move X0, X19
	089 Move X1, X31
	090 Call Monitor.Exit, X0
	091 Compare X20, 0
	092 JumpIfNotEqual {95}
	093 Move X0, X21
	094 Call 0x1D2D690
	095 Move X0, X20
	096 Call 0x1C17F18
	097 Call 0x1991590

Method: System.Void RemoveFromActiveTasks(System.Int32 taskId)

Disassembly:
	0x033F7B2C MOV W20, W2
	0x033F7B30 MOV X19, X0
	0x033F7B34 TBNZ X8, 0x0, 0x33F7B58
	0x033F7B38 ADRP X0, 0xD36000
	0x033F7B3C LDR X0, [X0 + 0x7F8]
	0x033F7B40 BL 0x1C16CF4
	0x033F7B44 ADRP X0, 0xCFD000
	0x033F7B48 LDR X0, [X0 + 0x7B8]
	0x033F7B4C BL 0x1C16CF4
	0x033F7B50 MOVZ W8, 0x1
	0x033F7B54 STRB W8, [X21 + 0x496]
	0x033F7B58 ADRP X21, 0xCFD000
	0x033F7B5C LDR X21, [X21 + 0x7B8]
	0x033F7B60 TBZ X20, 0x0, 0x33F7B78
	0x033F7B64 LDR X20, [X19 + 0x20]
	0x033F7B68 MOV X0, X31
	0x033F7B6C BL 0x33DD700
	0x033F7B70 CMP X20, X0
	0x033F7B74 B.EQ 0x33F7BD8
	0x033F7B78 ADRP X8, 0xD36000
	0x033F7B7C LDR X8, [X8 + 0x7F8]
	0x033F7B80 LDR X0, [X8]
	0x033F7B84 LDR W8, [X0 + 0xE0]
	0x033F7B88 CBNZ W8, 0x33F7B90
	0x033F7B8C BL 0x1C16DFC
	0x033F7B90 MOV X0, X31
	0x033F7B94 BL 0x340018C
	0x033F7B98 LDR X8, [X21]
	0x033F7B9C MOV X20, X0
	0x033F7BA0 LDR W9, [X8 + 0xE0]
	0x033F7BA4 CBNZ W9, 0x33F7BB4
	0x033F7BA8 MOV X0, X8
	0x033F7BAC BL 0x1C16DFC
	0x033F7BB0 LDR X8, [X21]
	0x033F7BB4 MOV X0, X8
	0x033F7BB8 BL 0x1C16D0C
	0x033F7BBC MOV X1, X20
	0x033F7BC0 MOV X2, X19
	0x033F7BC4 LDP X20, X19, [X31 + 0x20]
	0x033F7BC8 LDP X22, X21, [X31 + 0x10]
	0x033F7BCC MOV X3, X0
	0x033F7BD0 LDR X30, [X31], #0x30
	0x033F7BD4 B 0x33F7C7C
	0x033F7BD8 ADRP X20, 0xFE6000
	0x033F7BDC LDRB W8, [X20 + 0x503]
	0x033F7BE0 CBNZ W8, 0x33F7C10
	0x033F7BE4 ADRP X0, 0xD36000
	0x033F7BE8 LDR X0, [X0 + 0x9E0]
	0x033F7BEC BL 0x1C16CF4
	0x033F7BF0 ADRP X0, 0xD36000
	0x033F7BF4 LDR X0, [X0 + 0x808]
	0x033F7BF8 BL 0x1C16CF4
	0x033F7BFC ADRP X0, 0xD2E000
	0x033F7C00 LDR X0, [X0 + 0x948]
	0x033F7C04 BL 0x1C16CF4
	0x033F7C08 MOVZ W8, 0x1
	0x033F7C0C STRB W8, [X20 + 0x503]
	0x033F7C10 ADRP X22, 0xD36000
	0x033F7C14 LDR X22, [X22 + 0x808]
	0x033F7C18 LDR X8, [X22]
	0x033F7C1C LDR X8, [X8 + 0xB8]
	0x033F7C20 LDR X20, [X8]
	0x033F7C24 CBNZ X20, 0x33F7C60
	0x033F7C28 ADRP X8, 0xD2E000
	0x033F7C2C LDR X8, [X8 + 0x948]
	0x033F7C30 LDR X0, [X8]
	0x033F7C34 BL 0x1C16F10
	0x033F7C38 ADRP X8, 0xD36000
	0x033F7C3C LDR X8, [X8 + 0x9E0]
	0x033F7C40 MOV X1, X31
	0x033F7C44 MOV X3, X31
	0x033F7C48 MOV X20, X0
	0x033F7C4C LDR X2, [X8]
	0x033F7C50 BL 0x33E1224
	0x033F7C54 LDR X8, [X22]
	0x033F7C58 LDR X8, [X8 + 0xB8]
	0x033F7C5C STR X20, [X8]
	0x033F7C60 LDR X0, [X21]
	0x033F7C64 LDR X19, [X19 + 0x18]
	0x033F7C68 LDR W8, [X0 + 0xE0]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xFE7000
	007 Move X21, 0xCFE000
	008 Move W8, [X19+1155]
	009 Move X21, [X21+1976]
	010 Move W20, W0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xD37000
	016 Move X0, [X0+2424]
	017 Call 0x1C17CF4
	018 Move X0, 0xCFE000
	019 Move X0, [X0+1976]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+1155], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X21]
	029 Move X8, [X0+184]
	030 Move X19, [X8+88]
	031 Move [X31+12], W31
	032 Add X1, X31, 12
	033 Move X0, X19
	034 Move X2, X31
	035 Call Monitor.Enter, X0, X1
	036 Move X0, [X21]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {42}
	040 Call 0x1C17DFC
	041 Move X0, [X21]
	042 Move X8, [X0+184]
	043 Move X0, [X8+80]
	044 Compare X0, 0
	045 JumpIfEqual {68}
	046 Move X8, 0xD37000
	047 Move X8, [X8+2424]
	048 Move X2, [X8]
	049 Move W1, W20
	050 Call Dictionary`2<Int32, Object>.Remove, X0, X1
	051 Move X20, X31
	052 Move W8, [X31+12]
	053 Compare W8, 0
	054 JumpIfEqual {58}
	055 Move X0, X19
	056 Move X1, X31
	057 Call Monitor.Exit, X0
	058 Compare X20, 0
	059 JumpIfNotEqual {66}
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X30, [X31+16]
	063 Move X21, [X31+24]
	064 Add X31, X31, 48
	065 Return 
	066 Move X0, X20
	067 Call 0x1C17F18
	068 Call 0x1C17F20
	069 Move X21, X0
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X0, X21
	072 Call 0x3EB2AD0
	073 Move X20, [X0]
	074 Call 0x3EB2AE0
	075 Move X20, X31
	076 Move X21, X0
	077 Move W8, [X31+12]
	078 Compare W8, 0
	079 JumpIfEqual {83}
	080 Move X0, X19
	081 Move X1, X31
	082 Call Monitor.Exit, X0
	083 Compare X20, 0
	084 JumpIfNotEqual {87}
	085 Move X0, X21
	086 Call 0x1D2D690
	087 Move X0, X20
	088 Call 0x1C17F18
	089 Call 0x1991590

Method: System.Void MarkAborted(System.Threading.ThreadAbortException e)

Disassembly:
	0x033F7C6C CBNZ W8, 0x33F7BB8

ISIL:
	001 Return 

Method: System.Void ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot)

Disassembly:
	0x033F37B4 BL 0x1C16D44
	0x033F37B8 AND W8, W19, 0x600000
	0x033F37BC CMP W8, 0x400000
	0x033F37C0 B.NE 0x33F37D0
	0x033F37C4 MOVZ W0, 0x1
	0x033F37C8 B 0x33F3844
	0x033F37CC BL 0x1C16F20
	0x033F37D0 ADRP X0, 0xD00000
	0x033F37D4 LDR X0, [X0 + 0x5B0]
	0x033F37D8 BL 0x1C16D08
	0x033F37DC BL 0x1C16F10
	0x033F37E0 MOV X19, X0
	0x033F37E4 ADRP X0, 0xD3A000
	0x033F37E8 LDR X0, [X0 + 0x820]
	0x033F37EC BL 0x1C16D08
	0x033F37F0 MOV X1, X0
	0x033F37F4 MOV X0, X19
	0x033F37F8 MOV X2, X31
	0x033F37FC BL 0x337DF1C
	0x033F3800 ADRP X0, 0xD3A000
	0x033F3804 LDR X0, [X0 + 0x828]
	0x033F3808 BL 0x1C16D08
	0x033F380C MOV X1, X0
	0x033F3810 MOV X0, X19
	0x033F3814 BL 0x1C16DEC
	0x033F3818 CMP W1, 0x1
	0x033F381C B.NE 0x33F3854
	0x033F3820 BL 0x3EB1AD0
	0x033F3824 LDR X19, [X0]
	0x033F3828 BL 0x3EB1AE0
	0x033F382C LDR W8, [X22 + 0x10]
	0x033F3830 SUB W8, W8, 0x1
	0x033F3834 BIC W8, W8, W8, 0x1F
	0x033F3838 STR W8, [X22 + 0x10]
	0x033F383C CBNZ X19, 0x33F3868
	0x033F3840 MOV W0, W31
	0x033F3844 LDP X20, X19, [X31 + 0x20]
	0x033F3848 LDP X22, X21, [X31 + 0x10]
	0x033F384C LDR X30, [X31], #0x30
	0x033F3850 RET
	0x033F3854 LDR W8, [X22 + 0x10]
	0x033F3858 SUB W8, W8, 0x1
	0x033F385C BIC W8, W8, W8, 0x1F
	0x033F3860 STR W8, [X22 + 0x10]
	0x033F3864 B 0x33F3884
	0x033F3868 MOV X0, X19
	0x033F386C BL 0x1C16F18
	0x033F3870 LDR W8, [X22 + 0x10]
	0x033F3874 SUB W8, W8, 0x1
	0x033F3878 BIC W8, W8, W8, 0x1F
	0x033F387C STR W8, [X22 + 0x10]
	0x033F3880 CBNZ X19, 0x33F3888
	0x033F3884 BL 0x1D2C690
	0x033F3888 MOV X0, X19
	0x033F388C BL 0x1C16F18
	0x033F3890 BL 0x1990590
	0x033F3894 STP X30, X21, [X31 - 0x20]!
	0x033F3898 STP X20, X19, [X31 + 0x10]
	0x033F389C ADRP X20, 0xFEA000
	0x033F38A0 LDRB W8, [X20 + 0x4C0]
	0x033F38A4 MOV X19, X0
	0x033F38A8 TBNZ X8, 0x0, 0x33F38C0
	0x033F38AC ADRP X0, 0xD08000
	0x033F38B0 LDR X0, [X0 + 0x7E8]
	0x033F38B4 BL 0x1C16CF4
	0x033F38B8 MOVZ W8, 0x1
	0x033F38BC STRB W8, [X20 + 0x4C0]
	0x033F38C0 LDR W20, [X19 + 0x10]!
	0x033F38C4 BL 0x1C16D44
	0x033F38C8 CBNZ W20, 0x33F3910
	0x033F38CC ADRP X21, 0xD08000
	0x033F38D0 LDR X21, [X21 + 0x7E8]
	0x033F38D4 LDR X0, [X21]
	0x033F38D8 LDR W8, [X0 + 0xE0]
	0x033F38DC CBNZ W8, 0x33F38E8
	0x033F38E0 BL 0x1C16DFC
	0x033F38E4 LDR X0, [X21]
	0x033F38E8 LDR X8, [X0 + 0xB8]
	0x033F38EC ADD X0, X8, 0x10
	0x033F38F0 BL 0x1C24278
	0x033F38F4 CBZ W0, 0x33F38D4
	0x033F38F8 MOV W20, W0
	0x033F38FC BL 0x1C16D44
	0x033F3900 MOV X0, X19
	0x033F3904 MOV W1, W20
	0x033F3908 MOV W2, W31
	0x033F390C BL 0x1C241D4
	0x033F3910 LDR W19, [X19]
	0x033F3914 BL 0x1C16D44
	0x033F3918 MOV W0, W19
	0x033F391C LDP X20, X19, [X31 + 0x10]
	0x033F3920 LDP X30, X21, [X31], #0x20
	0x033F3924 RET
	0x033F3928 STP X30, X23, [X31 - 0x30]!
	0x033F392C STP X22, X21, [X31 + 0x10]
	0x033F3930 STP X20, X19, [X31 + 0x20]
	0x033F3934 ADRP X20, 0xFEA000
	0x033F3938 LDRB W8, [X20 + 0x467]
	0x033F393C MOV X21, X2
	0x033F3940 MOV W22, W1
	0x033F3944 MOV X19, X0
	0x033F3948 TBNZ X8, 0x0, 0x33F3960

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xFEB000
	009 Move W8, [X21+1156]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0xD33000
	017 Move X0, [X0+2376]
	018 Call 0x1C17CF4
	019 Move X0, 0xD29000
	020 Move X0, [X0+1408]
	021 Call 0x1C17CF4
	022 Move X0, 0xD3B000
	023 Move X0, [X0+2032]
	024 Call 0x1C17CF4
	025 Move X0, 0xD02000
	026 Move X0, [X0+1976]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+1156], W8
	030 Move X23, [X19]
	031 Move [X19], X20
	032 Move X0, X20
	033 Call Task.get_CapturedContext, X0
	034 Move X21, X0
	035 Compare X0, 0
	036 JumpIfEqual {81}
	037 Move X24, 0xD02000
	038 Move X24, [X24+1976]
	039 Move X0, [X24]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {45}
	043 Call 0x1C17DFC
	044 Move X0, [X24]
	045 Move X8, [X0+184]
	046 Move X22, [X8+64]
	047 Compare X22, 0
	048 JumpIfNotEqual {68}
	049 Move X8, 0xD33000
	050 Move X8, [X8+2376]
	051 Move X0, [X8]
	052 Call 0x1C17F10
	053 Move X8, 0xD3B000
	054 Move X8, [X8+2032]
	055 Move X22, X0
	056 Move X2, [X8]
	057 Move X1, X31
	058 Move X3, X31
	059 Call ContextCallback..ctor, X0, X1, X2
	060 Move X0, [X24]
	061 Move W8, [X0+224]
	062 Compare W8, 0
	063 JumpIfNotEqual {66}
	064 Call 0x1C17DFC
	065 Move X0, [X24]
	066 Move X8, [X0+184]
	067 Move [X8+64], X22
	068 Move X8, 0xD29000
	069 Move X8, [X8+1408]
	070 Move X0, [X8]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Move W3, 1
	076 Move X0, X21
	077 Move X1, X22
	078 Move X2, X20
	079 Move X4, X31
	080 Call ExecutionContext.Run, X0, X1, X2, X3
	081 Move X0, X20
	082 Call Task.Execute, X0
	083 Move W1, 1
	084 Move X0, X20
	085 Call Task.Finish, X0, X1
	086 Move [X19], X23
	087 Move X20, [X31+48]
	088 Move X19, [X31+56]
	089 Move X22, [X31+32]
	090 Move X21, [X31+40]
	091 Move X24, [X31+16]
	092 Move X23, [X31+24]
	093 Move X30, [X31+64]
	094 Return 
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Call 0x3EB2AD0
	097 Move X20, [X0]
	098 Call 0x3EB2AE0
	099 Move [X19], X23
	100 Compare X20, 0
	101 JumpIfEqual {87}
	102 Move X0, X20
	103 Call 0x1C17F18
	104 Move [X19], X23
	105 Move [X19], X23
	106 Compare X20, 0
	107 JumpIfNotEqual {109}
	108 Call 0x1D2D690
	109 Move X0, X20
	110 Call 0x1C17F18
	111 Call 0x1991590

Method: System.Void .cctor()

Disassembly:
	0x033F7C7C SUB X31, X31, 0x40
	0x033F7C80 STP X30, X23, [X31 + 0x10]
	0x033F7C84 STP X22, X21, [X31 + 0x20]
	0x033F7C88 STP X20, X19, [X31 + 0x30]
	0x033F7C8C LDR X23, [X3]
	0x033F7C90 MOV X0, X31
	0x033F7C94 MOV X20, X3
	0x033F7C98 MOV X21, X2
	0x033F7C9C MOV X22, X1
	0x033F7CA0 BL 0x33E5E78
	0x033F7CA4 MOV X19, X0
	0x033F7CA8 CBZ X23, 0x33F7CB0
	0x033F7CAC STR X31, [X20]
	0x033F7CB0 CBZ X22, 0x33F7CF8
	0x033F7CB4 LDR X0, [X22 + 0x40]
	0x033F7CB8 LDR X8, [X22 + 0x18]
	0x033F7CBC LDR X2, [X22 + 0x28]
	0x033F7CC0 MOV X1, X21
	0x033F7CC4 BLR X8
	0x033F7CC8 MOV X21, X31
	0x033F7CCC CBZ X23, 0x33F7CD4
	0x033F7CD0 STR X23, [X20]
	0x033F7CD4 MOV X0, X19
	0x033F7CD8 MOV X1, X31
	0x033F7CDC BL 0x33E5BA4
	0x033F7CE0 CBNZ X21, 0x33F7CFC
	0x033F7CE4 LDP X20, X19, [X31 + 0x30]
	0x033F7CE8 LDP X22, X21, [X31 + 0x20]
	0x033F7CEC LDP X30, X23, [X31 + 0x10]
	0x033F7CF0 ADD X31, X31, 0x40
	0x033F7CF4 RET
	0x033F7CF8 BL 0x1C16F20
	0x033F7CFC MOV X0, X21
	0x033F7D00 BL 0x1C16F18
	0x033F7D04 CMP W1, 0x1
	0x033F7D08 MOV X21, X0
	0x033F7D0C B.NE 0x33F7D88
	0x033F7D10 MOV X0, X21
	0x033F7D14 BL 0x3EB1AD0
	0x033F7D18 MOV X21, X0
	0x033F7D1C ADRP X0, 0xCFC000
	0x033F7D20 LDR X0, [X0 + 0x7D0]
	0x033F7D24 BL 0x1C16D08
	0x033F7D28 LDR X8, [X21]
	0x033F7D2C LDR X1, [X8]
	0x033F7D30 BL 0x1C17270
	0x033F7D34 TBZ X0, 0x0, 0x33F7D4C
	0x033F7D38 LDR X21, [X21]
	0x033F7D3C BL 0x3EB1AE0
	0x033F7D40 MOV X0, X21
	0x033F7D44 BL 0x33F8604
	0x033F7D48 B 0x33F7CC8
	0x033F7D4C MOVZ W0, 0x8
	0x033F7D50 BL 0x3EB1AF0
	0x033F7D54 LDR X8, [X21]
	0x033F7D58 STR X8, [X0]
	0x033F7D5C ADRP X1, 0xABD000
	0x033F7D60 ADD X1, X1, 0xE58
	0x033F7D64 MOV X2, X31
	0x033F7D68 BL 0x3EB1B00
	0x033F7D6C B 0x33F7D70
	0x033F7D70 MOV X21, X0
	0x033F7D74 B 0x33F7D88
	0x033F7D78 MOV X22, X1
	0x033F7D7C MOV X21, X0
	0x033F7D80 BL 0x3EB1AE0
	0x033F7D84 MOV W1, W22
	0x033F7D88 MOVZ W8, 0x1
	0x033F7D8C CMP W1, W8
	0x033F7D90 B.NE 0x33F7DB4
	0x033F7D94 MOV X0, X21
	0x033F7D98 BL 0x3EB1AD0
	0x033F7D9C LDR X8, [X0]
	0x033F7DA0 STR X8, [X31 + 0x8]
	0x033F7DA4 BL 0x3EB1AE0
	0x033F7DA8 LDR X21, [X31 + 0x8]
	0x033F7DAC CBNZ X23, 0x33F7CD0
	0x033F7DB0 B 0x33F7CD4
	0x033F7DB4 STR X31, [X31 + 0x8]
	0x033F7DB8 B 0x33F7DC0
	0x033F7DBC MOV X21, X0
	0x033F7DC0 CBZ X23, 0x33F7DC8
	0x033F7DC4 STR X23, [X20]
	0x033F7DC8 MOV X0, X19
	0x033F7DCC MOV X1, X31
	0x033F7DD0 BL 0x33E5BA4
	0x033F7DD4 LDR X8, [X31 + 0x8]
	0x033F7DD8 CBNZ X8, 0x33F7DE4
	0x033F7DDC MOV X0, X21
	0x033F7DE0 BL 0x1D2C690
	0x033F7DE4 LDR X0, [X31 + 0x8]
	0x033F7DE8 BL 0x1C16F18
	0x033F7DEC BL 0x1990590
	0x033F7DF0 STP X30, X21, [X31 - 0x20]!
	0x033F7DF4 STP X20, X19, [X31 + 0x10]
	0x033F7DF8 ADRP X20, 0xFE6000
	0x033F7DFC LDRB W8, [X20 + 0x497]
	0x033F7E00 MOV X19, X0
	0x033F7E04 TBNZ X8, 0x0, 0x33F7E1C
	0x033F7E08 ADRP X0, 0xD36000
	0x033F7E0C LDR X0, [X0 + 0x7F8]
	0x033F7E10 BL 0x1C16CF4
	0x033F7E14 MOVZ W8, 0x1
	0x033F7E18 STRB W8, [X20 + 0x497]
	0x033F7E1C CBZ X19, 0x33F7E78
	0x033F7E20 ADRP X21, 0xD36000
	0x033F7E24 LDR X21, [X21 + 0x7F8]
	0x033F7E28 LDR X8, [X19]
	0x033F7E2C LDR X1, [X21]
	0x033F7E30 CMP X8, X1
	0x033F7E34 B.NE 0x33F7E7C
	0x033F7E38 LDR W8, [X1 + 0xE0]
	0x033F7E3C LDR X20, [X19 + 0x20]
	0x033F7E40 CBNZ W8, 0x33F7E4C
	0x033F7E44 MOV X0, X1
	0x033F7E48 BL 0x1C16DFC
	0x033F7E4C CBZ X20, 0x33F7E78
	0x033F7E50 LDR X8, [X21]
	0x033F7E54 LDR X9, [X20]
	0x033F7E58 LDR X2, [X19 + 0x18]
	0x033F7E5C MOV X0, X20
	0x033F7E60 LDR X8, [X8 + 0xB8]
	0x033F7E64 LDP X4, X3, [X9 + 0x188]
	0x033F7E68 LDP X20, X19, [X31 + 0x10]
	0x033F7E6C LDR X1, [X8]
	0x033F7E70 LDP X30, X21, [X31], #0x20
	0x033F7E74 BR X4
	0x033F7E78 BL 0x1C16F20
	0x033F7E7C MOV X0, X19
	0x033F7E80 BL 0x1C171E0
	0x033F7E84 STR X30, [X31 - 0x20]!
	0x033F7E88 STP X20, X19, [X31 + 0x10]
	0x033F7E8C ADRP X19, 0xFE6000
	0x033F7E90 ADRP X20, 0xD36000
	0x033F7E94 LDRB W8, [X19 + 0x498]
	0x033F7E98 LDR X20, [X20 + 0x7F8]
	0x033F7E9C TBNZ X8, 0x0, 0x33F7ECC
	0x033F7EA0 ADRP X0, 0xD2E000
	0x033F7EA4 LDR X0, [X0 + 0x948]
	0x033F7EA8 BL 0x1C16CF4
	0x033F7EAC ADRP X0, 0xD36000
	0x033F7EB0 LDR X0, [X0 + 0x9E8]
	0x033F7EB4 BL 0x1C16CF4
	0x033F7EB8 ADRP X0, 0xD36000
	0x033F7EBC LDR X0, [X0 + 0x7F8]
	0x033F7EC0 BL 0x1C16CF4
	0x033F7EC4 MOVZ W8, 0x1
	0x033F7EC8 STRB W8, [X19 + 0x498]
	0x033F7ECC LDR X0, [X20]
	0x033F7ED0 LDR W8, [X0 + 0xE0]
	0x033F7ED4 CBNZ W8, 0x33F7EE0
	0x033F7ED8 BL 0x1C16DFC
	0x033F7EDC LDR X0, [X20]
	0x033F7EE0 LDR X8, [X0 + 0xB8]
	0x033F7EE4 LDR X19, [X8 + 0x8]
	0x033F7EE8 CBNZ X19, 0x33F7F34
	0x033F7EEC ADRP X8, 0xD2E000
	0x033F7EF0 LDR X8, [X8 + 0x948]
	0x033F7EF4 LDR X0, [X8]
	0x033F7EF8 BL 0x1C16F10
	0x033F7EFC ADRP X8, 0xD36000
	0x033F7F00 LDR X8, [X8 + 0x9E8]
	0x033F7F04 MOV X1, X31
	0x033F7F08 MOV X3, X31
	0x033F7F0C MOV X19, X0
	0x033F7F10 LDR X2, [X8]
	0x033F7F14 BL 0x33E1224
	0x033F7F18 LDR X0, [X20]
	0x033F7F1C LDR W8, [X0 + 0xE0]
	0x033F7F20 CBNZ W8, 0x33F7F2C
	0x033F7F24 BL 0x1C16DFC
	0x033F7F28 LDR X0, [X20]
	0x033F7F2C LDR X8, [X0 + 0xB8]
	0x033F7F30 STR X19, [X8 + 0x8]
	0x033F7F34 MOV X0, X19
	0x033F7F38 LDP X20, X19, [X31 + 0x10]
	0x033F7F3C LDR X30, [X31], #0x20
	0x033F7F40 RET
	0x033F7F44 STR X30, [X31 - 0x30]!
	0x033F7F48 STP X22, X21, [X31 + 0x10]
	0x033F7F4C STP X20, X19, [X31 + 0x20]
	0x033F7F50 ADRP X20, 0xFE6000
	0x033F7F54 ADRP X19, 0xD36000
	0x033F7F58 LDRB W8, [X20 + 0x499]
	0x033F7F5C LDR X19, [X19 + 0x9F0]
	0x033F7F60 TBNZ X8, 0x0, 0x33F7F9C
	0x033F7F64 ADRP X0, 0xD08000
	0x033F7F68 LDR X0, [X0 + 0x4A0]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X19, 0xFE7000
	014 Move X9, 0xD03000
	015 Move X21, 0xCFE000
	016 Move X22, 0xD27000
	017 Move X20, 0xD37000
	018 Move X23, 0xD37000
	019 Move W8, [X19+1157]
	020 Move X9, [X9+3264]
	021 Move X21, [X21+1976]
	022 Move X22, [X22+3656]
	023 Move X20, [X20+2432]
	024 Move X23, [X23+2272]
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {75}
	029 Move X0, 0xD27000
	030 Move X0, [X0+3656]
	031 Move X24, X9
	032 Call 0x1C17CF4
	033 Move X0, 0xD37000
	034 Move X0, [X0+2440]
	035 Call 0x1C17CF4
	036 Move X0, 0xD37000
	037 Move X0, [X0+2448]
	038 Call 0x1C17CF4
	039 Move X0, 0xD37000
	040 Move X0, [X0+2456]
	041 Call 0x1C17CF4
	042 Move X0, 0xD37000
	043 Move X0, [X0+2464]
	044 Call 0x1C17CF4
	045 Move X0, 0xD37000
	046 Move X0, [X0+2472]
	047 Call 0x1C17CF4
	048 Move X0, 0xD03000
	049 Move X0, [X0+3264]
	050 Call 0x1C17CF4
	051 Move X0, 0xD05000
	052 Move X0, [X0+2016]
	053 Call 0x1C17CF4
	054 Move X0, 0xD37000
	055 Move X0, [X0+2432]
	056 Call 0x1C17CF4
	057 Move X0, 0xCFE000
	058 Move X0, [X0+1976]
	059 Call 0x1C17CF4
	060 Move X0, 0xD37000
	061 Move X0, [X0+2480]
	062 Call 0x1C17CF4
	063 Move X0, 0xD37000
	064 Move X0, [X0+2488]
	065 Call 0x1C17CF4
	066 Move X0, 0xD37000
	067 Move X0, [X0+2496]
	068 Call 0x1C17CF4
	069 Move X0, 0xD37000
	070 Move X0, [X0+2272]
	071 Call 0x1C17CF4
	072 Move X9, X24
	073 Move W8, 1
	074 Move [X19+1157], W8
	075 Move X26, 0xD37000
	076 Move X25, 0xD37000
	077 Move X24, 0xD05000
	078 Move X29, 0xD37000
	079 Move X28, 0xD37000
	080 Move X26, [X26+2456]
	081 Move X25, [X25+2480]
	082 Move X24, [X24+2016]
	083 Move X29, [X29+2464]
	084 Move X28, [X28+2488]
	085 Move X0, [X9]
	086 Move X27, X9
	087 Call 0x1C17F10
	088 Move X1, X31
	089 Move X19, X0
	090 Call Object..ctor, X0
	091 Move X8, [X21]
	092 Move X8, [X8+184]
	093 Move [X8+8], X19
	094 Move X0, [X22]
	095 Call 0x1C17F10
	096 Move X2, [X20]
	097 Move X1, X31
	098 Move X3, X31
	099 Move X19, X0
	100 Call Action`1<Object>..ctor, X0, X1, X2
	101 Move X8, [X21]
	102 Move X8, [X8+184]
	103 Move [X8+24], X19
	104 Move X0, [X23]
	105 Move W8, [X0+224]
	106 Compare W8, 0
	107 JumpIfNotEqual {110}
	108 Call 0x1C17DFC
	109 Move X0, [X23]
	110 Move X8, [X0+184]
	111 Move X0, [X26]
	112 Move X19, [X8]
	113 Call 0x1C17F10
	114 Move X2, [X25]
	115 Move X1, X19
	116 Move X3, X31
	117 Move X20, X0
	118 Call Func`1<Object>..ctor, X0, X1, X2
	119 Move X8, [X21]
	120 Move X8, [X8+184]
	121 Move [X8+32], X20
	122 Move X0, [X24]
	123 Call 0x1C17F10
	124 Move X1, X31
	125 Move W2, W31
	126 Move W3, W31
	127 Move X4, X31
	128 Move X19, X0
	129 Call TaskFactory..ctor, X0, X1, X2, X3, X4
	130 Move X0, [X21]
	131 Move X8, [X0+184]
	132 Move [X8+40], X19
	133 Call 0x1C17F10
	134 Move W2, 0x4000
	135 Move W1, W31
	136 Move X3, X31
	137 Move X19, X0
	138 Call Task..ctor, X0, X1, X2, X3
	139 Move X8, [X21]
	140 Move X8, [X8+184]
	141 Move [X8+48], X19
	142 Move X8, [X23]
	143 Move X0, [X29]
	144 Move X8, [X8+184]
	145 Move X19, [X8]
	146 Call 0x1C17F10
	147 Move X2, [X28]
	148 Move X1, X19
	149 Move X3, X31
	150 Move X20, X0
	151 Call Predicate`1<Object>..ctor, X0, X1, X2
	152 Move X8, [X21]
	153 Move X8, [X8+184]
	154 Move [X8+56], X20
	155 Move X8, [X23]
	156 Move X8, [X8+184]
	157 Move X19, [X8]
	158 Move X8, 0xD37000
	159 Move X8, [X8+2472]
	160 Move X0, [X8]
	161 Call 0x1C17F10
	162 Move X8, 0xD37000
	163 Move X8, [X8+2496]
	164 Move X1, X19
	165 Move X3, X31
	166 Move X20, X0
	167 Move X2, [X8]
	168 Call Predicate`1<Object>..ctor, X0, X1, X2
	169 Move X8, [X21]
	170 Move X8, [X8+184]
	171 Move [X8+72], X20
	172 Move X8, 0xD37000
	173 Move X8, [X8+2448]
	174 Move X0, [X8]
	175 Call 0x1C17F10
	176 Move X8, 0xD37000
	177 Move X8, [X8+2440]
	178 Move X19, X0
	179 Move X1, [X8]
	180 Call Dictionary`2<Int32, Object>..ctor, X0
	181 Move X8, [X21]
	182 Move X8, [X8+184]
	183 Move [X8+80], X19
	184 Move X0, [X27]
	185 Call 0x1C17F10
	186 Move X1, X31
	187 Move X19, X0
	188 Call Object..ctor, X0
	189 Move X8, [X21]
	190 Move X22, [X31+64]
	191 Move X21, [X31+72]
	192 Move X24, [X31+48]
	193 Move X23, [X31+56]
	194 Move X26, [X31+32]
	195 Move X25, [X31+40]
	196 Move X8, [X8+184]
	197 Move X28, [X31+16]
	198 Move X27, [X31+24]
	199 Move [X8+88], X19
	200 Move X20, [X31+80]
	201 Move X19, [X31+88]
	202 Move X29, [X31+96]
	203 Move X30, [X31+104]
	204 Return 

