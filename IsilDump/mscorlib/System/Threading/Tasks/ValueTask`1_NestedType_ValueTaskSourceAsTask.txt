Type: System.Threading.Tasks.ValueTask`1/ValueTaskSourceAsTask

Method: System.Void .ctor(System.Threading.Tasks.Sources.IValueTaskSource`1<TResult> source, System.Int16 token)

Disassembly:
	0x02790D44 LDP X30, X21, [X31], #0x20
	0x02790D48 B 0x33ED11C
	0x02790D4C STP X30, X21, [X31 - 0x20]!
	0x02790D50 STP X20, X19, [X31 + 0x10]
	0x02790D54 LDR X19, [X0]
	0x02790D58 CBZ X19, 0x2790E1C
	0x02790D5C MOV X20, X0
	0x02790D60 LDR X0, [X1 + 0x20]
	0x02790D64 MOV X21, X1
	0x02790D68 LDRB W8, [X0 + 0x135]
	0x02790D6C TBNZ X8, 0x0, 0x2790D74
	0x02790D70 BL 0x1C5C684
	0x02790D74 LDR X8, [X0 + 0xC0]
	0x02790D78 LDR X0, [X8 + 0x10]
	0x02790D7C LDRB W8, [X0 + 0x135]
	0x02790D80 TBNZ X8, 0x0, 0x2790D88
	0x02790D84 BL 0x1C5C684
	0x02790D88 LDR X8, [X19]
	0x02790D8C LDRB W9, [X0 + 0x130]
	0x02790D90 LDRB W10, [X8 + 0x130]
	0x02790D94 CMP W10, W9
	0x02790D98 B.CC 0x2790DB0
	0x02790D9C LDR X8, [X8 + 0xC8]
	0x02790DA0 ADD X8, X8, X9, 0x3, LSL
	0x02790DA4 LDUR X8, [X8 - 0x8]
	0x02790DA8 CMP X8, X0
	0x02790DAC B.EQ 0x2790E54
	0x02790DB0 LDR X0, [X21 + 0x20]
	0x02790DB4 LDRH W20, [X20 + 0xC]
	0x02790DB8 LDRB W8, [X0 + 0x135]
	0x02790DBC TBNZ X8, 0x0, 0x2790DC4
	0x02790DC0 BL 0x1C5C684
	0x02790DC4 LDR X8, [X0 + 0xC0]
	0x02790DC8 LDR X1, [X8 + 0x18]
	0x02790DCC LDRB W8, [X1 + 0x135]
	0x02790DD0 TBNZ X8, 0x0, 0x2790DE0
	0x02790DD4 MOV X0, X1
	0x02790DD8 BL 0x1C5C684
	0x02790DDC MOV X1, X0
	0x02790DE0 LDR X8, [X19]
	0x02790DE4 LDRH W9, [X8 + 0x12E]
	0x02790DE8 CBZ X9, 0x2790E0C
	0x02790DEC LDR X10, [X8 + 0xB0]
	0x02790DF0 ADD X10, X10, 0x8
	0x02790DF4 LDUR X11, [X10 - 0x8]
	0x02790DF8 CMP X11, X1
	0x02790DFC B.EQ 0x2790E24
	0x02790E00 SUBS X9, X9, 0x1
	0x02790E04 ADD X10, X10, 0x10
	0x02790E08 B.NE 0x2790DF4
	0x02790E0C MOV X0, X19
	0x02790E10 MOV W2, W31
	0x02790E14 BL 0x1C5C788
	0x02790E18 B 0x2790E30
	0x02790E1C MOVZ W0, 0x1
	0x02790E20 B 0x2790E48
	0x02790E24 LDRSW X9, [X10]
	0x02790E28 ADD X8, X8, X9, 0x4, LSL
	0x02790E2C ADD X0, X8, 0x138
	0x02790E30 LDP X8, X2, [X0]
	0x02790E34 MOV X0, X19
	0x02790E38 MOV W1, W20
	0x02790E3C BLR X8
	0x02790E40 CMP W0, 0x1
	0x02790E44 CSET W0, EQ
	0x02790E48 LDP X20, X19, [X31 + 0x10]
	0x02790E4C LDP X30, X21, [X31], #0x20
	0x02790E50 RET
	0x02790E54 MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X3+32]
	007 Move X20, X1
	008 Move X22, X3
	009 Move W19, W2
	010 Move X8, [X8+192]
	011 Move X21, X0
	012 Move X1, [X8]
	013 Call Task`1<Int32>..ctor, X0
	014 Move [X21+88], X20
	015 NotImplemented "Instruction STRH not yet implemented."
	016 Move X8, [X22+32]
	017 Move X8, [X8+192]
	018 Move X0, [X8+32]
	019 Move W8, [X0+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {25}
	024 Call 0x1C5D684
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X8, [X22+32]
	030 Move X8, [X8+192]
	031 Move X0, [X8+32]
	032 Move W8, [X0+309]
	033 Move TEMP, X8
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {38}
	037 Call 0x1C5D684
	038 Compare X20, 0
	039 JumpIfEqual {83}
	040 Move X8, [X22+32]
	041 Move X8, [X8+192]
	042 Move X1, [X8+16]
	043 Move X8, [X0+184]
	044 Move W9, [X1+309]
	045 Move X22, [X8]
	046 Move TEMP, X9
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfEqual {53}
	050 Move X0, X1
	051 Call 0x1C5D684
	052 Move X1, X0
	053 Move X8, [X20]
	054 NotImplemented "Instruction LDRH not yet implemented."
	055 Compare X9, 0
	056 JumpIfEqual {63}
	057 Move X10, [X8+176]
	058 Add X10, X10, 8
	059 NotImplemented "Instruction LDUR not yet implemented."
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Subtract X9, X9, 1
	062 Add X10, X10, 16
	063 Move W2, 1
	064 Move X0, X20
	065 Call 0x1C5D788
	066 Move W9, [X10]
	067 Add W9, W9, 1
	068 Add X8, X8, W9
	069 Add X0, X8, 312
	070 Move X6, [X0]
	071 Move X5, [X0+8]
	072 Move X0, X20
	073 Move X1, X22
	074 Move X2, X21
	075 Move W3, W19
	076 Move X20, [X31+32]
	077 Move X19, [X31+40]
	078 Move X22, [X31+16]
	079 Move X21, [X31+24]
	080 Move W4, W31
	081 Move X30, [X31+48]
	082 CallNoReturn X6
	083 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x02790E58 LDP X20, X19, [X31 + 0x10]
	0x02790E5C MOV X1, X31
	0x02790E60 LDP X30, X21, [X31], #0x20
	0x02790E64 B 0x33EDE64
	0x02790E68 STP X30, X21, [X31 - 0x20]!
	0x02790E6C STP X20, X19, [X31 + 0x10]
	0x02790E70 LDR X19, [X0]
	0x02790E74 MOV X21, X0
	0x02790E78 CBZ X19, 0x2790F38
	0x02790E7C LDR X0, [X1 + 0x20]
	0x02790E80 MOV X20, X1
	0x02790E84 LDRB W8, [X0 + 0x135]
	0x02790E88 TBNZ X8, 0x0, 0x2790E90
	0x02790E8C BL 0x1C5C684
	0x02790E90 LDR X8, [X0 + 0xC0]
	0x02790E94 LDR X0, [X8 + 0x10]
	0x02790E98 LDRB W8, [X0 + 0x135]
	0x02790E9C TBNZ X8, 0x0, 0x2790EA4
	0x02790EA0 BL 0x1C5C684
	0x02790EA4 LDR X8, [X19]
	0x02790EA8 LDRB W9, [X0 + 0x130]
	0x02790EAC LDRB W10, [X8 + 0x130]
	0x02790EB0 CMP W10, W9
	0x02790EB4 B.CC 0x2790ECC
	0x02790EB8 LDR X8, [X8 + 0xC8]
	0x02790EBC ADD X8, X8, X9, 0x3, LSL
	0x02790EC0 LDUR X8, [X8 - 0x8]
	0x02790EC4 CMP X8, X0
	0x02790EC8 B.EQ 0x2790F68
	0x02790ECC LDR X0, [X20 + 0x20]
	0x02790ED0 LDRH W20, [X21 + 0xC]
	0x02790ED4 LDRB W8, [X0 + 0x135]
	0x02790ED8 TBNZ X8, 0x0, 0x2790EE0
	0x02790EDC BL 0x1C5C684
	0x02790EE0 LDR X8, [X0 + 0xC0]
	0x02790EE4 LDR X1, [X8 + 0x18]
	0x02790EE8 LDRB W8, [X1 + 0x135]
	0x02790EEC TBNZ X8, 0x0, 0x2790EFC
	0x02790EF0 MOV X0, X1
	0x02790EF4 BL 0x1C5C684
	0x02790EF8 MOV X1, X0
	0x02790EFC LDR X8, [X19]
	0x02790F00 LDRH W9, [X8 + 0x12E]
	0x02790F04 CBZ X9, 0x2790F28
	0x02790F08 LDR X10, [X8 + 0xB0]
	0x02790F0C ADD X10, X10, 0x8
	0x02790F10 LDUR X11, [X10 - 0x8]
	0x02790F14 CMP X11, X1
	0x02790F18 B.EQ 0x2790F40
	0x02790F1C SUBS X9, X9, 0x1
	0x02790F20 ADD X10, X10, 0x10
	0x02790F24 B.NE 0x2790F10
	0x02790F28 MOVZ W2, 0x2
	0x02790F2C MOV X0, X19
	0x02790F30 BL 0x1C5C788
	0x02790F34 B 0x2790F50
	0x02790F38 LDR W0, [X21 + 0x8]
	0x02790F3C B 0x2790F88
	0x02790F40 LDR W9, [X10]
	0x02790F44 ADD W9, W9, 0x2
	0x02790F48 ADD X8, X8, W9, 0x4, SXTW
	0x02790F4C ADD X0, X8, 0x138
	0x02790F50 LDP X3, X2, [X0]
	0x02790F54 MOV X0, X19
	0x02790F58 MOV W1, W20
	0x02790F5C LDP X20, X19, [X31 + 0x10]
	0x02790F60 LDP X30, X21, [X31], #0x20
	0x02790F64 BR X3
	0x02790F68 MOV X0, X19
	0x02790F6C MOV X1, X31
	0x02790F70 BL 0x32C3B54
	0x02790F74 LDR X0, [X20 + 0x20]
	0x02790F78 LDRB W8, [X0 + 0x135]
	0x02790F7C TBNZ X8, 0x0, 0x2790F84
	0x02790F80 BL 0x1C5C684
	0x02790F84 LDR W0, [X19 + 0x50]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1C4B000
	006 Move W8, [X20+2139]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x198E000
	013 Move X0, [X0+3656]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2139], W8
	017 Move X0, [X19+32]
	018 Move W8, [X0+309]
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {24}
	023 Call 0x1C5D684
	024 Move X8, [X0+192]
	025 Move X0, [X8+56]
	026 Move W8, [X0+309]
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {32}
	031 Call 0x1C5D684
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, [X19+32]
	037 Move W8, [X0+309]
	038 Move TEMP, X8
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {43}
	042 Call 0x1C5D684
	043 Move X8, [X0+192]
	044 Move X20, 0x198E000
	045 Move X0, [X8+56]
	046 Move W8, [X0+309]
	047 Move X20, [X20+3656]
	048 Move TEMP, X8
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfEqual {53}
	052 Call 0x1C5D684
	053 Move X8, [X0+184]
	054 Move X0, [X20]
	055 Move X21, [X8]
	056 Call 0x1C17F10
	057 Move X8, [X19+32]
	058 Move X20, X0
	059 Move W9, [X8+309]
	060 Move TEMP, X9
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfEqual {67}
	064 Move X0, X8
	065 Call 0x1C5D684
	066 Move X8, X0
	067 Move X8, [X8+192]
	068 Move X0, X20
	069 Move X1, X21
	070 Move X3, X31
	071 Move X2, [X8+64]
	072 Call Action`1<Object>..ctor, X0, X1, X2
	073 Move X0, [X19+32]
	074 Move W8, [X0+309]
	075 Move TEMP, X8
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfEqual {80}
	079 Call 0x1C5D684
	080 Move X8, [X0+192]
	081 Move X0, [X8+32]
	082 Move W8, [X0+309]
	083 Move TEMP, X8
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 JumpIfEqual {88}
	087 Call 0x1C5D684
	088 Move X8, [X0+184]
	089 Move [X8], X20
	090 Move X0, [X19+32]
	091 Move W8, [X0+309]
	092 Move TEMP, X8
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfEqual {97}
	096 Call 0x1C5D684
	097 Move X8, [X0+192]
	098 Move X0, [X8+32]
	099 Move W8, [X0+309]
	100 Move TEMP, X8
	101 And TEMP, TEMP, 1
	102 Compare TEMP, 1
	103 JumpIfEqual {110}
	104 Move X20, [X31+16]
	105 Move X19, [X31+24]
	106 Move X30, [X31+32]
	107 Move X21, [X31+40]
	108 Call 0x1C5D684
	109 Return 
	110 Move X20, [X31+16]
	111 Move X19, [X31+24]
	112 Move X30, [X31+32]
	113 Move X21, [X31+40]
	114 Return 

