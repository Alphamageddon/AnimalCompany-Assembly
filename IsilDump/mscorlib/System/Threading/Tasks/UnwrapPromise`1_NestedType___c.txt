Type: System.Threading.Tasks.UnwrapPromise`1/<>c

Method: System.Void .cctor()

Disassembly:
	0x02368C08 ADRP X22, 0x1DB4000
	0x02368C0C LDR X22, [X22 + 0xB10]
	0x02368C10 MOV X0, X21
	0x02368C14 MOV X1, X31
	0x02368C18 BL 0x33EFEA4
	0x02368C1C LDR X1, [X22]
	0x02368C20 MOV X0, X21
	0x02368C24 BL 0x269F34C
	0x02368C28 LDR X8, [X20 + 0x20]
	0x02368C2C MOV X21, X0
	0x02368C30 LDR X8, [X8 + 0xC0]
	0x02368C34 LDR X22, [X8 + 0x18]
	0x02368C38 LDRB W8, [X22 + 0x135]
	0x02368C3C TBNZ X8, 0x0, 0x2368C4C
	0x02368C40 MOV X0, X22
	0x02368C44 BL 0x1C5C684
	0x02368C48 MOV X22, X0
	0x02368C4C CBZ X19, 0x2368CB4
	0x02368C50 MOV X0, X19
	0x02368C54 MOV X1, X22
	0x02368C58 BL 0x1C16E00
	0x02368C5C CBZ X0, 0x2368CB8
	0x02368C60 LDR X8, [X20 + 0x20]
	0x02368C64 LDR X8, [X8 + 0xC0]
	0x02368C68 LDR X20, [X8 + 0x18]
	0x02368C6C LDRB W8, [X20 + 0x135]
	0x02368C70 TBNZ X8, 0x0, 0x2368C80
	0x02368C74 MOV X0, X20
	0x02368C78 BL 0x1C5C684
	0x02368C7C MOV X20, X0
	0x02368C80 MOV X0, X19
	0x02368C84 MOV X1, X20
	0x02368C88 BL 0x1C16E00
	0x02368C8C CBZ X0, 0x2368CC4
	0x02368C90 LDR X8, [X0 + 0x40]
	0x02368C94 LDR X3, [X0 + 0x18]
	0x02368C98 LDR X2, [X0 + 0x28]
	0x02368C9C MOV X1, X21
	0x02368CA0 LDP X20, X19, [X31 + 0x20]
	0x02368CA4 LDP X22, X21, [X31 + 0x10]
	0x02368CA8 MOV X0, X8
	0x02368CAC LDR X30, [X31], #0x30
	0x02368CB0 BR X3
	0x02368CB4 BL 0x1C16F20
	0x02368CB8 MOV X0, X19
	0x02368CBC MOV X1, X22
	0x02368CC0 BL 0x1C171E0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+32]
	006 Move W8, [X0+309]
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {12}
	011 Call 0x1C5D684
	012 Move X8, [X0+192]
	013 Move X0, [X8]
	014 Move W8, [X0+309]
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {20}
	019 Call 0x1C5D684
	020 Call 0x1C17F10
	021 Move X8, [X19+32]
	022 Move X20, X0
	023 Move W9, [X8+309]
	024 Move TEMP, X9
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {30}
	028 Move X0, X8
	029 Call 0x1C5D684
	030 Move X0, X20
	031 Move X1, X31
	032 Call Object..ctor, X0
	033 Move X0, [X19+32]
	034 Move W8, [X0+309]
	035 Move TEMP, X8
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {40}
	039 Call 0x1C5D684
	040 Move X8, [X0+192]
	041 Move X0, [X8+16]
	042 Move W8, [X0+309]
	043 Move TEMP, X8
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfEqual {48}
	047 Call 0x1C5D684
	048 Move X8, [X0+184]
	049 Move [X8], X20
	050 Move X0, [X19+32]
	051 Move W8, [X0+309]
	052 Move TEMP, X8
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfEqual {57}
	056 Call 0x1C5D684
	057 Move X8, [X0+192]
	058 Move X0, [X8+16]
	059 Move W8, [X0+309]
	060 Move TEMP, X8
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfEqual {69}
	064 Move X20, [X31+16]
	065 Move X19, [X31+24]
	066 Move X30, [X31+32]
	067 Call 0x1C5D684
	068 Return 
	069 Move X20, [X31+16]
	070 Move X19, [X31+24]
	071 Move X30, [X31+32]
	072 Return 

Method: System.Void .ctor()

Disassembly:
	0x02368CC4 MOV X0, X19
	0x02368CC8 MOV X1, X20

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void <InvokeCoreAsync>b__8_0(System.Object state)

Disassembly:
	0x02368CCC BL 0x1C171E0
	0x02368CD0 STR X30, [X31 - 0x20]!
	0x02368CD4 STP X20, X19, [X31 + 0x10]
	0x02368CD8 MOV X19, X0
	0x02368CDC LDR X0, [X0 + 0x20]
	0x02368CE0 LDRB W8, [X0 + 0x135]
	0x02368CE4 TBNZ X8, 0x0, 0x2368CEC
	0x02368CE8 BL 0x1C5C684
	0x02368CEC LDR X8, [X0 + 0xC0]
	0x02368CF0 LDR X0, [X8]
	0x02368CF4 LDRB W8, [X0 + 0x135]
	0x02368CF8 TBNZ X8, 0x0, 0x2368D00
	0x02368CFC BL 0x1C5C684
	0x02368D00 BL 0x1C16F10
	0x02368D04 LDR X8, [X19 + 0x20]
	0x02368D08 MOV X20, X0
	0x02368D0C LDRB W9, [X8 + 0x135]
	0x02368D10 TBNZ X9, 0x0, 0x2368D1C
	0x02368D14 MOV X0, X8
	0x02368D18 BL 0x1C5C684
	0x02368D1C MOV X0, X20
	0x02368D20 MOV X1, X31
	0x02368D24 BL 0x33BDD8C
	0x02368D28 LDR X0, [X19 + 0x20]
	0x02368D2C LDRB W8, [X0 + 0x135]
	0x02368D30 TBNZ X8, 0x0, 0x2368D38
	0x02368D34 BL 0x1C5C684
	0x02368D38 LDR X8, [X0 + 0xC0]
	0x02368D3C LDR X0, [X8 + 0x10]
	0x02368D40 LDRB W8, [X0 + 0x135]
	0x02368D44 TBNZ X8, 0x0, 0x2368D4C
	0x02368D48 BL 0x1C5C684
	0x02368D4C LDR X8, [X0 + 0xB8]
	0x02368D50 STR X20, [X8]
	0x02368D54 LDR X0, [X19 + 0x20]
	0x02368D58 LDRB W8, [X0 + 0x135]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X2+32]
	005 Move X19, X2
	006 Move X20, X1
	007 Move X8, [X8+192]
	008 Move X8, [X8+24]
	009 Move W9, [X8+309]
	010 Move TEMP, X9
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {17}
	014 Move X0, X8
	015 Call 0x1C5D684
	016 Move X8, X0
	017 Compare X20, 0
	018 JumpIfEqual {39}
	019 Move X9, [X20]
	020 Move W10, [X8+304]
	021 Move W11, [X9+304]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X9, [X9+200]
	024 Add X9, X9, X10
	025 NotImplemented "Instruction LDUR not yet implemented."
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X0, [X20+16]
	028 Compare X0, 0
	029 JumpIfEqual {39}
	030 Move X8, [X19+32]
	031 Move X1, [X20+24]
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X8, [X8+192]
	035 Move X2, [X8+56]
	036 Move X30, [X31+32]
	037 Call 0x2733DE0, X0, X1
	038 Return 
	039 Call 0x1C17F20
	040 Move X0, X20
	041 Move X1, X8
	042 Call 0x1C181E0

