Type: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation

Method: System.Void .ctor(System.Threading.SynchronizationContext context, System.Action action, System.Boolean flowExecutionContext)

Disassembly:
	0x033F3CA0 ADD X10, X10, 0x10
	0x033F3CA4 B.NE 0x33F3C90
	0x033F3CA8 MOV X0, X19
	0x033F3CAC MOV W2, W31
	0x033F3CB0 BL 0x1C5C788
	0x033F3CB4 B 0x33F3CC4
	0x033F3CB8 LDRSW X9, [X10]
	0x033F3CBC ADD X8, X8, X9, 0x4, LSL
	0x033F3CC0 ADD X0, X8, 0x138
	0x033F3CC4 LDP X3, X2, [X0]
	0x033F3CC8 MOV X0, X19
	0x033F3CCC MOV X1, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, X2
	005 Move X19, X1
	006 And W2, W3, 1
	007 Move X1, X8
	008 Move X20, X0
	009 Call AwaitTaskContinuation..ctor, X0, X1, X2
	010 Move [X20+32], X19
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]
	014 Return 

Method: System.Void Run(System.Threading.Tasks.Task ignored, System.Boolean canInlineContinuationTask)

Disassembly:
	0x033F8B18 ADRP X0, 0xD35000
	0x033F8B1C LDR X0, [X0 + 0xA20]
	0x033F8B20 BL 0x1C16D08
	0x033F8B24 MOV X1, X0
	0x033F8B28 MOV X0, X20
	0x033F8B2C BL 0x1C16DEC
	0x033F8B30 B 0x33F8B50
	0x033F8B34 B 0x33F8B50
	0x033F8B38 B 0x33F8B50
	0x033F8B3C B 0x33F8B50
	0x033F8B40 B 0x33F8B50
	0x033F8B44 B 0x33F8B50
	0x033F8B48 B 0x33F8B50
	0x033F8B4C B 0x33F8B50
	0x033F8B50 MOV X20, X0
	0x033F8B54 CMP W1, 0x1
	0x033F8B58 B.NE 0x33F8B8C
	0x033F8B5C MOV X0, X20
	0x033F8B60 BL 0x3EB1AD0
	0x033F8B64 LDR X21, [X0]
	0x033F8B68 BL 0x3EB1AE0
	0x033F8B6C MOV X0, X19
	0x033F8B70 MOV X1, X31
	0x033F8B74 BL 0x33CB4DC
	0x033F8B78 CBNZ X21, 0x33F8B94
	0x033F8B7C LDP X20, X19, [X31 + 0x20]
	0x033F8B80 LDP X22, X21, [X31 + 0x10]
	0x033F8B84 LDR X30, [X31], #0x30
	0x033F8B88 RET
	0x033F8B8C MOV X21, X31
	0x033F8B90 B 0x33F8BA0
	0x033F8B94 MOV X0, X21
	0x033F8B98 BL 0x1C16F18
	0x033F8B9C MOV X20, X0
	0x033F8BA0 MOV X0, X19
	0x033F8BA4 MOV X1, X31
	0x033F8BA8 BL 0x33CB4DC
	0x033F8BAC CBNZ X21, 0x33F8BB8
	0x033F8BB0 MOV X0, X20
	0x033F8BB4 BL 0x1D2C690
	0x033F8BB8 MOV X0, X21
	0x033F8BBC BL 0x1C16F18
	0x033F8BC0 BL 0x1990590
	0x033F8BC4 STR X30, [X31 - 0x30]!
	0x033F8BC8 STP X22, X21, [X31 + 0x10]
	0x033F8BCC STP X20, X19, [X31 + 0x20]
	0x033F8BD0 ADRP X21, 0xFE5000
	0x033F8BD4 ADRP X22, 0xD27000
	0x033F8BD8 LDRB W8, [X21 + 0x4C8]
	0x033F8BDC LDR X22, [X22 + 0x158]
	0x033F8BE0 MOV X19, X1
	0x033F8BE4 MOV X20, X0
	0x033F8BE8 TBNZ X8, 0x0, 0x33F8C00
	0x033F8BEC ADRP X0, 0xD27000
	0x033F8BF0 LDR X0, [X0 + 0x158]
	0x033F8BF4 BL 0x1C16CF4
	0x033F8BF8 MOVZ W8, 0x1
	0x033F8BFC STRB W8, [X21 + 0x4C8]
	0x033F8C00 LDR X0, [X22]
	0x033F8C04 LDR W8, [X0 + 0xE0]
	0x033F8C08 CBNZ W8, 0x33F8C10
	0x033F8C0C BL 0x1C16DFC
	0x033F8C10 MOV X0, X20
	0x033F8C14 MOV X1, X31
	0x033F8C18 BL 0x33671B0
	0x033F8C1C STR X19, [X20 + 0x10]
	0x033F8C20 LDP X20, X19, [X31 + 0x20]
	0x033F8C24 LDP X22, X21, [X31 + 0x10]
	0x033F8C28 LDR X30, [X31], #0x30
	0x033F8C2C RET
	0x033F8C30 STR X30, [X31 - 0x30]!
	0x033F8C34 STP X22, X21, [X31 + 0x10]
	0x033F8C38 STP X20, X19, [X31 + 0x20]
	0x033F8C3C ADRP X19, 0xFE5000
	0x033F8C40 ADRP X22, 0xD03000
	0x033F8C44 LDRB W8, [X19 + 0x4C1]
	0x033F8C48 LDR X22, [X22 + 0x7E8]
	0x033F8C4C MOV X20, X1
	0x033F8C50 MOV X21, X0
	0x033F8C54 TBNZ X8, 0x0, 0x33F8C6C
	0x033F8C58 ADRP X0, 0xD03000
	0x033F8C5C LDR X0, [X0 + 0x7E8]
	0x033F8C60 BL 0x1C16CF4
	0x033F8C64 MOVZ W8, 0x1
	0x033F8C68 STRB W8, [X19 + 0x4C1]
	0x033F8C6C LDR X0, [X22]
	0x033F8C70 LDR W8, [X0 + 0xE0]
	0x033F8C74 CBNZ W8, 0x33F8C80
	0x033F8C78 BL 0x1C16DFC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xFE6000
	007 Move W8, [X21+1174]
	008 Move W20, W2
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xD36000
	015 Move X0, [X0+2040]
	016 Call 0x1C17CF4
	017 Move X0, 0xCFD000
	018 Move X0, [X0+1976]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1174], W8
	022 Move X21, 0xCFD000
	023 Move X21, [X21+1976]
	024 Move TEMP, X20
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {32}
	028 Move X20, [X19+32]
	029 Move X0, X31
	030 Call SynchronizationContext.get_Current
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X8, 0xD36000
	033 Move X8, [X8+2040]
	034 Move X0, [X8]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X31
	040 Call 0x340118C
	041 Move X8, [X21]
	042 Move X20, X0
	043 Move W9, [X8+224]
	044 Compare W9, 0
	045 JumpIfNotEqual {49}
	046 Move X0, X8
	047 Call 0x1C17DFC
	048 Move X8, [X21]
	049 Move X0, X8
	050 Call 0x1C17D0C
	051 Move X1, X20
	052 Move X2, X19
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X3, X0
	058 Move X30, [X31+48]
	059 Move X20, 0xFE6000
	060 Move W8, [X20+1283]
	061 Compare W8, 0
	062 JumpIfNotEqual {74}
	063 Move X0, 0xD36000
	064 Move X0, [X0+2528]
	065 Call 0x1C17CF4
	066 Move X0, 0xD36000
	067 Move X0, [X0+2056]
	068 Call 0x1C17CF4
	069 Move X0, 0xD2E000
	070 Move X0, [X0+2376]
	071 Call 0x1C17CF4
	072 Move W8, 1
	073 Move [X20+1283], W8
	074 Move X22, 0xD36000
	075 Move X22, [X22+2056]
	076 Move X8, [X22]
	077 Move X8, [X8+184]
	078 Move X20, [X8]
	079 Compare X20, 0
	080 JumpIfNotEqual {95}
	081 Move X8, 0xD2E000
	082 Move X8, [X8+2376]
	083 Move X0, [X8]
	084 Call 0x1C17F10
	085 Move X8, 0xD36000
	086 Move X8, [X8+2528]
	087 Move X1, X31
	088 Move X3, X31
	089 Move X20, X0
	090 Move X2, [X8]
	091 Call ContextCallback..ctor, X0, X1, X2
	092 Move X8, [X22]
	093 Move X8, [X8+184]
	094 Move [X8], X20
	095 Move X0, [X21]
	096 Move X19, [X19+24]
	097 Move W8, [X0+224]
	098 Compare W8, 0
	099 JumpIfNotEqual {50}
	100 Call 0x1C17DFC
	101 Move X0, [X21]

Method: System.Void PostAction(System.Object state)

Disassembly:
	0x033F8DF0 MOV X8, X31
	0x033F8DF4 STR X8, [X19 + 0x20]
	0x033F8DF8 MOV X0, X19
	0x033F8DFC LDP X20, X19, [X31 + 0x10]
	0x033F8E00 MOV W1, W31
	0x033F8E04 LDP X30, X21, [X31], #0x20
	0x033F8E08 B 0x33F0CF8
	0x033F8E0C MOV X0, X20
	0x033F8E10 MOV X1, X31
	0x033F8E14 BL 0x32C2380
	0x033F8E18 STR X0, [X19 + 0x20]
	0x033F8E1C B 0x33F8DF8
	0x033F8E20 STP X30, X25, [X31 - 0x40]!
	0x033F8E24 STP X24, X23, [X31 + 0x10]
	0x033F8E28 STP X22, X21, [X31 + 0x20]
	0x033F8E2C STP X20, X19, [X31 + 0x30]
	0x033F8E30 ADRP X21, 0xFE5000
	0x033F8E34 LDRB W8, [X21 + 0x4AA]
	0x033F8E38 MOV X20, X1
	0x033F8E3C MOV X19, X0
	0x033F8E40 TBNZ X8, 0x0, 0x33F8EDC
	0x033F8E44 ADRP X0, 0xD03000
	0x033F8E48 LDR X0, [X0 + 0x5B8]
	0x033F8E4C BL 0x1C16CF4
	0x033F8E50 ADRP X0, 0xCFB000
	0x033F8E54 LDR X0, [X0 + 0x7D0]
	0x033F8E58 BL 0x1C16CF4
	0x033F8E5C ADRP X0, 0xCFB000
	0x033F8E60 LDR X0, [X0 + 0xE00]
	0x033F8E64 BL 0x1C16CF4
	0x033F8E68 ADRP X0, 0xD35000
	0x033F8E6C LDR X0, [X0 + 0xA28]
	0x033F8E70 BL 0x1C16CF4
	0x033F8E74 ADRP X0, 0xD35000
	0x033F8E78 LDR X0, [X0 + 0xA30]
	0x033F8E7C BL 0x1C16CF4
	0x033F8E80 ADRP X0, 0xD35000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xFE6000
	006 Move W8, [X20+1175]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xD36000
	013 Move X0, [X0+2040]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1175], W8
	017 Compare X19, 0
	018 JumpIfEqual {45}
	019 Move X21, 0xD36000
	020 Move X21, [X21+2040]
	021 Move X8, [X19]
	022 Move X1, [X21]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move W8, [X1+224]
	025 Move X20, [X19+32]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Move X0, X1
	029 Call 0x1C17DFC
	030 Compare X20, 0
	031 JumpIfEqual {45}
	032 Move X8, [X21]
	033 Move X9, [X20]
	034 Move X2, [X19+24]
	035 Move X0, X20
	036 Move X8, [X8+184]
	037 Move X4, [X9+392]
	038 Move X3, [X9+400]
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X1, [X8]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 CallNoReturn X4
	045 Call 0x1C17F20
	046 Move X0, X19
	047 Call 0x1C181E0

Method: System.Threading.ContextCallback GetPostActionCallback()

Disassembly:
	0x033F8E84 LDR X0, [X0 + 0xA38]
	0x033F8E88 BL 0x1C16CF4
	0x033F8E8C ADRP X0, 0xCFB000
	0x033F8E90 LDR X0, [X0 + 0xE18]
	0x033F8E94 BL 0x1C16CF4
	0x033F8E98 ADRP X0, 0xD35000
	0x033F8E9C LDR X0, [X0 + 0xA40]
	0x033F8EA0 BL 0x1C16CF4
	0x033F8EA4 ADRP X0, 0xD35000
	0x033F8EA8 LDR X0, [X0 + 0x9D0]
	0x033F8EAC BL 0x1C16CF4
	0x033F8EB0 ADRP X0, 0xD35000
	0x033F8EB4 LDR X0, [X0 + 0x9D8]
	0x033F8EB8 BL 0x1C16CF4
	0x033F8EBC ADRP X0, 0xD35000
	0x033F8EC0 LDR X0, [X0 + 0xA48]
	0x033F8EC4 BL 0x1C16CF4
	0x033F8EC8 ADRP X0, 0xD35000
	0x033F8ECC LDR X0, [X0 + 0x768]
	0x033F8ED0 BL 0x1C16CF4
	0x033F8ED4 MOVZ W8, 0x1
	0x033F8ED8 STRB W8, [X21 + 0x4AA]
	0x033F8EDC LDR X21, [X19 + 0x18]
	0x033F8EE0 BL 0x1C16D44
	0x033F8EE4 CBZ X21, 0x33F8EF0
	0x033F8EE8 CBNZ X20, 0x33F8F24
	0x033F8EEC B 0x33F8F6C
	0x033F8EF0 ADRP X8, 0xD35000
	0x033F8EF4 LDR X8, [X8 + 0x9D0]
	0x033F8EF8 LDR X0, [X8]
	0x033F8EFC BL 0x1C16F10
	0x033F8F00 ADRP X8, 0xD35000
	0x033F8F04 LDR X8, [X8 + 0xA40]
	0x033F8F08 MOVZ W1, 0x1
	0x033F8F0C MOV X21, X0
	0x033F8F10 LDR X2, [X8]
	0x033F8F14 BL 0x319AFB4
	0x033F8F18 BL 0x1C16D44
	0x033F8F1C STR X21, [X19 + 0x18]
	0x033F8F20 CBZ X20, 0x33F8F6C
	0x033F8F24 ADRP X9, 0xCFB000
	0x033F8F28 LDR X9, [X9 + 0x7D0]
	0x033F8F2C LDR X8, [X20]
	0x033F8F30 LDR X9, [X9]
	0x033F8F34 LDRB W11, [X8 + 0x130]
	0x033F8F38 LDRB W10, [X9 + 0x130]
	0x033F8F3C CMP W11, W10
	0x033F8F40 B.CC 0x33F8F58

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xFE6000
	005 Move X20, 0xD36000
	006 Move W8, [X19+1176]
	007 Move X20, [X20+2040]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0xD2E000
	013 Move X0, [X0+2376]
	014 Call 0x1C17CF4
	015 Move X0, 0xD36000
	016 Move X0, [X0+2536]
	017 Call 0x1C17CF4
	018 Move X0, 0xD36000
	019 Move X0, [X0+2040]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+1176], W8
	023 Move X0, [X20]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X20]
	029 Move X8, [X0+184]
	030 Move X19, [X8+8]
	031 Compare X19, 0
	032 JumpIfNotEqual {52}
	033 Move X8, 0xD2E000
	034 Move X8, [X8+2376]
	035 Move X0, [X8]
	036 Call 0x1C17F10
	037 Move X8, 0xD36000
	038 Move X8, [X8+2536]
	039 Move X1, X31
	040 Move X3, X31
	041 Move X19, X0
	042 Move X2, [X8]
	043 Call ContextCallback..ctor, X0, X1, X2
	044 Move X0, [X20]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X20]
	050 Move X8, [X0+184]
	051 Move [X8+8], X19
	052 Move X0, X19
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X30, [X31+32]
	056 Return X0

Method: System.Void .cctor()

Disassembly:
	0x033F8F44 LDR X11, [X8 + 0xC8]
	0x033F8F48 ADD X10, X11, X10, 0x3, LSL
	0x033F8F4C LDUR X10, [X10 - 0x8]
	0x033F8F50 CMP X10, X9
	0x033F8F54 B.EQ 0x33F9140
	0x033F8F58 ADRP X9, 0xD03000
	0x033F8F5C LDR X9, [X9 + 0x5B8]
	0x033F8F60 LDR X9, [X9]
	0x033F8F64 CMP X8, X9
	0x033F8F68 B.EQ 0x33F8FC8
	0x033F8F6C ADRP X23, 0xD35000
	0x033F8F70 LDR X23, [X23 + 0xA28]
	0x033F8F74 MOV X0, X20
	0x033F8F78 LDR X1, [X23]
	0x033F8F7C BL 0x1C16E00
	0x033F8F80 CBZ X0, 0x33F918C
	0x033F8F84 LDR X8, [X0]
	0x033F8F88 LDR X1, [X23]
	0x033F8F8C MOV X22, X0
	0x033F8F90 LDRH W9, [X8 + 0x12E]
	0x033F8F94 CBZ X9, 0x33F8FB8
	0x033F8F98 LDR X10, [X8 + 0xB0]
	0x033F8F9C ADD X10, X10, 0x8
	0x033F8FA0 LDUR X11, [X10 - 0x8]
	0x033F8FA4 CMP X11, X1
	0x033F8FA8 B.EQ 0x33F8FE0
	0x033F8FAC SUBS X9, X9, 0x1
	0x033F8FB0 ADD X10, X10, 0x10
	0x033F8FB4 B.NE 0x33F8FA0
	0x033F8FB8 MOV X0, X22
	0x033F8FBC MOV W2, W31
	0x033F8FC0 BL 0x1C5C788
	0x033F8FC4 B 0x33F8FEC
	0x033F8FC8 CBZ X21, 0x33F9204
	0x033F8FCC ADRP X8, 0xD35000
	0x033F8FD0 LDR X8, [X8 + 0xA48]
	0x033F8FD4 MOV X0, X21
	0x033F8FD8 MOV X1, X20
	0x033F8FDC B 0x33F9160
	0x033F8FE0 LDRSW X9, [X10]
	0x033F8FE4 ADD X8, X8, X9, 0x4, LSL
	0x033F8FE8 ADD X0, X8, 0x138
	0x033F8FEC LDP X8, X1, [X0]
	0x033F8FF0 MOV X0, X22
	0x033F8FF4 BLR X8
	0x033F8FF8 MOV X22, X0
	0x033F8FFC CBZ X0, 0x33F9264
	0x033F9000 ADRP X23, 0xCFA000
	0x033F9004 ADRP X24, 0xD34000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xFE6000
	007 Move X19, 0xD36000
	008 Move W8, [X20+1177]
	009 Move X19, [X19+2544]
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0xD08000
	015 Move X0, [X0+1184]
	016 Call 0x1C17CF4
	017 Move X0, 0xD36000
	018 Move X0, [X0+2040]
	019 Call 0x1C17CF4
	020 Move X0, 0xD36000
	021 Move X0, [X0+2552]
	022 Call 0x1C17CF4
	023 Move X0, 0xD36000
	024 Move X0, [X0+2544]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+1177], W8
	028 Move X0, [X19]
	029 Move X22, 0xD08000
	030 Move X20, 0xD36000
	031 Move X21, 0xD36000
	032 Move W8, [X0+224]
	033 Move X22, [X22+1184]
	034 Move X20, [X20+2552]
	035 Move X21, [X21+2040]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X19]
	040 Move X8, [X0+184]
	041 Move X0, [X22]
	042 Move X19, [X8]
	043 Call 0x1C17F10
	044 Move X2, [X20]
	045 Move X1, X19
	046 Move X3, X31
	047 Move X20, X0
	048 Call SendOrPostCallback..ctor, X0, X1, X2
	049 Move X8, [X21]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X8, [X8+184]
	053 Move [X8], X20
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X30, [X31+48]
	057 Return 

