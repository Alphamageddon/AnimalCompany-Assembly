Type: System.Threading.ThreadPoolWorkQueue

Method: System.Void .ctor()

Disassembly:
	0x033E87B8 LDR X28, [X21 + 0x10]
	0x033E87BC BL 0x1C16D44
	0x033E87C0 CBZ X28, 0x33E8994
	0x033E87C4 LDR W8, [X28 + 0x18]
	0x033E87C8 AND W23, W24, W23, 0x0
	0x033E87CC CMP W23, W8
	0x033E87D0 B.CS 0x33E8998
	0x033E87D4 SXTW X24, W23
	0x033E87D8 ADD X8, X28, X24, 0x3, LSL
	0x033E87DC LDR X28, [X8 + 0x20]
	0x033E87E0 BL 0x1C16D44
	0x033E87E4 STR X28, [X20]
	0x033E87E8 CBZ X28, 0x33E8770
	0x033E87EC B 0x33E894C
	0x033E87F0 LDR X0, [X25]
	0x033E87F4 STRB W31, [X31 + 0xC]
	0x033E87F8 LDR W8, [X0 + 0xE0]
	0x033E87FC CBNZ W8, 0x33E8804
	0x033E8800 BL 0x1C16DFC
	0x033E8804 ADD X1, X31, 0xC
	0x033E8808 MOV X0, X19
	0x033E880C MOV X2, X31
	0x033E8810 BL 0x33E32A4
	0x033E8814 LDR W27, [X21 + 0x1C]
	0x033E8818 BL 0x1C16D44
	0x033E881C CMP W27, W24
	0x033E8820 B.GE 0x33E8890

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xFF6000
	006 Move X20, 0xD46000
	007 Move W8, [X21+1003]
	008 Move X20, [X20+1104]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD46000
	015 Move X0, [X0+1104]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1003], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call Object..ctor, X0
	022 Move X0, [X20]
	023 Call 0x1C17F10
	024 Move X20, X0
	025 Call QueueSegment..ctor, X0
	026 Call 0x1C17D44
	027 Move [X19+16], X20
	028 Call 0x1C17D44
	029 Move [X19+24], X20
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return 

Method: System.Threading.ThreadPoolWorkQueueThreadLocals EnsureCurrentThreadHasQueue()

Disassembly:
	0x033E8880 MOV W27, W31
	0x033E8884 STR X31, [X8 + 0x20]
	0x033E8888 MOVZ W26, 0x1
	0x033E888C B 0x33E88B4
	0x033E8890 BL 0x1C16D44
	0x033E8894 MOV X23, X31
	0x033E8898 MOV W27, W31
	0x033E889C MOV W26, W31
	0x033E88A0 STR W24, [X22]
	0x033E88A4 STR X31, [X20]
	0x033E88A8 B 0x33E88B4
	0x033E88AC MOV X23, X31
	0x033E88B0 MOVZ W27, 0x1
	0x033E88B4 LDRB W8, [X31 + 0xC]
	0x033E88B8 CBZ W8, 0x33E88DC
	0x033E88BC LDR X0, [X25]
	0x033E88C0 LDR W8, [X0 + 0xE0]
	0x033E88C4 CBNZ W8, 0x33E88CC
	0x033E88C8 BL 0x1C16DFC
	0x033E88CC MOV X0, X19
	0x033E88D0 MOV W1, W31
	0x033E88D4 MOV X2, X31
	0x033E88D8 BL 0x33E3CF0
	0x033E88DC CBNZ X23, 0x33E899C
	0x033E88E0 TBNZ X27, 0x0, 0x33E8770
	0x033E88E4 B 0x33E8974
	0x033E88E8 BL 0x1C16F20
	0x033E88EC B 0x33E89AC
	0x033E88F0 BL 0x1C16F28
	0x033E88F4 B 0x33E89A4
	0x033E88F8 BL 0x1C16F20
	0x033E88FC B 0x33E89A4
	0x033E8900 BL 0x1C16F28

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xFF6000
	006 Move X21, 0xD46000
	007 Move W8, [X20+1004]
	008 Move X21, [X21+1120]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD46000
	015 Move X0, [X0+1120]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1004], W8
	019 Move X0, [X21]
	020 Call 0x1C17D0C
	021 Move X8, [X0]
	022 Compare X8, 0
	023 JumpIfNotEqual {34}
	024 Move X0, [X21]
	025 Call 0x1C17F10
	026 Move X1, X19
	027 Move X20, X0
	028 Call ThreadPoolWorkQueueThreadLocals..ctor, X0, X1
	029 Move X0, [X21]
	030 Call 0x1C17D0C
	031 Move [X0], X20
	032 Move X0, [X21]
	033 Call 0x1C17D0C
	034 Move X0, [X21]
	035 Call 0x1C17D0C
	036 Move X0, [X0]
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return X0

Method: System.Void EnsureThreadRequested()

Disassembly:
	0x033E8A1C LDR X0, [X0 + 0x470]
	0x033E8A20 BL 0x1C16CF4
	0x033E8A24 MOVZ W8, 0x1
	0x033E8A28 STRB W8, [X21 + 0x3F9]
	0x033E8A2C MOV X21, X20
	0x033E8A30 LDR W22, [X21 + 0x18]!
	0x033E8A34 BL 0x1C16D44
	0x033E8A38 AND W23, W22, 0xFFFF
	0x033E8A3C MOV W24, W23
	0x033E8A40 MOV W25, W22
	0x033E8A44 CMP W23, W22, LSR
	0x033E8A48 B.EQ 0x33E8B00
	0x033E8A4C ADD W8, W24, 0x1
	0x033E8A50 AND W9, W25, 0xFFFF0000
	0x033E8A54 MOV W22, W25
	0x033E8A58 ORR W23, W24, W9, 0x0
	0x033E8A5C BFM W22, W8, 0x0, 0xF
	0x033E8A60 BL 0x1C16D44
	0x033E8A64 MOV X0, X21
	0x033E8A68 MOV W1, W22
	0x033E8A6C MOV W2, W23
	0x033E8A70 BL 0x1C241D4
	0x033E8A74 MOV W22, W0
	0x033E8A78 CMP W0, W23
	0x033E8A7C AND W23, W0, 0xFFFF
	0x033E8A80 B.NE 0x33E8A3C
	0x033E8A84 STR W31, [X31 + 0x8]
	0x033E8A88 LDR X8, [X20 + 0x10]
	0x033E8A8C CBZ X8, 0x33E8AE0
	0x033E8A90 ADRP X22, 0xD17000
	0x033E8A94 LDR X22, [X22 + 0x470]
	0x033E8A98 MOV W21, W23
	0x033E8A9C LDR W9, [X8 + 0x18]
	0x033E8AA0 CMP W23, W9
	0x033E8AA4 B.CS 0x33E8B28
	0x033E8AA8 ADD X8, X8, X21, 0x3, LSL
	0x033E8AAC LDR X26, [X8 + 0x20]
	0x033E8AB0 BL 0x1C16D44

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xFF6000
	006 Move W8, [X20+1005]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xD46000
	013 Move X0, [X0+1088]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1005], W8
	017 Move X21, 0xD46000
	018 Add X19, X19, 32
	019 Move W20, [X19]
	020 Move X21, [X21+1088]
	021 Call 0x1C17D44
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X21]
	028 Move X8, [X0+184]
	029 Move W8, [X8]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Call 0x1C17D44
	032 Add W1, W20, 1
	033 Move X0, X19
	034 Move W2, W20
	035 Call 0x1C251D4
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move W20, W0
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Call 0x1C977F4
	043 Return 
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Return 

Method: System.Void MarkThreadRequestSatisfied()

Disassembly:
	0x033E8ABC LDR X0, [X22]
	0x033E8AC0 LDR W8, [X0 + 0xE0]
	0x033E8AC4 CBNZ W8, 0x33E8ACC
	0x033E8AC8 BL 0x1C16DFC
	0x033E8ACC ADD X0, X31, 0x8
	0x033E8AD0 MOV X1, X31
	0x033E8AD4 BL 0x33DF18C
	0x033E8AD8 LDR X8, [X20 + 0x10]
	0x033E8ADC CBNZ X8, 0x33E8A9C
	0x033E8AE0 BL 0x1C16F20
	0x033E8AE4 LDR X8, [X20 + 0x10]
	0x033E8AE8 CBZ X8, 0x33E8AE0
	0x033E8AEC LDR W9, [X8 + 0x18]
	0x033E8AF0 CMP W23, W9
	0x033E8AF4 B.CS 0x33E8B28
	0x033E8AF8 ADD X8, X8, X21, 0x3, LSL
	0x033E8AFC ADD X19, X8, 0x20
	0x033E8B00 UBFM W8, W25, 0x10, 0x1F

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Add X19, X19, 32
	006 Move W20, [X19]
	007 Call 0x1C17D44
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Call 0x1C17D44
	010 Subtract W1, W20, 1
	011 Move X0, X19
	012 Move W2, W20
	013 Call 0x1C251D4
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Move W20, W0
	016 Move X20, [X31+16]
	017 Move X19, [X31+24]
	018 Move X30, [X31+32]
	019 Return 

Method: System.Void Enqueue(System.Threading.IThreadPoolWorkItem callback, System.Boolean forceGlobal)

Disassembly:
	0x033E8B04 CMP W24, W8
	0x033E8B08 STR X31, [X19]
	0x033E8B0C LDP X20, X19, [X31 + 0x40]
	0x033E8B10 LDP X22, X21, [X31 + 0x30]
	0x033E8B14 LDP X24, X23, [X31 + 0x20]
	0x033E8B18 LDP X26, X25, [X31 + 0x10]
	0x033E8B1C CSET W0, NE
	0x033E8B20 LDR X30, [X31], #0x50
	0x033E8B24 RET
	0x033E8B28 BL 0x1C16F28
	0x033E8B2C STR X30, [X31 - 0x20]!
	0x033E8B30 STP X20, X19, [X31 + 0x10]
	0x033E8B34 LDR W20, [X0 + 0x18]
	0x033E8B38 MOV X19, X0
	0x033E8B3C BL 0x1C16D44
	0x033E8B40 LDR X8, [X19 + 0x10]
	0x033E8B44 CBZ X8, 0x33E8B6C
	0x033E8B48 LDR W8, [X8 + 0x18]
	0x033E8B4C CMP W8, W20, LSR
	0x033E8B50 CSET W9, EQ
	0x033E8B54 CMP W8, W20, UXTH
	0x033E8B58 LDP X20, X19, [X31 + 0x10]
	0x033E8B5C CSET W8, EQ
	0x033E8B60 AND W0, W9, W8, 0x0
	0x033E8B64 LDR X30, [X31], #0x20
	0x033E8B68 RET
	0x033E8B6C BL 0x1C16F20
	0x033E8B70 MOV W3, W31
	0x033E8B74 B 0x33E9068
	0x033E8B78 SUB X31, X31, 0x70
	0x033E8B7C STP X30, X27, [X31 + 0x20]
	0x033E8B80 STP X26, X25, [X31 + 0x30]
	0x033E8B84 STP X24, X23, [X31 + 0x40]
	0x033E8B88 STP X22, X21, [X31 + 0x50]
	0x033E8B8C STP X20, X19, [X31 + 0x60]
	0x033E8B90 ADRP X19, 0xFF5000
	0x033E8B94 ADRP X24, 0xD45000
	0x033E8B98 LDRB W8, [X19 + 0x3F1]
	0x033E8B9C LDR X24, [X24 + 0x440]
	0x033E8BA0 TBNZ X8, 0x0, 0x33E8BC4
	0x033E8BA4 ADRP X0, 0xD45000
	0x033E8BA8 LDR X0, [X0 + 0x480]
	0x033E8BAC BL 0x1C16CF4
	0x033E8BB0 ADRP X0, 0xD45000
	0x033E8BB4 LDR X0, [X0 + 0x440]
	0x033E8BB8 BL 0x1C16CF4
	0x033E8BBC MOVZ W8, 0x1
	0x033E8BC0 STRB W8, [X19 + 0x3F1]
	0x033E8BC4 LDR X0, [X24]
	0x033E8BC8 LDR W8, [X0 + 0xE0]
	0x033E8BCC CBNZ W8, 0x33E8BD8
	0x033E8BD0 BL 0x1C16DFC
	0x033E8BD4 LDR X0, [X24]
	0x033E8BD8 LDR X8, [X0 + 0xB8]
	0x033E8BDC MOV X0, X31
	0x033E8BE0 LDR X19, [X8 + 0x8]
	0x033E8BE4 BL 0x33C18F4
	0x033E8BE8 CBZ X19, 0x33E8E1C
	0x033E8BEC MOV W20, W0
	0x033E8BF0 MOV X0, X19
	0x033E8BF4 BL 0x33E7ABC
	0x033E8BF8 STR X31, [X31 + 0x18]
	0x033E8BFC MOV X0, X19
	0x033E8C00 BL 0x33E7880
	0x033E8C04 ADRP X25, 0xD45000
	0x033E8C08 LDR X25, [X25 + 0x480]
	0x033E8C0C MOV X21, X0
	0x033E8C10 MOV X0, X31
	0x033E8C14 BL 0x33C18F4
	0x033E8C18 SUB W8, W0, W20
	0x033E8C1C CMP W8, 0x1E
	0x033E8C20 B.GE 0x33E8DAC
	0x033E8C24 STRB W31, [X31 + 0x14]
	0x033E8C28 ADD X2, X31, 0x18
	0x033E8C2C ADD X3, X31, 0x14
	0x033E8C30 MOV X0, X19

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0xFF6000
	010 Move W8, [X22+1006]
	011 Move W21, W2
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0xD46000
	019 Move X0, [X0+1104]
	020 Call 0x1C17CF4
	021 Move X0, 0xD46000
	022 Move X0, [X0+1120]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+1006], W8
	026 Move TEMP, X21
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {42}
	030 Move X8, 0xD46000
	031 Move X8, [X8+1120]
	032 Move X0, [X8]
	033 Call 0x1C17D0C
	034 Move X8, [X0]
	035 Compare X8, 0
	036 JumpIfEqual {42}
	037 Move X0, [X8+24]
	038 Compare X0, 0
	039 JumpIfEqual {101}
	040 Move X1, X20
	041 Call WorkStealingQueue.LocalPush, X0, X1
	042 Move X21, X19
	043 Add X21, X21, 16
	044 Move X22, [X21]
	045 Call 0x1C17D44
	046 Compare X22, 0
	047 JumpIfEqual {101}
	048 Move X0, X22
	049 Move X1, X20
	050 Call QueueSegment.TryEnqueue, X0, X1
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfEqual {89}
	055 Move X25, 0xD46000
	056 Move X25, [X25+1104]
	057 Add X23, X22, 32
	058 Call 0x1C17D44
	059 Move X0, [X25]
	060 Call 0x1C17F10
	061 Move X24, X0
	062 Call QueueSegment..ctor, X0
	063 Move X0, X23
	064 Move X1, X24
	065 Move X2, X31
	066 Call 0x1C25138
	067 Move X23, [X22+32]
	068 Call 0x1C17D44
	069 Compare X23, 0
	070 JumpIfEqual {82}
	071 Call 0x1C17D44
	072 Move X23, [X22+32]
	073 Call 0x1C17D44
	074 Move X0, X21
	075 Move X1, X23
	076 Move X2, X22
	077 Call 0x1C25138
	078 Move X22, [X21]
	079 Call 0x1C17D44
	080 Compare X22, 0
	081 JumpIfNotEqual {67}
	082 Move X0, X22
	083 Move X1, X20
	084 Call QueueSegment.TryEnqueue, X0, X1
	085 Move TEMP, X0
	086 And TEMP, TEMP, 1
	087 Compare TEMP, 1
	088 JumpIfNotEqual {57}
	089 Call 0x1C17D14
	090 Move X0, X19
	091 Move X20, [X31+48]
	092 Move X19, [X31+56]
	093 Move X22, [X31+32]
	094 Move X21, [X31+40]
	095 Move X24, [X31+16]
	096 Move X23, [X31+24]
	097 Move X30, [X31+64]
	098 Move X25, [X31+72]
	099 Call ThreadPoolWorkQueue.EnsureThreadRequested, X0
	100 Return 
	101 Call 0x1C17F20

Method: System.Boolean LocalFindAndPop(System.Threading.IThreadPoolWorkItem callback)

Disassembly:
	0x033E91B4 MOV X25, X31
	0x033E91B8 STR W26, [X24]
	0x033E91BC STR X31, [X22]
	0x033E91C0 STRB W8, [X20]
	0x033E91C4 MOVZ W26, 0x8
	0x033E91C8 B 0x33E91D4
	0x033E91CC MOV X25, X31
	0x033E91D0 MOVZ W26, 0x2
	0x033E91D4 LDRB W8, [X31 + 0xC]
	0x033E91D8 CBZ W8, 0x33E91FC
	0x033E91DC LDR X0, [X27]
	0x033E91E0 LDR W8, [X0 + 0xE0]
	0x033E91E4 CBNZ W8, 0x33E91EC
	0x033E91E8 BL 0x1C16DFC
	0x033E91EC MOV X0, X19
	0x033E91F0 MOV W1, W31
	0x033E91F4 MOV X2, X31
	0x033E91F8 BL 0x33E3CF0
	0x033E91FC CBNZ X25, 0x33E92BC
	0x033E9200 CMP W26, 0x2
	0x033E9204 B.EQ 0x33E90D0
	0x033E9208 B 0x33E927C
	0x033E920C BL 0x1C16F20
	0x033E9210 B 0x33E92C4
	0x033E9214 BL 0x1C16F28
	0x033E9218 B 0x33E92C4
	0x033E921C BL 0x1C16F20
	0x033E9220 B 0x33E92C4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xFF5000
	006 Move X21, 0xD45000
	007 Move W8, [X20+1007]
	008 Move X21, [X21+1120]
	009 Move X19, X1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD45000
	015 Move X0, [X0+1120]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1007], W8
	019 Move X0, [X21]
	020 Call 0x1C17D0C
	021 Move X8, [X0]
	022 Compare X8, 0
	023 JumpIfEqual {32}
	024 Move X0, [X8+24]
	025 Compare X0, 0
	026 JumpIfEqual {38}
	027 Move X1, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move W0, W31
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return X0
	038 Call 0x1C17F20

Method: System.Void Dequeue(System.Threading.ThreadPoolWorkQueueThreadLocals tl, out System.Threading.IThreadPoolWorkItem callback, out System.Boolean missedSteal)

Disassembly:
	0x033E9550 B 0x33CB4DC
	0x033E9554 BL 0x1C16F20
	0x033E9558 B 0x33E9564
	0x033E955C B 0x33E9564
	0x033E9560 B 0x33E9564
	0x033E9564 MOV X20, X0
	0x033E9568 CMP W1, 0x1
	0x033E956C B.NE 0x33E959C
	0x033E9570 MOV X0, X20
	0x033E9574 BL 0x3EB1AD0
	0x033E9578 LDR X21, [X0]
	0x033E957C BL 0x3EB1AE0
	0x033E9580 MOV X0, X19
	0x033E9584 MOV X1, X31
	0x033E9588 BL 0x33CB4DC
	0x033E958C CBNZ X21, 0x33E95A4
	0x033E9590 LDP X20, X19, [X31 + 0x10]
	0x033E9594 LDP X30, X21, [X31], #0x20
	0x033E9598 RET
	0x033E959C MOV X21, X31
	0x033E95A0 B 0x33E95B0
	0x033E95A4 MOV X0, X21
	0x033E95A8 BL 0x1C16F18
	0x033E95AC MOV X20, X0
	0x033E95B0 MOV X0, X19
	0x033E95B4 MOV X1, X31
	0x033E95B8 BL 0x33CB4DC
	0x033E95BC CBNZ X21, 0x33E95C8
	0x033E95C0 MOV X0, X20
	0x033E95C4 BL 0x1D2C690
	0x033E95C8 MOV X0, X21
	0x033E95CC BL 0x1C16F18
	0x033E95D0 BL 0x1990590
	0x033E95D4 STR X30, [X31 - 0x20]!
	0x033E95D8 STP X20, X19, [X31 + 0x10]
	0x033E95DC ADRP X19, 0xFF4000
	0x033E95E0 ADRP X20, 0xD44000
	0x033E95E4 LDRB W8, [X19 + 0x3FC]
	0x033E95E8 LDR X20, [X20 + 0x448]
	0x033E95EC TBNZ X8, 0x0, 0x33E9604
	0x033E95F0 ADRP X0, 0xD44000
	0x033E95F4 LDR X0, [X0 + 0x448]
	0x033E95F8 BL 0x1C16CF4
	0x033E95FC MOVZ W8, 0x1
	0x033E9600 STRB W8, [X19 + 0x3FC]
	0x033E9604 LDR X0, [X20]
	0x033E9608 LDR W8, [X0 + 0xE0]
	0x033E960C CBNZ W8, 0x33E9614
	0x033E9610 BL 0x1C16DFC
	0x033E9614 LDP X20, X19, [X31 + 0x10]
	0x033E9618 LDR X30, [X31], #0x20
	0x033E961C B 0x33E8B78
	0x033E9620 STR X30, [X31 - 0x40]!
	0x033E9624 STP X24, X23, [X31 + 0x10]
	0x033E9628 STP X22, X21, [X31 + 0x20]
	0x033E962C STP X20, X19, [X31 + 0x30]
	0x033E9630 ADRP X24, 0xFF4000
	0x033E9634 LDRB W8, [X24 + 0x3FD]
	0x033E9638 MOV X19, X4
	0x033E963C MOV W21, W3
	0x033E9640 MOV X22, X2
	0x033E9644 MOV X23, X1
	0x033E9648 MOV X20, X0
	0x033E964C TBNZ X8, 0x0, 0x33E9664
	0x033E9650 ADRP X0, 0xD32000
	0x033E9654 LDR X0, [X0 + 0x580]
	0x033E9658 BL 0x1C16CF4
	0x033E965C MOVZ W8, 0x1
	0x033E9660 STRB W8, [X24 + 0x3FD]
	0x033E9664 MOV X0, X20
	0x033E9668 MOV X1, X31
	0x033E966C BL 0x33BDD8C
	0x033E9670 STR X23, [X20 + 0x10]
	0x033E9674 STR X22, [X20 + 0x20]
	0x033E9678 TBZ X21, 0x0, 0x33E96C4
	0x033E967C ADRP X21, 0xD32000
	0x033E9680 LDR X21, [X21 + 0x580]
	0x033E9684 LDR X0, [X21]
	0x033E9688 LDR W8, [X0 + 0xE0]
	0x033E968C CBNZ W8, 0x33E9694
	0x033E9690 BL 0x1C16DFC
	0x033E9694 MOV X0, X31
	0x033E9698 BL 0x33E5220
	0x033E969C TBNZ X0, 0x0, 0x33E96C4
	0x033E96A0 LDR X0, [X21]
	0x033E96A4 LDR W8, [X0 + 0xE0]
	0x033E96A8 CBNZ W8, 0x33E96B0
	0x033E96AC BL 0x1C16DFC
	0x033E96B0 MOVZ W1, 0x3
	0x033E96B4 MOV X0, X19
	0x033E96B8 MOV X2, X31
	0x033E96BC BL 0x33E5250
	0x033E96C0 STR X0, [X20 + 0x18]
	0x033E96C4 LDP X20, X19, [X31 + 0x30]
	0x033E96C8 LDP X22, X21, [X31 + 0x20]
	0x033E96CC LDP X24, X23, [X31 + 0x10]
	0x033E96D0 LDR X30, [X31], #0x40
	0x033E96D4 RET
	0x033E96D8 STR X30, [X31 - 0x30]!
	0x033E96DC STP X22, X21, [X31 + 0x10]
	0x033E96E0 STP X20, X19, [X31 + 0x20]
	0x033E96E4 ADRP X20, 0xFF4000
	0x033E96E8 LDRB W8, [X20 + 0x3FE]
	0x033E96EC MOV X19, X0
	0x033E96F0 TBNZ X8, 0x0, 0x33E9714
	0x033E96F4 ADRP X0, 0xD32000
	0x033E96F8 LDR X0, [X0 + 0x580]
	0x033E96FC BL 0x1C16CF4
	0x033E9700 ADRP X0, 0xD44000
	0x033E9704 LDR X0, [X0 + 0x4A0]
	0x033E9708 BL 0x1C16CF4
	0x033E970C MOVZ W8, 0x1
	0x033E9710 STRB W8, [X20 + 0x3FE]
	0x033E9714 LDR X20, [X19 + 0x18]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0xFF5000
	010 Move W8, [X21+1008]
	011 Move X19, X3
	012 Move X20, X2
	013 Move X22, X1
	014 Move X23, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xD45000
	020 Move X0, [X0+1144]
	021 Call 0x1C17CF4
	022 Move X0, 0xD45000
	023 Move X0, [X0+1096]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+1008], W8
	027 Move [X20], X31
	028 Move [X19], W31
	029 Compare X22, 0
	030 JumpIfEqual {139}
	031 Move X21, [X22+24]
	032 Compare X21, 0
	033 JumpIfEqual {139}
	034 Move X0, X21
	035 Move X1, X20
	036 Call WorkStealingQueue.LocalPop, X0, X1
	037 Move X8, [X20]
	038 Compare X8, 0
	039 JumpIfNotEqual {73}
	040 Add X23, X23, 24
	041 Move X24, [X23]
	042 Call 0x1C17D44
	043 Compare X24, 0
	044 JumpIfEqual {139}
	045 Move X0, X24
	046 Move X1, X20
	047 Call QueueSegment.TryDequeue, X0, X1
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfEqual {70}
	052 Move X25, [X24+32]
	053 Call 0x1C17D44
	054 Compare X25, 0
	055 JumpIfEqual {70}
	056 Move X0, X24
	057 Call QueueSegment.IsUsedUp, X0
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {70}
	062 Call 0x1C17D44
	063 Move X25, [X24+32]
	064 Call 0x1C17D44
	065 Move X0, X23
	066 Move X1, X25
	067 Move X2, X24
	068 Call 0x1C25138
	069 Move X24, [X23]
	070 Move X8, [X20]
	071 Compare X8, 0
	072 JumpIfEqual {82}
	073 Move X20, [X31+48]
	074 Move X19, [X31+56]
	075 Move X22, [X31+32]
	076 Move X21, [X31+40]
	077 Move X24, [X31+16]
	078 Move X23, [X31+24]
	079 Move X30, [X31+64]
	080 Move X25, [X31+72]
	081 Return 
	082 Move X23, 0xD45000
	083 Move X23, [X23+1096]
	084 Move X0, [X23]
	085 Move W8, [X0+224]
	086 Compare W8, 0
	087 JumpIfNotEqual {90}
	088 Call 0x1C17DFC
	089 Move X0, [X23]
	090 Move X8, [X0+184]
	091 Move X0, [X8]
	092 Compare X0, 0
	093 JumpIfEqual {139}
	094 Move X8, 0xD45000
	095 Move X8, [X8+1144]
	096 Move X1, [X8]
	097 Call 0x2600700, X0
	098 Compare X0, 0
	099 JumpIfEqual {139}
	100 Move X23, X0
	101 Move X0, [X22+32]
	102 Compare X0, 0
	103 JumpIfEqual {139}
	104 Move X8, [X0]
	105 Move W1, [X23+24]
	106 Move X9, [X8+424]
	107 Move X2, [X8+432]
	108 NotImplemented "Instruction BLR not yet implemented."
	109 Move X24, [X23+24]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 NotImplemented "Instruction SDIV not yet implemented."
	112 NotImplemented "Instruction MSUB not yet implemented."
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Add W25, W0, 1
	115 Add X8, X23, W8
	116 Move X22, [X8+32]
	117 Call 0x1C17D44
	118 Compare X22, 0
	119 JumpIfEqual {131}
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move X0, X22
	122 Move X1, X20
	123 Move X2, X19
	124 Move W3, W31
	125 Call WorkStealingQueue.TrySteal, X0, X1, X2, X3
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Move TEMP, X0
	128 And TEMP, TEMP, 1
	129 Compare TEMP, 1
	130 JumpIfNotEqual {132}
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move W9, [X23+24]
	133 Subtract W24, W24, 1
	134 NotImplemented "Instruction SDIV not yet implemented."
	135 NotImplemented "Instruction MSUB not yet implemented."
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Add W25, W25, 1
	138 Call 0x1C17F28
	139 Call 0x1C17F20

Method: System.Boolean Dispatch()

Disassembly:
	0x033E9B78 AND W0, W0, 0x1
	0x033E9B7C LDR X30, [X31], #0x10
	0x033E9B80 RET
	0x033E9B84 STR X30, [X31 - 0x40]!
	0x033E9B88 STP X24, X23, [X31 + 0x10]
	0x033E9B8C STP X22, X21, [X31 + 0x20]
	0x033E9B90 STP X20, X19, [X31 + 0x30]
	0x033E9B94 ADRP X23, 0xFF4000
	0x033E9B98 STR X3, [X31 + 0x8]
	0x033E9B9C ADRP X24, 0xD0C000
	0x033E9BA0 LDRB W8, [X23 + 0x402]
	0x033E9BA4 LDR X24, [X24 + 0x570]
	0x033E9BA8 MOV W22, W4
	0x033E9BAC MOV X19, X2
	0x033E9BB0 MOV X20, X1
	0x033E9BB4 MOV X21, X0
	0x033E9BB8 TBNZ X8, 0x0, 0x33E9BD0
	0x033E9BBC ADRP X0, 0xD0C000
	0x033E9BC0 LDR X0, [X0 + 0x570]
	0x033E9BC4 BL 0x1C16CF4
	0x033E9BC8 MOVZ W8, 0x1
	0x033E9BCC STRB W8, [X23 + 0x402]
	0x033E9BD0 LDR X0, [X24]
	0x033E9BD4 LDR W8, [X0 + 0xE0]
	0x033E9BD8 CBNZ W8, 0x33E9BE0
	0x033E9BDC BL 0x1C16DFC
	0x033E9BE0 ADD X0, X31, 0x8
	0x033E9BE4 MOV X1, X31
	0x033E9BE8 BL 0x3394200
	0x033E9BEC MOVZ X8, 0x7FF00000
	0x033E9BF0 FMOV D1, X8
	0x033E9BF4 FCVTZS X9, D0
	0x033E9BF8 FCMP D0, D1
	0x033E9BFC MOVZ X8, 0x80000000
	0x033E9C00 CSEL X3, X8, X9, EQ
	0x033E9C04 ADDS X31, X3, 0x2
	0x033E9C08 B.LE 0x33E9C44
	0x033E9C0C MOVZ W8, 0x80000000
	0x033E9C10 CMP X3, X8
	0x033E9C14 B.GE 0x33E9C50
	0x033E9C18 AND W4, W22, 0x1
	0x033E9C1C MOVZ W6, 0x1
	0x033E9C20 MOV X0, X21
	0x033E9C24 MOV X1, X20
	0x033E9C28 MOV X2, X19
	0x033E9C2C BL 0x33E98C0
	0x033E9C30 LDP X20, X19, [X31 + 0x30]
	0x033E9C34 LDP X22, X21, [X31 + 0x20]
	0x033E9C38 LDP X24, X23, [X31 + 0x10]
	0x033E9C3C LDR X30, [X31], #0x40
	0x033E9C40 RET
	0x033E9C44 ADRP X0, 0xD43000
	0x033E9C48 LDR X0, [X0 + 0xFF0]
	0x033E9C4C B 0x33E9C58
	0x033E9C50 ADRP X0, 0xD44000
	0x033E9C54 LDR X0, [X0 + 0x4D8]
	0x033E9C58 BL 0x1C16D08
	0x033E9C5C MOV X1, X31
	0x033E9C60 BL 0x33BDD84
	0x033E9C64 MOV X19, X0
	0x033E9C68 ADRP X0, 0xD12000
	0x033E9C6C LDR X0, [X0 + 0x760]
	0x033E9C70 BL 0x1C16D08
	0x033E9C74 BL 0x1C16F10
	0x033E9C78 MOV X20, X0
	0x033E9C7C ADRP X0, 0xD44000
	0x033E9C80 LDR X0, [X0 + 0x4E0]
	0x033E9C84 BL 0x1C16D08
	0x033E9C88 MOV X1, X0
	0x033E9C8C MOV X0, X20
	0x033E9C90 MOV X2, X19
	0x033E9C94 MOV X3, X31
	0x033E9C98 BL 0x3311888
	0x033E9C9C ADRP X0, 0xD44000
	0x033E9CA0 LDR X0, [X0 + 0x4E8]
	0x033E9CA4 BL 0x1C16D08
	0x033E9CA8 MOV X1, X0
	0x033E9CAC MOV X0, X20
	0x033E9CB0 BL 0x1C16DEC
	0x033E9CB4 STP X30, X25, [X31 - 0x40]!
	0x033E9CB8 STP X24, X23, [X31 + 0x10]
	0x033E9CBC STP X22, X21, [X31 + 0x20]
	0x033E9CC0 STP X20, X19, [X31 + 0x30]
	0x033E9CC4 ADRP X23, 0xFF4000
	0x033E9CC8 LDRB W8, [X23 + 0x403]
	0x033E9CCC MOV W19, W4
	0x033E9CD0 MOV W22, W3
	0x033E9CD4 MOV X20, X2
	0x033E9CD8 MOV X21, X1
	0x033E9CDC MOV X24, X0
	0x033E9CE0 TBNZ X8, 0x0, 0x33E9D04
	0x033E9CE4 ADRP X0, 0xD44000
	0x033E9CE8 LDR X0, [X0 + 0x4A0]
	0x033E9CEC BL 0x1C16CF4
	0x033E9CF0 ADRP X0, 0xD44000
	0x033E9CF4 LDR X0, [X0 + 0x440]
	0x033E9CF8 BL 0x1C16CF4
	0x033E9CFC MOVZ W8, 0x1
	0x033E9D00 STRB W8, [X23 + 0x403]
	0x033E9D04 CBZ X24, 0x33E9D80
	0x033E9D08 ADRP X23, 0xD44000
	0x033E9D0C ADRP X25, 0xD44000
	0x033E9D10 LDR X23, [X23 + 0x4A0]
	0x033E9D14 LDR X25, [X25 + 0x440]
	0x033E9D18 BL 0x33E9DF8
	0x033E9D1C LDR X0, [X23]
	0x033E9D20 BL 0x1C16F10
	0x033E9D24 AND W3, W22, 0x1
	0x033E9D28 MOV X1, X24
	0x033E9D2C MOV X2, X21
	0x033E9D30 MOV X4, X20
	0x033E9D34 MOV X23, X0
	0x033E9D38 BL 0x33E9620
	0x033E9D3C LDR X0, [X25]
	0x033E9D40 LDR W8, [X0 + 0xE0]
	0x033E9D44 CBNZ W8, 0x33E9D50
	0x033E9D48 BL 0x1C16DFC
	0x033E9D4C LDR X0, [X25]
	0x033E9D50 LDR X8, [X0 + 0xB8]
	0x033E9D54 LDR X0, [X8 + 0x8]
	0x033E9D58 CBZ X0, 0x33E9DC8
	0x033E9D5C AND W2, W19, 0x1
	0x033E9D60 MOV X1, X23
	0x033E9D64 BL 0x33E7B04
	0x033E9D68 LDP X20, X19, [X31 + 0x30]
	0x033E9D6C LDP X22, X21, [X31 + 0x20]
	0x033E9D70 LDP X24, X23, [X31 + 0x10]
	0x033E9D74 MOVZ W0, 0x1
	0x033E9D78 LDP X30, X25, [X31], #0x40
	0x033E9D7C RET
	0x033E9D80 ADRP X0, 0xD0F000
	0x033E9D84 LDR X0, [X0 + 0x528]
	0x033E9D88 BL 0x1C16D08
	0x033E9D8C BL 0x1C16F10
	0x033E9D90 MOV X19, X0
	0x033E9D94 ADRP X0, 0xD44000
	0x033E9D98 LDR X0, [X0 + 0x4F0]
	0x033E9D9C BL 0x1C16D08
	0x033E9DA0 MOV X1, X0
	0x033E9DA4 MOV X0, X19
	0x033E9DA8 MOV X2, X31
	0x033E9DAC BL 0x330E100
	0x033E9DB0 ADRP X0, 0xD44000
	0x033E9DB4 LDR X0, [X0 + 0x4F8]
	0x033E9DB8 BL 0x1C16D08
	0x033E9DBC MOV X1, X0
	0x033E9DC0 MOV X0, X19
	0x033E9DC4 BL 0x1C16DEC
	0x033E9DC8 BL 0x1C16F20
	0x033E9DCC STR X30, [X31 - 0x10]!
	0x033E9DD0 MOVZ W8, 0x1
	0x033E9DD4 ADD X2, X31, 0xC
	0x033E9DD8 MOVZ W3, 0x1
	0x033E9DDC MOVZ W4, 0x1
	0x033E9DE0 MOV X1, X31
	0x033E9DE4 STR W8, [X31 + 0xC]
	0x033E9DE8 BL 0x33E9CB4
	0x033E9DEC AND W0, W0, 0x1
	0x033E9DF0 LDR X30, [X31], #0x10
	0x033E9DF4 RET
	0x033E9DF8 STR X30, [X31 - 0x20]!
	0x033E9DFC STP X20, X19, [X31 + 0x10]
	0x033E9E00 ADRP X20, 0xFF4000
	0x033E9E04 ADRP X19, 0xD44000
	0x033E9E08 LDRB W8, [X20 + 0x406]
	0x033E9E0C LDR X19, [X19 + 0x440]
	0x033E9E10 TBNZ X8, 0x0, 0x33E9E28
	0x033E9E14 ADRP X0, 0xD44000
	0x033E9E18 LDR X0, [X0 + 0x440]
	0x033E9E1C BL 0x1C16CF4
	0x033E9E20 MOVZ W8, 0x1
	0x033E9E24 STRB W8, [X20 + 0x406]
	0x033E9E28 LDR X0, [X19]
	0x033E9E2C LDR W8, [X0 + 0xE0]
	0x033E9E30 CBNZ W8, 0x33E9E3C
	0x033E9E34 BL 0x1C16DFC
	0x033E9E38 LDR X0, [X19]
	0x033E9E3C LDR X8, [X0 + 0xB8]
	0x033E9E40 LDRB W20, [X8 + 0x4]
	0x033E9E44 BL 0x1C16D44
	0x033E9E48 CBNZ W20, 0x33E9E80
	0x033E9E4C LDR X0, [X19]
	0x033E9E50 LDR W8, [X0 + 0xE0]
	0x033E9E54 CBNZ W8, 0x33E9E60
	0x033E9E58 BL 0x1C16DFC
	0x033E9E5C LDR X0, [X19]
	0x033E9E60 LDR X8, [X0 + 0xB8]
	0x033E9E64 ADD X0, X8, 0x5
	0x033E9E68 BL 0x1C9606C
	0x033E9E6C BL 0x1C16D44
	0x033E9E70 LDR X8, [X19]
	0x033E9E74 MOVZ W9, 0x1
	0x033E9E78 LDR X8, [X8 + 0xB8]
	0x033E9E7C STRB W9, [X8 + 0x4]
	0x033E9E80 LDP X20, X19, [X31 + 0x10]
	0x033E9E84 LDR X30, [X31], #0x20
	0x033E9E88 RET
	0x033E9E8C STR X30, [X31 - 0x30]!
	0x033E9E90 STP X22, X21, [X31 + 0x10]
	0x033E9E94 STP X20, X19, [X31 + 0x20]
	0x033E9E98 ADRP X22, 0xFF4000
	0x033E9E9C ADRP X21, 0xD44000
	0x033E9EA0 LDRB W8, [X22 + 0x404]
	0x033E9EA4 LDR X21, [X21 + 0x440]
	0x033E9EA8 MOV W20, W1
	0x033E9EAC MOV X19, X0
	0x033E9EB0 TBNZ X8, 0x0, 0x33E9EC8
	0x033E9EB4 ADRP X0, 0xD44000
	0x033E9EB8 LDR X0, [X0 + 0x440]
	0x033E9EBC BL 0x1C16CF4
	0x033E9EC0 MOVZ W8, 0x1
	0x033E9EC4 STRB W8, [X22 + 0x404]
	0x033E9EC8 BL 0x33E9DF8
	0x033E9ECC LDR X0, [X21]
	0x033E9ED0 LDR W8, [X0 + 0xE0]
	0x033E9ED4 CBNZ W8, 0x33E9EE0
	0x033E9ED8 BL 0x1C16DFC
	0x033E9EDC LDR X0, [X21]
	0x033E9EE0 LDR X8, [X0 + 0xB8]
	0x033E9EE4 LDR X0, [X8 + 0x8]
	0x033E9EE8 CBZ X0, 0x33E9F04
	0x033E9EEC AND W2, W20, 0x1
	0x033E9EF0 MOV X1, X19
	0x033E9EF4 LDP X20, X19, [X31 + 0x20]
	0x033E9EF8 LDP X22, X21, [X31 + 0x10]
	0x033E9EFC LDR X30, [X31], #0x30
	0x033E9F00 B 0x33E7B04
	0x033E9F04 BL 0x1C16F20
	0x033E9F08 STP X30, X21, [X31 - 0x20]!
	0x033E9F0C STP X20, X19, [X31 + 0x10]
	0x033E9F10 ADRP X21, 0xFF4000
	0x033E9F14 ADRP X20, 0xD44000
	0x033E9F18 LDRB W8, [X21 + 0x405]
	0x033E9F1C LDR X20, [X20 + 0x440]
	0x033E9F20 MOV X19, X0
	0x033E9F24 TBNZ X8, 0x0, 0x33E9F3C
	0x033E9F28 ADRP X0, 0xD44000
	0x033E9F2C LDR X0, [X0 + 0x440]
	0x033E9F30 BL 0x1C16CF4
	0x033E9F34 MOVZ W8, 0x1
	0x033E9F38 STRB W8, [X21 + 0x405]
	0x033E9F3C LDR X0, [X20]
	0x033E9F40 LDR W8, [X0 + 0xE0]
	0x033E9F44 CBNZ W8, 0x33E9F50
	0x033E9F48 BL 0x1C16DFC
	0x033E9F4C LDR X0, [X20]
	0x033E9F50 LDR X8, [X0 + 0xB8]
	0x033E9F54 LDRB W21, [X8 + 0x4]
	0x033E9F58 BL 0x1C16D44
	0x033E9F5C CBZ W21, 0x33E9F90
	0x033E9F60 LDR X0, [X20]
	0x033E9F64 LDR W8, [X0 + 0xE0]
	0x033E9F68 CBNZ W8, 0x33E9F74
	0x033E9F6C BL 0x1C16DFC
	0x033E9F70 LDR X0, [X20]
	0x033E9F74 LDR X8, [X0 + 0xB8]
	0x033E9F78 LDR X8, [X8 + 0x8]
	0x033E9F7C CBZ X8, 0x33E9FA0
	0x033E9F80 MOV X1, X19
	0x033E9F84 LDP X20, X19, [X31 + 0x10]
	0x033E9F88 LDP X30, X21, [X31], #0x20
	0x033E9F8C B 0x33E81B4
	0x033E9F90 LDP X20, X19, [X31 + 0x10]
	0x033E9F94 MOV W0, W31
	0x033E9F98 LDP X30, X21, [X31], #0x20
	0x033E9F9C RET
	0x033E9FA0 BL 0x1C16F20
	0x033E9FA4 B 0x1C9606C
	0x033E9FA8 AND W0, W0, 0x1
	0x033E9FAC B 0x1C16CAC
	0x033E9FB0 STR X30, [X31 - 0x10]!
	0x033E9FB4 BL 0x33E9DF8
	0x033E9FB8 LDR X30, [X31], #0x10
	0x033E9FBC B 0x1C96780
	0x033E9FC0 B 0x1C96780
	0x033E9FC4 STR X30, [X31 - 0x10]!
	0x033E9FC8 MOV X0, X31
	0x033E9FCC BL 0x33E3C68

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+32], X30
	003 Move [X31+40], X27
	004 Move [X31+48], X26
	005 Move [X31+56], X25
	006 Move [X31+64], X24
	007 Move [X31+72], X23
	008 Move [X31+80], X22
	009 Move [X31+88], X21
	010 Move [X31+96], X20
	011 Move [X31+104], X19
	012 Move X19, 0xFF5000
	013 Move X24, 0xD45000
	014 Move W8, [X19+1009]
	015 Move X24, [X24+1088]
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0xD45000
	021 Move X0, [X0+1152]
	022 Call 0x1C17CF4
	023 Move X0, 0xD45000
	024 Move X0, [X0+1088]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X19+1009], W8
	028 Move X0, [X24]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {34}
	032 Call 0x1C17DFC
	033 Move X0, [X24]
	034 Move X8, [X0+184]
	035 Move X0, X31
	036 Move X19, [X8+8]
	037 Call Environment.get_TickCount
	038 Compare X19, 0
	039 JumpIfEqual {187}
	040 Move W20, W0
	041 Move X0, X19
	042 Call ThreadPoolWorkQueue.MarkThreadRequestSatisfied, X0
	043 Move [X31+24], X31
	044 Move X0, X19
	045 Call ThreadPoolWorkQueue.EnsureCurrentThreadHasQueue, X0
	046 Move X25, 0xD45000
	047 Move X25, [X25+1152]
	048 Move X21, X0
	049 Move X0, X31
	050 Call Environment.get_TickCount
	051 Subtract W8, W0, W20
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move [X31+20], W31
	054 Add X2, X31, 24
	055 Add X3, X31, 20
	056 Move X0, X19
	057 Move X1, X21
	058 Call ThreadPoolWorkQueue.Dequeue, X0, X1, X2, X3
	059 Move X22, [X31+24]
	060 Compare X22, 0
	061 JumpIfEqual {157}
	062 Move X0, X19
	063 Call ThreadPoolWorkQueue.EnsureThreadRequested, X0
	064 Move X0, [X24]
	065 Move W8, [X0+224]
	066 Compare W8, 0
	067 JumpIfNotEqual {70}
	068 Call 0x1C17DFC
	069 Move X0, [X24]
	070 Move X8, [X0+184]
	071 Move W8, [X8+5]
	072 Compare W8, 0
	073 JumpIfEqual {110}
	074 Move W0, 1
	075 Call 0x1C17CAC
	076 Move X8, [X22]
	077 Move X1, [X25]
	078 NotImplemented "Instruction LDRH not yet implemented."
	079 Compare X9, 0
	080 JumpIfEqual {87}
	081 Move X10, [X8+176]
	082 Add X10, X10, 8
	083 NotImplemented "Instruction LDUR not yet implemented."
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Subtract X9, X9, 1
	086 Add X10, X10, 16
	087 Move X0, X22
	088 Move W2, W31
	089 Call 0x1C5D788
	090 NotImplemented "Instruction LDRSW not yet implemented."
	091 Add X8, X8, X9
	092 Add X0, X8, 312
	093 Move X8, [X0]
	094 Move X1, [X0+8]
	095 Move X0, X22
	096 NotImplemented "Instruction BLR not yet implemented."
	097 Move X23, X31
	098 Move X22, X31
	099 Move [X31+24], X31
	100 Move W26, 9
	101 Move W0, W31
	102 Call 0x1C17CAC
	103 Compare X23, 0
	104 JumpIfNotEqual {184}
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Compare W26, 0
	107 JumpIfNotEqual {183}
	108 Compare X22, 0
	109 JumpIfEqual {186}
	110 Move X8, [X22]
	111 Move X1, [X25]
	112 NotImplemented "Instruction LDRH not yet implemented."
	113 Compare X9, 0
	114 JumpIfEqual {121}
	115 Move X10, [X8+176]
	116 Add X10, X10, 8
	117 NotImplemented "Instruction LDUR not yet implemented."
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Subtract X9, X9, 1
	120 Add X10, X10, 16
	121 Move X0, X22
	122 Move W2, W31
	123 Call 0x1C5D788
	124 NotImplemented "Instruction LDRSW not yet implemented."
	125 Add X8, X8, X9
	126 Add X0, X8, 312
	127 Move X8, [X0]
	128 Move X1, [X0+8]
	129 Move X0, X22
	130 NotImplemented "Instruction BLR not yet implemented."
	131 Move [X31+24], X31
	132 Call 0x1C970E4
	133 Move TEMP, X0
	134 And TEMP, TEMP, 1
	135 Compare TEMP, 1
	136 JumpIfEqual {49}
	137 Move [X31+8], X1
	138 Move X23, X0
	139 Move W27, 1
	140 Move X23, X0
	141 Move W27, W31
	142 Move [X31+8], X1
	143 Move X8, [X31+8]
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Move X0, X23
	146 Call 0x3EB2AD0
	147 Move X8, [X0]
	148 Move [X31], X8
	149 Call 0x3EB2AE0
	150 Move X23, [X31]
	151 Move W26, W31
	152 Move TEMP, X27
	153 And TEMP, TEMP, 1
	154 Compare TEMP, 1
	155 JumpIfNotEqual {101}
	156 Move W20, 1
	157 Move W8, [X31+20]
	158 Compare W8, 0
	159 JumpIfEqual {162}
	160 Move X0, X19
	161 Call ThreadPoolWorkQueue.EnsureThreadRequested, X0
	162 Move W20, 1
	163 Move W26, 6
	164 Move W20, W31
	165 Move W26, 6
	166 Move X0, X19
	167 Call ThreadPoolWorkQueue.EnsureThreadRequested, X0
	168 NotImplemented "Instruction CMP not yet implemented."
	169 NotImplemented "Instruction CSET not yet implemented."
	170 Or W0, W8, W20
	171 Move X20, [X31+96]
	172 Move X19, [X31+104]
	173 Move X22, [X31+80]
	174 Move X21, [X31+88]
	175 Move X24, [X31+64]
	176 Move X23, [X31+72]
	177 Move X26, [X31+48]
	178 Move X25, [X31+56]
	179 Move X30, [X31+32]
	180 Move X27, [X31+40]
	181 Add X31, X31, 112
	182 Return X0
	183 Move W20, W31
	184 Move X0, X23
	185 Call 0x1C17F18
	186 Call 0x1C17F20
	187 Call 0x1C17F20
	188 Move [X31], X31
	189 Move TEMP, X27
	190 And TEMP, TEMP, 1
	191 Compare TEMP, 1
	192 JumpIfEqual {195}
	193 Move W0, W31
	194 Call 0x1C17CAC
	195 Move X8, [X31]
	196 Move X1, [X31+8]
	197 Compare X8, 0
	198 JumpIfEqual {208}
	199 Move X0, [X31]
	200 Call 0x1C17F18
	201 Move X23, X0
	202 Move [X31+8], X1
	203 Move TEMP, X27
	204 And TEMP, TEMP, 1
	205 Compare TEMP, 1
	206 JumpIfNotEqual {193}
	207 Move X23, X0
	208 NotImplemented "Instruction CMP not yet implemented."
	209 Move X0, X23
	210 Call 0x3EB2AD0
	211 Move X20, X0
	212 Move X0, 0xD34000
	213 Move X0, [X0+3000]
	214 Call 0x1C17D08
	215 Move X8, [X20]
	216 Move X1, [X8]
	217 Call 0x1C18270
	218 Move TEMP, X0
	219 And TEMP, TEMP, 1
	220 Compare TEMP, 1
	221 JumpIfNotEqual {269}
	222 Move X20, [X20]
	223 Call 0x3EB2AE0
	224 Move X21, [X31+24]
	225 Compare X21, 0
	226 JumpIfEqual {265}
	227 Move X0, 0xD45000
	228 Move X0, [X0+1152]
	229 Call 0x1C17D08
	230 Move X1, X0
	231 Move X8, [X21]
	232 NotImplemented "Instruction LDRH not yet implemented."
	233 Compare X9, 0
	234 JumpIfEqual {241}
	235 Move X10, [X8+176]
	236 Add X10, X10, 8
	237 NotImplemented "Instruction LDUR not yet implemented."
	238 NotImplemented "Instruction CMP not yet implemented."
	239 Subtract X9, X9, 1
	240 Add X10, X10, 16
	241 Move W2, 1
	242 Move X0, X21
	243 Call 0x1C5D788
	244 Move X20, X1
	245 Move W8, 1
	246 NotImplemented "Instruction CMP not yet implemented."
	247 Move X0, X23
	248 Call 0x3EB2AD0
	249 Move X20, [X0]
	250 Call 0x3EB2AE0
	251 Move X0, X19
	252 Call ThreadPoolWorkQueue.EnsureThreadRequested, X0
	253 Compare X20, 0
	254 JumpIfNotEqual {267}
	255 Move W26, W31
	256 Move W9, [X10]
	257 Add W9, W9, 1
	258 Add X8, X8, W9
	259 Add X0, X8, 312
	260 Move X8, [X0]
	261 Move X2, [X0+8]
	262 Move X0, X21
	263 Move X1, X20
	264 NotImplemented "Instruction BLR not yet implemented."
	265 Move W0, 1
	266 Move X20, X31
	267 Move X0, X20
	268 Call 0x1C17F18
	269 Move W0, 8
	270 Call 0x3EB2AF0
	271 Move X8, [X20]
	272 Move [X0], X8
	273 Move X1, 0xACC000
	274 Add X1, X1, 3672
	275 Move X2, X31
	276 Call 0x3EB2B00
	277 Move X23, X0
	278 Move X0, X19
	279 Call ThreadPoolWorkQueue.EnsureThreadRequested, X0
	280 Compare X20, 0
	281 JumpIfNotEqual {284}
	282 Move X0, X23
	283 Call 0x1D2D690
	284 Move X0, X20
	285 Call 0x1C17F18
	286 Move X23, X0
	287 Move W20, W1
	288 Move X20, X1
	289 Move X23, X0
	290 Call 0x3EB2AE0
	291 Call 0x1991590

Method: System.Void .cctor()

Disassembly:
	0x033E9FD4 MOV X1, X31
	0x033E9FD8 LDR X30, [X31], #0x10
	0x033E9FDC B 0x33E6FE8
	0x033E9FE0 BL 0x1C16F20
	0x033E9FE4 STP X30, X19, [X31 - 0x10]!
	0x033E9FE8 MOV X1, X31
	0x033E9FEC MOV X19, X0
	0x033E9FF0 BL 0x33C011C
	0x033E9FF4 MOV X0, X19
	0x033E9FF8 LDP X30, X19, [X31], #0x10
	0x033E9FFC B 0x33EA000
	0x033EA000 STP X30, X21, [X31 - 0x20]!
	0x033EA004 STP X20, X19, [X31 + 0x10]
	0x033EA008 ADRP X21, 0xFF3000
	0x033EA00C ADRP X20, 0xD43000
	0x033EA010 LDRB W8, [X21 + 0x408]
	0x033EA014 LDR X20, [X20 + 0x268]
	0x033EA018 MOV X19, X0
	0x033EA01C TBNZ X8, 0x0, 0x33EA034
	0x033EA020 ADRP X0, 0xD43000
	0x033EA024 LDR X0, [X0 + 0x268]
	0x033EA028 BL 0x1C16CF4
	0x033EA02C MOVZ W8, 0x1
	0x033EA030 STRB W8, [X21 + 0x408]
	0x033EA034 BL 0x1C16D44
	0x033EA038 STR X31, [X19 + 0x20]
	0x033EA03C LDR X0, [X20]
	0x033EA040 LDR W8, [X0 + 0xE0]
	0x033EA044 CBNZ W8, 0x33EA050
	0x033EA048 BL 0x1C16DFC
	0x033EA04C LDR X0, [X20]
	0x033EA050 LDR X8, [X0 + 0xB8]
	0x033EA054 LDR X8, [X8]
	0x033EA058 STRB W31, [X19 + 0x28]
	0x033EA05C STR X8, [X19 + 0x18]
	0x033EA060 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xFF5000
	007 Move X22, 0xD45000
	008 Move X19, 0xD45000
	009 Move X20, 0xD45000
	010 Move W8, [X21+1010]
	011 Move X22, [X22+1160]
	012 Move X19, [X19+1168]
	013 Move X20, [X20+1096]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0xD44000
	019 Move X0, [X0+1168]
	020 Call 0x1C17CF4
	021 Move X0, 0xD44000
	022 Move X0, [X0+1160]
	023 Call 0x1C17CF4
	024 Move X0, 0xD44000
	025 Move X0, [X0+1096]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+1010], W8
	029 Move X0, [X22]
	030 Call 0x1C17F10
	031 Move X2, [X19]
	032 Move W1, 16
	033 Move X19, X0
	034 Call 0x26006AC, X0, X1
	035 Move X8, [X20]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X8, [X8+184]
	039 Move [X8], X19
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X30, [X31+48]
	043 Return 

