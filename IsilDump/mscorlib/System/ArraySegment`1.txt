Type: System.ArraySegment`1

Method: System.ArraySegment`1<T> get_Empty()

Disassembly:
	0x02B88B00 LDRB W8, [X0 + 0x135]
	0x02B88B04 TBNZ X8, 0x0, 0x2B88B0C
	0x02B88B08 BL 0x1C5C684
	0x02B88B0C LDR X8, [X0 + 0xC0]
	0x02B88B10 LDR X1, [X8]
	0x02B88B14 LDRB W8, [X1 + 0x135]
	0x02B88B18 TBNZ X8, 0x0, 0x2B88B28
	0x02B88B1C MOV X0, X1
	0x02B88B20 BL 0x1C5C684
	0x02B88B24 MOV X1, X0
	0x02B88B28 LDR X8, [X21]
	0x02B88B2C LDR X9, [X1 + 0x40]
	0x02B88B30 MOV X0, X21
	0x02B88B34 LDR X8, [X8 + 0x40]
	0x02B88B38 CMP X8, X9
	0x02B88B3C B.NE 0x2B88B98
	0x02B88B40 BL 0x1C16E08
	0x02B88B44 MOV X8, X0
	0x02B88B48 LDR X0, [X20 + 0x20]
	0x02B88B4C LDP X21, X20, [X8]
	0x02B88B50 LDRB W9, [X0 + 0x135]
	0x02B88B54 TBNZ X9, 0x0, 0x2B88B5C
	0x02B88B58 BL 0x1C5C684
	0x02B88B5C LDR X8, [X19]
	0x02B88B60 CMP X21, X8
	0x02B88B64 B.NE 0x2B88B88
	0x02B88B68 LDR W8, [X19 + 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+32]
	005 Move W8, [X0+309]
	006 Move TEMP, X8
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfEqual {11}
	010 Call 0x1C5D684
	011 Move X8, [X0+192]
	012 Move X0, [X8+8]
	013 Move W8, [X0+309]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {19}
	018 Call 0x1C5D684
	019 Move W8, [X0+224]
	020 Compare W8, 0
	021 JumpIfNotEqual {23}
	022 Call 0x1C17DFC
	023 Move X0, [X19+32]
	024 Move W8, [X0+309]
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {30}
	029 Call 0x1C5D684
	030 Move X8, [X0+192]
	031 Move X0, [X8+8]
	032 Move W8, [X0+309]
	033 Move TEMP, X8
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {38}
	037 Call 0x1C5D684
	038 Move X8, [X0+184]
	039 Move X0, [X8]
	040 Move X1, [X8+8]
	041 Move X30, [X31+16]
	042 Move X19, [X31+24]
	043 Return X0

Method: System.Void .ctor(T[] array)

Disassembly:
	0x02B88B6C CMP W8, W20
	0x02B88B70 B.NE 0x2B88B88
	0x02B88B74 LDR W8, [X19 + 0xC]
	0x02B88B78 UBFM X9, X20, 0x20, 0x3F
	0x02B88B7C CMP W8, W9
	0x02B88B80 CSET W0, EQ
	0x02B88B84 B 0x2B88B8C
	0x02B88B88 MOV W0, W31
	0x02B88B8C LDP X20, X19, [X31 + 0x10]
	0x02B88B90 LDP X30, X21, [X31], #0x20
	0x02B88B94 RET
	0x02B88B98 BL 0x1C171E0
	0x02B88B9C LDR X8, [X0]
	0x02B88BA0 CMP X1, X8
	0x02B88BA4 B.NE 0x2B88BC8
	0x02B88BA8 LDR W8, [X0 + 0x8]
	0x02B88BAC CMP W8, W2

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {14}
	006 Move [X0], X1
	007 Move [X0+8], W31
	008 Move X8, [X1+24]
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move [X0+12], W8
	012 Move X30, [X31+32]
	013 Return 
	014 Move X19, X0
	015 Move W0, 3
	016 Move X20, X1
	017 Call ThrowHelper.ThrowArgumentNullException, X0
	018 Move [X19], X20
	019 Move [X19+8], W31
	020 Call 0x1C17F20

Method: System.Void .ctor(T[] array, System.Int32 offset, System.Int32 count)

Disassembly:
	0x02B88BB0 B.NE 0x2B88BC8
	0x02B88BB4 LDR W8, [X0 + 0xC]
	0x02B88BB8 UBFM X9, X2, 0x20, 0x3F
	0x02B88BBC CMP W8, W9
	0x02B88BC0 CSET W0, EQ
	0x02B88BC4 RET
	0x02B88BC8 MOV W0, W31
	0x02B88BCC RET
	0x02B88BD0 STP X30, X23, [X31 - 0x30]!
	0x02B88BD4 STP X22, X21, [X31 + 0x10]
	0x02B88BD8 STP X20, X19, [X31 + 0x20]
	0x02B88BDC LDR X8, [X4 + 0x20]
	0x02B88BE0 MOV X23, X4
	0x02B88BE4 MOV X19, X3
	0x02B88BE8 MOV X21, X2
	0x02B88BEC LDRB W9, [X8 + 0x135]
	0x02B88BF0 MOV X20, X1
	0x02B88BF4 MOV X22, X0
	0x02B88BF8 TBNZ X9, 0x0, 0x2B88C08
	0x02B88BFC MOV X0, X8
	0x02B88C00 BL 0x1C5C684
	0x02B88C04 MOV X8, X0
	0x02B88C08 LDR X8, [X8 + 0xC0]
	0x02B88C0C LDR X0, [X8 + 0x8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W19, W3
	007 Move W20, W2
	008 Move X22, X1
	009 Move X21, X0
	010 Compare X1, 0
	011 JumpIfEqual {15}
	012 Move W8, [X22+24]
	013 Subtract W8, W8, W20
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Move X0, X22
	016 Move W1, W20
	017 Move W2, W19
	018 Move X3, X31
	019 Call ThrowHelper.ThrowArraySegmentCtorValidationFailedExceptions, X0, X1, X2
	020 Move [X21], X22
	021 Move [X21+8], W20
	022 Move [X21+12], W19
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X22, [X31+16]
	026 Move X21, [X31+24]
	027 Move X30, [X31+48]
	028 Return 

Method: T[] get_Array()

Disassembly:
	0x02B88C10 LDRB W8, [X0 + 0x135]
	0x02B88C14 TBNZ X8, 0x0, 0x2B88C1C

ISIL:
	001 Move X0, [X0]
	002 Return X0

Method: System.Int32 get_Offset()

Disassembly:
	0x02B88C18 BL 0x1C5C684
	0x02B88C1C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move W0, [X0+8]
	002 Return X0

Method: System.Int32 get_Count()

Disassembly:
	0x02B88C20 CBNZ W8, 0x2B88C28
	0x02B88C24 BL 0x1C16DFC

ISIL:
	001 Move W0, [X0+12]
	002 Return X0

Method: System.ArraySegment`1/Enumerator<T> GetEnumerator()

Disassembly:
	0x02B88C28 LDR X0, [X23 + 0x20]
	0x02B88C2C LDRB W8, [X0 + 0x135]
	0x02B88C30 TBNZ X8, 0x0, 0x2B88C38
	0x02B88C34 BL 0x1C5C684
	0x02B88C38 CMP X21, X22
	0x02B88C3C MOV W0, W31
	0x02B88C40 B.NE 0x2B88C5C
	0x02B88C44 CMP W20, W19
	0x02B88C48 B.NE 0x2B88C5C
	0x02B88C4C UBFM X8, X20, 0x20, 0x3F
	0x02B88C50 UBFM X9, X19, 0x20, 0x3F
	0x02B88C54 CMP W8, W9
	0x02B88C58 CSET W0, EQ
	0x02B88C5C LDP X20, X19, [X31 + 0x20]
	0x02B88C60 LDP X22, X21, [X31 + 0x10]
	0x02B88C64 LDP X30, X23, [X31], #0x30
	0x02B88C68 RET
	0x02B88C6C STP X30, X23, [X31 - 0x30]!
	0x02B88C70 STP X22, X21, [X31 + 0x10]
	0x02B88C74 STP X20, X19, [X31 + 0x20]
	0x02B88C78 LDR X8, [X4 + 0x20]
	0x02B88C7C MOV X23, X4
	0x02B88C80 MOV X19, X3
	0x02B88C84 MOV X20, X2
	0x02B88C88 LDRB W9, [X8 + 0x135]
	0x02B88C8C MOV X21, X1
	0x02B88C90 MOV X22, X0
	0x02B88C94 TBNZ X9, 0x0, 0x2B88CA4
	0x02B88C98 MOV X0, X8
	0x02B88C9C BL 0x1C5C684
	0x02B88CA0 MOV X8, X0
	0x02B88CA4 LDR X8, [X8 + 0xC0]
	0x02B88CA8 LDR X0, [X8 + 0x8]
	0x02B88CAC LDRB W8, [X0 + 0x135]
	0x02B88CB0 TBNZ X8, 0x0, 0x2B88CB8
	0x02B88CB4 BL 0x1C5C684
	0x02B88CB8 LDR W8, [X0 + 0xE0]
	0x02B88CBC CBNZ W8, 0x2B88CC4
	0x02B88CC0 BL 0x1C16DFC
	0x02B88CC4 LDR X0, [X23 + 0x20]
	0x02B88CC8 LDRB W8, [X0 + 0x135]
	0x02B88CCC TBNZ X8, 0x0, 0x2B88CD4
	0x02B88CD0 BL 0x1C5C684
	0x02B88CD4 LDR X8, [X0 + 0xC0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, X0
	007 Move X0, [X1+32]
	008 Move X20, X1
	009 Move X19, X8
	010 Move W9, [X0+309]
	011 Move TEMP, X9
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {16}
	015 Call 0x1C5D684
	016 Move X8, [X0+192]
	017 Move X0, [X8+8]
	018 Move W8, [X0+309]
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {24}
	023 Call 0x1C5D684
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, [X20+32]
	029 Move W8, [X0+309]
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {35}
	034 Call 0x1C5D684
	035 Move X22, [X21]
	036 Compare X22, 0
	037 JumpIfNotEqual {42}
	038 Move W0, 50
	039 Move X1, X31
	040 Call ThrowHelper.ThrowInvalidOperationException, X0
	041 Move X22, [X21]
	042 Move X21, [X21+8]
	043 Move [X19], X31
	044 Move [X19+8], X31
	045 Move [X19+16], X31
	046 Move X0, [X20+32]
	047 Move W8, [X0+309]
	048 Move TEMP, X8
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfEqual {53}
	052 Call 0x1C5D684
	053 Move X8, [X0+192]
	054 Move X0, X19
	055 Move X1, X22
	056 Move X2, X21
	057 Move X3, [X8+40]
	058 Move X20, [X31+32]
	059 Move X19, [X31+40]
	060 Move X22, [X31+16]
	061 Move X21, [X31+24]
	062 Move X30, [X31+48]
	063 Call 0x2BB7CE0, X0, X1
	064 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x02B88CD8 MOV X0, X22
	0x02B88CDC MOV X1, X21
	0x02B88CE0 MOV X2, X20
	0x02B88CE4 LDR X4, [X8 + 0x38]
	0x02B88CE8 MOV X3, X19
	0x02B88CEC BL 0x2B88BD0
	0x02B88CF0 LDP X20, X19, [X31 + 0x20]
	0x02B88CF4 LDP X22, X21, [X31 + 0x10]
	0x02B88CF8 ORN W8, W31, W0, 0x0
	0x02B88CFC AND W0, W8, 0x1
	0x02B88D00 LDP X30, X23, [X31], #0x30
	0x02B88D04 RET
	0x02B88D08 STP X30, X19, [X31 - 0x10]!
	0x02B88D0C MOV X19, X0
	0x02B88D10 CBZ X0, 0x2B88D30
	0x02B88D14 LDR X0, [X1 + 0x20]
	0x02B88D18 LDRB W8, [X0 + 0x135]
	0x02B88D1C TBNZ X8, 0x0, 0x2B88D24
	0x02B88D20 BL 0x1C5C684
	0x02B88D24 LDR X8, [X19 + 0x18]
	0x02B88D28 UBFM X1, X8, 0x20, 0x1F
	0x02B88D2C B 0x2B88D34
	0x02B88D30 MOV X1, X31
	0x02B88D34 MOV X0, X19
	0x02B88D38 LDP X30, X19, [X31], #0x10
	0x02B88D3C RET
	0x02B88D40 STP X30, X21, [X31 - 0x20]!
	0x02B88D44 STP X20, X19, [X31 + 0x10]
	0x02B88D48 LDR X8, [X2 + 0x20]
	0x02B88D4C MOV X21, X2
	0x02B88D50 MOV W19, W1
	0x02B88D54 MOV X20, X0
	0x02B88D58 LDRB W9, [X8 + 0x135]
	0x02B88D5C TBNZ X9, 0x0, 0x2B88D6C
	0x02B88D60 MOV X0, X8
	0x02B88D64 BL 0x1C5C684
	0x02B88D68 MOV X8, X0
	0x02B88D6C LDR X8, [X8 + 0xC0]
	0x02B88D70 LDR X0, [X8 + 0x8]
	0x02B88D74 LDRB W8, [X0 + 0x135]
	0x02B88D78 TBNZ X8, 0x0, 0x2B88D80

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1854000
	005 Move W8, [X20+1468]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x1596000
	012 Move X0, [X0+3816]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1468], W8
	016 Move X8, [X19]
	017 Compare X8, 0
	018 JumpIfEqual {44}
	019 Move X8, 0x1596000
	020 Move X8, [X8+3816]
	021 Move W20, [X19+8]
	022 Move X0, [X8]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move W0, 0x1505
	028 Move W1, W20
	029 Move X2, X31
	030 Call HashHelpers.Combine, X0, X1
	031 Move W1, [X19+12]
	032 Move X2, X31
	033 Call HashHelpers.Combine, X0, X1
	034 Move X8, [X19]
	035 Compare X8, 0
	036 JumpIfEqual {49}
	037 Move X9, [X8]
	038 Move W19, W0
	039 Move X0, X8
	040 Move X10, [X9+344]
	041 Move X1, [X9+352]
	042 NotImplemented "Instruction BLR not yet implemented."
	043 Xor W0, W0, W19
	044 Move W0, W31
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Return X0
	049 Call 0x1C17F20

Method: System.Void CopyTo(T[] destination, System.Int32 destinationIndex)

Disassembly:
	0x02B88D7C BL 0x1C5C684
	0x02B88D80 LDR W8, [X0 + 0xE0]
	0x02B88D84 CBNZ W8, 0x2B88D8C
	0x02B88D88 BL 0x1C16DFC
	0x02B88D8C LDR X0, [X21 + 0x20]
	0x02B88D90 LDRB W8, [X0 + 0x135]
	0x02B88D94 TBNZ X8, 0x0, 0x2B88D9C
	0x02B88D98 BL 0x1C5C684
	0x02B88D9C LDR X8, [X20]
	0x02B88DA0 CBZ X8, 0x2B88DAC
	0x02B88DA4 TBZ X19, 0x1F, 0x2B88DBC
	0x02B88DA8 B 0x2B88DC8
	0x02B88DAC MOVZ W0, 0x32
	0x02B88DB0 MOV X1, X31
	0x02B88DB4 BL 0x339DFAC
	0x02B88DB8 TBNZ X19, 0x1F, 0x2B88DC8
	0x02B88DBC LDR W8, [X20 + 0xC]
	0x02B88DC0 CMP W8, W19
	0x02B88DC4 B.GT 0x2B88DD0
	0x02B88DC8 MOV X0, X31
	0x02B88DCC BL 0x339E294
	0x02B88DD0 LDR X8, [X20]
	0x02B88DD4 CBZ X8, 0x2B88E00
	0x02B88DD8 LDR W9, [X20 + 0x8]
	0x02B88DDC LDR W10, [X8 + 0x18]
	0x02B88DE0 ADD W9, W9, W19
	0x02B88DE4 CMP W9, W10
	0x02B88DE8 B.CS 0x2B88E04
	0x02B88DEC ADD X8, X8, W9, 0x3, SXTW
	0x02B88DF0 LDR V0, [X8 + 0x20]
	0x02B88DF4 LDP X20, X19, [X31 + 0x10]
	0x02B88DF8 LDP X30, X21, [X31], #0x20
	0x02B88DFC RET
	0x02B88E00 BL 0x1C16F20
	0x02B88E04 BL 0x1C16F28
	0x02B88E08 STR D8, [X31 - 0x30]!
	0x02B88E0C STP X30, X21, [X31 + 0x10]
	0x02B88E10 STP X20, X19, [X31 + 0x20]
	0x02B88E14 LDR X8, [X2 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X3+32]
	007 Move X22, X3
	008 Move W19, W2
	009 Move X20, X1
	010 Move W9, [X8+309]
	011 Move X21, X0
	012 Move TEMP, X9
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {19}
	016 Move X0, X8
	017 Call 0x1C5D684
	018 Move X8, X0
	019 Move X8, [X8+192]
	020 Move X0, [X8+8]
	021 Move W8, [X0+309]
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {27}
	026 Call 0x1C5D684
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, [X22+32]
	032 Move W8, [X0+309]
	033 Move TEMP, X8
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {38}
	037 Call 0x1C5D684
	038 Move X0, [X21]
	039 Compare X0, 0
	040 JumpIfNotEqual {45}
	041 Move W0, 50
	042 Move X1, X31
	043 Call ThrowHelper.ThrowInvalidOperationException, X0
	044 Move X0, [X21]
	045 Move W1, [X21+8]
	046 Move W4, [X21+12]
	047 Move X2, X20
	048 Move W3, W19
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X5, X31
	054 Move X30, [X31+48]
	055 Call Array.Copy, X0, X1, X2, X3, X4
	056 Return 

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x02B88E18 MOV X21, X2
	0x02B88E1C MOV V8.16B, V0.16B
	0x02B88E20 MOV W19, W1
	0x02B88E24 LDRB W9, [X8 + 0x135]
	0x02B88E28 MOV X20, X0
	0x02B88E2C TBNZ X9, 0x0, 0x2B88E3C
	0x02B88E30 MOV X0, X8
	0x02B88E34 BL 0x1C5C684
	0x02B88E38 MOV X8, X0
	0x02B88E3C LDR X8, [X8 + 0xC0]
	0x02B88E40 LDR X0, [X8 + 0x8]
	0x02B88E44 LDRB W8, [X0 + 0x135]
	0x02B88E48 TBNZ X8, 0x0, 0x2B88E50
	0x02B88E4C BL 0x1C5C684
	0x02B88E50 LDR W8, [X0 + 0xE0]
	0x02B88E54 CBNZ W8, 0x2B88E5C
	0x02B88E58 BL 0x1C16DFC
	0x02B88E5C LDR X0, [X21 + 0x20]
	0x02B88E60 LDRB W8, [X0 + 0x135]
	0x02B88E64 TBNZ X8, 0x0, 0x2B88E6C
	0x02B88E68 BL 0x1C5C684
	0x02B88E6C LDR X8, [X20]
	0x02B88E70 CBZ X8, 0x2B88E7C
	0x02B88E74 TBZ X19, 0x1F, 0x2B88E8C
	0x02B88E78 B 0x2B88E98
	0x02B88E7C MOVZ W0, 0x32
	0x02B88E80 MOV X1, X31
	0x02B88E84 BL 0x339DFAC
	0x02B88E88 TBNZ X19, 0x1F, 0x2B88E98
	0x02B88E8C LDR W8, [X20 + 0xC]
	0x02B88E90 CMP W8, W19
	0x02B88E94 B.GT 0x2B88EA0
	0x02B88E98 MOV X0, X31
	0x02B88E9C BL 0x339E294
	0x02B88EA0 LDR X8, [X20]
	0x02B88EA4 CBZ X8, 0x2B88ED4
	0x02B88EA8 LDR W9, [X20 + 0x8]
	0x02B88EAC LDR W10, [X8 + 0x18]
	0x02B88EB0 ADD W9, W9, W19
	0x02B88EB4 CMP W9, W10
	0x02B88EB8 B.CS 0x2B88ED8
	0x02B88EBC LDP X20, X19, [X31 + 0x20]
	0x02B88EC0 LDP X30, X21, [X31 + 0x10]
	0x02B88EC4 ADD X8, X8, W9, 0x3, SXTW
	0x02B88EC8 STR D8, [X8 + 0x20]
	0x02B88ECC LDR V8, [X31], #0x30
	0x02B88ED0 RET
	0x02B88ED4 BL 0x1C16F20
	0x02B88ED8 BL 0x1C16F28
	0x02B88EDC STR D8, [X31 - 0x30]!
	0x02B88EE0 STR X30, [X31 + 0x8]
	0x02B88EE4 STP X22, X21, [X31 + 0x10]
	0x02B88EE8 STP X20, X19, [X31 + 0x20]
	0x02B88EEC LDR X8, [X1 + 0x20]
	0x02B88EF0 MOV X20, X1
	0x02B88EF4 MOV V8.16B, V0.16B
	0x02B88EF8 MOV X19, X0
	0x02B88EFC LDRB W9, [X8 + 0x135]
	0x02B88F00 TBNZ X9, 0x0, 0x2B88F10
	0x02B88F04 MOV X0, X8
	0x02B88F08 BL 0x1C5C684
	0x02B88F0C MOV X8, X0
	0x02B88F10 LDR X8, [X8 + 0xC0]
	0x02B88F14 LDR X0, [X8 + 0x8]
	0x02B88F18 LDRB W8, [X0 + 0x135]
	0x02B88F1C TBNZ X8, 0x0, 0x2B88F24
	0x02B88F20 BL 0x1C5C684
	0x02B88F24 LDR W8, [X0 + 0xE0]
	0x02B88F28 CBNZ W8, 0x2B88F30
	0x02B88F2C BL 0x1C16DFC
	0x02B88F30 LDR X0, [X20 + 0x20]
	0x02B88F34 LDRB W8, [X0 + 0x135]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+32]
	006 Move X20, X2
	007 Move X21, X1
	008 Move X19, X0
	009 Move W9, [X8+309]
	010 Move TEMP, X9
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {17}
	014 Move X0, X8
	015 Call 0x1C5D684
	016 Move X8, X0
	017 Move X8, [X8+192]
	018 Move X0, [X8]
	019 Move W8, [X0+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {25}
	024 Call 0x1C5D684
	025 Compare X21, 0
	026 JumpIfEqual {91}
	027 Move X8, [X21]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X0, [X20+32]
	030 Move W8, [X0+309]
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {36}
	035 Call 0x1C5D684
	036 Move X8, [X0+192]
	037 Move X0, [X8+8]
	038 Move W8, [X0+309]
	039 Move TEMP, X8
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {44}
	043 Call 0x1C5D684
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X0, [X20+32]
	049 Move W8, [X0+309]
	050 Move TEMP, X8
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfEqual {55}
	054 Call 0x1C5D684
	055 Move X8, [X0+192]
	056 Move X1, [X8]
	057 Move W8, [X1+309]
	058 Move TEMP, X8
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfEqual {65}
	062 Move X0, X1
	063 Call 0x1C5D684
	064 Move X1, X0
	065 Move X8, [X21]
	066 Move X9, [X1+64]
	067 Move X0, X21
	068 Move X8, [X8+64]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Call 0x1C17E08
	071 Move X8, X0
	072 Move X0, [X20+32]
	073 Move X21, [X8]
	074 Move X20, [X8+8]
	075 Move W9, [X0+309]
	076 Move TEMP, X9
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfEqual {81}
	080 Call 0x1C5D684
	081 Move X8, [X19]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move W8, [X19+8]
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move W8, [X19+12]
	086 Move X9, X20
	087 ShiftRight X9, 32
	088 And X9, X9, 0x7FFFFFFF
	089 NotImplemented "Instruction CMP not yet implemented."
	090 NotImplemented "Instruction CSET not yet implemented."
	091 Move W0, W31
	092 Move X20, [X31+16]
	093 Move X19, [X31+24]
	094 Move X30, [X31+32]
	095 Move X21, [X31+40]
	096 Return X0
	097 Call 0x1C181E0

Method: System.Boolean Equals(System.ArraySegment`1<T> obj)

Disassembly:
	0x02B88F38 TBNZ X8, 0x0, 0x2B88F40
	0x02B88F3C BL 0x1C5C684
	0x02B88F40 LDR X21, [X19]
	0x02B88F44 CBNZ X21, 0x2B88F58
	0x02B88F48 MOVZ W0, 0x32
	0x02B88F4C MOV X1, X31
	0x02B88F50 BL 0x339DFAC
	0x02B88F54 LDR X21, [X19]
	0x02B88F58 LDR X0, [X20 + 0x20]
	0x02B88F5C LDP W22, W20, [X19 + 0x8]
	0x02B88F60 LDRB W8, [X0 + 0x135]
	0x02B88F64 TBNZ X8, 0x0, 0x2B88F6C
	0x02B88F68 BL 0x1C5C684

ISIL:
	001 Move X8, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move W8, [X0+8]
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move W8, [X0+12]
	006 Move X9, X2
	007 ShiftRight X9, 32
	008 And X9, X9, 0x7FFFFFFF
	009 NotImplemented "Instruction CMP not yet implemented."
	010 NotImplemented "Instruction CSET not yet implemented."
	011 Return X0
	012 Move W0, W31
	013 Return X0

Method: System.Boolean op_Equality(System.ArraySegment`1<T> a, System.ArraySegment`1<T> b)

Disassembly:
	0x02B88F6C LDR X8, [X0 + 0xC0]
	0x02B88F70 MOV X0, X21
	0x02B88F74 MOV V0.16B, V8.16B
	0x02B88F78 MOV W1, W22
	0x02B88F7C LDR X3, [X8 + 0x50]
	0x02B88F80 MOV W2, W20
	0x02B88F84 BL 0x22EBCF8
	0x02B88F88 TBNZ X0, 0x1F, 0x2B88F98
	0x02B88F8C LDR W8, [X19 + 0x8]
	0x02B88F90 SUB W0, W0, W8
	0x02B88F94 B 0x2B88F9C
	0x02B88F98 MOVN W0, 0x0
	0x02B88F9C LDP X20, X19, [X31 + 0x20]
	0x02B88FA0 LDP X22, X21, [X31 + 0x10]
	0x02B88FA4 LDR X30, [X31 + 0x8]
	0x02B88FA8 LDR V8, [X31], #0x30
	0x02B88FAC RET
	0x02B88FB0 MOV X0, X31
	0x02B88FB4 B 0x339D82C
	0x02B88FB8 MOV X0, X31
	0x02B88FBC B 0x339D82C
	0x02B88FC0 STP X30, X21, [X31 - 0x20]!
	0x02B88FC4 STP X20, X19, [X31 + 0x10]
	0x02B88FC8 LDR X8, [X2 + 0x20]
	0x02B88FCC MOV X21, X2
	0x02B88FD0 MOV W19, W1
	0x02B88FD4 MOV X20, X0
	0x02B88FD8 LDRB W9, [X8 + 0x135]
	0x02B88FDC TBNZ X9, 0x0, 0x2B88FEC
	0x02B88FE0 MOV X0, X8
	0x02B88FE4 BL 0x1C5C684
	0x02B88FE8 MOV X8, X0
	0x02B88FEC LDR X8, [X8 + 0xC0]
	0x02B88FF0 LDR X0, [X8 + 0x8]
	0x02B88FF4 LDRB W8, [X0 + 0x135]
	0x02B88FF8 TBNZ X8, 0x0, 0x2B89000
	0x02B88FFC BL 0x1C5C684
	0x02B89000 LDR W8, [X0 + 0xE0]
	0x02B89004 CBNZ W8, 0x2B8900C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X4+32]
	008 Move X23, X4
	009 Move X19, X3
	010 Move X21, X2
	011 Move W9, [X8+309]
	012 Move X20, X1
	013 Move X22, X0
	014 Move TEMP, X9
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {21}
	018 Move X0, X8
	019 Call 0x1C5D684
	020 Move X8, X0
	021 Move X8, [X8+192]
	022 Move X0, [X8+8]
	023 Move W8, [X0+309]
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {29}
	028 Call 0x1C5D684
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, [X23+32]
	034 Move W8, [X0+309]
	035 Move TEMP, X8
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {40}
	039 Call 0x1C5D684
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move W0, W31
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X8, X20
	044 ShiftRight X8, 32
	045 And X8, X8, 0x7FFFFFFF
	046 Move X9, X19
	047 ShiftRight X9, 32
	048 And X9, X9, 0x7FFFFFFF
	049 NotImplemented "Instruction CMP not yet implemented."
	050 NotImplemented "Instruction CSET not yet implemented."
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move X30, [X31+48]
	056 Move X23, [X31+56]
	057 Return X0

Method: System.Boolean op_Inequality(System.ArraySegment`1<T> a, System.ArraySegment`1<T> b)

Disassembly:
	0x02B89008 BL 0x1C16DFC
	0x02B8900C LDR X0, [X21 + 0x20]
	0x02B89010 LDRB W8, [X0 + 0x135]
	0x02B89014 TBNZ X8, 0x0, 0x2B8901C
	0x02B89018 BL 0x1C5C684
	0x02B8901C LDR X8, [X20]
	0x02B89020 CBZ X8, 0x2B8902C
	0x02B89024 TBZ X19, 0x1F, 0x2B8903C
	0x02B89028 B 0x2B89048
	0x02B8902C MOVZ W0, 0x32
	0x02B89030 MOV X1, X31
	0x02B89034 BL 0x339DFAC
	0x02B89038 TBNZ X19, 0x1F, 0x2B89048
	0x02B8903C LDR W8, [X20 + 0xC]
	0x02B89040 CMP W8, W19
	0x02B89044 B.GT 0x2B89050
	0x02B89048 MOV X0, X31
	0x02B8904C BL 0x339E294
	0x02B89050 LDR X8, [X20]
	0x02B89054 CBZ X8, 0x2B89080
	0x02B89058 LDR W9, [X20 + 0x8]
	0x02B8905C LDR W10, [X8 + 0x18]
	0x02B89060 ADD W9, W9, W19
	0x02B89064 CMP W9, W10
	0x02B89068 B.CS 0x2B89084
	0x02B8906C ADD X8, X8, W9, 0x3, SXTW
	0x02B89070 LDR V0, [X8 + 0x20]
	0x02B89074 LDP X20, X19, [X31 + 0x10]
	0x02B89078 LDP X30, X21, [X31], #0x20
	0x02B8907C RET
	0x02B89080 BL 0x1C16F20
	0x02B89084 BL 0x1C16F28
	0x02B89088 MOVZ W0, 0x1
	0x02B8908C RET
	0x02B89090 MOV X0, X31
	0x02B89094 B 0x339D82C
	0x02B89098 MOV X0, X31
	0x02B8909C B 0x339D82C
	0x02B890A0 STR D8, [X31 - 0x30]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X4+32]
	008 Move X23, X4
	009 Move X19, X3
	010 Move X20, X2
	011 Move W9, [X8+309]
	012 Move X21, X1
	013 Move X22, X0
	014 Move TEMP, X9
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {21}
	018 Move X0, X8
	019 Call 0x1C5D684
	020 Move X8, X0
	021 Move X8, [X8+192]
	022 Move X0, [X8+8]
	023 Move W8, [X0+309]
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {29}
	028 Call 0x1C5D684
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, [X23+32]
	034 Move W8, [X0+309]
	035 Move TEMP, X8
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {40}
	039 Call 0x1C5D684
	040 Move X8, [X0+192]
	041 Move X0, X22
	042 Move X1, X21
	043 Move X2, X20
	044 Move X4, [X8+56]
	045 Move X3, X19
	046 Call 0x2B88F6C, X0, X1
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 NotImplemented "Instruction ORN not yet implemented."
	052 And W0, W8, 1
	053 Move X30, [X31+48]
	054 Move X23, [X31+56]
	055 Return X0

Method: System.ArraySegment`1<T> op_Implicit(T[] array)

Disassembly:
	0x02B890A4 STR X30, [X31 + 0x8]
	0x02B890A8 STP X22, X21, [X31 + 0x10]
	0x02B890AC STP X20, X19, [X31 + 0x20]
	0x02B890B0 LDR X8, [X1 + 0x20]
	0x02B890B4 MOV X19, X1
	0x02B890B8 MOV V8.16B, V0.16B
	0x02B890BC MOV X20, X0
	0x02B890C0 LDRB W9, [X8 + 0x135]
	0x02B890C4 TBNZ X9, 0x0, 0x2B890D4
	0x02B890C8 MOV X0, X8
	0x02B890CC BL 0x1C5C684
	0x02B890D0 MOV X8, X0
	0x02B890D4 LDR X8, [X8 + 0xC0]
	0x02B890D8 LDR X0, [X8 + 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Compare X0, 0
	005 JumpIfEqual {17}
	006 Move X0, [X1+32]
	007 Move W8, [X0+309]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {13}
	012 Call 0x1C5D684
	013 Move X8, [X19+24]
	014 Move X1, X8
	015 ShiftRight X1, 32
	016 And X1, X1, 0x7FFFFFFF
	017 Move X1, X31
	018 Move X0, X19
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Return X0

Method: T System.Collections.Generic.IList<T>.get_Item(System.Int32 index)

Disassembly:
	0x02B890DC LDRB W8, [X0 + 0x135]
	0x02B890E0 TBNZ X8, 0x0, 0x2B890E8
	0x02B890E4 BL 0x1C5C684
	0x02B890E8 LDR W8, [X0 + 0xE0]
	0x02B890EC CBNZ W8, 0x2B890F4
	0x02B890F0 BL 0x1C16DFC
	0x02B890F4 LDR X0, [X19 + 0x20]
	0x02B890F8 LDRB W8, [X0 + 0x135]
	0x02B890FC TBNZ X8, 0x0, 0x2B89104
	0x02B89100 BL 0x1C5C684
	0x02B89104 LDR X21, [X20]
	0x02B89108 CBNZ X21, 0x2B8911C
	0x02B8910C MOVZ W0, 0x32
	0x02B89110 MOV X1, X31
	0x02B89114 BL 0x339DFAC
	0x02B89118 LDR X21, [X20]
	0x02B8911C LDR X0, [X19 + 0x20]
	0x02B89120 LDP W22, W19, [X20 + 0x8]
	0x02B89124 LDRB W8, [X0 + 0x135]
	0x02B89128 TBNZ X8, 0x0, 0x2B89130
	0x02B8912C BL 0x1C5C684
	0x02B89130 LDR X8, [X0 + 0xC0]
	0x02B89134 MOV X0, X21
	0x02B89138 MOV V0.16B, V8.16B
	0x02B8913C MOV W1, W22
	0x02B89140 LDR X3, [X8 + 0x50]
	0x02B89144 MOV W2, W19
	0x02B89148 BL 0x22EBCF8
	0x02B8914C LDP X20, X19, [X31 + 0x20]
	0x02B89150 LDP X22, X21, [X31 + 0x10]
	0x02B89154 LDR X30, [X31 + 0x8]
	0x02B89158 ORN W8, W31, W0, 0x0
	0x02B8915C UBFM W0, W8, 0x1F, 0x1F
	0x02B89160 LDR V8, [X31], #0x30
	0x02B89164 RET
	0x02B89168 STR X30, [X31 - 0x10]!
	0x02B8916C MOV X0, X31
	0x02B89170 BL 0x339D82C
	0x02B89174 MOV W0, W31
	0x02B89178 LDR X30, [X31], #0x10
	0x02B8917C RET
	0x02B89180 SUB X31, X31, 0x60
	0x02B89184 STR X30, [X31 + 0x40]
	0x02B89188 STP X20, X19, [X31 + 0x50]
	0x02B8918C LDR X8, [X1 + 0x20]
	0x02B89190 MOV X19, X1
	0x02B89194 MOV X20, X0
	0x02B89198 LDRB W9, [X8 + 0x135]
	0x02B8919C TBNZ X9, 0x0, 0x2B891AC
	0x02B891A0 MOV X0, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+32]
	006 Move X21, X2
	007 Move W19, W1
	008 Move X20, X0
	009 Move W9, [X8+309]
	010 Move TEMP, X9
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {17}
	014 Move X0, X8
	015 Call 0x1C5D684
	016 Move X8, X0
	017 Move X8, [X8+192]
	018 Move X0, [X8+8]
	019 Move W8, [X0+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {25}
	024 Call 0x1C5D684
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, [X21+32]
	030 Move W8, [X0+309]
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {36}
	035 Call 0x1C5D684
	036 Move X8, [X20]
	037 Compare X8, 0
	038 JumpIfEqual {43}
	039 Move TEMP, X19
	040 And TEMP, TEMP, -2147483648
	041 Compare TEMP, -2147483648
	042 JumpIfNotEqual {50}
	043 Move W0, 50
	044 Move X1, X31
	045 Call ThrowHelper.ThrowInvalidOperationException, X0
	046 Move TEMP, X19
	047 And TEMP, TEMP, -2147483648
	048 Compare TEMP, -2147483648
	049 JumpIfEqual {52}
	050 Move W8, [X20+12]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X0, X31
	053 Call ThrowHelper.ThrowArgumentOutOfRange_IndexException
	054 Move X8, [X20]
	055 Compare X8, 0
	056 JumpIfEqual {68}
	057 Move W9, [X20+8]
	058 Move W10, [X8+24]
	059 Add W9, W9, W19
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Add X8, X8, W9
	062 Move W0, [X8+32]
	063 Move X20, [X31+16]
	064 Move X19, [X31+24]
	065 Move X30, [X31+32]
	066 Move X21, [X31+40]
	067 Return X0
	068 Call 0x1C17F20
	069 Call 0x1C17F28

Method: System.Void System.Collections.Generic.IList<T>.set_Item(System.Int32 index, T value)

Disassembly:
	0x02B891A4 BL 0x1C5C684
	0x02B891A8 MOV X8, X0
	0x02B891AC LDR X8, [X8 + 0xC0]
	0x02B891B0 LDR X0, [X8 + 0x8]
	0x02B891B4 LDRB W8, [X0 + 0x135]
	0x02B891B8 TBNZ X8, 0x0, 0x2B891C0
	0x02B891BC BL 0x1C5C684
	0x02B891C0 LDR W8, [X0 + 0xE0]
	0x02B891C4 CBNZ W8, 0x2B891CC
	0x02B891C8 BL 0x1C16DFC
	0x02B891CC LDR X0, [X19 + 0x20]
	0x02B891D0 LDRB W8, [X0 + 0x135]
	0x02B891D4 TBNZ X8, 0x0, 0x2B891DC
	0x02B891D8 BL 0x1C5C684
	0x02B891DC LDR X8, [X0 + 0xC0]
	0x02B891E0 MOV X0, X20
	0x02B891E4 LDR X1, [X8 + 0x58]
	0x02B891E8 ADD X8, X31, 0x0
	0x02B891EC BL 0x2B8888C
	0x02B891F0 LDR X8, [X31 + 0x10]
	0x02B891F4 LDR V0, [X31]
	0x02B891F8 STR X8, [X31 + 0x30]
	0x02B891FC STR V0, [X31 + 0x2]
	0x02B89200 STR V0, [X31]
	0x02B89204 STR X8, [X31 + 0x10]
	0x02B89208 LDR X0, [X19 + 0x20]
	0x02B8920C LDRB W8, [X0 + 0x135]
	0x02B89210 TBNZ X8, 0x0, 0x2B89218
	0x02B89214 BL 0x1C5C684
	0x02B89218 LDR X8, [X0 + 0xC0]
	0x02B8921C ADD X1, X31, 0x0
	0x02B89220 LDR X0, [X8 + 0x20]
	0x02B89224 BL 0x1C16E04
	0x02B89228 LDP X20, X19, [X31 + 0x50]
	0x02B8922C LDR X30, [X31 + 0x40]
	0x02B89230 ADD X31, X31, 0x60
	0x02B89234 RET
	0x02B89238 SUB X31, X31, 0x60
	0x02B8923C STR X30, [X31 + 0x40]
	0x02B89240 STP X20, X19, [X31 + 0x50]
	0x02B89244 LDR X8, [X1 + 0x20]
	0x02B89248 MOV X19, X1
	0x02B8924C MOV X20, X0
	0x02B89250 LDRB W9, [X8 + 0x135]
	0x02B89254 TBNZ X9, 0x0, 0x2B89264
	0x02B89258 MOV X0, X8
	0x02B8925C BL 0x1C5C684
	0x02B89260 MOV X8, X0
	0x02B89264 LDR X8, [X8 + 0xC0]
	0x02B89268 LDR X0, [X8 + 0x8]
	0x02B8926C LDRB W8, [X0 + 0x135]
	0x02B89270 TBNZ X8, 0x0, 0x2B89278
	0x02B89274 BL 0x1C5C684

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X3+32]
	007 Move X22, X3
	008 Move W19, W2
	009 Move W20, W1
	010 Move W9, [X8+309]
	011 Move X21, X0
	012 Move TEMP, X9
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {19}
	016 Move X0, X8
	017 Call 0x1C5D684
	018 Move X8, X0
	019 Move X8, [X8+192]
	020 Move X0, [X8+8]
	021 Move W8, [X0+309]
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {27}
	026 Call 0x1C5D684
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, [X22+32]
	032 Move W8, [X0+309]
	033 Move TEMP, X8
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {38}
	037 Call 0x1C5D684
	038 Move X8, [X21]
	039 Compare X8, 0
	040 JumpIfEqual {45}
	041 Move TEMP, X20
	042 And TEMP, TEMP, -2147483648
	043 Compare TEMP, -2147483648
	044 JumpIfNotEqual {52}
	045 Move W0, 50
	046 Move X1, X31
	047 Call ThrowHelper.ThrowInvalidOperationException, X0
	048 Move TEMP, X20
	049 And TEMP, TEMP, -2147483648
	050 Compare TEMP, -2147483648
	051 JumpIfEqual {54}
	052 Move W8, [X21+12]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X0, X31
	055 Call ThrowHelper.ThrowArgumentOutOfRange_IndexException
	056 Move X8, [X21]
	057 Compare X8, 0
	058 JumpIfEqual {71}
	059 Move W9, [X21+8]
	060 Move W10, [X8+24]
	061 Add W9, W9, W20
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Add X8, X8, W9
	064 Move [X8+32], W19
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X22, [X31+16]
	068 Move X21, [X31+24]
	069 Move X30, [X31+48]
	070 Return 
	071 Call 0x1C17F20
	072 Call 0x1C17F28

Method: System.Int32 System.Collections.Generic.IList<T>.IndexOf(T item)

Disassembly:
	0x02B89278 LDR W8, [X0 + 0xE0]
	0x02B8927C CBNZ W8, 0x2B89284
	0x02B89280 BL 0x1C16DFC
	0x02B89284 LDR X0, [X19 + 0x20]
	0x02B89288 LDRB W8, [X0 + 0x135]
	0x02B8928C TBNZ X8, 0x0, 0x2B89294
	0x02B89290 BL 0x1C5C684
	0x02B89294 LDR X8, [X0 + 0xC0]
	0x02B89298 MOV X0, X20
	0x02B8929C LDR X1, [X8 + 0x58]
	0x02B892A0 ADD X8, X31, 0x0
	0x02B892A4 BL 0x2B8888C
	0x02B892A8 LDR X8, [X31 + 0x10]
	0x02B892AC LDR V0, [X31]
	0x02B892B0 STR X8, [X31 + 0x30]
	0x02B892B4 STR V0, [X31 + 0x2]
	0x02B892B8 STR V0, [X31]
	0x02B892BC STR X8, [X31 + 0x10]
	0x02B892C0 LDR X0, [X19 + 0x20]
	0x02B892C4 LDRB W8, [X0 + 0x135]
	0x02B892C8 TBNZ X8, 0x0, 0x2B892D0
	0x02B892CC BL 0x1C5C684
	0x02B892D0 LDR X8, [X0 + 0xC0]
	0x02B892D4 ADD X1, X31, 0x0
	0x02B892D8 LDR X0, [X8 + 0x20]
	0x02B892DC BL 0x1C16E04
	0x02B892E0 LDP X20, X19, [X31 + 0x50]
	0x02B892E4 LDR X30, [X31 + 0x40]
	0x02B892E8 ADD X31, X31, 0x60
	0x02B892EC RET
	0x02B892F0 LDR X8, [X0]
	0x02B892F4 CBZ X8, 0x2B892FC
	0x02B892F8 RET
	0x02B892FC MOVZ W0, 0x32
	0x02B89300 MOV X1, X31
	0x02B89304 B 0x339DFAC
	0x02B89308 STP X30, X21, [X31 - 0x20]!
	0x02B8930C STP X20, X19, [X31 + 0x10]
	0x02B89310 MOV X19, X0
	0x02B89314 LDR X0, [X0 + 0x20]
	0x02B89318 LDRB W8, [X0 + 0x135]
	0x02B8931C TBNZ X8, 0x0, 0x2B89324
	0x02B89320 BL 0x1C5C684
	0x02B89324 LDR X8, [X0 + 0xC0]
	0x02B89328 LDR X0, [X8 + 0x68]
	0x02B8932C LDRB W8, [X0 + 0x135]
	0x02B89330 TBNZ X8, 0x0, 0x2B89338
	0x02B89334 BL 0x1C5C684
	0x02B89338 MOV W1, W31
	0x02B8933C BL 0x1C16D6C
	0x02B89340 LDR X8, [X19 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X2+32]
	008 Move X21, X2
	009 Move W20, W1
	010 Move X19, X0
	011 Move W9, [X8+309]
	012 Move TEMP, X9
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {19}
	016 Move X0, X8
	017 Call 0x1C5D684
	018 Move X8, X0
	019 Move X8, [X8+192]
	020 Move X0, [X8+8]
	021 Move W8, [X0+309]
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {27}
	026 Call 0x1C5D684
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, [X21+32]
	032 Move W8, [X0+309]
	033 Move TEMP, X8
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {38}
	037 Call 0x1C5D684
	038 Move X22, [X19]
	039 Compare X22, 0
	040 JumpIfNotEqual {45}
	041 Move W0, 50
	042 Move X1, X31
	043 Call ThrowHelper.ThrowInvalidOperationException, X0
	044 Move X22, [X19]
	045 Move X0, [X21+32]
	046 Move W23, [X19+8]
	047 Move W21, [X19+12]
	048 Move W8, [X0+309]
	049 Move TEMP, X8
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfEqual {54}
	053 Call 0x1C5D684
	054 Move X8, [X0+192]
	055 Move X0, X22
	056 Move W1, W20
	057 Move W2, W23
	058 Move X4, [X8+80]
	059 Move W3, W21
	060 Call Array.IndexOf, X0, X1, X2, X3
	061 Move TEMP, X0
	062 And TEMP, TEMP, -2147483648
	063 Compare TEMP, -2147483648
	064 JumpIfEqual {67}
	065 Move W8, [X19+8]
	066 Subtract W0, W0, W8
	067 Move TEMP, 0
	068 Not TEMP
	069 Move W0, TEMP
	070 Move X20, [X31+32]
	071 Move X19, [X31+40]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Move X23, [X31+56]
	076 Return X0

Method: System.Void System.Collections.Generic.IList<T>.Insert(System.Int32 index, T item)

Disassembly:
	0x02B89344 MOV X20, X0
	0x02B89348 LDRB W9, [X8 + 0x135]

ISIL:
	001 Move X0, X31
	002 Call ThrowHelper.ThrowNotSupportedException
	003 Return 

Method: System.Void System.Collections.Generic.IList<T>.RemoveAt(System.Int32 index)

Disassembly:
	0x02B8934C TBNZ X9, 0x0, 0x2B89358
	0x02B89350 MOV X0, X8

ISIL:
	001 Move X0, X31
	002 Call ThrowHelper.ThrowNotSupportedException
	003 Return 

Method: T System.Collections.Generic.IReadOnlyList<T>.get_Item(System.Int32 index)

Disassembly:
	0x02B89354 BL 0x1C5C684
	0x02B89358 CBZ X20, 0x2B893C8
	0x02B8935C LDR X0, [X19 + 0x20]
	0x02B89360 LDR W21, [X20 + 0x18]
	0x02B89364 LDRB W8, [X0 + 0x135]
	0x02B89368 TBNZ X8, 0x0, 0x2B89370
	0x02B8936C BL 0x1C5C684
	0x02B89370 LDR X8, [X0 + 0xC0]
	0x02B89374 LDR X0, [X8 + 0x8]
	0x02B89378 LDRB W8, [X0 + 0x135]
	0x02B8937C TBNZ X8, 0x0, 0x2B89384
	0x02B89380 BL 0x1C5C684
	0x02B89384 LDR X8, [X0 + 0xB8]
	0x02B89388 STR X20, [X8]
	0x02B8938C STP W31, W21, [X8 + 0x8]
	0x02B89390 LDR X0, [X19 + 0x20]
	0x02B89394 LDRB W8, [X0 + 0x135]
	0x02B89398 TBNZ X8, 0x0, 0x2B893A0
	0x02B8939C BL 0x1C5C684
	0x02B893A0 LDR X8, [X0 + 0xC0]
	0x02B893A4 LDR X0, [X8 + 0x8]
	0x02B893A8 LDRB W8, [X0 + 0x135]
	0x02B893AC TBNZ X8, 0x0, 0x2B893BC
	0x02B893B0 LDP X20, X19, [X31 + 0x10]
	0x02B893B4 LDP X30, X21, [X31], #0x20
	0x02B893B8 B 0x1C5C684
	0x02B893BC LDP X20, X19, [X31 + 0x10]
	0x02B893C0 LDP X30, X21, [X31], #0x20
	0x02B893C4 RET
	0x02B893C8 MOVZ W0, 0x3
	0x02B893CC MOV X1, X31
	0x02B893D0 BL 0x338F3E0
	0x02B893D4 BL 0x1C16F20
	0x02B893D8 STP X30, X19, [X31 - 0x10]!
	0x02B893DC MOV X19, X0
	0x02B893E0 LDR X0, [X0 + 0x20]
	0x02B893E4 LDRB W8, [X0 + 0x135]
	0x02B893E8 TBNZ X8, 0x0, 0x2B893F0
	0x02B893EC BL 0x1C5C684
	0x02B893F0 LDR X8, [X0 + 0xC0]
	0x02B893F4 LDR X0, [X8 + 0x8]
	0x02B893F8 LDRB W8, [X0 + 0x135]
	0x02B893FC TBNZ X8, 0x0, 0x2B89404
	0x02B89400 BL 0x1C5C684
	0x02B89404 LDR W8, [X0 + 0xE0]
	0x02B89408 CBNZ W8, 0x2B89410
	0x02B8940C BL 0x1C16DFC
	0x02B89410 LDR X0, [X19 + 0x20]
	0x02B89414 LDRB W8, [X0 + 0x135]
	0x02B89418 TBNZ X8, 0x0, 0x2B89420

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+32]
	006 Move X21, X2
	007 Move W19, W1
	008 Move X20, X0
	009 Move W9, [X8+309]
	010 Move TEMP, X9
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {17}
	014 Move X0, X8
	015 Call 0x1C5D684
	016 Move X8, X0
	017 Move X8, [X8+192]
	018 Move X0, [X8+8]
	019 Move W8, [X0+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {25}
	024 Call 0x1C5D684
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, [X21+32]
	030 Move W8, [X0+309]
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {36}
	035 Call 0x1C5D684
	036 Move X8, [X20]
	037 Compare X8, 0
	038 JumpIfEqual {43}
	039 Move TEMP, X19
	040 And TEMP, TEMP, -2147483648
	041 Compare TEMP, -2147483648
	042 JumpIfNotEqual {50}
	043 Move W0, 50
	044 Move X1, X31
	045 Call ThrowHelper.ThrowInvalidOperationException, X0
	046 Move TEMP, X19
	047 And TEMP, TEMP, -2147483648
	048 Compare TEMP, -2147483648
	049 JumpIfEqual {52}
	050 Move W8, [X20+12]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X0, X31
	053 Call ThrowHelper.ThrowArgumentOutOfRange_IndexException
	054 Move X8, [X20]
	055 Compare X8, 0
	056 JumpIfEqual {68}
	057 Move W9, [X20+8]
	058 Move W10, [X8+24]
	059 Add W9, W9, W19
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Add X8, X8, W9
	062 Move W0, [X8+32]
	063 Move X20, [X31+16]
	064 Move X19, [X31+24]
	065 Move X30, [X31+32]
	066 Move X21, [X31+40]
	067 Return X0
	068 Call 0x1C17F20
	069 Call 0x1C17F28

Method: System.Boolean System.Collections.Generic.ICollection<T>.get_IsReadOnly()

Disassembly:
	0x02B8941C BL 0x1C5C684
	0x02B89420 LDR X8, [X0 + 0xC0]

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Void System.Collections.Generic.ICollection<T>.Add(T item)

Disassembly:
	0x02B89424 LDR X0, [X8 + 0x8]
	0x02B89428 LDRB W8, [X0 + 0x135]

ISIL:
	001 Move X0, X31
	002 Call ThrowHelper.ThrowNotSupportedException
	003 Return 

Method: System.Void System.Collections.Generic.ICollection<T>.Clear()

Disassembly:
	0x02B8942C TBNZ X8, 0x0, 0x2B89434
	0x02B89430 BL 0x1C5C684

ISIL:
	001 Move X0, X31
	002 Call ThrowHelper.ThrowNotSupportedException
	003 Return 

Method: System.Boolean System.Collections.Generic.ICollection<T>.Contains(T item)

Disassembly:
	0x02B89434 LDR X8, [X0 + 0xB8]
	0x02B89438 LDP X0, X1, [X8]
	0x02B8943C LDP X30, X19, [X31], #0x10
	0x02B89440 RET
	0x02B89444 STR X30, [X31 - 0x20]!
	0x02B89448 STP X20, X19, [X31 + 0x10]
	0x02B8944C CBZ X1, 0x2B8946C
	0x02B89450 STR X1, [X0]
	0x02B89454 STR W31, [X0 + 0x8]
	0x02B89458 LDR X8, [X1 + 0x18]
	0x02B8945C LDP X20, X19, [X31 + 0x10]
	0x02B89460 STR W8, [X0 + 0xC]
	0x02B89464 LDR X30, [X31], #0x20
	0x02B89468 RET
	0x02B8946C MOV X19, X0
	0x02B89470 MOVZ W0, 0x3
	0x02B89474 MOV X20, X1
	0x02B89478 BL 0x338F3E0
	0x02B8947C STR X20, [X19]
	0x02B89480 STR W31, [X19 + 0x8]
	0x02B89484 BL 0x1C16F20
	0x02B89488 STR X30, [X31 - 0x30]!
	0x02B8948C STP X22, X21, [X31 + 0x10]
	0x02B89490 STP X20, X19, [X31 + 0x20]
	0x02B89494 MOV W19, W3
	0x02B89498 MOV W20, W2
	0x02B8949C MOV X22, X1
	0x02B894A0 MOV X21, X0
	0x02B894A4 CBZ X1, 0x2B894BC
	0x02B894A8 LDR W8, [X22 + 0x18]
	0x02B894AC SUBS W8, W8, W20
	0x02B894B0 B.CC 0x2B894BC
	0x02B894B4 CMP W8, W19
	0x02B894B8 B.CS 0x2B894D0
	0x02B894BC MOV X0, X22
	0x02B894C0 MOV W1, W20
	0x02B894C4 MOV W2, W19
	0x02B894C8 MOV X3, X31
	0x02B894CC BL 0x339E570
	0x02B894D0 STR X22, [X21]
	0x02B894D4 STP W20, W19, [X21 + 0x8]
	0x02B894D8 LDP X20, X19, [X31 + 0x20]
	0x02B894DC LDP X22, X21, [X31 + 0x10]
	0x02B894E0 LDR X30, [X31], #0x30
	0x02B894E4 RET
	0x02B894E8 LDR X0, [X0]
	0x02B894EC RET
	0x02B894F0 LDR W0, [X0 + 0x8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X2+32]
	008 Move X20, X2
	009 Move W19, W1
	010 Move X21, X0
	011 Move W9, [X8+309]
	012 Move TEMP, X9
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {19}
	016 Move X0, X8
	017 Call 0x1C5D684
	018 Move X8, X0
	019 Move X8, [X8+192]
	020 Move X0, [X8+8]
	021 Move W8, [X0+309]
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {27}
	026 Call 0x1C5D684
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, [X20+32]
	032 Move W8, [X0+309]
	033 Move TEMP, X8
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {38}
	037 Call 0x1C5D684
	038 Move X22, [X21]
	039 Compare X22, 0
	040 JumpIfNotEqual {45}
	041 Move W0, 50
	042 Move X1, X31
	043 Call ThrowHelper.ThrowInvalidOperationException, X0
	044 Move X22, [X21]
	045 Move X0, [X20+32]
	046 Move W23, [X21+8]
	047 Move W20, [X21+12]
	048 Move W8, [X0+309]
	049 Move TEMP, X8
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfEqual {54}
	053 Call 0x1C5D684
	054 Move X8, [X0+192]
	055 Move X0, X22
	056 Move W1, W19
	057 Move W2, W23
	058 Move X4, [X8+80]
	059 Move W3, W20
	060 Call Array.IndexOf, X0, X1, X2, X3
	061 Move X20, [X31+32]
	062 Move X19, [X31+40]
	063 Move X22, [X31+16]
	064 Move X21, [X31+24]
	065 NotImplemented "Instruction ORN not yet implemented."
	066 Move W0, W8
	067 ShiftRight W0, 31
	068 And W0, W0, 0x7FFFFFFF
	069 Move X30, [X31+48]
	070 Move X23, [X31+56]
	071 Return X0

Method: System.Boolean System.Collections.Generic.ICollection<T>.Remove(T item)

Disassembly:
	0x02B894F4 RET
	0x02B894F8 LDR W0, [X0 + 0xC]
	0x02B894FC RET
	0x02B89500 STR X30, [X31 - 0x30]!
	0x02B89504 STP X22, X21, [X31 + 0x10]
	0x02B89508 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, X31
	003 Call ThrowHelper.ThrowNotSupportedException
	004 Move W0, W31
	005 Move X30, [X31+16]
	006 Return X0

Method: System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()

Disassembly:
	0x02B8950C MOV X21, X0
	0x02B89510 LDR X0, [X1 + 0x20]
	0x02B89514 MOV X20, X1
	0x02B89518 MOV X19, X8
	0x02B8951C LDRB W9, [X0 + 0x135]
	0x02B89520 TBNZ X9, 0x0, 0x2B89528
	0x02B89524 BL 0x1C5C684
	0x02B89528 LDR X8, [X0 + 0xC0]
	0x02B8952C LDR X0, [X8 + 0x8]
	0x02B89530 LDRB W8, [X0 + 0x135]
	0x02B89534 TBNZ X8, 0x0, 0x2B8953C
	0x02B89538 BL 0x1C5C684
	0x02B8953C LDR W8, [X0 + 0xE0]
	0x02B89540 CBNZ W8, 0x2B89548
	0x02B89544 BL 0x1C16DFC
	0x02B89548 LDR X0, [X20 + 0x20]
	0x02B8954C LDRB W8, [X0 + 0x135]
	0x02B89550 TBNZ X8, 0x0, 0x2B89558
	0x02B89554 BL 0x1C5C684
	0x02B89558 LDR X22, [X21]
	0x02B8955C CBNZ X22, 0x2B89570
	0x02B89560 MOVZ W0, 0x32
	0x02B89564 MOV X1, X31
	0x02B89568 BL 0x339DFAC
	0x02B8956C LDR X22, [X21]
	0x02B89570 LDR X21, [X21 + 0x8]
	0x02B89574 STP X31, X31, [X19]
	0x02B89578 STR X31, [X19 + 0x10]
	0x02B8957C LDR X0, [X20 + 0x20]
	0x02B89580 LDRB W8, [X0 + 0x135]
	0x02B89584 TBNZ X8, 0x0, 0x2B8958C
	0x02B89588 BL 0x1C5C684
	0x02B8958C LDR X8, [X0 + 0xC0]
	0x02B89590 MOV X0, X19
	0x02B89594 MOV X1, X22
	0x02B89598 MOV X2, X21
	0x02B8959C LDR X3, [X8 + 0x28]
	0x02B895A0 LDP X20, X19, [X31 + 0x20]
	0x02B895A4 LDP X22, X21, [X31 + 0x10]
	0x02B895A8 LDR X30, [X31], #0x30
	0x02B895AC B 0x2BCC494
	0x02B895B0 STR X30, [X31 - 0x20]!
	0x02B895B4 STP X20, X19, [X31 + 0x10]
	0x02B895B8 ADRP X20, 0x1852000
	0x02B895BC LDRB W8, [X20 + 0x5BE]
	0x02B895C0 MOV X19, X0

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+80], X20
	004 Move [X31+88], X19
	005 Move X8, [X1+32]
	006 Move X19, X1
	007 Move X20, X0
	008 Move W9, [X8+309]
	009 Move TEMP, X9
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {16}
	013 Move X0, X8
	014 Call 0x1C5D684
	015 Move X8, X0
	016 Move X8, [X8+192]
	017 Move X0, [X8+8]
	018 Move W8, [X0+309]
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {24}
	023 Call 0x1C5D684
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, [X19+32]
	029 Move W8, [X0+309]
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {35}
	034 Call 0x1C5D684
	035 Move X8, [X0+192]
	036 Move X0, X20
	037 Move X1, [X8+88]
	038 Add X8, X31, 0
	039 Call 0x2B88C28, X0
	040 Move X8, [X31+16]
	041 Move V0, [X31]
	042 Move [X31+48], X8
	043 Move [X31+2], V0
	044 Move [X31], V0
	045 Move [X31+16], X8
	046 Move X0, [X19+32]
	047 Move W8, [X0+309]
	048 Move TEMP, X8
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfEqual {53}
	052 Call 0x1C5D684
	053 Move X8, [X0+192]
	054 Add X1, X31, 0
	055 Move X0, [X8+32]
	056 Call 0x1C17E04
	057 Move X20, [X31+80]
	058 Move X19, [X31+88]
	059 Move X30, [X31+64]
	060 Add X31, X31, 96
	061 Return X0

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x02B895C4 TBNZ X8, 0x0, 0x2B895DC
	0x02B895C8 ADRP X0, 0x1594000
	0x02B895CC LDR X0, [X0 + 0xEE8]
	0x02B895D0 BL 0x1C16CF4
	0x02B895D4 MOVZ W8, 0x1
	0x02B895D8 STRB W8, [X20 + 0x5BE]
	0x02B895DC LDR X8, [X19]
	0x02B895E0 CBZ X8, 0x2B89640
	0x02B895E4 ADRP X8, 0x1594000
	0x02B895E8 LDR X8, [X8 + 0xEE8]
	0x02B895EC LDR W20, [X19 + 0x8]
	0x02B895F0 LDR X0, [X8]
	0x02B895F4 LDR W8, [X0 + 0xE0]
	0x02B895F8 CBNZ W8, 0x2B89600
	0x02B895FC BL 0x1C16DFC
	0x02B89600 MOVZ W0, 0x1505
	0x02B89604 MOV W1, W20
	0x02B89608 MOV X2, X31
	0x02B8960C BL 0x32E15C0
	0x02B89610 LDR W1, [X19 + 0xC]
	0x02B89614 MOV X2, X31
	0x02B89618 BL 0x32E15C0
	0x02B8961C LDR X8, [X19]
	0x02B89620 CBZ X8, 0x2B89650
	0x02B89624 LDR X9, [X8]
	0x02B89628 MOV W19, W0
	0x02B8962C MOV X0, X8
	0x02B89630 LDP X10, X1, [X9 + 0x158]
	0x02B89634 BLR X10
	0x02B89638 EOR W0, W0, W19, 0x0
	0x02B8963C B 0x2B89644
	0x02B89640 MOV W0, W31
	0x02B89644 LDP X20, X19, [X31 + 0x10]
	0x02B89648 LDR X30, [X31], #0x20
	0x02B8964C RET
	0x02B89650 BL 0x1C16F20
	0x02B89654 STR X30, [X31 - 0x30]!
	0x02B89658 STP X22, X21, [X31 + 0x10]
	0x02B8965C STP X20, X19, [X31 + 0x20]
	0x02B89660 LDR X8, [X3 + 0x20]
	0x02B89664 MOV X22, X3
	0x02B89668 MOV W19, W2
	0x02B8966C MOV X20, X1
	0x02B89670 LDRB W9, [X8 + 0x135]
	0x02B89674 MOV X21, X0
	0x02B89678 TBNZ X9, 0x0, 0x2B89688

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+80], X20
	004 Move [X31+88], X19
	005 Move X8, [X1+32]
	006 Move X19, X1
	007 Move X20, X0
	008 Move W9, [X8+309]
	009 Move TEMP, X9
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {16}
	013 Move X0, X8
	014 Call 0x1C5D684
	015 Move X8, X0
	016 Move X8, [X8+192]
	017 Move X0, [X8+8]
	018 Move W8, [X0+309]
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {24}
	023 Call 0x1C5D684
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, [X19+32]
	029 Move W8, [X0+309]
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {35}
	034 Call 0x1C5D684
	035 Move X8, [X0+192]
	036 Move X0, X20
	037 Move X1, [X8+88]
	038 Add X8, X31, 0
	039 Call 0x2B88C28, X0
	040 Move X8, [X31+16]
	041 Move V0, [X31]
	042 Move [X31+48], X8
	043 Move [X31+2], V0
	044 Move [X31], V0
	045 Move [X31+16], X8
	046 Move X0, [X19+32]
	047 Move W8, [X0+309]
	048 Move TEMP, X8
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfEqual {53}
	052 Call 0x1C5D684
	053 Move X8, [X0+192]
	054 Add X1, X31, 0
	055 Move X0, [X8+32]
	056 Call 0x1C17E04
	057 Move X20, [X31+80]
	058 Move X19, [X31+88]
	059 Move X30, [X31+64]
	060 Add X31, X31, 96
	061 Return X0

Method: System.Void ThrowInvalidOperationIfDefault()

Disassembly:
	0x02B8967C MOV X0, X8
	0x02B89680 BL 0x1C5C684
	0x02B89684 MOV X8, X0
	0x02B89688 LDR X8, [X8 + 0xC0]
	0x02B8968C LDR X0, [X8 + 0x8]
	0x02B89690 LDRB W8, [X0 + 0x135]

ISIL:
	001 Move X8, [X0]
	002 Compare X8, 0
	003 JumpIfEqual {5}
	004 Return 
	005 Move W0, 50
	006 Move X1, X31
	007 Call ThrowHelper.ThrowInvalidOperationException, X0
	008 Return 

Method: System.Void .cctor()

Disassembly:
	0x02B89694 TBNZ X8, 0x0, 0x2B8969C
	0x02B89698 BL 0x1C5C684
	0x02B8969C LDR W8, [X0 + 0xE0]
	0x02B896A0 CBNZ W8, 0x2B896A8
	0x02B896A4 BL 0x1C16DFC
	0x02B896A8 LDR X0, [X22 + 0x20]
	0x02B896AC LDRB W8, [X0 + 0x135]
	0x02B896B0 TBNZ X8, 0x0, 0x2B896B8
	0x02B896B4 BL 0x1C5C684
	0x02B896B8 LDR X0, [X21]
	0x02B896BC CBNZ X0, 0x2B896D0
	0x02B896C0 MOVZ W0, 0x32
	0x02B896C4 MOV X1, X31
	0x02B896C8 BL 0x339DFAC
	0x02B896CC LDR X0, [X21]
	0x02B896D0 LDP W1, W4, [X21 + 0x8]
	0x02B896D4 MOV X2, X20
	0x02B896D8 MOV W3, W19
	0x02B896DC LDP X20, X19, [X31 + 0x20]
	0x02B896E0 LDP X22, X21, [X31 + 0x10]
	0x02B896E4 MOV X5, X31
	0x02B896E8 LDR X30, [X31], #0x30
	0x02B896EC B 0x339FCE8
	0x02B896F0 STP X30, X21, [X31 - 0x20]!
	0x02B896F4 STP X20, X19, [X31 + 0x10]
	0x02B896F8 LDR X8, [X2 + 0x20]
	0x02B896FC MOV X20, X2
	0x02B89700 MOV X21, X1
	0x02B89704 MOV X19, X0
	0x02B89708 LDRB W9, [X8 + 0x135]
	0x02B8970C TBNZ X9, 0x0, 0x2B8971C
	0x02B89710 MOV X0, X8
	0x02B89714 BL 0x1C5C684
	0x02B89718 MOV X8, X0
	0x02B8971C LDR X8, [X8 + 0xC0]
	0x02B89720 LDR X0, [X8]
	0x02B89724 LDRB W8, [X0 + 0x135]
	0x02B89728 TBNZ X8, 0x0, 0x2B89730
	0x02B8972C BL 0x1C5C684
	0x02B89730 CBZ X21, 0x2B897FC
	0x02B89734 LDR X8, [X21]
	0x02B89738 CMP X8, X0
	0x02B8973C B.NE 0x2B897FC
	0x02B89740 LDR X0, [X20 + 0x20]
	0x02B89744 LDRB W8, [X0 + 0x135]
	0x02B89748 TBNZ X8, 0x0, 0x2B89750
	0x02B8974C BL 0x1C5C684
	0x02B89750 LDR X8, [X0 + 0xC0]
	0x02B89754 LDR X0, [X8 + 0x8]
	0x02B89758 LDRB W8, [X0 + 0x135]
	0x02B8975C TBNZ X8, 0x0, 0x2B89764
	0x02B89760 BL 0x1C5C684

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Move X0, [X0+32]
	007 Move W8, [X0+309]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {13}
	012 Call 0x1C5D684
	013 Move X8, [X0+192]
	014 Move X0, [X8+104]
	015 Move W8, [X0+309]
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {21}
	020 Call 0x1C5D684
	021 Move W1, W31
	022 Call 0x1C17D6C
	023 Move X8, [X19+32]
	024 Move X20, X0
	025 Move W9, [X8+309]
	026 Move TEMP, X9
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {32}
	030 Move X0, X8
	031 Call 0x1C5D684
	032 Compare X20, 0
	033 JumpIfEqual {79}
	034 Move X0, [X19+32]
	035 Move W21, [X20+24]
	036 Move W8, [X0+309]
	037 Move TEMP, X8
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {42}
	041 Call 0x1C5D684
	042 Move X8, [X0+192]
	043 Move X0, [X8+8]
	044 Move W8, [X0+309]
	045 Move TEMP, X8
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {50}
	049 Call 0x1C5D684
	050 Move X8, [X0+184]
	051 Move [X8], X20
	052 Move [X8+8], W31
	053 Move [X8+12], W21
	054 Move X0, [X19+32]
	055 Move W8, [X0+309]
	056 Move TEMP, X8
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfEqual {61}
	060 Call 0x1C5D684
	061 Move X8, [X0+192]
	062 Move X0, [X8+8]
	063 Move W8, [X0+309]
	064 Move TEMP, X8
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfEqual {74}
	068 Move X20, [X31+16]
	069 Move X19, [X31+24]
	070 Move X30, [X31+32]
	071 Move X21, [X31+40]
	072 Call 0x1C5D684
	073 Return 
	074 Move X20, [X31+16]
	075 Move X19, [X31+24]
	076 Move X30, [X31+32]
	077 Move X21, [X31+40]
	078 Return 
	079 Move W0, 3
	080 Move X1, X31
	081 Call ThrowHelper.ThrowArgumentNullException, X0
	082 Call 0x1C17F20

