Type: System.ArraySegment`1/Enumerator

Method: System.Void .ctor(System.ArraySegment`1<T> arraySegment)

Disassembly:
	0x02BB7CE0 STR V0, [X31]
	0x02BB7CE4 TBNZ X9, 0x0, 0x2BB7CF4
	0x02BB7CE8 MOV X0, X8
	0x02BB7CEC BL 0x1C5C684
	0x02BB7CF0 MOV X8, X0
	0x02BB7CF4 LDR X8, [X8 + 0xC0]
	0x02BB7CF8 ADD X1, X31, 0x0
	0x02BB7CFC LDR X0, [X8 + 0x18]
	0x02BB7D00 BL 0x1C16E04
	0x02BB7D04 LDP X20, X19, [X31 + 0x20]
	0x02BB7D08 LDR X30, [X31 + 0x10]
	0x02BB7D0C ADD X31, X31, 0x30
	0x02BB7D10 RET
	0x02BB7D14 STR X30, [X31 - 0x10]!
	0x02BB7D18 STR X1, [X0]
	0x02BB7D1C STR W31, [X0 + 0x8]
	0x02BB7D20 CBZ X1, 0x2BB7D34
	0x02BB7D24 LDR W8, [X1 + 0x1C]
	0x02BB7D28 STP W8, W31, [X0 + 0xC]
	0x02BB7D2C LDR X30, [X31], #0x10
	0x02BB7D30 RET
	0x02BB7D34 BL 0x1C16F20
	0x02BB7D38 RET
	0x02BB7D3C STP X30, X19, [X31 - 0x10]!
	0x02BB7D40 LDR X9, [X0]
	0x02BB7D44 CBZ X9, 0x2BB7DC0
	0x02BB7D48 LDR W8, [X0 + 0xC]
	0x02BB7D4C LDR W10, [X9 + 0x1C]
	0x02BB7D50 MOV X19, X0
	0x02BB7D54 CMP W8, W10
	0x02BB7D58 B.NE 0x2BB7D9C
	0x02BB7D5C LDRSW X8, [X19 + 0x8]
	0x02BB7D60 LDR W10, [X9 + 0x18]
	0x02BB7D64 CMP W8, W10
	0x02BB7D68 B.CS 0x2BB7D9C
	0x02BB7D6C LDR X9, [X9 + 0x10]
	0x02BB7D70 CBZ X9, 0x2BB7DC0
	0x02BB7D74 LDR W10, [X9 + 0x18]
	0x02BB7D78 CMP W8, W10
	0x02BB7D7C B.CS 0x2BB7DC4
	0x02BB7D80 ADD X9, X9, X8, 0x2, LSL
	0x02BB7D84 LDR W9, [X9 + 0x20]
	0x02BB7D88 ADD W8, W8, 0x1
	0x02BB7D8C STR W8, [X19 + 0x8]
	0x02BB7D90 MOVZ W0, 0x1
	0x02BB7D94 STR W9, [X19 + 0x10]
	0x02BB7D98 B 0x2BB7DB8
	0x02BB7D9C LDR X0, [X1 + 0x20]
	0x02BB7DA0 LDRB W8, [X0 + 0x135]
	0x02BB7DA4 TBNZ X8, 0x0, 0x2BB7DAC
	0x02BB7DA8 BL 0x1C5C684
	0x02BB7DAC MOV X0, X19
	0x02BB7DB0 BL 0x2BB7DC8
	0x02BB7DB4 MOV W0, W31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X3+32]
	007 Move X21, X3
	008 Move X19, X2
	009 Move X22, X1
	010 Move W9, [X8+309]
	011 Move X20, X0
	012 Move TEMP, X9
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {19}
	016 Move X0, X8
	017 Call 0x1C5D684
	018 Move X8, X0
	019 Move X8, [X8+192]
	020 Move X0, [X8+16]
	021 Move W8, [X0+309]
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {27}
	026 Call 0x1C5D684
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, [X21+32]
	032 Move W8, [X0+309]
	033 Move TEMP, X8
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {39}
	037 Call 0x1C5D684
	038 Move X0, [X21+32]
	039 Move [X20], X22
	040 Move W8, [X0+309]
	041 Move TEMP, X8
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfEqual {47}
	045 Call 0x1C5D684
	046 Move X0, [X21+32]
	047 Move [X20+8], W19
	048 Add X8, X0, 309
	049 NotImplemented "Instruction LDRH not yet implemented."
	050 Move X22, X19
	051 ShiftRight X22, 32
	052 And X22, X22, 0x7FFFFFFF
	053 Move TEMP, X8
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfEqual {61}
	057 Call 0x1C5D684
	058 Move X0, [X21+32]
	059 Add X8, X0, 309
	060 NotImplemented "Instruction LDRH not yet implemented."
	061 Move TEMP, X8
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfEqual {67}
	065 Call 0x1C5D684
	066 Move X0, [X21+32]
	067 Add W8, W22, W19
	068 Move [X20+12], W8
	069 Move W8, [X0+309]
	070 Move TEMP, X8
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfEqual {75}
	074 Call 0x1C5D684
	075 Subtract W8, W19, 1
	076 Move [X20+16], W8
	077 Move X20, [X31+32]
	078 Move X19, [X31+40]
	079 Move X22, [X31+16]
	080 Move X21, [X31+24]
	081 Move X30, [X31+48]
	082 Return 

Method: System.Boolean MoveNext()

Disassembly:
	0x02BB7DB8 LDP X30, X19, [X31], #0x10
	0x02BB7DBC RET
	0x02BB7DC0 BL 0x1C16F20
	0x02BB7DC4 BL 0x1C16F28
	0x02BB7DC8 STP X30, X19, [X31 - 0x10]!
	0x02BB7DCC LDR X8, [X0]
	0x02BB7DD0 CBZ X8, 0x2BB7E14
	0x02BB7DD4 LDR W9, [X0 + 0xC]
	0x02BB7DD8 LDR W10, [X8 + 0x1C]
	0x02BB7DDC MOV X19, X0

ISIL:
	001 Move W8, [X0+12]
	002 Move W9, [X0+16]
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Add W9, W9, 1
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move [X0+16], W9
	007 NotImplemented "Instruction CSET not yet implemented."
	008 Return X0
	009 Move W0, W31
	010 Return X0

Method: T get_Current()

Disassembly:
	0x02BB7DE0 CMP W9, W10
	0x02BB7DE4 B.EQ 0x2BB7DF8
	0x02BB7DE8 MOV X0, X31
	0x02BB7DEC BL 0x339E09C
	0x02BB7DF0 LDR X8, [X19]
	0x02BB7DF4 CBZ X8, 0x2BB7E14
	0x02BB7DF8 LDR W8, [X8 + 0x18]
	0x02BB7DFC STR W31, [X19 + 0x10]
	0x02BB7E00 MOV W0, W31
	0x02BB7E04 ADD W8, W8, 0x1
	0x02BB7E08 STR W8, [X19 + 0x8]
	0x02BB7E0C LDP X30, X19, [X31], #0x10
	0x02BB7E10 RET
	0x02BB7E14 BL 0x1C16F20
	0x02BB7E18 LDR W0, [X0 + 0x10]
	0x02BB7E1C RET
	0x02BB7E20 STR X30, [X31 - 0x20]!
	0x02BB7E24 STP X20, X19, [X31 + 0x10]
	0x02BB7E28 LDR W8, [X0 + 0x8]
	0x02BB7E2C MOV X19, X0
	0x02BB7E30 MOV X20, X1
	0x02BB7E34 CBZ W8, 0x2BB7E50
	0x02BB7E38 LDR X9, [X19]
	0x02BB7E3C CBZ X9, 0x2BB7EA4
	0x02BB7E40 LDR W9, [X9 + 0x18]
	0x02BB7E44 ADD W9, W9, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+16]
	004 Move W9, [X0+8]
	005 Move X19, X0
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X0, X31
	008 Call ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumNotStarted
	009 Move W8, [X19+16]
	010 Move W9, [X19+12]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move X0, X31
	013 Call ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumEnded
	014 Move W8, [X19+16]
	015 Move X9, [X19]
	016 Compare X9, 0
	017 JumpIfEqual {25}
	018 Move W10, [X9+24]
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Add X8, X9, W8
	021 Move W0, [X8+32]
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Return X0
	025 Call 0x1C17F20
	026 Call 0x1C17F28

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x02BB7E48 CMP W8, W9
	0x02BB7E4C B.NE 0x2BB7E58
	0x02BB7E50 MOV X0, X31
	0x02BB7E54 BL 0x339E0E8
	0x02BB7E58 LDR X0, [X20 + 0x20]
	0x02BB7E5C ADD X8, X0, 0x135
	0x02BB7E60 LDRH W8, [X8]
	0x02BB7E64 TBNZ X8, 0x0, 0x2BB7E78
	0x02BB7E68 BL 0x1C5C684
	0x02BB7E6C LDR X0, [X20 + 0x20]
	0x02BB7E70 ADD X8, X0, 0x135
	0x02BB7E74 LDRH W8, [X8]
	0x02BB7E78 LDR W9, [X19 + 0x10]
	0x02BB7E7C STR W9, [X31 + 0x8]
	0x02BB7E80 TBNZ X8, 0x0, 0x2BB7E88
	0x02BB7E84 BL 0x1C5C684
	0x02BB7E88 LDR X8, [X0 + 0xC0]
	0x02BB7E8C ADD X1, X31, 0x8
	0x02BB7E90 LDR X0, [X8 + 0x10]
	0x02BB7E94 BL 0x1C16E04
	0x02BB7E98 LDP X20, X19, [X31 + 0x10]
	0x02BB7E9C LDR X30, [X31], #0x20
	0x02BB7EA0 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+32]
	005 Move X19, X1
	006 Move X20, X0
	007 Move W9, [X8+309]
	008 Move TEMP, X9
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {14}
	012 Move X0, X8
	013 Call 0x1C5D684
	014 Move X0, X20
	015 Call 0x2BB7DE0, X0
	016 Move [X31+12], W0
	017 Move X0, [X19+32]
	018 Move W8, [X0+309]
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {24}
	023 Call 0x1C5D684
	024 Move X8, [X0+192]
	025 Add X1, X31, 12
	026 Move X0, [X8+56]
	027 Call 0x1C17E04
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return X0

Method: System.Void System.Collections.IEnumerator.Reset()

Disassembly:
	0x02BB7EA4 BL 0x1C16F20
	0x02BB7EA8 STP X30, X19, [X31 - 0x10]!
	0x02BB7EAC LDR X8, [X0]
	0x02BB7EB0 CBZ X8, 0x2BB7EE0

ISIL:
	001 Move W8, [X0+8]
	002 Subtract W8, W8, 1
	003 Move [X0+16], W8
	004 Return 

Method: System.Void Dispose()

Disassembly:
	0x02BB7EB4 LDR W9, [X0 + 0xC]

ISIL:
	001 Return 

