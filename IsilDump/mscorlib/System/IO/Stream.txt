Type: System.IO.Stream

Method: System.Threading.SemaphoreSlim EnsureAsyncActiveSemaphoreInitialized()

Disassembly:
	0x032F0B80 MOV X0, X20
	0x032F0B84 BL 0x3EB1AD0
	0x032F0B88 LDR X21, [X0]
	0x032F0B8C BL 0x3EB1AE0
	0x032F0B90 MOV X0, X19
	0x032F0B94 BL 0x32F14BC
	0x032F0B98 CBNZ X21, 0x32F0BAC
	0x032F0B9C MOV W20, W31
	0x032F0BA0 B 0x32F0AAC
	0x032F0BA4 MOV X21, X31
	0x032F0BA8 B 0x32F0BB8
	0x032F0BAC MOV X0, X21
	0x032F0BB0 BL 0x1C16F18
	0x032F0BB4 MOV X20, X0
	0x032F0BB8 MOV X0, X19
	0x032F0BBC BL 0x32F14BC
	0x032F0BC0 CBNZ X21, 0x32F0BCC
	0x032F0BC4 MOV X0, X20
	0x032F0BC8 BL 0x1D2C690
	0x032F0BCC MOV X0, X21
	0x032F0BD0 BL 0x1C16F18
	0x032F0BD4 BL 0x1990590
	0x032F0BD8 STR X30, [X31 - 0x40]!
	0x032F0BDC STP X24, X23, [X31 + 0x10]
	0x032F0BE0 STP X22, X21, [X31 + 0x20]
	0x032F0BE4 STP X20, X19, [X31 + 0x30]
	0x032F0BE8 ADRP X23, 0x10EC000
	0x032F0BEC ADRP X24, 0xE0B000
	0x032F0BF0 LDRB W8, [X23 + 0xA2C]
	0x032F0BF4 LDR X24, [X24 + 0x7D8]
	0x032F0BF8 MOV W19, W3
	0x032F0BFC MOV W20, W2
	0x032F0C00 MOV X21, X1
	0x032F0C04 MOV X22, X0
	0x032F0C08 TBNZ X8, 0x0, 0x32F0C20
	0x032F0C0C ADRP X0, 0xE0B000
	0x032F0C10 LDR X0, [X0 + 0x7D8]
	0x032F0C14 BL 0x1C16CF4
	0x032F0C18 MOVZ W8, 0x1
	0x032F0C1C STRB W8, [X23 + 0xA2C]
	0x032F0C20 LDR X0, [X24]
	0x032F0C24 LDR W8, [X0 + 0xE0]
	0x032F0C28 CBNZ W8, 0x32F0C30
	0x032F0C2C BL 0x1C16DFC
	0x032F0C30 MOV X0, X31
	0x032F0C34 BL 0x33DD2A8
	0x032F0C38 LDR X8, [X22]
	0x032F0C3C MOV X4, X0
	0x032F0C40 MOV X0, X22
	0x032F0C44 MOV X1, X21
	0x032F0C48 LDR X6, [X8 + 0x2D8]
	0x032F0C4C LDR X5, [X8 + 0x2E0]
	0x032F0C50 MOV W2, W20
	0x032F0C54 MOV W3, W19
	0x032F0C58 LDP X20, X19, [X31 + 0x30]
	0x032F0C5C LDP X22, X21, [X31 + 0x20]
	0x032F0C60 LDP X24, X23, [X31 + 0x10]
	0x032F0C64 LDR X30, [X31], #0x40
	0x032F0C68 BR X6
	0x032F0C6C STR X30, [X31 - 0x40]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x10ED000
	008 Move X22, 0xE38000
	009 Move W8, [X20+2595]
	010 Move X22, [X22+216]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0xE33000
	017 Move X0, [X0+3592]
	018 Call 0x1C17CF4
	019 Move X0, 0xE33000
	020 Move X0, [X0+3600]
	021 Call 0x1C17CF4
	022 Move X0, 0xE38000
	023 Move X0, [X0+224]
	024 Call 0x1C17CF4
	025 Move X0, 0xE38000
	026 Move X0, [X0+216]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+2595], W8
	030 Move X0, [X22]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {36}
	034 Call 0x1C17DFC
	035 Move X0, [X22]
	036 Move X8, [X0+184]
	037 Move X23, 0xE33000
	038 Move X20, [X8+8]
	039 Move X23, [X23+3600]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xE33000
	048 Move X8, [X0+184]
	049 Move X9, [X9+3592]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xE38000
	054 Move X8, [X8+224]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Func`1<Object>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+8], X20
	063 Move X2, [X23]
	064 Add X0, X19, 32
	065 Move X1, X20
	066 Move X20, [X31+32]
	067 Move X19, [X31+40]
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Move X30, [X31+48]
	071 Move X23, [X31+56]
	072 Call 0x2213A40, X0, X1
	073 Return X0

Method: System.Boolean get_CanRead()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Boolean get_CanSeek()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Boolean get_CanTimeout()

Disassembly:
	0x032F0C70 STP X24, X23, [X31 + 0x10]
	0x032F0C74 STP X22, X21, [X31 + 0x20]

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Boolean get_CanWrite()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Int64 get_Length()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Int64 get_Position()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void set_Position(System.Int64 value)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Int32 get_ReadTimeout()

Disassembly:
	0x032F0C78 STP X20, X19, [X31 + 0x30]
	0x032F0C7C ADRP X23, 0x10EC000
	0x032F0C80 STR X4, [X31 + 0x8]
	0x032F0C84 ADRP X24, 0xE0B000
	0x032F0C88 LDRB W8, [X23 + 0xA2D]
	0x032F0C8C LDR X24, [X24 + 0x7D8]
	0x032F0C90 MOV W19, W3
	0x032F0C94 MOV W20, W2
	0x032F0C98 MOV X21, X1
	0x032F0C9C MOV X22, X0
	0x032F0CA0 TBNZ X8, 0x0, 0x32F0CD0
	0x032F0CA4 ADRP X0, 0xE0B000
	0x032F0CA8 LDR X0, [X0 + 0x7D8]
	0x032F0CAC BL 0x1C16CF4
	0x032F0CB0 ADRP X0, 0xE36000
	0x032F0CB4 LDR X0, [X0 + 0xCC8]
	0x032F0CB8 BL 0x1C16CF4
	0x032F0CBC ADRP X0, 0xE04000
	0x032F0CC0 LDR X0, [X0 + 0x7B8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xE04000
	004 Move X0, [X0+1456]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xE38000
	009 Move X0, [X0+232]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call InvalidOperationException..ctor, X0, X1
	015 Move X0, 0xE38000
	016 Move X0, [X0+240]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Void set_ReadTimeout(System.Int32 value)

Disassembly:
	0x032F0CC4 BL 0x1C16CF4
	0x032F0CC8 MOVZ W8, 0x1
	0x032F0CCC STRB W8, [X23 + 0xA2D]
	0x032F0CD0 LDR X0, [X24]
	0x032F0CD4 LDR W8, [X0 + 0xE0]
	0x032F0CD8 CBNZ W8, 0x32F0CE0
	0x032F0CDC BL 0x1C16DFC
	0x032F0CE0 ADD X0, X31, 0x8
	0x032F0CE4 MOV X1, X31
	0x032F0CE8 BL 0x33DD2B0
	0x032F0CEC TBZ X0, 0x0, 0x32F0D24
	0x032F0CF0 ADRP X8, 0xE04000
	0x032F0CF4 LDR X8, [X8 + 0x7B8]
	0x032F0CF8 ADRP X20, 0xE36000
	0x032F0CFC LDR X19, [X31 + 0x8]
	0x032F0D00 LDR X0, [X8]
	0x032F0D04 LDR W8, [X0 + 0xE0]
	0x032F0D08 LDR X20, [X20 + 0xCC8]
	0x032F0D0C CBNZ W8, 0x32F0D14

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xE04000
	004 Move X0, [X0+1456]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xE38000
	009 Move X0, [X0+232]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call InvalidOperationException..ctor, X0, X1
	015 Move X0, 0xE38000
	016 Move X0, [X0+248]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Int32 get_WriteTimeout()

Disassembly:
	0x032F0D10 BL 0x1C16DFC
	0x032F0D14 LDR X1, [X20]
	0x032F0D18 MOV X0, X19
	0x032F0D1C BL 0x2299598
	0x032F0D20 B 0x32F0D38
	0x032F0D24 MOV X0, X22
	0x032F0D28 MOV X1, X21
	0x032F0D2C MOV W2, W20
	0x032F0D30 MOV W3, W19
	0x032F0D34 BL 0x32F0D4C
	0x032F0D38 LDP X20, X19, [X31 + 0x30]
	0x032F0D3C LDP X22, X21, [X31 + 0x20]
	0x032F0D40 LDP X24, X23, [X31 + 0x10]
	0x032F0D44 LDR X30, [X31], #0x40
	0x032F0D48 RET
	0x032F0D4C STP X30, X27, [X31 - 0x50]!
	0x032F0D50 STP X26, X25, [X31 + 0x10]
	0x032F0D54 STP X24, X23, [X31 + 0x20]
	0x032F0D58 STP X22, X21, [X31 + 0x30]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xE04000
	004 Move X0, [X0+1456]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xE38000
	009 Move X0, [X0+232]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call InvalidOperationException..ctor, X0, X1
	015 Move X0, 0xE38000
	016 Move X0, [X0+256]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Void set_WriteTimeout(System.Int32 value)

Disassembly:
	0x032F0D5C STP X20, X19, [X31 + 0x40]
	0x032F0D60 ADRP X23, 0x10EC000
	0x032F0D64 ADRP X26, 0xE37000
	0x032F0D68 LDRB W8, [X23 + 0xA2F]
	0x032F0D6C LDR X26, [X26 + 0xD8]
	0x032F0D70 MOV W19, W3
	0x032F0D74 MOV W21, W2
	0x032F0D78 MOV X20, X1
	0x032F0D7C MOV X22, X0
	0x032F0D80 TBNZ X8, 0x0, 0x32F0DE0
	0x032F0D84 ADRP X0, 0xE37000
	0x032F0D88 LDR X0, [X0 + 0x168]
	0x032F0D8C BL 0x1C16CF4
	0x032F0D90 ADRP X0, 0xE37000
	0x032F0D94 LDR X0, [X0 + 0x170]
	0x032F0D98 BL 0x1C16CF4
	0x032F0D9C ADRP X0, 0xE37000
	0x032F0DA0 LDR X0, [X0 + 0x178]
	0x032F0DA4 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xE04000
	004 Move X0, [X0+1456]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xE38000
	009 Move X0, [X0+232]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call InvalidOperationException..ctor, X0, X1
	015 Move X0, 0xE38000
	016 Move X0, [X0+264]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Threading.Tasks.Task CopyToAsync(System.IO.Stream destination)

Disassembly:
	0x032F0DA8 ADRP X0, 0xE37000
	0x032F0DAC LDR X0, [X0 + 0x180]
	0x032F0DB0 BL 0x1C16CF4
	0x032F0DB4 ADRP X0, 0xE37000
	0x032F0DB8 LDR X0, [X0 + 0x188]
	0x032F0DBC BL 0x1C16CF4
	0x032F0DC0 ADRP X0, 0xE37000
	0x032F0DC4 LDR X0, [X0 + 0x190]
	0x032F0DC8 BL 0x1C16CF4
	0x032F0DCC ADRP X0, 0xE37000
	0x032F0DD0 LDR X0, [X0 + 0xD8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call Stream.GetCopyBufferSize, X0
	007 Move W2, W0
	008 Move X0, X20
	009 Move X1, X19
	010 Move X20, [X31+16]
	011 Move X19, [X31+24]
	012 Move X30, [X31+32]
	013 Call Stream.CopyToAsync, X0, X1, X2
	014 Return X0

Method: System.Threading.Tasks.Task CopyToAsync(System.IO.Stream destination, System.Int32 bufferSize)

Disassembly:
	0x032F0E98 BL 0x1C16F10
	0x032F0E9C ADRP X8, 0xE37000
	0x032F0EA0 LDR X8, [X8 + 0x190]
	0x032F0EA4 MOV X1, X25
	0x032F0EA8 MOV X3, X31
	0x032F0EAC MOV X24, X0
	0x032F0EB0 LDR X2, [X8]
	0x032F0EB4 BL 0x2D3AE60
	0x032F0EB8 LDR X8, [X26]
	0x032F0EBC LDR X8, [X8 + 0xB8]
	0x032F0EC0 STR X24, [X8 + 0x28]
	0x032F0EC4 MOV W2, W21
	0x032F0EC8 LDR X5, [X27]
	0x032F0ECC BFM X2, X19, 0x20, 0x1F
	0x032F0ED0 MOV X0, X22
	0x032F0ED4 MOV X1, X20
	0x032F0ED8 MOV X3, X23
	0x032F0EDC MOV X4, X24
	0x032F0EE0 LDP X20, X19, [X31 + 0x40]
	0x032F0EE4 LDP X22, X21, [X31 + 0x30]
	0x032F0EE8 LDP X24, X23, [X31 + 0x20]
	0x032F0EEC LDP X26, X25, [X31 + 0x10]
	0x032F0EF0 LDP X30, X27, [X31], #0x50
	0x032F0EF4 B 0x21362FC
	0x032F0EF8 SUB X31, X31, 0x60
	0x032F0EFC STP X30, X25, [X31 + 0x20]
	0x032F0F00 STP X24, X23, [X31 + 0x30]
	0x032F0F04 STP X22, X21, [X31 + 0x40]
	0x032F0F08 STP X20, X19, [X31 + 0x50]
	0x032F0F0C ADRP X25, 0x10EC000
	0x032F0F10 STP X1, X2, [X31 + 0x10]
	0x032F0F14 ADRP X24, 0xE36000
	0x032F0F18 ADRP X23, 0xE36000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x10ED000
	008 Move X23, 0xE0C000
	009 Move W8, [X22+2596]
	010 Move X23, [X23+2008]
	011 Move W19, W2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xE0C000
	019 Move X0, [X0+2008]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2596], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X31
	029 Call CancellationToken.get_None
	030 Move X8, [X21]
	031 Move X3, X0
	032 Move X0, X21
	033 Move X1, X20
	034 Move X5, [X8+600]
	035 Move X4, [X8+608]
	036 Move W2, W19
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X30, [X31+48]
	042 Move X23, [X31+56]
	043 CallNoReturn X5

Method: System.Threading.Tasks.Task CopyToAsync(System.IO.Stream destination, System.Int32 bufferSize, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x032F0F1C LDRB W8, [X25 + 0xA2E]
	0x032F0F20 LDR X24, [X24 + 0xD10]
	0x032F0F24 LDR X23, [X23 + 0xD08]
	0x032F0F28 MOV X19, X3
	0x032F0F2C MOV X21, X2
	0x032F0F30 MOV X22, X1
	0x032F0F34 MOV X20, X0
	0x032F0F38 TBNZ X8, 0x0, 0x32F0FC8
	0x032F0F3C ADRP X0, 0xE2E000
	0x032F0F40 LDR X0, [X0 + 0xD50]
	0x032F0F44 BL 0x1C16CF4
	0x032F0F48 ADRP X0, 0xE2E000
	0x032F0F4C LDR X0, [X0 + 0xD68]
	0x032F0F50 BL 0x1C16CF4
	0x032F0F54 ADRP X0, 0xE36000
	0x032F0F58 LDR X0, [X0 + 0xCF0]
	0x032F0F5C BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, X3
	007 Move X3, X31
	008 Move W20, W2
	009 Move X21, X1
	010 Move X22, X0
	011 Call StreamHelpers.ValidateCopyToArgs, X0, X1, X2
	012 Move X0, X22
	013 Move X1, X21
	014 Move W2, W20
	015 Move X3, X19
	016 Move X20, [X31+32]
	017 Move X19, [X31+40]
	018 Move X22, [X31+16]
	019 Move X21, [X31+24]
	020 Move X30, [X31+48]

Method: System.Threading.Tasks.Task CopyToAsyncInternal(System.IO.Stream destination, System.Int32 bufferSize, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x032F0F60 ADRP X0, 0xE36000
	0x032F0F64 LDR X0, [X0 + 0xCF8]
	0x032F0F68 BL 0x1C16CF4
	0x032F0F6C ADRP X0, 0xE36000
	0x032F0F70 LDR X0, [X0 + 0xD00]
	0x032F0F74 BL 0x1C16CF4
	0x032F0F78 ADRP X0, 0xE2B000
	0x032F0F7C LDR X0, [X0 + 0x5B0]
	0x032F0F80 BL 0x1C16CF4
	0x032F0F84 ADRP X0, 0xE36000
	0x032F0F88 LDR X0, [X0 + 0xD08]
	0x032F0F8C BL 0x1C16CF4
	0x032F0F90 ADRP X0, 0xE2E000
	0x032F0F94 LDR X0, [X0 + 0x2D8]
	0x032F0F98 BL 0x1C16CF4
	0x032F0F9C ADRP X0, 0xE36000
	0x032F0FA0 LDR X0, [X0 + 0xD10]
	0x032F0FA4 BL 0x1C16CF4
	0x032F0FA8 ADRP X0, 0xE32000
	0x032F0FAC LDR X0, [X0 + 0xD10]
	0x032F0FB0 BL 0x1C16CF4
	0x032F0FB4 ADRP X0, 0xE36000
	0x032F0FB8 LDR X0, [X0 + 0xD20]
	0x032F0FBC BL 0x1C16CF4
	0x032F0FC0 MOVZ W8, 0x1
	0x032F0FC4 STRB W8, [X25 + 0xA2E]
	0x032F0FC8 LDR X2, [X24]
	0x032F0FCC MOV X0, X22
	0x032F0FD0 MOV X1, X21
	0x032F0FD4 STP X31, X31, [X31]
	0x032F0FD8 BL 0x319DCE0
	0x032F0FDC LDR X3, [X23]
	0x032F0FE0 ADD X2, X31, 0x0
	0x032F0FE4 BL 0x2218D10
	0x032F0FE8 TBZ X0, 0x0, 0x32F1040
	0x032F0FEC ADRP X8, 0xE2B000
	0x032F0FF0 LDR X8, [X8 + 0x5B0]
	0x032F0FF4 LDR X0, [X8]
	0x032F0FF8 LDR W8, [X0 + 0xE0]
	0x032F0FFC CBNZ W8, 0x32F1004
	0x032F1000 BL 0x1C16DFC
	0x032F1004 LDR X8, [X20]
	0x032F1008 LDR X1, [X31]
	0x032F100C LDP W2, W3, [X31 + 0x8]
	0x032F1010 MOV X0, X20
	0x032F1014 LDR X9, [X8 + 0x2D8]
	0x032F1018 LDR X5, [X8 + 0x2E0]
	0x032F101C MOV X4, X19
	0x032F1020 BLR X9
	0x032F1024 MOV X19, X0
	0x032F1028 CBNZ X0, 0x32F1038
	0x032F102C MOVZ W0, 0x26
	0x032F1030 MOV X1, X31
	0x032F1034 BL 0x338F3E0
	0x032F1038 MOVZ X1, 0x10000
	0x032F103C B 0x32F115C
	0x032F1040 ADRP X8, 0xE2D000
	0x032F1044 LDR X8, [X8 + 0xD68]
	0x032F1048 LDR X0, [X8]
	0x032F104C LDR W8, [X0 + 0xE0]

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+144], X30
	003 Move [X31+160], X24
	004 Move [X31+168], X23
	005 Move [X31+176], X22
	006 Move [X31+184], X21
	007 Move [X31+192], X20
	008 Move [X31+200], X19
	009 Move X24, 0x10ED000
	010 Move X23, 0xE07000
	011 Move W8, [X24+2597]
	012 Move X23, [X23+640]
	013 Move X19, X3
	014 Move W20, W2
	015 Move X22, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0xE38000
	022 Move X0, [X0+272]
	023 Call 0x1C17CF4
	024 Move X0, 0xE07000
	025 Move X0, [X0+640]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X24+2597], W8
	029 Move X0, [X23]
	030 NotImplemented "Instruction MOVI not yet implemented."
	031 Move [X31+128], X31
	032 Move [X31+64], V0
	033 Move [X31+72], V0
	034 Move [X31+96], V0
	035 Move [X31+104], V0
	036 Move [X31+32], V0
	037 Move [X31+40], V0
	038 Move [X31+80], X19
	039 Move [X31+88], X22
	040 Move [X31+64], W20
	041 Move [X31+72], X21
	042 Move X19, 0xE38000
	043 Move W8, [X0+224]
	044 Move X19, [X19+272]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Add X8, X31, 8
	049 Move X0, X31
	050 Call AsyncTaskMethodBuilder.Create
	051 NotImplemented "Instruction LDUR not yet implemented."
	052 Move X9, [X31+24]
	053 Move X2, [X19]
	054 Add X8, X31, 32
	055 Or X19, X8, 15
	056 Move TEMP, 0
	057 Not TEMP
	058 Move W10, TEMP
	059 Add X1, X31, 32
	060 Move X0, X19
	061 Move [X31+40], V0
	062 Move [X31+56], X9
	063 Move [X31+32], W10
	064 Call AsyncTaskMethodBuilder.Start, X0, X1
	065 Move X0, X19
	066 Move X1, X31
	067 Call AsyncTaskMethodBuilder.get_Task, X0
	068 Move X20, [X31+192]
	069 Move X19, [X31+200]
	070 Move X22, [X31+176]
	071 Move X21, [X31+184]
	072 Move X24, [X31+160]
	073 Move X23, [X31+168]
	074 Move X30, [X31+144]
	075 Add X31, X31, 208
	076 Return X0

Method: System.Void CopyTo(System.IO.Stream destination)

Disassembly:
	0x032F1050 CBNZ W8, 0x32F1058
	0x032F1054 BL 0x1C16DFC
	0x032F1058 ADRP X8, 0xE2D000
	0x032F105C LDR X8, [X8 + 0xD50]
	0x032F1060 LDR X21, [X8]
	0x032F1064 LDR X0, [X21 + 0x20]
	0x032F1068 LDRB W8, [X0 + 0x135]
	0x032F106C TBNZ X8, 0x0, 0x32F1074
	0x032F1070 BL 0x1C5C684
	0x032F1074 LDR X8, [X0 + 0xC0]
	0x032F1078 LDR X0, [X8 + 0x8]
	0x032F107C LDRB W8, [X0 + 0x135]
	0x032F1080 TBNZ X8, 0x0, 0x32F1088
	0x032F1084 BL 0x1C5C684

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call Stream.GetCopyBufferSize, X0
	007 Move X8, [X20]
	008 Move W2, W0
	009 Move X0, X20
	010 Move X1, X19
	011 Move X4, [X8+616]
	012 Move X3, [X8+624]
	013 Move X20, [X31+16]
	014 Move X19, [X31+24]
	015 Move X30, [X31+32]
	016 CallNoReturn X4

Method: System.Void CopyTo(System.IO.Stream destination, System.Int32 bufferSize)

Disassembly:
	0x032F1088 LDR W8, [X0 + 0xE0]
	0x032F108C CBNZ W8, 0x32F1094
	0x032F1090 BL 0x1C16DFC
	0x032F1094 LDR X0, [X21 + 0x20]
	0x032F1098 LDRB W8, [X0 + 0x135]
	0x032F109C TBNZ X8, 0x0, 0x32F10A4
	0x032F10A0 BL 0x1C5C684
	0x032F10A4 LDR X8, [X0 + 0xC0]
	0x032F10A8 LDR X0, [X8 + 0x8]
	0x032F10AC LDRB W8, [X0 + 0x135]
	0x032F10B0 TBNZ X8, 0x0, 0x32F10B8
	0x032F10B4 BL 0x1C5C684
	0x032F10B8 ADRP X22, 0xE2D000
	0x032F10BC LDR X8, [X0 + 0xB8]
	0x032F10C0 LDR X22, [X22 + 0x2D8]
	0x032F10C4 ADD X0, X31, 0x10
	0x032F10C8 LDR X21, [X8]
	0x032F10CC LDR X1, [X22]
	0x032F10D0 BL 0x319DCF0
	0x032F10D4 CBZ X21, 0x32F1178
	0x032F10D8 LDR X8, [X21]
	0x032F10DC MOV W1, W0
	0x032F10E0 MOV X0, X21
	0x032F10E4 LDP X9, X2, [X8 + 0x178]
	0x032F10E8 BLR X9
	0x032F10EC LDR X1, [X22]
	0x032F10F0 MOV X21, X0
	0x032F10F4 ADD X0, X31, 0x10
	0x032F10F8 BL 0x319DCF0
	0x032F10FC LDR X8, [X20]
	0x032F1100 MOV W3, W0
	0x032F1104 MOV X0, X20
	0x032F1108 MOV X1, X21
	0x032F110C LDR X9, [X8 + 0x2D8]
	0x032F1110 LDR X5, [X8 + 0x2E0]
	0x032F1114 MOV W2, W31
	0x032F1118 MOV X4, X19
	0x032F111C BLR X9
	0x032F1120 ADRP X8, 0xE31000
	0x032F1124 LDR X8, [X8 + 0xD10]
	0x032F1128 LDP X20, X19, [X31 + 0x10]
	0x032F112C MOV X22, X0
	0x032F1130 LDR X8, [X8]
	0x032F1134 LDR W9, [X8 + 0xE0]
	0x032F1138 CBNZ W9, 0x32F1144
	0x032F113C MOV X0, X8
	0x032F1140 BL 0x1C16DFC
	0x032F1144 MOV X0, X22
	0x032F1148 MOV X1, X21
	0x032F114C MOV X2, X20
	0x032F1150 MOV X3, X19
	0x032F1154 BL 0x32F117C
	0x032F1158 MOV X19, X0
	0x032F115C MOV X0, X19
	0x032F1160 LDP X20, X19, [X31 + 0x50]
	0x032F1164 LDP X22, X21, [X31 + 0x40]
	0x032F1168 LDP X24, X23, [X31 + 0x30]
	0x032F116C LDP X30, X25, [X31 + 0x20]
	0x032F1170 ADD X31, X31, 0x60
	0x032F1174 RET
	0x032F1178 BL 0x1C16F20
	0x032F117C SUB X31, X31, 0xC0
	0x032F1180 STP X30, X25, [X31 + 0x80]
	0x032F1184 STP X24, X23, [X31 + 0x90]
	0x032F1188 STP X22, X21, [X31 + 0xA0]
	0x032F118C STP X20, X19, [X31 + 0xB0]
	0x032F1190 ADRP X25, 0x10EB000
	0x032F1194 ADRP X24, 0xE36000
	0x032F1198 ADRP X23, 0xE36000
	0x032F119C LDRB W8, [X25 + 0xA40]
	0x032F11A0 LDR X24, [X24 + 0x198]
	0x032F11A4 LDR X23, [X23 + 0x1A0]
	0x032F11A8 MOV X19, X3
	0x032F11AC MOV X20, X2
	0x032F11B0 MOV X21, X1
	0x032F11B4 MOV X22, X0
	0x032F11B8 TBNZ X8, 0x0, 0x32F11E8
	0x032F11BC ADRP X0, 0xE36000
	0x032F11C0 LDR X0, [X0 + 0x198]
	0x032F11C4 BL 0x1C16CF4
	0x032F11C8 ADRP X0, 0xE36000
	0x032F11CC LDR X0, [X0 + 0x1A0]
	0x032F11D0 BL 0x1C16CF4
	0x032F11D4 ADRP X0, 0xE36000
	0x032F11D8 LDR X0, [X0 + 0x1A8]
	0x032F11DC BL 0x1C16CF4
	0x032F11E0 MOVZ W8, 0x1
	0x032F11E4 STRB W8, [X25 + 0xA40]
	0x032F11E8 LDR X0, [X24]
	0x032F11EC MOVI V0.2D, 0x0
	0x032F11F0 ADD X8, X31, 0x0
	0x032F11F4 STP V0, V0, [X31 + 0x40]
	0x032F11F8 STR V0, [X31 + 0x6]
	0x032F11FC STP V0, V0, [X31 + 0x20]
	0x032F1200 STP X22, X21, [X31 + 0x48]
	0x032F1204 STP X20, X19, [X31 + 0x58]
	0x032F1208 STR X31, [X31 + 0x70]
	0x032F120C BL 0x263CFC4
	0x032F1210 LDP V0, V1, [X31]
	0x032F1214 LDR X19, [X23]
	0x032F1218 MOVN W8, 0x0
	0x032F121C STR W8, [X31 + 0x20]
	0x032F1220 STUR V0, [X31 + 0x28]
	0x032F1224 STUR V1, [X31 + 0x38]
	0x032F1228 LDR X8, [X19 + 0x38]
	0x032F122C CBNZ X8, 0x32F1238
	0x032F1230 MOV X0, X19
	0x032F1234 BL 0x1C5C6E0
	0x032F1238 LDR X0, [X19 + 0x20]
	0x032F123C ADD X20, X31, 0x20
	0x032F1240 LDRB W8, [X0 + 0x135]
	0x032F1244 TBNZ X8, 0x0, 0x32F124C

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X23, 0x10EC000
	009 Move X22, 0xE2E000
	010 Move W8, [X23+2598]
	011 Move X22, [X22+3432]
	012 Move W21, W2
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xE2E000
	020 Move X0, [X0+3408]
	021 Call 0x1C17CF4
	022 Move X0, 0xE2E000
	023 Move X0, [X0+3432]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+2598], W8
	027 Move X23, 0xE2E000
	028 Move X23, [X23+3408]
	029 Move X0, X20
	030 Move X1, X19
	031 Move W2, W21
	032 Move X3, X31
	033 Move [X31+24], X31
	034 Call StreamHelpers.ValidateCopyToArgs, X0, X1, X2
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X22, [X23]
	041 Move X0, [X22+32]
	042 Move W8, [X0+309]
	043 Move TEMP, X8
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfEqual {48}
	047 Call 0x1C5D684
	048 Move X8, [X0+192]
	049 Move X0, [X8+8]
	050 Move W8, [X0+309]
	051 Move TEMP, X8
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfEqual {56}
	055 Call 0x1C5D684
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move X0, [X22+32]
	061 Move W8, [X0+309]
	062 Move TEMP, X8
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfEqual {67}
	066 Call 0x1C5D684
	067 Move X8, [X0+192]
	068 Move X0, [X8+8]
	069 Move W8, [X0+309]
	070 Move TEMP, X8
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfEqual {75}
	074 Call 0x1C5D684
	075 Move X8, [X0+184]
	076 Move X0, [X8]
	077 Compare X0, 0
	078 JumpIfEqual {115}
	079 Move X8, [X0]
	080 Move W1, W21
	081 Move X9, [X8+376]
	082 Move X2, [X8+384]
	083 NotImplemented "Instruction BLR not yet implemented."
	084 Add X8, X31, 24
	085 Move [X31+8], X31
	086 Move [X31+16], X8
	087 Move [X31+24], X0
	088 Compare X0, 0
	089 JumpIfEqual {113}
	090 Move X1, X0
	091 Move X8, [X20]
	092 Move W3, [X1+24]
	093 Move X9, [X8+856]
	094 Move X4, [X8+864]
	095 Move X0, X20
	096 Move W2, W31
	097 NotImplemented "Instruction BLR not yet implemented."
	098 Move W3, W0
	099 Compare W0, 0
	100 JumpIfEqual {123}
	101 Compare X19, 0
	102 JumpIfEqual {114}
	103 Move X8, [X19]
	104 Move X1, [X31+24]
	105 Move X9, [X8+904]
	106 Move X4, [X8+912]
	107 Move X0, X19
	108 Move W2, W31
	109 NotImplemented "Instruction BLR not yet implemented."
	110 Move X1, [X31+24]
	111 Compare X1, 0
	112 JumpIfNotEqual {91}
	113 Call 0x1C17F20
	114 Call 0x1C17F20
	115 Call 0x1C17F20
	116 Move X19, X0
	117 NotImplemented "Instruction CMP not yet implemented."
	118 Move X0, X19
	119 Call 0x3EB2AD0
	120 Move X8, [X0]
	121 Move [X31+8], X8
	122 Call 0x3EB2AE0
	123 Add X0, X31, 8
	124 Call 0x1BB4A54
	125 Move X20, [X31+64]
	126 Move X19, [X31+72]
	127 Move X22, [X31+48]
	128 Move X21, [X31+56]
	129 Move X30, [X31+32]
	130 Move X23, [X31+40]
	131 Add X31, X31, 80
	132 Return 
	133 Move X19, X0
	134 Add X0, X31, 8
	135 Call 0x1BB4A54
	136 Move X0, X19
	137 Call 0x1D2D690
	138 Call 0x1991590

Method: System.Int32 GetCopyBufferSize()

Disassembly:
	0x032F0DD4 BL 0x1C16CF4
	0x032F0DD8 MOVZ W8, 0x1
	0x032F0DDC STRB W8, [X23 + 0xA2F]
	0x032F0DE0 LDR X0, [X26]
	0x032F0DE4 LDR W8, [X0 + 0xE0]
	0x032F0DE8 CBNZ W8, 0x32F0DF4
	0x032F0DEC BL 0x1C16DFC
	0x032F0DF0 LDR X0, [X26]
	0x032F0DF4 LDR X8, [X0 + 0xB8]
	0x032F0DF8 LDR X23, [X8 + 0x20]
	0x032F0DFC CBNZ X23, 0x32F0E50
	0x032F0E00 LDR W8, [X0 + 0xE0]
	0x032F0E04 CBNZ W8, 0x32F0E10
	0x032F0E08 BL 0x1C16DFC
	0x032F0E0C LDR X0, [X26]
	0x032F0E10 ADRP X9, 0xE37000
	0x032F0E14 LDR X8, [X0 + 0xB8]
	0x032F0E18 LDR X9, [X9 + 0x170]
	0x032F0E1C LDR X24, [X8]
	0x032F0E20 LDR X0, [X9]
	0x032F0E24 BL 0x1C16F10
	0x032F0E28 ADRP X8, 0xE37000
	0x032F0E2C LDR X8, [X8 + 0x188]
	0x032F0E30 MOV X1, X24
	0x032F0E34 MOV X3, X31
	0x032F0E38 MOV X23, X0
	0x032F0E3C LDR X2, [X8]
	0x032F0E40 BL 0x2D41260
	0x032F0E44 LDR X0, [X26]
	0x032F0E48 LDR X8, [X0 + 0xB8]
	0x032F0E4C STR X23, [X8 + 0x20]
	0x032F0E50 LDR W8, [X0 + 0xE0]
	0x032F0E54 CBNZ W8, 0x32F0E60
	0x032F0E58 BL 0x1C16DFC
	0x032F0E5C LDR X0, [X26]
	0x032F0E60 LDR X8, [X0 + 0xB8]
	0x032F0E64 ADRP X27, 0xE37000
	0x032F0E68 LDR X24, [X8 + 0x28]
	0x032F0E6C LDR X27, [X27 + 0x178]
	0x032F0E70 CBNZ X24, 0x32F0EC4
	0x032F0E74 LDR W8, [X0 + 0xE0]
	0x032F0E78 CBNZ W8, 0x32F0E84
	0x032F0E7C BL 0x1C16DFC
	0x032F0E80 LDR X0, [X26]
	0x032F0E84 ADRP X9, 0xE37000
	0x032F0E88 LDR X8, [X0 + 0xB8]
	0x032F0E8C LDR X9, [X9 + 0x168]
	0x032F0E90 LDR X25, [X8]
	0x032F0E94 LDR X0, [X9]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10ED000
	006 Move W8, [X19+2599]
	007 Move X20, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE04000
	013 Move X0, [X0+1448]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+2599], W8
	017 Move X8, [X20]
	018 Move W19, 0x4000
	019 Move X0, X20
	020 NotImplemented "Instruction MOVK not yet implemented."
	021 Move X9, [X8+440]
	022 Move X1, [X8+448]
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {55}
	028 Move X8, [X20]
	029 Move X0, X20
	030 Move X9, [X8+488]
	031 Move X1, [X8+496]
	032 NotImplemented "Instruction BLR not yet implemented."
	033 Move X8, [X20]
	034 Move X21, X0
	035 Move X0, X20
	036 Move X9, [X8+504]
	037 Move X1, [X8+512]
	038 NotImplemented "Instruction BLR not yet implemented."
	039 Subtract X20, X21, X0
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X8, 0xE04000
	042 Move X8, [X8+1448]
	043 Move X0, [X8]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move W0, 0x4000
	049 NotImplemented "Instruction MOVK not yet implemented."
	050 Move X1, X20
	051 Move X2, X31
	052 Call Math.Min, X0, X1
	053 Move X19, X0
	054 Move W19, 1
	055 Move W0, W19
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X30, [X31+32]
	059 Move X21, [X31+40]
	060 Return X0

Method: System.Void Close()

Disassembly:
	0x032F1248 BL 0x1C5C684
	0x032F124C LDR X8, [X0 + 0xC0]
	0x032F1250 ORR X20, X20, 0xF
	0x032F1254 LDR X0, [X8 + 0x10]
	0x032F1258 LDRB W8, [X0 + 0x135]
	0x032F125C TBNZ X8, 0x0, 0x32F1264
	0x032F1260 BL 0x1C5C684
	0x032F1264 ADRP X21, 0xE36000
	0x032F1268 LDR W8, [X0 + 0xE0]
	0x032F126C LDR X21, [X21 + 0x1A8]
	0x032F1270 CBNZ W8, 0x32F1278
	0x032F1274 BL 0x1C16DFC
	0x032F1278 LDR X8, [X19 + 0x38]
	0x032F127C ADD X1, X31, 0x20
	0x032F1280 MOV X0, X20
	0x032F1284 LDR X2, [X8 + 0x8]
	0x032F1288 BL 0x1FADFD4
	0x032F128C LDR X1, [X21]
	0x032F1290 MOV X0, X20
	0x032F1294 BL 0x263D14C
	0x032F1298 LDP X20, X19, [X31 + 0xB0]
	0x032F129C LDP X22, X21, [X31 + 0xA0]
	0x032F12A0 LDP X24, X23, [X31 + 0x90]
	0x032F12A4 LDP X30, X25, [X31 + 0x80]
	0x032F12A8 ADD X31, X31, 0xC0
	0x032F12AC RET
	0x032F12B0 MOVZ W0, 0x1
	0x032F12B4 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10EC000
	006 Move X20, 0xE0A000
	007 Move W8, [X21+2600]
	008 Move X20, [X20+3088]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE0A000
	015 Move X0, [X0+3088]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2600], W8
	019 Move X8, [X19]
	020 Move W1, 1
	021 Move X0, X19
	022 Move X9, [X8+648]
	023 Move X2, [X8+656]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X1, X31
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call GC.SuppressFinalize, X0
	037 Return 

Method: System.Void Dispose()

Disassembly:
	0x032F12B8 SUB X31, X31, 0x20
	0x032F12BC STR X30, [X31 + 0x10]
	0x032F12C0 MOVZ W7, 0x1
	0x032F12C4 MOV W6, W31

ISIL:
	001 Move X8, [X0]
	002 Move X2, [X8+632]
	003 Move X1, [X8+640]
	004 CallNoReturn X2

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x032F12C8 BL 0x32F12D8

ISIL:
	001 Return 

Method: System.Void Flush()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x032F12CC LDR X30, [X31 + 0x10]
	0x032F12D0 ADD X31, X31, 0x20
	0x032F12D4 RET
	0x032F12D8 SUB X31, X31, 0x80
	0x032F12DC STP X29, X30, [X31 + 0x20]
	0x032F12E0 STP X28, X27, [X31 + 0x30]
	0x032F12E4 STP X26, X25, [X31 + 0x40]
	0x032F12E8 STP X24, X23, [X31 + 0x50]
	0x032F12EC STP X22, X21, [X31 + 0x60]
	0x032F12F0 STP X20, X19, [X31 + 0x70]
	0x032F12F4 ADRP X20, 0x10EB000
	0x032F12F8 LDRB W8, [X20 + 0xA30]
	0x032F12FC MOV W21, W7
	0x032F1300 MOV W26, W6
	0x032F1304 MOV X22, X5
	0x032F1308 MOV X25, X4
	0x032F130C MOV W24, W3
	0x032F1310 MOV W29, W2
	0x032F1314 MOV X23, X1
	0x032F1318 MOV X19, X0
	0x032F131C TBNZ X8, 0x0, 0x32F1358
	0x032F1320 ADRP X0, 0xE36000
	0x032F1324 LDR X0, [X0 + 0x120]
	0x032F1328 BL 0x1C16CF4
	0x032F132C ADRP X0, 0xE36000
	0x032F1330 LDR X0, [X0 + 0x128]
	0x032F1334 BL 0x1C16CF4
	0x032F1338 ADRP X0, 0xE36000
	0x032F133C LDR X0, [X0 + 0x1B0]
	0x032F1340 BL 0x1C16CF4
	0x032F1344 ADRP X0, 0xE36000
	0x032F1348 LDR X0, [X0 + 0xD8]
	0x032F134C BL 0x1C16CF4
	0x032F1350 MOVZ W8, 0x1
	0x032F1354 STRB W8, [X20 + 0xA30]
	0x032F1358 LDR X8, [X19]
	0x032F135C MOV X0, X19
	0x032F1360 LDP X9, X1, [X8 + 0x1D8]
	0x032F1364 BLR X9
	0x032F1368 TBZ X0, 0x0, 0x32F1494
	0x032F136C MOV X0, X19
	0x032F1370 BL 0x32EFB80
	0x032F1374 CBZ X0, 0x32F14B8
	0x032F1378 ADRP X20, 0xE36000
	0x032F137C LDR X20, [X20 + 0xD8]
	0x032F1380 MOV X1, X31
	0x032F1384 TBZ X26, 0x0, 0x32F1394
	0x032F1388 BL 0x33E20D8
	0x032F138C MOV X26, X0
	0x032F1390 B 0x32F139C
	0x032F1394 BL 0x33E16DC
	0x032F1398 MOV X26, X31
	0x032F139C LDR X0, [X20]
	0x032F13A0 LDR W8, [X0 + 0xE0]
	0x032F13A4 CBNZ W8, 0x32F13B0
	0x032F13A8 BL 0x1C16DFC
	0x032F13AC LDR X0, [X20]
	0x032F13B0 LDR X8, [X0 + 0xB8]
	0x032F13B4 LDR X27, [X8 + 0x30]
	0x032F13B8 ADRP X8, 0xE36000
	0x032F13BC LDR X8, [X8 + 0x128]
	0x032F13C0 CBNZ X27, 0x32F141C
	0x032F13C4 LDR W8, [X0 + 0xE0]
	0x032F13C8 CBNZ W8, 0x32F13D4
	0x032F13CC BL 0x1C16DFC
	0x032F13D0 LDR X0, [X20]
	0x032F13D4 ADRP X9, 0xE36000
	0x032F13D8 LDR X8, [X0 + 0xB8]
	0x032F13DC LDR X9, [X9 + 0x120]
	0x032F13E0 LDR X28, [X8]
	0x032F13E4 LDR X0, [X9]
	0x032F13E8 BL 0x1C16F10
	0x032F13EC ADRP X8, 0xE36000
	0x032F13F0 LDR X8, [X8 + 0x1B0]
	0x032F13F4 MOV X1, X28
	0x032F13F8 MOV X3, X31
	0x032F13FC MOV X27, X0
	0x032F1400 LDR X2, [X8]
	0x032F1404 BL 0x2D30128
	0x032F1408 LDR X8, [X20]
	0x032F140C LDR X8, [X8 + 0xB8]
	0x032F1410 STR X27, [X8 + 0x30]
	0x032F1414 ADRP X8, 0xE36000
	0x032F1418 LDR X8, [X8 + 0x128]
	0x032F141C LDR X0, [X8]
	0x032F1420 BL 0x1C16F10
	0x032F1424 AND W2, W21, 0x1
	0x032F1428 MOV W1, W31
	0x032F142C MOV X3, X27
	0x032F1430 MOV X4, X22
	0x032F1434 MOV X5, X19
	0x032F1438 MOV X6, X23
	0x032F143C MOV W7, W29
	0x032F1440 MOV X28, X0
	0x032F1444 STR X25, [X31 + 0x8]
	0x032F1448 STR W24, [X31]
	0x032F144C BL 0x32F06A0
	0x032F1450 MOV X0, X19
	0x032F1454 CBZ X26, 0x32F1468
	0x032F1458 MOV X1, X26
	0x032F145C MOV X2, X28
	0x032F1460 BL 0x32F07E4
	0x032F1464 B 0x32F1470
	0x032F1468 MOV X1, X28
	0x032F146C BL 0x32F0964
	0x032F1470 MOV X0, X28
	0x032F1474 LDP X20, X19, [X31 + 0x70]
	0x032F1478 LDP X22, X21, [X31 + 0x60]
	0x032F147C LDP X24, X23, [X31 + 0x50]
	0x032F1480 LDP X26, X25, [X31 + 0x40]
	0x032F1484 LDP X28, X27, [X31 + 0x30]
	0x032F1488 LDP X29, X30, [X31 + 0x20]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0x10EC000
	010 Move X21, 0xE04000
	011 Move W8, [X22+2601]
	012 Move X21, [X21+1976]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {36}
	019 Move X0, 0xE2D000
	020 Move X0, [X0+3656]
	021 Call 0x1C17CF4
	022 Move X0, 0xE0B000
	023 Move X0, [X0+2024]
	024 Call 0x1C17CF4
	025 Move X0, 0xE04000
	026 Move X0, [X0+1976]
	027 Call 0x1C17CF4
	028 Move X0, 0xE37000
	029 Move X0, [X0+280]
	030 Call 0x1C17CF4
	031 Move X0, 0xE37000
	032 Move X0, [X0+216]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X22+2601], W8
	036 Move X0, [X21]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X22, 0x10E8000
	042 Move W8, [X22+3867]
	043 Compare W8, 0
	044 JumpIfNotEqual {50}
	045 Move X0, 0xE04000
	046 Move X0, [X0+1976]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X22+3867], W8
	050 Move X8, [X21]
	051 Move X25, 0xE37000
	052 Move W9, [X8+224]
	053 Move X25, [X25+216]
	054 Compare W9, 0
	055 JumpIfNotEqual {59}
	056 Move X0, X8
	057 Call 0x1C17DFC
	058 Move X8, [X21]
	059 Move X0, [X25]
	060 Move X8, [X8+184]
	061 Move W9, [X0+224]
	062 Move X21, [X8+40]
	063 Compare W9, 0
	064 JumpIfNotEqual {67}
	065 Call 0x1C17DFC
	066 Move X0, [X25]
	067 Move X8, [X0+184]
	068 Move X24, 0xE0B000
	069 Move X22, [X8+16]
	070 Move X24, [X24+2024]
	071 Compare X22, 0
	072 JumpIfNotEqual {94}
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {78}
	076 Call 0x1C17DFC
	077 Move X0, [X25]
	078 Move X9, 0xE2D000
	079 Move X8, [X0+184]
	080 Move X9, [X9+3656]
	081 Move X23, [X8]
	082 Move X0, [X9]
	083 Call 0x1C17F10
	084 Move X8, 0xE37000
	085 Move X8, [X8+280]
	086 Move X1, X23
	087 Move X3, X31
	088 Move X22, X0
	089 Move X2, [X8]
	090 Call Action`1<Object>..ctor, X0, X1, X2
	091 Move X8, [X25]
	092 Move X8, [X8+184]
	093 Move [X8+16], X22
	094 Move X0, [X24]
	095 Move W8, [X0+224]
	096 Compare W8, 0
	097 JumpIfNotEqual {99}
	098 Call 0x1C17DFC
	099 Move X23, 0x10E9000
	100 Move W8, [X23+2189]
	101 Compare W8, 0
	102 JumpIfNotEqual {108}
	103 Move X0, 0xE0B000
	104 Move X0, [X0+2024]
	105 Call 0x1C17CF4
	106 Move W8, 1
	107 Move [X23+2189], W8
	108 Move X0, [X24]
	109 Move W8, [X0+224]
	110 Compare W8, 0
	111 JumpIfNotEqual {114}
	112 Call 0x1C17DFC
	113 Move X0, [X24]
	114 Compare X21, 0
	115 JumpIfEqual {134}
	116 Move X8, [X0+184]
	117 Move X0, X21
	118 Move X1, X22
	119 Move X2, X20
	120 Move X5, [X8+8]
	121 Move X3, X19
	122 Move X20, [X31+48]
	123 Move X19, [X31+56]
	124 Move X22, [X31+32]
	125 Move X21, [X31+40]
	126 Move X24, [X31+16]
	127 Move X23, [X31+24]
	128 Move W4, 8
	129 Move X6, X31
	130 Move X30, [X31+64]
	131 Move X25, [X31+72]
	132 Call TaskFactory.StartNew, X0, X1, X2, X3, X4, X5
	133 Return X0
	134 Call 0x1C17F20

Method: System.IAsyncResult BeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)

Disassembly:
	0x032F148C ADD X31, X31, 0x80
	0x032F1490 RET
	0x032F1494 MOV X0, X31
	0x032F1498 BL 0x32E18F0
	0x032F149C MOV X19, X0
	0x032F14A0 ADRP X0, 0xE36000
	0x032F14A4 LDR X0, [X0 + 0x1B8]
	0x032F14A8 BL 0x1C16D08

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move W7, 1
	004 Move W6, W31
	005 Call Stream.BeginReadInternal, X0, X1, X2, X3, X4, X5, X6, X7
	006 Move X30, [X31+16]
	007 Add X31, X31, 32
	008 Return X0

Method: System.IAsyncResult BeginReadInternal(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state, System.Boolean serializeAsynchronously, System.Boolean apm)

Disassembly:
	0x032F14AC MOV X1, X0
	0x032F14B0 MOV X0, X19
	0x032F14B4 BL 0x1C16DEC
	0x032F14B8 BL 0x1C16F20
	0x032F14BC STR X30, [X31 - 0x10]!
	0x032F14C0 MOV X8, X0
	0x032F14C4 LDR X0, [X0 + 0x20]
	0x032F14C8 STR X31, [X8 + 0x18]
	0x032F14CC CBZ X0, 0x32F14DC
	0x032F14D0 MOV X1, X31
	0x032F14D4 LDR X30, [X31], #0x10
	0x032F14D8 B 0x33E2354
	0x032F14DC BL 0x1C16F20
	0x032F14E0 SUB X31, X31, 0x30
	0x032F14E4 STP X30, X21, [X31 + 0x10]
	0x032F14E8 STP X20, X19, [X31 + 0x20]
	0x032F14EC ADRP X21, 0x10EB000
	0x032F14F0 LDRB W8, [X21 + 0xA33]
	0x032F14F4 MOV X20, X1
	0x032F14F8 MOV X19, X0
	0x032F14FC TBNZ X8, 0x0, 0x32F1520
	0x032F1500 ADRP X0, 0xE31000
	0x032F1504 LDR X0, [X0 + 0xDC8]
	0x032F1508 BL 0x1C16CF4
	0x032F150C ADRP X0, 0xE31000
	0x032F1510 LDR X0, [X0 + 0xDD0]
	0x032F1514 BL 0x1C16CF4
	0x032F1518 MOVZ W8, 0x1
	0x032F151C STRB W8, [X21 + 0xA33]
	0x032F1520 STR X31, [X31 + 0x8]
	0x032F1524 CBZ X20, 0x32F15B4
	0x032F1528 LDR X0, [X19 + 0x18]
	0x032F152C CBZ X0, 0x32F1580
	0x032F1530 CMP X0, X20
	0x032F1534 B.NE 0x32F15E8
	0x032F1538 LDRB W8, [X0 + 0x54]
	0x032F153C CBNZ W8, 0x32F1580
	0x032F1540 ADRP X8, 0xE31000
	0x032F1544 LDR X8, [X8 + 0xDD0]
	0x032F1548 LDR X1, [X8]
	0x032F154C BL 0x269D3A4
	0x032F1550 ADRP X8, 0xE31000
	0x032F1554 LDR X8, [X8 + 0xDC8]
	0x032F1558 STR X0, [X31 + 0x8]
	0x032F155C LDR X1, [X8]
	0x032F1560 ADD X0, X31, 0x8
	0x032F1564 BL 0x26772B8
	0x032F1568 MOV X0, X19
	0x032F156C BL 0x32F14BC
	0x032F1570 LDP X20, X19, [X31 + 0x20]
	0x032F1574 LDP X30, X21, [X31 + 0x10]
	0x032F1578 ADD X31, X31, 0x30
	0x032F157C RET
	0x032F1580 ADRP X0, 0xE0A000
	0x032F1584 LDR X0, [X0 + 0x578]
	0x032F1588 BL 0x1C16D08
	0x032F158C BL 0x1C16F10
	0x032F1590 MOV X19, X0
	0x032F1594 ADRP X0, 0xE36000
	0x032F1598 LDR X0, [X0 + 0x1C0]
	0x032F159C BL 0x1C16D08
	0x032F15A0 MOV X1, X0
	0x032F15A4 MOV X0, X19
	0x032F15A8 MOV X2, X31
	0x032F15AC BL 0x3314A68
	0x032F15B0 B 0x32F1618
	0x032F15B4 ADRP X0, 0xE07000
	0x032F15B8 LDR X0, [X0 + 0x528]
	0x032F15BC BL 0x1C16D08
	0x032F15C0 BL 0x1C16F10
	0x032F15C4 MOV X19, X0
	0x032F15C8 ADRP X0, 0xE2D000
	0x032F15CC LDR X0, [X0 + 0xDD0]
	0x032F15D0 BL 0x1C16D08
	0x032F15D4 MOV X1, X0
	0x032F15D8 MOV X0, X19
	0x032F15DC MOV X2, X31
	0x032F15E0 BL 0x330E100
	0x032F15E4 B 0x32F1618
	0x032F15E8 ADRP X0, 0xE02000
	0x032F15EC LDR X0, [X0 + 0x5B0]
	0x032F15F0 BL 0x1C16D08
	0x032F15F4 BL 0x1C16F10
	0x032F15F8 MOV X19, X0
	0x032F15FC ADRP X0, 0xE36000
	0x032F1600 LDR X0, [X0 + 0x1C0]
	0x032F1604 BL 0x1C16D08
	0x032F1608 MOV X1, X0
	0x032F160C MOV X0, X19
	0x032F1610 MOV X2, X31
	0x032F1614 BL 0x337DF1C
	0x032F1618 ADRP X0, 0xE36000
	0x032F161C LDR X0, [X0 + 0x1C8]
	0x032F1620 BL 0x1C16D08
	0x032F1624 MOV X1, X0
	0x032F1628 MOV X0, X19
	0x032F162C BL 0x1C16DEC
	0x032F1630 B 0x32F1634
	0x032F1634 MOV X20, X0
	0x032F1638 CMP W1, 0x1
	0x032F163C B.NE 0x32F1664
	0x032F1640 MOV X0, X20
	0x032F1644 BL 0x3EB1AD0
	0x032F1648 LDR X21, [X0]
	0x032F164C BL 0x3EB1AE0
	0x032F1650 MOV X0, X19
	0x032F1654 BL 0x32F14BC
	0x032F1658 CBZ X21, 0x32F1570
	0x032F165C MOV X0, X21
	0x032F1660 BL 0x1C16F18
	0x032F1664 MOV X21, X31
	0x032F1668 B 0x32F1670
	0x032F166C MOV X20, X0
	0x032F1670 MOV X0, X19
	0x032F1674 BL 0x32F14BC
	0x032F1678 CBNZ X21, 0x32F1684
	0x032F167C MOV X0, X20
	0x032F1680 BL 0x1D2C690
	0x032F1684 MOV X0, X21
	0x032F1688 BL 0x1C16F18
	0x032F168C BL 0x1990590
	0x032F1690 STR X30, [X31 - 0x40]!
	0x032F1694 STP X24, X23, [X31 + 0x10]
	0x032F1698 STP X22, X21, [X31 + 0x20]
	0x032F169C STP X20, X19, [X31 + 0x30]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], X29
	003 Move [X31+40], X30
	004 Move [X31+48], X28
	005 Move [X31+56], X27
	006 Move [X31+64], X26
	007 Move [X31+72], X25
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X20, 0x10EC000
	015 Move W8, [X20+2602]
	016 Move W21, W7
	017 Move W26, W6
	018 Move X22, X5
	019 Move X29, X4
	020 Move W24, W3
	021 Move W27, W2
	022 Move X23, X1
	023 Move X19, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {42}
	028 Move X0, 0xE37000
	029 Move X0, [X0+288]
	030 Call 0x1C17CF4
	031 Move X0, 0xE37000
	032 Move X0, [X0+296]
	033 Call 0x1C17CF4
	034 Move X0, 0xE37000
	035 Move X0, [X0+304]
	036 Call 0x1C17CF4
	037 Move X0, 0xE37000
	038 Move X0, [X0+216]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X20+2602], W8
	042 Move X8, [X19]
	043 Move X0, X19
	044 Move X9, [X8+424]
	045 Move X1, [X8+432]
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {140}
	051 Move X0, X19
	052 Call Stream.EnsureAsyncActiveSemaphoreInitialized, X0
	053 Compare X0, 0
	054 JumpIfEqual {149}
	055 Move X20, 0xE37000
	056 Move X20, [X20+216]
	057 Move X1, X31
	058 Move TEMP, X26
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {64}
	062 Call SemaphoreSlim.WaitAsync, X0
	063 Move X26, X0
	064 Call SemaphoreSlim.Wait, X0
	065 Move X26, X31
	066 Move X0, [X20]
	067 Move W25, W24
	068 Move W8, [X0+224]
	069 Compare W8, 0
	070 JumpIfEqual {72}
	071 Move W24, W27
	072 Move W24, W27
	073 Call 0x1C17DFC
	074 Move X0, [X20]
	075 Move X8, [X0+184]
	076 Move X27, [X8+24]
	077 Move X8, 0xE37000
	078 Move X8, [X8+296]
	079 Compare X27, 0
	080 JumpIfNotEqual {104}
	081 Move W8, [X0+224]
	082 Compare W8, 0
	083 JumpIfNotEqual {86}
	084 Call 0x1C17DFC
	085 Move X0, [X20]
	086 Move X9, 0xE37000
	087 Move X8, [X0+184]
	088 Move X9, [X9+288]
	089 Move X28, [X8]
	090 Move X0, [X9]
	091 Call 0x1C17F10
	092 Move X8, 0xE37000
	093 Move X8, [X8+304]
	094 Move X1, X28
	095 Move X3, X31
	096 Move X27, X0
	097 Move X2, [X8]
	098 Call Func`2<Object, Int32>..ctor, X0, X1, X2
	099 Move X8, [X20]
	100 Move X8, [X8+184]
	101 Move [X8+24], X27
	102 Move X8, 0xE37000
	103 Move X8, [X8+296]
	104 Move X0, [X8]
	105 Call 0x1C17F10
	106 And W2, W21, 1
	107 Move W1, 1
	108 Move X3, X27
	109 Move X4, X22
	110 Move X5, X19
	111 Move X6, X23
	112 Move W7, W24
	113 Move X28, X0
	114 Move [X31+8], X29
	115 Move [X31], W25
	116 Call ReadWriteTask..ctor, X0, X1, X2, X3, X4, X5, X6, X7, X8, X9
	117 Move X0, X19
	118 Compare X26, 0
	119 JumpIfEqual {123}
	120 Move X1, X26
	121 Move X2, X28
	122 Call Stream.RunReadWriteTaskWhenReady, X0, X1, X2
	123 Move X1, X28
	124 Call Stream.RunReadWriteTask, X0, X1
	125 Move X0, X28
	126 Move X20, [X31+112]
	127 Move X19, [X31+120]
	128 Move X22, [X31+96]
	129 Move X21, [X31+104]
	130 Move X24, [X31+80]
	131 Move X23, [X31+88]
	132 Move X26, [X31+64]
	133 Move X25, [X31+72]
	134 Move X28, [X31+48]
	135 Move X27, [X31+56]
	136 Move X29, [X31+32]
	137 Move X30, [X31+40]
	138 Add X31, X31, 128
	139 Return X0
	140 Move X0, X31
	141 Call Error.GetReadNotSupported
	142 Move X19, X0
	143 Move X0, 0xE37000
	144 Move X0, [X0+312]
	145 Call 0x1C17D08
	146 Move X1, X0
	147 Move X0, X19
	148 Call 0x1C17DEC
	149 Call 0x1C17F20

Method: System.Int32 EndRead(System.IAsyncResult asyncResult)

Disassembly:
	0x032F1A18 LDR X0, [X0 + 0x5B0]
	0x032F1A1C BL 0x1C16CF4
	0x032F1A20 ADRP X0, 0xE35000
	0x032F1A24 LDR X0, [X0 + 0xD08]
	0x032F1A28 BL 0x1C16CF4
	0x032F1A2C ADRP X0, 0xE36000
	0x032F1A30 LDR X0, [X0 + 0x1F0]
	0x032F1A34 BL 0x1C16CF4
	0x032F1A38 ADRP X0, 0xE35000
	0x032F1A3C LDR X0, [X0 + 0xD80]
	0x032F1A40 BL 0x1C16CF4
	0x032F1A44 ADRP X0, 0xE35000
	0x032F1A48 LDR X0, [X0 + 0xD60]
	0x032F1A4C BL 0x1C16CF4
	0x032F1A50 ADRP X0, 0xE31000
	0x032F1A54 LDR X0, [X0 + 0x2F8]
	0x032F1A58 BL 0x1C16CF4
	0x032F1A5C MOVZ W8, 0x1
	0x032F1A60 STRB W8, [X24 + 0xA36]
	0x032F1A64 LDR X3, [X23]
	0x032F1A68 ADD X2, X31, 0x10
	0x032F1A6C MOV X0, X22
	0x032F1A70 MOV X1, X21
	0x032F1A74 STP X31, X31, [X31 + 0x10]
	0x032F1A78 STP X31, X31, [X31]
	0x032F1A7C BL 0x2218D10
	0x032F1A80 TBZ X0, 0x0, 0x32F1AEC
	0x032F1A84 ADRP X8, 0xE2A000
	0x032F1A88 LDR X8, [X8 + 0x5B0]
	0x032F1A8C LDR X0, [X8]
	0x032F1A90 LDR W8, [X0 + 0xE0]
	0x032F1A94 CBNZ W8, 0x32F1A9C
	0x032F1A98 BL 0x1C16DFC
	0x032F1A9C LDR X8, [X20]
	0x032F1AA0 LDR X1, [X31 + 0x10]
	0x032F1AA4 LDP W2, W3, [X31 + 0x18]
	0x032F1AA8 MOV X0, X20
	0x032F1AAC LDR X9, [X8 + 0x318]
	0x032F1AB0 LDR X5, [X8 + 0x320]
	0x032F1AB4 MOV X4, X19
	0x032F1AB8 BLR X9
	0x032F1ABC CBNZ X0, 0x32F1AD0
	0x032F1AC0 MOVZ W0, 0x26
	0x032F1AC4 MOV X1, X31
	0x032F1AC8 BL 0x338F3E0
	0x032F1ACC MOV X0, X31
	0x032F1AD0 LDP X20, X19, [X31 + 0x60]
	0x032F1AD4 LDP X22, X21, [X31 + 0x50]
	0x032F1AD8 LDP X24, X23, [X31 + 0x40]
	0x032F1ADC LDR X30, [X31 + 0x30]
	0x032F1AE0 MOVZ W1, 0x10000
	0x032F1AE4 ADD X31, X31, 0x70
	0x032F1AE8 RET
	0x032F1AEC ADRP X8, 0xE2D000
	0x032F1AF0 LDR X8, [X8 + 0xD68]
	0x032F1AF4 LDR X0, [X8]
	0x032F1AF8 LDR W8, [X0 + 0xE0]
	0x032F1AFC CBNZ W8, 0x32F1B04
	0x032F1B00 BL 0x1C16DFC
	0x032F1B04 ADRP X8, 0xE2D000
	0x032F1B08 LDR X8, [X8 + 0xD50]
	0x032F1B0C LDR X21, [X8]
	0x032F1B10 LDR X0, [X21 + 0x20]
	0x032F1B14 LDRB W8, [X0 + 0x135]
	0x032F1B18 TBNZ X8, 0x0, 0x32F1B20
	0x032F1B1C BL 0x1C5C684
	0x032F1B20 LDR X8, [X0 + 0xC0]
	0x032F1B24 LDR X0, [X8 + 0x8]
	0x032F1B28 LDRB W8, [X0 + 0x135]
	0x032F1B2C TBNZ X8, 0x0, 0x32F1B34
	0x032F1B30 BL 0x1C5C684
	0x032F1B34 LDR W8, [X0 + 0xE0]
	0x032F1B38 CBNZ W8, 0x32F1B40
	0x032F1B3C BL 0x1C16DFC
	0x032F1B40 LDR X0, [X21 + 0x20]
	0x032F1B44 LDRB W8, [X0 + 0x135]
	0x032F1B48 TBNZ X8, 0x0, 0x32F1B50
	0x032F1B4C BL 0x1C5C684
	0x032F1B50 LDR X8, [X0 + 0xC0]
	0x032F1B54 LDR X0, [X8 + 0x8]
	0x032F1B58 LDRB W8, [X0 + 0x135]
	0x032F1B5C TBNZ X8, 0x0, 0x32F1B64
	0x032F1B60 BL 0x1C5C684
	0x032F1B64 ADRP X22, 0xE36000
	0x032F1B68 LDR X8, [X0 + 0xB8]
	0x032F1B6C LDR X22, [X22 + 0x1F0]
	0x032F1B70 ADD X0, X31, 0x20
	0x032F1B74 LDR X21, [X8]
	0x032F1B78 LDR X1, [X22]
	0x032F1B7C BL 0x25BCEEC
	0x032F1B80 CBZ X21, 0x32F1C34
	0x032F1B84 LDR X8, [X21]
	0x032F1B88 MOV W1, W0
	0x032F1B8C MOV X0, X21
	0x032F1B90 LDP X9, X2, [X8 + 0x178]
	0x032F1B94 BLR X9
	0x032F1B98 ADRP X8, 0xE35000
	0x032F1B9C LDR X8, [X8 + 0xD80]
	0x032F1BA0 MOV X21, X0
	0x032F1BA4 ADD X0, X31, 0x20
	0x032F1BA8 LDR X1, [X8]
	0x032F1BAC BL 0x25D7918
	0x032F1BB0 ADRP X8, 0xE31000
	0x032F1BB4 LDR X8, [X8 + 0x2F8]
	0x032F1BB8 STP X0, X1, [X31]
	0x032F1BBC MOV X0, X21
	0x032F1BC0 LDR X8, [X8]
	0x032F1BC4 MOV X1, X8
	0x032F1BC8 BL 0x25FB4C0
	0x032F1BCC ADRP X8, 0xE35000
	0x032F1BD0 LDR X8, [X8 + 0xD60]
	0x032F1BD4 MOV X2, X0

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x10EC000
	007 Move W8, [X21+2603]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xE32000
	015 Move X0, [X0+3528]
	016 Call 0x1C17CF4
	017 Move X0, 0xE32000
	018 Move X0, [X0+3536]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+2603], W8
	022 Move [X31+8], X31
	023 Compare X20, 0
	024 JumpIfEqual {64}
	025 Move X0, [X19+24]
	026 Compare X0, 0
	027 JumpIfEqual {52}
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move W8, [X0+84]
	030 Compare W8, 0
	031 JumpIfEqual {52}
	032 Move X8, 0xE32000
	033 Move X8, [X8+3536]
	034 Move X1, [X8]
	035 Call Task`1<Int32>.GetAwaiter, X0
	036 Move X8, 0xE32000
	037 Move X8, [X8+3528]
	038 Move [X31+8], X0
	039 Move X1, [X8]
	040 Add X0, X31, 8
	041 Call TaskAwaiter`1<Int32>.GetResult, X0
	042 Move W20, W0
	043 Move X0, X19
	044 Call Stream.FinishTrackingAsyncOperation, X0
	045 Move W0, W20
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X30, [X31+16]
	049 Move X21, [X31+24]
	050 Add X31, X31, 48
	051 Return X0
	052 Move X0, 0xE0B000
	053 Move X0, [X0+1400]
	054 Call 0x1C17D08
	055 Call 0x1C17F10
	056 Move X19, X0
	057 Move X0, 0xE37000
	058 Move X0, [X0+344]
	059 Call 0x1C17D08
	060 Move X1, X0
	061 Move X0, X19
	062 Move X2, X31
	063 Call ArgumentException..ctor, X0, X1
	064 Move X0, 0xE08000
	065 Move X0, [X0+1320]
	066 Call 0x1C17D08
	067 Call 0x1C17F10
	068 Move X19, X0
	069 Move X0, 0xE2E000
	070 Move X0, [X0+3536]
	071 Call 0x1C17D08
	072 Move X1, X0
	073 Move X0, X19
	074 Move X2, X31
	075 Call ArgumentNullException..ctor, X0, X1
	076 Move X0, 0xE03000
	077 Move X0, [X0+1456]
	078 Call 0x1C17D08
	079 Call 0x1C17F10
	080 Move X19, X0
	081 Move X0, 0xE37000
	082 Move X0, [X0+344]
	083 Call 0x1C17D08
	084 Move X1, X0
	085 Move X0, X19
	086 Move X2, X31
	087 Call InvalidOperationException..ctor, X0, X1
	088 Move X0, 0xE37000
	089 Move X0, [X0+352]
	090 Call 0x1C17D08
	091 Move X1, X0
	092 Move X0, X19
	093 Call 0x1C17DEC
	094 Move X20, X0
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move X0, X20
	097 Call 0x3EB2AD0
	098 Move X21, [X0]
	099 Call 0x3EB2AE0
	100 Move X0, X19
	101 Call Stream.FinishTrackingAsyncOperation, X0
	102 Compare X21, 0
	103 JumpIfNotEqual {106}
	104 Move W20, W31
	105 Move X21, X31
	106 Move X0, X21
	107 Call 0x1C17F18
	108 Move X20, X0
	109 Move X0, X19
	110 Call Stream.FinishTrackingAsyncOperation, X0
	111 Compare X21, 0
	112 JumpIfNotEqual {115}
	113 Move X0, X20
	114 Call 0x1D2D690
	115 Move X0, X21
	116 Call 0x1C17F18
	117 Call 0x1991590

Method: System.Threading.Tasks.Task`1<System.Int32> ReadAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count)

Disassembly:
	0x032F1BD8 MOV X4, X1
	0x032F1BDC ADD X0, X31, 0x0
	0x032F1BE0 LDR X3, [X8]
	0x032F1BE4 MOV X1, X2
	0x032F1BE8 MOV X2, X4
	0x032F1BEC BL 0x25BE5D8
	0x032F1BF0 LDR X1, [X22]
	0x032F1BF4 ADD X0, X31, 0x20
	0x032F1BF8 BL 0x25BCEEC
	0x032F1BFC LDR X8, [X20]
	0x032F1C00 MOV W3, W0
	0x032F1C04 MOV X0, X20
	0x032F1C08 MOV X1, X21
	0x032F1C0C LDR X9, [X8 + 0x318]
	0x032F1C10 LDR X5, [X8 + 0x320]
	0x032F1C14 MOV W2, W31
	0x032F1C18 MOV X4, X19
	0x032F1C1C BLR X9
	0x032F1C20 MOV X1, X0
	0x032F1C24 MOV X2, X21
	0x032F1C28 BL 0x32F1C38
	0x032F1C2C CBNZ X0, 0x32F1AD0
	0x032F1C30 B 0x32F1AC0
	0x032F1C34 BL 0x1C16F20
	0x032F1C38 SUB X31, X31, 0x90
	0x032F1C3C STR X30, [X31 + 0x60]
	0x032F1C40 STP X22, X21, [X31 + 0x70]
	0x032F1C44 STP X20, X19, [X31 + 0x80]
	0x032F1C48 ADRP X22, 0x10EB000
	0x032F1C4C ADRP X21, 0xE05000
	0x032F1C50 LDRB W8, [X22 + 0xA37]
	0x032F1C54 LDR X21, [X21 + 0x280]
	0x032F1C58 MOV X19, X2
	0x032F1C5C MOV X20, X1
	0x032F1C60 TBNZ X8, 0x0, 0x32F1C84
	0x032F1C64 ADRP X0, 0xE36000
	0x032F1C68 LDR X0, [X0 + 0x1F8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x10EC000
	009 Move X24, 0xE0B000
	010 Move W8, [X23+2604]
	011 Move X24, [X24+2008]
	012 Move W19, W3
	013 Move W20, W2
	014 Move X21, X1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xE0B000
	021 Move X0, [X0+2008]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+2604], W8
	025 Move X0, [X24]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X31
	031 Call CancellationToken.get_None
	032 Move X8, [X22]
	033 Move X4, X0
	034 Move X0, X22
	035 Move X1, X21
	036 Move X6, [X8+728]
	037 Move X5, [X8+736]
	038 Move W2, W20
	039 Move W3, W19
	040 Move X20, [X31+48]
	041 Move X19, [X31+56]
	042 Move X22, [X31+32]
	043 Move X21, [X31+40]
	044 Move X24, [X31+16]
	045 Move X23, [X31+24]
	046 Move X30, [X31+64]
	047 CallNoReturn X6

Method: System.Threading.Tasks.Task`1<System.Int32> ReadAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x032F1C6C BL 0x1C16CF4
	0x032F1C70 ADRP X0, 0xE05000
	0x032F1C74 LDR X0, [X0 + 0x280]
	0x032F1C78 BL 0x1C16CF4
	0x032F1C7C MOVZ W8, 0x1
	0x032F1C80 STRB W8, [X22 + 0xA37]
	0x032F1C84 LDR X0, [X21]
	0x032F1C88 MOVI V0.2D, 0x0
	0x032F1C8C STP V0, V0, [X31 + 0x40]
	0x032F1C90 STP V0, V0, [X31 + 0x20]
	0x032F1C94 STP X20, X19, [X31 + 0x40]
	0x032F1C98 ADRP X19, 0xE36000
	0x032F1C9C LDR W8, [X0 + 0xE0]
	0x032F1CA0 LDR X19, [X19 + 0x1F8]
	0x032F1CA4 CBNZ W8, 0x32F1CAC
	0x032F1CA8 BL 0x1C16DFC
	0x032F1CAC ADD X8, X31, 0x8
	0x032F1CB0 MOV X0, X31
	0x032F1CB4 BL 0x32C4770
	0x032F1CB8 LDUR V0, [X31 + 0x8]
	0x032F1CBC LDR X9, [X31 + 0x18]
	0x032F1CC0 LDR X2, [X19]
	0x032F1CC4 ADD X8, X31, 0x20
	0x032F1CC8 ORR X19, X8, 0xF
	0x032F1CCC MOVN W10, 0x0
	0x032F1CD0 ADD X1, X31, 0x20
	0x032F1CD4 MOV X0, X19
	0x032F1CD8 STUR V0, [X31 + 0x28]
	0x032F1CDC STR X9, [X31 + 0x38]
	0x032F1CE0 STR W10, [X31 + 0x20]
	0x032F1CE4 BL 0x2195DB8
	0x032F1CE8 MOV X0, X19
	0x032F1CEC MOV X1, X31
	0x032F1CF0 BL 0x32C47F8
	0x032F1CF4 LDP X20, X19, [X31 + 0x80]
	0x032F1CF8 LDP X22, X21, [X31 + 0x70]
	0x032F1CFC LDR X30, [X31 + 0x60]
	0x032F1D00 ADD X31, X31, 0x90
	0x032F1D04 RET
	0x032F1D08 MOVZ W0, 0x1
	0x032F1D0C RET
	0x032F1D10 SUB X31, X31, 0x60
	0x032F1D14 STP X30, X23, [X31 + 0x30]
	0x032F1D18 STP X22, X21, [X31 + 0x40]
	0x032F1D1C STP X20, X19, [X31 + 0x50]
	0x032F1D20 ADRP X23, 0x10EB000
	0x032F1D24 ADRP X22, 0xE2D000
	0x032F1D28 LDRB W8, [X23 + 0xA39]
	0x032F1D2C LDR X22, [X22 + 0xD68]
	0x032F1D30 MOV X19, X2
	0x032F1D34 MOV X20, X1
	0x032F1D38 MOV X21, X0
	0x032F1D3C TBNZ X8, 0x0, 0x32F1D84
	0x032F1D40 ADRP X0, 0xE2D000
	0x032F1D44 LDR X0, [X0 + 0xD50]
	0x032F1D48 BL 0x1C16CF4

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x10EC000
	009 Move [X31+8], X4
	010 Move X24, 0xE0B000
	011 Move W8, [X23+2605]
	012 Move X24, [X24+2008]
	013 Move W19, W3
	014 Move W20, W2
	015 Move X21, X1
	016 Move X22, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {32}
	021 Move X0, 0xE0B000
	022 Move X0, [X0+2008]
	023 Call 0x1C17CF4
	024 Move X0, 0xE36000
	025 Move X0, [X0+3272]
	026 Call 0x1C17CF4
	027 Move X0, 0xE04000
	028 Move X0, [X0+1976]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X23+2605], W8
	032 Move X0, [X24]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Add X0, X31, 8
	038 Move X1, X31
	039 Call CancellationToken.get_IsCancellationRequested, X0
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {57}
	044 Move X8, 0xE04000
	045 Move X8, [X8+1976]
	046 Move X20, 0xE36000
	047 Move X19, [X31+8]
	048 Move X0, [X8]
	049 Move W8, [X0+224]
	050 Move X20, [X20+3272]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X1, [X20]
	055 Move X0, X19
	056 Call 0x229A598, X0
	057 Move X0, X22
	058 Move X1, X21
	059 Move W2, W20
	060 Move W3, W19
	061 Call Stream.BeginEndReadAsync, X0, X1, X2, X3
	062 Move X20, [X31+48]
	063 Move X19, [X31+56]
	064 Move X22, [X31+32]
	065 Move X21, [X31+40]
	066 Move X24, [X31+16]
	067 Move X23, [X31+24]
	068 Move X30, [X31+64]
	069 Return X0

Method: System.Threading.Tasks.ValueTask`1<System.Int32> ReadAsync(System.Memory`1<System.Byte> buffer, System.Threading.CancellationToken cancellationToken = null)

Disassembly:
	0x032F1EF8 MOV X1, X0
	0x032F1EFC MOV X0, X19
	0x032F1F00 MOV X2, X31
	0x032F1F04 BL 0x32E16BC
	0x032F1F08 ADRP X0, 0xE36000
	0x032F1F0C LDR X0, [X0 + 0x200]
	0x032F1F10 BL 0x1C16D08
	0x032F1F14 MOV X1, X0
	0x032F1F18 MOV X0, X19
	0x032F1F1C BL 0x1C16DEC
	0x032F1F20 B 0x32F1F2C
	0x032F1F24 B 0x32F1F2C
	0x032F1F28 B 0x32F1F2C
	0x032F1F2C MOV X19, X0
	0x032F1F30 CMP W1, 0x1
	0x032F1F34 B.NE 0x32F1F58
	0x032F1F38 MOV X0, X19
	0x032F1F3C BL 0x3EB1AD0
	0x032F1F40 LDR X8, [X0]
	0x032F1F44 STR X8, [X31 + 0x8]
	0x032F1F48 BL 0x3EB1AE0
	0x032F1F4C MOV W21, W31
	0x032F1F50 B 0x32F1EB4
	0x032F1F54 MOV X19, X0
	0x032F1F58 ADD X0, X31, 0x8
	0x032F1F5C BL 0x1BB3A54
	0x032F1F60 MOV X0, X19
	0x032F1F64 BL 0x1D2C690
	0x032F1F68 BL 0x1990590
	0x032F1F6C STP X30, X21, [X31 - 0x20]!
	0x032F1F70 STP X20, X19, [X31 + 0x10]
	0x032F1F74 ADRP X20, 0x10EB000
	0x032F1F78 ADRP X21, 0xE02000
	0x032F1F7C LDRB W8, [X20 + 0xA3A]
	0x032F1F80 LDR X21, [X21 + 0x618]
	0x032F1F84 MOV X19, X0
	0x032F1F88 TBNZ X8, 0x0, 0x32F1FA0
	0x032F1F8C ADRP X0, 0xE02000
	0x032F1F90 LDR X0, [X0 + 0x618]
	0x032F1F94 BL 0x1C16CF4
	0x032F1F98 MOVZ W8, 0x1
	0x032F1F9C STRB W8, [X20 + 0xA3A]
	0x032F1FA0 LDR X0, [X21]
	0x032F1FA4 MOVZ W1, 0x1
	0x032F1FA8 BL 0x1C16D6C
	0x032F1FAC LDR X8, [X19]
	0x032F1FB0 MOV X20, X0
	0x032F1FB4 MOVZ W3, 0x1
	0x032F1FB8 MOV X0, X19
	0x032F1FBC LDR X9, [X8 + 0x358]
	0x032F1FC0 LDR X4, [X8 + 0x360]
	0x032F1FC4 MOV X1, X20
	0x032F1FC8 MOV W2, W31
	0x032F1FCC BLR X9
	0x032F1FD0 CBZ W0, 0x32F1FE8
	0x032F1FD4 CBZ X20, 0x32F1FF8
	0x032F1FD8 LDR W8, [X20 + 0x18]
	0x032F1FDC CBZ W8, 0x32F1FFC
	0x032F1FE0 LDRB W0, [X20 + 0x20]
	0x032F1FE4 B 0x32F1FEC
	0x032F1FE8 MOVN W0, 0x0
	0x032F1FEC LDP X20, X19, [X31 + 0x10]
	0x032F1FF0 LDP X30, X21, [X31], #0x20
	0x032F1FF4 RET
	0x032F1FF8 BL 0x1C16F20
	0x032F1FFC BL 0x1C16F28
	0x032F2000 SUB X31, X31, 0x50
	0x032F2004 STP X2, X30, [X31 + 0x18]
	0x032F2008 STP X22, X21, [X31 + 0x30]
	0x032F200C STP X20, X19, [X31 + 0x40]
	0x032F2010 ADRP X22, 0x10EA000
	0x032F2014 STR X1, [X31 + 0x10]
	0x032F2018 ADRP X21, 0xE2C000
	0x032F201C LDRB W8, [X22 + 0xA3B]
	0x032F2020 LDR X21, [X21 + 0xD68]
	0x032F2024 MOV X20, X2
	0x032F2028 MOV X19, X0
	0x032F202C TBNZ X8, 0x0, 0x32F2074
	0x032F2030 ADRP X0, 0xE2C000
	0x032F2034 LDR X0, [X0 + 0xD50]
	0x032F2038 BL 0x1C16CF4
	0x032F203C ADRP X0, 0xE2C000
	0x032F2040 LDR X0, [X0 + 0xD68]
	0x032F2044 BL 0x1C16CF4
	0x032F2048 ADRP X0, 0xE34000
	0x032F204C LDR X0, [X0 + 0xD60]
	0x032F2050 BL 0x1C16CF4
	0x032F2054 ADRP X0, 0xE30000
	0x032F2058 LDR X0, [X0 + 0xAC0]
	0x032F205C BL 0x1C16CF4
	0x032F2060 ADRP X0, 0xE30000
	0x032F2064 LDR X0, [X0 + 0x2F8]
	0x032F2068 BL 0x1C16CF4
	0x032F206C MOVZ W8, 0x1
	0x032F2070 STRB W8, [X22 + 0xA3B]
	0x032F2074 LDR X0, [X21]
	0x032F2078 STR X31, [X31 + 0x28]
	0x032F207C ADRP X21, 0xE2C000
	0x032F2080 LDR W8, [X0 + 0xE0]
	0x032F2084 LDR X21, [X21 + 0xD50]
	0x032F2088 CBNZ W8, 0x32F2090
	0x032F208C BL 0x1C16DFC
	0x032F2090 LDR X21, [X21]
	0x032F2094 LDR X0, [X21 + 0x20]
	0x032F2098 LDRB W8, [X0 + 0x135]
	0x032F209C TBNZ X8, 0x0, 0x32F20A4
	0x032F20A0 BL 0x1C5C684
	0x032F20A4 LDR X8, [X0 + 0xC0]
	0x032F20A8 LDR X0, [X8 + 0x8]
	0x032F20AC LDRB W8, [X0 + 0x135]
	0x032F20B0 TBNZ X8, 0x0, 0x32F20B8
	0x032F20B4 BL 0x1C5C684
	0x032F20B8 LDR W8, [X0 + 0xE0]
	0x032F20BC CBNZ W8, 0x32F20C4
	0x032F20C0 BL 0x1C16DFC
	0x032F20C4 LDR X0, [X21 + 0x20]
	0x032F20C8 LDRB W8, [X0 + 0x135]
	0x032F20CC TBNZ X8, 0x0, 0x32F20D4
	0x032F20D0 BL 0x1C5C684
	0x032F20D4 LDR X8, [X0 + 0xC0]
	0x032F20D8 LDR X0, [X8 + 0x8]
	0x032F20DC LDRB W8, [X0 + 0x135]
	0x032F20E0 TBNZ X8, 0x0, 0x32F20E8
	0x032F20E4 BL 0x1C5C684
	0x032F20E8 LDR X8, [X0 + 0xB8]
	0x032F20EC LDR X0, [X8]
	0x032F20F0 CBZ X0, 0x32F2180
	0x032F20F4 LDR X8, [X0]
	0x032F20F8 ADRP X21, 0xE30000
	0x032F20FC MOV W1, W20
	0x032F2100 LDP X9, X2, [X8 + 0x178]
	0x032F2104 LDR X21, [X21 + 0x2F8]
	0x032F2108 BLR X9
	0x032F210C LDR X1, [X21]
	0x032F2110 ADD X8, X31, 0x28
	0x032F2114 STR X0, [X31 + 0x28]
	0x032F2118 STP X31, X8, [X31]
	0x032F211C BL 0x25FB4C0
	0x032F2120 ADRP X8, 0xE34000
	0x032F2124 LDR X8, [X8 + 0xD60]
	0x032F2128 MOV X2, X0
	0x032F212C MOV X4, X1
	0x032F2130 LDR X3, [X8]
	0x032F2134 ADD X0, X31, 0x10
	0x032F2138 MOV X1, X2
	0x032F213C MOV X2, X4
	0x032F2140 BL 0x25BE5D8
	0x032F2144 LDR X8, [X19]
	0x032F2148 LDR X1, [X31 + 0x28]
	0x032F214C LDR W3, [X31 + 0x18]
	0x032F2150 LDR X9, [X8 + 0x388]
	0x032F2154 LDR X4, [X8 + 0x390]
	0x032F2158 MOV X0, X19
	0x032F215C MOV W2, W31
	0x032F2160 BLR X9
	0x032F2164 ADD X0, X31, 0x0
	0x032F2168 BL 0x1BB3A54
	0x032F216C LDP X20, X19, [X31 + 0x40]
	0x032F2170 LDP X22, X21, [X31 + 0x30]
	0x032F2174 LDR X30, [X31 + 0x20]
	0x032F2178 ADD X31, X31, 0x50

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], X30
	003 Move [X31+40], X25
	004 Move [X31+48], X24
	005 Move [X31+56], X23
	006 Move [X31+64], X22
	007 Move [X31+72], X21
	008 Move [X31+80], X20
	009 Move [X31+88], X19
	010 Move X25, 0x10EC000
	011 Move [X31+16], X1
	012 Move [X31+24], X2
	013 Move X24, 0xE36000
	014 Move X23, 0xE36000
	015 Move W8, [X25+2606]
	016 Move X24, [X24+3344]
	017 Move X23, [X23+3336]
	018 Move X19, X3
	019 Move X21, X2
	020 Move X22, X1
	021 Move X20, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {61}
	026 Move X0, 0xE2E000
	027 Move X0, [X0+3408]
	028 Call 0x1C17CF4
	029 Move X0, 0xE2E000
	030 Move X0, [X0+3432]
	031 Call 0x1C17CF4
	032 Move X0, 0xE36000
	033 Move X0, [X0+3312]
	034 Call 0x1C17CF4
	035 Move X0, 0xE36000
	036 Move X0, [X0+3320]
	037 Call 0x1C17CF4
	038 Move X0, 0xE36000
	039 Move X0, [X0+3328]
	040 Call 0x1C17CF4
	041 Move X0, 0xE2B000
	042 Move X0, [X0+1456]
	043 Call 0x1C17CF4
	044 Move X0, 0xE36000
	045 Move X0, [X0+3336]
	046 Call 0x1C17CF4
	047 Move X0, 0xE2E000
	048 Move X0, [X0+728]
	049 Call 0x1C17CF4
	050 Move X0, 0xE36000
	051 Move X0, [X0+3344]
	052 Call 0x1C17CF4
	053 Move X0, 0xE32000
	054 Move X0, [X0+3344]
	055 Call 0x1C17CF4
	056 Move X0, 0xE36000
	057 Move X0, [X0+3360]
	058 Call 0x1C17CF4
	059 Move W8, 1
	060 Move [X25+2606], W8
	061 Move X2, [X24]
	062 Move X0, X22
	063 Move X1, X21
	064 Move [X31], X31
	065 Move [X31+8], X31
	066 Call 0x319ECE0, X0
	067 Move X3, [X23]
	068 Add X2, X31, 0
	069 Call 0x2219D10, X0, X1
	070 Move TEMP, X0
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfNotEqual {97}
	074 Move X8, 0xE2B000
	075 Move X8, [X8+1456]
	076 Move X0, [X8]
	077 Move W8, [X0+224]
	078 Compare W8, 0
	079 JumpIfNotEqual {81}
	080 Call 0x1C17DFC
	081 Move X8, [X20]
	082 Move X1, [X31]
	083 Move W2, [X31+8]
	084 Move W3, [X31+12]
	085 Move X0, X20
	086 Move X9, [X8+728]
	087 Move X5, [X8+736]
	088 Move X4, X19
	089 NotImplemented "Instruction BLR not yet implemented."
	090 Move X19, X0
	091 Compare X0, 0
	092 JumpIfNotEqual {96}
	093 Move W0, 38
	094 Move X1, X31
	095 Call ThrowHelper.ThrowArgumentNullException, X0
	096 Move X1, 0x10000
	097 Move X8, 0xE2D000
	098 Move X8, [X8+3432]
	099 Move X0, [X8]
	100 Move W8, [X0+224]
	101 Compare W8, 0
	102 JumpIfNotEqual {104}
	103 Call 0x1C17DFC
	104 Move X8, 0xE2D000
	105 Move X8, [X8+3408]
	106 Move X21, [X8]
	107 Move X0, [X21+32]
	108 Move W8, [X0+309]
	109 Move TEMP, X8
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfEqual {114}
	113 Call 0x1C5D684
	114 Move X8, [X0+192]
	115 Move X0, [X8+8]
	116 Move W8, [X0+309]
	117 Move TEMP, X8
	118 And TEMP, TEMP, 1
	119 Compare TEMP, 1
	120 JumpIfEqual {122}
	121 Call 0x1C5D684
	122 Move W8, [X0+224]
	123 Compare W8, 0
	124 JumpIfNotEqual {126}
	125 Call 0x1C17DFC
	126 Move X0, [X21+32]
	127 Move W8, [X0+309]
	128 Move TEMP, X8
	129 And TEMP, TEMP, 1
	130 Compare TEMP, 1
	131 JumpIfEqual {133}
	132 Call 0x1C5D684
	133 Move X8, [X0+192]
	134 Move X0, [X8+8]
	135 Move W8, [X0+309]
	136 Move TEMP, X8
	137 And TEMP, TEMP, 1
	138 Compare TEMP, 1
	139 JumpIfEqual {141}
	140 Call 0x1C5D684
	141 Move X22, 0xE2D000
	142 Move X8, [X0+184]
	143 Move X22, [X22+728]
	144 Add X0, X31, 16
	145 Move X21, [X8]
	146 Move X1, [X22]
	147 Call 0x319ECF0, X0
	148 Compare X21, 0
	149 JumpIfEqual {197}
	150 Move X8, [X21]
	151 Move W1, W0
	152 Move X0, X21
	153 Move X9, [X8+376]
	154 Move X2, [X8+384]
	155 NotImplemented "Instruction BLR not yet implemented."
	156 Move X1, [X22]
	157 Move X21, X0
	158 Add X0, X31, 16
	159 Call 0x319ECF0, X0
	160 Move X8, [X20]
	161 Move W3, W0
	162 Move X0, X20
	163 Move X1, X21
	164 Move X9, [X8+728]
	165 Move X5, [X8+736]
	166 Move W2, W31
	167 Move X4, X19
	168 NotImplemented "Instruction BLR not yet implemented."
	169 Move X8, 0xE31000
	170 Move X8, [X8+3344]
	171 Move X20, [X31+16]
	172 Move X19, [X31+24]
	173 Move X22, X0
	174 Move X8, [X8]
	175 Move W9, [X8+224]
	176 Compare W9, 0
	177 JumpIfNotEqual {180}
	178 Move X0, X8
	179 Call 0x1C17DFC
	180 Move X0, X22
	181 Move X1, X21
	182 Move X2, X20
	183 Move X3, X19
	184 Call Stream.<ReadAsync>g__FinishReadAsync|44_0, X0, X1, X2
	185 Move X19, X0
	186 Move X0, X19
	187 Move X20, [X31+80]
	188 Move X19, [X31+88]
	189 Move X22, [X31+64]
	190 Move X21, [X31+72]
	191 Move X24, [X31+48]
	192 Move X23, [X31+56]
	193 Move X30, [X31+32]
	194 Move X25, [X31+40]
	195 Add X31, X31, 96
	196 Return X0
	197 Call 0x1C17F20

Method: System.Threading.Tasks.Task`1<System.Int32> BeginEndReadAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count)

Disassembly:
	0x032F1D4C ADRP X0, 0xE2D000
	0x032F1D50 LDR X0, [X0 + 0xD68]
	0x032F1D54 BL 0x1C16CF4
	0x032F1D58 ADRP X0, 0xE2D000
	0x032F1D5C LDR X0, [X0 + 0x2E8]
	0x032F1D60 BL 0x1C16CF4
	0x032F1D64 ADRP X0, 0xE31000
	0x032F1D68 LDR X0, [X0 + 0xE60]
	0x032F1D6C BL 0x1C16CF4
	0x032F1D70 ADRP X0, 0xE31000
	0x032F1D74 LDR X0, [X0 + 0x928]
	0x032F1D78 BL 0x1C16CF4
	0x032F1D7C MOVZ W8, 0x1
	0x032F1D80 STRB W8, [X23 + 0xA39]
	0x032F1D84 LDR X0, [X22]
	0x032F1D88 STP X31, X31, [X31 + 0x20]
	0x032F1D8C STR X31, [X31 + 0x18]
	0x032F1D90 ADRP X22, 0xE2D000
	0x032F1D94 LDR W8, [X0 + 0xE0]
	0x032F1D98 LDR X22, [X22 + 0xD50]
	0x032F1D9C CBNZ W8, 0x32F1DA4
	0x032F1DA0 BL 0x1C16DFC
	0x032F1DA4 LDR X22, [X22]
	0x032F1DA8 LDR X0, [X22 + 0x20]
	0x032F1DAC LDRB W8, [X0 + 0x135]
	0x032F1DB0 TBNZ X8, 0x0, 0x32F1DB8
	0x032F1DB4 BL 0x1C5C684
	0x032F1DB8 LDR X8, [X0 + 0xC0]
	0x032F1DBC LDR X0, [X8 + 0x8]
	0x032F1DC0 LDRB W8, [X0 + 0x135]
	0x032F1DC4 TBNZ X8, 0x0, 0x32F1DCC
	0x032F1DC8 BL 0x1C5C684
	0x032F1DCC LDR W8, [X0 + 0xE0]
	0x032F1DD0 CBNZ W8, 0x32F1DD8
	0x032F1DD4 BL 0x1C16DFC
	0x032F1DD8 LDR X0, [X22 + 0x20]
	0x032F1DDC LDRB W8, [X0 + 0x135]
	0x032F1DE0 TBNZ X8, 0x0, 0x32F1DE8
	0x032F1DE4 BL 0x1C5C684
	0x032F1DE8 LDR X8, [X0 + 0xC0]
	0x032F1DEC LDR X0, [X8 + 0x8]
	0x032F1DF0 LDRB W8, [X0 + 0x135]
	0x032F1DF4 TBNZ X8, 0x0, 0x32F1DFC
	0x032F1DF8 BL 0x1C5C684
	0x032F1DFC LDR X8, [X0 + 0xB8]
	0x032F1E00 LDR X0, [X8]
	0x032F1E04 CBZ X0, 0x32F1ED4
	0x032F1E08 LDR X8, [X0]
	0x032F1E0C MOV W1, W19
	0x032F1E10 LDP X9, X2, [X8 + 0x178]
	0x032F1E14 BLR X9
	0x032F1E18 ADD X8, X31, 0x28
	0x032F1E1C STR X0, [X31 + 0x28]
	0x032F1E20 STP X31, X8, [X31 + 0x8]
	0x032F1E24 LDR X8, [X21]
	0x032F1E28 MOV X1, X0
	0x032F1E2C LDR X9, [X8 + 0x358]
	0x032F1E30 LDR X4, [X8 + 0x360]
	0x032F1E34 MOV X0, X21
	0x032F1E38 MOV W2, W31
	0x032F1E3C MOV W3, W19
	0x032F1E40 BLR X9
	0x032F1E44 MOV W8, W0
	0x032F1E48 MOV W21, W0
	0x032F1E4C CMP X8, W19, SXTW
	0x032F1E50 B.GT 0x32F1ED8
	0x032F1E54 LDR X22, [X31 + 0x28]
	0x032F1E58 CBZ X22, 0x32F1E7C
	0x032F1E5C LDR W8, [X22 + 0x18]
	0x032F1E60 CMP W21, W8
	0x032F1E64 B.LS 0x32F1E70
	0x032F1E68 MOV X0, X31
	0x032F1E6C BL 0x339D6EC
	0x032F1E70 ADD X8, X22, 0x20
	0x032F1E74 MOV W9, W21
	0x032F1E78 B 0x32F1E90
	0x032F1E7C CBZ W21, 0x32F1E88
	0x032F1E80 MOV X0, X31
	0x032F1E84 BL 0x339D6EC
	0x032F1E88 MOV X8, X31
	0x032F1E8C MOV W9, W31
	0x032F1E90 ADRP X10, 0xE2D000
	0x032F1E94 LDR X10, [X10 + 0x2E8]
	0x032F1E98 STR X8, [X31 + 0x18]
	0x032F1E9C STP W9, W31, [X31 + 0x20]
	0x032F1EA0 LDR X3, [X10]
	0x032F1EA4 ADD X0, X31, 0x18
	0x032F1EA8 MOV X1, X20
	0x032F1EAC MOV X2, X19
	0x032F1EB0 BL 0x25FAF94
	0x032F1EB4 ADD X0, X31, 0x8
	0x032F1EB8 BL 0x1BB3A54
	0x032F1EBC MOV W0, W21
	0x032F1EC0 LDP X20, X19, [X31 + 0x50]
	0x032F1EC4 LDP X22, X21, [X31 + 0x40]
	0x032F1EC8 LDP X30, X23, [X31 + 0x30]
	0x032F1ECC ADD X31, X31, 0x60
	0x032F1ED0 RET
	0x032F1ED4 BL 0x1C16F20
	0x032F1ED8 ADRP X0, 0xE30000
	0x032F1EDC LDR X0, [X0 + 0x7A8]
	0x032F1EE0 BL 0x1C16D08
	0x032F1EE4 BL 0x1C16F10
	0x032F1EE8 MOV X19, X0
	0x032F1EEC ADRP X0, 0xE35000
	0x032F1EF0 LDR X0, [X0 + 0xC68]
	0x032F1EF4 BL 0x1C16D08

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X23, 0x10EC000
	012 Move X26, 0xE37000
	013 Move W8, [X23+2607]
	014 Move X26, [X26+216]
	015 Move W19, W3
	016 Move W21, W2
	017 Move X20, X1
	018 Move X22, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {46}
	023 Move X0, 0xE37000
	024 Move X0, [X0+360]
	025 Call 0x1C17CF4
	026 Move X0, 0xE37000
	027 Move X0, [X0+368]
	028 Call 0x1C17CF4
	029 Move X0, 0xE37000
	030 Move X0, [X0+376]
	031 Call 0x1C17CF4
	032 Move X0, 0xE37000
	033 Move X0, [X0+384]
	034 Call 0x1C17CF4
	035 Move X0, 0xE37000
	036 Move X0, [X0+392]
	037 Call 0x1C17CF4
	038 Move X0, 0xE37000
	039 Move X0, [X0+400]
	040 Call 0x1C17CF4
	041 Move X0, 0xE37000
	042 Move X0, [X0+216]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X23+2607], W8
	046 Move X0, [X26]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {52}
	050 Call 0x1C17DFC
	051 Move X0, [X26]
	052 Move X8, [X0+184]
	053 Move X23, [X8+32]
	054 Compare X23, 0
	055 JumpIfNotEqual {77}
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {61}
	059 Call 0x1C17DFC
	060 Move X0, [X26]
	061 Move X9, 0xE37000
	062 Move X8, [X0+184]
	063 Move X9, [X9+368]
	064 Move X24, [X8]
	065 Move X0, [X9]
	066 Call 0x1C17F10
	067 Move X8, 0xE37000
	068 Move X8, [X8+392]
	069 Move X1, X24
	070 Move X3, X31
	071 Move X23, X0
	072 Move X2, [X8]
	073 Call Func`5<Object, ReadWriteParameters, Object, Object, Object>..ctor, X0, X1, X2
	074 Move X0, [X26]
	075 Move X8, [X0+184]
	076 Move [X8+32], X23
	077 Move W8, [X0+224]
	078 Compare W8, 0
	079 JumpIfNotEqual {82}
	080 Call 0x1C17DFC
	081 Move X0, [X26]
	082 Move X8, [X0+184]
	083 Move X27, 0xE37000
	084 Move X24, [X8+40]
	085 Move X27, [X27+376]
	086 Compare X24, 0
	087 JumpIfNotEqual {109}
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {93}
	091 Call 0x1C17DFC
	092 Move X0, [X26]
	093 Move X9, 0xE37000
	094 Move X8, [X0+184]
	095 Move X9, [X9+360]
	096 Move X25, [X8]
	097 Move X0, [X9]
	098 Call 0x1C17F10
	099 Move X8, 0xE37000
	100 Move X8, [X8+400]
	101 Move X1, X25
	102 Move X3, X31
	103 Move X24, X0
	104 Move X2, [X8]
	105 Call Func`3<Object, Object, Int32>..ctor, X0, X1, X2
	106 Move X8, [X26]
	107 Move X8, [X8+184]
	108 Move [X8+40], X24
	109 Move W2, W21
	110 Move X5, [X27]
	111 NotImplemented "Instruction BFM not yet implemented."
	112 Move X0, X22
	113 Move X1, X20
	114 Move X3, X23
	115 Move X4, X24
	116 Move X20, [X31+64]
	117 Move X19, [X31+72]
	118 Move X22, [X31+48]
	119 Move X21, [X31+56]
	120 Move X24, [X31+32]
	121 Move X23, [X31+40]
	122 Move X26, [X31+16]
	123 Move X25, [X31+24]
	124 Move X30, [X31+80]
	125 Move X27, [X31+88]
	126 Call 0x21372FC, X0, X1, X2, X3
	127 Return X0

Method: System.IAsyncResult BeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)

Disassembly:
	0x032F22B8 BLR X9
	0x032F22BC ADRP X8, 0xE35000
	0x032F22C0 LDR X8, [X8 + 0x208]
	0x032F22C4 MOV W22, W0
	0x032F22C8 LDR X0, [X8]
	0x032F22CC BL 0x1C16F10
	0x032F22D0 MOV X21, X0
	0x032F22D4 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move W7, 1
	004 Move W6, W31
	005 Call Stream.BeginWriteInternal, X0, X1, X2, X3, X4, X5, X6, X7
	006 Move X30, [X31+16]
	007 Add X31, X31, 32
	008 Return X0

Method: System.IAsyncResult BeginWriteInternal(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state, System.Boolean serializeAsynchronously, System.Boolean apm)

Disassembly:
	0x032F22D8 BL 0x33BDD8C
	0x032F22DC STR W22, [X21 + 0x34]
	0x032F22E0 STR X20, [X21 + 0x10]
	0x032F22E4 CBZ X19, 0x32F22FC
	0x032F22E8 LDR X8, [X19 + 0x18]
	0x032F22EC LDR X0, [X19 + 0x40]
	0x032F22F0 LDR X2, [X19 + 0x28]
	0x032F22F4 MOV X1, X21
	0x032F22F8 BLR X8
	0x032F22FC MOV X0, X21
	0x032F2300 LDP X20, X19, [X31 + 0x30]
	0x032F2304 LDP X22, X21, [X31 + 0x20]
	0x032F2308 LDP X24, X23, [X31 + 0x10]
	0x032F230C LDP X30, X25, [X31], #0x40
	0x032F2310 RET
	0x032F2314 B 0x32F2318
	0x032F2318 MOV X21, X0
	0x032F231C CMP W1, 0x1
	0x032F2320 B.NE 0x32F23B8
	0x032F2324 MOV X0, X21
	0x032F2328 BL 0x3EB1AD0
	0x032F232C MOV X21, X0
	0x032F2330 ADRP X0, 0xE2F000
	0x032F2334 LDR X0, [X0 + 0x7A8]
	0x032F2338 BL 0x1C16D08
	0x032F233C LDR X8, [X21]
	0x032F2340 LDR X1, [X8]
	0x032F2344 BL 0x1C17270
	0x032F2348 TBZ X0, 0x0, 0x32F2390
	0x032F234C LDR X22, [X21]
	0x032F2350 BL 0x3EB1AE0
	0x032F2354 ADRP X0, 0xE35000
	0x032F2358 LDR X0, [X0 + 0x208]
	0x032F235C BL 0x1C16D08
	0x032F2360 BL 0x1C16F10
	0x032F2364 MOV X1, X31
	0x032F2368 MOV X21, X0
	0x032F236C BL 0x33BDD8C
	0x032F2370 MOV X0, X22
	0x032F2374 MOV X1, X31
	0x032F2378 BL 0x32C2380
	0x032F237C STR X0, [X21 + 0x28]
	0x032F2380 STR X20, [X21 + 0x10]
	0x032F2384 STRB W31, [X21 + 0x18]
	0x032F2388 CBNZ X19, 0x32F22E8
	0x032F238C B 0x32F22FC
	0x032F2390 MOVZ W0, 0x8
	0x032F2394 BL 0x3EB1AF0
	0x032F2398 LDR X8, [X21]
	0x032F239C STR X8, [X0]
	0x032F23A0 ADRP X1, 0xBC2000
	0x032F23A4 ADD X1, X1, 0xE58
	0x032F23A8 MOV X2, X31
	0x032F23AC BL 0x3EB1B00
	0x032F23B0 MOV X21, X0
	0x032F23B4 BL 0x3EB1AE0
	0x032F23B8 MOV X0, X21
	0x032F23BC BL 0x1D2C690
	0x032F23C0 BL 0x1990590
	0x032F23C4 STP X30, X21, [X31 - 0x20]!
	0x032F23C8 STP X20, X19, [X31 + 0x10]
	0x032F23CC MOV W20, W1
	0x032F23D0 MOV X1, X31
	0x032F23D4 MOV X19, X2
	0x032F23D8 MOV X21, X0
	0x032F23DC BL 0x33BDD8C
	0x032F23E0 STR W20, [X21 + 0x34]
	0x032F23E4 STR X19, [X21 + 0x10]
	0x032F23E8 LDP X20, X19, [X31 + 0x10]
	0x032F23EC LDP X30, X21, [X31], #0x20
	0x032F23F0 RET
	0x032F23F4 STR X30, [X31 - 0x30]!
	0x032F23F8 STP X22, X21, [X31 + 0x10]
	0x032F23FC STP X20, X19, [X31 + 0x20]
	0x032F2400 MOV X20, X1
	0x032F2404 MOV X1, X31
	0x032F2408 MOV X19, X2
	0x032F240C MOV X21, X0
	0x032F2410 AND W22, W3, 0x1
	0x032F2414 BL 0x33BDD8C
	0x032F2418 MOV X0, X20
	0x032F241C MOV X1, X31
	0x032F2420 BL 0x32C2380
	0x032F2424 STR X0, [X21 + 0x28]
	0x032F2428 STR X19, [X21 + 0x10]
	0x032F242C STRB W22, [X21 + 0x18]
	0x032F2430 LDP X20, X19, [X31 + 0x20]
	0x032F2434 LDP X22, X21, [X31 + 0x10]
	0x032F2438 LDR X30, [X31], #0x30
	0x032F243C RET
	0x032F2440 B 0x32F2444
	0x032F2444 STR X30, [X31 - 0x20]!
	0x032F2448 STP X20, X19, [X31 + 0x10]
	0x032F244C ADRP X20, 0x10EA000
	0x032F2450 LDRB W8, [X20 + 0xA50]
	0x032F2454 MOV X19, X0
	0x032F2458 TBNZ X8, 0x0, 0x32F2470
	0x032F245C ADRP X0, 0xE35000
	0x032F2460 LDR X0, [X0 + 0x208]
	0x032F2464 BL 0x1C16CF4
	0x032F2468 MOVZ W8, 0x1
	0x032F246C STRB W8, [X20 + 0xA50]
	0x032F2470 CBZ X19, 0x32F24C4
	0x032F2474 ADRP X8, 0xE35000
	0x032F2478 LDR X8, [X8 + 0x208]
	0x032F247C LDR X9, [X19]
	0x032F2480 LDR X8, [X8]
	0x032F2484 CMP X9, X8
	0x032F2488 B.NE 0x32F24C4
	0x032F248C LDRB W8, [X19 + 0x18]
	0x032F2490 CBNZ W8, 0x32F24C4
	0x032F2494 LDRB W8, [X19 + 0x30]
	0x032F2498 CBNZ W8, 0x32F24E4
	0x032F249C LDR X0, [X19 + 0x28]
	0x032F24A0 MOVZ W8, 0x1
	0x032F24A4 STRB W8, [X19 + 0x30]
	0x032F24A8 CBZ X0, 0x32F24B4
	0x032F24AC MOV X1, X31
	0x032F24B0 BL 0x32C2440
	0x032F24B4 LDR W0, [X19 + 0x34]
	0x032F24B8 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], X29
	003 Move [X31+40], X30
	004 Move [X31+48], X28
	005 Move [X31+56], X27
	006 Move [X31+64], X26
	007 Move [X31+72], X25
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X20, 0x10EB000
	015 Move W8, [X20+2608]
	016 Move W21, W7
	017 Move W26, W6
	018 Move X22, X5
	019 Move X25, X4
	020 Move W24, W3
	021 Move W29, W2
	022 Move X23, X1
	023 Move X19, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {42}
	028 Move X0, 0xE36000
	029 Move X0, [X0+288]
	030 Call 0x1C17CF4
	031 Move X0, 0xE36000
	032 Move X0, [X0+296]
	033 Call 0x1C17CF4
	034 Move X0, 0xE36000
	035 Move X0, [X0+432]
	036 Call 0x1C17CF4
	037 Move X0, 0xE36000
	038 Move X0, [X0+216]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X20+2608], W8
	042 Move X8, [X19]
	043 Move X0, X19
	044 Move X9, [X8+472]
	045 Move X1, [X8+480]
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {137}
	051 Move X0, X19
	052 Call Stream.EnsureAsyncActiveSemaphoreInitialized, X0
	053 Compare X0, 0
	054 JumpIfEqual {146}
	055 Move X20, 0xE36000
	056 Move X20, [X20+216]
	057 Move X1, X31
	058 Move TEMP, X26
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {64}
	062 Call SemaphoreSlim.WaitAsync, X0
	063 Move X26, X0
	064 Call SemaphoreSlim.Wait, X0
	065 Move X26, X31
	066 Move X0, [X20]
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfNotEqual {72}
	070 Call 0x1C17DFC
	071 Move X0, [X20]
	072 Move X8, [X0+184]
	073 Move X27, [X8+48]
	074 Move X8, 0xE36000
	075 Move X8, [X8+296]
	076 Compare X27, 0
	077 JumpIfNotEqual {101}
	078 Move W8, [X0+224]
	079 Compare W8, 0
	080 JumpIfNotEqual {83}
	081 Call 0x1C17DFC
	082 Move X0, [X20]
	083 Move X9, 0xE36000
	084 Move X8, [X0+184]
	085 Move X9, [X9+288]
	086 Move X28, [X8]
	087 Move X0, [X9]
	088 Call 0x1C17F10
	089 Move X8, 0xE36000
	090 Move X8, [X8+432]
	091 Move X1, X28
	092 Move X3, X31
	093 Move X27, X0
	094 Move X2, [X8]
	095 Call Func`2<Object, Int32>..ctor, X0, X1, X2
	096 Move X8, [X20]
	097 Move X8, [X8+184]
	098 Move [X8+48], X27
	099 Move X8, 0xE36000
	100 Move X8, [X8+296]
	101 Move X0, [X8]
	102 Call 0x1C17F10
	103 And W2, W21, 1
	104 Move W1, W31
	105 Move X3, X27
	106 Move X4, X22
	107 Move X5, X19
	108 Move X6, X23
	109 Move W7, W29
	110 Move X28, X0
	111 Move [X31+8], X25
	112 Move [X31], W24
	113 Call ReadWriteTask..ctor, X0, X1, X2, X3, X4, X5, X6, X7, X8, X9
	114 Move X0, X19
	115 Compare X26, 0
	116 JumpIfEqual {120}
	117 Move X1, X26
	118 Move X2, X28
	119 Call Stream.RunReadWriteTaskWhenReady, X0, X1, X2
	120 Move X1, X28
	121 Call Stream.RunReadWriteTask, X0, X1
	122 Move X0, X28
	123 Move X20, [X31+112]
	124 Move X19, [X31+120]
	125 Move X22, [X31+96]
	126 Move X21, [X31+104]
	127 Move X24, [X31+80]
	128 Move X23, [X31+88]
	129 Move X26, [X31+64]
	130 Move X25, [X31+72]
	131 Move X28, [X31+48]
	132 Move X27, [X31+56]
	133 Move X29, [X31+32]
	134 Move X30, [X31+40]
	135 Add X31, X31, 128
	136 Return X0
	137 Move X0, X31
	138 Call Error.GetWriteNotSupported
	139 Move X19, X0
	140 Move X0, 0xE36000
	141 Move X0, [X0+440]
	142 Call 0x1C17D08
	143 Move X1, X0
	144 Move X0, X19
	145 Call 0x1C17DEC
	146 Call 0x1C17F20

Method: System.Void RunReadWriteTaskWhenReady(System.Threading.Tasks.Task asyncWaiter, System.IO.Stream/ReadWriteTask readWriteTask)

Disassembly:
	0x032F17E4 LDP X24, X23, [X31 + 0x10]
	0x032F17E8 LDR X30, [X31], #0x40
	0x032F17EC RET
	0x032F17F0 STP X30, X27, [X31 - 0x50]!
	0x032F17F4 STP X26, X25, [X31 + 0x10]
	0x032F17F8 STP X24, X23, [X31 + 0x20]
	0x032F17FC STP X22, X21, [X31 + 0x30]
	0x032F1800 STP X20, X19, [X31 + 0x40]
	0x032F1804 ADRP X23, 0x10EB000
	0x032F1808 ADRP X26, 0xE36000
	0x032F180C LDRB W8, [X23 + 0xA38]
	0x032F1810 LDR X26, [X26 + 0xD8]
	0x032F1814 MOV W19, W3
	0x032F1818 MOV W21, W2
	0x032F181C MOV X20, X1
	0x032F1820 MOV X22, X0
	0x032F1824 TBNZ X8, 0x0, 0x32F1884
	0x032F1828 ADRP X0, 0xE36000
	0x032F182C LDR X0, [X0 + 0x1D0]
	0x032F1830 BL 0x1C16CF4
	0x032F1834 ADRP X0, 0xE36000
	0x032F1838 LDR X0, [X0 + 0x170]
	0x032F183C BL 0x1C16CF4
	0x032F1840 ADRP X0, 0xE36000
	0x032F1844 LDR X0, [X0 + 0x1D8]
	0x032F1848 BL 0x1C16CF4
	0x032F184C ADRP X0, 0xE03000
	0x032F1850 LDR X0, [X0 + 0x7B8]
	0x032F1854 BL 0x1C16CF4
	0x032F1858 ADRP X0, 0xE36000
	0x032F185C LDR X0, [X0 + 0x1E0]
	0x032F1860 BL 0x1C16CF4
	0x032F1864 ADRP X0, 0xE36000
	0x032F1868 LDR X0, [X0 + 0x1E8]
	0x032F186C BL 0x1C16CF4
	0x032F1870 ADRP X0, 0xE36000
	0x032F1874 LDR X0, [X0 + 0xD8]
	0x032F1878 BL 0x1C16CF4
	0x032F187C MOVZ W8, 0x1
	0x032F1880 STRB W8, [X23 + 0xA38]
	0x032F1884 LDR X0, [X26]
	0x032F1888 LDR W8, [X0 + 0xE0]
	0x032F188C CBNZ W8, 0x32F1898
	0x032F1890 BL 0x1C16DFC
	0x032F1894 LDR X0, [X26]
	0x032F1898 LDR X8, [X0 + 0xB8]
	0x032F189C LDR X23, [X8 + 0x40]
	0x032F18A0 CBNZ X23, 0x32F18F4
	0x032F18A4 LDR W8, [X0 + 0xE0]
	0x032F18A8 CBNZ W8, 0x32F18B4
	0x032F18AC BL 0x1C16DFC
	0x032F18B0 LDR X0, [X26]
	0x032F18B4 ADRP X9, 0xE36000
	0x032F18B8 LDR X8, [X0 + 0xB8]
	0x032F18BC LDR X9, [X9 + 0x170]
	0x032F18C0 LDR X24, [X8]
	0x032F18C4 LDR X0, [X9]
	0x032F18C8 BL 0x1C16F10
	0x032F18CC ADRP X8, 0xE36000
	0x032F18D0 LDR X8, [X8 + 0x1E0]
	0x032F18D4 MOV X1, X24
	0x032F18D8 MOV X3, X31
	0x032F18DC MOV X23, X0
	0x032F18E0 LDR X2, [X8]
	0x032F18E4 BL 0x2D41260
	0x032F18E8 LDR X0, [X26]
	0x032F18EC LDR X8, [X0 + 0xB8]
	0x032F18F0 STR X23, [X8 + 0x40]
	0x032F18F4 LDR W8, [X0 + 0xE0]
	0x032F18F8 CBNZ W8, 0x32F1904
	0x032F18FC BL 0x1C16DFC
	0x032F1900 LDR X0, [X26]
	0x032F1904 LDR X8, [X0 + 0xB8]
	0x032F1908 ADRP X27, 0xE36000
	0x032F190C LDR X24, [X8 + 0x48]
	0x032F1910 LDR X27, [X27 + 0x1D8]
	0x032F1914 CBNZ X24, 0x32F1968
	0x032F1918 LDR W8, [X0 + 0xE0]
	0x032F191C CBNZ W8, 0x32F1928
	0x032F1920 BL 0x1C16DFC
	0x032F1924 LDR X0, [X26]
	0x032F1928 ADRP X9, 0xE36000
	0x032F192C LDR X8, [X0 + 0xB8]
	0x032F1930 LDR X9, [X9 + 0x1D0]
	0x032F1934 LDR X25, [X8]
	0x032F1938 LDR X0, [X9]
	0x032F193C BL 0x1C16F10
	0x032F1940 ADRP X8, 0xE36000
	0x032F1944 LDR X8, [X8 + 0x1E8]
	0x032F1948 MOV X1, X25
	0x032F194C MOV X3, X31
	0x032F1950 MOV X24, X0
	0x032F1954 LDR X2, [X8]
	0x032F1958 BL 0x2D3BC70
	0x032F195C LDR X8, [X26]
	0x032F1960 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x10EC000
	008 Move W8, [X22+2609]
	009 Move X19, X2
	010 Move X20, X1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0xE37000
	017 Move X0, [X0+328]
	018 Call 0x1C17CF4
	019 Move X0, 0xE0B000
	020 Move X0, [X0+2024]
	021 Call 0x1C17CF4
	022 Move X0, 0xE37000
	023 Move X0, [X0+336]
	024 Call 0x1C17CF4
	025 Move X0, 0xE37000
	026 Move X0, [X0+216]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X22+2609], W8
	030 Compare X20, 0
	031 JumpIfEqual {118}
	032 Move X0, X20
	033 Move X1, X31
	034 Call Task.get_IsCompleted, X0
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {47}
	039 Move X0, X21
	040 Move X1, X19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Move X23, [X31+56]
	047 Move X23, 0xE37000
	048 Move X23, [X23+216]
	049 Move X0, [X23]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {55}
	053 Call 0x1C17DFC
	054 Move X0, [X23]
	055 Move X8, [X0+184]
	056 Move X21, [X8+56]
	057 Compare X21, 0
	058 JumpIfNotEqual {80}
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {64}
	062 Call 0x1C17DFC
	063 Move X0, [X23]
	064 Move X9, 0xE37000
	065 Move X8, [X0+184]
	066 Move X9, [X9+328]
	067 Move X22, [X8]
	068 Move X0, [X9]
	069 Call 0x1C17F10
	070 Move X8, 0xE37000
	071 Move X8, [X8+336]
	072 Move X1, X22
	073 Move X3, X31
	074 Move X21, X0
	075 Move X2, [X8]
	076 Call Action`2<Object, Object>..ctor, X0, X1, X2
	077 Move X8, [X23]
	078 Move X8, [X8+184]
	079 Move [X8+56], X21
	080 Move X22, 0xE0B000
	081 Move X22, [X22+2024]
	082 Move X0, [X22]
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {87}
	086 Call 0x1C17DFC
	087 Move X23, 0x10E9000
	088 Move W8, [X23+2189]
	089 Compare W8, 0
	090 JumpIfNotEqual {96}
	091 Move X0, 0xE0B000
	092 Move X0, [X0+2024]
	093 Call 0x1C17CF4
	094 Move W8, 1
	095 Move [X23+2189], W8
	096 Move X0, [X22]
	097 Move W8, [X0+224]
	098 Compare W8, 0
	099 JumpIfNotEqual {102}
	100 Call 0x1C17DFC
	101 Move X0, [X22]
	102 Move X8, [X0+184]
	103 Move X0, X20
	104 Move X1, X21
	105 Move X2, X19
	106 Move X5, [X8+8]
	107 Move X20, [X31+32]
	108 Move X19, [X31+40]
	109 Move X22, [X31+16]
	110 Move X21, [X31+24]
	111 Move W4, 0x80000
	112 Move X3, X31
	113 Move X6, X31
	114 Move X30, [X31+48]
	115 Move X23, [X31+56]
	116 Call Task.ContinueWith, X0, X1, X2, X3, X4, X5
	117 Return 
	118 Call 0x1C17F20

Method: System.Void RunReadWriteTask(System.IO.Stream/ReadWriteTask readWriteTask)

Disassembly:
	0x032F1964 STR X24, [X8 + 0x48]
	0x032F1968 MOV W2, W21
	0x032F196C LDR X5, [X27]
	0x032F1970 BFM X2, X19, 0x20, 0x1F
	0x032F1974 MOV X0, X22
	0x032F1978 MOV X1, X20
	0x032F197C MOV X3, X23
	0x032F1980 MOV X4, X24
	0x032F1984 LDP X20, X19, [X31 + 0x40]
	0x032F1988 LDP X22, X21, [X31 + 0x30]
	0x032F198C LDP X24, X23, [X31 + 0x20]
	0x032F1990 LDP X26, X25, [X31 + 0x10]
	0x032F1994 LDP X30, X27, [X31], #0x50
	0x032F1998 B 0x2137360
	0x032F199C SUB X31, X31, 0x70
	0x032F19A0 STP X2, X30, [X31 + 0x28]
	0x032F19A4 STP X24, X23, [X31 + 0x40]
	0x032F19A8 STP X22, X21, [X31 + 0x50]
	0x032F19AC STP X20, X19, [X31 + 0x60]
	0x032F19B0 ADRP X24, 0x10EB000
	0x032F19B4 STR X1, [X31 + 0x20]
	0x032F19B8 ADRP X23, 0xE35000
	0x032F19BC LDRB W8, [X24 + 0xA36]
	0x032F19C0 LDR X23, [X23 + 0xD08]
	0x032F19C4 MOV X19, X3
	0x032F19C8 MOV X21, X2
	0x032F19CC MOV X22, X1
	0x032F19D0 MOV X20, X0
	0x032F19D4 TBNZ X8, 0x0, 0x32F1A64
	0x032F19D8 ADRP X0, 0xE2D000
	0x032F19DC LDR X0, [X0 + 0xD50]
	0x032F19E0 BL 0x1C16CF4
	0x032F19E4 ADRP X0, 0xE2D000
	0x032F19E8 LDR X0, [X0 + 0xD68]
	0x032F19EC BL 0x1C16CF4
	0x032F19F0 ADRP X0, 0xE35000
	0x032F19F4 LDR X0, [X0 + 0xCF0]
	0x032F19F8 BL 0x1C16CF4
	0x032F19FC ADRP X0, 0xE35000
	0x032F1A00 LDR X0, [X0 + 0xCF8]
	0x032F1A04 BL 0x1C16CF4
	0x032F1A08 ADRP X0, 0xE35000
	0x032F1A0C LDR X0, [X0 + 0xD00]
	0x032F1A10 BL 0x1C16CF4
	0x032F1A14 ADRP X0, 0xE2A000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x10EC000
	007 Move X21, 0xE0B000
	008 Move W8, [X22+2610]
	009 Move X21, [X21+2024]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xE0B000
	017 Move X0, [X0+2024]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2610], W8
	021 Move [X20+24], X19
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X20, 0x10E9000
	028 Move W8, [X20+2189]
	029 Compare W8, 0
	030 JumpIfNotEqual {36}
	031 Move X0, 0xE0B000
	032 Move X0, [X0+2024]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X20+2189], W8
	036 Move X0, [X21]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {42}
	040 Call 0x1C17DFC
	041 Move X0, [X21]
	042 Compare X19, 0
	043 JumpIfEqual {57}
	044 Move X8, [X0+184]
	045 Move X0, X19
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move W1, W31
	049 Move X8, [X8+8]
	050 Move X2, X31
	051 Move [X19+40], X8
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X30, [X31+48]
	055 Call Task.ScheduleAndStart, X0, X1
	056 Return 
	057 Call 0x1C17F20

Method: System.Void FinishTrackingAsyncOperation()

Disassembly:
	0x032F24BC LDR X30, [X31], #0x20
	0x032F24C0 RET
	0x032F24C4 ADRP X0, 0xE09000
	0x032F24C8 LDR X0, [X0 + 0x578]
	0x032F24CC BL 0x1C16D08
	0x032F24D0 BL 0x1C16F10
	0x032F24D4 MOV X19, X0
	0x032F24D8 ADRP X0, 0xE35000
	0x032F24DC LDR X0, [X0 + 0x210]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, X0
	003 Move X0, [X0+32]
	004 Move [X8+24], X31
	005 Compare X0, 0
	006 JumpIfEqual {11}
	007 Move X1, X31
	008 Move X30, [X31+16]
	009 Call SemaphoreSlim.Release, X0
	010 Return 
	011 Call 0x1C17F20

Method: System.Void EndWrite(System.IAsyncResult asyncResult)

Disassembly:
	0x032F24E0 B 0x32F2500
	0x032F24E4 ADRP X0, 0xE09000
	0x032F24E8 LDR X0, [X0 + 0x578]
	0x032F24EC BL 0x1C16D08
	0x032F24F0 BL 0x1C16F10
	0x032F24F4 MOV X19, X0
	0x032F24F8 ADRP X0, 0xE35000
	0x032F24FC LDR X0, [X0 + 0x218]
	0x032F2500 BL 0x1C16D08
	0x032F2504 MOV X1, X0
	0x032F2508 MOV X0, X19
	0x032F250C MOV X2, X31
	0x032F2510 BL 0x3314A68
	0x032F2514 ADRP X0, 0xE35000
	0x032F2518 LDR X0, [X0 + 0x220]
	0x032F251C BL 0x1C16D08
	0x032F2520 MOV X1, X0
	0x032F2524 MOV X0, X19
	0x032F2528 BL 0x1C16DEC
	0x032F252C STP X30, X25, [X31 - 0x40]!
	0x032F2530 STP X24, X23, [X31 + 0x10]
	0x032F2534 STP X22, X21, [X31 + 0x20]
	0x032F2538 STP X20, X19, [X31 + 0x30]
	0x032F253C ADRP X25, 0x10EA000
	0x032F2540 LDRB W8, [X25 + 0xA3E]
	0x032F2544 MOV X20, X5
	0x032F2548 MOV X19, X4
	0x032F254C MOV W21, W3
	0x032F2550 MOV W22, W2
	0x032F2554 MOV X23, X1
	0x032F2558 MOV X24, X0
	0x032F255C TBNZ X8, 0x0, 0x32F2574
	0x032F2560 ADRP X0, 0xE35000
	0x032F2564 LDR X0, [X0 + 0x208]
	0x032F2568 BL 0x1C16CF4
	0x032F256C MOVZ W8, 0x1
	0x032F2570 STRB W8, [X25 + 0xA3E]
	0x032F2574 LDR X8, [X24]
	0x032F2578 LDR X9, [X8 + 0x388]
	0x032F257C LDR X4, [X8 + 0x390]
	0x032F2580 MOV X0, X24
	0x032F2584 MOV X1, X23
	0x032F2588 MOV W2, W22
	0x032F258C MOV W3, W21
	0x032F2590 BLR X9
	0x032F2594 ADRP X8, 0xE35000
	0x032F2598 LDR X8, [X8 + 0x208]
	0x032F259C LDR X0, [X8]
	0x032F25A0 BL 0x1C16F10
	0x032F25A4 MOV X21, X0
	0x032F25A8 MOV X1, X31
	0x032F25AC BL 0x33BDD8C
	0x032F25B0 MOVZ W8, 0x1
	0x032F25B4 STR X20, [X21 + 0x10]
	0x032F25B8 STRB W8, [X21 + 0x18]
	0x032F25BC CBZ X19, 0x32F25D4
	0x032F25C0 LDR X8, [X19 + 0x18]
	0x032F25C4 LDR X0, [X19 + 0x40]
	0x032F25C8 LDR X2, [X19 + 0x28]
	0x032F25CC MOV X1, X21
	0x032F25D0 BLR X8
	0x032F25D4 MOV X0, X21
	0x032F25D8 LDP X20, X19, [X31 + 0x30]
	0x032F25DC LDP X22, X21, [X31 + 0x20]
	0x032F25E0 LDP X24, X23, [X31 + 0x10]
	0x032F25E4 LDP X30, X25, [X31], #0x40
	0x032F25E8 RET
	0x032F25EC B 0x32F25F0
	0x032F25F0 MOV X21, X0
	0x032F25F4 CMP W1, 0x1
	0x032F25F8 B.NE 0x32F2684
	0x032F25FC MOV X0, X21
	0x032F2600 BL 0x3EB1AD0
	0x032F2604 MOV X21, X0
	0x032F2608 ADRP X0, 0xE2F000
	0x032F260C LDR X0, [X0 + 0x7A8]
	0x032F2610 BL 0x1C16D08
	0x032F2614 LDR X8, [X21]
	0x032F2618 LDR X1, [X8]
	0x032F261C BL 0x1C17270
	0x032F2620 TBZ X0, 0x0, 0x32F265C
	0x032F2624 LDR X22, [X21]
	0x032F2628 BL 0x3EB1AE0
	0x032F262C ADRP X0, 0xE35000
	0x032F2630 LDR X0, [X0 + 0x208]
	0x032F2634 BL 0x1C16D08
	0x032F2638 BL 0x1C16F10
	0x032F263C MOV X1, X31
	0x032F2640 MOV X21, X0
	0x032F2644 BL 0x33BDD8C
	0x032F2648 MOV X0, X22
	0x032F264C MOV X1, X31
	0x032F2650 BL 0x32C2380
	0x032F2654 STR X0, [X21 + 0x28]
	0x032F2658 B 0x32F25B0
	0x032F265C MOVZ W0, 0x8
	0x032F2660 BL 0x3EB1AF0
	0x032F2664 LDR X8, [X21]
	0x032F2668 STR X8, [X0]
	0x032F266C ADRP X1, 0xBC2000
	0x032F2670 ADD X1, X1, 0xE58
	0x032F2674 MOV X2, X31
	0x032F2678 BL 0x3EB1B00
	0x032F267C MOV X21, X0
	0x032F2680 BL 0x3EB1AE0
	0x032F2684 MOV X0, X21
	0x032F2688 BL 0x1D2C690
	0x032F268C BL 0x1990590

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x10EB000
	007 Move W8, [X21+2611]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xE31000
	015 Move X0, [X0+3528]
	016 Call 0x1C17CF4
	017 Move X0, 0xE31000
	018 Move X0, [X0+3536]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+2611], W8
	022 Move [X31+8], X31
	023 Compare X20, 0
	024 JumpIfEqual {62}
	025 Move X0, [X19+24]
	026 Compare X0, 0
	027 JumpIfEqual {50}
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move W8, [X0+84]
	030 Compare W8, 0
	031 JumpIfNotEqual {50}
	032 Move X8, 0xE31000
	033 Move X8, [X8+3536]
	034 Move X1, [X8]
	035 Call Task`1<Int32>.GetAwaiter, X0
	036 Move X8, 0xE31000
	037 Move X8, [X8+3528]
	038 Move [X31+8], X0
	039 Move X1, [X8]
	040 Add X0, X31, 8
	041 Call TaskAwaiter`1<Int32>.GetResult, X0
	042 Move X0, X19
	043 Call Stream.FinishTrackingAsyncOperation, X0
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X30, [X31+16]
	047 Move X21, [X31+24]
	048 Add X31, X31, 48
	049 Return 
	050 Move X0, 0xE0A000
	051 Move X0, [X0+1400]
	052 Call 0x1C17D08
	053 Call 0x1C17F10
	054 Move X19, X0
	055 Move X0, 0xE36000
	056 Move X0, [X0+448]
	057 Call 0x1C17D08
	058 Move X1, X0
	059 Move X0, X19
	060 Move X2, X31
	061 Call ArgumentException..ctor, X0, X1
	062 Move X0, 0xE07000
	063 Move X0, [X0+1320]
	064 Call 0x1C17D08
	065 Call 0x1C17F10
	066 Move X19, X0
	067 Move X0, 0xE2D000
	068 Move X0, [X0+3536]
	069 Call 0x1C17D08
	070 Move X1, X0
	071 Move X0, X19
	072 Move X2, X31
	073 Call ArgumentNullException..ctor, X0, X1
	074 Move X0, 0xE02000
	075 Move X0, [X0+1456]
	076 Call 0x1C17D08
	077 Call 0x1C17F10
	078 Move X19, X0
	079 Move X0, 0xE36000
	080 Move X0, [X0+448]
	081 Call 0x1C17D08
	082 Move X1, X0
	083 Move X0, X19
	084 Move X2, X31
	085 Call InvalidOperationException..ctor, X0, X1
	086 Move X0, 0xE36000
	087 Move X0, [X0+456]
	088 Call 0x1C17D08
	089 Move X1, X0
	090 Move X0, X19
	091 Call 0x1C17DEC
	092 Move X20, X0
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move X0, X20
	095 Call 0x3EB2AD0
	096 Move X21, [X0]
	097 Call 0x3EB2AE0
	098 Move X0, X19
	099 Call Stream.FinishTrackingAsyncOperation, X0
	100 Compare X21, 0
	101 JumpIfEqual {44}
	102 Move X0, X21
	103 Call 0x1C17F18
	104 Move X21, X31
	105 Move X20, X0
	106 Move X0, X19
	107 Call Stream.FinishTrackingAsyncOperation, X0
	108 Compare X21, 0
	109 JumpIfNotEqual {112}
	110 Move X0, X20
	111 Call 0x1D2D690
	112 Move X0, X21
	113 Call 0x1C17F18
	114 Call 0x1991590

Method: System.Threading.Tasks.Task WriteAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count)

Disassembly:
	0x032F2690 STR X30, [X31 - 0x20]!
	0x032F2694 STP X20, X19, [X31 + 0x10]
	0x032F2698 MOV X19, X1
	0x032F269C MOV X1, X31
	0x032F26A0 MOV X20, X0
	0x032F26A4 BL 0x33BDD8C
	0x032F26A8 MOVZ W8, 0x1
	0x032F26AC STR X19, [X20 + 0x10]
	0x032F26B0 STRB W8, [X20 + 0x18]
	0x032F26B4 LDP X20, X19, [X31 + 0x10]
	0x032F26B8 LDR X30, [X31], #0x20
	0x032F26BC RET
	0x032F26C0 B 0x32F26C4
	0x032F26C4 STR X30, [X31 - 0x20]!
	0x032F26C8 STP X20, X19, [X31 + 0x10]
	0x032F26CC ADRP X20, 0x10EA000
	0x032F26D0 LDRB W8, [X20 + 0xA51]
	0x032F26D4 MOV X19, X0
	0x032F26D8 TBNZ X8, 0x0, 0x32F26F0
	0x032F26DC ADRP X0, 0xE35000
	0x032F26E0 LDR X0, [X0 + 0x208]
	0x032F26E4 BL 0x1C16CF4
	0x032F26E8 MOVZ W8, 0x1
	0x032F26EC STRB W8, [X20 + 0xA51]
	0x032F26F0 CBZ X19, 0x32F2748
	0x032F26F4 ADRP X8, 0xE35000
	0x032F26F8 LDR X8, [X8 + 0x208]
	0x032F26FC LDR X9, [X19]
	0x032F2700 LDR X8, [X8]
	0x032F2704 CMP X9, X8
	0x032F2708 B.NE 0x32F2748
	0x032F270C LDRB W8, [X19 + 0x18]
	0x032F2710 CBZ W8, 0x32F2748
	0x032F2714 LDRB W8, [X19 + 0x30]
	0x032F2718 CBNZ W8, 0x32F2768
	0x032F271C LDR X0, [X19 + 0x28]
	0x032F2720 MOVZ W8, 0x1

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x10EB000
	009 Move X24, 0xE0A000
	010 Move W8, [X23+2612]
	011 Move X24, [X24+2008]
	012 Move W19, W3
	013 Move W20, W2
	014 Move X21, X1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xE0A000
	021 Move X0, [X0+2008]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+2612], W8
	025 Move X0, [X24]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X31
	031 Call CancellationToken.get_None
	032 Move X8, [X22]
	033 Move X4, X0
	034 Move X0, X22
	035 Move X1, X21
	036 Move X6, [X8+792]
	037 Move X5, [X8+800]
	038 Move W2, W20
	039 Move W3, W19
	040 Move X20, [X31+48]
	041 Move X19, [X31+56]
	042 Move X22, [X31+32]
	043 Move X21, [X31+40]
	044 Move X24, [X31+16]
	045 Move X23, [X31+24]
	046 Move X30, [X31+64]
	047 CallNoReturn X6

Method: System.Threading.Tasks.Task WriteAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x032F2724 STRB W8, [X19 + 0x30]
	0x032F2728 CBZ X0, 0x32F273C
	0x032F272C LDP X20, X19, [X31 + 0x10]
	0x032F2730 MOV X1, X31
	0x032F2734 LDR X30, [X31], #0x20
	0x032F2738 B 0x32C2440
	0x032F273C LDP X20, X19, [X31 + 0x10]
	0x032F2740 LDR X30, [X31], #0x20
	0x032F2744 RET
	0x032F2748 ADRP X0, 0xE09000
	0x032F274C LDR X0, [X0 + 0x578]
	0x032F2750 BL 0x1C16D08
	0x032F2754 BL 0x1C16F10
	0x032F2758 MOV X19, X0
	0x032F275C ADRP X0, 0xE35000
	0x032F2760 LDR X0, [X0 + 0x210]
	0x032F2764 B 0x32F2784
	0x032F2768 ADRP X0, 0xE09000
	0x032F276C LDR X0, [X0 + 0x578]
	0x032F2770 BL 0x1C16D08
	0x032F2774 BL 0x1C16F10
	0x032F2778 MOV X19, X0
	0x032F277C ADRP X0, 0xE35000
	0x032F2780 LDR X0, [X0 + 0x228]
	0x032F2784 BL 0x1C16D08
	0x032F2788 MOV X1, X0
	0x032F278C MOV X0, X19
	0x032F2790 MOV X2, X31
	0x032F2794 BL 0x3314A68
	0x032F2798 ADRP X0, 0xE35000
	0x032F279C LDR X0, [X0 + 0x230]
	0x032F27A0 BL 0x1C16D08
	0x032F27A4 MOV X1, X0
	0x032F27A8 MOV X0, X19
	0x032F27AC BL 0x1C16DEC
	0x032F27B0 MOV X1, X31
	0x032F27B4 B 0x33C011C
	0x032F27B8 STP X30, X21, [X31 - 0x20]!
	0x032F27BC STP X20, X19, [X31 + 0x10]
	0x032F27C0 ADRP X19, 0x10EA000
	0x032F27C4 ADRP X21, 0xE35000
	0x032F27C8 ADRP X20, 0xE30000
	0x032F27CC LDRB W8, [X19 + 0xA3F]
	0x032F27D0 LDR X21, [X21 + 0x238]
	0x032F27D4 LDR X20, [X20 + 0xD10]
	0x032F27D8 TBNZ X8, 0x0, 0x32F27FC
	0x032F27DC ADRP X0, 0xE35000
	0x032F27E0 LDR X0, [X0 + 0x238]
	0x032F27E4 BL 0x1C16CF4
	0x032F27E8 ADRP X0, 0xE30000
	0x032F27EC LDR X0, [X0 + 0xD10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x10EB000
	009 Move [X31+8], X4
	010 Move X24, 0xE0A000
	011 Move W8, [X23+2613]
	012 Move X24, [X24+2008]
	013 Move W19, W3
	014 Move W20, W2
	015 Move X21, X1
	016 Move X22, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0xE0A000
	022 Move X0, [X0+2008]
	023 Call 0x1C17CF4
	024 Move X0, 0xE03000
	025 Move X0, [X0+1976]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X23+2613], W8
	029 Move X0, [X24]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Add X0, X31, 8
	035 Move X1, X31
	036 Call CancellationToken.get_IsCancellationRequested, X0
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {52}
	041 Move X8, 0xE03000
	042 Move X8, [X8+1976]
	043 Move X19, [X31+8]
	044 Move X0, [X8]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X19
	050 Move X1, X31
	051 Call Task.FromCanceled, X0
	052 Move X0, X22
	053 Move X1, X21
	054 Move W2, W20
	055 Move W3, W19
	056 Call Stream.BeginEndWriteAsync, X0, X1, X2, X3
	057 Move X20, [X31+48]
	058 Move X19, [X31+56]
	059 Move X22, [X31+32]
	060 Move X21, [X31+40]
	061 Move X24, [X31+16]
	062 Move X23, [X31+24]
	063 Move X30, [X31+64]
	064 Return X0

Method: System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory`1<System.Byte> buffer, System.Threading.CancellationToken cancellationToken = null)

Disassembly:
	0x032F299C MOV X1, X31
	0x032F29A0 MOV X3, X31
	0x032F29A4 MOV X21, X0
	0x032F29A8 LDR X2, [X8]
	0x032F29AC BL 0x33E1224
	0x032F29B0 LDR X8, [X23]
	0x032F29B4 LDR X8, [X8 + 0xB8]
	0x032F29B8 STR X21, [X8]
	0x032F29BC LDR X0, [X22]
	0x032F29C0 LDR W8, [X0 + 0xE0]
	0x032F29C4 CBNZ W8, 0x32F29CC
	0x032F29C8 BL 0x1C16DFC
	0x032F29CC MOV X0, X20
	0x032F29D0 MOV X1, X21
	0x032F29D4 MOV X2, X19
	0x032F29D8 LDP X20, X19, [X31 + 0x20]
	0x032F29DC LDP X22, X21, [X31 + 0x10]
	0x032F29E0 MOV X3, X31
	0x032F29E4 LDP X30, X23, [X31], #0x30
	0x032F29E8 B 0x33E4C48
	0x032F29EC LDR X8, [X19 + 0x70]
	0x032F29F0 STR X31, [X19 + 0x70]
	0x032F29F4 CBZ X8, 0x32F2A18
	0x032F29F8 LDR X3, [X8 + 0x18]
	0x032F29FC LDR X0, [X8 + 0x40]
	0x032F2A00 LDR X2, [X8 + 0x28]
	0x032F2A04 MOV X1, X21
	0x032F2A08 LDP X20, X19, [X31 + 0x20]
	0x032F2A0C LDP X22, X21, [X31 + 0x10]
	0x032F2A10 LDP X30, X23, [X31], #0x30
	0x032F2A14 BR X3
	0x032F2A18 BL 0x1C16F20
	0x032F2A1C MOVZ W0, 0x1
	0x032F2A20 RET
	0x032F2A24 MOVZ W0, 0x1
	0x032F2A28 RET
	0x032F2A2C MOVZ W0, 0x1
	0x032F2A30 RET
	0x032F2A34 MOVZ W0, 0x1
	0x032F2A38 RET
	0x032F2A3C MOV X0, X31
	0x032F2A40 RET
	0x032F2A44 MOV X0, X31
	0x032F2A48 RET
	0x032F2A4C RET
	0x032F2A50 MOV X3, X31
	0x032F2A54 B 0x32E3B98
	0x032F2A58 SUB X31, X31, 0x40
	0x032F2A5C STP X30, X23, [X31 + 0x10]
	0x032F2A60 STP X22, X21, [X31 + 0x20]
	0x032F2A64 STP X20, X19, [X31 + 0x30]
	0x032F2A68 ADRP X23, 0x10EA000
	0x032F2A6C STR X3, [X31 + 0x8]
	0x032F2A70 ADRP X22, 0xE09000
	0x032F2A74 LDRB W8, [X23 + 0xA46]
	0x032F2A78 LDR X22, [X22 + 0x7D8]
	0x032F2A7C MOV W19, W2
	0x032F2A80 MOV X20, X1
	0x032F2A84 MOV X21, X0
	0x032F2A88 TBNZ X8, 0x0, 0x32F2AAC
	0x032F2A8C ADRP X0, 0xE09000
	0x032F2A90 LDR X0, [X0 + 0x7D8]
	0x032F2A94 BL 0x1C16CF4
	0x032F2A98 ADRP X0, 0xE02000
	0x032F2A9C LDR X0, [X0 + 0x7B8]
	0x032F2AA0 BL 0x1C16CF4
	0x032F2AA4 MOVZ W8, 0x1
	0x032F2AA8 STRB W8, [X23 + 0xA46]
	0x032F2AAC MOV X0, X21
	0x032F2AB0 MOV X1, X20
	0x032F2AB4 MOV W2, W19
	0x032F2AB8 MOV X3, X31
	0x032F2ABC BL 0x32E3B98
	0x032F2AC0 LDR X0, [X22]
	0x032F2AC4 LDR W8, [X0 + 0xE0]
	0x032F2AC8 CBNZ W8, 0x32F2AD0
	0x032F2ACC BL 0x1C16DFC
	0x032F2AD0 ADRP X19, 0xE02000
	0x032F2AD4 LDR X19, [X19 + 0x7B8]
	0x032F2AD8 ADD X0, X31, 0x8
	0x032F2ADC MOV X1, X31
	0x032F2AE0 BL 0x33DD2B0
	0x032F2AE4 TBZ X0, 0x0, 0x32F2B0C
	0x032F2AE8 LDR X0, [X19]
	0x032F2AEC LDR X19, [X31 + 0x8]
	0x032F2AF0 LDR W8, [X0 + 0xE0]
	0x032F2AF4 CBNZ W8, 0x32F2AFC
	0x032F2AF8 BL 0x1C16DFC
	0x032F2AFC MOV X0, X19
	0x032F2B00 MOV X1, X31
	0x032F2B04 BL 0x33EE044
	0x032F2B08 B 0x32F2B58
	0x032F2B0C LDR X0, [X19]
	0x032F2B10 LDR W8, [X0 + 0xE0]
	0x032F2B14 CBNZ W8, 0x32F2B1C
	0x032F2B18 BL 0x1C16DFC
	0x032F2B1C ADRP X20, 0x10E6000
	0x032F2B20 LDRB W8, [X20 + 0xF1D]
	0x032F2B24 CBNZ W8, 0x32F2B3C
	0x032F2B28 ADRP X0, 0xE02000
	0x032F2B2C LDR X0, [X0 + 0x7B8]
	0x032F2B30 BL 0x1C16CF4
	0x032F2B34 MOVZ W8, 0x1
	0x032F2B38 STRB W8, [X20 + 0xF1D]
	0x032F2B3C LDR X0, [X19]
	0x032F2B40 LDR W8, [X0 + 0xE0]
	0x032F2B44 CBNZ W8, 0x32F2B50
	0x032F2B48 BL 0x1C16DFC
	0x032F2B4C LDR X0, [X19]
	0x032F2B50 LDR X8, [X0 + 0xB8]
	0x032F2B54 LDR X0, [X8 + 0x30]
	0x032F2B58 LDP X20, X19, [X31 + 0x30]
	0x032F2B5C LDP X22, X21, [X31 + 0x20]
	0x032F2B60 LDP X30, X23, [X31 + 0x10]
	0x032F2B64 ADD X31, X31, 0x40
	0x032F2B68 RET
	0x032F2B6C RET
	0x032F2B70 RET
	0x032F2B74 STR X30, [X31 - 0x20]!
	0x032F2B78 STP X20, X19, [X31 + 0x10]
	0x032F2B7C ADRP X19, 0x10EA000
	0x032F2B80 STR X1, [X31 + 0x8]
	0x032F2B84 ADRP X20, 0xE09000
	0x032F2B88 LDRB W8, [X19 + 0xA47]
	0x032F2B8C LDR X20, [X20 + 0x7D8]
	0x032F2B90 TBNZ X8, 0x0, 0x32F2BB4
	0x032F2B94 ADRP X0, 0xE09000
	0x032F2B98 LDR X0, [X0 + 0x7D8]
	0x032F2B9C BL 0x1C16CF4
	0x032F2BA0 ADRP X0, 0xE02000
	0x032F2BA4 LDR X0, [X0 + 0x7B8]
	0x032F2BA8 BL 0x1C16CF4
	0x032F2BAC MOVZ W8, 0x1
	0x032F2BB0 STRB W8, [X19 + 0xA47]
	0x032F2BB4 LDR X0, [X20]
	0x032F2BB8 LDR W8, [X0 + 0xE0]
	0x032F2BBC CBNZ W8, 0x32F2BC4
	0x032F2BC0 BL 0x1C16DFC
	0x032F2BC4 ADRP X19, 0xE02000
	0x032F2BC8 LDR X19, [X19 + 0x7B8]
	0x032F2BCC ADD X0, X31, 0x8
	0x032F2BD0 MOV X1, X31
	0x032F2BD4 BL 0x33DD2B0
	0x032F2BD8 TBZ X0, 0x0, 0x32F2C00
	0x032F2BDC LDR X0, [X19]
	0x032F2BE0 LDR X19, [X31 + 0x8]
	0x032F2BE4 LDR W8, [X0 + 0xE0]
	0x032F2BE8 CBNZ W8, 0x32F2BF0
	0x032F2BEC BL 0x1C16DFC
	0x032F2BF0 MOV X0, X19
	0x032F2BF4 MOV X1, X31
	0x032F2BF8 BL 0x33EE044
	0x032F2BFC B 0x32F2C4C
	0x032F2C00 LDR X0, [X19]
	0x032F2C04 LDR W8, [X0 + 0xE0]
	0x032F2C08 CBNZ W8, 0x32F2C10
	0x032F2C0C BL 0x1C16DFC
	0x032F2C10 ADRP X20, 0x10E6000
	0x032F2C14 LDRB W8, [X20 + 0xF1D]
	0x032F2C18 CBNZ W8, 0x32F2C30
	0x032F2C1C ADRP X0, 0xE02000
	0x032F2C20 LDR X0, [X0 + 0x7B8]
	0x032F2C24 BL 0x1C16CF4
	0x032F2C28 MOVZ W8, 0x1
	0x032F2C2C STRB W8, [X20 + 0xF1D]
	0x032F2C30 LDR X0, [X19]
	0x032F2C34 LDR W8, [X0 + 0xE0]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+40], X2
	003 Move [X31+48], X30
	004 Move [X31+64], X24
	005 Move [X31+72], X23
	006 Move [X31+80], X22
	007 Move [X31+88], X21
	008 Move [X31+96], X20
	009 Move [X31+104], X19
	010 Move X24, 0x10EB000
	011 Move [X31+32], X1
	012 Move X23, 0xE35000
	013 Move W8, [X24+2614]
	014 Move X23, [X23+3336]
	015 Move X19, X3
	016 Move X21, X2
	017 Move X22, X1
	018 Move X20, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {58}
	023 Move X0, 0xE2D000
	024 Move X0, [X0+3408]
	025 Call 0x1C17CF4
	026 Move X0, 0xE2D000
	027 Move X0, [X0+3432]
	028 Call 0x1C17CF4
	029 Move X0, 0xE35000
	030 Move X0, [X0+3312]
	031 Call 0x1C17CF4
	032 Move X0, 0xE35000
	033 Move X0, [X0+3320]
	034 Call 0x1C17CF4
	035 Move X0, 0xE35000
	036 Move X0, [X0+3328]
	037 Call 0x1C17CF4
	038 Move X0, 0xE2A000
	039 Move X0, [X0+1456]
	040 Call 0x1C17CF4
	041 Move X0, 0xE35000
	042 Move X0, [X0+3336]
	043 Call 0x1C17CF4
	044 Move X0, 0xE36000
	045 Move X0, [X0+496]
	046 Call 0x1C17CF4
	047 Move X0, 0xE35000
	048 Move X0, [X0+3456]
	049 Call 0x1C17CF4
	050 Move X0, 0xE35000
	051 Move X0, [X0+3424]
	052 Call 0x1C17CF4
	053 Move X0, 0xE31000
	054 Move X0, [X0+760]
	055 Call 0x1C17CF4
	056 Move W8, 1
	057 Move [X24+2614], W8
	058 Move X3, [X23]
	059 Add X2, X31, 16
	060 Move X0, X22
	061 Move X1, X21
	062 Move [X31+16], X31
	063 Move [X31+24], X31
	064 Move [X31], X31
	065 Move [X31+8], X31
	066 Call 0x2219D10, X0, X1
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {103}
	071 Move X8, 0xE2A000
	072 Move X8, [X8+1456]
	073 Move X0, [X8]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {78}
	077 Call 0x1C17DFC
	078 Move X8, [X20]
	079 Move X1, [X31+16]
	080 Move W2, [X31+24]
	081 Move W3, [X31+28]
	082 Move X0, X20
	083 Move X9, [X8+792]
	084 Move X5, [X8+800]
	085 Move X4, X19
	086 NotImplemented "Instruction BLR not yet implemented."
	087 Compare X0, 0
	088 JumpIfNotEqual {93}
	089 Move W0, 38
	090 Move X1, X31
	091 Call ThrowHelper.ThrowArgumentNullException, X0
	092 Move X0, X31
	093 Move X20, [X31+96]
	094 Move X19, [X31+104]
	095 Move X22, [X31+80]
	096 Move X21, [X31+88]
	097 Move X24, [X31+64]
	098 Move X23, [X31+72]
	099 Move X30, [X31+48]
	100 Move W1, 0x10000
	101 Add X31, X31, 112
	102 Return X0
	103 Move X8, 0xE2D000
	104 Move X8, [X8+3432]
	105 Move X0, [X8]
	106 Move W8, [X0+224]
	107 Compare W8, 0
	108 JumpIfNotEqual {110}
	109 Call 0x1C17DFC
	110 Move X8, 0xE2D000
	111 Move X8, [X8+3408]
	112 Move X21, [X8]
	113 Move X0, [X21+32]
	114 Move W8, [X0+309]
	115 Move TEMP, X8
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfEqual {120}
	119 Call 0x1C5D684
	120 Move X8, [X0+192]
	121 Move X0, [X8+8]
	122 Move W8, [X0+309]
	123 Move TEMP, X8
	124 And TEMP, TEMP, 1
	125 Compare TEMP, 1
	126 JumpIfEqual {128}
	127 Call 0x1C5D684
	128 Move W8, [X0+224]
	129 Compare W8, 0
	130 JumpIfNotEqual {132}
	131 Call 0x1C17DFC
	132 Move X0, [X21+32]
	133 Move W8, [X0+309]
	134 Move TEMP, X8
	135 And TEMP, TEMP, 1
	136 Compare TEMP, 1
	137 JumpIfEqual {139}
	138 Call 0x1C5D684
	139 Move X8, [X0+192]
	140 Move X0, [X8+8]
	141 Move W8, [X0+309]
	142 Move TEMP, X8
	143 And TEMP, TEMP, 1
	144 Compare TEMP, 1
	145 JumpIfEqual {147}
	146 Call 0x1C5D684
	147 Move X22, 0xE36000
	148 Move X8, [X0+184]
	149 Move X22, [X22+496]
	150 Add X0, X31, 32
	151 Move X21, [X8]
	152 Move X1, [X22]
	153 Call 0x25BDEEC, X0
	154 Compare X21, 0
	155 JumpIfEqual {202}
	156 Move X8, [X21]
	157 Move W1, W0
	158 Move X0, X21
	159 Move X9, [X8+376]
	160 Move X2, [X8+384]
	161 NotImplemented "Instruction BLR not yet implemented."
	162 Move X8, 0xE35000
	163 Move X8, [X8+3456]
	164 Move X21, X0
	165 Add X0, X31, 32
	166 Move X1, [X8]
	167 Call 0x25D8918
	168 Move X8, 0xE31000
	169 Move X8, [X8+760]
	170 Move [X31], X0
	171 Move [X31+8], X1
	172 Move X0, X21
	173 Move X8, [X8]
	174 Move X1, X8
	175 Call 0x25FC4C0, X0
	176 Move X8, 0xE35000
	177 Move X8, [X8+3424]
	178 Move X2, X0
	179 Move X4, X1
	180 Add X0, X31, 0
	181 Move X3, [X8]
	182 Move X1, X2
	183 Move X2, X4
	184 Call 0x25BF5D8, X0, X1
	185 Move X1, [X22]
	186 Add X0, X31, 32
	187 Call 0x25BDEEC, X0
	188 Move X8, [X20]
	189 Move W3, W0
	190 Move X0, X20
	191 Move X1, X21
	192 Move X9, [X8+792]
	193 Move X5, [X8+800]
	194 Move W2, W31
	195 Move X4, X19
	196 NotImplemented "Instruction BLR not yet implemented."
	197 Move X1, X0
	198 Move X2, X21
	199 Call Stream.FinishWriteAsync, X0, X1, X2
	200 Compare X0, 0
	201 JumpIfNotEqual {93}
	202 Call 0x1C17F20

Method: System.Threading.Tasks.Task FinishWriteAsync(System.Threading.Tasks.Task writeTask, System.Byte[] localBuffer)

Disassembly:
	0x032F2C38 CBNZ W8, 0x32F2C44
	0x032F2C3C BL 0x1C16DFC
	0x032F2C40 LDR X0, [X19]
	0x032F2C44 LDR X8, [X0 + 0xB8]
	0x032F2C48 LDR X0, [X8 + 0x30]
	0x032F2C4C LDP X20, X19, [X31 + 0x10]
	0x032F2C50 LDR X30, [X31], #0x20
	0x032F2C54 RET
	0x032F2C58 STR X30, [X31 - 0x40]!
	0x032F2C5C STP X24, X23, [X31 + 0x10]
	0x032F2C60 STP X22, X21, [X31 + 0x20]
	0x032F2C64 STP X20, X19, [X31 + 0x30]
	0x032F2C68 LDR X8, [X0]
	0x032F2C6C MOV X24, X1
	0x032F2C70 MOV X19, X5
	0x032F2C74 MOV X20, X4
	0x032F2C78 LDP X9, X8, [X8 + 0x1A8]
	0x032F2C7C MOV W21, W3
	0x032F2C80 MOV W22, W2
	0x032F2C84 MOV X23, X0
	0x032F2C88 MOV X1, X8
	0x032F2C8C BLR X9
	0x032F2C90 TBZ X0, 0x0, 0x32F2CC0
	0x032F2C94 MOV X0, X23
	0x032F2C98 MOV X1, X24
	0x032F2C9C MOV W2, W22
	0x032F2CA0 MOV W3, W21
	0x032F2CA4 MOV X4, X20
	0x032F2CA8 MOV X5, X19
	0x032F2CAC LDP X20, X19, [X31 + 0x30]
	0x032F2CB0 LDP X22, X21, [X31 + 0x20]
	0x032F2CB4 LDP X24, X23, [X31 + 0x10]
	0x032F2CB8 LDR X30, [X31], #0x40
	0x032F2CBC B 0x32F2254
	0x032F2CC0 MOV X0, X31
	0x032F2CC4 BL 0x32E1884
	0x032F2CC8 MOV X19, X0
	0x032F2CCC ADRP X0, 0xE35000
	0x032F2CD0 LDR X0, [X0 + 0x248]
	0x032F2CD4 BL 0x1C16D08
	0x032F2CD8 MOV X1, X0
	0x032F2CDC MOV X0, X19
	0x032F2CE0 BL 0x1C16DEC
	0x032F2CE4 STR X30, [X31 - 0x20]!
	0x032F2CE8 STP X20, X19, [X31 + 0x10]
	0x032F2CEC ADRP X20, 0x10EA000
	0x032F2CF0 LDRB W8, [X20 + 0xA48]
	0x032F2CF4 MOV X19, X1
	0x032F2CF8 TBNZ X8, 0x0, 0x32F2D10
	0x032F2CFC ADRP X0, 0xE30000
	0x032F2D00 LDR X0, [X0 + 0xD10]
	0x032F2D04 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], X30
	003 Move [X31+112], X22
	004 Move [X31+120], X21
	005 Move [X31+128], X20
	006 Move [X31+136], X19
	007 Move X22, 0x10EB000
	008 Move X21, 0xE05000
	009 Move W8, [X22+2615]
	010 Move X21, [X21+640]
	011 Move X19, X2
	012 Move X20, X1
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xE36000
	018 Move X0, [X0+504]
	019 Call 0x1C17CF4
	020 Move X0, 0xE05000
	021 Move X0, [X0+640]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+2615], W8
	025 Move X0, [X21]
	026 NotImplemented "Instruction MOVI not yet implemented."
	027 Move [X31+64], V0
	028 Move [X31+72], V0
	029 Move [X31+32], V0
	030 Move [X31+40], V0
	031 Move [X31+64], X20
	032 Move [X31+72], X19
	033 Move X19, 0xE36000
	034 Move W8, [X0+224]
	035 Move X19, [X19+504]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Add X8, X31, 8
	040 Move X0, X31
	041 Call AsyncTaskMethodBuilder.Create
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 Move X9, [X31+24]
	044 Move X2, [X19]
	045 Add X8, X31, 32
	046 Or X19, X8, 15
	047 Move TEMP, 0
	048 Not TEMP
	049 Move W10, TEMP
	050 Add X1, X31, 32
	051 Move X0, X19
	052 Move [X31+40], V0
	053 Move [X31+56], X9
	054 Move [X31+32], W10
	055 Call AsyncTaskMethodBuilder.Start, X0, X1
	056 Move X0, X19
	057 Move X1, X31
	058 Call AsyncTaskMethodBuilder.get_Task, X0
	059 Move X20, [X31+128]
	060 Move X19, [X31+136]
	061 Move X22, [X31+112]
	062 Move X21, [X31+120]
	063 Move X30, [X31+96]
	064 Add X31, X31, 144
	065 Return X0

Method: System.Threading.Tasks.Task BeginEndWriteAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count)

Disassembly:
	0x032F27F0 BL 0x1C16CF4
	0x032F27F4 MOVZ W8, 0x1
	0x032F27F8 STRB W8, [X19 + 0xA3F]
	0x032F27FC LDR X0, [X21]
	0x032F2800 BL 0x1C16F10
	0x032F2804 MOV X19, X0
	0x032F2808 BL 0x32F2824
	0x032F280C LDR X8, [X20]
	0x032F2810 LDR X8, [X8 + 0xB8]
	0x032F2814 STR X19, [X8]
	0x032F2818 LDP X20, X19, [X31 + 0x10]
	0x032F281C LDP X30, X21, [X31], #0x20
	0x032F2820 RET
	0x032F2824 STP X30, X21, [X31 - 0x20]!
	0x032F2828 STP X20, X19, [X31 + 0x10]
	0x032F282C ADRP X20, 0x10EA000
	0x032F2830 ADRP X21, 0xE30000
	0x032F2834 LDRB W8, [X20 + 0xA45]
	0x032F2838 LDR X21, [X21 + 0xD10]
	0x032F283C MOV X19, X0
	0x032F2840 TBNZ X8, 0x0, 0x32F2858
	0x032F2844 ADRP X0, 0xE30000
	0x032F2848 LDR X0, [X0 + 0xD10]
	0x032F284C BL 0x1C16CF4
	0x032F2850 MOVZ W8, 0x1
	0x032F2854 STRB W8, [X20 + 0xA45]
	0x032F2858 LDR X0, [X21]
	0x032F285C LDR W8, [X0 + 0xE0]
	0x032F2860 CBNZ W8, 0x32F2868
	0x032F2864 BL 0x1C16DFC
	0x032F2868 MOV X0, X19
	0x032F286C LDP X20, X19, [X31 + 0x10]
	0x032F2870 MOV X1, X31
	0x032F2874 LDP X30, X21, [X31], #0x20
	0x032F2878 B 0x33C011C
	0x032F287C STP X31, X31, [X0 + 0x58]
	0x032F2880 RET
	0x032F2884 STR X30, [X31 - 0x20]!
	0x032F2888 STP X20, X19, [X31 + 0x10]
	0x032F288C ADRP X20, 0x10EA000
	0x032F2890 LDRB W8, [X20 + 0xA43]
	0x032F2894 MOV X19, X0
	0x032F2898 TBNZ X8, 0x0, 0x32F28B0
	0x032F289C ADRP X0, 0xE35000
	0x032F28A0 LDR X0, [X0 + 0x128]
	0x032F28A4 BL 0x1C16CF4
	0x032F28A8 MOVZ W8, 0x1
	0x032F28AC STRB W8, [X20 + 0xA43]
	0x032F28B0 CBZ X19, 0x32F28F4
	0x032F28B4 ADRP X8, 0xE35000
	0x032F28B8 LDR X8, [X8 + 0x128]
	0x032F28BC LDR X1, [X8]
	0x032F28C0 LDR X8, [X19]
	0x032F28C4 CMP X8, X1
	0x032F28C8 B.NE 0x32F28F8
	0x032F28CC LDR X8, [X19 + 0x70]
	0x032F28D0 STR X31, [X19 + 0x70]
	0x032F28D4 CBZ X8, 0x32F28F4
	0x032F28D8 LDR X3, [X8 + 0x18]
	0x032F28DC LDR X0, [X8 + 0x40]
	0x032F28E0 LDR X2, [X8 + 0x28]
	0x032F28E4 MOV X1, X19
	0x032F28E8 LDP X20, X19, [X31 + 0x10]
	0x032F28EC LDR X30, [X31], #0x20
	0x032F28F0 BR X3
	0x032F28F4 BL 0x1C16F20
	0x032F28F8 MOV X0, X19
	0x032F28FC BL 0x1C171E0
	0x032F2900 STP X30, X23, [X31 - 0x30]!
	0x032F2904 STP X22, X21, [X31 + 0x10]
	0x032F2908 STP X20, X19, [X31 + 0x20]
	0x032F290C ADRP X20, 0x10EA000
	0x032F2910 LDRB W8, [X20 + 0xA44]
	0x032F2914 MOV X21, X1
	0x032F2918 MOV X19, X0
	0x032F291C TBNZ X8, 0x0, 0x32F2958
	0x032F2920 ADRP X0, 0xE33000
	0x032F2924 LDR X0, [X0 + 0x948]
	0x032F2928 BL 0x1C16CF4
	0x032F292C ADRP X0, 0xE29000
	0x032F2930 LDR X0, [X0 + 0x580]
	0x032F2934 BL 0x1C16CF4
	0x032F2938 ADRP X0, 0xE35000
	0x032F293C LDR X0, [X0 + 0x240]
	0x032F2940 BL 0x1C16CF4
	0x032F2944 ADRP X0, 0xE35000
	0x032F2948 LDR X0, [X0 + 0x128]
	0x032F294C BL 0x1C16CF4
	0x032F2950 MOVZ W8, 0x1
	0x032F2954 STRB W8, [X20 + 0xA44]
	0x032F2958 LDR X20, [X19 + 0x78]
	0x032F295C CBZ X20, 0x32F29EC
	0x032F2960 ADRP X23, 0xE35000
	0x032F2964 LDR X23, [X23 + 0x128]
	0x032F2968 STR X31, [X19 + 0x78]
	0x032F296C ADRP X22, 0xE29000
	0x032F2970 LDR X8, [X23]
	0x032F2974 LDR X8, [X8 + 0xB8]
	0x032F2978 LDR X21, [X8]
	0x032F297C LDR X22, [X22 + 0x580]
	0x032F2980 CBNZ X21, 0x32F29BC
	0x032F2984 ADRP X8, 0xE33000
	0x032F2988 LDR X8, [X8 + 0x948]
	0x032F298C LDR X0, [X8]
	0x032F2990 BL 0x1C16F10
	0x032F2994 ADRP X8, 0xE35000
	0x032F2998 LDR X8, [X8 + 0x240]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X23, 0x10EB000
	012 Move X26, 0xE36000
	013 Move W8, [X23+2616]
	014 Move X26, [X26+216]
	015 Move W19, W3
	016 Move W21, W2
	017 Move X20, X1
	018 Move X22, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {46}
	023 Move X0, 0xE36000
	024 Move X0, [X0+464]
	025 Call 0x1C17CF4
	026 Move X0, 0xE36000
	027 Move X0, [X0+368]
	028 Call 0x1C17CF4
	029 Move X0, 0xE36000
	030 Move X0, [X0+472]
	031 Call 0x1C17CF4
	032 Move X0, 0xE03000
	033 Move X0, [X0+1976]
	034 Call 0x1C17CF4
	035 Move X0, 0xE36000
	036 Move X0, [X0+480]
	037 Call 0x1C17CF4
	038 Move X0, 0xE36000
	039 Move X0, [X0+488]
	040 Call 0x1C17CF4
	041 Move X0, 0xE36000
	042 Move X0, [X0+216]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X23+2616], W8
	046 Move X0, [X26]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {52}
	050 Call 0x1C17DFC
	051 Move X0, [X26]
	052 Move X8, [X0+184]
	053 Move X23, [X8+64]
	054 Compare X23, 0
	055 JumpIfNotEqual {77}
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {61}
	059 Call 0x1C17DFC
	060 Move X0, [X26]
	061 Move X9, 0xE36000
	062 Move X8, [X0+184]
	063 Move X9, [X9+368]
	064 Move X24, [X8]
	065 Move X0, [X9]
	066 Call 0x1C17F10
	067 Move X8, 0xE36000
	068 Move X8, [X8+480]
	069 Move X1, X24
	070 Move X3, X31
	071 Move X23, X0
	072 Move X2, [X8]
	073 Call Func`5<Object, ReadWriteParameters, Object, Object, Object>..ctor, X0, X1, X2
	074 Move X0, [X26]
	075 Move X8, [X0+184]
	076 Move [X8+64], X23
	077 Move W8, [X0+224]
	078 Compare W8, 0
	079 JumpIfNotEqual {82}
	080 Call 0x1C17DFC
	081 Move X0, [X26]
	082 Move X8, [X0+184]
	083 Move X27, 0xE36000
	084 Move X24, [X8+72]
	085 Move X27, [X27+472]
	086 Compare X24, 0
	087 JumpIfNotEqual {109}
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {93}
	091 Call 0x1C17DFC
	092 Move X0, [X26]
	093 Move X9, 0xE36000
	094 Move X8, [X0+184]
	095 Move X9, [X9+464]
	096 Move X25, [X8]
	097 Move X0, [X9]
	098 Call 0x1C17F10
	099 Move X8, 0xE36000
	100 Move X8, [X8+488]
	101 Move X1, X25
	102 Move X3, X31
	103 Move X24, X0
	104 Move X2, [X8]
	105 Call Func`3<Object, Object, VoidTaskResult>..ctor, X0, X1, X2
	106 Move X8, [X26]
	107 Move X8, [X8+184]
	108 Move [X8+72], X24
	109 Move W2, W21
	110 Move X5, [X27]
	111 NotImplemented "Instruction BFM not yet implemented."
	112 Move X0, X22
	113 Move X1, X20
	114 Move X3, X23
	115 Move X4, X24
	116 Move X20, [X31+64]
	117 Move X19, [X31+72]
	118 Move X22, [X31+48]
	119 Move X21, [X31+56]
	120 Move X24, [X31+32]
	121 Move X23, [X31+40]
	122 Move X26, [X31+16]
	123 Move X25, [X31+24]
	124 Move X30, [X31+80]
	125 Move X27, [X31+88]
	126 Call TaskFactory`1<VoidTaskResult>.FromAsyncTrim, X0, X1, X2, X3
	127 Return X0

Method: System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void SetLength(System.Int64 value)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Int32 Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Int32 Read(System.Span`1<System.Byte> buffer)

Disassembly:
	0x032F2D10 CBZ X19, 0x32F2D3C
	0x032F2D14 ADRP X8, 0xE30000
	0x032F2D18 LDR X8, [X8 + 0xD10]
	0x032F2D1C LDR X0, [X8]
	0x032F2D20 LDR W8, [X0 + 0xE0]
	0x032F2D24 CBNZ W8, 0x32F2D2C
	0x032F2D28 BL 0x1C16DFC
	0x032F2D2C MOV X0, X19
	0x032F2D30 LDP X20, X19, [X31 + 0x10]
	0x032F2D34 LDR X30, [X31], #0x20
	0x032F2D38 B 0x32F2444
	0x032F2D3C ADRP X0, 0xE06000
	0x032F2D40 LDR X0, [X0 + 0x528]
	0x032F2D44 BL 0x1C16D08
	0x032F2D48 BL 0x1C16F10
	0x032F2D4C MOV X19, X0
	0x032F2D50 ADRP X0, 0xE2C000
	0x032F2D54 LDR X0, [X0 + 0xDD0]
	0x032F2D58 BL 0x1C16D08
	0x032F2D5C MOV X1, X0
	0x032F2D60 MOV X0, X19
	0x032F2D64 MOV X2, X31
	0x032F2D68 BL 0x330E100
	0x032F2D6C ADRP X0, 0xE35000
	0x032F2D70 LDR X0, [X0 + 0x250]
	0x032F2D74 BL 0x1C16D08
	0x032F2D78 MOV X1, X0
	0x032F2D7C MOV X0, X19
	0x032F2D80 BL 0x1C16DEC
	0x032F2D84 STR X30, [X31 - 0x40]!
	0x032F2D88 STP X24, X23, [X31 + 0x10]
	0x032F2D8C STP X22, X21, [X31 + 0x20]
	0x032F2D90 STP X20, X19, [X31 + 0x30]
	0x032F2D94 LDR X8, [X0]
	0x032F2D98 MOV X24, X1
	0x032F2D9C MOV X19, X5
	0x032F2DA0 MOV X20, X4
	0x032F2DA4 LDP X9, X8, [X8 + 0x1D8]
	0x032F2DA8 MOV W21, W3
	0x032F2DAC MOV W22, W2
	0x032F2DB0 MOV X23, X0
	0x032F2DB4 MOV X1, X8
	0x032F2DB8 BLR X9
	0x032F2DBC TBZ X0, 0x0, 0x32F2DEC
	0x032F2DC0 MOV X0, X23
	0x032F2DC4 MOV X1, X24
	0x032F2DC8 MOV W2, W22
	0x032F2DCC MOV W3, W21
	0x032F2DD0 MOV X4, X20
	0x032F2DD4 MOV X5, X19
	0x032F2DD8 LDP X20, X19, [X31 + 0x30]
	0x032F2DDC LDP X22, X21, [X31 + 0x20]
	0x032F2DE0 LDP X24, X23, [X31 + 0x10]
	0x032F2DE4 LDR X30, [X31], #0x40
	0x032F2DE8 B 0x32F252C
	0x032F2DEC MOV X0, X31
	0x032F2DF0 BL 0x32E18F0
	0x032F2DF4 MOV X19, X0
	0x032F2DF8 ADRP X0, 0xE35000
	0x032F2DFC LDR X0, [X0 + 0x258]
	0x032F2E00 BL 0x1C16D08
	0x032F2E04 MOV X1, X0
	0x032F2E08 MOV X0, X19
	0x032F2E0C BL 0x1C16DEC
	0x032F2E10 STR X30, [X31 - 0x20]!
	0x032F2E14 STP X20, X19, [X31 + 0x10]
	0x032F2E18 ADRP X20, 0x10EA000
	0x032F2E1C LDRB W8, [X20 + 0xA49]
	0x032F2E20 MOV X19, X1
	0x032F2E24 TBNZ X8, 0x0, 0x32F2E3C
	0x032F2E28 ADRP X0, 0xE30000
	0x032F2E2C LDR X0, [X0 + 0xD10]
	0x032F2E30 BL 0x1C16CF4
	0x032F2E34 MOVZ W8, 0x1
	0x032F2E38 STRB W8, [X20 + 0xA49]
	0x032F2E3C CBZ X19, 0x32F2E68
	0x032F2E40 ADRP X8, 0xE30000
	0x032F2E44 LDR X8, [X8 + 0xD10]
	0x032F2E48 LDR X0, [X8]
	0x032F2E4C LDR W8, [X0 + 0xE0]
	0x032F2E50 CBNZ W8, 0x32F2E58
	0x032F2E54 BL 0x1C16DFC
	0x032F2E58 MOV X0, X19
	0x032F2E5C LDP X20, X19, [X31 + 0x10]
	0x032F2E60 LDR X30, [X31], #0x20
	0x032F2E64 B 0x32F26C4
	0x032F2E68 ADRP X0, 0xE06000
	0x032F2E6C LDR X0, [X0 + 0x528]
	0x032F2E70 BL 0x1C16D08
	0x032F2E74 BL 0x1C16F10
	0x032F2E78 MOV X19, X0
	0x032F2E7C ADRP X0, 0xE2C000
	0x032F2E80 LDR X0, [X0 + 0xDD0]
	0x032F2E84 BL 0x1C16D08
	0x032F2E88 MOV X1, X0
	0x032F2E8C MOV X0, X19
	0x032F2E90 MOV X2, X31
	0x032F2E94 BL 0x330E100
	0x032F2E98 ADRP X0, 0xE35000
	0x032F2E9C LDR X0, [X0 + 0x260]
	0x032F2EA0 BL 0x1C16D08
	0x032F2EA4 MOV X1, X0
	0x032F2EA8 MOV X0, X19
	0x032F2EAC BL 0x1C16DEC
	0x032F2EB0 MOV W0, W31
	0x032F2EB4 RET
	0x032F2EB8 MOV W0, W31
	0x032F2EBC RET
	0x032F2EC0 STR X30, [X31 - 0x20]!
	0x032F2EC4 STP X20, X19, [X31 + 0x10]
	0x032F2EC8 ADRP X20, 0x10EA000
	0x032F2ECC ADRP X19, 0xE35000
	0x032F2ED0 LDRB W8, [X20 + 0xA4A]
	0x032F2ED4 LDR X19, [X19 + 0x238]
	0x032F2ED8 TBNZ X8, 0x0, 0x32F2EF0
	0x032F2EDC ADRP X0, 0xE35000
	0x032F2EE0 LDR X0, [X0 + 0x238]
	0x032F2EE4 BL 0x1C16CF4
	0x032F2EE8 MOVZ W8, 0x1
	0x032F2EEC STRB W8, [X20 + 0xA4A]
	0x032F2EF0 LDR X0, [X19]
	0x032F2EF4 LDR W8, [X0 + 0xE0]
	0x032F2EF8 CBNZ W8, 0x32F2F04
	0x032F2EFC BL 0x1C16DFC
	0x032F2F00 LDR X0, [X19]
	0x032F2F04 LDR X8, [X0 + 0xB8]
	0x032F2F08 LDP X20, X19, [X31 + 0x10]
	0x032F2F0C LDR X0, [X8]
	0x032F2F10 LDR X30, [X31], #0x20
	0x032F2F14 RET
	0x032F2F18 STP X30, X19, [X31 - 0x10]!
	0x032F2F1C ADRP X19, 0x10EA000
	0x032F2F20 LDRB W8, [X19 + 0xA4B]
	0x032F2F24 TBNZ X8, 0x0, 0x32F2F3C
	0x032F2F28 ADRP X0, 0xE34000
	0x032F2F2C LDR X0, [X0 + 0xD18]
	0x032F2F30 BL 0x1C16CF4
	0x032F2F34 MOVZ W8, 0x1
	0x032F2F38 STRB W8, [X19 + 0xA4B]
	0x032F2F3C MOVZ X1, 0x10000
	0x032F2F40 MOV X0, X31
	0x032F2F44 LDP X30, X19, [X31], #0x10
	0x032F2F48 RET
	0x032F2F4C MOVN W0, 0x0
	0x032F2F50 RET
	0x032F2F54 RET
	0x032F2F58 RET
	0x032F2F5C STR X30, [X31 - 0x20]!
	0x032F2F60 STP X20, X19, [X31 + 0x10]
	0x032F2F64 ADRP X19, 0x10EA000
	0x032F2F68 STR X4, [X31 + 0x8]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+56], X23
	004 Move [X31+64], X22
	005 Move [X31+72], X21
	006 Move [X31+80], X20
	007 Move [X31+88], X19
	008 Move X23, 0x10EB000
	009 Move X22, 0xE2D000
	010 Move W8, [X23+2617]
	011 Move X22, [X22+3432]
	012 Move X19, X2
	013 Move X20, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {36}
	019 Move X0, 0xE2D000
	020 Move X0, [X0+3408]
	021 Call 0x1C17CF4
	022 Move X0, 0xE2D000
	023 Move X0, [X0+3432]
	024 Call 0x1C17CF4
	025 Move X0, 0xE2D000
	026 Move X0, [X0+744]
	027 Call 0x1C17CF4
	028 Move X0, 0xE31000
	029 Move X0, [X0+3680]
	030 Call 0x1C17CF4
	031 Move X0, 0xE31000
	032 Move X0, [X0+2344]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X23+2617], W8
	036 Move X0, [X22]
	037 Move [X31+32], X31
	038 Move [X31+40], X31
	039 Move [X31+24], X31
	040 Move X22, 0xE2D000
	041 Move W8, [X0+224]
	042 Move X22, [X22+3408]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move X22, [X22]
	047 Move X0, [X22+32]
	048 Move W8, [X0+309]
	049 Move TEMP, X8
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfEqual {54}
	053 Call 0x1C5D684
	054 Move X8, [X0+192]
	055 Move X0, [X8+8]
	056 Move W8, [X0+309]
	057 Move TEMP, X8
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfEqual {62}
	061 Call 0x1C5D684
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X0, [X22+32]
	067 Move W8, [X0+309]
	068 Move TEMP, X8
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfEqual {73}
	072 Call 0x1C5D684
	073 Move X8, [X0+192]
	074 Move X0, [X8+8]
	075 Move W8, [X0+309]
	076 Move TEMP, X8
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfEqual {81}
	080 Call 0x1C5D684
	081 Move X8, [X0+184]
	082 Move X0, [X8]
	083 Compare X0, 0
	084 JumpIfEqual {141}
	085 Move X8, [X0]
	086 Move W1, W19
	087 Move X9, [X8+376]
	088 Move X2, [X8+384]
	089 NotImplemented "Instruction BLR not yet implemented."
	090 Add X8, X31, 40
	091 Move [X31+40], X0
	092 Move [X31+8], X31
	093 Move [X31+16], X8
	094 Move X8, [X21]
	095 Move X1, X0
	096 Move X9, [X8+856]
	097 Move X4, [X8+864]
	098 Move X0, X21
	099 Move W2, W31
	100 Move W3, W19
	101 NotImplemented "Instruction BLR not yet implemented."
	102 Move W8, W0
	103 Move W21, W0
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move X22, [X31+40]
	106 Compare X22, 0
	107 JumpIfEqual {114}
	108 Move W8, [X22+24]
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Move X0, X31
	111 Call ThrowHelper.ThrowArgumentOutOfRangeException
	112 Add X8, X22, 32
	113 Move W9, W21
	114 Compare W21, 0
	115 JumpIfEqual {118}
	116 Move X0, X31
	117 Call ThrowHelper.ThrowArgumentOutOfRangeException
	118 Move X8, X31
	119 Move W9, W31
	120 Move X10, 0xE2D000
	121 Move X10, [X10+744]
	122 Move [X31+24], X8
	123 Move [X31+32], W9
	124 Move [X31+36], W31
	125 Move X3, [X10]
	126 Add X0, X31, 24
	127 Move X1, X20
	128 Move X2, X19
	129 Call 0x25FBF94, X0, X1
	130 Add X0, X31, 8
	131 Call 0x1BB4A54
	132 Move W0, W21
	133 Move X20, [X31+80]
	134 Move X19, [X31+88]
	135 Move X22, [X31+64]
	136 Move X21, [X31+72]
	137 Move X30, [X31+48]
	138 Move X23, [X31+56]
	139 Add X31, X31, 96
	140 Return X0
	141 Call 0x1C17F20
	142 Move X0, 0xE30000
	143 Move X0, [X0+1960]
	144 Call 0x1C17D08
	145 Call 0x1C17F10
	146 Move X19, X0
	147 Move X0, 0xE35000
	148 Move X0, [X0+3176]
	149 Call 0x1C17D08
	150 Move X1, X0
	151 Move X0, X19
	152 Move X2, X31
	153 Call IOException..ctor, X0, X1
	154 Move X0, 0xE36000
	155 Move X0, [X0+512]
	156 Call 0x1C17D08
	157 Move X1, X0
	158 Move X0, X19
	159 Call 0x1C17DEC
	160 Move X19, X0
	161 NotImplemented "Instruction CMP not yet implemented."
	162 Move X0, X19
	163 Call 0x3EB2AD0
	164 Move X8, [X0]
	165 Move [X31+8], X8
	166 Call 0x3EB2AE0
	167 Move W21, W31
	168 Move X19, X0
	169 Add X0, X31, 8
	170 Call 0x1BB4A54
	171 Move X0, X19
	172 Call 0x1D2D690
	173 Call 0x1991590

Method: System.Int32 ReadByte()

Disassembly:
	0x032F2F6C ADRP X20, 0xE09000
	0x032F2F70 LDRB W8, [X19 + 0xA4C]
	0x032F2F74 LDR X20, [X20 + 0x7D8]
	0x032F2F78 TBNZ X8, 0x0, 0x32F2F9C
	0x032F2F7C ADRP X0, 0xE09000
	0x032F2F80 LDR X0, [X0 + 0x7D8]
	0x032F2F84 BL 0x1C16CF4
	0x032F2F88 ADRP X0, 0xE02000
	0x032F2F8C LDR X0, [X0 + 0x7B8]
	0x032F2F90 BL 0x1C16CF4
	0x032F2F94 MOVZ W8, 0x1
	0x032F2F98 STRB W8, [X19 + 0xA4C]
	0x032F2F9C LDR X0, [X20]
	0x032F2FA0 LDR W8, [X0 + 0xE0]
	0x032F2FA4 CBNZ W8, 0x32F2FAC
	0x032F2FA8 BL 0x1C16DFC
	0x032F2FAC ADRP X19, 0xE02000
	0x032F2FB0 LDR X19, [X19 + 0x7B8]
	0x032F2FB4 ADD X0, X31, 0x8
	0x032F2FB8 MOV X1, X31
	0x032F2FBC BL 0x33DD2B0
	0x032F2FC0 TBZ X0, 0x0, 0x32F2FE8
	0x032F2FC4 LDR X0, [X19]
	0x032F2FC8 LDR X19, [X31 + 0x8]
	0x032F2FCC LDR W8, [X0 + 0xE0]
	0x032F2FD0 CBNZ W8, 0x32F2FD8
	0x032F2FD4 BL 0x1C16DFC
	0x032F2FD8 MOV X0, X19
	0x032F2FDC MOV X1, X31
	0x032F2FE0 BL 0x33EE044
	0x032F2FE4 B 0x32F3034
	0x032F2FE8 LDR X0, [X19]
	0x032F2FEC LDR W8, [X0 + 0xE0]
	0x032F2FF0 CBNZ W8, 0x32F2FF8
	0x032F2FF4 BL 0x1C16DFC
	0x032F2FF8 ADRP X20, 0x10E6000
	0x032F2FFC LDRB W8, [X20 + 0xF1D]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x10EB000
	006 Move X21, 0xE02000
	007 Move W8, [X20+2618]
	008 Move X21, [X21+1560]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE02000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2618], W8
	019 Move X0, [X21]
	020 Move W1, 1
	021 Call 0x1C17D6C
	022 Move X8, [X19]
	023 Move X20, X0
	024 Move W3, 1
	025 Move X0, X19
	026 Move X9, [X8+856]
	027 Move X4, [X8+864]
	028 Move X1, X20
	029 Move W2, W31
	030 NotImplemented "Instruction BLR not yet implemented."
	031 Compare W0, 0
	032 JumpIfEqual {39}
	033 Compare X20, 0
	034 JumpIfEqual {47}
	035 Move W8, [X20+24]
	036 Compare W8, 0
	037 JumpIfEqual {48}
	038 Move W0, [X20+32]
	039 Move TEMP, 0
	040 Not TEMP
	041 Move W0, TEMP
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Move X21, [X31+40]
	046 Return X0
	047 Call 0x1C17F20
	048 Call 0x1C17F28

Method: System.Void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void Write(System.ReadOnlySpan`1<System.Byte> buffer)

Disassembly:
	0x032F3000 CBNZ W8, 0x32F3018
	0x032F3004 ADRP X0, 0xE01000
	0x032F3008 LDR X0, [X0 + 0x7B8]
	0x032F300C BL 0x1C16CF4
	0x032F3010 MOVZ W8, 0x1
	0x032F3014 STRB W8, [X20 + 0xF1D]
	0x032F3018 LDR X0, [X19]
	0x032F301C LDR W8, [X0 + 0xE0]
	0x032F3020 CBNZ W8, 0x32F302C
	0x032F3024 BL 0x1C16DFC
	0x032F3028 LDR X0, [X19]
	0x032F302C LDR X8, [X0 + 0xB8]
	0x032F3030 LDR X0, [X8 + 0x30]
	0x032F3034 LDP X20, X19, [X31 + 0x10]
	0x032F3038 LDR X30, [X31], #0x20
	0x032F303C RET
	0x032F3040 STR X30, [X31 - 0x20]!
	0x032F3044 STP X20, X19, [X31 + 0x10]
	0x032F3048 ADRP X19, 0x10E9000
	0x032F304C STR X3, [X31 + 0x8]
	0x032F3050 ADRP X20, 0xE08000
	0x032F3054 LDRB W8, [X19 + 0xA4D]
	0x032F3058 LDR X20, [X20 + 0x7D8]
	0x032F305C TBNZ X8, 0x0, 0x32F3080
	0x032F3060 ADRP X0, 0xE08000
	0x032F3064 LDR X0, [X0 + 0x7D8]
	0x032F3068 BL 0x1C16CF4
	0x032F306C ADRP X0, 0xE01000
	0x032F3070 LDR X0, [X0 + 0x7B8]
	0x032F3074 BL 0x1C16CF4
	0x032F3078 MOVZ W8, 0x1
	0x032F307C STRB W8, [X19 + 0xA4D]
	0x032F3080 LDR X0, [X20]
	0x032F3084 LDR W8, [X0 + 0xE0]
	0x032F3088 CBNZ W8, 0x32F3090
	0x032F308C BL 0x1C16DFC
	0x032F3090 ADD X0, X31, 0x8
	0x032F3094 MOV X1, X31
	0x032F3098 BL 0x33DD2B0
	0x032F309C MOV X19, X31
	0x032F30A0 MOV X1, X31
	0x032F30A4 TBZ X0, 0x0, 0x32F30E8
	0x032F30A8 ADRP X8, 0xE01000
	0x032F30AC LDR X8, [X8 + 0x7B8]
	0x032F30B0 LDR X19, [X31 + 0x8]
	0x032F30B4 LDR X0, [X8]
	0x032F30B8 LDR W8, [X0 + 0xE0]
	0x032F30BC CBNZ W8, 0x32F30C4
	0x032F30C0 BL 0x1C16DFC
	0x032F30C4 MOV X0, X19
	0x032F30C8 MOV X1, X31
	0x032F30CC BL 0x33EE044
	0x032F30D0 MOV X19, X0
	0x032F30D4 CBNZ X0, 0x32F30E4
	0x032F30D8 MOVZ W0, 0x26
	0x032F30DC MOV X1, X31
	0x032F30E0 BL 0x338F3E0
	0x032F30E4 MOVZ W1, 0x10000
	0x032F30E8 MOV X0, X19
	0x032F30EC LDP X20, X19, [X31 + 0x10]
	0x032F30F0 LDR X30, [X31], #0x20
	0x032F30F4 RET
	0x032F30F8 RET
	0x032F30FC MOV X0, X31
	0x032F3100 RET
	0x032F3104 RET
	0x032F3108 STR X30, [X31 - 0x20]!
	0x032F310C STP X20, X19, [X31 + 0x10]
	0x032F3110 ADRP X20, 0x10E9000
	0x032F3114 ADRP X19, 0xE01000
	0x032F3118 LDRB W8, [X20 + 0xA4E]
	0x032F311C LDR X19, [X19 + 0x7B8]
	0x032F3120 TBNZ X8, 0x0, 0x32F3150
	0x032F3124 ADRP X0, 0xE34000
	0x032F3128 LDR X0, [X0 + 0x238]
	0x032F312C BL 0x1C16CF4
	0x032F3130 ADRP X0, 0xE33000
	0x032F3134 LDR X0, [X0 + 0xCD0]
	0x032F3138 BL 0x1C16CF4
	0x032F313C ADRP X0, 0xE01000
	0x032F3140 LDR X0, [X0 + 0x7B8]
	0x032F3144 BL 0x1C16CF4
	0x032F3148 MOVZ W8, 0x1
	0x032F314C STRB W8, [X20 + 0xA4E]
	0x032F3150 LDR X0, [X19]
	0x032F3154 ADRP X20, 0xE33000
	0x032F3158 ADRP X19, 0xE34000
	0x032F315C LDR W8, [X0 + 0xE0]
	0x032F3160 LDR X20, [X20 + 0xCD0]
	0x032F3164 LDR X19, [X19 + 0x238]
	0x032F3168 CBNZ W8, 0x32F3170
	0x032F316C BL 0x1C16DFC
	0x032F3170 LDR X1, [X20]
	0x032F3174 MOV W0, W31
	0x032F3178 BL 0x229A250
	0x032F317C LDR X8, [X19]
	0x032F3180 LDP X20, X19, [X31 + 0x10]
	0x032F3184 LDR X8, [X8 + 0xB8]
	0x032F3188 STR X0, [X8]
	0x032F318C LDR X30, [X31], #0x20
	0x032F3190 RET
	0x032F3194 MOVZ W0, 0x1
	0x032F3198 RET
	0x032F319C STP X30, X23, [X31 - 0x30]!
	0x032F31A0 STP X22, X21, [X31 + 0x10]
	0x032F31A4 STP X20, X19, [X31 + 0x20]
	0x032F31A8 ADRP X20, 0x10E9000
	0x032F31AC ADRP X22, 0xE34000
	0x032F31B0 LDRB W8, [X20 + 0xA4F]
	0x032F31B4 LDR X22, [X22 + 0x268]
	0x032F31B8 MOV X19, X0
	0x032F31BC TBNZ X8, 0x0, 0x32F31F8
	0x032F31C0 ADRP X0, 0xE34000
	0x032F31C4 LDR X0, [X0 + 0x270]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+24], X2
	003 Move [X31+32], X30
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X22, 0x10EA000
	009 Move [X31+16], X1
	010 Move X21, 0xE2C000
	011 Move W8, [X22+2619]
	012 Move X21, [X21+3432]
	013 Move X20, X2
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {36}
	019 Move X0, 0xE2C000
	020 Move X0, [X0+3408]
	021 Call 0x1C17CF4
	022 Move X0, 0xE2C000
	023 Move X0, [X0+3432]
	024 Call 0x1C17CF4
	025 Move X0, 0xE34000
	026 Move X0, [X0+3424]
	027 Call 0x1C17CF4
	028 Move X0, 0xE30000
	029 Move X0, [X0+2752]
	030 Call 0x1C17CF4
	031 Move X0, 0xE30000
	032 Move X0, [X0+760]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X22+2619], W8
	036 Move X0, [X21]
	037 Move [X31+40], X31
	038 Move X21, 0xE2C000
	039 Move W8, [X0+224]
	040 Move X21, [X21+3408]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X21, [X21]
	045 Move X0, [X21+32]
	046 Move W8, [X0+309]
	047 Move TEMP, X8
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfEqual {52}
	051 Call 0x1C5D684
	052 Move X8, [X0+192]
	053 Move X0, [X8+8]
	054 Move W8, [X0+309]
	055 Move TEMP, X8
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfEqual {60}
	059 Call 0x1C5D684
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Move X0, [X21+32]
	065 Move W8, [X0+309]
	066 Move TEMP, X8
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfEqual {71}
	070 Call 0x1C5D684
	071 Move X8, [X0+192]
	072 Move X0, [X8+8]
	073 Move W8, [X0+309]
	074 Move TEMP, X8
	075 And TEMP, TEMP, 1
	076 Compare TEMP, 1
	077 JumpIfEqual {79}
	078 Call 0x1C5D684
	079 Move X8, [X0+184]
	080 Move X0, [X8]
	081 Compare X0, 0
	082 JumpIfEqual {122}
	083 Move X8, [X0]
	084 Move X21, 0xE30000
	085 Move W1, W20
	086 Move X9, [X8+376]
	087 Move X2, [X8+384]
	088 Move X21, [X21+760]
	089 NotImplemented "Instruction BLR not yet implemented."
	090 Move X1, [X21]
	091 Add X8, X31, 40
	092 Move [X31+40], X0
	093 Move [X31], X31
	094 Move [X31+8], X8
	095 Call 0x25FC4C0, X0
	096 Move X8, 0xE34000
	097 Move X8, [X8+3424]
	098 Move X2, X0
	099 Move X4, X1
	100 Move X3, [X8]
	101 Add X0, X31, 16
	102 Move X1, X2
	103 Move X2, X4
	104 Call 0x25BF5D8, X0, X1
	105 Move X8, [X19]
	106 Move X1, [X31+40]
	107 Move W3, [X31+24]
	108 Move X9, [X8+904]
	109 Move X4, [X8+912]
	110 Move X0, X19
	111 Move W2, W31
	112 NotImplemented "Instruction BLR not yet implemented."
	113 Add X0, X31, 0
	114 Call 0x1BB4A54
	115 Move X20, [X31+64]
	116 Move X19, [X31+72]
	117 Move X22, [X31+48]
	118 Move X21, [X31+56]
	119 Move X30, [X31+32]
	120 Add X31, X31, 80
	121 Return 
	122 Call 0x1C17F20
	123 Move X19, X0
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move X0, X19
	126 Call 0x3EB2AD0
	127 Move X8, [X0]
	128 Move [X31], X8
	129 Call 0x3EB2AE0
	130 Move X19, X0
	131 Add X0, X31, 0
	132 Call 0x1BB4A54
	133 Move X0, X19
	134 Call 0x1D2D690
	135 Call 0x1991590

Method: System.Void WriteByte(System.Byte value)

Disassembly:
	0x032F31C8 BL 0x1C16CF4
	0x032F31CC ADRP X0, 0xE34000
	0x032F31D0 LDR X0, [X0 + 0x278]
	0x032F31D4 BL 0x1C16CF4
	0x032F31D8 ADRP X0, 0xE34000
	0x032F31DC LDR X0, [X0 + 0x280]
	0x032F31E0 BL 0x1C16CF4
	0x032F31E4 ADRP X0, 0xE34000
	0x032F31E8 LDR X0, [X0 + 0x268]
	0x032F31EC BL 0x1C16CF4
	0x032F31F0 MOVZ W8, 0x1
	0x032F31F4 STRB W8, [X20 + 0xA4F]
	0x032F31F8 LDR X0, [X22]
	0x032F31FC LDR W8, [X0 + 0xE0]
	0x032F3200 CBNZ W8, 0x32F320C
	0x032F3204 BL 0x1C16DFC
	0x032F3208 LDR X0, [X22]
	0x032F320C LDR X8, [X0 + 0xB8]
	0x032F3210 ADRP X23, 0xE34000
	0x032F3214 LDR X20, [X8 + 0x8]
	0x032F3218 LDR X23, [X23 + 0x278]
	0x032F321C CBNZ X20, 0x32F3270
	0x032F3220 LDR W8, [X0 + 0xE0]
	0x032F3224 CBNZ W8, 0x32F3230
	0x032F3228 BL 0x1C16DFC
	0x032F322C LDR X0, [X22]
	0x032F3230 ADRP X9, 0xE34000
	0x032F3234 LDR X8, [X0 + 0xB8]
	0x032F3238 LDR X9, [X9 + 0x270]
	0x032F323C LDR X21, [X8]
	0x032F3240 LDR X0, [X9]
	0x032F3244 BL 0x1C16F10
	0x032F3248 ADRP X8, 0xE34000
	0x032F324C LDR X8, [X8 + 0x280]
	0x032F3250 MOV X1, X21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x10EA000
	007 Move X22, 0xE01000
	008 Move W8, [X21+2620]
	009 Move X22, [X22+1560]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xE01000
	017 Move X0, [X0+1560]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2620], W8
	021 Move X0, [X22]
	022 Move W1, 1
	023 Call 0x1C17D6C
	024 Compare X0, 0
	025 JumpIfEqual {43}
	026 Move W8, [X0+24]
	027 Move X1, X0
	028 Compare W8, 0
	029 JumpIfEqual {44}
	030 Move [X1+32], W20
	031 Move X8, [X19]
	032 Move X0, X19
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X5, [X8+904]
	038 Move X4, [X8+912]
	039 Move W3, 1
	040 Move W2, W31
	041 Move X30, [X31+48]
	042 CallNoReturn X5
	043 Call 0x1C17F20
	044 Call 0x1C17F28

Method: System.IAsyncResult BlockingBeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)

Disassembly:
	0x032F3254 MOV X3, X31
	0x032F3258 MOV X20, X0
	0x032F325C LDR X2, [X8]
	0x032F3260 BL 0x2D27AA8
	0x032F3264 LDR X8, [X22]
	0x032F3268 LDR X8, [X8 + 0xB8]
	0x032F326C STR X20, [X8 + 0x8]
	0x032F3270 LDR X2, [X23]
	0x032F3274 ADD X0, X19, 0x20
	0x032F3278 MOV X1, X20
	0x032F327C LDP X20, X19, [X31 + 0x20]
	0x032F3280 LDP X22, X21, [X31 + 0x10]
	0x032F3284 LDP X30, X23, [X31], #0x30
	0x032F3288 B 0x2212A40
	0x032F328C LDR X0, [X0 + 0x10]
	0x032F3290 RET
	0x032F3294 MOVZ W0, 0x1
	0x032F3298 RET
	0x032F329C LDR X0, [X0 + 0x28]
	0x032F32A0 CBZ X0, 0x32F32AC
	0x032F32A4 MOV X1, X31
	0x032F32A8 B 0x32C2440
	0x032F32AC RET
	0x032F32B0 STR X30, [X31 - 0x20]!
	0x032F32B4 STP X20, X19, [X31 + 0x10]
	0x032F32B8 ADRP X19, 0x10E9000
	0x032F32BC ADRP X20, 0xE34000
	0x032F32C0 LDRB W8, [X19 + 0xA52]
	0x032F32C4 LDR X20, [X20 + 0x268]
	0x032F32C8 TBNZ X8, 0x0, 0x32F32E0
	0x032F32CC ADRP X0, 0xE34000
	0x032F32D0 LDR X0, [X0 + 0x268]
	0x032F32D4 BL 0x1C16CF4
	0x032F32D8 MOVZ W8, 0x1
	0x032F32DC STRB W8, [X19 + 0xA52]
	0x032F32E0 LDR X0, [X20]
	0x032F32E4 BL 0x1C16F10
	0x032F32E8 MOV X1, X31
	0x032F32EC MOV X19, X0
	0x032F32F0 BL 0x33BDD8C
	0x032F32F4 LDR X8, [X20]
	0x032F32F8 LDR X8, [X8 + 0xB8]
	0x032F32FC STR X19, [X8]
	0x032F3300 LDP X20, X19, [X31 + 0x10]
	0x032F3304 LDR X30, [X31], #0x20
	0x032F3308 RET
	0x032F330C MOV X1, X31
	0x032F3310 B 0x33BDD8C
	0x032F3314 STR X30, [X31 - 0x20]!
	0x032F3318 STP X20, X19, [X31 + 0x10]
	0x032F331C ADRP X19, 0x10E9000
	0x032F3320 ADRP X20, 0xE31000
	0x032F3324 LDRB W8, [X19 + 0xA53]
	0x032F3328 LDR X20, [X20 + 0x7C8]
	0x032F332C TBNZ X8, 0x0, 0x32F3344
	0x032F3330 ADRP X0, 0xE31000
	0x032F3334 LDR X0, [X0 + 0x7C8]
	0x032F3338 BL 0x1C16CF4
	0x032F333C MOVZ W8, 0x1
	0x032F3340 STRB W8, [X19 + 0xA53]
	0x032F3344 LDR X0, [X20]
	0x032F3348 BL 0x1C16F10
	0x032F334C MOVZ W1, 0x1
	0x032F3350 MOV X2, X31
	0x032F3354 MOV X19, X0
	0x032F3358 BL 0x33DCD78
	0x032F335C MOV X0, X19
	0x032F3360 LDP X20, X19, [X31 + 0x10]
	0x032F3364 LDR X30, [X31], #0x20
	0x032F3368 RET
	0x032F336C STR X30, [X31 - 0x20]!
	0x032F3370 STP X20, X19, [X31 + 0x10]
	0x032F3374 ADRP X19, 0x10E9000
	0x032F3378 ADRP X20, 0xE34000
	0x032F337C LDRB W8, [X19 + 0xA54]
	0x032F3380 LDR X20, [X20 + 0xD8]
	0x032F3384 TBNZ X8, 0x0, 0x32F339C
	0x032F3388 ADRP X0, 0xE34000
	0x032F338C LDR X0, [X0 + 0xD8]
	0x032F3390 BL 0x1C16CF4
	0x032F3394 MOVZ W8, 0x1
	0x032F3398 STRB W8, [X19 + 0xA54]
	0x032F339C LDR X0, [X20]
	0x032F33A0 BL 0x1C16F10
	0x032F33A4 MOV X1, X31
	0x032F33A8 MOV X19, X0
	0x032F33AC BL 0x33BDD8C
	0x032F33B0 LDR X8, [X20]
	0x032F33B4 LDR X8, [X8 + 0xB8]
	0x032F33B8 STR X19, [X8]
	0x032F33BC LDP X20, X19, [X31 + 0x10]
	0x032F33C0 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0x10EA000
	010 Move W8, [X25+2621]
	011 Move X20, X5
	012 Move X19, X4
	013 Move W21, W3
	014 Move W22, W2
	015 Move X23, X1
	016 Move X24, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xE35000
	022 Move X0, [X0+520]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X25+2621], W8
	026 Move X8, [X24]
	027 Move X9, [X8+856]
	028 Move X4, [X8+864]
	029 Move X0, X24
	030 Move X1, X23
	031 Move W2, W22
	032 Move W3, W21
	033 NotImplemented "Instruction BLR not yet implemented."
	034 Move X8, 0xE35000
	035 Move X8, [X8+520]
	036 Move W22, W0
	037 Move X0, [X8]
	038 Call 0x1C17F10
	039 Move X21, X0
	040 Move X1, X31
	041 Call Object..ctor, X0
	042 Move [X21+52], W22
	043 Move [X21+16], X20
	044 Compare X19, 0
	045 JumpIfEqual {51}
	046 Move X8, [X19+24]
	047 Move X0, [X19+64]
	048 Move X2, [X19+40]
	049 Move X1, X21
	050 NotImplemented "Instruction BLR not yet implemented."
	051 Move X0, X21
	052 Move X20, [X31+48]
	053 Move X19, [X31+56]
	054 Move X22, [X31+32]
	055 Move X21, [X31+40]
	056 Move X24, [X31+16]
	057 Move X23, [X31+24]
	058 Move X30, [X31+64]
	059 Move X25, [X31+72]
	060 Return X0
	061 Move X21, X0
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X0, X21
	064 Call 0x3EB2AD0
	065 Move X21, X0
	066 Move X0, 0xE2F000
	067 Move X0, [X0+1960]
	068 Call 0x1C17D08
	069 Move X8, [X21]
	070 Move X1, [X8]
	071 Call 0x1C18270
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfNotEqual {93}
	076 Move X22, [X21]
	077 Call 0x3EB2AE0
	078 Move X0, 0xE35000
	079 Move X0, [X0+520]
	080 Call 0x1C17D08
	081 Call 0x1C17F10
	082 Move X1, X31
	083 Move X21, X0
	084 Call Object..ctor, X0
	085 Move X0, X22
	086 Move X1, X31
	087 Call ExceptionDispatchInfo.Capture, X0
	088 Move [X21+40], X0
	089 Move [X21+16], X20
	090 Move [X21+24], W31
	091 Compare X19, 0
	092 JumpIfNotEqual {46}
	093 Move W0, 8
	094 Call 0x3EB2AF0
	095 Move X8, [X21]
	096 Move [X0], X8
	097 Move X1, 0xBC2000
	098 Add X1, X1, 3672
	099 Move X2, X31
	100 Call 0x3EB2B00
	101 Move X21, X0
	102 Call 0x3EB2AE0
	103 Move X0, X21
	104 Call 0x1D2D690
	105 Call 0x1991590

Method: System.Int32 BlockingEndRead(System.IAsyncResult asyncResult)

Disassembly:
	0x032F3440 TBNZ X8, 0x0, 0x32F3458

ISIL:
No ISIL was generated
Method: System.IAsyncResult BlockingBeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)

Disassembly:
	0x032F352C BL 0x1C16DFC
	0x032F3530 LDR X0, [X19]
	0x032F3534 BL 0x1C16D0C
	0x032F3538 LDR X21, [X0]
	0x032F353C CBZ X21, 0x32F35AC
	0x032F3540 ADRP X8, 0xE34000
	0x032F3544 LDR X8, [X8 + 0x128]
	0x032F3548 LDR X9, [X21]
	0x032F354C LDR X8, [X8]
	0x032F3550 CMP X9, X8
	0x032F3554 B.NE 0x32F35AC
	0x032F3558 LDR X0, [X21 + 0x58]
	0x032F355C CBZ X0, 0x32F35B8
	0x032F3560 LDR X8, [X0]
	0x032F3564 LDR X1, [X21 + 0x60]
	0x032F3568 LDP W2, W3, [X21 + 0x68]
	0x032F356C LDR X9, [X8 + 0x358]
	0x032F3570 LDR X4, [X8 + 0x360]
	0x032F3574 BLR X9
	0x032F3578 MOV W20, W0
	0x032F357C MOV X19, X31
	0x032F3580 LDRB W8, [X21 + 0x55]
	0x032F3584 CBNZ W8, 0x32F3594
	0x032F3588 LDR X0, [X21 + 0x58]
	0x032F358C CBZ X0, 0x32F35F4
	0x032F3590 BL 0x32F14BC
	0x032F3594 STP X31, X31, [X21 + 0x58]
	0x032F3598 CBNZ X19, 0x32F35B0
	0x032F359C MOV W0, W20
	0x032F35A0 LDP X20, X19, [X31 + 0x10]
	0x032F35A4 LDP X30, X21, [X31], #0x20
	0x032F35A8 RET
	0x032F35AC BL 0x1C16F20
	0x032F35B0 MOV X0, X19
	0x032F35B4 BL 0x1C16F18
	0x032F35B8 BL 0x1C16F20
	0x032F35BC B 0x32F35C0
	0x032F35C0 MOV X20, X0
	0x032F35C4 B 0x32F35D0
	0x032F35C8 MOV X20, X0
	0x032F35CC MOV X21, X31
	0x032F35D0 CMP W1, 0x1
	0x032F35D4 B.NE 0x32F35F8
	0x032F35D8 MOV X0, X20
	0x032F35DC BL 0x3EB1AD0
	0x032F35E0 LDR X19, [X0]
	0x032F35E4 BL 0x3EB1AE0
	0x032F35E8 CBZ X21, 0x32F35F4
	0x032F35EC MOV W20, W31
	0x032F35F0 B 0x32F3580
	0x032F35F4 BL 0x1C16F20
	0x032F35F8 MOV X19, X31
	0x032F35FC B 0x32F3604
	0x032F3600 MOV X20, X0
	0x032F3604 CBNZ X21, 0x32F360C
	0x032F3608 BL 0x1C16F20
	0x032F360C LDRB W8, [X21 + 0x55]
	0x032F3610 CBNZ W8, 0x32F3624
	0x032F3614 LDR X0, [X21 + 0x58]
	0x032F3618 CBNZ X0, 0x32F3620
	0x032F361C BL 0x1C16F20
	0x032F3620 BL 0x32F14BC
	0x032F3624 STP X31, X31, [X21 + 0x58]
	0x032F3628 CBNZ X19, 0x32F3634
	0x032F362C MOV X0, X20
	0x032F3630 BL 0x1D2C690
	0x032F3634 MOV X0, X19
	0x032F3638 BL 0x1C16F18
	0x032F363C BL 0x1990590
	0x032F3640 STR X30, [X31 - 0x10]!
	0x032F3644 CBZ X1, 0x32F3670
	0x032F3648 LDR X8, [X1]
	0x032F364C MOV X0, X1
	0x032F3650 MOV X1, X2
	0x032F3654 MOV W2, W3
	0x032F3658 LDR X7, [X8 + 0x2B8]
	0x032F365C LDR X6, [X8 + 0x2C0]
	0x032F3660 UBFM X8, X3, 0x20, 0x3F
	0x032F3664 MOV W3, W8
	0x032F3668 LDR X30, [X31], #0x10
	0x032F366C BR X7
	0x032F3670 BL 0x1C16F20
	0x032F3674 STR X30, [X31 - 0x10]!
	0x032F3678 CBZ X1, 0x32F369C
	0x032F367C LDR X8, [X1]
	0x032F3680 MOV X0, X1
	0x032F3684 MOV X1, X2
	0x032F3688 LDR X3, [X8 + 0x2C8]
	0x032F368C LDR X8, [X8 + 0x2D0]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0x10EA000
	010 Move W8, [X25+2622]
	011 Move X20, X5
	012 Move X19, X4
	013 Move W21, W3
	014 Move W22, W2
	015 Move X23, X1
	016 Move X24, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xE35000
	022 Move X0, [X0+520]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X25+2622], W8
	026 Move X8, [X24]
	027 Move X9, [X8+904]
	028 Move X4, [X8+912]
	029 Move X0, X24
	030 Move X1, X23
	031 Move W2, W22
	032 Move W3, W21
	033 NotImplemented "Instruction BLR not yet implemented."
	034 Move X8, 0xE35000
	035 Move X8, [X8+520]
	036 Move X0, [X8]
	037 Call 0x1C17F10
	038 Move X21, X0
	039 Move X1, X31
	040 Call Object..ctor, X0
	041 Move W8, 1
	042 Move [X21+16], X20
	043 Move [X21+24], W8
	044 Compare X19, 0
	045 JumpIfEqual {51}
	046 Move X8, [X19+24]
	047 Move X0, [X19+64]
	048 Move X2, [X19+40]
	049 Move X1, X21
	050 NotImplemented "Instruction BLR not yet implemented."
	051 Move X0, X21
	052 Move X20, [X31+48]
	053 Move X19, [X31+56]
	054 Move X22, [X31+32]
	055 Move X21, [X31+40]
	056 Move X24, [X31+16]
	057 Move X23, [X31+24]
	058 Move X30, [X31+64]
	059 Move X25, [X31+72]
	060 Return X0
	061 Move X21, X0
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X0, X21
	064 Call 0x3EB2AD0
	065 Move X21, X0
	066 Move X0, 0xE2F000
	067 Move X0, [X0+1960]
	068 Call 0x1C17D08
	069 Move X8, [X21]
	070 Move X1, [X8]
	071 Call 0x1C18270
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfNotEqual {89}
	076 Move X22, [X21]
	077 Call 0x3EB2AE0
	078 Move X0, 0xE35000
	079 Move X0, [X0+520]
	080 Call 0x1C17D08
	081 Call 0x1C17F10
	082 Move X1, X31
	083 Move X21, X0
	084 Call Object..ctor, X0
	085 Move X0, X22
	086 Move X1, X31
	087 Call ExceptionDispatchInfo.Capture, X0
	088 Move [X21+40], X0
	089 Move W0, 8
	090 Call 0x3EB2AF0
	091 Move X8, [X21]
	092 Move [X0], X8
	093 Move X1, 0xBC2000
	094 Add X1, X1, 3672
	095 Move X2, X31
	096 Call 0x3EB2B00
	097 Move X21, X0
	098 Call 0x3EB2AE0
	099 Move X0, X21
	100 Call 0x1D2D690
	101 Call 0x1991590

Method: System.Void BlockingEndWrite(System.IAsyncResult asyncResult)

Disassembly:
	0x032F36C0 LDR X0, [X0 + 0x128]

ISIL:
No ISIL was generated
Method: System.Boolean HasOverriddenBeginEndRead()

Disassembly:
	0x032F22B0 MOV W2, W22
	0x032F22B4 MOV W3, W21

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Boolean HasOverriddenBeginEndWrite()

Disassembly:
	0x032F2D08 MOVZ W8, 0x1
	0x032F2D0C STRB W8, [X20 + 0xA48]

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Void .ctor()

Disassembly:
	0x032F37B0 MOV X21, X31
	0x032F37B4 CMP W1, 0x1

ISIL:
	001 Move X1, X31
	002 Call MarshalByRefObject..ctor, X0
	003 Return 

Method: System.Void .cctor()

Disassembly:
	0x032F37B8 B.NE 0x32F37D4
	0x032F37BC MOV X0, X20
	0x032F37C0 BL 0x3EB1AD0
	0x032F37C4 LDR X19, [X0]
	0x032F37C8 BL 0x3EB1AE0
	0x032F37CC CBNZ X21, 0x32F3768
	0x032F37D0 BL 0x1C16F20
	0x032F37D4 MOV X19, X31
	0x032F37D8 B 0x32F37E0
	0x032F37DC MOV X20, X0
	0x032F37E0 CBNZ X21, 0x32F37E8
	0x032F37E4 BL 0x1C16F20
	0x032F37E8 LDRB W8, [X21 + 0x55]
	0x032F37EC CBNZ W8, 0x32F3800
	0x032F37F0 LDR X0, [X21 + 0x58]
	0x032F37F4 CBNZ X0, 0x32F37FC
	0x032F37F8 BL 0x1C16F20
	0x032F37FC BL 0x32F14BC
	0x032F3800 STP X31, X31, [X21 + 0x58]
	0x032F3804 CBNZ X19, 0x32F3810
	0x032F3808 MOV X0, X20
	0x032F380C BL 0x1D2C690
	0x032F3810 MOV X0, X19
	0x032F3814 BL 0x1C16F18
	0x032F3818 BL 0x1990590
	0x032F381C STR X30, [X31 - 0x20]!
	0x032F3820 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10EA000
	006 Move X21, 0xE35000
	007 Move X20, 0xE30000
	008 Move W8, [X19+2623]
	009 Move X21, [X21+568]
	010 Move X20, [X20+3344]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xE35000
	016 Move X0, [X0+568]
	017 Call 0x1C17CF4
	018 Move X0, 0xE30000
	019 Move X0, [X0+3344]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+2623], W8
	023 Move X0, [X21]
	024 Call 0x1C17F10
	025 Move X19, X0
	026 Call NullStream..ctor, X0
	027 Move X8, [X20]
	028 Move X8, [X8+184]
	029 Move [X8], X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return 

Method: System.Threading.Tasks.ValueTask`1<System.Int32> <ReadAsync>g__FinishReadAsync|44_0(System.Threading.Tasks.Task`1<System.Int32> readTask, System.Byte[] localBuffer, System.Memory`1<System.Byte> localDestination)

Disassembly:
	0x032F217C RET
	0x032F2180 BL 0x1C16F20
	0x032F2184 B 0x32F218C
	0x032F2188 B 0x32F218C
	0x032F218C MOV X19, X0
	0x032F2190 CMP W1, 0x1
	0x032F2194 B.NE 0x32F21B4
	0x032F2198 MOV X0, X19
	0x032F219C BL 0x3EB1AD0
	0x032F21A0 LDR X8, [X0]
	0x032F21A4 STR X8, [X31]
	0x032F21A8 BL 0x3EB1AE0
	0x032F21AC B 0x32F2164
	0x032F21B0 MOV X19, X0
	0x032F21B4 ADD X0, X31, 0x0
	0x032F21B8 BL 0x1BB3A54
	0x032F21BC MOV X0, X19
	0x032F21C0 BL 0x1D2C690
	0x032F21C4 BL 0x1990590
	0x032F21C8 STR X30, [X31 - 0x30]!
	0x032F21CC STP X22, X21, [X31 + 0x10]
	0x032F21D0 STP X20, X19, [X31 + 0x20]
	0x032F21D4 ADRP X21, 0x10EA000
	0x032F21D8 ADRP X22, 0xE01000
	0x032F21DC LDRB W8, [X21 + 0xA3C]
	0x032F21E0 LDR X22, [X22 + 0x618]
	0x032F21E4 MOV W20, W1
	0x032F21E8 MOV X19, X0
	0x032F21EC TBNZ X8, 0x0, 0x32F2204
	0x032F21F0 ADRP X0, 0xE01000
	0x032F21F4 LDR X0, [X0 + 0x618]
	0x032F21F8 BL 0x1C16CF4
	0x032F21FC MOVZ W8, 0x1
	0x032F2200 STRB W8, [X21 + 0xA3C]
	0x032F2204 LDR X0, [X22]
	0x032F2208 MOVZ W1, 0x1
	0x032F220C BL 0x1C16D6C
	0x032F2210 CBZ X0, 0x32F224C
	0x032F2214 LDR W8, [X0 + 0x18]
	0x032F2218 MOV X1, X0
	0x032F221C CBZ W8, 0x32F2250
	0x032F2220 STRB W20, [X1 + 0x20]
	0x032F2224 LDR X8, [X19]
	0x032F2228 MOV X0, X19
	0x032F222C LDP X20, X19, [X31 + 0x20]
	0x032F2230 LDP X22, X21, [X31 + 0x10]
	0x032F2234 LDR X5, [X8 + 0x388]
	0x032F2238 LDR X4, [X8 + 0x390]
	0x032F223C MOVZ W3, 0x1
	0x032F2240 MOV W2, W31
	0x032F2244 LDR X30, [X31], #0x30
	0x032F2248 BR X5
	0x032F224C BL 0x1C16F20
	0x032F2250 BL 0x1C16F28
	0x032F2254 STP X30, X25, [X31 - 0x40]!
	0x032F2258 STP X24, X23, [X31 + 0x10]
	0x032F225C STP X22, X21, [X31 + 0x20]
	0x032F2260 STP X20, X19, [X31 + 0x30]
	0x032F2264 ADRP X25, 0x10EA000
	0x032F2268 LDRB W8, [X25 + 0xA3D]
	0x032F226C MOV X20, X5
	0x032F2270 MOV X19, X4
	0x032F2274 MOV W21, W3
	0x032F2278 MOV W22, W2
	0x032F227C MOV X23, X1
	0x032F2280 MOV X24, X0
	0x032F2284 TBNZ X8, 0x0, 0x32F229C
	0x032F2288 ADRP X0, 0xE35000
	0x032F228C LDR X0, [X0 + 0x208]
	0x032F2290 BL 0x1C16CF4
	0x032F2294 MOVZ W8, 0x1
	0x032F2298 STRB W8, [X25 + 0xA3D]
	0x032F229C LDR X8, [X24]
	0x032F22A0 LDR X9, [X8 + 0x358]
	0x032F22A4 LDR X4, [X8 + 0x360]
	0x032F22A8 MOV X0, X24
	0x032F22AC MOV X1, X23

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+128], X30
	003 Move [X31+136], X25
	004 Move [X31+144], X24
	005 Move [X31+152], X23
	006 Move [X31+160], X22
	007 Move [X31+168], X21
	008 Move [X31+176], X20
	009 Move [X31+184], X19
	010 Move X25, 0x10EB000
	011 Move X24, 0xE36000
	012 Move X23, 0xE36000
	013 Move W8, [X25+2624]
	014 Move X24, [X24+408]
	015 Move X23, [X23+416]
	016 Move X19, X3
	017 Move X20, X2
	018 Move X21, X1
	019 Move X22, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {35}
	024 Move X0, 0xE36000
	025 Move X0, [X0+408]
	026 Call 0x1C17CF4
	027 Move X0, 0xE36000
	028 Move X0, [X0+416]
	029 Call 0x1C17CF4
	030 Move X0, 0xE36000
	031 Move X0, [X0+424]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X25+2624], W8
	035 Move X0, [X24]
	036 NotImplemented "Instruction MOVI not yet implemented."
	037 Add X8, X31, 0
	038 Move [X31+64], V0
	039 Move [X31+72], V0
	040 Move [X31+6], V0
	041 Move [X31+32], V0
	042 Move [X31+40], V0
	043 Move [X31+72], X22
	044 Move [X31+80], X21
	045 Move [X31+88], X20
	046 Move [X31+96], X19
	047 Move [X31+112], X31
	048 Call 0x263DFC4
	049 Move V0, [X31]
	050 Move V1, [X31+16]
	051 Move X19, [X23]
	052 Move TEMP, 0
	053 Not TEMP
	054 Move W8, TEMP
	055 Move [X31+32], W8
	056 Move [X31+40], V0
	057 Move [X31+56], V1
	058 Move X8, [X19+56]
	059 Compare X8, 0
	060 JumpIfNotEqual {63}
	061 Move X0, X19
	062 Call 0x1C5D6E0
	063 Move X0, [X19+32]
	064 Add X20, X31, 32
	065 Move W8, [X0+309]
	066 Move TEMP, X8
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfEqual {71}
	070 Call 0x1C5D684
	071 Move X8, [X0+192]
	072 Or X20, X20, 15
	073 Move X0, [X8+16]
	074 Move W8, [X0+309]
	075 Move TEMP, X8
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfEqual {80}
	079 Call 0x1C5D684
	080 Move X21, 0xE36000
	081 Move W8, [X0+224]
	082 Move X21, [X21+424]
	083 Compare W8, 0
	084 JumpIfNotEqual {86}
	085 Call 0x1C17DFC
	086 Move X8, [X19+56]
	087 Add X1, X31, 32
	088 Move X0, X20
	089 Move X2, [X8+8]
	090 Call AsyncTaskMethodBuilder`1<Int32>.Start, X0, X1
	091 Move X1, [X21]
	092 Move X0, X20
	093 Call 0x263E14C, X0
	094 Move X20, [X31+176]
	095 Move X19, [X31+184]
	096 Move X22, [X31+160]
	097 Move X21, [X31+168]
	098 Move X24, [X31+144]
	099 Move X23, [X31+152]
	100 Move X30, [X31+128]
	101 Move X25, [X31+136]
	102 Add X31, X31, 192
	103 Return X0

