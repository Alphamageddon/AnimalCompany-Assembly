Type: System.IO.TextWriter

Method: System.Void .ctor()

Disassembly:
	0x032E9814 MOV W2, W31
	0x032E9818 BLR X9
	0x032E981C CBZ X21, 0x32E9860
	0x032E9820 MOV W3, W0
	0x032E9824 CBZ W3, 0x32E9864
	0x032E9828 MOV X0, X21
	0x032E982C MOV X1, X20
	0x032E9830 MOV W2, W31
	0x032E9834 MOV X4, X31
	0x032E9838 BL 0x3233154
	0x032E983C LDR X8, [X19]
	0x032E9840 LDR W3, [X20 + 0x18]
	0x032E9844 MOV X0, X19
	0x032E9848 MOV X1, X20
	0x032E984C LDP X9, X4, [X8 + 0x1D8]
	0x032E9850 MOV W2, W31
	0x032E9854 BLR X9
	0x032E9858 MOV W3, W0
	0x032E985C CBNZ X21, 0x32E9824
	0x032E9860 BL 0x1C16F20
	0x032E9864 LDR X8, [X21]
	0x032E9868 MOV X0, X21
	0x032E986C LDP X20, X19, [X31 + 0x20]
	0x032E9870 LDP X22, X21, [X31 + 0x10]
	0x032E9874 LDP X2, X1, [X8 + 0x168]
	0x032E9878 LDR X30, [X31], #0x30
	0x032E987C BR X2
	0x032E9880 STP X30, X21, [X31 - 0x20]!
	0x032E9884 STP X20, X19, [X31 + 0x10]
	0x032E9888 ADRP X19, 0x10F3000
	0x032E988C ADRP X21, 0xE0A000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10F4000
	006 Move X20, 0xE3E000
	007 Move W8, [X21+2526]
	008 Move X20, [X20+3696]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE3E000
	015 Move X0, [X0+3696]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2526], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X0, X31
	027 Move X8, [X8+8]
	028 Move [X19+24], X8
	029 Call Environment.get_NewLine
	030 Move [X19+32], X0
	031 Move X0, X19
	032 Move X1, X31
	033 Call MarshalByRefObject..ctor, X0
	034 Move [X19+40], X31
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return 

Method: System.Void .ctor(System.IFormatProvider formatProvider)

Disassembly:
	0x032E90A4 BL 0x1BB73AC
	0x032E90A8 LDP X20, X19, [X31 + 0x40]
	0x032E90AC LDP X22, X21, [X31 + 0x30]
	0x032E90B0 LDR X30, [X31 + 0x20]
	0x032E90B4 ADD X31, X31, 0x50
	0x032E90B8 RET
	0x032E90BC BL 0x1C16F20
	0x032E90C0 B 0x32E90C4
	0x032E90C4 MOV X19, X0
	0x032E90C8 CMP W1, 0x1
	0x032E90CC B.NE 0x32E90EC
	0x032E90D0 MOV X0, X19
	0x032E90D4 BL 0x3EB1AD0
	0x032E90D8 LDR X8, [X0]
	0x032E90DC STR X8, [X31]
	0x032E90E0 BL 0x3EB1AE0
	0x032E90E4 B 0x32E90A0
	0x032E90E8 MOV X19, X0
	0x032E90EC ADD X0, X31, 0x0
	0x032E90F0 BL 0x1BB73AC
	0x032E90F4 MOV X0, X19
	0x032E90F8 BL 0x1D2C690
	0x032E90FC BL 0x1990590
	0x032E9100 STP X30, X27, [X31 - 0x50]!
	0x032E9104 STP X26, X25, [X31 + 0x10]
	0x032E9108 STP X24, X23, [X31 + 0x20]
	0x032E910C STP X22, X21, [X31 + 0x30]
	0x032E9110 STP X20, X19, [X31 + 0x40]
	0x032E9114 ADRP X23, 0x10F3000
	0x032E9118 LDRB W8, [X23 + 0x9D4]
	0x032E911C MOV W20, W3
	0x032E9120 MOV X21, X2
	0x032E9124 MOV X22, X1
	0x032E9128 MOV X19, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x10F4000
	007 Move X21, 0xE3E000
	008 Move W8, [X22+2527]
	009 Move X21, [X21+3696]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xE3E000
	017 Move X0, [X0+3696]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2527], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X21]
	027 Move X8, [X0+184]
	028 Move X0, X31
	029 Move X8, [X8+8]
	030 Move [X20+24], X8
	031 Call Environment.get_NewLine
	032 Move [X20+32], X0
	033 Move X0, X20
	034 Move X1, X31
	035 Call MarshalByRefObject..ctor, X0
	036 Move [X20+40], X19
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X30, [X31+48]
	042 Return 

Method: System.IFormatProvider get_FormatProvider()

Disassembly:
	0x032EACC0 BL 0x1C16CF4
	0x032EACC4 MOVZ W8, 0x1
	0x032EACC8 STRB W8, [X24 + 0x9EE]
	0x032EACCC MOV X0, X21
	0x032EACD0 MOV X1, X31
	0x032EACD4 BL 0x33BE520
	0x032EACD8 LDR X8, [X23]
	0x032EACDC LDR X23, [X22]
	0x032EACE0 MOV X22, X0
	0x032EACE4 LDR W9, [X8 + 0xE0]
	0x032EACE8 CBNZ W9, 0x32EACF4
	0x032EACEC MOV X0, X8
	0x032EACF0 BL 0x1C16DFC
	0x032EACF4 MOV X0, X23
	0x032EACF8 MOV X1, X31
	0x032EACFC BL 0x338C698
	0x032EAD00 MOV X1, X0
	0x032EAD04 MOV X0, X22
	0x032EAD08 MOV X2, X31
	0x032EAD0C BL 0x3395194
	0x032EAD10 TBZ X0, 0x0, 0x32EAD34
	0x032EAD14 MOV X0, X21
	0x032EAD18 MOV X1, X20
	0x032EAD1C MOV X2, X19
	0x032EAD20 LDP X20, X19, [X31 + 0x30]
	0x032EAD24 LDP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10F3000
	005 Move W8, [X20+2528]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE0C000
	012 Move X0, [X0+3144]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2528], W8
	016 Move X0, [X19+40]
	017 Compare X0, 0
	018 JumpIfEqual {23}
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Return X0
	023 Move X8, 0xE0C000
	024 Move X8, [X8+3144]
	025 Move X0, [X8]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X0, X31
	033 Move X30, [X31+32]
	034 Call CultureInfo.get_CurrentCulture
	035 Return X0

Method: System.Void Close()

Disassembly:
	0x032EAD28 LDP X24, X23, [X31 + 0x10]
	0x032EAD2C LDR X30, [X31], #0x40
	0x032EAD30 B 0x32E5D50
	0x032EAD34 MOV X0, X21
	0x032EAD38 MOV X1, X20
	0x032EAD3C MOV X2, X19
	0x032EAD40 LDP X20, X19, [X31 + 0x30]
	0x032EAD44 LDP X22, X21, [X31 + 0x20]
	0x032EAD48 LDP X24, X23, [X31 + 0x10]
	0x032EAD4C MOV X3, X31
	0x032EAD50 LDR X30, [X31], #0x40
	0x032EAD54 B 0x32F1D10
	0x032EAD58 SUB X31, X31, 0x40
	0x032EAD5C STP X30, X23, [X31 + 0x10]
	0x032EAD60 STP X22, X21, [X31 + 0x20]
	0x032EAD64 STP X20, X19, [X31 + 0x30]
	0x032EAD68 ADRP X23, 0x10F2000
	0x032EAD6C LDRB W8, [X23 + 0x9F0]
	0x032EAD70 MOV W20, W3
	0x032EAD74 MOV W21, W2
	0x032EAD78 MOV X22, X1
	0x032EAD7C MOV X19, X0
	0x032EAD80 STR X4, [X31 + 0x8]
	0x032EAD84 TBNZ X8, 0x0, 0x32EADCC
	0x032EAD88 ADRP X0, 0xE11000
	0x032EAD8C LDR X0, [X0 + 0x7D8]
	0x032EAD90 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10F3000
	006 Move X20, 0xE11000
	007 Move W8, [X21+2529]
	008 Move X20, [X20+3088]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE11000
	015 Move X0, [X0+3088]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2529], W8
	019 Move X8, [X19]
	020 Move W1, 1
	021 Move X0, X19
	022 Move X9, [X8+456]
	023 Move X2, [X8+464]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X1, X31
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call GC.SuppressFinalize, X0
	037 Return 

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x032EAD94 ADRP X0, 0xE3C000

ISIL:
	001 Return 

Method: System.Void Dispose()

Disassembly:
	0x032EAD98 LDR X0, [X0 + 0xCC0]
	0x032EAD9C BL 0x1C16CF4
	0x032EADA0 ADRP X0, 0xE3C000
	0x032EADA4 LDR X0, [X0 + 0xCC8]
	0x032EADA8 BL 0x1C16CF4
	0x032EADAC ADRP X0, 0xE3C000
	0x032EADB0 LDR X0, [X0 + 0xCD0]
	0x032EADB4 BL 0x1C16CF4
	0x032EADB8 ADRP X0, 0xE0A000
	0x032EADBC LDR X0, [X0 + 0x7B8]
	0x032EADC0 BL 0x1C16CF4
	0x032EADC4 MOVZ W8, 0x1
	0x032EADC8 STRB W8, [X23 + 0x9F0]
	0x032EADCC CBZ X22, 0x32EAEDC
	0x032EADD0 TBNZ X21, 0x1F, 0x32EAF24
	0x032EADD4 TBNZ X20, 0x1F, 0x32EAF44
	0x032EADD8 LDR W8, [X22 + 0x18]
	0x032EADDC SUB W8, W8, W21
	0x032EADE0 CMP W8, W20
	0x032EADE4 B.LT 0x32EAF8C
	0x032EADE8 ADRP X8, 0xE11000
	0x032EADEC LDR X8, [X8 + 0x7D8]
	0x032EADF0 LDR X0, [X8]
	0x032EADF4 LDR W8, [X0 + 0xE0]
	0x032EADF8 CBNZ W8, 0x32EAE00
	0x032EADFC BL 0x1C16DFC
	0x032EAE00 ADD X0, X31, 0x8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10F3000
	006 Move X20, 0xE11000
	007 Move W8, [X21+2530]
	008 Move X20, [X20+3088]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE11000
	015 Move X0, [X0+3088]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2530], W8
	019 Move X8, [X19]
	020 Move W1, 1
	021 Move X0, X19
	022 Move X9, [X8+456]
	023 Move X2, [X8+464]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X1, X31
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call GC.SuppressFinalize, X0
	037 Return 

Method: System.Void Flush()

Disassembly:
	0x032EAE04 MOV X1, X31

ISIL:
	001 Return 

Method: System.String get_NewLine()

Disassembly:
	0x032EAE08 BL 0x33DD2B0
	0x032EAE0C TBZ X0, 0x0, 0x32EAE48

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void Write(System.Char value)

Disassembly:
	0x032EAE10 ADRP X8, 0xE0A000

ISIL:
	001 Return 

Method: System.Void Write(System.Char[] buffer)

Disassembly:
	0x032EAE14 LDR X8, [X8 + 0x7B8]
	0x032EAE18 LDR X19, [X31 + 0x8]
	0x032EAE1C LDR X0, [X8]
	0x032EAE20 LDR W8, [X0 + 0xE0]
	0x032EAE24 CBNZ W8, 0x32EAE2C
	0x032EAE28 BL 0x1C16DFC
	0x032EAE2C ADRP X8, 0xE3C000
	0x032EAE30 LDR X8, [X8 + 0xCC8]

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {9}
	003 Move X8, [X0]
	004 Move W3, [X1+24]
	005 Move W2, W31
	006 Move X5, [X8+536]
	007 Move X4, [X8+544]
	008 CallNoReturn X5
	009 Return 

Method: System.Void Write(System.Char[] buffer, System.Int32 index, System.Int32 count)

Disassembly:
	0x032EAE34 MOV X0, X19
	0x032EAE38 LDR X1, [X8]
	0x032EAE3C BL 0x2299598
	0x032EAE40 MOV X21, X0
	0x032EAE44 B 0x32EAEC4
	0x032EAE48 LDR X8, [X19]
	0x032EAE4C LDR X9, [X8 + 0x358]
	0x032EAE50 LDR X4, [X8 + 0x360]
	0x032EAE54 MOV X0, X19
	0x032EAE58 MOV X1, X22
	0x032EAE5C MOV W2, W21
	0x032EAE60 MOV W3, W20
	0x032EAE64 BLR X9
	0x032EAE68 LDR X21, [X19 + 0x60]
	0x032EAE6C MOV W20, W0
	0x032EAE70 CBZ X21, 0x32EAE90
	0x032EAE74 ADRP X8, 0xE3C000
	0x032EAE78 LDR X8, [X8 + 0xCC0]
	0x032EAE7C LDR X1, [X8]
	0x032EAE80 MOV X0, X21
	0x032EAE84 BL 0x269D120
	0x032EAE88 CMP W0, W20
	0x032EAE8C B.EQ 0x32EAEC4
	0x032EAE90 ADRP X8, 0xE0A000
	0x032EAE94 LDR X8, [X8 + 0x7B8]
	0x032EAE98 LDR X0, [X8]
	0x032EAE9C LDR W8, [X0 + 0xE0]
	0x032EAEA0 CBNZ W8, 0x32EAEA8
	0x032EAEA4 BL 0x1C16DFC
	0x032EAEA8 ADRP X8, 0xE3C000
	0x032EAEAC LDR X8, [X8 + 0xCD0]
	0x032EAEB0 LDR X1, [X8]
	0x032EAEB4 MOV W0, W20
	0x032EAEB8 BL 0x229A250
	0x032EAEBC MOV X21, X0
	0x032EAEC0 STR X0, [X19 + 0x60]
	0x032EAEC4 MOV X0, X21
	0x032EAEC8 LDP X20, X19, [X31 + 0x30]
	0x032EAECC LDP X22, X21, [X31 + 0x20]
	0x032EAED0 LDP X30, X23, [X31 + 0x10]
	0x032EAED4 ADD X31, X31, 0x40
	0x032EAED8 RET
	0x032EAEDC ADRP X0, 0xE0E000
	0x032EAEE0 LDR X0, [X0 + 0x528]
	0x032EAEE4 BL 0x1C16D08
	0x032EAEE8 BL 0x1C16F10
	0x032EAEEC MOV X19, X0
	0x032EAEF0 ADRP X0, 0xE34000
	0x032EAEF4 LDR X0, [X0 + 0xF48]
	0x032EAEF8 BL 0x1C16D08
	0x032EAEFC MOV X20, X0
	0x032EAF00 ADRP X0, 0xE3C000
	0x032EAF04 LDR X0, [X0 + 0xC40]
	0x032EAF08 BL 0x1C16D08
	0x032EAF0C MOV X2, X0
	0x032EAF10 MOV X0, X19
	0x032EAF14 MOV X1, X20
	0x032EAF18 MOV X3, X31
	0x032EAF1C BL 0x3315F7C
	0x032EAF20 B 0x32EAFBC
	0x032EAF24 ADRP X0, 0xE11000
	0x032EAF28 LDR X0, [X0 + 0x760]
	0x032EAF2C BL 0x1C16D08
	0x032EAF30 BL 0x1C16F10
	0x032EAF34 MOV X19, X0
	0x032EAF38 ADRP X0, 0xE38000
	0x032EAF3C LDR X0, [X0 + 0xD90]
	0x032EAF40 B 0x32EAF60
	0x032EAF44 ADRP X0, 0xE11000
	0x032EAF48 LDR X0, [X0 + 0x760]
	0x032EAF4C BL 0x1C16D08
	0x032EAF50 BL 0x1C16F10
	0x032EAF54 MOV X19, X0
	0x032EAF58 ADRP X0, 0xE31000
	0x032EAF5C LDR X0, [X0 + 0x648]
	0x032EAF60 BL 0x1C16D08
	0x032EAF64 MOV X20, X0
	0x032EAF68 ADRP X0, 0xE31000
	0x032EAF6C LDR X0, [X0 + 0x670]
	0x032EAF70 BL 0x1C16D08
	0x032EAF74 MOV X2, X0
	0x032EAF78 MOV X0, X19
	0x032EAF7C MOV X1, X20
	0x032EAF80 MOV X3, X31
	0x032EAF84 BL 0x3311888
	0x032EAF88 B 0x32EAFBC
	0x032EAF8C ADRP X0, 0xE11000
	0x032EAF90 LDR X0, [X0 + 0x578]
	0x032EAF94 BL 0x1C16D08
	0x032EAF98 BL 0x1C16F10
	0x032EAF9C MOV X19, X0
	0x032EAFA0 ADRP X0, 0xE31000
	0x032EAFA4 LDR X0, [X0 + 0x760]
	0x032EAFA8 BL 0x1C16D08
	0x032EAFAC MOV X1, X0
	0x032EAFB0 MOV X0, X19
	0x032EAFB4 MOV X2, X31
	0x032EAFB8 BL 0x3314A68
	0x032EAFBC ADRP X0, 0xE3C000
	0x032EAFC0 LDR X0, [X0 + 0xF50]
	0x032EAFC4 BL 0x1C16D08
	0x032EAFC8 MOV X1, X0
	0x032EAFCC MOV X0, X19
	0x032EAFD0 BL 0x1C16DEC

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Compare X1, 0
	009 JumpIfEqual {56}
	010 Move TEMP, X2
	011 And TEMP, TEMP, -2147483648
	012 Compare TEMP, -2147483648
	013 JumpIfEqual {73}
	014 Move TEMP, X3
	015 And TEMP, TEMP, -2147483648
	016 Compare TEMP, -2147483648
	017 JumpIfEqual {80}
	018 Move X8, [X1+24]
	019 Move X19, X1
	020 Subtract W9, W8, W2
	021 NotImplemented "Instruction CMP not yet implemented."
	022 NotImplemented "Instruction CMP not yet implemented."
	023 And X8, X8, 0
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W21, W2
	026 Move W8, W3
	027 Move X20, X0
	028 Move X22, X21
	029 ShiftRight X22, 32
	030 And X22, X22, 0x7FFFFFFF
	031 Subtract X23, X8, 1
	032 Move X24, 1
	033 Move X8, [X20]
	034 Add X9, X19, X22
	035 NotImplemented "Instruction LDRH not yet implemented."
	036 Move X0, X20
	037 Move X10, [X8+504]
	038 Move X2, [X8+512]
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Compare X23, 0
	041 JumpIfEqual {48}
	042 Move W8, [X19+24]
	043 Add X21, X21, 1
	044 Add X22, X22, X24
	045 Subtract X23, X23, 1
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Call 0x1C17F28
	048 Move X20, [X31+48]
	049 Move X19, [X31+56]
	050 Move X22, [X31+32]
	051 Move X21, [X31+40]
	052 Move X24, [X31+16]
	053 Move X23, [X31+24]
	054 Move X30, [X31+64]
	055 Return 
	056 Move X0, 0xE0F000
	057 Move X0, [X0+1320]
	058 Call 0x1C17D08
	059 Call 0x1C17F10
	060 Move X19, X0
	061 Move X0, 0xE35000
	062 Move X0, [X0+3912]
	063 Call 0x1C17D08
	064 Move X20, X0
	065 Move X0, 0xE3D000
	066 Move X0, [X0+3136]
	067 Call 0x1C17D08
	068 Move X2, X0
	069 Move X0, X19
	070 Move X1, X20
	071 Move X3, X31
	072 Call ArgumentNullException..ctor, X0, X1, X2
	073 Move X0, 0xE12000
	074 Move X0, [X0+1888]
	075 Call 0x1C17D08
	076 Call 0x1C17F10
	077 Move X19, X0
	078 Move X0, 0xE15000
	079 Move X0, [X0+304]
	080 Move X0, 0xE12000
	081 Move X0, [X0+1888]
	082 Call 0x1C17D08
	083 Call 0x1C17F10
	084 Move X19, X0
	085 Move X0, 0xE32000
	086 Move X0, [X0+1608]
	087 Call 0x1C17D08
	088 Move X20, X0
	089 Move X0, 0xE32000
	090 Move X0, [X0+1648]
	091 Call 0x1C17D08
	092 Move X2, X0
	093 Move X0, X19
	094 Move X1, X20
	095 Move X3, X31
	096 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	097 Move X0, 0xE12000
	098 Move X0, [X0+1400]
	099 Call 0x1C17D08
	100 Call 0x1C17F10
	101 Move X19, X0
	102 Move X0, 0xE32000
	103 Move X0, [X0+1888]
	104 Call 0x1C17D08
	105 Move X1, X0
	106 Move X0, X19
	107 Move X2, X31
	108 Call ArgumentException..ctor, X0, X1
	109 Move X0, 0xE3D000
	110 Move X0, [X0+3808]
	111 Call 0x1C17D08
	112 Move X1, X0
	113 Move X0, X19
	114 Call 0x1C17DEC

Method: System.Void Write(System.ReadOnlySpan`1<System.Char> buffer)

Disassembly:
	0x032E9F44 ADRP X0, 0xE12000
	0x032E9F48 LDR X0, [X0 + 0x760]
	0x032E9F4C BL 0x1C16D08
	0x032E9F50 BL 0x1C16F10
	0x032E9F54 MOV X19, X0
	0x032E9F58 ADRP X0, 0xE32000
	0x032E9F5C LDR X0, [X0 + 0x648]
	0x032E9F60 BL 0x1C16D08
	0x032E9F64 MOV X20, X0
	0x032E9F68 ADRP X0, 0xE32000
	0x032E9F6C LDR X0, [X0 + 0x670]
	0x032E9F70 BL 0x1C16D08
	0x032E9F74 MOV X2, X0
	0x032E9F78 MOV X0, X19
	0x032E9F7C MOV X1, X20
	0x032E9F80 MOV X3, X31
	0x032E9F84 BL 0x3311888
	0x032E9F88 B 0x32E9FBC
	0x032E9F8C ADRP X0, 0xE12000
	0x032E9F90 LDR X0, [X0 + 0x578]
	0x032E9F94 BL 0x1C16D08
	0x032E9F98 BL 0x1C16F10
	0x032E9F9C MOV X19, X0
	0x032E9FA0 ADRP X0, 0xE32000
	0x032E9FA4 LDR X0, [X0 + 0x760]
	0x032E9FA8 BL 0x1C16D08
	0x032E9FAC MOV X1, X0
	0x032E9FB0 MOV X0, X19
	0x032E9FB4 MOV X2, X31
	0x032E9FB8 BL 0x3314A68
	0x032E9FBC ADRP X0, 0xE3D000
	0x032E9FC0 LDR X0, [X0 + 0xEE0]
	0x032E9FC4 BL 0x1C16D08
	0x032E9FC8 MOV X1, X0
	0x032E9FCC MOV X0, X19
	0x032E9FD0 BL 0x1C16DEC
	0x032E9FD4 SUB X31, X31, 0x20
	0x032E9FD8 STP X30, X19, [X31 + 0x10]
	0x032E9FDC STR W1, [X31 + 0xC]
	0x032E9FE0 LDR X8, [X0]
	0x032E9FE4 MOV X19, X0
	0x032E9FE8 LDP X9, X1, [X8 + 0x1A8]
	0x032E9FEC BLR X9
	0x032E9FF0 MOV X1, X0
	0x032E9FF4 ADD X0, X31, 0xC
	0x032E9FF8 MOV X2, X31
	0x032E9FFC BL 0x337B824
	0x032EA000 LDR X8, [X19]
	0x032EA004 MOV X1, X0
	0x032EA008 MOV X0, X19
	0x032EA00C LDR X9, [X8 + 0x248]
	0x032EA010 LDR X2, [X8 + 0x250]
	0x032EA014 BLR X9
	0x032EA018 LDP X30, X19, [X31 + 0x10]
	0x032EA01C ADD X31, X31, 0x20
	0x032EA020 RET
	0x032EA024 CBZ X1, 0x32EA058
	0x032EA028 STP X30, X19, [X31 - 0x10]!
	0x032EA02C MOV X19, X0
	0x032EA030 MOV X0, X1
	0x032EA034 MOV X1, X31
	0x032EA038 BL 0x322D958
	0x032EA03C LDR X8, [X19]
	0x032EA040 MOV X1, X0
	0x032EA044 MOV X0, X19
	0x032EA048 LDR X3, [X8 + 0x208]
	0x032EA04C LDR X2, [X8 + 0x210]
	0x032EA050 LDP X30, X19, [X31], #0x10
	0x032EA054 BR X3
	0x032EA058 RET
	0x032EA05C LDR X8, [X0]
	0x032EA060 LDR X1, [X0 + 0x18]
	0x032EA064 LDR X3, [X8 + 0x208]
	0x032EA068 LDR X2, [X8 + 0x210]
	0x032EA06C BR X3
	0x032EA070 STP X30, X19, [X31 - 0x10]!
	0x032EA074 LDR X8, [X0]
	0x032EA078 MOV X19, X0
	0x032EA07C LDR X9, [X8 + 0x238]
	0x032EA080 LDR X2, [X8 + 0x240]
	0x032EA084 BLR X9
	0x032EA088 LDR X8, [X19]
	0x032EA08C MOV X0, X19
	0x032EA090 LDR X2, [X8 + 0x258]
	0x032EA094 LDR X1, [X8 + 0x260]
	0x032EA098 LDP X30, X19, [X31], #0x10
	0x032EA09C BR X2
	0x032EA0A0 STP X30, X19, [X31 - 0x10]!
	0x032EA0A4 MOV X19, X0
	0x032EA0A8 CBZ X1, 0x32EA0C0
	0x032EA0AC LDR X8, [X19]
	0x032EA0B0 MOV X0, X19
	0x032EA0B4 LDR X9, [X8 + 0x248]
	0x032EA0B8 LDR X2, [X8 + 0x250]
	0x032EA0BC BLR X9
	0x032EA0C0 LDR X8, [X19]
	0x032EA0C4 LDR X1, [X19 + 0x20]
	0x032EA0C8 MOV X0, X19
	0x032EA0CC LDR X3, [X8 + 0x248]
	0x032EA0D0 LDR X2, [X8 + 0x250]
	0x032EA0D4 LDP X30, X19, [X31], #0x10
	0x032EA0D8 BR X3
	0x032EA0DC STR X30, [X31 - 0x20]!
	0x032EA0E0 STP X20, X19, [X31 + 0x10]
	0x032EA0E4 ADRP X20, 0x10F2000
	0x032EA0E8 LDRB W8, [X20 + 0x9E4]
	0x032EA0EC MOV X19, X0
	0x032EA0F0 TBNZ X8, 0x0, 0x32EA108
	0x032EA0F4 ADRP X0, 0xE3C000
	0x032EA0F8 LDR X0, [X0 + 0xEE8]
	0x032EA0FC BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+24], X2
	003 Move [X31+32], X30
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X22, 0x10F4000
	009 Move [X31+16], X1
	010 Move X21, 0xE36000
	011 Move W8, [X22+2531]
	012 Move X21, [X21+3424]
	013 Move X20, X2
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {36}
	019 Move X0, 0xE36000
	020 Move X0, [X0+3416]
	021 Call 0x1C17CF4
	022 Move X0, 0xE36000
	023 Move X0, [X0+3424]
	024 Call 0x1C17CF4
	025 Move X0, 0xE3A000
	026 Move X0, [X0+408]
	027 Call 0x1C17CF4
	028 Move X0, 0xE3A000
	029 Move X0, [X0+40]
	030 Call 0x1C17CF4
	031 Move X0, 0xE36000
	032 Move X0, [X0+3480]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X22+2531], W8
	036 Move X0, [X21]
	037 Move [X31+40], X31
	038 Move X21, 0xE36000
	039 Move W8, [X0+224]
	040 Move X21, [X21+3416]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X21, [X21]
	045 Move X0, [X21+32]
	046 Move W8, [X0+309]
	047 Move TEMP, X8
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfEqual {52}
	051 Call 0x1C5D684
	052 Move X8, [X0+192]
	053 Move X0, [X8+8]
	054 Move W8, [X0+309]
	055 Move TEMP, X8
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfEqual {60}
	059 Call 0x1C5D684
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Move X0, [X21+32]
	065 Move W8, [X0+309]
	066 Move TEMP, X8
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfEqual {71}
	070 Call 0x1C5D684
	071 Move X8, [X0+192]
	072 Move X0, [X8+8]
	073 Move W8, [X0+309]
	074 Move TEMP, X8
	075 And TEMP, TEMP, 1
	076 Compare TEMP, 1
	077 JumpIfEqual {79}
	078 Call 0x1C5D684
	079 Move X8, [X0+184]
	080 Move X0, [X8]
	081 Compare X0, 0
	082 JumpIfEqual {120}
	083 Move X8, [X0]
	084 Move X21, 0xE39000
	085 Move W1, W20
	086 Move X9, [X8+376]
	087 Move X2, [X8+384]
	088 Move X21, [X21+408]
	089 NotImplemented "Instruction BLR not yet implemented."
	090 Add X8, X31, 40
	091 Move [X31+40], X0
	092 Move [X31], X31
	093 Move [X31+8], X8
	094 Compare X0, 0
	095 JumpIfEqual {98}
	096 Move W2, [X0+24]
	097 Add X1, X0, 32
	098 Move X1, X31
	099 Move X2, X31
	100 Move X3, [X21]
	101 Add X0, X31, 16
	102 Call ReadOnlySpan`1<Char>.CopyTo, X0, X1
	103 Move X8, [X19]
	104 Move X1, [X31+40]
	105 Move W3, [X31+24]
	106 Move X9, [X8+536]
	107 Move X4, [X8+544]
	108 Move X0, X19
	109 Move W2, W31
	110 NotImplemented "Instruction BLR not yet implemented."
	111 Add X0, X31, 0
	112 Call 0x1BB83AC
	113 Move X20, [X31+64]
	114 Move X19, [X31+72]
	115 Move X22, [X31+48]
	116 Move X21, [X31+56]
	117 Move X30, [X31+32]
	118 Add X31, X31, 80
	119 Return 
	120 Call 0x1C17F20
	121 Move X19, X0
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move X0, X19
	124 Call 0x3EB2AD0
	125 Move X8, [X0]
	126 Move [X31], X8
	127 Call 0x3EB2AE0
	128 Move X19, X0
	129 Add X0, X31, 0
	130 Call 0x1BB83AC
	131 Move X0, X19
	132 Call 0x1D2D690
	133 Call 0x1991590

Method: System.Void Write(System.Int32 value)

Disassembly:
	0x032EAFD4 B 0x32EAFE0
	0x032EAFD8 B 0x32EAFE0
	0x032EAFDC B 0x32EAFE0
	0x032EAFE0 MOV X19, X0
	0x032EAFE4 CMP W1, 0x1
	0x032EAFE8 B.NE 0x32EB078
	0x032EAFEC MOV X0, X19
	0x032EAFF0 BL 0x3EB1AD0
	0x032EAFF4 MOV X19, X0
	0x032EAFF8 ADRP X0, 0xE09000
	0x032EAFFC LDR X0, [X0 + 0x7D0]
	0x032EB000 BL 0x1C16D08
	0x032EB004 LDR X8, [X19]
	0x032EB008 LDR X1, [X8]
	0x032EB00C BL 0x1C17270
	0x032EB010 TBZ X0, 0x0, 0x32EB050
	0x032EB014 LDR X19, [X19]
	0x032EB018 BL 0x3EB1AE0
	0x032EB01C ADRP X0, 0xE09000
	0x032EB020 LDR X0, [X0 + 0x7B8]

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move [X31+12], W1
	005 Move X8, [X0]
	006 Move X19, X0
	007 Move X9, [X8+424]
	008 Move X1, [X8+432]
	009 NotImplemented "Instruction BLR not yet implemented."
	010 Move X1, X0
	011 Add X0, X31, 12
	012 Move X2, X31
	013 Call Int32.ToString, X0, X1
	014 Move X8, [X19]
	015 Move X1, X0
	016 Move X0, X19
	017 Move X9, [X8+584]
	018 Move X2, [X8+592]
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Add X31, X31, 32
	023 Return 

Method: System.Void Write(System.String value)

Disassembly:
	0x032EB024 BL 0x1C16D08
	0x032EB028 LDR W8, [X0 + 0xE0]
	0x032EB02C CBNZ W8, 0x32EB034
	0x032EB030 BL 0x1C16DFC
	0x032EB034 ADRP X0, 0xE3B000
	0x032EB038 LDR X0, [X0 + 0xCE8]
	0x032EB03C BL 0x1C16D08
	0x032EB040 MOV X1, X0
	0x032EB044 MOV X0, X19
	0x032EB048 BL 0x2299DFC
	0x032EB04C B 0x32EAE40
	0x032EB050 MOVZ W0, 0x8
	0x032EB054 BL 0x3EB1AF0
	0x032EB058 LDR X8, [X19]

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {17}
	003 Move [X31-16], X30
	004 Move [X31-8], X19
	005 Move X19, X0
	006 Move X0, X1
	007 Move X1, X31
	008 Call String.ToCharArray, X0
	009 Move X8, [X19]
	010 Move X1, X0
	011 Move X0, X19
	012 Move X3, [X8+520]
	013 Move X2, [X8+528]
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 CallNoReturn X3
	017 Return 

Method: System.Void WriteLine()

Disassembly:
	0x032EB05C STR X8, [X0]
	0x032EB060 ADRP X1, 0xBC9000
	0x032EB064 ADD X1, X1, 0xE58
	0x032EB068 MOV X2, X31
	0x032EB06C BL 0x3EB1B00

ISIL:
	001 Move X8, [X0]
	002 Move X1, [X0+24]
	003 Move X3, [X8+520]
	004 Move X2, [X8+528]
	005 CallNoReturn X3

Method: System.Void WriteLine(System.Int32 value)

Disassembly:
	0x032EB070 MOV X19, X0
	0x032EB074 BL 0x3EB1AE0
	0x032EB078 MOV X0, X19
	0x032EB07C BL 0x1D2C690
	0x032EB080 BL 0x1990590
	0x032EB084 SUB X31, X31, 0x60
	0x032EB088 STP X30, X23, [X31 + 0x30]
	0x032EB08C STP X22, X21, [X31 + 0x40]
	0x032EB090 STP X20, X19, [X31 + 0x50]
	0x032EB094 ADRP X23, 0x10F1000
	0x032EB098 STP X1, X2, [X31 + 0x20]
	0x032EB09C STR X3, [X31 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Move X19, X0
	005 Move X9, [X8+568]
	006 Move X2, [X8+576]
	007 NotImplemented "Instruction BLR not yet implemented."
	008 Move X8, [X19]
	009 Move X0, X19
	010 Move X2, [X8+600]
	011 Move X1, [X8+608]
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 CallNoReturn X2

Method: System.Void WriteLine(System.String value)

Disassembly:
	0x032EB0A0 ADRP X22, 0xE10000
	0x032EB0A4 LDRB W8, [X23 + 0x9F1]
	0x032EB0A8 LDR X22, [X22 + 0x7D8]
	0x032EB0AC MOV X20, X2
	0x032EB0B0 MOV X21, X1
	0x032EB0B4 MOV X19, X0
	0x032EB0B8 TBNZ X8, 0x0, 0x32EB154
	0x032EB0BC ADRP X0, 0xE3B000
	0x032EB0C0 LDR X0, [X0 + 0xCF0]
	0x032EB0C4 BL 0x1C16CF4
	0x032EB0C8 ADRP X0, 0xE3B000
	0x032EB0CC LDR X0, [X0 + 0xCF8]
	0x032EB0D0 BL 0x1C16CF4
	0x032EB0D4 ADRP X0, 0xE3B000
	0x032EB0D8 LDR X0, [X0 + 0xD00]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Compare X1, 0
	005 JumpIfEqual {11}
	006 Move X8, [X19]
	007 Move X0, X19
	008 Move X9, [X8+584]
	009 Move X2, [X8+592]
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Move X8, [X19]
	012 Move X1, [X19+32]
	013 Move X0, X19
	014 Move X3, [X8+584]
	015 Move X2, [X8+592]
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 CallNoReturn X3

Method: System.IO.TextWriter Synchronized(System.IO.TextWriter writer)

Disassembly:
	0x032EB0DC BL 0x1C16CF4
	0x032EB0E0 ADRP X0, 0xE30000
	0x032EB0E4 LDR X0, [X0 + 0x5B0]
	0x032EB0E8 BL 0x1C16CF4
	0x032EB0EC ADRP X0, 0xE10000
	0x032EB0F0 LDR X0, [X0 + 0x7D8]
	0x032EB0F4 BL 0x1C16CF4
	0x032EB0F8 ADRP X0, 0xE3B000
	0x032EB0FC LDR X0, [X0 + 0xD08]
	0x032EB100 BL 0x1C16CF4
	0x032EB104 ADRP X0, 0xE33000
	0x032EB108 LDR X0, [X0 + 0x2E0]
	0x032EB10C BL 0x1C16CF4
	0x032EB110 ADRP X0, 0xE3B000
	0x032EB114 LDR X0, [X0 + 0xD10]
	0x032EB118 BL 0x1C16CF4
	0x032EB11C ADRP X0, 0xE3B000
	0x032EB120 LDR X0, [X0 + 0xCC8]
	0x032EB124 BL 0x1C16CF4
	0x032EB128 ADRP X0, 0xE09000
	0x032EB12C LDR X0, [X0 + 0x7B8]
	0x032EB130 BL 0x1C16CF4
	0x032EB134 ADRP X0, 0xE3B000
	0x032EB138 LDR X0, [X0 + 0xD18]
	0x032EB13C BL 0x1C16CF4
	0x032EB140 ADRP X0, 0xE3B000
	0x032EB144 LDR X0, [X0 + 0xD20]
	0x032EB148 BL 0x1C16CF4
	0x032EB14C MOVZ W8, 0x1
	0x032EB150 STRB W8, [X23 + 0x9F1]
	0x032EB154 LDR X0, [X22]
	0x032EB158 STP X31, X31, [X31 + 0x8]
	0x032EB15C LDR W8, [X0 + 0xE0]
	0x032EB160 CBNZ W8, 0x32EB168
	0x032EB164 BL 0x1C16DFC
	0x032EB168 ADD X0, X31, 0x18
	0x032EB16C MOV X1, X31
	0x032EB170 BL 0x33DD2B0
	0x032EB174 TBZ X0, 0x0, 0x32EB1C4
	0x032EB178 ADRP X8, 0xE09000
	0x032EB17C LDR X8, [X8 + 0x7B8]
	0x032EB180 ADRP X20, 0xE3B000
	0x032EB184 LDR X19, [X31 + 0x18]
	0x032EB188 LDR X0, [X8]
	0x032EB18C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10F2000
	005 Move W8, [X20+2532]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE3C000
	012 Move X0, [X0+3816]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2532], W8
	016 Compare X19, 0
	017 JumpIfEqual {33}
	018 Move X8, 0xE3C000
	019 Move X8, [X8+3816]
	020 Move X0, [X8]
	021 Move X8, [X19]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Call 0x1C17F10
	024 Move X1, X19
	025 Move X20, X0
	026 Call SyncTextWriter..ctor, X0, X1
	027 Move X19, X20
	028 Move X0, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Return X0
	033 Move X0, 0xE0E000
	034 Move X0, [X0+1320]
	035 Call 0x1C17D08
	036 Call 0x1C17F10
	037 Move X19, X0
	038 Move X0, 0xE11000
	039 Move X0, [X0+2400]
	040 Call 0x1C17D08
	041 Move X1, X0
	042 Move X0, X19
	043 Move X2, X31
	044 Call ArgumentNullException..ctor, X0, X1
	045 Move X0, 0xE3C000
	046 Move X0, [X0+3824]
	047 Call 0x1C17D08
	048 Move X1, X0
	049 Move X0, X19
	050 Call 0x1C17DEC

Method: System.Void .cctor()

Disassembly:
	0x032EB20C LDR X8, [X19]
	0x032EB210 LDR X1, [X31 + 0x8]
	0x032EB214 LDP W2, W3, [X31 + 0x10]
	0x032EB218 LDR X9, [X8 + 0x358]
	0x032EB21C LDR X4, [X8 + 0x360]
	0x032EB220 MOV X0, X19
	0x032EB224 BLR X9
	0x032EB228 B 0x32EB264
	0x032EB22C ADRP X8, 0xE33000
	0x032EB230 LDR X8, [X8 + 0x2E0]
	0x032EB234 LDR X1, [X8]
	0x032EB238 ADD X0, X31, 0x20
	0x032EB23C BL 0x2984784
	0x032EB240 LDR X8, [X19]
	0x032EB244 MOV X2, X0
	0x032EB248 MOV X4, X1
	0x032EB24C LDR X9, [X8 + 0x368]
	0x032EB250 LDR X3, [X8 + 0x370]
	0x032EB254 MOV X0, X19
	0x032EB258 MOV X1, X2
	0x032EB25C MOV X2, X4
	0x032EB260 BLR X9
	0x032EB264 MOV X19, X31
	0x032EB268 MOV W8, W0
	0x032EB26C ORR X1, X8, 0x1FFFFFFFFFFFF
	0x032EB270 MOV X0, X19
	0x032EB274 LDP X20, X19, [X31 + 0x50]
	0x032EB278 LDP X22, X21, [X31 + 0x40]
	0x032EB27C LDP X30, X23, [X31 + 0x30]
	0x032EB280 ADD X31, X31, 0x60
	0x032EB284 RET
	0x032EB288 B 0x32EB29C
	0x032EB28C B 0x32EB29C
	0x032EB290 B 0x32EB29C
	0x032EB294 B 0x32EB29C
	0x032EB298 B 0x32EB29C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10F2000
	006 Move X21, 0xE3C000
	007 Move X20, 0xE3C000
	008 Move W8, [X19+2533]
	009 Move X21, [X21+3832]
	010 Move X20, [X20+3696]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xE3C000
	016 Move X0, [X0+3832]
	017 Call 0x1C17CF4
	018 Move X0, 0xE3C000
	019 Move X0, [X0+3696]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+2533], W8
	023 Move X0, [X21]
	024 Call 0x1C17F10
	025 Move X19, X0
	026 Call NullTextWriter..ctor, X0
	027 Move X8, [X20]
	028 Move X0, X31
	029 Move X8, [X8+184]
	030 Move [X8], X19
	031 Call Environment.get_NewLine
	032 Compare X0, 0
	033 JumpIfEqual {44}
	034 Move X1, X31
	035 Call String.ToCharArray, X0
	036 Move X8, [X20]
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X8, [X8+184]
	040 Move [X8+8], X0
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Return 
	044 Call 0x1C17F20

