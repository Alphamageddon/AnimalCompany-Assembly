Type: System.IO.EnumerationOptions

Method: System.IO.EnumerationOptions get_Compatible()

Disassembly:
	0x032EDC18 MOV W1, W20
	0x032EDC1C BLR X9
	0x032EDC20 LDR X1, [X28]
	0x032EDC24 MOV X20, X0
	0x032EDC28 BL 0x25FB4C0
	0x032EDC2C LDR X3, [X23]
	0x032EDC30 MOV X2, X0
	0x032EDC34 MOV X4, X1
	0x032EDC38 SUB X0, X29, 0x20
	0x032EDC3C MOV X1, X2
	0x032EDC40 MOV X2, X4
	0x032EDC44 BL 0x25FAF94
	0x032EDC48 LDUR X8, [X29 - 0x10]
	0x032EDC4C CBZ X8, 0x32EDCD8
	0x032EDC50 LDR X0, [X26]
	0x032EDC54 LDR W8, [X0 + 0xE0]
	0x032EDC58 CBNZ W8, 0x32EDC60
	0x032EDC5C BL 0x1C16DFC
	0x032EDC60 LDR X21, [X27]
	0x032EDC64 LDR X0, [X21 + 0x20]
	0x032EDC68 LDRB W8, [X0 + 0x135]
	0x032EDC6C TBNZ X8, 0x0, 0x32EDC74

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10F0000
	005 Move X19, 0xE32000
	006 Move W8, [X20+2561]
	007 Move X19, [X19+3384]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE32000
	013 Move X0, [X0+3384]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2561], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.IO.EnumerationOptions get_Default()

Disassembly:
	0x032EDC70 BL 0x1C5C684
	0x032EDC74 LDR X8, [X0 + 0xC0]
	0x032EDC78 LDR X0, [X8 + 0x8]
	0x032EDC7C LDRB W8, [X0 + 0x135]
	0x032EDC80 TBNZ X8, 0x0, 0x32EDC88
	0x032EDC84 BL 0x1C5C684
	0x032EDC88 LDR W8, [X0 + 0xE0]
	0x032EDC8C CBNZ W8, 0x32EDC94
	0x032EDC90 BL 0x1C16DFC
	0x032EDC94 LDR X0, [X21 + 0x20]
	0x032EDC98 LDRB W8, [X0 + 0x135]
	0x032EDC9C TBNZ X8, 0x0, 0x32EDCA4
	0x032EDCA0 BL 0x1C5C684
	0x032EDCA4 LDR X8, [X0 + 0xC0]
	0x032EDCA8 LDR X0, [X8 + 0x8]
	0x032EDCAC LDRB W8, [X0 + 0x135]
	0x032EDCB0 TBNZ X8, 0x0, 0x32EDCB8
	0x032EDCB4 BL 0x1C5C684
	0x032EDCB8 LDR X8, [X0 + 0xB8]
	0x032EDCBC LDR X0, [X8]
	0x032EDCC0 CBZ X0, 0x32EDDE8
	0x032EDCC4 LDR X8, [X0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10F0000
	005 Move X19, 0xE32000
	006 Move W8, [X20+2562]
	007 Move X19, [X19+3384]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE32000
	013 Move X0, [X0+3384]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2562], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8+16]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Void .ctor()

Disassembly:
	0x032EDCC8 LDUR X1, [X29 - 0x10]
	0x032EDCCC LDP X9, X3, [X8 + 0x188]
	0x032EDCD0 MOV W2, W31
	0x032EDCD4 BLR X9
	0x032EDCD8 LDR X1, [X28]
	0x032EDCDC STUR X20, [X29 - 0x10]
	0x032EDCE0 MOV X0, X20
	0x032EDCE4 BL 0x25FB4C0
	0x032EDCE8 MOV X21, X1
	0x032EDCEC STP X0, X1, [X29 - 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call Object..ctor, X0
	006 Move W8, 1
	007 Move W9, 6
	008 Move [X19+17], W8
	009 Move [X19+20], W9
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 

Method: System.Boolean get_RecurseSubdirectories()

Disassembly:
	0x032EDCF0 LDR X20, [X22]
	0x032EDCF4 CMP W21, W24

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_RecurseSubdirectories(System.Boolean value)

Disassembly:
	0x032EDCF8 B.CS 0x32EDD08
	0x032EDCFC MOV X0, X31
	0x032EDD00 BL 0x339D6EC

ISIL:
	001 And W8, W1, 1
	002 Move [X0+16], W8
	003 Return 

Method: System.Boolean get_IgnoreInaccessible()

Disassembly:
	0x032EDD04 LDUR W21, [X29 - 0x18]
	0x032EDD08 LDR X0, [X20 + 0x20]

ISIL:
	001 Move W0, [X0+17]
	002 Return X0

Method: System.Void set_IgnoreInaccessible(System.Boolean value)

Disassembly:
	0x032EDD0C LDUR X20, [X29 - 0x20]
	0x032EDD10 LDRB W8, [X0 + 0x135]
	0x032EDD14 TBNZ X8, 0x0, 0x32EDD1C

ISIL:
	001 And W8, W1, 1
	002 Move [X0+17], W8
	003 Return 

Method: System.IO.FileAttributes get_AttributesToSkip()

Disassembly:
	0x032EDD18 BL 0x1C5C684
	0x032EDD1C CBZ X19, 0x32EDDE0

ISIL:
	001 Move W0, [X0+20]
	002 Return X0

Method: System.Void set_AttributesToSkip(System.IO.FileAttributes value)

Disassembly:
	0x032EDD20 LDR X8, [X19]
	0x032EDD24 ADD X1, X20, W24, SXTW

ISIL:
	001 Move [X0+20], W1
	002 Return 

Method: System.IO.MatchType get_MatchType()

Disassembly:
	0x032EDD28 SUB W2, W21, W24
	0x032EDD2C LDR X9, [X8 + 0x368]

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Void set_MatchType(System.IO.MatchType value)

Disassembly:
	0x032EDD30 LDR X3, [X8 + 0x370]
	0x032EDD34 MOV X0, X19

ISIL:
	001 Move [X0+24], W1
	002 Return 

Method: System.IO.MatchCasing get_MatchCasing()

Disassembly:
	0x032EDD38 BLR X9
	0x032EDD3C CBZ W0, 0x32EDD4C

ISIL:
	001 Move W0, [X0+28]
	002 Return X0

Method: System.Boolean get_ReturnSpecialDirectories()

Disassembly:
	0x032EDD40 LDUR W21, [X29 - 0x18]
	0x032EDD44 ADD W24, W0, W24

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void .cctor()

Disassembly:
	0x032EDD48 B 0x32EDB58
	0x032EDD4C ADRP X9, 0xE31000
	0x032EDD50 LDUR W8, [X29 - 0x18]
	0x032EDD54 LDR X9, [X9 + 0x2F0]
	0x032EDD58 CMP W8, W24
	0x032EDD5C LDR X19, [X9]
	0x032EDD60 B.CS 0x32EDD6C
	0x032EDD64 MOV X0, X31
	0x032EDD68 BL 0x339D6EC
	0x032EDD6C LDR X0, [X19 + 0x20]
	0x032EDD70 LDUR X19, [X29 - 0x20]
	0x032EDD74 LDRB W8, [X0 + 0x135]
	0x032EDD78 TBNZ X8, 0x0, 0x32EDD80
	0x032EDD7C BL 0x1C5C684
	0x032EDD80 ADRP X8, 0xE3A000
	0x032EDD84 LDR X8, [X8 + 0x30]
	0x032EDD88 LDR X1, [X8]
	0x032EDD8C MOV W8, W24
	0x032EDD90 STP X19, X8, [X29 - 0x30]
	0x032EDD94 SUB X0, X29, 0x30
	0x032EDD98 BL 0x31A8580
	0x032EDD9C MOV X19, X0
	0x032EDDA0 SUB X0, X29, 0x40
	0x032EDDA4 BL 0x1BB7474
	0x032EDDA8 LDUR X8, [X29 - 0x48]
	0x032EDDAC LDR X8, [X8 + 0x28]
	0x032EDDB0 LDUR X9, [X29 - 0x8]
	0x032EDDB4 CMP X8, X9
	0x032EDDB8 B.NE 0x32EDDEC
	0x032EDDBC MOV X0, X19
	0x032EDDC0 ADD X31, X29, 0x0
	0x032EDDC4 LDP X20, X19, [X31 + 0x50]
	0x032EDDC8 LDP X22, X21, [X31 + 0x40]
	0x032EDDCC LDP X24, X23, [X31 + 0x30]
	0x032EDDD0 LDP X26, X25, [X31 + 0x20]
	0x032EDDD4 LDP X28, X27, [X31 + 0x10]
	0x032EDDD8 LDP X29, X30, [X31], #0x60
	0x032EDDDC RET
	0x032EDDE0 BL 0x1C16F20
	0x032EDDE4 BL 0x1C16F20
	0x032EDDE8 BL 0x1C16F20
	0x032EDDEC BL 0x3EB1B20
	0x032EDDF0 B 0x32EDE30
	0x032EDDF4 B 0x32EDE30
	0x032EDDF8 B 0x32EDE30
	0x032EDDFC B 0x32EDE30
	0x032EDE00 B 0x32EDE30
	0x032EDE04 B 0x32EDE30
	0x032EDE08 B 0x32EDE30
	0x032EDE0C B 0x32EDE30

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0x10F0000
	007 Move X20, 0xE32000
	008 Move W8, [X19+2563]
	009 Move X20, [X20+3384]
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE32000
	015 Move X0, [X0+3384]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+2563], W8
	019 Move X0, [X20]
	020 Call 0x1C17F10
	021 Move X1, X31
	022 Move X19, X0
	023 Call Object..ctor, X0
	024 Move X8, -41938944
	025 Move V8, [X8+1600]
	026 Move [X19+17], W31
	027 Move [X19+20], D8
	028 Move X8, [X20]
	029 Move X8, [X8+184]
	030 Move [X8], X19
	031 Move X0, [X20]
	032 Call 0x1C17F10
	033 Move X1, X31
	034 Move X19, X0
	035 Call Object..ctor, X0
	036 Move W21, 1
	037 NotImplemented "Instruction STRH not yet implemented."
	038 Move [X19+20], D8
	039 Move X0, [X20]
	040 Move X8, [X0+184]
	041 Move [X8+8], X19
	042 Call 0x1C17F10
	043 Move X1, X31
	044 Move X19, X0
	045 Call Object..ctor, X0
	046 Move W8, 6
	047 Move [X19+17], W21
	048 Move [X19+20], W8
	049 Move X8, [X20]
	050 Move X30, [X31+16]
	051 Move X21, [X31+24]
	052 Move X8, [X8+184]
	053 Move [X8+16], X19
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move V8, [X31+48]
	057 Return 

