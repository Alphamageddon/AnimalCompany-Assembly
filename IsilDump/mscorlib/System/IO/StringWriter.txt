Type: System.IO.StringWriter

Method: System.Void .ctor()

Disassembly:
	0x032F8A6C MOV X21, X1
	0x032F8A70 MOV X23, X0
	0x032F8A74 TBNZ X8, 0x0, 0x32F8A98
	0x032F8A78 ADRP X0, 0xE2A000
	0x032F8A7C LDR X0, [X0 + 0xD10]
	0x032F8A80 BL 0x1C16CF4
	0x032F8A84 ADRP X0, 0xE2F000
	0x032F8A88 LDR X0, [X0 + 0x428]
	0x032F8A8C BL 0x1C16CF4
	0x032F8A90 MOVZ W8, 0x1
	0x032F8A94 STRB W8, [X25 + 0xA75]
	0x032F8A98 LDR X8, [X26]
	0x032F8A9C STR X8, [X23 + 0x30]
	0x032F8AA0 LDR X0, [X24]
	0x032F8AA4 LDR W8, [X0 + 0xE0]
	0x032F8AA8 CBNZ W8, 0x32F8AB0
	0x032F8AAC BL 0x1C16DFC
	0x032F8AB0 MOV X0, X23
	0x032F8AB4 MOV X1, X31
	0x032F8AB8 BL 0x33C011C
	0x032F8ABC AND W5, W22, 0x1
	0x032F8AC0 MOV X0, X23
	0x032F8AC4 MOV X1, X21
	0x032F8AC8 MOV W2, W20
	0x032F8ACC MOV W4, W19
	0x032F8AD0 LDP X20, X19, [X31 + 0x40]
	0x032F8AD4 LDP X22, X21, [X31 + 0x30]
	0x032F8AD8 LDP X24, X23, [X31 + 0x20]
	0x032F8ADC LDP X26, X25, [X31 + 0x10]
	0x032F8AE0 MOV W3, W31
	0x032F8AE4 MOV W6, W31
	0x032F8AE8 LDR X30, [X31], #0x50
	0x032F8AEC B 0x32F8004
	0x032F8AF0 STR X30, [X31 - 0x40]!
	0x032F8AF4 STP X24, X23, [X31 + 0x10]
	0x032F8AF8 STP X22, X21, [X31 + 0x20]
	0x032F8AFC STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x10E5000
	007 Move X22, 0xDFC000
	008 Move X21, 0xDFE000
	009 Move W8, [X20+2673]
	010 Move X22, [X22+2288]
	011 Move X21, [X21+3144]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xDFE000
	018 Move X0, [X0+3144]
	019 Call 0x1C17CF4
	020 Move X0, 0xDFC000
	021 Move X0, [X0+2288]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2673], W8
	025 Move X0, [X22]
	026 Call 0x1C17F10
	027 Move X1, X31
	028 Move X20, X0
	029 Call StringBuilder..ctor, X0
	030 Move X0, [X21]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X31
	036 Call CultureInfo.get_CurrentCulture
	037 Move X2, X0
	038 Move X0, X19
	039 Move X1, X20
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X30, [X31+48]

Method: System.Void .ctor(System.Text.StringBuilder sb)

Disassembly:
	0x032F8BE4 CBNZ W9, 0x32F8BF0
	0x032F8BE8 MOV X0, X8
	0x032F8BEC BL 0x1C16DFC
	0x032F8BF0 MOV W0, W21
	0x032F8BF4 BL 0x32F4A0C
	0x032F8BF8 TBZ X0, 0x0, 0x32F8CA0
	0x032F8BFC LDR W8, [X19 + 0x10]
	0x032F8C00 CMP W8, 0x2
	0x032F8C04 B.EQ 0x32F9130
	0x032F8C08 MOV X0, X19
	0x032F8C0C MOV W1, W31
	0x032F8C10 MOV X2, X31
	0x032F8C14 BL 0x3222A1C
	0x032F8C18 MOV W1, W0
	0x032F8C1C MOVZ W2, 0x2
	0x032F8C20 MOV X0, X19
	0x032F8C24 MOV X3, X31
	0x032F8C28 BL 0x322BDA8
	0x032F8C2C TBNZ X0, 0x1F, 0x32F9130
	0x032F8C30 MOV X0, X19
	0x032F8C34 MOV W1, W31
	0x032F8C38 MOV X2, X31
	0x032F8C3C BL 0x3222A1C
	0x032F8C40 LDR X8, [X23]
	0x032F8C44 MOV W21, W0
	0x032F8C48 LDR W9, [X8 + 0xE0]
	0x032F8C4C CBNZ W9, 0x32F8C5C
	0x032F8C50 MOV X0, X8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x10E5000
	007 Move X22, 0xDFE000
	008 Move W8, [X21+2674]
	009 Move X22, [X22+3144]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xDFE000
	017 Move X0, [X0+3144]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2674], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X31
	027 Call CultureInfo.get_CurrentCulture
	028 Move X2, X0
	029 Move X0, X20
	030 Move X1, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Call StringWriter..ctor, X0, X1, X2
	037 Return 

Method: System.Void .ctor(System.Text.StringBuilder sb, System.IFormatProvider formatProvider)

Disassembly:
	0x032F8B00 ADRP X20, 0x10E4000
	0x032F8B04 LDRB W8, [X20 + 0xA9E]
	0x032F8B08 MOV X19, X0
	0x032F8B0C TBNZ X8, 0x0, 0x32F8B48
	0x032F8B10 ADRP X0, 0xDFD000
	0x032F8B14 LDR X0, [X0 + 0x170]
	0x032F8B18 BL 0x1C16CF4
	0x032F8B1C ADRP X0, 0xE29000
	0x032F8B20 LDR X0, [X0 + 0xFA8]
	0x032F8B24 BL 0x1C16CF4
	0x032F8B28 ADRP X0, 0xE22000
	0x032F8B2C LDR X0, [X0 + 0x1D0]
	0x032F8B30 BL 0x1C16CF4
	0x032F8B34 ADRP X0, 0xE2F000
	0x032F8B38 LDR X0, [X0 + 0x4A8]
	0x032F8B3C BL 0x1C16CF4
	0x032F8B40 MOVZ W8, 0x1
	0x032F8B44 STRB W8, [X20 + 0xA9E]
	0x032F8B48 STR X31, [X31 + 0x8]
	0x032F8B4C CBZ X19, 0x32F90AC
	0x032F8B50 MOV X0, X19
	0x032F8B54 MOV X1, X31
	0x032F8B58 BL 0x322B8DC
	0x032F8B5C CBZ X0, 0x32F90A8
	0x032F8B60 LDR W8, [X0 + 0x10]
	0x032F8B64 CBZ W8, 0x32F90E0
	0x032F8B68 LDR W8, [X19 + 0x10]
	0x032F8B6C ADRP X23, 0xE22000
	0x032F8B70 LDR X23, [X23 + 0x1D0]
	0x032F8B74 MOV X0, X19
	0x032F8B78 SUB W1, W8, 0x1
	0x032F8B7C MOV X2, X31
	0x032F8B80 BL 0x3222A1C
	0x032F8B84 LDR W8, [X19 + 0x10]
	0x032F8B88 MOV W20, W0
	0x032F8B8C CMP W8, 0x2
	0x032F8B90 B.LT 0x32F8CA0
	0x032F8B94 MOV X0, X19
	0x032F8B98 MOV W1, W31
	0x032F8B9C MOV X2, X31
	0x032F8BA0 BL 0x3222A1C
	0x032F8BA4 LDR X8, [X23]
	0x032F8BA8 MOV W21, W0
	0x032F8BAC LDR W9, [X8 + 0xE0]
	0x032F8BB0 CBNZ W9, 0x32F8BBC
	0x032F8BB4 MOV X0, X8
	0x032F8BB8 BL 0x1C16DFC
	0x032F8BBC MOV W0, W21
	0x032F8BC0 BL 0x32F4A0C
	0x032F8BC4 TBZ X0, 0x0, 0x32F8CA0
	0x032F8BC8 MOVZ W1, 0x1
	0x032F8BCC MOV X0, X19
	0x032F8BD0 MOV X2, X31
	0x032F8BD4 BL 0x3222A1C
	0x032F8BD8 LDR X8, [X23]
	0x032F8BDC MOV W21, W0
	0x032F8BE0 LDR W9, [X8 + 0xE0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x10E5000
	008 Move X23, 0xE2F000
	009 Move W8, [X22+2675]
	010 Move X23, [X23+3696]
	011 Move X21, X2
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xE2F000
	019 Move X0, [X0+3696]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2675], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X1, X21
	030 Move X2, X31
	031 Call TextWriter..ctor, X0, X1
	032 Compare X20, 0
	033 JumpIfEqual {44}
	034 Move W8, 1
	035 Move [X19+48], X20
	036 Move [X19+56], W8
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X30, [X31+48]
	042 Move X23, [X31+56]
	043 Return 
	044 Move X0, 0xE2F000
	045 Move X0, [X0+3136]
	046 Call 0x1C17D08
	047 Move X1, X31
	048 Call Environment.GetResourceString, X0
	049 Move X19, X0
	050 Move X0, 0xE01000
	051 Move X0, [X0+1320]
	052 Call 0x1C17D08
	053 Call 0x1C17F10
	054 Move X20, X0
	055 Move X0, 0xE30000
	056 Move X0, [X0+1040]
	057 Call 0x1C17D08
	058 Move X1, X0
	059 Move X0, X20
	060 Move X2, X19
	061 Move X3, X31
	062 Call ArgumentNullException..ctor, X0, X1, X2
	063 Move X0, 0xE30000
	064 Move X0, [X0+1048]
	065 Call 0x1C17D08
	066 Move X1, X0
	067 Move X0, X20
	068 Call 0x1C17DEC

Method: System.Void Close()

Disassembly:
	0x032F8C54 BL 0x1C16DFC
	0x032F8C58 LDR X8, [X23]
	0x032F8C5C LDR X9, [X8 + 0xB8]
	0x032F8C60 LDRH W2, [X9 + 0xA]

ISIL:
	001 Move X8, [X0]
	002 Move W1, 1
	003 Move X3, [X8+456]
	004 Move X2, [X8+464]
	005 CallNoReturn X3

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x032F8C64 CMP W2, W21, UXTH
	0x032F8C68 B.EQ 0x32F8F4C
	0x032F8C6C LDR W10, [X8 + 0xE0]
	0x032F8C70 CBNZ W10, 0x32F8C88

ISIL:
	001 And W1, W1, 1
	002 Move X2, X31
	003 Move [X0+56], W31
	004 Call TextWriter.Dispose, X0, X1
	005 Return 

Method: System.Void Write(System.Char value)

Disassembly:
	0x032F8C74 MOV X0, X8
	0x032F8C78 BL 0x1C16DFC
	0x032F8C7C LDR X8, [X23]
	0x032F8C80 LDR X9, [X8 + 0xB8]
	0x032F8C84 LDRH W2, [X9 + 0xA]
	0x032F8C88 LDRH W1, [X9 + 0x8]
	0x032F8C8C MOV X0, X19
	0x032F8C90 MOV X3, X31
	0x032F8C94 BL 0x32296D0
	0x032F8C98 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+56]
	003 Compare W8, 0
	004 JumpIfEqual {12}
	005 Move X0, [X0+48]
	006 Compare X0, 0
	007 JumpIfEqual {13}
	008 Move X2, X31
	009 Move X30, [X31+16]
	010 Call StringBuilder.Append, X0, X1
	011 Return 
	012 Call __Error.WriterClosed
	013 Call 0x1C17F20

Method: System.Void Write(System.Char[] buffer, System.Int32 index, System.Int32 count)

Disassembly:
	0x032F8C9C B 0x32F8F4C
	0x032F8CA0 LDR X0, [X23]
	0x032F8CA4 LDR W8, [X0 + 0xE0]
	0x032F8CA8 CBNZ W8, 0x32F8CB0
	0x032F8CAC BL 0x1C16DFC
	0x032F8CB0 MOV X0, X19
	0x032F8CB4 BL 0x32FD064
	0x032F8CB8 TBZ X0, 0x0, 0x32F8DC0
	0x032F8CBC LDR X0, [X23]
	0x032F8CC0 LDR W8, [X0 + 0xE0]
	0x032F8CC4 CBNZ W8, 0x32F8CD0
	0x032F8CC8 BL 0x1C16DFC
	0x032F8CCC LDR X0, [X23]
	0x032F8CD0 LDR X8, [X0 + 0xB8]
	0x032F8CD4 LDRH W8, [X8 + 0xA]
	0x032F8CD8 CMP W8, 0x5C
	0x032F8CDC B.NE 0x32F8F4C
	0x032F8CE0 LDR W8, [X19 + 0x10]
	0x032F8CE4 CMP W8, 0x2
	0x032F8CE8 B.LT 0x32F8F4C
	0x032F8CEC MOV X0, X19
	0x032F8CF0 MOV W1, W31
	0x032F8CF4 MOV X2, X31
	0x032F8CF8 BL 0x3222A1C
	0x032F8CFC LDR X8, [X23]
	0x032F8D00 MOV W21, W0
	0x032F8D04 LDR W9, [X8 + 0xE0]
	0x032F8D08 CBNZ W9, 0x32F8D14
	0x032F8D0C MOV X0, X8
	0x032F8D10 BL 0x1C16DFC
	0x032F8D14 MOV W0, W21
	0x032F8D18 BL 0x32F4A0C
	0x032F8D1C TBZ X0, 0x0, 0x32F8F4C
	0x032F8D20 MOVZ W1, 0x1
	0x032F8D24 MOV X0, X19
	0x032F8D28 MOV X2, X31
	0x032F8D2C BL 0x3222A1C
	0x032F8D30 LDR X8, [X23]
	0x032F8D34 MOV W21, W0
	0x032F8D38 LDR W9, [X8 + 0xE0]
	0x032F8D3C CBNZ W9, 0x32F8D48
	0x032F8D40 MOV X0, X8
	0x032F8D44 BL 0x1C16DFC
	0x032F8D48 MOV W0, W21
	0x032F8D4C BL 0x32F4A0C
	0x032F8D50 TBNZ X0, 0x0, 0x32F8F4C
	0x032F8D54 MOV X0, X31
	0x032F8D58 BL 0x32EC85C
	0x032F8D5C CBZ X0, 0x32F90A8
	0x032F8D60 MOVZ W1, 0x1
	0x032F8D64 MOV X2, X31
	0x032F8D68 MOV X21, X0
	0x032F8D6C BL 0x3222A1C
	0x032F8D70 LDR X8, [X23]
	0x032F8D74 MOV W22, W0
	0x032F8D78 LDR W9, [X8 + 0xE0]
	0x032F8D7C CBNZ W9, 0x32F8D8C
	0x032F8D80 MOV X0, X8
	0x032F8D84 BL 0x1C16DFC
	0x032F8D88 LDR X8, [X23]
	0x032F8D8C LDR X8, [X8 + 0xB8]
	0x032F8D90 LDRH W8, [X8 + 0x18]
	0x032F8D94 CMP W8, W22, UXTH
	0x032F8D98 B.NE 0x32F905C
	0x032F8D9C MOVZ W2, 0x2
	0x032F8DA0 MOV X0, X21
	0x032F8DA4 MOV W1, W31
	0x032F8DA8 MOV X3, X31
	0x032F8DAC BL 0x3228DE4
	0x032F8DB0 MOV X1, X19
	0x032F8DB4 MOV X2, X31
	0x032F8DB8 BL 0x321B938
	0x032F8DBC B 0x32F8C98
	0x032F8DC0 MOV X0, X31
	0x032F8DC4 BL 0x33C1A14
	0x032F8DC8 TBZ X0, 0x0, 0x32F8DD4
	0x032F8DCC MOVZ W24, 0x1
	0x032F8DD0 B 0x32F8E8C
	0x032F8DD4 MOV W21, W31
	0x032F8DD8 MOVZ W1, 0x2E
	0x032F8DDC MOV X0, X19
	0x032F8DE0 MOV W2, W21
	0x032F8DE4 MOV X3, X31
	0x032F8DE8 BL 0x322BDA8
	0x032F8DEC ADDS W31, W0, 0x1
	0x032F8DF0 B.EQ 0x32F8E80
	0x032F8DF4 LDR W8, [X19 + 0x10]
	0x032F8DF8 ADD W21, W0, 0x1
	0x032F8DFC CMP W21, W8
	0x032F8E00 B.EQ 0x32F8E84
	0x032F8E04 MOV X0, X19
	0x032F8E08 MOV W1, W21
	0x032F8E0C MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {29}
	006 Move TEMP, X2
	007 And TEMP, TEMP, -2147483648
	008 Compare TEMP, -2147483648
	009 JumpIfEqual {48}
	010 Move TEMP, X3
	011 And TEMP, TEMP, -2147483648
	012 Compare TEMP, -2147483648
	013 JumpIfEqual {61}
	014 Move W8, [X1+24]
	015 Subtract W8, W8, W2
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W8, [X0+56]
	018 Compare W8, 0
	019 JumpIfEqual {100}
	020 Move X0, [X0+48]
	021 Compare X0, 0
	022 JumpIfEqual {101}
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X4, X31
	026 Move X30, [X31+32]
	027 Call StringBuilder.Append, X0, X1, X2, X3
	028 Return 
	029 Move X0, 0xE2F000
	030 Move X0, [X0+3136]
	031 Call 0x1C17D08
	032 Move X1, X31
	033 Call Environment.GetResourceString, X0
	034 Move X19, X0
	035 Move X0, 0xE01000
	036 Move X0, [X0+1320]
	037 Call 0x1C17D08
	038 Call 0x1C17F10
	039 Move X20, X0
	040 Move X0, 0xE27000
	041 Move X0, [X0+3912]
	042 Call 0x1C17D08
	043 Move X1, X0
	044 Move X0, X20
	045 Move X2, X19
	046 Move X3, X31
	047 Call ArgumentNullException..ctor, X0, X1, X2
	048 Move X0, 0xE24000
	049 Move X0, [X0+1648]
	050 Call 0x1C17D08
	051 Move X1, X31
	052 Call Environment.GetResourceString, X0
	053 Move X19, X0
	054 Move X0, 0xE04000
	055 Move X0, [X0+1888]
	056 Call 0x1C17D08
	057 Call 0x1C17F10
	058 Move X20, X0
	059 Move X0, 0xE07000
	060 Move X0, [X0+304]
	061 Move X0, 0xE24000
	062 Move X0, [X0+1648]
	063 Call 0x1C17D08
	064 Move X1, X31
	065 Call Environment.GetResourceString, X0
	066 Move X19, X0
	067 Move X0, 0xE04000
	068 Move X0, [X0+1888]
	069 Call 0x1C17D08
	070 Call 0x1C17F10
	071 Move X20, X0
	072 Move X0, 0xE24000
	073 Move X0, [X0+1608]
	074 Call 0x1C17D08
	075 Move X1, X0
	076 Move X0, X20
	077 Move X2, X19
	078 Move X3, X31
	079 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	080 Move X0, 0xE24000
	081 Move X0, [X0+1888]
	082 Call 0x1C17D08
	083 Move X1, X31
	084 Call Environment.GetResourceString, X0
	085 Move X19, X0
	086 Move X0, 0xE04000
	087 Move X0, [X0+1400]
	088 Call 0x1C17D08
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X2, X31
	092 Move X20, X0
	093 Call ArgumentException..ctor, X0, X1
	094 Move X0, 0xE30000
	095 Move X0, [X0+1056]
	096 Call 0x1C17D08
	097 Move X1, X0
	098 Move X0, X20
	099 Call 0x1C17DEC
	100 Call __Error.WriterClosed
	101 Call 0x1C17F20

Method: System.Void Write(System.String value)

Disassembly:
	0x032F8E10 BL 0x3222A1C
	0x032F8E14 LDR X8, [X23]
	0x032F8E18 MOV W22, W0
	0x032F8E1C LDR W9, [X8 + 0xE0]
	0x032F8E20 CBNZ W9, 0x32F8E30
	0x032F8E24 MOV X0, X8
	0x032F8E28 BL 0x1C16DFC
	0x032F8E2C LDR X8, [X23]
	0x032F8E30 LDR X8, [X8 + 0xB8]
	0x032F8E34 LDRH W8, [X8 + 0xA]
	0x032F8E38 CMP W8, W22, UXTH
	0x032F8E3C B.EQ 0x32F8E84
	0x032F8E40 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+56]
	003 Compare W8, 0
	004 JumpIfEqual {16}
	005 Compare X1, 0
	006 JumpIfEqual {14}
	007 Move X0, [X0+48]
	008 Compare X0, 0
	009 JumpIfEqual {17}
	010 Move X2, X31
	011 Move X30, [X31+16]
	012 Call StringBuilder.Append, X0, X1
	013 Return 
	014 Move X30, [X31+16]
	015 Return 
	016 Call __Error.WriterClosed
	017 Call 0x1C17F20

Method: System.String ToString()

Disassembly:
	0x032F8E44 MOV W1, W21
	0x032F8E48 MOV X2, X31
	0x032F8E4C BL 0x3222A1C
	0x032F8E50 LDR X8, [X23]
	0x032F8E54 MOV W22, W0
	0x032F8E58 LDR W9, [X8 + 0xE0]
	0x032F8E5C CBNZ W9, 0x32F8E6C
	0x032F8E60 MOV X0, X8

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+360]
	007 Move X1, [X8+368]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

