Type: System.IO.StreamWriter

Method: System.Void CheckAsyncTaskInProgress()

Disassembly:
	0x032E8EE8 MOV X1, X0
	0x032E8EEC MOV X0, X22
	0x032E8EF0 MOV X2, X31
	0x032E8EF4 BL 0x3395194
	0x032E8EF8 TBZ X0, 0x0, 0x32E8F24
	0x032E8EFC MOV X0, X21
	0x032E8F00 MOV X1, X20
	0x032E8F04 MOV X2, X19
	0x032E8F08 LDP X20, X19, [X31 + 0x30]
	0x032E8F0C LDP X22, X21, [X31 + 0x20]
	0x032E8F10 LDP X24, X23, [X31 + 0x10]
	0x032E8F14 MOV W3, W31
	0x032E8F18 MOV X4, X31
	0x032E8F1C LDR X30, [X31], #0x40
	0x032E8F20 B 0x32EDE70
	0x032E8F24 MOV X0, X21
	0x032E8F28 MOV X1, X20
	0x032E8F2C MOV X2, X19
	0x032E8F30 LDP X20, X19, [X31 + 0x30]
	0x032E8F34 LDP X22, X21, [X31 + 0x20]
	0x032E8F38 LDP X24, X23, [X31 + 0x10]
	0x032E8F3C LDR X30, [X31], #0x40
	0x032E8F40 B 0x32E8F44
	0x032E8F44 SUB X31, X31, 0x50
	0x032E8F48 STP X2, X30, [X31 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10F5000
	005 Move W8, [X20+2502]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE3A000
	012 Move X0, [X0+3336]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2502], W8
	016 Move X0, [X19+104]
	017 Compare X0, 0
	018 JumpIfEqual {29}
	019 Move X1, X31
	020 Call Task.get_IsCompleted, X0
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {30}
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return 
	029 Call 0x1C17F20
	030 Move X8, 0xE3A000
	031 Move X8, [X8+3336]
	032 Move X0, [X8]
	033 Call 0x19913D0
	034 Call StreamWriter.ThrowAsyncIOInProgress

Method: System.Void ThrowAsyncIOInProgress()

Disassembly:
	0x032E8F4C STP X22, X21, [X31 + 0x30]
	0x032E8F50 STP X20, X19, [X31 + 0x40]
	0x032E8F54 ADRP X22, 0x10F4000
	0x032E8F58 STR X1, [X31 + 0x10]
	0x032E8F5C ADRP X21, 0xE36000
	0x032E8F60 LDRB W8, [X22 + 0x9E3]
	0x032E8F64 LDR X21, [X21 + 0xD60]
	0x032E8F68 MOV X20, X2
	0x032E8F6C MOV X19, X0
	0x032E8F70 TBNZ X8, 0x0, 0x32E8FB8
	0x032E8F74 ADRP X0, 0xE36000
	0x032E8F78 LDR X0, [X0 + 0xD58]
	0x032E8F7C BL 0x1C16CF4
	0x032E8F80 ADRP X0, 0xE36000
	0x032E8F84 LDR X0, [X0 + 0xD60]
	0x032E8F88 BL 0x1C16CF4
	0x032E8F8C ADRP X0, 0xE3A000
	0x032E8F90 LDR X0, [X0 + 0x198]
	0x032E8F94 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xE0C000
	004 Move X0, [X0+1456]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xE3F000
	009 Move X0, [X0+3568]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call InvalidOperationException..ctor, X0, X1
	015 Move X0, 0xE3F000
	016 Move X0, [X0+3688]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Text.Encoding get_UTF8NoBOM()

Disassembly:
	0x032E8F98 ADRP X0, 0xE3A000
	0x032E8F9C LDR X0, [X0 + 0x28]
	0x032E8FA0 BL 0x1C16CF4
	0x032E8FA4 ADRP X0, 0xE36000
	0x032E8FA8 LDR X0, [X0 + 0xD98]
	0x032E8FAC BL 0x1C16CF4
	0x032E8FB0 MOVZ W8, 0x1
	0x032E8FB4 STRB W8, [X22 + 0x9E3]
	0x032E8FB8 LDR X0, [X21]
	0x032E8FBC STR X31, [X31 + 0x28]
	0x032E8FC0 ADRP X21, 0xE36000
	0x032E8FC4 LDR W8, [X0 + 0xE0]
	0x032E8FC8 LDR X21, [X21 + 0xD58]
	0x032E8FCC CBNZ W8, 0x32E8FD4
	0x032E8FD0 BL 0x1C16DFC
	0x032E8FD4 LDR X21, [X21]
	0x032E8FD8 LDR X0, [X21 + 0x20]
	0x032E8FDC LDRB W8, [X0 + 0x135]
	0x032E8FE0 TBNZ X8, 0x0, 0x32E8FE8
	0x032E8FE4 BL 0x1C5C684

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x10F5000
	005 Move X20, 0xE3B000
	006 Move W8, [X19+2503]
	007 Move X20, [X20+2520]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE3B000
	013 Move X0, [X0+2520]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+2503], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X0, X31
	025 Move X30, [X31+32]
	026 Call EncodingHelper.get_UTF8Unmarked
	027 Return X0

Method: System.Void .ctor()

Disassembly:
	0x032E8FE8 LDR X8, [X0 + 0xC0]
	0x032E8FEC LDR X0, [X8 + 0x8]
	0x032E8FF0 LDRB W8, [X0 + 0x135]
	0x032E8FF4 TBNZ X8, 0x0, 0x32E8FFC
	0x032E8FF8 BL 0x1C5C684
	0x032E8FFC LDR W8, [X0 + 0xE0]
	0x032E9000 CBNZ W8, 0x32E9008
	0x032E9004 BL 0x1C16DFC
	0x032E9008 LDR X0, [X21 + 0x20]
	0x032E900C LDRB W8, [X0 + 0x135]
	0x032E9010 TBNZ X8, 0x0, 0x32E9018
	0x032E9014 BL 0x1C5C684
	0x032E9018 LDR X8, [X0 + 0xC0]
	0x032E901C LDR X0, [X8 + 0x8]
	0x032E9020 LDRB W8, [X0 + 0x135]
	0x032E9024 TBNZ X8, 0x0, 0x32E902C
	0x032E9028 BL 0x1C5C684
	0x032E902C LDR X8, [X0 + 0xB8]
	0x032E9030 LDR X0, [X8]
	0x032E9034 CBZ X0, 0x32E90BC
	0x032E9038 LDR X8, [X0]
	0x032E903C ADRP X21, 0xE39000
	0x032E9040 MOV W1, W20
	0x032E9044 LDP X9, X2, [X8 + 0x178]
	0x032E9048 LDR X21, [X21 + 0x198]
	0x032E904C BLR X9
	0x032E9050 ADD X8, X31, 0x28
	0x032E9054 STR X0, [X31 + 0x28]
	0x032E9058 STP X31, X8, [X31]
	0x032E905C CBZ X0, 0x32E906C
	0x032E9060 LDR W2, [X0 + 0x18]
	0x032E9064 ADD X1, X0, 0x20
	0x032E9068 B 0x32E9074
	0x032E906C MOV X1, X31
	0x032E9070 MOV X2, X31
	0x032E9074 LDR X3, [X21]
	0x032E9078 ADD X0, X31, 0x10
	0x032E907C BL 0x25BEC30
	0x032E9080 LDR X8, [X19]
	0x032E9084 LDR X1, [X31 + 0x28]
	0x032E9088 LDR W3, [X31 + 0x18]
	0x032E908C LDR X9, [X8 + 0x218]
	0x032E9090 LDR X4, [X8 + 0x220]
	0x032E9094 MOV X0, X19
	0x032E9098 MOV W2, W31
	0x032E909C BLR X9
	0x032E90A0 ADD X0, X31, 0x0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10F5000
	006 Move X20, 0xE0D000
	007 Move W8, [X21+2504]
	008 Move X20, [X20+1976]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xE0C000
	015 Move X0, [X0+1976]
	016 Call 0x1C17CF4
	017 Move X0, 0xE3E000
	018 Move X0, [X0+3696]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+2504], W8
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X21, 0x10F0000
	028 Move W8, [X21+3869]
	029 Compare W8, 0
	030 JumpIfNotEqual {36}
	031 Move X0, 0xE0C000
	032 Move X0, [X0+1976]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X21+3869], W8
	036 Move X0, [X20]
	037 Move X21, 0xE3E000
	038 Move W8, [X0+224]
	039 Move X21, [X21+3696]
	040 Compare W8, 0
	041 JumpIfNotEqual {44}
	042 Call 0x1C17DFC
	043 Move X0, [X20]
	044 Move X8, [X0+184]
	045 Move X8, [X8+48]
	046 Move [X19+104], X8
	047 Move X0, [X21]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Move X0, X19
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X1, X31
	056 Move X30, [X31+32]
	057 Move X21, [X31+40]

Method: System.Void .ctor(System.IO.Stream stream)

Disassembly:
	0x032E912C TBNZ X8, 0x0, 0x32E915C
	0x032E9130 ADRP X0, 0xE0A000
	0x032E9134 LDR X0, [X0 + 0x5A8]
	0x032E9138 BL 0x1C16CF4
	0x032E913C ADRP X0, 0xE39000
	0x032E9140 LDR X0, [X0 + 0x20]
	0x032E9144 BL 0x1C16CF4
	0x032E9148 ADRP X0, 0xE39000
	0x032E914C LDR X0, [X0 + 0x28]
	0x032E9150 BL 0x1C16CF4
	0x032E9154 MOVZ W8, 0x1
	0x032E9158 STRB W8, [X23 + 0x9D4]
	0x032E915C MOV X0, X19
	0x032E9160 BL 0x32E7EE8
	0x032E9164 CMP W21, 0x4
	0x032E9168 B.GT 0x32E917C
	0x032E916C LDP W8, W9, [X19 + 0x58]
	0x032E9170 SUB W9, W9, W8
	0x032E9174 CMP W9, W21
	0x032E9178 B.GE 0x32E9248
	0x032E917C LDR X25, [X19 + 0x50]
	0x032E9180 CBZ X25, 0x32E9378
	0x032E9184 ADRP X8, 0xE39000
	0x032E9188 LDR X8, [X8 + 0x20]
	0x032E918C MOV X0, X22
	0x032E9190 MOV X1, X21
	0x032E9194 LDR X2, [X8]
	0x032E9198 BL 0x2218CF8
	0x032E919C LDR X8, [X25 + 0x18]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x10F4000
	007 Move X22, 0xE39000
	008 Move W8, [X21+2505]
	009 Move X22, [X22+3336]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xE39000
	017 Move X0, [X0+3336]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2505], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Call StreamWriter.get_UTF8NoBOM
	027 Move X2, X0
	028 Move X0, X20
	029 Move X1, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move W3, 1024
	035 Move W4, W31
	036 Move X30, [X31+48]

Method: System.Void .ctor(System.IO.Stream stream, System.Text.Encoding encoding)

Disassembly:
	0x032E93A0 MOV X1, X31
	0x032E93A4 MOV X3, X31
	0x032E93A8 BL 0x338C410

ISIL:
	001 Move W3, 1024
	002 Move W4, W31
	003 Call StreamWriter..ctor, X0, X1, X2, X3, X4
	004 Return 

Method: System.Void .ctor(System.IO.Stream stream, System.Text.Encoding encoding, System.Int32 bufferSize)

Disassembly:
	0x032E93AC ADRP X0, 0xE3D000
	0x032E93B0 LDR X0, [X0 + 0xEB0]

ISIL:
	001 Move W4, W31
	002 Call StreamWriter..ctor, X0, X1, X2, X3, X4
	003 Return 

Method: System.Void .ctor(System.IO.Stream stream, System.Text.Encoding encoding, System.Int32 bufferSize, System.Boolean leaveOpen)

Disassembly:
	0x032E91A0 CBZ W8, 0x32E935C
	0x032E91A4 LDR W24, [X19 + 0x58]
	0x032E91A8 CMP W21, 0x1
	0x032E91AC B.LT 0x32E9288
	0x032E91B0 ADRP X27, 0xE0A000
	0x032E91B4 LDR X27, [X27 + 0x5A8]
	0x032E91B8 MOV X22, X0
	0x032E91BC ADD X26, X25, 0x20
	0x032E91C0 CMP W24, W8
	0x032E91C4 B.NE 0x32E91DC
	0x032E91C8 MOV X0, X19
	0x032E91CC MOV W1, W31
	0x032E91D0 MOV W2, W31
	0x032E91D4 BL 0x32E8990
	0x032E91D8 MOV W24, W31
	0x032E91DC LDR X0, [X27]
	0x032E91E0 LDR W8, [X0 + 0xE0]
	0x032E91E4 CBNZ W8, 0x32E91EC
	0x032E91E8 BL 0x1C16DFC
	0x032E91EC LDR W8, [X25 + 0x18]
	0x032E91F0 MOV W1, W21
	0x032E91F4 MOV X2, X31
	0x032E91F8 SUB W0, W8, W24
	0x032E91FC BL 0x337EE94
	0x032E9200 UBFM W8, W0, 0x1F, 0x1E
	0x032E9204 SXTW X2, W8
	0x032E9208 MOV W23, W0
	0x032E920C ADD X1, X26, W24, 0x1, SXTW
	0x032E9210 MOV X0, X22
	0x032E9214 MOV X3, X2
	0x032E9218 MOV X4, X31
	0x032E921C BL 0x33A8C44
	0x032E9220 LDR W8, [X19 + 0x58]
	0x032E9224 SUB W21, W21, W23
	0x032E9228 CMP W21, 0x1
	0x032E922C ADD W8, W8, W23
	0x032E9230 STR W8, [X19 + 0x58]
	0x032E9234 B.LT 0x32E9290
	0x032E9238 LDR X8, [X25 + 0x18]
	0x032E923C ADD X22, X22, W23, 0x1, SXTW
	0x032E9240 ADD W24, W23, W24
	0x032E9244 B 0x32E91C0
	0x032E9248 CMP W21, 0x1
	0x032E924C B.LT 0x32E9290
	0x032E9250 LDR X9, [X19 + 0x50]
	0x032E9254 AND X10, X21, 0x0
	0x032E9258 ADD W24, W8, 0x1
	0x032E925C CBZ X9, 0x32E9364
	0x032E9260 LDR W11, [X9 + 0x18]
	0x032E9264 CMP W8, W11
	0x032E9268 B.CS 0x32E936C
	0x032E926C LDRH W11, [X22], #0x2
	0x032E9270 ADD X8, X9, W8, 0x1, SXTW
	0x032E9274 SUBS X10, X10, 0x1
	0x032E9278 STRH W11, [X8 + 0x20]
	0x032E927C MOV W8, W24
	0x032E9280 B.NE 0x32E9258
	0x032E9284 STR W24, [X19 + 0x58]
	0x032E9288 TBNZ X20, 0x0, 0x32E9298
	0x032E928C B 0x32E9318
	0x032E9290 MOV W24, W8
	0x032E9294 TBZ X20, 0x0, 0x32E9318
	0x032E9298 LDR X20, [X19 + 0x18]
	0x032E929C CBZ X20, 0x32E9360
	0x032E92A0 LDR X8, [X20 + 0x18]
	0x032E92A4 CMP W8, 0x1
	0x032E92A8 B.LT 0x32E9318
	0x032E92AC MOV X21, X31
	0x032E92B0 AND X8, X8, 0x0
	0x032E92B4 ADD X22, X20, 0x20
	0x032E92B8 LDR W9, [X19 + 0x5C]
	0x032E92BC CMP W24, W9
	0x032E92C0 B.NE 0x32E92DC
	0x032E92C4 MOV X0, X19
	0x032E92C8 MOV W1, W31
	0x032E92CC MOV W2, W31
	0x032E92D0 BL 0x32E8990
	0x032E92D4 LDR W24, [X19 + 0x58]
	0x032E92D8 LDR W8, [X20 + 0x18]
	0x032E92DC CMP X21, W8, UXTW
	0x032E92E0 B.CS 0x32E935C
	0x032E92E4 LDR X9, [X19 + 0x50]
	0x032E92E8 CBZ X9, 0x32E9360
	0x032E92EC LDR W10, [X9 + 0x18]
	0x032E92F0 CMP W24, W10
	0x032E92F4 B.CS 0x32E935C
	0x032E92F8 LDRH W10, [X22, X21, LSL #1]
	0x032E92FC ADD X21, X21, 0x1
	0x032E9300 ADD X9, X9, W24, 0x1, SXTW
	0x032E9304 ADD W24, W24, 0x1
	0x032E9308 CMP X21, W8, SXTW
	0x032E930C STRH W10, [X9 + 0x20]
	0x032E9310 STR W24, [X19 + 0x58]
	0x032E9314 B.LT 0x32E92B8
	0x032E9318 LDRB W8, [X19 + 0x60]
	0x032E931C CBZ W8, 0x32E9344
	0x032E9320 MOV X0, X19
	0x032E9324 LDP X20, X19, [X31 + 0x40]
	0x032E9328 LDP X22, X21, [X31 + 0x30]
	0x032E932C LDP X24, X23, [X31 + 0x20]
	0x032E9330 LDP X26, X25, [X31 + 0x10]
	0x032E9334 MOVZ W1, 0x1
	0x032E9338 MOV W2, W31
	0x032E933C LDP X30, X27, [X31], #0x50
	0x032E9340 B 0x32E8990
	0x032E9344 LDP X20, X19, [X31 + 0x40]
	0x032E9348 LDP X22, X21, [X31 + 0x30]
	0x032E934C LDP X24, X23, [X31 + 0x20]
	0x032E9350 LDP X26, X25, [X31 + 0x10]
	0x032E9354 LDP X30, X27, [X31], #0x50
	0x032E9358 RET
	0x032E935C BL 0x1C16F28
	0x032E9360 BL 0x1C16F20
	0x032E9364 STR W24, [X19 + 0x58]
	0x032E9368 BL 0x1C16F20
	0x032E936C ADD W8, W8, 0x1
	0x032E9370 STR W8, [X19 + 0x58]
	0x032E9374 BL 0x1C16F28
	0x032E9378 ADRP X0, 0xE33000
	0x032E937C LDR X0, [X0 + 0x4B8]
	0x032E9380 BL 0x1C16D08
	0x032E9384 BL 0x1C16F10
	0x032E9388 MOV X19, X0
	0x032E938C ADRP X0, 0xE3D000
	0x032E9390 LDR X0, [X0 + 0xE88]
	0x032E9394 BL 0x1C16D08
	0x032E9398 MOV X2, X0
	0x032E939C MOV X0, X19

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0x10F4000
	010 Move X24, 0xE0C000
	011 Move W8, [X25+2506]
	012 Move X24, [X24+1976]
	013 Move W22, W4
	014 Move W19, W3
	015 Move X21, X2
	016 Move X20, X1
	017 Move X23, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {30}
	022 Move X0, 0xE0C000
	023 Move X0, [X0+1976]
	024 Call 0x1C17CF4
	025 Move X0, 0xE3E000
	026 Move X0, [X0+3696]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X25+2506], W8
	030 Move X0, [X24]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X25, 0x10F0000
	036 Move W8, [X25+3869]
	037 Compare W8, 0
	038 JumpIfNotEqual {44}
	039 Move X0, 0xE0C000
	040 Move X0, [X0+1976]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X25+3869], W8
	044 Move X0, [X24]
	045 Move X25, 0xE3E000
	046 Move W8, [X0+224]
	047 Move X25, [X25+3696]
	048 Compare W8, 0
	049 JumpIfNotEqual {52}
	050 Call 0x1C17DFC
	051 Move X0, [X24]
	052 Move X8, [X0+184]
	053 Move X8, [X8+48]
	054 Move [X23+104], X8
	055 Move X0, [X25]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move X0, X23
	061 Move X1, X31
	062 Call TextWriter..ctor, X0, X1
	063 Compare X20, 0
	064 JumpIfEqual {92}
	065 Compare X21, 0
	066 JumpIfEqual {92}
	067 Move X8, [X20]
	068 Move X0, X20
	069 Move X9, [X8+472]
	070 Move X1, [X8+480]
	071 NotImplemented "Instruction BLR not yet implemented."
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfNotEqual {114}
	076 NotImplemented "Instruction CMP not yet implemented."
	077 And W4, W22, 1
	078 Move X0, X23
	079 Move X1, X20
	080 Move X2, X21
	081 Move W3, W19
	082 Move X20, [X31+48]
	083 Move X19, [X31+56]
	084 Move X22, [X31+32]
	085 Move X21, [X31+40]
	086 Move X24, [X31+16]
	087 Move X23, [X31+24]
	088 Move X30, [X31+64]
	089 Move X25, [X31+72]
	090 Call StreamWriter.Init, X0, X1, X2, X3, X4
	091 Return 
	092 Move X8, 0xE3A000
	093 Move X9, 0xE3A000
	094 Move X8, [X8+2848]
	095 Move X9, [X9+3384]
	096 NotImplemented "Instruction CMP not yet implemented."
	097 NotImplemented "Instruction CSEL not yet implemented."
	098 Call 0x1C17D08
	099 Move X19, X0
	100 Move X0, 0xE10000
	101 Move X0, [X0+1320]
	102 Call 0x1C17D08
	103 Call 0x1C17F10
	104 Move X1, X19
	105 Move X2, X31
	106 Move X20, X0
	107 Call ArgumentNullException..ctor, X0, X1
	108 Move X0, 0xE3E000
	109 Move X0, [X0+3704]
	110 Call 0x1C17D08
	111 Move X1, X0
	112 Move X0, X20
	113 Call 0x1C17DEC
	114 Move X0, 0xE13000
	115 Move X0, [X0+1400]
	116 Call 0x1C17D08
	117 Call 0x1C17F10
	118 Move X19, X0
	119 Move X0, 0xE3A000
	120 Move X0, [X0+3376]
	121 Call 0x1C17D08
	122 Move X1, X0
	123 Move X0, X19
	124 Move X2, X31
	125 Call ArgumentException..ctor, X0, X1
	126 Move X0, 0xE13000
	127 Move X0, [X0+1888]
	128 Call 0x1C17D08
	129 Call 0x1C17F10
	130 Move X19, X0
	131 Move X0, 0xE36000
	132 Move X0, [X0+3928]
	133 Call 0x1C17D08
	134 Move X20, X0
	135 Move X0, 0xE3E000
	136 Move X0, [X0+3368]
	137 Call 0x1C17D08
	138 Move X2, X0
	139 Move X0, X19
	140 Move X1, X20
	141 Move X3, X31
	142 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	143 Move X0, 0xE3E000
	144 Move X0, [X0+3704]
	145 Call 0x1C17D08
	146 Move X1, X0
	147 Move X0, X19
	148 Call 0x1C17DEC

Method: System.Void .ctor(System.String path)

Disassembly:
	0x032E94EC ADRP X22, 0xE38000
	0x032E94F0 LDR W8, [X0 + 0xE0]
	0x032E94F4 LDR X22, [X22 + 0xD08]
	0x032E94F8 CBNZ W8, 0x32E9504
	0x032E94FC BL 0x1C16DFC
	0x032E9500 LDR X0, [X19]
	0x032E9504 LDR X8, [X0 + 0xB8]
	0x032E9508 LDR X19, [X8]
	0x032E950C BL 0x32E7F98
	0x032E9510 LDR X8, [X22]
	0x032E9514 MOV X20, X0
	0x032E9518 MOV X0, X8
	0x032E951C BL 0x1C16F10
	0x032E9520 MOVZ W3, 0x80
	0x032E9524 MOVZ W4, 0x1
	0x032E9528 MOV X1, X19
	0x032E952C MOV X2, X20
	0x032E9530 MOV X21, X0
	0x032E9534 BL 0x32E81A0
	0x032E9538 LDR X8, [X22]
	0x032E953C LDP X20, X19, [X31 + 0x20]
	0x032E9540 LDR X8, [X8 + 0xB8]
	0x032E9544 STR X21, [X8]
	0x032E9548 LDP X22, X21, [X31 + 0x10]
	0x032E954C LDR X30, [X31], #0x30
	0x032E9550 RET
	0x032E9554 STP X30, X21, [X31 - 0x20]!
	0x032E9558 STP X20, X19, [X31 + 0x10]
	0x032E955C ADRP X21, 0x10F3000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x10F4000
	007 Move X22, 0xE39000
	008 Move W8, [X21+2507]
	009 Move X22, [X22+3336]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xE39000
	017 Move X0, [X0+3336]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2507], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Call StreamWriter.get_UTF8NoBOM
	027 Move X3, X0
	028 Move X0, X20
	029 Move X1, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move W4, 1024
	035 Move W2, W31
	036 Move X30, [X31+48]

Method: System.Void .ctor(System.String path, System.Boolean append)

Disassembly:
	0x032E979C LDRB W8, [X21 + 0x9D7]
	0x032E97A0 LDR X22, [X22 + 0x8D8]
	0x032E97A4 LDR X20, [X20 + 0x8F0]
	0x032E97A8 MOV X19, X0
	0x032E97AC TBNZ X8, 0x0, 0x32E97D0
	0x032E97B0 ADRP X0, 0xE13000
	0x032E97B4 LDR X0, [X0 + 0x8D8]
	0x032E97B8 BL 0x1C16CF4
	0x032E97BC ADRP X0, 0xE0A000
	0x032E97C0 LDR X0, [X0 + 0x8F0]
	0x032E97C4 BL 0x1C16CF4
	0x032E97C8 MOVZ W8, 0x1
	0x032E97CC STRB W8, [X21 + 0x9D7]
	0x032E97D0 LDR X0, [X22]
	0x032E97D4 MOVZ W1, 0x1000
	0x032E97D8 BL 0x1C16D6C
	0x032E97DC LDR X8, [X20]
	0x032E97E0 MOV X20, X0
	0x032E97E4 MOV X0, X8
	0x032E97E8 BL 0x1C16F10
	0x032E97EC MOVZ W1, 0x1000
	0x032E97F0 MOV X2, X31
	0x032E97F4 MOV X21, X0
	0x032E97F8 BL 0x3231B28
	0x032E97FC CBZ X20, 0x32E9860
	0x032E9800 LDR X8, [X19]
	0x032E9804 LDR W3, [X20 + 0x18]
	0x032E9808 MOV X0, X19
	0x032E980C MOV X1, X20
	0x032E9810 LDP X9, X4, [X8 + 0x1D8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x10F4000
	008 Move X23, 0xE39000
	009 Move W8, [X22+2508]
	010 Move X23, [X23+3336]
	011 Move W21, W2
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xE39000
	019 Move X0, [X0+3336]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2508], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Call StreamWriter.get_UTF8NoBOM
	029 And W2, W21, 1
	030 Move X3, X0
	031 Move X0, X20
	032 Move X1, X19
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move W4, 1024
	038 Move X30, [X31+48]
	039 Move X23, [X31+56]
	040 Call StreamWriter..ctor, X0, X1, X2, X3, X4
	041 Return 

Method: System.Void .ctor(System.String path, System.Boolean append, System.Text.Encoding encoding, System.Int32 bufferSize)

Disassembly:
	0x032E9560 ADRP X20, 0xE11000
	0x032E9564 LDRB W8, [X21 + 0x9D6]
	0x032E9568 LDR X20, [X20 + 0xC10]
	0x032E956C MOV X19, X0
	0x032E9570 TBNZ X8, 0x0, 0x32E9588
	0x032E9574 ADRP X0, 0xE11000
	0x032E9578 LDR X0, [X0 + 0xC10]
	0x032E957C BL 0x1C16CF4
	0x032E9580 MOVZ W8, 0x1
	0x032E9584 STRB W8, [X21 + 0x9D6]
	0x032E9588 LDR X8, [X19]
	0x032E958C MOVZ W1, 0x1
	0x032E9590 MOV X0, X19
	0x032E9594 LDP X9, X2, [X8 + 0x1A8]
	0x032E9598 BLR X9
	0x032E959C LDR X0, [X20]
	0x032E95A0 LDR W8, [X0 + 0xE0]
	0x032E95A4 CBNZ W8, 0x32E95AC
	0x032E95A8 BL 0x1C16DFC
	0x032E95AC MOV X0, X19
	0x032E95B0 LDP X20, X19, [X31 + 0x10]
	0x032E95B4 MOV X1, X31
	0x032E95B8 LDP X30, X21, [X31], #0x20
	0x032E95BC B 0x33B3E9C
	0x032E95C0 RET
	0x032E95C4 MOVN W0, 0x0
	0x032E95C8 RET
	0x032E95CC MOVN W0, 0x0
	0x032E95D0 RET
	0x032E95D4 STP X30, X25, [X31 - 0x40]!
	0x032E95D8 STP X24, X23, [X31 + 0x10]
	0x032E95DC STP X22, X21, [X31 + 0x20]
	0x032E95E0 STP X20, X19, [X31 + 0x30]
	0x032E95E4 CBZ X1, 0x32E968C
	0x032E95E8 TBNZ X2, 0x1F, 0x32E96D4
	0x032E95EC TBNZ X3, 0x1F, 0x32E96F4
	0x032E95F0 LDR W8, [X1 + 0x18]
	0x032E95F4 MOV X19, X1
	0x032E95F8 SUB W8, W8, W2
	0x032E95FC CMP W8, W3
	0x032E9600 B.LT 0x32E973C
	0x032E9604 CMP W3, 0x1
	0x032E9608 B.LT 0x32E966C
	0x032E960C MOV W23, W2
	0x032E9610 MOV X20, X0
	0x032E9614 MOV X21, X31
	0x032E9618 MOV W22, W3
	0x032E961C UBFM X24, X23, 0x20, 0x1F
	0x032E9620 MOVZ X25, 0x1
	0x032E9624 LDR X8, [X20]
	0x032E9628 MOV X0, X20
	0x032E962C LDP X9, X1, [X8 + 0x1C8]
	0x032E9630 BLR X9
	0x032E9634 ADDS W31, W0, 0x1
	0x032E9638 B.EQ 0x32E9670
	0x032E963C LDR W8, [X19 + 0x18]
	0x032E9640 ADD X9, X23, X21
	0x032E9644 CMP X9, X8
	0x032E9648 B.CS 0x32E9688
	0x032E964C ADD X21, X21, 0x1
	0x032E9650 ADD X8, X19, X24, 0x1F, ASR
	0x032E9654 CMP X22, X21
	0x032E9658 ADD X24, X24, X25
	0x032E965C STRH W0, [X8 + 0x20]
	0x032E9660 B.NE 0x32E9624
	0x032E9664 MOV W21, W22
	0x032E9668 B 0x32E9670
	0x032E966C MOV W21, W31
	0x032E9670 MOV W0, W21
	0x032E9674 LDP X20, X19, [X31 + 0x30]
	0x032E9678 LDP X22, X21, [X31 + 0x20]
	0x032E967C LDP X24, X23, [X31 + 0x10]
	0x032E9680 LDP X30, X25, [X31], #0x40
	0x032E9684 RET
	0x032E9688 BL 0x1C16F28
	0x032E968C ADRP X0, 0xE0F000
	0x032E9690 LDR X0, [X0 + 0x528]
	0x032E9694 BL 0x1C16D08
	0x032E9698 BL 0x1C16F10
	0x032E969C MOV X19, X0
	0x032E96A0 ADRP X0, 0xE35000
	0x032E96A4 LDR X0, [X0 + 0xF48]
	0x032E96A8 BL 0x1C16D08
	0x032E96AC MOV X20, X0
	0x032E96B0 ADRP X0, 0xE3D000
	0x032E96B4 LDR X0, [X0 + 0xC40]
	0x032E96B8 BL 0x1C16D08
	0x032E96BC MOV X2, X0
	0x032E96C0 MOV X0, X19
	0x032E96C4 MOV X1, X20
	0x032E96C8 MOV X3, X31
	0x032E96CC BL 0x3315F7C
	0x032E96D0 B 0x32E976C
	0x032E96D4 ADRP X0, 0xE12000
	0x032E96D8 LDR X0, [X0 + 0x760]
	0x032E96DC BL 0x1C16D08
	0x032E96E0 BL 0x1C16F10
	0x032E96E4 MOV X19, X0
	0x032E96E8 ADRP X0, 0xE15000
	0x032E96EC LDR X0, [X0 + 0x130]
	0x032E96F0 B 0x32E9710
	0x032E96F4 ADRP X0, 0xE12000
	0x032E96F8 LDR X0, [X0 + 0x760]
	0x032E96FC BL 0x1C16D08
	0x032E9700 BL 0x1C16F10
	0x032E9704 MOV X19, X0
	0x032E9708 ADRP X0, 0xE32000
	0x032E970C LDR X0, [X0 + 0x648]
	0x032E9710 BL 0x1C16D08
	0x032E9714 MOV X20, X0
	0x032E9718 ADRP X0, 0xE32000
	0x032E971C LDR X0, [X0 + 0x670]
	0x032E9720 BL 0x1C16D08
	0x032E9724 MOV X2, X0
	0x032E9728 MOV X0, X19
	0x032E972C MOV X1, X20
	0x032E9730 MOV X3, X31
	0x032E9734 BL 0x3311888
	0x032E9738 B 0x32E976C
	0x032E973C ADRP X0, 0xE12000
	0x032E9740 LDR X0, [X0 + 0x578]
	0x032E9744 BL 0x1C16D08
	0x032E9748 BL 0x1C16F10
	0x032E974C MOV X19, X0
	0x032E9750 ADRP X0, 0xE32000
	0x032E9754 LDR X0, [X0 + 0x760]
	0x032E9758 BL 0x1C16D08
	0x032E975C MOV X1, X0
	0x032E9760 MOV X0, X19
	0x032E9764 MOV X2, X31
	0x032E9768 BL 0x3314A68
	0x032E976C ADRP X0, 0xE3D000
	0x032E9770 LDR X0, [X0 + 0xEB8]
	0x032E9774 BL 0x1C16D08
	0x032E9778 MOV X1, X0
	0x032E977C MOV X0, X19
	0x032E9780 BL 0x1C16DEC
	0x032E9784 STR X30, [X31 - 0x30]!
	0x032E9788 STP X22, X21, [X31 + 0x10]
	0x032E978C STP X20, X19, [X31 + 0x20]
	0x032E9790 ADRP X21, 0x10F3000
	0x032E9794 ADRP X22, 0xE13000
	0x032E9798 ADRP X20, 0xE0A000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0x10F4000
	010 Move X24, 0xE0C000
	011 Move W8, [X25+2509]
	012 Move X24, [X24+1976]
	013 Move W19, W4
	014 Move X20, X3
	015 Move W23, W2
	016 Move X22, X1
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {33}
	022 Move X0, 0xE39000
	023 Move X0, [X0+1648]
	024 Call 0x1C17CF4
	025 Move X0, 0xE0C000
	026 Move X0, [X0+1976]
	027 Call 0x1C17CF4
	028 Move X0, 0xE3E000
	029 Move X0, [X0+3696]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X25+2509], W8
	033 Move X0, [X24]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X25, 0x10F0000
	039 Move W8, [X25+3869]
	040 Compare W8, 0
	041 JumpIfNotEqual {47}
	042 Move X0, 0xE0C000
	043 Move X0, [X0+1976]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X25+3869], W8
	047 Move X0, [X24]
	048 Move X25, 0xE3E000
	049 Move W8, [X0+224]
	050 Move X25, [X25+3696]
	051 Compare W8, 0
	052 JumpIfNotEqual {55}
	053 Call 0x1C17DFC
	054 Move X0, [X24]
	055 Move X8, [X0+184]
	056 Move X8, [X8+48]
	057 Move [X21+104], X8
	058 Move X0, [X25]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {63}
	062 Call 0x1C17DFC
	063 Move X0, X21
	064 Call TextWriter..ctor, X0
	065 Compare X22, 0
	066 JumpIfEqual {105}
	067 Compare X20, 0
	068 JumpIfEqual {112}
	069 Move W8, [X22+16]
	070 Compare W8, 0
	071 JumpIfEqual {124}
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move X8, 0xE39000
	074 Move X8, [X8+1648]
	075 And W31, W23, 1
	076 Move W9, 6
	077 Move X0, [X8]
	078 Move W8, 2
	079 NotImplemented "Instruction CSEL not yet implemented."
	080 Call 0x1C17F10
	081 Move W3, 2
	082 Move W4, 1
	083 Move W5, 4096
	084 Move W6, 0x8000000
	085 Move X1, X22
	086 Move W2, W23
	087 Move X7, X31
	088 Move X24, X0
	089 Call FileStream..ctor, X0, X1, X2, X3, X4, X5, X6
	090 Move X0, X21
	091 Move X1, X24
	092 Move X2, X20
	093 Move W3, W19
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move W4, W31
	101 Move X30, [X31+64]
	102 Move X25, [X31+72]
	103 Call StreamWriter.Init, X0, X1, X2, X3, X4
	104 Return 
	105 Move X0, 0xE10000
	106 Move X0, [X0+1320]
	107 Call 0x1C17D08
	108 Call 0x1C17F10
	109 Move X19, X0
	110 Move X0, 0xE16000
	111 Move X0, [X0+288]
	112 Move X0, 0xE10000
	113 Move X0, [X0+1320]
	114 Call 0x1C17D08
	115 Call 0x1C17F10
	116 Move X19, X0
	117 Move X0, 0xE3A000
	118 Move X0, [X0+2848]
	119 Call 0x1C17D08
	120 Move X1, X0
	121 Move X0, X19
	122 Move X2, X31
	123 Call ArgumentNullException..ctor, X0, X1
	124 Move X0, 0xE13000
	125 Move X0, [X0+1400]
	126 Call 0x1C17D08
	127 Call 0x1C17F10
	128 Move X19, X0
	129 Move X0, 0xE3E000
	130 Move X0, [X0+3600]
	131 Call 0x1C17D08
	132 Move X1, X0
	133 Move X0, X19
	134 Move X2, X31
	135 Call ArgumentException..ctor, X0, X1
	136 Move X0, 0xE13000
	137 Move X0, [X0+1888]
	138 Call 0x1C17D08
	139 Call 0x1C17F10
	140 Move X19, X0
	141 Move X0, 0xE36000
	142 Move X0, [X0+3928]
	143 Call 0x1C17D08
	144 Move X20, X0
	145 Move X0, 0xE3E000
	146 Move X0, [X0+3368]
	147 Call 0x1C17D08
	148 Move X2, X0
	149 Move X0, X19
	150 Move X1, X20
	151 Move X3, X31
	152 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	153 Move X0, 0xE3E000
	154 Move X0, [X0+3712]
	155 Call 0x1C17D08
	156 Move X1, X0
	157 Move X0, X19
	158 Call 0x1C17DEC

Method: System.Void Init(System.IO.Stream streamArg, System.Text.Encoding encodingArg, System.Int32 bufferSize, System.Boolean shouldLeaveOpen)

Disassembly:
	0x032E93B4 BL 0x1C16D08
	0x032E93B8 MOV X1, X0
	0x032E93BC MOV X0, X19
	0x032E93C0 BL 0x1C16DEC
	0x032E93C4 STP X30, X21, [X31 - 0x20]!
	0x032E93C8 STP X20, X19, [X31 + 0x10]
	0x032E93CC ADRP X21, 0x10F0000
	0x032E93D0 LDRB W8, [X21 + 0x762]
	0x032E93D4 MOV X20, X1
	0x032E93D8 MOV X19, X0
	0x032E93DC CBZ W8, 0x32E93FC
	0x032E93E0 CBZ X20, 0x32E9414
	0x032E93E4 MOV X0, X20
	0x032E93E8 MOV X1, X31
	0x032E93EC BL 0x3225708
	0x032E93F0 LDR W2, [X20 + 0x10]
	0x032E93F4 MOV X1, X0
	0x032E93F8 B 0x32E941C
	0x032E93FC ADRP X0, 0xE31000
	0x032E9400 LDR X0, [X0 + 0x290]
	0x032E9404 BL 0x1C16CF4
	0x032E9408 MOVZ W8, 0x1
	0x032E940C STRB W8, [X21 + 0x762]
	0x032E9410 CBNZ X20, 0x32E93E4
	0x032E9414 MOV X1, X31
	0x032E9418 MOV X2, X31
	0x032E941C MOV X0, X19
	0x032E9420 LDP X20, X19, [X31 + 0x10]
	0x032E9424 MOV W3, W31
	0x032E9428 MOV X4, X31
	0x032E942C LDP X30, X21, [X31], #0x20
	0x032E9430 B 0x32EDE70
	0x032E9434 STP X30, X21, [X31 - 0x20]!
	0x032E9438 STP X20, X19, [X31 + 0x10]
	0x032E943C MOV X20, X1
	0x032E9440 MOV X19, X0
	0x032E9444 BL 0x32E7EE8
	0x032E9448 ADRP X21, 0x10F0000
	0x032E944C LDRB W8, [X21 + 0x762]
	0x032E9450 CBZ W8, 0x32E9470
	0x032E9454 CBZ X20, 0x32E9488
	0x032E9458 MOV X0, X20
	0x032E945C MOV X1, X31
	0x032E9460 BL 0x3225708
	0x032E9464 LDR W2, [X20 + 0x10]
	0x032E9468 MOV X1, X0
	0x032E946C B 0x32E9490
	0x032E9470 ADRP X0, 0xE31000
	0x032E9474 LDR X0, [X0 + 0x290]
	0x032E9478 BL 0x1C16CF4
	0x032E947C MOVZ W8, 0x1
	0x032E9480 STRB W8, [X21 + 0x762]
	0x032E9484 CBNZ X20, 0x32E9458
	0x032E9488 MOV X1, X31
	0x032E948C MOV X2, X31
	0x032E9490 MOV X0, X19
	0x032E9494 LDP X20, X19, [X31 + 0x10]
	0x032E9498 MOVZ W3, 0x1
	0x032E949C MOV X4, X31
	0x032E94A0 LDP X30, X21, [X31], #0x20
	0x032E94A4 B 0x32EDE70
	0x032E94A8 STR X30, [X31 - 0x30]!
	0x032E94AC STP X22, X21, [X31 + 0x10]
	0x032E94B0 STP X20, X19, [X31 + 0x20]
	0x032E94B4 ADRP X20, 0x10F3000
	0x032E94B8 ADRP X19, 0xE39000
	0x032E94BC LDRB W8, [X20 + 0x9D5]
	0x032E94C0 LDR X19, [X19 + 0xD10]
	0x032E94C4 TBNZ X8, 0x0, 0x32E94E8
	0x032E94C8 ADRP X0, 0xE38000
	0x032E94CC LDR X0, [X0 + 0xD08]
	0x032E94D0 BL 0x1C16CF4
	0x032E94D4 ADRP X0, 0xE39000
	0x032E94D8 LDR X0, [X0 + 0xD10]
	0x032E94DC BL 0x1C16CF4
	0x032E94E0 MOVZ W8, 0x1
	0x032E94E4 STRB W8, [X20 + 0x9D5]
	0x032E94E8 LDR X0, [X19]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x10F4000
	009 Move W8, [X24+2510]
	010 Move W19, W4
	011 Move W21, W3
	012 Move X22, X2
	013 Move X23, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xE0B000
	020 Move X0, [X0+1560]
	021 Call 0x1C17CF4
	022 Move X0, 0xE14000
	023 Move X0, [X0+2264]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+2510], W8
	027 Move [X20+48], X23
	028 Move [X20+56], X22
	029 Compare X22, 0
	030 JumpIfEqual {96}
	031 Move X8, [X22]
	032 Move X23, 0xE14000
	033 Move X0, X22
	034 Move X9, [X8+840]
	035 Move X1, [X8+848]
	036 Move X23, [X23+2264]
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Move [X20+64], X0
	039 Move X0, [X23]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move W8, 128
	042 NotImplemented "Instruction CSEL not yet implemented."
	043 Move W1, W21
	044 Call 0x1C17D6C
	045 Move X8, [X20+56]
	046 Move [X20+80], X0
	047 Compare X8, 0
	048 JumpIfEqual {96}
	049 Move X9, [X8]
	050 Move X22, 0xE0B000
	051 Move X0, X8
	052 Move W1, W21
	053 Move X10, [X9+856]
	054 Move X2, [X9+864]
	055 Move X22, [X22+1560]
	056 NotImplemented "Instruction BLR not yet implemented."
	057 Move X8, [X22]
	058 Move W1, W0
	059 Move X0, X8
	060 Call 0x1C17D6C
	061 Move X8, X0
	062 Move X0, [X20+48]
	063 Move [X20+72], X8
	064 Move [X20+92], W21
	065 Compare X0, 0
	066 JumpIfEqual {96}
	067 Move X8, [X0]
	068 Move X9, [X8+440]
	069 Move X1, [X8+448]
	070 NotImplemented "Instruction BLR not yet implemented."
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfNotEqual {85}
	075 Move X0, [X20+48]
	076 Compare X0, 0
	077 JumpIfEqual {96}
	078 Move X8, [X0]
	079 Move X9, [X8+504]
	080 Move X1, [X8+512]
	081 NotImplemented "Instruction BLR not yet implemented."
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move W8, 1
	084 Move [X20+97], W8
	085 NotImplemented "Instruction ORN not yet implemented."
	086 And W8, W8, 1
	087 Move [X20+98], W8
	088 Move X20, [X31+48]
	089 Move X19, [X31+56]
	090 Move X22, [X31+32]
	091 Move X21, [X31+40]
	092 Move X24, [X31+16]
	093 Move X23, [X31+24]
	094 Move X30, [X31+64]
	095 Return 
	096 Call 0x1C17F20

Method: System.Void Close()

Disassembly:
	0x032E9890 LDRB W8, [X19 + 0x9D8]
	0x032E9894 LDR X21, [X21 + 0x8F0]
	0x032E9898 MOV X20, X0
	0x032E989C TBNZ X8, 0x0, 0x32E98B4
	0x032E98A0 ADRP X0, 0xE0A000
	0x032E98A4 LDR X0, [X0 + 0x8F0]
	0x032E98A8 BL 0x1C16CF4
	0x032E98AC MOVZ W8, 0x1
	0x032E98B0 STRB W8, [X19 + 0x9D8]
	0x032E98B4 LDR X0, [X21]
	0x032E98B8 BL 0x1C16F10
	0x032E98BC MOV X1, X31
	0x032E98C0 MOV X19, X0
	0x032E98C4 BL 0x3231AC4
	0x032E98C8 LDR X8, [X20]
	0x032E98CC MOV X0, X20
	0x032E98D0 LDP X9, X1, [X8 + 0x1C8]
	0x032E98D4 BLR X9
	0x032E98D8 ADDS W31, W0, 0x1
	0x032E98DC B.EQ 0x32E9908
	0x032E98E0 MOV W1, W0
	0x032E98E4 CMP W0, 0xA
	0x032E98E8 B.EQ 0x32E9958
	0x032E98EC CMP W1, 0xD
	0x032E98F0 B.EQ 0x32E9930
	0x032E98F4 CBZ X19, 0x32E9974
	0x032E98F8 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10F4000
	006 Move X20, 0xE12000
	007 Move W8, [X21+2511]
	008 Move X20, [X20+3088]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE12000
	015 Move X0, [X0+3088]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2511], W8
	019 Move X8, [X19]
	020 Move W1, 1
	021 Move X0, X19
	022 Move X9, [X8+456]
	023 Move X2, [X8+464]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X1, X31
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call GC.SuppressFinalize, X0
	037 Return 

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x032E98FC MOV X2, X31
	0x032E9900 BL 0x3233D30
	0x032E9904 B 0x32E98C8
	0x032E9908 CBZ X19, 0x32E9974
	0x032E990C MOV X0, X19
	0x032E9910 MOV X1, X31
	0x032E9914 BL 0x323260C
	0x032E9918 CMP W0, 0x1
	0x032E991C B.GE 0x32E995C
	0x032E9920 LDP X20, X19, [X31 + 0x10]
	0x032E9924 MOV X0, X31
	0x032E9928 LDP X30, X21, [X31], #0x20
	0x032E992C RET
	0x032E9930 LDR X8, [X20]
	0x032E9934 MOV X0, X20
	0x032E9938 LDP X9, X1, [X8 + 0x1B8]
	0x032E993C BLR X9
	0x032E9940 CMP W0, 0xA
	0x032E9944 B.NE 0x32E9958
	0x032E9948 LDR X8, [X20]
	0x032E994C MOV X0, X20
	0x032E9950 LDP X9, X1, [X8 + 0x1C8]
	0x032E9954 BLR X9
	0x032E9958 CBZ X19, 0x32E9974
	0x032E995C LDR X8, [X19]
	0x032E9960 MOV X0, X19
	0x032E9964 LDP X20, X19, [X31 + 0x10]
	0x032E9968 LDP X2, X1, [X8 + 0x168]
	0x032E996C LDP X30, X21, [X31], #0x20
	0x032E9970 BR X2
	0x032E9974 BL 0x1C16F20
	0x032E9978 STR X30, [X31 - 0x20]!
	0x032E997C STP X20, X19, [X31 + 0x10]
	0x032E9980 ADRP X20, 0x10F3000
	0x032E9984 LDRB W8, [X20 + 0x9D9]
	0x032E9988 MOV X19, X0
	0x032E998C TBNZ X8, 0x0, 0x32E99A4

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+48], X30
	003 Move [X31+56], X19
	004 And W8, W1, 1
	005 Add X9, X31, 40
	006 Add X10, X31, 36
	007 Move [X31+40], X0
	008 Move [X31+36], W8
	009 Move [X31+8], X31
	010 Move [X31+16], X9
	011 Move [X31+24], X10
	012 Move X8, [X0+48]
	013 Compare X8, 0
	014 JumpIfEqual {24}
	015 Move TEMP, X1
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfNotEqual {24}
	019 Call StreamWriter.CheckAsyncTaskInProgress, X0
	020 Move X0, [X31+40]
	021 Move W1, 1
	022 Move W2, 1
	023 Call StreamWriter.Flush, X0, X1, X2
	024 Add X0, X31, 8
	025 Call 0x1BB82AC
	026 Move X30, [X31+48]
	027 Move X19, [X31+56]
	028 Add X31, X31, 64
	029 Return 
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X19, X0
	032 Move X0, X19
	033 Call 0x3EB2AD0
	034 Move X8, [X0]
	035 Move [X31+8], X8
	036 Call 0x3EB2AE0
	037 Move X19, X0
	038 Add X0, X31, 8
	039 Call 0x1BB82AC
	040 Move X0, X19
	041 Call 0x1D2D690
	042 Call 0x1991590

Method: System.Void Flush()

Disassembly:
	0x032E9B0C ADRP X20, 0x10F3000
	0x032E9B10 ADRP X21, 0xE3D000
	0x032E9B14 LDRB W8, [X20 + 0x9DB]
	0x032E9B18 LDR X21, [X21 + 0xE00]
	0x032E9B1C MOV X19, X0
	0x032E9B20 TBNZ X8, 0x0, 0x32E9B38
	0x032E9B24 ADRP X0, 0xE3D000
	0x032E9B28 LDR X0, [X0 + 0xE00]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call StreamWriter.CheckAsyncTaskInProgress, X0
	005 Move W1, 1
	006 Move W2, 1
	007 Move X0, X19
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Call StreamWriter.Flush, X0, X1, X2
	011 Return 

Method: System.Void Flush(System.Boolean flushStream, System.Boolean flushEncoder)

Disassembly:
	0x032E9990 ADRP X0, 0xE3D000
	0x032E9994 LDR X0, [X0 + 0xEC0]
	0x032E9998 BL 0x1C16CF4
	0x032E999C MOVZ W8, 0x1
	0x032E99A0 STRB W8, [X20 + 0x9D9]
	0x032E99A4 CBZ X19, 0x32E99E4
	0x032E99A8 ADRP X8, 0xE3D000
	0x032E99AC LDR X8, [X8 + 0xEC0]
	0x032E99B0 LDR X0, [X8]
	0x032E99B4 LDR X8, [X19]
	0x032E99B8 CMP X8, X0
	0x032E99BC B.EQ 0x32E99D4
	0x032E99C0 BL 0x1C16F10
	0x032E99C4 MOV X1, X19
	0x032E99C8 MOV X20, X0
	0x032E99CC BL 0x32E9A2C
	0x032E99D0 MOV X19, X20
	0x032E99D4 MOV X0, X19
	0x032E99D8 LDP X20, X19, [X31 + 0x10]
	0x032E99DC LDR X30, [X31], #0x20
	0x032E99E0 RET
	0x032E99E4 ADRP X0, 0xE0F000
	0x032E99E8 LDR X0, [X0 + 0x528]
	0x032E99EC BL 0x1C16D08
	0x032E99F0 BL 0x1C16F10
	0x032E99F4 MOV X19, X0
	0x032E99F8 ADRP X0, 0xE3D000
	0x032E99FC LDR X0, [X0 + 0xEC8]
	0x032E9A00 BL 0x1C16D08
	0x032E9A04 MOV X1, X0
	0x032E9A08 MOV X0, X19
	0x032E9A0C MOV X2, X31
	0x032E9A10 BL 0x330E100
	0x032E9A14 ADRP X0, 0xE3D000
	0x032E9A18 LDR X0, [X0 + 0xED0]
	0x032E9A1C BL 0x1C16D08
	0x032E9A20 MOV X1, X0
	0x032E9A24 MOV X0, X19
	0x032E9A28 BL 0x1C16DEC
	0x032E9A2C STR X30, [X31 - 0x30]!
	0x032E9A30 STP X22, X21, [X31 + 0x10]
	0x032E9A34 STP X20, X19, [X31 + 0x20]
	0x032E9A38 ADRP X21, 0x10F3000
	0x032E9A3C ADRP X22, 0xE3D000
	0x032E9A40 LDRB W8, [X21 + 0x9DC]
	0x032E9A44 LDR X22, [X22 + 0xE00]
	0x032E9A48 MOV X19, X1
	0x032E9A4C MOV X20, X0
	0x032E9A50 TBNZ X8, 0x0, 0x32E9A68
	0x032E9A54 ADRP X0, 0xE3D000
	0x032E9A58 LDR X0, [X0 + 0xE00]
	0x032E9A5C BL 0x1C16CF4
	0x032E9A60 MOVZ W8, 0x1
	0x032E9A64 STRB W8, [X21 + 0x9DC]
	0x032E9A68 LDR X0, [X22]
	0x032E9A6C LDR W8, [X0 + 0xE0]
	0x032E9A70 CBNZ W8, 0x32E9A78
	0x032E9A74 BL 0x1C16DFC
	0x032E9A78 MOV X0, X20
	0x032E9A7C MOV X1, X31
	0x032E9A80 BL 0x33C011C
	0x032E9A84 STR X19, [X20 + 0x18]
	0x032E9A88 LDP X20, X19, [X31 + 0x20]
	0x032E9A8C LDP X22, X21, [X31 + 0x10]
	0x032E9A90 LDR X30, [X31], #0x30
	0x032E9A94 RET
	0x032E9A98 STP X30, X21, [X31 - 0x20]!
	0x032E9A9C STP X20, X19, [X31 + 0x10]
	0x032E9AA0 ADRP X19, 0x10F3000
	0x032E9AA4 ADRP X21, 0xE3D000
	0x032E9AA8 ADRP X20, 0xE3D000
	0x032E9AAC LDRB W8, [X19 + 0x9DA]
	0x032E9AB0 LDR X21, [X21 + 0xED8]
	0x032E9AB4 LDR X20, [X20 + 0xE00]
	0x032E9AB8 TBNZ X8, 0x0, 0x32E9ADC
	0x032E9ABC ADRP X0, 0xE3D000
	0x032E9AC0 LDR X0, [X0 + 0xED8]
	0x032E9AC4 BL 0x1C16CF4
	0x032E9AC8 ADRP X0, 0xE3D000
	0x032E9ACC LDR X0, [X0 + 0xE00]
	0x032E9AD0 BL 0x1C16CF4
	0x032E9AD4 MOVZ W8, 0x1
	0x032E9AD8 STRB W8, [X19 + 0x9DA]
	0x032E9ADC LDR X0, [X21]
	0x032E9AE0 BL 0x1C16F10
	0x032E9AE4 MOV X19, X0
	0x032E9AE8 BL 0x32E9B04
	0x032E9AEC LDR X8, [X20]
	0x032E9AF0 LDR X8, [X8 + 0xB8]
	0x032E9AF4 STR X19, [X8]
	0x032E9AF8 LDP X20, X19, [X31 + 0x10]
	0x032E9AFC LDP X30, X21, [X31], #0x20
	0x032E9B00 RET
	0x032E9B04 STP X30, X21, [X31 - 0x20]!
	0x032E9B08 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x10F4000
	007 Move W8, [X22+2512]
	008 Move W21, W2
	009 Move W19, W1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xE3A000
	016 Move X0, [X0+2752]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+2512], W8
	020 Move X8, [X20+48]
	021 Compare X8, 0
	022 JumpIfEqual {104}
	023 Move W8, [X20+88]
	024 Compare W8, 0
	025 JumpIfNotEqual {34}
	026 Move TEMP, X19
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {34}
	030 Move TEMP, X21
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {97}
	034 Move W8, [X20+97]
	035 Compare W8, 0
	036 JumpIfNotEqual {56}
	037 Move X0, [X20+56]
	038 Move W8, 1
	039 Move [X20+97], W8
	040 Compare X0, 0
	041 JumpIfEqual {103}
	042 Move X8, [X0]
	043 Move X9, [X8+424]
	044 Move X1, [X8+432]
	045 NotImplemented "Instruction BLR not yet implemented."
	046 Move X2, X1
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X1, X0
	049 Move X0, [X20+48]
	050 Compare X0, 0
	051 JumpIfEqual {103}
	052 Move X8, [X0]
	053 Move X9, [X8+920]
	054 Move X3, [X8+928]
	055 NotImplemented "Instruction BLR not yet implemented."
	056 Move X0, [X20+64]
	057 Compare X0, 0
	058 JumpIfEqual {103}
	059 Move X8, [X0]
	060 Move W3, [X20+88]
	061 Move X4, [X20+72]
	062 Move X1, [X20+80]
	063 And W6, W21, 1
	064 Move X9, [X8+424]
	065 Move X7, [X8+432]
	066 Move W2, W31
	067 Move W5, W31
	068 NotImplemented "Instruction BLR not yet implemented."
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move [X20+88], W31
	071 Move W3, W0
	072 Move X0, [X20+48]
	073 Compare X0, 0
	074 JumpIfEqual {103}
	075 Move X8, [X0]
	076 Move X1, [X20+72]
	077 Move W2, W31
	078 Move X9, [X8+904]
	079 Move X4, [X8+912]
	080 NotImplemented "Instruction BLR not yet implemented."
	081 Move TEMP, X19
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfNotEqual {97}
	085 Move X0, [X20+48]
	086 Compare X0, 0
	087 JumpIfEqual {103}
	088 Move X8, [X0]
	089 Move X20, [X31+32]
	090 Move X19, [X31+40]
	091 Move X22, [X31+16]
	092 Move X21, [X31+24]
	093 Move X2, [X8+664]
	094 Move X1, [X8+672]
	095 Move X30, [X31+48]
	096 CallNoReturn X2
	097 Move X20, [X31+32]
	098 Move X19, [X31+40]
	099 Move X22, [X31+16]
	100 Move X21, [X31+24]
	101 Move X30, [X31+48]
	102 Return 
	103 Call 0x1C17F20
	104 Move X0, 0xE34000
	105 Move X0, [X0+1208]
	106 Call 0x1C17D08
	107 Call 0x1C17F10
	108 Move X19, X0
	109 Move X0, 0xE3E000
	110 Move X0, [X0+3720]
	111 Call 0x1C17D08
	112 Move X2, X0
	113 Move X0, X19
	114 Move X1, X31
	115 Move X3, X31
	116 Call ObjectDisposedException..ctor, X0, X1, X2
	117 Move X0, 0xE3E000
	118 Move X0, [X0+3728]
	119 Call 0x1C17D08
	120 Move X1, X0
	121 Move X0, X19
	122 Call 0x1C17DEC

Method: System.Void set_AutoFlush(System.Boolean value)

Disassembly:
	0x032E9B2C BL 0x1C16CF4
	0x032E9B30 MOVZ W8, 0x1
	0x032E9B34 STRB W8, [X20 + 0x9DB]
	0x032E9B38 LDR X0, [X21]
	0x032E9B3C LDR W8, [X0 + 0xE0]
	0x032E9B40 CBNZ W8, 0x32E9B48
	0x032E9B44 BL 0x1C16DFC
	0x032E9B48 MOV X0, X19
	0x032E9B4C LDP X20, X19, [X31 + 0x10]
	0x032E9B50 MOV X1, X31
	0x032E9B54 LDP X30, X21, [X31], #0x20
	0x032E9B58 B 0x33C011C
	0x032E9B5C MOV W0, W31
	0x032E9B60 RET
	0x032E9B64 MOV X0, X31
	0x032E9B68 RET
	0x032E9B6C STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W20, W1
	006 Move X19, X0
	007 And W21, W1, 1
	008 Call StreamWriter.CheckAsyncTaskInProgress, X0
	009 Move [X19+96], W21
	010 Move TEMP, X20
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfNotEqual {23}
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move W1, 1
	018 Move W2, W31
	019 Move X30, [X31+32]
	020 Move X21, [X31+40]
	021 Call StreamWriter.Flush, X0, X1, X2
	022 Return 
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 Return 

Method: System.Boolean get_LeaveOpen()

Disassembly:
	0x032E9B70 STP X20, X19, [X31 + 0x10]
	0x032E9B74 ADRP X21, 0x10F3000
	0x032E9B78 LDRB W8, [X21 + 0x9DD]
	0x032E9B7C MOV W19, W1

ISIL:
	001 Move W8, [X0+98]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Void Write(System.Char value)

Disassembly:
	0x032E9B80 MOV X20, X0
	0x032E9B84 TBNZ X8, 0x0, 0x32E9B9C
	0x032E9B88 ADRP X0, 0xE0A000
	0x032E9B8C LDR X0, [X0 + 0xE00]
	0x032E9B90 BL 0x1C16CF4
	0x032E9B94 MOVZ W8, 0x1
	0x032E9B98 STRB W8, [X21 + 0x9DD]
	0x032E9B9C TBZ X19, 0x0, 0x32E9BF0
	0x032E9BA0 LDR X19, [X20 + 0x18]
	0x032E9BA4 CBZ X19, 0x32E9C1C
	0x032E9BA8 ADRP X10, 0xE0A000
	0x032E9BAC LDR X8, [X19]
	0x032E9BB0 LDR X10, [X10 + 0xE00]
	0x032E9BB4 LDRH W9, [X8 + 0x12E]
	0x032E9BB8 LDR X1, [X10]
	0x032E9BBC CBZ X9, 0x32E9BE0
	0x032E9BC0 LDR X10, [X8 + 0xB0]
	0x032E9BC4 ADD X10, X10, 0x8
	0x032E9BC8 LDUR X11, [X10 - 0x8]
	0x032E9BCC CMP X11, X1
	0x032E9BD0 B.EQ 0x32E9BFC
	0x032E9BD4 SUBS X9, X9, 0x1
	0x032E9BD8 ADD X10, X10, 0x10
	0x032E9BDC B.NE 0x32E9BC8
	0x032E9BE0 MOV X0, X19
	0x032E9BE4 MOV W2, W31
	0x032E9BE8 BL 0x1C5C788
	0x032E9BEC B 0x32E9C08
	0x032E9BF0 LDP X20, X19, [X31 + 0x10]
	0x032E9BF4 LDP X30, X21, [X31], #0x20
	0x032E9BF8 RET
	0x032E9BFC LDRSW X9, [X10]
	0x032E9C00 ADD X8, X8, X9, 0x4, LSL
	0x032E9C04 ADD X0, X8, 0x138
	0x032E9C08 LDP X2, X1, [X0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W20, W1
	005 Move X19, X0
	006 Call StreamWriter.CheckAsyncTaskInProgress, X0
	007 Move W8, [X19+88]
	008 Move W9, [X19+92]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X0, X19
	011 Move W1, W31
	012 Move W2, W31
	013 Call StreamWriter.Flush, X0, X1, X2
	014 Move W8, [X19+88]
	015 Move X9, [X19+80]
	016 Compare X9, 0
	017 JumpIfEqual {39}
	018 Move W10, [X9+24]
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Add X9, X9, W8
	021 NotImplemented "Instruction STRH not yet implemented."
	022 Move W9, [X19+96]
	023 Add W8, W8, 1
	024 Move [X19+88], W8
	025 Compare W9, 0
	026 JumpIfEqual {35}
	027 Move X0, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move W1, 1
	031 Move W2, W31
	032 Move X30, [X31+32]
	033 Call StreamWriter.Flush, X0, X1, X2
	034 Return 
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Return 
	039 Call 0x1C17F20
	040 Call 0x1C17F28

Method: System.Void Write(System.Char[] buffer)

Disassembly:
	0x032E9C0C MOV X0, X19
	0x032E9C10 LDP X20, X19, [X31 + 0x10]
	0x032E9C14 LDP X30, X21, [X31], #0x20
	0x032E9C18 BR X2
	0x032E9C1C BL 0x1C16F20
	0x032E9C20 STR X30, [X31 - 0x10]!
	0x032E9C24 LDR X0, [X0 + 0x18]
	0x032E9C28 CBZ X0, 0x32E9C3C
	0x032E9C2C LDR X8, [X0]
	0x032E9C30 LDP X2, X1, [X8 + 0x1B8]
	0x032E9C34 LDR X30, [X31], #0x10
	0x032E9C38 BR X2
	0x032E9C3C BL 0x1C16F20
	0x032E9C40 STR X30, [X31 - 0x10]!
	0x032E9C44 LDR X0, [X0 + 0x18]
	0x032E9C48 CBZ X0, 0x32E9C5C
	0x032E9C4C LDR X8, [X0]
	0x032E9C50 LDP X2, X1, [X8 + 0x1C8]
	0x032E9C54 LDR X30, [X31], #0x10
	0x032E9C58 BR X2
	0x032E9C5C BL 0x1C16F20
	0x032E9C60 STR X30, [X31 - 0x10]!
	0x032E9C64 LDR X0, [X0 + 0x18]
	0x032E9C68 CBZ X0, 0x32E9C7C
	0x032E9C6C LDR X8, [X0]
	0x032E9C70 LDP X5, X4, [X8 + 0x1D8]
	0x032E9C74 LDR X30, [X31], #0x10
	0x032E9C78 BR X5
	0x032E9C7C BL 0x1C16F20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x10F4000
	007 Move X22, 0xE3A000
	008 Move W8, [X21+2513]
	009 Move X22, [X22+472]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xE3A000
	017 Move X0, [X0+472]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2513], W8
	021 Move X1, [X22]
	022 Move X0, X20
	023 Call ReadOnlySpan`1<Char>.op_Implicit, X0
	024 Move X2, X0
	025 Move X0, X19
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X22, [X31+16]
	029 Move X21, [X31+24]
	030 Move X3, X1
	031 Move X1, X2
	032 Move X2, X3
	033 Move W3, W31
	034 Move X4, X31
	035 Move X30, [X31+48]
	036 Call 0x32EEE70
	037 Return 

Method: System.Void Write(System.Char[] buffer, System.Int32 index, System.Int32 count)

Disassembly:
	0x032E9C80 STR X30, [X31 - 0x10]!
	0x032E9C84 LDR X0, [X0 + 0x18]
	0x032E9C88 CBZ X0, 0x32E9C9C
	0x032E9C8C LDR X8, [X0]
	0x032E9C90 LDP X2, X1, [X8 + 0x1F8]
	0x032E9C94 LDR X30, [X31], #0x10
	0x032E9C98 BR X2
	0x032E9C9C BL 0x1C16F20
	0x032E9CA0 STR X30, [X31 - 0x10]!
	0x032E9CA4 LDR X0, [X0 + 0x18]
	0x032E9CA8 CBZ X0, 0x32E9CBC
	0x032E9CAC LDR X8, [X0]
	0x032E9CB0 LDP X2, X1, [X8 + 0x1E8]
	0x032E9CB4 LDR X30, [X31], #0x10
	0x032E9CB8 BR X2
	0x032E9CBC BL 0x1C16F20
	0x032E9CC0 STR X30, [X31 - 0x20]!
	0x032E9CC4 STP X20, X19, [X31 + 0x10]
	0x032E9CC8 ADRP X20, 0x10F3000
	0x032E9CCC LDRB W8, [X20 + 0x9E0]
	0x032E9CD0 MOV X19, X0
	0x032E9CD4 TBNZ X8, 0x0, 0x32E9CEC
	0x032E9CD8 ADRP X0, 0xE0C000
	0x032E9CDC LDR X0, [X0 + 0xC48]
	0x032E9CE0 BL 0x1C16CF4
	0x032E9CE4 MOVZ W8, 0x1
	0x032E9CE8 STRB W8, [X20 + 0x9E0]
	0x032E9CEC LDR X0, [X19 + 0x28]
	0x032E9CF0 CBZ X0, 0x32E9D00
	0x032E9CF4 LDP X20, X19, [X31 + 0x10]
	0x032E9CF8 LDR X30, [X31], #0x20
	0x032E9CFC RET
	0x032E9D00 ADRP X8, 0xE0C000
	0x032E9D04 LDR X8, [X8 + 0xC48]
	0x032E9D08 LDR X0, [X8]
	0x032E9D0C LDR W8, [X0 + 0xE0]
	0x032E9D10 CBNZ W8, 0x32E9D18
	0x032E9D14 BL 0x1C16DFC
	0x032E9D18 LDP X20, X19, [X31 + 0x10]
	0x032E9D1C MOV X0, X31
	0x032E9D20 LDR X30, [X31], #0x20
	0x032E9D24 B 0x33387A0
	0x032E9D28 STP X30, X21, [X31 - 0x20]!
	0x032E9D2C STP X20, X19, [X31 + 0x10]
	0x032E9D30 ADRP X21, 0x10F3000
	0x032E9D34 ADRP X20, 0xE11000
	0x032E9D38 LDRB W8, [X21 + 0x9E1]
	0x032E9D3C LDR X20, [X20 + 0xC10]
	0x032E9D40 MOV X19, X0
	0x032E9D44 TBNZ X8, 0x0, 0x32E9D5C
	0x032E9D48 ADRP X0, 0xE11000
	0x032E9D4C LDR X0, [X0 + 0xC10]
	0x032E9D50 BL 0x1C16CF4
	0x032E9D54 MOVZ W8, 0x1
	0x032E9D58 STRB W8, [X21 + 0x9E1]
	0x032E9D5C LDR X8, [X19]
	0x032E9D60 MOVZ W1, 0x1
	0x032E9D64 MOV X0, X19
	0x032E9D68 LDP X9, X2, [X8 + 0x1C8]
	0x032E9D6C BLR X9
	0x032E9D70 LDR X0, [X20]
	0x032E9D74 LDR W8, [X0 + 0xE0]
	0x032E9D78 CBNZ W8, 0x32E9D80
	0x032E9D7C BL 0x1C16DFC
	0x032E9D80 MOV X0, X19
	0x032E9D84 LDP X20, X19, [X31 + 0x10]
	0x032E9D88 MOV X1, X31
	0x032E9D8C LDP X30, X21, [X31], #0x20
	0x032E9D90 B 0x33B3E9C
	0x032E9D94 RET
	0x032E9D98 STP X30, X21, [X31 - 0x20]!
	0x032E9D9C STP X20, X19, [X31 + 0x10]
	0x032E9DA0 ADRP X21, 0x10F3000
	0x032E9DA4 ADRP X20, 0xE11000
	0x032E9DA8 LDRB W8, [X21 + 0x9E2]
	0x032E9DAC LDR X20, [X20 + 0xC10]
	0x032E9DB0 MOV X19, X0
	0x032E9DB4 TBNZ X8, 0x0, 0x32E9DCC
	0x032E9DB8 ADRP X0, 0xE11000
	0x032E9DBC LDR X0, [X0 + 0xC10]
	0x032E9DC0 BL 0x1C16CF4
	0x032E9DC4 MOVZ W8, 0x1
	0x032E9DC8 STRB W8, [X21 + 0x9E2]
	0x032E9DCC LDR X8, [X19]
	0x032E9DD0 MOVZ W1, 0x1
	0x032E9DD4 MOV X0, X19
	0x032E9DD8 LDP X9, X2, [X8 + 0x1C8]
	0x032E9DDC BLR X9
	0x032E9DE0 LDR X0, [X20]
	0x032E9DE4 LDR W8, [X0 + 0xE0]
	0x032E9DE8 CBNZ W8, 0x32E9DF0
	0x032E9DEC BL 0x1C16DFC
	0x032E9DF0 MOV X0, X19
	0x032E9DF4 LDP X20, X19, [X31 + 0x10]
	0x032E9DF8 MOV X1, X31
	0x032E9DFC LDP X30, X21, [X31], #0x20
	0x032E9E00 B 0x33B3E9C
	0x032E9E04 RET
	0x032E9E08 LDR X0, [X0 + 0x20]
	0x032E9E0C RET
	0x032E9E10 RET
	0x032E9E14 CBZ X1, 0x32E9E30
	0x032E9E18 LDR X8, [X0]
	0x032E9E1C LDR W3, [X1 + 0x18]
	0x032E9E20 MOV W2, W31
	0x032E9E24 LDR X5, [X8 + 0x218]
	0x032E9E28 LDR X4, [X8 + 0x220]
	0x032E9E2C BR X5
	0x032E9E30 RET
	0x032E9E34 STR X30, [X31 - 0x40]!
	0x032E9E38 STP X24, X23, [X31 + 0x10]
	0x032E9E3C STP X22, X21, [X31 + 0x20]
	0x032E9E40 STP X20, X19, [X31 + 0x30]
	0x032E9E44 CBZ X1, 0x32E9EDC
	0x032E9E48 TBNZ X2, 0x1F, 0x32E9F24
	0x032E9E4C TBNZ X3, 0x1F, 0x32E9F44
	0x032E9E50 LDR X8, [X1 + 0x18]
	0x032E9E54 MOV X19, X1
	0x032E9E58 SUB W9, W8, W2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x10F4000
	008 Move W8, [X23+2514]
	009 Move W20, W3
	010 Move W21, W2
	011 Move X22, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xE3E000
	018 Move X0, [X0+3736]
	019 Call 0x1C17CF4
	020 Move X0, 0xE39000
	021 Move X0, [X0+2136]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+2514], W8
	025 Compare X22, 0
	026 JumpIfEqual {73}
	027 Move TEMP, X21
	028 And TEMP, TEMP, -2147483648
	029 Compare TEMP, -2147483648
	030 JumpIfEqual {90}
	031 Move TEMP, X20
	032 And TEMP, TEMP, -2147483648
	033 Compare TEMP, -2147483648
	034 JumpIfEqual {97}
	035 Move W9, [X22+24]
	036 Subtract W8, W9, W21
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X10, 0xE3E000
	039 Move X10, [X10+3736]
	040 Move X0, [X10]
	041 Move X10, [X0+56]
	042 Compare X10, 0
	043 JumpIfNotEqual {47}
	044 Call 0x1C5D6E0
	045 Move W9, [X22+24]
	046 Subtract W8, W9, W21
	047 Move X23, 0xE39000
	048 Move X23, [X23+2136]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X0, X31
	052 Call ThrowHelper.ThrowArgumentOutOfRangeException
	053 Move X2, [X23]
	054 Add X8, X22, W21
	055 Add X0, X8, 32
	056 Move W1, W20
	057 Call Span`1<Char>.op_Implicit, X0
	058 Move X2, X0
	059 Move X0, X19
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X22, [X31+16]
	063 Move X21, [X31+24]
	064 Move X3, X1
	065 Move X1, X2
	066 Move X2, X3
	067 Move W3, W31
	068 Move X4, X31
	069 Move X30, [X31+48]
	070 Move X23, [X31+56]
	071 Call 0x32EEE70
	072 Return 
	073 Move X0, 0xE10000
	074 Move X0, [X0+1320]
	075 Call 0x1C17D08
	076 Call 0x1C17F10
	077 Move X19, X0
	078 Move X0, 0xE36000
	079 Move X0, [X0+3912]
	080 Call 0x1C17D08
	081 Move X20, X0
	082 Move X0, 0xE3E000
	083 Move X0, [X0+3136]
	084 Call 0x1C17D08
	085 Move X2, X0
	086 Move X0, X19
	087 Move X1, X20
	088 Move X3, X31
	089 Call ArgumentNullException..ctor, X0, X1, X2
	090 Move X0, 0xE13000
	091 Move X0, [X0+1888]
	092 Call 0x1C17D08
	093 Call 0x1C17F10
	094 Move X19, X0
	095 Move X0, 0xE16000
	096 Move X0, [X0+304]
	097 Move X0, 0xE13000
	098 Move X0, [X0+1888]
	099 Call 0x1C17D08
	100 Call 0x1C17F10
	101 Move X19, X0
	102 Move X0, 0xE33000
	103 Move X0, [X0+1608]
	104 Call 0x1C17D08
	105 Move X20, X0
	106 Move X0, 0xE33000
	107 Move X0, [X0+1648]
	108 Call 0x1C17D08
	109 Move X2, X0
	110 Move X0, X19
	111 Move X1, X20
	112 Move X3, X31
	113 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	114 Move X0, 0xE13000
	115 Move X0, [X0+1400]
	116 Call 0x1C17D08
	117 Call 0x1C17F10
	118 Move X19, X0
	119 Move X0, 0xE33000
	120 Move X0, [X0+1888]
	121 Call 0x1C17D08
	122 Move X1, X0
	123 Move X0, X19
	124 Move X2, X31
	125 Call ArgumentException..ctor, X0, X1
	126 Move X0, 0xE3E000
	127 Move X0, [X0+3744]
	128 Call 0x1C17D08
	129 Move X1, X0
	130 Move X0, X19
	131 Call 0x1C17DEC

Method: System.Void Write(System.ReadOnlySpan`1<System.Char> buffer)

Disassembly:
	0x032E9E5C CMP W9, W3
	0x032E9E60 B.LT 0x32E9F8C
	0x032E9E64 CMP W3, 0x1
	0x032E9E68 B.LT 0x32E9EC8
	0x032E9E6C AND X8, X8, 0x0
	0x032E9E70 CMP X8, W2, UXTW
	0x032E9E74 B.LS 0x32E9EC4
	0x032E9E78 MOV W21, W2
	0x032E9E7C MOV W8, W3
	0x032E9E80 MOV X20, X0
	0x032E9E84 UBFM X22, X21, 0x20, 0x1F
	0x032E9E88 SUB X23, X8, 0x1
	0x032E9E8C MOVZ X24, 0x1
	0x032E9E90 LDR X8, [X20]
	0x032E9E94 ADD X9, X19, X22, 0x1F, ASR
	0x032E9E98 LDRH W1, [X9 + 0x20]
	0x032E9E9C MOV X0, X20
	0x032E9EA0 LDP X10, X2, [X8 + 0x1F8]
	0x032E9EA4 BLR X10
	0x032E9EA8 CBZ X23, 0x32E9EC8
	0x032E9EAC LDR W8, [X19 + 0x18]
	0x032E9EB0 ADD X21, X21, 0x1
	0x032E9EB4 ADD X22, X22, X24
	0x032E9EB8 SUB X23, X23, 0x1
	0x032E9EBC CMP X21, X8
	0x032E9EC0 B.CC 0x32E9E90
	0x032E9EC4 BL 0x1C16F28
	0x032E9EC8 LDP X20, X19, [X31 + 0x30]
	0x032E9ECC LDP X22, X21, [X31 + 0x20]
	0x032E9ED0 LDP X24, X23, [X31 + 0x10]
	0x032E9ED4 LDR X30, [X31], #0x40
	0x032E9ED8 RET
	0x032E9EDC ADRP X0, 0xE0F000
	0x032E9EE0 LDR X0, [X0 + 0x528]
	0x032E9EE4 BL 0x1C16D08
	0x032E9EE8 BL 0x1C16F10
	0x032E9EEC MOV X19, X0
	0x032E9EF0 ADRP X0, 0xE35000
	0x032E9EF4 LDR X0, [X0 + 0xF48]
	0x032E9EF8 BL 0x1C16D08
	0x032E9EFC MOV X20, X0
	0x032E9F00 ADRP X0, 0xE3D000
	0x032E9F04 LDR X0, [X0 + 0xC40]
	0x032E9F08 BL 0x1C16D08
	0x032E9F0C MOV X2, X0
	0x032E9F10 MOV X0, X19
	0x032E9F14 MOV X1, X20
	0x032E9F18 MOV X3, X31
	0x032E9F1C BL 0x3315F7C
	0x032E9F20 B 0x32E9FBC
	0x032E9F24 ADRP X0, 0xE12000
	0x032E9F28 LDR X0, [X0 + 0x760]
	0x032E9F2C BL 0x1C16D08
	0x032E9F30 BL 0x1C16F10
	0x032E9F34 MOV X19, X0
	0x032E9F38 ADRP X0, 0xE15000
	0x032E9F3C LDR X0, [X0 + 0x130]
	0x032E9F40 B 0x32E9F60

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x10F4000
	009 Move X22, 0xE3E000
	010 Move X23, 0xE0B000
	011 Move W8, [X24+2515]
	012 Move X22, [X22+3752]
	013 Move X23, [X23+1728]
	014 Move X19, X2
	015 Move X20, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0xE3E000
	022 Move X0, [X0+3752]
	023 Call 0x1C17CF4
	024 Move X0, 0xE0B000
	025 Move X0, [X0+1728]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X24+2515], W8
	029 Move X0, X21
	030 Move X1, X31
	031 Call "il2cpp_vm_object_is_inst", X0
	032 Move X8, [X23]
	033 Move X23, [X22]
	034 Move X22, X0
	035 Move W9, [X8+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {40}
	038 Move X0, X8
	039 Call 0x1C17DFC
	040 Move X0, X23
	041 Move X1, X31
	042 Call Type.GetTypeFromHandle, X0
	043 Move X1, X0
	044 Move X0, X22
	045 Move X2, X31
	046 Call Type.op_Equality, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {65}
	051 Move X0, X21
	052 Move X1, X20
	053 Move X2, X19
	054 Move X20, [X31+48]
	055 Move X19, [X31+56]
	056 Move X22, [X31+32]
	057 Move X21, [X31+40]
	058 Move X24, [X31+16]
	059 Move X23, [X31+24]
	060 Move W3, W31
	061 Move X4, X31
	062 Move X30, [X31+64]
	063 Call 0x32EEE70
	064 Return 
	065 Move X0, X21
	066 Move X1, X20
	067 Move X2, X19
	068 Move X20, [X31+48]
	069 Move X19, [X31+56]
	070 Move X22, [X31+32]
	071 Move X21, [X31+40]
	072 Move X24, [X31+16]
	073 Move X23, [X31+24]
	074 Move X30, [X31+64]

Method: System.Void WriteSpan(System.ReadOnlySpan`1<System.Char> buffer, System.Boolean appendNewLine)

Disassembly:
	0x032EA100 MOVZ W8, 0x1
	0x032EA104 STRB W8, [X20 + 0x9E4]
	0x032EA108 CBZ X19, 0x32EA148
	0x032EA10C ADRP X8, 0xE3C000
	0x032EA110 LDR X8, [X8 + 0xEE8]
	0x032EA114 LDR X0, [X8]
	0x032EA118 LDR X8, [X19]
	0x032EA11C CMP X8, X0
	0x032EA120 B.EQ 0x32EA138
	0x032EA124 BL 0x1C16F10
	0x032EA128 MOV X1, X19
	0x032EA12C MOV X20, X0
	0x032EA130 BL 0x32EA190
	0x032EA134 MOV X19, X20
	0x032EA138 MOV X0, X19
	0x032EA13C LDP X20, X19, [X31 + 0x10]
	0x032EA140 LDR X30, [X31], #0x20
	0x032EA144 RET
	0x032EA148 ADRP X0, 0xE0E000
	0x032EA14C LDR X0, [X0 + 0x528]
	0x032EA150 BL 0x1C16D08
	0x032EA154 BL 0x1C16F10
	0x032EA158 MOV X19, X0
	0x032EA15C ADRP X0, 0xE11000
	0x032EA160 LDR X0, [X0 + 0x960]
	0x032EA164 BL 0x1C16D08
	0x032EA168 MOV X1, X0
	0x032EA16C MOV X0, X19
	0x032EA170 MOV X2, X31
	0x032EA174 BL 0x330E100
	0x032EA178 ADRP X0, 0xE3C000
	0x032EA17C LDR X0, [X0 + 0xEF0]
	0x032EA180 BL 0x1C16D08
	0x032EA184 MOV X1, X0
	0x032EA188 MOV X0, X19
	0x032EA18C BL 0x1C16DEC
	0x032EA190 STP X30, X21, [X31 - 0x20]!
	0x032EA194 STP X20, X19, [X31 + 0x10]
	0x032EA198 ADRP X21, 0x10F2000
	0x032EA19C LDRB W8, [X21 + 0x9E7]
	0x032EA1A0 MOV X19, X1
	0x032EA1A4 MOV X20, X0
	0x032EA1A8 TBNZ X8, 0x0, 0x32EA1C0
	0x032EA1AC ADRP X0, 0xE3C000
	0x032EA1B0 LDR X0, [X0 + 0xE70]
	0x032EA1B4 BL 0x1C16CF4
	0x032EA1B8 MOVZ W8, 0x1
	0x032EA1BC STRB W8, [X21 + 0x9E7]
	0x032EA1C0 CBZ X19, 0x32EA208
	0x032EA1C4 ADRP X8, 0xE3C000
	0x032EA1C8 LDR X8, [X8 + 0xE70]
	0x032EA1CC LDR X0, [X8]
	0x032EA1D0 LDR W8, [X0 + 0xE0]
	0x032EA1D4 CBNZ W8, 0x32EA1DC
	0x032EA1D8 BL 0x1C16DFC
	0x032EA1DC LDR X8, [X19]
	0x032EA1E0 MOV X0, X19
	0x032EA1E4 LDP X9, X1, [X8 + 0x1A8]
	0x032EA1E8 BLR X9
	0x032EA1EC MOV X1, X0
	0x032EA1F0 MOV X0, X20
	0x032EA1F4 BL 0x32E80A4
	0x032EA1F8 STR X19, [X20 + 0x30]
	0x032EA1FC LDP X20, X19, [X31 + 0x10]
	0x032EA200 LDP X30, X21, [X31], #0x20
	0x032EA204 RET
	0x032EA208 BL 0x1C16F20
	0x032EA20C STP X30, X21, [X31 - 0x20]!
	0x032EA210 STP X20, X19, [X31 + 0x10]
	0x032EA214 ADRP X19, 0x10F2000
	0x032EA218 ADRP X21, 0xE3C000
	0x032EA21C ADRP X20, 0xE3C000
	0x032EA220 LDRB W8, [X19 + 0x9E5]
	0x032EA224 LDR X21, [X21 + 0xEF8]
	0x032EA228 LDR X20, [X20 + 0xE70]
	0x032EA22C TBNZ X8, 0x0, 0x32EA250
	0x032EA230 ADRP X0, 0xE3C000
	0x032EA234 LDR X0, [X0 + 0xEF8]
	0x032EA238 BL 0x1C16CF4
	0x032EA23C ADRP X0, 0xE3C000
	0x032EA240 LDR X0, [X0 + 0xE70]
	0x032EA244 BL 0x1C16CF4
	0x032EA248 MOVZ W8, 0x1
	0x032EA24C STRB W8, [X19 + 0x9E5]
	0x032EA250 LDR X0, [X21]
	0x032EA254 BL 0x1C16F10
	0x032EA258 MOV X19, X0
	0x032EA25C BL 0x32EA29C
	0x032EA260 LDR X8, [X20]
	0x032EA264 MOV X0, X31
	0x032EA268 LDR X8, [X8 + 0xB8]
	0x032EA26C STR X19, [X8]
	0x032EA270 BL 0x33C1548
	0x032EA274 CBZ X0, 0x32EA298
	0x032EA278 MOV X1, X31
	0x032EA27C BL 0x322D958
	0x032EA280 LDR X8, [X20]
	0x032EA284 LDP X20, X19, [X31 + 0x10]
	0x032EA288 LDR X8, [X8 + 0xB8]
	0x032EA28C STR X0, [X8 + 0x8]
	0x032EA290 LDP X30, X21, [X31], #0x20
	0x032EA294 RET
	0x032EA298 BL 0x1C16F20
	0x032EA29C STP X30, X21, [X31 - 0x20]!
	0x032EA2A0 STP X20, X19, [X31 + 0x10]
	0x032EA2A4 ADRP X21, 0x10F2000
	0x032EA2A8 ADRP X20, 0xE0B000
	0x032EA2AC LDRB W8, [X21 + 0x9E6]
	0x032EA2B0 LDR X20, [X20 + 0xC48]
	0x032EA2B4 MOV X19, X0
	0x032EA2B8 TBNZ X8, 0x0, 0x32EA2DC
	0x032EA2BC ADRP X0, 0xE0B000
	0x032EA2C0 LDR X0, [X0 + 0xC48]
	0x032EA2C4 BL 0x1C16CF4
	0x032EA2C8 ADRP X0, 0xE3C000
	0x032EA2CC LDR X0, [X0 + 0xE70]
	0x032EA2D0 BL 0x1C16CF4
	0x032EA2D4 MOVZ W8, 0x1
	0x032EA2D8 STRB W8, [X21 + 0x9E6]
	0x032EA2DC LDR X0, [X20]
	0x032EA2E0 ADRP X20, 0xE3C000
	0x032EA2E4 LDR W8, [X0 + 0xE0]
	0x032EA2E8 LDR X20, [X20 + 0xE70]
	0x032EA2EC CBNZ W8, 0x32EA2F4
	0x032EA2F0 BL 0x1C16DFC
	0x032EA2F4 MOV X0, X31
	0x032EA2F8 BL 0x3338524
	0x032EA2FC LDR X8, [X20]
	0x032EA300 MOV X20, X0
	0x032EA304 LDR W9, [X8 + 0xE0]
	0x032EA308 CBNZ W9, 0x32EA314
	0x032EA30C MOV X0, X8
	0x032EA310 BL 0x1C16DFC
	0x032EA314 MOV X0, X19
	0x032EA318 MOV X1, X20
	0x032EA31C LDP X20, X19, [X31 + 0x10]
	0x032EA320 LDP X30, X21, [X31], #0x20
	0x032EA324 B 0x32E80A4
	0x032EA328 RET
	0x032EA32C RET
	0x032EA330 RET
	0x032EA334 RET
	0x032EA338 RET
	0x032EA33C STR X30, [X31 - 0x10]!
	0x032EA340 LDR X0, [X0 + 0x30]
	0x032EA344 CBZ X0, 0x32EA358
	0x032EA348 LDR X8, [X0]
	0x032EA34C LDP X2, X1, [X8 + 0x1A8]
	0x032EA350 LDR X30, [X31], #0x10
	0x032EA354 BR X2
	0x032EA358 BL 0x1C16F20
	0x032EA35C STR X30, [X31 - 0x10]!
	0x032EA360 LDR X0, [X0 + 0x30]
	0x032EA364 CBZ X0, 0x32EA378
	0x032EA368 LDR X8, [X0]
	0x032EA36C LDP X2, X1, [X8 + 0x1E8]
	0x032EA370 LDR X30, [X31], #0x10
	0x032EA374 BR X2
	0x032EA378 BL 0x1C16F20
	0x032EA37C STR X30, [X31 - 0x10]!
	0x032EA380 LDR X0, [X0 + 0x30]
	0x032EA384 CBZ X0, 0x32EA398
	0x032EA388 LDR X8, [X0]
	0x032EA38C LDP X2, X1, [X8 + 0x1B8]
	0x032EA390 LDR X30, [X31], #0x10
	0x032EA394 BR X2
	0x032EA398 BL 0x1C16F20
	0x032EA39C STP X30, X21, [X31 - 0x20]!
	0x032EA3A0 STP X20, X19, [X31 + 0x10]
	0x032EA3A4 ADRP X21, 0x10F2000
	0x032EA3A8 LDRB W8, [X21 + 0x9E8]
	0x032EA3AC MOV W19, W1
	0x032EA3B0 MOV X20, X0
	0x032EA3B4 TBNZ X8, 0x0, 0x32EA3CC
	0x032EA3B8 ADRP X0, 0xE09000
	0x032EA3BC LDR X0, [X0 + 0xE00]
	0x032EA3C0 BL 0x1C16CF4

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X23, 0x10F3000
	012 Move W8, [X23+2516]
	013 Move W20, W3
	014 Move X21, X2
	015 Move X22, X1
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {32}
	021 Move X0, 0xE0A000
	022 Move X0, [X0+1448]
	023 Call 0x1C17CF4
	024 Move X0, 0xE39000
	025 Move X0, [X0+32]
	026 Call 0x1C17CF4
	027 Move X0, 0xE39000
	028 Move X0, [X0+40]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X23+2516], W8
	032 Move X0, X19
	033 Call StreamWriter.CheckAsyncTaskInProgress, X0
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move W8, [X19+88]
	036 Move W9, [X19+92]
	037 Subtract W9, W9, W8
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X25, [X19+80]
	040 Compare X25, 0
	041 JumpIfEqual {179}
	042 Move X8, 0xE39000
	043 Move X8, [X8+32]
	044 Move X0, X22
	045 Move X1, X21
	046 Move X2, [X8]
	047 Call MemoryMarshal.GetReference, X0
	048 Move X8, [X25+24]
	049 Compare W8, 0
	050 JumpIfEqual {172}
	051 Move W24, [X19+88]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X27, 0xE0A000
	054 Move X27, [X27+1448]
	055 Move X22, X0
	056 Add X26, X25, 32
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X0, X19
	059 Move W1, W31
	060 Move W2, W31
	061 Call StreamWriter.Flush, X0, X1, X2
	062 Move W24, W31
	063 Move X0, [X27]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move W8, [X25+24]
	069 Move W1, W21
	070 Move X2, X31
	071 Subtract W0, W8, W24
	072 Call Math.Min, X0, X1
	073 Move W8, W0
	074 ShiftRight W8, 31
	075 And W8, W8, 0x3FFFFFFF
	076 Move X2, W8
	077 Move W23, W0
	078 Add X1, X26, W24
	079 Move X0, X22
	080 Move X3, X2
	081 Move X4, X31
	082 Call Buffer.MemoryCopy, X0, X1, X2, X3
	083 Move W8, [X19+88]
	084 Subtract W21, W21, W23
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Add W8, W8, W23
	087 Move [X19+88], W8
	088 Move X8, [X25+24]
	089 Add X22, X22, W23
	090 Add W24, W23, W24
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move X9, [X19+80]
	093 And X10, X21, 0
	094 Add W24, W8, 1
	095 Compare X9, 0
	096 JumpIfEqual {174}
	097 Move W11, [X9+24]
	098 NotImplemented "Instruction CMP not yet implemented."
	099 NotImplemented "Instruction LDRH not yet implemented."
	100 Add X8, X9, W8
	101 Subtract X10, X10, 1
	102 NotImplemented "Instruction STRH not yet implemented."
	103 Move W8, W24
	104 Move [X19+88], W24
	105 Move TEMP, X20
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfEqual {114}
	109 Move W24, W8
	110 Move TEMP, X20
	111 And TEMP, TEMP, 1
	112 Compare TEMP, 1
	113 JumpIfNotEqual {143}
	114 Move X20, [X19+24]
	115 Compare X20, 0
	116 JumpIfEqual {173}
	117 Move X8, [X20+24]
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Move X21, X31
	120 And X8, X8, 0
	121 Add X22, X20, 32
	122 Move W9, [X19+92]
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Move X0, X19
	125 Move W1, W31
	126 Move W2, W31
	127 Call StreamWriter.Flush, X0, X1, X2
	128 Move W24, [X19+88]
	129 Move W8, [X20+24]
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Move X9, [X19+80]
	132 Compare X9, 0
	133 JumpIfEqual {173}
	134 Move W10, [X9+24]
	135 NotImplemented "Instruction CMP not yet implemented."
	136 NotImplemented "Instruction LDRH not yet implemented."
	137 Add X21, X21, 1
	138 Add X9, X9, W24
	139 Add W24, W24, 1
	140 NotImplemented "Instruction CMP not yet implemented."
	141 NotImplemented "Instruction STRH not yet implemented."
	142 Move [X19+88], W24
	143 Move W8, [X19+96]
	144 Compare W8, 0
	145 JumpIfEqual {161}
	146 Move X0, X19
	147 Move X20, [X31+64]
	148 Move X19, [X31+72]
	149 Move X22, [X31+48]
	150 Move X21, [X31+56]
	151 Move X24, [X31+32]
	152 Move X23, [X31+40]
	153 Move X26, [X31+16]
	154 Move X25, [X31+24]
	155 Move W1, 1
	156 Move W2, W31
	157 Move X30, [X31+80]
	158 Move X27, [X31+88]
	159 Call StreamWriter.Flush, X0, X1, X2
	160 Return 
	161 Move X20, [X31+64]
	162 Move X19, [X31+72]
	163 Move X22, [X31+48]
	164 Move X21, [X31+56]
	165 Move X24, [X31+32]
	166 Move X23, [X31+40]
	167 Move X26, [X31+16]
	168 Move X25, [X31+24]
	169 Move X30, [X31+80]
	170 Move X27, [X31+88]
	171 Return 
	172 Call 0x1C17F28
	173 Call 0x1C17F20
	174 Move [X19+88], W24
	175 Call 0x1C17F20
	176 Add W8, W8, 1
	177 Move [X19+88], W8
	178 Call 0x1C17F28
	179 Move X0, 0xE33000
	180 Move X0, [X0+1208]
	181 Call 0x1C17D08
	182 Call 0x1C17F10
	183 Move X19, X0
	184 Move X0, 0xE3D000
	185 Move X0, [X0+3720]
	186 Call 0x1C17D08
	187 Move X2, X0
	188 Move X0, X19
	189 Move X1, X31
	190 Move X3, X31
	191 Call ObjectDisposedException..ctor, X0, X1, X2
	192 Move X0, 0xE3D000
	193 Move X0, [X0+3760]
	194 Call 0x1C17D08
	195 Move X1, X0
	196 Move X0, X19
	197 Call 0x1C17DEC

Method: System.Void Write(System.String value)

Disassembly:
	0x032EA3C4 MOVZ W8, 0x1
	0x032EA3C8 STRB W8, [X21 + 0x9E8]
	0x032EA3CC TBZ X19, 0x0, 0x32EA420
	0x032EA3D0 LDR X19, [X20 + 0x30]
	0x032EA3D4 CBZ X19, 0x32EA44C
	0x032EA3D8 ADRP X10, 0xE09000
	0x032EA3DC LDR X8, [X19]
	0x032EA3E0 LDR X10, [X10 + 0xE00]
	0x032EA3E4 LDRH W9, [X8 + 0x12E]
	0x032EA3E8 LDR X1, [X10]
	0x032EA3EC CBZ X9, 0x32EA410
	0x032EA3F0 LDR X10, [X8 + 0xB0]
	0x032EA3F4 ADD X10, X10, 0x8
	0x032EA3F8 LDUR X11, [X10 - 0x8]
	0x032EA3FC CMP X11, X1
	0x032EA400 B.EQ 0x32EA42C
	0x032EA404 SUBS X9, X9, 0x1
	0x032EA408 ADD X10, X10, 0x10
	0x032EA40C B.NE 0x32EA3F8
	0x032EA410 MOV X0, X19
	0x032EA414 MOV W2, W31
	0x032EA418 BL 0x1C5C788
	0x032EA41C B 0x32EA438
	0x032EA420 LDP X20, X19, [X31 + 0x10]
	0x032EA424 LDP X30, X21, [X31], #0x20
	0x032EA428 RET
	0x032EA42C LDRSW X9, [X10]
	0x032EA430 ADD X8, X8, X9, 0x4, LSL

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10F0000
	006 Move W8, [X21+1890]
	007 Move X20, X1
	008 Move X19, X0
	009 Compare W8, 0
	010 JumpIfEqual {18}
	011 Compare X20, 0
	012 JumpIfEqual {25}
	013 Move X0, X20
	014 Move X1, X31
	015 Call String.GetRawStringData, X0
	016 Move W2, [X20+16]
	017 Move X1, X0
	018 Move X0, 0xE31000
	019 Move X0, [X0+656]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+1890], W8
	023 Compare X20, 0
	024 JumpIfNotEqual {13}
	025 Move X1, X31
	026 Move X2, X31
	027 Move X0, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move W3, W31
	031 Move X4, X31
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Call 0x32EEE70
	035 Return 

Method: System.Void WriteLine(System.String value)

Disassembly:
	0x032EA434 ADD X0, X8, 0x138
	0x032EA438 LDP X2, X1, [X0]
	0x032EA43C MOV X0, X19
	0x032EA440 LDP X20, X19, [X31 + 0x10]
	0x032EA444 LDP X30, X21, [X31], #0x20
	0x032EA448 BR X2
	0x032EA44C BL 0x1C16F20
	0x032EA450 STR X30, [X31 - 0x10]!
	0x032EA454 LDR X0, [X0 + 0x30]
	0x032EA458 CBZ X0, 0x32EA46C
	0x032EA45C LDR X8, [X0]
	0x032EA460 LDP X2, X1, [X8 + 0x1D8]
	0x032EA464 LDR X30, [X31], #0x10
	0x032EA468 BR X2
	0x032EA46C BL 0x1C16F20
	0x032EA470 STR X30, [X31 - 0x10]!
	0x032EA474 LDR X0, [X0 + 0x30]
	0x032EA478 CBZ X0, 0x32EA48C
	0x032EA47C LDR X8, [X0]
	0x032EA480 LDP X3, X2, [X8 + 0x1F8]
	0x032EA484 LDR X30, [X31], #0x10
	0x032EA488 BR X3
	0x032EA48C BL 0x1C16F20
	0x032EA490 STR X30, [X31 - 0x10]!
	0x032EA494 LDR X0, [X0 + 0x30]
	0x032EA498 CBZ X0, 0x32EA4B0
	0x032EA49C LDR X8, [X0]
	0x032EA4A0 LDR X3, [X8 + 0x208]
	0x032EA4A4 LDR X2, [X8 + 0x210]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, X1
	006 Move X19, X0
	007 Call StreamWriter.CheckAsyncTaskInProgress, X0
	008 Move X21, 0x10F0000
	009 Move W8, [X21+1890]
	010 Compare W8, 0
	011 JumpIfEqual {19}
	012 Compare X20, 0
	013 JumpIfEqual {26}
	014 Move X0, X20
	015 Move X1, X31
	016 Call String.GetRawStringData, X0
	017 Move W2, [X20+16]
	018 Move X1, X0
	019 Move X0, 0xE31000
	020 Move X0, [X0+656]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1890], W8
	024 Compare X20, 0
	025 JumpIfNotEqual {14}
	026 Move X1, X31
	027 Move X2, X31
	028 Move X0, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move W3, 1
	032 Move X4, X31
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call 0x32EEE70
	036 Return 

Method: System.Void .cctor()

Disassembly:
	0x032EA4A8 LDR X30, [X31], #0x10
	0x032EA4AC BR X3
	0x032EA4B0 BL 0x1C16F20
	0x032EA4B4 STR X30, [X31 - 0x10]!
	0x032EA4B8 LDR X0, [X0 + 0x30]
	0x032EA4BC CBZ X0, 0x32EA4D4
	0x032EA4C0 LDR X8, [X0]
	0x032EA4C4 LDR X5, [X8 + 0x218]
	0x032EA4C8 LDR X4, [X8 + 0x220]
	0x032EA4CC LDR X30, [X31], #0x10
	0x032EA4D0 BR X5
	0x032EA4D4 BL 0x1C16F20
	0x032EA4D8 STR X30, [X31 - 0x10]!
	0x032EA4DC LDR X0, [X0 + 0x30]
	0x032EA4E0 CBZ X0, 0x32EA4F8
	0x032EA4E4 LDR X8, [X0]
	0x032EA4E8 LDR X3, [X8 + 0x238]
	0x032EA4EC LDR X2, [X8 + 0x240]
	0x032EA4F0 LDR X30, [X31], #0x10
	0x032EA4F4 BR X3
	0x032EA4F8 BL 0x1C16F20
	0x032EA4FC STR X30, [X31 - 0x10]!
	0x032EA500 LDR X0, [X0 + 0x30]
	0x032EA504 CBZ X0, 0x32EA51C
	0x032EA508 LDR X8, [X0]
	0x032EA50C LDR X3, [X8 + 0x248]
	0x032EA510 LDR X2, [X8 + 0x250]
	0x032EA514 LDR X30, [X31], #0x10
	0x032EA518 BR X3
	0x032EA51C BL 0x1C16F20
	0x032EA520 STR X30, [X31 - 0x10]!
	0x032EA524 LDR X0, [X0 + 0x30]
	0x032EA528 CBZ X0, 0x32EA540
	0x032EA52C LDR X8, [X0]
	0x032EA530 LDR X2, [X8 + 0x258]
	0x032EA534 LDR X1, [X8 + 0x260]
	0x032EA538 LDR X30, [X31], #0x10
	0x032EA53C BR X2
	0x032EA540 BL 0x1C16F20
	0x032EA544 STR X30, [X31 - 0x10]!
	0x032EA548 LDR X0, [X0 + 0x30]
	0x032EA54C CBZ X0, 0x32EA564
	0x032EA550 LDR X8, [X0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x10F3000
	007 Move X19, 0xE39000
	008 Move W8, [X20+2517]
	009 Move X19, [X19+3344]
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xE38000
	015 Move X0, [X0+3336]
	016 Call 0x1C17CF4
	017 Move X0, 0xE39000
	018 Move X0, [X0+3344]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2517], W8
	022 Move X0, [X19]
	023 Move X22, 0xE38000
	024 Move W8, [X0+224]
	025 Move X22, [X22+3336]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X19]
	030 Move X8, [X0+184]
	031 Move X19, [X8]
	032 Call StreamWriter.get_UTF8NoBOM
	033 Move X8, [X22]
	034 Move X20, X0
	035 Move X0, X8
	036 Call 0x1C17F10
	037 Move W3, 128
	038 Move W4, 1
	039 Move X1, X19
	040 Move X2, X20
	041 Move X21, X0
	042 Call StreamWriter..ctor, X0, X1, X2, X3, X4
	043 Move X8, [X22]
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X8, [X8+184]
	047 Move [X8], X21
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X30, [X31+48]
	051 Return 

