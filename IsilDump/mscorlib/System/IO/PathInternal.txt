Type: System.IO.PathInternal

Method: System.Int32 GetRootLength(System.ReadOnlySpan`1<System.Char> path)

Disassembly:
	0x032E6024 MOV X26, X0
	0x032E6028 SUBS X1, X23, X0
	0x032E602C B.LE 0x32E6040
	0x032E6030 LDR X8, [X19 + 0x30]
	0x032E6034 MOV X2, X31
	0x032E6038 ADD X0, X26, X8
	0x032E603C BL 0x33A8870
	0x032E6040 CMP X22, X26
	0x032E6044 B.LE 0x32E6058
	0x032E6048 MOV X0, X25
	0x032E604C MOV X1, X22
	0x032E6050 MOV X2, X31
	0x032E6054 BL 0x33EB18C
	0x032E6058 LDR X2, [X27]
	0x032E605C MOV X0, X24
	0x032E6060 MOV X1, X20
	0x032E6064 BL 0x2218CF0
	0x032E6068 LDR X8, [X19 + 0x28]
	0x032E606C MOV X24, X0
	0x032E6070 CBZ X8, 0x32E60F8
	0x032E6074 LDR X8, [X19 + 0x40]
	0x032E6078 SXTW X9, W20
	0x032E607C SUB X8, X8, X23
	0x032E6080 CMP X8, X9
	0x032E6084 B.LT 0x32E61A0
	0x032E6088 MOV X0, X31
	0x032E608C STR X31, [X31 + 0x8]
	0x032E6090 BL 0x32C5C58
	0x032E6094 LDR X0, [X19 + 0x28]
	0x032E6098 CBZ X0, 0x32E61E8
	0x032E609C ADD X1, X31, 0x8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10F7000
	006 Move W8, [X21+2475]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xE39000
	014 Move X0, [X0+3440]
	015 Call 0x1C17CF4
	016 Move X0, 0xE3D000
	017 Move X0, [X0+40]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2475], W8
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X8, 0xE39000
	023 Move X8, [X8+3440]
	024 NotImplemented "Instruction LDRH not yet implemented."
	025 Move X0, [X8]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSET not yet implemented."
	032 Move W0, W31
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return X0

Method: System.Boolean IsDirectorySeparator(System.Char c)

Disassembly:
	0x032E60A0 MOV X2, X31
	0x032E60A4 BL 0x32BF80C
	0x032E60A8 LDR X8, [X31 + 0x8]
	0x032E60AC LDR X9, [X19 + 0x50]

ISIL:
	001 And W8, W0, 0xFFFF
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Boolean EndsInDirectorySeparator(System.ReadOnlySpan`1<System.Char> path)

Disassembly:
	0x032E60B0 ADD X8, X23, X8
	0x032E60B4 ADD X0, X8, X9
	0x032E60B8 MOV X1, X24
	0x032E60BC MOV W2, W20
	0x032E60C0 MOV X3, X31
	0x032E60C4 BL 0x33A8924
	0x032E60C8 MOV X25, X31
	0x032E60CC MOVZ W26, 0xE
	0x032E60D0 LDR X8, [X31 + 0x8]
	0x032E60D4 CBZ X8, 0x32E60E8
	0x032E60D8 LDR X0, [X19 + 0x28]
	0x032E60DC CBZ X0, 0x32E61F4
	0x032E60E0 MOV X1, X31
	0x032E60E4 BL 0x32BFA0C
	0x032E60E8 CBNZ X25, 0x32E61EC
	0x032E60EC CMP W26, 0xE
	0x032E60F0 B.EQ 0x32E6110
	0x032E60F4 CBNZ W26, 0x32E6120
	0x032E60F8 LDR X8, [X19 + 0x30]
	0x032E60FC MOV X1, X24
	0x032E6100 MOV W2, W20
	0x032E6104 MOV X3, X31
	0x032E6108 ADD X0, X23, X8
	0x032E610C BL 0x33A8924
	0x032E6110 MOV X0, X21
	0x032E6114 MOV X1, X22
	0x032E6118 MOV X2, X31
	0x032E611C BL 0x33EB18C
	0x032E6120 LDP X20, X19, [X31 + 0x50]
	0x032E6124 LDP X22, X21, [X31 + 0x40]
	0x032E6128 LDP X24, X23, [X31 + 0x30]
	0x032E612C LDP X26, X25, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10F7000
	006 Move W8, [X21+2476]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xE39000
	014 Move X0, [X0+3440]
	015 Call 0x1C17CF4
	016 Move X0, 0xE3D000
	017 Move X0, [X0+40]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2476], W8
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X8, 0xE39000
	023 Move X8, [X8+3440]
	024 Move X0, [X8]
	025 Subtract W8, W19, 1
	026 NotImplemented "Instruction LDRH not yet implemented."
	027 Move W9, [X0+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 NotImplemented "Instruction CMP not yet implemented."
	032 NotImplemented "Instruction CSET not yet implemented."
	033 Move W0, W31
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return X0

Method: System.Boolean StartsWithDirectorySeparator(System.ReadOnlySpan`1<System.Char> path)

Disassembly:
	0x032E6130 LDP X30, X27, [X31 + 0x10]
	0x032E6134 ADD X31, X31, 0x60
	0x032E6138 RET
	0x032E613C ADRP X0, 0xE3B000
	0x032E6140 LDR X0, [X0 + 0x7A8]
	0x032E6144 BL 0x1C16D08
	0x032E6148 BL 0x1C16F10
	0x032E614C MOV X19, X0
	0x032E6150 ADRP X0, 0xE40000
	0x032E6154 LDR X0, [X0 + 0xC68]
	0x032E6158 BL 0x1C16D08
	0x032E615C MOV X1, X0
	0x032E6160 MOV X0, X19
	0x032E6164 BL 0x32E16BC
	0x032E6168 B 0x32E61D0
	0x032E616C ADRP X0, 0xE0D000
	0x032E6170 LDR X0, [X0 + 0xB40]
	0x032E6174 BL 0x1C16D08
	0x032E6178 BL 0x1C16F10
	0x032E617C MOV X19, X0
	0x032E6180 ADRP X0, 0xE40000
	0x032E6184 LDR X0, [X0 + 0xDD8]
	0x032E6188 BL 0x1C16D08
	0x032E618C MOV X1, X0
	0x032E6190 MOV X0, X19
	0x032E6194 MOV X2, X31
	0x032E6198 BL 0x3379A44
	0x032E619C B 0x32E61D0
	0x032E61A0 ADRP X0, 0xE15000
	0x032E61A4 LDR X0, [X0 + 0x578]
	0x032E61A8 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10F7000
	006 Move W8, [X21+2477]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xE39000
	014 Move X0, [X0+3440]
	015 Call 0x1C17CF4
	016 Move X0, 0xE3D000
	017 Move X0, [X0+40]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2477], W8
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X8, 0xE39000
	023 Move X8, [X8+3440]
	024 NotImplemented "Instruction LDRH not yet implemented."
	025 Move X0, [X8]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSET not yet implemented."
	032 Move W0, W31
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return X0

Method: System.String TrimEndingDirectorySeparator(System.String path)

Disassembly:
	0x032E61AC BL 0x1C16F10
	0x032E61B0 MOV X19, X0
	0x032E61B4 ADRP X0, 0xE40000
	0x032E61B8 LDR X0, [X0 + 0xDE0]
	0x032E61BC BL 0x1C16D08
	0x032E61C0 MOV X1, X0
	0x032E61C4 MOV X0, X19
	0x032E61C8 MOV X2, X31
	0x032E61CC BL 0x3314A68
	0x032E61D0 ADRP X0, 0xE40000
	0x032E61D4 LDR X0, [X0 + 0xDE8]
	0x032E61D8 BL 0x1C16D08
	0x032E61DC MOV X1, X0
	0x032E61E0 MOV X0, X19
	0x032E61E4 BL 0x1C16DEC
	0x032E61E8 BL 0x1C16F20
	0x032E61EC MOV X0, X25
	0x032E61F0 BL 0x1C16F18
	0x032E61F4 BL 0x1C16F20
	0x032E61F8 B 0x32E61FC
	0x032E61FC MOV X26, X0
	0x032E6200 CMP W1, 0x1
	0x032E6204 B.NE 0x32E6220
	0x032E6208 MOV X0, X26
	0x032E620C BL 0x3EB1AD0
	0x032E6210 LDR X25, [X0]
	0x032E6214 BL 0x3EB1AE0
	0x032E6218 MOV W26, W31
	0x032E621C B 0x32E60D0
	0x032E6220 MOV X25, X31
	0x032E6224 B 0x32E622C
	0x032E6228 MOV X26, X0
	0x032E622C LDR X8, [X31 + 0x8]
	0x032E6230 CBZ X8, 0x32E6248
	0x032E6234 LDR X0, [X19 + 0x28]
	0x032E6238 CBNZ X0, 0x32E6240
	0x032E623C BL 0x1C16F20
	0x032E6240 MOV X1, X31
	0x032E6244 BL 0x32BFA0C
	0x032E6248 CBNZ X25, 0x32E6254
	0x032E624C MOV X0, X26
	0x032E6250 BL 0x1D2C690
	0x032E6254 MOV X0, X25
	0x032E6258 BL 0x1C16F18
	0x032E625C BL 0x1990590
	0x032E6260 STP X30, X21, [X31 - 0x20]!
	0x032E6264 STP X20, X19, [X31 + 0x10]
	0x032E6268 LDR X8, [X0]
	0x032E626C MOV X19, X0
	0x032E6270 LDR X9, [X8 + 0x288]
	0x032E6274 LDR X2, [X8 + 0x290]
	0x032E6278 MOV W1, W31
	0x032E627C BLR X9
	0x032E6280 MOV X0, X19
	0x032E6284 LDP X20, X19, [X31 + 0x10]
	0x032E6288 MOV X1, X31
	0x032E628C LDP X30, X21, [X31], #0x20
	0x032E6290 B 0x33CB4DC
	0x032E6294 CMP W1, 0x1
	0x032E6298 MOV X21, X0
	0x032E629C B.NE 0x32E62CC
	0x032E62A0 MOV X0, X21
	0x032E62A4 BL 0x3EB1AD0
	0x032E62A8 LDR X20, [X0]
	0x032E62AC BL 0x3EB1AE0
	0x032E62B0 MOV X0, X19
	0x032E62B4 MOV X1, X31
	0x032E62B8 BL 0x33CB4DC
	0x032E62BC CBNZ X20, 0x32E62D4
	0x032E62C0 LDP X20, X19, [X31 + 0x10]
	0x032E62C4 LDP X30, X21, [X31], #0x20
	0x032E62C8 RET
	0x032E62CC MOV X20, X31
	0x032E62D0 B 0x32E62E0
	0x032E62D4 MOV X0, X20
	0x032E62D8 BL 0x1C16F18
	0x032E62DC MOV X21, X0
	0x032E62E0 MOV X0, X19
	0x032E62E4 MOV X1, X31
	0x032E62E8 BL 0x33CB4DC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x10F7000
	008 Move W8, [X20+2478]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE39000
	015 Move X0, [X0+3440]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2478], W8
	019 Move X23, 0x10F4000
	020 Move W8, [X23+1890]
	021 Compare W8, 0
	022 JumpIfNotEqual {28}
	023 Move X0, 0xE35000
	024 Move X0, [X0+656]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X23+1890], W8
	028 Move X22, 0xE39000
	029 Move X22, [X22+3440]
	030 Compare X19, 0
	031 JumpIfEqual {37}
	032 Move X0, X19
	033 Move X1, X31
	034 Call String.GetRawStringData, X0
	035 Move W20, [X19+16]
	036 Move X21, X0
	037 Move X21, X31
	038 Move X20, X31
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X21
	045 Move X1, X20
	046 Call PathInternal.EndsInDirectorySeparator, X0
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {82}
	051 Move W8, [X23+1890]
	052 Compare W8, 0
	053 JumpIfEqual {61}
	054 Compare X19, 0
	055 JumpIfEqual {68}
	056 Move X0, X19
	057 Move X1, X31
	058 Call String.GetRawStringData, X0
	059 Move W20, [X19+16]
	060 Move X21, X0
	061 Move X0, 0xE35000
	062 Move X0, [X0+656]
	063 Call 0x1C17CF4
	064 Move W8, 1
	065 Move [X23+1890], W8
	066 Compare X19, 0
	067 JumpIfNotEqual {56}
	068 Move X21, X31
	069 Move X20, X31
	070 Move X0, [X22]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Move X0, X21
	076 Move X1, X20
	077 Call PathInternal.IsRoot, X0
	078 Move TEMP, X0
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfNotEqual {90}
	082 Move X0, X19
	083 Move X20, [X31+32]
	084 Move X19, [X31+40]
	085 Move X22, [X31+16]
	086 Move X21, [X31+24]
	087 Move X30, [X31+48]
	088 Move X23, [X31+56]
	089 Return X0
	090 Compare X19, 0
	091 JumpIfEqual {105}
	092 Move W8, [X19+16]
	093 Move X0, X19
	094 Move X20, [X31+32]
	095 Move X19, [X31+40]
	096 Move X22, [X31+16]
	097 Move X21, [X31+24]
	098 Subtract W2, W8, 1
	099 Move W1, W31
	100 Move X3, X31
	101 Move X30, [X31+48]
	102 Move X23, [X31+56]
	103 Call String.Substring, X0, X1, X2
	104 Return X0
	105 Call 0x1C17F20

Method: System.ReadOnlySpan`1<System.Char> TrimEndingDirectorySeparator(System.ReadOnlySpan`1<System.Char> path)

Disassembly:
	0x032E6368 STR X30, [X31 - 0x20]!
	0x032E636C STP X20, X19, [X31 + 0x10]
	0x032E6370 ADRP X20, 0x10F6000
	0x032E6374 LDRB W8, [X20 + 0x9B6]
	0x032E6378 MOV X19, X0
	0x032E637C TBNZ X8, 0x0, 0x32E6394
	0x032E6380 ADRP X0, 0xE3C000
	0x032E6384 LDR X0, [X0 + 0xCC8]
	0x032E6388 BL 0x1C16CF4
	0x032E638C MOVZ W8, 0x1
	0x032E6390 STRB W8, [X20 + 0x9B6]
	0x032E6394 LDR X0, [X19 + 0x58]
	0x032E6398 CBZ X0, 0x32E63B4
	0x032E639C MOV X1, X31
	0x032E63A0 BL 0x33ED11C
	0x032E63A4 TBZ X0, 0x0, 0x32E63B8
	0x032E63A8 LDP X20, X19, [X31 + 0x10]
	0x032E63AC LDR X30, [X31], #0x20
	0x032E63B0 RET
	0x032E63B4 BL 0x1C16F20
	0x032E63B8 ADRP X8, 0xE3C000
	0x032E63BC LDR X8, [X8 + 0xCC8]
	0x032E63C0 LDR X0, [X8]
	0x032E63C4 BL 0x19903D0
	0x032E63C8 BL 0x32E63CC
	0x032E63CC STP X30, X19, [X31 - 0x10]!
	0x032E63D0 ADRP X0, 0xE0D000
	0x032E63D4 LDR X0, [X0 + 0x5B0]
	0x032E63D8 BL 0x1C16D08
	0x032E63DC BL 0x1C16F10
	0x032E63E0 MOV X19, X0
	0x032E63E4 ADRP X0, 0xE40000
	0x032E63E8 LDR X0, [X0 + 0xDF0]
	0x032E63EC BL 0x1C16D08
	0x032E63F0 MOV X1, X0
	0x032E63F4 MOV X0, X19
	0x032E63F8 MOV X2, X31
	0x032E63FC BL 0x337DF1C
	0x032E6400 ADRP X0, 0xE40000
	0x032E6404 LDR X0, [X0 + 0xDF8]
	0x032E6408 BL 0x1C16D08
	0x032E640C MOV X1, X0
	0x032E6410 MOV X0, X19
	0x032E6414 BL 0x1C16DEC
	0x032E6418 STP X30, X21, [X31 - 0x20]!
	0x032E641C STP X20, X19, [X31 + 0x10]
	0x032E6420 ADRP X21, 0x10F6000
	0x032E6424 ADRP X20, 0xE0E000
	0x032E6428 LDRB W8, [X21 + 0x9B7]
	0x032E642C LDR X20, [X20 + 0x7B8]
	0x032E6430 MOV X19, X0
	0x032E6434 TBNZ X8, 0x0, 0x32E6458
	0x032E6438 ADRP X0, 0xE0E000
	0x032E643C LDR X0, [X0 + 0x7B8]
	0x032E6440 BL 0x1C16CF4
	0x032E6444 ADRP X0, 0xE40000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x10F7000
	007 Move X21, 0xE39000
	008 Move W8, [X22+2479]
	009 Move X21, [X21+3440]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xE39000
	017 Move X0, [X0+3440]
	018 Call 0x1C17CF4
	019 Move X0, 0xE41000
	020 Move X0, [X0+3472]
	021 Call 0x1C17CF4
	022 Move X0, 0xE3D000
	023 Move X0, [X0+40]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+2479], W8
	027 Move X0, [X21]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X19
	033 Move X1, X20
	034 Call PathInternal.EndsInDirectorySeparator, X0
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {70}
	039 Move X0, [X21]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X19
	045 Move X1, X20
	046 Call PathInternal.IsRoot, X0
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfEqual {70}
	051 Move X8, 0xE41000
	052 Move X8, [X8+3472]
	053 Move TEMP, 0
	054 Not TEMP
	055 Move W21, TEMP
	056 Move X22, [X8]
	057 Compare W20, 0
	058 JumpIfNotEqual {61}
	059 Move X0, X31
	060 Call ThrowHelper.ThrowArgumentOutOfRangeException
	061 Move X0, [X22+32]
	062 Add X20, X20, X21
	063 Move W8, [X0+309]
	064 Move TEMP, X8
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfEqual {69}
	068 Call 0x1C5D684
	069 And X20, X20, 0
	070 Move X0, X19
	071 Move X1, X20
	072 Move X20, [X31+32]
	073 Move X19, [X31+40]
	074 Move X22, [X31+16]
	075 Move X21, [X31+24]
	076 Move X30, [X31+48]
	077 Return X0

Method: System.Boolean IsRoot(System.ReadOnlySpan`1<System.Char> path)

Disassembly:
	0x032E62EC CBNZ X20, 0x32E62F8
	0x032E62F0 MOV X0, X21
	0x032E62F4 BL 0x1D2C690
	0x032E62F8 MOV X0, X20
	0x032E62FC BL 0x1C16F18
	0x032E6300 BL 0x1990590
	0x032E6304 STP X30, X21, [X31 - 0x20]!
	0x032E6308 STP X20, X19, [X31 + 0x10]
	0x032E630C ADD X21, X0, 0x70
	0x032E6310 MOV W20, W1
	0x032E6314 MOV X19, X0
	0x032E6318 MOV X0, X21
	0x032E631C MOV X1, X31
	0x032E6320 BL 0x32C05E4
	0x032E6324 TBZ X0, 0x0, 0x32E6334
	0x032E6328 MOV X0, X21
	0x032E632C MOV X1, X31
	0x032E6330 BL 0x32C0794
	0x032E6334 STRB W31, [X19 + 0x5C]
	0x032E6338 AND W1, W20, 0x1
	0x032E633C STR X31, [X19 + 0x30]
	0x032E6340 MOV X0, X19
	0x032E6344 LDP X20, X19, [X31 + 0x10]
	0x032E6348 MOV X2, X31
	0x032E634C LDP X30, X21, [X31], #0x20
	0x032E6350 B 0x32F02C8
	0x032E6354 AND W1, W1, 0x1
	0x032E6358 MOV X2, X31
	0x032E635C STRB W31, [X0 + 0x5C]
	0x032E6360 STR X31, [X0 + 0x30]
	0x032E6364 B 0x32F02C8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x10F7000
	007 Move X21, 0xE39000
	008 Move W8, [X22+2480]
	009 Move X21, [X21+3440]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xE39000
	017 Move X0, [X0+3440]
	018 Call 0x1C17CF4
	019 Move X0, 0xE3D000
	020 Move X0, [X0+40]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2480], W8
	024 Move X0, [X21]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X20
	030 Move X1, X19
	031 Call PathInternal.GetRootLength, X0
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 NotImplemented "Instruction CSET not yet implemented."
	038 Move X30, [X31+48]
	039 Return X0

Method: System.Boolean get_IsCaseSensitive()

Disassembly:
	0x032E6448 LDR X0, [X0 + 0xE00]
	0x032E644C BL 0x1C16CF4
	0x032E6450 MOVZ W8, 0x1
	0x032E6454 STRB W8, [X21 + 0x9B7]
	0x032E6458 LDR X0, [X20]
	0x032E645C LDR W8, [X0 + 0xE0]
	0x032E6460 CBNZ W8, 0x32E6468
	0x032E6464 BL 0x1C16DFC
	0x032E6468 ADRP X21, 0x10F2000
	0x032E646C LDRB W8, [X21 + 0xF1D]
	0x032E6470 CBNZ W8, 0x32E6488
	0x032E6474 ADRP X0, 0xE0E000
	0x032E6478 LDR X0, [X0 + 0x7B8]
	0x032E647C BL 0x1C16CF4
	0x032E6480 MOVZ W8, 0x1
	0x032E6484 STRB W8, [X21 + 0xF1D]
	0x032E6488 LDR X0, [X20]
	0x032E648C ADRP X21, 0xE40000
	0x032E6490 LDR W8, [X0 + 0xE0]
	0x032E6494 LDR X21, [X21 + 0xE00]
	0x032E6498 CBNZ W8, 0x32E64A4
	0x032E649C BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10F7000
	005 Move X19, 0xE39000
	006 Move W8, [X20+2481]
	007 Move X19, [X19+3440]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE39000
	013 Move X0, [X0+3440]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2481], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move W0, [X8]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Boolean GetIsCaseSensitive()

Disassembly:
	0x032E64A0 LDR X0, [X20]
	0x032E64A4 LDR X8, [X0 + 0xB8]
	0x032E64A8 LDR X8, [X8 + 0x30]
	0x032E64AC STR X8, [X19 + 0x58]
	0x032E64B0 LDR X0, [X21]
	0x032E64B4 LDR W8, [X0 + 0xE0]
	0x032E64B8 CBNZ W8, 0x32E64C0
	0x032E64BC BL 0x1C16DFC
	0x032E64C0 MOV X0, X19
	0x032E64C4 LDP X20, X19, [X31 + 0x10]
	0x032E64C8 MOV X1, X31
	0x032E64CC LDP X30, X21, [X31], #0x20
	0x032E64D0 B 0x33C011C
	0x032E64D4 MOV X1, X31
	0x032E64D8 B 0x33C011C
	0x032E64DC MOVZ W3, 0x1
	0x032E64E0 MOVZ W4, 0x400
	0x032E64E4 MOV W5, W31
	0x032E64E8 B 0x32E64EC
	0x032E64EC STR X30, [X31 - 0x50]!
	0x032E64F0 STP X26, X25, [X31 + 0x10]
	0x032E64F4 STP X24, X23, [X31 + 0x20]
	0x032E64F8 STP X22, X21, [X31 + 0x30]
	0x032E64FC STP X20, X19, [X31 + 0x40]
	0x032E6500 ADRP X26, 0x10F6000
	0x032E6504 ADRP X25, 0xE0E000
	0x032E6508 LDRB W8, [X26 + 0x9B8]
	0x032E650C LDR X25, [X25 + 0x7B8]
	0x032E6510 MOV W22, W5
	0x032E6514 MOV W19, W4
	0x032E6518 MOV W23, W3
	0x032E651C MOV X21, X2
	0x032E6520 MOV X20, X1
	0x032E6524 MOV X24, X0
	0x032E6528 TBNZ X8, 0x0, 0x32E654C
	0x032E652C ADRP X0, 0xE0E000
	0x032E6530 LDR X0, [X0 + 0x7B8]
	0x032E6534 BL 0x1C16CF4
	0x032E6538 ADRP X0, 0xE40000
	0x032E653C LDR X0, [X0 + 0xE00]
	0x032E6540 BL 0x1C16CF4
	0x032E6544 MOVZ W8, 0x1
	0x032E6548 STRB W8, [X26 + 0x9B8]
	0x032E654C LDR X0, [X25]
	0x032E6550 LDR W8, [X0 + 0xE0]
	0x032E6554 CBNZ W8, 0x32E655C
	0x032E6558 BL 0x1C16DFC
	0x032E655C ADRP X26, 0x10F2000
	0x032E6560 LDRB W8, [X26 + 0xF1D]
	0x032E6564 CBNZ W8, 0x32E657C
	0x032E6568 ADRP X0, 0xE0E000
	0x032E656C LDR X0, [X0 + 0x7B8]
	0x032E6570 BL 0x1C16CF4
	0x032E6574 MOVZ W8, 0x1
	0x032E6578 STRB W8, [X26 + 0xF1D]
	0x032E657C LDR X0, [X25]
	0x032E6580 ADRP X26, 0xE40000
	0x032E6584 LDR W8, [X0 + 0xE0]
	0x032E6588 LDR X26, [X26 + 0xE00]
	0x032E658C CBNZ W8, 0x32E6598
	0x032E6590 BL 0x1C16DFC
	0x032E6594 LDR X0, [X25]
	0x032E6598 LDR X8, [X0 + 0xB8]
	0x032E659C LDR X8, [X8 + 0x30]
	0x032E65A0 STR X8, [X24 + 0x58]
	0x032E65A4 LDR X0, [X26]
	0x032E65A8 LDR W8, [X0 + 0xE0]
	0x032E65AC CBNZ W8, 0x32E65B4
	0x032E65B0 BL 0x1C16DFC
	0x032E65B4 MOV X0, X24
	0x032E65B8 MOV X1, X31
	0x032E65BC BL 0x33C011C
	0x032E65C0 CBZ X20, 0x32E6614
	0x032E65C4 CBZ X21, 0x32E6614
	0x032E65C8 LDR X8, [X20]
	0x032E65CC MOV X0, X20
	0x032E65D0 LDP X9, X1, [X8 + 0x1A8]
	0x032E65D4 BLR X9
	0x032E65D8 TBZ X0, 0x0, 0x32E666C
	0x032E65DC CMP W19, 0x0
	0x032E65E0 B.LE 0x32E66A0
	0x032E65E4 AND W3, W23, 0x1
	0x032E65E8 AND W5, W22, 0x1
	0x032E65EC MOV X0, X24
	0x032E65F0 MOV X1, X20
	0x032E65F4 MOV X2, X21
	0x032E65F8 MOV W4, W19
	0x032E65FC LDP X20, X19, [X31 + 0x40]
	0x032E6600 LDP X22, X21, [X31 + 0x30]
	0x032E6604 LDP X24, X23, [X31 + 0x20]
	0x032E6608 LDP X26, X25, [X31 + 0x10]
	0x032E660C LDR X30, [X31], #0x50
	0x032E6610 B 0x32E66FC
	0x032E6614 ADRP X8, 0xE3C000
	0x032E6618 ADRP X9, 0xE3C000
	0x032E661C LDR X8, [X8 + 0xB20]
	0x032E6620 LDR X9, [X9 + 0xD38]
	0x032E6624 CMP X20, 0x0
	0x032E6628 CSEL X0, X9, X8, EQ
	0x032E662C BL 0x1C16D08
	0x032E6630 MOV X19, X0
	0x032E6634 ADRP X0, 0xE12000
	0x032E6638 LDR X0, [X0 + 0x528]
	0x032E663C BL 0x1C16D08
	0x032E6640 BL 0x1C16F10
	0x032E6644 MOV X1, X19
	0x032E6648 MOV X2, X31
	0x032E664C MOV X20, X0
	0x032E6650 BL 0x330E100
	0x032E6654 ADRP X0, 0xE40000
	0x032E6658 LDR X0, [X0 + 0xE08]
	0x032E665C BL 0x1C16D08
	0x032E6660 MOV X1, X0
	0x032E6664 MOV X0, X20
	0x032E6668 BL 0x1C16DEC
	0x032E666C ADRP X0, 0xE15000
	0x032E6670 LDR X0, [X0 + 0x578]
	0x032E6674 BL 0x1C16D08
	0x032E6678 BL 0x1C16F10
	0x032E667C MOV X19, X0
	0x032E6680 ADRP X0, 0xE3C000
	0x032E6684 LDR X0, [X0 + 0xD28]
	0x032E6688 BL 0x1C16D08
	0x032E668C MOV X1, X0
	0x032E6690 MOV X0, X19
	0x032E6694 MOV X2, X31
	0x032E6698 BL 0x3314A68
	0x032E669C B 0x32E66E4
	0x032E66A0 ADRP X0, 0xE15000
	0x032E66A4 LDR X0, [X0 + 0x760]
	0x032E66A8 BL 0x1C16D08
	0x032E66AC BL 0x1C16F10
	0x032E66B0 MOV X19, X0
	0x032E66B4 ADRP X0, 0xE38000
	0x032E66B8 LDR X0, [X0 + 0xF58]
	0x032E66BC BL 0x1C16D08
	0x032E66C0 MOV X20, X0
	0x032E66C4 ADRP X0, 0xE40000
	0x032E66C8 LDR X0, [X0 + 0xD28]
	0x032E66CC BL 0x1C16D08
	0x032E66D0 MOV X2, X0
	0x032E66D4 MOV X0, X19
	0x032E66D8 MOV X1, X20
	0x032E66DC MOV X3, X31
	0x032E66E0 BL 0x3311888
	0x032E66E4 ADRP X0, 0xE40000
	0x032E66E8 LDR X0, [X0 + 0xE08]
	0x032E66EC BL 0x1C16D08
	0x032E66F0 MOV X1, X0
	0x032E66F4 MOV X0, X19
	0x032E66F8 BL 0x1C16DEC
	0x032E66FC STP X30, X25, [X31 - 0x40]!
	0x032E6700 STP X24, X23, [X31 + 0x10]
	0x032E6704 STP X22, X21, [X31 + 0x20]
	0x032E6708 STP X20, X19, [X31 + 0x30]
	0x032E670C ADRP X25, 0x10F6000
	0x032E6710 LDRB W8, [X25 + 0x9BA]
	0x032E6714 MOV W19, W5
	0x032E6718 MOV W22, W4
	0x032E671C MOV W23, W3
	0x032E6720 MOV X21, X2
	0x032E6724 MOV X24, X1
	0x032E6728 MOV X20, X0
	0x032E672C TBNZ X8, 0x0, 0x32E675C
	0x032E6730 ADRP X0, 0xE0D000
	0x032E6734 LDR X0, [X0 + 0x618]
	0x032E6738 BL 0x1C16CF4
	0x032E673C ADRP X0, 0xE16000
	0x032E6740 LDR X0, [X0 + 0x8D8]
	0x032E6744 BL 0x1C16CF4
	0x032E6748 ADRP X0, 0xE3C000
	0x032E674C LDR X0, [X0 + 0xAC0]
	0x032E6750 BL 0x1C16CF4
	0x032E6754 MOVZ W8, 0x1
	0x032E6758 STRB W8, [X25 + 0x9BA]
	0x032E675C STP X24, X21, [X20 + 0x18]
	0x032E6760 CBZ X21, 0x32E6820
	0x032E6764 LDR X8, [X21]
	0x032E6768 ADRP X24, 0xE0D000
	0x032E676C ADRP X25, 0xE16000
	0x032E6770 MOV X0, X21
	0x032E6774 LDR X9, [X8 + 0x338]
	0x032E6778 LDR X1, [X8 + 0x340]
	0x032E677C LDR X24, [X24 + 0x618]
	0x032E6780 LDR X25, [X25 + 0x8D8]
	0x032E6784 AND W23, W23, 0x1
	0x032E6788 BLR X9
	0x032E678C STR X0, [X20 + 0x28]
	0x032E6790 LDR X0, [X24]
	0x032E6794 CMP W22, 0x80
	0x032E6798 MOVZ W8, 0x80
	0x032E679C CSEL W22, W22, W8, GT
	0x032E67A0 MOV W1, W22
	0x032E67A4 BL 0x1C16D6C

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x10F7000
	009 Move X19, 0xE35000
	010 Move W8, [X20+2482]
	011 Move X19, [X19+464]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {33}
	016 Move X0, 0xE3C000
	017 Move X0, [X0+1648]
	018 Call 0x1C17CF4
	019 Move X0, 0xE0E000
	020 Move X0, [X0+3584]
	021 Call 0x1C17CF4
	022 Move X0, 0xE35000
	023 Move X0, [X0+464]
	024 Call 0x1C17CF4
	025 Move X0, 0xE41000
	026 Move X0, [X0+3480]
	027 Call 0x1C17CF4
	028 Move X0, 0xE19000
	029 Move X0, [X0+856]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X20+2482], W8
	033 Move X0, [X19]
	034 Move [X31], X31
	035 Move [X31+8], X31
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X31
	041 Call Path.GetTempPath
	042 Move X19, X0
	043 Move X0, X31
	044 Call Guid.NewGuid
	045 Move X8, 0xE19000
	046 Move X8, [X8+856]
	047 Move [X31], X0
	048 Move [X31+8], X1
	049 Move X8, [X8]
	050 Add X0, X31, 0
	051 Move X1, X8
	052 Move X2, X31
	053 Call Guid.ToString, X0, X1
	054 Move X1, X0
	055 Move X8, 0xE41000
	056 Move X8, [X8+3480]
	057 Move X0, [X8]
	058 Move X2, X31
	059 Call String.Concat, X0, X1
	060 Move X1, X0
	061 Move X0, X19
	062 Move X2, X31
	063 Call Path.Combine, X0, X1
	064 Move X8, 0xE3C000
	065 Move X8, [X8+1648]
	066 Move X20, X0
	067 Move X0, [X8]
	068 Call 0x1C17F10
	069 Move X19, X0
	070 Move W2, 1
	071 Move W3, 3
	072 Move W5, 4096
	073 Move W6, 0x4000000
	074 Move X1, X20
	075 Move W4, W31
	076 Move X7, X31
	077 Call FileStream..ctor, X0, X1, X2, X3, X4, X5, X6
	078 Move X23, 0xE0E000
	079 Move X23, [X23+3584]
	080 Compare X20, 0
	081 JumpIfEqual {128}
	082 Move X0, X20
	083 Move X1, X31
	084 Call String.ToLowerInvariant, X0
	085 Call File.Exists, X0
	086 Move X20, X31
	087 Move W22, W31
	088 Xor W21, W0, 1
	089 Compare X19, 0
	090 JumpIfEqual {112}
	091 Move X8, [X19]
	092 Move X1, [X23]
	093 NotImplemented "Instruction LDRH not yet implemented."
	094 Compare X9, 0
	095 JumpIfEqual {102}
	096 Move X10, [X8+176]
	097 Add X10, X10, 8
	098 NotImplemented "Instruction LDUR not yet implemented."
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Subtract X9, X9, 1
	101 Add X10, X10, 16
	102 Move X0, X19
	103 Move W2, W31
	104 Call 0x1C5D788
	105 NotImplemented "Instruction LDRSW not yet implemented."
	106 Add X8, X8, X9
	107 Add X0, X8, 312
	108 Move X8, [X0]
	109 Move X1, [X0+8]
	110 Move X0, X19
	111 NotImplemented "Instruction BLR not yet implemented."
	112 Compare X20, 0
	113 JumpIfNotEqual {129}
	114 Move TEMP, X22
	115 And TEMP, TEMP, 1
	116 Compare TEMP, 1
	117 JumpIfNotEqual {119}
	118 Move W21, W31
	119 And W0, W21, 1
	120 Move X20, [X31+48]
	121 Move X19, [X31+56]
	122 Move X22, [X31+32]
	123 Move X21, [X31+40]
	124 Move X30, [X31+16]
	125 Move X23, [X31+24]
	126 Add X31, X31, 64
	127 Return X0
	128 Call 0x1C17F20
	129 Move X0, X20
	130 Call 0x1C17F18
	131 Move X22, X1
	132 Move X21, X0
	133 NotImplemented "Instruction CMP not yet implemented."
	134 Move X0, X21
	135 Call 0x3EB2AD0
	136 Move X20, [X0]
	137 Call 0x3EB2AE0
	138 Move W21, W31
	139 Move W22, 1
	140 Compare X19, 0
	141 JumpIfNotEqual {91}
	142 Move X20, X31
	143 Compare X19, 0
	144 JumpIfEqual {166}
	145 Move X8, [X19]
	146 Move X1, [X23]
	147 NotImplemented "Instruction LDRH not yet implemented."
	148 Compare X9, 0
	149 JumpIfEqual {156}
	150 Move X10, [X8+176]
	151 Add X10, X10, 8
	152 NotImplemented "Instruction LDUR not yet implemented."
	153 NotImplemented "Instruction CMP not yet implemented."
	154 Subtract X9, X9, 1
	155 Add X10, X10, 16
	156 Move X0, X19
	157 Move W2, W31
	158 Call 0x1C5D788
	159 NotImplemented "Instruction LDRSW not yet implemented."
	160 Add X8, X8, X9
	161 Add X0, X8, 312
	162 Move X8, [X0]
	163 Move X1, [X0+8]
	164 Move X0, X19
	165 NotImplemented "Instruction BLR not yet implemented."
	166 Compare X20, 0
	167 JumpIfEqual {176}
	168 Move X0, X20
	169 Call 0x1C17F18
	170 Move X22, X1
	171 Move X21, X0
	172 Compare X19, 0
	173 JumpIfNotEqual {145}
	174 Move X22, X1
	175 Move X21, X0
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Move X0, X21
	178 Call 0x3EB2AD0
	179 Move X19, X0
	180 Move X0, 0xE0E000
	181 Move X0, [X0+2000]
	182 Call 0x1C17D08
	183 Move X8, [X19]
	184 Move X1, [X8]
	185 Call 0x1C18270
	186 Move TEMP, X0
	187 And TEMP, TEMP, 1
	188 Compare TEMP, 1
	189 JumpIfNotEqual {191}
	190 Call 0x3EB2AE0
	191 Move W0, 8
	192 Call 0x3EB2AF0
	193 Move X8, [X19]
	194 Move [X0], X8
	195 Move X1, 0xBCF000
	196 Add X1, X1, 3672
	197 Move X2, X31
	198 Call 0x3EB2B00
	199 Move X21, X0
	200 Call 0x3EB2AE0
	201 Move X0, X21
	202 Call 0x1D2D690
	203 Call 0x1991590

Method: System.Boolean IsPartiallyQualified(System.String path)

Disassembly:
	0x032E6968 MOV X1, X31
	0x032E696C BL 0x33C011C

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Void .cctor()

Disassembly:
	0x032E6970 CBZ X23, 0x32E69E8
	0x032E6974 CBZ X20, 0x32E6A08
	0x032E6978 LDR W8, [X23 + 0x10]
	0x032E697C CBZ W8, 0x32E6A3C
	0x032E6980 CMP W19, 0x0
	0x032E6984 B.LE 0x32E6A70
	0x032E6988 ADRP X8, 0xE3B000
	0x032E698C LDR X8, [X8 + 0x670]
	0x032E6990 LDR X0, [X8]
	0x032E6994 BL 0x1C16F10
	0x032E6998 MOVZ W2, 0x3
	0x032E699C MOVZ W3, 0x1
	0x032E69A0 MOVZ W4, 0x1
	0x032E69A4 MOVZ W5, 0x1000
	0x032E69A8 MOVZ W6, 0x8000000
	0x032E69AC MOV X1, X23
	0x032E69B0 MOV X7, X31
	0x032E69B4 MOV X24, X0
	0x032E69B8 BL 0x32F8A08
	0x032E69BC AND W3, W21, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10F7000
	005 Move X19, 0xE39000
	006 Move W8, [X20+2483]
	007 Move X19, [X19+3440]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE39000
	013 Move X0, [X0+3440]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2483], W8
	017 Call PathInternal.GetIsCaseSensitive
	018 Move X8, [X19]
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 And W9, W0, 1
	022 Move X8, [X8+184]
	023 Move [X8], W9
	024 Move X30, [X31+32]
	025 Return 

