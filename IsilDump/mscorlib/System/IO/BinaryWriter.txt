Type: System.IO.BinaryWriter

Method: System.Void .ctor()

Disassembly:
	0x032F77EC LDP X20, X19, [X31 + 0x10]
	0x032F77F0 LDR X30, [X31], #0x20
	0x032F77F4 RET
	0x032F77F8 ADRP X0, 0xE2F000
	0x032F77FC LDR X0, [X0 + 0xC40]
	0x032F7800 BL 0x1C16D08
	0x032F7804 MOV X1, X31
	0x032F7808 BL 0x33BDD84
	0x032F780C MOV X19, X0
	0x032F7810 ADRP X0, 0xE01000
	0x032F7814 LDR X0, [X0 + 0x528]
	0x032F7818 BL 0x1C16D08
	0x032F781C BL 0x1C16F10
	0x032F7820 MOV X20, X0
	0x032F7824 ADRP X0, 0xE27000
	0x032F7828 LDR X0, [X0 + 0xF48]
	0x032F782C BL 0x1C16D08
	0x032F7830 MOV X1, X0
	0x032F7834 MOV X0, X20
	0x032F7838 MOV X2, X19
	0x032F783C MOV X3, X31
	0x032F7840 BL 0x3315F7C
	0x032F7844 B 0x32F7908
	0x032F7848 ADRP X0, 0xE24000
	0x032F784C LDR X0, [X0 + 0x670]
	0x032F7850 BL 0x1C16D08
	0x032F7854 MOV X1, X31
	0x032F7858 BL 0x33BDD84
	0x032F785C MOV X19, X0
	0x032F7860 ADRP X0, 0xE04000
	0x032F7864 LDR X0, [X0 + 0x760]
	0x032F7868 BL 0x1C16D08
	0x032F786C BL 0x1C16F10
	0x032F7870 MOV X20, X0
	0x032F7874 ADRP X0, 0xE07000
	0x032F7878 LDR X0, [X0 + 0x130]
	0x032F787C B 0x32F78B4
	0x032F7880 ADRP X0, 0xE24000
	0x032F7884 LDR X0, [X0 + 0x670]
	0x032F7888 BL 0x1C16D08
	0x032F788C MOV X1, X31
	0x032F7890 BL 0x33BDD84
	0x032F7894 MOV X19, X0
	0x032F7898 ADRP X0, 0xE04000
	0x032F789C LDR X0, [X0 + 0x760]
	0x032F78A0 BL 0x1C16D08
	0x032F78A4 BL 0x1C16F10
	0x032F78A8 MOV X20, X0
	0x032F78AC ADRP X0, 0xE24000
	0x032F78B0 LDR X0, [X0 + 0x648]
	0x032F78B4 BL 0x1C16D08
	0x032F78B8 MOV X1, X0
	0x032F78BC MOV X0, X20
	0x032F78C0 MOV X2, X19
	0x032F78C4 MOV X3, X31
	0x032F78C8 BL 0x3311888
	0x032F78CC B 0x32F7908
	0x032F78D0 ADRP X0, 0xE24000
	0x032F78D4 LDR X0, [X0 + 0x760]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x10E6000
	007 Move X20, 0xE2C000
	008 Move W8, [X21+2666]
	009 Move X20, [X20+3344]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0xDFD000
	016 Move X0, [X0+1560]
	017 Call 0x1C17CF4
	018 Move X0, 0xE2C000
	019 Move X0, [X0+3344]
	020 Call 0x1C17CF4
	021 Move X0, 0xE2C000
	022 Move X0, [X0+2088]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+2666], W8
	026 Move X22, 0xDFD000
	027 Move X21, 0xE2C000
	028 Move X22, [X22+1560]
	029 Move X21, [X21+2088]
	030 Move X0, X19
	031 Move X1, X31
	032 Call Object..ctor, X0
	033 Move X0, [X20]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {39}
	037 Call 0x1C17DFC
	038 Move X0, [X20]
	039 Move X8, [X0+184]
	040 Move W1, 16
	041 Move X8, [X8]
	042 Move [X19+16], X8
	043 Move X0, [X22]
	044 Call 0x1C17D6C
	045 Move [X19+24], X0
	046 Move X0, [X21]
	047 Call 0x1C17F10
	048 Move W2, 1
	049 Move W1, W31
	050 Move X3, X31
	051 Move X20, X0
	052 Call UTF8Encoding..ctor, X0, X1, X2
	053 Move [X19+32], X20
	054 Compare X20, 0
	055 JumpIfEqual {68}
	056 Move X8, [X20]
	057 Move X0, X20
	058 Move X9, [X8+840]
	059 Move X1, [X8+848]
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move [X19+40], X0
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X22, [X31+16]
	065 Move X21, [X31+24]
	066 Move X30, [X31+48]
	067 Return 
	068 Call 0x1C17F20

Method: System.Void .ctor(System.IO.Stream output)

Disassembly:
	0x032F78D8 BL 0x1C16D08
	0x032F78DC MOV X1, X31
	0x032F78E0 BL 0x33BDD84
	0x032F78E4 MOV X19, X0
	0x032F78E8 ADRP X0, 0xE04000
	0x032F78EC LDR X0, [X0 + 0x578]
	0x032F78F0 BL 0x1C16D08
	0x032F78F4 BL 0x1C16F10
	0x032F78F8 MOV X1, X19
	0x032F78FC MOV X2, X31
	0x032F7900 MOV X20, X0
	0x032F7904 BL 0x3314A68
	0x032F7908 ADRP X0, 0xE30000
	0x032F790C LDR X0, [X0 + 0x408]
	0x032F7910 BL 0x1C16D08
	0x032F7914 MOV X1, X0
	0x032F7918 MOV X0, X20
	0x032F791C BL 0x1C16DEC
	0x032F7920 BL 0x32F486C
	0x032F7924 STP X30, X19, [X31 - 0x10]!
	0x032F7928 MOV X19, X0
	0x032F792C LDR X0, [X0 + 0x18]
	0x032F7930 CBZ X0, 0x32F795C
	0x032F7934 LDR W1, [X19 + 0x20]
	0x032F7938 CBZ W1, 0x32F794C
	0x032F793C LDR W8, [X19 + 0x24]
	0x032F7940 MOV X3, X31
	0x032F7944 SUB W2, W8, W1
	0x032F7948 BL 0x3228DE4
	0x032F794C LDR W8, [X19 + 0x24]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x10E6000
	007 Move X22, 0xE2C000
	008 Move W8, [X21+2667]
	009 Move X22, [X22+2088]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xE2C000
	017 Move X0, [X0+2088]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2667], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move W2, 1
	024 Move W1, W31
	025 Move X3, X31
	026 Move X21, X0
	027 Call UTF8Encoding..ctor, X0, X1, X2
	028 Move X0, X20
	029 Move X1, X19
	030 Move X2, X21
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move W3, W31
	036 Move X30, [X31+48]

Method: System.Void .ctor(System.IO.Stream output, System.Text.Encoding encoding)

Disassembly:
	0x032F7AB8 LDR X0, [X22]
	0x032F7ABC BL 0x1C16F10

ISIL:
	001 Move W3, W31
	002 Call BinaryWriter..ctor, X0, X1, X2, X3
	003 Return 

Method: System.Void .ctor(System.IO.Stream output, System.Text.Encoding encoding, System.Boolean leaveOpen)

Disassembly:
	0x032F7950 STR W8, [X19 + 0x20]
	0x032F7954 LDP X30, X19, [X31], #0x10
	0x032F7958 RET
	0x032F795C BL 0x32F486C
	0x032F7960 STP X30, X21, [X31 - 0x20]!
	0x032F7964 STP X20, X19, [X31 + 0x10]
	0x032F7968 MOV X19, X0
	0x032F796C LDR X0, [X0 + 0x18]
	0x032F7970 CBZ X0, 0x32F7A68
	0x032F7974 LDP W20, W8, [X19 + 0x20]
	0x032F7978 CMP W20, W8
	0x032F797C B.GE 0x32F7A3C
	0x032F7980 MOV W1, W20
	0x032F7984 MOV X2, X31
	0x032F7988 BL 0x3222A1C
	0x032F798C AND W8, W0, 0xFFFF
	0x032F7990 CMP W8, 0xD
	0x032F7994 B.EQ 0x32F79C0
	0x032F7998 CMP W8, 0xA
	0x032F799C B.EQ 0x32F79C0
	0x032F79A0 LDR W8, [X19 + 0x24]
	0x032F79A4 ADD W21, W20, 0x1
	0x032F79A8 CMP W21, W8
	0x032F79AC B.GE 0x32F7A30
	0x032F79B0 LDR X0, [X19 + 0x18]
	0x032F79B4 MOV W20, W21
	0x032F79B8 CBNZ X0, 0x32F7980
	0x032F79BC BL 0x1C16F20
	0x032F79C0 LDR X8, [X19 + 0x18]
	0x032F79C4 CBZ X8, 0x32F79BC
	0x032F79C8 LDR W1, [X19 + 0x20]
	0x032F79CC AND W21, W0, 0xFFFF
	0x032F79D0 MOV X0, X8
	0x032F79D4 MOV X3, X31
	0x032F79D8 SUB W2, W20, W1
	0x032F79DC BL 0x3228DE4
	0x032F79E0 CMP W21, 0xD
	0x032F79E4 ADD W1, W20, 0x1
	0x032F79E8 CSEL X20, X0, X31, EQ
	0x032F79EC STR W1, [X19 + 0x20]
	0x032F79F0 B.NE 0x32F7A40
	0x032F79F4 LDR W8, [X19 + 0x24]
	0x032F79F8 CMP W1, W8
	0x032F79FC B.GE 0x32F7A40
	0x032F7A00 LDR X0, [X19 + 0x18]
	0x032F7A04 CBZ X0, 0x32F79BC
	0x032F7A08 MOV X2, X31
	0x032F7A0C BL 0x3222A1C
	0x032F7A10 AND W8, W0, 0xFFFF
	0x032F7A14 CMP W8, 0xA
	0x032F7A18 B.NE 0x32F7A28
	0x032F7A1C LDR W8, [X19 + 0x20]
	0x032F7A20 ADD W8, W8, 0x1
	0x032F7A24 STR W8, [X19 + 0x20]
	0x032F7A28 MOV X0, X20
	0x032F7A2C B 0x32F7A40
	0x032F7A30 LDR W1, [X19 + 0x20]
	0x032F7A34 SUBS W8, W20, W1
	0x032F7A38 B.GE 0x32F7A4C
	0x032F7A3C MOV X0, X31
	0x032F7A40 LDP X20, X19, [X31 + 0x10]
	0x032F7A44 LDP X30, X21, [X31], #0x20
	0x032F7A48 RET
	0x032F7A4C LDR X0, [X19 + 0x18]
	0x032F7A50 CBZ X0, 0x32F79BC
	0x032F7A54 ADD W2, W8, 0x1
	0x032F7A58 MOV X3, X31
	0x032F7A5C BL 0x3228DE4
	0x032F7A60 STR W21, [X19 + 0x20]
	0x032F7A64 B 0x32F7A40
	0x032F7A68 BL 0x32F486C
	0x032F7A6C STR X30, [X31 - 0x30]!
	0x032F7A70 STP X22, X21, [X31 + 0x10]
	0x032F7A74 STP X20, X19, [X31 + 0x20]
	0x032F7A78 ADRP X20, 0x10E5000
	0x032F7A7C ADRP X22, 0xDFC000
	0x032F7A80 ADRP X21, 0xDFE000
	0x032F7A84 LDRB W8, [X20 + 0xA71]
	0x032F7A88 LDR X22, [X22 + 0x8F0]
	0x032F7A8C LDR X21, [X21 + 0xC48]
	0x032F7A90 MOV X19, X0
	0x032F7A94 TBNZ X8, 0x0, 0x32F7AB8
	0x032F7A98 ADRP X0, 0xDFE000
	0x032F7A9C LDR X0, [X0 + 0xC48]
	0x032F7AA0 BL 0x1C16CF4
	0x032F7AA4 ADRP X0, 0xDFC000
	0x032F7AA8 LDR X0, [X0 + 0x8F0]
	0x032F7AAC BL 0x1C16CF4
	0x032F7AB0 MOVZ W8, 0x1
	0x032F7AB4 STRB W8, [X20 + 0xA71]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x10E6000
	008 Move W8, [X23+2668]
	009 Move W21, W3
	010 Move X20, X2
	011 Move X22, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xDFD000
	018 Move X0, [X0+1560]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+2668], W8
	022 Move X0, X19
	023 Move X1, X31
	024 Call Object..ctor, X0
	025 Compare X22, 0
	026 JumpIfEqual {61}
	027 Compare X20, 0
	028 JumpIfEqual {68}
	029 Move X8, [X22]
	030 Move X0, X22
	031 Move X9, [X8+472]
	032 Move X1, [X8+480]
	033 NotImplemented "Instruction BLR not yet implemented."
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {86}
	038 Move X8, 0xDFD000
	039 Move X8, [X8+1560]
	040 Move [X19+16], X22
	041 Move W1, 16
	042 And W21, W21, 1
	043 Move X0, [X8]
	044 Call 0x1C17D6C
	045 Move [X19+24], X0
	046 Move [X19+32], X20
	047 Move X8, [X20]
	048 Move X0, X20
	049 Move X9, [X8+840]
	050 Move X1, [X8+848]
	051 NotImplemented "Instruction BLR not yet implemented."
	052 Move [X19+40], X0
	053 Move [X19+48], W21
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move X30, [X31+48]
	059 Move X23, [X31+56]
	060 Return 
	061 Move X0, 0xE02000
	062 Move X0, [X0+1320]
	063 Call 0x1C17D08
	064 Call 0x1C17F10
	065 Move X19, X0
	066 Move X0, 0xE31000
	067 Move X0, [X0+968]
	068 Move X0, 0xE02000
	069 Move X0, [X0+1320]
	070 Call 0x1C17D08
	071 Call 0x1C17F10
	072 Move X19, X0
	073 Move X0, 0xE2C000
	074 Move X0, [X0+2848]
	075 Call 0x1C17D08
	076 Move X1, X0
	077 Move X0, X19
	078 Move X2, X31
	079 Call ArgumentNullException..ctor, X0, X1
	080 Move X0, 0xE31000
	081 Move X0, [X0+976]
	082 Call 0x1C17D08
	083 Move X1, X0
	084 Move X0, X19
	085 Call 0x1C17DEC
	086 Move X0, 0xE2C000
	087 Move X0, [X0+3376]
	088 Call 0x1C17D08
	089 Move X1, X31
	090 Call Environment.GetResourceString, X0
	091 Move X19, X0
	092 Move X0, 0xE05000
	093 Move X0, [X0+1400]
	094 Call 0x1C17D08
	095 Call 0x1C17F10
	096 Move X1, X19
	097 Move X2, X31
	098 Move X20, X0
	099 Call ArgumentException..ctor, X0, X1
	100 Move X0, 0xE31000
	101 Move X0, [X0+976]
	102 Call 0x1C17D08
	103 Move X1, X0
	104 Move X0, X20
	105 Call 0x1C17DEC

Method: System.Void Close()

Disassembly:
	0x032F7AC0 MOV X1, X31
	0x032F7AC4 MOV X20, X0
	0x032F7AC8 BL 0x3231AC4
	0x032F7ACC LDR X0, [X21]

ISIL:
	001 Move X8, [X0]
	002 Move W1, 1
	003 Move X3, [X8+408]
	004 Move X2, [X8+416]
	005 CallNoReturn X3

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x032F7AD0 LDR W8, [X0 + 0xE0]
	0x032F7AD4 CBNZ W8, 0x32F7ADC
	0x032F7AD8 BL 0x1C16DFC
	0x032F7ADC MOV X0, X31
	0x032F7AE0 BL 0x33387A0
	0x032F7AE4 MOV X2, X0
	0x032F7AE8 MOV X0, X19
	0x032F7AEC MOV X1, X20
	0x032F7AF0 LDP X20, X19, [X31 + 0x20]
	0x032F7AF4 LDP X22, X21, [X31 + 0x10]
	0x032F7AF8 LDR X30, [X31], #0x30
	0x032F7AFC B 0x32F7B00
	0x032F7B00 STP X30, X23, [X31 - 0x30]!
	0x032F7B04 STP X22, X21, [X31 + 0x10]
	0x032F7B08 STP X20, X19, [X31 + 0x20]
	0x032F7B0C ADRP X22, 0x10E5000
	0x032F7B10 ADRP X23, 0xE2F000
	0x032F7B14 LDRB W8, [X22 + 0xA73]

ISIL:
	001 Move [X31-16], X30
	002 Move TEMP, X1
	003 And TEMP, TEMP, 1
	004 Compare TEMP, 1
	005 JumpIfNotEqual {16}
	006 Move X8, X0
	007 Move X0, [X0+16]
	008 Compare X0, 0
	009 JumpIfEqual {22}
	010 Move W9, [X8+48]
	011 Move X8, [X0]
	012 Compare W9, 0
	013 JumpIfEqual {18}
	014 Move X2, [X8+664]
	015 Move X1, [X8+672]
	016 Move X30, [X31+16]
	017 Return 
	018 Move X2, [X8+632]
	019 Move X1, [X8+640]
	020 Move X30, [X31+16]
	021 CallNoReturn X2
	022 Call 0x1C17F20

Method: System.Void Dispose()

Disassembly:
	0x032F7B18 LDR X23, [X23 + 0xE70]
	0x032F7B1C MOV X21, X2
	0x032F7B20 MOV X20, X1
	0x032F7B24 MOV X19, X0

ISIL:
	001 Move X8, [X0]
	002 Move W1, 1
	003 Move X3, [X8+408]
	004 Move X2, [X8+416]
	005 CallNoReturn X3

Method: System.Void Flush()

Disassembly:
	0x032F7B28 TBNZ X8, 0x0, 0x32F7B40
	0x032F7B2C ADRP X0, 0xE2F000
	0x032F7B30 LDR X0, [X0 + 0xE70]
	0x032F7B34 BL 0x1C16CF4
	0x032F7B38 MOVZ W8, 0x1
	0x032F7B3C STRB W8, [X22 + 0xA73]
	0x032F7B40 LDR X0, [X23]
	0x032F7B44 LDR W8, [X0 + 0xE0]
	0x032F7B48 CBNZ W8, 0x32F7B50

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+664]
	007 Move X1, [X8+672]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Void Write(System.Boolean value)

Disassembly:
	0x032F7B4C BL 0x1C16DFC
	0x032F7B50 MOV X0, X19
	0x032F7B54 MOV X1, X21
	0x032F7B58 MOV X2, X31
	0x032F7B5C BL 0x32E80A4
	0x032F7B60 CBZ X20, 0x32F7B80
	0x032F7B64 MOVZ W8, 0x1
	0x032F7B68 STR X20, [X19 + 0x30]
	0x032F7B6C STRB W8, [X19 + 0x38]
	0x032F7B70 LDP X20, X19, [X31 + 0x20]
	0x032F7B74 LDP X22, X21, [X31 + 0x10]
	0x032F7B78 LDP X30, X23, [X31], #0x30
	0x032F7B7C RET
	0x032F7B80 ADRP X0, 0xE2F000
	0x032F7B84 LDR X0, [X0 + 0xC40]
	0x032F7B88 BL 0x1C16D08
	0x032F7B8C MOV X1, X31
	0x032F7B90 BL 0x33BDD84
	0x032F7B94 MOV X19, X0
	0x032F7B98 ADRP X0, 0xE01000

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+24]
	003 Compare X8, 0
	004 JumpIfEqual {22}
	005 Move W9, [X8+24]
	006 Compare W9, 0
	007 JumpIfEqual {23}
	008 And W9, W1, 1
	009 Move [X8+32], W9
	010 Move X8, [X0+16]
	011 Compare X8, 0
	012 JumpIfEqual {22}
	013 Move X9, [X8]
	014 Move X1, [X0+24]
	015 Move W3, 1
	016 Move X0, X8
	017 Move X5, [X9+904]
	018 Move X4, [X9+912]
	019 Move W2, W31
	020 Move X30, [X31+16]
	021 CallNoReturn X5
	022 Call 0x1C17F20
	023 Call 0x1C17F28

Method: System.Void Write(System.Byte value)

Disassembly:
	0x032F7B9C LDR X0, [X0 + 0x528]
	0x032F7BA0 BL 0x1C16D08
	0x032F7BA4 BL 0x1C16F10
	0x032F7BA8 MOV X20, X0
	0x032F7BAC ADRP X0, 0xE30000
	0x032F7BB0 LDR X0, [X0 + 0x410]
	0x032F7BB4 BL 0x1C16D08
	0x032F7BB8 MOV X1, X0
	0x032F7BBC MOV X0, X20

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+936]
	007 Move X2, [X8+944]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Void Write(System.Byte[] buffer)

Disassembly:
	0x032F7BC0 MOV X2, X19
	0x032F7BC4 MOV X3, X31
	0x032F7BC8 BL 0x3315F7C
	0x032F7BCC ADRP X0, 0xE30000
	0x032F7BD0 LDR X0, [X0 + 0x418]
	0x032F7BD4 BL 0x1C16D08
	0x032F7BD8 MOV X1, X0
	0x032F7BDC MOV X0, X20
	0x032F7BE0 BL 0x1C16DEC
	0x032F7BE4 STR X30, [X31 - 0x30]!
	0x032F7BE8 STP X22, X21, [X31 + 0x10]
	0x032F7BEC STP X20, X19, [X31 + 0x20]
	0x032F7BF0 ADRP X21, 0x10E5000
	0x032F7BF4 ADRP X22, 0xDFE000
	0x032F7BF8 LDRB W8, [X21 + 0xA72]
	0x032F7BFC LDR X22, [X22 + 0xC48]
	0x032F7C00 MOV X19, X1
	0x032F7C04 MOV X20, X0
	0x032F7C08 TBNZ X8, 0x0, 0x32F7C20
	0x032F7C0C ADRP X0, 0xDFE000
	0x032F7C10 LDR X0, [X0 + 0xC48]
	0x032F7C14 BL 0x1C16CF4
	0x032F7C18 MOVZ W8, 0x1
	0x032F7C1C STRB W8, [X21 + 0xA72]
	0x032F7C20 LDR X0, [X22]
	0x032F7C24 LDR W8, [X0 + 0xE0]
	0x032F7C28 CBNZ W8, 0x32F7C30
	0x032F7C2C BL 0x1C16DFC
	0x032F7C30 MOV X0, X31
	0x032F7C34 BL 0x33387A0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X1, 0
	004 JumpIfEqual {16}
	005 Move X0, [X0+16]
	006 Compare X0, 0
	007 JumpIfEqual {34}
	008 Move X8, [X0]
	009 Move W3, [X1+24]
	010 Move W2, W31
	011 Move X5, [X8+904]
	012 Move X4, [X8+912]
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 CallNoReturn X5
	016 Move X0, 0xE02000
	017 Move X0, [X0+1320]
	018 Call 0x1C17D08
	019 Call 0x1C17F10
	020 Move X19, X0
	021 Move X0, 0xE28000
	022 Move X0, [X0+3912]
	023 Call 0x1C17D08
	024 Move X1, X0
	025 Move X0, X19
	026 Move X2, X31
	027 Call ArgumentNullException..ctor, X0, X1
	028 Move X0, 0xE31000
	029 Move X0, [X0+984]
	030 Call 0x1C17D08
	031 Move X1, X0
	032 Move X0, X19
	033 Call 0x1C17DEC
	034 Call 0x1C17F20

Method: System.Void Write(System.Byte[] buffer, System.Int32 index, System.Int32 count)

Disassembly:
	0x032F7C38 MOV X2, X0
	0x032F7C3C MOV X0, X20
	0x032F7C40 MOV X1, X19
	0x032F7C44 LDP X20, X19, [X31 + 0x20]
	0x032F7C48 LDP X22, X21, [X31 + 0x10]
	0x032F7C4C LDR X30, [X31], #0x30
	0x032F7C50 B 0x32F7B00
	0x032F7C54 LDR X8, [X0]
	0x032F7C58 MOVZ W1, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X5, [X8+904]
	007 Move X4, [X8+912]
	008 Move X30, [X31+16]
	009 CallNoReturn X5
	010 Call 0x1C17F20

Method: System.Void Write(System.Char ch)

Disassembly:
	0x032F7C5C LDP X3, X2, [X8 + 0x1C8]
	0x032F7C60 BR X3
	0x032F7C64 AND W1, W1, 0x1
	0x032F7C68 MOV X2, X31
	0x032F7C6C STRB W31, [X0 + 0x38]
	0x032F7C70 B 0x32E9D94
	0x032F7C74 STR X30, [X31 - 0x10]!
	0x032F7C78 LDRB W8, [X0 + 0x38]
	0x032F7C7C CBZ W8, 0x32F7C94
	0x032F7C80 LDR X0, [X0 + 0x30]
	0x032F7C84 CBZ X0, 0x32F7C98
	0x032F7C88 MOV X2, X31
	0x032F7C8C LDR X30, [X31], #0x10
	0x032F7C90 B 0x3233D30
	0x032F7C94 BL 0x32F4FF8
	0x032F7C98 BL 0x1C16F20
	0x032F7C9C STR X30, [X31 - 0x20]!
	0x032F7CA0 STP X20, X19, [X31 + 0x10]
	0x032F7CA4 CBZ X1, 0x32F7CE0
	0x032F7CA8 TBNZ X2, 0x1F, 0x32F7D30
	0x032F7CAC TBNZ X3, 0x1F, 0x32F7D68
	0x032F7CB0 LDR W8, [X1 + 0x18]
	0x032F7CB4 SUB W8, W8, W2
	0x032F7CB8 CMP W8, W3
	0x032F7CBC B.LT 0x32F7DB8
	0x032F7CC0 LDRB W8, [X0 + 0x38]
	0x032F7CC4 CBZ W8, 0x32F7E08
	0x032F7CC8 LDR X0, [X0 + 0x30]
	0x032F7CCC CBZ X0, 0x32F7E0C
	0x032F7CD0 LDP X20, X19, [X31 + 0x10]
	0x032F7CD4 MOV X4, X31
	0x032F7CD8 LDR X30, [X31], #0x20
	0x032F7CDC B 0x3233154
	0x032F7CE0 ADRP X0, 0xE2F000
	0x032F7CE4 LDR X0, [X0 + 0xC40]
	0x032F7CE8 BL 0x1C16D08
	0x032F7CEC MOV X1, X31
	0x032F7CF0 BL 0x33BDD84
	0x032F7CF4 MOV X19, X0
	0x032F7CF8 ADRP X0, 0xE01000
	0x032F7CFC LDR X0, [X0 + 0x528]
	0x032F7D00 BL 0x1C16D08
	0x032F7D04 BL 0x1C16F10
	0x032F7D08 MOV X20, X0
	0x032F7D0C ADRP X0, 0xE27000
	0x032F7D10 LDR X0, [X0 + 0xF48]
	0x032F7D14 BL 0x1C16D08
	0x032F7D18 MOV X1, X0
	0x032F7D1C MOV X0, X20
	0x032F7D20 MOV X2, X19
	0x032F7D24 MOV X3, X31
	0x032F7D28 BL 0x3315F7C
	0x032F7D2C B 0x32F7DF0
	0x032F7D30 ADRP X0, 0xE24000
	0x032F7D34 LDR X0, [X0 + 0x670]
	0x032F7D38 BL 0x1C16D08
	0x032F7D3C MOV X1, X31
	0x032F7D40 BL 0x33BDD84
	0x032F7D44 MOV X19, X0
	0x032F7D48 ADRP X0, 0xE04000
	0x032F7D4C LDR X0, [X0 + 0x760]
	0x032F7D50 BL 0x1C16D08
	0x032F7D54 BL 0x1C16F10
	0x032F7D58 MOV X20, X0
	0x032F7D5C ADRP X0, 0xE07000
	0x032F7D60 LDR X0, [X0 + 0x130]
	0x032F7D64 B 0x32F7D9C
	0x032F7D68 ADRP X0, 0xE24000
	0x032F7D6C LDR X0, [X0 + 0x670]
	0x032F7D70 BL 0x1C16D08
	0x032F7D74 MOV X1, X31
	0x032F7D78 BL 0x33BDD84
	0x032F7D7C MOV X19, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x10E6000
	007 NotImplemented "Instruction STRH not yet implemented."
	008 Move X21, 0xDFF000
	009 Move W8, [X22+2669]
	010 Move X21, [X21+368]
	011 Move W20, W1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xDFF000
	018 Move X0, [X0+368]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+2669], W8
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move W0, W20
	028 Move X1, X31
	029 Call Char.IsSurrogate, X0
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {69}
	034 Move X8, [X19+24]
	035 Compare X8, 0
	036 JumpIfEqual {68}
	037 Move X0, [X19+40]
	038 Compare X0, 0
	039 JumpIfEqual {68}
	040 Move X9, [X0]
	041 Move W4, [X8+24]
	042 Add X8, X8, 32
	043 Add X1, X31, 12
	044 Move X10, [X9+440]
	045 Move X6, [X9+448]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 NotImplemented "Instruction CSEL not yet implemented."
	048 Move W2, 1
	049 Move W5, 1
	050 NotImplemented "Instruction BLR not yet implemented."
	051 Move X8, [X19+16]
	052 Compare X8, 0
	053 JumpIfEqual {68}
	054 Move X9, [X8]
	055 Move X1, [X19+24]
	056 Move W3, W0
	057 Move X0, X8
	058 Move X10, [X9+904]
	059 Move X4, [X9+912]
	060 Move W2, W31
	061 NotImplemented "Instruction BLR not yet implemented."
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X22, [X31+16]
	065 Move X21, [X31+24]
	066 Move X30, [X31+48]
	067 Return 
	068 Call 0x1C17F20
	069 Move X0, 0xE31000
	070 Move X0, [X0+992]
	071 Call 0x1C17D08
	072 Move X1, X31
	073 Call Environment.GetResourceString, X0
	074 Move X19, X0
	075 Move X0, 0xE05000
	076 Move X0, [X0+1400]
	077 Call 0x1C17D08
	078 Call 0x1C17F10
	079 Move X1, X19
	080 Move X2, X31
	081 Move X20, X0
	082 Call ArgumentException..ctor, X0, X1
	083 Move X0, 0xE31000
	084 Move X0, [X0+1000]
	085 Call 0x1C17D08
	086 Move X1, X0
	087 Move X0, X20
	088 Call 0x1C17DEC

Method: System.Void Write(System.Char[] chars)

Disassembly:
	0x032F7D80 ADRP X0, 0xE04000
	0x032F7D84 LDR X0, [X0 + 0x760]
	0x032F7D88 BL 0x1C16D08
	0x032F7D8C BL 0x1C16F10
	0x032F7D90 MOV X20, X0
	0x032F7D94 ADRP X0, 0xE24000
	0x032F7D98 LDR X0, [X0 + 0x648]
	0x032F7D9C BL 0x1C16D08
	0x032F7DA0 MOV X1, X0
	0x032F7DA4 MOV X0, X20
	0x032F7DA8 MOV X2, X19
	0x032F7DAC MOV X3, X31
	0x032F7DB0 BL 0x3311888
	0x032F7DB4 B 0x32F7DF0
	0x032F7DB8 ADRP X0, 0xE24000
	0x032F7DBC LDR X0, [X0 + 0x760]
	0x032F7DC0 BL 0x1C16D08
	0x032F7DC4 MOV X1, X31
	0x032F7DC8 BL 0x33BDD84
	0x032F7DCC MOV X19, X0
	0x032F7DD0 ADRP X0, 0xE04000
	0x032F7DD4 LDR X0, [X0 + 0x578]
	0x032F7DD8 BL 0x1C16D08
	0x032F7DDC BL 0x1C16F10
	0x032F7DE0 MOV X1, X19
	0x032F7DE4 MOV X2, X31
	0x032F7DE8 MOV X20, X0
	0x032F7DEC BL 0x3314A68
	0x032F7DF0 ADRP X0, 0xE30000
	0x032F7DF4 LDR X0, [X0 + 0x420]
	0x032F7DF8 BL 0x1C16D08
	0x032F7DFC MOV X1, X0
	0x032F7E00 MOV X0, X20
	0x032F7E04 BL 0x1C16DEC
	0x032F7E08 BL 0x32F4FF8
	0x032F7E0C BL 0x1C16F20
	0x032F7E10 STR X30, [X31 - 0x10]!
	0x032F7E14 LDRB W8, [X0 + 0x38]
	0x032F7E18 CBZ W8, 0x32F7E3C
	0x032F7E1C CBZ X1, 0x32F7E34
	0x032F7E20 LDR X0, [X0 + 0x30]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X1, 0
	004 JumpIfEqual {30}
	005 Move X19, X0
	006 Move X0, [X0+32]
	007 Compare X0, 0
	008 JumpIfEqual {29}
	009 Move X8, [X0]
	010 Move W3, [X1+24]
	011 Move W2, W31
	012 Move X9, [X8+584]
	013 Move X4, [X8+592]
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Compare X0, 0
	016 JumpIfEqual {29}
	017 Move X1, X0
	018 Move X0, [X19+16]
	019 Compare X0, 0
	020 JumpIfEqual {29}
	021 Move X8, [X0]
	022 Move W3, [X1+24]
	023 Move W2, W31
	024 Move X5, [X8+904]
	025 Move X4, [X8+912]
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 CallNoReturn X5
	029 Call 0x1C17F20
	030 Move X0, 0xE02000
	031 Move X0, [X0+1320]
	032 Call 0x1C17D08
	033 Call 0x1C17F10
	034 Move X19, X0
	035 Move X0, 0xE2C000
	036 Move X0, [X0+728]
	037 Call 0x1C17D08
	038 Move X1, X0
	039 Move X0, X19
	040 Move X2, X31
	041 Call ArgumentNullException..ctor, X0, X1
	042 Move X0, 0xE31000
	043 Move X0, [X0+1008]
	044 Call 0x1C17D08
	045 Move X1, X0
	046 Move X0, X19
	047 Call 0x1C17DEC

Method: System.Void Write(System.Double value)

Disassembly:
	0x032F7E24 CBZ X0, 0x32F7E40
	0x032F7E28 MOV X2, X31
	0x032F7E2C LDR X30, [X31], #0x10
	0x032F7E30 B 0x32333E0
	0x032F7E34 LDR X30, [X31], #0x10
	0x032F7E38 RET
	0x032F7E3C BL 0x32F4FF8
	0x032F7E40 BL 0x1C16F20
	0x032F7E44 STR X30, [X31 - 0x10]!
	0x032F7E48 LDR X0, [X0 + 0x30]
	0x032F7E4C CBZ X0, 0x32F7E60
	0x032F7E50 LDR X8, [X0]
	0x032F7E54 LDP X2, X1, [X8 + 0x168]
	0x032F7E58 LDR X30, [X31], #0x10
	0x032F7E5C BR X2

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+16]
	004 Move X0, X31
	005 Call BitConverterLE.GetBytes, V0
	006 Compare X19, 0
	007 JumpIfEqual {18}
	008 Move X8, [X19]
	009 Move X1, X0
	010 Move W3, 8
	011 Move X0, X19
	012 Move X5, [X8+904]
	013 Move X4, [X8+912]
	014 Move W2, W31
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 CallNoReturn X5
	018 Call 0x1C17F20

Method: System.Void Write(System.Int16 value)

Disassembly:
	0x032F7E60 BL 0x1C16F20
	0x032F7E64 STR X30, [X31 - 0x60]!
	0x032F7E68 STP X28, X27, [X31 + 0x10]
	0x032F7E6C STP X26, X25, [X31 + 0x20]
	0x032F7E70 STP X24, X23, [X31 + 0x30]
	0x032F7E74 STP X22, X21, [X31 + 0x40]
	0x032F7E78 STP X20, X19, [X31 + 0x50]
	0x032F7E7C ADRP X28, 0x10E5000
	0x032F7E80 ADRP X27, 0xE30000
	0x032F7E84 ADRP X26, 0xE2B000
	0x032F7E88 LDRB W8, [X28 + 0xA74]
	0x032F7E8C LDR X27, [X27 + 0x428]
	0x032F7E90 LDR X26, [X26 + 0xD10]
	0x032F7E94 MOV W20, W6
	0x032F7E98 MOV W22, W5
	0x032F7E9C MOV W19, W4
	0x032F7EA0 MOV W24, W3
	0x032F7EA4 MOV W21, W2
	0x032F7EA8 MOV X25, X1
	0x032F7EAC MOV X23, X0
	0x032F7EB0 TBNZ X8, 0x0, 0x32F7EEC
	0x032F7EB4 ADRP X0, 0xE2A000
	0x032F7EB8 LDR X0, [X0 + 0xFA8]
	0x032F7EBC BL 0x1C16CF4
	0x032F7EC0 ADRP X0, 0xE30000
	0x032F7EC4 LDR X0, [X0 + 0x430]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+24]
	003 Compare X8, 0
	004 JumpIfEqual {30}
	005 Move W9, [X8+24]
	006 Compare W9, 0
	007 JumpIfEqual {31}
	008 Move [X8+32], W1
	009 Move X8, [X0+24]
	010 Compare X8, 0
	011 JumpIfEqual {30}
	012 Move W9, [X8+24]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move W9, W1
	015 ShiftRight W9, 8
	016 And W9, W9, 0x7FFFFFFF
	017 Move [X8+33], W9
	018 Move X8, [X0+16]
	019 Compare X8, 0
	020 JumpIfEqual {30}
	021 Move X9, [X8]
	022 Move X1, [X0+24]
	023 Move W3, 2
	024 Move X0, X8
	025 Move X5, [X9+904]
	026 Move X4, [X9+912]
	027 Move W2, W31
	028 Move X30, [X31+16]
	029 CallNoReturn X5
	030 Call 0x1C17F20
	031 Call 0x1C17F28

Method: System.Void Write(System.UInt16 value)

Disassembly:
	0x032F7EC8 BL 0x1C16CF4
	0x032F7ECC ADRP X0, 0xE2B000
	0x032F7ED0 LDR X0, [X0 + 0xD10]
	0x032F7ED4 BL 0x1C16CF4
	0x032F7ED8 ADRP X0, 0xE30000
	0x032F7EDC LDR X0, [X0 + 0x428]
	0x032F7EE0 BL 0x1C16CF4
	0x032F7EE4 MOVZ W8, 0x1
	0x032F7EE8 STRB W8, [X28 + 0xA74]
	0x032F7EEC LDR X8, [X27]
	0x032F7EF0 STR X8, [X23 + 0x30]
	0x032F7EF4 LDR X0, [X26]
	0x032F7EF8 ADRP X26, 0xE2A000
	0x032F7EFC LDR W8, [X0 + 0xE0]
	0x032F7F00 LDR X26, [X26 + 0xFA8]
	0x032F7F04 CBNZ W8, 0x32F7F0C
	0x032F7F08 BL 0x1C16DFC
	0x032F7F0C MOV X0, X23
	0x032F7F10 MOV X1, X31
	0x032F7F14 BL 0x33C011C
	0x032F7F18 LDR X0, [X26]
	0x032F7F1C LDR W8, [X0 + 0xE0]
	0x032F7F20 CBNZ W8, 0x32F7F2C
	0x032F7F24 BL 0x1C16DFC
	0x032F7F28 LDR X0, [X26]
	0x032F7F2C LDR X8, [X0 + 0xB8]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+24]
	003 Compare X8, 0
	004 JumpIfEqual {30}
	005 Move W9, [X8+24]
	006 Compare W9, 0
	007 JumpIfEqual {31}
	008 Move [X8+32], W1
	009 Move X8, [X0+24]
	010 Compare X8, 0
	011 JumpIfEqual {30}
	012 Move W9, [X8+24]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move W9, W1
	015 ShiftRight W9, 8
	016 And W9, W9, 0x7FFFFFFF
	017 Move [X8+33], W9
	018 Move X8, [X0+16]
	019 Compare X8, 0
	020 JumpIfEqual {30}
	021 Move X9, [X8]
	022 Move X1, [X0+24]
	023 Move W3, 2
	024 Move X0, X8
	025 Move X5, [X9+904]
	026 Move X4, [X9+912]
	027 Move W2, W31
	028 Move X30, [X31+16]
	029 CallNoReturn X5
	030 Call 0x1C17F20
	031 Call 0x1C17F28

Method: System.Void Write(System.Int32 value)

Disassembly:
	0x032F7F30 MOV X0, X25
	0x032F7F34 MOV X2, X31
	0x032F7F38 LDR X1, [X8]
	0x032F7F3C BL 0x33BE5B0
	0x032F7F40 TBNZ X0, 0x0, 0x32F7FA0
	0x032F7F44 ADRP X8, 0xE30000
	0x032F7F48 LDR X8, [X8 + 0x430]
	0x032F7F4C LDR X0, [X8]
	0x032F7F50 BL 0x1C16F10
	0x032F7F54 MOV X1, X25
	0x032F7F58 MOV W2, W31
	0x032F7F5C MOV X3, X31
	0x032F7F60 MOV X26, X0
	0x032F7F64 BL 0x3224E14
	0x032F7F68 AND W3, W24, 0x1
	0x032F7F6C AND W5, W22, 0x1
	0x032F7F70 AND W6, W20, 0x1
	0x032F7F74 MOV X0, X23
	0x032F7F78 MOV X1, X26
	0x032F7F7C MOV W2, W21
	0x032F7F80 MOV W4, W19
	0x032F7F84 LDP X20, X19, [X31 + 0x50]
	0x032F7F88 LDP X22, X21, [X31 + 0x40]
	0x032F7F8C LDP X24, X23, [X31 + 0x30]
	0x032F7F90 LDP X26, X25, [X31 + 0x20]
	0x032F7F94 LDP X28, X27, [X31 + 0x10]
	0x032F7F98 LDR X30, [X31], #0x60
	0x032F7F9C B 0x32F8004
	0x032F7FA0 ADRP X0, 0xE30000
	0x032F7FA4 LDR X0, [X0 + 0x438]
	0x032F7FA8 BL 0x1C16D08
	0x032F7FAC MOV X1, X31
	0x032F7FB0 BL 0x320A160
	0x032F7FB4 MOV X19, X0
	0x032F7FB8 ADRP X0, 0xE04000
	0x032F7FBC LDR X0, [X0 + 0x578]
	0x032F7FC0 BL 0x1C16D08
	0x032F7FC4 BL 0x1C16F10
	0x032F7FC8 MOV X20, X0
	0x032F7FCC ADRP X0, 0xE30000

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+24]
	003 Compare X8, 0
	004 JumpIfEqual {48}
	005 Move W9, [X8+24]
	006 Compare W9, 0
	007 JumpIfEqual {49}
	008 Move [X8+32], W1
	009 Move X8, [X0+24]
	010 Compare X8, 0
	011 JumpIfEqual {48}
	012 Move W9, [X8+24]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move W9, W1
	015 ShiftRight W9, 8
	016 And W9, W9, 0x7FFFFFFF
	017 Move [X8+33], W9
	018 Move X8, [X0+24]
	019 Compare X8, 0
	020 JumpIfEqual {48}
	021 Move W9, [X8+24]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move W9, W1
	024 ShiftRight W9, 16
	025 And W9, W9, 0x7FFFFFFF
	026 Move [X8+34], W9
	027 Move X8, [X0+24]
	028 Compare X8, 0
	029 JumpIfEqual {48}
	030 Move W9, [X8+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move W9, W1
	033 ShiftRight W9, 24
	034 And W9, W9, 0x7FFFFFFF
	035 Move [X8+35], W9
	036 Move X8, [X0+16]
	037 Compare X8, 0
	038 JumpIfEqual {48}
	039 Move X9, [X8]
	040 Move X1, [X0+24]
	041 Move W3, 4
	042 Move X0, X8
	043 Move X5, [X9+904]
	044 Move X4, [X9+912]
	045 Move W2, W31
	046 Move X30, [X31+16]
	047 CallNoReturn X5
	048 Call 0x1C17F20
	049 Call 0x1C17F28

Method: System.Void Write(System.UInt32 value)

Disassembly:
	0x032F7FD0 LDR X0, [X0 + 0x440]
	0x032F7FD4 BL 0x1C16D08
	0x032F7FD8 MOV X1, X0
	0x032F7FDC MOV X0, X20
	0x032F7FE0 MOV X2, X19
	0x032F7FE4 MOV X3, X31
	0x032F7FE8 BL 0x330E16C
	0x032F7FEC ADRP X0, 0xE30000
	0x032F7FF0 LDR X0, [X0 + 0x448]
	0x032F7FF4 BL 0x1C16D08
	0x032F7FF8 MOV X1, X0
	0x032F7FFC MOV X0, X20
	0x032F8000 BL 0x1C16DEC
	0x032F8004 STR X30, [X31 - 0x50]!
	0x032F8008 STP X26, X25, [X31 + 0x10]
	0x032F800C STP X24, X23, [X31 + 0x20]
	0x032F8010 STP X22, X21, [X31 + 0x30]
	0x032F8014 STP X20, X19, [X31 + 0x40]
	0x032F8018 ADRP X26, 0x10E4000
	0x032F801C LDRB W8, [X26 + 0xA77]
	0x032F8020 MOV W24, W6
	0x032F8024 MOV W22, W5
	0x032F8028 MOV W25, W4
	0x032F802C MOV W23, W3
	0x032F8030 MOV W21, W2
	0x032F8034 MOV X20, X1
	0x032F8038 MOV X19, X0
	0x032F803C TBNZ X8, 0x0, 0x32F8054
	0x032F8040 ADRP X0, 0xE29000
	0x032F8044 LDR X0, [X0 + 0xFA8]
	0x032F8048 BL 0x1C16CF4
	0x032F804C MOVZ W8, 0x1
	0x032F8050 STRB W8, [X26 + 0xA77]
	0x032F8054 STR W31, [X31 + 0xC]
	0x032F8058 TBNZ X24, 0x0, 0x32F8074
	0x032F805C CBZ X20, 0x32F822C
	0x032F8060 LDR X8, [X20]
	0x032F8064 MOV X0, X20
	0x032F8068 LDP X9, X1, [X8 + 0x188]
	0x032F806C BLR X9

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+24]
	003 Compare X8, 0
	004 JumpIfEqual {48}
	005 Move W9, [X8+24]
	006 Compare W9, 0
	007 JumpIfEqual {49}
	008 Move [X8+32], W1
	009 Move X8, [X0+24]
	010 Compare X8, 0
	011 JumpIfEqual {48}
	012 Move W9, [X8+24]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move W9, W1
	015 ShiftRight W9, 8
	016 And W9, W9, 0x7FFFFFFF
	017 Move [X8+33], W9
	018 Move X8, [X0+24]
	019 Compare X8, 0
	020 JumpIfEqual {48}
	021 Move W9, [X8+24]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move W9, W1
	024 ShiftRight W9, 16
	025 And W9, W9, 0x7FFFFFFF
	026 Move [X8+34], W9
	027 Move X8, [X0+24]
	028 Compare X8, 0
	029 JumpIfEqual {48}
	030 Move W9, [X8+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move W9, W1
	033 ShiftRight W9, 24
	034 And W9, W9, 0x7FFFFFFF
	035 Move [X8+35], W9
	036 Move X8, [X0+16]
	037 Compare X8, 0
	038 JumpIfEqual {48}
	039 Move X9, [X8]
	040 Move X1, [X0+24]
	041 Move W3, 4
	042 Move X0, X8
	043 Move X5, [X9+904]
	044 Move X4, [X9+912]
	045 Move W2, W31
	046 Move X30, [X31+16]
	047 CallNoReturn X5
	048 Call 0x1C17F20
	049 Call 0x1C17F28

Method: System.Void Write(System.Int64 value)

Disassembly:
	0x032F8070 TBNZ X0, 0x0, 0x32F8230
	0x032F8074 SUB W8, W21, 0x1
	0x032F8078 CMP W8, 0x3
	0x032F807C B.CS 0x32F8160
	0x032F8080 CMP W25, 0x0
	0x032F8084 B.GT 0x32F808C
	0x032F8088 TBZ X24, 0x0, 0x32F8194
	0x032F808C ADRP X25, 0xE29000
	0x032F8090 LDR X25, [X25 + 0xFA8]
	0x032F8094 LDR X0, [X25]
	0x032F8098 LDR W8, [X0 + 0xE0]
	0x032F809C CBNZ W8, 0x32F80A4
	0x032F80A0 BL 0x1C16DFC
	0x032F80A4 ADD X1, X31, 0xC
	0x032F80A8 MOV X0, X20
	0x032F80AC BL 0x32F9A78
	0x032F80B0 LDR W24, [X31 + 0xC]
	0x032F80B4 CBNZ W24, 0x32F81E4
	0x032F80B8 MOVZ W8, 0x1
	0x032F80BC CMP W0, 0x1
	0x032F80C0 MOVZ W9, 0x1
	0x032F80C4 B.EQ 0x32F80D0
	0x032F80C8 CBZ W0, 0x32F8294
	0x032F80CC MOV W9, W31
	0x032F80D0 MOV X0, X19
	0x032F80D4 AND W23, W23, 0x1
	0x032F80D8 AND W22, W22, 0x1
	0x032F80DC STRB W9, [X19 + 0x56]
	0x032F80E0 STR X20, [X19 + 0x38]
	0x032F80E4 STRB W8, [X19 + 0x40]
	0x032F80E8 BL 0x32FA4B0
	0x032F80EC MOVZ W2, 0x1
	0x032F80F0 MOV X0, X19
	0x032F80F4 MOV W1, W31
	0x032F80F8 BL 0x32F9BB0
	0x032F80FC LDRB W8, [X19 + 0x56]
	0x032F8100 STR W21, [X19 + 0x50]
	0x032F8104 STRB W23, [X19 + 0x54]
	0x032F8108 STRB W22, [X19 + 0x55]
	0x032F810C STRB W31, [X19 + 0x57]
	0x032F8110 CBZ W8, 0x32F8144
	0x032F8114 LDR X0, [X25]
	0x032F8118 LDR W8, [X0 + 0xE0]
	0x032F811C CBNZ W8, 0x32F8124
	0x032F8120 BL 0x1C16DFC
	0x032F8124 ADD X3, X31, 0xC
	0x032F8128 MOVZ W2, 0x1
	0x032F812C MOV X0, X20
	0x032F8130 MOV X1, X31
	0x032F8134 BL 0x32F9E5C
	0x032F8138 STR X0, [X19 + 0x68]
	0x032F813C LDR W20, [X31 + 0xC]
	0x032F8140 CBNZ W20, 0x32F8204
	0x032F8144 STR X31, [X19 + 0x48]
	0x032F8148 LDP X20, X19, [X31 + 0x40]
	0x032F814C LDP X22, X21, [X31 + 0x30]
	0x032F8150 LDP X24, X23, [X31 + 0x20]
	0x032F8154 LDP X26, X25, [X31 + 0x10]
	0x032F8158 LDR X30, [X31], #0x50
	0x032F815C RET
	0x032F8160 ADRP X0, 0xE03000
	0x032F8164 LDR X0, [X0 + 0x760]
	0x032F8168 BL 0x1C16D08
	0x032F816C BL 0x1C16F10
	0x032F8170 MOV X19, X0
	0x032F8174 ADRP X0, 0xE2E000
	0x032F8178 LDR X0, [X0 + 0xDB8]
	0x032F817C BL 0x1C16D08

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+24]
	003 Compare X8, 0
	004 JumpIfEqual {84}
	005 Move W9, [X8+24]
	006 Compare W9, 0
	007 JumpIfEqual {85}
	008 Move [X8+32], W1
	009 Move X8, [X0+24]
	010 Compare X8, 0
	011 JumpIfEqual {84}
	012 Move W9, [X8+24]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X9, X1
	015 ShiftRight X9, 8
	016 And X9, X9, 0x7FFFFFFF
	017 Move [X8+33], W9
	018 Move X8, [X0+24]
	019 Compare X8, 0
	020 JumpIfEqual {84}
	021 Move W9, [X8+24]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X9, X1
	024 ShiftRight X9, 16
	025 And X9, X9, 0x7FFFFFFF
	026 Move [X8+34], W9
	027 Move X8, [X0+24]
	028 Compare X8, 0
	029 JumpIfEqual {84}
	030 Move W9, [X8+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X9, X1
	033 ShiftRight X9, 24
	034 And X9, X9, 0x7FFFFFFF
	035 Move [X8+35], W9
	036 Move X8, [X0+24]
	037 Compare X8, 0
	038 JumpIfEqual {84}
	039 Move W9, [X8+24]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X9, X1
	042 ShiftRight X9, 32
	043 And X9, X9, 0x7FFFFFFF
	044 Move [X8+36], W9
	045 Move X8, [X0+24]
	046 Compare X8, 0
	047 JumpIfEqual {84}
	048 Move W9, [X8+24]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X9, X1
	051 ShiftRight X9, 40
	052 And X9, X9, 0x7FFFFFFF
	053 Move [X8+37], W9
	054 Move X8, [X0+24]
	055 Compare X8, 0
	056 JumpIfEqual {84}
	057 Move W9, [X8+24]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X9, X1
	060 ShiftRight X9, 48
	061 And X9, X9, 0x7FFFFFFF
	062 Move [X8+38], W9
	063 Move X8, [X0+24]
	064 Compare X8, 0
	065 JumpIfEqual {84}
	066 Move W9, [X8+24]
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move X9, X1
	069 ShiftRight X9, 56
	070 And X9, X9, 0x7FFFFFFF
	071 Move [X8+39], W9
	072 Move X8, [X0+16]
	073 Compare X8, 0
	074 JumpIfEqual {84}
	075 Move X9, [X8]
	076 Move X1, [X0+24]
	077 Move W3, 8
	078 Move X0, X8
	079 Move X5, [X9+904]
	080 Move X4, [X9+912]
	081 Move W2, W31
	082 Move X30, [X31+16]
	083 CallNoReturn X5
	084 Call 0x1C17F20
	085 Call 0x1C17F28

Method: System.Void Write(System.UInt64 value)

Disassembly:
	0x032F8180 MOV X1, X0
	0x032F8184 MOV X0, X19
	0x032F8188 MOV X2, X31
	0x032F818C BL 0x3316014
	0x032F8190 B 0x32F82C4
	0x032F8194 ADRP X0, 0xE2E000
	0x032F8198 LDR X0, [X0 + 0xD28]
	0x032F819C BL 0x1C16D08
	0x032F81A0 MOV X1, X31
	0x032F81A4 BL 0x33BDD84
	0x032F81A8 MOV X19, X0
	0x032F81AC ADRP X0, 0xE03000
	0x032F81B0 LDR X0, [X0 + 0x760]
	0x032F81B4 BL 0x1C16D08
	0x032F81B8 BL 0x1C16F10
	0x032F81BC MOV X20, X0
	0x032F81C0 ADRP X0, 0xE26000
	0x032F81C4 LDR X0, [X0 + 0xF58]
	0x032F81C8 BL 0x1C16D08
	0x032F81CC MOV X1, X0
	0x032F81D0 MOV X0, X20
	0x032F81D4 MOV X2, X19
	0x032F81D8 MOV X3, X31
	0x032F81DC BL 0x3311888
	0x032F81E0 B 0x32F827C
	0x032F81E4 ADRP X0, 0xE29000
	0x032F81E8 LDR X19, [X19 + 0x30]
	0x032F81EC LDR X0, [X0 + 0xFA8]
	0x032F81F0 BL 0x1C16D08
	0x032F81F4 BL 0x19903D0
	0x032F81F8 MOV X0, X19
	0x032F81FC MOV W1, W24
	0x032F8200 B 0x32F8220
	0x032F8204 ADRP X0, 0xE29000
	0x032F8208 LDR X19, [X19 + 0x30]
	0x032F820C LDR X0, [X0 + 0xFA8]
	0x032F8210 BL 0x1C16D08
	0x032F8214 BL 0x19903D0
	0x032F8218 MOV X0, X19
	0x032F821C MOV W1, W20
	0x032F8220 BL 0x32F9334
	0x032F8224 MOV X19, X0
	0x032F8228 B 0x32F82C4
	0x032F822C BL 0x1C16F20
	0x032F8230 ADRP X0, 0xE2F000
	0x032F8234 LDR X0, [X0 + 0x450]
	0x032F8238 BL 0x1C16D08
	0x032F823C MOV X1, X31
	0x032F8240 BL 0x33BDD84
	0x032F8244 MOV X19, X0
	0x032F8248 ADRP X0, 0xE03000
	0x032F824C LDR X0, [X0 + 0x578]
	0x032F8250 BL 0x1C16D08
	0x032F8254 BL 0x1C16F10
	0x032F8258 MOV X20, X0
	0x032F825C ADRP X0, 0xE2F000
	0x032F8260 LDR X0, [X0 + 0x440]
	0x032F8264 BL 0x1C16D08
	0x032F8268 MOV X2, X0
	0x032F826C MOV X0, X20
	0x032F8270 MOV X1, X19
	0x032F8274 MOV X3, X31
	0x032F8278 BL 0x330E16C
	0x032F827C ADRP X0, 0xE2F000
	0x032F8280 LDR X0, [X0 + 0x458]
	0x032F8284 BL 0x1C16D08
	0x032F8288 MOV X1, X0
	0x032F828C MOV X0, X20

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+24]
	003 Compare X8, 0
	004 JumpIfEqual {84}
	005 Move W9, [X8+24]
	006 Compare W9, 0
	007 JumpIfEqual {85}
	008 Move [X8+32], W1
	009 Move X8, [X0+24]
	010 Compare X8, 0
	011 JumpIfEqual {84}
	012 Move W9, [X8+24]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X9, X1
	015 ShiftRight X9, 8
	016 And X9, X9, 0x7FFFFFFF
	017 Move [X8+33], W9
	018 Move X8, [X0+24]
	019 Compare X8, 0
	020 JumpIfEqual {84}
	021 Move W9, [X8+24]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X9, X1
	024 ShiftRight X9, 16
	025 And X9, X9, 0x7FFFFFFF
	026 Move [X8+34], W9
	027 Move X8, [X0+24]
	028 Compare X8, 0
	029 JumpIfEqual {84}
	030 Move W9, [X8+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X9, X1
	033 ShiftRight X9, 24
	034 And X9, X9, 0x7FFFFFFF
	035 Move [X8+35], W9
	036 Move X8, [X0+24]
	037 Compare X8, 0
	038 JumpIfEqual {84}
	039 Move W9, [X8+24]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X9, X1
	042 ShiftRight X9, 32
	043 And X9, X9, 0x7FFFFFFF
	044 Move [X8+36], W9
	045 Move X8, [X0+24]
	046 Compare X8, 0
	047 JumpIfEqual {84}
	048 Move W9, [X8+24]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X9, X1
	051 ShiftRight X9, 40
	052 And X9, X9, 0x7FFFFFFF
	053 Move [X8+37], W9
	054 Move X8, [X0+24]
	055 Compare X8, 0
	056 JumpIfEqual {84}
	057 Move W9, [X8+24]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X9, X1
	060 ShiftRight X9, 48
	061 And X9, X9, 0x7FFFFFFF
	062 Move [X8+38], W9
	063 Move X8, [X0+24]
	064 Compare X8, 0
	065 JumpIfEqual {84}
	066 Move W9, [X8+24]
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move X9, X1
	069 ShiftRight X9, 56
	070 And X9, X9, 0x7FFFFFFF
	071 Move [X8+39], W9
	072 Move X8, [X0+16]
	073 Compare X8, 0
	074 JumpIfEqual {84}
	075 Move X9, [X8]
	076 Move X1, [X0+24]
	077 Move W3, 8
	078 Move X0, X8
	079 Move X5, [X9+904]
	080 Move X4, [X9+912]
	081 Move W2, W31
	082 Move X30, [X31+16]
	083 CallNoReturn X5
	084 Call 0x1C17F20
	085 Call 0x1C17F28

Method: System.Void Write(System.Single value)

Disassembly:
	0x032F8290 BL 0x1C16DEC
	0x032F8294 ADRP X0, 0xE29000
	0x032F8298 LDR X0, [X0 + 0x7A8]
	0x032F829C BL 0x1C16D08
	0x032F82A0 BL 0x1C16F10
	0x032F82A4 MOV X19, X0
	0x032F82A8 ADRP X0, 0xE2F000
	0x032F82AC LDR X0, [X0 + 0x450]
	0x032F82B0 BL 0x1C16D08
	0x032F82B4 MOV X1, X0
	0x032F82B8 MOV X0, X19
	0x032F82BC MOV X2, X31
	0x032F82C0 BL 0x32E16BC
	0x032F82C4 ADRP X0, 0xE2F000
	0x032F82C8 LDR X0, [X0 + 0x458]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+16]
	004 Move X0, X31
	005 Call BitConverterLE.GetBytes, V0
	006 Compare X19, 0
	007 JumpIfEqual {18}
	008 Move X8, [X19]
	009 Move X1, X0
	010 Move W3, 4
	011 Move X0, X19
	012 Move X5, [X8+904]
	013 Move X4, [X8+912]
	014 Move W2, W31
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 CallNoReturn X5
	018 Call 0x1C17F20

Method: System.Void Write(System.String value)

Disassembly:
	0x032F82CC BL 0x1C16D08
	0x032F82D0 MOV X1, X0
	0x032F82D4 MOV X0, X19
	0x032F82D8 BL 0x1C16DEC
	0x032F82DC SUB X31, X31, 0x20
	0x032F82E0 STR X30, [X31 + 0x10]
	0x032F82E4 MOVZ W5, 0x1000
	0x032F82E8 MOV W6, W31
	0x032F82EC MOV W7, W31
	0x032F82F0 BL 0x32F8300
	0x032F82F4 LDR X30, [X31 + 0x10]
	0x032F82F8 ADD X31, X31, 0x20
	0x032F82FC RET
	0x032F8300 SUB X31, X31, 0x70
	0x032F8304 STP X29, X30, [X31 + 0x10]
	0x032F8308 STP X28, X27, [X31 + 0x20]
	0x032F830C STP X26, X25, [X31 + 0x30]
	0x032F8310 STP X24, X23, [X31 + 0x40]
	0x032F8314 STP X22, X21, [X31 + 0x50]
	0x032F8318 STP X20, X19, [X31 + 0x60]
	0x032F831C ADRP X29, 0x10E4000
	0x032F8320 ADRP X27, 0xE2F000
	0x032F8324 ADRP X28, 0xE2A000
	0x032F8328 LDRB W8, [X29 + 0xA76]
	0x032F832C LDR X27, [X27 + 0x428]
	0x032F8330 LDR X28, [X28 + 0xD10]
	0x032F8334 MOV W23, W7
	0x032F8338 MOV W24, W6
	0x032F833C MOV W21, W5
	0x032F8340 MOV W26, W4
	0x032F8344 MOV W22, W3
	0x032F8348 MOV W20, W2
	0x032F834C MOV X25, X1
	0x032F8350 MOV X19, X0
	0x032F8354 TBNZ X8, 0x0, 0x32F839C
	0x032F8358 ADRP X0, 0xE29000
	0x032F835C LDR X0, [X0 + 0xFA8]
	0x032F8360 BL 0x1C16CF4
	0x032F8364 ADRP X0, 0xE22000
	0x032F8368 LDR X0, [X0 + 0x1D0]
	0x032F836C BL 0x1C16CF4
	0x032F8370 ADRP X0, 0xE2F000
	0x032F8374 LDR X0, [X0 + 0x430]
	0x032F8378 BL 0x1C16CF4
	0x032F837C ADRP X0, 0xE2A000
	0x032F8380 LDR X0, [X0 + 0xD10]
	0x032F8384 BL 0x1C16CF4
	0x032F8388 ADRP X0, 0xE2F000
	0x032F838C LDR X0, [X0 + 0x428]
	0x032F8390 BL 0x1C16CF4
	0x032F8394 MOVZ W8, 0x1
	0x032F8398 STRB W8, [X29 + 0xA76]
	0x032F839C LDR X8, [X27]
	0x032F83A0 STR W31, [X31 + 0xC]
	0x032F83A4 STR X8, [X19 + 0x30]
	0x032F83A8 LDR X0, [X28]
	0x032F83AC LDR W8, [X0 + 0xE0]
	0x032F83B0 CBNZ W8, 0x32F83B8
	0x032F83B4 BL 0x1C16DFC
	0x032F83B8 MOV X0, X19
	0x032F83BC MOV X1, X31
	0x032F83C0 BL 0x33C011C
	0x032F83C4 CBZ X25, 0x32F8678
	0x032F83C8 LDR W8, [X25 + 0x10]
	0x032F83CC CBZ W8, 0x32F86AC
	0x032F83D0 AND W8, W24, 0x1
	0x032F83D4 CMP W21, 0x0
	0x032F83D8 STRB W8, [X19 + 0x57]
	0x032F83DC B.LE 0x32F86CC
	0x032F83E0 SUB W8, W20, 0x1
	0x032F83E4 CMP W8, 0x6
	0x032F83E8 B.CS 0x32F86FC
	0x032F83EC SUB W8, W22, 0x1
	0x032F83F0 CMP W8, 0x3
	0x032F83F4 B.CS 0x32F8748
	0x032F83F8 AND W26, W26, 0xFFFFFFEF
	0x032F83FC CMP W26, 0x8
	0x032F8400 B.CS 0x32F8768
	0x032F8404 ADRP X29, 0xE22000
	0x032F8408 LDR X29, [X29 + 0x1D0]
	0x032F840C LDR X0, [X29]
	0x032F8410 LDR W8, [X0 + 0xE0]
	0x032F8414 CBNZ W8, 0x32F8420
	0x032F8418 BL 0x1C16DFC
	0x032F841C LDR X0, [X29]
	0x032F8420 LDR X8, [X0 + 0xB8]
	0x032F8424 MOV X0, X25
	0x032F8428 MOV X2, X31
	0x032F842C LDR X1, [X8]
	0x032F8430 BL 0x322BE8C
	0x032F8434 ADDS W31, W0, 0x1
	0x032F8438 B.NE 0x32F8788
	0x032F843C LDR X0, [X29]
	0x032F8440 LDR W8, [X0 + 0xE0]
	0x032F8444 CBNZ W8, 0x32F844C
	0x032F8448 BL 0x1C16DFC
	0x032F844C MOV X0, X25
	0x032F8450 BL 0x32F8AF0
	0x032F8454 MOV X1, X31
	0x032F8458 MOV X25, X0
	0x032F845C BL 0x32EC360
	0x032F8460 TBNZ X0, 0x0, 0x32F87A8
	0x032F8464 TBZ X22, 0x0, 0x32F8470
	0x032F8468 CMP W20, 0x6
	0x032F846C B.EQ 0x32F8808
	0x032F8470 SUB W8, W20, 0x3
	0x032F8474 CMP W8, 0x2
	0x032F8478 B.CC 0x32F8480
	0x032F847C TBZ X22, 0x1, 0x32F883C
	0x032F8480 MOV X0, X31
	0x032F8484 BL 0x324ABEC
	0x032F8488 LDR X0, [X29]
	0x032F848C LDR W8, [X0 + 0xE0]
	0x032F8490 CBNZ W8, 0x32F8498
	0x032F8494 BL 0x1C16DFC
	0x032F8498 MOV X0, X25
	0x032F849C BL 0x32EE4AC
	0x032F84A0 CBZ X0, 0x32F88C4
	0x032F84A4 LDR W8, [X0 + 0x10]
	0x032F84A8 MOV X27, X0
	0x032F84AC CMP W8, 0x1
	0x032F84B0 B.LT 0x32F84D8
	0x032F84B4 LDR X0, [X29]
	0x032F84B8 LDR W8, [X0 + 0xE0]
	0x032F84BC CBNZ W8, 0x32F84C4
	0x032F84C0 BL 0x1C16DFC
	0x032F84C4 MOV X0, X27
	0x032F84C8 BL 0x32EE2E0
	0x032F84CC MOV X1, X31
	0x032F84D0 BL 0x32EC360
	0x032F84D4 TBZ X0, 0x0, 0x32F8900
	0x032F84D8 ADRP X27, 0xE29000
	0x032F84DC LDR X27, [X27 + 0xFA8]
	0x032F84E0 TBNZ X24, 0x0, 0x32F84E8
	0x032F84E4 STR X25, [X19 + 0x30]
	0x032F84E8 LDR X0, [X27]
	0x032F84EC LDR W8, [X0 + 0xE0]
	0x032F84F0 CBNZ W8, 0x32F84F8
	0x032F84F4 BL 0x1C16DFC
	0x032F84F8 ADD X5, X31, 0xC
	0x032F84FC MOV X0, X25
	0x032F8500 MOV W1, W20
	0x032F8504 MOV W2, W22
	0x032F8508 MOV W3, W26
	0x032F850C MOV W4, W23
	0x032F8510 BL 0x32F9220
	0x032F8514 LDR X8, [X27]
	0x032F8518 MOV X2, X31
	0x032F851C MOV X26, X0
	0x032F8520 LDR X8, [X8 + 0xB8]
	0x032F8524 LDR X1, [X8]
	0x032F8528 BL 0x33BE5B0
	0x032F852C TBNZ X0, 0x0, 0x32F88C8
	0x032F8530 ADRP X8, 0xE2F000
	0x032F8534 LDR X8, [X8 + 0x430]
	0x032F8538 LDR X0, [X8]
	0x032F853C BL 0x1C16F10
	0x032F8540 MOV X1, X26
	0x032F8544 MOV W2, W31
	0x032F8548 MOV X3, X31
	0x032F854C MOV X24, X0
	0x032F8550 BL 0x3224E14
	0x032F8554 MOVZ W8, 0x1
	0x032F8558 STR X24, [X19 + 0x38]
	0x032F855C STR W22, [X19 + 0x50]
	0x032F8560 STRB W8, [X19 + 0x54]
	0x032F8564 LDR X0, [X27]
	0x032F8568 LDR W8, [X0 + 0xE0]
	0x032F856C CBNZ W8, 0x32F8574
	0x032F8570 BL 0x1C16DFC

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x10E5000
	010 Move W8, [X21+2670]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xE30000
	018 Move X0, [X0+1016]
	019 Call 0x1C17CF4
	020 Move X0, 0xDFC000
	021 Move X0, [X0+1560]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2670], W8
	025 Compare X20, 0
	026 JumpIfEqual {188}
	027 Move X0, [X19+32]
	028 Compare X0, 0
	029 JumpIfEqual {164}
	030 Move X8, [X0]
	031 Move X1, X20
	032 Move X9, [X8+504]
	033 Move X2, [X8+512]
	034 NotImplemented "Instruction BLR not yet implemented."
	035 Move W21, W0
	036 Move X0, X19
	037 Move W1, W21
	038 Call BinaryWriter.Write7BitEncodedInt, X0, X1
	039 Move X4, [X19+64]
	040 Compare X4, 0
	041 JumpIfNotEqual {65}
	042 Move X8, 0xDFC000
	043 Move X8, [X8+1560]
	044 Move W1, 256
	045 Move X0, [X8]
	046 Call 0x1C17D6C
	047 Move [X19+64], X0
	048 Compare X0, 0
	049 JumpIfEqual {164}
	050 Move X22, X0
	051 Move X0, [X19+32]
	052 Compare X0, 0
	053 JumpIfEqual {164}
	054 Move X8, [X0]
	055 Move W1, 1
	056 Move X9, [X8+856]
	057 Move X2, [X8+864]
	058 NotImplemented "Instruction BLR not yet implemented."
	059 Move W8, [X22+24]
	060 Move X4, [X19+64]
	061 NotImplemented "Instruction SDIV not yet implemented."
	062 Move [X19+72], W8
	063 Compare X4, 0
	064 JumpIfEqual {164}
	065 Move W8, [X4+24]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move W22, [X20+16]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move W25, W31
	070 Move W24, [X19+72]
	071 NotImplemented "Instruction CMP not yet implemented."
	072 NotImplemented "Instruction CSEL not yet implemented."
	073 Or W8, W21, W25
	074 Move TEMP, X8
	075 And TEMP, TEMP, -2147483648
	076 Compare TEMP, -2147483648
	077 JumpIfEqual {165}
	078 Move W8, W21
	079 Add X8, X8, W25
	080 Move X8, X8
	081 ShiftRight X8, 31
	082 And X8, X8, 0x7FFFFFFF
	083 Compare X8, 0
	084 JumpIfNotEqual {183}
	085 Move W8, [X20+16]
	086 Add W23, W21, W25
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move X0, X31
	089 Call RuntimeHelpers.get_OffsetToStringData
	090 Move X9, [X19+64]
	091 Compare X9, 0
	092 JumpIfEqual {164}
	093 Move W8, W0
	094 Move X0, [X19+40]
	095 Compare X0, 0
	096 JumpIfEqual {164}
	097 Move X11, [X0]
	098 Move W4, [X9+24]
	099 Move W10, W25
	100 Add X9, X9, 32
	101 Move X12, [X11+440]
	102 Move X6, [X11+448]
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Move X8, W8
	105 Add X10, X20, X10
	106 NotImplemented "Instruction CSEL not yet implemented."
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Add X1, X10, X8
	109 NotImplemented "Instruction CSET not yet implemented."
	110 Move W2, W21
	111 NotImplemented "Instruction BLR not yet implemented."
	112 Move X8, [X19+16]
	113 Compare X8, 0
	114 JumpIfEqual {164}
	115 Move X9, [X8]
	116 Move X1, [X19+64]
	117 Move W3, W0
	118 Move X0, X8
	119 Move X10, [X9+904]
	120 Move X4, [X9+912]
	121 Move W2, W31
	122 NotImplemented "Instruction BLR not yet implemented."
	123 Subtract W22, W22, W21
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move W25, W23
	126 Move X20, [X31+48]
	127 Move X19, [X31+56]
	128 Move X22, [X31+32]
	129 Move X21, [X31+40]
	130 Move X24, [X31+16]
	131 Move X23, [X31+24]
	132 Move X30, [X31+64]
	133 Move X25, [X31+72]
	134 Return 
	135 Move X0, [X19+32]
	136 Compare X0, 0
	137 JumpIfEqual {164}
	138 Move X8, [X0]
	139 Move W3, [X20+16]
	140 Move X1, X20
	141 Move W2, W31
	142 Move X9, [X8+632]
	143 Move X6, [X8+640]
	144 Move W5, W31
	145 NotImplemented "Instruction BLR not yet implemented."
	146 Move X0, [X19+16]
	147 Compare X0, 0
	148 JumpIfEqual {164}
	149 Move X8, [X0]
	150 Move X1, [X19+64]
	151 Move W3, W21
	152 Move X20, [X31+48]
	153 Move X19, [X31+56]
	154 Move X5, [X8+904]
	155 Move X4, [X8+912]
	156 Move X22, [X31+32]
	157 Move X21, [X31+40]
	158 Move X24, [X31+16]
	159 Move X23, [X31+24]
	160 Move W2, W31
	161 Move X30, [X31+64]
	162 Move X25, [X31+72]
	163 CallNoReturn X5
	164 Call 0x1C17F20
	165 Move X0, 0xE04000
	166 Move X0, [X0+1888]
	167 Call 0x1C17D08
	168 Call 0x1C17F10
	169 Move X19, X0
	170 Move X0, 0xE2B000
	171 Move X0, [X0+784]
	172 Call 0x1C17D08
	173 Move X1, X0
	174 Move X0, X19
	175 Move X2, X31
	176 Call ArgumentOutOfRangeException..ctor, X0, X1
	177 Move X0, 0xE30000
	178 Move X0, [X0+1016]
	179 Call 0x1C17D08
	180 Move X1, X0
	181 Move X0, X19
	182 Call 0x1C17DEC
	183 Call 0x1C17F30
	184 Move X8, 0xE30000
	185 Move X8, [X8+1016]
	186 Move X1, [X8]
	187 Call 0x1C17DEC
	188 Move X0, 0xE01000
	189 Move X0, [X0+1320]
	190 Call 0x1C17D08
	191 Call 0x1C17F10
	192 Move X19, X0
	193 Move X0, 0xE06000
	194 Move X0, [X0+3784]
	195 Call 0x1C17D08
	196 Move X1, X0
	197 Move X0, X19
	198 Move X2, X31
	199 Call ArgumentNullException..ctor, X0, X1

Method: System.Void Write7BitEncodedInt(System.Int32 value)

Disassembly:
	0x032F8574 ADD X1, X31, 0xC
	0x032F8578 MOV X0, X24
	0x032F857C BL 0x32F9A78
	0x032F8580 CMP W0, 0x1
	0x032F8584 B.NE 0x32F8598
	0x032F8588 MOVZ W8, 0x1
	0x032F858C STRB W8, [X19 + 0x56]
	0x032F8590 UBFM W8, W23, 0x1E, 0x1E
	0x032F8594 B 0x32F85A0
	0x032F8598 MOV W8, W31
	0x032F859C STRB W31, [X19 + 0x56]
	0x032F85A0 CMP W22, 0x1
	0x032F85A4 STRB W8, [X19 + 0x55]
	0x032F85A8 B.NE 0x32F85F8
	0x032F85AC CMP W21, 0x1000
	0x032F85B0 B.NE 0x32F85F8
	0x032F85B4 CMP W0, 0x1
	0x032F85B8 B.NE 0x32F85F8
	0x032F85BC LDR X0, [X28]
	0x032F85C0 LDR W8, [X0 + 0xE0]
	0x032F85C4 CBNZ W8, 0x32F85CC
	0x032F85C8 BL 0x1C16DFC
	0x032F85CC LDR X8, [X19]
	0x032F85D0 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W20, W1
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X19, X0
	007 Move W8, W20
	008 Move X9, [X19]
	009 Or W1, W8, 0xFFFFFF80
	010 Move X0, X19
	011 Move X10, [X9+456]
	012 Move X2, [X9+464]
	013 NotImplemented "Instruction BLR not yet implemented."
	014 Move W8, W20
	015 ShiftRight W8, 7
	016 And W8, W8, 0x7FFFFFFF
	017 Move W9, W20
	018 ShiftRight W9, 14
	019 And W9, W9, 0x7FFFFFFF
	020 Move W20, W8
	021 Compare W9, 0
	022 JumpIfNotEqual {8}
	023 Move W20, W8
	024 Move X8, [X19]
	025 Move X0, X19
	026 Move W1, W20
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X3, [X8+456]
	030 Move X2, [X8+464]
	031 Move X30, [X31+32]
	032 CallNoReturn X3

Method: System.Void .cctor()

Disassembly:
	0x032F85D4 LDP X9, X1, [X8 + 0x1E8]
	0x032F85D8 BLR X9
	0x032F85DC CMP X0, 0xFFF
	0x032F85E0 B.GT 0x32F85F4
	0x032F85E4 CMP X0, 0x3E8
	0x032F85E8 MOVZ W8, 0x3E8
	0x032F85EC CSEL W21, W0, W8, GT
	0x032F85F0 B 0x32F85F8
	0x032F85F4 MOVZ W21, 0x1000
	0x032F85F8 MOV X0, X19
	0x032F85FC MOV W1, W21
	0x032F8600 MOV W2, W31
	0x032F8604 BL 0x32F9BB0
	0x032F8608 CMP W20, 0x6
	0x032F860C B.NE 0x32F8650
	0x032F8610 LDR X0, [X28]
	0x032F8614 LDR W8, [X0 + 0xE0]
	0x032F8618 CBNZ W8, 0x32F8620
	0x032F861C BL 0x1C16DFC
	0x032F8620 LDR X8, [X19]
	0x032F8624 MOVZ W2, 0x2
	0x032F8628 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x10E5000
	005 Move X20, 0xE2E000
	006 Move W8, [X19+2671]
	007 Move X20, [X20+608]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE2E000
	013 Move X0, [X0+608]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+2671], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move X19, X0
	020 Call BinaryWriter..ctor, X0
	021 Move X8, [X20]
	022 Move X8, [X8+184]
	023 Move [X8], X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Return 

