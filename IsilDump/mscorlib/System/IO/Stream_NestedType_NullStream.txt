Type: System.IO.Stream/NullStream

Method: System.Void .ctor()

Disassembly:
	0x032F3824 ADRP X20, 0x10E9000
	0x032F3828 LDRB W8, [X20 + 0xA59]
	0x032F382C MOV X19, X2
	0x032F3830 TBNZ X8, 0x0, 0x32F3848
	0x032F3834 ADRP X0, 0xE34000
	0x032F3838 LDR X0, [X0 + 0x128]
	0x032F383C BL 0x1C16CF4
	0x032F3840 MOVZ W8, 0x1
	0x032F3844 STRB W8, [X20 + 0xA59]
	0x032F3848 CBZ X19, 0x32F387C
	0x032F384C ADRP X8, 0xE34000
	0x032F3850 LDR X8, [X8 + 0x128]
	0x032F3854 LDR X1, [X8]
	0x032F3858 LDR X8, [X19]
	0x032F385C CMP X8, X1
	0x032F3860 B.NE 0x32F3880
	0x032F3864 LDR X0, [X19 + 0x58]
	0x032F3868 CBZ X0, 0x32F387C
	0x032F386C MOV X1, X19
	0x032F3870 LDP X20, X19, [X31 + 0x10]
	0x032F3874 LDR X30, [X31], #0x20
	0x032F3878 B 0x32F0964

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x10EA000
	006 Move X21, 0xE30000
	007 Move W8, [X20+2629]
	008 Move X21, [X21+3344]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE30000
	015 Move X0, [X0+3344]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2629], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call MarshalByRefObject..ctor, X0
	031 Return 

Method: System.Boolean get_CanRead()

Disassembly:
	0x032F3A24 LDRB W8, [X0 + 0x135]
	0x032F3A28 TBNZ X8, 0x0, 0x32F3A30

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Boolean get_CanWrite()

Disassembly:
	0x032F3A2C BL 0x1C5C684
	0x032F3A30 LDR X8, [X0 + 0xC0]

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Boolean get_CanSeek()

Disassembly:
	0x032F3A34 LDR X0, [X8 + 0x8]
	0x032F3A38 LDRB W8, [X0 + 0x135]

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Int64 get_Length()

Disassembly:
	0x032F3A3C TBNZ X8, 0x0, 0x32F3A44
	0x032F3A40 BL 0x1C5C684

ISIL:
	001 Move X0, X31
	002 Return X0

Method: System.Int64 get_Position()

Disassembly:
	0x032F3A44 LDR X8, [X0 + 0xB8]
	0x032F3A48 LDR X0, [X8]

ISIL:
	001 Move X0, X31
	002 Return X0

Method: System.Void set_Position(System.Int64 value)

Disassembly:
	0x032F3A4C CBZ X0, 0x32F3AE4

ISIL:
	001 Return 

Method: System.Void CopyTo(System.IO.Stream destination, System.Int32 bufferSize)

Disassembly:
	0x032F3A50 LDR X8, [X31 + 0x58]
	0x032F3A54 LDR X9, [X0]

ISIL:
	001 Move X3, X31
	002 Call StreamHelpers.ValidateCopyToArgs, X0, X1, X2
	003 Return 

Method: System.Threading.Tasks.Task CopyToAsync(System.IO.Stream destination, System.Int32 bufferSize, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x032F3A58 LDR W1, [X8 + 0x20]
	0x032F3A5C LDP X8, X2, [X9 + 0x178]
	0x032F3A60 BLR X8
	0x032F3A64 LDR X20, [X31 + 0x58]
	0x032F3A68 STR X0, [X20 + 0x40]
	0x032F3A6C LDR W8, [X31 + 0x4C]
	0x032F3A70 ADRP X24, 0xE2A000
	0x032F3A74 ADRP X23, 0xE03000
	0x032F3A78 ADD X9, X31, 0x4C
	0x032F3A7C ADD X10, X31, 0x58
	0x032F3A80 ADRP X25, 0xE01000
	0x032F3A84 LDR X24, [X24 + 0xE40]
	0x032F3A88 LDR X23, [X23 + 0x280]
	0x032F3A8C LDR X25, [X25 + 0x7B8]
	0x032F3A90 STP X31, X9, [X31 + 0x8]
	0x032F3A94 STR X10, [X31 + 0x18]
	0x032F3A98 ADRP X26, 0xE2F000
	0x032F3A9C LDR X26, [X26 + 0xEA8]
	0x032F3AA0 CBZ W8, 0x32F3AC8
	0x032F3AA4 CMP W8, 0x1
	0x032F3AA8 B.NE 0x32F3AF8
	0x032F3AAC LDUR V0, [X20 + 0x58]
	0x032F3AB0 MOVN W8, 0x0
	0x032F3AB4 STR V0, [X31 + 0x2]
	0x032F3AB8 STP X31, X31, [X20 + 0x58]
	0x032F3ABC STR W8, [X31 + 0x4C]
	0x032F3AC0 STR W8, [X20]
	0x032F3AC4 B 0x32F3D68
	0x032F3AC8 LDUR V0, [X20 + 0x48]
	0x032F3ACC MOVN W8, 0x0
	0x032F3AD0 STR V0, [X31 + 0x3]
	0x032F3AD4 STP X31, X31, [X20 + 0x48]
	0x032F3AD8 STR W8, [X31 + 0x4C]
	0x032F3ADC STR W8, [X20]
	0x032F3AE0 B 0x32F3BB8
	0x032F3AE4 BL 0x1C16F20
	0x032F3AE8 B 0x32F3F80
	0x032F3AEC B 0x32F3F80
	0x032F3AF0 B 0x32F3F80
	0x032F3AF4 B 0x32F3F80
	0x032F3AF8 LDR X8, [X31 + 0x58]
	0x032F3AFC LDR X1, [X8 + 0x40]
	0x032F3B00 CBZ X1, 0x32F3D24
	0x032F3B04 LDR X9, [X1 + 0x18]
	0x032F3B08 UBFM X2, X9, 0x20, 0x1F
	0x032F3B0C CBZ X19, 0x32F3D2C
	0x032F3B10 LDR X9, [X19]
	0x032F3B14 LDR X3, [X8 + 0x30]
	0x032F3B18 LDR X8, [X9 + 0x2E8]
	0x032F3B1C LDR X4, [X9 + 0x2F0]
	0x032F3B20 MOV X0, X19
	0x032F3B24 BLR X8
	0x032F3B28 ADRP X8, 0xE2B000
	0x032F3B2C LDR X8, [X8 + 0x2F8]
	0x032F3B30 MOV X20, X0
	0x032F3B34 MOV X21, X1
	0x032F3B38 LDR X22, [X8]
	0x032F3B3C LDR X0, [X22 + 0x20]
	0x032F3B40 ADD X8, X0, 0x135
	0x032F3B44 LDRH W8, [X8]
	0x032F3B48 TBNZ X8, 0x0, 0x32F3B5C
	0x032F3B4C BL 0x1C5C684
	0x032F3B50 LDR X0, [X22 + 0x20]
	0x032F3B54 ADD X8, X0, 0x135
	0x032F3B58 LDRH W8, [X8]
	0x032F3B5C TBNZ X8, 0x0, 0x32F3B64
	0x032F3B60 BL 0x1C5C684
	0x032F3B64 ADRP X8, 0xE2B000
	0x032F3B68 LDR X8, [X8 + 0x2B8]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x10EA000
	009 Move [X31+8], X3
	010 Move X22, 0xE09000
	011 Move W8, [X23+2630]
	012 Move X22, [X22+2008]
	013 Move W19, W2
	014 Move X20, X1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0xE09000
	021 Move X0, [X0+2008]
	022 Call 0x1C17CF4
	023 Move X0, 0xE02000
	024 Move X0, [X0+1976]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X23+2630], W8
	028 Move X0, X21
	029 Move X1, X20
	030 Move W2, W19
	031 Move X3, X31
	032 Call StreamHelpers.ValidateCopyToArgs, X0, X1, X2
	033 Move X0, [X22]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X19, 0xE02000
	039 Move X19, [X19+1976]
	040 Add X0, X31, 8
	041 Move X1, X31
	042 Call CancellationToken.get_IsCancellationRequested, X0
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {56}
	047 Move X0, [X19]
	048 Move X19, [X31+8]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Move X0, X19
	054 Move X1, X31
	055 Call Task.FromCanceled, X0
	056 Move X0, [X19]
	057 Move W8, [X0+224]
	058 Compare W8, 0
	059 JumpIfNotEqual {61}
	060 Call 0x1C17DFC
	061 Move X20, 0x10E6000
	062 Move W8, [X20+3869]
	063 Compare W8, 0
	064 JumpIfNotEqual {70}
	065 Move X0, 0xE02000
	066 Move X0, [X0+1976]
	067 Call 0x1C17CF4
	068 Move W8, 1
	069 Move [X20+3869], W8
	070 Move X0, [X19]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {76}
	074 Call 0x1C17DFC
	075 Move X0, [X19]
	076 Move X8, [X0+184]
	077 Move X0, [X8+48]
	078 Move X20, [X31+48]
	079 Move X19, [X31+56]
	080 Move X22, [X31+32]
	081 Move X21, [X31+40]
	082 Move X30, [X31+16]
	083 Move X23, [X31+24]
	084 Add X31, X31, 64
	085 Return X0

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x032F3B6C LDR X8, [X8]

ISIL:
	001 Return 

Method: System.Void Flush()

Disassembly:
	0x032F3B70 LDR X0, [X8 + 0x20]

ISIL:
	001 Return 

Method: System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x032F3B74 LDRB W8, [X0 + 0x135]
	0x032F3B78 TBNZ X8, 0x0, 0x32F3B80
	0x032F3B7C BL 0x1C5C684
	0x032F3B80 ADRP X8, 0xE2B000
	0x032F3B84 LDR X8, [X8 + 0x2C8]
	0x032F3B88 AND X9, X21, 0xFFFF
	0x032F3B8C STP X20, X9, [X31 + 0x30]
	0x032F3B90 LDR X8, [X8]
	0x032F3B94 LDR X0, [X8 + 0x20]
	0x032F3B98 LDRB W8, [X0 + 0x135]
	0x032F3B9C TBNZ X8, 0x0, 0x32F3BA4
	0x032F3BA0 BL 0x1C5C684
	0x032F3BA4 LDR X8, [X0 + 0xC0]
	0x032F3BA8 LDR X1, [X8 + 0x10]
	0x032F3BAC ADD X0, X31, 0x30
	0x032F3BB0 BL 0x27A2398
	0x032F3BB4 TBZ X0, 0x0, 0x32F3ED0
	0x032F3BB8 ADRP X8, 0xE2B000
	0x032F3BBC LDR X8, [X8 + 0x2C0]
	0x032F3BC0 LDR X8, [X8]
	0x032F3BC4 LDR X0, [X8 + 0x20]
	0x032F3BC8 LDRB W8, [X0 + 0x135]
	0x032F3BCC TBNZ X8, 0x0, 0x32F3BD4
	0x032F3BD0 BL 0x1C5C684
	0x032F3BD4 LDR X8, [X0 + 0xC0]
	0x032F3BD8 LDR X1, [X8 + 0x20]
	0x032F3BDC ADD X0, X31, 0x30
	0x032F3BE0 BL 0x27A24B4
	0x032F3BE4 MOV W22, W0
	0x032F3BE8 CBZ W0, 0x32F3EC8
	0x032F3BEC LDR X8, [X31 + 0x58]
	0x032F3BF0 LDP X20, X21, [X8 + 0x38]
	0x032F3BF4 CBZ X21, 0x32F3D30
	0x032F3BF8 LDR W8, [X21 + 0x18]
	0x032F3BFC CMP W22, W8
	0x032F3C00 B.LS 0x32F3C0C
	0x032F3C04 MOV X0, X31
	0x032F3C08 BL 0x339D6EC
	0x032F3C0C UBFM X2, X22, 0x20, 0x1F
	0x032F3C10 CBZ X20, 0x32F3D44
	0x032F3C14 LDR X8, [X31 + 0x58]
	0x032F3C18 LDR X9, [X20]
	0x032F3C1C LDR X3, [X8 + 0x30]
	0x032F3C20 LDR X8, [X9 + 0x328]
	0x032F3C24 LDR X4, [X9 + 0x330]
	0x032F3C28 MOV X0, X20
	0x032F3C2C MOV X1, X21
	0x032F3C30 BLR X8
	0x032F3C34 MOV X20, X0
	0x032F3C38 LDR X0, [X24]
	0x032F3C3C MOV X21, X1
	0x032F3C40 LDR W8, [X0 + 0xE0]
	0x032F3C44 CBNZ W8, 0x32F3C4C
	0x032F3C48 BL 0x1C16DFC
	0x032F3C4C ADRP X22, 0x10E9000
	0x032F3C50 LDRB W8, [X22 + 0x924]
	0x032F3C54 AND X9, X21, 0xFFFF

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x10EA000
	005 Move [X31+8], X1
	006 Move X20, 0xE09000
	007 Move W8, [X19+2631]
	008 Move X20, [X20+2008]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xE09000
	014 Move X0, [X0+2008]
	015 Call 0x1C17CF4
	016 Move X0, 0xE02000
	017 Move X0, [X0+1976]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X19+2631], W8
	021 Move X0, [X20]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X19, 0xE02000
	027 Move X19, [X19+1976]
	028 Add X0, X31, 8
	029 Move X1, X31
	030 Call CancellationToken.get_IsCancellationRequested, X0
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {44}
	035 Move X0, [X19]
	036 Move X19, [X31+8]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X0, X19
	042 Move X1, X31
	043 Call Task.FromCanceled, X0
	044 Move X0, [X19]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X20, 0x10E6000
	050 Move W8, [X20+3869]
	051 Compare W8, 0
	052 JumpIfNotEqual {58}
	053 Move X0, 0xE02000
	054 Move X0, [X0+1976]
	055 Call 0x1C17CF4
	056 Move W8, 1
	057 Move [X20+3869], W8
	058 Move X0, [X19]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {64}
	062 Call 0x1C17DFC
	063 Move X0, [X19]
	064 Move X8, [X0+184]
	065 Move X0, [X8+48]
	066 Move X20, [X31+16]
	067 Move X19, [X31+24]
	068 Move X30, [X31+32]
	069 Return X0

Method: System.IAsyncResult BeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)

Disassembly:
	0x032F3C58 STP X20, X9, [X31 + 0x20]
	0x032F3C5C CBNZ W8, 0x32F3C74
	0x032F3C60 ADRP X0, 0xE2A000
	0x032F3C64 LDR X0, [X0 + 0xE40]
	0x032F3C68 BL 0x1C16CF4
	0x032F3C6C MOVZ W8, 0x1
	0x032F3C70 STRB W8, [X22 + 0x924]
	0x032F3C74 LDR X0, [X24]
	0x032F3C78 LDR W8, [X0 + 0xE0]
	0x032F3C7C CBNZ W8, 0x32F3C84
	0x032F3C80 BL 0x1C16DFC
	0x032F3C84 ADRP X20, 0x10E9000
	0x032F3C88 LDRB W8, [X20 + 0x4E4]
	0x032F3C8C CBNZ W8, 0x32F3CB0
	0x032F3C90 ADRP X0, 0xE2F000
	0x032F3C94 LDR X0, [X0 + 0xEA8]
	0x032F3C98 BL 0x1C16CF4
	0x032F3C9C ADRP X0, 0xE01000
	0x032F3CA0 LDR X0, [X0 + 0x7B8]
	0x032F3CA4 BL 0x1C16CF4
	0x032F3CA8 MOVZ W8, 0x1
	0x032F3CAC STRB W8, [X20 + 0x4E4]
	0x032F3CB0 LDR X20, [X31 + 0x20]
	0x032F3CB4 CBZ X20, 0x32F3D68
	0x032F3CB8 LDR X8, [X20]
	0x032F3CBC LDR X9, [X25]
	0x032F3CC0 LDRB W11, [X8 + 0x130]
	0x032F3CC4 LDRB W10, [X9 + 0x130]
	0x032F3CC8 CMP W11, W10
	0x032F3CCC B.CC 0x32F3CE4
	0x032F3CD0 LDR X11, [X8 + 0xC8]
	0x032F3CD4 ADD X10, X11, X10, 0x3, LSL
	0x032F3CD8 LDUR X10, [X10 - 0x8]
	0x032F3CDC CMP X10, X9
	0x032F3CE0 B.EQ 0x32F3E6C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X0]
	009 Move X24, X1
	010 Move X19, X5
	011 Move X20, X4
	012 Move X9, [X8+424]
	013 Move X8, [X8+432]
	014 Move W21, W3
	015 Move W22, W2
	016 Move X23, X0
	017 Move X1, X8
	018 NotImplemented "Instruction BLR not yet implemented."
	019 Move TEMP, X0
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {38}
	023 Move X0, X23
	024 Move X1, X24
	025 Move W2, W22
	026 Move W3, W21
	027 Move X4, X20
	028 Move X5, X19
	029 Move X20, [X31+48]
	030 Move X19, [X31+56]
	031 Move X22, [X31+32]
	032 Move X21, [X31+40]
	033 Move X24, [X31+16]
	034 Move X23, [X31+24]
	035 Move X30, [X31+64]
	036 Call Stream.BlockingBeginRead, X0, X1, X2, X3, X4, X5
	037 Return X0
	038 Move X0, X31
	039 Call Error.GetReadNotSupported
	040 Move X19, X0
	041 Move X0, 0xE35000
	042 Move X0, [X0+584]
	043 Call 0x1C17D08
	044 Move X1, X0
	045 Move X0, X19
	046 Call 0x1C17DEC

Method: System.Int32 EndRead(System.IAsyncResult asyncResult)

Disassembly:
	0x032F3CE4 LDRH W21, [X31 + 0x28]
	0x032F3CE8 LDRH W9, [X8 + 0x12E]
	0x032F3CEC LDR X1, [X26]
	0x032F3CF0 CBZ X9, 0x32F3D14
	0x032F3CF4 LDR X10, [X8 + 0xB0]
	0x032F3CF8 ADD X10, X10, 0x8
	0x032F3CFC LDUR X11, [X10 - 0x8]
	0x032F3D00 CMP X11, X1
	0x032F3D04 B.EQ 0x32F3D48
	0x032F3D08 SUBS X9, X9, 0x1
	0x032F3D0C ADD X10, X10, 0x10
	0x032F3D10 B.NE 0x32F3CFC
	0x032F3D14 MOV X0, X20
	0x032F3D18 MOV W2, W31
	0x032F3D1C BL 0x1C5C788
	0x032F3D20 B 0x32F3D54
	0x032F3D24 MOV X2, X31
	0x032F3D28 CBNZ X19, 0x32F3B10
	0x032F3D2C BL 0x1C16F20
	0x032F3D30 MOV X0, X31
	0x032F3D34 BL 0x339D6EC
	0x032F3D38 MOV X21, X31
	0x032F3D3C MOV X2, X31
	0x032F3D40 CBNZ X20, 0x32F3C14
	0x032F3D44 BL 0x1C16F20
	0x032F3D48 LDRSW X9, [X10]
	0x032F3D4C ADD X8, X8, X9, 0x4, LSL
	0x032F3D50 ADD X0, X8, 0x138
	0x032F3D54 LDP X8, X2, [X0]
	0x032F3D58 MOV X0, X20
	0x032F3D5C MOV W1, W21
	0x032F3D60 BLR X8
	0x032F3D64 CBZ W0, 0x32F3E7C
	0x032F3D68 ADRP X20, 0x10E9000
	0x032F3D6C LDRB W8, [X20 + 0x925]
	0x032F3D70 CBNZ W8, 0x32F3D88
	0x032F3D74 ADRP X0, 0xE2A000
	0x032F3D78 LDR X0, [X0 + 0xE40]
	0x032F3D7C BL 0x1C16CF4
	0x032F3D80 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10EA000
	005 Move W8, [X20+2632]
	006 Move X19, X1
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE30000
	012 Move X0, [X0+3344]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2632], W8
	016 Compare X19, 0
	017 JumpIfEqual {31}
	018 Move X8, 0xE30000
	019 Move X8, [X8+3344]
	020 Move X0, [X8]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Call SynchronousAsyncResult.EndRead, X0
	030 Return X0
	031 Move X0, 0xE06000
	032 Move X0, [X0+1320]
	033 Call 0x1C17D08
	034 Call 0x1C17F10
	035 Move X19, X0
	036 Move X0, 0xE2C000
	037 Move X0, [X0+3536]
	038 Call 0x1C17D08
	039 Move X1, X0
	040 Move X0, X19
	041 Move X2, X31
	042 Call ArgumentNullException..ctor, X0, X1
	043 Move X0, 0xE35000
	044 Move X0, [X0+592]
	045 Call 0x1C17D08
	046 Move X1, X0
	047 Move X0, X19
	048 Call 0x1C17DEC

Method: System.IAsyncResult BeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)

Disassembly:
	0x032F3D84 STRB W8, [X20 + 0x925]
	0x032F3D88 LDR X0, [X24]
	0x032F3D8C LDR W8, [X0 + 0xE0]
	0x032F3D90 CBNZ W8, 0x32F3D98
	0x032F3D94 BL 0x1C16DFC
	0x032F3D98 ADRP X20, 0x10E9000
	0x032F3D9C LDRB W8, [X20 + 0x4E6]
	0x032F3DA0 CBNZ W8, 0x32F3DC4
	0x032F3DA4 ADRP X0, 0xE2F000
	0x032F3DA8 LDR X0, [X0 + 0xEA8]
	0x032F3DAC BL 0x1C16CF4
	0x032F3DB0 ADRP X0, 0xE01000
	0x032F3DB4 LDR X0, [X0 + 0x7B8]
	0x032F3DB8 BL 0x1C16CF4
	0x032F3DBC MOVZ W8, 0x1
	0x032F3DC0 STRB W8, [X20 + 0x4E6]
	0x032F3DC4 LDR X20, [X31 + 0x20]
	0x032F3DC8 CBZ X20, 0x32F3AF8
	0x032F3DCC LDR X8, [X20]
	0x032F3DD0 LDR X9, [X25]
	0x032F3DD4 LDRB W11, [X8 + 0x130]
	0x032F3DD8 LDRB W10, [X9 + 0x130]
	0x032F3DDC CMP W11, W10
	0x032F3DE0 B.CC 0x32F3DF8
	0x032F3DE4 LDR X11, [X8 + 0xC8]
	0x032F3DE8 ADD X10, X11, X10, 0x3, LSL
	0x032F3DEC LDUR X10, [X10 - 0x8]
	0x032F3DF0 CMP X10, X9
	0x032F3DF4 B.EQ 0x32F3E5C
	0x032F3DF8 LDRH W21, [X31 + 0x28]
	0x032F3DFC LDRH W9, [X8 + 0x12E]
	0x032F3E00 LDR X1, [X26]
	0x032F3E04 CBZ X9, 0x32F3E28
	0x032F3E08 LDR X10, [X8 + 0xB0]
	0x032F3E0C ADD X10, X10, 0x8

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X0]
	009 Move X24, X1
	010 Move X19, X5
	011 Move X20, X4
	012 Move X9, [X8+472]
	013 Move X8, [X8+480]
	014 Move W21, W3
	015 Move W22, W2
	016 Move X23, X0
	017 Move X1, X8
	018 NotImplemented "Instruction BLR not yet implemented."
	019 Move TEMP, X0
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {38}
	023 Move X0, X23
	024 Move X1, X24
	025 Move W2, W22
	026 Move W3, W21
	027 Move X4, X20
	028 Move X5, X19
	029 Move X20, [X31+48]
	030 Move X19, [X31+56]
	031 Move X22, [X31+32]
	032 Move X21, [X31+40]
	033 Move X24, [X31+16]
	034 Move X23, [X31+24]
	035 Move X30, [X31+64]
	036 Call Stream.BlockingBeginWrite, X0, X1, X2, X3, X4, X5
	037 Return X0
	038 Move X0, X31
	039 Call Error.GetWriteNotSupported
	040 Move X19, X0
	041 Move X0, 0xE35000
	042 Move X0, [X0+600]
	043 Call 0x1C17D08
	044 Move X1, X0
	045 Move X0, X19
	046 Call 0x1C17DEC

Method: System.Void EndWrite(System.IAsyncResult asyncResult)

Disassembly:
	0x032F3E10 LDUR X11, [X10 - 0x8]
	0x032F3E14 CMP X11, X1
	0x032F3E18 B.EQ 0x32F3E38
	0x032F3E1C SUBS X9, X9, 0x1
	0x032F3E20 ADD X10, X10, 0x10
	0x032F3E24 B.NE 0x32F3E10
	0x032F3E28 MOVZ W2, 0x2
	0x032F3E2C MOV X0, X20
	0x032F3E30 BL 0x1C5C788
	0x032F3E34 B 0x32F3E48
	0x032F3E38 LDR W9, [X10]
	0x032F3E3C ADD W9, W9, 0x2
	0x032F3E40 ADD X8, X8, W9, 0x4, SXTW
	0x032F3E44 ADD X0, X8, 0x138
	0x032F3E48 LDP X8, X2, [X0]
	0x032F3E4C MOV X0, X20
	0x032F3E50 MOV W1, W21
	0x032F3E54 BLR X8
	0x032F3E58 B 0x32F3AF8
	0x032F3E5C MOV X0, X20
	0x032F3E60 MOV X1, X31
	0x032F3E64 BL 0x32C3B54
	0x032F3E68 B 0x32F3AF8
	0x032F3E6C MOV X0, X20
	0x032F3E70 MOV X1, X31
	0x032F3E74 BL 0x33ED11C
	0x032F3E78 TBNZ X0, 0x0, 0x32F3D68
	0x032F3E7C LDR X19, [X31 + 0x58]
	0x032F3E80 MOVZ W8, 0x1
	0x032F3E84 STR W8, [X31 + 0x4C]
	0x032F3E88 STR W8, [X19]
	0x032F3E8C LDR V0, [X31 + 0x2]
	0x032F3E90 MOV X2, X19
	0x032F3E94 STUR V0, [X19 + 0x58]
	0x032F3E98 LDR X0, [X23]
	0x032F3E9C LDR W8, [X0 + 0xE0]
	0x032F3EA0 CBNZ W8, 0x32F3EAC
	0x032F3EA4 BL 0x1C16DFC
	0x032F3EA8 LDR X2, [X31 + 0x58]
	0x032F3EAC ADRP X8, 0xE34000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10EA000
	005 Move W8, [X20+2633]
	006 Move X19, X1
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE30000
	012 Move X0, [X0+3344]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2633], W8
	016 Compare X19, 0
	017 JumpIfEqual {31}
	018 Move X8, 0xE30000
	019 Move X8, [X8+3344]
	020 Move X0, [X8]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Call SynchronousAsyncResult.EndWrite, X0
	030 Return 
	031 Move X0, 0xE06000
	032 Move X0, [X0+1320]
	033 Call 0x1C17D08
	034 Call 0x1C17F10
	035 Move X19, X0
	036 Move X0, 0xE2C000
	037 Move X0, [X0+3536]
	038 Call 0x1C17D08
	039 Move X1, X0
	040 Move X0, X19
	041 Move X2, X31
	042 Call ArgumentNullException..ctor, X0, X1
	043 Move X0, 0xE35000
	044 Move X0, [X0+608]
	045 Call 0x1C17D08
	046 Move X1, X0
	047 Move X0, X19
	048 Call 0x1C17DEC

Method: System.Int32 Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)

Disassembly:
	0x032F3EB0 LDR X8, [X8 + 0x288]
	0x032F3EB4 ADD X0, X19, 0x8

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Int32 Read(System.Span`1<System.Byte> buffer)

Disassembly:
	0x032F3EB8 LDR X3, [X8]
	0x032F3EBC ADD X1, X31, 0x20

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Threading.Tasks.Task`1<System.Int32> ReadAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x032F3EC0 BL 0x218C8B0
	0x032F3EC4 B 0x32F3F14
	0x032F3EC8 MOVZ W19, 0xA
	0x032F3ECC B 0x32F3F18
	0x032F3ED0 LDR X19, [X31 + 0x58]
	0x032F3ED4 STR W31, [X31 + 0x4C]
	0x032F3ED8 STR W31, [X19]
	0x032F3EDC LDR V0, [X31 + 0x3]
	0x032F3EE0 MOV X2, X19
	0x032F3EE4 STUR V0, [X19 + 0x48]
	0x032F3EE8 LDR X0, [X23]
	0x032F3EEC LDR W8, [X0 + 0xE0]
	0x032F3EF0 CBNZ W8, 0x32F3EFC
	0x032F3EF4 BL 0x1C16DFC
	0x032F3EF8 LDR X2, [X31 + 0x58]
	0x032F3EFC ADRP X8, 0xE34000
	0x032F3F00 LDR X8, [X8 + 0x290]
	0x032F3F04 ADD X0, X19, 0x8
	0x032F3F08 LDR X3, [X8]
	0x032F3F0C ADD X1, X31, 0x30
	0x032F3F10 BL 0x2185C2C
	0x032F3F14 MOVZ W19, 0x7

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10EA000
	005 Move X19, 0xE35000
	006 Move W8, [X20+2634]
	007 Move X19, [X19+568]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE35000
	013 Move X0, [X0+568]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2634], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Threading.Tasks.ValueTask`1<System.Int32> ReadAsync(System.Memory`1<System.Byte> buffer, System.Threading.CancellationToken cancellationToken = null)

Disassembly:
	0x032F3F18 ADD X0, X31, 0x8
	0x032F3F1C BL 0x1BB773C
	0x032F3F20 CBZ W19, 0x32F3F2C
	0x032F3F24 CMP W19, 0xA
	0x032F3F28 B.NE 0x32F3F5C
	0x032F3F2C LDR X8, [X31 + 0x58]
	0x032F3F30 MOVN W9, 0x1
	0x032F3F34 STR W9, [X8]
	0x032F3F38 STR X31, [X8 + 0x40]
	0x032F3F3C LDR X0, [X23]
	0x032F3F40 ADD X19, X8, 0x8
	0x032F3F44 LDR W9, [X0 + 0xE0]
	0x032F3F48 CBNZ W9, 0x32F3F50

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x10EA000
	004 Move W8, [X19+2635]
	005 Move TEMP, X8
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfEqual {14}
	009 Move X0, 0xE34000
	010 Move X0, [X0+3352]
	011 Call 0x1C17CF4
	012 Move W8, 1
	013 Move [X19+2635], W8
	014 Move X1, 0x10000
	015 Move X0, X31
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Return X0

Method: System.Int32 ReadByte()

Disassembly:
	0x032F3F4C BL 0x1C16DFC
	0x032F3F50 MOV X0, X19

ISIL:
	001 Move TEMP, 0
	002 Not TEMP
	003 Move W0, TEMP
	004 Return X0

Method: System.Void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)

Disassembly:
	0x032F3F54 MOV X1, X31

ISIL:
	001 Return 

Method: System.Void Write(System.ReadOnlySpan`1<System.Byte> buffer)

Disassembly:
	0x032F3F58 BL 0x32C4864

ISIL:
	001 Return 

Method: System.Threading.Tasks.Task WriteAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x032F3F5C LDP X20, X19, [X31 + 0x90]
	0x032F3F60 LDP X22, X21, [X31 + 0x80]
	0x032F3F64 LDP X24, X23, [X31 + 0x70]
	0x032F3F68 LDP X26, X25, [X31 + 0x60]
	0x032F3F6C LDR X30, [X31 + 0x50]
	0x032F3F70 ADD X31, X31, 0xA0
	0x032F3F74 RET
	0x032F3F78 B 0x32F3FB8
	0x032F3F7C B 0x32F3FB8
	0x032F3F80 MOV X20, X1
	0x032F3F84 MOV X19, X0
	0x032F3F88 B 0x32F3FEC
	0x032F3F8C B 0x32F3FB8
	0x032F3F90 B 0x32F3FB8
	0x032F3F94 B 0x32F3FB8
	0x032F3F98 B 0x32F3FB8
	0x032F3F9C B 0x32F3FB8
	0x032F3FA0 B 0x32F3FB8
	0x032F3FA4 B 0x32F3FB8
	0x032F3FA8 B 0x32F3FB8
	0x032F3FAC B 0x32F3FB8
	0x032F3FB0 B 0x32F3FB8
	0x032F3FB4 B 0x32F3FB8
	0x032F3FB8 MOV X19, X0
	0x032F3FBC CMP W1, 0x1
	0x032F3FC0 B.NE 0x32F3FE0
	0x032F3FC4 MOV X0, X19
	0x032F3FC8 BL 0x3EB1AD0
	0x032F3FCC LDR X8, [X0]
	0x032F3FD0 STR X8, [X31 + 0x8]
	0x032F3FD4 BL 0x3EB1AE0
	0x032F3FD8 MOV W19, W31
	0x032F3FDC B 0x32F3F18
	0x032F3FE0 MOV X20, X1
	0x032F3FE4 ADD X0, X31, 0x8
	0x032F3FE8 BL 0x1BB773C
	0x032F3FEC CMP W20, 0x1
	0x032F3FF0 B.NE 0x32F4098
	0x032F3FF4 MOV X0, X19
	0x032F3FF8 BL 0x3EB1AD0
	0x032F3FFC MOV X19, X0
	0x032F4000 ADRP X0, 0xDFF000
	0x032F4004 LDR X0, [X0 + 0x7D0]
	0x032F4008 BL 0x1C16D08
	0x032F400C LDR X8, [X19]
	0x032F4010 LDR X1, [X8]
	0x032F4014 BL 0x1C17270
	0x032F4018 TBZ X0, 0x0, 0x32F4064
	0x032F401C LDR X19, [X19]
	0x032F4020 BL 0x3EB1AE0
	0x032F4024 LDR X8, [X31 + 0x58]
	0x032F4028 MOVN W9, 0x1
	0x032F402C ADRP X0, 0xE02000
	0x032F4030 STR W9, [X8]
	0x032F4034 STR X31, [X8 + 0x40]
	0x032F4038 LDR X0, [X0 + 0x280]
	0x032F403C ADD X20, X8, 0x8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x10EA000
	005 Move [X31+8], X4
	006 Move X20, 0xE09000
	007 Move W8, [X19+2636]
	008 Move X20, [X20+2008]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xE09000
	014 Move X0, [X0+2008]
	015 Call 0x1C17CF4
	016 Move X0, 0xE02000
	017 Move X0, [X0+1976]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X19+2636], W8
	021 Move X0, [X20]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X19, 0xE02000
	027 Move X19, [X19+1976]
	028 Add X0, X31, 8
	029 Move X1, X31
	030 Call CancellationToken.get_IsCancellationRequested, X0
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {44}
	035 Move X0, [X19]
	036 Move X19, [X31+8]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X0, X19
	042 Move X1, X31
	043 Call Task.FromCanceled, X0
	044 Move X0, [X19]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X20, 0x10E6000
	050 Move W8, [X20+3869]
	051 Compare W8, 0
	052 JumpIfNotEqual {58}
	053 Move X0, 0xE01000
	054 Move X0, [X0+1976]
	055 Call 0x1C17CF4
	056 Move W8, 1
	057 Move [X20+3869], W8
	058 Move X0, [X19]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {64}
	062 Call 0x1C17DFC
	063 Move X0, [X19]
	064 Move X8, [X0+184]
	065 Move X0, [X8+48]
	066 Move X20, [X31+16]
	067 Move X19, [X31+24]
	068 Move X30, [X31+32]
	069 Return X0

Method: System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory`1<System.Byte> buffer, System.Threading.CancellationToken cancellationToken = null)

Disassembly:
	0x032F4040 BL 0x1C16D08
	0x032F4044 LDR W8, [X0 + 0xE0]
	0x032F4048 CBNZ W8, 0x32F4050
	0x032F404C BL 0x1C16DFC
	0x032F4050 MOV X0, X20
	0x032F4054 MOV X1, X19
	0x032F4058 MOV X2, X31
	0x032F405C BL 0x32C4908
	0x032F4060 B 0x32F3F5C
	0x032F4064 MOVZ W0, 0x8
	0x032F4068 BL 0x3EB1AF0
	0x032F406C LDR X8, [X19]
	0x032F4070 STR X8, [X0]
	0x032F4074 ADRP X1, 0xBC0000
	0x032F4078 ADD X1, X1, 0xE58
	0x032F407C MOV X2, X31
	0x032F4080 BL 0x3EB1B00
	0x032F4084 MOV X20, X1
	0x032F4088 MOV X19, X0
	0x032F408C B 0x32F3FE4
	0x032F4090 MOV X19, X0
	0x032F4094 BL 0x3EB1AE0
	0x032F4098 MOV X0, X19
	0x032F409C BL 0x1D2C690
	0x032F40A0 BL 0x1990590
	0x032F40A4 STR X30, [X31 - 0x30]!
	0x032F40A8 STP X22, X21, [X31 + 0x10]
	0x032F40AC STP X20, X19, [X31 + 0x20]
	0x032F40B0 ADRP X21, 0x10E8000
	0x032F40B4 ADRP X22, 0xE02000
	0x032F40B8 LDRB W8, [X21 + 0xA5B]
	0x032F40BC LDR X22, [X22 + 0x280]
	0x032F40C0 MOV X19, X1
	0x032F40C4 MOV X20, X0
	0x032F40C8 TBNZ X8, 0x0, 0x32F40E0
	0x032F40CC ADRP X0, 0xE02000
	0x032F40D0 LDR X0, [X0 + 0x280]
	0x032F40D4 BL 0x1C16CF4
	0x032F40D8 MOVZ W8, 0x1
	0x032F40DC STRB W8, [X21 + 0xA5B]
	0x032F40E0 LDR X0, [X22]
	0x032F40E4 LDR W8, [X0 + 0xE0]
	0x032F40E8 CBNZ W8, 0x32F40F0
	0x032F40EC BL 0x1C16DFC
	0x032F40F0 ADD X0, X20, 0x8
	0x032F40F4 MOV X1, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x10E9000
	005 Move [X31+8], X3
	006 Move X20, 0xE08000
	007 Move W8, [X19+2637]
	008 Move X20, [X20+2008]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xE08000
	014 Move X0, [X0+2008]
	015 Call 0x1C17CF4
	016 Move X0, 0xE01000
	017 Move X0, [X0+1976]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X19+2637], W8
	021 Move X0, [X20]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Add X0, X31, 8
	027 Move X1, X31
	028 Call CancellationToken.get_IsCancellationRequested, X0
	029 Move X19, X31
	030 Move X1, X31
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {53}
	035 Move X8, 0xE01000
	036 Move X8, [X8+1976]
	037 Move X19, [X31+8]
	038 Move X0, [X8]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X19
	044 Move X1, X31
	045 Call Task.FromCanceled, X0
	046 Move X19, X0
	047 Compare X0, 0
	048 JumpIfNotEqual {52}
	049 Move W0, 38
	050 Move X1, X31
	051 Call ThrowHelper.ThrowArgumentNullException, X0
	052 Move W1, 0x10000
	053 Move X0, X19
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X30, [X31+32]
	057 Return X0

Method: System.Void WriteByte(System.Byte value)

Disassembly:
	0x032F40F8 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Return 

Method: System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin)

Disassembly:
	0x032F40FC LDP X22, X21, [X31 + 0x10]
	0x032F4100 MOV X2, X31

ISIL:
	001 Move X0, X31
	002 Return X0

Method: System.Void SetLength(System.Int64 length)

Disassembly:
	0x032F4104 LDR X30, [X31], #0x30

ISIL:
	001 Return 

Method: System.Void .cctor()

Disassembly:
	0x032F4108 B 0x32C477C
	0x032F410C SUB X31, X31, 0x60
	0x032F4110 STP X30, X21, [X31 + 0x40]
	0x032F4114 STP X20, X19, [X31 + 0x50]
	0x032F4118 ADRP X20, 0x10E8000
	0x032F411C LDRB W8, [X20 + 0xA5C]
	0x032F4120 MOV X19, X0
	0x032F4124 STR X0, [X31 + 0x38]
	0x032F4128 TBNZ X8, 0x0, 0x32F4164
	0x032F412C ADRP X0, 0xE2A000
	0x032F4130 LDR X0, [X0 + 0xD50]
	0x032F4134 BL 0x1C16CF4
	0x032F4138 ADRP X0, 0xE2A000
	0x032F413C LDR X0, [X0 + 0xD68]
	0x032F4140 BL 0x1C16CF4
	0x032F4144 ADRP X0, 0xE33000
	0x032F4148 LDR X0, [X0 + 0x2A0]
	0x032F414C BL 0x1C16CF4
	0x032F4150 ADRP X0, 0xE02000
	0x032F4154 LDR X0, [X0 + 0x280]
	0x032F4158 BL 0x1C16CF4
	0x032F415C MOVZ W8, 0x1
	0x032F4160 STRB W8, [X20 + 0xA5C]
	0x032F4164 ADRP X21, 0xE02000
	0x032F4168 LDR X21, [X21 + 0x280]
	0x032F416C STP X31, X31, [X31 + 0x20]
	0x032F4170 LDR W9, [X19]
	0x032F4174 ADD X8, X31, 0x34
	0x032F4178 ADD X10, X31, 0x38
	0x032F417C STP X31, X8, [X31 + 0x8]
	0x032F4180 STR W9, [X31 + 0x34]
	0x032F4184 STR X10, [X31 + 0x18]
	0x032F4188 CBZ W9, 0x32F4200
	0x032F418C LDR X0, [X19 + 0x20]
	0x032F4190 CBZ X0, 0x32F4274

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10E9000
	005 Move X19, 0xE01000
	006 Move W8, [X20+2638]
	007 Move X19, [X19+1976]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0xE34000
	013 Move X0, [X0+568]
	014 Call 0x1C17CF4
	015 Move X0, 0xE33000
	016 Move X0, [X0+3280]
	017 Call 0x1C17CF4
	018 Move X0, 0xE01000
	019 Move X0, [X0+1976]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+2638], W8
	023 Move X0, [X19]
	024 Move X20, 0xE33000
	025 Move X19, 0xE34000
	026 Move W8, [X0+224]
	027 Move X20, [X20+3280]
	028 Move X19, [X19+568]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X1, [X20]
	033 Move W0, W31
	034 Call Task.FromResult, X0
	035 Move X8, [X19]
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X8, [X8+184]
	039 Move [X8], X0
	040 Move X30, [X31+32]
	041 Return 

