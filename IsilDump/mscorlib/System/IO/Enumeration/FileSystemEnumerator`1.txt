Type: System.IO.Enumeration.FileSystemEnumerator`1

Method: System.Void .ctor(System.String directory, System.IO.EnumerationOptions options = null)

Disassembly:
	0x02D1CBC8 MOV X0, X20
	0x02D1CBCC LDR X9, [X8 + 0x218]
	0x02D1CBD0 LDR X2, [X8 + 0x220]
	0x02D1CBD4 BLR X9
	0x02D1CBD8 LDP X20, X19, [X31 + 0x30]
	0x02D1CBDC LDP X22, X21, [X31 + 0x20]
	0x02D1CBE0 LDP X30, X23, [X31 + 0x10]
	0x02D1CBE4 ADD X31, X31, 0x40
	0x02D1CBE8 RET
	0x02D1CBEC MOV X0, X22
	0x02D1CBF0 BL 0x1C16F18
	0x02D1CBF4 BL 0x1C16F20
	0x02D1CBF8 BL 0x1C16F20
	0x02D1CBFC B 0x2D1CC10
	0x02D1CC00 B 0x2D1CC10
	0x02D1CC04 B 0x2D1CC10
	0x02D1CC08 B 0x2D1CC10
	0x02D1CC0C B 0x2D1CC10
	0x02D1CC10 MOV X23, X0
	0x02D1CC14 CMP W1, 0x1
	0x02D1CC18 B.NE 0x2D1CC30
	0x02D1CC1C MOV X0, X23
	0x02D1CC20 BL 0x3EB1AD0
	0x02D1CC24 LDR X22, [X0]
	0x02D1CC28 BL 0x3EB1AE0
	0x02D1CC2C B 0x2D1CBA8
	0x02D1CC30 MOV X22, X31
	0x02D1CC34 B 0x2D1CC3C
	0x02D1CC38 MOV X23, X0
	0x02D1CC3C LDRB W8, [X31 + 0xC]
	0x02D1CC40 CBZ W8, 0x2D1CC50
	0x02D1CC44 MOV X0, X21
	0x02D1CC48 MOV X1, X31
	0x02D1CC4C BL 0x33E14E4
	0x02D1CC50 CBNZ X22, 0x2D1CC5C
	0x02D1CC54 MOV X0, X23
	0x02D1CC58 BL 0x1D2C690
	0x02D1CC5C MOV X0, X22
	0x02D1CC60 BL 0x1C16F18
	0x02D1CC64 BL 0x1990590
	0x02D1CC68 MOVZ W0, 0x1
	0x02D1CC6C RET
	0x02D1CC70 MOVZ W0, 0x1
	0x02D1CC74 RET
	0x02D1CC78 RET
	0x02D1CC7C MOV W0, W31
	0x02D1CC80 RET
	0x02D1CC84 LDR X0, [X0 + 0x60]
	0x02D1CC88 RET
	0x02D1CC8C LDR X0, [X0 + 0x60]
	0x02D1CC90 RET
	0x02D1CC94 STR X30, [X31 - 0x30]!
	0x02D1CC98 STP X22, X21, [X31 + 0x10]
	0x02D1CC9C STP X20, X19, [X31 + 0x20]
	0x02D1CCA0 MOV X20, X1
	0x02D1CCA4 MOV X19, X0
	0x02D1CCA8 STP X31, X31, [X0 + 0x50]
	0x02D1CCAC BL 0x2D1C200
	0x02D1CCB0 ADRP X22, 0x16BD000
	0x02D1CCB4 LDRB W8, [X22 + 0x762]
	0x02D1CCB8 LDR X21, [X19 + 0x30]
	0x02D1CCBC CBZ W8, 0x2D1CCDC
	0x02D1CCC0 CBZ X21, 0x2D1CCF4
	0x02D1CCC4 MOV X0, X21
	0x02D1CCC8 MOV X1, X31
	0x02D1CCCC BL 0x3225708
	0x02D1CCD0 LDR W2, [X21 + 0x10]
	0x02D1CCD4 MOV X1, X0
	0x02D1CCD8 B 0x2D1CCFC
	0x02D1CCDC ADRP X0, 0x13FE000
	0x02D1CCE0 LDR X0, [X0 + 0x290]
	0x02D1CCE4 BL 0x1C16CF4
	0x02D1CCE8 MOVZ W8, 0x1
	0x02D1CCEC STRB W8, [X22 + 0x762]
	0x02D1CCF0 CBNZ X21, 0x2D1CCC4
	0x02D1CCF4 MOV X1, X31
	0x02D1CCF8 MOV X2, X31
	0x02D1CCFC LDR X8, [X19]
	0x02D1CD00 MOV X0, X19
	0x02D1CD04 LDP X9, X3, [X8 + 0x1F8]
	0x02D1CD08 BLR X9
	0x02D1CD0C LDR X8, [X20 + 0x20]
	0x02D1CD10 MOV X0, X19
	0x02D1CD14 LDR X8, [X8 + 0xC0]
	0x02D1CD18 LDR X1, [X8 + 0x88]
	0x02D1CD1C BL 0x2D1C8F8
	0x02D1CD20 TBZ X0, 0x0, 0x2D1CD44
	0x02D1CD24 LDR X8, [X20 + 0x20]
	0x02D1CD28 MOV X0, X19
	0x02D1CD2C LDP X20, X19, [X31 + 0x20]
	0x02D1CD30 LDP X22, X21, [X31 + 0x10]
	0x02D1CD34 LDR X8, [X8 + 0xC0]
	0x02D1CD38 LDR X1, [X8 + 0x90]
	0x02D1CD3C LDR X30, [X31], #0x30
	0x02D1CD40 B 0x2D1C78C
	0x02D1CD44 MOVZ W8, 0x1
	0x02D1CD48 STRB W8, [X19 + 0x40]
	0x02D1CD4C LDP X20, X19, [X31 + 0x20]
	0x02D1CD50 LDP X22, X21, [X31 + 0x10]
	0x02D1CD54 LDR X30, [X31], #0x30
	0x02D1CD58 RET
	0x02D1CD5C STR X30, [X31 - 0x20]!
	0x02D1CD60 STP X20, X19, [X31 + 0x10]
	0x02D1CD64 ADRP X0, 0x13D7000
	0x02D1CD68 LDR X0, [X0 + 0xB40]
	0x02D1CD6C MOV X19, X1
	0x02D1CD70 BL 0x1C16D08
	0x02D1CD74 BL 0x1C16F10
	0x02D1CD78 MOV X1, X31
	0x02D1CD7C MOV X20, X0
	0x02D1CD80 BL 0x3380310
	0x02D1CD84 MOV X0, X20
	0x02D1CD88 MOV X1, X19
	0x02D1CD8C BL 0x1C16DEC
	0x02D1CD90 STR X30, [X31 - 0x30]!
	0x02D1CD94 STP X22, X21, [X31 + 0x10]
	0x02D1CD98 STP X20, X19, [X31 + 0x20]
	0x02D1CD9C ADRP X22, 0x16BF000
	0x02D1CDA0 ADRP X21, 0x13DE000
	0x02D1CDA4 LDRB W8, [X22 + 0x7D1]
	0x02D1CDA8 LDR X21, [X21 + 0xC10]
	0x02D1CDAC MOV X20, X1
	0x02D1CDB0 MOV X19, X0
	0x02D1CDB4 TBNZ X8, 0x0, 0x2D1CDCC
	0x02D1CDB8 ADRP X0, 0x13DE000
	0x02D1CDBC LDR X0, [X0 + 0xC10]
	0x02D1CDC0 BL 0x1C16CF4
	0x02D1CDC4 MOVZ W8, 0x1
	0x02D1CDC8 STRB W8, [X22 + 0x7D1]
	0x02D1CDCC LDR X8, [X20 + 0x20]
	0x02D1CDD0 MOVZ W1, 0x1
	0x02D1CDD4 MOV X0, X19
	0x02D1CDD8 LDR X8, [X8 + 0xC0]
	0x02D1CDDC LDR X2, [X8 + 0x98]
	0x02D1CDE0 BL 0x2D1C9CC
	0x02D1CDE4 LDR X0, [X21]
	0x02D1CDE8 LDR W8, [X0 + 0xE0]
	0x02D1CDEC CBNZ W8, 0x2D1CDF4
	0x02D1CDF0 BL 0x1C16DFC
	0x02D1CDF4 MOV X0, X19
	0x02D1CDF8 LDP X20, X19, [X31 + 0x20]
	0x02D1CDFC LDP X22, X21, [X31 + 0x10]
	0x02D1CE00 MOV X1, X31
	0x02D1CE04 LDR X30, [X31], #0x30
	0x02D1CE08 B 0x33B3E9C
	0x02D1CE0C RET
	0x02D1CE10 STP X30, X21, [X31 - 0x20]!
	0x02D1CE14 STP X20, X19, [X31 + 0x10]
	0x02D1CE18 LDR X8, [X1 + 0x20]
	0x02D1CE1C MOV X19, X0
	0x02D1CE20 LDR X8, [X8 + 0xC0]
	0x02D1CE24 LDR X2, [X8 + 0x98]
	0x02D1CE28 MOV W1, W31
	0x02D1CE2C BL 0x2D1C9CC
	0x02D1CE30 MOV X20, X31
	0x02D1CE34 CBZ X19, 0x2D1CE54
	0x02D1CE38 MOV X0, X19
	0x02D1CE3C MOV X1, X31
	0x02D1CE40 BL 0x32C2928
	0x02D1CE44 CBNZ X20, 0x2D1CE58
	0x02D1CE48 LDP X20, X19, [X31 + 0x10]
	0x02D1CE4C LDP X30, X21, [X31], #0x20
	0x02D1CE50 RET
	0x02D1CE54 BL 0x1C16F20
	0x02D1CE58 MOV X0, X20
	0x02D1CE5C BL 0x1C16F18
	0x02D1CE60 CMP W1, 0x1
	0x02D1CE64 MOV X21, X0
	0x02D1CE68 B.NE 0x2D1CE80
	0x02D1CE6C MOV X0, X21
	0x02D1CE70 BL 0x3EB1AD0
	0x02D1CE74 LDR X20, [X0]
	0x02D1CE78 BL 0x3EB1AE0
	0x02D1CE7C B 0x2D1CE34
	0x02D1CE80 MOV X20, X31
	0x02D1CE84 B 0x2D1CE8C
	0x02D1CE88 MOV X21, X0
	0x02D1CE8C CBNZ X19, 0x2D1CE94
	0x02D1CE90 BL 0x1C16F20
	0x02D1CE94 MOV X0, X19
	0x02D1CE98 MOV X1, X31
	0x02D1CE9C BL 0x32C2928
	0x02D1CEA0 CBNZ X20, 0x2D1CEAC
	0x02D1CEA4 MOV X0, X21
	0x02D1CEA8 BL 0x1D2C690
	0x02D1CEAC MOV X0, X20
	0x02D1CEB0 BL 0x1C16F18
	0x02D1CEB4 BL 0x1990590
	0x02D1CEB8 STP X30, X25, [X31 - 0x40]!
	0x02D1CEBC STP X24, X23, [X31 + 0x10]
	0x02D1CEC0 STP X22, X21, [X31 + 0x20]
	0x02D1CEC4 STP X20, X19, [X31 + 0x30]
	0x02D1CEC8 ADRP X23, 0x16BF000
	0x02D1CECC ADRP X24, 0x13DD000
	0x02D1CED0 LDRB W8, [X23 + 0x7D2]
	0x02D1CED4 LDR X24, [X24 + 0xCC0]
	0x02D1CED8 MOV X19, X3
	0x02D1CEDC MOV X21, X2
	0x02D1CEE0 MOV X22, X1
	0x02D1CEE4 MOV X20, X0
	0x02D1CEE8 TBNZ X8, 0x0, 0x2D1CF60
	0x02D1CEEC ADRP X0, 0x1402000
	0x02D1CEF0 LDR X0, [X0 + 0xD50]
	0x02D1CEF4 BL 0x1C16CF4
	0x02D1CEF8 ADRP X0, 0x1402000
	0x02D1CEFC LDR X0, [X0 + 0xD58]
	0x02D1CF00 BL 0x1C16CF4
	0x02D1CF04 ADRP X0, 0x1402000
	0x02D1CF08 LDR X0, [X0 + 0xD60]
	0x02D1CF0C BL 0x1C16CF4
	0x02D1CF10 ADRP X0, 0x1402000
	0x02D1CF14 LDR X0, [X0 + 0xD68]
	0x02D1CF18 BL 0x1C16CF4
	0x02D1CF1C ADRP X0, 0x1402000
	0x02D1CF20 LDR X0, [X0 + 0xD38]
	0x02D1CF24 BL 0x1C16CF4
	0x02D1CF28 ADRP X0, 0x1402000
	0x02D1CF2C LDR X0, [X0 + 0xD70]
	0x02D1CF30 BL 0x1C16CF4
	0x02D1CF34 ADRP X0, 0x13FE000
	0x02D1CF38 LDR X0, [X0 + 0x1D0]
	0x02D1CF3C BL 0x1C16CF4
	0x02D1CF40 ADRP X0, 0x13DD000
	0x02D1CF44 LDR X0, [X0 + 0xCC0]
	0x02D1CF48 BL 0x1C16CF4
	0x02D1CF4C ADRP X0, 0x1402000
	0x02D1CF50 LDR X0, [X0 + 0xD78]
	0x02D1CF54 BL 0x1C16CF4
	0x02D1CF58 MOVZ W8, 0x1
	0x02D1CF5C STRB W8, [X23 + 0x7D2]
	0x02D1CF60 LDR X0, [X24]
	0x02D1CF64 BL 0x1C16F10
	0x02D1CF68 MOV X1, X31
	0x02D1CF6C MOV X23, X0
	0x02D1CF70 BL 0x33BDD8C
	0x02D1CF74 LDR X8, [X19 + 0x20]
	0x02D1CF78 MOVZ W1, 0x8
	0x02D1CF7C LDR X8, [X8 + 0xC0]
	0x02D1CF80 LDR X8, [X8]
	0x02D1CF84 LDR X8, [X8 + 0x80]
	0x02D1CF88 ADD X24, X8, 0x60
	0x02D1CF8C MOV X0, X24
	0x02D1CF90 BL 0x1C16D14
	0x02D1CF94 MOV X0, X20
	0x02D1CF98 MOV X1, X24
	0x02D1CF9C BL 0x1C16D18
	0x02D1CFA0 STR X23, [X0]
	0x02D1CFA4 MOV X0, X20
	0x02D1CFA8 MOV X1, X31
	0x02D1CFAC BL 0x32C01F0
	0x02D1CFB0 CBZ X22, 0x2D1D3EC
	0x02D1CFB4 CBZ X20, 0x2D1D428
	0x02D1CFB8 LDR X8, [X19 + 0x20]
	0x02D1CFBC ADRP X25, 0x13FE000
	0x02D1CFC0 ADRP X24, 0x1402000
	0x02D1CFC4 MOVZ W1, 0x8
	0x02D1CFC8 LDR X8, [X8 + 0xC0]
	0x02D1CFCC LDR X8, [X8]
	0x02D1CFD0 LDR X23, [X8 + 0x80]
	0x02D1CFD4 LDR X25, [X25 + 0x1D0]
	0x02D1CFD8 LDR X24, [X24 + 0xD70]
	0x02D1CFDC MOV X0, X23
	0x02D1CFE0 BL 0x1C16D14
	0x02D1CFE4 MOV X0, X20
	0x02D1CFE8 MOV X1, X23
	0x02D1CFEC BL 0x1C16D18
	0x02D1CFF0 STR X22, [X0]
	0x02D1CFF4 LDR X0, [X25]
	0x02D1CFF8 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x16C0000
	009 Move X24, 0x13DE000
	010 Move W8, [X23+1994]
	011 Move X24, [X24+3264]
	012 Move X19, X3
	013 Move X21, X2
	014 Move X22, X1
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {49}
	020 Move X0, 0x1403000
	021 Move X0, [X0+3408]
	022 Call 0x1C17CF4
	023 Move X0, 0x1403000
	024 Move X0, [X0+3416]
	025 Call 0x1C17CF4
	026 Move X0, 0x1403000
	027 Move X0, [X0+3424]
	028 Call 0x1C17CF4
	029 Move X0, 0x1403000
	030 Move X0, [X0+3432]
	031 Call 0x1C17CF4
	032 Move X0, 0x1403000
	033 Move X0, [X0+3384]
	034 Call 0x1C17CF4
	035 Move X0, 0x1403000
	036 Move X0, [X0+3440]
	037 Call 0x1C17CF4
	038 Move X0, 0x13FF000
	039 Move X0, [X0+464]
	040 Call 0x1C17CF4
	041 Move X0, 0x13DE000
	042 Move X0, [X0+3264]
	043 Call 0x1C17CF4
	044 Move X0, 0x1403000
	045 Move X0, [X0+3448]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X23+1994], W8
	049 Move X0, [X24]
	050 Call 0x1C17F10
	051 Move X1, X31
	052 Move X23, X0
	053 Call Object..ctor, X0
	054 Move X0, X20
	055 Move X1, X31
	056 Move [X20+40], X23
	057 Call CriticalFinalizerObject..ctor, X0
	058 NotImplemented "Instruction CMP not yet implemented."
	059 NotImplemented "Instruction CSEL not yet implemented."
	060 Compare X22, 0
	061 JumpIfEqual {262}
	062 Compare X8, 0
	063 JumpIfEqual {277}
	064 Move X9, 0x13FF000
	065 Move X9, [X9+464]
	066 Move [X8+16], X22
	067 Move X23, 0x1403000
	068 Move X0, [X9]
	069 Move W8, [X0+224]
	070 Move X23, [X23+3440]
	071 Compare W8, 0
	072 JumpIfNotEqual {74}
	073 Call 0x1C17DFC
	074 Move X0, X22
	075 Move X1, X31
	076 Call Path.GetFullPath, X0
	077 Move X8, [X23]
	078 Move X22, X0
	079 Move W9, [X8+224]
	080 Compare W9, 0
	081 JumpIfNotEqual {84}
	082 Move X0, X8
	083 Call 0x1C17DFC
	084 Move X0, X22
	085 Move X1, X31
	086 Call PathInternal.TrimEndingDirectorySeparator, X0
	087 Move [X20+24], X0
	088 Compare X21, 0
	089 JumpIfNotEqual {114}
	090 Move X21, 0x1403000
	091 Move X21, [X21+3384]
	092 Move X0, [X21]
	093 Move W8, [X0+224]
	094 Compare W8, 0
	095 JumpIfNotEqual {97}
	096 Call 0x1C17DFC
	097 Move X22, 0x16C0000
	098 Move W8, [X22+2037]
	099 Compare W8, 0
	100 JumpIfNotEqual {106}
	101 Move X0, 0x1403000
	102 Move X0, [X0+3384]
	103 Call 0x1C17CF4
	104 Move W8, 1
	105 Move [X22+2037], W8
	106 Move X0, [X21]
	107 Move W8, [X0+224]
	108 Compare W8, 0
	109 JumpIfNotEqual {112}
	110 Call 0x1C17DFC
	111 Move X0, [X21]
	112 Move X8, [X0+184]
	113 Move X21, [X8+16]
	114 Move [X20+32], X21
	115 Move X8, [X19+32]
	116 Move X1, [X20+24]
	117 Move X21, 0x1403000
	118 Move X0, X20
	119 Move X8, [X8+192]
	120 Move W2, W31
	121 Move X3, [X8+8]
	122 Move X21, [X21+3424]
	123 Call 0x2D1D114, X0, X1, X2
	124 Move X1, X31
	125 Move X2, X31
	126 Move [X20+56], X0
	127 Call IntPtr.op_Equality, X0, X1
	128 Move TEMP, X0
	129 And TEMP, TEMP, 1
	130 Compare TEMP, 1
	131 JumpIfNotEqual {134}
	132 Move W8, 1
	133 Move [X20+64], W8
	134 Move X8, [X20+24]
	135 Move [X20+48], X8
	136 Move X0, [X21]
	137 Move W8, [X0+224]
	138 Compare W8, 0
	139 JumpIfNotEqual {141}
	140 Call 0x1C17DFC
	141 Move X8, 0x1403000
	142 Move X8, [X8+3416]
	143 Move X21, [X8]
	144 Move X0, [X21+32]
	145 Move W8, [X0+309]
	146 Move TEMP, X8
	147 And TEMP, TEMP, 1
	148 Compare TEMP, 1
	149 JumpIfEqual {151}
	150 Call 0x1C5D684
	151 Move X8, [X0+192]
	152 Move X0, [X8+8]
	153 Move W8, [X0+309]
	154 Move TEMP, X8
	155 And TEMP, TEMP, 1
	156 Compare TEMP, 1
	157 JumpIfEqual {159}
	158 Call 0x1C5D684
	159 Move W8, [X0+224]
	160 Compare W8, 0
	161 JumpIfNotEqual {163}
	162 Call 0x1C17DFC
	163 Move X0, [X21+32]
	164 Move W8, [X0+309]
	165 Move TEMP, X8
	166 And TEMP, TEMP, 1
	167 Compare TEMP, 1
	168 JumpIfEqual {170}
	169 Call 0x1C5D684
	170 Move X8, [X0+192]
	171 Move X0, [X8+8]
	172 Move W8, [X0+309]
	173 Move TEMP, X8
	174 And TEMP, TEMP, 1
	175 Compare TEMP, 1
	176 JumpIfEqual {178}
	177 Call 0x1C5D684
	178 Move X8, [X0+184]
	179 Move X0, [X8]
	180 Compare X0, 0
	181 JumpIfEqual {278}
	182 Move X8, [X0]
	183 Move X9, [X8+376]
	184 Move X2, [X8+384]
	185 Move W1, 4096
	186 NotImplemented "Instruction BLR not yet implemented."
	187 Move X8, 0x1403000
	188 Move X8, [X8+3448]
	189 Move [X20+104], X0
	190 Move X0, [X8]
	191 Move W8, [X0+224]
	192 Compare W8, 0
	193 JumpIfNotEqual {195}
	194 Call 0x1C17DFC
	195 Move X0, X31
	196 Call Sys.GetReadDirRBufferSize
	197 Move W21, W0
	198 NotImplemented "Instruction CMP not yet implemented."
	199 Move X8, 0x1403000
	200 Move X8, [X8+3432]
	201 Move X0, [X8]
	202 Move W8, [X0+224]
	203 Compare W8, 0
	204 JumpIfNotEqual {206}
	205 Call 0x1C17DFC
	206 Move X8, 0x1403000
	207 Move X8, [X8+3408]
	208 Move X22, [X8]
	209 Move X0, [X22+32]
	210 Move W8, [X0+309]
	211 Move TEMP, X8
	212 And TEMP, TEMP, 1
	213 Compare TEMP, 1
	214 JumpIfEqual {216}
	215 Call 0x1C5D684
	216 Move X8, [X0+192]
	217 Move X0, [X8+8]
	218 Move W8, [X0+309]
	219 Move TEMP, X8
	220 And TEMP, TEMP, 1
	221 Compare TEMP, 1
	222 JumpIfEqual {224}
	223 Call 0x1C5D684
	224 Move W8, [X0+224]
	225 Compare W8, 0
	226 JumpIfNotEqual {228}
	227 Call 0x1C17DFC
	228 Move X0, [X22+32]
	229 Move W8, [X0+309]
	230 Move TEMP, X8
	231 And TEMP, TEMP, 1
	232 Compare TEMP, 1
	233 JumpIfEqual {235}
	234 Call 0x1C5D684
	235 Move X8, [X0+192]
	236 Move X0, [X8+8]
	237 Move W8, [X0+309]
	238 Move TEMP, X8
	239 And TEMP, TEMP, 1
	240 Compare TEMP, 1
	241 JumpIfEqual {243}
	242 Call 0x1C5D684
	243 Move X8, [X0+184]
	244 Move X0, [X8]
	245 Compare X0, 0
	246 JumpIfEqual {279}
	247 Move X8, [X0]
	248 Move X9, [X8+376]
	249 Move X2, [X8+384]
	250 Move W1, W21
	251 NotImplemented "Instruction BLR not yet implemented."
	252 Move X0, X31
	253 Move [X20+112], X0
	254 Move X20, [X31+48]
	255 Move X19, [X31+56]
	256 Move X22, [X31+32]
	257 Move X21, [X31+40]
	258 Move X24, [X31+16]
	259 Move X23, [X31+24]
	260 Move X30, [X31+64]
	261 Return 
	262 Move X0, 0x13DD000
	263 Move X0, [X0+1320]
	264 Call 0x1C17D08
	265 Call 0x1C17F10
	266 Move X20, X0
	267 Move X0, 0x1403000
	268 Move X0, [X0+3392]
	269 Call 0x1C17D08
	270 Move X1, X0
	271 Move X0, X20
	272 Move X2, X31
	273 Call ArgumentNullException..ctor, X0, X1
	274 Move X0, X20
	275 Move X1, X19
	276 Call 0x1C17DEC
	277 Call 0x1C17F20
	278 Call 0x1C17F20
	279 Call 0x1C17F20
	280 Move X21, X0
	281 NotImplemented "Instruction CMP not yet implemented."
	282 Move X0, X21
	283 Call 0x3EB2AD0
	284 Move X21, X0
	285 Move X0, 0x13DE000
	286 Move X0, [X0+3264]
	287 Call 0x1C17D08
	288 Move X8, [X21]
	289 Move X1, [X8]
	290 Call 0x1C18270
	291 Move TEMP, X0
	292 And TEMP, TEMP, 1
	293 Compare TEMP, 1
	294 JumpIfNotEqual {304}
	295 Move X21, [X21]
	296 Call 0x3EB2AE0
	297 Move X8, [X19+32]
	298 Move X0, X20
	299 Move X8, [X8+192]
	300 Move X1, [X8+16]
	301 Call 0x19FF504
	302 Move X0, X21
	303 Call 0x1C17F18
	304 Move W0, 8
	305 Call 0x3EB2AF0
	306 Move X8, [X21]
	307 Move [X0], X8
	308 Move X1, 0x1199000
	309 Add X1, X1, 3672
	310 Move X2, X31
	311 Call 0x3EB2B00
	312 Move X21, X0
	313 Call 0x3EB2AE0
	314 Move X0, X21
	315 Call 0x1D2D690
	316 Call 0x1991590

Method: System.Boolean InternalContinueOnError(Interop/ErrorInfo info, System.Boolean ignoreNotFound = False)

Disassembly:
	0x02D1CFFC CBNZ W8, 0x2D1D004
	0x02D1D000 BL 0x1C16DFC
	0x02D1D004 MOV X0, X22
	0x02D1D008 MOV X1, X31
	0x02D1D00C BL 0x32EE2E0
	0x02D1D010 LDR X8, [X24]
	0x02D1D014 MOV X22, X0
	0x02D1D018 LDR W9, [X8 + 0xE0]
	0x02D1D01C CBNZ W9, 0x2D1D028
	0x02D1D020 MOV X0, X8
	0x02D1D024 BL 0x1C16DFC
	0x02D1D028 MOV X0, X22
	0x02D1D02C MOV X1, X31
	0x02D1D030 BL 0x32E51AC
	0x02D1D034 LDR X8, [X19 + 0x20]
	0x02D1D038 MOV X22, X0
	0x02D1D03C MOVZ W1, 0x8
	0x02D1D040 LDR X8, [X8 + 0xC0]
	0x02D1D044 LDR X8, [X8]
	0x02D1D048 LDR X8, [X8 + 0x80]
	0x02D1D04C ADD X23, X8, 0x20
	0x02D1D050 MOV X0, X23
	0x02D1D054 BL 0x1C16D14
	0x02D1D058 MOV X0, X20
	0x02D1D05C MOV X1, X23
	0x02D1D060 BL 0x1C16D18
	0x02D1D064 STR X22, [X0]
	0x02D1D068 CBNZ X21, 0x2D1D0C0
	0x02D1D06C ADRP X21, 0x1401000
	0x02D1D070 LDR X21, [X21 + 0xD38]
	0x02D1D074 LDR X0, [X21]
	0x02D1D078 LDR W8, [X0 + 0xE0]
	0x02D1D07C CBNZ W8, 0x2D1D084
	0x02D1D080 BL 0x1C16DFC
	0x02D1D084 ADRP X22, 0x16BE000
	0x02D1D088 LDRB W8, [X22 + 0x7F5]
	0x02D1D08C CBNZ W8, 0x2D1D0A4
	0x02D1D090 ADRP X0, 0x1401000
	0x02D1D094 LDR X0, [X0 + 0xD38]
	0x02D1D098 BL 0x1C16CF4
	0x02D1D09C MOVZ W8, 0x1
	0x02D1D0A0 STRB W8, [X22 + 0x7F5]
	0x02D1D0A4 LDR X0, [X21]
	0x02D1D0A8 LDR W8, [X0 + 0xE0]
	0x02D1D0AC CBNZ W8, 0x2D1D0B8

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move [X31+8], X1
	006 Move TEMP, X2
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfNotEqual {17}
	010 Move W8, 45
	011 NotImplemented "Instruction MOVK not yet implemented."
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W0, 1
	014 Move W8, 57
	015 NotImplemented "Instruction MOVK not yet implemented."
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move X8, [X19+32]
	018 Compare X8, 0
	019 JumpIfEqual {47}
	020 Move W8, [X8+17]
	021 Compare W8, 0
	022 JumpIfEqual {33}
	023 Move W8, 2
	024 NotImplemented "Instruction MOVK not yet implemented."
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W0, 1
	027 Move W8, 8
	028 NotImplemented "Instruction MOVK not yet implemented."
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move W8, 66
	031 NotImplemented "Instruction MOVK not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Add X0, X31, 8
	034 Move X1, X31
	035 Call ErrorInfo.get_RawErrno, X0
	036 Move X8, [X19]
	037 Move W1, W0
	038 Move X0, X19
	039 Move X9, [X8+520]
	040 Move X2, [X8+528]
	041 NotImplemented "Instruction BLR not yet implemented."
	042 Move X30, [X31+16]
	043 Move X19, [X31+24]
	044 And W0, W0, 1
	045 Add X31, X31, 32
	046 Return X0
	047 Call 0x1C17F20

Method: System.Boolean IsDirectoryNotFound(Interop/ErrorInfo info)

Disassembly:
	0x02D1D0B0 BL 0x1C16DFC
	0x02D1D0B4 LDR X0, [X21]
	0x02D1D0B8 LDR X8, [X0 + 0xB8]
	0x02D1D0BC LDR X21, [X8 + 0x10]
	0x02D1D0C0 LDR X8, [X19 + 0x20]
	0x02D1D0C4 ADRP X23, 0x1401000
	0x02D1D0C8 MOVZ W1, 0x8
	0x02D1D0CC LDR X8, [X8 + 0xC0]
	0x02D1D0D0 LDR X8, [X8]

ISIL:
	001 Move W8, 45
	002 NotImplemented "Instruction MOVK not yet implemented."
	003 Add W9, W8, 12
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CSET not yet implemented."
	006 NotImplemented "Instruction CMP not yet implemented."
	007 NotImplemented "Instruction CSET not yet implemented."
	008 Or W0, W9, W8
	009 Return X0

Method: System.Boolean IsAccessError(Interop/ErrorInfo info)

Disassembly:
	0x02D1D0D4 LDR X8, [X8 + 0x80]
	0x02D1D0D8 LDR X23, [X23 + 0xD60]
	0x02D1D0DC ADD X22, X8, 0x40
	0x02D1D0E0 MOV X0, X22
	0x02D1D0E4 BL 0x1C16D14
	0x02D1D0E8 MOV X0, X20
	0x02D1D0EC MOV X1, X22
	0x02D1D0F0 BL 0x1C16D18
	0x02D1D0F4 STR X21, [X0]
	0x02D1D0F8 LDR X8, [X19 + 0x20]
	0x02D1D0FC MOV X0, X20
	0x02D1D100 LDR X8, [X8 + 0xC0]
	0x02D1D104 LDR X8, [X8]
	0x02D1D108 LDR X8, [X8 + 0x80]
	0x02D1D10C ADD X1, X8, 0x20
	0x02D1D110 BL 0x1C16D18

ISIL:
	001 Move W9, 2
	002 Move X8, X0
	003 NotImplemented "Instruction MOVK not yet implemented."
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move W0, 1
	006 Move W9, 8
	007 NotImplemented "Instruction MOVK not yet implemented."
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move W9, 66
	010 NotImplemented "Instruction MOVK not yet implemented."
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move W0, W31
	013 Return X0

Method: System.IntPtr CreateDirectoryHandle(System.String path, System.Boolean ignoreNotFound = False)

Disassembly:
	0x02D1D114 LDR X8, [X19 + 0x20]
	0x02D1D118 LDR X1, [X0]
	0x02D1D11C MOV X0, X20
	0x02D1D120 MOV W2, W31
	0x02D1D124 LDR X8, [X8 + 0xC0]
	0x02D1D128 LDR X3, [X8 + 0x8]
	0x02D1D12C LDR X8, [X3]
	0x02D1D130 BLR X8
	0x02D1D134 LDR X8, [X19 + 0x20]
	0x02D1D138 MOV X21, X0
	0x02D1D13C MOVZ W1, 0x8
	0x02D1D140 LDR X8, [X8 + 0xC0]
	0x02D1D144 LDR X8, [X8]
	0x02D1D148 LDR X8, [X8 + 0x80]
	0x02D1D14C ADD X22, X8, 0xA0
	0x02D1D150 MOV X0, X22
	0x02D1D154 BL 0x1C16D14
	0x02D1D158 MOV X0, X20
	0x02D1D15C MOV X1, X22
	0x02D1D160 BL 0x1C16D18
	0x02D1D164 STR X21, [X0]
	0x02D1D168 LDR X8, [X19 + 0x20]
	0x02D1D16C MOV X0, X20
	0x02D1D170 LDR X8, [X8 + 0xC0]
	0x02D1D174 LDR X8, [X8]
	0x02D1D178 LDR X8, [X8 + 0x80]
	0x02D1D17C ADD X1, X8, 0xA0
	0x02D1D180 BL 0x1C16D18
	0x02D1D184 LDR X0, [X0]
	0x02D1D188 MOV X1, X31
	0x02D1D18C MOV X2, X31
	0x02D1D190 BL 0x33BE5B0
	0x02D1D194 TBZ X0, 0x0, 0x2D1D1CC
	0x02D1D198 LDR X8, [X19 + 0x20]
	0x02D1D19C MOVZ W1, 0x1
	0x02D1D1A0 MOVZ W22, 0x1
	0x02D1D1A4 LDR X8, [X8 + 0xC0]
	0x02D1D1A8 LDR X8, [X8]
	0x02D1D1AC LDR X8, [X8 + 0x80]
	0x02D1D1B0 ADD X21, X8, 0xC0
	0x02D1D1B4 MOV X0, X21
	0x02D1D1B8 BL 0x1C16D14
	0x02D1D1BC MOV X0, X20
	0x02D1D1C0 MOV X1, X21
	0x02D1D1C4 BL 0x1C16D18
	0x02D1D1C8 STRB W22, [X0]
	0x02D1D1CC LDR X8, [X19 + 0x20]
	0x02D1D1D0 MOV X0, X20
	0x02D1D1D4 LDR X8, [X8 + 0xC0]
	0x02D1D1D8 LDR X8, [X8]
	0x02D1D1DC LDR X8, [X8 + 0x80]
	0x02D1D1E0 ADD X1, X8, 0x20
	0x02D1D1E4 BL 0x1C16D18
	0x02D1D1E8 LDR X8, [X19 + 0x20]
	0x02D1D1EC LDR X22, [X0]
	0x02D1D1F0 MOVZ W1, 0x8
	0x02D1D1F4 LDR X8, [X8 + 0xC0]
	0x02D1D1F8 LDR X8, [X8]
	0x02D1D1FC LDR X8, [X8 + 0x80]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x16BF000
	009 Move X23, 0x1402000
	010 Move W8, [X24+1995]
	011 Move X23, [X23+3448]
	012 Move X19, X3
	013 Move W21, W2
	014 Move X20, X1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x1402000
	021 Move X0, [X0+3448]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+1995], W8
	025 Move X0, [X23]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X31
	032 Call Sys.OpenDir, X0
	033 Move X1, X31
	034 Move X2, X31
	035 Move X24, X0
	036 Call IntPtr.op_Equality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {61}
	041 Move X0, [X23]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move X0, X31
	047 Call Sys.GetLastErrorInfo
	048 Move X8, [X19+32]
	049 Move X23, X0
	050 And W2, W21, 1
	051 Move X0, X22
	052 Move X8, [X8+192]
	053 Move X1, X23
	054 Move X3, [X8+56]
	055 Call 0x2D1CFFC, X0, X1, X2
	056 Move X24, X31
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {70}
	061 Move X0, X24
	062 Move X20, [X31+48]
	063 Move X19, [X31+56]
	064 Move X22, [X31+32]
	065 Move X21, [X31+40]
	066 Move X24, [X31+16]
	067 Move X23, [X31+24]
	068 Move X30, [X31+64]
	069 Return X0
	070 Move W2, 1
	071 Move X0, X23
	072 Move X1, X20
	073 Move X3, X31
	074 Call Interop.GetExceptionForIoErrno, X0, X1, X2
	075 Move X1, X19
	076 Call 0x1C17DEC

Method: System.Void CloseDirectoryHandle()

Disassembly:
	0x02D1D200 ADD X21, X8, 0x80
	0x02D1D204 MOV X0, X21
	0x02D1D208 BL 0x1C16D14
	0x02D1D20C MOV X0, X20
	0x02D1D210 MOV X1, X21
	0x02D1D214 BL 0x1C16D18
	0x02D1D218 STR X22, [X0]
	0x02D1D21C LDR X0, [X23]
	0x02D1D220 LDR W8, [X0 + 0xE0]
	0x02D1D224 CBNZ W8, 0x2D1D22C
	0x02D1D228 BL 0x1C16DFC
	0x02D1D22C ADRP X8, 0x1401000
	0x02D1D230 LDR X8, [X8 + 0xD58]
	0x02D1D234 LDR X21, [X8]
	0x02D1D238 LDR X0, [X21 + 0x20]
	0x02D1D23C LDRB W8, [X0 + 0x135]
	0x02D1D240 TBNZ X8, 0x0, 0x2D1D248
	0x02D1D244 BL 0x1C5C684
	0x02D1D248 LDR X8, [X0 + 0xC0]
	0x02D1D24C LDR X0, [X8 + 0x8]
	0x02D1D250 LDRB W8, [X0 + 0x135]
	0x02D1D254 TBNZ X8, 0x0, 0x2D1D25C
	0x02D1D258 BL 0x1C5C684
	0x02D1D25C LDR W8, [X0 + 0xE0]
	0x02D1D260 CBNZ W8, 0x2D1D268
	0x02D1D264 BL 0x1C16DFC
	0x02D1D268 LDR X0, [X21 + 0x20]
	0x02D1D26C LDRB W8, [X0 + 0x135]
	0x02D1D270 TBNZ X8, 0x0, 0x2D1D278
	0x02D1D274 BL 0x1C5C684
	0x02D1D278 LDR X8, [X0 + 0xC0]
	0x02D1D27C LDR X0, [X8 + 0x8]
	0x02D1D280 LDRB W8, [X0 + 0x135]
	0x02D1D284 TBNZ X8, 0x0, 0x2D1D28C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x16BF000
	005 Move W8, [X20+1996]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x1402000
	012 Move X0, [X0+3448]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1996], W8
	016 Add X0, X19, 56
	017 Move X1, X31
	018 Move X2, X31
	019 Call Interlocked.Exchange, X0, X1
	020 Move X1, X31
	021 Move X2, X31
	022 Move X19, X0
	023 Call IntPtr.op_Inequality, X0, X1
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {42}
	028 Move X8, 0x1402000
	029 Move X8, [X8+3448]
	030 Move X0, [X8]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X1, X31
	039 Move X30, [X31+32]
	040 Call Sys.CloseDir, X0
	041 Return 
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Return 

Method: System.Boolean MoveNext()

Disassembly:
	0x02D1D288 BL 0x1C5C684
	0x02D1D28C LDR X8, [X0 + 0xB8]
	0x02D1D290 LDR X0, [X8]
	0x02D1D294 CBZ X0, 0x2D1D42C
	0x02D1D298 LDR X8, [X0]
	0x02D1D29C LDP X9, X2, [X8 + 0x178]
	0x02D1D2A0 MOVZ W1, 0x1000
	0x02D1D2A4 BLR X9
	0x02D1D2A8 LDR X8, [X19 + 0x20]
	0x02D1D2AC MOV X21, X0
	0x02D1D2B0 LDR X8, [X8 + 0xC0]
	0x02D1D2B4 LDR X8, [X8]
	0x02D1D2B8 LDR X8, [X8 + 0x80]
	0x02D1D2BC ADD X22, X8, 0x140
	0x02D1D2C0 MOVZ W1, 0x8
	0x02D1D2C4 MOV X0, X22
	0x02D1D2C8 BL 0x1C16D14
	0x02D1D2CC MOV X0, X20
	0x02D1D2D0 MOV X1, X22
	0x02D1D2D4 BL 0x1C16D18
	0x02D1D2D8 ADRP X8, 0x1401000
	0x02D1D2DC LDR X8, [X8 + 0xD78]
	0x02D1D2E0 STR X21, [X0]
	0x02D1D2E4 LDR X0, [X8]
	0x02D1D2E8 LDR W8, [X0 + 0xE0]
	0x02D1D2EC CBNZ W8, 0x2D1D2F4
	0x02D1D2F0 BL 0x1C16DFC
	0x02D1D2F4 MOV X0, X31
	0x02D1D2F8 BL 0x32099F4
	0x02D1D2FC MOV W21, W0
	0x02D1D300 CMP W0, 0x0
	0x02D1D304 B.LE 0x2D1D3A4
	0x02D1D308 ADRP X8, 0x1401000
	0x02D1D30C LDR X8, [X8 + 0xD68]
	0x02D1D310 LDR X0, [X8]
	0x02D1D314 LDR W8, [X0 + 0xE0]
	0x02D1D318 CBNZ W8, 0x2D1D320
	0x02D1D31C BL 0x1C16DFC
	0x02D1D320 ADRP X8, 0x1401000
	0x02D1D324 LDR X8, [X8 + 0xD50]
	0x02D1D328 LDR X22, [X8]
	0x02D1D32C LDR X0, [X22 + 0x20]
	0x02D1D330 LDRB W8, [X0 + 0x135]
	0x02D1D334 TBNZ X8, 0x0, 0x2D1D33C
	0x02D1D338 BL 0x1C5C684
	0x02D1D33C LDR X8, [X0 + 0xC0]
	0x02D1D340 LDR X0, [X8 + 0x8]
	0x02D1D344 LDRB W8, [X0 + 0x135]
	0x02D1D348 TBNZ X8, 0x0, 0x2D1D350
	0x02D1D34C BL 0x1C5C684
	0x02D1D350 LDR W8, [X0 + 0xE0]
	0x02D1D354 CBNZ W8, 0x2D1D35C
	0x02D1D358 BL 0x1C16DFC
	0x02D1D35C LDR X0, [X22 + 0x20]
	0x02D1D360 LDRB W8, [X0 + 0x135]
	0x02D1D364 TBNZ X8, 0x0, 0x2D1D36C
	0x02D1D368 BL 0x1C5C684
	0x02D1D36C LDR X8, [X0 + 0xC0]
	0x02D1D370 LDR X0, [X8 + 0x8]
	0x02D1D374 LDRB W8, [X0 + 0x135]
	0x02D1D378 TBNZ X8, 0x0, 0x2D1D380
	0x02D1D37C BL 0x1C5C684
	0x02D1D380 LDR X8, [X0 + 0xB8]
	0x02D1D384 LDR X0, [X8]
	0x02D1D388 CBZ X0, 0x2D1D430
	0x02D1D38C LDR X8, [X0]
	0x02D1D390 LDP X9, X2, [X8 + 0x178]
	0x02D1D394 MOV W1, W21
	0x02D1D398 BLR X9
	0x02D1D39C MOV X21, X0
	0x02D1D3A0 B 0x2D1D3A8
	0x02D1D3A4 MOV X21, X31
	0x02D1D3A8 LDR X8, [X19 + 0x20]
	0x02D1D3AC LDR X8, [X8 + 0xC0]
	0x02D1D3B0 LDR X8, [X8]
	0x02D1D3B4 LDR X8, [X8 + 0x80]
	0x02D1D3B8 ADD X22, X8, 0x160
	0x02D1D3BC MOVZ W1, 0x8
	0x02D1D3C0 MOV X0, X22
	0x02D1D3C4 BL 0x1C16D14
	0x02D1D3C8 MOV X0, X20
	0x02D1D3CC MOV X1, X22
	0x02D1D3D0 BL 0x1C16D18
	0x02D1D3D4 STR X21, [X0]
	0x02D1D3D8 LDP X20, X19, [X31 + 0x30]
	0x02D1D3DC LDP X22, X21, [X31 + 0x20]
	0x02D1D3E0 LDP X24, X23, [X31 + 0x10]
	0x02D1D3E4 LDP X30, X25, [X31], #0x40
	0x02D1D3E8 RET
	0x02D1D3EC ADRP X0, 0x13DB000
	0x02D1D3F0 LDR X0, [X0 + 0x528]
	0x02D1D3F4 BL 0x1C16D08
	0x02D1D3F8 BL 0x1C16F10
	0x02D1D3FC MOV X20, X0
	0x02D1D400 ADRP X0, 0x1401000
	0x02D1D404 LDR X0, [X0 + 0xD40]
	0x02D1D408 BL 0x1C16D08
	0x02D1D40C MOV X1, X0
	0x02D1D410 MOV X0, X20
	0x02D1D414 MOV X2, X31
	0x02D1D418 BL 0x330E100
	0x02D1D41C MOV X0, X20
	0x02D1D420 MOV X1, X19
	0x02D1D424 BL 0x1C16DEC
	0x02D1D428 BL 0x1C16F20
	0x02D1D42C BL 0x1C16F20
	0x02D1D430 BL 0x1C16F20
	0x02D1D434 B 0x2D1D44C
	0x02D1D438 B 0x2D1D44C
	0x02D1D43C B 0x2D1D44C
	0x02D1D440 B 0x2D1D44C
	0x02D1D444 B 0x2D1D44C
	0x02D1D448 B 0x2D1D44C
	0x02D1D44C MOV X21, X0
	0x02D1D450 CMP W1, 0x1
	0x02D1D454 B.NE 0x2D1D4D0
	0x02D1D458 MOV X0, X21
	0x02D1D45C BL 0x3EB1AD0
	0x02D1D460 MOV X21, X0
	0x02D1D464 ADRP X0, 0x13DC000
	0x02D1D468 LDR X0, [X0 + 0xCC0]
	0x02D1D46C BL 0x1C16D08
	0x02D1D470 LDR X8, [X21]
	0x02D1D474 LDR X1, [X8]
	0x02D1D478 BL 0x1C17270
	0x02D1D47C TBZ X0, 0x0, 0x2D1D4A8
	0x02D1D480 LDR X21, [X21]
	0x02D1D484 BL 0x3EB1AE0
	0x02D1D488 LDR X8, [X19 + 0x20]
	0x02D1D48C MOV X0, X20
	0x02D1D490 LDR X8, [X8 + 0xC0]
	0x02D1D494 LDR X1, [X8 + 0x10]
	0x02D1D498 LDR X8, [X1]
	0x02D1D49C BLR X8
	0x02D1D4A0 MOV X0, X21
	0x02D1D4A4 BL 0x1C16F18
	0x02D1D4A8 MOVZ W0, 0x8
	0x02D1D4AC BL 0x3EB1AF0
	0x02D1D4B0 LDR X8, [X21]
	0x02D1D4B4 STR X8, [X0]
	0x02D1D4B8 ADRP X1, 0x1197000
	0x02D1D4BC ADD X1, X1, 0xE58
	0x02D1D4C0 MOV X2, X31
	0x02D1D4C4 BL 0x3EB1B00
	0x02D1D4C8 MOV X21, X0
	0x02D1D4CC BL 0x3EB1AE0
	0x02D1D4D0 MOV X0, X21
	0x02D1D4D4 BL 0x1D2C690
	0x02D1D4D8 BL 0x1990590
	0x02D1D4DC SUB X31, X31, 0x30
	0x02D1D4E0 STP X30, X21, [X31 + 0x10]
	0x02D1D4E4 STP X20, X19, [X31 + 0x20]
	0x02D1D4E8 MOV X21, X3
	0x02D1D4EC MOV X20, X1
	0x02D1D4F0 MOV X19, X0
	0x02D1D4F4 STR X1, [X31 + 0x8]
	0x02D1D4F8 TBZ X2, 0x0, 0x2D1D518
	0x02D1D4FC LDR X8, [X21 + 0x20]
	0x02D1D500 MOV X0, X20
	0x02D1D504 LDR X8, [X8 + 0xC0]
	0x02D1D508 LDR X1, [X8 + 0x18]
	0x02D1D50C LDR X8, [X1]
	0x02D1D510 BLR X8
	0x02D1D514 TBNZ X0, 0x0, 0x2D1D560
	0x02D1D518 LDR X8, [X21 + 0x20]
	0x02D1D51C MOV X0, X19
	0x02D1D520 LDR X8, [X8 + 0xC0]
	0x02D1D524 LDR X8, [X8]
	0x02D1D528 LDR X8, [X8 + 0x80]
	0x02D1D52C ADD X1, X8, 0x40
	0x02D1D530 BL 0x1C16D18
	0x02D1D534 LDR X8, [X0]
	0x02D1D538 CBZ X8, 0x2D1D5A0
	0x02D1D53C LDRB W8, [X8 + 0x11]
	0x02D1D540 CBZ W8, 0x2D1D568
	0x02D1D544 LDR X8, [X21 + 0x20]
	0x02D1D548 MOV X0, X20
	0x02D1D54C LDR X8, [X8 + 0xC0]
	0x02D1D550 LDR X1, [X8 + 0x28]
	0x02D1D554 LDR X8, [X1]
	0x02D1D558 BLR X8
	0x02D1D55C TBZ X0, 0x0, 0x2D1D568
	0x02D1D560 MOVZ W0, 0x1
	0x02D1D564 B 0x2D1D58C
	0x02D1D568 ADD X0, X31, 0x8
	0x02D1D56C MOV X1, X31
	0x02D1D570 BL 0x32095C8
	0x02D1D574 LDR X8, [X19]
	0x02D1D578 MOV W1, W0
	0x02D1D57C MOV X0, X19
	0x02D1D580 LDR X9, [X8 + 0x208]
	0x02D1D584 LDR X2, [X8 + 0x210]
	0x02D1D588 BLR X9
	0x02D1D58C LDP X20, X19, [X31 + 0x20]
	0x02D1D590 LDP X30, X21, [X31 + 0x10]
	0x02D1D594 AND W0, W0, 0x1
	0x02D1D598 ADD X31, X31, 0x30
	0x02D1D59C RET
	0x02D1D5A0 BL 0x1C16F20
	0x02D1D5A4 MOVZ W8, 0x2D
	0x02D1D5A8 MOVK W8, 0x10000
	0x02D1D5AC ADD W9, W8, 0xC
	0x02D1D5B0 CMP W0, W9
	0x02D1D5B4 CSET W9, EQ
	0x02D1D5B8 CMP W0, W8
	0x02D1D5BC CSET W8, EQ
	0x02D1D5C0 ORR W0, W9, W8, 0x0
	0x02D1D5C4 RET
	0x02D1D5C8 MOVZ W9, 0x2
	0x02D1D5CC MOV X8, X0
	0x02D1D5D0 MOVK W9, 0x10000
	0x02D1D5D4 CMP W8, W9
	0x02D1D5D8 MOVZ W0, 0x1
	0x02D1D5DC B.EQ 0x2D1D604
	0x02D1D5E0 MOVZ W9, 0x8
	0x02D1D5E4 MOVK W9, 0x10000
	0x02D1D5E8 CMP W8, W9
	0x02D1D5EC B.EQ 0x2D1D604
	0x02D1D5F0 MOVZ W9, 0x42
	0x02D1D5F4 MOVK W9, 0x10000
	0x02D1D5F8 CMP W8, W9
	0x02D1D5FC B.EQ 0x2D1D604
	0x02D1D600 MOV W0, W31
	0x02D1D604 RET
	0x02D1D608 STR X30, [X31 - 0x40]!
	0x02D1D60C STP X24, X23, [X31 + 0x10]
	0x02D1D610 STP X22, X21, [X31 + 0x20]
	0x02D1D614 STP X20, X19, [X31 + 0x30]
	0x02D1D618 ADRP X24, 0x16BE000
	0x02D1D61C ADRP X23, 0x1401000
	0x02D1D620 LDRB W8, [X24 + 0x7D3]
	0x02D1D624 LDR X23, [X23 + 0xD78]
	0x02D1D628 MOV X19, X3
	0x02D1D62C MOV W21, W2
	0x02D1D630 MOV X20, X1
	0x02D1D634 MOV X22, X0
	0x02D1D638 TBNZ X8, 0x0, 0x2D1D650
	0x02D1D63C ADRP X0, 0x1401000
	0x02D1D640 LDR X0, [X0 + 0xD78]
	0x02D1D644 BL 0x1C16CF4
	0x02D1D648 MOVZ W8, 0x1
	0x02D1D64C STRB W8, [X24 + 0x7D3]
	0x02D1D650 LDR X0, [X23]
	0x02D1D654 LDR W8, [X0 + 0xE0]
	0x02D1D658 CBNZ W8, 0x2D1D660
	0x02D1D65C BL 0x1C16DFC
	0x02D1D660 MOV X0, X20
	0x02D1D664 MOV X1, X31
	0x02D1D668 BL 0x32099C0
	0x02D1D66C MOV X1, X31
	0x02D1D670 MOV X2, X31
	0x02D1D674 MOV X24, X0
	0x02D1D678 BL 0x33BE5B0
	0x02D1D67C TBZ X0, 0x0, 0x2D1D6C4
	0x02D1D680 LDR X0, [X23]
	0x02D1D684 LDR W8, [X0 + 0xE0]
	0x02D1D688 CBNZ W8, 0x2D1D690
	0x02D1D68C BL 0x1C16DFC
	0x02D1D690 MOV X0, X31
	0x02D1D694 BL 0x3209954
	0x02D1D698 LDR X8, [X19 + 0x20]
	0x02D1D69C MOV X23, X0
	0x02D1D6A0 AND W2, W21, 0x1
	0x02D1D6A4 MOV X0, X22
	0x02D1D6A8 LDR X8, [X8 + 0xC0]
	0x02D1D6AC MOV X1, X23
	0x02D1D6B0 LDR X3, [X8 + 0x38]
	0x02D1D6B4 LDR X8, [X3]
	0x02D1D6B8 BLR X8
	0x02D1D6BC MOV X24, X31
	0x02D1D6C0 TBZ X0, 0x0, 0x2D1D6DC
	0x02D1D6C4 MOV X0, X24
	0x02D1D6C8 LDP X20, X19, [X31 + 0x30]
	0x02D1D6CC LDP X22, X21, [X31 + 0x20]
	0x02D1D6D0 LDP X24, X23, [X31 + 0x10]
	0x02D1D6D4 LDR X30, [X31], #0x40
	0x02D1D6D8 RET
	0x02D1D6DC MOVZ W2, 0x1
	0x02D1D6E0 MOV X0, X23
	0x02D1D6E4 MOV X1, X20
	0x02D1D6E8 MOV X3, X31
	0x02D1D6EC BL 0x3208FE8
	0x02D1D6F0 MOV X1, X19
	0x02D1D6F4 BL 0x1C16DEC
	0x02D1D6F8 STP X30, X21, [X31 - 0x20]!
	0x02D1D6FC STP X20, X19, [X31 + 0x10]
	0x02D1D700 ADRP X21, 0x16BE000
	0x02D1D704 LDRB W8, [X21 + 0x7D4]
	0x02D1D708 MOV X20, X1
	0x02D1D70C MOV X19, X0
	0x02D1D710 TBNZ X8, 0x0, 0x2D1D728
	0x02D1D714 ADRP X0, 0x1401000
	0x02D1D718 LDR X0, [X0 + 0xD78]
	0x02D1D71C BL 0x1C16CF4
	0x02D1D720 MOVZ W8, 0x1
	0x02D1D724 STRB W8, [X21 + 0x7D4]
	0x02D1D728 LDR X8, [X20 + 0x20]
	0x02D1D72C MOV X0, X19
	0x02D1D730 LDR X8, [X8 + 0xC0]
	0x02D1D734 LDR X8, [X8]
	0x02D1D738 LDR X8, [X8 + 0x80]
	0x02D1D73C ADD X1, X8, 0xA0
	0x02D1D740 BL 0x1C16D18
	0x02D1D744 MOV X1, X31
	0x02D1D748 MOV X2, X31
	0x02D1D74C BL 0x33EB190
	0x02D1D750 MOV X1, X31
	0x02D1D754 MOV X2, X31
	0x02D1D758 MOV X19, X0
	0x02D1D75C BL 0x33C5D2C
	0x02D1D760 TBZ X0, 0x0, 0x2D1D790
	0x02D1D764 ADRP X8, 0x1401000
	0x02D1D768 LDR X8, [X8 + 0xD78]
	0x02D1D76C LDR X0, [X8]
	0x02D1D770 LDR W8, [X0 + 0xE0]
	0x02D1D774 CBNZ W8, 0x2D1D77C
	0x02D1D778 BL 0x1C16DFC
	0x02D1D77C MOV X0, X19
	0x02D1D780 LDP X20, X19, [X31 + 0x10]
	0x02D1D784 MOV X1, X31
	0x02D1D788 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Subtract X31, X31, 832
	014 NotImplemented "Instruction MRS not yet implemented."
	015 Move [X31+56], X8
	016 Move X8, [X8+40]
	017 Move X19, 0x16BF000
	018 Move X21, X1
	019 Move X20, X0
	020 Move [X31+824], X8
	021 Move W8, [X19+1997]
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {43}
	026 Move X0, 0x13FE000
	027 Move X0, [X0+464]
	028 Call 0x1C17CF4
	029 Move X0, 0x1402000
	030 Move X0, [X0+3456]
	031 Call 0x1C17CF4
	032 Move X0, 0x1402000
	033 Move X0, [X0+3464]
	034 Call 0x1C17CF4
	035 Move X0, 0x1402000
	036 Move X0, [X0+3472]
	037 Call 0x1C17CF4
	038 Move X0, 0x1402000
	039 Move X0, [X0+3480]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X19+1997], W8
	043 Move W8, [X20+64]
	044 Compare W8, 0
	045 JumpIfEqual {47}
	046 Move W19, W31
	047 Add X0, X31, 72
	048 Move W2, 752
	049 Move W1, W31
	050 Call 0x3EB2B10
	051 Move X0, [X20+40]
	052 Move [X31+68], W31
	053 Add X1, X31, 68
	054 Move X2, X31
	055 Move [X31+48], X0
	056 Call Monitor.Enter, X0, X1
	057 Move W8, [X20+64]
	058 Compare W8, 0
	059 JumpIfEqual {89}
	060 Move X21, X31
	061 Move W19, W31
	062 Move W8, [X31+68]
	063 Compare W8, 0
	064 JumpIfEqual {68}
	065 Move X0, [X31+48]
	066 Move X1, X31
	067 Call Monitor.Exit, X0
	068 Compare X21, 0
	069 JumpIfNotEqual {332}
	070 Move X8, [X31+56]
	071 Move X8, [X8+40]
	072 Move X9, [X31+824]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move W0, W19
	075 Add X31, X31, 832
	076 Move X20, [X31+80]
	077 Move X19, [X31+88]
	078 Move X22, [X31+64]
	079 Move X21, [X31+72]
	080 Move X24, [X31+48]
	081 Move X23, [X31+56]
	082 Move X26, [X31+32]
	083 Move X25, [X31+40]
	084 Move X28, [X31+16]
	085 Move X27, [X31+24]
	086 Move X29, [X31+96]
	087 Move X30, [X31+104]
	088 Return X0
	089 Move X8, [X20+112]
	090 Compare X8, 0
	091 JumpIfEqual {96}
	092 Move W9, [X8+24]
	093 Add X10, X8, 32
	094 NotImplemented "Instruction CMP not yet implemented."
	095 NotImplemented "Instruction CSEL not yet implemented."
	096 Move X22, X31
	097 Move X23, 0x16BD000
	098 Compare X8, 0
	099 JumpIfEqual {101}
	100 Move W2, [X8+24]
	101 Move W2, W31
	102 Move X8, [X21+32]
	103 Move X8, [X8+192]
	104 Move X3, [X8+64]
	105 Move X0, X20
	106 Move X1, X22
	107 Call 0x2D1D7C0, X0, X1, X2
	108 Move W8, [X20+64]
	109 Compare W8, 0
	110 JumpIfNotEqual {60}
	111 Move X24, [X20+80]
	112 Move X25, [X20+88]
	113 Move W8, [X23+1890]
	114 Move X19, [X20+48]
	115 Compare W8, 0
	116 JumpIfEqual {156}
	117 Compare X19, 0
	118 JumpIfEqual {163}
	119 Move X0, X19
	120 Move X1, X31
	121 Call String.GetRawStringData, X0
	122 Move W27, [X19+16]
	123 Move W8, [X23+1890]
	124 Move X29, [X20+24]
	125 Move X26, X0
	126 Compare W8, 0
	127 JumpIfNotEqual {133}
	128 Move X0, 0x13FE000
	129 Move X0, [X0+656]
	130 Call 0x1C17CF4
	131 Move W8, 1
	132 Move [X23+1890], W8
	133 Compare X29, 0
	134 JumpIfEqual {168}
	135 Move X0, X29
	136 Move X1, X31
	137 Call String.GetRawStringData, X0
	138 Move W29, [X29+16]
	139 Move W8, [X23+1890]
	140 Move X19, [X20+16]
	141 Move X28, X0
	142 Compare W8, 0
	143 JumpIfNotEqual {149}
	144 Move X0, 0x13FE000
	145 Move X0, [X0+656]
	146 Call 0x1C17CF4
	147 Move W8, 1
	148 Move [X23+1890], W8
	149 Compare X19, 0
	150 JumpIfEqual {172}
	151 Move X0, X19
	152 Move X1, X31
	153 Call String.GetRawStringData, X0
	154 Move W9, [X19+16]
	155 Move X8, X0
	156 Move X0, 0x13FE000
	157 Move X0, [X0+656]
	158 Call 0x1C17CF4
	159 Move W8, 1
	160 Move [X23+1890], W8
	161 Compare X19, 0
	162 JumpIfNotEqual {119}
	163 Move X29, [X20+24]
	164 Move X26, X31
	165 Move X27, X31
	166 Compare X29, 0
	167 JumpIfNotEqual {135}
	168 Move X19, [X20+16]
	169 Move X28, X31
	170 Compare X19, 0
	171 JumpIfNotEqual {151}
	172 Move X8, X31
	173 Move X9, X31
	174 Move X10, [X20+104]
	175 Compare X10, 0
	176 JumpIfEqual {179}
	177 Move W11, [X10+24]
	178 Add X10, X10, 32
	179 Move X11, X31
	180 Add X0, X31, 72
	181 Move X1, X24
	182 Move X2, X25
	183 Move X3, X26
	184 Move X4, X27
	185 Move X5, X28
	186 Move X6, X29
	187 Move [X31+24], X11
	188 Move [X31+32], X31
	189 Move [X31+8], X9
	190 Move [X31+16], X10
	191 Move [X31], X8
	192 Call FileSystemEntry.Initialize, X0, X1, X2, X3, X4, X5
	193 Move W24, W0
	194 Move TEMP, X0
	195 And TEMP, TEMP, 16
	196 Compare TEMP, 16
	197 JumpIfNotEqual {208}
	198 Move X8, [X20+80]
	199 Move W9, [X8]
	200 NotImplemented "Instruction CMP not yet implemented."
	201 Move W9, [X8+1]
	202 Compare W9, 0
	203 JumpIfEqual {268}
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Move W8, [X8+2]
	206 Compare W8, 0
	207 JumpIfEqual {268}
	208 Move X8, [X20+32]
	209 Compare X8, 0
	210 JumpIfEqual {330}
	211 Move W9, [X8+20]
	212 Compare W9, 0
	213 JumpIfEqual {227}
	214 Move W0, W24
	215 Move TEMP, X9
	216 And TEMP, TEMP, 1
	217 Compare TEMP, 1
	218 JumpIfNotEqual {225}
	219 Add X0, X31, 72
	220 Move X1, X31
	221 Call FileSystemEntry.get_Attributes, X0
	222 Move X8, [X20+32]
	223 Compare X8, 0
	224 JumpIfEqual {331}
	225 Move W9, [X8+20]
	226 And W31, W9, W0
	227 Move TEMP, X24
	228 And TEMP, TEMP, 16
	229 Compare TEMP, 16
	230 JumpIfNotEqual {308}
	231 Move W8, [X8+16]
	232 Compare W8, 0
	233 JumpIfEqual {308}
	234 Move X8, [X20]
	235 Move X9, [X8+472]
	236 Move X2, [X8+480]
	237 Add X1, X31, 72
	238 Move X0, X20
	239 NotImplemented "Instruction BLR not yet implemented."
	240 Move TEMP, X0
	241 And TEMP, TEMP, 1
	242 Compare TEMP, 1
	243 JumpIfNotEqual {308}
	244 Move X24, [X20+72]
	245 Compare X24, 0
	246 JumpIfNotEqual {257}
	247 Move X8, 0x1402000
	248 Move X8, [X8+3472]
	249 Move X0, [X8]
	250 Call 0x1C17F10
	251 Move X8, 0x1402000
	252 Move X8, [X8+3464]
	253 Move X24, X0
	254 Move X1, [X8]
	255 Call Queue`1<Object>..ctor, X0
	256 Move [X20+72], X24
	257 Move W8, [X23+1890]
	258 Move X25, [X20+48]
	259 Compare W8, 0
	260 JumpIfEqual {274}
	261 Compare X25, 0
	262 JumpIfEqual {281}
	263 Move X0, X25
	264 Move X1, X31
	265 Call String.GetRawStringData, X0
	266 Move W25, [X25+16]
	267 Move X19, X0
	268 Move X8, [X20+32]
	269 Compare X8, 0
	270 JumpIfEqual {334}
	271 Move W8, [X8+32]
	272 Compare W8, 0
	273 JumpIfNotEqual {308}
	274 Move X0, 0x13FE000
	275 Move X0, [X0+656]
	276 Call 0x1C17CF4
	277 Move W8, 1
	278 Move [X23+1890], W8
	279 Compare X25, 0
	280 JumpIfNotEqual {263}
	281 Move X19, X31
	282 Add X0, X31, 72
	283 Move X1, X31
	284 Call FileSystemEntry.get_FileName, X0
	285 Move X8, 0x13FE000
	286 Move X8, [X8+464]
	287 Move X26, X0
	288 Move X27, X1
	289 Move X0, [X8]
	290 Move W8, [X0+224]
	291 Compare W8, 0
	292 JumpIfNotEqual {294}
	293 Call 0x1C17DFC
	294 Move X0, X19
	295 Move X1, X25
	296 Move X2, X26
	297 Move X3, X27
	298 Move X4, X31
	299 Call Path.Join, X0, X1
	300 Move X1, X0
	301 Compare X24, 0
	302 JumpIfEqual {335}
	303 Move X8, 0x1402000
	304 Move X8, [X8+3456]
	305 Move X2, [X8]
	306 Move X0, X24
	307 Call Queue`1<Object>.Enqueue, X0, X1
	308 Move X8, [X20]
	309 Move X9, [X8+456]
	310 Move X2, [X8+464]
	311 Add X1, X31, 72
	312 Move X0, X20
	313 NotImplemented "Instruction BLR not yet implemented."
	314 Move TEMP, X0
	315 And TEMP, TEMP, 1
	316 Compare TEMP, 1
	317 JumpIfEqual {321}
	318 Move X8, [X20+112]
	319 Compare X8, 0
	320 JumpIfNotEqual {100}
	321 Move X8, [X20]
	322 Move X9, [X8+488]
	323 Move X2, [X8+496]
	324 Add X1, X31, 72
	325 Move X0, X20
	326 NotImplemented "Instruction BLR not yet implemented."
	327 Move X21, X31
	328 Move [X20+96], X0
	329 Move W19, 1
	330 Call 0x1C17F20
	331 Call 0x1C17F20
	332 Move X0, X21
	333 Call 0x1C17F18
	334 Call 0x1C17F20
	335 Call 0x1C17F20
	336 Call 0x3EB2B20
	337 Move X20, X0
	338 NotImplemented "Instruction CMP not yet implemented."
	339 Move X0, X20
	340 Call 0x3EB2AD0
	341 Move X21, [X0]
	342 Call 0x3EB2AE0
	343 Move X21, X31
	344 Move X20, X0
	345 Move W8, [X31+68]
	346 Compare W8, 0
	347 JumpIfEqual {351}
	348 Move X0, [X31+48]
	349 Move X1, X31
	350 Call Monitor.Exit, X0
	351 Compare X21, 0
	352 JumpIfNotEqual {355}
	353 Move X0, X20
	354 Call 0x1D2D690
	355 Move X0, X21
	356 Call 0x1C17F18
	357 Call 0x1991590

Method: System.Void FindNextEntry()

Disassembly:
	0x02D1D78C B 0x32099FC
	0x02D1D790 LDP X20, X19, [X31 + 0x10]
	0x02D1D794 LDP X30, X21, [X31], #0x20
	0x02D1D798 RET
	0x02D1D79C STP X29, X30, [X31 - 0x60]!
	0x02D1D7A0 STP X28, X27, [X31 + 0x10]
	0x02D1D7A4 STP X26, X25, [X31 + 0x20]
	0x02D1D7A8 STP X24, X23, [X31 + 0x30]
	0x02D1D7AC STP X22, X21, [X31 + 0x40]
	0x02D1D7B0 STP X20, X19, [X31 + 0x50]
	0x02D1D7B4 ADD X29, X31, 0x0
	0x02D1D7B8 SUB X31, X31, 0x350
	0x02D1D7BC ADD X19, X31, 0x0

ISIL:
	001 Move X8, [X0+112]
	002 Compare X8, 0
	003 JumpIfEqual {8}
	004 Move W2, [X8+24]
	005 Add X8, X8, 32
	006 NotImplemented "Instruction CMP not yet implemented."
	007 NotImplemented "Instruction CSEL not yet implemented."
	008 Move W2, W31
	009 Move X9, [X1+32]
	010 Move X1, X8
	011 Move X9, [X9+192]
	012 Move X3, [X9+64]

Method: System.Void FindNextEntry(System.Byte* entryBufferPtr, System.Int32 bufferLength)

Disassembly:
	0x02D1D7C0 MRS X8, 0xC000
	0x02D1D7C4 STR X8, [X19 + 0x20]
	0x02D1D7C8 LDR X8, [X8 + 0x28]
	0x02D1D7CC ADRP X20, 0x16BE000
	0x02D1D7D0 MOV X22, X1
	0x02D1D7D4 MOV X21, X0
	0x02D1D7D8 STUR X8, [X29 - 0x10]
	0x02D1D7DC LDRB W8, [X20 + 0x7D5]
	0x02D1D7E0 TBNZ X8, 0x0, 0x2D1D828
	0x02D1D7E4 ADRP X0, 0x13FD000
	0x02D1D7E8 LDR X0, [X0 + 0x1D0]
	0x02D1D7EC BL 0x1C16CF4
	0x02D1D7F0 ADRP X0, 0x1401000
	0x02D1D7F4 LDR X0, [X0 + 0xD80]
	0x02D1D7F8 BL 0x1C16CF4
	0x02D1D7FC ADRP X0, 0x1401000
	0x02D1D800 LDR X0, [X0 + 0xD88]
	0x02D1D804 BL 0x1C16CF4
	0x02D1D808 ADRP X0, 0x1401000
	0x02D1D80C LDR X0, [X0 + 0xD90]
	0x02D1D810 BL 0x1C16CF4
	0x02D1D814 ADRP X0, 0x1401000
	0x02D1D818 LDR X0, [X0 + 0xD98]
	0x02D1D81C BL 0x1C16CF4
	0x02D1D820 MOVZ W8, 0x1
	0x02D1D824 STRB W8, [X20 + 0x7D5]
	0x02D1D828 LDR X20, [X22 + 0x20]!
	0x02D1D82C LDR X8, [X20 + 0xC0]
	0x02D1D830 LDR X8, [X8 + 0x60]
	0x02D1D834 LDR W24, [X8 + 0xFC]
	0x02D1D838 ADD X8, X31, 0x0
	0x02D1D83C ADD X9, X24, 0xF
	0x02D1D840 AND X9, X9, 0x1FFFFFFFF
	0x02D1D844 SUB X25, X8, X9
	0x02D1D848 ADD X31, X25, 0x0
	0x02D1D84C ADD X0, X19, 0x50
	0x02D1D850 MOVZ W2, 0x2F0
	0x02D1D854 MOV W1, W31
	0x02D1D858 BL 0x3EB1B10
	0x02D1D85C STRB W31, [X19 + 0x3C]
	0x02D1D860 LDR X8, [X20 + 0xC0]
	0x02D1D864 MOV X0, X21
	0x02D1D868 LDR X8, [X8]
	0x02D1D86C LDR X8, [X8 + 0x80]
	0x02D1D870 ADD X1, X8, 0xC0
	0x02D1D874 BL 0x1C16D18
	0x02D1D878 LDRB W8, [X0]
	0x02D1D87C MOV W23, W31
	0x02D1D880 CBNZ W8, 0x2D1D910
	0x02D1D884 ADD X0, X19, 0x50
	0x02D1D888 MOVZ W2, 0x2F0
	0x02D1D88C MOV W1, W31
	0x02D1D890 STP X24, X25, [X19 + 0x8]
	0x02D1D894 BL 0x3EB1B10
	0x02D1D898 LDR X8, [X22]
	0x02D1D89C MOV X0, X21
	0x02D1D8A0 LDR X8, [X8 + 0xC0]
	0x02D1D8A4 LDR X8, [X8]
	0x02D1D8A8 LDR X8, [X8 + 0x80]
	0x02D1D8AC ADD X1, X8, 0x60
	0x02D1D8B0 BL 0x1C16D18
	0x02D1D8B4 LDR X0, [X0]
	0x02D1D8B8 STRB W31, [X19 + 0x3C]
	0x02D1D8BC ADD X1, X19, 0x3C
	0x02D1D8C0 MOV X2, X31
	0x02D1D8C4 STR X0, [X19 + 0x18]
	0x02D1D8C8 BL 0x33DE64C
	0x02D1D8CC LDR X8, [X22]
	0x02D1D8D0 LDR X8, [X8 + 0xC0]
	0x02D1D8D4 LDR X8, [X8]
	0x02D1D8D8 LDR X8, [X8 + 0x80]
	0x02D1D8DC ADD X1, X8, 0xC0
	0x02D1D8E0 MOV X0, X21
	0x02D1D8E4 BL 0x1C16D18
	0x02D1D8E8 LDRB W8, [X0]
	0x02D1D8EC CBZ W8, 0x2D1D948
	0x02D1D8F0 MOV X20, X31
	0x02D1D8F4 MOV W23, W31

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x16BF000
	009 Move X23, 0x1402000
	010 Move W8, [X24+1998]
	011 Move X23, [X23+3448]
	012 Move X19, X3
	013 Move W21, W2
	014 Move X22, X1
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x1402000
	021 Move X0, [X0+3448]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+1998], W8
	025 Move X0, [X23]
	026 Move X24, [X20+56]
	027 Add X23, X20, 80
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X24
	033 Move X1, X22
	034 Move W2, W21
	035 Move X3, X23
	036 Move X4, X31
	037 Call Sys.ReadDirR, X0, X1, X2, X3
	038 Compare W0, 0
	039 JumpIfEqual {76}
	040 Move W21, W0
	041 Add W31, W0, 1
	042 Move X8, [X19+32]
	043 Move X0, X20
	044 Move X20, [X31+48]
	045 Move X19, [X31+56]
	046 Move X22, [X31+32]
	047 Move X21, [X31+40]
	048 Move X8, [X8+192]
	049 Move X24, [X31+16]
	050 Move X23, [X31+24]
	051 Move X1, [X8+104]
	052 Move X30, [X31+64]
	053 Call 0x2D1DC94, X0
	054 Return 
	055 Add X0, X31, 8
	056 Move W1, W21
	057 Move X2, X31
	058 Move [X31+8], X31
	059 Call ErrorInfo..ctor, X0, X1
	060 Move X8, [X19+32]
	061 Move X1, [X31+8]
	062 Move X0, X20
	063 Move W2, W31
	064 Move X8, [X8+192]
	065 Move X3, [X8+56]
	066 Call 0x2D1CFFC, X0, X1, X2
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {84}
	071 Move X8, [X19+32]
	072 Move X0, X20
	073 Move X8, [X8+192]
	074 Move X1, [X8+104]
	075 Call 0x2D1DC94, X0
	076 Move X20, [X31+48]
	077 Move X19, [X31+56]
	078 Move X22, [X31+32]
	079 Move X21, [X31+40]
	080 Move X24, [X31+16]
	081 Move X23, [X31+24]
	082 Move X30, [X31+64]
	083 Return 
	084 Add X0, X31, 8
	085 Move W1, W21
	086 Move X2, X31
	087 Move [X31+8], X31
	088 Call ErrorInfo..ctor, X0, X1
	089 Move X1, [X20+48]
	090 Move X0, [X31+8]
	091 Move W2, 1
	092 Move X3, X31
	093 Call Interop.GetExceptionForIoErrno, X0, X1, X2
	094 Move X1, X19
	095 Call 0x1C17DEC

Method: System.Boolean DequeueNextDirectory()

Disassembly:
	0x02D1D8F8 LDRB W8, [X19 + 0x3C]
	0x02D1D8FC CBZ W8, 0x2D1D90C
	0x02D1D900 LDR X0, [X19 + 0x18]
	0x02D1D904 MOV X1, X31
	0x02D1D908 BL 0x33E14E4
	0x02D1D90C CBNZ X20, 0x2D1DF94
	0x02D1D910 LDR X8, [X19 + 0x20]
	0x02D1D914 LDR X8, [X8 + 0x28]
	0x02D1D918 LDUR X9, [X29 - 0x10]
	0x02D1D91C CMP X8, X9
	0x02D1D920 B.NE 0x2D1DFA4
	0x02D1D924 MOV W0, W23
	0x02D1D928 ADD X31, X29, 0x0
	0x02D1D92C LDP X20, X19, [X31 + 0x50]
	0x02D1D930 LDP X22, X21, [X31 + 0x40]
	0x02D1D934 LDP X24, X23, [X31 + 0x30]
	0x02D1D938 LDP X26, X25, [X31 + 0x20]
	0x02D1D93C LDP X28, X27, [X31 + 0x10]
	0x02D1D940 LDP X29, X30, [X31], #0x60
	0x02D1D944 RET
	0x02D1D948 LDR X8, [X22]
	0x02D1D94C LDR X8, [X8 + 0xC0]
	0x02D1D950 LDR X8, [X8]
	0x02D1D954 LDR X8, [X8 + 0x80]
	0x02D1D958 ADD X1, X8, 0x160
	0x02D1D95C MOV X0, X21
	0x02D1D960 BL 0x1C16D18
	0x02D1D964 LDR X8, [X0]
	0x02D1D968 CBZ X8, 0x2D1D984
	0x02D1D96C LDR W9, [X8 + 0x18]
	0x02D1D970 ADD X8, X8, 0x20
	0x02D1D974 CMP W9, 0x0
	0x02D1D978 CSEL X8, X31, X8, EQ
	0x02D1D97C STR X8, [X19 + 0x28]
	0x02D1D980 B 0x2D1D988
	0x02D1D984 STR X31, [X19 + 0x28]
	0x02D1D988 LDR X8, [X22]
	0x02D1D98C LDR X8, [X8 + 0xC0]
	0x02D1D990 LDR X8, [X8]
	0x02D1D994 LDR X8, [X8 + 0x80]
	0x02D1D998 ADD X1, X8, 0x160
	0x02D1D99C MOV X0, X21
	0x02D1D9A0 BL 0x1C16D18
	0x02D1D9A4 LDR X8, [X0]
	0x02D1D9A8 CBZ X8, 0x2D1D9DC
	0x02D1D9AC LDR X8, [X22]
	0x02D1D9B0 LDR X8, [X8 + 0xC0]
	0x02D1D9B4 LDR X8, [X8]
	0x02D1D9B8 LDR X8, [X8 + 0x80]
	0x02D1D9BC ADD X1, X8, 0x160
	0x02D1D9C0 MOV X0, X21
	0x02D1D9C4 BL 0x1C16D18
	0x02D1D9C8 LDR X8, [X0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x16BF000
	007 Move W8, [X21+1999]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x1402000
	015 Move X0, [X0+3488]
	016 Call 0x1C17CF4
	017 Move X0, 0x1402000
	018 Move X0, [X0+3496]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1999], W8
	022 Move X0, X31
	023 Move X1, X31
	024 Move X2, X31
	025 Move [X20+56], X31
	026 Call IntPtr.op_Equality, X0, X1
	027 Move TEMP, X0
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfNotEqual {58}
	031 Move X22, 0x1402000
	032 Move X22, [X22+3488]
	033 Move W21, 1
	034 Move X0, [X20+72]
	035 Compare X0, 0
	036 JumpIfEqual {59}
	037 Move W8, [X0+32]
	038 Compare W8, 0
	039 JumpIfEqual {59}
	040 Move X1, [X22]
	041 Call Queue`1<Object>.Dequeue, X0
	042 Move [X20+48], X0
	043 Move X8, [X19+32]
	044 Move X1, X0
	045 Move W2, 1
	046 Move X0, X20
	047 Move X8, [X8+192]
	048 Move X3, [X8+8]
	049 Call 0x2D1D114, X0, X1, X2
	050 Move X1, X31
	051 Move X2, X31
	052 Move [X20+56], X0
	053 Call IntPtr.op_Equality, X0, X1
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfEqual {34}
	058 Move W21, 1
	059 Move W21, W31
	060 Move W0, W21
	061 Move X20, [X31+32]
	062 Move X19, [X31+40]
	063 Move X22, [X31+16]
	064 Move X21, [X31+24]
	065 Move X30, [X31+48]
	066 Return X0

Method: System.Void InternalDispose(System.Boolean disposing)

Disassembly:
	0x02D1D9CC CBZ X8, 0x2D1DF84
	0x02D1D9D0 LDR W2, [X8 + 0x18]
	0x02D1D9D4 CBNZ X21, 0x2D1D9E4
	0x02D1D9D8 B 0x2D1DF7C
	0x02D1D9DC MOV W2, W31
	0x02D1D9E0 CBZ X21, 0x2D1DF7C
	0x02D1D9E4 LDR X8, [X22]
	0x02D1D9E8 LDR X8, [X8 + 0xC0]
	0x02D1D9EC LDR X3, [X8 + 0x40]
	0x02D1D9F0 LDR X8, [X3]
	0x02D1D9F4 LDR X1, [X19 + 0x28]
	0x02D1D9F8 MOV X0, X21
	0x02D1D9FC BLR X8
	0x02D1DA00 LDR X8, [X22]
	0x02D1DA04 LDR X8, [X8 + 0xC0]
	0x02D1DA08 LDR X8, [X8]
	0x02D1DA0C LDR X8, [X8 + 0x80]
	0x02D1DA10 ADD X1, X8, 0xC0
	0x02D1DA14 MOV X0, X21
	0x02D1DA18 BL 0x1C16D18
	0x02D1DA1C LDRB W8, [X0]
	0x02D1DA20 CBNZ W8, 0x2D1D8F0
	0x02D1DA24 LDR X8, [X22]
	0x02D1DA28 LDR X8, [X8 + 0xC0]
	0x02D1DA2C LDR X8, [X8]
	0x02D1DA30 LDR X8, [X8 + 0x80]
	0x02D1DA34 ADD X1, X8, 0x100
	0x02D1DA38 MOV X0, X21
	0x02D1DA3C BL 0x1C16D18
	0x02D1DA40 LDR X8, [X22]
	0x02D1DA44 LDP X28, X27, [X0]
	0x02D1DA48 LDR X8, [X8 + 0xC0]
	0x02D1DA4C LDR X8, [X8]
	0x02D1DA50 LDR X8, [X8 + 0x80]
	0x02D1DA54 ADD X1, X8, 0x80
	0x02D1DA58 MOV X0, X21
	0x02D1DA5C BL 0x1C16D18
	0x02D1DA60 ADRP X8, 0x16BC000
	0x02D1DA64 LDRB W8, [X8 + 0x762]
	0x02D1DA68 LDR X23, [X0]
	0x02D1DA6C CBZ W8, 0x2D1DA90
	0x02D1DA70 CBZ X23, 0x2D1DAAC
	0x02D1DA74 MOV X0, X23
	0x02D1DA78 MOV X1, X31
	0x02D1DA7C BL 0x3225708
	0x02D1DA80 LDR W8, [X23 + 0x10]
	0x02D1DA84 MOV X20, X0
	0x02D1DA88 STR X8, [X19 + 0x30]
	0x02D1DA8C B 0x2D1DAB4
	0x02D1DA90 ADRP X0, 0x13FD000
	0x02D1DA94 LDR X0, [X0 + 0x290]
	0x02D1DA98 BL 0x1C16CF4
	0x02D1DA9C ADRP X8, 0x16BC000
	0x02D1DAA0 MOVZ W9, 0x1
	0x02D1DAA4 STRB W9, [X8 + 0x762]
	0x02D1DAA8 CBNZ X23, 0x2D1DA74
	0x02D1DAAC MOV X20, X31
	0x02D1DAB0 STR X31, [X19 + 0x30]
	0x02D1DAB4 LDR X8, [X22]
	0x02D1DAB8 LDR X8, [X8 + 0xC0]
	0x02D1DABC LDR X8, [X8]
	0x02D1DAC0 LDR X8, [X8 + 0x80]
	0x02D1DAC4 ADD X1, X8, 0x20
	0x02D1DAC8 MOV X0, X21
	0x02D1DACC BL 0x1C16D18
	0x02D1DAD0 ADRP X8, 0x16BC000
	0x02D1DAD4 LDRB W8, [X8 + 0x762]
	0x02D1DAD8 LDR X24, [X0]
	0x02D1DADC CBZ W8, 0x2D1DAFC
	0x02D1DAE0 CBZ X24, 0x2D1DB18
	0x02D1DAE4 MOV X0, X24
	0x02D1DAE8 MOV X1, X31
	0x02D1DAEC BL 0x3225708
	0x02D1DAF0 LDR W24, [X24 + 0x10]
	0x02D1DAF4 MOV X23, X0
	0x02D1DAF8 B 0x2D1DB1C
	0x02D1DAFC ADRP X0, 0x13FD000
	0x02D1DB00 LDR X0, [X0 + 0x290]
	0x02D1DB04 BL 0x1C16CF4
	0x02D1DB08 ADRP X8, 0x16BC000
	0x02D1DB0C MOVZ W9, 0x1
	0x02D1DB10 STRB W9, [X8 + 0x762]
	0x02D1DB14 CBNZ X24, 0x2D1DAE4
	0x02D1DB18 MOV X23, X31
	0x02D1DB1C LDR X8, [X22]
	0x02D1DB20 LDR X8, [X8 + 0xC0]
	0x02D1DB24 LDR X8, [X8]
	0x02D1DB28 LDR X1, [X8 + 0x80]
	0x02D1DB2C MOV X0, X21
	0x02D1DB30 BL 0x1C16D18
	0x02D1DB34 ADRP X8, 0x16BC000
	0x02D1DB38 LDRB W8, [X8 + 0x762]
	0x02D1DB3C LDR X26, [X0]
	0x02D1DB40 CBZ W8, 0x2D1DB60
	0x02D1DB44 CBZ X26, 0x2D1DB7C
	0x02D1DB48 MOV X0, X26
	0x02D1DB4C MOV X1, X31
	0x02D1DB50 BL 0x3225708
	0x02D1DB54 LDR W26, [X26 + 0x10]
	0x02D1DB58 MOV X25, X0
	0x02D1DB5C B 0x2D1DB80
	0x02D1DB60 ADRP X0, 0x13FD000
	0x02D1DB64 LDR X0, [X0 + 0x290]
	0x02D1DB68 BL 0x1C16CF4
	0x02D1DB6C ADRP X8, 0x16BC000
	0x02D1DB70 MOVZ W9, 0x1
	0x02D1DB74 STRB W9, [X8 + 0x762]
	0x02D1DB78 CBNZ X26, 0x2D1DB48
	0x02D1DB7C MOV X25, X31
	0x02D1DB80 LDR X8, [X22]
	0x02D1DB84 LDR X8, [X8 + 0xC0]
	0x02D1DB88 LDR X8, [X8]
	0x02D1DB8C LDR X8, [X8 + 0x80]
	0x02D1DB90 ADD X1, X8, 0x140
	0x02D1DB94 MOV X0, X21
	0x02D1DB98 BL 0x1C16D18
	0x02D1DB9C LDR X8, [X0]
	0x02D1DBA0 CBZ X8, 0x2D1DBB0
	0x02D1DBA4 LDR W9, [X8 + 0x18]
	0x02D1DBA8 ADD X8, X8, 0x20
	0x02D1DBAC B 0x2D1DBB4
	0x02D1DBB0 MOV X9, X31
	0x02D1DBB4 SUB X31, X31, 0x30
	0x02D1DBB8 LDR X4, [X19 + 0x30]
	0x02D1DBBC ADD X0, X19, 0x50
	0x02D1DBC0 MOV X1, X28
	0x02D1DBC4 MOV X2, X27
	0x02D1DBC8 MOV X3, X20
	0x02D1DBCC MOV X5, X23
	0x02D1DBD0 MOV X6, X24
	0x02D1DBD4 STP X9, X31, [X31 + 0x18]
	0x02D1DBD8 STP X26, X8, [X31 + 0x8]
	0x02D1DBDC STR X25, [X31]
	0x02D1DBE0 BL 0x3301058
	0x02D1DBE4 ADD X31, X31, 0x30
	0x02D1DBE8 MOV W20, W0
	0x02D1DBEC TBZ X0, 0x4, 0x2D1DC98
	0x02D1DBF0 LDR X8, [X22]
	0x02D1DBF4 LDR X8, [X8 + 0xC0]
	0x02D1DBF8 LDR X8, [X8]
	0x02D1DBFC LDR X8, [X8 + 0x80]
	0x02D1DC00 ADD X1, X8, 0x100
	0x02D1DC04 MOV X0, X21
	0x02D1DC08 BL 0x1C16D18
	0x02D1DC0C LDR X8, [X0]
	0x02D1DC10 LDRB W8, [X8]
	0x02D1DC14 CMP W8, 0x2E
	0x02D1DC18 B.NE 0x2D1DC98
	0x02D1DC1C LDR X8, [X22]
	0x02D1DC20 LDR X8, [X8 + 0xC0]
	0x02D1DC24 LDR X8, [X8]
	0x02D1DC28 LDR X8, [X8 + 0x80]
	0x02D1DC2C ADD X1, X8, 0x100
	0x02D1DC30 MOV X0, X21
	0x02D1DC34 BL 0x1C16D18
	0x02D1DC38 LDR X8, [X0]
	0x02D1DC3C LDRB W8, [X8 + 0x1]
	0x02D1DC40 CBZ W8, 0x2D1DE5C
	0x02D1DC44 LDR X8, [X22]
	0x02D1DC48 LDR X8, [X8 + 0xC0]
	0x02D1DC4C LDR X8, [X8]
	0x02D1DC50 LDR X8, [X8 + 0x80]
	0x02D1DC54 ADD X1, X8, 0x100
	0x02D1DC58 MOV X0, X21
	0x02D1DC5C BL 0x1C16D18
	0x02D1DC60 LDR X8, [X0]
	0x02D1DC64 LDRB W8, [X8 + 0x1]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x16BF000
	009 Move W8, [X21+2000]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x1402000
	017 Move X0, [X0+3408]
	018 Call 0x1C17CF4
	019 Move X0, 0x1402000
	020 Move X0, [X0+3416]
	021 Call 0x1C17CF4
	022 Move X0, 0x1402000
	023 Move X0, [X0+3424]
	024 Call 0x1C17CF4
	025 Move X0, 0x1402000
	026 Move X0, [X0+3432]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+2000], W8
	030 Move [X31+12], W31
	031 Move X21, [X20+40]
	032 Compare X21, 0
	033 JumpIfEqual {169}
	034 Move [X31+12], W31
	035 Add X1, X31, 12
	036 Move X0, X21
	037 Move X2, X31
	038 Call Monitor.Enter, X0, X1
	039 Move W8, 1
	040 Move [X20+64], W8
	041 Move [X20+72], X31
	042 Move X0, X20
	043 Call 0x2D1D200, X0
	044 Move X8, [X20+104]
	045 Compare X8, 0
	046 JumpIfEqual {101}
	047 Move X8, 0x1402000
	048 Move X8, [X8+3424]
	049 Move X0, [X8]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X8, 0x1402000
	055 Move X8, [X8+3416]
	056 Move X22, [X8]
	057 Move X0, [X22+32]
	058 Move W8, [X0+309]
	059 Move TEMP, X8
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfEqual {64}
	063 Call 0x1C5D684
	064 Move X8, [X0+192]
	065 Move X0, [X8+8]
	066 Move W8, [X0+309]
	067 Move TEMP, X8
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfEqual {72}
	071 Call 0x1C5D684
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1C17DFC
	076 Move X0, [X22+32]
	077 Move W8, [X0+309]
	078 Move TEMP, X8
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfEqual {83}
	082 Call 0x1C5D684
	083 Move X8, [X0+192]
	084 Move X0, [X8+8]
	085 Move W8, [X0+309]
	086 Move TEMP, X8
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfEqual {91}
	090 Call 0x1C5D684
	091 Move X8, [X0+184]
	092 Move X0, [X8]
	093 Compare X0, 0
	094 JumpIfEqual {185}
	095 Move X8, [X0]
	096 Move X1, [X20+104]
	097 Move X9, [X8+392]
	098 Move X3, [X8+400]
	099 Move W2, W31
	100 NotImplemented "Instruction BLR not yet implemented."
	101 Move X8, [X20+112]
	102 Move [X20+104], X31
	103 Compare X8, 0
	104 JumpIfEqual {159}
	105 Move X8, 0x1402000
	106 Move X8, [X8+3432]
	107 Move X0, [X8]
	108 Move W8, [X0+224]
	109 Compare W8, 0
	110 JumpIfNotEqual {112}
	111 Call 0x1C17DFC
	112 Move X8, 0x1402000
	113 Move X8, [X8+3408]
	114 Move X22, [X8]
	115 Move X0, [X22+32]
	116 Move W8, [X0+309]
	117 Move TEMP, X8
	118 And TEMP, TEMP, 1
	119 Compare TEMP, 1
	120 JumpIfEqual {122}
	121 Call 0x1C5D684
	122 Move X8, [X0+192]
	123 Move X0, [X8+8]
	124 Move W8, [X0+309]
	125 Move TEMP, X8
	126 And TEMP, TEMP, 1
	127 Compare TEMP, 1
	128 JumpIfEqual {130}
	129 Call 0x1C5D684
	130 Move W8, [X0+224]
	131 Compare W8, 0
	132 JumpIfNotEqual {134}
	133 Call 0x1C17DFC
	134 Move X0, [X22+32]
	135 Move W8, [X0+309]
	136 Move TEMP, X8
	137 And TEMP, TEMP, 1
	138 Compare TEMP, 1
	139 JumpIfEqual {141}
	140 Call 0x1C5D684
	141 Move X8, [X0+192]
	142 Move X0, [X8+8]
	143 Move W8, [X0+309]
	144 Move TEMP, X8
	145 And TEMP, TEMP, 1
	146 Compare TEMP, 1
	147 JumpIfEqual {149}
	148 Call 0x1C5D684
	149 Move X8, [X0+184]
	150 Move X0, [X8]
	151 Compare X0, 0
	152 JumpIfEqual {186}
	153 Move X8, [X0]
	154 Move X1, [X20+112]
	155 Move X9, [X8+392]
	156 Move X3, [X8+400]
	157 Move W2, W31
	158 NotImplemented "Instruction BLR not yet implemented."
	159 Move X22, X31
	160 Move [X20+112], X31
	161 Move W8, [X31+12]
	162 Compare W8, 0
	163 JumpIfEqual {167}
	164 Move X0, X21
	165 Move X1, X31
	166 Call Monitor.Exit, X0
	167 Compare X22, 0
	168 JumpIfNotEqual {183}
	169 Move X8, [X20]
	170 And W1, W19, 1
	171 Move X0, X20
	172 Move X9, [X8+536]
	173 Move X2, [X8+544]
	174 NotImplemented "Instruction BLR not yet implemented."
	175 Move X20, [X31+48]
	176 Move X19, [X31+56]
	177 Move X22, [X31+32]
	178 Move X21, [X31+40]
	179 Move X30, [X31+16]
	180 Move X23, [X31+24]
	181 Add X31, X31, 64
	182 Return 
	183 Move X0, X22
	184 Call 0x1C17F18
	185 Call 0x1C17F20
	186 Call 0x1C17F20
	187 Move X23, X0
	188 NotImplemented "Instruction CMP not yet implemented."
	189 Move X0, X23
	190 Call 0x3EB2AD0
	191 Move X22, [X0]
	192 Call 0x3EB2AE0
	193 Move X22, X31
	194 Move X23, X0
	195 Move W8, [X31+12]
	196 Compare W8, 0
	197 JumpIfEqual {201}
	198 Move X0, X21
	199 Move X1, X31
	200 Call Monitor.Exit, X0
	201 Compare X22, 0
	202 JumpIfNotEqual {205}
	203 Move X0, X23
	204 Call 0x1D2D690
	205 Move X0, X22
	206 Call 0x1C17F18
	207 Call 0x1991590

Method: System.Boolean ShouldIncludeEntry(ref System.IO.Enumeration.FileSystemEntry entry)

Disassembly:
	0x02D1DC68 CMP W8, 0x2E
	0x02D1DC6C B.NE 0x2D1DC98

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Boolean ShouldRecurseIntoEntry(ref System.IO.Enumeration.FileSystemEntry entry)

Disassembly:
	0x02D1DC70 LDR X8, [X22]
	0x02D1DC74 LDR X8, [X8 + 0xC0]

ISIL:
	001 Move W0, 1
	002 Return X0

Method: TResult TransformEntry(ref System.IO.Enumeration.FileSystemEntry entry)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void OnDirectoryFinished(System.ReadOnlySpan`1<System.Char> directory)

Disassembly:
	0x02D1DC78 LDR X8, [X8]

ISIL:
	001 Return 

Method: System.Boolean ContinueOnError(System.Int32 error)

Disassembly:
	0x02D1DC7C LDR X8, [X8 + 0x80]
	0x02D1DC80 ADD X1, X8, 0x100

ISIL:
	001 Move W0, W31
	002 Return X0

Method: TResult get_Current()

Disassembly:
	0x02D1DC84 MOV X0, X21
	0x02D1DC88 BL 0x1C16D18

ISIL:
	001 Move X0, [X0+96]
	002 Return X0

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x02D1DC8C LDR X8, [X0]
	0x02D1DC90 LDRB W8, [X8 + 0x2]

ISIL:
	001 Move X0, [X0+96]
	002 Return X0

Method: System.Void DirectoryFinished()

Disassembly:
	0x02D1DC94 CBZ W8, 0x2D1DE5C
	0x02D1DC98 LDR X8, [X22]
	0x02D1DC9C LDR X8, [X8 + 0xC0]
	0x02D1DCA0 LDR X8, [X8]
	0x02D1DCA4 LDR X8, [X8 + 0x80]
	0x02D1DCA8 ADD X1, X8, 0x40
	0x02D1DCAC MOV X0, X21
	0x02D1DCB0 BL 0x1C16D18
	0x02D1DCB4 LDR X8, [X0]
	0x02D1DCB8 CBZ X8, 0x2D1DF80
	0x02D1DCBC LDR W8, [X8 + 0x14]
	0x02D1DCC0 CBZ W8, 0x2D1DD34
	0x02D1DCC4 LDR X8, [X22]
	0x02D1DCC8 LDR X8, [X8 + 0xC0]
	0x02D1DCCC LDR X8, [X8]
	0x02D1DCD0 LDR X8, [X8 + 0x80]
	0x02D1DCD4 ADD X1, X8, 0x40
	0x02D1DCD8 MOV X0, X21
	0x02D1DCDC BL 0x1C16D18
	0x02D1DCE0 LDR X8, [X0]
	0x02D1DCE4 CBZ X8, 0x2D1DF8C
	0x02D1DCE8 LDRB W8, [X8 + 0x14]
	0x02D1DCEC MOV W23, W20
	0x02D1DCF0 TBZ X8, 0x0, 0x2D1DD04
	0x02D1DCF4 ADD X0, X19, 0x50
	0x02D1DCF8 MOV X1, X31
	0x02D1DCFC BL 0x33014C4
	0x02D1DD00 MOV W23, W0
	0x02D1DD04 LDR X8, [X22]
	0x02D1DD08 LDR X8, [X8 + 0xC0]
	0x02D1DD0C LDR X8, [X8]
	0x02D1DD10 LDR X8, [X8 + 0x80]
	0x02D1DD14 ADD X1, X8, 0x40
	0x02D1DD18 MOV X0, X21
	0x02D1DD1C BL 0x1C16D18
	0x02D1DD20 LDR X8, [X0]
	0x02D1DD24 CBZ X8, 0x2D1DF88
	0x02D1DD28 LDR W8, [X8 + 0x14]
	0x02D1DD2C ANDS W31, W8, W23, 0x0
	0x02D1DD30 B.NE 0x2D1D988
	0x02D1DD34 TBZ X20, 0x4, 0x2D1DF0C
	0x02D1DD38 LDR X8, [X22]
	0x02D1DD3C LDR X8, [X8 + 0xC0]
	0x02D1DD40 LDR X8, [X8]
	0x02D1DD44 LDR X8, [X8 + 0x80]
	0x02D1DD48 ADD X1, X8, 0x40
	0x02D1DD4C MOV X0, X21
	0x02D1DD50 BL 0x1C16D18
	0x02D1DD54 LDR X8, [X0]
	0x02D1DD58 CBZ X8, 0x2D1DF90

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, X1
	007 Move X19, X0
	008 Move [X0+80], X31
	009 Move [X0+88], X31
	010 Call 0x2D1D200, X0
	011 Move X22, 0x16BD000
	012 Move W8, [X22+1890]
	013 Move X21, [X19+48]
	014 Compare W8, 0
	015 JumpIfEqual {23}
	016 Compare X21, 0
	017 JumpIfEqual {30}
	018 Move X0, X21
	019 Move X1, X31
	020 Call String.GetRawStringData, X0
	021 Move W2, [X21+16]
	022 Move X1, X0
	023 Move X0, 0x13FE000
	024 Move X0, [X0+656]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X22+1890], W8
	028 Compare X21, 0
	029 JumpIfNotEqual {18}
	030 Move X1, X31
	031 Move X2, X31
	032 Move X8, [X19]
	033 Move X0, X19
	034 Move X9, [X8+504]
	035 Move X3, [X8+512]
	036 NotImplemented "Instruction BLR not yet implemented."
	037 Move X8, [X20+32]
	038 Move X0, X19
	039 Move X8, [X8+192]
	040 Move X1, [X8+136]
	041 Call 0x2D1D8F8, X0
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {57}
	046 Move X8, [X20+32]
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X8, [X8+192]
	053 Move X1, [X8+144]
	054 Move X30, [X31+48]
	055 Call 0x2D1D78C, X0
	056 Return 
	057 Move W8, 1
	058 Move [X19+64], W8
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X22, [X31+16]
	062 Move X21, [X31+24]
	063 Move X30, [X31+48]
	064 Return 

Method: System.Void Reset()

Disassembly:
	0x02D1DD5C LDRB W8, [X8 + 0x10]
	0x02D1DD60 CBZ W8, 0x2D1DF0C
	0x02D1DD64 LDR X8, [X21]
	0x02D1DD68 LDP X9, X2, [X8 + 0x1D8]
	0x02D1DD6C ADD X1, X19, 0x50
	0x02D1DD70 MOV X0, X21
	0x02D1DD74 BLR X9
	0x02D1DD78 TBZ X0, 0x0, 0x2D1DF0C
	0x02D1DD7C LDR X8, [X22]
	0x02D1DD80 LDR X8, [X8 + 0xC0]
	0x02D1DD84 LDR X8, [X8]
	0x02D1DD88 LDR X8, [X8 + 0x80]
	0x02D1DD8C ADD X1, X8, 0xE0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0x13D7000
	005 Move X0, [X0+2880]
	006 Move X19, X1
	007 Call 0x1C17D08
	008 Call 0x1C17F10
	009 Move X1, X31
	010 Move X20, X0
	011 Call NotSupportedException..ctor, X0
	012 Move X0, X20
	013 Move X1, X19
	014 Call 0x1C17DEC

Method: System.Void Dispose()

Disassembly:
	0x02D1DD90 MOV X0, X21
	0x02D1DD94 BL 0x1C16D18
	0x02D1DD98 LDR X8, [X0]
	0x02D1DD9C CBNZ X8, 0x2D1DDF4
	0x02D1DDA0 ADRP X8, 0x1401000
	0x02D1DDA4 LDR X8, [X8 + 0xD90]
	0x02D1DDA8 LDR X0, [X8]
	0x02D1DDAC BL 0x1C16F10
	0x02D1DDB0 ADRP X8, 0x1401000
	0x02D1DDB4 LDR X8, [X8 + 0xD88]
	0x02D1DDB8 MOV X20, X0
	0x02D1DDBC LDR X1, [X8]
	0x02D1DDC0 BL 0x24F1248
	0x02D1DDC4 LDR X8, [X22]
	0x02D1DDC8 LDR X8, [X8 + 0xC0]
	0x02D1DDCC LDR X8, [X8]
	0x02D1DDD0 LDR X8, [X8 + 0x80]
	0x02D1DDD4 ADD X23, X8, 0xE0
	0x02D1DDD8 MOVZ W1, 0x8
	0x02D1DDDC MOV X0, X23
	0x02D1DDE0 BL 0x1C16D14
	0x02D1DDE4 MOV X0, X21
	0x02D1DDE8 MOV X1, X23
	0x02D1DDEC BL 0x1C16D18
	0x02D1DDF0 STR X20, [X0]
	0x02D1DDF4 LDR X8, [X22]
	0x02D1DDF8 LDR X8, [X8 + 0xC0]
	0x02D1DDFC LDR X8, [X8]
	0x02D1DE00 LDR X8, [X8 + 0x80]
	0x02D1DE04 ADD X1, X8, 0xE0
	0x02D1DE08 MOV X0, X21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x16BF000
	007 Move X21, 0x13DE000
	008 Move W8, [X22+2001]
	009 Move X21, [X21+3088]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x13DE000
	017 Move X0, [X0+3088]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2001], W8
	021 Move X8, [X20+32]
	022 Move W1, 1
	023 Move X0, X19
	024 Move X8, [X8+192]
	025 Move X2, [X8+152]
	026 Call 0x2D1D9CC, X0, X1
	027 Move X0, [X21]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X19
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X1, X31
	038 Move X30, [X31+48]
	039 Call GC.SuppressFinalize, X0
	040 Return 

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x02D1DE0C BL 0x1C16D18

ISIL:
	001 Return 

Method: System.Void Finalize()

Disassembly:
	0x02D1DE10 LDR X8, [X22]
	0x02D1DE14 LDR X20, [X0]
	0x02D1DE18 LDR X8, [X8 + 0xC0]
	0x02D1DE1C LDR X8, [X8]
	0x02D1DE20 LDR X8, [X8 + 0x80]
	0x02D1DE24 ADD X1, X8, 0x80
	0x02D1DE28 MOV X0, X21
	0x02D1DE2C BL 0x1C16D18
	0x02D1DE30 ADRP X8, 0x16BC000
	0x02D1DE34 LDRB W8, [X8 + 0x762]
	0x02D1DE38 LDR X24, [X0]
	0x02D1DE3C CBZ W8, 0x2D1DE8C
	0x02D1DE40 CBZ X24, 0x2D1DEA8
	0x02D1DE44 MOV X0, X24
	0x02D1DE48 MOV X1, X31
	0x02D1DE4C BL 0x3225708
	0x02D1DE50 LDR W24, [X24 + 0x10]
	0x02D1DE54 MOV X23, X0
	0x02D1DE58 B 0x2D1DEAC
	0x02D1DE5C LDR X8, [X22]
	0x02D1DE60 LDR X8, [X8 + 0xC0]
	0x02D1DE64 LDR X8, [X8]
	0x02D1DE68 LDR X8, [X8 + 0x80]
	0x02D1DE6C ADD X1, X8, 0x40
	0x02D1DE70 MOV X0, X21
	0x02D1DE74 BL 0x1C16D18
	0x02D1DE78 LDR X8, [X0]
	0x02D1DE7C CBZ X8, 0x2D1DF9C
	0x02D1DE80 LDRB W8, [X8 + 0x20]
	0x02D1DE84 CBNZ W8, 0x2D1DF0C
	0x02D1DE88 B 0x2D1D988
	0x02D1DE8C ADRP X0, 0x13FD000
	0x02D1DE90 LDR X0, [X0 + 0x290]
	0x02D1DE94 BL 0x1C16CF4
	0x02D1DE98 ADRP X8, 0x16BC000
	0x02D1DE9C MOVZ W9, 0x1
	0x02D1DEA0 STRB W9, [X8 + 0x762]
	0x02D1DEA4 CBNZ X24, 0x2D1DE44
	0x02D1DEA8 MOV X23, X31
	0x02D1DEAC ADD X0, X19, 0x50
	0x02D1DEB0 MOV X1, X31
	0x02D1DEB4 BL 0x3301400

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X1+32]
	006 Move X19, X0
	007 Move X8, [X8+192]
	008 Move X2, [X8+152]
	009 Move W1, W31
	010 Call 0x2D1D9CC, X0, X1
	011 Move X20, X31
	012 Compare X19, 0
	013 JumpIfEqual {24}
	014 Move X0, X19
	015 Move X1, X31
	016 Call CriticalFinalizerObject.Finalize, X0
	017 Compare X20, 0
	018 JumpIfNotEqual {25}
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Move X21, [X31+40]
	023 Return 
	024 Call 0x1C17F20
	025 Move X0, X20
	026 Call 0x1C17F18
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X21, X0
	029 Move X0, X21
	030 Call 0x3EB2AD0
	031 Move X20, [X0]
	032 Call 0x3EB2AE0
	033 Move X20, X31
	034 Move X21, X0
	035 Compare X19, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17F20
	038 Move X0, X19
	039 Move X1, X31
	040 Call CriticalFinalizerObject.Finalize, X0
	041 Compare X20, 0
	042 JumpIfNotEqual {45}
	043 Move X0, X21
	044 Call 0x1D2D690
	045 Move X0, X20
	046 Call 0x1C17F18
	047 Call 0x1991590

