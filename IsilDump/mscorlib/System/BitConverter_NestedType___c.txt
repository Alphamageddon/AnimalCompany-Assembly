Type: System.BitConverter/<>c

Method: System.Void .cctor()

Disassembly:
	0x033184B8 STP X30, X21, [X31 - 0x20]!
	0x033184BC STP X20, X19, [X31 + 0x10]
	0x033184C0 ADRP X21, 0x10C4000
	0x033184C4 ADRP X20, 0xDE4000
	0x033184C8 LDRB W8, [X21 + 0xBAD]
	0x033184CC LDR X20, [X20 + 0x9E8]
	0x033184D0 MOV X19, X0
	0x033184D4 TBNZ X8, 0x0, 0x33184EC
	0x033184D8 ADRP X0, 0xDE4000
	0x033184DC LDR X0, [X0 + 0x9E8]
	0x033184E0 BL 0x1C16CF4
	0x033184E4 MOVZ W8, 0x1
	0x033184E8 STRB W8, [X21 + 0xBAD]
	0x033184EC LDR X0, [X20]
	0x033184F0 LDRB W19, [X19]
	0x033184F4 LDR W8, [X0 + 0xE0]
	0x033184F8 CBNZ W8, 0x3318500
	0x033184FC BL 0x1C16DFC
	0x03318500 CMP W19, 0x0
	0x03318504 LDP X20, X19, [X31 + 0x10]
	0x03318508 FMOV D0, 1
	0x0331850C FMOV D1, X31
	0x03318510 FCSEL D0, D1, D0, EQ

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x10C5000
	005 Move X20, 0xE10000
	006 Move W8, [X19+2969]
	007 Move X20, [X20+4040]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE10000
	013 Move X0, [X0+4040]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+2969], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move X1, X31
	020 Move X19, X0
	021 Call Object..ctor, X0
	022 Move X8, [X20]
	023 Move X8, [X8+184]
	024 Move [X8], X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return 

Method: System.Void .ctor()

Disassembly:
	0x03318514 LDP X30, X21, [X31], #0x20
	0x03318518 RET

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void <ToString>b__38_0(System.Span`1<System.Char> dst, System.ValueTuple`3<System.Byte[], System.Int32, System.Int32> state)

Disassembly:
	0x0331851C ANDS W31, W0, 0x1
	0x03318520 FMOV D0, X31
	0x03318524 FMOV D1, 1
	0x03318528 FCSEL D0, D1, D0, NE
	0x0331852C RET
	0x03318530 STP X30, X21, [X31 - 0x20]!
	0x03318534 STP X20, X19, [X31 + 0x10]
	0x03318538 ADRP X21, 0x10C4000
	0x0331853C ADRP X20, 0xDE4000
	0x03318540 LDRB W8, [X21 + 0xBAE]
	0x03318544 LDR X20, [X20 + 0x9E8]
	0x03318548 MOV X19, X0
	0x0331854C TBNZ X8, 0x0, 0x3318564
	0x03318550 ADRP X0, 0xDE4000
	0x03318554 LDR X0, [X0 + 0x9E8]
	0x03318558 BL 0x1C16CF4
	0x0331855C MOVZ W8, 0x1
	0x03318560 STRB W8, [X21 + 0xBAE]
	0x03318564 LDR X0, [X20]
	0x03318568 LDRB W19, [X19]
	0x0331856C LDR W8, [X0 + 0xE0]
	0x03318570 CBNZ W8, 0x3318578
	0x03318574 BL 0x1C16DFC
	0x03318578 CMP W19, 0x0
	0x0331857C LDP X20, X19, [X31 + 0x10]
	0x03318580 CSET W0, NE
	0x03318584 LDP X30, X21, [X31], #0x20
	0x03318588 B 0x331858C
	0x0331858C STP X30, X21, [X31 - 0x20]!
	0x03318590 STP X20, X19, [X31 + 0x10]
	0x03318594 ADRP X20, 0x10C4000
	0x03318598 ADRP X21, 0xE03000
	0x0331859C LDRB W8, [X20 + 0xC67]
	0x033185A0 LDR X21, [X21 + 0x5F0]
	0x033185A4 MOV W19, W0
	0x033185A8 TBNZ X8, 0x0, 0x33185C0
	0x033185AC ADRP X0, 0xE03000
	0x033185B0 LDR X0, [X0 + 0x5F0]
	0x033185B4 BL 0x1C16CF4
	0x033185B8 MOVZ W8, 0x1
	0x033185BC STRB W8, [X20 + 0xC67]
	0x033185C0 LDR X0, [X21]
	0x033185C4 LDR W8, [X0 + 0xE0]
	0x033185C8 CBNZ W8, 0x33185D0
	0x033185CC BL 0x1C16DFC
	0x033185D0 AND W0, W19, 0x1
	0x033185D4 LDP X20, X19, [X31 + 0x10]
	0x033185D8 MOV X1, X31
	0x033185DC LDP X30, X21, [X31], #0x20
	0x033185E0 B 0x33D8EE8
	0x033185E4 STR X30, [X31 - 0x20]!
	0x033185E8 STP X20, X19, [X31 + 0x10]
	0x033185EC ADRP X0, 0xE10000
	0x033185F0 LDR X0, [X0 + 0x30]
	0x033185F4 BL 0x1C16D08
	0x033185F8 MOV X19, X0
	0x033185FC ADRP X0, 0xE0D000
	0x03318600 LDR X0, [X0 + 0xA8]
	0x03318604 BL 0x1C16D08
	0x03318608 MOV X20, X0
	0x0331860C ADRP X0, 0xE0D000
	0x03318610 LDR X0, [X0 + 0x98]
	0x03318614 BL 0x1C16D08
	0x03318618 MOV X2, X0
	0x0331861C MOV X0, X19
	0x03318620 MOV X1, X20
	0x03318624 MOV X3, X31
	0x03318628 BL 0x320A264
	0x0331862C MOV X19, X0
	0x03318630 ADRP X0, 0xDE3000
	0x03318634 LDR X0, [X0 + 0xC08]
	0x03318638 BL 0x1C16D08
	0x0331863C BL 0x1C16F10
	0x03318640 MOV X1, X19
	0x03318644 MOV X2, X31
	0x03318648 MOV X20, X0
	0x0331864C BL 0x337B498
	0x03318650 ADRP X0, 0xE10000
	0x03318654 LDR X0, [X0 + 0x40]
	0x03318658 BL 0x1C16D08
	0x0331865C MOV X1, X0
	0x03318660 MOV X0, X20
	0x03318664 BL 0x1C16DEC
	0x03318668 STR X30, [X31 - 0x40]!
	0x0331866C STP X24, X23, [X31 + 0x10]
	0x03318670 STP X22, X21, [X31 + 0x20]
	0x03318674 STP X20, X19, [X31 + 0x30]
	0x03318678 ADRP X24, 0x10C4000
	0x0331867C ADRP X23, 0xDDB000
	0x03318680 ADRP X22, 0xDE4000
	0x03318684 LDRB W8, [X24 + 0xBAF]
	0x03318688 LDR X23, [X23 + 0xB58]
	0x0331868C LDR X22, [X22 + 0x9E8]
	0x03318690 MOV X19, X2
	0x03318694 MOV X20, X1
	0x03318698 MOV X21, X0
	0x0331869C TBNZ X8, 0x0, 0x33186C0
	0x033186A0 ADRP X0, 0xDDB000
	0x033186A4 LDR X0, [X0 + 0xB58]
	0x033186A8 BL 0x1C16CF4
	0x033186AC ADRP X0, 0xDE4000
	0x033186B0 LDR X0, [X0 + 0x9E8]

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X23, 0x10C5000
	013 Move W8, [X23+2970]
	014 Move X21, X4
	015 Move X22, X3
	016 Move X19, X2
	017 Move X20, X1
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {33}
	022 Move X0, 0xE0F000
	023 Move X0, [X0+3656]
	024 Call 0x1C17CF4
	025 Move X0, 0xE0B000
	026 Move X0, [X0+2752]
	027 Call 0x1C17CF4
	028 Move X0, 0xE10000
	029 Move X0, [X0+4080]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X23+2970], W8
	033 Move X24, X21
	034 ShiftRight X24, 32
	035 And X24, X24, 0x7FFFFFFF
	036 Compare X22, 0
	037 JumpIfEqual {116}
	038 Move W8, [X22+24]
	039 Subtract W8, W8, W21
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X0, X31
	042 Call ThrowHelper.ThrowArgumentOutOfRangeException
	043 Compare W24, 0
	044 JumpIfEqual {121}
	045 Compare W19, 0
	046 JumpIfEqual {121}
	047 Move X23, 0xE10000
	048 Move X23, [X23+4080]
	049 Move X0, [X23]
	050 Compare X0, 0
	051 JumpIfEqual {115}
	052 Add X8, X22, 32
	053 Move X9, W21
	054 Move W25, [X8]
	055 Move X2, X31
	056 Move W1, W25
	057 ShiftRight W1, 4
	058 And W1, W1, 0x7FFFFFFF
	059 Call String.get_Chars, X0, X1
	060 NotImplemented "Instruction CMP not yet implemented."
	061 NotImplemented "Instruction STRH not yet implemented."
	062 Move X0, [X23]
	063 Compare X0, 0
	064 JumpIfEqual {115}
	065 And W1, W25, 15
	066 Move X2, X31
	067 Call String.get_Chars, X0, X1
	068 NotImplemented "Instruction CMP not yet implemented."
	069 NotImplemented "Instruction STRH not yet implemented."
	070 Add X8, X22, W21
	071 Subtract X21, X24, 1
	072 Move W22, 4
	073 Add X24, X8, 33
	074 Move W25, 45
	075 Subtract W8, W22, 2
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move W26, [X24]
	078 Add W27, W8, 1
	079 NotImplemented "Instruction CMP not yet implemented."
	080 NotImplemented "Instruction STRH not yet implemented."
	081 Move X0, [X23]
	082 Compare X0, 0
	083 JumpIfEqual {115}
	084 Move W1, W26
	085 ShiftRight W1, 4
	086 And W1, W1, 0x7FFFFFFF
	087 Move X2, X31
	088 Subtract W28, W22, 1
	089 Call String.get_Chars, X0, X1
	090 Add W8, W27, 1
	091 NotImplemented "Instruction CMP not yet implemented."
	092 NotImplemented "Instruction STRH not yet implemented."
	093 Move X0, [X23]
	094 Compare X0, 0
	095 JumpIfEqual {115}
	096 And W1, W26, 15
	097 Move X2, X31
	098 Call String.get_Chars, X0, X1
	099 NotImplemented "Instruction STRH not yet implemented."
	100 Add X24, X24, 1
	101 Subtract X21, X21, 1
	102 Add W22, W22, 3
	103 Move X20, [X31+80]
	104 Move X19, [X31+88]
	105 Move X22, [X31+64]
	106 Move X21, [X31+72]
	107 Move X24, [X31+48]
	108 Move X23, [X31+56]
	109 Move X26, [X31+32]
	110 Move X25, [X31+40]
	111 Move X28, [X31+16]
	112 Move X27, [X31+24]
	113 Move X30, [X31+96]
	114 Return 
	115 Call 0x1C17F20
	116 Or W8, W24, W21
	117 Compare W8, 0
	118 JumpIfEqual {121}
	119 Move X0, X31
	120 Call ThrowHelper.ThrowArgumentOutOfRangeException
	121 Call 0x1C17F28

