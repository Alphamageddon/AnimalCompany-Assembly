Type: System.Security.SecureString

Method: System.Void .ctor()

Disassembly:
	0x03249CD4 MOV X2, X31
	0x03249CD8 LDR X1, [X8 + 0x10]
	0x03249CDC BL 0x322BE8C
	0x03249CE0 ADDS W31, W0, 0x1
	0x03249CE4 CSET W0, EQ
	0x03249CE8 B 0x3249CF0
	0x03249CEC MOV W0, W31
	0x03249CF0 LDP X20, X19, [X31 + 0x10]
	0x03249CF4 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call Object..ctor, X0
	006 Move W1, 8
	007 Move X0, X19
	008 Move W2, W31
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]

Method: System.Void .ctor(System.Char* value, System.Int32 length)

Disassembly:
	0x03249E78 MOV X0, X19
	0x03249E7C MOV X2, X31
	0x03249E80 BL 0x330E100
	0x03249E84 ADRP X0, 0xED9000
	0x03249E88 LDR X0, [X0 + 0xC30]
	0x03249E8C BL 0x1C16D08
	0x03249E90 MOV X1, X0
	0x03249E94 MOV X0, X19
	0x03249E98 BL 0x1C16DEC
	0x03249E9C SUB X31, X31, 0x30
	0x03249EA0 STP X30, X21, [X31 + 0x10]
	0x03249EA4 STP X20, X19, [X31 + 0x20]
	0x03249EA8 ADRP X20, 0x1193000
	0x03249EAC ADRP X21, 0xEAA000
	0x03249EB0 LDRB W8, [X20 + 0x484]
	0x03249EB4 LDR X21, [X21 + 0x8F0]
	0x03249EB8 MOV X19, X0
	0x03249EBC TBNZ X8, 0x0, 0x3249ED4
	0x03249EC0 ADRP X0, 0xEAA000
	0x03249EC4 LDR X0, [X0 + 0x8F0]
	0x03249EC8 BL 0x1C16CF4
	0x03249ECC MOVZ W8, 0x1
	0x03249ED0 STRB W8, [X20 + 0x484]
	0x03249ED4 LDR X0, [X21]
	0x03249ED8 BL 0x1C16F10
	0x03249EDC MOV X1, X31
	0x03249EE0 MOV X20, X0
	0x03249EE4 BL 0x3231AC4
	0x03249EE8 ADD X1, X31, 0x8
	0x03249EEC MOV X0, X19
	0x03249EF0 MOV W2, W31
	0x03249EF4 STR X20, [X31 + 0x8]
	0x03249EF8 BL 0x3249F20
	0x03249EFC CBZ X20, 0x3249F1C
	0x03249F00 LDR X8, [X20]
	0x03249F04 MOV X0, X20
	0x03249F08 LDP X20, X19, [X31 + 0x20]
	0x03249F0C LDP X30, X21, [X31 + 0x10]
	0x03249F10 LDP X2, X1, [X8 + 0x168]
	0x03249F14 ADD X31, X31, 0x30
	0x03249F18 BR X2
	0x03249F1C BL 0x1C16F20
	0x03249F20 STR X30, [X31 - 0x60]!
	0x03249F24 STP X28, X27, [X31 + 0x10]
	0x03249F28 STP X26, X25, [X31 + 0x20]
	0x03249F2C STP X24, X23, [X31 + 0x30]
	0x03249F30 STP X22, X21, [X31 + 0x40]
	0x03249F34 STP X20, X19, [X31 + 0x50]
	0x03249F38 ADRP X22, 0x1193000
	0x03249F3C LDRB W8, [X22 + 0x485]
	0x03249F40 MOV W21, W2
	0x03249F44 MOV X20, X1
	0x03249F48 MOV X19, X0
	0x03249F4C TBNZ X8, 0x0, 0x3249FE8
	0x03249F50 ADRP X0, 0xEAA000
	0x03249F54 LDR X0, [X0 + 0xE00]
	0x03249F58 BL 0x1C16CF4
	0x03249F5C ADRP X0, 0xEAA000
	0x03249F60 LDR X0, [X0 + 0xE18]
	0x03249F64 BL 0x1C16CF4
	0x03249F68 ADRP X0, 0xED9000
	0x03249F6C LDR X0, [X0 + 0xB80]
	0x03249F70 BL 0x1C16CF4
	0x03249F74 ADRP X0, 0xED8000
	0x03249F78 LDR X0, [X0 + 0x8F0]
	0x03249F7C BL 0x1C16CF4
	0x03249F80 ADRP X0, 0xEAC000
	0x03249F84 LDR X0, [X0 + 0x278]
	0x03249F88 BL 0x1C16CF4
	0x03249F8C ADRP X0, 0xEAA000
	0x03249F90 LDR X0, [X0 + 0xDD8]
	0x03249F94 BL 0x1C16CF4
	0x03249F98 ADRP X0, 0xED9000
	0x03249F9C LDR X0, [X0 + 0xC38]
	0x03249FA0 BL 0x1C16CF4
	0x03249FA4 ADRP X0, 0xED3000
	0x03249FA8 LDR X0, [X0 + 0xA40]
	0x03249FAC BL 0x1C16CF4
	0x03249FB0 ADRP X0, 0xEB5000
	0x03249FB4 LDR X0, [X0 + 0xCD8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X1
	006 Move X1, X31
	007 Move W21, W2
	008 Move X20, X0
	009 Call Object..ctor, X0
	010 Compare X19, 0
	011 JumpIfEqual {51}
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move X0, X20
	014 Move W1, W21
	015 Move W2, W31
	016 Move [X20+16], W21
	017 Call SecureString.Alloc, X0, X1, X2
	018 Compare W21, 0
	019 JumpIfEqual {44}
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move X9, X31
	022 NotImplemented "Instruction CSINC not yet implemented."
	023 NotImplemented "Instruction LDRH not yet implemented."
	024 Move X11, [X20+24]
	025 Compare X11, 0
	026 JumpIfEqual {49}
	027 Move W12, [X11+24]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move W12, W10
	030 ShiftRight W12, 8
	031 And W12, W12, 0x7FFFFFFF
	032 Add X11, X11, X9
	033 Move [X11+32], W12
	034 Move X11, [X20+24]
	035 Compare X11, 0
	036 JumpIfEqual {49}
	037 Move W13, [X11+24]
	038 Add X12, X9, 1
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Add X9, X11, X9
	041 Subtract W8, W8, 1
	042 Move [X9+33], W10
	043 Add X9, X12, 1
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Return 
	049 Call 0x1C17F20
	050 Call 0x1C17F28
	051 Move X0, 0xEB0000
	052 Move X0, [X0+1320]
	053 Call 0x1C17D08
	054 Call 0x1C17F10
	055 Move X19, X0
	056 Move X0, 0xEB5000
	057 Move X0, [X0+3784]
	058 Call 0x1C17D08
	059 Move X1, X0
	060 Move X0, X19
	061 Move X2, X31
	062 Call ArgumentNullException..ctor, X0, X1
	063 Move X0, 0xEB3000
	064 Move X0, [X0+1888]
	065 Call 0x1C17D08
	066 Call 0x1C17F10
	067 Move X19, X0
	068 Move X0, 0xEB3000
	069 Move X0, [X0+1896]
	070 Call 0x1C17D08
	071 Move X20, X0
	072 Move X0, 0xEDA000
	073 Move X0, [X0+2984]
	074 Call 0x1C17D08
	075 Move X2, X0
	076 Move X0, X19
	077 Move X1, X20
	078 Move X3, X31
	079 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	080 Move X0, 0xEDA000
	081 Move X0, [X0+3000]
	082 Call 0x1C17D08
	083 Move X1, X0
	084 Move X0, X19
	085 Call 0x1C17DEC

Method: System.Int32 get_Length()

Disassembly:
	0x03249FBC ADRP X0, 0xED9000
	0x03249FC0 LDR X0, [X0 + 0xC40]
	0x03249FC4 BL 0x1C16CF4
	0x03249FC8 ADRP X0, 0xEAC000
	0x03249FCC LDR X0, [X0 + 0x260]
	0x03249FD0 BL 0x1C16CF4
	0x03249FD4 ADRP X0, 0xED9000
	0x03249FD8 LDR X0, [X0 + 0xC48]
	0x03249FDC BL 0x1C16CF4
	0x03249FE0 MOVZ W8, 0x1
	0x03249FE4 STRB W8, [X22 + 0x485]
	0x03249FE8 LDR X0, [X20]
	0x03249FEC CBZ X0, 0x324A18C
	0x03249FF0 ADRP X8, 0xED3000
	0x03249FF4 LDR X8, [X8 + 0xA40]
	0x03249FF8 MOV X2, X31
	0x03249FFC LDR X1, [X8]
	0x0324A000 BL 0x32333E0
	0x0324A004 LDR X0, [X20]
	0x0324A008 CBZ X0, 0x324A18C
	0x0324A00C LDR X1, [X19 + 0x18]
	0x0324A010 ADRP X25, 0xED7000
	0x0324A014 LDR X25, [X25 + 0x8F0]
	0x0324A018 MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+20]
	004 Compare W8, 0
	005 JumpIfNotEqual {10}
	006 Move W0, [X0+16]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0xED4000
	011 Move X0, [X0+1208]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0xEDA000
	016 Move X0, [X0+3008]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call ObjectDisposedException..ctor, X0, X1
	022 Move X0, 0xED9000
	023 Move X0, [X0+3016]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void Dispose()

Disassembly:
	0x0324A01C BL 0x32333E0
	0x0324A020 LDR X8, [X19 + 0x20]
	0x0324A024 CBZ X8, 0x324A190
	0x0324A028 LDR X0, [X20]
	0x0324A02C CBZ X0, 0x324A18C
	0x0324A030 ADRP X8, 0xEA9000
	0x0324A034 LDR X8, [X8 + 0xDD8]
	0x0324A038 MOV X2, X31
	0x0324A03C LDR X1, [X8]
	0x0324A040 BL 0x32333E0
	0x0324A044 LDR X0, [X19 + 0x20]
	0x0324A048 CBZ X0, 0x324A18C
	0x0324A04C ADRP X26, 0xED8000
	0x0324A050 ADRP X27, 0xED8000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+24]
	005 Move W8, 1
	006 Move [X19+20], W8
	007 Compare X0, 0
	008 JumpIfEqual {14}
	009 Move W2, [X0+24]
	010 Move W1, W31
	011 Move X3, X31
	012 Call Array.Clear, X0, X1, X2
	013 Move [X19+24], X31
	014 Move [X19+16], W31
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Return 

Method: System.Void Encrypt()

Disassembly:
	0x03249FB8 BL 0x1C16CF4

ISIL:
	001 Return 

Method: System.Void Decrypt()

Disassembly:
	0x0324A054 ADRP X28, 0xEB4000

ISIL:
	001 Return 

Method: System.Void Alloc(System.Int32 length, System.Boolean realloc)

Disassembly:
	0x03249CF8 RET
	0x03249CFC STR X30, [X31 - 0x20]!
	0x03249D00 STP X20, X19, [X31 + 0x10]
	0x03249D04 ADRP X20, 0x1193000
	0x03249D08 LDRB W8, [X20 + 0x480]
	0x03249D0C MOV X19, X0
	0x03249D10 TBNZ X8, 0x0, 0x3249D28
	0x03249D14 ADRP X0, 0xED8000
	0x03249D18 LDR X0, [X0 + 0x8F0]
	0x03249D1C BL 0x1C16CF4
	0x03249D20 MOVZ W8, 0x1
	0x03249D24 STRB W8, [X20 + 0x480]
	0x03249D28 CBZ X19, 0x3249D68
	0x03249D2C ADRP X20, 0xED8000
	0x03249D30 LDR X20, [X20 + 0x8F0]
	0x03249D34 LDR X0, [X20]
	0x03249D38 LDR W8, [X0 + 0xE0]
	0x03249D3C CBNZ W8, 0x3249D48
	0x03249D40 BL 0x1C16DFC
	0x03249D44 LDR X0, [X20]
	0x03249D48 LDR X8, [X0 + 0xB8]
	0x03249D4C MOV X0, X19
	0x03249D50 MOV X2, X31
	0x03249D54 LDR X1, [X8 + 0x18]
	0x03249D58 BL 0x322BE8C
	0x03249D5C ADDS W31, W0, 0x1
	0x03249D60 CSET W0, EQ
	0x03249D64 B 0x3249D6C
	0x03249D68 MOV W0, W31
	0x03249D6C LDP X20, X19, [X31 + 0x10]
	0x03249D70 LDR X30, [X31], #0x20
	0x03249D74 RET
	0x03249D78 STP X30, X23, [X31 - 0x30]!
	0x03249D7C STP X22, X21, [X31 + 0x10]
	0x03249D80 STP X20, X19, [X31 + 0x20]
	0x03249D84 ADRP X21, 0x1193000
	0x03249D88 LDRB W8, [X21 + 0x483]
	0x03249D8C MOV X19, X1
	0x03249D90 MOV X20, X0
	0x03249D94 TBNZ X8, 0x0, 0x3249DAC
	0x03249D98 ADRP X0, 0xED8000
	0x03249D9C LDR X0, [X0 + 0x8F0]
	0x03249DA0 BL 0x1C16CF4
	0x03249DA4 MOVZ W8, 0x1
	0x03249DA8 STRB W8, [X21 + 0x483]
	0x03249DAC CBZ X19, 0x3249E54
	0x03249DB0 LDR X0, [X20 + 0x28]
	0x03249DB4 CBZ X0, 0x3249E34
	0x03249DB8 ADRP X23, 0xED8000
	0x03249DBC LDR X23, [X23 + 0x8F0]
	0x03249DC0 MOV W21, W31
	0x03249DC4 LDR X8, [X0]
	0x03249DC8 LDR X9, [X8 + 0x298]
	0x03249DCC LDR X1, [X8 + 0x2A0]
	0x03249DD0 BLR X9
	0x03249DD4 CMP W21, W0
	0x03249DD8 B.GE 0x3249E34
	0x03249DDC LDR X0, [X20 + 0x28]
	0x03249DE0 CBZ X0, 0x3249E30
	0x03249DE4 LDR X8, [X0]
	0x03249DE8 MOV W1, W21
	0x03249DEC LDR X9, [X8 + 0x2E8]
	0x03249DF0 LDR X2, [X8 + 0x2F0]
	0x03249DF4 BLR X9
	0x03249DF8 CBZ X0, 0x3249E30
	0x03249DFC LDR X1, [X23]
	0x03249E00 LDR X8, [X0]
	0x03249E04 MOV X22, X0
	0x03249E08 CMP X8, X1
	0x03249E0C B.NE 0x3249E4C
	0x03249E10 LDR X0, [X22 + 0x18]
	0x03249E14 MOV X1, X19
	0x03249E18 MOV X2, X31
	0x03249E1C BL 0x321BA08
	0x03249E20 TBNZ X0, 0x0, 0x3249E38
	0x03249E24 LDR X0, [X20 + 0x28]
	0x03249E28 ADD W21, W21, 0x1
	0x03249E2C CBNZ X0, 0x3249DC4
	0x03249E30 BL 0x1C16F20
	0x03249E34 MOV X22, X31
	0x03249E38 MOV X0, X22
	0x03249E3C LDP X20, X19, [X31 + 0x20]
	0x03249E40 LDP X22, X21, [X31 + 0x10]
	0x03249E44 LDP X30, X23, [X31], #0x30
	0x03249E48 RET
	0x03249E4C MOV X0, X22
	0x03249E50 BL 0x1C171E0
	0x03249E54 ADRP X0, 0xEAF000
	0x03249E58 LDR X0, [X0 + 0x528]
	0x03249E5C BL 0x1C16D08
	0x03249E60 BL 0x1C16F10
	0x03249E64 MOV X19, X0
	0x03249E68 ADRP X0, 0xED9000
	0x03249E6C LDR X0, [X0 + 0xBD0]
	0x03249E70 BL 0x1C16D08
	0x03249E74 MOV X1, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1194000
	007 Move W8, [X22+1143]
	008 Move W20, W2
	009 Move W21, W1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xEAB000
	016 Move X0, [X0+1560]
	017 Call 0x1C17CF4
	018 Move X0, 0xEAB000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+1143], W8
	023 NotImplemented "Instruction CMP not yet implemented."
	024 And W31, W21, 7
	025 Move W8, W21
	026 ShiftRight W8, 3
	027 And W8, W8, 0x7FFFFFFF
	028 NotImplemented "Instruction CINC not yet implemented."
	029 Move W1, W8
	030 ShiftRight W1, 28
	031 And W1, W1, 0x7FFFFFF
	032 Move TEMP, X20
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {77}
	036 Add X19, X19, 24
	037 Move X8, [X19]
	038 Compare X8, 0
	039 JumpIfEqual {42}
	040 Move W8, [X8+24]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X8, 0xEAB000
	043 Move X8, [X8+1560]
	044 Move X0, [X8]
	045 Call 0x1C17D6C
	046 Move X21, [X19]
	047 Compare X21, 0
	048 JumpIfEqual {113}
	049 Move X20, X0
	050 Compare X0, 0
	051 JumpIfEqual {113}
	052 Move X8, 0xEAB000
	053 Move X8, [X8+1448]
	054 Move X0, [X8]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move W0, [X21+24]
	060 Move W1, [X20+24]
	061 Move X2, X31
	062 Call Math.Min, X0, X1
	063 Move W4, W0
	064 Move X0, X21
	065 Move W1, W31
	066 Move X2, X20
	067 Move W3, W31
	068 Move X5, X31
	069 Call Array.Copy, X0, X1, X2, X3, X4
	070 Move X0, [X19]
	071 Compare X0, 0
	072 JumpIfEqual {113}
	073 Move W2, [X0+24]
	074 Move W1, W31
	075 Move X3, X31
	076 Call Array.Clear, X0, X1, X2
	077 Move X8, 0xEAB000
	078 Move X8, [X8+1560]
	079 Move X0, [X8]
	080 Call 0x1C17D6C
	081 Move X20, X0
	082 Add X19, X19, 24
	083 Move [X19], X20
	084 Move X20, [X31+32]
	085 Move X19, [X31+40]
	086 Move X22, [X31+16]
	087 Move X21, [X31+24]
	088 Move X30, [X31+48]
	089 Return 
	090 Move X0, 0xEB3000
	091 Move X0, [X0+1888]
	092 Call 0x1C17D08
	093 Call 0x1C17F10
	094 Move X19, X0
	095 Move X0, 0xEB3000
	096 Move X0, [X0+1896]
	097 Call 0x1C17D08
	098 Move X20, X0
	099 Move X0, 0xEDA000
	100 Move X0, [X0+2984]
	101 Call 0x1C17D08
	102 Move X2, X0
	103 Move X0, X19
	104 Move X1, X20
	105 Move X3, X31
	106 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	107 Move X0, 0xEDA000
	108 Move X0, [X0+2992]
	109 Call 0x1C17D08
	110 Move X1, X0
	111 Move X0, X19
	112 Call 0x1C17DEC
	113 Call 0x1C17F20

Method: System.Byte[] GetBuffer()

Disassembly:
	0x0324A058 LDR X26, [X26 + 0xB80]
	0x0324A05C LDR X27, [X27 + 0xC38]
	0x0324A060 LDR X28, [X28 + 0xCD8]
	0x0324A064 MOV W22, W31
	0x0324A068 LDR X8, [X0]
	0x0324A06C LDR X9, [X8 + 0x298]
	0x0324A070 LDR X1, [X8 + 0x2A0]
	0x0324A074 BLR X9
	0x0324A078 CMP W22, W0
	0x0324A07C B.GE 0x324A190
	0x0324A080 LDR X0, [X19 + 0x20]
	0x0324A084 CBZ X0, 0x324A18C
	0x0324A088 LDR X8, [X0]
	0x0324A08C MOV W1, W22
	0x0324A090 LDR X9, [X8 + 0x2E8]
	0x0324A094 LDR X2, [X8 + 0x2F0]
	0x0324A098 BLR X9
	0x0324A09C CBZ X0, 0x324A18C
	0x0324A0A0 LDR X8, [X0]
	0x0324A0A4 LDR X1, [X26]
	0x0324A0A8 MOV X23, X0
	0x0324A0AC LDRB W10, [X8 + 0x130]
	0x0324A0B0 LDRB W9, [X1 + 0x130]
	0x0324A0B4 CMP W10, W9
	0x0324A0B8 B.CC 0x324A48C
	0x0324A0BC LDR X8, [X8 + 0xC8]
	0x0324A0C0 ADD X8, X8, X9, 0x3, LSL
	0x0324A0C4 LDUR X8, [X8 - 0x8]
	0x0324A0C8 CMP X8, X1
	0x0324A0CC B.NE 0x324A48C
	0x0324A0D0 LDR X0, [X20]
	0x0324A0D4 CBZ X0, 0x324A18C
	0x0324A0D8 LDR X1, [X23 + 0x10]
	0x0324A0DC MOV X2, X31
	0x0324A0E0 BL 0x32333E0
	0x0324A0E4 CBZ X0, 0x324A18C
	0x0324A0E8 LDR X1, [X27]
	0x0324A0EC MOV X2, X31
	0x0324A0F0 BL 0x32333E0
	0x0324A0F4 LDR X8, [X25]
	0x0324A0F8 LDR X24, [X23 + 0x18]
	0x0324A0FC MOV X23, X0
	0x0324A100 LDR W9, [X8 + 0xE0]
	0x0324A104 CBNZ W9, 0x324A110

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1193000
	006 Move X19, 0xEAA000
	007 Move W8, [X21+1144]
	008 Move X19, [X19+1560]
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEAA000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1144], W8
	019 Move W8, [X20+16]
	020 Move X0, [X19]
	021 Move W1, W8
	022 ShiftRight W1, 31
	023 And W1, W1, 0x3FFFFFFF
	024 Call 0x1C17D6C
	025 Move X19, X0
	026 Compare X0, 0
	027 JumpIfEqual {41}
	028 Move X0, [X20+24]
	029 Move W4, [X19+24]
	030 Move W1, W31
	031 Move X2, X19
	032 Move W3, W31
	033 Move X5, X31
	034 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	035 Move X0, X19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Return X0
	041 Call 0x1C17F20
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Call 0x3EB2AD0
	044 Move X20, [X0]
	045 Call 0x3EB2AE0
	046 Compare X20, 0
	047 JumpIfEqual {35}
	048 Move X0, X20
	049 Call 0x1C17F18
	050 Compare X20, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1D2D690
	053 Move X0, X20
	054 Call 0x1C17F18
	055 Call 0x1991590

