Type: System.Security.Cryptography.RC2

Method: System.Void .ctor()

Disassembly:
	0x03257400 LDR X0, [X0 + 0x1B0]
	0x03257404 B 0x3257424
	0x03257408 ADRP X0, 0xEA1000
	0x0325740C LDR X0, [X0 + 0x528]
	0x03257410 BL 0x1C16D08
	0x03257414 BL 0x1C16F10
	0x03257418 MOV X19, X0
	0x0325741C ADRP X0, 0xECC000
	0x03257420 LDR X0, [X0 + 0x1B8]
	0x03257424 BL 0x1C16D08
	0x03257428 MOV X1, X0
	0x0325742C MOV X0, X19
	0x03257430 MOV X2, X31
	0x03257434 BL 0x330E100
	0x03257438 ADRP X0, 0xECC000
	0x0325743C LDR X0, [X0 + 0x1C0]
	0x03257440 BL 0x1C16D08
	0x03257444 MOV X1, X0
	0x03257448 MOV X0, X19
	0x0325744C BL 0x1C16DEC
	0x03257450 ADRP X0, 0xECC000
	0x03257454 LDR X0, [X0 + 0x1C8]
	0x03257458 B 0x3257464
	0x0325745C ADRP X0, 0xECC000
	0x03257460 LDR X0, [X0 + 0x1D0]
	0x03257464 BL 0x1C16D08
	0x03257468 MOV X1, X31
	0x0325746C BL 0x33BDD84
	0x03257470 MOV X19, X0
	0x03257474 ADRP X0, 0xEC9000
	0x03257478 LDR X0, [X0 + 0xCE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1186000
	006 Move X20, 0xECD000
	007 Move W8, [X21+1273]
	008 Move X20, [X20+336]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xECD000
	015 Move X0, [X0+336]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1273], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call SymmetricAlgorithm..ctor, X0
	022 Move W8, 128
	023 NotImplemented "Instruction MOVI not yet implemented."
	024 Move [X19+56], W8
	025 Move [X19+16], D0
	026 Move X0, [X20]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X20]
	032 Move X8, [X0+184]
	033 Move V0, [X8]
	034 Move [X19+40], V0
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return 

Method: System.Int32 get_EffectiveKeySize()

Disassembly:
	0x0325747C BL 0x1C16D08
	0x03257480 BL 0x1C16F10
	0x03257484 MOV X1, X19
	0x03257488 MOV X2, X31
	0x0325748C MOV X20, X0
	0x03257490 BL 0x3252170
	0x03257494 ADRP X0, 0xECC000

ISIL:
	001 Move W8, [X0+68]
	002 Move W9, 68
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move W8, 56
	005 NotImplemented "Instruction CSEL not yet implemented."
	006 Move W0, [X0]
	007 Return X0

Method: System.Int32 get_KeySize()

Disassembly:
	0x03257498 LDR X0, [X0 + 0x1C0]
	0x0325749C BL 0x1C16D08

ISIL:
	001 Move W0, [X0+56]
	002 Return X0

Method: System.Void set_KeySize(System.Int32 value)

Disassembly:
	0x032574A0 MOV X1, X0
	0x032574A4 MOV X0, X20
	0x032574A8 BL 0x1C16DEC
	0x032574AC STR X30, [X31 - 0x50]!
	0x032574B0 STP X26, X25, [X31 + 0x10]
	0x032574B4 STP X24, X23, [X31 + 0x20]
	0x032574B8 STP X22, X21, [X31 + 0x30]
	0x032574BC STP X20, X19, [X31 + 0x40]
	0x032574C0 ADRP X21, 0x1185000
	0x032574C4 LDRB W8, [X21 + 0x50A]
	0x032574C8 MOV X20, X1
	0x032574CC MOV X19, X0
	0x032574D0 TBNZ X8, 0x0, 0x32574F4
	0x032574D4 ADRP X0, 0xE9D000
	0x032574D8 LDR X0, [X0 + 0xE58]
	0x032574DC BL 0x1C16CF4
	0x032574E0 ADRP X0, 0xECC000
	0x032574E4 LDR X0, [X0 + 0x1A8]
	0x032574E8 BL 0x1C16CF4
	0x032574EC MOVZ W8, 0x1
	0x032574F0 STRB W8, [X21 + 0x50A]
	0x032574F4 CBZ X20, 0x32579C4
	0x032574F8 LDR W8, [X20 + 0x18]
	0x032574FC LDR W9, [X19 + 0x1C]
	0x03257500 UBFM W10, W8, 0x1D, 0x1C
	0x03257504 CMP W9, W8, LSL
	0x03257508 CSEL W8, W9, W10, GT
	0x0325750C CMP W8, 0x80
	0x03257510 B.EQ 0x3257530

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+68]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X20, [X31+16]
	007 Move X19, [X31+24]
	008 Move X2, X31
	009 Move X30, [X31+32]
	010 Call SymmetricAlgorithm.set_KeySize, X0, X1
	011 Return 
	012 Move X0, 0xECD000
	013 Move X0, [X0+344]
	014 Call 0x1C17D08
	015 Move X1, X31
	016 Call Environment.GetResourceString, X0
	017 Move X19, X0
	018 Move X0, 0xECA000
	019 Move X0, [X0+3296]
	020 Call 0x1C17D08
	021 Call 0x1C17F10
	022 Move X1, X19
	023 Move X2, X31
	024 Move X20, X0
	025 Call CryptographicException..ctor, X0, X1
	026 Move X0, 0xECD000
	027 Move X0, [X0+352]
	028 Call 0x1C17D08
	029 Move X1, X0
	030 Move X0, X20
	031 Call 0x1C17DEC

Method: System.Void .cctor()

Disassembly:
	0x03257514 CMP W8, 0x100
	0x03257518 B.EQ 0x325753C
	0x0325751C CMP W8, 0xC0
	0x03257520 B.NE 0x32579C8
	0x03257524 MOVZ W8, 0xD
	0x03257528 MOVZ W9, 0xC
	0x0325752C B 0x3257544
	0x03257530 MOVZ W8, 0xB
	0x03257534 MOVZ W9, 0xA
	0x03257538 B 0x3257544
	0x0325753C MOVZ W8, 0xF
	0x03257540 MOVZ W9, 0xE
	0x03257544 ADRP X21, 0xE9D000
	0x03257548 LDR X21, [X21 + 0xE58]
	0x0325754C STR W9, [X19 + 0x40]
	0x03257550 LDR W9, [X19 + 0x44]
	0x03257554 LDR X0, [X21]
	0x03257558 MUL W1, W8, W9
	0x0325755C BL 0x1C16D6C
	0x03257560 LDP W9, W8, [X19 + 0x40]
	0x03257564 STR X0, [X19 + 0x30]
	0x03257568 LDR X0, [X21]
	0x0325756C ADD W9, W9, 0x1
	0x03257570 MUL W1, W9, W8
	0x03257574 BL 0x1C16D6C
	0x03257578 LDR W11, [X19 + 0x48]
	0x0325757C STR X0, [X19 + 0x38]
	0x03257580 CMP W11, 0x0
	0x03257584 B.LE 0x325774C
	0x03257588 LDR W9, [X20 + 0x18]
	0x0325758C MOV X8, X31
	0x03257590 MOVZ W10, 0x20
	0x03257594 SUB X11, X10, 0x20
	0x03257598 CMP W11, W9
	0x0325759C B.CS 0x32579C0
	0x032575A0 ADD X12, X11, 0x1
	0x032575A4 CMP W12, W9
	0x032575A8 B.CS 0x32579C0
	0x032575AC ADD X12, X12, 0x1
	0x032575B0 CMP W12, W9
	0x032575B4 B.CS 0x32579C0
	0x032575B8 ADD W12, W12, 0x1
	0x032575BC CMP W12, W9
	0x032575C0 B.CS 0x32579C0
	0x032575C4 LDR X12, [X19 + 0x30]
	0x032575C8 CBZ X12, 0x32579C4
	0x032575CC LDR W13, [X12 + 0x18]
	0x032575D0 CMP X8, X13
	0x032575D4 B.CS 0x32579C0
	0x032575D8 SUB X13, X10, 0x1F
	0x032575DC ADD X11, X20, W11, SXTW
	0x032575E0 SUB X14, X10, 0x1E
	0x032575E4 ADD X13, X20, W13, SXTW
	0x032575E8 SUB X15, X10, 0x1D
	0x032575EC LDRB W11, [X11 + 0x20]
	0x032575F0 ADD X14, X20, W14, SXTW
	0x032575F4 LDRB W13, [X13 + 0x20]
	0x032575F8 LDRB W14, [X14 + 0x20]
	0x032575FC ADD X15, X20, W15, SXTW
	0x03257600 LDRB W15, [X15 + 0x20]
	0x03257604 BFM W11, W13, 0x18, 0x7
	0x03257608 BFM W11, W14, 0x10, 0x7
	0x0325760C ADD X8, X8, 0x1
	0x03257610 BFM W11, W15, 0x8, 0x7
	0x03257614 STR W11, [X12, X10, LSL]
	0x03257618 LDRSW X11, [X19 + 0x48]
	0x0325761C ADD X10, X10, 0x4
	0x03257620 CMP X8, X11
	0x03257624 B.LT 0x3257594

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, 0x1186000
	008 Move X22, 0xECB000
	009 Move X21, 0xECB000
	010 Move W8, [X19+1274]
	011 Move X22, [X22+1312]
	012 Move X21, [X21+1320]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0xECB000
	018 Move X0, [X0+1312]
	019 Call 0x1C17CF4
	020 Move X0, 0xECB000
	021 Move X0, [X0+1320]
	022 Call 0x1C17CF4
	023 Move X0, 0xECD000
	024 Move X0, [X0+336]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X19+1274], W8
	028 Move X0, [X22]
	029 Move W1, 1
	030 Call 0x1C17D6C
	031 Move X8, [X21]
	032 Move X19, X0
	033 Move X0, X8
	034 Call 0x1C17F10
	035 Move W1, 64
	036 Move W2, 64
	037 Move W3, W31
	038 Move X4, X31
	039 Move X20, X0
	040 Call KeySizes..ctor, X0, X1, X2, X3
	041 Compare X19, 0
	042 JumpIfEqual {81}
	043 Move W8, [X19+24]
	044 Compare W8, 0
	045 JumpIfEqual {82}
	046 Move X23, 0xECD000
	047 Move X23, [X23+336]
	048 Move [X19+32], X20
	049 Move W1, 1
	050 Move X8, [X23]
	051 Move X8, [X8+184]
	052 Move [X8], X19
	053 Move X0, [X22]
	054 Call 0x1C17D6C
	055 Move X8, [X21]
	056 Move X19, X0
	057 Move X0, X8
	058 Call 0x1C17F10
	059 Move W1, 40
	060 Move W2, 1024
	061 Move W3, 8
	062 Move X4, X31
	063 Move X20, X0
	064 Call KeySizes..ctor, X0, X1, X2, X3
	065 Compare X19, 0
	066 JumpIfEqual {81}
	067 Move W8, [X19+24]
	068 Compare W8, 0
	069 JumpIfEqual {82}
	070 Move [X19+32], X20
	071 Move X8, [X23]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X8, [X8+184]
	075 Move [X8+8], X19
	076 Move X20, [X31+32]
	077 Move X19, [X31+40]
	078 Move X30, [X31+48]
	079 Move X23, [X31+56]
	080 Return 
	081 Call 0x1C17F20
	082 Call 0x1C17F28

