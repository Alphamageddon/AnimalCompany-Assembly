Type: System.Security.Cryptography.SHA384Managed

Method: System.Void .ctor()

Disassembly:
	0x03256280 LDR X8, [X8 + 0x618]
	0x03256284 MOV W1, W19
	0x03256288 LDR X0, [X8]
	0x0325628C BL 0x1C16D6C
	0x03256290 LDR X8, [X22]
	0x03256294 MOV X23, X0
	0x03256298 MOV X0, X22
	0x0325629C MOV X1, X23
	0x032562A0 LDP X9, X2, [X8 + 0x198]
	0x032562A4 BLR X9
	0x032562A8 MOV X2, X21
	0x032562AC MOV W3, W20
	0x032562B0 MOV W4, W19
	0x032562B4 LDP X20, X19, [X31 + 0x20]
	0x032562B8 LDP X22, X21, [X31 + 0x10]
	0x032562BC MOV X0, X23
	0x032562C0 MOV W1, W31
	0x032562C4 MOV X5, X31
	0x032562C8 LDP X30, X23, [X31], #0x30
	0x032562CC B 0x339FCE8
	0x032562D0 LDP X20, X19, [X31 + 0x20]
	0x032562D4 LDP X22, X21, [X31 + 0x10]
	0x032562D8 LDP X30, X23, [X31], #0x30
	0x032562DC RET
	0x032562E0 ADRP X0, 0xEA2000
	0x032562E4 LDR X0, [X0 + 0x528]
	0x032562E8 BL 0x1C16D08
	0x032562EC BL 0x1C16F10
	0x032562F0 MOV X19, X0
	0x032562F4 ADRP X0, 0xEA9000
	0x032562F8 LDR X0, [X0 + 0x690]
	0x032562FC BL 0x1C16D08
	0x03256300 MOV X1, X0
	0x03256304 MOV X0, X19
	0x03256308 MOV X2, X31
	0x0325630C BL 0x330E100
	0x03256310 ADRP X0, 0xECD000
	0x03256314 LDR X0, [X0 + 0x148]
	0x03256318 BL 0x1C16D08
	0x0325631C MOV X1, X0
	0x03256320 MOV X0, X19
	0x03256324 BL 0x1C16DEC
	0x03256328 ADRP X0, 0xEC5000
	0x0325632C LDR X0, [X0 + 0x670]
	0x03256330 BL 0x1C16D08
	0x03256334 MOV X1, X31
	0x03256338 BL 0x33BDD84
	0x0325633C MOV X19, X0
	0x03256340 ADRP X0, 0xEA5000
	0x03256344 LDR X0, [X0 + 0x760]
	0x03256348 BL 0x1C16D08
	0x0325634C BL 0x1C16F10
	0x03256350 MOV X20, X0
	0x03256354 ADRP X0, 0xECC000
	0x03256358 LDR X0, [X0 + 0xD90]
	0x0325635C B 0x3256394
	0x03256360 ADRP X0, 0xEC5000
	0x03256364 LDR X0, [X0 + 0x670]
	0x03256368 BL 0x1C16D08
	0x0325636C MOV X1, X31
	0x03256370 BL 0x33BDD84
	0x03256374 MOV X19, X0
	0x03256378 ADRP X0, 0xEA5000
	0x0325637C LDR X0, [X0 + 0x760]
	0x03256380 BL 0x1C16D08
	0x03256384 BL 0x1C16F10
	0x03256388 MOV X20, X0
	0x0325638C ADRP X0, 0xEC5000
	0x03256390 LDR X0, [X0 + 0x648]
	0x03256394 BL 0x1C16D08
	0x03256398 MOV X1, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1187000
	006 Move X20, 0xECB000
	007 Move W8, [X21+1321]
	008 Move X20, [X20+3032]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0xE9E000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move X0, 0xECB000
	018 Move X0, [X0+3032]
	019 Call 0x1C17CF4
	020 Move X0, 0xEA6000
	021 Move X0, [X0+1384]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+1321], W8
	025 Move X0, X19
	026 Move X1, X31
	027 Call HashAlgorithm..ctor, X0
	028 Move W8, 384
	029 Move [X19+20], W8
	030 Move X0, [X20]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X31
	036 Call CryptoConfig.get_AllowOnlyFipsAlgorithms
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {64}
	041 Move X20, 0xEA6000
	042 Move X20, [X20+1384]
	043 Move X21, 0xE9E000
	044 Move W1, 8
	045 Move X0, [X20]
	046 Move X21, [X21+1560]
	047 Call 0x1C17D6C
	048 Move [X19+56], X0
	049 Move X0, [X21]
	050 Move W1, 128
	051 Call 0x1C17D6C
	052 Move [X19+40], X0
	053 Move X0, [X20]
	054 Move W1, 80
	055 Call 0x1C17D6C
	056 Move [X19+64], X0
	057 Move X0, X19
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Call SHA384Managed.InitializeState, X0
	063 Return 
	064 Move X0, 0xECE000
	065 Move X0, [X0+160]
	066 Call 0x1C17D08
	067 Move X1, X31
	068 Call Environment.GetResourceString, X0
	069 Move X19, X0
	070 Move X0, 0xE9E000
	071 Move X0, [X0+1456]
	072 Call 0x1C17D08
	073 Call 0x1C17F10
	074 Move X1, X19
	075 Move X2, X31
	076 Move X20, X0
	077 Call InvalidOperationException..ctor, X0, X1
	078 Move X0, 0xECE000
	079 Move X0, [X0+216]
	080 Call 0x1C17D08
	081 Move X1, X0
	082 Move X0, X20
	083 Call 0x1C17DEC

Method: System.Void Initialize()

Disassembly:
	0x0325F80C CMP W19, 0x1
	0x0325F810 B.LT 0x325F848
	0x0325F814 LDR X2, [X22 + 0x28]
	0x0325F818 MOV X0, X21
	0x0325F81C MOV W1, W20
	0x0325F820 MOV W3, W25
	0x0325F824 MOV W4, W19
	0x0325F828 LDP X20, X19, [X31 + 0x50]
	0x0325F82C LDP X22, X21, [X31 + 0x40]
	0x0325F830 LDP X24, X23, [X31 + 0x30]
	0x0325F834 LDP X26, X25, [X31 + 0x20]
	0x0325F838 LDP X28, X27, [X31 + 0x10]
	0x0325F83C MOV X5, X31
	0x0325F840 LDR X30, [X31], #0x60
	0x0325F844 B 0x33A8750
	0x0325F848 LDP X20, X19, [X31 + 0x50]
	0x0325F84C LDP X22, X21, [X31 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call SHA384Managed.InitializeState, X0
	005 Move X0, [X19+40]
	006 Compare X0, 0
	007 JumpIfEqual {22}
	008 Move W2, [X0+24]
	009 Move W1, W31
	010 Move X3, X31
	011 Call Array.Clear, X0, X1, X2
	012 Move X0, [X19+64]
	013 Compare X0, 0
	014 JumpIfEqual {22}
	015 Move W2, [X0+24]
	016 Move W1, W31
	017 Move X3, X31
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Call Array.Clear, X0, X1, X2
	021 Return 
	022 Call 0x1C17F20

Method: System.Void HashCore(System.Byte[] rgb, System.Int32 ibStart, System.Int32 cbSize)

Disassembly:
	0x0325F850 LDP X24, X23, [X31 + 0x30]

ISIL:
No ISIL was generated
Method: System.Byte[] HashFinal()

Disassembly:
	0x0325FA1C STP X26, X25, [X31 + 0x40]

ISIL:
No ISIL was generated
Method: System.Void InitializeState()

Disassembly:
	0x0325F70C LDR X2, [X22 + 0x28]
	0x0325F710 AND W25, W8, 0x7F
	0x0325F714 CBZ X2, 0x325F72C
	0x0325F718 LDR W8, [X2 + 0x18]
	0x0325F71C ADD X9, X2, 0x20
	0x0325F720 CMP W8, 0x0
	0x0325F724 CSEL X24, X31, X9, EQ
	0x0325F728 B 0x325F730
	0x0325F72C MOV X24, X31
	0x0325F730 LDR X8, [X22 + 0x40]
	0x0325F734 CBZ X8, 0x325F74C
	0x0325F738 LDR W9, [X8 + 0x18]
	0x0325F73C ADD X8, X8, 0x20
	0x0325F740 CMP W9, 0x0
	0x0325F744 CSEL X26, X31, X8, EQ
	0x0325F748 B 0x325F750
	0x0325F74C MOV X26, X31
	0x0325F750 ADRP X28, 0xEC4000
	0x0325F754 LDR X28, [X28 + 0xE0]
	0x0325F758 CBZ W25, 0x325F7B4
	0x0325F75C ADD W8, W25, W19
	0x0325F760 CMP W8, 0x80
	0x0325F764 B.LT 0x325F7B4
	0x0325F768 MOVZ W8, 0x80
	0x0325F76C SUB W27, W8, W25
	0x0325F770 MOV X0, X21
	0x0325F774 MOV W1, W20
	0x0325F778 MOV W3, W25
	0x0325F77C MOV W4, W27
	0x0325F780 MOV X5, X31
	0x0325F784 BL 0x33A8750
	0x0325F788 LDR X0, [X28]
	0x0325F78C ADD W20, W27, W20
	0x0325F790 SUB W19, W19, W27
	0x0325F794 LDR W8, [X0 + 0xE0]
	0x0325F798 CBNZ W8, 0x325F7A0
	0x0325F79C BL 0x1C16DFC
	0x0325F7A0 MOV X0, X26
	0x0325F7A4 MOV X1, X23
	0x0325F7A8 MOV X2, X24
	0x0325F7AC BL 0x325FA10
	0x0325F7B0 MOV W25, W31
	0x0325F7B4 CMP W19, 0x80
	0x0325F7B8 B.LT 0x325F80C
	0x0325F7BC LDR X2, [X22 + 0x28]
	0x0325F7C0 MOVZ W4, 0x80
	0x0325F7C4 MOV X0, X21
	0x0325F7C8 MOV W1, W20
	0x0325F7CC MOV W3, W31
	0x0325F7D0 MOV X5, X31
	0x0325F7D4 BL 0x33A8750
	0x0325F7D8 LDR X0, [X28]
	0x0325F7DC SUB W19, W19, 0x80
	0x0325F7E0 LDR W8, [X0 + 0xE0]
	0x0325F7E4 CBNZ W8, 0x325F7EC
	0x0325F7E8 BL 0x1C16DFC
	0x0325F7EC MOV X0, X26
	0x0325F7F0 MOV X1, X23
	0x0325F7F4 MOV X2, X24
	0x0325F7F8 ADD W20, W20, 0x80
	0x0325F7FC BL 0x325FA10
	0x0325F800 ADD W8, W19, 0x80
	0x0325F804 CMP W8, 0xFF
	0x0325F808 B.GT 0x325F7BC

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+56]
	003 Move [X0+48], X31
	004 Compare X8, 0
	005 JumpIfEqual {59}
	006 Move W9, [X8+24]
	007 Compare W9, 0
	008 JumpIfEqual {58}
	009 Move X10, 0x9ED8
	010 NotImplemented "Instruction MOVK not yet implemented."
	011 NotImplemented "Instruction MOVK not yet implemented."
	012 NotImplemented "Instruction MOVK not yet implemented."
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move [X8+32], X10
	015 Move X10, 0xD507
	016 NotImplemented "Instruction MOVK not yet implemented."
	017 NotImplemented "Instruction MOVK not yet implemented."
	018 NotImplemented "Instruction MOVK not yet implemented."
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move [X8+40], X10
	021 Move X10, 0xDD17
	022 NotImplemented "Instruction MOVK not yet implemented."
	023 NotImplemented "Instruction MOVK not yet implemented."
	024 NotImplemented "Instruction MOVK not yet implemented."
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move [X8+48], X10
	027 Move X10, 0x5939
	028 NotImplemented "Instruction MOVK not yet implemented."
	029 NotImplemented "Instruction MOVK not yet implemented."
	030 NotImplemented "Instruction MOVK not yet implemented."
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move [X8+56], X10
	033 Move X10, 2865
	034 NotImplemented "Instruction MOVK not yet implemented."
	035 NotImplemented "Instruction MOVK not yet implemented."
	036 NotImplemented "Instruction MOVK not yet implemented."
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move [X8+64], X10
	039 Move X10, 0x1511
	040 NotImplemented "Instruction MOVK not yet implemented."
	041 NotImplemented "Instruction MOVK not yet implemented."
	042 NotImplemented "Instruction MOVK not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move [X8+72], X10
	045 Move X10, 0x8FA7
	046 NotImplemented "Instruction MOVK not yet implemented."
	047 NotImplemented "Instruction MOVK not yet implemented."
	048 NotImplemented "Instruction MOVK not yet implemented."
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move [X8+80], X10
	051 Move X9, 0x4FA4
	052 NotImplemented "Instruction MOVK not yet implemented."
	053 NotImplemented "Instruction MOVK not yet implemented."
	054 NotImplemented "Instruction MOVK not yet implemented."
	055 Move [X8+88], X9
	056 Move X30, [X31+16]
	057 Return 
	058 Call 0x1C17F28
	059 Call 0x1C17F20

Method: System.Void _HashData(System.Byte[] partIn, System.Int32 ibStart, System.Int32 cbSize)

Disassembly:
	0x0325F854 LDP X26, X25, [X31 + 0x20]
	0x0325F858 LDP X28, X27, [X31 + 0x10]
	0x0325F85C LDR X30, [X31], #0x60
	0x0325F860 RET
	0x0325F864 B 0x325F868
	0x0325F868 STP X30, X21, [X31 - 0x20]!
	0x0325F86C STP X20, X19, [X31 + 0x10]
	0x0325F870 ADRP X20, 0x117D000
	0x0325F874 ADRP X21, 0xE94000
	0x0325F878 LDRB W8, [X20 + 0x536]
	0x0325F87C LDR X21, [X21 + 0x618]
	0x0325F880 MOV X19, X0
	0x0325F884 TBNZ X8, 0x0, 0x325F89C
	0x0325F888 ADRP X0, 0xE94000
	0x0325F88C LDR X0, [X0 + 0x618]
	0x0325F890 BL 0x1C16CF4
	0x0325F894 MOVZ W8, 0x1
	0x0325F898 STRB W8, [X20 + 0x536]
	0x0325F89C LDR X0, [X21]
	0x0325F8A0 MOVZ W1, 0x40
	0x0325F8A4 BL 0x1C16D6C
	0x0325F8A8 LDR X8, [X19 + 0x30]
	0x0325F8AC MOV X20, X0
	0x0325F8B0 MOVZ W9, 0x100
	0x0325F8B4 LDR X0, [X21]
	0x0325F8B8 AND X8, X8, 0x7F
	0x0325F8BC CMP W8, 0x70
	0x0325F8C0 MOVZ W10, 0x80
	0x0325F8C4 CSEL X9, X10, X9, CC
	0x0325F8C8 SUB X21, X9, X8
	0x0325F8CC MOV W1, W21
	0x0325F8D0 BL 0x1C16D6C
	0x0325F8D4 CBZ X0, 0x325FA0C
	0x0325F8D8 LDR W8, [X0 + 0x18]
	0x0325F8DC MOV X1, X0
	0x0325F8E0 CBZ W8, 0x325FA08
	0x0325F8E4 MOV W9, W21
	0x0325F8E8 SXTW X9, W9
	0x0325F8EC SUB X10, X9, 0x8
	0x0325F8F0 MOVZ W11, 0x80
	0x0325F8F4 CMP W10, W8
	0x0325F8F8 STRB W11, [X1 + 0x20]
	0x0325F8FC B.CS 0x325FA08
	0x0325F900 LDR X8, [X19 + 0x30]
	0x0325F904 ADD X10, X1, X10
	0x0325F908 UBFM X11, X8, 0x35, 0x3F
	0x0325F90C STRB W11, [X10 + 0x20]
	0x0325F910 LDR W11, [X1 + 0x18]
	0x0325F914 SUB X10, X21, 0x7
	0x0325F918 CMP W10, W11
	0x0325F91C B.CS 0x325FA08
	0x0325F920 UBFM X11, X8, 0x2D, 0x3F
	0x0325F924 ADD X10, X1, X10
	0x0325F928 STRB W11, [X10 + 0x20]
	0x0325F92C LDR W11, [X1 + 0x18]
	0x0325F930 SUB X10, X9, 0x6
	0x0325F934 CMP W10, W11
	0x0325F938 B.CS 0x325FA08
	0x0325F93C UBFM X11, X8, 0x25, 0x3F
	0x0325F940 ADD X10, X1, X10
	0x0325F944 STRB W11, [X10 + 0x20]
	0x0325F948 LDR W11, [X1 + 0x18]
	0x0325F94C SUB X10, X9, 0x5
	0x0325F950 CMP W10, W11
	0x0325F954 B.CS 0x325FA08
	0x0325F958 UBFM X11, X8, 0x1D, 0x3F
	0x0325F95C ADD X10, X1, X10
	0x0325F960 STRB W11, [X10 + 0x20]
	0x0325F964 LDR W11, [X1 + 0x18]
	0x0325F968 SUB X10, X9, 0x4
	0x0325F96C CMP W10, W11
	0x0325F970 B.CS 0x325FA08
	0x0325F974 UBFM X11, X8, 0x15, 0x3F
	0x0325F978 ADD X10, X1, X10
	0x0325F97C STRB W11, [X10 + 0x20]
	0x0325F980 LDR W10, [X1 + 0x18]
	0x0325F984 SUB X9, X9, 0x3
	0x0325F988 CMP W9, W10
	0x0325F98C B.CS 0x325FA08
	0x0325F990 UBFM X10, X8, 0xD, 0x3F
	0x0325F994 ADD X9, X1, X9
	0x0325F998 STRB W10, [X9 + 0x20]
	0x0325F99C LDR W10, [X1 + 0x18]
	0x0325F9A0 SUB W9, W21, 0x2
	0x0325F9A4 CMP W9, W10
	0x0325F9A8 B.CS 0x325FA08
	0x0325F9AC UBFM X10, X8, 0x5, 0x3F
	0x0325F9B0 ADD X9, X1, W9, UXTW
	0x0325F9B4 STRB W10, [X9 + 0x20]
	0x0325F9B8 LDR W10, [X1 + 0x18]
	0x0325F9BC SUB W9, W21, 0x1
	0x0325F9C0 CMP W9, W10
	0x0325F9C4 B.CS 0x325FA08
	0x0325F9C8 UBFM W8, W8, 0x1D, 0x1C
	0x0325F9CC ADD X9, X1, W9, UXTW
	0x0325F9D0 STRB W8, [X9 + 0x20]
	0x0325F9D4 LDR W3, [X1 + 0x18]
	0x0325F9D8 MOV X0, X19
	0x0325F9DC MOV W2, W31
	0x0325F9E0 BL 0x325F69C
	0x0325F9E4 LDR X1, [X19 + 0x38]
	0x0325F9E8 MOVZ W2, 0x8
	0x0325F9EC MOV X0, X20
	0x0325F9F0 BL 0x325FF7C
	0x0325F9F4 STR X20, [X19 + 0x18]
	0x0325F9F8 MOV X0, X20
	0x0325F9FC LDP X20, X19, [X31 + 0x10]
	0x0325FA00 LDP X30, X21, [X31], #0x20
	0x0325FA04 RET
	0x0325FA08 BL 0x1C16F28
	0x0325FA0C BL 0x1C16F20
	0x0325FA10 SUB X31, X31, 0x80
	0x0325FA14 STP X29, X30, [X31 + 0x20]
	0x0325FA18 STP X28, X27, [X31 + 0x30]

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X23, 0x117E000
	013 Move W8, [X23+1322]
	014 Move W19, W3
	015 Move W20, W2
	016 Move X21, X1
	017 Move X22, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xEC5000
	023 Move X0, [X0+208]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+1322], W8
	027 Move X8, [X22+48]
	028 Move X9, [X22+56]
	029 Add X10, X8, W19
	030 Move [X22+48], X10
	031 Compare X9, 0
	032 JumpIfEqual {37}
	033 Move W10, [X9+24]
	034 Add X9, X9, 32
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CSEL not yet implemented."
	037 Move X23, X31
	038 Move X2, [X22+40]
	039 And W25, W8, 127
	040 Compare X2, 0
	041 JumpIfEqual {46}
	042 Move W8, [X2+24]
	043 Add X9, X2, 32
	044 NotImplemented "Instruction CMP not yet implemented."
	045 NotImplemented "Instruction CSEL not yet implemented."
	046 Move X24, X31
	047 Move X8, [X22+64]
	048 Compare X8, 0
	049 JumpIfEqual {54}
	050 Move W9, [X8+24]
	051 Add X8, X8, 32
	052 NotImplemented "Instruction CMP not yet implemented."
	053 NotImplemented "Instruction CSEL not yet implemented."
	054 Move X26, X31
	055 Move X28, 0xEC5000
	056 Move X28, [X28+208]
	057 Compare W25, 0
	058 JumpIfEqual {81}
	059 Add W8, W25, W19
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move W8, 128
	062 Subtract W27, W8, W25
	063 Move X0, X21
	064 Move W1, W20
	065 Move W3, W25
	066 Move W4, W27
	067 Move X5, X31
	068 Call Buffer.InternalBlockCopy, X0, X1, X2, X3, X4
	069 Move X0, [X28]
	070 Add W20, W27, W20
	071 Subtract W19, W19, W27
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1C17DFC
	076 Move X0, X26
	077 Move X1, X23
	078 Move X2, X24
	079 Call SHA384Managed.SHATransform, X0, X1, X2
	080 Move W25, W31
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move X2, [X22+40]
	083 Move W4, 128
	084 Move X0, X21
	085 Move W1, W20
	086 Move W3, W31
	087 Move X5, X31
	088 Call Buffer.InternalBlockCopy, X0, X1, X2, X3, X4
	089 Move X0, [X28]
	090 Subtract W19, W19, 128
	091 Move W8, [X0+224]
	092 Compare W8, 0
	093 JumpIfNotEqual {95}
	094 Call 0x1C17DFC
	095 Move X0, X26
	096 Move X1, X23
	097 Move X2, X24
	098 Add W20, W20, 128
	099 Call SHA384Managed.SHATransform, X0, X1, X2
	100 Add W8, W19, 128
	101 NotImplemented "Instruction CMP not yet implemented."
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move X2, [X22+40]
	104 Move X0, X21
	105 Move W1, W20
	106 Move W3, W25
	107 Move W4, W19
	108 Move X20, [X31+80]
	109 Move X19, [X31+88]
	110 Move X22, [X31+64]
	111 Move X21, [X31+72]
	112 Move X24, [X31+48]
	113 Move X23, [X31+56]
	114 Move X26, [X31+32]
	115 Move X25, [X31+40]
	116 Move X28, [X31+16]
	117 Move X27, [X31+24]
	118 Move X5, X31
	119 Move X30, [X31+96]
	120 Call Buffer.InternalBlockCopy, X0, X1, X2, X3, X4
	121 Return 
	122 Move X20, [X31+80]
	123 Move X19, [X31+88]
	124 Move X22, [X31+64]
	125 Move X21, [X31+72]
	126 Move X24, [X31+48]
	127 Move X23, [X31+56]
	128 Move X26, [X31+32]
	129 Move X25, [X31+40]
	130 Move X28, [X31+16]
	131 Move X27, [X31+24]
	132 Move X30, [X31+96]
	133 Return 

Method: System.Byte[] _EndHash()

Disassembly:
	0x0325FA20 STP X24, X23, [X31 + 0x50]
	0x0325FA24 STP X22, X21, [X31 + 0x60]
	0x0325FA28 STP X20, X19, [X31 + 0x70]
	0x0325FA2C ADRP X19, 0x117D000
	0x0325FA30 LDRB W8, [X19 + 0x537]
	0x0325FA34 MOV X29, X2
	0x0325FA38 MOV X20, X1
	0x0325FA3C MOV X21, X0
	0x0325FA40 TBNZ X8, 0x0, 0x325FA58
	0x0325FA44 ADRP X0, 0xEC4000
	0x0325FA48 LDR X0, [X0 + 0xE0]
	0x0325FA4C BL 0x1C16CF4
	0x0325FA50 MOVZ W8, 0x1
	0x0325FA54 STRB W8, [X19 + 0x537]
	0x0325FA58 LDP X22, X8, [X20 + 0x20]
	0x0325FA5C LDP X25, X28, [X20]
	0x0325FA60 LDP X26, X27, [X20 + 0x10]
	0x0325FA64 LDP X23, X24, [X20 + 0x30]
	0x0325FA68 MOVZ W1, 0x10
	0x0325FA6C MOV X0, X21
	0x0325FA70 MOV X2, X29
	0x0325FA74 STP X20, X8, [X31 + 0x8]
	0x0325FA78 BL 0x3260138
	0x0325FA7C ADRP X20, 0xEC4000
	0x0325FA80 LDR X20, [X20 + 0xE0]
	0x0325FA84 LDR X0, [X20]
	0x0325FA88 LDR W8, [X0 + 0xE0]
	0x0325FA8C CBNZ W8, 0x325FA94
	0x0325FA90 BL 0x1C16DFC
	0x0325FA94 MOV X0, X21
	0x0325FA98 STR X21, [X31 + 0x18]
	0x0325FA9C BL 0x32601BC
	0x0325FAA0 MOV X29, X31
	0x0325FAA4 MOVZ W19, 0x58
	0x0325FAA8 LDR X0, [X20]
	0x0325FAAC LDR W8, [X0 + 0xE0]
	0x0325FAB0 CBNZ W8, 0x325FAB8
	0x0325FAB4 BL 0x1C16DFC
	0x0325FAB8 MOV X0, X22
	0x0325FABC BL 0x3260264
	0x0325FAC0 LDR X8, [X20]
	0x0325FAC4 LDR X21, [X31 + 0x18]
	0x0325FAC8 LDR X8, [X8 + 0xB8]
	0x0325FACC LDR X8, [X8]
	0x0325FAD0 CBZ X8, 0x325FF74
	0x0325FAD4 LDR W9, [X8 + 0x18]
	0x0325FAD8 CMP X29, X9
	0x0325FADC B.CS 0x325FF78
	0x0325FAE0 LDR X9, [X31 + 0x10]
	0x0325FAE4 ADD X8, X8, X19
	0x0325FAE8 ADD X11, X21, X19
	0x0325FAEC LDUR X8, [X8 - 0x38]
	0x0325FAF0 AND X9, X22, X9, 0x0
	0x0325FAF4 BIC X10, X23, X22, 0x0
	0x0325FAF8 LDUR X11, [X11 - 0x58]
	0x0325FAFC ADD X9, X9, X24
	0x0325FB00 ADD X9, X9, X10
	0x0325FB04 ADD X9, X9, X0
	0x0325FB08 ADD X8, X9, X8
	0x0325FB0C ADD X20, X8, X11
	0x0325FB10 MOV X0, X25
	0x0325FB14 ADD X24, X20, X27
	0x0325FB18 BL 0x32602D0
	0x0325FB1C MOV X27, X0
	0x0325FB20 MOV X0, X24
	0x0325FB24 BL 0x3260264
	0x0325FB28 ADRP X8, 0xEC4000
	0x0325FB2C LDR X8, [X8 + 0xE0]
	0x0325FB30 LDR X8, [X8]
	0x0325FB34 LDR X8, [X8 + 0xB8]
	0x0325FB38 LDR X8, [X8]
	0x0325FB3C CBZ X8, 0x325FF74
	0x0325FB40 LDR W9, [X8 + 0x18]
	0x0325FB44 ADD X29, X29, 0x1
	0x0325FB48 CMP X29, X9
	0x0325FB4C B.CS 0x325FF78
	0x0325FB50 ADD X11, X0, X23
	0x0325FB54 AND X12, X24, X22, 0x0
	0x0325FB58 EOR X9, X28, X26, 0x0
	0x0325FB5C ADD X11, X11, X12
	0x0325FB60 LDR X12, [X31 + 0x10]
	0x0325FB64 AND X10, X28, X26, 0x0
	0x0325FB68 ADD X8, X8, X19
	0x0325FB6C AND X9, X9, X25, 0x0
	0x0325FB70 EOR X9, X9, X10, 0x0
	0x0325FB74 ADD X10, X21, X19
	0x0325FB78 LDUR X8, [X8 - 0x30]
	0x0325FB7C LDUR X10, [X10 - 0x50]
	0x0325FB80 BIC X12, X12, X24, 0x0
	0x0325FB84 ADD X9, X20, X9
	0x0325FB88 ADD X27, X9, X27
	0x0325FB8C ADD X9, X11, X12
	0x0325FB90 ADD X8, X9, X8
	0x0325FB94 ADD X21, X8, X10
	0x0325FB98 MOV X0, X27
	0x0325FB9C ADD X23, X21, X26
	0x0325FBA0 BL 0x32602D0
	0x0325FBA4 MOV X26, X0
	0x0325FBA8 MOV X0, X23
	0x0325FBAC BL 0x3260264
	0x0325FBB0 ADRP X8, 0xEC4000
	0x0325FBB4 LDR X8, [X8 + 0xE0]
	0x0325FBB8 LDR X8, [X8]
	0x0325FBBC LDR X8, [X8 + 0xB8]
	0x0325FBC0 LDR X8, [X8]
	0x0325FBC4 CBZ X8, 0x325FF74
	0x0325FBC8 LDR W9, [X8 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x117E000
	006 Move X21, 0xE95000
	007 Move W8, [X20+1323]
	008 Move X21, [X21+1560]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE95000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1323], W8
	019 Move X0, [X21]
	020 Move W1, 48
	021 Call 0x1C17D6C
	022 Move X8, [X19+48]
	023 Move X20, X0
	024 Move W9, 256
	025 Move X0, [X21]
	026 And X8, X8, 127
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move W10, 128
	029 NotImplemented "Instruction CSEL not yet implemented."
	030 Subtract X21, X9, X8
	031 Move W1, W21
	032 Call 0x1C17D6C
	033 Compare X0, 0
	034 JumpIfEqual {124}
	035 Move W8, [X0+24]
	036 Move X1, X0
	037 Compare W8, 0
	038 JumpIfEqual {123}
	039 Move W9, W21
	040 Move X9, W9
	041 Subtract X10, X9, 8
	042 Move W11, 128
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move [X1+32], W11
	045 Move X8, [X19+48]
	046 Add X10, X1, X10
	047 Move X11, X8
	048 ShiftRight X11, 53
	049 And X11, X11, 0x7FFFFFFF
	050 Move [X10+32], W11
	051 Move W11, [X1+24]
	052 Subtract X10, X21, 7
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X11, X8
	055 ShiftRight X11, 45
	056 And X11, X11, 0x7FFFFFFF
	057 Add X10, X1, X10
	058 Move [X10+32], W11
	059 Move W11, [X1+24]
	060 Subtract X10, X9, 6
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X11, X8
	063 ShiftRight X11, 37
	064 And X11, X11, 0x7FFFFFFF
	065 Add X10, X1, X10
	066 Move [X10+32], W11
	067 Move W11, [X1+24]
	068 Subtract X10, X9, 5
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move X11, X8
	071 ShiftRight X11, 29
	072 And X11, X11, 0x7FFFFFFF
	073 Add X10, X1, X10
	074 Move [X10+32], W11
	075 Move W11, [X1+24]
	076 Subtract X10, X9, 4
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X11, X8
	079 ShiftRight X11, 21
	080 And X11, X11, 0x7FFFFFFF
	081 Add X10, X1, X10
	082 Move [X10+32], W11
	083 Move W10, [X1+24]
	084 Subtract X9, X9, 3
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X10, X8
	087 ShiftRight X10, 13
	088 And X10, X10, 0x7FFFFFFF
	089 Add X9, X1, X9
	090 Move [X9+32], W10
	091 Move W10, [X1+24]
	092 Subtract W9, W21, 2
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move X10, X8
	095 ShiftRight X10, 5
	096 And X10, X10, 0x7FFFFFFF
	097 Add X9, X1, W9
	098 Move [X9+32], W10
	099 Move W10, [X1+24]
	100 Subtract W9, W21, 1
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move W8, W8
	103 ShiftRight W8, 29
	104 And W8, W8, 0xFFFFFFF
	105 Add X9, X1, W9
	106 Move [X9+32], W8
	107 Move W3, [X1+24]
	108 Move X0, X19
	109 Move W2, W31
	110 Call SHA384Managed._HashData, X0, X1, X2, X3
	111 Move X1, [X19+56]
	112 Move W2, 6
	113 Move X0, X20
	114 Move X3, X31
	115 Call Utils.QuadWordToBigEndian, X0, X1, X2
	116 Move [X19+24], X20
	117 Move X0, X20
	118 Move X20, [X31+16]
	119 Move X19, [X31+24]
	120 Move X30, [X31+32]
	121 Move X21, [X31+40]
	122 Return X0
	123 Call 0x1C17F28
	124 Call 0x1C17F20

Method: System.Void SHATransform(System.UInt64* expandedBuffer, System.UInt64* state, System.Byte* block)

Disassembly:
	0x0325FBCC ADD X20, X29, 0x1
	0x0325FBD0 CMP X20, X9
	0x0325FBD4 B.CS 0x325FF78
	0x0325FBD8 EOR X9, X25, X28, 0x0
	0x0325FBDC AND X10, X25, X28, 0x0
	0x0325FBE0 AND X9, X27, X9, 0x0
	0x0325FBE4 EOR X9, X9, X10, 0x0
	0x0325FBE8 LDR X10, [X31 + 0x18]
	0x0325FBEC LDR X11, [X31 + 0x10]
	0x0325FBF0 ADD X8, X8, X19
	0x0325FBF4 LDUR X8, [X8 - 0x28]
	0x0325FBF8 ADD X10, X10, X19
	0x0325FBFC ADD X11, X0, X11
	0x0325FC00 AND X12, X23, X24, 0x0
	0x0325FC04 LDUR X10, [X10 - 0x48]
	0x0325FC08 ADD X11, X11, X12
	0x0325FC0C BIC X12, X22, X23, 0x0
	0x0325FC10 ADD X9, X21, X9
	0x0325FC14 ADD X26, X9, X26
	0x0325FC18 ADD X9, X11, X12
	0x0325FC1C ADD X8, X9, X8
	0x0325FC20 ADD X29, X8, X10
	0x0325FC24 MOV X0, X26
	0x0325FC28 ADD X21, X29, X28
	0x0325FC2C BL 0x32602D0
	0x0325FC30 MOV X28, X0
	0x0325FC34 MOV X0, X21
	0x0325FC38 BL 0x3260264
	0x0325FC3C ADRP X8, 0xEC4000
	0x0325FC40 LDR X8, [X8 + 0xE0]
	0x0325FC44 LDR X8, [X8]
	0x0325FC48 LDR X8, [X8 + 0xB8]
	0x0325FC4C LDR X8, [X8]
	0x0325FC50 CBZ X8, 0x325FF74
	0x0325FC54 LDR W9, [X8 + 0x18]
	0x0325FC58 ADD X20, X20, 0x1
	0x0325FC5C CMP X20, X9
	0x0325FC60 B.CS 0x325FF78
	0x0325FC64 EOR X9, X27, X25, 0x0
	0x0325FC68 AND X10, X27, X25, 0x0
	0x0325FC6C AND X9, X26, X9, 0x0
	0x0325FC70 EOR X9, X9, X10, 0x0
	0x0325FC74 LDR X10, [X31 + 0x18]
	0x0325FC78 ADD X8, X8, X19
	0x0325FC7C LDUR X8, [X8 - 0x20]
	0x0325FC80 ADD X11, X0, X22
	0x0325FC84 ADD X10, X10, X19
	0x0325FC88 AND X12, X21, X23, 0x0
	0x0325FC8C LDUR X10, [X10 - 0x40]
	0x0325FC90 ADD X11, X11, X12
	0x0325FC94 BIC X12, X24, X21, 0x0
	0x0325FC98 ADD X9, X29, X9
	0x0325FC9C ADD X28, X9, X28
	0x0325FCA0 ADD X9, X11, X12
	0x0325FCA4 ADD X8, X9, X8
	0x0325FCA8 ADD X29, X8, X10
	0x0325FCAC MOV X0, X28
	0x0325FCB0 ADD X22, X29, X25
	0x0325FCB4 BL 0x32602D0
	0x0325FCB8 MOV X25, X0
	0x0325FCBC MOV X0, X22
	0x0325FCC0 BL 0x3260264
	0x0325FCC4 ADRP X8, 0xEC4000
	0x0325FCC8 LDR X8, [X8 + 0xE0]
	0x0325FCCC LDR X8, [X8]
	0x0325FCD0 LDR X8, [X8 + 0xB8]
	0x0325FCD4 LDR X8, [X8]
	0x0325FCD8 CBZ X8, 0x325FF74
	0x0325FCDC LDR W9, [X8 + 0x18]
	0x0325FCE0 ADD X20, X20, 0x1
	0x0325FCE4 CMP X20, X9
	0x0325FCE8 B.CS 0x325FF78
	0x0325FCEC EOR X9, X26, X27, 0x0
	0x0325FCF0 AND X10, X26, X27, 0x0
	0x0325FCF4 AND X9, X28, X9, 0x0
	0x0325FCF8 EOR X9, X9, X10, 0x0
	0x0325FCFC LDR X10, [X31 + 0x18]
	0x0325FD00 ADD X8, X8, X19
	0x0325FD04 LDUR X8, [X8 - 0x18]
	0x0325FD08 ADD X11, X0, X24
	0x0325FD0C ADD X10, X10, X19
	0x0325FD10 AND X12, X22, X21, 0x0
	0x0325FD14 LDUR X10, [X10 - 0x38]
	0x0325FD18 ADD X11, X11, X12
	0x0325FD1C BIC X12, X23, X22, 0x0
	0x0325FD20 ADD X9, X29, X9
	0x0325FD24 ADD X25, X9, X25
	0x0325FD28 ADD X9, X11, X12
	0x0325FD2C ADD X8, X9, X8
	0x0325FD30 ADD X29, X8, X10
	0x0325FD34 MOV X0, X25
	0x0325FD38 ADD X24, X29, X27
	0x0325FD3C BL 0x32602D0
	0x0325FD40 MOV X27, X0
	0x0325FD44 MOV X0, X24
	0x0325FD48 BL 0x3260264
	0x0325FD4C ADRP X8, 0xEC4000
	0x0325FD50 LDR X8, [X8 + 0xE0]
	0x0325FD54 LDR X8, [X8]
	0x0325FD58 LDR X8, [X8 + 0xB8]
	0x0325FD5C LDR X8, [X8]
	0x0325FD60 CBZ X8, 0x325FF74
	0x0325FD64 LDR W9, [X8 + 0x18]
	0x0325FD68 ADD X20, X20, 0x1
	0x0325FD6C CMP X20, X9
	0x0325FD70 B.CS 0x325FF78
	0x0325FD74 EOR X9, X28, X26, 0x0
	0x0325FD78 AND X10, X28, X26, 0x0
	0x0325FD7C AND X9, X25, X9, 0x0
	0x0325FD80 EOR X9, X9, X10, 0x0
	0x0325FD84 LDR X10, [X31 + 0x18]
	0x0325FD88 ADD X8, X8, X19
	0x0325FD8C LDUR X8, [X8 - 0x10]
	0x0325FD90 ADD X11, X0, X23
	0x0325FD94 ADD X10, X10, X19
	0x0325FD98 AND X12, X24, X22, 0x0
	0x0325FD9C LDUR X10, [X10 - 0x30]
	0x0325FDA0 ADD X11, X11, X12
	0x0325FDA4 BIC X12, X21, X24, 0x0
	0x0325FDA8 ADD X9, X29, X9
	0x0325FDAC ADD X27, X9, X27
	0x0325FDB0 ADD X9, X11, X12
	0x0325FDB4 ADD X8, X9, X8
	0x0325FDB8 ADD X29, X8, X10
	0x0325FDBC MOV X0, X27
	0x0325FDC0 ADD X23, X29, X26
	0x0325FDC4 BL 0x32602D0
	0x0325FDC8 MOV X26, X0
	0x0325FDCC MOV X0, X23
	0x0325FDD0 BL 0x3260264
	0x0325FDD4 ADRP X8, 0xEC4000
	0x0325FDD8 LDR X8, [X8 + 0xE0]
	0x0325FDDC LDR X8, [X8]
	0x0325FDE0 LDR X8, [X8 + 0xB8]
	0x0325FDE4 LDR X8, [X8]
	0x0325FDE8 CBZ X8, 0x325FF74
	0x0325FDEC LDR W9, [X8 + 0x18]
	0x0325FDF0 ADD X20, X20, 0x1
	0x0325FDF4 CMP X20, X9
	0x0325FDF8 B.CS 0x325FF78
	0x0325FDFC EOR X9, X25, X28, 0x0
	0x0325FE00 AND X10, X25, X28, 0x0
	0x0325FE04 AND X9, X27, X9, 0x0
	0x0325FE08 EOR X9, X9, X10, 0x0
	0x0325FE0C LDR X10, [X31 + 0x18]
	0x0325FE10 ADD X8, X8, X19
	0x0325FE14 LDUR X8, [X8 - 0x8]
	0x0325FE18 ADD X11, X0, X21
	0x0325FE1C ADD X10, X10, X19
	0x0325FE20 AND X12, X23, X24, 0x0
	0x0325FE24 LDUR X10, [X10 - 0x28]
	0x0325FE28 ADD X11, X11, X12
	0x0325FE2C BIC X12, X22, X23, 0x0
	0x0325FE30 ADD X9, X29, X9
	0x0325FE34 ADD X26, X9, X26
	0x0325FE38 ADD X9, X11, X12
	0x0325FE3C ADD X8, X9, X8
	0x0325FE40 ADD X21, X8, X10
	0x0325FE44 MOV X0, X26
	0x0325FE48 ADD X29, X21, X28
	0x0325FE4C BL 0x32602D0
	0x0325FE50 MOV X28, X0
	0x0325FE54 MOV X0, X29
	0x0325FE58 STR X29, [X31 + 0x10]
	0x0325FE5C BL 0x3260264
	0x0325FE60 ADRP X8, 0xEC4000
	0x0325FE64 LDR X8, [X8 + 0xE0]
	0x0325FE68 LDR X8, [X8]
	0x0325FE6C LDR X8, [X8 + 0xB8]
	0x0325FE70 LDR X8, [X8]
	0x0325FE74 CBZ X8, 0x325FF74
	0x0325FE78 LDR W9, [X8 + 0x18]
	0x0325FE7C ADD X29, X20, 0x1
	0x0325FE80 CMP X29, X9
	0x0325FE84 B.CS 0x325FF78
	0x0325FE88 EOR X9, X27, X25, 0x0
	0x0325FE8C AND X10, X27, X25, 0x0
	0x0325FE90 AND X9, X26, X9, 0x0
	0x0325FE94 EOR X9, X9, X10, 0x0
	0x0325FE98 LDR X10, [X31 + 0x18]
	0x0325FE9C LDR X13, [X31 + 0x10]
	0x0325FEA0 LDR X8, [X8, X19, LSL]
	0x0325FEA4 ADD X11, X0, X22
	0x0325FEA8 ADD X10, X10, X19
	0x0325FEAC AND X12, X13, X23, 0x0
	0x0325FEB0 LDUR X10, [X10 - 0x20]
	0x0325FEB4 ADD X11, X11, X12
	0x0325FEB8 BIC X12, X24, X13, 0x0
	0x0325FEBC ADD X11, X11, X12
	0x0325FEC0 ADD X9, X21, X9
	0x0325FEC4 ADD X28, X9, X28
	0x0325FEC8 ADD X8, X11, X8
	0x0325FECC ADD X20, X8, X10
	0x0325FED0 MOV X0, X28
	0x0325FED4 ADD X22, X20, X25
	0x0325FED8 BL 0x32602D0
	0x0325FEDC EOR X8, X26, X27, 0x0
	0x0325FEE0 AND X9, X26, X27, 0x0
	0x0325FEE4 AND X8, X28, X8, 0x0
	0x0325FEE8 EOR X8, X8, X9, 0x0
	0x0325FEEC ADD X8, X20, X8
	0x0325FEF0 ADRP X20, 0xEC4000
	0x0325FEF4 LDR X20, [X20 + 0xE0]
	0x0325FEF8 SUB X10, X29, 0x7
	0x0325FEFC ADD X19, X19, 0x40
	0x0325FF00 CMP X10, 0x48
	0x0325FF04 ADD X25, X8, X0
	0x0325FF08 ADD X29, X29, 0x1
	0x0325FF0C B.CC 0x325FAA8
	0x0325FF10 LDP X16, X17, [X31 + 0x8]
	0x0325FF14 LDP X20, X19, [X31 + 0x70]
	0x0325FF18 LDP X29, X30, [X31 + 0x20]
	0x0325FF1C LDP X8, X9, [X16]
	0x0325FF20 LDP X10, X11, [X16 + 0x10]
	0x0325FF24 LDP X12, X13, [X16 + 0x20]
	0x0325FF28 LDP X14, X15, [X16 + 0x30]
	0x0325FF2C ADD X8, X8, X25
	0x0325FF30 ADD X9, X9, X28
	0x0325FF34 ADD X10, X10, X26
	0x0325FF38 ADD X11, X11, X27
	0x0325FF3C ADD X12, X12, X22
	0x0325FF40 ADD X14, X14, X23
	0x0325FF44 ADD X15, X15, X24
	0x0325FF48 LDP X22, X21, [X31 + 0x60]
	0x0325FF4C LDP X24, X23, [X31 + 0x50]
	0x0325FF50 LDP X26, X25, [X31 + 0x40]
	0x0325FF54 LDP X28, X27, [X31 + 0x30]
	0x0325FF58 ADD X13, X13, X17
	0x0325FF5C STP X8, X9, [X16]
	0x0325FF60 STP X10, X11, [X16 + 0x10]
	0x0325FF64 STP X12, X13, [X16 + 0x20]
	0x0325FF68 STP X14, X15, [X16 + 0x30]
	0x0325FF6C ADD X31, X31, 0x80
	0x0325FF70 RET
	0x0325FF74 BL 0x1C16F20
	0x0325FF78 BL 0x1C16F28
	0x0325FF7C STR X30, [X31 - 0x10]!
	0x0325FF80 CMP W2, 0x1
	0x0325FF84 B.LT 0x3260128
	0x0325FF88 CBZ X1, 0x3260134
	0x0325FF8C MOV W11, W2
	0x0325FF90 MOV X10, X31
	0x0325FF94 MOV X8, X31
	0x0325FF98 ADD X9, X1, 0x20
	0x0325FF9C UBFM X11, X11, 0x3D, 0x3C
	0x0325FFA0 LDR W12, [X1 + 0x18]
	0x0325FFA4 CMP X8, X12
	0x0325FFA8 B.CS 0x3260130
	0x0325FFAC CBZ X0, 0x3260134
	0x0325FFB0 LDR W12, [X0 + 0x18]
	0x0325FFB4 CMP W10, W12
	0x0325FFB8 B.CS 0x3260130
	0x0325FFBC ADD X12, X9, X10
	0x0325FFC0 LDRB W12, [X12 + 0x7]
	0x0325FFC4 ADD X13, X0, W10, SXTW
	0x0325FFC8 STRB W12, [X13 + 0x20]
	0x0325FFCC LDR W12, [X1 + 0x18]
	0x0325FFD0 CMP X8, X12
	0x0325FFD4 B.CS 0x3260130
	0x0325FFD8 LDR W13, [X0 + 0x18]
	0x0325FFDC ADD X12, X10, 0x1
	0x0325FFE0 CMP W12, W13
	0x0325FFE4 B.CS 0x3260130
	0x0325FFE8 ADD X13, X9, X10
	0x0325FFEC LDRH W13, [X13 + 0x6]
	0x0325FFF0 ADD X14, X0, W12, SXTW
	0x0325FFF4 STRB W13, [X14 + 0x20]
	0x0325FFF8 LDR W13, [X1 + 0x18]
	0x0325FFFC CMP X8, X13
	0x03260000 B.CS 0x3260130
	0x03260004 LDR W13, [X0 + 0x18]
	0x03260008 ADD X12, X12, 0x1
	0x0326000C CMP W12, W13
	0x03260010 B.CS 0x3260130
	0x03260014 LDR X13, [X9, X10, LSL]
	0x03260018 ADD X14, X10, 0x2
	0x0326001C ADD X14, X0, W14, SXTW
	0x03260020 UBFM X13, X13, 0x28, 0x3F
	0x03260024 STRB W13, [X14 + 0x20]
	0x03260028 LDR W13, [X1 + 0x18]
	0x0326002C CMP X8, X13
	0x03260030 B.CS 0x3260130
	0x03260034 LDR W13, [X0 + 0x18]
	0x03260038 ADD X12, X12, 0x1
	0x0326003C CMP W12, W13
	0x03260040 B.CS 0x3260130
	0x03260044 ADD X13, X9, X10
	0x03260048 LDR W13, [X13 + 0x4]
	0x0326004C ADD X14, X10, 0x3
	0x03260050 ADD X14, X0, W14, SXTW
	0x03260054 STRB W13, [X14 + 0x20]
	0x03260058 LDR W13, [X1 + 0x18]
	0x0326005C CMP X8, X13
	0x03260060 B.CS 0x3260130
	0x03260064 LDR W13, [X0 + 0x18]
	0x03260068 ADD X12, X12, 0x1
	0x0326006C CMP W12, W13
	0x03260070 B.CS 0x3260130
	0x03260074 LDR X13, [X9, X10, LSL]
	0x03260078 ADD X14, X10, 0x4
	0x0326007C ADD X14, X0, W14, SXTW
	0x03260080 UBFM X13, X13, 0x18, 0x3F
	0x03260084 STRB W13, [X14 + 0x20]
	0x03260088 LDR W13, [X1 + 0x18]
	0x0326008C CMP X8, X13
	0x03260090 B.CS 0x3260130
	0x03260094 LDR W13, [X0 + 0x18]
	0x03260098 ADD X12, X12, 0x1
	0x0326009C CMP W12, W13
	0x032600A0 B.CS 0x3260130
	0x032600A4 LDR X13, [X9, X10, LSL]
	0x032600A8 ADD X14, X10, 0x5
	0x032600AC ADD X14, X0, W14, SXTW
	0x032600B0 UBFM X13, X13, 0x10, 0x3F
	0x032600B4 STRB W13, [X14 + 0x20]
	0x032600B8 LDR W13, [X1 + 0x18]
	0x032600BC CMP X8, X13
	0x032600C0 B.CS 0x3260130
	0x032600C4 LDR W13, [X0 + 0x18]
	0x032600C8 ADD X12, X12, 0x1
	0x032600CC CMP W12, W13
	0x032600D0 B.CS 0x3260130
	0x032600D4 LDR X13, [X9, X10, LSL]
	0x032600D8 ADD X14, X10, 0x6
	0x032600DC ADD X14, X0, W14, SXTW
	0x032600E0 UBFM X13, X13, 0x8, 0x3F
	0x032600E4 STRB W13, [X14 + 0x20]
	0x032600E8 LDR W13, [X1 + 0x18]
	0x032600EC CMP X8, X13
	0x032600F0 B.CS 0x3260130
	0x032600F4 LDR W13, [X0 + 0x18]
	0x032600F8 ADD X12, X12, 0x1
	0x032600FC CMP W12, W13
	0x03260100 B.CS 0x3260130
	0x03260104 LDR X14, [X9, X10, LSL]
	0x03260108 ADD X13, X10, 0x7
	0x0326010C ADD X10, X10, 0x8
	0x03260110 ADD X8, X8, 0x1
	0x03260114 ADD X13, X0, W13, SXTW
	0x03260118 CMP X11, X10
	0x0326011C ADD X10, X12, 0x1
	0x03260120 STRB W14, [X13 + 0x20]
	0x03260124 B.NE 0x325FFA0
	0x03260128 LDR X30, [X31], #0x10
	0x0326012C RET
	0x03260130 BL 0x1C16F28
	0x03260134 BL 0x1C16F20
	0x03260138 CMP W1, 0x1

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], X29
	003 Move [X31+40], X30
	004 Move [X31+48], X28
	005 Move [X31+56], X27
	006 Move [X31+64], X26
	007 Move [X31+72], X25
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X19, 0x117E000
	015 Move W8, [X19+1324]
	016 Move X29, X2
	017 Move X20, X1
	018 Move X21, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0xEC5000
	024 Move X0, [X0+208]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X19+1324], W8
	028 Move X22, [X20+32]
	029 Move X8, [X20+40]
	030 Move X25, [X20]
	031 Move X28, [X20+8]
	032 Move X26, [X20+16]
	033 Move X27, [X20+24]
	034 Move X23, [X20+48]
	035 Move X24, [X20+56]
	036 Move W1, 16
	037 Move X0, X21
	038 Move X2, X29
	039 Move X3, X31
	040 Move [X31+8], X20
	041 Move [X31+16], X8
	042 Call Utils.QuadWordFromBigEndian, X0, X1, X2
	043 Move X20, 0xEC5000
	044 Move X20, [X20+208]
	045 Move X0, [X20]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move X0, X21
	051 Move [X31+24], X21
	052 Call SHA384Managed.SHA384Expand, X0
	053 Move X29, X31
	054 Move W19, 88
	055 Move X0, [X20]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move X0, X22
	061 Call SHA384Managed.Sigma_1, X0
	062 Move X8, [X20]
	063 Move X21, [X31+24]
	064 Move X8, [X8+184]
	065 Move X8, [X8]
	066 Compare X8, 0
	067 JumpIfEqual {377}
	068 Move W9, [X8+24]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move X9, [X31+16]
	071 Add X8, X8, X19
	072 Add X11, X21, X19
	073 NotImplemented "Instruction LDUR not yet implemented."
	074 And X9, X22, X9
	075 NotImplemented "Instruction BIC not yet implemented."
	076 NotImplemented "Instruction LDUR not yet implemented."
	077 Add X9, X9, X24
	078 Add X9, X9, X10
	079 Add X9, X9, X0
	080 Add X8, X9, X8
	081 Add X20, X8, X11
	082 Move X0, X25
	083 Add X24, X20, X27
	084 Call SHA384Managed.Sigma_0, X0
	085 Move X27, X0
	086 Move X0, X24
	087 Call SHA384Managed.Sigma_1, X0
	088 Move X8, 0xEC5000
	089 Move X8, [X8+208]
	090 Move X8, [X8]
	091 Move X8, [X8+184]
	092 Move X8, [X8]
	093 Compare X8, 0
	094 JumpIfEqual {377}
	095 Move W9, [X8+24]
	096 Add X29, X29, 1
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Add X11, X0, X23
	099 And X12, X24, X22
	100 Xor X9, X28, X26
	101 Add X11, X11, X12
	102 Move X12, [X31+16]
	103 And X10, X28, X26
	104 Add X8, X8, X19
	105 And X9, X9, X25
	106 Xor X9, X9, X10
	107 Add X10, X21, X19
	108 NotImplemented "Instruction LDUR not yet implemented."
	109 NotImplemented "Instruction LDUR not yet implemented."
	110 NotImplemented "Instruction BIC not yet implemented."
	111 Add X9, X20, X9
	112 Add X27, X9, X27
	113 Add X9, X11, X12
	114 Add X8, X9, X8
	115 Add X21, X8, X10
	116 Move X0, X27
	117 Add X23, X21, X26
	118 Call SHA384Managed.Sigma_0, X0
	119 Move X26, X0
	120 Move X0, X23
	121 Call SHA384Managed.Sigma_1, X0
	122 Move X8, 0xEC5000
	123 Move X8, [X8+208]
	124 Move X8, [X8]
	125 Move X8, [X8+184]
	126 Move X8, [X8]
	127 Compare X8, 0
	128 JumpIfEqual {377}
	129 Move W9, [X8+24]
	130 Add X20, X29, 1
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Xor X9, X25, X28
	133 And X10, X25, X28
	134 And X9, X27, X9
	135 Xor X9, X9, X10
	136 Move X10, [X31+24]
	137 Move X11, [X31+16]
	138 Add X8, X8, X19
	139 NotImplemented "Instruction LDUR not yet implemented."
	140 Add X10, X10, X19
	141 Add X11, X0, X11
	142 And X12, X23, X24
	143 NotImplemented "Instruction LDUR not yet implemented."
	144 Add X11, X11, X12
	145 NotImplemented "Instruction BIC not yet implemented."
	146 Add X9, X21, X9
	147 Add X26, X9, X26
	148 Add X9, X11, X12
	149 Add X8, X9, X8
	150 Add X29, X8, X10
	151 Move X0, X26
	152 Add X21, X29, X28
	153 Call SHA384Managed.Sigma_0, X0
	154 Move X28, X0
	155 Move X0, X21
	156 Call SHA384Managed.Sigma_1, X0
	157 Move X8, 0xEC5000
	158 Move X8, [X8+208]
	159 Move X8, [X8]
	160 Move X8, [X8+184]
	161 Move X8, [X8]
	162 Compare X8, 0
	163 JumpIfEqual {377}
	164 Move W9, [X8+24]
	165 Add X20, X20, 1
	166 NotImplemented "Instruction CMP not yet implemented."
	167 Xor X9, X27, X25
	168 And X10, X27, X25
	169 And X9, X26, X9
	170 Xor X9, X9, X10
	171 Move X10, [X31+24]
	172 Add X8, X8, X19
	173 NotImplemented "Instruction LDUR not yet implemented."
	174 Add X11, X0, X22
	175 Add X10, X10, X19
	176 And X12, X21, X23
	177 NotImplemented "Instruction LDUR not yet implemented."
	178 Add X11, X11, X12
	179 NotImplemented "Instruction BIC not yet implemented."
	180 Add X9, X29, X9
	181 Add X28, X9, X28
	182 Add X9, X11, X12
	183 Add X8, X9, X8
	184 Add X29, X8, X10
	185 Move X0, X28
	186 Add X22, X29, X25
	187 Call SHA384Managed.Sigma_0, X0
	188 Move X25, X0
	189 Move X0, X22
	190 Call SHA384Managed.Sigma_1, X0
	191 Move X8, 0xEC5000
	192 Move X8, [X8+208]
	193 Move X8, [X8]
	194 Move X8, [X8+184]
	195 Move X8, [X8]
	196 Compare X8, 0
	197 JumpIfEqual {377}
	198 Move W9, [X8+24]
	199 Add X20, X20, 1
	200 NotImplemented "Instruction CMP not yet implemented."
	201 Xor X9, X26, X27
	202 And X10, X26, X27
	203 And X9, X28, X9
	204 Xor X9, X9, X10
	205 Move X10, [X31+24]
	206 Add X8, X8, X19
	207 NotImplemented "Instruction LDUR not yet implemented."
	208 Add X11, X0, X24
	209 Add X10, X10, X19
	210 And X12, X22, X21
	211 NotImplemented "Instruction LDUR not yet implemented."
	212 Add X11, X11, X12
	213 NotImplemented "Instruction BIC not yet implemented."
	214 Add X9, X29, X9
	215 Add X25, X9, X25
	216 Add X9, X11, X12
	217 Add X8, X9, X8
	218 Add X29, X8, X10
	219 Move X0, X25
	220 Add X24, X29, X27
	221 Call SHA384Managed.Sigma_0, X0
	222 Move X27, X0
	223 Move X0, X24
	224 Call SHA384Managed.Sigma_1, X0
	225 Move X8, 0xEC5000
	226 Move X8, [X8+208]
	227 Move X8, [X8]
	228 Move X8, [X8+184]
	229 Move X8, [X8]
	230 Compare X8, 0
	231 JumpIfEqual {377}
	232 Move W9, [X8+24]
	233 Add X20, X20, 1
	234 NotImplemented "Instruction CMP not yet implemented."
	235 Xor X9, X28, X26
	236 And X10, X28, X26
	237 And X9, X25, X9
	238 Xor X9, X9, X10
	239 Move X10, [X31+24]
	240 Add X8, X8, X19
	241 NotImplemented "Instruction LDUR not yet implemented."
	242 Add X11, X0, X23
	243 Add X10, X10, X19
	244 And X12, X24, X22
	245 NotImplemented "Instruction LDUR not yet implemented."
	246 Add X11, X11, X12
	247 NotImplemented "Instruction BIC not yet implemented."
	248 Add X9, X29, X9
	249 Add X27, X9, X27
	250 Add X9, X11, X12
	251 Add X8, X9, X8
	252 Add X29, X8, X10
	253 Move X0, X27
	254 Add X23, X29, X26
	255 Call SHA384Managed.Sigma_0, X0
	256 Move X26, X0
	257 Move X0, X23
	258 Call SHA384Managed.Sigma_1, X0
	259 Move X8, 0xEC5000
	260 Move X8, [X8+208]
	261 Move X8, [X8]
	262 Move X8, [X8+184]
	263 Move X8, [X8]
	264 Compare X8, 0
	265 JumpIfEqual {377}
	266 Move W9, [X8+24]
	267 Add X20, X20, 1
	268 NotImplemented "Instruction CMP not yet implemented."
	269 Xor X9, X25, X28
	270 And X10, X25, X28
	271 And X9, X27, X9
	272 Xor X9, X9, X10
	273 Move X10, [X31+24]
	274 Add X8, X8, X19
	275 NotImplemented "Instruction LDUR not yet implemented."
	276 Add X11, X0, X21
	277 Add X10, X10, X19
	278 And X12, X23, X24
	279 NotImplemented "Instruction LDUR not yet implemented."
	280 Add X11, X11, X12
	281 NotImplemented "Instruction BIC not yet implemented."
	282 Add X9, X29, X9
	283 Add X26, X9, X26
	284 Add X9, X11, X12
	285 Add X8, X9, X8
	286 Add X21, X8, X10
	287 Move X0, X26
	288 Add X29, X21, X28
	289 Call SHA384Managed.Sigma_0, X0
	290 Move X28, X0
	291 Move X0, X29
	292 Move [X31+16], X29
	293 Call SHA384Managed.Sigma_1, X0
	294 Move X8, 0xEC4000
	295 Move X8, [X8+208]
	296 Move X8, [X8]
	297 Move X8, [X8+184]
	298 Move X8, [X8]
	299 Compare X8, 0
	300 JumpIfEqual {377}
	301 Move W9, [X8+24]
	302 Add X29, X20, 1
	303 NotImplemented "Instruction CMP not yet implemented."
	304 Xor X9, X27, X25
	305 And X10, X27, X25
	306 And X9, X26, X9
	307 Xor X9, X9, X10
	308 Move X10, [X31+24]
	309 Move X13, [X31+16]
	310 Move X8, [X8]
	311 Add X11, X0, X22
	312 Add X10, X10, X19
	313 And X12, X13, X23
	314 NotImplemented "Instruction LDUR not yet implemented."
	315 Add X11, X11, X12
	316 NotImplemented "Instruction BIC not yet implemented."
	317 Add X11, X11, X12
	318 Add X9, X21, X9
	319 Add X28, X9, X28
	320 Add X8, X11, X8
	321 Add X20, X8, X10
	322 Move X0, X28
	323 Add X22, X20, X25
	324 Call SHA384Managed.Sigma_0, X0
	325 Xor X8, X26, X27
	326 And X9, X26, X27
	327 And X8, X28, X8
	328 Xor X8, X8, X9
	329 Add X8, X20, X8
	330 Move X20, 0xEC4000
	331 Move X20, [X20+208]
	332 Subtract X10, X29, 7
	333 Add X19, X19, 64
	334 NotImplemented "Instruction CMP not yet implemented."
	335 Add X25, X8, X0
	336 Add X29, X29, 1
	337 Move X16, [X31+8]
	338 Move X17, [X31+16]
	339 Move X20, [X31+112]
	340 Move X19, [X31+120]
	341 Move X29, [X31+32]
	342 Move X30, [X31+40]
	343 Move X8, [X16]
	344 Move X9, [X16+8]
	345 Move X10, [X16+16]
	346 Move X11, [X16+24]
	347 Move X12, [X16+32]
	348 Move X13, [X16+40]
	349 Move X14, [X16+48]
	350 Move X15, [X16+56]
	351 Add X8, X8, X25
	352 Add X9, X9, X28
	353 Add X10, X10, X26
	354 Add X11, X11, X27
	355 Add X12, X12, X22
	356 Add X14, X14, X23
	357 Add X15, X15, X24
	358 Move X22, [X31+96]
	359 Move X21, [X31+104]
	360 Move X24, [X31+80]
	361 Move X23, [X31+88]
	362 Move X26, [X31+64]
	363 Move X25, [X31+72]
	364 Move X28, [X31+48]
	365 Move X27, [X31+56]
	366 Add X13, X13, X17
	367 Move [X16], X8
	368 Move [X16+8], X9
	369 Move [X16+16], X10
	370 Move [X16+24], X11
	371 Move [X16+32], X12
	372 Move [X16+40], X13
	373 Move [X16+48], X14
	374 Move [X16+56], X15
	375 Add X31, X31, 128
	376 Return 
	377 Call 0x1C17F20
	378 Call 0x1C17F28

Method: System.UInt64 RotateRight(System.UInt64 x, System.Int32 n)

Disassembly:
	0x032602C0 AND X8, X1, X0, 0x0
	0x032602C4 BIC X9, X2, X0, 0x0

ISIL:
	001 NotImplemented "Instruction RORV not yet implemented."
	002 Return X0

Method: System.UInt64 Ch(System.UInt64 x, System.UInt64 y, System.UInt64 z)

Disassembly:
	0x03260240 ADD X8, X9, X8
	0x03260244 CMP X21, 0x200
	0x03260248 STR X8, [X23 + 0x80]
	0x0326024C B.NE 0x32601FC

ISIL:
	001 And X8, X1, X0
	002 NotImplemented "Instruction BIC not yet implemented."
	003 Or X0, X9, X8
	004 Return X0

Method: System.UInt64 Maj(System.UInt64 x, System.UInt64 y, System.UInt64 z)

Disassembly:
	0x032602AC EOR X8, X8, X19, 0x12
	0x032602B0 EOR X0, X8, X19, 0x29
	0x032602B4 LDP X20, X19, [X31 + 0x10]
	0x032602B8 LDP X30, X21, [X31], #0x20
	0x032602BC RET

ISIL:
	001 Xor X8, X2, X1
	002 And X8, X8, X0
	003 And X9, X2, X1
	004 Xor X0, X8, X9
	005 Return X0

Method: System.UInt64 Sigma_0(System.UInt64 x)

Disassembly:
	0x03260250 LDP X20, X19, [X31 + 0x30]
	0x03260254 LDP X22, X21, [X31 + 0x20]
	0x03260258 LDP X24, X23, [X31 + 0x10]
	0x0326025C LDR X30, [X31], #0x40
	0x03260260 RET
	0x03260264 STP X30, X21, [X31 - 0x20]!
	0x03260268 STP X20, X19, [X31 + 0x10]
	0x0326026C ADRP X20, 0x117C000
	0x03260270 ADRP X21, 0xEC3000
	0x03260274 LDRB W8, [X20 + 0x539]
	0x03260278 LDR X21, [X21 + 0xE0]
	0x0326027C MOV X19, X0
	0x03260280 TBNZ X8, 0x0, 0x3260298
	0x03260284 ADRP X0, 0xEC3000
	0x03260288 LDR X0, [X0 + 0xE0]
	0x0326028C BL 0x1C16CF4
	0x03260290 MOVZ W8, 0x1
	0x03260294 STRB W8, [X20 + 0x539]
	0x03260298 LDR X0, [X21]
	0x0326029C LDR W8, [X0 + 0xE0]
	0x032602A0 CBNZ W8, 0x32602A8
	0x032602A4 BL 0x1C16DFC
	0x032602A8 EXTR X8, X19, X19, 0xE

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x117D000
	006 Move X21, 0xEC4000
	007 Move W8, [X20+1325]
	008 Move X21, [X21+208]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEC4000
	015 Move X0, [X0+208]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1325], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 NotImplemented "Instruction EXTR not yet implemented."
	025 Xor X8, X8, X19
	026 Xor X0, X8, X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.UInt64 Sigma_1(System.UInt64 x)

Disassembly:
	0x032601E4 BL 0x1C16CF4
	0x032601E8 MOVZ W8, 0x1
	0x032601EC STRB W8, [X20 + 0x53C]
	0x032601F0 ADRP X22, 0xEC3000
	0x032601F4 LDR X22, [X22 + 0xE0]
	0x032601F8 MOV X21, X31
	0x032601FC LDR X0, [X22]
	0x03260200 ADD X23, X19, X21
	0x03260204 LDR X20, [X23 + 0x70]
	0x03260208 LDR W8, [X0 + 0xE0]
	0x0326020C CBNZ W8, 0x3260214
	0x03260210 BL 0x1C16DFC
	0x03260214 MOV X0, X20
	0x03260218 BL 0x32603A4
	0x0326021C LDR X8, [X23 + 0x8]
	0x03260220 LDR X24, [X23 + 0x48]
	0x03260224 MOV X20, X0
	0x03260228 MOV X0, X8
	0x0326022C BL 0x3260348
	0x03260230 LDR X8, [X23]
	0x03260234 ADD X9, X24, X20
	0x03260238 ADD X21, X21, 0x8
	0x0326023C ADD X9, X9, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x117D000
	006 Move X21, 0xEC4000
	007 Move W8, [X20+1326]
	008 Move X21, [X21+208]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEC4000
	015 Move X0, [X0+208]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1326], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 NotImplemented "Instruction EXTR not yet implemented."
	025 Xor X8, X8, X19
	026 Xor X0, X8, X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.UInt64 sigma_0(System.UInt64 x)

Disassembly:
	0x032602C8 ORR X0, X9, X8, 0x0
	0x032602CC RET
	0x032602D0 STP X30, X21, [X31 - 0x20]!
	0x032602D4 STP X20, X19, [X31 + 0x10]
	0x032602D8 ADRP X20, 0x117C000
	0x032602DC ADRP X21, 0xEC3000
	0x032602E0 LDRB W8, [X20 + 0x538]
	0x032602E4 LDR X21, [X21 + 0xE0]
	0x032602E8 MOV X19, X0
	0x032602EC TBNZ X8, 0x0, 0x3260304
	0x032602F0 ADRP X0, 0xEC3000
	0x032602F4 LDR X0, [X0 + 0xE0]
	0x032602F8 BL 0x1C16CF4
	0x032602FC MOVZ W8, 0x1
	0x03260300 STRB W8, [X20 + 0x538]
	0x03260304 LDR X0, [X21]
	0x03260308 LDR W8, [X0 + 0xE0]
	0x0326030C CBNZ W8, 0x3260314
	0x03260310 BL 0x1C16DFC
	0x03260314 EXTR X8, X19, X19, 0x1C
	0x03260318 EOR X8, X8, X19, 0x22
	0x0326031C EOR X0, X8, X19, 0x27
	0x03260320 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x117D000
	006 Move X21, 0xEC4000
	007 Move W8, [X20+1327]
	008 Move X21, [X21+208]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEC4000
	015 Move X0, [X0+208]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1327], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 NotImplemented "Instruction EXTR not yet implemented."
	025 Xor X8, X8, X19
	026 Xor X0, X8, X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.UInt64 sigma_1(System.UInt64 x)

Disassembly:
	0x03260324 LDP X30, X21, [X31], #0x20
	0x03260328 RET
	0x0326032C EOR X8, X2, X1, 0x0
	0x03260330 AND X8, X8, X0, 0x0
	0x03260334 AND X9, X2, X1, 0x0
	0x03260338 EOR X0, X8, X9, 0x0
	0x0326033C RET
	0x03260340 RORV X0, X0, X1
	0x03260344 RET
	0x03260348 STP X30, X21, [X31 - 0x20]!
	0x0326034C STP X20, X19, [X31 + 0x10]
	0x03260350 ADRP X20, 0x117C000
	0x03260354 ADRP X21, 0xEC3000
	0x03260358 LDRB W8, [X20 + 0x53A]
	0x0326035C LDR X21, [X21 + 0xE0]
	0x03260360 MOV X19, X0
	0x03260364 TBNZ X8, 0x0, 0x326037C
	0x03260368 ADRP X0, 0xEC3000
	0x0326036C LDR X0, [X0 + 0xE0]
	0x03260370 BL 0x1C16CF4
	0x03260374 MOVZ W8, 0x1
	0x03260378 STRB W8, [X20 + 0x53A]
	0x0326037C LDR X0, [X21]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x117D000
	006 Move X21, 0xEC4000
	007 Move W8, [X20+1328]
	008 Move X21, [X21+208]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEC4000
	015 Move X0, [X0+208]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1328], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 NotImplemented "Instruction EXTR not yet implemented."
	025 Xor X8, X8, X19
	026 Xor X0, X8, X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.Void SHA384Expand(System.UInt64* x)

Disassembly:
	0x0326013C B.LT 0x32601B8
	0x03260140 MOV W9, W1
	0x03260144 MOV X8, X31
	0x03260148 UBFM X9, X9, 0x3D, 0x3C
	0x0326014C ADD W10, W8, 0x1
	0x03260150 LDRB W17, [X2, W8, SXTW]
	0x03260154 ADD W11, W8, 0x2
	0x03260158 LDRB W10, [X2, W10, SXTW]
	0x0326015C ADD W12, W8, 0x3
	0x03260160 LDRB W11, [X2, W11, SXTW]
	0x03260164 ADD W13, W8, 0x4
	0x03260168 LDRB W12, [X2, W12, SXTW]
	0x0326016C ADD W14, W8, 0x5
	0x03260170 LDRB W13, [X2, W13, SXTW]
	0x03260174 UBFM X17, X17, 0x8, 0x7
	0x03260178 ADD W15, W8, 0x6
	0x0326017C LDRB W14, [X2, W14, SXTW]
	0x03260180 BFM X17, X10, 0x10, 0x7
	0x03260184 ADD W16, W8, 0x7
	0x03260188 LDRB W15, [X2, W15, SXTW]
	0x0326018C BFM X17, X11, 0x18, 0x7
	0x03260190 LDRB W16, [X2, W16, SXTW]
	0x03260194 BFM X17, X12, 0x20, 0x7
	0x03260198 BFM X17, X13, 0x28, 0x7
	0x0326019C BFM X17, X14, 0x30, 0x7
	0x032601A0 BFM X17, X15, 0x38, 0x7
	0x032601A4 ORR X10, X17, X16, 0x0
	0x032601A8 STR X10, [X0, X8, LSL]
	0x032601AC ADD X8, X8, 0x8
	0x032601B0 CMP X9, X8
	0x032601B4 B.NE 0x326014C
	0x032601B8 RET
	0x032601BC STR X30, [X31 - 0x40]!
	0x032601C0 STP X24, X23, [X31 + 0x10]
	0x032601C4 STP X22, X21, [X31 + 0x20]
	0x032601C8 STP X20, X19, [X31 + 0x30]
	0x032601CC ADRP X20, 0x117C000
	0x032601D0 LDRB W8, [X20 + 0x53C]
	0x032601D4 MOV X19, X0
	0x032601D8 TBNZ X8, 0x0, 0x32601F0
	0x032601DC ADRP X0, 0xEC3000
	0x032601E0 LDR X0, [X0 + 0xE0]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x117D000
	009 Move W8, [X20+1329]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xEC4000
	016 Move X0, [X0+208]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1329], W8
	020 Move X22, 0xEC4000
	021 Move X22, [X22+208]
	022 Move X21, X31
	023 Move X0, [X22]
	024 Add X23, X19, X21
	025 Move X20, [X23+112]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Call SHA384Managed.sigma_1, X0
	032 Move X8, [X23+8]
	033 Move X24, [X23+72]
	034 Move X20, X0
	035 Move X0, X8
	036 Call SHA384Managed.sigma_0, X0
	037 Move X8, [X23]
	038 Add X9, X24, X20
	039 Add X21, X21, 8
	040 Add X9, X9, X0
	041 Add X8, X9, X8
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move [X23+128], X8
	044 Move X20, [X31+48]
	045 Move X19, [X31+56]
	046 Move X22, [X31+32]
	047 Move X21, [X31+40]
	048 Move X24, [X31+16]
	049 Move X23, [X31+24]
	050 Move X30, [X31+64]
	051 Return 

Method: System.Void .cctor()

Disassembly:
	0x03260380 LDR W8, [X0 + 0xE0]
	0x03260384 CBNZ W8, 0x326038C
	0x03260388 BL 0x1C16DFC
	0x0326038C EXTR X8, X19, X19, 0x1
	0x03260390 EOR X8, X8, X19, 0x8
	0x03260394 EOR X0, X8, X19, 0x7
	0x03260398 LDP X20, X19, [X31 + 0x10]
	0x0326039C LDP X30, X21, [X31], #0x20
	0x032603A0 RET
	0x032603A4 STP X30, X21, [X31 - 0x20]!
	0x032603A8 STP X20, X19, [X31 + 0x10]
	0x032603AC ADRP X20, 0x117C000
	0x032603B0 ADRP X21, 0xEC3000
	0x032603B4 LDRB W8, [X20 + 0x53B]
	0x032603B8 LDR X21, [X21 + 0xE0]
	0x032603BC MOV X19, X0
	0x032603C0 TBNZ X8, 0x0, 0x32603D8
	0x032603C4 ADRP X0, 0xEC3000
	0x032603C8 LDR X0, [X0 + 0xE0]
	0x032603CC BL 0x1C16CF4
	0x032603D0 MOVZ W8, 0x1
	0x032603D4 STRB W8, [X20 + 0x53B]
	0x032603D8 LDR X0, [X21]
	0x032603DC LDR W8, [X0 + 0xE0]
	0x032603E0 CBNZ W8, 0x32603E8
	0x032603E4 BL 0x1C16DFC
	0x032603E8 EXTR X8, X19, X19, 0x13
	0x032603EC EOR X8, X8, X19, 0x3D
	0x032603F0 EOR X0, X8, X19, 0x6
	0x032603F4 LDP X20, X19, [X31 + 0x10]
	0x032603F8 LDP X30, X21, [X31], #0x20
	0x032603FC RET
	0x03260400 STR X30, [X31 - 0x30]!
	0x03260404 STP X22, X21, [X31 + 0x10]
	0x03260408 STP X20, X19, [X31 + 0x20]
	0x0326040C ADRP X21, 0x117C000
	0x03260410 ADRP X22, 0xE9B000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x117D000
	007 Move X22, 0xE9C000
	008 Move X19, 0xEC4000
	009 Move X20, 0xEC4000
	010 Move W8, [X21+1330]
	011 Move X22, [X22+1384]
	012 Move X19, [X19+816]
	013 Move X20, [X20+208]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0xEC4000
	019 Move X0, [X0+208]
	020 Call 0x1C17CF4
	021 Move X0, 0xEC4000
	022 Move X0, [X0+816]
	023 Call 0x1C17CF4
	024 Move X0, 0xE9C000
	025 Move X0, [X0+1384]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+1330], W8
	029 Move X0, [X22]
	030 Move W1, 80
	031 Call 0x1C17D6C
	032 Move X1, [X19]
	033 Move X2, X31
	034 Move X19, X0
	035 Call RuntimeHelpers.InitializeArray, X0, X1
	036 Move X8, [X20]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X8, [X8+184]
	040 Move [X8], X19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X30, [X31+48]
	044 Return 

