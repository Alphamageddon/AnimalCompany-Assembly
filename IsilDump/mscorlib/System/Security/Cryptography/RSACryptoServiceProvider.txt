Type: System.Security.Cryptography.RSACryptoServiceProvider

Method: System.Boolean get_UseMachineKeyStore()

Disassembly:
	0x0325D3CC LDR X8, [X19 + 0x30]
	0x0325D3D0 MOV X20, X0
	0x0325D3D4 MOVZ W9, 0x80
	0x0325D3D8 LDR X0, [X21]
	0x0325D3DC AND X8, X8, 0x3F
	0x0325D3E0 CMP W8, 0x38
	0x0325D3E4 MOVZ W10, 0x40
	0x0325D3E8 CSEL X9, X10, X9, CC
	0x0325D3EC SUB X21, X9, X8
	0x0325D3F0 MOV W1, W21
	0x0325D3F4 BL 0x1C16D6C
	0x0325D3F8 CBZ X0, 0x325D534
	0x0325D3FC LDR W8, [X0 + 0x18]
	0x0325D400 MOV X1, X0
	0x0325D404 CBZ W8, 0x325D530
	0x0325D408 MOV W9, W21
	0x0325D40C SXTW X9, W9
	0x0325D410 SUB X10, X9, 0x8
	0x0325D414 MOVZ W11, 0x80
	0x0325D418 CMP W10, W8
	0x0325D41C STRB W11, [X1 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x1180000
	005 Move X20, 0xEC5000
	006 Move W8, [X19+1300]
	007 Move X20, [X20+416]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xEC5000
	013 Move X0, [X0+416]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1300], W8
	017 Move X8, [X20]
	018 Move X8, [X8+184]
	019 Move W19, [X8]
	020 Call 0x1C17D44
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 NotImplemented "Instruction CSET not yet implemented."
	025 Move X30, [X31+32]
	026 Return X0

Method: System.Void .ctor()

Disassembly:
	0x0325C9CC ADRP X0, 0xEC7000
	0x0325C9D0 LDR X0, [X0 + 0x2D0]
	0x0325C9D4 BL 0x1C16D08
	0x0325C9D8 MOV X1, X0
	0x0325C9DC MOV X0, X19
	0x0325C9E0 MOV X2, X31
	0x0325C9E4 BL 0x3252170
	0x0325C9E8 ADRP X0, 0xEC7000
	0x0325C9EC LDR X0, [X0 + 0x2D8]
	0x0325C9F0 BL 0x1C16D08
	0x0325C9F4 MOV X1, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, 1
	004 Move X1, X31
	005 Move X19, X0
	006 Move [X0+42], W8
	007 Call AsymmetricAlgorithm..ctor, X0
	008 Move W1, 1024
	009 Move X0, X19
	010 Move W2, W31
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Call RSACryptoServiceProvider.Common, X0, X1, X2
	014 Return 

Method: System.Void .ctor(System.Security.Cryptography.CspParameters parameters)

Disassembly:
	0x0325D458 CMP W10, W11
	0x0325D45C B.CS 0x325D530
	0x0325D460 UBFM X11, X8, 0x25, 0x3F

ISIL:
	001 Move X2, X1
	002 Move W1, 1024

Method: System.Void .ctor(System.Int32 dwKeySize)

Disassembly:
	0x0325D420 B.CS 0x325D530
	0x0325D424 LDR X8, [X19 + 0x30]
	0x0325D428 ADD X10, X1, X10
	0x0325D42C UBFM X11, X8, 0x35, 0x3F
	0x0325D430 STRB W11, [X10 + 0x20]
	0x0325D434 LDR W11, [X1 + 0x18]
	0x0325D438 SUB X10, X21, 0x7
	0x0325D43C CMP W10, W11
	0x0325D440 B.CS 0x325D530
	0x0325D444 UBFM X11, X8, 0x2D, 0x3F
	0x0325D448 ADD X10, X1, X10
	0x0325D44C STRB W11, [X10 + 0x20]
	0x0325D450 LDR W11, [X1 + 0x18]
	0x0325D454 SUB X10, X9, 0x6

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move W8, 1
	006 Move X1, X31
	007 Move X20, X0
	008 Move [X0+42], W8
	009 Call AsymmetricAlgorithm..ctor, X0
	010 Move X0, X20
	011 Move W1, W19
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move W2, W31
	015 Move X30, [X31+32]
	016 Call RSACryptoServiceProvider.Common, X0, X1, X2
	017 Return 

Method: System.Void .ctor(System.Int32 dwKeySize, System.Security.Cryptography.CspParameters parameters)

Disassembly:
	0x0325D464 ADD X10, X1, X10
	0x0325D468 STRB W11, [X10 + 0x20]
	0x0325D46C LDR W11, [X1 + 0x18]
	0x0325D470 SUB X10, X9, 0x5
	0x0325D474 CMP W10, W11
	0x0325D478 B.CS 0x325D530
	0x0325D47C UBFM X11, X8, 0x1D, 0x3F
	0x0325D480 ADD X10, X1, X10
	0x0325D484 STRB W11, [X10 + 0x20]
	0x0325D488 LDR W11, [X1 + 0x18]
	0x0325D48C SUB X10, X9, 0x4
	0x0325D490 CMP W10, W11
	0x0325D494 B.CS 0x325D530
	0x0325D498 UBFM X11, X8, 0x15, 0x3F
	0x0325D49C ADD X10, X1, X10
	0x0325D4A0 STRB W11, [X10 + 0x20]
	0x0325D4A4 LDR W10, [X1 + 0x18]
	0x0325D4A8 SUB X9, X9, 0x3
	0x0325D4AC CMP W9, W10
	0x0325D4B0 B.CS 0x325D530
	0x0325D4B4 UBFM X10, X8, 0xD, 0x3F
	0x0325D4B8 ADD X9, X1, X9
	0x0325D4BC STRB W10, [X9 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W21, W1
	006 Move W8, 1
	007 Move X1, X31
	008 Move X19, X2
	009 Move X20, X0
	010 Move [X0+42], W8
	011 Call AsymmetricAlgorithm..ctor, X0
	012 NotImplemented "Instruction CMP not yet implemented."
	013 NotImplemented "Instruction CSET not yet implemented."
	014 Move X0, X20
	015 Move W1, W21
	016 Call RSACryptoServiceProvider.Common, X0, X1, X2
	017 Compare X19, 0
	018 JumpIfEqual {27}
	019 Move X0, X20
	020 Move X1, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call RSACryptoServiceProvider.Common, X0, X1
	026 Return 
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return 

Method: System.Void Common(System.Int32 dwKeySize, System.Boolean parameters)

Disassembly:
	0x0325D4C0 LDR W10, [X1 + 0x18]
	0x0325D4C4 SUB W9, W21, 0x2
	0x0325D4C8 CMP W9, W10
	0x0325D4CC B.CS 0x325D530
	0x0325D4D0 UBFM X10, X8, 0x5, 0x3F
	0x0325D4D4 ADD X9, X1, W9, UXTW
	0x0325D4D8 STRB W10, [X9 + 0x20]
	0x0325D4DC LDR W10, [X1 + 0x18]
	0x0325D4E0 SUB W9, W21, 0x1
	0x0325D4E4 CMP W9, W10
	0x0325D4E8 B.CS 0x325D530
	0x0325D4EC UBFM W8, W8, 0x1D, 0x1C
	0x0325D4F0 ADD X9, X1, W9, UXTW
	0x0325D4F4 STRB W8, [X9 + 0x20]
	0x0325D4F8 LDR W3, [X1 + 0x18]
	0x0325D4FC MOV X0, X19
	0x0325D500 MOV W2, W31
	0x0325D504 BL 0x325D208
	0x0325D508 LDR X1, [X19 + 0x38]
	0x0325D50C MOVZ W2, 0x5
	0x0325D510 MOV X0, X20
	0x0325D514 MOV X3, X31
	0x0325D518 BL 0x3262730
	0x0325D51C STR X20, [X19 + 0x18]
	0x0325D520 MOV X0, X20
	0x0325D524 LDP X20, X19, [X31 + 0x10]
	0x0325D528 LDP X30, X21, [X31], #0x20
	0x0325D52C RET
	0x0325D530 BL 0x1C16F28
	0x0325D534 BL 0x1C16F20
	0x0325D538 STR X30, [X31 - 0x50]!
	0x0325D53C STP X26, X25, [X31 + 0x10]
	0x0325D540 STP X24, X23, [X31 + 0x20]
	0x0325D544 STP X22, X21, [X31 + 0x30]
	0x0325D548 STP X20, X19, [X31 + 0x40]
	0x0325D54C LDP W21, W22, [X1]
	0x0325D550 LDP W23, W24, [X1 + 0x8]
	0x0325D554 LDR W25, [X1 + 0x10]
	0x0325D558 MOV X19, X1
	0x0325D55C MOVZ W26, 0x7999
	0x0325D560 MOVZ W1, 0x10
	0x0325D564 MOV X3, X31
	0x0325D568 MOV X20, X0
	0x0325D56C MOVK W26, 0x5A820000
	0x0325D570 BL 0x32626DC
	0x0325D574 MOV X0, X20
	0x0325D578 BL 0x325D928
	0x0325D57C MOVN X8, 0x4
	0x0325D580 MOV X9, X20
	0x0325D584 LDP W15, W16, [X9]
	0x0325D588 EXTR W10, W21, W21, 0x1B
	0x0325D58C BIC W11, W24, W22, 0x0
	0x0325D590 AND W12, W23, W22, 0x0
	0x0325D594 ADD W13, W25, W26
	0x0325D598 ORR W11, W12, W11, 0x0
	0x0325D59C BIC W12, W23, W21, 0x0
	0x0325D5A0 ADD W10, W13, W10
	0x0325D5A4 AND W13, W21, W22, 0x2
	0x0325D5A8 ADD W17, W24, W26
	0x0325D5AC ORR W12, W13, W12, 0x0
	0x0325D5B0 ADD W10, W10, W11
	0x0325D5B4 ADD W11, W17, W12
	0x0325D5B8 LDP W12, W17, [X9 + 0x8]
	0x0325D5BC ADD W10, W10, W15
	0x0325D5C0 LDR W15, [X9 + 0x10]
	0x0325D5C4 EXTR W14, W22, W22, 0x2
	0x0325D5C8 EXTR W13, W21, W21, 0x2
	0x0325D5CC ADD W14, W14, W26
	0x0325D5D0 ADD W13, W13, W26
	0x0325D5D4 ADD W11, W11, W16
	0x0325D5D8 ADD W14, W14, W17
	0x0325D5DC ADD W13, W13, W15
	0x0325D5E0 EXTR W15, W10, W10, 0x1B
	0x0325D5E4 ORN W17, W31, W10, 0x0
	0x0325D5E8 ADD W0, W23, W26
	0x0325D5EC AND W16, W10, W21, 0x2
	0x0325D5F0 ADD W11, W11, W15
	0x0325D5F4 AND W15, W17, W22, 0x2
	0x0325D5F8 ADD W12, W0, W12
	0x0325D5FC ORR W15, W16, W15, 0x0
	0x0325D600 ORN W0, W31, W11, 0x0
	0x0325D604 EXTR W17, W11, W11, 0x1B
	0x0325D608 AND W16, W11, W10, 0x2
	0x0325D60C ADD W12, W12, W15
	0x0325D610 AND W15, W0, W21, 0x2
	0x0325D614 ADD W12, W12, W17
	0x0325D618 ORR W15, W16, W15, 0x0
	0x0325D61C ADD W14, W14, W15
	0x0325D620 ORN W15, W31, W12, 0x0
	0x0325D624 EXTR W25, W10, W10, 0x2
	0x0325D628 EXTR W24, W11, W11, 0x2
	0x0325D62C EXTR W16, W12, W12, 0x1B
	0x0325D630 AND W11, W12, W11, 0x2
	0x0325D634 AND W10, W15, W10, 0x2
	0x0325D638 ADD W22, W14, W16
	0x0325D63C ORR W10, W11, W10, 0x0
	0x0325D640 ADD X8, X8, 0x5
	0x0325D644 EXTR W23, W12, W12, 0x2
	0x0325D648 EXTR W12, W22, W22, 0x1B
	0x0325D64C ADD W10, W13, W10
	0x0325D650 CMP X8, 0xF
	0x0325D654 ADD W21, W10, W12
	0x0325D658 ADD X9, X9, 0x14
	0x0325D65C B.CC 0x325D584
	0x0325D660 MOVZ W8, 0xEBA1
	0x0325D664 MOVK W8, 0x6ED90000
	0x0325D668 ADD X9, X20, 0x60
	0x0325D66C MOVZ W10, 0xF
	0x0325D670 EXTR W11, W21, W21, 0x1B
	0x0325D674 EOR W12, W23, W24, 0x0
	0x0325D678 ADD W13, W25, W8
	0x0325D67C ADD W11, W13, W11
	0x0325D680 LDP W13, W15, [X9 - 0x10]
	0x0325D684 EOR W12, W12, W22, 0x0
	0x0325D688 ADD W11, W11, W12
	0x0325D68C EOR W12, W23, W22, 0x2
	0x0325D690 ADD W16, W24, W8
	0x0325D694 EOR W12, W12, W21, 0x0
	0x0325D698 ADD W12, W16, W12
	0x0325D69C ADD W11, W11, W13
	0x0325D6A0 ADD W12, W12, W15
	0x0325D6A4 LDP W13, W15, [X9 - 0x8]
	0x0325D6A8 ADD W17, W23, W8
	0x0325D6AC EXTR W14, W22, W22, 0x2
	0x0325D6B0 EXTR W16, W21, W21, 0x2
	0x0325D6B4 ADD W13, W17, W13

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X22, 0x1180000
	011 Move X24, 0xEC5000
	012 Move X23, 0xEC5000
	013 Move W8, [X22+1301]
	014 Move X24, [X24+1312]
	015 Move X23, [X23+1320]
	016 Move W20, W2
	017 Move W21, W1
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {46}
	023 Move X0, 0xEC5000
	024 Move X0, [X0+1224]
	025 Call 0x1C17CF4
	026 Move X0, 0xEC5000
	027 Move X0, [X0+3552]
	028 Call 0x1C17CF4
	029 Move X0, 0xEC5000
	030 Move X0, [X0+3216]
	031 Call 0x1C17CF4
	032 Move X0, 0xEC5000
	033 Move X0, [X0+1312]
	034 Call 0x1C17CF4
	035 Move X0, 0xEC5000
	036 Move X0, [X0+1320]
	037 Call 0x1C17CF4
	038 Move X0, 0xEC7000
	039 Move X0, [X0+672]
	040 Call 0x1C17CF4
	041 Move X0, 0xEC7000
	042 Move X0, [X0+680]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X22+1301], W8
	046 Move X0, [X24]
	047 Move W1, 1
	048 Call 0x1C17D6C
	049 Move [X19+24], X0
	050 Move X22, X0
	051 Move X0, [X23]
	052 Call 0x1C17F10
	053 Move W1, 384
	054 Move W2, 0x4000
	055 Move W3, 8
	056 Move X4, X31
	057 Move X23, X0
	058 Call KeySizes..ctor, X0, X1, X2, X3
	059 Compare X22, 0
	060 JumpIfEqual {147}
	061 Move W8, [X22+24]
	062 Compare W8, 0
	063 JumpIfEqual {148}
	064 Move X24, 0xEC7000
	065 Move X25, 0xEC5000
	066 Move X26, 0xEC7000
	067 Move X24, [X24+680]
	068 Move X25, [X25+3552]
	069 Move X26, [X26+672]
	070 Move X0, X19
	071 Move W1, W21
	072 Move X2, X31
	073 Move [X22+32], X23
	074 Call AsymmetricAlgorithm.set_KeySize, X0, X1
	075 Move X8, [X19]
	076 Move X0, X19
	077 Move X9, [X8+408]
	078 Move X1, [X8+416]
	079 NotImplemented "Instruction BLR not yet implemented."
	080 Move X8, [X24]
	081 Move W22, W0
	082 Move X0, X8
	083 Call 0x1C17F10
	084 Move W1, W22
	085 Move X2, X31
	086 Move X21, X0
	087 Call RSAManaged..ctor, X0, X1
	088 Move [X19+48], X21
	089 Move X0, [X25]
	090 Call 0x1C17F10
	091 Move X2, [X26]
	092 Move X1, X19
	093 Move X3, X31
	094 Move X22, X0
	095 Call KeyGeneratedEventHandler..ctor, X0, X1, X2
	096 Compare X21, 0
	097 JumpIfEqual {147}
	098 Move X0, X21
	099 Move X1, X22
	100 Move X2, X31
	101 And W23, W20, 1
	102 Call RSAManaged.add_KeyGenerated, X0, X1
	103 Move [X19+40], W23
	104 Move TEMP, X20
	105 And TEMP, TEMP, 1
	106 Compare TEMP, 1
	107 JumpIfEqual {137}
	108 Move X8, 0xEC5000
	109 Move X8, [X8+1224]
	110 Move X0, [X8]
	111 Call 0x1C17F10
	112 Move W1, 1
	113 Move X2, X31
	114 Move X20, X0
	115 Call CspParameters..ctor, X0, X1
	116 Call RSACryptoServiceProvider.get_UseMachineKeyStore
	117 Move TEMP, X0
	118 And TEMP, TEMP, 1
	119 Compare TEMP, 1
	120 JumpIfNotEqual {128}
	121 Compare X20, 0
	122 JumpIfEqual {147}
	123 Move W8, [X20+44]
	124 Move X0, X20
	125 Move X2, X31
	126 Or W1, W8, 1
	127 Call CspParameters.set_Flags, X0, X1
	128 Move X8, 0xEC5000
	129 Move X8, [X8+3216]
	130 Move X0, [X8]
	131 Call 0x1C17F10
	132 Move X1, X20
	133 Move X2, X31
	134 Move X21, X0
	135 Call KeyPairPersistence..ctor, X0, X1
	136 Move [X19+32], X21
	137 Move X20, [X31+64]
	138 Move X19, [X31+72]
	139 Move X22, [X31+48]
	140 Move X21, [X31+56]
	141 Move X24, [X31+32]
	142 Move X23, [X31+40]
	143 Move X26, [X31+16]
	144 Move X25, [X31+24]
	145 Move X30, [X31+80]
	146 Return 
	147 Call 0x1C17F20
	148 Call 0x1C17F28

Method: System.Void Common(System.Security.Cryptography.CspParameters p)

Disassembly:
	0x0325D6B8 LDR W17, [X9], #0x14
	0x0325D6BC EOR W0, W16, W22, 0x2
	0x0325D6C0 ADD W14, W14, W8
	0x0325D6C4 ADD W16, W16, W8
	0x0325D6C8 ADD W14, W14, W15
	0x0325D6CC ADD W15, W16, W17
	0x0325D6D0 EXTR W16, W11, W11, 0x1B
	0x0325D6D4 EOR W17, W0, W11, 0x0
	0x0325D6D8 EXTR W25, W11, W11, 0x2
	0x0325D6DC ADD W12, W12, W16
	0x0325D6E0 ADD W13, W13, W17
	0x0325D6E4 EOR W16, W25, W21, 0x2
	0x0325D6E8 EXTR W17, W12, W12, 0x1B
	0x0325D6EC EOR W16, W16, W12, 0x0
	0x0325D6F0 EXTR W24, W12, W12, 0x2
	0x0325D6F4 ADD W12, W13, W17
	0x0325D6F8 ADD W13, W14, W16
	0x0325D6FC EOR W11, W24, W11, 0x2
	0x0325D700 EXTR W14, W12, W12, 0x1B
	0x0325D704 EOR W11, W11, W12, 0x0
	0x0325D708 ADD W22, W13, W14
	0x0325D70C ADD X10, X10, 0x5
	0x0325D710 EXTR W23, W12, W12, 0x2
	0x0325D714 ADD W11, W15, W11
	0x0325D718 EXTR W12, W22, W22, 0x1B
	0x0325D71C CMP X10, 0x23
	0x0325D720 ADD W21, W11, W12
	0x0325D724 B.CC 0x325D670
	0x0325D728 MOVZ W10, 0xBCDC
	0x0325D72C MOVK W10, 0x8F1B0000
	0x0325D730 ADD X8, X20, 0xB0
	0x0325D734 MOVZ W9, 0x23
	0x0325D738 ORR W13, W22, W23, 0x0
	0x0325D73C AND W12, W22, W23, 0x0
	0x0325D740 LDP W16, W17, [X8 - 0x10]
	0x0325D744 AND W13, W13, W24, 0x0
	0x0325D748 EXTR W11, W21, W21, 0x1B
	0x0325D74C ADD W14, W25, W10
	0x0325D750 ORR W12, W13, W12, 0x0
	0x0325D754 ORR W13, W21, W22, 0x2
	0x0325D758 ADD W11, W14, W11
	0x0325D75C AND W14, W21, W22, 0x2
	0x0325D760 AND W13, W13, W23, 0x0
	0x0325D764 ADD W0, W24, W10
	0x0325D768 ORR W13, W13, W14, 0x0
	0x0325D76C ADD W11, W11, W12
	0x0325D770 ADD W12, W0, W13
	0x0325D774 LDP W13, W0, [X8 - 0x8]
	0x0325D778 ADD W11, W11, W16
	0x0325D77C LDR W16, [X8], #0x14
	0x0325D780 EXTR W15, W22, W22, 0x2
	0x0325D784 EXTR W14, W21, W21, 0x2
	0x0325D788 ADD W15, W15, W10
	0x0325D78C ADD W14, W14, W10
	0x0325D790 ADD W12, W12, W17
	0x0325D794 ADD W15, W15, W0
	0x0325D798 ADD W14, W14, W16
	0x0325D79C EXTR W16, W11, W11, 0x1B
	0x0325D7A0 ORR W0, W11, W21, 0x2
	0x0325D7A4 ADD W1, W23, W10
	0x0325D7A8 AND W17, W11, W21, 0x2
	0x0325D7AC ADD W12, W12, W16
	0x0325D7B0 AND W16, W0, W22, 0x2
	0x0325D7B4 ADD W13, W1, W13
	0x0325D7B8 ORR W16, W16, W17, 0x0
	0x0325D7BC ORR W1, W12, W11, 0x2
	0x0325D7C0 EXTR W0, W12, W12, 0x1B
	0x0325D7C4 AND W17, W12, W11, 0x2
	0x0325D7C8 ADD W13, W13, W16
	0x0325D7CC AND W16, W1, W21, 0x2
	0x0325D7D0 ADD W13, W13, W0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1180000
	007 Move X22, 0xEC5000
	008 Move W8, [X21+1302]
	009 Move X22, [X22+3216]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEC5000
	017 Move X0, [X0+3216]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1302], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X1, X20
	024 Move X2, X31
	025 Move X21, X0
	026 Call KeyPairPersistence..ctor, X0, X1
	027 Move [X19+32], X21
	028 Compare X21, 0
	029 JumpIfEqual {70}
	030 Move X0, X21
	031 Move X1, X31
	032 Call KeyPairPersistence.Load, X0
	033 Compare X20, 0
	034 JumpIfEqual {70}
	035 Move W8, [X20+44]
	036 Move W9, 1
	037 And W31, W8, 8
	038 NotImplemented "Instruction BIC not yet implemented."
	039 NotImplemented "Instruction CSET not yet implemented."
	040 Or W8, W0, W8
	041 Move [X19+42], W9
	042 Move TEMP, X8
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {71}
	046 Move X8, [X19+32]
	047 Compare X8, 0
	048 JumpIfEqual {70}
	049 Move X1, [X8+24]
	050 Compare X1, 0
	051 JumpIfEqual {64}
	052 Move X8, [X19]
	053 Move W9, 1
	054 Move [X19+41], W9
	055 Move X0, X19
	056 Move X3, [X8+440]
	057 Move X2, [X8+448]
	058 Move X20, [X31+32]
	059 Move X19, [X31+40]
	060 Move X22, [X31+16]
	061 Move X21, [X31+24]
	062 Move X30, [X31+48]
	063 CallNoReturn X3
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X22, [X31+16]
	067 Move X21, [X31+24]
	068 Move X30, [X31+48]
	069 Return 
	070 Call 0x1C17F20
	071 Move X0, 0xEC4000
	072 Move X0, [X0+3296]
	073 Call 0x1C17D08
	074 Call 0x1C17F10
	075 Move X19, X0
	076 Move X0, 0xEC7000
	077 Move X0, [X0+688]
	078 Call 0x1C17D08
	079 Move X1, X0
	080 Move X0, X19
	081 Move X2, X31
	082 Call CryptographicException..ctor, X0, X1
	083 Move X0, 0xEC7000
	084 Move X0, [X0+696]
	085 Call 0x1C17D08
	086 Move X1, X0
	087 Move X0, X19
	088 Call 0x1C17DEC

Method: System.Void Finalize()

Disassembly:
	0x0325D7D4 ORR W16, W16, W17, 0x0
	0x0325D7D8 EXTR W24, W12, W12, 0x2
	0x0325D7DC ADD W15, W15, W16
	0x0325D7E0 AND W16, W13, W12, 0x2
	0x0325D7E4 ORR W12, W13, W12, 0x2
	0x0325D7E8 EXTR W25, W11, W11, 0x2
	0x0325D7EC EXTR W17, W13, W13, 0x1B
	0x0325D7F0 AND W11, W12, W11, 0x2
	0x0325D7F4 ADD W22, W15, W17
	0x0325D7F8 ORR W11, W11, W16, 0x0
	0x0325D7FC ADD X9, X9, 0x5
	0x0325D800 EXTR W12, W22, W22, 0x1B
	0x0325D804 ADD W11, W14, W11
	0x0325D808 CMP X9, 0x37
	0x0325D80C EXTR W23, W13, W13, 0x2
	0x0325D810 ADD W21, W11, W12
	0x0325D814 B.CC 0x325D738
	0x0325D818 ADD W10, W9, 0x5
	0x0325D81C CMP W10, 0x4F
	0x0325D820 B.HI 0x325D8E4
	0x0325D824 MOVZ W10, 0xC1D6
	0x0325D828 MOVK W10, 0xCA620000
	0x0325D82C EXTR W11, W21, W21, 0x1B
	0x0325D830 EOR W12, W23, W24, 0x0
	0x0325D834 ADD W13, W25, W10
	0x0325D838 ADD W11, W13, W11
	0x0325D83C LDP W13, W15, [X8 - 0x10]
	0x0325D840 EOR W12, W12, W22, 0x0
	0x0325D844 ADD W11, W11, W12
	0x0325D848 EOR W12, W23, W22, 0x2
	0x0325D84C ADD W16, W24, W10
	0x0325D850 EOR W12, W12, W21, 0x0
	0x0325D854 ADD W12, W16, W12
	0x0325D858 ADD W11, W11, W13
	0x0325D85C ADD W12, W12, W15
	0x0325D860 LDP W13, W15, [X8 - 0x8]
	0x0325D864 ADD W17, W23, W10
	0x0325D868 EXTR W14, W22, W22, 0x2
	0x0325D86C EXTR W16, W21, W21, 0x2
	0x0325D870 ADD W13, W17, W13

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X0]
	006 Move X19, X0
	007 Move X9, [X8+392]
	008 Move X2, [X8+400]
	009 Move W1, W31
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Move X0, X19
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X1, X31
	015 Move X30, [X31+32]
	016 Move X21, [X31+40]
	017 Call Object.Finalize, X0
	018 Return 
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X21, X0
	021 Move X0, X21
	022 Call 0x3EB2AD0
	023 Move X20, [X0]
	024 Call 0x3EB2AE0
	025 Move X0, X19
	026 Move X1, X31
	027 Call Object.Finalize, X0
	028 Compare X20, 0
	029 JumpIfNotEqual {36}
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return 
	035 Move X20, X31
	036 Move X0, X20
	037 Call 0x1C17F18
	038 Move X21, X0
	039 Move X0, X19
	040 Move X1, X31
	041 Call Object.Finalize, X0
	042 Compare X20, 0
	043 JumpIfNotEqual {46}
	044 Move X0, X21
	045 Call 0x1D2D690
	046 Move X0, X20
	047 Call 0x1C17F18
	048 Call 0x1991590

Method: System.Int32 get_KeySize()

Disassembly:
	0x0325D874 LDR W17, [X8], #0x14
	0x0325D878 EOR W0, W16, W22, 0x2
	0x0325D87C ADD W14, W14, W10
	0x0325D880 ADD W16, W16, W10
	0x0325D884 ADD W14, W14, W15
	0x0325D888 ADD W15, W16, W17
	0x0325D88C EXTR W16, W11, W11, 0x1B
	0x0325D890 EOR W17, W0, W11, 0x0

ISIL:
	001 Move X8, X0
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X8, [X0]
	006 Move X2, [X8+408]
	007 Move X1, [X8+416]
	008 CallNoReturn X2
	009 Move W0, [X8+16]
	010 Return X0

Method: System.Boolean get_PublicOnly()

Disassembly:
	0x0325D894 EXTR W25, W11, W11, 0x2
	0x0325D898 ADD W12, W12, W16
	0x0325D89C ADD W13, W13, W17
	0x0325D8A0 EOR W16, W25, W21, 0x2
	0x0325D8A4 EXTR W17, W12, W12, 0x1B
	0x0325D8A8 EOR W16, W16, W12, 0x0
	0x0325D8AC EXTR W24, W12, W12, 0x2

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call RSAManaged.get_PublicOnly, X0
	008 Return X0
	009 Call 0x1C17F20

Method: System.Byte[] EncryptValue(System.Byte[] rgb)

Disassembly:
	0x0325D8B0 ADD W12, W13, W17
	0x0325D8B4 ADD W13, W14, W16
	0x0325D8B8 EOR W11, W24, W11, 0x2
	0x0325D8BC EXTR W14, W12, W12, 0x1B
	0x0325D8C0 EOR W11, W11, W12, 0x0
	0x0325D8C4 ADD W22, W13, W14
	0x0325D8C8 ADD X9, X9, 0x5
	0x0325D8CC EXTR W23, W12, W12, 0x2

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+472]
	007 Move X2, [X8+480]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Security.Cryptography.RSAParameters ExportParameters(System.Boolean includePrivateParameters)

Disassembly:
	0x0325D8D0 ADD W11, W15, W11
	0x0325D8D4 EXTR W12, W22, W22, 0x1B
	0x0325D8D8 CMP X9, 0x4B
	0x0325D8DC ADD W21, W11, W12
	0x0325D8E0 B.CC 0x325D82C
	0x0325D8E4 LDP W8, W9, [X19]
	0x0325D8E8 LDP W10, W11, [X19 + 0x8]
	0x0325D8EC LDR W12, [X19 + 0x10]
	0x0325D8F0 ADD W8, W8, W21
	0x0325D8F4 ADD W9, W9, W22
	0x0325D8F8 ADD W10, W10, W23
	0x0325D8FC ADD W11, W11, W24
	0x0325D900 ADD W12, W12, W25
	0x0325D904 STP W8, W9, [X19]
	0x0325D908 STP W10, W11, [X19 + 0x8]
	0x0325D90C STR W12, [X19 + 0x10]
	0x0325D910 LDP X20, X19, [X31 + 0x40]
	0x0325D914 LDP X22, X21, [X31 + 0x30]
	0x0325D918 LDP X24, X23, [X31 + 0x20]
	0x0325D91C LDP X26, X25, [X31 + 0x10]
	0x0325D920 LDR X30, [X31], #0x50
	0x0325D924 RET
	0x0325D928 MOV X8, X31
	0x0325D92C ADD X9, X0, X8
	0x0325D930 LDR W10, [X9 + 0x34]
	0x0325D934 LDR W11, [X9 + 0x20]
	0x0325D938 LDR W12, [X9 + 0x8]
	0x0325D93C LDR W13, [X9]
	0x0325D940 ADD X8, X8, 0x4
	0x0325D944 EOR W10, W11, W10, 0x0
	0x0325D948 EOR W10, W10, W12, 0x0
	0x0325D94C EOR W10, W10, W13, 0x0
	0x0325D950 EXTR W10, W10, W10, 0x1F
	0x0325D954 CMP X8, 0x100
	0x0325D958 STR W10, [X9 + 0x40]
	0x0325D95C B.NE 0x325D92C
	0x0325D960 RET
	0x0325D964 STP X30, X19, [X31 - 0x10]!
	0x0325D968 MOV X1, X31
	0x0325D96C MOV X19, X0
	0x0325D970 BL 0x3251230
	0x0325D974 MOVZ W8, 0x100
	0x0325D978 STR W8, [X19 + 0x14]
	0x0325D97C LDP X30, X19, [X31], #0x10
	0x0325D980 RET
	0x0325D984 STR X30, [X31 - 0x20]!
	0x0325D988 STP X20, X19, [X31 + 0x10]
	0x0325D98C ADRP X19, 0x117F000
	0x0325D990 ADRP X20, 0xEC6000
	0x0325D994 LDRB W8, [X19 + 0x51D]
	0x0325D998 LDR X20, [X20 + 0xC0]
	0x0325D99C TBNZ X8, 0x0, 0x325D9B4
	0x0325D9A0 ADRP X0, 0xEC6000
	0x0325D9A4 LDR X0, [X0 + 0xC0]
	0x0325D9A8 BL 0x1C16CF4
	0x0325D9AC MOVZ W8, 0x1
	0x0325D9B0 STRB W8, [X19 + 0x51D]
	0x0325D9B4 LDR X0, [X20]
	0x0325D9B8 BL 0x1C16F10
	0x0325D9BC MOV X19, X0
	0x0325D9C0 BL 0x3255068
	0x0325D9C4 MOV X0, X19
	0x0325D9C8 LDP X20, X19, [X31 + 0x10]
	0x0325D9CC LDR X30, [X31], #0x20
	0x0325D9D0 RET
	0x0325D9D4 STR X30, [X31 - 0x10]!
	0x0325D9D8 LDR X8, [X0 + 0x38]
	0x0325D9DC STR X31, [X0 + 0x30]
	0x0325D9E0 CBZ X8, 0x325DA90
	0x0325D9E4 LDR W9, [X8 + 0x18]
	0x0325D9E8 CBZ W9, 0x325DA8C
	0x0325D9EC MOVZ W10, 0xE667
	0x0325D9F0 MOVK W10, 0x6A090000
	0x0325D9F4 CMP W9, 0x1
	0x0325D9F8 STR W10, [X8 + 0x20]
	0x0325D9FC B.EQ 0x325DA8C

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+80], X30
	003 Move [X31+96], X20
	004 Move [X31+104], X19
	005 Move W20, W1
	006 Move X19, X8
	007 Move TEMP, X1
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {14}
	011 Move W8, [X0+42]
	012 Compare W8, 0
	013 JumpIfEqual {61}
	014 Move X0, [X0+48]
	015 Compare X0, 0
	016 JumpIfEqual {60}
	017 Move X8, [X0]
	018 And W1, W20, 1
	019 Move X9, [X8+488]
	020 Move X2, [X8+496]
	021 Add X8, X31, 0
	022 NotImplemented "Instruction BLR not yet implemented."
	023 Move V0, [X31]
	024 Move X8, [X31+16]
	025 Move X9, [X31+24]
	026 Move X10, [X31+32]
	027 Move X11, [X31+40]
	028 Move X12, [X31+48]
	029 Move X13, [X31+56]
	030 Move [X31+4], V0
	031 Move TEMP, X20
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {47}
	035 Compare X13, 0
	036 JumpIfEqual {68}
	037 Compare X8, 0
	038 JumpIfEqual {80}
	039 Compare X9, 0
	040 JumpIfEqual {80}
	041 Compare X10, 0
	042 JumpIfEqual {80}
	043 Compare X11, 0
	044 JumpIfEqual {80}
	045 Compare X12, 0
	046 JumpIfEqual {80}
	047 Move V0, [X31+4]
	048 Move [X19+16], X8
	049 Move [X19+24], X9
	050 Move [X19+32], X10
	051 Move [X19+40], X11
	052 Move [X19+48], X12
	053 Move [X19+56], X13
	054 Move [X19], V0
	055 Move X20, [X31+96]
	056 Move X19, [X31+104]
	057 Move X30, [X31+80]
	058 Add X31, X31, 112
	059 Return X0
	060 Call 0x1C17F20
	061 Move X0, 0xEC4000
	062 Move X0, [X0+3296]
	063 Call 0x1C17D08
	064 Call 0x1C17F10
	065 Move X19, X0
	066 Move X0, 0xEC7000
	067 Move X0, [X0+704]
	068 Move X0, 0xE9C000
	069 Move X0, [X0+1320]
	070 Call 0x1C17D08
	071 Call 0x1C17F10
	072 Move X19, X0
	073 Move X0, 0xEC7000
	074 Move X0, [X0+712]
	075 Call 0x1C17D08
	076 Move X1, X0
	077 Move X0, X19
	078 Move X2, X31
	079 Call ArgumentNullException..ctor, X0, X1
	080 Move X0, 0xEC4000
	081 Move X0, [X0+3296]
	082 Call 0x1C17D08
	083 Call 0x1C17F10
	084 Move X19, X0
	085 Move X0, 0xEC7000
	086 Move X0, [X0+720]
	087 Call 0x1C17D08
	088 Move X1, X0
	089 Move X0, X19
	090 Move X2, X31
	091 Call CryptographicException..ctor, X0, X1
	092 Move X0, 0xEC7000
	093 Move X0, [X0+728]
	094 Call 0x1C17D08
	095 Move X1, X0
	096 Move X0, X19
	097 Call 0x1C17DEC

Method: System.Void ImportParameters(System.Security.Cryptography.RSAParameters parameters)

Disassembly:
	0x0325DA00 MOVZ W10, 0xAE85
	0x0325DA04 MOVK W10, 0xBB670000
	0x0325DA08 CMP W9, 0x2
	0x0325DA0C STR W10, [X8 + 0x24]
	0x0325DA10 B.LS 0x325DA8C
	0x0325DA14 MOVZ W10, 0xF372
	0x0325DA18 MOVK W10, 0x3C6E0000
	0x0325DA1C CMP W9, 0x3
	0x0325DA20 STR W10, [X8 + 0x28]
	0x0325DA24 B.EQ 0x325DA8C
	0x0325DA28 MOVZ W10, 0xF53A
	0x0325DA2C MOVK W10, 0xA54F0000
	0x0325DA30 CMP W9, 0x4
	0x0325DA34 STR W10, [X8 + 0x2C]
	0x0325DA38 B.LS 0x325DA8C
	0x0325DA3C MOVZ W10, 0x527F
	0x0325DA40 MOVK W10, 0x510E0000
	0x0325DA44 CMP W9, 0x5
	0x0325DA48 STR W10, [X8 + 0x30]
	0x0325DA4C B.EQ 0x325DA8C
	0x0325DA50 MOVZ W10, 0x688C

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+128], X30
	003 Move V0, [X1+32]
	004 Move V1, [X1+48]
	005 Move V2, [X1]
	006 Move V3, [X1+16]
	007 Move X0, [X0+48]
	008 Move [X31+32], V0
	009 Move [X31+40], V1
	010 Move [X31], V2
	011 Move [X31+8], V3
	012 Compare X0, 0
	013 JumpIfEqual {30}
	014 Move X8, [X0]
	015 Move V0, [X31]
	016 Move V1, [X31+16]
	017 Move V2, [X31+32]
	018 Move V3, [X31+48]
	019 Add X1, X31, 64
	020 Move X9, [X8+504]
	021 Move [X31+64], V0
	022 Move [X31+72], V1
	023 Move [X31+96], V2
	024 Move [X31+104], V3
	025 Move X2, [X8+512]
	026 NotImplemented "Instruction BLR not yet implemented."
	027 Move X30, [X31+128]
	028 Add X31, X31, 144
	029 Return 
	030 Call 0x1C17F20

Method: System.String GetHashNameFromOID(System.String oid)

Disassembly:
	0x0325DA54 MOVK W10, 0x9B050000
	0x0325DA58 CMP W9, 0x6
	0x0325DA5C STR W10, [X8 + 0x34]
	0x0325DA60 B.LS 0x325DA8C
	0x0325DA64 MOVZ W10, 0xD9AB
	0x0325DA68 MOVK W10, 0x1F830000
	0x0325DA6C CMP W9, 0x7
	0x0325DA70 STR W10, [X8 + 0x38]
	0x0325DA74 B.EQ 0x325DA8C
	0x0325DA78 MOVZ W9, 0xCD19
	0x0325DA7C MOVK W9, 0x5BE00000
	0x0325DA80 STR W9, [X8 + 0x3C]
	0x0325DA84 LDR X30, [X31], #0x10
	0x0325DA88 RET
	0x0325DA8C BL 0x1C16F28
	0x0325DA90 BL 0x1C16F20
	0x0325DA94 STP X30, X19, [X31 - 0x10]!
	0x0325DA98 MOV X19, X0
	0x0325DA9C BL 0x325D9D4
	0x0325DAA0 LDR X0, [X19 + 0x28]
	0x0325DAA4 CBZ X0, 0x325DAD4
	0x0325DAA8 LDR W2, [X0 + 0x18]
	0x0325DAAC MOV W1, W31
	0x0325DAB0 MOV X3, X31
	0x0325DAB4 BL 0x339FA34
	0x0325DAB8 LDR X0, [X19 + 0x40]
	0x0325DABC CBZ X0, 0x325DAD4
	0x0325DAC0 LDR W2, [X0 + 0x18]
	0x0325DAC4 MOV W1, W31
	0x0325DAC8 MOV X3, X31
	0x0325DACC LDP X30, X19, [X31], #0x10
	0x0325DAD0 B 0x339FA34
	0x0325DAD4 BL 0x1C16F20
	0x0325DAD8 B 0x325DADC
	0x0325DADC STR X30, [X31 - 0x60]!
	0x0325DAE0 STP X28, X27, [X31 + 0x10]
	0x0325DAE4 STP X26, X25, [X31 + 0x20]
	0x0325DAE8 STP X24, X23, [X31 + 0x30]
	0x0325DAEC STP X22, X21, [X31 + 0x40]
	0x0325DAF0 STP X20, X19, [X31 + 0x50]
	0x0325DAF4 ADRP X23, 0x117F000
	0x0325DAF8 LDRB W8, [X23 + 0x51F]
	0x0325DAFC MOV W19, W3
	0x0325DB00 MOV W20, W2
	0x0325DB04 MOV X21, X1
	0x0325DB08 MOV X22, X0
	0x0325DB0C TBNZ X8, 0x0, 0x325DB24
	0x0325DB10 ADRP X0, 0xEC6000
	0x0325DB14 LDR X0, [X0 + 0xC0]
	0x0325DB18 BL 0x1C16CF4
	0x0325DB1C MOVZ W8, 0x1
	0x0325DB20 STRB W8, [X23 + 0x51F]
	0x0325DB24 LDP X8, X9, [X22 + 0x30]
	0x0325DB28 ADD X10, X8, W19, SXTW
	0x0325DB2C STR X10, [X22 + 0x30]
	0x0325DB30 CBZ X9, 0x325DB48
	0x0325DB34 LDR W10, [X9 + 0x18]
	0x0325DB38 ADD X9, X9, 0x20
	0x0325DB3C CMP W10, 0x0
	0x0325DB40 CSEL X23, X31, X9, EQ
	0x0325DB44 B 0x325DB4C
	0x0325DB48 MOV X23, X31
	0x0325DB4C LDR X2, [X22 + 0x28]
	0x0325DB50 AND W25, W8, 0x3F
	0x0325DB54 CBZ X2, 0x325DB6C
	0x0325DB58 LDR W8, [X2 + 0x18]
	0x0325DB5C ADD X9, X2, 0x20
	0x0325DB60 CMP W8, 0x0
	0x0325DB64 CSEL X24, X31, X9, EQ
	0x0325DB68 B 0x325DB70
	0x0325DB6C MOV X24, X31
	0x0325DB70 LDR X8, [X22 + 0x40]
	0x0325DB74 CBZ X8, 0x325DB8C
	0x0325DB78 LDR W9, [X8 + 0x18]
	0x0325DB7C ADD X8, X8, 0x20
	0x0325DB80 CMP W9, 0x0
	0x0325DB84 CSEL X26, X31, X8, EQ
	0x0325DB88 B 0x325DB90
	0x0325DB8C MOV X26, X31
	0x0325DB90 ADRP X28, 0xEC6000
	0x0325DB94 LDR X28, [X28 + 0xC0]
	0x0325DB98 CBZ W25, 0x325DBF4
	0x0325DB9C ADD W8, W25, W19
	0x0325DBA0 CMP W8, 0x40
	0x0325DBA4 B.LT 0x325DBF4
	0x0325DBA8 MOVZ W8, 0x40
	0x0325DBAC SUB W27, W8, W25
	0x0325DBB0 MOV X0, X21
	0x0325DBB4 MOV W1, W20
	0x0325DBB8 MOV W3, W25
	0x0325DBBC MOV W4, W27
	0x0325DBC0 MOV X5, X31
	0x0325DBC4 BL 0x33A8750
	0x0325DBC8 LDR X0, [X28]
	0x0325DBCC ADD W20, W27, W20
	0x0325DBD0 SUB W19, W19, W27
	0x0325DBD4 LDR W8, [X0 + 0xE0]
	0x0325DBD8 CBNZ W8, 0x325DBE0
	0x0325DBDC BL 0x1C16DFC
	0x0325DBE0 MOV X0, X26
	0x0325DBE4 MOV X1, X23
	0x0325DBE8 MOV X2, X24
	0x0325DBEC BL 0x325DE54
	0x0325DBF0 MOV W25, W31
	0x0325DBF4 CMP W19, 0x40
	0x0325DBF8 B.LT 0x325DC4C
	0x0325DBFC LDR X2, [X22 + 0x28]
	0x0325DC00 MOVZ W4, 0x40
	0x0325DC04 MOV X0, X21
	0x0325DC08 MOV W1, W20
	0x0325DC0C MOV W3, W31
	0x0325DC10 MOV X5, X31
	0x0325DC14 BL 0x33A8750

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1180000
	006 Move X21, 0xEC4000
	007 Move W8, [X20+1303]
	008 Move X21, [X21+3336]
	009 Move X19, X1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {46}
	014 Move X0, 0xEC7000
	015 Move X0, [X0+736]
	016 Call 0x1C17CF4
	017 Move X0, 0xEC4000
	018 Move X0, [X0+3352]
	019 Call 0x1C17CF4
	020 Move X0, 0xEC4000
	021 Move X0, [X0+3360]
	022 Call 0x1C17CF4
	023 Move X0, 0xEC4000
	024 Move X0, [X0+3376]
	025 Call 0x1C17CF4
	026 Move X0, 0xEC4000
	027 Move X0, [X0+3392]
	028 Call 0x1C17CF4
	029 Move X0, 0xEC7000
	030 Move X0, [X0+744]
	031 Call 0x1C17CF4
	032 Move X0, 0xEC4000
	033 Move X0, [X0+3336]
	034 Call 0x1C17CF4
	035 Move X0, 0xEC4000
	036 Move X0, [X0+3408]
	037 Call 0x1C17CF4
	038 Move X0, 0xEC7000
	039 Move X0, [X0+752]
	040 Call 0x1C17CF4
	041 Move X0, 0xEC4000
	042 Move X0, [X0+3416]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X20+1303], W8
	046 Move X1, [X21]
	047 Move X0, X19
	048 Move X2, X31
	049 Call String.op_Equality, X0, X1
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {56}
	054 Move X8, 0xEC4000
	055 Move X8, [X8+3392]
	056 Move X8, 0xEC4000
	057 Move X8, [X8+3376]
	058 Move X0, X19
	059 Move X2, X31
	060 Move X1, [X8]
	061 Call String.op_Equality, X0, X1
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {68}
	066 Move X8, 0xEC4000
	067 Move X8, [X8+3408]
	068 Move X8, 0xEC7000
	069 Move X8, [X8+736]
	070 Move X0, X19
	071 Move X2, X31
	072 Move X1, [X8]
	073 Call String.op_Equality, X0, X1
	074 Move TEMP, X0
	075 And TEMP, TEMP, 1
	076 Compare TEMP, 1
	077 JumpIfNotEqual {80}
	078 Move X8, 0xEC4000
	079 Move X8, [X8+3360]
	080 Move X8, 0xEC7000
	081 Move X8, [X8+752]
	082 Move X0, X19
	083 Move X2, X31
	084 Move X1, [X8]
	085 Call String.op_Equality, X0, X1
	086 Move TEMP, X0
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfNotEqual {92}
	090 Move X8, 0xEC4000
	091 Move X8, [X8+3352]
	092 Move X8, 0xEC7000
	093 Move X8, [X8+744]
	094 Move X0, X19
	095 Move X2, X31
	096 Move X1, [X8]
	097 Call String.op_Equality, X0, X1
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfNotEqual {110}
	102 Move X8, 0xEC4000
	103 Move X8, [X8+3416]
	104 Move X0, [X8]
	105 Move X20, [X31+16]
	106 Move X19, [X31+24]
	107 Move X30, [X31+32]
	108 Move X21, [X31+40]
	109 Return X0
	110 Move X0, 0xEC7000
	111 Move X0, [X0+760]
	112 Call 0x1C17D08
	113 Move X1, X0
	114 Move X0, X19
	115 Move X2, X31
	116 Call String.Concat, X0, X1
	117 Move X19, X0
	118 Move X0, 0xEC4000
	119 Move X0, [X0+3296]
	120 Call 0x1C17D08
	121 Call 0x1C17F10
	122 Move X1, X19
	123 Move X2, X31
	124 Move X20, X0
	125 Call CryptographicException..ctor, X0, X1
	126 Move X0, 0xEC7000
	127 Move X0, [X0+768]
	128 Call 0x1C17D08
	129 Move X1, X0
	130 Move X0, X20
	131 Call 0x1C17DEC

Method: System.Boolean VerifyHash(System.Byte[] rgbHash, System.String str, System.Byte[] rgbSignature)

Disassembly:
	0x0325DC18 LDR X0, [X28]
	0x0325DC1C SUB W19, W19, 0x40
	0x0325DC20 LDR W8, [X0 + 0xE0]
	0x0325DC24 CBNZ W8, 0x325DC2C
	0x0325DC28 BL 0x1C16DFC
	0x0325DC2C MOV X0, X26
	0x0325DC30 MOV X1, X23
	0x0325DC34 MOV X2, X24
	0x0325DC38 ADD W20, W20, 0x40
	0x0325DC3C BL 0x325DE54
	0x0325DC40 ADD W8, W19, 0x40
	0x0325DC44 CMP W8, 0x7F
	0x0325DC48 B.GT 0x325DBFC
	0x0325DC4C CMP W19, 0x1
	0x0325DC50 B.LT 0x325DC88
	0x0325DC54 LDR X2, [X22 + 0x28]
	0x0325DC58 MOV X0, X21
	0x0325DC5C MOV W1, W20
	0x0325DC60 MOV W3, W25
	0x0325DC64 MOV W4, W19
	0x0325DC68 LDP X20, X19, [X31 + 0x50]
	0x0325DC6C LDP X22, X21, [X31 + 0x40]
	0x0325DC70 LDP X24, X23, [X31 + 0x30]
	0x0325DC74 LDP X26, X25, [X31 + 0x20]
	0x0325DC78 LDP X28, X27, [X31 + 0x10]
	0x0325DC7C MOV X5, X31
	0x0325DC80 LDR X30, [X31], #0x60
	0x0325DC84 B 0x33A8750
	0x0325DC88 LDP X20, X19, [X31 + 0x50]
	0x0325DC8C LDP X22, X21, [X31 + 0x40]
	0x0325DC90 LDP X24, X23, [X31 + 0x30]
	0x0325DC94 LDP X26, X25, [X31 + 0x20]
	0x0325DC98 LDP X28, X27, [X31 + 0x10]
	0x0325DC9C LDR X30, [X31], #0x60
	0x0325DCA0 RET
	0x0325DCA4 B 0x325DCA8
	0x0325DCA8 STP X30, X21, [X31 - 0x20]!
	0x0325DCAC STP X20, X19, [X31 + 0x10]
	0x0325DCB0 ADRP X20, 0x117F000
	0x0325DCB4 ADRP X21, 0xE96000
	0x0325DCB8 LDRB W8, [X20 + 0x520]
	0x0325DCBC LDR X21, [X21 + 0x618]
	0x0325DCC0 MOV X19, X0
	0x0325DCC4 TBNZ X8, 0x0, 0x325DCDC
	0x0325DCC8 ADRP X0, 0xE96000
	0x0325DCCC LDR X0, [X0 + 0x618]
	0x0325DCD0 BL 0x1C16CF4
	0x0325DCD4 MOVZ W8, 0x1
	0x0325DCD8 STRB W8, [X20 + 0x520]
	0x0325DCDC LDR X0, [X21]
	0x0325DCE0 MOVZ W1, 0x20
	0x0325DCE4 BL 0x1C16D6C
	0x0325DCE8 LDR X8, [X19 + 0x30]
	0x0325DCEC MOV X20, X0
	0x0325DCF0 MOVZ W9, 0x80
	0x0325DCF4 LDR X0, [X21]
	0x0325DCF8 AND X8, X8, 0x3F
	0x0325DCFC CMP W8, 0x38
	0x0325DD00 MOVZ W10, 0x40
	0x0325DD04 CSEL X9, X10, X9, CC
	0x0325DD08 SUB X21, X9, X8
	0x0325DD0C MOV W1, W21
	0x0325DD10 BL 0x1C16D6C
	0x0325DD14 CBZ X0, 0x325DE50
	0x0325DD18 LDR W8, [X0 + 0x18]
	0x0325DD1C MOV X1, X0
	0x0325DD20 CBZ W8, 0x325DE4C
	0x0325DD24 MOV W9, W21
	0x0325DD28 SXTW X9, W9
	0x0325DD2C SUB X10, X9, 0x8
	0x0325DD30 MOVZ W11, 0x80
	0x0325DD34 CMP W10, W8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x1180000
	008 Move W8, [X23+1304]
	009 Move X19, X3
	010 Move X22, X2
	011 Move X20, X1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xEC5000
	018 Move X0, [X0+3416]
	019 Call 0x1C17CF4
	020 Move X0, 0xEC4000
	021 Move X0, [X0+3392]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+1304], W8
	025 Compare X20, 0
	026 JumpIfEqual {60}
	027 Compare X19, 0
	028 JumpIfEqual {67}
	029 Move X23, 0xEC5000
	030 Move X23, [X23+3416]
	031 Compare X22, 0
	032 JumpIfEqual {35}
	033 Move X1, X22
	034 Call RSACryptoServiceProvider.GetHashNameFromOID, X0, X1
	035 Move X8, 0xEC4000
	036 Move X8, [X8+3392]
	037 Move X0, [X8]
	038 Move X1, X31
	039 Call HashAlgorithm.Create, X0
	040 Move X8, [X23]
	041 Move X22, X0
	042 Move W9, [X8+224]
	043 Compare W9, 0
	044 JumpIfNotEqual {47}
	045 Move X0, X8
	046 Call 0x1C17DFC
	047 Move X0, X21
	048 Move X1, X22
	049 Move X2, X20
	050 Move X3, X19
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move X4, X31
	056 Move X30, [X31+48]
	057 Move X23, [X31+56]
	058 Call PKCS1.Verify_v15, X0, X1, X2, X3
	059 Return X0
	060 Move X0, 0xE9C000
	061 Move X0, [X0+1320]
	062 Call 0x1C17D08
	063 Call 0x1C17F10
	064 Move X19, X0
	065 Move X0, 0xEC5000
	066 Move X0, [X0+3848]
	067 Move X0, 0xE9C000
	068 Move X0, [X0+1320]
	069 Call 0x1C17D08
	070 Call 0x1C17F10
	071 Move X19, X0
	072 Move X0, 0xEC5000
	073 Move X0, [X0+3856]
	074 Call 0x1C17D08
	075 Move X1, X0
	076 Move X0, X19
	077 Move X2, X31
	078 Call ArgumentNullException..ctor, X0, X1
	079 Move X0, 0xEC7000
	080 Move X0, [X0+776]
	081 Call 0x1C17D08
	082 Move X1, X0
	083 Move X0, X19
	084 Call 0x1C17DEC

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x0325DD38 STRB W11, [X1 + 0x20]
	0x0325DD3C B.CS 0x325DE4C
	0x0325DD40 LDR X8, [X19 + 0x30]
	0x0325DD44 ADD X10, X1, X10
	0x0325DD48 UBFM X11, X8, 0x35, 0x3F
	0x0325DD4C STRB W11, [X10 + 0x20]
	0x0325DD50 LDR W11, [X1 + 0x18]
	0x0325DD54 SUB X10, X21, 0x7
	0x0325DD58 CMP W10, W11
	0x0325DD5C B.CS 0x325DE4C
	0x0325DD60 UBFM X11, X8, 0x2D, 0x3F
	0x0325DD64 ADD X10, X1, X10
	0x0325DD68 STRB W11, [X10 + 0x20]
	0x0325DD6C LDR W11, [X1 + 0x18]
	0x0325DD70 SUB X10, X9, 0x6
	0x0325DD74 CMP W10, W11
	0x0325DD78 B.CS 0x325DE4C
	0x0325DD7C UBFM X11, X8, 0x25, 0x3F
	0x0325DD80 ADD X10, X1, X10
	0x0325DD84 STRB W11, [X10 + 0x20]
	0x0325DD88 LDR W11, [X1 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+43]
	004 Compare W8, 0
	005 JumpIfNotEqual {25}
	006 Move W8, [X0+41]
	007 Move X19, X0
	008 Compare W8, 0
	009 JumpIfEqual {18}
	010 Move W8, [X19+40]
	011 Compare W8, 0
	012 JumpIfNotEqual {18}
	013 Move X0, [X19+32]
	014 Compare X0, 0
	015 JumpIfEqual {28}
	016 Move X1, X31
	017 Call KeyPairPersistence.Remove, X0
	018 Move X0, [X19+48]
	019 Compare X0, 0
	020 JumpIfEqual {23}
	021 Move X1, X31
	022 Call AsymmetricAlgorithm.Clear, X0
	023 Move W8, 1
	024 Move [X19+43], W8
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Return 
	028 Call 0x1C17F20

Method: System.Void OnKeyGenerated(System.Object sender, System.EventArgs e)

Disassembly:
	0x0325DD8C SUB X10, X9, 0x5
	0x0325DD90 CMP W10, W11
	0x0325DD94 B.CS 0x325DE4C
	0x0325DD98 UBFM X11, X8, 0x1D, 0x3F
	0x0325DD9C ADD X10, X1, X10
	0x0325DDA0 STRB W11, [X10 + 0x20]
	0x0325DDA4 LDR W11, [X1 + 0x18]
	0x0325DDA8 SUB X10, X9, 0x4
	0x0325DDAC CMP W10, W11
	0x0325DDB0 B.CS 0x325DE4C
	0x0325DDB4 UBFM X11, X8, 0x15, 0x3F
	0x0325DDB8 ADD X10, X1, X10
	0x0325DDBC STRB W11, [X10 + 0x20]
	0x0325DDC0 LDR W10, [X1 + 0x18]
	0x0325DDC4 SUB X9, X9, 0x3
	0x0325DDC8 CMP W9, W10
	0x0325DDCC B.CS 0x325DE4C
	0x0325DDD0 UBFM X10, X8, 0xD, 0x3F
	0x0325DDD4 ADD X9, X1, X9
	0x0325DDD8 STRB W10, [X9 + 0x20]
	0x0325DDDC LDR W10, [X1 + 0x18]
	0x0325DDE0 SUB W9, W21, 0x2
	0x0325DDE4 CMP W9, W10
	0x0325DDE8 B.CS 0x325DE4C
	0x0325DDEC UBFM X10, X8, 0x5, 0x3F
	0x0325DDF0 ADD X9, X1, W9, UXTW
	0x0325DDF4 STRB W10, [X9 + 0x20]
	0x0325DDF8 LDR W10, [X1 + 0x18]
	0x0325DDFC SUB W9, W21, 0x1
	0x0325DE00 CMP W9, W10
	0x0325DE04 B.CS 0x325DE4C
	0x0325DE08 UBFM W8, W8, 0x1D, 0x1C
	0x0325DE0C ADD X9, X1, W9, UXTW

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+40]
	005 Compare W8, 0
	006 JumpIfEqual {37}
	007 Move W8, [X0+41]
	008 Move X19, X0
	009 Compare W8, 0
	010 JumpIfNotEqual {37}
	011 Move X0, [X19+48]
	012 Compare X0, 0
	013 JumpIfEqual {41}
	014 Move X20, [X19+32]
	015 Move X1, X31
	016 Call RSAManaged.get_PublicOnly, X0
	017 Move X8, [X19]
	018 Move X9, [X8+456]
	019 Move X2, [X8+464]
	020 NotImplemented "Instruction ORN not yet implemented."
	021 And W1, W8, 1
	022 Move X0, X19
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Compare X20, 0
	025 JumpIfEqual {41}
	026 Move X1, X0
	027 Move X0, X20
	028 Move X2, X31
	029 Call KeyPairPersistence.set_KeyValue, X0, X1
	030 Move X0, [X19+32]
	031 Compare X0, 0
	032 JumpIfEqual {41}
	033 Move X1, X31
	034 Call KeyPairPersistence.Save, X0
	035 Move W8, 1
	036 Move [X19+41], W8
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Return 
	041 Call 0x1C17F20

Method: System.Void ImportCspBlob(System.Byte[] keyBlob)

Disassembly:
	0x0325DE10 STRB W8, [X9 + 0x20]
	0x0325DE14 LDR W3, [X1 + 0x18]
	0x0325DE18 MOV X0, X19
	0x0325DE1C MOV W2, W31
	0x0325DE20 BL 0x325DADC
	0x0325DE24 LDR X1, [X19 + 0x38]
	0x0325DE28 MOVZ W2, 0x8
	0x0325DE2C MOV X0, X20
	0x0325DE30 MOV X3, X31
	0x0325DE34 BL 0x3262730
	0x0325DE38 STR X20, [X19 + 0x18]
	0x0325DE3C MOV X0, X20
	0x0325DE40 LDP X20, X19, [X31 + 0x10]
	0x0325DE44 LDP X30, X21, [X31], #0x20
	0x0325DE48 RET
	0x0325DE4C BL 0x1C16F28
	0x0325DE50 BL 0x1C16F20
	0x0325DE54 SUB X31, X31, 0x80
	0x0325DE58 STP X29, X30, [X31 + 0x20]
	0x0325DE5C STP X28, X27, [X31 + 0x30]
	0x0325DE60 STP X26, X25, [X31 + 0x40]
	0x0325DE64 STP X24, X23, [X31 + 0x50]
	0x0325DE68 STP X22, X21, [X31 + 0x60]
	0x0325DE6C STP X20, X19, [X31 + 0x70]
	0x0325DE70 ADRP X19, 0x117F000
	0x0325DE74 ADRP X22, 0xEC6000
	0x0325DE78 LDRB W8, [X19 + 0x521]
	0x0325DE7C LDR X22, [X22 + 0xC0]
	0x0325DE80 MOV X29, X2
	0x0325DE84 MOV X20, X1
	0x0325DE88 MOV X21, X0
	0x0325DE8C TBNZ X8, 0x0, 0x325DEA4
	0x0325DE90 ADRP X0, 0xEC6000
	0x0325DE94 LDR X0, [X0 + 0xC0]
	0x0325DE98 BL 0x1C16CF4
	0x0325DE9C MOVZ W8, 0x1
	0x0325DEA0 STRB W8, [X19 + 0x521]
	0x0325DEA4 LDP W24, W9, [X20 + 0x10]
	0x0325DEA8 LDP W8, W23, [X20 + 0x18]
	0x0325DEAC LDP W25, W28, [X20]
	0x0325DEB0 LDP W26, W27, [X20 + 0x8]
	0x0325DEB4 MOVZ W1, 0x10
	0x0325DEB8 MOV X0, X21
	0x0325DEBC MOV X2, X29
	0x0325DEC0 MOV X3, X31
	0x0325DEC4 STP W8, W9, [X31 + 0x18]
	0x0325DEC8 STR X20, [X31 + 0x8]
	0x0325DECC BL 0x32626DC
	0x0325DED0 LDR X0, [X22]
	0x0325DED4 LDR W8, [X0 + 0xE0]
	0x0325DED8 CBNZ W8, 0x325DEE0
	0x0325DEDC BL 0x1C16DFC
	0x0325DEE0 MOV X0, X21
	0x0325DEE4 BL 0x325E3C4
	0x0325DEE8 MOV X29, X31
	0x0325DEEC MOVZ W19, 0x20
	0x0325DEF0 STR X21, [X31 + 0x10]
	0x0325DEF4 LDR X0, [X22]
	0x0325DEF8 LDR W8, [X0 + 0xE0]
	0x0325DEFC CBNZ W8, 0x325DF04
	0x0325DF00 BL 0x1C16DFC
	0x0325DF04 MOV W0, W24
	0x0325DF08 BL 0x325E46C
	0x0325DF0C LDR X8, [X22]
	0x0325DF10 LDR X8, [X8 + 0xB8]
	0x0325DF14 LDR X8, [X8]
	0x0325DF18 CBZ X8, 0x325E3BC
	0x0325DF1C LDR W9, [X8 + 0x18]
	0x0325DF20 CMP X29, X9
	0x0325DF24 B.CS 0x325E3C0
	0x0325DF28 LDP W10, W9, [X31 + 0x18]
	0x0325DF2C LDR W8, [X8, X19, LSL]
	0x0325DF30 ADD X11, X21, X19
	0x0325DF34 LDUR W11, [X11 - 0x20]
	0x0325DF38 AND W9, W24, W9, 0x0
	0x0325DF3C BIC W10, W10, W24, 0x0
	0x0325DF40 ADD W9, W9, W23
	0x0325DF44 ADD W9, W9, W10
	0x0325DF48 ADD W9, W9, W0
	0x0325DF4C ADD W8, W9, W8
	0x0325DF50 ADD W20, W8, W11
	0x0325DF54 MOV W0, W25
	0x0325DF58 ADD W23, W20, W27
	0x0325DF5C BL 0x325E4D8
	0x0325DF60 MOV W27, W0
	0x0325DF64 MOV W0, W23
	0x0325DF68 BL 0x325E46C
	0x0325DF6C LDR X8, [X22]
	0x0325DF70 LDR X8, [X8 + 0xB8]
	0x0325DF74 LDR X8, [X8]
	0x0325DF78 CBZ X8, 0x325E3BC
	0x0325DF7C LDR W9, [X8 + 0x18]
	0x0325DF80 ADD X29, X29, 0x1
	0x0325DF84 CMP X29, X9
	0x0325DF88 B.CS 0x325E3C0
	0x0325DF8C LDR W11, [X31 + 0x18]
	0x0325DF90 AND W12, W23, W24, 0x0
	0x0325DF94 EOR W9, W28, W26, 0x0
	0x0325DF98 AND W10, W28, W26, 0x0
	0x0325DF9C ADD W11, W0, W11
	0x0325DFA0 ADD W11, W11, W12
	0x0325DFA4 LDR W12, [X31 + 0x1C]
	0x0325DFA8 ADD X8, X8, X19
	0x0325DFAC AND W9, W9, W25, 0x0
	0x0325DFB0 EOR W9, W9, W10, 0x0
	0x0325DFB4 ADD X10, X21, X19
	0x0325DFB8 LDR W8, [X8 + 0x4]
	0x0325DFBC LDUR W10, [X10 - 0x1C]
	0x0325DFC0 BIC W12, W12, W23, 0x0
	0x0325DFC4 ADD W9, W20, W9
	0x0325DFC8 ADD W27, W9, W27
	0x0325DFCC ADD W9, W11, W12
	0x0325DFD0 ADD W8, W9, W8
	0x0325DFD4 ADD W21, W8, W10
	0x0325DFD8 MOV W0, W27
	0x0325DFDC ADD W22, W21, W26
	0x0325DFE0 BL 0x325E4D8
	0x0325DFE4 MOV W26, W0
	0x0325DFE8 MOV W0, W22
	0x0325DFEC BL 0x325E46C
	0x0325DFF0 ADRP X8, 0xEC6000
	0x0325DFF4 LDR X8, [X8 + 0xC0]
	0x0325DFF8 LDR X8, [X8]
	0x0325DFFC LDR X8, [X8 + 0xB8]
	0x0325E000 LDR X8, [X8]
	0x0325E004 CBZ X8, 0x325E3BC
	0x0325E008 LDR W9, [X8 + 0x18]
	0x0325E00C ADD X20, X29, 0x1
	0x0325E010 CMP X20, X9
	0x0325E014 B.CS 0x325E3C0
	0x0325E018 EOR W9, W25, W28, 0x0
	0x0325E01C AND W10, W25, W28, 0x0
	0x0325E020 AND W9, W27, W9, 0x0
	0x0325E024 EOR W9, W9, W10, 0x0
	0x0325E028 LDR X10, [X31 + 0x10]
	0x0325E02C LDR W11, [X31 + 0x1C]
	0x0325E030 ADD X8, X8, X19
	0x0325E034 LDR W8, [X8 + 0x8]
	0x0325E038 ADD X10, X10, X19
	0x0325E03C ADD W11, W0, W11
	0x0325E040 AND W12, W22, W23, 0x0
	0x0325E044 LDUR W10, [X10 - 0x18]
	0x0325E048 ADD W11, W11, W12
	0x0325E04C BIC W12, W24, W22, 0x0
	0x0325E050 ADD W9, W21, W9
	0x0325E054 ADD W26, W9, W26
	0x0325E058 ADD W9, W11, W12
	0x0325E05C ADD W8, W9, W8
	0x0325E060 ADD W29, W8, W10
	0x0325E064 MOV W0, W26
	0x0325E068 ADD W21, W29, W28
	0x0325E06C BL 0x325E4D8
	0x0325E070 MOV W28, W0
	0x0325E074 MOV W0, W21
	0x0325E078 BL 0x325E46C
	0x0325E07C ADRP X8, 0xEC5000
	0x0325E080 LDR X8, [X8 + 0xC0]
	0x0325E084 LDR X8, [X8]
	0x0325E088 LDR X8, [X8 + 0xB8]
	0x0325E08C LDR X8, [X8]
	0x0325E090 CBZ X8, 0x325E3BC
	0x0325E094 LDR W9, [X8 + 0x18]
	0x0325E098 ADD X20, X20, 0x1
	0x0325E09C CMP X20, X9
	0x0325E0A0 B.CS 0x325E3C0
	0x0325E0A4 EOR W9, W27, W25, 0x0
	0x0325E0A8 AND W10, W27, W25, 0x0
	0x0325E0AC AND W9, W26, W9, 0x0
	0x0325E0B0 EOR W9, W9, W10, 0x0
	0x0325E0B4 LDR X10, [X31 + 0x10]
	0x0325E0B8 ADD X8, X8, X19
	0x0325E0BC LDR W8, [X8 + 0xC]
	0x0325E0C0 ADD W11, W0, W24
	0x0325E0C4 ADD X10, X10, X19

ISIL:
	001 Subtract X31, X31, 368
	002 Move [X31+320], X29
	003 Move [X31+328], X30
	004 Move [X31+336], X22
	005 Move [X31+344], X21
	006 Move [X31+352], X20
	007 Move [X31+360], X19
	008 Move X21, 0x1180000
	009 Move W8, [X21+1305]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xEC5000
	017 Move X0, [X0+1224]
	018 Call 0x1C17CF4
	019 Move X0, 0xEC5000
	020 Move X0, [X0+3216]
	021 Call 0x1C17CF4
	022 Move X0, 0xEC5000
	023 Move X0, [X0+416]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+1305], W8
	027 Compare X20, 0
	028 JumpIfEqual {140}
	029 Move X0, X20
	030 Move X1, X31
	031 Call CryptoConvert.FromCapiKeyBlob, X0
	032 Move X21, X0
	033 Compare X0, 0
	034 JumpIfEqual {158}
	035 Move X8, 0xEC5000
	036 Move X8, [X8+416]
	037 Move X9, [X21]
	038 Move X8, [X8]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X8, [X21]
	041 Move X9, [X8+488]
	042 Move X2, [X8+496]
	043 Add X8, X31, 256
	044 Move W1, 1
	045 Move X0, X21
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move V0, [X31+256]
	048 Move V1, [X31+272]
	049 Move V2, [X31+288]
	050 Move V3, [X31+304]
	051 Move [X31+64], V0
	052 Move [X31+72], V1
	053 Move [X31+96], V2
	054 Move [X31+104], V3
	055 Move X8, [X19]
	056 Move X9, [X8+504]
	057 Move [X31+192], V0
	058 Move [X31+200], V1
	059 Move [X31+224], V2
	060 Move [X31+232], V3
	061 Move X2, [X8+512]
	062 Add X1, X31, 192
	063 Move X0, X19
	064 NotImplemented "Instruction BLR not yet implemented."
	065 Move X0, [X21+48]
	066 Compare X0, 0
	067 JumpIfEqual {193}
	068 Move X1, X31
	069 Call RSAManaged.get_PublicOnly, X0
	070 Move X8, [X21]
	071 Move X9, [X8+488]
	072 Move X2, [X8+496]
	073 NotImplemented "Instruction ORN not yet implemented."
	074 And W1, W8, 1
	075 Add X8, X31, 256
	076 Move X0, X21
	077 NotImplemented "Instruction BLR not yet implemented."
	078 Move V1, [X31+288]
	079 Move V0, [X31+304]
	080 Move V3, [X31+256]
	081 Move V2, [X31+272]
	082 Move [X31+160], V1
	083 Move [X31+168], V0
	084 Move [X31+128], V3
	085 Move [X31+136], V2
	086 Move X8, [X19]
	087 Add X1, X31, 256
	088 Move X0, X19
	089 Move X9, [X8+504]
	090 Move [X31+256], V3
	091 Move [X31+264], V2
	092 Move [X31+288], V1
	093 Move [X31+296], V0
	094 Move X2, [X8+512]
	095 NotImplemented "Instruction BLR not yet implemented."
	096 Move X8, 0xEC5000
	097 Move X8, [X8+1224]
	098 Move X0, [X8]
	099 Call 0x1C17F10
	100 Move W1, 1
	101 Move X2, X31
	102 Move X21, X0
	103 Call CspParameters..ctor, X0, X1
	104 Move W8, [X20+24]
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Compare X21, 0
	107 JumpIfEqual {193}
	108 Move W8, [X20+37]
	109 Move X20, 0xEC5000
	110 Move X20, [X20+3216]
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Move W8, 1
	113 NotImplemented "Instruction CINC not yet implemented."
	114 Move [X21+40], W8
	115 Call RSACryptoServiceProvider.get_UseMachineKeyStore
	116 Move TEMP, X0
	117 And TEMP, TEMP, 1
	118 Compare TEMP, 1
	119 JumpIfNotEqual {125}
	120 Move W8, [X21+44]
	121 Move X0, X21
	122 Move X2, X31
	123 Or W1, W8, 1
	124 Call CspParameters.set_Flags, X0, X1
	125 Move X0, [X20]
	126 Call 0x1C17F10
	127 Move X1, X21
	128 Move X2, X31
	129 Move X20, X0
	130 Call KeyPairPersistence..ctor, X0, X1
	131 Move [X19+32], X20
	132 Move X20, [X31+352]
	133 Move X19, [X31+360]
	134 Move X22, [X31+336]
	135 Move X21, [X31+344]
	136 Move X29, [X31+320]
	137 Move X30, [X31+328]
	138 Add X31, X31, 368
	139 Return 
	140 Move X0, 0xE9C000
	141 Move X0, [X0+1320]
	142 Call 0x1C17D08
	143 Call 0x1C17F10
	144 Move X19, X0
	145 Move X0, 0xEC7000
	146 Move X0, [X0+784]
	147 Call 0x1C17D08
	148 Move X1, X0
	149 Move X0, X19
	150 Move X2, X31
	151 Call ArgumentNullException..ctor, X0, X1
	152 Move X0, 0xEC6000
	153 Move X0, [X0+792]
	154 Call 0x1C17D08
	155 Move X1, X0
	156 Move X0, X19
	157 Call 0x1C17DEC
	158 Call 0x1C17F20
	159 Call 0x1C17F28
	160 Move X22, X0
	161 NotImplemented "Instruction CMP not yet implemented."
	162 Move X0, X22
	163 Call 0x3EB2AD0
	164 Move X22, X0
	165 Move X0, 0xE9C000
	166 Move X0, [X0+3264]
	167 Call 0x1C17D08
	168 Move X8, [X22]
	169 Move X1, [X8]
	170 Call 0x1C18270
	171 Move TEMP, X0
	172 And TEMP, TEMP, 1
	173 Compare TEMP, 1
	174 JumpIfNotEqual {194}
	175 Call 0x3EB2AE0
	176 Compare X21, 0
	177 JumpIfEqual {193}
	178 Move X8, [X21]
	179 Move X0, X21
	180 Move W1, W31
	181 Move X9, [X8+488]
	182 Move X2, [X8+496]
	183 Add X8, X31, 256
	184 NotImplemented "Instruction BLR not yet implemented."
	185 Move V1, [X31+288]
	186 Move V0, [X31+304]
	187 Move V3, [X31+256]
	188 Move V2, [X31+272]
	189 Move [X31+32], V1
	190 Move [X31+40], V0
	191 Move [X31], V3
	192 Move [X31+8], V2
	193 Call 0x1C17F20
	194 Move W0, 8
	195 Call 0x3EB2AF0
	196 Move X8, [X22]
	197 Move [X0], X8
	198 Move X1, 0xC57000
	199 Add X1, X1, 3672
	200 Move X2, X31
	201 Call 0x3EB2B00
	202 Move X22, X0
	203 Call 0x3EB2AE0
	204 Move X0, X22
	205 Call 0x1D2D690
	206 Call 0x1991590

