Type: System.Security.Cryptography.DESCryptoServiceProvider

Method: System.Void .ctor()

Disassembly:
	0x03253D24 BL 0x32274B8
	0x03253D28 MOV X1, X0
	0x03253D2C MOV X0, X20
	0x03253D30 MOV X2, X31
	0x03253D34 BL 0x32333E0
	0x03253D38 CBZ X23, 0x3253DDC
	0x03253D3C LDR X0, [X25]
	0x03253D40 ADRP X24, 0xED0000
	0x03253D44 ADRP X22, 0xED0000
	0x03253D48 ADRP X21, 0xED0000
	0x03253D4C ADRP X19, 0xECF000
	0x03253D50 LDR W8, [X0 + 0xE0]
	0x03253D54 LDR X24, [X24 + 0x18]
	0x03253D58 LDR X22, [X22 + 0x28]
	0x03253D5C LDR X21, [X21 + 0x48]
	0x03253D60 LDR X19, [X19 + 0xFF0]
	0x03253D64 CBNZ W8, 0x3253D6C
	0x03253D68 BL 0x1C16DFC
	0x03253D6C MOV X0, X23
	0x03253D70 MOV X1, X31
	0x03253D74 BL 0x33225A0
	0x03253D78 LDR X8, [X24]
	0x03253D7C LDR X2, [X22]
	0x03253D80 MOV X1, X0
	0x03253D84 MOV X3, X31
	0x03253D88 MOV X0, X8
	0x03253D8C BL 0x32274B8
	0x03253D90 MOV X1, X0
	0x03253D94 MOV X0, X20
	0x03253D98 MOV X2, X31
	0x03253D9C BL 0x32333E0
	0x03253DA0 LDR X0, [X31 + 0x10]
	0x03253DA4 MOV X1, X31
	0x03253DA8 BL 0x3262474
	0x03253DAC MOV X1, X31
	0x03253DB0 BL 0x33225A0
	0x03253DB4 LDR X8, [X21]
	0x03253DB8 LDR X2, [X19]
	0x03253DBC MOV X1, X0
	0x03253DC0 MOV X3, X31
	0x03253DC4 MOV X0, X8
	0x03253DC8 BL 0x32274B8
	0x03253DCC MOV X1, X0
	0x03253DD0 MOV X0, X20
	0x03253DD4 MOV X2, X31
	0x03253DD8 BL 0x32333E0
	0x03253DDC ADRP X19, 0xED0000
	0x03253DE0 LDR X19, [X19 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x118A000
	006 Move X21, 0xECF000
	007 Move W8, [X20+1229]
	008 Move X21, [X21+800]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xECF000
	015 Move X0, [X0+800]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1229], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call DES..ctor, X0
	026 Move W0, 0x6601
	027 Move W1, W31
	028 Move X2, X31
	029 Call Utils.HasAlgorithm, X0, X1
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {41}
	034 Move W8, 8
	035 Move [X19+20], W8
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Return 
	041 Move X0, 0xED0000
	042 Move X0, [X0+3944]
	043 Call 0x1C17D08
	044 Move X1, X31
	045 Call Environment.GetResourceString, X0
	046 Move X19, X0
	047 Move X0, 0xECE000
	048 Move X0, [X0+3296]
	049 Call 0x1C17D08
	050 Call 0x1C17F10
	051 Move X1, X19
	052 Move X20, X0
	053 Call CryptographicException..ctor, X0, X1
	054 Move X0, 0xED0000
	055 Move X0, [X0+3952]
	056 Call 0x1C17D08
	057 Move X1, X0
	058 Move X0, X20
	059 Call 0x1C17DEC

Method: System.Security.Cryptography.ICryptoTransform CreateEncryptor(System.Byte[] rgbKey, System.Byte[] rgbIV)

Disassembly:
	0x03253FB0 LDR X0, [X0 + 0x528]
	0x03253FB4 BL 0x1C16D08
	0x03253FB8 BL 0x1C16F10
	0x03253FBC MOV X19, X0
	0x03253FC0 ADRP X0, 0xECA000
	0x03253FC4 LDR X0, [X0 + 0x70]
	0x03253FC8 BL 0x1C16D08
	0x03253FCC MOV X1, X0
	0x03253FD0 MOV X0, X19
	0x03253FD4 MOV X2, X31
	0x03253FD8 BL 0x330E100
	0x03253FDC ADRP X0, 0xED0000
	0x03253FE0 LDR X0, [X0 + 0x50]
	0x03253FE4 BL 0x1C16D08
	0x03253FE8 MOV X1, X0
	0x03253FEC MOV X0, X19
	0x03253FF0 BL 0x1C16DEC
	0x03253FF4 STP X30, X21, [X31 - 0x20]!
	0x03253FF8 STP X20, X19, [X31 + 0x10]
	0x03253FFC ADRP X21, 0x1189000
	0x03254000 LDRB W8, [X21 + 0x4D8]
	0x03254004 MOV X19, X1
	0x03254008 MOV X20, X0
	0x0325400C TBNZ X8, 0x0, 0x3254024
	0x03254010 ADRP X0, 0xECD000
	0x03254014 LDR X0, [X0 + 0x158]
	0x03254018 BL 0x1C16CF4
	0x0325401C MOVZ W8, 0x1
	0x03254020 STRB W8, [X21 + 0x4D8]
	0x03254024 CBZ X19, 0x3254094
	0x03254028 ADRP X8, 0xECD000
	0x0325402C LDR X8, [X8 + 0x158]
	0x03254030 LDR X9, [X19]
	0x03254034 LDR X1, [X8]
	0x03254038 LDRB W10, [X9 + 0x130]
	0x0325403C LDRB W8, [X1 + 0x130]
	0x03254040 CMP W10, W8
	0x03254044 B.CC 0x325408C
	0x03254048 LDR X10, [X9 + 0xC8]
	0x0325404C SUB X9, X8, 0x1
	0x03254050 LDR X10, [X10, X9, LSL #3]
	0x03254054 CMP X10, X1
	0x03254058 B.NE 0x325408C
	0x0325405C STR X19, [X20 + 0x10]
	0x03254060 LDR X10, [X19]
	0x03254064 LDRB W11, [X10 + 0x130]
	0x03254068 CMP W11, W8
	0x0325406C B.CC 0x325408C
	0x03254070 LDR X8, [X10 + 0xC8]
	0x03254074 LDR X8, [X8, X9, LSL #3]
	0x03254078 CMP X8, X1
	0x0325407C B.NE 0x325408C
	0x03254080 LDP X20, X19, [X31 + 0x10]
	0x03254084 LDP X30, X21, [X31], #0x20
	0x03254088 RET
	0x0325408C MOV X0, X19
	0x03254090 BL 0x1C171E0
	0x03254094 ADRP X0, 0xEA4000
	0x03254098 LDR X0, [X0 + 0x528]
	0x0325409C BL 0x1C16D08
	0x032540A0 BL 0x1C16F10
	0x032540A4 MOV X19, X0
	0x032540A8 ADRP X0, 0xEC9000
	0x032540AC LDR X0, [X0 + 0x70]
	0x032540B0 BL 0x1C16D08
	0x032540B4 MOV X1, X0
	0x032540B8 MOV X0, X19
	0x032540BC MOV X2, X31
	0x032540C0 BL 0x330E100
	0x032540C4 ADRP X0, 0xECF000
	0x032540C8 LDR X0, [X0 + 0x58]
	0x032540CC BL 0x1C16D08
	0x032540D0 MOV X1, X0
	0x032540D4 MOV X0, X19
	0x032540D8 BL 0x1C16DEC
	0x032540DC STR X30, [X31 - 0x30]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x118A000
	008 Move X22, 0xECF000
	009 Move W8, [X23+1230]
	010 Move X22, [X22+800]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0xED0000
	019 Move X0, [X0+3960]
	020 Call 0x1C17CF4
	021 Move X0, 0xECF000
	022 Move X0, [X0+800]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+1230], W8
	026 Move X0, [X22]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Call DES.IsWeakKey, X0
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {67}
	037 Move X0, [X22]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X20
	043 Call DES.IsSemiWeakKey, X0
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfEqual {69}
	048 Move X8, 0xECF000
	049 Move X8, [X8+3960]
	050 Move X0, [X8]
	051 Call 0x1C17F10
	052 Move W2, 1
	053 Move X1, X21
	054 Move X3, X20
	055 Move X4, X19
	056 Move X5, X31
	057 Move X22, X0
	058 Call DESTransform..ctor, X0, X1, X2, X3, X4
	059 Move X0, X22
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X22, [X31+16]
	063 Move X21, [X31+24]
	064 Move X30, [X31+48]
	065 Move X23, [X31+56]
	066 Return X0
	067 Move X0, 0xECF000
	068 Move X0, [X0+3920]
	069 Move X0, 0xECF000
	070 Move X0, [X0+3928]
	071 Call 0x1C17D08
	072 Move X1, X31
	073 Call Environment.GetResourceString, X0
	074 Move X19, X0
	075 Move X0, 0xECD000
	076 Move X0, [X0+3296]
	077 Call 0x1C17D08
	078 Call 0x1C17F10
	079 Move X20, X0
	080 Move X0, 0xECD000
	081 Move X0, [X0+3832]
	082 Call 0x1C17D08
	083 Move X2, X0
	084 Move X0, X20
	085 Move X1, X19
	086 Call CryptographicException..ctor, X0, X1, X2
	087 Move X0, 0xECF000
	088 Move X0, [X0+3968]
	089 Call 0x1C17D08
	090 Move X1, X0
	091 Move X0, X20
	092 Call 0x1C17DEC

Method: System.Security.Cryptography.ICryptoTransform CreateDecryptor(System.Byte[] rgbKey, System.Byte[] rgbIV)

Disassembly:
	0x032540E0 STP X22, X21, [X31 + 0x10]
	0x032540E4 STP X20, X19, [X31 + 0x20]
	0x032540E8 ADRP X21, 0x1188000
	0x032540EC ADRP X22, 0xECC000
	0x032540F0 LDRB W8, [X21 + 0x4D9]
	0x032540F4 LDR X22, [X22 + 0xBD8]
	0x032540F8 MOV X20, X1
	0x032540FC MOV X19, X0
	0x03254100 TBNZ X8, 0x0, 0x3254118
	0x03254104 ADRP X0, 0xECC000
	0x03254108 LDR X0, [X0 + 0xBD8]
	0x0325410C BL 0x1C16CF4
	0x03254110 MOVZ W8, 0x1
	0x03254114 STRB W8, [X21 + 0x4D9]
	0x03254118 LDR X0, [X22]
	0x0325411C LDR W8, [X0 + 0xE0]
	0x03254120 CBNZ W8, 0x3254128
	0x03254124 BL 0x1C16DFC
	0x03254128 MOV X0, X20
	0x0325412C MOV X1, X31
	0x03254130 BL 0x3264820
	0x03254134 LDR X1, [X19 + 0x18]
	0x03254138 MOV X2, X31
	0x0325413C BL 0x3226EF8
	0x03254140 TBNZ X0, 0x0, 0x3254154
	0x03254144 LDP X20, X19, [X31 + 0x20]
	0x03254148 LDP X22, X21, [X31 + 0x10]
	0x0325414C LDR X30, [X31], #0x30
	0x03254150 RET
	0x03254154 ADRP X0, 0xECF000
	0x03254158 LDR X0, [X0 + 0x60]
	0x0325415C BL 0x1C16D08
	0x03254160 MOV X1, X31
	0x03254164 BL 0x33BDD84
	0x03254168 MOV X19, X0
	0x0325416C ADRP X0, 0xECE000
	0x03254170 LDR X0, [X0 + 0xEB8]
	0x03254174 BL 0x1C16D08
	0x03254178 BL 0x1C16F10
	0x0325417C MOV X1, X19
	0x03254180 MOV X20, X0
	0x03254184 BL 0x32513AC
	0x03254188 ADRP X0, 0xECF000
	0x0325418C LDR X0, [X0 + 0x68]
	0x03254190 BL 0x1C16D08
	0x03254194 MOV X1, X0
	0x03254198 MOV X0, X20
	0x0325419C BL 0x1C16DEC
	0x032541A0 STR X30, [X31 - 0x20]!
	0x032541A4 STP X20, X19, [X31 + 0x10]
	0x032541A8 CBZ X1, 0x32541CC
	0x032541AC CBZ X2, 0x32541EC
	0x032541B0 LDR X0, [X0 + 0x10]
	0x032541B4 CBZ X0, 0x3254234
	0x032541B8 LDR X8, [X0]
	0x032541BC LDP X20, X19, [X31 + 0x10]
	0x032541C0 LDP X4, X3, [X8 + 0x1D8]
	0x032541C4 LDR X30, [X31], #0x20
	0x032541C8 BR X4
	0x032541CC ADRP X0, 0xEA4000
	0x032541D0 LDR X0, [X0 + 0x528]
	0x032541D4 BL 0x1C16D08
	0x032541D8 BL 0x1C16F10
	0x032541DC MOV X19, X0
	0x032541E0 ADRP X0, 0xECD000
	0x032541E4 LDR X0, [X0 + 0xF08]
	0x032541E8 B 0x3254208
	0x032541EC ADRP X0, 0xEA4000
	0x032541F0 LDR X0, [X0 + 0x528]
	0x032541F4 BL 0x1C16D08
	0x032541F8 BL 0x1C16F10
	0x032541FC MOV X19, X0
	0x03254200 ADRP X0, 0xECD000
	0x03254204 LDR X0, [X0 + 0xF10]
	0x03254208 BL 0x1C16D08
	0x0325420C MOV X1, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x1189000
	008 Move X22, 0xECE000
	009 Move W8, [X23+1231]
	010 Move X22, [X22+800]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0xECF000
	019 Move X0, [X0+3960]
	020 Call 0x1C17CF4
	021 Move X0, 0xECE000
	022 Move X0, [X0+800]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+1231], W8
	026 Move X0, [X22]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Call DES.IsWeakKey, X0
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {67}
	037 Move X0, [X22]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X20
	043 Call DES.IsSemiWeakKey, X0
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfEqual {69}
	048 Move X8, 0xECF000
	049 Move X8, [X8+3960]
	050 Move X0, [X8]
	051 Call 0x1C17F10
	052 Move X1, X21
	053 Move W2, W31
	054 Move X3, X20
	055 Move X4, X19
	056 Move X5, X31
	057 Move X22, X0
	058 Call DESTransform..ctor, X0, X1, X2, X3, X4
	059 Move X0, X22
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X22, [X31+16]
	063 Move X21, [X31+24]
	064 Move X30, [X31+48]
	065 Move X23, [X31+56]
	066 Return X0
	067 Move X0, 0xECF000
	068 Move X0, [X0+3920]
	069 Move X0, 0xECF000
	070 Move X0, [X0+3928]
	071 Call 0x1C17D08
	072 Move X1, X31
	073 Call Environment.GetResourceString, X0
	074 Move X19, X0
	075 Move X0, 0xECD000
	076 Move X0, [X0+3296]
	077 Call 0x1C17D08
	078 Call 0x1C17F10
	079 Move X20, X0
	080 Move X0, 0xECD000
	081 Move X0, [X0+3832]
	082 Call 0x1C17D08
	083 Move X2, X0
	084 Move X0, X20
	085 Move X1, X19
	086 Call CryptographicException..ctor, X0, X1, X2
	087 Move X0, 0xECF000
	088 Move X0, [X0+3976]
	089 Call 0x1C17D08
	090 Move X1, X0
	091 Move X0, X20
	092 Call 0x1C17DEC

Method: System.Void GenerateKey()

Disassembly:
	0x03254210 MOV X0, X19
	0x03254214 MOV X2, X31
	0x03254218 BL 0x330E100
	0x0325421C ADRP X0, 0xECF000
	0x03254220 LDR X0, [X0 + 0x70]
	0x03254224 BL 0x1C16D08
	0x03254228 MOV X1, X0
	0x0325422C MOV X0, X19
	0x03254230 BL 0x1C16DEC
	0x03254234 ADRP X0, 0xECF000
	0x03254238 LDR X0, [X0 + 0x78]
	0x0325423C BL 0x1C16D08
	0x03254240 MOV X1, X31
	0x03254244 BL 0x33BDD84
	0x03254248 MOV X19, X0
	0x0325424C ADRP X0, 0xECE000
	0x03254250 LDR X0, [X0 + 0xEB8]
	0x03254254 BL 0x1C16D08
	0x03254258 BL 0x1C16F10
	0x0325425C MOV X1, X19
	0x03254260 MOV X20, X0
	0x03254264 BL 0x32513AC
	0x03254268 ADRP X0, 0xECF000
	0x0325426C LDR X0, [X0 + 0x70]
	0x03254270 BL 0x1C16D08
	0x03254274 MOV X1, X0
	0x03254278 MOV X0, X20
	0x0325427C BL 0x1C16DEC
	0x03254280 STP X30, X21, [X31 - 0x20]!
	0x03254284 STP X20, X19, [X31 + 0x10]
	0x03254288 ADRP X21, 0x1188000
	0x0325428C ADRP X20, 0xECC000
	0x03254290 LDRB W8, [X21 + 0x4DA]
	0x03254294 LDR X20, [X20 + 0xBD8]
	0x03254298 MOV X19, X0
	0x0325429C TBNZ X8, 0x0, 0x32542C0
	0x032542A0 ADRP X0, 0xECC000
	0x032542A4 LDR X0, [X0 + 0xBD8]
	0x032542A8 BL 0x1C16CF4
	0x032542AC ADRP X0, 0xECC000
	0x032542B0 LDR X0, [X0 + 0xD40]
	0x032542B4 BL 0x1C16CF4
	0x032542B8 MOVZ W8, 0x1
	0x032542BC STRB W8, [X21 + 0x4DA]
	0x032542C0 ADRP X21, 0xECC000
	0x032542C4 LDR X21, [X21 + 0xD40]
	0x032542C8 MOV X0, X19
	0x032542CC MOV X1, X31
	0x032542D0 BL 0x33BDD8C
	0x032542D4 LDR X0, [X20]
	0x032542D8 LDR W8, [X0 + 0xE0]
	0x032542DC CBNZ W8, 0x32542E4
	0x032542E0 BL 0x1C16DFC
	0x032542E4 LDR X0, [X21]
	0x032542E8 MOV X1, X31
	0x032542EC BL 0x3264820

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1189000
	006 Move X21, 0xEA0000
	007 Move W8, [X20+1232]
	008 Move X21, [X21+1560]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xEA0000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move X0, 0xECE000
	018 Move X0, [X0+800]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1232], W8
	022 Move X0, [X21]
	023 Move W1, 8
	024 Call 0x1C17D6C
	025 Move [X19+32], X0
	026 Move X0, X31
	027 Call Utils.get_StaticRandomNumberGenerator
	028 Compare X0, 0
	029 JumpIfEqual {74}
	030 Move X8, [X0]
	031 Move X21, 0xECE000
	032 Move X1, [X19+32]
	033 Move X9, [X8+408]
	034 Move X2, [X8+416]
	035 Move X21, [X21+800]
	036 NotImplemented "Instruction BLR not yet implemented."
	037 Move X0, [X21]
	038 Move X20, [X19+32]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X20
	044 Call DES.IsWeakKey, X0
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {61}
	049 Move X0, [X21]
	050 Move X20, [X19+32]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move X0, X20
	056 Call DES.IsSemiWeakKey, X0
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {69}
	061 Move X0, X31
	062 Call Utils.get_StaticRandomNumberGenerator
	063 Compare X0, 0
	064 JumpIfEqual {74}
	065 Move X8, [X0]
	066 Move X1, [X19+32]
	067 Move X9, [X8+408]
	068 Move X2, [X8+416]
	069 Move X20, [X31+16]
	070 Move X19, [X31+24]
	071 Move X30, [X31+32]
	072 Move X21, [X31+40]
	073 Return 
	074 Call 0x1C17F20

Method: System.Void GenerateIV()

Disassembly:
	0x032542F0 STR X0, [X19 + 0x10]
	0x032542F4 LDP X20, X19, [X31 + 0x10]
	0x032542F8 LDP X30, X21, [X31], #0x20
	0x032542FC RET
	0x03254300 LDR W0, [X0 + 0x30]
	0x03254304 RET
	0x03254308 STR W1, [X0 + 0x30]
	0x0325430C RET
	0x03254310 STR X30, [X31 - 0x20]!
	0x03254314 STP X20, X19, [X31 + 0x10]
	0x03254318 ADRP X20, 0x1188000
	0x0325431C LDRB W8, [X20 + 0x4DB]
	0x03254320 MOV X19, X0
	0x03254324 TBNZ X8, 0x0, 0x325433C
	0x03254328 ADRP X0, 0xE9F000
	0x0325432C LDR X0, [X0 + 0x618]
	0x03254330 BL 0x1C16CF4
	0x03254334 MOVZ W8, 0x1
	0x03254338 STRB W8, [X20 + 0x4DB]
	0x0325433C LDR X8, [X19 + 0x50]
	0x03254340 CBNZ X8, 0x325435C
	0x03254344 ADRP X8, 0xE9F000
	0x03254348 LDR W1, [X19 + 0x30]
	0x0325434C LDR X8, [X8 + 0x618]
	0x03254350 LDR X0, [X8]
	0x03254354 BL 0x1C16D6C
	0x03254358 STR X0, [X19 + 0x50]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1189000
	006 Move X21, 0xEA0000
	007 Move W8, [X20+1233]
	008 Move X21, [X21+1560]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEA0000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1233], W8
	019 Move X0, [X21]
	020 Move W1, 8
	021 Call 0x1C17D6C
	022 Move [X19+24], X0
	023 Move X0, X31
	024 Call Utils.get_StaticRandomNumberGenerator
	025 Compare X0, 0
	026 JumpIfEqual {36}
	027 Move X8, [X0]
	028 Move X1, [X19+24]
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X3, [X8+408]
	032 Move X2, [X8+416]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 CallNoReturn X3
	036 Call 0x1C17F20

