Type: System.Security.Cryptography.SymmetricAlgorithm

Method: System.Void .ctor()

Disassembly:
	0x032617B0 LDR W11, [X0 + 0x18]
	0x032617B4 CMP X8, X11
	0x032617B8 B.CS 0x3261804
	0x032617BC LDRB W11, [X9, X8, LSL]
	0x032617C0 AND W13, W11, 0xE
	0x032617C4 AND W12, W11, 0xFE
	0x032617C8 EOR W11, W13, W11, 0x4
	0x032617CC AND W13, W11, 0x3
	0x032617D0 EOR W11, W13, W11, 0x2

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call Object..ctor, X0
	006 Move X8, -41365504
	007 Move V0, [X8+1464]
	008 Move [X19+60], D0
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 

Method: System.Void Dispose()

Disassembly:
	0x032617D4 AND W13, W11, 0x1
	0x032617D8 EOR W11, W13, W11, 0x1
	0x032617DC ORR W11, W11, W12, 0x0
	0x032617E0 EOR W11, W11, 0x1
	0x032617E4 STRB W11, [X10, X8, LSL]
	0x032617E8 LDR W11, [X19 + 0x18]
	0x032617EC ADD X8, X8, 0x1
	0x032617F0 CMP X8, W11, SXTW
	0x032617F4 B.LT 0x32617A4
	0x032617F8 LDP X20, X19, [X31 + 0x10]
	0x032617FC LDR X30, [X31], #0x20
	0x03261800 RET
	0x03261804 BL 0x1C16F28
	0x03261808 BL 0x1C16F20
	0x0326180C STR X30, [X31 - 0x20]!
	0x03261810 STP X20, X19, [X31 + 0x10]
	0x03261814 TBNZ X1, 0x1F, 0x3261904
	0x03261818 TBNZ X2, 0x1F, 0x326193C
	0x0326181C CBZ X0, 0x32619A0
	0x03261820 LDR W13, [X0 + 0x18]
	0x03261824 ADD W8, W3, W1
	0x03261828 CMP W8, W13
	0x0326182C B.GT 0x32618C8
	0x03261830 ADD W8, W3, W2
	0x03261834 CMP W8, W13
	0x03261838 B.GT 0x32618C8
	0x0326183C CMP W3, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x117C000
	006 Move X20, 0xE9A000
	007 Move W8, [X21+1348]
	008 Move X20, [X20+3088]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE9A000
	015 Move X0, [X0+3088]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1348], W8
	019 Move X8, [X19]
	020 Move W1, 1
	021 Move X0, X19
	022 Move X9, [X8+392]
	023 Move X2, [X8+400]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X1, X31
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call GC.SuppressFinalize, X0
	037 Return 

Method: System.Void Clear()

Disassembly:
	0x03261840 B.LT 0x32618AC
	0x03261844 SUBS W12, W13, W1
	0x03261848 CSEL W12, W31, W12, CC
	0x0326184C SUBS W13, W13, W2
	0x03261850 MOV X8, X31
	0x03261854 MOV W9, W3
	0x03261858 MOV W10, W1
	0x0326185C MOV W11, W2
	0x03261860 CSEL W13, W31, W13, CC
	0x03261864 MOVZ W14, 0x1
	0x03261868 CMP X12, X8
	0x0326186C B.EQ 0x32618C4
	0x03261870 CMP X13, X8
	0x03261874 B.EQ 0x32618C4
	0x03261878 ADD W15, W11, W8
	0x0326187C ADD W16, W10, W8
	0x03261880 ADD X17, X0, 0x20
	0x03261884 LDRB W16, [X17, W16, SXTW]
	0x03261888 LDRB W15, [X17, W15, SXTW]
	0x0326188C CMP W16, W15
	0x03261890 B.NE 0x32618B0
	0x03261894 ADD X8, X8, 0x1
	0x03261898 CMP X8, X9
	0x0326189C CSET W14, CC
	0x032618A0 CMP X9, X8
	0x032618A4 B.NE 0x3261868
	0x032618A8 B 0x32618B0
	0x032618AC MOV W14, W31
	0x032618B0 LDP X20, X19, [X31 + 0x10]
	0x032618B4 ORN W8, W31, W14, 0x0
	0x032618B8 AND W0, W8, 0x1
	0x032618BC LDR X30, [X31], #0x20
	0x032618C0 RET
	0x032618C4 BL 0x1C16F28
	0x032618C8 ADRP X0, 0xEC2000
	0x032618CC LDR X0, [X0 + 0x1E0]
	0x032618D0 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x117C000
	006 Move X20, 0xE93000
	007 Move W8, [X21+1349]
	008 Move X20, [X20+3584]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE93000
	015 Move X0, [X0+3584]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1349], W8
	019 Move X8, [X19]
	020 Move X1, [X20]
	021 NotImplemented "Instruction LDRH not yet implemented."
	022 Compare X9, 0
	023 JumpIfEqual {30}
	024 Move X10, [X8+176]
	025 Add X10, X10, 8
	026 NotImplemented "Instruction LDUR not yet implemented."
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Subtract X9, X9, 1
	029 Add X10, X10, 16
	030 Move X0, X19
	031 Move W2, W31
	032 Call 0x1C5D788
	033 NotImplemented "Instruction LDRSW not yet implemented."
	034 Add X8, X8, X9
	035 Add X0, X8, 312
	036 Move X2, [X0]
	037 Move X1, [X0+8]
	038 Move X0, X19
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 CallNoReturn X2

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x032618D4 MOV X1, X31
	0x032618D8 BL 0x33BDD84
	0x032618DC MOV X19, X0
	0x032618E0 ADRP X0, 0xE9A000
	0x032618E4 LDR X0, [X0 + 0x578]
	0x032618E8 BL 0x1C16D08
	0x032618EC BL 0x1C16F10
	0x032618F0 MOV X1, X19
	0x032618F4 MOV X2, X31
	0x032618F8 MOV X20, X0
	0x032618FC BL 0x3314A68
	0x03261900 B 0x3261988
	0x03261904 ADRP X0, 0xEBA000
	0x03261908 LDR X0, [X0 + 0x670]
	0x0326190C BL 0x1C16D08
	0x03261910 MOV X1, X31
	0x03261914 BL 0x33BDD84
	0x03261918 MOV X19, X0
	0x0326191C ADRP X0, 0xE9A000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move TEMP, X1
	004 And TEMP, TEMP, 1
	005 Compare TEMP, 1
	006 JumpIfNotEqual {24}
	007 Move X19, X0
	008 Move X0, [X0+32]
	009 Compare X0, 0
	010 JumpIfEqual {16}
	011 Move W2, [X0+24]
	012 Move W1, W31
	013 Move X3, X31
	014 Call Array.Clear, X0, X1, X2
	015 Move [X19+32], X31
	016 Move X0, [X19+24]
	017 Compare X0, 0
	018 JumpIfEqual {24}
	019 Move W2, [X0+24]
	020 Move W1, W31
	021 Move X3, X31
	022 Call Array.Clear, X0, X1, X2
	023 Move [X19+24], X31
	024 Move X30, [X31+16]
	025 Move X19, [X31+24]
	026 Return 

Method: System.Int32 get_BlockSize()

Disassembly:
	0x03261920 LDR X0, [X0 + 0x760]
	0x03261924 BL 0x1C16D08

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_BlockSize(System.Int32 value)

Disassembly:
	0x03261928 BL 0x1C16F10
	0x0326192C MOV X20, X0
	0x03261930 ADRP X0, 0xEC2000
	0x03261934 LDR X0, [X0 + 0x3F0]
	0x03261938 B 0x3261970
	0x0326193C ADRP X0, 0xEBA000
	0x03261940 LDR X0, [X0 + 0x670]
	0x03261944 BL 0x1C16D08
	0x03261948 MOV X1, X31
	0x0326194C BL 0x33BDD84
	0x03261950 MOV X19, X0
	0x03261954 ADRP X0, 0xE9A000
	0x03261958 LDR X0, [X0 + 0x760]
	0x0326195C BL 0x1C16D08
	0x03261960 BL 0x1C16F10
	0x03261964 MOV X20, X0
	0x03261968 ADRP X0, 0xEC2000
	0x0326196C LDR X0, [X0 + 0x3F8]
	0x03261970 BL 0x1C16D08
	0x03261974 MOV X1, X0
	0x03261978 MOV X0, X20
	0x0326197C MOV X2, X19
	0x03261980 MOV X3, X31
	0x03261984 BL 0x3311888
	0x03261988 ADRP X0, 0xEC2000
	0x0326198C LDR X0, [X0 + 0x400]
	0x03261990 BL 0x1C16D08
	0x03261994 MOV X1, X0
	0x03261998 MOV X0, X20
	0x0326199C BL 0x1C16DEC
	0x032619A0 BL 0x1C16F20
	0x032619A4 STP X30, X23, [X31 - 0x30]!
	0x032619A8 STP X22, X21, [X31 + 0x10]
	0x032619AC STP X20, X19, [X31 + 0x20]
	0x032619B0 ADRP X19, 0x117B000
	0x032619B4 ADRP X22, 0xEC0000
	0x032619B8 ADRP X21, 0xEC0000
	0x032619BC LDRB W8, [X19 + 0x551]
	0x032619C0 LDR X22, [X22 + 0x520]
	0x032619C4 LDR X21, [X21 + 0x528]
	0x032619C8 TBNZ X8, 0x0, 0x32619F8
	0x032619CC ADRP X0, 0xEC0000
	0x032619D0 LDR X0, [X0 + 0x520]
	0x032619D4 BL 0x1C16CF4
	0x032619D8 ADRP X0, 0xEC0000
	0x032619DC LDR X0, [X0 + 0x528]
	0x032619E0 BL 0x1C16CF4
	0x032619E4 ADRP X0, 0xEC2000
	0x032619E8 LDR X0, [X0 + 0xF0]
	0x032619EC BL 0x1C16CF4
	0x032619F0 MOVZ W8, 0x1
	0x032619F4 STRB W8, [X19 + 0x551]
	0x032619F8 LDR X0, [X22]
	0x032619FC MOVZ W1, 0x1
	0x03261A00 BL 0x1C16D6C
	0x03261A04 LDR X8, [X21]
	0x03261A08 MOV X19, X0
	0x03261A0C MOV X0, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0+40]
	005 Compare X8, 0
	006 JumpIfEqual {54}
	007 Move W9, [X8+24]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move W10, W31
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Add X11, X8, W10
	012 Move X13, [X11+32]
	013 Compare X13, 0
	014 JumpIfEqual {54}
	015 Move W12, [X13+24]
	016 Move W11, [X13+16]
	017 Compare W12, 0
	018 JumpIfEqual {23}
	019 Move W13, [X13+20]
	020 NotImplemented "Instruction CMP not yet implemented."
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Add W11, W11, W12
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Add W10, W10, 1
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X0, 0xEC3000
	027 Move X0, [X0+912]
	028 Call 0x1C17D08
	029 Move X1, X31
	030 Call Environment.GetResourceString, X0
	031 Move X19, X0
	032 Move X0, 0xEC0000
	033 Move X0, [X0+3296]
	034 Call 0x1C17D08
	035 Call 0x1C17F10
	036 Move X1, X19
	037 Move X2, X31
	038 Move X20, X0
	039 Call CryptographicException..ctor, X0, X1
	040 Move X0, 0xEC3000
	041 Move X0, [X0+920]
	042 Call 0x1C17D08
	043 Move X1, X0
	044 Move X0, X20
	045 Call 0x1C17DEC
	046 Move W8, [X0+16]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move [X0+16], W1
	049 Move [X0+24], X31
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move X30, [X31+32]
	053 Return 
	054 Call 0x1C17F20
	055 Call 0x1C17F28

Method: System.Int32 get_FeedbackSize()

Disassembly:
	0x03261A10 BL 0x1C16F10
	0x03261A14 MOVZ W1, 0x40

ISIL:
	001 Move W0, [X0+20]
	002 Return X0

Method: System.Byte[] get_IV()

Disassembly:
	0x03261A18 MOVZ W2, 0x40
	0x03261A1C MOV W3, W31
	0x03261A20 MOV X4, X31
	0x03261A24 MOV X20, X0
	0x03261A28 BL 0x3251FDC
	0x03261A2C CBZ X19, 0x3261AB0
	0x03261A30 LDR W8, [X19 + 0x18]
	0x03261A34 CBZ W8, 0x3261AB4
	0x03261A38 ADRP X23, 0xEC2000
	0x03261A3C LDR X23, [X23 + 0xF0]
	0x03261A40 STR X20, [X19 + 0x20]
	0x03261A44 MOVZ W1, 0x1
	0x03261A48 LDR X8, [X23]
	0x03261A4C LDR X8, [X8 + 0xB8]
	0x03261A50 STR X19, [X8]
	0x03261A54 LDR X0, [X22]
	0x03261A58 BL 0x1C16D6C
	0x03261A5C LDR X8, [X21]
	0x03261A60 MOV X19, X0
	0x03261A64 MOV X0, X8
	0x03261A68 BL 0x1C16F10
	0x03261A6C MOVZ W1, 0x80
	0x03261A70 MOVZ W2, 0xC0
	0x03261A74 MOVZ W3, 0x40
	0x03261A78 MOV X4, X31
	0x03261A7C MOV X20, X0
	0x03261A80 BL 0x3251FDC
	0x03261A84 CBZ X19, 0x3261AB0
	0x03261A88 LDR W8, [X19 + 0x18]
	0x03261A8C CBZ W8, 0x3261AB4
	0x03261A90 STR X20, [X19 + 0x20]
	0x03261A94 LDR X8, [X23]
	0x03261A98 LDP X22, X21, [X31 + 0x10]
	0x03261A9C LDR X8, [X8 + 0xB8]
	0x03261AA0 STR X19, [X8 + 0x8]
	0x03261AA4 LDP X20, X19, [X31 + 0x20]
	0x03261AA8 LDP X30, X23, [X31], #0x30

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x117C000
	005 Move W8, [X20+1350]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE93000
	012 Move X0, [X0+1560]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1350], W8
	016 Move X0, [X19+24]
	017 Compare X0, 0
	018 JumpIfNotEqual {25}
	019 Move X8, [X19]
	020 Move X0, X19
	021 Move X9, [X8+712]
	022 Move X1, [X8+720]
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Move X0, [X19+24]
	025 Compare X0, 0
	026 JumpIfEqual {43}
	027 Move X1, X31
	028 Call Array.Clone, X0
	029 Compare X0, 0
	030 JumpIfEqual {39}
	031 Move X8, 0xE93000
	032 Move X8, [X8+1560]
	033 Move X19, X0
	034 Move X20, [X8]
	035 Move X1, X20
	036 Call 0x1C17E00
	037 Compare X0, 0
	038 JumpIfEqual {44}
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Return X0
	043 Call 0x1C17F20
	044 Move X0, X19
	045 Move X1, X20
	046 Call 0x1C181E0

Method: System.Void set_IV(System.Byte[] value)

Disassembly:
	0x03261AAC RET
	0x03261AB0 BL 0x1C16F20
	0x03261AB4 BL 0x1C16F28
	0x03261AB8 MOVZ W0, 0x1
	0x03261ABC RET
	0x03261AC0 STP X30, X23, [X31 - 0x30]!
	0x03261AC4 STP X22, X21, [X31 + 0x10]
	0x03261AC8 STP X20, X19, [X31 + 0x20]
	0x03261ACC ADRP X22, 0x117B000
	0x03261AD0 ADRP X23, 0xEC2000
	0x03261AD4 LDRB W8, [X22 + 0x553]
	0x03261AD8 LDR X23, [X23 + 0xF0]
	0x03261ADC MOV X19, X2
	0x03261AE0 MOV X20, X1
	0x03261AE4 MOV X21, X0
	0x03261AE8 TBNZ X8, 0x0, 0x3261B0C
	0x03261AEC ADRP X0, 0xEC2000
	0x03261AF0 LDR X0, [X0 + 0x408]
	0x03261AF4 BL 0x1C16CF4
	0x03261AF8 ADRP X0, 0xEC2000
	0x03261AFC LDR X0, [X0 + 0xF0]
	0x03261B00 BL 0x1C16CF4
	0x03261B04 MOVZ W8, 0x1
	0x03261B08 STRB W8, [X22 + 0x553]
	0x03261B0C LDR X0, [X23]
	0x03261B10 LDR W8, [X0 + 0xE0]
	0x03261B14 CBNZ W8, 0x3261B1C
	0x03261B18 BL 0x1C16DFC
	0x03261B1C MOV X0, X20
	0x03261B20 BL 0x3261368
	0x03261B24 TBNZ X0, 0x0, 0x3261B64
	0x03261B28 ADRP X8, 0xEC2000
	0x03261B2C LDR X8, [X8 + 0x408]
	0x03261B30 LDR X0, [X8]
	0x03261B34 BL 0x1C16F10
	0x03261B38 MOVZ W2, 0x1
	0x03261B3C MOV X1, X21
	0x03261B40 MOV X3, X20
	0x03261B44 MOV X4, X19
	0x03261B48 MOV X22, X0
	0x03261B4C BL 0x3261BC8
	0x03261B50 MOV X0, X22
	0x03261B54 LDP X20, X19, [X31 + 0x20]
	0x03261B58 LDP X22, X21, [X31 + 0x10]
	0x03261B5C LDP X30, X23, [X31], #0x30
	0x03261B60 RET
	0x03261B64 ADRP X0, 0xEC1000
	0x03261B68 LDR X0, [X0 + 0xF50]
	0x03261B6C BL 0x1C16D08
	0x03261B70 MOV X1, X31
	0x03261B74 BL 0x33BDD84
	0x03261B78 MOV X19, X0
	0x03261B7C ADRP X0, 0xEBF000
	0x03261B80 LDR X0, [X0 + 0xCE0]
	0x03261B84 BL 0x1C16D08
	0x03261B88 BL 0x1C16F10
	0x03261B8C MOV X20, X0
	0x03261B90 ADRP X0, 0xEBF000
	0x03261B94 LDR X0, [X0 + 0xEC0]
	0x03261B98 BL 0x1C16D08
	0x03261B9C MOV X2, X0
	0x03261BA0 MOV X0, X20
	0x03261BA4 MOV X1, X19
	0x03261BA8 MOV X3, X31
	0x03261BAC BL 0x3252374
	0x03261BB0 ADRP X0, 0xEC2000
	0x03261BB4 LDR X0, [X0 + 0x410]
	0x03261BB8 BL 0x1C16D08
	0x03261BBC MOV X1, X0
	0x03261BC0 MOV X0, X20
	0x03261BC4 BL 0x1C16DEC
	0x03261BC8 STR X30, [X31 - 0x60]!
	0x03261BCC STP X28, X27, [X31 + 0x10]
	0x03261BD0 STP X26, X25, [X31 + 0x20]
	0x03261BD4 STP X24, X23, [X31 + 0x30]
	0x03261BD8 STP X22, X21, [X31 + 0x40]
	0x03261BDC STP X20, X19, [X31 + 0x50]
	0x03261BE0 ADRP X24, 0x117B000
	0x03261BE4 LDRB W8, [X24 + 0x57C]
	0x03261BE8 MOV X19, X4
	0x03261BEC MOV X23, X3
	0x03261BF0 MOV W22, W2
	0x03261BF4 MOV X21, X1
	0x03261BF8 MOV X20, X0
	0x03261BFC TBNZ X8, 0x0, 0x3261C38
	0x03261C00 ADRP X0, 0xE92000
	0x03261C04 LDR X0, [X0 + 0x618]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x117C000
	007 Move W8, [X21+1351]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE93000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1351], W8
	019 Compare X20, 0
	020 JumpIfEqual {57}
	021 Move W8, [X19+16]
	022 Move W9, [X20+24]
	023 Add W10, W8, 7
	024 NotImplemented "Instruction CMP not yet implemented."
	025 NotImplemented "Instruction CSEL not yet implemented."
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X0, X20
	028 Move X1, X31
	029 Call Array.Clone, X0
	030 Compare X0, 0
	031 JumpIfEqual {50}
	032 Move X22, 0xE93000
	033 Move X22, [X22+1560]
	034 Move X20, X0
	035 Move X21, [X22]
	036 Move X1, X21
	037 Call 0x1C17E00
	038 Compare X0, 0
	039 JumpIfEqual {95}
	040 Move [X19+24], X0
	041 Move X19, [X22]
	042 Move X0, X20
	043 Move X1, X19
	044 Call 0x1C17E00
	045 Compare X0, 0
	046 JumpIfNotEqual {51}
	047 Move X0, X20
	048 Move X1, X19
	049 Call 0x1C181E0
	050 Move [X19+24], X31
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move X30, [X31+48]
	056 Return 
	057 Move X0, 0xE98000
	058 Move X0, [X0+1320]
	059 Call 0x1C17D08
	060 Call 0x1C17F10
	061 Move X19, X0
	062 Move X0, 0xE9D000
	063 Move X0, [X0+3784]
	064 Call 0x1C17D08
	065 Move X1, X0
	066 Move X0, X19
	067 Move X2, X31
	068 Call ArgumentNullException..ctor, X0, X1
	069 Move X0, 0xEC3000
	070 Move X0, [X0+928]
	071 Call 0x1C17D08
	072 Move X1, X0
	073 Move X0, X19
	074 Call 0x1C17DEC
	075 Move X0, 0xEC3000
	076 Move X0, [X0+456]
	077 Call 0x1C17D08
	078 Move X1, X31
	079 Call Environment.GetResourceString, X0
	080 Move X19, X0
	081 Move X0, 0xEC0000
	082 Move X0, [X0+3296]
	083 Call 0x1C17D08
	084 Call 0x1C17F10
	085 Move X1, X19
	086 Move X2, X31
	087 Move X20, X0
	088 Call CryptographicException..ctor, X0, X1
	089 Move X0, 0xEC3000
	090 Move X0, [X0+928]
	091 Call 0x1C17D08
	092 Move X1, X0
	093 Move X0, X20
	094 Call 0x1C17DEC
	095 Move X0, X20
	096 Move X1, X21
	097 Call 0x1C181E0

Method: System.Byte[] get_Key()

Disassembly:
	0x03261C08 BL 0x1C16CF4
	0x03261C0C ADRP X0, 0xEC1000
	0x03261C10 LDR X0, [X0 + 0xF78]
	0x03261C14 BL 0x1C16CF4
	0x03261C18 ADRP X0, 0xEC0000
	0x03261C1C LDR X0, [X0 + 0x320]
	0x03261C20 BL 0x1C16CF4
	0x03261C24 ADRP X0, 0xEC2000
	0x03261C28 LDR X0, [X0 + 0xF0]
	0x03261C2C BL 0x1C16CF4
	0x03261C30 MOVZ W8, 0x1
	0x03261C34 STRB W8, [X24 + 0x57C]
	0x03261C38 ADRP X24, 0xEC2000
	0x03261C3C LDR X24, [X24 + 0xF0]
	0x03261C40 AND W2, W22, 0x1
	0x03261C44 MOV X0, X20
	0x03261C48 MOV X1, X21
	0x03261C4C MOV X3, X19
	0x03261C50 MOV X4, X31
	0x03261C54 BL 0x321DF00
	0x03261C58 CBNZ X23, 0x3261C64
	0x03261C5C BL 0x326AA18
	0x03261C60 MOV X23, X0
	0x03261C64 LDR X0, [X24]
	0x03261C68 LDR W8, [X0 + 0xE0]
	0x03261C6C CBNZ W8, 0x3261C74
	0x03261C70 BL 0x1C16DFC
	0x03261C74 MOV X0, X23
	0x03261C78 BL 0x3261368
	0x03261C7C TBNZ X0, 0x0, 0x3261E78
	0x03261C80 ADRP X25, 0xE92000
	0x03261C84 LDR X25, [X25 + 0x618]
	0x03261C88 ADRP X27, 0xEC0000
	0x03261C8C MOVZ W1, 0x8
	0x03261C90 LDR X0, [X25]
	0x03261C94 LDR X27, [X27 + 0x320]
	0x03261C98 BL 0x1C16D6C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x117C000
	005 Move W8, [X20+1352]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE93000
	012 Move X0, [X0+1560]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1352], W8
	016 Move X0, [X19+32]
	017 Compare X0, 0
	018 JumpIfNotEqual {25}
	019 Move X8, [X19]
	020 Move X0, X19
	021 Move X9, [X8+696]
	022 Move X1, [X8+704]
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Move X0, [X19+32]
	025 Compare X0, 0
	026 JumpIfEqual {43}
	027 Move X1, X31
	028 Call Array.Clone, X0
	029 Compare X0, 0
	030 JumpIfEqual {39}
	031 Move X8, 0xE93000
	032 Move X8, [X8+1560]
	033 Move X19, X0
	034 Move X20, [X8]
	035 Move X1, X20
	036 Call 0x1C17E00
	037 Compare X0, 0
	038 JumpIfEqual {44}
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Return X0
	043 Call 0x1C17F20
	044 Move X0, X19
	045 Move X1, X20
	046 Call 0x1C181E0

Method: System.Void set_Key(System.Byte[] value)

Disassembly:
	0x03261C9C LDR X8, [X25]
	0x03261CA0 MOV X24, X0
	0x03261CA4 MOVZ W1, 0x8
	0x03261CA8 MOV X0, X8
	0x03261CAC BL 0x1C16D6C
	0x03261CB0 LDR X8, [X25]
	0x03261CB4 MOV X26, X0
	0x03261CB8 MOVZ W1, 0x8
	0x03261CBC MOV X0, X8
	0x03261CC0 BL 0x1C16D6C
	0x03261CC4 LDR X8, [X27]
	0x03261CC8 MOV X27, X0
	0x03261CCC LDR W9, [X8 + 0xE0]
	0x03261CD0 CBNZ W9, 0x3261CDC
	0x03261CD4 MOV X0, X8
	0x03261CD8 BL 0x1C16DFC
	0x03261CDC MOV X0, X31
	0x03261CE0 BL 0x3252CD4
	0x03261CE4 MOV X25, X0
	0x03261CE8 MOVZ W4, 0x8
	0x03261CEC MOV X0, X23
	0x03261CF0 MOV W1, W31
	0x03261CF4 MOV X2, X24
	0x03261CF8 MOV W3, W31
	0x03261CFC MOV X5, X31
	0x03261D00 BL 0x33A8A9C
	0x03261D04 MOVZ W1, 0x8
	0x03261D08 MOVZ W4, 0x8
	0x03261D0C MOV X0, X23
	0x03261D10 MOV X2, X26
	0x03261D14 MOV W3, W31
	0x03261D18 MOV X5, X31
	0x03261D1C BL 0x33A8A9C
	0x03261D20 CBZ X23, 0x3261E74
	0x03261D24 LDR W8, [X23 + 0x18]
	0x03261D28 ADRP X28, 0xEC1000
	0x03261D2C LDR X28, [X28 + 0xF78]
	0x03261D30 MOVZ W4, 0x8
	0x03261D34 CMP W8, 0x10
	0x03261D38 CSET W8, NE
	0x03261D3C UBFM W1, W8, 0x1C, 0x1B
	0x03261D40 MOV X0, X23
	0x03261D44 MOV X2, X27
	0x03261D48 MOV W3, W31
	0x03261D4C MOV X5, X31
	0x03261D50 BL 0x33A8A9C
	0x03261D54 TBNZ X22, 0x0, 0x3261D78
	0x03261D58 CBZ X21, 0x3261E74
	0x03261D5C LDR X8, [X21]
	0x03261D60 MOV X0, X21
	0x03261D64 LDR X9, [X8 + 0x238]
	0x03261D68 LDR X1, [X8 + 0x240]
	0x03261D6C BLR X9
	0x03261D70 CMP W0, 0x4
	0x03261D74 B.NE 0x3261DE8
	0x03261D78 LDR X0, [X28]
	0x03261D7C BL 0x1C16F10
	0x03261D80 MOVZ W2, 0x1
	0x03261D84 MOV X1, X25
	0x03261D88 MOV X3, X24
	0x03261D8C MOV X4, X19
	0x03261D90 MOV X21, X0
	0x03261D94 BL 0x32655CC
	0x03261D98 STR X21, [X20 + 0x58]
	0x03261D9C LDR X0, [X28]
	0x03261DA0 BL 0x1C16F10
	0x03261DA4 MOV X1, X25
	0x03261DA8 MOV W2, W31
	0x03261DAC MOV X3, X26
	0x03261DB0 MOV X4, X19
	0x03261DB4 MOV X21, X0
	0x03261DB8 BL 0x32655CC
	0x03261DBC STR X21, [X20 + 0x60]
	0x03261DC0 LDR X0, [X28]
	0x03261DC4 BL 0x1C16F10
	0x03261DC8 MOVZ W2, 0x1
	0x03261DCC MOV X1, X25
	0x03261DD0 MOV X3, X27
	0x03261DD4 MOV X4, X19
	0x03261DD8 MOV X21, X0
	0x03261DDC BL 0x32655CC
	0x03261DE0 ADD X8, X20, 0x68
	0x03261DE4 B 0x3261E54
	0x03261DE8 LDR X0, [X28]
	0x03261DEC BL 0x1C16F10

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x117C000
	008 Move W8, [X21+1353]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xE93000
	016 Move X0, [X0+1560]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1353], W8
	020 Compare X19, 0
	021 JumpIfEqual {68}
	022 Move W8, [X19+24]
	023 Move X0, X20
	024 Move W1, W8
	025 ShiftRight W1, 29
	026 And W1, W1, 0xFFFFFFF
	027 Call SymmetricAlgorithm.ValidKeySize, X0, X1
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {86}
	032 Move X0, X19
	033 Move X1, X31
	034 Call Array.Clone, X0
	035 Compare X0, 0
	036 JumpIfEqual {55}
	037 Move X23, 0xE93000
	038 Move X23, [X23+1560]
	039 Move X21, X0
	040 Move X22, [X23]
	041 Move X1, X22
	042 Call 0x1C17E00
	043 Compare X0, 0
	044 JumpIfEqual {52}
	045 Move [X20+32], X0
	046 Move X22, [X23]
	047 Move X0, X21
	048 Move X1, X22
	049 Call 0x1C17E00
	050 Compare X0, 0
	051 JumpIfNotEqual {56}
	052 Move X0, X21
	053 Move X1, X22
	054 Call 0x1C181E0
	055 Move [X20+32], X31
	056 Move W8, [X19+24]
	057 Move X22, [X31+16]
	058 Move X21, [X31+24]
	059 Move W8, W8
	060 ShiftRight W8, 29
	061 And W8, W8, 0xFFFFFFF
	062 Move [X20+56], W8
	063 Move X20, [X31+32]
	064 Move X19, [X31+40]
	065 Move X30, [X31+48]
	066 Move X23, [X31+56]
	067 Return 
	068 Move X0, 0xE98000
	069 Move X0, [X0+1320]
	070 Call 0x1C17D08
	071 Call 0x1C17F10
	072 Move X19, X0
	073 Move X0, 0xE9D000
	074 Move X0, [X0+3784]
	075 Call 0x1C17D08
	076 Move X1, X0
	077 Move X0, X19
	078 Move X2, X31
	079 Call ArgumentNullException..ctor, X0, X1
	080 Move X0, 0xEC3000
	081 Move X0, [X0+936]
	082 Call 0x1C17D08
	083 Move X1, X0
	084 Move X0, X19
	085 Call 0x1C17DEC
	086 Move X0, 0xEC2000
	087 Move X0, [X0+3848]
	088 Call 0x1C17D08
	089 Move X1, X31
	090 Call Environment.GetResourceString, X0
	091 Move X19, X0
	092 Move X0, 0xEC0000
	093 Move X0, [X0+3296]
	094 Call 0x1C17D08
	095 Call 0x1C17F10
	096 Move X1, X19
	097 Move X2, X31
	098 Move X20, X0
	099 Call CryptographicException..ctor, X0, X1
	100 Move X0, 0xEC3000
	101 Move X0, [X0+936]
	102 Call 0x1C17D08
	103 Move X1, X0
	104 Move X0, X20
	105 Call 0x1C17DEC

Method: System.Security.Cryptography.KeySizes[] get_LegalKeySizes()

Disassembly:
	0x03261E8C MOV X19, X0
	0x03261E90 ADRP X0, 0xEBF000
	0x03261E94 LDR X0, [X0 + 0xCE0]
	0x03261E98 BL 0x1C16D08
	0x03261E9C BL 0x1C16F10
	0x03261EA0 MOV X1, X19
	0x03261EA4 MOV X2, X31
	0x03261EA8 MOV X20, X0
	0x03261EAC BL 0x3252170
	0x03261EB0 ADRP X0, 0xEC2000
	0x03261EB4 LDR X0, [X0 + 0x420]
	0x03261EB8 BL 0x1C16D08
	0x03261EBC MOV X1, X0
	0x03261EC0 MOV X0, X20
	0x03261EC4 BL 0x1C16DEC
	0x03261EC8 STP X30, X23, [X31 - 0x30]!
	0x03261ECC STP X22, X21, [X31 + 0x10]
	0x03261ED0 STP X20, X19, [X31 + 0x20]
	0x03261ED4 ADRP X22, 0x117B000
	0x03261ED8 ADRP X23, 0xEC2000
	0x03261EDC LDRB W8, [X22 + 0x554]
	0x03261EE0 LDR X23, [X23 + 0xF0]
	0x03261EE4 MOV X19, X2
	0x03261EE8 MOV X20, X1
	0x03261EEC MOV X21, X0
	0x03261EF0 TBNZ X8, 0x0, 0x3261F14
	0x03261EF4 ADRP X0, 0xEC2000
	0x03261EF8 LDR X0, [X0 + 0x408]
	0x03261EFC BL 0x1C16CF4
	0x03261F00 ADRP X0, 0xEC2000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x117C000
	005 Move W8, [X20+1354]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xEC1000
	012 Move X0, [X0+1312]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1354], W8
	016 Move X0, [X19+48]
	017 Compare X0, 0
	018 JumpIfEqual {35}
	019 Move X1, X31
	020 Call Array.Clone, X0
	021 Compare X0, 0
	022 JumpIfEqual {31}
	023 Move X8, 0xEC1000
	024 Move X8, [X8+1312]
	025 Move X19, X0
	026 Move X20, [X8]
	027 Move X1, X20
	028 Call 0x1C17E00
	029 Compare X0, 0
	030 JumpIfEqual {36}
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return X0
	035 Call 0x1C17F20
	036 Move X0, X19
	037 Move X1, X20
	038 Call 0x1C181E0

Method: System.Int32 get_KeySize()

Disassembly:
	0x03261F04 LDR X0, [X0 + 0xF0]
	0x03261F08 BL 0x1C16CF4

ISIL:
	001 Move W0, [X0+56]
	002 Return X0

Method: System.Void set_KeySize(System.Int32 value)

Disassembly:
	0x03261F0C MOVZ W8, 0x1
	0x03261F10 STRB W8, [X22 + 0x554]
	0x03261F14 LDR X0, [X23]
	0x03261F18 LDR W8, [X0 + 0xE0]
	0x03261F1C CBNZ W8, 0x3261F24
	0x03261F20 BL 0x1C16DFC
	0x03261F24 MOV X0, X20
	0x03261F28 BL 0x3261368
	0x03261F2C TBNZ X0, 0x0, 0x3261F6C
	0x03261F30 ADRP X8, 0xEC2000
	0x03261F34 LDR X8, [X8 + 0x408]
	0x03261F38 LDR X0, [X8]
	0x03261F3C BL 0x1C16F10
	0x03261F40 MOV X1, X21
	0x03261F44 MOV W2, W31
	0x03261F48 MOV X3, X20
	0x03261F4C MOV X4, X19
	0x03261F50 MOV X22, X0
	0x03261F54 BL 0x3261BC8
	0x03261F58 MOV X0, X22
	0x03261F5C LDP X20, X19, [X31 + 0x20]
	0x03261F60 LDP X22, X21, [X31 + 0x10]
	0x03261F64 LDP X30, X23, [X31], #0x30
	0x03261F68 RET
	0x03261F6C ADRP X0, 0xEC1000
	0x03261F70 LDR X0, [X0 + 0xF50]
	0x03261F74 BL 0x1C16D08
	0x03261F78 MOV X1, X31
	0x03261F7C BL 0x33BDD84
	0x03261F80 MOV X19, X0
	0x03261F84 ADRP X0, 0xEBF000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W20, W1
	005 Move X19, X0
	006 Call SymmetricAlgorithm.ValidKeySize, X0, X1
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {17}
	011 Move [X19+56], W20
	012 Move [X19+32], X31
	013 Move X20, [X31+16]
	014 Move X19, [X31+24]
	015 Move X30, [X31+32]
	016 Return 
	017 Move X0, 0xEC2000
	018 Move X0, [X0+3848]
	019 Call 0x1C17D08
	020 Move X1, X31
	021 Call Environment.GetResourceString, X0
	022 Move X19, X0
	023 Move X0, 0xEC0000
	024 Move X0, [X0+3296]
	025 Call 0x1C17D08
	026 Call 0x1C17F10
	027 Move X1, X19
	028 Move X2, X31
	029 Move X20, X0
	030 Call CryptographicException..ctor, X0, X1
	031 Move X0, 0xEC3000
	032 Move X0, [X0+944]
	033 Call 0x1C17D08
	034 Move X1, X0
	035 Move X0, X20
	036 Call 0x1C17DEC

Method: System.Security.Cryptography.CipherMode get_Mode()

Disassembly:
	0x03261F88 LDR X0, [X0 + 0xCE0]
	0x03261F8C BL 0x1C16D08

ISIL:
	001 Move W0, [X0+60]
	002 Return X0

Method: System.Void set_Mode(System.Security.Cryptography.CipherMode value)

Disassembly:
	0x03261F90 BL 0x1C16F10
	0x03261F94 MOV X20, X0
	0x03261F98 ADRP X0, 0xEBF000
	0x03261F9C LDR X0, [X0 + 0xEC0]
	0x03261FA0 BL 0x1C16D08
	0x03261FA4 MOV X2, X0
	0x03261FA8 MOV X0, X20
	0x03261FAC MOV X1, X19
	0x03261FB0 MOV X3, X31
	0x03261FB4 BL 0x3252374
	0x03261FB8 ADRP X0, 0xEC2000
	0x03261FBC LDR X0, [X0 + 0x428]
	0x03261FC0 BL 0x1C16D08
	0x03261FC4 MOV X1, X0
	0x03261FC8 MOV X0, X20
	0x03261FCC BL 0x1C16DEC
	0x03261FD0 STP X30, X21, [X31 - 0x20]!
	0x03261FD4 STP X20, X19, [X31 + 0x10]
	0x03261FD8 ADRP X21, 0x117B000
	0x03261FDC ADRP X20, 0xE92000
	0x03261FE0 LDRB W8, [X21 + 0x555]
	0x03261FE4 LDR X20, [X20 + 0x618]
	0x03261FE8 MOV X19, X0
	0x03261FEC TBNZ X8, 0x0, 0x3262010
	0x03261FF0 ADRP X0, 0xE92000
	0x03261FF4 LDR X0, [X0 + 0x618]
	0x03261FF8 BL 0x1C16CF4
	0x03261FFC ADRP X0, 0xEC2000
	0x03262000 LDR X0, [X0 + 0xF0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Subtract W8, W1, 1
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X20, [X31+16]
	007 Move X19, [X31+24]
	008 Move [X0+60], W1
	009 Move X30, [X31+32]
	010 Return 
	011 Move X0, 0xEC3000
	012 Move X0, [X0+464]
	013 Call 0x1C17D08
	014 Move X1, X31
	015 Call Environment.GetResourceString, X0
	016 Move X19, X0
	017 Move X0, 0xEC0000
	018 Move X0, [X0+3296]
	019 Call 0x1C17D08
	020 Call 0x1C17F10
	021 Move X1, X19
	022 Move X2, X31
	023 Move X20, X0
	024 Call CryptographicException..ctor, X0, X1
	025 Move X0, 0xEC3000
	026 Move X0, [X0+952]
	027 Call 0x1C17D08
	028 Move X1, X0
	029 Move X0, X20
	030 Call 0x1C17DEC

Method: System.Security.Cryptography.PaddingMode get_Padding()

Disassembly:
	0x03262004 BL 0x1C16CF4
	0x03262008 MOVZ W8, 0x1

ISIL:
	001 Move W0, [X0+64]
	002 Return X0

Method: System.Void set_Padding(System.Security.Cryptography.PaddingMode value)

Disassembly:
	0x0326200C STRB W8, [X21 + 0x555]
	0x03262010 LDR W8, [X19 + 0x38]
	0x03262014 LDR X0, [X20]
	0x03262018 ADD W9, W8, 0x7
	0x0326201C CMP W8, 0x0
	0x03262020 CSEL W8, W9, W8, LT
	0x03262024 SBFM W1, W8, 0x3, 0x1F
	0x03262028 BL 0x1C16D6C
	0x0326202C STR X0, [X19 + 0x20]
	0x03262030 BL 0x3262098
	0x03262034 CBZ X0, 0x3262094
	0x03262038 LDR X8, [X0]
	0x0326203C ADRP X21, 0xEC1000
	0x03262040 LDR X1, [X19 + 0x20]
	0x03262044 LDP X9, X2, [X8 + 0x198]
	0x03262048 LDR X21, [X21 + 0xF0]
	0x0326204C BLR X9
	0x03262050 LDR X0, [X21]
	0x03262054 LDR X20, [X19 + 0x20]
	0x03262058 LDR W8, [X0 + 0xE0]
	0x0326205C CBNZ W8, 0x3262064
	0x03262060 BL 0x1C16DFC
	0x03262064 MOV X0, X20
	0x03262068 BL 0x3261368
	0x0326206C TBZ X0, 0x0, 0x3262088
	0x03262070 BL 0x3262098
	0x03262074 CBZ X0, 0x3262094
	0x03262078 LDR X8, [X0]
	0x0326207C LDR X1, [X19 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Subtract W8, W1, 1
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X20, [X31+16]
	007 Move X19, [X31+24]
	008 Move [X0+64], W1
	009 Move X30, [X31+32]
	010 Return 
	011 Move X0, 0xEC2000
	012 Move X0, [X0+960]
	013 Call 0x1C17D08
	014 Move X1, X31
	015 Call Environment.GetResourceString, X0
	016 Move X19, X0
	017 Move X0, 0xEBF000
	018 Move X0, [X0+3296]
	019 Call 0x1C17D08
	020 Call 0x1C17F10
	021 Move X1, X19
	022 Move X2, X31
	023 Move X20, X0
	024 Call CryptographicException..ctor, X0, X1
	025 Move X0, 0xEC2000
	026 Move X0, [X0+968]
	027 Call 0x1C17D08
	028 Move X1, X0
	029 Move X0, X20
	030 Call 0x1C17DEC

Method: System.Boolean ValidKeySize(System.Int32 bitLength)

Disassembly:
	0x03261DF0 MOV X1, X25
	0x03261DF4 MOV W2, W31
	0x03261DF8 MOV X3, X27
	0x03261DFC MOV X4, X19
	0x03261E00 MOV X21, X0
	0x03261E04 BL 0x32655CC
	0x03261E08 STR X21, [X20 + 0x70]
	0x03261E0C LDR X0, [X28]
	0x03261E10 BL 0x1C16F10
	0x03261E14 MOVZ W2, 0x1
	0x03261E18 MOV X1, X25
	0x03261E1C MOV X3, X26
	0x03261E20 MOV X4, X19
	0x03261E24 MOV X21, X0
	0x03261E28 BL 0x32655CC
	0x03261E2C STR X21, [X20 + 0x78]
	0x03261E30 LDR X0, [X28]
	0x03261E34 BL 0x1C16F10
	0x03261E38 MOV X1, X25
	0x03261E3C MOV W2, W31
	0x03261E40 MOV X3, X24
	0x03261E44 MOV X4, X19
	0x03261E48 MOV X21, X0
	0x03261E4C BL 0x32655CC
	0x03261E50 ADD X8, X20, 0x80
	0x03261E54 STR X21, [X8]
	0x03261E58 LDP X20, X19, [X31 + 0x50]
	0x03261E5C LDP X22, X21, [X31 + 0x40]
	0x03261E60 LDP X24, X23, [X31 + 0x30]
	0x03261E64 LDP X26, X25, [X31 + 0x20]
	0x03261E68 LDP X28, X27, [X31 + 0x10]
	0x03261E6C LDR X30, [X31], #0x60
	0x03261E70 RET
	0x03261E74 BL 0x1C16F20
	0x03261E78 ADRP X0, 0xEC2000
	0x03261E7C LDR X0, [X0 + 0x418]
	0x03261E80 BL 0x1C16D08
	0x03261E84 MOV X1, X31
	0x03261E88 BL 0x320A160

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Move W19, W1
	005 Move X9, [X8+520]
	006 Move X8, [X8+528]
	007 Move X1, X8
	008 NotImplemented "Instruction BLR not yet implemented."
	009 Compare X0, 0
	010 JumpIfEqual {32}
	011 Move W8, [X0+24]
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W9, W31
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Add X10, X0, W9
	016 Move X12, [X10+32]
	017 Compare X12, 0
	018 JumpIfEqual {36}
	019 Move W11, [X12+24]
	020 Move W10, [X12+16]
	021 Compare W11, 0
	022 JumpIfEqual {27}
	023 Move W12, [X12+20]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Add W10, W10, W11
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Add W9, W9, 1
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move W0, W31
	031 Move W0, 1
	032 Move X30, [X31+16]
	033 Move X19, [X31+24]
	034 Return X0
	035 Call 0x1C17F28
	036 Call 0x1C17F20

Method: System.Security.Cryptography.SymmetricAlgorithm Create(System.String algName)

Disassembly:
	0x03262080 LDP X9, X2, [X8 + 0x198]
	0x03262084 B 0x326204C
	0x03262088 LDP X20, X19, [X31 + 0x10]
	0x0326208C LDP X30, X21, [X31], #0x20
	0x03262090 RET
	0x03262094 BL 0x1C16F20
	0x03262098 STR X30, [X31 - 0x20]!
	0x0326209C STP X20, X19, [X31 + 0x10]
	0x032620A0 ADRP X19, 0x117A000
	0x032620A4 ADRP X20, 0xEC1000
	0x032620A8 LDRB W8, [X19 + 0x557]
	0x032620AC LDR X20, [X20 + 0x430]
	0x032620B0 TBNZ X8, 0x0, 0x32620D4
	0x032620B4 ADRP X0, 0xEC1000
	0x032620B8 LDR X0, [X0 + 0x140]
	0x032620BC BL 0x1C16CF4
	0x032620C0 ADRP X0, 0xEC1000
	0x032620C4 LDR X0, [X0 + 0x430]
	0x032620C8 BL 0x1C16CF4
	0x032620CC MOVZ W8, 0x1
	0x032620D0 STRB W8, [X19 + 0x557]
	0x032620D4 LDR X8, [X20]
	0x032620D8 LDR X8, [X8 + 0xB8]
	0x032620DC LDR X19, [X8]
	0x032620E0 BL 0x1C16D44
	0x032620E4 CBNZ X19, 0x3262110
	0x032620E8 ADRP X8, 0xEC1000
	0x032620EC LDR X8, [X8 + 0x140]
	0x032620F0 LDR X0, [X8]
	0x032620F4 BL 0x1C16F10
	0x032620F8 MOV X19, X0
	0x032620FC BL 0x3262198
	0x03262100 BL 0x1C16D44
	0x03262104 LDR X8, [X20]
	0x03262108 LDR X8, [X8 + 0xB8]
	0x0326210C STR X19, [X8]
	0x03262110 LDR X8, [X20]
	0x03262114 LDR X8, [X8 + 0xB8]
	0x03262118 LDR X19, [X8]
	0x0326211C BL 0x1C16D44

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x117B000
	006 Move X21, 0xEBF000
	007 Move W8, [X20+1355]
	008 Move X21, [X21+3032]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xEBF000
	015 Move X0, [X0+3032]
	016 Call 0x1C17CF4
	017 Move X0, 0xEC2000
	018 Move X0, [X0+976]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1355], W8
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X19
	028 Call CryptoConfig.CreateFromName, X0
	029 Compare X0, 0
	030 JumpIfEqual {42}
	031 Move X9, 0xEC2000
	032 Move X9, [X9+976]
	033 Move X8, [X0]
	034 Move X1, [X9]
	035 Move W10, [X8+304]
	036 Move W9, [X1+304]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X8, [X8+200]
	039 Add X8, X8, X9
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Move X21, [X31+40]
	046 Return X0
	047 Call 0x1C181E0

Method: System.Security.Cryptography.ICryptoTransform CreateEncryptor()

Disassembly:
	0x03262178 CBZ X0, 0x3262194
	0x0326217C LDR X8, [X0]
	0x03262180 LDR X1, [X19 + 0x18]
	0x03262184 LDP X20, X19, [X31 + 0x10]
	0x03262188 LDP X3, X2, [X8 + 0x198]
	0x0326218C LDP X30, X21, [X31], #0x20
	0x03262190 BR X3
	0x03262194 BL 0x1C16F20
	0x03262198 STP X30, X21, [X31 - 0x20]!
	0x0326219C STP X20, X19, [X31 + 0x10]
	0x032621A0 ADRP X21, 0x117A000
	0x032621A4 ADRP X20, 0xEC1000
	0x032621A8 LDRB W8, [X21 + 0x573]
	0x032621AC LDR X20, [X20 + 0x140]
	0x032621B0 MOV X19, X0
	0x032621B4 TBNZ X8, 0x0, 0x32621CC
	0x032621B8 ADRP X0, 0xEC1000
	0x032621BC LDR X0, [X0 + 0x140]
	0x032621C0 BL 0x1C16CF4
	0x032621C4 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0]
	005 Move X19, X0
	006 Move X9, [X8+488]
	007 Move X1, [X8+496]
	008 NotImplemented "Instruction BLR not yet implemented."
	009 Move X8, [X19]
	010 Move X20, X0
	011 Move X0, X19
	012 Move X9, [X8+456]
	013 Move X1, [X8+464]
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Move X8, [X19]
	016 Move X2, X0
	017 Move X0, X19
	018 Move X1, X20
	019 Move X4, [X8+648]
	020 Move X3, [X8+656]
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 CallNoReturn X4

Method: System.Security.Cryptography.ICryptoTransform CreateEncryptor(System.Byte[] rgbKey, System.Byte[] rgbIV)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Security.Cryptography.ICryptoTransform CreateDecryptor()

Disassembly:
	0x032621C8 STRB W8, [X21 + 0x573]
	0x032621CC MOV X0, X19
	0x032621D0 MOV X1, X31
	0x032621D4 BL 0x3256150
	0x032621D8 LDR X0, [X20]
	0x032621DC LDR W8, [X0 + 0xE0]
	0x032621E0 CBNZ W8, 0x32621E8
	0x032621E4 BL 0x1C16DFC
	0x032621E8 MOV X0, X31
	0x032621EC MOV X1, X31
	0x032621F0 BL 0x1C99798
	0x032621F4 STR X0, [X19 + 0x10]
	0x032621F8 MOV X0, X19
	0x032621FC LDP X20, X19, [X31 + 0x10]
	0x03262200 LDP X30, X21, [X31], #0x20
	0x03262204 B 0x3268FD4
	0x03262208 STP X30, X21, [X31 - 0x20]!
	0x0326220C STP X20, X19, [X31 + 0x10]
	0x03262210 ADRP X20, 0x117A000
	0x03262214 ADRP X21, 0xE91000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0]
	005 Move X19, X0
	006 Move X9, [X8+488]
	007 Move X1, [X8+496]
	008 NotImplemented "Instruction BLR not yet implemented."
	009 Move X8, [X19]
	010 Move X20, X0
	011 Move X0, X19
	012 Move X9, [X8+456]
	013 Move X1, [X8+464]
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Move X8, [X19]
	016 Move X2, X0
	017 Move X0, X19
	018 Move X1, X20
	019 Move X4, [X8+680]
	020 Move X3, [X8+688]
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 CallNoReturn X4

Method: System.Security.Cryptography.ICryptoTransform CreateDecryptor(System.Byte[] rgbKey, System.Byte[] rgbIV)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void GenerateKey()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void GenerateIV()

Disassembly:
	

ISIL:
No ISIL was generated
