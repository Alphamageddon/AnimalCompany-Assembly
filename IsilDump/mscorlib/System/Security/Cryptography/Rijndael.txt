Type: System.Security.Cryptography.Rijndael

Method: System.Void .ctor()

Disassembly:
	0x03257AC8 MOV X3, X31
	0x03257ACC BL 0x339FA34
	0x03257AD0 STR X31, [X19 + 0x78]
	0x03257AD4 LDP X30, X19, [X31], #0x10
	0x03257AD8 RET
	0x03257ADC LDR W0, [X0 + 0x24]
	0x03257AE0 RET
	0x03257AE4 LDR W0, [X0 + 0x28]
	0x03257AE8 RET
	0x03257AEC MOVZ W0, 0x1
	0x03257AF0 RET
	0x03257AF4 SUB X31, X31, 0x50
	0x03257AF8 STP X30, X25, [X31 + 0x10]
	0x03257AFC STP X24, X23, [X31 + 0x20]
	0x03257B00 STP X22, X21, [X31 + 0x30]
	0x03257B04 STP X20, X19, [X31 + 0x40]
	0x03257B08 ADRP X25, 0x1185000
	0x03257B0C LDRB W8, [X25 + 0x506]
	0x03257B10 MOV W22, W5
	0x03257B14 MOV X24, X4
	0x03257B18 MOV W23, W3
	0x03257B1C MOV W20, W2
	0x03257B20 MOV X21, X1
	0x03257B24 MOV X19, X0
	0x03257B28 STR X4, [X31 + 0x8]
	0x03257B2C TBNZ X8, 0x0, 0x3257B44
	0x03257B30 ADRP X0, 0xE9C000
	0x03257B34 LDR X0, [X0 + 0x618]
	0x03257B38 BL 0x1C16CF4
	0x03257B3C MOVZ W8, 0x1
	0x03257B40 STRB W8, [X25 + 0x506]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1186000
	006 Move X20, 0xECD000
	007 Move W8, [X21+1281]
	008 Move X20, [X20+408]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xECD000
	015 Move X0, [X0+408]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1281], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call SymmetricAlgorithm..ctor, X0
	022 Move W8, 256
	023 NotImplemented "Instruction MOVI not yet implemented."
	024 Move [X19+56], W8
	025 Move [X19+16], D0
	026 Move X0, [X20]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X20]
	032 Move X8, [X0+184]
	033 Move V0, [X8]
	034 Move [X19+40], V0
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return 

Method: System.Void .cctor()

Disassembly:
	0x03257B44 CBZ X21, 0x3257CB0
	0x03257B48 CBZ X24, 0x3257CD0
	0x03257B4C TBNZ X20, 0x1F, 0x3257D18
	0x03257B50 CMP W23, 0x1
	0x03257B54 B.LT 0x3257CA4
	0x03257B58 LDR W1, [X19 + 0x24]
	0x03257B5C SDIV W8, W23, W1
	0x03257B60 MSUB W8, W8, W1, W23
	0x03257B64 CBNZ W8, 0x3257CA4
	0x03257B68 LDR W8, [X21 + 0x18]
	0x03257B6C SUBS W8, W8, W23
	0x03257B70 B.LT 0x3257CA4
	0x03257B74 CMP W8, W20
	0x03257B78 B.LT 0x3257D68
	0x03257B7C LDP W6, W8, [X19 + 0x14]
	0x03257B80 CBZ W8, 0x3257BB4
	0x03257B84 ORR W8, W6, 0x2
	0x03257B88 CMP W8, 0x3
	0x03257B8C B.NE 0x3257BD8
	0x03257B90 ADD X4, X31, 0x8
	0x03257B94 MOV X0, X19
	0x03257B98 MOV X1, X21
	0x03257B9C MOV W2, W20
	0x03257BA0 MOV W3, W23
	0x03257BA4 MOV W5, W22
	0x03257BA8 MOV W7, W31
	0x03257BAC BL 0x3258988
	0x03257BB0 B 0x3257C50
	0x03257BB4 ADD X4, X31, 0x8
	0x03257BB8 MOV X0, X19
	0x03257BBC MOV X1, X21
	0x03257BC0 MOV W2, W20
	0x03257BC4 MOV W3, W23
	0x03257BC8 MOV W5, W22
	0x03257BCC MOV W7, W31
	0x03257BD0 BL 0x3257DB8
	0x03257BD4 B 0x3257C50
	0x03257BD8 LDR X8, [X19 + 0x70]
	0x03257BDC CBZ X8, 0x3257C68
	0x03257BE0 LDR W3, [X8 + 0x18]
	0x03257BE4 ADD X4, X31, 0x8
	0x03257BE8 MOV X0, X19
	0x03257BEC MOV X1, X8
	0x03257BF0 MOV W2, W31
	0x03257BF4 MOV W5, W22
	0x03257BF8 MOV W7, W31
	0x03257BFC BL 0x3258988
	0x03257C00 LDP W4, W8, [X19 + 0x24]
	0x03257C04 LDR X2, [X19 + 0x70]
	0x03257C08 MOV X0, X21
	0x03257C0C MOV W3, W31
	0x03257C10 SUB W23, W23, W4
	0x03257C14 ADD W1, W23, W20
	0x03257C18 MOV X5, X31
	0x03257C1C ADD W22, W8, W22
	0x03257C20 BL 0x33A8750
	0x03257C24 LDR W6, [X19 + 0x14]
	0x03257C28 ADD X4, X31, 0x8
	0x03257C2C MOV X0, X19
	0x03257C30 MOV X1, X21
	0x03257C34 MOV W2, W20
	0x03257C38 MOV W3, W23
	0x03257C3C MOV W5, W22
	0x03257C40 MOV W7, W31
	0x03257C44 BL 0x3258988
	0x03257C48 LDR W8, [X19 + 0x28]
	0x03257C4C ADD W0, W8, W0
	0x03257C50 LDP X20, X19, [X31 + 0x40]
	0x03257C54 LDP X22, X21, [X31 + 0x30]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, 0x1186000
	008 Move X22, 0xECB000
	009 Move X21, 0xECB000
	010 Move W8, [X19+1282]
	011 Move X22, [X22+1312]
	012 Move X21, [X21+1320]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0xECB000
	018 Move X0, [X0+1312]
	019 Call 0x1C17CF4
	020 Move X0, 0xECB000
	021 Move X0, [X0+1320]
	022 Call 0x1C17CF4
	023 Move X0, 0xECD000
	024 Move X0, [X0+408]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X19+1282], W8
	028 Move X0, [X22]
	029 Move W1, 1
	030 Call 0x1C17D6C
	031 Move X8, [X21]
	032 Move X19, X0
	033 Move X0, X8
	034 Call 0x1C17F10
	035 Move W1, 128
	036 Move W2, 256
	037 Move W3, 64
	038 Move X4, X31
	039 Move X20, X0
	040 Call KeySizes..ctor, X0, X1, X2, X3
	041 Compare X19, 0
	042 JumpIfEqual {81}
	043 Move W8, [X19+24]
	044 Compare W8, 0
	045 JumpIfEqual {82}
	046 Move X23, 0xECD000
	047 Move X23, [X23+408]
	048 Move [X19+32], X20
	049 Move W1, 1
	050 Move X8, [X23]
	051 Move X8, [X8+184]
	052 Move [X8], X19
	053 Move X0, [X22]
	054 Call 0x1C17D6C
	055 Move X8, [X21]
	056 Move X19, X0
	057 Move X0, X8
	058 Call 0x1C17F10
	059 Move W1, 128
	060 Move W2, 256
	061 Move W3, 64
	062 Move X4, X31
	063 Move X20, X0
	064 Call KeySizes..ctor, X0, X1, X2, X3
	065 Compare X19, 0
	066 JumpIfEqual {81}
	067 Move W8, [X19+24]
	068 Compare W8, 0
	069 JumpIfEqual {82}
	070 Move [X19+32], X20
	071 Move X8, [X23]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X8, [X8+184]
	075 Move [X8+8], X19
	076 Move X20, [X31+32]
	077 Move X19, [X31+40]
	078 Move X30, [X31+48]
	079 Move X23, [X31+56]
	080 Return 
	081 Call 0x1C17F20
	082 Call 0x1C17F28

