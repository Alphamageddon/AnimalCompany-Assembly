Type: System.Security.Cryptography.X509Certificates.X509Certificate

Method: System.Void Reset()

Disassembly:
	0x0326BC30 ADRP X0, 0xEB8000
	0x0326BC34 LDR X0, [X0 + 0x9C0]
	0x0326BC38 BL 0x1C16CF4
	0x0326BC3C ADRP X0, 0xEB8000
	0x0326BC40 LDR X0, [X0 + 0x9C8]
	0x0326BC44 BL 0x1C16CF4
	0x0326BC48 ADRP X0, 0xEB8000
	0x0326BC4C LDR X0, [X0 + 0x9D0]
	0x0326BC50 BL 0x1C16CF4
	0x0326BC54 ADRP X0, 0xEB8000
	0x0326BC58 LDR X0, [X0 + 0x9D8]
	0x0326BC5C BL 0x1C16CF4
	0x0326BC60 MOVZ W8, 0x1
	0x0326BC64 STRB W8, [X21 + 0x588]
	0x0326BC68 TBZ X20, 0x0, 0x326BED8
	0x0326BC6C LDR X0, [X19 + 0x10]
	0x0326BC70 CBZ X0, 0x326BED8
	0x0326BC74 LDR X8, [X0]
	0x0326BC78 LDP X9, X1, [X8 + 0x188]
	0x0326BC7C BLR X9
	0x0326BC80 TBZ X0, 0x0, 0x326BED8
	0x0326BC84 ADRP X8, 0xE88000
	0x0326BC88 LDR X8, [X8 + 0x8F0]
	0x0326BC8C LDR X0, [X8]
	0x0326BC90 BL 0x1C16F10
	0x0326BC94 MOV X1, X31
	0x0326BC98 MOV X20, X0
	0x0326BC9C BL 0x3231AC4
	0x0326BCA0 CBZ X20, 0x326BEF0
	0x0326BCA4 ADRP X8, 0xEB8000
	0x0326BCA8 LDR X8, [X8 + 0x9B8]
	0x0326BCAC MOV X0, X20
	0x0326BCB0 MOV X2, X31
	0x0326BCB4 LDR X1, [X8]
	0x0326BCB8 BL 0x32338A8
	0x0326BCBC ADRP X22, 0xE8A000
	0x0326BCC0 LDR X22, [X22 + 0x1A0]
	0x0326BCC4 MOV X0, X20
	0x0326BCC8 MOV X2, X31
	0x0326BCCC LDR X1, [X22]
	0x0326BCD0 BL 0x32333E0
	0x0326BCD4 MOV X0, X19
	0x0326BCD8 BL 0x326B698
	0x0326BCDC MOV X1, X0
	0x0326BCE0 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1172000
	005 Move W8, [X20+1408]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE8A000
	012 Move X0, [X0+2544]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1408], W8
	016 Move X20, 0xE8A000
	017 Move X0, [X19+16]
	018 Move X20, [X20+2544]
	019 Compare X0, 0
	020 JumpIfEqual {23}
	021 Call X509CertificateImpl.Dispose, X0
	022 Move [X19+16], X31
	023 Call 0x1C17D44
	024 Move [X19+24], X31
	025 Call 0x1C17D44
	026 Move [X19+40], X31
	027 Call 0x1C17D44
	028 Move [X19+48], X31
	029 Call 0x1C17D44
	030 Move [X19+32], X31
	031 Call 0x1C17D44
	032 Move [X19+56], X31
	033 Call 0x1C17D44
	034 Move [X19+64], X31
	035 Call 0x1C17D44
	036 Move [X19+72], X31
	037 Move X0, [X20]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {43}
	041 Call 0x1C17DFC
	042 Move X0, [X20]
	043 Move X8, [X0+184]
	044 Move X8, [X8+16]
	045 Move [X19+80], X8
	046 Move X8, [X0+184]
	047 Move X8, [X8+16]
	048 Move [X19+88], X8
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+32]
	052 Return 

Method: System.Void .ctor()

Disassembly:
	0x0326BD54 LDR X1, [X8]
	0x0326BD58 BL 0x32338A8
	0x0326BD5C LDR X1, [X22]
	0x0326BD60 MOV X0, X20
	0x0326BD64 MOV X2, X31
	0x0326BD68 BL 0x32333E0
	0x0326BD6C LDR X8, [X19]
	0x0326BD70 MOV X0, X19
	0x0326BD74 LDR X9, [X8 + 0x238]
	0x0326BD78 LDR X1, [X8 + 0x240]
	0x0326BD7C BLR X9
	0x0326BD80 ADRP X8, 0xEB5000
	0x0326BD84 LDR X8, [X8 + 0xBD0]
	0x0326BD88 MOV X21, X0
	0x0326BD8C LDR X1, [X8]
	0x0326BD90 BL 0x21465E8
	0x0326BD94 MOV X0, X21
	0x0326BD98 MOV X1, X31
	0x0326BD9C BL 0x32255BC
	0x0326BDA0 MOV X1, X0
	0x0326BDA4 MOV X0, X20
	0x0326BDA8 MOV X2, X31
	0x0326BDAC BL 0x3233FC8
	0x0326BDB0 MOV X0, X20
	0x0326BDB4 MOV X1, X31
	0x0326BDB8 BL 0x3233888
	0x0326BDBC MOV X0, X20
	0x0326BDC0 MOV X1, X31
	0x0326BDC4 BL 0x3233888

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1172000
	006 Move X20, 0xE8A000
	007 Move W8, [X21+1409]
	008 Move X20, [X20+2544]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE8A000
	015 Move X0, [X0+2544]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1409], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X1, X31
	027 Move X8, [X8+16]
	028 Move [X19+80], X8
	029 Move X8, [X0+184]
	030 Move X0, X19
	031 Move X8, [X8+16]
	032 Move [X19+88], X8
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call Object..ctor, X0
	038 Return 

Method: System.Void .ctor(System.Byte[] data)

Disassembly:
	0x0326BDC8 ADRP X8, 0xEB8000
	0x0326BDCC LDR X8, [X8 + 0x9D8]
	0x0326BDD0 MOV X0, X20
	0x0326BDD4 MOV X2, X31
	0x0326BDD8 LDR X1, [X8]
	0x0326BDDC BL 0x32338A8
	0x0326BDE0 LDR X1, [X22]
	0x0326BDE4 MOV X0, X20
	0x0326BDE8 MOV X2, X31
	0x0326BDEC BL 0x32333E0
	0x0326BDF0 MOV X0, X19
	0x0326BDF4 BL 0x326BF08
	0x0326BDF8 BL 0x326BFA4
	0x0326BDFC MOV X1, X0
	0x0326BE00 MOV X0, X20
	0x0326BE04 MOV X2, X31
	0x0326BE08 BL 0x32338A8
	0x0326BE0C MOV X0, X20
	0x0326BE10 MOV X1, X31
	0x0326BE14 BL 0x3233888
	0x0326BE18 ADRP X8, 0xEB8000
	0x0326BE1C LDR X8, [X8 + 0x9C8]
	0x0326BE20 MOV X0, X20
	0x0326BE24 MOV X2, X31
	0x0326BE28 LDR X1, [X8]
	0x0326BE2C BL 0x32338A8
	0x0326BE30 LDR X1, [X22]
	0x0326BE34 MOV X0, X20
	0x0326BE38 MOV X2, X31
	0x0326BE3C BL 0x32333E0
	0x0326BE40 MOV X0, X19
	0x0326BE44 BL 0x326C0EC
	0x0326BE48 BL 0x326BFA4
	0x0326BE4C MOV X1, X0
	0x0326BE50 MOV X0, X20
	0x0326BE54 MOV X2, X31
	0x0326BE58 BL 0x32338A8
	0x0326BE5C MOV X0, X20
	0x0326BE60 MOV X1, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1172000
	007 Move X21, 0xE8A000
	008 Move W8, [X22+1410]
	009 Move X21, [X21+2544]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xE8A000
	017 Move X0, [X0+2544]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1410], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X21]
	027 Move X8, [X0+184]
	028 Move X1, X31
	029 Move X8, [X8+16]
	030 Move [X19+80], X8
	031 Move X8, [X0+184]
	032 Move X0, X19
	033 Move X8, [X8+16]
	034 Move [X19+88], X8
	035 Call Object..ctor, X0
	036 Compare X20, 0
	037 JumpIfEqual {44}
	038 Move X8, [X20+24]
	039 Compare X8, 0
	040 JumpIfEqual {44}
	041 Move X0, X20
	042 Call X509Helper.Import, X0
	043 Move [X19+16], X0
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+48]
	049 Return 

Method: System.Void .ctor(System.Security.Cryptography.X509Certificates.X509CertificateImpl impl)

Disassembly:
	0x0326BF10 ADRP X20, 0x1171000
	0x0326BF14 ADRP X21, 0xE89000
	0x0326BF18 LDRB W8, [X20 + 0x58A]
	0x0326BF1C LDR X21, [X21 + 0x9F0]
	0x0326BF20 MOV X19, X0
	0x0326BF24 TBNZ X8, 0x0, 0x326BF3C
	0x0326BF28 ADRP X0, 0xE89000
	0x0326BF2C LDR X0, [X0 + 0x9F0]
	0x0326BF30 BL 0x1C16CF4
	0x0326BF34 MOVZ W8, 0x1
	0x0326BF38 STRB W8, [X20 + 0x58A]
	0x0326BF3C LDR X0, [X19 + 0x10]
	0x0326BF40 BL 0x326C1D8
	0x0326BF44 LDR X0, [X21]
	0x0326BF48 LDR X20, [X19 + 0x50]
	0x0326BF4C LDR W8, [X0 + 0xE0]
	0x0326BF50 CBNZ W8, 0x326BF5C
	0x0326BF54 BL 0x1C16DFC
	0x0326BF58 LDR X0, [X21]
	0x0326BF5C LDR X8, [X0 + 0xB8]
	0x0326BF60 MOV X0, X20
	0x0326BF64 MOV X2, X31
	0x0326BF68 LDR X1, [X8 + 0x10]
	0x0326BF6C BL 0x3363078
	0x0326BF70 TBZ X0, 0x0, 0x326BF90
	0x0326BF74 LDR X0, [X19 + 0x10]
	0x0326BF78 CBZ X0, 0x326BFA0
	0x0326BF7C LDR X8, [X0]
	0x0326BF80 LDP X9, X1, [X8 + 0x1E8]
	0x0326BF84 BLR X9
	0x0326BF88 MOV X20, X0
	0x0326BF8C STR X0, [X19 + 0x50]
	0x0326BF90 MOV X0, X20
	0x0326BF94 LDP X20, X19, [X31 + 0x10]
	0x0326BF98 LDP X30, X21, [X31], #0x20
	0x0326BF9C RET
	0x0326BFA0 BL 0x1C16F20
	0x0326BFA4 STR X30, [X31 - 0x40]!
	0x0326BFA8 STP X24, X23, [X31 + 0x10]
	0x0326BFAC STP X22, X21, [X31 + 0x20]
	0x0326BFB0 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1172000
	007 Move X21, 0xE8A000
	008 Move W8, [X22+1411]
	009 Move X21, [X21+2544]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xE8A000
	017 Move X0, [X0+2544]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1411], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X21]
	027 Move X8, [X0+184]
	028 Move X1, X31
	029 Move X8, [X8+16]
	030 Move [X19+80], X8
	031 Move X8, [X0+184]
	032 Move X0, X19
	033 Move X8, [X8+16]
	034 Move [X19+88], X8
	035 Call Object..ctor, X0
	036 Compare X20, 0
	037 JumpIfEqual {43}
	038 Move X8, [X20]
	039 Move X0, X20
	040 Move X9, [X8+408]
	041 Move X1, [X8+416]
	042 NotImplemented "Instruction BLR not yet implemented."
	043 Move X0, X31
	044 Move [X19+16], X0
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X22, [X31+16]
	048 Move X21, [X31+24]
	049 Move X30, [X31+48]
	050 Return 

Method: System.Void .ctor(System.String fileName)

Disassembly:
	0x0326BFC8 TBNZ X8, 0x0, 0x326BFEC
	0x0326BFCC ADRP X0, 0xE8A000
	0x0326BFD0 LDR X0, [X0 + 0xC48]

ISIL:
	001 Move X2, X31
	002 Move W3, W31

Method: System.Void .ctor(System.String fileName, System.String password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags)

Disassembly:
	0x0326BFD4 BL 0x1C16CF4
	0x0326BFD8 ADRP X0, 0xE89000
	0x0326BFDC LDR X0, [X0 + 0x9F0]
	0x0326BFE0 BL 0x1C16CF4
	0x0326BFE4 MOVZ W8, 0x1
	0x0326BFE8 STRB W8, [X19 + 0x58B]
	0x0326BFEC LDR X0, [X23]
	0x0326BFF0 LDR W8, [X0 + 0xE0]
	0x0326BFF4 CBNZ W8, 0x326BFFC
	0x0326BFF8 BL 0x1C16DFC
	0x0326BFFC MOV X0, X31
	0x0326C000 BL 0x33387A0
	0x0326C004 CBZ X0, 0x326C0E8
	0x0326C008 LDR X8, [X0]
	0x0326C00C MOV X19, X0
	0x0326C010 LDR X9, [X8 + 0x238]
	0x0326C014 LDR X1, [X8 + 0x240]
	0x0326C018 BLR X9
	0x0326C01C CBZ X0, 0x326C0E8
	0x0326C020 ADRP X24, 0xE88000
	0x0326C024 LDR X24, [X24 + 0x9F0]
	0x0326C028 LDR X20, [X0 + 0x78]
	0x0326C02C LDR X8, [X24]
	0x0326C030 LDR W9, [X8 + 0xE0]
	0x0326C034 CBNZ W9, 0x326C040
	0x0326C038 MOV X0, X8
	0x0326C03C BL 0x1C16DFC
	0x0326C040 ADD X0, X31, 0x8
	0x0326C044 MOV X1, X31
	0x0326C048 BL 0x3361868
	0x0326C04C MOV W21, W0
	0x0326C050 ADD X0, X31, 0x8
	0x0326C054 MOV X1, X31
	0x0326C058 BL 0x336152C
	0x0326C05C MOV W22, W0
	0x0326C060 ADD X0, X31, 0x8
	0x0326C064 MOV X1, X31
	0x0326C068 BL 0x3361168
	0x0326C06C CBZ X20, 0x326C0E8
	0x0326C070 LDR X8, [X20]
	0x0326C074 MOV W3, W0
	0x0326C078 MOV X0, X20
	0x0326C07C MOV W1, W21
	0x0326C080 LDR X9, [X8 + 0x2D8]
	0x0326C084 LDR X5, [X8 + 0x2E0]
	0x0326C088 MOV W2, W22
	0x0326C08C MOV W4, W31
	0x0326C090 BLR X9
	0x0326C094 TBNZ X0, 0x0, 0x326C0B4
	0x0326C098 LDR X0, [X23]
	0x0326C09C LDR W8, [X0 + 0xE0]
	0x0326C0A0 CBNZ W8, 0x326C0A8
	0x0326C0A4 BL 0x1C16DFC
	0x0326C0A8 MOV X0, X31
	0x0326C0AC BL 0x3338524
	0x0326C0B0 MOV X19, X0
	0x0326C0B4 LDR X0, [X24]
	0x0326C0B8 LDR W8, [X0 + 0xE0]
	0x0326C0BC CBNZ W8, 0x326C0C4
	0x0326C0C0 BL 0x1C16DFC
	0x0326C0C4 ADD X0, X31, 0x8
	0x0326C0C8 MOV X1, X19
	0x0326C0CC MOV X2, X31
	0x0326C0D0 BL 0x3362314
	0x0326C0D4 LDP X20, X19, [X31 + 0x30]
	0x0326C0D8 LDP X22, X21, [X31 + 0x20]
	0x0326C0DC LDP X24, X23, [X31 + 0x10]
	0x0326C0E0 LDR X30, [X31], #0x40
	0x0326C0E4 RET
	0x0326C0E8 BL 0x1C16F20
	0x0326C0EC STP X30, X21, [X31 - 0x20]!
	0x0326C0F0 STP X20, X19, [X31 + 0x10]
	0x0326C0F4 ADRP X20, 0x1170000
	0x0326C0F8 ADRP X21, 0xE88000
	0x0326C0FC LDRB W8, [X20 + 0x589]
	0x0326C100 LDR X21, [X21 + 0x9F0]
	0x0326C104 MOV X19, X0
	0x0326C108 TBNZ X8, 0x0, 0x326C120
	0x0326C10C ADRP X0, 0xE88000
	0x0326C110 LDR X0, [X0 + 0x9F0]
	0x0326C114 BL 0x1C16CF4
	0x0326C118 MOVZ W8, 0x1
	0x0326C11C STRB W8, [X20 + 0x589]
	0x0326C120 LDR X0, [X19 + 0x10]
	0x0326C124 BL 0x326C1D8
	0x0326C128 LDR X0, [X21]
	0x0326C12C LDR X20, [X19 + 0x58]
	0x0326C130 LDR W8, [X0 + 0xE0]
	0x0326C134 CBNZ W8, 0x326C140
	0x0326C138 BL 0x1C16DFC
	0x0326C13C LDR X0, [X21]
	0x0326C140 LDR X8, [X0 + 0xB8]
	0x0326C144 MOV X0, X20
	0x0326C148 MOV X2, X31
	0x0326C14C LDR X1, [X8 + 0x10]
	0x0326C150 BL 0x3363078
	0x0326C154 TBZ X0, 0x0, 0x326C174
	0x0326C158 LDR X0, [X19 + 0x10]
	0x0326C15C CBZ X0, 0x326C184
	0x0326C160 LDR X8, [X0]
	0x0326C164 LDP X9, X1, [X8 + 0x1D8]
	0x0326C168 BLR X9
	0x0326C16C MOV X20, X0
	0x0326C170 STR X0, [X19 + 0x58]
	0x0326C174 MOV X0, X20
	0x0326C178 LDP X20, X19, [X31 + 0x10]
	0x0326C17C LDP X30, X21, [X31], #0x20
	0x0326C180 RET
	0x0326C184 BL 0x1C16F20
	0x0326C188 STR X30, [X31 - 0x20]!
	0x0326C18C STP X20, X19, [X31 + 0x10]
	0x0326C190 LDR X8, [X0]
	0x0326C194 MOV X20, X1
	0x0326C198 MOV X19, X0
	0x0326C19C LDP X9, X8, [X8 + 0x1A8]
	0x0326C1A0 MOV X1, X8
	0x0326C1A4 BLR X9
	0x0326C1A8 STR X20, [X19 + 0x10]
	0x0326C1AC LDP X20, X19, [X31 + 0x10]
	0x0326C1B0 LDR X30, [X31], #0x20
	0x0326C1B4 RET
	0x0326C1B8 LDR X0, [X0 + 0x10]
	0x0326C1BC RET
	0x0326C1C0 LDR X0, [X0 + 0x10]
	0x0326C1C4 CBZ X0, 0x326C1D4
	0x0326C1C8 LDR X8, [X0]
	0x0326C1CC LDP X2, X1, [X8 + 0x188]
	0x0326C1D0 BR X2
	0x0326C1D4 RET
	0x0326C1D8 STP X30, X19, [X31 - 0x10]!
	0x0326C1DC CBZ X0, 0x326C1F8
	0x0326C1E0 LDR X8, [X0]
	0x0326C1E4 LDP X9, X1, [X8 + 0x188]
	0x0326C1E8 BLR X9
	0x0326C1EC TBZ X0, 0x0, 0x326C1F8
	0x0326C1F0 LDP X30, X19, [X31], #0x10
	0x0326C1F4 RET
	0x0326C1F8 BL 0x326C254
	0x0326C1FC MOV X19, X0
	0x0326C200 ADRP X0, 0xEB7000
	0x0326C204 LDR X0, [X0 + 0x9E0]
	0x0326C208 BL 0x1C16D08
	0x0326C20C MOV X1, X0
	0x0326C210 MOV X0, X19
	0x0326C214 BL 0x1C16DEC
	0x0326C218 STP X30, X19, [X31 - 0x10]!
	0x0326C21C LDR X8, [X0]
	0x0326C220 LDP X9, X1, [X8 + 0x188]
	0x0326C224 BLR X9
	0x0326C228 TBZ X0, 0x0, 0x326C234
	0x0326C22C LDP X30, X19, [X31], #0x10

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x1172000
	009 Move X23, 0xE8A000
	010 Move W8, [X24+1412]
	011 Move X23, [X23+2544]
	012 Move W20, W3
	013 Move X22, X2
	014 Move X19, X1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xE89000
	021 Move X0, [X0+2544]
	022 Call 0x1C17CF4
	023 Move X0, 0xE88000
	024 Move X0, [X0+3584]
	025 Call 0x1C17CF4
	026 Move X0, 0xEB8000
	027 Move X0, [X0+2368]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X24+1412], W8
	031 Move X0, [X23]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1C17DFC
	036 Move X0, [X23]
	037 Move X8, [X0+184]
	038 Move X1, X31
	039 Move X8, [X8+16]
	040 Move [X21+80], X8
	041 Move X8, [X0+184]
	042 Move X0, X21
	043 Move X8, [X8+16]
	044 Move [X21+88], X8
	045 Call Object..ctor, X0
	046 Compare X19, 0
	047 JumpIfEqual {104}
	048 Move X23, 0xEB8000
	049 Move X24, 0xE88000
	050 Move X23, [X23+2368]
	051 Move X24, [X24+3584]
	052 Move W0, W20
	053 Call X509Certificate.ValidateKeyStorageFlags, X0
	054 Move X0, X19
	055 Move X1, X31
	056 Call File.ReadAllBytes, X0
	057 Move X8, [X23]
	058 Move X23, X0
	059 Move X0, X8
	060 Call 0x1C17F10
	061 Move X1, X22
	062 Move X2, X31
	063 Move X19, X0
	064 Call SafePasswordHandle..ctor, X0, X1
	065 Move X0, X23
	066 Move X1, X19
	067 Move W2, W20
	068 Call X509Helper.Import, X0, X1, X2
	069 Move X20, X31
	070 Move [X21+16], X0
	071 Compare X19, 0
	072 JumpIfEqual {94}
	073 Move X8, [X19]
	074 Move X1, [X24]
	075 NotImplemented "Instruction LDRH not yet implemented."
	076 Compare X9, 0
	077 JumpIfEqual {84}
	078 Move X10, [X8+176]
	079 Add X10, X10, 8
	080 NotImplemented "Instruction LDUR not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Subtract X9, X9, 1
	083 Add X10, X10, 16
	084 Move X0, X19
	085 Move W2, W31
	086 Call 0x1C5D788
	087 NotImplemented "Instruction LDRSW not yet implemented."
	088 Add X8, X8, X9
	089 Add X0, X8, 312
	090 Move X8, [X0]
	091 Move X1, [X0+8]
	092 Move X0, X19
	093 NotImplemented "Instruction BLR not yet implemented."
	094 Compare X20, 0
	095 JumpIfNotEqual {122}
	096 Move X20, [X31+48]
	097 Move X19, [X31+56]
	098 Move X22, [X31+32]
	099 Move X21, [X31+40]
	100 Move X24, [X31+16]
	101 Move X23, [X31+24]
	102 Move X30, [X31+64]
	103 Return 
	104 Move X0, 0xE8D000
	105 Move X0, [X0+1320]
	106 Call 0x1C17D08
	107 Call 0x1C17F10
	108 Move X19, X0
	109 Move X0, 0xEB8000
	110 Move X0, [X0+2376]
	111 Call 0x1C17D08
	112 Move X1, X0
	113 Move X0, X19
	114 Move X2, X31
	115 Call ArgumentNullException..ctor, X0, X1
	116 Move X0, 0xEB8000
	117 Move X0, [X0+2384]
	118 Call 0x1C17D08
	119 Move X1, X0
	120 Move X0, X19
	121 Call 0x1C17DEC
	122 Move X0, X20
	123 Call 0x1C17F18
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move X21, X0
	126 Move X0, X21
	127 Call 0x3EB2AD0
	128 Move X20, [X0]
	129 Call 0x3EB2AE0
	130 Move X20, X31
	131 Move X21, X0
	132 Compare X19, 0
	133 JumpIfEqual {155}
	134 Move X8, [X19]
	135 Move X1, [X24]
	136 NotImplemented "Instruction LDRH not yet implemented."
	137 Compare X9, 0
	138 JumpIfEqual {145}
	139 Move X10, [X8+176]
	140 Add X10, X10, 8
	141 NotImplemented "Instruction LDUR not yet implemented."
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Subtract X9, X9, 1
	144 Add X10, X10, 16
	145 Move X0, X19
	146 Move W2, W31
	147 Call 0x1C5D788
	148 NotImplemented "Instruction LDRSW not yet implemented."
	149 Add X8, X8, X9
	150 Add X0, X8, 312
	151 Move X8, [X0]
	152 Move X1, [X0+8]
	153 Move X0, X19
	154 NotImplemented "Instruction BLR not yet implemented."
	155 Compare X20, 0
	156 JumpIfNotEqual {159}
	157 Move X0, X21
	158 Call 0x1D2D690
	159 Move X0, X20
	160 Call 0x1C17F18
	161 Call 0x1991590

Method: System.Void .ctor(System.Security.Cryptography.X509Certificates.X509Certificate cert)

Disassembly:
	0x0326C404 LDR X8, [X20]
	0x0326C408 MOV X21, X0
	0x0326C40C MOV X0, X20
	0x0326C410 LDP X9, X1, [X8 + 0x1A8]
	0x0326C414 BLR X9
	0x0326C418 CBZ X21, 0x326C4E4
	0x0326C41C MOV X1, X0
	0x0326C420 MOV X0, X21
	0x0326C424 MOV X2, X31
	0x0326C428 BL 0x322693C
	0x0326C42C TBZ X0, 0x0, 0x326C4C4
	0x0326C430 LDR X8, [X19]
	0x0326C434 MOV X0, X19
	0x0326C438 LDR X9, [X8 + 0x238]
	0x0326C43C LDR X1, [X8 + 0x240]
	0x0326C440 BLR X9
	0x0326C444 LDR X8, [X20]
	0x0326C448 MOV X19, X0
	0x0326C44C MOV X0, X20
	0x0326C450 LDR X9, [X8 + 0x238]
	0x0326C454 LDR X1, [X8 + 0x240]
	0x0326C458 BLR X9
	0x0326C45C CBZ X19, 0x326C4E4
	0x0326C460 CBZ X0, 0x326C4E4
	0x0326C464 LDR W8, [X19 + 0x18]
	0x0326C468 LDR W9, [X0 + 0x18]
	0x0326C46C CMP W8, W9
	0x0326C470 B.NE 0x326C4C4
	0x0326C474 CMP W8, 0x1
	0x0326C478 B.LT 0x326C4D8
	0x0326C47C MOV W10, W31
	0x0326C480 SUB W9, W31, W8
	0x0326C484 ADDS W31, W9, W10
	0x0326C488 B.EQ 0x326C4E0
	0x0326C48C SXTW X10, W10
	0x0326C490 ADD X8, X19, X10
	0x0326C494 ADD X12, X0, X10
	0x0326C498 LDRB W11, [X8 + 0x20]
	0x0326C49C LDRB W12, [X12 + 0x20]
	0x0326C4A0 ADD W13, W9, W10
	0x0326C4A4 CMP W11, W12
	0x0326C4A8 CSET W8, EQ
	0x0326C4AC ADDS W31, W13, 0x1
	0x0326C4B0 B.EQ 0x326C4C8
	0x0326C4B4 CMP W11, W12
	0x0326C4B8 ADD W10, W10, 0x1
	0x0326C4BC B.EQ 0x326C484
	0x0326C4C0 B 0x326C4C8
	0x0326C4C4 MOV W8, W31
	0x0326C4C8 LDP X20, X19, [X31 + 0x10]
	0x0326C4CC MOV W0, W8
	0x0326C4D0 LDP X30, X21, [X31], #0x20
	0x0326C4D4 RET
	0x0326C4D8 MOVZ W8, 0x1
	0x0326C4DC B 0x326C4C8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1171000
	007 Move X21, 0xE89000
	008 Move W8, [X22+1413]
	009 Move X21, [X21+2544]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xE89000
	017 Move X0, [X0+2544]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1413], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X21]
	027 Move X8, [X0+184]
	028 Move X1, X31
	029 Move X8, [X8+16]
	030 Move [X19+80], X8
	031 Move X8, [X0+184]
	032 Move X0, X19
	033 Move X8, [X8+16]
	034 Move [X19+88], X8
	035 Call Object..ctor, X0
	036 Compare X20, 0
	037 JumpIfEqual {47}
	038 Move X0, X20
	039 Call X509Helper.InitFromCertificate, X0
	040 Move [X19+16], X0
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Return 
	047 Move X0, 0xE8D000
	048 Move X0, [X0+1320]
	049 Call 0x1C17D08
	050 Call 0x1C17F10
	051 Move X19, X0
	052 Move X0, 0xEB8000
	053 Move X0, [X0+2432]
	054 Call 0x1C17D08
	055 Move X1, X0
	056 Move X0, X19
	057 Move X2, X31
	058 Call ArgumentNullException..ctor, X0, X1
	059 Move X0, 0xEB8000
	060 Move X0, [X0+2440]
	061 Call 0x1C17D08
	062 Move X1, X0
	063 Move X0, X19
	064 Call 0x1C17DEC

Method: System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)

Disassembly:
	0x0326C590 MOV X1, X31
	0x0326C594 B 0x33BDD8C
	0x0326C598 STR X30, [X31 - 0x20]!
	0x0326C59C STP X20, X19, [X31 + 0x10]
	0x0326C5A0 ADRP X19, 0x1170000
	0x0326C5A4 ADRP X20, 0xEB5000
	0x0326C5A8 LDRB W8, [X19 + 0x58E]
	0x0326C5AC LDR X20, [X20 + 0x860]
	0x0326C5B0 TBNZ X8, 0x0, 0x326C5D4
	0x0326C5B4 ADRP X0, 0xEB5000
	0x0326C5B8 LDR X0, [X0 + 0x860]
	0x0326C5BC BL 0x1C16CF4
	0x0326C5C0 ADRP X0, 0xEB5000
	0x0326C5C4 LDR X0, [X0 + 0x880]
	0x0326C5C8 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Call X509Certificate..ctor, X0
	004 Move X0, 0xEB3000
	005 Move X0, [X0+3152]
	006 Call 0x1C17D08
	007 Call 0x1C17F10
	008 Move X1, X31
	009 Move X19, X0
	010 Call PlatformNotSupportedException..ctor, X0
	011 Move X0, 0xEB8000
	012 Move X0, [X0+2448]
	013 Call 0x1C17D08
	014 Move X1, X0
	015 Move X0, X19
	016 Call 0x1C17DEC

Method: System.Void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)

Disassembly:
	0x0326C5CC MOVZ W8, 0x1
	0x0326C5D0 STRB W8, [X19 + 0x58E]
	0x0326C5D4 LDR X0, [X20]
	0x0326C5D8 LDR W8, [X0 + 0xE0]
	0x0326C5DC CBNZ W8, 0x326C5E4
	0x0326C5E0 BL 0x1C16DFC
	0x0326C5E4 MOV X0, X31
	0x0326C5E8 BL 0x320A368
	0x0326C5EC CBZ X0, 0x326C65C
	0x0326C5F0 ADRP X10, 0xEB5000
	0x0326C5F4 LDR X8, [X0]
	0x0326C5F8 LDR X10, [X10 + 0x880]
	0x0326C5FC MOV X19, X0
	0x0326C600 LDRH W9, [X8 + 0x12E]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xEB3000
	004 Move X0, [X0+3152]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X1, X31
	008 Move X19, X0
	009 Call PlatformNotSupportedException..ctor, X0
	010 Move X0, 0xEB8000
	011 Move X0, [X0+2456]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1C17DEC

Method: System.Void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object sender)

Disassembly:
	0x0326C604 LDR X1, [X10]
	0x0326C608 CBZ X9, 0x326C62C
	0x0326C60C LDR X10, [X8 + 0xB0]
	0x0326C610 ADD X10, X10, 0x8
	0x0326C614 LDUR X11, [X10 - 0x8]
	0x0326C618 CMP X11, X1
	0x0326C61C B.EQ 0x326C63C
	0x0326C620 SUBS X9, X9, 0x1
	0x0326C624 ADD X10, X10, 0x10
	0x0326C628 B.NE 0x326C614
	0x0326C62C MOV X0, X19
	0x0326C630 MOV W2, W31
	0x0326C634 BL 0x1C5C788
	0x0326C638 B 0x326C648

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xEB3000
	004 Move X0, [X0+3152]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X1, X31
	008 Move X19, X0
	009 Call PlatformNotSupportedException..ctor, X0
	010 Move X0, 0xEB8000
	011 Move X0, [X0+2464]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1C17DEC

Method: System.String get_Issuer()

Disassembly:
	0x0326C63C LDRSW X9, [X10]
	0x0326C640 ADD X8, X8, X9, 0x4, LSL
	0x0326C644 ADD X0, X8, 0x138
	0x0326C648 LDP X2, X1, [X0]
	0x0326C64C MOV X0, X19
	0x0326C650 LDP X20, X19, [X31 + 0x10]
	0x0326C654 LDR X30, [X31], #0x20
	0x0326C658 BR X2
	0x0326C65C BL 0x1C16F20
	0x0326C660 STP X30, X21, [X31 - 0x20]!
	0x0326C664 STP X20, X19, [X31 + 0x10]
	0x0326C668 MOV X21, X1
	0x0326C66C MOV X1, X31
	0x0326C670 MOV X19, X2
	0x0326C674 MOV X20, X0
	0x0326C678 BL 0x326DB7C
	0x0326C67C CBZ X21, 0x326C698
	0x0326C680 CBZ X19, 0x326C6B8
	0x0326C684 STP X21, X19, [X20 + 0x78]
	0x0326C688 MOV X0, X20
	0x0326C68C LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+16]
	006 Call X509Helper.ThrowIfContextInvalid, X0
	007 Move X20, [X19+40]
	008 Call 0x1C17D44
	009 Compare X20, 0
	010 JumpIfNotEqual {21}
	011 Move X0, [X19+16]
	012 Compare X0, 0
	013 JumpIfEqual {26}
	014 Move X8, [X0]
	015 Move X9, [X8+424]
	016 Move X1, [X8+432]
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move X20, X0
	019 Call 0x1C17D44
	020 Move [X19+40], X20
	021 Move X0, X20
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Return X0
	026 Call 0x1C17F20

Method: System.String get_Subject()

Disassembly:
	0x0326C698 ADRP X0, 0xE8C000
	0x0326C69C LDR X0, [X0 + 0x528]
	0x0326C6A0 BL 0x1C16D08
	0x0326C6A4 BL 0x1C16F10
	0x0326C6A8 MOV X19, X0
	0x0326C6AC ADRP X0, 0xE8F000
	0x0326C6B0 LDR X0, [X0 + 0x588]
	0x0326C6B4 B 0x326C6D4
	0x0326C6B8 ADRP X0, 0xE8C000
	0x0326C6BC LDR X0, [X0 + 0x528]
	0x0326C6C0 BL 0x1C16D08
	0x0326C6C4 BL 0x1C16F10
	0x0326C6C8 MOV X19, X0
	0x0326C6CC ADRP X0, 0xE8F000
	0x0326C6D0 LDR X0, [X0 + 0x5E8]
	0x0326C6D4 BL 0x1C16D08
	0x0326C6D8 MOV X1, X0
	0x0326C6DC MOV X0, X19
	0x0326C6E0 MOV X2, X31
	0x0326C6E4 BL 0x330E100
	0x0326C6E8 ADRP X0, 0xEB7000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+16]
	006 Call X509Helper.ThrowIfContextInvalid, X0
	007 Move X20, [X19+48]
	008 Call 0x1C17D44
	009 Compare X20, 0
	010 JumpIfNotEqual {21}
	011 Move X0, [X19+16]
	012 Compare X0, 0
	013 JumpIfEqual {26}
	014 Move X8, [X0]
	015 Move X9, [X8+440]
	016 Move X1, [X8+448]
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move X20, X0
	019 Call 0x1C17D44
	020 Move [X19+48], X20
	021 Move X0, X20
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Return X0
	026 Call 0x1C17F20

Method: System.Void Dispose()

Disassembly:
	0x0326C6EC LDR X0, [X0 + 0xA00]
	0x0326C6F0 BL 0x1C16D08
	0x0326C6F4 MOV X1, X0
	0x0326C6F8 MOV X0, X19

ISIL:
	001 Move X8, [X0]
	002 Move W1, 1
	003 Move X3, [X8+440]
	004 Move X2, [X8+448]
	005 CallNoReturn X3

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x0326C6FC BL 0x1C16DEC
	0x0326C700 SUB X31, X31, 0x40
	0x0326C704 STP X30, X23, [X31 + 0x10]
	0x0326C708 STP X22, X21, [X31 + 0x20]
	0x0326C70C STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move TEMP, X1
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfNotEqual {9}
	005 Move X8, [X0]
	006 Move X2, [X8+424]
	007 Move X1, [X8+432]
	008 CallNoReturn X2
	009 Return 

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x0326C710 ADRP X20, 0x1170000
	0x0326C714 LDRB W8, [X20 + 0x595]
	0x0326C718 MOV X19, X0
	0x0326C71C TBNZ X8, 0x0, 0x326C74C
	0x0326C720 ADRP X0, 0xEB7000
	0x0326C724 LDR X0, [X0 + 0xA08]
	0x0326C728 BL 0x1C16CF4
	0x0326C72C ADRP X0, 0xEB7000
	0x0326C730 LDR X0, [X0 + 0xA10]
	0x0326C734 BL 0x1C16CF4
	0x0326C738 ADRP X0, 0xEB7000
	0x0326C73C LDR X0, [X0 + 0xA18]
	0x0326C740 BL 0x1C16CF4
	0x0326C744 MOVZ W8, 0x1
	0x0326C748 STRB W8, [X20 + 0x595]
	0x0326C74C LDR X20, [X19 + 0x78]
	0x0326C750 CBZ X20, 0x326C7C0
	0x0326C754 ADRP X8, 0xEB7000
	0x0326C758 LDR X8, [X8 + 0xA08]
	0x0326C75C ADRP X22, 0xEB7000
	0x0326C760 ADRP X23, 0xEB7000
	0x0326C764 LDR X21, [X19 + 0x28]
	0x0326C768 LDR X0, [X8]
	0x0326C76C LDR X22, [X22 + 0xA18]
	0x0326C770 LDR X23, [X23 + 0xA10]
	0x0326C774 BL 0x1C16F10
	0x0326C778 LDR X4, [X23]
	0x0326C77C LDR X3, [X22]
	0x0326C780 MOV X1, X21
	0x0326C784 MOV X2, X20
	0x0326C788 MOV X5, X4
	0x0326C78C MOV X6, X19
	0x0326C790 MOV X7, X31
	0x0326C794 MOV X22, X0
	0x0326C798 STR X31, [X31]
	0x0326C79C BL 0x326D3C8
	0x0326C7A0 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1171000
	006 Move W8, [X21+1414]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xEB8000
	014 Move X0, [X0+2472]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1414], W8
	018 Compare X19, 0
	019 JumpIfEqual {31}
	020 Move X8, 0xEB8000
	021 Move X8, [X8+2472]
	022 Move X9, [X19]
	023 Move X8, [X8]
	024 Move W11, [X9+304]
	025 Move W10, [X8+304]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X9, [X9+200]
	028 Add X9, X9, X10
	029 NotImplemented "Instruction LDUR not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move W0, W31
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return X0
	037 Move X8, [X20]
	038 Move X0, X20
	039 Move X1, X19
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X3, [X8+456]
	043 Move X2, [X8+464]
	044 Move X30, [X31+32]
	045 Move X21, [X31+40]
	046 CallNoReturn X3

Method: System.Boolean Equals(System.Security.Cryptography.X509Certificates.X509Certificate other)

Disassembly:
	0x0326C7A4 MOV X1, X22
	0x0326C7A8 LDP X20, X19, [X31 + 0x30]
	0x0326C7AC LDP X22, X21, [X31 + 0x20]
	0x0326C7B0 LDP X30, X23, [X31 + 0x10]
	0x0326C7B4 MOV X2, X31
	0x0326C7B8 ADD X31, X31, 0x40
	0x0326C7BC B 0x326F5C4
	0x0326C7C0 LDP X20, X19, [X31 + 0x30]
	0x0326C7C4 LDP X22, X21, [X31 + 0x20]
	0x0326C7C8 LDP X30, X23, [X31 + 0x10]
	0x0326C7CC ADD X31, X31, 0x40
	0x0326C7D0 RET
	0x0326C7D4 MOV X1, X31
	0x0326C7D8 B 0x326DB7C
	0x0326C7DC STR X30, [X31 - 0x20]!
	0x0326C7E0 STP X20, X19, [X31 + 0x10]
	0x0326C7E4 MOV X2, X31
	0x0326C7E8 MOV X20, X1
	0x0326C7EC MOV X19, X0
	0x0326C7F0 BL 0x326E750
	0x0326C7F4 CBZ X20, 0x326C80C
	0x0326C7F8 LDUR V0, [X20 + 0x78]
	0x0326C7FC STUR V0, [X19 + 0x78]
	0x0326C800 LDP X20, X19, [X31 + 0x10]
	0x0326C804 LDR X30, [X31], #0x20
	0x0326C808 RET
	0x0326C80C BL 0x1C16F20
	0x0326C810 STP X30, X21, [X31 - 0x20]!
	0x0326C814 STP X20, X19, [X31 + 0x10]
	0x0326C818 ADRP X20, 0x1170000
	0x0326C81C ADRP X21, 0xEB7000
	0x0326C820 LDRB W8, [X20 + 0x593]
	0x0326C824 LDR X21, [X21 + 0xA20]
	0x0326C828 MOV X19, X0
	0x0326C82C TBNZ X8, 0x0, 0x326C844
	0x0326C830 ADRP X0, 0xEB7000
	0x0326C834 LDR X0, [X0 + 0xA20]
	0x0326C838 BL 0x1C16CF4
	0x0326C83C MOVZ W8, 0x1
	0x0326C840 STRB W8, [X20 + 0x593]
	0x0326C844 LDR X0, [X21]
	0x0326C848 BL 0x1C16F10
	0x0326C84C MOV X1, X19
	0x0326C850 MOV X20, X0
	0x0326C854 BL 0x326C7DC
	0x0326C858 MOV X0, X20
	0x0326C85C LDP X20, X19, [X31 + 0x10]
	0x0326C860 LDP X30, X21, [X31], #0x20
	0x0326C864 RET
	0x0326C868 MOV X1, X31
	0x0326C86C B 0x326F39C
	0x0326C870 LDR X0, [X0 + 0x78]
	0x0326C874 RET
	0x0326C878 LDR X0, [X0 + 0x80]
	0x0326C87C RET
	0x0326C880 STR X30, [X31 - 0x20]!
	0x0326C884 STP X20, X19, [X31 + 0x10]
	0x0326C888 ADRP X20, 0x1170000
	0x0326C88C LDRB W8, [X20 + 0x594]
	0x0326C890 MOV X19, X0
	0x0326C894 TBNZ X8, 0x0, 0x326C8AC
	0x0326C898 ADRP X0, 0xE87000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X1, 0
	006 JumpIfEqual {54}
	007 Move X8, [X0+16]
	008 Move X20, X1
	009 Move X19, X0
	010 Compare X8, 0
	011 JumpIfEqual {55}
	012 Move X0, X19
	013 Call X509Certificate.get_Issuer, X0
	014 Move X21, X0
	015 Move X0, X20
	016 Call X509Certificate.get_Issuer, X0
	017 Compare X21, 0
	018 JumpIfEqual {66}
	019 Move X1, X0
	020 Move X0, X21
	021 Move X2, X31
	022 Call String.Equals, X0, X1
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {54}
	027 Move X0, X19
	028 Call X509Certificate.GetRawSerialNumber, X0
	029 Move X19, X0
	030 Move X0, X20
	031 Call X509Certificate.GetRawSerialNumber, X0
	032 Compare X19, 0
	033 JumpIfEqual {66}
	034 Compare X0, 0
	035 JumpIfEqual {66}
	036 Move W8, [X19+24]
	037 Move W9, [X0+24]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move W10, W31
	041 Subtract W9, W31, W8
	042 Add W31, W9, W10
	043 Move X10, W10
	044 Add X8, X19, X10
	045 Add X12, X0, X10
	046 Move W11, [X8+32]
	047 Move W12, [X12+32]
	048 Add W13, W9, W10
	049 NotImplemented "Instruction CMP not yet implemented."
	050 NotImplemented "Instruction CSET not yet implemented."
	051 Add W31, W13, 1
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Add W10, W10, 1
	054 Move W8, W31
	055 Move X8, [X20+16]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 NotImplemented "Instruction CSET not yet implemented."
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move W0, W8
	061 Move X30, [X31+32]
	062 Move X21, [X31+40]
	063 Return X0
	064 Move W8, 1
	065 Call 0x1C17F28
	066 Call 0x1C17F20

Method: System.Byte[] GetCertHash()

Disassembly:
	0x0326C8EC STR X31, [X31]
	0x0326C8F0 BL 0x326D3C8
	0x0326C8F4 LDR X30, [X31 + 0x10]
	0x0326C8F8 ADD X31, X31, 0x20
	0x0326C8FC RET
	0x0326C900 STP X30, X23, [X31 - 0x30]!
	0x0326C904 STP X22, X21, [X31 + 0x10]
	0x0326C908 STP X20, X19, [X31 + 0x20]
	0x0326C90C ADRP X22, 0x1170000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+16]
	005 Call X509Helper.ThrowIfContextInvalid, X0
	006 Move X0, X19
	007 Call X509Certificate.GetRawCertHash, X0
	008 Move X1, X31
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Call Helpers.CloneByteArray, X0
	012 Return X0

Method: System.String GetCertHashString()

Disassembly:
	0x0326C95C MOV X0, X20
	0x0326C960 MOV X1, X31
	0x0326C964 BL 0x3271170
	0x0326C968 CBZ X21, 0x326C9F8
	0x0326C96C STR X21, [X20 + 0x28]
	0x0326C970 CBZ X19, 0x326C9E4
	0x0326C974 ADRP X8, 0xE87000
	0x0326C978 LDR X8, [X8 + 0xAC8]
	0x0326C97C LDR W1, [X19 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+16]
	005 Call X509Helper.ThrowIfContextInvalid, X0
	006 Move X0, X19
	007 Call X509Certificate.GetRawCertHash, X0
	008 Move X1, X31
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Call Helpers.ToHexStringUpper, X0
	012 Return X0

Method: System.Byte[] GetRawCertHash()

Disassembly:
	0x0326C910 ADRP X23, 0xEB7000
	0x0326C914 LDRB W8, [X22 + 0x596]
	0x0326C918 LDR X23, [X23 + 0xA28]
	0x0326C91C MOV X19, X2
	0x0326C920 MOV X21, X1
	0x0326C924 MOV X20, X0
	0x0326C928 TBNZ X8, 0x0, 0x326C94C
	0x0326C92C ADRP X0, 0xEB7000
	0x0326C930 LDR X0, [X0 + 0xA28]
	0x0326C934 BL 0x1C16CF4
	0x0326C938 ADRP X0, 0xE87000
	0x0326C93C LDR X0, [X0 + 0xAC8]
	0x0326C940 BL 0x1C16CF4
	0x0326C944 MOVZ W8, 0x1
	0x0326C948 STRB W8, [X22 + 0x596]
	0x0326C94C LDR X0, [X23]
	0x0326C950 LDR W8, [X0 + 0xE0]
	0x0326C954 CBNZ W8, 0x326C95C
	0x0326C958 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, [X0+24]
	005 Move X19, X0
	006 Call 0x1C17D44
	007 Compare X20, 0
	008 JumpIfNotEqual {19}
	009 Move X0, [X19+16]
	010 Compare X0, 0
	011 JumpIfEqual {24}
	012 Move X8, [X0]
	013 Move X9, [X8+504]
	014 Move X1, [X8+512]
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X20, X0
	017 Call 0x1C17D44
	018 Move [X19+24], X20
	019 Move X0, X20
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0
	024 Call 0x1C17F20

Method: System.Byte[] GetRawCertData()

Disassembly:
	0x0326C980 LDR X0, [X8]
	0x0326C984 BL 0x1C16D6C
	0x0326C988 STR X0, [X20 + 0x30]
	0x0326C98C LDR X8, [X19 + 0x18]
	0x0326C990 CMP W8, 0x1
	0x0326C994 B.LT 0x326C9E4
	0x0326C998 AND X8, X8, 0x0
	0x0326C99C CBZ X8, 0x326C9E0
	0x0326C9A0 SXTW X9, W8
	0x0326C9A4 MOVZ W10, 0x4
	0x0326C9A8 CBZ X0, 0x326C9F4
	0x0326C9AC LDR W11, [X0 + 0x18]
	0x0326C9B0 SUB X12, X10, 0x4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+16]
	005 Call X509Helper.ThrowIfContextInvalid, X0
	006 Move X0, [X19+16]
	007 Compare X0, 0
	008 JumpIfEqual {18}
	009 Move X8, [X0]
	010 Move X9, [X8+456]
	011 Move X1, [X8+464]
	012 NotImplemented "Instruction BLR not yet implemented."
	013 Move X1, X31
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Call Helpers.CloneByteArray, X0
	017 Return X0
	018 Call 0x1C17F20

Method: System.Int32 GetHashCode()

Disassembly:
	0x0326C9B4 CMP X12, X11
	0x0326C9B8 B.CS 0x326C9E0
	0x0326C9BC LDR X12, [X19, X10, LSL #3]
	0x0326C9C0 SUB X11, X10, 0x3
	0x0326C9C4 CMP X11, X9
	0x0326C9C8 STR X12, [X0, X10, LSL #3]
	0x0326C9CC B.GE 0x326C9E4
	0x0326C9D0 LDR X0, [X20 + 0x30]
	0x0326C9D4 CMP X11, X8
	0x0326C9D8 ADD X10, X10, 0x1
	0x0326C9DC B.CC 0x326C9A8
	0x0326C9E0 BL 0x1C16F28
	0x0326C9E4 LDP X20, X19, [X31 + 0x20]
	0x0326C9E8 LDP X22, X21, [X31 + 0x10]
	0x0326C9EC LDP X30, X23, [X31], #0x30
	0x0326C9F0 RET
	0x0326C9F4 BL 0x1C16F20
	0x0326C9F8 ADRP X0, 0xE8C000
	0x0326C9FC LDR X0, [X0 + 0x528]
	0x0326CA00 BL 0x1C16D08
	0x0326CA04 BL 0x1C16F10
	0x0326CA08 MOV X19, X0
	0x0326CA0C ADRP X0, 0xEB7000
	0x0326CA10 LDR X0, [X0 + 0xA30]
	0x0326CA14 BL 0x1C16D08
	0x0326CA18 MOV X1, X0
	0x0326CA1C MOV X0, X19
	0x0326CA20 MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {30}
	005 Call X509Certificate.GetRawCertHash, X0
	006 Compare X0, 0
	007 JumpIfEqual {34}
	008 Move W8, [X0+24]
	009 Move X9, X8
	010 ShiftRight X9, 32
	011 And X9, X9, 0x7FFFFFFF
	012 Move X10, W8
	013 NotImplemented "Instruction BIC not yet implemented."
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Move W10, 4
	016 NotImplemented "Instruction CSEL not yet implemented."
	017 Compare X9, 0
	018 JumpIfEqual {30}
	019 Move W11, W31
	020 Add X10, X0, 32
	021 Compare X8, 0
	022 JumpIfEqual {33}
	023 Move W0, [X10+1]
	024 Subtract X9, X9, 1
	025 Subtract X8, X8, 1
	026 NotImplemented "Instruction BFM not yet implemented."
	027 Move W11, W0
	028 Compare X9, 0
	029 JumpIfNotEqual {21}
	030 Move W0, W31
	031 Move X30, [X31+16]
	032 Return X0
	033 Call 0x1C17F28
	034 Call 0x1C17F20

Method: System.String GetKeyAlgorithm()

Disassembly:
	0x0326CA24 BL 0x330E100
	0x0326CA28 ADRP X0, 0xEB7000
	0x0326CA2C LDR X0, [X0 + 0xA38]
	0x0326CA30 BL 0x1C16D08
	0x0326CA34 MOV X1, X0
	0x0326CA38 MOV X0, X19
	0x0326CA3C BL 0x1C16DEC
	0x0326CA40 LDR X0, [X0 + 0x28]
	0x0326CA44 RET
	0x0326CA48 STP X30, X23, [X31 - 0x30]!
	0x0326CA4C STP X22, X21, [X31 + 0x10]
	0x0326CA50 STP X20, X19, [X31 + 0x20]
	0x0326CA54 MOV X21, X1
	0x0326CA58 MOV X1, X31
	0x0326CA5C MOV W19, W3
	0x0326CA60 MOV X20, X2
	0x0326CA64 MOV X22, X0
	0x0326CA68 AND W23, W4, 0x1
	0x0326CA6C BL 0x326DB7C
	0x0326CA70 STR X20, [X22 + 0x80]
	0x0326CA74 STR W19, [X22 + 0x88]
	0x0326CA78 STRB W23, [X22 + 0x8C]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+16]
	006 Call X509Helper.ThrowIfContextInvalid, X0
	007 Move X20, [X19+56]
	008 Call 0x1C17D44
	009 Compare X20, 0
	010 JumpIfNotEqual {21}
	011 Move X0, [X19+16]
	012 Compare X0, 0
	013 JumpIfEqual {26}
	014 Move X8, [X0]
	015 Move X9, [X8+520]
	016 Move X1, [X8+528]
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move X20, X0
	019 Call 0x1C17D44
	020 Move [X19+56], X20
	021 Move X0, X20
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Return X0
	026 Call 0x1C17F20

Method: System.Byte[] GetKeyAlgorithmParameters()

Disassembly:
	0x0326CA7C STR X31, [X22 + 0x90]
	0x0326CA80 MOV X0, X22
	0x0326CA84 MOV X1, X21
	0x0326CA88 LDP X20, X19, [X31 + 0x20]
	0x0326CA8C LDP X22, X21, [X31 + 0x10]
	0x0326CA90 LDP X30, X23, [X31], #0x30
	0x0326CA94 B 0x326CA98
	0x0326CA98 STP X30, X21, [X31 - 0x20]!
	0x0326CA9C STP X20, X19, [X31 + 0x10]
	0x0326CAA0 ADRP X21, 0x1170000
	0x0326CAA4 LDRB W8, [X21 + 0x59C]
	0x0326CAA8 MOV X20, X1
	0x0326CAAC MOV X19, X0
	0x0326CAB0 TBNZ X8, 0x0, 0x326CAE0
	0x0326CAB4 ADRP X0, 0xEB7000
	0x0326CAB8 LDR X0, [X0 + 0xA40]
	0x0326CABC BL 0x1C16CF4
	0x0326CAC0 ADRP X0, 0xEB7000
	0x0326CAC4 LDR X0, [X0 + 0xA48]
	0x0326CAC8 BL 0x1C16CF4
	0x0326CACC ADRP X0, 0xEB7000
	0x0326CAD0 LDR X0, [X0 + 0xA50]
	0x0326CAD4 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+16]
	006 Call X509Helper.ThrowIfContextInvalid, X0
	007 Move X20, [X19+64]
	008 Call 0x1C17D44
	009 Compare X20, 0
	010 JumpIfNotEqual {21}
	011 Move X0, [X19+16]
	012 Compare X0, 0
	013 JumpIfEqual {28}
	014 Move X8, [X0]
	015 Move X9, [X8+536]
	016 Move X1, [X8+544]
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move X20, X0
	019 Call 0x1C17D44
	020 Move [X19+64], X20
	021 Move X0, X20
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X1, X31
	025 Move X30, [X31+32]
	026 Call Helpers.CloneByteArray, X0
	027 Return X0
	028 Call 0x1C17F20

Method: System.Byte[] GetPublicKey()

Disassembly:
	0x0326CAD8 MOVZ W8, 0x1
	0x0326CADC STRB W8, [X21 + 0x59C]
	0x0326CAE0 MOV X0, X31
	0x0326CAE4 BL 0x33C2378
	0x0326CAE8 TBZ X0, 0x0, 0x326CB28
	0x0326CAEC LDR X8, [X19 + 0x80]
	0x0326CAF0 STR X20, [X19 + 0x78]
	0x0326CAF4 CBNZ X8, 0x326CB08
	0x0326CAF8 ADRP X8, 0xEB7000
	0x0326CAFC LDR X8, [X8 + 0xA48]
	0x0326CB00 LDR X8, [X8]
	0x0326CB04 STR X8, [X19 + 0x80]
	0x0326CB08 MOV X0, X20
	0x0326CB0C MOV X1, X31
	0x0326CB10 MOV X2, X31
	0x0326CB14 BL 0x33BE5B0
	0x0326CB18 TBZ X0, 0x0, 0x326CB84
	0x0326CB1C MOVZ W8, 0x2
	0x0326CB20 STR W8, [X19 + 0x88]
	0x0326CB24 B 0x326CB84
	0x0326CB28 ADRP X21, 0xEB7000
	0x0326CB2C LDR X21, [X21 + 0xA40]
	0x0326CB30 LDR X0, [X21]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+16]
	006 Call X509Helper.ThrowIfContextInvalid, X0
	007 Move X20, [X19+72]
	008 Call 0x1C17D44
	009 Compare X20, 0
	010 JumpIfNotEqual {21}
	011 Move X0, [X19+16]
	012 Compare X0, 0
	013 JumpIfEqual {28}
	014 Move X8, [X0]
	015 Move X9, [X8+552]
	016 Move X1, [X8+560]
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move X20, X0
	019 Call 0x1C17D44
	020 Move [X19+72], X20
	021 Move X0, X20
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X1, X31
	025 Move X30, [X31+32]
	026 Call Helpers.CloneByteArray, X0
	027 Return X0
	028 Call 0x1C17F20

Method: System.Byte[] GetSerialNumber()

Disassembly:
	0x0326CB34 LDR W8, [X0 + 0xE0]
	0x0326CB38 CBNZ W8, 0x326CB44
	0x0326CB3C BL 0x1C16DFC
	0x0326CB40 LDR X0, [X21]
	0x0326CB44 LDR X8, [X0 + 0xB8]
	0x0326CB48 MOV X0, X20
	0x0326CB4C MOV X2, X31
	0x0326CB50 LDR X1, [X8]
	0x0326CB54 BL 0x33BE5B0
	0x0326CB58 TBZ X0, 0x0, 0x326CB68
	0x0326CB5C LDR W8, [X19 + 0x88]
	0x0326CB60 CMP W8, 0x3
	0x0326CB64 B.NE 0x326CB90
	0x0326CB68 LDR X8, [X19 + 0x80]
	0x0326CB6C STR X20, [X19 + 0x78]
	0x0326CB70 CBNZ X8, 0x326CB84
	0x0326CB74 ADRP X8, 0xEB7000
	0x0326CB78 LDR X8, [X8 + 0xA50]
	0x0326CB7C LDR X8, [X8]
	0x0326CB80 STR X8, [X19 + 0x80]
	0x0326CB84 LDP X20, X19, [X31 + 0x10]
	0x0326CB88 LDP X30, X21, [X31], #0x20
	0x0326CB8C RET
	0x0326CB90 ADRP X0, 0xE8F000
	0x0326CB94 LDR X0, [X0 + 0x578]
	0x0326CB98 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1171000
	006 Move X20, 0xEB5000
	007 Move W8, [X21+1415]
	008 Move X20, [X20+3024]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEB5000
	015 Move X0, [X0+3024]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1415], W8
	019 Move X0, [X19+16]
	020 Call X509Helper.ThrowIfContextInvalid, X0
	021 Move X0, X19
	022 Call X509Certificate.GetRawSerialNumber, X0
	023 Move X1, X31
	024 Call Helpers.CloneByteArray, X0
	025 Move X1, [X20]
	026 Move X19, X0
	027 Call 0x21475E8, X0
	028 Move X0, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return X0

Method: System.String GetSerialNumberString()

Disassembly:
	0x0326CB9C BL 0x1C16F10
	0x0326CBA0 MOV X19, X0
	0x0326CBA4 ADRP X0, 0xEB7000
	0x0326CBA8 LDR X0, [X0 + 0xA58]
	0x0326CBAC BL 0x1C16D08
	0x0326CBB0 MOV X1, X0
	0x0326CBB4 MOV X0, X19
	0x0326CBB8 MOV X2, X31
	0x0326CBBC BL 0x3314A68

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+16]
	005 Call X509Helper.ThrowIfContextInvalid, X0
	006 Move X0, X19
	007 Call X509Certificate.GetRawSerialNumber, X0
	008 Move X1, X31
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Call Helpers.ToHexStringUpper, X0
	012 Return X0

Method: System.Byte[] GetRawSerialNumber()

Disassembly:
	0x0326C89C LDR X0, [X0 + 0x988]
	0x0326C8A0 BL 0x1C16CF4
	0x0326C8A4 MOVZ W8, 0x1
	0x0326C8A8 STRB W8, [X20 + 0x594]
	0x0326C8AC LDR X0, [X19 + 0x78]
	0x0326C8B0 CBZ X0, 0x326C8DC
	0x0326C8B4 ADRP X8, 0xE87000
	0x0326C8B8 LDR X8, [X8 + 0x988]
	0x0326C8BC MOV X2, X31
	0x0326C8C0 LDR X1, [X8]
	0x0326C8C4 BL 0x322693C
	0x0326C8C8 LDP X20, X19, [X31 + 0x10]
	0x0326C8CC ORN W8, W31, W0, 0x0
	0x0326C8D0 AND W0, W8, 0x1
	0x0326C8D4 LDR X30, [X31], #0x20
	0x0326C8D8 RET
	0x0326C8DC BL 0x1C16F20
	0x0326C8E0 SUB X31, X31, 0x20
	0x0326C8E4 STR X30, [X31 + 0x10]
	0x0326C8E8 MOV X7, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, [X0+32]
	005 Move X19, X0
	006 Call 0x1C17D44
	007 Compare X20, 0
	008 JumpIfNotEqual {19}
	009 Move X0, [X19+16]
	010 Compare X0, 0
	011 JumpIfEqual {24}
	012 Move X8, [X0]
	013 Move X9, [X8+568]
	014 Move X1, [X8+576]
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X20, X0
	017 Call 0x1C17D44
	018 Move [X19+32], X20
	019 Move X0, X20
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0
	024 Call 0x1C17F20

Method: System.String ToString()

Disassembly:
	0x0326CBC0 ADRP X0, 0xEB7000
	0x0326CBC4 LDR X0, [X0 + 0xA60]
	0x0326CBC8 BL 0x1C16D08
	0x0326CBCC MOV X1, X0
	0x0326CBD0 MOV X0, X19

ISIL:
	001 Move X8, [X0]
	002 Move W1, W31
	003 Move X3, [X8+600]
	004 Move X2, [X8+608]
	005 CallNoReturn X3

Method: System.String ToString(System.Boolean fVerbose)

Disassembly:
	0x0326CBD4 BL 0x1C16DEC
	0x0326CBD8 STR X30, [X31 - 0x20]!
	0x0326CBDC STP X20, X19, [X31 + 0x10]
	0x0326CBE0 MOV X19, X1
	0x0326CBE4 MOV X1, X31
	0x0326CBE8 MOV X20, X0
	0x0326CBEC BL 0x326DB7C
	0x0326CBF0 STR X19, [X20 + 0x98]
	0x0326CBF4 LDP X20, X19, [X31 + 0x10]
	0x0326CBF8 LDR X30, [X31], #0x20
	0x0326CBFC RET
	0x0326CC00 STR X30, [X31 - 0x20]!
	0x0326CC04 STP X20, X19, [X31 + 0x10]
	0x0326CC08 MOV X20, X2
	0x0326CC0C STR X2, [X31 + 0x8]
	0x0326CC10 MOV X2, X31
	0x0326CC14 MOV X19, X0
	0x0326CC18 BL 0x326E750
	0x0326CC1C MOV X0, X20
	0x0326CC20 MOV X1, X31
	0x0326CC24 MOV X2, X31
	0x0326CC28 BL 0x33C5D2C
	0x0326CC2C TBZ X0, 0x0, 0x326CC50
	0x0326CC30 ADD X0, X31, 0x8
	0x0326CC34 MOV X1, X31
	0x0326CC38 BL 0x33C6854
	0x0326CC3C CMP X0, 0x1
	0x0326CC40 B.LT 0x326CC50
	0x0326CC44 LDR X1, [X31 + 0x8]
	0x0326CC48 MOV X0, X19
	0x0326CC4C BL 0x326CA98
	0x0326CC50 LDP X20, X19, [X31 + 0x10]
	0x0326CC54 LDR X30, [X31], #0x20
	0x0326CC58 RET
	0x0326CC5C STR X31, [X0 + 0x78]
	0x0326CC60 RET
	0x0326CC64 STR X30, [X31 - 0x20]!
	0x0326CC68 STP X20, X19, [X31 + 0x10]
	0x0326CC6C ADRP X20, 0x1170000
	0x0326CC70 ADRP X19, 0xEB7000
	0x0326CC74 LDRB W8, [X20 + 0x597]
	0x0326CC78 LDR X19, [X19 + 0xA40]
	0x0326CC7C TBNZ X8, 0x0, 0x326CC94
	0x0326CC80 ADRP X0, 0xEB7000
	0x0326CC84 LDR X0, [X0 + 0xA40]
	0x0326CC88 BL 0x1C16CF4
	0x0326CC8C MOVZ W8, 0x1
	0x0326CC90 STRB W8, [X20 + 0x597]
	0x0326CC94 LDR X0, [X19]
	0x0326CC98 LDR W8, [X0 + 0xE0]
	0x0326CC9C CBNZ W8, 0x326CCA4
	0x0326CCA0 BL 0x1C16DFC
	0x0326CCA4 BL 0x1C4C018
	0x0326CCA8 LDR X8, [X19]
	0x0326CCAC MOV X19, X0
	0x0326CCB0 MOV X0, X8
	0x0326CCB4 BL 0x1C16F10
	0x0326CCB8 MOV X1, X31
	0x0326CCBC MOV X20, X0
	0x0326CCC0 BL 0x326DB7C
	0x0326CCC4 MOVZ W8, 0x1
	0x0326CCC8 MOV X0, X20
	0x0326CCCC MOV X1, X19
	0x0326CCD0 STR X31, [X20 + 0x80]
	0x0326CCD4 STR W31, [X20 + 0x88]
	0x0326CCD8 STRB W8, [X20 + 0x8C]
	0x0326CCDC STR X31, [X20 + 0x90]
	0x0326CCE0 BL 0x326CA98
	0x0326CCE4 MOV X0, X20
	0x0326CCE8 LDP X20, X19, [X31 + 0x10]
	0x0326CCEC LDR X30, [X31], #0x20
	0x0326CCF0 RET
	0x0326CCF4 B 0x1C4C018
	0x0326CCF8 STP X30, X21, [X31 - 0x20]!
	0x0326CCFC STP X20, X19, [X31 + 0x10]
	0x0326CD00 ADRP X21, 0x1170000
	0x0326CD04 ADRP X20, 0xEB7000
	0x0326CD08 LDRB W8, [X21 + 0x598]
	0x0326CD0C LDR X20, [X20 + 0xA68]
	0x0326CD10 MOV X19, X0
	0x0326CD14 TBNZ X8, 0x0, 0x326CD2C
	0x0326CD18 ADRP X0, 0xEB7000
	0x0326CD1C LDR X0, [X0 + 0xA68]
	0x0326CD20 BL 0x1C16CF4
	0x0326CD24 MOVZ W8, 0x1
	0x0326CD28 STRB W8, [X21 + 0x598]
	0x0326CD2C LDR X0, [X20]
	0x0326CD30 LDR X19, [X19 + 0x78]
	0x0326CD34 BL 0x1C16F10
	0x0326CD38 MOV X1, X19
	0x0326CD3C MOV X20, X0
	0x0326CD40 BL 0x326CD54
	0x0326CD44 MOV X0, X20
	0x0326CD48 LDP X20, X19, [X31 + 0x10]
	0x0326CD4C LDP X30, X21, [X31], #0x20
	0x0326CD50 RET
	0x0326CD54 STR X30, [X31 - 0x20]!
	0x0326CD58 STP X20, X19, [X31 + 0x10]
	0x0326CD5C MOV X20, X1
	0x0326CD60 MOV X1, X31
	0x0326CD64 MOV X19, X0
	0x0326CD68 BL 0x33BDD8C
	0x0326CD6C MOV X0, X20
	0x0326CD70 BL 0x1C4D17C
	0x0326CD74 STR X0, [X19 + 0x10]
	0x0326CD78 MOV X0, X20
	0x0326CD7C BL 0x1C4D164
	0x0326CD80 TBZ X0, 0x0, 0x326CD94
	0x0326CD84 STRB W31, [X19 + 0x18]
	0x0326CD88 LDP X20, X19, [X31 + 0x10]
	0x0326CD8C LDR X30, [X31], #0x20
	0x0326CD90 RET
	0x0326CD94 ADRP X0, 0xEB5000
	0x0326CD98 LDR X0, [X0 + 0x690]
	0x0326CD9C BL 0x1C16D08
	0x0326CDA0 BL 0x1C16F10
	0x0326CDA4 MOV X19, X0
	0x0326CDA8 ADRP X0, 0xEB7000
	0x0326CDAC LDR X0, [X0 + 0xA70]
	0x0326CDB0 BL 0x1C16D08
	0x0326CDB4 MOV X1, X0
	0x0326CDB8 MOV X0, X19
	0x0326CDBC MOV X2, X31
	0x0326CDC0 BL 0x324A9B4
	0x0326CDC4 ADRP X0, 0xEB7000
	0x0326CDC8 LDR X0, [X0 + 0xA78]
	0x0326CDCC BL 0x1C16D08
	0x0326CDD0 MOV X1, X0
	0x0326CDD4 MOV X0, X19
	0x0326CDD8 BL 0x1C16DEC
	0x0326CDDC LDR X0, [X0 + 0x80]
	0x0326CDE0 RET
	0x0326CDE4 LDRB W0, [X0 + 0x8C]
	0x0326CDE8 RET
	0x0326CDEC STR X30, [X31 - 0x20]!
	0x0326CDF0 STP X20, X19, [X31 + 0x10]
	0x0326CDF4 ADRP X20, 0x1170000
	0x0326CDF8 LDRB W8, [X20 + 0x599]
	0x0326CDFC MOV X19, X0
	0x0326CE00 TBNZ X8, 0x0, 0x326CE18
	0x0326CE04 ADRP X0, 0xEB7000
	0x0326CE08 LDR X0, [X0 + 0xA40]
	0x0326CE0C BL 0x1C16CF4
	0x0326CE10 MOVZ W8, 0x1
	0x0326CE14 STRB W8, [X20 + 0x599]
	0x0326CE18 LDR X0, [X19 + 0x90]
	0x0326CE1C CBNZ X0, 0x326CE48
	0x0326CE20 ADRP X8, 0xEB7000
	0x0326CE24 LDR X8, [X8 + 0xA40]
	0x0326CE28 LDR X20, [X19 + 0x78]
	0x0326CE2C LDR X0, [X8]
	0x0326CE30 LDR W8, [X0 + 0xE0]
	0x0326CE34 CBNZ W8, 0x326CE3C
	0x0326CE38 BL 0x1C16DFC
	0x0326CE3C MOV X0, X20
	0x0326CE40 BL 0x1C4D130
	0x0326CE44 STR X0, [X19 + 0x90]
	0x0326CE48 LDP X20, X19, [X31 + 0x10]
	0x0326CE4C LDR X30, [X31], #0x20
	0x0326CE50 RET
	0x0326CE54 B 0x1C4D130
	0x0326CE58 STR X30, [X31 - 0x30]!
	0x0326CE5C STP X22, X21, [X31 + 0x10]
	0x0326CE60 STP X20, X19, [X31 + 0x20]
	0x0326CE64 ADRP X20, 0x1170000
	0x0326CE68 ADRP X21, 0xEB0000
	0x0326CE6C ADRP X22, 0xE87000
	0x0326CE70 LDRB W8, [X20 + 0x59A]
	0x0326CE74 LDR X21, [X21 + 0xF18]
	0x0326CE78 LDR X22, [X22 + 0x6C0]
	0x0326CE7C MOV X19, X0
	0x0326CE80 TBNZ X8, 0x0, 0x326CF10
	0x0326CE84 ADRP X0, 0xEB0000
	0x0326CE88 LDR X0, [X0 + 0xF18]
	0x0326CE8C BL 0x1C16CF4
	0x0326CE90 ADRP X0, 0xEB0000
	0x0326CE94 LDR X0, [X0 + 0xF20]
	0x0326CE98 BL 0x1C16CF4
	0x0326CE9C ADRP X0, 0xE87000
	0x0326CEA0 LDR X0, [X0 + 0x6C0]
	0x0326CEA4 BL 0x1C16CF4
	0x0326CEA8 ADRP X0, 0xEB7000
	0x0326CEAC LDR X0, [X0 + 0xA80]
	0x0326CEB0 BL 0x1C16CF4
	0x0326CEB4 ADRP X0, 0xEB7000
	0x0326CEB8 LDR X0, [X0 + 0xA88]
	0x0326CEBC BL 0x1C16CF4
	0x0326CEC0 ADRP X0, 0xEB7000
	0x0326CEC4 LDR X0, [X0 + 0xA40]
	0x0326CEC8 BL 0x1C16CF4
	0x0326CECC ADRP X0, 0xEB7000
	0x0326CED0 LDR X0, [X0 + 0xA90]
	0x0326CED4 BL 0x1C16CF4
	0x0326CED8 ADRP X0, 0xEB7000
	0x0326CEDC LDR X0, [X0 + 0xA98]
	0x0326CEE0 BL 0x1C16CF4
	0x0326CEE4 ADRP X0, 0xEB7000
	0x0326CEE8 LDR X0, [X0 + 0xAA0]
	0x0326CEEC BL 0x1C16CF4
	0x0326CEF0 ADRP X0, 0xEB7000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1171000
	007 Move W8, [X21+1416]
	008 Move W20, W1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {43}
	014 Move X0, 0xEB5000
	015 Move X0, [X0+3024]
	016 Call 0x1C17CF4
	017 Move X0, 0xE88000
	018 Move X0, [X0+2288]
	019 Call 0x1C17CF4
	020 Move X0, 0xE8A000
	021 Move X0, [X0+416]
	022 Call 0x1C17CF4
	023 Move X0, 0xEB8000
	024 Move X0, [X0+2480]
	025 Call 0x1C17CF4
	026 Move X0, 0xEB8000
	027 Move X0, [X0+2488]
	028 Call 0x1C17CF4
	029 Move X0, 0xEB8000
	030 Move X0, [X0+2496]
	031 Call 0x1C17CF4
	032 Move X0, 0xEB8000
	033 Move X0, [X0+2504]
	034 Call 0x1C17CF4
	035 Move X0, 0xEB8000
	036 Move X0, [X0+2512]
	037 Call 0x1C17CF4
	038 Move X0, 0xEB8000
	039 Move X0, [X0+2520]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X21+1416], W8
	043 Move TEMP, X20
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {211}
	047 Move X0, [X19+16]
	048 Compare X0, 0
	049 JumpIfEqual {211}
	050 Move X8, [X0]
	051 Move X9, [X8+392]
	052 Move X1, [X8+400]
	053 NotImplemented "Instruction BLR not yet implemented."
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {211}
	058 Move X8, 0xE88000
	059 Move X8, [X8+2288]
	060 Move X0, [X8]
	061 Call 0x1C17F10
	062 Move X1, X31
	063 Move X20, X0
	064 Call StringBuilder..ctor, X0
	065 Compare X20, 0
	066 JumpIfEqual {220}
	067 Move X8, 0xEB8000
	068 Move X8, [X8+2488]
	069 Move X0, X20
	070 Move X2, X31
	071 Move X1, [X8]
	072 Call StringBuilder.AppendLine, X0, X1
	073 Move X22, 0xE8A000
	074 Move X22, [X22+416]
	075 Move X0, X20
	076 Move X2, X31
	077 Move X1, [X22]
	078 Call StringBuilder.Append, X0, X1
	079 Move X0, X19
	080 Call X509Certificate.get_Subject, X0
	081 Move X1, X0
	082 Move X0, X20
	083 Move X2, X31
	084 Call StringBuilder.AppendLine, X0, X1
	085 Move X0, X20
	086 Move X1, X31
	087 Call StringBuilder.AppendLine, X0
	088 Move X8, 0xEB8000
	089 Move X8, [X8+2512]
	090 Move X0, X20
	091 Move X2, X31
	092 Move X1, [X8]
	093 Call StringBuilder.AppendLine, X0, X1
	094 Move X1, [X22]
	095 Move X0, X20
	096 Move X2, X31
	097 Call StringBuilder.Append, X0, X1
	098 Move X0, X19
	099 Call X509Certificate.get_Issuer, X0
	100 Move X1, X0
	101 Move X0, X20
	102 Move X2, X31
	103 Call StringBuilder.AppendLine, X0, X1
	104 Move X0, X20
	105 Move X1, X31
	106 Call StringBuilder.AppendLine, X0
	107 Move X8, 0xEB8000
	108 Move X8, [X8+2496]
	109 Move X0, X20
	110 Move X2, X31
	111 Move X1, [X8]
	112 Call StringBuilder.AppendLine, X0, X1
	113 Move X1, [X22]
	114 Move X0, X20
	115 Move X2, X31
	116 Call StringBuilder.Append, X0, X1
	117 Move X8, [X19]
	118 Move X0, X19
	119 Move X9, [X8+568]
	120 Move X1, [X8+576]
	121 NotImplemented "Instruction BLR not yet implemented."
	122 Move X8, 0xEB5000
	123 Move X8, [X8+3024]
	124 Move X21, X0
	125 Move X1, [X8]
	126 Call 0x21475E8, X0
	127 Move X0, X21
	128 Move X1, X31
	129 Call Helpers.ToHexArrayUpper, X0
	130 Move X1, X0
	131 Move X0, X20
	132 Move X2, X31
	133 Call StringBuilder.Append, X0, X1
	134 Move X0, X20
	135 Move X1, X31
	136 Call StringBuilder.AppendLine, X0
	137 Move X0, X20
	138 Move X1, X31
	139 Call StringBuilder.AppendLine, X0
	140 Move X8, 0xEB8000
	141 Move X8, [X8+2520]
	142 Move X0, X20
	143 Move X2, X31
	144 Move X1, [X8]
	145 Call StringBuilder.AppendLine, X0, X1
	146 Move X1, [X22]
	147 Move X0, X20
	148 Move X2, X31
	149 Call StringBuilder.Append, X0, X1
	150 Move X0, X19
	151 Call X509Certificate.GetNotBefore, X0
	152 Call X509Certificate.FormatDate, X0
	153 Move X1, X0
	154 Move X0, X20
	155 Move X2, X31
	156 Call StringBuilder.AppendLine, X0, X1
	157 Move X0, X20
	158 Move X1, X31
	159 Call StringBuilder.AppendLine, X0
	160 Move X8, 0xEB8000
	161 Move X8, [X8+2504]
	162 Move X0, X20
	163 Move X2, X31
	164 Move X1, [X8]
	165 Call StringBuilder.AppendLine, X0, X1
	166 Move X1, [X22]
	167 Move X0, X20
	168 Move X2, X31
	169 Call StringBuilder.Append, X0, X1
	170 Move X0, X19
	171 Call X509Certificate.GetNotAfter, X0
	172 Call X509Certificate.FormatDate, X0
	173 Move X1, X0
	174 Move X0, X20
	175 Move X2, X31
	176 Call StringBuilder.AppendLine, X0, X1
	177 Move X0, X20
	178 Move X1, X31
	179 Call StringBuilder.AppendLine, X0
	180 Move X8, 0xEB8000
	181 Move X8, [X8+2480]
	182 Move X0, X20
	183 Move X2, X31
	184 Move X1, [X8]
	185 Call StringBuilder.AppendLine, X0, X1
	186 Move X1, [X22]
	187 Move X0, X20
	188 Move X2, X31
	189 Call StringBuilder.Append, X0, X1
	190 Move X0, X19
	191 Call X509Certificate.GetRawCertHash, X0
	192 Move X1, X31
	193 Call Helpers.ToHexArrayUpper, X0
	194 Move X1, X0
	195 Move X0, X20
	196 Move X2, X31
	197 Call StringBuilder.Append, X0, X1
	198 Move X0, X20
	199 Move X1, X31
	200 Call StringBuilder.AppendLine, X0
	201 Move X8, [X20]
	202 Move X0, X20
	203 Move X20, [X31+32]
	204 Move X19, [X31+40]
	205 Move X22, [X31+16]
	206 Move X21, [X31+24]
	207 Move X2, [X8+360]
	208 Move X1, [X8+368]
	209 Move X30, [X31+48]
	210 CallNoReturn X2
	211 Move X0, X19
	212 Move X20, [X31+32]
	213 Move X19, [X31+40]
	214 Move X22, [X31+16]
	215 Move X21, [X31+24]
	216 Move X1, X31
	217 Move X30, [X31+48]
	218 Call Object.ToString, X0
	219 Return X0
	220 Call 0x1C17F20

Method: System.DateTime GetNotAfter()

Disassembly:
	0x0326D0EC BL 0x1C16F10
	0x0326D0F0 MOV X19, X0
	0x0326D0F4 ADRP X0, 0xEB6000
	0x0326D0F8 LDR X0, [X0 + 0xAC0]
	0x0326D0FC BL 0x1C16D08
	0x0326D100 MOV X1, X0
	0x0326D104 MOV X0, X19
	0x0326D108 MOV X2, X31
	0x0326D10C BL 0x329F100
	0x0326D110 ADRP X0, 0xEB6000
	0x0326D114 LDR X0, [X0 + 0xAC8]
	0x0326D118 BL 0x1C16D08
	0x0326D11C MOV X1, X0
	0x0326D120 MOV X0, X19
	0x0326D124 BL 0x1C16DEC
	0x0326D128 SUB X31, X31, 0x50
	0x0326D12C STP X30, X25, [X31 + 0x10]
	0x0326D130 STP X24, X23, [X31 + 0x20]
	0x0326D134 STP X22, X21, [X31 + 0x30]
	0x0326D138 STP X20, X19, [X31 + 0x40]
	0x0326D13C ADRP X22, 0x116F000
	0x0326D140 ADRP X21, 0xEAF000
	0x0326D144 LDRB W8, [X22 + 0x59B]
	0x0326D148 LDR X21, [X21 + 0xF20]
	0x0326D14C MOV X19, X1
	0x0326D150 MOV X20, X0
	0x0326D154 TBNZ X8, 0x0, 0x326D1B4
	0x0326D158 ADRP X0, 0xEAF000
	0x0326D15C LDR X0, [X0 + 0xF20]
	0x0326D160 BL 0x1C16CF4
	0x0326D164 ADRP X0, 0xEB6000
	0x0326D168 LDR X0, [X0 + 0xA88]
	0x0326D16C BL 0x1C16CF4
	0x0326D170 ADRP X0, 0xEB6000
	0x0326D174 LDR X0, [X0 + 0xA90]
	0x0326D178 BL 0x1C16CF4
	0x0326D17C ADRP X0, 0xEB6000
	0x0326D180 LDR X0, [X0 + 0xA98]
	0x0326D184 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1170000
	006 Move X21, 0xE88000
	007 Move W8, [X20+1417]
	008 Move X21, [X21+2544]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE88000
	015 Move X0, [X0+2544]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1417], W8
	019 Move X0, [X19+16]
	020 Call X509Helper.ThrowIfContextInvalid, X0
	021 Move X0, [X21]
	022 Move X20, [X19+88]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X21]
	028 Move X8, [X0+184]
	029 Move X0, X20
	030 Move X2, X31
	031 Move X1, [X8+16]
	032 Call DateTime.op_Equality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {46}
	037 Move X0, [X19+16]
	038 Compare X0, 0
	039 JumpIfEqual {52}
	040 Move X8, [X0]
	041 Move X9, [X8+472]
	042 Move X1, [X8+480]
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Move X20, X0
	045 Move [X19+88], X0
	046 Move X0, X20
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return X0
	052 Call 0x1C17F20

Method: System.DateTime GetNotBefore()

Disassembly:
	0x0326CF08 MOVZ W8, 0x1
	0x0326CF0C STRB W8, [X20 + 0x59A]
	0x0326CF10 LDR X0, [X22]
	0x0326CF14 LDR X20, [X19 + 0x98]
	0x0326CF18 LDR X21, [X21]
	0x0326CF1C LDR W8, [X0 + 0xE0]
	0x0326CF20 CBNZ W8, 0x326CF28
	0x0326CF24 BL 0x1C16DFC
	0x0326CF28 MOV X0, X21
	0x0326CF2C MOV X1, X31
	0x0326CF30 BL 0x338C698
	0x0326CF34 CBZ X20, 0x326D0D8
	0x0326CF38 ADRP X8, 0xEB7000
	0x0326CF3C LDR X8, [X8 + 0xA90]
	0x0326CF40 MOV X2, X0
	0x0326CF44 MOV X0, X20
	0x0326CF48 MOV X3, X31
	0x0326CF4C LDR X1, [X8]
	0x0326CF50 BL 0x32A9678
	0x0326CF54 CBZ X0, 0x326D0D8
	0x0326CF58 ADRP X8, 0xEB0000
	0x0326CF5C LDR X8, [X8 + 0xF20]
	0x0326CF60 LDR X9, [X0]
	0x0326CF64 LDR X1, [X8]
	0x0326CF68 LDR X8, [X9 + 0x40]
	0x0326CF6C LDR X9, [X1 + 0x40]
	0x0326CF70 CMP X8, X9
	0x0326CF74 B.NE 0x326D0DC
	0x0326CF78 BL 0x1C16E08
	0x0326CF7C LDR X8, [X0]
	0x0326CF80 LDR X0, [X19 + 0x98]
	0x0326CF84 STR X8, [X19 + 0x78]
	0x0326CF88 CBZ X0, 0x326D0D8
	0x0326CF8C ADRP X8, 0xEB7000
	0x0326CF90 LDR X8, [X8 + 0xA98]
	0x0326CF94 ADRP X21, 0xEB7000
	0x0326CF98 MOV X2, X31
	0x0326CF9C LDR X1, [X8]
	0x0326CFA0 LDR X21, [X21 + 0xA40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1171000
	006 Move X21, 0xE89000
	007 Move W8, [X20+1418]
	008 Move X21, [X21+2544]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE89000
	015 Move X0, [X0+2544]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1418], W8
	019 Move X0, [X19+16]
	020 Call X509Helper.ThrowIfContextInvalid, X0
	021 Move X0, [X21]
	022 Move X20, [X19+80]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X21]
	028 Move X8, [X0+184]
	029 Move X0, X20
	030 Move X2, X31
	031 Move X1, [X8+16]
	032 Call DateTime.op_Equality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {46}
	037 Move X0, [X19+16]
	038 Compare X0, 0
	039 JumpIfEqual {52}
	040 Move X8, [X0]
	041 Move X9, [X8+488]
	042 Move X1, [X8+496]
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Move X20, X0
	045 Move [X19+80], X0
	046 Move X0, X20
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return X0
	052 Call 0x1C17F20

Method: System.String FormatDate(System.DateTime date)

Disassembly:
	0x0326CFA4 BL 0x32A9F64
	0x0326CFA8 STR X0, [X19 + 0x90]
	0x0326CFAC MOV X20, X0
	0x0326CFB0 LDR X0, [X21]
	0x0326CFB4 LDR X21, [X19 + 0x78]
	0x0326CFB8 LDR W8, [X0 + 0xE0]
	0x0326CFBC CBNZ W8, 0x326CFC4
	0x0326CFC0 BL 0x1C16DFC
	0x0326CFC4 MOV X0, X21
	0x0326CFC8 BL 0x1C4D130
	0x0326CFCC CBZ X20, 0x326D000
	0x0326CFD0 LDR X1, [X19 + 0x90]
	0x0326CFD4 MOV X2, X31
	0x0326CFD8 BL 0x3226EF8
	0x0326CFDC TBZ X0, 0x0, 0x326D008
	0x0326CFE0 ADRP X0, 0xEB1000
	0x0326CFE4 LDR X0, [X0 + 0x2E0]
	0x0326CFE8 BL 0x1C16D08
	0x0326CFEC BL 0x1C16F10
	0x0326CFF0 MOV X19, X0
	0x0326CFF4 ADRP X0, 0xEB7000
	0x0326CFF8 LDR X0, [X0 + 0xAB8]
	0x0326CFFC B 0x326D0FC
	0x0326D000 STR X0, [X19 + 0x90]
	0x0326D004 CBZ X0, 0x326D0E0
	0x0326D008 LDR X0, [X19 + 0x98]
	0x0326D00C CBZ X0, 0x326D0D8
	0x0326D010 ADRP X8, 0xEB6000
	0x0326D014 LDR X8, [X8 + 0xAA8]
	0x0326D018 ADRP X21, 0xEB6000
	0x0326D01C MOV X2, X31
	0x0326D020 LDR X1, [X8]
	0x0326D024 LDR X21, [X21 + 0xA80]
	0x0326D028 BL 0x32A9F64
	0x0326D02C STR X0, [X19 + 0x80]
	0x0326D030 LDR X0, [X22]
	0x0326D034 LDR X20, [X19 + 0x98]
	0x0326D038 LDR X21, [X21]
	0x0326D03C LDR W8, [X0 + 0xE0]
	0x0326D040 CBNZ W8, 0x326D048
	0x0326D044 BL 0x1C16DFC
	0x0326D048 MOV X0, X21
	0x0326D04C MOV X1, X31
	0x0326D050 BL 0x338C698
	0x0326D054 CBZ X20, 0x326D0D8
	0x0326D058 ADRP X8, 0xEB6000
	0x0326D05C LDR X8, [X8 + 0xAA0]
	0x0326D060 MOV X2, X0
	0x0326D064 MOV X0, X20
	0x0326D068 MOV X3, X31
	0x0326D06C LDR X1, [X8]
	0x0326D070 BL 0x32A9678
	0x0326D074 CBZ X0, 0x326D0D8
	0x0326D078 ADRP X8, 0xEB6000
	0x0326D07C LDR X8, [X8 + 0xA88]
	0x0326D080 LDR X9, [X0]
	0x0326D084 LDR X1, [X8]
	0x0326D088 LDR X8, [X9 + 0x40]
	0x0326D08C LDR X9, [X1 + 0x40]
	0x0326D090 CMP X8, X9
	0x0326D094 B.NE 0x326D0DC
	0x0326D098 BL 0x1C16E08
	0x0326D09C LDR W8, [X0]
	0x0326D0A0 LDR X0, [X19 + 0x98]
	0x0326D0A4 STR W8, [X19 + 0x88]
	0x0326D0A8 CBZ X0, 0x326D0D8
	0x0326D0AC ADRP X8, 0xEB6000
	0x0326D0B0 LDR X8, [X8 + 0xAB0]
	0x0326D0B4 MOV X2, X31
	0x0326D0B8 LDR X1, [X8]
	0x0326D0BC BL 0x32A9988
	0x0326D0C0 AND W8, W0, 0x1
	0x0326D0C4 STRB W8, [X19 + 0x8C]
	0x0326D0C8 LDP X20, X19, [X31 + 0x20]
	0x0326D0CC LDP X22, X21, [X31 + 0x10]
	0x0326D0D0 LDR X30, [X31], #0x30
	0x0326D0D4 RET
	0x0326D0D8 BL 0x1C16F20
	0x0326D0DC BL 0x1C171E0
	0x0326D0E0 ADRP X0, 0xEB0000
	0x0326D0E4 LDR X0, [X0 + 0x2E0]
	0x0326D0E8 BL 0x1C16D08

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, 0x1171000
	009 Move [X31+8], X0
	010 Move X23, 0xE8A000
	011 Move W8, [X19+1419]
	012 Move X23, [X23+3144]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xE8A000
	018 Move X0, [X0+3144]
	019 Call 0x1C17CF4
	020 Move X0, 0xE89000
	021 Move X0, [X0+2544]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X19+1419], W8
	025 Move X0, [X23]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X31
	031 Call CultureInfo.get_CurrentCulture
	032 Compare X0, 0
	033 JumpIfEqual {101}
	034 Move X8, [X0]
	035 Move X19, X0
	036 Move X9, [X8+568]
	037 Move X1, [X8+576]
	038 NotImplemented "Instruction BLR not yet implemented."
	039 Compare X0, 0
	040 JumpIfEqual {101}
	041 Move X24, 0xE88000
	042 Move X24, [X24+2544]
	043 Move X20, [X0+120]
	044 Move X8, [X24]
	045 Move W9, [X8+224]
	046 Compare W9, 0
	047 JumpIfNotEqual {50}
	048 Move X0, X8
	049 Call 0x1C17DFC
	050 Add X0, X31, 8
	051 Move X1, X31
	052 Call DateTime.get_Year, X0
	053 Move W21, W0
	054 Add X0, X31, 8
	055 Move X1, X31
	056 Call DateTime.get_Month, X0
	057 Move W22, W0
	058 Add X0, X31, 8
	059 Move X1, X31
	060 Call DateTime.get_Day, X0
	061 Compare X20, 0
	062 JumpIfEqual {101}
	063 Move X8, [X20]
	064 Move W3, W0
	065 Move X0, X20
	066 Move W1, W21
	067 Move X9, [X8+728]
	068 Move X5, [X8+736]
	069 Move W2, W22
	070 Move W4, W31
	071 NotImplemented "Instruction BLR not yet implemented."
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfEqual {84}
	076 Move X0, [X23]
	077 Move W8, [X0+224]
	078 Compare W8, 0
	079 JumpIfNotEqual {81}
	080 Call 0x1C17DFC
	081 Move X0, X31
	082 Call CultureInfo.get_InvariantCulture
	083 Move X19, X0
	084 Move X0, [X24]
	085 Move W8, [X0+224]
	086 Compare W8, 0
	087 JumpIfNotEqual {89}
	088 Call 0x1C17DFC
	089 Add X0, X31, 8
	090 Move X1, X19
	091 Move X2, X31
	092 Call DateTime.ToString, X0, X1
	093 Move X20, [X31+48]
	094 Move X19, [X31+56]
	095 Move X22, [X31+32]
	096 Move X21, [X31+40]
	097 Move X24, [X31+16]
	098 Move X23, [X31+24]
	099 Move X30, [X31+64]
	100 Return X0
	101 Call 0x1C17F20

Method: System.Void ValidateKeyStorageFlags(System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags)

Disassembly:
	0x0326C230 RET
	0x0326C234 BL 0x326C254
	0x0326C238 MOV X19, X0
	0x0326C23C ADRP X0, 0xEB7000
	0x0326C240 LDR X0, [X0 + 0x9E8]
	0x0326C244 BL 0x1C16D08
	0x0326C248 MOV X1, X0
	0x0326C24C MOV X0, X19
	0x0326C250 BL 0x1C16DEC
	0x0326C254 STP X30, X21, [X31 - 0x20]!
	0x0326C258 STP X20, X19, [X31 + 0x10]
	0x0326C25C ADRP X20, 0x1170000
	0x0326C260 ADRP X21, 0xEB7000
	0x0326C264 ADRP X19, 0xEB4000
	0x0326C268 LDRB W8, [X20 + 0x590]
	0x0326C26C LDR X21, [X21 + 0x9F0]
	0x0326C270 LDR X19, [X19 + 0xCE0]
	0x0326C274 TBNZ X8, 0x0, 0x326C298
	0x0326C278 ADRP X0, 0xEB4000
	0x0326C27C LDR X0, [X0 + 0xCE0]
	0x0326C280 BL 0x1C16CF4
	0x0326C284 ADRP X0, 0xEB7000
	0x0326C288 LDR X0, [X0 + 0x9F0]
	0x0326C28C BL 0x1C16CF4
	0x0326C290 MOVZ W8, 0x1
	0x0326C294 STRB W8, [X20 + 0x590]
	0x0326C298 LDR X0, [X21]
	0x0326C29C MOV X1, X31
	0x0326C2A0 BL 0x320A160
	0x0326C2A4 LDR X8, [X19]
	0x0326C2A8 MOV X19, X0
	0x0326C2AC MOV X0, X8
	0x0326C2B0 BL 0x1C16F10
	0x0326C2B4 MOV X1, X19
	0x0326C2B8 MOV X2, X31
	0x0326C2BC MOV X20, X0
	0x0326C2C0 BL 0x3252170
	0x0326C2C4 MOV X0, X20
	0x0326C2C8 LDP X20, X19, [X31 + 0x10]
	0x0326C2CC LDP X30, X21, [X31], #0x20
	0x0326C2D0 RET
	0x0326C2D4 STP X30, X19, [X31 - 0x10]!
	0x0326C2D8 LDR X8, [X0]
	0x0326C2DC MOV X19, X0
	0x0326C2E0 LDP X9, X1, [X8 + 0x188]
	0x0326C2E4 BLR X9
	0x0326C2E8 TBZ X0, 0x0, 0x326C348
	0x0326C2EC LDR X8, [X19]
	0x0326C2F0 MOV X0, X19
	0x0326C2F4 LDP X9, X1, [X8 + 0x1F8]
	0x0326C2F8 BLR X9
	0x0326C2FC CBZ X0, 0x326C358
	0x0326C300 LDR W8, [X0 + 0x18]
	0x0326C304 UBFM X9, X8, 0x20, 0x1F
	0x0326C308 SXTW X10, W8
	0x0326C30C BIC X9, X10, X9, 0x3F
	0x0326C310 CMP X9, 0x4
	0x0326C314 MOVZ W10, 0x4
	0x0326C318 CSEL X9, X9, X10, CC
	0x0326C31C CBZ X9, 0x326C348
	0x0326C320 MOV W11, W31
	0x0326C324 ADD X10, X0, 0x20
	0x0326C328 CBZ X8, 0x326C354
	0x0326C32C LDRB W0, [X10], #0x1
	0x0326C330 SUB X9, X9, 0x1
	0x0326C334 SUB X8, X8, 0x1
	0x0326C338 BFM W0, W11, 0x18, 0x17

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction ORN not yet implemented."
	006 And W31, W8, 48
	007 Move X20, [X31+16]
	008 Move X19, [X31+24]
	009 Move X30, [X31+32]
	010 Return 
	011 Move X0, 0xE90000
	012 Move X0, [X0+1400]
	013 Call 0x1C17D08
	014 Call 0x1C17F10
	015 Move X19, X0
	016 Move X0, 0xEB8000
	017 Move X0, [X0+2392]
	018 Call 0x1C17D08
	019 Move X20, X0
	020 Move X0, 0xEB8000
	021 Move X0, [X0+2400]
	022 Call 0x1C17D08
	023 Move X2, X0
	024 Move X0, X19
	025 Move X1, X20
	026 Move X3, X31
	027 Call ArgumentException..ctor, X0, X1, X2
	028 Move X0, 0xEB8000
	029 Move X0, [X0+2408]
	030 Call 0x1C17D08
	031 Move X1, X0
	032 Move X0, X19
	033 Call 0x1C17DEC
	034 Move W8, 48
	035 Move [X31+12], W8
	036 Move X0, 0xEB8000
	037 Move X0, [X0+2416]
	038 Call 0x1C17D08
	039 Add X1, X31, 12
	040 Call 0x1C17E04
	041 Move X19, X0
	042 Move X0, 0xEB8000
	043 Move X0, [X0+2424]
	044 Call 0x1C17D08
	045 Move X1, X19
	046 Move X2, X31
	047 Call SR.Format, X0, X1
	048 Move X19, X0
	049 Move X0, 0xE90000
	050 Move X0, [X0+1400]
	051 Call 0x1C17D08
	052 Call 0x1C17F10
	053 Move X20, X0
	054 Move X0, 0xEB8000
	055 Move X0, [X0+2400]
	056 Call 0x1C17D08
	057 Move X2, X0
	058 Move X0, X20
	059 Move X1, X19
	060 Move X3, X31
	061 Call ArgumentException..ctor, X0, X1, X2
	062 Move X0, 0xEB8000
	063 Move X0, [X0+2408]
	064 Call 0x1C17D08
	065 Move X1, X0
	066 Move X0, X20
	067 Call 0x1C17DEC

Method: System.Void ImportHandle(System.Security.Cryptography.X509Certificates.X509CertificateImpl impl)

Disassembly:
	0x0326D188 ADRP X0, 0xEB6000
	0x0326D18C LDR X0, [X0 + 0xAA0]
	0x0326D190 BL 0x1C16CF4
	0x0326D194 ADRP X0, 0xEB6000
	0x0326D198 LDR X0, [X0 + 0xAA8]
	0x0326D19C BL 0x1C16CF4
	0x0326D1A0 ADRP X0, 0xEB6000
	0x0326D1A4 LDR X0, [X0 + 0xAB0]
	0x0326D1A8 BL 0x1C16CF4
	0x0326D1AC MOVZ W8, 0x1
	0x0326D1B0 STRB W8, [X22 + 0x59B]
	0x0326D1B4 LDR X8, [X20 + 0x78]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0]
	005 Move X20, X1
	006 Move X19, X0
	007 Move X9, [X8+424]
	008 Move X8, [X8+432]
	009 Move X1, X8
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Move [X19+16], X20
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X30, [X31+32]
	015 Return 

Method: System.Security.Cryptography.X509Certificates.X509CertificateImpl get_Impl()

Disassembly:
	0x0326D1B8 LDR X0, [X21]
	0x0326D1BC ADD X1, X31, 0x8

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Boolean get_IsValid()

Disassembly:
	0x0326D1C0 STR X8, [X31 + 0x8]
	0x0326D1C4 BL 0x1C16E04
	0x0326D1C8 CBZ X19, 0x326D28C
	0x0326D1CC ADRP X8, 0xEB6000
	0x0326D1D0 LDR X8, [X8 + 0xA90]
	0x0326D1D4 ADRP X21, 0xEB6000

ISIL:
	001 Move X0, [X0+16]
	002 Compare X0, 0
	003 JumpIfEqual {8}
	004 Move X8, [X0]
	005 Move X2, [X8+392]
	006 Move X1, [X8+400]
	007 CallNoReturn X2
	008 Return X0

Method: System.Void ThrowIfInvalid()

Disassembly:
	0x0326C690 LDP X30, X21, [X31], #0x20
	0x0326C694 B 0x326C700

ISIL:
	001 Move X0, [X0+16]
	002 Call X509Helper.ThrowIfContextInvalid, X0
	003 Return 

