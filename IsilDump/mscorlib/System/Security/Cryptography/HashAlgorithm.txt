Type: System.Security.Cryptography.HashAlgorithm

Method: System.Void .ctor()

Disassembly:
	0x03252230 LDR W8, [X0 + 0x10]
	0x03252234 SUBS W8, W1, W8

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Security.Cryptography.HashAlgorithm Create(System.String hashName)

Disassembly:
	0x03252238 B.MI 0x3252274
	0x0325223C LDP W10, W9, [X0 + 0x14]
	0x03252240 CMP W10, W1
	0x03252244 CSET W11, GE
	0x03252248 CMP W9, 0x0
	0x0325224C CSET W12, EQ
	0x03252250 AND W0, W12, W11, 0x0
	0x03252254 CBZ W9, 0x3252270
	0x03252258 CMP W10, W1
	0x0325225C B.LT 0x3252270
	0x03252260 SDIV W10, W8, W9
	0x03252264 MSUB W8, W10, W9, W8
	0x03252268 CMP W8, 0x0
	0x0325226C CSET W0, EQ
	0x03252270 RET
	0x03252274 MOV W0, W31
	0x03252278 RET
	0x0325227C STR X30, [X31 - 0x10]!
	0x03252280 CBZ X0, 0x3252304
	0x03252284 LDR W8, [X0 + 0x18]
	0x03252288 CMP W8, 0x1
	0x0325228C B.LT 0x32522EC
	0x03252290 MOV W9, W31
	0x03252294 CMP W8, W9
	0x03252298 B.EQ 0x3252300
	0x0325229C ADD X10, X0, W9, 0x3, SXTW
	0x032522A0 LDR X12, [X10 + 0x20]
	0x032522A4 CBZ X12, 0x3252304
	0x032522A8 LDR W10, [X12 + 0x10]
	0x032522AC SUBS W11, W1, W10
	0x032522B0 B.MI 0x32522E0
	0x032522B4 LDP W12, W10, [X12 + 0x14]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x118B000
	005 Move W8, [X20+1208]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xED0000
	012 Move X0, [X0+1104]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1208], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Call CryptoConfigForwarder.CreateFromName, X0
	019 Compare X0, 0
	020 JumpIfEqual {32}
	021 Move X9, 0xED0000
	022 Move X9, [X9+1104]
	023 Move X8, [X0]
	024 Move X1, [X9]
	025 Move W10, [X8+304]
	026 Move W9, [X1+304]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X8, [X8+200]
	029 Add X8, X8, X9
	030 NotImplemented "Instruction LDUR not yet implemented."
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return X0
	036 Call 0x1C181E0

Method: System.Int32 get_HashSize()

Disassembly:
	0x032522B8 CBZ W10, 0x32522D4
	0x032522BC CMP W12, W1

ISIL:
	001 Move W0, [X0+20]
	002 Return X0

Method: System.Byte[] get_Hash()

Disassembly:
	0x032522C0 B.LT 0x32522D4
	0x032522C4 SDIV W12, W11, W10
	0x032522C8 MSUB W10, W12, W10, W11
	0x032522CC CBNZ W10, 0x32522E0
	0x032522D0 B 0x32522F4
	0x032522D4 CMP W12, W1
	0x032522D8 B.LT 0x32522E0
	0x032522DC CBZ W10, 0x32522F4
	0x032522E0 ADD W9, W9, 0x1
	0x032522E4 CMP W8, W9
	0x032522E8 B.NE 0x3252294
	0x032522EC MOV W0, W31
	0x032522F0 B 0x32522F8
	0x032522F4 MOVZ W0, 0x1
	0x032522F8 LDR X30, [X31], #0x10
	0x032522FC RET
	0x03252300 BL 0x1C16F28
	0x03252304 BL 0x1C16F20
	0x03252308 STP X30, X21, [X31 - 0x20]!
	0x0325230C STP X20, X19, [X31 + 0x10]
	0x03252310 ADRP X20, 0x118A000
	0x03252314 ADRP X21, 0xED0000
	0x03252318 LDRB W8, [X20 + 0x4C4]
	0x0325231C LDR X21, [X21 + 0xF28]
	0x03252320 MOV X19, X0
	0x03252324 TBNZ X8, 0x0, 0x325233C
	0x03252328 ADRP X0, 0xED0000
	0x0325232C LDR X0, [X0 + 0xF28]
	0x03252330 BL 0x1C16CF4
	0x03252334 MOVZ W8, 0x1
	0x03252338 STRB W8, [X20 + 0x4C4]
	0x0325233C LDR X0, [X21]
	0x03252340 MOV X1, X31
	0x03252344 BL 0x33BDD84
	0x03252348 MOV X1, X0
	0x0325234C MOV X0, X19
	0x03252350 MOV X2, X31
	0x03252354 BL 0x338C8D8
	0x03252358 MOV X0, X19
	0x0325235C LDP X20, X19, [X31 + 0x10]
	0x03252360 MOVZ W1, 0x1430
	0x03252364 MOVK W1, 0x80130000
	0x03252368 MOV X2, X31
	0x0325236C LDP X30, X21, [X31], #0x20
	0x03252370 B 0x33B3318
	0x03252374 STP X30, X23, [X31 - 0x30]!
	0x03252378 STP X22, X21, [X31 + 0x10]
	0x0325237C STP X20, X19, [X31 + 0x20]
	0x03252380 ADRP X22, 0x118A000
	0x03252384 ADRP X23, 0xEA3000
	0x03252388 LDRB W8, [X22 + 0x4C5]
	0x0325238C LDR X23, [X23 + 0xC48]
	0x03252390 MOV X20, X2
	0x03252394 MOV X21, X1
	0x03252398 MOV X19, X0
	0x0325239C TBNZ X8, 0x0, 0x32523B4
	0x032523A0 ADRP X0, 0xEA3000
	0x032523A4 LDR X0, [X0 + 0xC48]
	0x032523A8 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x118B000
	005 Move W8, [X20+1209]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xEA2000
	012 Move X0, [X0+1560]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1209], W8
	016 Move W8, [X19+16]
	017 Compare W8, 0
	018 JumpIfNotEqual {41}
	019 Move W8, [X19+32]
	020 Compare W8, 0
	021 JumpIfNotEqual {49}
	022 Move X0, [X19+24]
	023 Compare X0, 0
	024 JumpIfEqual {37}
	025 Move X1, X31
	026 Call Array.Clone, X0
	027 Compare X0, 0
	028 JumpIfEqual {37}
	029 Move X8, 0xEA2000
	030 Move X8, [X8+1560]
	031 Move X19, X0
	032 Move X20, [X8]
	033 Move X1, X20
	034 Call 0x1C17E00
	035 Compare X0, 0
	036 JumpIfEqual {66}
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Return X0
	041 Move X0, 0xECB000
	042 Move X0, [X0+1208]
	043 Call 0x1C17D08
	044 Call 0x1C17F10
	045 Move X1, X31
	046 Move X2, X31
	047 Move X19, X0
	048 Call ObjectDisposedException..ctor, X0, X1
	049 Move X0, 0xED1000
	050 Move X0, [X0+3768]
	051 Call 0x1C17D08
	052 Call 0x1C17F10
	053 Move X19, X0
	054 Move X0, 0xED1000
	055 Move X0, [X0+3776]
	056 Call 0x1C17D08
	057 Move X1, X0
	058 Move X0, X19
	059 Call CryptographicUnexpectedOperationException..ctor, X0, X1
	060 Move X0, 0xED1000
	061 Move X0, [X0+3784]
	062 Call 0x1C17D08
	063 Move X1, X0
	064 Move X0, X19
	065 Call 0x1C17DEC
	066 Move X0, X19
	067 Move X1, X20
	068 Call 0x1C181E0

Method: System.Byte[] ComputeHash(System.Byte[] buffer)

Disassembly:
	0x032523F4 LDP X22, X21, [X31 + 0x10]
	0x032523F8 MOVZ W1, 0x1430
	0x032523FC MOVK W1, 0x80130000
	0x03252400 MOV X2, X31
	0x03252404 LDP X30, X23, [X31], #0x30
	0x03252408 B 0x33B3318
	0x0325240C STP X30, X19, [X31 - 0x10]!
	0x03252410 MOV X3, X31
	0x03252414 MOV X19, X0
	0x03252418 BL 0x338C990
	0x0325241C MOVZ W1, 0x1430
	0x03252420 MOVK W1, 0x80130000
	0x03252424 MOV X0, X19
	0x03252428 MOV X2, X31
	0x0325242C LDP X30, X19, [X31], #0x10
	0x03252430 B 0x33B3318
	0x03252434 MOV X4, X31
	0x03252438 B 0x338CA74
	0x0325243C STP X30, X19, [X31 - 0x10]!
	0x03252440 MOV X19, X0
	0x03252444 BL 0x3252308
	0x03252448 MOVZ W1, 0x1431
	0x0325244C MOVK W1, 0x80130000
	0x03252450 MOV X0, X19
	0x03252454 MOV X2, X31
	0x03252458 LDP X30, X19, [X31], #0x10
	0x0325245C B 0x33B3318
	0x03252460 MOV X4, X31
	0x03252464 B 0x338CA74
	0x03252468 LDR W0, [X0 + 0x2C]
	0x0325246C RET
	0x03252470 STR X30, [X31 - 0x20]!
	0x03252474 STP X20, X19, [X31 + 0x10]
	0x03252478 CMP W1, 0x100
	0x0325247C B.CS 0x3252490
	0x03252480 LDP X20, X19, [X31 + 0x10]
	0x03252484 STR W1, [X0 + 0x2C]
	0x03252488 LDR X30, [X31], #0x20
	0x0325248C RET
	0x03252490 ADRP X0, 0xEA1000
	0x03252494 LDR X0, [X0 + 0x9D0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+16]
	004 Compare W8, 0
	005 JumpIfNotEqual {18}
	006 Compare X1, 0
	007 JumpIfEqual {26}
	008 Move X8, [X0]
	009 Move W3, [X1+24]
	010 Move W2, W31
	011 Move X19, X0
	012 Move X9, [X8+568]
	013 Move X4, [X8+576]
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Move X0, X19
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Move X0, 0xECB000
	019 Move X0, [X0+1208]
	020 Call 0x1C17D08
	021 Call 0x1C17F10
	022 Move X1, X31
	023 Move X2, X31
	024 Move X19, X0
	025 Call ObjectDisposedException..ctor, X0, X1
	026 Move X0, 0xEA7000
	027 Move X0, [X0+1320]
	028 Call 0x1C17D08
	029 Call 0x1C17F10
	030 Move X19, X0
	031 Move X0, 0xECD000
	032 Move X0, [X0+3912]
	033 Call 0x1C17D08
	034 Move X1, X0
	035 Move X0, X19
	036 Move X2, X31
	037 Call ArgumentNullException..ctor, X0, X1
	038 Move X0, 0xED1000
	039 Move X0, [X0+3792]
	040 Call 0x1C17D08
	041 Move X1, X0
	042 Move X0, X19
	043 Call 0x1C17DEC

Method: System.Byte[] ComputeHash(System.Byte[] buffer, System.Int32 offset, System.Int32 count)

Disassembly:
	0x03252540 LDR X0, [X0 + 0xF30]
	0x03252544 BL 0x1C16D08
	0x03252548 MOV X1, X0
	0x0325254C MOV X0, X20
	0x03252550 BL 0x1C16DEC
	0x03252554 STP X30, X19, [X31 - 0x10]!
	0x03252558 MOV X1, X31
	0x0325255C MOV X19, X0
	0x03252560 BL 0x33BDD8C
	0x03252564 MOVZ W8, 0x1
	0x03252568 MOVI D0, 0xFFFFFFFF
	0x0325256C STP X31, X31, [X19 + 0x18]
	0x03252570 STR W8, [X19 + 0x10]
	0x03252574 STR D0, [X19 + 0x28]
	0x03252578 LDP X30, X19, [X31], #0x10
	0x0325257C RET
	0x03252580 STR X30, [X31 - 0x30]!
	0x03252584 STP X22, X21, [X31 + 0x10]
	0x03252588 STP X20, X19, [X31 + 0x20]
	0x0325258C MOV W21, W1
	0x03252590 MOV X1, X31
	0x03252594 MOV X19, X3
	0x03252598 MOV X20, X2
	0x0325259C MOV X22, X0
	0x032525A0 BL 0x33BDD8C
	0x032525A4 MOVI D0, 0xFFFFFFFF
	0x032525A8 STR W21, [X22 + 0x10]
	0x032525AC STP X20, X19, [X22 + 0x18]
	0x032525B0 STR D0, [X22 + 0x28]
	0x032525B4 LDP X20, X19, [X31 + 0x20]
	0x032525B8 LDP X22, X21, [X31 + 0x10]
	0x032525BC LDR X30, [X31], #0x30
	0x032525C0 RET
	0x032525C4 STR X30, [X31 - 0x20]!
	0x032525C8 STP X20, X19, [X31 + 0x10]
	0x032525CC MOV W19, W1
	0x032525D0 MOV X1, X31
	0x032525D4 MOV X20, X0
	0x032525D8 BL 0x33BDD8C
	0x032525DC MOVI D0, 0xFFFFFFFF
	0x032525E0 STR W19, [X20 + 0x10]
	0x032525E4 STP X31, X31, [X20 + 0x18]
	0x032525E8 STR D0, [X20 + 0x28]
	0x032525EC LDP X20, X19, [X31 + 0x10]
	0x032525F0 LDR X30, [X31], #0x20
	0x032525F4 RET
	0x032525F8 STP X30, X23, [X31 - 0x30]!
	0x032525FC STP X22, X21, [X31 + 0x10]
	0x03252600 STP X20, X19, [X31 + 0x20]
	0x03252604 MOV W22, W1
	0x03252608 MOV X1, X31
	0x0325260C MOV W19, W4
	0x03252610 MOV X20, X3
	0x03252614 MOV X21, X2
	0x03252618 MOV X23, X0
	0x0325261C BL 0x33BDD8C
	0x03252620 STR W22, [X23 + 0x10]
	0x03252624 STP X21, X20, [X23 + 0x18]
	0x03252628 MOV W1, W19
	0x0325262C LDP X20, X19, [X31 + 0x20]
	0x03252630 LDP X22, X21, [X31 + 0x10]
	0x03252634 MOVN W8, 0x0
	0x03252638 STR W8, [X23 + 0x28]
	0x0325263C MOV X0, X23
	0x03252640 LDP X30, X23, [X31], #0x30
	0x03252644 B 0x3252470
	0x03252648 STP X30, X21, [X31 - 0x20]!
	0x0325264C STP X20, X19, [X31 + 0x10]
	0x03252650 ADRP X21, 0x118A000
	0x03252654 ADRP X20, 0xECF000
	0x03252658 LDRB W8, [X21 + 0x4C6]
	0x0325265C LDR X20, [X20 + 0x320]
	0x03252660 MOV X19, X0
	0x03252664 TBNZ X8, 0x0, 0x325267C
	0x03252668 ADRP X0, 0xECF000
	0x0325266C LDR X0, [X0 + 0x320]
	0x03252670 BL 0x1C16CF4
	0x03252674 MOVZ W8, 0x1
	0x03252678 STRB W8, [X21 + 0x4C6]
	0x0325267C MOV X0, X19
	0x03252680 MOV X1, X31
	0x03252684 BL 0x32607B0
	0x03252688 MOVZ W8, 0x40
	0x0325268C MOVI V0.2S, 0x40
	0x03252690 STR W8, [X19 + 0x38]
	0x03252694 STR D0, [X19 + 0x10]
	0x03252698 LDR X0, [X20]
	0x0325269C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {39}
	006 Move TEMP, X2
	007 And TEMP, TEMP, -2147483648
	008 Compare TEMP, -2147483648
	009 JumpIfEqual {51}
	010 Move TEMP, X3
	011 And TEMP, TEMP, -2147483648
	012 Compare TEMP, -2147483648
	013 JumpIfEqual {32}
	014 Move W8, [X1+24]
	015 Subtract W8, W8, W3
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W8, [X0+16]
	018 Move X19, X0
	019 Compare W8, 0
	020 JumpIfNotEqual {80}
	021 Move X8, [X19]
	022 Move X0, X19
	023 Move X9, [X8+568]
	024 Move X4, [X8+576]
	025 NotImplemented "Instruction BLR not yet implemented."
	026 Move X0, X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Call HashAlgorithm.CaptureHashCodeAndReinitialize, X0
	031 Return X0
	032 Move X0, 0xEAA000
	033 Move X0, [X0+1400]
	034 Call 0x1C17D08
	035 Call 0x1C17F10
	036 Move X19, X0
	037 Move X0, 0xED1000
	038 Move X0, [X0+3352]
	039 Move X0, 0xEA7000
	040 Move X0, [X0+1320]
	041 Call 0x1C17D08
	042 Call 0x1C17F10
	043 Move X19, X0
	044 Move X0, 0xECD000
	045 Move X0, [X0+3912]
	046 Call 0x1C17D08
	047 Move X1, X0
	048 Move X0, X19
	049 Move X2, X31
	050 Call ArgumentNullException..ctor, X0, X1
	051 Move X0, 0xEAA000
	052 Move X0, [X0+1888]
	053 Call 0x1C17D08
	054 Call 0x1C17F10
	055 Move X19, X0
	056 Move X0, 0xED1000
	057 Move X0, [X0+3472]
	058 Call 0x1C17D08
	059 Move X20, X0
	060 Move X0, 0xECA000
	061 Move X0, [X0+1648]
	062 Call 0x1C17D08
	063 Move X2, X0
	064 Move X0, X19
	065 Move X1, X20
	066 Move X3, X31
	067 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	068 Move X0, 0xEAA000
	069 Move X0, [X0+1400]
	070 Call 0x1C17D08
	071 Call 0x1C17F10
	072 Move X19, X0
	073 Move X0, 0xECA000
	074 Move X0, [X0+1888]
	075 Call 0x1C17D08
	076 Move X1, X0
	077 Move X0, X19
	078 Move X2, X31
	079 Call ArgumentException..ctor, X0, X1
	080 Move X0, 0xECB000
	081 Move X0, [X0+1208]
	082 Call 0x1C17D08
	083 Call 0x1C17F10
	084 Move X1, X31
	085 Move X2, X31
	086 Move X19, X0
	087 Call ObjectDisposedException..ctor, X0, X1
	088 Move X0, 0xED1000
	089 Move X0, [X0+3800]
	090 Call 0x1C17D08
	091 Move X1, X0
	092 Move X0, X19
	093 Call 0x1C17DEC

Method: System.Byte[] ComputeHash(System.IO.Stream inputStream)

Disassembly:
	0x032526A0 CBNZ W8, 0x32526AC
	0x032526A4 BL 0x1C16DFC
	0x032526A8 LDR X0, [X20]
	0x032526AC LDR X8, [X0 + 0xB8]
	0x032526B0 LDR V0, [X8]
	0x032526B4 STUR V0, [X19 + 0x28]
	0x032526B8 LDP X20, X19, [X31 + 0x10]
	0x032526BC LDP X30, X21, [X31], #0x20
	0x032526C0 RET
	0x032526C4 STP X30, X21, [X31 - 0x20]!
	0x032526C8 STP X20, X19, [X31 + 0x10]
	0x032526CC ADRP X20, 0x118A000
	0x032526D0 LDRB W8, [X20 + 0x4C7]
	0x032526D4 MOV X19, X0
	0x032526D8 TBNZ X8, 0x0, 0x32526FC
	0x032526DC ADRP X0, 0xEA1000
	0x032526E0 LDR X0, [X0 + 0x618]
	0x032526E4 BL 0x1C16CF4
	0x032526E8 ADRP X0, 0xECF000
	0x032526EC LDR X0, [X0 + 0x320]
	0x032526F0 BL 0x1C16CF4
	0x032526F4 MOVZ W8, 0x1
	0x032526F8 STRB W8, [X20 + 0x4C7]
	0x032526FC LDR X0, [X19 + 0x20]
	0x03252700 CBNZ X0, 0x3252764
	0x03252704 ADRP X21, 0xECF000
	0x03252708 LDR X21, [X21 + 0x320]
	0x0325270C LDR X8, [X19]
	0x03252710 MOV X0, X19
	0x03252714 LDR X9, [X8 + 0x2B8]
	0x03252718 LDR X1, [X8 + 0x2C0]
	0x0325271C BLR X9
	0x03252720 LDR X0, [X21]
	0x03252724 LDR X20, [X19 + 0x20]
	0x03252728 LDR W8, [X0 + 0xE0]
	0x0325272C CBNZ W8, 0x3252734
	0x03252730 BL 0x1C16DFC
	0x03252734 MOV X0, X20
	0x03252738 BL 0x32527AC
	0x0325273C TBNZ X0, 0x0, 0x325270C
	0x03252740 LDR X0, [X21]
	0x03252744 LDR X20, [X19 + 0x20]
	0x03252748 LDR W8, [X0 + 0xE0]
	0x0325274C CBNZ W8, 0x3252754
	0x03252750 BL 0x1C16DFC
	0x03252754 MOV X0, X20
	0x03252758 BL 0x32528CC
	0x0325275C TBNZ X0, 0x0, 0x325270C
	0x03252760 LDR X0, [X19 + 0x20]
	0x03252764 CBZ X0, 0x325279C
	0x03252768 MOV X1, X31
	0x0325276C BL 0x33A01F0
	0x03252770 CBZ X0, 0x3252790
	0x03252774 ADRP X8, 0xEA1000
	0x03252778 LDR X8, [X8 + 0x618]
	0x0325277C MOV X19, X0
	0x03252780 LDR X20, [X8]
	0x03252784 MOV X1, X20
	0x03252788 BL 0x1C16E00
	0x0325278C CBZ X0, 0x32527A0
	0x03252790 LDP X20, X19, [X31 + 0x10]
	0x03252794 LDP X30, X21, [X31], #0x20
	0x03252798 RET
	0x0325279C BL 0x1C16F20
	0x032527A0 MOV X0, X19
	0x032527A4 MOV X1, X20
	0x032527A8 BL 0x1C171E0
	0x032527AC STP X30, X21, [X31 - 0x20]!
	0x032527B0 STP X20, X19, [X31 + 0x10]
	0x032527B4 ADRP X21, 0x118A000
	0x032527B8 ADRP X20, 0xECF000
	0x032527BC LDRB W8, [X21 + 0x4CA]
	0x032527C0 LDR X20, [X20 + 0x320]
	0x032527C4 MOV X19, X0
	0x032527C8 TBNZ X8, 0x0, 0x32527E0
	0x032527CC ADRP X0, 0xECF000
	0x032527D0 LDR X0, [X0 + 0x320]
	0x032527D4 BL 0x1C16CF4
	0x032527D8 MOVZ W8, 0x1
	0x032527DC STRB W8, [X21 + 0x4CA]
	0x032527E0 LDR X0, [X20]
	0x032527E4 LDR W8, [X0 + 0xE0]
	0x032527E8 CBNZ W8, 0x32527F0
	0x032527EC BL 0x1C16DFC
	0x032527F0 CBZ X19, 0x3252880
	0x032527F4 LDR W8, [X19 + 0x18]
	0x032527F8 CMP W8, 0x8
	0x032527FC B.NE 0x3252880
	0x03252800 MOV X0, X19
	0x03252804 MOV X1, X31
	0x03252808 BL 0x3261744
	0x0325280C LDR X8, [X20]
	0x03252810 MOV X19, X0
	0x03252814 LDR W9, [X8 + 0xE0]
	0x03252818 CBNZ W9, 0x3252824
	0x0325281C MOV X0, X8
	0x03252820 BL 0x1C16DFC
	0x03252824 MOV X0, X19
	0x03252828 BL 0x3252E04
	0x0325282C ORR X8, X31, 0xFEFEFEFEFEFEFEFE
	0x03252830 CMP X0, X8
	0x03252834 B.EQ 0x3252858
	0x03252838 ORR X8, X31, 0x101010101010101
	0x0325283C CMP X0, X8
	0x03252840 B.EQ 0x3252858
	0x03252844 ORR X8, X31, 0xE0E0E0E0E0E0E0E
	0x03252848 MOVK X8, 0x1F1F
	0x0325284C MOVK X8, 0x1F1F0000
	0x03252850 CMP X0, X8
	0x03252854 B.NE 0x3252860
	0x03252858 MOVZ W0, 0x1
	0x0325285C B 0x3252874
	0x03252860 ORR X8, X31, 0xF1F1F1F1F1F1F1F1
	0x03252864 MOVK X8, 0xE0E0
	0x03252868 MOVK X8, 0xE0E00000
	0x0325286C CMP X0, X8
	0x03252870 CSET W0, EQ
	0x03252874 LDP X20, X19, [X31 + 0x10]
	0x03252878 LDP X30, X21, [X31], #0x20
	0x0325287C RET
	0x03252880 ADRP X0, 0xED0000
	0x03252884 LDR X0, [X0 + 0xF08]
	0x03252888 BL 0x1C16D08
	0x0325288C MOV X1, X31
	0x03252890 BL 0x33BDD84
	0x03252894 MOV X19, X0
	0x03252898 ADRP X0, 0xECE000
	0x0325289C LDR X0, [X0 + 0xCE0]
	0x032528A0 BL 0x1C16D08
	0x032528A4 BL 0x1C16F10

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0x118B000
	007 Move W8, [X21+1210]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0xECD000
	015 Move X0, [X0+3408]
	016 Call 0x1C17CF4
	017 Move X0, 0xECD000
	018 Move X0, [X0+3432]
	019 Call 0x1C17CF4
	020 Move X0, 0xED1000
	021 Move X0, [X0+760]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+1210], W8
	025 Move [X31+24], X31
	026 Move W8, [X20+16]
	027 Compare W8, 0
	028 JumpIfNotEqual {124}
	029 Move X8, 0xECD000
	030 Move X8, [X8+3432]
	031 Move X21, 0xECD000
	032 Move X0, [X8]
	033 Move W8, [X0+224]
	034 Move X21, [X21+3408]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X21, [X21]
	039 Move X0, [X21+32]
	040 Move W8, [X0+309]
	041 Move TEMP, X8
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfEqual {46}
	045 Call 0x1C5D684
	046 Move X8, [X0+192]
	047 Move X0, [X8+8]
	048 Move W8, [X0+309]
	049 Move TEMP, X8
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfEqual {54}
	053 Call 0x1C5D684
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move X0, [X21+32]
	059 Move W8, [X0+309]
	060 Move TEMP, X8
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfEqual {65}
	064 Call 0x1C5D684
	065 Move X8, [X0+192]
	066 Move X0, [X8+8]
	067 Move W8, [X0+309]
	068 Move TEMP, X8
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfEqual {73}
	072 Call 0x1C5D684
	073 Move X8, [X0+184]
	074 Move X0, [X8]
	075 Compare X0, 0
	076 JumpIfEqual {138}
	077 Move X8, [X0]
	078 Move W1, 4096
	079 Move X9, [X8+376]
	080 Move X2, [X8+384]
	081 NotImplemented "Instruction BLR not yet implemented."
	082 Add X8, X31, 24
	083 Move [X31+8], X31
	084 Move [X31+16], X8
	085 Move [X31+24], X0
	086 Compare X0, 0
	087 JumpIfEqual {110}
	088 Move X1, X0
	089 Compare X19, 0
	090 JumpIfEqual {123}
	091 Move X8, [X19]
	092 Move W3, [X1+24]
	093 Move X9, [X8+856]
	094 Move X4, [X8+864]
	095 Move X0, X19
	096 Move W2, W31
	097 NotImplemented "Instruction BLR not yet implemented."
	098 Move W3, W0
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Move X8, [X20]
	101 Move X1, [X31+24]
	102 Move X9, [X8+568]
	103 Move X4, [X8+576]
	104 Move X0, X20
	105 Move W2, W31
	106 NotImplemented "Instruction BLR not yet implemented."
	107 Move X1, [X31+24]
	108 Compare X1, 0
	109 JumpIfNotEqual {89}
	110 Call 0x1C17F20
	111 Move X0, X20
	112 Call HashAlgorithm.CaptureHashCodeAndReinitialize, X0
	113 Move X19, X0
	114 Add X0, X31, 8
	115 Call 0x1BB5B7C
	116 Move X0, X19
	117 Move X20, [X31+48]
	118 Move X19, [X31+56]
	119 Move X30, [X31+32]
	120 Move X21, [X31+40]
	121 Add X31, X31, 64
	122 Return X0
	123 Call 0x1C17F20
	124 Move X0, 0xECB000
	125 Move X0, [X0+1208]
	126 Call 0x1C17D08
	127 Call 0x1C17F10
	128 Move X1, X31
	129 Move X2, X31
	130 Move X19, X0
	131 Call ObjectDisposedException..ctor, X0, X1
	132 Move X0, 0xED1000
	133 Move X0, [X0+3808]
	134 Call 0x1C17D08
	135 Move X1, X0
	136 Move X0, X19
	137 Call 0x1C17DEC
	138 Call 0x1C17F20
	139 Move X19, X0
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Move X0, X19
	142 Call 0x3EB2AD0
	143 Move X8, [X0]
	144 Move [X31+8], X8
	145 Call 0x3EB2AE0
	146 Move X19, X31
	147 Move X19, X0
	148 Add X0, X31, 8
	149 Call 0x1BB5B7C
	150 Move X0, X19
	151 Call 0x1D2D690
	152 Call 0x1991590

Method: System.Byte[] CaptureHashCodeAndReinitialize()

Disassembly:
	0x03252498 MOV W20, W1
	0x0325249C BL 0x1C16D08
	0x032524A0 MOVZ W1, 0x1
	0x032524A4 BL 0x1C16D6C
	0x032524A8 MOV X19, X0
	0x032524AC STR W20, [X31 + 0xC]
	0x032524B0 ADRP X0, 0xEA1000
	0x032524B4 LDR X0, [X0 + 0x758]
	0x032524B8 BL 0x1C16D08
	0x032524BC ADD X1, X31, 0xC
	0x032524C0 BL 0x1C16E04
	0x032524C4 MOV X20, X0
	0x032524C8 MOV X0, X19
	0x032524CC BL 0x19903C0
	0x032524D0 MOV X0, X19
	0x032524D4 MOV X1, X20
	0x032524D8 BL 0x19980B4
	0x032524DC MOV X0, X19
	0x032524E0 MOV X1, X31
	0x032524E4 MOV X2, X20
	0x032524E8 BL 0x1993444
	0x032524EC ADRP X0, 0xED0000
	0x032524F0 LDR X0, [X0 + 0x1D0]
	0x032524F4 BL 0x1C16D08
	0x032524F8 MOV X1, X19
	0x032524FC MOV X2, X31
	0x03252500 BL 0x33BFB40
	0x03252504 MOV X19, X0
	0x03252508 ADRP X0, 0xEA9000
	0x0325250C LDR X0, [X0 + 0x578]
	0x03252510 BL 0x1C16D08
	0x03252514 BL 0x1C16F10
	0x03252518 MOV X20, X0
	0x0325251C ADRP X0, 0xEAB000
	0x03252520 LDR X0, [X0 + 0xEC8]
	0x03252524 BL 0x1C16D08
	0x03252528 MOV X2, X0
	0x0325252C MOV X0, X20
	0x03252530 MOV X1, X19
	0x03252534 MOV X3, X31
	0x03252538 BL 0x330E16C
	0x0325253C ADRP X0, 0xED0000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x118B000
	005 Move W8, [X20+1211]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xEA2000
	012 Move X0, [X0+1560]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1211], W8
	016 Move X8, [X19]
	017 Move X0, X19
	018 Move X9, [X8+584]
	019 Move X1, [X8+592]
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move [X19+24], X0
	022 Compare X0, 0
	023 JumpIfEqual {50}
	024 Move X1, X31
	025 Call Array.Clone, X0
	026 Move X8, [X19]
	027 Move X20, X0
	028 Move X0, X19
	029 Move X9, [X8+600]
	030 Move X1, [X8+608]
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Compare X20, 0
	033 JumpIfEqual {45}
	034 Move X8, 0xEA2000
	035 Move X8, [X8+1560]
	036 Move X0, X20
	037 Move X19, [X8]
	038 Move X1, X19
	039 Call 0x1C17E00
	040 Compare X0, 0
	041 JumpIfNotEqual {46}
	042 Move X0, X20
	043 Move X1, X19
	044 Call 0x1C181E0
	045 Move X0, X31
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Return X0
	050 Call 0x1C17F20

Method: System.Void Dispose()

Disassembly:
	0x032528A8 MOV X1, X19
	0x032528AC MOV X20, X0
	0x032528B0 BL 0x3252170
	0x032528B4 ADRP X0, 0xED0000
	0x032528B8 LDR X0, [X0 + 0xF38]
	0x032528BC BL 0x1C16D08
	0x032528C0 MOV X1, X0
	0x032528C4 MOV X0, X20
	0x032528C8 BL 0x1C16DEC
	0x032528CC STP X30, X21, [X31 - 0x20]!
	0x032528D0 STP X20, X19, [X31 + 0x10]
	0x032528D4 ADRP X21, 0x118A000
	0x032528D8 ADRP X20, 0xECF000
	0x032528DC LDRB W8, [X21 + 0x4CB]
	0x032528E0 LDR X20, [X20 + 0x320]
	0x032528E4 MOV X19, X0
	0x032528E8 TBNZ X8, 0x0, 0x3252900
	0x032528EC ADRP X0, 0xECF000
	0x032528F0 LDR X0, [X0 + 0x320]
	0x032528F4 BL 0x1C16CF4
	0x032528F8 MOVZ W8, 0x1
	0x032528FC STRB W8, [X21 + 0x4CB]
	0x03252900 LDR X0, [X20]
	0x03252904 LDR W8, [X0 + 0xE0]
	0x03252908 CBNZ W8, 0x3252910
	0x0325290C BL 0x1C16DFC
	0x03252910 CBZ X19, 0x3252A8C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x118B000
	006 Move X20, 0xEA9000
	007 Move W8, [X21+1212]
	008 Move X20, [X20+3088]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEA9000
	015 Move X0, [X0+3088]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1212], W8
	019 Move X8, [X19]
	020 Move W1, 1
	021 Move X0, X19
	022 Move X9, [X8+504]
	023 Move X2, [X8+512]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X1, X31
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call GC.SuppressFinalize, X0
	037 Return 

Method: System.Void Clear()

Disassembly:
	0x03252914 LDR W8, [X19 + 0x18]
	0x03252918 CMP W8, 0x8
	0x0325291C B.NE 0x3252A8C
	0x03252920 MOV X0, X19
	0x03252924 MOV X1, X31
	0x03252928 BL 0x3261744
	0x0325292C LDR X8, [X20]
	0x03252930 MOV X19, X0
	0x03252934 LDR W9, [X8 + 0xE0]
	0x03252938 CBNZ W9, 0x3252944
	0x0325293C MOV X0, X8
	0x03252940 BL 0x1C16DFC
	0x03252944 MOV X0, X19
	0x03252948 BL 0x3252E04
	0x0325294C MOVZ X8, 0x10D
	0x03252950 MOVK X8, 0x10E0000
	0x03252954 MOVK X8, 0x11F
	0x03252958 MOVK X8, 0x11F0000
	0x0325295C CMP X0, X8
	0x03252960 B.LE 0x32529B0
	0x03252964 MOVZ X8, 0xE00
	0x03252968 MOVK X8, 0xE010000
	0x0325296C MOVK X8, 0x1F01
	0x03252970 MOVK X8, 0x1F010000
	0x03252974 CMP X0, X8
	0x03252978 B.GT 0x32529FC
	0x0325297C MOVZ X8, 0x10E
	0x03252980 MOVK X8, 0x10E0000
	0x03252984 MOVK X8, 0x11F
	0x03252988 MOVK X8, 0x11F0000
	0x0325298C CMP X0, X8
	0x03252990 B.EQ 0x3252A60
	0x03252994 ORR X8, X31, 0x1E001E001E001E0
	0x03252998 MOVK X8, 0x1F1
	0x0325299C MOVK X8, 0x1F10000
	0x032529A0 CMP X0, X8
	0x032529A4 B.EQ 0x3252A60

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x118B000
	006 Move X20, 0xEA2000
	007 Move W8, [X21+1213]
	008 Move X20, [X20+3584]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEA2000
	015 Move X0, [X0+3584]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1213], W8
	019 Move X8, [X19]
	020 Move X1, [X20]
	021 NotImplemented "Instruction LDRH not yet implemented."
	022 Compare X9, 0
	023 JumpIfEqual {30}
	024 Move X10, [X8+176]
	025 Add X10, X10, 8
	026 NotImplemented "Instruction LDUR not yet implemented."
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Subtract X9, X9, 1
	029 Add X10, X10, 16
	030 Move X0, X19
	031 Move W2, W31
	032 Call 0x1C5D788
	033 NotImplemented "Instruction LDRSW not yet implemented."
	034 Add X8, X8, X9
	035 Add X0, X8, 312
	036 Move X2, [X0]
	037 Move X1, [X0+8]
	038 Move X0, X19
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 CallNoReturn X2

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x032529A8 ORR X8, X31, 0x1FE01FE01FE01FE
	0x032529AC B 0x3252A58
	0x032529B0 MOVZ X8, 0xF1FD
	0x032529B4 MOVK X8, 0xF1FE0000

ISIL:
	001 Move TEMP, X1
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfNotEqual {7}
	005 Move W8, 1
	006 Move [X0+16], W8
	007 Return 

Method: System.Int32 get_InputBlockSize()

Disassembly:
	0x032529B8 MOVK X8, 0xE0FE
	0x032529BC MOVK X8, 0xE0FE0000

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Int32 get_OutputBlockSize()

Disassembly:
	0x032529C0 CMP X0, X8
	0x032529C4 B.LE 0x3252A38

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Boolean get_CanTransformMultipleBlocks()

Disassembly:
	0x032529C8 MOVZ X8, 0xF1FE
	0x032529CC MOVK X8, 0xF1FE0000

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Int32 TransformBlock(System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount, System.Byte[] outputBuffer, System.Int32 outputOffset)

Disassembly:
	0x032529D0 MOVK X8, 0xE0FE
	0x032529D4 MOVK X8, 0xE0FE0000
	0x032529D8 CMP X0, X8
	0x032529DC B.EQ 0x3252A60
	0x032529E0 ORR X8, X31, 0xFE01FE01FE01FE01
	0x032529E4 CMP X0, X8
	0x032529E8 B.EQ 0x3252A60
	0x032529EC ORR X8, X31, 0xFE1FFE1FFE1FFE1F
	0x032529F0 MOVK X8, 0xFE0E
	0x032529F4 MOVK X8, 0xFE0E0000
	0x032529F8 B 0x3252A58
	0x032529FC MOVZ X8, 0xE01
	0x03252A00 MOVK X8, 0xE010000
	0x03252A04 MOVK X8, 0x1F01
	0x03252A08 MOVK X8, 0x1F010000
	0x03252A0C CMP X0, X8
	0x03252A10 B.EQ 0x3252A60
	0x03252A14 ORR X8, X31, 0x1FE01FE01FE01FE0
	0x03252A18 MOVK X8, 0xEF1
	0x03252A1C MOVK X8, 0xEF10000
	0x03252A20 CMP X0, X8
	0x03252A24 B.EQ 0x3252A60
	0x03252A28 ORR X8, X31, 0x1FFE1FFE1FFE1FFE
	0x03252A2C MOVK X8, 0xEFE
	0x03252A30 MOVK X8, 0xEFE0000
	0x03252A34 B 0x3252A58
	0x03252A38 ORR X8, X31, 0xE001E001E001E001
	0x03252A3C MOVK X8, 0xF101
	0x03252A40 MOVK X8, 0xF1010000
	0x03252A44 CMP X0, X8
	0x03252A48 B.EQ 0x3252A60
	0x03252A4C ORR X8, X31, 0xE01FE01FE01FE01F
	0x03252A50 MOVK X8, 0xF10E
	0x03252A54 MOVK X8, 0xF10E0000
	0x03252A58 CMP X0, X8
	0x03252A5C B.NE 0x3252A70
	0x03252A60 MOVZ W0, 0x1
	0x03252A64 LDP X20, X19, [X31 + 0x10]
	0x03252A68 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move W20, W5
	009 Move X21, X4
	010 Move W19, W3
	011 Move W22, W2
	012 Move X23, X1
	013 Move X24, X0
	014 Call HashAlgorithm.ValidateTransformBlock, X0, X1, X2, X3
	015 Move X8, [X24]
	016 Move W9, 1
	017 Move [X24+32], W9
	018 Move X0, X24
	019 Move X9, [X8+568]
	020 Move X4, [X8+576]
	021 Move X1, X23
	022 Move W2, W22
	023 Move W3, W19
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Compare X21, 0
	026 JumpIfEqual {36}
	027 NotImplemented "Instruction CMP not yet implemented."
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X0, X23
	030 Move W1, W22
	031 Move X2, X21
	032 Move W3, W20
	033 Move W4, W19
	034 Move X5, X31
	035 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	036 Move W0, W19
	037 Move X20, [X31+48]
	038 Move X19, [X31+56]
	039 Move X22, [X31+32]
	040 Move X21, [X31+40]
	041 Move X24, [X31+16]
	042 Move X23, [X31+24]
	043 Move X30, [X31+64]
	044 Return X0

Method: System.Byte[] TransformFinalBlock(System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount)

Disassembly:
	0x03252BB0 BL 0x1C16E00
	0x03252BB4 CBNZ X0, 0x3252BC8
	0x03252BB8 MOV X0, X21
	0x03252BBC MOV X1, X22
	0x03252BC0 BL 0x1C171E0
	0x03252BC4 STR X31, [X20 + 0x20]
	0x03252BC8 LDR W8, [X19 + 0x18]
	0x03252BCC LDP X22, X21, [X31 + 0x10]
	0x03252BD0 UBFM W8, W8, 0x1D, 0x1C
	0x03252BD4 STR W8, [X20 + 0x38]
	0x03252BD8 LDP X20, X19, [X31 + 0x20]
	0x03252BDC LDP X30, X23, [X31], #0x30
	0x03252BE0 RET
	0x03252BE4 ADRP X0, 0xEA6000
	0x03252BE8 LDR X0, [X0 + 0x528]
	0x03252BEC BL 0x1C16D08
	0x03252BF0 BL 0x1C16F10
	0x03252BF4 MOV X19, X0
	0x03252BF8 ADRP X0, 0xEAB000
	0x03252BFC LDR X0, [X0 + 0xEC8]
	0x03252C00 BL 0x1C16D08
	0x03252C04 MOV X1, X0
	0x03252C08 MOV X0, X19
	0x03252C0C MOV X2, X31
	0x03252C10 BL 0x330E100
	0x03252C14 ADRP X0, 0xED0000
	0x03252C18 LDR X0, [X0 + 0xF48]
	0x03252C1C BL 0x1C16D08
	0x03252C20 MOV X1, X0
	0x03252C24 MOV X0, X19
	0x03252C28 BL 0x1C16DEC
	0x03252C2C ADRP X0, 0xED0000
	0x03252C30 LDR X0, [X0 + 0xF08]
	0x03252C34 BL 0x1C16D08
	0x03252C38 MOV X1, X31
	0x03252C3C BL 0x33BDD84
	0x03252C40 MOV X19, X0
	0x03252C44 ADRP X0, 0xEA9000
	0x03252C48 LDR X0, [X0 + 0x578]
	0x03252C4C BL 0x1C16D08
	0x03252C50 BL 0x1C16F10
	0x03252C54 MOV X1, X19
	0x03252C58 MOV X2, X31
	0x03252C5C MOV X20, X0
	0x03252C60 BL 0x3314A68
	0x03252C64 B 0x3252CBC
	0x03252C68 ADRP X0, 0xED0000
	0x03252C6C LDR X0, [X0 + 0xF50]
	0x03252C70 B 0x3252C7C
	0x03252C74 ADRP X0, 0xED0000
	0x03252C78 LDR X0, [X0 + 0xF58]
	0x03252C7C BL 0x1C16D08
	0x03252C80 MOV X1, X31
	0x03252C84 BL 0x33BDD84
	0x03252C88 MOV X19, X0
	0x03252C8C ADRP X0, 0xECE000
	0x03252C90 LDR X0, [X0 + 0xCE0]
	0x03252C94 BL 0x1C16D08
	0x03252C98 BL 0x1C16F10
	0x03252C9C MOV X20, X0
	0x03252CA0 ADRP X0, 0xECE000
	0x03252CA4 LDR X0, [X0 + 0xEF8]
	0x03252CA8 BL 0x1C16D08
	0x03252CAC MOV X2, X0
	0x03252CB0 MOV X0, X20
	0x03252CB4 MOV X1, X19
	0x03252CB8 BL 0x3252374
	0x03252CBC ADRP X0, 0xED0000
	0x03252CC0 LDR X0, [X0 + 0xF48]
	0x03252CC4 BL 0x1C16D08
	0x03252CC8 MOV X1, X0
	0x03252CCC MOV X0, X20
	0x03252CD0 BL 0x1C16DEC
	0x03252CD4 STR X30, [X31 - 0x20]!
	0x03252CD8 STP X20, X19, [X31 + 0x10]
	0x03252CDC ADRP X19, 0x118A000
	0x03252CE0 ADRP X20, 0xED0000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x118B000
	008 Move W8, [X23+1214]
	009 Move W20, W3
	010 Move W21, W2
	011 Move X22, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xEAA000
	018 Move X0, [X0+3272]
	019 Call 0x1C17CF4
	020 Move X0, 0xEA2000
	021 Move X0, [X0+1560]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+1214], W8
	025 Move X0, X19
	026 Move X1, X22
	027 Move W2, W21
	028 Move W3, W20
	029 Call HashAlgorithm.ValidateTransformBlock, X0, X1, X2, X3
	030 Move X8, [X19]
	031 Move X0, X19
	032 Move X1, X22
	033 Move W2, W21
	034 Move X9, [X8+568]
	035 Move X4, [X8+576]
	036 Move W3, W20
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Move X0, X19
	039 Call HashAlgorithm.CaptureHashCodeAndReinitialize, X0
	040 Move [X19+24], X0
	041 Compare W20, 0
	042 JumpIfEqual {56}
	043 Move X8, 0xEA2000
	044 Move X8, [X8+1560]
	045 Move W1, W20
	046 Move X0, [X8]
	047 Call 0x1C17D6C
	048 Move X23, X0
	049 Move X0, X22
	050 Move W1, W21
	051 Move X2, X23
	052 Move W3, W31
	053 Move W4, W20
	054 Move X5, X31
	055 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	056 Move X8, 0xEAA000
	057 Move X8, [X8+3272]
	058 Move X20, [X8]
	059 Move X8, [X20+56]
	060 Compare X8, 0
	061 JumpIfNotEqual {65}
	062 Move X0, X20
	063 Call 0x1C5D6E0
	064 Move X8, [X20+56]
	065 Move X0, [X8+16]
	066 Move W8, [X0+309]
	067 Move TEMP, X8
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfEqual {72}
	071 Call 0x1C5D684
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1C17DFC
	076 Move X8, [X20+56]
	077 Move X0, [X8+16]
	078 Move W8, [X0+309]
	079 Move TEMP, X8
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfEqual {84}
	083 Call 0x1C5D684
	084 Move X8, [X0+184]
	085 Move X23, [X8]
	086 Move [X19+32], W31
	087 Move X20, [X31+32]
	088 Move X19, [X31+40]
	089 Move X22, [X31+16]
	090 Move X21, [X31+24]
	091 Move X0, X23
	092 Move X30, [X31+48]
	093 Move X23, [X31+56]
	094 Return X0

Method: System.Void ValidateTransformBlock(System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount)

Disassembly:
	0x03252A6C RET
	0x03252A70 MOVZ X8, 0xFEF1
	0x03252A74 MOVK X8, 0xFEF10000
	0x03252A78 MOVK X8, 0xFEE0
	0x03252A7C MOVK X8, 0xFEE00000
	0x03252A80 CMP X0, X8
	0x03252A84 CSET W0, EQ
	0x03252A88 B 0x3252A64
	0x03252A8C ADRP X0, 0xED0000
	0x03252A90 LDR X0, [X0 + 0xF08]
	0x03252A94 BL 0x1C16D08
	0x03252A98 MOV X1, X31
	0x03252A9C BL 0x33BDD84
	0x03252AA0 MOV X19, X0
	0x03252AA4 ADRP X0, 0xECE000
	0x03252AA8 LDR X0, [X0 + 0xCE0]
	0x03252AAC BL 0x1C16D08
	0x03252AB0 BL 0x1C16F10
	0x03252AB4 MOV X1, X19
	0x03252AB8 MOV X20, X0
	0x03252ABC BL 0x3252170
	0x03252AC0 ADRP X0, 0xED0000
	0x03252AC4 LDR X0, [X0 + 0xF40]
	0x03252AC8 BL 0x1C16D08
	0x03252ACC MOV X1, X0
	0x03252AD0 MOV X0, X20
	0x03252AD4 BL 0x1C16DEC
	0x03252AD8 STP X30, X23, [X31 - 0x30]!
	0x03252ADC STP X22, X21, [X31 + 0x10]
	0x03252AE0 STP X20, X19, [X31 + 0x20]
	0x03252AE4 ADRP X21, 0x118A000
	0x03252AE8 LDRB W8, [X21 + 0x4C8]
	0x03252AEC MOV X19, X1
	0x03252AF0 MOV X20, X0
	0x03252AF4 TBNZ X8, 0x0, 0x3252B18
	0x03252AF8 ADRP X0, 0xEA1000
	0x03252AFC LDR X0, [X0 + 0x618]
	0x03252B00 BL 0x1C16CF4
	0x03252B04 ADRP X0, 0xECF000
	0x03252B08 LDR X0, [X0 + 0x320]
	0x03252B0C BL 0x1C16CF4
	0x03252B10 MOVZ W8, 0x1
	0x03252B14 STRB W8, [X21 + 0x4C8]
	0x03252B18 CBZ X19, 0x3252BE4
	0x03252B1C LDR W8, [X19 + 0x18]
	0x03252B20 MOV X0, X20
	0x03252B24 MOV X2, X31
	0x03252B28 UBFM W1, W8, 0x1D, 0x1C
	0x03252B2C BL 0x3260DF0
	0x03252B30 TBZ X0, 0x0, 0x3252C2C
	0x03252B34 ADRP X21, 0xECF000
	0x03252B38 LDR X21, [X21 + 0x320]
	0x03252B3C LDR X0, [X21]
	0x03252B40 LDR W8, [X0 + 0xE0]
	0x03252B44 CBNZ W8, 0x3252B4C
	0x03252B48 BL 0x1C16DFC
	0x03252B4C MOV X0, X19
	0x03252B50 BL 0x32527AC
	0x03252B54 TBNZ X0, 0x0, 0x3252C68
	0x03252B58 LDR X0, [X21]
	0x03252B5C LDR W8, [X0 + 0xE0]
	0x03252B60 CBNZ W8, 0x3252B68
	0x03252B64 BL 0x1C16DFC
	0x03252B68 MOV X0, X19
	0x03252B6C BL 0x32528CC
	0x03252B70 TBNZ X0, 0x0, 0x3252C74
	0x03252B74 MOV X0, X19
	0x03252B78 MOV X1, X31
	0x03252B7C BL 0x33A01F0
	0x03252B80 CBZ X0, 0x3252BC4
	0x03252B84 ADRP X23, 0xEA1000
	0x03252B88 LDR X23, [X23 + 0x618]
	0x03252B8C MOV X21, X0
	0x03252B90 LDR X22, [X23]
	0x03252B94 MOV X1, X22
	0x03252B98 BL 0x1C16E00
	0x03252B9C CBZ X0, 0x3252BB8
	0x03252BA0 STR X0, [X20 + 0x20]
	0x03252BA4 LDR X22, [X23]
	0x03252BA8 MOV X0, X21
	0x03252BAC MOV X1, X22

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {31}
	006 Move TEMP, X2
	007 And TEMP, TEMP, -2147483648
	008 Compare TEMP, -2147483648
	009 JumpIfEqual {43}
	010 Move TEMP, X3
	011 And TEMP, TEMP, -2147483648
	012 Compare TEMP, -2147483648
	013 JumpIfEqual {24}
	014 Move W8, [X1+24]
	015 Subtract W8, W8, W3
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W8, [X0+16]
	018 Compare W8, 0
	019 JumpIfNotEqual {72}
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return 
	024 Move X0, 0xEAA000
	025 Move X0, [X0+1400]
	026 Call 0x1C17D08
	027 Call 0x1C17F10
	028 Move X19, X0
	029 Move X0, 0xED1000
	030 Move X0, [X0+3352]
	031 Move X0, 0xEA7000
	032 Move X0, [X0+1320]
	033 Call 0x1C17D08
	034 Call 0x1C17F10
	035 Move X19, X0
	036 Move X0, 0xED0000
	037 Move X0, [X0+3632]
	038 Call 0x1C17D08
	039 Move X1, X0
	040 Move X0, X19
	041 Move X2, X31
	042 Call ArgumentNullException..ctor, X0, X1
	043 Move X0, 0xEAA000
	044 Move X0, [X0+1888]
	045 Call 0x1C17D08
	046 Call 0x1C17F10
	047 Move X19, X0
	048 Move X0, 0xED0000
	049 Move X0, [X0+3640]
	050 Call 0x1C17D08
	051 Move X20, X0
	052 Move X0, 0xECA000
	053 Move X0, [X0+1648]
	054 Call 0x1C17D08
	055 Move X2, X0
	056 Move X0, X19
	057 Move X1, X20
	058 Move X3, X31
	059 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	060 Move X0, 0xEAA000
	061 Move X0, [X0+1400]
	062 Call 0x1C17D08
	063 Call 0x1C17F10
	064 Move X19, X0
	065 Move X0, 0xECA000
	066 Move X0, [X0+1888]
	067 Call 0x1C17D08
	068 Move X1, X0
	069 Move X0, X19
	070 Move X2, X31
	071 Call ArgumentException..ctor, X0, X1
	072 Move X0, 0xECB000
	073 Move X0, [X0+1208]
	074 Call 0x1C17D08
	075 Call 0x1C17F10
	076 Move X1, X31
	077 Move X2, X31
	078 Move X19, X0
	079 Call ObjectDisposedException..ctor, X0, X1
	080 Move X0, 0xED1000
	081 Move X0, [X0+3816]
	082 Call 0x1C17D08
	083 Move X1, X0
	084 Move X0, X19
	085 Call 0x1C17DEC

Method: System.Void HashCore(System.Byte[] array, System.Int32 ibStart, System.Int32 cbSize)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Byte[] HashFinal()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void Initialize()

Disassembly:
	

ISIL:
No ISIL was generated
