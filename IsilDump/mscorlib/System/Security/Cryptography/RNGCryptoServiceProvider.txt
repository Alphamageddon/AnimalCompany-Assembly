Type: System.Security.Cryptography.RNGCryptoServiceProvider

Method: System.Void .cctor()

Disassembly:
	0x03269F54 STRB W10, [X9 + 0x20]
	0x03269F58 B.GE 0x3269F88
	0x03269F5C ADD X9, X21, W8, SXTW
	0x03269F60 ORN W10, W31, W27, 0x0
	0x03269F64 ADD X9, X9, 0x20
	0x03269F68 ADD W10, W10, W28
	0x03269F6C LDR W11, [X21 + 0x18]
	0x03269F70 CMP W8, W11
	0x03269F74 B.CS 0x3269FF4
	0x03269F78 STRB W31, [X9], #0x1
	0x03269F7C SUBS W10, W10, 0x1
	0x03269F80 ADD W8, W8, 0x1
	0x03269F84 B.NE 0x3269F6C
	0x03269F88 UBFM X1, X26, 0x3D, 0x3C
	0x03269F8C MOV X2, X21
	0x03269F90 MOV W3, W22
	0x03269F94 BL 0x326A820
	0x03269F98 MOV X0, X19
	0x03269F9C MOV X1, X21
	0x03269FA0 MOV W2, W31
	0x03269FA4 BL 0x3269854
	0x03269FA8 CMP W20, 0x80
	0x03269FAC B.NE 0x3269FD8
	0x03269FB0 MOV X0, X19
	0x03269FB4 MOV X1, X21
	0x03269FB8 LDP X20, X19, [X31 + 0x50]
	0x03269FBC LDP X22, X21, [X31 + 0x40]
	0x03269FC0 LDP X24, X23, [X31 + 0x30]
	0x03269FC4 LDP X26, X25, [X31 + 0x20]
	0x03269FC8 LDP X28, X27, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x1174000
	005 Move W8, [X19+1394]
	006 Move TEMP, X8
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfEqual {18}
	010 Move X0, 0xEBB000
	011 Move X0, [X0+320]
	012 Call 0x1C17CF4
	013 Move X0, 0xE91000
	014 Move X0, [X0+3264]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X19+1394], W8
	018 Call 0x1C2CF28
	019 Move TEMP, X0
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {35}
	023 Move X8, 0xE91000
	024 Move X8, [X8+3264]
	025 Move X20, 0xEBB000
	026 Move X0, [X8]
	027 Move X20, [X20+320]
	028 Call 0x1C17F10
	029 Move X1, X31
	030 Move X19, X0
	031 Call Object..ctor, X0
	032 Move X8, [X20]
	033 Move X8, [X8+184]
	034 Move [X8], X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Return 

Method: System.Void .ctor()

Disassembly:
	0x03263198 B.EQ 0x3263E98
	0x0326319C MOVZ W8, 0xBB97
	0x032631A0 MOVK W8, 0xAEB00000
	0x032631A4 CMP W0, W8
	0x032631A8 B.EQ 0x3263B5C
	0x032631AC MOVZ W8, 0x253E
	0x032631B0 MOVK W8, 0xB4420000
	0x032631B4 CMP W0, W8
	0x032631B8 B.NE 0x3263A10
	0x032631BC ADRP X8, 0xEC0000
	0x032631C0 LDR X8, [X8 + 0x4B0]
	0x032631C4 B 0x3264170
	0x032631C8 MOVZ W8, 0xD567
	0x032631CC MOVK W8, 0x85EA0000
	0x032631D0 CMP W0, W8
	0x032631D4 B.HI 0x3263478
	0x032631D8 MOVZ W8, 0xC575
	0x032631DC MOVK W8, 0x7E660000
	0x032631E0 CMP W0, W8
	0x032631E4 B.HI 0x32636AC
	0x032631E8 MOVZ W8, 0x2C14
	0x032631EC MOVK W8, 0x7B6A0000
	0x032631F0 CMP W0, W8
	0x032631F4 B.EQ 0x3263ED8
	0x032631F8 MOVZ W8, 0xE567
	0x032631FC MOVK W8, 0x7D520000
	0x03263200 CMP W0, W8
	0x03263204 B.EQ 0x3263B68

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x117A000
	006 Move X20, 0xEC1000
	007 Move W8, [X21+1395]
	008 Move X20, [X20+320]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEC1000
	015 Move X0, [X0+320]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1395], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call RandomNumberGenerator..ctor, X0
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X31
	028 Move X1, X31
	029 Call 0x1C9A798
	030 Move [X19+16], X0
	031 Move X0, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call RNGCryptoServiceProvider.Check, X0
	037 Return 

Method: System.Void Check()

Disassembly:
	0x03269FD4 B 0x3269854
	0x03269FD8 LDP X20, X19, [X31 + 0x50]
	0x03269FDC LDP X22, X21, [X31 + 0x40]
	0x03269FE0 LDP X24, X23, [X31 + 0x30]
	0x03269FE4 LDP X26, X25, [X31 + 0x20]
	0x03269FE8 LDP X28, X27, [X31 + 0x10]
	0x03269FEC LDR X30, [X31], #0x60
	0x03269FF0 RET
	0x03269FF4 BL 0x1C16F28
	0x03269FF8 BL 0x1C16F20
	0x03269FFC STR X30, [X31 - 0x10]!
	0x0326A000 CBZ X1, 0x326A698
	0x0326A004 LDR W8, [X1 + 0x18]
	0x0326A008 CMP W8, W2
	0x0326A00C B.LS 0x326A694
	0x0326A010 ADD W10, W2, 0x1
	0x0326A014 CMP W10, W8
	0x0326A018 B.CS 0x326A694
	0x0326A01C ADD W12, W2, 0x2
	0x0326A020 CMP W12, W8
	0x0326A024 B.CS 0x326A694
	0x0326A028 ADD W11, W2, 0x3
	0x0326A02C CMP W11, W8
	0x0326A030 B.CS 0x326A694
	0x0326A034 CBZ X0, 0x326A698
	0x0326A038 LDR W9, [X0 + 0x18]
	0x0326A03C CBZ W9, 0x326A694
	0x0326A040 ADD X13, X1, W2, UXTW
	0x0326A044 ADD X10, X1, W10, SXTW
	0x0326A048 LDRB W13, [X13 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, [X0+16]
	005 Move X1, X31
	006 Move X2, X31
	007 Call IntPtr.op_Equality, X0, X1
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {16}
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X30, [X31+32]
	015 Return 
	016 Move X0, 0xEBB000
	017 Move X0, [X0+2288]
	018 Call 0x1C17D08
	019 Move X1, X31
	020 Call Locale.GetText, X0
	021 Move X19, X0
	022 Move X0, 0xEB7000
	023 Move X0, [X0+3296]
	024 Call 0x1C17D08
	025 Call 0x1C17F10
	026 Move X1, X19
	027 Move X2, X31
	028 Move X20, X0
	029 Call CryptographicException..ctor, X0, X1
	030 Move X0, 0xEBA000
	031 Move X0, [X0+2296]
	032 Call 0x1C17D08
	033 Move X1, X0
	034 Move X0, X20
	035 Call 0x1C17DEC

Method: System.Boolean RngOpen()

Disassembly:
	0x03269FCC MOVZ W2, 0x40

ISIL:
	001 Call 0x1C2CF28
	002 Return X0

Method: System.IntPtr RngInitialize(System.Byte* seed, System.IntPtr seed_length)

Disassembly:
	0x03269FD0 LDR X30, [X31], #0x60

ISIL:
	001 Call 0x1C9A798
	002 Return X0

Method: System.IntPtr RngGetBytes(System.IntPtr handle, System.Byte* data, System.IntPtr data_length)

Disassembly:
	0x0326A04C ADD X14, X1, W12, SXTW

ISIL:
	001 Call 0x1C9A738
	002 Return X0

Method: System.Void RngClose(System.IntPtr handle)

Disassembly:
	0x0326A050 LDRB W10, [X10 + 0x20]

ISIL:
	001 Call 0x1C3A490
	002 Return 

Method: System.Void GetBytes(System.Byte[] data)

Disassembly:
	0x0326A054 ADD X11, X1, W11, SXTW
	0x0326A058 LDRB W14, [X14 + 0x20]
	0x0326A05C LDRB W11, [X11 + 0x20]
	0x0326A060 UBFM W13, W13, 0x8, 0x7
	0x0326A064 BFM W13, W10, 0x10, 0x7
	0x0326A068 ADD W12, W2, 0x4
	0x0326A06C BFM W13, W14, 0x18, 0x7
	0x0326A070 ORR W10, W13, W11, 0x0
	0x0326A074 CMP W12, W8
	0x0326A078 STR W10, [X0 + 0x20]
	0x0326A07C B.CS 0x326A694
	0x0326A080 ADD W13, W2, 0x5
	0x0326A084 CMP W13, W8
	0x0326A088 B.CS 0x326A694
	0x0326A08C ADD W10, W2, 0x6
	0x0326A090 CMP W10, W8
	0x0326A094 B.CS 0x326A694
	0x0326A098 ADD W11, W2, 0x7
	0x0326A09C CMP W11, W8
	0x0326A0A0 B.CS 0x326A694
	0x0326A0A4 CMP W9, 0x1
	0x0326A0A8 B.LS 0x326A694
	0x0326A0AC ADD X14, X1, W12, SXTW
	0x0326A0B0 ADD X13, X1, W13, SXTW
	0x0326A0B4 LDRB W14, [X14 + 0x20]
	0x0326A0B8 ADD X15, X1, 0x20
	0x0326A0BC LDRB W13, [X13 + 0x20]
	0x0326A0C0 LDRB W10, [X15, W10, SXTW]
	0x0326A0C4 LDRB W11, [X15, W11, SXTW]
	0x0326A0C8 UBFM W14, W14, 0x8, 0x7
	0x0326A0CC BFM W14, W13, 0x10, 0x7
	0x0326A0D0 ADD W12, W2, 0x8
	0x0326A0D4 BFM W14, W10, 0x18, 0x7
	0x0326A0D8 ORR W10, W14, W11, 0x0
	0x0326A0DC CMP W12, W8
	0x0326A0E0 STR W10, [X0 + 0x24]
	0x0326A0E4 B.CS 0x326A694
	0x0326A0E8 ADD W13, W2, 0x9
	0x0326A0EC CMP W13, W8
	0x0326A0F0 B.CS 0x326A694
	0x0326A0F4 ADD W10, W2, 0xA
	0x0326A0F8 CMP W10, W8
	0x0326A0FC B.CS 0x326A694
	0x0326A100 ADD W11, W2, 0xB
	0x0326A104 CMP W11, W8
	0x0326A108 B.CS 0x326A694
	0x0326A10C CMP W9, 0x2
	0x0326A110 B.LS 0x326A694
	0x0326A114 ADD X14, X1, W12, SXTW
	0x0326A118 ADD X13, X1, W13, SXTW
	0x0326A11C LDRB W14, [X14 + 0x20]
	0x0326A120 ADD X15, X1, 0x20
	0x0326A124 LDRB W13, [X13 + 0x20]
	0x0326A128 LDRB W10, [X15, W10, SXTW]
	0x0326A12C LDRB W11, [X15, W11, SXTW]
	0x0326A130 UBFM W14, W14, 0x8, 0x7
	0x0326A134 BFM W14, W13, 0x10, 0x7
	0x0326A138 ADD W12, W2, 0xC
	0x0326A13C BFM W14, W10, 0x18, 0x7
	0x0326A140 ORR W10, W14, W11, 0x0
	0x0326A144 CMP W12, W8
	0x0326A148 STR W10, [X0 + 0x28]
	0x0326A14C B.CS 0x326A694
	0x0326A150 ADD W13, W2, 0xD
	0x0326A154 CMP W13, W8
	0x0326A158 B.CS 0x326A694
	0x0326A15C ADD W10, W2, 0xE
	0x0326A160 CMP W10, W8
	0x0326A164 B.CS 0x326A694
	0x0326A168 ADD W11, W2, 0xF
	0x0326A16C CMP W11, W8
	0x0326A170 B.CS 0x326A694
	0x0326A174 CMP W9, 0x3
	0x0326A178 B.LS 0x326A694
	0x0326A17C ADD X14, X1, W12, SXTW
	0x0326A180 ADD X13, X1, W13, SXTW
	0x0326A184 LDRB W14, [X14 + 0x20]
	0x0326A188 ADD X15, X1, 0x20
	0x0326A18C LDRB W13, [X13 + 0x20]
	0x0326A190 LDRB W10, [X15, W10, SXTW]
	0x0326A194 LDRB W11, [X15, W11, SXTW]
	0x0326A198 UBFM W14, W14, 0x8, 0x7
	0x0326A19C BFM W14, W13, 0x10, 0x7
	0x0326A1A0 ADD W12, W2, 0x10
	0x0326A1A4 BFM W14, W10, 0x18, 0x7
	0x0326A1A8 ORR W10, W14, W11, 0x0
	0x0326A1AC CMP W12, W8
	0x0326A1B0 STR W10, [X0 + 0x2C]
	0x0326A1B4 B.CS 0x326A694
	0x0326A1B8 ADD W13, W2, 0x11
	0x0326A1BC CMP W13, W8
	0x0326A1C0 B.CS 0x326A694
	0x0326A1C4 ADD W10, W2, 0x12
	0x0326A1C8 CMP W10, W8
	0x0326A1CC B.CS 0x326A694
	0x0326A1D0 ADD W11, W2, 0x13
	0x0326A1D4 CMP W11, W8
	0x0326A1D8 B.CS 0x326A694
	0x0326A1DC CMP W9, 0x4
	0x0326A1E0 B.LS 0x326A694
	0x0326A1E4 ADD X14, X1, W12, SXTW
	0x0326A1E8 ADD X13, X1, W13, SXTW
	0x0326A1EC LDRB W14, [X14 + 0x20]
	0x0326A1F0 ADD X15, X1, 0x20
	0x0326A1F4 LDRB W13, [X13 + 0x20]
	0x0326A1F8 LDRB W10, [X15, W10, SXTW]
	0x0326A1FC LDRB W11, [X15, W11, SXTW]
	0x0326A200 UBFM W14, W14, 0x8, 0x7
	0x0326A204 BFM W14, W13, 0x10, 0x7
	0x0326A208 ADD W12, W2, 0x14
	0x0326A20C BFM W14, W10, 0x18, 0x7
	0x0326A210 ORR W10, W14, W11, 0x0
	0x0326A214 CMP W12, W8
	0x0326A218 STR W10, [X0 + 0x30]
	0x0326A21C B.CS 0x326A694
	0x0326A220 ADD W13, W2, 0x15
	0x0326A224 CMP W13, W8
	0x0326A228 B.CS 0x326A694
	0x0326A22C ADD W10, W2, 0x16
	0x0326A230 CMP W10, W8
	0x0326A234 B.CS 0x326A694
	0x0326A238 ADD W11, W2, 0x17
	0x0326A23C CMP W11, W8
	0x0326A240 B.CS 0x326A694
	0x0326A244 CMP W9, 0x5
	0x0326A248 B.LS 0x326A694
	0x0326A24C ADD X14, X1, W12, SXTW
	0x0326A250 ADD X13, X1, W13, SXTW
	0x0326A254 LDRB W14, [X14 + 0x20]
	0x0326A258 ADD X15, X1, 0x20
	0x0326A25C LDRB W13, [X13 + 0x20]
	0x0326A260 LDRB W10, [X15, W10, SXTW]
	0x0326A264 LDRB W11, [X15, W11, SXTW]
	0x0326A268 UBFM W14, W14, 0x8, 0x7

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x1173000
	009 Move W8, [X20+1396]
	010 Move X22, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEBA000
	017 Move X0, [X0+320]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+1396], W8
	021 Move [X31+12], W31
	022 Compare X22, 0
	023 JumpIfEqual {106}
	024 Move X24, 0xEBA000
	025 Move X24, [X24+320]
	026 Move W8, [X22+24]
	027 Add X10, X22, 32
	028 Move X0, [X24]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction CSEL not yet implemented."
	031 Move W9, [X0+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {36}
	034 Call 0x1C17DFC
	035 Move X0, [X24]
	036 Move X8, [X0+184]
	037 Move X20, [X8]
	038 Compare X20, 0
	039 JumpIfEqual {80}
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {47}
	043 Call 0x1C17DFC
	044 Move X8, [X24]
	045 Move X8, [X8+184]
	046 Move X20, [X8]
	047 Move [X31+12], W31
	048 Add X1, X31, 12
	049 Move X0, X20
	050 Move X2, X31
	051 Call Monitor.Enter, X0, X1
	052 Move X23, [X19+16]
	053 NotImplemented "Instruction LDRSW not yet implemented."
	054 Move X1, X31
	055 Call IntPtr.op_Explicit, X0
	056 Move X22, X0
	057 Move X0, [X24]
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X23
	063 Move X1, X21
	064 Move X2, X22
	065 Call 0x1C9A738
	066 Move X21, X31
	067 Move [X19+16], X0
	068 Move W22, 9
	069 Move W8, [X31+12]
	070 Compare W8, 0
	071 JumpIfEqual {75}
	072 Move X0, X20
	073 Move X1, X31
	074 Call Monitor.Exit, X0
	075 Compare X21, 0
	076 JumpIfNotEqual {124}
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Compare W22, 0
	079 JumpIfEqual {96}
	080 NotImplemented "Instruction LDRSW not yet implemented."
	081 Move X20, [X19+16]
	082 Move X1, X31
	083 Call IntPtr.op_Explicit, X0
	084 Move X8, [X24]
	085 Move X22, X0
	086 Move W9, [X8+224]
	087 Compare W9, 0
	088 JumpIfNotEqual {91}
	089 Move X0, X8
	090 Call 0x1C17DFC
	091 Move X0, X20
	092 Move X1, X21
	093 Move X2, X22
	094 Call 0x1C9A738
	095 Move [X19+16], X0
	096 Move X0, X19
	097 Call RNGCryptoServiceProvider.Check, X0
	098 Move X20, [X31+48]
	099 Move X19, [X31+56]
	100 Move X22, [X31+32]
	101 Move X21, [X31+40]
	102 Move X24, [X31+16]
	103 Move X23, [X31+24]
	104 Move X30, [X31+64]
	105 Return 
	106 Move X0, 0xE8F000
	107 Move X0, [X0+1320]
	108 Call 0x1C17D08
	109 Call 0x1C17F10
	110 Move X19, X0
	111 Move X0, 0xE96000
	112 Move X0, [X0+1680]
	113 Call 0x1C17D08
	114 Move X1, X0
	115 Move X0, X19
	116 Move X2, X31
	117 Call ArgumentNullException..ctor, X0, X1
	118 Move X0, 0xEBA000
	119 Move X0, [X0+2304]
	120 Call 0x1C17D08
	121 Move X1, X0
	122 Move X0, X19
	123 Call 0x1C17DEC
	124 Move X0, X21
	125 Call 0x1C17F18
	126 Move X22, X0
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move X0, X22
	129 Call 0x3EB2AD0
	130 Move X21, [X0]
	131 Call 0x3EB2AE0
	132 Move W22, W31
	133 Move X21, X31
	134 Move X22, X0
	135 Move W8, [X31+12]
	136 Compare W8, 0
	137 JumpIfEqual {141}
	138 Move X0, X20
	139 Move X1, X31
	140 Call Monitor.Exit, X0
	141 Compare X21, 0
	142 JumpIfNotEqual {145}
	143 Move X0, X22
	144 Call 0x1D2D690
	145 Move X0, X21
	146 Call 0x1C17F18
	147 Call 0x1991590

Method: System.Void Finalize()

Disassembly:
	0x0326A26C BFM W14, W13, 0x10, 0x7
	0x0326A270 ADD W12, W2, 0x18
	0x0326A274 BFM W14, W10, 0x18, 0x7
	0x0326A278 ORR W10, W14, W11, 0x0
	0x0326A27C CMP W12, W8
	0x0326A280 STR W10, [X0 + 0x34]
	0x0326A284 B.CS 0x326A694
	0x0326A288 ADD W13, W2, 0x19
	0x0326A28C CMP W13, W8
	0x0326A290 B.CS 0x326A694
	0x0326A294 ADD W10, W2, 0x1A
	0x0326A298 CMP W10, W8
	0x0326A29C B.CS 0x326A694
	0x0326A2A0 ADD W11, W2, 0x1B
	0x0326A2A4 CMP W11, W8
	0x0326A2A8 B.CS 0x326A694
	0x0326A2AC CMP W9, 0x6
	0x0326A2B0 B.LS 0x326A694
	0x0326A2B4 ADD X14, X1, W12, SXTW
	0x0326A2B8 ADD X13, X1, W13, SXTW
	0x0326A2BC LDRB W14, [X14 + 0x20]
	0x0326A2C0 ADD X15, X1, 0x20
	0x0326A2C4 LDRB W13, [X13 + 0x20]
	0x0326A2C8 LDRB W10, [X15, W10, SXTW]
	0x0326A2CC LDRB W11, [X15, W11, SXTW]
	0x0326A2D0 UBFM W14, W14, 0x8, 0x7
	0x0326A2D4 BFM W14, W13, 0x10, 0x7
	0x0326A2D8 ADD W12, W2, 0x1C
	0x0326A2DC BFM W14, W10, 0x18, 0x7
	0x0326A2E0 ORR W10, W14, W11, 0x0
	0x0326A2E4 CMP W12, W8
	0x0326A2E8 STR W10, [X0 + 0x38]
	0x0326A2EC B.CS 0x326A694
	0x0326A2F0 ADD W13, W2, 0x1D
	0x0326A2F4 CMP W13, W8
	0x0326A2F8 B.CS 0x326A694
	0x0326A2FC ADD W10, W2, 0x1E
	0x0326A300 CMP W10, W8
	0x0326A304 B.CS 0x326A694
	0x0326A308 ADD W11, W2, 0x1F
	0x0326A30C CMP W11, W8
	0x0326A310 B.CS 0x326A694
	0x0326A314 CMP W9, 0x7
	0x0326A318 B.LS 0x326A694
	0x0326A31C ADD X14, X1, W12, SXTW
	0x0326A320 ADD X13, X1, W13, SXTW
	0x0326A324 LDRB W14, [X14 + 0x20]
	0x0326A328 ADD X15, X1, 0x20
	0x0326A32C LDRB W13, [X13 + 0x20]
	0x0326A330 LDRB W10, [X15, W10, SXTW]
	0x0326A334 LDRB W11, [X15, W11, SXTW]
	0x0326A338 UBFM W14, W14, 0x8, 0x7
	0x0326A33C BFM W14, W13, 0x10, 0x7
	0x0326A340 ADD W12, W2, 0x20
	0x0326A344 BFM W14, W10, 0x18, 0x7
	0x0326A348 ORR W10, W14, W11, 0x0
	0x0326A34C CMP W12, W8
	0x0326A350 STR W10, [X0 + 0x3C]
	0x0326A354 B.CS 0x326A694
	0x0326A358 ADD W13, W2, 0x21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1173000
	006 Move W8, [X20+1397]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xEBA000
	013 Move X0, [X0+320]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1397], W8
	017 Move X0, [X19+16]
	018 Move X1, X31
	019 Move X2, X31
	020 Call IntPtr.op_Inequality, X0, X1
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {36}
	025 Move X8, 0xEBA000
	026 Move X8, [X8+320]
	027 Move X20, [X19+16]
	028 Move X0, [X8]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X20
	034 Call 0x1C3A490
	035 Move [X19+16], X31
	036 Move X0, X19
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X1, X31
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Call Object.Finalize, X0
	043 Return 
	044 Move X21, X0
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X0, X21
	047 Call 0x3EB2AD0
	048 Move X20, [X0]
	049 Call 0x3EB2AE0
	050 Move X0, X19
	051 Move X1, X31
	052 Call Object.Finalize, X0
	053 Compare X20, 0
	054 JumpIfNotEqual {61}
	055 Move X20, [X31+16]
	056 Move X19, [X31+24]
	057 Move X30, [X31+32]
	058 Move X21, [X31+40]
	059 Return 
	060 Move X20, X31
	061 Move X0, X20
	062 Call 0x1C17F18
	063 Move X21, X0
	064 Move X0, X19
	065 Move X1, X31
	066 Call Object.Finalize, X0
	067 Compare X20, 0
	068 JumpIfNotEqual {71}
	069 Move X0, X21
	070 Call 0x1D2D690
	071 Move X0, X20
	072 Call 0x1C17F18
	073 Call 0x1991590

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x0326A35C CMP W13, W8
	0x0326A360 B.CS 0x326A694
	0x0326A364 ADD W10, W2, 0x22

ISIL:
	001 And W1, W1, 1
	002 Move X2, X31
	003 Call RandomNumberGenerator.Dispose, X0, X1
	004 Return 

