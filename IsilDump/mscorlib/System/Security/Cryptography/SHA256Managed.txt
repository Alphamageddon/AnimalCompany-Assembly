Type: System.Security.Cryptography.SHA256Managed

Method: System.Void .ctor()

Disassembly:
	0x03256068 MOV X0, X21
	0x0325606C MOV W1, W22
	0x03256070 MOV W4, W20
	0x03256074 MOV X5, X31
	0x03256078 BL 0x33A8750
	0x0325607C MOVZ W8, 0x1
	0x03256080 STRB W8, [X19 + 0x38]
	0x03256084 LDP X20, X19, [X31 + 0x20]
	0x03256088 LDP X22, X21, [X31 + 0x10]
	0x0325608C LDR X30, [X31], #0x30
	0x03256090 RET
	0x03256094 ADRP X0, 0xEC6000
	0x03256098 LDR X0, [X0 + 0x4B8]
	0x0325609C BL 0x1C16D08
	0x032560A0 BL 0x1C16F10
	0x032560A4 MOV X19, X0
	0x032560A8 ADRP X0, 0xECD000
	0x032560AC LDR X0, [X0 + 0x130]
	0x032560B0 BL 0x1C16D08
	0x032560B4 MOV X1, X0
	0x032560B8 MOV X0, X19
	0x032560BC MOV X2, X31
	0x032560C0 BL 0x338C448
	0x032560C4 ADRP X0, 0xECD000
	0x032560C8 LDR X0, [X0 + 0x138]
	0x032560CC BL 0x1C16D08
	0x032560D0 MOV X1, X0
	0x032560D4 MOV X0, X19
	0x032560D8 BL 0x1C16DEC
	0x032560DC STP X30, X19, [X31 - 0x10]!
	0x032560E0 MOV X1, X31
	0x032560E4 MOV X19, X0
	0x032560E8 BL 0x3251230
	0x032560EC MOVZ W8, 0x80
	0x032560F0 STR W8, [X19 + 0x14]
	0x032560F4 LDP X30, X19, [X31], #0x10
	0x032560F8 RET
	0x032560FC STR X30, [X31 - 0x20]!
	0x03256100 STP X20, X19, [X31 + 0x10]
	0x03256104 ADRP X19, 0x1186000
	0x03256108 ADRP X20, 0xECD000
	0x0325610C LDRB W8, [X19 + 0x4F5]
	0x03256110 LDR X20, [X20 + 0x90]
	0x03256114 TBNZ X8, 0x0, 0x325612C
	0x03256118 ADRP X0, 0xECD000
	0x0325611C LDR X0, [X0 + 0x90]
	0x03256120 BL 0x1C16CF4
	0x03256124 MOVZ W8, 0x1
	0x03256128 STRB W8, [X19 + 0x4F5]
	0x0325612C LDR X0, [X20]
	0x03256130 BL 0x1C16F10
	0x03256134 MOV X1, X31
	0x03256138 MOV X19, X0
	0x0325613C BL 0x3264708
	0x03256140 MOV X0, X19
	0x03256144 LDP X20, X19, [X31 + 0x10]
	0x03256148 LDR X30, [X31], #0x20
	0x0325614C RET
	0x03256150 MOV X1, X31
	0x03256154 B 0x33BDD8C
	0x03256158 STR X30, [X31 - 0x20]!
	0x0325615C STP X20, X19, [X31 + 0x10]
	0x03256160 ADRP X19, 0x1186000
	0x03256164 ADRP X20, 0xECD000
	0x03256168 LDRB W8, [X19 + 0x4F6]
	0x0325616C LDR X20, [X20 + 0x140]
	0x03256170 TBNZ X8, 0x0, 0x3256188
	0x03256174 ADRP X0, 0xECD000
	0x03256178 LDR X0, [X0 + 0x140]
	0x0325617C BL 0x1C16CF4
	0x03256180 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1187000
	006 Move X20, 0xECB000
	007 Move W8, [X21+1310]
	008 Move X20, [X20+3032]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0xE9E000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move X0, 0xECB000
	018 Move X0, [X0+3032]
	019 Call 0x1C17CF4
	020 Move X0, 0xEC7000
	021 Move X0, [X0+3336]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+1310], W8
	025 Move X0, X19
	026 Move X1, X31
	027 Call HashAlgorithm..ctor, X0
	028 Move W8, 256
	029 Move [X19+20], W8
	030 Move X0, [X20]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X31
	036 Call CryptoConfig.get_AllowOnlyFipsAlgorithms
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {64}
	041 Move X20, 0xEC7000
	042 Move X20, [X20+3336]
	043 Move X21, 0xE9E000
	044 Move W1, 8
	045 Move X0, [X20]
	046 Move X21, [X21+1560]
	047 Call 0x1C17D6C
	048 Move [X19+56], X0
	049 Move X0, [X21]
	050 Move W1, 64
	051 Call 0x1C17D6C
	052 Move [X19+40], X0
	053 Move X0, [X20]
	054 Move W1, 64
	055 Call 0x1C17D6C
	056 Move [X19+64], X0
	057 Move X0, X19
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Call SHA256Managed.InitializeState, X0
	063 Return 
	064 Move X0, 0xECE000
	065 Move X0, [X0+160]
	066 Call 0x1C17D08
	067 Move X1, X31
	068 Call Environment.GetResourceString, X0
	069 Move X19, X0
	070 Move X0, 0xE9E000
	071 Move X0, [X0+1456]
	072 Call 0x1C17D08
	073 Call 0x1C17F10
	074 Move X1, X19
	075 Move X2, X31
	076 Move X20, X0
	077 Call InvalidOperationException..ctor, X0, X1
	078 Move X0, 0xECE000
	079 Move X0, [X0+200]
	080 Call 0x1C17D08
	081 Move X1, X0
	082 Move X0, X20
	083 Call 0x1C17DEC

Method: System.Void Initialize()

Disassembly:
	0x0325EA94 MOV X1, X0
	0x0325EA98 CBZ W8, 0x325EBC4
	0x0325EA9C MOV W9, W21
	0x0325EAA0 SXTW X9, W9
	0x0325EAA4 SUB X10, X9, 0x8
	0x0325EAA8 MOVZ W11, 0x80
	0x0325EAAC CMP W10, W8
	0x0325EAB0 STRB W11, [X1 + 0x20]
	0x0325EAB4 B.CS 0x325EBC4
	0x0325EAB8 LDR X8, [X19 + 0x30]
	0x0325EABC ADD X10, X1, X10
	0x0325EAC0 UBFM X11, X8, 0x35, 0x3F
	0x0325EAC4 STRB W11, [X10 + 0x20]
	0x0325EAC8 LDR W11, [X1 + 0x18]
	0x0325EACC SUB X10, X21, 0x7
	0x0325EAD0 CMP W10, W11
	0x0325EAD4 B.CS 0x325EBC4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call SHA256Managed.InitializeState, X0
	005 Move X0, [X19+40]
	006 Compare X0, 0
	007 JumpIfEqual {22}
	008 Move W2, [X0+24]
	009 Move W1, W31
	010 Move X3, X31
	011 Call Array.Clear, X0, X1, X2
	012 Move X0, [X19+64]
	013 Compare X0, 0
	014 JumpIfEqual {22}
	015 Move W2, [X0+24]
	016 Move W1, W31
	017 Move X3, X31
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Call Array.Clear, X0, X1, X2
	021 Return 
	022 Call 0x1C17F20

Method: System.Void HashCore(System.Byte[] rgb, System.Int32 ibStart, System.Int32 cbSize)

Disassembly:
	0x0325EAD8 UBFM X11, X8, 0x2D, 0x3F

ISIL:
No ISIL was generated
Method: System.Byte[] HashFinal()

Disassembly:
	0x0325ECA4 ADD X8, X8, X19

ISIL:
No ISIL was generated
Method: System.Void InitializeState()

Disassembly:
	0x0325E9D4 MOV W1, W20
	0x0325E9D8 MOV W3, W25
	0x0325E9DC MOV W4, W19
	0x0325E9E0 LDP X20, X19, [X31 + 0x50]
	0x0325E9E4 LDP X22, X21, [X31 + 0x40]
	0x0325E9E8 LDP X24, X23, [X31 + 0x30]
	0x0325E9EC LDP X26, X25, [X31 + 0x20]
	0x0325E9F0 LDP X28, X27, [X31 + 0x10]
	0x0325E9F4 MOV X5, X31
	0x0325E9F8 LDR X30, [X31], #0x60
	0x0325E9FC B 0x33A8750
	0x0325EA00 LDP X20, X19, [X31 + 0x50]
	0x0325EA04 LDP X22, X21, [X31 + 0x40]
	0x0325EA08 LDP X24, X23, [X31 + 0x30]
	0x0325EA0C LDP X26, X25, [X31 + 0x20]
	0x0325EA10 LDP X28, X27, [X31 + 0x10]
	0x0325EA14 LDR X30, [X31], #0x60
	0x0325EA18 RET
	0x0325EA1C B 0x325EA20
	0x0325EA20 STP X30, X21, [X31 - 0x20]!
	0x0325EA24 STP X20, X19, [X31 + 0x10]
	0x0325EA28 ADRP X20, 0x117E000
	0x0325EA2C ADRP X21, 0xE95000
	0x0325EA30 LDRB W8, [X20 + 0x52B]
	0x0325EA34 LDR X21, [X21 + 0x618]
	0x0325EA38 MOV X19, X0
	0x0325EA3C TBNZ X8, 0x0, 0x325EA54
	0x0325EA40 ADRP X0, 0xE95000
	0x0325EA44 LDR X0, [X0 + 0x618]
	0x0325EA48 BL 0x1C16CF4
	0x0325EA4C MOVZ W8, 0x1
	0x0325EA50 STRB W8, [X20 + 0x52B]
	0x0325EA54 LDR X0, [X21]
	0x0325EA58 MOVZ W1, 0x30
	0x0325EA5C BL 0x1C16D6C
	0x0325EA60 LDR X8, [X19 + 0x30]
	0x0325EA64 MOV X20, X0
	0x0325EA68 MOVZ W9, 0x100
	0x0325EA6C LDR X0, [X21]
	0x0325EA70 AND X8, X8, 0x7F
	0x0325EA74 CMP W8, 0x70
	0x0325EA78 MOVZ W10, 0x80
	0x0325EA7C CSEL X9, X10, X9, CC
	0x0325EA80 SUB X21, X9, X8
	0x0325EA84 MOV W1, W21
	0x0325EA88 BL 0x1C16D6C
	0x0325EA8C CBZ X0, 0x325EBC8
	0x0325EA90 LDR W8, [X0 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+56]
	003 Move [X0+48], X31
	004 Compare X8, 0
	005 JumpIfEqual {43}
	006 Move W9, [X8+24]
	007 Compare W9, 0
	008 JumpIfEqual {42}
	009 Move W10, 0xE667
	010 NotImplemented "Instruction MOVK not yet implemented."
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move [X8+32], W10
	013 Move W10, 0xAE85
	014 NotImplemented "Instruction MOVK not yet implemented."
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move [X8+36], W10
	017 Move W10, 0xF372
	018 NotImplemented "Instruction MOVK not yet implemented."
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move [X8+40], W10
	021 Move W10, 0xF53A
	022 NotImplemented "Instruction MOVK not yet implemented."
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move [X8+44], W10
	025 Move W10, 0x527F
	026 NotImplemented "Instruction MOVK not yet implemented."
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move [X8+48], W10
	029 Move W10, 0x688C
	030 NotImplemented "Instruction MOVK not yet implemented."
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move [X8+52], W10
	033 Move W10, 0xD9AB
	034 NotImplemented "Instruction MOVK not yet implemented."
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move [X8+56], W10
	037 Move W9, 0xCD19
	038 NotImplemented "Instruction MOVK not yet implemented."
	039 Move [X8+60], W9
	040 Move X30, [X31+16]
	041 Return 
	042 Call 0x1C17F28
	043 Call 0x1C17F20

Method: System.Void _HashData(System.Byte[] partIn, System.Int32 ibStart, System.Int32 cbSize)

Disassembly:
	0x0325EADC ADD X10, X1, X10
	0x0325EAE0 STRB W11, [X10 + 0x20]
	0x0325EAE4 LDR W11, [X1 + 0x18]
	0x0325EAE8 SUB X10, X9, 0x6
	0x0325EAEC CMP W10, W11
	0x0325EAF0 B.CS 0x325EBC4
	0x0325EAF4 UBFM X11, X8, 0x25, 0x3F
	0x0325EAF8 ADD X10, X1, X10
	0x0325EAFC STRB W11, [X10 + 0x20]
	0x0325EB00 LDR W11, [X1 + 0x18]
	0x0325EB04 SUB X10, X9, 0x5
	0x0325EB08 CMP W10, W11
	0x0325EB0C B.CS 0x325EBC4
	0x0325EB10 UBFM X11, X8, 0x1D, 0x3F
	0x0325EB14 ADD X10, X1, X10
	0x0325EB18 STRB W11, [X10 + 0x20]
	0x0325EB1C LDR W11, [X1 + 0x18]
	0x0325EB20 SUB X10, X9, 0x4
	0x0325EB24 CMP W10, W11
	0x0325EB28 B.CS 0x325EBC4
	0x0325EB2C UBFM X11, X8, 0x15, 0x3F
	0x0325EB30 ADD X10, X1, X10
	0x0325EB34 STRB W11, [X10 + 0x20]
	0x0325EB38 LDR W10, [X1 + 0x18]
	0x0325EB3C SUB X9, X9, 0x3
	0x0325EB40 CMP W9, W10
	0x0325EB44 B.CS 0x325EBC4
	0x0325EB48 UBFM X10, X8, 0xD, 0x3F
	0x0325EB4C ADD X9, X1, X9
	0x0325EB50 STRB W10, [X9 + 0x20]
	0x0325EB54 LDR W10, [X1 + 0x18]
	0x0325EB58 SUB W9, W21, 0x2
	0x0325EB5C CMP W9, W10
	0x0325EB60 B.CS 0x325EBC4
	0x0325EB64 UBFM X10, X8, 0x5, 0x3F
	0x0325EB68 ADD X9, X1, W9, UXTW
	0x0325EB6C STRB W10, [X9 + 0x20]
	0x0325EB70 LDR W10, [X1 + 0x18]
	0x0325EB74 SUB W9, W21, 0x1
	0x0325EB78 CMP W9, W10
	0x0325EB7C B.CS 0x325EBC4
	0x0325EB80 UBFM W8, W8, 0x1D, 0x1C
	0x0325EB84 ADD X9, X1, W9, UXTW
	0x0325EB88 STRB W8, [X9 + 0x20]
	0x0325EB8C LDR W3, [X1 + 0x18]
	0x0325EB90 MOV X0, X19
	0x0325EB94 MOV W2, W31
	0x0325EB98 BL 0x325E854
	0x0325EB9C LDR X1, [X19 + 0x38]
	0x0325EBA0 MOVZ W2, 0x6
	0x0325EBA4 MOV X0, X20
	0x0325EBA8 MOV X3, X31
	0x0325EBAC BL 0x325FF7C
	0x0325EBB0 STR X20, [X19 + 0x18]
	0x0325EBB4 MOV X0, X20
	0x0325EBB8 LDP X20, X19, [X31 + 0x10]
	0x0325EBBC LDP X30, X21, [X31], #0x20
	0x0325EBC0 RET
	0x0325EBC4 BL 0x1C16F28
	0x0325EBC8 BL 0x1C16F20
	0x0325EBCC SUB X31, X31, 0x80
	0x0325EBD0 STP X29, X30, [X31 + 0x20]
	0x0325EBD4 STP X28, X27, [X31 + 0x30]
	0x0325EBD8 STP X26, X25, [X31 + 0x40]
	0x0325EBDC STP X24, X23, [X31 + 0x50]
	0x0325EBE0 STP X22, X21, [X31 + 0x60]
	0x0325EBE4 STP X20, X19, [X31 + 0x70]
	0x0325EBE8 ADRP X19, 0x117E000
	0x0325EBEC LDRB W8, [X19 + 0x52C]
	0x0325EBF0 MOV X29, X2
	0x0325EBF4 MOV X20, X1
	0x0325EBF8 MOV X21, X0
	0x0325EBFC TBNZ X8, 0x0, 0x325EC14
	0x0325EC00 ADRP X0, 0xEC5000
	0x0325EC04 LDR X0, [X0 + 0xD0]
	0x0325EC08 BL 0x1C16CF4
	0x0325EC0C MOVZ W8, 0x1
	0x0325EC10 STRB W8, [X19 + 0x52C]
	0x0325EC14 LDP X22, X8, [X20 + 0x20]
	0x0325EC18 LDP X25, X28, [X20]
	0x0325EC1C LDP X26, X27, [X20 + 0x10]
	0x0325EC20 LDP X23, X24, [X20 + 0x30]
	0x0325EC24 MOVZ W1, 0x10
	0x0325EC28 MOV X0, X21
	0x0325EC2C MOV X2, X29
	0x0325EC30 MOV X3, X31
	0x0325EC34 STP X20, X8, [X31 + 0x8]
	0x0325EC38 BL 0x3260138
	0x0325EC3C ADRP X20, 0xEC5000
	0x0325EC40 LDR X20, [X20 + 0xD0]
	0x0325EC44 LDR X0, [X20]
	0x0325EC48 LDR W8, [X0 + 0xE0]
	0x0325EC4C CBNZ W8, 0x325EC54
	0x0325EC50 BL 0x1C16DFC
	0x0325EC54 MOV X0, X21
	0x0325EC58 STR X21, [X31 + 0x18]
	0x0325EC5C BL 0x325F13C
	0x0325EC60 MOV X29, X31
	0x0325EC64 MOVZ W19, 0x58
	0x0325EC68 LDR X0, [X20]
	0x0325EC6C LDR W8, [X0 + 0xE0]
	0x0325EC70 CBNZ W8, 0x325EC78
	0x0325EC74 BL 0x1C16DFC
	0x0325EC78 MOV X0, X22
	0x0325EC7C BL 0x325F1E4
	0x0325EC80 LDR X8, [X20]
	0x0325EC84 LDR X21, [X31 + 0x18]
	0x0325EC88 LDR X8, [X8 + 0xB8]
	0x0325EC8C LDR X8, [X8]
	0x0325EC90 CBZ X8, 0x325F134
	0x0325EC94 LDR W9, [X8 + 0x18]
	0x0325EC98 CMP X29, X9
	0x0325EC9C B.CS 0x325F138
	0x0325ECA0 LDR X9, [X31 + 0x10]

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X23, 0x117F000
	013 Move W8, [X23+1311]
	014 Move W19, W3
	015 Move W20, W2
	016 Move X21, X1
	017 Move X22, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xEC6000
	023 Move X0, [X0+192]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+1311], W8
	027 Move X8, [X22+48]
	028 Move X9, [X22+56]
	029 Add X10, X8, W19
	030 Move [X22+48], X10
	031 Compare X9, 0
	032 JumpIfEqual {37}
	033 Move W10, [X9+24]
	034 Add X9, X9, 32
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CSEL not yet implemented."
	037 Move X23, X31
	038 Move X2, [X22+40]
	039 And W25, W8, 63
	040 Compare X2, 0
	041 JumpIfEqual {46}
	042 Move W8, [X2+24]
	043 Add X9, X2, 32
	044 NotImplemented "Instruction CMP not yet implemented."
	045 NotImplemented "Instruction CSEL not yet implemented."
	046 Move X24, X31
	047 Move X8, [X22+64]
	048 Compare X8, 0
	049 JumpIfEqual {54}
	050 Move W9, [X8+24]
	051 Add X8, X8, 32
	052 NotImplemented "Instruction CMP not yet implemented."
	053 NotImplemented "Instruction CSEL not yet implemented."
	054 Move X26, X31
	055 Move X28, 0xEC6000
	056 Move X28, [X28+192]
	057 Compare W25, 0
	058 JumpIfEqual {81}
	059 Add W8, W25, W19
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move W8, 64
	062 Subtract W27, W8, W25
	063 Move X0, X21
	064 Move W1, W20
	065 Move W3, W25
	066 Move W4, W27
	067 Move X5, X31
	068 Call Buffer.InternalBlockCopy, X0, X1, X2, X3, X4
	069 Move X0, [X28]
	070 Add W20, W27, W20
	071 Subtract W19, W19, W27
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1C17DFC
	076 Move X0, X26
	077 Move X1, X23
	078 Move X2, X24
	079 Call SHA256Managed.SHATransform, X0, X1, X2
	080 Move W25, W31
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move X2, [X22+40]
	083 Move W4, 64
	084 Move X0, X21
	085 Move W1, W20
	086 Move W3, W31
	087 Move X5, X31
	088 Call Buffer.InternalBlockCopy, X0, X1, X2, X3, X4
	089 Move X0, [X28]
	090 Subtract W19, W19, 64
	091 Move W8, [X0+224]
	092 Compare W8, 0
	093 JumpIfNotEqual {95}
	094 Call 0x1C17DFC
	095 Move X0, X26
	096 Move X1, X23
	097 Move X2, X24
	098 Add W20, W20, 64
	099 Call SHA256Managed.SHATransform, X0, X1, X2
	100 Add W8, W19, 64
	101 NotImplemented "Instruction CMP not yet implemented."
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move X2, [X22+40]
	104 Move X0, X21
	105 Move W1, W20
	106 Move W3, W25
	107 Move W4, W19
	108 Move X20, [X31+80]
	109 Move X19, [X31+88]
	110 Move X22, [X31+64]
	111 Move X21, [X31+72]
	112 Move X24, [X31+48]
	113 Move X23, [X31+56]
	114 Move X26, [X31+32]
	115 Move X25, [X31+40]
	116 Move X28, [X31+16]
	117 Move X27, [X31+24]
	118 Move X5, X31
	119 Move X30, [X31+96]
	120 Call Buffer.InternalBlockCopy, X0, X1, X2, X3, X4
	121 Return 
	122 Move X20, [X31+80]
	123 Move X19, [X31+88]
	124 Move X22, [X31+64]
	125 Move X21, [X31+72]
	126 Move X24, [X31+48]
	127 Move X23, [X31+56]
	128 Move X26, [X31+32]
	129 Move X25, [X31+40]
	130 Move X28, [X31+16]
	131 Move X27, [X31+24]
	132 Move X30, [X31+96]
	133 Return 

Method: System.Byte[] _EndHash()

Disassembly:
	0x0325ECA8 ADD X11, X21, X19
	0x0325ECAC LDUR X8, [X8 - 0x38]
	0x0325ECB0 AND X9, X22, X9, 0x0
	0x0325ECB4 BIC X10, X23, X22, 0x0
	0x0325ECB8 LDUR X11, [X11 - 0x58]
	0x0325ECBC ADD X9, X9, X24
	0x0325ECC0 ADD X9, X9, X10
	0x0325ECC4 ADD X9, X9, X0
	0x0325ECC8 ADD X8, X9, X8
	0x0325ECCC ADD X20, X8, X11
	0x0325ECD0 MOV X0, X25
	0x0325ECD4 ADD X24, X20, X27
	0x0325ECD8 BL 0x325F250
	0x0325ECDC MOV X27, X0
	0x0325ECE0 MOV X0, X24
	0x0325ECE4 BL 0x325F1E4
	0x0325ECE8 ADRP X8, 0xEC5000
	0x0325ECEC LDR X8, [X8 + 0xD0]
	0x0325ECF0 LDR X8, [X8]
	0x0325ECF4 LDR X8, [X8 + 0xB8]
	0x0325ECF8 LDR X8, [X8]
	0x0325ECFC CBZ X8, 0x325F134
	0x0325ED00 LDR W9, [X8 + 0x18]
	0x0325ED04 ADD X29, X29, 0x1
	0x0325ED08 CMP X29, X9
	0x0325ED0C B.CS 0x325F138
	0x0325ED10 ADD X11, X0, X23
	0x0325ED14 AND X12, X24, X22, 0x0
	0x0325ED18 EOR X9, X28, X26, 0x0
	0x0325ED1C ADD X11, X11, X12
	0x0325ED20 LDR X12, [X31 + 0x10]
	0x0325ED24 AND X10, X28, X26, 0x0
	0x0325ED28 ADD X8, X8, X19
	0x0325ED2C AND X9, X9, X25, 0x0
	0x0325ED30 EOR X9, X9, X10, 0x0
	0x0325ED34 ADD X10, X21, X19
	0x0325ED38 LDUR X8, [X8 - 0x30]
	0x0325ED3C LDUR X10, [X10 - 0x50]
	0x0325ED40 BIC X12, X12, X24, 0x0
	0x0325ED44 ADD X9, X20, X9
	0x0325ED48 ADD X27, X9, X27
	0x0325ED4C ADD X9, X11, X12
	0x0325ED50 ADD X8, X9, X8
	0x0325ED54 ADD X21, X8, X10
	0x0325ED58 MOV X0, X27
	0x0325ED5C ADD X23, X21, X26
	0x0325ED60 BL 0x325F250
	0x0325ED64 MOV X26, X0
	0x0325ED68 MOV X0, X23
	0x0325ED6C BL 0x325F1E4
	0x0325ED70 ADRP X8, 0xEC5000
	0x0325ED74 LDR X8, [X8 + 0xD0]
	0x0325ED78 LDR X8, [X8]
	0x0325ED7C LDR X8, [X8 + 0xB8]
	0x0325ED80 LDR X8, [X8]
	0x0325ED84 CBZ X8, 0x325F134
	0x0325ED88 LDR W9, [X8 + 0x18]
	0x0325ED8C ADD X20, X29, 0x1
	0x0325ED90 CMP X20, X9
	0x0325ED94 B.CS 0x325F138
	0x0325ED98 EOR X9, X25, X28, 0x0
	0x0325ED9C AND X10, X25, X28, 0x0
	0x0325EDA0 AND X9, X27, X9, 0x0
	0x0325EDA4 EOR X9, X9, X10, 0x0
	0x0325EDA8 LDR X10, [X31 + 0x18]
	0x0325EDAC LDR X11, [X31 + 0x10]
	0x0325EDB0 ADD X8, X8, X19
	0x0325EDB4 LDUR X8, [X8 - 0x28]
	0x0325EDB8 ADD X10, X10, X19
	0x0325EDBC ADD X11, X0, X11
	0x0325EDC0 AND X12, X23, X24, 0x0
	0x0325EDC4 LDUR X10, [X10 - 0x48]
	0x0325EDC8 ADD X11, X11, X12
	0x0325EDCC BIC X12, X22, X23, 0x0
	0x0325EDD0 ADD X9, X21, X9
	0x0325EDD4 ADD X26, X9, X26
	0x0325EDD8 ADD X9, X11, X12
	0x0325EDDC ADD X8, X9, X8
	0x0325EDE0 ADD X29, X8, X10
	0x0325EDE4 MOV X0, X26
	0x0325EDE8 ADD X21, X29, X28
	0x0325EDEC BL 0x325F250
	0x0325EDF0 MOV X28, X0
	0x0325EDF4 MOV X0, X21
	0x0325EDF8 BL 0x325F1E4
	0x0325EDFC ADRP X8, 0xEC5000
	0x0325EE00 LDR X8, [X8 + 0xD0]
	0x0325EE04 LDR X8, [X8]
	0x0325EE08 LDR X8, [X8 + 0xB8]
	0x0325EE0C LDR X8, [X8]
	0x0325EE10 CBZ X8, 0x325F134
	0x0325EE14 LDR W9, [X8 + 0x18]
	0x0325EE18 ADD X20, X20, 0x1
	0x0325EE1C CMP X20, X9
	0x0325EE20 B.CS 0x325F138
	0x0325EE24 EOR X9, X27, X25, 0x0
	0x0325EE28 AND X10, X27, X25, 0x0
	0x0325EE2C AND X9, X26, X9, 0x0
	0x0325EE30 EOR X9, X9, X10, 0x0
	0x0325EE34 LDR X10, [X31 + 0x18]
	0x0325EE38 ADD X8, X8, X19
	0x0325EE3C LDUR X8, [X8 - 0x20]
	0x0325EE40 ADD X11, X0, X22
	0x0325EE44 ADD X10, X10, X19
	0x0325EE48 AND X12, X21, X23, 0x0
	0x0325EE4C LDUR X10, [X10 - 0x40]
	0x0325EE50 ADD X11, X11, X12

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x117F000
	006 Move X21, 0xE96000
	007 Move W8, [X20+1312]
	008 Move X21, [X21+1560]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE96000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1312], W8
	019 Move X0, [X21]
	020 Move W1, 32
	021 Call 0x1C17D6C
	022 Move X8, [X19+48]
	023 Move X20, X0
	024 Move W9, 128
	025 Move X0, [X21]
	026 And X8, X8, 63
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move W10, 64
	029 NotImplemented "Instruction CSEL not yet implemented."
	030 Subtract X21, X9, X8
	031 Move W1, W21
	032 Call 0x1C17D6C
	033 Compare X0, 0
	034 JumpIfEqual {124}
	035 Move W8, [X0+24]
	036 Move X1, X0
	037 Compare W8, 0
	038 JumpIfEqual {123}
	039 Move W9, W21
	040 Move X9, W9
	041 Subtract X10, X9, 8
	042 Move W11, 128
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move [X1+32], W11
	045 Move X8, [X19+48]
	046 Add X10, X1, X10
	047 Move X11, X8
	048 ShiftRight X11, 53
	049 And X11, X11, 0x7FFFFFFF
	050 Move [X10+32], W11
	051 Move W11, [X1+24]
	052 Subtract X10, X21, 7
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X11, X8
	055 ShiftRight X11, 45
	056 And X11, X11, 0x7FFFFFFF
	057 Add X10, X1, X10
	058 Move [X10+32], W11
	059 Move W11, [X1+24]
	060 Subtract X10, X9, 6
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X11, X8
	063 ShiftRight X11, 37
	064 And X11, X11, 0x7FFFFFFF
	065 Add X10, X1, X10
	066 Move [X10+32], W11
	067 Move W11, [X1+24]
	068 Subtract X10, X9, 5
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move X11, X8
	071 ShiftRight X11, 29
	072 And X11, X11, 0x7FFFFFFF
	073 Add X10, X1, X10
	074 Move [X10+32], W11
	075 Move W11, [X1+24]
	076 Subtract X10, X9, 4
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X11, X8
	079 ShiftRight X11, 21
	080 And X11, X11, 0x7FFFFFFF
	081 Add X10, X1, X10
	082 Move [X10+32], W11
	083 Move W10, [X1+24]
	084 Subtract X9, X9, 3
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X10, X8
	087 ShiftRight X10, 13
	088 And X10, X10, 0x7FFFFFFF
	089 Add X9, X1, X9
	090 Move [X9+32], W10
	091 Move W10, [X1+24]
	092 Subtract W9, W21, 2
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move X10, X8
	095 ShiftRight X10, 5
	096 And X10, X10, 0x7FFFFFFF
	097 Add X9, X1, W9
	098 Move [X9+32], W10
	099 Move W10, [X1+24]
	100 Subtract W9, W21, 1
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move W8, W8
	103 ShiftRight W8, 29
	104 And W8, W8, 0xFFFFFFF
	105 Add X9, X1, W9
	106 Move [X9+32], W8
	107 Move W3, [X1+24]
	108 Move X0, X19
	109 Move W2, W31
	110 Call SHA256Managed._HashData, X0, X1, X2, X3
	111 Move X1, [X19+56]
	112 Move W2, 8
	113 Move X0, X20
	114 Move X3, X31
	115 Call Utils.DWORDToBigEndian, X0, X1, X2
	116 Move [X19+24], X20
	117 Move X0, X20
	118 Move X20, [X31+16]
	119 Move X19, [X31+24]
	120 Move X30, [X31+32]
	121 Move X21, [X31+40]
	122 Return X0
	123 Call 0x1C17F28
	124 Call 0x1C17F20

Method: System.Void SHATransform(System.UInt32* expandedBuffer, System.UInt32* state, System.Byte* block)

Disassembly:
	0x0325EE54 BIC X12, X24, X21, 0x0
	0x0325EE58 ADD X9, X29, X9
	0x0325EE5C ADD X28, X9, X28
	0x0325EE60 ADD X9, X11, X12
	0x0325EE64 ADD X8, X9, X8
	0x0325EE68 ADD X29, X8, X10
	0x0325EE6C MOV X0, X28
	0x0325EE70 ADD X22, X29, X25
	0x0325EE74 BL 0x325F250
	0x0325EE78 MOV X25, X0
	0x0325EE7C MOV X0, X22
	0x0325EE80 BL 0x325F1E4
	0x0325EE84 ADRP X8, 0xEC5000
	0x0325EE88 LDR X8, [X8 + 0xD0]
	0x0325EE8C LDR X8, [X8]
	0x0325EE90 LDR X8, [X8 + 0xB8]
	0x0325EE94 LDR X8, [X8]
	0x0325EE98 CBZ X8, 0x325F134
	0x0325EE9C LDR W9, [X8 + 0x18]
	0x0325EEA0 ADD X20, X20, 0x1
	0x0325EEA4 CMP X20, X9
	0x0325EEA8 B.CS 0x325F138
	0x0325EEAC EOR X9, X26, X27, 0x0
	0x0325EEB0 AND X10, X26, X27, 0x0
	0x0325EEB4 AND X9, X28, X9, 0x0
	0x0325EEB8 EOR X9, X9, X10, 0x0
	0x0325EEBC LDR X10, [X31 + 0x18]
	0x0325EEC0 ADD X8, X8, X19
	0x0325EEC4 LDUR X8, [X8 - 0x18]
	0x0325EEC8 ADD X11, X0, X24
	0x0325EECC ADD X10, X10, X19
	0x0325EED0 AND X12, X22, X21, 0x0
	0x0325EED4 LDUR X10, [X10 - 0x38]
	0x0325EED8 ADD X11, X11, X12
	0x0325EEDC BIC X12, X23, X22, 0x0
	0x0325EEE0 ADD X9, X29, X9
	0x0325EEE4 ADD X25, X9, X25
	0x0325EEE8 ADD X9, X11, X12
	0x0325EEEC ADD X8, X9, X8
	0x0325EEF0 ADD X29, X8, X10
	0x0325EEF4 MOV X0, X25
	0x0325EEF8 ADD X24, X29, X27
	0x0325EEFC BL 0x325F250
	0x0325EF00 MOV X27, X0
	0x0325EF04 MOV X0, X24
	0x0325EF08 BL 0x325F1E4
	0x0325EF0C ADRP X8, 0xEC5000
	0x0325EF10 LDR X8, [X8 + 0xD0]
	0x0325EF14 LDR X8, [X8]
	0x0325EF18 LDR X8, [X8 + 0xB8]
	0x0325EF1C LDR X8, [X8]
	0x0325EF20 CBZ X8, 0x325F134
	0x0325EF24 LDR W9, [X8 + 0x18]
	0x0325EF28 ADD X20, X20, 0x1
	0x0325EF2C CMP X20, X9
	0x0325EF30 B.CS 0x325F138
	0x0325EF34 EOR X9, X28, X26, 0x0
	0x0325EF38 AND X10, X28, X26, 0x0
	0x0325EF3C AND X9, X25, X9, 0x0
	0x0325EF40 EOR X9, X9, X10, 0x0
	0x0325EF44 LDR X10, [X31 + 0x18]
	0x0325EF48 ADD X8, X8, X19
	0x0325EF4C LDUR X8, [X8 - 0x10]
	0x0325EF50 ADD X11, X0, X23
	0x0325EF54 ADD X10, X10, X19
	0x0325EF58 AND X12, X24, X22, 0x0
	0x0325EF5C LDUR X10, [X10 - 0x30]
	0x0325EF60 ADD X11, X11, X12
	0x0325EF64 BIC X12, X21, X24, 0x0
	0x0325EF68 ADD X9, X29, X9
	0x0325EF6C ADD X27, X9, X27
	0x0325EF70 ADD X9, X11, X12
	0x0325EF74 ADD X8, X9, X8
	0x0325EF78 ADD X29, X8, X10
	0x0325EF7C MOV X0, X27
	0x0325EF80 ADD X23, X29, X26
	0x0325EF84 BL 0x325F250
	0x0325EF88 MOV X26, X0
	0x0325EF8C MOV X0, X23
	0x0325EF90 BL 0x325F1E4
	0x0325EF94 ADRP X8, 0xEC5000
	0x0325EF98 LDR X8, [X8 + 0xD0]
	0x0325EF9C LDR X8, [X8]
	0x0325EFA0 LDR X8, [X8 + 0xB8]
	0x0325EFA4 LDR X8, [X8]
	0x0325EFA8 CBZ X8, 0x325F134
	0x0325EFAC LDR W9, [X8 + 0x18]
	0x0325EFB0 ADD X20, X20, 0x1
	0x0325EFB4 CMP X20, X9
	0x0325EFB8 B.CS 0x325F138
	0x0325EFBC EOR X9, X25, X28, 0x0
	0x0325EFC0 AND X10, X25, X28, 0x0
	0x0325EFC4 AND X9, X27, X9, 0x0
	0x0325EFC8 EOR X9, X9, X10, 0x0
	0x0325EFCC LDR X10, [X31 + 0x18]
	0x0325EFD0 ADD X8, X8, X19
	0x0325EFD4 LDUR X8, [X8 - 0x8]
	0x0325EFD8 ADD X11, X0, X21
	0x0325EFDC ADD X10, X10, X19
	0x0325EFE0 AND X12, X23, X24, 0x0
	0x0325EFE4 LDUR X10, [X10 - 0x28]
	0x0325EFE8 ADD X11, X11, X12
	0x0325EFEC BIC X12, X22, X23, 0x0
	0x0325EFF0 ADD X9, X29, X9
	0x0325EFF4 ADD X26, X9, X26
	0x0325EFF8 ADD X9, X11, X12
	0x0325EFFC ADD X8, X9, X8
	0x0325F000 ADD X21, X8, X10
	0x0325F004 MOV X0, X26
	0x0325F008 ADD X29, X21, X28
	0x0325F00C BL 0x325F250
	0x0325F010 MOV X28, X0
	0x0325F014 MOV X0, X29
	0x0325F018 STR X29, [X31 + 0x10]
	0x0325F01C BL 0x325F1E4
	0x0325F020 ADRP X8, 0xEC4000
	0x0325F024 LDR X8, [X8 + 0xD0]
	0x0325F028 LDR X8, [X8]
	0x0325F02C LDR X8, [X8 + 0xB8]
	0x0325F030 LDR X8, [X8]
	0x0325F034 CBZ X8, 0x325F134
	0x0325F038 LDR W9, [X8 + 0x18]
	0x0325F03C ADD X29, X20, 0x1
	0x0325F040 CMP X29, X9
	0x0325F044 B.CS 0x325F138
	0x0325F048 EOR X9, X27, X25, 0x0
	0x0325F04C AND X10, X27, X25, 0x0
	0x0325F050 AND X9, X26, X9, 0x0
	0x0325F054 EOR X9, X9, X10, 0x0
	0x0325F058 LDR X10, [X31 + 0x18]
	0x0325F05C LDR X13, [X31 + 0x10]
	0x0325F060 LDR X8, [X8, X19, LSL]
	0x0325F064 ADD X11, X0, X22
	0x0325F068 ADD X10, X10, X19
	0x0325F06C AND X12, X13, X23, 0x0
	0x0325F070 LDUR X10, [X10 - 0x20]
	0x0325F074 ADD X11, X11, X12
	0x0325F078 BIC X12, X24, X13, 0x0
	0x0325F07C ADD X11, X11, X12
	0x0325F080 ADD X9, X21, X9
	0x0325F084 ADD X28, X9, X28
	0x0325F088 ADD X8, X11, X8
	0x0325F08C ADD X20, X8, X10
	0x0325F090 MOV X0, X28
	0x0325F094 ADD X22, X20, X25
	0x0325F098 BL 0x325F250
	0x0325F09C EOR X8, X26, X27, 0x0
	0x0325F0A0 AND X9, X26, X27, 0x0
	0x0325F0A4 AND X8, X28, X8, 0x0
	0x0325F0A8 EOR X8, X8, X9, 0x0
	0x0325F0AC ADD X8, X20, X8
	0x0325F0B0 ADRP X20, 0xEC4000
	0x0325F0B4 LDR X20, [X20 + 0xD0]
	0x0325F0B8 SUB X10, X29, 0x7
	0x0325F0BC ADD X19, X19, 0x40
	0x0325F0C0 CMP X10, 0x48
	0x0325F0C4 ADD X25, X8, X0
	0x0325F0C8 ADD X29, X29, 0x1
	0x0325F0CC B.CC 0x325EC68
	0x0325F0D0 LDP X16, X17, [X31 + 0x8]
	0x0325F0D4 LDP X20, X19, [X31 + 0x70]
	0x0325F0D8 LDP X29, X30, [X31 + 0x20]
	0x0325F0DC LDP X8, X9, [X16]
	0x0325F0E0 LDP X10, X11, [X16 + 0x10]
	0x0325F0E4 LDP X12, X13, [X16 + 0x20]
	0x0325F0E8 LDP X14, X15, [X16 + 0x30]
	0x0325F0EC ADD X8, X8, X25
	0x0325F0F0 ADD X9, X9, X28
	0x0325F0F4 ADD X10, X10, X26
	0x0325F0F8 ADD X11, X11, X27
	0x0325F0FC ADD X12, X12, X22
	0x0325F100 ADD X14, X14, X23
	0x0325F104 ADD X15, X15, X24
	0x0325F108 LDP X22, X21, [X31 + 0x60]
	0x0325F10C LDP X24, X23, [X31 + 0x50]
	0x0325F110 LDP X26, X25, [X31 + 0x40]
	0x0325F114 LDP X28, X27, [X31 + 0x30]
	0x0325F118 ADD X13, X13, X17
	0x0325F11C STP X8, X9, [X16]
	0x0325F120 STP X10, X11, [X16 + 0x10]
	0x0325F124 STP X12, X13, [X16 + 0x20]
	0x0325F128 STP X14, X15, [X16 + 0x30]
	0x0325F12C ADD X31, X31, 0x80
	0x0325F130 RET
	0x0325F134 BL 0x1C16F20
	0x0325F138 BL 0x1C16F28
	0x0325F13C STR X30, [X31 - 0x40]!
	0x0325F140 STP X24, X23, [X31 + 0x10]
	0x0325F144 STP X22, X21, [X31 + 0x20]
	0x0325F148 STP X20, X19, [X31 + 0x30]
	0x0325F14C ADRP X20, 0x117D000
	0x0325F150 LDRB W8, [X20 + 0x531]
	0x0325F154 MOV X19, X0
	0x0325F158 TBNZ X8, 0x0, 0x325F170
	0x0325F15C ADRP X0, 0xEC4000
	0x0325F160 LDR X0, [X0 + 0xD0]
	0x0325F164 BL 0x1C16CF4
	0x0325F168 MOVZ W8, 0x1
	0x0325F16C STRB W8, [X20 + 0x531]
	0x0325F170 ADRP X22, 0xEC4000
	0x0325F174 LDR X22, [X22 + 0xD0]
	0x0325F178 MOV X21, X31
	0x0325F17C LDR X0, [X22]
	0x0325F180 ADD X23, X19, X21
	0x0325F184 LDR X20, [X23 + 0x70]
	0x0325F188 LDR W8, [X0 + 0xE0]
	0x0325F18C CBNZ W8, 0x325F194
	0x0325F190 BL 0x1C16DFC
	0x0325F194 MOV X0, X20
	0x0325F198 BL 0x325F324
	0x0325F19C LDR X8, [X23 + 0x8]
	0x0325F1A0 LDR X24, [X23 + 0x48]
	0x0325F1A4 MOV X20, X0
	0x0325F1A8 MOV X0, X8
	0x0325F1AC BL 0x325F2C8
	0x0325F1B0 LDR X8, [X23]
	0x0325F1B4 ADD X9, X24, X20
	0x0325F1B8 ADD X21, X21, 0x8
	0x0325F1BC ADD X9, X9, X0
	0x0325F1C0 ADD X8, X9, X8
	0x0325F1C4 CMP X21, 0x200
	0x0325F1C8 STR X8, [X23 + 0x80]
	0x0325F1CC B.NE 0x325F17C
	0x0325F1D0 LDP X20, X19, [X31 + 0x30]
	0x0325F1D4 LDP X22, X21, [X31 + 0x20]
	0x0325F1D8 LDP X24, X23, [X31 + 0x10]
	0x0325F1DC LDR X30, [X31], #0x40
	0x0325F1E0 RET
	0x0325F1E4 STP X30, X21, [X31 - 0x20]!
	0x0325F1E8 STP X20, X19, [X31 + 0x10]
	0x0325F1EC ADRP X20, 0x117D000
	0x0325F1F0 ADRP X21, 0xEC4000
	0x0325F1F4 LDRB W8, [X20 + 0x52E]
	0x0325F1F8 LDR X21, [X21 + 0xD0]
	0x0325F1FC MOV X19, X0
	0x0325F200 TBNZ X8, 0x0, 0x325F218
	0x0325F204 ADRP X0, 0xEC4000
	0x0325F208 LDR X0, [X0 + 0xD0]
	0x0325F20C BL 0x1C16CF4
	0x0325F210 MOVZ W8, 0x1
	0x0325F214 STRB W8, [X20 + 0x52E]
	0x0325F218 LDR X0, [X21]
	0x0325F21C LDR W8, [X0 + 0xE0]
	0x0325F220 CBNZ W8, 0x325F228
	0x0325F224 BL 0x1C16DFC
	0x0325F228 EXTR X8, X19, X19, 0xE
	0x0325F22C EOR X8, X8, X19, 0x12
	0x0325F230 EOR X0, X8, X19, 0x29
	0x0325F234 LDP X20, X19, [X31 + 0x10]
	0x0325F238 LDP X30, X21, [X31], #0x20
	0x0325F23C RET
	0x0325F240 AND X8, X1, X0, 0x0
	0x0325F244 BIC X9, X2, X0, 0x0
	0x0325F248 ORR X0, X9, X8, 0x0
	0x0325F24C RET
	0x0325F250 STP X30, X21, [X31 - 0x20]!
	0x0325F254 STP X20, X19, [X31 + 0x10]
	0x0325F258 ADRP X20, 0x117D000
	0x0325F25C ADRP X21, 0xEC4000
	0x0325F260 LDRB W8, [X20 + 0x52D]
	0x0325F264 LDR X21, [X21 + 0xD0]
	0x0325F268 MOV X19, X0
	0x0325F26C TBNZ X8, 0x0, 0x325F284
	0x0325F270 ADRP X0, 0xEC4000
	0x0325F274 LDR X0, [X0 + 0xD0]
	0x0325F278 BL 0x1C16CF4
	0x0325F27C MOVZ W8, 0x1
	0x0325F280 STRB W8, [X20 + 0x52D]
	0x0325F284 LDR X0, [X21]
	0x0325F288 LDR W8, [X0 + 0xE0]
	0x0325F28C CBNZ W8, 0x325F294
	0x0325F290 BL 0x1C16DFC
	0x0325F294 EXTR X8, X19, X19, 0x1C
	0x0325F298 EOR X8, X8, X19, 0x22
	0x0325F29C EOR X0, X8, X19, 0x27
	0x0325F2A0 LDP X20, X19, [X31 + 0x10]
	0x0325F2A4 LDP X30, X21, [X31], #0x20
	0x0325F2A8 RET
	0x0325F2AC EOR X8, X2, X1, 0x0
	0x0325F2B0 AND X8, X8, X0, 0x0
	0x0325F2B4 AND X9, X2, X1, 0x0
	0x0325F2B8 EOR X0, X8, X9, 0x0
	0x0325F2BC RET
	0x0325F2C0 RORV X0, X0, X1
	0x0325F2C4 RET
	0x0325F2C8 STP X30, X21, [X31 - 0x20]!
	0x0325F2CC STP X20, X19, [X31 + 0x10]
	0x0325F2D0 ADRP X20, 0x117D000
	0x0325F2D4 ADRP X21, 0xEC4000
	0x0325F2D8 LDRB W8, [X20 + 0x52F]
	0x0325F2DC LDR X21, [X21 + 0xD0]
	0x0325F2E0 MOV X19, X0
	0x0325F2E4 TBNZ X8, 0x0, 0x325F2FC
	0x0325F2E8 ADRP X0, 0xEC4000
	0x0325F2EC LDR X0, [X0 + 0xD0]
	0x0325F2F0 BL 0x1C16CF4
	0x0325F2F4 MOVZ W8, 0x1
	0x0325F2F8 STRB W8, [X20 + 0x52F]
	0x0325F2FC LDR X0, [X21]
	0x0325F300 LDR W8, [X0 + 0xE0]
	0x0325F304 CBNZ W8, 0x325F30C
	0x0325F308 BL 0x1C16DFC
	0x0325F30C EXTR X8, X19, X19, 0x1
	0x0325F310 EOR X8, X8, X19, 0x8
	0x0325F314 EOR X0, X8, X19, 0x7
	0x0325F318 LDP X20, X19, [X31 + 0x10]
	0x0325F31C LDP X30, X21, [X31], #0x20
	0x0325F320 RET
	0x0325F324 STP X30, X21, [X31 - 0x20]!
	0x0325F328 STP X20, X19, [X31 + 0x10]
	0x0325F32C ADRP X20, 0x117D000
	0x0325F330 ADRP X21, 0xEC4000
	0x0325F334 LDRB W8, [X20 + 0x530]
	0x0325F338 LDR X21, [X21 + 0xD0]
	0x0325F33C MOV X19, X0
	0x0325F340 TBNZ X8, 0x0, 0x325F358
	0x0325F344 ADRP X0, 0xEC4000
	0x0325F348 LDR X0, [X0 + 0xD0]
	0x0325F34C BL 0x1C16CF4
	0x0325F350 MOVZ W8, 0x1
	0x0325F354 STRB W8, [X20 + 0x530]
	0x0325F358 LDR X0, [X21]
	0x0325F35C LDR W8, [X0 + 0xE0]
	0x0325F360 CBNZ W8, 0x325F368
	0x0325F364 BL 0x1C16DFC
	0x0325F368 EXTR X8, X19, X19, 0x13
	0x0325F36C EOR X8, X8, X19, 0x3D
	0x0325F370 EOR X0, X8, X19, 0x6
	0x0325F374 LDP X20, X19, [X31 + 0x10]
	0x0325F378 LDP X30, X21, [X31], #0x20
	0x0325F37C RET
	0x0325F380 STR X30, [X31 - 0x30]!
	0x0325F384 STP X22, X21, [X31 + 0x10]
	0x0325F388 STP X20, X19, [X31 + 0x20]
	0x0325F38C ADRP X21, 0x117D000
	0x0325F390 ADRP X22, 0xE9C000
	0x0325F394 ADRP X19, 0xEC4000
	0x0325F398 ADRP X20, 0xEC4000
	0x0325F39C LDRB W8, [X21 + 0x532]
	0x0325F3A0 LDR X22, [X22 + 0x568]
	0x0325F3A4 LDR X19, [X19 + 0x330]
	0x0325F3A8 LDR X20, [X20 + 0xD0]
	0x0325F3AC TBNZ X8, 0x0, 0x325F3DC
	0x0325F3B0 ADRP X0, 0xEC4000
	0x0325F3B4 LDR X0, [X0 + 0xD0]
	0x0325F3B8 BL 0x1C16CF4
	0x0325F3BC ADRP X0, 0xEC4000
	0x0325F3C0 LDR X0, [X0 + 0x330]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], X29
	003 Move [X31+40], X30
	004 Move [X31+48], X28
	005 Move [X31+56], X27
	006 Move [X31+64], X26
	007 Move [X31+72], X25
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X19, 0x117F000
	015 Move X22, 0xEC6000
	016 Move W8, [X19+1313]
	017 Move X22, [X22+192]
	018 Move X29, X2
	019 Move X20, X1
	020 Move X21, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0xEC6000
	026 Move X0, [X0+192]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X19+1313], W8
	030 Move W24, [X20+16]
	031 Move W9, [X20+20]
	032 Move W8, [X20+24]
	033 Move W23, [X20+28]
	034 Move W25, [X20]
	035 Move W28, [X20+4]
	036 Move W26, [X20+8]
	037 Move W27, [X20+12]
	038 Move W1, 16
	039 Move X0, X21
	040 Move X2, X29
	041 Move X3, X31
	042 Move [X31+24], W8
	043 Move [X31+28], W9
	044 Move [X31+8], X20
	045 Call Utils.DWORDFromBigEndian, X0, X1, X2
	046 Move X0, [X22]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 Move X0, X21
	052 Call SHA256Managed.SHA256Expand, X0
	053 Move X29, X31
	054 Move W19, 32
	055 Move [X31+16], X21
	056 Move X0, [X22]
	057 Move W8, [X0+224]
	058 Compare W8, 0
	059 JumpIfNotEqual {61}
	060 Call 0x1C17DFC
	061 Move W0, W24
	062 Call SHA256Managed.Sigma_1, X0
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move X8, [X8]
	066 Compare X8, 0
	067 JumpIfEqual {378}
	068 Move W9, [X8+24]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move W10, [X31+24]
	071 Move W9, [X31+28]
	072 Move W8, [X8]
	073 Add X11, X21, X19
	074 NotImplemented "Instruction LDUR not yet implemented."
	075 And W9, W24, W9
	076 NotImplemented "Instruction BIC not yet implemented."
	077 Add W9, W9, W23
	078 Add W9, W9, W10
	079 Add W9, W9, W0
	080 Add W8, W9, W8
	081 Add W20, W8, W11
	082 Move W0, W25
	083 Add W23, W20, W27
	084 Call SHA256Managed.Sigma_0, X0
	085 Move W27, W0
	086 Move W0, W23
	087 Call SHA256Managed.Sigma_1, X0
	088 Move X8, [X22]
	089 Move X8, [X8+184]
	090 Move X8, [X8]
	091 Compare X8, 0
	092 JumpIfEqual {378}
	093 Move W9, [X8+24]
	094 Add X29, X29, 1
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move W11, [X31+24]
	097 And W12, W23, W24
	098 Xor W9, W28, W26
	099 And W10, W28, W26
	100 Add W11, W0, W11
	101 Add W11, W11, W12
	102 Move W12, [X31+28]
	103 Add X8, X8, X19
	104 And W9, W9, W25
	105 Xor W9, W9, W10
	106 Add X10, X21, X19
	107 Move W8, [X8+4]
	108 NotImplemented "Instruction LDUR not yet implemented."
	109 NotImplemented "Instruction BIC not yet implemented."
	110 Add W9, W20, W9
	111 Add W27, W9, W27
	112 Add W9, W11, W12
	113 Add W8, W9, W8
	114 Add W21, W8, W10
	115 Move W0, W27
	116 Add W22, W21, W26
	117 Call SHA256Managed.Sigma_0, X0
	118 Move W26, W0
	119 Move W0, W22
	120 Call SHA256Managed.Sigma_1, X0
	121 Move X8, 0xEC6000
	122 Move X8, [X8+192]
	123 Move X8, [X8]
	124 Move X8, [X8+184]
	125 Move X8, [X8]
	126 Compare X8, 0
	127 JumpIfEqual {378}
	128 Move W9, [X8+24]
	129 Add X20, X29, 1
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Xor W9, W25, W28
	132 And W10, W25, W28
	133 And W9, W27, W9
	134 Xor W9, W9, W10
	135 Move X10, [X31+16]
	136 Move W11, [X31+28]
	137 Add X8, X8, X19
	138 Move W8, [X8+8]
	139 Add X10, X10, X19
	140 Add W11, W0, W11
	141 And W12, W22, W23
	142 NotImplemented "Instruction LDUR not yet implemented."
	143 Add W11, W11, W12
	144 NotImplemented "Instruction BIC not yet implemented."
	145 Add W9, W21, W9
	146 Add W26, W9, W26
	147 Add W9, W11, W12
	148 Add W8, W9, W8
	149 Add W29, W8, W10
	150 Move W0, W26
	151 Add W21, W29, W28
	152 Call SHA256Managed.Sigma_0, X0
	153 Move W28, W0
	154 Move W0, W21
	155 Call SHA256Managed.Sigma_1, X0
	156 Move X8, 0xEC5000
	157 Move X8, [X8+192]
	158 Move X8, [X8]
	159 Move X8, [X8+184]
	160 Move X8, [X8]
	161 Compare X8, 0
	162 JumpIfEqual {378}
	163 Move W9, [X8+24]
	164 Add X20, X20, 1
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Xor W9, W27, W25
	167 And W10, W27, W25
	168 And W9, W26, W9
	169 Xor W9, W9, W10
	170 Move X10, [X31+16]
	171 Add X8, X8, X19
	172 Move W8, [X8+12]
	173 Add W11, W0, W24
	174 Add X10, X10, X19
	175 And W12, W21, W22
	176 NotImplemented "Instruction LDUR not yet implemented."
	177 Add W11, W11, W12
	178 NotImplemented "Instruction BIC not yet implemented."
	179 Add W9, W29, W9
	180 Add W28, W9, W28
	181 Add W9, W11, W12
	182 Add W8, W9, W8
	183 Add W29, W8, W10
	184 Move W0, W28
	185 Add W24, W29, W25
	186 Call SHA256Managed.Sigma_0, X0
	187 Move W25, W0
	188 Move W0, W24
	189 Call SHA256Managed.Sigma_1, X0
	190 Move X8, 0xEC5000
	191 Move X8, [X8+192]
	192 Move X8, [X8]
	193 Move X8, [X8+184]
	194 Move X8, [X8]
	195 Compare X8, 0
	196 JumpIfEqual {378}
	197 Move W9, [X8+24]
	198 Add X20, X20, 1
	199 NotImplemented "Instruction CMP not yet implemented."
	200 Xor W9, W26, W27
	201 And W10, W26, W27
	202 And W9, W28, W9
	203 Xor W9, W9, W10
	204 Move X10, [X31+16]
	205 Add X8, X8, X19
	206 Move W8, [X8+16]
	207 Add W11, W0, W23
	208 Add X10, X10, X19
	209 And W12, W24, W21
	210 NotImplemented "Instruction LDUR not yet implemented."
	211 Add W11, W11, W12
	212 NotImplemented "Instruction BIC not yet implemented."
	213 Add W9, W29, W9
	214 Add W25, W9, W25
	215 Add W9, W11, W12
	216 Add W8, W9, W8
	217 Add W29, W8, W10
	218 Move W0, W25
	219 Add W23, W29, W27
	220 Call SHA256Managed.Sigma_0, X0
	221 Move W27, W0
	222 Move W0, W23
	223 Call SHA256Managed.Sigma_1, X0
	224 Move X8, 0xEC5000
	225 Move X8, [X8+192]
	226 Move X8, [X8]
	227 Move X8, [X8+184]
	228 Move X8, [X8]
	229 Compare X8, 0
	230 JumpIfEqual {378}
	231 Move W9, [X8+24]
	232 Add X20, X20, 1
	233 NotImplemented "Instruction CMP not yet implemented."
	234 Xor W9, W28, W26
	235 And W10, W28, W26
	236 And W9, W25, W9
	237 Xor W9, W9, W10
	238 Move X10, [X31+16]
	239 Add X8, X8, X19
	240 Move W8, [X8+20]
	241 Add W11, W0, W22
	242 Add X10, X10, X19
	243 And W12, W23, W24
	244 NotImplemented "Instruction LDUR not yet implemented."
	245 Add W11, W11, W12
	246 NotImplemented "Instruction BIC not yet implemented."
	247 Add W9, W29, W9
	248 Add W27, W9, W27
	249 Add W9, W11, W12
	250 Add W8, W9, W8
	251 Add W22, W8, W10
	252 Move W0, W27
	253 Add W29, W22, W26
	254 Call SHA256Managed.Sigma_0, X0
	255 Move W26, W0
	256 Move W0, W29
	257 Move [X31+24], W29
	258 Call SHA256Managed.Sigma_1, X0
	259 Move X8, 0xEC5000
	260 Move X8, [X8+192]
	261 Move X8, [X8]
	262 Move X8, [X8+184]
	263 Move X8, [X8]
	264 Compare X8, 0
	265 JumpIfEqual {378}
	266 Move W9, [X8+24]
	267 Add X29, X20, 1
	268 NotImplemented "Instruction CMP not yet implemented."
	269 Add W11, W0, W21
	270 Move X21, [X31+16]
	271 Move W13, [X31+24]
	272 Xor W9, W25, W28
	273 And W10, W25, W28
	274 Add X8, X8, X19
	275 And W9, W27, W9
	276 Xor W9, W9, W10
	277 Add X10, X21, X19
	278 Move W8, [X8+24]
	279 And W12, W13, W23
	280 NotImplemented "Instruction LDUR not yet implemented."
	281 Add W11, W11, W12
	282 NotImplemented "Instruction BIC not yet implemented."
	283 Add W9, W22, W9
	284 Add W26, W9, W26
	285 Add W9, W11, W12
	286 Add W8, W9, W8
	287 Add W20, W8, W10
	288 Move W0, W26
	289 Add W22, W20, W28
	290 Call SHA256Managed.Sigma_0, X0
	291 Move W28, W0
	292 Move W0, W22
	293 Move [X31+28], W22
	294 Call SHA256Managed.Sigma_1, X0
	295 Move X22, 0xEC5000
	296 Move X22, [X22+192]
	297 Move X8, [X22]
	298 Move X8, [X8+184]
	299 Move X8, [X8]
	300 Compare X8, 0
	301 JumpIfEqual {378}
	302 Move W9, [X8+24]
	303 Add X29, X29, 1
	304 NotImplemented "Instruction CMP not yet implemented."
	305 Move W12, [X31+24]
	306 Move W13, [X31+28]
	307 Xor W9, W27, W25
	308 And W10, W27, W25
	309 Add X8, X8, X19
	310 And W9, W26, W9
	311 Xor W9, W9, W10
	312 Add X10, X21, X19
	313 Move W8, [X8+28]
	314 Add W11, W0, W24
	315 And W12, W13, W12
	316 NotImplemented "Instruction LDUR not yet implemented."
	317 Add W11, W11, W12
	318 NotImplemented "Instruction BIC not yet implemented."
	319 Add W9, W20, W9
	320 Add W28, W9, W28
	321 Add W9, W11, W12
	322 Add W8, W9, W8
	323 Add W20, W8, W10
	324 Move W0, W28
	325 Add W24, W20, W25
	326 Call SHA256Managed.Sigma_0, X0
	327 Xor W8, W26, W27
	328 And W9, W26, W27
	329 And W8, W28, W8
	330 Xor W8, W8, W9
	331 Subtract X10, X29, 7
	332 Add W8, W20, W8
	333 Add X19, X19, 32
	334 NotImplemented "Instruction CMP not yet implemented."
	335 Add W25, W8, W0
	336 Add X29, X29, 1
	337 Move X16, [X31+8]
	338 Move W17, [X31+28]
	339 Move X20, [X31+112]
	340 Move X19, [X31+120]
	341 Move X22, [X31+96]
	342 Move X21, [X31+104]
	343 Move W12, [X16+16]
	344 Move W13, [X16+20]
	345 Move W8, [X16]
	346 Move W9, [X16+4]
	347 Move W10, [X16+8]
	348 Move W11, [X16+12]
	349 Move W14, [X16+24]
	350 Move W15, [X16+28]
	351 Add W13, W13, W17
	352 Move W17, [X31+24]
	353 Add W8, W8, W25
	354 Add W9, W9, W28
	355 Add W10, W10, W26
	356 Add W11, W11, W27
	357 Add W12, W12, W24
	358 Add W15, W15, W23
	359 Move X24, [X31+80]
	360 Move X23, [X31+88]
	361 Move X26, [X31+64]
	362 Move X25, [X31+72]
	363 Move X28, [X31+48]
	364 Move X27, [X31+56]
	365 Move X29, [X31+32]
	366 Move X30, [X31+40]
	367 Add W14, W14, W17
	368 Move [X16], W8
	369 Move [X16+4], W9
	370 Move [X16+8], W10
	371 Move [X16+12], W11
	372 Move [X16+16], W12
	373 Move [X16+20], W13
	374 Move [X16+24], W14
	375 Move [X16+28], W15
	376 Add X31, X31, 128
	377 Return 
	378 Call 0x1C17F20
	379 Call 0x1C17F28

Method: System.UInt32 RotateRight(System.UInt32 x, System.Int32 n)

Disassembly:
	0x0325F548 B 0x325F554
	0x0325F54C MOV W0, W31

ISIL:
	001 NotImplemented "Instruction RORV not yet implemented."
	002 Return X0

Method: System.UInt32 Ch(System.UInt32 x, System.UInt32 y, System.UInt32 z)

Disassembly:
	0x0325F4C8 BL 0x1C16CF4
	0x0325F4CC MOVZ W8, 0x1
	0x0325F4D0 STRB W8, [X20 + 0x534]
	0x0325F4D4 ADRP X20, 0xE9C000

ISIL:
	001 And W8, W1, W0
	002 NotImplemented "Instruction BIC not yet implemented."
	003 Or W0, W9, W8
	004 Return X0

Method: System.UInt32 Maj(System.UInt32 x, System.UInt32 y, System.UInt32 z)

Disassembly:
	0x0325F534 STR X0, [X19 + 0x40]
	0x0325F538 MOV X0, X19
	0x0325F53C LDP X20, X19, [X31 + 0x20]
	0x0325F540 LDP X22, X21, [X31 + 0x10]
	0x0325F544 LDR X30, [X31], #0x30

ISIL:
	001 Xor W8, W2, W1
	002 And W8, W8, W0
	003 And W9, W2, W1
	004 Xor W0, W8, W9
	005 Return X0

Method: System.UInt32 sigma_0(System.UInt32 x)

Disassembly:
	0x0325F550 RET
	0x0325F554 STR X30, [X31 - 0x10]!
	0x0325F558 LDR X8, [X0 + 0x38]
	0x0325F55C STR X31, [X0 + 0x30]
	0x0325F560 CBZ X8, 0x325F650
	0x0325F564 LDR W9, [X8 + 0x18]
	0x0325F568 CBZ W9, 0x325F64C
	0x0325F56C MOVZ X10, 0xC908
	0x0325F570 MOVK X10, 0xF3BC0000
	0x0325F574 MOVK X10, 0xE667
	0x0325F578 MOVK X10, 0x6A090000
	0x0325F57C CMP W9, 0x1
	0x0325F580 STR X10, [X8 + 0x20]
	0x0325F584 B.EQ 0x325F64C
	0x0325F588 MOVZ X10, 0xA73B
	0x0325F58C MOVK X10, 0x84CA0000
	0x0325F590 MOVK X10, 0xAE85
	0x0325F594 MOVK X10, 0xBB670000
	0x0325F598 CMP W9, 0x2
	0x0325F59C STR X10, [X8 + 0x28]
	0x0325F5A0 B.LS 0x325F64C
	0x0325F5A4 MOVZ X10, 0xF82B
	0x0325F5A8 MOVK X10, 0xFE940000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x117E000
	006 Move X21, 0xEC5000
	007 Move W8, [X20+1314]
	008 Move X21, [X21+192]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEC5000
	015 Move X0, [X0+192]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1314], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 NotImplemented "Instruction EXTR not yet implemented."
	025 Xor W8, W8, W19
	026 Xor W0, W8, W19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.UInt32 sigma_1(System.UInt32 x)

Disassembly:
	0x0325F5AC MOVK X10, 0xF372
	0x0325F5B0 MOVK X10, 0x3C6E0000
	0x0325F5B4 CMP W9, 0x3
	0x0325F5B8 STR X10, [X8 + 0x30]
	0x0325F5BC B.EQ 0x325F64C
	0x0325F5C0 MOVZ X10, 0x36F1
	0x0325F5C4 MOVK X10, 0x5F1D0000
	0x0325F5C8 MOVK X10, 0xF53A
	0x0325F5CC MOVK X10, 0xA54F0000
	0x0325F5D0 CMP W9, 0x4
	0x0325F5D4 STR X10, [X8 + 0x38]
	0x0325F5D8 B.LS 0x325F64C
	0x0325F5DC MOVZ X10, 0x82D1
	0x0325F5E0 MOVK X10, 0xADE60000
	0x0325F5E4 MOVK X10, 0x527F
	0x0325F5E8 MOVK X10, 0x510E0000
	0x0325F5EC CMP W9, 0x5
	0x0325F5F0 STR X10, [X8 + 0x40]
	0x0325F5F4 B.EQ 0x325F64C
	0x0325F5F8 MOVZ X10, 0x6C1F
	0x0325F5FC MOVK X10, 0x2B3E0000
	0x0325F600 MOVK X10, 0x688C
	0x0325F604 MOVK X10, 0x9B050000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x117E000
	006 Move X21, 0xEC5000
	007 Move W8, [X20+1315]
	008 Move X21, [X21+192]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEC5000
	015 Move X0, [X0+192]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1315], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 NotImplemented "Instruction EXTR not yet implemented."
	025 Xor W8, W8, W19
	026 Xor W0, W8, W19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.UInt32 Sigma_0(System.UInt32 x)

Disassembly:
	0x0325F4D8 ADRP X22, 0xE94000
	0x0325F4DC LDR X20, [X20 + 0x568]
	0x0325F4E0 LDR X22, [X22 + 0x618]
	0x0325F4E4 MOV X0, X19
	0x0325F4E8 MOV X1, X31
	0x0325F4EC BL 0x3251230
	0x0325F4F0 MOVZ W8, 0x200
	0x0325F4F4 STR W8, [X19 + 0x14]
	0x0325F4F8 LDR X0, [X21]
	0x0325F4FC LDR W8, [X0 + 0xE0]
	0x0325F500 CBNZ W8, 0x325F508
	0x0325F504 BL 0x1C16DFC
	0x0325F508 LDR X0, [X20]
	0x0325F50C MOVZ W1, 0x8
	0x0325F510 BL 0x1C16D6C
	0x0325F514 STR X0, [X19 + 0x38]
	0x0325F518 LDR X0, [X22]
	0x0325F51C MOVZ W1, 0x80
	0x0325F520 BL 0x1C16D6C
	0x0325F524 STR X0, [X19 + 0x28]
	0x0325F528 LDR X0, [X20]
	0x0325F52C MOVZ W1, 0x50
	0x0325F530 BL 0x1C16D6C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x117E000
	006 Move X21, 0xEC5000
	007 Move W8, [X20+1316]
	008 Move X21, [X21+192]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEC5000
	015 Move X0, [X0+192]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1316], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 NotImplemented "Instruction EXTR not yet implemented."
	025 Xor W8, W8, W19
	026 Xor W0, W8, W19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.UInt32 Sigma_1(System.UInt32 x)

Disassembly:
	0x0325F46C MOV X19, X0
	0x0325F470 BL 0x325F484
	0x0325F474 MOV X0, X19
	0x0325F478 LDP X20, X19, [X31 + 0x10]
	0x0325F47C LDR X30, [X31], #0x20
	0x0325F480 RET
	0x0325F484 STR X30, [X31 - 0x30]!
	0x0325F488 STP X22, X21, [X31 + 0x10]
	0x0325F48C STP X20, X19, [X31 + 0x20]
	0x0325F490 ADRP X20, 0x117D000
	0x0325F494 ADRP X21, 0xEC1000
	0x0325F498 LDRB W8, [X20 + 0x534]
	0x0325F49C LDR X21, [X21 + 0xBD8]
	0x0325F4A0 MOV X19, X0
	0x0325F4A4 TBNZ X8, 0x0, 0x325F4D4
	0x0325F4A8 ADRP X0, 0xE94000
	0x0325F4AC LDR X0, [X0 + 0x618]
	0x0325F4B0 BL 0x1C16CF4
	0x0325F4B4 ADRP X0, 0xEC1000
	0x0325F4B8 LDR X0, [X0 + 0xBD8]
	0x0325F4BC BL 0x1C16CF4
	0x0325F4C0 ADRP X0, 0xE9C000
	0x0325F4C4 LDR X0, [X0 + 0x568]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x117E000
	006 Move X21, 0xEC5000
	007 Move W8, [X20+1317]
	008 Move X21, [X21+192]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEC5000
	015 Move X0, [X0+192]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1317], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 NotImplemented "Instruction EXTR not yet implemented."
	025 Xor W8, W8, W19
	026 Xor W0, W8, W19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.Void SHA256Expand(System.UInt32* x)

Disassembly:
	0x0325F3C4 BL 0x1C16CF4
	0x0325F3C8 ADRP X0, 0xE9C000
	0x0325F3CC LDR X0, [X0 + 0x568]
	0x0325F3D0 BL 0x1C16CF4
	0x0325F3D4 MOVZ W8, 0x1
	0x0325F3D8 STRB W8, [X21 + 0x532]
	0x0325F3DC LDR X0, [X22]
	0x0325F3E0 MOVZ W1, 0x50
	0x0325F3E4 BL 0x1C16D6C
	0x0325F3E8 LDR X1, [X19]
	0x0325F3EC MOV X2, X31
	0x0325F3F0 MOV X19, X0
	0x0325F3F4 BL 0x32C5BD8
	0x0325F3F8 LDR X8, [X20]
	0x0325F3FC LDP X22, X21, [X31 + 0x10]
	0x0325F400 LDR X8, [X8 + 0xB8]
	0x0325F404 STR X19, [X8]
	0x0325F408 LDP X20, X19, [X31 + 0x20]
	0x0325F40C LDR X30, [X31], #0x30
	0x0325F410 RET
	0x0325F414 STP X30, X19, [X31 - 0x10]!
	0x0325F418 MOV X1, X31
	0x0325F41C MOV X19, X0
	0x0325F420 BL 0x3251230
	0x0325F424 MOVZ W8, 0x200
	0x0325F428 STR W8, [X19 + 0x14]
	0x0325F42C LDP X30, X19, [X31], #0x10
	0x0325F430 RET
	0x0325F434 STR X30, [X31 - 0x20]!
	0x0325F438 STP X20, X19, [X31 + 0x10]
	0x0325F43C ADRP X19, 0x117D000
	0x0325F440 ADRP X20, 0xEC4000
	0x0325F444 LDRB W8, [X19 + 0x533]
	0x0325F448 LDR X20, [X20 + 0xE0]
	0x0325F44C TBNZ X8, 0x0, 0x325F464
	0x0325F450 ADRP X0, 0xEC4000
	0x0325F454 LDR X0, [X0 + 0xE0]
	0x0325F458 BL 0x1C16CF4
	0x0325F45C MOVZ W8, 0x1
	0x0325F460 STRB W8, [X19 + 0x533]
	0x0325F464 LDR X0, [X20]
	0x0325F468 BL 0x1C16F10

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x117E000
	009 Move W8, [X20+1318]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xEC5000
	016 Move X0, [X0+192]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1318], W8
	020 Move X22, 0xEC5000
	021 Move X22, [X22+192]
	022 Move X21, X31
	023 Move X0, [X22]
	024 Add X23, X19, X21
	025 Move W20, [X23+56]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move W0, W20
	031 Call SHA256Managed.sigma_1, X0
	032 Move W8, [X23+4]
	033 Move W24, [X23+36]
	034 Move W20, W0
	035 Move W0, W8
	036 Call SHA256Managed.sigma_0, X0
	037 Move W8, [X23]
	038 Add W9, W24, W20
	039 Add X21, X21, 4
	040 Add W9, W9, W0
	041 Add W8, W9, W8
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move [X23+64], W8
	044 Move X20, [X31+48]
	045 Move X19, [X31+56]
	046 Move X22, [X31+32]
	047 Move X21, [X31+40]
	048 Move X24, [X31+16]
	049 Move X23, [X31+24]
	050 Move X30, [X31+64]
	051 Return 

Method: System.Void .cctor()

Disassembly:
	0x0325F608 CMP W9, 0x6
	0x0325F60C STR X10, [X8 + 0x48]
	0x0325F610 B.LS 0x325F64C
	0x0325F614 MOVZ X10, 0xBD6B
	0x0325F618 MOVK X10, 0xFB410000
	0x0325F61C MOVK X10, 0xD9AB
	0x0325F620 MOVK X10, 0x1F830000
	0x0325F624 CMP W9, 0x7
	0x0325F628 STR X10, [X8 + 0x50]
	0x0325F62C B.EQ 0x325F64C
	0x0325F630 MOVZ X9, 0x2179
	0x0325F634 MOVK X9, 0x137E0000
	0x0325F638 MOVK X9, 0xCD19
	0x0325F63C MOVK X9, 0x5BE00000
	0x0325F640 STR X9, [X8 + 0x58]
	0x0325F644 LDR X30, [X31], #0x10
	0x0325F648 RET
	0x0325F64C BL 0x1C16F28
	0x0325F650 BL 0x1C16F20
	0x0325F654 STP X30, X19, [X31 - 0x10]!
	0x0325F658 MOV X19, X0
	0x0325F65C BL 0x325F554
	0x0325F660 LDR X0, [X19 + 0x28]
	0x0325F664 CBZ X0, 0x325F694
	0x0325F668 LDR W2, [X0 + 0x18]
	0x0325F66C MOV W1, W31
	0x0325F670 MOV X3, X31
	0x0325F674 BL 0x339FA34
	0x0325F678 LDR X0, [X19 + 0x40]
	0x0325F67C CBZ X0, 0x325F694
	0x0325F680 LDR W2, [X0 + 0x18]
	0x0325F684 MOV W1, W31
	0x0325F688 MOV X3, X31
	0x0325F68C LDP X30, X19, [X31], #0x10
	0x0325F690 B 0x339FA34
	0x0325F694 BL 0x1C16F20
	0x0325F698 B 0x325F69C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x117E000
	007 Move X22, 0xEBE000
	008 Move X19, 0xEC5000
	009 Move X20, 0xEC5000
	010 Move W8, [X21+1319]
	011 Move X22, [X22+3336]
	012 Move X19, [X19+808]
	013 Move X20, [X20+192]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0xEC5000
	019 Move X0, [X0+192]
	020 Call 0x1C17CF4
	021 Move X0, 0xEC5000
	022 Move X0, [X0+808]
	023 Call 0x1C17CF4
	024 Move X0, 0xEBE000
	025 Move X0, [X0+3336]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+1319], W8
	029 Move X0, [X22]
	030 Move W1, 64
	031 Call 0x1C17D6C
	032 Move X1, [X19]
	033 Move X2, X31
	034 Move X19, X0
	035 Call RuntimeHelpers.InitializeArray, X0, X1
	036 Move X8, [X20]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X8, [X8+184]
	040 Move [X8], X19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X30, [X31+48]
	044 Return 

