Type: System.Security.Cryptography.CryptoStream

Method: System.Void .ctor(System.IO.Stream stream, System.Security.Cryptography.ICryptoTransform transform, System.Security.Cryptography.CryptoStreamMode mode)

Disassembly:
	0x0324DD5C BL 0x1C16F20
	0x0324DD60 ADRP X0, 0xEAE000

ISIL:
	001 Move W4, W31

Method: System.Void .ctor(System.IO.Stream stream, System.Security.Cryptography.ICryptoTransform transform, System.Security.Cryptography.CryptoStreamMode mode, System.Boolean leaveOpen)

Disassembly:
	0x0324DD64 LDR X0, [X0 + 0x578]
	0x0324DD68 BL 0x1C16D08
	0x0324DD6C BL 0x1C16F10
	0x0324DD70 MOV X19, X0
	0x0324DD74 ADRP X0, 0xECE000
	0x0324DD78 LDR X0, [X0 + 0x760]
	0x0324DD7C BL 0x1C16D08
	0x0324DD80 MOV X1, X0
	0x0324DD84 MOV X0, X19
	0x0324DD88 MOV X2, X31
	0x0324DD8C BL 0x3314A68
	0x0324DD90 ADRP X0, 0xED5000
	0x0324DD94 LDR X0, [X0 + 0xDE8]
	0x0324DD98 BL 0x1C16D08
	0x0324DD9C MOV X1, X0
	0x0324DDA0 MOV X0, X19
	0x0324DDA4 BL 0x1C16DEC
	0x0324DDA8 SUB X31, X31, 0xC0
	0x0324DDAC STP X30, X25, [X31 + 0x80]
	0x0324DDB0 STP X24, X23, [X31 + 0x90]
	0x0324DDB4 STP X22, X21, [X31 + 0xA0]
	0x0324DDB8 STP X20, X19, [X31 + 0xB0]
	0x0324DDBC ADRP X25, 0x118F000
	0x0324DDC0 ADRP X24, 0xEA9000
	0x0324DDC4 LDRB W8, [X25 + 0x4A9]
	0x0324DDC8 LDR X24, [X24 + 0x280]
	0x0324DDCC MOV X19, X4
	0x0324DDD0 MOV W20, W3
	0x0324DDD4 MOV W21, W2
	0x0324DDD8 MOV X22, X1
	0x0324DDDC MOV X23, X0
	0x0324DDE0 TBNZ X8, 0x0, 0x324DE04
	0x0324DDE4 ADRP X0, 0xED5000
	0x0324DDE8 LDR X0, [X0 + 0xDF0]
	0x0324DDEC BL 0x1C16CF4
	0x0324DDF0 ADRP X0, 0xEA9000
	0x0324DDF4 LDR X0, [X0 + 0x280]
	0x0324DDF8 BL 0x1C16CF4
	0x0324DDFC MOVZ W8, 0x1
	0x0324DE00 STRB W8, [X25 + 0x4A9]
	0x0324DE04 LDR X0, [X24]
	0x0324DE08 MOVI V0.2D, 0x0
	0x0324DE0C STR X31, [X31 + 0x70]
	0x0324DE10 STP V0, V0, [X31 + 0x40]
	0x0324DE14 STR V0, [X31 + 0x6]
	0x0324DE18 STP V0, V0, [X31 + 0x20]
	0x0324DE1C STP X23, X22, [X31 + 0x40]
	0x0324DE20 STP W21, W20, [X31 + 0x50]
	0x0324DE24 STR X19, [X31 + 0x58]
	0x0324DE28 ADRP X19, 0xED5000
	0x0324DE2C LDR W8, [X0 + 0xE0]
	0x0324DE30 LDR X19, [X19 + 0xDF0]
	0x0324DE34 CBNZ W8, 0x324DE3C
	0x0324DE38 BL 0x1C16DFC
	0x0324DE3C ADD X8, X31, 0x8
	0x0324DE40 MOV X0, X31
	0x0324DE44 BL 0x32C4770
	0x0324DE48 LDUR V0, [X31 + 0x8]
	0x0324DE4C LDR X9, [X31 + 0x18]
	0x0324DE50 LDR X2, [X19]
	0x0324DE54 ADD X8, X31, 0x20
	0x0324DE58 ORR X19, X8, 0xF
	0x0324DE5C MOVN W10, 0x0
	0x0324DE60 ADD X1, X31, 0x20
	0x0324DE64 MOV X0, X19
	0x0324DE68 STUR V0, [X31 + 0x28]
	0x0324DE6C STR X9, [X31 + 0x38]
	0x0324DE70 STR W10, [X31 + 0x20]
	0x0324DE74 BL 0x21944B8
	0x0324DE78 MOV X0, X19
	0x0324DE7C MOV X1, X31
	0x0324DE80 BL 0x32C47F8
	0x0324DE84 LDP X20, X19, [X31 + 0xB0]
	0x0324DE88 LDP X22, X21, [X31 + 0xA0]
	0x0324DE8C LDP X24, X23, [X31 + 0x90]
	0x0324DE90 LDP X30, X25, [X31 + 0x80]
	0x0324DE94 ADD X31, X31, 0xC0
	0x0324DE98 RET
	0x0324DE9C STR X30, [X31 - 0x50]!
	0x0324DEA0 STP X26, X25, [X31 + 0x10]
	0x0324DEA4 STP X24, X23, [X31 + 0x20]
	0x0324DEA8 STP X22, X21, [X31 + 0x30]
	0x0324DEAC STP X20, X19, [X31 + 0x40]
	0x0324DEB0 ADRP X25, 0x118F000
	0x0324DEB4 ADRP X26, 0xEAE000
	0x0324DEB8 LDRB W8, [X25 + 0x4A8]
	0x0324DEBC LDR X26, [X26 + 0x7D8]
	0x0324DEC0 MOV X19, X5
	0x0324DEC4 MOV X20, X4
	0x0324DEC8 MOV W21, W3
	0x0324DECC MOV W22, W2
	0x0324DED0 MOV X23, X1
	0x0324DED4 MOV X24, X0
	0x0324DED8 TBNZ X8, 0x0, 0x324DEF0
	0x0324DEDC ADRP X0, 0xEAE000
	0x0324DEE0 LDR X0, [X0 + 0x7D8]
	0x0324DEE4 BL 0x1C16CF4
	0x0324DEE8 MOVZ W8, 0x1
	0x0324DEEC STRB W8, [X25 + 0x4A8]
	0x0324DEF0 LDR X0, [X26]
	0x0324DEF4 LDR W8, [X0 + 0xE0]
	0x0324DEF8 CBNZ W8, 0x324DF00
	0x0324DEFC BL 0x1C16DFC
	0x0324DF00 MOV X0, X31
	0x0324DF04 BL 0x33DD2A8
	0x0324DF08 LDR X8, [X24]
	0x0324DF0C MOV X4, X0
	0x0324DF10 MOV X0, X24
	0x0324DF14 MOV X1, X23
	0x0324DF18 LDR X9, [X8 + 0x318]
	0x0324DF1C LDR X5, [X8 + 0x320]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0x1190000
	010 Move X23, 0xED6000
	011 Move W8, [X25+1184]
	012 Move X23, [X23+3344]
	013 Move W21, W3
	014 Move X22, X2
	015 Move X20, X1
	016 Move X19, X0
	017 And W24, W4, 1
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xED6000
	023 Move X0, [X0+3344]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X25+1184], W8
	027 Move X0, [X23]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X19
	033 Move X1, X31
	034 Call Stream..ctor, X0
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move [X19+56], W21
	037 Move [X19+40], X20
	038 Move [X19+48], X22
	039 Move [X19+112], W24
	040 Compare W21, 0
	041 JumpIfNotEqual {88}
	042 Compare X20, 0
	043 JumpIfEqual {87}
	044 Move X0, [X23]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X8, [X20]
	050 Move X0, X20
	051 Move X9, [X8+424]
	052 Move X1, [X8+432]
	053 NotImplemented "Instruction BLR not yet implemented."
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {106}
	058 Move W8, 1
	059 Move [X19+96], W8
	060 Compare X20, 0
	061 JumpIfEqual {87}
	062 Move X0, [X23]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1C17DFC
	067 Move X8, [X20]
	068 Move X0, X20
	069 Move X9, [X8+472]
	070 Move X1, [X8+480]
	071 NotImplemented "Instruction BLR not yet implemented."
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfNotEqual {108}
	076 Move W8, 1
	077 Move [X19+97], W8
	078 Move X0, X19
	079 Move X20, [X31+48]
	080 Move X19, [X31+56]
	081 Move X22, [X31+32]
	082 Move X21, [X31+40]
	083 Move X24, [X31+16]
	084 Move X23, [X31+24]
	085 Move X30, [X31+64]
	086 Move X25, [X31+72]
	087 Call 0x1C17F20
	088 Move X0, 0xEAF000
	089 Move X0, [X0+1400]
	090 Call 0x1C17D08
	091 Call 0x1C17F10
	092 Move X19, X0
	093 Move X0, 0xED6000
	094 Move X0, [X0+3352]
	095 Call 0x1C17D08
	096 Move X1, X0
	097 Move X0, X19
	098 Move X2, X31
	099 Call ArgumentException..ctor, X0, X1
	100 Move X0, 0xED6000
	101 Move X0, [X0+3360]
	102 Call 0x1C17D08
	103 Move X1, X0
	104 Move X0, X19
	105 Call 0x1C17DEC
	106 Move X0, 0xED6000
	107 Move X0, [X0+3368]
	108 Move X0, 0xED6000
	109 Move X0, [X0+3376]
	110 Call 0x1C17D08
	111 Move X19, X0
	112 Move X0, 0xED6000
	113 Move X0, [X0+3384]
	114 Call 0x1C17D08
	115 Move X1, X0
	116 Move X0, X19
	117 Move X2, X31
	118 Call SR.Format, X0, X1
	119 Move X19, X0
	120 Move X0, 0xEAF000
	121 Move X0, [X0+1400]
	122 Call 0x1C17D08
	123 Call 0x1C17F10
	124 Move X1, X19
	125 Move X2, X31
	126 Move X20, X0
	127 Call ArgumentException..ctor, X0, X1
	128 Move X0, 0xED6000
	129 Move X0, [X0+3360]
	130 Call 0x1C17D08
	131 Move X1, X0
	132 Move X0, X20
	133 Call 0x1C17DEC

Method: System.Boolean get_CanRead()

Disassembly:
	0x0324E06C BL 0x1C16DFC
	0x0324E070 ADD X8, X31, 0x8

ISIL:
	001 Move W0, [X0+96]
	002 Return X0

Method: System.Boolean get_CanSeek()

Disassembly:
	0x0324E074 MOV X0, X31
	0x0324E078 BL 0x32C4770

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Boolean get_CanWrite()

Disassembly:
	0x0324E07C LDUR V0, [X31 + 0x8]
	0x0324E080 LDR X9, [X31 + 0x18]

ISIL:
	001 Move W0, [X0+97]
	002 Return X0

Method: System.Int64 get_Length()

Disassembly:
	0x0324E084 LDR X2, [X19]
	0x0324E088 ADD X8, X31, 0x20
	0x0324E08C ORR X19, X8, 0xF
	0x0324E090 MOVN W10, 0x0
	0x0324E094 ADD X1, X31, 0x20
	0x0324E098 MOV X0, X19
	0x0324E09C STUR V0, [X31 + 0x28]
	0x0324E0A0 STR X9, [X31 + 0x38]
	0x0324E0A4 STR W10, [X31 + 0x20]
	0x0324E0A8 BL 0x21943B8
	0x0324E0AC MOV X0, X19
	0x0324E0B0 MOV X1, X31
	0x0324E0B4 BL 0x32C47F8
	0x0324E0B8 LDP X20, X19, [X31 + 0xE0]
	0x0324E0BC LDP X22, X21, [X31 + 0xD0]
	0x0324E0C0 LDP X24, X23, [X31 + 0xC0]
	0x0324E0C4 LDP X26, X25, [X31 + 0xB0]
	0x0324E0C8 LDR X30, [X31 + 0xA0]
	0x0324E0CC ADD X31, X31, 0xF0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xEA6000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xED5000
	009 Move X0, [X0+3392]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call NotSupportedException..ctor, X0, X1
	015 Move X0, 0xED5000
	016 Move X0, [X0+3400]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Int64 get_Position()

Disassembly:
	0x0324E0D0 RET
	0x0324E0D4 LDR X8, [X0]
	0x0324E0D8 LDR X2, [X8 + 0x278]
	0x0324E0DC LDR X1, [X8 + 0x280]
	0x0324E0E0 BR X2
	0x0324E0E4 SUB X31, X31, 0x40
	0x0324E0E8 STP X30, X19, [X31 + 0x30]
	0x0324E0EC AND W9, W1, 0x1
	0x0324E0F0 ADD X10, X31, 0x24
	0x0324E0F4 ADD X11, X31, 0x28
	0x0324E0F8 STR X0, [X31 + 0x28]
	0x0324E0FC STRB W9, [X31 + 0x24]
	0x0324E100 STP X31, X10, [X31 + 0x8]
	0x0324E104 STR X11, [X31 + 0x18]
	0x0324E108 TBZ X1, 0x0, 0x324E13C
	0x0324E10C LDRB W9, [X0 + 0x62]
	0x0324E110 MOV X8, X0
	0x0324E114 CBNZ W9, 0x324E124
	0x0324E118 MOV X0, X8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xEA6000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xED5000
	009 Move X0, [X0+3392]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call NotSupportedException..ctor, X0, X1
	015 Move X0, 0xED5000
	016 Move X0, [X0+3408]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Void set_Position(System.Int64 value)

Disassembly:
	0x0324E11C BL 0x324D170
	0x0324E120 LDR X8, [X31 + 0x28]
	0x0324E124 LDRB W9, [X8 + 0x70]
	0x0324E128 CBNZ W9, 0x324E13C
	0x0324E12C LDR X0, [X8 + 0x28]
	0x0324E130 CBZ X0, 0x324E150
	0x0324E134 MOV X1, X31
	0x0324E138 BL 0x32F02B8
	0x0324E13C ADD X0, X31, 0x8
	0x0324E140 BL 0x1BB46F0
	0x0324E144 LDP X30, X19, [X31 + 0x30]
	0x0324E148 ADD X31, X31, 0x40
	0x0324E14C RET
	0x0324E150 BL 0x1C16F20
	0x0324E154 B 0x324E158
	0x0324E158 MOV X19, X0
	0x0324E15C CMP W1, 0x1
	0x0324E160 B.NE 0x324E180
	0x0324E164 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xEA6000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xED5000
	009 Move X0, [X0+3392]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call NotSupportedException..ctor, X0, X1
	015 Move X0, 0xED5000
	016 Move X0, [X0+3416]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Boolean get_HasFlushedFinalBlock()

Disassembly:
	0x0324E168 BL 0x3EB1AD0
	0x0324E16C LDR X8, [X0]

ISIL:
	001 Move W0, [X0+98]
	002 Return X0

Method: System.Void FlushFinalBlock()

Disassembly:
	0x0324E170 STR X8, [X31 + 0x8]
	0x0324E174 BL 0x3EB1AE0
	0x0324E178 B 0x324E13C
	0x0324E17C MOV X19, X0
	0x0324E180 ADD X0, X31, 0x8
	0x0324E184 BL 0x1BB46F0
	0x0324E188 MOV X0, X19
	0x0324E18C BL 0x1D2C690
	0x0324E190 BL 0x1990590
	0x0324E194 STP X30, X23, [X31 - 0x30]!
	0x0324E198 STP X22, X21, [X31 + 0x10]
	0x0324E19C STP X20, X19, [X31 + 0x20]
	0x0324E1A0 ADRP X20, 0x118E000
	0x0324E1A4 ADRP X22, 0xED4000
	0x0324E1A8 LDRB W8, [X20 + 0x4AC]
	0x0324E1AC LDR X22, [X22 + 0xE00]
	0x0324E1B0 MOV X19, X0
	0x0324E1B4 TBNZ X8, 0x0, 0x324E1F0
	0x0324E1B8 ADRP X0, 0xED4000
	0x0324E1BC LDR X0, [X0 + 0xE08]
	0x0324E1C0 BL 0x1C16CF4
	0x0324E1C4 ADRP X0, 0xED4000
	0x0324E1C8 LDR X0, [X0 + 0xE10]
	0x0324E1CC BL 0x1C16CF4
	0x0324E1D0 ADRP X0, 0xED4000
	0x0324E1D4 LDR X0, [X0 + 0xE18]
	0x0324E1D8 BL 0x1C16CF4
	0x0324E1DC ADRP X0, 0xED4000
	0x0324E1E0 LDR X0, [X0 + 0xE00]
	0x0324E1E4 BL 0x1C16CF4
	0x0324E1E8 MOVZ W8, 0x1
	0x0324E1EC STRB W8, [X20 + 0x4AC]
	0x0324E1F0 LDR X0, [X22]
	0x0324E1F4 LDR W8, [X0 + 0xE0]
	0x0324E1F8 CBNZ W8, 0x324E204
	0x0324E1FC BL 0x1C16DFC
	0x0324E200 LDR X0, [X22]
	0x0324E204 LDR X8, [X0 + 0xB8]
	0x0324E208 ADRP X23, 0xED4000
	0x0324E20C LDR X20, [X8 + 0x8]
	0x0324E210 LDR X23, [X23 + 0xE10]
	0x0324E214 CBNZ X20, 0x324E268
	0x0324E218 LDR W8, [X0 + 0xE0]
	0x0324E21C CBNZ W8, 0x324E228
	0x0324E220 BL 0x1C16DFC
	0x0324E224 LDR X0, [X22]
	0x0324E228 ADRP X9, 0xED4000
	0x0324E22C LDR X8, [X0 + 0xB8]
	0x0324E230 LDR X9, [X9 + 0xE08]
	0x0324E234 LDR X21, [X8]
	0x0324E238 LDR X0, [X9]
	0x0324E23C BL 0x1C16F10
	0x0324E240 ADRP X8, 0xED4000
	0x0324E244 LDR X8, [X8 + 0xE18]
	0x0324E248 MOV X1, X21
	0x0324E24C MOV X3, X31
	0x0324E250 MOV X20, X0
	0x0324E254 LDR X2, [X8]
	0x0324E258 BL 0x2D27AA8
	0x0324E25C LDR X8, [X22]
	0x0324E260 LDR X8, [X8 + 0xB8]
	0x0324E264 STR X20, [X8 + 0x8]
	0x0324E268 LDR X2, [X23]
	0x0324E26C ADD X0, X19, 0x68
	0x0324E270 MOV X1, X20
	0x0324E274 LDP X20, X19, [X31 + 0x20]
	0x0324E278 LDP X22, X21, [X31 + 0x10]
	0x0324E27C LDP X30, X23, [X31], #0x30
	0x0324E280 B 0x2212A40
	0x0324E284 SUB X31, X31, 0x60
	0x0324E288 STP X30, X23, [X31 + 0x30]
	0x0324E28C STP X22, X21, [X31 + 0x40]
	0x0324E290 STP X20, X19, [X31 + 0x50]
	0x0324E294 ADRP X20, 0x118E000
	0x0324E298 LDRB W8, [X20 + 0x4AD]
	0x0324E29C MOV X19, X0
	0x0324E2A0 TBNZ X8, 0x0, 0x324E300
	0x0324E2A4 ADRP X0, 0xED4000
	0x0324E2A8 LDR X0, [X0 + 0xE20]
	0x0324E2AC BL 0x1C16CF4
	0x0324E2B0 ADRP X0, 0xED4000
	0x0324E2B4 LDR X0, [X0 + 0xE28]
	0x0324E2B8 BL 0x1C16CF4
	0x0324E2BC ADRP X0, 0xED4000
	0x0324E2C0 LDR X0, [X0 + 0xE30]
	0x0324E2C4 BL 0x1C16CF4
	0x0324E2C8 ADRP X0, 0xED4000
	0x0324E2CC LDR X0, [X0 + 0xDA0]
	0x0324E2D0 BL 0x1C16CF4
	0x0324E2D4 ADRP X0, 0xED4000
	0x0324E2D8 LDR X0, [X0 + 0xDC8]
	0x0324E2DC BL 0x1C16CF4
	0x0324E2E0 ADRP X0, 0xED4000
	0x0324E2E4 LDR X0, [X0 + 0xE38]
	0x0324E2E8 BL 0x1C16CF4
	0x0324E2EC ADRP X0, 0xED4000
	0x0324E2F0 LDR X0, [X0 + 0xDD0]
	0x0324E2F4 BL 0x1C16CF4
	0x0324E2F8 MOVZ W8, 0x1
	0x0324E2FC STRB W8, [X20 + 0x4AD]
	0x0324E300 STP X31, X31, [X31 + 0x20]
	0x0324E304 STR X31, [X31 + 0x18]
	0x0324E308 LDR W22, [X19]
	0x0324E30C LDR X20, [X19 + 0x20]
	0x0324E310 CBZ W22, 0x324E334
	0x0324E314 CMP W22, 0x1
	0x0324E318 B.NE 0x324E34C
	0x0324E31C LDR X8, [X19 + 0x50]
	0x0324E320 MOVN W22, 0x0
	0x0324E324 STR X8, [X31 + 0x18]
	0x0324E328 STR X31, [X19 + 0x50]
	0x0324E32C STR W22, [X19]
	0x0324E330 B 0x324E3EC
	0x0324E334 LDR X8, [X19 + 0x48]
	0x0324E338 MOVN W22, 0x0
	0x0324E33C STR X8, [X31 + 0x28]
	0x0324E340 STR X31, [X19 + 0x48]
	0x0324E344 STR W22, [X19]
	0x0324E348 B 0x324E394
	0x0324E34C CBZ X20, 0x324E568
	0x0324E350 MOV X0, X20
	0x0324E354 BL 0x324E194
	0x0324E358 STR X0, [X19 + 0x40]
	0x0324E35C CBZ X0, 0x324E56C
	0x0324E360 MOV X1, X31
	0x0324E364 BL 0x33E20D8
	0x0324E368 MOV X1, X31
	0x0324E36C BL 0x33EE4D8
	0x0324E370 STR X0, [X31 + 0x20]
	0x0324E374 ADD X0, X31, 0x20
	0x0324E378 MOV X1, X31
	0x0324E37C BL 0x33EE4E4
	0x0324E380 STR X0, [X31 + 0x28]
	0x0324E384 ADD X0, X31, 0x28
	0x0324E388 MOV X1, X31
	0x0324E38C BL 0x33EE4EC
	0x0324E390 TBZ X0, 0x0, 0x324E504
	0x0324E394 ADD X0, X31, 0x28
	0x0324E398 MOV X1, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x118F000
	007 Move W8, [X20+1185]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xEB3000
	014 Move X0, [X0+3584]
	015 Call 0x1C17CF4
	016 Move X0, 0xED3000
	017 Move X0, [X0+3744]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+1185], W8
	021 Move W8, [X19+98]
	022 Compare W8, 0
	023 JumpIfNotEqual {138}
	024 Move X20, [X19+48]
	025 Compare X20, 0
	026 JumpIfEqual {137}
	027 Move X10, 0xED3000
	028 Move X8, [X20]
	029 Move X10, [X10+3744]
	030 Move X22, [X19+64]
	031 Move W21, [X19+72]
	032 NotImplemented "Instruction LDRH not yet implemented."
	033 Move X1, [X10]
	034 Compare X9, 0
	035 JumpIfEqual {42}
	036 Move X10, [X8+176]
	037 Add X10, X10, 8
	038 NotImplemented "Instruction LDUR not yet implemented."
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Subtract X9, X9, 1
	041 Add X10, X10, 16
	042 Move W2, 4
	043 Move X0, X20
	044 Call 0x1C5D788
	045 Move W9, [X10]
	046 Add W9, W9, 4
	047 Add X8, X8, W9
	048 Add X0, X8, 312
	049 Move X8, [X0]
	050 Move X4, [X0+8]
	051 Move X0, X20
	052 Move X1, X22
	053 Move W2, W31
	054 Move W3, W21
	055 NotImplemented "Instruction BLR not yet implemented."
	056 Move W8, [X19+97]
	057 Move W9, 1
	058 Move [X19+98], W9
	059 Compare W8, 0
	060 JumpIfEqual {89}
	061 Move W3, [X19+88]
	062 Move X20, X0
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X0, [X19+40]
	065 Compare X0, 0
	066 JumpIfEqual {137}
	067 Move X8, [X0]
	068 Move X1, [X19+80]
	069 Move W2, W31
	070 Move X9, [X8+904]
	071 Move X4, [X8+912]
	072 NotImplemented "Instruction BLR not yet implemented."
	073 Move W8, [X19+97]
	074 Move [X19+88], W31
	075 Compare W8, 0
	076 JumpIfEqual {89}
	077 Compare X20, 0
	078 JumpIfEqual {137}
	079 Move X0, [X19+40]
	080 Compare X0, 0
	081 JumpIfEqual {137}
	082 Move X8, [X0]
	083 Move W3, [X20+24]
	084 Move X1, X20
	085 Move W2, W31
	086 Move X9, [X8+904]
	087 Move X4, [X8+912]
	088 NotImplemented "Instruction BLR not yet implemented."
	089 Move X0, [X19+40]
	090 Compare X0, 0
	091 JumpIfEqual {137}
	092 Move X8, 0xEB3000
	093 Move X8, [X8+3584]
	094 Move X9, [X0]
	095 Move X8, [X8]
	096 Move W11, [X9+304]
	097 Move W10, [X8+304]
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move X9, [X9+200]
	100 Add X9, X9, X10
	101 NotImplemented "Instruction LDUR not yet implemented."
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move X8, [X0]
	104 Move X9, [X8+664]
	105 Move X1, [X8+672]
	106 NotImplemented "Instruction BLR not yet implemented."
	107 Move X0, [X19+64]
	108 Compare X0, 0
	109 JumpIfEqual {114}
	110 Move W2, [X0+24]
	111 Move W1, W31
	112 Move X3, X31
	113 Call Array.Clear, X0, X1, X2
	114 Move X0, [X19+80]
	115 Compare X0, 0
	116 JumpIfEqual {127}
	117 Move W2, [X0+24]
	118 Move X20, [X31+32]
	119 Move X19, [X31+40]
	120 Move X22, [X31+16]
	121 Move X21, [X31+24]
	122 Move W1, W31
	123 Move X3, X31
	124 Move X30, [X31+48]
	125 Call Array.Clear, X0, X1, X2
	126 Return 
	127 Move X20, [X31+32]
	128 Move X19, [X31+40]
	129 Move X22, [X31+16]
	130 Move X21, [X31+24]
	131 Move X30, [X31+48]
	132 Return 
	133 Move W8, [X0+98]
	134 Compare W8, 0
	135 JumpIfNotEqual {107}
	136 Call CryptoStream.FlushFinalBlock, X0
	137 Call 0x1C17F20
	138 Move X0, 0xEA6000
	139 Move X0, [X0+2880]
	140 Call 0x1C17D08
	141 Call 0x1C17F10
	142 Move X19, X0
	143 Move X0, 0xED5000
	144 Move X0, [X0+3424]
	145 Call 0x1C17D08
	146 Move X1, X0
	147 Move X0, X19
	148 Move X2, X31
	149 Call NotSupportedException..ctor, X0, X1
	150 Move X0, 0xED5000
	151 Move X0, [X0+3432]
	152 Call 0x1C17D08
	153 Move X1, X0
	154 Move X0, X19
	155 Call 0x1C17DEC

Method: System.Void Flush()

Disassembly:
	0x0324E39C BL 0x33EE4F4

ISIL:
	001 Return 

Method: System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x0324E3A0 CBZ X20, 0x324E560
	0x0324E3A4 LDR X1, [X19 + 0x28]
	0x0324E3A8 LDR X4, [X19 + 0x38]
	0x0324E3AC LDP W2, W3, [X19 + 0x30]
	0x0324E3B0 MOVZ W5, 0x1
	0x0324E3B4 MOV X0, X20
	0x0324E3B8 BL 0x324DAF4
	0x0324E3BC CBZ X0, 0x324E564
	0x0324E3C0 ADRP X8, 0xED4000
	0x0324E3C4 LDR X8, [X8 + 0xDD0]
	0x0324E3C8 LDR X1, [X8]
	0x0324E3CC BL 0x269D3A4
	0x0324E3D0 ADRP X8, 0xED4000
	0x0324E3D4 LDR X8, [X8 + 0xE38]
	0x0324E3D8 STR X0, [X31 + 0x18]
	0x0324E3DC LDR X1, [X8]
	0x0324E3E0 ADD X0, X31, 0x18
	0x0324E3E4 BL 0x2677274
	0x0324E3E8 TBZ X0, 0x0, 0x324E4BC
	0x0324E3EC ADRP X8, 0xED4000
	0x0324E3F0 LDR X8, [X8 + 0xDC8]
	0x0324E3F4 LDR X1, [X8]
	0x0324E3F8 ADD X0, X31, 0x18
	0x0324E3FC BL 0x26772B8
	0x0324E400 MOV W20, W0
	0x0324E404 MOV X21, X31
	0x0324E408 MOV W23, W31
	0x0324E40C TBZ X22, 0x1F, 0x324E420
	0x0324E410 LDR X0, [X19 + 0x40]
	0x0324E414 CBZ X0, 0x324E570
	0x0324E418 MOV X1, X31
	0x0324E41C BL 0x33E2354
	0x0324E420 CBNZ X21, 0x324E558
	0x0324E424 TBZ X23, 0x0, 0x324E47C
	0x0324E428 MOVN X8, 0x0
	0x0324E42C ADD X9, X31, 0x8
	0x0324E430 LDR X20, [X9, X8, LSL #3]
	0x0324E434 MOVN W8, 0x1
	0x0324E438 STR W8, [X19]
	0x0324E43C STR X31, [X19 + 0x40]
	0x0324E440 ADRP X0, 0xED4000
	0x0324E444 LDR X0, [X0 + 0xDA0]
	0x0324E448 ADD X19, X19, 0x8
	0x0324E44C BL 0x1C16D08
	0x0324E450 LDR W8, [X0 + 0xE0]
	0x0324E454 CBNZ W8, 0x324E45C
	0x0324E458 BL 0x1C16DFC
	0x0324E45C ADRP X0, 0xED4000
	0x0324E460 LDR X0, [X0 + 0xE40]
	0x0324E464 BL 0x1C16D08
	0x0324E468 MOV X2, X0
	0x0324E46C MOV X0, X19
	0x0324E470 MOV X1, X20
	0x0324E474 BL 0x2630308
	0x0324E478 B 0x324E544
	0x0324E47C MOVN W8, 0x1
	0x0324E480 STR X31, [X19 + 0x40]
	0x0324E484 STR W8, [X19], #0x8
	0x0324E488 ADRP X8, 0xED4000
	0x0324E48C LDR X8, [X8 + 0xDA0]
	0x0324E490 LDR X0, [X8]
	0x0324E494 LDR W8, [X0 + 0xE0]
	0x0324E498 CBNZ W8, 0x324E4A0
	0x0324E49C BL 0x1C16DFC
	0x0324E4A0 ADRP X8, 0xED4000
	0x0324E4A4 LDR X8, [X8 + 0xE30]
	0x0324E4A8 MOV X0, X19
	0x0324E4AC MOV W1, W20
	0x0324E4B0 LDR X2, [X8]
	0x0324E4B4 BL 0x26300F0
	0x0324E4B8 B 0x324E544
	0x0324E4BC MOVZ W8, 0x1
	0x0324E4C0 STR W8, [X19]
	0x0324E4C4 LDR X8, [X31 + 0x18]
	0x0324E4C8 STR X8, [X19 + 0x50]
	0x0324E4CC ADRP X8, 0xED4000
	0x0324E4D0 LDR X8, [X8 + 0xDA0]
	0x0324E4D4 LDR X0, [X8]
	0x0324E4D8 LDR W8, [X0 + 0xE0]
	0x0324E4DC CBNZ W8, 0x324E4E4
	0x0324E4E0 BL 0x1C16DFC
	0x0324E4E4 ADRP X8, 0xED4000
	0x0324E4E8 LDR X8, [X8 + 0xE28]
	0x0324E4EC ADD X0, X19, 0x8
	0x0324E4F0 LDR X3, [X8]
	0x0324E4F4 ADD X1, X31, 0x18
	0x0324E4F8 MOV X2, X19
	0x0324E4FC BL 0x1FACF84
	0x0324E500 B 0x324E544
	0x0324E504 STR W31, [X19]
	0x0324E508 LDR X8, [X31 + 0x28]
	0x0324E50C STR X8, [X19 + 0x48]
	0x0324E510 ADRP X8, 0xED4000
	0x0324E514 LDR X8, [X8 + 0xDA0]
	0x0324E518 LDR X0, [X8]
	0x0324E51C LDR W8, [X0 + 0xE0]
	0x0324E520 CBNZ W8, 0x324E528
	0x0324E524 BL 0x1C16DFC
	0x0324E528 ADRP X8, 0xED4000
	0x0324E52C LDR X8, [X8 + 0xE20]
	0x0324E530 ADD X0, X19, 0x8

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x118F000
	009 Move [X31+8], X1
	010 Move X21, 0xED5000
	011 Move X22, 0xEA6000
	012 Move W8, [X23+1186]
	013 Move X21, [X21+3440]
	014 Move X22, [X22+1728]
	015 Move X19, X1
	016 Move X20, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, 0xEAE000
	022 Move X0, [X0+2008]
	023 Call 0x1C17CF4
	024 Move X0, 0xED5000
	025 Move X0, [X0+3440]
	026 Call 0x1C17CF4
	027 Move X0, 0xEA7000
	028 Move X0, [X0+1976]
	029 Call 0x1C17CF4
	030 Move X0, 0xEA6000
	031 Move X0, [X0+1728]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X23+1186], W8
	035 Move X0, X20
	036 Move X1, X31
	037 Call "il2cpp_vm_object_is_inst", X0
	038 Move X8, [X22]
	039 Move X22, [X21]
	040 Move X21, X0
	041 Move W9, [X8+224]
	042 Compare W9, 0
	043 JumpIfNotEqual {46}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X0, X22
	047 Move X1, X31
	048 Call Type.GetTypeFromHandle, X0
	049 Move X1, X0
	050 Move X0, X21
	051 Move X2, X31
	052 Call Type.op_Inequality, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {69}
	057 Move X0, X20
	058 Move X1, X19
	059 Move X20, [X31+48]
	060 Move X19, [X31+56]
	061 Move X22, [X31+32]
	062 Move X21, [X31+40]
	063 Move X30, [X31+16]
	064 Move X23, [X31+24]
	065 Move X2, X31
	066 Add X31, X31, 64
	067 Call Stream.FlushAsync, X0, X1
	068 Return X0
	069 Move X8, 0xEAE000
	070 Move X8, [X8+2008]
	071 Move X0, [X8]
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1C17DFC
	076 Add X0, X31, 8
	077 Move X1, X31
	078 Call CancellationToken.get_IsCancellationRequested, X0
	079 Move TEMP, X0
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfNotEqual {94}
	083 Move X8, 0xEA7000
	084 Move X8, [X8+1976]
	085 Move X19, [X31+8]
	086 Move X0, [X8]
	087 Move W8, [X0+224]
	088 Compare W8, 0
	089 JumpIfNotEqual {91}
	090 Call 0x1C17DFC
	091 Move X0, X19
	092 Move X1, X31
	093 Call Task.FromCanceled, X0
	094 Move X19, 0xEA7000
	095 Move X19, [X19+1976]
	096 Move X0, [X19]
	097 Move W8, [X0+224]
	098 Compare W8, 0
	099 JumpIfNotEqual {101}
	100 Call 0x1C17DFC
	101 Move X20, 0x118B000
	102 Move W8, [X20+3869]
	103 Compare W8, 0
	104 JumpIfNotEqual {110}
	105 Move X0, 0xEA7000
	106 Move X0, [X0+1976]
	107 Call 0x1C17CF4
	108 Move W8, 1
	109 Move [X20+3869], W8
	110 Move X0, [X19]
	111 Move W8, [X0+224]
	112 Compare W8, 0
	113 JumpIfNotEqual {116}
	114 Call 0x1C17DFC
	115 Move X0, [X19]
	116 Move X8, [X0+184]
	117 Move X0, [X8+48]
	118 Move X20, [X31+48]
	119 Move X19, [X31+56]
	120 Move X22, [X31+32]
	121 Move X21, [X31+40]
	122 Move X30, [X31+16]
	123 Move X23, [X31+24]
	124 Add X31, X31, 64
	125 Return X0

Method: System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin)

Disassembly:
	0x0324E534 LDR X3, [X8]
	0x0324E538 ADD X1, X31, 0x28
	0x0324E53C MOV X2, X19
	0x0324E540 BL 0x1FAD3AC
	0x0324E544 LDP X20, X19, [X31 + 0x50]
	0x0324E548 LDP X22, X21, [X31 + 0x40]
	0x0324E54C LDP X30, X23, [X31 + 0x30]
	0x0324E550 ADD X31, X31, 0x60
	0x0324E554 RET
	0x0324E558 MOV X0, X21
	0x0324E55C BL 0x1C16F18
	0x0324E560 BL 0x1C16F20
	0x0324E564 BL 0x1C16F20
	0x0324E568 BL 0x1C16F20
	0x0324E56C BL 0x1C16F20
	0x0324E570 BL 0x1C16F20
	0x0324E574 B 0x324E62C
	0x0324E578 B 0x324E62C
	0x0324E57C B 0x324E62C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xEA6000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xED5000
	009 Move X0, [X0+3392]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call NotSupportedException..ctor, X0, X1
	015 Move X0, 0xED5000
	016 Move X0, [X0+3448]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Void SetLength(System.Int64 value)

Disassembly:
	0x0324E580 B 0x324E62C
	0x0324E584 B 0x324E62C
	0x0324E588 B 0x324E62C
	0x0324E58C B 0x324E62C
	0x0324E590 B 0x324E62C
	0x0324E594 MOV X21, X1
	0x0324E598 MOV X20, X0
	0x0324E59C MOVZ W22, 0x1
	0x0324E5A0 B 0x324E5C0
	0x0324E5A4 B 0x324E5B8
	0x0324E5A8 B 0x324E5B8
	0x0324E5AC B 0x324E5B8
	0x0324E5B0 B 0x324E62C
	0x0324E5B4 B 0x324E5B8
	0x0324E5B8 MOV X21, X1
	0x0324E5BC MOV X20, X0
	0x0324E5C0 CMP W21, 0x1
	0x0324E5C4 B.NE 0x324E5F0
	0x0324E5C8 MOV X0, X20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xEA6000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xED5000
	009 Move X0, [X0+3392]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call NotSupportedException..ctor, X0, X1
	015 Move X0, 0xED5000
	016 Move X0, [X0+3456]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Threading.Tasks.Task`1<System.Int32> ReadAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x0324E5CC BL 0x3EB1AD0
	0x0324E5D0 LDR X8, [X0]
	0x0324E5D4 STR X8, [X31]
	0x0324E5D8 BL 0x3EB1AE0
	0x0324E5DC LDR X21, [X31]
	0x0324E5E0 MOV W20, W31
	0x0324E5E4 MOVZ W23, 0x1
	0x0324E5E8 TBZ X22, 0x1F, 0x324E420
	0x0324E5EC B 0x324E410
	0x0324E5F0 STR X31, [X31]
	0x0324E5F4 TBZ X22, 0x1F, 0x324E608
	0x0324E5F8 LDR X0, [X19 + 0x40]
	0x0324E5FC CBZ X0, 0x324E618
	0x0324E600 MOV X1, X31
	0x0324E604 BL 0x33E2354
	0x0324E608 LDR X8, [X31]
	0x0324E60C CBZ X8, 0x324E634
	0x0324E610 LDR X0, [X31]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, X4
	008 Move W20, W3
	009 Move W21, W2
	010 Move X22, X1
	011 Move X23, X0
	012 Call CryptoStream.CheckReadArguments, X0, X1, X2, X3
	013 Move X1, X22
	014 Move W2, W21
	015 Move W3, W20
	016 Move X4, X19
	017 Move X20, [X31+32]
	018 Move X19, [X31+40]
	019 Move X22, [X31+16]
	020 Move X21, [X31+24]
	021 Move X0, X23
	022 Move X30, [X31+48]
	023 Move X23, [X31+56]
	024 Call CryptoStream.ReadAsyncInternal, X0, X1, X2, X3, X4
	025 Return X0

Method: System.IAsyncResult BeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)

Disassembly:
	0x0324E868 CBZ W8, 0x324E954
	0x0324E86C LDR X0, [X24 + 0x50]
	0x0324E870 LDR X2, [X19 + 0x30]
	0x0324E874 CMP W8, W4
	0x0324E878 B.LE 0x324E8F4
	0x0324E87C MOV W1, W31
	0x0324E880 MOV X5, X31
	0x0324E884 BL 0x33A8A9C
	0x0324E888 LDR X8, [X31 + 0x38]
	0x0324E88C LDR X0, [X24 + 0x50]
	0x0324E890 LDR W1, [X8 + 0x20]
	0x0324E894 LDR W8, [X24 + 0x58]
	0x0324E898 SUB W4, W8, W1
	0x0324E89C MOV X2, X0
	0x0324E8A0 MOV W3, W31
	0x0324E8A4 MOV X5, X31
	0x0324E8A8 BL 0x33A8A9C
	0x0324E8AC LDR X8, [X31 + 0x38]
	0x0324E8B0 LDR W9, [X24 + 0x58]
	0x0324E8B4 LDR X19, [X24 + 0x50]
	0x0324E8B8 LDR W8, [X8 + 0x20]
	0x0324E8BC SUB W20, W9, W8
	0x0324E8C0 STR W20, [X24 + 0x58]
	0x0324E8C4 CBZ X19, 0x324EF8C
	0x0324E8C8 LDR W8, [X19 + 0x18]
	0x0324E8CC SUBS W21, W8, W20
	0x0324E8D0 B.CS 0x324E8DC
	0x0324E8D4 MOV X0, X31
	0x0324E8D8 BL 0x339D6EC
	0x0324E8DC ADD X8, X19, W20, SXTW
	0x0324E8E0 ADD X0, X8, 0x20
	0x0324E8E4 MOV W1, W21
	0x0324E8E8 MOV X2, X31
	0x0324E8EC BL 0x324F6C0
	0x0324E8F0 B 0x324F080
	0x0324E8F4 MOV W1, W31
	0x0324E8F8 MOV W4, W8
	0x0324E8FC MOV X5, X31
	0x0324E900 BL 0x33A8A9C
	0x0324E904 LDR X8, [X31 + 0x38]
	0x0324E908 LDRSW X19, [X24 + 0x58]
	0x0324E90C LDP W9, W10, [X8 + 0x48]
	0x0324E910 SUB W9, W9, W19
	0x0324E914 ADD W10, W10, W19
	0x0324E918 STP W9, W10, [X8 + 0x48]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0x118F000
	011 Move X26, 0xEAE000
	012 Move W8, [X25+1187]
	013 Move X26, [X26+2008]
	014 Move X19, X5
	015 Move X20, X4
	016 Move W21, W3
	017 Move W22, W2
	018 Move X23, X1
	019 Move X24, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0xEAE000
	025 Move X0, [X0+2008]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X25+1187], W8
	029 Move X0, [X26]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X31
	035 Call CancellationToken.get_None
	036 Move X8, [X24]
	037 Move X4, X0
	038 Move X0, X24
	039 Move X1, X23
	040 Move X9, [X8+728]
	041 Move X5, [X8+736]
	042 Move W2, W22
	043 Move W3, W21
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Move X1, X20
	046 Move X2, X19
	047 Move X20, [X31+64]
	048 Move X19, [X31+72]
	049 Move X22, [X31+48]
	050 Move X21, [X31+56]
	051 Move X24, [X31+32]
	052 Move X23, [X31+40]
	053 Move X26, [X31+16]
	054 Move X25, [X31+24]
	055 Move X3, X31
	056 Move X30, [X31+80]
	057 Call TaskToApm.Begin, X0, X1, X2
	058 Return X0

Method: System.Int32 EndRead(System.IAsyncResult asyncResult)

Disassembly:
	0x0324E91C LDR X20, [X24 + 0x50]
	0x0324E920 CBZ X20, 0x324EF88
	0x0324E924 LDR W8, [X20 + 0x18]
	0x0324E928 SUBS W21, W8, W19
	0x0324E92C B.CS 0x324E938
	0x0324E930 MOV X0, X31
	0x0324E934 BL 0x339D6EC
	0x0324E938 ADD X8, X20, X19
	0x0324E93C ADD X0, X8, 0x20
	0x0324E940 MOV W1, W21
	0x0324E944 MOV X2, X31
	0x0324E948 BL 0x324F6C0
	0x0324E94C STR W31, [X24 + 0x58]
	0x0324E950 LDR X19, [X31 + 0x38]
	0x0324E954 LDRB W8, [X24 + 0x62]
	0x0324E958 CBNZ W8, 0x324F088
	0x0324E95C LDR W8, [X19 + 0x48]
	0x0324E960 LDR W9, [X24 + 0x5C]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x118F000
	006 Move X21, 0xED5000
	007 Move W8, [X20+1188]
	008 Move X21, [X21+3520]
	009 Move X19, X1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xED5000
	015 Move X0, [X0+3520]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1188], W8
	019 Move X1, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call 0x229CB30, X0
	026 Return X0

Method: System.Threading.Tasks.Task`1<System.Int32> ReadAsyncInternal(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x0324E74C ADRP X20, 0x118E000
	0x0324E750 LDRB W8, [X20 + 0x4AF]
	0x0324E754 MOV X19, X0
	0x0324E758 STR X0, [X31 + 0x38]
	0x0324E75C TBNZ X8, 0x0, 0x324E7F8
	0x0324E760 ADRP X0, 0xED0000
	0x0324E764 LDR X0, [X0 + 0xD50]
	0x0324E768 BL 0x1C16CF4
	0x0324E76C ADRP X0, 0xED0000
	0x0324E770 LDR X0, [X0 + 0xD68]
	0x0324E774 BL 0x1C16CF4
	0x0324E778 ADRP X0, 0xED4000
	0x0324E77C LDR X0, [X0 + 0xE50]
	0x0324E780 BL 0x1C16CF4
	0x0324E784 ADRP X0, 0xED4000
	0x0324E788 LDR X0, [X0 + 0xE30]
	0x0324E78C BL 0x1C16CF4
	0x0324E790 ADRP X0, 0xED4000
	0x0324E794 LDR X0, [X0 + 0xDA0]
	0x0324E798 BL 0x1C16CF4
	0x0324E79C ADRP X0, 0xED2000
	0x0324E7A0 LDR X0, [X0 + 0xEA0]
	0x0324E7A4 BL 0x1C16CF4
	0x0324E7A8 ADRP X0, 0xED4000
	0x0324E7AC LDR X0, [X0 + 0xE58]
	0x0324E7B0 BL 0x1C16CF4
	0x0324E7B4 ADRP X0, 0xED4000
	0x0324E7B8 LDR X0, [X0 + 0xE60]
	0x0324E7BC BL 0x1C16CF4
	0x0324E7C0 ADRP X0, 0xED4000
	0x0324E7C4 LDR X0, [X0 + 0x2F8]
	0x0324E7C8 BL 0x1C16CF4
	0x0324E7CC ADRP X0, 0xED4000
	0x0324E7D0 LDR X0, [X0 + 0xE68]
	0x0324E7D4 BL 0x1C16CF4
	0x0324E7D8 ADRP X0, 0xED4000
	0x0324E7DC LDR X0, [X0 + 0xE70]
	0x0324E7E0 BL 0x1C16CF4
	0x0324E7E4 ADRP X0, 0xED4000
	0x0324E7E8 LDR X0, [X0 + 0xE78]
	0x0324E7EC BL 0x1C16CF4
	0x0324E7F0 MOVZ W8, 0x1
	0x0324E7F4 STRB W8, [X20 + 0x4AF]
	0x0324E7F8 STP X31, X31, [X31 + 0x20]
	0x0324E7FC LDR W8, [X19]
	0x0324E800 ADRP X26, 0xED4000
	0x0324E804 ADRP X23, 0xED4000
	0x0324E808 LDR X26, [X26 + 0xE68]
	0x0324E80C LDR X23, [X23 + 0xDA0]
	0x0324E810 STR W8, [X31 + 0x34]
	0x0324E814 ADRP X25, 0xED2000
	0x0324E818 ADRP X27, 0xED4000
	0x0324E81C ADRP X28, 0xED4000
	0x0324E820 LDR X24, [X19 + 0x28]
	0x0324E824 LDR X25, [X25 + 0xEA0]
	0x0324E828 LDR X27, [X27 + 0xE78]
	0x0324E82C LDR X28, [X28 + 0xE70]
	0x0324E830 CBZ W8, 0x324EA8C
	0x0324E834 CMP W8, 0x1
	0x0324E838 B.NE 0x324E858
	0x0324E83C LDUR V0, [X19 + 0x68]
	0x0324E840 MOVN W8, 0x0
	0x0324E844 STR V0, [X31 + 0x2]
	0x0324E848 STP X31, X31, [X19 + 0x68]
	0x0324E84C STR W8, [X31 + 0x34]
	0x0324E850 STR W8, [X19]
	0x0324E854 B 0x324F1A4
	0x0324E858 LDP W4, W3, [X19 + 0x20]
	0x0324E85C STP W4, W3, [X19 + 0x48]
	0x0324E860 CBZ X24, 0x324EF74
	0x0324E864 LDR W8, [X24 + 0x58]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+128], X30
	003 Move [X31+136], X25
	004 Move [X31+144], X24
	005 Move [X31+152], X23
	006 Move [X31+160], X22
	007 Move [X31+168], X21
	008 Move [X31+176], X20
	009 Move [X31+184], X19
	010 Move X25, 0x118F000
	011 Move X24, 0xED5000
	012 Move W8, [X25+1189]
	013 Move X24, [X24+3488]
	014 Move X19, X4
	015 Move W20, W3
	016 Move W21, W2
	017 Move X22, X1
	018 Move X23, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0xED5000
	024 Move X0, [X0+3496]
	025 Call 0x1C17CF4
	026 Move X0, 0xED5000
	027 Move X0, [X0+3504]
	028 Call 0x1C17CF4
	029 Move X0, 0xED5000
	030 Move X0, [X0+3512]
	031 Call 0x1C17CF4
	032 Move X0, 0xED5000
	033 Move X0, [X0+3488]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X25+1189], W8
	037 Move X0, [X24]
	038 NotImplemented "Instruction MOVI not yet implemented."
	039 Move [X31+112], X31
	040 Move [X31+64], V0
	041 Move [X31+72], V0
	042 Move [X31+6], V0
	043 Move [X31+32], V0
	044 Move [X31+40], V0
	045 Move [X31+64], X23
	046 Move [X31+72], X22
	047 Move [X31+80], W21
	048 Move [X31+84], W20
	049 Move [X31+88], X19
	050 Move X21, 0xED5000
	051 Move X19, 0xED5000
	052 Move X20, 0xED5000
	053 Move W8, [X0+224]
	054 Move X21, [X21+3496]
	055 Move X19, [X19+3504]
	056 Move X20, [X20+3512]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move X0, [X21]
	061 Add X8, X31, 8
	062 Call AsyncTaskMethodBuilder`1<Int32>.Create
	063 NotImplemented "Instruction LDUR not yet implemented."
	064 Move X9, [X31+24]
	065 Move X2, [X19]
	066 Add X8, X31, 32
	067 Or X19, X8, 15
	068 Move TEMP, 0
	069 Not TEMP
	070 Move W10, TEMP
	071 Add X1, X31, 32
	072 Move X0, X19
	073 Move [X31+40], V0
	074 Move [X31+56], X9
	075 Move [X31+32], W10
	076 Call AsyncTaskMethodBuilder`1<Int32>.Start, X0, X1
	077 Move X1, [X20]
	078 Move X0, X19
	079 Call AsyncTaskMethodBuilder`1<Int32>.get_Task, X0
	080 Move X20, [X31+176]
	081 Move X19, [X31+184]
	082 Move X22, [X31+160]
	083 Move X21, [X31+168]
	084 Move X24, [X31+144]
	085 Move X23, [X31+152]
	086 Move X30, [X31+128]
	087 Move X25, [X31+136]
	088 Add X31, X31, 192
	089 Return X0

Method: System.Int32 ReadByte()

Disassembly:
	0x0324E964 SDIV W20, W8, W9
	0x0324E968 CMP W20, 0x1
	0x0324E96C B.LE 0x324F0E4
	0x0324E970 LDR X19, [X24 + 0x30]
	0x0324E974 CBZ X19, 0x324EF98
	0x0324E978 LDR X8, [X19]
	0x0324E97C LDR X1, [X25]
	0x0324E980 LDRH W9, [X8 + 0x12E]
	0x0324E984 CBZ X9, 0x324E9A8
	0x0324E988 LDR X10, [X8 + 0xB0]
	0x0324E98C ADD X10, X10, 0x8
	0x0324E990 LDUR X11, [X10 - 0x8]
	0x0324E994 CMP X11, X1
	0x0324E998 B.EQ 0x324E9B8
	0x0324E99C SUBS X9, X9, 0x1
	0x0324E9A0 ADD X10, X10, 0x10
	0x0324E9A4 B.NE 0x324E990
	0x0324E9A8 MOVZ W2, 0x2
	0x0324E9AC MOV X0, X19
	0x0324E9B0 BL 0x1C5C788
	0x0324E9B4 B 0x324E9C8
	0x0324E9B8 LDR W9, [X10]
	0x0324E9BC ADD W9, W9, 0x2
	0x0324E9C0 ADD X8, X8, W9, 0x4, SXTW
	0x0324E9C4 ADD X0, X8, 0x138
	0x0324E9C8 LDP X8, X1, [X0]
	0x0324E9CC MOV X0, X19
	0x0324E9D0 BLR X8
	0x0324E9D4 TBZ X0, 0x0, 0x324ECCC
	0x0324E9D8 LDR W8, [X24 + 0x4C]
	0x0324E9DC LDR X9, [X31 + 0x38]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+88]
	005 Move X19, X0
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X0, X19
	008 Move X20, [X31+16]
	009 Move X19, [X31+24]
	010 Move X1, X31
	011 Move X30, [X31+32]
	012 Call Stream.ReadByte, X0
	013 Return X0
	014 Move X0, [X19+80]
	015 Compare X0, 0
	016 JumpIfEqual {35}
	017 Move W9, [X0+24]
	018 Compare W9, 0
	019 JumpIfEqual {36}
	020 Move W20, [X0+32]
	021 Subtract W4, W8, 1
	022 Move W1, 1
	023 Move X2, X0
	024 Move W3, W31
	025 Move X5, X31
	026 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	027 Move W8, [X19+88]
	028 Move W0, W20
	029 Subtract W8, W8, 1
	030 Move [X19+88], W8
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return X0
	035 Call 0x1C17F20
	036 Call 0x1C17F28

Method: System.Void WriteByte(System.Byte value)

Disassembly:
	0x0324E9E0 MUL W8, W8, W20
	0x0324E9E4 STR W8, [X9 + 0x50]
	0x0324E9E8 ADRP X8, 0xED0000
	0x0324E9EC LDR X8, [X8 + 0xD68]
	0x0324E9F0 LDR X0, [X8]
	0x0324E9F4 LDR W8, [X0 + 0xE0]
	0x0324E9F8 CBNZ W8, 0x324EA00
	0x0324E9FC BL 0x1C16DFC
	0x0324EA00 ADRP X8, 0xED0000
	0x0324EA04 LDR X8, [X8 + 0xD50]
	0x0324EA08 LDR X19, [X8]
	0x0324EA0C LDR X0, [X19 + 0x20]
	0x0324EA10 LDRB W8, [X0 + 0x135]
	0x0324EA14 TBNZ X8, 0x0, 0x324EA1C
	0x0324EA18 BL 0x1C5C684
	0x0324EA1C LDR X8, [X0 + 0xC0]
	0x0324EA20 LDR X0, [X8 + 0x8]
	0x0324EA24 LDRB W8, [X0 + 0x135]
	0x0324EA28 TBNZ X8, 0x0, 0x324EA30
	0x0324EA2C BL 0x1C5C684
	0x0324EA30 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+72]
	003 Move W9, [X0+76]
	004 Move X8, W8
	005 Add W10, W8, 1
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X9, [X0+64]
	008 Move [X0+72], W10
	009 Compare X9, 0
	010 JumpIfEqual {21}
	011 Move W10, [X9+24]
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Add X8, X9, X8
	014 Move [X8+32], W1
	015 Move X30, [X31+16]
	016 Return 
	017 Move X2, X31
	018 Move X30, [X31+16]
	019 Call Stream.WriteByte, X0, X1
	020 Return 
	021 Call 0x1C17F20
	022 Call 0x1C17F28

Method: System.Int32 Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)

Disassembly:
	0x0324EA34 CBNZ W8, 0x324EA3C
	0x0324EA38 BL 0x1C16DFC
	0x0324EA3C LDR X0, [X19 + 0x20]
	0x0324EA40 LDRB W8, [X0 + 0x135]
	0x0324EA44 TBNZ X8, 0x0, 0x324EA4C
	0x0324EA48 BL 0x1C5C684
	0x0324EA4C LDR X8, [X0 + 0xC0]
	0x0324EA50 LDR X0, [X8 + 0x8]
	0x0324EA54 LDRB W8, [X0 + 0x135]
	0x0324EA58 TBNZ X8, 0x0, 0x324EA60
	0x0324EA5C BL 0x1C5C684
	0x0324EA60 LDR X8, [X0 + 0xB8]
	0x0324EA64 LDR X0, [X8]
	0x0324EA68 CBZ X0, 0x324EF9C
	0x0324EA6C LDR X8, [X31 + 0x38]
	0x0324EA70 LDR X9, [X0]
	0x0324EA74 LDR W1, [X8 + 0x50]
	0x0324EA78 LDP X8, X2, [X9 + 0x178]
	0x0324EA7C BLR X8
	0x0324EA80 LDR X19, [X31 + 0x38]
	0x0324EA84 STP X0, X31, [X19 + 0x58]
	0x0324EA88 LDR W8, [X31 + 0x34]
	0x0324EA8C ADD X9, X31, 0x34
	0x0324EA90 ADD X10, X31, 0x38
	0x0324EA94 STP X31, X9, [X31 + 0x8]
	0x0324EA98 STR X10, [X31 + 0x18]
	0x0324EA9C CBZ W8, 0x324EBA0
	0x0324EAA0 LDRB W8, [X19 + 0x38]
	0x0324EAA4 CBZ W8, 0x324EBE8
	0x0324EAA8 CBZ X24, 0x324EF84
	0x0324EAAC LDR W20, [X24 + 0x48]
	0x0324EAB0 LDR W8, [X19 + 0x50]
	0x0324EAB4 LDR X21, [X19 + 0x58]
	0x0324EAB8 LDR X19, [X24 + 0x28]
	0x0324EABC SUB W22, W8, W20
	0x0324EAC0 CBZ X21, 0x324ECAC
	0x0324EAC4 LDR W8, [X21 + 0x18]
	0x0324EAC8 SUBS W8, W8, W20
	0x0324EACC B.CC 0x324EAD8
	0x0324EAD0 CMP W8, W22
	0x0324EAD4 B.CS 0x324EAE0
	0x0324EAD8 MOV X0, X31
	0x0324EADC BL 0x339D6EC
	0x0324EAE0 BFM X20, X22, 0x20, 0x1F
	0x0324EAE4 CBZ X19, 0x324ECC8
	0x0324EAE8 LDR X8, [X31 + 0x38]
	0x0324EAEC LDR X9, [X19]
	0x0324EAF0 LDR X3, [X8 + 0x40]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x118F000
	009 Move W8, [X23+1190]
	010 Move W19, W3
	011 Move W20, W2
	012 Move X21, X1
	013 Move X22, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0xED5000
	019 Move X0, [X0+3528]
	020 Call 0x1C17CF4
	021 Move X0, 0xED5000
	022 Move X0, [X0+3536]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+1190], W8
	026 Move X0, X22
	027 Move X1, X21
	028 Move W2, W20
	029 Move W3, W19
	030 Call CryptoStream.CheckReadArguments, X0, X1, X2, X3
	031 Move X0, X22
	032 Move X1, X21
	033 Move W2, W20
	034 Move W3, W19
	035 Move X4, X31
	036 Move W5, W31
	037 Call CryptoStream.ReadAsyncCore, X0, X1, X2, X3, X4, X5
	038 Compare X0, 0
	039 JumpIfEqual {58}
	040 Move X8, 0xED5000
	041 Move X8, [X8+3536]
	042 Move X19, 0xED5000
	043 Move X1, [X8]
	044 Move X19, [X19+3528]
	045 Call Task`1<Int32>.GetAwaiter, X0
	046 Move X1, [X19]
	047 Move [X31+8], X0
	048 Add X0, X31, 8
	049 Call TaskAwaiter`1<Int32>.GetResult, X0
	050 Move X20, [X31+48]
	051 Move X19, [X31+56]
	052 Move X22, [X31+32]
	053 Move X21, [X31+40]
	054 Move X30, [X31+16]
	055 Move X23, [X31+24]
	056 Add X31, X31, 64
	057 Return X0
	058 Call 0x1C17F20

Method: System.Void CheckReadArguments(System.Byte[] buffer, System.Int32 offset, System.Int32 count)

Disassembly:
	0x0324E614 BL 0x1C16F18
	0x0324E618 BL 0x1C16F20
	0x0324E61C MOV X21, X1
	0x0324E620 MOV X20, X0
	0x0324E624 TBZ X22, 0x1F, 0x324E608
	0x0324E628 B 0x324E5F8
	0x0324E62C MOV X21, X1
	0x0324E630 MOV X20, X0
	0x0324E634 CMP W21, 0x1
	0x0324E638 B.NE 0x324E6A8
	0x0324E63C MOV X0, X20
	0x0324E640 BL 0x3EB1AD0
	0x0324E644 MOV X20, X0
	0x0324E648 ADRP X0, 0xEA5000
	0x0324E64C LDR X0, [X0 + 0x7D0]
	0x0324E650 BL 0x1C16D08
	0x0324E654 LDR X8, [X20]
	0x0324E658 LDR X1, [X8]
	0x0324E65C BL 0x1C17270
	0x0324E660 TBZ X0, 0x0, 0x324E680
	0x0324E664 LDR X8, [X20]
	0x0324E668 MOVZ W9, 0x1
	0x0324E66C STR W9, [X31 + 0x10]
	0x0324E670 STR X8, [X31 + 0x8]
	0x0324E674 BL 0x3EB1AE0
	0x0324E678 MOV X8, X31
	0x0324E67C B 0x324E42C
	0x0324E680 MOVZ W0, 0x8
	0x0324E684 BL 0x3EB1AF0
	0x0324E688 LDR X8, [X20]
	0x0324E68C STR X8, [X0]
	0x0324E690 ADRP X1, 0xC66000
	0x0324E694 ADD X1, X1, 0xE58
	0x0324E698 MOV X2, X31
	0x0324E69C BL 0x3EB1B00
	0x0324E6A0 MOV X20, X0
	0x0324E6A4 BL 0x3EB1AE0
	0x0324E6A8 MOV X0, X20
	0x0324E6AC BL 0x1D2C690
	0x0324E6B0 BL 0x1990590
	0x0324E6B4 STR X30, [X31 - 0x30]!
	0x0324E6B8 STP X22, X21, [X31 + 0x10]
	0x0324E6BC STP X20, X19, [X31 + 0x20]
	0x0324E6C0 ADRP X22, 0x118E000
	0x0324E6C4 ADRP X21, 0xED4000
	0x0324E6C8 LDRB W8, [X22 + 0x4AE]
	0x0324E6CC LDR X21, [X21 + 0xDA0]
	0x0324E6D0 MOV X19, X1
	0x0324E6D4 MOV X20, X0
	0x0324E6D8 TBNZ X8, 0x0, 0x324E6FC
	0x0324E6DC ADRP X0, 0xED4000
	0x0324E6E0 LDR X0, [X0 + 0xE48]
	0x0324E6E4 BL 0x1C16CF4
	0x0324E6E8 ADRP X0, 0xED4000
	0x0324E6EC LDR X0, [X0 + 0xDA0]
	0x0324E6F0 BL 0x1C16CF4
	0x0324E6F4 MOVZ W8, 0x1
	0x0324E6F8 STRB W8, [X22 + 0x4AE]
	0x0324E6FC LDR X0, [X21]
	0x0324E700 ADRP X21, 0xED4000
	0x0324E704 LDR W8, [X0 + 0xE0]
	0x0324E708 LDR X21, [X21 + 0xE48]
	0x0324E70C CBNZ W8, 0x324E714
	0x0324E710 BL 0x1C16DFC
	0x0324E714 LDR X2, [X21]
	0x0324E718 ADD X0, X20, 0x8
	0x0324E71C MOV X1, X19
	0x0324E720 LDP X20, X19, [X31 + 0x20]
	0x0324E724 LDP X22, X21, [X31 + 0x10]
	0x0324E728 LDR X30, [X31], #0x30
	0x0324E72C B 0x2630068
	0x0324E730 SUB X31, X31, 0xA0
	0x0324E734 STP X29, X30, [X31 + 0x40]
	0x0324E738 STP X28, X27, [X31 + 0x50]
	0x0324E73C STP X26, X25, [X31 + 0x60]
	0x0324E740 STP X24, X23, [X31 + 0x70]
	0x0324E744 STP X22, X21, [X31 + 0x80]
	0x0324E748 STP X20, X19, [X31 + 0x90]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X0]
	006 Move X21, X1
	007 Move W19, W3
	008 Move W20, W2
	009 Move X9, [X8+424]
	010 Move X8, [X8+432]
	011 Move X1, X8
	012 NotImplemented "Instruction BLR not yet implemented."
	013 Move TEMP, X0
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfNotEqual {35}
	017 Move TEMP, X20
	018 And TEMP, TEMP, -2147483648
	019 Compare TEMP, -2147483648
	020 JumpIfEqual {47}
	021 Move TEMP, X19
	022 And TEMP, TEMP, -2147483648
	023 Compare TEMP, -2147483648
	024 JumpIfEqual {54}
	025 Compare X21, 0
	026 JumpIfEqual {71}
	027 Move W8, [X21+24]
	028 Subtract W8, W8, W20
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return 
	035 Move X0, 0xEA6000
	036 Move X0, [X0+2880]
	037 Call 0x1C17D08
	038 Call 0x1C17F10
	039 Move X19, X0
	040 Move X0, 0xED5000
	041 Move X0, [X0+3464]
	042 Call 0x1C17D08
	043 Move X1, X0
	044 Move X0, X19
	045 Move X2, X31
	046 Call NotSupportedException..ctor, X0, X1
	047 Move X0, 0xEAE000
	048 Move X0, [X0+1888]
	049 Call 0x1C17D08
	050 Call 0x1C17F10
	051 Move X19, X0
	052 Move X0, 0xED5000
	053 Move X0, [X0+3472]
	054 Move X0, 0xEAE000
	055 Move X0, [X0+1888]
	056 Call 0x1C17D08
	057 Call 0x1C17F10
	058 Move X19, X0
	059 Move X0, 0xECE000
	060 Move X0, [X0+1608]
	061 Call 0x1C17D08
	062 Move X20, X0
	063 Move X0, 0xECE000
	064 Move X0, [X0+1648]
	065 Call 0x1C17D08
	066 Move X2, X0
	067 Move X0, X19
	068 Move X1, X20
	069 Move X3, X31
	070 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	071 Call 0x1C17F20
	072 Move X0, 0xEAE000
	073 Move X0, [X0+1400]
	074 Call 0x1C17D08
	075 Call 0x1C17F10
	076 Move X19, X0
	077 Move X0, 0xECE000
	078 Move X0, [X0+1888]
	079 Call 0x1C17D08
	080 Move X1, X0
	081 Move X0, X19
	082 Move X2, X31
	083 Call ArgumentException..ctor, X0, X1
	084 Move X0, 0xED5000
	085 Move X0, [X0+3480]
	086 Call 0x1C17D08
	087 Move X1, X0
	088 Move X0, X19
	089 Call 0x1C17DEC

Method: System.Threading.Tasks.Task`1<System.Int32> ReadAsyncCore(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken, System.Boolean useAsync)

Disassembly:
	0x0324EAF4 LDR X8, [X9 + 0x2E8]
	0x0324EAF8 LDR X4, [X9 + 0x2F0]
	0x0324EAFC MOV X0, X19
	0x0324EB00 MOV X1, X21
	0x0324EB04 MOV X2, X20
	0x0324EB08 BLR X8
	0x0324EB0C LDR X8, [X27]
	0x0324EB10 MOV X19, X0
	0x0324EB14 MOV X20, X1
	0x0324EB18 LDR X0, [X8 + 0x20]
	0x0324EB1C LDRB W8, [X0 + 0x135]
	0x0324EB20 TBNZ X8, 0x0, 0x324EB28
	0x0324EB24 BL 0x1C5C684
	0x0324EB28 LDR X8, [X28]
	0x0324EB2C STP X19, X20, [X31 + 0x20]
	0x0324EB30 LDR X0, [X8 + 0x20]
	0x0324EB34 LDRB W8, [X0 + 0x135]
	0x0324EB38 TBNZ X8, 0x0, 0x324EB40
	0x0324EB3C BL 0x1C5C684
	0x0324EB40 LDR X8, [X0 + 0xC0]
	0x0324EB44 LDR X1, [X8 + 0x10]
	0x0324EB48 ADD X0, X31, 0x20
	0x0324EB4C BL 0x27A2398
	0x0324EB50 TBNZ X0, 0x0, 0x324EBB8
	0x0324EB54 LDR X19, [X31 + 0x38]
	0x0324EB58 STR W31, [X31 + 0x34]
	0x0324EB5C STR W31, [X19]
	0x0324EB60 LDR V0, [X31 + 0x2]
	0x0324EB64 MOV X2, X19
	0x0324EB68 STUR V0, [X19 + 0x68]
	0x0324EB6C LDR X0, [X23]
	0x0324EB70 LDR W8, [X0 + 0xE0]
	0x0324EB74 CBNZ W8, 0x324EB80
	0x0324EB78 BL 0x1C16DFC
	0x0324EB7C LDR X2, [X31 + 0x38]
	0x0324EB80 ADRP X8, 0xED4000
	0x0324EB84 LDR X8, [X8 + 0xE50]
	0x0324EB88 ADD X0, X19, 0x8
	0x0324EB8C LDR X3, [X8]
	0x0324EB90 ADD X1, X31, 0x20
	0x0324EB94 BL 0x1FAD198
	0x0324EB98 MOVZ W19, 0xC
	0x0324EB9C B 0x324EF54
	0x0324EBA0 LDUR V0, [X19 + 0x68]
	0x0324EBA4 MOVN W8, 0x0
	0x0324EBA8 STR V0, [X31 + 0x2]
	0x0324EBAC STP X31, X31, [X19 + 0x68]
	0x0324EBB0 STR W8, [X31 + 0x34]
	0x0324EBB4 STR W8, [X19]
	0x0324EBB8 LDR X8, [X26]
	0x0324EBBC LDR X0, [X8 + 0x20]
	0x0324EBC0 LDRB W8, [X0 + 0x135]
	0x0324EBC4 TBNZ X8, 0x0, 0x324EBCC
	0x0324EBC8 BL 0x1C5C684
	0x0324EBCC LDR X8, [X0 + 0xC0]
	0x0324EBD0 LDR X1, [X8 + 0x20]
	0x0324EBD4 ADD X0, X31, 0x20
	0x0324EBD8 BL 0x27A24B4
	0x0324EBDC MOV W19, W0
	0x0324EBE0 CBNZ X24, 0x324EC18
	0x0324EBE4 BL 0x1C16F20
	0x0324EBE8 CBZ X24, 0x324EF90
	0x0324EBEC LDR X0, [X24 + 0x28]
	0x0324EBF0 CBZ X0, 0x324EF94
	0x0324EBF4 LDR X8, [X0]
	0x0324EBF8 LDR W2, [X24 + 0x48]
	0x0324EBFC LDR W9, [X19 + 0x50]
	0x0324EC00 LDR X1, [X19 + 0x58]
	0x0324EC04 LDR X10, [X8 + 0x358]
	0x0324EC08 LDR X4, [X8 + 0x360]
	0x0324EC0C SUB W3, W9, W2
	0x0324EC10 BLR X10
	0x0324EC14 MOV W19, W0
	0x0324EC18 LDP W4, W8, [X24 + 0x48]
	0x0324EC1C ADD W20, W4, W19
	0x0324EC20 CMP W20, W8
	0x0324EC24 B.GE 0x324EC50

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+160], X30
	003 Move [X31+176], X26
	004 Move [X31+184], X25
	005 Move [X31+192], X24
	006 Move [X31+200], X23
	007 Move [X31+208], X22
	008 Move [X31+216], X21
	009 Move [X31+224], X20
	010 Move [X31+232], X19
	011 Move X26, 0x118F000
	012 Move X25, 0xED5000
	013 Move W8, [X26+1191]
	014 Move X25, [X25+3488]
	015 Move W24, W5
	016 Move X19, X4
	017 Move W20, W3
	018 Move W21, W2
	019 Move X22, X1
	020 Move X23, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {39}
	025 Move X0, 0xED5000
	026 Move X0, [X0+3496]
	027 Call 0x1C17CF4
	028 Move X0, 0xED5000
	029 Move X0, [X0+3544]
	030 Call 0x1C17CF4
	031 Move X0, 0xED5000
	032 Move X0, [X0+3512]
	033 Call 0x1C17CF4
	034 Move X0, 0xED5000
	035 Move X0, [X0+3488]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X26+1191], W8
	039 Move X0, [X25]
	040 And W8, W24, 1
	041 NotImplemented "Instruction MOVI not yet implemented."
	042 Move [X31+144], X31
	043 Move [X31+64], V0
	044 Move [X31+72], V0
	045 Move [X31+112], V0
	046 Move [X31+120], V0
	047 Move [X31+6], V0
	048 Move [X31+32], V0
	049 Move [X31+40], V0
	050 Move [X31+72], X23
	051 Move [X31+80], X22
	052 Move [X31+64], W20
	053 Move [X31+68], W21
	054 Move [X31+96], X19
	055 Move [X31+88], W8
	056 Move X21, 0xED5000
	057 Move X19, 0xED5000
	058 Move X20, 0xED5000
	059 Move W8, [X0+224]
	060 Move X21, [X21+3496]
	061 Move X19, [X19+3544]
	062 Move X20, [X20+3512]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X0, [X21]
	067 Add X8, X31, 8
	068 Call AsyncTaskMethodBuilder`1<Int32>.Create
	069 NotImplemented "Instruction LDUR not yet implemented."
	070 Move X9, [X31+24]
	071 Move X2, [X19]
	072 Add X8, X31, 32
	073 Or X19, X8, 15
	074 Move TEMP, 0
	075 Not TEMP
	076 Move W10, TEMP
	077 Add X1, X31, 32
	078 Move X0, X19
	079 Move [X31+40], V0
	080 Move [X31+56], X9
	081 Move [X31+32], W10
	082 Call AsyncTaskMethodBuilder`1<Int32>.Start, X0, X1
	083 Move X1, [X20]
	084 Move X0, X19
	085 Call AsyncTaskMethodBuilder`1<Int32>.get_Task, X0
	086 Move X20, [X31+224]
	087 Move X19, [X31+232]
	088 Move X22, [X31+208]
	089 Move X21, [X31+216]
	090 Move X24, [X31+192]
	091 Move X23, [X31+200]
	092 Move X26, [X31+176]
	093 Move X25, [X31+184]
	094 Move X30, [X31+160]
	095 Add X31, X31, 240
	096 Return X0

Method: System.Threading.Tasks.Task WriteAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x0324EC28 LDR X8, [X31 + 0x38]
	0x0324EC2C LDR X2, [X24 + 0x40]
	0x0324EC30 LDR X0, [X8 + 0x58]
	0x0324EC34 MOV W1, W4
	0x0324EC38 MOV W3, W4
	0x0324EC3C MOV W4, W19
	0x0324EC40 MOV X5, X31
	0x0324EC44 BL 0x33A8A9C
	0x0324EC48 STR W20, [X24 + 0x48]
	0x0324EC4C B 0x324EF50
	0x0324EC50 LDR X8, [X31 + 0x38]
	0x0324EC54 LDR X0, [X24 + 0x40]
	0x0324EC58 LDR X2, [X8 + 0x58]
	0x0324EC5C MOV W1, W31
	0x0324EC60 MOV W3, W31
	0x0324EC64 MOV X5, X31
	0x0324EC68 BL 0x33A8A9C
	0x0324EC6C LDR X21, [X24 + 0x40]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, X4
	008 Move W20, W3
	009 Move W21, W2
	010 Move X22, X1
	011 Move X23, X0
	012 Call CryptoStream.CheckWriteArguments, X0, X1, X2, X3
	013 Move X1, X22
	014 Move W2, W21
	015 Move W3, W20
	016 Move X4, X19
	017 Move X20, [X31+32]
	018 Move X19, [X31+40]
	019 Move X22, [X31+16]
	020 Move X21, [X31+24]
	021 Move X0, X23
	022 Move X30, [X31+48]
	023 Move X23, [X31+56]
	024 Call CryptoStream.WriteAsyncInternal, X0, X1, X2, X3, X4
	025 Return X0

Method: System.IAsyncResult BeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)

Disassembly:
	0x0324EE9C BL 0x339D6EC
	0x0324EEA0 MOV X0, X31
	0x0324EEA4 MOV X1, X31
	0x0324EEA8 B 0x324EEB4
	0x0324EEAC MOV X0, X31
	0x0324EEB0 MOV X1, X31
	0x0324EEB4 MOV X2, X31
	0x0324EEB8 BL 0x324F6C0
	0x0324EEBC LDR X20, [X29]
	0x0324EEC0 LDR X0, [X20 + 0x20]
	0x0324EEC4 LDRB W8, [X0 + 0x135]
	0x0324EEC8 TBNZ X8, 0x0, 0x324EED0
	0x0324EECC BL 0x1C5C684
	0x0324EED0 LDR X8, [X0 + 0xC0]
	0x0324EED4 LDR X0, [X8 + 0x8]
	0x0324EED8 LDRB W8, [X0 + 0x135]
	0x0324EEDC TBNZ X8, 0x0, 0x324EEE4
	0x0324EEE0 BL 0x1C5C684
	0x0324EEE4 LDR W8, [X0 + 0xE0]
	0x0324EEE8 CBNZ W8, 0x324EEF0
	0x0324EEEC BL 0x1C16DFC
	0x0324EEF0 LDR X0, [X20 + 0x20]
	0x0324EEF4 LDRB W8, [X0 + 0x135]
	0x0324EEF8 TBNZ X8, 0x0, 0x324EF00
	0x0324EEFC BL 0x1C5C684
	0x0324EF00 LDR X8, [X0 + 0xC0]
	0x0324EF04 LDR X0, [X8 + 0x8]
	0x0324EF08 LDRB W8, [X0 + 0x135]
	0x0324EF0C TBNZ X8, 0x0, 0x324EF14
	0x0324EF10 BL 0x1C5C684
	0x0324EF14 LDR X8, [X0 + 0xB8]
	0x0324EF18 LDR X0, [X8]
	0x0324EF1C CBZ X0, 0x324EF80
	0x0324EF20 LDR X8, [X31 + 0x38]
	0x0324EF24 LDR X9, [X0]
	0x0324EF28 LDR X1, [X8 + 0x60]
	0x0324EF2C LDP X8, X3, [X9 + 0x188]
	0x0324EF30 MOV W2, W31
	0x0324EF34 BLR X8
	0x0324EF38 LDR X8, [X31 + 0x38]
	0x0324EF3C LDP W9, W10, [X8 + 0x48]
	0x0324EF40 STR X31, [X8 + 0x60]
	0x0324EF44 SUB W9, W9, W19
	0x0324EF48 ADD W10, W10, W19
	0x0324EF4C STP W9, W10, [X8 + 0x48]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0x118F000
	011 Move X26, 0xEAE000
	012 Move W8, [X25+1192]
	013 Move X26, [X26+2008]
	014 Move X19, X5
	015 Move X20, X4
	016 Move W21, W3
	017 Move W22, W2
	018 Move X23, X1
	019 Move X24, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0xEAE000
	025 Move X0, [X0+2008]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X25+1192], W8
	029 Move X0, [X26]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X31
	035 Call CancellationToken.get_None
	036 Move X8, [X24]
	037 Move X4, X0
	038 Move X0, X24
	039 Move X1, X23
	040 Move X9, [X8+792]
	041 Move X5, [X8+800]
	042 Move W2, W22
	043 Move W3, W21
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Move X1, X20
	046 Move X2, X19
	047 Move X20, [X31+64]
	048 Move X19, [X31+72]
	049 Move X22, [X31+48]
	050 Move X21, [X31+56]
	051 Move X24, [X31+32]
	052 Move X23, [X31+40]
	053 Move X26, [X31+16]
	054 Move X25, [X31+24]
	055 Move X3, X31
	056 Move X30, [X31+80]
	057 Call TaskToApm.Begin, X0, X1, X2
	058 Return X0

Method: System.Void EndWrite(System.IAsyncResult asyncResult)

Disassembly:
	0x0324EF50 MOVZ W19, 0x11
	0x0324EF54 ADD X0, X31, 0x8
	0x0324EF58 BL 0x1BB4810

ISIL:
	001 Move X0, X1
	002 Move X1, X31
	003 Call TaskToApm.End, X0
	004 Return 

Method: System.Threading.Tasks.Task WriteAsyncInternal(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x0324EDA8 LDR X8, [X0]
	0x0324EDAC LDR W9, [X24 + 0x5C]
	0x0324EDB0 LDP X10, X2, [X8 + 0x178]
	0x0324EDB4 MUL W1, W9, W20
	0x0324EDB8 BLR X10
	0x0324EDBC LDR X9, [X31 + 0x38]
	0x0324EDC0 MOV X20, X0
	0x0324EDC4 STR X0, [X9 + 0x60]
	0x0324EDC8 LDR X21, [X24 + 0x30]
	0x0324EDCC CBZ X21, 0x324EF7C
	0x0324EDD0 LDR X8, [X21]
	0x0324EDD4 LDR X22, [X9 + 0x58]
	0x0324EDD8 LDR X1, [X25]
	0x0324EDDC LDRH W9, [X8 + 0x12E]
	0x0324EDE0 CBZ X9, 0x324EE04
	0x0324EDE4 LDR X10, [X8 + 0xB0]
	0x0324EDE8 ADD X10, X10, 0x8
	0x0324EDEC LDUR X11, [X10 - 0x8]
	0x0324EDF0 CMP X11, X1
	0x0324EDF4 B.EQ 0x324EE14
	0x0324EDF8 SUBS X9, X9, 0x1
	0x0324EDFC ADD X10, X10, 0x10
	0x0324EE00 B.NE 0x324EDEC
	0x0324EE04 MOVZ W2, 0x3
	0x0324EE08 MOV X0, X21
	0x0324EE0C BL 0x1C5C788
	0x0324EE10 B 0x324EE24
	0x0324EE14 LDR W9, [X10]
	0x0324EE18 ADD W9, W9, 0x3
	0x0324EE1C ADD X8, X8, W9, 0x4, SXTW
	0x0324EE20 ADD X0, X8, 0x138
	0x0324EE24 LDP X8, X6, [X0]
	0x0324EE28 MOV X0, X21
	0x0324EE2C MOV X1, X22
	0x0324EE30 MOV W2, W31
	0x0324EE34 MOV W3, W19
	0x0324EE38 MOV X4, X20
	0x0324EE3C MOV W5, W31
	0x0324EE40 BLR X8
	0x0324EE44 LDR X8, [X31 + 0x38]
	0x0324EE48 MOV W19, W0
	0x0324EE4C LDR X0, [X8 + 0x60]
	0x0324EE50 LDR X2, [X8 + 0x30]
	0x0324EE54 LDR W3, [X8 + 0x4C]
	0x0324EE58 MOV W1, W31
	0x0324EE5C MOV W4, W19
	0x0324EE60 MOV X5, X31
	0x0324EE64 BL 0x33A8A9C
	0x0324EE68 LDR X8, [X31 + 0x38]
	0x0324EE6C LDR X20, [X8 + 0x60]
	0x0324EE70 CBZ X20, 0x324EE94
	0x0324EE74 LDR W8, [X20 + 0x18]
	0x0324EE78 CMP W19, W8
	0x0324EE7C B.LS 0x324EE88
	0x0324EE80 MOV X0, X31
	0x0324EE84 BL 0x339D6EC
	0x0324EE88 ADD X0, X20, 0x20
	0x0324EE8C MOV W1, W19
	0x0324EE90 B 0x324EEB4
	0x0324EE94 CBZ W19, 0x324EEAC
	0x0324EE98 MOV X0, X31

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+128], X30
	003 Move [X31+136], X25
	004 Move [X31+144], X24
	005 Move [X31+152], X23
	006 Move [X31+160], X22
	007 Move [X31+168], X21
	008 Move [X31+176], X20
	009 Move [X31+184], X19
	010 Move X25, 0x118F000
	011 Move X24, 0xEA9000
	012 Move W8, [X25+1193]
	013 Move X24, [X24+640]
	014 Move X19, X4
	015 Move W20, W3
	016 Move W21, W2
	017 Move X22, X1
	018 Move X23, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {31}
	023 Move X0, 0xED5000
	024 Move X0, [X0+3568]
	025 Call 0x1C17CF4
	026 Move X0, 0xEA9000
	027 Move X0, [X0+640]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X25+1193], W8
	031 Move X0, [X24]
	032 NotImplemented "Instruction MOVI not yet implemented."
	033 Move [X31+112], X31
	034 Move [X31+64], V0
	035 Move [X31+72], V0
	036 Move [X31+6], V0
	037 Move [X31+32], V0
	038 Move [X31+40], V0
	039 Move [X31+64], X23
	040 Move [X31+72], X22
	041 Move [X31+80], W21
	042 Move [X31+84], W20
	043 Move [X31+88], X19
	044 Move X19, 0xED5000
	045 Move W8, [X0+224]
	046 Move X19, [X19+3568]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Add X8, X31, 8
	051 Move X0, X31
	052 Call AsyncTaskMethodBuilder.Create
	053 NotImplemented "Instruction LDUR not yet implemented."
	054 Move X9, [X31+24]
	055 Move X2, [X19]
	056 Add X8, X31, 32
	057 Or X19, X8, 15
	058 Move TEMP, 0
	059 Not TEMP
	060 Move W10, TEMP
	061 Add X1, X31, 32
	062 Move X0, X19
	063 Move [X31+40], V0
	064 Move [X31+56], X9
	065 Move [X31+32], W10
	066 Call AsyncTaskMethodBuilder.Start, X0, X1
	067 Move X0, X19
	068 Move X1, X31
	069 Call AsyncTaskMethodBuilder.get_Task, X0
	070 Move X20, [X31+176]
	071 Move X19, [X31+184]
	072 Move X22, [X31+160]
	073 Move X21, [X31+168]
	074 Move X24, [X31+144]
	075 Move X23, [X31+152]
	076 Move X30, [X31+128]
	077 Move X25, [X31+136]
	078 Add X31, X31, 192
	079 Return X0

Method: System.Void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)

Disassembly:
	0x0324EF5C CMP W19, 0x11
	0x0324EF60 B.EQ 0x324EF68
	0x0324EF64 CBNZ W19, 0x324F0C4
	0x0324EF68 LDR X19, [X31 + 0x38]
	0x0324EF6C STP X31, X31, [X19 + 0x58]
	0x0324EF70 B 0x324F0E4
	0x0324EF74 BL 0x1C16F20
	0x0324EF78 BL 0x1C16F20
	0x0324EF7C BL 0x1C16F20
	0x0324EF80 BL 0x1C16F20
	0x0324EF84 BL 0x1C16F20
	0x0324EF88 BL 0x1C16F20
	0x0324EF8C BL 0x1C16F20
	0x0324EF90 BL 0x1C16F20
	0x0324EF94 BL 0x1C16F20
	0x0324EF98 BL 0x1C16F20
	0x0324EF9C BL 0x1C16F20
	0x0324EFA0 B 0x324F608
	0x0324EFA4 B 0x324F608
	0x0324EFA8 B 0x324F608
	0x0324EFAC B 0x324F608
	0x0324EFB0 B 0x324F608
	0x0324EFB4 B 0x324F03C
	0x0324EFB8 B 0x324F03C
	0x0324EFBC B 0x324F608
	0x0324EFC0 B 0x324F03C
	0x0324EFC4 B 0x324F03C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W19, W3
	007 Move W20, W2
	008 Move X21, X1
	009 Move X22, X0
	010 Call CryptoStream.CheckWriteArguments, X0, X1, X2, X3
	011 Move X0, X22
	012 Move X1, X21
	013 Move W2, W20
	014 Move W3, W19
	015 Move X4, X31
	016 Move W5, W31
	017 Call CryptoStream.WriteAsyncCore, X0, X1, X2, X3, X4, X5
	018 Compare X0, 0
	019 JumpIfEqual {32}
	020 Move X1, X31
	021 Call Task.GetAwaiter, X0
	022 Move [X31+8], X0
	023 Add X0, X31, 8
	024 Move X1, X31
	025 Call TaskAwaiter.GetResult, X0
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X22, [X31+16]
	029 Move X21, [X31+24]
	030 Move X30, [X31+48]
	031 Return 
	032 Call 0x1C17F20

Method: System.Void CheckWriteArguments(System.Byte[] buffer, System.Int32 offset, System.Int32 count)

Disassembly:
	0x0324EC70 LDR W20, [X24 + 0x48]
	0x0324EC74 CBZ X21, 0x324EC94
	0x0324EC78 LDR W8, [X21 + 0x18]
	0x0324EC7C CMP W20, W8
	0x0324EC80 B.LS 0x324EC8C
	0x0324EC84 MOV X0, X31
	0x0324EC88 BL 0x339D6EC
	0x0324EC8C ADD X0, X21, 0x20
	0x0324EC90 B 0x324ECDC
	0x0324EC94 CBZ W20, 0x324ECD4
	0x0324EC98 MOV X0, X31
	0x0324EC9C BL 0x339D6EC
	0x0324ECA0 MOV X0, X31
	0x0324ECA4 MOV X20, X31
	0x0324ECA8 B 0x324ECDC
	0x0324ECAC ORR W8, W22, W20, 0x0
	0x0324ECB0 CBZ W8, 0x324ECBC
	0x0324ECB4 MOV X0, X31
	0x0324ECB8 BL 0x339D6EC
	0x0324ECBC MOV X21, X31
	0x0324ECC0 MOV X20, X31
	0x0324ECC4 CBNZ X19, 0x324EAE8
	0x0324ECC8 BL 0x1C16F20
	0x0324ECCC LDR X19, [X31 + 0x38]
	0x0324ECD0 B 0x324F0E4
	0x0324ECD4 MOV X0, X31
	0x0324ECD8 MOV X20, X31
	0x0324ECDC MOV X1, X20
	0x0324ECE0 MOV X2, X31
	0x0324ECE4 BL 0x324F6C0
	0x0324ECE8 LDP W8, W9, [X24 + 0x48]
	0x0324ECEC STR W31, [X24 + 0x48]
	0x0324ECF0 ADD W8, W8, W19
	0x0324ECF4 SDIV W20, W8, W9
	0x0324ECF8 MUL W19, W20, W9
	0x0324ECFC SUBS W4, W8, W19
	0x0324ED00 B.EQ 0x324ED24
	0x0324ED04 STR W4, [X24 + 0x48]
	0x0324ED08 LDR X8, [X31 + 0x38]
	0x0324ED0C LDR X2, [X24 + 0x40]
	0x0324ED10 LDR X0, [X8 + 0x58]
	0x0324ED14 MOV W1, W19
	0x0324ED18 MOV W3, W31
	0x0324ED1C MOV X5, X31
	0x0324ED20 BL 0x33A8A9C
	0x0324ED24 ADRP X8, 0xED0000
	0x0324ED28 LDR X8, [X8 + 0xD68]
	0x0324ED2C LDR X0, [X8]
	0x0324ED30 LDR W8, [X0 + 0xE0]
	0x0324ED34 CBNZ W8, 0x324ED3C
	0x0324ED38 BL 0x1C16DFC
	0x0324ED3C ADRP X29, 0xED0000
	0x0324ED40 LDR X29, [X29 + 0xD50]
	0x0324ED44 LDR X21, [X29]
	0x0324ED48 LDR X0, [X21 + 0x20]
	0x0324ED4C LDRB W8, [X0 + 0x135]
	0x0324ED50 TBNZ X8, 0x0, 0x324ED58
	0x0324ED54 BL 0x1C5C684
	0x0324ED58 LDR X8, [X0 + 0xC0]
	0x0324ED5C LDR X0, [X8 + 0x8]
	0x0324ED60 LDRB W8, [X0 + 0x135]
	0x0324ED64 TBNZ X8, 0x0, 0x324ED6C
	0x0324ED68 BL 0x1C5C684
	0x0324ED6C LDR W8, [X0 + 0xE0]
	0x0324ED70 CBNZ W8, 0x324ED78
	0x0324ED74 BL 0x1C16DFC
	0x0324ED78 LDR X0, [X21 + 0x20]
	0x0324ED7C LDRB W8, [X0 + 0x135]
	0x0324ED80 TBNZ X8, 0x0, 0x324ED88
	0x0324ED84 BL 0x1C5C684
	0x0324ED88 LDR X8, [X0 + 0xC0]
	0x0324ED8C LDR X0, [X8 + 0x8]
	0x0324ED90 LDRB W8, [X0 + 0x135]
	0x0324ED94 TBNZ X8, 0x0, 0x324ED9C
	0x0324ED98 BL 0x1C5C684
	0x0324ED9C LDR X8, [X0 + 0xB8]
	0x0324EDA0 LDR X0, [X8]
	0x0324EDA4 CBZ X0, 0x324EF78

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X0]
	006 Move X21, X1
	007 Move W19, W3
	008 Move W20, W2
	009 Move X9, [X8+472]
	010 Move X8, [X8+480]
	011 Move X1, X8
	012 NotImplemented "Instruction BLR not yet implemented."
	013 Move TEMP, X0
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfNotEqual {35}
	017 Move TEMP, X20
	018 And TEMP, TEMP, -2147483648
	019 Compare TEMP, -2147483648
	020 JumpIfEqual {47}
	021 Move TEMP, X19
	022 And TEMP, TEMP, -2147483648
	023 Compare TEMP, -2147483648
	024 JumpIfEqual {54}
	025 Compare X21, 0
	026 JumpIfEqual {71}
	027 Move W8, [X21+24]
	028 Subtract W8, W8, W20
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return 
	035 Move X0, 0xEA6000
	036 Move X0, [X0+2880]
	037 Call 0x1C17D08
	038 Call 0x1C17F10
	039 Move X19, X0
	040 Move X0, 0xED5000
	041 Move X0, [X0+3552]
	042 Call 0x1C17D08
	043 Move X1, X0
	044 Move X0, X19
	045 Move X2, X31
	046 Call NotSupportedException..ctor, X0, X1
	047 Move X0, 0xEAE000
	048 Move X0, [X0+1888]
	049 Call 0x1C17D08
	050 Call 0x1C17F10
	051 Move X19, X0
	052 Move X0, 0xED5000
	053 Move X0, [X0+3472]
	054 Move X0, 0xEAE000
	055 Move X0, [X0+1888]
	056 Call 0x1C17D08
	057 Call 0x1C17F10
	058 Move X19, X0
	059 Move X0, 0xECE000
	060 Move X0, [X0+1608]
	061 Call 0x1C17D08
	062 Move X20, X0
	063 Move X0, 0xECE000
	064 Move X0, [X0+1648]
	065 Call 0x1C17D08
	066 Move X2, X0
	067 Move X0, X19
	068 Move X1, X20
	069 Move X3, X31
	070 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	071 Call 0x1C17F20
	072 Move X0, 0xEAE000
	073 Move X0, [X0+1400]
	074 Call 0x1C17D08
	075 Call 0x1C17F10
	076 Move X19, X0
	077 Move X0, 0xECE000
	078 Move X0, [X0+1888]
	079 Call 0x1C17D08
	080 Move X1, X0
	081 Move X0, X19
	082 Move X2, X31
	083 Call ArgumentException..ctor, X0, X1
	084 Move X0, 0xED5000
	085 Move X0, [X0+3560]
	086 Call 0x1C17D08
	087 Move X1, X0
	088 Move X0, X19
	089 Call 0x1C17DEC

Method: System.Threading.Tasks.Task WriteAsyncCore(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken, System.Boolean useAsync)

Disassembly:
	0x0324EFC8 B 0x324F03C
	0x0324EFCC B 0x324F03C
	0x0324EFD0 B 0x324F03C
	0x0324EFD4 B 0x324F03C
	0x0324EFD8 B 0x324F608
	0x0324EFDC B 0x324F608
	0x0324EFE0 B 0x324F608
	0x0324EFE4 B 0x324F608
	0x0324EFE8 B 0x324F608
	0x0324EFEC B 0x324F03C
	0x0324EFF0 B 0x324F03C
	0x0324EFF4 B 0x324F03C
	0x0324EFF8 B 0x324F03C
	0x0324EFFC B 0x324F03C
	0x0324F000 B 0x324F03C
	0x0324F004 B 0x324F03C
	0x0324F008 B 0x324F03C
	0x0324F00C B 0x324F03C
	0x0324F010 B 0x324F608
	0x0324F014 B 0x324F608
	0x0324F018 B 0x324F03C
	0x0324F01C B 0x324F03C
	0x0324F020 B 0x324F03C
	0x0324F024 B 0x324F03C
	0x0324F028 B 0x324F03C
	0x0324F02C B 0x324F03C
	0x0324F030 B 0x324F03C
	0x0324F034 B 0x324F608
	0x0324F038 B 0x324F03C
	0x0324F03C MOV X19, X1
	0x0324F040 MOV X20, X0
	0x0324F044 CMP W19, 0x1
	0x0324F048 B.NE 0x324F070
	0x0324F04C MOV X0, X20
	0x0324F050 BL 0x3EB1AD0
	0x0324F054 LDR X8, [X0]
	0x0324F058 STR X8, [X31 + 0x8]
	0x0324F05C BL 0x3EB1AE0
	0x0324F060 MOV W19, W31
	0x0324F064 B 0x324EF54
	0x0324F068 MOV X19, X1
	0x0324F06C MOV X20, X0
	0x0324F070 ADD X0, X31, 0x8
	0x0324F074 BL 0x1BB4810
	0x0324F078 B 0x324F610
	0x0324F07C B 0x324F608
	0x0324F080 LDR X19, [X31 + 0x38]
	0x0324F084 B 0x324F0F0
	0x0324F088 LDR W8, [X19 + 0x20]
	0x0324F08C LDR W9, [X19 + 0x48]
	0x0324F090 SUB W20, W8, W9
	0x0324F094 MOVN W8, 0x1
	0x0324F098 STR W8, [X19], #0x8
	0x0324F09C LDR X0, [X23]
	0x0324F0A0 ADRP X21, 0xED3000
	0x0324F0A4 LDR W8, [X0 + 0xE0]
	0x0324F0A8 LDR X21, [X21 + 0xE30]
	0x0324F0AC CBNZ W8, 0x324F0B4
	0x0324F0B0 BL 0x1C16DFC
	0x0324F0B4 LDR X2, [X21]
	0x0324F0B8 MOV X0, X19
	0x0324F0BC MOV W1, W20
	0x0324F0C0 BL 0x26300F0
	0x0324F0C4 LDP X20, X19, [X31 + 0x90]
	0x0324F0C8 LDP X22, X21, [X31 + 0x80]
	0x0324F0CC LDP X24, X23, [X31 + 0x70]
	0x0324F0D0 LDP X26, X25, [X31 + 0x60]

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+160], X30
	003 Move [X31+176], X26
	004 Move [X31+184], X25
	005 Move [X31+192], X24
	006 Move [X31+200], X23
	007 Move [X31+208], X22
	008 Move [X31+216], X21
	009 Move [X31+224], X20
	010 Move [X31+232], X19
	011 Move X26, 0x118F000
	012 Move X25, 0xEA9000
	013 Move W8, [X26+1194]
	014 Move X25, [X25+640]
	015 Move W24, W5
	016 Move X19, X4
	017 Move W20, W3
	018 Move W21, W2
	019 Move X22, X1
	020 Move X23, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {33}
	025 Move X0, 0xED4000
	026 Move X0, [X0+3576]
	027 Call 0x1C17CF4
	028 Move X0, 0xEA8000
	029 Move X0, [X0+640]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X26+1194], W8
	033 Move X0, [X25]
	034 And W8, W24, 1
	035 NotImplemented "Instruction MOVI not yet implemented."
	036 Move [X31+144], X31
	037 Move [X31+64], V0
	038 Move [X31+72], V0
	039 Move [X31+112], V0
	040 Move [X31+120], V0
	041 Move [X31+6], V0
	042 Move [X31+32], V0
	043 Move [X31+40], V0
	044 Move [X31+72], X23
	045 Move [X31+80], X22
	046 Move [X31+64], W20
	047 Move [X31+68], W21
	048 Move [X31+96], X19
	049 Move [X31+88], W8
	050 Move X19, 0xED4000
	051 Move W8, [X0+224]
	052 Move X19, [X19+3576]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Add X8, X31, 8
	057 Move X0, X31
	058 Call AsyncTaskMethodBuilder.Create
	059 NotImplemented "Instruction LDUR not yet implemented."
	060 Move X9, [X31+24]
	061 Move X2, [X19]
	062 Add X8, X31, 32
	063 Or X19, X8, 15
	064 Move TEMP, 0
	065 Not TEMP
	066 Move W10, TEMP
	067 Add X1, X31, 32
	068 Move X0, X19
	069 Move [X31+40], V0
	070 Move [X31+56], X9
	071 Move [X31+32], W10
	072 Call AsyncTaskMethodBuilder.Start, X0, X1
	073 Move X0, X19
	074 Move X1, X31
	075 Call AsyncTaskMethodBuilder.get_Task, X0
	076 Move X20, [X31+224]
	077 Move X19, [X31+232]
	078 Move X22, [X31+208]
	079 Move X21, [X31+216]
	080 Move X24, [X31+192]
	081 Move X23, [X31+200]
	082 Move X26, [X31+176]
	083 Move X25, [X31+184]
	084 Move X30, [X31+160]
	085 Add X31, X31, 240
	086 Return X0

Method: System.Void Clear()

Disassembly:
	0x0324F0D4 LDP X28, X27, [X31 + 0x50]
	0x0324F0D8 LDP X29, X30, [X31 + 0x40]
	0x0324F0DC ADD X31, X31, 0xA0
	0x0324F0E0 RET

ISIL:
	001 Move X8, [X0]
	002 Move X2, [X8+632]
	003 Move X1, [X8+640]
	004 CallNoReturn X2

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x0324F0E4 LDR W8, [X19 + 0x48]
	0x0324F0E8 CMP W8, 0x1
	0x0324F0EC B.GE 0x324F1E0
	0x0324F0F0 LDR W20, [X19 + 0x20]
	0x0324F0F4 B 0x324F094
	0x0324F0F8 LDR X8, [X31 + 0x38]
	0x0324F0FC LDR X20, [X24 + 0x28]
	0x0324F100 LDR X22, [X24 + 0x40]
	0x0324F104 LDRB W8, [X8 + 0x38]
	0x0324F108 CBZ W8, 0x324F240
	0x0324F10C SUB W19, W19, W21
	0x0324F110 CBZ X22, 0x324F308
	0x0324F114 LDR W8, [X22 + 0x18]
	0x0324F118 SUBS W8, W8, W21
	0x0324F11C B.CC 0x324F128
	0x0324F120 CMP W8, W19
	0x0324F124 B.CS 0x324F130
	0x0324F128 MOV X0, X31
	0x0324F12C BL 0x339D6EC
	0x0324F130 BFM X21, X19, 0x20, 0x1F
	0x0324F134 CBZ X20, 0x324F324
	0x0324F138 LDR X8, [X31 + 0x38]
	0x0324F13C LDR X9, [X20]
	0x0324F140 LDR X3, [X8 + 0x40]
	0x0324F144 LDR X8, [X9 + 0x2E8]
	0x0324F148 LDR X4, [X9 + 0x2F0]
	0x0324F14C MOV X0, X20
	0x0324F150 MOV X1, X22
	0x0324F154 MOV X2, X21
	0x0324F158 BLR X8
	0x0324F15C LDR X8, [X27]
	0x0324F160 MOV X19, X0
	0x0324F164 MOV X20, X1
	0x0324F168 LDR X0, [X8 + 0x20]
	0x0324F16C LDRB W8, [X0 + 0x135]
	0x0324F170 TBNZ X8, 0x0, 0x324F178
	0x0324F174 BL 0x1C5C684
	0x0324F178 LDR X8, [X28]
	0x0324F17C STP X19, X20, [X31 + 0x20]
	0x0324F180 LDR X0, [X8 + 0x20]
	0x0324F184 LDRB W8, [X0 + 0x135]
	0x0324F188 TBNZ X8, 0x0, 0x324F190
	0x0324F18C BL 0x1C5C684
	0x0324F190 LDR X8, [X0 + 0xC0]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+48], X30
	003 Move [X31+56], X19
	004 And W9, W1, 1
	005 Add X10, X31, 36
	006 Add X11, X31, 40
	007 Move [X31+40], X0
	008 Move [X31+36], W9
	009 Move [X31+8], X31
	010 Move [X31+16], X10
	011 Move [X31+24], X11
	012 Move TEMP, X1
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfNotEqual {31}
	016 Move W9, [X0+98]
	017 Move X8, X0
	018 Compare W9, 0
	019 JumpIfNotEqual {23}
	020 Move X0, X8
	021 Call CryptoStream.FlushFinalBlock, X0
	022 Move X8, [X31+40]
	023 Move W9, [X8+112]
	024 Compare W9, 0
	025 JumpIfNotEqual {31}
	026 Move X0, [X8+40]
	027 Compare X0, 0
	028 JumpIfEqual {37}
	029 Move X1, X31
	030 Call Stream.Dispose, X0
	031 Add X0, X31, 8
	032 Call 0x1BB56F0
	033 Move X30, [X31+48]
	034 Move X19, [X31+56]
	035 Add X31, X31, 64
	036 Return 
	037 Call 0x1C17F20
	038 Move X19, X0
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X0, X19
	041 Call 0x3EB2AD0
	042 Move X8, [X0]
	043 Move [X31+8], X8
	044 Call 0x3EB2AE0
	045 Move X19, X0
	046 Add X0, X31, 8
	047 Call 0x1BB56F0
	048 Move X0, X19
	049 Call 0x1D2D690
	050 Call 0x1991590

Method: System.Void InitializeBuffer()

Disassembly:
	0x0324DF20 MOV W2, W22
	0x0324DF24 MOV W3, W21
	0x0324DF28 BLR X9
	0x0324DF2C MOV X1, X20
	0x0324DF30 MOV X2, X19
	0x0324DF34 LDP X20, X19, [X31 + 0x40]
	0x0324DF38 LDP X22, X21, [X31 + 0x30]
	0x0324DF3C LDP X24, X23, [X31 + 0x20]
	0x0324DF40 LDP X26, X25, [X31 + 0x10]
	0x0324DF44 MOV X3, X31
	0x0324DF48 LDR X30, [X31], #0x50
	0x0324DF4C B 0x33ED028
	0x0324DF50 MOV X0, X1
	0x0324DF54 MOV X1, X31
	0x0324DF58 B 0x33ED2B0
	0x0324DF5C STR X30, [X31 - 0x30]!
	0x0324DF60 STP X22, X21, [X31 + 0x10]
	0x0324DF64 STP X20, X19, [X31 + 0x20]
	0x0324DF68 MOV W19, W3
	0x0324DF6C MOV W20, W2
	0x0324DF70 MOV X21, X1
	0x0324DF74 MOV X22, X0
	0x0324DF78 BL 0x324DC70
	0x0324DF7C MOV X0, X22
	0x0324DF80 MOV X1, X21
	0x0324DF84 MOV W2, W20
	0x0324DF88 MOV W3, W19
	0x0324DF8C MOV X4, X31
	0x0324DF90 MOV W5, W31
	0x0324DF94 BL 0x324DFC8
	0x0324DF98 CBZ X0, 0x324DFC4
	0x0324DF9C MOV X1, X31
	0x0324DFA0 BL 0x33ED394
	0x0324DFA4 STR X0, [X31 + 0x8]
	0x0324DFA8 ADD X0, X31, 0x8
	0x0324DFAC MOV X1, X31
	0x0324DFB0 BL 0x32C3B4C
	0x0324DFB4 LDP X20, X19, [X31 + 0x20]
	0x0324DFB8 LDP X22, X21, [X31 + 0x10]
	0x0324DFBC LDR X30, [X31], #0x30
	0x0324DFC0 RET
	0x0324DFC4 BL 0x1C16F20
	0x0324DFC8 SUB X31, X31, 0xF0
	0x0324DFCC STR X30, [X31 + 0xA0]
	0x0324DFD0 STP X26, X25, [X31 + 0xB0]
	0x0324DFD4 STP X24, X23, [X31 + 0xC0]
	0x0324DFD8 STP X22, X21, [X31 + 0xD0]
	0x0324DFDC STP X20, X19, [X31 + 0xE0]
	0x0324DFE0 ADRP X26, 0x118F000
	0x0324DFE4 ADRP X25, 0xEA9000
	0x0324DFE8 LDRB W8, [X26 + 0x4AA]
	0x0324DFEC LDR X25, [X25 + 0x280]
	0x0324DFF0 MOV W24, W5
	0x0324DFF4 MOV X19, X4
	0x0324DFF8 MOV W20, W3
	0x0324DFFC MOV W21, W2
	0x0324E000 MOV X22, X1
	0x0324E004 MOV X23, X0
	0x0324E008 TBNZ X8, 0x0, 0x324E02C
	0x0324E00C ADRP X0, 0xED4000
	0x0324E010 LDR X0, [X0 + 0xDF8]
	0x0324E014 BL 0x1C16CF4
	0x0324E018 ADRP X0, 0xEA8000
	0x0324E01C LDR X0, [X0 + 0x280]
	0x0324E020 BL 0x1C16CF4
	0x0324E024 MOVZ W8, 0x1
	0x0324E028 STRB W8, [X26 + 0x4AA]
	0x0324E02C LDR X0, [X25]
	0x0324E030 AND W8, W24, 0x1
	0x0324E034 MOVI V0.2D, 0x0
	0x0324E038 STR X31, [X31 + 0x90]
	0x0324E03C STP V0, V0, [X31 + 0x40]
	0x0324E040 STP V0, V0, [X31 + 0x70]
	0x0324E044 STR V0, [X31 + 0x6]
	0x0324E048 STP V0, V0, [X31 + 0x20]
	0x0324E04C STP X23, X22, [X31 + 0x48]
	0x0324E050 STP W20, W21, [X31 + 0x40]
	0x0324E054 STR X19, [X31 + 0x60]
	0x0324E058 STRB W8, [X31 + 0x58]
	0x0324E05C ADRP X19, 0xED4000
	0x0324E060 LDR W8, [X0 + 0xE0]
	0x0324E064 LDR X19, [X19 + 0xDF8]
	0x0324E068 CBNZ W8, 0x324E070

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x1190000
	007 Move W8, [X20+1195]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xEA7000
	014 Move X0, [X0+1560]
	015 Call 0x1C17CF4
	016 Move X0, 0xED4000
	017 Move X0, [X0+3744]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+1195], W8
	021 Move X20, [X19+48]
	022 Compare X20, 0
	023 JumpIfEqual {84}
	024 Move X22, 0xED4000
	025 Move X8, [X20]
	026 Move X22, [X22+3744]
	027 Move X21, 0xEA7000
	028 NotImplemented "Instruction LDRH not yet implemented."
	029 Move X1, [X22]
	030 Move X21, [X21+1560]
	031 Compare X9, 0
	032 JumpIfEqual {39}
	033 Move X10, [X8+176]
	034 Add X10, X10, 8
	035 NotImplemented "Instruction LDUR not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Subtract X9, X9, 1
	038 Add X10, X10, 16
	039 Move X0, X20
	040 Move W2, W31
	041 Call 0x1C5D788
	042 NotImplemented "Instruction LDRSW not yet implemented."
	043 Add X8, X8, X9
	044 Add X0, X8, 312
	045 Move X8, [X0]
	046 Move X1, [X0+8]
	047 Move X0, X20
	048 NotImplemented "Instruction BLR not yet implemented."
	049 Move [X19+76], W0
	050 Move W1, W0
	051 Move X0, [X21]
	052 Call 0x1C17D6C
	053 Move X20, [X19+48]
	054 Move [X19+64], X0
	055 Compare X20, 0
	056 JumpIfEqual {90}
	057 Move X8, [X20]
	058 Move X1, [X22]
	059 NotImplemented "Instruction LDRH not yet implemented."
	060 Compare X9, 0
	061 JumpIfEqual {68}
	062 Move X10, [X8+176]
	063 Add X10, X10, 8
	064 NotImplemented "Instruction LDUR not yet implemented."
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Subtract X9, X9, 1
	067 Add X10, X10, 16
	068 Move W2, 1
	069 Move X0, X20
	070 Call 0x1C5D788
	071 Move W9, [X10]
	072 Add W9, W9, 1
	073 Add X8, X8, W9
	074 Add X0, X8, 312
	075 Move X8, [X0]
	076 Move X1, [X0+8]
	077 Move X0, X20
	078 NotImplemented "Instruction BLR not yet implemented."
	079 Move [X19+92], W0
	080 Move W1, W0
	081 Move X0, [X21]
	082 Call 0x1C17D6C
	083 Move [X19+80], X0
	084 Move X20, [X31+32]
	085 Move X19, [X31+40]
	086 Move X22, [X31+16]
	087 Move X21, [X31+24]
	088 Move X30, [X31+48]
	089 Return 
	090 Call 0x1C17F20

Method: System.Threading.SemaphoreSlim get_AsyncActiveSemaphore()

Disassembly:
	0x0324F194 LDR X1, [X8 + 0x10]
	0x0324F198 ADD X0, X31, 0x20
	0x0324F19C BL 0x27A2398
	0x0324F1A0 TBZ X0, 0x0, 0x324F524
	0x0324F1A4 LDR X8, [X26]
	0x0324F1A8 LDR X0, [X8 + 0x20]
	0x0324F1AC LDRB W8, [X0 + 0x135]
	0x0324F1B0 TBNZ X8, 0x0, 0x324F1B8
	0x0324F1B4 BL 0x1C5C684
	0x0324F1B8 LDR X8, [X0 + 0xC0]
	0x0324F1BC LDR X1, [X8 + 0x20]
	0x0324F1C0 ADD X0, X31, 0x20
	0x0324F1C4 BL 0x27A24B4
	0x0324F1C8 MOV W8, W0
	0x0324F1CC CBZ W0, 0x324F350
	0x0324F1D0 CBZ X24, 0x324F570
	0x0324F1D4 LDR W9, [X24 + 0x48]
	0x0324F1D8 ADD W8, W9, W8
	0x0324F1DC STR W8, [X24 + 0x48]
	0x0324F1E0 CBZ X24, 0x324F574
	0x0324F1E4 LDP W21, W19, [X24 + 0x48]
	0x0324F1E8 CMP W19, W21
	0x0324F1EC B.GT 0x324F0F8
	0x0324F1F0 LDR X20, [X24 + 0x30]
	0x0324F1F4 CBZ X20, 0x324F578
	0x0324F1F8 LDR X8, [X20]
	0x0324F1FC LDR X22, [X24 + 0x40]
	0x0324F200 LDR X21, [X24 + 0x50]
	0x0324F204 LDR X1, [X25]
	0x0324F208 LDRH W9, [X8 + 0x12E]
	0x0324F20C CBZ X9, 0x324F230
	0x0324F210 LDR X10, [X8 + 0xB0]
	0x0324F214 ADD X10, X10, 0x8
	0x0324F218 LDUR X11, [X10 - 0x8]
	0x0324F21C CMP X11, X1
	0x0324F220 B.EQ 0x324F268
	0x0324F224 SUBS X9, X9, 0x1
	0x0324F228 ADD X10, X10, 0x10
	0x0324F22C B.NE 0x324F218
	0x0324F230 MOVZ W2, 0x3
	0x0324F234 MOV X0, X20
	0x0324F238 BL 0x1C5C788
	0x0324F23C B 0x324F278
	0x0324F240 CBZ X20, 0x324F57C
	0x0324F244 LDR X8, [X20]
	0x0324F248 SUB W3, W19, W21
	0x0324F24C LDR X9, [X8 + 0x358]
	0x0324F250 LDR X4, [X8 + 0x360]
	0x0324F254 MOV X0, X20
	0x0324F258 MOV X1, X22
	0x0324F25C MOV W2, W21
	0x0324F260 BLR X9
	0x0324F264 B 0x324F1C8
	0x0324F268 LDR W9, [X10]
	0x0324F26C ADD W9, W9, 0x3
	0x0324F270 ADD X8, X8, W9, 0x4, SXTW
	0x0324F274 ADD X0, X8, 0x138
	0x0324F278 LDP X8, X6, [X0]
	0x0324F27C MOV X0, X20
	0x0324F280 MOV X1, X22

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x118E000
	008 Move X22, 0xED4000
	009 Move W8, [X20+1196]
	010 Move X22, [X22+3584]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0xED4000
	017 Move X0, [X0+3592]
	018 Call 0x1C17CF4
	019 Move X0, 0xED4000
	020 Move X0, [X0+3600]
	021 Call 0x1C17CF4
	022 Move X0, 0xED4000
	023 Move X0, [X0+3608]
	024 Call 0x1C17CF4
	025 Move X0, 0xED4000
	026 Move X0, [X0+3584]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+1196], W8
	030 Move X0, [X22]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {36}
	034 Call 0x1C17DFC
	035 Move X0, [X22]
	036 Move X8, [X0+184]
	037 Move X23, 0xED4000
	038 Move X20, [X8+8]
	039 Move X23, [X23+3600]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xED4000
	048 Move X8, [X0+184]
	049 Move X9, [X9+3592]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xED4000
	054 Move X8, [X8+3608]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Func`1<Object>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+8], X20
	063 Move X2, [X23]
	064 Add X0, X19, 104
	065 Move X1, X20
	066 Move X20, [X31+32]
	067 Move X19, [X31+40]
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Move X30, [X31+48]
	071 Move X23, [X31+56]
	072 Call 0x2213A40, X0, X1
	073 Return X0

