Type: System.Security.Cryptography.RC2CryptoServiceProvider

Method: System.Void .ctor()

Disassembly:
	0x03257628 LDP W9, W20, [X19 + 0x40]
	0x0325762C CMP W11, 0x6
	0x03257630 ADD W8, W9, 0x1
	0x03257634 MUL W8, W8, W20
	0x03257638 B.LE 0x3257758
	0x0325763C CMP W11, W8
	0x03257640 B.GE 0x3257834
	0x03257644 ADRP X22, 0xECC000
	0x03257648 LDR X8, [X19 + 0x30]
	0x0325764C LDR X22, [X22 + 0x1A8]
	0x03257650 AND X21, X11, 0x0
	0x03257654 CBZ X8, 0x32579C4
	0x03257658 LDR W10, [X8 + 0x18]
	0x0325765C SUB X9, X21, 0x1
	0x03257660 CMP W9, W10
	0x03257664 B.CS 0x32579C0
	0x03257668 LDR W10, [X19 + 0x48]
	0x0325766C ADD X8, X8, W9, 0x2, SXTW
	0x03257670 LDR W20, [X8 + 0x20]
	0x03257674 SDIV W8, W21, W10
	0x03257678 MSUB W8, W8, W10, W21
	0x0325767C CMP W8, 0x4
	0x03257680 B.EQ 0x32576D8
	0x03257684 CBNZ W8, 0x32576F4
	0x03257688 LDR X0, [X22]
	0x0325768C LDR W8, [X0 + 0xE0]
	0x03257690 CBNZ W8, 0x3257698
	0x03257694 BL 0x1C16DFC
	0x03257698 EXTR W0, W20, W20, 0x8
	0x0325769C BL 0x3259B00
	0x032576A0 LDR X8, [X22]
	0x032576A4 LDR X8, [X8 + 0xB8]
	0x032576A8 LDR X8, [X8 + 0x8]
	0x032576AC CBZ X8, 0x32579C4
	0x032576B0 LDR W9, [X19 + 0x48]
	0x032576B4 LDR W10, [X8 + 0x18]
	0x032576B8 SDIV W9, W21, W9
	0x032576BC SUB W9, W9, 0x1
	0x032576C0 CMP W9, W10
	0x032576C4 B.CS 0x32579C0
	0x032576C8 ADD X8, X8, W9, 0x2, SXTW
	0x032576CC LDR W8, [X8 + 0x20]
	0x032576D0 EOR W20, W8, W0, 0x0
	0x032576D4 B 0x32576F4
	0x032576D8 LDR X0, [X22]
	0x032576DC LDR W8, [X0 + 0xE0]
	0x032576E0 CBNZ W8, 0x32576E8
	0x032576E4 BL 0x1C16DFC
	0x032576E8 MOV W0, W20
	0x032576EC BL 0x3259B00
	0x032576F0 MOV W20, W0
	0x032576F4 LDR X8, [X19 + 0x30]
	0x032576F8 CBZ X8, 0x32579C4
	0x032576FC LDR W9, [X19 + 0x48]
	0x03257700 LDR W10, [X8 + 0x18]
	0x03257704 SUB W9, W31, W9
	0x03257708 ADD X9, X21, X9
	0x0325770C CMP W9, W10
	0x03257710 B.CS 0x32579C0
	0x03257714 CMP W21, W10
	0x03257718 B.CS 0x32579C0
	0x0325771C ADD X9, X8, W9, 0x2, SXTW
	0x03257720 LDR W9, [X9 + 0x20]
	0x03257724 ADD X10, X8, X21, 0x2, LSL
	0x03257728 ADD X21, X21, 0x1
	0x0325772C EOR W9, W9, W20, 0x0
	0x03257730 STR W9, [X10 + 0x20]
	0x03257734 LDP W9, W20, [X19 + 0x40]
	0x03257738 ADD W10, W9, 0x1
	0x0325773C MUL W10, W10, W20
	0x03257740 CMP X21, W10, SXTW
	0x03257744 B.LT 0x3257654
	0x03257748 B 0x3257834
	0x0325774C LDP W9, W20, [X19 + 0x40]
	0x03257750 ADD W8, W9, 0x1
	0x03257754 MUL W8, W8, W20
	0x03257758 CMP W11, W8
	0x0325775C B.GE 0x3257834
	0x03257760 ADRP X22, 0xECC000
	0x03257764 LDR X8, [X19 + 0x30]
	0x03257768 LDR X22, [X22 + 0x1A8]
	0x0325776C SXTW X21, W11
	0x03257770 CBZ X8, 0x32579C4
	0x03257774 LDR W9, [X8 + 0x18]
	0x03257778 SUB W10, W21, 0x1
	0x0325777C CMP W10, W9
	0x03257780 B.CS 0x32579C0
	0x03257784 LDR W9, [X19 + 0x48]
	0x03257788 ADD X10, X8, W10, 0x2, SXTW

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1186000
	006 Move X20, 0xECD000
	007 Move W8, [X21+1275]
	008 Move X20, [X20+336]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0xECA000
	015 Move X0, [X0+3032]
	016 Call 0x1C17CF4
	017 Move X0, 0xECD000
	018 Move X0, [X0+360]
	019 Call 0x1C17CF4
	020 Move X0, 0xECD000
	021 Move X0, [X0+336]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+1275], W8
	025 Move X0, [X20]
	026 Move X20, 0xECA000
	027 Move W8, [X0+224]
	028 Move X20, [X20+3032]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X19
	033 Call RC2..ctor, X0
	034 Move X0, [X20]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X31
	040 Call CryptoConfig.get_AllowOnlyFipsAlgorithms
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfEqual {71}
	045 Move W0, 0x6602
	046 Move W1, W31
	047 Move X2, X31
	048 Call Utils.HasAlgorithm, X0, X1
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {85}
	053 Move X20, 0xECD000
	054 Move X20, [X20+360]
	055 Move X0, [X20]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {61}
	059 Call 0x1C17DFC
	060 Move X0, [X20]
	061 Move X8, [X0+184]
	062 Move W9, 8
	063 Move X8, [X8]
	064 Move [X19+20], W9
	065 Move [X19+48], X8
	066 Move X20, [X31+16]
	067 Move X19, [X31+24]
	068 Move X30, [X31+32]
	069 Move X21, [X31+40]
	070 Return 
	071 Move X0, 0xECD000
	072 Move X0, [X0+160]
	073 Call 0x1C17D08
	074 Move X1, X31
	075 Call Environment.GetResourceString, X0
	076 Move X19, X0
	077 Move X0, 0xE9D000
	078 Move X0, [X0+1456]
	079 Call 0x1C17D08
	080 Call 0x1C17F10
	081 Move X1, X19
	082 Move X2, X31
	083 Move X20, X0
	084 Call InvalidOperationException..ctor, X0, X1
	085 Move X0, 0xECC000
	086 Move X0, [X0+3944]
	087 Call 0x1C17D08
	088 Move X1, X31
	089 Call Environment.GetResourceString, X0
	090 Move X19, X0
	091 Move X0, 0xECA000
	092 Move X0, [X0+3296]
	093 Call 0x1C17D08
	094 Call 0x1C17F10
	095 Move X1, X19
	096 Move X2, X31
	097 Move X20, X0
	098 Call CryptographicException..ctor, X0, X1
	099 Move X0, 0xECD000
	100 Move X0, [X0+368]
	101 Call 0x1C17D08
	102 Move X1, X0
	103 Move X0, X20
	104 Call 0x1C17DEC

Method: System.Int32 get_EffectiveKeySize()

Disassembly:
	0x0325778C LDR W20, [X10 + 0x20]
	0x03257790 SDIV W10, W21, W9

ISIL:
	001 Move W0, [X0+56]
	002 Return X0

Method: System.Security.Cryptography.ICryptoTransform CreateEncryptor(System.Byte[] rgbKey, System.Byte[] rgbIV)

Disassembly:
	0x03257794 MSUB W10, W10, W9, W21
	0x03257798 CBNZ W10, 0x32577F0
	0x0325779C LDR X0, [X22]
	0x032577A0 LDR W8, [X0 + 0xE0]
	0x032577A4 CBNZ W8, 0x32577AC
	0x032577A8 BL 0x1C16DFC
	0x032577AC EXTR W0, W20, W20, 0x8
	0x032577B0 BL 0x3259B00
	0x032577B4 LDR X8, [X22]
	0x032577B8 LDR X8, [X8 + 0xB8]
	0x032577BC LDR X10, [X8 + 0x8]
	0x032577C0 CBZ X10, 0x32579C4
	0x032577C4 LDR W9, [X19 + 0x48]
	0x032577C8 LDR W8, [X10 + 0x18]
	0x032577CC SDIV W11, W21, W9
	0x032577D0 SUB W11, W11, 0x1
	0x032577D4 CMP W11, W8
	0x032577D8 B.CS 0x32579C0
	0x032577DC LDR X8, [X19 + 0x30]
	0x032577E0 CBZ X8, 0x32579C4
	0x032577E4 ADD X10, X10, W11, 0x2, SXTW
	0x032577E8 LDR W10, [X10 + 0x20]
	0x032577EC EOR W20, W10, W0, 0x0
	0x032577F0 LDR W10, [X8 + 0x18]
	0x032577F4 SUB W9, W21, W9
	0x032577F8 CMP W9, W10
	0x032577FC B.CS 0x32579C0
	0x03257800 CMP W21, W10
	0x03257804 B.CS 0x32579C0
	0x03257808 ADD X9, X8, W9, 0x2, SXTW
	0x0325780C LDR W9, [X9 + 0x20]
	0x03257810 ADD X10, X8, X21, 0x2, LSL
	0x03257814 ADD X21, X21, 0x1
	0x03257818 EOR W9, W9, W20, 0x0
	0x0325781C STR W9, [X10 + 0x20]
	0x03257820 LDP W9, W20, [X19 + 0x40]
	0x03257824 ADD W10, W9, 0x1
	0x03257828 MUL W10, W10, W20
	0x0325782C CMP X21, W10, SXTW
	0x03257830 B.LT 0x3257770
	0x03257834 CMP W20, 0x1
	0x03257838 B.LT 0x32578C0
	0x0325783C LDR X8, [X19 + 0x30]
	0x03257840 CBZ X8, 0x32579C4
	0x03257844 LDR X10, [X8 + 0x18]
	0x03257848 LDR X11, [X19 + 0x38]
	0x0325784C MOV X9, X31
	0x03257850 ADD X14, X8, 0x20
	0x03257854 AND X12, X10, 0x0
	0x03257858 ADD X13, X11, 0x20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1186000
	007 Move W8, [X22+1276]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xECD000
	016 Move X0, [X0+376]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1276], W8
	020 Move W8, [X21+72]
	021 Compare W8, 0
	022 JumpIfNotEqual {41}
	023 Move X8, 0xECD000
	024 Move X8, [X8+376]
	025 Move X0, [X8]
	026 Call 0x1C17F10
	027 Move W2, 1
	028 Move X1, X21
	029 Move X3, X20
	030 Move X4, X19
	031 Move X5, X31
	032 Move X22, X0
	033 Call RC2Transform..ctor, X0, X1, X2, X3, X4
	034 Move X0, X22
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0
	041 Move X0, 0xEA6000
	042 Move X0, [X0+1880]
	043 Call 0x1C17D08
	044 Call 0x1C17F10
	045 Move X19, X0
	046 Move X0, 0xECD000
	047 Move X0, [X0+384]
	048 Call 0x1C17D08
	049 Move X1, X0
	050 Move X0, X19
	051 Move X2, X31
	052 Call NotImplementedException..ctor, X0, X1
	053 Move X0, 0xECD000
	054 Move X0, [X0+392]
	055 Call 0x1C17D08
	056 Move X1, X0
	057 Move X0, X19
	058 Call 0x1C17DEC

Method: System.Security.Cryptography.ICryptoTransform CreateDecryptor(System.Byte[] rgbKey, System.Byte[] rgbIV)

Disassembly:
	0x0325785C CMP X9, X12
	0x03257860 B.CS 0x32579C0
	0x03257864 CBZ X11, 0x32579C4
	0x03257868 LDR X15, [X11 + 0x18]
	0x0325786C CMP X9, W15, UXTW
	0x03257870 B.CS 0x32579C0
	0x03257874 LDR W16, [X14, X9, LSL #2]
	0x03257878 STR W16, [X13, X9, LSL #2]
	0x0325787C LDP W17, W16, [X19 + 0x40]
	0x03257880 MUL W16, W17, W16
	0x03257884 ADD X16, X9, X16
	0x03257888 CMP W16, W10
	0x0325788C B.CS 0x32579C0
	0x03257890 CMP W16, W15
	0x03257894 B.CS 0x32579C0
	0x03257898 SXTW X15, W16
	0x0325789C ADD X16, X8, X15, 0x2, LSL
	0x032578A0 LDR W16, [X16 + 0x20]
	0x032578A4 ADD X15, X11, X15, 0x2, LSL
	0x032578A8 ADD X9, X9, 0x1
	0x032578AC STR W16, [X15 + 0x20]
	0x032578B0 LDRSW X20, [X19 + 0x44]
	0x032578B4 CMP X9, X20
	0x032578B8 B.LT 0x325785C
	0x032578BC LDR W9, [X19 + 0x40]
	0x032578C0 MUL W8, W9, W20
	0x032578C4 CMP W20, W8
	0x032578C8 B.GE 0x32579A8
	0x032578CC ADRP X24, 0xECC000
	0x032578D0 LDR X24, [X24 + 0x1A8]
	0x032578D4 MOV W8, W20
	0x032578D8 MOVZ W23, 0x1B1B
	0x032578DC SXTW X8, W8
	0x032578E0 ORR W21, W31, 0xFEFEFEFE
	0x032578E4 ORR W22, W31, 0x80808080
	0x032578E8 MOVK W23, 0x1B1B0000
	0x032578EC ADD X25, X8, 0x8
	0x032578F0 LDR X8, [X19 + 0x30]
	0x032578F4 CBZ X8, 0x32579C4
	0x032578F8 LDR W9, [X8 + 0x18]
	0x032578FC CMP W20, W9
	0x03257900 B.CS 0x32579C0
	0x03257904 LDR X0, [X24]
	0x03257908 LDR W26, [X8, X25, LSL #2]
	0x0325790C LDR W9, [X0 + 0xE0]
	0x03257910 CBNZ W9, 0x3257918
	0x03257914 BL 0x1C16DFC
	0x03257918 LDR X8, [X19 + 0x38]
	0x0325791C CBZ X8, 0x32579C4
	0x03257920 LDR W9, [X8 + 0x18]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1186000
	007 Move W8, [X22+1277]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xECD000
	016 Move X0, [X0+376]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1277], W8
	020 Move W8, [X21+72]
	021 Compare W8, 0
	022 JumpIfNotEqual {41}
	023 Move X8, 0xECD000
	024 Move X8, [X8+376]
	025 Move X0, [X8]
	026 Call 0x1C17F10
	027 Move X1, X21
	028 Move W2, W31
	029 Move X3, X20
	030 Move X4, X19
	031 Move X5, X31
	032 Move X22, X0
	033 Call RC2Transform..ctor, X0, X1, X2, X3, X4
	034 Move X0, X22
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0
	041 Move X0, 0xEA6000
	042 Move X0, [X0+1880]
	043 Call 0x1C17D08
	044 Call 0x1C17F10
	045 Move X19, X0
	046 Move X0, 0xECD000
	047 Move X0, [X0+384]
	048 Call 0x1C17D08
	049 Move X1, X0
	050 Move X0, X19
	051 Move X2, X31
	052 Call NotImplementedException..ctor, X0, X1
	053 Move X0, 0xECD000
	054 Move X0, [X0+400]
	055 Call 0x1C17D08
	056 Move X1, X0
	057 Move X0, X19
	058 Call 0x1C17DEC

Method: System.Void GenerateKey()

Disassembly:
	0x03257924 CMP W20, W9
	0x03257928 B.CS 0x32579C0
	0x0325792C AND W9, W26, W22, 0x0
	0x03257930 SUB W9, W9, W9, 0x7, LSR
	0x03257934 AND W10, W21, W26, 0x1
	0x03257938 AND W11, W22, W26, 0x1
	0x0325793C AND W9, W9, W23, 0x0
	0x03257940 SUB W11, W11, W11, 0x7, LSR
	0x03257944 EOR W9, W9, W10, 0x0
	0x03257948 AND W11, W11, W23, 0x0
	0x0325794C AND W10, W21, W9, 0x1
	0x03257950 AND W12, W22, W9, 0x1
	0x03257954 EOR W10, W10, W11, 0x0
	0x03257958 SUB W11, W12, W12, 0x7, LSR
	0x0325795C AND W12, W21, W10, 0x1
	0x03257960 AND W11, W11, W23, 0x0
	0x03257964 EOR W13, W10, W9, 0x0
	0x03257968 EOR W11, W11, W12, 0x0
	0x0325796C EOR W12, W11, W26, 0x0
	0x03257970 EOR W11, W13, W11, 0x0
	0x03257974 EOR W9, W12, W9, 0x0
	0x03257978 EOR W11, W11, W12, 0x18
	0x0325797C EOR W10, W12, W10, 0x0
	0x03257980 EOR W9, W11, W9, 0x8
	0x03257984 EOR W9, W9, W10, 0x10
	0x03257988 STR W9, [X8, X25, LSL #2]
	0x0325798C LDP W9, W8, [X19 + 0x40]
	0x03257990 SUB X10, X25, 0x7
	0x03257994 ADD X25, X25, 0x1
	0x03257998 ADD W20, W20, 0x1
	0x0325799C MUL W8, W9, W8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1186000
	006 Move X20, 0xE9D000
	007 Move W8, [X21+1278]
	008 Move X20, [X20+1560]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE9D000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1278], W8
	019 Move W8, [X19+56]
	020 Move X0, [X20]
	021 Add W9, W8, 7
	022 NotImplemented "Instruction CMP not yet implemented."
	023 NotImplemented "Instruction CSEL not yet implemented."
	024 NotImplemented "Instruction SBFM not yet implemented."
	025 Call 0x1C17D6C
	026 Move [X19+32], X0
	027 Move X0, X31
	028 Call Utils.get_StaticRandomNumberGenerator
	029 Compare X0, 0
	030 JumpIfEqual {40}
	031 Move X8, [X0]
	032 Move X1, [X19+32]
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X3, [X8+408]
	036 Move X2, [X8+416]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 CallNoReturn X3
	040 Call 0x1C17F20

Method: System.Void GenerateIV()

Disassembly:
	0x032579A0 CMP X10, W8, SXTW
	0x032579A4 B.LT 0x32578F0
	0x032579A8 LDP X20, X19, [X31 + 0x40]
	0x032579AC LDP X22, X21, [X31 + 0x30]
	0x032579B0 LDP X24, X23, [X31 + 0x20]
	0x032579B4 LDP X26, X25, [X31 + 0x10]
	0x032579B8 LDR X30, [X31], #0x50
	0x032579BC RET
	0x032579C0 BL 0x1C16F28
	0x032579C4 BL 0x1C16F20
	0x032579C8 ADRP X0, 0xECB000
	0x032579CC LDR X0, [X0 + 0xF08]
	0x032579D0 BL 0x1C16D08
	0x032579D4 MOV X1, X31
	0x032579D8 BL 0x33BDD84
	0x032579DC MOV X19, X0
	0x032579E0 ADRP X0, 0xEC9000
	0x032579E4 LDR X0, [X0 + 0xCE0]
	0x032579E8 BL 0x1C16D08
	0x032579EC BL 0x1C16F10
	0x032579F0 MOV X1, X19
	0x032579F4 MOV X2, X31
	0x032579F8 MOV X20, X0
	0x032579FC BL 0x3252170
	0x03257A00 ADRP X0, 0xECC000
	0x03257A04 LDR X0, [X0 + 0x1D8]
	0x03257A08 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1186000
	006 Move X21, 0xE9D000
	007 Move W8, [X20+1279]
	008 Move X21, [X21+1560]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE9D000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1279], W8
	019 Move X0, [X21]
	020 Move W1, 8
	021 Call 0x1C17D6C
	022 Move [X19+24], X0
	023 Move X0, X31
	024 Call Utils.get_StaticRandomNumberGenerator
	025 Compare X0, 0
	026 JumpIfEqual {36}
	027 Move X8, [X0]
	028 Move X1, [X19+24]
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X3, [X8+408]
	032 Move X2, [X8+416]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 CallNoReturn X3
	036 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x03257A0C MOV X1, X0
	0x03257A10 MOV X0, X20
	0x03257A14 BL 0x1C16DEC
	0x03257A18 MOVZ W1, 0x1
	0x03257A1C B 0x3257A20
	0x03257A20 STP X30, X19, [X31 - 0x10]!
	0x03257A24 TBZ X1, 0x0, 0x3257AD4
	0x03257A28 MOV X19, X0
	0x03257A2C LDR X0, [X0 + 0x60]
	0x03257A30 CBZ X0, 0x3257A48
	0x03257A34 LDR W2, [X0 + 0x18]
	0x03257A38 MOV W1, W31
	0x03257A3C MOV X3, X31
	0x03257A40 BL 0x339FA34
	0x03257A44 STR X31, [X19 + 0x60]
	0x03257A48 LDR X0, [X19 + 0x68]
	0x03257A4C CBZ X0, 0x3257A64
	0x03257A50 LDR W2, [X0 + 0x18]
	0x03257A54 MOV W1, W31
	0x03257A58 MOV X3, X31
	0x03257A5C BL 0x339FA34
	0x03257A60 STR X31, [X19 + 0x68]
	0x03257A64 LDR X0, [X19 + 0x30]
	0x03257A68 CBZ X0, 0x3257A80
	0x03257A6C LDR W2, [X0 + 0x18]
	0x03257A70 MOV W1, W31
	0x03257A74 MOV X3, X31
	0x03257A78 BL 0x339FA34
	0x03257A7C STR X31, [X19 + 0x30]
	0x03257A80 LDR X0, [X19 + 0x38]
	0x03257A84 CBZ X0, 0x3257A9C
	0x03257A88 LDR W2, [X0 + 0x18]
	0x03257A8C MOV W1, W31
	0x03257A90 MOV X3, X31
	0x03257A94 BL 0x339FA34
	0x03257A98 STR X31, [X19 + 0x38]
	0x03257A9C LDR X0, [X19 + 0x70]
	0x03257AA0 CBZ X0, 0x3257AB8
	0x03257AA4 LDR W2, [X0 + 0x18]
	0x03257AA8 MOV W1, W31
	0x03257AAC MOV X3, X31
	0x03257AB0 BL 0x339FA34
	0x03257AB4 STR X31, [X19 + 0x70]
	0x03257AB8 LDR X0, [X19 + 0x78]
	0x03257ABC CBZ X0, 0x3257AD4
	0x03257AC0 LDR W2, [X0 + 0x18]
	0x03257AC4 MOV W1, W31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1186000
	006 Move X21, 0xECB000
	007 Move X19, 0xECB000
	008 Move W8, [X20+1280]
	009 Move X21, [X21+1312]
	010 Move X19, [X19+1320]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0xECB000
	016 Move X0, [X0+1312]
	017 Call 0x1C17CF4
	018 Move X0, 0xECB000
	019 Move X0, [X0+1320]
	020 Call 0x1C17CF4
	021 Move X0, 0xECD000
	022 Move X0, [X0+360]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+1280], W8
	026 Move X0, [X21]
	027 Move W1, 1
	028 Call 0x1C17D6C
	029 Move X8, [X19]
	030 Move X19, X0
	031 Move X0, X8
	032 Call 0x1C17F10
	033 Move W1, 40
	034 Move W2, 128
	035 Move W3, 8
	036 Move X4, X31
	037 Move X20, X0
	038 Call KeySizes..ctor, X0, X1, X2, X3
	039 Compare X19, 0
	040 JumpIfEqual {55}
	041 Move W8, [X19+24]
	042 Compare W8, 0
	043 JumpIfEqual {56}
	044 Move X8, 0xECD000
	045 Move X8, [X8+360]
	046 Move [X19+32], X20
	047 Move X8, [X8]
	048 Move X8, [X8+184]
	049 Move [X8], X19
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move X30, [X31+32]
	053 Move X21, [X31+40]
	054 Return 
	055 Call 0x1C17F20
	056 Call 0x1C17F28

