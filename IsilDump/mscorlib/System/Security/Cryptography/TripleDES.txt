Type: System.Security.Cryptography.TripleDES

Method: System.Void .ctor()

Disassembly:
	0x03262218 LDRB W8, [X20 + 0x558]
	0x0326221C LDR X21, [X21 + 0x618]
	0x03262220 MOV W19, W0
	0x03262224 TBNZ X8, 0x0, 0x326223C
	0x03262228 ADRP X0, 0xE91000
	0x0326222C LDR X0, [X0 + 0x618]
	0x03262230 BL 0x1C16CF4
	0x03262234 MOVZ W8, 0x1
	0x03262238 STRB W8, [X20 + 0x558]
	0x0326223C LDR X0, [X21]
	0x03262240 MOV W1, W19
	0x03262244 BL 0x1C16D6C
	0x03262248 MOV X19, X0
	0x0326224C BL 0x3262098
	0x03262250 CBZ X0, 0x3262274
	0x03262254 LDR X8, [X0]
	0x03262258 MOV X1, X19
	0x0326225C LDP X9, X2, [X8 + 0x198]
	0x03262260 BLR X9
	0x03262264 MOV X0, X19
	0x03262268 LDP X20, X19, [X31 + 0x10]
	0x0326226C LDP X30, X21, [X31], #0x20
	0x03262270 RET
	0x03262274 BL 0x1C16F20
	0x03262278 STR X30, [X31 - 0x10]!
	0x0326227C CBZ X0, 0x3262290
	0x03262280 LDR W2, [X0 + 0x10]
	0x03262284 MOV W1, W31
	0x03262288 LDR X30, [X31], #0x10
	0x0326228C B 0x3262294
	0x03262290 BL 0x1C16F20
	0x03262294 STP X30, X27, [X31 - 0x50]!
	0x03262298 STP X26, X25, [X31 + 0x10]
	0x0326229C STP X24, X23, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x117B000
	006 Move X20, 0xEC2000
	007 Move W8, [X21+1356]
	008 Move X20, [X20+240]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEC2000
	015 Move X0, [X0+240]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1356], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call Object..ctor, X0
	022 Move X8, -41365504
	023 Move V0, [X8+176]
	024 Move W8, 2
	025 NotImplemented "Instruction MOVI not yet implemented."
	026 Move [X19+64], W8
	027 Move [X19+56], D0
	028 Move [X19+16], D1
	029 Move X0, [X20]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {35}
	033 Call 0x1C17DFC
	034 Move X0, [X20]
	035 Move X8, [X0+184]
	036 Move V0, [X8]
	037 Move [X19+40], V0
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return 

Method: System.Byte[] get_Key()

Disassembly:
	0x032622A0 STP X22, X21, [X31 + 0x30]
	0x032622A4 STP X20, X19, [X31 + 0x40]
	0x032622A8 ADRP X22, 0x117A000
	0x032622AC LDRB W8, [X22 + 0x559]
	0x032622B0 MOV W19, W2
	0x032622B4 MOV W20, W1
	0x032622B8 MOV X21, X0
	0x032622BC TBNZ X8, 0x0, 0x32622E0
	0x032622C0 ADRP X0, 0xE9A000
	0x032622C4 LDR X0, [X0 + 0x8D8]
	0x032622C8 BL 0x1C16CF4
	0x032622CC ADRP X0, 0xE93000
	0x032622D0 LDR X0, [X0 + 0x170]
	0x032622D4 BL 0x1C16CF4
	0x032622D8 MOVZ W8, 0x1
	0x032622DC STRB W8, [X22 + 0x559]
	0x032622E0 ADRP X25, 0xE9A000
	0x032622E4 LDR X25, [X25 + 0x8D8]
	0x032622E8 CMP W19, 0x0
	0x032622EC B.LE 0x32623E0
	0x032622F0 CBZ X21, 0x3262414
	0x032622F4 ADRP X24, 0xE93000
	0x032622F8 LDR X24, [X24 + 0x170]
	0x032622FC MOV W26, W31
	0x03262300 MOV W27, W19
	0x03262304 MOV W22, W20
	0x03262308 MOV X0, X21
	0x0326230C MOV W1, W22
	0x03262310 MOV X2, X31
	0x03262314 BL 0x3222A1C
	0x03262318 LDR X8, [X24]
	0x0326231C MOV W23, W0
	0x03262320 LDR W9, [X8 + 0xE0]
	0x03262324 CBNZ W9, 0x3262330
	0x03262328 MOV X0, X8
	0x0326232C BL 0x1C16DFC
	0x03262330 MOV W0, W23
	0x03262334 MOV X1, X31
	0x03262338 BL 0x3317FCC
	0x0326233C AND W8, W0, 0x1
	0x03262340 SUBS W27, W27, 0x1
	0x03262344 ADD W26, W26, W8
	0x03262348 ADD W22, W22, 0x1
	0x0326234C B.NE 0x3262308
	0x03262350 LDR X0, [X25]
	0x03262354 SUB W1, W19, W26
	0x03262358 BL 0x1C16D6C
	0x0326235C CMP W19, 0x1
	0x03262360 MOV X22, X0
	0x03262364 B.LT 0x32623F0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x117B000
	006 Move W8, [X20+1357]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xE92000
	013 Move X0, [X0+1560]
	014 Call 0x1C17CF4
	015 Move X0, 0xEC2000
	016 Move X0, [X0+240]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1357], W8
	020 Move X0, [X19+32]
	021 Compare X0, 0
	022 JumpIfNotEqual {43}
	023 Move X21, 0xEC2000
	024 Move X21, [X21+240]
	025 Move X8, [X19]
	026 Move X0, X19
	027 Move X9, [X8+696]
	028 Move X1, [X8+704]
	029 NotImplemented "Instruction BLR not yet implemented."
	030 Move X0, [X21]
	031 Move X20, [X19+32]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X20
	037 Call TripleDES.IsWeakKey, X0
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {25}
	042 Move X0, [X19+32]
	043 Compare X0, 0
	044 JumpIfEqual {62}
	045 Move X1, X31
	046 Call Array.Clone, X0
	047 Compare X0, 0
	048 JumpIfEqual {57}
	049 Move X8, 0xE92000
	050 Move X8, [X8+1560]
	051 Move X19, X0
	052 Move X20, [X8]
	053 Move X1, X20
	054 Call 0x1C17E00
	055 Compare X0, 0
	056 JumpIfEqual {63}
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X30, [X31+32]
	060 Move X21, [X31+40]
	061 Return X0
	062 Call 0x1C17F20
	063 Move X0, X19
	064 Move X1, X20
	065 Call 0x1C181E0

Method: System.Void set_Key(System.Byte[] value)

Disassembly:
	0x0326249C LDR X0, [X0 + 0x618]
	0x032624A0 BL 0x1C16CF4
	0x032624A4 MOVZ W8, 0x1
	0x032624A8 STRB W8, [X19 + 0x55A]
	0x032624AC LDR X0, [X22]
	0x032624B0 MOVZ W1, 0x8
	0x032624B4 BL 0x1C16D6C
	0x032624B8 CBZ W20, 0x326256C
	0x032624BC CMP W20, 0x0
	0x032624C0 B.LE 0x3262578
	0x032624C4 MOV X19, X0
	0x032624C8 CBZ X0, 0x3262594
	0x032624CC MOV W21, W31
	0x032624D0 LDR W8, [X19 + 0x18]
	0x032624D4 CMP W21, W8
	0x032624D8 B.CS 0x3262590
	0x032624DC ADD X8, X19, W21, SXTW
	0x032624E0 AND W9, W20, 0xFFFFFF00
	0x032624E4 ANDS W10, W20, 0xFFFFFF00
	0x032624E8 STRB W20, [X8 + 0x20]
	0x032624EC ORR W8, W9, 0xFF
	0x032624F0 CSEL W8, W8, W9, LT
	0x032624F4 CMP W10, 0xFF
	0x032624F8 SBFM W20, W8, 0x8, 0x1F
	0x032624FC ADD W21, W21, 0x1
	0x03262500 B.GT 0x32624D0
	0x03262504 LDR X0, [X22]
	0x03262508 MOV W1, W21
	0x0326250C BL 0x1C16D6C
	0x03262510 SUBS W8, W21, 0x1
	0x03262514 B.LT 0x326255C
	0x03262518 MOV X9, X31
	0x0326251C ADD X10, X0, 0x20
	0x03262520 MOV W11, W21
	0x03262524 LDR W12, [X19 + 0x18]
	0x03262528 CMP W8, W12
	0x0326252C B.CS 0x3262590
	0x03262530 CBZ X0, 0x3262594
	0x03262534 LDR W12, [X0 + 0x18]
	0x03262538 CMP X9, X12
	0x0326253C B.CS 0x3262590
	0x03262540 ADD X12, X19, W8, SXTW
	0x03262544 LDRB W12, [X12 + 0x20]
	0x03262548 SUB W8, W8, 0x1
	0x0326254C STRB W12, [X10, X9, LSL]
	0x03262550 ADD X9, X9, 0x1
	0x03262554 CMP X11, X9
	0x03262558 B.NE 0x3262524
	0x0326255C LDP X20, X19, [X31 + 0x20]
	0x03262560 LDP X22, X21, [X31 + 0x10]
	0x03262564 LDR X30, [X31], #0x30
	0x03262568 RET
	0x0326256C LDR X0, [X22]
	0x03262570 MOVZ W1, 0x1
	0x03262574 B 0x3262580
	0x03262578 LDR X0, [X22]
	0x0326257C MOV W1, W31
	0x03262580 LDP X20, X19, [X31 + 0x20]
	0x03262584 LDP X22, X21, [X31 + 0x10]
	0x03262588 LDR X30, [X31], #0x30
	0x0326258C B 0x1C16D6C
	0x03262590 BL 0x1C16F28
	0x03262594 BL 0x1C16F20
	0x03262598 CMP W1, 0x1
	0x0326259C B.LT 0x32625E4
	0x032625A0 MOV W9, W1
	0x032625A4 MOV X8, X31
	0x032625A8 UBFM X9, X9, 0x3E, 0x3D
	0x032625AC ADD W11, W8, 0x1
	0x032625B0 LDRB W10, [X2, W8, SXTW]
	0x032625B4 ADD W12, W8, 0x2
	0x032625B8 LDRB W11, [X2, W11, SXTW]
	0x032625BC ADD W13, W8, 0x3
	0x032625C0 LDRB W12, [X2, W12, SXTW]
	0x032625C4 LDRB W13, [X2, W13, SXTW]
	0x032625C8 BFM W10, W11, 0x18, 0x7
	0x032625CC BFM W10, W12, 0x10, 0x7
	0x032625D0 BFM W10, W13, 0x8, 0x7
	0x032625D4 STR W10, [X0, X8, LSL]
	0x032625D8 ADD X8, X8, 0x4
	0x032625DC CMP X9, X8
	0x032625E0 B.NE 0x32625AC
	0x032625E4 RET
	0x032625E8 STR X30, [X31 - 0x10]!
	0x032625EC CMP W2, 0x1
	0x032625F0 B.LT 0x32626CC
	0x032625F4 CBZ X1, 0x32626D8
	0x032625F8 MOV X8, X31
	0x032625FC MOV W11, W31
	0x03262600 MOV W9, W2
	0x03262604 ADD X10, X1, 0x20
	0x03262608 LDR W12, [X1 + 0x18]
	0x0326260C CMP X8, X12
	0x03262610 B.CS 0x32626D4
	0x03262614 CBZ X0, 0x32626D8
	0x03262618 LDR W12, [X0 + 0x18]
	0x0326261C CMP W11, W12
	0x03262620 B.CS 0x32626D4
	0x03262624 LDR W12, [X10, X8, LSL #2]
	0x03262628 ADD X13, X0, W11, SXTW
	0x0326262C STRB W12, [X13 + 0x20]
	0x03262630 LDR W12, [X1 + 0x18]
	0x03262634 CMP X8, X12
	0x03262638 B.CS 0x32626D4
	0x0326263C LDR W13, [X0 + 0x18]
	0x03262640 ADD W12, W11, 0x1
	0x03262644 CMP W12, W13
	0x03262648 B.CS 0x32626D4
	0x0326264C LDR W13, [X10, X8, LSL #2]
	0x03262650 ADD X14, X0, W12, SXTW
	0x03262654 UBFM W13, W13, 0x8, 0x1F
	0x03262658 STRB W13, [X14 + 0x20]
	0x0326265C LDR W13, [X1 + 0x18]
	0x03262660 CMP X8, X13
	0x03262664 B.CS 0x32626D4
	0x03262668 LDR W13, [X0 + 0x18]
	0x0326266C ADD W12, W12, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x117B000
	008 Move W8, [X21+1358]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xE92000
	016 Move X0, [X0+1560]
	017 Call 0x1C17CF4
	018 Move X0, 0xEC2000
	019 Move X0, [X0+240]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+1358], W8
	023 Compare X19, 0
	024 JumpIfEqual {84}
	025 Move W8, [X19+24]
	026 Move X0, X20
	027 Move W1, W8
	028 ShiftRight W1, 29
	029 And W1, W1, 0xFFFFFFF
	030 Call SymmetricAlgorithm.ValidKeySize, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {102}
	035 Move X8, 0xEC2000
	036 Move X8, [X8+240]
	037 Move X0, [X8]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X19
	043 Call TripleDES.IsWeakKey, X0
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfEqual {116}
	048 Move X0, X19
	049 Move X1, X31
	050 Call Array.Clone, X0
	051 Compare X0, 0
	052 JumpIfEqual {71}
	053 Move X23, 0xE92000
	054 Move X23, [X23+1560]
	055 Move X21, X0
	056 Move X22, [X23]
	057 Move X1, X22
	058 Call 0x1C17E00
	059 Compare X0, 0
	060 JumpIfEqual {68}
	061 Move [X20+32], X0
	062 Move X22, [X23]
	063 Move X0, X21
	064 Move X1, X22
	065 Call 0x1C17E00
	066 Compare X0, 0
	067 JumpIfNotEqual {72}
	068 Move X0, X21
	069 Move X1, X22
	070 Call 0x1C181E0
	071 Move [X20+32], X31
	072 Move W8, [X19+24]
	073 Move X22, [X31+16]
	074 Move X21, [X31+24]
	075 Move W8, W8
	076 ShiftRight W8, 29
	077 And W8, W8, 0xFFFFFFF
	078 Move [X20+56], W8
	079 Move X20, [X31+32]
	080 Move X19, [X31+40]
	081 Move X30, [X31+48]
	082 Move X23, [X31+56]
	083 Return 
	084 Move X0, 0xE97000
	085 Move X0, [X0+1320]
	086 Call 0x1C17D08
	087 Call 0x1C17F10
	088 Move X19, X0
	089 Move X0, 0xE9C000
	090 Move X0, [X0+3784]
	091 Call 0x1C17D08
	092 Move X1, X0
	093 Move X0, X19
	094 Move X2, X31
	095 Call ArgumentNullException..ctor, X0, X1
	096 Move X0, 0xEC2000
	097 Move X0, [X0+992]
	098 Call 0x1C17D08
	099 Move X1, X0
	100 Move X0, X19
	101 Call 0x1C17DEC
	102 Move X0, 0xEC1000
	103 Move X0, [X0+3848]
	104 Call 0x1C17D08
	105 Move X1, X31
	106 Call Environment.GetResourceString, X0
	107 Move X19, X0
	108 Move X0, 0xEBF000
	109 Move X0, [X0+3296]
	110 Call 0x1C17D08
	111 Call 0x1C17F10
	112 Move X1, X19
	113 Move X2, X31
	114 Move X20, X0
	115 Call CryptographicException..ctor, X0, X1
	116 Move X0, 0xEC1000
	117 Move X0, [X0+3920]
	118 Call 0x1C17D08
	119 Move X1, X31
	120 Call Environment.GetResourceString, X0
	121 Move X19, X0
	122 Move X0, 0xEBF000
	123 Move X0, [X0+3296]
	124 Call 0x1C17D08
	125 Call 0x1C17F10
	126 Move X20, X0
	127 Move X0, 0xEBF000
	128 Move X0, [X0+3776]
	129 Call 0x1C17D08
	130 Move X2, X0
	131 Move X0, X20
	132 Move X1, X19
	133 Move X3, X31
	134 Call CryptographicException..ctor, X0, X1, X2
	135 Move X0, 0xEC2000
	136 Move X0, [X0+992]
	137 Call 0x1C17D08
	138 Move X1, X0
	139 Move X0, X20
	140 Call 0x1C17DEC

Method: System.Security.Cryptography.TripleDES Create()

Disassembly:
	0x03262670 CMP W12, W13
	0x03262674 B.CS 0x32626D4
	0x03262678 ADD X13, X10, X8, 0x2, LSL
	0x0326267C LDRH W13, [X13 + 0x2]
	0x03262680 ADD W14, W11, 0x2
	0x03262684 ADD X14, X0, W14, SXTW
	0x03262688 STRB W13, [X14 + 0x20]
	0x0326268C LDR W13, [X1 + 0x18]
	0x03262690 CMP X8, X13
	0x03262694 B.CS 0x32626D4
	0x03262698 LDR W13, [X0 + 0x18]
	0x0326269C ADD W12, W12, 0x1
	0x032626A0 CMP W12, W13
	0x032626A4 B.CS 0x32626D4
	0x032626A8 ADD X13, X10, X8, 0x2, LSL
	0x032626AC LDRB W13, [X13 + 0x3]
	0x032626B0 ADD W11, W11, 0x3
	0x032626B4 ADD X8, X8, 0x1
	0x032626B8 ADD X11, X0, W11, SXTW
	0x032626BC CMP X9, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x117B000
	005 Move X20, 0xEC2000
	006 Move W8, [X19+1359]
	007 Move X20, [X20+1000]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xEC2000
	013 Move X0, [X0+1000]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1359], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move X19, X0
	020 Call TripleDESCryptoServiceProvider..ctor, X0
	021 Move X0, X19
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Return X0

Method: System.Boolean IsWeakKey(System.Byte[] rgbKey)

Disassembly:
	0x03262368 MOV W25, W31
	0x0326236C MOV X0, X21
	0x03262370 MOV W1, W20
	0x03262374 MOV X2, X31
	0x03262378 BL 0x3222A1C
	0x0326237C LDR X8, [X24]
	0x03262380 MOV W23, W0
	0x03262384 LDR W9, [X8 + 0xE0]
	0x03262388 CBNZ W9, 0x3262394
	0x0326238C MOV X0, X8
	0x03262390 BL 0x1C16DFC
	0x03262394 MOV W0, W23
	0x03262398 MOV X1, X31
	0x0326239C BL 0x3317FCC
	0x032623A0 TBNZ X0, 0x0, 0x32623D0
	0x032623A4 MOV X0, X21
	0x032623A8 MOV W1, W20
	0x032623AC MOV X2, X31
	0x032623B0 BL 0x3222A1C
	0x032623B4 CBZ X22, 0x3262414
	0x032623B8 LDR W8, [X22 + 0x18]
	0x032623BC CMP W25, W8
	0x032623C0 B.CS 0x3262418
	0x032623C4 ADD X8, X22, W25, 0x1, SXTW
	0x032623C8 ADD W25, W25, 0x1
	0x032623CC STRH W0, [X8 + 0x20]
	0x032623D0 SUBS W19, W19, 0x1
	0x032623D4 ADD W20, W20, 0x1
	0x032623D8 B.NE 0x326236C
	0x032623DC B 0x32623F0
	0x032623E0 LDR X0, [X25]
	0x032623E4 MOV W1, W19
	0x032623E8 BL 0x1C16D6C
	0x032623EC MOV X22, X0
	0x032623F0 MOV X1, X22
	0x032623F4 LDP X20, X19, [X31 + 0x40]
	0x032623F8 LDP X22, X21, [X31 + 0x30]
	0x032623FC LDP X24, X23, [X31 + 0x20]
	0x03262400 LDP X26, X25, [X31 + 0x10]
	0x03262404 MOV X0, X31
	0x03262408 MOV X2, X31
	0x0326240C LDP X30, X27, [X31], #0x50
	0x03262410 B 0x32256D4
	0x03262414 BL 0x1C16F20
	0x03262418 BL 0x1C16F28
	0x0326241C STR X30, [X31 - 0x10]!
	0x03262420 CBZ X0, 0x3262470
	0x03262424 LDR W8, [X0 + 0x18]
	0x03262428 UBFM X9, X8, 0x20, 0x1F
	0x0326242C CMP X9, 0x1
	0x03262430 B.LT 0x3262460
	0x03262434 MOV W11, W31
	0x03262438 SXTW X9, W8
	0x0326243C ADD X10, X0, 0x20
	0x03262440 CBZ X8, 0x326246C
	0x03262444 LDRB W0, [X10], #0x1
	0x03262448 SUB X9, X9, 0x1
	0x0326244C SUB X8, X8, 0x1
	0x03262450 BFM W0, W11, 0x18, 0x17
	0x03262454 MOV W11, W0
	0x03262458 CBNZ X9, 0x3262440
	0x0326245C B 0x3262464
	0x03262460 MOV W0, W31
	0x03262464 LDR X30, [X31], #0x10
	0x03262468 RET
	0x0326246C BL 0x1C16F28
	0x03262470 BL 0x1C16F20
	0x03262474 STR X30, [X31 - 0x30]!
	0x03262478 STP X22, X21, [X31 + 0x10]
	0x0326247C STP X20, X19, [X31 + 0x20]
	0x03262480 ADRP X19, 0x117A000
	0x03262484 ADRP X22, 0xE91000
	0x03262488 LDRB W8, [X19 + 0x55A]
	0x0326248C LDR X22, [X22 + 0x618]
	0x03262490 MOV W20, W0
	0x03262494 TBNZ X8, 0x0, 0x32624AC
	0x03262498 ADRP X0, 0xE91000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x117B000
	006 Move X20, 0xEC2000
	007 Move W8, [X21+1360]
	008 Move X20, [X20+240]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEC2000
	015 Move X0, [X0+240]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1360], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Compare X19, 0
	025 JumpIfEqual {72}
	026 Move W8, [X19+24]
	027 Or W8, W8, 8
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X0, X19
	030 Call Utils.FixupKeyParity, X0
	031 Move X8, [X20]
	032 Move X19, X0
	033 Move W9, [X8+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Move W2, 8
	039 Move W3, 8
	040 Move X0, X19
	041 Move W1, W31
	042 Call TripleDES.EqualBytes, X0, X1, X2, X3
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {48}
	047 Move W0, 1
	048 Compare X19, 0
	049 JumpIfEqual {92}
	050 Move W8, [X19+24]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X0, [X20]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move W1, 8
	058 Move W2, 16
	059 Move W3, 8
	060 Move X0, X19
	061 Call TripleDES.EqualBytes, X0, X1, X2, X3
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfEqual {47}
	066 Move W0, W31
	067 Move X20, [X31+16]
	068 Move X19, [X31+24]
	069 Move X30, [X31+32]
	070 Move X21, [X31+40]
	071 Return X0
	072 Move X0, 0xEC1000
	073 Move X0, [X0+3848]
	074 Call 0x1C17D08
	075 Move X1, X31
	076 Call Environment.GetResourceString, X0
	077 Move X19, X0
	078 Move X0, 0xEBF000
	079 Move X0, [X0+3296]
	080 Call 0x1C17D08
	081 Call 0x1C17F10
	082 Move X1, X19
	083 Move X2, X31
	084 Move X20, X0
	085 Call CryptographicException..ctor, X0, X1
	086 Move X0, 0xEC2000
	087 Move X0, [X0+984]
	088 Call 0x1C17D08
	089 Move X1, X0
	090 Move X0, X20
	091 Call 0x1C17DEC
	092 Call 0x1C17F20

Method: System.Boolean EqualBytes(System.Byte[] rgbKey, System.Int32 start1, System.Int32 start2, System.Int32 count)

Disassembly:
	0x0326280C ADD W11, W12, 0x1
	0x03262810 B.NE 0x3262750
	0x03262814 LDR X30, [X31], #0x10
	0x03262818 RET
	0x0326281C BL 0x1C16F28
	0x03262820 BL 0x1C16F20
	0x03262824 MOV W0, W31
	0x03262828 RET
	0x0326282C SUB X31, X31, 0x50
	0x03262830 STP X30, X25, [X31 + 0x10]
	0x03262834 STP X24, X23, [X31 + 0x20]
	0x03262838 STP X22, X21, [X31 + 0x30]
	0x0326283C STP X20, X19, [X31 + 0x40]
	0x03262840 ADRP X21, 0x117A000
	0x03262844 LDRB W8, [X21 + 0x55D]
	0x03262848 MOV X19, X1
	0x0326284C MOV X20, X0
	0x03262850 TBNZ X8, 0x0, 0x3262F04
	0x03262854 ADRP X0, 0xEC1000
	0x03262858 LDR X0, [X0 + 0x438]
	0x0326285C BL 0x1C16CF4
	0x03262860 ADRP X0, 0xEBE000
	0x03262864 LDR X0, [X0 + 0xBD8]
	0x03262868 BL 0x1C16CF4
	0x0326286C ADRP X0, 0xEC0000
	0x03262870 LDR X0, [X0 + 0xF60]
	0x03262874 BL 0x1C16CF4
	0x03262878 ADRP X0, 0xEBE000
	0x0326287C LDR X0, [X0 + 0xF40]
	0x03262880 BL 0x1C16CF4
	0x03262884 ADRP X0, 0xEBF000
	0x03262888 LDR X0, [X0 + 0x138]
	0x0326288C BL 0x1C16CF4
	0x03262890 ADRP X0, 0xEC1000
	0x03262894 LDR X0, [X0 + 0x440]
	0x03262898 BL 0x1C16CF4
	0x0326289C ADRP X0, 0xEC1000
	0x032628A0 LDR X0, [X0 + 0x448]
	0x032628A4 BL 0x1C16CF4
	0x032628A8 ADRP X0, 0xEC1000
	0x032628AC LDR X0, [X0 + 0x450]
	0x032628B0 BL 0x1C16CF4
	0x032628B4 ADRP X0, 0xEBF000
	0x032628B8 LDR X0, [X0 + 0x370]
	0x032628BC BL 0x1C16CF4
	0x032628C0 ADRP X0, 0xEC1000
	0x032628C4 LDR X0, [X0 + 0x458]
	0x032628C8 BL 0x1C16CF4
	0x032628CC ADRP X0, 0xEBE000
	0x032628D0 LDR X0, [X0 + 0xDF0]
	0x032628D4 BL 0x1C16CF4
	0x032628D8 ADRP X0, 0xE9E000
	0x032628DC LDR X0, [X0 + 0xDF8]
	0x032628E0 BL 0x1C16CF4
	0x032628E4 ADRP X0, 0xEC1000
	0x032628E8 LDR X0, [X0 + 0x460]
	0x032628EC BL 0x1C16CF4
	0x032628F0 ADRP X0, 0xEC1000
	0x032628F4 LDR X0, [X0 + 0x468]
	0x032628F8 BL 0x1C16CF4
	0x032628FC ADRP X0, 0xEC1000
	0x03262900 LDR X0, [X0 + 0x470]
	0x03262904 BL 0x1C16CF4
	0x03262908 ADRP X0, 0xEC1000
	0x0326290C LDR X0, [X0 + 0x90]
	0x03262910 BL 0x1C16CF4
	0x03262914 ADRP X0, 0xEC1000
	0x03262918 LDR X0, [X0 + 0x168]
	0x0326291C BL 0x1C16CF4
	0x03262920 ADRP X0, 0xEC1000
	0x03262924 LDR X0, [X0 + 0x98]
	0x03262928 BL 0x1C16CF4
	0x0326292C ADRP X0, 0xEC1000
	0x03262930 LDR X0, [X0 + 0x140]
	0x03262934 BL 0x1C16CF4
	0x03262938 ADRP X0, 0xEBF000
	0x0326293C LDR X0, [X0 + 0x1A0]
	0x03262940 BL 0x1C16CF4
	0x03262944 ADRP X0, 0xEC1000
	0x03262948 LDR X0, [X0 + 0x478]
	0x0326294C BL 0x1C16CF4
	0x03262950 ADRP X0, 0xEC1000
	0x03262954 LDR X0, [X0 + 0x480]
	0x03262958 BL 0x1C16CF4
	0x0326295C ADRP X0, 0xEC1000
	0x03262960 LDR X0, [X0 + 0x488]
	0x03262964 BL 0x1C16CF4
	0x03262968 ADRP X0, 0xEC1000
	0x0326296C LDR X0, [X0 + 0x490]
	0x03262970 BL 0x1C16CF4
	0x03262974 ADRP X0, 0xEBF000
	0x03262978 LDR X0, [X0 + 0x150]
	0x0326297C BL 0x1C16CF4
	0x03262980 ADRP X0, 0xEC1000
	0x03262984 LDR X0, [X0 + 0x498]
	0x03262988 BL 0x1C16CF4
	0x0326298C ADRP X0, 0xEC1000
	0x03262990 LDR X0, [X0 + 0x4A0]
	0x03262994 BL 0x1C16CF4
	0x03262998 ADRP X0, 0xEC1000
	0x0326299C LDR X0, [X0 + 0x320]
	0x032629A0 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move TEMP, X1
	005 And TEMP, TEMP, -2147483648
	006 Compare TEMP, -2147483648
	007 JumpIfEqual {63}
	008 Move TEMP, X2
	009 And TEMP, TEMP, -2147483648
	010 Compare TEMP, -2147483648
	011 JumpIfEqual {76}
	012 Compare X0, 0
	013 JumpIfEqual {101}
	014 Move W13, [X0+24]
	015 Add W8, W3, W1
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Add W8, W3, W2
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Subtract W12, W13, W1
	021 NotImplemented "Instruction CSEL not yet implemented."
	022 Subtract W13, W13, W2
	023 Move X8, X31
	024 Move W9, W3
	025 Move W10, W1
	026 Move W11, W2
	027 NotImplemented "Instruction CSEL not yet implemented."
	028 Move W14, 1
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Add W15, W11, W8
	032 Add W16, W10, W8
	033 Add X17, X0, 32
	034 Move W16, [X17]
	035 Move W15, [X17]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Add X8, X8, 1
	038 NotImplemented "Instruction CMP not yet implemented."
	039 NotImplemented "Instruction CSET not yet implemented."
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move W14, W31
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 NotImplemented "Instruction ORN not yet implemented."
	045 And W0, W8, 1
	046 Move X30, [X31+32]
	047 Return X0
	048 Call 0x1C17F28
	049 Move X0, 0xEC2000
	050 Move X0, [X0+480]
	051 Call 0x1C17D08
	052 Move X1, X31
	053 Call Environment.GetResourceString, X0
	054 Move X19, X0
	055 Move X0, 0xE9A000
	056 Move X0, [X0+1400]
	057 Call 0x1C17D08
	058 Call 0x1C17F10
	059 Move X1, X19
	060 Move X2, X31
	061 Move X20, X0
	062 Call ArgumentException..ctor, X0, X1
	063 Move X0, 0xEBA000
	064 Move X0, [X0+1648]
	065 Call 0x1C17D08
	066 Move X1, X31
	067 Call Environment.GetResourceString, X0
	068 Move X19, X0
	069 Move X0, 0xE9A000
	070 Move X0, [X0+1888]
	071 Call 0x1C17D08
	072 Call 0x1C17F10
	073 Move X20, X0
	074 Move X0, 0xEC2000
	075 Move X0, [X0+1008]
	076 Move X0, 0xEBA000
	077 Move X0, [X0+1648]
	078 Call 0x1C17D08
	079 Move X1, X31
	080 Call Environment.GetResourceString, X0
	081 Move X19, X0
	082 Move X0, 0xE9A000
	083 Move X0, [X0+1888]
	084 Call 0x1C17D08
	085 Call 0x1C17F10
	086 Move X20, X0
	087 Move X0, 0xEC2000
	088 Move X0, [X0+1016]
	089 Call 0x1C17D08
	090 Move X1, X0
	091 Move X0, X20
	092 Move X2, X19
	093 Move X3, X31
	094 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	095 Move X0, 0xEC2000
	096 Move X0, [X0+1024]
	097 Call 0x1C17D08
	098 Move X1, X0
	099 Move X0, X20
	100 Call 0x1C17DEC
	101 Call 0x1C17F20

Method: System.Boolean IsLegalKeySize(System.Byte[] rgbKey)

Disassembly:
	0x03262720 ADD X8, X8, 0x4
	0x03262724 CMP X9, X8
	0x03262728 B.NE 0x32626F0
	0x0326272C RET
	0x03262730 STR X30, [X31 - 0x10]!
	0x03262734 CMP W2, 0x1
	0x03262738 B.LT 0x3262814
	0x0326273C CBZ X1, 0x3262820
	0x03262740 MOV X8, X31

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {8}
	003 Move W8, [X0+24]
	004 Or W8, W8, 8
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move W0, 1
	007 Return X0
	008 Move W0, W31
	009 Return X0

Method: System.Void .cctor()

Disassembly:
	0x032629A4 ADRP X0, 0xEC1000
	0x032629A8 LDR X0, [X0 + 0xB0]
	0x032629AC BL 0x1C16CF4
	0x032629B0 ADRP X0, 0xEC1000
	0x032629B4 LDR X0, [X0 + 0xC0]
	0x032629B8 BL 0x1C16CF4
	0x032629BC ADRP X0, 0xEC1000
	0x032629C0 LDR X0, [X0 + 0xD0]
	0x032629C4 BL 0x1C16CF4
	0x032629C8 ADRP X0, 0xEC1000
	0x032629CC LDR X0, [X0 + 0xE0]
	0x032629D0 BL 0x1C16CF4
	0x032629D4 ADRP X0, 0xEC1000
	0x032629D8 LDR X0, [X0 + 0x3E8]
	0x032629DC BL 0x1C16CF4
	0x032629E0 ADRP X0, 0xEBA000
	0x032629E4 LDR X0, [X0 + 0x1B0]
	0x032629E8 BL 0x1C16CF4
	0x032629EC ADRP X0, 0xE91000
	0x032629F0 LDR X0, [X0 + 0x6C0]
	0x032629F4 BL 0x1C16CF4
	0x032629F8 ADRP X0, 0xEC1000
	0x032629FC LDR X0, [X0 + 0x4A8]
	0x03262A00 BL 0x1C16CF4
	0x03262A04 ADRP X0, 0xEC1000
	0x03262A08 LDR X0, [X0 + 0x4B0]
	0x03262A0C BL 0x1C16CF4
	0x03262A10 ADRP X0, 0xEC1000
	0x03262A14 LDR X0, [X0 + 0x4B8]
	0x03262A18 BL 0x1C16CF4
	0x03262A1C ADRP X0, 0xEC1000
	0x03262A20 LDR X0, [X0 + 0x4C0]
	0x03262A24 BL 0x1C16CF4
	0x03262A28 ADRP X0, 0xEC1000
	0x03262A2C LDR X0, [X0 + 0x4C8]
	0x03262A30 BL 0x1C16CF4
	0x03262A34 ADRP X0, 0xEC1000
	0x03262A38 LDR X0, [X0 + 0x4D0]
	0x03262A3C BL 0x1C16CF4
	0x03262A40 ADRP X0, 0xEC1000
	0x03262A44 LDR X0, [X0 + 0x4D8]
	0x03262A48 BL 0x1C16CF4
	0x03262A4C ADRP X0, 0xEC1000
	0x03262A50 LDR X0, [X0 + 0x4E0]
	0x03262A54 BL 0x1C16CF4
	0x03262A58 ADRP X0, 0xEC1000
	0x03262A5C LDR X0, [X0 + 0x4E8]
	0x03262A60 BL 0x1C16CF4
	0x03262A64 ADRP X0, 0xEC1000
	0x03262A68 LDR X0, [X0 + 0x4F0]
	0x03262A6C BL 0x1C16CF4
	0x03262A70 ADRP X0, 0xEC1000
	0x03262A74 LDR X0, [X0 + 0x4F8]
	0x03262A78 BL 0x1C16CF4
	0x03262A7C ADRP X0, 0xEC1000
	0x03262A80 LDR X0, [X0 + 0x500]
	0x03262A84 BL 0x1C16CF4
	0x03262A88 ADRP X0, 0xEC1000
	0x03262A8C LDR X0, [X0 + 0x508]
	0x03262A90 BL 0x1C16CF4
	0x03262A94 ADRP X0, 0xEC1000
	0x03262A98 LDR X0, [X0 + 0x510]
	0x03262A9C BL 0x1C16CF4
	0x03262AA0 ADRP X0, 0xEC1000
	0x03262AA4 LDR X0, [X0 + 0x518]
	0x03262AA8 BL 0x1C16CF4
	0x03262AAC ADRP X0, 0xEC1000
	0x03262AB0 LDR X0, [X0 + 0x520]
	0x03262AB4 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, 0x117B000
	008 Move X22, 0xEC0000
	009 Move X21, 0xEC0000
	010 Move W8, [X19+1361]
	011 Move X22, [X22+1312]
	012 Move X21, [X21+1320]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0xEC0000
	018 Move X0, [X0+1312]
	019 Call 0x1C17CF4
	020 Move X0, 0xEC0000
	021 Move X0, [X0+1320]
	022 Call 0x1C17CF4
	023 Move X0, 0xEC2000
	024 Move X0, [X0+240]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X19+1361], W8
	028 Move X0, [X22]
	029 Move W1, 1
	030 Call 0x1C17D6C
	031 Move X8, [X21]
	032 Move X19, X0
	033 Move X0, X8
	034 Call 0x1C17F10
	035 Move W1, 64
	036 Move W2, 64
	037 Move W3, W31
	038 Move X4, X31
	039 Move X20, X0
	040 Call KeySizes..ctor, X0, X1, X2, X3
	041 Compare X19, 0
	042 JumpIfEqual {81}
	043 Move W8, [X19+24]
	044 Compare W8, 0
	045 JumpIfEqual {82}
	046 Move X23, 0xEC2000
	047 Move X23, [X23+240]
	048 Move [X19+32], X20
	049 Move W1, 1
	050 Move X8, [X23]
	051 Move X8, [X8+184]
	052 Move [X8], X19
	053 Move X0, [X22]
	054 Call 0x1C17D6C
	055 Move X8, [X21]
	056 Move X19, X0
	057 Move X0, X8
	058 Call 0x1C17F10
	059 Move W1, 128
	060 Move W2, 192
	061 Move W3, 64
	062 Move X4, X31
	063 Move X20, X0
	064 Call KeySizes..ctor, X0, X1, X2, X3
	065 Compare X19, 0
	066 JumpIfEqual {81}
	067 Move W8, [X19+24]
	068 Compare W8, 0
	069 JumpIfEqual {82}
	070 Move [X19+32], X20
	071 Move X8, [X23]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X8, [X8+184]
	075 Move [X8+8], X19
	076 Move X20, [X31+32]
	077 Move X19, [X31+40]
	078 Move X30, [X31+48]
	079 Move X23, [X31+56]
	080 Return 
	081 Call 0x1C17F20
	082 Call 0x1C17F28

