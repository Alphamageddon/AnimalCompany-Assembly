Type: System.Security.Cryptography.KeySizes

Method: System.Int32 get_MinSize()

Disassembly:
	0x03253218 ADRP X20, 0x1189000
	0x0325321C ADRP X21, 0xEA0000

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Int32 get_MaxSize()

Disassembly:
	0x03253220 LDRB W8, [X20 + 0x4D0]
	0x03253224 LDR X21, [X21 + 0x618]

ISIL:
	001 Move W0, [X0+20]
	002 Return X0

Method: System.Int32 get_SkipSize()

Disassembly:
	0x03253228 MOV X19, X0
	0x0325322C TBNZ X8, 0x0, 0x3253250

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Void .ctor(System.Int32 minSize, System.Int32 maxSize, System.Int32 skipSize)

Disassembly:
	0x03252FDC ADRP X0, 0xED0000
	0x03252FE0 LDR X0, [X0 + 0xF78]
	0x03252FE4 BL 0x1C16CF4
	0x03252FE8 ADRP X0, 0xECF000
	0x03252FEC LDR X0, [X0 + 0x320]
	0x03252FF0 BL 0x1C16CF4
	0x03252FF4 MOVZ W8, 0x1
	0x03252FF8 STRB W8, [X23 + 0x4CE]
	0x03252FFC LDR X0, [X22]
	0x03253000 LDR W8, [X0 + 0xE0]
	0x03253004 CBNZ W8, 0x325300C
	0x03253008 BL 0x1C16DFC
	0x0325300C MOV X0, X20
	0x03253010 BL 0x32527AC
	0x03253014 TBNZ X0, 0x0, 0x3253074

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W21, W1
	007 Move X1, X31
	008 Move W19, W3
	009 Move W20, W2
	010 Move X22, X0
	011 Call Object..ctor, X0
	012 Move [X22+16], W21
	013 Move [X22+20], W20
	014 Move [X22+24], W19
	015 Move X20, [X31+32]
	016 Move X19, [X31+40]
	017 Move X22, [X31+16]
	018 Move X21, [X31+24]
	019 Move X30, [X31+48]
	020 Return 

Method: System.Boolean IsLegal(System.Int32 keySize)

Disassembly:
	0x03253230 ADRP X0, 0xEA0000
	0x03253234 LDR X0, [X0 + 0x618]
	0x03253238 BL 0x1C16CF4
	0x0325323C ADRP X0, 0xECE000
	0x03253240 LDR X0, [X0 + 0x320]
	0x03253244 BL 0x1C16CF4
	0x03253248 MOVZ W8, 0x1
	0x0325324C STRB W8, [X20 + 0x4D0]
	0x03253250 LDR X0, [X21]
	0x03253254 MOVZ W1, 0x8
	0x03253258 BL 0x1C16D6C
	0x0325325C STR X0, [X19 + 0x20]
	0x03253260 MOV X0, X31
	0x03253264 BL 0x3262098
	0x03253268 CBZ X0, 0x32532EC
	0x0325326C LDR X8, [X0]
	0x03253270 ADRP X21, 0xECE000
	0x03253274 LDR X1, [X19 + 0x20]
	0x03253278 LDP X9, X2, [X8 + 0x198]

ISIL:
	001 Move W8, [X0+16]
	002 Subtract W8, W1, W8
	003 Move W10, [X0+20]
	004 Move W9, [X0+24]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 NotImplemented "Instruction CSET not yet implemented."
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 And W0, W12, W11
	010 Compare W9, 0
	011 JumpIfEqual {17}
	012 NotImplemented "Instruction CMP not yet implemented."
	013 NotImplemented "Instruction SDIV not yet implemented."
	014 NotImplemented "Instruction MSUB not yet implemented."
	015 NotImplemented "Instruction CMP not yet implemented."
	016 NotImplemented "Instruction CSET not yet implemented."
	017 Return X0
	018 Move W0, W31
	019 Return X0

Method: System.Boolean IsLegalKeySize(System.Security.Cryptography.KeySizes[] legalKeys, System.Int32 size)

Disassembly:
	0x0325327C LDR X21, [X21 + 0x320]
	0x03253280 BLR X9
	0x03253284 LDR X0, [X21]
	0x03253288 LDR X20, [X19 + 0x20]
	0x0325328C LDR W8, [X0 + 0xE0]
	0x03253290 CBNZ W8, 0x3253298
	0x03253294 BL 0x1C16DFC
	0x03253298 MOV X0, X20
	0x0325329C BL 0x32527AC
	0x032532A0 TBNZ X0, 0x0, 0x32532C4
	0x032532A4 LDR X0, [X21]
	0x032532A8 LDR X20, [X19 + 0x20]
	0x032532AC LDR W8, [X0 + 0xE0]
	0x032532B0 CBNZ W8, 0x32532B8
	0x032532B4 BL 0x1C16DFC
	0x032532B8 MOV X0, X20
	0x032532BC BL 0x32528CC
	0x032532C0 TBZ X0, 0x0, 0x32532E0
	0x032532C4 MOV X0, X31
	0x032532C8 BL 0x3262098
	0x032532CC CBZ X0, 0x32532EC
	0x032532D0 LDR X8, [X0]
	0x032532D4 LDR X1, [X19 + 0x20]
	0x032532D8 LDP X9, X2, [X8 + 0x198]
	0x032532DC B 0x3253280
	0x032532E0 LDP X20, X19, [X31 + 0x10]
	0x032532E4 LDP X30, X21, [X31], #0x20
	0x032532E8 RET
	0x032532EC BL 0x1C16F20
	0x032532F0 STP X30, X21, [X31 - 0x20]!
	0x032532F4 STP X20, X19, [X31 + 0x10]
	0x032532F8 ADRP X20, 0x1189000
	0x032532FC ADRP X21, 0xEA0000
	0x03253300 LDRB W8, [X20 + 0x4D1]
	0x03253304 LDR X21, [X21 + 0x618]

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {33}
	004 Move W8, [X0+24]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move W9, W31
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Add X10, X0, W9
	009 Move X12, [X10+32]
	010 Compare X12, 0
	011 JumpIfEqual {33}
	012 Move W10, [X12+16]
	013 Subtract W11, W1, W10
	014 Move W12, [X12+20]
	015 Move W10, [X12+24]
	016 Compare W10, 0
	017 JumpIfEqual {23}
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction SDIV not yet implemented."
	020 NotImplemented "Instruction MSUB not yet implemented."
	021 Compare W10, 0
	022 JumpIfNotEqual {26}
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Compare W10, 0
	025 JumpIfEqual {29}
	026 Add W9, W9, 1
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move W0, W31
	029 Move W0, 1
	030 Move X30, [X31+16]
	031 Return X0
	032 Call 0x1C17F28
	033 Call 0x1C17F20

