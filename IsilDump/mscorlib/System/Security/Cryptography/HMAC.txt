Type: System.Security.Cryptography.HMAC

Method: System.Int32 get_BlockSizeValue()

Disassembly:
	0x03255300 LDR X20, [X20 + 0x568]
	0x03255304 ADRP X21, 0xE9E000

ISIL:
	001 Move W0, [X0+48]
	002 Return X0

Method: System.Void set_BlockSizeValue(System.Int32 value)

Disassembly:
	0x03255308 MOVZ W1, 0x8
	0x0325530C LDR X0, [X20]

ISIL:
	001 Move [X0+48], W1
	002 Return 

Method: System.Void UpdateIOPadBuffers()

Disassembly:
	0x03255310 LDR X21, [X21 + 0x618]
	0x03255314 BL 0x1C16D6C
	0x03255318 STR X0, [X19 + 0x38]
	0x0325531C LDR X0, [X21]
	0x03255320 MOVZ W1, 0x80
	0x03255324 BL 0x1C16D6C
	0x03255328 STR X0, [X19 + 0x28]
	0x0325532C LDR X0, [X20]
	0x03255330 MOVZ W1, 0x50
	0x03255334 BL 0x1C16D6C
	0x03255338 STR X0, [X19 + 0x40]
	0x0325533C MOV X0, X19
	0x03255340 LDP X20, X19, [X31 + 0x10]
	0x03255344 LDP X30, X21, [X31], #0x20
	0x03255348 B 0x325E70C
	0x0325534C ADRP X0, 0xECE000
	0x03255350 LDR X0, [X0 + 0xA0]
	0x03255354 BL 0x1C16D08
	0x03255358 MOV X1, X31
	0x0325535C BL 0x33BDD84
	0x03255360 MOV X19, X0
	0x03255364 ADRP X0, 0xE9E000
	0x03255368 LDR X0, [X0 + 0x5B0]
	0x0325536C BL 0x1C16D08
	0x03255370 BL 0x1C16F10
	0x03255374 MOV X1, X19
	0x03255378 MOV X2, X31
	0x0325537C MOV X20, X0
	0x03255380 BL 0x337DF1C
	0x03255384 ADRP X0, 0xECE000
	0x03255388 LDR X0, [X0 + 0xD8]
	0x0325538C BL 0x1C16D08
	0x03255390 MOV X1, X0
	0x03255394 MOV X0, X20
	0x03255398 BL 0x1C16DEC
	0x0325539C LDRB W8, [X0 + 0x61]
	0x032553A0 MOVZ W9, 0x40
	0x032553A4 CMP W8, 0x0
	0x032553A8 MOVZ W8, 0x80
	0x032553AC CSEL W0, W8, W9, EQ
	0x032553B0 RET
	0x032553B4 STP X30, X19, [X31 - 0x10]!
	0x032553B8 MOV X19, X0
	0x032553BC MOVZ W0, 0x80
	0x032553C0 MOV X1, X31
	0x032553C4 BL 0x3262208
	0x032553C8 MOV X1, X0
	0x032553CC MOV X0, X19
	0x032553D0 LDP X30, X19, [X31], #0x10
	0x032553D4 B 0x32553D8
	0x032553D8 STP X30, X23, [X31 - 0x30]!
	0x032553DC STP X22, X21, [X31 + 0x10]
	0x032553E0 STP X20, X19, [X31 + 0x20]
	0x032553E4 ADRP X23, 0x1187000
	0x032553E8 ADRP X21, 0xECB000
	0x032553EC ADRP X22, 0xECE000
	0x032553F0 LDRB W8, [X23 + 0x4EC]
	0x032553F4 LDR X21, [X21 + 0xD58]
	0x032553F8 LDR X22, [X22 + 0xE0]
	0x032553FC MOV X19, X1
	0x03255400 MOV X20, X0
	0x03255404 TBNZ X8, 0x0, 0x3255428
	0x03255408 ADRP X0, 0xECE000
	0x0325540C LDR X0, [X0 + 0xE0]
	0x03255410 BL 0x1C16CF4
	0x03255414 ADRP X0, 0xECB000
	0x03255418 LDR X0, [X0 + 0xD58]
	0x0325541C BL 0x1C16CF4
	0x03255420 MOVZ W8, 0x1
	0x03255424 STRB W8, [X23 + 0x4EC]
	0x03255428 MOV X0, X31
	0x0325542C BL 0x3262824
	0x03255430 AND W8, W0, 0x1
	0x03255434 MOV X0, X20
	0x03255438 MOV X1, X31
	0x0325543C STRB W8, [X20 + 0x61]
	0x03255440 BL 0x32549C4
	0x03255444 LDR X8, [X21]
	0x03255448 STR X8, [X20 + 0x38]
	0x0325544C LDR X0, [X22]
	0x03255450 BL 0x1C16F10
	0x03255454 MOV X1, X31
	0x03255458 MOV X21, X0
	0x0325545C BL 0x325F484
	0x03255460 STR X21, [X20 + 0x40]
	0x03255464 LDR X0, [X22]
	0x03255468 BL 0x1C16F10
	0x0325546C MOV X1, X31
	0x03255470 MOV X21, X0
	0x03255474 BL 0x325F484
	0x03255478 LDRB W8, [X20 + 0x61]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1188000
	005 Move W8, [X20+1243]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE9F000
	012 Move X0, [X0+1560]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1243], W8
	016 Move X8, [X19+80]
	017 Compare X8, 0
	018 JumpIfNotEqual {25}
	019 Move X8, 0xE9F000
	020 Move W1, [X19+48]
	021 Move X8, [X8+1560]
	022 Move X0, [X8]
	023 Call 0x1C17D6C
	024 Move [X19+80], X0
	025 Move X8, [X19+88]
	026 Compare X8, 0
	027 JumpIfNotEqual {34}
	028 Move X8, 0xE9F000
	029 Move W1, [X19+48]
	030 Move X8, [X8+1560]
	031 Move X0, [X8]
	032 Call 0x1C17D6C
	033 Move [X19+88], X0
	034 Move W8, [X19+48]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move W8, 32
	037 Move W9, 54
	038 Move W10, 92
	039 Move X12, [X19+80]
	040 Compare X12, 0
	041 JumpIfEqual {91}
	042 Move W13, [X12+24]
	043 Subtract X11, X8, 32
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move [X12], W9
	046 Move X12, [X19+88]
	047 Compare X12, 0
	048 JumpIfEqual {91}
	049 Move W13, [X12+24]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move [X12], W10
	052 NotImplemented "Instruction LDRSW not yet implemented."
	053 Subtract X12, X8, 31
	054 Add X8, X8, 1
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X9, [X19+40]
	057 Compare X9, 0
	058 JumpIfEqual {91}
	059 Move W8, 32
	060 Move W12, [X9+24]
	061 Subtract X10, X8, 32
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X11, [X19+80]
	064 Compare X11, 0
	065 JumpIfEqual {91}
	066 Move W13, [X11+24]
	067 NotImplemented "Instruction CMP not yet implemented."
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move W12, [X11]
	070 Move W9, [X9]
	071 Xor W9, W9, W12
	072 Move [X11], W9
	073 Move X9, [X19+88]
	074 Compare X9, 0
	075 JumpIfEqual {91}
	076 Move W11, [X9+24]
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X11, [X19+40]
	079 Compare X11, 0
	080 JumpIfEqual {91}
	081 Move W12, [X11+24]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move W10, [X9]
	084 Move W11, [X11]
	085 Xor W10, W11, W10
	086 Move [X9], W10
	087 Move X9, [X19+40]
	088 Add X8, X8, 1
	089 Compare X9, 0
	090 JumpIfNotEqual {60}
	091 Call 0x1C17F20
	092 Move X20, [X31+16]
	093 Move X19, [X31+24]
	094 Move X30, [X31+32]
	095 Return 
	096 Call 0x1C17F28

Method: System.Void InitializeKey(System.Byte[] key)

Disassembly:
	0x0325547C MOVZ W10, 0x40
	0x03255480 MOVZ W9, 0x200
	0x03255484 STR X21, [X20 + 0x48]
	0x03255488 CMP W8, 0x0
	0x0325548C MOVZ W8, 0x80
	0x03255490 CSEL W8, W8, W10, EQ
	0x03255494 STR W9, [X20 + 0x14]
	0x03255498 STR W8, [X20 + 0x30]
	0x0325549C MOV X0, X20
	0x032554A0 MOV X1, X19
	0x032554A4 LDP X20, X19, [X31 + 0x20]
	0x032554A8 LDP X22, X21, [X31 + 0x10]
	0x032554AC MOV X2, X31
	0x032554B0 LDP X30, X23, [X31], #0x30
	0x032554B4 B 0x325447C
	0x032554B8 LDRB W8, [X0 + 0x61]
	0x032554BC MOVZ W9, 0x40
	0x032554C0 CMP W8, 0x0
	0x032554C4 MOVZ W8, 0x80
	0x032554C8 CSEL W0, W8, W9, EQ
	0x032554CC RET
	0x032554D0 MOV X1, X31
	0x032554D4 B 0x3251230
	0x032554D8 STR X30, [X31 - 0x20]!
	0x032554DC STP X20, X19, [X31 + 0x10]
	0x032554E0 MOV W20, W1
	0x032554E4 MOV X19, X0
	0x032554E8 TBZ X1, 0x0, 0x3255508
	0x032554EC LDR X0, [X19 + 0x28]
	0x032554F0 CBZ X0, 0x3255504
	0x032554F4 LDR W2, [X0 + 0x18]
	0x032554F8 MOV W1, W31
	0x032554FC MOV X3, X31
	0x03255500 BL 0x339FA34
	0x03255504 STR X31, [X19 + 0x28]
	0x03255508 AND W1, W20, 0x1
	0x0325550C MOV X0, X19
	0x03255510 LDP X20, X19, [X31 + 0x10]
	0x03255514 MOV X2, X31
	0x03255518 LDR X30, [X31], #0x20
	0x0325551C B 0x32519A8
	0x03255520 STR X30, [X31 - 0x20]!
	0x03255524 STP X20, X19, [X31 + 0x10]
	0x03255528 ADRP X20, 0x1187000
	0x0325552C LDRB W8, [X20 + 0x4ED]
	0x03255530 MOV X19, X0
	0x03255534 TBNZ X8, 0x0, 0x325554C
	0x03255538 ADRP X0, 0xE9E000
	0x0325553C LDR X0, [X0 + 0x618]
	0x03255540 BL 0x1C16CF4
	0x03255544 MOVZ W8, 0x1
	0x03255548 STRB W8, [X20 + 0x4ED]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1188000
	007 Move W8, [X21+1244]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE9F000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1244], W8
	019 Move [X19+80], X31
	020 Move [X19+88], X31
	021 Compare X20, 0
	022 JumpIfEqual {64}
	023 Move W8, [X19+48]
	024 Move W9, [X20+24]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X0, [X19+64]
	027 Compare X0, 0
	028 JumpIfEqual {64}
	029 Move X1, X20
	030 Call HashAlgorithm.ComputeHash, X0, X1
	031 Move [X19+40], X0
	032 Move X0, X20
	033 Move X1, X31
	034 Call Array.Clone, X0
	035 Compare X0, 0
	036 JumpIfEqual {55}
	037 Move X22, 0xE9F000
	038 Move X22, [X22+1560]
	039 Move X20, X0
	040 Move X21, [X22]
	041 Move X1, X21
	042 Call 0x1C17E00
	043 Compare X0, 0
	044 JumpIfEqual {52}
	045 Move [X19+40], X0
	046 Move X21, [X22]
	047 Move X0, X20
	048 Move X1, X21
	049 Call 0x1C17E00
	050 Compare X0, 0
	051 JumpIfNotEqual {56}
	052 Move X0, X20
	053 Move X1, X21
	054 Call 0x1C181E0
	055 Move [X19+40], X31
	056 Move X0, X19
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X22, [X31+16]
	060 Move X21, [X31+24]
	061 Move X30, [X31+48]
	062 Call HMAC.UpdateIOPadBuffers, X0
	063 Return 
	064 Call 0x1C17F20

Method: System.Byte[] get_Key()

Disassembly:
	0x0325554C LDR X0, [X19 + 0x28]
	0x03255550 CBZ X0, 0x3255588
	0x03255554 MOV X1, X31
	0x03255558 BL 0x33A01F0
	0x0325555C CBZ X0, 0x325557C
	0x03255560 ADRP X8, 0xE9E000
	0x03255564 LDR X8, [X8 + 0x618]
	0x03255568 MOV X19, X0
	0x0325556C LDR X20, [X8]
	0x03255570 MOV X1, X20
	0x03255574 BL 0x1C16E00
	0x03255578 CBZ X0, 0x325558C
	0x0325557C LDP X20, X19, [X31 + 0x10]
	0x03255580 LDR X30, [X31], #0x20
	0x03255584 RET
	0x03255588 BL 0x1C16F20
	0x0325558C MOV X0, X19
	0x03255590 MOV X1, X20
	0x03255594 BL 0x1C171E0
	0x03255598 STR X30, [X31 - 0x30]!
	0x0325559C STP X22, X21, [X31 + 0x10]
	0x032555A0 STP X20, X19, [X31 + 0x20]
	0x032555A4 ADRP X21, 0x1187000
	0x032555A8 LDRB W8, [X21 + 0x4EE]
	0x032555AC MOV X20, X1
	0x032555B0 MOV X19, X0
	0x032555B4 TBNZ X8, 0x0, 0x32555CC
	0x032555B8 ADRP X0, 0xE9E000
	0x032555BC LDR X0, [X0 + 0x618]
	0x032555C0 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1188000
	005 Move W8, [X20+1245]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE9F000
	012 Move X0, [X0+1560]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1245], W8
	016 Move X0, [X19+40]
	017 Compare X0, 0
	018 JumpIfEqual {35}
	019 Move X1, X31
	020 Call Array.Clone, X0
	021 Compare X0, 0
	022 JumpIfEqual {31}
	023 Move X8, 0xE9F000
	024 Move X8, [X8+1560]
	025 Move X19, X0
	026 Move X20, [X8]
	027 Move X1, X20
	028 Call 0x1C17E00
	029 Compare X0, 0
	030 JumpIfEqual {36}
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return X0
	035 Call 0x1C17F20
	036 Move X0, X19
	037 Move X1, X20
	038 Call 0x1C181E0

Method: System.Void set_Key(System.Byte[] value)

Disassembly:
	0x032555C4 MOVZ W8, 0x1
	0x032555C8 STRB W8, [X21 + 0x4EE]
	0x032555CC LDR W8, [X19 + 0x20]
	0x032555D0 CBNZ W8, 0x325563C
	0x032555D4 CBZ X20, 0x325568C
	0x032555D8 MOV X0, X20
	0x032555DC MOV X1, X31
	0x032555E0 BL 0x33A01F0
	0x032555E4 CBZ X0, 0x3255628
	0x032555E8 ADRP X22, 0xE9E000
	0x032555EC LDR X22, [X22 + 0x618]
	0x032555F0 MOV X20, X0
	0x032555F4 LDR X21, [X22]
	0x032555F8 MOV X1, X21
	0x032555FC BL 0x1C16E00
	0x03255600 CBZ X0, 0x3255690
	0x03255604 STR X0, [X19 + 0x28]
	0x03255608 LDR X19, [X22]
	0x0325560C MOV X0, X20
	0x03255610 MOV X1, X19
	0x03255614 BL 0x1C16E00
	0x03255618 CBNZ X0, 0x325562C
	0x0325561C MOV X0, X20
	0x03255620 MOV X1, X19
	0x03255624 BL 0x1C171E0
	0x03255628 STR X31, [X19 + 0x28]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+96]
	005 Compare W8, 0
	006 JumpIfNotEqual {12}
	007 Move X20, [X31+16]
	008 Move X19, [X31+24]
	009 Move X30, [X31+32]
	010 Call HMAC.InitializeKey, X0, X1
	011 Return 
	012 Move X0, 0xECF000
	013 Move X0, [X0+128]
	014 Call 0x1C17D08
	015 Move X1, X31
	016 Call Environment.GetResourceString, X0
	017 Move X19, X0
	018 Move X0, 0xECC000
	019 Move X0, [X0+3296]
	020 Call 0x1C17D08
	021 Call 0x1C17F10
	022 Move X1, X19
	023 Move X20, X0
	024 Call CryptographicException..ctor, X0, X1
	025 Move X0, 0xECF000
	026 Move X0, [X0+136]
	027 Call 0x1C17D08
	028 Move X1, X0
	029 Move X0, X20
	030 Call 0x1C17DEC

Method: System.Security.Cryptography.HMAC Create()

Disassembly:
	0x0325562C LDP X20, X19, [X31 + 0x20]
	0x03255630 LDP X22, X21, [X31 + 0x10]
	0x03255634 LDR X30, [X31], #0x30
	0x03255638 RET
	0x0325563C ADRP X0, 0xECE000
	0x03255640 LDR X0, [X0 + 0x80]
	0x03255644 BL 0x1C16D08
	0x03255648 MOV X1, X31
	0x0325564C BL 0x33BDD84
	0x03255650 MOV X19, X0
	0x03255654 ADRP X0, 0xECB000
	0x03255658 LDR X0, [X0 + 0xCE0]
	0x0325565C BL 0x1C16D08
	0x03255660 BL 0x1C16F10
	0x03255664 MOV X1, X19
	0x03255668 MOV X2, X31
	0x0325566C MOV X20, X0
	0x03255670 BL 0x3252170
	0x03255674 ADRP X0, 0xECE000
	0x03255678 LDR X0, [X0 + 0xE8]
	0x0325567C BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x1188000
	005 Move X20, 0xECC000
	006 Move W8, [X19+1246]
	007 Move X20, [X20+3568]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xECC000
	013 Move X0, [X0+3568]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1246], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move X1, X31
	020 Move X19, X0
	021 Call HMACSHA1..ctor, X0
	022 Move X0, X19
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Return X0

Method: System.Void Initialize()

Disassembly:
	0x03255680 MOV X1, X0
	0x03255684 MOV X0, X20
	0x03255688 BL 0x1C16DEC
	0x0325568C BL 0x1C16F20
	0x03255690 MOV X0, X20
	0x03255694 MOV X1, X21
	0x03255698 BL 0x1C171E0
	0x0325569C STP X30, X21, [X31 - 0x20]!
	0x032556A0 STP X20, X19, [X31 + 0x10]
	0x032556A4 ADRP X20, 0x1187000
	0x032556A8 ADRP X21, 0xE9E000
	0x032556AC LDRB W8, [X20 + 0x4EF]
	0x032556B0 LDR X21, [X21 + 0x618]
	0x032556B4 MOV X19, X0
	0x032556B8 TBNZ X8, 0x0, 0x32556DC
	0x032556BC ADRP X0, 0xE9E000
	0x032556C0 LDR X0, [X0 + 0x618]
	0x032556C4 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+64]
	005 Compare X0, 0
	006 JumpIfEqual {22}
	007 Move X8, [X0]
	008 Move X9, [X8+600]
	009 Move X1, [X8+608]
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Move X0, [X19+72]
	012 Compare X0, 0
	013 JumpIfEqual {22}
	014 Move X8, [X0]
	015 Move X9, [X8+600]
	016 Move X1, [X8+608]
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move [X19+96], W31
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Return 
	022 Call 0x1C17F20

Method: System.Void HashCore(System.Byte[] rgb, System.Int32 ib, System.Int32 cb)

Disassembly:
	0x032556C8 ADRP X0, 0xECE000
	0x032556CC LDR X0, [X0 + 0xF0]
	0x032556D0 BL 0x1C16CF4
	0x032556D4 MOVZ W8, 0x1
	0x032556D8 STRB W8, [X20 + 0x4EF]
	0x032556DC MOV X0, X19
	0x032556E0 MOV X1, X31
	0x032556E4 BL 0x3251230
	0x032556E8 LDR X0, [X21]
	0x032556EC MOVZ W1, 0x18
	0x032556F0 BL 0x1C16D6C
	0x032556F4 STR X0, [X19 + 0x28]
	0x032556F8 MOV X0, X31
	0x032556FC BL 0x3262098
	0x03255700 CBZ X0, 0x32557C8
	0x03255704 LDR X8, [X0]
	0x03255708 LDR X1, [X19 + 0x28]
	0x0325570C ADRP X20, 0xECE000
	0x03255710 LDP X9, X2, [X8 + 0x198]
	0x03255714 LDR X20, [X20 + 0xF0]
	0x03255718 BLR X9
	0x0325571C LDR X0, [X20]
	0x03255720 LDR W8, [X0 + 0xE0]
	0x03255724 CBNZ W8, 0x325572C
	0x03255728 BL 0x1C16DFC
	0x0325572C MOV X0, X31
	0x03255730 BL 0x3261670
	0x03255734 STR X0, [X19 + 0x50]
	0x03255738 CBZ X0, 0x32557C8
	0x0325573C LDR X8, [X0]
	0x03255740 LDP X9, X1, [X8 + 0x198]
	0x03255744 BLR X9

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W8, [X0+96]
	007 Move W20, W3
	008 Move W19, W2
	009 Move X22, X0
	010 Move X21, X1
	011 Compare W8, 0
	012 JumpIfNotEqual {26}
	013 Move X1, [X22+80]
	014 Compare X1, 0
	015 JumpIfEqual {41}
	016 Move X0, [X22+64]
	017 Compare X0, 0
	018 JumpIfEqual {41}
	019 Move W3, [X1+24]
	020 Move W2, W31
	021 Move X4, X1
	022 Move W5, W31
	023 Call HashAlgorithm.TransformBlock, X0, X1, X2, X3, X4, X5
	024 Move W8, 1
	025 Move [X22+96], W8
	026 Move X0, [X22+64]
	027 Compare X0, 0
	028 JumpIfEqual {41}
	029 Move X1, X21
	030 Move W2, W19
	031 Move W3, W20
	032 Move X4, X21
	033 Move W5, W19
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Call HashAlgorithm.TransformBlock, X0, X1, X2, X3, X4, X5
	040 Return 
	041 Call 0x1C17F20

Method: System.Byte[] HashFinal()

Disassembly:
	0x03255748 LDR X8, [X19 + 0x50]
	0x0325574C STR W0, [X19 + 0x14]
	0x03255750 CBZ X8, 0x32557C8
	0x03255754 LDR X9, [X8]
	0x03255758 MOV X0, X8
	0x0325575C LDP X10, X1, [X9 + 0x198]
	0x03255760 BLR X10
	0x03255764 ADD W8, W0, 0x7
	0x03255768 CMP W0, 0x0
	0x0325576C CSEL W8, W8, W0, LT
	0x03255770 SBFM W1, W8, 0x3, 0x1F
	0x03255774 STR W1, [X19 + 0x48]
	0x03255778 LDR X0, [X21]
	0x0325577C LDR X20, [X19 + 0x50]
	0x03255780 BL 0x1C16D6C
	0x03255784 CBZ X20, 0x32557C8
	0x03255788 LDR X8, [X20]
	0x0325578C MOV X1, X0
	0x03255790 MOV X0, X20
	0x03255794 LDP X9, X2, [X8 + 0x1D8]
	0x03255798 BLR X9
	0x0325579C LDR X0, [X19 + 0x50]
	0x032557A0 CBZ X0, 0x32557C8
	0x032557A4 LDR X8, [X0]
	0x032557A8 MOVZ W1, 0x3
	0x032557AC LDR X9, [X8 + 0x268]
	0x032557B0 LDR X2, [X8 + 0x270]
	0x032557B4 BLR X9
	0x032557B8 STR X31, [X19 + 0x30]
	0x032557BC LDP X20, X19, [X31 + 0x10]
	0x032557C0 LDP X30, X21, [X31], #0x20
	0x032557C4 RET
	0x032557C8 BL 0x1C16F20
	0x032557CC STR X31, [X0 + 0x30]
	0x032557D0 RET
	0x032557D4 STP X30, X25, [X31 - 0x40]!
	0x032557D8 STP X24, X23, [X31 + 0x10]
	0x032557DC STP X22, X21, [X31 + 0x20]
	0x032557E0 STP X20, X19, [X31 + 0x30]
	0x032557E4 ADRP X23, 0x1187000
	0x032557E8 LDRB W8, [X23 + 0x4F0]
	0x032557EC MOV W19, W3
	0x032557F0 MOV W20, W2
	0x032557F4 MOV X21, X1
	0x032557F8 MOV X22, X0
	0x032557FC TBNZ X8, 0x0, 0x3255820
	0x03255800 ADRP X0, 0xEAB000
	0x03255804 LDR X0, [X0 + 0xE00]
	0x03255808 BL 0x1C16CF4
	0x0325580C ADRP X0, 0xECE000
	0x03255810 LDR X0, [X0 + 0xF8]
	0x03255814 BL 0x1C16CF4
	0x03255818 MOVZ W8, 0x1
	0x0325581C STRB W8, [X23 + 0x4F0]
	0x03255820 LDR X8, [X22 + 0x30]
	0x03255824 CBZ X8, 0x3255834
	0x03255828 LDR X23, [X22 + 0x38]
	0x0325582C CBNZ X23, 0x3255900
	0x03255830 B 0x3255930
	0x03255834 LDR X8, [X22]
	0x03255838 LDR X23, [X22 + 0x50]
	0x0325583C MOV X0, X22
	0x03255840 LDR X9, [X8 + 0x268]
	0x03255844 LDR X1, [X8 + 0x270]
	0x03255848 BLR X9
	0x0325584C CBZ X23, 0x3255930
	0x03255850 LDR X8, [X23]
	0x03255854 MOV X1, X0
	0x03255858 MOV X0, X23
	0x0325585C LDP X9, X2, [X8 + 0x1F8]
	0x03255860 BLR X9
	0x03255864 LDR X0, [X22 + 0x50]
	0x03255868 CBZ X0, 0x3255930
	0x0325586C LDR X8, [X0]
	0x03255870 LDR X9, [X8 + 0x278]
	0x03255874 LDR X1, [X8 + 0x280]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1188000
	006 Move W8, [X20+1247]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xECE000
	013 Move X0, [X0+2640]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1247], W8
	017 Move W8, [X19+96]
	018 Compare W8, 0
	019 JumpIfNotEqual {33}
	020 Move X1, [X19+80]
	021 Compare X1, 0
	022 JumpIfEqual {95}
	023 Move X0, [X19+64]
	024 Compare X0, 0
	025 JumpIfEqual {95}
	026 Move W3, [X1+24]
	027 Move W2, W31
	028 Move X4, X1
	029 Move W5, W31
	030 Call HashAlgorithm.TransformBlock, X0, X1, X2, X3, X4, X5
	031 Move W8, 1
	032 Move [X19+96], W8
	033 Move X21, 0xECE000
	034 Move X21, [X21+2640]
	035 Move X20, [X19+64]
	036 Move X0, [X21]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Compare X20, 0
	042 JumpIfEqual {95}
	043 Move X8, [X21]
	044 Move X0, X20
	045 Move W2, W31
	046 Move W3, W31
	047 Move X8, [X8+184]
	048 Move X1, [X8]
	049 Call HashAlgorithm.TransformFinalBlock, X0, X1, X2, X3
	050 Move X8, [X19+64]
	051 Compare X8, 0
	052 JumpIfEqual {95}
	053 Move X1, [X19+88]
	054 Compare X1, 0
	055 JumpIfEqual {95}
	056 Move X0, [X19+72]
	057 Compare X0, 0
	058 JumpIfEqual {95}
	059 Move W3, [X1+24]
	060 Move X20, [X8+24]
	061 Move W2, W31
	062 Move X4, X1
	063 Move W5, W31
	064 Call HashAlgorithm.TransformBlock, X0, X1, X2, X3, X4, X5
	065 Compare X20, 0
	066 JumpIfEqual {95}
	067 Move X0, [X19+72]
	068 Compare X0, 0
	069 JumpIfEqual {95}
	070 Move W3, [X20+24]
	071 Move X1, X20
	072 Move W2, W31
	073 Move X4, X20
	074 Move W5, W31
	075 Call HashAlgorithm.TransformBlock, X0, X1, X2, X3, X4, X5
	076 Move X0, [X19+72]
	077 Move [X19+96], W31
	078 Compare X0, 0
	079 JumpIfEqual {95}
	080 Move X8, [X21]
	081 Move W2, W31
	082 Move W3, W31
	083 Move X8, [X8+184]
	084 Move X1, [X8]
	085 Call HashAlgorithm.TransformFinalBlock, X0, X1, X2, X3
	086 Move X8, [X19+72]
	087 Compare X8, 0
	088 JumpIfEqual {95}
	089 Move X0, [X8+24]
	090 Move X20, [X31+16]
	091 Move X19, [X31+24]
	092 Move X30, [X31+32]
	093 Move X21, [X31+40]
	094 Return X0
	095 Call 0x1C17F20

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x03255878 BLR X9
	0x0325587C LDR X8, [X22 + 0x50]
	0x03255880 STR X0, [X22 + 0x30]
	0x03255884 CBZ X8, 0x3255930
	0x03255888 LDR X9, [X8]
	0x0325588C MOV X0, X8
	0x03255890 LDP X10, X1, [X9 + 0x198]
	0x03255894 BLR X10
	0x03255898 ADRP X8, 0xECE000
	0x0325589C LDR X8, [X8 + 0xF8]
	0x032558A0 MOV W23, W0
	0x032558A4 LDR X8, [X8]
	0x032558A8 MOV X0, X8
	0x032558AC BL 0x1C16F10
	0x032558B0 ADD W8, W23, 0x7
	0x032558B4 CMP W23, 0x0
	0x032558B8 CSEL W8, W8, W23, LT
	0x032558BC SBFM W1, W8, 0x3, 0x1F
	0x032558C0 MOV X24, X0
	0x032558C4 BL 0x3255934
	0x032558C8 STR X24, [X22 + 0x40]
	0x032558CC ADRP X8, 0xEAB000
	0x032558D0 LDR X25, [X22 + 0x30]
	0x032558D4 LDR X8, [X8 + 0xE00]
	0x032558D8 LDR X0, [X8]
	0x032558DC BL 0x1C16F10
	0x032558E0 MOVZ W3, 0x1
	0x032558E4 MOV X1, X24
	0x032558E8 MOV X2, X25
	0x032558EC MOV X4, X31
	0x032558F0 MOV X23, X0
	0x032558F4 BL 0x324CD5C
	0x032558F8 STR X23, [X22 + 0x38]
	0x032558FC CBZ X23, 0x3255930
	0x03255900 LDR X8, [X23]
	0x03255904 MOV X0, X23
	0x03255908 MOV X1, X21
	0x0325590C MOV W2, W20
	0x03255910 LDR X5, [X8 + 0x388]
	0x03255914 LDR X4, [X8 + 0x390]
	0x03255918 MOV W3, W19
	0x0325591C LDP X20, X19, [X31 + 0x30]
	0x03255920 LDP X22, X21, [X31 + 0x20]
	0x03255924 LDP X24, X23, [X31 + 0x10]
	0x03255928 LDP X30, X25, [X31], #0x40
	0x0325592C BR X5
	0x03255930 BL 0x1C16F20
	0x03255934 STR X30, [X31 - 0x30]!
	0x03255938 STP X22, X21, [X31 + 0x10]
	0x0325593C STP X20, X19, [X31 + 0x20]
	0x03255940 ADRP X22, 0x1187000
	0x03255944 ADRP X21, 0xECD000
	0x03255948 LDRB W8, [X22 + 0x4F3]
	0x0325594C LDR X21, [X21 + 0xD10]
	0x03255950 MOV W19, W1
	0x03255954 MOV X20, X0
	0x03255958 TBNZ X8, 0x0, 0x325597C
	0x0325595C ADRP X0, 0xE9E000
	0x03255960 LDR X0, [X0 + 0x618]
	0x03255964 BL 0x1C16CF4
	0x03255968 ADRP X0, 0xECD000
	0x0325596C LDR X0, [X0 + 0xD10]
	0x03255970 BL 0x1C16CF4
	0x03255974 MOVZ W8, 0x1
	0x03255978 STRB W8, [X22 + 0x4F3]
	0x0325597C LDR X0, [X21]
	0x03255980 ADRP X21, 0xE9E000
	0x03255984 LDR W8, [X0 + 0xE0]
	0x03255988 LDR X21, [X21 + 0x618]
	0x0325598C CBNZ W8, 0x3255994
	0x03255990 BL 0x1C16DFC
	0x03255994 MOV X0, X20
	0x03255998 MOV X1, X31
	0x0325599C BL 0x32F27B0
	0x032559A0 LDR X0, [X21]
	0x032559A4 MOV W1, W19
	0x032559A8 BL 0x1C16D6C
	0x032559AC STR X0, [X20 + 0x28]
	0x032559B0 STR W19, [X20 + 0x30]
	0x032559B4 LDP X20, X19, [X31 + 0x20]
	0x032559B8 LDP X22, X21, [X31 + 0x10]
	0x032559BC LDR X30, [X31], #0x30
	0x032559C0 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1188000
	006 Move W8, [X21+1248]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xE9F000
	014 Move X0, [X0+3584]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1248], W8
	018 Move TEMP, X19
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfNotEqual {88}
	022 Move X21, [X20+64]
	023 Compare X21, 0
	024 JumpIfEqual {48}
	025 Move X10, 0xE9F000
	026 Move X8, [X21]
	027 Move X10, [X10+3584]
	028 NotImplemented "Instruction LDRH not yet implemented."
	029 Move X1, [X10]
	030 Compare X9, 0
	031 JumpIfEqual {38}
	032 Move X10, [X8+176]
	033 Add X10, X10, 8
	034 NotImplemented "Instruction LDUR not yet implemented."
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Subtract X9, X9, 1
	037 Add X10, X10, 16
	038 Move X0, X21
	039 Move W2, W31
	040 Call 0x1C5D788
	041 NotImplemented "Instruction LDRSW not yet implemented."
	042 Add X8, X8, X9
	043 Add X0, X8, 312
	044 Move X8, [X0]
	045 Move X1, [X0+8]
	046 Move X0, X21
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Move X21, [X20+72]
	049 Compare X21, 0
	050 JumpIfEqual {74}
	051 Move X10, 0xE9F000
	052 Move X8, [X21]
	053 Move X10, [X10+3584]
	054 NotImplemented "Instruction LDRH not yet implemented."
	055 Move X1, [X10]
	056 Compare X9, 0
	057 JumpIfEqual {64}
	058 Move X10, [X8+176]
	059 Add X10, X10, 8
	060 NotImplemented "Instruction LDUR not yet implemented."
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Subtract X9, X9, 1
	063 Add X10, X10, 16
	064 Move X0, X21
	065 Move W2, W31
	066 Call 0x1C5D788
	067 NotImplemented "Instruction LDRSW not yet implemented."
	068 Add X8, X8, X9
	069 Add X0, X8, 312
	070 Move X8, [X0]
	071 Move X1, [X0+8]
	072 Move X0, X21
	073 NotImplemented "Instruction BLR not yet implemented."
	074 Move X0, [X20+80]
	075 Compare X0, 0
	076 JumpIfEqual {81}
	077 Move W2, [X0+24]
	078 Move W1, W31
	079 Move X3, X31
	080 Call Array.Clear, X0, X1, X2
	081 Move X0, [X20+88]
	082 Compare X0, 0
	083 JumpIfEqual {88}
	084 Move W2, [X0+24]
	085 Move W1, W31
	086 Move X3, X31
	087 Call Array.Clear, X0, X1, X2
	088 And W1, W19, 1
	089 Move X0, X20
	090 Move X20, [X31+16]
	091 Move X19, [X31+24]
	092 Move X2, X31
	093 Move X30, [X31+32]
	094 Move X21, [X31+40]
	095 Call KeyedHashAlgorithm.Dispose, X0, X1
	096 Return 

Method: System.Void .ctor()

Disassembly:
	0x032559C4 STR X30, [X31 - 0x30]!
	0x032559C8 STP X22, X21, [X31 + 0x10]
	0x032559CC STP X20, X19, [X31 + 0x20]
	0x032559D0 ADRP X20, 0x1187000
	0x032559D4 LDRB W8, [X20 + 0x4F1]
	0x032559D8 MOV X19, X0
	0x032559DC TBNZ X8, 0x0, 0x3255A00
	0x032559E0 ADRP X0, 0xEAB000
	0x032559E4 LDR X0, [X0 + 0xE00]
	0x032559E8 BL 0x1C16CF4
	0x032559EC ADRP X0, 0xECE000
	0x032559F0 LDR X0, [X0 + 0xF8]
	0x032559F4 BL 0x1C16CF4
	0x032559F8 MOVZ W8, 0x1
	0x032559FC STRB W8, [X20 + 0x4F1]
	0x03255A00 LDR X8, [X19 + 0x30]
	0x03255A04 CBZ X8, 0x3255A14
	0x03255A08 LDR X20, [X19 + 0x38]
	0x03255A0C CBNZ X20, 0x3255AE0
	0x03255A10 B 0x3255B04
	0x03255A14 LDR X8, [X19]
	0x03255A18 LDR X20, [X19 + 0x50]
	0x03255A1C MOV X0, X19
	0x03255A20 LDR X9, [X8 + 0x268]
	0x03255A24 LDR X1, [X8 + 0x270]
	0x03255A28 BLR X9
	0x03255A2C CBZ X20, 0x3255B04
	0x03255A30 LDR X8, [X20]
	0x03255A34 MOV X1, X0
	0x03255A38 MOV X0, X20
	0x03255A3C LDP X9, X2, [X8 + 0x1F8]
	0x03255A40 BLR X9
	0x03255A44 LDR X0, [X19 + 0x50]
	0x03255A48 CBZ X0, 0x3255B04
	0x03255A4C LDR X8, [X0]
	0x03255A50 LDR X9, [X8 + 0x278]
	0x03255A54 LDR X1, [X8 + 0x280]
	0x03255A58 BLR X9
	0x03255A5C LDR X8, [X19 + 0x50]
	0x03255A60 STR X0, [X19 + 0x30]
	0x03255A64 CBZ X8, 0x3255B04
	0x03255A68 LDR X9, [X8]
	0x03255A6C MOV X0, X8
	0x03255A70 LDP X10, X1, [X9 + 0x198]
	0x03255A74 BLR X10
	0x03255A78 ADRP X8, 0xECE000
	0x03255A7C LDR X8, [X8 + 0xF8]
	0x03255A80 MOV W20, W0
	0x03255A84 LDR X8, [X8]
	0x03255A88 MOV X0, X8
	0x03255A8C BL 0x1C16F10
	0x03255A90 ADD W8, W20, 0x7
	0x03255A94 CMP W20, 0x0
	0x03255A98 CSEL W8, W8, W20, LT
	0x03255A9C SBFM W1, W8, 0x3, 0x1F
	0x03255AA0 MOV X21, X0
	0x03255AA4 BL 0x3255934
	0x03255AA8 STR X21, [X19 + 0x40]
	0x03255AAC ADRP X8, 0xEAB000
	0x03255AB0 LDR X22, [X19 + 0x30]
	0x03255AB4 LDR X8, [X8 + 0xE00]
	0x03255AB8 LDR X0, [X8]
	0x03255ABC BL 0x1C16F10
	0x03255AC0 MOVZ W3, 0x1
	0x03255AC4 MOV X1, X21
	0x03255AC8 MOV X2, X22

ISIL:
	001 Move W8, 64
	002 Move X1, X31
	003 Move [X0+48], W8
	004 Call KeyedHashAlgorithm..ctor, X0
	005 Return 
	006 Move [X31-32], X30
	007 Move [X31+16], X20
	008 Move [X31+24], X19
	009 Move X19, 0x1188000
	010 Move W8, [X19+1249]
	011 Move X20, X0
	012 Compare W8, 0
	013 JumpIfNotEqual {22}
	014 Move X0, 0xECA000
	015 Move X0, [X0+3416]
	016 Call 0x1C17CF4
	017 Move X0, 0xECA000
	018 Move X0, [X0+3424]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X19+1249], W8
	022 Move X19, [X20]
	023 NotImplemented "Instruction MOVI not yet implemented."
	024 Move [X20], V0
	025 Move [X20+8], V0
	026 Compare X19, 0
	027 JumpIfEqual {85}
	028 Move X8, 0xECA000
	029 Move X8, [X8+3424]
	030 Move X0, [X8]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X8, 0xECA000
	036 Move X8, [X8+3416]
	037 Move X20, [X8]
	038 Move X0, [X20+32]
	039 Move W8, [X0+309]
	040 Move TEMP, X8
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfEqual {45}
	044 Call 0x1C5D684
	045 Move X8, [X0+192]
	046 Move X0, [X8+8]
	047 Move W8, [X0+309]
	048 Move TEMP, X8
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfEqual {53}
	052 Call 0x1C5D684
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, [X20+32]
	058 Move W8, [X0+309]
	059 Move TEMP, X8
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfEqual {64}
	063 Call 0x1C5D684
	064 Move X8, [X0+192]
	065 Move X0, [X8+8]
	066 Move W8, [X0+309]
	067 Move TEMP, X8
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfEqual {72}
	071 Call 0x1C5D684
	072 Move X8, [X0+184]
	073 Move X0, [X8]
	074 Compare X0, 0
	075 JumpIfEqual {89}
	076 Move X8, [X0]
	077 Move X1, X19
	078 Move X20, [X31+16]
	079 Move X19, [X31+24]
	080 Move W2, W31
	081 Move X4, [X8+392]
	082 Move X3, [X8+400]
	083 Move X30, [X31+32]
	084 CallNoReturn X4
	085 Move X20, [X31+16]
	086 Move X19, [X31+24]
	087 Move X30, [X31+32]
	088 Return 
	089 Call 0x1C17F20

