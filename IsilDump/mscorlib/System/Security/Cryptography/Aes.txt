Type: System.Security.Cryptography.Aes

Method: System.Void .ctor()

Disassembly:
	0x03252CE4 LDRB W8, [X19 + 0x4C9]
	0x03252CE8 LDR X20, [X20 + 0xF60]
	0x03252CEC TBNZ X8, 0x0, 0x3252D04
	0x03252CF0 ADRP X0, 0xED0000
	0x03252CF4 LDR X0, [X0 + 0xF60]
	0x03252CF8 BL 0x1C16CF4
	0x03252CFC MOVZ W8, 0x1
	0x03252D00 STRB W8, [X19 + 0x4C9]
	0x03252D04 LDR X0, [X20]
	0x03252D08 BL 0x1C16F10
	0x03252D0C MOV X19, X0
	0x03252D10 BL 0x3252D24
	0x03252D14 MOV X0, X19
	0x03252D18 LDP X20, X19, [X31 + 0x10]
	0x03252D1C LDR X30, [X31], #0x20
	0x03252D20 RET
	0x03252D24 STP X30, X21, [X31 - 0x20]!
	0x03252D28 STP X20, X19, [X31 + 0x10]
	0x03252D2C ADRP X20, 0x118A000
	0x03252D30 ADRP X21, 0xECF000
	0x03252D34 LDRB W8, [X20 + 0x4CD]
	0x03252D38 LDR X21, [X21 + 0x320]
	0x03252D3C MOV X19, X0
	0x03252D40 TBNZ X8, 0x0, 0x3252D58
	0x03252D44 ADRP X0, 0xECF000
	0x03252D48 LDR X0, [X0 + 0x320]
	0x03252D4C BL 0x1C16CF4
	0x03252D50 MOVZ W8, 0x1
	0x03252D54 STRB W8, [X20 + 0x4CD]
	0x03252D58 LDR X0, [X21]
	0x03252D5C LDR W8, [X0 + 0xE0]
	0x03252D60 CBNZ W8, 0x3252D68
	0x03252D64 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x118B000
	006 Move X20, 0xEAF000
	007 Move W8, [X21+1215]
	008 Move X20, [X20+3568]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEAF000
	015 Move X0, [X0+3568]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1215], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call SymmetricAlgorithm..ctor, X0
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X20]
	028 Move X8, [X0+184]
	029 Move X9, -41304064
	030 Move X10, -41299968
	031 Move V0, [X9+2736]
	032 Move V1, [X8]
	033 Move V2, [X10+1152]
	034 Move [X19+16], D0
	035 Move [X19+40], V1
	036 Move [X19+56], D2
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return 

Method: System.Security.Cryptography.Aes Create()

Disassembly:
	0x03252D68 MOV X0, X19
	0x03252D6C BL 0x3252648
	0x03252D70 MOVZ W0, 0x6601
	0x03252D74 MOV W1, W31
	0x03252D78 MOV X2, X31
	0x03252D7C BL 0x3261AB8
	0x03252D80 TBZ X0, 0x0, 0x3252D98
	0x03252D84 MOVZ W8, 0x8
	0x03252D88 STR W8, [X19 + 0x14]
	0x03252D8C LDP X20, X19, [X31 + 0x10]
	0x03252D90 LDP X30, X21, [X31], #0x20
	0x03252D94 RET
	0x03252D98 ADRP X0, 0xED0000
	0x03252D9C LDR X0, [X0 + 0xF68]
	0x03252DA0 BL 0x1C16D08
	0x03252DA4 MOV X1, X31
	0x03252DA8 BL 0x33BDD84
	0x03252DAC MOV X19, X0
	0x03252DB0 ADRP X0, 0xECE000
	0x03252DB4 LDR X0, [X0 + 0xCE0]
	0x03252DB8 BL 0x1C16D08
	0x03252DBC BL 0x1C16F10
	0x03252DC0 MOV X1, X19
	0x03252DC4 MOV X20, X0
	0x03252DC8 BL 0x3252170

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x118B000
	005 Move X19, 0xEAF000
	006 Move W8, [X20+1216]
	007 Move X19, [X19+3568]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xEAF000
	013 Move X0, [X0+3568]
	014 Call 0x1C17CF4
	015 Move X0, 0xED1000
	016 Move X0, [X0+3824]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1216], W8
	020 Move X0, [X19]
	021 Move X19, 0xED1000
	022 Move W8, [X0+224]
	023 Move X19, [X19+3824]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, [X19]
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]

Method: System.Security.Cryptography.Aes Create(System.String algorithmName)

Disassembly:
	0x03252DCC ADRP X0, 0xED0000
	0x03252DD0 LDR X0, [X0 + 0xF70]
	0x03252DD4 BL 0x1C16D08
	0x03252DD8 MOV X1, X0
	0x03252DDC MOV X0, X20
	0x03252DE0 BL 0x1C16DEC
	0x03252DE4 CBZ X0, 0x3252DFC
	0x03252DE8 LDR W8, [X0 + 0x18]
	0x03252DEC CMP W8, 0x8
	0x03252DF0 B.NE 0x3252DFC
	0x03252DF4 MOVZ W0, 0x1
	0x03252DF8 RET
	0x03252DFC MOV W0, W31
	0x03252E00 RET
	0x03252E04 STR X30, [X31 - 0x10]!
	0x03252E08 CBZ X0, 0x3252E98
	0x03252E0C LDR W8, [X0 + 0x18]
	0x03252E10 CBZ W8, 0x3252E94
	0x03252E14 CMP W8, 0x1
	0x03252E18 B.EQ 0x3252E94
	0x03252E1C CMP W8, 0x2
	0x03252E20 B.LS 0x3252E94
	0x03252E24 CMP W8, 0x3
	0x03252E28 B.EQ 0x3252E94
	0x03252E2C CMP W8, 0x4
	0x03252E30 B.LS 0x3252E94
	0x03252E34 CMP W8, 0x5
	0x03252E38 B.EQ 0x3252E94
	0x03252E3C CMP W8, 0x6
	0x03252E40 B.LS 0x3252E94
	0x03252E44 CMP W8, 0x7
	0x03252E48 B.EQ 0x3252E94
	0x03252E4C LDRB W8, [X0 + 0x20]
	0x03252E50 LDRB W9, [X0 + 0x21]
	0x03252E54 LDRB W10, [X0 + 0x22]
	0x03252E58 LDRB W11, [X0 + 0x23]
	0x03252E5C LDRB W12, [X0 + 0x24]
	0x03252E60 UBFM X8, X8, 0x8, 0x7
	0x03252E64 LDRB W13, [X0 + 0x25]
	0x03252E68 BFM X8, X9, 0x10, 0x7
	0x03252E6C LDRB W14, [X0 + 0x26]
	0x03252E70 BFM X8, X10, 0x18, 0x7
	0x03252E74 LDRB W15, [X0 + 0x27]
	0x03252E78 BFM X8, X11, 0x20, 0x7
	0x03252E7C BFM X8, X12, 0x28, 0x7
	0x03252E80 BFM X8, X13, 0x30, 0x7
	0x03252E84 BFM X8, X14, 0x38, 0x7
	0x03252E88 ORR X0, X8, X15, 0x0
	0x03252E8C LDR X30, [X31], #0x10
	0x03252E90 RET
	0x03252E94 BL 0x1C16F28
	0x03252E98 BL 0x1C16F20
	0x03252E9C STP X30, X23, [X31 - 0x30]!
	0x03252EA0 STP X22, X21, [X31 + 0x10]
	0x03252EA4 STP X20, X19, [X31 + 0x20]
	0x03252EA8 ADRP X19, 0x118A000
	0x03252EAC ADRP X22, 0xECF000
	0x03252EB0 ADRP X21, 0xECF000
	0x03252EB4 LDRB W8, [X19 + 0x4CC]
	0x03252EB8 LDR X22, [X22 + 0x520]
	0x03252EBC LDR X21, [X21 + 0x528]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x118B000
	005 Move W8, [X20+1217]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xEAF000
	012 Move X0, [X0+3568]
	013 Call 0x1C17CF4
	014 Move X0, 0xECF000
	015 Move X0, [X0+3032]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1217], W8
	019 Compare X19, 0
	020 JumpIfEqual {50}
	021 Move X8, 0xECF000
	022 Move X8, [X8+3032]
	023 Move X0, [X8]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X1, X31
	030 Call CryptoConfig.CreateFromName, X0
	031 Compare X0, 0
	032 JumpIfEqual {46}
	033 Move X8, 0xEAF000
	034 Move X8, [X8+3568]
	035 Move X9, [X0]
	036 Move X8, [X8]
	037 Move W11, [X9+304]
	038 Move W10, [X8+304]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X0, X31
	041 Move X9, [X9+200]
	042 Add X9, X9, X10
	043 NotImplemented "Instruction LDUR not yet implemented."
	044 NotImplemented "Instruction CMP not yet implemented."
	045 NotImplemented "Instruction CSEL not yet implemented."
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Return X0
	050 Move X0, 0xEA7000
	051 Move X0, [X0+1320]
	052 Call 0x1C17D08
	053 Call 0x1C17F10
	054 Move X19, X0
	055 Move X0, 0xED1000
	056 Move X0, [X0+3832]
	057 Call 0x1C17D08
	058 Move X1, X0
	059 Move X0, X19
	060 Move X2, X31
	061 Call ArgumentNullException..ctor, X0, X1
	062 Move X0, 0xED1000
	063 Move X0, [X0+3840]
	064 Call 0x1C17D08
	065 Move X1, X0
	066 Move X0, X19
	067 Call 0x1C17DEC

Method: System.Void .cctor()

Disassembly:
	0x03252EC0 TBNZ X8, 0x0, 0x3252EF0
	0x03252EC4 ADRP X0, 0xECF000
	0x03252EC8 LDR X0, [X0 + 0x320]
	0x03252ECC BL 0x1C16CF4
	0x03252ED0 ADRP X0, 0xECF000
	0x03252ED4 LDR X0, [X0 + 0x520]
	0x03252ED8 BL 0x1C16CF4
	0x03252EDC ADRP X0, 0xECF000
	0x03252EE0 LDR X0, [X0 + 0x528]
	0x03252EE4 BL 0x1C16CF4
	0x03252EE8 MOVZ W8, 0x1
	0x03252EEC STRB W8, [X19 + 0x4CC]
	0x03252EF0 LDR X0, [X22]
	0x03252EF4 MOVZ W1, 0x1
	0x03252EF8 BL 0x1C16D6C
	0x03252EFC LDR X8, [X21]
	0x03252F00 MOV X19, X0
	0x03252F04 MOV X0, X8
	0x03252F08 BL 0x1C16F10
	0x03252F0C MOV X1, X31
	0x03252F10 MOV X20, X0
	0x03252F14 BL 0x33BDD8C
	0x03252F18 MOVI V0.2S, 0x40
	0x03252F1C STR D0, [X20 + 0x10]
	0x03252F20 STR W31, [X20 + 0x18]
	0x03252F24 CBZ X19, 0x3252FA8
	0x03252F28 LDR W8, [X19 + 0x18]
	0x03252F2C CBZ W8, 0x3252FAC
	0x03252F30 ADRP X23, 0xECF000
	0x03252F34 LDR X23, [X23 + 0x320]
	0x03252F38 STR X20, [X19 + 0x20]
	0x03252F3C MOVZ W1, 0x1
	0x03252F40 LDR X8, [X23]
	0x03252F44 LDR X8, [X8 + 0xB8]
	0x03252F48 STR X19, [X8]
	0x03252F4C LDR X0, [X22]
	0x03252F50 BL 0x1C16D6C
	0x03252F54 LDR X8, [X21]
	0x03252F58 MOV X19, X0
	0x03252F5C MOV X0, X8
	0x03252F60 BL 0x1C16F10
	0x03252F64 MOV X1, X31
	0x03252F68 MOV X20, X0
	0x03252F6C BL 0x33BDD8C
	0x03252F70 MOVI V0.2S, 0x40
	0x03252F74 STR D0, [X20 + 0x10]
	0x03252F78 STR W31, [X20 + 0x18]
	0x03252F7C CBZ X19, 0x3252FA8
	0x03252F80 LDR W8, [X19 + 0x18]
	0x03252F84 CBZ W8, 0x3252FAC
	0x03252F88 STR X20, [X19 + 0x20]
	0x03252F8C LDR X8, [X23]
	0x03252F90 LDP X22, X21, [X31 + 0x10]
	0x03252F94 LDR X8, [X8 + 0xB8]
	0x03252F98 STR X19, [X8 + 0x8]
	0x03252F9C LDP X20, X19, [X31 + 0x20]
	0x03252FA0 LDP X30, X23, [X31], #0x30
	0x03252FA4 RET
	0x03252FA8 BL 0x1C16F20
	0x03252FAC BL 0x1C16F28
	0x03252FB0 STP X30, X23, [X31 - 0x30]!
	0x03252FB4 STP X22, X21, [X31 + 0x10]
	0x03252FB8 STP X20, X19, [X31 + 0x20]
	0x03252FBC ADRP X23, 0x118A000
	0x03252FC0 ADRP X22, 0xECF000
	0x03252FC4 LDRB W8, [X23 + 0x4CE]
	0x03252FC8 LDR X22, [X22 + 0x320]
	0x03252FCC MOV X19, X2
	0x03252FD0 MOV X20, X1
	0x03252FD4 MOV X21, X0
	0x03252FD8 TBNZ X8, 0x0, 0x3252FFC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, 0x118B000
	008 Move X22, 0xED0000
	009 Move X21, 0xED0000
	010 Move W8, [X19+1218]
	011 Move X22, [X22+1312]
	012 Move X21, [X21+1320]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0xEAF000
	018 Move X0, [X0+3568]
	019 Call 0x1C17CF4
	020 Move X0, 0xED0000
	021 Move X0, [X0+1312]
	022 Call 0x1C17CF4
	023 Move X0, 0xED0000
	024 Move X0, [X0+1320]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X19+1218], W8
	028 Move X0, [X22]
	029 Move W1, 1
	030 Call 0x1C17D6C
	031 Move X8, [X21]
	032 Move X19, X0
	033 Move X0, X8
	034 Call 0x1C17F10
	035 Move X1, X31
	036 Move X20, X0
	037 Call Object..ctor, X0
	038 NotImplemented "Instruction MOVI not yet implemented."
	039 Move [X20+16], D0
	040 Move [X20+24], W31
	041 Compare X19, 0
	042 JumpIfEqual {83}
	043 Move W8, [X19+24]
	044 Compare W8, 0
	045 JumpIfEqual {84}
	046 Move X23, 0xEAF000
	047 Move X23, [X23+3568]
	048 Move [X19+32], X20
	049 Move W1, 1
	050 Move X8, [X23]
	051 Move X8, [X8+184]
	052 Move [X8], X19
	053 Move X0, [X22]
	054 Call 0x1C17D6C
	055 Move X8, [X21]
	056 Move X19, X0
	057 Move X0, X8
	058 Call 0x1C17F10
	059 Move X1, X31
	060 Move X20, X0
	061 Call Object..ctor, X0
	062 Move X8, -41304064
	063 Move V0, [X8+1248]
	064 Move W8, 64
	065 Move [X20+24], W8
	066 Move [X20+16], D0
	067 Compare X19, 0
	068 JumpIfEqual {83}
	069 Move W8, [X19+24]
	070 Compare W8, 0
	071 JumpIfEqual {84}
	072 Move [X19+32], X20
	073 Move X8, [X23]
	074 Move X22, [X31+16]
	075 Move X21, [X31+24]
	076 Move X8, [X8+184]
	077 Move [X8+8], X19
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X30, [X31+48]
	081 Move X23, [X31+56]
	082 Return 
	083 Call 0x1C17F20
	084 Call 0x1C17F28

