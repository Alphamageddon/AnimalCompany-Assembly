Type: System.Security.Cryptography.RijndaelManaged

Method: System.Void .ctor()

Disassembly:
	0x03257C58 LDP X24, X23, [X31 + 0x20]
	0x03257C5C LDP X30, X25, [X31 + 0x10]
	0x03257C60 ADD X31, X31, 0x50
	0x03257C64 RET
	0x03257C68 ADRP X8, 0xE9C000
	0x03257C6C LDR X8, [X8 + 0x618]
	0x03257C70 LDR X0, [X8]
	0x03257C74 BL 0x1C16D6C
	0x03257C78 LDR W4, [X19 + 0x24]
	0x03257C7C MOV X2, X0
	0x03257C80 STR X0, [X19 + 0x70]
	0x03257C84 MOV X0, X21
	0x03257C88 SUB W23, W23, W4
	0x03257C8C ADD W1, W23, W20
	0x03257C90 MOV W3, W31
	0x03257C94 MOV X5, X31
	0x03257C98 BL 0x33A8750
	0x03257C9C LDR W6, [X19 + 0x14]
	0x03257CA0 B 0x3257B90
	0x03257CA4 ADRP X0, 0xECC000
	0x03257CA8 LDR X0, [X0 + 0x1E0]
	0x03257CAC B 0x3257D70
	0x03257CB0 ADRP X0, 0xEA1000
	0x03257CB4 LDR X0, [X0 + 0x528]
	0x03257CB8 BL 0x1C16D08
	0x03257CBC BL 0x1C16F10
	0x03257CC0 MOV X19, X0
	0x03257CC4 ADRP X0, 0xECA000
	0x03257CC8 LDR X0, [X0 + 0xE30]
	0x03257CCC B 0x3257CEC
	0x03257CD0 ADRP X0, 0xEA1000
	0x03257CD4 LDR X0, [X0 + 0x528]
	0x03257CD8 BL 0x1C16D08
	0x03257CDC BL 0x1C16F10
	0x03257CE0 MOV X19, X0
	0x03257CE4 ADRP X0, 0xECA000
	0x03257CE8 LDR X0, [X0 + 0xE60]
	0x03257CEC BL 0x1C16D08
	0x03257CF0 MOV X1, X0
	0x03257CF4 MOV X0, X19
	0x03257CF8 MOV X2, X31
	0x03257CFC BL 0x330E100
	0x03257D00 ADRP X0, 0xECC000
	0x03257D04 LDR X0, [X0 + 0x1E8]
	0x03257D08 BL 0x1C16D08
	0x03257D0C MOV X1, X0
	0x03257D10 MOV X0, X19
	0x03257D14 BL 0x1C16DEC
	0x03257D18 ADRP X0, 0xEC4000
	0x03257D1C LDR X0, [X0 + 0x670]
	0x03257D20 BL 0x1C16D08
	0x03257D24 MOV X1, X31
	0x03257D28 BL 0x33BDD84
	0x03257D2C MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1186000
	006 Move X20, 0xECD000
	007 Move W8, [X21+1283]
	008 Move X20, [X20+408]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xECA000
	015 Move X0, [X0+3032]
	016 Call 0x1C17CF4
	017 Move X0, 0xECD000
	018 Move X0, [X0+408]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1283], W8
	022 Move X0, [X20]
	023 Move X20, 0xECA000
	024 Move W8, [X0+224]
	025 Move X20, [X20+3032]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X19
	030 Call Rijndael..ctor, X0
	031 Move X0, [X20]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X31
	037 Call CryptoConfig.get_AllowOnlyFipsAlgorithms
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {47}
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Move X21, [X31+40]
	046 Return 
	047 Move X0, 0xECD000
	048 Move X0, [X0+160]
	049 Call 0x1C17D08
	050 Move X1, X31
	051 Call Environment.GetResourceString, X0
	052 Move X19, X0
	053 Move X0, 0xE9D000
	054 Move X0, [X0+1456]
	055 Call 0x1C17D08
	056 Call 0x1C17F10
	057 Move X1, X19
	058 Move X2, X31
	059 Move X20, X0
	060 Call InvalidOperationException..ctor, X0, X1
	061 Move X0, 0xECD000
	062 Move X0, [X0+416]
	063 Call 0x1C17D08
	064 Move X1, X0
	065 Move X0, X20
	066 Call 0x1C17DEC

Method: System.Security.Cryptography.ICryptoTransform CreateEncryptor(System.Byte[] rgbKey, System.Byte[] rgbIV)

Disassembly:
	0x03257D30 ADRP X0, 0xEA4000
	0x03257D34 LDR X0, [X0 + 0x760]
	0x03257D38 BL 0x1C16D08
	0x03257D3C BL 0x1C16F10
	0x03257D40 MOV X20, X0

ISIL:
	001 Move X3, X2
	002 Move W2, [X0+60]
	003 Move W4, [X0+20]
	004 Move W5, W31

Method: System.Security.Cryptography.ICryptoTransform CreateDecryptor(System.Byte[] rgbKey, System.Byte[] rgbIV)

Disassembly:
	0x03257E38 STRB W8, [X26 + 0x508]
	0x03257E3C CBZ X21, 0x3258950
	0x03257E40 LDR W8, [X21 + 0x18]
	0x03257E44 ADD W9, W28, W20
	0x03257E48 CMP W9, W8

ISIL:
	001 Move X3, X2
	002 Move W2, [X0+60]
	003 Move W4, [X0+20]
	004 Move W5, 1
	005 Call RijndaelManaged.NewEncryptor, X0, X1, X2, X3, X4, X5
	006 Return X0

Method: System.Void GenerateKey()

Disassembly:
	0x03257E4C B.GT 0x3257F44
	0x03257E50 LDR W8, [X22 + 0x24]
	0x03257E54 STUR W28, [X29 - 0xC]
	0x03257E58 SDIV W9, W28, W8
	0x03257E5C MSUB W9, W9, W8, W28
	0x03257E60 STUR W9, [X29 - 0x34]
	0x03257E64 TBZ X25, 0x0, 0x3257F1C
	0x03257E68 SUB W9, W23, 0x1
	0x03257E6C CMP W9, 0x4
	0x03257E70 B.HI 0x3257F1C
	0x03257E74 ADRP X10, 0xFFFFFFFFFD93F000
	0x03257E78 ADD X10, X10, 0x4BA

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+56]
	004 Move X19, X0
	005 Move X1, X31
	006 Add W9, W8, 7
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSEL not yet implemented."
	009 NotImplemented "Instruction SBFM not yet implemented."
	010 Call Utils.GenerateRandom, X0
	011 Move [X19+32], X0
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return 

Method: System.Void GenerateIV()

Disassembly:
	0x03257E7C ADR X11, 0x10
	0x03257E80 LDRB W12, [X10, X9, LSL]
	0x03257E84 ADD X11, X11, X12, 0x2, LSL
	0x03257E88 BR X11
	0x03257E8C LDUR W9, [X29 - 0x34]
	0x03257E90 SUBS W28, W8, W9
	0x03257E94 B.EQ 0x3257F00
	0x03257E98 ADRP X8, 0xE9C000
	0x03257E9C LDR X8, [X8 + 0x618]
	0x03257EA0 MOV W1, W28
	0x03257EA4 LDR X0, [X8]
	0x03257EA8 BL 0x1C16D6C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+16]
	004 Move X19, X0
	005 Move X1, X31
	006 Add W9, W8, 7
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSEL not yet implemented."
	009 NotImplemented "Instruction SBFM not yet implemented."
	010 Call Utils.GenerateRandom, X0
	011 Move [X19+24], X0
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return 

Method: System.Security.Cryptography.ICryptoTransform NewEncryptor(System.Byte[] rgbKey, System.Security.Cryptography.CipherMode mode, System.Byte[] rgbIV, System.Int32 feedbackSize, System.Security.Cryptography.RijndaelManagedTransformMode encryptMode)

Disassembly:
	0x03257D44 ADRP X0, 0xECA000
	0x03257D48 LDR X0, [X0 + 0xE38]
	0x03257D4C BL 0x1C16D08
	0x03257D50 MOV X1, X0
	0x03257D54 MOV X0, X20
	0x03257D58 MOV X2, X19
	0x03257D5C MOV X3, X31
	0x03257D60 BL 0x3311888
	0x03257D64 B 0x3257DA0
	0x03257D68 ADRP X0, 0xEC4000
	0x03257D6C LDR X0, [X0 + 0x760]
	0x03257D70 BL 0x1C16D08
	0x03257D74 MOV X1, X31
	0x03257D78 BL 0x33BDD84
	0x03257D7C MOV X19, X0
	0x03257D80 ADRP X0, 0xEA4000
	0x03257D84 LDR X0, [X0 + 0x578]
	0x03257D88 BL 0x1C16D08
	0x03257D8C BL 0x1C16F10
	0x03257D90 MOV X1, X19
	0x03257D94 MOV X2, X31
	0x03257D98 MOV X20, X0
	0x03257D9C BL 0x3314A68
	0x03257DA0 ADRP X0, 0xECC000
	0x03257DA4 LDR X0, [X0 + 0x1E8]
	0x03257DA8 BL 0x1C16D08
	0x03257DAC MOV X1, X0
	0x03257DB0 MOV X0, X20
	0x03257DB4 BL 0x1C16DEC
	0x03257DB8 STP X29, X30, [X31 - 0x60]!
	0x03257DBC STP X28, X27, [X31 + 0x10]
	0x03257DC0 STP X26, X25, [X31 + 0x20]
	0x03257DC4 STP X24, X23, [X31 + 0x30]
	0x03257DC8 STP X22, X21, [X31 + 0x40]
	0x03257DCC STP X20, X19, [X31 + 0x50]
	0x03257DD0 ADD X29, X31, 0x0
	0x03257DD4 SUB X31, X31, 0x60
	0x03257DD8 MRS X27, 0xC000
	0x03257DDC LDR X8, [X27 + 0x28]
	0x03257DE0 ADRP X26, 0x1185000
	0x03257DE4 MOV W25, W7
	0x03257DE8 MOV W23, W6
	0x03257DEC STUR X8, [X29 - 0x8]
	0x03257DF0 LDRB W8, [X26 + 0x508]
	0x03257DF4 MOV W24, W5
	0x03257DF8 MOV X19, X4
	0x03257DFC MOV W28, W3
	0x03257E00 MOV W20, W2
	0x03257E04 MOV X21, X1
	0x03257E08 MOV X22, X0
	0x03257E0C TBNZ X8, 0x0, 0x3257E3C
	0x03257E10 ADRP X0, 0xE9C000
	0x03257E14 LDR X0, [X0 + 0x618]
	0x03257E18 BL 0x1C16CF4
	0x03257E1C ADRP X0, 0xECC000
	0x03257E20 LDR X0, [X0 + 0x1F0]
	0x03257E24 BL 0x1C16CF4
	0x03257E28 ADRP X0, 0xECC000
	0x03257E2C LDR X0, [X0 + 0x1A8]
	0x03257E30 BL 0x1C16CF4
	0x03257E34 MOVZ W8, 0x1

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+32], X26
	004 Move [X31+40], X25
	005 Move [X31+48], X24
	006 Move [X31+56], X23
	007 Move [X31+64], X22
	008 Move [X31+72], X21
	009 Move [X31+80], X20
	010 Move [X31+88], X19
	011 Move X25, 0x1186000
	012 Move W8, [X25+1284]
	013 Move W19, W5
	014 Move W20, W4
	015 Move X22, X3
	016 Move W21, W2
	017 Move X23, X1
	018 Move X24, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0xECD000
	024 Move X0, [X0+424]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X25+1284], W8
	028 Compare X23, 0
	029 JumpIfNotEqual {38}
	030 Move W8, [X24+56]
	031 Move X1, X31
	032 Add W9, W8, 7
	033 NotImplemented "Instruction CMP not yet implemented."
	034 NotImplemented "Instruction CSEL not yet implemented."
	035 NotImplemented "Instruction SBFM not yet implemented."
	036 Call Utils.GenerateRandom, X0
	037 Move X23, X0
	038 Move X26, 0xECD000
	039 Move X26, [X26+424]
	040 Compare X22, 0
	041 JumpIfNotEqual {50}
	042 Move W8, [X24+16]
	043 Move X1, X31
	044 Add W9, W8, 7
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction CSEL not yet implemented."
	047 NotImplemented "Instruction SBFM not yet implemented."
	048 Call Utils.GenerateRandom, X0
	049 Move X22, X0
	050 Move X0, [X26]
	051 Move W25, [X24+16]
	052 Move W24, [X24+64]
	053 Call 0x1C17F10
	054 Move X1, X23
	055 Move W2, W21
	056 Move X3, X22
	057 Move W4, W25
	058 Move W5, W20
	059 Move W6, W24
	060 Move W7, W19
	061 Move X26, X0
	062 Call RijndaelManagedTransform..ctor, X0, X1, X2, X3, X4, X5, X6, X7
	063 Move X0, X26
	064 Move X20, [X31+80]
	065 Move X19, [X31+88]
	066 Move X22, [X31+64]
	067 Move X21, [X31+72]
	068 Move X24, [X31+48]
	069 Move X23, [X31+56]
	070 Move X26, [X31+32]
	071 Move X25, [X31+40]
	072 Move X30, [X31+16]
	073 Add X31, X31, 96
	074 Return X0

