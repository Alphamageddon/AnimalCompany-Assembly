Type: System.Security.Cryptography.DSACryptoServiceProvider

Method: System.Void .ctor()

Disassembly:
	0x032656DC CBZ X0, 0x3265704
	0x032656E0 LDR X22, [X23]
	0x032656E4 MOV X21, X0
	0x032656E8 MOV X1, X22
	0x032656EC BL 0x1C16E00
	0x032656F0 MOV X20, X0
	0x032656F4 CBNZ X0, 0x3265708
	0x032656F8 MOV X0, X21
	0x032656FC MOV X1, X22
	0x03265700 BL 0x1C171E0
	0x03265704 MOV X20, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, 1
	004 Move X1, X31
	005 Move X19, X0
	006 Move [X0+42], W8
	007 Call DSA..ctor, X0
	008 Move W1, 1024
	009 Move X0, X19
	010 Move W2, W31
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Call DSACryptoServiceProvider.Common, X0, X1, X2
	014 Return 

Method: System.Void .ctor(System.Int32 dwKeySize)

Disassembly:
	0x032677F0 LDP W24, W25, [X8 + 0xB8]
	0x032677F4 EXTR W23, W23, W23, 0x15
	0x032677F8 ADD W26, W21, W4
	0x032677FC EOR W21, W22, W21, 0x0
	0x03267800 ADD W23, W23, W22
	0x03267804 ADD W20, W20, W6
	0x03267808 EOR W21, W21, W23, 0x0
	0x0326780C ADD W20, W20, W21
	0x03267810 ADD W20, W20, W24
	0x03267814 EXTR W20, W20, W20, 0x10
	0x03267818 EOR W21, W23, W22, 0x0
	0x0326781C ADD W20, W20, W23
	0x03267820 EOR W21, W21, W20, 0x0
	0x03267824 ADD W21, W26, W21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move W8, 1
	006 Move X1, X31
	007 Move X20, X0
	008 Move [X0+42], W8
	009 Call DSA..ctor, X0
	010 Move X0, X20
	011 Move W1, W19
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move W2, W31
	015 Move X30, [X31+32]

Method: System.Void Common(System.Int32 dwKeySize, System.Boolean parameters)

Disassembly:
	0x03267828 ADD W21, W21, W25
	0x0326782C LDP W24, W26, [X8 + 0xC0]
	0x03267830 EXTR W21, W21, W21, 0x9
	0x03267834 ADD W25, W23, W3
	0x03267838 EOR W23, W20, W23, 0x0
	0x0326783C ADD W21, W21, W20
	0x03267840 ADD W22, W22, W5
	0x03267844 EOR W23, W23, W21, 0x0
	0x03267848 ADD W22, W22, W23
	0x0326784C ADD W22, W22, W24
	0x03267850 EXTR W22, W22, W22, 0x1C
	0x03267854 EOR W23, W21, W20, 0x0
	0x03267858 ADD W22, W22, W21
	0x0326785C EOR W23, W23, W22, 0x0
	0x03267860 ADD W23, W25, W23
	0x03267864 ADD W23, W23, W26
	0x03267868 LDP W24, W25, [X8 + 0xC8]
	0x0326786C EXTR W23, W23, W23, 0x15
	0x03267870 ADD W26, W21, W17
	0x03267874 EOR W21, W22, W21, 0x0
	0x03267878 ADD W23, W23, W22
	0x0326787C ADD W20, W20, W15
	0x03267880 EOR W21, W21, W23, 0x0
	0x03267884 ADD W20, W20, W21
	0x03267888 ADD W20, W20, W24
	0x0326788C EXTR W20, W20, W20, 0x10
	0x03267890 EOR W21, W23, W22, 0x0
	0x03267894 ADD W20, W20, W23
	0x03267898 EOR W21, W21, W20, 0x0
	0x0326789C ADD W21, W26, W21
	0x032678A0 ADD W21, W21, W25
	0x032678A4 LDP W24, W26, [X8 + 0xD0]
	0x032678A8 EXTR W21, W21, W21, 0x9
	0x032678AC ADD W25, W23, W7
	0x032678B0 EOR W23, W20, W23, 0x0
	0x032678B4 ADD W21, W21, W20
	0x032678B8 ADD W22, W22, W16
	0x032678BC EOR W23, W23, W21, 0x0
	0x032678C0 ADD W22, W22, W23
	0x032678C4 ADD W22, W22, W24
	0x032678C8 EXTR W22, W22, W22, 0x1C
	0x032678CC EOR W23, W21, W20, 0x0
	0x032678D0 ADD W22, W22, W21
	0x032678D4 EOR W23, W23, W22, 0x0
	0x032678D8 ADD W23, W25, W23
	0x032678DC ADD W23, W23, W26
	0x032678E0 LDP W24, W25, [X8 + 0xD8]
	0x032678E4 EXTR W23, W23, W23, 0x15
	0x032678E8 EOR W26, W22, W21, 0x0
	0x032678EC ADD W23, W23, W22
	0x032678F0 ADD W20, W20, W13
	0x032678F4 EOR W26, W26, W23, 0x0
	0x032678F8 ADD W20, W20, W26
	0x032678FC ADD W20, W20, W24
	0x03267900 EXTR W20, W20, W20, 0x10
	0x03267904 ADD W3, W22, W3
	0x03267908 EOR W22, W23, W22, 0x0
	0x0326790C ADD W20, W20, W23
	0x03267910 ADD W21, W21, W11
	0x03267914 EOR W22, W22, W20, 0x0
	0x03267918 ADD W21, W21, W22
	0x0326791C ADD W21, W21, W25
	0x03267920 EXTR W21, W21, W21, 0x9
	0x03267924 LDP W24, W26, [X8 + 0xE0]
	0x03267928 ADD W21, W21, W20
	0x0326792C ADD W6, W23, W6
	0x03267930 ORN W23, W21, W23, 0x0
	0x03267934 EOR W23, W23, W20, 0x0
	0x03267938 ADD W3, W3, W23
	0x0326793C ADD W23, W3, W24
	0x03267940 EXTR W23, W23, W23, 0x1A
	0x03267944 ADD W23, W23, W21
	0x03267948 ADD W19, W20, W19
	0x0326794C ORN W20, W23, W20, 0x0
	0x03267950 EOR W20, W20, W21, 0x0
	0x03267954 ADD W6, W6, W20
	0x03267958 ADD W20, W6, W26
	0x0326795C EXTR W20, W20, W20, 0x16
	0x03267960 LDP W22, W25, [X8 + 0xE8]
	0x03267964 ADD W20, W20, W23
	0x03267968 ADD W2, W21, W2
	0x0326796C ORN W21, W20, W21, 0x0
	0x03267970 EOR W21, W21, W23, 0x0
	0x03267974 ADD W19, W19, W21
	0x03267978 ADD W19, W19, W22
	0x0326797C EXTR W19, W19, W19, 0x11
	0x03267980 ADD W19, W19, W20
	0x03267984 ADD W7, W23, W7
	0x03267988 ORN W23, W19, W23, 0x0
	0x0326798C EOR W23, W23, W20, 0x0
	0x03267990 ADD W2, W2, W23
	0x03267994 ADD W2, W2, W25
	0x03267998 ADD W27, W20, W15
	0x0326799C EXTR W15, W2, W2, 0xB
	0x032679A0 LDP W24, W3, [X8 + 0xF0]
	0x032679A4 ADD W28, W15, W19
	0x032679A8 ORN W15, W28, W20, 0x0
	0x032679AC EOR W15, W15, W19, 0x0
	0x032679B0 ADD W15, W7, W15
	0x032679B4 ADD W2, W15, W24
	0x032679B8 EXTR W2, W2, W2, 0x1A
	0x032679BC ADD W20, W2, W28
	0x032679C0 ORN W2, W20, W19, 0x0
	0x032679C4 EOR W2, W2, W28, 0x0
	0x032679C8 ADD W4, W19, W4
	0x032679CC ADD W19, W27, W2
	0x032679D0 ADD W3, W19, W3
	0x032679D4 EXTR W3, W3, W3, 0x16
	0x032679D8 LDP W6, W26, [X8 + 0xF8]
	0x032679DC ADD W3, W3, W20
	0x032679E0 ORN W24, W3, W28, 0x0
	0x032679E4 EOR W24, W24, W20, 0x0
	0x032679E8 ADD W4, W4, W24
	0x032679EC ADD W4, W4, W6
	0x032679F0 EXTR W4, W4, W4, 0x11
	0x032679F4 ADD W4, W4, W3
	0x032679F8 ORN W6, W4, W20, 0x0
	0x032679FC ADD W12, W28, W12
	0x03267A00 ADD W1, W20, W1
	0x03267A04 ADD W20, W4, W17
	0x03267A08 EOR W17, W6, W3, 0x0
	0x03267A0C ADD W12, W12, W17
	0x03267A10 ADD W12, W12, W26
	0x03267A14 EXTR W12, W12, W12, 0xB
	0x03267A18 LDR W21, [X8 + 0x100]
	0x03267A1C ADD W12, W12, W4

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x1176000
	009 Move X24, 0xEBB000
	010 Move X23, 0xEBB000
	011 Move W8, [X22+1386]
	012 Move X24, [X24+1312]
	013 Move X23, [X23+1320]
	014 Move W20, W2
	015 Move W21, W1
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {47}
	021 Move X0, 0xEBB000
	022 Move X0, [X0+1224]
	023 Call 0x1C17CF4
	024 Move X0, 0xEBD000
	025 Move X0, [X0+2216]
	026 Call 0x1C17CF4
	027 Move X0, 0xEBA000
	028 Move X0, [X0+3904]
	029 Call 0x1C17CF4
	030 Move X0, 0xEBD000
	031 Move X0, [X0+2224]
	032 Call 0x1C17CF4
	033 Move X0, 0xEBB000
	034 Move X0, [X0+3888]
	035 Call 0x1C17CF4
	036 Move X0, 0xEBB000
	037 Move X0, [X0+3216]
	038 Call 0x1C17CF4
	039 Move X0, 0xEBB000
	040 Move X0, [X0+1312]
	041 Call 0x1C17CF4
	042 Move X0, 0xEBB000
	043 Move X0, [X0+1320]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X22+1386], W8
	047 Move X0, [X24]
	048 Move W1, 1
	049 Call 0x1C17D6C
	050 Move [X19+24], X0
	051 Move X22, X0
	052 Move X0, [X23]
	053 Call 0x1C17F10
	054 Move W1, 512
	055 Move W2, 1024
	056 Move W3, 64
	057 Move X4, X31
	058 Move X23, X0
	059 Call KeySizes..ctor, X0, X1, X2, X3
	060 Compare X22, 0
	061 JumpIfEqual {143}
	062 Move W8, [X22+24]
	063 Compare W8, 0
	064 JumpIfEqual {144}
	065 Move [X22+32], X23
	066 Move X8, [X19]
	067 Move X22, 0xEBD000
	068 Move X23, 0xEBB000
	069 Move X24, 0xEBD000
	070 Move X9, [X8+424]
	071 Move X2, [X8+432]
	072 Move X22, [X22+2224]
	073 Move X23, [X23+3888]
	074 Move X24, [X24+2216]
	075 Move X0, X19
	076 Move W1, W21
	077 NotImplemented "Instruction BLR not yet implemented."
	078 Move X0, [X22]
	079 Call 0x1C17F10
	080 Move W1, W21
	081 Move X2, X31
	082 Move X22, X0
	083 Call DSAManaged..ctor, X0, X1
	084 Move [X19+48], X22
	085 Move X0, [X23]
	086 Call 0x1C17F10
	087 Move X2, [X24]
	088 Move X1, X19
	089 Move X3, X31
	090 Move X21, X0
	091 Call KeyGeneratedEventHandler..ctor, X0, X1, X2
	092 Compare X22, 0
	093 JumpIfEqual {143}
	094 Move X0, X22
	095 Move X1, X21
	096 Move X2, X31
	097 And W23, W20, 1
	098 Call DSAManaged.add_KeyGenerated, X0, X1
	099 Move [X19+40], W23
	100 Move TEMP, X20
	101 And TEMP, TEMP, 1
	102 Compare TEMP, 1
	103 JumpIfEqual {135}
	104 Move X8, 0xEBB000
	105 Move X8, [X8+1224]
	106 Move X0, [X8]
	107 Call 0x1C17F10
	108 Move W1, 13
	109 Move X2, X31
	110 Move X20, X0
	111 Call CspParameters..ctor, X0, X1
	112 Move X8, 0xEBA000
	113 Move X8, [X8+3904]
	114 Move X8, [X8]
	115 Move X8, [X8+184]
	116 Move W8, [X8]
	117 Compare W8, 0
	118 JumpIfEqual {126}
	119 Compare X20, 0
	120 JumpIfEqual {143}
	121 Move W8, [X20+44]
	122 Move X0, X20
	123 Move X2, X31
	124 Or W1, W8, 1
	125 Call CspParameters.set_Flags, X0, X1
	126 Move X8, 0xEBB000
	127 Move X8, [X8+3216]
	128 Move X0, [X8]
	129 Call 0x1C17F10
	130 Move X1, X20
	131 Move X2, X31
	132 Move X21, X0
	133 Call KeyPairPersistence..ctor, X0, X1
	134 Move [X19+32], X21
	135 Move X20, [X31+48]
	136 Move X19, [X31+56]
	137 Move X22, [X31+32]
	138 Move X21, [X31+40]
	139 Move X24, [X31+16]
	140 Move X23, [X31+24]
	141 Move X30, [X31+64]
	142 Return 
	143 Call 0x1C17F20
	144 Call 0x1C17F28

Method: System.Void Finalize()

Disassembly:
	0x03267A20 ORN W17, W12, W3, 0x0
	0x03267A24 EOR W17, W17, W4, 0x0
	0x03267A28 ADD W17, W1, W17
	0x03267A2C ADD W17, W17, W21
	0x03267A30 EXTR W17, W17, W17, 0x1A
	0x03267A34 LDR W22, [X8 + 0x104]
	0x03267A38 ADD W1, W17, W12
	0x03267A3C ORN W17, W1, W4, 0x0
	0x03267A40 ADD W13, W3, W13
	0x03267A44 ADD W4, W1, W14
	0x03267A48 EOR W14, W17, W12, 0x0
	0x03267A4C ADD W13, W13, W14
	0x03267A50 ADD W13, W13, W22
	0x03267A54 EXTR W13, W13, W13, 0x16
	0x03267A58 LDR W23, [X8 + 0x108]
	0x03267A5C ADD W17, W13, W1
	0x03267A60 ADD W3, W12, W5
	0x03267A64 ORN W12, W17, W12, 0x0
	0x03267A68 EOR W12, W12, W1, 0x0
	0x03267A6C ADD W12, W20, W12
	0x03267A70 ADD W12, W12, W23
	0x03267A74 EXTR W12, W12, W12, 0x11
	0x03267A78 LDR W25, [X8 + 0x10C]
	0x03267A7C ADD W14, W12, W17
	0x03267A80 ORN W12, W14, W1, 0x0
	0x03267A84 EOR W12, W12, W17, 0x0
	0x03267A88 ADD W12, W3, W12
	0x03267A8C ADD W12, W12, W25
	0x03267A90 EXTR W12, W12, W12, 0xB
	0x03267A94 LDR W7, [X8 + 0x110]
	0x03267A98 ADD W12, W12, W14
	0x03267A9C ORN W13, W12, W17, 0x0
	0x03267AA0 EOR W13, W13, W14, 0x0
	0x03267AA4 LDR W19, [X9 + 0x20]
	0x03267AA8 ADD W13, W4, W13
	0x03267AAC LDR W15, [X8 + 0x114]
	0x03267AB0 LDR W2, [X8 + 0x118]
	0x03267AB4 LDR W8, [X8 + 0x11C]
	0x03267AB8 ADD W13, W13, W7
	0x03267ABC EXTR W13, W13, W13, 0x1A

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X0]
	006 Move X19, X0
	007 Move X9, [X8+392]
	008 Move X2, [X8+400]
	009 Move W1, W31
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Move X0, X19
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X1, X31
	015 Move X30, [X31+32]
	016 Move X21, [X31+40]
	017 Call Object.Finalize, X0
	018 Return 
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X21, X0
	021 Move X0, X21
	022 Call 0x3EB2AD0
	023 Move X20, [X0]
	024 Call 0x3EB2AE0
	025 Move X0, X19
	026 Move X1, X31
	027 Call Object.Finalize, X0
	028 Compare X20, 0
	029 JumpIfNotEqual {36}
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return 
	035 Move X20, X31
	036 Move X0, X20
	037 Call 0x1C17F18
	038 Move X21, X0
	039 Move X0, X19
	040 Move X1, X31
	041 Call Object.Finalize, X0
	042 Compare X20, 0
	043 JumpIfNotEqual {46}
	044 Move X0, X21
	045 Call 0x1D2D690
	046 Move X0, X20
	047 Call 0x1C17F18
	048 Call 0x1991590

Method: System.Int32 get_KeySize()

Disassembly:
	0x03267AC0 ADD W13, W13, W12
	0x03267AC4 ADD W1, W19, W13
	0x03267AC8 STR W1, [X9 + 0x20]
	0x03267ACC B.EQ 0x3267B74
	0x03267AD0 ORN W1, W13, W14, 0x0
	0x03267AD4 ADD W17, W17, W0
	0x03267AD8 ADD W14, W14, W11
	0x03267ADC EOR W11, W1, W12, 0x0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+408]
	007 Move X1, [X8+416]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Boolean get_PublicOnly()

Disassembly:
	0x03267AE0 ADD W11, W17, W11
	0x03267AE4 ADD W11, W11, W15
	0x03267AE8 EXTR W11, W11, W11, 0x16
	0x03267AEC ADD W11, W11, W13
	0x03267AF0 ADD W16, W12, W16
	0x03267AF4 ORN W12, W11, W12, 0x0
	0x03267AF8 EOR W12, W12, W13, 0x0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call DSAManaged.get_PublicOnly, X0
	008 Return X0
	009 Call 0x1C17F20

Method: System.Security.Cryptography.DSAParameters ExportParameters(System.Boolean includePrivateParameters)

Disassembly:
	0x03267AFC ADD W12, W14, W12
	0x03267B00 ADD W12, W12, W2
	0x03267B04 EXTR W12, W12, W12, 0x11
	0x03267B08 ADD W12, W12, W11
	0x03267B0C ORN W13, W12, W13, 0x0
	0x03267B10 EOR W13, W13, W11, 0x0
	0x03267B14 LDR W0, [X9 + 0x24]
	0x03267B18 ADD W13, W16, W13
	0x03267B1C ADD W8, W13, W8
	0x03267B20 EXTR W8, W8, W8, 0xB
	0x03267B24 ADD W8, W8, W12
	0x03267B28 ADD W8, W8, W0
	0x03267B2C CMP W10, 0x2
	0x03267B30 STR W8, [X9 + 0x24]
	0x03267B34 B.LS 0x3267B74
	0x03267B38 LDR W8, [X9 + 0x28]
	0x03267B3C CMP W10, 0x3
	0x03267B40 ADD W8, W8, W12
	0x03267B44 STR W8, [X9 + 0x28]
	0x03267B48 B.EQ 0x3267B74
	0x03267B4C LDR W8, [X9 + 0x2C]
	0x03267B50 LDP X20, X19, [X31 + 0x50]
	0x03267B54 LDP X22, X21, [X31 + 0x40]
	0x03267B58 LDP X24, X23, [X31 + 0x30]
	0x03267B5C LDP X26, X25, [X31 + 0x20]
	0x03267B60 LDP X28, X27, [X31 + 0x10]
	0x03267B64 ADD W8, W8, W11
	0x03267B68 STR W8, [X9 + 0x2C]
	0x03267B6C LDR X30, [X31], #0x60
	0x03267B70 RET
	0x03267B74 BL 0x1C16F28
	0x03267B78 BL 0x1C16F20
	0x03267B7C STP X30, X21, [X31 - 0x20]!
	0x03267B80 STP X20, X19, [X31 + 0x10]
	0x03267B84 ADRP X20, 0x1175000
	0x03267B88 ADRP X21, 0xE8C000
	0x03267B8C LDRB W8, [X20 + 0x56C]
	0x03267B90 LDR X21, [X21 + 0x618]
	0x03267B94 MOV X19, X0
	0x03267B98 TBNZ X8, 0x0, 0x3267BB0
	0x03267B9C ADRP X0, 0xE8C000
	0x03267BA0 LDR X0, [X0 + 0x618]
	0x03267BA4 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+80], X20
	004 Move [X31+88], X19
	005 Move X19, X8
	006 Move TEMP, X1
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfNotEqual {13}
	010 Move W8, [X0+42]
	011 Compare W8, 0
	012 JumpIfEqual {36}
	013 Move X0, [X0+48]
	014 Compare X0, 0
	015 JumpIfEqual {35}
	016 Move X8, [X0]
	017 And W1, W1, 1
	018 Move X9, [X8+488]
	019 Move X2, [X8+496]
	020 Add X8, X31, 0
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Move V1, [X31+32]
	023 Move V0, [X31+48]
	024 Move V3, [X31]
	025 Move V2, [X31+16]
	026 Move X30, [X31+64]
	027 Move [X19+32], V1
	028 Move [X19+40], V0
	029 Move [X19], V3
	030 Move [X19+8], V2
	031 Move X20, [X31+80]
	032 Move X19, [X31+88]
	033 Add X31, X31, 96
	034 Return X0
	035 Call 0x1C17F20
	036 Move X0, 0xEBD000
	037 Move X0, [X0+2232]
	038 Call 0x1C17D08
	039 Move X1, X31
	040 Call Locale.GetText, X0
	041 Move X19, X0
	042 Move X0, 0xEBA000
	043 Move X0, [X0+3296]
	044 Call 0x1C17D08
	045 Call 0x1C17F10
	046 Move X1, X19
	047 Move X2, X31
	048 Move X20, X0
	049 Call CryptographicException..ctor, X0, X1
	050 Move X0, 0xEBD000
	051 Move X0, [X0+2240]
	052 Call 0x1C17D08
	053 Move X1, X0
	054 Move X0, X20
	055 Call 0x1C17DEC

Method: System.Void ImportParameters(System.Security.Cryptography.DSAParameters parameters)

Disassembly:
	0x03267BA8 MOVZ W8, 0x1
	0x03267BAC STRB W8, [X20 + 0x56C]
	0x03267BB0 LDR X0, [X21]
	0x03267BB4 MOVZ W1, 0x10
	0x03267BB8 BL 0x1C16D6C
	0x03267BBC LDR X1, [X19 + 0x40]
	0x03267BC0 LDR W3, [X19 + 0x48]
	0x03267BC4 MOV X20, X0
	0x03267BC8 MOV X0, X19
	0x03267BCC MOV W2, W31
	0x03267BD0 BL 0x3267C54
	0x03267BD4 MOV X8, X31
	0x03267BD8 MOV X9, X31
	0x03267BDC ADD X10, X20, 0x20
	0x03267BE0 MOV X11, X31
	0x03267BE4 MOV X12, X8
	0x03267BE8 LDR X13, [X19 + 0x28]
	0x03267BEC CBZ X13, 0x3267C4C
	0x03267BF0 LDR W14, [X13 + 0x18]
	0x03267BF4 CMP X9, X14
	0x03267BF8 B.CS 0x3267C50

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+128], X30
	003 Move V0, [X1+32]
	004 Move V1, [X1+48]
	005 Move V2, [X1]
	006 Move V3, [X1+16]
	007 Move X0, [X0+48]
	008 Move [X31+32], V0
	009 Move [X31+40], V1
	010 Move [X31], V2
	011 Move [X31+8], V3
	012 Compare X0, 0
	013 JumpIfEqual {30}
	014 Move X8, [X0]
	015 Move V0, [X31]
	016 Move V1, [X31+16]
	017 Move V2, [X31+32]
	018 Move V3, [X31+48]
	019 Add X1, X31, 64
	020 Move X9, [X8+504]
	021 Move [X31+64], V0
	022 Move [X31+72], V1
	023 Move [X31+96], V2
	024 Move [X31+104], V3
	025 Move X2, [X8+512]
	026 NotImplemented "Instruction BLR not yet implemented."
	027 Move X30, [X31+128]
	028 Add X31, X31, 144
	029 Return 
	030 Call 0x1C17F20

Method: System.Boolean VerifySignature(System.Byte[] rgbHash, System.Byte[] rgbSignature)

Disassembly:
	0x03267BFC CBZ X20, 0x3267C4C
	0x03267C00 LDR W14, [X20 + 0x18]
	0x03267C04 CMP X12, X14
	0x03267C08 B.CS 0x3267C50
	0x03267C0C ADD X13, X13, X9, 0x2, LSL
	0x03267C10 LDR W13, [X13 + 0x20]
	0x03267C14 LSRV W13, W13, W11
	0x03267C18 ADD X11, X11, 0x8

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X4, [X8+472]
	007 Move X3, [X8+480]
	008 Move X30, [X31+16]
	009 CallNoReturn X4
	010 Call 0x1C17F20

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x03267C1C STRB W13, [X10, X12, LSL]
	0x03267C20 CMP X11, 0x20
	0x03267C24 ADD X12, X12, 0x1
	0x03267C28 B.NE 0x3267BE8
	0x03267C2C ADD X9, X9, 0x1
	0x03267C30 CMP X9, 0x4
	0x03267C34 ADD X8, X8, 0x4
	0x03267C38 B.NE 0x3267BE0
	0x03267C3C MOV X0, X20
	0x03267C40 LDP X20, X19, [X31 + 0x10]
	0x03267C44 LDP X30, X21, [X31], #0x20
	0x03267C48 RET
	0x03267C4C BL 0x1C16F20
	0x03267C50 BL 0x1C16F28
	0x03267C54 STR X30, [X31 - 0x60]!
	0x03267C58 STP X28, X27, [X31 + 0x10]
	0x03267C5C STP X26, X25, [X31 + 0x20]
	0x03267C60 STP X24, X23, [X31 + 0x30]
	0x03267C64 STP X22, X21, [X31 + 0x40]
	0x03267C68 STP X20, X19, [X31 + 0x50]
	0x03267C6C ADRP X21, 0x1175000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+43]
	004 Compare W8, 0
	005 JumpIfNotEqual {25}
	006 Move W8, [X0+41]
	007 Move X19, X0
	008 Compare W8, 0
	009 JumpIfEqual {18}
	010 Move W8, [X19+40]
	011 Compare W8, 0
	012 JumpIfNotEqual {18}
	013 Move X0, [X19+32]
	014 Compare X0, 0
	015 JumpIfEqual {28}
	016 Move X1, X31
	017 Call KeyPairPersistence.Remove, X0
	018 Move X0, [X19+48]
	019 Compare X0, 0
	020 JumpIfEqual {23}
	021 Move X1, X31
	022 Call AsymmetricAlgorithm.Clear, X0
	023 Move W8, 1
	024 Move [X19+43], W8
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Return 
	028 Call 0x1C17F20

Method: System.Void OnKeyGenerated(System.Object sender, System.EventArgs e)

Disassembly:
	0x03267C70 ADRP X20, 0xE8C000
	0x03267C74 LDRB W8, [X21 + 0x56E]
	0x03267C78 LDR X20, [X20 + 0x618]
	0x03267C7C MOV W23, W3
	0x03267C80 MOV W25, W2
	0x03267C84 MOV X24, X1
	0x03267C88 MOV X19, X0
	0x03267C8C TBNZ X8, 0x0, 0x3267CA4
	0x03267C90 ADRP X0, 0xE8C000
	0x03267C94 LDR X0, [X0 + 0x618]
	0x03267C98 BL 0x1C16CF4
	0x03267C9C MOVZ W8, 0x1
	0x03267CA0 STRB W8, [X21 + 0x56E]
	0x03267CA4 LDR X8, [X19 + 0x38]
	0x03267CA8 MOVZ W9, 0x78
	0x03267CAC MOVZ W10, 0x38
	0x03267CB0 LDR X0, [X20]
	0x03267CB4 ADD X26, X8, W23, SXTW
	0x03267CB8 AND W27, W26, 0x3F
	0x03267CBC CMP W27, 0x38
	0x03267CC0 CSEL W28, W10, W9, CC
	0x03267CC4 SUB W8, W28, W27
	0x03267CC8 ADD W22, W8, W23
	0x03267CCC ADD W20, W22, 0x8
	0x03267CD0 MOV W1, W20
	0x03267CD4 BL 0x1C16D6C
	0x03267CD8 CMP W23, 0x1
	0x03267CDC MOV X21, X0
	0x03267CE0 B.LT 0x3267D34
	0x03267CE4 CBZ X24, 0x3267DFC
	0x03267CE8 MOV X8, X31
	0x03267CEC MOV W9, W23
	0x03267CF0 ADD X10, X21, 0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+40]
	005 Compare W8, 0
	006 JumpIfEqual {37}
	007 Move W8, [X0+41]
	008 Move X19, X0
	009 Compare W8, 0
	010 JumpIfNotEqual {37}
	011 Move X0, [X19+48]
	012 Compare X0, 0
	013 JumpIfEqual {41}
	014 Move X20, [X19+32]
	015 Move X1, X31
	016 Call DSAManaged.get_PublicOnly, X0
	017 Move X8, [X19]
	018 Move X9, [X8+456]
	019 Move X2, [X8+464]
	020 NotImplemented "Instruction ORN not yet implemented."
	021 And W1, W8, 1
	022 Move X0, X19
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Compare X20, 0
	025 JumpIfEqual {41}
	026 Move X1, X0
	027 Move X0, X20
	028 Move X2, X31
	029 Call KeyPairPersistence.set_KeyValue, X0, X1
	030 Move X0, [X19+32]
	031 Compare X0, 0
	032 JumpIfEqual {41}
	033 Move X1, X31
	034 Call KeyPairPersistence.Save, X0
	035 Move W8, 1
	036 Move [X19+41], W8
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Return 
	041 Call 0x1C17F20

