Type: System.Security.Cryptography.DES

Method: System.Void .ctor()

Disassembly:
	0x03253648 LDR W9, [X8 + 0xE0]
	0x0325364C CBNZ W9, 0x3253658
	0x03253650 MOV X0, X8
	0x03253654 BL 0x1C16DFC
	0x03253658 MOV X0, X26
	0x0325365C MOV X1, X31
	0x03253660 BL 0x3322D04
	0x03253664 MOV X26, X0
	0x03253668 B 0x3253670
	0x0325366C MOV X26, X31
	0x03253670 LDR X1, [X28]
	0x03253674 MOV X0, X21
	0x03253678 BL 0x324A57C
	0x0325367C LDR X1, [X27]
	0x03253680 MOV X27, X0
	0x03253684 MOV X0, X21
	0x03253688 BL 0x324A57C
	0x0325368C MOV X28, X0
	0x03253690 CBZ X27, 0x32536EC
	0x03253694 CBZ X28, 0x32536EC
	0x03253698 MOV X0, X27
	0x0325369C MOV X1, X31
	0x032536A0 BL 0x3262278
	0x032536A4 LDR X8, [X29]
	0x032536A8 MOV X21, X0
	0x032536AC LDR W9, [X8 + 0xE0]
	0x032536B0 CBNZ W9, 0x32536BC
	0x032536B4 MOV X0, X8
	0x032536B8 BL 0x1C16DFC
	0x032536BC MOV X0, X21
	0x032536C0 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x118A000
	006 Move X20, 0xECF000
	007 Move W8, [X21+1222]
	008 Move X20, [X20+800]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xECF000
	015 Move X0, [X0+800]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1222], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call SymmetricAlgorithm..ctor, X0
	022 Move W8, 64
	023 NotImplemented "Instruction MOVI not yet implemented."
	024 Move [X19+56], W8
	025 Move [X19+16], D0
	026 Move X0, [X20]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X20]
	032 Move X8, [X0+184]
	033 Move V0, [X8]
	034 Move [X19+40], V0
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return 

Method: System.Byte[] get_Key()

Disassembly:
	0x032536C4 BL 0x3322D04
	0x032536C8 MOV X21, X0
	0x032536CC MOV X0, X28
	0x032536D0 MOV X1, X31
	0x032536D4 BL 0x3262278
	0x032536D8 MOV X1, X31
	0x032536DC BL 0x3322D04
	0x032536E0 MOV X1, X31
	0x032536E4 BL 0x326241C
	0x032536E8 B 0x32536FC
	0x032536EC ORR X8, X27, X28, 0x0
	0x032536F0 CBNZ X8, 0x3253998
	0x032536F4 MOV X21, X31
	0x032536F8 MOV W0, W31
	0x032536FC LDR X8, [X19]
	0x03253700 ADD X1, X31, 0x0
	0x03253704 LDR X9, [X8 + 0x1F8]
	0x03253708 STP X20, X22, [X31]
	0x0325370C STP X23, X24, [X31 + 0x10]
	0x03253710 STP X25, X26, [X31 + 0x20]
	0x03253714 STR X21, [X31 + 0x30]
	0x03253718 STP W0, W31, [X31 + 0x38]
	0x0325371C LDR X2, [X8 + 0x200]
	0x03253720 MOV X0, X19
	0x03253724 BLR X9
	0x03253728 LDP X20, X19, [X31 + 0x90]
	0x0325372C LDP X22, X21, [X31 + 0x80]
	0x03253730 LDP X24, X23, [X31 + 0x70]
	0x03253734 LDP X26, X25, [X31 + 0x60]
	0x03253738 LDP X28, X27, [X31 + 0x50]
	0x0325373C LDP X29, X30, [X31 + 0x40]
	0x03253740 ADD X31, X31, 0xA0
	0x03253744 RET
	0x03253748 ADRP X0, 0xEA5000
	0x0325374C LDR X0, [X0 + 0x528]
	0x03253750 BL 0x1C16D08
	0x03253754 BL 0x1C16F10
	0x03253758 MOV X19, X0
	0x0325375C ADRP X0, 0xECF000
	0x03253760 LDR X0, [X0 + 0xFC0]
	0x03253764 BL 0x1C16D08
	0x03253768 MOV X1, X0
	0x0325376C MOV X0, X19
	0x03253770 MOV X2, X31
	0x03253774 BL 0x330E100
	0x03253778 ADRP X0, 0xECF000
	0x0325377C LDR X0, [X0 + 0xFC8]
	0x03253780 BL 0x1C16D08
	0x03253784 MOV X1, X0
	0x03253788 MOV X0, X19
	0x0325378C BL 0x1C16DEC
	0x03253790 ADRP X0, 0xEA0000
	0x03253794 LDR X0, [X0 + 0x9D0]
	0x03253798 BL 0x1C16D08
	0x0325379C MOVZ W1, 0x2
	0x032537A0 BL 0x1C16D6C
	0x032537A4 MOV X19, X0
	0x032537A8 BL 0x19903C0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x118A000
	006 Move W8, [X20+1223]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xEA1000
	013 Move X0, [X0+1560]
	014 Call 0x1C17CF4
	015 Move X0, 0xECF000
	016 Move X0, [X0+800]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1223], W8
	020 Move X0, [X19+32]
	021 Compare X0, 0
	022 JumpIfNotEqual {55}
	023 Move X21, 0xECF000
	024 Move X21, [X21+800]
	025 Move X8, [X19]
	026 Move X0, X19
	027 Move X9, [X8+696]
	028 Move X1, [X8+704]
	029 NotImplemented "Instruction BLR not yet implemented."
	030 Move X0, [X21]
	031 Move X20, [X19+32]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X20
	037 Call DES.IsWeakKey, X0
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {25}
	042 Move X0, [X21]
	043 Move X20, [X19+32]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X0, X20
	049 Call DES.IsSemiWeakKey, X0
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfEqual {25}
	054 Move X0, [X19+32]
	055 Compare X0, 0
	056 JumpIfEqual {74}
	057 Move X1, X31
	058 Call Array.Clone, X0
	059 Compare X0, 0
	060 JumpIfEqual {69}
	061 Move X8, 0xEA1000
	062 Move X8, [X8+1560]
	063 Move X19, X0
	064 Move X20, [X8]
	065 Move X1, X20
	066 Call 0x1C17E00
	067 Compare X0, 0
	068 JumpIfEqual {75}
	069 Move X20, [X31+16]
	070 Move X19, [X31+24]
	071 Move X30, [X31+32]
	072 Move X21, [X31+40]
	073 Return X0
	074 Call 0x1C17F20
	075 Move X0, X19
	076 Move X1, X20
	077 Call 0x1C181E0

Method: System.Void set_Key(System.Byte[] value)

Disassembly:
	0x03253AD8 ADRP X0, 0xED0000
	0x03253ADC LDR X0, [X0 + 0x10]
	0x03253AE0 BL 0x1C16CF4
	0x03253AE4 ADRP X0, 0xED0000
	0x03253AE8 LDR X0, [X0 + 0x18]
	0x03253AEC BL 0x1C16CF4
	0x03253AF0 ADRP X0, 0xED0000
	0x03253AF4 LDR X0, [X0 + 0x20]
	0x03253AF8 BL 0x1C16CF4
	0x03253AFC ADRP X0, 0xECE000
	0x03253B00 LDR X0, [X0 + 0x648]
	0x03253B04 BL 0x1C16CF4
	0x03253B08 ADRP X0, 0xED0000
	0x03253B0C LDR X0, [X0 + 0x28]
	0x03253B10 BL 0x1C16CF4
	0x03253B14 ADRP X0, 0xED0000
	0x03253B18 LDR X0, [X0 + 0x30]
	0x03253B1C BL 0x1C16CF4
	0x03253B20 ADRP X0, 0xED0000
	0x03253B24 LDR X0, [X0 + 0x38]
	0x03253B28 BL 0x1C16CF4
	0x03253B2C ADRP X0, 0xED0000
	0x03253B30 LDR X0, [X0 + 0x40]
	0x03253B34 BL 0x1C16CF4
	0x03253B38 ADRP X0, 0xED0000
	0x03253B3C LDR X0, [X0 + 0x48]
	0x03253B40 BL 0x1C16CF4
	0x03253B44 MOVZ W8, 0x1
	0x03253B48 STRB W8, [X21 + 0x4D5]
	0x03253B4C LDR X8, [X20]
	0x03253B50 AND W1, W19, 0x1
	0x03253B54 MOV X0, X20
	0x03253B58 STR W19, [X31 + 0x1C]
	0x03253B5C LDP X9, X2, [X8 + 0x1E8]
	0x03253B60 ADD X8, X31, 0x20
	0x03253B64 BLR X9
	0x03253B68 LDP X24, X9, [X31 + 0x40]
	0x03253B6C LDP X21, X8, [X31 + 0x50]
	0x03253B70 LDR X0, [X29]
	0x03253B74 LDP X28, X27, [X31 + 0x20]
	0x03253B78 LDP X26, X25, [X31 + 0x30]
	0x03253B7C STP X9, X8, [X31 + 0x8]
	0x03253B80 BL 0x1C16F10
	0x03253B84 MOV X1, X31
	0x03253B88 MOV X20, X0
	0x03253B8C BL 0x3231AC4
	0x03253B90 CBZ X20, 0x3253E80
	0x03253B94 ADRP X8, 0xED0000
	0x03253B98 LDR X8, [X8 + 0x40]
	0x03253B9C ADRP X23, 0xEA9000
	0x03253BA0 ADRP X29, 0xECE000
	0x03253BA4 ADRP X19, 0xECE000
	0x03253BA8 ADRP X22, 0xECE000
	0x03253BAC LDR X23, [X23 + 0x9E8]
	0x03253BB0 LDR X29, [X29 + 0x610]
	0x03253BB4 LDR X19, [X19 + 0x608]
	0x03253BB8 LDR X22, [X22 + 0x618]
	0x03253BBC LDR X1, [X8]
	0x03253BC0 MOV X0, X20
	0x03253BC4 MOV X2, X31
	0x03253BC8 BL 0x32333E0
	0x03253BCC LDR X0, [X23]
	0x03253BD0 LDR W8, [X0 + 0xE0]
	0x03253BD4 CBNZ W8, 0x3253BDC
	0x03253BD8 BL 0x1C16DFC
	0x03253BDC MOV X0, X28
	0x03253BE0 MOV X1, X31
	0x03253BE4 BL 0x33225A0
	0x03253BE8 LDR X8, [X29]
	0x03253BEC LDR X2, [X19]
	0x03253BF0 MOV X1, X0
	0x03253BF4 MOV X3, X31
	0x03253BF8 MOV X0, X8
	0x03253BFC BL 0x32274B8
	0x03253C00 MOV X1, X0
	0x03253C04 MOV X0, X20
	0x03253C08 MOV X2, X31
	0x03253C0C BL 0x32333E0
	0x03253C10 MOV X0, X27
	0x03253C14 MOV X1, X31
	0x03253C18 BL 0x33225A0
	0x03253C1C ADRP X8, 0xECE000
	0x03253C20 LDR X8, [X8 + 0x648]
	0x03253C24 LDR X2, [X22]
	0x03253C28 MOV X1, X0
	0x03253C2C MOV X3, X31
	0x03253C30 LDR X8, [X8]
	0x03253C34 MOV X0, X8
	0x03253C38 BL 0x32274B8
	0x03253C3C MOV X1, X0
	0x03253C40 MOV X0, X20
	0x03253C44 MOV X2, X31
	0x03253C48 BL 0x32333E0
	0x03253C4C MOV X0, X26
	0x03253C50 MOV X1, X31
	0x03253C54 BL 0x33225A0
	0x03253C58 ADRP X8, 0xED0000
	0x03253C5C LDR X8, [X8 + 0x30]
	0x03253C60 ADRP X9, 0xED0000
	0x03253C64 MOV X1, X0
	0x03253C68 MOV X3, X31
	0x03253C6C LDR X8, [X8]
	0x03253C70 LDR X9, [X9 + 0x38]
	0x03253C74 MOV X0, X8
	0x03253C78 LDR X2, [X9]
	0x03253C7C BL 0x32274B8
	0x03253C80 MOV X1, X0
	0x03253C84 MOV X0, X20
	0x03253C88 MOV X2, X31
	0x03253C8C BL 0x32333E0
	0x03253C90 MOV X0, X25
	0x03253C94 MOV X1, X31
	0x03253C98 BL 0x33225A0
	0x03253C9C ADRP X8, 0xECF000
	0x03253CA0 LDR X8, [X8 + 0xFE8]
	0x03253CA4 ADRP X9, 0xECF000
	0x03253CA8 MOV X1, X0
	0x03253CAC MOV X3, X31
	0x03253CB0 LDR X8, [X8]
	0x03253CB4 LDR X9, [X9 + 0xFE0]
	0x03253CB8 MOV X0, X8
	0x03253CBC LDR X2, [X9]
	0x03253CC0 BL 0x32274B8
	0x03253CC4 MOV X1, X0
	0x03253CC8 MOV X0, X20
	0x03253CCC MOV X2, X31
	0x03253CD0 BL 0x32333E0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x118A000
	008 Move W8, [X21+1224]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xEA1000
	016 Move X0, [X0+1560]
	017 Call 0x1C17CF4
	018 Move X0, 0xECF000
	019 Move X0, [X0+800]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+1224], W8
	023 Compare X19, 0
	024 JumpIfEqual {96}
	025 Move W8, [X19+24]
	026 Move X0, X20
	027 Move X2, X31
	028 Move W1, W8
	029 ShiftRight W1, 29
	030 And W1, W1, 0xFFFFFFF
	031 Call SymmetricAlgorithm.ValidKeySize, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {114}
	036 Move X21, 0xECF000
	037 Move X21, [X21+800]
	038 Move X0, [X21]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X19
	044 Call DES.IsWeakKey, X0
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {128}
	049 Move X0, [X21]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X0, X19
	055 Call DES.IsSemiWeakKey, X0
	056 Move TEMP, X0
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfEqual {130}
	060 Move X0, X19
	061 Move X1, X31
	062 Call Array.Clone, X0
	063 Compare X0, 0
	064 JumpIfEqual {83}
	065 Move X23, 0xEA1000
	066 Move X23, [X23+1560]
	067 Move X21, X0
	068 Move X22, [X23]
	069 Move X1, X22
	070 Call 0x1C17E00
	071 Compare X0, 0
	072 JumpIfEqual {80}
	073 Move [X20+32], X0
	074 Move X22, [X23]
	075 Move X0, X21
	076 Move X1, X22
	077 Call 0x1C17E00
	078 Compare X0, 0
	079 JumpIfNotEqual {84}
	080 Move X0, X21
	081 Move X1, X22
	082 Call 0x1C181E0
	083 Move [X20+32], X31
	084 Move W8, [X19+24]
	085 Move X22, [X31+16]
	086 Move X21, [X31+24]
	087 Move W8, W8
	088 ShiftRight W8, 29
	089 And W8, W8, 0xFFFFFFF
	090 Move [X20+56], W8
	091 Move X20, [X31+32]
	092 Move X19, [X31+40]
	093 Move X30, [X31+48]
	094 Move X23, [X31+56]
	095 Return 
	096 Move X0, 0xEA6000
	097 Move X0, [X0+1320]
	098 Call 0x1C17D08
	099 Call 0x1C17F10
	100 Move X19, X0
	101 Move X0, 0xEAB000
	102 Move X0, [X0+3784]
	103 Call 0x1C17D08
	104 Move X1, X0
	105 Move X0, X19
	106 Move X2, X31
	107 Call ArgumentNullException..ctor, X0, X1
	108 Move X0, 0xED0000
	109 Move X0, [X0+3912]
	110 Call 0x1C17D08
	111 Move X1, X0
	112 Move X0, X19
	113 Call 0x1C17DEC
	114 Move X0, 0xED0000
	115 Move X0, [X0+3848]
	116 Call 0x1C17D08
	117 Move X1, X31
	118 Call Environment.GetResourceString, X0
	119 Move X19, X0
	120 Move X0, 0xEA9000
	121 Move X0, [X0+1400]
	122 Call 0x1C17D08
	123 Call 0x1C17F10
	124 Move X1, X19
	125 Move X2, X31
	126 Move X20, X0
	127 Call ArgumentException..ctor, X0, X1
	128 Move X0, 0xED0000
	129 Move X0, [X0+3920]
	130 Move X0, 0xED0000
	131 Move X0, [X0+3928]
	132 Call 0x1C17D08
	133 Move X1, X31
	134 Call Environment.GetResourceString, X0
	135 Move X19, X0
	136 Move X0, 0xECE000
	137 Move X0, [X0+3296]
	138 Call 0x1C17D08
	139 Call 0x1C17F10
	140 Move X20, X0
	141 Move X0, 0xECE000
	142 Move X0, [X0+3832]
	143 Call 0x1C17D08
	144 Move X2, X0
	145 Move X0, X20
	146 Move X1, X19
	147 Call CryptographicException..ctor, X0, X1, X2
	148 Move X0, 0xED0000
	149 Move X0, [X0+3912]
	150 Call 0x1C17D08
	151 Move X1, X0
	152 Move X0, X20
	153 Call 0x1C17DEC

Method: System.Security.Cryptography.DES Create()

Disassembly:
	0x03253CD4 ADRP X25, 0xEA9000
	0x03253CD8 LDR X25, [X25 + 0x9E8]
	0x03253CDC MOV X23, X21
	0x03253CE0 CBZ X24, 0x3253D38
	0x03253CE4 LDR X0, [X25]
	0x03253CE8 ADRP X21, 0xED0000
	0x03253CEC ADRP X19, 0xECF000
	0x03253CF0 LDR W8, [X0 + 0xE0]
	0x03253CF4 LDR X21, [X21]
	0x03253CF8 LDR X19, [X19 + 0xFF8]
	0x03253CFC CBNZ W8, 0x3253D04
	0x03253D00 BL 0x1C16DFC
	0x03253D04 MOV X0, X24
	0x03253D08 MOV X1, X31
	0x03253D0C BL 0x33225A0
	0x03253D10 LDR X8, [X21]
	0x03253D14 LDR X2, [X19]
	0x03253D18 MOV X1, X0
	0x03253D1C MOV X3, X31
	0x03253D20 MOV X0, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x118A000
	005 Move X20, 0xED0000
	006 Move W8, [X19+1225]
	007 Move X20, [X20+3936]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xED0000
	013 Move X0, [X0+3936]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1225], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move X19, X0
	020 Call DESCryptoServiceProvider..ctor, X0
	021 Move X0, X19
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Return X0

Method: System.Boolean IsWeakKey(System.Byte[] rgbKey)

Disassembly:
	0x032537AC ADRP X20, 0xECF000
	0x032537B0 LDR X20, [X20 + 0xFD0]
	0x032537B4 MOV X0, X20
	0x032537B8 BL 0x1C16D08
	0x032537BC MOV X1, X0
	0x032537C0 MOV X0, X19
	0x032537C4 BL 0x19980B4
	0x032537C8 MOV X0, X20
	0x032537CC BL 0x1C16D08
	0x032537D0 MOV X2, X0
	0x032537D4 MOV X0, X19
	0x032537D8 MOV X1, X31
	0x032537DC BL 0x1993444
	0x032537E0 MOV X0, X19
	0x032537E4 BL 0x19903C0
	0x032537E8 ADRP X20, 0xECF000
	0x032537EC LDR X20, [X20 + 0xFB0]
	0x032537F0 B 0x325391C
	0x032537F4 ADRP X0, 0xEA0000
	0x032537F8 LDR X0, [X0 + 0x9D0]
	0x032537FC BL 0x1C16D08
	0x03253800 MOVZ W1, 0x2
	0x03253804 BL 0x1C16D6C
	0x03253808 MOV X19, X0
	0x0325380C BL 0x19903C0
	0x03253810 ADRP X20, 0xECF000
	0x03253814 LDR X20, [X20 + 0xFD0]
	0x03253818 MOV X0, X20
	0x0325381C BL 0x1C16D08
	0x03253820 MOV X1, X0
	0x03253824 MOV X0, X19
	0x03253828 BL 0x19980B4
	0x0325382C MOV X0, X20
	0x03253830 BL 0x1C16D08
	0x03253834 MOV X2, X0
	0x03253838 MOV X0, X19
	0x0325383C MOV X1, X31
	0x03253840 BL 0x1993444
	0x03253844 MOV X0, X19
	0x03253848 BL 0x19903C0
	0x0325384C ADRP X20, 0xECF000
	0x03253850 LDR X20, [X20 + 0xF98]
	0x03253854 B 0x325391C
	0x03253858 ADRP X0, 0xEA0000
	0x0325385C LDR X0, [X0 + 0x9D0]
	0x03253860 BL 0x1C16D08
	0x03253864 MOVZ W1, 0x2
	0x03253868 BL 0x1C16D6C
	0x0325386C MOV X19, X0
	0x03253870 BL 0x19903C0
	0x03253874 ADRP X20, 0xECF000
	0x03253878 LDR X20, [X20 + 0xFD0]
	0x0325387C MOV X0, X20
	0x03253880 BL 0x1C16D08
	0x03253884 MOV X1, X0
	0x03253888 MOV X0, X19
	0x0325388C BL 0x19980B4
	0x03253890 MOV X0, X20
	0x03253894 BL 0x1C16D08
	0x03253898 MOV X2, X0
	0x0325389C MOV X0, X19
	0x032538A0 MOV X1, X31
	0x032538A4 BL 0x1993444
	0x032538A8 MOV X0, X19
	0x032538AC BL 0x19903C0
	0x032538B0 ADRP X20, 0xECA000
	0x032538B4 LDR X20, [X20 + 0xEF0]
	0x032538B8 B 0x325391C
	0x032538BC ADRP X0, 0xEA0000
	0x032538C0 LDR X0, [X0 + 0x9D0]
	0x032538C4 BL 0x1C16D08
	0x032538C8 MOVZ W1, 0x2

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x118A000
	006 Move X20, 0xECF000
	007 Move W8, [X21+1226]
	008 Move X20, [X20+800]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xECF000
	015 Move X0, [X0+800]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1226], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Compare X19, 0
	025 JumpIfEqual {59}
	026 Move W8, [X19+24]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X0, X19
	029 Move X1, X31
	030 Call Utils.FixupKeyParity, X0
	031 Move X8, [X20]
	032 Move X19, X0
	033 Move W9, [X8+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Move X0, X19
	039 Call DES.QuadWordFromBigEndian, X0
	040 Or X8, X31, -72340172838076674
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Or X8, X31, 0x101010101010101
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Or X8, X31, 0xE0E0E0E0E0E0E0E
	045 NotImplemented "Instruction MOVK not yet implemented."
	046 NotImplemented "Instruction MOVK not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move W0, 1
	049 Or X8, X31, -1012762419733073423
	050 NotImplemented "Instruction MOVK not yet implemented."
	051 NotImplemented "Instruction MOVK not yet implemented."
	052 NotImplemented "Instruction CMP not yet implemented."
	053 NotImplemented "Instruction CSET not yet implemented."
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X30, [X31+32]
	057 Move X21, [X31+40]
	058 Return X0
	059 Move X0, 0xED0000
	060 Move X0, [X0+3848]
	061 Call 0x1C17D08
	062 Move X1, X31
	063 Call Environment.GetResourceString, X0
	064 Move X19, X0
	065 Move X0, 0xECE000
	066 Move X0, [X0+3296]
	067 Call 0x1C17D08
	068 Call 0x1C17F10
	069 Move X1, X19
	070 Move X20, X0
	071 Call CryptographicException..ctor, X0, X1
	072 Move X0, 0xED0000
	073 Move X0, [X0+3896]
	074 Call 0x1C17D08
	075 Move X1, X0
	076 Move X0, X20
	077 Call 0x1C17DEC

Method: System.Boolean IsSemiWeakKey(System.Byte[] rgbKey)

Disassembly:
	0x032538CC BL 0x1C16D6C
	0x032538D0 MOV X19, X0
	0x032538D4 BL 0x19903C0
	0x032538D8 ADRP X20, 0xECF000
	0x032538DC LDR X20, [X20 + 0xFD0]
	0x032538E0 MOV X0, X20
	0x032538E4 BL 0x1C16D08
	0x032538E8 MOV X1, X0
	0x032538EC MOV X0, X19
	0x032538F0 BL 0x19980B4
	0x032538F4 MOV X0, X20
	0x032538F8 BL 0x1C16D08
	0x032538FC MOV X2, X0
	0x03253900 MOV X0, X19
	0x03253904 MOV X1, X31
	0x03253908 BL 0x1993444
	0x0325390C MOV X0, X19
	0x03253910 BL 0x19903C0
	0x03253914 ADRP X20, 0xECF000
	0x03253918 LDR X20, [X20 + 0xFA8]
	0x0325391C MOV X0, X20
	0x03253920 BL 0x1C16D08
	0x03253924 MOV X1, X0
	0x03253928 MOV X0, X19
	0x0325392C BL 0x19980B4
	0x03253930 MOV X0, X20
	0x03253934 BL 0x1C16D08
	0x03253938 MOV X2, X0
	0x0325393C MOVZ W1, 0x1
	0x03253940 MOV X0, X19
	0x03253944 BL 0x1993444
	0x03253948 ADRP X0, 0xECF000
	0x0325394C LDR X0, [X0 + 0xFD8]
	0x03253950 BL 0x1C16D08
	0x03253954 MOV X1, X19
	0x03253958 MOV X2, X31
	0x0325395C BL 0x33BFB40
	0x03253960 MOV X19, X0
	0x03253964 ADRP X0, 0xECD000
	0x03253968 LDR X0, [X0 + 0xCE0]
	0x0325396C BL 0x1C16D08
	0x03253970 BL 0x1C16F10
	0x03253974 MOV X1, X19
	0x03253978 MOV X20, X0
	0x0325397C BL 0x3252170
	0x03253980 ADRP X0, 0xECF000
	0x03253984 LDR X0, [X0 + 0xFC8]
	0x03253988 BL 0x1C16D08
	0x0325398C MOV X1, X0
	0x03253990 MOV X0, X20
	0x03253994 BL 0x1C16DEC
	0x03253998 ADRP X0, 0xEA0000
	0x0325399C LDR X0, [X0 + 0x9D0]
	0x032539A0 BL 0x1C16D08
	0x032539A4 MOVZ W1, 0x2
	0x032539A8 BL 0x1C16D6C
	0x032539AC CBNZ X0, 0x32539B4
	0x032539B0 BL 0x1C16F20
	0x032539B4 MOV X19, X0
	0x032539B8 ADRP X0, 0xECF000
	0x032539BC LDR X0, [X0 + 0xFD0]
	0x032539C0 BL 0x1C16D08
	0x032539C4 CBZ X0, 0x32539E4
	0x032539C8 LDR X8, [X19]
	0x032539CC LDR X1, [X8 + 0x40]
	0x032539D0 BL 0x1C16E00
	0x032539D4 CBNZ X0, 0x32539E4
	0x032539D8 BL 0x1C16F44
	0x032539DC MOV X1, X31
	0x032539E0 BL 0x1C16DEC
	0x032539E4 ADRP X0, 0xECF000
	0x032539E8 LDR X0, [X0 + 0xFD0]
	0x032539EC BL 0x1C16D08
	0x032539F0 LDR W8, [X19 + 0x18]
	0x032539F4 CBNZ W8, 0x32539FC
	0x032539F8 BL 0x1C16F28
	0x032539FC STR X0, [X19 + 0x20]
	0x03253A00 CBNZ X27, 0x3253A10
	0x03253A04 ADRP X20, 0xECF000
	0x03253A08 LDR X20, [X20 + 0xFB8]
	0x03253A0C B 0x325391C
	0x03253A10 ADRP X20, 0xECF000
	0x03253A14 LDR X20, [X20 + 0xFA0]
	0x03253A18 B 0x325391C
	0x03253A1C SUB X31, X31, 0xC0
	0x03253A20 STP X29, X30, [X31 + 0x60]
	0x03253A24 STP X28, X27, [X31 + 0x70]
	0x03253A28 STP X26, X25, [X31 + 0x80]
	0x03253A2C STP X24, X23, [X31 + 0x90]
	0x03253A30 STP X22, X21, [X31 + 0xA0]
	0x03253A34 STP X20, X19, [X31 + 0xB0]
	0x03253A38 ADRP X21, 0x1189000
	0x03253A3C ADRP X29, 0xEA0000
	0x03253A40 LDRB W8, [X21 + 0x4D5]
	0x03253A44 LDR X29, [X29 + 0x8F0]
	0x03253A48 MOV W19, W1
	0x03253A4C MOV X20, X0
	0x03253A50 TBNZ X8, 0x0, 0x3253B4C
	0x03253A54 ADRP X0, 0xEA9000
	0x03253A58 LDR X0, [X0 + 0x9E8]
	0x03253A5C BL 0x1C16CF4
	0x03253A60 ADRP X0, 0xEA0000
	0x03253A64 LDR X0, [X0 + 0x8F0]
	0x03253A68 BL 0x1C16CF4
	0x03253A6C ADRP X0, 0xECF000
	0x03253A70 LDR X0, [X0 + 0xFE0]
	0x03253A74 BL 0x1C16CF4
	0x03253A78 ADRP X0, 0xECF000
	0x03253A7C LDR X0, [X0 + 0xFE8]
	0x03253A80 BL 0x1C16CF4
	0x03253A84 ADRP X0, 0xECF000
	0x03253A88 LDR X0, [X0 + 0xFF0]
	0x03253A8C BL 0x1C16CF4
	0x03253A90 ADRP X0, 0xECF000
	0x03253A94 LDR X0, [X0 + 0xFF8]
	0x03253A98 BL 0x1C16CF4
	0x03253A9C ADRP X0, 0xECE000
	0x03253AA0 LDR X0, [X0 + 0x608]
	0x03253AA4 BL 0x1C16CF4
	0x03253AA8 ADRP X0, 0xED0000
	0x03253AAC LDR X0, [X0]
	0x03253AB0 BL 0x1C16CF4
	0x03253AB4 ADRP X0, 0xECE000
	0x03253AB8 LDR X0, [X0 + 0x610]
	0x03253ABC BL 0x1C16CF4
	0x03253AC0 ADRP X0, 0xECE000
	0x03253AC4 LDR X0, [X0 + 0x618]
	0x03253AC8 BL 0x1C16CF4
	0x03253ACC ADRP X0, 0xED0000
	0x03253AD0 LDR X0, [X0 + 0x8]
	0x03253AD4 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x118A000
	006 Move X20, 0xECF000
	007 Move W8, [X21+1227]
	008 Move X20, [X20+800]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xECF000
	015 Move X0, [X0+800]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1227], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Compare X19, 0
	025 JumpIfEqual {107}
	026 Move W8, [X19+24]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X0, X19
	029 Move X1, X31
	030 Call Utils.FixupKeyParity, X0
	031 Move X8, [X20]
	032 Move X19, X0
	033 Move W9, [X8+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Move X0, X19
	039 Call DES.QuadWordFromBigEndian, X0
	040 Move X8, 269
	041 NotImplemented "Instruction MOVK not yet implemented."
	042 NotImplemented "Instruction MOVK not yet implemented."
	043 NotImplemented "Instruction MOVK not yet implemented."
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X8, 3584
	046 NotImplemented "Instruction MOVK not yet implemented."
	047 NotImplemented "Instruction MOVK not yet implemented."
	048 NotImplemented "Instruction MOVK not yet implemented."
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X8, 270
	051 NotImplemented "Instruction MOVK not yet implemented."
	052 NotImplemented "Instruction MOVK not yet implemented."
	053 NotImplemented "Instruction MOVK not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Or X8, X31, 0x1E001E001E001E0
	056 NotImplemented "Instruction MOVK not yet implemented."
	057 NotImplemented "Instruction MOVK not yet implemented."
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Or X8, X31, 0x1FE01FE01FE01FE
	060 Move X8, 0xF1FD
	061 NotImplemented "Instruction MOVK not yet implemented."
	062 NotImplemented "Instruction MOVK not yet implemented."
	063 NotImplemented "Instruction MOVK not yet implemented."
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X8, 0xF1FE
	066 NotImplemented "Instruction MOVK not yet implemented."
	067 NotImplemented "Instruction MOVK not yet implemented."
	068 NotImplemented "Instruction MOVK not yet implemented."
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Or X8, X31, -143554428589179391
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Or X8, X31, -135110050436874721
	073 NotImplemented "Instruction MOVK not yet implemented."
	074 NotImplemented "Instruction MOVK not yet implemented."
	075 Move X8, 3585
	076 NotImplemented "Instruction MOVK not yet implemented."
	077 NotImplemented "Instruction MOVK not yet implemented."
	078 NotImplemented "Instruction MOVK not yet implemented."
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Or X8, X31, 0x1FE01FE01FE01FE0
	081 NotImplemented "Instruction MOVK not yet implemented."
	082 NotImplemented "Instruction MOVK not yet implemented."
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Or X8, X31, 0x1FFE1FFE1FFE1FFE
	085 NotImplemented "Instruction MOVK not yet implemented."
	086 NotImplemented "Instruction MOVK not yet implemented."
	087 Or X8, X31, -2305315235579174911
	088 NotImplemented "Instruction MOVK not yet implemented."
	089 NotImplemented "Instruction MOVK not yet implemented."
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Or X8, X31, -2296870857426870241
	092 NotImplemented "Instruction MOVK not yet implemented."
	093 NotImplemented "Instruction MOVK not yet implemented."
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move W0, 1
	096 Move X20, [X31+16]
	097 Move X19, [X31+24]
	098 Move X30, [X31+32]
	099 Move X21, [X31+40]
	100 Return X0
	101 Move X8, 0xFEF1
	102 NotImplemented "Instruction MOVK not yet implemented."
	103 NotImplemented "Instruction MOVK not yet implemented."
	104 NotImplemented "Instruction MOVK not yet implemented."
	105 NotImplemented "Instruction CMP not yet implemented."
	106 NotImplemented "Instruction CSET not yet implemented."
	107 Move X0, 0xED0000
	108 Move X0, [X0+3848]
	109 Call 0x1C17D08
	110 Move X1, X31
	111 Call Environment.GetResourceString, X0
	112 Move X19, X0
	113 Move X0, 0xECE000
	114 Move X0, [X0+3296]
	115 Call 0x1C17D08
	116 Call 0x1C17F10
	117 Move X1, X19
	118 Move X20, X0
	119 Call CryptographicException..ctor, X0, X1
	120 Move X0, 0xED0000
	121 Move X0, [X0+3904]
	122 Call 0x1C17D08
	123 Move X1, X0
	124 Move X0, X20
	125 Call 0x1C17DEC

Method: System.Boolean IsLegalKeySize(System.Byte[] rgbKey)

Disassembly:
	0x03253DE4 LDR W8, [X31 + 0x1C]
	0x03253DE8 TBZ X8, 0x0, 0x3253E40
	0x03253DEC LDR X0, [X25]
	0x03253DF0 LDR W8, [X0 + 0xE0]
	0x03253DF4 CBNZ W8, 0x3253DFC
	0x03253DF8 BL 0x1C16DFC
	0x03253DFC LDR X0, [X31 + 0x8]
	0x03253E00 MOV X1, X31

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {7}
	003 Move W8, [X0+24]
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move W0, 1
	006 Return X0
	007 Move W0, W31
	008 Return X0

Method: System.UInt64 QuadWordFromBigEndian(System.Byte[] block)

Disassembly:
	0x03253E04 BL 0x33225A0
	0x03253E08 ADRP X8, 0xED0000
	0x03253E0C LDR X8, [X8 + 0x10]
	0x03253E10 ADRP X9, 0xED0000
	0x03253E14 LDR X9, [X9 + 0x20]
	0x03253E18 MOV X1, X0
	0x03253E1C LDR X8, [X8]
	0x03253E20 MOV X3, X31
	0x03253E24 LDR X2, [X9]
	0x03253E28 MOV X0, X8
	0x03253E2C BL 0x32274B8
	0x03253E30 MOV X1, X0
	0x03253E34 MOV X0, X20
	0x03253E38 MOV X2, X31
	0x03253E3C BL 0x32333E0
	0x03253E40 LDR X1, [X19]
	0x03253E44 MOV X0, X20
	0x03253E48 MOV X2, X31
	0x03253E4C BL 0x32333E0
	0x03253E50 LDR X8, [X20]
	0x03253E54 MOV X0, X20
	0x03253E58 LDP X9, X1, [X8 + 0x168]
	0x03253E5C BLR X9
	0x03253E60 LDP X20, X19, [X31 + 0xB0]
	0x03253E64 LDP X22, X21, [X31 + 0xA0]
	0x03253E68 LDP X24, X23, [X31 + 0x90]
	0x03253E6C LDP X26, X25, [X31 + 0x80]
	0x03253E70 LDP X28, X27, [X31 + 0x70]
	0x03253E74 LDP X29, X30, [X31 + 0x60]
	0x03253E78 ADD X31, X31, 0xC0
	0x03253E7C RET
	0x03253E80 BL 0x1C16F20
	0x03253E84 STP X30, X21, [X31 - 0x20]!
	0x03253E88 STP X20, X19, [X31 + 0x10]
	0x03253E8C ADRP X21, 0x1189000
	0x03253E90 ADRP X20, 0xECD000
	0x03253E94 LDRB W8, [X21 + 0x4D6]
	0x03253E98 LDR X20, [X20 + 0xBD8]

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {35}
	004 Move W8, [X0+24]
	005 Compare W8, 0
	006 JumpIfEqual {34}
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CMP not yet implemented."
	009 NotImplemented "Instruction CMP not yet implemented."
	010 NotImplemented "Instruction CMP not yet implemented."
	011 NotImplemented "Instruction CMP not yet implemented."
	012 NotImplemented "Instruction CMP not yet implemented."
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move W8, [X0+32]
	015 Move W9, [X0+33]
	016 Move W10, [X0+34]
	017 Move W11, [X0+35]
	018 Move W12, [X0+36]
	019 Move X8, X8
	020 ShiftRight X8, 8
	021 And X8, X8, 127
	022 Move W13, [X0+37]
	023 NotImplemented "Instruction BFM not yet implemented."
	024 Move W14, [X0+38]
	025 NotImplemented "Instruction BFM not yet implemented."
	026 Move W15, [X0+39]
	027 NotImplemented "Instruction BFM not yet implemented."
	028 NotImplemented "Instruction BFM not yet implemented."
	029 NotImplemented "Instruction BFM not yet implemented."
	030 NotImplemented "Instruction BFM not yet implemented."
	031 Or X0, X8, X15
	032 Move X30, [X31+16]
	033 Return X0
	034 Call 0x1C17F28
	035 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x03253E9C MOV X19, X0
	0x03253EA0 TBNZ X8, 0x0, 0x3253EC4
	0x03253EA4 ADRP X0, 0xECD000
	0x03253EA8 LDR X0, [X0 + 0xBD8]
	0x03253EAC BL 0x1C16CF4
	0x03253EB0 ADRP X0, 0xECD000
	0x03253EB4 LDR X0, [X0 + 0xD40]
	0x03253EB8 BL 0x1C16CF4
	0x03253EBC MOVZ W8, 0x1
	0x03253EC0 STRB W8, [X21 + 0x4D6]
	0x03253EC4 ADRP X21, 0xECD000
	0x03253EC8 LDR X21, [X21 + 0xD40]
	0x03253ECC MOV X0, X19
	0x03253ED0 MOV X1, X31
	0x03253ED4 BL 0x33BDD8C
	0x03253ED8 LDR X0, [X20]
	0x03253EDC LDR W8, [X0 + 0xE0]
	0x03253EE0 CBNZ W8, 0x3253EE8
	0x03253EE4 BL 0x1C16DFC
	0x03253EE8 LDR X0, [X21]
	0x03253EEC MOV X1, X31
	0x03253EF0 BL 0x3264820
	0x03253EF4 STR X0, [X19 + 0x18]
	0x03253EF8 LDP X20, X19, [X31 + 0x10]
	0x03253EFC LDP X30, X21, [X31], #0x20
	0x03253F00 RET
	0x03253F04 STP X30, X21, [X31 - 0x20]!
	0x03253F08 STP X20, X19, [X31 + 0x10]
	0x03253F0C ADRP X21, 0x1189000
	0x03253F10 LDRB W8, [X21 + 0x4D7]
	0x03253F14 MOV X19, X1
	0x03253F18 MOV X20, X0
	0x03253F1C TBNZ X8, 0x0, 0x3253F34
	0x03253F20 ADRP X0, 0xECE000
	0x03253F24 LDR X0, [X0 + 0x158]
	0x03253F28 BL 0x1C16CF4
	0x03253F2C MOVZ W8, 0x1
	0x03253F30 STRB W8, [X21 + 0x4D7]
	0x03253F34 MOV X0, X20
	0x03253F38 BL 0x3253E84
	0x03253F3C CBZ X19, 0x3253FAC
	0x03253F40 ADRP X8, 0xECE000
	0x03253F44 LDR X8, [X8 + 0x158]
	0x03253F48 LDR X9, [X19]
	0x03253F4C LDR X1, [X8]
	0x03253F50 LDRB W10, [X9 + 0x130]
	0x03253F54 LDRB W8, [X1 + 0x130]
	0x03253F58 CMP W10, W8
	0x03253F5C B.CC 0x3253FA4
	0x03253F60 LDR X10, [X9 + 0xC8]
	0x03253F64 SUB X9, X8, 0x1
	0x03253F68 LDR X10, [X10, X9, LSL #3]
	0x03253F6C CMP X10, X1
	0x03253F70 B.NE 0x3253FA4
	0x03253F74 STR X19, [X20 + 0x10]
	0x03253F78 LDR X10, [X19]
	0x03253F7C LDRB W11, [X10 + 0x130]
	0x03253F80 CMP W11, W8
	0x03253F84 B.CC 0x3253FA4
	0x03253F88 LDR X8, [X10 + 0xC8]
	0x03253F8C LDR X8, [X8, X9, LSL #3]
	0x03253F90 CMP X8, X1
	0x03253F94 B.NE 0x3253FA4
	0x03253F98 LDP X20, X19, [X31 + 0x10]
	0x03253F9C LDP X30, X21, [X31], #0x20
	0x03253FA0 RET
	0x03253FA4 MOV X0, X19
	0x03253FA8 BL 0x1C171E0
	0x03253FAC ADRP X0, 0xEA5000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, 0x118A000
	008 Move X22, 0xECF000
	009 Move X21, 0xECF000
	010 Move W8, [X19+1228]
	011 Move X22, [X22+1312]
	012 Move X21, [X21+1320]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0xECF000
	018 Move X0, [X0+800]
	019 Call 0x1C17CF4
	020 Move X0, 0xECF000
	021 Move X0, [X0+1312]
	022 Call 0x1C17CF4
	023 Move X0, 0xECF000
	024 Move X0, [X0+1320]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X19+1228], W8
	028 Move X0, [X22]
	029 Move W1, 1
	030 Call 0x1C17D6C
	031 Move X8, [X21]
	032 Move X19, X0
	033 Move X0, X8
	034 Call 0x1C17F10
	035 Move X1, X31
	036 Move X20, X0
	037 Call Object..ctor, X0
	038 NotImplemented "Instruction MOVI not yet implemented."
	039 Move [X20+16], D0
	040 Move [X20+24], W31
	041 Compare X19, 0
	042 JumpIfEqual {81}
	043 Move W8, [X19+24]
	044 Compare W8, 0
	045 JumpIfEqual {82}
	046 Move X23, 0xECF000
	047 Move X23, [X23+800]
	048 Move [X19+32], X20
	049 Move W1, 1
	050 Move X8, [X23]
	051 Move X8, [X8+184]
	052 Move [X8], X19
	053 Move X0, [X22]
	054 Call 0x1C17D6C
	055 Move X8, [X21]
	056 Move X19, X0
	057 Move X0, X8
	058 Call 0x1C17F10
	059 Move X1, X31
	060 Move X20, X0
	061 Call Object..ctor, X0
	062 NotImplemented "Instruction MOVI not yet implemented."
	063 Move [X20+16], D0
	064 Move [X20+24], W31
	065 Compare X19, 0
	066 JumpIfEqual {81}
	067 Move W8, [X19+24]
	068 Compare W8, 0
	069 JumpIfEqual {82}
	070 Move [X19+32], X20
	071 Move X8, [X23]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X8, [X8+184]
	075 Move [X8+8], X19
	076 Move X20, [X31+32]
	077 Move X19, [X31+40]
	078 Move X30, [X31+48]
	079 Move X23, [X31+56]
	080 Return 
	081 Call 0x1C17F20
	082 Call 0x1C17F28

