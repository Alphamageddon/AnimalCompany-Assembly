Type: System.Security.Cryptography.CryptoStream/<ReadAsyncInternal>d__37

Method: System.Void MoveNext()

Disassembly:
	0x0324F284 MOV W2, W31
	0x0324F288 MOV W3, W19
	0x0324F28C MOV X4, X21
	0x0324F290 MOV W5, W31
	0x0324F294 BLR X8
	0x0324F298 STR W31, [X24 + 0x48]
	0x0324F29C LDR X8, [X31 + 0x38]
	0x0324F2A0 MOV W20, W0
	0x0324F2A4 LDR X0, [X24 + 0x50]
	0x0324F2A8 LDP W4, W3, [X8 + 0x48]
	0x0324F2AC LDR X2, [X8 + 0x30]
	0x0324F2B0 CMP W4, W20
	0x0324F2B4 B.LT 0x324F3A4
	0x0324F2B8 MOV W1, W31
	0x0324F2BC MOV W4, W20
	0x0324F2C0 MOV X5, X31
	0x0324F2C4 BL 0x33A8A9C
	0x0324F2C8 LDR X19, [X24 + 0x50]
	0x0324F2CC CBZ X19, 0x324F2F0
	0x0324F2D0 LDR W8, [X19 + 0x18]
	0x0324F2D4 CMP W20, W8
	0x0324F2D8 B.LS 0x324F2E4
	0x0324F2DC MOV X0, X31
	0x0324F2E0 BL 0x339D6EC
	0x0324F2E4 ADD X0, X19, 0x20
	0x0324F2E8 MOV W1, W20
	0x0324F2EC B 0x324F330
	0x0324F2F0 CBZ W20, 0x324F328
	0x0324F2F4 MOV X0, X31
	0x0324F2F8 BL 0x339D6EC
	0x0324F2FC MOV X0, X31
	0x0324F300 MOV X1, X31
	0x0324F304 B 0x324F330
	0x0324F308 ORR W8, W19, W21, 0x0
	0x0324F30C CBZ W8, 0x324F318
	0x0324F310 MOV X0, X31
	0x0324F314 BL 0x339D6EC
	0x0324F318 MOV X22, X31
	0x0324F31C MOV X21, X31
	0x0324F320 CBNZ X20, 0x324F138
	0x0324F324 BL 0x1C16F20
	0x0324F328 MOV X0, X31
	0x0324F32C MOV X1, X31
	0x0324F330 MOV X2, X31
	0x0324F334 BL 0x324F6C0
	0x0324F338 LDR X19, [X31 + 0x38]
	0x0324F33C LDP W9, W8, [X19 + 0x48]
	0x0324F340 ADD W8, W8, W20
	0x0324F344 SUB W9, W9, W20
	0x0324F348 STP W9, W8, [X19 + 0x48]
	0x0324F34C B 0x324F0E4
	0x0324F350 CBZ X24, 0x324F580
	0x0324F354 LDR X19, [X24 + 0x30]
	0x0324F358 CBZ X19, 0x324F584
	0x0324F35C LDR X8, [X19]
	0x0324F360 LDR X21, [X24 + 0x40]
	0x0324F364 LDR W20, [X24 + 0x48]
	0x0324F368 LDR X1, [X25]
	0x0324F36C LDRH W9, [X8 + 0x12E]
	0x0324F370 CBZ X9, 0x324F394
	0x0324F374 LDR X10, [X8 + 0xB0]
	0x0324F378 ADD X10, X10, 0x8
	0x0324F37C LDUR X11, [X10 - 0x8]
	0x0324F380 CMP X11, X1
	0x0324F384 B.EQ 0x324F40C
	0x0324F388 SUBS X9, X9, 0x1
	0x0324F38C ADD X10, X10, 0x10
	0x0324F390 B.NE 0x324F37C
	0x0324F394 MOVZ W2, 0x4
	0x0324F398 MOV X0, X19
	0x0324F39C BL 0x1C5C788
	0x0324F3A0 B 0x324F41C
	0x0324F3A4 MOV W1, W31
	0x0324F3A8 MOV X5, X31
	0x0324F3AC BL 0x33A8A9C
	0x0324F3B0 LDR X8, [X31 + 0x38]
	0x0324F3B4 LDR X0, [X24 + 0x50]
	0x0324F3B8 LDR W1, [X8 + 0x48]
	0x0324F3BC SUB W4, W20, W1
	0x0324F3C0 STR W4, [X24 + 0x58]
	0x0324F3C4 MOV X2, X0
	0x0324F3C8 MOV W3, W31
	0x0324F3CC MOV X5, X31
	0x0324F3D0 BL 0x33A8A9C
	0x0324F3D4 LDR X19, [X24 + 0x50]
	0x0324F3D8 CBZ X19, 0x324F590
	0x0324F3DC LDRSW X20, [X24 + 0x58]
	0x0324F3E0 LDR W8, [X19 + 0x18]
	0x0324F3E4 SUBS W21, W8, W20
	0x0324F3E8 B.CS 0x324F3F4
	0x0324F3EC MOV X0, X31
	0x0324F3F0 BL 0x339D6EC
	0x0324F3F4 ADD X8, X19, X20
	0x0324F3F8 ADD X0, X8, 0x20
	0x0324F3FC MOV W1, W21
	0x0324F400 MOV X2, X31
	0x0324F404 BL 0x324F6C0
	0x0324F408 B 0x324F080
	0x0324F40C LDR W9, [X10]
	0x0324F410 ADD W9, W9, 0x4
	0x0324F414 ADD X8, X8, W9, 0x4, SXTW
	0x0324F418 ADD X0, X8, 0x138
	0x0324F41C LDP X8, X4, [X0]
	0x0324F420 MOV X0, X19
	0x0324F424 MOV X1, X21
	0x0324F428 MOV W2, W31
	0x0324F42C MOV W3, W20
	0x0324F430 BLR X8
	0x0324F434 MOV X8, X0
	0x0324F438 STR X0, [X24 + 0x50]
	0x0324F43C CBZ X0, 0x324F588
	0x0324F440 LDR W4, [X8 + 0x18]
	0x0324F444 MOVZ W9, 0x1
	0x0324F448 STRB W9, [X24 + 0x62]
	0x0324F44C STR W4, [X24 + 0x58]
	0x0324F450 LDR X10, [X31 + 0x38]
	0x0324F454 LDP W9, W3, [X10 + 0x48]
	0x0324F458 LDR X2, [X10 + 0x30]
	0x0324F45C CMP W9, W4
	0x0324F460 B.GE 0x324F4D8
	0x0324F464 MOV X0, X8
	0x0324F468 MOV W1, W31
	0x0324F46C MOV W4, W9
	0x0324F470 MOV X5, X31
	0x0324F474 BL 0x33A8A9C
	0x0324F478 LDR X8, [X31 + 0x38]
	0x0324F47C LDR W9, [X24 + 0x58]
	0x0324F480 LDR X0, [X24 + 0x50]
	0x0324F484 LDR W1, [X8 + 0x48]
	0x0324F488 SUB W4, W9, W1
	0x0324F48C STR W4, [X24 + 0x58]
	0x0324F490 MOV X2, X0
	0x0324F494 MOV W3, W31
	0x0324F498 MOV X5, X31
	0x0324F49C BL 0x33A8A9C
	0x0324F4A0 LDR X19, [X24 + 0x50]
	0x0324F4A4 CBZ X19, 0x324F58C
	0x0324F4A8 LDRSW X20, [X24 + 0x58]
	0x0324F4AC LDR W8, [X19 + 0x18]
	0x0324F4B0 SUBS W21, W8, W20
	0x0324F4B4 B.CS 0x324F4C0
	0x0324F4B8 MOV X0, X31
	0x0324F4BC BL 0x339D6EC
	0x0324F4C0 ADD X8, X19, X20
	0x0324F4C4 ADD X0, X8, 0x20
	0x0324F4C8 MOV W1, W21
	0x0324F4CC MOV X2, X31
	0x0324F4D0 BL 0x324F6C0
	0x0324F4D4 B 0x324F080
	0x0324F4D8 MOV X0, X8
	0x0324F4DC MOV W1, W31
	0x0324F4E0 MOV X5, X31
	0x0324F4E4 BL 0x33A8A9C
	0x0324F4E8 LDR X8, [X31 + 0x38]
	0x0324F4EC LDR W9, [X24 + 0x58]
	0x0324F4F0 ADRP X11, 0xED3000
	0x0324F4F4 LDR W10, [X8 + 0x48]
	0x0324F4F8 LDR X11, [X11 + 0x2F8]
	0x0324F4FC SUB W9, W10, W9
	0x0324F500 STR W9, [X8 + 0x48]
	0x0324F504 STR W31, [X24 + 0x58]
	0x0324F508 LDR X0, [X24 + 0x50]
	0x0324F50C LDR X1, [X11]
	0x0324F510 BL 0x25FB4C0
	0x0324F514 MOV X2, X31
	0x0324F518 BL 0x324F6C0
	0x0324F51C LDR X19, [X31 + 0x38]
	0x0324F520 B 0x324F088
	0x0324F524 LDR X19, [X31 + 0x38]
	0x0324F528 MOVZ W8, 0x1
	0x0324F52C STR W8, [X31 + 0x34]
	0x0324F530 STR W8, [X19]
	0x0324F534 LDR V0, [X31 + 0x2]
	0x0324F538 MOV X2, X19
	0x0324F53C STUR V0, [X19 + 0x68]
	0x0324F540 LDR X0, [X23]
	0x0324F544 LDR W8, [X0 + 0xE0]
	0x0324F548 CBNZ W8, 0x324F554
	0x0324F54C BL 0x1C16DFC
	0x0324F550 LDR X2, [X31 + 0x38]
	0x0324F554 ADRP X8, 0xED3000
	0x0324F558 LDR X8, [X8 + 0xE50]
	0x0324F55C ADD X0, X19, 0x8
	0x0324F560 LDR X3, [X8]
	0x0324F564 ADD X1, X31, 0x20
	0x0324F568 BL 0x1FAD198
	0x0324F56C B 0x324F0C4
	0x0324F570 BL 0x1C16F20
	0x0324F574 BL 0x1C16F20
	0x0324F578 BL 0x1C16F20
	0x0324F57C BL 0x1C16F20
	0x0324F580 BL 0x1C16F20
	0x0324F584 BL 0x1C16F20
	0x0324F588 BL 0x1C16F20
	0x0324F58C BL 0x1C16F20
	0x0324F590 BL 0x1C16F20
	0x0324F594 B 0x324F608
	0x0324F598 B 0x324F608
	0x0324F59C B 0x324F608
	0x0324F5A0 B 0x324F608
	0x0324F5A4 B 0x324F608
	0x0324F5A8 B 0x324F608
	0x0324F5AC B 0x324F608
	0x0324F5B0 B 0x324F608
	0x0324F5B4 B 0x324F608
	0x0324F5B8 B 0x324F608
	0x0324F5BC B 0x324F608
	0x0324F5C0 B 0x324F608
	0x0324F5C4 B 0x324F608
	0x0324F5C8 B 0x324F608
	0x0324F5CC B 0x324F608
	0x0324F5D0 B 0x324F608
	0x0324F5D4 B 0x324F608
	0x0324F5D8 B 0x324F608
	0x0324F5DC B 0x324F608
	0x0324F5E0 B 0x324F608
	0x0324F5E4 B 0x324F608
	0x0324F5E8 B 0x324F608
	0x0324F5EC B 0x324F608
	0x0324F5F0 B 0x324F608
	0x0324F5F4 B 0x324F608
	0x0324F5F8 B 0x324F608
	0x0324F5FC B 0x324F608
	0x0324F600 B 0x324F608
	0x0324F604 B 0x324F608
	0x0324F608 MOV X19, X1
	0x0324F60C MOV X20, X0
	0x0324F610 CMP W19, 0x1
	0x0324F614 B.NE 0x324F6B4
	0x0324F618 MOV X0, X20
	0x0324F61C BL 0x3EB1AD0
	0x0324F620 MOV X19, X0
	0x0324F624 ADRP X0, 0xEA4000
	0x0324F628 LDR X0, [X0 + 0x7D0]
	0x0324F62C BL 0x1C16D08
	0x0324F630 LDR X8, [X19]
	0x0324F634 LDR X1, [X8]
	0x0324F638 BL 0x1C17270
	0x0324F63C TBZ X0, 0x0, 0x324F68C
	0x0324F640 LDR X19, [X19]
	0x0324F644 BL 0x3EB1AE0
	0x0324F648 LDR X20, [X31 + 0x38]
	0x0324F64C MOVN W8, 0x1
	0x0324F650 ADRP X0, 0xED3000
	0x0324F654 STR W8, [X20], #0x8
	0x0324F658 LDR X0, [X0 + 0xDA0]
	0x0324F65C BL 0x1C16D08
	0x0324F660 LDR W8, [X0 + 0xE0]
	0x0324F664 CBNZ W8, 0x324F66C
	0x0324F668 BL 0x1C16DFC
	0x0324F66C ADRP X0, 0xED3000
	0x0324F670 LDR X0, [X0 + 0xE40]
	0x0324F674 BL 0x1C16D08
	0x0324F678 MOV X2, X0
	0x0324F67C MOV X0, X20
	0x0324F680 MOV X1, X19
	0x0324F684 BL 0x2630308
	0x0324F688 B 0x324F0C4
	0x0324F68C MOVZ W0, 0x8
	0x0324F690 BL 0x3EB1AF0
	0x0324F694 LDR X8, [X19]
	0x0324F698 STR X8, [X0]
	0x0324F69C ADRP X1, 0xC65000
	0x0324F6A0 ADD X1, X1, 0xE58
	0x0324F6A4 MOV X2, X31
	0x0324F6A8 BL 0x3EB1B00
	0x0324F6AC MOV X20, X0
	0x0324F6B0 BL 0x3EB1AE0

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+56], X23
	004 Move [X31+64], X22
	005 Move [X31+72], X21
	006 Move [X31+80], X20
	007 Move [X31+88], X19
	008 Move X20, 0x118E000
	009 Move W8, [X20+1197]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {38}
	015 Move X0, 0xED4000
	016 Move X0, [X0+3616]
	017 Call 0x1C17CF4
	018 Move X0, 0xED4000
	019 Move X0, [X0+3624]
	020 Call 0x1C17CF4
	021 Move X0, 0xED4000
	022 Move X0, [X0+3632]
	023 Call 0x1C17CF4
	024 Move X0, 0xED4000
	025 Move X0, [X0+3488]
	026 Call 0x1C17CF4
	027 Move X0, 0xED4000
	028 Move X0, [X0+3528]
	029 Call 0x1C17CF4
	030 Move X0, 0xED4000
	031 Move X0, [X0+3640]
	032 Call 0x1C17CF4
	033 Move X0, 0xED4000
	034 Move X0, [X0+3536]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X20+1197], W8
	038 Move [X31+32], X31
	039 Move [X31+40], X31
	040 Move [X31+24], X31
	041 Move W22, [X19]
	042 Move X20, [X19+32]
	043 Compare W22, 0
	044 JumpIfEqual {53}
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X8, [X19+80]
	047 Move TEMP, 0
	048 Not TEMP
	049 Move W22, TEMP
	050 Move [X31+24], X8
	051 Move [X19+80], X31
	052 Move [X19], W22
	053 Move X8, [X19+72]
	054 Move TEMP, 0
	055 Not TEMP
	056 Move W22, TEMP
	057 Move [X31+40], X8
	058 Move [X19+72], X31
	059 Move [X19], W22
	060 Compare X20, 0
	061 JumpIfEqual {224}
	062 Move X0, X20
	063 Call CryptoStream.get_AsyncActiveSemaphore, X0
	064 Move [X19+64], X0
	065 Compare X0, 0
	066 JumpIfEqual {225}
	067 Move X1, X31
	068 Call SemaphoreSlim.WaitAsync, X0
	069 Move X1, X31
	070 Call TaskAwaiters.ForceAsync, X0
	071 Move [X31+32], X0
	072 Add X0, X31, 32
	073 Move X1, X31
	074 Call ForceAsyncAwaiter.GetAwaiter, X0
	075 Move [X31+40], X0
	076 Add X0, X31, 40
	077 Move X1, X31
	078 Call ForceAsyncAwaiter.get_IsCompleted, X0
	079 Move TEMP, X0
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfNotEqual {195}
	083 Add X0, X31, 40
	084 Move X1, X31
	085 Call ForceAsyncAwaiter.GetResult, X0
	086 Compare X20, 0
	087 JumpIfEqual {222}
	088 Move X1, [X19+40]
	089 Move X4, [X19+56]
	090 Move W2, [X19+48]
	091 Move W3, [X19+52]
	092 Move W5, 1
	093 Move X0, X20
	094 Call CryptoStream.ReadAsyncCore, X0, X1, X2, X3, X4, X5
	095 Compare X0, 0
	096 JumpIfEqual {223}
	097 Move X8, 0xED4000
	098 Move X8, [X8+3536]
	099 Move X1, [X8]
	100 Call Task`1<Int32>.GetAwaiter, X0
	101 Move X8, 0xED4000
	102 Move X8, [X8+3640]
	103 Move [X31+24], X0
	104 Move X1, [X8]
	105 Add X0, X31, 24
	106 Call TaskAwaiter`1<Int32>.get_IsCompleted, X0
	107 Move TEMP, X0
	108 And TEMP, TEMP, 1
	109 Compare TEMP, 1
	110 JumpIfNotEqual {177}
	111 Move X8, 0xED4000
	112 Move X8, [X8+3528]
	113 Move X1, [X8]
	114 Add X0, X31, 24
	115 Call TaskAwaiter`1<Int32>.GetResult, X0
	116 Move W20, W0
	117 Move X21, X31
	118 Move W23, W31
	119 Move TEMP, X22
	120 And TEMP, TEMP, -2147483648
	121 Compare TEMP, -2147483648
	122 JumpIfNotEqual {128}
	123 Move X0, [X19+64]
	124 Compare X0, 0
	125 JumpIfEqual {226}
	126 Move X1, X31
	127 Call SemaphoreSlim.Release, X0
	128 Compare X21, 0
	129 JumpIfNotEqual {220}
	130 Move TEMP, X23
	131 And TEMP, TEMP, 1
	132 Compare TEMP, 1
	133 JumpIfNotEqual {159}
	134 Move TEMP, 0
	135 Not TEMP
	136 Move X8, TEMP
	137 Add X9, X31, 8
	138 Move X20, [X9]
	139 Move TEMP, 1
	140 Not TEMP
	141 Move W8, TEMP
	142 Move [X19], W8
	143 Move [X19+64], X31
	144 Move X0, 0xED4000
	145 Move X0, [X0+3488]
	146 Add X19, X19, 8
	147 Call 0x1C17D08
	148 Move W8, [X0+224]
	149 Compare W8, 0
	150 JumpIfNotEqual {152}
	151 Call 0x1C17DFC
	152 Move X0, 0xED4000
	153 Move X0, [X0+3648]
	154 Call 0x1C17D08
	155 Move X2, X0
	156 Move X0, X19
	157 Move X1, X20
	158 Call AsyncTaskMethodBuilder`1<Int32>.SetException, X0, X1
	159 Move TEMP, 1
	160 Not TEMP
	161 Move W8, TEMP
	162 Move [X19+64], X31
	163 Move [X19+8], W8
	164 Move X8, 0xED4000
	165 Move X8, [X8+3488]
	166 Move X0, [X8]
	167 Move W8, [X0+224]
	168 Compare W8, 0
	169 JumpIfNotEqual {171}
	170 Call 0x1C17DFC
	171 Move X8, 0xED4000
	172 Move X8, [X8+3632]
	173 Move X0, X19
	174 Move W1, W20
	175 Move X2, [X8]
	176 Call AsyncTaskMethodBuilder`1<Int32>.SetResult, X0, X1
	177 Move W8, 1
	178 Move [X19], W8
	179 Move X8, [X31+24]
	180 Move [X19+80], X8
	181 Move X8, 0xED4000
	182 Move X8, [X8+3488]
	183 Move X0, [X8]
	184 Move W8, [X0+224]
	185 Compare W8, 0
	186 JumpIfNotEqual {188}
	187 Call 0x1C17DFC
	188 Move X8, 0xED4000
	189 Move X8, [X8+3624]
	190 Add X0, X19, 8
	191 Move X3, [X8]
	192 Add X1, X31, 24
	193 Move X2, X19
	194 Call AsyncTaskMethodBuilder`1<Int32>.AwaitUnsafeOnCompleted, X0, X1, X2
	195 Move [X19], W31
	196 Move X8, [X31+40]
	197 Move [X19+72], X8
	198 Move X8, 0xED4000
	199 Move X8, [X8+3488]
	200 Move X0, [X8]
	201 Move W8, [X0+224]
	202 Compare W8, 0
	203 JumpIfNotEqual {205}
	204 Call 0x1C17DFC
	205 Move X8, 0xED4000
	206 Move X8, [X8+3616]
	207 Add X0, X19, 8
	208 Move X3, [X8]
	209 Add X1, X31, 40
	210 Move X2, X19
	211 Call AsyncTaskMethodBuilder`1<Int32>.AwaitUnsafeOnCompleted, X0, X1, X2
	212 Move X20, [X31+80]
	213 Move X19, [X31+88]
	214 Move X22, [X31+64]
	215 Move X21, [X31+72]
	216 Move X30, [X31+48]
	217 Move X23, [X31+56]
	218 Add X31, X31, 96
	219 Return 
	220 Move X0, X21
	221 Call 0x1C17F18
	222 Call 0x1C17F20
	223 Call 0x1C17F20
	224 Call 0x1C17F20
	225 Call 0x1C17F20
	226 Call 0x1C17F20
	227 Move X21, X1
	228 Move X20, X0
	229 Move W22, 1
	230 Move X21, X1
	231 Move X20, X0
	232 NotImplemented "Instruction CMP not yet implemented."
	233 Move X0, X20
	234 Call 0x3EB2AD0
	235 Move X8, [X0]
	236 Move [X31], X8
	237 Call 0x3EB2AE0
	238 Move X21, [X31]
	239 Move W20, W31
	240 Move W23, 1
	241 Move TEMP, X22
	242 And TEMP, TEMP, -2147483648
	243 Compare TEMP, -2147483648
	244 JumpIfNotEqual {128}
	245 Move [X31], X31
	246 Move TEMP, X22
	247 And TEMP, TEMP, -2147483648
	248 Compare TEMP, -2147483648
	249 JumpIfNotEqual {255}
	250 Move X0, [X19+64]
	251 Compare X0, 0
	252 JumpIfEqual {260}
	253 Move X1, X31
	254 Call SemaphoreSlim.Release, X0
	255 Move X8, [X31]
	256 Compare X8, 0
	257 JumpIfEqual {269}
	258 Move X0, [X31]
	259 Call 0x1C17F18
	260 Call 0x1C17F20
	261 Move X21, X1
	262 Move X20, X0
	263 Move TEMP, X22
	264 And TEMP, TEMP, -2147483648
	265 Compare TEMP, -2147483648
	266 JumpIfNotEqual {255}
	267 Move X21, X1
	268 Move X20, X0
	269 NotImplemented "Instruction CMP not yet implemented."
	270 Move X0, X20
	271 Call 0x3EB2AD0
	272 Move X20, X0
	273 Move X0, 0xEA5000
	274 Move X0, [X0+2000]
	275 Call 0x1C17D08
	276 Move X8, [X20]
	277 Move X1, [X8]
	278 Call 0x1C18270
	279 Move TEMP, X0
	280 And TEMP, TEMP, 1
	281 Compare TEMP, 1
	282 JumpIfNotEqual {289}
	283 Move X8, [X20]
	284 Move W9, 1
	285 Move [X31+16], W9
	286 Move [X31+8], X8
	287 Call 0x3EB2AE0
	288 Move X8, X31
	289 Move W0, 8
	290 Call 0x3EB2AF0
	291 Move X8, [X20]
	292 Move [X0], X8
	293 Move X1, 0xC66000
	294 Add X1, X1, 3672
	295 Move X2, X31
	296 Call 0x3EB2B00
	297 Move X20, X0
	298 Call 0x3EB2AE0
	299 Move X0, X20
	300 Call 0x1D2D690
	301 Call 0x1991590

Method: System.Void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine)

Disassembly:
	0x0324F6B4 MOV X0, X20
	0x0324F6B8 BL 0x1D2C690
	0x0324F6BC BL 0x1990590
	0x0324F6C0 SUB X31, X31, 0x20
	0x0324F6C4 STR X30, [X31 + 0x10]
	0x0324F6C8 STR X0, [X31]
	0x0324F6CC STR X1, [X31 + 0x8]
	0x0324F6D0 STR X2, [X31 + 0x18]
	0x0324F6D4 ADRP X8, 0x118D000
	0x0324F6D8 ADD X8, X8, 0x4B7
	0x0324F6DC LDRB W8, [X8]
	0x0324F6E0 AND W8, W8, 0x1
	0x0324F6E4 TBNZ X8, 0x0, 0x324F708
	0x0324F6E8 ADRP X8, 0xED3000
	0x0324F6EC LDR X0, [X8 + 0xE80]
	0x0324F6F0 BL 0x1C16CF4
	0x0324F6F4 MOVZ W8, 0x1
	0x0324F6F8 ADRP X9, 0x118D000
	0x0324F6FC ADD X9, X9, 0x4B7
	0x0324F700 AND W8, W8, 0x1
	0x0324F704 STRB W8, [X9]
	0x0324F708 ADRP X8, 0xED3000
	0x0324F70C LDR X8, [X8 + 0xE80]
	0x0324F710 LDR X1, [X8]
	0x0324F714 ADD X0, X31, 0x0
	0x0324F718 BL 0x1BB4B68
	0x0324F71C LDR X30, [X31 + 0x10]
	0x0324F720 ADD X31, X31, 0x20
	0x0324F724 RET
	0x0324F728 STR X30, [X31 - 0x30]!
	0x0324F72C STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x118E000
	007 Move X21, 0xED4000
	008 Move W8, [X22+1198]
	009 Move X21, [X21+3488]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xED4000
	017 Move X0, [X0+3656]
	018 Call 0x1C17CF4
	019 Move X0, 0xED4000
	020 Move X0, [X0+3488]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+1198], W8
	024 Move X0, [X21]
	025 Move X21, 0xED4000
	026 Move W8, [X0+224]
	027 Move X21, [X21+3656]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X2, [X21]
	032 Add X0, X20, 8
	033 Move X1, X19
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Call AsyncTaskMethodBuilder`1<Int32>.SetStateMachine, X0, X1
	040 Return 

