Type: System.Security.Cryptography.TripleDESTransform

Method: System.Void .ctor(System.Security.Cryptography.TripleDES algo, System.Boolean encryption, System.Byte[] key, System.Byte[] iv)

Disassembly:
	0x03262BC8 BL 0x1C16CF4
	0x03262BCC ADRP X0, 0xEC1000
	0x03262BD0 LDR X0, [X0 + 0x5E0]
	0x03262BD4 BL 0x1C16CF4
	0x03262BD8 ADRP X0, 0xEC1000
	0x03262BDC LDR X0, [X0 + 0x5E8]
	0x03262BE0 BL 0x1C16CF4
	0x03262BE4 ADRP X0, 0xEC1000
	0x03262BE8 LDR X0, [X0 + 0x5F0]
	0x03262BEC BL 0x1C16CF4
	0x03262BF0 ADRP X0, 0xEC1000
	0x03262BF4 LDR X0, [X0 + 0x5F8]
	0x03262BF8 BL 0x1C16CF4
	0x03262BFC ADRP X0, 0xEC1000
	0x03262C00 LDR X0, [X0 + 0x600]
	0x03262C04 BL 0x1C16CF4
	0x03262C08 ADRP X0, 0xEC1000
	0x03262C0C LDR X0, [X0 + 0x608]
	0x03262C10 BL 0x1C16CF4
	0x03262C14 ADRP X0, 0xEC1000
	0x03262C18 LDR X0, [X0 + 0x610]
	0x03262C1C BL 0x1C16CF4
	0x03262C20 ADRP X0, 0xEC1000
	0x03262C24 LDR X0, [X0 + 0x618]
	0x03262C28 BL 0x1C16CF4
	0x03262C2C ADRP X0, 0xEC1000
	0x03262C30 LDR X0, [X0 + 0x620]
	0x03262C34 BL 0x1C16CF4
	0x03262C38 ADRP X0, 0xEC1000
	0x03262C3C LDR X0, [X0 + 0x628]
	0x03262C40 BL 0x1C16CF4
	0x03262C44 ADRP X0, 0xEC1000
	0x03262C48 LDR X0, [X0 + 0x630]
	0x03262C4C BL 0x1C16CF4
	0x03262C50 ADRP X0, 0xEC1000
	0x03262C54 LDR X0, [X0 + 0x638]
	0x03262C58 BL 0x1C16CF4
	0x03262C5C ADRP X0, 0xEC1000
	0x03262C60 LDR X0, [X0 + 0x640]
	0x03262C64 BL 0x1C16CF4
	0x03262C68 ADRP X0, 0xEC1000
	0x03262C6C LDR X0, [X0 + 0x648]
	0x03262C70 BL 0x1C16CF4
	0x03262C74 ADRP X0, 0xEC1000
	0x03262C78 LDR X0, [X0 + 0x650]
	0x03262C7C BL 0x1C16CF4
	0x03262C80 ADRP X0, 0xEC1000
	0x03262C84 LDR X0, [X0 + 0x658]
	0x03262C88 BL 0x1C16CF4
	0x03262C8C ADRP X0, 0xEC1000
	0x03262C90 LDR X0, [X0 + 0x660]
	0x03262C94 BL 0x1C16CF4
	0x03262C98 ADRP X0, 0xEC1000
	0x03262C9C LDR X0, [X0 + 0x668]
	0x03262CA0 BL 0x1C16CF4
	0x03262CA4 ADRP X0, 0xEC1000
	0x03262CA8 LDR X0, [X0 + 0x670]
	0x03262CAC BL 0x1C16CF4
	0x03262CB0 ADRP X0, 0xEC1000
	0x03262CB4 LDR X0, [X0 + 0x678]
	0x03262CB8 BL 0x1C16CF4
	0x03262CBC ADRP X0, 0xEC1000
	0x03262CC0 LDR X0, [X0 + 0x680]
	0x03262CC4 BL 0x1C16CF4
	0x03262CC8 ADRP X0, 0xEC1000
	0x03262CCC LDR X0, [X0 + 0x688]
	0x03262CD0 BL 0x1C16CF4
	0x03262CD4 ADRP X0, 0xEC1000
	0x03262CD8 LDR X0, [X0 + 0x690]
	0x03262CDC BL 0x1C16CF4
	0x03262CE0 ADRP X0, 0xEC1000
	0x03262CE4 LDR X0, [X0 + 0x698]
	0x03262CE8 BL 0x1C16CF4
	0x03262CEC ADRP X0, 0xEC1000
	0x03262CF0 LDR X0, [X0 + 0x6A0]
	0x03262CF4 BL 0x1C16CF4
	0x03262CF8 ADRP X0, 0xEC1000
	0x03262CFC LDR X0, [X0 + 0x6A8]
	0x03262D00 BL 0x1C16CF4
	0x03262D04 ADRP X0, 0xEC1000
	0x03262D08 LDR X0, [X0 + 0x6B0]
	0x03262D0C BL 0x1C16CF4
	0x03262D10 ADRP X0, 0xEC1000
	0x03262D14 LDR X0, [X0 + 0x6B8]
	0x03262D18 BL 0x1C16CF4
	0x03262D1C ADRP X0, 0xEC1000
	0x03262D20 LDR X0, [X0 + 0x6C0]
	0x03262D24 BL 0x1C16CF4
	0x03262D28 ADRP X0, 0xEC1000
	0x03262D2C LDR X0, [X0 + 0x6C8]
	0x03262D30 BL 0x1C16CF4
	0x03262D34 ADRP X0, 0xEC1000
	0x03262D38 LDR X0, [X0 + 0x6D0]
	0x03262D3C BL 0x1C16CF4
	0x03262D40 ADRP X0, 0xEC1000
	0x03262D44 LDR X0, [X0 + 0x6D8]
	0x03262D48 BL 0x1C16CF4
	0x03262D4C ADRP X0, 0xEC1000
	0x03262D50 LDR X0, [X0 + 0x6E0]
	0x03262D54 BL 0x1C16CF4
	0x03262D58 ADRP X0, 0xEC1000
	0x03262D5C LDR X0, [X0 + 0x6E8]
	0x03262D60 BL 0x1C16CF4
	0x03262D64 ADRP X0, 0xEC1000
	0x03262D68 LDR X0, [X0 + 0x6F0]
	0x03262D6C BL 0x1C16CF4
	0x03262D70 ADRP X0, 0xEC1000
	0x03262D74 LDR X0, [X0 + 0x6F8]
	0x03262D78 BL 0x1C16CF4
	0x03262D7C ADRP X0, 0xEC1000
	0x03262D80 LDR X0, [X0 + 0x700]
	0x03262D84 BL 0x1C16CF4
	0x03262D88 ADRP X0, 0xEC1000
	0x03262D8C LDR X0, [X0 + 0x708]
	0x03262D90 BL 0x1C16CF4
	0x03262D94 ADRP X0, 0xEC1000
	0x03262D98 LDR X0, [X0 + 0x710]
	0x03262D9C BL 0x1C16CF4
	0x03262DA0 ADRP X0, 0xEC1000
	0x03262DA4 LDR X0, [X0 + 0x718]
	0x03262DA8 BL 0x1C16CF4
	0x03262DAC ADRP X0, 0xEC1000
	0x03262DB0 LDR X0, [X0 + 0x720]
	0x03262DB4 BL 0x1C16CF4
	0x03262DB8 ADRP X0, 0xEC1000
	0x03262DBC LDR X0, [X0 + 0x728]
	0x03262DC0 BL 0x1C16CF4
	0x03262DC4 ADRP X0, 0xEC1000
	0x03262DC8 LDR X0, [X0 + 0x730]
	0x03262DCC BL 0x1C16CF4
	0x03262DD0 ADRP X0, 0xEC1000
	0x03262DD4 LDR X0, [X0 + 0x738]
	0x03262DD8 BL 0x1C16CF4
	0x03262DDC ADRP X0, 0xEC1000
	0x03262DE0 LDR X0, [X0 + 0x740]
	0x03262DE4 BL 0x1C16CF4
	0x03262DE8 ADRP X0, 0xEC1000
	0x03262DEC LDR X0, [X0 + 0x748]
	0x03262DF0 BL 0x1C16CF4
	0x03262DF4 ADRP X0, 0xEC1000
	0x03262DF8 LDR X0, [X0 + 0x750]
	0x03262DFC BL 0x1C16CF4
	0x03262E00 ADRP X0, 0xEC1000
	0x03262E04 LDR X0, [X0 + 0x758]
	0x03262E08 BL 0x1C16CF4
	0x03262E0C ADRP X0, 0xEC1000
	0x03262E10 LDR X0, [X0 + 0x760]
	0x03262E14 BL 0x1C16CF4
	0x03262E18 ADRP X0, 0xEC1000
	0x03262E1C LDR X0, [X0 + 0x768]
	0x03262E20 BL 0x1C16CF4
	0x03262E24 ADRP X0, 0xEC1000
	0x03262E28 LDR X0, [X0 + 0x770]
	0x03262E2C BL 0x1C16CF4
	0x03262E30 ADRP X0, 0xEC1000
	0x03262E34 LDR X0, [X0 + 0x778]
	0x03262E38 BL 0x1C16CF4
	0x03262E3C ADRP X0, 0xEC1000
	0x03262E40 LDR X0, [X0 + 0x780]
	0x03262E44 BL 0x1C16CF4
	0x03262E48 ADRP X0, 0xEC1000
	0x03262E4C LDR X0, [X0 + 0x788]
	0x03262E50 BL 0x1C16CF4
	0x03262E54 ADRP X0, 0xEC1000
	0x03262E58 LDR X0, [X0 + 0x790]
	0x03262E5C BL 0x1C16CF4
	0x03262E60 ADRP X0, 0xEC1000
	0x03262E64 LDR X0, [X0 + 0x798]
	0x03262E68 BL 0x1C16CF4
	0x03262E6C ADRP X0, 0xEC1000
	0x03262E70 LDR X0, [X0 + 0x7A0]
	0x03262E74 BL 0x1C16CF4
	0x03262E78 ADRP X0, 0xEC1000
	0x03262E7C LDR X0, [X0 + 0x7A8]
	0x03262E80 BL 0x1C16CF4
	0x03262E84 ADRP X0, 0xEC1000
	0x03262E88 LDR X0, [X0 + 0x7B0]
	0x03262E8C BL 0x1C16CF4
	0x03262E90 ADRP X0, 0xEC1000
	0x03262E94 LDR X0, [X0 + 0x7B8]
	0x03262E98 BL 0x1C16CF4
	0x03262E9C ADRP X0, 0xEC1000
	0x03262EA0 LDR X0, [X0 + 0x7C0]
	0x03262EA4 BL 0x1C16CF4
	0x03262EA8 ADRP X0, 0xEBF000
	0x03262EAC LDR X0, [X0 + 0x228]
	0x03262EB0 BL 0x1C16CF4
	0x03262EB4 ADRP X0, 0xEC1000
	0x03262EB8 LDR X0, [X0 + 0x7C8]
	0x03262EBC BL 0x1C16CF4
	0x03262EC0 ADRP X0, 0xEC1000
	0x03262EC4 LDR X0, [X0 + 0x7D0]

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X24, 0x117B000
	013 Move W8, [X24+1404]
	014 Move X19, X4
	015 Move X23, X3
	016 Move W22, W2
	017 Move X21, X1
	018 Move X20, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0xE92000
	024 Move X0, [X0+1560]
	025 Call 0x1C17CF4
	026 Move X0, 0xEC1000
	027 Move X0, [X0+3960]
	028 Call 0x1C17CF4
	029 Move X0, 0xEC0000
	030 Move X0, [X0+800]
	031 Call 0x1C17CF4
	032 Move X0, 0xEC2000
	033 Move X0, [X0+240]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X24+1404], W8
	037 Move X24, 0xEC2000
	038 Move X24, [X24+240]
	039 And W2, W22, 1
	040 Move X0, X20
	041 Move X1, X21
	042 Move X3, X19
	043 Move X4, X31
	044 Call SymmetricTransform..ctor, X0, X1, X2, X3
	045 Compare X23, 0
	046 JumpIfNotEqual {49}
	047 Call TripleDESTransform.GetStrongKey
	048 Move X23, X0
	049 Move X0, [X24]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X0, X23
	055 Call TripleDES.IsWeakKey, X0
	056 Move TEMP, X0
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfEqual {197}
	060 Move X25, 0xE92000
	061 Move X25, [X25+1560]
	062 Move X27, 0xEC0000
	063 Move W1, 8
	064 Move X0, [X25]
	065 Move X27, [X27+800]
	066 Call 0x1C17D6C
	067 Move X8, [X25]
	068 Move X24, X0
	069 Move W1, 8
	070 Move X0, X8
	071 Call 0x1C17D6C
	072 Move X8, [X25]
	073 Move X26, X0
	074 Move W1, 8
	075 Move X0, X8
	076 Call 0x1C17D6C
	077 Move X8, [X27]
	078 Move X27, X0
	079 Move W9, [X8+224]
	080 Compare W9, 0
	081 JumpIfNotEqual {84}
	082 Move X0, X8
	083 Call 0x1C17DFC
	084 Move X0, X31
	085 Call DES.Create
	086 Move X25, X0
	087 Move W4, 8
	088 Move X0, X23
	089 Move W1, W31
	090 Move X2, X24
	091 Move W3, W31
	092 Move X5, X31
	093 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	094 Move W1, 8
	095 Move W4, 8
	096 Move X0, X23
	097 Move X2, X26
	098 Move W3, W31
	099 Move X5, X31
	100 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	101 Compare X23, 0
	102 JumpIfEqual {196}
	103 Move W8, [X23+24]
	104 Move X28, 0xEC1000
	105 Move X28, [X28+3960]
	106 Move W4, 8
	107 NotImplemented "Instruction CMP not yet implemented."
	108 NotImplemented "Instruction CSET not yet implemented."
	109 Move W1, W8
	110 ShiftRight W1, 28
	111 And W1, W1, 0x7FFFFFF
	112 Move X0, X23
	113 Move X2, X27
	114 Move W3, W31
	115 Move X5, X31
	116 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	117 Move TEMP, X22
	118 And TEMP, TEMP, 1
	119 Compare TEMP, 1
	120 JumpIfEqual {129}
	121 Compare X21, 0
	122 JumpIfEqual {196}
	123 Move X8, [X21]
	124 Move X0, X21
	125 Move X9, [X8+568]
	126 Move X1, [X8+576]
	127 NotImplemented "Instruction BLR not yet implemented."
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move X0, [X28]
	130 Call 0x1C17F10
	131 Move W2, 1
	132 Move X1, X25
	133 Move X3, X24
	134 Move X4, X19
	135 Move X21, X0
	136 Call DESTransform..ctor, X0, X1, X2, X3, X4
	137 Move [X20+88], X21
	138 Move X0, [X28]
	139 Call 0x1C17F10
	140 Move X1, X25
	141 Move W2, W31
	142 Move X3, X26
	143 Move X4, X19
	144 Move X21, X0
	145 Call DESTransform..ctor, X0, X1, X2, X3, X4
	146 Move [X20+96], X21
	147 Move X0, [X28]
	148 Call 0x1C17F10
	149 Move W2, 1
	150 Move X1, X25
	151 Move X3, X27
	152 Move X4, X19
	153 Move X21, X0
	154 Call DESTransform..ctor, X0, X1, X2, X3, X4
	155 Add X8, X20, 104
	156 Move X0, [X28]
	157 Call 0x1C17F10
	158 Move X1, X25
	159 Move W2, W31
	160 Move X3, X27
	161 Move X4, X19
	162 Move X21, X0
	163 Call DESTransform..ctor, X0, X1, X2, X3, X4
	164 Move [X20+112], X21
	165 Move X0, [X28]
	166 Call 0x1C17F10
	167 Move W2, 1
	168 Move X1, X25
	169 Move X3, X26
	170 Move X4, X19
	171 Move X21, X0
	172 Call DESTransform..ctor, X0, X1, X2, X3, X4
	173 Move [X20+120], X21
	174 Move X0, [X28]
	175 Call 0x1C17F10
	176 Move X1, X25
	177 Move W2, W31
	178 Move X3, X24
	179 Move X4, X19
	180 Move X21, X0
	181 Call DESTransform..ctor, X0, X1, X2, X3, X4
	182 Add X8, X20, 128
	183 Move [X8], X21
	184 Move X20, [X31+80]
	185 Move X19, [X31+88]
	186 Move X22, [X31+64]
	187 Move X21, [X31+72]
	188 Move X24, [X31+48]
	189 Move X23, [X31+56]
	190 Move X26, [X31+32]
	191 Move X25, [X31+40]
	192 Move X28, [X31+16]
	193 Move X27, [X31+24]
	194 Move X30, [X31+96]
	195 Return 
	196 Call 0x1C17F20
	197 Move X0, 0xEC2000
	198 Move X0, [X0+1048]
	199 Call 0x1C17D08
	200 Move X1, X31
	201 Call Locale.GetText, X0
	202 Move X19, X0
	203 Move X0, 0xEBF000
	204 Move X0, [X0+3296]
	205 Call 0x1C17D08
	206 Call 0x1C17F10
	207 Move X1, X19
	208 Move X2, X31
	209 Move X20, X0
	210 Call CryptographicException..ctor, X0, X1
	211 Move X0, 0xEC2000
	212 Move X0, [X0+1056]
	213 Call 0x1C17D08
	214 Move X1, X0
	215 Move X0, X20
	216 Call 0x1C17DEC

Method: System.Void ECB(System.Byte[] input, System.Byte[] output)

Disassembly:
	0x0326BABC STR X20, [X19 + 0x40]
	0x0326BAC0 MOV X0, X20
	0x0326BAC4 LDP X20, X19, [X31 + 0x10]
	0x0326BAC8 MOV X1, X31
	0x0326BACC LDR X30, [X31], #0x20
	0x0326BAD0 B 0x3225544
	0x0326BAD4 BL 0x1C16F20
	0x0326BAD8 STR X30, [X31 - 0x20]!
	0x0326BADC STP X20, X19, [X31 + 0x10]
	0x0326BAE0 MOV X19, X0
	0x0326BAE4 LDR X0, [X0 + 0x10]
	0x0326BAE8 BL 0x326C1D8
	0x0326BAEC LDR X20, [X19 + 0x48]
	0x0326BAF0 BL 0x1C16D44
	0x0326BAF4 CBNZ X20, 0x326BB1C
	0x0326BAF8 LDR X0, [X19 + 0x10]
	0x0326BAFC CBZ X0, 0x326BB30
	0x0326BB00 LDR X8, [X0]
	0x0326BB04 LDR X9, [X8 + 0x228]
	0x0326BB08 LDR X1, [X8 + 0x230]
	0x0326BB0C BLR X9
	0x0326BB10 MOV X20, X0
	0x0326BB14 BL 0x1C16D44
	0x0326BB18 STR X20, [X19 + 0x48]
	0x0326BB1C MOV X0, X20
	0x0326BB20 LDP X20, X19, [X31 + 0x10]
	0x0326BB24 MOV X1, X31
	0x0326BB28 LDR X30, [X31], #0x20
	0x0326BB2C B 0x3225544
	0x0326BB30 BL 0x1C16F20
	0x0326BB34 STP X30, X21, [X31 - 0x20]!
	0x0326BB38 STP X20, X19, [X31 + 0x10]
	0x0326BB3C ADRP X21, 0x1171000
	0x0326BB40 ADRP X20, 0xEB5000
	0x0326BB44 LDRB W8, [X21 + 0x587]
	0x0326BB48 LDR X20, [X20 + 0xBD0]
	0x0326BB4C MOV X19, X0
	0x0326BB50 TBNZ X8, 0x0, 0x326BB68
	0x0326BB54 ADRP X0, 0xEB5000
	0x0326BB58 LDR X0, [X0 + 0xBD0]
	0x0326BB5C BL 0x1C16CF4
	0x0326BB60 MOVZ W8, 0x1
	0x0326BB64 STRB W8, [X21 + 0x587]
	0x0326BB68 LDR X0, [X19 + 0x10]
	0x0326BB6C BL 0x326C1D8
	0x0326BB70 MOV X0, X19
	0x0326BB74 BL 0x326B89C
	0x0326BB78 MOV X1, X31
	0x0326BB7C BL 0x3225544
	0x0326BB80 LDR X1, [X20]
	0x0326BB84 MOV X19, X0
	0x0326BB88 BL 0x21465E8
	0x0326BB8C MOV X0, X19
	0x0326BB90 LDP X20, X19, [X31 + 0x10]
	0x0326BB94 LDP X30, X21, [X31], #0x20
	0x0326BB98 RET
	0x0326BB9C STP X30, X19, [X31 - 0x10]!
	0x0326BBA0 MOV X19, X0
	0x0326BBA4 LDR X0, [X0 + 0x10]
	0x0326BBA8 BL 0x326C1D8
	0x0326BBAC MOV X0, X19
	0x0326BBB0 BL 0x326B89C
	0x0326BBB4 MOV X1, X31
	0x0326BBB8 LDP X30, X19, [X31], #0x10
	0x0326BBBC B 0x32256C4
	0x0326BBC0 LDR X8, [X0]
	0x0326BBC4 MOV W1, W31
	0x0326BBC8 LDR X3, [X8 + 0x258]
	0x0326BBCC LDR X2, [X8 + 0x260]
	0x0326BBD0 BR X3
	0x0326BBD4 STR X30, [X31 - 0x30]!
	0x0326BBD8 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x1172000
	008 Move X22, 0xEB8000
	009 Move W8, [X23+1405]
	010 Move X22, [X22+3960]
	011 Move X19, X2
	012 Move X21, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xEB8000
	019 Move X0, [X0+3960]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+1405], W8
	023 Move X0, [X22]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X22]
	029 Move X8, [X0+184]
	030 Move X0, X21
	031 Move X1, X19
	032 Move W3, W31
	033 Move X2, [X8+48]
	034 Call DESTransform.Permutation, X0, X1, X2, X3
	035 Move W8, [X20+24]
	036 Compare W8, 0
	037 JumpIfEqual {53}
	038 Move X0, [X20+88]
	039 Compare X0, 0
	040 JumpIfEqual {90}
	041 Move X1, X19
	042 Move X2, X19
	043 Call DESTransform.ProcessBlock, X0, X1, X2
	044 Move X0, [X20+96]
	045 Compare X0, 0
	046 JumpIfEqual {90}
	047 Move X1, X19
	048 Move X2, X19
	049 Call DESTransform.ProcessBlock, X0, X1, X2
	050 Move X0, [X20+104]
	051 Compare X0, 0
	052 JumpIfNotEqual {68}
	053 Move X0, [X20+112]
	054 Compare X0, 0
	055 JumpIfEqual {90}
	056 Move X1, X19
	057 Move X2, X19
	058 Call DESTransform.ProcessBlock, X0, X1, X2
	059 Move X0, [X20+120]
	060 Compare X0, 0
	061 JumpIfEqual {90}
	062 Move X1, X19
	063 Move X2, X19
	064 Call DESTransform.ProcessBlock, X0, X1, X2
	065 Move X0, [X20+128]
	066 Compare X0, 0
	067 JumpIfEqual {90}
	068 Move X1, X19
	069 Move X2, X19
	070 Call DESTransform.ProcessBlock, X0, X1, X2
	071 Move X0, [X22]
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {77}
	075 Call 0x1C17DFC
	076 Move X0, [X22]
	077 Move X8, [X0+184]
	078 Move X0, X19
	079 Move X1, X19
	080 Move X20, [X31+32]
	081 Move X19, [X31+40]
	082 Move X2, [X8+56]
	083 Move X22, [X31+16]
	084 Move X21, [X31+24]
	085 Move W3, 1
	086 Move X30, [X31+48]
	087 Move X23, [X31+56]
	088 Call DESTransform.Permutation, X0, X1, X2, X3
	089 Return 
	090 Call 0x1C17F20

Method: System.Byte[] GetStrongKey()

Disassembly:
	0x0326BA18 RET
	0x0326BA1C BL 0x1C16F28
	0x0326BA20 BL 0x1C16F20
	0x0326BA24 STR X30, [X31 - 0x20]!
	0x0326BA28 STP X20, X19, [X31 + 0x10]
	0x0326BA2C MOV X19, X0
	0x0326BA30 LDR X0, [X0 + 0x10]
	0x0326BA34 BL 0x326C1D8
	0x0326BA38 LDR X20, [X19 + 0x38]
	0x0326BA3C BL 0x1C16D44
	0x0326BA40 CBNZ X20, 0x326BA68
	0x0326BA44 LDR X0, [X19 + 0x10]
	0x0326BA48 CBZ X0, 0x326BA78
	0x0326BA4C LDR X8, [X0]
	0x0326BA50 LDR X9, [X8 + 0x208]
	0x0326BA54 LDR X1, [X8 + 0x210]
	0x0326BA58 BLR X9
	0x0326BA5C MOV X20, X0
	0x0326BA60 BL 0x1C16D44
	0x0326BA64 STR X20, [X19 + 0x38]
	0x0326BA68 MOV X0, X20
	0x0326BA6C LDP X20, X19, [X31 + 0x10]
	0x0326BA70 LDR X30, [X31], #0x20
	0x0326BA74 RET
	0x0326BA78 BL 0x1C16F20
	0x0326BA7C STR X30, [X31 - 0x20]!
	0x0326BA80 STP X20, X19, [X31 + 0x10]
	0x0326BA84 MOV X19, X0
	0x0326BA88 LDR X0, [X0 + 0x10]
	0x0326BA8C BL 0x326C1D8
	0x0326BA90 LDR X20, [X19 + 0x40]
	0x0326BA94 BL 0x1C16D44
	0x0326BA98 CBNZ X20, 0x326BAC0
	0x0326BA9C LDR X0, [X19 + 0x10]
	0x0326BAA0 CBZ X0, 0x326BAD4
	0x0326BAA4 LDR X8, [X0]
	0x0326BAA8 LDR X9, [X8 + 0x218]
	0x0326BAAC LDR X1, [X8 + 0x220]
	0x0326BAB0 BLR X9
	0x0326BAB4 MOV X20, X0
	0x0326BAB8 BL 0x1C16D44

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1172000
	006 Move X19, 0xEB8000
	007 Move W8, [X20+1406]
	008 Move X19, [X19+3960]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xEB8000
	014 Move X0, [X0+3960]
	015 Call 0x1C17CF4
	016 Move X0, 0xEB9000
	017 Move X0, [X0+240]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+1406], W8
	021 Move X0, [X19]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X19]
	027 Move X8, [X0+184]
	028 Move X21, 0xEB9000
	029 Move W8, [X8+12]
	030 Move X21, [X21+240]
	031 Add W19, W8, W8
	032 Move W0, W19
	033 Move X1, X31
	034 Call KeyBuilder.Key, X0
	035 Move X8, [X21]
	036 Move X20, X0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X0, X20
	043 Call TripleDES.IsWeakKey, X0
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfEqual {32}
	048 Move X0, X20
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Return X0

