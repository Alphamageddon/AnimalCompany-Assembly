Type: System.Security.Cryptography.TripleDESCryptoServiceProvider

Method: System.Void .ctor()

Disassembly:
	0x032626C0 STRB W13, [X11 + 0x20]
	0x032626C4 ADD W11, W12, 0x1
	0x032626C8 B.NE 0x3262608
	0x032626CC LDR X30, [X31], #0x10
	0x032626D0 RET
	0x032626D4 BL 0x1C16F28
	0x032626D8 BL 0x1C16F20
	0x032626DC CMP W1, 0x1
	0x032626E0 B.LT 0x326272C
	0x032626E4 MOV W9, W1
	0x032626E8 MOV X8, X31
	0x032626EC UBFM X9, X9, 0x3E, 0x3D
	0x032626F0 LDRB W10, [X2, W8, SXTW]
	0x032626F4 ADD W11, W8, 0x1
	0x032626F8 ADD W12, W8, 0x2
	0x032626FC LDRB W11, [X2, W11, SXTW]
	0x03262700 ADD W13, W8, 0x3
	0x03262704 LDRB W12, [X2, W12, SXTW]
	0x03262708 LDRB W13, [X2, W13, SXTW]
	0x0326270C UBFM W10, W10, 0x8, 0x7
	0x03262710 BFM W10, W11, 0x10, 0x7
	0x03262714 BFM W10, W12, 0x18, 0x7
	0x03262718 ORR W10, W10, W13, 0x0
	0x0326271C STR W10, [X0, X8, LSL]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x117B000
	006 Move X21, 0xEC2000
	007 Move W8, [X20+1362]
	008 Move X21, [X21+240]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEC2000
	015 Move X0, [X0+240]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1362], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call TripleDES..ctor, X0
	026 Move W8, 8
	027 Move [X19+20], W8
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return 

Method: System.Security.Cryptography.ICryptoTransform CreateEncryptor(System.Byte[] rgbKey, System.Byte[] rgbIV)

Disassembly:
	0x03262AC0 BL 0x1C16CF4
	0x03262AC4 ADRP X0, 0xEC1000
	0x03262AC8 LDR X0, [X0 + 0x530]
	0x03262ACC BL 0x1C16CF4
	0x03262AD0 ADRP X0, 0xEC1000
	0x03262AD4 LDR X0, [X0 + 0x538]
	0x03262AD8 BL 0x1C16CF4
	0x03262ADC ADRP X0, 0xEC1000
	0x03262AE0 LDR X0, [X0 + 0x540]
	0x03262AE4 BL 0x1C16CF4
	0x03262AE8 ADRP X0, 0xEC1000
	0x03262AEC LDR X0, [X0 + 0x548]
	0x03262AF0 BL 0x1C16CF4
	0x03262AF4 ADRP X0, 0xEC1000
	0x03262AF8 LDR X0, [X0 + 0x550]
	0x03262AFC BL 0x1C16CF4
	0x03262B00 ADRP X0, 0xEC1000
	0x03262B04 LDR X0, [X0 + 0x558]
	0x03262B08 BL 0x1C16CF4
	0x03262B0C ADRP X0, 0xEC1000
	0x03262B10 LDR X0, [X0 + 0x560]
	0x03262B14 BL 0x1C16CF4
	0x03262B18 ADRP X0, 0xEC1000
	0x03262B1C LDR X0, [X0 + 0x568]
	0x03262B20 BL 0x1C16CF4
	0x03262B24 ADRP X0, 0xEC1000
	0x03262B28 LDR X0, [X0 + 0x570]
	0x03262B2C BL 0x1C16CF4
	0x03262B30 ADRP X0, 0xEC1000
	0x03262B34 LDR X0, [X0 + 0x578]
	0x03262B38 BL 0x1C16CF4
	0x03262B3C ADRP X0, 0xEC1000
	0x03262B40 LDR X0, [X0 + 0x580]
	0x03262B44 BL 0x1C16CF4
	0x03262B48 ADRP X0, 0xEC1000
	0x03262B4C LDR X0, [X0 + 0x588]
	0x03262B50 BL 0x1C16CF4
	0x03262B54 ADRP X0, 0xEC1000
	0x03262B58 LDR X0, [X0 + 0x590]
	0x03262B5C BL 0x1C16CF4
	0x03262B60 ADRP X0, 0xEC1000
	0x03262B64 LDR X0, [X0 + 0x598]
	0x03262B68 BL 0x1C16CF4
	0x03262B6C ADRP X0, 0xEC1000
	0x03262B70 LDR X0, [X0 + 0x5A0]
	0x03262B74 BL 0x1C16CF4
	0x03262B78 ADRP X0, 0xEC1000
	0x03262B7C LDR X0, [X0 + 0x5A8]
	0x03262B80 BL 0x1C16CF4
	0x03262B84 ADRP X0, 0xEC1000
	0x03262B88 LDR X0, [X0 + 0x5B0]
	0x03262B8C BL 0x1C16CF4
	0x03262B90 ADRP X0, 0xEC1000
	0x03262B94 LDR X0, [X0 + 0x5B8]
	0x03262B98 BL 0x1C16CF4
	0x03262B9C ADRP X0, 0xEC1000
	0x03262BA0 LDR X0, [X0 + 0x5C0]
	0x03262BA4 BL 0x1C16CF4
	0x03262BA8 ADRP X0, 0xEC1000
	0x03262BAC LDR X0, [X0 + 0x5C8]
	0x03262BB0 BL 0x1C16CF4
	0x03262BB4 ADRP X0, 0xEC1000
	0x03262BB8 LDR X0, [X0 + 0x5D0]
	0x03262BBC BL 0x1C16CF4
	0x03262BC0 ADRP X0, 0xEC1000
	0x03262BC4 LDR X0, [X0 + 0x5D8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x117B000
	008 Move X23, 0xEC2000
	009 Move W8, [X22+1363]
	010 Move X23, [X23+240]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0xEC2000
	019 Move X0, [X0+1032]
	020 Call 0x1C17CF4
	021 Move X0, 0xEC2000
	022 Move X0, [X0+240]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+1363], W8
	026 Move X0, [X23]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Call TripleDES.IsWeakKey, X0
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {55}
	037 Move X8, 0xEC2000
	038 Move X8, [X8+1032]
	039 Move X0, [X8]
	040 Call 0x1C17F10
	041 Move W2, 1
	042 Move X1, X21
	043 Move X3, X20
	044 Move X4, X19
	045 Move X22, X0
	046 Call TripleDESTransform..ctor, X0, X1, X2, X3, X4
	047 Move X0, X22
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0
	055 Move X0, 0xEC1000
	056 Move X0, [X0+3920]
	057 Call 0x1C17D08
	058 Move X1, X31
	059 Call Environment.GetResourceString, X0
	060 Move X19, X0
	061 Move X0, 0xEBF000
	062 Move X0, [X0+3296]
	063 Call 0x1C17D08
	064 Call 0x1C17F10
	065 Move X20, X0
	066 Move X0, 0xEBF000
	067 Move X0, [X0+3776]
	068 Call 0x1C17D08
	069 Move X2, X0
	070 Move X0, X20
	071 Move X1, X19
	072 Move X3, X31
	073 Call CryptographicException..ctor, X0, X1, X2
	074 Move X0, 0xEC2000
	075 Move X0, [X0+1040]
	076 Call 0x1C17D08
	077 Move X1, X0
	078 Move X0, X20
	079 Call 0x1C17DEC

Method: System.Security.Cryptography.ICryptoTransform CreateDecryptor(System.Byte[] rgbKey, System.Byte[] rgbIV)

Disassembly:
	0x03262EC8 BL 0x1C16CF4
	0x03262ECC ADRP X0, 0xEC1000
	0x03262ED0 LDR X0, [X0 + 0x7D8]
	0x03262ED4 BL 0x1C16CF4
	0x03262ED8 ADRP X0, 0xEC1000
	0x03262EDC LDR X0, [X0 + 0x7E0]
	0x03262EE0 BL 0x1C16CF4
	0x03262EE4 ADRP X0, 0xEC1000
	0x03262EE8 LDR X0, [X0 + 0x7E8]
	0x03262EEC BL 0x1C16CF4
	0x03262EF0 ADRP X0, 0xEC1000
	0x03262EF4 LDR X0, [X0 + 0x7F0]
	0x03262EF8 BL 0x1C16CF4
	0x03262EFC MOVZ W8, 0x1
	0x03262F00 STRB W8, [X21 + 0x55D]
	0x03262F04 STRB W31, [X31 + 0x4]
	0x03262F08 CBZ X20, 0x32644AC
	0x03262F0C ADRP X24, 0xE91000
	0x03262F10 LDR X24, [X24 + 0x6C0]
	0x03262F14 MOV X0, X20
	0x03262F18 MOV X1, X31
	0x03262F1C STR X31, [X31 + 0x8]
	0x03262F20 BL 0x322B6E4
	0x03262F24 MOV X1, X31
	0x03262F28 MOV X21, X0
	0x03262F2C BL 0x335C87C
	0x03262F30 MOVZ W8, 0x48B2
	0x03262F34 MOVK W8, 0x918F0000
	0x03262F38 CMP W0, W8
	0x03262F3C B.HI 0x3262FBC
	0x03262F40 MOVZ W8, 0x7C5E
	0x03262F44 MOVK W8, 0x4E9D0000
	0x03262F48 CMP W0, W8
	0x03262F4C B.HI 0x3263038
	0x03262F50 MOVZ W8, 0xA30D
	0x03262F54 MOVK W8, 0x231C0000
	0x03262F58 CMP W0, W8
	0x03262F5C B.HI 0x3263110
	0x03262F60 MOVZ W8, 0xF67A
	0x03262F64 MOVK W8, 0x17F20000
	0x03262F68 CMP W0, W8
	0x03262F6C B.HI 0x3263280
	0x03262F70 MOVZ W8, 0x192
	0x03262F74 MOVK W8, 0x11900000
	0x03262F78 CMP W0, W8
	0x03262F7C B.HI 0x3263510
	0x03262F80 MOVZ W8, 0xD8A4
	0x03262F84 MOVK W8, 0x5D40000
	0x03262F88 CMP W0, W8
	0x03262F8C B.EQ 0x3263DC4
	0x03262F90 MOVZ W8, 0xA804
	0x03262F94 MOVK W8, 0x11430000
	0x03262F98 CMP W0, W8
	0x03262F9C B.EQ 0x3263AF0
	0x03262FA0 MOVZ W8, 0x192
	0x03262FA4 MOVK W8, 0x11900000
	0x03262FA8 CMP W0, W8
	0x03262FAC B.NE 0x3263A10
	0x03262FB0 ADRP X8, 0xEC1000
	0x03262FB4 LDR X8, [X8 + 0x698]
	0x03262FB8 B 0x32643B8
	0x03262FBC MOVZ W8, 0xDFB5
	0x03262FC0 MOVK W8, 0xC7130000
	0x03262FC4 CMP W0, W8
	0x03262FC8 B.HI 0x32630A4
	0x03262FCC MOVZ W8, 0xE7B2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x117B000
	008 Move X23, 0xEC2000
	009 Move W8, [X22+1364]
	010 Move X23, [X23+240]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0xEC2000
	019 Move X0, [X0+1032]
	020 Call 0x1C17CF4
	021 Move X0, 0xEC2000
	022 Move X0, [X0+240]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+1364], W8
	026 Move X0, [X23]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Call TripleDES.IsWeakKey, X0
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {55}
	037 Move X8, 0xEC2000
	038 Move X8, [X8+1032]
	039 Move X0, [X8]
	040 Call 0x1C17F10
	041 Move X1, X21
	042 Move W2, W31
	043 Move X3, X20
	044 Move X4, X19
	045 Move X22, X0
	046 Call TripleDESTransform..ctor, X0, X1, X2, X3, X4
	047 Move X0, X22
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0
	055 Move X0, 0xEC1000
	056 Move X0, [X0+3920]
	057 Call 0x1C17D08
	058 Move X1, X31
	059 Call Environment.GetResourceString, X0
	060 Move X19, X0
	061 Move X0, 0xEBF000
	062 Move X0, [X0+3296]
	063 Call 0x1C17D08
	064 Call 0x1C17F10
	065 Move X20, X0
	066 Move X0, 0xEBF000
	067 Move X0, [X0+3776]
	068 Call 0x1C17D08
	069 Move X2, X0
	070 Move X0, X20
	071 Move X1, X19
	072 Move X3, X31
	073 Call CryptographicException..ctor, X0, X1, X2
	074 Move X0, 0xEC2000
	075 Move X0, [X0+1064]
	076 Call 0x1C17D08
	077 Move X1, X0
	078 Move X0, X20
	079 Call 0x1C17DEC

Method: System.Void GenerateKey()

Disassembly:
	0x03262FD0 MOVK W8, 0xAE170000
	0x03262FD4 CMP W0, W8
	0x03262FD8 B.HI 0x326316C
	0x03262FDC MOVZ W8, 0x2B1D
	0x03262FE0 MOVK W8, 0xA00E0000
	0x03262FE4 CMP W0, W8
	0x03262FE8 B.HI 0x32632CC
	0x03262FEC MOVZ W8, 0x3112
	0x03262FF0 MOVK W8, 0x941C0000
	0x03262FF4 CMP W0, W8
	0x03262FF8 B.HI 0x326354C
	0x03262FFC MOVZ W8, 0x7826
	0x03263000 MOVK W8, 0x921D0000
	0x03263004 CMP W0, W8
	0x03263008 B.EQ 0x3263DD0
	0x0326300C MOVZ W8, 0xB583
	0x03263010 MOVK W8, 0x93B60000
	0x03263014 CMP W0, W8
	0x03263018 B.EQ 0x3263AFC
	0x0326301C MOVZ W8, 0x3112
	0x03263020 MOVK W8, 0x941C0000
	0x03263024 CMP W0, W8
	0x03263028 B.NE 0x3263A10
	0x0326302C ADRP X8, 0xEC0000
	0x03263030 LDR X8, [X8 + 0x5E0]
	0x03263034 B 0x326402C
	0x03263038 MOVZ W8, 0xD3D0
	0x0326303C MOVK W8, 0x6F030000
	0x03263040 CMP W0, W8
	0x03263044 B.HI 0x32631C8
	0x03263048 MOVZ W8, 0x63CE
	0x0326304C MOVK W8, 0x633B0000
	0x03263050 CMP W0, W8
	0x03263054 B.HI 0x3263318
	0x03263058 MOVZ W8, 0xAED8
	0x0326305C MOVK W8, 0x5FA60000
	0x03263060 CMP W0, W8
	0x03263064 B.HI 0x3263588
	0x03263068 MOVZ W8, 0x34DB
	0x0326306C MOVK W8, 0x591E0000
	0x03263070 CMP W0, W8
	0x03263074 B.EQ 0x3263E10
	0x03263078 MOVZ W8, 0x535D
	0x0326307C MOVK W8, 0x5F670000
	0x03263080 CMP W0, W8
	0x03263084 B.EQ 0x3263B08
	0x03263088 MOVZ W8, 0xAED8
	0x0326308C MOVK W8, 0x5FA60000
	0x03263090 CMP W0, W8
	0x03263094 B.NE 0x3263A10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x117B000
	006 Move X20, 0xE92000
	007 Move W8, [X21+1365]
	008 Move X20, [X20+1560]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xE92000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move X0, 0xEC2000
	018 Move X0, [X0+240]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1365], W8
	022 Move W8, [X19+56]
	023 Move X0, [X20]
	024 Add W9, W8, 7
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction CSEL not yet implemented."
	027 NotImplemented "Instruction SBFM not yet implemented."
	028 Call 0x1C17D6C
	029 Move [X19+32], X0
	030 Call Utils.get_StaticRandomNumberGenerator
	031 Compare X0, 0
	032 JumpIfEqual {64}
	033 Move X8, [X0]
	034 Move X21, 0xEC1000
	035 Move X1, [X19+32]
	036 Move X9, [X8+408]
	037 Move X2, [X8+416]
	038 Move X21, [X21+240]
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Move X0, [X21]
	041 Move X20, [X19+32]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move X0, X20
	047 Call TripleDES.IsWeakKey, X0
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {59}
	052 Call Utils.get_StaticRandomNumberGenerator
	053 Compare X0, 0
	054 JumpIfEqual {64}
	055 Move X8, [X0]
	056 Move X1, [X19+32]
	057 Move X9, [X8+408]
	058 Move X2, [X8+416]
	059 Move X20, [X31+16]
	060 Move X19, [X31+24]
	061 Move X30, [X31+32]
	062 Move X21, [X31+40]
	063 Return 
	064 Call 0x1C17F20

Method: System.Void GenerateIV()

Disassembly:
	0x03263130 MOVZ W8, 0xA409
	0x03263134 MOVK W8, 0x29B80000
	0x03263138 CMP W0, W8
	0x0326313C B.EQ 0x3263E5C
	0x03263140 MOVZ W8, 0x3648
	0x03263144 MOVK W8, 0x2A3B0000
	0x03263148 CMP W0, W8
	0x0326314C B.EQ 0x3263B20
	0x03263150 MOVZ W8, 0x62B5
	0x03263154 MOVK W8, 0x2BCA0000
	0x03263158 CMP W0, W8
	0x0326315C B.NE 0x3263A10
	0x03263160 ADRP X8, 0xEC0000
	0x03263164 LDR X8, [X8 + 0x6E8]
	0x03263168 B 0x3264434
	0x0326316C MOVZ W8, 0x3F99
	0x03263170 MOVK W8, 0xB92B0000
	0x03263174 CMP W0, W8
	0x03263178 B.HI 0x326342C
	0x0326317C MOVZ W8, 0x253E
	0x03263180 MOVK W8, 0xB4420000
	0x03263184 CMP W0, W8
	0x03263188 B.HI 0x3263670
	0x0326318C MOVZ W8, 0xF8D9
	0x03263190 MOVK W8, 0xAEA90000
	0x03263194 CMP W0, W8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x117A000
	006 Move X21, 0xE91000
	007 Move W8, [X20+1366]
	008 Move X21, [X21+1560]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE91000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1366], W8
	019 Move X0, [X21]
	020 Move W1, 8
	021 Call 0x1C17D6C
	022 Move [X19+24], X0
	023 Call Utils.get_StaticRandomNumberGenerator
	024 Compare X0, 0
	025 JumpIfEqual {35}
	026 Move X8, [X0]
	027 Move X1, [X19+24]
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X3, [X8+408]
	031 Move X2, [X8+416]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 CallNoReturn X3
	035 Call 0x1C17F20

