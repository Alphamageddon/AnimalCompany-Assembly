Type: System.Security.Util.Tokenizer

Method: System.Void BasicInitialization()

Disassembly:
	0x0324D2AC CBZ X0, 0x324D350
	0x0324D2B0 ADRP X8, 0xEB3000
	0x0324D2B4 LDR X8, [X8 + 0xE00]
	0x0324D2B8 LDR X9, [X0]
	0x0324D2BC LDR X8, [X8]
	0x0324D2C0 LDRB W11, [X9 + 0x130]
	0x0324D2C4 LDRB W10, [X8 + 0x130]
	0x0324D2C8 CMP W11, W10
	0x0324D2CC B.CC 0x324D2E4
	0x0324D2D0 LDR X9, [X9 + 0xC8]
	0x0324D2D4 ADD X9, X9, X10, 0x3, LSL
	0x0324D2D8 LDUR X9, [X9 - 0x8]
	0x0324D2DC CMP X9, X8
	0x0324D2E0 B.EQ 0x324D340
	0x0324D2E4 LDR X8, [X0]
	0x0324D2E8 LDR X9, [X8 + 0x298]
	0x0324D2EC LDR X1, [X8 + 0x2A0]
	0x0324D2F0 BLR X9
	0x0324D2F4 LDR X0, [X19 + 0x40]
	0x0324D2F8 CBZ X0, 0x324D30C
	0x0324D2FC LDR W2, [X0 + 0x18]
	0x0324D300 MOV W1, W31
	0x0324D304 MOV X3, X31
	0x0324D308 BL 0x339FA34
	0x0324D30C LDR X0, [X19 + 0x50]
	0x0324D310 CBZ X0, 0x324D330
	0x0324D314 LDR W2, [X0 + 0x18]
	0x0324D318 LDP X20, X19, [X31 + 0x20]
	0x0324D31C LDP X22, X21, [X31 + 0x10]
	0x0324D320 MOV W1, W31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1190000
	006 Move X20, 0xED6000
	007 Move W8, [X21+1169]
	008 Move X20, [X20+2928]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xED6000
	015 Move X0, [X0+2928]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1169], W8
	019 Move X8, -41283584
	020 Move X9, -41287680
	021 Move V0, [X8+3776]
	022 Move V1, [X9+126]
	023 Move [X19+96], X31
	024 Move [X19+16], D0
	025 Move [X19+3], V1
	026 Move X0, [X20]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X31
	032 Call SharedStatics.GetSharedStringMaker
	033 Move [X19+72], X0
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return 

Method: System.Void Recycle()

Disassembly:
	0x0324D324 MOV X3, X31
	0x0324D328 LDR X30, [X31], #0x30
	0x0324D32C B 0x339FA34
	0x0324D330 LDP X20, X19, [X31 + 0x20]
	0x0324D334 LDP X22, X21, [X31 + 0x10]
	0x0324D338 LDR X30, [X31], #0x30
	0x0324D33C RET
	0x0324D340 LDRB W8, [X0 + 0x62]
	0x0324D344 CBNZ W8, 0x324D2F4
	0x0324D348 BL 0x324D170
	0x0324D34C B 0x324D2F4
	0x0324D350 BL 0x1C16F20
	0x0324D354 ADRP X0, 0xEA6000
	0x0324D358 LDR X0, [X0 + 0xB40]
	0x0324D35C BL 0x1C16D08
	0x0324D360 BL 0x1C16F10
	0x0324D364 MOV X19, X0
	0x0324D368 ADRP X0, 0xED5000
	0x0324D36C LDR X0, [X0 + 0xD60]
	0x0324D370 BL 0x1C16D08
	0x0324D374 MOV X1, X0
	0x0324D378 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1190000
	006 Move X21, 0xED6000
	007 Move W8, [X20+1170]
	008 Move X21, [X21+2928]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xED6000
	015 Move X0, [X0+2928]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1170], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Add X0, X19, 72
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call SharedStatics.ReleaseSharedStringMaker, X0
	031 Return 

Method: System.Void .ctor(System.String input)

Disassembly:
	0x0324D264 MOV W2, W31
	0x0324D268 LDR X9, [X8 + 0x388]
	0x0324D26C LDR X4, [X8 + 0x390]
	0x0324D270 BLR X9
	0x0324D274 LDRB W8, [X19 + 0x61]
	0x0324D278 STR W31, [X19 + 0x58]
	0x0324D27C CBZ W8, 0x324D2A8
	0x0324D280 CBZ X20, 0x324D350
	0x0324D284 LDR X0, [X19 + 0x28]
	0x0324D288 CBZ X0, 0x324D350
	0x0324D28C LDR X8, [X0]
	0x0324D290 LDR W3, [X20 + 0x18]
	0x0324D294 MOV X1, X20
	0x0324D298 MOV W2, W31
	0x0324D29C LDR X9, [X8 + 0x388]
	0x0324D2A0 LDR X4, [X8 + 0x390]
	0x0324D2A4 BLR X9
	0x0324D2A8 LDR X0, [X19 + 0x28]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move X1, X31
	006 Move X19, X0
	007 Call Object..ctor, X0
	008 Move X0, X19
	009 Call Tokenizer.BasicInitialization, X0
	010 Move [X19+40], X20
	011 Compare X20, 0
	012 JumpIfEqual {21}
	013 Move W8, [X20+16]
	014 Move W9, 4
	015 Move [X19+60], W9
	016 Move [X19+52], W8
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+32]
	020 Return 
	021 Call 0x1C17F20

Method: System.Void ChangeFormat(System.Text.Encoding encoding)

Disassembly:
	0x0324CB10 LDP X9, X8, [X19 + 0x10]
	0x0324CB14 CMP X8, X9
	0x0324CB18 B.EQ 0x324CB2C
	0x0324CB1C MOV W0, W31
	0x0324CB20 LDP X20, X19, [X31 + 0x10]
	0x0324CB24 LDP X30, X21, [X31], #0x20
	0x0324CB28 RET
	0x0324CB2C LDR X20, [X19 + 0x20]
	0x0324CB30 CBZ X20, 0x324CB1C
	0x0324CB34 STR X20, [X19 + 0x10]
	0x0324CB38 LDR X8, [X20]
	0x0324CB3C LDR X1, [X21]
	0x0324CB40 LDRH W9, [X8 + 0x12E]
	0x0324CB44 CBZ X9, 0x324CB68
	0x0324CB48 LDR X10, [X8 + 0xB0]
	0x0324CB4C ADD X10, X10, 0x8
	0x0324CB50 LDUR X11, [X10 - 0x8]
	0x0324CB54 CMP X11, X1
	0x0324CB58 B.EQ 0x324CB78
	0x0324CB5C SUBS X9, X9, 0x1
	0x0324CB60 ADD X10, X10, 0x10
	0x0324CB64 B.NE 0x324CB50
	0x0324CB68 MOV X0, X20
	0x0324CB6C MOV W2, W31
	0x0324CB70 BL 0x1C5C788
	0x0324CB74 B 0x324CB84
	0x0324CB78 LDRSW X9, [X10]
	0x0324CB7C ADD X8, X8, X9, 0x4, LSL
	0x0324CB80 ADD X0, X8, 0x138
	0x0324CB84 LDP X2, X1, [X0]
	0x0324CB88 MOV X0, X20
	0x0324CB8C LDP X20, X19, [X31 + 0x10]
	0x0324CB90 LDP X30, X21, [X31], #0x20
	0x0324CB94 BR X2
	0x0324CB98 STP X30, X21, [X31 - 0x20]!
	0x0324CB9C STP X20, X19, [X31 + 0x10]
	0x0324CBA0 ADRP X20, 0x1190000
	0x0324CBA4 LDRB W8, [X20 + 0x49E]
	0x0324CBA8 MOV X19, X0
	0x0324CBAC TBNZ X8, 0x0, 0x324CBC4
	0x0324CBB0 ADRP X0, 0xEA7000
	0x0324CBB4 LDR X0, [X0 + 0xE18]
	0x0324CBB8 BL 0x1C16CF4
	0x0324CBBC MOVZ W8, 0x1
	0x0324CBC0 STRB W8, [X20 + 0x49E]
	0x0324CBC4 ADRP X21, 0xEA7000
	0x0324CBC8 LDR X20, [X19 + 0x18]
	0x0324CBCC LDR X21, [X21 + 0xE18]
	0x0324CBD0 CBZ X20, 0x324CC14
	0x0324CBD4 LDR X8, [X20]
	0x0324CBD8 LDR X1, [X21]
	0x0324CBDC LDRH W9, [X8 + 0x12E]
	0x0324CBE0 CBZ X9, 0x324CC04
	0x0324CBE4 LDR X10, [X8 + 0xB0]
	0x0324CBE8 ADD X10, X10, 0x8
	0x0324CBEC LDUR X11, [X10 - 0x8]
	0x0324CBF0 CMP X11, X1
	0x0324CBF4 B.EQ 0x324CC2C
	0x0324CBF8 SUBS X9, X9, 0x1
	0x0324CBFC ADD X10, X10, 0x10
	0x0324CC00 B.NE 0x324CBEC
	0x0324CC04 MOVZ W2, 0x2
	0x0324CC08 MOV X0, X20
	0x0324CC0C BL 0x1C5C788
	0x0324CC10 B 0x324CC3C
	0x0324CC14 LDR X20, [X19 + 0x20]
	0x0324CC18 STR X20, [X19 + 0x10]
	0x0324CC1C CBNZ X20, 0x324CC54
	0x0324CC20 LDP X20, X19, [X31 + 0x10]
	0x0324CC24 LDP X30, X21, [X31], #0x20
	0x0324CC28 RET
	0x0324CC2C LDR W9, [X10]
	0x0324CC30 ADD W9, W9, 0x2
	0x0324CC34 ADD X8, X8, W9, 0x4, SXTW
	0x0324CC38 ADD X0, X8, 0x138
	0x0324CC3C LDP X8, X1, [X0]
	0x0324CC40 MOV X0, X20
	0x0324CC44 BLR X8
	0x0324CC48 LDP X8, X20, [X19 + 0x18]
	0x0324CC4C STR X8, [X19 + 0x10]
	0x0324CC50 CBZ X20, 0x324CC20
	0x0324CC54 LDR X8, [X20]
	0x0324CC58 LDR X1, [X21]
	0x0324CC5C LDRH W9, [X8 + 0x12E]
	0x0324CC60 CBZ X9, 0x324CC84
	0x0324CC64 LDR X10, [X8 + 0xB0]
	0x0324CC68 ADD X10, X10, 0x8
	0x0324CC6C LDUR X11, [X10 - 0x8]
	0x0324CC70 CMP X11, X1
	0x0324CC74 B.EQ 0x324CC94
	0x0324CC78 SUBS X9, X9, 0x1
	0x0324CC7C ADD X10, X10, 0x10
	0x0324CC80 B.NE 0x324CC6C
	0x0324CC84 MOVZ W2, 0x2
	0x0324CC88 MOV X0, X20
	0x0324CC8C BL 0x1C5C788
	0x0324CC90 B 0x324CCA4
	0x0324CC94 LDR W9, [X10]
	0x0324CC98 ADD W9, W9, 0x2
	0x0324CC9C ADD X8, X8, W9, 0x4, SXTW
	0x0324CCA0 ADD X0, X8, 0x138
	0x0324CCA4 LDP X2, X1, [X0]
	0x0324CCA8 MOV X0, X20
	0x0324CCAC LDP X20, X19, [X31 + 0x10]
	0x0324CCB0 LDP X30, X21, [X31], #0x20
	0x0324CCB4 BR X2
	0x0324CCB8 STR X30, [X31 - 0x20]!
	0x0324CCBC STP X20, X19, [X31 + 0x10]
	0x0324CCC0 ADRP X20, 0x1190000
	0x0324CCC4 LDRB W8, [X20 + 0x49F]
	0x0324CCC8 MOV X19, X0
	0x0324CCCC TBNZ X8, 0x0, 0x324CCE4
	0x0324CCD0 ADRP X0, 0xEA7000
	0x0324CCD4 LDR X0, [X0 + 0xE18]
	0x0324CCD8 BL 0x1C16CF4
	0x0324CCDC MOVZ W8, 0x1
	0x0324CCE0 STRB W8, [X20 + 0x49F]
	0x0324CCE4 LDR X19, [X19 + 0x10]
	0x0324CCE8 CBZ X19, 0x324CD58
	0x0324CCEC ADRP X10, 0xEA7000
	0x0324CCF0 LDR X8, [X19]
	0x0324CCF4 LDR X10, [X10 + 0xE18]
	0x0324CCF8 LDRH W9, [X8 + 0x12E]
	0x0324CCFC LDR X1, [X10]
	0x0324CD00 CBZ X9, 0x324CD24
	0x0324CD04 LDR X10, [X8 + 0xB0]
	0x0324CD08 ADD X10, X10, 0x8
	0x0324CD0C LDUR X11, [X10 - 0x8]
	0x0324CD10 CMP X11, X1
	0x0324CD14 B.EQ 0x324CD34
	0x0324CD18 SUBS X9, X9, 0x1
	0x0324CD1C ADD X10, X10, 0x10
	0x0324CD20 B.NE 0x324CD0C
	0x0324CD24 MOVZ W2, 0x1
	0x0324CD28 MOV X0, X19
	0x0324CD2C BL 0x1C5C788

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x1191000
	009 Move W8, [X21+1171]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xEB0000
	017 Move X0, [X0+1368]
	018 Call 0x1C17CF4
	019 Move X0, 0xED7000
	020 Move X0, [X0+3272]
	021 Call 0x1C17CF4
	022 Move X0, 0xED7000
	023 Move X0, [X0+3280]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+1171], W8
	027 Compare X20, 0
	028 JumpIfEqual {133}
	029 Move W8, [X19+60]
	030 Subtract W9, W8, 3
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Subtract W8, W8, 3
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X8, [X19+64]
	035 Compare X8, 0
	036 JumpIfEqual {133}
	037 Move X9, 0xED7000
	038 Move X9, [X9+3280]
	039 Move X10, [X8]
	040 Move X9, [X9]
	041 Move W12, [X10+304]
	042 Move W11, [X9+304]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X10, [X10+200]
	045 Add X10, X10, X11
	046 NotImplemented "Instruction LDUR not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 NotImplemented "Instruction CSEL not yet implemented."
	049 Compare X22, 0
	050 JumpIfEqual {141}
	051 Move X0, [X22+16]
	052 Compare X0, 0
	053 JumpIfEqual {141}
	054 Move X8, [X0]
	055 Move X9, [X8+536]
	056 Move X1, [X8+544]
	057 NotImplemented "Instruction BLR not yet implemented."
	058 Move W2, [X22+24]
	059 Move X21, X0
	060 Move W1, 32
	061 Move X0, X31
	062 Move X3, X31
	063 Call String.CreateString, X0, X1, X2
	064 Move X8, [X22+16]
	065 Compare X8, 0
	066 JumpIfEqual {141}
	067 Move X9, [X8]
	068 Move X22, X0
	069 Move X0, X8
	070 Move X10, [X9+520]
	071 Move X1, [X9+528]
	072 NotImplemented "Instruction BLR not yet implemented."
	073 Compare X0, 0
	074 JumpIfEqual {141}
	075 Move X8, [X0]
	076 Move X1, X22
	077 Move X9, [X8+504]
	078 Move X2, [X8+512]
	079 NotImplemented "Instruction BLR not yet implemented."
	080 Compare X21, 0
	081 JumpIfEqual {141}
	082 Move X8, [X21]
	083 Move X1, W0
	084 Move X0, X21
	085 Move X9, [X8+520]
	086 Move X2, [X8+528]
	087 NotImplemented "Instruction BLR not yet implemented."
	088 Call Encoding.get_Unicode
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Call Encoding.get_UTF8
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Call Encoding.get_ASCII
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move W8, [X19+60]
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move X8, 0xEB0000
	097 Move X22, [X19+24]
	098 Move W23, [X19+48]
	099 Move W24, [X19+52]
	100 Move X8, [X8+1368]
	101 Move X0, [X8]
	102 Call 0x1C17F10
	103 Subtract W3, W24, W23
	104 Move X1, X22
	105 Move W2, W23
	106 Move X4, X31
	107 Move X21, X0
	108 Call MemoryStream..ctor, X0, X1, X2, X3
	109 Move X8, 0xED7000
	110 Move X8, [X8+3272]
	111 Move X0, [X8]
	112 Call 0x1C17F10
	113 Move X1, X21
	114 Move X2, X20
	115 Move X3, X31
	116 Move X22, X0
	117 Call StreamReader..ctor, X0, X1, X2
	118 Move X8, 0xED7000
	119 Move X8, [X8+3280]
	120 Move X0, [X8]
	121 Call 0x1C17F10
	122 Move X1, X31
	123 Move X20, X0
	124 Call Object..ctor, X0
	125 Move W8, 6
	126 Move [X20+16], X22
	127 Move [X20+24], W31
	128 Move [X19+64], X20
	129 Move [X19+60], W31
	130 Move W8, 1
	131 Move W8, 2
	132 Move [X19+60], W8
	133 Move X20, [X31+48]
	134 Move X19, [X31+56]
	135 Move X22, [X31+32]
	136 Move X21, [X31+40]
	137 Move X24, [X31+16]
	138 Move X23, [X31+24]
	139 Move X30, [X31+64]
	140 Return 
	141 Call 0x1C17F20

Method: System.Void GetTokens(System.Security.Util.TokenizerStream stream, System.Int32 maxNum, System.Boolean endAfterKet)

Disassembly:
	0x0324C2DC STRB W8, [X21 + 0x491]
	0x0324C2E0 ADRP X8, 0xFFFFFFFFFD8A1000
	0x0324C2E4 ADRP X9, 0xFFFFFFFFFD8A0000
	0x0324C2E8 LDR V0, [X8 + 0xEC0]
	0x0324C2EC LDR V1, [X9 + 0x7E]
	0x0324C2F0 STR X31, [X19 + 0x60]
	0x0324C2F4 STR D0, [X19 + 0x10]
	0x0324C2F8 STR V1, [X19 + 0x3]
	0x0324C2FC LDR X0, [X20]
	0x0324C300 LDR W8, [X0 + 0xE0]
	0x0324C304 CBNZ W8, 0x324C30C
	0x0324C308 BL 0x1C16DFC
	0x0324C30C MOV X0, X31
	0x0324C310 BL 0x33BDD90
	0x0324C314 STR X0, [X19 + 0x48]
	0x0324C318 LDP X20, X19, [X31 + 0x10]
	0x0324C31C LDP X30, X21, [X31], #0x20
	0x0324C320 RET
	0x0324C324 STP X30, X21, [X31 - 0x20]!
	0x0324C328 STP X20, X19, [X31 + 0x10]
	0x0324C32C ADRP X20, 0x1190000
	0x0324C330 ADRP X21, 0xED6000
	0x0324C334 LDRB W8, [X20 + 0x492]
	0x0324C338 LDR X21, [X21 + 0xB70]
	0x0324C33C MOV X19, X0
	0x0324C340 TBNZ X8, 0x0, 0x324C358
	0x0324C344 ADRP X0, 0xED6000
	0x0324C348 LDR X0, [X0 + 0xB70]
	0x0324C34C BL 0x1C16CF4
	0x0324C350 MOVZ W8, 0x1
	0x0324C354 STRB W8, [X20 + 0x492]
	0x0324C358 LDR X0, [X21]
	0x0324C35C LDR W8, [X0 + 0xE0]
	0x0324C360 CBNZ W8, 0x324C368
	0x0324C364 BL 0x1C16DFC
	0x0324C368 ADD X0, X19, 0x48
	0x0324C36C LDP X20, X19, [X31 + 0x10]
	0x0324C370 MOV X1, X31
	0x0324C374 LDP X30, X21, [X31], #0x20
	0x0324C378 B 0x33BDF58
	0x0324C37C STR X30, [X31 - 0x20]!
	0x0324C380 STP X20, X19, [X31 + 0x10]
	0x0324C384 MOV X19, X1
	0x0324C388 MOV X1, X31
	0x0324C38C MOV X20, X0
	0x0324C390 BL 0x33BDD8C
	0x0324C394 STR X19, [X20 + 0x10]
	0x0324C398 STR W31, [X20 + 0x18]
	0x0324C39C LDP X20, X19, [X31 + 0x10]
	0x0324C3A0 LDR X30, [X31], #0x20
	0x0324C3A4 RET
	0x0324C3A8 STR X30, [X31 - 0x30]!
	0x0324C3AC STP X22, X21, [X31 + 0x10]
	0x0324C3B0 STP X20, X19, [X31 + 0x20]
	0x0324C3B4 ADRP X21, 0x1190000
	0x0324C3B8 LDRB W8, [X21 + 0x49A]
	0x0324C3BC MOV W19, W1
	0x0324C3C0 MOV X20, X0
	0x0324C3C4 TBNZ X8, 0x0, 0x324C3DC
	0x0324C3C8 ADRP X0, 0xED6000
	0x0324C3CC LDR X0, [X0 + 0xCF0]
	0x0324C3D0 BL 0x1C16CF4
	0x0324C3D4 MOVZ W8, 0x1
	0x0324C3D8 STRB W8, [X21 + 0x49A]
	0x0324C3DC LDR X22, [X20 + 0x28]
	0x0324C3E0 CBZ X22, 0x324C484
	0x0324C3E4 LDR X9, [X22 + 0x10]
	0x0324C3E8 CBZ X9, 0x324C484
	0x0324C3EC LDR W8, [X20 + 0x30]
	0x0324C3F0 LDR W9, [X9 + 0x18]
	0x0324C3F4 CMP W8, W9
	0x0324C3F8 B.GE 0x324C40C
	0x0324C3FC LDR W9, [X20 + 0x10]
	0x0324C400 ADD W9, W9, 0x1
	0x0324C404 STR W9, [X20 + 0x10]
	0x0324C408 B 0x324C450
	0x0324C40C ADRP X8, 0xED6000
	0x0324C410 LDR X8, [X8 + 0xCF0]
	0x0324C414 LDR X0, [X8]
	0x0324C418 BL 0x1C16F10
	0x0324C41C MOV X21, X0
	0x0324C420 BL 0x324C7AC
	0x0324C424 STR X21, [X22 + 0x18]
	0x0324C428 LDR X8, [X20 + 0x28]
	0x0324C42C CBZ X8, 0x324C484
	0x0324C430 LDR X22, [X8 + 0x18]
	0x0324C434 LDR W8, [X20 + 0x10]
	0x0324C438 STR W31, [X20 + 0x30]
	0x0324C43C STR X22, [X20 + 0x28]
	0x0324C440 ADD W8, W8, 0x1
	0x0324C444 STR W8, [X20 + 0x10]
	0x0324C448 CBZ X22, 0x324C484
	0x0324C44C MOV W8, W31
	0x0324C450 LDR X9, [X22 + 0x10]
	0x0324C454 ADD W10, W8, 0x1
	0x0324C458 STR W10, [X20 + 0x30]
	0x0324C45C CBZ X9, 0x324C484
	0x0324C460 LDR W10, [X9 + 0x18]
	0x0324C464 CMP W8, W10
	0x0324C468 B.CS 0x324C488
	0x0324C46C ADD X8, X9, W8, 0x1, SXTW
	0x0324C470 STRH W19, [X8 + 0x20]
	0x0324C474 LDP X20, X19, [X31 + 0x20]
	0x0324C478 LDP X22, X21, [X31 + 0x10]
	0x0324C47C LDR X30, [X31], #0x30
	0x0324C480 RET
	0x0324C484 BL 0x1C16F20
	0x0324C488 BL 0x1C16F28
	0x0324C48C STR X30, [X31 - 0x10]!
	0x0324C490 LDR X0, [X0 + 0x48]
	0x0324C494 CBZ X0, 0x324C4A0
	0x0324C498 LDR X30, [X31], #0x10
	0x0324C49C B 0x32485C0
	0x0324C4A0 BL 0x1C16F20
	0x0324C4A4 STR X30, [X31 - 0x30]!
	0x0324C4A8 STP X22, X21, [X31 + 0x10]
	0x0324C4AC STP X20, X19, [X31 + 0x20]
	0x0324C4B0 ADRP X21, 0x1190000
	0x0324C4B4 LDRB W8, [X21 + 0x49B]
	0x0324C4B8 MOV X19, X1
	0x0324C4BC MOV X20, X0
	0x0324C4C0 TBNZ X8, 0x0, 0x324C4D8
	0x0324C4C4 ADRP X0, 0xED6000
	0x0324C4C8 LDR X0, [X0 + 0xCF8]
	0x0324C4CC BL 0x1C16CF4
	0x0324C4D0 MOVZ W8, 0x1
	0x0324C4D4 STRB W8, [X21 + 0x49B]
	0x0324C4D8 LDR X22, [X20 + 0x40]
	0x0324C4DC CBZ X22, 0x324C564
	0x0324C4E0 LDR X9, [X22 + 0x10]
	0x0324C4E4 CBZ X9, 0x324C564
	0x0324C4E8 LDR W8, [X20 + 0x48]
	0x0324C4EC LDR W9, [X9 + 0x18]
	0x0324C4F0 CMP W8, W9
	0x0324C4F4 B.LT 0x324C530
	0x0324C4F8 ADRP X8, 0xED6000
	0x0324C4FC LDR X8, [X8 + 0xCF8]
	0x0324C500 LDR X0, [X8]
	0x0324C504 BL 0x1C16F10
	0x0324C508 MOV X21, X0
	0x0324C50C BL 0x324C804
	0x0324C510 STR X21, [X22 + 0x18]
	0x0324C514 LDR X8, [X20 + 0x40]
	0x0324C518 CBZ X8, 0x324C564
	0x0324C51C LDR X22, [X8 + 0x18]
	0x0324C520 STR W31, [X20 + 0x48]
	0x0324C524 STR X22, [X20 + 0x40]
	0x0324C528 CBZ X22, 0x324C564
	0x0324C52C MOV W8, W31
	0x0324C530 LDR X9, [X22 + 0x10]
	0x0324C534 ADD W10, W8, 0x1
	0x0324C538 STR W10, [X20 + 0x48]
	0x0324C53C CBZ X9, 0x324C564
	0x0324C540 LDR W10, [X9 + 0x18]
	0x0324C544 CMP W8, W10
	0x0324C548 B.CS 0x324C568
	0x0324C54C ADD X8, X9, W8, 0x3, SXTW
	0x0324C550 STR X19, [X8 + 0x20]
	0x0324C554 LDP X20, X19, [X31 + 0x20]
	0x0324C558 LDP X22, X21, [X31 + 0x10]
	0x0324C55C LDR X30, [X31], #0x30
	0x0324C560 RET
	0x0324C564 BL 0x1C16F20
	0x0324C568 BL 0x1C16F28
	0x0324C56C STR X30, [X31 - 0x30]!
	0x0324C570 STP X22, X21, [X31 + 0x10]
	0x0324C574 STP X20, X19, [X31 + 0x20]
	0x0324C578 CBZ X0, 0x324C5D4
	0x0324C57C LDR W22, [X0 + 0x10]
	0x0324C580 MOV X19, X0
	0x0324C584 CMP W22, 0x1
	0x0324C588 B.LT 0x324C5BC
	0x0324C58C MOV W20, W31
	0x0324C590 MOV W21, W31
	0x0324C594 MOV X0, X19
	0x0324C598 MOV W1, W21
	0x0324C59C MOV X2, X31
	0x0324C5A0 BL 0x3222A1C
	0x0324C5A4 AND W8, W0, 0xFFFF
	0x0324C5A8 ADD W21, W21, 0x1
	0x0324C5AC CMP W22, W21
	0x0324C5B0 EOR W20, W8, W20, 0x1D
	0x0324C5B4 B.NE 0x324C594
	0x0324C5B8 B 0x324C5C0
	0x0324C5BC MOV W20, W31
	0x0324C5C0 MOV W0, W20
	0x0324C5C4 LDP X20, X19, [X31 + 0x20]
	0x0324C5C8 LDP X22, X21, [X31 + 0x10]
	0x0324C5CC LDR X30, [X31], #0x30
	0x0324C5D0 RET
	0x0324C5D4 BL 0x1C16F20
	0x0324C5D8 STR X30, [X31 - 0x10]!
	0x0324C5DC CMP W1, 0x1
	0x0324C5E0 B.LT 0x324C620
	0x0324C5E4 MOV X8, X0
	0x0324C5E8 CBZ X0, 0x324C630
	0x0324C5EC LDR W10, [X8 + 0x18]
	0x0324C5F0 MOV X9, X31
	0x0324C5F4 MOV W0, W31
	0x0324C5F8 MOV W11, W1
	0x0324C5FC ADD X8, X8, 0x20
	0x0324C600 CMP X9, X10
	0x0324C604 B.CS 0x324C62C
	0x0324C608 LDRH W12, [X8, X9, LSL #1]
	0x0324C60C ADD X9, X9, 0x1
	0x0324C610 CMP X11, X9
	0x0324C614 EOR W0, W12, W0, 0x1D
	0x0324C618 B.NE 0x324C600
	0x0324C61C B 0x324C624
	0x0324C620 MOV W0, W31
	0x0324C624 LDR X30, [X31], #0x10
	0x0324C628 RET
	0x0324C62C BL 0x1C16F28
	0x0324C630 BL 0x1C16F20
	0x0324C634 STR X30, [X31 - 0x30]!
	0x0324C638 STP X22, X21, [X31 + 0x10]
	0x0324C63C STP X20, X19, [X31 + 0x20]
	0x0324C640 ADRP X22, 0x1190000
	0x0324C644 ADRP X21, 0xEA7000
	0x0324C648 ADRP X20, 0xEB0000
	0x0324C64C LDRB W8, [X22 + 0x495]
	0x0324C650 LDR X21, [X21 + 0xAC8]
	0x0324C654 LDR X20, [X20 + 0x8D8]
	0x0324C658 MOV X19, X0
	0x0324C65C TBNZ X8, 0x0, 0x324C680
	0x0324C660 ADRP X0, 0xEB0000
	0x0324C664 LDR X0, [X0 + 0x8D8]
	0x0324C668 BL 0x1C16CF4
	0x0324C66C ADRP X0, 0xEA7000
	0x0324C670 LDR X0, [X0 + 0xAC8]
	0x0324C674 BL 0x1C16CF4
	0x0324C678 MOVZ W8, 0x1
	0x0324C67C STRB W8, [X22 + 0x495]
	0x0324C680 MOV X0, X19
	0x0324C684 MOV X1, X31
	0x0324C688 BL 0x33BDD8C
	0x0324C68C ADRP X8, 0xFFFFFFFFFD8A2000
	0x0324C690 LDR V0, [X8 + 0x388]
	0x0324C694 MOVZ W1, 0x800
	0x0324C698 STR D0, [X19 + 0x18]
	0x0324C69C LDR X0, [X21]
	0x0324C6A0 BL 0x1C16D6C
	0x0324C6A4 STR X0, [X19 + 0x10]
	0x0324C6A8 LDR X0, [X20]
	0x0324C6AC MOVZ W1, 0x200
	0x0324C6B0 BL 0x1C16D6C
	0x0324C6B4 STR X0, [X19 + 0x28]
	0x0324C6B8 LDP X20, X19, [X31 + 0x20]
	0x0324C6BC LDP X22, X21, [X31 + 0x10]
	0x0324C6C0 LDR X30, [X31], #0x30
	0x0324C6C4 RET
	0x0324C6C8 STP X30, X23, [X31 - 0x30]!
	0x0324C6CC STP X22, X21, [X31 + 0x10]
	0x0324C6D0 STP X20, X19, [X31 + 0x20]
	0x0324C6D4 CBZ X1, 0x324C764
	0x0324C6D8 LDR W8, [X1 + 0x10]
	0x0324C6DC MOV X20, X1
	0x0324C6E0 CMP W8, W3
	0x0324C6E4 B.NE 0x324C744
	0x0324C6E8 SUBS W22, W3, 0x1
	0x0324C6EC B.LT 0x324C74C
	0x0324C6F0 MOV X19, X2
	0x0324C6F4 CBZ X2, 0x324C764
	0x0324C6F8 MOV W21, W31
	0x0324C6FC LDR W8, [X19 + 0x18]
	0x0324C700 CMP W21, W8
	0x0324C704 B.CS 0x324C760
	0x0324C708 ADD X8, X19, W21, 0x1, SXTW
	0x0324C70C LDRH W23, [X8 + 0x20]
	0x0324C710 MOV X0, X20
	0x0324C714 MOV W1, W21
	0x0324C718 MOV X2, X31
	0x0324C71C BL 0x3222A1C
	0x0324C720 CMP W23, W0, UXTH
	0x0324C724 MOV W8, W0
	0x0324C728 CSET W0, EQ
	0x0324C72C CMP W22, W21
	0x0324C730 B.EQ 0x324C750
	0x0324C734 CMP W23, W8, UXTH
	0x0324C738 ADD W21, W21, 0x1
	0x0324C73C B.EQ 0x324C6FC
	0x0324C740 B 0x324C750
	0x0324C744 MOV W0, W31
	0x0324C748 B 0x324C750
	0x0324C74C MOVZ W0, 0x1
	0x0324C750 LDP X20, X19, [X31 + 0x20]
	0x0324C754 LDP X22, X21, [X31 + 0x10]
	0x0324C758 LDP X30, X23, [X31], #0x30
	0x0324C75C RET
	0x0324C760 BL 0x1C16F28
	0x0324C764 BL 0x1C16F20
	0x0324C768 STP X30, X19, [X31 - 0x10]!
	0x0324C76C MOV X19, X0
	0x0324C770 LDR X0, [X0 + 0x10]
	0x0324C774 CBZ X0, 0x324C7A0
	0x0324C778 LDR X8, [X0]
	0x0324C77C LDP X9, X1, [X8 + 0x1C8]
	0x0324C780 BLR X9
	0x0324C784 ADDS W31, W0, 0x1
	0x0324C788 B.EQ 0x324C798
	0x0324C78C LDR W8, [X19 + 0x18]
	0x0324C790 ADD W8, W8, 0x1
	0x0324C794 STR W8, [X19 + 0x18]
	0x0324C798 LDP X30, X19, [X31], #0x10
	0x0324C79C RET
	0x0324C7A0 BL 0x1C16F20
	0x0324C7A4 LDR W0, [X0 + 0x18]
	0x0324C7A8 RET
	0x0324C7AC STP X30, X21, [X31 - 0x20]!
	0x0324C7B0 STP X20, X19, [X31 + 0x10]
	0x0324C7B4 ADRP X20, 0x1190000
	0x0324C7B8 ADRP X21, 0xECF000
	0x0324C7BC LDRB W8, [X20 + 0x497]
	0x0324C7C0 LDR X21, [X21 + 0x820]
	0x0324C7C4 MOV X19, X0
	0x0324C7C8 TBNZ X8, 0x0, 0x324C7E0
	0x0324C7CC ADRP X0, 0xECF000
	0x0324C7D0 LDR X0, [X0 + 0x820]
	0x0324C7D4 BL 0x1C16CF4
	0x0324C7D8 MOVZ W8, 0x1
	0x0324C7DC STRB W8, [X20 + 0x497]
	0x0324C7E0 LDR X0, [X21]
	0x0324C7E4 MOVZ W1, 0x10
	0x0324C7E8 BL 0x1C16D6C
	0x0324C7EC STR X0, [X19 + 0x10]
	0x0324C7F0 MOV X0, X19
	0x0324C7F4 LDP X20, X19, [X31 + 0x10]
	0x0324C7F8 MOV X1, X31
	0x0324C7FC LDP X30, X21, [X31], #0x20
	0x0324C800 B 0x33BDD8C
	0x0324C804 STP X30, X21, [X31 - 0x20]!
	0x0324C808 STP X20, X19, [X31 + 0x10]
	0x0324C80C ADRP X20, 0x1190000
	0x0324C810 ADRP X21, 0xEA7000
	0x0324C814 LDRB W8, [X20 + 0x498]
	0x0324C818 LDR X21, [X21 + 0xAC8]
	0x0324C81C MOV X19, X0
	0x0324C820 TBNZ X8, 0x0, 0x324C838
	0x0324C824 ADRP X0, 0xEA7000
	0x0324C828 LDR X0, [X0 + 0xAC8]
	0x0324C82C BL 0x1C16CF4
	0x0324C830 MOVZ W8, 0x1
	0x0324C834 STRB W8, [X20 + 0x498]
	0x0324C838 LDR X0, [X21]
	0x0324C83C MOVZ W1, 0x10
	0x0324C840 BL 0x1C16D6C
	0x0324C844 STR X0, [X19 + 0x10]
	0x0324C848 MOV X0, X19
	0x0324C84C LDP X20, X19, [X31 + 0x10]
	0x0324C850 MOV X1, X31
	0x0324C854 LDP X30, X21, [X31], #0x20
	0x0324C858 B 0x33BDD8C
	0x0324C85C LDR W0, [X0 + 0x10]
	0x0324C860 RET
	0x0324C864 MOV X1, X31
	0x0324C868 B 0x33BDD8C
	0x0324C86C STR X30, [X31 - 0x20]!
	0x0324C870 STP X20, X19, [X31 + 0x10]
	0x0324C874 MOV X20, X0
	0x0324C878 LDR X0, [X0 + 0x18]
	0x0324C87C CBZ X0, 0x324C898
	0x0324C880 LDR X8, [X0]
	0x0324C884 LDR X9, [X8 + 0x298]
	0x0324C888 LDR X1, [X8 + 0x2A0]
	0x0324C88C BLR X9
	0x0324C890 MOV W19, W0
	0x0324C894 B 0x324C89C
	0x0324C898 MOV W19, W31
	0x0324C89C LDR X0, [X20 + 0x20]
	0x0324C8A0 CBZ X0, 0x324C8B8
	0x0324C8A4 LDR X8, [X0]
	0x0324C8A8 LDR X9, [X8 + 0x298]
	0x0324C8AC LDR X1, [X8 + 0x2A0]
	0x0324C8B0 BLR X9
	0x0324C8B4 ADD W19, W0, W19
	0x0324C8B8 MOV W0, W19
	0x0324C8BC LDP X20, X19, [X31 + 0x10]
	0x0324C8C0 LDR X30, [X31], #0x20
	0x0324C8C4 RET
	0x0324C8C8 MOV W0, W31
	0x0324C8CC RET
	0x0324C8D0 RET
	0x0324C8D4 STR X30, [X31 - 0x30]!
	0x0324C8D8 STP X22, X21, [X31 + 0x10]
	0x0324C8DC STP X20, X19, [X31 + 0x20]
	0x0324C8E0 MOV X21, X0
	0x0324C8E4 LDR X0, [X0 + 0x18]
	0x0324C8E8 MOV W19, W2
	0x0324C8EC MOV X20, X1
	0x0324C8F0 CBZ X0, 0x324C934
	0x0324C8F4 LDR X8, [X0]
	0x0324C8F8 LDR X9, [X8 + 0x298]
	0x0324C8FC LDR X1, [X8 + 0x2A0]
	0x0324C900 BLR X9
	0x0324C904 MOV W22, W0
	0x0324C908 CMP W0, 0x1
	0x0324C90C B.LT 0x324C938
	0x0324C910 LDR X0, [X21 + 0x18]
	0x0324C914 CBZ X0, 0x324C994
	0x0324C918 LDR X8, [X0]
	0x0324C91C MOV X1, X20
	0x0324C920 MOV W2, W19
	0x0324C924 LDR X9, [X8 + 0x368]
	0x0324C928 LDR X3, [X8 + 0x370]
	0x0324C92C BLR X9
	0x0324C930 B 0x324C938
	0x0324C934 MOV W22, W31
	0x0324C938 LDR X0, [X21 + 0x20]
	0x0324C93C CBZ X0, 0x324C984
	0x0324C940 LDR X8, [X0]
	0x0324C944 LDR X9, [X8 + 0x298]
	0x0324C948 LDR X1, [X8 + 0x2A0]
	0x0324C94C BLR X9
	0x0324C950 CMP W0, 0x1
	0x0324C954 B.LT 0x324C984
	0x0324C958 LDR X0, [X21 + 0x20]
	0x0324C95C CBZ X0, 0x324C994
	0x0324C960 LDR X8, [X0]
	0x0324C964 ADD W2, W22, W19
	0x0324C968 MOV X1, X20
	0x0324C96C LDP X20, X19, [X31 + 0x20]
	0x0324C970 LDR X4, [X8 + 0x368]
	0x0324C974 LDR X3, [X8 + 0x370]
	0x0324C978 LDP X22, X21, [X31 + 0x10]
	0x0324C97C LDR X30, [X31], #0x30
	0x0324C980 BR X4
	0x0324C984 LDP X20, X19, [X31 + 0x20]
	0x0324C988 LDP X22, X21, [X31 + 0x10]
	0x0324C98C LDR X30, [X31], #0x30
	0x0324C990 RET
	0x0324C994 BL 0x1C16F20
	0x0324C998 STP X30, X21, [X31 - 0x20]!
	0x0324C99C STP X20, X19, [X31 + 0x10]
	0x0324C9A0 ADRP X19, 0x1190000
	0x0324C9A4 LDRB W8, [X19 + 0x49C]
	0x0324C9A8 MOV X20, X0
	0x0324C9AC TBNZ X8, 0x0, 0x324C9C4
	0x0324C9B0 ADRP X0, 0xED6000
	0x0324C9B4 LDR X0, [X0 + 0xD08]
	0x0324C9B8 BL 0x1C16CF4
	0x0324C9BC MOVZ W8, 0x1
	0x0324C9C0 STRB W8, [X19 + 0x49C]
	0x0324C9C4 LDR X0, [X20 + 0x18]
	0x0324C9C8 CBZ X0, 0x324C9E4
	0x0324C9CC LDR X8, [X0]
	0x0324C9D0 LDR X9, [X8 + 0x388]
	0x0324C9D4 LDR X1, [X8 + 0x390]
	0x0324C9D8 BLR X9
	0x0324C9DC MOV X19, X0
	0x0324C9E0 B 0x324C9E8
	0x0324C9E4 MOV X19, X31
	0x0324C9E8 ADRP X21, 0xED6000
	0x0324C9EC LDR X0, [X20 + 0x20]
	0x0324C9F0 LDR X21, [X21 + 0xD08]
	0x0324C9F4 CBZ X0, 0x324CA10
	0x0324C9F8 LDR X8, [X0]
	0x0324C9FC LDR X9, [X8 + 0x388]
	0x0324CA00 LDR X1, [X8 + 0x390]
	0x0324CA04 BLR X9
	0x0324CA08 MOV X20, X0
	0x0324CA0C B 0x324CA14
	0x0324CA10 MOV X20, X31
	0x0324CA14 LDR X0, [X21]
	0x0324CA18 BL 0x1C16F10
	0x0324CA1C MOV X1, X31
	0x0324CA20 MOV X21, X0
	0x0324CA24 BL 0x33BDD8C
	0x0324CA28 STP X19, X20, [X21 + 0x18]
	0x0324CA2C STR X19, [X21 + 0x10]
	0x0324CA30 LDP X20, X19, [X31 + 0x10]
	0x0324CA34 MOV X0, X21
	0x0324CA38 LDP X30, X21, [X31], #0x20
	0x0324CA3C RET
	0x0324CA40 STP X30, X21, [X31 - 0x20]!
	0x0324CA44 STP X20, X19, [X31 + 0x10]
	0x0324CA48 MOV X20, X1
	0x0324CA4C MOV X1, X31
	0x0324CA50 MOV X19, X2
	0x0324CA54 MOV X21, X0
	0x0324CA58 BL 0x33BDD8C
	0x0324CA5C STP X20, X19, [X21 + 0x18]
	0x0324CA60 STR X20, [X21 + 0x10]
	0x0324CA64 LDP X20, X19, [X31 + 0x10]
	0x0324CA68 LDP X30, X21, [X31], #0x20
	0x0324CA6C RET
	0x0324CA70 STP X30, X21, [X31 - 0x20]!
	0x0324CA74 STP X20, X19, [X31 + 0x10]
	0x0324CA78 ADRP X20, 0x1190000
	0x0324CA7C LDRB W8, [X20 + 0x49D]
	0x0324CA80 MOV X19, X0
	0x0324CA84 TBNZ X8, 0x0, 0x324CA9C
	0x0324CA88 ADRP X0, 0xEA7000
	0x0324CA8C LDR X0, [X0 + 0xE18]
	0x0324CA90 BL 0x1C16CF4
	0x0324CA94 MOVZ W8, 0x1
	0x0324CA98 STRB W8, [X20 + 0x49D]
	0x0324CA9C LDR X20, [X19 + 0x10]
	0x0324CAA0 CBZ X20, 0x324CB1C
	0x0324CAA4 ADRP X21, 0xEA7000
	0x0324CAA8 LDR X8, [X20]
	0x0324CAAC LDR X21, [X21 + 0xE18]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move [X31+8], W3
	015 Move X20, 0x1191000
	016 Move X25, 0xED7000
	017 Move X26, 0xEA8000
	018 Move W8, [X20+1172]
	019 Move X25, [X25+3256]
	020 Move X26, [X26+2288]
	021 Move W21, W2
	022 Move X19, X1
	023 Move X22, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {36}
	028 Move X0, 0xED7000
	029 Move X0, [X0+3256]
	030 Call 0x1C17CF4
	031 Move X0, 0xEA8000
	032 Move X0, [X0+2288]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X20+1172], W8
	036 Add W31, W21, 1
	037 Compare X19, 0
	038 JumpIfEqual {491}
	039 Move W8, [X19+16]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X27, [X22+72]
	042 Compare X27, 0
	043 JumpIfEqual {491}
	044 Move X20, -40587264
	045 Move X29, -40587264
	046 Move W28, W31
	047 Move [X31+12], W31
	048 Move [X27+32], X31
	049 Move [X27+48], W31
	050 Add X20, X20, 1172
	051 Add X29, X29, 1178
	052 Move W24, W28
	053 Move W23, [X22+56]
	054 Add W31, W23, 1
	055 Move TEMP, 0
	056 Not TEMP
	057 Move W8, TEMP
	058 Move [X22+56], W8
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move TEMP, X24
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 Invalid "Jump target not found in method."
	064 NotImplemented "Instruction CMP not yet implemented."
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move TEMP, X28
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfEqual {251}
	070 Subtract W8, W23, 60
	071 NotImplemented "Instruction CMP not yet implemented."
	072 NotImplemented "Instruction CMP not yet implemented."
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move W8, [X22+20]
	075 Compare W8, 0
	076 JumpIfEqual {251}
	077 Move W8, [X22+60]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 NotImplemented "Instruction ADR not yet implemented."
	080 Move W10, [X20]
	081 Add X9, X9, X10
	082 CallNoReturn X9
	083 Move W8, [X22+48]
	084 Move W10, [X22+52]
	085 Move X8, W8
	086 Add W9, W8, 1
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move X10, [X22+24]
	089 Compare X10, 0
	090 JumpIfEqual {491}
	091 Move W11, [X10+24]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Add X10, X10, 32
	095 Move W9, [X10]
	096 Move W23, [X10]
	097 Add W8, W8, 2
	098 Move [X22+48], W8
	099 NotImplemented "Instruction BFM not yet implemented."
	100 NotImplemented "Instruction CMP not yet implemented."
	101 NotImplemented "Instruction CMP not yet implemented."
	102 NotImplemented "Instruction CMP not yet implemented."
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Move TEMP, X28
	105 And TEMP, TEMP, 1
	106 Compare TEMP, 1
	107 JumpIfNotEqual {251}
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Move W24, W31
	110 NotImplemented "Instruction CMP not yet implemented."
	111 NotImplemented "Instruction CMP not yet implemented."
	112 NotImplemented "Instruction CMP not yet implemented."
	113 NotImplemented "Instruction CMP not yet implemented."
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Move W8, [X22+20]
	116 Compare W8, 0
	117 JumpIfEqual {251}
	118 NotImplemented "Instruction CMP not yet implemented."
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Move W8, [X22+16]
	121 Add W8, W8, 1
	122 Move [X22+16], W8
	123 Move TEMP, X28
	124 And TEMP, TEMP, 1
	125 Compare TEMP, 1
	126 JumpIfEqual {251}
	127 Move TEMP, X28
	128 And TEMP, TEMP, 1
	129 Compare TEMP, 1
	130 JumpIfNotEqual {139}
	131 Subtract W8, W23, 61
	132 NotImplemented "Instruction CMP not yet implemented."
	133 NotImplemented "Instruction CSET not yet implemented."
	134 Or W8, W28, W8
	135 Move TEMP, X8
	136 And TEMP, TEMP, 1
	137 Compare TEMP, 1
	138 JumpIfEqual {251}
	139 Move W8, [X22+20]
	140 Compare W8, 0
	141 JumpIfEqual {251}
	142 Move X11, -40587264
	143 Add X11, X11, 1194
	144 NotImplemented "Instruction ADR not yet implemented."
	145 NotImplemented "Instruction LDRH not yet implemented."
	146 Add X9, X9, X10
	147 CallNoReturn X9
	148 Move W8, [X22+20]
	149 Compare W8, 0
	150 JumpIfEqual {251}
	151 Move W8, [X22+20]
	152 Compare W8, 0
	153 JumpIfEqual {251}
	154 Move X23, [X22+64]
	155 Compare X23, 0
	156 JumpIfEqual {491}
	157 Move X8, [X23]
	158 Move X1, [X25]
	159 NotImplemented "Instruction LDRH not yet implemented."
	160 Compare X9, 0
	161 JumpIfEqual {168}
	162 Move X10, [X8+176]
	163 Add X10, X10, 8
	164 NotImplemented "Instruction LDUR not yet implemented."
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Subtract X9, X9, 1
	167 Add X10, X10, 16
	168 Move X0, X23
	169 Move W2, W31
	170 Call 0x1C5D788
	171 Move W8, [X22+48]
	172 Move W10, [X22+52]
	173 Move X8, W8
	174 NotImplemented "Instruction CMP not yet implemented."
	175 Move X9, [X22+24]
	176 Add X12, X8, 1
	177 Move [X22+48], W12
	178 Compare X9, 0
	179 JumpIfEqual {491}
	180 Move W11, [X9+24]
	181 NotImplemented "Instruction CMP not yet implemented."
	182 Add X13, X9, X8
	183 Move W23, [X13+32]
	184 Move TEMP, X23
	185 And TEMP, TEMP, 128
	186 Compare TEMP, 128
	187 JumpIfNotEqual {59}
	188 Move W13, W23
	189 ShiftRight W13, 4
	190 And W13, W13, 0x7FFFFFFF
	191 Subtract W13, W13, 8
	192 NotImplemented "Instruction CMP not yet implemented."
	193 NotImplemented "Instruction ADR not yet implemented."
	194 NotImplemented "Instruction LDRH not yet implemented."
	195 Add X14, X14, X15
	196 CallNoReturn X14
	197 And W23, W23, 31
	198 Move W13, 2
	199 Move W8, [X22+48]
	200 Move W9, [X22+52]
	201 Move X8, W8
	202 NotImplemented "Instruction CMP not yet implemented."
	203 Move X9, [X22+24]
	204 Add W10, W8, 1
	205 Move [X22+48], W10
	206 Compare X9, 0
	207 JumpIfEqual {491}
	208 Move W10, [X9+24]
	209 NotImplemented "Instruction CMP not yet implemented."
	210 Add X8, X9, X8
	211 Move W23, [X8+32]
	212 Move W8, [X22+48]
	213 Move W9, [X22+52]
	214 Move X8, W8
	215 NotImplemented "Instruction CMP not yet implemented."
	216 Move X9, [X22+32]
	217 Add W10, W8, 1
	218 Move [X22+48], W10
	219 Compare X9, 0
	220 JumpIfEqual {491}
	221 Move W10, [X9+24]
	222 NotImplemented "Instruction CMP not yet implemented."
	223 Add X8, X9, X8
	224 NotImplemented "Instruction LDRH not yet implemented."
	225 Move W1, [X22+48]
	226 Move W8, [X22+52]
	227 NotImplemented "Instruction CMP not yet implemented."
	228 Move X0, [X22+40]
	229 Add W8, W1, 1
	230 Move [X22+48], W8
	231 Compare X0, 0
	232 JumpIfNotEqual {243}
	233 Move W8, [X22+100]
	234 Compare W8, 0
	235 JumpIfEqual {299}
	236 Move W1, [X22+96]
	237 NotImplemented "Instruction CMP not yet implemented."
	238 Move X0, [X22+104]
	239 Add W8, W1, 1
	240 Move [X22+96], W8
	241 Compare X0, 0
	242 JumpIfEqual {491}
	243 Move X2, X31
	244 Call String.get_Chars, X0, X1
	245 And W23, W0, 0xFFFF
	246 Move W8, [X22+16]
	247 Move W24, W31
	248 Add W8, W8, 1
	249 Move [X22+16], W8
	250 NotImplemented "Instruction CMP not yet implemented."
	251 NotImplemented "Instruction LDRSW not yet implemented."
	252 NotImplemented "Instruction CMP not yet implemented."
	253 Move X24, [X27+32]
	254 Compare X24, 0
	255 JumpIfNotEqual {264}
	256 Move X0, [X26]
	257 Call 0x1C17F10
	258 Move X1, X31
	259 Move X24, X0
	260 Call StringBuilder..ctor, X0
	261 Move [X27+32], X24
	262 Compare X24, 0
	263 JumpIfEqual {491}
	264 Move X1, [X27+40]
	265 Move W3, 512
	266 Move X0, X24
	267 Move W2, W31
	268 Move X4, X31
	269 Call StringBuilder.Append, X0, X1, X2, X3
	270 Move X8, [X27+40]
	271 Compare X8, 0
	272 JumpIfEqual {491}
	273 Move W9, [X8+24]
	274 Compare W9, 0
	275 JumpIfEqual {492}
	276 Move W24, 1
	277 NotImplemented "Instruction STRH not yet implemented."
	278 Move [X27+48], W24
	279 Move X9, [X27+40]
	280 Add W10, W8, 1
	281 Move [X27+48], W10
	282 Compare X9, 0
	283 JumpIfEqual {491}
	284 Move W10, [X9+24]
	285 NotImplemented "Instruction CMP not yet implemented."
	286 Add X8, X9, X8
	287 NotImplemented "Instruction STRH not yet implemented."
	288 Move W24, 1
	289 NotImplemented "Instruction LDRSW not yet implemented."
	290 Add X8, X8, X9
	291 Add X0, X8, 312
	292 Move X8, [X0]
	293 Move X1, [X0+8]
	294 Move X0, X23
	295 NotImplemented "Instruction BLR not yet implemented."
	296 Move W23, W0
	297 Add W31, W0, 1
	298 Move [X22+100], W31
	299 Move W1, [X22+48]
	300 Move W8, [X22+52]
	301 NotImplemented "Instruction CMP not yet implemented."
	302 Move X0, [X22+40]
	303 Add W8, W1, 1
	304 Move [X22+48], W8
	305 Compare X0, 0
	306 JumpIfEqual {491}
	307 Move X2, X31
	308 Call String.get_Chars, X0, X1
	309 And W23, W0, 0xFFFF
	310 NotImplemented "Instruction CMP not yet implemented."
	311 Move X8, [X22+80]
	312 Compare X8, 0
	313 JumpIfEqual {491}
	314 Move X29, X19
	315 Move X19, X25
	316 Move W25, W21
	317 Move W21, 4
	318 Move W9, [X8+24]
	319 Subtract X26, X21, 4
	320 NotImplemented "Instruction CMP not yet implemented."
	321 NotImplemented "Instruction CMP not yet implemented."
	322 Move X0, [X8]
	323 Compare X0, 0
	324 JumpIfEqual {491}
	325 Move W8, [X22+48]
	326 Move X2, [X22+40]
	327 Move W4, [X0+16]
	328 Move W5, 4
	329 Subtract W3, W8, 1
	330 Move W1, W31
	331 Move X6, X31
	332 Call String.Compare, X0, X1, X2, X3, X4, X5
	333 Compare W0, 0
	334 JumpIfEqual {339}
	335 Move X8, [X22+80]
	336 Add X21, X21, 1
	337 Compare X8, 0
	338 JumpIfNotEqual {318}
	339 Move X8, [X22+88]
	340 Compare X8, 0
	341 JumpIfEqual {491}
	342 Move W9, [X8+24]
	343 NotImplemented "Instruction CMP not yet implemented."
	344 Move X0, [X8]
	345 Move [X22+104], X0
	346 Compare X0, 0
	347 JumpIfEqual {491}
	348 Move W8, [X0+16]
	349 Move W9, 1
	350 Move W1, W31
	351 Move X2, X31
	352 Move [X22+96], W9
	353 Move [X22+100], W8
	354 Call String.get_Chars, X0, X1
	355 Move X8, [X22+80]
	356 Compare X8, 0
	357 JumpIfEqual {491}
	358 Move W9, [X8+24]
	359 NotImplemented "Instruction CMP not yet implemented."
	360 Move X8, [X8]
	361 Compare X8, 0
	362 JumpIfEqual {491}
	363 Move W9, [X22+48]
	364 Move W8, [X8+16]
	365 And W23, W0, 0xFFFF
	366 Add W8, W9, W8
	367 Subtract W8, W8, 1
	368 Move [X22+48], W8
	369 Move X26, 0xEA8000
	370 Move X26, [X26+2288]
	371 Move W21, W25
	372 Move X25, X19
	373 Move X19, X29
	374 Move X29, -40587264
	375 Add X29, X29, 1178
	376 And W23, W23, 15
	377 Move W13, 3
	378 Move [X31+12], W13
	379 NotImplemented "Instruction CMP not yet implemented."
	380 Add X13, X8, 2
	381 NotImplemented "Instruction CMP not yet implemented."
	382 Move [X22+48], W13
	383 Add X12, X9, X12
	384 Move W12, [X12+32]
	385 And W14, W12, 192
	386 NotImplemented "Instruction CMP not yet implemented."
	387 Move W14, [X31+12]
	388 And W12, W12, 63
	389 NotImplemented "Instruction BFM not yet implemented."
	390 NotImplemented "Instruction CMP not yet implemented."
	391 Move W8, 2
	392 Move [X31+12], W8
	393 Move W23, W12
	394 NotImplemented "Instruction CMP not yet implemented."
	395 Add W8, W8, 3
	396 NotImplemented "Instruction CMP not yet implemented."
	397 Move [X22+48], W8
	398 Add X8, X9, X13
	399 Move W8, [X8+32]
	400 And W9, W8, 192
	401 NotImplemented "Instruction CMP not yet implemented."
	402 And W23, W8, 63
	403 NotImplemented "Instruction BFM not yet implemented."
	404 Move W28, 1
	405 Move W8, 60
	406 Move [X22+56], W8
	407 Move [X22+56], W23
	408 Compare X19, 0
	409 JumpIfEqual {491}
	410 Move W1, 3
	411 Move X0, X19
	412 Call TokenizerStream.AddToken, X0, X1
	413 Move X0, [X22+72]
	414 Compare X0, 0
	415 JumpIfEqual {491}
	416 Call StringMaker.MakeString, X0
	417 Move X1, X0
	418 Move X0, X19
	419 Call TokenizerStream.AddString, X0, X1
	420 Move W8, [X22+20]
	421 Add W8, W8, 1
	422 Move [X22+20], W8
	423 Compare X19, 0
	424 JumpIfEqual {491}
	425 Move X0, X19
	426 Move W1, W31
	427 Call TokenizerStream.AddToken, X0, X1
	428 Compare X19, 0
	429 JumpIfEqual {491}
	430 Move W1, 4
	431 Move W8, [X22+20]
	432 Subtract W8, W8, 1
	433 Move [X22+20], W8
	434 Compare X19, 0
	435 JumpIfEqual {491}
	436 Move W1, 1
	437 Move X0, X19
	438 Call TokenizerStream.AddToken, X0, X1
	439 Move W8, [X31+8]
	440 Move TEMP, X8
	441 And TEMP, TEMP, 1
	442 Compare TEMP, 1
	443 JumpIfNotEqual {36}
	444 Compare X19, 0
	445 JumpIfEqual {491}
	446 Move W1, 2
	447 Compare X19, 0
	448 JumpIfEqual {491}
	449 Move W1, 5
	450 Compare X19, 0
	451 JumpIfEqual {491}
	452 Move W1, 7
	453 Compare X19, 0
	454 JumpIfEqual {491}
	455 Move W1, 6
	456 Move X0, X19
	457 Call TokenizerStream.AddToken, X0, X1
	458 Compare X19, 0
	459 JumpIfEqual {491}
	460 Move X0, X19
	461 Move X20, [X31+96]
	462 Move X19, [X31+104]
	463 Move X22, [X31+80]
	464 Move X21, [X31+88]
	465 Move X24, [X31+64]
	466 Move X23, [X31+72]
	467 Move X26, [X31+48]
	468 Move X25, [X31+56]
	469 Move X28, [X31+32]
	470 Move X27, [X31+40]
	471 Move X29, [X31+16]
	472 Move X30, [X31+24]
	473 Move W1, 0xFFFF
	474 Add X31, X31, 112
	475 Call TokenizerStream.AddToken, X0, X1
	476 Return 
	477 Move X20, [X31+96]
	478 Move X19, [X31+104]
	479 Move X22, [X31+80]
	480 Move X21, [X31+88]
	481 Move X24, [X31+64]
	482 Move X23, [X31+72]
	483 Move X26, [X31+48]
	484 Move X25, [X31+56]
	485 Move X28, [X31+32]
	486 Move X27, [X31+40]
	487 Move X29, [X31+16]
	488 Move X30, [X31+24]
	489 Add X31, X31, 112
	490 Return 
	491 Call 0x1C17F20
	492 Call 0x1C17F28
	493 Move X0, 0xED7000
	494 Move X0, [X0+3240]
	495 Call 0x1C17D08
	496 Move X1, X31
	497 Call Environment.GetResourceString, X0
	498 Move X0, 0xED7000
	499 Move X0, [X0+2912]
	500 Call 0x1C17D08
	501 Call 0x1C17F10
	502 Move X1, X31
	503 Move X19, X0
	504 Call SystemException..ctor, X0
	505 Move X0, 0xED7000
	506 Move X0, [X0+3264]
	507 Call 0x1C17D08
	508 Move X1, X0
	509 Move X0, X19
	510 Call 0x1C17DEC

Method: System.String GetStringToken()

Disassembly:
	0x0324D48C BL 0x1C16DFC
	0x0324D490 ADD X0, X31, 0x8
	0x0324D494 MOV X1, X31
	0x0324D498 BL 0x33DD2B0
	0x0324D49C TBZ X0, 0x0, 0x324D4CC
	0x0324D4A0 ADRP X8, 0xEA7000

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+72]
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X30, [X31+16]
	006 Call StringMaker.MakeString, X0
	007 Return X0
	008 Call 0x1C17F20

