Type: System.Security.Util.TokenizerStream

Method: System.Void .ctor()

Disassembly:
	0x0324D028 LDR W9, [X10]
	0x0324D02C ADD W9, W9, 0x1
	0x0324D030 ADD X8, X8, W9, 0x4, SXTW
	0x0324D034 ADD X0, X8, 0x138
	0x0324D038 LDP X8, X1, [X0]
	0x0324D03C MOV X0, X20
	0x0324D040 BLR X8
	0x0324D044 STR W0, [X19 + 0x5C]
	0x0324D048 MOV W1, W0
	0x0324D04C LDR X0, [X21]
	0x0324D050 BL 0x1C16D6C
	0x0324D054 STR X0, [X19 + 0x50]
	0x0324D058 LDP X20, X19, [X31 + 0x20]
	0x0324D05C LDP X22, X21, [X31 + 0x10]
	0x0324D060 LDR X30, [X31], #0x30
	0x0324D064 RET
	0x0324D068 BL 0x1C16F20
	0x0324D06C LDRB W0, [X0 + 0x60]
	0x0324D070 RET
	0x0324D074 MOV W0, W31
	0x0324D078 RET
	0x0324D07C LDRB W0, [X0 + 0x61]
	0x0324D080 RET
	0x0324D084 STP X30, X19, [X31 - 0x10]!
	0x0324D088 ADRP X0, 0xEA6000
	0x0324D08C LDR X0, [X0 + 0xB40]
	0x0324D090 BL 0x1C16D08
	0x0324D094 BL 0x1C16F10
	0x0324D098 MOV X19, X0
	0x0324D09C ADRP X0, 0xED5000
	0x0324D0A0 LDR X0, [X0 + 0xD40]
	0x0324D0A4 BL 0x1C16D08
	0x0324D0A8 MOV X1, X0
	0x0324D0AC MOV X0, X19
	0x0324D0B0 MOV X2, X31
	0x0324D0B4 BL 0x3379A44
	0x0324D0B8 ADRP X0, 0xED5000
	0x0324D0BC LDR X0, [X0 + 0xD48]
	0x0324D0C0 BL 0x1C16D08
	0x0324D0C4 MOV X1, X0
	0x0324D0C8 MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1190000
	007 Move X20, 0xED6000
	008 Move X21, 0xED6000
	009 Move W8, [X22+1177]
	010 Move X20, [X20+3312]
	011 Move X21, [X21+3320]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xED6000
	018 Move X0, [X0+3312]
	019 Call 0x1C17CF4
	020 Move X0, 0xED6000
	021 Move X0, [X0+3320]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+1177], W8
	025 Move X0, X19
	026 Move X1, X31
	027 Call Object..ctor, X0
	028 Move [X19+16], W31
	029 Move X0, [X20]
	030 Call 0x1C17F10
	031 Move X20, X0
	032 Call TokenizerShortBlock..ctor, X0
	033 Move [X19+24], X20
	034 Move X0, [X21]
	035 Call 0x1C17F10
	036 Move X20, X0
	037 Call TokenizerStringBlock..ctor, X0
	038 Move X8, [X19+24]
	039 Move [X19+56], X20
	040 Move [X19+64], X20
	041 Move [X19+48], W31
	042 Move [X19+72], W31
	043 Move [X19+32], X31
	044 Move [X19+40], X8
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X22, [X31+16]
	048 Move X21, [X31+24]
	049 Move X30, [X31+48]
	050 Return 

Method: System.Void AddToken(System.Int16 token)

Disassembly:
	0x0324D3A8 STP X22, X21, [X31 + 0x20]
	0x0324D3AC STP X20, X19, [X31 + 0x30]
	0x0324D3B0 ADRP X23, 0x118F000
	0x0324D3B4 STR X1, [X31 + 0x8]
	0x0324D3B8 ADRP X21, 0xED5000
	0x0324D3BC ADRP X22, 0xEA6000
	0x0324D3C0 LDRB W8, [X23 + 0x4A2]
	0x0324D3C4 LDR X21, [X21 + 0xD70]
	0x0324D3C8 LDR X22, [X22 + 0x6C0]
	0x0324D3CC MOV X19, X1
	0x0324D3D0 MOV X20, X0
	0x0324D3D4 TBNZ X8, 0x0, 0x324D410
	0x0324D3D8 ADRP X0, 0xEAE000
	0x0324D3DC LDR X0, [X0 + 0x7D8]
	0x0324D3E0 BL 0x1C16CF4
	0x0324D3E4 ADRP X0, 0xED5000
	0x0324D3E8 LDR X0, [X0 + 0xD70]
	0x0324D3EC BL 0x1C16CF4
	0x0324D3F0 ADRP X0, 0xEA7000
	0x0324D3F4 LDR X0, [X0 + 0x7B8]
	0x0324D3F8 BL 0x1C16CF4
	0x0324D3FC ADRP X0, 0xEA6000
	0x0324D400 LDR X0, [X0 + 0x6C0]
	0x0324D404 BL 0x1C16CF4
	0x0324D408 MOVZ W8, 0x1
	0x0324D40C STRB W8, [X23 + 0x4A2]
	0x0324D410 MOV X0, X20
	0x0324D414 MOV X1, X31
	0x0324D418 BL 0x33BE520
	0x0324D41C LDR X8, [X22]
	0x0324D420 LDR X22, [X21]
	0x0324D424 MOV X21, X0
	0x0324D428 LDR W9, [X8 + 0xE0]
	0x0324D42C CBNZ W9, 0x324D438
	0x0324D430 MOV X0, X8
	0x0324D434 BL 0x1C16DFC
	0x0324D438 MOV X0, X22
	0x0324D43C MOV X1, X31
	0x0324D440 BL 0x338C698
	0x0324D444 MOV X1, X0
	0x0324D448 MOV X0, X21
	0x0324D44C MOV X2, X31
	0x0324D450 BL 0x3395F0C
	0x0324D454 TBZ X0, 0x0, 0x324D478
	0x0324D458 MOV X0, X20
	0x0324D45C MOV X1, X19
	0x0324D460 LDP X20, X19, [X31 + 0x30]
	0x0324D464 LDP X22, X21, [X31 + 0x20]
	0x0324D468 LDP X30, X23, [X31 + 0x10]
	0x0324D46C MOV X2, X31
	0x0324D470 ADD X31, X31, 0x40
	0x0324D474 B 0x32F02CC
	0x0324D478 ADRP X8, 0xEAE000
	0x0324D47C LDR X8, [X8 + 0x7D8]
	0x0324D480 LDR X0, [X8]
	0x0324D484 LDR W8, [X0 + 0xE0]
	0x0324D488 CBNZ W8, 0x324D490

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1190000
	007 Move W8, [X21+1178]
	008 Move W19, W1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xED6000
	015 Move X0, [X0+3312]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1178], W8
	019 Move X22, [X20+40]
	020 Compare X22, 0
	021 JumpIfEqual {65}
	022 Move X9, [X22+16]
	023 Compare X9, 0
	024 JumpIfEqual {65}
	025 Move W8, [X20+48]
	026 Move W9, [X9+24]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move W9, [X20+16]
	029 Add W9, W9, 1
	030 Move [X20+16], W9
	031 Move X8, 0xED6000
	032 Move X8, [X8+3312]
	033 Move X0, [X8]
	034 Call 0x1C17F10
	035 Move X21, X0
	036 Call TokenizerShortBlock..ctor, X0
	037 Move [X22+24], X21
	038 Move X8, [X20+40]
	039 Compare X8, 0
	040 JumpIfEqual {65}
	041 Move X22, [X8+24]
	042 Move W8, [X20+16]
	043 Move [X20+48], W31
	044 Move [X20+40], X22
	045 Add W8, W8, 1
	046 Move [X20+16], W8
	047 Compare X22, 0
	048 JumpIfEqual {65}
	049 Move W8, W31
	050 Move X9, [X22+16]
	051 Add W10, W8, 1
	052 Move [X20+48], W10
	053 Compare X9, 0
	054 JumpIfEqual {65}
	055 Move W10, [X9+24]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Add X8, X9, W8
	058 NotImplemented "Instruction STRH not yet implemented."
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X22, [X31+16]
	062 Move X21, [X31+24]
	063 Move X30, [X31+48]
	064 Return 
	065 Call 0x1C17F20
	066 Call 0x1C17F28

Method: System.Void AddString(System.String str)

Disassembly:
	0x0324D4A4 LDR X8, [X8 + 0x7B8]
	0x0324D4A8 LDR X19, [X31 + 0x8]
	0x0324D4AC LDR X0, [X8]
	0x0324D4B0 LDR W8, [X0 + 0xE0]
	0x0324D4B4 CBNZ W8, 0x324D4BC
	0x0324D4B8 BL 0x1C16DFC
	0x0324D4BC MOV X0, X19
	0x0324D4C0 MOV X1, X31
	0x0324D4C4 BL 0x33EE044
	0x0324D4C8 B 0x324D520
	0x0324D4CC ADRP X19, 0xEA7000
	0x0324D4D0 LDR X19, [X19 + 0x7B8]
	0x0324D4D4 LDR X0, [X19]
	0x0324D4D8 LDR W8, [X0 + 0xE0]
	0x0324D4DC CBNZ W8, 0x324D4E4
	0x0324D4E0 BL 0x1C16DFC
	0x0324D4E4 ADRP X20, 0x118B000
	0x0324D4E8 LDRB W8, [X20 + 0xF1D]
	0x0324D4EC CBNZ W8, 0x324D504
	0x0324D4F0 ADRP X0, 0xEA7000
	0x0324D4F4 LDR X0, [X0 + 0x7B8]
	0x0324D4F8 BL 0x1C16CF4
	0x0324D4FC MOVZ W8, 0x1
	0x0324D500 STRB W8, [X20 + 0xF1D]
	0x0324D504 LDR X0, [X19]
	0x0324D508 LDR W8, [X0 + 0xE0]
	0x0324D50C CBNZ W8, 0x324D518
	0x0324D510 BL 0x1C16DFC
	0x0324D514 LDR X0, [X19]
	0x0324D518 LDR X8, [X0 + 0xB8]
	0x0324D51C LDR X0, [X8 + 0x30]
	0x0324D520 LDP X20, X19, [X31 + 0x30]
	0x0324D524 LDP X22, X21, [X31 + 0x20]
	0x0324D528 LDP X30, X23, [X31 + 0x10]
	0x0324D52C ADD X31, X31, 0x40
	0x0324D530 RET
	0x0324D534 STP X30, X19, [X31 - 0x10]!
	0x0324D538 ADRP X0, 0xEA6000
	0x0324D53C LDR X0, [X0 + 0xB40]
	0x0324D540 BL 0x1C16D08
	0x0324D544 BL 0x1C16F10
	0x0324D548 MOV X19, X0
	0x0324D54C ADRP X0, 0xED5000
	0x0324D550 LDR X0, [X0 + 0xD40]
	0x0324D554 BL 0x1C16D08
	0x0324D558 MOV X1, X0
	0x0324D55C MOV X0, X19
	0x0324D560 MOV X2, X31
	0x0324D564 BL 0x3379A44
	0x0324D568 ADRP X0, 0xED5000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1190000
	007 Move W8, [X21+1179]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xED6000
	015 Move X0, [X0+3320]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1179], W8
	019 Move X22, [X20+64]
	020 Compare X22, 0
	021 JumpIfEqual {59}
	022 Move X9, [X22+16]
	023 Compare X9, 0
	024 JumpIfEqual {59}
	025 Move W8, [X20+72]
	026 Move W9, [X9+24]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X8, 0xED6000
	029 Move X8, [X8+3320]
	030 Move X0, [X8]
	031 Call 0x1C17F10
	032 Move X21, X0
	033 Call TokenizerStringBlock..ctor, X0
	034 Move [X22+24], X21
	035 Move X8, [X20+64]
	036 Compare X8, 0
	037 JumpIfEqual {59}
	038 Move X22, [X8+24]
	039 Move [X20+72], W31
	040 Move [X20+64], X22
	041 Compare X22, 0
	042 JumpIfEqual {59}
	043 Move W8, W31
	044 Move X9, [X22+16]
	045 Add W10, W8, 1
	046 Move [X20+72], W10
	047 Compare X9, 0
	048 JumpIfEqual {59}
	049 Move W10, [X9+24]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Add X8, X9, W8
	052 Move [X8+32], X19
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X30, [X31+48]
	058 Return 
	059 Call 0x1C17F20
	060 Call 0x1C17F28

Method: System.Void Reset()

Disassembly:
	0x0324D0CC BL 0x1C16DEC
	0x0324D0D0 STP X30, X19, [X31 - 0x10]!
	0x0324D0D4 ADRP X0, 0xEA6000
	0x0324D0D8 LDR X0, [X0 + 0xB40]
	0x0324D0DC BL 0x1C16D08
	0x0324D0E0 BL 0x1C16F10
	0x0324D0E4 MOV X19, X0

ISIL:
	001 Move X8, [X0+24]
	002 Move X9, [X0+56]
	003 Move [X0+48], W31
	004 Move [X0+72], W31
	005 Move [X0+32], X31
	006 Move [X0+40], X8
	007 Move [X0+64], X9
	008 Return 

Method: System.Int16 GetNextFullToken()

Disassembly:
	0x0324D0E8 ADRP X0, 0xED5000
	0x0324D0EC LDR X0, [X0 + 0xD40]
	0x0324D0F0 BL 0x1C16D08
	0x0324D0F4 MOV X1, X0
	0x0324D0F8 MOV X0, X19
	0x0324D0FC MOV X2, X31
	0x0324D100 BL 0x3379A44
	0x0324D104 ADRP X0, 0xED5000
	0x0324D108 LDR X0, [X0 + 0xD50]
	0x0324D10C BL 0x1C16D08
	0x0324D110 MOV X1, X0
	0x0324D114 MOV X0, X19
	0x0324D118 BL 0x1C16DEC
	0x0324D11C STP X30, X19, [X31 - 0x10]!
	0x0324D120 ADRP X0, 0xEA6000
	0x0324D124 LDR X0, [X0 + 0xB40]
	0x0324D128 BL 0x1C16D08
	0x0324D12C BL 0x1C16F10
	0x0324D130 MOV X19, X0
	0x0324D134 ADRP X0, 0xED5000
	0x0324D138 LDR X0, [X0 + 0xD40]
	0x0324D13C BL 0x1C16D08
	0x0324D140 MOV X1, X0
	0x0324D144 MOV X0, X19
	0x0324D148 MOV X2, X31
	0x0324D14C BL 0x3379A44
	0x0324D150 ADRP X0, 0xED5000
	0x0324D154 LDR X0, [X0 + 0xD58]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+40]
	003 Compare X8, 0
	004 JumpIfEqual {29}
	005 Move X10, [X8+16]
	006 Compare X10, 0
	007 JumpIfEqual {29}
	008 Move W9, [X0+48]
	009 Move W10, [X10+24]
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move [X0+32], X8
	012 Move X8, [X8+24]
	013 Move [X0+48], W31
	014 Move [X0+40], X8
	015 Compare X8, 0
	016 JumpIfEqual {29}
	017 Move W9, W31
	018 Move X8, [X8+16]
	019 Add W10, W9, 1
	020 Move [X0+48], W10
	021 Compare X8, 0
	022 JumpIfEqual {29}
	023 Move W10, [X8+24]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Add X8, X8, W9
	026 NotImplemented "Instruction LDRH not yet implemented."
	027 Move X30, [X31+16]
	028 Return X0
	029 Call 0x1C17F20
	030 Call 0x1C17F28

Method: System.Int16 GetNextToken()

Disassembly:
	0x0324C058 LDR X0, [X0 + 0xCF0]
	0x0324C05C BL 0x1C16CF4
	0x0324C060 ADRP X0, 0xED6000
	0x0324C064 LDR X0, [X0 + 0xCF8]
	0x0324C068 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Call TokenizerStream.GetNextFullToken, X0
	003 And W0, W0, 255
	004 Move X30, [X31+16]
	005 Return X0

Method: System.String GetNextString()

Disassembly:
	0x0324C0E4 RET
	0x0324C0E8 STR X30, [X31 - 0x10]!
	0x0324C0EC LDR X8, [X0 + 0x28]
	0x0324C0F0 CBZ X8, 0x324C150
	0x0324C0F4 LDR X10, [X8 + 0x10]
	0x0324C0F8 CBZ X10, 0x324C150
	0x0324C0FC LDR W9, [X0 + 0x30]
	0x0324C100 LDR W10, [X10 + 0x18]
	0x0324C104 CMP W9, W10
	0x0324C108 B.LT 0x324C124
	0x0324C10C STR X8, [X0 + 0x20]
	0x0324C110 LDR X8, [X8 + 0x18]
	0x0324C114 STR W31, [X0 + 0x30]
	0x0324C118 STR X8, [X0 + 0x28]
	0x0324C11C CBZ X8, 0x324C150
	0x0324C120 MOV W9, W31
	0x0324C124 LDR X8, [X8 + 0x10]
	0x0324C128 ADD W10, W9, 0x1
	0x0324C12C STR W10, [X0 + 0x30]
	0x0324C130 CBZ X8, 0x324C150
	0x0324C134 LDR W10, [X8 + 0x18]
	0x0324C138 CMP W9, W10
	0x0324C13C B.CS 0x324C154
	0x0324C140 ADD X8, X8, W9, 0x1, SXTW
	0x0324C144 LDRH W0, [X8 + 0x20]
	0x0324C148 LDR X30, [X31], #0x10
	0x0324C14C RET

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+64]
	003 Compare X8, 0
	004 JumpIfEqual {28}
	005 Move X10, [X8+16]
	006 Compare X10, 0
	007 JumpIfEqual {28}
	008 Move W9, [X0+72]
	009 Move W10, [X10+24]
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move X8, [X8+24]
	012 Move [X0+72], W31
	013 Move [X0+64], X8
	014 Compare X8, 0
	015 JumpIfEqual {28}
	016 Move W9, W31
	017 Move X8, [X8+16]
	018 Add W10, W9, 1
	019 Move [X0+72], W10
	020 Compare X8, 0
	021 JumpIfEqual {28}
	022 Move W10, [X8+24]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Add X8, X8, W9
	025 Move X0, [X8+32]
	026 Move X30, [X31+16]
	027 Return X0
	028 Call 0x1C17F20
	029 Call 0x1C17F28

Method: System.Void ThrowAwayNextString()

Disassembly:
	0x0324C06C MOVZ W8, 0x1

ISIL:
	001 Call TokenizerStream.GetNextString, X0
	002 Return 

Method: System.Void TagLastToken(System.Int16 tag)

Disassembly:
	0x0324C070 STRB W8, [X22 + 0x499]
	0x0324C074 MOV X0, X19
	0x0324C078 MOV X1, X31
	0x0324C07C BL 0x33BDD8C
	0x0324C080 STR W31, [X19 + 0x10]
	0x0324C084 LDR X0, [X20]
	0x0324C088 BL 0x1C16F10
	0x0324C08C MOV X20, X0
	0x0324C090 BL 0x324C7AC
	0x0324C094 STR X20, [X19 + 0x18]
	0x0324C098 LDR X0, [X21]
	0x0324C09C BL 0x1C16F10
	0x0324C0A0 MOV X20, X0
	0x0324C0A4 BL 0x324C804
	0x0324C0A8 LDR X8, [X19 + 0x18]
	0x0324C0AC STP X20, X20, [X19 + 0x38]
	0x0324C0B0 STR W31, [X19 + 0x30]
	0x0324C0B4 STR W31, [X19 + 0x48]
	0x0324C0B8 STP X31, X8, [X19 + 0x20]
	0x0324C0BC LDP X20, X19, [X31 + 0x20]
	0x0324C0C0 LDP X22, X21, [X31 + 0x10]
	0x0324C0C4 LDR X30, [X31], #0x30
	0x0324C0C8 RET
	0x0324C0CC LDR X8, [X0 + 0x18]
	0x0324C0D0 LDR X9, [X0 + 0x38]
	0x0324C0D4 STR W31, [X0 + 0x30]
	0x0324C0D8 STR W31, [X0 + 0x48]
	0x0324C0DC STP X31, X8, [X0 + 0x20]
	0x0324C0E0 STR X9, [X0 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+48]
	003 Compare W8, 0
	004 JumpIfEqual {15}
	005 Move X9, [X0+40]
	006 Compare X9, 0
	007 JumpIfEqual {32}
	008 Move X9, [X9+16]
	009 Compare X9, 0
	010 JumpIfEqual {32}
	011 Move W10, [X9+24]
	012 Subtract W8, W8, 1
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Add X8, X9, W8
	015 Move X8, [X0+32]
	016 Compare X8, 0
	017 JumpIfEqual {32}
	018 Move X8, [X8+16]
	019 Compare X8, 0
	020 JumpIfEqual {32}
	021 Move X9, [X8+24]
	022 Compare W9, 0
	023 JumpIfEqual {33}
	024 Move X10, INVALID
	025 Add X9, X10, X9
	026 Add X8, X8, X9
	027 NotImplemented "Instruction LDRH not yet implemented."
	028 Or W9, W9, W1
	029 NotImplemented "Instruction STRH not yet implemented."
	030 Move X30, [X31+16]
	031 Return 
	032 Call 0x1C17F20
	033 Call 0x1C17F28

Method: System.Int32 GetTokenCount()

Disassembly:
	0x0324D85C LDP X30, X25, [X31 + 0x80]
	0x0324D860 ADD X31, X31, 0xC0

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void GoToPosition(System.Int32 position)

Disassembly:
	0x0324CAB0 LDRH W9, [X8 + 0x12E]
	0x0324CAB4 LDR X1, [X21]
	0x0324CAB8 CBZ X9, 0x324CADC
	0x0324CABC LDR X10, [X8 + 0xB0]
	0x0324CAC0 ADD X10, X10, 0x8
	0x0324CAC4 LDUR X11, [X10 - 0x8]
	0x0324CAC8 CMP X11, X1
	0x0324CACC B.EQ 0x324CAEC
	0x0324CAD0 SUBS X9, X9, 0x1
	0x0324CAD4 ADD X10, X10, 0x10
	0x0324CAD8 B.NE 0x324CAC4
	0x0324CADC MOV X0, X20
	0x0324CAE0 MOV W2, W31
	0x0324CAE4 BL 0x1C5C788
	0x0324CAE8 B 0x324CAF8
	0x0324CAEC LDRSW X9, [X10]
	0x0324CAF0 ADD X8, X8, X9, 0x4, LSL
	0x0324CAF4 ADD X0, X8, 0x138
	0x0324CAF8 LDP X8, X1, [X0]
	0x0324CAFC MOV X0, X20
	0x0324CB00 BLR X8
	0x0324CB04 TBZ X0, 0x0, 0x324CB10
	0x0324CB08 MOVZ W0, 0x1
	0x0324CB0C B 0x324CB20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0+24]
	005 Move X9, [X0+56]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move [X0+48], W31
	008 Move [X0+32], X31
	009 Move [X0+40], X8
	010 Move [X0+64], X9
	011 Move [X0+72], W31
	012 Move W19, W1
	013 Move X20, X0
	014 Move X0, X20
	015 Call TokenizerStream.GetNextFullToken, X0
	016 And W8, W0, 255
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X0, X20
	019 Call TokenizerStream.GetNextString, X0
	020 Subtract W19, W19, 1
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return 

