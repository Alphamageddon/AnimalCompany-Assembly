Type: System.RuntimeTypeHandle

Method: System.Void .ctor(System.IntPtr val)

Disassembly:
	0x033CCEE8 LDRB W0, [X0 + 0xA0]
	0x033CCEEC RET

ISIL:
	001 Move [X0], X1
	002 Return 

Method: System.Void .ctor(System.RuntimeType type)

Disassembly:
	0x033CCEF0 STR X30, [X31 - 0x40]!
	0x033CCEF4 STP X24, X23, [X31 + 0x10]
	0x033CCEF8 STP X22, X21, [X31 + 0x20]
	0x033CCEFC STP X20, X19, [X31 + 0x30]
	0x033CCF00 ADRP X19, 0x1011000
	0x033CCF04 LDRB W8, [X19 + 0x2A3]
	0x033CCF08 MOV X20, X0

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {8}
	004 Move X8, [X1+16]
	005 Move [X0], X8
	006 Move X30, [X31+16]
	007 Return 
	008 Call 0x1C17F20

Method: System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)

Disassembly:
	0x033CCF0C TBNZ X8, 0x0, 0x33CCFD8
	0x033CCF10 ADRP X0, 0xD27000
	0x033CCF14 LDR X0, [X0 + 0x618]
	0x033CCF18 BL 0x1C16CF4
	0x033CCF1C ADRP X0, 0xD5B000
	0x033CCF20 LDR X0, [X0 + 0x7B8]
	0x033CCF24 BL 0x1C16CF4
	0x033CCF28 ADRP X0, 0xD2F000
	0x033CCF2C LDR X0, [X0 + 0x958]
	0x033CCF30 BL 0x1C16CF4
	0x033CCF34 ADRP X0, 0xD27000
	0x033CCF38 LDR X0, [X0 + 0x5A8]
	0x033CCF3C BL 0x1C16CF4
	0x033CCF40 ADRP X0, 0xD56000
	0x033CCF44 LDR X0, [X0 + 0xCC8]
	0x033CCF48 BL 0x1C16CF4
	0x033CCF4C ADRP X0, 0xD5B000
	0x033CCF50 LDR X0, [X0 + 0x7C0]
	0x033CCF54 BL 0x1C16CF4
	0x033CCF58 ADRP X0, 0xD60000
	0x033CCF5C LDR X0, [X0 + 0xAD8]
	0x033CCF60 BL 0x1C16CF4
	0x033CCF64 ADRP X0, 0xD60000
	0x033CCF68 LDR X0, [X0 + 0xAE0]
	0x033CCF6C BL 0x1C16CF4
	0x033CCF70 ADRP X0, 0xD60000
	0x033CCF74 LDR X0, [X0 + 0xAE8]
	0x033CCF78 BL 0x1C16CF4
	0x033CCF7C ADRP X0, 0xD60000
	0x033CCF80 LDR X0, [X0 + 0xAF0]
	0x033CCF84 BL 0x1C16CF4
	0x033CCF88 ADRP X0, 0xD60000
	0x033CCF8C LDR X0, [X0 + 0xAF8]
	0x033CCF90 BL 0x1C16CF4
	0x033CCF94 ADRP X0, 0xD60000
	0x033CCF98 LDR X0, [X0 + 0xB00]
	0x033CCF9C BL 0x1C16CF4
	0x033CCFA0 ADRP X0, 0xD60000
	0x033CCFA4 LDR X0, [X0 + 0x7C0]
	0x033CCFA8 BL 0x1C16CF4
	0x033CCFAC ADRP X0, 0xD60000
	0x033CCFB0 LDR X0, [X0 + 0x7C8]
	0x033CCFB4 BL 0x1C16CF4
	0x033CCFB8 ADRP X0, 0xD60000
	0x033CCFBC LDR X0, [X0 + 0xB08]
	0x033CCFC0 BL 0x1C16CF4
	0x033CCFC4 ADRP X0, 0xD60000
	0x033CCFC8 LDR X0, [X0 + 0xB10]
	0x033CCFCC BL 0x1C16CF4
	0x033CCFD0 MOVZ W8, 0x1
	0x033CCFD4 STRB W8, [X19 + 0x2A3]
	0x033CCFD8 LDRB W8, [X20 + 0xA0]
	0x033CCFDC CBNZ W8, 0x33CD428
	0x033CCFE0 LDR X19, [X20 + 0xA8]
	0x033CCFE4 STRB W31, [X31 + 0xC]
	0x033CCFE8 ADD X1, X31, 0xC
	0x033CCFEC MOV X0, X19
	0x033CCFF0 MOV X2, X31
	0x033CCFF4 BL 0x33DE64C
	0x033CCFF8 LDRB W8, [X20 + 0xA0]
	0x033CCFFC CBZ W8, 0x33CD008
	0x033CD000 MOV X21, X31
	0x033CD004 B 0x33CD410
	0x033CD008 ADRP X23, 0xD5A000
	0x033CD00C LDR X23, [X23 + 0x7B8]
	0x033CD010 LDR X0, [X23]
	0x033CD014 LDR W8, [X0 + 0xE0]
	0x033CD018 CBNZ W8, 0x33CD020
	0x033CD01C BL 0x1C16DFC
	0x033CD020 BL 0x33C2B9C
	0x033CD024 TBZ X0, 0x0, 0x33CD494
	0x033CD028 LDR X0, [X23]
	0x033CD02C LDR W8, [X0 + 0xE0]
	0x033CD030 CBNZ W8, 0x33CD038
	0x033CD034 BL 0x1C16DFC
	0x033CD038 MOV W0, W31
	0x033CD03C BL 0x1C877AC
	0x033CD040 LDR X0, [X20 + 0x10]
	0x033CD044 CBZ X0, 0x33CD4DC
	0x033CD048 MOVZ W1, 0x59
	0x033CD04C BL 0x33CD6AC
	0x033CD050 MOV X8, X0
	0x033CD054 LDR X0, [X20 + 0x10]
	0x033CD058 STR X8, [X20 + 0x90]
	0x033CD05C CBZ X0, 0x33CD4E0
	0x033CD060 MOVZ W1, 0x58
	0x033CD064 BL 0x33CD6AC
	0x033CD068 LDR X1, [X20 + 0x90]
	0x033CD06C STR X0, [X20 + 0x98]
	0x033CD070 CBZ X1, 0x33CD098
	0x033CD074 MOV X0, X20
	0x033CD078 BL 0x33CCB74
	0x033CD07C LDR X1, [X20 + 0x98]
	0x033CD080 CBZ X1, 0x33CD098
	0x033CD084 MOV X0, X31
	0x033CD088 MOV X2, X31
	0x033CD08C BL 0x321B938
	0x033CD090 MOV X21, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1012000
	007 Move W8, [X21+667]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0xD59000
	015 Move X0, [X0+3736]
	016 Call 0x1C17CF4
	017 Move X0, 0xD51000
	018 Move X0, [X0+1256]
	019 Call 0x1C17CF4
	020 Move X0, 0xD28000
	021 Move X0, [X0+1728]
	022 Call 0x1C17CF4
	023 Move X0, 0xD61000
	024 Move X0, [X0+2664]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+667], W8
	028 Compare X20, 0
	029 JumpIfEqual {76}
	030 Move X8, 0xD28000
	031 Move X8, [X8+1728]
	032 Move X22, 0xD61000
	033 Move X0, [X8]
	034 Move X8, 0xD59000
	035 Move X8, [X8+3736]
	036 Move W9, [X0+224]
	037 Move X21, [X8]
	038 Move X22, [X22+2664]
	039 Compare W9, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X21
	043 Move X1, X31
	044 Call Type.GetTypeFromHandle, X0
	045 Move X1, [X22]
	046 Move X2, X0
	047 Move X0, X20
	048 Move X3, X31
	049 Call SerializationInfo.GetValue, X0, X1, X2
	050 Compare X0, 0
	051 JumpIfEqual {88}
	052 Move X9, 0xD51000
	053 Move X9, [X9+1256]
	054 Move X8, [X0]
	055 Move X1, [X9]
	056 Move W10, [X8+304]
	057 Move W9, [X1+304]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X10, [X8+200]
	060 Add X9, X10, X9
	061 NotImplemented "Instruction LDUR not yet implemented."
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X9, [X8+2040]
	064 Move X1, [X8+2048]
	065 NotImplemented "Instruction BLR not yet implemented."
	066 Move [X19], X0
	067 Compare X0, 0
	068 JumpIfEqual {89}
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X22, [X31+16]
	072 Move X21, [X31+24]
	073 Move X30, [X31+48]
	074 Return 
	075 Call 0x1C181E0
	076 Move X0, 0xD2C000
	077 Move X0, [X0+1320]
	078 Call 0x1C17D08
	079 Call 0x1C17F10
	080 Move X19, X0
	081 Move X0, 0xD51000
	082 Move X0, [X0+728]
	083 Call 0x1C17D08
	084 Move X1, X0
	085 Move X0, X19
	086 Move X2, X31
	087 Call ArgumentNullException..ctor, X0, X1
	088 Call 0x1C17F20
	089 Move X0, 0xD51000
	090 Move X0, [X0+736]
	091 Call 0x1C17D08
	092 Call 0x1C17F10
	093 Move X19, X0
	094 Move X0, 0xD60000
	095 Move X0, [X0+2584]
	096 Call 0x1C17D08
	097 Move X1, X0
	098 Move X0, X19
	099 Move X2, X31
	100 Call SerializationException..ctor, X0, X1
	101 Move X0, 0xD60000
	102 Move X0, [X0+2672]
	103 Call 0x1C17D08
	104 Move X1, X0
	105 Move X0, X19
	106 Call 0x1C17DEC

Method: System.IntPtr get_Value()

Disassembly:
	0x033CD094 B 0x33CD09C
	0x033CD098 MOV X21, X31

ISIL:
	001 Move X0, [X0]
	002 Return X0

Method: System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)

Disassembly:
	0x033CD09C LDR X0, [X20 + 0x10]
	0x033CD0A0 CBZ X0, 0x33CD4E4
	0x033CD0A4 MOVZ W1, 0x129
	0x033CD0A8 BL 0x33CD6AC
	0x033CD0AC MOV X8, X0
	0x033CD0B0 LDR X0, [X20 + 0x10]
	0x033CD0B4 STR X8, [X20 + 0xB8]
	0x033CD0B8 CBZ X0, 0x33CD4E8
	0x033CD0BC MOVZ W1, 0x12A
	0x033CD0C0 BL 0x33CD6AC
	0x033CD0C4 MOV X8, X0
	0x033CD0C8 LDR X0, [X20 + 0x10]
	0x033CD0CC STR X8, [X20 + 0xC0]
	0x033CD0D0 CBZ X0, 0x33CD4EC
	0x033CD0D4 MOVZ W1, 0x167
	0x033CD0D8 BL 0x33CD6AC
	0x033CD0DC MOV X8, X0
	0x033CD0E0 LDR X0, [X20 + 0x10]
	0x033CD0E4 STR X8, [X20 + 0xD8]
	0x033CD0E8 CBZ X0, 0x33CD4F0
	0x033CD0EC MOVZ W1, 0x168
	0x033CD0F0 BL 0x33CD6AC
	0x033CD0F4 MOV X8, X0
	0x033CD0F8 LDR X0, [X20 + 0x10]
	0x033CD0FC STR X8, [X20 + 0xE0]
	0x033CD100 CBZ X0, 0x33CD4F4
	0x033CD104 MOVZ W1, 0xD
	0x033CD108 BL 0x33CD73C
	0x033CD10C STR W0, [X20 + 0xE8]
	0x033CD110 ADRP X8, 0xD26000
	0x033CD114 LDR X8, [X8 + 0x5A8]
	0x033CD118 MOV W22, W0
	0x033CD11C LDR X0, [X8]
	0x033CD120 LDR W8, [X0 + 0xE0]
	0x033CD124 CBNZ W8, 0x33CD12C
	0x033CD128 BL 0x1C16DFC
	0x033CD12C MOVZ W1, 0x10
	0x033CD130 MOV W0, W22
	0x033CD134 MOV X2, X31
	0x033CD138 BL 0x337EE94
	0x033CD13C MOVZ W1, 0x1
	0x033CD140 MOV X2, X31
	0x033CD144 BL 0x337EDF0
	0x033CD148 LDR X8, [X20 + 0xC0]
	0x033CD14C MOVZ W9, 0xC0
	0x033CD150 STR W0, [X20 + 0xE8]
	0x033CD154 CMP X8, 0x0
	0x033CD158 MOVZ W8, 0xB8
	0x033CD15C CSEL X8, X8, X9, EQ
	0x033CD160 LDR X1, [X20, X8, LSL]
	0x033CD164 CBZ X1, 0x33CD178
	0x033CD168 MOV X0, X21
	0x033CD16C MOV X2, X31
	0x033CD170 BL 0x321B938
	0x033CD174 MOV X21, X0
	0x033CD178 ADRP X24, 0xD5A000
	0x033CD17C LDR X24, [X24 + 0x7C0]
	0x033CD180 LDR X22, [X20 + 0x90]
	0x033CD184 LDR X0, [X24]
	0x033CD188 LDR W8, [X0 + 0xE0]
	0x033CD18C CBNZ W8, 0x33CD194
	0x033CD190 BL 0x1C16DFC
	0x033CD194 LDR X0, [X23]
	0x033CD198 LDR W8, [X0 + 0xE0]
	0x033CD19C CBNZ W8, 0x33CD1A4
	0x033CD1A0 BL 0x1C16DFC
	0x033CD1A4 LDR X8, [X24]
	0x033CD1A8 ADD X23, X20, 0x108
	0x033CD1AC LDR X3, [X8 + 0xB8]
	0x033CD1B0 MOV X0, X22
	0x033CD1B4 MOV X1, X21
	0x033CD1B8 MOV X2, X23
	0x033CD1BC BL 0x1C8766C
	0x033CD1C0 TBNZ X0, 0x0, 0x33CD1F8
	0x033CD1C4 ADRP X8, 0xD26000
	0x033CD1C8 LDR X8, [X8 + 0x618]
	0x033CD1CC LDR X0, [X8]
	0x033CD1D0 MOVZ W1, 0x11
	0x033CD1D4 BL 0x1C16D6C
	0x033CD1D8 STR X0, [X23]
	0x033CD1DC LDR X0, [X24]
	0x033CD1E0 LDR W8, [X0 + 0xE0]
	0x033CD1E4 CBNZ W8, 0x33CD1F0
	0x033CD1E8 BL 0x1C16DFC
	0x033CD1EC LDR X0, [X24]
	0x033CD1F0 LDR X8, [X0 + 0xB8]
	0x033CD1F4 STR X31, [X8]
	0x033CD1F8 ADRP X22, 0xD2E000
	0x033CD1FC LDR X22, [X22 + 0x958]
	0x033CD200 LDR X0, [X22]
	0x033CD204 LDR W8, [X0 + 0xE0]
	0x033CD208 CBNZ W8, 0x33CD210
	0x033CD20C BL 0x1C16DFC
	0x033CD210 MOV W0, W31
	0x033CD214 BL 0x33C2CDC
	0x033CD218 ADRP X23, 0x1010000
	0x033CD21C LDRB W8, [X23 + 0x2DA]
	0x033CD220 MOV X21, X0
	0x033CD224 CBNZ W8, 0x33CD23C

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x1011000
	009 Move W8, [X21+668]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0xD60000
	017 Move X0, [X0+2680]
	018 Call 0x1C17CF4
	019 Move X0, 0xD58000
	020 Move X0, [X0+3736]
	021 Call 0x1C17CF4
	022 Move X0, 0xD27000
	023 Move X0, [X0+1728]
	024 Call 0x1C17CF4
	025 Move X0, 0xD60000
	026 Move X0, [X0+2664]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+668], W8
	030 Compare X19, 0
	031 JumpIfEqual {81}
	032 Move X8, [X20]
	033 Compare X8, 0
	034 JumpIfEqual {93}
	035 Move X23, 0xD60000
	036 Move X23, [X23+2680]
	037 Move X20, 0xD27000
	038 Move X20, [X20+1728]
	039 Move X22, 0xD58000
	040 Move X0, [X23]
	041 Move X21, 0xD60000
	042 Move X22, [X22+3736]
	043 Move X21, [X21+2664]
	044 Add X1, X31, 8
	045 Move [X31+8], X8
	046 Call 0x1C17E04
	047 Move X8, [X20]
	048 Move X20, X0
	049 Move W9, [X8+224]
	050 Compare W9, 0
	051 JumpIfNotEqual {54}
	052 Move X0, X8
	053 Call 0x1C17DFC
	054 Move X0, X20
	055 Move X1, X31
	056 Call Type.GetTypeHandle, X0
	057 Move X8, [X23]
	058 Move [X31], X0
	059 Add X1, X31, 0
	060 Move X0, X8
	061 Call 0x1C17E04
	062 Move X8, [X22]
	063 Move X20, X0
	064 Move X1, X31
	065 Move X0, X8
	066 Call Type.GetTypeFromHandle, X0
	067 Move X1, [X21]
	068 Move X3, X0
	069 Move X0, X19
	070 Move X2, X20
	071 Move X4, X31
	072 Call SerializationInfo.AddValue, X0, X1, X2, X3
	073 Move X20, [X31+48]
	074 Move X19, [X31+56]
	075 Move X22, [X31+32]
	076 Move X21, [X31+40]
	077 Move X30, [X31+16]
	078 Move X23, [X31+24]
	079 Add X31, X31, 64
	080 Return 
	081 Move X0, 0xD2C000
	082 Move X0, [X0+1320]
	083 Call 0x1C17D08
	084 Call 0x1C17F10
	085 Move X19, X0
	086 Move X0, 0xD51000
	087 Move X0, [X0+728]
	088 Call 0x1C17D08
	089 Move X1, X0
	090 Move X0, X19
	091 Move X2, X31
	092 Call ArgumentNullException..ctor, X0, X1
	093 Move X0, 0xD51000
	094 Move X0, [X0+736]
	095 Call 0x1C17D08
	096 Call 0x1C17F10
	097 Move X19, X0
	098 Move X0, 0xD60000
	099 Move X0, [X0+2600]
	100 Call 0x1C17D08
	101 Move X1, X0
	102 Move X0, X19
	103 Move X2, X31
	104 Call SerializationException..ctor, X0, X1
	105 Move X0, 0xD60000
	106 Move X0, [X0+2688]
	107 Call 0x1C17D08
	108 Move X1, X0
	109 Move X0, X19
	110 Call 0x1C17DEC

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x033CD228 ADRP X0, 0xD2E000
	0x033CD22C LDR X0, [X0 + 0x958]
	0x033CD230 BL 0x1C16CF4
	0x033CD234 MOVZ W8, 0x1
	0x033CD238 STRB W8, [X23 + 0x2DA]
	0x033CD23C LDR X0, [X22]
	0x033CD240 LDR W8, [X0 + 0xE0]
	0x033CD244 CBNZ W8, 0x33CD250
	0x033CD248 BL 0x1C16DFC
	0x033CD24C LDR X0, [X22]
	0x033CD250 ADRP X9, 0xD55000
	0x033CD254 LDR X8, [X0 + 0xB8]
	0x033CD258 LDR X9, [X9 + 0xCC8]
	0x033CD25C LDR X23, [X8 + 0x20]
	0x033CD260 LDR X0, [X9]
	0x033CD264 BL 0x1C16F10
	0x033CD268 MOV X22, X0
	0x033CD26C MOV X1, X21
	0x033CD270 MOV X2, X23
	0x033CD274 MOV X3, X31
	0x033CD278 BL 0x32E64DC
	0x033CD27C LDR X0, [X20 + 0x10]
	0x033CD280 STR X22, [X20 + 0x60]
	0x033CD284 CBZ X0, 0x33CD4F8
	0x033CD288 MOVZ W1, 0x5
	0x033CD28C BL 0x33CD6AC
	0x033CD290 MOV X8, X0
	0x033CD294 LDR X0, [X20 + 0x10]
	0x033CD298 STR X8, [X20 + 0x48]
	0x033CD29C CBZ X0, 0x33CD4FC
	0x033CD2A0 MOVZ W1, 0x1
	0x033CD2A4 BL 0x33CD6AC
	0x033CD2A8 LDR X8, [X20 + 0x48]
	0x033CD2AC STR X0, [X20 + 0x50]
	0x033CD2B0 CBNZ X8, 0x33CD2F0
	0x033CD2B4 LDR X0, [X20 + 0x10]
	0x033CD2B8 CBZ X0, 0x33CD50C
	0x033CD2BC MOVZ W1, 0xC
	0x033CD2C0 BL 0x33CD6AC
	0x033CD2C4 MOV X21, X0
	0x033CD2C8 LDR X0, [X20 + 0x10]
	0x033CD2CC STR X21, [X20 + 0x48]
	0x033CD2D0 CBZ X0, 0x33CD510
	0x033CD2D4 MOVZ W1, 0x7
	0x033CD2D8 BL 0x33CD6AC
	0x033CD2DC MOV X1, X0
	0x033CD2E0 MOV X0, X21
	0x033CD2E4 MOV X2, X31
	0x033CD2E8 BL 0x321B938
	0x033CD2EC STR X0, [X20 + 0x48]
	0x033CD2F0 LDR X0, [X20 + 0x10]
	0x033CD2F4 CBZ X0, 0x33CD500
	0x033CD2F8 MOVZ W1, 0x10
	0x033CD2FC BL 0x33CD6AC
	0x033CD300 STR X0, [X20 + 0x38]
	0x033CD304 CBNZ X0, 0x33CD31C
	0x033CD308 LDR X0, [X20 + 0x10]
	0x033CD30C CBZ X0, 0x33CD514
	0x033CD310 MOVZ W1, 0x14
	0x033CD314 BL 0x33CD6AC
	0x033CD318 STR X0, [X20 + 0x38]
	0x033CD31C LDR X0, [X20 + 0x10]
	0x033CD320 CBZ X0, 0x33CD504

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x1011000
	009 Move W8, [X21+669]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xD60000
	017 Move X0, [X0+2680]
	018 Call 0x1C17CF4
	019 Move X0, 0xD27000
	020 Move X0, [X0+1728]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+669], W8
	024 Compare X19, 0
	025 JumpIfEqual {54}
	026 Move X23, 0xD60000
	027 Move X23, [X23+2680]
	028 Move X8, [X20]
	029 Move X22, 0xD27000
	030 Add X1, X31, 8
	031 Move X0, [X23]
	032 Move X22, [X22+1728]
	033 Move [X31+8], X8
	034 Call 0x1C17E04
	035 Call 0x1C26764
	036 Move X21, X0
	037 Move X0, X19
	038 Call 0x1C26764
	039 Move X8, [X22]
	040 Move X22, X0
	041 Move W9, [X8+224]
	042 Compare W9, 0
	043 JumpIfNotEqual {46}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X0, X21
	047 Move X1, X22
	048 Move X2, X31
	049 Call Type.op_Inequality, X0, X1
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {55}
	054 Move W0, W31
	055 Move X8, [X19]
	056 Move X1, [X23]
	057 Move X8, [X8+64]
	058 Move X9, [X1+64]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X20, [X20]
	061 Move X0, X19
	062 Call 0x1C17E08
	063 Move X8, [X0]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 NotImplemented "Instruction CSET not yet implemented."
	066 Move X20, [X31+48]
	067 Move X19, [X31+56]
	068 Move X22, [X31+32]
	069 Move X21, [X31+40]
	070 Move X30, [X31+16]
	071 Move X23, [X31+24]
	072 Add X31, X31, 64
	073 Return X0
	074 Move X0, X19
	075 Call 0x1C181E0

Method: System.Int32 GetHashCode()

Disassembly:
	0x033CD324 MOVZ W1, 0xD
	0x033CD328 BL 0x33CD6AC

ISIL:
	001 Move W0, [X0]
	002 Return X0

Method: System.Reflection.TypeAttributes GetAttributes(System.RuntimeType type)

Disassembly:
	0x033CD32C STR X0, [X20 + 0x40]

ISIL:
	001 Call 0x1C3E7C8
	002 Return X0

Method: System.Int32 GetMetadataToken(System.RuntimeType type)

Disassembly:
	0x033CD330 ADRP X8, 0xD5F000

ISIL:
	001 Call 0x1C3E728
	002 Return X0

Method: System.Int32 GetToken(System.RuntimeType type)

Disassembly:
	0x033CD334 LDR X0, [X20 + 0x58]

ISIL:
	001 Call 0x1C3E728
	002 Return X0

Method: System.Type GetGenericTypeDefinition_impl(System.RuntimeType type)

Disassembly:
	0x033CD338 LDR X8, [X8 + 0xB10]

ISIL:
	001 Call 0x1C3E99C
	002 Return X0

Method: System.Type GetGenericTypeDefinition(System.RuntimeType type)

Disassembly:
	0x033CD33C LDR X1, [X8]

ISIL:
	001 Call 0x1C3E99C
	002 Return X0

Method: System.Boolean IsPrimitive(System.RuntimeType type)

Disassembly:
	0x033CD340 MOV X2, X31
	0x033CD344 BL 0x321BA08
	0x033CD348 TBNZ X0, 0x0, 0x33CD3C0
	0x033CD34C ADRP X8, 0xD5F000
	0x033CD350 LDR X0, [X20 + 0x58]
	0x033CD354 LDR X8, [X8 + 0x7C8]
	0x033CD358 LDR X1, [X8]
	0x033CD35C MOV X2, X31
	0x033CD360 BL 0x321BA08
	0x033CD364 TBNZ X0, 0x0, 0x33CD3C0
	0x033CD368 LDR X0, [X20 + 0x58]
	0x033CD36C CBZ X0, 0x33CD38C
	0x033CD370 ADRP X8, 0xD5F000
	0x033CD374 LDR X8, [X8 + 0x7C0]

ISIL:
	001 Move [X31-16], X30
	002 Call 0x1C3E770
	003 Subtract W8, W0, 2
	004 And W8, W8, 255
	005 NotImplemented "Instruction CMP not yet implemented."
	006 And W8, W0, 254
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Return X0
	011 Move W0, 1
	012 Move X30, [X31+16]
	013 Return X0

Method: System.Boolean IsByRef(System.RuntimeType type)

Disassembly:
	0x033CD37C MOV X2, X31
	0x033CD380 BL 0x3226F64
	0x033CD384 TBNZ X0, 0x0, 0x33CD3C0
	0x033CD388 LDR X0, [X20 + 0x58]
	0x033CD38C ADRP X8, 0xD5F000
	0x033CD390 LDR X8, [X8 + 0xB08]
	0x033CD394 LDR X1, [X8]

ISIL:
	001 Move [X31-16], X30
	002 Call 0x1C3E770
	003 And W8, W0, 255
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CSET not yet implemented."
	006 Move X30, [X31+16]
	007 Return X0

Method: System.Boolean IsPointer(System.RuntimeType type)

Disassembly:
	0x033CD398 MOV X2, X31
	0x033CD39C BL 0x321BA08
	0x033CD3A0 TBNZ X0, 0x0, 0x33CD3C0
	0x033CD3A4 ADRP X8, 0xD5F000
	0x033CD3A8 LDR X0, [X20 + 0x58]
	0x033CD3AC LDR X8, [X8 + 0xAF0]
	0x033CD3B0 LDR X1, [X8]

ISIL:
	001 Move [X31-16], X30
	002 Call 0x1C3E770
	003 And W8, W0, 255
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CSET not yet implemented."
	006 Move X30, [X31+16]
	007 Return X0

Method: System.Boolean IsArray(System.RuntimeType type)

Disassembly:
	0x033CD3B4 MOV X2, X31
	0x033CD3B8 BL 0x321BA08
	0x033CD3BC TBZ X0, 0x0, 0x33CD43C
	0x033CD3C0 ADRP X8, 0xD5F000
	0x033CD3C4 LDR X8, [X8 + 0xAD8]
	0x033CD3C8 LDR X8, [X8]
	0x033CD3CC STR X8, [X20 + 0x28]
	0x033CD3D0 LDR X0, [X20 + 0x10]
	0x033CD3D4 CBZ X0, 0x33CD508
	0x033CD3D8 MOVZ W1, 0xA

ISIL:
	001 Move [X31-16], X30
	002 Call 0x1C3E770
	003 And W8, W0, 255
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CSET not yet implemented."
	006 NotImplemented "Instruction CMP not yet implemented."
	007 NotImplemented "Instruction CSET not yet implemented."
	008 Or W0, W9, W8
	009 Move X30, [X31+16]
	010 Return X0

Method: System.Boolean IsSzArray(System.RuntimeType type)

Disassembly:
	0x033CD3DC BL 0x33CD6AC
	0x033CD3E0 STR X0, [X20 + 0xC8]
	0x033CD3E4 MOV X0, X20
	0x033CD3E8 BL 0x33CD79C
	0x033CD3EC LDRB W8, [X20 + 0xEC]
	0x033CD3F0 CBZ W8, 0x33CD404
	0x033CD3F4 LDR X1, [X20 + 0x48]

ISIL:
	001 Move [X31-16], X30
	002 Call 0x1C3E770
	003 And W8, W0, 255
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CSET not yet implemented."
	006 Move X30, [X31+16]
	007 Return X0

Method: System.Boolean HasElementType(System.RuntimeType type)

Disassembly:
	0x033CD3F8 MOV X0, X20
	0x033CD3FC BL 0x33CCB74
	0x033CD400 STR X31, [X20 + 0x18]
	0x033CD404 MOVZ W8, 0x1
	0x033CD408 MOV X21, X31
	0x033CD40C STRB W8, [X20 + 0xA0]
	0x033CD410 LDRB W8, [X31 + 0xC]
	0x033CD414 CBZ W8, 0x33CD424
	0x033CD418 MOV X0, X19
	0x033CD41C MOV X1, X31
	0x033CD420 BL 0x33E14E4
	0x033CD424 CBNZ X21, 0x33CD48C
	0x033CD428 LDP X20, X19, [X31 + 0x30]
	0x033CD42C LDP X22, X21, [X31 + 0x20]
	0x033CD430 LDP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Call 0x1C3E770
	003 And W8, W0, 255
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move W0, 1
	007 Subtract W8, W0, 15
	008 And W8, W8, 255
	009 NotImplemented "Instruction CMP not yet implemented."
	010 NotImplemented "Instruction CSET not yet implemented."
	011 Move X30, [X31+16]
	012 Return X0

Method: System.Reflection.CorElementType GetCorElementType(System.RuntimeType type)

Disassembly:
	0x033CD378 LDR X1, [X8]

ISIL:
	001 Call 0x1C3E770
	002 Return X0

Method: System.Boolean HasInstantiation(System.RuntimeType type)

Disassembly:
	0x033CD434 LDR X30, [X31], #0x40

ISIL:
	001 Call 0x1C3E544
	002 Return X0

Method: System.Boolean IsComObject(System.RuntimeType type)

Disassembly:
	0x033CD438 RET

ISIL:
	001 Call 0x1C25408
	002 Return X0

Method: System.Boolean IsInstanceOfType(System.RuntimeType type, System.Object o)

Disassembly:
	0x033CD43C ADRP X8, 0xD5F000

ISIL:
	001 Call 0x1C3E6D8
	002 Return X0

Method: System.Boolean HasReferences(System.RuntimeType type)

Disassembly:
	0x033CD440 LDR X0, [X20 + 0x58]

ISIL:
	001 Call 0x1C3E594
	002 Return X0

Method: System.Boolean IsComObject(System.RuntimeType type, System.Boolean isGenericCOM)

Disassembly:
	0x033CD444 LDR X8, [X8 + 0xB00]
	0x033CD448 LDR X1, [X8]
	0x033CD44C MOV X2, X31
	0x033CD450 BL 0x321BA08

ISIL:
	001 Move TEMP, X1
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfNotEqual {7}
	005 Move W0, W31
	006 Return X0
	007 Call 0x1C25408
	008 Return X0

Method: System.Boolean IsContextful(System.RuntimeType type)

Disassembly:
	0x033CD454 TBZ X0, 0x0, 0x33CD464
	0x033CD458 ADRP X8, 0xD5F000
	0x033CD45C LDR X8, [X8 + 0xAF8]
	0x033CD460 B 0x33CD3C8
	0x033CD464 ADRP X8, 0xD5F000
	0x033CD468 LDR X0, [X20 + 0x58]
	0x033CD46C LDR X8, [X8 + 0xAE0]
	0x033CD470 LDR X1, [X8]
	0x033CD474 MOV X2, X31
	0x033CD478 BL 0x321BA08
	0x033CD47C TBZ X0, 0x0, 0x33CD3D0
	0x033CD480 ADRP X8, 0xD5F000
	0x033CD484 LDR X8, [X8 + 0xAE8]
	0x033CD488 B 0x33CD3C8
	0x033CD48C MOV X0, X21
	0x033CD490 BL 0x1C16F18
	0x033CD494 ADRP X0, 0xD54000
	0x033CD498 LDR X0, [X0 + 0x7A8]
	0x033CD49C BL 0x1C16D08
	0x033CD4A0 BL 0x1C16F10
	0x033CD4A4 MOV X21, X0
	0x033CD4A8 ADRP X0, 0xD5F000
	0x033CD4AC LDR X0, [X0 + 0xB18]
	0x033CD4B0 BL 0x1C16D08
	0x033CD4B4 MOV X1, X0
	0x033CD4B8 MOV X0, X21
	0x033CD4BC MOV X2, X31
	0x033CD4C0 BL 0x32E16BC
	0x033CD4C4 ADRP X0, 0xD5F000
	0x033CD4C8 LDR X0, [X0 + 0xB20]
	0x033CD4CC BL 0x1C16D08
	0x033CD4D0 MOV X1, X0
	0x033CD4D4 MOV X0, X21
	0x033CD4D8 BL 0x1C16DEC
	0x033CD4DC BL 0x1C16F20
	0x033CD4E0 BL 0x1C16F20
	0x033CD4E4 BL 0x1C16F20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1011000
	007 Move X20, 0xD5F000
	008 Move X21, 0xD27000
	009 Move W8, [X22+670]
	010 Move X20, [X20+1152]
	011 Move X21, [X21+1728]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xD5F000
	018 Move X0, [X0+1152]
	019 Call 0x1C17CF4
	020 Move X0, 0xD27000
	021 Move X0, [X0+1728]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+670], W8
	025 Move X0, [X21]
	026 Move X20, [X20]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Call Type.GetTypeFromHandle, X0
	034 Compare X0, 0
	035 JumpIfEqual {46}
	036 Move X8, [X0]
	037 Move X1, X19
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move X3, [X8+680]
	043 Move X2, [X8+688]
	044 Move X30, [X31+48]
	045 CallNoReturn X3
	046 Call 0x1C17F20

Method: System.Boolean IsEquivalentTo(System.RuntimeType rtType1, System.RuntimeType rtType2)

Disassembly:
	0x033CD4E8 BL 0x1C16F20
	0x033CD4EC BL 0x1C16F20

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Boolean IsInterface(System.RuntimeType type)

Disassembly:
	0x033CD4F0 BL 0x1C16F20
	0x033CD4F4 BL 0x1C16F20
	0x033CD4F8 BL 0x1C16F20
	0x033CD4FC BL 0x1C16F20
	0x033CD500 BL 0x1C16F20
	0x033CD504 BL 0x1C16F20
	0x033CD508 BL 0x1C16F20
	0x033CD50C BL 0x1C16F20

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {11}
	004 Move X1, X31
	005 Call Type.get_Attributes, X0
	006 Move W0, W0
	007 ShiftRight W0, 5
	008 And W0, W0, 31
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

Method: System.Int32 GetArrayRank(System.RuntimeType type)

Disassembly:
	0x033CD510 BL 0x1C16F20

ISIL:
	001 Call 0x1C3E70C
	002 Return X0

Method: System.Reflection.RuntimeAssembly GetAssembly(System.RuntimeType type)

Disassembly:
	0x033CD514 BL 0x1C16F20

ISIL:
	001 Call 0x1C3E78C
	002 Return X0

Method: System.RuntimeType GetElementType(System.RuntimeType type)

Disassembly:
	0x033CD518 B 0x33CD5F0

ISIL:
	001 Call 0x1C3E80C
	002 Return X0

Method: System.Reflection.RuntimeModule GetModule(System.RuntimeType type)

Disassembly:
	0x033CD51C B 0x33CD5F0

ISIL:
	001 Call 0x1C3E7AC
	002 Return X0

Method: System.Boolean IsGenericVariable(System.RuntimeType type)

Disassembly:
	0x033CD520 B 0x33CD5F0

ISIL:
	001 Call 0x1C3B09C
	002 Return X0

Method: System.RuntimeType GetBaseType(System.RuntimeType type)

Disassembly:
	0x033CD524 B 0x33CD5F0

ISIL:
	001 Call 0x1C3E7DC
	002 Return X0

Method: System.Boolean CanCastTo(System.RuntimeType type, System.RuntimeType target)

Disassembly:
	0x033CD528 B 0x33CD5F0
	0x033CD52C B 0x33CD5F0
	0x033CD530 B 0x33CD5F0
	0x033CD534 B 0x33CD5F0

ISIL:
	001 Move X8, X0
	002 Move X0, X1
	003 Move X1, X8
	004 Call 0x1C3E708
	005 Return X0

Method: System.Boolean type_is_assignable_from(System.Type a, System.Type b)

Disassembly:
	0x033CD538 B 0x33CD5F0

ISIL:
	001 Call 0x1C3E708
	002 Return X0

Method: System.Boolean IsGenericTypeDefinition(System.RuntimeType type)

Disassembly:
	0x033CD53C B 0x33CD5F0

ISIL:
	001 Call 0x1C3E6AC
	002 Return X0

Method: System.IntPtr GetGenericParameterInfo(System.RuntimeType type)

Disassembly:
	0x033CD540 B 0x33CD5F0

ISIL:
	001 Call 0x1C3E73C
	002 Return X0

Method: System.Boolean IsSubclassOf(System.RuntimeType childType, System.RuntimeType baseType)

Disassembly:
	0x033CD544 B 0x33CD5F0
	0x033CD548 B 0x33CD5F0
	0x033CD54C B 0x33CD5F0
	0x033CD550 B 0x33CD5F0
	0x033CD554 B 0x33CD5F0
	0x033CD558 B 0x33CD5F0
	0x033CD55C B 0x33CD5F0
	0x033CD560 B 0x33CD5F0

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {11}
	004 Compare X1, 0
	005 JumpIfEqual {11}
	006 Move X0, [X0+16]
	007 Move X1, [X1+16]
	008 Move X30, [X31+16]
	009 Call 0x1C3E5B4
	010 Return X0
	011 Call 0x1C17F20

Method: System.Boolean is_subclass_of(System.IntPtr childType, System.IntPtr baseType)

Disassembly:
	0x033CD564 B 0x33CD5F0

ISIL:
	001 Call 0x1C3E5B4
	002 Return X0

Method: System.RuntimeType internal_from_name(System.String name, ref System.Threading.StackCrawlMark stackMark, System.Reflection.Assembly callerAssembly, System.Boolean throwOnError, System.Boolean ignoreCase, System.Boolean reflectionOnly)

Disassembly:
	0x033CD568 B 0x33CD5F0
	0x033CD56C B 0x33CD5F0
	0x033CD570 B 0x33CD5F0
	0x033CD574 B 0x33CD5F0

ISIL:
	001 And W3, W3, 1
	002 And W4, W4, 1
	003 And W5, W5, 1
	004 Call 0x1C3E868
	005 Return X0

Method: System.RuntimeType GetTypeByName(System.String typeName, System.Boolean throwOnError, System.Boolean ignoreCase, System.Boolean reflectionOnly, ref System.Threading.StackCrawlMark stackMark, System.Boolean loadTypeFromPartialName)

Disassembly:
	0x033CD578 B 0x33CD5F0
	0x033CD57C B 0x33CD5F0
	0x033CD580 B 0x33CD5F0
	0x033CD584 B 0x33CD5F0
	0x033CD588 B 0x33CD5F0
	0x033CD58C B 0x33CD5F0
	0x033CD590 B 0x33CD5F0
	0x033CD594 B 0x33CD5F0
	0x033CD598 B 0x33CD5F0
	0x033CD59C B 0x33CD5F0
	0x033CD5A0 B 0x33CD5F0
	0x033CD5A4 B 0x33CD5F0
	0x033CD5A8 B 0x33CD5F0
	0x033CD5AC B 0x33CD5F0
	0x033CD5B0 B 0x33CD5F0
	0x033CD5B4 B 0x33CD5F0
	0x033CD5B8 B 0x33CD5F0
	0x033CD5BC B 0x33CD5F0
	0x033CD5C0 B 0x33CD5F0
	0x033CD5C4 B 0x33CD5F0
	0x033CD5C8 B 0x33CD5F0
	0x033CD5CC B 0x33CD5F0
	0x033CD5D0 B 0x33CD5F0
	0x033CD5D4 B 0x33CD5F0
	0x033CD5D8 B 0x33CD5F0
	0x033CD5DC B 0x33CD5F0
	0x033CD5E0 B 0x33CD5F0
	0x033CD5E4 B 0x33CD5F0
	0x033CD5E8 B 0x33CD5F0
	0x033CD5EC B 0x33CD5F0
	0x033CD5F0 MOV X21, X0
	0x033CD5F4 CMP W1, 0x1
	0x033CD5F8 MOVZ W23, 0x1
	0x033CD5FC B.NE 0x33CD624
	0x033CD600 MOV X0, X21
	0x033CD604 BL 0x3EB1AD0
	0x033CD608 LDR X22, [X0]
	0x033CD60C BL 0x3EB1AE0
	0x033CD610 MOVZ W8, 0x1
	0x033CD614 STRB W8, [X20 + 0xA0]
	0x033CD618 CBZ X22, 0x33CD000
	0x033CD61C MOV X0, X22
	0x033CD620 BL 0x1C16F18
	0x033CD624 STRB W23, [X20 + 0xA0]
	0x033CD628 CMP W1, W23
	0x033CD62C B.NE 0x33CD648
	0x033CD630 MOV X0, X21
	0x033CD634 BL 0x3EB1AD0
	0x033CD638 LDR X20, [X0]
	0x033CD63C BL 0x3EB1AE0
	0x033CD640 MOV X21, X20
	0x033CD644 B 0x33CD410
	0x033CD648 MOV X20, X31
	0x033CD64C B 0x33CD674
	0x033CD650 B 0x33CD660
	0x033CD654 MOVZ W8, 0x1
	0x033CD658 STRB W8, [X20 + 0xA0]
	0x033CD65C CBNZ X22, 0x33CD668
	0x033CD660 MOV X21, X0
	0x033CD664 B 0x33CD628
	0x033CD668 MOV X0, X22
	0x033CD66C BL 0x1C16F18
	0x033CD670 MOV X21, X0
	0x033CD674 LDRB W8, [X31 + 0xC]
	0x033CD678 CBZ W8, 0x33CD688
	0x033CD67C MOV X0, X19
	0x033CD680 MOV X1, X31
	0x033CD684 BL 0x33E14E4
	0x033CD688 CBNZ X20, 0x33CD694
	0x033CD68C MOV X0, X21
	0x033CD690 BL 0x1D2C690
	0x033CD694 MOV X0, X20
	0x033CD698 BL 0x1C16F18
	0x033CD69C BL 0x1990590
	0x033CD6A0 MOV X21, X0
	0x033CD6A4 MOVZ W23, 0x1
	0x033CD6A8 B 0x33CD628
	0x033CD6AC STR X30, [X31 - 0x20]!
	0x033CD6B0 STP X20, X19, [X31 + 0x10]
	0x033CD6B4 CMP W1, 0x189
	0x033CD6B8 B.HI 0x33CD72C
	0x033CD6BC LDR W8, [X0 + 0x18]
	0x033CD6C0 MOV X19, X0
	0x033CD6C4 CMP W8, W1
	0x033CD6C8 B.LT 0x33CD72C
	0x033CD6CC LDP W9, W12, [X19 + 0x28]
	0x033CD6D0 LDP W10, W11, [X19 + 0x10]
	0x033CD6D4 LDR X8, [X19 + 0x20]
	0x033CD6D8 ADD W9, W10, W9
	0x033CD6DC CMP W9, 0x0
	0x033CD6E0 CINC W10, W9, LT
	0x033CD6E4 AND W10, W10, 0xFFFFFFFE
	0x033CD6E8 SUB W10, W9, W10
	0x033CD6EC CMP W10, 0x1
	0x033CD6F0 MADD W9, W12, W11, W9
	0x033CD6F4 CINC W20, W9, EQ
	0x033CD6F8 ADD W2, W20, W1, 0x1, LSL
	0x033CD6FC MOV X1, X8
	0x033CD700 BL 0x33D2BFC
	0x033CD704 ORN W8, W31, W0, 0x0
	0x033CD708 ANDS W31, W8, 0xFFFF
	0x033CD70C B.EQ 0x33CD72C
	0x033CD710 LDR W8, [X19 + 0x18]
	0x033CD714 LDR X1, [X19 + 0x20]
	0x033CD718 ADD W9, W20, W0, SXTH
	0x033CD71C LDP X20, X19, [X31 + 0x10]
	0x033CD720 ADD W2, W9, W8, 0x1, LSL
	0x033CD724 LDR X30, [X31], #0x20
	0x033CD728 B 0x33D2C4C
	0x033CD72C LDP X20, X19, [X31 + 0x10]
	0x033CD730 MOV X0, X31
	0x033CD734 LDR X30, [X31], #0x20
	0x033CD738 RET
	0x033CD73C STR X30, [X31 - 0x10]!
	0x033CD740 CMP W1, 0x20
	0x033CD744 B.HI 0x33CD754
	0x033CD748 LDR W8, [X0 + 0x14]
	0x033CD74C CMP W8, W1
	0x033CD750 B.GE 0x33CD75C
	0x033CD754 MOVN W0, 0x0
	0x033CD758 B 0x33CD794
	0x033CD75C LDR W9, [X0 + 0x10]
	0x033CD760 LDP W10, W11, [X0 + 0x28]
	0x033CD764 LDR X8, [X0 + 0x20]
	0x033CD768 ADD W9, W9, W10
	0x033CD76C CMP W9, 0x0
	0x033CD770 CINC W10, W9, LT
	0x033CD774 AND W10, W10, 0xFFFFFFFE
	0x033CD778 SUB W10, W9, W10
	0x033CD77C CMP W10, 0x1
	0x033CD780 MADD W9, W11, W1, W9
	0x033CD784 CINC W2, W9, EQ
	0x033CD788 MOV X1, X8
	0x033CD78C BL 0x33D2BFC
	0x033CD790 SXTH W0, W0
	0x033CD794 LDR X30, [X31], #0x10
	0x033CD798 RET
	0x033CD79C STR X30, [X31 - 0x30]!
	0x033CD7A0 STP X22, X21, [X31 + 0x10]
	0x033CD7A4 STP X20, X19, [X31 + 0x20]
	0x033CD7A8 ADRP X21, 0x1010000
	0x033CD7AC ADRP X20, 0xD5A000
	0x033CD7B0 LDRB W8, [X21 + 0x2A6]
	0x033CD7B4 LDR X20, [X20 + 0x7B8]
	0x033CD7B8 MOV X19, X0
	0x033CD7BC TBNZ X8, 0x0, 0x33CD7E0
	0x033CD7C0 ADRP X0, 0xD5A000
	0x033CD7C4 LDR X0, [X0 + 0x7B8]
	0x033CD7C8 BL 0x1C16CF4
	0x033CD7CC ADRP X0, 0xD5F000
	0x033CD7D0 LDR X0, [X0 + 0xB28]
	0x033CD7D4 BL 0x1C16CF4
	0x033CD7D8 MOVZ W8, 0x1
	0x033CD7DC STRB W8, [X21 + 0x2A6]
	0x033CD7E0 LDR X0, [X20]
	0x033CD7E4 LDR W8, [X0 + 0xE0]
	0x033CD7E8 CBNZ W8, 0x33CD7F0
	0x033CD7EC BL 0x1C16DFC
	0x033CD7F0 MOV W0, W31
	0x033CD7F4 BL 0x1C87668
	0x033CD7F8 CMP W0, 0x1
	0x033CD7FC B.LT 0x33CD830
	0x033CD800 ADD W21, W0, 0x1
	0x033CD804 LDR X0, [X19 + 0x60]
	0x033CD808 CBZ X0, 0x33CDA28
	0x033CD80C LDR X8, [X0]
	0x033CD810 LDP X9, X1, [X8 + 0x1C8]
	0x033CD814 BLR X9
	0x033CD818 MOV W1, W0
	0x033CD81C MOV X0, X19
	0x033CD820 BL 0x33CE2F0
	0x033CD824 SUB W21, W21, 0x1
	0x033CD828 CMP W21, 0x1
	0x033CD82C B.GT 0x33CD804
	0x033CD830 ADRP X8, 0xD5F000
	0x033CD834 LDR X8, [X8 + 0xB28]
	0x033CD838 MOV X0, X19
	0x033CD83C LDR X1, [X8]
	0x033CD840 BL 0x33CCB74
	0x033CD844 LDR X0, [X20]
	0x033CD848 LDR W8, [X0 + 0xE0]
	0x033CD84C CBNZ W8, 0x33CD854
	0x033CD850 BL 0x1C16DFC
	0x033CD854 MOVZ W0, 0x3E8
	0x033CD858 BL 0x1C87668
	0x033CD85C CMP W0, 0x0
	0x033CD860 B.LE 0x33CD90C
	0x033CD864 LDR X0, [X19 + 0x60]
	0x033CD868 CBZ X0, 0x33CDA28
	0x033CD86C LDR X8, [X0]
	0x033CD870 LDP X9, X1, [X8 + 0x1C8]
	0x033CD874 BLR X9
	0x033CD878 CMP W0, 0x1B
	0x033CD87C B.EQ 0x33CD8CC
	0x033CD880 MOV W1, W0
	0x033CD884 MOV X0, X19
	0x033CD888 BL 0x33CE2F0
	0x033CD88C LDR X0, [X20]
	0x033CD890 LDR W8, [X0 + 0xE0]
	0x033CD894 CBNZ W8, 0x33CD89C
	0x033CD898 BL 0x1C16DFC
	0x033CD89C MOVZ W0, 0x64
	0x033CD8A0 BL 0x1C87668
	0x033CD8A4 CMP W0, 0x1
	0x033CD8A8 B.LT 0x33CDA18
	0x033CD8AC LDR X0, [X19 + 0x60]
	0x033CD8B0 CBZ X0, 0x33CDA28
	0x033CD8B4 LDR X8, [X0]
	0x033CD8B8 LDP X9, X1, [X8 + 0x1C8]
	0x033CD8BC BLR X9
	0x033CD8C0 MOV W1, W0
	0x033CD8C4 CMP W0, 0x1B
	0x033CD8C8 B.NE 0x33CD884
	0x033CD8CC LDR X0, [X19 + 0x60]
	0x033CD8D0 CBZ X0, 0x33CDA28

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x1011000
	009 Move W8, [X24+671]
	010 Move X22, X4
	011 Move W23, W3
	012 Move W21, W2
	013 Move W19, W1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xD50000
	020 Move X0, [X0+1256]
	021 Call 0x1C17CF4
	022 Move X0, 0xD29000
	023 Move X0, [X0+632]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+671], W8
	027 Compare X20, 0
	028 JumpIfEqual {133}
	029 Move X8, 0xD29000
	030 Move X8, [X8+632]
	031 Move X0, X20
	032 Move X2, X31
	033 Move X8, [X8]
	034 Move X8, [X8+184]
	035 Move X1, [X8]
	036 Call String.op_Equality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {46}
	041 Move TEMP, X19
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfEqual {145}
	045 Move X21, X31
	046 Move TEMP, X23
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {97}
	050 Move W1, 44
	051 Move X0, X20
	052 Move X2, X31
	053 Call String.IndexOf, X0, X1
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move W8, [X20+16]
	056 Move W22, W0
	057 Subtract W8, W8, 1
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Add W1, W22, 1
	060 Move X0, X20
	061 Move X2, X31
	062 Call String.Substring, X0, X1
	063 Move X1, X31
	064 Call Assembly.ReflectionOnlyLoad, X0
	065 Move X23, X0
	066 Move X0, X20
	067 Move W1, W31
	068 Move W2, W22
	069 Move X3, X31
	070 Call String.Substring, X0, X1, X2
	071 Compare X23, 0
	072 JumpIfEqual {179}
	073 Move X8, [X23]
	074 Move X1, X0
	075 And W2, W19, 1
	076 And W3, W21, 1
	077 Move X9, [X8+632]
	078 Move X4, [X8+640]
	079 Move X0, X23
	080 NotImplemented "Instruction BLR not yet implemented."
	081 Move X21, X0
	082 Compare X0, 0
	083 JumpIfEqual {124}
	084 Move X9, 0xD50000
	085 Move X9, [X9+1256]
	086 Move X8, [X21]
	087 Move X1, [X9]
	088 Move W10, [X8+304]
	089 Move W9, [X1+304]
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move X8, [X8+200]
	092 Add X8, X8, X9
	093 NotImplemented "Instruction LDUR not yet implemented."
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move X0, X21
	096 Call 0x1C181E0
	097 And W3, W19, 1
	098 And W4, W21, 1
	099 Move X0, X20
	100 Move X1, X22
	101 Move X2, X31
	102 Move W5, W31
	103 Call 0x1C3E868
	104 Move X21, X0
	105 Move TEMP, X19
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfNotEqual {124}
	109 Move X8, 0xD50000
	110 Move X8, [X8+1256]
	111 Move X0, [X8]
	112 Move W8, [X0+224]
	113 Compare W8, 0
	114 JumpIfNotEqual {116}
	115 Call 0x1C17DFC
	116 Move X0, X21
	117 Move X1, X31
	118 Move X2, X31
	119 Call RuntimeType.op_Equality, X0, X1
	120 Move TEMP, X0
	121 And TEMP, TEMP, 1
	122 Compare TEMP, 1
	123 JumpIfEqual {180}
	124 Move X0, X21
	125 Move X20, [X31+48]
	126 Move X19, [X31+56]
	127 Move X22, [X31+32]
	128 Move X21, [X31+40]
	129 Move X24, [X31+16]
	130 Move X23, [X31+24]
	131 Move X30, [X31+64]
	132 Return X0
	133 Move X0, 0xD2C000
	134 Move X0, [X0+1320]
	135 Call 0x1C17D08
	136 Call 0x1C17F10
	137 Move X19, X0
	138 Move X0, 0xD59000
	139 Move X0, [X0+2416]
	140 Call 0x1C17D08
	141 Move X1, X0
	142 Move X0, X19
	143 Move X2, X31
	144 Call ArgumentNullException..ctor, X0, X1
	145 Move X0, 0xD59000
	146 Move X0, [X0+1208]
	147 Call 0x1C17D08
	148 Call 0x1C17F10
	149 Move X19, X0
	150 Move X0, 0xD60000
	151 Move X0, [X0+2696]
	152 Call 0x1C17D08
	153 Move X1, X0
	154 Move X0, X19
	155 Call TypeLoadException..ctor, X0, X1
	156 Move X0, 0xD2F000
	157 Move X0, [X0+1400]
	158 Call 0x1C17D08
	159 Call 0x1C17F10
	160 Move X19, X0
	161 Move X0, 0xD60000
	162 Move X0, [X0+2704]
	163 Call 0x1C17D08
	164 Move X20, X0
	165 Move X0, 0xD59000
	166 Move X0, [X0+2416]
	167 Call 0x1C17D08
	168 Move X2, X0
	169 Move X0, X19
	170 Move X1, X20
	171 Move X3, X31
	172 Call ArgumentException..ctor, X0, X1, X2
	173 Move X0, 0xD60000
	174 Move X0, [X0+2712]
	175 Call 0x1C17D08
	176 Move X1, X0
	177 Move X0, X19
	178 Call 0x1C17DEC
	179 Call 0x1C17F20
	180 Move X0, 0xD60000
	181 Move X0, [X0+2720]
	182 Call 0x1C17D08
	183 Move X19, X0
	184 Move X0, 0xD2F000
	185 Move X0, [X0+2480]
	186 Call 0x1C17D08
	187 Move X2, X0
	188 Move X0, X19
	189 Move X1, X20
	190 Move X3, X31
	191 Call String.Concat, X0, X1, X2
	192 Move X19, X0
	193 Move X0, 0xD59000
	194 Move X0, [X0+1208]
	195 Call 0x1C17D08
	196 Call 0x1C17F10
	197 Move X1, X19
	198 Move X20, X0
	199 Call TypeLoadException..ctor, X0, X1
	200 Move X0, 0xD60000
	201 Move X0, [X0+2712]
	202 Call 0x1C17D08
	203 Move X1, X0
	204 Move X0, X20
	205 Call 0x1C17DEC
	206 NotImplemented "Instruction CMP not yet implemented."
	207 Move X20, X0
	208 Move X0, X20
	209 Call 0x3EB2AD0
	210 Move X20, X0
	211 Move X0, 0xD2D000
	212 Move X0, [X0+3264]
	213 Call 0x1C17D08
	214 Move X8, [X20]
	215 Move X1, [X8]
	216 Call 0x1C18270
	217 Move TEMP, X0
	218 And TEMP, TEMP, 1
	219 Compare TEMP, 1
	220 JumpIfNotEqual {229}
	221 Move X20, [X20]
	222 Call 0x3EB2AE0
	223 Move TEMP, X19
	224 And TEMP, TEMP, 1
	225 Compare TEMP, 1
	226 JumpIfNotEqual {45}
	227 Move X0, X20
	228 Call 0x1C17F18
	229 Move W0, 8
	230 Call 0x3EB2AF0
	231 Move X8, [X20]
	232 Move [X0], X8
	233 Move X1, 0xAE8000
	234 Add X1, X1, 3672
	235 Move X2, X31
	236 Call 0x3EB2B00
	237 Move X20, X0
	238 Call 0x3EB2AE0
	239 Move X0, X20
	240 Call 0x1D2D690
	241 Call 0x1991590

