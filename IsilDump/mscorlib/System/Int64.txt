Type: System.Int64

Method: System.Int32 CompareTo(System.Object value)

Disassembly:
	0x0337D7F0 LDRB W8, [X23 + 0xF7A]
	0x0337D7F4 MOV X19, X3
	0x0337D7F8 MOV X21, X2
	0x0337D7FC MOV W20, W1
	0x0337D800 MOV X22, X0
	0x0337D804 TBNZ X8, 0x0, 0x337D81C
	0x0337D808 ADRP X0, 0xDAB000
	0x0337D80C LDR X0, [X0 + 0x78]
	0x0337D810 BL 0x1C16CF4
	0x0337D814 MOVZ W8, 0x1
	0x0337D818 STRB W8, [X23 + 0xF7A]
	0x0337D81C MOV W0, W20
	0x0337D820 MOV X1, X31
	0x0337D824 BL 0x333B33C
	0x0337D828 CBZ X22, 0x337D8B4
	0x0337D82C ADRP X23, 0x105C000
	0x0337D830 ADRP X24, 0xDAB000
	0x0337D834 LDRB W8, [X23 + 0x762]
	0x0337D838 LDR X24, [X24 + 0x78]
	0x0337D83C CBNZ W8, 0x337D854
	0x0337D840 ADRP X0, 0xD9D000
	0x0337D844 LDR X0, [X0 + 0x290]
	0x0337D848 BL 0x1C16CF4
	0x0337D84C MOVZ W8, 0x1
	0x0337D850 STRB W8, [X23 + 0x762]
	0x0337D854 MOV X0, X22
	0x0337D858 MOV X1, X31
	0x0337D85C BL 0x3225708
	0x0337D860 LDR W22, [X22 + 0x10]
	0x0337D864 MOV X23, X0
	0x0337D868 MOV X0, X21
	0x0337D86C MOV X1, X31
	0x0337D870 BL 0x333ACEC
	0x0337D874 LDR X8, [X24]
	0x0337D878 MOV X21, X0
	0x0337D87C LDR W9, [X8 + 0xE0]
	0x0337D880 CBNZ W9, 0x337D88C
	0x0337D884 MOV X0, X8
	0x0337D888 BL 0x1C16DFC
	0x0337D88C MOV X0, X23
	0x0337D890 MOV X1, X22
	0x0337D894 MOV W2, W20
	0x0337D898 MOV X3, X21
	0x0337D89C MOV X4, X19
	0x0337D8A0 LDP X20, X19, [X31 + 0x30]
	0x0337D8A4 LDP X22, X21, [X31 + 0x20]
	0x0337D8A8 LDP X24, X23, [X31 + 0x10]
	0x0337D8AC LDR X30, [X31], #0x40
	0x0337D8B0 B 0x337D658
	0x0337D8B4 STR X31, [X19]
	0x0337D8B8 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1060000
	006 Move W8, [X21+3952]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD79000
	014 Move X0, [X0+2656]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3952], W8
	018 Compare X20, 0
	019 JumpIfEqual {33}
	020 Move X8, 0xD79000
	021 Move X8, [X8+2656]
	022 Move X9, [X20]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X0, X20
	026 Call 0x1C17E08
	027 Move X8, [X0]
	028 Move X9, [X19]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move TEMP, 0
	031 Not TEMP
	032 Move W0, TEMP
	033 Move W0, 1
	034 NotImplemented "Instruction CSET not yet implemented."
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return X0
	040 Move X0, 0xD7F000
	041 Move X0, [X0+1400]
	042 Call 0x1C17D08
	043 Call 0x1C17F10
	044 Move X19, X0
	045 Move X0, 0xDAE000
	046 Move X0, [X0+3752]
	047 Call 0x1C17D08
	048 Move X1, X0
	049 Move X0, X19
	050 Move X2, X31
	051 Call ArgumentException..ctor, X0, X1
	052 Move X0, 0xDAE000
	053 Move X0, [X0+3760]
	054 Call 0x1C17D08
	055 Move X1, X0
	056 Move X0, X19
	057 Call 0x1C17DEC

Method: System.Int32 CompareTo(System.Int64 value)

Disassembly:
	0x0337D8BC LDP X22, X21, [X31 + 0x20]
	0x0337D8C0 LDP X24, X23, [X31 + 0x10]
	0x0337D8C4 MOV W0, W31
	0x0337D8C8 LDR X30, [X31], #0x40
	0x0337D8CC RET
	0x0337D8D0 MOVZ W0, 0xB
	0x0337D8D4 RET

ISIL:
	001 Move X8, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move TEMP, 0
	004 Not TEMP
	005 Move W0, TEMP
	006 Return X0
	007 NotImplemented "Instruction CSET not yet implemented."
	008 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x0337D8D8 STP X30, X21, [X31 - 0x20]!
	0x0337D8DC STP X20, X19, [X31 + 0x10]
	0x0337D8E0 ADRP X21, 0x105F000
	0x0337D8E4 ADRP X20, 0xD7F000
	0x0337D8E8 LDRB W8, [X21 + 0xF7B]
	0x0337D8EC LDR X20, [X20 + 0x9E8]
	0x0337D8F0 MOV X19, X0
	0x0337D8F4 TBNZ X8, 0x0, 0x337D90C
	0x0337D8F8 ADRP X0, 0xD7F000
	0x0337D8FC LDR X0, [X0 + 0x9E8]
	0x0337D900 BL 0x1C16CF4
	0x0337D904 MOVZ W8, 0x1
	0x0337D908 STRB W8, [X21 + 0xF7B]
	0x0337D90C LDR X0, [X20]
	0x0337D910 LDR X19, [X19]
	0x0337D914 LDR W8, [X0 + 0xE0]
	0x0337D918 CBNZ W8, 0x337D920
	0x0337D91C BL 0x1C16DFC
	0x0337D920 MOV X0, X19
	0x0337D924 LDP X20, X19, [X31 + 0x10]
	0x0337D928 MOV X1, X31
	0x0337D92C LDP X30, X21, [X31], #0x20
	0x0337D930 B 0x331E474
	0x0337D934 STP X30, X21, [X31 - 0x20]!
	0x0337D938 STP X20, X19, [X31 + 0x10]
	0x0337D93C ADRP X21, 0x105F000
	0x0337D940 ADRP X20, 0xD7F000
	0x0337D944 LDRB W8, [X21 + 0xF7C]
	0x0337D948 LDR X20, [X20 + 0x9E8]
	0x0337D94C MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1060000
	006 Move W8, [X21+3953]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD79000
	014 Move X0, [X0+2656]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3953], W8
	018 Compare X19, 0
	019 JumpIfEqual {25}
	020 Move X8, 0xD79000
	021 Move X8, [X8+2656]
	022 Move X9, [X19]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W0, W31
	026 Move X20, [X20]
	027 Move X0, X19
	028 Call 0x1C17E08
	029 Move X8, [X0]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSET not yet implemented."
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return X0

Method: System.Boolean Equals(System.Int64 obj)

Disassembly:
	0x0337D950 TBNZ X8, 0x0, 0x337D968
	0x0337D954 ADRP X0, 0xD7F000
	0x0337D958 LDR X0, [X0 + 0x9E8]
	0x0337D95C BL 0x1C16CF4

ISIL:
	001 Move X8, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x0337D960 MOVZ W8, 0x1
	0x0337D964 STRB W8, [X21 + 0xF7C]
	0x0337D968 LDR X0, [X20]

ISIL:
	001 Move W8, [X0]
	002 Move W9, [X0+4]
	003 Xor W0, W9, W8
	004 Return X0

Method: System.String ToString()

Disassembly:
	0x0337D96C LDR X19, [X19]
	0x0337D970 LDR W8, [X0 + 0xE0]
	0x0337D974 CBNZ W8, 0x337D97C
	0x0337D978 BL 0x1C16DFC
	0x0337D97C MOV X0, X19
	0x0337D980 LDP X20, X19, [X31 + 0x10]
	0x0337D984 MOV X1, X31
	0x0337D988 LDP X30, X21, [X31], #0x20
	0x0337D98C B 0x331E93C
	0x0337D990 STP X30, X21, [X31 - 0x20]!
	0x0337D994 STP X20, X19, [X31 + 0x10]
	0x0337D998 ADRP X21, 0x105F000
	0x0337D99C ADRP X20, 0xD7F000
	0x0337D9A0 LDRB W8, [X21 + 0xF7D]
	0x0337D9A4 LDR X20, [X20 + 0x9E8]
	0x0337D9A8 MOV X19, X0
	0x0337D9AC TBNZ X8, 0x0, 0x337D9C4
	0x0337D9B0 ADRP X0, 0xD7F000
	0x0337D9B4 LDR X0, [X0 + 0x9E8]
	0x0337D9B8 BL 0x1C16CF4
	0x0337D9BC MOVZ W8, 0x1
	0x0337D9C0 STRB W8, [X21 + 0xF7D]
	0x0337D9C4 LDR X0, [X20]
	0x0337D9C8 LDR X19, [X19]
	0x0337D9CC LDR W8, [X0 + 0xE0]
	0x0337D9D0 CBNZ W8, 0x337D9D8
	0x0337D9D4 BL 0x1C16DFC
	0x0337D9D8 MOV X0, X19
	0x0337D9DC LDP X20, X19, [X31 + 0x10]
	0x0337D9E0 MOV X1, X31
	0x0337D9E4 LDP X30, X21, [X31], #0x20
	0x0337D9E8 B 0x331EE40
	0x0337D9EC STP X30, X21, [X31 - 0x20]!
	0x0337D9F0 STP X20, X19, [X31 + 0x10]
	0x0337D9F4 ADRP X21, 0x105F000
	0x0337D9F8 ADRP X20, 0xD7F000
	0x0337D9FC LDRB W8, [X21 + 0xF7E]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1060000
	007 Move X20, 0xDA6000
	008 Move X21, 0xDAC000
	009 Move W8, [X22+3954]
	010 Move X20, [X20+472]
	011 Move X21, [X21+120]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xDAC000
	018 Move X0, [X0+120]
	019 Call 0x1C17CF4
	020 Move X0, 0xDA6000
	021 Move X0, [X0+472]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3954], W8
	025 Move X1, [X20]
	026 Move X19, [X19]
	027 Move X0, X31
	028 Call ReadOnlySpan`1<Char>.op_Implicit, X0
	029 Move X20, X0
	030 Move X0, [X21]
	031 Move X21, X1
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X19
	037 Move X1, X20
	038 Move X2, X21
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X3, X31
	044 Move X30, [X31+48]

Method: System.String ToString(System.IFormatProvider provider)

Disassembly:
	0x0337DC98 ADRP X0, 0xD7F000
	0x0337DC9C LDR X0, [X0 + 0x9E8]
	0x0337DCA0 BL 0x1C16CF4
	0x0337DCA4 MOVZ W8, 0x1
	0x0337DCA8 STRB W8, [X21 + 0xF85]
	0x0337DCAC LDR X0, [X20]
	0x0337DCB0 LDR X19, [X19]
	0x0337DCB4 LDR W8, [X0 + 0xE0]
	0x0337DCB8 CBNZ W8, 0x337DCC0
	0x0337DCBC BL 0x1C16DFC
	0x0337DCC0 MOV X0, X19
	0x0337DCC4 LDP X20, X19, [X31 + 0x10]
	0x0337DCC8 MOV X1, X31
	0x0337DCCC LDP X30, X21, [X31], #0x20
	0x0337DCD0 B 0x3321AC8
	0x0337DCD4 STP X30, X21, [X31 - 0x20]!
	0x0337DCD8 STP X20, X19, [X31 + 0x10]
	0x0337DCDC ADRP X21, 0x105F000
	0x0337DCE0 ADRP X20, 0xD7F000
	0x0337DCE4 LDRB W8, [X21 + 0xF86]
	0x0337DCE8 LDR X20, [X20 + 0x9E8]
	0x0337DCEC MOV X19, X0
	0x0337DCF0 TBNZ X8, 0x0, 0x337DD08
	0x0337DCF4 ADRP X0, 0xD7F000
	0x0337DCF8 LDR X0, [X0 + 0x9E8]
	0x0337DCFC BL 0x1C16CF4
	0x0337DD00 MOVZ W8, 0x1
	0x0337DD04 STRB W8, [X21 + 0xF86]
	0x0337DD08 LDR X0, [X20]
	0x0337DD0C LDR X19, [X19]
	0x0337DD10 LDR W8, [X0 + 0xE0]
	0x0337DD14 CBNZ W8, 0x337DD1C
	0x0337DD18 BL 0x1C16DFC
	0x0337DD1C MOV X0, X19
	0x0337DD20 LDP X20, X19, [X31 + 0x10]
	0x0337DD24 MOV X1, X31
	0x0337DD28 LDP X30, X21, [X31], #0x20
	0x0337DD2C B 0x3321E44

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x1060000
	008 Move X21, 0xDA6000
	009 Move X22, 0xDAC000
	010 Move W8, [X23+3955]
	011 Move X21, [X21+472]
	012 Move X22, [X22+120]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xDAC000
	020 Move X0, [X0+120]
	021 Call 0x1C17CF4
	022 Move X0, 0xDA6000
	023 Move X0, [X0+472]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+3955], W8
	027 Move X1, [X21]
	028 Move X20, [X20]
	029 Move X0, X31
	030 Call ReadOnlySpan`1<Char>.op_Implicit, X0
	031 Move X21, X0
	032 Move X0, [X22]
	033 Move X22, X1
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, X20
	039 Move X1, X21
	040 Move X2, X22
	041 Move X3, X19
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X30, [X31+48]
	047 Move X23, [X31+56]
	048 Call Number.FormatInt64, X0, X1, X2
	049 Return X0

Method: System.String ToString(System.String format)

Disassembly:
	0x0337DD30 STR X30, [X31 - 0x20]!
	0x0337DD34 STP X20, X19, [X31 + 0x10]
	0x0337DD38 ADRP X0, 0xDAB000
	0x0337DD3C LDR X0, [X0 + 0x30]
	0x0337DD40 BL 0x1C16D08
	0x0337DD44 MOV X19, X0
	0x0337DD48 ADRP X0, 0xDA8000
	0x0337DD4C LDR X0, [X0 + 0xC8]
	0x0337DD50 BL 0x1C16D08
	0x0337DD54 MOV X20, X0
	0x0337DD58 ADRP X0, 0xDA8000
	0x0337DD5C LDR X0, [X0 + 0x98]
	0x0337DD60 BL 0x1C16D08
	0x0337DD64 MOV X2, X0
	0x0337DD68 MOV X0, X19
	0x0337DD6C MOV X1, X20
	0x0337DD70 MOV X3, X31
	0x0337DD74 BL 0x320A264
	0x0337DD78 MOV X19, X0
	0x0337DD7C ADRP X0, 0xD7E000
	0x0337DD80 LDR X0, [X0 + 0xC08]
	0x0337DD84 BL 0x1C16D08
	0x0337DD88 BL 0x1C16F10
	0x0337DD8C MOV X1, X19
	0x0337DD90 MOV X20, X0
	0x0337DD94 BL 0x337B498
	0x0337DD98 ADRP X0, 0xDAD000
	0x0337DD9C LDR X0, [X0 + 0xEB8]
	0x0337DDA0 BL 0x1C16D08
	0x0337DDA4 MOV X1, X0
	0x0337DDA8 MOV X0, X20
	0x0337DDAC BL 0x1C16DEC
	0x0337DDB0 STR X30, [X31 - 0x40]!
	0x0337DDB4 STP X24, X23, [X31 + 0x10]
	0x0337DDB8 STP X22, X21, [X31 + 0x20]
	0x0337DDBC STP X20, X19, [X31 + 0x30]
	0x0337DDC0 ADRP X24, 0x105F000
	0x0337DDC4 ADRP X23, 0xD78000
	0x0337DDC8 ADRP X22, 0xD7F000
	0x0337DDCC LDRB W8, [X24 + 0xF87]
	0x0337DDD0 LDR X23, [X23 + 0xA60]
	0x0337DDD4 LDR X22, [X22 + 0x9E8]
	0x0337DDD8 MOV X19, X2
	0x0337DDDC MOV X20, X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1060000
	007 Move W8, [X21+3956]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDAC000
	015 Move X0, [X0+120]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3956], W8
	019 Move X21, 0x105D000
	020 Move W8, [X21+1890]
	021 Move X19, [X19]
	022 Compare W8, 0
	023 JumpIfNotEqual {29}
	024 Move X0, 0xD9E000
	025 Move X0, [X0+656]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+1890], W8
	029 Move X22, 0xDAC000
	030 Move X22, [X22+120]
	031 Compare X20, 0
	032 JumpIfEqual {38}
	033 Move X0, X20
	034 Move X1, X31
	035 Call String.GetRawStringData, X0
	036 Move W20, [X20+16]
	037 Move X21, X0
	038 Move X21, X31
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X19
	045 Move X1, X21
	046 Move X2, X20
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X3, X31
	052 Move X30, [X31+48]
	053 Call Number.FormatInt64, X0, X1, X2
	054 Return X0

Method: System.String ToString(System.String format, System.IFormatProvider provider)

Disassembly:
	0x0337DDE0 MOV X21, X0
	0x0337DDE4 TBNZ X8, 0x0, 0x337DE08
	0x0337DDE8 ADRP X0, 0xD7F000
	0x0337DDEC LDR X0, [X0 + 0x9E8]
	0x0337DDF0 BL 0x1C16CF4
	0x0337DDF4 ADRP X0, 0xD78000
	0x0337DDF8 LDR X0, [X0 + 0xA60]
	0x0337DDFC BL 0x1C16CF4
	0x0337DE00 MOVZ W8, 0x1
	0x0337DE04 STRB W8, [X24 + 0xF87]
	0x0337DE08 LDR X8, [X21]
	0x0337DE0C LDR X0, [X23]
	0x0337DE10 ADD X1, X31, 0x8
	0x0337DE14 STR X8, [X31 + 0x8]
	0x0337DE18 BL 0x1C16E04
	0x0337DE1C LDR X8, [X22]
	0x0337DE20 MOV X21, X0
	0x0337DE24 LDR W9, [X8 + 0xE0]
	0x0337DE28 CBNZ W9, 0x337DE34
	0x0337DE2C MOV X0, X8
	0x0337DE30 BL 0x1C16DFC
	0x0337DE34 MOV X0, X21
	0x0337DE38 MOV X1, X20
	0x0337DE3C MOV X2, X19
	0x0337DE40 MOV X3, X31
	0x0337DE44 BL 0x3318718
	0x0337DE48 LDP X20, X19, [X31 + 0x30]
	0x0337DE4C LDP X22, X21, [X31 + 0x20]
	0x0337DE50 LDP X24, X23, [X31 + 0x10]
	0x0337DE54 LDR X30, [X31], #0x40
	0x0337DE58 RET
	0x0337DE5C STP X30, X21, [X31 - 0x20]!
	0x0337DE60 STP X20, X19, [X31 + 0x10]
	0x0337DE64 ADRP X20, 0x105F000
	0x0337DE68 ADRP X21, 0xDAD000
	0x0337DE6C LDRB W8, [X20 + 0xF88]
	0x0337DE70 LDR X21, [X21 + 0xEC0]
	0x0337DE74 MOV X19, X0
	0x0337DE78 TBNZ X8, 0x0, 0x337DE90
	0x0337DE7C ADRP X0, 0xDAD000
	0x0337DE80 LDR X0, [X0 + 0xEC0]
	0x0337DE84 BL 0x1C16CF4
	0x0337DE88 MOVZ W8, 0x1
	0x0337DE8C STRB W8, [X20 + 0xF88]
	0x0337DE90 LDR X1, [X21]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x1060000
	008 Move W8, [X22+3957]
	009 Move X19, X2
	010 Move X21, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xDAC000
	017 Move X0, [X0+120]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3957], W8
	021 Move X22, 0x105D000
	022 Move W8, [X22+1890]
	023 Move X20, [X20]
	024 Compare W8, 0
	025 JumpIfNotEqual {31}
	026 Move X0, 0xD9E000
	027 Move X0, [X0+656]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+1890], W8
	031 Move X23, 0xDAC000
	032 Move X23, [X23+120]
	033 Compare X21, 0
	034 JumpIfEqual {40}
	035 Move X0, X21
	036 Move X1, X31
	037 Call String.GetRawStringData, X0
	038 Move W21, [X21+16]
	039 Move X22, X0
	040 Move X22, X31
	041 Move X0, [X23]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move X0, X20
	047 Move X1, X22
	048 Move X2, X21
	049 Move X3, X19
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X30, [X31+48]
	055 Move X23, [X31+56]
	056 Call Number.FormatInt64, X0, X1, X2
	057 Return X0

Method: System.Boolean TryFormat(System.Span`1<System.Char> destination, out System.Int32 charsWritten, System.ReadOnlySpan`1<System.Char> format = null, System.IFormatProvider provider = null)

Disassembly:
	0x0337DE94 MOV X0, X19
	0x0337DE98 MOV X2, X31
	0x0337DE9C BL 0x338C8D8
	0x0337DEA0 MOVZ W8, 0x4002
	0x0337DEA4 MOVK W8, 0x80000000
	0x0337DEA8 STR W8, [X19 + 0x60]
	0x0337DEAC LDP X20, X19, [X31 + 0x10]
	0x0337DEB0 LDP X30, X21, [X31], #0x20
	0x0337DEB4 RET
	0x0337DEB8 MOV X4, X31
	0x0337DEBC B 0x338CA74
	0x0337DEC0 STP X30, X21, [X31 - 0x20]!
	0x0337DEC4 STP X20, X19, [X31 + 0x10]
	0x0337DEC8 ADRP X20, 0x105F000
	0x0337DECC ADRP X21, 0xDAD000
	0x0337DED0 LDRB W8, [X20 + 0xF89]
	0x0337DED4 LDR X21, [X21 + 0xEC8]
	0x0337DED8 MOV X19, X0
	0x0337DEDC TBNZ X8, 0x0, 0x337DEF4
	0x0337DEE0 ADRP X0, 0xDAD000
	0x0337DEE4 LDR X0, [X0 + 0xEC8]
	0x0337DEE8 BL 0x1C16CF4
	0x0337DEEC MOVZ W8, 0x1
	0x0337DEF0 STRB W8, [X20 + 0xF89]
	0x0337DEF4 LDR X1, [X21]
	0x0337DEF8 MOV X0, X19
	0x0337DEFC MOV X2, X31
	0x0337DF00 BL 0x338C8D8
	0x0337DF04 MOVZ W8, 0x1509
	0x0337DF08 MOVK W8, 0x80130000
	0x0337DF0C STR W8, [X19 + 0x60]
	0x0337DF10 LDP X20, X19, [X31 + 0x10]
	0x0337DF14 LDP X30, X21, [X31], #0x20
	0x0337DF18 RET
	0x0337DF1C STP X30, X19, [X31 - 0x10]!
	0x0337DF20 MOV X2, X31
	0x0337DF24 MOV X19, X0
	0x0337DF28 BL 0x338C8D8
	0x0337DF2C MOVZ W8, 0x1509
	0x0337DF30 MOVK W8, 0x80130000

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X27, 0x1060000
	012 Move X26, 0xDAC000
	013 Move W8, [X27+3958]
	014 Move X26, [X26+120]
	015 Move X20, X6
	016 Move X22, X5
	017 Move X24, X4
	018 Move X19, X3
	019 Move X21, X2
	020 Move X23, X1
	021 Move X25, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {31}
	026 Move X0, 0xDAC000
	027 Move X0, [X0+120]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X27+3958], W8
	031 Move X0, [X26]
	032 Move X25, [X25]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X25
	038 Move X1, X24
	039 Move X2, X22
	040 Move X3, X20
	041 Move X4, X23
	042 Move X5, X21
	043 Move X6, X19
	044 Move X20, [X31+64]
	045 Move X19, [X31+72]
	046 Move X22, [X31+48]
	047 Move X21, [X31+56]
	048 Move X24, [X31+32]
	049 Move X23, [X31+40]
	050 Move X26, [X31+16]
	051 Move X25, [X31+24]
	052 Move X30, [X31+80]
	053 Move X27, [X31+88]

Method: System.Int64 Parse(System.String s, System.IFormatProvider provider)

Disassembly:
	0x0337E210 CBNZ W20, 0x337E2B8
	0x0337E214 ADRP X20, 0xDA1000
	0x0337E218 LDR X20, [X20 + 0xF8]
	0x0337E21C LDR X0, [X20]
	0x0337E220 LDR W8, [X0 + 0xE0]
	0x0337E224 CBNZ W8, 0x337E230
	0x0337E228 BL 0x1C16DFC
	0x0337E22C LDR X0, [X20]
	0x0337E230 LDR X8, [X0 + 0xB8]
	0x0337E234 TBZ X19, 0x0, 0x337E2A4
	0x0337E238 LDR X19, [X8]
	0x0337E23C B 0x337E2A8
	0x0337E240 ADRP X8, 0xDA1000
	0x0337E244 LDR X8, [X8 + 0xF8]
	0x0337E248 ANDS W31, W19, 0x1
	0x0337E24C LDR X0, [X8]
	0x0337E250 MOVZ W8, 0x7
	0x0337E254 CINC W20, W8, EQ
	0x0337E258 BL 0x1C16F10
	0x0337E25C MOV X1, X31
	0x0337E260 MOV X19, X0
	0x0337E264 BL 0x33BDD8C
	0x0337E268 STR W20, [X19 + 0x10]
	0x0337E26C B 0x337E2A8
	0x0337E270 ADRP X20, 0xDA1000
	0x0337E274 LDR X20, [X20 + 0xF8]
	0x0337E278 LDR X0, [X20]
	0x0337E27C LDR W8, [X0 + 0xE0]
	0x0337E280 CBNZ W8, 0x337E28C
	0x0337E284 BL 0x1C16DFC
	0x0337E288 LDR X0, [X20]
	0x0337E28C LDR X8, [X0 + 0xB8]
	0x0337E290 TBZ X19, 0x0, 0x337E29C
	0x0337E294 LDR X19, [X8 + 0x10]
	0x0337E298 B 0x337E2A8
	0x0337E29C LDR X19, [X8 + 0x18]
	0x0337E2A0 B 0x337E2A8
	0x0337E2A4 LDR X19, [X8 + 0x8]
	0x0337E2A8 MOV X0, X19
	0x0337E2AC LDP X20, X19, [X31 + 0x10]
	0x0337E2B0 LDP X30, X21, [X31], #0x20
	0x0337E2B4 RET
	0x0337E2B8 ADRP X0, 0xD7D000
	0x0337E2BC LDR X0, [X0 + 0x760]
	0x0337E2C0 BL 0x1C16D08
	0x0337E2C4 BL 0x1C16F10
	0x0337E2C8 MOV X19, X0
	0x0337E2CC ADRP X0, 0xDA6000
	0x0337E2D0 LDR X0, [X0 + 0x68]
	0x0337E2D4 BL 0x1C16D08
	0x0337E2D8 MOV X20, X0
	0x0337E2DC ADRP X0, 0xDAC000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x105F000
	007 Move W8, [X21+3959]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDAB000
	015 Move X0, [X0+120]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3959], W8
	019 Compare X20, 0
	020 JumpIfNotEqual {24}
	021 Move W0, 48
	022 Move X1, X31
	023 Call ThrowHelper.ThrowArgumentNullException, X0
	024 Move X21, 0x105C000
	025 Move W8, [X21+1890]
	026 Compare W8, 0
	027 JumpIfNotEqual {33}
	028 Move X0, 0xD9D000
	029 Move X0, [X0+656]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+1890], W8
	033 Move X22, 0xDAB000
	034 Move X22, [X22+120]
	035 Compare X20, 0
	036 JumpIfEqual {42}
	037 Move X0, X20
	038 Move X1, X31
	039 Call String.GetRawStringData, X0
	040 Move W21, [X20+16]
	041 Move X20, X0
	042 Move X21, X31
	043 Move X0, X19
	044 Move X1, X31
	045 Call NumberFormatInfo.GetInstance, X0
	046 Move X8, [X22]
	047 Move X19, X0
	048 Move W9, [X8+224]
	049 Compare W9, 0
	050 JumpIfNotEqual {53}
	051 Move X0, X8
	052 Call 0x1C17DFC
	053 Move X0, X20
	054 Move X1, X21
	055 Move X3, X19
	056 Move X20, [X31+32]
	057 Move X19, [X31+40]
	058 Move X22, [X31+16]
	059 Move X21, [X31+24]
	060 Move W2, 7
	061 Move X30, [X31+48]

Method: System.Int64 Parse(System.String s, System.Globalization.NumberStyles style, System.IFormatProvider provider)

Disassembly:
	0x0337E4A8 MOV X19, X0
	0x0337E4AC BL 0x33BDD8C
	0x0337E4B0 MOVZ W8, 0x5
	0x0337E4B4 STR W8, [X19 + 0x10]
	0x0337E4B8 LDR X8, [X20]
	0x0337E4BC LDR X8, [X8 + 0xB8]
	0x0337E4C0 STR X19, [X8 + 0x20]
	0x0337E4C4 LDP X20, X19, [X31 + 0x10]
	0x0337E4C8 LDR X30, [X31], #0x20
	0x0337E4CC RET
	0x0337E4D0 STR X30, [X31 - 0x40]!
	0x0337E4D4 STP X24, X23, [X31 + 0x10]
	0x0337E4D8 STP X22, X21, [X31 + 0x20]
	0x0337E4DC STP X20, X19, [X31 + 0x30]
	0x0337E4E0 ADRP X23, 0x105E000
	0x0337E4E4 ADRP X24, 0xDA8000
	0x0337E4E8 ADRP X22, 0xDA9000
	0x0337E4EC LDRB W8, [X23 + 0xF90]
	0x0337E4F0 LDR X24, [X24 + 0xDD0]
	0x0337E4F4 LDR X22, [X22 + 0x9D8]
	0x0337E4F8 MOV X19, X2
	0x0337E4FC MOV X20, X1
	0x0337E500 MOV X21, X0
	0x0337E504 TBNZ X8, 0x0, 0x337E534
	0x0337E508 ADRP X0, 0xDA9000
	0x0337E50C LDR X0, [X0 + 0x9D8]
	0x0337E510 BL 0x1C16CF4
	0x0337E514 ADRP X0, 0xDA8000
	0x0337E518 LDR X0, [X0 + 0xDD0]
	0x0337E51C BL 0x1C16CF4
	0x0337E520 ADRP X0, 0xDA4000
	0x0337E524 LDR X0, [X0 + 0xAC0]
	0x0337E528 BL 0x1C16CF4
	0x0337E52C MOVZ W8, 0x1
	0x0337E530 STRB W8, [X23 + 0xF90]
	0x0337E534 LDR X2, [X24]
	0x0337E538 MOV X0, X21
	0x0337E53C MOV X1, X20
	0x0337E540 BL 0x2218CF0
	0x0337E544 LDR X8, [X22]
	0x0337E548 MOV X21, X0
	0x0337E54C LDR W9, [X8 + 0xE0]
	0x0337E550 CBNZ W9, 0x337E55C
	0x0337E554 MOV X0, X8
	0x0337E558 BL 0x1C16DFC
	0x0337E55C MOV X0, X21
	0x0337E560 MOV W1, W20
	0x0337E564 MOV X2, X19
	0x0337E568 LDP X20, X19, [X31 + 0x30]
	0x0337E56C LDP X22, X21, [X31 + 0x20]
	0x0337E570 LDP X24, X23, [X31 + 0x10]
	0x0337E574 LDR X30, [X31], #0x40
	0x0337E578 B 0x337E57C
	0x0337E57C STP X29, X30, [X31 - 0x60]!
	0x0337E580 STP X28, X27, [X31 + 0x10]
	0x0337E584 STP X26, X25, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x105F000
	008 Move W8, [X22+3960]
	009 Move X20, X2
	010 Move W19, W1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xDAB000
	017 Move X0, [X0+120]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3960], W8
	021 Move W0, W19
	022 Move X1, X31
	023 Call NumberFormatInfo.ValidateParseStyleInteger, X0
	024 Compare X21, 0
	025 JumpIfNotEqual {29}
	026 Move W0, 48
	027 Move X1, X31
	028 Call ThrowHelper.ThrowArgumentNullException, X0
	029 Move X22, 0x105C000
	030 Move W8, [X22+1890]
	031 Compare W8, 0
	032 JumpIfNotEqual {38}
	033 Move X0, 0xD9D000
	034 Move X0, [X0+656]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X22+1890], W8
	038 Move X23, 0xDAB000
	039 Move X23, [X23+120]
	040 Compare X21, 0
	041 JumpIfEqual {47}
	042 Move X0, X21
	043 Move X1, X31
	044 Call String.GetRawStringData, X0
	045 Move W21, [X21+16]
	046 Move X22, X0
	047 Move X22, X31
	048 Move X0, X20
	049 Move X1, X31
	050 Call NumberFormatInfo.GetInstance, X0
	051 Move X8, [X23]
	052 Move X20, X0
	053 Move W9, [X8+224]
	054 Compare W9, 0
	055 JumpIfNotEqual {58}
	056 Move X0, X8
	057 Call 0x1C17DFC
	058 Move X0, X22
	059 Move X1, X21
	060 Move W2, W19
	061 Move X3, X20
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X22, [X31+16]
	065 Move X21, [X31+24]
	066 Move X30, [X31+48]
	067 Move X23, [X31+56]
	068 Call Number.ParseInt64, X0, X1, X2
	069 Return X0

Method: System.Boolean TryParse(System.String s, out System.Int64 result)

Disassembly:
	0x0337E588 STP X24, X23, [X31 + 0x30]
	0x0337E58C STP X22, X21, [X31 + 0x40]
	0x0337E590 STP X20, X19, [X31 + 0x50]
	0x0337E594 ADRP X19, 0x105E000
	0x0337E598 LDRB W8, [X19 + 0xF91]
	0x0337E59C MOV X21, X2
	0x0337E5A0 MOV W22, W1
	0x0337E5A4 MOV X20, X0
	0x0337E5A8 TBNZ X8, 0x0, 0x337E5C0
	0x0337E5AC ADRP X0, 0xDA9000
	0x0337E5B0 LDR X0, [X0 + 0x9D8]
	0x0337E5B4 BL 0x1C16CF4
	0x0337E5B8 MOVZ W8, 0x1
	0x0337E5BC STRB W8, [X19 + 0xF91]
	0x0337E5C0 ADRP X19, 0xDA9000
	0x0337E5C4 LDR X19, [X19 + 0x9D8]
	0x0337E5C8 SXTW X25, W22
	0x0337E5CC UBFM X23, X21, 0x20, 0x3F
	0x0337E5D0 CMP W22, 0x8
	0x0337E5D4 ADRP X22, 0x105F000
	0x0337E5D8 B.CS 0x337E5E4
	0x0337E5DC MOV X24, X31
	0x0337E5E0 B 0x337E6B0
	0x0337E5E4 ADD X24, X20, 0x4
	0x0337E5E8 MOVZ W27, 0x1
	0x0337E5EC MOV X26, X25
	0x0337E5F0 LDR X0, [X19]
	0x0337E5F4 LDUR W28, [X24 - 0x4]
	0x0337E5F8 LDR W8, [X0 + 0xE0]
	0x0337E5FC CBNZ W8, 0x337E604
	0x0337E600 BL 0x1C16DFC
	0x0337E604 LDRB W8, [X22]
	0x0337E608 CBNZ W8, 0x337E618
	0x0337E60C MOV X0, X19
	0x0337E610 BL 0x1C16CF4
	0x0337E614 STRB W27, [X22]
	0x0337E618 LDR X0, [X19]
	0x0337E61C LDR W8, [X0 + 0xE0]
	0x0337E620 CBZ W8, 0x337E62C
	0x0337E624 MOVZ W8, 0x1
	0x0337E628 B 0x337E634
	0x0337E62C BL 0x1C16DFC
	0x0337E630 LDRB W8, [X22]
	0x0337E634 LDR W29, [X24]
	0x0337E638 CBNZ W8, 0x337E648
	0x0337E63C MOV X0, X19
	0x0337E640 BL 0x1C16CF4
	0x0337E644 STRB W27, [X22]
	0x0337E648 LDR X0, [X19]
	0x0337E64C LDR W8, [X0 + 0xE0]
	0x0337E650 CBNZ W8, 0x337E658
	0x0337E654 BL 0x1C16DFC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x105F000
	007 Move W8, [X21+3961]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDAB000
	015 Move X0, [X0+120]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3961], W8
	019 Compare X20, 0
	020 JumpIfEqual {56}
	021 Move X21, 0x105C000
	022 Move X22, 0xDAB000
	023 Move W8, [X21+1890]
	024 Move X22, [X22+120]
	025 Compare W8, 0
	026 JumpIfNotEqual {32}
	027 Move X0, 0xD9D000
	028 Move X0, [X0+656]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X21+1890], W8
	032 Move X0, X20
	033 Move X1, X31
	034 Call String.GetRawStringData, X0
	035 Move W20, [X20+16]
	036 Move X21, X0
	037 Move X0, X31
	038 Call NumberFormatInfo.get_CurrentInfo
	039 Move X8, [X22]
	040 Move X22, X0
	041 Move W9, [X8+224]
	042 Compare W9, 0
	043 JumpIfNotEqual {46}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X0, X21
	047 Move X1, X20
	048 Move X3, X22
	049 Move X4, X19
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move W2, 7
	055 Move X30, [X31+48]
	056 Move [X19], X31
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X22, [X31+16]
	060 Move X21, [X31+24]
	061 Move W0, W31
	062 Move X30, [X31+48]
	063 Return X0

Method: System.Boolean TryParse(System.String s, System.Globalization.NumberStyles style, System.IFormatProvider provider, out System.Int64 result)

Disassembly:
	0x0337E7DC MOVZ W8, 0x1
	0x0337E7E0 STRB W8, [X22]
	0x0337E7E4 LDR X0, [X19]
	0x0337E7E8 ORR X24, X24, 0x7
	0x0337E7EC EOR W23, W21, W23, 0x0
	0x0337E7F0 LDR W8, [X0 + 0xE0]
	0x0337E7F4 CBNZ W8, 0x337E7FC
	0x0337E7F8 BL 0x1C16DFC
	0x0337E7FC EXTR W8, W21, W21, 0xC
	0x0337E800 ADD W8, W23, W8
	0x0337E804 EOR W9, W8, W23, 0x17
	0x0337E808 EXTR W8, W8, W8, 0x5
	0x0337E80C ADD W21, W9, W8
	0x0337E810 EXTR W23, W9, W9, 0xD
	0x0337E814 LDRH W8, [X20, X24, LSL]
	0x0337E818 ADD W8, W21, W8
	0x0337E81C ADD W21, W8, 0x800000
	0x0337E820 B 0x337E8A0
	0x0337E824 LDR X0, [X19]
	0x0337E828 LDR W25, [X20, X24, LSL]
	0x0337E82C LDR W8, [X0 + 0xE0]
	0x0337E830 CBNZ W8, 0x337E838
	0x0337E834 BL 0x1C16DFC
	0x0337E838 LDRB W8, [X22]
	0x0337E83C ADD W21, W25, W21
	0x0337E840 CBNZ W8, 0x337E858
	0x0337E844 ADRP X0, 0xDA9000
	0x0337E848 LDR X0, [X0 + 0x9D8]
	0x0337E84C BL 0x1C16CF4
	0x0337E850 MOVZ W8, 0x1
	0x0337E854 STRB W8, [X22]
	0x0337E858 LDR X0, [X19]
	0x0337E85C ORR X24, X24, 0x7
	0x0337E860 EOR W23, W21, W23, 0x0
	0x0337E864 LDR W8, [X0 + 0xE0]
	0x0337E868 CBNZ W8, 0x337E870
	0x0337E86C BL 0x1C16DFC
	0x0337E870 EXTR W8, W21, W21, 0xC
	0x0337E874 ADD W8, W23, W8
	0x0337E878 EOR W9, W8, W23, 0x17
	0x0337E87C EXTR W8, W8, W8, 0x5
	0x0337E880 ADD W21, W9, W8
	0x0337E884 EXTR W23, W9, W9, 0xD
	0x0337E888 ADD X8, X20, X24
	0x0337E88C LDRB W9, [X8 + 0x2]
	0x0337E890 LDRH W8, [X8]
	0x0337E894 BFM W8, W9, 0x10, 0x7
	0x0337E898 EOR W9, W21, 0x80000000
	0x0337E89C ADD W21, W9, W8
	0x0337E8A0 LDR X0, [X19]
	0x0337E8A4 LDR W8, [X0 + 0xE0]
	0x0337E8A8 CBNZ W8, 0x337E8B0
	0x0337E8AC BL 0x1C16DFC
	0x0337E8B0 LDRB W8, [X22]
	0x0337E8B4 CBNZ W8, 0x337E8CC
	0x0337E8B8 ADRP X0, 0xDA9000
	0x0337E8BC LDR X0, [X0 + 0x9D8]
	0x0337E8C0 BL 0x1C16CF4
	0x0337E8C4 MOVZ W8, 0x1
	0x0337E8C8 STRB W8, [X22]
	0x0337E8CC LDR X0, [X19]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x105F000
	009 Move W8, [X23+3962]
	010 Move X19, X3
	011 Move X21, X2
	012 Move W20, W1
	013 Move X22, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xDAB000
	019 Move X0, [X0+120]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+3962], W8
	023 Move W0, W20
	024 Move X1, X31
	025 Call NumberFormatInfo.ValidateParseStyleInteger, X0
	026 Compare X22, 0
	027 JumpIfEqual {68}
	028 Move X23, 0x105C000
	029 Move X24, 0xDAB000
	030 Move W8, [X23+1890]
	031 Move X24, [X24+120]
	032 Compare W8, 0
	033 JumpIfNotEqual {39}
	034 Move X0, 0xD9D000
	035 Move X0, [X0+656]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X23+1890], W8
	039 Move X0, X22
	040 Move X1, X31
	041 Call String.GetRawStringData, X0
	042 Move W22, [X22+16]
	043 Move X23, X0
	044 Move X0, X21
	045 Move X1, X31
	046 Call NumberFormatInfo.GetInstance, X0
	047 Move X8, [X24]
	048 Move X21, X0
	049 Move W9, [X8+224]
	050 Compare W9, 0
	051 JumpIfNotEqual {54}
	052 Move X0, X8
	053 Call 0x1C17DFC
	054 Move X0, X23
	055 Move X1, X22
	056 Move W2, W20
	057 Move X3, X21
	058 Move X4, X19
	059 Move X20, [X31+48]
	060 Move X19, [X31+56]
	061 Move X22, [X31+32]
	062 Move X21, [X31+40]
	063 Move X24, [X31+16]
	064 Move X23, [X31+24]
	065 Move X30, [X31+64]
	066 Call Number.TryParseInt64, X0, X1, X2, X3
	067 Return X0
	068 Move [X19], X31
	069 Move X20, [X31+48]
	070 Move X19, [X31+56]
	071 Move X22, [X31+32]
	072 Move X21, [X31+40]
	073 Move X24, [X31+16]
	074 Move X23, [X31+24]
	075 Move W0, W31
	076 Move X30, [X31+64]
	077 Return X0

Method: System.TypeCode GetTypeCode()

Disassembly:
	0x0337E8D0 EOR W20, W23, W21, 0x0
	0x0337E8D4 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move W0, 11
	002 Return X0

Method: System.Boolean System.IConvertible.ToBoolean(System.IFormatProvider provider)

Disassembly:
	0x0337E8D8 CBZ W8, 0x337E8E4
	0x0337E8DC MOV W8, W31
	0x0337E8E0 B 0x337E8F4
	0x0337E8E4 BL 0x1C16DFC
	0x0337E8E8 LDRB W8, [X22]
	0x0337E8EC CMP W8, 0x0
	0x0337E8F0 CSET W8, EQ
	0x0337E8F4 EXTR W9, W21, W21, 0xC
	0x0337E8F8 ADD W9, W20, W9
	0x0337E8FC EOR W10, W9, W20, 0x17
	0x0337E900 EXTR W9, W9, W9, 0x5
	0x0337E904 ADD W20, W10, W9
	0x0337E908 EXTR W21, W10, W10, 0xD
	0x0337E90C CBZ W8, 0x337E924
	0x0337E910 ADRP X0, 0xDA9000
	0x0337E914 LDR X0, [X0 + 0x9D8]
	0x0337E918 BL 0x1C16CF4
	0x0337E91C MOVZ W8, 0x1
	0x0337E920 STRB W8, [X22]
	0x0337E924 LDR X0, [X19]
	0x0337E928 EOR W19, W21, W20, 0x0
	0x0337E92C LDR W8, [X0 + 0xE0]
	0x0337E930 CBNZ W8, 0x337E938

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x105F000
	006 Move X20, 0xD7F000
	007 Move W8, [X21+3963]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD7F000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3963], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToBoolean, X0
	032 Return X0

Method: System.Char System.IConvertible.ToChar(System.IFormatProvider provider)

Disassembly:
	0x0337E934 BL 0x1C16DFC
	0x0337E938 EXTR W8, W20, W20, 0xC
	0x0337E93C ADD W8, W19, W8
	0x0337E940 EOR W9, W8, W19, 0x17
	0x0337E944 LDP X20, X19, [X31 + 0x50]
	0x0337E948 LDP X22, X21, [X31 + 0x40]
	0x0337E94C LDP X24, X23, [X31 + 0x30]
	0x0337E950 LDP X26, X25, [X31 + 0x20]
	0x0337E954 LDP X28, X27, [X31 + 0x10]
	0x0337E958 EXTR W8, W8, W8, 0x5
	0x0337E95C ADD W8, W9, W8
	0x0337E960 EOR W0, W8, W9, 0xD
	0x0337E964 LDP X29, X30, [X31], #0x60
	0x0337E968 RET
	0x0337E96C STR X30, [X31 - 0x30]!
	0x0337E970 STP X22, X21, [X31 + 0x10]
	0x0337E974 STP X20, X19, [X31 + 0x20]
	0x0337E978 ADRP X22, 0x105E000
	0x0337E97C ADRP X21, 0xDA9000
	0x0337E980 LDRB W8, [X22 + 0xF92]
	0x0337E984 LDR X21, [X21 + 0x9D8]
	0x0337E988 MOV X19, X1
	0x0337E98C MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x105F000
	006 Move X20, 0xD7F000
	007 Move W8, [X21+3964]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD7F000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3964], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToChar, X0
	032 Return X0

Method: System.SByte System.IConvertible.ToSByte(System.IFormatProvider provider)

Disassembly:
	0x0337E990 TBNZ X8, 0x0, 0x337E9A8
	0x0337E994 ADRP X0, 0xDA9000
	0x0337E998 LDR X0, [X0 + 0x9D8]
	0x0337E99C BL 0x1C16CF4
	0x0337E9A0 MOVZ W8, 0x1
	0x0337E9A4 STRB W8, [X22 + 0xF92]
	0x0337E9A8 LDR X0, [X21]
	0x0337E9AC LDR W22, [X20]
	0x0337E9B0 LDR W8, [X19]
	0x0337E9B4 LDR W9, [X0 + 0xE0]
	0x0337E9B8 EOR W21, W8, W22, 0x0
	0x0337E9BC CBNZ W9, 0x337E9C4
	0x0337E9C0 BL 0x1C16DFC
	0x0337E9C4 EXTR W8, W22, W22, 0xC
	0x0337E9C8 ADD W8, W21, W8
	0x0337E9CC EOR W9, W8, W21, 0x17
	0x0337E9D0 EXTR W8, W8, W8, 0x5
	0x0337E9D4 ADD W8, W9, W8
	0x0337E9D8 EXTR W9, W9, W9, 0xD
	0x0337E9DC STR W8, [X20]
	0x0337E9E0 STR W9, [X19]
	0x0337E9E4 LDP X20, X19, [X31 + 0x20]
	0x0337E9E8 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x105F000
	006 Move X20, 0xD7F000
	007 Move W8, [X21+3965]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD7F000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3965], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToSByte, X0
	032 Return X0

Method: System.Byte System.IConvertible.ToByte(System.IFormatProvider provider)

Disassembly:
	0x0337E9EC LDR X30, [X31], #0x30
	0x0337E9F0 RET
	0x0337E9F4 SUB W8, W31, W1
	0x0337E9F8 RORV W0, W0, W8
	0x0337E9FC RET
	0x0337EA00 STR X30, [X31 - 0x20]!
	0x0337EA04 STP X20, X19, [X31 + 0x10]
	0x0337EA08 ADRP X20, 0x105E000
	0x0337EA0C ADRP X19, 0xDA9000
	0x0337EA10 LDRB W8, [X20 + 0xF93]
	0x0337EA14 LDR X19, [X19 + 0x9D8]
	0x0337EA18 TBNZ X8, 0x0, 0x337EA30
	0x0337EA1C ADRP X0, 0xDA9000
	0x0337EA20 LDR X0, [X0 + 0x9D8]
	0x0337EA24 BL 0x1C16CF4
	0x0337EA28 MOVZ W8, 0x1
	0x0337EA2C STRB W8, [X20 + 0xF93]
	0x0337EA30 LDR X0, [X19]
	0x0337EA34 LDR W8, [X0 + 0xE0]
	0x0337EA38 CBNZ W8, 0x337EA44
	0x0337EA3C BL 0x1C16DFC
	0x0337EA40 LDR X0, [X19]
	0x0337EA44 LDR X8, [X0 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x105F000
	006 Move X20, 0xD7F000
	007 Move W8, [X21+3966]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD7F000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3966], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToByte, X0
	032 Return X0

Method: System.Int16 System.IConvertible.ToInt16(System.IFormatProvider provider)

Disassembly:
	0x0337EA48 LDP X20, X19, [X31 + 0x10]
	0x0337EA4C LDR X0, [X8]
	0x0337EA50 LDR X30, [X31], #0x20
	0x0337EA54 RET
	0x0337EA58 MOVZ W0, 0x7310
	0x0337EA5C MOVK W0, 0xC40000
	0x0337EA60 RET
	0x0337EA64 STR X30, [X31 - 0x20]!
	0x0337EA68 STP X20, X19, [X31 + 0x10]
	0x0337EA6C ADRP X19, 0x105E000
	0x0337EA70 ADRP X20, 0xDA9000
	0x0337EA74 LDRB W8, [X19 + 0xF94]
	0x0337EA78 LDR X20, [X20 + 0x9D8]
	0x0337EA7C TBNZ X8, 0x0, 0x337EA94
	0x0337EA80 ADRP X0, 0xDA9000
	0x0337EA84 LDR X0, [X0 + 0x9D8]
	0x0337EA88 BL 0x1C16CF4
	0x0337EA8C MOVZ W8, 0x1
	0x0337EA90 STRB W8, [X19 + 0xF94]
	0x0337EA94 LDR X8, [X20]
	0x0337EA98 LDP X20, X19, [X31 + 0x10]
	0x0337EA9C MOVZ W9, 0x7310
	0x0337EAA0 MOVK W9, 0xC40000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x105F000
	006 Move X20, 0xD7F000
	007 Move W8, [X21+3967]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD7F000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3967], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToInt16, X0
	032 Return X0

Method: System.UInt16 System.IConvertible.ToUInt16(System.IFormatProvider provider)

Disassembly:
	0x0337EAA4 LDR X8, [X8 + 0xB8]
	0x0337EAA8 STR X9, [X8]
	0x0337EAAC LDR X30, [X31], #0x20
	0x0337EAB0 RET
	0x0337EAB4 STR X30, [X31 - 0x20]!
	0x0337EAB8 STP X20, X19, [X31 + 0x10]
	0x0337EABC ADRP X20, 0x105E000
	0x0337EAC0 LDRB W8, [X20 + 0xF95]
	0x0337EAC4 MOV W19, W0
	0x0337EAC8 TBNZ X8, 0x0, 0x337EAE0
	0x0337EACC ADRP X0, 0xD75000
	0x0337EAD0 LDR X0, [X0 + 0x5A8]
	0x0337EAD4 BL 0x1C16CF4
	0x0337EAD8 MOVZ W8, 0x1
	0x0337EADC STRB W8, [X20 + 0xF95]
	0x0337EAE0 TBZ X19, 0xF, 0x337EAF0
	0x0337EAE4 SUB W8, W31, W19
	0x0337EAE8 TBNZ X8, 0xF, 0x337EB00
	0x0337EAEC SXTH W19, W8
	0x0337EAF0 MOV W0, W19
	0x0337EAF4 LDP X20, X19, [X31 + 0x10]
	0x0337EAF8 LDR X30, [X31], #0x20
	0x0337EAFC RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x105F000
	006 Move X20, 0xD7F000
	007 Move W8, [X21+3968]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD7F000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3968], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToUInt16, X0
	032 Return X0

Method: System.Int32 System.IConvertible.ToInt32(System.IFormatProvider provider)

Disassembly:
	0x0337EB00 ADRP X8, 0xD75000
	0x0337EB04 LDR X8, [X8 + 0x5A8]
	0x0337EB08 LDR X0, [X8]
	0x0337EB0C BL 0x19903D0
	0x0337EB10 BL 0x337EB14
	0x0337EB14 STP X30, X19, [X31 - 0x10]!
	0x0337EB18 ADRP X0, 0xD75000
	0x0337EB1C LDR X0, [X0 + 0x858]
	0x0337EB20 BL 0x1C16D08
	0x0337EB24 BL 0x1C16F10
	0x0337EB28 MOV X19, X0
	0x0337EB2C ADRP X0, 0xDAC000
	0x0337EB30 LDR X0, [X0 + 0xEF0]
	0x0337EB34 BL 0x1C16D08
	0x0337EB38 MOV X1, X0
	0x0337EB3C MOV X0, X19
	0x0337EB40 MOV X2, X31
	0x0337EB44 BL 0x338CB50
	0x0337EB48 ADRP X0, 0xDAC000
	0x0337EB4C LDR X0, [X0 + 0xEF8]
	0x0337EB50 BL 0x1C16D08
	0x0337EB54 MOV X1, X0
	0x0337EB58 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x105F000
	006 Move X20, 0xD7F000
	007 Move W8, [X21+3969]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD7F000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3969], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToInt32, X0
	032 Return X0

Method: System.UInt32 System.IConvertible.ToUInt32(System.IFormatProvider provider)

Disassembly:
	0x0337EB5C BL 0x1C16DEC
	0x0337EB60 STR X30, [X31 - 0x20]!
	0x0337EB64 STP X20, X19, [X31 + 0x10]
	0x0337EB68 ADRP X20, 0x105E000
	0x0337EB6C LDRB W8, [X20 + 0xF96]
	0x0337EB70 MOV W19, W0
	0x0337EB74 TBNZ X8, 0x0, 0x337EB8C
	0x0337EB78 ADRP X0, 0xD75000
	0x0337EB7C LDR X0, [X0 + 0x5A8]
	0x0337EB80 BL 0x1C16CF4
	0x0337EB84 MOVZ W8, 0x1
	0x0337EB88 STRB W8, [X20 + 0xF96]
	0x0337EB8C TBZ X19, 0x1F, 0x337EB98
	0x0337EB90 SUBS W19, W31, W19
	0x0337EB94 B.MI 0x337EBA8
	0x0337EB98 MOV W0, W19
	0x0337EB9C LDP X20, X19, [X31 + 0x10]
	0x0337EBA0 LDR X30, [X31], #0x20
	0x0337EBA4 RET
	0x0337EBA8 ADRP X8, 0xD75000
	0x0337EBAC LDR X8, [X8 + 0x5A8]
	0x0337EBB0 LDR X0, [X8]
	0x0337EBB4 BL 0x19903D0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x105F000
	006 Move X20, 0xD7F000
	007 Move W8, [X21+3970]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD7F000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3970], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToUInt32, X0
	032 Return X0

Method: System.Int64 System.IConvertible.ToInt64(System.IFormatProvider provider)

Disassembly:
	0x0337EBB8 BL 0x337EB14
	0x0337EBBC STR X30, [X31 - 0x20]!

ISIL:
	001 Move X0, [X0]
	002 Return X0

Method: System.UInt64 System.IConvertible.ToUInt64(System.IFormatProvider provider)

Disassembly:
	0x0337EBC0 STP X20, X19, [X31 + 0x10]
	0x0337EBC4 ADRP X20, 0x105E000
	0x0337EBC8 LDRB W8, [X20 + 0xF97]
	0x0337EBCC MOV X19, X0
	0x0337EBD0 TBNZ X8, 0x0, 0x337EBE8
	0x0337EBD4 ADRP X0, 0xD75000
	0x0337EBD8 LDR X0, [X0 + 0x5A8]
	0x0337EBDC BL 0x1C16CF4
	0x0337EBE0 MOVZ W8, 0x1
	0x0337EBE4 STRB W8, [X20 + 0xF97]
	0x0337EBE8 TBZ X19, 0x0, 0x337EBF4
	0x0337EBEC SUBS X19, X31, X19
	0x0337EBF0 B.MI 0x337EC04
	0x0337EBF4 MOV X0, X19
	0x0337EBF8 LDP X20, X19, [X31 + 0x10]
	0x0337EBFC LDR X30, [X31], #0x20
	0x0337EC00 RET
	0x0337EC04 ADRP X8, 0xD75000
	0x0337EC08 LDR X8, [X8 + 0x5A8]
	0x0337EC0C LDR X0, [X8]
	0x0337EC10 BL 0x19903D0
	0x0337EC14 BL 0x337EB14
	0x0337EC18 SDIV W8, W0, W1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x105F000
	006 Move X20, 0xD7F000
	007 Move W8, [X21+3971]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD7F000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3971], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToUInt64, X0
	032 Return X0

Method: System.Single System.IConvertible.ToSingle(System.IFormatProvider provider)

Disassembly:
	0x0337EC1C MSUB W9, W8, W1, W0
	0x0337EC20 MOV W0, W8
	0x0337EC24 STR W9, [X2]
	0x0337EC28 RET
	0x0337EC2C STR X30, [X31 - 0x30]!
	0x0337EC30 STP X22, X21, [X31 + 0x10]
	0x0337EC34 STP X20, X19, [X31 + 0x20]
	0x0337EC38 ADRP X22, 0x105E000
	0x0337EC3C LDRB W8, [X22 + 0xF98]
	0x0337EC40 MOV W19, W2
	0x0337EC44 MOV W20, W1
	0x0337EC48 MOV W21, W0
	0x0337EC4C TBNZ X8, 0x0, 0x337EC70
	0x0337EC50 ADRP X0, 0xDAC000
	0x0337EC54 LDR X0, [X0 + 0xF00]
	0x0337EC58 BL 0x1C16CF4
	0x0337EC5C ADRP X0, 0xD75000
	0x0337EC60 LDR X0, [X0 + 0x5A8]
	0x0337EC64 BL 0x1C16CF4
	0x0337EC68 MOVZ W8, 0x1
	0x0337EC6C STRB W8, [X22 + 0xF98]
	0x0337EC70 CMP W20, W19
	0x0337EC74 B.LE 0x337ECA8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x105F000
	006 Move X20, 0xD7F000
	007 Move W8, [X21+3972]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD7F000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3972], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToSingle, X0
	032 Return V0

Method: System.Double System.IConvertible.ToDouble(System.IFormatProvider provider)

Disassembly:
	0x0337EC78 ADRP X8, 0xD75000
	0x0337EC7C LDR X8, [X8 + 0x5A8]
	0x0337EC80 ADRP X22, 0xDAC000
	0x0337EC84 LDR X0, [X8]
	0x0337EC88 LDR W8, [X0 + 0xE0]
	0x0337EC8C LDR X22, [X22 + 0xF00]
	0x0337EC90 CBNZ W8, 0x337EC98
	0x0337EC94 BL 0x1C16DFC
	0x0337EC98 LDR X2, [X22]
	0x0337EC9C MOV W0, W20
	0x0337ECA0 MOV W1, W19
	0x0337ECA4 BL 0x22161C0
	0x0337ECA8 CMP W21, W20
	0x0337ECAC B.GE 0x337ECB8
	0x0337ECB0 MOV W0, W20
	0x0337ECB4 B 0x337ECC0
	0x0337ECB8 CMP W21, W19
	0x0337ECBC CSEL W0, W19, W21, GT
	0x0337ECC0 LDP X20, X19, [X31 + 0x20]
	0x0337ECC4 LDP X22, X21, [X31 + 0x10]
	0x0337ECC8 LDR X30, [X31], #0x30
	0x0337ECCC RET
	0x0337ECD0 STP D9, D8, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x105F000
	006 Move X20, 0xD7F000
	007 Move W8, [X21+3973]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD7F000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3973], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToDouble, X0
	032 Return V0

Method: System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider provider)

Disassembly:
	0x0337ECD4 STP X30, X19, [X31 + 0x10]
	0x0337ECD8 ADRP X19, 0x105E000
	0x0337ECDC LDRB W8, [X19 + 0xF99]
	0x0337ECE0 MOV V8.16B, V1.16B
	0x0337ECE4 MOV V9.16B, V0.16B
	0x0337ECE8 TBNZ X8, 0x0, 0x337ED00
	0x0337ECEC ADRP X0, 0xD75000
	0x0337ECF0 LDR X0, [X0 + 0x5A8]
	0x0337ECF4 BL 0x1C16CF4
	0x0337ECF8 MOVZ W8, 0x1
	0x0337ECFC STRB W8, [X19 + 0xF99]
	0x0337ED00 FMOV X8, D9
	0x0337ED04 AND X9, X8, 0x7FFFFFFF
	0x0337ED08 MOVZ X8, 0x7FF00000
	0x0337ED0C CMP X9, X8
	0x0337ED10 B.LS 0x337ED1C
	0x0337ED14 MOV V0.16B, V9.16B
	0x0337ED18 B 0x337EDA4
	0x0337ED1C FMOV X9, D8
	0x0337ED20 AND X9, X9, 0x7FFFFFFF
	0x0337ED24 CMP X9, X8
	0x0337ED28 B.LS 0x337ED34
	0x0337ED2C MOV V0.16B, V8.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x105F000
	006 Move X20, 0xD7F000
	007 Move W8, [X21+3974]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD7F000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3974], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToDecimal, X0
	032 Return X0

Method: System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider)

Disassembly:
	0x0337ED30 B 0x337EDA4
	0x0337ED34 FMOV D0, 1
	0x0337ED38 FCMP D8, D0
	0x0337ED3C B.NE 0x337ED4C
	0x0337ED40 MOVZ X8, 0x7FF80000
	0x0337ED44 FMOV D0, X8
	0x0337ED48 B 0x337EDA4
	0x0337ED4C FCMP D9, D0
	0x0337ED50 B.EQ 0x337ED74
	0x0337ED54 MOVZ X8, 0x7FF80000
	0x0337ED58 FCMP D8, 0x0
	0x0337ED5C FMOV D0, X8
	0x0337ED60 B.EQ 0x337EDA4
	0x0337ED64 MOVZ X8, 0x7FF00000
	0x0337ED68 FMOV D1, X8
	0x0337ED6C FCMP D8, D1
	0x0337ED70 B.EQ 0x337EDA4
	0x0337ED74 ADRP X8, 0xD75000
	0x0337ED78 LDR X8, [X8 + 0x5A8]
	0x0337ED7C LDR X0, [X8]
	0x0337ED80 LDR W8, [X0 + 0xE0]
	0x0337ED84 CBNZ W8, 0x337ED8C
	0x0337ED88 BL 0x1C16DFC
	0x0337ED8C MOV V0.16B, V9.16B
	0x0337ED90 BL 0x3EB1C20
	0x0337ED94 MOV V9.16B, V0.16B
	0x0337ED98 MOV V0.16B, V8.16B
	0x0337ED9C BL 0x3EB1C20
	0x0337EDA0 FDIV D0, D9, D0
	0x0337EDA4 LDP X30, X19, [X31 + 0x10]
	0x0337EDA8 LDP D9, D8, [X31], #0x20
	0x0337EDAC RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0xDAB000
	005 Move X0, [X0+48]
	006 Call 0x1C17D08
	007 Move X19, X0
	008 Move X0, 0xDA8000
	009 Move X0, [X0+200]
	010 Call 0x1C17D08
	011 Move X20, X0
	012 Move X0, 0xDA8000
	013 Move X0, [X0+152]
	014 Call 0x1C17D08
	015 Move X2, X0
	016 Move X0, X19
	017 Move X1, X20
	018 Move X3, X31
	019 Call SR.Format, X0, X1, X2
	020 Move X19, X0
	021 Move X0, 0xD7E000
	022 Move X0, [X0+3080]
	023 Call 0x1C17D08
	024 Call 0x1C17F10
	025 Move X1, X19
	026 Move X20, X0
	027 Call InvalidCastException..ctor, X0, X1
	028 Move X0, 0xDAD000
	029 Move X0, [X0+3768]
	030 Call 0x1C17D08
	031 Move X1, X0
	032 Move X0, X20
	033 Call 0x1C17DEC

Method: System.Object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider)

Disassembly:
	0x0337EDB0 AND W8, W0, 0xFF
	0x0337EDB4 CMP W8, W1, UXTB
	0x0337EDB8 CSEL W0, W1, W0, CC
	0x0337EDBC RET
	0x0337EDC0 FCMP D0, D1
	0x0337EDC4 B.GT 0x337EDDC
	0x0337EDC8 FMOV X8, D0
	0x0337EDCC AND X8, X8, 0x7FFFFFFF
	0x0337EDD0 MOVZ X9, 0x7FF00000
	0x0337EDD4 CMP X8, X9
	0x0337EDD8 FCSEL D0, D0, D1, HI
	0x0337EDDC RET
	0x0337EDE0 SXTH W8, W0
	0x0337EDE4 CMP W8, W1, SXTH
	0x0337EDE8 CSEL W0, W1, W0, LT
	0x0337EDEC RET
	0x0337EDF0 CMP W0, W1
	0x0337EDF4 CSEL W0, W1, W0, LT
	0x0337EDF8 RET
	0x0337EDFC CMP X0, X1
	0x0337EE00 CSEL X0, X1, X0, LT
	0x0337EE04 RET
	0x0337EE08 SXTB W8, W0
	0x0337EE0C CMP W8, W1, SXTB
	0x0337EE10 CSEL W0, W1, W0, LT
	0x0337EE14 RET
	0x0337EE18 FCMP S0, S1
	0x0337EE1C B.GT 0x337EE34
	0x0337EE20 FMOV W8, S0
	0x0337EE24 AND W8, W8, 0x7FFFFFFF
	0x0337EE28 MOVZ W9, 0x7F800000
	0x0337EE2C CMP W8, W9
	0x0337EE30 FCSEL S0, S0, S1, HI
	0x0337EE34 RET
	0x0337EE38 AND W8, W0, 0xFFFF
	0x0337EE3C CMP W8, W1, UXTH
	0x0337EE40 CSEL W0, W1, W0, CC
	0x0337EE44 RET
	0x0337EE48 CMP W0, W1
	0x0337EE4C CSEL W0, W1, W0, CC
	0x0337EE50 RET
	0x0337EE54 AND W8, W0, 0xFF
	0x0337EE58 CMP W8, W1, UXTB

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x105F000
	009 Move X23, 0xD78000
	010 Move X22, 0xD7F000
	011 Move W8, [X24+3975]
	012 Move X23, [X23+2656]
	013 Move X22, [X22+2536]
	014 Move X19, X2
	015 Move X20, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0xD7F000
	022 Move X0, [X0+2536]
	023 Call 0x1C17CF4
	024 Move X0, 0xD78000
	025 Move X0, [X0+2656]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X24+3975], W8
	029 Move X8, [X21]
	030 Move X0, [X23]
	031 Add X1, X31, 8
	032 Move [X31+8], X8
	033 Call 0x1C17E04
	034 Move X8, [X22]
	035 Move X21, X0
	036 Move W9, [X8+224]
	037 Compare W9, 0
	038 JumpIfNotEqual {41}
	039 Move X0, X8
	040 Call 0x1C17DFC
	041 Move X0, X21
	042 Move X1, X20
	043 Move X2, X19
	044 Move X3, X31
	045 Call Convert.DefaultToType, X0, X1, X2
	046 Move X20, [X31+48]
	047 Move X19, [X31+56]
	048 Move X22, [X31+32]
	049 Move X21, [X31+40]
	050 Move X24, [X31+16]
	051 Move X23, [X31+24]
	052 Move X30, [X31+64]
	053 Return X0

