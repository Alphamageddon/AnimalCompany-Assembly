Type: System.WeakReference

Method: System.Void AllocateHandle(System.Object target)

Disassembly:
	0x033D66EC BL 0x1C16F28
	0x033D66F0 STR D8, [X31 - 0x30]!
	0x033D66F4 STP X30, X21, [X31 + 0x10]
	0x033D66F8 STP X20, X19, [X31 + 0x20]
	0x033D66FC ADRP X21, 0x1007000
	0x033D6700 ADRP X20, 0xD45000
	0x033D6704 LDRB W8, [X21 + 0x313]
	0x033D6708 LDR X20, [X20 + 0x5F0]
	0x033D670C MOV V8.16B, V0.16B
	0x033D6710 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+16]
	004 Move X19, X0
	005 Move X0, X1
	006 Move X2, X31
	007 Move W1, W8
	008 Call GCHandle.Alloc, X0, X1
	009 Move [X19+24], X0
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 

Method: System.Void .ctor()

Disassembly:
	0x033D6714 TBNZ X8, 0x0, 0x33D6738
	0x033D6718 ADRP X0, 0xD56000

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void .ctor(System.Object target)

Disassembly:
	0x033D671C LDR X0, [X0 + 0xDE8]
	0x033D6720 BL 0x1C16CF4
	0x033D6724 ADRP X0, 0xD45000
	0x033D6728 LDR X0, [X0 + 0x5F0]
	0x033D672C BL 0x1C16CF4
	0x033D6730 MOVZ W8, 0x1
	0x033D6734 STRB W8, [X21 + 0x313]
	0x033D6738 LDR X0, [X20]
	0x033D673C ADRP X20, 0xD56000
	0x033D6740 LDR W8, [X0 + 0xE0]
	0x033D6744 LDR X20, [X20 + 0xDE8]
	0x033D6748 CBNZ W8, 0x33D6750

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], W31
	009 Move X0, X20
	010 Move X1, X19
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]
	014 Call WeakReference.AllocateHandle, X0, X1
	015 Return 

Method: System.Void .ctor(System.Object target, System.Boolean trackResurrection)

Disassembly:
	0x033D674C BL 0x1C16DFC
	0x033D6750 LDR X0, [X20]
	0x033D6754 LDR W8, [X0 + 0xE0]
	0x033D6758 CBNZ W8, 0x33D6760
	0x033D675C BL 0x1C16DFC
	0x033D6760 MOV X0, X19
	0x033D6764 LDP X20, X19, [X31 + 0x20]
	0x033D6768 LDP X30, X21, [X31 + 0x10]
	0x033D676C MOV V0.16B, V8.16B
	0x033D6770 LDR V8, [X31], #0x30
	0x033D6774 B 0x33D6778
	0x033D6778 STR D8, [X31 - 0x40]!
	0x033D677C STP X30, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X1
	006 Move X1, X31
	007 Move X20, X0
	008 And W21, W2, 1
	009 Call Object..ctor, X0
	010 Move [X20+16], W21
	011 Move X0, X20
	012 Move X1, X19
	013 Move X20, [X31+16]
	014 Move X19, [X31+24]
	015 Move X30, [X31+32]
	016 Move X21, [X31+40]
	017 Call WeakReference.AllocateHandle, X0, X1
	018 Return 

Method: System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)

Disassembly:
	0x033D6780 STP X22, X21, [X31 + 0x20]
	0x033D6784 STP X20, X19, [X31 + 0x30]
	0x033D6788 ADRP X20, 0x1007000
	0x033D678C ADRP X21, 0xD56000
	0x033D6790 LDRB W8, [X20 + 0x355]
	0x033D6794 LDR X21, [X21 + 0xDE8]
	0x033D6798 MOV X19, X0
	0x033D679C MOV V8.16B, V0.16B
	0x033D67A0 TBNZ X8, 0x0, 0x33D67B8
	0x033D67A4 ADRP X0, 0xD56000
	0x033D67A8 LDR X0, [X0 + 0xDE8]
	0x033D67AC BL 0x1C16CF4
	0x033D67B0 MOVZ W8, 0x1
	0x033D67B4 STRB W8, [X20 + 0x355]
	0x033D67B8 STP X31, X31, [X19]
	0x033D67BC LDR X0, [X21]
	0x033D67C0 LDR W8, [X0 + 0xE0]
	0x033D67C4 CBNZ W8, 0x33D67CC
	0x033D67C8 BL 0x1C16DFC
	0x033D67CC FMOV X8, D8
	0x033D67D0 UBFM X9, X8, 0x34, 0x3E
	0x033D67D4 CMP W9, 0x3A0
	0x033D67D8 B.CC 0x33D6B30
	0x033D67DC CMP W9, 0x45F
	0x033D67E0 B.CS 0x33D6B44
	0x033D67E4 MOVZ W8, 0xA5DF
	0x033D67E8 MOVZ W10, 0x4D10
	0x033D67EC MOVZ W11, 0x5A20
	0x033D67F0 MOVK W8, 0x1250000
	0x033D67F4 MOVK W11, 0xFECC0000
	0x033D67F8 MUL W9, W9, W10
	0x033D67FC FCMP D8, 0x0
	0x033D6800 FNEG D0, D8
	0x033D6804 MOVZ W12, 0xE
	0x033D6808 ADD W10, W8, 0x1D0000
	0x033D680C ADD W20, W9, W11
	0x033D6810 CSET W22, MI
	0x033D6814 FCSEL D8, D0, D8, MI
	0x033D6818 CMP W9, W10
	0x033D681C SUB W23, W12, W20, 0x10, ASR
	0x033D6820 B.LS 0x33D6844
	0x033D6824 ADRP X8, 0xFFFFFFFFFD717000
	0x033D6828 LDR V0, [X8 + 0x998]
	0x033D682C FCMP D8, D0
	0x033D6830 B.GE 0x33D688C
	0x033D6834 ADDS W31, W23, 0x1
	0x033D6838 B.NE 0x33D688C
	0x033D683C MOV W23, W31
	0x033D6840 B 0x33D68CC
	0x033D6844 LDR X0, [X21]
	0x033D6848 CMP W9, W8
	0x033D684C MOVZ W8, 0x1C
	0x033D6850 CSEL W23, W23, W8, HI
	0x033D6854 LDR W10, [X0 + 0xE0]
	0x033D6858 CBNZ W10, 0x33D6864
	0x033D685C BL 0x1C16DFC
	0x033D6860 LDR X0, [X21]
	0x033D6864 LDR X8, [X0 + 0xB8]
	0x033D6868 LDR X8, [X8 + 0x10]
	0x033D686C CBZ X8, 0x33D6B8C
	0x033D6870 LDR W9, [X8 + 0x18]
	0x033D6874 CMP W23, W9
	0x033D6878 B.CS 0x33D6B90
	0x033D687C ADD X8, X8, W23, 0x3, UXTW
	0x033D6880 LDR V0, [X8 + 0x20]
	0x033D6884 FMUL D8, D8, D0
	0x033D6888 B 0x33D68CC
	0x033D688C LDR X0, [X21]
	0x033D6890 LDR W8, [X0 + 0xE0]
	0x033D6894 CBNZ W8, 0x33D68A0
	0x033D6898 BL 0x1C16DFC
	0x033D689C LDR X0, [X21]
	0x033D68A0 LDR X8, [X0 + 0xB8]
	0x033D68A4 LDR X8, [X8 + 0x10]
	0x033D68A8 CBZ X8, 0x33D6B8C
	0x033D68AC LDR W10, [X8 + 0x18]
	0x033D68B0 SBFM X9, X20, 0x10, 0x1F

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x1008000
	008 Move W8, [X21+745]
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0xD28000
	016 Move X0, [X0+2408]
	017 Call 0x1C17CF4
	018 Move X0, 0xD1E000
	019 Move X0, [X0+1728]
	020 Call 0x1C17CF4
	021 Move X0, 0xD49000
	022 Move X0, [X0+120]
	023 Call 0x1C17CF4
	024 Move X0, 0xD49000
	025 Move X0, [X0+128]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+745], W8
	029 Move X0, X19
	030 Move X1, X31
	031 Call Object..ctor, X0
	032 Compare X20, 0
	033 JumpIfEqual {72}
	034 Move X8, 0xD49000
	035 Move X8, [X8+128]
	036 Move X21, 0xD28000
	037 Move X23, 0xD1E000
	038 Move X22, 0xD49000
	039 Move X1, [X8]
	040 Move X21, [X21+2408]
	041 Move X23, [X23+1728]
	042 Move X22, [X22+120]
	043 Move X0, X20
	044 Move X2, X31
	045 Call SerializationInfo.GetBoolean, X0, X1
	046 And W8, W0, 1
	047 Move [X19+16], W8
	048 Move X0, [X23]
	049 Move X21, [X21]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X0, X21
	055 Move X1, X31
	056 Call Type.GetTypeFromHandle, X0
	057 Move X1, [X22]
	058 Move X2, X0
	059 Move X0, X20
	060 Move X3, X31
	061 Call SerializationInfo.GetValue, X0, X1, X2
	062 Move X1, X0
	063 Move X0, X19
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X22, [X31+16]
	067 Move X21, [X31+24]
	068 Move X30, [X31+48]
	069 Move X23, [X31+56]
	070 Call WeakReference.AllocateHandle, X0, X1
	071 Return 
	072 Move X0, 0xD23000
	073 Move X0, [X0+1320]
	074 Call 0x1C17D08
	075 Call 0x1C17F10
	076 Move X19, X0
	077 Move X0, 0xD48000
	078 Move X0, [X0+728]
	079 Call 0x1C17D08
	080 Move X1, X0
	081 Move X0, X19
	082 Move X2, X31
	083 Call ArgumentNullException..ctor, X0, X1
	084 Move X0, 0xD57000
	085 Move X0, [X0+3520]
	086 Call 0x1C17D08
	087 Move X1, X0
	088 Move X0, X19
	089 Call 0x1C17DEC

Method: System.Boolean get_IsAlive()

Disassembly:
	0x033D68B4 SUB X9, X9, 0xE
	0x033D68B8 CMP W9, W10
	0x033D68BC B.CS 0x33D6B90
	0x033D68C0 ADD X8, X8, X9, 0x3, LSL
	0x033D68C4 LDR V0, [X8 + 0x20]
	0x033D68C8 FDIV D8, D8, D0
	0x033D68CC ADRP X8, 0xFFFFFFFFFD717000
	0x033D68D0 LDR V0, [X8 + 0x8A8]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0]
	003 Move X9, [X8+408]
	004 Move X1, [X8+416]
	005 NotImplemented "Instruction BLR not yet implemented."
	006 NotImplemented "Instruction CMP not yet implemented."
	007 NotImplemented "Instruction CSET not yet implemented."
	008 Move X30, [X31+16]
	009 Return X0

Method: System.Object get_Target()

Disassembly:
	0x033D68D4 MOVZ X9, 0x7FF00000
	0x033D68D8 FMOV D1, X9
	0x033D68DC FCMP D8, D0
	0x033D68E0 CSET W8, PL
	0x033D68E4 CMP W23, 0x1B
	0x033D68E8 CSET W10, GT
	0x033D68EC FMOV D0, 8.000000000465661
	0x033D68F0 ORR W8, W10, W8, 0x0
	0x033D68F4 FMUL D0, D8, D0
	0x033D68F8 CMP W8, 0x0
	0x033D68FC FCSEL D0, D8, D0, NE
	0x033D6900 MOVZ X10, 0x80000000
	0x033D6904 FCVTZS X9, D0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Add X19, X0, 24
	004 Move X0, X19
	005 Move X1, X31
	006 Call GCHandle.get_IsAllocated, X0
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {17}
	011 Move X0, X19
	012 Move X1, X31
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Call GCHandle.get_Target, X0
	016 Return X0
	017 Move X0, X31
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Return X0

Method: System.Void set_Target(System.Object value)

Disassembly:
	0x033D6908 FCMP D0, D1
	0x033D690C CSEL X20, X10, X9, EQ
	0x033D6910 SCVTF D1, X20

ISIL:
	001 Add X0, X0, 24
	002 Move X2, X31
	003 Call GCHandle.set_Target, X0, X1
	004 Return 

Method: System.Boolean get_TrackResurrection()

Disassembly:
	0x033D6914 FSUB D0, D0, D1
	0x033D6918 FMOV D1, 0.5

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void Finalize()

Disassembly:
	0x033D691C FCMP D0, D1
	0x033D6920 B.GT 0x33D6934
	0x033D6924 TBZ X20, 0x0, 0x33D6938
	0x033D6928 FMOV D1, 0.5
	0x033D692C FCMP D0, D1
	0x033D6930 B.NE 0x33D6938
	0x033D6934 ADD X20, X20, 0x1
	0x033D6938 CBZ X20, 0x33D6B30
	0x033D693C EOR W8, W8, 0x1
	0x033D6940 ADD W23, W23, W8
	0x033D6944 UBFM W22, W22, 0x1, 0x0
	0x033D6948 TBNZ X23, 0x1F, 0x33D69AC
	0x033D694C CMP W23, 0xE
	0x033D6950 MOVZ W8, 0xE
	0x033D6954 CSEL W8, W23, W8, LT
	0x033D6958 SUBS W9, W8, 0x8
	0x033D695C B.LT 0x33D69FC
	0x033D6960 AND X10, X20, 0xFF
	0x033D6964 CBNZ X10, 0x33D69FC
	0x033D6968 MOVZ X10, 0xCEFD
	0x033D696C MOVK X10, 0x84610000
	0x033D6970 MOVK X10, 0x7711
	0x033D6974 MOVK X10, 0xABCC0000
	0x00000000 INVALID
	0x033D697C UBFM X11, X10, 0x1A, 0x3F
	0x033D6980 MOVZ W10, 0xE100
	0x033D6984 MOVK W10, 0x5F50000
	0x033D6988 MUL W10, W11, W10
	0x033D698C CMP W10, W20
	0x033D6990 MOV W10, W20
	0x033D6994 B.NE 0x33D6A00
	0x033D6998 SUB W23, W23, 0x8
	0x033D699C MOV W10, W11
	0x033D69A0 MOV W8, W9
	0x033D69A4 MOV X20, X11
	0x033D69A8 B 0x33D6A00
	0x033D69AC LDR X0, [X21]
	0x033D69B0 LDR W8, [X0 + 0xE0]
	0x033D69B4 CBNZ W8, 0x33D69C0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Add X0, X0, 24
	007 Move X1, X31
	008 Call GCHandle.Free, X0
	009 Move X0, X19
	010 Move X20, [X31+16]
	011 Move X19, [X31+24]
	012 Move X1, X31
	013 Move X30, [X31+32]
	014 Move X21, [X31+40]
	015 Call Object.Finalize, X0
	016 Return 
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X21, X0
	019 Move X0, X21
	020 Call 0x3EB2AD0
	021 Move X20, [X0]
	022 Call 0x3EB2AE0
	023 Move X0, X19
	024 Move X1, X31
	025 Call Object.Finalize, X0
	026 Compare X20, 0
	027 JumpIfNotEqual {34}
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return 
	033 Move X20, X31
	034 Move X0, X20
	035 Call 0x1C17F18
	036 Move X21, X0
	037 Move X0, X19
	038 Move X1, X31
	039 Call Object.Finalize, X0
	040 Compare X20, 0
	041 JumpIfNotEqual {44}
	042 Move X0, X21
	043 Call 0x1D2D690
	044 Move X0, X20
	045 Call 0x1C17F18
	046 Call 0x1991590

Method: System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)

Disassembly:
	0x033D69B8 BL 0x1C16DFC
	0x033D69BC LDR X0, [X21]
	0x033D69C0 LDR X8, [X0 + 0xB8]
	0x033D69C4 ADDS W31, W23, 0x9
	0x033D69C8 B.GE 0x33D6AEC
	0x033D69CC LDR X8, [X8 + 0x8]
	0x033D69D0 CBZ X8, 0x33D6B8C
	0x033D69D4 LDR W10, [X8 + 0x18]
	0x033D69D8 ORN W9, W31, W23, 0x0
	0x033D69DC CMP W9, W10
	0x033D69E0 B.CS 0x33D6B90
	0x033D69E4 ADD X8, X8, W9, 0x3, SXTW
	0x033D69E8 LDR X1, [X8 + 0x20]
	0x033D69EC MOV X0, X20
	0x033D69F0 MOV X2, X19
	0x033D69F4 BL 0x33DAEF8
	0x033D69F8 B 0x33D6B2C
	0x033D69FC MOV W10, W20
	0x033D6A00 SUBS W11, W8, 0x4
	0x033D6A04 B.LT 0x33D6A48
	0x033D6A08 AND W9, W10, 0xF
	0x033D6A0C CBNZ W9, 0x33D6A48
	0x033D6A10 MOVZ X9, 0x594B
	0x033D6A14 MOVK X9, 0x38860000
	0x033D6A18 MOVK X9, 0xC5D6
	0x033D6A1C MOVK X9, 0x346D0000
	0x00000000 INVALID
	0x033D6A24 UBFM X9, X9, 0xB, 0x3F
	0x033D6A28 MOVZ W12, 0x2710
	0x033D6A2C MUL W12, W9, W12
	0x033D6A30 CMP W12, W10
	0x033D6A34 B.NE 0x33D6A48
	0x033D6A38 SUB W23, W23, 0x4
	0x033D6A3C MOV W8, W11
	0x033D6A40 MOV X20, X9
	0x033D6A44 B 0x33D6A4C
	0x033D6A48 MOV W9, W10
	0x033D6A4C CMP W8, 0x1
	0x033D6A50 B.LE 0x33D6A98
	0x033D6A54 AND W10, W9, 0x3
	0x033D6A58 CBNZ W10, 0x33D6A98
	0x033D6A5C MOVZ X11, 0xF5C3
	0x033D6A60 MOVK X11, 0x5C280000
	0x033D6A64 MOVK X11, 0xC28F
	0x033D6A68 UBFM X10, X20, 0x2, 0x3F
	0x033D6A6C MOVK X11, 0x28F50000
	0x00000000 INVALID
	0x033D6A74 UBFM X10, X10, 0x2, 0x3F
	0x033D6A78 MOVZ W11, 0x64
	0x033D6A7C MUL W11, W10, W11
	0x033D6A80 CMP W11, W9
	0x033D6A84 B.NE 0x33D6A98
	0x033D6A88 SUB W23, W23, 0x2
	0x033D6A8C SUB W8, W8, 0x2
	0x033D6A90 MOV X20, X10
	0x033D6A94 B 0x33D6A9C
	0x033D6A98 MOV W10, W9
	0x033D6A9C CMP W8, 0x1
	0x033D6AA0 B.LT 0x33D6AD0
	0x033D6AA4 TBNZ X10, 0x0, 0x33D6AD0
	0x033D6AA8 ORR X8, X31, 0xCCCCCCCCCCCCCCCC
	0x033D6AAC MOVK X8, 0xCCCD
	0x00000000 INVALID
	0x033D6AB4 UBFM X8, X8, 0x3, 0x3F
	0x033D6AB8 ADD W9, W8, W8, 0x2, LSL
	0x033D6ABC UBFM W9, W9, 0x1F, 0x1E
	0x033D6AC0 CMP W9, W10
	0x033D6AC4 CSET W9, EQ
	0x033D6AC8 CSEL X20, X8, X20, EQ
	0x033D6ACC SUB W23, W23, W9
	0x033D6AD0 LDR X0, [X21]
	0x033D6AD4 ORR W22, W22, W23, 0x10
	0x033D6AD8 LDR W8, [X0 + 0xE0]
	0x033D6ADC CBNZ W8, 0x33D6AE4
	0x033D6AE0 BL 0x1C16DFC
	0x033D6AE4 STR X20, [X19 + 0x8]
	0x033D6AE8 B 0x33D6B2C
	0x033D6AEC LDR X8, [X8]
	0x033D6AF0 CBZ X8, 0x33D6B8C
	0x033D6AF4 LDR W10, [X8 + 0x18]
	0x033D6AF8 SUB W9, W31, W23
	0x033D6AFC CMP W9, W10
	0x033D6B00 B.CS 0x33D6B90
	0x033D6B04 ADD X8, X8, W9, 0x2, UXTW
	0x033D6B08 LDR W8, [X8 + 0x20]
	0x033D6B0C AND X9, X20, 0x0
	0x033D6B10 UBFM X10, X20, 0x20, 0x3F
	0x033D6B14 MUL X9, X9, X8
	0x033D6B18 MUL X8, X10, X8
	0x033D6B1C ADD X8, X8, X9, 0x20, LSR
	0x033D6B20 STP W9, W8, [X19 + 0x8]
	0x033D6B24 UBFM X8, X8, 0x20, 0x3F
	0x033D6B28 STR W8, [X19 + 0x4]
	0x033D6B2C STR W22, [X19]
	0x033D6B30 LDP X20, X19, [X31 + 0x30]
	0x033D6B34 LDP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1008000
	006 Move W8, [X21+746]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xD49000
	014 Move X0, [X0+120]
	015 Call 0x1C17CF4
	016 Move X0, 0xD49000
	017 Move X0, [X0+128]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+746], W8
	021 Compare X19, 0
	022 JumpIfEqual {52}
	023 Move X8, [X20]
	024 Move X21, 0xD49000
	025 Move X0, X20
	026 Move X9, [X8+440]
	027 Move X1, [X8+448]
	028 Move X21, [X21+128]
	029 NotImplemented "Instruction BLR not yet implemented."
	030 Move X1, [X21]
	031 And W2, W0, 1
	032 Move X0, X19
	033 Move X3, X31
	034 Call SerializationInfo.AddValue, X0, X1, X2
	035 Move X8, [X20]
	036 Move X9, [X8+408]
	037 Move X1, [X8+416]
	038 Move X0, X20
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Move X8, 0xD49000
	041 Move X8, [X8+120]
	042 Move X2, X0
	043 Move X1, [X8]
	044 Move X0, X19
	045 Move X3, X31
	046 Call SerializationInfo.AddValue, X0, X1, X2
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 
	052 Move X0, 0xD23000
	053 Move X0, [X0+1320]
	054 Call 0x1C17D08
	055 Call 0x1C17F10
	056 Move X19, X0
	057 Move X0, 0xD48000
	058 Move X0, [X0+728]
	059 Call 0x1C17D08
	060 Move X1, X0
	061 Move X0, X19
	062 Move X2, X31
	063 Call ArgumentNullException..ctor, X0, X1
	064 Move X0, 0xD57000
	065 Move X0, [X0+3528]
	066 Call 0x1C17D08
	067 Move X1, X0
	068 Move X0, X19
	069 Call 0x1C17DEC
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X20, X0
	072 Move X0, X20
	073 Call 0x3EB2AD0
	074 Move X20, X0
	075 Move X0, 0xD1E000
	076 Move X0, [X0+2000]
	077 Call 0x1C17D08
	078 Move X8, [X20]
	079 Move X1, [X8]
	080 Call 0x1C18270
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfNotEqual {99}
	085 Call 0x3EB2AE0
	086 Move X0, 0xD49000
	087 Move X0, [X0+120]
	088 Call 0x1C17D08
	089 Move X1, X0
	090 Move X0, X19
	091 Move X20, [X31+16]
	092 Move X19, [X31+24]
	093 Move X2, X31
	094 Move X3, X31
	095 Move X30, [X31+32]
	096 Move X21, [X31+40]
	097 Call SerializationInfo.AddValue, X0, X1, X2
	098 Return 
	099 Move W0, 8
	100 Call 0x3EB2AF0
	101 Move X8, [X20]
	102 Move [X0], X8
	103 Move X1, 0xADF000
	104 Add X1, X1, 3672
	105 Move X2, X31
	106 Call 0x3EB2B00
	107 Move X20, X0
	108 Call 0x3EB2AE0
	109 Move X0, X20
	110 Call 0x1D2D690
	111 Call 0x1991590

