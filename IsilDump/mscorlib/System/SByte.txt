Type: System.SByte

Method: System.Int32 CompareTo(System.Object obj)

Disassembly:
	0x0338FE40 MOV X19, X0
	0x0338FE44 TBNZ X8, 0x0, 0x338FE5C
	0x0338FE48 ADRP X0, 0xD99000
	0x0338FE4C LDR X0, [X0 + 0x78]
	0x0338FE50 BL 0x1C16CF4
	0x0338FE54 MOVZ W8, 0x1
	0x0338FE58 STRB W8, [X21 + 0x38]
	0x0338FE5C LDR V8, [X19]
	0x0338FE60 MOV X0, X31
	0x0338FE64 BL 0x333AE98
	0x0338FE68 LDR X8, [X20]
	0x0338FE6C MOV X19, X0
	0x0338FE70 LDR W9, [X8 + 0xE0]
	0x0338FE74 CBNZ W9, 0x338FE80
	0x0338FE78 MOV X0, X8
	0x0338FE7C BL 0x1C16DFC
	0x0338FE80 MOV X1, X19
	0x0338FE84 LDP X20, X19, [X31 + 0x20]
	0x0338FE88 LDP X30, X21, [X31 + 0x10]
	0x0338FE8C MOV V0.16B, V8.16B
	0x0338FE90 MOV X0, X31
	0x0338FE94 MOV X2, X31
	0x0338FE98 LDR V8, [X31], #0x30
	0x0338FE9C B 0x3383290
	0x0338FEA0 STR D8, [X31 - 0x30]!
	0x0338FEA4 STR X30, [X31 + 0x8]
	0x0338FEA8 STP X22, X21, [X31 + 0x10]
	0x0338FEAC STP X20, X19, [X31 + 0x20]
	0x0338FEB0 ADRP X22, 0x104E000
	0x0338FEB4 ADRP X21, 0xD99000
	0x0338FEB8 LDRB W8, [X22 + 0x39]
	0x0338FEBC LDR X21, [X21 + 0x78]
	0x0338FEC0 MOV X19, X1
	0x0338FEC4 MOV X20, X0
	0x0338FEC8 TBNZ X8, 0x0, 0x338FEE0
	0x0338FECC ADRP X0, 0xD99000
	0x0338FED0 LDR X0, [X0 + 0x78]
	0x0338FED4 BL 0x1C16CF4
	0x0338FED8 MOVZ W8, 0x1
	0x0338FEDC STRB W8, [X22 + 0x39]
	0x0338FEE0 LDR V8, [X20]
	0x0338FEE4 MOV X0, X19
	0x0338FEE8 MOV X1, X31
	0x0338FEEC BL 0x333ACEC
	0x0338FEF0 LDR X8, [X21]
	0x0338FEF4 MOV X19, X0
	0x0338FEF8 LDR W9, [X8 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x104F000
	006 Move W8, [X21+35]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD8E000
	014 Move X0, [X0+1712]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+35], W8
	018 Compare X19, 0
	019 JumpIfEqual {30}
	020 Move X8, 0xD8E000
	021 Move X8, [X8+1712]
	022 Move X9, [X19]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 NotImplemented "Instruction INVALID not yet implemented."
	026 Move X0, X19
	027 Call 0x1C17E08
	028 NotImplemented "Instruction INVALID not yet implemented."
	029 Subtract W0, W20, W8
	030 Move W0, 1
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Return X0
	036 Move X0, 0xD6D000
	037 Move X0, [X0+1400]
	038 Call 0x1C17D08
	039 Call 0x1C17F10
	040 Move X19, X0
	041 Move X0, 0xD9D000
	042 Move X0, [X0+568]
	043 Call 0x1C17D08
	044 Move X1, X0
	045 Move X0, X19
	046 Move X2, X31
	047 Call ArgumentException..ctor, X0, X1
	048 Move X0, 0xD9D000
	049 Move X0, [X0+576]
	050 Call 0x1C17D08
	051 Move X1, X0
	052 Move X0, X19
	053 Call 0x1C17DEC

Method: System.Int32 CompareTo(System.SByte value)

Disassembly:
	0x0338FEFC CBNZ W9, 0x338FF08
	0x0338FF00 MOV X0, X8
	0x0338FF04 BL 0x1C16DFC

ISIL:
	001 NotImplemented "Instruction INVALID not yet implemented."
	002 Subtract W0, W8, W1
	003 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x0338FF08 MOV X1, X19
	0x0338FF0C LDP X20, X19, [X31 + 0x20]
	0x0338FF10 LDP X22, X21, [X31 + 0x10]
	0x0338FF14 LDR X30, [X31 + 0x8]
	0x0338FF18 MOV V0.16B, V8.16B
	0x0338FF1C MOV X0, X31
	0x0338FF20 MOV X2, X31
	0x0338FF24 LDR V8, [X31], #0x30
	0x0338FF28 B 0x3383290
	0x0338FF2C STR D8, [X31 - 0x30]!
	0x0338FF30 STR X30, [X31 + 0x8]
	0x0338FF34 STP X22, X21, [X31 + 0x10]
	0x0338FF38 STP X20, X19, [X31 + 0x20]
	0x0338FF3C ADRP X22, 0x104E000
	0x0338FF40 ADRP X21, 0xD99000
	0x0338FF44 LDRB W8, [X22 + 0x3A]
	0x0338FF48 LDR X21, [X21 + 0x78]
	0x0338FF4C MOV X19, X1
	0x0338FF50 MOV X20, X0
	0x0338FF54 TBNZ X8, 0x0, 0x338FF6C
	0x0338FF58 ADRP X0, 0xD99000
	0x0338FF5C LDR X0, [X0 + 0x78]
	0x0338FF60 BL 0x1C16CF4
	0x0338FF64 MOVZ W8, 0x1
	0x0338FF68 STRB W8, [X22 + 0x3A]
	0x0338FF6C LDR V8, [X20]
	0x0338FF70 MOV X0, X31
	0x0338FF74 BL 0x333AE98
	0x0338FF78 LDR X8, [X21]
	0x0338FF7C MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x104F000
	006 Move W8, [X21+36]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD8E000
	014 Move X0, [X0+1712]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+36], W8
	018 Compare X19, 0
	019 JumpIfEqual {25}
	020 Move X8, 0xD8E000
	021 Move X8, [X8+1712]
	022 Move X9, [X19]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W0, W31
	026 Move W20, [X20]
	027 Move X0, X19
	028 Call 0x1C17E08
	029 Move W8, [X0]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSET not yet implemented."
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return X0

Method: System.Boolean Equals(System.SByte obj)

Disassembly:
	0x0338FF80 LDR W9, [X8 + 0xE0]
	0x0338FF84 CBNZ W9, 0x338FF90
	0x0338FF88 MOV X0, X8
	0x0338FF8C BL 0x1C16DFC

ISIL:
	001 Move W8, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x0338FF90 MOV X0, X19
	0x0338FF94 MOV X1, X20
	0x0338FF98 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 NotImplemented "Instruction INVALID not yet implemented."
	002 Xor W0, W8, W8
	003 Return X0

Method: System.String ToString()

Disassembly:
	0x0338FF9C LDP X22, X21, [X31 + 0x10]
	0x0338FFA0 LDR X30, [X31 + 0x8]
	0x0338FFA4 MOV V0.16B, V8.16B
	0x0338FFA8 MOV X2, X31
	0x0338FFAC LDR V8, [X31], #0x30
	0x0338FFB0 B 0x3383290
	0x0338FFB4 STR D8, [X31 - 0x40]!
	0x0338FFB8 STP X30, X23, [X31 + 0x10]
	0x0338FFBC STP X22, X21, [X31 + 0x20]
	0x0338FFC0 STP X20, X19, [X31 + 0x30]
	0x0338FFC4 ADRP X23, 0x104E000
	0x0338FFC8 ADRP X22, 0xD99000
	0x0338FFCC LDRB W8, [X23 + 0x3B]
	0x0338FFD0 LDR X22, [X22 + 0x78]
	0x0338FFD4 MOV X20, X2
	0x0338FFD8 MOV X19, X1
	0x0338FFDC MOV X21, X0
	0x0338FFE0 TBNZ X8, 0x0, 0x338FFF8
	0x0338FFE4 ADRP X0, 0xD99000
	0x0338FFE8 LDR X0, [X0 + 0x78]
	0x0338FFEC BL 0x1C16CF4
	0x0338FFF0 MOVZ W8, 0x1
	0x0338FFF4 STRB W8, [X23 + 0x3B]
	0x0338FFF8 LDR V8, [X21]
	0x0338FFFC MOV X0, X20
	0x03390000 MOV X1, X31
	0x03390004 BL 0x333ACEC
	0x03390008 LDR X8, [X22]
	0x0339000C MOV X20, X0
	0x03390010 LDR W9, [X8 + 0xE0]
	0x03390014 CBNZ W9, 0x3390020
	0x03390018 MOV X0, X8
	0x0339001C BL 0x1C16DFC
	0x03390020 MOV X0, X19
	0x03390024 MOV X1, X20
	0x03390028 LDP X20, X19, [X31 + 0x30]
	0x0339002C LDP X22, X21, [X31 + 0x20]
	0x03390030 LDP X30, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x104F000
	007 Move X20, 0xD94000
	008 Move X21, 0xD9A000
	009 Move W8, [X22+37]
	010 Move X20, [X20+472]
	011 Move X21, [X21+120]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xD9A000
	018 Move X0, [X0+120]
	019 Call 0x1C17CF4
	020 Move X0, 0xD94000
	021 Move X0, [X0+472]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+37], W8
	025 Move X1, [X20]
	026 NotImplemented "Instruction INVALID not yet implemented."
	027 Move X0, X31
	028 Call ReadOnlySpan`1<Char>.op_Implicit, X0
	029 Move X20, X0
	030 Move X0, [X21]
	031 Move X21, X1
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move W0, W19
	037 Move X1, X20
	038 Move X2, X21
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X3, X31
	044 Move X4, X31
	045 Move X30, [X31+48]
	046 Call Number.FormatInt32, X0, X1, X2
	047 Return X0

Method: System.String ToString(System.IFormatProvider provider)

Disassembly:
	0x03390034 MOV V0.16B, V8.16B
	0x03390038 MOV X2, X31
	0x0339003C LDR V8, [X31], #0x40
	0x03390040 B 0x3383290
	0x03390044 STR D8, [X31 - 0x60]!
	0x03390048 STP X30, X27, [X31 + 0x10]
	0x0339004C STP X26, X25, [X31 + 0x20]
	0x03390050 STP X24, X23, [X31 + 0x30]
	0x03390054 STP X22, X21, [X31 + 0x40]
	0x03390058 STP X20, X19, [X31 + 0x50]
	0x0339005C ADRP X27, 0x104D000
	0x03390060 ADRP X26, 0xD98000
	0x03390064 LDRB W8, [X27 + 0x3C]
	0x03390068 LDR X26, [X26 + 0x78]
	0x0339006C MOV X24, X6
	0x03390070 MOV X21, X5
	0x03390074 MOV X23, X4
	0x03390078 MOV X19, X3
	0x0339007C MOV X20, X2
	0x03390080 MOV X22, X1
	0x03390084 MOV X25, X0
	0x03390088 TBNZ X8, 0x0, 0x33900A0
	0x0339008C ADRP X0, 0xD98000
	0x03390090 LDR X0, [X0 + 0x78]
	0x03390094 BL 0x1C16CF4
	0x03390098 MOVZ W8, 0x1
	0x0339009C STRB W8, [X27 + 0x3C]
	0x033900A0 LDR V8, [X25]
	0x033900A4 MOV X0, X24
	0x033900A8 MOV X1, X31
	0x033900AC BL 0x333ACEC
	0x033900B0 LDR X8, [X26]
	0x033900B4 MOV X24, X0
	0x033900B8 LDR W9, [X8 + 0xE0]
	0x033900BC CBNZ W9, 0x33900C8
	0x033900C0 MOV X0, X8
	0x033900C4 BL 0x1C16DFC
	0x033900C8 MOV X0, X23
	0x033900CC MOV X1, X21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x104E000
	008 Move X21, 0xD93000
	009 Move X22, 0xD99000
	010 Move W8, [X23+38]
	011 Move X21, [X21+472]
	012 Move X22, [X22+120]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xD99000
	020 Move X0, [X0+120]
	021 Call 0x1C17CF4
	022 Move X0, 0xD93000
	023 Move X0, [X0+472]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+38], W8
	027 Move X1, [X21]
	028 NotImplemented "Instruction INVALID not yet implemented."
	029 Move X0, X31
	030 Call ReadOnlySpan`1<Char>.op_Implicit, X0
	031 Move X21, X0
	032 Move X0, [X22]
	033 Move X22, X1
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move W0, W20
	039 Move X1, X21
	040 Move X2, X22
	041 Move X3, X19
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X4, X31
	047 Move X30, [X31+48]
	048 Move X23, [X31+56]
	049 Call Number.FormatInt32, X0, X1, X2
	050 Return X0

Method: System.String ToString(System.String format, System.IFormatProvider provider)

Disassembly:
	0x033900D0 MOV X2, X24
	0x033900D4 MOV X3, X22
	0x033900D8 MOV X4, X20
	0x033900DC MOV X5, X19
	0x033900E0 LDP X20, X19, [X31 + 0x50]
	0x033900E4 LDP X22, X21, [X31 + 0x40]
	0x033900E8 LDP X24, X23, [X31 + 0x30]
	0x033900EC LDP X26, X25, [X31 + 0x20]
	0x033900F0 LDP X30, X27, [X31 + 0x10]
	0x033900F4 MOV V0.16B, V8.16B
	0x033900F8 MOV X6, X31
	0x033900FC LDR V8, [X31], #0x60
	0x03390100 B 0x33836C8
	0x03390104 STP X30, X21, [X31 - 0x20]!
	0x03390108 STP X20, X19, [X31 + 0x10]
	0x0339010C ADRP X20, 0x104D000
	0x03390110 LDRB W8, [X20 + 0x3D]
	0x03390114 MOV X19, X0
	0x03390118 TBNZ X8, 0x0, 0x3390130
	0x0339011C ADRP X0, 0xD98000
	0x03390120 LDR X0, [X0 + 0x78]
	0x03390124 BL 0x1C16CF4
	0x03390128 MOVZ W8, 0x1
	0x0339012C STRB W8, [X20 + 0x3D]
	0x03390130 CBZ X19, 0x33901B0
	0x03390134 ADRP X20, 0x1049000
	0x03390138 ADRP X21, 0xD98000
	0x0339013C LDRB W8, [X20 + 0x762]
	0x03390140 LDR X21, [X21 + 0x78]
	0x03390144 CBNZ W8, 0x339015C
	0x03390148 ADRP X0, 0xD8A000
	0x0339014C LDR X0, [X0 + 0x290]
	0x03390150 BL 0x1C16CF4
	0x03390154 MOVZ W8, 0x1
	0x03390158 STRB W8, [X20 + 0x762]
	0x0339015C MOV X0, X19
	0x03390160 MOV X1, X31
	0x03390164 BL 0x3225708
	0x03390168 LDR W19, [X19 + 0x10]
	0x0339016C MOV X20, X0
	0x03390170 MOV X0, X31
	0x03390174 BL 0x333AE98
	0x03390178 LDR X8, [X21]
	0x0339017C MOV X21, X0
	0x03390180 LDR W9, [X8 + 0xE0]
	0x03390184 CBNZ W9, 0x3390190
	0x03390188 MOV X0, X8
	0x0339018C BL 0x1C16DFC
	0x03390190 MOV X0, X20
	0x03390194 MOV X1, X19
	0x03390198 LDP X20, X19, [X31 + 0x10]
	0x0339019C MOVZ W2, 0xE7
	0x033901A0 MOV X3, X21
	0x033901A4 MOV X4, X31
	0x033901A8 LDP X30, X21, [X31], #0x20
	0x033901AC B 0x338ACCC
	0x033901B0 MOVZ W0, 0x30
	0x033901B4 BL 0x338F3E0
	0x033901B8 STR X30, [X31 - 0x30]!
	0x033901BC STP X22, X21, [X31 + 0x10]
	0x033901C0 STP X20, X19, [X31 + 0x20]
	0x033901C4 ADRP X21, 0x104D000
	0x033901C8 LDRB W8, [X21 + 0x3E]
	0x033901CC MOV X19, X1
	0x033901D0 MOV X20, X0
	0x033901D4 TBNZ X8, 0x0, 0x33901EC
	0x033901D8 ADRP X0, 0xD98000
	0x033901DC LDR X0, [X0 + 0x78]
	0x033901E0 BL 0x1C16CF4
	0x033901E4 MOVZ W8, 0x1
	0x033901E8 STRB W8, [X21 + 0x3E]
	0x033901EC CBZ X20, 0x3390274
	0x033901F0 ADRP X21, 0x1049000
	0x033901F4 ADRP X22, 0xD98000
	0x033901F8 LDRB W8, [X21 + 0x762]
	0x033901FC LDR X22, [X22 + 0x78]
	0x03390200 CBNZ W8, 0x3390218
	0x03390204 ADRP X0, 0xD8A000
	0x03390208 LDR X0, [X0 + 0x290]
	0x0339020C BL 0x1C16CF4
	0x03390210 MOVZ W8, 0x1
	0x03390214 STRB W8, [X21 + 0x762]
	0x03390218 MOV X0, X20
	0x0339021C MOV X1, X31
	0x03390220 BL 0x3225708
	0x03390224 LDR W20, [X20 + 0x10]
	0x03390228 MOV X21, X0
	0x0339022C MOV X0, X19
	0x03390230 MOV X1, X31
	0x03390234 BL 0x333ACEC
	0x03390238 LDR X8, [X22]
	0x0339023C MOV X19, X0
	0x03390240 LDR W9, [X8 + 0xE0]
	0x03390244 CBNZ W9, 0x3390250
	0x03390248 MOV X0, X8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x104E000
	008 Move W8, [X22+39]
	009 Move X19, X2
	010 Move X20, X1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD99000
	017 Move X0, [X0+120]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+39], W8
	021 Move X23, 0xD99000
	022 NotImplemented "Instruction INVALID not yet implemented."
	023 Move X23, [X23+120]
	024 Compare X20, 0
	025 JumpIfEqual {79}
	026 Move TEMP, X22
	027 And TEMP, TEMP, -2147483648
	028 Compare TEMP, -2147483648
	029 JumpIfNotEqual {79}
	030 Move W8, [X20+16]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X0, X20
	033 Move W1, W31
	034 Move X2, X31
	035 Call String.get_Chars, X0, X1
	036 And W8, W0, 0xFFFF
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X0, X20
	039 Move W1, W31
	040 Move X2, X31
	041 Call String.get_Chars, X0, X1
	042 And W8, W0, 0xFFFF
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X22, 0x104A000
	045 Move W8, [X22+1890]
	046 Move W21, [X21]
	047 Compare W8, 0
	048 JumpIfNotEqual {54}
	049 Move X0, 0xD8B000
	050 Move X0, [X0+656]
	051 Call 0x1C17CF4
	052 Move W8, 1
	053 Move [X22+1890], W8
	054 Move X0, X20
	055 Move X1, X31
	056 Call String.GetRawStringData, X0
	057 Move X8, [X23]
	058 Move W20, [X20+16]
	059 Move X22, X0
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {65}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move W0, W21
	066 Move X1, X22
	067 Move X2, X20
	068 Move X3, X19
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X22, [X31+16]
	072 Move X21, [X31+24]
	073 Move X4, X31
	074 Move X30, [X31+48]
	075 Move X23, [X31+56]
	076 Call Number.FormatUInt32, X0, X1, X2
	077 Return X0
	078 Move W22, [X21]
	079 Move X21, 0x104A000
	080 Move W8, [X21+1890]
	081 Compare W8, 0
	082 JumpIfNotEqual {88}
	083 Move X0, 0xD8B000
	084 Move X0, [X0+656]
	085 Call 0x1C17CF4
	086 Move W8, 1
	087 Move [X21+1890], W8
	088 NotImplemented "Instruction SXTB not yet implemented."
	089 Compare X20, 0
	090 JumpIfEqual {96}
	091 Move X0, X20
	092 Move X1, X31
	093 Call String.GetRawStringData, X0
	094 Move W20, [X20+16]
	095 Move X22, X0
	096 Move X22, X31
	097 Move X0, [X23]
	098 Move W8, [X0+224]
	099 Compare W8, 0
	100 JumpIfNotEqual {102}
	101 Call 0x1C17DFC
	102 Move W0, W21
	103 Move X1, X22
	104 Move X2, X20
	105 Move X3, X19
	106 Move X20, [X31+32]
	107 Move X19, [X31+40]
	108 Move X22, [X31+16]
	109 Move X21, [X31+24]
	110 Move X4, X31
	111 Move X30, [X31+48]
	112 Move X23, [X31+56]
	113 Call Number.FormatInt32, X0, X1, X2
	114 Return X0

Method: System.Boolean TryFormat(System.Span`1<System.Char> destination, out System.Int32 charsWritten, System.ReadOnlySpan`1<System.Char> format = null, System.IFormatProvider provider = null)

Disassembly:
	0x0339024C BL 0x1C16DFC
	0x03390250 MOV X0, X21
	0x03390254 MOV X1, X20
	0x03390258 MOV X3, X19
	0x0339025C LDP X20, X19, [X31 + 0x20]
	0x03390260 LDP X22, X21, [X31 + 0x10]
	0x03390264 MOVZ W2, 0xE7
	0x03390268 MOV X4, X31
	0x0339026C LDR X30, [X31], #0x30
	0x03390270 B 0x338ACCC
	0x03390274 MOVZ W0, 0x30
	0x03390278 BL 0x338F3E0
	0x0339027C STP X30, X23, [X31 - 0x30]!
	0x03390280 STP X22, X21, [X31 + 0x10]
	0x03390284 STP X20, X19, [X31 + 0x20]
	0x03390288 ADRP X22, 0x104D000
	0x0339028C LDRB W8, [X22 + 0x3F]
	0x03390290 MOV X20, X2
	0x03390294 MOV W19, W1
	0x03390298 MOV X21, X0
	0x0339029C TBNZ X8, 0x0, 0x33902B4
	0x033902A0 ADRP X0, 0xD98000
	0x033902A4 LDR X0, [X0 + 0x78]
	0x033902A8 BL 0x1C16CF4
	0x033902AC MOVZ W8, 0x1
	0x033902B0 STRB W8, [X22 + 0x3F]
	0x033902B4 MOV W0, W19
	0x033902B8 MOV X1, X31
	0x033902BC BL 0x333B408
	0x033902C0 CBZ X21, 0x3390348
	0x033902C4 ADRP X22, 0x1049000
	0x033902C8 ADRP X23, 0xD98000
	0x033902CC LDRB W8, [X22 + 0x762]
	0x033902D0 LDR X23, [X23 + 0x78]
	0x033902D4 CBNZ W8, 0x33902EC
	0x033902D8 ADRP X0, 0xD8A000
	0x033902DC LDR X0, [X0 + 0x290]
	0x033902E0 BL 0x1C16CF4
	0x033902E4 MOVZ W8, 0x1
	0x033902E8 STRB W8, [X22 + 0x762]
	0x033902EC MOV X0, X21
	0x033902F0 MOV X1, X31
	0x033902F4 BL 0x3225708
	0x033902F8 LDR W21, [X21 + 0x10]
	0x033902FC MOV X22, X0
	0x03390300 MOV X0, X20
	0x03390304 MOV X1, X31
	0x03390308 BL 0x333ACEC
	0x0339030C LDR X8, [X23]
	0x03390310 MOV X20, X0
	0x03390314 LDR W9, [X8 + 0xE0]
	0x03390318 CBNZ W9, 0x3390324
	0x0339031C MOV X0, X8
	0x03390320 BL 0x1C16DFC
	0x03390324 MOV X0, X22
	0x03390328 MOV X1, X21
	0x0339032C MOV W2, W19
	0x03390330 MOV X3, X20
	0x03390334 LDP X20, X19, [X31 + 0x20]
	0x03390338 LDP X22, X21, [X31 + 0x10]
	0x0339033C MOV X4, X31
	0x03390340 LDP X30, X23, [X31], #0x30
	0x03390344 B 0x338ACCC
	0x03390348 MOVZ W0, 0x30
	0x0339034C BL 0x338F3E0
	0x03390350 STP X30, X21, [X31 - 0x20]!
	0x03390354 STP X20, X19, [X31 + 0x10]
	0x03390358 MOV X19, X1
	0x0339035C CBZ X0, 0x33903C0
	0x03390360 ADRP X21, 0x1049000
	0x03390364 LDRB W8, [X21 + 0x762]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X26, 0x104E000
	011 Move W8, [X26+40]
	012 Move X20, X6
	013 Move X23, X5
	014 Move X24, X4
	015 Move X19, X3
	016 Move X21, X2
	017 Move X22, X1
	018 Move X25, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 Invalid "Jump target not found in method."
	023 Move X0, 0xD99000
	024 Move X0, [X0+120]
	025 Call 0x1C17CF4
	026 Move X0, 0xD93000
	027 Move X0, [X0+40]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X26+40], W8
	031 NotImplemented "Instruction INVALID not yet implemented."
	032 Move X8, 0xD99000
	033 Move X8, [X8+120]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 And W25, W9, 255
	036 Move TEMP, X9
	037 And TEMP, TEMP, -2147483648
	038 Compare TEMP, -2147483648
	039 JumpIfNotEqual {67}
	040 NotImplemented "Instruction LDRH not yet implemented."
	041 Or W9, W9, 32
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X0, [X8]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move W0, W25
	049 Move X1, X24
	050 Move X2, X23
	051 Move X3, X20
	052 Move X4, X22
	053 Move X5, X21
	054 Move X6, X19
	055 Move X20, [X31+64]
	056 Move X19, [X31+72]
	057 Move X22, [X31+48]
	058 Move X21, [X31+56]
	059 Move X24, [X31+32]
	060 Move X23, [X31+40]
	061 Move X26, [X31+16]
	062 Move X25, [X31+24]
	063 Move X7, X31
	064 Move X30, [X31+80]
	065 Call Number.TryFormatUInt32, X0, X1, X2, X3, X4
	066 Return X0
	067 Move X0, [X8]
	068 NotImplemented "Instruction SXTB not yet implemented."
	069 Move W8, [X0+224]
	070 Compare W8, 0
	071 JumpIfNotEqual {73}
	072 Call 0x1C17DFC
	073 Move W0, W25
	074 Move X1, X24
	075 Move X2, X23
	076 Move X3, X20
	077 Move X4, X22
	078 Move X5, X21
	079 Move X6, X19
	080 Move X20, [X31+64]
	081 Move X19, [X31+72]
	082 Move X22, [X31+48]
	083 Move X21, [X31+56]
	084 Move X24, [X31+32]
	085 Move X23, [X31+40]
	086 Move X26, [X31+16]
	087 Move X25, [X31+24]
	088 Move X7, X31
	089 Move X30, [X31+80]
	090 Call Number.TryFormatInt32, X0, X1, X2, X3, X4
	091 Return X0

Method: System.SByte Parse(System.String s, System.IFormatProvider provider)

Disassembly:
	0x03390368 MOV X20, X0
	0x0339036C CBNZ W8, 0x3390384
	0x03390370 ADRP X0, 0xD8A000
	0x03390374 LDR X0, [X0 + 0x290]
	0x03390378 BL 0x1C16CF4
	0x0339037C MOVZ W8, 0x1
	0x03390380 STRB W8, [X21 + 0x762]
	0x03390384 MOV X0, X20
	0x03390388 MOV X1, X31
	0x0339038C BL 0x3225708
	0x03390390 LDR W20, [X20 + 0x10]
	0x03390394 MOV X21, X0
	0x03390398 MOV X0, X31
	0x0339039C BL 0x333AE98
	0x033903A0 MOV X1, X20
	0x033903A4 MOV X4, X19
	0x033903A8 LDP X20, X19, [X31 + 0x10]
	0x033903AC MOVZ W2, 0xE7
	0x033903B0 MOV X3, X0
	0x033903B4 MOV X0, X21
	0x033903B8 LDP X30, X21, [X31], #0x20
	0x033903BC B 0x33903D0
	0x033903C0 STR W31, [X19]
	0x033903C4 LDP X20, X19, [X31 + 0x10]
	0x033903C8 LDP X30, X21, [X31], #0x20
	0x033903CC RET
	0x033903D0 STR X30, [X31 - 0x50]!
	0x033903D4 STP X26, X25, [X31 + 0x10]
	0x033903D8 STP X24, X23, [X31 + 0x20]
	0x033903DC STP X22, X21, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X0, 0
	006 JumpIfEqual {36}
	007 Move X21, 0x104A000
	008 Move W8, [X21+1890]
	009 Move X19, X1
	010 Move X20, X0
	011 Compare W8, 0
	012 JumpIfNotEqual {18}
	013 Move X0, 0xD8B000
	014 Move X0, [X0+656]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1890], W8
	018 Move X0, X20
	019 Move X1, X31
	020 Call String.GetRawStringData, X0
	021 Move W20, [X20+16]
	022 Move X21, X0
	023 Move X0, X19
	024 Move X1, X31
	025 Call NumberFormatInfo.GetInstance, X0
	026 Move X1, X20
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move W2, 7
	030 Move X3, X0
	031 Move X0, X21
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Call SByte.Parse, X0, X1, X2
	035 Return X0
	036 Move W0, 48
	037 Call ThrowHelper.ThrowArgumentNullException, X0

Method: System.SByte Parse(System.String s, System.Globalization.NumberStyles style, System.IFormatProvider provider)

Disassembly:
	0x0339059C MOV X1, X21
	0x033905A0 MOV X2, X24
	0x033905A4 LDR X4, [X8]
	0x033905A8 MOV X3, X23
	0x033905AC BL 0x1F96ECC
	0x033905B0 TBZ X0, 0x0, 0x33905BC
	0x033905B4 MOVZ W8, 0xFF800000
	0x033905B8 B 0x339065C
	0x033905BC LDRB W8, [X26 + 0x762]
	0x033905C0 LDR X22, [X22 + 0x68]
	0x033905C4 CBZ W8, 0x33905E4
	0x033905C8 CBZ X22, 0x33905FC
	0x033905CC MOV X0, X22
	0x033905D0 MOV X1, X31
	0x033905D4 BL 0x3225708
	0x033905D8 LDR W22, [X22 + 0x10]
	0x033905DC MOV X23, X0
	0x033905E0 B 0x3390600
	0x033905E4 ADRP X0, 0xD8A000
	0x033905E8 LDR X0, [X0 + 0x290]
	0x033905EC BL 0x1C16CF4
	0x033905F0 MOVZ W8, 0x1
	0x033905F4 STRB W8, [X26 + 0x762]
	0x033905F8 CBNZ X22, 0x33905CC
	0x033905FC MOV X23, X31
	0x03390600 LDRB W8, [X25 + 0xD06]
	0x03390604 CBNZ W8, 0x3390628
	0x03390608 ADRP X0, 0xD8A000
	0x0339060C LDR X0, [X0 + 0x2D0]
	0x03390610 BL 0x1C16CF4
	0x03390614 ADRP X0, 0xD92000
	0x03390618 LDR X0, [X0 + 0x28]
	0x0339061C BL 0x1C16CF4
	0x03390620 MOVZ W8, 0x1
	0x03390624 STRB W8, [X25 + 0xD06]
	0x03390628 CMP W21, W22

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W19, W1
	007 Move X21, X0
	008 Move W0, W1
	009 Move X1, X31
	010 Move X20, X2
	011 Call NumberFormatInfo.ValidateParseStyleInteger, X0
	012 Compare X21, 0
	013 JumpIfEqual {42}
	014 Move X22, 0x104A000
	015 Move W8, [X22+1890]
	016 Compare W8, 0
	017 JumpIfNotEqual {23}
	018 Move X0, 0xD8B000
	019 Move X0, [X0+656]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+1890], W8
	023 Move X0, X21
	024 Move X1, X31
	025 Call String.GetRawStringData, X0
	026 Move W21, [X21+16]
	027 Move X22, X0
	028 Move X0, X20
	029 Move X1, X31
	030 Call NumberFormatInfo.GetInstance, X0
	031 Move X3, X0
	032 Move X0, X22
	033 Move X1, X21
	034 Move W2, W19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Call SByte.Parse, X0, X1, X2
	041 Return X0
	042 Move W0, 48
	043 Call ThrowHelper.ThrowArgumentNullException, X0

Method: System.SByte Parse(System.ReadOnlySpan`1<System.Char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info)

Disassembly:
	0x03390404 MOV X21, X0
	0x03390408 TBNZ X8, 0x0, 0x3390420
	0x0339040C ADRP X0, 0xD98000
	0x03390410 LDR X0, [X0 + 0x78]
	0x03390414 BL 0x1C16CF4
	0x03390418 MOVZ W8, 0x1
	0x0339041C STRB W8, [X25 + 0x40]
	0x03390420 LDR X0, [X24]
	0x03390424 LDR W8, [X0 + 0xE0]
	0x03390428 CBNZ W8, 0x3390430
	0x0339042C BL 0x1C16DFC
	0x03390430 MOV X0, X21
	0x03390434 MOV X1, X20
	0x03390438 MOV W2, W23
	0x0339043C MOV X3, X22
	0x03390440 MOV X4, X19
	0x03390444 MOV X5, X31
	0x03390448 BL 0x338B238
	0x0339044C TBNZ X0, 0x0, 0x3390660
	0x03390450 MOV X0, X21
	0x03390454 MOV X1, X20
	0x03390458 MOV X2, X31
	0x0339045C BL 0x337713C
	0x03390460 CBZ X22, 0x3390684
	0x03390464 ADRP X26, 0x1049000
	0x03390468 LDRB W8, [X26 + 0x762]
	0x0339046C LDR X23, [X22 + 0x70]
	0x03390470 MOV X20, X0
	0x03390474 MOV X21, X1
	0x03390478 CBZ W8, 0x3390498
	0x0339047C CBZ X23, 0x33904B0
	0x03390480 MOV X0, X23
	0x03390484 MOV X1, X31
	0x03390488 BL 0x3225708
	0x0339048C LDR W23, [X23 + 0x10]
	0x03390490 MOV X24, X0
	0x03390494 B 0x33904B4
	0x03390498 ADRP X0, 0xD8A000
	0x0339049C LDR X0, [X0 + 0x290]
	0x033904A0 BL 0x1C16CF4
	0x033904A4 MOVZ W8, 0x1
	0x033904A8 STRB W8, [X26 + 0x762]
	0x033904AC CBNZ X23, 0x3390480
	0x033904B0 MOV X24, X31
	0x033904B4 ADRP X25, 0x104C000
	0x033904B8 LDRB W8, [X25 + 0xD06]
	0x033904BC CBNZ W8, 0x33904E0
	0x033904C0 ADRP X0, 0xD8A000
	0x033904C4 LDR X0, [X0 + 0x2D0]
	0x033904C8 BL 0x1C16CF4
	0x033904CC ADRP X0, 0xD92000
	0x033904D0 LDR X0, [X0 + 0x28]
	0x033904D4 BL 0x1C16CF4
	0x033904D8 MOVZ W8, 0x1
	0x033904DC STRB W8, [X25 + 0xD06]
	0x033904E0 CMP W21, W23
	0x033904E4 B.NE 0x3390518
	0x033904E8 CBZ W21, 0x3390510
	0x033904EC ADRP X8, 0xD8A000
	0x033904F0 LDR X8, [X8 + 0x2D0]
	0x033904F4 MOV X0, X20
	0x033904F8 MOV X1, X21
	0x033904FC MOV X2, X24
	0x03390500 LDR X4, [X8]
	0x03390504 MOV X3, X23
	0x03390508 BL 0x1F96ECC
	0x0339050C TBZ X0, 0x0, 0x3390518
	0x03390510 MOVZ W8, 0x7F800000
	0x03390514 B 0x339065C
	0x03390518 LDRB W8, [X26 + 0x762]
	0x0339051C LDR X23, [X22 + 0x78]
	0x03390520 CBZ W8, 0x3390540
	0x03390524 CBZ X23, 0x3390558
	0x03390528 MOV X0, X23
	0x0339052C MOV X1, X31
	0x03390530 BL 0x3225708
	0x03390534 LDR W23, [X23 + 0x10]
	0x03390538 MOV X24, X0
	0x0339053C B 0x339055C
	0x03390540 ADRP X0, 0xD8A000
	0x03390544 LDR X0, [X0 + 0x290]
	0x03390548 BL 0x1C16CF4
	0x0339054C MOVZ W8, 0x1
	0x03390550 STRB W8, [X26 + 0x762]
	0x03390554 CBNZ X23, 0x3390528
	0x03390558 MOV X24, X31
	0x0339055C LDRB W8, [X25 + 0xD06]
	0x03390560 CBNZ W8, 0x3390584
	0x03390564 ADRP X0, 0xD8A000
	0x03390568 LDR X0, [X0 + 0x2D0]
	0x0339056C BL 0x1C16CF4
	0x03390570 ADRP X0, 0xD92000
	0x03390574 LDR X0, [X0 + 0x28]
	0x03390578 BL 0x1C16CF4
	0x0339057C MOVZ W8, 0x1
	0x03390580 STRB W8, [X25 + 0xD06]
	0x03390584 CMP W21, W23
	0x03390588 B.NE 0x33905BC
	0x0339058C CBZ W21, 0x33905B4
	0x03390590 ADRP X8, 0xD8A000
	0x03390594 LDR X8, [X8 + 0x2D0]
	0x03390598 MOV X0, X20

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x104E000
	009 Move X24, 0xD99000
	010 Move W8, [X23+41]
	011 Move X24, [X24+120]
	012 Move X20, X3
	013 Move W19, W2
	014 Move X21, X1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xD99000
	021 Move X0, [X0+120]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+41], W8
	025 Move X0, [X24]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X22
	031 Move X1, X21
	032 Move W2, W19
	033 Move X3, X20
	034 Move X4, X31
	035 Call Number.ParseInt32, X0, X1, X2
	036 Move TEMP, X19
	037 And TEMP, TEMP, 512
	038 Compare TEMP, 512
	039 JumpIfEqual {58}
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X0, 0xD64000
	042 Move X0, [X0+2136]
	043 Call 0x1C17D08
	044 Call 0x1C17F10
	045 Move X19, X0
	046 Move X0, 0xD99000
	047 Move X0, [X0+416]
	048 Call 0x1C17D08
	049 Move X1, X0
	050 Move X0, X19
	051 Call OverflowException..ctor, X0, X1
	052 Move X0, 0xD9C000
	053 Move X0, [X0+592]
	054 Call 0x1C17D08
	055 Move X1, X0
	056 Move X0, X19
	057 Call 0x1C17DEC
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X20, [X31+48]
	060 Move X19, [X31+56]
	061 Move X22, [X31+32]
	062 Move X21, [X31+40]
	063 Move X24, [X31+16]
	064 Move X23, [X31+24]
	065 Move X30, [X31+64]
	066 Return X0
	067 Move X19, X0
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move X0, X19
	070 Call 0x3EB2AD0
	071 Move X19, X0
	072 Move X0, 0xD64000
	073 Move X0, [X0+2136]
	074 Call 0x1C17D08
	075 Move X8, [X19]
	076 Move X1, [X8]
	077 Call 0x1C18270
	078 Move TEMP, X0
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfNotEqual {102}
	082 Move X19, [X19]
	083 Call 0x3EB2AE0
	084 Move X0, 0xD64000
	085 Move X0, [X0+2136]
	086 Call 0x1C17D08
	087 Call 0x1C17F10
	088 Move X20, X0
	089 Move X0, 0xD99000
	090 Move X0, [X0+416]
	091 Call 0x1C17D08
	092 Move X1, X0
	093 Move X0, X20
	094 Move X2, X19
	095 Call OverflowException..ctor, X0, X1, X2
	096 Move X0, 0xD9C000
	097 Move X0, [X0+592]
	098 Call 0x1C17D08
	099 Move X1, X0
	100 Move X0, X20
	101 Call 0x1C17DEC
	102 Move W0, 8
	103 Call 0x3EB2AF0
	104 Move X8, [X19]
	105 Move [X0], X8
	106 Move X1, 0xB25000
	107 Add X1, X1, 3672
	108 Move X2, X31
	109 Call 0x3EB2B00
	110 Move X19, X0
	111 Call 0x3EB2AE0
	112 Move X0, X19
	113 Call 0x1D2D690
	114 Call 0x1991590

Method: System.TypeCode GetTypeCode()

Disassembly:
	0x0339062C B.NE 0x339067C
	0x03390630 CBZ W21, 0x3390658

ISIL:
	001 Move W0, 5
	002 Return X0

Method: System.Boolean System.IConvertible.ToBoolean(System.IFormatProvider provider)

Disassembly:
	0x03390634 ADRP X8, 0xD8A000
	0x03390638 LDR X8, [X8 + 0x2D0]
	0x0339063C MOV X0, X20
	0x03390640 MOV X1, X21
	0x03390644 MOV X2, X23
	0x03390648 LDR X4, [X8]
	0x0339064C MOV X3, X22
	0x03390650 BL 0x1F96ECC
	0x03390654 TBZ X0, 0x0, 0x339067C
	0x03390658 MOVZ W8, 0x7FC00000
	0x0339065C STR W8, [X19]
	0x03390660 MOVZ W0, 0x1
	0x03390664 LDP X20, X19, [X31 + 0x40]
	0x03390668 LDP X22, X21, [X31 + 0x30]
	0x0339066C LDP X24, X23, [X31 + 0x20]
	0x03390670 LDP X26, X25, [X31 + 0x10]
	0x03390674 LDR X30, [X31], #0x50
	0x03390678 RET
	0x0339067C MOV W0, W31
	0x03390680 B 0x3390664
	0x03390684 BL 0x1C16F20
	0x03390688 STP X30, X23, [X31 - 0x30]!
	0x0339068C STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x104E000
	006 Move X20, 0xD6D000
	007 Move W8, [X21+42]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD6D000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+42], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToBoolean, X0
	032 Return X0

Method: System.Char System.IConvertible.ToChar(System.IFormatProvider provider)

Disassembly:
	0x03390690 STP X20, X19, [X31 + 0x20]
	0x03390694 MOV W20, W1
	0x03390698 MOV X22, X0
	0x0339069C MOV W0, W1
	0x033906A0 MOV X1, X31
	0x033906A4 MOV X19, X3
	0x033906A8 MOV X21, X2
	0x033906AC BL 0x333B408
	0x033906B0 CBZ X22, 0x3390718
	0x033906B4 ADRP X23, 0x1049000
	0x033906B8 LDRB W8, [X23 + 0x762]
	0x033906BC CBNZ W8, 0x33906D4
	0x033906C0 ADRP X0, 0xD8A000
	0x033906C4 LDR X0, [X0 + 0x290]
	0x033906C8 BL 0x1C16CF4
	0x033906CC MOVZ W8, 0x1
	0x033906D0 STRB W8, [X23 + 0x762]
	0x033906D4 MOV X0, X22
	0x033906D8 MOV X1, X31
	0x033906DC BL 0x3225708
	0x033906E0 LDR W22, [X22 + 0x10]
	0x033906E4 MOV X23, X0
	0x033906E8 MOV X0, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x104E000
	006 Move X20, 0xD6D000
	007 Move W8, [X21+43]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD6D000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+43], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToChar, X0
	032 Return X0

Method: System.SByte System.IConvertible.ToSByte(System.IFormatProvider provider)

Disassembly:
	0x033906EC MOV X1, X31
	0x033906F0 BL 0x333ACEC

ISIL:
	001 Move W0, [X0]
	002 Return X0

Method: System.Byte System.IConvertible.ToByte(System.IFormatProvider provider)

Disassembly:
	0x033906F4 MOV X1, X22
	0x033906F8 MOV W2, W20
	0x033906FC MOV X4, X19
	0x03390700 LDP X20, X19, [X31 + 0x20]
	0x03390704 LDP X22, X21, [X31 + 0x10]
	0x03390708 MOV X3, X0
	0x0339070C MOV X0, X23
	0x03390710 LDP X30, X23, [X31], #0x30
	0x03390714 B 0x33903D0
	0x03390718 STR W31, [X19]
	0x0339071C LDP X20, X19, [X31 + 0x20]
	0x03390720 LDP X22, X21, [X31 + 0x10]
	0x03390724 MOV W0, W31
	0x03390728 LDP X30, X23, [X31], #0x30
	0x0339072C RET
	0x03390730 MOVZ W0, 0xD
	0x03390734 RET
	0x03390738 STR D8, [X31 - 0x30]!
	0x0339073C STP X30, X21, [X31 + 0x10]
	0x03390740 STP X20, X19, [X31 + 0x20]
	0x03390744 ADRP X21, 0x104D000
	0x03390748 ADRP X20, 0xD6C000
	0x0339074C LDRB W8, [X21 + 0x41]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x104E000
	006 Move X20, 0xD6D000
	007 Move W8, [X21+44]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD6D000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+44], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToByte, X0
	032 Return X0

Method: System.Int16 System.IConvertible.ToInt16(System.IFormatProvider provider)

Disassembly:
	0x03390750 LDR X20, [X20 + 0x9E8]
	0x03390754 MOV X19, X0
	0x03390758 TBNZ X8, 0x0, 0x3390770
	0x0339075C ADRP X0, 0xD6C000
	0x03390760 LDR X0, [X0 + 0x9E8]
	0x03390764 BL 0x1C16CF4
	0x03390768 MOVZ W8, 0x1
	0x0339076C STRB W8, [X21 + 0x41]
	0x03390770 LDR X0, [X20]
	0x03390774 LDR V8, [X19]
	0x03390778 LDR W8, [X0 + 0xE0]
	0x0339077C CBNZ W8, 0x3390784
	0x03390780 BL 0x1C16DFC
	0x03390784 LDP X20, X19, [X31 + 0x20]
	0x03390788 LDP X30, X21, [X31 + 0x10]
	0x0339078C MOV V0.16B, V8.16B
	0x03390790 MOV X0, X31
	0x03390794 LDR V8, [X31], #0x30
	0x03390798 B 0x331E55C
	0x0339079C STR X30, [X31 - 0x20]!
	0x033907A0 STP X20, X19, [X31 + 0x10]
	0x033907A4 ADRP X0, 0xD98000
	0x033907A8 LDR X0, [X0 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x104E000
	006 Move X20, 0xD6D000
	007 Move W8, [X21+45]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD6D000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+45], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToInt16, X0
	032 Return X0

Method: System.UInt16 System.IConvertible.ToUInt16(System.IFormatProvider provider)

Disassembly:
	0x033907AC BL 0x1C16D08
	0x033907B0 MOV X19, X0
	0x033907B4 ADRP X0, 0xD95000
	0x033907B8 LDR X0, [X0 + 0xE8]
	0x033907BC BL 0x1C16D08
	0x033907C0 MOV X20, X0
	0x033907C4 ADRP X0, 0xD95000
	0x033907C8 LDR X0, [X0 + 0xE0]
	0x033907CC BL 0x1C16D08
	0x033907D0 MOV X2, X0
	0x033907D4 MOV X0, X19
	0x033907D8 MOV X1, X20
	0x033907DC MOV X3, X31
	0x033907E0 BL 0x320A264
	0x033907E4 MOV X19, X0
	0x033907E8 ADRP X0, 0xD6B000
	0x033907EC LDR X0, [X0 + 0xC08]
	0x033907F0 BL 0x1C16D08
	0x033907F4 BL 0x1C16F10
	0x033907F8 MOV X1, X19
	0x033907FC MOV X2, X31
	0x03390800 MOV X20, X0
	0x03390804 BL 0x337B498

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x104E000
	006 Move X20, 0xD6D000
	007 Move W8, [X21+46]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD6D000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+46], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToUInt16, X0
	032 Return X0

Method: System.Int32 System.IConvertible.ToInt32(System.IFormatProvider provider)

Disassembly:
	0x03390808 ADRP X0, 0xD9B000
	0x0339080C LDR X0, [X0 + 0x270]

ISIL:
	001 NotImplemented "Instruction INVALID not yet implemented."
	002 Return X0

Method: System.UInt32 System.IConvertible.ToUInt32(System.IFormatProvider provider)

Disassembly:
	0x03390810 BL 0x1C16D08
	0x03390814 MOV X1, X0
	0x03390818 MOV X0, X20
	0x0339081C BL 0x1C16DEC
	0x03390820 STR D8, [X31 - 0x30]!
	0x03390824 STP X30, X21, [X31 + 0x10]
	0x03390828 STP X20, X19, [X31 + 0x20]
	0x0339082C ADRP X21, 0x104D000
	0x03390830 ADRP X20, 0xD6C000
	0x03390834 LDRB W8, [X21 + 0x42]
	0x03390838 LDR X20, [X20 + 0x9E8]
	0x0339083C MOV X19, X0
	0x03390840 TBNZ X8, 0x0, 0x3390858
	0x03390844 ADRP X0, 0xD6C000
	0x03390848 LDR X0, [X0 + 0x9E8]
	0x0339084C BL 0x1C16CF4
	0x03390850 MOVZ W8, 0x1
	0x03390854 STRB W8, [X21 + 0x42]
	0x03390858 LDR X0, [X20]
	0x0339085C LDR V8, [X19]
	0x03390860 LDR W8, [X0 + 0xE0]
	0x03390864 CBNZ W8, 0x339086C
	0x03390868 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x104E000
	006 Move X20, 0xD6D000
	007 Move W8, [X21+47]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD6D000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+47], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToUInt32, X0
	032 Return X0

Method: System.Int64 System.IConvertible.ToInt64(System.IFormatProvider provider)

Disassembly:
	0x0339086C LDP X20, X19, [X31 + 0x20]
	0x03390870 LDP X30, X21, [X31 + 0x10]
	0x03390874 MOV V0.16B, V8.16B
	0x03390878 MOV X0, X31
	0x0339087C LDR V8, [X31], #0x30
	0x03390880 B 0x331EEF0
	0x03390884 STR D8, [X31 - 0x30]!
	0x03390888 STP X30, X21, [X31 + 0x10]
	0x0339088C STP X20, X19, [X31 + 0x20]
	0x03390890 ADRP X21, 0x104D000
	0x03390894 ADRP X20, 0xD6C000
	0x03390898 LDRB W8, [X21 + 0x43]
	0x0339089C LDR X20, [X20 + 0x9E8]
	0x033908A0 MOV X19, X0
	0x033908A4 TBNZ X8, 0x0, 0x33908BC
	0x033908A8 ADRP X0, 0xD6C000
	0x033908AC LDR X0, [X0 + 0x9E8]
	0x033908B0 BL 0x1C16CF4
	0x033908B4 MOVZ W8, 0x1
	0x033908B8 STRB W8, [X21 + 0x43]
	0x033908BC LDR X0, [X20]
	0x033908C0 LDR V8, [X19]
	0x033908C4 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x104E000
	006 Move X20, 0xD6D000
	007 Move W8, [X21+48]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD6D000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+48], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToInt64, X0
	032 Return X0

Method: System.UInt64 System.IConvertible.ToUInt64(System.IFormatProvider provider)

Disassembly:
	0x033908C8 CBNZ W8, 0x33908D0
	0x033908CC BL 0x1C16DFC
	0x033908D0 LDP X20, X19, [X31 + 0x20]
	0x033908D4 LDP X30, X21, [X31 + 0x10]
	0x033908D8 MOV V0.16B, V8.16B
	0x033908DC MOV X0, X31
	0x033908E0 LDR V8, [X31], #0x30
	0x033908E4 B 0x331F594
	0x033908E8 STR D8, [X31 - 0x30]!
	0x033908EC STP X30, X21, [X31 + 0x10]
	0x033908F0 STP X20, X19, [X31 + 0x20]
	0x033908F4 ADRP X21, 0x104D000
	0x033908F8 ADRP X20, 0xD6C000
	0x033908FC LDRB W8, [X21 + 0x44]
	0x03390900 LDR X20, [X20 + 0x9E8]
	0x03390904 MOV X19, X0
	0x03390908 TBNZ X8, 0x0, 0x3390920
	0x0339090C ADRP X0, 0xD6C000
	0x03390910 LDR X0, [X0 + 0x9E8]
	0x03390914 BL 0x1C16CF4
	0x03390918 MOVZ W8, 0x1
	0x0339091C STRB W8, [X21 + 0x44]
	0x03390920 LDR X0, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x104E000
	006 Move X20, 0xD6D000
	007 Move W8, [X21+49]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD6D000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+49], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToUInt64, X0
	032 Return X0

Method: System.Single System.IConvertible.ToSingle(System.IFormatProvider provider)

Disassembly:
	0x03390924 LDR V8, [X19]
	0x03390928 LDR W8, [X0 + 0xE0]
	0x0339092C CBNZ W8, 0x3390934
	0x03390930 BL 0x1C16DFC
	0x03390934 LDP X20, X19, [X31 + 0x20]
	0x03390938 LDP X30, X21, [X31 + 0x10]
	0x0339093C MOV V0.16B, V8.16B
	0x03390940 MOV X0, X31
	0x03390944 LDR V8, [X31], #0x30
	0x03390948 B 0x331FB00
	0x0339094C STR D8, [X31 - 0x30]!
	0x03390950 STP X30, X21, [X31 + 0x10]
	0x03390954 STP X20, X19, [X31 + 0x20]
	0x03390958 ADRP X21, 0x104D000
	0x0339095C ADRP X20, 0xD6C000
	0x03390960 LDRB W8, [X21 + 0x45]
	0x03390964 LDR X20, [X20 + 0x9E8]
	0x03390968 MOV X19, X0
	0x0339096C TBNZ X8, 0x0, 0x3390984
	0x03390970 ADRP X0, 0xD6C000
	0x03390974 LDR X0, [X0 + 0x9E8]
	0x03390978 BL 0x1C16CF4
	0x0339097C MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x104E000
	006 Move X20, 0xD6D000
	007 Move W8, [X21+50]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD6D000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+50], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToSingle, X0
	032 Return V0

Method: System.Double System.IConvertible.ToDouble(System.IFormatProvider provider)

Disassembly:
	0x03390980 STRB W8, [X21 + 0x45]
	0x03390984 LDR X0, [X20]
	0x03390988 LDR V8, [X19]
	0x0339098C LDR W8, [X0 + 0xE0]
	0x03390990 CBNZ W8, 0x3390998
	0x03390994 BL 0x1C16DFC
	0x03390998 LDP X20, X19, [X31 + 0x20]
	0x0339099C LDP X30, X21, [X31 + 0x10]
	0x033909A0 MOV V0.16B, V8.16B
	0x033909A4 MOV X0, X31
	0x033909A8 LDR V8, [X31], #0x30
	0x033909AC B 0x3320048
	0x033909B0 STR D8, [X31 - 0x30]!
	0x033909B4 STP X30, X21, [X31 + 0x10]
	0x033909B8 STP X20, X19, [X31 + 0x20]
	0x033909BC ADRP X21, 0x104D000
	0x033909C0 ADRP X20, 0xD6C000
	0x033909C4 LDRB W8, [X21 + 0x46]
	0x033909C8 LDR X20, [X20 + 0x9E8]
	0x033909CC MOV X19, X0
	0x033909D0 TBNZ X8, 0x0, 0x33909E8
	0x033909D4 ADRP X0, 0xD6C000
	0x033909D8 LDR X0, [X0 + 0x9E8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x104E000
	006 Move X20, 0xD6D000
	007 Move W8, [X21+51]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD6D000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+51], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToDouble, X0
	032 Return V0

Method: System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider provider)

Disassembly:
	0x033909DC BL 0x1C16CF4
	0x033909E0 MOVZ W8, 0x1
	0x033909E4 STRB W8, [X21 + 0x46]
	0x033909E8 LDR X0, [X20]
	0x033909EC LDR V8, [X19]
	0x033909F0 LDR W8, [X0 + 0xE0]
	0x033909F4 CBNZ W8, 0x33909FC
	0x033909F8 BL 0x1C16DFC
	0x033909FC LDP X20, X19, [X31 + 0x20]
	0x03390A00 LDP X30, X21, [X31 + 0x10]
	0x03390A04 MOV V0.16B, V8.16B
	0x03390A08 MOV X0, X31
	0x03390A0C LDR V8, [X31], #0x30
	0x03390A10 B 0x332049C
	0x03390A14 STR D8, [X31 - 0x30]!
	0x03390A18 STP X30, X21, [X31 + 0x10]
	0x03390A1C STP X20, X19, [X31 + 0x20]
	0x03390A20 ADRP X21, 0x104D000
	0x03390A24 ADRP X20, 0xD6C000
	0x03390A28 LDRB W8, [X21 + 0x47]
	0x03390A2C LDR X20, [X20 + 0x9E8]
	0x03390A30 MOV X19, X0
	0x03390A34 TBNZ X8, 0x0, 0x3390A4C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x104E000
	006 Move X20, 0xD6D000
	007 Move W8, [X21+52]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD6D000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+52], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToDecimal, X0
	032 Return X0

Method: System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider)

Disassembly:
	0x03390A38 ADRP X0, 0xD6C000
	0x03390A3C LDR X0, [X0 + 0x9E8]
	0x03390A40 BL 0x1C16CF4
	0x03390A44 MOVZ W8, 0x1
	0x03390A48 STRB W8, [X21 + 0x47]
	0x03390A4C LDR X0, [X20]
	0x03390A50 LDR V8, [X19]
	0x03390A54 LDR W8, [X0 + 0xE0]
	0x03390A58 CBNZ W8, 0x3390A60
	0x03390A5C BL 0x1C16DFC
	0x03390A60 LDP X20, X19, [X31 + 0x20]
	0x03390A64 LDP X30, X21, [X31 + 0x10]
	0x03390A68 MOV V0.16B, V8.16B
	0x03390A6C MOV X0, X31
	0x03390A70 LDR V8, [X31], #0x30
	0x03390A74 B 0x33209A8
	0x03390A78 STR D8, [X31 - 0x30]!
	0x03390A7C STP X30, X21, [X31 + 0x10]
	0x03390A80 STP X20, X19, [X31 + 0x20]
	0x03390A84 ADRP X21, 0x104D000
	0x03390A88 ADRP X20, 0xD6C000
	0x03390A8C LDRB W8, [X21 + 0x48]
	0x03390A90 LDR X20, [X20 + 0x9E8]
	0x03390A94 MOV X19, X0
	0x03390A98 TBNZ X8, 0x0, 0x3390AB0
	0x03390A9C ADRP X0, 0xD6C000
	0x03390AA0 LDR X0, [X0 + 0x9E8]
	0x03390AA4 BL 0x1C16CF4
	0x03390AA8 MOVZ W8, 0x1
	0x03390AAC STRB W8, [X21 + 0x48]
	0x03390AB0 LDR X0, [X20]
	0x03390AB4 LDR V8, [X19]
	0x03390AB8 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0xD99000
	005 Move X0, [X0+48]
	006 Call 0x1C17D08
	007 Move X19, X0
	008 Move X0, 0xD96000
	009 Move X0, [X0+176]
	010 Call 0x1C17D08
	011 Move X20, X0
	012 Move X0, 0xD96000
	013 Move X0, [X0+152]
	014 Call 0x1C17D08
	015 Move X2, X0
	016 Move X0, X19
	017 Move X1, X20
	018 Move X3, X31
	019 Call SR.Format, X0, X1, X2
	020 Move X19, X0
	021 Move X0, 0xD6C000
	022 Move X0, [X0+3080]
	023 Call 0x1C17D08
	024 Call 0x1C17F10
	025 Move X1, X19
	026 Move X2, X31
	027 Move X20, X0
	028 Call InvalidCastException..ctor, X0, X1
	029 Move X0, 0xD9C000
	030 Move X0, [X0+600]
	031 Call 0x1C17D08
	032 Move X1, X0
	033 Move X0, X20
	034 Call 0x1C17DEC

Method: System.Object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider)

Disassembly:
	0x03390ABC CBNZ W8, 0x3390AC4
	0x03390AC0 BL 0x1C16DFC
	0x03390AC4 LDP X20, X19, [X31 + 0x20]
	0x03390AC8 LDP X30, X21, [X31 + 0x10]
	0x03390ACC MOV V0.16B, V8.16B
	0x03390AD0 MOV X0, X31
	0x03390AD4 LDR V8, [X31], #0x30
	0x03390AD8 B 0x3320DAC
	0x03390ADC STR D8, [X31 - 0x30]!
	0x03390AE0 STP X30, X21, [X31 + 0x10]
	0x03390AE4 STP X20, X19, [X31 + 0x20]
	0x03390AE8 ADRP X21, 0x104D000
	0x03390AEC ADRP X20, 0xD6C000
	0x03390AF0 LDRB W8, [X21 + 0x49]
	0x03390AF4 LDR X20, [X20 + 0x9E8]
	0x03390AF8 MOV X19, X0
	0x03390AFC TBNZ X8, 0x0, 0x3390B14
	0x03390B00 ADRP X0, 0xD6C000
	0x03390B04 LDR X0, [X0 + 0x9E8]
	0x03390B08 BL 0x1C16CF4
	0x03390B0C MOVZ W8, 0x1
	0x03390B10 STRB W8, [X21 + 0x49]
	0x03390B14 LDR X0, [X20]
	0x03390B18 LDR V8, [X19]
	0x03390B1C LDR W8, [X0 + 0xE0]
	0x03390B20 CBNZ W8, 0x3390B28
	0x03390B24 BL 0x1C16DFC
	0x03390B28 LDP X20, X19, [X31 + 0x20]
	0x03390B2C LDP X30, X21, [X31 + 0x10]
	0x03390B30 MOV V0.16B, V8.16B
	0x03390B34 MOV X0, X31
	0x03390B38 LDR V8, [X31], #0x30
	0x03390B3C B 0x3321374
	0x03390B40 LDR V0, [X0]
	0x03390B44 RET
	0x03390B48 STR D8, [X31 - 0x30]!
	0x03390B4C STP X30, X21, [X31 + 0x10]
	0x03390B50 STP X20, X19, [X31 + 0x20]
	0x03390B54 ADRP X21, 0x104D000
	0x03390B58 ADRP X20, 0xD6C000
	0x03390B5C LDRB W8, [X21 + 0x4A]
	0x03390B60 LDR X20, [X20 + 0x9E8]
	0x03390B64 MOV X19, X0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x104E000
	009 Move X23, 0xD8D000
	010 Move X22, 0xD6D000
	011 Move W8, [X24+53]
	012 Move X23, [X23+1712]
	013 Move X22, [X22+2536]
	014 Move X19, X2
	015 Move X20, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0xD6D000
	022 Move X0, [X0+2536]
	023 Call 0x1C17CF4
	024 Move X0, 0xD8D000
	025 Move X0, [X0+1712]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X24+53], W8
	029 Move W8, [X21]
	030 Move X0, [X23]
	031 Add X1, X31, 12
	032 Move [X31+12], W8
	033 Call 0x1C17E04
	034 Move X8, [X22]
	035 Move X21, X0
	036 Move W9, [X8+224]
	037 Compare W9, 0
	038 JumpIfNotEqual {41}
	039 Move X0, X8
	040 Call 0x1C17DFC
	041 Move X0, X21
	042 Move X1, X20
	043 Move X2, X19
	044 Move X3, X31
	045 Call Convert.DefaultToType, X0, X1, X2
	046 Move X20, [X31+48]
	047 Move X19, [X31+56]
	048 Move X22, [X31+32]
	049 Move X21, [X31+40]
	050 Move X24, [X31+16]
	051 Move X23, [X31+24]
	052 Move X30, [X31+64]
	053 Return X0

