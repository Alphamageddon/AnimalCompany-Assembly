Type: System.UInt64

Method: System.Int32 CompareTo(System.Object value)

Disassembly:
	0x0339B7EC TBZ X0, 0x0, 0x339B830
	0x0339B7F0 ADRP X8, 0xFFFFFFFFFE81F000
	0x0339B7F4 ADD X8, X8, 0xA44
	0x0339B7F8 B 0x339B844
	0x0339B7FC CBZ X21, 0x339B864
	0x0339B800 LDR X8, [X19 + 0x10]
	0x0339B804 LDR X9, [X19 + 0x20]
	0x0339B808 STR X8, [X19 + 0x18]
	0x0339B80C STR X9, [X19 + 0x40]
	0x0339B810 B 0x339B848
	0x0339B814 ADRP X8, 0xFFFFFFFFFE81F000
	0x0339B818 ADD X8, X8, 0x904
	0x0339B81C B 0x339B844
	0x0339B820 TBZ X0, 0x0, 0x339B83C
	0x0339B824 ADRP X8, 0xFFFFFFFFFE81F000
	0x0339B828 ADD X8, X8, 0x96C
	0x0339B82C B 0x339B844
	0x0339B830 ADRP X8, 0xFFFFFFFFFE81F000
	0x0339B834 ADD X8, X8, 0x9F8
	0x0339B838 B 0x339B844
	0x0339B83C ADRP X8, 0xFFFFFFFFFE81F000
	0x0339B840 ADD X8, X8, 0x93C
	0x0339B844 STR X8, [X19 + 0x18]
	0x0339B848 ADRP X8, 0xFFFFFFFFFE81F000
	0x0339B84C ADD X8, X8, 0x8AC
	0x0339B850 STR X8, [X19 + 0x38]
	0x0339B854 LDP X20, X19, [X31 + 0x20]
	0x0339B858 LDP X22, X21, [X31 + 0x10]
	0x0339B85C LDR X30, [X31], #0x30
	0x0339B860 RET
	0x0339B864 ADRP X1, 0xFFFFFFFFFD780000
	0x0339B868 ADD X1, X1, 0xEE3
	0x0339B86C MOV X0, X31
	0x0339B870 BL 0x1C16F3C
	0x0339B874 MOV X1, X31
	0x0339B878 BL 0x1C16DEC
	0x0339B87C LDR X8, [X0 + 0x40]
	0x0339B880 LDR X4, [X0 + 0x18]
	0x0339B884 LDR X3, [X0 + 0x28]
	0x0339B888 MOV X0, X8
	0x0339B88C BR X4
	0x0339B890 STR X30, [X31 - 0x20]!
	0x0339B894 STP X20, X19, [X31 + 0x10]
	0x0339B898 ADRP X20, 0x1042000
	0x0339B89C LDRB W8, [X20 + 0xF4]
	0x0339B8A0 MOV X19, X1
	0x0339B8A4 TBNZ X8, 0x0, 0x339B8BC
	0x0339B8A8 ADRP X0, 0xD90000
	0x0339B8AC LDR X0, [X0 + 0x5D0]
	0x0339B8B0 BL 0x1C16CF4
	0x0339B8B4 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1043000
	006 Move W8, [X21+217]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD5A000
	014 Move X0, [X0+1880]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+217], W8
	018 Compare X20, 0
	019 JumpIfEqual {33}
	020 Move X8, 0xD5A000
	021 Move X8, [X8+1880]
	022 Move X9, [X20]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X0, X20
	026 Call 0x1C17E08
	027 Move X8, [X0]
	028 Move X9, [X19]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move TEMP, 0
	031 Not TEMP
	032 Move W0, TEMP
	033 Move W0, 1
	034 NotImplemented "Instruction CSET not yet implemented."
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return X0
	040 Move X0, 0xD61000
	041 Move X0, [X0+1400]
	042 Call 0x1C17D08
	043 Call 0x1C17F10
	044 Move X19, X0
	045 Move X0, 0xD91000
	046 Move X0, [X0+1456]
	047 Call 0x1C17D08
	048 Move X1, X0
	049 Move X0, X19
	050 Move X2, X31
	051 Call ArgumentException..ctor, X0, X1
	052 Move X0, 0xD91000
	053 Move X0, [X0+1464]
	054 Call 0x1C17D08
	055 Move X1, X0
	056 Move X0, X19
	057 Call 0x1C17DEC

Method: System.Int32 CompareTo(System.UInt64 value)

Disassembly:
	0x0339B8B8 STRB W8, [X20 + 0xF4]
	0x0339B8BC CBZ X19, 0x339B8DC
	0x0339B8C0 ADRP X8, 0xD90000
	0x0339B8C4 LDR X8, [X8 + 0x5D0]
	0x0339B8C8 LDR X9, [X19]
	0x0339B8CC LDR X8, [X8]
	0x0339B8D0 CMP X9, X8

ISIL:
	001 Move X8, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move TEMP, 0
	004 Not TEMP
	005 Move W0, TEMP
	006 Return X0
	007 NotImplemented "Instruction CSET not yet implemented."
	008 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x0339B8D4 CSET W0, EQ
	0x0339B8D8 B 0x339B8E0
	0x0339B8DC MOV W0, W31
	0x0339B8E0 LDP X20, X19, [X31 + 0x10]
	0x0339B8E4 LDR X30, [X31], #0x20
	0x0339B8E8 RET
	0x0339B8EC MOVZ W0, 0x1
	0x0339B8F0 RET
	0x0339B8F4 STR X30, [X31 - 0x20]!
	0x0339B8F8 STP X20, X19, [X31 + 0x10]
	0x0339B8FC ADRP X20, 0x1042000
	0x0339B900 LDRB W8, [X20 + 0xF5]
	0x0339B904 MOV X19, X1
	0x0339B908 TBNZ X8, 0x0, 0x339B920
	0x0339B90C ADRP X0, 0xD90000
	0x0339B910 LDR X0, [X0 + 0x5D0]
	0x0339B914 BL 0x1C16CF4
	0x0339B918 MOVZ W8, 0x1
	0x0339B91C STRB W8, [X20 + 0xF5]
	0x0339B920 CBZ X19, 0x339B940
	0x0339B924 ADRP X8, 0xD90000
	0x0339B928 LDR X8, [X8 + 0x5D0]
	0x0339B92C LDR X9, [X19]
	0x0339B930 LDR X8, [X8]
	0x0339B934 CMP X9, X8
	0x0339B938 CSET W0, EQ
	0x0339B93C B 0x339B944
	0x0339B940 MOV W0, W31
	0x0339B944 LDP X20, X19, [X31 + 0x10]
	0x0339B948 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1043000
	006 Move W8, [X21+218]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD5A000
	014 Move X0, [X0+1880]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+218], W8
	018 Compare X19, 0
	019 JumpIfEqual {25}
	020 Move X8, 0xD5A000
	021 Move X8, [X8+1880]
	022 Move X9, [X19]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W0, W31
	026 Move X20, [X20]
	027 Move X0, X19
	028 Call 0x1C17E08
	029 Move X8, [X0]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSET not yet implemented."
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return X0

Method: System.Boolean Equals(System.UInt64 obj)

Disassembly:
	0x0339B94C RET
	0x0339B950 SUB X31, X31, 0x30
	0x0339B954 STP X30, X21, [X31 + 0x10]
	0x0339B958 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move X8, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x0339B95C ADRP X21, 0x1042000
	0x0339B960 LDRB W8, [X21 + 0xF6]
	0x0339B964 MOV X20, X1

ISIL:
	001 Move W8, [X0]
	002 Move W9, [X0+4]
	003 Xor W0, W9, W8
	004 Return X0

Method: System.String ToString()

Disassembly:
	0x0339B968 MOV X19, X0
	0x0339B96C TBNZ X8, 0x0, 0x339B984
	0x0339B970 ADRP X0, 0xD90000
	0x0339B974 LDR X0, [X0 + 0x5D0]
	0x0339B978 BL 0x1C16CF4
	0x0339B97C MOVZ W8, 0x1
	0x0339B980 STRB W8, [X21 + 0xF6]
	0x0339B984 CBZ X20, 0x339B9A8
	0x0339B988 ADRP X8, 0xD90000
	0x0339B98C LDR X8, [X8 + 0x5D0]
	0x0339B990 LDR X9, [X20]
	0x0339B994 LDR X8, [X8]
	0x0339B998 CMP X9, X8
	0x0339B99C B.NE 0x339B9BC
	0x0339B9A0 MOV W0, W31
	0x0339B9A4 B 0x339B9AC
	0x0339B9A8 MOVZ W0, 0x1
	0x0339B9AC LDP X20, X19, [X31 + 0x20]
	0x0339B9B0 LDP X30, X21, [X31 + 0x10]
	0x0339B9B4 ADD X31, X31, 0x30
	0x0339B9B8 RET
	0x0339B9BC LDRB W8, [X19]
	0x0339B9C0 ADRP X0, 0xD90000
	0x0339B9C4 STRB W8, [X31 + 0x8]
	0x0339B9C8 LDR X0, [X0 + 0x5D0]
	0x0339B9CC BL 0x1C16D08
	0x0339B9D0 ADD X1, X31, 0x8
	0x0339B9D4 BL 0x1C16E04
	0x0339B9D8 MOV X1, X31
	0x0339B9DC BL 0x33BE520
	0x0339B9E0 MOV X19, X0
	0x0339B9E4 BL 0x19903C0
	0x0339B9E8 LDR X8, [X19]
	0x0339B9EC MOV X0, X19
	0x0339B9F0 LDP X9, X1, [X8 + 0x168]
	0x0339B9F4 BLR X9
	0x0339B9F8 MOV X19, X0
	0x0339B9FC ADRP X0, 0xD82000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1043000
	007 Move X20, 0xD88000
	008 Move X21, 0xD8E000
	009 Move W8, [X22+219]
	010 Move X20, [X20+472]
	011 Move X21, [X21+120]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xD8E000
	018 Move X0, [X0+120]
	019 Call 0x1C17CF4
	020 Move X0, 0xD88000
	021 Move X0, [X0+472]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+219], W8
	025 Move X1, [X20]
	026 Move X19, [X19]
	027 Move X0, X31
	028 Call ReadOnlySpan`1<Char>.op_Implicit, X0
	029 Move X20, X0
	030 Move X0, [X21]
	031 Move X21, X1
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X19
	037 Move X1, X20
	038 Move X2, X21
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X3, X31
	044 Move X4, X31
	045 Move X30, [X31+48]
	046 Call Number.FormatUInt64, X0, X1, X2
	047 Return X0

Method: System.String ToString(System.IFormatProvider provider)

Disassembly:
	0x0339BA00 LDR X0, [X0 + 0x920]
	0x0339BA04 BL 0x1C16D08
	0x0339BA08 MOV X1, X19
	0x0339BA0C MOV X2, X31
	0x0339BA10 BL 0x32094D4
	0x0339BA14 MOV X19, X0
	0x0339BA18 ADRP X0, 0xD60000
	0x0339BA1C LDR X0, [X0 + 0x578]
	0x0339BA20 BL 0x1C16D08
	0x0339BA24 BL 0x1C16F10
	0x0339BA28 MOV X20, X0
	0x0339BA2C ADRP X0, 0xD82000
	0x0339BA30 LDR X0, [X0 + 0x928]
	0x0339BA34 BL 0x1C16D08
	0x0339BA38 MOV X2, X0
	0x0339BA3C MOV X0, X20
	0x0339BA40 MOV X1, X19
	0x0339BA44 MOV X3, X31
	0x0339BA48 BL 0x330E16C
	0x0339BA4C ADRP X0, 0xD90000
	0x0339BA50 LDR X0, [X0 + 0x5D8]
	0x0339BA54 BL 0x1C16D08
	0x0339BA58 MOV X1, X0
	0x0339BA5C MOV X0, X20
	0x0339BA60 BL 0x1C16DEC
	0x0339BA64 MOV W0, W31
	0x0339BA68 RET
	0x0339BA6C SUB X31, X31, 0x30
	0x0339BA70 STP X30, X21, [X31 + 0x10]
	0x0339BA74 STP X20, X19, [X31 + 0x20]
	0x0339BA78 ADRP X21, 0x1042000
	0x0339BA7C LDRB W8, [X21 + 0xF7]
	0x0339BA80 MOV X20, X1
	0x0339BA84 MOV X19, X0
	0x0339BA88 TBNZ X8, 0x0, 0x339BAA0
	0x0339BA8C ADRP X0, 0xD90000
	0x0339BA90 LDR X0, [X0 + 0x5D0]
	0x0339BA94 BL 0x1C16CF4
	0x0339BA98 MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x1043000
	008 Move X21, 0xD88000
	009 Move X22, 0xD8E000
	010 Move W8, [X23+220]
	011 Move X21, [X21+472]
	012 Move X22, [X22+120]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xD8E000
	020 Move X0, [X0+120]
	021 Call 0x1C17CF4
	022 Move X0, 0xD88000
	023 Move X0, [X0+472]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+220], W8
	027 Move X1, [X21]
	028 Move X20, [X20]
	029 Move X0, X31
	030 Call ReadOnlySpan`1<Char>.op_Implicit, X0
	031 Move X21, X0
	032 Move X0, [X22]
	033 Move X22, X1
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, X20
	039 Move X1, X21
	040 Move X2, X22
	041 Move X3, X19
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X4, X31
	047 Move X30, [X31+48]
	048 Move X23, [X31+56]
	049 Call Number.FormatUInt64, X0, X1, X2
	050 Return X0

Method: System.String ToString(System.String format)

Disassembly:
	0x0339BA9C STRB W8, [X21 + 0xF7]
	0x0339BAA0 CBZ X20, 0x339BAC4
	0x0339BAA4 ADRP X8, 0xD90000
	0x0339BAA8 LDR X8, [X8 + 0x5D0]
	0x0339BAAC LDR X9, [X20]
	0x0339BAB0 LDR X8, [X8]
	0x0339BAB4 CMP X9, X8
	0x0339BAB8 B.NE 0x339BAD8
	0x0339BABC MOV W0, W31
	0x0339BAC0 B 0x339BAC8
	0x0339BAC4 MOVZ W0, 0x1
	0x0339BAC8 LDP X20, X19, [X31 + 0x20]
	0x0339BACC LDP X30, X21, [X31 + 0x10]
	0x0339BAD0 ADD X31, X31, 0x30
	0x0339BAD4 RET
	0x0339BAD8 LDRB W8, [X19]
	0x0339BADC ADRP X0, 0xD90000
	0x0339BAE0 STRB W8, [X31 + 0x8]
	0x0339BAE4 LDR X0, [X0 + 0x5D0]
	0x0339BAE8 BL 0x1C16D08
	0x0339BAEC ADD X1, X31, 0x8
	0x0339BAF0 BL 0x1C16E04
	0x0339BAF4 MOV X1, X31
	0x0339BAF8 BL 0x33BE520
	0x0339BAFC MOV X19, X0
	0x0339BB00 BL 0x19903C0
	0x0339BB04 LDR X8, [X19]
	0x0339BB08 MOV X0, X19
	0x0339BB0C LDP X9, X1, [X8 + 0x168]
	0x0339BB10 BLR X9
	0x0339BB14 MOV X19, X0
	0x0339BB18 ADRP X0, 0xD82000
	0x0339BB1C LDR X0, [X0 + 0x920]
	0x0339BB20 BL 0x1C16D08
	0x0339BB24 MOV X1, X19
	0x0339BB28 MOV X2, X31
	0x0339BB2C BL 0x32094D4
	0x0339BB30 MOV X19, X0
	0x0339BB34 ADRP X0, 0xD60000
	0x0339BB38 LDR X0, [X0 + 0x578]
	0x0339BB3C BL 0x1C16D08
	0x0339BB40 BL 0x1C16F10
	0x0339BB44 MOV X20, X0
	0x0339BB48 ADRP X0, 0xD82000
	0x0339BB4C LDR X0, [X0 + 0x928]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1043000
	007 Move W8, [X21+221]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD8E000
	015 Move X0, [X0+120]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+221], W8
	019 Move X21, 0x103F000
	020 Move W8, [X21+1890]
	021 Move X19, [X19]
	022 Compare W8, 0
	023 JumpIfNotEqual {29}
	024 Move X0, 0xD80000
	025 Move X0, [X0+656]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+1890], W8
	029 Move X22, 0xD8E000
	030 Move X22, [X22+120]
	031 Compare X20, 0
	032 JumpIfEqual {38}
	033 Move X0, X20
	034 Move X1, X31
	035 Call String.GetRawStringData, X0
	036 Move W20, [X20+16]
	037 Move X21, X0
	038 Move X21, X31
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X19
	045 Move X1, X21
	046 Move X2, X20
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X3, X31
	052 Move X4, X31
	053 Move X30, [X31+48]
	054 Call Number.FormatUInt64, X0, X1, X2
	055 Return X0

Method: System.String ToString(System.String format, System.IFormatProvider provider)

Disassembly:
	0x0339BB50 BL 0x1C16D08
	0x0339BB54 MOV X2, X0
	0x0339BB58 MOV X0, X20
	0x0339BB5C MOV X1, X19
	0x0339BB60 MOV X3, X31
	0x0339BB64 BL 0x330E16C
	0x0339BB68 ADRP X0, 0xD90000
	0x0339BB6C LDR X0, [X0 + 0x5E0]
	0x0339BB70 BL 0x1C16D08
	0x0339BB74 MOV X1, X0
	0x0339BB78 MOV X0, X20
	0x0339BB7C BL 0x1C16DEC
	0x0339BB80 MOV W0, W31
	0x0339BB84 RET
	0x0339BB88 MOV W0, W31
	0x0339BB8C RET
	0x0339BB90 MOV W0, W31
	0x0339BB94 RET
	0x0339BB98 STR X30, [X31 - 0x20]!
	0x0339BB9C STP X20, X19, [X31 + 0x10]
	0x0339BBA0 ADRP X19, 0x1042000
	0x0339BBA4 ADRP X20, 0xD81000
	0x0339BBA8 LDRB W8, [X19 + 0xF8]
	0x0339BBAC LDR X20, [X20 + 0xA28]
	0x0339BBB0 TBNZ X8, 0x0, 0x339BBC8
	0x0339BBB4 ADRP X0, 0xD81000
	0x0339BBB8 LDR X0, [X0 + 0xA28]
	0x0339BBBC BL 0x1C16CF4
	0x0339BBC0 MOVZ W8, 0x1
	0x0339BBC4 STRB W8, [X19 + 0xF8]
	0x0339BBC8 LDR X0, [X20]
	0x0339BBCC LDP X20, X19, [X31 + 0x10]
	0x0339BBD0 LDR X30, [X31], #0x20
	0x0339BBD4 RET
	0x0339BBD8 STR X30, [X31 - 0x20]!
	0x0339BBDC STP X20, X19, [X31 + 0x10]
	0x0339BBE0 ADRP X19, 0x1042000
	0x0339BBE4 ADRP X20, 0xD59000
	0x0339BBE8 LDRB W8, [X19 + 0xF9]
	0x0339BBEC LDR X20, [X20 + 0x608]
	0x0339BBF0 TBNZ X8, 0x0, 0x339BC08
	0x0339BBF4 ADRP X0, 0xD59000
	0x0339BBF8 LDR X0, [X0 + 0x608]
	0x0339BBFC BL 0x1C16CF4
	0x0339BC00 MOVZ W8, 0x1
	0x0339BC04 STRB W8, [X19 + 0xF9]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x1043000
	008 Move W8, [X22+222]
	009 Move X19, X2
	010 Move X21, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD8E000
	017 Move X0, [X0+120]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+222], W8
	021 Move X22, 0x103F000
	022 Move W8, [X22+1890]
	023 Move X20, [X20]
	024 Compare W8, 0
	025 JumpIfNotEqual {31}
	026 Move X0, 0xD80000
	027 Move X0, [X0+656]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+1890], W8
	031 Move X23, 0xD8E000
	032 Move X23, [X23+120]
	033 Compare X21, 0
	034 JumpIfEqual {40}
	035 Move X0, X21
	036 Move X1, X31
	037 Call String.GetRawStringData, X0
	038 Move W21, [X21+16]
	039 Move X22, X0
	040 Move X22, X31
	041 Move X0, [X23]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move X0, X20
	047 Move X1, X22
	048 Move X2, X21
	049 Move X3, X19
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X4, X31
	055 Move X30, [X31+48]
	056 Move X23, [X31+56]
	057 Call Number.FormatUInt64, X0, X1, X2
	058 Return X0

Method: System.Boolean TryFormat(System.Span`1<System.Char> destination, out System.Int32 charsWritten, System.ReadOnlySpan`1<System.Char> format = null, System.IFormatProvider provider = null)

Disassembly:
	0x0339BC08 LDR X0, [X20]
	0x0339BC0C LDP X20, X19, [X31 + 0x10]
	0x0339BC10 LDR X30, [X31], #0x20
	0x0339BC14 RET
	0x0339BC18 MOV W0, W31
	0x0339BC1C RET
	0x0339BC20 STR X30, [X31 - 0x30]!
	0x0339BC24 STP X22, X21, [X31 + 0x10]
	0x0339BC28 STP X20, X19, [X31 + 0x20]
	0x0339BC2C ADRP X22, 0x1042000
	0x0339BC30 ADRP X21, 0xD82000
	0x0339BC34 LDRB W8, [X22 + 0xFA]
	0x0339BC38 LDR X21, [X21 + 0xEE8]
	0x0339BC3C MOV W19, W1
	0x0339BC40 MOV W20, W0
	0x0339BC44 TBNZ X8, 0x0, 0x339BC5C
	0x0339BC48 ADRP X0, 0xD82000
	0x0339BC4C LDR X0, [X0 + 0xEE8]
	0x0339BC50 BL 0x1C16CF4
	0x0339BC54 MOVZ W8, 0x1
	0x0339BC58 STRB W8, [X22 + 0xFA]
	0x0339BC5C LDR X0, [X21]
	0x0339BC60 LDR W8, [X0 + 0xE0]
	0x0339BC64 CBNZ W8, 0x339BC70
	0x0339BC68 BL 0x1C16DFC
	0x0339BC6C LDR X0, [X21]
	0x0339BC70 LDR X8, [X0 + 0xB8]
	0x0339BC74 MOV W1, W20
	0x0339BC78 MOV X2, X31
	0x0339BC7C LDR W0, [X8]
	0x0339BC80 BL 0x32E15C0
	0x0339BC84 MOV W1, W19
	0x0339BC88 LDP X20, X19, [X31 + 0x20]
	0x0339BC8C LDP X22, X21, [X31 + 0x10]
	0x0339BC90 MOV X2, X31
	0x0339BC94 LDR X30, [X31], #0x30
	0x0339BC98 B 0x32E15C0
	0x0339BC9C STP X30, X23, [X31 - 0x30]!
	0x0339BCA0 STP X22, X21, [X31 + 0x10]
	0x0339BCA4 STP X20, X19, [X31 + 0x20]
	0x0339BCA8 ADRP X23, 0x1042000

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X27, 0x1043000
	012 Move X26, 0xD8E000
	013 Move W8, [X27+223]
	014 Move X26, [X26+120]
	015 Move X20, X6
	016 Move X22, X5
	017 Move X24, X4
	018 Move X19, X3
	019 Move X21, X2
	020 Move X23, X1
	021 Move X25, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {31}
	026 Move X0, 0xD8E000
	027 Move X0, [X0+120]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X27+223], W8
	031 Move X0, [X26]
	032 Move X25, [X25]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X25
	038 Move X1, X24
	039 Move X2, X22
	040 Move X3, X20
	041 Move X4, X23
	042 Move X5, X21
	043 Move X6, X19
	044 Move X20, [X31+64]
	045 Move X19, [X31+72]
	046 Move X22, [X31+48]
	047 Move X21, [X31+56]
	048 Move X24, [X31+32]
	049 Move X23, [X31+40]
	050 Move X26, [X31+16]
	051 Move X25, [X31+24]
	052 Move X7, X31
	053 Move X30, [X31+80]
	054 Move X27, [X31+88]
	055 Call Number.TryFormatUInt64, X0, X1, X2, X3, X4
	056 Return X0

Method: System.UInt64 Parse(System.String s)

Disassembly:
	0x0339BCAC ADRP X22, 0xD82000
	0x0339BCB0 LDRB W8, [X23 + 0xFB]
	0x0339BCB4 LDR X22, [X22 + 0xEE8]
	0x0339BCB8 MOV W19, W2
	0x0339BCBC MOV W20, W1
	0x0339BCC0 MOV W21, W0
	0x0339BCC4 TBNZ X8, 0x0, 0x339BCDC
	0x0339BCC8 ADRP X0, 0xD82000
	0x0339BCCC LDR X0, [X0 + 0xEE8]
	0x0339BCD0 BL 0x1C16CF4
	0x0339BCD4 MOVZ W8, 0x1
	0x0339BCD8 STRB W8, [X23 + 0xFB]
	0x0339BCDC MOV W0, W21
	0x0339BCE0 MOV W1, W20
	0x0339BCE4 BL 0x339BC20
	0x0339BCE8 LDR X8, [X22]
	0x0339BCEC MOV W20, W0
	0x0339BCF0 LDR W9, [X8 + 0xE0]
	0x0339BCF4 CBNZ W9, 0x339BD00
	0x0339BCF8 MOV X0, X8
	0x0339BCFC BL 0x1C16DFC
	0x0339BD00 MOV W0, W20
	0x0339BD04 MOV W1, W19
	0x0339BD08 LDP X20, X19, [X31 + 0x20]
	0x0339BD0C LDP X22, X21, [X31 + 0x10]
	0x0339BD10 MOV X2, X31
	0x0339BD14 LDP X30, X23, [X31], #0x30
	0x0339BD18 B 0x32E15C0
	0x0339BD1C STR X30, [X31 - 0x40]!
	0x0339BD20 STP X24, X23, [X31 + 0x10]
	0x0339BD24 STP X22, X21, [X31 + 0x20]
	0x0339BD28 STP X20, X19, [X31 + 0x30]
	0x0339BD2C ADRP X24, 0x1042000
	0x0339BD30 ADRP X23, 0xD82000
	0x0339BD34 LDRB W8, [X24 + 0xFC]
	0x0339BD38 LDR X23, [X23 + 0xEE8]
	0x0339BD3C MOV W19, W3
	0x0339BD40 MOV W20, W2
	0x0339BD44 MOV W21, W1
	0x0339BD48 MOV W22, W0
	0x0339BD4C TBNZ X8, 0x0, 0x339BD64
	0x0339BD50 ADRP X0, 0xD82000
	0x0339BD54 LDR X0, [X0 + 0xEE8]
	0x0339BD58 BL 0x1C16CF4
	0x0339BD5C MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1043000
	006 Move W8, [X20+224]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xD8E000
	013 Move X0, [X0+120]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+224], W8
	017 Compare X19, 0
	018 JumpIfEqual {55}
	019 Move X20, 0x103F000
	020 Move X21, 0xD8E000
	021 Move W8, [X20+1890]
	022 Move X21, [X21+120]
	023 Compare W8, 0
	024 JumpIfNotEqual {30}
	025 Move X0, 0xD80000
	026 Move X0, [X0+656]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+1890], W8
	030 Move X0, X19
	031 Move X1, X31
	032 Call String.GetRawStringData, X0
	033 Move W19, [X19+16]
	034 Move X20, X0
	035 Move X0, X31
	036 Call NumberFormatInfo.get_CurrentInfo
	037 Move X8, [X21]
	038 Move X21, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {44}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X19
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move W2, 7
	049 Move X3, X21
	050 Move X4, X31
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Call Number.ParseUInt64, X0, X1, X2
	054 Return X0
	055 Move W0, 48
	056 Call ThrowHelper.ThrowArgumentNullException, X0

Method: System.UInt64 Parse(System.String s, System.IFormatProvider provider)

Disassembly:
	0x0339BD60 STRB W8, [X24 + 0xFC]
	0x0339BD64 MOV W0, W22
	0x0339BD68 MOV W1, W21
	0x0339BD6C MOV W2, W20
	0x0339BD70 BL 0x339BC9C
	0x0339BD74 LDR X8, [X23]
	0x0339BD78 MOV W20, W0
	0x0339BD7C LDR W9, [X8 + 0xE0]
	0x0339BD80 CBNZ W9, 0x339BD8C
	0x0339BD84 MOV X0, X8
	0x0339BD88 BL 0x1C16DFC
	0x0339BD8C MOV W0, W20
	0x0339BD90 MOV W1, W19
	0x0339BD94 LDP X20, X19, [X31 + 0x30]
	0x0339BD98 LDP X22, X21, [X31 + 0x20]
	0x0339BD9C LDP X24, X23, [X31 + 0x10]
	0x0339BDA0 MOV X2, X31
	0x0339BDA4 LDR X30, [X31], #0x40
	0x0339BDA8 B 0x32E15C0
	0x0339BDAC STP X30, X25, [X31 - 0x40]!
	0x0339BDB0 STP X24, X23, [X31 + 0x10]
	0x0339BDB4 STP X22, X21, [X31 + 0x20]
	0x0339BDB8 STP X20, X19, [X31 + 0x30]
	0x0339BDBC ADRP X25, 0x1042000
	0x0339BDC0 ADRP X24, 0xD82000
	0x0339BDC4 LDRB W8, [X25 + 0xFD]
	0x0339BDC8 LDR X24, [X24 + 0xEE8]
	0x0339BDCC MOV W19, W4
	0x0339BDD0 MOV W20, W3
	0x0339BDD4 MOV W21, W2
	0x0339BDD8 MOV W22, W1
	0x0339BDDC MOV W23, W0
	0x0339BDE0 TBNZ X8, 0x0, 0x339BDF8
	0x0339BDE4 ADRP X0, 0xD82000
	0x0339BDE8 LDR X0, [X0 + 0xEE8]
	0x0339BDEC BL 0x1C16CF4
	0x0339BDF0 MOVZ W8, 0x1
	0x0339BDF4 STRB W8, [X25 + 0xFD]
	0x0339BDF8 MOV W0, W23
	0x0339BDFC MOV W1, W22
	0x0339BE00 MOV W2, W21
	0x0339BE04 MOV W3, W20
	0x0339BE08 BL 0x339BD1C
	0x0339BE0C LDR X8, [X24]
	0x0339BE10 MOV W20, W0
	0x0339BE14 LDR W9, [X8 + 0xE0]
	0x0339BE18 CBNZ W9, 0x339BE24
	0x0339BE1C MOV X0, X8
	0x0339BE20 BL 0x1C16DFC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1043000
	007 Move W8, [X21+225]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD8E000
	015 Move X0, [X0+120]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+225], W8
	019 Compare X20, 0
	020 JumpIfEqual {59}
	021 Move X21, 0x103F000
	022 Move X22, 0xD8E000
	023 Move W8, [X21+1890]
	024 Move X22, [X22+120]
	025 Compare W8, 0
	026 JumpIfNotEqual {32}
	027 Move X0, 0xD80000
	028 Move X0, [X0+656]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X21+1890], W8
	032 Move X0, X20
	033 Move X1, X31
	034 Call String.GetRawStringData, X0
	035 Move W20, [X20+16]
	036 Move X21, X0
	037 Move X0, X19
	038 Move X1, X31
	039 Call NumberFormatInfo.GetInstance, X0
	040 Move X8, [X22]
	041 Move X19, X0
	042 Move W9, [X8+224]
	043 Compare W9, 0
	044 JumpIfNotEqual {47}
	045 Move X0, X8
	046 Call 0x1C17DFC
	047 Move X0, X21
	048 Move X1, X20
	049 Move X3, X19
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move W2, 7
	055 Move X4, X31
	056 Move X30, [X31+48]
	057 Call Number.ParseUInt64, X0, X1, X2
	058 Return X0
	059 Move W0, 48
	060 Call ThrowHelper.ThrowArgumentNullException, X0

Method: System.UInt64 Parse(System.String s, System.Globalization.NumberStyles style, System.IFormatProvider provider)

Disassembly:
	0x0339BE24 MOV W0, W20
	0x0339BE28 MOV W1, W19
	0x0339BE2C LDP X20, X19, [X31 + 0x30]
	0x0339BE30 LDP X22, X21, [X31 + 0x20]
	0x0339BE34 LDP X24, X23, [X31 + 0x10]
	0x0339BE38 MOV X2, X31
	0x0339BE3C LDP X30, X25, [X31], #0x40
	0x0339BE40 B 0x32E15C0
	0x0339BE44 STR X30, [X31 - 0x50]!
	0x0339BE48 STP X26, X25, [X31 + 0x10]
	0x0339BE4C STP X24, X23, [X31 + 0x20]
	0x0339BE50 STP X22, X21, [X31 + 0x30]
	0x0339BE54 STP X20, X19, [X31 + 0x40]
	0x0339BE58 ADRP X26, 0x1042000
	0x0339BE5C ADRP X25, 0xD82000
	0x0339BE60 LDRB W8, [X26 + 0xFE]
	0x0339BE64 LDR X25, [X25 + 0xEE8]
	0x0339BE68 MOV W19, W5
	0x0339BE6C MOV W20, W4
	0x0339BE70 MOV W21, W3
	0x0339BE74 MOV W22, W2
	0x0339BE78 MOV W23, W1
	0x0339BE7C MOV W24, W0
	0x0339BE80 TBNZ X8, 0x0, 0x339BE98
	0x0339BE84 ADRP X0, 0xD82000
	0x0339BE88 LDR X0, [X0 + 0xEE8]
	0x0339BE8C BL 0x1C16CF4
	0x0339BE90 MOVZ W8, 0x1
	0x0339BE94 STRB W8, [X26 + 0xFE]
	0x0339BE98 MOV W0, W24
	0x0339BE9C MOV W1, W23
	0x0339BEA0 MOV W2, W22
	0x0339BEA4 MOV W3, W21
	0x0339BEA8 MOV W4, W20
	0x0339BEAC BL 0x339BDAC
	0x0339BEB0 LDR X8, [X25]
	0x0339BEB4 MOV W20, W0
	0x0339BEB8 LDR W9, [X8 + 0xE0]
	0x0339BEBC CBNZ W9, 0x339BEC8
	0x0339BEC0 MOV X0, X8
	0x0339BEC4 BL 0x1C16DFC
	0x0339BEC8 MOV W0, W20
	0x0339BECC MOV W1, W19
	0x0339BED0 LDP X20, X19, [X31 + 0x40]
	0x0339BED4 LDP X22, X21, [X31 + 0x30]
	0x0339BED8 LDP X24, X23, [X31 + 0x20]
	0x0339BEDC LDP X26, X25, [X31 + 0x10]
	0x0339BEE0 MOV X2, X31
	0x0339BEE4 LDR X30, [X31], #0x50
	0x0339BEE8 B 0x32E15C0
	0x0339BEEC STP X30, X27, [X31 - 0x50]!
	0x0339BEF0 STP X26, X25, [X31 + 0x10]
	0x0339BEF4 STP X24, X23, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x1043000
	008 Move W8, [X22+226]
	009 Move X20, X2
	010 Move W19, W1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xD8E000
	017 Move X0, [X0+120]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+226], W8
	021 Move W0, W19
	022 Move X1, X31
	023 Call NumberFormatInfo.ValidateParseStyleInteger, X0
	024 Compare X21, 0
	025 JumpIfEqual {65}
	026 Move X22, 0x103F000
	027 Move X23, 0xD8E000
	028 Move W8, [X22+1890]
	029 Move X23, [X23+120]
	030 Compare W8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, 0xD80000
	033 Move X0, [X0+656]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X22+1890], W8
	037 Move X0, X21
	038 Move X1, X31
	039 Call String.GetRawStringData, X0
	040 Move W21, [X21+16]
	041 Move X22, X0
	042 Move X0, X20
	043 Move X1, X31
	044 Call NumberFormatInfo.GetInstance, X0
	045 Move X8, [X23]
	046 Move X20, X0
	047 Move W9, [X8+224]
	048 Compare W9, 0
	049 JumpIfNotEqual {52}
	050 Move X0, X8
	051 Call 0x1C17DFC
	052 Move X0, X22
	053 Move X1, X21
	054 Move W2, W19
	055 Move X3, X20
	056 Move X20, [X31+32]
	057 Move X19, [X31+40]
	058 Move X22, [X31+16]
	059 Move X21, [X31+24]
	060 Move X4, X31
	061 Move X30, [X31+48]
	062 Move X23, [X31+56]
	063 Call Number.ParseUInt64, X0, X1, X2
	064 Return X0
	065 Move W0, 48
	066 Call ThrowHelper.ThrowArgumentNullException, X0

Method: System.Boolean TryParse(System.String s, out System.UInt64 result)

Disassembly:
	0x0339BEF8 STP X22, X21, [X31 + 0x30]
	0x0339BEFC STP X20, X19, [X31 + 0x40]
	0x0339BF00 ADRP X27, 0x1042000
	0x0339BF04 ADRP X26, 0xD82000
	0x0339BF08 LDRB W8, [X27 + 0xFF]
	0x0339BF0C LDR X26, [X26 + 0xEE8]
	0x0339BF10 MOV W19, W6
	0x0339BF14 MOV W20, W5
	0x0339BF18 MOV W21, W4
	0x0339BF1C MOV W22, W3
	0x0339BF20 MOV W23, W2
	0x0339BF24 MOV W24, W1
	0x0339BF28 MOV W25, W0
	0x0339BF2C TBNZ X8, 0x0, 0x339BF44
	0x0339BF30 ADRP X0, 0xD82000
	0x0339BF34 LDR X0, [X0 + 0xEE8]
	0x0339BF38 BL 0x1C16CF4
	0x0339BF3C MOVZ W8, 0x1
	0x0339BF40 STRB W8, [X27 + 0xFF]
	0x0339BF44 MOV W0, W25
	0x0339BF48 MOV W1, W24
	0x0339BF4C MOV W2, W23
	0x0339BF50 MOV W3, W22
	0x0339BF54 MOV W4, W21
	0x0339BF58 MOV W5, W20
	0x0339BF5C BL 0x339BE44
	0x0339BF60 LDR X8, [X26]
	0x0339BF64 MOV W20, W0
	0x0339BF68 LDR W9, [X8 + 0xE0]
	0x0339BF6C CBNZ W9, 0x339BF78
	0x0339BF70 MOV X0, X8
	0x0339BF74 BL 0x1C16DFC
	0x0339BF78 MOV W0, W20
	0x0339BF7C MOV W1, W19
	0x0339BF80 LDP X20, X19, [X31 + 0x40]
	0x0339BF84 LDP X22, X21, [X31 + 0x30]
	0x0339BF88 LDP X24, X23, [X31 + 0x20]
	0x0339BF8C LDP X26, X25, [X31 + 0x10]
	0x0339BF90 MOV X2, X31
	0x0339BF94 LDP X30, X27, [X31], #0x50
	0x0339BF98 B 0x32E15C0
	0x0339BF9C STR X30, [X31 - 0x60]!
	0x0339BFA0 STP X28, X27, [X31 + 0x10]
	0x0339BFA4 STP X26, X25, [X31 + 0x20]
	0x0339BFA8 STP X24, X23, [X31 + 0x30]
	0x0339BFAC STP X22, X21, [X31 + 0x40]
	0x0339BFB0 STP X20, X19, [X31 + 0x50]
	0x0339BFB4 ADRP X28, 0x1042000
	0x0339BFB8 ADRP X27, 0xD82000
	0x0339BFBC LDRB W8, [X28 + 0x100]
	0x0339BFC0 LDR X27, [X27 + 0xEE8]
	0x0339BFC4 MOV W19, W7
	0x0339BFC8 MOV W20, W6

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1043000
	007 Move W8, [X21+227]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD8E000
	015 Move X0, [X0+120]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+227], W8
	019 Compare X20, 0
	020 JumpIfEqual {59}
	021 Move X21, 0x103F000
	022 Move X22, 0xD8E000
	023 Move W8, [X21+1890]
	024 Move X22, [X22+120]
	025 Compare W8, 0
	026 JumpIfNotEqual {32}
	027 Move X0, 0xD80000
	028 Move X0, [X0+656]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X21+1890], W8
	032 Move X0, X20
	033 Move X1, X31
	034 Call String.GetRawStringData, X0
	035 Move W20, [X20+16]
	036 Move X21, X0
	037 Move X0, X31
	038 Call NumberFormatInfo.get_CurrentInfo
	039 Move X8, [X22]
	040 Move X22, X0
	041 Move W9, [X8+224]
	042 Compare W9, 0
	043 JumpIfNotEqual {46}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X0, X21
	047 Move X1, X20
	048 Move X3, X22
	049 Move X4, X19
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move W2, 7
	055 Move X5, X31
	056 Move X30, [X31+48]
	057 Call Number.TryParseUInt64, X0, X1, X2, X3
	058 Return X0
	059 Move [X19], X31
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X22, [X31+16]
	063 Move X21, [X31+24]
	064 Move W0, W31
	065 Move X30, [X31+48]
	066 Return X0

Method: System.Boolean TryParse(System.String s, System.Globalization.NumberStyles style, System.IFormatProvider provider, out System.UInt64 result)

Disassembly:
	0x0339BFCC MOV W21, W5
	0x0339BFD0 MOV W22, W4
	0x0339BFD4 MOV W23, W3
	0x0339BFD8 MOV W24, W2
	0x0339BFDC MOV W25, W1
	0x0339BFE0 MOV W26, W0
	0x0339BFE4 TBNZ X8, 0x0, 0x339BFFC
	0x0339BFE8 ADRP X0, 0xD82000
	0x0339BFEC LDR X0, [X0 + 0xEE8]
	0x0339BFF0 BL 0x1C16CF4
	0x0339BFF4 MOVZ W8, 0x1
	0x0339BFF8 STRB W8, [X28 + 0x100]
	0x0339BFFC MOV W0, W26
	0x0339C000 MOV W1, W25
	0x0339C004 MOV W2, W24
	0x0339C008 MOV W3, W23
	0x0339C00C MOV W4, W22
	0x0339C010 MOV W5, W21
	0x0339C014 MOV W6, W20
	0x0339C018 BL 0x339BEEC
	0x0339C01C LDR X8, [X27]
	0x0339C020 MOV W20, W0
	0x0339C024 LDR W9, [X8 + 0xE0]
	0x0339C028 CBNZ W9, 0x339C034
	0x0339C02C MOV X0, X8
	0x0339C030 BL 0x1C16DFC
	0x0339C034 MOV W0, W20
	0x0339C038 MOV W1, W19
	0x0339C03C LDP X20, X19, [X31 + 0x50]
	0x0339C040 LDP X22, X21, [X31 + 0x40]
	0x0339C044 LDP X24, X23, [X31 + 0x30]
	0x0339C048 LDP X26, X25, [X31 + 0x20]
	0x0339C04C LDP X28, X27, [X31 + 0x10]
	0x0339C050 MOV X2, X31
	0x0339C054 LDR X30, [X31], #0x60
	0x0339C058 B 0x32E15C0
	0x0339C05C STP X30, X23, [X31 - 0x30]!
	0x0339C060 STP X22, X21, [X31 + 0x10]
	0x0339C064 STP X20, X19, [X31 + 0x20]
	0x0339C068 MOV W23, W1
	0x0339C06C MOVI V0.2D, 0xFFFFFFFFFFFFFFFF
	0x0339C070 MOV X1, X31
	0x0339C074 MOV W19, W4
	0x0339C078 MOV W20, W3
	0x0339C07C MOV W22, W2
	0x0339C080 MOV X21, X0
	0x0339C084 STR D0, [X0 + 0x18]
	0x0339C088 BL 0x33BDD8C
	0x0339C08C TBNZ X23, 0x1F, 0x339C0B4
	0x0339C090 TBNZ X22, 0x1F, 0x339C0D4
	0x0339C094 TBNZ X20, 0x1F, 0x339C0F4
	0x0339C098 TBNZ X19, 0x1F, 0x339C114
	0x0339C09C STP W23, W22, [X21 + 0x10]
	0x0339C0A0 STP W20, W19, [X21 + 0x18]
	0x0339C0A4 LDP X20, X19, [X31 + 0x20]
	0x0339C0A8 LDP X22, X21, [X31 + 0x10]
	0x0339C0AC LDP X30, X23, [X31], #0x30
	0x0339C0B0 RET
	0x0339C0B4 ADRP X0, 0xD5F000
	0x0339C0B8 LDR X0, [X0 + 0x760]
	0x0339C0BC BL 0x1C16D08
	0x0339C0C0 BL 0x1C16F10

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x1043000
	009 Move W8, [X23+228]
	010 Move X19, X3
	011 Move X21, X2
	012 Move W20, W1
	013 Move X22, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xD8E000
	019 Move X0, [X0+120]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+228], W8
	023 Move W0, W20
	024 Move X1, X31
	025 Call NumberFormatInfo.ValidateParseStyleInteger, X0
	026 Compare X22, 0
	027 JumpIfEqual {69}
	028 Move X23, 0x103E000
	029 Move X24, 0xD8D000
	030 Move W8, [X23+1890]
	031 Move X24, [X24+120]
	032 Compare W8, 0
	033 JumpIfNotEqual {39}
	034 Move X0, 0xD7F000
	035 Move X0, [X0+656]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X23+1890], W8
	039 Move X0, X22
	040 Move X1, X31
	041 Call String.GetRawStringData, X0
	042 Move W22, [X22+16]
	043 Move X23, X0
	044 Move X0, X21
	045 Move X1, X31
	046 Call NumberFormatInfo.GetInstance, X0
	047 Move X8, [X24]
	048 Move X21, X0
	049 Move W9, [X8+224]
	050 Compare W9, 0
	051 JumpIfNotEqual {54}
	052 Move X0, X8
	053 Call 0x1C17DFC
	054 Move X0, X23
	055 Move X1, X22
	056 Move W2, W20
	057 Move X3, X21
	058 Move X4, X19
	059 Move X20, [X31+48]
	060 Move X19, [X31+56]
	061 Move X22, [X31+32]
	062 Move X21, [X31+40]
	063 Move X24, [X31+16]
	064 Move X23, [X31+24]
	065 Move X5, X31
	066 Move X30, [X31+64]
	067 Call Number.TryParseUInt64, X0, X1, X2, X3
	068 Return X0
	069 Move [X19], X31
	070 Move X20, [X31+48]
	071 Move X19, [X31+56]
	072 Move X22, [X31+32]
	073 Move X21, [X31+40]
	074 Move X24, [X31+16]
	075 Move X23, [X31+24]
	076 Move W0, W31
	077 Move X30, [X31+64]
	078 Return X0

Method: System.TypeCode GetTypeCode()

Disassembly:
	0x0339C0C4 MOV X19, X0
	0x0339C0C8 ADRP X0, 0xD8F000

ISIL:
	001 Move W0, 12
	002 Return X0

Method: System.Boolean System.IConvertible.ToBoolean(System.IFormatProvider provider)

Disassembly:
	0x0339C0CC LDR X0, [X0 + 0x5E8]
	0x0339C0D0 B 0x339C130
	0x0339C0D4 ADRP X0, 0xD5F000
	0x0339C0D8 LDR X0, [X0 + 0x760]
	0x0339C0DC BL 0x1C16D08
	0x0339C0E0 BL 0x1C16F10
	0x0339C0E4 MOV X19, X0
	0x0339C0E8 ADRP X0, 0xD8F000
	0x0339C0EC LDR X0, [X0 + 0x5F0]
	0x0339C0F0 B 0x339C130
	0x0339C0F4 ADRP X0, 0xD5F000
	0x0339C0F8 LDR X0, [X0 + 0x760]
	0x0339C0FC BL 0x1C16D08
	0x0339C100 BL 0x1C16F10
	0x0339C104 MOV X19, X0
	0x0339C108 ADRP X0, 0xD8F000
	0x0339C10C LDR X0, [X0 + 0x5F8]
	0x0339C110 B 0x339C130
	0x0339C114 ADRP X0, 0xD5F000
	0x0339C118 LDR X0, [X0 + 0x760]
	0x0339C11C BL 0x1C16D08
	0x0339C120 BL 0x1C16F10
	0x0339C124 MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1042000
	006 Move X20, 0xD61000
	007 Move W8, [X21+229]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD61000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+229], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToBoolean, X0
	032 Return X0

Method: System.Char System.IConvertible.ToChar(System.IFormatProvider provider)

Disassembly:
	0x0339C128 ADRP X0, 0xD8F000
	0x0339C12C LDR X0, [X0 + 0x600]
	0x0339C130 BL 0x1C16D08
	0x0339C134 MOV X20, X0
	0x0339C138 ADRP X0, 0xD8F000
	0x0339C13C LDR X0, [X0 + 0x608]
	0x0339C140 BL 0x1C16D08
	0x0339C144 MOV X2, X0
	0x0339C148 MOV X0, X19
	0x0339C14C MOV X1, X20
	0x0339C150 MOV X3, X31
	0x0339C154 BL 0x3311888
	0x0339C158 ADRP X0, 0xD8F000
	0x0339C15C LDR X0, [X0 + 0x610]
	0x0339C160 BL 0x1C16D08
	0x0339C164 MOV X1, X0
	0x0339C168 MOV X0, X19
	0x0339C16C BL 0x1C16DEC
	0x0339C170 STR X30, [X31 - 0x30]!
	0x0339C174 STP X22, X21, [X31 + 0x10]
	0x0339C178 STP X20, X19, [X31 + 0x20]
	0x0339C17C MOV W22, W1
	0x0339C180 MOVI V0.2D, 0xFFFFFFFFFFFFFFFF

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1042000
	006 Move X20, 0xD61000
	007 Move W8, [X21+230]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD61000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+230], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToChar, X0
	032 Return X0

Method: System.SByte System.IConvertible.ToSByte(System.IFormatProvider provider)

Disassembly:
	0x0339C184 MOV X1, X31
	0x0339C188 MOV W19, W3
	0x0339C18C MOV W20, W2
	0x0339C190 MOV X21, X0
	0x0339C194 STR D0, [X0 + 0x18]
	0x0339C198 BL 0x33BDD8C
	0x0339C19C TBNZ X22, 0x1F, 0x339C1C0
	0x0339C1A0 TBNZ X20, 0x1F, 0x339C1E0
	0x0339C1A4 TBNZ X19, 0x1F, 0x339C200
	0x0339C1A8 STP W22, W20, [X21 + 0x10]
	0x0339C1AC STR W19, [X21 + 0x18]
	0x0339C1B0 LDP X20, X19, [X31 + 0x20]
	0x0339C1B4 LDP X22, X21, [X31 + 0x10]
	0x0339C1B8 LDR X30, [X31], #0x30
	0x0339C1BC RET
	0x0339C1C0 ADRP X0, 0xD5F000
	0x0339C1C4 LDR X0, [X0 + 0x760]
	0x0339C1C8 BL 0x1C16D08
	0x0339C1CC BL 0x1C16F10
	0x0339C1D0 MOV X19, X0
	0x0339C1D4 ADRP X0, 0xD8F000
	0x0339C1D8 LDR X0, [X0 + 0x5E8]
	0x0339C1DC B 0x339C21C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1042000
	006 Move X20, 0xD61000
	007 Move W8, [X21+231]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD61000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+231], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToSByte, X0
	032 Return X0

Method: System.Byte System.IConvertible.ToByte(System.IFormatProvider provider)

Disassembly:
	0x0339C1E0 ADRP X0, 0xD5F000
	0x0339C1E4 LDR X0, [X0 + 0x760]
	0x0339C1E8 BL 0x1C16D08
	0x0339C1EC BL 0x1C16F10
	0x0339C1F0 MOV X19, X0
	0x0339C1F4 ADRP X0, 0xD8F000
	0x0339C1F8 LDR X0, [X0 + 0x5F0]
	0x0339C1FC B 0x339C21C
	0x0339C200 ADRP X0, 0xD5F000
	0x0339C204 LDR X0, [X0 + 0x760]
	0x0339C208 BL 0x1C16D08
	0x0339C20C BL 0x1C16F10
	0x0339C210 MOV X19, X0
	0x0339C214 ADRP X0, 0xD8F000
	0x0339C218 LDR X0, [X0 + 0x5F8]
	0x0339C21C BL 0x1C16D08
	0x0339C220 MOV X20, X0
	0x0339C224 ADRP X0, 0xD8F000
	0x0339C228 LDR X0, [X0 + 0x608]
	0x0339C22C BL 0x1C16D08
	0x0339C230 MOV X2, X0
	0x0339C234 MOV X0, X19
	0x0339C238 MOV X1, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1042000
	006 Move X20, 0xD61000
	007 Move W8, [X21+232]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD61000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+232], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToByte, X0
	032 Return X0

Method: System.Int16 System.IConvertible.ToInt16(System.IFormatProvider provider)

Disassembly:
	0x0339C23C MOV X3, X31
	0x0339C240 BL 0x3311888
	0x0339C244 ADRP X0, 0xD8F000
	0x0339C248 LDR X0, [X0 + 0x618]
	0x0339C24C BL 0x1C16D08
	0x0339C250 MOV X1, X0
	0x0339C254 MOV X0, X19
	0x0339C258 BL 0x1C16DEC
	0x0339C25C STP X30, X21, [X31 - 0x20]!
	0x0339C260 STP X20, X19, [X31 + 0x10]
	0x0339C264 MOV W21, W1
	0x0339C268 MOVI V0.2D, 0xFFFFFFFFFFFFFFFF
	0x0339C26C MOV X1, X31
	0x0339C270 MOV W19, W2
	0x0339C274 MOV X20, X0
	0x0339C278 STR D0, [X0 + 0x18]
	0x0339C27C BL 0x33BDD8C
	0x0339C280 TBNZ X21, 0x1F, 0x339C298
	0x0339C284 TBNZ X19, 0x1F, 0x339C2B8
	0x0339C288 STP W21, W19, [X20 + 0x10]
	0x0339C28C LDP X20, X19, [X31 + 0x10]
	0x0339C290 LDP X30, X21, [X31], #0x20
	0x0339C294 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1042000
	006 Move X20, 0xD61000
	007 Move W8, [X21+233]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD61000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+233], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToInt16, X0
	032 Return X0

Method: System.UInt16 System.IConvertible.ToUInt16(System.IFormatProvider provider)

Disassembly:
	0x0339C298 ADRP X0, 0xD5F000
	0x0339C29C LDR X0, [X0 + 0x760]
	0x0339C2A0 BL 0x1C16D08
	0x0339C2A4 BL 0x1C16F10
	0x0339C2A8 MOV X19, X0
	0x0339C2AC ADRP X0, 0xD8F000
	0x0339C2B0 LDR X0, [X0 + 0x5E8]
	0x0339C2B4 B 0x339C2D4
	0x0339C2B8 ADRP X0, 0xD5F000
	0x0339C2BC LDR X0, [X0 + 0x760]
	0x0339C2C0 BL 0x1C16D08
	0x0339C2C4 BL 0x1C16F10
	0x0339C2C8 MOV X19, X0
	0x0339C2CC ADRP X0, 0xD8F000
	0x0339C2D0 LDR X0, [X0 + 0x5F0]
	0x0339C2D4 BL 0x1C16D08
	0x0339C2D8 MOV X20, X0
	0x0339C2DC ADRP X0, 0xD8F000
	0x0339C2E0 LDR X0, [X0 + 0x608]
	0x0339C2E4 BL 0x1C16D08
	0x0339C2E8 MOV X2, X0
	0x0339C2EC MOV X0, X19
	0x0339C2F0 MOV X1, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1042000
	006 Move X20, 0xD61000
	007 Move W8, [X21+234]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD61000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+234], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToUInt16, X0
	032 Return X0

Method: System.Int32 System.IConvertible.ToInt32(System.IFormatProvider provider)

Disassembly:
	0x0339C2F4 MOV X3, X31
	0x0339C2F8 BL 0x3311888
	0x0339C2FC ADRP X0, 0xD8F000
	0x0339C300 LDR X0, [X0 + 0x620]
	0x0339C304 BL 0x1C16D08
	0x0339C308 MOV X1, X0
	0x0339C30C MOV X0, X19
	0x0339C310 BL 0x1C16DEC
	0x0339C314 STR X30, [X31 - 0x20]!
	0x0339C318 STP X20, X19, [X31 + 0x10]
	0x0339C31C MOV X20, X1
	0x0339C320 MOVI V0.2D, 0xFFFFFFFFFFFFFFFF
	0x0339C324 MOV X1, X31
	0x0339C328 MOV X19, X0
	0x0339C32C STR D0, [X0 + 0x18]
	0x0339C330 BL 0x33BDD8C
	0x0339C334 MOV X0, X20
	0x0339C338 BL 0x339C358
	0x0339C33C CBZ X0, 0x339C354
	0x0339C340 LDR V0, [X0 + 0x1]
	0x0339C344 STR V0, [X19 + 0x1]
	0x0339C348 LDP X20, X19, [X31 + 0x10]
	0x0339C34C LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1042000
	006 Move X20, 0xD61000
	007 Move W8, [X21+235]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD61000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+235], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToInt32, X0
	032 Return X0

Method: System.UInt32 System.IConvertible.ToUInt32(System.IFormatProvider provider)

Disassembly:
	0x0339C350 RET
	0x0339C354 BL 0x1C16F20
	0x0339C358 STR X30, [X31 - 0x20]!
	0x0339C35C STP X20, X19, [X31 + 0x10]
	0x0339C360 CBZ X0, 0x339C3A8
	0x0339C364 ADRP X20, 0x1040000
	0x0339C368 LDRB W8, [X20 + 0x3AB]
	0x0339C36C MOV X19, X0
	0x0339C370 CBNZ W8, 0x339C388
	0x0339C374 ADRP X0, 0xD7E000
	0x0339C378 LDR X0, [X0 + 0x290]
	0x0339C37C BL 0x1C16CF4
	0x0339C380 MOVZ W8, 0x1
	0x0339C384 STRB W8, [X20 + 0x3AB]
	0x0339C388 MOV X0, X19
	0x0339C38C MOV X1, X31
	0x0339C390 BL 0x3225708
	0x0339C394 LDR W1, [X19 + 0x10]
	0x0339C398 LDP X20, X19, [X31 + 0x10]
	0x0339C39C MOVZ W2, 0x1
	0x0339C3A0 LDR X30, [X31], #0x20
	0x0339C3A4 B 0x339CB80
	0x0339C3A8 ADRP X0, 0xD5C000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1042000
	006 Move X20, 0xD61000
	007 Move W8, [X21+236]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD61000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+236], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToUInt32, X0
	032 Return X0

Method: System.Int64 System.IConvertible.ToInt64(System.IFormatProvider provider)

Disassembly:
	0x0339C3AC LDR X0, [X0 + 0x528]
	0x0339C3B0 BL 0x1C16D08
	0x0339C3B4 BL 0x1C16F10
	0x0339C3B8 MOV X19, X0
	0x0339C3BC ADRP X0, 0xD8B000
	0x0339C3C0 LDR X0, [X0 + 0x348]
	0x0339C3C4 BL 0x1C16D08
	0x0339C3C8 MOV X1, X0
	0x0339C3CC MOV X0, X19
	0x0339C3D0 MOV X2, X31
	0x0339C3D4 BL 0x330E100
	0x0339C3D8 ADRP X0, 0xD8F000
	0x0339C3DC LDR X0, [X0 + 0x628]
	0x0339C3E0 BL 0x1C16D08
	0x0339C3E4 MOV X1, X0
	0x0339C3E8 MOV X0, X19
	0x0339C3EC BL 0x1C16DEC
	0x0339C3F0 STP X30, X19, [X31 - 0x10]!
	0x0339C3F4 MOVI V0.2D, 0xFFFFFFFFFFFFFFFF
	0x0339C3F8 MOV X1, X31
	0x0339C3FC MOV X19, X0
	0x0339C400 STR D0, [X0 + 0x18]
	0x0339C404 BL 0x33BDD8C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1042000
	006 Move X20, 0xD61000
	007 Move W8, [X21+237]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD61000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+237], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToInt64, X0
	032 Return X0

Method: System.UInt64 System.IConvertible.ToUInt64(System.IFormatProvider provider)

Disassembly:
	0x0339C408 STR X31, [X19 + 0x10]
	0x0339C40C LDP X30, X19, [X31], #0x10

ISIL:
	001 Move X0, [X0]
	002 Return X0

Method: System.Single System.IConvertible.ToSingle(System.IFormatProvider provider)

Disassembly:
	0x0339C410 RET
	0x0339C414 STR X30, [X31 - 0x20]!
	0x0339C418 STP X20, X19, [X31 + 0x10]
	0x0339C41C MOV X20, X1
	0x0339C420 MOVI V0.2D, 0xFFFFFFFFFFFFFFFF
	0x0339C424 MOV X1, X31
	0x0339C428 MOV X19, X0
	0x0339C42C STR D0, [X0 + 0x18]
	0x0339C430 BL 0x33BDD8C
	0x0339C434 CBZ X20, 0x339C44C
	0x0339C438 LDR V0, [X20 + 0x1]
	0x0339C43C STR V0, [X19 + 0x1]
	0x0339C440 LDP X20, X19, [X31 + 0x10]
	0x0339C444 LDR X30, [X31], #0x20
	0x0339C448 RET
	0x0339C44C BL 0x1C16F20
	0x0339C450 STP X30, X21, [X31 - 0x20]!
	0x0339C454 STP X20, X19, [X31 + 0x10]
	0x0339C458 ADRP X20, 0x1041000
	0x0339C45C ADRP X21, 0xD5F000
	0x0339C460 LDRB W8, [X20 + 0x101]
	0x0339C464 LDR X21, [X21 + 0x7C0]
	0x0339C468 MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1042000
	006 Move X20, 0xD61000
	007 Move W8, [X21+238]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD61000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+238], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToSingle, X0
	032 Return V0

Method: System.Double System.IConvertible.ToDouble(System.IFormatProvider provider)

Disassembly:
	0x0339C46C TBNZ X8, 0x0, 0x339C484
	0x0339C470 ADRP X0, 0xD5F000
	0x0339C474 LDR X0, [X0 + 0x7C0]
	0x0339C478 BL 0x1C16CF4
	0x0339C47C MOVZ W8, 0x1
	0x0339C480 STRB W8, [X20 + 0x101]
	0x0339C484 LDR X0, [X21]
	0x0339C488 BL 0x1C16F10
	0x0339C48C MOV X1, X19
	0x0339C490 MOV X20, X0
	0x0339C494 BL 0x339C414
	0x0339C498 MOV X0, X20
	0x0339C49C LDP X20, X19, [X31 + 0x10]
	0x0339C4A0 LDP X30, X21, [X31], #0x20
	0x0339C4A4 RET
	0x0339C4A8 LDR W0, [X0 + 0x10]
	0x0339C4AC RET
	0x0339C4B0 LDR W0, [X0 + 0x14]
	0x0339C4B4 RET
	0x0339C4B8 LDR W0, [X0 + 0x18]
	0x0339C4BC RET
	0x0339C4C0 LDR W0, [X0 + 0x1C]
	0x0339C4C4 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1042000
	006 Move X20, 0xD61000
	007 Move W8, [X21+239]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD61000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+239], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToDouble, X0
	032 Return V0

Method: System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider provider)

Disassembly:
	0x0339C4C8 STP X30, X21, [X31 - 0x20]!
	0x0339C4CC STP X20, X19, [X31 + 0x10]
	0x0339C4D0 ADRP X21, 0x1041000
	0x0339C4D4 LDRB W8, [X21 + 0x102]
	0x0339C4D8 MOV X19, X1
	0x0339C4DC MOV X20, X0
	0x0339C4E0 TBNZ X8, 0x0, 0x339C4F8
	0x0339C4E4 ADRP X0, 0xD5F000
	0x0339C4E8 LDR X0, [X0 + 0x7C0]
	0x0339C4EC BL 0x1C16CF4
	0x0339C4F0 MOVZ W8, 0x1
	0x0339C4F4 STRB W8, [X21 + 0x102]
	0x0339C4F8 CBZ X19, 0x339C528
	0x0339C4FC ADRP X8, 0xD5F000
	0x0339C500 LDR X8, [X8 + 0x7C0]
	0x0339C504 LDR X9, [X19]
	0x0339C508 LDR X8, [X8]
	0x0339C50C CMP X9, X8
	0x0339C510 B.NE 0x339C538
	0x0339C514 MOV X0, X20
	0x0339C518 MOV X1, X19
	0x0339C51C LDP X20, X19, [X31 + 0x10]
	0x0339C520 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1042000
	006 Move X20, 0xD61000
	007 Move W8, [X21+240]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD61000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+240], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToDecimal, X0
	032 Return X0

Method: System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider)

Disassembly:
	0x0339C524 B 0x339C594
	0x0339C528 LDP X20, X19, [X31 + 0x10]
	0x0339C52C MOVZ W0, 0x1
	0x0339C530 LDP X30, X21, [X31], #0x20
	0x0339C534 RET
	0x0339C538 ADRP X0, 0xD5F000
	0x0339C53C LDR X0, [X0 + 0x578]
	0x0339C540 BL 0x1C16D08
	0x0339C544 BL 0x1C16F10
	0x0339C548 MOV X19, X0
	0x0339C54C ADRP X0, 0xD8F000
	0x0339C550 LDR X0, [X0 + 0x630]
	0x0339C554 BL 0x1C16D08
	0x0339C558 MOV X1, X0
	0x0339C55C MOV X0, X19
	0x0339C560 MOV X2, X31
	0x0339C564 BL 0x3314A68
	0x0339C568 ADRP X0, 0xD8F000
	0x0339C56C LDR X0, [X0 + 0x638]
	0x0339C570 BL 0x1C16D08
	0x0339C574 MOV X1, X0
	0x0339C578 MOV X0, X19
	0x0339C57C BL 0x1C16DEC
	0x0339C580 CBZ X0, 0x339C588
	0x0339C584 B 0x339C660
	0x0339C588 CMP X1, 0x0
	0x0339C58C CSET W0, EQ
	0x0339C590 RET
	0x0339C594 CMP X1, X0
	0x0339C598 B.EQ 0x339C5E0
	0x0339C59C CBZ X1, 0x339C5F4
	0x0339C5A0 LDR W8, [X0 + 0x10]
	0x0339C5A4 LDR W9, [X1 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0xD8D000
	005 Move X0, [X0+48]
	006 Call 0x1C17D08
	007 Move X19, X0
	008 Move X0, 0xD8A000
	009 Move X0, [X0+208]
	010 Call 0x1C17D08
	011 Move X20, X0
	012 Move X0, 0xD8A000
	013 Move X0, [X0+152]
	014 Call 0x1C17D08
	015 Move X2, X0
	016 Move X0, X19
	017 Move X1, X20
	018 Move X3, X31
	019 Call SR.Format, X0, X1, X2
	020 Move X19, X0
	021 Move X0, 0xD60000
	022 Move X0, [X0+3080]
	023 Call 0x1C17D08
	024 Call 0x1C17F10
	025 Move X1, X19
	026 Move X2, X31
	027 Move X20, X0
	028 Call InvalidCastException..ctor, X0, X1
	029 Move X0, 0xD90000
	030 Move X0, [X0+1472]
	031 Call 0x1C17D08
	032 Move X1, X0
	033 Move X0, X20
	034 Call 0x1C17DEC

Method: System.Object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider)

Disassembly:
	0x0339C5A8 CMP W8, W9
	0x0339C5AC B.NE 0x339C5E8
	0x0339C5B0 LDR W8, [X0 + 0x14]
	0x0339C5B4 LDR W9, [X1 + 0x14]
	0x0339C5B8 CMP W8, W9
	0x0339C5BC B.NE 0x339C5E8
	0x0339C5C0 LDR W8, [X0 + 0x18]
	0x0339C5C4 LDR W9, [X1 + 0x18]
	0x0339C5C8 CMP W8, W9
	0x0339C5CC B.NE 0x339C5E8
	0x0339C5D0 LDR W8, [X0 + 0x1C]
	0x0339C5D4 LDR W9, [X1 + 0x1C]
	0x0339C5D8 CMP W8, W9
	0x0339C5DC B.NE 0x339C5E8
	0x0339C5E0 MOV W0, W31
	0x0339C5E4 RET
	0x0339C5E8 MOVZ W8, 0x1
	0x0339C5EC CSNEG W0, W8, W8, GT
	0x0339C5F0 RET
	0x0339C5F4 MOVZ W0, 0x1
	0x0339C5F8 RET
	0x0339C5FC STP X30, X21, [X31 - 0x20]!
	0x0339C600 STP X20, X19, [X31 + 0x10]
	0x0339C604 ADRP X21, 0x1041000
	0x0339C608 LDRB W8, [X21 + 0x103]
	0x0339C60C MOV X20, X1
	0x0339C610 MOV X19, X0
	0x0339C614 TBNZ X8, 0x0, 0x339C62C
	0x0339C618 ADRP X0, 0xD5F000
	0x0339C61C LDR X0, [X0 + 0x7C0]
	0x0339C620 BL 0x1C16CF4
	0x0339C624 MOVZ W8, 0x1
	0x0339C628 STRB W8, [X21 + 0x103]
	0x0339C62C CBZ X20, 0x339C64C
	0x0339C630 ADRP X8, 0xD5F000
	0x0339C634 LDR X8, [X8 + 0x7C0]
	0x0339C638 LDR X9, [X20]
	0x0339C63C LDR X8, [X8]
	0x0339C640 CMP X9, X8
	0x0339C644 CSEL X1, X20, X31, EQ
	0x0339C648 B 0x339C650
	0x0339C64C MOV X1, X31
	0x0339C650 MOV X0, X19

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x1042000
	009 Move X23, 0xD59000
	010 Move X22, 0xD61000
	011 Move W8, [X24+241]
	012 Move X23, [X23+1880]
	013 Move X22, [X22+2536]
	014 Move X19, X2
	015 Move X20, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0xD61000
	022 Move X0, [X0+2536]
	023 Call 0x1C17CF4
	024 Move X0, 0xD59000
	025 Move X0, [X0+1880]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X24+241], W8
	029 Move X8, [X21]
	030 Move X0, [X23]
	031 Add X1, X31, 8
	032 Move [X31+8], X8
	033 Call 0x1C17E04
	034 Move X8, [X22]
	035 Move X21, X0
	036 Move W9, [X8+224]
	037 Compare W9, 0
	038 JumpIfNotEqual {41}
	039 Move X0, X8
	040 Call 0x1C17DFC
	041 Move X0, X21
	042 Move X1, X20
	043 Move X2, X19
	044 Move X3, X31
	045 Call Convert.DefaultToType, X0, X1, X2
	046 Move X20, [X31+48]
	047 Move X19, [X31+56]
	048 Move X22, [X31+32]
	049 Move X21, [X31+40]
	050 Move X24, [X31+16]
	051 Move X23, [X31+24]
	052 Move X30, [X31+64]
	053 Return X0

