Type: System.Int32

Method: System.Int32 CompareTo(System.Object value)

Disassembly:
	0x0337C568 LDR X20, [X20 + 0x9E8]
	0x0337C56C MOV X19, X0
	0x0337C570 TBNZ X8, 0x0, 0x337C588
	0x0337C574 ADRP X0, 0xD80000
	0x0337C578 LDR X0, [X0 + 0x9E8]
	0x0337C57C BL 0x1C16CF4
	0x0337C580 MOVZ W8, 0x1
	0x0337C584 STRB W8, [X21 + 0xF6B]
	0x0337C588 LDR X0, [X20]
	0x0337C58C LDR W19, [X19]
	0x0337C590 LDR W8, [X0 + 0xE0]
	0x0337C594 CBNZ W8, 0x337C59C
	0x0337C598 BL 0x1C16DFC
	0x0337C59C MOV W0, W19
	0x0337C5A0 LDP X20, X19, [X31 + 0x10]
	0x0337C5A4 MOV X1, X31
	0x0337C5A8 LDP X30, X21, [X31], #0x20
	0x0337C5AC B 0x33212C4
	0x0337C5B0 STP X30, X21, [X31 - 0x20]!
	0x0337C5B4 STP X20, X19, [X31 + 0x10]
	0x0337C5B8 ADRP X21, 0x1060000
	0x0337C5BC ADRP X20, 0xD80000
	0x0337C5C0 LDRB W8, [X21 + 0xF6C]
	0x0337C5C4 LDR X20, [X20 + 0x9E8]
	0x0337C5C8 MOV X19, X0
	0x0337C5CC TBNZ X8, 0x0, 0x337C5E4
	0x0337C5D0 ADRP X0, 0xD80000
	0x0337C5D4 LDR X0, [X0 + 0x9E8]
	0x0337C5D8 BL 0x1C16CF4
	0x0337C5DC MOVZ W8, 0x1
	0x0337C5E0 STRB W8, [X21 + 0xF6C]
	0x0337C5E4 LDR X0, [X20]
	0x0337C5E8 LDR W19, [X19]
	0x0337C5EC LDR W8, [X0 + 0xE0]
	0x0337C5F0 CBNZ W8, 0x337C5F8
	0x0337C5F4 BL 0x1C16DFC
	0x0337C5F8 MOV W0, W19
	0x0337C5FC LDP X20, X19, [X31 + 0x10]
	0x0337C600 MOV X1, X31
	0x0337C604 LDP X30, X21, [X31], #0x20
	0x0337C608 B 0x3321774
	0x0337C60C STP X30, X21, [X31 - 0x20]!
	0x0337C610 STP X20, X19, [X31 + 0x10]
	0x0337C614 ADRP X21, 0x1060000
	0x0337C618 ADRP X20, 0xD80000
	0x0337C61C LDRB W8, [X21 + 0xF6D]
	0x0337C620 LDR X20, [X20 + 0x9E8]
	0x0337C624 MOV X19, X0
	0x0337C628 TBNZ X8, 0x0, 0x337C640
	0x0337C62C ADRP X0, 0xD80000
	0x0337C630 LDR X0, [X0 + 0x9E8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1061000
	006 Move W8, [X21+3923]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD78000
	014 Move X0, [X0+1880]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3923], W8
	018 Compare X20, 0
	019 JumpIfEqual {33}
	020 Move X8, 0xD78000
	021 Move X8, [X8+1880]
	022 Move X9, [X20]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X0, X20
	026 Call 0x1C17E08
	027 Move W8, [X0]
	028 Move W9, [X19]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move TEMP, 0
	031 Not TEMP
	032 Move W0, TEMP
	033 Move W0, 1
	034 NotImplemented "Instruction CSET not yet implemented."
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return X0
	040 Move X0, 0xD80000
	041 Move X0, [X0+1400]
	042 Call 0x1C17D08
	043 Call 0x1C17F10
	044 Move X19, X0
	045 Move X0, 0xDAF000
	046 Move X0, [X0+3728]
	047 Call 0x1C17D08
	048 Move X1, X0
	049 Move X0, X19
	050 Move X2, X31
	051 Call ArgumentException..ctor, X0, X1
	052 Move X0, 0xDAF000
	053 Move X0, [X0+3736]
	054 Call 0x1C17D08
	055 Move X1, X0
	056 Move X0, X19
	057 Call 0x1C17DEC

Method: System.Int32 CompareTo(System.Int32 value)

Disassembly:
	0x0337C634 BL 0x1C16CF4
	0x0337C638 MOVZ W8, 0x1
	0x0337C63C STRB W8, [X21 + 0xF6D]
	0x0337C640 LDR X0, [X20]
	0x0337C644 LDR W19, [X19]
	0x0337C648 LDR W8, [X0 + 0xE0]
	0x0337C64C CBNZ W8, 0x337C654

ISIL:
	001 Move W8, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move TEMP, 0
	004 Not TEMP
	005 Move W0, TEMP
	006 Return X0
	007 NotImplemented "Instruction CSET not yet implemented."
	008 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x0337C650 BL 0x1C16DFC
	0x0337C654 MOV W0, W19
	0x0337C658 LDP X20, X19, [X31 + 0x10]
	0x0337C65C MOV X1, X31
	0x0337C660 LDP X30, X21, [X31], #0x20
	0x0337C664 B 0x3321AB8
	0x0337C668 STP X30, X21, [X31 - 0x20]!
	0x0337C66C STP X20, X19, [X31 + 0x10]
	0x0337C670 ADRP X21, 0x1060000
	0x0337C674 ADRP X20, 0xD80000
	0x0337C678 LDRB W8, [X21 + 0xF6E]
	0x0337C67C LDR X20, [X20 + 0x9E8]
	0x0337C680 MOV X19, X0
	0x0337C684 TBNZ X8, 0x0, 0x337C69C
	0x0337C688 ADRP X0, 0xD80000
	0x0337C68C LDR X0, [X0 + 0x9E8]
	0x0337C690 BL 0x1C16CF4
	0x0337C694 MOVZ W8, 0x1
	0x0337C698 STRB W8, [X21 + 0xF6E]
	0x0337C69C LDR X0, [X20]
	0x0337C6A0 LDR W19, [X19]
	0x0337C6A4 LDR W8, [X0 + 0xE0]
	0x0337C6A8 CBNZ W8, 0x337C6B0
	0x0337C6AC BL 0x1C16DFC
	0x0337C6B0 MOV W0, W19
	0x0337C6B4 LDP X20, X19, [X31 + 0x10]
	0x0337C6B8 MOV X1, X31
	0x0337C6BC LDP X30, X21, [X31], #0x20
	0x0337C6C0 B 0x3321D94
	0x0337C6C4 STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1061000
	006 Move W8, [X21+3924]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD78000
	014 Move X0, [X0+1880]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3924], W8
	018 Compare X19, 0
	019 JumpIfEqual {25}
	020 Move X8, 0xD78000
	021 Move X8, [X8+1880]
	022 Move X9, [X19]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W0, W31
	026 Move W20, [X20]
	027 Move X0, X19
	028 Call 0x1C17E08
	029 Move W8, [X0]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSET not yet implemented."
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return X0

Method: System.Boolean Equals(System.Int32 obj)

Disassembly:
	0x0337C6C8 STP X20, X19, [X31 + 0x10]
	0x0337C6CC ADRP X0, 0xDAC000
	0x0337C6D0 LDR X0, [X0 + 0x30]
	0x0337C6D4 BL 0x1C16D08

ISIL:
	001 Move W8, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x0337C6D8 MOV X19, X0
	0x0337C6DC ADRP X0, 0xDA9000

ISIL:
	001 Move W0, [X0]
	002 Return X0

Method: System.String ToString()

Disassembly:
	0x0337C6E0 LDR X0, [X0 + 0xD8]
	0x0337C6E4 BL 0x1C16D08
	0x0337C6E8 MOV X20, X0
	0x0337C6EC ADRP X0, 0xDA9000
	0x0337C6F0 LDR X0, [X0 + 0x98]
	0x0337C6F4 BL 0x1C16D08
	0x0337C6F8 MOV X2, X0
	0x0337C6FC MOV X0, X19
	0x0337C700 MOV X1, X20
	0x0337C704 MOV X3, X31
	0x0337C708 BL 0x320A264
	0x0337C70C MOV X19, X0
	0x0337C710 ADRP X0, 0xD7F000
	0x0337C714 LDR X0, [X0 + 0xC08]
	0x0337C718 BL 0x1C16D08
	0x0337C71C BL 0x1C16F10
	0x0337C720 MOV X1, X19
	0x0337C724 MOV X20, X0
	0x0337C728 BL 0x337B498
	0x0337C72C ADRP X0, 0xDAE000
	0x0337C730 LDR X0, [X0 + 0xEA0]
	0x0337C734 BL 0x1C16D08
	0x0337C738 MOV X1, X0
	0x0337C73C MOV X0, X20
	0x0337C740 BL 0x1C16DEC
	0x0337C744 STR X30, [X31 - 0x40]!
	0x0337C748 STP X24, X23, [X31 + 0x10]
	0x0337C74C STP X22, X21, [X31 + 0x20]
	0x0337C750 STP X20, X19, [X31 + 0x30]
	0x0337C754 ADRP X24, 0x1060000
	0x0337C758 ADRP X23, 0xD77000
	0x0337C75C ADRP X22, 0xD80000
	0x0337C760 LDRB W8, [X24 + 0xF6F]
	0x0337C764 LDR X23, [X23 + 0x758]
	0x0337C768 LDR X22, [X22 + 0x9E8]
	0x0337C76C MOV X19, X2
	0x0337C770 MOV X20, X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1061000
	007 Move X20, 0xDA7000
	008 Move X21, 0xDAD000
	009 Move W8, [X22+3925]
	010 Move X20, [X20+472]
	011 Move X21, [X21+120]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xDAD000
	018 Move X0, [X0+120]
	019 Call 0x1C17CF4
	020 Move X0, 0xDA7000
	021 Move X0, [X0+472]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3925], W8
	025 Move X1, [X20]
	026 Move W19, [X19]
	027 Move X0, X31
	028 Call ReadOnlySpan`1<Char>.op_Implicit, X0
	029 Move X20, X0
	030 Move X0, [X21]
	031 Move X21, X1
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move W0, W19
	037 Move X1, X20
	038 Move X2, X21
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X3, X31
	044 Move X30, [X31+48]
	045 Call Number.FormatInt32, X0, X1, X2
	046 Return X0

Method: System.String ToString(System.String format)

Disassembly:
	0x0337C774 MOV X21, X0
	0x0337C778 TBNZ X8, 0x0, 0x337C79C
	0x0337C77C ADRP X0, 0xD80000
	0x0337C780 LDR X0, [X0 + 0x9E8]
	0x0337C784 BL 0x1C16CF4
	0x0337C788 ADRP X0, 0xD77000
	0x0337C78C LDR X0, [X0 + 0x758]
	0x0337C790 BL 0x1C16CF4
	0x0337C794 MOVZ W8, 0x1
	0x0337C798 STRB W8, [X24 + 0xF6F]
	0x0337C79C LDR W8, [X21]
	0x0337C7A0 LDR X0, [X23]
	0x0337C7A4 ADD X1, X31, 0xC
	0x0337C7A8 STR W8, [X31 + 0xC]
	0x0337C7AC BL 0x1C16E04
	0x0337C7B0 LDR X8, [X22]
	0x0337C7B4 MOV X21, X0
	0x0337C7B8 LDR W9, [X8 + 0xE0]
	0x0337C7BC CBNZ W9, 0x337C7C8
	0x0337C7C0 MOV X0, X8
	0x0337C7C4 BL 0x1C16DFC
	0x0337C7C8 MOV X0, X21
	0x0337C7CC MOV X1, X20
	0x0337C7D0 MOV X2, X19
	0x0337C7D4 MOV X3, X31
	0x0337C7D8 BL 0x3318718
	0x0337C7DC LDP X20, X19, [X31 + 0x30]
	0x0337C7E0 LDP X22, X21, [X31 + 0x20]
	0x0337C7E4 LDP X24, X23, [X31 + 0x10]
	0x0337C7E8 LDR X30, [X31], #0x40
	0x0337C7EC RET
	0x0337C7F0 STP X30, X21, [X31 - 0x20]!
	0x0337C7F4 STP X20, X19, [X31 + 0x10]
	0x0337C7F8 ADRP X21, 0x1060000
	0x0337C7FC LDRB W8, [X21 + 0xF70]
	0x0337C800 MOV X20, X1
	0x0337C804 MOV X19, X0
	0x0337C808 TBNZ X8, 0x0, 0x337C820
	0x0337C80C ADRP X0, 0xD79000
	0x0337C810 LDR X0, [X0 + 0xA60]
	0x0337C814 BL 0x1C16CF4
	0x0337C818 MOVZ W8, 0x1
	0x0337C81C STRB W8, [X21 + 0xF70]
	0x0337C820 CBZ X20, 0x337C85C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1061000
	007 Move W8, [X21+3926]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDAD000
	015 Move X0, [X0+120]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3926], W8
	019 Move X21, 0x105E000
	020 Move W8, [X21+1890]
	021 Move W19, [X19]
	022 Compare W8, 0
	023 JumpIfNotEqual {29}
	024 Move X0, 0xD9F000
	025 Move X0, [X0+656]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+1890], W8
	029 Move X22, 0xDAD000
	030 Move X22, [X22+120]
	031 Compare X20, 0
	032 JumpIfEqual {38}
	033 Move X0, X20
	034 Move X1, X31
	035 Call String.GetRawStringData, X0
	036 Move W20, [X20+16]
	037 Move X21, X0
	038 Move X21, X31
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move W0, W19
	045 Move X1, X21
	046 Move X2, X20
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X3, X31
	052 Move X30, [X31+48]
	053 Call Number.FormatInt32, X0, X1, X2
	054 Return X0

Method: System.String ToString(System.IFormatProvider provider)

Disassembly:
	0x0337C824 ADRP X8, 0xD79000
	0x0337C828 LDR X8, [X8 + 0xA60]
	0x0337C82C LDR X9, [X20]
	0x0337C830 LDR X8, [X8]
	0x0337C834 CMP X9, X8
	0x0337C838 B.NE 0x337C874
	0x0337C83C MOV X0, X20
	0x0337C840 BL 0x1C16E08
	0x0337C844 LDR X8, [X0]
	0x0337C848 LDR X9, [X19]
	0x0337C84C CMP X9, X8
	0x0337C850 B.GE 0x337C864
	0x0337C854 MOVN W0, 0x0
	0x0337C858 B 0x337C868
	0x0337C85C MOVZ W0, 0x1
	0x0337C860 B 0x337C868
	0x0337C864 CSET W0, GT
	0x0337C868 LDP X20, X19, [X31 + 0x10]
	0x0337C86C LDP X30, X21, [X31], #0x20
	0x0337C870 RET
	0x0337C874 ADRP X0, 0xD7F000
	0x0337C878 LDR X0, [X0 + 0x578]
	0x0337C87C BL 0x1C16D08
	0x0337C880 BL 0x1C16F10
	0x0337C884 MOV X19, X0
	0x0337C888 ADRP X0, 0xDAE000
	0x0337C88C LDR X0, [X0 + 0xEA8]
	0x0337C890 BL 0x1C16D08
	0x0337C894 MOV X1, X0
	0x0337C898 MOV X0, X19
	0x0337C89C MOV X2, X31
	0x0337C8A0 BL 0x3314A68
	0x0337C8A4 ADRP X0, 0xDAE000
	0x0337C8A8 LDR X0, [X0 + 0xEB0]
	0x0337C8AC BL 0x1C16D08
	0x0337C8B0 MOV X1, X0
	0x0337C8B4 MOV X0, X19
	0x0337C8B8 BL 0x1C16DEC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x1061000
	008 Move X21, 0xDA7000
	009 Move X22, 0xDAD000
	010 Move W8, [X23+3927]
	011 Move X21, [X21+472]
	012 Move X22, [X22+120]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xDAD000
	020 Move X0, [X0+120]
	021 Call 0x1C17CF4
	022 Move X0, 0xDA7000
	023 Move X0, [X0+472]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+3927], W8
	027 Move X1, [X21]
	028 Move W20, [X20]
	029 Move X0, X31
	030 Call ReadOnlySpan`1<Char>.op_Implicit, X0
	031 Move X21, X0
	032 Move X0, [X22]
	033 Move X22, X1
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move W0, W20
	039 Move X1, X21
	040 Move X2, X22
	041 Move X3, X19
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X30, [X31+48]
	047 Move X23, [X31+56]
	048 Call Number.FormatInt32, X0, X1, X2
	049 Return X0

Method: System.String ToString(System.String format, System.IFormatProvider provider)

Disassembly:
	0x0337C8BC LDR X8, [X0]
	0x0337C8C0 CMP X8, X1
	0x0337C8C4 B.GE 0x337C8D0
	0x0337C8C8 MOVN W0, 0x0
	0x0337C8CC RET
	0x0337C8D0 CSET W0, GT
	0x0337C8D4 RET
	0x0337C8D8 STP X30, X21, [X31 - 0x20]!
	0x0337C8DC STP X20, X19, [X31 + 0x10]
	0x0337C8E0 ADRP X21, 0x1060000
	0x0337C8E4 LDRB W8, [X21 + 0xF71]
	0x0337C8E8 MOV X19, X1
	0x0337C8EC MOV X20, X0
	0x0337C8F0 TBNZ X8, 0x0, 0x337C908
	0x0337C8F4 ADRP X0, 0xD79000
	0x0337C8F8 LDR X0, [X0 + 0xA60]
	0x0337C8FC BL 0x1C16CF4
	0x0337C900 MOVZ W8, 0x1
	0x0337C904 STRB W8, [X21 + 0xF71]
	0x0337C908 CBZ X19, 0x337C924
	0x0337C90C ADRP X8, 0xD79000
	0x0337C910 LDR X8, [X8 + 0xA60]
	0x0337C914 LDR X9, [X19]
	0x0337C918 LDR X8, [X8]
	0x0337C91C CMP X9, X8
	0x0337C920 B.EQ 0x337C92C
	0x0337C924 MOV W0, W31
	0x0337C928 B 0x337C944
	0x0337C92C LDR X20, [X20]
	0x0337C930 MOV X0, X19
	0x0337C934 BL 0x1C16E08
	0x0337C938 LDR X8, [X0]
	0x0337C93C CMP X20, X8
	0x0337C940 CSET W0, EQ
	0x0337C944 LDP X20, X19, [X31 + 0x10]
	0x0337C948 LDP X30, X21, [X31], #0x20
	0x0337C94C RET
	0x0337C950 LDR X8, [X0]
	0x0337C954 CMP X8, X1
	0x0337C958 CSET W0, EQ
	0x0337C95C RET
	0x0337C960 LDP W8, W9, [X0]
	0x0337C964 EOR W0, W9, W8, 0x0
	0x0337C968 RET
	0x0337C96C STR X30, [X31 - 0x30]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x1061000
	008 Move W8, [X22+3928]
	009 Move X19, X2
	010 Move X21, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xDAD000
	017 Move X0, [X0+120]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3928], W8
	021 Move X22, 0x105E000
	022 Move W8, [X22+1890]
	023 Move W20, [X20]
	024 Compare W8, 0
	025 JumpIfNotEqual {31}
	026 Move X0, 0xD9F000
	027 Move X0, [X0+656]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+1890], W8
	031 Move X23, 0xDAD000
	032 Move X23, [X23+120]
	033 Compare X21, 0
	034 JumpIfEqual {40}
	035 Move X0, X21
	036 Move X1, X31
	037 Call String.GetRawStringData, X0
	038 Move W21, [X21+16]
	039 Move X22, X0
	040 Move X22, X31
	041 Move X0, [X23]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move W0, W20
	047 Move X1, X22
	048 Move X2, X21
	049 Move X3, X19
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X30, [X31+48]
	055 Move X23, [X31+56]
	056 Call Number.FormatInt32, X0, X1, X2
	057 Return X0

Method: System.Boolean TryFormat(System.Span`1<System.Char> destination, out System.Int32 charsWritten, System.ReadOnlySpan`1<System.Char> format = null, System.IFormatProvider provider = null)

Disassembly:
	0x0337C970 STP X22, X21, [X31 + 0x10]
	0x0337C974 STP X20, X19, [X31 + 0x20]
	0x0337C978 ADRP X22, 0x1060000
	0x0337C97C ADRP X20, 0xDA6000
	0x0337C980 ADRP X21, 0xDAC000
	0x0337C984 LDRB W8, [X22 + 0xF72]
	0x0337C988 LDR X20, [X20 + 0x1D8]
	0x0337C98C LDR X21, [X21 + 0x78]
	0x0337C990 MOV X19, X0
	0x0337C994 TBNZ X8, 0x0, 0x337C9B8
	0x0337C998 ADRP X0, 0xDAC000
	0x0337C99C LDR X0, [X0 + 0x78]
	0x0337C9A0 BL 0x1C16CF4
	0x0337C9A4 ADRP X0, 0xDA6000
	0x0337C9A8 LDR X0, [X0 + 0x1D8]
	0x0337C9AC BL 0x1C16CF4
	0x0337C9B0 MOVZ W8, 0x1
	0x0337C9B4 STRB W8, [X22 + 0xF72]
	0x0337C9B8 LDR X1, [X20]
	0x0337C9BC LDR X19, [X19]
	0x0337C9C0 MOV X0, X31
	0x0337C9C4 BL 0x25BF134
	0x0337C9C8 MOV X20, X0
	0x0337C9CC LDR X0, [X21]
	0x0337C9D0 MOV X21, X1
	0x0337C9D4 LDR W8, [X0 + 0xE0]
	0x0337C9D8 CBNZ W8, 0x337C9E0
	0x0337C9DC BL 0x1C16DFC
	0x0337C9E0 MOV X0, X19
	0x0337C9E4 MOV X1, X20
	0x0337C9E8 MOV X2, X21
	0x0337C9EC LDP X20, X19, [X31 + 0x20]
	0x0337C9F0 LDP X22, X21, [X31 + 0x10]
	0x0337C9F4 MOV X3, X31
	0x0337C9F8 LDR X30, [X31], #0x30
	0x0337C9FC B 0x337CA00
	0x0337CA00 STP X29, X30, [X31 - 0x60]!
	0x0337CA04 STP X28, X27, [X31 + 0x10]
	0x0337CA08 STP X26, X25, [X31 + 0x20]
	0x0337CA0C STP X24, X23, [X31 + 0x30]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X27, 0x1061000
	012 Move X26, 0xDAD000
	013 Move W8, [X27+3929]
	014 Move X26, [X26+120]
	015 Move X20, X6
	016 Move X22, X5
	017 Move X24, X4
	018 Move X19, X3
	019 Move X21, X2
	020 Move X23, X1
	021 Move X25, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {31}
	026 Move X0, 0xDAD000
	027 Move X0, [X0+120]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X27+3929], W8
	031 Move X0, [X26]
	032 Move W25, [X25]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move W0, W25
	038 Move X1, X24
	039 Move X2, X22
	040 Move X3, X20
	041 Move X4, X23
	042 Move X5, X21
	043 Move X6, X19
	044 Move X20, [X31+64]
	045 Move X19, [X31+72]
	046 Move X22, [X31+48]
	047 Move X21, [X31+56]
	048 Move X24, [X31+32]
	049 Move X23, [X31+40]
	050 Move X26, [X31+16]
	051 Move X25, [X31+24]
	052 Move X30, [X31+80]
	053 Move X27, [X31+88]
	054 Call Number.TryFormatInt32, X0, X1, X2, X3, X4
	055 Return X0

Method: System.Int32 Parse(System.String s)

Disassembly:
	0x0337CA10 STP X22, X21, [X31 + 0x40]
	0x0337CA14 STP X20, X19, [X31 + 0x50]
	0x0337CA18 ADD X29, X31, 0x0
	0x0337CA1C SUB X31, X31, 0xC0
	0x0337CA20 MRS X25, 0xC000
	0x0337CA24 LDR X8, [X25 + 0x28]
	0x0337CA28 ADRP X23, 0x1060000
	0x0337CA2C ADRP X26, 0xDAC000
	0x0337CA30 MOV X22, X3
	0x0337CA34 STUR X8, [X29 - 0x8]
	0x0337CA38 LDRB W8, [X23 + 0xFC2]
	0x0337CA3C LDR X26, [X26 + 0x78]
	0x0337CA40 MOV X20, X2
	0x0337CA44 MOV X21, X1
	0x0337CA48 MOV X19, X0
	0x0337CA4C SUB X27, X29, 0x90
	0x0337CA50 TBNZ X8, 0x0, 0x337CA80
	0x0337CA54 ADRP X0, 0xDAC000
	0x0337CA58 LDR X0, [X0 + 0x78]
	0x0337CA5C BL 0x1C16CF4
	0x0337CA60 ADRP X0, 0xDA6000
	0x0337CA64 LDR X0, [X0 + 0x28]
	0x0337CA68 BL 0x1C16CF4
	0x0337CA6C ADRP X0, 0xDA6000
	0x0337CA70 LDR X0, [X0 + 0x4E8]
	0x0337CA74 BL 0x1C16CF4
	0x0337CA78 MOVZ W8, 0x1
	0x0337CA7C STRB W8, [X23 + 0xFC2]
	0x0337CA80 LDR X0, [X26]
	0x0337CA84 MOVI V0.2D, 0x0
	0x0337CA88 STUR W31, [X29 - 0x94]
	0x0337CA8C STUR V0, [X27 + 0x6A]
	0x0337CA90 STP V0, V0, [X29 - 0x40]
	0x0337CA94 STP V0, V0, [X29 - 0x60]
	0x0337CA98 STP V0, V0, [X29 - 0x80]
	0x0337CA9C STUR V0, [X29 - 0x90]
	0x0337CAA0 STP V0, V0, [X29 - 0xC0]
	0x0337CAA4 LDR W8, [X0 + 0xE0]
	0x0337CAA8 TBNZ X19, 0x0, 0x337CAC4
	0x0337CAAC CBNZ W20, 0x337CAC4
	0x0337CAB0 CBNZ W8, 0x337CAB8
	0x0337CAB4 BL 0x1C16DFC
	0x0337CAB8 MOVN W1, 0x0
	0x0337CABC MOV X0, X19
	0x0337CAC0 B 0x337CB6C
	0x0337CAC4 CBNZ W8, 0x337CACC
	0x0337CAC8 BL 0x1C16DFC
	0x0337CACC SUB X2, X29, 0x94

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1061000
	006 Move W8, [X20+3930]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xDAD000
	013 Move X0, [X0+120]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3930], W8
	017 Compare X19, 0
	018 JumpIfNotEqual {22}
	019 Move W0, 48
	020 Move X1, X31
	021 Call ThrowHelper.ThrowArgumentNullException, X0
	022 Move X20, 0x105E000
	023 Move W8, [X20+1890]
	024 Compare W8, 0
	025 JumpIfNotEqual {31}
	026 Move X0, 0xD9F000
	027 Move X0, [X0+656]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+1890], W8
	031 Move X21, 0xDAD000
	032 Move X21, [X21+120]
	033 Compare X19, 0
	034 JumpIfEqual {40}
	035 Move X0, X19
	036 Move X1, X31
	037 Call String.GetRawStringData, X0
	038 Move W20, [X19+16]
	039 Move X19, X0
	040 Move X20, X31
	041 Move X0, X31
	042 Call NumberFormatInfo.get_CurrentInfo
	043 Move X8, [X21]
	044 Move X21, X0
	045 Move W9, [X8+224]
	046 Compare W9, 0
	047 JumpIfNotEqual {50}
	048 Move X0, X8
	049 Call 0x1C17DFC
	050 Move X0, X19
	051 Move X1, X20
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move W2, 7
	055 Move X3, X21
	056 Move X30, [X31+32]
	057 Move X21, [X31+40]
	058 Call Number.ParseInt32, X0, X1, X2
	059 Return X0

Method: System.Int32 Parse(System.String s, System.Globalization.NumberStyles style)

Disassembly:
	0x0337CAD0 MOV X0, X21
	0x0337CAD4 MOV X1, X20
	0x0337CAD8 BL 0x338071C
	0x0337CADC MOV W23, W0
	0x0337CAE0 MOV X0, X22
	0x0337CAE4 MOV X1, X31
	0x0337CAE8 BL 0x333ACEC
	0x0337CAEC LDUR W22, [X29 - 0x94]
	0x0337CAF0 MOVZ W8, 0xFFDF
	0x0337CAF4 AND W10, W23, W8, 0x0
	0x0337CAF8 CMP W10, 0x47
	0x0337CAFC CSET W8, EQ
	0x0337CB00 CMP W22, 0x1
	0x0337CB04 CSET W9, LT
	0x0337CB08 CMP W10, 0x44
	0x0337CB0C MOV X24, X0
	0x0337CB10 B.EQ 0x337CB50
	0x0337CB14 AND W8, W8, W9, 0x0
	0x0337CB18 CBNZ W8, 0x337CB50
	0x0337CB1C AND W8, W23, 0xFFFFFFDF
	0x0337CB20 AND W8, W8, 0xFFFF
	0x0337CB24 CMP W8, 0x58
	0x0337CB28 B.NE 0x337CBA0
	0x0337CB2C LDR X0, [X26]
	0x0337CB30 LDR W8, [X0 + 0xE0]
	0x0337CB34 CBNZ W8, 0x337CB3C
	0x0337CB38 BL 0x1C16DFC
	0x0337CB3C SUB W1, W23, 0x21
	0x0337CB40 MOV X0, X19
	0x0337CB44 MOV W2, W22
	0x0337CB48 BL 0x33846B0
	0x0337CB4C B 0x337CB70
	0x0337CB50 TBNZ X19, 0x0, 0x337CC34
	0x0337CB54 LDR X0, [X26]
	0x0337CB58 LDR W8, [X0 + 0xE0]
	0x0337CB5C CBNZ W8, 0x337CB64
	0x0337CB60 BL 0x1C16DFC
	0x0337CB64 MOV X0, X19
	0x0337CB68 MOV W1, W22
	0x0337CB6C BL 0x33841B8
	0x0337CB70 LDR X8, [X25 + 0x28]
	0x0337CB74 LDUR X9, [X29 - 0x8]
	0x0337CB78 CMP X8, X9
	0x0337CB7C B.NE 0x337CC94
	0x0337CB80 ADD X31, X29, 0x0
	0x0337CB84 LDP X20, X19, [X31 + 0x50]
	0x0337CB88 LDP X22, X21, [X31 + 0x40]
	0x0337CB8C LDP X24, X23, [X31 + 0x30]
	0x0337CB90 LDP X26, X25, [X31 + 0x20]
	0x0337CB94 LDP X28, X27, [X31 + 0x10]
	0x0337CB98 LDP X29, X30, [X31], #0x60
	0x0337CB9C RET
	0x0337CBA0 LDR X0, [X26]
	0x0337CBA4 MOVI V0.2D, 0x0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1061000
	007 Move W8, [X21+3931]
	008 Move W19, W1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDAD000
	015 Move X0, [X0+120]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3931], W8
	019 Move W0, W19
	020 Move X1, X31
	021 Call NumberFormatInfo.ValidateParseStyleInteger, X0
	022 Compare X20, 0
	023 JumpIfNotEqual {27}
	024 Move W0, 48
	025 Move X1, X31
	026 Call ThrowHelper.ThrowArgumentNullException, X0
	027 Move X21, 0x105E000
	028 Move W8, [X21+1890]
	029 Compare W8, 0
	030 JumpIfNotEqual {36}
	031 Move X0, 0xD9F000
	032 Move X0, [X0+656]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X21+1890], W8
	036 Move X22, 0xDAD000
	037 Move X22, [X22+120]
	038 Compare X20, 0
	039 JumpIfEqual {45}
	040 Move X0, X20
	041 Move X1, X31
	042 Call String.GetRawStringData, X0
	043 Move W20, [X20+16]
	044 Move X21, X0
	045 Move X21, X31
	046 Move X0, X31
	047 Call NumberFormatInfo.get_CurrentInfo
	048 Move X8, [X22]
	049 Move X22, X0
	050 Move W9, [X8+224]
	051 Compare W9, 0
	052 JumpIfNotEqual {55}
	053 Move X0, X8
	054 Call 0x1C17DFC
	055 Move X0, X21
	056 Move X1, X20
	057 Move W2, W19
	058 Move X3, X22
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X22, [X31+16]
	062 Move X21, [X31+24]
	063 Move X30, [X31+48]
	064 Call Number.ParseInt32, X0, X1, X2
	065 Return X0

Method: System.Int32 Parse(System.String s, System.IFormatProvider provider)

Disassembly:
	0x0337CBA8 STUR V0, [X27 + 0x6A]
	0x0337CBAC STP V0, V0, [X29 - 0x40]
	0x0337CBB0 STP V0, V0, [X29 - 0x60]
	0x0337CBB4 STP V0, V0, [X29 - 0x80]
	0x0337CBB8 STUR V0, [X29 - 0x90]
	0x0337CBBC LDR W8, [X0 + 0xE0]
	0x0337CBC0 CBNZ W8, 0x337CBC8
	0x0337CBC4 BL 0x1C16DFC
	0x0337CBC8 SUB X1, X29, 0x90
	0x0337CBCC MOV X0, X19
	0x0337CBD0 BL 0x33848A0
	0x0337CBD4 ADD X8, X31, 0x0
	0x0337CBD8 SUB X1, X8, 0x40
	0x0337CBDC ADD X31, X1, 0x0
	0x0337CBE0 MOVI V0.2D, 0x0
	0x0337CBE4 SUB X0, X29, 0xC0
	0x0337CBE8 MOVZ W2, 0x20
	0x0337CBEC MOV X3, X31
	0x0337CBF0 STP V0, V0, [X8 - 0x20]
	0x0337CBF4 STP V0, V0, [X8 - 0x40]
	0x0337CBF8 BL 0x3240C88
	0x0337CBFC LDR X0, [X26]
	0x0337CC00 ANDS W31, W23, 0xFFFF
	0x0337CC04 LDR W8, [X0 + 0xE0]
	0x0337CC08 B.EQ 0x337CC60
	0x0337CC0C CBNZ W8, 0x337CC14
	0x0337CC10 BL 0x1C16DFC
	0x0337CC14 SUB X0, X29, 0xC0
	0x0337CC18 SUB X1, X29, 0x90
	0x0337CC1C MOV W2, W23
	0x0337CC20 MOV W3, W22
	0x0337CC24 MOV X4, X24
	0x0337CC28 MOV W5, W31
	0x0337CC2C BL 0x3380A9C
	0x0337CC30 B 0x337CC80
	0x0337CC34 CBZ X24, 0x337CC90
	0x0337CC38 LDR X0, [X26]
	0x0337CC3C LDR X20, [X24 + 0x30]
	0x0337CC40 LDR W8, [X0 + 0xE0]
	0x0337CC44 CBNZ W8, 0x337CC4C
	0x0337CC48 BL 0x1C16DFC
	0x0337CC4C MOV X0, X19
	0x0337CC50 MOV W1, W22
	0x0337CC54 MOV X2, X20
	0x0337CC58 BL 0x3384410
	0x0337CC5C B 0x337CB70
	0x0337CC60 CBNZ W8, 0x337CC68
	0x0337CC64 BL 0x1C16DFC
	0x0337CC68 SUB X0, X29, 0xC0
	0x0337CC6C SUB X1, X29, 0x90
	0x0337CC70 MOV X2, X21
	0x0337CC74 MOV X3, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1061000
	007 Move W8, [X21+3932]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDAD000
	015 Move X0, [X0+120]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3932], W8
	019 Compare X20, 0
	020 JumpIfNotEqual {24}
	021 Move W0, 48
	022 Move X1, X31
	023 Call ThrowHelper.ThrowArgumentNullException, X0
	024 Move X21, 0x105E000
	025 Move W8, [X21+1890]
	026 Compare W8, 0
	027 JumpIfNotEqual {33}
	028 Move X0, 0xD9F000
	029 Move X0, [X0+656]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+1890], W8
	033 Move X22, 0xDAD000
	034 Move X22, [X22+120]
	035 Compare X20, 0
	036 JumpIfEqual {42}
	037 Move X0, X20
	038 Move X1, X31
	039 Call String.GetRawStringData, X0
	040 Move W21, [X20+16]
	041 Move X20, X0
	042 Move X21, X31
	043 Move X0, X19
	044 Move X1, X31
	045 Call NumberFormatInfo.GetInstance, X0
	046 Move X8, [X22]
	047 Move X19, X0
	048 Move W9, [X8+224]
	049 Compare W9, 0
	050 JumpIfNotEqual {53}
	051 Move X0, X8
	052 Call 0x1C17DFC
	053 Move X0, X20
	054 Move X1, X21
	055 Move X3, X19
	056 Move X20, [X31+32]
	057 Move X19, [X31+40]
	058 Move X22, [X31+16]
	059 Move X21, [X31+24]
	060 Move W2, 7
	061 Move X30, [X31+48]
	062 Call Number.ParseInt32, X0, X1, X2
	063 Return X0

Method: System.Int32 Parse(System.String s, System.Globalization.NumberStyles style, System.IFormatProvider provider)

Disassembly:
	0x0337CC78 MOV X4, X24
	0x0337CC7C BL 0x338102C
	0x0337CC80 SUB X0, X29, 0xC0
	0x0337CC84 MOV X1, X31
	0x0337CC88 BL 0x3240CC4
	0x0337CC8C B 0x337CB70
	0x0337CC90 BL 0x1C16F20
	0x0337CC94 BL 0x3EB1B20
	0x0337CC98 STP X30, X23, [X31 - 0x30]!
	0x0337CC9C STP X22, X21, [X31 + 0x10]
	0x0337CCA0 STP X20, X19, [X31 + 0x20]
	0x0337CCA4 ADRP X23, 0x1060000
	0x0337CCA8 ADRP X21, 0xDA6000
	0x0337CCAC ADRP X22, 0xDAC000
	0x0337CCB0 LDRB W8, [X23 + 0xF73]
	0x0337CCB4 LDR X21, [X21 + 0x1D8]
	0x0337CCB8 LDR X22, [X22 + 0x78]
	0x0337CCBC MOV X19, X1
	0x0337CCC0 MOV X20, X0
	0x0337CCC4 TBNZ X8, 0x0, 0x337CCE8
	0x0337CCC8 ADRP X0, 0xDAC000
	0x0337CCCC LDR X0, [X0 + 0x78]
	0x0337CCD0 BL 0x1C16CF4
	0x0337CCD4 ADRP X0, 0xDA6000
	0x0337CCD8 LDR X0, [X0 + 0x1D8]
	0x0337CCDC BL 0x1C16CF4
	0x0337CCE0 MOVZ W8, 0x1
	0x0337CCE4 STRB W8, [X23 + 0xF73]
	0x0337CCE8 LDR X1, [X21]
	0x0337CCEC LDR X20, [X20]
	0x0337CCF0 MOV X0, X31
	0x0337CCF4 BL 0x25BF134
	0x0337CCF8 MOV X21, X0
	0x0337CCFC LDR X0, [X22]
	0x0337CD00 MOV X22, X1
	0x0337CD04 LDR W8, [X0 + 0xE0]
	0x0337CD08 CBNZ W8, 0x337CD10
	0x0337CD0C BL 0x1C16DFC
	0x0337CD10 MOV X0, X20
	0x0337CD14 MOV X1, X21
	0x0337CD18 MOV X2, X22
	0x0337CD1C MOV X3, X19
	0x0337CD20 LDP X20, X19, [X31 + 0x20]
	0x0337CD24 LDP X22, X21, [X31 + 0x10]
	0x0337CD28 LDP X30, X23, [X31], #0x30
	0x0337CD2C B 0x337CA00
	0x0337CD30 STR X30, [X31 - 0x30]!
	0x0337CD34 STP X22, X21, [X31 + 0x10]
	0x0337CD38 STP X20, X19, [X31 + 0x20]
	0x0337CD3C ADRP X21, 0x1060000
	0x0337CD40 LDRB W8, [X21 + 0xF74]
	0x0337CD44 MOV X20, X1
	0x0337CD48 MOV X19, X0
	0x0337CD4C TBNZ X8, 0x0, 0x337CD64
	0x0337CD50 ADRP X0, 0xDAC000
	0x0337CD54 LDR X0, [X0 + 0x78]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x1061000
	008 Move W8, [X22+3933]
	009 Move X20, X2
	010 Move W19, W1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xDAD000
	017 Move X0, [X0+120]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3933], W8
	021 Move W0, W19
	022 Move X1, X31
	023 Call NumberFormatInfo.ValidateParseStyleInteger, X0
	024 Compare X21, 0
	025 JumpIfNotEqual {29}
	026 Move W0, 48
	027 Move X1, X31
	028 Call ThrowHelper.ThrowArgumentNullException, X0
	029 Move X22, 0x105E000
	030 Move W8, [X22+1890]
	031 Compare W8, 0
	032 JumpIfNotEqual {38}
	033 Move X0, 0xD9F000
	034 Move X0, [X0+656]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X22+1890], W8
	038 Move X23, 0xDAD000
	039 Move X23, [X23+120]
	040 Compare X21, 0
	041 JumpIfEqual {47}
	042 Move X0, X21
	043 Move X1, X31
	044 Call String.GetRawStringData, X0
	045 Move W21, [X21+16]
	046 Move X22, X0
	047 Move X22, X31
	048 Move X0, X20
	049 Move X1, X31
	050 Call NumberFormatInfo.GetInstance, X0
	051 Move X8, [X23]
	052 Move X20, X0
	053 Move W9, [X8+224]
	054 Compare W9, 0
	055 JumpIfNotEqual {58}
	056 Move X0, X8
	057 Call 0x1C17DFC
	058 Move X0, X22
	059 Move X1, X21
	060 Move W2, W19
	061 Move X3, X20
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X22, [X31+16]
	065 Move X21, [X31+24]
	066 Move X30, [X31+48]
	067 Move X23, [X31+56]
	068 Call Number.ParseInt32, X0, X1, X2
	069 Return X0

Method: System.Int32 Parse(System.ReadOnlySpan`1<System.Char> s, System.Globalization.NumberStyles style = 7, System.IFormatProvider provider = null)

Disassembly:
	0x0337CD58 BL 0x1C16CF4
	0x0337CD5C MOVZ W8, 0x1
	0x0337CD60 STRB W8, [X21 + 0xF74]
	0x0337CD64 ADRP X21, 0x105D000
	0x0337CD68 LDRB W8, [X21 + 0x762]
	0x0337CD6C LDR X19, [X19]
	0x0337CD70 CBNZ W8, 0x337CD88
	0x0337CD74 ADRP X0, 0xD9E000
	0x0337CD78 LDR X0, [X0 + 0x290]
	0x0337CD7C BL 0x1C16CF4
	0x0337CD80 MOVZ W8, 0x1
	0x0337CD84 STRB W8, [X21 + 0x762]
	0x0337CD88 ADRP X22, 0xDAC000
	0x0337CD8C LDR X22, [X22 + 0x78]
	0x0337CD90 CBZ X20, 0x337CDAC
	0x0337CD94 MOV X0, X20
	0x0337CD98 MOV X1, X31
	0x0337CD9C BL 0x3225708
	0x0337CDA0 LDR W20, [X20 + 0x10]
	0x0337CDA4 MOV X21, X0
	0x0337CDA8 B 0x337CDB0
	0x0337CDAC MOV X21, X31
	0x0337CDB0 LDR X0, [X22]
	0x0337CDB4 LDR W8, [X0 + 0xE0]
	0x0337CDB8 CBNZ W8, 0x337CDC0
	0x0337CDBC BL 0x1C16DFC
	0x0337CDC0 MOV X0, X19
	0x0337CDC4 MOV X1, X21
	0x0337CDC8 MOV X2, X20
	0x0337CDCC LDP X20, X19, [X31 + 0x20]
	0x0337CDD0 LDP X22, X21, [X31 + 0x10]
	0x0337CDD4 MOV X3, X31
	0x0337CDD8 LDR X30, [X31], #0x30
	0x0337CDDC B 0x337CA00
	0x0337CDE0 STP X30, X23, [X31 - 0x30]!
	0x0337CDE4 STP X22, X21, [X31 + 0x10]
	0x0337CDE8 STP X20, X19, [X31 + 0x20]
	0x0337CDEC ADRP X22, 0x1060000
	0x0337CDF0 LDRB W8, [X22 + 0xF75]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x1061000
	009 Move X23, 0xDAD000
	010 Move W8, [X24+3934]
	011 Move X23, [X23+120]
	012 Move X22, X3
	013 Move W19, W2
	014 Move X20, X1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xDAD000
	021 Move X0, [X0+120]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+3934], W8
	025 Move W0, W19
	026 Move X1, X31
	027 Call NumberFormatInfo.ValidateParseStyleInteger, X0
	028 Move X0, X22
	029 Move X1, X31
	030 Call NumberFormatInfo.GetInstance, X0
	031 Move X8, [X23]
	032 Move X22, X0
	033 Move W9, [X8+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Move X0, X21
	039 Move X1, X20
	040 Move W2, W19
	041 Move X3, X22
	042 Move X20, [X31+48]
	043 Move X19, [X31+56]
	044 Move X22, [X31+32]
	045 Move X21, [X31+40]
	046 Move X24, [X31+16]
	047 Move X23, [X31+24]
	048 Move X30, [X31+64]
	049 Call Number.ParseInt32, X0, X1, X2
	050 Return X0

Method: System.Boolean TryParse(System.String s, out System.Int32 result)

Disassembly:
	0x0337CDF4 MOV X19, X2
	0x0337CDF8 MOV X21, X1
	0x0337CDFC MOV X20, X0
	0x0337CE00 TBNZ X8, 0x0, 0x337CE18
	0x0337CE04 ADRP X0, 0xDAC000
	0x0337CE08 LDR X0, [X0 + 0x78]
	0x0337CE0C BL 0x1C16CF4
	0x0337CE10 MOVZ W8, 0x1
	0x0337CE14 STRB W8, [X22 + 0xF75]
	0x0337CE18 ADRP X22, 0x105D000
	0x0337CE1C LDRB W8, [X22 + 0x762]
	0x0337CE20 LDR X20, [X20]
	0x0337CE24 CBNZ W8, 0x337CE3C
	0x0337CE28 ADRP X0, 0xD9E000
	0x0337CE2C LDR X0, [X0 + 0x290]
	0x0337CE30 BL 0x1C16CF4
	0x0337CE34 MOVZ W8, 0x1
	0x0337CE38 STRB W8, [X22 + 0x762]
	0x0337CE3C ADRP X23, 0xDAC000
	0x0337CE40 LDR X23, [X23 + 0x78]
	0x0337CE44 CBZ X21, 0x337CE60
	0x0337CE48 MOV X0, X21
	0x0337CE4C MOV X1, X31
	0x0337CE50 BL 0x3225708
	0x0337CE54 LDR W21, [X21 + 0x10]
	0x0337CE58 MOV X22, X0
	0x0337CE5C B 0x337CE64
	0x0337CE60 MOV X22, X31
	0x0337CE64 LDR X0, [X23]
	0x0337CE68 LDR W8, [X0 + 0xE0]
	0x0337CE6C CBNZ W8, 0x337CE74
	0x0337CE70 BL 0x1C16DFC
	0x0337CE74 MOV X0, X20
	0x0337CE78 MOV X1, X22
	0x0337CE7C MOV X2, X21
	0x0337CE80 MOV X3, X19
	0x0337CE84 LDP X20, X19, [X31 + 0x20]
	0x0337CE88 LDP X22, X21, [X31 + 0x10]
	0x0337CE8C LDP X30, X23, [X31], #0x30
	0x0337CE90 B 0x337CA00
	0x0337CE94 STP X30, X27, [X31 - 0x50]!
	0x0337CE98 STP X26, X25, [X31 + 0x10]
	0x0337CE9C STP X24, X23, [X31 + 0x20]
	0x0337CEA0 STP X22, X21, [X31 + 0x30]
	0x0337CEA4 STP X20, X19, [X31 + 0x40]
	0x0337CEA8 ADRP X27, 0x1060000
	0x0337CEAC ADRP X26, 0xDAC000
	0x0337CEB0 LDRB W8, [X27 + 0xF76]
	0x0337CEB4 LDR X26, [X26 + 0x78]
	0x0337CEB8 MOV X20, X6
	0x0337CEBC MOV X22, X5
	0x0337CEC0 MOV X24, X4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1061000
	007 Move W8, [X21+3935]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDAD000
	015 Move X0, [X0+120]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3935], W8
	019 Compare X20, 0
	020 JumpIfEqual {56}
	021 Move X21, 0x105E000
	022 Move X22, 0xDAD000
	023 Move W8, [X21+1890]
	024 Move X22, [X22+120]
	025 Compare W8, 0
	026 JumpIfNotEqual {32}
	027 Move X0, 0xD9F000
	028 Move X0, [X0+656]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X21+1890], W8
	032 Move X0, X20
	033 Move X1, X31
	034 Call String.GetRawStringData, X0
	035 Move W20, [X20+16]
	036 Move X21, X0
	037 Move X0, X31
	038 Call NumberFormatInfo.get_CurrentInfo
	039 Move X8, [X22]
	040 Move X22, X0
	041 Move W9, [X8+224]
	042 Compare W9, 0
	043 JumpIfNotEqual {46}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X0, X21
	047 Move X1, X20
	048 Move X3, X22
	049 Move X4, X19
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move W2, 7
	055 Move X30, [X31+48]
	056 Move [X19], W31
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X22, [X31+16]
	060 Move X21, [X31+24]
	061 Move W0, W31
	062 Move X30, [X31+48]
	063 Return X0

Method: System.Boolean TryParse(System.ReadOnlySpan`1<System.Char> s, out System.Int32 result)

Disassembly:
	0x0337D048 CMP W10, 0x44
	0x0337D04C MOV X10, X0
	0x0337D050 B.EQ 0x337D09C
	0x0337D054 AND W8, W8, W9, 0x0
	0x0337D058 CBNZ W8, 0x337D09C
	0x0337D05C AND W8, W26, 0xFFFFFFDF
	0x0337D060 AND W8, W8, 0xFFFF
	0x0337D064 CMP W8, 0x58
	0x0337D068 B.NE 0x337D0FC
	0x0337D06C LDR X0, [X27]
	0x0337D070 LDR W8, [X0 + 0xE0]
	0x0337D074 CBNZ W8, 0x337D07C
	0x0337D078 BL 0x1C16DFC
	0x0337D07C LDUR X5, [X29 - 0xD8]
	0x0337D080 SUB W1, W26, 0x21
	0x0337D084 MOV X0, X22
	0x0337D088 MOV W2, W25
	0x0337D08C MOV X3, X21
	0x0337D090 MOV X4, X20
	0x0337D094 BL 0x3384F98
	0x0337D098 B 0x337D0C8
	0x0337D09C TBNZ X22, 0x0, 0x337D194
	0x0337D0A0 LDR X0, [X27]
	0x0337D0A4 LDR W8, [X0 + 0xE0]
	0x0337D0A8 CBNZ W8, 0x337D0B0
	0x0337D0AC BL 0x1C16DFC
	0x0337D0B0 MOV X0, X22
	0x0337D0B4 MOV W1, W25
	0x0337D0B8 LDUR X4, [X29 - 0xD8]
	0x0337D0BC MOV X2, X21
	0x0337D0C0 MOV X3, X20
	0x0337D0C4 BL 0x3384A48
	0x0337D0C8 LDR X8, [X28 + 0x28]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x1060000
	008 Move X22, 0xDAC000
	009 Move W8, [X23+3936]
	010 Move X22, [X22+120]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xDAC000
	019 Move X0, [X0+120]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+3936], W8
	023 Move X0, X31
	024 Call NumberFormatInfo.get_CurrentInfo
	025 Move X8, [X22]
	026 Move X22, X0
	027 Move W9, [X8+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {32}
	030 Move X0, X8
	031 Call 0x1C17DFC
	032 Move X0, X21
	033 Move X1, X20
	034 Move X3, X22
	035 Move X4, X19
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move W2, 7
	041 Move X30, [X31+48]
	042 Move X23, [X31+56]
	043 Call Number.TryParseInt32, X0, X1, X2, X3
	044 Return X0

Method: System.Boolean TryParse(System.String s, System.Globalization.NumberStyles style, System.IFormatProvider provider, out System.Int32 result)

Disassembly:
	0x0337D0CC LDUR X9, [X29 - 0x18]
	0x0337D0D0 CMP X8, X9
	0x0337D0D4 B.NE 0x337D20C
	0x0337D0D8 AND W0, W0, 0x1
	0x0337D0DC ADD X31, X29, 0x0
	0x0337D0E0 LDP X20, X19, [X31 + 0x50]
	0x0337D0E4 LDP X22, X21, [X31 + 0x40]
	0x0337D0E8 LDP X24, X23, [X31 + 0x30]
	0x0337D0EC LDP X26, X25, [X31 + 0x20]
	0x0337D0F0 LDP X28, X27, [X31 + 0x10]
	0x0337D0F4 LDP X29, X30, [X31], #0x60
	0x0337D0F8 RET
	0x0337D0FC LDR X0, [X27]
	0x0337D100 MOVI V0.2D, 0x0
	0x0337D104 STUR V0, [X19 + 0x6A]
	0x0337D108 STP V0, V0, [X29 - 0x50]
	0x0337D10C STP V0, V0, [X29 - 0x70]
	0x0337D110 STP V0, V0, [X29 - 0x90]
	0x0337D114 STUR V0, [X29 - 0xA0]
	0x0337D118 LDR W8, [X0 + 0xE0]
	0x0337D11C STUR X10, [X29 - 0xE0]
	0x0337D120 CBNZ W8, 0x337D128
	0x0337D124 BL 0x1C16DFC
	0x0337D128 SUB X1, X29, 0xA0
	0x0337D12C MOV X0, X22
	0x0337D130 BL 0x33848A0
	0x0337D134 ADD X8, X31, 0x0
	0x0337D138 SUB X1, X8, 0x40
	0x0337D13C ADD X31, X1, 0x0
	0x0337D140 MOVI V0.2D, 0x0
	0x0337D144 SUB X0, X29, 0xD0
	0x0337D148 MOVZ W2, 0x20
	0x0337D14C MOV X3, X31
	0x0337D150 STP V0, V0, [X8 - 0x20]
	0x0337D154 STP V0, V0, [X8 - 0x40]
	0x0337D158 BL 0x3240C88
	0x0337D15C LDR X0, [X27]
	0x0337D160 ANDS W31, W26, 0xFFFF
	0x0337D164 LDR W8, [X0 + 0xE0]
	0x0337D168 B.EQ 0x337D1CC
	0x0337D16C CBNZ W8, 0x337D174
	0x0337D170 BL 0x1C16DFC
	0x0337D174 LDUR X4, [X29 - 0xE0]
	0x0337D178 SUB X0, X29, 0xD0
	0x0337D17C SUB X1, X29, 0xA0
	0x0337D180 MOV W2, W26
	0x0337D184 MOV W3, W25
	0x0337D188 MOV W5, W31
	0x0337D18C BL 0x3380A9C
	0x0337D190 B 0x337D1EC
	0x0337D194 CBZ X10, 0x337D208
	0x0337D198 LDR X0, [X27]
	0x0337D19C LDR X23, [X10 + 0x30]
	0x0337D1A0 LDR W8, [X0 + 0xE0]
	0x0337D1A4 CBNZ W8, 0x337D1AC
	0x0337D1A8 BL 0x1C16DFC
	0x0337D1AC LDUR X5, [X29 - 0xD8]
	0x0337D1B0 MOV X0, X22
	0x0337D1B4 MOV W1, W25
	0x0337D1B8 MOV X2, X23
	0x0337D1BC MOV X3, X21

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x1060000
	009 Move W8, [X23+3937]
	010 Move X19, X3
	011 Move X21, X2
	012 Move W20, W1
	013 Move X22, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xDAC000
	019 Move X0, [X0+120]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+3937], W8
	023 Move W0, W20
	024 Move X1, X31
	025 Call NumberFormatInfo.ValidateParseStyleInteger, X0
	026 Compare X22, 0
	027 JumpIfEqual {68}
	028 Move X23, 0x105D000
	029 Move X24, 0xDAC000
	030 Move W8, [X23+1890]
	031 Move X24, [X24+120]
	032 Compare W8, 0
	033 JumpIfNotEqual {39}
	034 Move X0, 0xD9E000
	035 Move X0, [X0+656]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X23+1890], W8
	039 Move X0, X22
	040 Move X1, X31
	041 Call String.GetRawStringData, X0
	042 Move W22, [X22+16]
	043 Move X23, X0
	044 Move X0, X21
	045 Move X1, X31
	046 Call NumberFormatInfo.GetInstance, X0
	047 Move X8, [X24]
	048 Move X21, X0
	049 Move W9, [X8+224]
	050 Compare W9, 0
	051 JumpIfNotEqual {54}
	052 Move X0, X8
	053 Call 0x1C17DFC
	054 Move X0, X23
	055 Move X1, X22
	056 Move W2, W20
	057 Move X3, X21
	058 Move X4, X19
	059 Move X20, [X31+48]
	060 Move X19, [X31+56]
	061 Move X22, [X31+32]
	062 Move X21, [X31+40]
	063 Move X24, [X31+16]
	064 Move X23, [X31+24]
	065 Move X30, [X31+64]
	066 Call Number.TryParseInt32, X0, X1, X2, X3
	067 Return X0
	068 Move [X19], W31
	069 Move X20, [X31+48]
	070 Move X19, [X31+56]
	071 Move X22, [X31+32]
	072 Move X21, [X31+40]
	073 Move X24, [X31+16]
	074 Move X23, [X31+24]
	075 Move W0, W31
	076 Move X30, [X31+64]
	077 Return X0

Method: System.Boolean TryParse(System.ReadOnlySpan`1<System.Char> s, System.Globalization.NumberStyles style, System.IFormatProvider provider, out System.Int32 result)

Disassembly:
	0x0337D1C0 MOV X4, X20
	0x0337D1C4 BL 0x3384CCC
	0x0337D1C8 B 0x337D0C8
	0x0337D1CC CBNZ W8, 0x337D1D4
	0x0337D1D0 BL 0x1C16DFC
	0x0337D1D4 LDUR X4, [X29 - 0xE0]
	0x0337D1D8 SUB X0, X29, 0xD0
	0x0337D1DC SUB X1, X29, 0xA0
	0x0337D1E0 MOV X2, X24
	0x0337D1E4 MOV X3, X23
	0x0337D1E8 BL 0x338102C
	0x0337D1EC LDUR X3, [X29 - 0xD8]
	0x0337D1F0 SUB X0, X29, 0xD0
	0x0337D1F4 MOV X1, X21
	0x0337D1F8 MOV X2, X20
	0x0337D1FC MOV X4, X31
	0x0337D200 BL 0x3240D90
	0x0337D204 B 0x337D0C8
	0x0337D208 BL 0x1C16F20
	0x0337D20C BL 0x3EB1B20
	0x0337D210 STR X30, [X31 - 0x30]!
	0x0337D214 STP X22, X21, [X31 + 0x10]
	0x0337D218 STP X20, X19, [X31 + 0x20]
	0x0337D21C ADRP X21, 0x105F000
	0x0337D220 LDRB W8, [X21 + 0xF77]
	0x0337D224 MOV X19, X1
	0x0337D228 MOV X20, X0
	0x0337D22C TBNZ X8, 0x0, 0x337D244
	0x0337D230 ADRP X0, 0xDAB000
	0x0337D234 LDR X0, [X0 + 0x78]
	0x0337D238 BL 0x1C16CF4
	0x0337D23C MOVZ W8, 0x1
	0x0337D240 STRB W8, [X21 + 0xF77]
	0x0337D244 CBNZ X20, 0x337D254
	0x0337D248 MOVZ W0, 0x30
	0x0337D24C MOV X1, X31
	0x0337D250 BL 0x338F3E0
	0x0337D254 ADRP X21, 0x105C000
	0x0337D258 LDRB W8, [X21 + 0x762]
	0x0337D25C CBNZ W8, 0x337D274
	0x0337D260 ADRP X0, 0xD9D000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0x1060000
	010 Move X24, 0xDAC000
	011 Move W8, [X25+3938]
	012 Move X24, [X24+120]
	013 Move X19, X4
	014 Move X23, X3
	015 Move W20, W2
	016 Move X21, X1
	017 Move X22, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xDAC000
	023 Move X0, [X0+120]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X25+3938], W8
	027 Move W0, W20
	028 Move X1, X31
	029 Call NumberFormatInfo.ValidateParseStyleInteger, X0
	030 Move X0, X23
	031 Move X1, X31
	032 Call NumberFormatInfo.GetInstance, X0
	033 Move X8, [X24]
	034 Move X23, X0
	035 Move W9, [X8+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {40}
	038 Move X0, X8
	039 Call 0x1C17DFC
	040 Move X0, X22
	041 Move X1, X21
	042 Move W2, W20
	043 Move X3, X23
	044 Move X4, X19
	045 Move X20, [X31+48]
	046 Move X19, [X31+56]
	047 Move X22, [X31+32]
	048 Move X21, [X31+40]
	049 Move X24, [X31+16]
	050 Move X23, [X31+24]
	051 Move X30, [X31+64]
	052 Move X25, [X31+72]
	053 Call Number.TryParseInt32, X0, X1, X2, X3
	054 Return X0

Method: System.TypeCode GetTypeCode()

Disassembly:
	0x0337D264 LDR X0, [X0 + 0x290]
	0x0337D268 BL 0x1C16CF4

ISIL:
	001 Move W0, 9
	002 Return X0

Method: System.Boolean System.IConvertible.ToBoolean(System.IFormatProvider provider)

Disassembly:
	0x0337D26C MOVZ W8, 0x1
	0x0337D270 STRB W8, [X21 + 0x762]
	0x0337D274 ADRP X22, 0xDAB000
	0x0337D278 LDR X22, [X22 + 0x78]
	0x0337D27C CBZ X20, 0x337D298
	0x0337D280 MOV X0, X20
	0x0337D284 MOV X1, X31
	0x0337D288 BL 0x3225708
	0x0337D28C LDR W21, [X20 + 0x10]
	0x0337D290 MOV X20, X0
	0x0337D294 B 0x337D29C
	0x0337D298 MOV X21, X31
	0x0337D29C MOV X0, X19
	0x0337D2A0 MOV X1, X31
	0x0337D2A4 BL 0x333ACEC
	0x0337D2A8 LDR X8, [X22]
	0x0337D2AC MOV X19, X0
	0x0337D2B0 LDR W9, [X8 + 0xE0]
	0x0337D2B4 CBNZ W9, 0x337D2C0
	0x0337D2B8 MOV X0, X8
	0x0337D2BC BL 0x1C16DFC
	0x0337D2C0 MOV X0, X20
	0x0337D2C4 MOV X1, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1060000
	006 Move X20, 0xD80000
	007 Move W8, [X21+3939]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD80000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3939], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToBoolean, X0
	032 Return X0

Method: System.Char System.IConvertible.ToChar(System.IFormatProvider provider)

Disassembly:
	0x0337D2C8 MOV X3, X19
	0x0337D2CC LDP X20, X19, [X31 + 0x20]
	0x0337D2D0 LDP X22, X21, [X31 + 0x10]
	0x0337D2D4 MOVZ W2, 0x7
	0x0337D2D8 LDR X30, [X31], #0x30
	0x0337D2DC B 0x337D2E0
	0x0337D2E0 SUB X31, X31, 0xF0
	0x0337D2E4 STP X30, X25, [X31 + 0xB0]
	0x0337D2E8 STP X24, X23, [X31 + 0xC0]
	0x0337D2EC STP X22, X21, [X31 + 0xD0]
	0x0337D2F0 STP X20, X19, [X31 + 0xE0]
	0x0337D2F4 MRS X23, 0xC000
	0x0337D2F8 LDR X8, [X23 + 0x28]
	0x0337D2FC ADRP X24, 0x105F000
	0x0337D300 MOV X22, X3
	0x0337D304 MOV W19, W2
	0x0337D308 STR X8, [X31 + 0xA8]
	0x0337D30C LDRB W8, [X24 + 0xFE2]
	0x0337D310 MOV X20, X1
	0x0337D314 MOV X21, X0
	0x0337D318 ADD X25, X31, 0x20
	0x0337D31C TBNZ X8, 0x0, 0x337D340
	0x0337D320 ADRP X0, 0xDAB000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1060000
	006 Move X20, 0xD80000
	007 Move W8, [X21+3940]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD80000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3940], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToChar, X0
	032 Return X0

Method: System.SByte System.IConvertible.ToSByte(System.IFormatProvider provider)

Disassembly:
	0x0337D324 LDR X0, [X0 + 0x78]
	0x0337D328 BL 0x1C16CF4
	0x0337D32C ADRP X0, 0xDAB000
	0x0337D330 LDR X0, [X0 + 0x1F0]
	0x0337D334 BL 0x1C16CF4
	0x0337D338 MOVZ W8, 0x1
	0x0337D33C STRB W8, [X24 + 0xFE2]
	0x0337D340 ADRP X24, 0xDAB000
	0x0337D344 LDR X24, [X24 + 0x78]
	0x0337D348 MOVI V0.2D, 0x0
	0x0337D34C CMP W19, 0x7
	0x0337D350 STR X31, [X31 + 0x18]
	0x0337D354 STP X31, X31, [X31]
	0x0337D358 STUR V0, [X25 + 0x6A]
	0x0337D35C STP V0, V0, [X31 + 0x70]
	0x0337D360 STP V0, V0, [X31 + 0x50]
	0x0337D364 STP V0, V0, [X31 + 0x30]
	0x0337D368 STR V0, [X31 + 0x2]
	0x0337D36C B.HI 0x337D3AC
	0x0337D370 LDR X0, [X24]
	0x0337D374 STRB W31, [X31 + 0x14]
	0x0337D378 LDR W8, [X0 + 0xE0]
	0x0337D37C CBNZ W8, 0x337D384

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1060000
	006 Move X20, 0xD80000
	007 Move W8, [X21+3941]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD80000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3941], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToSByte, X0
	032 Return X0

Method: System.Byte System.IConvertible.ToByte(System.IFormatProvider provider)

Disassembly:
	0x0337D380 BL 0x1C16DFC
	0x0337D384 ADD X4, X31, 0x8
	0x0337D388 ADD X5, X31, 0x14
	0x0337D38C MOV X0, X21
	0x0337D390 MOV X1, X20
	0x0337D394 MOV W2, W19
	0x0337D398 MOV X3, X22
	0x0337D39C ADD X25, X31, 0x8
	0x0337D3A0 BL 0x338800C
	0x0337D3A4 TBNZ X0, 0x0, 0x337D458
	0x0337D3A8 B 0x337D484
	0x0337D3AC TBNZ X19, 0x9, 0x337D424
	0x0337D3B0 LDR X0, [X24]
	0x0337D3B4 MOVI V0.2D, 0x0
	0x0337D3B8 STUR V0, [X25 + 0x6A]
	0x0337D3BC STP V0, V0, [X31 + 0x70]
	0x0337D3C0 STP V0, V0, [X31 + 0x50]
	0x0337D3C4 STP V0, V0, [X31 + 0x30]
	0x0337D3C8 STR V0, [X31 + 0x2]
	0x0337D3CC STR X31, [X31 + 0x18]
	0x0337D3D0 LDR W8, [X0 + 0xE0]
	0x0337D3D4 CBNZ W8, 0x337D3DC
	0x0337D3D8 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1060000
	006 Move X20, 0xD80000
	007 Move W8, [X21+3942]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD80000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3942], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToByte, X0
	032 Return X0

Method: System.Int16 System.IConvertible.ToInt16(System.IFormatProvider provider)

Disassembly:
	0x0337D3DC ADD X3, X31, 0x20
	0x0337D3E0 MOV X0, X21
	0x0337D3E4 MOV X1, X20
	0x0337D3E8 MOV W2, W19
	0x0337D3EC MOV X4, X22
	0x0337D3F0 MOV W5, W31
	0x0337D3F4 BL 0x3387ED4
	0x0337D3F8 ADD X0, X31, 0x20
	0x0337D3FC ADD X1, X31, 0x18
	0x0337D400 ADD X25, X31, 0x18
	0x0337D404 BL 0x3387304
	0x0337D408 TBNZ X0, 0x0, 0x337D458
	0x0337D40C LDR X0, [X24]
	0x0337D410 BL 0x19903D0
	0x0337D414 ADRP X8, 0xDAB000
	0x0337D418 LDR X8, [X8 + 0x1F0]
	0x0337D41C MOVZ W0, 0x1
	0x0337D420 B 0x337D49C
	0x0337D424 LDR X0, [X24]
	0x0337D428 STRB W31, [X31 + 0x14]
	0x0337D42C LDR W8, [X0 + 0xE0]
	0x0337D430 CBNZ W8, 0x337D438
	0x0337D434 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1060000
	006 Move X20, 0xD80000
	007 Move W8, [X21+3943]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD80000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3943], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToInt16, X0
	032 Return X0

Method: System.UInt16 System.IConvertible.ToUInt16(System.IFormatProvider provider)

Disassembly:
	0x0337D438 ADD X4, X31, 0x0
	0x0337D43C ADD X5, X31, 0x14
	0x0337D440 MOV X0, X21
	0x0337D444 MOV X1, X20
	0x0337D448 MOV W2, W19
	0x0337D44C ADD X25, X31, 0x0
	0x0337D450 BL 0x33885F8
	0x0337D454 TBZ X0, 0x0, 0x337D484
	0x0337D458 LDR X0, [X25]
	0x0337D45C LDR X8, [X23 + 0x28]
	0x0337D460 LDR X9, [X31 + 0xA8]
	0x0337D464 CMP X8, X9
	0x0337D468 B.NE 0x337D4A4
	0x0337D46C LDP X20, X19, [X31 + 0xE0]
	0x0337D470 LDP X22, X21, [X31 + 0xD0]
	0x0337D474 LDP X24, X23, [X31 + 0xC0]
	0x0337D478 LDP X30, X25, [X31 + 0xB0]
	0x0337D47C ADD X31, X31, 0xF0
	0x0337D480 RET
	0x0337D484 LDR X0, [X24]
	0x0337D488 LDRB W19, [X31 + 0x14]
	0x0337D48C BL 0x19903D0
	0x0337D490 ADRP X8, 0xDAB000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1060000
	006 Move X20, 0xD80000
	007 Move W8, [X21+3944]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD80000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3944], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToUInt16, X0
	032 Return X0

Method: System.Int32 System.IConvertible.ToInt32(System.IFormatProvider provider)

Disassembly:
	0x0337D494 LDR X8, [X8 + 0x1F0]
	0x0337D498 MOV W0, W19

ISIL:
	001 Move W0, [X0]
	002 Return X0

Method: System.UInt32 System.IConvertible.ToUInt32(System.IFormatProvider provider)

Disassembly:
	0x0337D49C LDR X1, [X8]
	0x0337D4A0 BL 0x3387AFC
	0x0337D4A4 BL 0x3EB1B20
	0x0337D4A8 STP X30, X23, [X31 - 0x30]!
	0x0337D4AC STP X22, X21, [X31 + 0x10]
	0x0337D4B0 STP X20, X19, [X31 + 0x20]
	0x0337D4B4 ADRP X22, 0x105F000
	0x0337D4B8 LDRB W8, [X22 + 0xF78]
	0x0337D4BC MOV X20, X2
	0x0337D4C0 MOV W19, W1
	0x0337D4C4 MOV X21, X0
	0x0337D4C8 TBNZ X8, 0x0, 0x337D4E0
	0x0337D4CC ADRP X0, 0xDAB000
	0x0337D4D0 LDR X0, [X0 + 0x78]
	0x0337D4D4 BL 0x1C16CF4
	0x0337D4D8 MOVZ W8, 0x1
	0x0337D4DC STRB W8, [X22 + 0xF78]
	0x0337D4E0 MOV W0, W19
	0x0337D4E4 MOV X1, X31
	0x0337D4E8 BL 0x333B33C
	0x0337D4EC CBNZ X21, 0x337D4FC
	0x0337D4F0 MOVZ W0, 0x30
	0x0337D4F4 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1060000
	006 Move X20, 0xD80000
	007 Move W8, [X21+3945]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD80000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3945], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToUInt32, X0
	032 Return X0

Method: System.Int64 System.IConvertible.ToInt64(System.IFormatProvider provider)

Disassembly:
	0x0337D4F8 BL 0x338F3E0
	0x0337D4FC ADRP X22, 0x105C000
	0x0337D500 LDRB W8, [X22 + 0x762]
	0x0337D504 CBNZ W8, 0x337D51C
	0x0337D508 ADRP X0, 0xD9D000
	0x0337D50C LDR X0, [X0 + 0x290]
	0x0337D510 BL 0x1C16CF4
	0x0337D514 MOVZ W8, 0x1
	0x0337D518 STRB W8, [X22 + 0x762]
	0x0337D51C ADRP X23, 0xDAB000
	0x0337D520 LDR X23, [X23 + 0x78]
	0x0337D524 CBZ X21, 0x337D540
	0x0337D528 MOV X0, X21
	0x0337D52C MOV X1, X31
	0x0337D530 BL 0x3225708
	0x0337D534 LDR W21, [X21 + 0x10]
	0x0337D538 MOV X22, X0
	0x0337D53C B 0x337D544
	0x0337D540 MOV X22, X31
	0x0337D544 MOV X0, X20
	0x0337D548 MOV X1, X31
	0x0337D54C BL 0x333ACEC
	0x0337D550 LDR X8, [X23]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1060000
	006 Move X20, 0xD80000
	007 Move W8, [X21+3946]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD80000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3946], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToInt64, X0
	032 Return X0

Method: System.UInt64 System.IConvertible.ToUInt64(System.IFormatProvider provider)

Disassembly:
	0x0337D554 MOV X20, X0
	0x0337D558 LDR W9, [X8 + 0xE0]
	0x0337D55C CBNZ W9, 0x337D568
	0x0337D560 MOV X0, X8
	0x0337D564 BL 0x1C16DFC
	0x0337D568 MOV X0, X22
	0x0337D56C MOV X1, X21
	0x0337D570 MOV W2, W19
	0x0337D574 MOV X3, X20
	0x0337D578 LDP X20, X19, [X31 + 0x20]
	0x0337D57C LDP X22, X21, [X31 + 0x10]
	0x0337D580 LDP X30, X23, [X31], #0x30
	0x0337D584 B 0x337D2E0
	0x0337D588 STR X30, [X31 - 0x30]!
	0x0337D58C STP X22, X21, [X31 + 0x10]
	0x0337D590 STP X20, X19, [X31 + 0x20]
	0x0337D594 ADRP X21, 0x105F000
	0x0337D598 LDRB W8, [X21 + 0xF79]
	0x0337D59C MOV X19, X1
	0x0337D5A0 MOV X20, X0
	0x0337D5A4 TBNZ X8, 0x0, 0x337D5BC
	0x0337D5A8 ADRP X0, 0xDAB000
	0x0337D5AC LDR X0, [X0 + 0x78]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1060000
	006 Move X20, 0xD80000
	007 Move W8, [X21+3947]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD80000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3947], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToUInt64, X0
	032 Return X0

Method: System.Single System.IConvertible.ToSingle(System.IFormatProvider provider)

Disassembly:
	0x0337D5B0 BL 0x1C16CF4
	0x0337D5B4 MOVZ W8, 0x1
	0x0337D5B8 STRB W8, [X21 + 0xF79]
	0x0337D5BC CBZ X20, 0x337D640
	0x0337D5C0 ADRP X21, 0x105C000
	0x0337D5C4 ADRP X22, 0xDAB000
	0x0337D5C8 LDRB W8, [X21 + 0x762]
	0x0337D5CC LDR X22, [X22 + 0x78]
	0x0337D5D0 CBNZ W8, 0x337D5E8
	0x0337D5D4 ADRP X0, 0xD9D000
	0x0337D5D8 LDR X0, [X0 + 0x290]
	0x0337D5DC BL 0x1C16CF4
	0x0337D5E0 MOVZ W8, 0x1
	0x0337D5E4 STRB W8, [X21 + 0x762]
	0x0337D5E8 MOV X0, X20
	0x0337D5EC MOV X1, X31
	0x0337D5F0 BL 0x3225708
	0x0337D5F4 LDR W20, [X20 + 0x10]
	0x0337D5F8 MOV X21, X0
	0x0337D5FC MOV X0, X31
	0x0337D600 BL 0x333AE98
	0x0337D604 LDR X8, [X22]
	0x0337D608 MOV X22, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1060000
	006 Move X20, 0xD80000
	007 Move W8, [X21+3948]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD80000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3948], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToSingle, X0
	032 Return V0

Method: System.Double System.IConvertible.ToDouble(System.IFormatProvider provider)

Disassembly:
	0x0337D60C LDR W9, [X8 + 0xE0]
	0x0337D610 CBNZ W9, 0x337D61C
	0x0337D614 MOV X0, X8
	0x0337D618 BL 0x1C16DFC
	0x0337D61C MOV X0, X21
	0x0337D620 MOV X1, X20
	0x0337D624 MOV X3, X22
	0x0337D628 MOV X4, X19
	0x0337D62C LDP X20, X19, [X31 + 0x20]
	0x0337D630 LDP X22, X21, [X31 + 0x10]
	0x0337D634 MOVZ W2, 0x7
	0x0337D638 LDR X30, [X31], #0x30
	0x0337D63C B 0x337D658
	0x0337D640 STR X31, [X19]
	0x0337D644 LDP X20, X19, [X31 + 0x20]
	0x0337D648 LDP X22, X21, [X31 + 0x10]
	0x0337D64C MOV W0, W31
	0x0337D650 LDR X30, [X31], #0x30
	0x0337D654 RET
	0x0337D658 SUB X31, X31, 0xE0
	0x0337D65C STP X30, X25, [X31 + 0xA0]
	0x0337D660 STP X24, X23, [X31 + 0xB0]
	0x0337D664 STP X22, X21, [X31 + 0xC0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1060000
	006 Move X20, 0xD80000
	007 Move W8, [X21+3949]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD80000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3949], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToDouble, X0
	032 Return V0

Method: System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider provider)

Disassembly:
	0x0337D668 STP X20, X19, [X31 + 0xD0]
	0x0337D66C MRS X24, 0xC000
	0x0337D670 LDR X8, [X24 + 0x28]
	0x0337D674 ADRP X25, 0x105F000
	0x0337D678 MOV X19, X4
	0x0337D67C MOV X23, X3
	0x0337D680 STR X8, [X31 + 0x98]
	0x0337D684 LDRB W8, [X25 + 0xFE9]
	0x0337D688 MOV W20, W2
	0x0337D68C MOV X21, X1
	0x0337D690 MOV X22, X0
	0x0337D694 TBNZ X8, 0x0, 0x337D6AC
	0x0337D698 ADRP X0, 0xDAB000
	0x0337D69C LDR X0, [X0 + 0x78]
	0x0337D6A0 BL 0x1C16CF4
	0x0337D6A4 MOVZ W8, 0x1
	0x0337D6A8 STRB W8, [X25 + 0xFE9]
	0x0337D6AC ADRP X25, 0xDAB000
	0x0337D6B0 LDR X25, [X25 + 0x78]
	0x0337D6B4 MOVI V0.2D, 0x0
	0x0337D6B8 CMP W20, 0x7
	0x0337D6BC STUR V0, [X31 + 0x7A]
	0x0337D6C0 STP V0, V0, [X31 + 0x60]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1060000
	006 Move X20, 0xD80000
	007 Move W8, [X21+3950]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD80000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3950], W8
	019 Move X0, [X20]
	020 Move W19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToDecimal, X0
	032 Return X0

Method: System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider)

Disassembly:
	0x0337D6C4 STP V0, V0, [X31 + 0x40]
	0x0337D6C8 STP V0, V0, [X31 + 0x20]
	0x0337D6CC STR V0, [X31 + 0x1]
	0x0337D6D0 B.HI 0x337D708
	0x0337D6D4 LDR X0, [X25]
	0x0337D6D8 STRB W31, [X31 + 0xC]
	0x0337D6DC LDR W8, [X0 + 0xE0]
	0x0337D6E0 CBNZ W8, 0x337D6E8
	0x0337D6E4 BL 0x1C16DFC
	0x0337D6E8 ADD X5, X31, 0xC
	0x0337D6EC MOV X0, X22
	0x0337D6F0 MOV X1, X21
	0x0337D6F4 MOV W2, W20
	0x0337D6F8 MOV X3, X23
	0x0337D6FC MOV X4, X19
	0x0337D700 BL 0x338800C
	0x0337D704 B 0x337D7AC
	0x0337D708 STR X31, [X19]
	0x0337D70C TBNZ X20, 0x9, 0x337D780
	0x0337D710 LDR X0, [X25]
	0x0337D714 MOVI V0.2D, 0x0
	0x0337D718 STUR V0, [X31 + 0x7A]
	0x0337D71C STP V0, V0, [X31 + 0x60]
	0x0337D720 STP V0, V0, [X31 + 0x40]
	0x0337D724 STP V0, V0, [X31 + 0x20]
	0x0337D728 STR V0, [X31 + 0x1]
	0x0337D72C LDR W8, [X0 + 0xE0]
	0x0337D730 CBNZ W8, 0x337D738
	0x0337D734 BL 0x1C16DFC
	0x0337D738 ADD X3, X31, 0x10
	0x0337D73C MOV X0, X22
	0x0337D740 MOV X1, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0xDAC000
	005 Move X0, [X0+48]
	006 Call 0x1C17D08
	007 Move X19, X0
	008 Move X0, 0xDA9000
	009 Move X0, [X0+216]
	010 Call 0x1C17D08
	011 Move X20, X0
	012 Move X0, 0xDA9000
	013 Move X0, [X0+152]
	014 Call 0x1C17D08
	015 Move X2, X0
	016 Move X0, X19
	017 Move X1, X20
	018 Move X3, X31
	019 Call SR.Format, X0, X1, X2
	020 Move X19, X0
	021 Move X0, 0xD7F000
	022 Move X0, [X0+3080]
	023 Call 0x1C17D08
	024 Call 0x1C17F10
	025 Move X1, X19
	026 Move X20, X0
	027 Call InvalidCastException..ctor, X0, X1
	028 Move X0, 0xDAE000
	029 Move X0, [X0+3744]
	030 Call 0x1C17D08
	031 Move X1, X0
	032 Move X0, X20
	033 Call 0x1C17DEC

Method: System.Object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider)

Disassembly:
	0x0337D744 MOV W2, W20
	0x0337D748 MOV X4, X23
	0x0337D74C MOV W5, W31
	0x0337D750 BL 0x338A028
	0x0337D754 MOV W8, W0
	0x0337D758 MOV W0, W31
	0x0337D75C TBZ X8, 0x0, 0x337D7AC
	0x0337D760 LDR X0, [X25]
	0x0337D764 LDR W8, [X0 + 0xE0]
	0x0337D768 CBNZ W8, 0x337D770
	0x0337D76C BL 0x1C16DFC
	0x0337D770 ADD X0, X31, 0x10
	0x0337D774 MOV X1, X19
	0x0337D778 BL 0x3387304
	0x0337D77C B 0x337D7AC
	0x0337D780 LDR X0, [X25]
	0x0337D784 STRB W31, [X31 + 0xC]
	0x0337D788 LDR W8, [X0 + 0xE0]
	0x0337D78C CBNZ W8, 0x337D794
	0x0337D790 BL 0x1C16DFC
	0x0337D794 ADD X5, X31, 0xC
	0x0337D798 MOV X0, X22
	0x0337D79C MOV X1, X21
	0x0337D7A0 MOV W2, W20
	0x0337D7A4 MOV X4, X19
	0x0337D7A8 BL 0x33885F8
	0x0337D7AC LDR X8, [X24 + 0x28]
	0x0337D7B0 LDR X9, [X31 + 0x98]
	0x0337D7B4 CMP X8, X9
	0x0337D7B8 B.NE 0x337D7D8
	0x0337D7BC LDP X20, X19, [X31 + 0xD0]
	0x0337D7C0 LDP X22, X21, [X31 + 0xC0]
	0x0337D7C4 LDP X24, X23, [X31 + 0xB0]
	0x0337D7C8 LDP X30, X25, [X31 + 0xA0]
	0x0337D7CC AND W0, W0, 0x1
	0x0337D7D0 ADD X31, X31, 0xE0
	0x0337D7D4 RET
	0x0337D7D8 BL 0x3EB1B20
	0x0337D7DC STR X30, [X31 - 0x40]!
	0x0337D7E0 STP X24, X23, [X31 + 0x10]
	0x0337D7E4 STP X22, X21, [X31 + 0x20]
	0x0337D7E8 STP X20, X19, [X31 + 0x30]
	0x0337D7EC ADRP X23, 0x105F000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x1060000
	009 Move X23, 0xD77000
	010 Move X22, 0xD80000
	011 Move W8, [X24+3951]
	012 Move X23, [X23+1880]
	013 Move X22, [X22+2536]
	014 Move X19, X2
	015 Move X20, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0xD80000
	022 Move X0, [X0+2536]
	023 Call 0x1C17CF4
	024 Move X0, 0xD77000
	025 Move X0, [X0+1880]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X24+3951], W8
	029 Move W8, [X21]
	030 Move X0, [X23]
	031 Add X1, X31, 12
	032 Move [X31+12], W8
	033 Call 0x1C17E04
	034 Move X8, [X22]
	035 Move X21, X0
	036 Move W9, [X8+224]
	037 Compare W9, 0
	038 JumpIfNotEqual {41}
	039 Move X0, X8
	040 Call 0x1C17DFC
	041 Move X0, X21
	042 Move X1, X20
	043 Move X2, X19
	044 Move X3, X31
	045 Call Convert.DefaultToType, X0, X1, X2
	046 Move X20, [X31+48]
	047 Move X19, [X31+56]
	048 Move X22, [X31+32]
	049 Move X21, [X31+40]
	050 Move X24, [X31+16]
	051 Move X23, [X31+24]
	052 Move X30, [X31+64]
	053 Return X0

