Type: System.Runtime.Serialization.ObjectHolder

Method: System.Void .ctor(System.Int64 objID)

Disassembly:
	0x032A47B8 ADRP X8, 0xE80000
	0x032A47BC LDR X8, [X8 + 0xB70]
	0x032A47C0 LDR X0, [X8]
	0x032A47C4 LDR W8, [X0 + 0xE0]
	0x032A47C8 CBNZ W8, 0x32A47D0
	0x032A47CC BL 0x1C16DFC
	0x032A47D0 LDR X2, [X31 + 0x10]
	0x032A47D4 MOV X0, X19
	0x032A47D8 MOV X1, X21
	0x032A47DC BL 0x32A1AD0
	0x032A47E0 CBNZ X20, 0x32A4818
	0x032A47E4 B 0x32A485C
	0x032A47E8 LDR V0, [X31 + 0x6]

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move X2, X1
	004 Move X1, X31
	005 Move X3, X31
	006 Move X4, X31
	007 Move X5, X31
	008 Move X6, X31
	009 Move X7, X31
	010 Call ObjectHolder..ctor, X0, X1, X2, X3, X4, X5, X6, X7
	011 Move X30, [X31+16]
	012 Add X31, X31, 32
	013 Return 

Method: System.Void .ctor(System.Object obj, System.Int64 objID, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.ISerializationSurrogate surrogate, System.Int64 idOfContainingObj, System.Reflection.FieldInfo field, System.Int32[] arrayIndex)

Disassembly:
	0x032A6B7C MOV X1, X19
	0x032A6B80 MOV X2, X20
	0x032A6B84 MOV X3, X31
	0x032A6B88 MOV X21, X0
	0x032A6B8C BL 0x3311888
	0x032A6B90 ADRP X0, 0xE7E000
	0x032A6B94 LDR X0, [X0 + 0xE80]
	0x032A6B98 BL 0x1C16D08
	0x032A6B9C MOV X1, X0
	0x032A6BA0 MOV X0, X21
	0x032A6BA4 BL 0x1C16DEC
	0x032A6BA8 ADRP X0, 0xE52000
	0x032A6BAC LDR X0, [X0 + 0x528]
	0x032A6BB0 BL 0x1C16D08
	0x032A6BB4 BL 0x1C16F10
	0x032A6BB8 MOV X19, X0
	0x032A6BBC ADRP X0, 0xE7E000
	0x032A6BC0 LDR X0, [X0 + 0xE88]
	0x032A6BC4 BL 0x1C16D08
	0x032A6BC8 MOV X1, X0
	0x032A6BCC MOV X0, X19
	0x032A6BD0 MOV X2, X31
	0x032A6BD4 BL 0x330E100
	0x032A6BD8 ADRP X0, 0xE7E000
	0x032A6BDC LDR X0, [X0 + 0xE80]
	0x032A6BE0 BL 0x1C16D08
	0x032A6BE4 MOV X1, X0
	0x032A6BE8 MOV X0, X19
	0x032A6BEC BL 0x1C16DEC
	0x032A6BF0 STP X30, X19, [X31 - 0x10]!
	0x032A6BF4 LDR X8, [X0 + 0x18]
	0x032A6BF8 MOV X19, X0
	0x032A6BFC CBZ X8, 0x32A6C14
	0x032A6C00 LDP X1, X2, [X19 + 0x48]
	0x032A6C04 LDR X9, [X8 + 0x18]
	0x032A6C08 LDR X0, [X8 + 0x40]
	0x032A6C0C LDR X3, [X8 + 0x28]
	0x032A6C10 BLR X9
	0x032A6C14 LDR X8, [X19 + 0x10]
	0x032A6C18 CBZ X8, 0x32A6C34
	0x032A6C1C LDR X3, [X8 + 0x18]
	0x032A6C20 LDR X0, [X8 + 0x40]
	0x032A6C24 LDR X2, [X8 + 0x28]
	0x032A6C28 MOV X1, X31
	0x032A6C2C LDP X30, X19, [X31], #0x10
	0x032A6C30 BR X3
	0x032A6C34 LDP X30, X19, [X31], #0x10
	0x032A6C38 RET
	0x032A6C3C STP X30, X21, [X31 - 0x20]!
	0x032A6C40 STP X20, X19, [X31 + 0x10]
	0x032A6C44 ADRP X21, 0x1136000
	0x032A6C48 LDRB W8, [X21 + 0x78E]
	0x032A6C4C MOV X20, X1
	0x032A6C50 MOV X19, X0
	0x032A6C54 TBNZ X8, 0x0, 0x32A6C6C
	0x032A6C58 ADRP X0, 0xE7E000
	0x032A6C5C LDR X0, [X0 + 0xDC8]
	0x032A6C60 BL 0x1C16CF4
	0x032A6C64 MOVZ W8, 0x1
	0x032A6C68 STRB W8, [X21 + 0x78E]
	0x032A6C6C LDR X0, [X19 + 0x10]
	0x032A6C70 MOV X1, X20
	0x032A6C74 MOV X2, X31
	0x032A6C78 BL 0x33C0DE4
	0x032A6C7C CBZ X0, 0x32A6CAC
	0x032A6C80 ADRP X8, 0xE7E000
	0x032A6C84 LDR X8, [X8 + 0xDC8]
	0x032A6C88 LDR X1, [X8]
	0x032A6C8C LDR X8, [X0]
	0x032A6C90 CMP X8, X1
	0x032A6C94 B.NE 0x32A6CA8
	0x032A6C98 STR X0, [X19 + 0x10]
	0x032A6C9C LDR X8, [X0]
	0x032A6CA0 CMP X8, X1
	0x032A6CA4 B.EQ 0x32A6CB0
	0x032A6CA8 BL 0x1C171E0
	0x032A6CAC STR X0, [X19 + 0x10]
	0x032A6CB0 LDP X20, X19, [X31 + 0x10]
	0x032A6CB4 LDP X30, X21, [X31], #0x20
	0x032A6CB8 RET
	0x032A6CBC STP X30, X21, [X31 - 0x20]!
	0x032A6CC0 STP X20, X19, [X31 + 0x10]
	0x032A6CC4 ADRP X21, 0x1136000
	0x032A6CC8 LDRB W8, [X21 + 0x78F]
	0x032A6CCC MOV X20, X1
	0x032A6CD0 MOV X19, X0
	0x032A6CD4 TBNZ X8, 0x0, 0x32A6CEC
	0x032A6CD8 ADRP X0, 0xE7E000
	0x032A6CDC LDR X0, [X0 + 0xAE8]
	0x032A6CE0 BL 0x1C16CF4
	0x032A6CE4 MOVZ W8, 0x1
	0x032A6CE8 STRB W8, [X21 + 0x78F]
	0x032A6CEC CBZ X20, 0x32A6D48
	0x032A6CF0 ADRP X21, 0xE7E000
	0x032A6CF4 LDR X21, [X21 + 0xAE8]
	0x032A6CF8 MOV X0, X20
	0x032A6CFC MOV X1, X31
	0x032A6D00 BL 0x33BE520
	0x032A6D04 LDR X8, [X21]
	0x032A6D08 MOV X21, X0
	0x032A6D0C LDR W9, [X8 + 0xE0]
	0x032A6D10 CBNZ W9, 0x32A6D1C
	0x032A6D14 MOV X0, X8
	0x032A6D18 BL 0x1C16DFC
	0x032A6D1C MOV X0, X21
	0x032A6D20 BL 0x32A0100
	0x032A6D24 CBZ X0, 0x32A6D48
	0x032A6D28 LDR X1, [X19 + 0x18]
	0x032A6D2C LDR X2, [X0 + 0x28]
	0x032A6D30 MOV X0, X20
	0x032A6D34 BL 0x329FEB0
	0x032A6D38 STR X0, [X19 + 0x18]
	0x032A6D3C LDP X20, X19, [X31 + 0x10]
	0x032A6D40 LDP X30, X21, [X31], #0x20
	0x032A6D44 RET
	0x032A6D48 BL 0x1C16F20

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X27, 0x1137000
	012 Move W8, [X27+1938]
	013 Move X19, X7
	014 Move X20, X6
	015 Move X21, X5
	016 Move X25, X4
	017 Move X26, X3
	018 Move X23, X2
	019 Move X24, X1
	020 Move X22, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {33}
	025 Move X0, 0xE7F000
	026 Move X0, [X0+3384]
	027 Call 0x1C17CF4
	028 Move X0, 0xE7F000
	029 Move X0, [X0+3520]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X27+1938], W8
	033 Move X0, X22
	034 Move X1, X31
	035 Call Object..ctor, X0
	036 Move [X22+16], X24
	037 Move [X22+24], X23
	038 Move [X22+32], X31
	039 Move [X22+40], X26
	040 Move [X22+80], W31
	041 Move [X22+64], X31
	042 Move [X22+72], X31
	043 Move [X22+48], X25
	044 Move [X22+84], W31
	045 Compare X24, 0
	046 JumpIfEqual {65}
	047 Move X8, 0xE7F000
	048 Move X8, [X8+3384]
	049 Move X9, [X24]
	050 Move X1, [X8]
	051 Move W10, [X9+304]
	052 Move W8, [X1+304]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X10, [X9+200]
	055 Subtract X9, X8, 1
	056 Move X10, [X10]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move [X22+96], X24
	059 Move X10, [X24]
	060 Move W11, [X10+304]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X8, [X10+200]
	063 Move X8, [X8]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Compare X21, 0
	066 JumpIfEqual {105}
	067 Move X0, X20
	068 Move X1, X31
	069 Move X2, X31
	070 Call FieldInfo.op_Inequality, X0, X1
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfNotEqual {92}
	075 Compare X20, 0
	076 JumpIfEqual {118}
	077 Move X8, [X20]
	078 Move X0, X20
	079 Move X9, [X8+600]
	080 Move X1, [X8+608]
	081 NotImplemented "Instruction BLR not yet implemented."
	082 Compare X0, 0
	083 JumpIfEqual {118}
	084 Move X1, X31
	085 Call Type.get_IsValueType, X0
	086 Compare X19, 0
	087 JumpIfNotEqual {94}
	088 Move TEMP, X0
	089 And TEMP, TEMP, 1
	090 Compare TEMP, 1
	091 JumpIfNotEqual {105}
	092 Compare X19, 0
	093 JumpIfEqual {105}
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move X8, 0xE7F000
	096 Move X8, [X8+3520]
	097 Move X0, [X8]
	098 Call 0x1C17F10
	099 Move X1, X21
	100 Move X2, X20
	101 Move X3, X19
	102 Move X23, X0
	103 Call ValueTypeFixupInfo..ctor, X0, X1, X2, X3
	104 Move [X22+88], X23
	105 Move X0, X22
	106 Move X20, [X31+64]
	107 Move X19, [X31+72]
	108 Move X22, [X31+48]
	109 Move X21, [X31+56]
	110 Move X24, [X31+32]
	111 Move X23, [X31+40]
	112 Move X26, [X31+16]
	113 Move X25, [X31+24]
	114 Move X30, [X31+80]
	115 Move X27, [X31+88]
	116 Call ObjectHolder.SetFlags, X0
	117 Return 
	118 Call 0x1C17F20
	119 Move X0, 0xE7F000
	120 Move X0, [X0+3560]
	121 Call 0x1C17D08
	122 Move X1, X31
	123 Call Environment.GetResourceString, X0
	124 Move X19, X0
	125 Move X0, 0xE78000
	126 Move X0, [X0+736]
	127 Call 0x1C17D08
	128 Call 0x1C17F10
	129 Move X1, X19
	130 Move X20, X0
	131 Call SerializationException..ctor, X0, X1
	132 Move X0, 0xE7F000
	133 Move X0, [X0+3568]
	134 Call 0x1C17D08
	135 Move X1, X0
	136 Move X0, X20
	137 Call 0x1C17DEC
	138 Move X0, X24
	139 Call 0x1C181E0

Method: System.Void .ctor(System.String obj, System.Int64 objID, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.ISerializationSurrogate surrogate, System.Int64 idOfContainingObj, System.Reflection.FieldInfo field, System.Int32[] arrayIndex)

Disassembly:
	0x032A64F8 STR X8, [X19 + 0x38]
	0x032A64FC LDP X20, X19, [X31 + 0x20]
	0x032A6500 LDR X30, [X31], #0x30
	0x032A6504 RET
	0x032A6508 BL 0x1C16F20
	0x032A650C ADRP X0, 0xE7E000
	0x032A6510 LDR X0, [X0 + 0xE20]
	0x032A6514 BL 0x1C16D08
	0x032A6518 MOV X1, X31
	0x032A651C BL 0x33BDD84
	0x032A6520 MOV X19, X0
	0x032A6524 ADRP X0, 0xE77000
	0x032A6528 LDR X0, [X0 + 0x2E0]
	0x032A652C BL 0x1C16D08
	0x032A6530 BL 0x1C16F10
	0x032A6534 MOV X1, X19
	0x032A6538 MOV X20, X0
	0x032A653C BL 0x329F100
	0x032A6540 ADRP X0, 0xE7E000
	0x032A6544 LDR X0, [X0 + 0xE28]
	0x032A6548 BL 0x1C16D08
	0x032A654C MOV X1, X0
	0x032A6550 MOV X0, X20
	0x032A6554 BL 0x1C16DEC
	0x032A6558 STR X30, [X31 - 0x30]!
	0x032A655C STP X22, X21, [X31 + 0x10]
	0x032A6560 STP X20, X19, [X31 + 0x20]
	0x032A6564 ADRP X22, 0x1136000
	0x032A6568 LDRB W8, [X22 + 0x794]
	0x032A656C MOV X19, X2
	0x032A6570 MOV X21, X1
	0x032A6574 MOV X20, X0
	0x032A6578 TBNZ X8, 0x0, 0x32A6590
	0x032A657C ADRP X0, 0xE7E000
	0x032A6580 LDR X0, [X0 + 0xE30]
	0x032A6584 BL 0x1C16CF4
	0x032A6588 MOVZ W8, 0x1
	0x032A658C STRB W8, [X22 + 0x794]
	0x032A6590 LDR X22, [X20 + 0x38]
	0x032A6594 CBNZ X22, 0x32A65BC
	0x032A6598 ADRP X8, 0xE7E000
	0x032A659C LDR X8, [X8 + 0xE30]
	0x032A65A0 LDR X0, [X8]
	0x032A65A4 BL 0x1C16F10
	0x032A65A8 MOVZ W1, 0x2
	0x032A65AC MOV X22, X0
	0x032A65B0 BL 0x32A705C
	0x032A65B4 STR X22, [X20 + 0x38]
	0x032A65B8 CBZ X22, 0x32A6610
	0x032A65BC LDR X8, [X22]
	0x032A65C0 MOV X0, X22
	0x032A65C4 MOV X1, X21
	0x032A65C8 LDP X9, X2, [X8 + 0x178]
	0x032A65CC BLR X9
	0x032A65D0 LDR W8, [X20 + 0x20]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X27, 0x1137000
	012 Move W8, [X27+1939]
	013 Move X20, X7
	014 Move X21, X6
	015 Move X22, X5
	016 Move X23, X4
	017 Move X24, X3
	018 Move X25, X2
	019 Move X26, X1
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0xE7F000
	026 Move X0, [X0+3520]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X27+1939], W8
	030 Move X0, X19
	031 Move X1, X31
	032 Call Object..ctor, X0
	033 Move [X19+16], X26
	034 Move [X19+24], X25
	035 Move [X19+32], X31
	036 Move [X19+40], X24
	037 Move [X19+64], X31
	038 Move [X19+72], X31
	039 Move [X19+80], W31
	040 Move [X19+48], X23
	041 Move [X19+84], W31
	042 Compare X22, 0
	043 JumpIfEqual {58}
	044 Compare X20, 0
	045 JumpIfEqual {58}
	046 Move X8, 0xE7F000
	047 Move X8, [X8+3520]
	048 Move X0, [X8]
	049 Call 0x1C17F10
	050 Move X1, X22
	051 Move X2, X21
	052 Move X3, X20
	053 Move X23, X0
	054 Call ValueTypeFixupInfo..ctor, X0, X1, X2, X3
	055 Move [X19+88], X23
	056 Compare X23, 0
	057 JumpIfNotEqual {61}
	058 Move X23, [X19+88]
	059 Compare X23, 0
	060 JumpIfEqual {64}
	061 Move W8, [X19+80]
	062 Or W8, W8, 8
	063 Move [X19+80], W8
	064 Move X20, [X31+64]
	065 Move X19, [X31+72]
	066 Move X22, [X31+48]
	067 Move X21, [X31+56]
	068 Move X24, [X31+32]
	069 Move X23, [X31+40]
	070 Move X26, [X31+16]
	071 Move X25, [X31+24]
	072 Move X30, [X31+80]
	073 Move X27, [X31+88]
	074 Return 

Method: System.Void IncrementDescendentFixups(System.Int32 amount)

Disassembly:
	0x032A7E54 ADRP X27, 0xE4C000
	0x032A7E58 LDR X23, [X19 + 0x28]
	0x032A7E5C LDR X25, [X25 + 0x968]
	0x032A7E60 LDR X27, [X27 + 0x6C0]

ISIL:
	001 Move W8, [X0+36]
	002 Add W8, W8, W1
	003 Move [X0+36], W8
	004 Return 

Method: System.Void DecrementFixupsRemaining(System.Runtime.Serialization.ObjectManager manager)

Disassembly:
	0x032A6224 MOV X1, X19
	0x032A6228 MOV X2, X31
	0x032A622C BL 0x33BFB40
	0x032A6230 MOV X19, X0
	0x032A6234 ADRP X0, 0xE77000
	0x032A6238 LDR X0, [X0 + 0x2E0]
	0x032A623C BL 0x1C16D08
	0x032A6240 BL 0x1C16F10
	0x032A6244 MOV X1, X19

ISIL:
	001 Move W8, [X0+32]
	002 Move W9, [X0+80]
	003 Subtract W8, W8, 1
	004 Move [X0+32], W8
	005 Move TEMP, X9
	006 And TEMP, TEMP, 8
	007 Compare TEMP, 8
	008 JumpIfEqual {10}
	009 Return 
	010 Move X2, X1
	011 Move TEMP, 0
	012 Not TEMP
	013 Move W1, TEMP
	014 Call ObjectHolder.UpdateDescendentDependencyChain, X0, X1, X2
	015 Return 

Method: System.Void RemoveDependency(System.Int64 id)

Disassembly:
	0x032A6248 MOV X20, X0
	0x032A624C BL 0x329F100
	0x032A6250 ADRP X0, 0xE7E000
	0x032A6254 LDR X0, [X0 + 0xE08]
	0x032A6258 BL 0x1C16D08
	0x032A625C MOV X1, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X30, [X31+16]
	006 Call LongList.RemoveElement, X0, X1
	007 Return 
	008 Call 0x1C17F20

Method: System.Void AddFixup(System.Runtime.Serialization.FixupHolder fixup, System.Runtime.Serialization.ObjectManager manager)

Disassembly:
	0x032A7558 LDR X1, [X22]
	0x032A755C MOV X22, X0
	0x032A7560 BL 0x301B7C4
	0x032A7564 STR X22, [X20 + 0x20]
	0x032A7568 LDR X0, [X23]
	0x032A756C LDR W8, [X0 + 0xE0]
	0x032A7570 CBNZ W8, 0x32A7578
	0x032A7574 BL 0x1C16DFC
	0x032A7578 MOV X0, X20
	0x032A757C MOV X1, X31
	0x032A7580 BL 0x33671B0
	0x032A7584 STP X21, X19, [X20 + 0x10]
	0x032A7588 LDP X20, X19, [X31 + 0x30]
	0x032A758C LDP X22, X21, [X31 + 0x20]
	0x032A7590 LDP X24, X23, [X31 + 0x10]
	0x032A7594 LDP X30, X25, [X31], #0x40
	0x032A7598 RET
	0x032A759C LDR X0, [X0 + 0x20]
	0x032A75A0 RET
	0x032A75A4 MOV X1, X31
	0x032A75A8 B 0x33BDD8C
	0x032A75AC STP X30, X23, [X31 - 0x30]!
	0x032A75B0 STP X22, X21, [X31 + 0x10]
	0x032A75B4 STP X20, X19, [X31 + 0x20]
	0x032A75B8 ADRP X23, 0x1135000
	0x032A75BC ADRP X21, 0xE7D000
	0x032A75C0 ADRP X22, 0xE4C000
	0x032A75C4 LDRB W8, [X23 + 0x7A2]
	0x032A75C8 LDR X21, [X21 + 0xE98]
	0x032A75CC LDR X22, [X22 + 0x6C0]
	0x032A75D0 MOV X20, X1
	0x032A75D4 MOV X19, X0
	0x032A75D8 TBNZ X8, 0x0, 0x32A7638
	0x032A75DC ADRP X0, 0xE7D000
	0x032A75E0 LDR X0, [X0 + 0xEA0]
	0x032A75E4 BL 0x1C16CF4
	0x032A75E8 ADRP X0, 0xE51000
	0x032A75EC LDR X0, [X0 + 0x740]
	0x032A75F0 BL 0x1C16CF4
	0x032A75F4 ADRP X0, 0xE7D000
	0x032A75F8 LDR X0, [X0 + 0xE98]
	0x032A75FC BL 0x1C16CF4
	0x032A7600 ADRP X0, 0xE75000
	0x032A7604 LDR X0, [X0 + 0x4E8]
	0x032A7608 BL 0x1C16CF4
	0x032A760C ADRP X0, 0xE4C000
	0x032A7610 LDR X0, [X0 + 0x6C0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1136000
	007 Move W8, [X22+1940]
	008 Move X19, X2
	009 Move X21, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xE7E000
	016 Move X0, [X0+3632]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1940], W8
	020 Move X22, [X20+56]
	021 Compare X22, 0
	022 JumpIfNotEqual {33}
	023 Move X8, 0xE7E000
	024 Move X8, [X8+3632]
	025 Move X0, [X8]
	026 Call 0x1C17F10
	027 Move W1, 2
	028 Move X22, X0
	029 Call FixupHolderList..ctor, X0, X1
	030 Move [X20+56], X22
	031 Compare X22, 0
	032 JumpIfEqual {63}
	033 Move X8, [X22]
	034 Move X0, X22
	035 Move X1, X21
	036 Move X9, [X8+376]
	037 Move X2, [X8+384]
	038 NotImplemented "Instruction BLR not yet implemented."
	039 Move W8, [X20+32]
	040 Move W9, [X20+80]
	041 Add W8, W8, 1
	042 Move [X20+32], W8
	043 Move TEMP, X9
	044 And TEMP, TEMP, 8
	045 Compare TEMP, 8
	046 JumpIfEqual {53}
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X30, [X31+48]
	052 Return 
	053 Move X0, X20
	054 Move X2, X19
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X22, [X31+16]
	058 Move X21, [X31+24]
	059 Move W1, 1
	060 Move X30, [X31+48]
	061 Call ObjectHolder.UpdateDescendentDependencyChain, X0, X1, X2
	062 Return 
	063 Call 0x1C17F20

Method: System.Void UpdateDescendentDependencyChain(System.Int32 amount, System.Runtime.Serialization.ObjectManager manager)

Disassembly:
	0x032A7E64 LDR X8, [X22]
	0x032A7E68 MOV X0, X22
	0x032A7E6C MOV X1, X23
	0x032A7E70 LDR X9, [X8 + 0x268]
	0x032A7E74 LDR X2, [X8 + 0x270]
	0x032A7E78 BLR X9
	0x032A7E7C CBZ X23, 0x32A8024
	0x032A7E80 LDR X8, [X23]
	0x032A7E84 MOV X0, X23
	0x032A7E88 LDR X9, [X8 + 0x818]
	0x032A7E8C LDR X1, [X8 + 0x820]
	0x032A7E90 BLR X9
	0x032A7E94 CBZ X0, 0x32A7EB0
	0x032A7E98 LDR X9, [X0]
	0x032A7E9C LDR X8, [X26]
	0x032A7EA0 LDRB W11, [X9 + 0x130]
	0x032A7EA4 LDRB W10, [X8 + 0x130]
	0x032A7EA8 CMP W11, W10
	0x032A7EAC B.CS 0x32A7EB8
	0x032A7EB0 MOV X23, X31
	0x032A7EB4 B 0x32A7ECC
	0x032A7EB8 LDR X9, [X9 + 0xC8]
	0x032A7EBC ADD X9, X9, X10, 0x3, LSL
	0x032A7EC0 LDUR X9, [X9 - 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X2
	005 Move W20, W1
	006 Compare X0, 0
	007 JumpIfEqual {33}
	008 Move X8, [X0+88]
	009 Compare X8, 0
	010 JumpIfEqual {14}
	011 Move X1, [X8+16]
	012 Compare X19, 0
	013 JumpIfNotEqual {17}
	014 Move X1, X31
	015 Compare X19, 0
	016 JumpIfEqual {33}
	017 Move X0, X19
	018 Call ObjectManager.FindOrCreateObjectHolder, X0, X1
	019 Compare X0, 0
	020 JumpIfEqual {33}
	021 Move W8, [X0+36]
	022 Move W9, [X0+80]
	023 Add W8, W8, W20
	024 Move [X0+36], W8
	025 Move TEMP, X9
	026 And TEMP, TEMP, 8
	027 Compare TEMP, 8
	028 JumpIfEqual {6}
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Return 
	033 Call 0x1C17F20

Method: System.Void AddDependency(System.Int64 dependentObject)

Disassembly:
	0x032A7614 BL 0x1C16CF4
	0x032A7618 ADRP X0, 0xE7D000
	0x032A761C LDR X0, [X0 + 0xEA8]
	0x032A7620 BL 0x1C16CF4
	0x032A7624 ADRP X0, 0xE7D000
	0x032A7628 LDR X0, [X0 + 0xEB0]
	0x032A762C BL 0x1C16CF4
	0x032A7630 MOVZ W8, 0x1
	0x032A7634 STRB W8, [X23 + 0x7A2]
	0x032A7638 MOV X0, X19
	0x032A763C MOV X1, X31
	0x032A7640 BL 0x33BDD8C
	0x032A7644 LDR X0, [X22]
	0x032A7648 LDR X21, [X21]
	0x032A764C LDR W8, [X0 + 0xE0]
	0x032A7650 CBNZ W8, 0x32A7658
	0x032A7654 BL 0x1C16DFC
	0x032A7658 MOV X0, X21
	0x032A765C MOV X1, X31
	0x032A7660 BL 0x338C698
	0x032A7664 CBZ X20, 0x32A7794
	0x032A7668 ADRP X8, 0xE7D000
	0x032A766C LDR X8, [X8 + 0xEB0]
	0x032A7670 ADRP X21, 0xE75000
	0x032A7674 MOV X2, X0
	0x032A7678 MOV X0, X20
	0x032A767C LDR X1, [X8]
	0x032A7680 LDR X21, [X21 + 0x4E8]
	0x032A7684 MOV X3, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1136000
	006 Move W8, [X21+1941]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xE7E000
	014 Move X0, [X0+3640]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1941], W8
	018 Move X21, [X20+64]
	019 Compare X21, 0
	020 JumpIfNotEqual {31}
	021 Move X8, 0xE7E000
	022 Move X8, [X8+3640]
	023 Move X0, [X8]
	024 Call 0x1C17F10
	025 Move W1, 2
	026 Move X21, X0
	027 Call LongList..ctor, X0, X1
	028 Move [X20+64], X21
	029 Compare X21, 0
	030 JumpIfEqual {39}
	031 Move X1, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X0, X21
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call LongList.Add, X0, X1
	038 Return 
	039 Call 0x1C17F20

Method: System.Void UpdateData(System.Object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.ISerializationSurrogate surrogate, System.Int64 idOfContainer, System.Reflection.FieldInfo field, System.Int32[] arrayIndex, System.Runtime.Serialization.ObjectManager manager)

Disassembly:
	0x032A6D5C MOV X19, X1
	0x032A6D60 MOV X20, X0
	0x032A6D64 TBNZ X8, 0x0, 0x32A6D7C
	0x032A6D68 ADRP X0, 0xE7E000
	0x032A6D6C LDR X0, [X0 + 0xAE8]
	0x032A6D70 BL 0x1C16CF4
	0x032A6D74 MOVZ W8, 0x1
	0x032A6D78 STRB W8, [X21 + 0x790]
	0x032A6D7C CBZ X19, 0x32A6DCC
	0x032A6D80 ADRP X21, 0xE7E000
	0x032A6D84 LDR X21, [X21 + 0xAE8]
	0x032A6D88 MOV X0, X19
	0x032A6D8C MOV X1, X31
	0x032A6D90 BL 0x33BE520
	0x032A6D94 LDR X8, [X21]
	0x032A6D98 MOV X21, X0
	0x032A6D9C LDR W9, [X8 + 0xE0]
	0x032A6DA0 CBNZ W9, 0x32A6DAC
	0x032A6DA4 MOV X0, X8
	0x032A6DA8 BL 0x1C16DFC
	0x032A6DAC MOV X0, X21
	0x032A6DB0 BL 0x32A0100
	0x032A6DB4 CBZ X0, 0x32A6DCC
	0x032A6DB8 LDP X2, X3, [X20 + 0x48]
	0x032A6DBC MOV X1, X19
	0x032A6DC0 LDP X20, X19, [X31 + 0x10]
	0x032A6DC4 LDP X30, X21, [X31], #0x20
	0x032A6DC8 B 0x329FE48
	0x032A6DCC BL 0x1C16F20
	0x032A6DD0 STP X30, X21, [X31 - 0x20]!
	0x032A6DD4 STP X20, X19, [X31 + 0x10]
	0x032A6DD8 ADRP X21, 0x1136000
	0x032A6DDC LDRB W8, [X21 + 0x791]
	0x032A6DE0 MOV X19, X1
	0x032A6DE4 MOV X20, X0
	0x032A6DE8 TBNZ X8, 0x0, 0x32A6E00
	0x032A6DEC ADRP X0, 0xE7E000
	0x032A6DF0 LDR X0, [X0 + 0xAE8]
	0x032A6DF4 BL 0x1C16CF4
	0x032A6DF8 MOVZ W8, 0x1
	0x032A6DFC STRB W8, [X21 + 0x791]
	0x032A6E00 CBZ X19, 0x32A6E50
	0x032A6E04 ADRP X21, 0xE7E000
	0x032A6E08 LDR X21, [X21 + 0xAE8]
	0x032A6E0C MOV X0, X19
	0x032A6E10 MOV X1, X31
	0x032A6E14 BL 0x33BE520
	0x032A6E18 LDR X8, [X21]
	0x032A6E1C MOV X21, X0
	0x032A6E20 LDR W9, [X8 + 0xE0]
	0x032A6E24 CBNZ W9, 0x32A6E30
	0x032A6E28 MOV X0, X8
	0x032A6E2C BL 0x1C16DFC
	0x032A6E30 MOV X0, X21
	0x032A6E34 BL 0x32A0100
	0x032A6E38 CBZ X0, 0x32A6E50
	0x032A6E3C LDP X2, X3, [X20 + 0x48]
	0x032A6E40 MOV X1, X19
	0x032A6E44 LDP X20, X19, [X31 + 0x10]
	0x032A6E48 LDP X30, X21, [X31], #0x20
	0x032A6E4C B 0x329FDF4
	0x032A6E50 BL 0x1C16F20
	0x032A6E54 LDR W8, [X0 + 0x24]
	0x032A6E58 ADD W8, W8, W1
	0x032A6E5C STR W8, [X0 + 0x24]
	0x032A6E60 RET
	0x032A6E64 STR X30, [X31 - 0x20]!
	0x032A6E68 STP X20, X19, [X31 + 0x10]
	0x032A6E6C MOV X19, X2
	0x032A6E70 MOV W20, W1
	0x032A6E74 CBZ X0, 0x32A6EC0
	0x032A6E78 LDR X8, [X0 + 0x58]
	0x032A6E7C CBZ X8, 0x32A6E8C
	0x032A6E80 LDR X1, [X8 + 0x10]
	0x032A6E84 CBNZ X19, 0x32A6E94
	0x032A6E88 B 0x32A6EC0
	0x032A6E8C MOV X1, X31
	0x032A6E90 CBZ X19, 0x32A6EC0
	0x032A6E94 MOV X0, X19
	0x032A6E98 BL 0x32A3720
	0x032A6E9C CBZ X0, 0x32A6EC0
	0x032A6EA0 LDR W8, [X0 + 0x24]
	0x032A6EA4 LDRB W9, [X0 + 0x50]
	0x032A6EA8 ADD W8, W8, W20
	0x032A6EAC STR W8, [X0 + 0x24]
	0x032A6EB0 TBNZ X9, 0x3, 0x32A6E74
	0x032A6EB4 LDP X20, X19, [X31 + 0x10]
	0x032A6EB8 LDR X30, [X31], #0x20
	0x032A6EBC RET
	0x032A6EC0 BL 0x1C16F20
	0x032A6EC4 STR X30, [X31 - 0x10]!
	0x032A6EC8 LDR W8, [X0 + 0x1C]
	0x032A6ECC CMP W8, 0x1
	0x032A6ED0 B.LT 0x32A6F0C
	0x032A6ED4 LDR X11, [X0 + 0x10]
	0x032A6ED8 CBZ X11, 0x32A6F4C
	0x032A6EDC LDR W10, [X11 + 0x18]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X27, 0x1137000
	012 Move W8, [X27+1942]
	013 Move X19, X7
	014 Move X21, X6
	015 Move X22, X5
	016 Move X23, X4
	017 Move X24, X3
	018 Move X25, X2
	019 Move X26, X1
	020 Move X20, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0xE7F000
	026 Move X0, [X0+3520]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X27+1942], W8
	030 Move X0, X20
	031 Move X1, X26
	032 Move X2, X19
	033 Call ObjectHolder.SetObjectValue, X0, X1, X2
	034 Move [X20+40], X25
	035 Move [X20+48], X24
	036 Compare X23, 0
	037 JumpIfEqual {77}
	038 Move X0, X22
	039 Move X1, X31
	040 Move X2, X31
	041 Call FieldInfo.op_Inequality, X0, X1
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {63}
	046 Compare X22, 0
	047 JumpIfEqual {110}
	048 Move X8, [X22]
	049 Move X0, X22
	050 Move X9, [X8+600]
	051 Move X1, [X8+608]
	052 NotImplemented "Instruction BLR not yet implemented."
	053 Compare X0, 0
	054 JumpIfEqual {110}
	055 Move X1, X31
	056 Call Type.get_IsValueType, X0
	057 Compare X21, 0
	058 JumpIfNotEqual {65}
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {77}
	063 Compare X21, 0
	064 JumpIfEqual {77}
	065 Move X8, [X20+24]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move X8, 0xE7F000
	068 Move X8, [X8+3520]
	069 Move X0, [X8]
	070 Call 0x1C17F10
	071 Move X1, X23
	072 Move X2, X22
	073 Move X3, X21
	074 Move X24, X0
	075 Call ValueTypeFixupInfo..ctor, X0, X1, X2, X3
	076 Move [X20+88], X24
	077 Move X0, X20
	078 Call ObjectHolder.SetFlags, X0
	079 Move W8, [X20+80]
	080 Move TEMP, X8
	081 And TEMP, TEMP, 8
	082 Compare TEMP, 8
	083 JumpIfEqual {95}
	084 Move X20, [X31+64]
	085 Move X19, [X31+72]
	086 Move X22, [X31+48]
	087 Move X21, [X31+56]
	088 Move X24, [X31+32]
	089 Move X23, [X31+40]
	090 Move X26, [X31+16]
	091 Move X25, [X31+24]
	092 Move X30, [X31+80]
	093 Move X27, [X31+88]
	094 Return 
	095 Move W1, [X20+32]
	096 Move X0, X20
	097 Move X2, X19
	098 Move X20, [X31+64]
	099 Move X19, [X31+72]
	100 Move X22, [X31+48]
	101 Move X21, [X31+56]
	102 Move X24, [X31+32]
	103 Move X23, [X31+40]
	104 Move X26, [X31+16]
	105 Move X25, [X31+24]
	106 Move X30, [X31+80]
	107 Move X27, [X31+88]
	108 Call ObjectHolder.UpdateDescendentDependencyChain, X0, X1, X2
	109 Return 
	110 Call 0x1C17F20
	111 Move X0, 0xE7F000
	112 Move X0, [X0+3560]
	113 Call 0x1C17D08
	114 Move X1, X31
	115 Call Environment.GetResourceString, X0
	116 Move X19, X0
	117 Move X0, 0xE78000
	118 Move X0, [X0+736]
	119 Call 0x1C17D08
	120 Call 0x1C17F10
	121 Move X1, X19
	122 Move X20, X0
	123 Call SerializationException..ctor, X0, X1
	124 Move X0, 0xE7F000
	125 Move X0, [X0+3576]
	126 Call 0x1C17D08
	127 Move X1, X0
	128 Move X0, X20
	129 Call 0x1C17DEC

Method: System.Void MarkForCompletionWhenAvailable()

Disassembly:
	0x032A62C4 BL 0x1C16D08
	0x032A62C8 MOV X1, X0
	0x032A62CC MOV X0, X19

ISIL:
	001 Move W8, 1
	002 Move [X0+84], W8
	003 Return 

Method: System.Void SetFlags()

Disassembly:
	0x032A4FC0 CMP X8, X1
	0x032A4FC4 B.NE 0x32A50B8
	0x032A4FC8 LDR X3, [X29 + 0x10]
	0x032A4FCC MOV X0, X20
	0x032A4FD0 MOV X1, X22
	0x032A4FD4 MOV X2, X19
	0x032A4FD8 BL 0x32A4358
	0x032A4FDC LDR W8, [X29 + 0x50]
	0x032A4FE0 TBZ X8, 0x3, 0x32A5008
	0x032A4FE4 ORR W8, W8, 0x8000
	0x032A4FE8 STR W8, [X29 + 0x50]
	0x032A4FEC B 0x32A5008
	0x032A4FF0 MOV X2, X31
	0x032A4FF4 MOV X0, X22
	0x032A4FF8 MOV X1, X23
	0x032A4FFC MOV X3, X31
	0x032A5000 BL 0x33A2280
	0x032A5004 LDR W25, [X31 + 0x4]
	0x032A5008 LDR X8, [X26 + 0x10]
	0x032A500C CBZ X8, 0x32A50B0
	0x032A5010 LDR W9, [X8 + 0x18]
	0x032A5014 CMP X27, X9
	0x032A5018 B.CS 0x32A50B4
	0x032A501C ADD W25, W25, 0x1
	0x032A5020 STR X31, [X8, X28, LSL #3]
	0x032A5024 TBNZ X21, 0x0, 0x32A505C
	0x032A5028 LDR W8, [X19 + 0x20]
	0x032A502C LDRB W9, [X19 + 0x50]
	0x032A5030 SUB W8, W8, 0x1
	0x032A5034 STR W8, [X19 + 0x20]
	0x032A5038 TBZ X9, 0x3, 0x32A504C
	0x032A503C MOVN W1, 0x0
	0x032A5040 MOV X0, X19
	0x032A5044 MOV X2, X20
	0x032A5048 BL 0x32A6E64
	0x032A504C LDR X0, [X29 + 0x40]
	0x032A5050 CBZ X0, 0x32A50B0
	0x032A5054 LDR X1, [X19 + 0x18]
	0x032A5058 BL 0x32A6EC4
	0x032A505C LDRSW X8, [X26 + 0x18]
	0x032A5060 SUB X9, X28, 0x3
	0x032A5064 ADD X28, X28, 0x1
	0x032A5068 CMP X9, X8
	0x032A506C B.LT 0x32A4DF0
	0x032A5070 B 0x32A5078
	0x032A5074 MOV W25, W31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1139000
	006 Move X20, 0xE81000
	007 Move W8, [X21+1943]
	008 Move X20, [X20+3392]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xE81000
	015 Move X0, [X0+3392]
	016 Call 0x1C17CF4
	017 Move X0, 0xE80000
	018 Move X0, [X0+3120]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1943], W8
	022 Move X0, [X19+16]
	023 Move X1, [X20]
	024 Call 0x1C17E00
	025 Move W8, [X19+80]
	026 Move X9, [X19+48]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 NotImplemented "Instruction CSET not yet implemented."
	029 And W8, W8, 0xFFFFFFF9
	030 Or W8, W8, W10
	031 Move [X19+80], W8
	032 Compare X9, 0
	033 JumpIfEqual {35}
	034 Or W8, W8, 4
	035 Move X8, 0xE7F000
	036 Move X0, [X19+16]
	037 Move X8, [X8+3120]
	038 Move X1, [X8]
	039 Call 0x1C17E00
	040 Compare X0, 0
	041 JumpIfEqual {45}
	042 Move W8, [X19+80]
	043 Or W8, W8, 2
	044 Move [X19+80], W8
	045 Move X8, [X19+88]
	046 Compare X8, 0
	047 JumpIfEqual {51}
	048 Move W8, [X19+80]
	049 Or W8, W8, 8
	050 Move [X19+80], W8
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Return 

Method: System.Boolean get_IsIncompleteObjectReference()

Disassembly:
	0x032A4BD8 MOV X2, X31
	0x032A4BDC BL 0x3EB1B00
	0x032A4BE0 MOV X19, X0

ISIL:
	001 Move W8, [X0+80]
	002 And W0, W8, 1
	003 Return X0

Method: System.Void set_IsIncompleteObjectReference(System.Boolean value)

Disassembly:
	0x032A5BF4 STP X31, X31, [X22 + 0x40]
	0x032A5BF8 STR X25, [X22 + 0x30]
	0x032A5BFC STRB W31, [X22 + 0x54]
	0x032A5C00 CBZ X24, 0x32A5C5C

ISIL:
	001 Move W8, [X0+80]
	002 NotImplemented "Instruction BFM not yet implemented."
	003 Move [X0+80], W8
	004 Return 

Method: System.Boolean get_RequiresDelayedFixup()

Disassembly:
	0x032A6D4C STP X30, X21, [X31 - 0x20]!
	0x032A6D50 STP X20, X19, [X31 + 0x10]
	0x032A6D54 ADRP X21, 0x1136000
	0x032A6D58 LDRB W8, [X21 + 0x790]

ISIL:
	001 Move W8, [X0+80]
	002 And W31, W8, 7
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Boolean get_RequiresValueTypeFixup()

Disassembly:
	0x032A5314 B.EQ 0x32A52E4
	0x032A5318 B 0x32A5320
	0x032A531C MOV W9, W10

ISIL:
	001 Move W8, [X0+80]
	002 Move W0, W8
	003 ShiftRight W0, 3
	004 And W0, W0, 7
	005 Return X0

Method: System.Boolean get_ValueTypeFixupPerformed()

Disassembly:
	0x032A5320 CMP W9, W8
	0x032A5324 CSET W8, NE
	0x032A5328 STR W9, [X0 + 0x20]
	0x032A532C MOV W0, W8
	0x032A5330 LDR X30, [X31], #0x10
	0x032A5334 RET
	0x032A5338 ADD W8, W11, 0x1
	0x032A533C STR W8, [X0 + 0x20]
	0x032A5340 BL 0x1C16F20
	0x032A5344 ADD W8, W11, 0x1
	0x032A5348 STR W8, [X0 + 0x20]
	0x032A534C BL 0x1C16F28
	0x032A5350 STR X30, [X31 - 0x20]!
	0x032A5354 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move W8, [X0+81]
	002 Move TEMP, X8
	003 And TEMP, TEMP, 128
	004 Compare TEMP, 128
	005 JumpIfEqual {16}
	006 Move X8, [X0+16]
	007 Compare X8, 0
	008 JumpIfEqual {18}
	009 Move X8, [X0+64]
	010 Compare X8, 0
	011 JumpIfEqual {16}
	012 Move W8, [X8+24]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 NotImplemented "Instruction CSET not yet implemented."
	015 Return X0
	016 Move W0, 1
	017 Return X0
	018 Move W0, W31
	019 Return X0

Method: System.Void set_ValueTypeFixupPerformed(System.Boolean value)

Disassembly:
	0x032A6270 BL 0x1C16D08
	0x032A6274 MOV X1, X31
	0x032A6278 BL 0x33BDD84
	0x032A627C B 0x32A6230
	0x032A6280 BL 0x1C16F28

ISIL:
	001 Move TEMP, X1
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfNotEqual {8}
	005 Move W8, [X0+80]
	006 Or W8, W8, 0x8000
	007 Move [X0+80], W8
	008 Return 

Method: System.Boolean get_HasISerializable()

Disassembly:
	0x032A6218 ADRP X0, 0xE7E000
	0x032A621C LDR X0, [X0 + 0xD08]
	0x032A6220 BL 0x1C16D08

ISIL:
	001 Move W8, [X0+80]
	002 Move W0, W8
	003 ShiftRight W0, 1
	004 And W0, W0, 1
	005 Return X0

Method: System.Boolean get_HasSurrogate()

Disassembly:
	0x032A4E14 ADD X2, X31, 0x10
	0x032A4E18 ADD X3, X31, 0x18
	0x032A4E1C MOV X0, X20

ISIL:
	001 Move W8, [X0+80]
	002 Move W0, W8
	003 ShiftRight W0, 2
	004 And W0, W0, 3
	005 Return X0

Method: System.Boolean get_CanSurrogatedObjectValueChange()

Disassembly:
	0x032A4E20 MOV X1, X22
	0x032A4E24 BL 0x32A38E4
	0x032A4E28 TBZ X0, 0x0, 0x32A505C
	0x032A4E2C LDR X29, [X31 + 0x10]
	0x032A4E30 CBZ X29, 0x32A50B0
	0x032A4E34 LDR X8, [X29 + 0x60]
	0x032A4E38 CBZ X8, 0x32A4E4C
	0x032A4E3C LDRB W9, [X19 + 0x68]
	0x032A4E40 STR X8, [X19 + 0x60]
	0x032A4E44 CBZ W9, 0x32A4E5C
	0x032A4E48 B 0x32A5144
	0x032A4E4C LDRB W8, [X19 + 0x68]
	0x032A4E50 CBZ W8, 0x32A4E5C
	0x032A4E54 MOVZ W8, 0x1
	0x032A4E58 STRB W8, [X29 + 0x68]
	0x032A4E5C LDR W8, [X22 + 0x20]
	0x032A4E60 CMP W8, 0x2
	0x032A4E64 B.EQ 0x32A4EE8
	0x032A4E68 CMP W8, 0x1
	0x032A4E6C B.NE 0x32A50C8
	0x032A4E70 LDRB W8, [X19 + 0x50]
	0x032A4E74 TBNZ X8, 0x3, 0x32A51B4
	0x032A4E78 LDR X22, [X19 + 0x10]
	0x032A4E7C CBZ X22, 0x32A50B0
	0x032A4E80 ADRP X9, 0xE4F000
	0x032A4E84 LDR X8, [X22]
	0x032A4E88 LDR X9, [X9 + 0xEF0]
	0x032A4E8C LDRB W10, [X8 + 0x130]
	0x032A4E90 LDR X1, [X9]
	0x032A4E94 LDRB W9, [X1 + 0x130]
	0x032A4E98 CMP W10, W9
	0x032A4E9C B.CC 0x32A50B8
	0x032A4EA0 LDR X8, [X8 + 0xC8]
	0x032A4EA4 ADD X8, X8, X9, 0x3, LSL
	0x032A4EA8 LDUR X8, [X8 - 0x8]
	0x032A4EAC CMP X8, X1
	0x032A4EB0 B.NE 0x32A50B8
	0x032A4EB4 LDR X24, [X31 + 0x18]
	0x032A4EB8 LDR X23, [X29 + 0x10]
	0x032A4EBC STR W25, [X31 + 0x4]
	0x032A4EC0 CBZ X24, 0x32A4FF0
	0x032A4EC4 ADRP X8, 0xE50000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1139000
	005 Move W8, [X20+1944]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xE81000
	012 Move X0, [X0+3376]
	013 Call 0x1C17CF4
	014 Move X0, 0xE50000
	015 Move X0, [X0+1728]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1944], W8
	019 Move X0, [X19+48]
	020 Compare X0, 0
	021 JumpIfEqual {47}
	022 Move X19, 0xE81000
	023 Move X20, 0xE50000
	024 Move X19, [X19+3376]
	025 Move X20, [X20+1728]
	026 Move X1, X31
	027 Call "il2cpp_vm_object_is_inst", X0
	028 Move X8, [X20]
	029 Move X20, [X19]
	030 Move X19, X0
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {36}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X0, X20
	037 Move X1, X31
	038 Call Type.GetTypeFromHandle, X0
	039 Move X1, X0
	040 Move X0, X19
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X2, X31
	044 Move X30, [X31+32]
	045 Call Type.op_Inequality, X0, X1
	046 Return X0
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move W0, 1
	050 Move X30, [X31+32]
	051 Return X0

Method: System.Boolean get_CanObjectValueChange()

Disassembly:
	0x032A4BB8 BL 0x3EB1AE0
	0x032A4BBC B 0x32A4ACC
	0x032A4BC0 MOVZ W0, 0x8
	0x032A4BC4 BL 0x3EB1AF0
	0x032A4BC8 LDR X8, [X19]
	0x032A4BCC STR X8, [X0]
	0x032A4BD0 ADRP X1, 0xC10000
	0x032A4BD4 ADD X1, X1, 0xE58

ISIL:
	001 Move W8, [X0+80]
	002 Move TEMP, X8
	003 And TEMP, TEMP, 1
	004 Compare TEMP, 1
	005 JumpIfEqual {12}
	006 Move TEMP, X8
	007 And TEMP, TEMP, 4
	008 Compare TEMP, 4
	009 JumpIfEqual {14}
	010 Move W0, W31
	011 Return X0
	012 Move W0, 1
	013 Return X0
	014 Call ObjectHolder.get_CanSurrogatedObjectValueChange, X0
	015 Return X0

Method: System.Int32 get_DirectlyDependentObjects()

Disassembly:
	0x032A7FF8 MOV X5, X31
	0x032A7FFC BL 0x32DC8B8

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Int32 get_TotalDependentObjects()

Disassembly:
	0x032A6EE0 MOV X9, X31
	0x032A6EE4 ADD X11, X11, 0x20
	0x032A6EE8 CMP W9, W10

ISIL:
	001 Move W8, [X0+32]
	002 Move W9, [X0+36]
	003 Add W0, W9, W8
	004 Return X0

Method: System.Boolean get_Reachable()

Disassembly:
	0x032A8000 STP X22, X31, [X19 + 0x20]
	0x032A8004 STR X31, [X19 + 0x18]

ISIL:
	001 Move W0, [X0+104]
	002 Return X0

Method: System.Void set_Reachable(System.Boolean value)

Disassembly:
	0x032A8008 MOV X0, X22
	0x032A800C LDP X20, X19, [X31 + 0x40]
	0x032A8010 LDP X22, X21, [X31 + 0x30]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+104], W8
	003 Return 

Method: System.Boolean get_TypeLoadExceptionReachable()

Disassembly:
	0x032A6260 MOV X0, X20
	0x032A6264 BL 0x1C16DEC
	0x032A6268 ADRP X0, 0xE7E000
	0x032A626C LDR X0, [X0 + 0xE10]

ISIL:
	001 Move X8, [X0+96]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Runtime.Serialization.TypeLoadExceptionHolder get_TypeLoadException()

Disassembly:
	0x032A8014 LDP X24, X23, [X31 + 0x20]
	0x032A8018 LDP X26, X25, [X31 + 0x10]

ISIL:
	001 Move X0, [X0+96]
	002 Return X0

Method: System.Void set_TypeLoadException(System.Runtime.Serialization.TypeLoadExceptionHolder value)

Disassembly:
	0x032A801C LDP X30, X27, [X31], #0x50
	0x032A8020 RET

ISIL:
	001 Move [X0+96], X1
	002 Return 

Method: System.Object get_ObjectValue()

Disassembly:
	0x032A8024 BL 0x1C16F20
	0x032A8028 STR X30, [X31 - 0x30]!

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void SetObjectValue(System.Object obj, System.Runtime.Serialization.ObjectManager manager)

Disassembly:
	0x032A4EC8 LDR X8, [X8 + 0xE58]
	0x032A4ECC MOV X0, X24
	0x032A4ED0 LDR X25, [X8]
	0x032A4ED4 MOV X1, X25
	0x032A4ED8 BL 0x1C16E00
	0x032A4EDC MOV X2, X0
	0x032A4EE0 CBNZ X0, 0x32A4FF4
	0x032A4EE4 B 0x32A51C0
	0x032A4EE8 LDR X22, [X31 + 0x18]
	0x032A4EEC CBZ X22, 0x32A50B0
	0x032A4EF0 ADRP X9, 0xE80000
	0x032A4EF4 LDR X8, [X22]
	0x032A4EF8 LDR X9, [X9 + 0xD70]
	0x032A4EFC LDRB W10, [X8 + 0x130]
	0x032A4F00 LDR X1, [X9]
	0x032A4F04 LDRB W9, [X1 + 0x130]
	0x032A4F08 CMP W10, W9
	0x032A4F0C B.CC 0x32A50B8
	0x032A4F10 LDR X8, [X8 + 0xC8]
	0x032A4F14 ADD X8, X8, X9, 0x3, LSL
	0x032A4F18 LDUR X8, [X8 - 0x8]
	0x032A4F1C CMP X8, X1
	0x032A4F20 B.NE 0x32A50B8
	0x032A4F24 LDR X8, [X22]
	0x032A4F28 MOV X0, X22
	0x032A4F2C LDP X9, X1, [X8 + 0x198]
	0x032A4F30 BLR X9
	0x032A4F34 CMP W0, 0x4
	0x032A4F38 B.NE 0x32A50C8
	0x032A4F3C LDR W8, [X19 + 0x50]
	0x032A4F40 TBNZ X8, 0x3, 0x32A4F78
	0x032A4F44 LDR X23, [X19 + 0x10]
	0x032A4F48 ADRP X8, 0xE80000
	0x032A4F4C LDR X8, [X8 + 0xB70]
	0x032A4F50 LDR X24, [X29 + 0x10]
	0x032A4F54 LDR X0, [X8]
	0x032A4F58 LDR W8, [X0 + 0xE0]
	0x032A4F5C CBNZ W8, 0x32A4F64
	0x032A4F60 BL 0x1C16DFC
	0x032A4F64 MOV X0, X22
	0x032A4F68 MOV X1, X23
	0x032A4F6C MOV X2, X24
	0x032A4F70 BL 0x32A1AD0
	0x032A4F74 B 0x32A4FDC
	0x032A4F78 TBNZ X8, 0xF, 0x32A4F94
	0x032A4F7C LDR X23, [X19 + 0x10]
	0x032A4F80 CBZ X23, 0x32A4F48
	0x032A4F84 LDR X8, [X19 + 0x40]
	0x032A4F88 CBZ X8, 0x32A4F94
	0x032A4F8C LDR W8, [X8 + 0x18]
	0x032A4F90 CBNZ W8, 0x32A4F48
	0x032A4F94 ADRP X9, 0xE78000
	0x032A4F98 LDR X8, [X22]
	0x032A4F9C LDR X9, [X9 + 0x3A8]
	0x032A4FA0 LDRB W10, [X8 + 0x130]
	0x032A4FA4 LDR X1, [X9]
	0x032A4FA8 LDRB W9, [X1 + 0x130]
	0x032A4FAC CMP W10, W9
	0x032A4FB0 B.CC 0x32A50B8
	0x032A4FB4 LDR X8, [X8 + 0xC8]
	0x032A4FB8 ADD X8, X8, X9, 0x3, LSL
	0x032A4FBC LDUR X8, [X8 - 0x8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1139000
	007 Move W8, [X22+1945]
	008 Move X19, X2
	009 Move X21, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xE81000
	016 Move X0, [X0+3384]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1945], W8
	020 Move [X20+16], X21
	021 Compare X19, 0
	022 JumpIfEqual {68}
	023 Move X8, [X19+40]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Compare X21, 0
	026 JumpIfNotEqual {31}
	027 Move W8, 1
	028 Move [X20+104], W8
	029 Compare X21, 0
	030 JumpIfEqual {49}
	031 Move X8, 0xE81000
	032 Move X8, [X8+3384]
	033 Move X9, [X21]
	034 Move X1, [X8]
	035 Move W10, [X9+304]
	036 Move W8, [X1+304]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X10, [X9+200]
	039 Subtract X9, X8, 1
	040 Move X10, [X10]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move [X20+96], X21
	043 Move X10, [X21]
	044 Move W11, [X10+304]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X8, [X10+200]
	047 Move X8, [X8]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move W8, [X20+84]
	050 Compare W8, 0
	051 JumpIfEqual {62}
	052 Move X0, X19
	053 Move X1, X20
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move W2, 1
	059 Move X30, [X31+48]
	060 Call ObjectManager.CompleteObject, X0, X1, X2
	061 Return 
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X22, [X31+16]
	065 Move X21, [X31+24]
	066 Move X30, [X31+48]
	067 Return 
	068 Call 0x1C17F20
	069 Move X0, X21
	070 Call 0x1C181E0

Method: System.Runtime.Serialization.SerializationInfo get_SerializationInfo()

Disassembly:
	0x032A802C STP X22, X21, [X31 + 0x10]
	0x032A8030 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_SerializationInfo(System.Runtime.Serialization.SerializationInfo value)

Disassembly:
	0x032A8034 ADRP X22, 0x1134000
	0x032A8038 LDRB W8, [X22 + 0x7A7]

ISIL:
	001 Move [X0+40], X1
	002 Return 

Method: System.Runtime.Serialization.ISerializationSurrogate get_Surrogate()

Disassembly:
	0x032A803C MOV X19, X2
	0x032A8040 MOV X21, X1

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Runtime.Serialization.LongList get_DependentObjects()

Disassembly:
	0x032A8044 MOV X20, X0
	0x032A8048 TBNZ X8, 0x0, 0x32A8060

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.Void set_DependentObjects(System.Runtime.Serialization.LongList value)

Disassembly:
	0x032A804C ADRP X0, 0xE7C000
	0x032A8050 LDR X0, [X0 + 0xAE8]

ISIL:
	001 Move [X0+64], X1
	002 Return 

Method: System.Boolean get_RequiresSerInfoFixup()

Disassembly:
	0x032A73A8 ADD W10, W9, 0x1
	0x032A73AC STR W10, [X20 + 0x18]
	0x032A73B0 LDR W10, [X8 + 0x18]
	0x032A73B4 CMP W9, W10
	0x032A73B8 B.CS 0x32A73D0
	0x032A73BC ADD X8, X8, W9, 0x3, SXTW
	0x032A73C0 STR X19, [X8 + 0x20]

ISIL:
	001 Move W8, [X0+80]
	002 And W31, W8, 6
	003 NotImplemented "Instruction CSET not yet implemented."
	004 And W31, W8, 0x4000
	005 NotImplemented "Instruction CSET not yet implemented."
	006 And W0, W9, W8
	007 Return X0

Method: System.Void set_RequiresSerInfoFixup(System.Boolean value)

Disassembly:
	0x032A52F4 CBZ X12, 0x32A5338
	0x032A52F8 LDR W13, [X12 + 0x18]
	0x032A52FC CMP W9, W13
	0x032A5300 B.CS 0x32A5344
	0x032A5304 ADD X11, X12, W9, 0x3, SXTW
	0x032A5308 LDR X11, [X11 + 0x20]
	0x032A530C ADDS X31, X11, 0x1
	0x032A5310 MOV W11, W9

ISIL:
	001 Move W8, [X0+80]
	002 And W31, W1, 1
	003 Move W9, 0x4000
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 And W8, W8, 0xFFFFBFFF
	006 Or W8, W8, W9
	007 Move [X0+80], W8
	008 Return 

Method: System.Runtime.Serialization.ValueTypeFixupInfo get_ValueFixup()

Disassembly:
	0x032A8054 BL 0x1C16CF4
	0x032A8058 MOVZ W8, 0x1

ISIL:
	001 Move X0, [X0+88]
	002 Return X0

Method: System.Boolean get_CompletelyFixed()

Disassembly:
	0x032A4B94 BL 0x3EB1AD0
	0x032A4B98 MOV X19, X0
	0x032A4B9C ADRP X0, 0xE5A000
	0x032A4BA0 LDR X0, [X0 + 0xA18]
	0x032A4BA4 BL 0x1C16D08
	0x032A4BA8 LDR X8, [X19]
	0x032A4BAC LDR X1, [X8]
	0x032A4BB0 BL 0x1C17270
	0x032A4BB4 TBZ X0, 0x0, 0x32A4BC0

ISIL:
	001 Move W8, [X0+80]
	002 And W31, W8, 6
	003 And W9, W8, 0x4000
	004 NotImplemented "Instruction CSET not yet implemented."
	005 And W31, W8, 1
	006 NotImplemented "Instruction CSET not yet implemented."
	007 Or W9, W10, W9
	008 And W0, W8, W9
	009 Return X0

Method: System.Int64 get_ContainerID()

Disassembly:
	0x032A7F58 MOV X1, X31
	0x032A7F5C BL 0x33BB908
	0x032A7F60 LDR X8, [X27]
	0x032A7F64 MOV X25, X0
	0x032A7F68 LDR W9, [X8 + 0xE0]
	0x032A7F6C CBNZ W9, 0x32A7F78

ISIL:
	001 Move X8, [X0+88]
	002 Compare X8, 0
	003 JumpIfEqual {6}
	004 Move X0, [X8+16]
	005 Return X0
	006 Move X0, X31
	007 Return X0

