Type: System.Runtime.Serialization.Formatters.Binary.SizedArray

Method: System.Void .ctor()

Disassembly:
	0x032BE9C4 BL 0x1C16CF4
	0x032BE9C8 MOVZ W8, 0x1
	0x032BE9CC STRB W8, [X21 + 0x8EA]
	0x032BE9D0 CMP X20, X19
	0x032BE9D4 B.EQ 0x32BEC9C
	0x032BE9D8 MOV W0, W31
	0x032BE9DC CBZ X20, 0x32BECA0
	0x032BE9E0 CBZ X19, 0x32BECA0
	0x032BE9E4 ADRP X23, 0xE35000
	0x032BE9E8 LDR X23, [X23 + 0x6C0]
	0x032BE9EC LDR X8, [X20]
	0x032BE9F0 LDR X0, [X23]
	0x032BE9F4 LDRB W10, [X8 + 0x130]
	0x032BE9F8 LDRB W9, [X0 + 0x130]
	0x032BE9FC CMP W10, W9
	0x032BEA00 B.CS 0x32BEA0C
	0x032BEA04 MOV X21, X31
	0x032BEA08 B 0x32BEA20
	0x032BEA0C LDR X8, [X8 + 0xC8]
	0x032BEA10 ADD X8, X8, X9, 0x3, LSL
	0x032BEA14 LDUR X8, [X8 - 0x8]
	0x032BEA18 CMP X8, X0
	0x032BEA1C CSEL X21, X20, X31, EQ
	0x032BEA20 LDR W8, [X0 + 0xE0]
	0x032BEA24 CBNZ W8, 0x32BEA2C
	0x032BEA28 BL 0x1C16DFC
	0x032BEA2C MOV X0, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x111F000
	006 Move X20, 0xE36000
	007 Move W8, [X21+2127]
	008 Move X20, [X20+2512]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE36000
	015 Move X0, [X0+2512]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2127], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call Object..ctor, X0
	022 Move X0, [X20]
	023 Move W1, 16
	024 Call 0x1C17D6C
	025 Move [X19+16], X0
	026 Move X0, [X20]
	027 Move W1, 4
	028 Call 0x1C17D6C
	029 Move [X19+24], X0
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return 

Method: System.Void .ctor(System.Int32 length)

Disassembly:
	0x032BEA30 MOV X1, X31
	0x032BEA34 MOV X2, X31
	0x032BEA38 BL 0x3395F0C
	0x032BEA3C TBZ X0, 0x0, 0x32BEAC0
	0x032BEA40 LDR X8, [X19]
	0x032BEA44 LDR X0, [X23]
	0x032BEA48 LDRB W10, [X8 + 0x130]
	0x032BEA4C LDRB W9, [X0 + 0x130]
	0x032BEA50 CMP W10, W9
	0x032BEA54 B.CS 0x32BEA60
	0x032BEA58 MOV X22, X31
	0x032BEA5C B 0x32BEA74
	0x032BEA60 LDR X8, [X8 + 0xC8]
	0x032BEA64 ADD X8, X8, X9, 0x3, LSL
	0x032BEA68 LDUR X8, [X8 - 0x8]
	0x032BEA6C CMP X8, X0
	0x032BEA70 CSEL X22, X19, X31, EQ
	0x032BEA74 LDR W8, [X0 + 0xE0]
	0x032BEA78 CBNZ W8, 0x32BEA80
	0x032BEA7C BL 0x1C16DFC
	0x032BEA80 MOV X0, X22
	0x032BEA84 MOV X1, X31
	0x032BEA88 MOV X2, X31
	0x032BEA8C BL 0x3395F0C
	0x032BEA90 TBZ X0, 0x0, 0x32BEAC0
	0x032BEA94 LDR X0, [X23]
	0x032BEA98 LDR W8, [X0 + 0xE0]
	0x032BEA9C CBNZ W8, 0x32BEAA4
	0x032BEAA0 BL 0x1C16DFC
	0x032BEAA4 MOV X0, X21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x111F000
	007 Move X21, 0xE36000
	008 Move W8, [X22+2128]
	009 Move X21, [X21+2512]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xE36000
	017 Move X0, [X0+2512]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2128], W8
	021 Move X0, X19
	022 Move X1, X31
	023 Call Object..ctor, X0
	024 Move X0, [X21]
	025 Move W1, W20
	026 Call 0x1C17D6C
	027 Move [X19+16], X0
	028 Move X0, [X21]
	029 Move W1, W20
	030 Call 0x1C17D6C
	031 Move [X19+24], X0
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move X30, [X31+48]
	037 Return 

Method: System.Void .ctor(System.Runtime.Serialization.Formatters.Binary.SizedArray sizedArray)

Disassembly:
	0x032BEAA8 MOV X1, X22
	0x032BEAAC LDP X20, X19, [X31 + 0x20]
	0x032BEAB0 LDP X22, X21, [X31 + 0x10]
	0x032BEAB4 MOV X2, X31
	0x032BEAB8 LDP X30, X23, [X31], #0x30
	0x032BEABC B 0x3395194
	0x032BEAC0 ADRP X22, 0xE65000
	0x032BEAC4 LDR X22, [X22 + 0xD78]
	0x032BEAC8 LDR X9, [X20]
	0x032BEACC LDR X8, [X22]
	0x032BEAD0 LDRB W11, [X9 + 0x130]
	0x032BEAD4 LDRB W10, [X8 + 0x130]
	0x032BEAD8 CMP W11, W10
	0x032BEADC B.CS 0x32BEAE8
	0x032BEAE0 MOV X21, X31
	0x032BEAE4 B 0x32BEAFC
	0x032BEAE8 LDR X9, [X9 + 0xC8]
	0x032BEAEC ADD X9, X9, X10, 0x3, LSL
	0x032BEAF0 LDUR X9, [X9 - 0x8]
	0x032BEAF4 CMP X9, X8
	0x032BEAF8 CSEL X21, X20, X31, EQ
	0x032BEAFC MOV X0, X21
	0x032BEB00 MOV X1, X31
	0x032BEB04 BL 0x32CE12C
	0x032BEB08 TBNZ X0, 0x0, 0x32BEB50
	0x032BEB0C LDR X9, [X19]
	0x032BEB10 LDR X8, [X22]
	0x032BEB14 LDRB W11, [X9 + 0x130]
	0x032BEB18 LDRB W10, [X8 + 0x130]
	0x032BEB1C CMP W11, W10
	0x032BEB20 B.CS 0x32BEB2C
	0x032BEB24 MOV X22, X31
	0x032BEB28 B 0x32BEB40
	0x032BEB2C LDR X9, [X9 + 0xC8]
	0x032BEB30 ADD X9, X9, X10, 0x3, LSL
	0x032BEB34 LDUR X9, [X9 - 0x8]
	0x032BEB38 CMP X9, X8
	0x032BEB3C CSEL X22, X19, X31, EQ
	0x032BEB40 MOV X0, X22
	0x032BEB44 MOV X1, X31
	0x032BEB48 BL 0x32CE12C
	0x032BEB4C TBZ X0, 0x0, 0x32BECB0
	0x032BEB50 ADRP X9, 0xE5E000
	0x032BEB54 LDR X9, [X9 + 0x3A8]
	0x032BEB58 LDR X8, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x111F000
	006 Move W8, [X21+2129]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xE36000
	014 Move X0, [X0+2512]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2129], W8
	018 Move X0, X20
	019 Move X1, X31
	020 Call Object..ctor, X0
	021 Compare X19, 0
	022 JumpIfEqual {58}
	023 Move X8, [X19+16]
	024 Compare X8, 0
	025 JumpIfEqual {58}
	026 Move X21, 0xE36000
	027 Move X21, [X21+2512]
	028 Move W1, [X8+24]
	029 Move X0, [X21]
	030 Call 0x1C17D6C
	031 Move [X20+16], X0
	032 Move X1, X0
	033 Move X0, [X19+16]
	034 Compare X0, 0
	035 JumpIfEqual {58}
	036 Move W2, W31
	037 Move X3, X31
	038 Call Array.CopyTo, X0, X1, X2
	039 Move X8, [X19+24]
	040 Compare X8, 0
	041 JumpIfEqual {58}
	042 Move X0, [X21]
	043 Move W1, [X8+24]
	044 Call 0x1C17D6C
	045 Move [X20+24], X0
	046 Move X1, X0
	047 Move X0, [X19+24]
	048 Compare X0, 0
	049 JumpIfEqual {58}
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move W2, W31
	053 Move X3, X31
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Call Array.CopyTo, X0, X1, X2
	057 Return 
	058 Call 0x1C17F20

Method: System.Object Clone()

Disassembly:
	0x032BEB5C LDR X10, [X9]
	0x032BEB60 LDRB W9, [X8 + 0x130]
	0x032BEB64 LDRB W11, [X10 + 0x130]
	0x032BEB68 CMP W9, W11
	0x032BEB6C B.CC 0x32BEBB0
	0x032BEB70 LDR X12, [X8 + 0xC8]
	0x032BEB74 ADD X12, X12, X11, 0x3, LSL
	0x032BEB78 LDUR X12, [X12 - 0x8]
	0x032BEB7C CMP X12, X10
	0x032BEB80 B.NE 0x32BEBB0
	0x032BEB84 CBZ X20, 0x32BEBB0
	0x032BEB88 LDR X12, [X19]
	0x032BEB8C LDRB W13, [X12 + 0x130]
	0x032BEB90 CMP W13, W11
	0x032BEB94 B.CC 0x32BEBB0
	0x032BEB98 LDR X12, [X12 + 0xC8]
	0x032BEB9C ADD X11, X12, X11, 0x3, LSL
	0x032BEBA0 LDUR X11, [X11 - 0x8]
	0x032BEBA4 CMP X11, X10
	0x032BEBA8 B.NE 0x32BEBB0
	0x032BEBAC CBNZ X19, 0x32BEC74
	0x032BEBB0 ADRP X10, 0xE67000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x111F000
	006 Move X21, 0xE68000
	007 Move W8, [X20+2130]
	008 Move X21, [X21+1288]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE68000
	015 Move X0, [X0+1288]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2130], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X19
	022 Move X20, X0
	023 Call SizedArray..ctor, X0, X1
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: System.Object get_Item(System.Int32 index)

Disassembly:
	0x032BEBB4 LDR X10, [X10 + 0x610]
	0x032BEBB8 LDR X10, [X10]
	0x032BEBBC LDRB W11, [X10 + 0x130]
	0x032BEBC0 CMP W9, W11
	0x032BEBC4 B.CS 0x32BEBE8
	0x032BEBC8 ADRP X10, 0xE5E000
	0x032BEBCC LDR X10, [X10 + 0x3F0]
	0x032BEBD0 LDR X10, [X10]
	0x032BEBD4 LDRB W11, [X10 + 0x130]
	0x032BEBD8 CMP W9, W11
	0x032BEBDC B.CS 0x32BEC2C
	0x032BEBE0 MOV W0, W31
	0x032BEBE4 B 0x32BECA0
	0x032BEBE8 LDR X12, [X8 + 0xC8]
	0x032BEBEC ADD X12, X12, X11, 0x3, LSL
	0x032BEBF0 LDUR X12, [X12 - 0x8]
	0x032BEBF4 CMP X12, X10
	0x032BEBF8 B.NE 0x32BEBC8
	0x032BEBFC CBZ X20, 0x32BEBC8
	0x032BEC00 LDR X12, [X19]
	0x032BEC04 LDRB W13, [X12 + 0x130]
	0x032BEC08 CMP W13, W11
	0x032BEC0C B.CC 0x32BEBC8
	0x032BEC10 LDR X12, [X12 + 0xC8]
	0x032BEC14 ADD X11, X12, X11, 0x3, LSL
	0x032BEC18 LDUR X11, [X11 - 0x8]
	0x032BEC1C CMP X11, X10
	0x032BEC20 B.NE 0x32BEBC8
	0x032BEC24 CBNZ X19, 0x32BEC74

ISIL:
	001 Move [X31-16], X30
	002 Move TEMP, X1
	003 And TEMP, TEMP, -2147483648
	004 Compare TEMP, -2147483648
	005 JumpIfEqual {14}
	006 Move X8, [X0+16]
	007 Compare X8, 0
	008 JumpIfEqual {27}
	009 Move W9, [X8+24]
	010 Subtract W10, W9, 1
	011 NotImplemented "Instruction CMP not yet implemented."
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Add X8, X8, W1
	014 Move X8, [X0+24]
	015 Compare X8, 0
	016 JumpIfEqual {27}
	017 Move W10, [X8+24]
	018 Subtract W9, W31, W1
	019 Subtract W11, W10, 1
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move X0, X31
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Add X8, X8, W9
	024 Move X0, [X8+32]
	025 Move X30, [X31+16]
	026 Return X0
	027 Call 0x1C17F20
	028 Call 0x1C17F28

Method: System.Void set_Item(System.Int32 index, System.Object value)

Disassembly:
	0x032BEC28 B 0x32BEBC8
	0x032BEC2C LDR X8, [X8 + 0xC8]
	0x032BEC30 MOV W0, W31
	0x032BEC34 ADD X8, X8, X11, 0x3, LSL
	0x032BEC38 LDUR X8, [X8 - 0x8]
	0x032BEC3C CMP X8, X10
	0x032BEC40 B.NE 0x32BECA0
	0x032BEC44 CBZ X20, 0x32BECA0
	0x032BEC48 LDR X8, [X19]
	0x032BEC4C LDRB W9, [X8 + 0x130]
	0x032BEC50 CMP W9, W11
	0x032BEC54 B.CC 0x32BEBE0
	0x032BEC58 LDR X8, [X8 + 0xC8]
	0x032BEC5C MOV W0, W31
	0x032BEC60 ADD X8, X8, X11, 0x3, LSL
	0x032BEC64 LDUR X8, [X8 - 0x8]
	0x032BEC68 CMP X8, X10
	0x032BEC6C B.NE 0x32BECA0
	0x032BEC70 CBZ X19, 0x32BECA0
	0x032BEC74 CMP X20, X19
	0x032BEC78 B.EQ 0x32BEC9C
	0x032BEC7C LDR X8, [X20]
	0x032BEC80 MOV X0, X20
	0x032BEC84 MOV X1, X19
	0x032BEC88 LDP X20, X19, [X31 + 0x20]
	0x032BEC8C LDP X3, X2, [X8 + 0x138]
	0x032BEC90 LDP X22, X21, [X31 + 0x10]
	0x032BEC94 LDP X30, X23, [X31], #0x30
	0x032BEC98 BR X3
	0x032BEC9C MOVZ W0, 0x1
	0x032BECA0 LDP X20, X19, [X31 + 0x20]
	0x032BECA4 LDP X22, X21, [X31 + 0x10]
	0x032BECA8 LDP X30, X23, [X31], #0x30
	0x032BECAC RET
	0x032BECB0 MOV X0, X21
	0x032BECB4 MOV X1, X22
	0x032BECB8 LDP X20, X19, [X31 + 0x20]
	0x032BECBC LDP X22, X21, [X31 + 0x10]
	0x032BECC0 LDP X30, X23, [X31], #0x30
	0x032BECC4 B 0x32CE12C
	0x032BECC8 STR X30, [X31 - 0x10]!
	0x032BECCC BL 0x32BE96C
	0x032BECD0 ORN W8, W31, W0, 0x0
	0x032BECD4 AND W0, W8, 0x1
	0x032BECD8 LDR X30, [X31], #0x10
	0x032BECDC RET
	0x032BECE0 MOV X1, X31
	0x032BECE4 B 0x33BDD8C
	0x032BECE8 MOV X1, X31
	0x032BECEC B 0x33BDD8C
	0x032BECF0 STR W31, [X0 + 0x40]
	0x032BECF4 STRB W31, [X0 + 0x44]
	0x032BECF8 STP X31, X31, [X0 + 0x18]
	0x032BECFC STR X31, [X0 + 0x10]
	0x032BED00 STR W31, [X0 + 0x28]
	0x032BED04 STR X31, [X0 + 0x30]
	0x032BED08 STUR X31, [X0 + 0x36]
	0x032BED0C RET
	0x032BED10 STP X30, X19, [X31 - 0x10]!
	0x032BED14 LDRB W8, [X0 + 0x44]
	0x032BED18 MOV X19, X0
	0x032BED1C CBZ W8, 0x32BED28
	0x032BED20 LDRB W8, [X19 + 0x38]
	0x032BED24 B 0x32BED48

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, X2
	008 Move W20, W1
	009 Move X21, X0
	010 Move TEMP, X1
	011 And TEMP, TEMP, -2147483648
	012 Compare TEMP, -2147483648
	013 JumpIfEqual {39}
	014 Move X22, [X21+16]
	015 Compare X22, 0
	016 JumpIfEqual {72}
	017 Move W8, [X22+24]
	018 Subtract W8, W8, 1
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X0, X21
	021 Move W1, W20
	022 Call SizedArray.IncreaseCapacity, X0, X1
	023 Move X22, [X21+16]
	024 Compare X22, 0
	025 JumpIfEqual {72}
	026 Move W8, [X22+24]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Compare X19, 0
	029 JumpIfEqual {37}
	030 Move X8, [X22]
	031 Move X0, X19
	032 Move X1, [X8+64]
	033 Call 0x1C17E00
	034 Compare X0, 0
	035 JumpIfEqual {73}
	036 Move W8, [X22+24]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Add X8, X22, W20
	039 Move X22, [X21+24]
	040 Compare X22, 0
	041 JumpIfEqual {72}
	042 Move W8, [X22+24]
	043 Subtract W23, W31, W20
	044 Subtract W8, W8, 1
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X0, X21
	047 Move W1, W20
	048 Call SizedArray.IncreaseCapacity, X0, X1
	049 Move X22, [X21+24]
	050 Compare X22, 0
	051 JumpIfEqual {72}
	052 Compare X19, 0
	053 JumpIfEqual {60}
	054 Move X8, [X22]
	055 Move X0, X19
	056 Move X1, [X8+64]
	057 Call 0x1C17E00
	058 Compare X0, 0
	059 JumpIfEqual {73}
	060 Move W8, [X22+24]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Add X8, X22, W23
	063 Move [X8+32], X19
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X22, [X31+16]
	067 Move X21, [X31+24]
	068 Move X30, [X31+48]
	069 Move X23, [X31+56]
	070 Return 
	071 Call 0x1C17F28
	072 Call 0x1C17F20
	073 Call 0x1C17F44
	074 Move X1, X31
	075 Call 0x1C17DEC

Method: System.Void IncreaseCapacity(System.Int32 index)

Disassembly:
	0x032BED28 LDR X0, [X19 + 0x30]
	0x032BED2C CBZ X0, 0x32BED58
	0x032BED30 MOV X1, X31
	0x032BED34 BL 0x339705C
	0x032BED38 AND W8, W0, 0x1
	0x032BED3C MOVZ W9, 0x1
	0x032BED40 STRB W8, [X19 + 0x38]
	0x032BED44 STRB W9, [X19 + 0x44]
	0x032BED48 CMP W8, 0x0
	0x032BED4C CSET W0, NE
	0x032BED50 LDP X30, X19, [X31], #0x10
	0x032BED54 RET
	0x032BED58 BL 0x1C16F20
	0x032BED5C STP X30, X19, [X31 - 0x10]!
	0x032BED60 MOV X19, X0
	0x032BED64 LDR X0, [X0 + 0x10]
	0x032BED68 CBNZ X0, 0x32BED88
	0x032BED6C LDR X0, [X19 + 0x30]
	0x032BED70 CBZ X0, 0x32BED90
	0x032BED74 LDR X8, [X0]
	0x032BED78 LDR X9, [X8 + 0x2E8]
	0x032BED7C LDR X1, [X8 + 0x2F0]
	0x032BED80 BLR X9
	0x032BED84 STR X0, [X19 + 0x10]
	0x032BED88 LDP X30, X19, [X31], #0x10
	0x032BED8C RET
	0x032BED90 BL 0x1C16F20
	0x032BED94 STR X1, [X0 + 0x10]
	0x032BED98 RET
	0x032BED9C STP X30, X21, [X31 - 0x20]!
	0x032BEDA0 STP X20, X19, [X31 + 0x10]
	0x032BEDA4 MOV W20, W1
	0x032BEDA8 MOV X1, X31
	0x032BEDAC MOV X19, X2
	0x032BEDB0 MOV X21, X0
	0x032BEDB4 BL 0x33BDD8C
	0x032BEDB8 MOV W1, W20
	0x032BEDBC MOV X2, X19
	0x032BEDC0 LDP X20, X19, [X31 + 0x10]
	0x032BEDC4 MOV X0, X21
	0x032BEDC8 LDP X30, X21, [X31], #0x20
	0x032BEDCC B 0x32BEDD0
	0x032BEDD0 STR X30, [X31 - 0x30]!
	0x032BEDD4 STP X22, X21, [X31 + 0x10]
	0x032BEDD8 STP X20, X19, [X31 + 0x20]
	0x032BEDDC ADRP X22, 0x111E000
	0x032BEDE0 LDRB W8, [X22 + 0x85C]
	0x032BEDE4 MOV X19, X2
	0x032BEDE8 MOV W21, W1
	0x032BEDEC MOV X20, X0
	0x032BEDF0 TBNZ X8, 0x0, 0x32BEE80
	0x032BEDF4 ADRP X0, 0xE37000
	0x032BEDF8 LDR X0, [X0 + 0x9B8]
	0x032BEDFC BL 0x1C16CF4
	0x032BEE00 ADRP X0, 0xE3E000
	0x032BEE04 LDR X0, [X0 + 0x8D8]
	0x032BEE08 BL 0x1C16CF4
	0x032BEE0C ADRP X0, 0xE66000
	0x032BEE10 LDR X0, [X0 + 0x830]
	0x032BEE14 BL 0x1C16CF4
	0x032BEE18 ADRP X0, 0xE5D000
	0x032BEE1C LDR X0, [X0 + 0x820]
	0x032BEE20 BL 0x1C16CF4
	0x032BEE24 ADRP X0, 0xE36000
	0x032BEE28 LDR X0, [X0 + 0xE58]
	0x032BEE2C BL 0x1C16CF4
	0x032BEE30 ADRP X0, 0xE66000
	0x032BEE34 LDR X0, [X0 + 0x838]
	0x032BEE38 BL 0x1C16CF4
	0x032BEE3C ADRP X0, 0xE64000
	0x032BEE40 LDR X0, [X0 + 0x708]
	0x032BEE44 BL 0x1C16CF4
	0x032BEE48 ADRP X0, 0xE35000
	0x032BEE4C LDR X0, [X0 + 0x638]
	0x032BEE50 BL 0x1C16CF4
	0x032BEE54 ADRP X0, 0xE65000
	0x032BEE58 LDR X0, [X0 + 0x8D0]
	0x032BEE5C BL 0x1C16CF4
	0x032BEE60 ADRP X0, 0xE5E000
	0x032BEE64 LDR X0, [X0 + 0xD08]
	0x032BEE68 BL 0x1C16CF4
	0x032BEE6C ADRP X0, 0xE3D000
	0x032BEE70 LDR X0, [X0 + 0x568]
	0x032BEE74 BL 0x1C16CF4
	0x032BEE78 MOVZ W8, 0x1
	0x032BEE7C STRB W8, [X22 + 0x85C]
	0x032BEE80 SUB W8, W21, 0x1
	0x032BEE84 CMP W8, 0xF
	0x032BEE88 STR W21, [X20 + 0x10]
	0x032BEE8C B.HI 0x32BF070
	0x032BEE90 ADRP X9, 0xFFFFFFFFFD8D8000
	0x032BEE94 ADD X9, X9, 0x590
	0x032BEE98 ADR X10, 0x10
	0x032BEE9C LDRB W11, [X9, X8, LSL]
	0x032BEEA0 ADD X10, X10, X11, 0x2, LSL
	0x032BEEA4 BR X10
	0x032BEEA8 CBZ X19, 0x32BF080
	0x032BEEAC ADRP X22, 0xE37000
	0x032BEEB0 LDR X22, [X22 + 0x9B8]
	0x032BEEB4 MOV X0, X19
	0x032BEEB8 LDR X21, [X22]
	0x032BEEBC MOV X1, X21
	0x032BEEC0 BL 0x1C16E00
	0x032BEEC4 CBZ X0, 0x32BF0D8
	0x032BEEC8 STR X0, [X20 + 0x18]
	0x032BEECC B 0x32BF05C
	0x032BEED0 CBZ X19, 0x32BF088
	0x032BEED4 ADRP X22, 0xE3E000
	0x032BEED8 LDR X22, [X22 + 0x8D8]
	0x032BEEDC MOV X0, X19
	0x032BEEE0 LDR X21, [X22]
	0x032BEEE4 MOV X1, X21
	0x032BEEE8 BL 0x1C16E00
	0x032BEEEC CBZ X0, 0x32BF0D8
	0x032BEEF0 STR X0, [X20 + 0x20]
	0x032BEEF4 B 0x32BF05C
	0x032BEEF8 CBZ X19, 0x32BF090
	0x032BEEFC ADRP X22, 0xE66000
	0x032BEF00 LDR X22, [X22 + 0x830]
	0x032BEF04 MOV X0, X19
	0x032BEF08 LDR X21, [X22]
	0x032BEF0C MOV X1, X21
	0x032BEF10 BL 0x1C16E00
	0x032BEF14 CBZ X0, 0x32BF0D8
	0x032BEF18 STR X0, [X20 + 0x28]
	0x032BEF1C B 0x32BF05C
	0x032BEF20 CBZ X19, 0x32BF098
	0x032BEF24 ADRP X22, 0xE5D000
	0x032BEF28 LDR X22, [X22 + 0x820]
	0x032BEF2C MOV X0, X19
	0x032BEF30 LDR X21, [X22]
	0x032BEF34 MOV X1, X21
	0x032BEF38 BL 0x1C16E00
	0x032BEF3C CBZ X0, 0x32BF0D8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x111F000
	007 Move W8, [X21+2131]
	008 Move W20, W1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xE36000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move X0, 0xE36000
	018 Move X0, [X0+2512]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+2131], W8
	022 Move X8, 0xE36000
	023 Move X21, 0xE36000
	024 Move X8, [X8+1448]
	025 Move X21, [X21+2512]
	026 Move TEMP, X20
	027 And TEMP, TEMP, -2147483648
	028 Compare TEMP, -2147483648
	029 JumpIfEqual {59}
	030 Add X19, X19, 16
	031 Move X22, [X19]
	032 Compare X22, 0
	033 JumpIfEqual {96}
	034 Move X0, [X8]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move W8, [X22+24]
	040 Add W1, W20, 1
	041 Move W0, W8
	042 ShiftRight W0, 31
	043 And W0, W0, 0x3FFFFFFF
	044 Move X2, X31
	045 Call Math.Max, X0, X1
	046 Move W1, W0
	047 Move X0, [X21]
	048 Call 0x1C17D6C
	049 Move X20, X0
	050 Move X0, [X19]
	051 Compare X0, 0
	052 JumpIfEqual {97}
	053 Move W4, [X0+24]
	054 Move W1, W31
	055 Move X2, X20
	056 Move W3, W31
	057 Move X5, X31
	058 Call Array.Copy, X0, X1, X2, X3, X4
	059 Add X19, X19, 24
	060 Move X22, [X19]
	061 Compare X22, 0
	062 JumpIfEqual {98}
	063 Move X0, [X8]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move W8, [X22+24]
	069 Move W9, 1
	070 Subtract W1, W9, W20
	071 Move W0, W8
	072 ShiftRight W0, 31
	073 And W0, W0, 0x3FFFFFFF
	074 Move X2, X31
	075 Call Math.Max, X0, X1
	076 Move W1, W0
	077 Move X0, [X21]
	078 Call 0x1C17D6C
	079 Move X20, X0
	080 Move X0, [X19]
	081 Compare X0, 0
	082 JumpIfEqual {99}
	083 Move W4, [X0+24]
	084 Move W1, W31
	085 Move X2, X20
	086 Move W3, W31
	087 Move X5, X31
	088 Call Array.Copy, X0, X1, X2, X3, X4
	089 Move [X19], X20
	090 Move X20, [X31+32]
	091 Move X19, [X31+40]
	092 Move X22, [X31+16]
	093 Move X21, [X31+24]
	094 Move X30, [X31+48]
	095 Return 
	096 Call 0x1C17F20
	097 Call 0x1C17F20
	098 Call 0x1C17F20
	099 Call 0x1C17F20
	100 Move X19, X0
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move X0, X19
	103 Call 0x3EB2AD0
	104 Move X19, X0
	105 Move X0, 0xE36000
	106 Move X0, [X0+2000]
	107 Call 0x1C17D08
	108 Move X8, [X19]
	109 Move X1, [X8]
	110 Call 0x1C18270
	111 Move TEMP, X0
	112 And TEMP, TEMP, 1
	113 Compare TEMP, 1
	114 JumpIfNotEqual {136}
	115 Call 0x3EB2AE0
	116 Move X0, 0xE66000
	117 Move X0, [X0+3304]
	118 Call 0x1C17D08
	119 Move X1, X31
	120 Call Environment.GetResourceString, X0
	121 Move X19, X0
	122 Move X0, 0xE60000
	123 Move X0, [X0+736]
	124 Call 0x1C17D08
	125 Call 0x1C17F10
	126 Move X1, X19
	127 Move X2, X31
	128 Move X20, X0
	129 Call SerializationException..ctor, X0, X1
	130 Move X0, 0xE68000
	131 Move X0, [X0+1480]
	132 Call 0x1C17D08
	133 Move X1, X0
	134 Move X0, X20
	135 Call 0x1C17DEC
	136 Move W0, 8
	137 Call 0x3EB2AF0
	138 Move X8, [X19]
	139 Move [X0], X8
	140 Move X1, 0xBF7000
	141 Add X1, X1, 3672
	142 Move X2, X31
	143 Call 0x3EB2B00
	144 Move X19, X0
	145 Call 0x3EB2AE0
	146 Move X0, X19
	147 Call 0x1D2D690
	148 Call 0x1991590

