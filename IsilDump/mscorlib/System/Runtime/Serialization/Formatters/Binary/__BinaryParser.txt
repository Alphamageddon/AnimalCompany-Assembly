Type: System.Runtime.Serialization.Formatters.Binary.__BinaryParser

Method: System.Void .ctor(System.IO.Stream stream, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader)

Disassembly:
	0x032B1CEC LDR X9, [X31 + 0x18]
	0x032B1CF0 CMP X8, X9
	0x032B1CF4 B.NE 0x32B1D10
	0x032B1CF8 LDP X20, X19, [X31 + 0x40]
	0x032B1CFC LDP X22, X21, [X31 + 0x30]
	0x032B1D00 LDR X30, [X31 + 0x20]
	0x032B1D04 ADD X31, X31, 0x50
	0x032B1D08 RET
	0x032B1D0C BL 0x1C16F20
	0x032B1D10 BL 0x3EB1B20
	0x032B1D14 STR X30, [X31 - 0x10]!
	0x032B1D18 LDR X0, [X0 + 0x30]
	0x032B1D1C CBZ X0, 0x32B1D34
	0x032B1D20 LDR X8, [X0]
	0x032B1D24 LDR X2, [X8 + 0x288]
	0x032B1D28 LDR X1, [X8 + 0x290]
	0x032B1D2C LDR X30, [X31], #0x10
	0x032B1D30 BR X2
	0x032B1D34 BL 0x1C16F20
	0x032B1D38 STR X30, [X31 - 0x10]!
	0x032B1D3C LDR X0, [X0 + 0x30]
	0x032B1D40 CBZ X0, 0x32B1D58
	0x032B1D44 LDR X8, [X0]
	0x032B1D48 LDR X2, [X8 + 0x218]
	0x032B1D4C LDR X1, [X8 + 0x220]
	0x032B1D50 LDR X30, [X31], #0x10
	0x032B1D54 BR X2
	0x032B1D58 BL 0x1C16F20
	0x032B1D5C STR X30, [X31 - 0x10]!
	0x032B1D60 LDR X0, [X0 + 0x30]
	0x032B1D64 CBZ X0, 0x32B1D7C
	0x032B1D68 LDR X8, [X0]
	0x032B1D6C LDR X3, [X8 + 0x228]
	0x032B1D70 LDR X2, [X8 + 0x230]
	0x032B1D74 LDR X30, [X31], #0x10
	0x032B1D78 BR X3
	0x032B1D7C BL 0x1C16F20
	0x032B1D80 STR X30, [X31 - 0x10]!
	0x032B1D84 LDR X0, [X0 + 0x30]
	0x032B1D88 CBZ X0, 0x32B1DA0
	0x032B1D8C LDR X8, [X0]
	0x032B1D90 LDR X3, [X8 + 0x268]
	0x032B1D94 LDR X2, [X8 + 0x270]
	0x032B1D98 LDR X30, [X31], #0x10
	0x032B1D9C BR X3
	0x032B1DA0 BL 0x1C16F20
	0x032B1DA4 STR X30, [X31 - 0x10]!
	0x032B1DA8 LDR X0, [X0 + 0x30]
	0x032B1DAC CBZ X0, 0x32B1DC0
	0x032B1DB0 LDR X8, [X0]
	0x032B1DB4 LDP X3, X2, [X8 + 0x1C8]
	0x032B1DB8 LDR X30, [X31], #0x10
	0x032B1DBC BR X3
	0x032B1DC0 BL 0x1C16F20
	0x032B1DC4 STR X30, [X31 - 0x30]!
	0x032B1DC8 STP X22, X21, [X31 + 0x10]
	0x032B1DCC STP X20, X19, [X31 + 0x20]
	0x032B1DD0 ADRP X21, 0x112B000
	0x032B1DD4 ADRP X22, 0xE44000
	0x032B1DD8 LDRB W8, [X21 + 0x7EA]
	0x032B1DDC LDR X22, [X22 + 0x570]
	0x032B1DE0 MOV X19, X1
	0x032B1DE4 MOV X20, X0
	0x032B1DE8 TBNZ X8, 0x0, 0x32B1E00
	0x032B1DEC ADRP X0, 0xE44000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0x112C000
	010 Move X24, 0xE75000
	011 Move X22, 0xE75000
	012 Move X23, 0xE75000
	013 Move W8, [X25+2096]
	014 Move X24, [X24+504]
	015 Move X22, [X22+512]
	016 Move X23, [X23+440]
	017 Move X21, X2
	018 Move X20, X1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {38}
	024 Move X0, 0xE75000
	025 Move X0, [X0+520]
	026 Call 0x1C17CF4
	027 Move X0, 0xE75000
	028 Move X0, [X0+504]
	029 Call 0x1C17CF4
	030 Move X0, 0xE75000
	031 Move X0, [X0+440]
	032 Call 0x1C17CF4
	033 Move X0, 0xE75000
	034 Move X0, [X0+512]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X25+2096], W8
	038 Move X0, [X24]
	039 Move X24, 0xE75000
	040 Move X24, [X24+520]
	041 Call 0x1C17F10
	042 Move X1, [X22]
	043 Move X2, X31
	044 Move X22, X0
	045 Call SerStack..ctor, X0, X1
	046 Move W8, 3
	047 Move X0, X19
	048 Move X1, X31
	049 Move [X19+64], X22
	050 Move [X19+72], W8
	051 Call Object..ctor, X0
	052 Move [X19+16], X21
	053 Move [X19+24], X20
	054 Move X0, [X23]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {60}
	058 Call 0x1C17DFC
	059 Move X0, [X23]
	060 Move X8, [X0+184]
	061 Move X0, [X24]
	062 Move X21, [X8]
	063 Call 0x1C17F10
	064 Move X1, X20
	065 Move X2, X21
	066 Move X3, X31
	067 Move X22, X0
	068 Call BinaryReader..ctor, X0, X1, X2
	069 Move [X19+104], X22
	070 Move X20, [X31+48]
	071 Move X19, [X31+56]
	072 Move X22, [X31+32]
	073 Move X21, [X31+40]
	074 Move X24, [X31+16]
	075 Move X23, [X31+24]
	076 Move X30, [X31+64]
	077 Move X25, [X31+72]
	078 Return 

Method: System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo get_SystemAssemblyInfo()

Disassembly:
	0x032BB790 STP X22, X21, [X31 + 0x20]
	0x032BB794 STP X20, X19, [X31 + 0x30]
	0x032BB798 ADRP X21, 0x1121000
	0x032BB79C ADRP X22, 0xE6A000
	0x032BB7A0 LDRB W8, [X21 + 0x842]
	0x032BB7A4 LDR X22, [X22 + 0x308]
	0x032BB7A8 MOV W20, W1
	0x032BB7AC MOV X19, X0
	0x032BB7B0 TBNZ X8, 0x0, 0x32BB7F8
	0x032BB7B4 ADRP X0, 0xE6A000
	0x032BB7B8 LDR X0, [X0 + 0x308]
	0x032BB7BC BL 0x1C16CF4
	0x032BB7C0 ADRP X0, 0xE6A000
	0x032BB7C4 LDR X0, [X0 + 0x38]
	0x032BB7C8 BL 0x1C16CF4
	0x032BB7CC ADRP X0, 0xE69000
	0x032BB7D0 LDR X0, [X0 + 0xF80]
	0x032BB7D4 BL 0x1C16CF4
	0x032BB7D8 ADRP X0, 0xE6A000
	0x032BB7DC LDR X0, [X0 + 0x68]
	0x032BB7E0 BL 0x1C16CF4
	0x032BB7E4 ADRP X0, 0xE6A000
	0x032BB7E8 LDR X0, [X0 + 0x580]
	0x032BB7EC BL 0x1C16CF4
	0x032BB7F0 MOVZ W8, 0x1
	0x032BB7F4 STRB W8, [X21 + 0x842]
	0x032BB7F8 LDR X0, [X22]
	0x032BB7FC BL 0x1C16F10
	0x032BB800 MOV X1, X31
	0x032BB804 MOV X21, X0
	0x032BB808 BL 0x33BDD8C
	0x032BB80C MOV X0, X21
	0x032BB810 MOV X1, X19
	0x032BB814 STR W20, [X21 + 0x3C]
	0x032BB818 BL 0x32ADBBC
	0x032BB81C LDR W8, [X21 + 0x28]
	0x032BB820 CMP W8, 0x4
	0x032BB824 B.NE 0x32BB874
	0x032BB828 LDR W8, [X21 + 0x38]
	0x032BB82C CMP W8, 0x0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x1122000
	007 Move W8, [X20+2097]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xE6B000
	014 Move X0, [X0+56]
	015 Call 0x1C17CF4
	016 Move X0, 0xE6A000
	017 Move X0, [X0+3968]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+2097], W8
	021 Move X20, [X19+96]
	022 Compare X20, 0
	023 JumpIfNotEqual {45}
	024 Move X20, 0xE6A000
	025 Move X20, [X20+3968]
	026 Move X0, [X20]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X20]
	032 Move X9, 0xE6B000
	033 Move X8, [X0+184]
	034 Move X9, [X9+56]
	035 Move X22, [X8+208]
	036 Move X21, [X8+216]
	037 Move X0, [X9]
	038 Call 0x1C17F10
	039 Move X1, X31
	040 Move X20, X0
	041 Call Object..ctor, X0
	042 Move [X20+16], X21
	043 Move [X20+24], X22
	044 Move [X19+96], X20
	045 Move X0, X20
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X30, [X31+48]
	051 Return X0

Method: System.Runtime.Serialization.Formatters.Binary.SizedArray get_ObjectMapIdTable()

Disassembly:
	0x032BB830 B.LE 0x32BBB5C
	0x032BB834 MOV X0, X19
	0x032BB838 BL 0x32BA894
	0x032BB83C CBZ X0, 0x32BBB50
	0x032BB840 LDR W1, [X21 + 0x38]
	0x032BB844 MOV X2, X31
	0x032BB848 BL 0x32BDBB4
	0x032BB84C MOV X23, X0
	0x032BB850 CBZ X0, 0x32BB880
	0x032BB854 ADRP X8, 0xE6A000
	0x032BB858 LDR X8, [X8 + 0x38]
	0x032BB85C LDR X1, [X8]
	0x032BB860 LDR X8, [X23]
	0x032BB864 CMP X8, X1
	0x032BB868 B.EQ 0x32BB880
	0x032BB86C MOV X0, X23
	0x032BB870 BL 0x1C171E0
	0x032BB874 MOV X0, X19
	0x032BB878 BL 0x32BA790
	0x032BB87C MOV X23, X0
	0x032BB880 MOV X0, X19
	0x032BB884 BL 0x32BCAD0
	0x032BB888 CBZ X0, 0x32BBB50
	0x032BB88C MOVZ W8, 0x2
	0x032BB890 STR W8, [X0 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1122000
	005 Move W8, [X20+2098]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE6B000
	012 Move X0, [X0+1288]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2098], W8
	016 Move X20, [X19+48]
	017 Compare X20, 0
	018 JumpIfNotEqual {27}
	019 Move X8, 0xE6B000
	020 Move X8, [X8+1288]
	021 Move X0, [X8]
	022 Call 0x1C17F10
	023 Move X1, X31
	024 Move X20, X0
	025 Call SizedArray..ctor, X0
	026 Move [X19+48], X20
	027 Move X0, X20
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return X0

Method: System.Runtime.Serialization.Formatters.Binary.SizedArray get_AssemIdToAssemblyTable()

Disassembly:
	0x032BB894 LDR W8, [X21 + 0x28]
	0x032BB898 MOV X22, X0
	0x032BB89C STR W8, [X0 + 0x4C]
	0x032BB8A0 LDR X8, [X21 + 0x30]
	0x032BB8A4 STR X8, [X0 + 0x50]
	0x032BB8A8 LDR X0, [X19 + 0x40]
	0x032BB8AC LDR X20, [X22 + 0x80]
	0x032BB8B0 CBZ X0, 0x32BBB50
	0x032BB8B4 MOV X1, X31
	0x032BB8B8 BL 0x32BD970
	0x032BB8BC CBZ X0, 0x32BB8E4
	0x032BB8C0 ADRP X8, 0xE6A000
	0x032BB8C4 LDR X8, [X8 + 0x68]
	0x032BB8C8 LDR X1, [X8]
	0x032BB8CC LDR X8, [X0]
	0x032BB8D0 CMP X8, X1
	0x032BB8D4 B.NE 0x32BBB58
	0x032BB8D8 LDR W8, [X21 + 0x10]
	0x032BB8DC CMP W8, 0x1
	0x032BB8E0 B.LT 0x32BBAB0
	0x032BB8E4 ADRP X8, 0xE6A000
	0x032BB8E8 LDR X8, [X8 + 0x580]
	0x032BB8EC LDR X8, [X8]
	0x032BB8F0 STR X8, [X22 + 0x28]
	0x032BB8F4 CBZ X20, 0x32BBB50
	0x032BB8F8 MOVZ W8, 0x2

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1122000
	005 Move W8, [X20+2099]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE6B000
	012 Move X0, [X0+1288]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2099], W8
	016 Move X20, [X19+56]
	017 Compare X20, 0
	018 JumpIfNotEqual {28}
	019 Move X8, 0xE6B000
	020 Move X8, [X8+1288]
	021 Move X0, [X8]
	022 Call 0x1C17F10
	023 Move W1, 2
	024 Move X2, X31
	025 Move X20, X0
	026 Call SizedArray..ctor, X0, X1
	027 Move [X19+56], X20
	028 Move X0, X20
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Return X0

Method: System.Runtime.Serialization.Formatters.Binary.ParseRecord get_prs()

Disassembly:
	0x032BB8FC STR W8, [X20 + 0x10]
	0x032BB900 STR W31, [X22 + 0x38]
	0x032BB904 LDR X0, [X19 + 0x10]
	0x032BB908 CBZ X0, 0x32BBB50
	0x032BB90C LDRSW X1, [X21 + 0x10]
	0x032BB910 BL 0x32B7F2C
	0x032BB914 STR X0, [X20 + 0x58]
	0x032BB918 LDR X8, [X19 + 0x20]
	0x032BB91C CMP X0, X8
	0x032BB920 B.NE 0x32BB92C
	0x032BB924 MOVZ W8, 0x1
	0x032BB928 B 0x32BB94C
	0x032BB92C LDR X8, [X19 + 0x28]
	0x032BB930 CMP X8, 0x1
	0x032BB934 B.LT 0x32BB948
	0x032BB938 CMP X0, X8
	0x032BB93C B.NE 0x32BB948
	0x032BB940 MOVZ W8, 0x3
	0x032BB944 B 0x32BB94C
	0x032BB948 MOVZ W8, 0x2
	0x032BB94C STR W8, [X20 + 0x24]
	0x032BB950 MOVZ W8, 0x2
	0x032BB954 STR W8, [X20 + 0x14]
	0x032BB958 LDR W0, [X21 + 0x28]
	0x032BB95C LDR X1, [X21 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1122000
	005 Move W8, [X20+2100]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE6B000
	012 Move X0, [X0+96]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2100], W8
	016 Move X20, [X19+88]
	017 Compare X20, 0
	018 JumpIfNotEqual {27}
	019 Move X8, 0xE6B000
	020 Move X8, [X8+96]
	021 Move X0, [X8]
	022 Call 0x1C17F10
	023 Move X1, X31
	024 Move X20, X0
	025 Call ParseRecord..ctor, X0
	026 Move [X19+88], X20
	027 Move X0, X20
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return X0

Method: System.Void Run()

Disassembly:
	0x032B67D0 LDR X8, [X19 + 0x48]
	0x032B67D4 CBZ X8, 0x32B6870
	0x032B67D8 LDR W8, [X19 + 0x20]
	0x032B67DC SUB W8, W8, 0x1
	0x032B67E0 CMP W8, 0x3
	0x032B67E4 B.HI 0x32B6B38
	0x032B67E8 ADRP X9, 0xFFFFFFFFFD8E0000
	0x032B67EC ADD X9, X9, 0x548
	0x032B67F0 ADR X10, 0x10
	0x032B67F4 LDRB W11, [X9, X8, LSL]
	0x032B67F8 ADD X10, X10, X11, 0x2, LSL
	0x032B67FC BR X10
	0x032B6800 ADRP X23, 0xE6E000
	0x032B6804 LDR X23, [X23 + 0xF80]
	0x032B6808 LDR X22, [X19 + 0x48]
	0x032B680C LDR X0, [X23]
	0x032B6810 LDR W8, [X0 + 0xE0]
	0x032B6814 CBNZ W8, 0x32B6820
	0x032B6818 BL 0x1C16DFC
	0x032B681C LDR X0, [X23]
	0x032B6820 LDR X8, [X0 + 0xB8]
	0x032B6824 LDR X9, [X8 + 0x38]
	0x032B6828 CMP X22, X9
	0x032B682C B.EQ 0x32B69FC
	0x032B6830 LDR W22, [X19 + 0x50]
	0x032B6834 CBZ W22, 0x32B6A38
	0x032B6838 LDR X2, [X19 + 0x38]
	0x032B683C CBNZ X2, 0x32B6860
	0x032B6840 LDR W8, [X0 + 0xE0]
	0x032B6844 LDR X21, [X19 + 0x30]
	0x032B6848 CBNZ W8, 0x32B6850
	0x032B684C BL 0x1C16DFC
	0x032B6850 MOV X0, X21
	0x032B6854 MOV W1, W22
	0x032B6858 BL 0x32B00A0
	0x032B685C MOV X2, X0
	0x032B6860 CBZ X20, 0x32B6B2C
	0x032B6864 LDR X0, [X20 + 0xD8]
	0x032B6868 CBNZ X0, 0x32B6A1C
	0x032B686C B 0x32B6B2C
	0x032B6870 CBZ X20, 0x32B6B2C
	0x032B6874 LDR X0, [X20 + 0xD8]
	0x032B6878 CBZ X0, 0x32B6B2C
	0x032B687C LDRB W8, [X0 + 0x2E]
	0x032B6880 CBZ W8, 0x32B67D8
	0x032B6884 LDR X1, [X19 + 0x28]
	0x032B6888 BL 0x32B5304
	0x032B688C STR X0, [X19 + 0x48]
	0x032B6890 CBZ X0, 0x32B67D8
	0x032B6894 ADRP X8, 0xE6E000
	0x032B6898 LDR X8, [X8 + 0xF80]
	0x032B689C MOV X22, X0
	0x032B68A0 LDR X0, [X8]
	0x032B68A4 LDR W8, [X0 + 0xE0]
	0x032B68A8 CBNZ W8, 0x32B68B0
	0x032B68AC BL 0x1C16DFC
	0x032B68B0 MOV X0, X22
	0x032B68B4 BL 0x32AAA24
	0x032B68B8 STR W0, [X19 + 0x50]
	0x032B68BC B 0x32B67D8
	0x032B68C0 MOV X0, X21
	0x032B68C4 MOV X1, X19
	0x032B68C8 BL 0x32B61E4
	0x032B68CC LDR X0, [X21 + 0x88]
	0x032B68D0 CBZ X0, 0x32B6B2C
	0x032B68D4 MOV X1, X19
	0x032B68D8 MOV X2, X31
	0x032B68DC BL 0x32BD7AC
	0x032B68E0 LDR X8, [X19 + 0xD8]
	0x032B68E4 CBZ X8, 0x32B69E8
	0x032B68E8 LDR X0, [X8 + 0x18]
	0x032B68EC CBZ X0, 0x32B69E8
	0x032B68F0 MOV X1, X31
	0x032B68F4 BL 0x33970C4
	0x032B68F8 TBZ X0, 0x0, 0x32B69E8
	0x032B68FC MOVZ W8, 0x1
	0x032B6900 MOV X0, X21
	0x032B6904 STRB W8, [X19 + 0xE0]
	0x032B6908 BL 0x32B5738
	0x032B690C CBZ X20, 0x32B6B2C
	0x032B6910 ADRP X8, 0xE6F000
	0x032B6914 LDR X22, [X20 + 0xE8]
	0x032B6918 LDR X23, [X19 + 0x28]
	0x032B691C LDR X20, [X20 + 0xD8]
	0x032B6920 LDR X8, [X8 + 0x418]
	0x032B6924 MOV X21, X0
	0x032B6928 LDR X0, [X8]
	0x032B692C BL 0x1C16F10
	0x032B6930 MOV X1, X22
	0x032B6934 MOV X2, X23
	0x032B6938 MOV X3, X20
	0x032B693C MOV X4, X31
	0x032B6940 MOV X19, X0
	0x032B6944 BL 0x32BE624
	0x032B6948 CBZ X21, 0x32B6B2C
	0x032B694C MOV X0, X21
	0x032B6950 MOV X1, X19
	0x032B6954 LDP X20, X19, [X31 + 0x20]
	0x032B6958 LDP X22, X21, [X31 + 0x10]
	0x032B695C MOV X2, X31
	0x032B6960 LDP X30, X23, [X31], #0x30
	0x032B6964 B 0x32BD7AC
	0x032B6968 LDR X0, [X21 + 0x30]
	0x032B696C CBZ X0, 0x32B6B2C
	0x032B6970 LDR X8, [X0]
	0x032B6974 LDR X1, [X19 + 0x60]
	0x032B6978 LDP X9, X2, [X8 + 0x178]
	0x032B697C BLR X9
	0x032B6980 CBZ X20, 0x32B6B2C
	0x032B6984 MOV X2, X0
	0x032B6988 LDR X0, [X20 + 0xD8]
	0x032B698C CBZ X0, 0x32B6B2C
	0x032B6990 LDR X1, [X19 + 0x28]
	0x032B6994 ADD X3, X20, 0x110
	0x032B6998 ADD X4, X20, 0x108
	0x032B699C CBNZ X2, 0x32B6A28
	0x032B69A0 BL 0x32B5498
	0x032B69A4 LDR X0, [X20 + 0xD8]
	0x032B69A8 CBZ X0, 0x32B6B2C
	0x032B69AC LDR X3, [X19 + 0x60]
	0x032B69B0 LDR X2, [X19 + 0x28]
	0x032B69B4 LDR X1, [X20 + 0x58]
	0x032B69B8 LDP X20, X19, [X31 + 0x20]
	0x032B69BC LDP X22, X21, [X31 + 0x10]
	0x032B69C0 LDP X30, X23, [X31], #0x30
	0x032B69C4 B 0x32B552C
	0x032B69C8 CBZ X20, 0x32B6B2C
	0x032B69CC LDR X0, [X20 + 0xD8]
	0x032B69D0 CBZ X0, 0x32B6B2C
	0x032B69D4 LDR X1, [X19 + 0x28]
	0x032B69D8 ADD X4, X20, 0x108
	0x032B69DC ADD X3, X20, 0x110
	0x032B69E0 MOV X2, X31
	0x032B69E4 B 0x32B6A28
	0x032B69E8 CBZ X20, 0x32B6B2C
	0x032B69EC LDR X0, [X20 + 0xD8]
	0x032B69F0 CBZ X0, 0x32B6B2C
	0x032B69F4 LDR X2, [X19 + 0xE8]
	0x032B69F8 B 0x32B6A1C
	0x032B69FC MOV X0, X21
	0x032B6A00 MOV X1, X19
	0x032B6A04 MOV X2, X20
	0x032B6A08 BL 0x32B7DA4
	0x032B6A0C CBZ X20, 0x32B6B2C
	0x032B6A10 LDR X0, [X20 + 0xD8]
	0x032B6A14 CBZ X0, 0x32B6B2C
	0x032B6A18 LDR X2, [X19 + 0x30]
	0x032B6A1C LDR X1, [X19 + 0x28]
	0x032B6A20 ADD X4, X20, 0x108
	0x032B6A24 ADD X3, X20, 0x110
	0x032B6A28 LDP X20, X19, [X31 + 0x20]
	0x032B6A2C LDP X22, X21, [X31 + 0x10]
	0x032B6A30 LDP X30, X23, [X31], #0x30
	0x032B6A34 B 0x32B5498
	0x032B6A38 LDR W9, [X19 + 0x18]
	0x032B6A3C CMP W9, 0x4
	0x032B6A40 B.NE 0x32B6A90
	0x032B6A44 CBZ X20, 0x32B6B2C
	0x032B6A48 ADRP X8, 0xE46000
	0x032B6A4C LDR X8, [X8 + 0x9E8]
	0x032B6A50 LDR X22, [X20 + 0xD8]
	0x032B6A54 LDP X21, X19, [X19 + 0x28]
	0x032B6A58 LDR X0, [X8]
	0x032B6A5C LDR W8, [X0 + 0xE0]
	0x032B6A60 CBNZ W8, 0x32B6A68
	0x032B6A64 BL 0x1C16DFC
	0x032B6A68 MOV X0, X19
	0x032B6A6C MOV X1, X31
	0x032B6A70 BL 0x3322D04
	0x032B6A74 CBZ X22, 0x32B6B2C
	0x032B6A78 MOV X2, X0
	0x032B6A7C ADD X4, X20, 0x108
	0x032B6A80 ADD X3, X20, 0x110
	0x032B6A84 MOV X0, X22
	0x032B6A88 MOV X1, X21
	0x032B6A8C B 0x32B6A28
	0x032B6A90 LDR W9, [X0 + 0xE0]
	0x032B6A94 LDR X22, [X19 + 0x48]
	0x032B6A98 CBNZ W9, 0x32B6AA8
	0x032B6A9C BL 0x1C16DFC
	0x032B6AA0 LDR X8, [X23]
	0x032B6AA4 LDR X8, [X8 + 0xB8]
	0x032B6AA8 LDR X8, [X8 + 0xC0]
	0x032B6AAC CMP X22, X8
	0x032B6AB0 B.EQ 0x32B6B44
	0x032B6AB4 MOV X0, X21
	0x032B6AB8 MOV X1, X19
	0x032B6ABC MOV X2, X20
	0x032B6AC0 BL 0x32B7DA4
	0x032B6AC4 LDR X0, [X23]
	0x032B6AC8 LDR X21, [X19 + 0x48]
	0x032B6ACC LDR W8, [X0 + 0xE0]
	0x032B6AD0 CBNZ W8, 0x32B6AD8
	0x032B6AD4 BL 0x1C16DFC
	0x032B6AD8 CBZ X20, 0x32B6B2C
	0x032B6ADC LDR X8, [X23]
	0x032B6AE0 LDR X0, [X20 + 0xD8]
	0x032B6AE4 LDR X8, [X8 + 0xB8]
	0x032B6AE8 LDR X8, [X8 + 0xC8]
	0x032B6AEC CMP X21, X8
	0x032B6AF0 B.EQ 0x32B6B10
	0x032B6AF4 CBZ X0, 0x32B6B2C
	0x032B6AF8 LDRB W8, [X0 + 0x2C]
	0x032B6AFC CBZ W8, 0x32B6B1C
	0x032B6B00 LDP X1, X2, [X19 + 0x28]
	0x032B6B04 ADD X3, X20, 0x110
	0x032B6B08 ADD X4, X20, 0x108
	0x032B6B0C B 0x32B6A28
	0x032B6B10 CBZ X0, 0x32B6B2C
	0x032B6B14 LDR X2, [X19 + 0x48]
	0x032B6B18 B 0x32B6A1C
	0x032B6B1C LDP X20, X19, [X31 + 0x20]
	0x032B6B20 LDP X22, X21, [X31 + 0x10]
	0x032B6B24 LDP X30, X23, [X31], #0x30
	0x032B6B28 RET
	0x032B6B2C BL 0x1C16F20
	0x032B6B30 MOV X0, X20
	0x032B6B34 BL 0x1C171E0
	0x032B6B38 MOV X1, X19
	0x032B6B3C MOV X2, X20
	0x032B6B40 BL 0x32B6CA0
	0x032B6B44 ADRP X0, 0xE3D000
	0x032B6B48 LDR X0, [X0 + 0x9D0]
	0x032B6B4C BL 0x1C16D08
	0x032B6B50 MOVZ W1, 0x1
	0x032B6B54 BL 0x1C16D6C
	0x032B6B58 MOV X20, X0
	0x032B6B5C MOV X0, X19
	0x032B6B60 BL 0x19903C0
	0x032B6B64 LDR X19, [X19 + 0x28]
	0x032B6B68 MOV X0, X20
	0x032B6B6C BL 0x19903C0
	0x032B6B70 MOV X0, X20
	0x032B6B74 MOV X1, X19
	0x032B6B78 BL 0x19980B4
	0x032B6B7C MOV X0, X20
	0x032B6B80 MOV X1, X31
	0x032B6B84 MOV X2, X19
	0x032B6B88 BL 0x1993444
	0x032B6B8C ADRP X0, 0xE6F000
	0x032B6B90 LDR X0, [X0 + 0x420]
	0x032B6B94 BL 0x1C16D08
	0x032B6B98 MOV X1, X20
	0x032B6B9C MOV X2, X31
	0x032B6BA0 BL 0x33BFB40
	0x032B6BA4 MOV X19, X0
	0x032B6BA8 ADRP X0, 0xE67000
	0x032B6BAC LDR X0, [X0 + 0x2E0]
	0x032B6BB0 BL 0x1C16D08
	0x032B6BB4 BL 0x1C16F10
	0x032B6BB8 MOV X1, X19
	0x032B6BBC MOV X2, X31
	0x032B6BC0 MOV X20, X0
	0x032B6BC4 BL 0x329F100
	0x032B6BC8 ADRP X0, 0xE6F000
	0x032B6BCC LDR X0, [X0 + 0x428]
	0x032B6BD0 BL 0x1C16D08
	0x032B6BD4 MOV X1, X0
	0x032B6BD8 MOV X0, X20
	0x032B6BDC BL 0x1C16DEC
	0x032B6BE0 STP X30, X21, [X31 - 0x20]!
	0x032B6BE4 STP X20, X19, [X31 + 0x10]
	0x032B6BE8 ADRP X21, 0x1126000
	0x032B6BEC LDRB W8, [X21 + 0x81B]
	0x032B6BF0 MOV X19, X1
	0x032B6BF4 MOV X20, X0
	0x032B6BF8 TBNZ X8, 0x0, 0x32B6C10
	0x032B6BFC ADRP X0, 0xE6F000
	0x032B6C00 LDR X0, [X0 + 0x60]
	0x032B6C04 BL 0x1C16CF4
	0x032B6C08 MOVZ W8, 0x1
	0x032B6C0C STRB W8, [X21 + 0x81B]
	0x032B6C10 CBZ X19, 0x32B6C68
	0x032B6C14 LDR W8, [X19 + 0x1C]
	0x032B6C18 CMP W8, 0x2
	0x032B6C1C B.EQ 0x32B6C3C
	0x032B6C20 CMP W8, 0x3
	0x032B6C24 B.NE 0x32B6C6C
	0x032B6C28 MOV X0, X20
	0x032B6C2C MOV X1, X19
	0x032B6C30 LDP X20, X19, [X31 + 0x10]
	0x032B6C34 LDP X30, X21, [X31], #0x20
	0x032B6C38 B 0x32B7DE4
	0x032B6C3C LDR W8, [X19 + 0x20]
	0x032B6C40 CMP W8, 0x2
	0x032B6C44 B.NE 0x32B6C5C
	0x032B6C48 MOV X0, X20
	0x032B6C4C MOV X1, X19
	0x032B6C50 LDP X20, X19, [X31 + 0x10]
	0x032B6C54 LDP X30, X21, [X31], #0x20
	0x032B6C58 B 0x32B64F4
	0x032B6C5C LDP X20, X19, [X31 + 0x10]
	0x032B6C60 LDP X30, X21, [X31], #0x20
	0x032B6C64 RET
	0x032B6C68 BL 0x1C16F20
	0x032B6C6C LDR X20, [X20 + 0x88]
	0x032B6C70 MOV X0, X20
	0x032B6C74 BL 0x19903C0
	0x032B6C78 MOV X0, X20
	0x032B6C7C MOV X1, X31
	0x032B6C80 BL 0x32BD930
	0x032B6C84 ADRP X8, 0xE6F000
	0x032B6C88 LDR X8, [X8 + 0x60]
	0x032B6C8C LDR X1, [X8]
	0x032B6C90 BL 0x1BB5A6C
	0x032B6C94 MOV X1, X19
	0x032B6C98 MOV X2, X0
	0x032B6C9C BL 0x32B6CA0
	0x032B6CA0 SUB X31, X31, 0x40
	0x032B6CA4 STP X30, X23, [X31 + 0x10]
	0x032B6CA8 STP X22, X21, [X31 + 0x20]
	0x032B6CAC STP X20, X19, [X31 + 0x30]
	0x032B6CB0 ADRP X0, 0xE3D000
	0x032B6CB4 LDR X0, [X0 + 0x9D0]
	0x032B6CB8 MOV X22, X2
	0x032B6CBC MOV X21, X1
	0x032B6CC0 BL 0x1C16D08
	0x032B6CC4 MOVZ W1, 0x1
	0x032B6CC8 BL 0x1C16D6C
	0x032B6CCC MOV X19, X0
	0x032B6CD0 ADRP X0, 0xE3D000
	0x032B6CD4 LDR X0, [X0 + 0xAC8]
	0x032B6CD8 BL 0x1C16D08
	0x032B6CDC MOVZ W1, 0x7
	0x032B6CE0 BL 0x1C16D6C
	0x032B6CE4 CBZ X22, 0x32B6CF0
	0x032B6CE8 MOV X20, X0
	0x032B6CEC CBNZ X0, 0x32B6CF4
	0x032B6CF0 BL 0x1C16F20
	0x032B6CF4 LDR W8, [X20 + 0x18]
	0x032B6CF8 CBZ W8, 0x32B6DF0
	0x032B6CFC LDR X8, [X22 + 0x28]
	0x032B6D00 ADRP X0, 0xE3D000
	0x032B6D04 STR X8, [X20 + 0x20]
	0x032B6D08 LDR X0, [X0 + 0xDD8]
	0x032B6D0C BL 0x1C16D08
	0x032B6D10 LDR W8, [X20 + 0x18]
	0x032B6D14 CMP W8, 0x1
	0x032B6D18 B.LS 0x32B6DF0
	0x032B6D1C STR X0, [X20 + 0x28]
	0x032B6D20 LDR W8, [X22 + 0x10]
	0x032B6D24 ADRP X0, 0xE6F000
	0x032B6D28 STR W8, [X31 + 0xC]
	0x032B6D2C LDR X0, [X0 + 0x430]
	0x032B6D30 BL 0x1C16D08
	0x032B6D34 ADD X1, X31, 0xC

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X20, 0x1127000
	013 Move W8, [X20+2101]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xE70000
	020 Move X0, [X0+104]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+2101], W8
	024 Move X0, X19
	025 Call __BinaryParser.ReadSerializationHeaderRecord, X0
	026 Move X23, 0xE70000
	027 Move X23, [X23+104]
	028 Move X26, -41021440
	029 Move W24, 5
	030 Move W25, 4
	031 Add X26, X26, 1320
	032 Move W8, [X19+72]
	033 Compare W8, 0
	034 JumpIfEqual {54}
	035 Subtract W8, W8, 1
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, [X19+104]
	038 Compare X0, 0
	039 JumpIfEqual {228}
	040 Move X8, [X0]
	041 Move X9, [X8+472]
	042 Move X1, [X8+480]
	043 NotImplemented "Instruction BLR not yet implemented."
	044 And W1, W0, 255
	045 Subtract W8, W1, 1
	046 Move W20, W0
	047 NotImplemented "Instruction CMP not yet implemented."
	048 NotImplemented "Instruction ADR not yet implemented."
	049 Move W10, [X26]
	050 Add X9, X9, X10
	051 CallNoReturn X9
	052 Move X0, X19
	053 Call __BinaryParser.ReadArray, X0, X1
	054 Move X0, X19
	055 Call __BinaryParser.ReadMemberPrimitiveUnTyped, X0
	056 Move W27, 1
	057 Move X0, X19
	058 Call __BinaryParser.ReadObjectNull, X0, X1
	059 Move X0, X19
	060 Call __BinaryParser.ReadAssembly, X0, X1
	061 Move X0, X19
	062 Call __BinaryParser.ReadObjectWithMap, X0, X1
	063 Move X0, X19
	064 Call __BinaryParser.ReadObjectString, X0, X1
	065 And W8, W20, 255
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move W27, 1
	068 Move X0, [X19+64]
	069 Compare X0, 0
	070 JumpIfEqual {195}
	071 Move X1, X31
	072 Call SerStack.Peek, X0
	073 Move X20, X0
	074 Compare X0, 0
	075 JumpIfEqual {159}
	076 Move X1, [X23]
	077 Move X8, [X20]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Add X22, X20, 24
	080 Add X21, X20, 32
	081 Move X0, X20
	082 Move X1, X22
	083 Move X2, X21
	084 Call ObjectProgress.GetNext, X0, X1, X2
	085 Move W8, [X22]
	086 Move [X19+72], W8
	087 Move X8, [X21]
	088 Move [X19+80], X8
	089 Move TEMP, X0
	090 And TEMP, TEMP, 1
	091 Compare TEMP, 1
	092 JumpIfEqual {179}
	093 Move X0, X19
	094 Call __BinaryParser.get_prs, X0
	095 Compare X0, 0
	096 JumpIfEqual {198}
	097 Move X1, X31
	098 Call ParseRecord.Init, X0
	099 Move W8, [X20+56]
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X0, X19
	102 Call __BinaryParser.get_prs, X0
	103 Compare X0, 0
	104 JumpIfEqual {203}
	105 Move [X0+16], W24
	106 Move X0, X19
	107 Call __BinaryParser.get_prs, X0
	108 Compare X0, 0
	109 JumpIfEqual {200}
	110 Move W8, [X20+52]
	111 Move [X0+28], W8
	112 Move X0, X19
	113 Call __BinaryParser.get_prs, X0
	114 Compare X0, 0
	115 JumpIfEqual {204}
	116 Move W8, [X20+56]
	117 Move [X0+32], W8
	118 Move X21, [X19+16]
	119 Move X0, X19
	120 Call __BinaryParser.get_prs, X0
	121 Move X1, X0
	122 Compare X21, 0
	123 JumpIfEqual {201}
	124 Move X0, X21
	125 Call ObjectReader.Parse, X0, X1
	126 Move X0, X19
	127 Call __BinaryParser.get_prs, X0
	128 Compare X0, 0
	129 JumpIfEqual {205}
	130 Move [X0+16], W25
	131 Move X0, X19
	132 Call __BinaryParser.get_prs, X0
	133 Compare X0, 0
	134 JumpIfEqual {202}
	135 Move W8, [X20+52]
	136 Move [X0+28], W8
	137 Move X0, X19
	138 Call __BinaryParser.get_prs, X0
	139 Compare X0, 0
	140 JumpIfEqual {206}
	141 Move W8, [X20+56]
	142 Move [X0+32], W8
	143 Move X21, [X19+16]
	144 Move X0, X19
	145 Call __BinaryParser.get_prs, X0
	146 Move X1, X0
	147 Compare X21, 0
	148 JumpIfEqual {207}
	149 Move X0, X21
	150 Call ObjectReader.Parse, X0, X1
	151 Move X0, [X19+64]
	152 Compare X0, 0
	153 JumpIfEqual {199}
	154 Move X1, X31
	155 Call SerStack.Pop, X0
	156 Move X0, X19
	157 Move X1, X20
	158 Call __BinaryParser.PutOp, X0, X1
	159 Move W8, 3
	160 Move [X19+72], W8
	161 Move [X19+80], X31
	162 Move TEMP, X27
	163 And TEMP, TEMP, 1
	164 Compare TEMP, 1
	165 JumpIfEqual {33}
	166 Move X0, X19
	167 Call __BinaryParser.ReadObjectWithMapTyped, X0, X1
	168 Move X0, X19
	169 Call __BinaryParser.ReadMemberPrimitiveTyped, X0
	170 Move X0, X19
	171 Call __BinaryParser.ReadCrossAppDomainMap, X0
	172 Move X0, X19
	173 Call __BinaryParser.ReadObject, X0
	174 Move X0, X19
	175 Call __BinaryParser.ReadMessageEnd, X0
	176 Move W27, W31
	177 Move X0, X19
	178 Call __BinaryParser.ReadMemberReference, X0
	179 Move TEMP, X27
	180 And TEMP, TEMP, 1
	181 Compare TEMP, 1
	182 JumpIfEqual {32}
	183 Move X20, [X31+80]
	184 Move X19, [X31+88]
	185 Move X22, [X31+64]
	186 Move X21, [X31+72]
	187 Move X24, [X31+48]
	188 Move X23, [X31+56]
	189 Move X26, [X31+32]
	190 Move X25, [X31+40]
	191 Move X30, [X31+16]
	192 Move X27, [X31+24]
	193 Add X31, X31, 96
	194 Return 
	195 Call 0x1C17F20
	196 Move X0, X20
	197 Call 0x1C181E0
	198 Call 0x1C17F20
	199 Call 0x1C17F20
	200 Call 0x1C17F20
	201 Call 0x1C17F20
	202 Call 0x1C17F20
	203 Call 0x1C17F20
	204 Call 0x1C17F20
	205 Call 0x1C17F20
	206 Call 0x1C17F20
	207 Call 0x1C17F20
	208 Move X0, 0xE70000
	209 Move X0, [X0+960]
	210 Call 0x1C17D08
	211 Move X1, X31
	212 Call Environment.GetResourceString, X0
	213 Move X19, X0
	214 Move X0, 0xE68000
	215 Move X0, [X0+736]
	216 Call 0x1C17D08
	217 Call 0x1C17F10
	218 Move X20, X0
	219 Move X1, X19
	220 Move X2, X31
	221 Call SerializationException..ctor, X0, X1
	222 Move X0, 0xE70000
	223 Move X0, [X0+968]
	224 Call 0x1C17D08
	225 Move X1, X0
	226 Move X0, X20
	227 Call 0x1C17DEC
	228 Call 0x1C17F20
	229 Move X0, 0xE3E000
	230 Move X0, [X0+2512]
	231 Call 0x1C17D08
	232 Move W1, 1
	233 Call 0x1C17D6C
	234 Move X19, X0
	235 Move [X31+12], W20
	236 Move X0, 0xE3F000
	237 Move X0, [X0+2520]
	238 Call 0x1C17D08
	239 Add X1, X31, 12
	240 Call 0x1C17E04
	241 Compare X19, 0
	242 JumpIfNotEqual {244}
	243 Call 0x1C17F20
	244 Move X20, X0
	245 Compare X0, 0
	246 JumpIfEqual {256}
	247 Move X8, [X19]
	248 Move X1, [X8+64]
	249 Move X0, X20
	250 Call 0x1C17E00
	251 Compare X0, 0
	252 JumpIfNotEqual {256}
	253 Call 0x1C17F44
	254 Move X1, X31
	255 Call 0x1C17DEC
	256 Move W8, [X19+24]
	257 Compare W8, 0
	258 JumpIfNotEqual {260}
	259 Call 0x1C17F28
	260 Move [X19+32], X20
	261 Move X0, 0xE70000
	262 Move X0, [X0+976]
	263 Call 0x1C17D08
	264 Move X1, X19
	265 Move X2, X31
	266 Call Environment.GetResourceString, X0, X1
	267 Move X19, X0
	268 Move X0, 0xE68000
	269 Move X0, [X0+736]
	270 Call 0x1C17D08
	271 Call 0x1C17F10
	272 Move X20, X0
	273 Move X1, X19
	274 Move X2, X31
	275 Call SerializationException..ctor, X0, X1
	276 Move X0, 0xE70000
	277 Move X0, [X0+968]
	278 Call 0x1C17D08
	279 Move X1, X0
	280 Move X0, X20
	281 Call 0x1C17DEC
	282 Move X19, X0
	283 NotImplemented "Instruction CMP not yet implemented."
	284 Move X0, X19
	285 Call 0x3EB2AD0
	286 Move X19, X0
	287 Move X0, 0xE70000
	288 Move X0, [X0+984]
	289 Call 0x1C17D08
	290 Move X8, [X19]
	291 Move X1, [X8]
	292 Call 0x1C18270
	293 Move TEMP, X0
	294 And TEMP, TEMP, 1
	295 Compare TEMP, 1
	296 JumpIfNotEqual {318}
	297 Call 0x3EB2AE0
	298 Move X0, 0xE70000
	299 Move X0, [X0+992]
	300 Call 0x1C17D08
	301 Move X1, X31
	302 Call Environment.GetResourceString, X0
	303 Move X19, X0
	304 Move X0, 0xE68000
	305 Move X0, [X0+736]
	306 Call 0x1C17D08
	307 Call 0x1C17F10
	308 Move X1, X19
	309 Move X2, X31
	310 Move X20, X0
	311 Call SerializationException..ctor, X0, X1
	312 Move X0, 0xE70000
	313 Move X0, [X0+968]
	314 Call 0x1C17D08
	315 Move X1, X0
	316 Move X0, X20
	317 Call 0x1C17DEC
	318 Move W0, 8
	319 Call 0x3EB2AF0
	320 Move X8, [X19]
	321 Move [X0], X8
	322 Move X1, 0xBFF000
	323 Add X1, X1, 3672
	324 Move X2, X31
	325 Call 0x3EB2B00
	326 Move X19, X0
	327 Call 0x3EB2AE0
	328 Move X0, X19
	329 Call 0x1D2D690
	330 Call 0x1991590

Method: System.Void ReadBegin()

Disassembly:
	0x032BB960 LDR X2, [X19 + 0x10]

ISIL:
	001 Return 

Method: System.Void ReadEnd()

Disassembly:
	0x032BD49C MOV W22, W20

ISIL:
	001 Return 

Method: System.Boolean ReadBoolean()

Disassembly:
	0x032BD780 STR X0, [X20 + 0x10]
	0x032BD784 MOVN W8, 0x0
	0x032BD788 MOV X0, X20
	0x032BD78C MOV X1, X31
	0x032BD790 STR W8, [X20 + 0x20]
	0x032BD794 BL 0x33BDD8C
	0x032BD798 STR X19, [X20 + 0x18]
	0x032BD79C LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+104]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+456]
	007 Move X1, [X8+464]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Byte ReadByte()

Disassembly:
	0x032ABFA8 MOV X1, X31
	0x032ABFAC BL 0x33B162C
	0x032ABFB0 MOV X20, X0
	0x032ABFB4 MOV X0, X19
	0x032ABFB8 BL 0x19903C0
	0x032ABFBC MOV X0, X19
	0x032ABFC0 MOV X1, X20
	0x032ABFC4 BL 0x19980B4

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+104]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+472]
	007 Move X1, [X8+480]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Byte[] ReadBytes(System.Int32 length)

Disassembly:
	0x032AD480 ADD X21, X21, 0x1
	0x032AD484 CMP X21, X8
	0x032AD488 B.LT 0x32AD448
	0x032AD48C CMP W8, 0x1
	0x032AD490 B.LT 0x32AD550
	0x032AD494 MOV X21, X31
	0x032AD498 LDR X8, [X20 + 0x30]
	0x032AD49C CBZ X8, 0x32AD588
	0x032AD4A0 LDR W9, [X8 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+104]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+712]
	007 Move X2, [X8+720]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Void ReadBytes(System.Byte[] byteA, System.Int32 offset, System.Int32 size)

Disassembly:
	0x032BD7A0 LDP X22, X21, [X31 + 0x10]
	0x032BD7A4 LDR X30, [X31], #0x30
	0x032BD7A8 RET
	0x032BD7AC STR X30, [X31 - 0x30]!
	0x032BD7B0 STP X22, X21, [X31 + 0x10]
	0x032BD7B4 STP X20, X19, [X31 + 0x20]
	0x032BD7B8 LDR X21, [X0 + 0x10]
	0x032BD7BC CBZ X21, 0x32BD844
	0x032BD7C0 LDR W9, [X21 + 0x18]
	0x032BD7C4 LDR W8, [X0 + 0x20]
	0x032BD7C8 MOV X20, X0
	0x032BD7CC MOV X19, X1
	0x032BD7D0 SUB W9, W9, 0x1
	0x032BD7D4 CMP W8, W9
	0x032BD7D8 B.NE 0x32BD800
	0x032BD7DC MOV X0, X20
	0x032BD7E0 BL 0x32BD858
	0x032BD7E4 LDR W8, [X20 + 0x20]
	0x032BD7E8 LDR X21, [X20 + 0x10]
	0x032BD7EC ADD W22, W8, 0x1
	0x032BD7F0 STR W22, [X20 + 0x20]
	0x032BD7F4 CBZ X21, 0x32BD844
	0x032BD7F8 CBNZ X19, 0x32BD80C
	0x032BD7FC B 0x32BD820
	0x032BD800 ADD W22, W8, 0x1
	0x032BD804 STR W22, [X20 + 0x20]
	0x032BD808 CBZ X19, 0x32BD820
	0x032BD80C LDR X8, [X21]
	0x032BD810 MOV X0, X19
	0x032BD814 LDR X1, [X8 + 0x40]
	0x032BD818 BL 0x1C16E00

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move W19, W3
	009 Move W20, W2
	010 Move X21, X1
	011 Move X22, X0
	012 Move X0, [X22+104]
	013 Compare X0, 0
	014 JumpIfEqual {37}
	015 Move X8, [X0]
	016 Move X1, X21
	017 Move W2, W20
	018 Move W3, W19
	019 Move X9, [X8+696]
	020 Move X4, [X8+704]
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Move W23, W0
	023 Compare W0, 0
	024 JumpIfNotEqual {27}
	025 Move X0, X31
	026 Call __Error.EndOfFile
	027 Subtract W19, W19, W23
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Add W20, W23, W20
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Move X23, [X31+56]
	036 Return 
	037 Call 0x1C17F20

Method: System.Char ReadChar()

Disassembly:
	0x032BD81C CBZ X0, 0x32BD84C
	0x032BD820 LDR W8, [X21 + 0x18]
	0x032BD824 CMP W22, W8
	0x032BD828 B.CS 0x32BD848
	0x032BD82C ADD X8, X21, W22, 0x3, SXTW
	0x032BD830 STR X19, [X8 + 0x20]
	0x032BD834 LDP X20, X19, [X31 + 0x20]
	0x032BD838 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+104]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+504]
	007 Move X1, [X8+512]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Char[] ReadChars(System.Int32 length)

Disassembly:
	0x032BD83C LDR X30, [X31], #0x30
	0x032BD840 RET
	0x032BD844 BL 0x1C16F20
	0x032BD848 BL 0x1C16F28
	0x032BD84C BL 0x1C16F44
	0x032BD850 MOV X1, X31
	0x032BD854 BL 0x1C16DEC
	0x032BD858 STR X30, [X31 - 0x20]!
	0x032BD85C STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+104]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+680]
	007 Move X2, [X8+688]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Decimal ReadDecimal()

Disassembly:
	0x032BD860 ADRP X20, 0x111F000
	0x032BD864 LDRB W8, [X20 + 0x84E]
	0x032BD868 MOV X19, X0
	0x032BD86C TBNZ X8, 0x0, 0x32BD884
	0x032BD870 ADRP X0, 0xE36000
	0x032BD874 LDR X0, [X0 + 0x9D0]
	0x032BD878 BL 0x1C16CF4
	0x032BD87C MOVZ W8, 0x1
	0x032BD880 STRB W8, [X20 + 0x84E]
	0x032BD884 LDR X8, [X19 + 0x10]
	0x032BD888 CBZ X8, 0x32BD8DC
	0x032BD88C ADRP X9, 0xE36000
	0x032BD890 LDR X9, [X9 + 0x9D0]
	0x032BD894 LDR W8, [X8 + 0x18]
	0x032BD898 LDR X0, [X9]
	0x032BD89C UBFM W1, W8, 0x1F, 0x1E
	0x032BD8A0 BL 0x1C16D6C
	0x032BD8A4 LDR X8, [X19 + 0x10]
	0x032BD8A8 CBZ X8, 0x32BD8DC
	0x032BD8AC LDR W4, [X8 + 0x18]
	0x032BD8B0 MOV X20, X0
	0x032BD8B4 MOV X0, X8
	0x032BD8B8 MOV W1, W31
	0x032BD8BC MOV X2, X20
	0x032BD8C0 MOV W3, W31
	0x032BD8C4 MOV X5, X31
	0x032BD8C8 BL 0x339FCE8
	0x032BD8CC STR X20, [X19 + 0x10]
	0x032BD8D0 LDP X20, X19, [X31 + 0x10]
	0x032BD8D4 LDR X30, [X31], #0x20
	0x032BD8D8 RET
	0x032BD8DC BL 0x1C16F20
	0x032BD8E0 STR X30, [X31 - 0x10]!
	0x032BD8E4 LDR W9, [X0 + 0x20]
	0x032BD8E8 TBNZ X9, 0x1F, 0x32BD918
	0x032BD8EC LDR X8, [X0 + 0x10]
	0x032BD8F0 CBZ X8, 0x32BD928
	0x032BD8F4 LDR W10, [X8 + 0x18]
	0x032BD8F8 CMP W9, W10
	0x032BD8FC B.CS 0x32BD92C
	0x032BD900 ADD X10, X8, X9, 0x3, LSL
	0x032BD904 LDR X8, [X10 + 0x20]
	0x032BD908 SUB W9, W9, 0x1
	0x032BD90C STR W9, [X0 + 0x20]
	0x032BD910 STR X31, [X10 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1120000
	005 Move W8, [X20+2102]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xE39000
	012 Move X0, [X0+3144]
	013 Call 0x1C17CF4
	014 Move X0, 0xE5F000
	015 Move X0, [X0+1520]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2102], W8
	019 Move X0, [X19+104]
	020 Compare X0, 0
	021 JumpIfEqual {54}
	022 Move X8, [X0]
	023 Move X19, 0xE39000
	024 Move X20, 0xE5F000
	025 Move X9, [X8+664]
	026 Move X1, [X8+672]
	027 Move X19, [X19+3144]
	028 Move X20, [X20+1520]
	029 NotImplemented "Instruction BLR not yet implemented."
	030 Move X8, [X19]
	031 Move X19, X0
	032 Move W9, [X8+224]
	033 Compare W9, 0
	034 JumpIfNotEqual {37}
	035 Move X0, X8
	036 Call 0x1C17DFC
	037 Move X0, X31
	038 Call CultureInfo.get_InvariantCulture
	039 Move X8, [X20]
	040 Move X20, X0
	041 Move W9, [X8+224]
	042 Compare W9, 0
	043 JumpIfNotEqual {46}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X0, X19
	047 Move X1, X20
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+32]
	052 Call Decimal.Parse, X0, X1
	053 Return X0
	054 Call 0x1C17F20

Method: System.Single ReadSingle()

Disassembly:
	0x032BD914 B 0x32BD91C
	0x032BD918 MOV X8, X31
	0x032BD91C MOV X0, X8
	0x032BD920 LDR X30, [X31], #0x10
	0x032BD924 RET
	0x032BD928 BL 0x1C16F20
	0x032BD92C BL 0x1C16F28
	0x032BD930 STR X30, [X31 - 0x10]!
	0x032BD934 LDR W8, [X0 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+104]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+616]
	007 Move X1, [X8+624]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Double ReadDouble()

Disassembly:
	0x032BD938 TBNZ X8, 0x1F, 0x32BD95C
	0x032BD93C LDR X9, [X0 + 0x10]
	0x032BD940 CBZ X9, 0x32BD968
	0x032BD944 LDR W10, [X9 + 0x18]
	0x032BD948 CMP W8, W10
	0x032BD94C B.CS 0x32BD96C
	0x032BD950 ADD X8, X9, X8, 0x3, LSL
	0x032BD954 LDR X0, [X8 + 0x20]
	0x032BD958 B 0x32BD960

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+104]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+632]
	007 Move X1, [X8+640]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Int16 ReadInt16()

Disassembly:
	0x032BD95C MOV X0, X31
	0x032BD960 LDR X30, [X31], #0x10
	0x032BD964 RET
	0x032BD968 BL 0x1C16F20
	0x032BD96C BL 0x1C16F28
	0x032BD970 STR X30, [X31 - 0x10]!
	0x032BD974 LDR W8, [X0 + 0x20]
	0x032BD978 SUBS W8, W8, 0x1
	0x032BD97C B.LT 0x32BD9A0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+104]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+520]
	007 Move X1, [X8+528]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Int32 ReadInt32()

Disassembly:
	0x032ABFEC BL 0x33BFB40
	0x032ABFF0 MOV X19, X0
	0x032ABFF4 ADRP X0, 0xE72000
	0x032ABFF8 LDR X0, [X0 + 0x2E0]
	0x032ABFFC BL 0x1C16D08
	0x032AC000 BL 0x1C16F10
	0x032AC004 MOV X1, X19
	0x032AC008 MOV X2, X31
	0x032AC00C MOV X20, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+104]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+552]
	007 Move X1, [X8+560]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Int64 ReadInt64()

Disassembly:
	0x032BD980 LDR X9, [X0 + 0x10]
	0x032BD984 CBZ X9, 0x32BD9AC
	0x032BD988 LDR W10, [X9 + 0x18]
	0x032BD98C CMP W8, W10
	0x032BD990 B.CS 0x32BD9B0
	0x032BD994 ADD X8, X9, W8, 0x3, UXTW
	0x032BD998 LDR X0, [X8 + 0x20]
	0x032BD99C B 0x32BD9A4
	0x032BD9A0 MOV X0, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+104]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+584]
	007 Move X1, [X8+592]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.SByte ReadSByte()

Disassembly:
	0x032BD9A4 LDR X30, [X31], #0x10
	0x032BD9A8 RET
	0x032BD9AC BL 0x1C16F20
	0x032BD9B0 BL 0x1C16F28
	0x032BD9B4 LDR W8, [X0 + 0x20]
	0x032BD9B8 CMP W8, 0x1
	0x032BD9BC CSET W0, LT
	0x032BD9C0 RET

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+104]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+472]
	007 Move X1, [X8+480]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.String ReadString()

Disassembly:
	0x032ABFC8 MOV X0, X19
	0x032ABFCC MOV X1, X31
	0x032ABFD0 MOV X2, X20
	0x032ABFD4 BL 0x1993444
	0x032ABFD8 ADRP X0, 0xE79000
	0x032ABFDC LDR X0, [X0 + 0xFD0]
	0x032ABFE0 BL 0x1C16D08
	0x032ABFE4 MOV X1, X19
	0x032ABFE8 MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+104]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+664]
	007 Move X1, [X8+672]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.TimeSpan ReadTimeSpan()

Disassembly:
	0x032BD9C4 STP X30, X21, [X31 - 0x20]!
	0x032BD9C8 STP X20, X19, [X31 + 0x10]
	0x032BD9CC ADRP X21, 0x111F000
	0x032BD9D0 ADRP X20, 0xE36000
	0x032BD9D4 LDRB W8, [X21 + 0x84F]
	0x032BD9D8 LDR X20, [X20 + 0x9D0]
	0x032BD9DC MOV X19, X0
	0x032BD9E0 TBNZ X8, 0x0, 0x32BD9F8
	0x032BD9E4 ADRP X0, 0xE36000

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+104]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+584]
	007 Move X1, [X8+592]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.DateTime ReadDateTime()

Disassembly:
	0x032BD9E8 LDR X0, [X0 + 0x9D0]
	0x032BD9EC BL 0x1C16CF4
	0x032BD9F0 MOVZ W8, 0x1
	0x032BD9F4 STRB W8, [X21 + 0x84F]
	0x032BD9F8 MOV X0, X19
	0x032BD9FC MOV X1, X31
	0x032BDA00 BL 0x33BDD8C
	0x032BDA04 LDR X0, [X20]
	0x032BDA08 MOVZ W1, 0x10
	0x032BDA0C BL 0x1C16D6C
	0x032BDA10 STR X0, [X19 + 0x10]
	0x032BDA14 LDR X0, [X20]
	0x032BDA18 MOVZ W1, 0x4
	0x032BDA1C BL 0x1C16D6C
	0x032BDA20 STR X0, [X19 + 0x18]
	0x032BDA24 LDP X20, X19, [X31 + 0x10]
	0x032BDA28 LDP X30, X21, [X31], #0x20
	0x032BDA2C RET
	0x032BDA30 STR X30, [X31 - 0x30]!
	0x032BDA34 STP X22, X21, [X31 + 0x10]
	0x032BDA38 STP X20, X19, [X31 + 0x20]
	0x032BDA3C ADRP X22, 0x111F000
	0x032BDA40 ADRP X21, 0xE36000
	0x032BDA44 LDRB W8, [X22 + 0x850]
	0x032BDA48 LDR X21, [X21 + 0x9D0]
	0x032BDA4C MOV W20, W1
	0x032BDA50 MOV X19, X0
	0x032BDA54 TBNZ X8, 0x0, 0x32BDA6C
	0x032BDA58 ADRP X0, 0xE36000
	0x032BDA5C LDR X0, [X0 + 0x9D0]
	0x032BDA60 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1120000
	005 Move W8, [X20+2103]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE38000
	012 Move X0, [X0+2544]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2103], W8
	016 Move X0, [X19+104]
	017 Compare X0, 0
	018 JumpIfEqual {39}
	019 Move X8, [X0]
	020 Move X19, 0xE38000
	021 Move X9, [X8+584]
	022 Move X1, [X8+592]
	023 Move X19, [X19+2544]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X8, [X19]
	026 Move X19, X0
	027 Move W9, [X8+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {32}
	030 Move X0, X8
	031 Call 0x1C17DFC
	032 Move X0, X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X1, X31
	036 Move X30, [X31+32]
	037 Call DateTime.FromBinaryRaw, X0
	038 Return X0
	039 Call 0x1C17F20

Method: System.UInt16 ReadUInt16()

Disassembly:
	0x032BDA64 MOVZ W8, 0x1
	0x032BDA68 STRB W8, [X22 + 0x850]
	0x032BDA6C MOV X0, X19
	0x032BDA70 MOV X1, X31
	0x032BDA74 BL 0x33BDD8C
	0x032BDA78 LDR X0, [X21]
	0x032BDA7C MOV W1, W20
	0x032BDA80 BL 0x1C16D6C
	0x032BDA84 STR X0, [X19 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+104]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+536]
	007 Move X1, [X8+544]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.UInt32 ReadUInt32()

Disassembly:
	0x032BDA88 LDR X0, [X21]
	0x032BDA8C MOV W1, W20
	0x032BDA90 BL 0x1C16D6C
	0x032BDA94 STR X0, [X19 + 0x18]
	0x032BDA98 LDP X20, X19, [X31 + 0x20]
	0x032BDA9C LDP X22, X21, [X31 + 0x10]
	0x032BDAA0 LDR X30, [X31], #0x30
	0x032BDAA4 RET
	0x032BDAA8 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+104]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+568]
	007 Move X1, [X8+576]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.UInt64 ReadUInt64()

Disassembly:
	0x032BDAAC STP X20, X19, [X31 + 0x10]
	0x032BDAB0 ADRP X21, 0x111F000
	0x032BDAB4 LDRB W8, [X21 + 0x851]
	0x032BDAB8 MOV X19, X1
	0x032BDABC MOV X20, X0
	0x032BDAC0 TBNZ X8, 0x0, 0x32BDAD8
	0x032BDAC4 ADRP X0, 0xE36000
	0x032BDAC8 LDR X0, [X0 + 0x9D0]
	0x032BDACC BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+104]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+600]
	007 Move X1, [X8+608]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Void ReadSerializationHeaderRecord()

Disassembly:
	0x032BB964 ADD X4, X20, 0x7C
	0x032BB968 ADD X5, X20, 0x68
	0x032BB96C ADD X6, X20, 0x70
	0x032BB970 ADD X7, X20, 0x78
	0x032BB974 MOV X3, X23
	0x032BB978 BL 0x32AB010
	0x032BB97C STR W31, [X20 + 0x50]
	0x032BB980 LDR W8, [X21 + 0x14]
	0x032BB984 STR W8, [X20 + 0x80]
	0x032BB988 LDR X9, [X21 + 0x18]
	0x032BB98C STR X9, [X20 + 0x88]
	0x032BB990 LDR X10, [X21 + 0x20]
	0x032BB994 STR X10, [X20 + 0x98]
	0x032BB998 LDR W10, [X21 + 0x40]
	0x032BB99C CMP W10, 0x5
	0x032BB9A0 B.HI 0x32BBBB0
	0x032BB9A4 MOVZ W11, 0x1
	0x032BB9A8 LSLV W10, W11, W10
	0x032BB9AC MOVZ W11, 0x9
	0x032BB9B0 ANDS W31, W10, W11, 0x0
	0x032BB9B4 B.NE 0x32BB9E4
	0x032BB9B8 MOVZ W11, 0x12
	0x032BB9BC ANDS W31, W10, W11, 0x0
	0x032BB9C0 B.EQ 0x32BBA74
	0x032BB9C4 CBZ X9, 0x32BBB50
	0x032BB9C8 LDR W8, [X9 + 0x18]
	0x032BB9CC CBZ W8, 0x32BBB54
	0x032BB9D0 LDR W8, [X9 + 0x20]
	0x032BB9D4 MOVZ W9, 0x2
	0x032BB9D8 STR W8, [X22 + 0x48]
	0x032BB9DC STR W9, [X20 + 0x18]
	0x032BB9E0 B 0x32BBB10
	0x032BB9E4 CBZ X9, 0x32BBB50
	0x032BB9E8 LDR W8, [X9 + 0x18]
	0x032BB9EC CBZ W8, 0x32BBB54
	0x032BB9F0 LDR W8, [X9 + 0x20]
	0x032BB9F4 MOVZ W9, 0x1
	0x032BB9F8 STR W8, [X22 + 0x48]
	0x032BB9FC STR W9, [X20 + 0x18]
	0x032BBA00 ADRP X8, 0xE69000
	0x032BBA04 LDR X8, [X8 + 0xF80]
	0x032BBA08 LDR W23, [X20 + 0x7C]
	0x032BBA0C LDR X0, [X8]
	0x032BBA10 LDR W8, [X0 + 0xE0]
	0x032BBA14 CBNZ W8, 0x32BBA1C
	0x032BBA18 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1122000
	006 Move X21, 0xE6B000
	007 Move W8, [X20+2104]
	008 Move X21, [X21+712]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE6B000
	015 Move X0, [X0+712]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2104], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move W8, 1
	022 Move X1, X31
	023 Move X20, X0
	024 Move [X0+16], W8
	025 Call Object..ctor, X0
	026 Move X0, X20
	027 Move X1, X19
	028 Call SerializationHeaderRecord.Read, X0, X1
	029 Move W1, [X20+28]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X0, [X19+16]
	032 Compare X0, 0
	033 JumpIfEqual {53}
	034 Call ObjectReader.GetId, X0, X1
	035 Compare X19, 0
	036 JumpIfEqual {53}
	037 Move X0, W1
	038 Move [X19+32], X0
	039 NotImplemented "Instruction LDRSW not yet implemented."
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X8, [X19+16]
	042 Compare X8, 0
	043 JumpIfEqual {53}
	044 And X1, X0, 0
	045 Move X0, X8
	046 Call ObjectReader.GetId, X0, X1
	047 Move [X19+40], X0
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Return 
	053 Call 0x1C17F20

Method: System.Void ReadAssembly(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum)

Disassembly:
	0x032BBA1C MOV W0, W23
	0x032BBA20 BL 0x32AF118
	0x032BBA24 TBZ X0, 0x0, 0x32BBB10
	0x032BBA28 LDR X8, [X21 + 0x20]
	0x032BBA2C CBZ X8, 0x32BBB50
	0x032BBA30 LDR W9, [X8 + 0x18]
	0x032BBA34 CBZ W9, 0x32BBB54
	0x032BBA38 LDR W8, [X8 + 0x20]
	0x032BBA3C CBNZ W8, 0x32BBB10
	0x032BBA40 MOV X0, X19
	0x032BBA44 MOV X1, X20
	0x032BBA48 BL 0x32BD3BC
	0x032BBA4C MOV X0, X19
	0x032BBA50 MOV X1, X22
	0x032BBA54 BL 0x32BC6F0
	0x032BBA58 LDR X0, [X19 + 0x10]
	0x032BBA5C CBZ X0, 0x32BBB50
	0x032BBA60 MOV X1, X20
	0x032BBA64 BL 0x32B6068
	0x032BBA68 MOVZ W8, 0x4
	0x032BBA6C STR W8, [X20 + 0x10]
	0x032BBA70 B 0x32BBB24
	0x032BBA74 CMP W8, 0x1
	0x032BBA78 B.LT 0x32BBB00
	0x032BBA7C CBZ X9, 0x32BBB50
	0x032BBA80 LDR W11, [X9 + 0x18]
	0x032BBA84 MOV X10, X31
	0x032BBA88 ADD X12, X9, 0x20
	0x032BBA8C MOVZ W9, 0x1
	0x032BBA90 CMP X10, X11
	0x032BBA94 B.CS 0x32BBB54
	0x032BBA98 LDR W13, [X12, X10, LSL #2]
	0x032BBA9C ADD X10, X10, 0x1
	0x032BBAA0 CMP X8, X10
	0x032BBAA4 MUL W9, W13, W9
	0x032BBAA8 B.NE 0x32BBA90
	0x032BBAAC B 0x32BBB04
	0x032BBAB0 CBZ X20, 0x32BBB50
	0x032BBAB4 MOVZ W8, 0x3
	0x032BBAB8 MOVZ W9, 0x2
	0x032BBABC STR W8, [X20 + 0x10]
	0x032BBAC0 STR W9, [X20 + 0x20]
	0x032BBAC4 STR W9, [X22 + 0x38]
	0x032BBAC8 LDR W9, [X0 + 0x30]
	0x032BBACC CMP W9, 0x2
	0x032BBAD0 B.EQ 0x32BBB44
	0x032BBAD4 CMP W9, 0x1
	0x032BBAD8 B.NE 0x32BBC70
	0x032BBADC LDR X8, [X0 + 0x28]
	0x032BBAE0 MOVZ W9, 0x2
	0x032BBAE4 STR W9, [X20 + 0x1C]
	0x032BBAE8 STR X8, [X20 + 0x28]
	0x032BBAEC STR W9, [X22 + 0x34]
	0x032BBAF0 STR X8, [X20 + 0x40]
	0x032BBAF4 LDR X8, [X0 + 0x40]
	0x032BBAF8 STR X8, [X20 + 0x48]
	0x032BBAFC B 0x32BB904
	0x032BBB00 MOVZ W9, 0x1
	0x032BBB04 MOVZ W8, 0x3
	0x032BBB08 STR W9, [X22 + 0x48]
	0x032BBB0C STR W8, [X20 + 0x18]
	0x032BBB10 LDR X0, [X19 + 0x40]
	0x032BBB14 CBZ X0, 0x32BBB50
	0x032BBB18 MOV X1, X22
	0x032BBB1C MOV X2, X31
	0x032BBB20 BL 0x32BD7AC
	0x032BBB24 LDR X0, [X19 + 0x10]
	0x032BBB28 CBZ X0, 0x32BBB50
	0x032BBB2C MOV X1, X20
	0x032BBB30 LDP X20, X19, [X31 + 0x30]
	0x032BBB34 LDP X22, X21, [X31 + 0x20]
	0x032BBB38 LDP X30, X23, [X31 + 0x10]
	0x032BBB3C ADD X31, X31, 0x40
	0x032BBB40 B 0x32B6068
	0x032BBB44 STR W8, [X20 + 0x1C]
	0x032BBB48 STR W8, [X22 + 0x34]
	0x032BBB4C B 0x32BB904
	0x032BBB50 BL 0x1C16F20
	0x032BBB54 BL 0x1C16F28
	0x032BBB58 BL 0x1C171E0
	0x032BBB5C ADRP X0, 0xE38000
	0x032BBB60 LDR X0, [X0 + 0x9D0]
	0x032BBB64 BL 0x1C16D08
	0x032BBB68 MOVZ W1, 0x1
	0x032BBB6C BL 0x1C16D6C
	0x032BBB70 MOV X19, X0
	0x032BBB74 MOV X0, X21
	0x032BBB78 BL 0x19903C0
	0x032BBB7C LDR X20, [X21 + 0x30]
	0x032BBB80 MOV X0, X19
	0x032BBB84 BL 0x19903C0
	0x032BBB88 MOV X0, X19
	0x032BBB8C MOV X1, X20
	0x032BBB90 BL 0x19980B4
	0x032BBB94 MOV X0, X19
	0x032BBB98 MOV X1, X31
	0x032BBB9C MOV X2, X20
	0x032BBBA0 BL 0x1993444
	0x032BBBA4 ADRP X0, 0xE69000
	0x032BBBA8 LDR X0, [X0 + 0xF90]
	0x032BBBAC B 0x32BBC24
	0x032BBBB0 ADRP X0, 0xE38000
	0x032BBBB4 LDR X0, [X0 + 0x9D0]
	0x032BBBB8 BL 0x1C16D08
	0x032BBBBC MOVZ W1, 0x1
	0x032BBBC0 BL 0x1C16D6C
	0x032BBBC4 MOV X19, X0
	0x032BBBC8 MOV X0, X21
	0x032BBBCC BL 0x19903C0
	0x032BBBD0 LDR W8, [X21 + 0x40]
	0x032BBBD4 ADRP X0, 0xE6A000
	0x032BBBD8 STR W8, [X31 + 0x8]
	0x032BBBDC LDR X0, [X0 + 0x588]
	0x032BBBE0 BL 0x1C16D08
	0x032BBBE4 ADD X1, X31, 0x8
	0x032BBBE8 BL 0x1C16E04
	0x032BBBEC MOV X1, X31
	0x032BBBF0 BL 0x33B162C
	0x032BBBF4 MOV X20, X0
	0x032BBBF8 MOV X0, X19
	0x032BBBFC BL 0x19903C0
	0x032BBC00 MOV X0, X19
	0x032BBC04 MOV X1, X20
	0x032BBC08 BL 0x19980B4
	0x032BBC0C MOV X0, X19
	0x032BBC10 MOV X1, X31
	0x032BBC14 MOV X2, X20
	0x032BBC18 BL 0x1993444
	0x032BBC1C ADRP X0, 0xE6A000
	0x032BBC20 LDR X0, [X0 + 0x460]
	0x032BBC24 BL 0x1C16D08
	0x032BBC28 MOV X1, X19
	0x032BBC2C MOV X2, X31
	0x032BBC30 BL 0x33BFB40
	0x032BBC34 MOV X19, X0
	0x032BBC38 ADRP X0, 0xE62000
	0x032BBC3C LDR X0, [X0 + 0x2E0]
	0x032BBC40 BL 0x1C16D08
	0x032BBC44 BL 0x1C16F10
	0x032BBC48 MOV X1, X19
	0x032BBC4C MOV X2, X31
	0x032BBC50 MOV X20, X0
	0x032BBC54 BL 0x329F100
	0x032BBC58 ADRP X0, 0xE6A000
	0x032BBC5C LDR X0, [X0 + 0x590]
	0x032BBC60 BL 0x1C16D08
	0x032BBC64 MOV X1, X0
	0x032BBC68 MOV X0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1122000
	007 Move X22, 0xE6B000
	008 Move W8, [X21+2105]
	009 Move X22, [X22+808]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0xE6B000
	017 Move X0, [X0+56]
	018 Call 0x1C17CF4
	019 Move X0, 0xE6B000
	020 Move X0, [X0+808]
	021 Call 0x1C17CF4
	022 Move X0, 0xE6B000
	023 Move X0, [X0+1296]
	024 Call 0x1C17CF4
	025 Move X0, 0xE3B000
	026 Move X0, [X0+632]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+2105], W8
	030 Move X0, [X22]
	031 Call 0x1C17F10
	032 Move X1, X31
	033 Move X21, X0
	034 Call Object..ctor, X0
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X8, 0xE6B000
	037 Move X8, [X8+1296]
	038 Move X0, [X8]
	039 Call 0x1C17F10
	040 Move X1, X31
	041 Move X20, X0
	042 Call Object..ctor, X0
	043 Compare X20, 0
	044 JumpIfEqual {100}
	045 Move X0, X20
	046 Move X1, X19
	047 Call BinaryCrossAppDomainAssembly.Read, X0, X1
	048 Compare X21, 0
	049 JumpIfEqual {100}
	050 Move W8, [X20+16]
	051 Move [X21+16], W8
	052 Move X0, [X19+16]
	053 Compare X0, 0
	054 JumpIfEqual {100}
	055 Move W1, [X20+20]
	056 Call ObjectReader.CrossAppDomainArray, X0, X1
	057 Compare X0, 0
	058 JumpIfEqual {101}
	059 Move X8, 0xE3B000
	060 Move X8, [X8+632]
	061 Move X9, [X0]
	062 Move X8, [X8]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 NotImplemented "Instruction CSEL not yet implemented."
	065 Move [X21+24], X8
	066 Compare X8, 0
	067 JumpIfNotEqual {73}
	068 Compare X21, 0
	069 JumpIfEqual {100}
	070 Move X0, X21
	071 Move X1, X19
	072 Call BinaryAssembly.Read, X0, X1
	073 Move X20, 0xE6B000
	074 Move X20, [X20+56]
	075 Move X0, X19
	076 Call __BinaryParser.get_AssemIdToAssemblyTable, X0
	077 Move X8, [X20]
	078 Move W19, [X21+16]
	079 Move X22, [X21+24]
	080 Move X20, X0
	081 Move X0, X8
	082 Call 0x1C17F10
	083 Move X1, X31
	084 Move X21, X0
	085 Call Object..ctor, X0
	086 Move [X21+16], X22
	087 Compare X20, 0
	088 JumpIfEqual {100}
	089 Move X0, X20
	090 Move W1, W19
	091 Move X2, X21
	092 Move X20, [X31+32]
	093 Move X19, [X31+40]
	094 Move X22, [X31+16]
	095 Move X21, [X31+24]
	096 Move X3, X31
	097 Move X30, [X31+48]
	098 Call SizedArray.set_Item, X0, X1, X2
	099 Return 
	100 Call 0x1C17F20
	101 Move [X21+24], X31
	102 Move X0, 0xE39000
	103 Move X0, [X0+2512]
	104 Call 0x1C17D08
	105 Move W1, 2
	106 Call 0x1C17D6C
	107 Move X19, X0
	108 Call 0x19913C0
	109 Move X21, 0xE6B000
	110 Move X21, [X21+1304]
	111 Move X0, X21
	112 Call 0x1C17D08
	113 Move X1, X0
	114 Move X0, X19
	115 Call 0x19990B4
	116 Move X0, X21
	117 Call 0x1C17D08
	118 Move X2, X0
	119 Move X0, X19
	120 Move X1, X31
	121 Call 0x1994444
	122 Move X0, X20
	123 Call 0x19913C0
	124 Move W8, [X20+20]
	125 Move X0, 0xE39000
	126 Move [X31+12], W8
	127 Move X0, [X0+1880]
	128 Call 0x1C17D08
	129 Add X1, X31, 12
	130 Call 0x1C17E04
	131 Move X20, X0
	132 Move X0, X19
	133 Call 0x19913C0
	134 Move X0, X19
	135 Move X1, X20
	136 Call 0x19990B4
	137 Move W1, 1
	138 Move X0, X19
	139 Move X2, X20
	140 Call 0x1994444
	141 Move X0, 0xE6B000
	142 Move X0, [X0+1312]
	143 Call 0x1C17D08
	144 Move X1, X19
	145 Move X2, X31
	146 Call Environment.GetResourceString, X0, X1
	147 Move X19, X0
	148 Move X0, 0xE63000
	149 Move X0, [X0+736]
	150 Call 0x1C17D08
	151 Call 0x1C17F10
	152 Move X1, X19
	153 Move X2, X31
	154 Move X20, X0
	155 Call SerializationException..ctor, X0, X1
	156 Move X0, 0xE6B000
	157 Move X0, [X0+1320]
	158 Call 0x1C17D08
	159 Move X1, X0
	160 Move X0, X20
	161 Call 0x1C17DEC

Method: System.Void ReadObject()

Disassembly:
	0x032BBC6C BL 0x1C16DEC
	0x032BBC70 ADRP X8, 0xE38000
	0x032BBC74 LDR X8, [X8 + 0x9D0]
	0x032BBC78 MOV X19, X0
	0x032BBC7C MOV X0, X8
	0x032BBC80 BL 0x1C16D08
	0x032BBC84 MOVZ W1, 0x1
	0x032BBC88 BL 0x1C16D6C
	0x032BBC8C MOV X20, X0
	0x032BBC90 MOV X0, X19
	0x032BBC94 BL 0x19903C0
	0x032BBC98 LDR W8, [X19 + 0x30]
	0x032BBC9C ADRP X0, 0xE6A000
	0x032BBCA0 STR W8, [X31 + 0xC]
	0x032BBCA4 LDR X0, [X0 + 0x540]
	0x032BBCA8 BL 0x1C16D08
	0x032BBCAC ADD X1, X31, 0xC
	0x032BBCB0 BL 0x1C16E04
	0x032BBCB4 MOV X1, X31
	0x032BBCB8 BL 0x33B162C
	0x032BBCBC MOV X19, X0
	0x032BBCC0 MOV X0, X20
	0x032BBCC4 BL 0x19903C0
	0x032BBCC8 MOV X0, X20
	0x032BBCCC MOV X1, X19
	0x032BBCD0 BL 0x19980B4
	0x032BBCD4 MOV X0, X20
	0x032BBCD8 MOV X1, X31
	0x032BBCDC MOV X2, X19
	0x032BBCE0 BL 0x1993444
	0x032BBCE4 ADRP X0, 0xE6A000
	0x032BBCE8 LDR X0, [X0 + 0x570]
	0x032BBCEC BL 0x1C16D08
	0x032BBCF0 MOV X1, X20
	0x032BBCF4 B 0x32BBC2C
	0x032BBCF8 STR X30, [X31 - 0x30]!
	0x032BBCFC STP X22, X21, [X31 + 0x10]
	0x032BBD00 STP X20, X19, [X31 + 0x20]
	0x032BBD04 ADRP X20, 0x1121000
	0x032BBD08 LDRB W8, [X20 + 0x841]
	0x032BBD0C MOV X19, X0
	0x032BBD10 TBNZ X8, 0x0, 0x32BBD4C
	0x032BBD14 ADRP X0, 0xE69000
	0x032BBD18 LDR X0, [X0 + 0xF80]
	0x032BBD1C BL 0x1C16CF4
	0x032BBD20 ADRP X0, 0xE6A000
	0x032BBD24 LDR X0, [X0 + 0x310]
	0x032BBD28 BL 0x1C16CF4
	0x032BBD2C ADRP X0, 0xE6A000
	0x032BBD30 LDR X0, [X0 + 0x68]
	0x032BBD34 BL 0x1C16CF4
	0x032BBD38 ADRP X0, 0xE6A000
	0x032BBD3C LDR X0, [X0 + 0x598]
	0x032BBD40 BL 0x1C16CF4
	0x032BBD44 MOVZ W8, 0x1
	0x032BBD48 STRB W8, [X20 + 0x841]
	0x032BBD4C LDR X20, [X19 + 0xA0]
	0x032BBD50 CBNZ X20, 0x32BBD78
	0x032BBD54 ADRP X8, 0xE6A000
	0x032BBD58 LDR X8, [X8 + 0x310]
	0x032BBD5C LDR X0, [X8]
	0x032BBD60 BL 0x1C16F10
	0x032BBD64 MOV X1, X31
	0x032BBD68 MOV X20, X0
	0x032BBD6C BL 0x33BDD8C
	0x032BBD70 STR X20, [X19 + 0xA0]
	0x032BBD74 CBZ X20, 0x32BBF4C
	0x032BBD78 MOV X0, X20
	0x032BBD7C MOV X1, X19
	0x032BBD80 BL 0x32ACC38
	0x032BBD84 LDR X8, [X19 + 0xA0]
	0x032BBD88 CBZ X8, 0x32BBF4C
	0x032BBD8C MOV X0, X19
	0x032BBD90 BL 0x32BA8FC
	0x032BBD94 CBZ X0, 0x32BBF4C
	0x032BBD98 MOVZ W8, 0x1
	0x032BBD9C STR W8, [X0 + 0x14]
	0x032BBDA0 LDR X0, [X19 + 0x40]
	0x032BBDA4 CBZ X0, 0x32BBF4C
	0x032BBDA8 MOV X1, X31
	0x032BBDAC BL 0x32BD930
	0x032BBDB0 MOV X20, X0
	0x032BBDB4 CBZ X0, 0x32BBDD0
	0x032BBDB8 ADRP X8, 0xE6A000
	0x032BBDBC LDR X8, [X8 + 0x68]
	0x032BBDC0 LDR X1, [X8]
	0x032BBDC4 LDR X8, [X20]
	0x032BBDC8 CMP X8, X1
	0x032BBDCC B.NE 0x32BBF50
	0x032BBDD0 MOV X0, X19
	0x032BBDD4 BL 0x32BA8FC
	0x032BBDD8 CBZ X0, 0x32BBF4C
	0x032BBDDC MOV X1, X31
	0x032BBDE0 BL 0x32BD694
	0x032BBDE4 MOV X0, X19
	0x032BBDE8 BL 0x32BA8FC
	0x032BBDEC LDR X8, [X19 + 0xA0]
	0x032BBDF0 CBZ X8, 0x32BBF4C
	0x032BBDF4 CBZ X0, 0x32BBF4C
	0x032BBDF8 LDR X8, [X8 + 0x18]
	0x032BBDFC STR X8, [X0 + 0x38]
	0x032BBE00 MOV X0, X19
	0x032BBE04 BL 0x32BA8FC
	0x032BBE08 LDR X8, [X19 + 0xA0]
	0x032BBE0C CBZ X8, 0x32BBF4C
	0x032BBE10 ADRP X9, 0xE69000
	0x032BBE14 LDR X9, [X9 + 0xF80]
	0x032BBE18 MOV X21, X0
	0x032BBE1C LDR W22, [X8 + 0x10]
	0x032BBE20 LDR X0, [X9]
	0x032BBE24 LDR W9, [X0 + 0xE0]
	0x032BBE28 CBNZ W9, 0x32BBE30
	0x032BBE2C BL 0x1C16DFC
	0x032BBE30 MOV W0, W22
	0x032BBE34 BL 0x32AB35C
	0x032BBE38 CBZ X21, 0x32BBF4C
	0x032BBE3C STR X0, [X21 + 0x40]
	0x032BBE40 MOV X0, X19
	0x032BBE44 BL 0x32BA8FC
	0x032BBE48 LDR X8, [X19 + 0xA0]
	0x032BBE4C CBZ X8, 0x32BBF4C
	0x032BBE50 MOV X21, X0
	0x032BBE54 LDR W0, [X8 + 0x10]
	0x032BBE58 BL 0x32AB414
	0x032BBE5C CBZ X21, 0x32BBF4C
	0x032BBE60 STR X0, [X21 + 0x48]
	0x032BBE64 MOV X0, X19
	0x032BBE68 BL 0x32BA8FC
	0x032BBE6C LDR X8, [X19 + 0xA0]
	0x032BBE70 CBZ X8, 0x32BBF4C
	0x032BBE74 CBZ X0, 0x32BBF4C
	0x032BBE78 LDR W8, [X8 + 0x10]
	0x032BBE7C STR W8, [X0 + 0x50]
	0x032BBE80 MOV X0, X19
	0x032BBE84 BL 0x32BA8FC
	0x032BBE88 CBZ X0, 0x32BBF4C
	0x032BBE8C CBZ X20, 0x32BBEE8
	0x032BBE90 MOVZ W8, 0x3
	0x032BBE94 STR W8, [X0 + 0x10]
	0x032BBE98 MOV X0, X19
	0x032BBE9C BL 0x32BA8FC
	0x032BBEA0 CBZ X0, 0x32BBF4C
	0x032BBEA4 MOVZ W8, 0x1
	0x032BBEA8 STR W8, [X0 + 0x20]
	0x032BBEAC LDR W8, [X20 + 0x30]
	0x032BBEB0 CMP W8, 0x2
	0x032BBEB4 B.EQ 0x32BBF10
	0x032BBEB8 CMP W8, 0x1
	0x032BBEBC B.NE 0x32BBF58
	0x032BBEC0 MOV X0, X19
	0x032BBEC4 BL 0x32BA8FC
	0x032BBEC8 CBZ X0, 0x32BBF4C
	0x032BBECC LDR X8, [X20 + 0x28]
	0x032BBED0 STR X8, [X0 + 0x28]
	0x032BBED4 MOV X0, X19
	0x032BBED8 BL 0x32BA8FC
	0x032BBEDC CBZ X0, 0x32BBF4C
	0x032BBEE0 MOVZ W8, 0x2
	0x032BBEE4 B 0x32BBF20
	0x032BBEE8 MOVZ W8, 0x2
	0x032BBEEC STR W8, [X0 + 0x10]
	0x032BBEF0 MOV X0, X19
	0x032BBEF4 BL 0x32BA8FC
	0x032BBEF8 CBZ X0, 0x32BBF4C
	0x032BBEFC ADRP X8, 0xE6A000
	0x032BBF00 LDR X8, [X8 + 0x598]
	0x032BBF04 LDR X8, [X8]
	0x032BBF08 STR X8, [X0 + 0x28]
	0x032BBF0C B 0x32BBF24
	0x032BBF10 MOV X0, X19
	0x032BBF14 BL 0x32BA8FC
	0x032BBF18 CBZ X0, 0x32BBF4C
	0x032BBF1C MOVZ W8, 0x3
	0x032BBF20 STR W8, [X0 + 0x1C]
	0x032BBF24 LDR X20, [X19 + 0x10]
	0x032BBF28 MOV X0, X19
	0x032BBF2C BL 0x32BA8FC
	0x032BBF30 CBZ X20, 0x32BBF4C
	0x032BBF34 MOV X1, X0
	0x032BBF38 MOV X0, X20
	0x032BBF3C LDP X20, X19, [X31 + 0x20]
	0x032BBF40 LDP X22, X21, [X31 + 0x10]
	0x032BBF44 LDR X30, [X31], #0x30
	0x032BBF48 B 0x32B6068
	0x032BBF4C BL 0x1C16F20
	0x032BBF50 MOV X0, X20
	0x032BBF54 BL 0x1C171E0
	0x032BBF58 ADRP X0, 0xE38000
	0x032BBF5C LDR X0, [X0 + 0x9D0]
	0x032BBF60 BL 0x1C16D08
	0x032BBF64 MOVZ W1, 0x1
	0x032BBF68 BL 0x1C16D6C
	0x032BBF6C MOV X19, X0
	0x032BBF70 MOV X0, X20
	0x032BBF74 BL 0x19903C0
	0x032BBF78 LDR W8, [X20 + 0x30]
	0x032BBF7C ADRP X0, 0xE6A000
	0x032BBF80 STR W8, [X31 + 0xC]
	0x032BBF84 LDR X0, [X0 + 0x540]
	0x032BBF88 BL 0x1C16D08
	0x032BBF8C ADD X1, X31, 0xC
	0x032BBF90 BL 0x1C16E04
	0x032BBF94 MOV X1, X31
	0x032BBF98 BL 0x33B162C
	0x032BBF9C MOV X20, X0
	0x032BBFA0 MOV X0, X19
	0x032BBFA4 BL 0x19903C0
	0x032BBFA8 MOV X0, X19
	0x032BBFAC MOV X1, X20
	0x032BBFB0 BL 0x19980B4
	0x032BBFB4 MOV X0, X19
	0x032BBFB8 MOV X1, X31
	0x032BBFBC MOV X2, X20
	0x032BBFC0 BL 0x1993444

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x1122000
	007 Move W8, [X20+2106]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0xE6B000
	014 Move X0, [X0+744]
	015 Call 0x1C17CF4
	016 Move X0, 0xE6B000
	017 Move X0, [X0+88]
	018 Call 0x1C17CF4
	019 Move X0, 0xE6B000
	020 Move X0, [X0+104]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+2106], W8
	024 Move X20, [X19+120]
	025 Compare X20, 0
	026 JumpIfNotEqual {37}
	027 Move X8, 0xE6B000
	028 Move X8, [X8+744]
	029 Move X0, [X8]
	030 Call 0x1C17F10
	031 Move X1, X31
	032 Move X20, X0
	033 Call Object..ctor, X0
	034 Move [X19+120], X20
	035 Compare X20, 0
	036 JumpIfEqual {163}
	037 Move X0, X20
	038 Move X1, X19
	039 Call BinaryObject.Read, X0, X1
	040 Move X8, [X19+120]
	041 Compare X8, 0
	042 JumpIfEqual {163}
	043 Move X0, X19
	044 Call __BinaryParser.get_ObjectMapIdTable, X0
	045 Move X8, [X19+120]
	046 Compare X8, 0
	047 JumpIfEqual {163}
	048 Compare X0, 0
	049 JumpIfEqual {163}
	050 Move W1, [X8+20]
	051 Move X2, X31
	052 Call SizedArray.get_Item, X0, X1
	053 Compare X0, 0
	054 JumpIfEqual {164}
	055 Move X8, 0xE6B000
	056 Move X8, [X8+88]
	057 Move X20, X0
	058 Move X1, [X8]
	059 Move X8, [X0]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X0, X19
	062 Call __BinaryParser.GetOp, X0
	063 Compare X0, 0
	064 JumpIfEqual {163}
	065 Move X22, X0
	066 Move X0, [X19+64]
	067 Compare X0, 0
	068 JumpIfEqual {163}
	069 Move X21, [X22+128]
	070 Move X1, X22
	071 Move X2, X31
	072 Call SerStack.Push, X0, X1
	073 Move W8, 1
	074 Move [X22+48], W8
	075 Move X8, [X20+32]
	076 Move [X22+96], X8
	077 Move X9, [X20+56]
	078 Move [X22+112], X9
	079 Move X9, [X20+48]
	080 Move [X22+120], X9
	081 Move X9, [X20+40]
	082 Move [X22+104], X9
	083 Compare X8, 0
	084 JumpIfEqual {163}
	085 Move X8, [X8+24]
	086 Move [X22+92], W8
	087 Move X0, [X19+64]
	088 Compare X0, 0
	089 JumpIfEqual {163}
	090 Move X1, X31
	091 Call SerStack.PeekPeek, X0
	092 Compare X0, 0
	093 JumpIfEqual {102}
	094 Move X8, 0xE6B000
	095 Move X8, [X8+104]
	096 Move X1, [X8]
	097 Move X8, [X0]
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move W8, [X0+16]
	100 Compare W8, 0
	101 JumpIfEqual {146}
	102 Move X8, [X20+16]
	103 Move [X22+40], X8
	104 Compare X21, 0
	105 JumpIfEqual {163}
	106 Move W8, 2
	107 Move [X21+16], W8
	108 Move [X22+56], W31
	109 Move X8, [X19+120]
	110 Compare X8, 0
	111 JumpIfEqual {163}
	112 Move X0, [X19+16]
	113 Compare X0, 0
	114 JumpIfEqual {163}
	115 NotImplemented "Instruction LDRSW not yet implemented."
	116 Call ObjectReader.GetId, X0, X1
	117 Move [X21+88], X0
	118 Add X1, X21, 272
	119 Add X2, X21, 264
	120 Move X0, X20
	121 Call ObjectMap.CreateObjectInfo, X0, X1, X2
	122 Move [X21+216], X0
	123 Move X8, [X21+88]
	124 Move X9, [X19+32]
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Move W8, 1
	127 Move [X21+36], W8
	128 Move W8, 1
	129 Move [X21+20], W8
	130 Move X8, [X20+16]
	131 Move [X21+64], X8
	132 Move X8, [X20+24]
	133 Move [X21+80], W31
	134 Move [X21+72], X8
	135 Move X0, [X19+16]
	136 Compare X0, 0
	137 JumpIfEqual {163}
	138 Move X1, X21
	139 Move X20, [X31+32]
	140 Move X19, [X31+40]
	141 Move X22, [X31+16]
	142 Move X21, [X31+24]
	143 Move X30, [X31+48]
	144 Call ObjectReader.Parse, X0, X1
	145 Return 
	146 Compare X21, 0
	147 JumpIfEqual {163}
	148 Move W8, 3
	149 Move W9, 2
	150 Move [X21+16], W8
	151 Move [X21+32], W9
	152 Move [X22+56], W9
	153 Move W9, [X0+48]
	154 NotImplemented "Instruction CMP not yet implemented."
	155 NotImplemented "Instruction CMP not yet implemented."
	156 Move X8, [X0+40]
	157 Move W9, 2
	158 Move [X21+28], W9
	159 Move [X21+40], X8
	160 Move [X22+52], W9
	161 Move [X21+28], W8
	162 Move [X22+52], W8
	163 Call 0x1C17F20
	164 Move X0, 0xE39000
	165 Move X0, [X0+2512]
	166 Call 0x1C17D08
	167 Move W1, 1
	168 Call 0x1C17D6C
	169 Move X19, [X19+120]
	170 Move X20, X0
	171 Move X0, X19
	172 Call 0x19913C0
	173 Move W8, [X19+20]
	174 Move X0, 0xE39000
	175 Move [X31+12], W8
	176 Move X0, [X0+1880]
	177 Call 0x1C17D08
	178 Add X1, X31, 12
	179 Call 0x1C17E04
	180 Move X19, X0
	181 Move X0, X20
	182 Call 0x19913C0
	183 Move X0, X20
	184 Move X1, X19
	185 Call 0x19990B4
	186 Move X0, X20
	187 Move X1, X31
	188 Move X2, X19
	189 Call 0x1994444
	190 Move X0, 0xE6B000
	191 Move X0, [X0+1328]
	192 Call 0x1C17D08
	193 Move X1, X20
	194 Move X2, X31
	195 Call Environment.GetResourceString, X0, X1
	196 Move X19, X0
	197 Move X0, 0xE63000
	198 Move X0, [X0+736]
	199 Call 0x1C17D08
	200 Call 0x1C17F10
	201 Move X1, X19
	202 Move X2, X31
	203 Move X20, X0
	204 Call SerializationException..ctor, X0, X1
	205 Move X0, 0xE6B000
	206 Move X0, [X0+1336]
	207 Call 0x1C17D08
	208 Move X1, X0
	209 Move X0, X20
	210 Call 0x1C17DEC
	211 Move X0, X20
	212 Call 0x1C181E0
	213 Move X8, 0xE39000
	214 Move X8, [X8+2512]
	215 Move X19, X0
	216 Move X0, X8
	217 Call 0x1C17D08
	218 Move W1, 1
	219 Call 0x1C17D6C
	220 Move X20, X0
	221 Move X0, X19
	222 Call 0x19913C0
	223 Move W8, [X19+48]
	224 Move X0, 0xE6B000
	225 Move [X31+8], W8
	226 Move X0, [X0+1344]
	227 Call 0x1C17D08
	228 Add X1, X31, 8
	229 Call 0x1C17E04
	230 Move X1, X31
	231 Call Enum.ToString, X0

Method: System.Void ReadCrossAppDomainMap()

Disassembly:
	0x032BBFC4 ADRP X0, 0xE6A000
	0x032BBFC8 LDR X0, [X0 + 0x570]
	0x032BBFCC BL 0x1C16D08
	0x032BBFD0 MOV X1, X19
	0x032BBFD4 MOV X2, X31
	0x032BBFD8 BL 0x33BFB40
	0x032BBFDC MOV X19, X0
	0x032BBFE0 ADRP X0, 0xE62000
	0x032BBFE4 LDR X0, [X0 + 0x2E0]
	0x032BBFE8 BL 0x1C16D08
	0x032BBFEC BL 0x1C16F10
	0x032BBFF0 MOV X1, X19
	0x032BBFF4 MOV X2, X31
	0x032BBFF8 MOV X20, X0
	0x032BBFFC BL 0x329F100
	0x032BC000 ADRP X0, 0xE69000
	0x032BC004 LDR X0, [X0 + 0x5A0]
	0x032BC008 BL 0x1C16D08
	0x032BC00C MOV X1, X0
	0x032BC010 MOV X0, X20
	0x032BC014 BL 0x1C16DEC
	0x032BC018 STP X30, X21, [X31 - 0x20]!
	0x032BC01C STP X20, X19, [X31 + 0x10]
	0x032BC020 ADRP X20, 0x1120000
	0x032BC024 LDRB W8, [X20 + 0x845]
	0x032BC028 MOV X19, X0
	0x032BC02C TBNZ X8, 0x0, 0x32BC050
	0x032BC030 ADRP X0, 0xE69000
	0x032BC034 LDR X0, [X0 + 0x320]
	0x032BC038 BL 0x1C16CF4
	0x032BC03C ADRP X0, 0xE69000
	0x032BC040 LDR X0, [X0 + 0x68]
	0x032BC044 BL 0x1C16CF4
	0x032BC048 MOVZ W8, 0x1
	0x032BC04C STRB W8, [X20 + 0x845]
	0x032BC050 LDR X20, [X19 + 0xB8]
	0x032BC054 CBNZ X20, 0x32BC07C
	0x032BC058 ADRP X8, 0xE69000
	0x032BC05C LDR X8, [X8 + 0x320]
	0x032BC060 LDR X0, [X8]
	0x032BC064 BL 0x1C16F10
	0x032BC068 MOV X1, X31
	0x032BC06C MOV X20, X0
	0x032BC070 BL 0x33BDD8C
	0x032BC074 STR X20, [X19 + 0xB8]
	0x032BC078 CBZ X20, 0x32BC1A0
	0x032BC07C MOV X0, X20
	0x032BC080 MOV X1, X19
	0x032BC084 BL 0x32AE038
	0x032BC088 LDR X8, [X19 + 0xB8]
	0x032BC08C CBZ X8, 0x32BC1A0
	0x032BC090 LDR X0, [X19 + 0x40]
	0x032BC094 CBZ X0, 0x32BC1A0
	0x032BC098 MOV X1, X31
	0x032BC09C BL 0x32BD930
	0x032BC0A0 MOV X20, X0
	0x032BC0A4 CBZ X0, 0x32BC0C0
	0x032BC0A8 ADRP X8, 0xE69000
	0x032BC0AC LDR X8, [X8 + 0x68]
	0x032BC0B0 LDR X1, [X8]
	0x032BC0B4 LDR X8, [X20]
	0x032BC0B8 CMP X8, X1
	0x032BC0BC B.NE 0x32BC1A4
	0x032BC0C0 MOV X0, X19
	0x032BC0C4 BL 0x32BA8FC
	0x032BC0C8 CBZ X0, 0x32BC1A0
	0x032BC0CC MOV X1, X31
	0x032BC0D0 BL 0x32BD694
	0x032BC0D4 MOV X0, X19
	0x032BC0D8 BL 0x32BA8FC
	0x032BC0DC LDR X8, [X19 + 0xB8]
	0x032BC0E0 CBZ X8, 0x32BC1A0
	0x032BC0E4 MOV X21, X0
	0x032BC0E8 LDR X0, [X19 + 0x10]
	0x032BC0EC CBZ X0, 0x32BC1A0
	0x032BC0F0 LDRSW X1, [X8 + 0x10]
	0x032BC0F4 BL 0x32B7F2C
	0x032BC0F8 CBZ X21, 0x32BC1A0
	0x032BC0FC STR X0, [X21 + 0x60]
	0x032BC100 MOV X0, X19
	0x032BC104 BL 0x32BA8FC
	0x032BC108 CBZ X0, 0x32BC1A0
	0x032BC10C MOVZ W21, 0x3
	0x032BC110 STR W21, [X0 + 0x10]
	0x032BC114 MOV X0, X19
	0x032BC118 BL 0x32BA8FC
	0x032BC11C CBZ X0, 0x32BC1A0
	0x032BC120 STR W21, [X0 + 0x20]
	0x032BC124 CBZ X20, 0x32BC1A0
	0x032BC128 LDR W21, [X20 + 0x30]
	0x032BC12C MOV X0, X19
	0x032BC130 BL 0x32BA8FC
	0x032BC134 CBZ X0, 0x32BC1A0
	0x032BC138 CMP W21, 0x1
	0x032BC13C B.NE 0x32BC174
	0x032BC140 MOVZ W8, 0x2
	0x032BC144 STR W8, [X0 + 0x1C]
	0x032BC148 MOV X0, X19
	0x032BC14C BL 0x32BA8FC
	0x032BC150 CBZ X0, 0x32BC1A0
	0x032BC154 LDR X8, [X20 + 0x28]
	0x032BC158 STR X8, [X0 + 0x28]
	0x032BC15C MOV X0, X19
	0x032BC160 BL 0x32BA8FC
	0x032BC164 CBZ X0, 0x32BC1A0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1122000
	006 Move X21, 0xE6B000
	007 Move W8, [X20+2107]
	008 Move X21, [X21+1352]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0xE6B000
	015 Move X0, [X0+1352]
	016 Call 0x1C17CF4
	017 Move X0, 0xE6B000
	018 Move X0, [X0+728]
	019 Call 0x1C17CF4
	020 Move X0, 0xE6B000
	021 Move X0, [X0+736]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2107], W8
	025 Move X0, [X21]
	026 Call 0x1C17F10
	027 Move X1, X31
	028 Move X20, X0
	029 Call Object..ctor, X0
	030 Compare X20, 0
	031 JumpIfEqual {66}
	032 Move X0, X20
	033 Move X1, X19
	034 Call BinaryCrossAppDomainMap.Read, X0, X1
	035 Move X0, [X19+16]
	036 Compare X0, 0
	037 JumpIfEqual {66}
	038 Move W1, [X20+16]
	039 Call ObjectReader.CrossAppDomainArray, X0, X1
	040 Move X1, X0
	041 Compare X0, 0
	042 JumpIfEqual {67}
	043 Move X8, 0xE6A000
	044 Move X8, [X8+736]
	045 Move X9, [X8]
	046 Move X8, [X1]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X9, 0xE6A000
	049 Move X9, [X9+728]
	050 Move X9, [X9]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X0, X19
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X30, [X31+32]
	056 Move X21, [X31+40]
	057 Call __BinaryParser.ReadObjectWithMapTyped, X0, X1
	058 Return 
	059 Move X0, X19
	060 Move X20, [X31+16]
	061 Move X19, [X31+24]
	062 Move X30, [X31+32]
	063 Move X21, [X31+40]
	064 Call __BinaryParser.ReadObjectWithMap, X0, X1
	065 Return 
	066 Call 0x1C17F20
	067 Move X0, 0xE38000
	068 Move X0, [X0+2512]
	069 Move X19, X1
	070 Call 0x1C17D08
	071 Move W1, 2
	072 Call 0x1C17D6C
	073 Move X20, X0
	074 Call 0x19913C0
	075 Move X21, 0xE6A000
	076 Move X21, [X21+1360]
	077 Move X0, X21
	078 Call 0x1C17D08
	079 Move X1, X0
	080 Move X0, X20
	081 Call 0x19990B4
	082 Move X0, X21
	083 Call 0x1C17D08
	084 Move X2, X0
	085 Move X0, X20
	086 Move X1, X31
	087 Call 0x1994444
	088 Move X0, X20
	089 Call 0x19913C0
	090 Move X0, X20
	091 Move X1, X19
	092 Call 0x19990B4
	093 Move W1, 1
	094 Move X0, X20
	095 Move X2, X19
	096 Call 0x1994444
	097 Move X0, 0xE6A000
	098 Move X0, [X0+1312]
	099 Call 0x1C17D08
	100 Move X1, X20
	101 Move X2, X31
	102 Call Environment.GetResourceString, X0, X1
	103 Move X19, X0
	104 Move X0, 0xE62000
	105 Move X0, [X0+736]
	106 Call 0x1C17D08
	107 Call 0x1C17F10
	108 Move X1, X19
	109 Move X2, X31
	110 Move X20, X0
	111 Call SerializationException..ctor, X0, X1
	112 Move X0, 0xE6A000
	113 Move X0, [X0+1368]
	114 Call 0x1C17D08
	115 Move X1, X0
	116 Move X0, X20
	117 Call 0x1C17DEC

Method: System.Void ReadObjectWithMap(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum)

Disassembly:
	0x032BC168 LDR X8, [X20 + 0x40]
	0x032BC16C STR X8, [X0 + 0x48]
	0x032BC170 B 0x32BC17C
	0x032BC174 MOVZ W8, 0x3
	0x032BC178 STR W8, [X0 + 0x1C]
	0x032BC17C LDR X20, [X19 + 0x10]
	0x032BC180 MOV X0, X19
	0x032BC184 BL 0x32BA8FC
	0x032BC188 CBZ X20, 0x32BC1A0
	0x032BC18C MOV X1, X0
	0x032BC190 MOV X0, X20
	0x032BC194 LDP X20, X19, [X31 + 0x10]
	0x032BC198 LDP X30, X21, [X31], #0x20
	0x032BC19C B 0x32B6068
	0x032BC1A0 BL 0x1C16F20
	0x032BC1A4 MOV X0, X20
	0x032BC1A8 BL 0x1C171E0
	0x032BC1AC STP X30, X21, [X31 - 0x20]!
	0x032BC1B0 STP X20, X19, [X31 + 0x10]
	0x032BC1B4 ADRP X21, 0x1120000
	0x032BC1B8 LDRB W8, [X21 + 0x846]
	0x032BC1BC MOV W20, W1
	0x032BC1C0 MOV X19, X0
	0x032BC1C4 TBNZ X8, 0x0, 0x32BC1E8
	0x032BC1C8 ADRP X0, 0xE69000
	0x032BC1CC LDR X0, [X0 + 0x2F8]
	0x032BC1D0 BL 0x1C16CF4
	0x032BC1D4 ADRP X0, 0xE69000
	0x032BC1D8 LDR X0, [X0 + 0x68]
	0x032BC1DC BL 0x1C16CF4
	0x032BC1E0 MOVZ W8, 0x1
	0x032BC1E4 STRB W8, [X21 + 0x846]
	0x032BC1E8 LDR X21, [X19 + 0xC0]
	0x032BC1EC CBNZ X21, 0x32BC214
	0x032BC1F0 ADRP X8, 0xE69000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1121000
	006 Move W8, [X21+2108]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xE6A000
	014 Move X0, [X0+736]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2108], W8
	018 Move X21, [X19+128]
	019 Compare X21, 0
	020 JumpIfEqual {22}
	021 Move [X21+16], W20
	022 Move X8, 0xE6A000
	023 Move X8, [X8+736]
	024 Move X0, [X8]
	025 Call 0x1C17F10
	026 Move X1, X31
	027 Move X21, X0
	028 Call Object..ctor, X0
	029 Move [X21+16], W20
	030 Move [X19+128], X21
	031 Move X0, X21
	032 Move X1, X19
	033 Call BinaryObjectWithMap.Read, X0, X1
	034 Move X1, [X19+128]
	035 Compare X1, 0
	036 JumpIfEqual {44}
	037 Move X0, X19
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Call __BinaryParser.ReadObjectWithMap, X0, X1
	043 Return 
	044 Call 0x1C17F20

Method: System.Void ReadObjectWithMap(System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMap record)

Disassembly:
	0x032BDB78 TBNZ X8, 0x0, 0x32BDB90
	0x032BDB7C ADRP X0, 0xE68000
	0x032BDB80 LDR X0, [X0 + 0x508]
	0x032BDB84 BL 0x1C16CF4
	0x032BDB88 MOVZ W8, 0x1
	0x032BDB8C STRB W8, [X20 + 0x852]
	0x032BDB90 LDR X0, [X21]
	0x032BDB94 BL 0x1C16F10
	0x032BDB98 MOV X1, X19
	0x032BDB9C MOV X20, X0
	0x032BDBA0 BL 0x32BDAA8
	0x032BDBA4 MOV X0, X20
	0x032BDBA8 LDP X20, X19, [X31 + 0x10]
	0x032BDBAC LDP X30, X21, [X31], #0x20
	0x032BDBB0 RET
	0x032BDBB4 STR X30, [X31 - 0x10]!
	0x032BDBB8 TBNZ X1, 0x1F, 0x32BDBE4
	0x032BDBBC LDR X8, [X0 + 0x10]
	0x032BDBC0 CBZ X8, 0x32BDC20
	0x032BDBC4 LDR W9, [X8 + 0x18]
	0x032BDBC8 SUB W10, W9, 0x1
	0x032BDBCC CMP W10, W1
	0x032BDBD0 B.LT 0x32BDC00
	0x032BDBD4 CMP W9, W1
	0x032BDBD8 B.LS 0x32BDC24
	0x032BDBDC ADD X8, X8, W1, 0x3, UXTW
	0x032BDBE0 B 0x32BDC14
	0x032BDBE4 LDR X8, [X0 + 0x18]
	0x032BDBE8 CBZ X8, 0x32BDC20
	0x032BDBEC LDR W10, [X8 + 0x18]
	0x032BDBF0 SUB W9, W31, W1
	0x032BDBF4 SUB W11, W10, 0x1
	0x032BDBF8 CMP W11, W9
	0x032BDBFC B.GE 0x32BDC08
	0x032BDC00 MOV X0, X31
	0x032BDC04 B 0x32BDC18
	0x032BDC08 CMP W9, W10
	0x032BDC0C B.CS 0x32BDC24
	0x032BDC10 ADD X8, X8, W9, 0x3, SXTW
	0x032BDC14 LDR X0, [X8 + 0x20]
	0x032BDC18 LDR X30, [X31], #0x10
	0x032BDC1C RET
	0x032BDC20 BL 0x1C16F20
	0x032BDC24 BL 0x1C16F28
	0x032BDC28 STP X30, X23, [X31 - 0x30]!
	0x032BDC2C STP X22, X21, [X31 + 0x10]
	0x032BDC30 STP X20, X19, [X31 + 0x20]
	0x032BDC34 MOV X19, X2
	0x032BDC38 MOV W20, W1
	0x032BDC3C MOV X21, X0
	0x032BDC40 TBNZ X1, 0x1F, 0x32BDCA8
	0x032BDC44 LDR X22, [X21 + 0x10]
	0x032BDC48 CBZ X22, 0x32BDD18
	0x032BDC4C LDR W8, [X22 + 0x18]
	0x032BDC50 SUB W8, W8, 0x1
	0x032BDC54 CMP W8, W20
	0x032BDC58 B.GE 0x32BDC70
	0x032BDC5C MOV X0, X21
	0x032BDC60 MOV W1, W20
	0x032BDC64 BL 0x32BDD28
	0x032BDC68 LDR X22, [X21 + 0x10]
	0x032BDC6C CBZ X22, 0x32BDD18
	0x032BDC70 LDR W8, [X22 + 0x18]
	0x032BDC74 CMP W8, W20
	0x032BDC78 B.LS 0x32BDD14
	0x032BDC7C CBZ X19, 0x32BDC98
	0x032BDC80 LDR X8, [X22]
	0x032BDC84 MOV X0, X19
	0x032BDC88 LDR X1, [X8 + 0x40]
	0x032BDC8C BL 0x1C16E00
	0x032BDC90 CBZ X0, 0x32BDD1C
	0x032BDC94 LDR W8, [X22 + 0x18]
	0x032BDC98 CMP W8, W20
	0x032BDC9C B.LS 0x32BDD14
	0x032BDCA0 ADD X8, X22, W20, 0x3, UXTW
	0x032BDCA4 B 0x32BDD00
	0x032BDCA8 LDR X22, [X21 + 0x18]
	0x032BDCAC CBZ X22, 0x32BDD18
	0x032BDCB0 LDR W8, [X22 + 0x18]
	0x032BDCB4 SUB W23, W31, W20
	0x032BDCB8 SUB W8, W8, 0x1
	0x032BDCBC CMP W8, W23
	0x032BDCC0 B.GE 0x32BDCD8
	0x032BDCC4 MOV X0, X21
	0x032BDCC8 MOV W1, W20
	0x032BDCCC BL 0x32BDD28
	0x032BDCD0 LDR X22, [X21 + 0x18]
	0x032BDCD4 CBZ X22, 0x32BDD18
	0x032BDCD8 CBZ X19, 0x32BDCF0
	0x032BDCDC LDR X8, [X22]
	0x032BDCE0 MOV X0, X19
	0x032BDCE4 LDR X1, [X8 + 0x40]
	0x032BDCE8 BL 0x1C16E00
	0x032BDCEC CBZ X0, 0x32BDD1C
	0x032BDCF0 LDR W8, [X22 + 0x18]
	0x032BDCF4 CMP W23, W8
	0x032BDCF8 B.CS 0x32BDD14
	0x032BDCFC ADD X8, X22, W23, 0x3, SXTW
	0x032BDD00 STR X19, [X8 + 0x20]!
	0x032BDD04 LDP X20, X19, [X31 + 0x20]
	0x032BDD08 LDP X22, X21, [X31 + 0x10]
	0x032BDD0C LDP X30, X23, [X31], #0x30
	0x032BDD10 RET
	0x032BDD14 BL 0x1C16F28
	0x032BDD18 BL 0x1C16F20
	0x032BDD1C BL 0x1C16F44
	0x032BDD20 MOV X1, X31
	0x032BDD24 BL 0x1C16DEC
	0x032BDD28 STR X30, [X31 - 0x30]!
	0x032BDD2C STP X22, X21, [X31 + 0x10]
	0x032BDD30 STP X20, X19, [X31 + 0x20]
	0x032BDD34 ADRP X21, 0x111F000
	0x032BDD38 LDRB W8, [X21 + 0x853]
	0x032BDD3C MOV W20, W1
	0x032BDD40 MOV X19, X0
	0x032BDD44 TBNZ X8, 0x0, 0x32BDD68
	0x032BDD48 ADRP X0, 0xE36000
	0x032BDD4C LDR X0, [X0 + 0x5A8]
	0x032BDD50 BL 0x1C16CF4
	0x032BDD54 ADRP X0, 0xE36000
	0x032BDD58 LDR X0, [X0 + 0x9D0]
	0x032BDD5C BL 0x1C16CF4
	0x032BDD60 MOVZ W8, 0x1
	0x032BDD64 STRB W8, [X21 + 0x853]
	0x032BDD68 ADRP X8, 0xE36000
	0x032BDD6C ADRP X21, 0xE36000
	0x032BDD70 LDR X8, [X8 + 0x5A8]
	0x032BDD74 LDR X21, [X21 + 0x9D0]
	0x032BDD78 TBNZ X20, 0x1F, 0x32BDDDC
	0x032BDD7C LDR X22, [X19 + 0x10]!
	0x032BDD80 CBZ X22, 0x32BDE50
	0x032BDD84 LDR X0, [X8]
	0x032BDD88 LDR W8, [X0 + 0xE0]
	0x032BDD8C CBNZ W8, 0x32BDD94
	0x032BDD90 BL 0x1C16DFC
	0x032BDD94 LDR W8, [X22 + 0x18]
	0x032BDD98 ADD W1, W20, 0x1
	0x032BDD9C UBFM W0, W8, 0x1F, 0x1E
	0x032BDDA0 MOV X2, X31
	0x032BDDA4 BL 0x337EDF0
	0x032BDDA8 MOV W1, W0
	0x032BDDAC LDR X0, [X21]
	0x032BDDB0 BL 0x1C16D6C
	0x032BDDB4 MOV X20, X0
	0x032BDDB8 LDR X0, [X19]
	0x032BDDBC CBZ X0, 0x32BDE54
	0x032BDDC0 LDR W4, [X0 + 0x18]
	0x032BDDC4 MOV W1, W31
	0x032BDDC8 MOV X2, X20
	0x032BDDCC MOV W3, W31
	0x032BDDD0 MOV X5, X31
	0x032BDDD4 BL 0x339FCE8
	0x032BDDD8 B 0x32BDE3C
	0x032BDDDC LDR X22, [X19 + 0x18]!
	0x032BDDE0 CBZ X22, 0x32BDE58
	0x032BDDE4 LDR X0, [X8]
	0x032BDDE8 LDR W8, [X0 + 0xE0]
	0x032BDDEC CBNZ W8, 0x32BDDF4
	0x032BDDF0 BL 0x1C16DFC
	0x032BDDF4 LDR W8, [X22 + 0x18]
	0x032BDDF8 MOVZ W9, 0x1
	0x032BDDFC SUB W1, W9, W20
	0x032BDE00 UBFM W0, W8, 0x1F, 0x1E
	0x032BDE04 MOV X2, X31
	0x032BDE08 BL 0x337EDF0
	0x032BDE0C MOV W1, W0
	0x032BDE10 LDR X0, [X21]
	0x032BDE14 BL 0x1C16D6C
	0x032BDE18 MOV X20, X0
	0x032BDE1C LDR X0, [X19]
	0x032BDE20 CBZ X0, 0x32BDE5C
	0x032BDE24 LDR W4, [X0 + 0x18]
	0x032BDE28 MOV W1, W31
	0x032BDE2C MOV X2, X20
	0x032BDE30 MOV W3, W31
	0x032BDE34 MOV X5, X31
	0x032BDE38 BL 0x339FCE8
	0x032BDE3C STR X20, [X19]
	0x032BDE40 LDP X20, X19, [X31 + 0x20]
	0x032BDE44 LDP X22, X21, [X31 + 0x10]
	0x032BDE48 LDR X30, [X31], #0x30
	0x032BDE4C RET
	0x032BDE50 BL 0x1C16F20
	0x032BDE54 BL 0x1C16F20
	0x032BDE58 BL 0x1C16F20
	0x032BDE5C BL 0x1C16F20
	0x032BDE60 B 0x32BDE84
	0x032BDE64 B 0x32BDE84
	0x032BDE68 B 0x32BDE84
	0x032BDE6C B 0x32BDE84
	0x032BDE70 B 0x32BDE84
	0x032BDE74 B 0x32BDE84
	0x032BDE78 B 0x32BDE84
	0x032BDE7C B 0x32BDE84
	0x032BDE80 B 0x32BDE84
	0x032BDE84 MOV X19, X0
	0x032BDE88 CMP W1, 0x1
	0x032BDE8C B.NE 0x32BDF34
	0x032BDE90 MOV X0, X19
	0x032BDE94 BL 0x3EB1AD0
	0x032BDE98 MOV X19, X0
	0x032BDE9C ADRP X0, 0xE36000
	0x032BDEA0 LDR X0, [X0 + 0x7D0]
	0x032BDEA4 BL 0x1C16D08
	0x032BDEA8 LDR X8, [X19]
	0x032BDEAC LDR X1, [X8]
	0x032BDEB0 BL 0x1C17270
	0x032BDEB4 TBZ X0, 0x0, 0x32BDF0C
	0x032BDEB8 BL 0x3EB1AE0
	0x032BDEBC ADRP X0, 0xE66000
	0x032BDEC0 LDR X0, [X0 + 0xCE8]
	0x032BDEC4 BL 0x1C16D08
	0x032BDEC8 MOV X1, X31
	0x032BDECC BL 0x33BDD84
	0x032BDED0 MOV X19, X0
	0x032BDED4 ADRP X0, 0xE60000
	0x032BDED8 LDR X0, [X0 + 0x2E0]
	0x032BDEDC BL 0x1C16D08
	0x032BDEE0 BL 0x1C16F10
	0x032BDEE4 MOV X1, X19
	0x032BDEE8 MOV X2, X31
	0x032BDEEC MOV X20, X0
	0x032BDEF0 BL 0x329F100
	0x032BDEF4 ADRP X0, 0xE68000
	0x032BDEF8 LDR X0, [X0 + 0x5C8]
	0x032BDEFC BL 0x1C16D08
	0x032BDF00 MOV X1, X0
	0x032BDF04 MOV X0, X20
	0x032BDF08 BL 0x1C16DEC
	0x032BDF0C MOVZ W0, 0x8
	0x032BDF10 BL 0x3EB1AF0
	0x032BDF14 LDR X8, [X19]
	0x032BDF18 STR X8, [X0]
	0x032BDF1C ADRP X1, 0xBF7000
	0x032BDF20 ADD X1, X1, 0xE58
	0x032BDF24 MOV X2, X31
	0x032BDF28 BL 0x3EB1B00
	0x032BDF2C MOV X19, X0
	0x032BDF30 BL 0x3EB1AE0
	0x032BDF34 MOV X0, X19
	0x032BDF38 BL 0x1D2C690
	0x032BDF3C BL 0x1990590
	0x032BDF40 STP X30, X21, [X31 - 0x20]!
	0x032BDF44 STP X20, X19, [X31 + 0x10]
	0x032BDF48 ADRP X21, 0x111F000
	0x032BDF4C ADRP X20, 0xE37000
	0x032BDF50 LDRB W8, [X21 + 0x854]
	0x032BDF54 LDR X20, [X20 + 0xE58]
	0x032BDF58 MOV X19, X0
	0x032BDF5C TBNZ X8, 0x0, 0x32BDF74
	0x032BDF60 ADRP X0, 0xE37000
	0x032BDF64 LDR X0, [X0 + 0xE58]
	0x032BDF68 BL 0x1C16CF4
	0x032BDF6C MOVZ W8, 0x1
	0x032BDF70 STRB W8, [X21 + 0x854]
	0x032BDF74 LDR X0, [X20]
	0x032BDF78 MOVZ W1, 0x10
	0x032BDF7C BL 0x1C16D6C
	0x032BDF80 STR X0, [X19 + 0x10]
	0x032BDF84 LDR X0, [X20]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x1120000
	009 Move W8, [X21+2109]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xE69000
	017 Move X0, [X0+56]
	018 Call 0x1C17CF4
	019 Move X0, 0xE69000
	020 Move X0, [X0+104]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+2109], W8
	024 Move X0, X20
	025 Call __BinaryParser.GetOp, X0
	026 Compare X0, 0
	027 JumpIfEqual {179}
	028 Move X22, X0
	029 Move X0, [X20+64]
	030 Compare X0, 0
	031 JumpIfEqual {179}
	032 Move X21, [X22+128]
	033 Move X1, X22
	034 Move X2, X31
	035 Call SerStack.Push, X0, X1
	036 Compare X19, 0
	037 JumpIfEqual {179}
	038 Move W8, [X19+16]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X24, X19
	042 Add X24, X24, 48
	043 Move W8, [X24]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X0, X20
	046 Call __BinaryParser.get_AssemIdToAssemblyTable, X0
	047 Compare X0, 0
	048 JumpIfEqual {179}
	049 Move W1, [X24]
	050 Move X2, X31
	051 Call SizedArray.get_Item, X0, X1
	052 Compare X0, 0
	053 JumpIfEqual {190}
	054 Move X8, 0xE69000
	055 Move X8, [X8+56]
	056 Move X23, X0
	057 Move X1, [X8]
	058 Move X8, [X0]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X0, X23
	061 Call 0x1C181E0
	062 Move X0, X20
	063 Call __BinaryParser.get_SystemAssemblyInfo, X0
	064 Move X23, X0
	065 Move X23, X31
	066 Move X0, [X20+16]
	067 Compare X0, 0
	068 JumpIfEqual {179}
	069 Move X2, [X19+24]
	070 Move X1, X23
	071 Call ObjectReader.GetType, X0, X1, X2
	072 Move X8, [X19+24]
	073 Move X2, [X19+40]
	074 Move X3, [X20+16]
	075 Move W4, [X19+20]
	076 Move X1, X0
	077 Move X0, X8
	078 Move X5, X23
	079 Call ObjectMap.Create, X0, X1, X2, X3, X4, X5
	080 Move X23, X0
	081 Move X0, X20
	082 Call __BinaryParser.get_ObjectMapIdTable, X0
	083 Compare X0, 0
	084 JumpIfEqual {179}
	085 Move W1, [X19+20]
	086 Move X2, X23
	087 Move X3, X31
	088 Call SizedArray.set_Item, X0, X1, X2
	089 Move W8, 1
	090 Move [X22+48], W8
	091 Compare X23, 0
	092 JumpIfEqual {179}
	093 Move X8, [X23+32]
	094 Move [X22+96], X8
	095 Move X9, [X23+40]
	096 Move [X22+104], X9
	097 Compare X8, 0
	098 JumpIfEqual {179}
	099 Move X8, [X8+24]
	100 Move [X22+92], W8
	101 Move X8, [X23+56]
	102 Move [X22+112], X8
	103 Move X8, [X23+48]
	104 Move [X22+120], X8
	105 Move X0, [X20+64]
	106 Compare X0, 0
	107 JumpIfEqual {179}
	108 Move X1, X31
	109 Call SerStack.PeekPeek, X0
	110 Compare X0, 0
	111 JumpIfEqual {120}
	112 Move X8, 0xE69000
	113 Move X8, [X8+104]
	114 Move X1, [X8]
	115 Move X8, [X0]
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Move W8, [X0+16]
	118 Compare W8, 0
	119 JumpIfEqual {127}
	120 Move X8, [X19+24]
	121 Move [X22+40], X8
	122 Compare X21, 0
	123 JumpIfEqual {179}
	124 Move W8, 2
	125 Move [X21+16], W8
	126 Move [X22+56], W31
	127 Compare X21, 0
	128 JumpIfEqual {179}
	129 Move W8, 3
	130 Move W9, 2
	131 Move [X21+16], W8
	132 Move [X21+32], W9
	133 Move [X22+56], W9
	134 Move W10, [X0+48]
	135 NotImplemented "Instruction CMP not yet implemented."
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Move X8, [X0+40]
	138 Move W9, 2
	139 Move [X21+28], W9
	140 Move [X21+40], X8
	141 Move [X21+28], W8
	142 Move [X22+52], W9
	143 Move W8, 1
	144 Move [X21+20], W8
	145 Move X0, [X20+16]
	146 Compare X0, 0
	147 JumpIfEqual {179}
	148 NotImplemented "Instruction LDRSW not yet implemented."
	149 Call ObjectReader.GetId, X0, X1
	150 Move [X21+88], X0
	151 Add X1, X21, 272
	152 Add X2, X21, 264
	153 Move X0, X23
	154 Call ObjectMap.CreateObjectInfo, X0, X1, X2
	155 Move [X21+216], X0
	156 Move X8, [X21+88]
	157 Move X9, [X20+32]
	158 NotImplemented "Instruction CMP not yet implemented."
	159 Move W8, 1
	160 Move [X21+36], W8
	161 Move X8, [X19+24]
	162 Move [X21+64], X8
	163 Move X8, [X23+24]
	164 Move [X21+80], W31
	165 Move [X21+72], X8
	166 Move X0, [X20+16]
	167 Compare X0, 0
	168 JumpIfEqual {179}
	169 Move X1, X21
	170 Move X20, [X31+48]
	171 Move X19, [X31+56]
	172 Move X22, [X31+32]
	173 Move X21, [X31+40]
	174 Move X24, [X31+16]
	175 Move X23, [X31+24]
	176 Move X30, [X31+64]
	177 Call ObjectReader.Parse, X0, X1
	178 Return 
	179 Call 0x1C17F20
	180 Call 0x1C181E0
	181 Move X0, 0xE37000
	182 Move X0, [X0+2512]
	183 Call 0x1C17D08
	184 Move W1, 1
	185 Call 0x1C17D6C
	186 Move X20, X0
	187 Move X0, X19
	188 Call 0x19913C0
	189 Move X19, [X19+24]
	190 Move X0, 0xE37000
	191 Move X0, [X0+2512]
	192 Call 0x1C17D08
	193 Move W1, 1
	194 Call 0x1C17D6C
	195 Move X20, X0
	196 Move X0, X19
	197 Call 0x19913C0
	198 Move X0, X24
	199 Move X1, X31
	200 Call Int32.ToString, X0
	201 Move X21, X0
	202 Move X0, X19
	203 Call 0x19913C0
	204 Move X0, 0xE37000
	205 Move X19, [X19+24]
	206 Move X0, [X0+3544]
	207 Call 0x1C17D08
	208 Move X1, X0
	209 Move X0, X21
	210 Move X2, X19
	211 Move X3, X31
	212 Call String.Concat, X0, X1, X2
	213 Move X19, X0
	214 Move X0, X20
	215 Call 0x19913C0
	216 Move X0, X20
	217 Move X1, X19
	218 Call 0x19990B4
	219 Move X0, X20
	220 Move X1, X31
	221 Move X2, X19
	222 Call 0x1994444
	223 Move X0, 0xE69000
	224 Move X0, [X0+64]
	225 Call 0x1C17D08
	226 Move X1, X20
	227 Move X2, X31
	228 Call Environment.GetResourceString, X0, X1
	229 Move X19, X0
	230 Move X0, 0xE61000
	231 Move X0, [X0+736]
	232 Call 0x1C17D08
	233 Call 0x1C17F10
	234 Move X1, X19
	235 Move X2, X31
	236 Move X20, X0
	237 Call SerializationException..ctor, X0, X1
	238 Move X0, 0xE69000
	239 Move X0, [X0+1464]
	240 Call 0x1C17D08
	241 Move X1, X0
	242 Move X0, X20
	243 Call 0x1C17DEC
	244 Move X8, 0xE37000
	245 Move X8, [X8+2512]
	246 Move X19, X0
	247 Move X0, X8
	248 Call 0x1C17D08
	249 Move W1, 1
	250 Call 0x1C17D6C
	251 Move X20, X0
	252 Move X0, X19
	253 Call 0x19913C0
	254 Move W8, [X19+48]
	255 Move X0, 0xE69000
	256 Move [X31+12], W8
	257 Move X0, [X0+1344]
	258 Call 0x1C17D08
	259 Add X1, X31, 12
	260 Call 0x1C17E04
	261 Move X1, X31
	262 Call Enum.ToString, X0
	263 Move X19, X0
	264 Move X0, X20
	265 Call 0x19913C0
	266 Move X0, X20
	267 Move X1, X19
	268 Call 0x19990B4
	269 Move X0, X20
	270 Move X1, X31
	271 Move X2, X19
	272 Call 0x1994444
	273 Move X0, 0xE69000
	274 Move X0, [X0+1392]

Method: System.Void ReadObjectWithMapTyped(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum)

Disassembly:
	0x032BC1F4 LDR X8, [X8 + 0x2F8]
	0x032BC1F8 LDR X0, [X8]
	0x032BC1FC BL 0x1C16F10
	0x032BC200 MOV X1, X31
	0x032BC204 MOV X21, X0
	0x032BC208 BL 0x33BDD8C
	0x032BC20C STR X21, [X19 + 0xC0]
	0x032BC210 CBZ X21, 0x32BC340
	0x032BC214 MOV X0, X21
	0x032BC218 MOV X1, X19
	0x032BC21C MOV W2, W20
	0x032BC220 BL 0x32AE12C
	0x032BC224 LDR X8, [X19 + 0xC0]
	0x032BC228 CBZ X8, 0x32BC340
	0x032BC22C LDR X0, [X19 + 0x40]
	0x032BC230 CBZ X0, 0x32BC340
	0x032BC234 MOV X1, X31
	0x032BC238 BL 0x32BD930
	0x032BC23C MOV X20, X0
	0x032BC240 CBZ X0, 0x32BC25C
	0x032BC244 ADRP X8, 0xE69000
	0x032BC248 LDR X8, [X8 + 0x68]
	0x032BC24C LDR X1, [X8]
	0x032BC250 LDR X8, [X20]
	0x032BC254 CMP X8, X1
	0x032BC258 B.NE 0x32BC344
	0x032BC25C MOV X0, X19
	0x032BC260 BL 0x32BA8FC
	0x032BC264 CBZ X0, 0x32BC340
	0x032BC268 MOV X1, X31
	0x032BC26C BL 0x32BD694
	0x032BC270 MOV X0, X19
	0x032BC274 BL 0x32BA8FC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1121000
	006 Move W8, [X21+2110]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xE6A000
	014 Move X0, [X0+728]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2110], W8
	018 Move X21, [X19+136]
	019 Compare X21, 0
	020 JumpIfEqual {22}
	021 Move [X21+16], W20
	022 Move X8, 0xE6A000
	023 Move X8, [X8+728]
	024 Move X0, [X8]
	025 Call 0x1C17F10
	026 Move X1, X31
	027 Move X21, X0
	028 Call Object..ctor, X0
	029 Move [X21+16], W20
	030 Move [X19+136], X21
	031 Move X0, X21
	032 Move X1, X19
	033 Call BinaryObjectWithMapTyped.Read, X0, X1
	034 Move X1, [X19+136]
	035 Move X0, X19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Call __BinaryParser.ReadObjectWithMapTyped, X0, X1
	041 Return 

Method: System.Void ReadObjectWithMapTyped(System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMapTyped record)

Disassembly:
	0x032BDF88 MOVZ W1, 0x4
	0x032BDF8C BL 0x1C16D6C
	0x032BDF90 STR X0, [X19 + 0x18]
	0x032BDF94 MOV X0, X19
	0x032BDF98 LDP X20, X19, [X31 + 0x10]
	0x032BDF9C MOV X1, X31
	0x032BDFA0 LDP X30, X21, [X31], #0x20
	0x032BDFA4 B 0x33BDD8C
	0x032BDFA8 STR X30, [X31 - 0x30]!
	0x032BDFAC STP X22, X21, [X31 + 0x10]
	0x032BDFB0 STP X20, X19, [X31 + 0x20]
	0x032BDFB4 ADRP X22, 0x111F000
	0x032BDFB8 ADRP X21, 0xE37000
	0x032BDFBC LDRB W8, [X22 + 0x855]
	0x032BDFC0 LDR X21, [X21 + 0xE58]
	0x032BDFC4 MOV X19, X1
	0x032BDFC8 MOV X20, X0
	0x032BDFCC TBNZ X8, 0x0, 0x32BDFE4
	0x032BDFD0 ADRP X0, 0xE37000
	0x032BDFD4 LDR X0, [X0 + 0xE58]
	0x032BDFD8 BL 0x1C16CF4
	0x032BDFDC MOVZ W8, 0x1
	0x032BDFE0 STRB W8, [X22 + 0x855]
	0x032BDFE4 LDR X0, [X21]
	0x032BDFE8 MOVZ W1, 0x10
	0x032BDFEC BL 0x1C16D6C
	0x032BDFF0 STR X0, [X20 + 0x10]
	0x032BDFF4 LDR X0, [X21]
	0x032BDFF8 MOVZ W1, 0x4
	0x032BDFFC BL 0x1C16D6C
	0x032BE000 STR X0, [X20 + 0x18]
	0x032BE004 MOV X0, X20
	0x032BE008 MOV X1, X31
	0x032BE00C BL 0x33BDD8C
	0x032BE010 CBZ X19, 0x32BE080
	0x032BE014 LDR X8, [X19 + 0x10]
	0x032BE018 CBZ X8, 0x32BE080
	0x032BE01C LDR X0, [X21]
	0x032BE020 LDR W1, [X8 + 0x18]
	0x032BE024 BL 0x1C16D6C
	0x032BE028 STR X0, [X20 + 0x10]
	0x032BE02C MOV X1, X0
	0x032BE030 LDR X0, [X19 + 0x10]
	0x032BE034 CBZ X0, 0x32BE080
	0x032BE038 MOV W2, W31
	0x032BE03C MOV X3, X31
	0x032BE040 BL 0x339FC34
	0x032BE044 LDR X8, [X19 + 0x18]
	0x032BE048 CBZ X8, 0x32BE080
	0x032BE04C LDR X0, [X21]
	0x032BE050 LDR W1, [X8 + 0x18]
	0x032BE054 BL 0x1C16D6C
	0x032BE058 STR X0, [X20 + 0x18]
	0x032BE05C MOV X1, X0
	0x032BE060 LDR X0, [X19 + 0x18]
	0x032BE064 CBZ X0, 0x32BE080
	0x032BE068 LDP X20, X19, [X31 + 0x20]
	0x032BE06C LDP X22, X21, [X31 + 0x10]
	0x032BE070 MOV W2, W31
	0x032BE074 MOV X3, X31
	0x032BE078 LDR X30, [X31], #0x30
	0x032BE07C B 0x339FC34
	0x032BE080 BL 0x1C16F20
	0x032BE084 STP X30, X21, [X31 - 0x20]!
	0x032BE088 STP X20, X19, [X31 + 0x10]
	0x032BE08C ADRP X20, 0x111E000
	0x032BE090 ADRP X21, 0xE67000
	0x032BE094 LDRB W8, [X20 + 0x856]
	0x032BE098 LDR X21, [X21 + 0x480]
	0x032BE09C MOV X19, X0
	0x032BE0A0 TBNZ X8, 0x0, 0x32BE0B8
	0x032BE0A4 ADRP X0, 0xE67000
	0x032BE0A8 LDR X0, [X0 + 0x480]
	0x032BE0AC BL 0x1C16CF4
	0x032BE0B0 MOVZ W8, 0x1
	0x032BE0B4 STRB W8, [X20 + 0x856]
	0x032BE0B8 LDR X0, [X21]
	0x032BE0BC BL 0x1C16F10
	0x032BE0C0 MOV X1, X19
	0x032BE0C4 MOV X20, X0
	0x032BE0C8 BL 0x32BDFA8
	0x032BE0CC MOV X0, X20
	0x032BE0D0 LDP X20, X19, [X31 + 0x10]
	0x032BE0D4 LDP X30, X21, [X31], #0x20
	0x032BE0D8 RET
	0x032BE0DC STR X30, [X31 - 0x10]!
	0x032BE0E0 TBNZ X1, 0x1F, 0x32BE104
	0x032BE0E4 LDR X8, [X0 + 0x10]
	0x032BE0E8 CBZ X8, 0x32BE14C
	0x032BE0EC LDR W9, [X8 + 0x18]
	0x032BE0F0 SUB W10, W9, 0x1
	0x032BE0F4 CMP W10, W1
	0x032BE0F8 B.GE 0x32BE134
	0x032BE0FC MOV W0, W31
	0x032BE100 B 0x32BE144
	0x032BE104 LDR X8, [X0 + 0x18]
	0x032BE108 CBZ X8, 0x32BE14C
	0x032BE10C LDR W10, [X8 + 0x18]
	0x032BE110 SUB W9, W31, W1
	0x032BE114 MOV W0, W31
	0x032BE118 SUB W11, W10, 0x1
	0x032BE11C CMP W11, W9
	0x032BE120 B.LT 0x32BE144
	0x032BE124 CMP W9, W10
	0x032BE128 B.CS 0x32BE150
	0x032BE12C ADD X8, X8, W9, 0x2, SXTW
	0x032BE130 B 0x32BE140
	0x032BE134 CMP W9, W1
	0x032BE138 B.LS 0x32BE150
	0x032BE13C ADD X8, X8, W1, 0x2, UXTW
	0x032BE140 LDR W0, [X8 + 0x20]
	0x032BE144 LDR X30, [X31], #0x10
	0x032BE148 RET
	0x032BE14C BL 0x1C16F20
	0x032BE150 BL 0x1C16F28
	0x032BE154 STR X30, [X31 - 0x30]!
	0x032BE158 STP X22, X21, [X31 + 0x10]
	0x032BE15C STP X20, X19, [X31 + 0x20]
	0x032BE160 MOV W19, W2
	0x032BE164 MOV W20, W1
	0x032BE168 MOV X21, X0
	0x032BE16C TBNZ X1, 0x1F, 0x32BE1B0
	0x032BE170 LDR X8, [X21 + 0x10]
	0x032BE174 CBZ X8, 0x32BE204
	0x032BE178 LDR W9, [X8 + 0x18]
	0x032BE17C SUB W9, W9, 0x1
	0x032BE180 CMP W9, W20
	0x032BE184 B.GE 0x32BE19C
	0x032BE188 MOV X0, X21
	0x032BE18C MOV W1, W20
	0x032BE190 BL 0x32BE20C
	0x032BE194 LDR X8, [X21 + 0x10]
	0x032BE198 CBZ X8, 0x32BE204
	0x032BE19C LDR W9, [X8 + 0x18]
	0x032BE1A0 CMP W9, W20
	0x032BE1A4 B.LS 0x32BE208
	0x032BE1A8 ADD X8, X8, W20, 0x2, UXTW
	0x032BE1AC B 0x32BE1F0
	0x032BE1B0 LDR X8, [X21 + 0x18]
	0x032BE1B4 CBZ X8, 0x32BE204
	0x032BE1B8 LDR W9, [X8 + 0x18]
	0x032BE1BC SUB W22, W31, W20
	0x032BE1C0 SUB W9, W9, 0x1
	0x032BE1C4 CMP W9, W22
	0x032BE1C8 B.GE 0x32BE1E0
	0x032BE1CC MOV X0, X21
	0x032BE1D0 MOV W1, W20
	0x032BE1D4 BL 0x32BE20C
	0x032BE1D8 LDR X8, [X21 + 0x18]
	0x032BE1DC CBZ X8, 0x32BE204
	0x032BE1E0 LDR W9, [X8 + 0x18]
	0x032BE1E4 CMP W22, W9
	0x032BE1E8 B.CS 0x32BE208
	0x032BE1EC ADD X8, X8, W22, 0x2, SXTW
	0x032BE1F0 STR W19, [X8 + 0x20]!
	0x032BE1F4 LDP X20, X19, [X31 + 0x20]
	0x032BE1F8 LDP X22, X21, [X31 + 0x10]
	0x032BE1FC LDR X30, [X31], #0x30
	0x032BE200 RET
	0x032BE204 BL 0x1C16F20
	0x032BE208 BL 0x1C16F28
	0x032BE20C STR X30, [X31 - 0x30]!
	0x032BE210 STP X22, X21, [X31 + 0x10]
	0x032BE214 STP X20, X19, [X31 + 0x20]
	0x032BE218 ADRP X21, 0x111E000
	0x032BE21C LDRB W8, [X21 + 0x857]
	0x032BE220 MOV W20, W1
	0x032BE224 MOV X19, X0
	0x032BE228 TBNZ X8, 0x0, 0x32BE24C
	0x032BE22C ADRP X0, 0xE36000
	0x032BE230 LDR X0, [X0 + 0xE58]
	0x032BE234 BL 0x1C16CF4
	0x032BE238 ADRP X0, 0xE35000
	0x032BE23C LDR X0, [X0 + 0x5A8]
	0x032BE240 BL 0x1C16CF4
	0x032BE244 MOVZ W8, 0x1
	0x032BE248 STRB W8, [X21 + 0x857]
	0x032BE24C ADRP X8, 0xE35000
	0x032BE250 ADRP X21, 0xE36000
	0x032BE254 LDR X8, [X8 + 0x5A8]
	0x032BE258 LDR X21, [X21 + 0xE58]
	0x032BE25C TBNZ X20, 0x1F, 0x32BE2C0
	0x032BE260 LDR X22, [X19 + 0x10]!
	0x032BE264 CBZ X22, 0x32BE334
	0x032BE268 LDR X0, [X8]
	0x032BE26C LDR W8, [X0 + 0xE0]
	0x032BE270 CBNZ W8, 0x32BE278
	0x032BE274 BL 0x1C16DFC
	0x032BE278 LDR W8, [X22 + 0x18]
	0x032BE27C ADD W1, W20, 0x1
	0x032BE280 UBFM W0, W8, 0x1F, 0x1E
	0x032BE284 MOV X2, X31
	0x032BE288 BL 0x337EDF0
	0x032BE28C MOV W1, W0
	0x032BE290 LDR X0, [X21]
	0x032BE294 BL 0x1C16D6C
	0x032BE298 MOV X20, X0
	0x032BE29C LDR X0, [X19]
	0x032BE2A0 CBZ X0, 0x32BE338
	0x032BE2A4 LDR W4, [X0 + 0x18]
	0x032BE2A8 MOV W1, W31
	0x032BE2AC MOV X2, X20
	0x032BE2B0 MOV W3, W31
	0x032BE2B4 MOV X5, X31
	0x032BE2B8 BL 0x339FCE8
	0x032BE2BC B 0x32BE320
	0x032BE2C0 LDR X22, [X19 + 0x18]!
	0x032BE2C4 CBZ X22, 0x32BE33C
	0x032BE2C8 LDR X0, [X8]
	0x032BE2CC LDR W8, [X0 + 0xE0]
	0x032BE2D0 CBNZ W8, 0x32BE2D8
	0x032BE2D4 BL 0x1C16DFC
	0x032BE2D8 LDR W8, [X22 + 0x18]
	0x032BE2DC MOVZ W9, 0x1
	0x032BE2E0 SUB W1, W9, W20
	0x032BE2E4 UBFM W0, W8, 0x1F, 0x1E
	0x032BE2E8 MOV X2, X31
	0x032BE2EC BL 0x337EDF0
	0x032BE2F0 MOV W1, W0
	0x032BE2F4 LDR X0, [X21]
	0x032BE2F8 BL 0x1C16D6C
	0x032BE2FC MOV X20, X0
	0x032BE300 LDR X0, [X19]
	0x032BE304 CBZ X0, 0x32BE340
	0x032BE308 LDR W4, [X0 + 0x18]
	0x032BE30C MOV W1, W31
	0x032BE310 MOV X2, X20
	0x032BE314 MOV W3, W31
	0x032BE318 MOV X5, X31
	0x032BE31C BL 0x339FCE8
	0x032BE320 STR X20, [X19]
	0x032BE324 LDP X20, X19, [X31 + 0x20]
	0x032BE328 LDP X22, X21, [X31 + 0x10]
	0x032BE32C LDR X30, [X31], #0x30
	0x032BE330 RET
	0x032BE334 BL 0x1C16F20
	0x032BE338 BL 0x1C16F20
	0x032BE33C BL 0x1C16F20
	0x032BE340 BL 0x1C16F20
	0x032BE344 B 0x32BE368
	0x032BE348 B 0x32BE368
	0x032BE34C B 0x32BE368
	0x032BE350 B 0x32BE368
	0x032BE354 B 0x32BE368
	0x032BE358 B 0x32BE368
	0x032BE35C B 0x32BE368
	0x032BE360 B 0x32BE368
	0x032BE364 B 0x32BE368
	0x032BE368 MOV X19, X0
	0x032BE36C CMP W1, 0x1
	0x032BE370 B.NE 0x32BE418
	0x032BE374 MOV X0, X19
	0x032BE378 BL 0x3EB1AD0
	0x032BE37C MOV X19, X0
	0x032BE380 ADRP X0, 0xE35000
	0x032BE384 LDR X0, [X0 + 0x7D0]
	0x032BE388 BL 0x1C16D08
	0x032BE38C LDR X8, [X19]
	0x032BE390 LDR X1, [X8]
	0x032BE394 BL 0x1C17270
	0x032BE398 TBZ X0, 0x0, 0x32BE3F0
	0x032BE39C BL 0x3EB1AE0
	0x032BE3A0 ADRP X0, 0xE65000
	0x032BE3A4 LDR X0, [X0 + 0xCE8]
	0x032BE3A8 BL 0x1C16D08
	0x032BE3AC MOV X1, X31
	0x032BE3B0 BL 0x33BDD84
	0x032BE3B4 MOV X19, X0
	0x032BE3B8 ADRP X0, 0xE5F000

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], X29
	003 Move [X31+40], X30
	004 Move [X31+48], X28
	005 Move [X31+56], X27
	006 Move [X31+64], X26
	007 Move [X31+72], X25
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X20, 0x1120000
	015 Move W8, [X20+2111]
	016 Move X19, X1
	017 Move X29, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {30}
	022 Move X0, 0xE69000
	023 Move X0, [X0+56]
	024 Call 0x1C17CF4
	025 Move X0, 0xE69000
	026 Move X0, [X0+104]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+2111], W8
	030 Move X0, X29
	031 Call __BinaryParser.GetOp, X0
	032 Compare X0, 0
	033 JumpIfEqual {194}
	034 Move X22, X0
	035 Move X0, [X29+64]
	036 Compare X0, 0
	037 JumpIfEqual {194}
	038 Move X21, [X22+128]
	039 Move X1, X22
	040 Move X2, X31
	041 Call SerStack.Push, X0, X1
	042 Compare X19, 0
	043 JumpIfEqual {194}
	044 Move W8, [X19+16]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X24, X19
	048 Add X24, X24, 72
	049 Move W8, [X24]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X0, X29
	052 Call __BinaryParser.get_AssemIdToAssemblyTable, X0
	053 Compare X0, 0
	054 JumpIfEqual {194}
	055 Move W1, [X24]
	056 Move X2, X31
	057 Call SizedArray.get_Item, X0, X1
	058 Compare X0, 0
	059 JumpIfEqual {205}
	060 Move X8, 0xE68000
	061 Move X8, [X8+56]
	062 Move X9, X0
	063 Move X1, [X8]
	064 Move X8, [X0]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X0, X29
	067 Call __BinaryParser.get_SystemAssemblyInfo, X0
	068 Move [X31+16], X0
	069 Move [X31+16], X31
	070 Move X24, [X19+24]
	071 Move X25, [X19+40]
	072 Move X26, [X19+48]
	073 Move X27, [X19+56]
	074 Move X28, [X19+64]
	075 Move X23, [X29+16]
	076 Move W20, [X19+20]
	077 Move X0, X29
	078 Call __BinaryParser.get_AssemIdToAssemblyTable, X0
	079 Move X7, [X31+16]
	080 Move [X31], X0
	081 Move X0, X24
	082 Move X1, X25
	083 Move X2, X26
	084 Move X3, X27
	085 Move X4, X28
	086 Move X5, X23
	087 Move W6, W20
	088 Call ObjectMap.Create, X0, X1, X2, X3, X4, X5, X6, X7, X8
	089 Move X23, X0
	090 Move X0, X29
	091 Call __BinaryParser.get_ObjectMapIdTable, X0
	092 Compare X0, 0
	093 JumpIfEqual {194}
	094 Move W1, [X19+20]
	095 Move X2, X23
	096 Move X3, X31
	097 Call SizedArray.set_Item, X0, X1, X2
	098 Move W8, 1
	099 Move [X22+48], W8
	100 Compare X23, 0
	101 JumpIfEqual {194}
	102 Move X8, [X23+32]
	103 Move [X22+96], X8
	104 Move X9, [X23+40]
	105 Move [X22+104], X9
	106 Compare X8, 0
	107 JumpIfEqual {194}
	108 Move X8, [X8+24]
	109 Move [X22+92], W8
	110 Move X8, [X23+56]
	111 Move [X22+112], X8
	112 Move X8, [X23+48]
	113 Move [X22+120], X8
	114 Move X0, [X29+64]
	115 Compare X0, 0
	116 JumpIfEqual {194}
	117 Move X1, X31
	118 Call SerStack.PeekPeek, X0
	119 Compare X0, 0
	120 JumpIfEqual {129}
	121 Move X8, 0xE68000
	122 Move X8, [X8+104]
	123 Move X1, [X8]
	124 Move X8, [X0]
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Move W8, [X0+16]
	127 Compare W8, 0
	128 JumpIfEqual {177}
	129 Move X8, [X19+24]
	130 Move [X22+40], X8
	131 Compare X21, 0
	132 JumpIfEqual {194}
	133 Move W8, 2
	134 Move [X21+16], W8
	135 Move [X22+56], W31
	136 Move W8, 1
	137 Add X1, X21, 272
	138 Add X2, X21, 264
	139 Move X0, X23
	140 Move [X21+20], W8
	141 Call ObjectMap.CreateObjectInfo, X0, X1, X2
	142 Move [X21+216], X0
	143 Move X0, [X29+16]
	144 Compare X0, 0
	145 JumpIfEqual {194}
	146 NotImplemented "Instruction LDRSW not yet implemented."
	147 Call ObjectReader.GetId, X0, X1
	148 Move [X21+88], X0
	149 Move X8, [X29+32]
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Move W8, 1
	152 Move [X21+36], W8
	153 Move X8, [X19+24]
	154 Move [X21+64], X8
	155 Move X8, [X23+24]
	156 Move [X21+80], W31
	157 Move [X21+72], X8
	158 Move X0, [X29+16]
	159 Compare X0, 0
	160 JumpIfEqual {194}
	161 Move X1, X21
	162 Move X20, [X31+112]
	163 Move X19, [X31+120]
	164 Move X22, [X31+96]
	165 Move X21, [X31+104]
	166 Move X24, [X31+80]
	167 Move X23, [X31+88]
	168 Move X26, [X31+64]
	169 Move X25, [X31+72]
	170 Move X28, [X31+48]
	171 Move X27, [X31+56]
	172 Move X29, [X31+32]
	173 Move X30, [X31+40]
	174 Add X31, X31, 128
	175 Call ObjectReader.Parse, X0, X1
	176 Return 
	177 Compare X21, 0
	178 JumpIfEqual {194}
	179 Move W8, 3
	180 Move W9, 2
	181 Move [X21+16], W8
	182 Move [X21+32], W9
	183 Move [X22+56], W9
	184 Move W9, [X0+48]
	185 NotImplemented "Instruction CMP not yet implemented."
	186 NotImplemented "Instruction CMP not yet implemented."
	187 Move X8, [X0+40]
	188 Move W9, 2
	189 Move [X21+28], W9
	190 Move [X21+40], X8
	191 Move [X22+52], W9
	192 Move [X21+28], W8
	193 Move [X22+52], W8
	194 Call 0x1C17F20
	195 Call 0x1C181E0
	196 Move X0, 0xE36000
	197 Move X0, [X0+2512]
	198 Call 0x1C17D08
	199 Move W1, 1
	200 Call 0x1C17D6C
	201 Move X20, X0
	202 Move X0, X19
	203 Call 0x19913C0
	204 Move X19, [X19+24]
	205 Move X0, 0xE36000
	206 Move X0, [X0+2512]
	207 Call 0x1C17D08
	208 Move W1, 1
	209 Call 0x1C17D6C
	210 Move X20, X0
	211 Move X0, X19
	212 Call 0x19913C0
	213 Move X0, X24
	214 Move X1, X31
	215 Call Int32.ToString, X0
	216 Move X21, X0
	217 Move X0, X19
	218 Call 0x19913C0
	219 Move X0, 0xE36000
	220 Move X19, [X19+24]
	221 Move X0, [X0+3544]
	222 Call 0x1C17D08
	223 Move X1, X0
	224 Move X0, X21
	225 Move X2, X19
	226 Move X3, X31
	227 Call String.Concat, X0, X1, X2
	228 Move X19, X0
	229 Move X0, X20
	230 Call 0x19913C0
	231 Move X0, X20
	232 Move X1, X19
	233 Call 0x19990B4
	234 Move X0, X20
	235 Move X1, X31
	236 Move X2, X19
	237 Call 0x1994444
	238 Move X0, 0xE67000
	239 Move X0, [X0+3984]
	240 Call 0x1C17D08
	241 Move X1, X20
	242 Move X2, X31
	243 Call Environment.GetResourceString, X0, X1
	244 Move X19, X0
	245 Move X0, 0xE60000
	246 Move X0, [X0+736]
	247 Call 0x1C17D08
	248 Call 0x1C17F10
	249 Move X1, X19
	250 Move X2, X31
	251 Move X20, X0
	252 Call SerializationException..ctor, X0, X1
	253 Move X0, 0xE68000
	254 Move X0, [X0+1472]
	255 Call 0x1C17D08
	256 Move X1, X0
	257 Move X0, X20
	258 Call 0x1C17DEC
	259 Move X8, 0xE36000
	260 Move X8, [X8+2512]
	261 Move X19, X0
	262 Move X0, X8
	263 Call 0x1C17D08
	264 Move W1, 1
	265 Call 0x1C17D6C
	266 Move X20, X0
	267 Move X0, X19
	268 Call 0x19913C0
	269 Move W8, [X19+48]
	270 Move X0, 0xE68000
	271 Move [X31+28], W8
	272 Move X0, [X0+1344]
	273 Call 0x1C17D08
	274 Add X1, X31, 28
	275 Call 0x1C17E04
	276 Move X1, X31
	277 Call Enum.ToString, X0
	278 Move X19, X0
	279 Move X0, X20
	280 Call 0x19913C0
	281 Move X0, X20
	282 Move X1, X19
	283 Call 0x19990B4
	284 Move X0, X20
	285 Move X1, X31
	286 Move X2, X19
	287 Call 0x1994444
	288 Move X0, 0xE68000
	289 Move X0, [X0+1392]

Method: System.Void ReadObjectString(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum)

Disassembly:
	0x032BC278 CBZ X0, 0x32BC340
	0x032BC27C MOVZ W8, 0x3
	0x032BC280 STR W8, [X0 + 0x10]
	0x032BC284 MOV X0, X19
	0x032BC288 BL 0x32BA8FC
	0x032BC28C CBZ X0, 0x32BC340
	0x032BC290 MOVZ W8, 0x4
	0x032BC294 STR W8, [X0 + 0x20]
	0x032BC298 CBZ X20, 0x32BC340
	0x032BC29C LDR W21, [X20 + 0x30]
	0x032BC2A0 MOV X0, X19
	0x032BC2A4 BL 0x32BA8FC
	0x032BC2A8 CBZ X0, 0x32BC340
	0x032BC2AC CMP W21, 0x1
	0x032BC2B0 B.NE 0x32BC2E8
	0x032BC2B4 MOVZ W8, 0x2
	0x032BC2B8 STR W8, [X0 + 0x1C]
	0x032BC2BC MOV X0, X19
	0x032BC2C0 BL 0x32BA8FC
	0x032BC2C4 CBZ X0, 0x32BC340
	0x032BC2C8 LDR X8, [X20 + 0x28]
	0x032BC2CC STR X8, [X0 + 0x28]
	0x032BC2D0 MOV X0, X19
	0x032BC2D4 BL 0x32BA8FC
	0x032BC2D8 CBZ X0, 0x32BC340
	0x032BC2DC LDR X8, [X20 + 0x40]
	0x032BC2E0 STR X8, [X0 + 0x48]
	0x032BC2E4 B 0x32BC31C
	0x032BC2E8 MOVZ W8, 0x3
	0x032BC2EC STR W8, [X0 + 0x1C]
	0x032BC2F0 MOV X0, X19
	0x032BC2F4 BL 0x32BA8FC
	0x032BC2F8 LDR X8, [X19 + 0xC0]
	0x032BC2FC CBZ X8, 0x32BC340
	0x032BC300 CBZ X0, 0x32BC340
	0x032BC304 LDR W8, [X8 + 0x10]
	0x032BC308 STR W8, [X0 + 0x118]
	0x032BC30C LDR W9, [X20 + 0x14]
	0x032BC310 ADD W8, W8, W9
	0x032BC314 SUB W8, W8, 0x1
	0x032BC318 STR W8, [X20 + 0x14]
	0x032BC31C LDR X20, [X19 + 0x10]
	0x032BC320 MOV X0, X19
	0x032BC324 BL 0x32BA8FC
	0x032BC328 CBZ X20, 0x32BC340
	0x032BC32C MOV X1, X0
	0x032BC330 MOV X0, X20
	0x032BC334 LDP X20, X19, [X31 + 0x10]
	0x032BC338 LDP X30, X21, [X31], #0x20
	0x032BC33C B 0x32B6068
	0x032BC340 BL 0x1C16F20
	0x032BC344 MOV X0, X20
	0x032BC348 BL 0x1C171E0
	0x032BC34C STP X30, X21, [X31 - 0x20]!
	0x032BC350 STP X20, X19, [X31 + 0x10]
	0x032BC354 ADRP X20, 0x1120000
	0x032BC358 ADRP X21, 0xE69000
	0x032BC35C LDRB W8, [X20 + 0x847]
	0x032BC360 LDR X21, [X21 + 0x1B8]
	0x032BC364 MOV X19, X0
	0x032BC368 TBNZ X8, 0x0, 0x32BC38C
	0x032BC36C ADRP X0, 0xE69000
	0x032BC370 LDR X0, [X0 + 0x2C0]
	0x032BC374 BL 0x1C16CF4
	0x032BC378 ADRP X0, 0xE69000
	0x032BC37C LDR X0, [X0 + 0x1B8]
	0x032BC380 BL 0x1C16CF4
	0x032BC384 MOVZ W8, 0x1
	0x032BC388 STRB W8, [X20 + 0x847]
	0x032BC38C LDR X0, [X21]
	0x032BC390 LDR W8, [X0 + 0xE0]
	0x032BC394 CBNZ W8, 0x32BC3A0
	0x032BC398 BL 0x1C16DFC
	0x032BC39C LDR X0, [X21]
	0x032BC3A0 LDR X8, [X0 + 0xB8]
	0x032BC3A4 LDR X20, [X8 + 0x8]
	0x032BC3A8 BL 0x1C16D44
	0x032BC3AC CBZ X20, 0x32BC3B8
	0x032BC3B0 LDR X0, [X21]
	0x032BC3B4 B 0x32BC3F4
	0x032BC3B8 ADRP X8, 0xE69000
	0x032BC3BC LDR X8, [X8 + 0x2C0]
	0x032BC3C0 LDR X0, [X8]
	0x032BC3C4 BL 0x1C16F10
	0x032BC3C8 MOV X1, X31
	0x032BC3CC MOV X20, X0
	0x032BC3D0 BL 0x33BDD8C
	0x032BC3D4 LDR X0, [X21]
	0x032BC3D8 LDR W8, [X0 + 0xE0]
	0x032BC3DC CBNZ W8, 0x32BC3E4
	0x032BC3E0 BL 0x1C16DFC
	0x032BC3E4 BL 0x1C16D44
	0x032BC3E8 LDR X0, [X21]
	0x032BC3EC LDR X8, [X0 + 0xB8]
	0x032BC3F0 STR X20, [X8 + 0x8]
	0x032BC3F4 LDR W8, [X0 + 0xE0]
	0x032BC3F8 CBNZ W8, 0x32BC404
	0x032BC3FC BL 0x1C16DFC
	0x032BC400 LDR X0, [X21]
	0x032BC404 LDR X8, [X0 + 0xB8]
	0x032BC408 LDR X20, [X8 + 0x8]
	0x032BC40C BL 0x1C16D44
	0x032BC410 CBZ X20, 0x32BC448
	0x032BC414 LDR X8, [X21]
	0x032BC418 LDR X8, [X8 + 0xB8]
	0x032BC41C LDR X20, [X8 + 0x8]
	0x032BC420 BL 0x1C16D44
	0x032BC424 CBZ X20, 0x32BC448
	0x032BC428 LDR X0, [X19 + 0x40]
	0x032BC42C CBZ X0, 0x32BC448
	0x032BC430 MOV X1, X31
	0x032BC434 BL 0x32BD9B4
	0x032BC438 TBZ X0, 0x0, 0x32BC44C
	0x032BC43C LDP X20, X19, [X31 + 0x10]
	0x032BC440 LDP X30, X21, [X31], #0x20
	0x032BC444 RET
	0x032BC448 BL 0x1C16F20
	0x032BC44C ADRP X0, 0xE69000
	0x032BC450 LDR X0, [X0 + 0x3E0]
	0x032BC454 BL 0x1C16D08
	0x032BC458 MOV X1, X31
	0x032BC45C BL 0x33BDD84
	0x032BC460 MOV X19, X0
	0x032BC464 ADRP X0, 0xE61000
	0x032BC468 LDR X0, [X0 + 0x2E0]
	0x032BC46C BL 0x1C16D08
	0x032BC470 BL 0x1C16F10
	0x032BC474 MOV X1, X19
	0x032BC478 MOV X2, X31
	0x032BC47C MOV X20, X0
	0x032BC480 BL 0x329F100
	0x032BC484 ADRP X0, 0xE69000
	0x032BC488 LDR X0, [X0 + 0x5A8]
	0x032BC48C BL 0x1C16D08
	0x032BC490 MOV X1, X0
	0x032BC494 MOV X0, X20
	0x032BC498 BL 0x1C16DEC
	0x032BC49C RET
	0x032BC4A0 STR X30, [X31 - 0x30]!
	0x032BC4A4 STP X22, X21, [X31 + 0x10]
	0x032BC4A8 STP X20, X19, [X31 + 0x20]
	0x032BC4AC ADRP X20, 0x1120000
	0x032BC4B0 LDRB W8, [X20 + 0x844]
	0x032BC4B4 MOV X19, X0
	0x032BC4B8 TBNZ X8, 0x0, 0x32BC4F4
	0x032BC4BC ADRP X0, 0xE68000
	0x032BC4C0 LDR X0, [X0 + 0xF80]
	0x032BC4C4 BL 0x1C16CF4
	0x032BC4C8 ADRP X0, 0xE68000
	0x032BC4CC LDR X0, [X0 + 0xF88]
	0x032BC4D0 BL 0x1C16CF4
	0x032BC4D4 ADRP X0, 0xE69000
	0x032BC4D8 LDR X0, [X0 + 0x318]
	0x032BC4DC BL 0x1C16CF4
	0x032BC4E0 ADRP X0, 0xE69000
	0x032BC4E4 LDR X0, [X0 + 0x68]
	0x032BC4E8 BL 0x1C16CF4
	0x032BC4EC MOVZ W8, 0x1
	0x032BC4F0 STRB W8, [X20 + 0x844]
	0x032BC4F4 LDR X0, [X19 + 0x40]
	0x032BC4F8 CBZ X0, 0x32BC6E4
	0x032BC4FC MOV X1, X31
	0x032BC500 BL 0x32BD930
	0x032BC504 MOV X20, X0
	0x032BC508 CBZ X0, 0x32BC524
	0x032BC50C ADRP X8, 0xE69000
	0x032BC510 LDR X8, [X8 + 0x68]
	0x032BC514 LDR X1, [X8]
	0x032BC518 LDR X8, [X20]
	0x032BC51C CMP X8, X1
	0x032BC520 B.NE 0x32BC6E8
	0x032BC524 LDR X21, [X19 + 0xB0]
	0x032BC528 CBNZ X21, 0x32BC550
	0x032BC52C ADRP X8, 0xE69000
	0x032BC530 LDR X8, [X8 + 0x318]
	0x032BC534 LDR X0, [X8]
	0x032BC538 BL 0x1C16F10
	0x032BC53C MOV X1, X31
	0x032BC540 MOV X21, X0
	0x032BC544 BL 0x33BDD8C
	0x032BC548 STR X21, [X19 + 0xB0]
	0x032BC54C CBZ X21, 0x32BC6E4
	0x032BC550 LDR X0, [X19 + 0x50]
	0x032BC554 CBZ X0, 0x32BC6E4
	0x032BC558 ADRP X22, 0xE68000
	0x032BC55C LDR X22, [X22 + 0xF88]
	0x032BC560 LDR X8, [X0]
	0x032BC564 LDR X1, [X22]
	0x032BC568 LDR X8, [X8 + 0x40]
	0x032BC56C LDR X9, [X1 + 0x40]
	0x032BC570 CMP X8, X9
	0x032BC574 B.NE 0x32BC6EC
	0x032BC578 BL 0x1C16E08
	0x032BC57C LDR W8, [X0]
	0x032BC580 STR W8, [X21 + 0x10]
	0x032BC584 LDR X0, [X19 + 0xB0]
	0x032BC588 CBZ X0, 0x32BC6E4
	0x032BC58C MOV X1, X19
	0x032BC590 BL 0x32ADFA4
	0x032BC594 LDR X8, [X19 + 0xB0]
	0x032BC598 CBZ X8, 0x32BC6E4
	0x032BC59C MOV X0, X19
	0x032BC5A0 BL 0x32BA8FC
	0x032BC5A4 CBZ X0, 0x32BC6E4
	0x032BC5A8 MOV X1, X31
	0x032BC5AC BL 0x32BD694
	0x032BC5B0 MOV X0, X19
	0x032BC5B4 BL 0x32BA8FC
	0x032BC5B8 LDR X8, [X19 + 0xB0]
	0x032BC5BC CBZ X8, 0x32BC6E4
	0x032BC5C0 CBZ X0, 0x32BC6E4
	0x032BC5C4 LDR X8, [X8 + 0x18]
	0x032BC5C8 STR X8, [X0 + 0x38]
	0x032BC5CC MOV X0, X19
	0x032BC5D0 BL 0x32BA8FC
	0x032BC5D4 CBZ X0, 0x32BC6E4
	0x032BC5D8 MOV X21, X0
	0x032BC5DC LDR X0, [X19 + 0x50]
	0x032BC5E0 CBZ X0, 0x32BC6E4
	0x032BC5E4 LDR X8, [X0]
	0x032BC5E8 LDR X1, [X22]
	0x032BC5EC LDR X8, [X8 + 0x40]
	0x032BC5F0 LDR X9, [X1 + 0x40]
	0x032BC5F4 CMP X8, X9
	0x032BC5F8 B.NE 0x32BC6EC
	0x032BC5FC BL 0x1C16E08
	0x032BC600 LDR W8, [X0]
	0x032BC604 MOV X0, X19
	0x032BC608 STR W8, [X21 + 0x50]
	0x032BC60C BL 0x32BA8FC
	0x032BC610 MOV X21, X0
	0x032BC614 MOV X0, X19
	0x032BC618 BL 0x32BA8FC
	0x032BC61C CBZ X0, 0x32BC6E4
	0x032BC620 ADRP X8, 0xE68000
	0x032BC624 LDR X8, [X8 + 0xF80]
	0x032BC628 LDR W22, [X0 + 0x50]
	0x032BC62C LDR X8, [X8]
	0x032BC630 LDR W9, [X8 + 0xE0]
	0x032BC634 CBNZ W9, 0x32BC640
	0x032BC638 MOV X0, X8
	0x032BC63C BL 0x1C16DFC
	0x032BC640 MOV W0, W22
	0x032BC644 BL 0x32AB414
	0x032BC648 CBZ X21, 0x32BC6E4
	0x032BC64C STR X0, [X21 + 0x48]
	0x032BC650 MOV X0, X19
	0x032BC654 BL 0x32BA8FC
	0x032BC658 CBZ X0, 0x32BC6E4
	0x032BC65C MOVZ W8, 0x3
	0x032BC660 STR W8, [X0 + 0x10]
	0x032BC664 MOV X0, X19
	0x032BC668 BL 0x32BA8FC
	0x032BC66C CBZ X0, 0x32BC6E4
	0x032BC670 MOVZ W8, 0x1
	0x032BC674 STR W8, [X0 + 0x20]
	0x032BC678 CBZ X20, 0x32BC6E4
	0x032BC67C LDR W21, [X20 + 0x30]
	0x032BC680 MOV X0, X19
	0x032BC684 BL 0x32BA8FC
	0x032BC688 CBZ X0, 0x32BC6E4
	0x032BC68C CMP W21, 0x1
	0x032BC690 B.NE 0x32BC6B4
	0x032BC694 MOVZ W8, 0x2
	0x032BC698 STR W8, [X0 + 0x1C]
	0x032BC69C MOV X0, X19
	0x032BC6A0 BL 0x32BA8FC
	0x032BC6A4 CBZ X0, 0x32BC6E4
	0x032BC6A8 LDR X8, [X20 + 0x28]
	0x032BC6AC STR X8, [X0 + 0x28]
	0x032BC6B0 B 0x32BC6BC
	0x032BC6B4 MOVZ W8, 0x3
	0x032BC6B8 STR W8, [X0 + 0x1C]
	0x032BC6BC LDR X20, [X19 + 0x10]
	0x032BC6C0 MOV X0, X19
	0x032BC6C4 BL 0x32BA8FC
	0x032BC6C8 CBZ X20, 0x32BC6E4
	0x032BC6CC MOV X1, X0
	0x032BC6D0 MOV X0, X20
	0x032BC6D4 LDP X20, X19, [X31 + 0x20]
	0x032BC6D8 LDP X22, X21, [X31 + 0x10]
	0x032BC6DC LDR X30, [X31], #0x30
	0x032BC6E0 B 0x32B6068
	0x032BC6E4 BL 0x1C16F20
	0x032BC6E8 MOV X0, X20
	0x032BC6EC BL 0x1C171E0
	0x032BC6F0 STP X30, X21, [X31 - 0x20]!
	0x032BC6F4 STP X20, X19, [X31 + 0x10]
	0x032BC6F8 ADRP X21, 0x1120000
	0x032BC6FC LDRB W8, [X21 + 0x84A]
	0x032BC700 MOV X19, X1
	0x032BC704 MOV X20, X0
	0x032BC708 TBNZ X8, 0x0, 0x32BC72C
	0x032BC70C ADRP X0, 0xE69000
	0x032BC710 LDR X0, [X0 + 0x1F8]
	0x032BC714 BL 0x1C16CF4
	0x032BC718 ADRP X0, 0xE69000
	0x032BC71C LDR X0, [X0 + 0x5B0]
	0x032BC720 BL 0x1C16CF4
	0x032BC724 MOVZ W8, 0x1
	0x032BC728 STRB W8, [X21 + 0x84A]
	0x032BC72C LDR X21, [X20 + 0x70]
	0x032BC730 CBNZ X21, 0x32BC764
	0x032BC734 ADRP X8, 0xE69000
	0x032BC738 LDR X8, [X8 + 0x1F8]
	0x032BC73C LDR X0, [X8]
	0x032BC740 BL 0x1C16F10
	0x032BC744 ADRP X8, 0xE69000
	0x032BC748 LDR X8, [X8 + 0x5B0]
	0x032BC74C MOV X2, X31
	0x032BC750 MOV X21, X0
	0x032BC754 LDR X1, [X8]
	0x032BC758 BL 0x32BD738
	0x032BC75C STR X21, [X20 + 0x70]
	0x032BC760 CBZ X21, 0x32BC77C
	0x032BC764 MOV X1, X19
	0x032BC768 LDP X20, X19, [X31 + 0x10]
	0x032BC76C MOV X0, X21
	0x032BC770 MOV X2, X31
	0x032BC774 LDP X30, X21, [X31], #0x20
	0x032BC778 B 0x32BD7AC
	0x032BC77C BL 0x1C16F20
	0x032BC780 STR X30, [X31 - 0x10]!
	0x032BC784 LDR X0, [X0 + 0x68]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x1121000
	009 Move W8, [X21+2112]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {36}
	016 Move X0, 0xE6A000
	017 Move X0, [X0+1376]
	018 Call 0x1C17CF4
	019 Move X0, 0xE6A000
	020 Move X0, [X0+768]
	021 Call 0x1C17CF4
	022 Move X0, 0xE69000
	023 Move X0, [X0+3968]
	024 Call 0x1C17CF4
	025 Move X0, 0xE6A000
	026 Move X0, [X0+104]
	027 Call 0x1C17CF4
	028 Move X0, 0xE3A000
	029 Move X0, [X0+632]
	030 Call 0x1C17CF4
	031 Move X0, 0xE6A000
	032 Move X0, [X0+1384]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X21+2112], W8
	036 Move X21, [X19+144]
	037 Compare X21, 0
	038 JumpIfNotEqual {47}
	039 Move X8, 0xE6A000
	040 Move X8, [X8+768]
	041 Move X0, [X8]
	042 Call 0x1C17F10
	043 Move X1, X31
	044 Move X21, X0
	045 Call Object..ctor, X0
	046 Move [X19+144], X21
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Compare X21, 0
	049 JumpIfEqual {268}
	050 Move X0, X21
	051 Move X1, X19
	052 Call BinaryObjectString.Read, X0, X1
	053 Move X8, [X19+144]
	054 Compare X8, 0
	055 JumpIfNotEqual {104}
	056 Move X20, [X19+152]
	057 Compare X20, 0
	058 JumpIfNotEqual {69}
	059 Move X8, 0xE6A000
	060 Move X8, [X8+1376]
	061 Move X0, [X8]
	062 Call 0x1C17F10
	063 Move X1, X31
	064 Move X20, X0
	065 Call Object..ctor, X0
	066 Move [X19+152], X20
	067 Compare X20, 0
	068 JumpIfEqual {268}
	069 Move X0, X20
	070 Move X1, X19
	071 Call BinaryCrossAppDomainString.Read, X0, X1
	072 Move X8, [X19+152]
	073 Compare X8, 0
	074 JumpIfEqual {268}
	075 Move X0, [X19+16]
	076 Compare X0, 0
	077 JumpIfEqual {268}
	078 Move W1, [X8+20]
	079 Move X20, [X19+144]
	080 Call ObjectReader.CrossAppDomainArray, X0, X1
	081 Compare X20, 0
	082 JumpIfEqual {268}
	083 Compare X0, 0
	084 JumpIfEqual {91}
	085 Move X8, 0xE3A000
	086 Move X8, [X8+632]
	087 Move X9, [X0]
	088 Move X8, [X8]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 NotImplemented "Instruction CSEL not yet implemented."
	091 Move X8, X31
	092 Move [X20+24], X8
	093 Move X8, [X19+144]
	094 Compare X8, 0
	095 JumpIfEqual {268}
	096 Move X9, [X8+24]
	097 Compare X9, 0
	098 JumpIfEqual {271}
	099 Move X9, [X19+152]
	100 Compare X9, 0
	101 JumpIfEqual {268}
	102 Move W9, [X9+16]
	103 Move [X8+16], W9
	104 Move X0, X19
	105 Call __BinaryParser.get_prs, X0
	106 Compare X0, 0
	107 JumpIfEqual {268}
	108 Move X1, X31
	109 Call ParseRecord.Init, X0
	110 Move X0, X19
	111 Call __BinaryParser.get_prs, X0
	112 Compare X0, 0
	113 JumpIfEqual {268}
	114 Move W8, 2
	115 Move [X0+16], W8
	116 Move X0, X19
	117 Call __BinaryParser.get_prs, X0
	118 Move X8, [X19+144]
	119 Compare X8, 0
	120 JumpIfEqual {268}
	121 Move X20, X0
	122 Move X0, [X19+16]
	123 Compare X0, 0
	124 JumpIfEqual {268}
	125 NotImplemented "Instruction LDRSW not yet implemented."
	126 Call ObjectReader.GetId, X0, X1
	127 Compare X20, 0
	128 JumpIfEqual {268}
	129 Move [X20+88], X0
	130 Move X0, X19
	131 Call __BinaryParser.get_prs, X0
	132 Compare X0, 0
	133 JumpIfEqual {268}
	134 Move X8, [X0+88]
	135 Move X9, [X19+32]
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Move X0, X19
	138 Call __BinaryParser.get_prs, X0
	139 Compare X0, 0
	140 JumpIfEqual {268}
	141 Move W8, 1
	142 Move [X0+36], W8
	143 Move X0, X19
	144 Call __BinaryParser.get_prs, X0
	145 Compare X0, 0
	146 JumpIfEqual {268}
	147 Move W8, 1
	148 Move [X0+20], W8
	149 Move X0, [X19+64]
	150 Compare X0, 0
	151 JumpIfEqual {268}
	152 Move X1, X31
	153 Call SerStack.Peek, X0
	154 Move X20, X0
	155 Compare X0, 0
	156 JumpIfEqual {162}
	157 Move X8, 0xE6A000
	158 Move X8, [X8+104]
	159 Move X1, [X8]
	160 Move X8, [X20]
	161 NotImplemented "Instruction CMP not yet implemented."
	162 Move X0, X19
	163 Call __BinaryParser.get_prs, X0
	164 Move X8, [X19+144]
	165 Compare X8, 0
	166 JumpIfEqual {268}
	167 Compare X0, 0
	168 JumpIfEqual {268}
	169 Move X8, [X8+24]
	170 Move [X0+48], X8
	171 Move X0, X19
	172 Call __BinaryParser.get_prs, X0
	173 Compare X0, 0
	174 JumpIfEqual {268}
	175 Move X22, 0xE6A000
	176 Move X22, [X22+1384]
	177 Move X23, 0xE69000
	178 Move X8, [X22]
	179 Move X23, [X23+3968]
	180 Move [X0+64], X8
	181 Move X0, X19
	182 Call __BinaryParser.get_prs, X0
	183 Move X8, [X23]
	184 Move X21, X0
	185 Move W9, [X8+224]
	186 Compare W9, 0
	187 JumpIfNotEqual {190}
	188 Move X0, X8
	189 Call 0x1C17DFC
	190 Compare X21, 0
	191 JumpIfEqual {268}
	192 Move X8, [X23]
	193 Move X0, X19
	194 Move X8, [X8+184]
	195 Move X8, [X8+56]
	196 Move [X21+72], X8
	197 Call __BinaryParser.get_prs, X0
	198 Compare X0, 0
	199 JumpIfEqual {268}
	200 Move [X0+80], W31
	201 Move X0, X19
	202 Call __BinaryParser.get_prs, X0
	203 Move X8, [X19+144]
	204 Compare X8, 0
	205 JumpIfEqual {268}
	206 Compare X0, 0
	207 JumpIfEqual {268}
	208 Move X8, [X8+24]
	209 Move [X0+56], X8
	210 Move X0, X19
	211 Call __BinaryParser.get_prs, X0
	212 Compare X0, 0
	213 JumpIfEqual {268}
	214 Compare X20, 0
	215 JumpIfEqual {238}
	216 Move W8, 3
	217 Move [X0+16], W8
	218 Move X0, X19
	219 Call __BinaryParser.get_prs, X0
	220 Compare X0, 0
	221 JumpIfEqual {268}
	222 Move W8, 1
	223 Move [X0+32], W8
	224 Move W8, [X20+48]
	225 NotImplemented "Instruction CMP not yet implemented."
	226 NotImplemented "Instruction CMP not yet implemented."
	227 Move X0, X19
	228 Call __BinaryParser.get_prs, X0
	229 Compare X0, 0
	230 JumpIfEqual {268}
	231 Move X8, [X20+40]
	232 Move [X0+40], X8
	233 Move X0, X19
	234 Call __BinaryParser.get_prs, X0
	235 Compare X0, 0
	236 JumpIfEqual {268}
	237 Move W8, 2
	238 Move W8, 2
	239 Move [X0+16], W8
	240 Move X0, X19
	241 Call __BinaryParser.get_prs, X0
	242 Compare X0, 0
	243 JumpIfEqual {268}
	244 Move X8, [X22]
	245 Move [X0+40], X8
	246 Move X0, X19
	247 Call __BinaryParser.get_prs, X0
	248 Compare X0, 0
	249 JumpIfEqual {268}
	250 Move W8, 3
	251 Move [X0+28], W8
	252 Move X20, [X19+16]
	253 Move X0, X19
	254 Call __BinaryParser.get_prs, X0
	255 Compare X20, 0
	256 JumpIfEqual {268}
	257 Move X1, X0
	258 Move X0, X20
	259 Move X20, [X31+48]
	260 Move X19, [X31+56]
	261 Move X22, [X31+32]
	262 Move X21, [X31+40]
	263 Move X30, [X31+16]
	264 Move X23, [X31+24]
	265 Add X31, X31, 64
	266 Call ObjectReader.Parse, X0, X1
	267 Return 
	268 Call 0x1C17F20
	269 Move X0, X20
	270 Call 0x1C181E0
	271 Move X0, 0xE38000
	272 Move X0, [X0+2512]
	273 Call 0x1C17D08
	274 Move W1, 2
	275 Call 0x1C17D6C
	276 Move X20, X0
	277 Call 0x19913C0
	278 Move X21, 0xE6A000
	279 Move X21, [X21+1304]
	280 Move X0, X21
	281 Call 0x1C17D08
	282 Move X1, X0
	283 Move X0, X20
	284 Call 0x19990B4
	285 Move X0, X21
	286 Call 0x1C17D08
	287 Move X2, X0
	288 Move X0, X20
	289 Move X1, X31
	290 Call 0x1994444
	291 Move X19, [X19+152]
	292 Move X0, X19
	293 Call 0x19913C0
	294 Move W8, [X19+20]
	295 Move X0, 0xE38000
	296 Move [X31+12], W8
	297 Move X0, [X0+1880]
	298 Call 0x1C17D08
	299 Add X1, X31, 12
	300 Call 0x1C17E04
	301 Move X19, X0
	302 Move X0, X20
	303 Call 0x19913C0
	304 Move X0, X20
	305 Move X1, X19
	306 Call 0x19990B4
	307 Move W1, 1
	308 Move X0, X20
	309 Move X2, X19
	310 Call 0x1994444
	311 Move X0, 0xE6A000
	312 Move X0, [X0+1312]
	313 Call 0x1C17D08
	314 Move X1, X20
	315 Move X0, 0xE38000
	316 Move X0, [X0+2512]
	317 Call 0x1C17D08
	318 Move W1, 1
	319 Call 0x1C17D6C
	320 Move X19, X0
	321 Move X0, X20
	322 Call 0x19913C0
	323 Move W8, [X20+48]
	324 Move X0, 0xE6A000
	325 Move [X31+8], W8
	326 Move X0, [X0+1344]
	327 Call 0x1C17D08
	328 Add X1, X31, 8
	329 Call 0x1C17E04
	330 Move X1, X31
	331 Call Enum.ToString, X0
	332 Move X20, X0
	333 Move X0, X19
	334 Call 0x19913C0
	335 Move X0, X19
	336 Move X1, X20
	337 Call 0x19990B4
	338 Move X0, X19
	339 Move X1, X31
	340 Move X2, X20
	341 Call 0x1994444
	342 Move X0, 0xE6A000
	343 Move X0, [X0+1392]
	344 Call 0x1C17D08
	345 Move X1, X19
	346 Move X2, X31
	347 Call Environment.GetResourceString, X0, X1
	348 Move X19, X0
	349 Move X0, 0xE62000
	350 Move X0, [X0+736]
	351 Call 0x1C17D08
	352 Call 0x1C17F10
	353 Move X1, X19
	354 Move X2, X31
	355 Move X20, X0
	356 Call SerializationException..ctor, X0, X1
	357 Move X0, 0xE6A000
	358 Move X0, [X0+1400]
	359 Call 0x1C17D08
	360 Move X1, X0
	361 Move X0, X20
	362 Call 0x1C17DEC

Method: System.Void ReadMemberPrimitiveTyped()

Disassembly:
	0x032BCCF8 BL 0x32BD970
	0x032BCCFC CBZ X0, 0x32BCD20
	0x032BCD00 ADRP X8, 0xE69000
	0x032BCD04 LDR X8, [X8 + 0x68]
	0x032BCD08 LDR X1, [X8]
	0x032BCD0C LDR X8, [X0]
	0x032BCD10 CMP X8, X1
	0x032BCD14 B.NE 0x32BCE04
	0x032BCD18 LDRB W8, [X0 + 0x10]
	0x032BCD1C CBZ W8, 0x32BCD3C
	0x032BCD20 LDR X8, [X19 + 0x18]
	0x032BCD24 STR X8, [X22 + 0x28]
	0x032BCD28 CBZ X21, 0x32BCE00
	0x032BCD2C MOVZ W8, 0x2
	0x032BCD30 STR W8, [X21 + 0x10]
	0x032BCD34 STR W31, [X22 + 0x38]
	0x032BCD38 B 0x32BCD84
	0x032BCD3C CBZ X21, 0x32BCE00
	0x032BCD40 MOVZ W8, 0x3
	0x032BCD44 MOVZ W9, 0x2
	0x032BCD48 STR W8, [X21 + 0x10]
	0x032BCD4C STR W9, [X21 + 0x20]
	0x032BCD50 STR W9, [X22 + 0x38]
	0x032BCD54 LDR W10, [X0 + 0x30]
	0x032BCD58 CMP W10, 0x2
	0x032BCD5C B.EQ 0x32BCD7C
	0x032BCD60 CMP W10, 0x1
	0x032BCD64 B.NE 0x32BCF08
	0x032BCD68 LDR X8, [X0 + 0x28]
	0x032BCD6C MOVZ W9, 0x2
	0x032BCD70 STR W9, [X21 + 0x1C]
	0x032BCD74 STR X8, [X21 + 0x28]
	0x032BCD78 B 0x32BCD80
	0x032BCD7C STR W8, [X21 + 0x1C]
	0x032BCD80 STR W9, [X22 + 0x34]
	0x032BCD84 MOVZ W8, 0x1
	0x032BCD88 STR W8, [X21 + 0x14]
	0x032BCD8C LDR X0, [X20 + 0x10]
	0x032BCD90 CBZ X0, 0x32BCE00
	0x032BCD94 LDRSW X1, [X19 + 0x14]
	0x032BCD98 BL 0x32B7F2C
	0x032BCD9C STR X0, [X21 + 0x58]
	0x032BCDA0 ADD X1, X21, 0x110
	0x032BCDA4 ADD X2, X21, 0x108
	0x032BCDA8 MOV X0, X23
	0x032BCDAC BL 0x32AEBD0
	0x032BCDB0 STR X0, [X21 + 0xD8]
	0x032BCDB4 LDR X8, [X21 + 0x58]
	0x032BCDB8 LDR X9, [X20 + 0x20]
	0x032BCDBC CMP X8, X9
	0x032BCDC0 B.NE 0x32BCDCC
	0x032BCDC4 MOVZ W8, 0x1
	0x032BCDC8 STR W8, [X21 + 0x24]
	0x032BCDCC LDR X8, [X19 + 0x18]
	0x032BCDD0 STR X8, [X21 + 0x40]
	0x032BCDD4 LDR X8, [X23 + 0x18]
	0x032BCDD8 STR W31, [X21 + 0x50]
	0x032BCDDC STR X8, [X21 + 0x48]
	0x032BCDE0 LDR X0, [X20 + 0x10]
	0x032BCDE4 CBZ X0, 0x32BCE00
	0x032BCDE8 MOV X1, X21
	0x032BCDEC LDP X20, X19, [X31 + 0x30]
	0x032BCDF0 LDP X22, X21, [X31 + 0x20]
	0x032BCDF4 LDP X24, X23, [X31 + 0x10]
	0x032BCDF8 LDR X30, [X31], #0x40
	0x032BCDFC B 0x32B6068
	0x032BCE00 BL 0x1C16F20
	0x032BCE04 BL 0x1C171E0
	0x032BCE08 ADRP X0, 0xE37000
	0x032BCE0C LDR X0, [X0 + 0x9D0]
	0x032BCE10 BL 0x1C16D08
	0x032BCE14 MOVZ W1, 0x1
	0x032BCE18 BL 0x1C16D6C
	0x032BCE1C MOV X20, X0
	0x032BCE20 MOV X0, X19
	0x032BCE24 BL 0x19903C0
	0x032BCE28 LDR X19, [X19 + 0x18]
	0x032BCE2C B 0x32BCE90
	0x032BCE30 ADRP X0, 0xE37000
	0x032BCE34 LDR X0, [X0 + 0x9D0]
	0x032BCE38 BL 0x1C16D08
	0x032BCE3C MOVZ W1, 0x1
	0x032BCE40 BL 0x1C16D6C
	0x032BCE44 MOV X20, X0
	0x032BCE48 MOV X0, X19
	0x032BCE4C BL 0x19903C0
	0x032BCE50 MOV X0, X24
	0x032BCE54 MOV X1, X31
	0x032BCE58 BL 0x337B6E0
	0x032BCE5C MOV X21, X0
	0x032BCE60 MOV X0, X19
	0x032BCE64 BL 0x19903C0
	0x032BCE68 ADRP X0, 0xE37000
	0x032BCE6C LDR X19, [X19 + 0x18]
	0x032BCE70 LDR X0, [X0 + 0xDD8]
	0x032BCE74 BL 0x1C16D08
	0x032BCE78 MOV X1, X0
	0x032BCE7C MOV X0, X21
	0x032BCE80 MOV X2, X19
	0x032BCE84 MOV X3, X31
	0x032BCE88 BL 0x32274B8
	0x032BCE8C MOV X19, X0
	0x032BCE90 MOV X0, X20
	0x032BCE94 BL 0x19903C0
	0x032BCE98 MOV X0, X20
	0x032BCE9C MOV X1, X19
	0x032BCEA0 BL 0x19980B4
	0x032BCEA4 MOV X0, X20
	0x032BCEA8 MOV X1, X31
	0x032BCEAC MOV X2, X19
	0x032BCEB0 BL 0x1993444
	0x032BCEB4 ADRP X0, 0xE69000
	0x032BCEB8 LDR X0, [X0 + 0x40]
	0x032BCEBC BL 0x1C16D08
	0x032BCEC0 MOV X1, X20
	0x032BCEC4 MOV X2, X31
	0x032BCEC8 BL 0x33BFB40
	0x032BCECC MOV X19, X0
	0x032BCED0 ADRP X0, 0xE61000
	0x032BCED4 LDR X0, [X0 + 0x2E0]
	0x032BCED8 BL 0x1C16D08
	0x032BCEDC BL 0x1C16F10
	0x032BCEE0 MOV X1, X19
	0x032BCEE4 MOV X2, X31
	0x032BCEE8 MOV X20, X0
	0x032BCEEC BL 0x329F100
	0x032BCEF0 ADRP X0, 0xE69000
	0x032BCEF4 LDR X0, [X0 + 0x5B8]
	0x032BCEF8 BL 0x1C16D08
	0x032BCEFC MOV X1, X0
	0x032BCF00 MOV X0, X20
	0x032BCF04 BL 0x1C16DEC
	0x032BCF08 ADRP X8, 0xE37000
	0x032BCF0C LDR X8, [X8 + 0x9D0]
	0x032BCF10 MOV X19, X0
	0x032BCF14 MOV X0, X8
	0x032BCF18 BL 0x1C16D08
	0x032BCF1C MOVZ W1, 0x1
	0x032BCF20 BL 0x1C16D6C
	0x032BCF24 MOV X20, X0
	0x032BCF28 MOV X0, X19
	0x032BCF2C BL 0x19903C0
	0x032BCF30 LDR W8, [X19 + 0x30]
	0x032BCF34 ADRP X0, 0xE69000
	0x032BCF38 STR W8, [X31 + 0xC]
	0x032BCF3C LDR X0, [X0 + 0x540]
	0x032BCF40 BL 0x1C16D08
	0x032BCF44 ADD X1, X31, 0xC
	0x032BCF48 BL 0x1C16E04
	0x032BCF4C MOV X1, X31
	0x032BCF50 BL 0x33B162C
	0x032BCF54 MOV X19, X0
	0x032BCF58 MOV X0, X20
	0x032BCF5C BL 0x19903C0
	0x032BCF60 MOV X0, X20
	0x032BCF64 MOV X1, X19
	0x032BCF68 BL 0x19980B4
	0x032BCF6C MOV X0, X20
	0x032BCF70 MOV X1, X31
	0x032BCF74 MOV X2, X19
	0x032BCF78 BL 0x1993444
	0x032BCF7C ADRP X0, 0xE69000
	0x032BCF80 LDR X0, [X0 + 0x570]
	0x032BCF84 B 0x32BCEBC
	0x032BCF88 SUB X31, X31, 0x80
	0x032BCF8C STP X29, X30, [X31 + 0x20]
	0x032BCF90 STP X28, X27, [X31 + 0x30]
	0x032BCF94 STP X26, X25, [X31 + 0x40]
	0x032BCF98 STP X24, X23, [X31 + 0x50]
	0x032BCF9C STP X22, X21, [X31 + 0x60]
	0x032BCFA0 STP X20, X19, [X31 + 0x70]
	0x032BCFA4 ADRP X20, 0x1120000
	0x032BCFA8 LDRB W8, [X20 + 0x83F]
	0x032BCFAC MOV X19, X1
	0x032BCFB0 MOV X29, X0
	0x032BCFB4 TBNZ X8, 0x0, 0x32BCFD8
	0x032BCFB8 ADRP X0, 0xE69000
	0x032BCFBC LDR X0, [X0 + 0x38]
	0x032BCFC0 BL 0x1C16CF4
	0x032BCFC4 ADRP X0, 0xE69000
	0x032BCFC8 LDR X0, [X0 + 0x68]
	0x032BCFCC BL 0x1C16CF4
	0x032BCFD0 MOVZ W8, 0x1
	0x032BCFD4 STRB W8, [X20 + 0x83F]
	0x032BCFD8 MOV X0, X29
	0x032BCFDC BL 0x32BCAD0
	0x032BCFE0 CBZ X0, 0x32BD234
	0x032BCFE4 MOV X22, X0
	0x032BCFE8 LDR X0, [X29 + 0x40]
	0x032BCFEC CBZ X0, 0x32BD234
	0x032BCFF0 LDR X21, [X22 + 0x80]
	0x032BCFF4 MOV X1, X22
	0x032BCFF8 MOV X2, X31
	0x032BCFFC BL 0x32BD7AC
	0x032BD000 CBZ X19, 0x32BD234
	0x032BD004 LDR W8, [X19 + 0x10]
	0x032BD008 CMP W8, 0x4
	0x032BD00C B.EQ 0x32BD064
	0x032BD010 CMP W8, 0x5
	0x032BD014 B.NE 0x32BD074

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x1121000
	007 Move W8, [X20+2113]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xE69000
	014 Move X0, [X0+3968]
	015 Call 0x1C17CF4
	016 Move X0, 0xE6A000
	017 Move X0, [X0+784]
	018 Call 0x1C17CF4
	019 Move X0, 0xE6A000
	020 Move X0, [X0+104]
	021 Call 0x1C17CF4
	022 Move X0, 0xE6A000
	023 Move X0, [X0+1432]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+2113], W8
	027 Move X20, [X19+160]
	028 Compare X20, 0
	029 JumpIfNotEqual {40}
	030 Move X8, 0xE6A000
	031 Move X8, [X8+784]
	032 Move X0, [X8]
	033 Call 0x1C17F10
	034 Move X1, X31
	035 Move X20, X0
	036 Call Object..ctor, X0
	037 Move [X19+160], X20
	038 Compare X20, 0
	039 JumpIfEqual {177}
	040 Move X0, X20
	041 Move X1, X19
	042 Call MemberPrimitiveTyped.Read, X0, X1
	043 Move X8, [X19+160]
	044 Compare X8, 0
	045 JumpIfEqual {177}
	046 Move X0, X19
	047 Call __BinaryParser.get_prs, X0
	048 Compare X0, 0
	049 JumpIfEqual {177}
	050 Move W8, 1
	051 Move [X0+20], W8
	052 Move X0, [X19+64]
	053 Compare X0, 0
	054 JumpIfEqual {177}
	055 Move X1, X31
	056 Call SerStack.Peek, X0
	057 Move X20, X0
	058 Compare X0, 0
	059 JumpIfEqual {65}
	060 Move X8, 0xE6A000
	061 Move X8, [X8+104]
	062 Move X1, [X8]
	063 Move X8, [X20]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X0, X19
	066 Call __BinaryParser.get_prs, X0
	067 Compare X0, 0
	068 JumpIfEqual {177}
	069 Move X1, X31
	070 Call ParseRecord.Init, X0
	071 Move X0, X19
	072 Call __BinaryParser.get_prs, X0
	073 Move X8, [X19+160]
	074 Compare X8, 0
	075 JumpIfEqual {177}
	076 Compare X0, 0
	077 JumpIfEqual {177}
	078 Move X8, [X8+24]
	079 Move [X0+56], X8
	080 Move X0, X19
	081 Call __BinaryParser.get_prs, X0
	082 Move X8, [X19+160]
	083 Compare X8, 0
	084 JumpIfEqual {177}
	085 Move X9, 0xE69000
	086 Move X9, [X9+3968]
	087 Move X21, X0
	088 Move W22, [X8+16]
	089 Move X0, [X9]
	090 Move W9, [X0+224]
	091 Compare W9, 0
	092 JumpIfNotEqual {94}
	093 Call 0x1C17DFC
	094 Move W0, W22
	095 Call Converter.ToComType, X0
	096 Compare X21, 0
	097 JumpIfEqual {177}
	098 Move [X21+64], X0
	099 Move X0, X19
	100 Call __BinaryParser.get_prs, X0
	101 Move X8, [X19+160]
	102 Compare X8, 0
	103 JumpIfEqual {177}
	104 Move X21, X0
	105 Move W0, [X8+16]
	106 Call Converter.ToType, X0
	107 Compare X21, 0
	108 JumpIfEqual {177}
	109 Move [X21+72], X0
	110 Move X0, X19
	111 Call __BinaryParser.get_prs, X0
	112 Move X8, [X19+160]
	113 Compare X8, 0
	114 JumpIfEqual {177}
	115 Compare X0, 0
	116 JumpIfEqual {177}
	117 Move W8, [X8+16]
	118 Move [X0+80], W8
	119 Move X0, X19
	120 Call __BinaryParser.get_prs, X0
	121 Compare X0, 0
	122 JumpIfEqual {177}
	123 Compare X20, 0
	124 JumpIfEqual {147}
	125 Move W8, 3
	126 Move [X0+16], W8
	127 Move X0, X19
	128 Call __BinaryParser.get_prs, X0
	129 Compare X0, 0
	130 JumpIfEqual {177}
	131 Move W8, 1
	132 Move [X0+32], W8
	133 Move W8, [X20+48]
	134 NotImplemented "Instruction CMP not yet implemented."
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Move X0, X19
	137 Call __BinaryParser.get_prs, X0
	138 Compare X0, 0
	139 JumpIfEqual {177}
	140 Move X8, [X20+40]
	141 Move [X0+40], X8
	142 Move X0, X19
	143 Call __BinaryParser.get_prs, X0
	144 Compare X0, 0
	145 JumpIfEqual {177}
	146 Move W8, 2
	147 Move W8, 2
	148 Move [X0+16], W8
	149 Move X0, X19
	150 Call __BinaryParser.get_prs, X0
	151 Compare X0, 0
	152 JumpIfEqual {177}
	153 Move X8, 0xE6A000
	154 Move X8, [X8+1432]
	155 Move X8, [X8]
	156 Move [X0+40], X8
	157 Move X0, X19
	158 Call __BinaryParser.get_prs, X0
	159 Compare X0, 0
	160 JumpIfEqual {177}
	161 Move W8, 3
	162 Move [X0+28], W8
	163 Move X20, [X19+16]
	164 Move X0, X19
	165 Call __BinaryParser.get_prs, X0
	166 Compare X20, 0
	167 JumpIfEqual {177}
	168 Move X1, X0
	169 Move X0, X20
	170 Move X20, [X31+32]
	171 Move X19, [X31+40]
	172 Move X22, [X31+16]
	173 Move X21, [X31+24]
	174 Move X30, [X31+48]
	175 Call ObjectReader.Parse, X0, X1
	176 Return 
	177 Call 0x1C17F20
	178 Move X0, X20
	179 Call 0x1C181E0
	180 Move X0, 0xE38000
	181 Move X0, [X0+2512]
	182 Call 0x1C17D08
	183 Move W1, 1
	184 Call 0x1C17D6C
	185 Move X19, X0
	186 Move X0, X20
	187 Call 0x19913C0
	188 Move W8, [X20+48]
	189 Move X0, 0xE6A000
	190 Move [X31+12], W8
	191 Move X0, [X0+1344]
	192 Call 0x1C17D08
	193 Add X1, X31, 12
	194 Call 0x1C17E04
	195 Move X1, X31
	196 Call Enum.ToString, X0
	197 Move X20, X0
	198 Move X0, X19
	199 Call 0x19913C0
	200 Move X0, X19
	201 Move X1, X20
	202 Call 0x19990B4
	203 Move X0, X19
	204 Move X1, X31
	205 Move X2, X20
	206 Call 0x1994444
	207 Move X0, 0xE6A000
	208 Move X0, [X0+1392]
	209 Call 0x1C17D08
	210 Move X1, X19
	211 Move X2, X31
	212 Call Environment.GetResourceString, X0, X1
	213 Move X19, X0
	214 Move X0, 0xE62000
	215 Move X0, [X0+736]
	216 Call 0x1C17D08
	217 Call 0x1C17F10
	218 Move X1, X19
	219 Move X2, X31
	220 Move X20, X0
	221 Call SerializationException..ctor, X0, X1
	222 Move X0, 0xE69000
	223 Move X0, [X0+1440]
	224 Call 0x1C17D08
	225 Move X1, X0
	226 Move X0, X20
	227 Call 0x1C17DEC

Method: System.Void ReadArray(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum)

Disassembly:
	0x032BC788 CBZ X0, 0x32BC79C
	0x032BC78C LDR X8, [X0]
	0x032BC790 LDP X2, X1, [X8 + 0x1C8]
	0x032BC794 LDR X30, [X31], #0x10
	0x032BC798 BR X2
	0x032BC79C BL 0x1C16F20
	0x032BC7A0 STP X30, X23, [X31 - 0x30]!
	0x032BC7A4 STP X22, X21, [X31 + 0x10]
	0x032BC7A8 STP X20, X19, [X31 + 0x20]
	0x032BC7AC CMP W3, 0x1
	0x032BC7B0 B.LT 0x32BC808
	0x032BC7B4 MOV W19, W3
	0x032BC7B8 MOV W20, W2
	0x032BC7BC MOV X21, X1
	0x032BC7C0 MOV X22, X0
	0x032BC7C4 LDR X0, [X22 + 0x68]
	0x032BC7C8 CBZ X0, 0x32BC818
	0x032BC7CC LDR X8, [X0]
	0x032BC7D0 MOV X1, X21
	0x032BC7D4 MOV W2, W20
	0x032BC7D8 MOV W3, W19
	0x032BC7DC LDR X9, [X8 + 0x2B8]
	0x032BC7E0 LDR X4, [X8 + 0x2C0]
	0x032BC7E4 BLR X9
	0x032BC7E8 MOV W23, W0
	0x032BC7EC CBNZ W0, 0x32BC7F8
	0x032BC7F0 MOV X0, X31
	0x032BC7F4 BL 0x32F47B8
	0x032BC7F8 SUB W19, W19, W23
	0x032BC7FC CMP W19, 0x0
	0x032BC800 ADD W20, W23, W20
	0x032BC804 B.GT 0x32BC7C4
	0x032BC808 LDP X20, X19, [X31 + 0x20]
	0x032BC80C LDP X22, X21, [X31 + 0x10]
	0x032BC810 LDP X30, X23, [X31], #0x30
	0x032BC814 RET
	0x032BC818 BL 0x1C16F20
	0x032BC81C STR X30, [X31 - 0x10]!
	0x032BC820 LDR X0, [X0 + 0x68]
	0x032BC824 CBZ X0, 0x32BC838
	0x032BC828 LDR X8, [X0]
	0x032BC82C LDP X2, X1, [X8 + 0x1F8]
	0x032BC830 LDR X30, [X31], #0x10
	0x032BC834 BR X2
	0x032BC838 BL 0x1C16F20
	0x032BC83C STR X30, [X31 - 0x10]!
	0x032BC840 LDR X0, [X0 + 0x68]
	0x032BC844 CBZ X0, 0x32BC85C
	0x032BC848 LDR X8, [X0]
	0x032BC84C LDR X3, [X8 + 0x2A8]
	0x032BC850 LDR X2, [X8 + 0x2B0]
	0x032BC854 LDR X30, [X31], #0x10
	0x032BC858 BR X3
	0x032BC85C BL 0x1C16F20
	0x032BC860 STR X30, [X31 - 0x20]!
	0x032BC864 STP X20, X19, [X31 + 0x10]
	0x032BC868 ADRP X20, 0x1120000
	0x032BC86C LDRB W8, [X20 + 0x836]
	0x032BC870 MOV X19, X0
	0x032BC874 TBNZ X8, 0x0, 0x32BC898
	0x032BC878 ADRP X0, 0xE39000
	0x032BC87C LDR X0, [X0 + 0xC48]
	0x032BC880 BL 0x1C16CF4
	0x032BC884 ADRP X0, 0xE5F000
	0x032BC888 LDR X0, [X0 + 0x5F0]
	0x032BC88C BL 0x1C16CF4
	0x032BC890 MOVZ W8, 0x1
	0x032BC894 STRB W8, [X20 + 0x836]
	0x032BC898 LDR X0, [X19 + 0x68]
	0x032BC89C CBZ X0, 0x32BC910
	0x032BC8A0 LDR X8, [X0]
	0x032BC8A4 ADRP X19, 0xE39000
	0x032BC8A8 ADRP X20, 0xE5F000
	0x032BC8AC LDR X9, [X8 + 0x298]
	0x032BC8B0 LDR X1, [X8 + 0x2A0]
	0x032BC8B4 LDR X19, [X19 + 0xC48]
	0x032BC8B8 LDR X20, [X20 + 0x5F0]
	0x032BC8BC BLR X9
	0x032BC8C0 LDR X8, [X19]
	0x032BC8C4 MOV X19, X0
	0x032BC8C8 LDR W9, [X8 + 0xE0]
	0x032BC8CC CBNZ W9, 0x32BC8D8
	0x032BC8D0 MOV X0, X8
	0x032BC8D4 BL 0x1C16DFC
	0x032BC8D8 MOV X0, X31
	0x032BC8DC BL 0x3338524
	0x032BC8E0 LDR X8, [X20]
	0x032BC8E4 MOV X20, X0
	0x032BC8E8 LDR W9, [X8 + 0xE0]
	0x032BC8EC CBNZ W9, 0x32BC8F8
	0x032BC8F0 MOV X0, X8
	0x032BC8F4 BL 0x1C16DFC
	0x032BC8F8 MOV X0, X19
	0x032BC8FC MOV X1, X20
	0x032BC900 LDP X20, X19, [X31 + 0x10]
	0x032BC904 MOV X2, X31
	0x032BC908 LDR X30, [X31], #0x20
	0x032BC90C B 0x33D770C
	0x032BC910 BL 0x1C16F20
	0x032BC914 STR X30, [X31 - 0x10]!
	0x032BC918 LDR X0, [X0 + 0x68]
	0x032BC91C CBZ X0, 0x32BC934
	0x032BC920 LDR X8, [X0]
	0x032BC924 LDR X2, [X8 + 0x268]
	0x032BC928 LDR X1, [X8 + 0x270]
	0x032BC92C LDR X30, [X31], #0x10
	0x032BC930 BR X2
	0x032BC934 BL 0x1C16F20
	0x032BC938 STR X30, [X31 - 0x10]!
	0x032BC93C LDR X0, [X0 + 0x68]
	0x032BC940 CBZ X0, 0x32BC958
	0x032BC944 LDR X8, [X0]
	0x032BC948 LDR X2, [X8 + 0x278]
	0x032BC94C LDR X1, [X8 + 0x280]
	0x032BC950 LDR X30, [X31], #0x10
	0x032BC954 BR X2
	0x032BC958 BL 0x1C16F20
	0x032BC95C STR X30, [X31 - 0x10]!
	0x032BC960 LDR X0, [X0 + 0x68]
	0x032BC964 CBZ X0, 0x32BC97C
	0x032BC968 LDR X8, [X0]
	0x032BC96C LDR X2, [X8 + 0x208]
	0x032BC970 LDR X1, [X8 + 0x210]
	0x032BC974 LDR X30, [X31], #0x10
	0x032BC978 BR X2
	0x032BC97C BL 0x1C16F20
	0x032BC980 STR X30, [X31 - 0x10]!
	0x032BC984 LDR X0, [X0 + 0x68]
	0x032BC988 CBZ X0, 0x32BC9A0
	0x032BC98C LDR X8, [X0]
	0x032BC990 LDR X2, [X8 + 0x248]
	0x032BC994 LDR X1, [X8 + 0x250]
	0x032BC998 LDR X30, [X31], #0x10
	0x032BC99C BR X2
	0x032BC9A0 BL 0x1C16F20
	0x032BC9A4 STR X30, [X31 - 0x10]!
	0x032BC9A8 LDR X0, [X0 + 0x68]
	0x032BC9AC CBZ X0, 0x32BC9C0
	0x032BC9B0 LDR X8, [X0]
	0x032BC9B4 LDP X2, X1, [X8 + 0x1D8]
	0x032BC9B8 LDR X30, [X31], #0x10
	0x032BC9BC BR X2
	0x032BC9C0 BL 0x1C16F20
	0x032BC9C4 STR X30, [X31 - 0x10]!
	0x032BC9C8 LDR X0, [X0 + 0x68]
	0x032BC9CC CBZ X0, 0x32BC9E4
	0x032BC9D0 LDR X8, [X0]
	0x032BC9D4 LDR X2, [X8 + 0x248]
	0x032BC9D8 LDR X1, [X8 + 0x250]
	0x032BC9DC LDR X30, [X31], #0x10
	0x032BC9E0 BR X2
	0x032BC9E4 BL 0x1C16F20
	0x032BC9E8 STR X30, [X31 - 0x20]!
	0x032BC9EC STP X20, X19, [X31 + 0x10]
	0x032BC9F0 ADRP X20, 0x1120000
	0x032BC9F4 LDRB W8, [X20 + 0x837]
	0x032BC9F8 MOV X19, X0
	0x032BC9FC TBNZ X8, 0x0, 0x32BCA14
	0x032BCA00 ADRP X0, 0xE38000
	0x032BCA04 LDR X0, [X0 + 0x9F0]
	0x032BCA08 BL 0x1C16CF4
	0x032BCA0C MOVZ W8, 0x1
	0x032BCA10 STRB W8, [X20 + 0x837]
	0x032BCA14 LDR X0, [X19 + 0x68]
	0x032BCA18 CBZ X0, 0x32BCA60
	0x032BCA1C LDR X8, [X0]
	0x032BCA20 ADRP X19, 0xE38000
	0x032BCA24 LDR X9, [X8 + 0x248]
	0x032BCA28 LDR X1, [X8 + 0x250]
	0x032BCA2C LDR X19, [X19 + 0x9F0]
	0x032BCA30 BLR X9
	0x032BCA34 LDR X8, [X19]
	0x032BCA38 MOV X19, X0
	0x032BCA3C LDR W9, [X8 + 0xE0]
	0x032BCA40 CBNZ W9, 0x32BCA4C
	0x032BCA44 MOV X0, X8
	0x032BCA48 BL 0x1C16DFC
	0x032BCA4C MOV X0, X19
	0x032BCA50 LDP X20, X19, [X31 + 0x10]
	0x032BCA54 MOV X1, X31
	0x032BCA58 LDR X30, [X31], #0x20
	0x032BCA5C B 0x3360CF4
	0x032BCA60 BL 0x1C16F20
	0x032BCA64 STR X30, [X31 - 0x10]!
	0x032BCA68 LDR X0, [X0 + 0x68]
	0x032BCA6C CBZ X0, 0x32BCA84
	0x032BCA70 LDR X8, [X0]
	0x032BCA74 LDR X2, [X8 + 0x218]
	0x032BCA78 LDR X1, [X8 + 0x220]
	0x032BCA7C LDR X30, [X31], #0x10
	0x032BCA80 BR X2
	0x032BCA84 BL 0x1C16F20
	0x032BCA88 STR X30, [X31 - 0x10]!
	0x032BCA8C LDR X0, [X0 + 0x68]
	0x032BCA90 CBZ X0, 0x32BCAA8
	0x032BCA94 LDR X8, [X0]
	0x032BCA98 LDR X2, [X8 + 0x238]
	0x032BCA9C LDR X1, [X8 + 0x240]
	0x032BCAA0 LDR X30, [X31], #0x10
	0x032BCAA4 BR X2
	0x032BCAA8 BL 0x1C16F20
	0x032BCAAC STR X30, [X31 - 0x10]!
	0x032BCAB0 LDR X0, [X0 + 0x68]
	0x032BCAB4 CBZ X0, 0x32BCACC
	0x032BCAB8 LDR X8, [X0]
	0x032BCABC LDR X2, [X8 + 0x258]
	0x032BCAC0 LDR X1, [X8 + 0x260]
	0x032BCAC4 LDR X30, [X31], #0x10
	0x032BCAC8 BR X2
	0x032BCACC BL 0x1C16F20
	0x032BCAD0 STR X30, [X31 - 0x20]!
	0x032BCAD4 STP X20, X19, [X31 + 0x10]
	0x032BCAD8 ADRP X20, 0x1120000
	0x032BCADC LDRB W8, [X20 + 0x849]
	0x032BCAE0 MOV X19, X0
	0x032BCAE4 TBNZ X8, 0x0, 0x32BCAFC
	0x032BCAE8 ADRP X0, 0xE69000
	0x032BCAEC LDR X0, [X0 + 0x68]
	0x032BCAF0 BL 0x1C16CF4
	0x032BCAF4 MOVZ W8, 0x1
	0x032BCAF8 STRB W8, [X20 + 0x849]
	0x032BCAFC ADRP X20, 0xE69000
	0x032BCB00 LDR X0, [X19 + 0x70]
	0x032BCB04 LDR X20, [X20 + 0x68]
	0x032BCB08 CBZ X0, 0x32BCB18
	0x032BCB0C MOV X1, X31
	0x032BCB10 BL 0x32BD9B4
	0x032BCB14 TBZ X0, 0x0, 0x32BCB2C
	0x032BCB18 LDR X0, [X20]
	0x032BCB1C BL 0x1C16F10
	0x032BCB20 MOV X19, X0
	0x032BCB24 BL 0x32AEE38
	0x032BCB28 B 0x32BCB5C
	0x032BCB2C LDR X0, [X19 + 0x70]
	0x032BCB30 CBZ X0, 0x32BCB6C
	0x032BCB34 MOV X1, X31
	0x032BCB38 BL 0x32BD8E0
	0x032BCB3C CBZ X0, 0x32BCB6C
	0x032BCB40 LDR X1, [X20]
	0x032BCB44 LDR X8, [X0]
	0x032BCB48 MOV X19, X0
	0x032BCB4C CMP X8, X1
	0x032BCB50 B.NE 0x32BCB70
	0x032BCB54 MOV X0, X19
	0x032BCB58 BL 0x32AEEA0
	0x032BCB5C MOV X0, X19
	0x032BCB60 LDP X20, X19, [X31 + 0x10]
	0x032BCB64 LDR X30, [X31], #0x20
	0x032BCB68 RET
	0x032BCB6C BL 0x1C16F20
	0x032BCB70 MOV X0, X19
	0x032BCB74 BL 0x1C171E0
	0x032BCB78 STR X30, [X31 - 0x40]!
	0x032BCB7C STP X24, X23, [X31 + 0x10]
	0x032BCB80 STP X22, X21, [X31 + 0x20]
	0x032BCB84 STP X20, X19, [X31 + 0x30]
	0x032BCB88 ADRP X21, 0x1120000
	0x032BCB8C LDRB W8, [X21 + 0x83D]
	0x032BCB90 MOV X19, X1
	0x032BCB94 MOV X20, X0
	0x032BCB98 TBNZ X8, 0x0, 0x32BCBBC
	0x032BCB9C ADRP X0, 0xE69000
	0x032BCBA0 LDR X0, [X0 + 0x38]
	0x032BCBA4 BL 0x1C16CF4
	0x032BCBA8 ADRP X0, 0xE69000
	0x032BCBAC LDR X0, [X0 + 0x68]
	0x032BCBB0 BL 0x1C16CF4
	0x032BCBB4 MOVZ W8, 0x1
	0x032BCBB8 STRB W8, [X21 + 0x83D]
	0x032BCBBC MOV X0, X20
	0x032BCBC0 BL 0x32BCAD0
	0x032BCBC4 CBZ X0, 0x32BCE00
	0x032BCBC8 MOV X22, X0
	0x032BCBCC LDR X0, [X20 + 0x40]
	0x032BCBD0 CBZ X0, 0x32BCE00
	0x032BCBD4 LDR X21, [X22 + 0x80]
	0x032BCBD8 MOV X1, X22
	0x032BCBDC MOV X2, X31
	0x032BCBE0 BL 0x32BD7AC
	0x032BCBE4 CBZ X19, 0x32BCE00
	0x032BCBE8 LDR W8, [X19 + 0x10]
	0x032BCBEC CMP W8, 0x2
	0x032BCBF0 B.EQ 0x32BCC4C
	0x032BCBF4 CMP W8, 0x3
	0x032BCBF8 B.NE 0x32BCC5C
	0x032BCBFC MOV X24, X19
	0x032BCC00 LDR W8, [X24 + 0x30]!
	0x032BCC04 CMP W8, 0x0
	0x032BCC08 B.LE 0x32BCE08
	0x032BCC0C MOV X0, X20
	0x032BCC10 BL 0x32BA894
	0x032BCC14 CBZ X0, 0x32BCE00
	0x032BCC18 LDR W1, [X24]
	0x032BCC1C MOV X2, X31
	0x032BCC20 BL 0x32BDBB4
	0x032BCC24 CBZ X0, 0x32BCE30
	0x032BCC28 ADRP X8, 0xE69000
	0x032BCC2C LDR X8, [X8 + 0x38]
	0x032BCC30 MOV X23, X0
	0x032BCC34 LDR X1, [X8]
	0x032BCC38 LDR X8, [X0]
	0x032BCC3C CMP X8, X1
	0x032BCC40 B.EQ 0x32BCC60
	0x032BCC44 MOV X0, X23
	0x032BCC48 BL 0x1C171E0
	0x032BCC4C MOV X0, X20
	0x032BCC50 BL 0x32BA790
	0x032BCC54 MOV X23, X0
	0x032BCC58 B 0x32BCC60
	0x032BCC5C MOV X23, X31
	0x032BCC60 LDR X0, [X20 + 0x10]
	0x032BCC64 CBZ X0, 0x32BCE00
	0x032BCC68 LDR X2, [X19 + 0x18]
	0x032BCC6C MOV X1, X23
	0x032BCC70 BL 0x32AB584
	0x032BCC74 LDR X8, [X19 + 0x18]
	0x032BCC78 LDR X2, [X19 + 0x28]
	0x032BCC7C LDR X3, [X20 + 0x10]
	0x032BCC80 LDR W4, [X19 + 0x14]
	0x032BCC84 MOV X1, X0
	0x032BCC88 MOV X0, X8
	0x032BCC8C MOV X5, X23
	0x032BCC90 BL 0x32AECE4
	0x032BCC94 MOV X23, X0
	0x032BCC98 MOV X0, X20
	0x032BCC9C BL 0x32BA830
	0x032BCCA0 CBZ X0, 0x32BCE00
	0x032BCCA4 LDR W1, [X19 + 0x14]
	0x032BCCA8 MOV X2, X23
	0x032BCCAC MOV X3, X31
	0x032BCCB0 BL 0x32BDC28
	0x032BCCB4 MOVZ W8, 0x1
	0x032BCCB8 STR W8, [X22 + 0x30]
	0x032BCCBC CBZ X23, 0x32BCE00
	0x032BCCC0 LDR X8, [X23 + 0x20]
	0x032BCCC4 STR X8, [X22 + 0x60]
	0x032BCCC8 LDR X9, [X23 + 0x28]
	0x032BCCCC STR X9, [X22 + 0x68]
	0x032BCCD0 CBZ X8, 0x32BCE00
	0x032BCCD4 LDR X8, [X8 + 0x18]
	0x032BCCD8 STR W8, [X22 + 0x5C]
	0x032BCCDC LDR X8, [X23 + 0x38]
	0x032BCCE0 STR X8, [X22 + 0x70]
	0x032BCCE4 LDR X8, [X23 + 0x30]
	0x032BCCE8 STR X8, [X22 + 0x78]
	0x032BCCEC LDR X0, [X20 + 0x40]
	0x032BCCF0 CBZ X0, 0x32BCE00
	0x032BCCF4 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x1121000
	009 Move X22, 0xE6A000
	010 Move W8, [X21+2114]
	011 Move X22, [X22+776]
	012 Move W20, W1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {35}
	018 Move X0, 0xE6A000
	019 Move X0, [X0+776]
	020 Call 0x1C17CF4
	021 Move X0, 0xE6A000
	022 Move X0, [X0+56]
	023 Call 0x1C17CF4
	024 Move X0, 0xE69000
	025 Move X0, [X0+3968]
	026 Call 0x1C17CF4
	027 Move X0, 0xE6A000
	028 Move X0, [X0+104]
	029 Call 0x1C17CF4
	030 Move X0, 0xE6A000
	031 Move X0, [X0+1408]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X21+2114], W8
	035 Move X0, [X22]
	036 Call 0x1C17F10
	037 Move X1, X31
	038 Move X21, X0
	039 Call Object..ctor, X0
	040 Move X0, X21
	041 Move X1, X19
	042 Move [X21+60], W20
	043 Call BinaryArray.Read, X0, X1
	044 Move W8, [X21+40]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move W8, [X21+56]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X0, X19
	049 Call __BinaryParser.get_AssemIdToAssemblyTable, X0
	050 Compare X0, 0
	051 JumpIfEqual {253}
	052 Move W1, [X21+56]
	053 Move X2, X31
	054 Call SizedArray.get_Item, X0, X1
	055 Move X23, X0
	056 Compare X0, 0
	057 JumpIfEqual {68}
	058 Move X8, 0xE6A000
	059 Move X8, [X8+56]
	060 Move X1, [X8]
	061 Move X8, [X23]
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X0, X23
	064 Call 0x1C181E0
	065 Move X0, X19
	066 Call __BinaryParser.get_SystemAssemblyInfo, X0
	067 Move X23, X0
	068 Move X0, X19
	069 Call __BinaryParser.GetOp, X0
	070 Compare X0, 0
	071 JumpIfEqual {253}
	072 Move W8, 2
	073 Move [X0+48], W8
	074 Move W8, [X21+40]
	075 Move X22, X0
	076 Move [X0+76], W8
	077 Move X8, [X21+48]
	078 Move [X0+80], X8
	079 Move X0, [X19+64]
	080 Move X20, [X22+128]
	081 Compare X0, 0
	082 JumpIfEqual {253}
	083 Move X1, X31
	084 Call SerStack.PeekPeek, X0
	085 Compare X0, 0
	086 JumpIfEqual {94}
	087 Move X8, 0xE6A000
	088 Move X8, [X8+104]
	089 Move X1, [X8]
	090 Move X8, [X0]
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move W8, [X21+16]
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move X8, 0xE6A000
	095 Move X8, [X8+1408]
	096 Move X8, [X8]
	097 Move [X22+40], X8
	098 Compare X20, 0
	099 JumpIfEqual {253}
	100 Move W8, 2
	101 Move [X20+16], W8
	102 Move [X22+56], W31
	103 Move X0, [X19+16]
	104 Compare X0, 0
	105 JumpIfEqual {253}
	106 NotImplemented "Instruction LDRSW not yet implemented."
	107 Call ObjectReader.GetId, X0, X1
	108 Move [X20+88], X0
	109 Move X8, [X19+32]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Move W8, 1
	112 Move X8, [X19+40]
	113 NotImplemented "Instruction CMP not yet implemented."
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Move W8, 3
	116 Move W8, 2
	117 Move [X20+36], W8
	118 Move W8, 2
	119 Move [X20+20], W8
	120 Move W0, [X21+40]
	121 Move X1, [X21+48]
	122 Move X2, [X19+16]
	123 Add X4, X20, 124
	124 Add X5, X20, 104
	125 Add X6, X20, 112
	126 Add X7, X20, 120
	127 Move X3, X23
	128 Call BinaryConverter.TypeFromInfo, X0, X1, X2, X3, X4, X5, X6, X7
	129 Move [X20+80], W31
	130 Move W8, [X21+20]
	131 Move [X20+128], W8
	132 Move X9, [X21+24]
	133 Move [X20+136], X9
	134 Move X10, [X21+32]
	135 Move [X20+152], X10
	136 Move W10, [X21+64]
	137 NotImplemented "Instruction CMP not yet implemented."
	138 Move W11, 1
	139 NotImplemented "Instruction LSLV not yet implemented."
	140 Move W11, 9
	141 And W31, W10, W11
	142 Move W11, 18
	143 And W31, W10, W11
	144 Compare X9, 0
	145 JumpIfEqual {253}
	146 Move W8, [X9+24]
	147 Compare W8, 0
	148 JumpIfEqual {254}
	149 Move W8, [X9+32]
	150 Move W9, 2
	151 Move [X22+72], W8
	152 Move [X20+24], W9
	153 Compare X9, 0
	154 JumpIfEqual {253}
	155 Move W8, [X9+24]
	156 Compare W8, 0
	157 JumpIfEqual {254}
	158 Move W8, [X9+32]
	159 Move W9, 1
	160 Move [X22+72], W8
	161 Move [X20+24], W9
	162 Move X8, 0xE69000
	163 Move X8, [X8+3968]
	164 Move W23, [X20+124]
	165 Move X0, [X8]
	166 Move W8, [X0+224]
	167 Compare W8, 0
	168 JumpIfNotEqual {170}
	169 Call 0x1C17DFC
	170 Move W0, W23
	171 Call Converter.IsWriteAsByteArray, X0
	172 Move TEMP, X0
	173 And TEMP, TEMP, 1
	174 Compare TEMP, 1
	175 JumpIfNotEqual {232}
	176 Move X8, [X21+32]
	177 Compare X8, 0
	178 JumpIfEqual {253}
	179 Move W9, [X8+24]
	180 Compare W9, 0
	181 JumpIfEqual {254}
	182 Move W8, [X8+32]
	183 Compare W8, 0
	184 JumpIfNotEqual {232}
	185 Move X0, X19
	186 Move X1, X20
	187 Call __BinaryParser.ReadArrayAsBytes, X0, X1
	188 Move X0, X19
	189 Move X1, X22
	190 Call __BinaryParser.PutOp, X0, X1
	191 Move X0, [X19+16]
	192 Compare X0, 0
	193 JumpIfEqual {253}
	194 Move X1, X20
	195 Call ObjectReader.Parse, X0, X1
	196 Move W8, 4
	197 Move [X20+16], W8
	198 NotImplemented "Instruction CMP not yet implemented."
	199 Compare X9, 0
	200 JumpIfEqual {253}
	201 Move W11, [X9+24]
	202 Move X10, X31
	203 Add X12, X9, 32
	204 Move W9, 1
	205 NotImplemented "Instruction CMP not yet implemented."
	206 Move W13, [X12]
	207 Add X10, X10, 1
	208 NotImplemented "Instruction CMP not yet implemented."
	209 Multiply W9, W13, W9
	210 Compare X20, 0
	211 JumpIfEqual {253}
	212 Move W8, 3
	213 Move W9, 2
	214 Move [X20+16], W8
	215 Move [X20+32], W9
	216 Move [X22+56], W9
	217 Move W9, [X0+48]
	218 NotImplemented "Instruction CMP not yet implemented."
	219 NotImplemented "Instruction CMP not yet implemented."
	220 Move X8, [X0+40]
	221 Move W9, 2
	222 Move [X20+28], W9
	223 Move [X20+40], X8
	224 Move [X22+52], W9
	225 Move [X20+64], X8
	226 Move X8, [X0+64]
	227 Move [X20+72], X8
	228 Move W9, 1
	229 Move W8, 3
	230 Move [X22+72], W9
	231 Move [X20+24], W8
	232 Move X0, [X19+64]
	233 Compare X0, 0
	234 JumpIfEqual {253}
	235 Move X1, X22
	236 Move X2, X31
	237 Call SerStack.Push, X0, X1
	238 Move X0, [X19+16]
	239 Compare X0, 0
	240 JumpIfEqual {253}
	241 Move X1, X20
	242 Move X20, [X31+48]
	243 Move X19, [X31+56]
	244 Move X22, [X31+32]
	245 Move X21, [X31+40]
	246 Move X30, [X31+16]
	247 Move X23, [X31+24]
	248 Add X31, X31, 64
	249 Call ObjectReader.Parse, X0, X1
	250 Return 
	251 Move [X20+28], W8
	252 Move [X22+52], W8
	253 Call 0x1C17F20
	254 Call 0x1C17F28
	255 Call 0x1C181E0
	256 Move X0, 0xE38000
	257 Move X0, [X0+2512]
	258 Call 0x1C17D08
	259 Move W1, 1
	260 Call 0x1C17D6C
	261 Move X19, X0
	262 Move X0, X21
	263 Call 0x19913C0
	264 Move X20, [X21+48]
	265 Move X0, X19
	266 Call 0x19913C0
	267 Move X0, X19
	268 Move X1, X20
	269 Call 0x19990B4
	270 Move X0, X19
	271 Move X1, X31
	272 Move X2, X20
	273 Call 0x1994444
	274 Move X0, 0xE69000
	275 Move X0, [X0+3984]
	276 Move X0, 0xE38000
	277 Move X0, [X0+2512]
	278 Call 0x1C17D08
	279 Move W1, 1
	280 Call 0x1C17D6C
	281 Move X19, X0
	282 Move X0, X21
	283 Call 0x19913C0
	284 Move W8, [X21+64]
	285 Move X0, 0xE6A000
	286 Move [X31+8], W8
	287 Move X0, [X0+1416]
	288 Call 0x1C17D08
	289 Add X1, X31, 8
	290 Call 0x1C17E04
	291 Move X1, X31
	292 Call Enum.ToString, X0
	293 Move X20, X0
	294 Move X0, X19
	295 Call 0x19913C0
	296 Move X0, X19
	297 Move X1, X20
	298 Call 0x19990B4
	299 Move X0, X19
	300 Move X1, X31
	301 Move X2, X20
	302 Call 0x1994444
	303 Move X0, 0xE6A000
	304 Move X0, [X0+1120]
	305 Call 0x1C17D08
	306 Move X1, X19
	307 Move X2, X31
	308 Call Environment.GetResourceString, X0, X1
	309 Move X19, X0
	310 Move X0, 0xE62000
	311 Move X0, [X0+736]
	312 Call 0x1C17D08
	313 Call 0x1C17F10
	314 Move X1, X19
	315 Move X2, X31
	316 Move X20, X0
	317 Call SerializationException..ctor, X0, X1
	318 Move X0, 0xE6A000
	319 Move X0, [X0+1424]
	320 Call 0x1C17D08
	321 Move X1, X0
	322 Move X0, X20
	323 Call 0x1C17DEC
	324 Move X8, 0xE38000
	325 Move X8, [X8+2512]
	326 Move X19, X0
	327 Move X0, X8
	328 Call 0x1C17D08
	329 Move W1, 1
	330 Call 0x1C17D6C
	331 Move X20, X0
	332 Move X0, X19
	333 Call 0x19913C0
	334 Move W8, [X19+48]
	335 Move X0, 0xE6A000
	336 Move [X31+12], W8
	337 Move X0, [X0+1344]
	338 Call 0x1C17D08
	339 Add X1, X31, 12
	340 Call 0x1C17E04
	341 Move X1, X31
	342 Call Enum.ToString, X0
	343 Move X19, X0
	344 Move X0, X20
	345 Call 0x19913C0
	346 Move X0, X20
	347 Move X1, X19
	348 Call 0x19990B4
	349 Move X0, X20
	350 Move X1, X31
	351 Move X2, X19
	352 Call 0x1994444
	353 Move X0, 0xE6A000
	354 Move X0, [X0+1392]
	355 Call 0x1C17D08
	356 Move X1, X20

Method: System.Void ReadArrayAsBytes(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr)

Disassembly:
	0x032BE3BC LDR X0, [X0 + 0x2E0]
	0x032BE3C0 BL 0x1C16D08
	0x032BE3C4 BL 0x1C16F10
	0x032BE3C8 MOV X1, X19
	0x032BE3CC MOV X2, X31
	0x032BE3D0 MOV X20, X0
	0x032BE3D4 BL 0x329F100
	0x032BE3D8 ADRP X0, 0xE67000
	0x032BE3DC LDR X0, [X0 + 0x5D0]
	0x032BE3E0 BL 0x1C16D08
	0x032BE3E4 MOV X1, X0
	0x032BE3E8 MOV X0, X20
	0x032BE3EC BL 0x1C16DEC
	0x032BE3F0 MOVZ W0, 0x8
	0x032BE3F4 BL 0x3EB1AF0
	0x032BE3F8 LDR X8, [X19]
	0x032BE3FC STR X8, [X0]
	0x032BE400 ADRP X1, 0xBF6000
	0x032BE404 ADD X1, X1, 0xE58
	0x032BE408 MOV X2, X31
	0x032BE40C BL 0x3EB1B00
	0x032BE410 MOV X19, X0
	0x032BE414 BL 0x3EB1AE0
	0x032BE418 MOV X0, X19
	0x032BE41C BL 0x1D2C690
	0x032BE420 BL 0x1990590
	0x032BE424 STR X30, [X31 - 0x30]!
	0x032BE428 STP X22, X21, [X31 + 0x10]
	0x032BE42C STP X20, X19, [X31 + 0x20]
	0x032BE430 ADRP X22, 0x111E000
	0x032BE434 ADRP X21, 0xE67000
	0x032BE438 LDRB W8, [X22 + 0x858]
	0x032BE43C LDR X21, [X21 + 0x1E0]
	0x032BE440 MOV X19, X1
	0x032BE444 MOV X20, X0
	0x032BE448 TBNZ X8, 0x0, 0x32BE46C
	0x032BE44C ADRP X0, 0xE67000
	0x032BE450 LDR X0, [X0 + 0x5D8]
	0x032BE454 BL 0x1C16CF4
	0x032BE458 ADRP X0, 0xE67000
	0x032BE45C LDR X0, [X0 + 0x1E0]
	0x032BE460 BL 0x1C16CF4
	0x032BE464 MOVZ W8, 0x1
	0x032BE468 STRB W8, [X22 + 0x858]
	0x032BE46C STR X31, [X31 + 0x8]
	0x032BE470 STR X19, [X20 + 0x10]
	0x032BE474 LDR X0, [X21]
	0x032BE478 LDR W8, [X0 + 0xE0]
	0x032BE47C CBNZ W8, 0x32BE488
	0x032BE480 BL 0x1C16DFC
	0x032BE484 LDR X0, [X21]
	0x032BE488 LDR X8, [X0 + 0xB8]
	0x032BE48C LDR X0, [X8]
	0x032BE490 CBZ X0, 0x32BE4C8
	0x032BE494 ADRP X8, 0xE67000
	0x032BE498 LDR X8, [X8 + 0x5D8]
	0x032BE49C ADD X2, X31, 0x8
	0x032BE4A0 MOV X1, X19
	0x032BE4A4 LDR X3, [X8]
	0x032BE4A8 BL 0x2985A04
	0x032BE4AC LDR X8, [X31 + 0x8]
	0x032BE4B0 LDP X20, X19, [X31 + 0x20]
	0x032BE4B4 LDP X22, X21, [X31 + 0x10]
	0x032BE4B8 ANDS W31, W0, 0x1
	0x032BE4BC CSEL X0, X8, X31, NE
	0x032BE4C0 LDR X30, [X31], #0x30
	0x032BE4C4 RET
	0x032BE4C8 BL 0x1C16F20
	0x032BE4CC STR X30, [X31 - 0x30]!
	0x032BE4D0 STP X22, X21, [X31 + 0x10]
	0x032BE4D4 STP X20, X19, [X31 + 0x20]
	0x032BE4D8 ADRP X22, 0x111E000
	0x032BE4DC ADRP X21, 0xE67000
	0x032BE4E0 LDRB W8, [X22 + 0x859]
	0x032BE4E4 LDR X21, [X21 + 0x1E0]
	0x032BE4E8 MOV X19, X1
	0x032BE4EC MOV X20, X0
	0x032BE4F0 TBNZ X8, 0x0, 0x32BE514
	0x032BE4F4 ADRP X0, 0xE67000
	0x032BE4F8 LDR X0, [X0 + 0x5E0]
	0x032BE4FC BL 0x1C16CF4
	0x032BE500 ADRP X0, 0xE67000
	0x032BE504 LDR X0, [X0 + 0x1E0]
	0x032BE508 BL 0x1C16CF4
	0x032BE50C MOVZ W8, 0x1
	0x032BE510 STRB W8, [X22 + 0x859]
	0x032BE514 LDR X0, [X21]
	0x032BE518 LDR W8, [X0 + 0xE0]
	0x032BE51C CBNZ W8, 0x32BE528
	0x032BE520 BL 0x1C16DFC
	0x032BE524 LDR X0, [X21]
	0x032BE528 LDR X8, [X0 + 0xB8]
	0x032BE52C LDR X0, [X8]
	0x032BE530 CBZ X0, 0x32BE558
	0x032BE534 ADRP X8, 0xE67000
	0x032BE538 LDR X8, [X8 + 0x5E0]
	0x032BE53C LDR X1, [X20 + 0x10]
	0x032BE540 MOV X2, X19
	0x032BE544 LDP X20, X19, [X31 + 0x20]
	0x032BE548 LDR X3, [X8]
	0x032BE54C LDP X22, X21, [X31 + 0x10]
	0x032BE550 LDR X30, [X31], #0x30
	0x032BE554 B 0x2986C5C
	0x032BE558 BL 0x1C16F20
	0x032BE55C MOV X1, X31
	0x032BE560 B 0x33BDD8C
	0x032BE564 STR X30, [X31 - 0x30]!
	0x032BE568 STP X22, X21, [X31 + 0x10]
	0x032BE56C STP X20, X19, [X31 + 0x20]
	0x032BE570 ADRP X21, 0x111E000
	0x032BE574 ADRP X22, 0xE67000
	0x032BE578 ADRP X19, 0xE67000
	0x032BE57C ADRP X20, 0xE67000
	0x032BE580 LDRB W8, [X21 + 0x85A]
	0x032BE584 LDR X22, [X22 + 0x5E8]
	0x032BE588 LDR X19, [X19 + 0x5F0]
	0x032BE58C LDR X20, [X20 + 0x1E0]
	0x032BE590 TBNZ X8, 0x0, 0x32BE5C0
	0x032BE594 ADRP X0, 0xE67000
	0x032BE598 LDR X0, [X0 + 0x5F0]
	0x032BE59C BL 0x1C16CF4
	0x032BE5A0 ADRP X0, 0xE67000
	0x032BE5A4 LDR X0, [X0 + 0x5E8]
	0x032BE5A8 BL 0x1C16CF4
	0x032BE5AC ADRP X0, 0xE67000
	0x032BE5B0 LDR X0, [X0 + 0x1E0]
	0x032BE5B4 BL 0x1C16CF4
	0x032BE5B8 MOVZ W8, 0x1
	0x032BE5BC STRB W8, [X21 + 0x85A]
	0x032BE5C0 LDR X0, [X22]
	0x032BE5C4 BL 0x1C16F10
	0x032BE5C8 LDR X1, [X19]
	0x032BE5CC MOV X19, X0
	0x032BE5D0 BL 0x2984BBC
	0x032BE5D4 LDR X8, [X20]
	0x032BE5D8 LDP X22, X21, [X31 + 0x10]
	0x032BE5DC LDR X8, [X8 + 0xB8]
	0x032BE5E0 STR X19, [X8]
	0x032BE5E4 LDP X20, X19, [X31 + 0x20]
	0x032BE5E8 LDR X30, [X31], #0x30
	0x032BE5EC RET
	0x032BE5F0 STP X30, X21, [X31 - 0x20]!
	0x032BE5F4 STP X20, X19, [X31 + 0x10]
	0x032BE5F8 MOV X20, X1
	0x032BE5FC MOV X1, X31
	0x032BE600 MOV X19, X2
	0x032BE604 MOV X21, X0
	0x032BE608 BL 0x33BDD8C
	0x032BE60C STP X20, X19, [X21 + 0x18]
	0x032BE610 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x111F000
	011 Move W8, [X20+2115]
	012 Move X21, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {32}
	018 Move X0, 0xE36000
	019 Move X0, [X0+1560]
	020 Call 0x1C17CF4
	021 Move X0, 0xE67000
	022 Move X0, [X0+3968]
	023 Call 0x1C17CF4
	024 Move X0, 0xE36000
	025 Move X0, [X0+1448]
	026 Call 0x1C17CF4
	027 Move X0, 0xE36000
	028 Move X0, [X0+3824]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+2115], W8
	032 Compare X21, 0
	033 JumpIfEqual {164}
	034 Move W20, [X21+124]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X8, [X21+136]
	038 Compare X8, 0
	039 JumpIfEqual {164}
	040 Move W9, [X8+24]
	041 Compare W9, 0
	042 JumpIfEqual {165}
	043 Move X0, [X19+104]
	044 Compare X0, 0
	045 JumpIfEqual {164}
	046 Move X9, [X0]
	047 Move W1, [X8+32]
	048 Move X8, [X9+712]
	049 Move X2, [X9+720]
	050 Move X8, [X21+136]
	051 Compare X8, 0
	052 JumpIfEqual {164}
	053 Move W9, [X8+24]
	054 Compare W9, 0
	055 JumpIfEqual {165}
	056 Move X0, [X19+104]
	057 Compare X0, 0
	058 JumpIfEqual {164}
	059 Move X9, [X0]
	060 Move W1, [X8+32]
	061 Move X8, [X9+680]
	062 Move X2, [X9+688]
	063 NotImplemented "Instruction BLR not yet implemented."
	064 Move [X21+232], X0
	065 Move X8, 0xE67000
	066 Move X8, [X8+3968]
	067 Move W22, W20
	068 Move X0, [X8]
	069 Move W8, [X0+224]
	070 Compare W8, 0
	071 JumpIfNotEqual {74}
	072 Call 0x1C17DFC
	073 Move W22, [X21+124]
	074 Move W0, W20
	075 Call Converter.TypeLength, X0
	076 Move X8, [X21+136]
	077 Compare X8, 0
	078 JumpIfEqual {164}
	079 Move W9, [X8+24]
	080 Compare W9, 0
	081 JumpIfEqual {165}
	082 Move W1, [X8+32]
	083 Move W20, W0
	084 Move W0, W22
	085 Call Converter.CreatePrimitiveArray, X0, X1
	086 Move X22, X0
	087 Move [X21+232], X0
	088 Compare X0, 0
	089 JumpIfEqual {101}
	090 Move X9, 0xE36000
	091 Move X9, [X9+3824]
	092 Move X8, [X22]
	093 Move X1, [X9]
	094 Move W10, [X8+304]
	095 Move W9, [X1+304]
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Move X8, [X8+200]
	098 Add X8, X8, X9
	099 NotImplemented "Instruction LDUR not yet implemented."
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X8, [X19+168]
	102 Compare X8, 0
	103 JumpIfNotEqual {110}
	104 Move X8, 0xE36000
	105 Move X8, [X8+1560]
	106 Move W1, 4096
	107 Move X0, [X8]
	108 Call 0x1C17D6C
	109 Move [X19+168], X0
	110 Compare X22, 0
	111 JumpIfEqual {164}
	112 Move X0, X22
	113 Move X1, X31
	114 Call Array.get_Length, X0
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move X26, 0xE36000
	117 Move X26, [X26+1448]
	118 Move W8, 4096
	119 Move W25, W31
	120 NotImplemented "Instruction SDIV not yet implemented."
	121 Move X0, X22
	122 Move X1, X31
	123 Call Array.get_Length, X0
	124 Move X8, [X26]
	125 Move W23, W0
	126 Move W9, [X8+224]
	127 Compare W9, 0
	128 JumpIfNotEqual {131}
	129 Move X0, X8
	130 Call 0x1C17DFC
	131 Subtract W1, W23, W25
	132 Move W0, W21
	133 Move X2, X31
	134 Call Math.Min, X0, X1
	135 Move X1, [X19+168]
	136 Multiply W24, W0, W20
	137 Move W23, W0
	138 Move X0, X19
	139 Move W2, W31
	140 Move W3, W24
	141 Call __BinaryParser.ReadBytes, X0, X1, X2, X3
	142 Move X0, [X19+168]
	143 Multiply W3, W25, W20
	144 Move W1, W31
	145 Move X2, X22
	146 Move W4, W24
	147 Move X5, X31
	148 Call Buffer.InternalBlockCopy, X0, X1, X2, X3, X4
	149 Move X0, X22
	150 Move X1, X31
	151 Add W25, W23, W25
	152 Call Array.get_Length, X0
	153 NotImplemented "Instruction CMP not yet implemented."
	154 Move X20, [X31+64]
	155 Move X19, [X31+72]
	156 Move X22, [X31+48]
	157 Move X21, [X31+56]
	158 Move X24, [X31+32]
	159 Move X23, [X31+40]
	160 Move X26, [X31+16]
	161 Move X25, [X31+24]
	162 Move X30, [X31+80]
	163 Return 
	164 Call 0x1C17F20
	165 Call 0x1C17F28
	166 Move X0, X22
	167 Call 0x1C181E0

Method: System.Void ReadMemberPrimitiveUnTyped()

Disassembly:
	0x032BD4A0 LDR X0, [X8]
	0x032BD4A4 LDR W8, [X0 + 0xE0]
	0x032BD4A8 CBNZ W8, 0x32BD4B4
	0x032BD4AC BL 0x1C16DFC
	0x032BD4B0 LDR W22, [X21 + 0x7C]
	0x032BD4B4 MOV W0, W20
	0x032BD4B8 BL 0x32AF13C
	0x032BD4BC LDR X8, [X21 + 0x88]
	0x032BD4C0 CBZ X8, 0x32BD604
	0x032BD4C4 LDR W9, [X8 + 0x18]
	0x032BD4C8 CBZ W9, 0x32BD608
	0x032BD4CC LDR W1, [X8 + 0x20]
	0x032BD4D0 MOV W20, W0
	0x032BD4D4 MOV W0, W22
	0x032BD4D8 BL 0x32AF8D0
	0x032BD4DC MOV X22, X0
	0x032BD4E0 STR X0, [X21 + 0xE8]
	0x032BD4E4 CBZ X0, 0x32BD51C
	0x032BD4E8 ADRP X9, 0xE36000
	0x032BD4EC LDR X9, [X9 + 0xEF0]
	0x032BD4F0 LDR X8, [X22]
	0x032BD4F4 LDR X1, [X9]
	0x032BD4F8 LDRB W10, [X8 + 0x130]
	0x032BD4FC LDRB W9, [X1 + 0x130]
	0x032BD500 CMP W10, W9
	0x032BD504 B.CC 0x32BD60C
	0x032BD508 LDR X8, [X8 + 0xC8]
	0x032BD50C ADD X8, X8, X9, 0x3, LSL
	0x032BD510 LDUR X8, [X8 - 0x8]
	0x032BD514 CMP X8, X1
	0x032BD518 B.NE 0x32BD60C
	0x032BD51C LDR X8, [X19 + 0xA8]
	0x032BD520 CBNZ X8, 0x32BD53C
	0x032BD524 ADRP X8, 0xE36000
	0x032BD528 LDR X8, [X8 + 0x618]
	0x032BD52C MOVZ W1, 0x1000
	0x032BD530 LDR X0, [X8]
	0x032BD534 BL 0x1C16D6C
	0x032BD538 STR X0, [X19 + 0xA8]
	0x032BD53C CBZ X22, 0x32BD604
	0x032BD540 MOV X0, X22
	0x032BD544 MOV X1, X31
	0x032BD548 BL 0x3395B7C
	0x032BD54C CMP W0, 0x1
	0x032BD550 B.LT 0x32BD5EC
	0x032BD554 ADRP X26, 0xE36000
	0x032BD558 LDR X26, [X26 + 0x5A8]
	0x032BD55C MOVZ W8, 0x1000
	0x032BD560 MOV W25, W31
	0x032BD564 SDIV W21, W8, W20
	0x032BD568 MOV X0, X22
	0x032BD56C MOV X1, X31
	0x032BD570 BL 0x3395B7C
	0x032BD574 LDR X8, [X26]
	0x032BD578 MOV W23, W0
	0x032BD57C LDR W9, [X8 + 0xE0]
	0x032BD580 CBNZ W9, 0x32BD58C
	0x032BD584 MOV X0, X8
	0x032BD588 BL 0x1C16DFC
	0x032BD58C SUB W1, W23, W25
	0x032BD590 MOV W0, W21
	0x032BD594 MOV X2, X31
	0x032BD598 BL 0x337EE94
	0x032BD59C LDR X1, [X19 + 0xA8]
	0x032BD5A0 MUL W24, W0, W20
	0x032BD5A4 MOV W23, W0
	0x032BD5A8 MOV X0, X19
	0x032BD5AC MOV W2, W31
	0x032BD5B0 MOV W3, W24
	0x032BD5B4 BL 0x32BC7A0
	0x032BD5B8 LDR X0, [X19 + 0xA8]
	0x032BD5BC MUL W3, W25, W20
	0x032BD5C0 MOV W1, W31
	0x032BD5C4 MOV X2, X22
	0x032BD5C8 MOV W4, W24
	0x032BD5CC MOV X5, X31
	0x032BD5D0 BL 0x33A8750
	0x032BD5D4 MOV X0, X22
	0x032BD5D8 MOV X1, X31
	0x032BD5DC ADD W25, W23, W25
	0x032BD5E0 BL 0x3395B7C
	0x032BD5E4 CMP W25, W0
	0x032BD5E8 B.LT 0x32BD568
	0x032BD5EC LDP X20, X19, [X31 + 0x40]
	0x032BD5F0 LDP X22, X21, [X31 + 0x30]
	0x032BD5F4 LDP X24, X23, [X31 + 0x20]
	0x032BD5F8 LDP X26, X25, [X31 + 0x10]
	0x032BD5FC LDR X30, [X31], #0x50
	0x032BD600 RET
	0x032BD604 BL 0x1C16F20
	0x032BD608 BL 0x1C16F28
	0x032BD60C MOV X0, X22
	0x032BD610 BL 0x1C171E0
	0x032BD614 STP X30, X21, [X31 - 0x20]!
	0x032BD618 STP X20, X19, [X31 + 0x10]
	0x032BD61C ADRP X19, 0x111F000
	0x032BD620 ADRP X21, 0xE65000
	0x032BD624 ADRP X20, 0xE68000
	0x032BD628 LDRB W8, [X19 + 0x84B]
	0x032BD62C LDR X21, [X21 + 0x828]
	0x032BD630 LDR X20, [X20 + 0x1B8]
	0x032BD634 TBNZ X8, 0x0, 0x32BD658
	0x032BD638 ADRP X0, 0xE65000
	0x032BD63C LDR X0, [X0 + 0x828]
	0x032BD640 BL 0x1C16CF4
	0x032BD644 ADRP X0, 0xE68000
	0x032BD648 LDR X0, [X0 + 0x1B8]
	0x032BD64C BL 0x1C16CF4
	0x032BD650 MOVZ W8, 0x1
	0x032BD654 STRB W8, [X19 + 0x84B]
	0x032BD658 LDR X0, [X21]
	0x032BD65C BL 0x1C16F10
	0x032BD660 MOVZ W2, 0x1
	0x032BD664 MOV W1, W31
	0x032BD668 MOV X3, X31
	0x032BD66C MOV X19, X0
	0x032BD670 BL 0x323A334
	0x032BD674 LDR X8, [X20]
	0x032BD678 LDR X8, [X8 + 0xB8]
	0x032BD67C STR X19, [X8]
	0x032BD680 LDP X20, X19, [X31 + 0x10]
	0x032BD684 LDP X30, X21, [X31], #0x20
	0x032BD688 RET
	0x032BD68C MOV X1, X31
	0x032BD690 B 0x33BDD8C
	0x032BD694 MOVI V0.2D, 0x0
	0x032BD698 STP W31, W31, [X0 + 0x7C]
	0x032BD69C STR X31, [X0 + 0x30]
	0x032BD6A0 STP X31, X31, [X0 + 0x40]
	0x032BD6A4 STUR X31, [X0 + 0x4D]
	0x032BD6A8 STRB W31, [X0 + 0x78]
	0x032BD6AC STP X31, X31, [X0 + 0xD0]
	0x032BD6B0 STR X31, [X0 + 0xC8]
	0x032BD6B4 STRB W31, [X0 + 0xE0]
	0x032BD6B8 STP X31, X31, [X0 + 0xE8]
	0x032BD6BC STRB W31, [X0 + 0x100]
	0x032BD6C0 STR X31, [X0 + 0xF8]
	0x032BD6C4 STR W31, [X0 + 0x118]
	0x032BD6C8 STP V0, V0, [X0 + 0x10]
	0x032BD6CC STUR V0, [X0 + 0x58]
	0x032BD6D0 STUR V0, [X0 + 0x68]
	0x032BD6D4 STUR V0, [X0 + 0x88]
	0x032BD6D8 STUR V0, [X0 + 0x98]
	0x032BD6DC STUR V0, [X0 + 0xA8]
	0x032BD6E0 STUR V0, [X0 + 0xB1]
	0x032BD6E4 STP X31, X31, [X0 + 0x108]
	0x032BD6E8 RET
	0x032BD6EC STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x1120000
	007 Move W8, [X20+2116]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xE68000
	014 Move X0, [X0+3968]
	015 Call 0x1C17CF4
	016 Move X0, 0xE68000
	017 Move X0, [X0+3976]
	018 Call 0x1C17CF4
	019 Move X0, 0xE69000
	020 Move X0, [X0+792]
	021 Call 0x1C17CF4
	022 Move X0, 0xE69000
	023 Move X0, [X0+104]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+2116], W8
	027 Move X0, [X19+64]
	028 Compare X0, 0
	029 JumpIfEqual {170}
	030 Move X1, X31
	031 Call SerStack.Peek, X0
	032 Move X20, X0
	033 Compare X0, 0
	034 JumpIfEqual {40}
	035 Move X8, 0xE69000
	036 Move X8, [X8+104]
	037 Move X1, [X8]
	038 Move X8, [X20]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X21, [X19+176]
	041 Compare X21, 0
	042 JumpIfNotEqual {53}
	043 Move X8, 0xE69000
	044 Move X8, [X8+792]
	045 Move X0, [X8]
	046 Call 0x1C17F10
	047 Move X1, X31
	048 Move X21, X0
	049 Call Object..ctor, X0
	050 Move [X19+176], X21
	051 Compare X21, 0
	052 JumpIfEqual {170}
	053 Move X0, [X19+80]
	054 Compare X0, 0
	055 JumpIfEqual {170}
	056 Move X22, 0xE68000
	057 Move X22, [X22+3976]
	058 Move X8, [X0]
	059 Move X1, [X22]
	060 Move X8, [X8+64]
	061 Move X9, [X1+64]
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Call 0x1C17E08
	064 Move W8, [X0]
	065 Move [X21+16], W8
	066 Move X0, [X19+176]
	067 Compare X0, 0
	068 JumpIfEqual {170}
	069 Move X1, X19
	070 Call MemberPrimitiveUnTyped.Read, X0, X1
	071 Move X8, [X19+176]
	072 Compare X8, 0
	073 JumpIfEqual {170}
	074 Move X0, X19
	075 Call __BinaryParser.get_prs, X0
	076 Compare X0, 0
	077 JumpIfEqual {170}
	078 Move X1, X31
	079 Call ParseRecord.Init, X0
	080 Move X0, X19
	081 Call __BinaryParser.get_prs, X0
	082 Move X8, [X19+176]
	083 Compare X8, 0
	084 JumpIfEqual {170}
	085 Compare X0, 0
	086 JumpIfEqual {170}
	087 Move X8, [X8+24]
	088 Move [X0+56], X8
	089 Move X0, X19
	090 Call __BinaryParser.get_prs, X0
	091 Compare X0, 0
	092 JumpIfEqual {170}
	093 Move X21, X0
	094 Move X0, [X19+80]
	095 Compare X0, 0
	096 JumpIfEqual {170}
	097 Move X8, [X0]
	098 Move X1, [X22]
	099 Move X8, [X8+64]
	100 Move X9, [X1+64]
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Call 0x1C17E08
	103 Move W8, [X0]
	104 Move X0, X19
	105 Move [X21+80], W8
	106 Call __BinaryParser.get_prs, X0
	107 Move X21, X0
	108 Move X0, X19
	109 Call __BinaryParser.get_prs, X0
	110 Compare X0, 0
	111 JumpIfEqual {170}
	112 Move X8, 0xE68000
	113 Move X8, [X8+3968]
	114 Move W22, [X0+80]
	115 Move X8, [X8]
	116 Move W9, [X8+224]
	117 Compare W9, 0
	118 JumpIfNotEqual {121}
	119 Move X0, X8
	120 Call 0x1C17DFC
	121 Move W0, W22
	122 Call Converter.ToType, X0
	123 Compare X21, 0
	124 JumpIfEqual {170}
	125 Move [X21+72], X0
	126 Move X0, X19
	127 Call __BinaryParser.get_prs, X0
	128 Compare X0, 0
	129 JumpIfEqual {170}
	130 Move W8, 3
	131 Move [X0+16], W8
	132 Move X0, X19
	133 Call __BinaryParser.get_prs, X0
	134 Compare X0, 0
	135 JumpIfEqual {170}
	136 Move W8, 1
	137 Move [X0+32], W8
	138 Compare X20, 0
	139 JumpIfEqual {170}
	140 Move W21, [X20+48]
	141 Move X0, X19
	142 Call __BinaryParser.get_prs, X0
	143 Compare X0, 0
	144 JumpIfEqual {170}
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Move W8, 2
	147 Move [X0+28], W8
	148 Move X0, X19
	149 Call __BinaryParser.get_prs, X0
	150 Compare X0, 0
	151 JumpIfEqual {170}
	152 Move X8, [X20+40]
	153 Move [X0+40], X8
	154 Move W8, 3
	155 Move [X0+28], W8
	156 Move X20, [X19+16]
	157 Move X0, X19
	158 Call __BinaryParser.get_prs, X0
	159 Compare X20, 0
	160 JumpIfEqual {170}
	161 Move X1, X0
	162 Move X0, X20
	163 Move X20, [X31+32]
	164 Move X19, [X31+40]
	165 Move X22, [X31+16]
	166 Move X21, [X31+24]
	167 Move X30, [X31+48]
	168 Call ObjectReader.Parse, X0, X1
	169 Return 
	170 Call 0x1C17F20
	171 Move X0, X20
	172 Call 0x1C181E0

Method: System.Void ReadMemberReference()

Disassembly:
	0x032BD018 MOV X24, X19
	0x032BD01C LDR W8, [X24 + 0x48]!
	0x032BD020 CMP W8, 0x0
	0x032BD024 B.LE 0x32BD23C
	0x032BD028 MOV X0, X29
	0x032BD02C BL 0x32BA894
	0x032BD030 CBZ X0, 0x32BD234
	0x032BD034 LDR W1, [X24]
	0x032BD038 MOV X2, X31
	0x032BD03C BL 0x32BDBB4
	0x032BD040 CBZ X0, 0x32BD264
	0x032BD044 ADRP X8, 0xE68000
	0x032BD048 LDR X8, [X8 + 0x38]
	0x032BD04C MOV X9, X0
	0x032BD050 LDR X1, [X8]
	0x032BD054 LDR X8, [X0]
	0x032BD058 CMP X8, X1
	0x032BD05C B.EQ 0x32BD06C
	0x032BD060 B 0x32BD238
	0x032BD064 MOV X0, X29
	0x032BD068 BL 0x32BA790
	0x032BD06C STR X0, [X31 + 0x10]
	0x032BD070 B 0x32BD078
	0x032BD074 STR X31, [X31 + 0x10]
	0x032BD078 LDR X24, [X19 + 0x18]
	0x032BD07C LDP X25, X26, [X19 + 0x28]
	0x032BD080 LDP X27, X28, [X19 + 0x38]
	0x032BD084 LDR X23, [X29 + 0x10]
	0x032BD088 LDR W20, [X19 + 0x14]
	0x032BD08C MOV X0, X29
	0x032BD090 BL 0x32BA894
	0x032BD094 LDR X7, [X31 + 0x10]
	0x032BD098 STR X0, [X31]
	0x032BD09C MOV X0, X24
	0x032BD0A0 MOV X1, X25
	0x032BD0A4 MOV X2, X26
	0x032BD0A8 MOV X3, X27
	0x032BD0AC MOV X4, X28
	0x032BD0B0 MOV X5, X23
	0x032BD0B4 MOV W6, W20
	0x032BD0B8 BL 0x32AED7C
	0x032BD0BC MOV X23, X0
	0x032BD0C0 MOV X0, X29
	0x032BD0C4 BL 0x32BA830
	0x032BD0C8 CBZ X0, 0x32BD234
	0x032BD0CC LDR W1, [X19 + 0x14]
	0x032BD0D0 MOV X2, X23
	0x032BD0D4 MOV X3, X31
	0x032BD0D8 BL 0x32BDC28
	0x032BD0DC MOVZ W8, 0x1
	0x032BD0E0 STR W8, [X22 + 0x30]
	0x032BD0E4 CBZ X23, 0x32BD234
	0x032BD0E8 LDR X8, [X23 + 0x20]
	0x032BD0EC STR X8, [X22 + 0x60]
	0x032BD0F0 LDR X9, [X23 + 0x28]
	0x032BD0F4 STR X9, [X22 + 0x68]
	0x032BD0F8 CBZ X8, 0x32BD234
	0x032BD0FC LDR X8, [X8 + 0x18]
	0x032BD100 STR W8, [X22 + 0x5C]
	0x032BD104 LDR X8, [X23 + 0x38]
	0x032BD108 STR X8, [X22 + 0x70]
	0x032BD10C LDR X8, [X23 + 0x30]
	0x032BD110 STR X8, [X22 + 0x78]
	0x032BD114 LDR X0, [X29 + 0x40]
	0x032BD118 CBZ X0, 0x32BD234
	0x032BD11C MOV X1, X31
	0x032BD120 BL 0x32BD970
	0x032BD124 CBZ X0, 0x32BD148
	0x032BD128 ADRP X8, 0xE68000
	0x032BD12C LDR X8, [X8 + 0x68]
	0x032BD130 LDR X1, [X8]
	0x032BD134 LDR X8, [X0]
	0x032BD138 CMP X8, X1
	0x032BD13C B.NE 0x32BD238
	0x032BD140 LDRB W8, [X0 + 0x10]
	0x032BD144 CBZ W8, 0x32BD1E4
	0x032BD148 LDR X8, [X19 + 0x18]
	0x032BD14C STR X8, [X22 + 0x28]
	0x032BD150 CBZ X21, 0x32BD234
	0x032BD154 MOVZ W8, 0x2
	0x032BD158 STR W8, [X21 + 0x10]
	0x032BD15C STR W31, [X22 + 0x38]
	0x032BD160 MOVZ W8, 0x1
	0x032BD164 ADD X1, X21, 0x110
	0x032BD168 ADD X2, X21, 0x108
	0x032BD16C MOV X0, X23
	0x032BD170 STR W8, [X21 + 0x14]
	0x032BD174 BL 0x32AEBD0
	0x032BD178 STR X0, [X21 + 0xD8]
	0x032BD17C LDR X0, [X29 + 0x10]
	0x032BD180 CBZ X0, 0x32BD234
	0x032BD184 LDRSW X1, [X19 + 0x14]
	0x032BD188 BL 0x32B7F2C
	0x032BD18C STR X0, [X21 + 0x58]
	0x032BD190 LDR X8, [X29 + 0x20]
	0x032BD194 CMP X0, X8
	0x032BD198 B.NE 0x32BD1A4
	0x032BD19C MOVZ W8, 0x1
	0x032BD1A0 STR W8, [X21 + 0x24]
	0x032BD1A4 LDR X8, [X19 + 0x18]
	0x032BD1A8 STR X8, [X21 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1120000
	006 Move W8, [X20+2117]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xE69000
	013 Move X0, [X0+800]
	014 Call 0x1C17CF4
	015 Move X0, 0xE69000
	016 Move X0, [X0+104]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+2117], W8
	020 Move X20, [X19+184]
	021 Compare X20, 0
	022 JumpIfNotEqual {33}
	023 Move X8, 0xE69000
	024 Move X8, [X8+800]
	025 Move X0, [X8]
	026 Call 0x1C17F10
	027 Move X1, X31
	028 Move X20, X0
	029 Call Object..ctor, X0
	030 Move [X19+184], X20
	031 Compare X20, 0
	032 JumpIfEqual {120}
	033 Move X0, X20
	034 Move X1, X19
	035 Call MemberReference.Read, X0, X1
	036 Move X8, [X19+184]
	037 Compare X8, 0
	038 JumpIfEqual {120}
	039 Move X0, [X19+64]
	040 Compare X0, 0
	041 JumpIfEqual {120}
	042 Move X1, X31
	043 Call SerStack.Peek, X0
	044 Move X20, X0
	045 Compare X0, 0
	046 JumpIfEqual {52}
	047 Move X8, 0xE69000
	048 Move X8, [X8+104]
	049 Move X1, [X8]
	050 Move X8, [X20]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X0, X19
	053 Call __BinaryParser.get_prs, X0
	054 Compare X0, 0
	055 JumpIfEqual {120}
	056 Move X1, X31
	057 Call ParseRecord.Init, X0
	058 Move X0, X19
	059 Call __BinaryParser.get_prs, X0
	060 Move X8, [X19+184]
	061 Compare X8, 0
	062 JumpIfEqual {120}
	063 Move X21, X0
	064 Move X0, [X19+16]
	065 Compare X0, 0
	066 JumpIfEqual {120}
	067 NotImplemented "Instruction LDRSW not yet implemented."
	068 Call ObjectReader.GetId, X0, X1
	069 Compare X21, 0
	070 JumpIfEqual {120}
	071 Move [X21+96], X0
	072 Move X0, X19
	073 Call __BinaryParser.get_prs, X0
	074 Compare X0, 0
	075 JumpIfEqual {120}
	076 Move W21, 3
	077 Move [X0+16], W21
	078 Move X0, X19
	079 Call __BinaryParser.get_prs, X0
	080 Compare X0, 0
	081 JumpIfEqual {120}
	082 Move [X0+32], W21
	083 Compare X20, 0
	084 JumpIfEqual {120}
	085 Move W21, [X20+48]
	086 Move X0, X19
	087 Call __BinaryParser.get_prs, X0
	088 Compare X0, 0
	089 JumpIfEqual {120}
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move W8, 2
	092 Move [X0+28], W8
	093 Move X0, X19
	094 Call __BinaryParser.get_prs, X0
	095 Compare X0, 0
	096 JumpIfEqual {120}
	097 Move X8, [X20+40]
	098 Move [X0+40], X8
	099 Move X0, X19
	100 Call __BinaryParser.get_prs, X0
	101 Compare X0, 0
	102 JumpIfEqual {120}
	103 Move X8, [X20+64]
	104 Move [X0+72], X8
	105 Move W8, 3
	106 Move [X0+28], W8
	107 Move X20, [X19+16]
	108 Move X0, X19
	109 Call __BinaryParser.get_prs, X0
	110 Compare X20, 0
	111 JumpIfEqual {120}
	112 Move X1, X0
	113 Move X0, X20
	114 Move X20, [X31+16]
	115 Move X19, [X31+24]
	116 Move X30, [X31+32]
	117 Move X21, [X31+40]
	118 Call ObjectReader.Parse, X0, X1
	119 Return 
	120 Call 0x1C17F20
	121 Move X0, X20
	122 Call 0x1C181E0

Method: System.Void ReadObjectNull(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum)

Disassembly:
	0x032BD1AC LDR X8, [X23 + 0x18]
	0x032BD1B0 STR W31, [X21 + 0x50]
	0x032BD1B4 STR X8, [X21 + 0x48]
	0x032BD1B8 LDR X0, [X29 + 0x10]
	0x032BD1BC CBZ X0, 0x32BD234
	0x032BD1C0 MOV X1, X21
	0x032BD1C4 LDP X20, X19, [X31 + 0x70]
	0x032BD1C8 LDP X22, X21, [X31 + 0x60]
	0x032BD1CC LDP X24, X23, [X31 + 0x50]
	0x032BD1D0 LDP X26, X25, [X31 + 0x40]
	0x032BD1D4 LDP X28, X27, [X31 + 0x30]
	0x032BD1D8 LDP X29, X30, [X31 + 0x20]
	0x032BD1DC ADD X31, X31, 0x80
	0x032BD1E0 B 0x32B6068
	0x032BD1E4 CBZ X21, 0x32BD234
	0x032BD1E8 MOVZ W8, 0x3
	0x032BD1EC MOVZ W9, 0x2
	0x032BD1F0 STR W8, [X21 + 0x10]
	0x032BD1F4 STR W9, [X21 + 0x20]
	0x032BD1F8 STR W9, [X22 + 0x38]
	0x032BD1FC LDR W9, [X0 + 0x30]
	0x032BD200 CMP W9, 0x2
	0x032BD204 B.EQ 0x32BD228
	0x032BD208 CMP W9, 0x1
	0x032BD20C B.NE 0x32BD33C
	0x032BD210 LDR X8, [X0 + 0x28]
	0x032BD214 MOVZ W9, 0x2
	0x032BD218 STR W9, [X21 + 0x1C]
	0x032BD21C STR X8, [X21 + 0x28]
	0x032BD220 STR W9, [X22 + 0x34]
	0x032BD224 B 0x32BD160
	0x032BD228 STR W8, [X21 + 0x1C]
	0x032BD22C STR W8, [X22 + 0x34]
	0x032BD230 B 0x32BD160
	0x032BD234 BL 0x1C16F20
	0x032BD238 BL 0x1C171E0
	0x032BD23C ADRP X0, 0xE36000
	0x032BD240 LDR X0, [X0 + 0x9D0]
	0x032BD244 BL 0x1C16D08
	0x032BD248 MOVZ W1, 0x1
	0x032BD24C BL 0x1C16D6C
	0x032BD250 MOV X20, X0
	0x032BD254 MOV X0, X19
	0x032BD258 BL 0x19903C0
	0x032BD25C LDR X19, [X19 + 0x18]
	0x032BD260 B 0x32BD2C4
	0x032BD264 ADRP X0, 0xE36000
	0x032BD268 LDR X0, [X0 + 0x9D0]
	0x032BD26C BL 0x1C16D08
	0x032BD270 MOVZ W1, 0x1
	0x032BD274 BL 0x1C16D6C
	0x032BD278 MOV X20, X0
	0x032BD27C MOV X0, X19
	0x032BD280 BL 0x19903C0
	0x032BD284 MOV X0, X24
	0x032BD288 MOV X1, X31
	0x032BD28C BL 0x337B6E0
	0x032BD290 MOV X21, X0
	0x032BD294 MOV X0, X19
	0x032BD298 BL 0x19903C0
	0x032BD29C ADRP X0, 0xE36000
	0x032BD2A0 LDR X19, [X19 + 0x18]
	0x032BD2A4 LDR X0, [X0 + 0xDD8]
	0x032BD2A8 BL 0x1C16D08
	0x032BD2AC MOV X1, X0
	0x032BD2B0 MOV X0, X21
	0x032BD2B4 MOV X2, X19
	0x032BD2B8 MOV X3, X31
	0x032BD2BC BL 0x32274B8
	0x032BD2C0 MOV X19, X0
	0x032BD2C4 MOV X0, X20
	0x032BD2C8 BL 0x19903C0
	0x032BD2CC MOV X0, X20
	0x032BD2D0 MOV X1, X19
	0x032BD2D4 BL 0x19980B4
	0x032BD2D8 MOV X0, X20
	0x032BD2DC MOV X1, X31
	0x032BD2E0 MOV X2, X19
	0x032BD2E4 BL 0x1993444
	0x032BD2E8 ADRP X0, 0xE67000
	0x032BD2EC LDR X0, [X0 + 0xF90]
	0x032BD2F0 BL 0x1C16D08
	0x032BD2F4 MOV X1, X20
	0x032BD2F8 MOV X2, X31
	0x032BD2FC BL 0x33BFB40
	0x032BD300 MOV X19, X0
	0x032BD304 ADRP X0, 0xE60000
	0x032BD308 LDR X0, [X0 + 0x2E0]
	0x032BD30C BL 0x1C16D08
	0x032BD310 BL 0x1C16F10
	0x032BD314 MOV X1, X19
	0x032BD318 MOV X2, X31
	0x032BD31C MOV X20, X0
	0x032BD320 BL 0x329F100
	0x032BD324 ADRP X0, 0xE68000
	0x032BD328 LDR X0, [X0 + 0x5C0]
	0x032BD32C BL 0x1C16D08
	0x032BD330 MOV X1, X0
	0x032BD334 MOV X0, X20
	0x032BD338 BL 0x1C16DEC
	0x032BD33C ADRP X8, 0xE36000
	0x032BD340 LDR X8, [X8 + 0x9D0]
	0x032BD344 MOV X19, X0
	0x032BD348 MOV X0, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1120000
	006 Move W8, [X21+2118]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xE69000
	014 Move X0, [X0+760]
	015 Call 0x1C17CF4
	016 Move X0, 0xE69000
	017 Move X0, [X0+104]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2118], W8
	021 Move X21, [X19+192]
	022 Compare X21, 0
	023 JumpIfNotEqual {34}
	024 Move X8, 0xE69000
	025 Move X8, [X8+760]
	026 Move X0, [X8]
	027 Call 0x1C17F10
	028 Move X1, X31
	029 Move X21, X0
	030 Call Object..ctor, X0
	031 Move [X19+192], X21
	032 Compare X21, 0
	033 JumpIfEqual {122}
	034 Move X0, X21
	035 Move X1, X19
	036 Move W2, W20
	037 Call ObjectNull.Read, X0, X1, X2
	038 Move X8, [X19+192]
	039 Compare X8, 0
	040 JumpIfEqual {122}
	041 Move X0, [X19+64]
	042 Compare X0, 0
	043 JumpIfEqual {122}
	044 Move X1, X31
	045 Call SerStack.Peek, X0
	046 Move X20, X0
	047 Compare X0, 0
	048 JumpIfEqual {54}
	049 Move X8, 0xE69000
	050 Move X8, [X8+104]
	051 Move X1, [X8]
	052 Move X8, [X20]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X0, X19
	055 Call __BinaryParser.get_prs, X0
	056 Compare X0, 0
	057 JumpIfEqual {122}
	058 Move X1, X31
	059 Call ParseRecord.Init, X0
	060 Move X0, X19
	061 Call __BinaryParser.get_prs, X0
	062 Compare X0, 0
	063 JumpIfEqual {122}
	064 Move W8, 3
	065 Move [X0+16], W8
	066 Move X0, X19
	067 Call __BinaryParser.get_prs, X0
	068 Compare X0, 0
	069 JumpIfEqual {122}
	070 Move W8, 4
	071 Move [X0+32], W8
	072 Compare X20, 0
	073 JumpIfEqual {122}
	074 Move W21, [X20+48]
	075 Move X0, X19
	076 Call __BinaryParser.get_prs, X0
	077 Compare X0, 0
	078 JumpIfEqual {122}
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move W8, 2
	081 Move [X0+28], W8
	082 Move X0, X19
	083 Call __BinaryParser.get_prs, X0
	084 Compare X0, 0
	085 JumpIfEqual {122}
	086 Move X8, [X20+40]
	087 Move [X0+40], X8
	088 Move X0, X19
	089 Call __BinaryParser.get_prs, X0
	090 Compare X0, 0
	091 JumpIfEqual {122}
	092 Move X8, [X20+64]
	093 Move [X0+72], X8
	094 Move W8, 3
	095 Move [X0+28], W8
	096 Move X0, X19
	097 Call __BinaryParser.get_prs, X0
	098 Move X8, [X19+192]
	099 Compare X8, 0
	100 JumpIfEqual {122}
	101 Compare X0, 0
	102 JumpIfEqual {122}
	103 Move W8, [X8+16]
	104 Move [X0+280], W8
	105 Move W9, [X20+20]
	106 Add W8, W8, W9
	107 Subtract W8, W8, 1
	108 Move [X20+20], W8
	109 Move X20, [X19+16]
	110 Move X0, X19
	111 Call __BinaryParser.get_prs, X0
	112 Compare X20, 0
	113 JumpIfEqual {122}
	114 Move X1, X0
	115 Move X0, X20
	116 Move X20, [X31+16]
	117 Move X19, [X31+24]
	118 Move X30, [X31+32]
	119 Move X21, [X31+40]
	120 Call ObjectReader.Parse, X0, X1
	121 Return 
	122 Call 0x1C17F20
	123 Move X0, X20
	124 Call 0x1C181E0

Method: System.Void ReadMessageEnd()

Disassembly:
	0x032BD34C BL 0x1C16D08
	0x032BD350 MOVZ W1, 0x1
	0x032BD354 BL 0x1C16D6C
	0x032BD358 MOV X20, X0
	0x032BD35C MOV X0, X19
	0x032BD360 BL 0x19903C0
	0x032BD364 LDR W8, [X19 + 0x30]
	0x032BD368 ADRP X0, 0xE68000
	0x032BD36C STR W8, [X31 + 0x1C]
	0x032BD370 LDR X0, [X0 + 0x540]
	0x032BD374 BL 0x1C16D08
	0x032BD378 ADD X1, X31, 0x1C
	0x032BD37C BL 0x1C16E04
	0x032BD380 MOV X1, X31
	0x032BD384 BL 0x33B162C
	0x032BD388 MOV X19, X0
	0x032BD38C MOV X0, X20
	0x032BD390 BL 0x19903C0
	0x032BD394 MOV X0, X20
	0x032BD398 MOV X1, X19
	0x032BD39C BL 0x19980B4
	0x032BD3A0 MOV X0, X20
	0x032BD3A4 MOV X1, X31
	0x032BD3A8 MOV X2, X19
	0x032BD3AC BL 0x1993444
	0x032BD3B0 ADRP X0, 0xE68000
	0x032BD3B4 LDR X0, [X0 + 0x570]
	0x032BD3B8 B 0x32BD2F0
	0x032BD3BC STR X30, [X31 - 0x50]!
	0x032BD3C0 STP X26, X25, [X31 + 0x10]
	0x032BD3C4 STP X24, X23, [X31 + 0x20]
	0x032BD3C8 STP X22, X21, [X31 + 0x30]
	0x032BD3CC STP X20, X19, [X31 + 0x40]
	0x032BD3D0 ADRP X20, 0x111F000
	0x032BD3D4 LDRB W8, [X20 + 0x843]
	0x032BD3D8 MOV X21, X1
	0x032BD3DC MOV X19, X0
	0x032BD3E0 TBNZ X8, 0x0, 0x32BD41C
	0x032BD3E4 ADRP X0, 0xE36000
	0x032BD3E8 LDR X0, [X0 + 0x618]
	0x032BD3EC BL 0x1C16CF4
	0x032BD3F0 ADRP X0, 0xE67000
	0x032BD3F4 LDR X0, [X0 + 0xF80]
	0x032BD3F8 BL 0x1C16CF4
	0x032BD3FC ADRP X0, 0xE36000
	0x032BD400 LDR X0, [X0 + 0x5A8]
	0x032BD404 BL 0x1C16CF4
	0x032BD408 ADRP X0, 0xE36000
	0x032BD40C LDR X0, [X0 + 0xEF0]
	0x032BD410 BL 0x1C16CF4
	0x032BD414 MOVZ W8, 0x1
	0x032BD418 STRB W8, [X20 + 0x843]
	0x032BD41C CBZ X21, 0x32BD604
	0x032BD420 LDR W20, [X21 + 0x7C]
	0x032BD424 CMP W20, 0x3
	0x032BD428 B.EQ 0x32BD460
	0x032BD42C CMP W20, 0x2
	0x032BD430 B.NE 0x32BD494
	0x032BD434 LDR X8, [X21 + 0x88]
	0x032BD438 CBZ X8, 0x32BD604
	0x032BD43C LDR W9, [X8 + 0x18]
	0x032BD440 CBZ W9, 0x32BD608
	0x032BD444 LDR X0, [X19 + 0x68]
	0x032BD448 CBZ X0, 0x32BD604
	0x032BD44C LDR X9, [X0]
	0x032BD450 LDR W1, [X8 + 0x20]
	0x032BD454 LDR X8, [X9 + 0x2C8]
	0x032BD458 LDR X2, [X9 + 0x2D0]
	0x032BD45C B 0x32BD488
	0x032BD460 LDR X8, [X21 + 0x88]
	0x032BD464 CBZ X8, 0x32BD604
	0x032BD468 LDR W9, [X8 + 0x18]
	0x032BD46C CBZ W9, 0x32BD608
	0x032BD470 LDR X0, [X19 + 0x68]
	0x032BD474 CBZ X0, 0x32BD604
	0x032BD478 LDR X9, [X0]
	0x032BD47C LDR W1, [X8 + 0x20]
	0x032BD480 LDR X8, [X9 + 0x2A8]
	0x032BD484 LDR X2, [X9 + 0x2B0]
	0x032BD488 BLR X8
	0x032BD48C STR X0, [X21 + 0xE8]
	0x032BD490 B 0x32BD5EC
	0x032BD494 ADRP X8, 0xE67000
	0x032BD498 LDR X8, [X8 + 0xF80]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1120000
	006 Move X21, 0xE69000
	007 Move W8, [X20+2119]
	008 Move X21, [X21+440]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xE69000
	015 Move X0, [X0+704]
	016 Call 0x1C17CF4
	017 Move X0, 0xE69000
	018 Move X0, [X0+440]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2119], W8
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X21]
	028 Move X8, [X0+184]
	029 Move X20, [X8+8]
	030 Call 0x1C17D44
	031 Compare X20, 0
	032 JumpIfEqual {34}
	033 Move X0, [X21]
	034 Move X8, 0xE69000
	035 Move X8, [X8+704]
	036 Move X0, [X8]
	037 Call 0x1C17F10
	038 Move X1, X31
	039 Move X20, X0
	040 Call Object..ctor, X0
	041 Move X0, [X21]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Call 0x1C17D44
	047 Move X0, [X21]
	048 Move X8, [X0+184]
	049 Move [X8+8], X20
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {55}
	053 Call 0x1C17DFC
	054 Move X0, [X21]
	055 Move X8, [X0+184]
	056 Move X20, [X8+8]
	057 Call 0x1C17D44
	058 Compare X20, 0
	059 JumpIfEqual {80}
	060 Move X8, [X21]
	061 Move X8, [X8+184]
	062 Move X20, [X8+8]
	063 Call 0x1C17D44
	064 Compare X20, 0
	065 JumpIfEqual {80}
	066 Move X0, [X19+64]
	067 Compare X0, 0
	068 JumpIfEqual {80}
	069 Move X1, X31
	070 Call SerStack.IsEmpty, X0
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfNotEqual {81}
	075 Move X20, [X31+16]
	076 Move X19, [X31+24]
	077 Move X30, [X31+32]
	078 Move X21, [X31+40]
	079 Return 
	080 Call 0x1C17F20
	081 Move X0, 0xE69000
	082 Move X0, [X0+992]
	083 Call 0x1C17D08
	084 Move X1, X31
	085 Call Environment.GetResourceString, X0
	086 Move X19, X0
	087 Move X0, 0xE61000
	088 Move X0, [X0+736]
	089 Call 0x1C17D08
	090 Call 0x1C17F10
	091 Move X1, X19
	092 Move X2, X31
	093 Move X20, X0
	094 Call SerializationException..ctor, X0, X1
	095 Move X0, 0xE69000
	096 Move X0, [X0+1448]
	097 Call 0x1C17D08
	098 Move X1, X0
	099 Move X0, X20
	100 Call 0x1C17DEC

Method: System.Object ReadValue(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code)

Disassembly:
	0x032ADC84 STR W8, [X19 + 0x14]
	0x032ADC88 LDR X0, [X22]
	0x032ADC8C MOVZ W1, 0x1
	0x032ADC90 BL 0x1C16D6C
	0x032ADC94 STR X0, [X19 + 0x20]
	0x032ADC98 STR W31, [X19 + 0x28]
	0x032ADC9C LDR X0, [X20 + 0x68]
	0x032ADCA0 CBZ X0, 0x32ADF5C
	0x032ADCA4 LDR X8, [X0]
	0x032ADCA8 LDP X9, X1, [X8 + 0x1D8]
	0x032ADCAC BLR X9
	0x032ADCB0 ADRP X8, 0xE77000
	0x032ADCB4 LDR X8, [X8 + 0xF88]
	0x032ADCB8 AND W9, W0, 0xFF
	0x032ADCBC ADD X1, X31, 0xC
	0x032ADCC0 STR W9, [X31 + 0xC]
	0x032ADCC4 LDR X8, [X8]
	0x032ADCC8 MOV X0, X8
	0x032ADCCC BL 0x1C16E04
	0x032ADCD0 B 0x32ADF48
	0x032ADCD4 CBZ X20, 0x32ADF5C
	0x032ADCD8 LDR X0, [X20 + 0x68]
	0x032ADCDC CBZ X0, 0x32ADF5C
	0x032ADCE0 LDR X8, [X0]
	0x032ADCE4 LDR X9, [X8 + 0x228]
	0x032ADCE8 LDR X1, [X8 + 0x230]
	0x032ADCEC BLR X9
	0x032ADCF0 STR W0, [X19 + 0x10]
	0x032ADCF4 ADRP X22, 0xE47000
	0x032ADCF8 LDR X22, [X22 + 0xE58]
	0x032ADCFC MOVZ W1, 0x1
	0x032ADD00 LDR X0, [X22]
	0x032ADD04 BL 0x1C16D6C
	0x032ADD08 STR X0, [X19 + 0x18]
	0x032ADD0C MOV X21, X0
	0x032ADD10 LDR X0, [X20 + 0x68]
	0x032ADD14 CBZ X0, 0x32ADF5C
	0x032ADD18 LDR X8, [X0]
	0x032ADD1C LDR X9, [X8 + 0x228]
	0x032ADD20 LDR X1, [X8 + 0x230]
	0x032ADD24 BLR X9
	0x032ADD28 CBZ X21, 0x32ADF5C
	0x032ADD2C LDR W8, [X21 + 0x18]
	0x032ADD30 CBZ W8, 0x32ADF60
	0x032ADD34 MOVZ W20, 0x1
	0x032ADD38 STR W0, [X21 + 0x20]
	0x032ADD3C STR W31, [X19 + 0x40]
	0x032ADD40 STR W20, [X19 + 0x14]
	0x032ADD44 LDR X0, [X22]
	0x032ADD48 MOVZ W1, 0x1
	0x032ADD4C BL 0x1C16D6C
	0x032ADD50 STR X0, [X19 + 0x20]
	0x032ADD54 STR W20, [X19 + 0x28]
	0x032ADD58 B 0x32ADDE4
	0x032ADD5C CBZ X20, 0x32ADF5C
	0x032ADD60 LDR X0, [X20 + 0x68]
	0x032ADD64 CBZ X0, 0x32ADF5C
	0x032ADD68 LDR X8, [X0]
	0x032ADD6C LDR X9, [X8 + 0x228]
	0x032ADD70 LDR X1, [X8 + 0x230]
	0x032ADD74 BLR X9
	0x032ADD78 STR W0, [X19 + 0x10]
	0x032ADD7C ADRP X22, 0xE47000
	0x032ADD80 LDR X22, [X22 + 0xE58]
	0x032ADD84 MOVZ W1, 0x1
	0x032ADD88 LDR X0, [X22]
	0x032ADD8C BL 0x1C16D6C
	0x032ADD90 STR X0, [X19 + 0x18]
	0x032ADD94 MOV X21, X0
	0x032ADD98 LDR X0, [X20 + 0x68]
	0x032ADD9C CBZ X0, 0x32ADF5C
	0x032ADDA0 LDR X8, [X0]
	0x032ADDA4 LDR X9, [X8 + 0x228]
	0x032ADDA8 LDR X1, [X8 + 0x230]
	0x032ADDAC BLR X9
	0x032ADDB0 CBZ X21, 0x32ADF5C
	0x032ADDB4 LDR W8, [X21 + 0x18]
	0x032ADDB8 CBZ W8, 0x32ADF60
	0x032ADDBC MOVZ W8, 0x1
	0x032ADDC0 STR W0, [X21 + 0x20]
	0x032ADDC4 STR W31, [X19 + 0x40]
	0x032ADDC8 STR W8, [X19 + 0x14]
	0x032ADDCC LDR X0, [X22]
	0x032ADDD0 MOVZ W1, 0x1
	0x032ADDD4 BL 0x1C16D6C
	0x032ADDD8 MOVZ W8, 0x2
	0x032ADDDC STR X0, [X19 + 0x20]
	0x032ADDE0 STR W8, [X19 + 0x28]
	0x032ADDE4 STR X31, [X19 + 0x30]
	0x032ADDE8 B 0x32ADF4C
	0x032ADDEC CBZ X20, 0x32ADF5C
	0x032ADDF0 LDR X0, [X20 + 0x68]
	0x032ADDF4 CBZ X0, 0x32ADF5C
	0x032ADDF8 LDR X8, [X0]
	0x032ADDFC LDR X9, [X8 + 0x228]
	0x032ADE00 LDR X1, [X8 + 0x230]
	0x032ADE04 BLR X9
	0x032ADE08 STR W0, [X19 + 0x10]
	0x032ADE0C LDR X0, [X20 + 0x68]
	0x032ADE10 CBZ X0, 0x32ADF5C
	0x032ADE14 LDR X8, [X0]
	0x032ADE18 LDP X9, X1, [X8 + 0x1D8]
	0x032ADE1C BLR X9
	0x032ADE20 AND W8, W0, 0xFF
	0x032ADE24 STR W8, [X19 + 0x40]
	0x032ADE28 LDR X0, [X20 + 0x68]
	0x032ADE2C CBZ X0, 0x32ADF5C
	0x032ADE30 LDR X8, [X0]
	0x032ADE34 LDR X9, [X8 + 0x228]
	0x032ADE38 LDR X1, [X8 + 0x230]
	0x032ADE3C BLR X9
	0x032ADE40 STR W0, [X19 + 0x14]
	0x032ADE44 ADRP X21, 0xE47000
	0x032ADE48 LDR X21, [X21 + 0xE58]
	0x032ADE4C MOV W1, W0
	0x032ADE50 LDR X0, [X21]
	0x032ADE54 BL 0x1C16D6C
	0x032ADE58 STR X0, [X19 + 0x18]
	0x032ADE5C LDR W1, [X19 + 0x14]
	0x032ADE60 LDR X0, [X21]
	0x032ADE64 BL 0x1C16D6C
	0x032ADE68 LDR W8, [X19 + 0x14]
	0x032ADE6C STR X0, [X19 + 0x20]
	0x032ADE70 CMP W8, 0x1
	0x032ADE74 B.LT 0x32ADEC0
	0x032ADE78 MOV X21, X31
	0x032ADE7C LDR X0, [X20 + 0x68]
	0x032ADE80 CBZ X0, 0x32ADF5C
	0x032ADE84 LDR X8, [X0]
	0x032ADE88 LDR X22, [X19 + 0x18]
	0x032ADE8C LDR X9, [X8 + 0x228]
	0x032ADE90 LDR X1, [X8 + 0x230]
	0x032ADE94 BLR X9
	0x032ADE98 CBZ X22, 0x32ADF5C
	0x032ADE9C LDR W8, [X22 + 0x18]
	0x032ADEA0 CMP X21, X8
	0x032ADEA4 B.CS 0x32ADF60
	0x032ADEA8 ADD X8, X22, X21, 0x2, LSL
	0x032ADEAC STR W0, [X8 + 0x20]
	0x032ADEB0 LDRSW X8, [X19 + 0x14]
	0x032ADEB4 ADD X21, X21, 0x1
	0x032ADEB8 CMP X21, X8
	0x032ADEBC B.LT 0x32ADE7C
	0x032ADEC0 LDR W9, [X19 + 0x40]
	0x032ADEC4 SUB W9, W9, 0x3
	0x032ADEC8 CMP W9, 0x2
	0x032ADECC B.HI 0x32ADF20
	0x032ADED0 CMP W8, 0x1
	0x032ADED4 B.LT 0x32ADF20
	0x032ADED8 MOV X21, X31
	0x032ADEDC LDR X0, [X20 + 0x68]
	0x032ADEE0 CBZ X0, 0x32ADF5C
	0x032ADEE4 LDR X8, [X0]
	0x032ADEE8 LDR X22, [X19 + 0x20]
	0x032ADEEC LDR X9, [X8 + 0x228]
	0x032ADEF0 LDR X1, [X8 + 0x230]
	0x032ADEF4 BLR X9
	0x032ADEF8 CBZ X22, 0x32ADF5C
	0x032ADEFC LDR W8, [X22 + 0x18]
	0x032ADF00 CMP X21, X8
	0x032ADF04 B.CS 0x32ADF60
	0x032ADF08 ADD X8, X22, X21, 0x2, LSL
	0x032ADF0C STR W0, [X8 + 0x20]
	0x032ADF10 LDRSW X8, [X19 + 0x14]
	0x032ADF14 ADD X21, X21, 0x1
	0x032ADF18 CMP X21, X8
	0x032ADF1C B.LT 0x32ADEDC
	0x032ADF20 LDR X0, [X20 + 0x68]
	0x032ADF24 CBZ X0, 0x32ADF5C
	0x032ADF28 LDR X8, [X0]
	0x032ADF2C LDP X9, X1, [X8 + 0x1D8]
	0x032ADF30 BLR X9
	0x032ADF34 AND W0, W0, 0xFF
	0x032ADF38 ADD X2, X19, 0x38
	0x032ADF3C MOV X1, X20
	0x032ADF40 STR W0, [X19 + 0x28]
	0x032ADF44 BL 0x32AADD4
	0x032ADF48 STR X0, [X19 + 0x30]
	0x032ADF4C LDP X20, X19, [X31 + 0x20]
	0x032ADF50 LDP X22, X21, [X31 + 0x10]
	0x032ADF54 LDR X30, [X31], #0x30
	0x032ADF58 RET
	0x032ADF5C BL 0x1C16F20
	0x032ADF60 BL 0x1C16F28
	0x032ADF64 MOV X1, X31
	0x032ADF68 B 0x33BDD8C
	0x032ADF6C STR W1, [X0 + 0x10]
	0x032ADF70 STR X2, [X0 + 0x18]
	0x032ADF74 RET
	0x032ADF78 STR W1, [X0 + 0x10]
	0x032ADF7C RET
	0x032ADF80 STR X30, [X31 - 0x10]!
	0x032ADF84 CBZ X1, 0x32ADFA0
	0x032ADF88 LDR W8, [X0 + 0x10]
	0x032ADF8C LDR X2, [X0 + 0x18]
	0x032ADF90 MOV X0, X1
	0x032ADF94 MOV W1, W8
	0x032ADF98 LDR X30, [X31], #0x10
	0x032ADF9C B 0x32AB8D4
	0x032ADFA0 BL 0x1C16F20
	0x032ADFA4 STP X30, X19, [X31 - 0x10]!
	0x032ADFA8 CBZ X1, 0x32ADFCC
	0x032ADFAC LDR W8, [X0 + 0x10]
	0x032ADFB0 MOV X19, X0
	0x032ADFB4 MOV X0, X1
	0x032ADFB8 MOV W1, W8
	0x032ADFBC BL 0x32ACC84
	0x032ADFC0 STR X0, [X19 + 0x18]
	0x032ADFC4 LDP X30, X19, [X31], #0x10
	0x032ADFC8 RET
	0x032ADFCC BL 0x1C16F20
	0x032ADFD0 RET
	0x032ADFD4 MOV X1, X31
	0x032ADFD8 B 0x33BDD8C
	0x032ADFDC STR W1, [X0 + 0x10]
	0x032ADFE0 RET
	0x032ADFE4 STR X30, [X31 - 0x20]!
	0x032ADFE8 STP X20, X19, [X31 + 0x10]
	0x032ADFEC CBZ X1, 0x32AE034
	0x032ADFF0 MOV X19, X0
	0x032ADFF4 LDR X0, [X1 + 0x30]
	0x032ADFF8 MOV X20, X1
	0x032ADFFC CBZ X0, 0x32AE034
	0x032AE000 LDR X8, [X0]
	0x032AE004 MOVZ W1, 0x9
	0x032AE008 LDP X9, X2, [X8 + 0x1C8]
	0x032AE00C BLR X9
	0x032AE010 LDR X0, [X20 + 0x30]
	0x032AE014 CBZ X0, 0x32AE034
	0x032AE018 LDR X8, [X0]
	0x032AE01C LDR W1, [X19 + 0x10]
	0x032AE020 LDP X20, X19, [X31 + 0x10]
	0x032AE024 LDR X3, [X8 + 0x248]
	0x032AE028 LDR X2, [X8 + 0x250]
	0x032AE02C LDR X30, [X31], #0x20
	0x032AE030 BR X3
	0x032AE034 BL 0x1C16F20
	0x032AE038 STP X30, X19, [X31 - 0x10]!
	0x032AE03C CBZ X1, 0x32AE068
	0x032AE040 MOV X19, X0
	0x032AE044 LDR X0, [X1 + 0x68]
	0x032AE048 CBZ X0, 0x32AE068
	0x032AE04C LDR X8, [X0]
	0x032AE050 LDR X9, [X8 + 0x228]
	0x032AE054 LDR X1, [X8 + 0x230]
	0x032AE058 BLR X9
	0x032AE05C STR W0, [X19 + 0x10]
	0x032AE060 LDP X30, X19, [X31], #0x10
	0x032AE064 RET
	0x032AE068 BL 0x1C16F20
	0x032AE06C RET
	0x032AE070 MOV X1, X31
	0x032AE074 B 0x33BDD8C
	0x032AE078 STR W1, [X0 + 0x10]
	0x032AE07C RET
	0x032AE080 STR X30, [X31 - 0x20]!
	0x032AE084 STP X20, X19, [X31 + 0x10]
	0x032AE088 LDR W8, [X0 + 0x10]
	0x032AE08C MOV X20, X1
	0x032AE090 CMP W8, 0x1
	0x032AE094 B.NE 0x32AE0B0
	0x032AE098 CBZ X20, 0x32AE128
	0x032AE09C LDR X0, [X20 + 0x30]
	0x032AE0A0 CBZ X0, 0x32AE128
	0x032AE0A4 LDR X8, [X0]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 NotImplemented "Instruction MRS not yet implemented."
	008 Move X8, [X21+40]
	009 Move X22, 0x1130000
	010 Move W19, W1
	011 Move X20, X0
	012 Move [X31+24], X8
	013 Move W8, [X22+2120]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {65}
	018 Move X0, 0xE47000
	019 Move X0, [X0+2904]
	020 Call 0x1C17CF4
	021 Move X0, 0xE48000
	022 Move X0, [X0+2520]
	023 Call 0x1C17CF4
	024 Move X0, 0xE49000
	025 Move X0, [X0+368]
	026 Call 0x1C17CF4
	027 Move X0, 0xE48000
	028 Move X0, [X0+2544]
	029 Call 0x1C17CF4
	030 Move X0, 0xE6F000
	031 Move X0, [X0+1520]
	032 Call 0x1C17CF4
	033 Move X0, 0xE4A000
	034 Move X0, [X0+2424]
	035 Call 0x1C17CF4
	036 Move X0, 0xE4B000
	037 Move X0, [X0+1576]
	038 Call 0x1C17CF4
	039 Move X0, 0xE47000
	040 Move X0, [X0+1880]
	041 Call 0x1C17CF4
	042 Move X0, 0xE49000
	043 Move X0, [X0+2656]
	044 Call 0x1C17CF4
	045 Move X0, 0xE70000
	046 Move X0, [X0+1712]
	047 Call 0x1C17CF4
	048 Move X0, 0xE47000
	049 Move X0, [X0+2704]
	050 Call 0x1C17CF4
	051 Move X0, 0xE49000
	052 Move X0, [X0+1392]
	053 Call 0x1C17CF4
	054 Move X0, 0xE4C000
	055 Move X0, [X0+1624]
	056 Call 0x1C17CF4
	057 Move X0, 0xE4F000
	058 Move X0, [X0+1824]
	059 Call 0x1C17CF4
	060 Move X0, 0xE48000
	061 Move X0, [X0+1880]
	062 Call 0x1C17CF4
	063 Move W8, 1
	064 Move [X22+2120], W8
	065 Subtract W8, W19, 1
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move X9, -40984576
	068 Add X9, X9, 1304
	069 NotImplemented "Instruction ADR not yet implemented."
	070 Move W11, [X9]
	071 Add X10, X10, X11
	072 CallNoReturn X10
	073 Move X0, [X20+104]
	074 Compare X0, 0
	075 JumpIfEqual {228}
	076 Move X8, [X0]
	077 Move X9, [X8+456]
	078 Move X1, [X8+464]
	079 NotImplemented "Instruction BLR not yet implemented."
	080 Move X8, 0xE47000
	081 Move X8, [X8+2904]
	082 And W9, W0, 1
	083 Move [X31+8], W9
	084 Move X0, X20
	085 Call __BinaryParser.ReadDateTime, X0
	086 Move X8, 0xE48000
	087 Move X8, [X8+2544]
	088 Move X0, [X20+104]
	089 Compare X0, 0
	090 JumpIfEqual {228}
	091 Move X8, [X0]
	092 Move X9, [X8+616]
	093 Move X1, [X8+624]
	094 NotImplemented "Instruction BLR not yet implemented."
	095 Move X8, 0xE47000
	096 Move X8, [X8+2704]
	097 Move [X31+8], S0
	098 Move X0, [X20+104]
	099 Compare X0, 0
	100 JumpIfEqual {228}
	101 Move X8, [X0]
	102 Move X9, [X8+536]
	103 Move X1, [X8+544]
	104 NotImplemented "Instruction BLR not yet implemented."
	105 Move X8, 0xE4C000
	106 Move X8, [X8+1624]
	107 Move X0, [X20+104]
	108 Compare X0, 0
	109 JumpIfEqual {228}
	110 Move X8, [X0]
	111 Move X9, [X8+472]
	112 Move X1, [X8+480]
	113 NotImplemented "Instruction BLR not yet implemented."
	114 Move X8, 0xE70000
	115 Move X8, [X8+1712]
	116 Move X0, [X20+104]
	117 Compare X0, 0
	118 JumpIfEqual {228}
	119 Move X8, [X0]
	120 Move X9, [X8+584]
	121 Move X1, [X8+592]
	122 NotImplemented "Instruction BLR not yet implemented."
	123 Move X8, 0xE49000
	124 Move X8, [X8+1392]
	125 Move X0, [X20+104]
	126 Compare X0, 0
	127 JumpIfEqual {228}
	128 Move X8, [X0]
	129 Move X9, [X8+568]
	130 Move X1, [X8+576]
	131 NotImplemented "Instruction BLR not yet implemented."
	132 Move X8, 0xE4F000
	133 Move X8, [X8+1824]
	134 Move X0, [X20+104]
	135 Compare X0, 0
	136 JumpIfEqual {228}
	137 Move X8, [X0]
	138 Move X9, [X8+472]
	139 Move X1, [X8+480]
	140 NotImplemented "Instruction BLR not yet implemented."
	141 Move X8, 0xE48000
	142 Move X8, [X8+2520]
	143 Move X8, [X8]
	144 Move [X31+8], W0
	145 Move X0, [X20+104]
	146 Compare X0, 0
	147 JumpIfEqual {228}
	148 Move X8, [X0]
	149 Move X9, [X8+632]
	150 Move X1, [X8+640]
	151 NotImplemented "Instruction BLR not yet implemented."
	152 Move X8, 0xE4A000
	153 Move X8, [X8+2424]
	154 Move [X31+8], D0
	155 Move X0, [X8]
	156 Add X1, X31, 8
	157 Move X0, [X20+104]
	158 Compare X0, 0
	159 JumpIfEqual {228}
	160 Move X8, [X0]
	161 Move X9, [X8+520]
	162 Move X1, [X8+528]
	163 NotImplemented "Instruction BLR not yet implemented."
	164 Move X8, 0xE4B000
	165 Move X8, [X8+1576]
	166 Move X0, [X20+104]
	167 Compare X0, 0
	168 JumpIfEqual {228}
	169 Move X8, [X0]
	170 Move X9, [X8+600]
	171 Move X1, [X8+608]
	172 NotImplemented "Instruction BLR not yet implemented."
	173 Move X8, 0xE48000
	174 Move X8, [X8+1880]
	175 Move X0, [X20+104]
	176 Compare X0, 0
	177 JumpIfEqual {228}
	178 Move X8, [X0]
	179 Move X9, [X8+504]
	180 Move X1, [X8+512]
	181 NotImplemented "Instruction BLR not yet implemented."
	182 Move X8, 0xE49000
	183 Move X8, [X8+368]
	184 Move X8, [X8]
	185 NotImplemented "Instruction STRH not yet implemented."
	186 Move X0, X20
	187 Call __BinaryParser.ReadDecimal, X0
	188 Move X8, 0xE6F000
	189 Move X8, [X8+1520]
	190 Move [X31+8], X0
	191 Move [X31+16], X1
	192 Move X8, [X8]
	193 Move X0, [X20+104]
	194 Compare X0, 0
	195 JumpIfEqual {228}
	196 Move X8, [X0]
	197 Move X9, [X8+584]
	198 Move X1, [X8+592]
	199 NotImplemented "Instruction BLR not yet implemented."
	200 Move X8, 0xE49000
	201 Move X8, [X8+2656]
	202 Move X8, [X8]
	203 Move [X31+8], X0
	204 Move X0, [X20+104]
	205 Compare X0, 0
	206 JumpIfEqual {228}
	207 Move X8, [X0]
	208 Move X9, [X8+552]
	209 Move X1, [X8+560]
	210 NotImplemented "Instruction BLR not yet implemented."
	211 Move X8, 0xE47000
	212 Move X8, [X8+1880]
	213 Move X8, [X8]
	214 Move [X31+8], W0
	215 Add X1, X31, 8
	216 Move X0, X8
	217 Call 0x1C17E04
	218 Move X8, [X21+40]
	219 Move X9, [X31+24]
	220 NotImplemented "Instruction CMP not yet implemented."
	221 Move X20, [X31+64]
	222 Move X19, [X31+72]
	223 Move X22, [X31+48]
	224 Move X21, [X31+56]
	225 Move X30, [X31+32]
	226 Add X31, X31, 80
	227 Return X0
	228 Call 0x1C17F20
	229 Move X0, 0xE47000
	230 Move X0, [X0+2512]
	231 Call 0x1C17D08
	232 Move W1, 1
	233 Call 0x1C17D6C
	234 Move X20, X0
	235 Move [X31+8], W19
	236 Move X0, 0xE77000
	237 Move X0, [X0+3976]
	238 Call 0x1C17D08
	239 Add X1, X31, 8
	240 Call 0x1C17E04
	241 Move X1, X31
	242 Call Enum.ToString, X0
	243 Move X19, X0
	244 Move X0, X20
	245 Call 0x19913C0
	246 Move X0, X20
	247 Move X1, X19
	248 Call 0x19990B4
	249 Move X0, X20
	250 Move X1, X31
	251 Move X2, X19
	252 Call 0x1994444
	253 Move X0, 0xE77000
	254 Move X0, [X0+4048]
	255 Call 0x1C17D08
	256 Move X1, X20
	257 Move X2, X31
	258 Call Environment.GetResourceString, X0, X1
	259 Move X19, X0
	260 Move X0, 0xE70000
	261 Move X0, [X0+736]
	262 Call 0x1C17D08
	263 Call 0x1C17F10
	264 Move X1, X19
	265 Move X2, X31
	266 Move X20, X0
	267 Call SerializationException..ctor, X0, X1
	268 Move X0, 0xE78000
	269 Move X0, [X0+8]
	270 Call 0x1C17D08
	271 Move X1, X0
	272 Move X0, X20
	273 Call 0x1C17DEC
	274 Call 0x3EB2B20

Method: System.Runtime.Serialization.Formatters.Binary.ObjectProgress GetOp()

Disassembly:
	0x032BDAD0 MOVZ W8, 0x1
	0x032BDAD4 STRB W8, [X21 + 0x851]
	0x032BDAD8 MOV X0, X20
	0x032BDADC MOV X1, X31
	0x032BDAE0 BL 0x33BDD8C
	0x032BDAE4 CBZ X19, 0x32BDB58
	0x032BDAE8 LDR X8, [X19 + 0x10]
	0x032BDAEC CBZ X8, 0x32BDB58
	0x032BDAF0 ADRP X21, 0xE36000
	0x032BDAF4 LDR X21, [X21 + 0x9D0]
	0x032BDAF8 LDR W1, [X8 + 0x18]
	0x032BDAFC LDR X0, [X21]
	0x032BDB00 BL 0x1C16D6C
	0x032BDB04 STR X0, [X20 + 0x10]
	0x032BDB08 MOV X1, X0
	0x032BDB0C LDR X0, [X19 + 0x10]
	0x032BDB10 CBZ X0, 0x32BDB58
	0x032BDB14 MOV W2, W31
	0x032BDB18 MOV X3, X31
	0x032BDB1C BL 0x339FC34
	0x032BDB20 LDR X8, [X19 + 0x18]
	0x032BDB24 CBZ X8, 0x32BDB58
	0x032BDB28 LDR X0, [X21]
	0x032BDB2C LDR W1, [X8 + 0x18]
	0x032BDB30 BL 0x1C16D6C
	0x032BDB34 STR X0, [X20 + 0x18]
	0x032BDB38 MOV X1, X0
	0x032BDB3C LDR X0, [X19 + 0x18]
	0x032BDB40 CBZ X0, 0x32BDB58
	0x032BDB44 LDP X20, X19, [X31 + 0x10]
	0x032BDB48 MOV W2, W31
	0x032BDB4C MOV X3, X31
	0x032BDB50 LDP X30, X21, [X31], #0x20
	0x032BDB54 B 0x339FC34
	0x032BDB58 BL 0x1C16F20
	0x032BDB5C STP X30, X21, [X31 - 0x20]!
	0x032BDB60 STP X20, X19, [X31 + 0x10]
	0x032BDB64 ADRP X20, 0x111F000
	0x032BDB68 ADRP X21, 0xE68000
	0x032BDB6C LDRB W8, [X20 + 0x852]
	0x032BDB70 LDR X21, [X21 + 0x508]
	0x032BDB74 MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1120000
	005 Move W8, [X20+2121]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE69000
	012 Move X0, [X0+104]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2121], W8
	016 Move X20, 0xE69000
	017 Move X0, [X19+112]
	018 Move X20, [X20+104]
	019 Compare X0, 0
	020 JumpIfEqual {27}
	021 Move X1, X31
	022 Call SerStack.IsEmpty, X0
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {31}
	027 Move X0, [X20]
	028 Call 0x1C17F10
	029 Move X19, X0
	030 Call ObjectProgress..ctor, X0
	031 Move X0, [X19+112]
	032 Compare X0, 0
	033 JumpIfEqual {49}
	034 Move X1, X31
	035 Call SerStack.Pop, X0
	036 Compare X0, 0
	037 JumpIfEqual {49}
	038 Move X1, [X20]
	039 Move X8, [X0]
	040 Move X19, X0
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X0, X19
	043 Call ObjectProgress.Init, X0
	044 Move X0, X19
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Return X0
	049 Call 0x1C17F20
	050 Move X0, X19
	051 Call 0x1C181E0

Method: System.Void PutOp(System.Runtime.Serialization.Formatters.Binary.ObjectProgress op)

Disassembly:
	0x032BD6F0 STP X20, X19, [X31 + 0x10]
	0x032BD6F4 ADRP X19, 0x111F000
	0x032BD6F8 ADRP X20, 0xE68000
	0x032BD6FC LDRB W8, [X19 + 0x84C]
	0x032BD700 LDR X20, [X20 + 0x60]
	0x032BD704 TBNZ X8, 0x0, 0x32BD71C
	0x032BD708 ADRP X0, 0xE68000
	0x032BD70C LDR X0, [X0 + 0x60]
	0x032BD710 BL 0x1C16CF4
	0x032BD714 MOVZ W8, 0x1
	0x032BD718 STRB W8, [X19 + 0x84C]
	0x032BD71C LDR X8, [X20]
	0x032BD720 LDP X20, X19, [X31 + 0x10]
	0x032BD724 MOVZ W9, 0x1
	0x032BD728 LDR X8, [X8 + 0xB8]
	0x032BD72C STR W9, [X8]
	0x032BD730 LDR X30, [X31], #0x20
	0x032BD734 RET
	0x032BD738 STR X30, [X31 - 0x30]!
	0x032BD73C STP X22, X21, [X31 + 0x10]
	0x032BD740 STP X20, X19, [X31 + 0x20]
	0x032BD744 ADRP X21, 0x111F000
	0x032BD748 ADRP X22, 0xE36000
	0x032BD74C LDRB W8, [X21 + 0x84D]
	0x032BD750 LDR X22, [X22 + 0x9D0]
	0x032BD754 MOV X19, X1
	0x032BD758 MOV X20, X0
	0x032BD75C TBNZ X8, 0x0, 0x32BD774
	0x032BD760 ADRP X0, 0xE36000
	0x032BD764 LDR X0, [X0 + 0x9D0]
	0x032BD768 BL 0x1C16CF4
	0x032BD76C MOVZ W8, 0x1
	0x032BD770 STRB W8, [X21 + 0x84D]
	0x032BD774 LDR X0, [X22]
	0x032BD778 MOVZ W1, 0x5
	0x032BD77C BL 0x1C16D6C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1120000
	006 Move W8, [X21+2122]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xE69000
	014 Move X0, [X0+504]
	015 Call 0x1C17CF4
	016 Move X0, 0xE69000
	017 Move X0, [X0+1456]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2122], W8
	021 Move X21, [X20+112]
	022 Compare X21, 0
	023 JumpIfNotEqual {37}
	024 Move X8, 0xE69000
	025 Move X8, [X8+504]
	026 Move X0, [X8]
	027 Call 0x1C17F10
	028 Move X8, 0xE69000
	029 Move X8, [X8+1456]
	030 Move X2, X31
	031 Move X21, X0
	032 Move X1, [X8]
	033 Call SerStack..ctor, X0, X1
	034 Move [X20+112], X21
	035 Compare X21, 0
	036 JumpIfEqual {46}
	037 Move X1, X19
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X0, X21
	041 Move X2, X31
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Call SerStack.Push, X0, X1
	045 Return 
	046 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x032BE614 MOVZ W8, 0x1
	0x032BE618 STR W8, [X21 + 0x10]
	0x032BE61C LDP X30, X21, [X31], #0x20
	0x032BE620 RET
	0x032BE624 STR X30, [X31 - 0x30]!
	0x032BE628 STP X22, X21, [X31 + 0x10]
	0x032BE62C STP X20, X19, [X31 + 0x20]
	0x032BE630 MOV X21, X1
	0x032BE634 MOV X1, X31
	0x032BE638 MOV X19, X3
	0x032BE63C MOV X20, X2
	0x032BE640 MOV X22, X0
	0x032BE644 BL 0x33BDD8C
	0x032BE648 MOVZ W8, 0x3
	0x032BE64C STP X19, X20, [X22 + 0x38]
	0x032BE650 STR W8, [X22 + 0x10]
	0x032BE654 STR X21, [X22 + 0x30]
	0x032BE658 LDP X20, X19, [X31 + 0x20]
	0x032BE65C LDP X22, X21, [X31 + 0x10]
	0x032BE660 LDR X30, [X31], #0x30
	0x032BE664 RET
	0x032BE668 SUB X31, X31, 0x40
	0x032BE66C STP X30, X23, [X31 + 0x10]
	0x032BE670 STP X22, X21, [X31 + 0x20]
	0x032BE674 STP X20, X19, [X31 + 0x30]
	0x032BE678 ADRP X22, 0x111E000
	0x032BE67C LDRB W8, [X22 + 0x85B]
	0x032BE680 MOV X20, X2
	0x032BE684 MOV X21, X1
	0x032BE688 MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x111F000
	006 Move X21, 0xE65000
	007 Move X20, 0xE68000
	008 Move W8, [X19+2123]
	009 Move X21, [X21+2088]
	010 Move X20, [X20+440]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xE65000
	016 Move X0, [X0+2088]
	017 Call 0x1C17CF4
	018 Move X0, 0xE68000
	019 Move X0, [X0+440]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+2123], W8
	023 Move X0, [X21]
	024 Call 0x1C17F10
	025 Move W2, 1
	026 Move W1, W31
	027 Move X3, X31
	028 Move X19, X0
	029 Call UTF8Encoding..ctor, X0, X1, X2
	030 Move X8, [X20]
	031 Move X8, [X8+184]
	032 Move [X8], X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return 

