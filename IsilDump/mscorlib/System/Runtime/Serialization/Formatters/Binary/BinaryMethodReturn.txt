Type: System.Runtime.Serialization.Formatters.Binary.BinaryMethodReturn

Method: System.Void .cctor()

Disassembly:
	0x032AD830 STR W0, [X19 + 0x48]
	0x032AD834 LDP X20, X19, [X31 + 0x30]
	0x032AD838 LDP X22, X21, [X31 + 0x20]
	0x032AD83C LDP X24, X23, [X31 + 0x10]
	0x032AD840 LDR X30, [X31], #0x40
	0x032AD844 RET
	0x032AD848 BL 0x1C16F20
	0x032AD84C BL 0x1C16F28
	0x032AD850 BL 0x1C16F44
	0x032AD854 MOV X1, X31
	0x032AD858 BL 0x1C16DEC
	0x032AD85C MOV X1, X31
	0x032AD860 B 0x33BDD8C
	0x032AD864 STR X30, [X31 - 0x20]!
	0x032AD868 STP X20, X19, [X31 + 0x10]
	0x032AD86C MOV W19, W1
	0x032AD870 MOV X1, X31
	0x032AD874 MOV X20, X0
	0x032AD878 BL 0x33BDD8C
	0x032AD87C STR W19, [X20 + 0x3C]
	0x032AD880 LDP X20, X19, [X31 + 0x10]
	0x032AD884 LDR X30, [X31], #0x20
	0x032AD888 RET
	0x032AD88C LDR W8, [X31]
	0x032AD890 MOVZ W9, 0x7
	0x032AD894 STP W1, W2, [X0 + 0x10]
	0x032AD898 STP X3, X4, [X0 + 0x18]
	0x032AD89C STR W5, [X0 + 0x28]
	0x032AD8A0 STR X6, [X0 + 0x30]
	0x032AD8A4 STR W8, [X0 + 0x38]
	0x032AD8A8 STP W9, W7, [X0 + 0x3C]
	0x032AD8AC CBZ W7, 0x32AD8B4
	0x032AD8B0 RET
	0x032AD8B4 CMP W5, 0x2
	0x032AD8B8 B.EQ 0x32AD8D0
	0x032AD8BC CMP W5, 0x1
	0x032AD8C0 B.EQ 0x32AD8D8
	0x032AD8C4 CBNZ W5, 0x32AD8B0
	0x032AD8C8 MOVZ W8, 0xF
	0x032AD8CC B 0x32AD8DC
	0x032AD8D0 MOVZ W8, 0x10
	0x032AD8D4 B 0x32AD8DC
	0x032AD8D8 MOVZ W8, 0x11

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1130000
	005 Move X19, 0xE78000
	006 Move W8, [X20+1993]
	007 Move X19, [X19+3968]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0xE79000
	013 Move X0, [X0]
	014 Call 0x1C17CF4
	015 Move X0, 0xE78000
	016 Move X0, [X0+3968]
	017 Call 0x1C17CF4
	018 Move X0, 0xE78000
	019 Move X0, [X0+2928]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1993], W8
	023 Move X0, [X19]
	024 Move X20, 0xE78000
	025 Move W8, [X0+224]
	026 Move X20, [X20+2928]
	027 Compare W8, 0
	028 JumpIfNotEqual {31}
	029 Call 0x1C17DFC
	030 Move X0, [X19]
	031 Move X8, [X20]
	032 Move X9, [X0+184]
	033 Move X20, 0xE79000
	034 Move W10, [X8+224]
	035 Move X19, [X9+200]
	036 Move X20, [X20]
	037 Compare W10, 0
	038 JumpIfNotEqual {41}
	039 Move X0, X8
	040 Call 0x1C17DFC
	041 Move X0, X19
	042 Move X1, X31
	043 Call FormatterServices.GetUninitializedObject, X0
	044 Move X8, [X20]
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X8, [X8+184]
	048 Move [X8], X0
	049 Move X30, [X31+32]
	050 Return 

Method: System.Void .ctor()

Disassembly:
	0x032AD8DC STR W8, [X0 + 0x3C]
	0x032AD8E0 RET
	0x032AD8E4 STP X30, X21, [X31 - 0x20]!
	0x032AD8E8 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move W8, 1
	002 Move X1, X31
	003 Move [X0+48], W8
	004 Call Object..ctor, X0
	005 Return 

Method: System.Void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout)

Disassembly:
	0x032AD8EC ADRP X21, 0x112F000
	0x032AD8F0 LDRB W8, [X21 + 0x7CD]
	0x032AD8F4 MOV X19, X1
	0x032AD8F8 MOV X20, X0
	0x032AD8FC TBNZ X8, 0x0, 0x32AD914
	0x032AD900 ADRP X0, 0xE77000
	0x032AD904 LDR X0, [X0 + 0xF88]
	0x032AD908 BL 0x1C16CF4
	0x032AD90C MOVZ W8, 0x1
	0x032AD910 STRB W8, [X21 + 0x7CD]
	0x032AD914 LDR W1, [X20 + 0x3C]
	0x032AD918 CMP W1, 0x11
	0x032AD91C B.EQ 0x32AD9DC
	0x032AD920 CMP W1, 0x10
	0x032AD924 B.EQ 0x32AD9F4
	0x032AD928 CMP W1, 0xF
	0x032AD92C B.NE 0x32ADA60
	0x032AD930 CBZ X19, 0x32ADBB0
	0x032AD934 LDR X0, [X19 + 0x30]
	0x032AD938 CBZ X0, 0x32ADBB0
	0x032AD93C LDR X8, [X0]
	0x032AD940 MOVZ W1, 0xF
	0x032AD944 LDP X9, X2, [X8 + 0x1C8]
	0x032AD948 BLR X9
	0x032AD94C LDR X0, [X19 + 0x30]
	0x032AD950 CBZ X0, 0x32ADBB0
	0x032AD954 LDR X8, [X0]
	0x032AD958 LDR W1, [X20 + 0x10]
	0x032AD95C LDR X9, [X8 + 0x248]
	0x032AD960 LDR X2, [X8 + 0x250]
	0x032AD964 BLR X9
	0x032AD968 LDR X8, [X20 + 0x18]
	0x032AD96C CBZ X8, 0x32ADBB0
	0x032AD970 LDR W9, [X8 + 0x18]
	0x032AD974 CBZ W9, 0x32ADBB4
	0x032AD978 LDR X0, [X19 + 0x30]
	0x032AD97C CBZ X0, 0x32ADBB0
	0x032AD980 LDR X9, [X0]
	0x032AD984 LDR W1, [X8 + 0x20]
	0x032AD988 LDR X8, [X9 + 0x248]
	0x032AD98C LDR X2, [X9 + 0x250]
	0x032AD990 BLR X8
	0x032AD994 LDR X0, [X20 + 0x30]
	0x032AD998 CBZ X0, 0x32ADBB0
	0x032AD99C ADRP X8, 0xE77000
	0x032AD9A0 LDR X8, [X8 + 0xF88]
	0x032AD9A4 LDR X9, [X0]
	0x032AD9A8 LDR X1, [X8]
	0x032AD9AC LDR X8, [X9 + 0x40]
	0x032AD9B0 LDR X9, [X1 + 0x40]
	0x032AD9B4 CMP X8, X9
	0x032AD9B8 B.NE 0x32ADBB8
	0x032AD9BC BL 0x1C16E08
	0x032AD9C0 LDR X8, [X19 + 0x30]
	0x032AD9C4 CBZ X8, 0x32ADBB0
	0x032AD9C8 LDR X9, [X8]
	0x032AD9CC LDR W1, [X0]
	0x032AD9D0 MOV X0, X8
	0x032AD9D4 LDP X3, X2, [X9 + 0x1C8]
	0x032AD9D8 B 0x32ADA54
	0x032AD9DC CBZ X19, 0x32ADBB0
	0x032AD9E0 LDR X0, [X19 + 0x30]
	0x032AD9E4 CBZ X0, 0x32ADBB0
	0x032AD9E8 LDR X8, [X0]
	0x032AD9EC MOVZ W1, 0x11
	0x032AD9F0 B 0x32ADA08
	0x032AD9F4 CBZ X19, 0x32ADBB0
	0x032AD9F8 LDR X0, [X19 + 0x30]
	0x032AD9FC CBZ X0, 0x32ADBB0
	0x032ADA00 LDR X8, [X0]
	0x032ADA04 MOVZ W1, 0x10
	0x032ADA08 LDP X9, X2, [X8 + 0x1C8]
	0x032ADA0C BLR X9
	0x032ADA10 LDR X0, [X19 + 0x30]
	0x032ADA14 CBZ X0, 0x32ADBB0
	0x032ADA18 LDR X8, [X0]
	0x032ADA1C LDR W1, [X20 + 0x10]
	0x032ADA20 LDR X9, [X8 + 0x248]
	0x032ADA24 LDR X2, [X8 + 0x250]
	0x032ADA28 BLR X9
	0x032ADA2C LDR X8, [X20 + 0x18]
	0x032ADA30 CBZ X8, 0x32ADBB0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1130000
	006 Move W8, [X21+1994]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xE49000
	014 Move X0, [X0+632]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1994], W8
	018 Compare X19, 0
	019 JumpIfEqual {102}
	020 Move X0, [X19+48]
	021 Compare X0, 0
	022 JumpIfEqual {102}
	023 Move X8, [X0]
	024 Move W1, 22
	025 Move X9, [X8+456]
	026 Move X2, [X8+464]
	027 NotImplemented "Instruction BLR not yet implemented."
	028 Move X0, [X19+48]
	029 Compare X0, 0
	030 JumpIfEqual {102}
	031 Move X8, [X0]
	032 Move W1, [X20+52]
	033 Move X9, [X8+584]
	034 Move X2, [X8+592]
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Move W8, [X20+52]
	037 Move TEMP, X8
	038 And TEMP, TEMP, 2048
	039 Compare TEMP, 2048
	040 JumpIfNotEqual {46}
	041 Move X0, [X20+56]
	042 Move X1, [X20+16]
	043 Move X2, X19
	044 Call IOUtil.WriteWithCode, X0, X1, X2
	045 Move W8, [X20+52]
	046 Move TEMP, X8
	047 And TEMP, TEMP, 32
	048 Compare TEMP, 32
	049 JumpIfNotEqual {61}
	050 Move X0, [X20+32]
	051 Compare X0, 0
	052 JumpIfEqual {58}
	053 Move X8, 0xE49000
	054 Move X8, [X8+632]
	055 Move X1, [X8]
	056 Move X8, [X0]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X1, X19
	059 Call IOUtil.WriteStringWithCode, X0, X1
	060 Move W8, [X20+52]
	061 Move TEMP, X8
	062 And TEMP, TEMP, 2
	063 Compare TEMP, 2
	064 JumpIfEqual {70}
	065 Move X20, [X31+16]
	066 Move X19, [X31+24]
	067 Move X30, [X31+32]
	068 Move X21, [X31+40]
	069 Return 
	070 Move X8, [X20+24]
	071 Compare X8, 0
	072 JumpIfEqual {102}
	073 Move X0, [X19+48]
	074 Compare X0, 0
	075 JumpIfEqual {102}
	076 Move X9, [X0]
	077 Move W1, [X8+24]
	078 Move X8, [X9+584]
	079 Move X2, [X9+592]
	080 NotImplemented "Instruction BLR not yet implemented."
	081 Move X8, [X20+24]
	082 Compare X8, 0
	083 JumpIfEqual {102}
	084 Move W21, 4
	085 Move W9, [X8+24]
	086 Subtract X10, X21, 4
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move X11, [X20+40]
	089 Compare X11, 0
	090 JumpIfEqual {102}
	091 Move W12, [X11+24]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move X0, [X11]
	095 Move X1, [X8]
	096 Move X2, X19
	097 Call IOUtil.WriteWithCode, X0, X1, X2
	098 Move X8, [X20+24]
	099 Add X21, X21, 1
	100 Compare X8, 0
	101 JumpIfNotEqual {85}
	102 Call 0x1C17F20
	103 Call 0x1C17F28
	104 Call 0x1C181E0

Method: System.Void Dump()

Disassembly:
	0x032ADA34 LDR W9, [X8 + 0x18]

ISIL:
	001 Return 

