Type: System.Runtime.Serialization.Formatters.Binary.ObjectProgress

Method: System.Void .ctor()

Disassembly:
	0x032AFE38 BL 0x1C16F28
	0x032AFE3C BL 0x1C16F20
	0x032AFE40 STP X30, X21, [X31 - 0x20]!
	0x032AFE44 STP X20, X19, [X31 + 0x10]
	0x032AFE48 ADRP X21, 0x112D000
	0x032AFE4C ADRP X20, 0xE75000
	0x032AFE50 LDRB W8, [X21 + 0x7DF]
	0x032AFE54 LDR X20, [X20 + 0xF80]
	0x032AFE58 MOV W19, W0
	0x032AFE5C TBNZ X8, 0x0, 0x32AFE74
	0x032AFE60 ADRP X0, 0xE75000
	0x032AFE64 LDR X0, [X0 + 0xF80]
	0x032AFE68 BL 0x1C16CF4
	0x032AFE6C MOVZ W8, 0x1
	0x032AFE70 STRB W8, [X21 + 0x7DF]
	0x032AFE74 LDR X0, [X20]
	0x032AFE78 LDR W8, [X0 + 0xE0]
	0x032AFE7C CBNZ W8, 0x32AFE88
	0x032AFE80 BL 0x1C16DFC
	0x032AFE84 LDR X0, [X20]
	0x032AFE88 LDR X8, [X0 + 0xB8]
	0x032AFE8C LDR X21, [X8 + 0x20]
	0x032AFE90 BL 0x1C16D44
	0x032AFE94 CBNZ X21, 0x32AFEAC
	0x032AFE98 LDR X0, [X20]
	0x032AFE9C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x112E000
	006 Move X20, 0xE77000
	007 Move W8, [X21+2003]
	008 Move X20, [X20+96]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE77000
	015 Move X0, [X0+96]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2003], W8
	019 Move W8, 3
	020 Move [X19+24], W8
	021 Move X0, [X20]
	022 Call 0x1C17F10
	023 Move X1, X31
	024 Move X20, X0
	025 Call ParseRecord..ctor, X0
	026 Move [X19+128], X20
	027 Move X0, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X1, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call Object..ctor, X0
	034 Return 

Method: System.Void Init()

Disassembly:
	0x032AFEA0 CBNZ W8, 0x32AFEA8
	0x032AFEA4 BL 0x1C16DFC
	0x032AFEA8 BL 0x32AFCAC
	0x032AFEAC LDR X0, [X20]
	0x032AFEB0 LDR W8, [X0 + 0xE0]
	0x032AFEB4 CBNZ W8, 0x32AFEC0
	0x032AFEB8 BL 0x1C16DFC
	0x032AFEBC LDR X0, [X20]
	0x032AFEC0 LDR X8, [X0 + 0xB8]
	0x032AFEC4 LDR X20, [X8 + 0x20]
	0x032AFEC8 BL 0x1C16D44
	0x032AFECC CBZ X20, 0x32AFEF0
	0x032AFED0 LDR W8, [X20 + 0x18]
	0x032AFED4 CMP W8, W19
	0x032AFED8 B.LS 0x32AFEF4
	0x032AFEDC ADD X8, X20, W19, 0x2, SXTW
	0x032AFEE0 LDR W0, [X8 + 0x20]
	0x032AFEE4 LDP X20, X19, [X31 + 0x10]
	0x032AFEE8 LDP X30, X21, [X31], #0x20
	0x032AFEEC RET

ISIL:
	001 Move [X31-16], X30
	002 Move X9, -41684992
	003 Move V0, [X9+2912]
	004 Move X8, X0
	005 Move [X0+16], W31
	006 Move [X0+64], X31
	007 Move [X0+72], W31
	008 Move [X0+40], X31
	009 Move [X0+48], X31
	010 Move [X0+32], X31
	011 Move [X0+56], W31
	012 Move X0, [X0+128]
	013 Move [X8+20], D0
	014 NotImplemented "Instruction MOVI not yet implemented."
	015 Move [X8+80], V0
	016 Move [X8+88], V0
	017 Move [X8+7], V0
	018 Compare X0, 0
	019 JumpIfEqual {24}
	020 Move X1, X31
	021 Move X30, [X31+16]
	022 Call ParseRecord.Init, X0
	023 Return 
	024 Call 0x1C17F20

Method: System.Void ArrayCountIncrement(System.Int32 value)

Disassembly:
	0x032AFEF0 BL 0x1C16F20
	0x032AFEF4 BL 0x1C16F28
	0x032AFEF8 STR X30, [X31 - 0x20]!
	0x032AFEFC STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move W8, [X0+20]
	002 Add W8, W8, W1
	003 Move [X0+20], W8
	004 Return 

Method: System.Boolean GetNext(out System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum outBinaryTypeEnum, out System.Object outTypeInformation)

Disassembly:
	0x032AFF00 ADRP X19, 0x112D000
	0x032AFF04 ADRP X20, 0xE76000
	0x032AFF08 LDRB W8, [X19 + 0x7E0]
	0x032AFF0C LDR X20, [X20 + 0x100]
	0x032AFF10 TBNZ X8, 0x0, 0x32AFF34
	0x032AFF14 ADRP X0, 0xE75000
	0x032AFF18 LDR X0, [X0 + 0xF80]
	0x032AFF1C BL 0x1C16CF4
	0x032AFF20 ADRP X0, 0xE76000
	0x032AFF24 LDR X0, [X0 + 0x100]
	0x032AFF28 BL 0x1C16CF4
	0x032AFF2C MOVZ W8, 0x1
	0x032AFF30 STRB W8, [X19 + 0x7E0]
	0x032AFF34 LDR X0, [X20]
	0x032AFF38 MOVZ W1, 0x13
	0x032AFF3C BL 0x1C16D6C
	0x032AFF40 CBZ X0, 0x32B009C
	0x032AFF44 LDR W8, [X0 + 0x18]
	0x032AFF48 MOV X19, X0
	0x032AFF4C CBZ W8, 0x32B0098
	0x032AFF50 CMP W8, 0x1
	0x032AFF54 STR W31, [X19 + 0x20]
	0x032AFF58 B.EQ 0x32B0098
	0x032AFF5C CMP W8, 0x2
	0x032AFF60 STR W31, [X19 + 0x24]
	0x032AFF64 B.LS 0x32B0098
	0x032AFF68 CMP W8, 0x3
	0x032AFF6C STR W31, [X19 + 0x28]
	0x032AFF70 B.EQ 0x32B0098
	0x032AFF74 MOVZ W9, 0x1
	0x032AFF78 CMP W8, 0x4
	0x032AFF7C STR W9, [X19 + 0x2C]
	0x032AFF80 B.LS 0x32B0098
	0x032AFF84 MOVZ W9, 0x3
	0x032AFF88 CMP W8, 0x5
	0x032AFF8C STR W9, [X19 + 0x30]
	0x032AFF90 B.EQ 0x32B0098
	0x032AFF94 MOVZ W9, 0xA
	0x032AFF98 CMP W8, 0x6
	0x032AFF9C STR W9, [X19 + 0x34]
	0x032AFFA0 B.LS 0x32B0098
	0x032AFFA4 MOVZ W9, 0x2
	0x032AFFA8 CMP W8, 0x7
	0x032AFFAC STR W9, [X19 + 0x38]
	0x032AFFB0 B.EQ 0x32B0098
	0x032AFFB4 MOVZ W9, 0x7
	0x032AFFB8 CMP W8, 0x8
	0x032AFFBC STR W9, [X19 + 0x3C]
	0x032AFFC0 B.LS 0x32B0098
	0x032AFFC4 MOVZ W9, 0xE
	0x032AFFC8 CMP W8, 0x9
	0x032AFFCC STR W9, [X19 + 0x40]
	0x032AFFD0 B.EQ 0x32B0098
	0x032AFFD4 MOVZ W9, 0x8
	0x032AFFD8 CMP W8, 0xA
	0x032AFFDC STR W9, [X19 + 0x44]
	0x032AFFE0 B.LS 0x32B0098
	0x032AFFE4 MOVZ W9, 0xF
	0x032AFFE8 CMP W8, 0xB
	0x032AFFEC STR W9, [X19 + 0x48]
	0x032AFFF0 B.EQ 0x32B0098
	0x032AFFF4 MOVZ W9, 0x9
	0x032AFFF8 CMP W8, 0xC
	0x032AFFFC STR W9, [X19 + 0x4C]
	0x032B0000 B.LS 0x32B0098
	0x032B0004 MOVZ W9, 0x10
	0x032B0008 CMP W8, 0xD
	0x032B000C STR W9, [X19 + 0x50]
	0x032B0010 B.EQ 0x32B0098

ISIL:
	001 Move [X31-16], X30
	002 Move [X1], W31
	003 Move [X2], X31
	004 Move W9, [X0+48]
	005 NotImplemented "Instruction LDRSW not yet implemented."
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move W9, [X0+72]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move W8, [X0+76]
	010 Move [X1], W8
	011 Move X8, [X0+80]
	012 Move [X2], X8
	013 Move W8, [X0+20]
	014 Compare W8, 0
	015 JumpIfNotEqual {17}
	016 Move [X0+16], W31
	017 Add W8, W8, 1
	018 Move [X0+20], W8
	019 Move W9, [X0+92]
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move W9, [X0+16]
	022 Compare W9, 0
	023 JumpIfEqual {63}
	024 Move X9, [X0+96]
	025 Compare X9, 0
	026 JumpIfEqual {66}
	027 Move W10, [X9+24]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Add X8, X9, X8
	030 Move W8, [X8+32]
	031 Move [X1], W8
	032 Move X9, [X0+104]
	033 Compare X9, 0
	034 JumpIfEqual {66}
	035 NotImplemented "Instruction LDRSW not yet implemented."
	036 Move W10, [X9+24]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Add X9, X9, X8
	039 Move X9, [X9+32]
	040 Move [X2], X9
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Move [X0+16], W31
	044 Move X9, [X0+112]
	045 Compare X9, 0
	046 JumpIfEqual {66}
	047 Move W10, [X9+24]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Add X9, X9, X8
	050 Move X10, [X9+32]
	051 Move X9, [X0+120]
	052 Move [X0+40], X10
	053 Compare X9, 0
	054 JumpIfEqual {66}
	055 Move W10, [X9+24]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Add X9, X9, X8
	058 Move X9, [X9+32]
	059 Add W8, W8, 1
	060 Move [X0+20], W8
	061 Move [X0+64], X9
	062 Move W0, 1
	063 Move W0, W31
	064 Move X30, [X31+16]
	065 Return X0
	066 Call 0x1C17F20
	067 Call 0x1C17F28

Method: System.Void .cctor()

Disassembly:
	0x032B0014 MOVZ W9, 0xB
	0x032B0018 CMP W8, 0xE
	0x032B001C STR W9, [X19 + 0x54]
	0x032B0020 B.LS 0x32B0098
	0x032B0024 MOVZ W9, 0x6
	0x032B0028 CMP W8, 0xF
	0x032B002C STR W9, [X19 + 0x58]
	0x032B0030 B.EQ 0x32B0098
	0x032B0034 MOVZ W9, 0x5
	0x032B0038 CMP W8, 0x10
	0x032B003C STR W9, [X19 + 0x5C]
	0x032B0040 B.LS 0x32B0098
	0x032B0044 MOVZ W9, 0xD
	0x032B0048 CMP W8, 0x11
	0x032B004C STR W9, [X19 + 0x60]
	0x032B0050 B.EQ 0x32B0098
	0x032B0054 CMP W8, 0x12
	0x032B0058 STR W31, [X19 + 0x64]
	0x032B005C B.LS 0x32B0098

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x112D000
	005 Move X20, 0xE76000
	006 Move W8, [X19+2004]
	007 Move X20, [X20+104]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE76000
	013 Move X0, [X0+104]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+2004], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move W9, 1
	021 Move X8, [X8+184]
	022 Move [X8], W9
	023 Move X30, [X31+32]
	024 Return 

