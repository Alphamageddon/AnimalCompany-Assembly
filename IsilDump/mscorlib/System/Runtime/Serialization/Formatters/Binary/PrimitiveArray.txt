Type: System.Runtime.Serialization.Formatters.Binary.PrimitiveArray

Method: System.Void .ctor(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, System.Array array)

Disassembly:
	0x032BFD9C MOV W19, W1
	0x032BFDA0 MOV X1, X31
	0x032BFDA4 MOV X20, X0
	0x032BFDA8 BL 0x33A51F0
	0x032BFDAC STR W19, [X20 + 0x10]
	0x032BFDB0 LDP X20, X19, [X31 + 0x10]
	0x032BFDB4 LDR X30, [X31], #0x20
	0x032BFDB8 RET
	0x032BFDBC STR X30, [X31 - 0x20]!
	0x032BFDC0 STP X20, X19, [X31 + 0x10]
	0x032BFDC4 AND W20, W1, 0x1
	0x032BFDC8 MOV X1, X31
	0x032BFDCC MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W20, W1
	006 Move X1, X31
	007 Move X19, X2
	008 Move X21, X0
	009 Call Object..ctor, X0
	010 Move W1, W20
	011 Move X2, X19
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X0, X21
	015 Move X30, [X31+32]
	016 Move X21, [X31+40]

Method: System.Void Init(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, System.Array array)

Disassembly:
	0x032BFDD0 BL 0x33A51F0
	0x032BFDD4 STRB W20, [X19 + 0x10]
	0x032BFDD8 LDP X20, X19, [X31 + 0x10]
	0x032BFDDC LDR X30, [X31], #0x20
	0x032BFDE0 RET
	0x032BFDE4 MOV X1, X31
	0x032BFDE8 B 0x33A51F0
	0x032BFDEC STR X30, [X31 - 0x20]!
	0x032BFDF0 STP X20, X19, [X31 + 0x10]
	0x032BFDF4 MOV X19, X1
	0x032BFDF8 MOV X1, X31
	0x032BFDFC MOV X20, X0
	0x032BFE00 BL 0x33A51F0
	0x032BFE04 STR X19, [X20 + 0x10]
	0x032BFE08 LDP X20, X19, [X31 + 0x10]
	0x032BFE0C LDR X30, [X31], #0x20
	0x032BFE10 RET
	0x032BFE14 MOV X1, X31
	0x032BFE18 B 0x33A51F0
	0x032BFE1C MOV X1, X31
	0x032BFE20 B 0x33A51F0
	0x032BFE24 MOV X1, X31
	0x032BFE28 B 0x33A51F0
	0x032BFE2C MOV X1, X31
	0x032BFE30 B 0x33A51F0
	0x032BFE34 STR X30, [X31 - 0x20]!
	0x032BFE38 STP X20, X19, [X31 + 0x10]
	0x032BFE3C MOV W19, W1
	0x032BFE40 MOV X1, X31
	0x032BFE44 MOV X20, X0
	0x032BFE48 BL 0x33A51F0
	0x032BFE4C STR W19, [X20 + 0x10]
	0x032BFE50 LDP X20, X19, [X31 + 0x10]
	0x032BFE54 LDR X30, [X31], #0x20
	0x032BFE58 RET
	0x032BFE5C SUB X31, X31, 0x70
	0x032BFE60 STR X30, [X31 + 0x10]
	0x032BFE64 STP X28, X27, [X31 + 0x20]
	0x032BFE68 STP X26, X25, [X31 + 0x30]
	0x032BFE6C STP X24, X23, [X31 + 0x40]
	0x032BFE70 STP X22, X21, [X31 + 0x50]
	0x032BFE74 STP X20, X19, [X31 + 0x60]
	0x032BFE78 ADRP X20, 0x111D000
	0x032BFE7C LDRB W8, [X20 + 0x866]
	0x032BFE80 MOV X19, X0
	0x032BFE84 TBNZ X8, 0x0, 0x32BFE9C
	0x032BFE88 ADRP X0, 0xE66000
	0x032BFE8C LDR X0, [X0 + 0x678]
	0x032BFE90 BL 0x1C16CF4
	0x032BFE94 MOVZ W8, 0x1
	0x032BFE98 STRB W8, [X20 + 0x866]
	0x032BFE9C STR X31, [X31 + 0x18]
	0x032BFEA0 STR X31, [X31 + 0x8]
	0x032BFEA4 CBZ X19, 0x32C0008
	0x032BFEA8 LDR X8, [X19]
	0x032BFEAC MOV X0, X19
	0x032BFEB0 LDR X9, [X8 + 0x258]
	0x032BFEB4 LDR X1, [X8 + 0x260]
	0x032BFEB8 BLR X9
	0x032BFEBC TBNZ X0, 0xD, 0x32BFEC8
	0x032BFEC0 MOV X19, X31
	0x032BFEC4 B 0x32BFFE4
	0x032BFEC8 STR X31, [X31 + 0x8]
	0x032BFECC LDR X8, [X19]
	0x032BFED0 MOV X0, X19
	0x032BFED4 LDR X9, [X8 + 0x238]
	0x032BFED8 LDR X1, [X8 + 0x240]
	0x032BFEDC BLR X9
	0x032BFEE0 ADD X1, X31, 0x4
	0x032BFEE4 ADD X2, X31, 0x18
	0x032BFEE8 ADD X3, X31, 0x8
	0x032BFEEC MOV X0, X19
	0x032BFEF0 MOV X4, X31
	0x032BFEF4 STR W31, [X31 + 0x4]
	0x032BFEF8 BL 0x32DB7AC
	0x032BFEFC LDR W22, [X31 + 0x4]
	0x032BFF00 ADRP X9, 0xFFFFFFFFFD8D7000
	0x032BFF04 ADD X9, X9, 0x608
	0x032BFF08 AND X8, X22, 0x7
	0x032BFF0C LDR W21, [X9, X8, LSL #2]
	0x032BFF10 AND W8, W22, 0x700
	0x032BFF14 CMP W8, 0x200
	0x032BFF18 B.LS 0x32BFF3C
	0x032BFF1C CMP W8, 0x300
	0x032BFF20 B.EQ 0x32BFF4C
	0x032BFF24 CMP W8, 0x400
	0x032BFF28 B.EQ 0x32BFF54
	0x032BFF2C CMP W8, 0x500
	0x032BFF30 B.NE 0x32BFF5C
	0x032BFF34 MOVZ W23, 0x5
	0x032BFF38 B 0x32BFF60
	0x032BFF3C CMP W8, 0x100
	0x032BFF40 MOVZ W8, 0x1
	0x032BFF44 CINC W23, W8, NE
	0x032BFF48 B 0x32BFF60
	0x032BFF4C MOVZ W23, 0x3
	0x032BFF50 B 0x32BFF60
	0x032BFF54 MOVZ W23, 0x4
	0x032BFF58 B 0x32BFF60
	0x032BFF5C MOVZ W23, 0x2
	0x032BFF60 LDR X8, [X19]
	0x032BFF64 AND W9, W22, 0x30
	0x032BFF68 CMP W9, 0x10
	0x032BFF6C CSET W24, EQ
	0x032BFF70 LDR X9, [X8 + 0x268]
	0x032BFF74 LDR X1, [X8 + 0x270]
	0x032BFF78 AND W8, W22, 0x3000
	0x032BFF7C CMP W8, 0x1000
	0x032BFF80 MOV X0, X19
	0x032BFF84 CSET W25, EQ
	0x032BFF88 BLR X9
	0x032BFF8C ADRP X8, 0xE66000
	0x032BFF90 LDR X26, [X31 + 0x8]
	0x032BFF94 LDR X27, [X31 + 0x18]
	0x032BFF98 LDR X8, [X8 + 0x678]
	0x032BFF9C MOV W20, W0
	0x032BFFA0 LDR X8, [X8]
	0x032BFFA4 MOV X0, X8
	0x032BFFA8 BL 0x1C16F10
	0x032BFFAC MOV X1, X31
	0x032BFFB0 MOV X19, X0
	0x032BFFB4 AND W28, W22, 0x1
	0x032BFFB8 UBFM W22, W22, 0x6, 0x6
	0x032BFFBC UBFM W20, W20, 0x7, 0x7
	0x032BFFC0 BL 0x33A51F0
	0x032BFFC4 STP X26, X27, [X19 + 0x10]
	0x032BFFC8 STR W21, [X19 + 0x20]
	0x032BFFCC STRB W28, [X19 + 0x25]
	0x032BFFD0 STRB W22, [X19 + 0x24]
	0x032BFFD4 STRB W20, [X19 + 0x26]
	0x032BFFD8 STR W23, [X19 + 0x28]
	0x032BFFDC STRB W24, [X19 + 0x2C]
	0x032BFFE0 STRB W25, [X19 + 0x2D]
	0x032BFFE4 MOV X0, X19
	0x032BFFE8 LDP X20, X19, [X31 + 0x60]
	0x032BFFEC LDP X22, X21, [X31 + 0x50]
	0x032BFFF0 LDP X24, X23, [X31 + 0x40]
	0x032BFFF4 LDP X26, X25, [X31 + 0x30]
	0x032BFFF8 LDP X28, X27, [X31 + 0x20]
	0x032BFFFC LDR X30, [X31 + 0x10]
	0x032C0000 ADD X31, X31, 0x70
	0x032C0004 RET
	0x032C0008 BL 0x1C16F20
	0x032C000C STR X30, [X31 - 0x60]!
	0x032C0010 STP X28, X27, [X31 + 0x10]
	0x032C0014 STP X26, X25, [X31 + 0x20]
	0x032C0018 STP X24, X23, [X31 + 0x30]
	0x032C001C STP X22, X21, [X31 + 0x40]
	0x032C0020 STP X20, X19, [X31 + 0x50]
	0x032C0024 LDRB W8, [X31 + 0x68]
	0x032C0028 LDRB W9, [X31 + 0x60]
	0x032C002C MOV X22, X1
	0x032C0030 MOV X1, X31
	0x032C0034 MOV W19, W7
	0x032C0038 MOV W20, W3
	0x032C003C MOV X21, X2
	0x032C0040 MOV X23, X0
	0x032C0044 AND W24, W4, 0x1
	0x032C0048 AND W25, W5, 0x1
	0x032C004C AND W26, W6, 0x1
	0x032C0050 AND W27, W9, 0x1
	0x032C0054 AND W28, W8, 0x1
	0x032C0058 BL 0x33A51F0
	0x032C005C STP X22, X21, [X23 + 0x10]
	0x032C0060 STR W20, [X23 + 0x20]
	0x032C0064 STRB W24, [X23 + 0x25]
	0x032C0068 STRB W25, [X23 + 0x24]
	0x032C006C STRB W26, [X23 + 0x26]
	0x032C0070 STR W19, [X23 + 0x28]
	0x032C0074 STRB W27, [X23 + 0x2C]
	0x032C0078 STRB W28, [X23 + 0x2D]
	0x032C007C LDP X20, X19, [X31 + 0x50]
	0x032C0080 LDP X22, X21, [X31 + 0x40]
	0x032C0084 LDP X24, X23, [X31 + 0x30]
	0x032C0088 LDP X26, X25, [X31 + 0x20]
	0x032C008C LDP X28, X27, [X31 + 0x10]
	0x032C0090 LDR X30, [X31], #0x60
	0x032C0094 RET
	0x032C0098 STR X30, [X31 - 0x10]!
	0x032C009C CBZ X0, 0x32C00BC
	0x032C00A0 LDR X8, [X0]
	0x032C00A4 LDR X9, [X8 + 0x258]
	0x032C00A8 LDR X1, [X8 + 0x260]
	0x032C00AC BLR X9
	0x032C00B0 UBFM W0, W0, 0xD, 0xD
	0x032C00B4 LDR X30, [X31], #0x10
	0x032C00B8 RET
	0x032C00BC BL 0x1C16F20
	0x032C00C0 STR X30, [X31 - 0x20]!
	0x032C00C4 STP X20, X19, [X31 + 0x10]
	0x032C00C8 MOV X19, X1
	0x032C00CC MOV X1, X31
	0x032C00D0 MOV X20, X0
	0x032C00D4 BL 0x33A51F0
	0x032C00D8 STR X19, [X20 + 0x10]
	0x032C00DC LDP X20, X19, [X31 + 0x10]
	0x032C00E0 LDR X30, [X31], #0x20
	0x032C00E4 RET
	0x032C00E8 LDR X0, [X0 + 0x10]
	0x032C00EC RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x111E000
	007 Move W8, [X22+2140]
	008 Move X19, X2
	009 Move W21, W1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {50}
	015 Move X0, 0xE37000
	016 Move X0, [X0+2488]
	017 Call 0x1C17CF4
	018 Move X0, 0xE3E000
	019 Move X0, [X0+2264]
	020 Call 0x1C17CF4
	021 Move X0, 0xE66000
	022 Move X0, [X0+2096]
	023 Call 0x1C17CF4
	024 Move X0, 0xE5D000
	025 Move X0, [X0+2080]
	026 Call 0x1C17CF4
	027 Move X0, 0xE36000
	028 Move X0, [X0+3672]
	029 Call 0x1C17CF4
	030 Move X0, 0xE66000
	031 Move X0, [X0+2104]
	032 Call 0x1C17CF4
	033 Move X0, 0xE64000
	034 Move X0, [X0+1800]
	035 Call 0x1C17CF4
	036 Move X0, 0xE35000
	037 Move X0, [X0+1592]
	038 Call 0x1C17CF4
	039 Move X0, 0xE65000
	040 Move X0, [X0+2256]
	041 Call 0x1C17CF4
	042 Move X0, 0xE5E000
	043 Move X0, [X0+3336]
	044 Call 0x1C17CF4
	045 Move X0, 0xE3D000
	046 Move X0, [X0+1384]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X22+2140], W8
	050 Subtract W8, W21, 1
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move [X20+16], W21
	053 Move X9, -41058304
	054 Add X9, X9, 1424
	055 NotImplemented "Instruction ADR not yet implemented."
	056 Move W11, [X9]
	057 Add X10, X10, X11
	058 CallNoReturn X10
	059 Compare X19, 0
	060 JumpIfEqual {192}
	061 Move X22, 0xE37000
	062 Move X22, [X22+2488]
	063 Move X0, X19
	064 Move X21, [X22]
	065 Move X1, X21
	066 Call 0x1C17E00
	067 Compare X0, 0
	068 JumpIfEqual {203}
	069 Move [X20+24], X0
	070 Compare X19, 0
	071 JumpIfEqual {193}
	072 Move X22, 0xE3E000
	073 Move X22, [X22+2264]
	074 Move X0, X19
	075 Move X21, [X22]
	076 Move X1, X21
	077 Call 0x1C17E00
	078 Compare X0, 0
	079 JumpIfEqual {203}
	080 Move [X20+32], X0
	081 Compare X19, 0
	082 JumpIfEqual {194}
	083 Move X22, 0xE66000
	084 Move X22, [X22+2096]
	085 Move X0, X19
	086 Move X21, [X22]
	087 Move X1, X21
	088 Call 0x1C17E00
	089 Compare X0, 0
	090 JumpIfEqual {203}
	091 Move [X20+40], X0
	092 Compare X19, 0
	093 JumpIfEqual {195}
	094 Move X22, 0xE5D000
	095 Move X22, [X22+2080]
	096 Move X0, X19
	097 Move X21, [X22]
	098 Move X1, X21
	099 Call 0x1C17E00
	100 Compare X0, 0
	101 JumpIfEqual {203}
	102 Move [X20+48], X0
	103 Compare X19, 0
	104 JumpIfEqual {196}
	105 Move X22, 0xE36000
	106 Move X22, [X22+3672]
	107 Move X0, X19
	108 Move X21, [X22]
	109 Move X1, X21
	110 Call 0x1C17E00
	111 Compare X0, 0
	112 JumpIfEqual {203}
	113 Move [X20+56], X0
	114 Compare X19, 0
	115 JumpIfEqual {197}
	116 Move X22, 0xE66000
	117 Move X22, [X22+2104]
	118 Move X0, X19
	119 Move X21, [X22]
	120 Move X1, X21
	121 Call 0x1C17E00
	122 Compare X0, 0
	123 JumpIfEqual {203}
	124 Move [X20+64], X0
	125 Compare X19, 0
	126 JumpIfEqual {198}
	127 Move X22, 0xE64000
	128 Move X22, [X22+1800]
	129 Move X0, X19
	130 Move X21, [X22]
	131 Move X1, X21
	132 Call 0x1C17E00
	133 Compare X0, 0
	134 JumpIfEqual {203}
	135 Move [X20+72], X0
	136 Compare X19, 0
	137 JumpIfEqual {199}
	138 Move X22, 0xE35000
	139 Move X22, [X22+1592]
	140 Move X0, X19
	141 Move X21, [X22]
	142 Move X1, X21
	143 Call 0x1C17E00
	144 Compare X0, 0
	145 JumpIfEqual {203}
	146 Move [X20+80], X0
	147 Compare X19, 0
	148 JumpIfEqual {200}
	149 Move X22, 0xE65000
	150 Move X22, [X22+2256]
	151 Move X0, X19
	152 Move X21, [X22]
	153 Move X1, X21
	154 Call 0x1C17E00
	155 Compare X0, 0
	156 JumpIfEqual {203}
	157 Move [X20+88], X0
	158 Compare X19, 0
	159 JumpIfEqual {201}
	160 Move X22, 0xE5D000
	161 Move X22, [X22+3336]
	162 Move X0, X19
	163 Move X21, [X22]
	164 Move X1, X21
	165 Call 0x1C17E00
	166 Compare X0, 0
	167 JumpIfEqual {203}
	168 Move [X20+96], X0
	169 Compare X19, 0
	170 JumpIfEqual {202}
	171 Move X22, 0xE3C000
	172 Move X22, [X22+1384]
	173 Move X0, X19
	174 Move X21, [X22]
	175 Move X1, X21
	176 Call 0x1C17E00
	177 Compare X0, 0
	178 JumpIfEqual {203}
	179 Move [X20+104], X0
	180 Move X20, [X22]
	181 Move X0, X19
	182 Move X1, X20
	183 Call 0x1C17E00
	184 Compare X0, 0
	185 JumpIfEqual {206}
	186 Move X20, [X31+32]
	187 Move X19, [X31+40]
	188 Move X22, [X31+16]
	189 Move X21, [X31+24]
	190 Move X30, [X31+48]
	191 Return 
	192 Move [X20+24], X31
	193 Move [X20+32], X31
	194 Move [X20+40], X31
	195 Move [X20+48], X31
	196 Move [X20+56], X31
	197 Move [X20+64], X31
	198 Move [X20+72], X31
	199 Move [X20+80], X31
	200 Move [X20+88], X31
	201 Move [X20+96], X31
	202 Move [X20+104], X31
	203 Move X0, X19
	204 Move X1, X21
	205 Call 0x1C181E0
	206 Move X0, X19
	207 Move X1, X20
	208 Call 0x1C181E0

Method: System.Void SetValue(System.String value, System.Int32 index)

Disassembly:
	0x032C00F0 STR X30, [X31 - 0x20]!
	0x032C00F4 STP X20, X19, [X31 + 0x10]
	0x032C00F8 MOV W19, W1
	0x032C00FC MOV X1, X31
	0x032C0100 MOV X20, X0
	0x032C0104 BL 0x33A51F0
	0x032C0108 STR W19, [X20 + 0x10]
	0x032C010C LDP X20, X19, [X31 + 0x10]
	0x032C0110 LDR X30, [X31], #0x20
	0x032C0114 RET
	0x032C0118 STP X30, X23, [X31 - 0x30]!
	0x032C011C STP X22, X21, [X31 + 0x10]
	0x032C0120 STP X20, X19, [X31 + 0x20]
	0x032C0124 MOV W22, W1
	0x032C0128 MOV X1, X31
	0x032C012C MOV W19, W4
	0x032C0130 MOV W20, W3
	0x032C0134 MOV W21, W2
	0x032C0138 MOV X23, X0
	0x032C013C BL 0x33A51F0
	0x032C0140 STP W22, W21, [X23 + 0x10]
	0x032C0144 STP W20, W19, [X23 + 0x18]
	0x032C0148 LDP X20, X19, [X31 + 0x20]
	0x032C014C LDP X22, X21, [X31 + 0x10]
	0x032C0150 LDP X30, X23, [X31], #0x30
	0x032C0154 RET
	0x032C0158 STP X30, X23, [X31 - 0x30]!
	0x032C015C STP X22, X21, [X31 + 0x10]
	0x032C0160 STP X20, X19, [X31 + 0x20]
	0x032C0164 ADRP X23, 0x111C000
	0x032C0168 LDRB W8, [X23 + 0x867]
	0x032C016C MOV W20, W2
	0x032C0170 MOV X21, X1
	0x032C0174 MOV X19, X0
	0x032C0178 AND W22, W2, 0x1
	0x032C017C TBNZ X8, 0x0, 0x32C0194
	0x032C0180 ADRP X0, 0xE3A000
	0x032C0184 LDR X0, [X0 + 0xC10]
	0x032C0188 BL 0x1C16CF4
	0x032C018C MOVZ W8, 0x1
	0x032C0190 STRB W8, [X23 + 0x867]
	0x032C0194 MOV X0, X19
	0x032C0198 MOV X1, X31
	0x032C019C BL 0x33BDD8C
	0x032C01A0 MOVZ W8, 0x4
	0x032C01A4 STR X21, [X19 + 0x10]
	0x032C01A8 STR W8, [X19 + 0x18]
	0x032C01AC STRB W22, [X19 + 0x1C]
	0x032C01B0 TBNZ X20, 0x0, 0x32C01D8
	0x032C01B4 ADRP X8, 0xE3A000
	0x032C01B8 LDR X8, [X8 + 0xC10]
	0x032C01BC LDR X0, [X8]
	0x032C01C0 LDR W8, [X0 + 0xE0]
	0x032C01C4 CBNZ W8, 0x32C01CC
	0x032C01C8 BL 0x1C16DFC
	0x032C01CC MOV X0, X19
	0x032C01D0 MOV X1, X31
	0x032C01D4 BL 0x33B3E9C
	0x032C01D8 MOVZ W8, 0x1
	0x032C01DC STRB W8, [X19 + 0x1D]
	0x032C01E0 LDP X20, X19, [X31 + 0x20]
	0x032C01E4 LDP X22, X21, [X31 + 0x10]
	0x032C01E8 LDP X30, X23, [X31], #0x30
	0x032C01EC RET
	0x032C01F0 MOV X1, X31
	0x032C01F4 B 0x33BDD8C
	0x032C01F8 STP X30, X21, [X31 - 0x20]!
	0x032C01FC STP X20, X19, [X31 + 0x10]
	0x032C0200 LDR X8, [X0]
	0x032C0204 MOV X19, X0
	0x032C0208 LDP X9, X2, [X8 + 0x198]
	0x032C020C MOV W1, W31
	0x032C0210 BLR X9
	0x032C0214 MOV X0, X19
	0x032C0218 LDP X20, X19, [X31 + 0x10]
	0x032C021C MOV X1, X31
	0x032C0220 LDP X30, X21, [X31], #0x20
	0x032C0224 B 0x33CB4DC
	0x032C0228 CMP W1, 0x1
	0x032C022C MOV X21, X0
	0x032C0230 B.NE 0x32C0260
	0x032C0234 MOV X0, X21
	0x032C0238 BL 0x3EB1AD0
	0x032C023C LDR X20, [X0]
	0x032C0240 BL 0x3EB1AE0
	0x032C0244 MOV X0, X19
	0x032C0248 MOV X1, X31
	0x032C024C BL 0x33CB4DC
	0x032C0250 CBNZ X20, 0x32C0268
	0x032C0254 LDP X20, X19, [X31 + 0x10]
	0x032C0258 LDP X30, X21, [X31], #0x20
	0x032C025C RET
	0x032C0260 MOV X20, X31
	0x032C0264 B 0x32C0274
	0x032C0268 MOV X0, X20
	0x032C026C BL 0x1C16F18
	0x032C0270 MOV X21, X0
	0x032C0274 MOV X0, X19
	0x032C0278 MOV X1, X31
	0x032C027C BL 0x33CB4DC
	0x032C0280 CBNZ X20, 0x32C028C
	0x032C0284 MOV X0, X21
	0x032C0288 BL 0x1D2C690
	0x032C028C MOV X0, X20
	0x032C0290 BL 0x1C16F18
	0x032C0294 BL 0x1990590
	0x032C0298 STR X1, [X0 + 0x10]
	0x032C029C RET
	0x032C02A0 LDR X0, [X0 + 0x10]
	0x032C02A4 RET
	0x032C02A8 LDR W8, [X0 + 0x18]
	0x032C02AC AND W0, W8, 0x1
	0x032C02B0 RET
	0x032C02B4 LDR X8, [X0]
	0x032C02B8 MOVZ W1, 0x1
	0x032C02BC LDP X3, X2, [X8 + 0x198]
	0x032C02C0 BR X3
	0x032C02C4 LDR X8, [X0]
	0x032C02C8 MOVZ W1, 0x1
	0x032C02CC LDP X3, X2, [X8 + 0x198]
	0x032C02D0 BR X3
	0x032C02D4 TBZ X1, 0x0, 0x32C02DC
	0x032C02D8 B 0x32C02F0
	0x032C02DC LDRB W8, [X0 + 0x1D]
	0x032C02E0 CBZ W8, 0x32C02EC
	0x032C02E4 MOVZ W1, 0x1
	0x032C02E8 B 0x32C0428
	0x032C02EC RET
	0x032C02F0 STR X30, [X31 - 0x20]!
	0x032C02F4 STP X20, X19, [X31 + 0x10]
	0x032C02F8 ADRP X20, 0x111C000
	0x032C02FC LDRB W8, [X20 + 0x869]
	0x032C0300 MOV X19, X0
	0x032C0304 TBNZ X8, 0x0, 0x32C031C
	0x032C0308 ADRP X0, 0xE3A000
	0x032C030C LDR X0, [X0 + 0xC10]
	0x032C0310 BL 0x1C16CF4
	0x032C0314 MOVZ W8, 0x1
	0x032C0318 STRB W8, [X20 + 0x869]
	0x032C031C LDRB W8, [X19 + 0x1D]
	0x032C0320 CBZ W8, 0x32C035C
	0x032C0324 ADRP X20, 0xE3A000
	0x032C0328 LDR X20, [X20 + 0xC10]
	0x032C032C MOVZ W1, 0x1
	0x032C0330 MOV X0, X19
	0x032C0334 BL 0x32C0428
	0x032C0338 LDR X0, [X20]
	0x032C033C LDR W8, [X0 + 0xE0]
	0x032C0340 CBNZ W8, 0x32C0348
	0x032C0344 BL 0x1C16DFC
	0x032C0348 MOV X0, X19
	0x032C034C LDP X20, X19, [X31 + 0x10]
	0x032C0350 MOV X1, X31
	0x032C0354 LDR X30, [X31], #0x20
	0x032C0358 B 0x33B3E9C
	0x032C035C ADRP X0, 0xE33000
	0x032C0360 LDR X0, [X0 + 0x5B0]
	0x032C0364 BL 0x1C16D08
	0x032C0368 BL 0x1C16F10
	0x032C036C MOV X1, X31
	0x032C0370 MOV X19, X0
	0x032C0374 BL 0x337DEC0
	0x032C0378 ADRP X0, 0xE65000
	0x032C037C LDR X0, [X0 + 0x680]
	0x032C0380 BL 0x1C16D08
	0x032C0384 MOV X1, X0
	0x032C0388 MOV X0, X19
	0x032C038C BL 0x1C16DEC
	0x032C0390 LDRB W8, [X0 + 0x1D]
	0x032C0394 CBZ W8, 0x32C03A0
	0x032C0398 MOVZ W1, 0x1
	0x032C039C B 0x32C0428
	0x032C03A0 RET
	0x032C03A4 STR X30, [X31 - 0x30]!
	0x032C03A8 STP X22, X21, [X31 + 0x10]
	0x032C03AC STP X20, X19, [X31 + 0x20]
	0x032C03B0 ADRP X20, 0x111C000
	0x032C03B4 LDRB W8, [X20 + 0x868]
	0x032C03B8 MOV X19, X0
	0x032C03BC TBNZ X8, 0x0, 0x32C03D4
	0x032C03C0 ADRP X0, 0xE3A000
	0x032C03C4 LDR X0, [X0 + 0xC10]
	0x032C03C8 BL 0x1C16CF4
	0x032C03CC MOVZ W8, 0x1
	0x032C03D0 STRB W8, [X20 + 0x868]
	0x032C03D4 ADRP X22, 0xE3A000
	0x032C03D8 LDR X22, [X22 + 0xC10]
	0x032C03DC ADD X20, X19, 0x18
	0x032C03E0 LDR W21, [X20]
	0x032C03E4 MOV X0, X20
	0x032C03E8 MOV X3, X31
	0x032C03EC ORR W1, W21, 0x1
	0x032C03F0 MOV W2, W21
	0x032C03F4 BL 0x33E7AB4
	0x032C03F8 CMP W0, W21
	0x032C03FC B.NE 0x32C03E0
	0x032C0400 LDR X0, [X22]
	0x032C0404 LDR W8, [X0 + 0xE0]
	0x032C0408 CBNZ W8, 0x32C0410
	0x032C040C BL 0x1C16DFC
	0x032C0410 MOV X0, X19
	0x032C0414 LDP X20, X19, [X31 + 0x20]
	0x032C0418 LDP X22, X21, [X31 + 0x10]
	0x032C041C MOV X1, X31
	0x032C0420 LDR X30, [X31], #0x30
	0x032C0424 B 0x33B3E9C
	0x032C0428 STP X30, X25, [X31 - 0x40]!
	0x032C042C STP X24, X23, [X31 + 0x10]
	0x032C0430 STP X22, X21, [X31 + 0x20]
	0x032C0434 STP X20, X19, [X31 + 0x30]
	0x032C0438 LDRB W8, [X0 + 0x1D]
	0x032C043C CBZ W8, 0x32C0554
	0x032C0440 MOV X21, X0
	0x032C0444 LDR W22, [X21 + 0x18]!
	0x032C0448 MOV X19, X0
	0x032C044C MOV W20, W1
	0x032C0450 EOR W23, W1, 0x1
	0x032C0454 TBZ X22, 0x1, 0x32C0484
	0x032C0458 TBNZ X23, 0x0, 0x32C0484
	0x032C045C LDP X20, X19, [X31 + 0x30]
	0x032C0460 LDP X22, X21, [X31 + 0x20]
	0x032C0464 LDP X24, X23, [X31 + 0x10]
	0x032C0468 LDP X30, X25, [X31], #0x40
	0x032C046C RET
	0x032C0470 LDR W22, [X21]
	0x032C0474 ANDS W31, W22, 0x2
	0x032C0478 CSET W8, EQ
	0x032C047C ORR W8, W8, W23, 0x0
	0x032C0480 TBZ X8, 0x0, 0x32C045C
	0x032C0484 AND W24, W22, 0x7FFFFFFC
	0x032C0488 CMP W24, 0x4
	0x032C048C B.EQ 0x32C0498
	0x032C0490 CBNZ W24, 0x32C04C0
	0x032C0494 B 0x32C051C
	0x032C0498 TBNZ X22, 0x0, 0x32C04C0
	0x032C049C LDRB W8, [X19 + 0x1C]
	0x032C04A0 CBZ W8, 0x32C04C0
	0x032C04A4 LDR X8, [X19]
	0x032C04A8 MOV X0, X19
	0x032C04AC LDP X9, X1, [X8 + 0x188]
	0x032C04B0 BLR X9
	0x032C04B4 ORN W8, W31, W0, 0x0
	0x032C04B8 AND W25, W8, 0x1
	0x032C04BC B 0x32C04C4
	0x032C04C0 MOV W25, W31
	0x032C04C4 CMP W24, 0x4
	0x032C04C8 SUB W8, W22, 0x4
	0x032C04CC CSET W9, EQ
	0x032C04D0 ORR W8, W8, W9, 0x0
	0x032C04D4 ORR W9, W8, 0x2
	0x032C04D8 ANDS W31, W20, 0x1
	0x032C04DC CSEL W1, W9, W8, NE
	0x032C04E0 MOV X0, X21
	0x032C04E4 MOV W2, W22
	0x032C04E8 MOV X3, X31
	0x032C04EC BL 0x33E7AB4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x111D000
	007 Move W8, [X22+2141]
	008 Move W19, W2
	009 Move X20, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0xE34000
	016 Move X0, [X0+2904]
	017 Call 0x1C17CF4
	018 Move X0, 0xE36000
	019 Move X0, [X0+368]
	020 Call 0x1C17CF4
	021 Move X0, 0xE36000
	022 Move X0, [X0+3144]
	023 Call 0x1C17CF4
	024 Move X0, 0xE66000
	025 Move X0, [X0+1560]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X22+2141], W8
	029 Move W8, [X21+16]
	030 Subtract W8, W8, 1
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X9, -41062400
	033 Add X9, X9, 1440
	034 NotImplemented "Instruction ADR not yet implemented."
	035 Move W11, [X9]
	036 Add X10, X10, X11
	037 CallNoReturn X10
	038 Move X8, 0xE34000
	039 Move X8, [X8+2904]
	040 Move X21, [X21+24]
	041 Move X0, [X8]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move X0, X20
	047 Move X1, X31
	048 Call Boolean.Parse, X0
	049 Compare X21, 0
	050 JumpIfEqual {268}
	051 Move W8, [X21+24]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 And W8, W0, 1
	054 Add X9, X21, W19
	055 Move [X9+32], W8
	056 Compare X20, 0
	057 JumpIfEqual {268}
	058 Move X0, X20
	059 Move W1, W31
	060 Move X2, X31
	061 Call String.get_Chars, X0, X1
	062 And W8, W0, 0xFFFF
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X8, 0xE66000
	065 Move X8, [X8+1560]
	066 Move X0, X20
	067 Move X2, X31
	068 Move X1, [X8]
	069 Call String.Equals, X0, X1
	070 Move TEMP, X0
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfNotEqual {245}
	074 Move X8, [X21+32]
	075 Compare X8, 0
	076 JumpIfEqual {268}
	077 Move W9, [X8+24]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Add X8, X8, W19
	080 NotImplemented "Instruction STRH not yet implemented."
	081 Move X8, 0xE36000
	082 Move X8, [X8+3144]
	083 Move X21, [X21+40]
	084 Move X0, [X8]
	085 Move W8, [X0+224]
	086 Compare W8, 0
	087 JumpIfNotEqual {89}
	088 Call 0x1C17DFC
	089 Move X0, X31
	090 Call CultureInfo.get_InvariantCulture
	091 Move X1, X0
	092 Move X0, X20
	093 Move X2, X31
	094 Call Double.Parse, X0, X1
	095 Compare X21, 0
	096 JumpIfEqual {268}
	097 Move W8, [X21+24]
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Add X8, X21, W19
	100 Move [X8+32], D0
	101 Move X8, 0xE36000
	102 Move X8, [X8+3144]
	103 Move X21, [X21+48]
	104 Move X0, [X8]
	105 Move W8, [X0+224]
	106 Compare W8, 0
	107 JumpIfNotEqual {109}
	108 Call 0x1C17DFC
	109 Move X0, X31
	110 Call CultureInfo.get_InvariantCulture
	111 Move X1, X0
	112 Move X0, X20
	113 Move X2, X31
	114 Call Int16.Parse, X0, X1
	115 Compare X21, 0
	116 JumpIfNotEqual {258}
	117 Move X8, 0xE36000
	118 Move X8, [X8+3144]
	119 Move X21, [X21+56]
	120 Move X0, [X8]
	121 Move W8, [X0+224]
	122 Compare W8, 0
	123 JumpIfNotEqual {125}
	124 Call 0x1C17DFC
	125 Move X0, X31
	126 Call CultureInfo.get_InvariantCulture
	127 Move X1, X0
	128 Move X0, X20
	129 Move X2, X31
	130 Call Int32.Parse, X0, X1
	131 Compare X21, 0
	132 JumpIfNotEqual {221}
	133 Move X8, 0xE36000
	134 Move X8, [X8+3144]
	135 Move X21, [X21+64]
	136 Move X0, [X8]
	137 Move W8, [X0+224]
	138 Compare W8, 0
	139 JumpIfNotEqual {141}
	140 Call 0x1C17DFC
	141 Move X0, X31
	142 Call CultureInfo.get_InvariantCulture
	143 Move X1, X0
	144 Move X0, X20
	145 Move X2, X31
	146 Call Int64.Parse, X0, X1
	147 Compare X21, 0
	148 JumpIfNotEqual {241}
	149 Move X8, 0xE36000
	150 Move X8, [X8+3144]
	151 Move X21, [X21+72]
	152 Move X0, [X8]
	153 Move W8, [X0+224]
	154 Compare W8, 0
	155 JumpIfNotEqual {157}
	156 Call 0x1C17DFC
	157 Move X0, X31
	158 Call CultureInfo.get_InvariantCulture
	159 Move X1, X0
	160 Move X0, X20
	161 Move X2, X31
	162 Call SByte.Parse, X0, X1
	163 Compare X21, 0
	164 JumpIfEqual {268}
	165 Move W8, [X21+24]
	166 NotImplemented "Instruction CMP not yet implemented."
	167 Add X8, X21, W19
	168 Move [X8+32], W0
	169 Move X8, 0xE36000
	170 Move X8, [X8+3144]
	171 Move X21, [X21+80]
	172 Move X0, [X8]
	173 Move W8, [X0+224]
	174 Compare W8, 0
	175 JumpIfNotEqual {177}
	176 Call 0x1C17DFC
	177 Move X0, X31
	178 Call CultureInfo.get_InvariantCulture
	179 Move X1, X0
	180 Move X0, X20
	181 Move X2, X31
	182 Call Single.Parse, X0, X1
	183 Compare X21, 0
	184 JumpIfEqual {268}
	185 Move W8, [X21+24]
	186 NotImplemented "Instruction CMP not yet implemented."
	187 Add X8, X21, W19
	188 Move [X8+32], S0
	189 Move X8, 0xE36000
	190 Move X8, [X8+3144]
	191 Move X21, [X21+88]
	192 Move X0, [X8]
	193 Move W8, [X0+224]
	194 Compare W8, 0
	195 JumpIfNotEqual {197}
	196 Call 0x1C17DFC
	197 Move X0, X31
	198 Call CultureInfo.get_InvariantCulture
	199 Move X1, X0
	200 Move X0, X20
	201 Move X2, X31
	202 Call UInt16.Parse, X0, X1
	203 Compare X21, 0
	204 JumpIfNotEqual {258}
	205 Move X8, 0xE36000
	206 Move X8, [X8+3144]
	207 Move X21, [X21+96]
	208 Move X0, [X8]
	209 Move W8, [X0+224]
	210 Compare W8, 0
	211 JumpIfNotEqual {213}
	212 Call 0x1C17DFC
	213 Move X0, X31
	214 Call CultureInfo.get_InvariantCulture
	215 Move X1, X0
	216 Move X0, X20
	217 Move X2, X31
	218 Call UInt32.Parse, X0, X1
	219 Compare X21, 0
	220 JumpIfEqual {268}
	221 Move W8, [X21+24]
	222 NotImplemented "Instruction CMP not yet implemented."
	223 Add X8, X21, W19
	224 Move [X8+32], W0
	225 Move X8, 0xE36000
	226 Move X8, [X8+3144]
	227 Move X21, [X21+104]
	228 Move X0, [X8]
	229 Move W8, [X0+224]
	230 Compare W8, 0
	231 JumpIfNotEqual {233}
	232 Call 0x1C17DFC
	233 Move X0, X31
	234 Call CultureInfo.get_InvariantCulture
	235 Move X1, X0
	236 Move X0, X20
	237 Move X2, X31
	238 Call UInt64.Parse, X0, X1
	239 Compare X21, 0
	240 JumpIfEqual {268}
	241 Move W8, [X21+24]
	242 NotImplemented "Instruction CMP not yet implemented."
	243 Add X8, X21, W19
	244 Move [X8+32], X0
	245 Move X8, 0xE36000
	246 Move X8, [X8+368]
	247 Move X21, [X21+32]
	248 Move X0, [X8]
	249 Move W8, [X0+224]
	250 Compare W8, 0
	251 JumpIfNotEqual {253}
	252 Call 0x1C17DFC
	253 Move X0, X20
	254 Move X1, X31
	255 Call Char.Parse, X0
	256 Compare X21, 0
	257 JumpIfEqual {268}
	258 Move W8, [X21+24]
	259 NotImplemented "Instruction CMP not yet implemented."
	260 Add X8, X21, W19
	261 NotImplemented "Instruction STRH not yet implemented."
	262 Move X20, [X31+32]
	263 Move X19, [X31+40]
	264 Move X22, [X31+16]
	265 Move X21, [X31+24]
	266 Move X30, [X31+48]
	267 Return 
	268 Call 0x1C17F20
	269 Call 0x1C17F28

