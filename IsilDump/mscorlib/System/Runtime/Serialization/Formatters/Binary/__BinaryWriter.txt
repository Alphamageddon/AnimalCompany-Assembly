Type: System.Runtime.Serialization.Formatters.Binary.__BinaryWriter

Method: System.Void .ctor(System.IO.Stream sout, System.Runtime.Serialization.Formatters.Binary.ObjectWriter objectWriter, System.Runtime.Serialization.Formatters.FormatterTypeStyle formatterTypeStyle)

Disassembly:
	0x032B23D4 MOV X20, X21
	0x032B23D8 STR W8, [X26, X23, LSL #2]
	0x032B23DC LDR X8, [X31 + 0x38]
	0x032B23E0 ADD X23, X23, 0x1
	0x032B23E4 CMP X8, X23
	0x032B23E8 B.NE 0x32B2334
	0x032B23EC LDR X22, [X31 + 0x40]
	0x032B23F0 LDR X26, [X22 + 0x60]
	0x032B23F4 CBZ X26, 0x32B2420
	0x032B23F8 LDP X8, X19, [X31 + 0x18]
	0x032B23FC LDR W21, [X31 + 0x34]
	0x032B2400 LDR W8, [X8 + 0x20]
	0x032B2404 STR W8, [X31 + 0x5C]
	0x032B2408 B 0x32B2454
	0x032B240C LDR X26, [X24 + 0x58]
	0x032B2410 CBZ X26, 0x32B24D0
	0x032B2414 LDR W8, [X28 + 0x20]
	0x032B2418 STR W8, [X31 + 0x5C]
	0x032B241C B 0x32B24FC
	0x032B2420 ADRP X8, 0xE73000
	0x032B2424 LDR X8, [X8 + 0x2D8]
	0x032B2428 LDR X0, [X8]
	0x032B242C BL 0x1C16F10
	0x032B2430 MOV X1, X31
	0x032B2434 MOV X26, X0
	0x032B2438 BL 0x33BDD8C
	0x032B243C LDP X8, X19, [X31 + 0x18]
	0x032B2440 STR X26, [X22 + 0x60]
	0x032B2444 LDR W21, [X31 + 0x34]
	0x032B2448 LDR W8, [X8 + 0x20]
	0x032B244C STR W8, [X31 + 0x5C]
	0x032B2450 CBZ X26, 0x32B2598
	0x032B2454 LDR X9, [X31 + 0x28]
	0x032B2458 LDR W23, [X31 + 0x14]
	0x032B245C STR W8, [X26 + 0x48]
	0x032B2460 CMP W8, 0x1
	0x032B2464 MOVZ W8, 0x4
	0x032B2468 CINC W8, W8, GE
	0x032B246C MOV X0, X26
	0x032B2470 MOV X1, X22
	0x032B2474 STR X9, [X26 + 0x18]
	0x032B2478 STR W21, [X26 + 0x20]
	0x032B247C STP X19, X27, [X26 + 0x28]
	0x032B2480 STP X28, X29, [X26 + 0x38]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x112B000
	009 Move X23, 0xE74000
	010 Move W8, [X24+2024]
	011 Move X23, [X23+608]
	012 Move W22, W3
	013 Move X21, X2
	014 Move X20, X1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xE74000
	021 Move X0, [X0+608]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+2024], W8
	025 Move W8, 4096
	026 Move X0, X19
	027 Move X1, X31
	028 Move [X19+128], W8
	029 Call Object..ctor, X0
	030 Move X0, X31
	031 Move [X19+16], X20
	032 Move [X19+24], W22
	033 Move [X19+40], X21
	034 Move [X19+56], W31
	035 Call Encoding.get_UTF8
	036 Move X8, [X23]
	037 Move X21, X0
	038 Move X0, X8
	039 Call 0x1C17F10
	040 Move X1, X20
	041 Move X2, X21
	042 Move X3, X31
	043 Move X22, X0
	044 Call BinaryWriter..ctor, X0, X1, X2
	045 Move [X19+48], X22
	046 Move X20, [X31+48]
	047 Move X19, [X31+56]
	048 Move X22, [X31+32]
	049 Move X21, [X31+40]
	050 Move X24, [X31+16]
	051 Move X23, [X31+24]
	052 Move X30, [X31+64]
	053 Return 

Method: System.Void WriteBegin()

Disassembly:
	0x032B2B5C LDR X0, [X0 + 0x618]

ISIL:
	001 Return 

Method: System.Void WriteEnd()

Disassembly:
	0x032B2B60 BL 0x1C16CF4
	0x032B2B64 ADRP X0, 0xE41000
	0x032B2B68 LDR X0, [X0 + 0x5A8]
	0x032B2B6C BL 0x1C16CF4
	0x032B2B70 MOVZ W8, 0x1
	0x032B2B74 STRB W8, [X22 + 0x7F3]
	0x032B2B78 MOV X0, X21
	0x032B2B7C BL 0x32B25B4

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+424]
	007 Move X1, [X8+432]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Void WriteBoolean(System.Boolean value)

Disassembly:
	0x032B2B80 LDR X8, [X21 + 0x78]
	0x032B2B84 CBNZ X8, 0x32B2BA0
	0x032B2B88 ADRP X8, 0xE41000
	0x032B2B8C LDR W1, [X21 + 0x80]
	0x032B2B90 LDR X8, [X8 + 0x618]
	0x032B2B94 LDR X0, [X8]
	0x032B2B98 BL 0x1C16D6C
	0x032B2B9C STR X0, [X21 + 0x78]
	0x032B2BA0 CBZ X20, 0x32B2C6C

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X0]
	006 And W1, W1, 1
	007 Move X3, [X8+440]
	008 Move X2, [X8+448]
	009 Move X30, [X31+16]
	010 CallNoReturn X3
	011 Call 0x1C17F20

Method: System.Void WriteByte(System.Byte value)

Disassembly:
	0x032ABD6C LDP X22, X21, [X31 + 0x10]
	0x032ABD70 LDR X2, [X8 + 0x288]
	0x032ABD74 LDR X1, [X8 + 0x290]
	0x032ABD78 LDR X30, [X31], #0x30
	0x032ABD7C BR X2
	0x032ABD80 CBZ X20, 0x32ABF6C
	0x032ABD84 ADRP X8, 0xE4A000
	0x032ABD88 LDR X8, [X8 + 0x570]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+456]
	007 Move X2, [X8+464]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Void WriteBytes(System.Byte[] value)

Disassembly:
	0x032B2BA4 MOV X0, X20
	0x032B2BA8 MOV X1, X31
	0x032B2BAC BL 0x3395B7C
	0x032B2BB0 CMP W0, 0x1
	0x032B2BB4 B.LT 0x32B2C58
	0x032B2BB8 ADRP X25, 0xE41000
	0x032B2BBC LDR X25, [X25 + 0x5A8]
	0x032B2BC0 MOV W24, W31

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+472]
	007 Move X2, [X8+480]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Void WriteBytes(System.Byte[] byteA, System.Int32 offset, System.Int32 size)

Disassembly:
	0x032B2BC4 LDR W23, [X21 + 0x80]
	0x032B2BC8 MOV X0, X20
	0x032B2BCC MOV X1, X31
	0x032B2BD0 BL 0x3395B7C
	0x032B2BD4 LDR X8, [X25]
	0x032B2BD8 MOV W22, W0
	0x032B2BDC LDR W9, [X8 + 0xE0]
	0x032B2BE0 CBNZ W9, 0x32B2BEC

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X5, [X8+488]
	007 Move X4, [X8+496]
	008 Move X30, [X31+16]
	009 CallNoReturn X5
	010 Call 0x1C17F20

Method: System.Void WriteChar(System.Char value)

Disassembly:
	0x032B2BE4 MOV X0, X8
	0x032B2BE8 BL 0x1C16DFC
	0x032B2BEC SDIV W0, W23, W19
	0x032B2BF0 SUB W1, W22, W24
	0x032B2BF4 MOV X2, X31
	0x032B2BF8 BL 0x337EE94
	0x032B2BFC LDR X2, [X21 + 0x78]
	0x032B2C00 MUL W23, W0, W19

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+504]
	007 Move X2, [X8+512]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Void WriteChars(System.Char[] value)

Disassembly:
	0x032B2C04 MOV W22, W0
	0x032B2C08 MUL W1, W24, W19
	0x032B2C0C MOV X0, X20
	0x032B2C10 MOV W3, W31
	0x032B2C14 MOV W4, W23
	0x032B2C18 MOV X5, X31
	0x032B2C1C BL 0x33A8750
	0x032B2C20 LDR X0, [X21 + 0x30]
	0x032B2C24 CBZ X0, 0x32B2C6C

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+520]
	007 Move X2, [X8+528]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Void WriteDecimal(System.Decimal value)

Disassembly:
	0x032B2C28 LDR X8, [X0]
	0x032B2C2C LDR X1, [X21 + 0x78]
	0x032B2C30 MOV W2, W31
	0x032B2C34 MOV W3, W23
	0x032B2C38 LDP X9, X4, [X8 + 0x1E8]
	0x032B2C3C BLR X9
	0x032B2C40 MOV X0, X20
	0x032B2C44 MOV X1, X31
	0x032B2C48 ADD W24, W22, W24
	0x032B2C4C BL 0x3395B7C
	0x032B2C50 CMP W24, W0
	0x032B2C54 B.LT 0x32B2BC4
	0x032B2C58 LDP X20, X19, [X31 + 0x30]
	0x032B2C5C LDP X22, X21, [X31 + 0x20]
	0x032B2C60 LDP X24, X23, [X31 + 0x10]
	0x032B2C64 LDP X30, X25, [X31], #0x40
	0x032B2C68 RET
	0x032B2C6C BL 0x1C16F20
	0x032B2C70 SUB X31, X31, 0x60
	0x032B2C74 STR X30, [X31 + 0x10]
	0x032B2C78 STP X26, X25, [X31 + 0x20]
	0x032B2C7C STP X24, X23, [X31 + 0x30]
	0x032B2C80 STP X22, X21, [X31 + 0x40]
	0x032B2C84 STP X20, X19, [X31 + 0x50]
	0x032B2C88 ADRP X21, 0x112A000
	0x032B2C8C ADRP X26, 0xE42000
	0x032B2C90 LDRB W8, [X21 + 0x7F4]
	0x032B2C94 LDR X26, [X26 + 0xE58]
	0x032B2C98 MOV W25, W6
	0x032B2C9C MOV W24, W5
	0x032B2CA0 MOV X23, X4
	0x032B2CA4 MOV X22, X3
	0x032B2CA8 MOV X20, X2
	0x032B2CAC MOV X19, X0
	0x032B2CB0 TBNZ X8, 0x0, 0x32B2CD4
	0x032B2CB4 ADRP X0, 0xE73000
	0x032B2CB8 LDR X0, [X0 + 0x308]
	0x032B2CBC BL 0x1C16CF4
	0x032B2CC0 ADRP X0, 0xE42000
	0x032B2CC4 LDR X0, [X0 + 0xE58]
	0x032B2CC8 BL 0x1C16CF4
	0x032B2CCC MOVZ W8, 0x1
	0x032B2CD0 STRB W8, [X21 + 0x7F4]
	0x032B2CD4 MOV X0, X19
	0x032B2CD8 BL 0x32B25B4
	0x032B2CDC LDR X0, [X26]
	0x032B2CE0 MOVZ W1, 0x1
	0x032B2CE4 BL 0x1C16D6C
	0x032B2CE8 CBZ X0, 0x32B2DE8
	0x032B2CEC LDR W8, [X0 + 0x18]
	0x032B2CF0 MOV X21, X0
	0x032B2CF4 CBZ W8, 0x32B2DEC
	0x032B2CF8 STR W24, [X21 + 0x20]
	0x032B2CFC STR X31, [X31 + 0x18]
	0x032B2D00 STR W31, [X31 + 0xC]
	0x032B2D04 CBZ W25, 0x32B2D34
	0x032B2D08 LDR X0, [X26]
	0x032B2D0C MOVZ W1, 0x1
	0x032B2D10 BL 0x1C16D6C

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 NotImplemented "Instruction MRS not yet implemented."
	008 Move X8, [X21+40]
	009 Move X22, 0x112B000
	010 Move X20, 0xE44000
	011 Move X19, X0
	012 Move [X31+24], X8
	013 Move [X31+8], X1
	014 Move [X31+16], X2
	015 Move W8, [X22+2025]
	016 Move X20, [X20+3144]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0xE44000
	022 Move X0, [X0+3144]
	023 Call 0x1C17CF4
	024 Move X0, 0xE6A000
	025 Move X0, [X0+1520]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X22+2025], W8
	029 Move X0, [X20]
	030 Move X20, 0xE6A000
	031 Move W8, [X0+224]
	032 Move X20, [X20+1520]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X31
	037 Call CultureInfo.get_InvariantCulture
	038 Move X8, [X20]
	039 Move X20, X0
	040 Move W9, [X8+224]
	041 Compare W9, 0
	042 JumpIfNotEqual {45}
	043 Move X0, X8
	044 Call 0x1C17DFC
	045 Add X0, X31, 8
	046 Move X1, X20
	047 Move X2, X31
	048 Call Decimal.ToString, X0, X1
	049 Move X8, [X19+48]
	050 Compare X8, 0
	051 JumpIfEqual {68}
	052 Move X9, [X8]
	053 Move X1, X0
	054 Move X0, X8
	055 Move X10, [X9+664]
	056 Move X2, [X9+672]
	057 NotImplemented "Instruction BLR not yet implemented."
	058 Move X8, [X21+40]
	059 Move X9, [X31+24]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X20, [X31+64]
	062 Move X19, [X31+72]
	063 Move X22, [X31+48]
	064 Move X21, [X31+56]
	065 Move X30, [X31+32]
	066 Add X31, X31, 80
	067 Return 
	068 Call 0x1C17F20
	069 Call 0x3EB2B20

Method: System.Void WriteSingle(System.Single value)

Disassembly:
	0x032B2D14 CBZ X0, 0x32B2DE8
	0x032B2D18 LDR W8, [X0 + 0x18]
	0x032B2D1C MOV X24, X0
	0x032B2D20 CBZ W8, 0x32B2DEC
	0x032B2D24 MOVZ W26, 0x4
	0x032B2D28 STR W25, [X24 + 0x20]
	0x032B2D2C CBNZ X23, 0x32B2D40
	0x032B2D30 B 0x32B2DE8
	0x032B2D34 MOV X24, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+648]
	007 Move X1, [X8+656]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Void WriteDouble(System.Double value)

Disassembly:
	0x032B2D38 MOVZ W26, 0x1
	0x032B2D3C CBZ X23, 0x32B2DE8
	0x032B2D40 LDR X25, [X23 + 0x30]
	0x032B2D44 MOV X0, X23
	0x032B2D48 MOV X1, X31
	0x032B2D4C BL 0x32BED5C
	0x032B2D50 LDR X3, [X19 + 0x28]
	0x032B2D54 ADD X4, X31, 0x18
	0x032B2D58 ADD X5, X31, 0xC

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+536]
	007 Move X1, [X8+544]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Void WriteInt16(System.Int16 value)

Disassembly:
	0x032B2D5C MOV X0, X25
	0x032B2D60 MOV X1, X22
	0x032B2D64 BL 0x32AA1A8
	0x032B2D68 LDR X23, [X19 + 0x70]
	0x032B2D6C MOV W22, W0
	0x032B2D70 CBNZ X23, 0x32B2D94
	0x032B2D74 ADRP X8, 0xE73000
	0x032B2D78 LDR X8, [X8 + 0x308]
	0x032B2D7C LDR X0, [X8]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+552]
	007 Move X2, [X8+560]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Void WriteInt32(System.Int32 value)

Disassembly:
	0x032ABDB0 MOV X0, X19
	0x032ABDB4 LDP X20, X19, [X31 + 0x20]
	0x032ABDB8 LDP X22, X21, [X31 + 0x10]
	0x032ABDBC LDR X30, [X31], #0x30
	0x032ABDC0 B 0x32B1DC4
	0x032ABDC4 CBZ X20, 0x32ABF6C
	0x032ABDC8 ADRP X8, 0xE49000
	0x032ABDCC LDR X8, [X8 + 0x9F0]
	0x032ABDD0 LDR X9, [X20]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+584]
	007 Move X2, [X8+592]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Void WriteInt64(System.Int64 value)

Disassembly:
	0x032B2D80 BL 0x1C16F10
	0x032B2D84 MOV X1, X31
	0x032B2D88 MOV X23, X0
	0x032B2D8C BL 0x33BDD8C
	0x032B2D90 STR X23, [X19 + 0x70]
	0x032B2D94 CBZ X20, 0x32B2DE8
	0x032B2D98 CBZ X23, 0x32B2DE8
	0x032B2D9C LDR W8, [X31 + 0xC]
	0x032B2DA0 LDP X30, X9, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+616]
	007 Move X2, [X8+624]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Void WriteSByte(System.SByte value)

Disassembly:
	0x032B2DA4 LDR X10, [X20 + 0x18]
	0x032B2DA8 MOVZ W11, 0x1
	0x032B2DAC MOVZ W12, 0x7
	0x032B2DB0 STP X21, X24, [X23 + 0x18]
	0x032B2DB4 STR W22, [X23 + 0x28]
	0x032B2DB8 STP W10, W11, [X23 + 0x10]
	0x032B2DBC STR X9, [X23 + 0x30]
	0x032B2DC0 STR W8, [X23 + 0x38]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+456]
	007 Move X2, [X8+464]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Void WriteString(System.String value)

Disassembly:
	0x032ABD8C LDR X9, [X20]
	0x032ABD90 LDR X1, [X8]
	0x032ABD94 LDR X8, [X9 + 0x40]
	0x032ABD98 LDR X9, [X1 + 0x40]
	0x032ABD9C CMP X8, X9
	0x032ABDA0 B.NE 0x32ABF70
	0x032ABDA4 MOV X0, X20
	0x032ABDA8 BL 0x1C16E08
	0x032ABDAC LDR X1, [X0]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+664]
	007 Move X2, [X8+672]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Void WriteTimeSpan(System.TimeSpan value)

Disassembly:
	0x032B2DC4 STP W12, W26, [X23 + 0x3C]
	0x032B2DC8 MOV X0, X23
	0x032B2DCC MOV X1, X19
	0x032B2DD0 LDP X20, X19, [X31 + 0x50]
	0x032B2DD4 LDP X22, X21, [X31 + 0x40]
	0x032B2DD8 LDP X24, X23, [X31 + 0x30]
	0x032B2DDC LDP X26, X25, [X31 + 0x20]
	0x032B2DE0 ADD X31, X31, 0x60
	0x032B2DE4 B 0x32AD8E4
	0x032B2DE8 BL 0x1C16F20
	0x032B2DEC BL 0x1C16F28
	0x032B2DF0 SUB X31, X31, 0x60
	0x032B2DF4 STR X30, [X31 + 0x10]
	0x032B2DF8 STP X26, X25, [X31 + 0x20]
	0x032B2DFC STP X24, X23, [X31 + 0x30]
	0x032B2E00 STP X22, X21, [X31 + 0x40]
	0x032B2E04 STP X20, X19, [X31 + 0x50]
	0x032B2E08 ADRP X26, 0x112A000
	0x032B2E0C LDRB W8, [X26 + 0x7F5]
	0x032B2E10 MOV X20, X7
	0x032B2E14 MOV X22, X6
	0x032B2E18 MOV W19, W5
	0x032B2E1C MOV X25, X4
	0x032B2E20 MOV X24, X3
	0x032B2E24 MOV X23, X2
	0x032B2E28 MOV X21, X0
	0x032B2E2C TBNZ X8, 0x0, 0x32B2E44
	0x032B2E30 ADRP X0, 0xE73000
	0x032B2E34 LDR X0, [X0 + 0x308]
	0x032B2E38 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x112B000
	007 Move X22, 0xE44000
	008 Move W8, [X21+2026]
	009 Move X22, [X22+1392]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xE44000
	017 Move X0, [X0+1392]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2026], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, [X20+48]
	027 Compare X0, 0
	028 JumpIfEqual {39}
	029 Move X8, [X0]
	030 Move X1, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X3, [X8+616]
	036 Move X2, [X8+624]
	037 Move X30, [X31+48]
	038 CallNoReturn X3
	039 Call 0x1C17F20

Method: System.Void WriteDateTime(System.DateTime value)

Disassembly:
	0x032B2E3C MOVZ W8, 0x1
	0x032B2E40 STRB W8, [X26 + 0x7F5]
	0x032B2E44 MOV X0, X21
	0x032B2E48 BL 0x32B25B4
	0x032B2E4C STR X31, [X31 + 0x18]
	0x032B2E50 STR W31, [X31 + 0xC]
	0x032B2E54 CBZ X25, 0x32B2F44
	0x032B2E58 LDR X26, [X25 + 0x30]
	0x032B2E5C MOV X0, X25
	0x032B2E60 MOV X1, X31
	0x032B2E64 BL 0x32BED5C
	0x032B2E68 LDR X3, [X21 + 0x28]
	0x032B2E6C ADD X4, X31, 0x18
	0x032B2E70 ADD X5, X31, 0xC
	0x032B2E74 MOV X0, X26
	0x032B2E78 MOV X1, X24
	0x032B2E7C BL 0x32AA1A8
	0x032B2E80 LDR X25, [X21 + 0x70]
	0x032B2E84 MOV W24, W0
	0x032B2E88 CBNZ X25, 0x32B2EAC
	0x032B2E8C ADRP X8, 0xE73000
	0x032B2E90 LDR X8, [X8 + 0x308]
	0x032B2E94 LDR X0, [X8]
	0x032B2E98 BL 0x1C16F10
	0x032B2E9C MOV X1, X31
	0x032B2EA0 MOV X25, X0
	0x032B2EA4 BL 0x33BDD8C
	0x032B2EA8 STR X25, [X21 + 0x70]
	0x032B2EAC CMP W19, 0x1
	0x032B2EB0 B.LT 0x32B2EE0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x112B000
	007 Move X22, 0xE43000
	008 Move W8, [X21+2027]
	009 Move X22, [X22+2544]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xE43000
	017 Move X0, [X0+2544]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2027], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, [X20+48]
	027 Compare X0, 0
	028 JumpIfEqual {39}
	029 Move X8, [X0]
	030 Move X1, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X3, [X8+616]
	036 Move X2, [X8+624]
	037 Move X30, [X31+48]
	038 CallNoReturn X3
	039 Call 0x1C17F20

Method: System.Void WriteUInt16(System.UInt16 value)

Disassembly:
	0x032B2EB4 CBZ X20, 0x32B2F44
	0x032B2EB8 LDR W8, [X20 + 0x18]
	0x032B2EBC MOV W9, W31
	0x032B2EC0 CMP W9, W8
	0x032B2EC4 B.CS 0x32B2F40
	0x032B2EC8 ADD X10, X20, W9, 0x2, SXTW
	0x032B2ECC LDR W10, [X10 + 0x20]
	0x032B2ED0 CBNZ W10, 0x32B2EEC
	0x032B2ED4 ADD W9, W9, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+568]
	007 Move X2, [X8+576]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Void WriteUInt32(System.UInt32 value)

Disassembly:
	0x032B2ED8 CMP W19, W9
	0x032B2EDC B.NE 0x32B2EC0
	0x032B2EE0 MOVZ W8, 0x2
	0x032B2EE4 CBNZ X23, 0x32B2EF4
	0x032B2EE8 B 0x32B2F44
	0x032B2EEC MOVZ W8, 0x5
	0x032B2EF0 CBZ X23, 0x32B2F44
	0x032B2EF4 CBZ X25, 0x32B2F44
	0x032B2EF8 LDR W9, [X31 + 0xC]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+600]
	007 Move X2, [X8+608]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Void WriteUInt64(System.UInt64 value)

Disassembly:
	0x032B2EFC LDP X30, X10, [X31 + 0x10]
	0x032B2F00 LDR X11, [X23 + 0x18]
	0x032B2F04 STR W8, [X25 + 0x40]
	0x032B2F08 MOVZ W8, 0x7
	0x032B2F0C STP X22, X20, [X25 + 0x18]
	0x032B2F10 STR W24, [X25 + 0x28]
	0x032B2F14 STP W11, W19, [X25 + 0x10]
	0x032B2F18 STR X10, [X25 + 0x30]
	0x032B2F1C STP W9, W8, [X25 + 0x38]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+632]
	007 Move X2, [X8+640]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Void WriteObjectEnd(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo)

Disassembly:
	0x032B2F20 MOV X0, X25

ISIL:
	001 Return 

Method: System.Void WriteSerializationHeaderEnd()

Disassembly:
	0x032B2F24 MOV X1, X21
	0x032B2F28 LDP X20, X19, [X31 + 0x50]
	0x032B2F2C LDP X22, X21, [X31 + 0x40]
	0x032B2F30 LDP X24, X23, [X31 + 0x30]
	0x032B2F34 LDP X26, X25, [X31 + 0x20]
	0x032B2F38 ADD X31, X31, 0x60
	0x032B2F3C B 0x32AD8E4
	0x032B2F40 BL 0x1C16F28
	0x032B2F44 BL 0x1C16F20
	0x032B2F48 STP X30, X25, [X31 - 0x40]!
	0x032B2F4C STP X24, X23, [X31 + 0x10]
	0x032B2F50 STP X22, X21, [X31 + 0x20]
	0x032B2F54 STP X20, X19, [X31 + 0x30]
	0x032B2F58 MOV X19, X7
	0x032B2F5C MOV W20, W6
	0x032B2F60 MOV W21, W5
	0x032B2F64 MOV X22, X4
	0x032B2F68 MOV X23, X3
	0x032B2F6C MOV X24, X2
	0x032B2F70 MOV X25, X0
	0x032B2F74 BL 0x32B25B4
	0x032B2F78 MOV X2, X24
	0x032B2F7C MOV X3, X23
	0x032B2F80 MOV X4, X22

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x112B000
	006 Move X21, 0xE74000
	007 Move W8, [X20+2028]
	008 Move X21, [X21+704]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE74000
	015 Move X0, [X0+704]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2028], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X31
	022 Move X20, X0
	023 Call Object..ctor, X0
	024 Compare X20, 0
	025 JumpIfEqual {33}
	026 Move X1, X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call MessageEnd.Write, X0, X1
	032 Return 
	033 Call 0x1C17F20

Method: System.Void WriteSerializationHeader(System.Int32 topId, System.Int32 headerId, System.Int32 minorVersion, System.Int32 majorVersion)

Disassembly:
	0x032B2F84 MOV W5, W21
	0x032B2F88 MOV W6, W20
	0x032B2F8C MOV X7, X19
	0x032B2F90 LDP X20, X19, [X31 + 0x30]
	0x032B2F94 LDP X22, X21, [X31 + 0x20]
	0x032B2F98 LDP X24, X23, [X31 + 0x10]
	0x032B2F9C MOV X0, X25
	0x032B2FA0 LDP X30, X25, [X31], #0x40
	0x032B2FA4 B 0x32B2850
	0x032B2FA8 STP X30, X23, [X31 - 0x30]!
	0x032B2FAC STP X22, X21, [X31 + 0x10]
	0x032B2FB0 STP X20, X19, [X31 + 0x20]
	0x032B2FB4 ADRP X23, 0x112A000
	0x032B2FB8 LDRB W8, [X23 + 0x7F6]
	0x032B2FBC MOV X20, X3
	0x032B2FC0 MOV X21, X2
	0x032B2FC4 MOV X22, X1
	0x032B2FC8 MOV X19, X0
	0x032B2FCC TBNZ X8, 0x0, 0x32B2FF0
	0x032B2FD0 ADRP X0, 0xE73000
	0x032B2FD4 LDR X0, [X0 + 0x310]
	0x032B2FD8 BL 0x1C16CF4
	0x032B2FDC ADRP X0, 0xE73000
	0x032B2FE0 LDR X0, [X0 + 0x318]
	0x032B2FE4 BL 0x1C16CF4
	0x032B2FE8 MOVZ W8, 0x1
	0x032B2FEC STRB W8, [X23 + 0x7F6]
	0x032B2FF0 MOV X0, X19
	0x032B2FF4 BL 0x32B25B4
	0x032B2FF8 CBZ X21, 0x32B30AC
	0x032B2FFC CBZ X22, 0x32B30AC
	0x032B3000 LDRB W8, [X22 + 0x3C]
	0x032B3004 LDR W22, [X21 + 0x28]
	0x032B3008 CBZ W8, 0x32B305C
	0x032B300C LDR X21, [X19 + 0x90]
	0x032B3010 CBNZ X21, 0x32B3038

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0x112B000
	010 Move X25, 0xE74000
	011 Move W8, [X24+2029]
	012 Move X25, [X25+712]
	013 Move W19, W4
	014 Move W21, W3
	015 Move W22, W2
	016 Move W23, W1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xE74000
	023 Move X0, [X0+712]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+2029], W8
	027 Move X0, [X25]
	028 Call 0x1C17F10
	029 Move W8, 1
	030 Move X1, X31
	031 Move X24, X0
	032 Move [X0+16], W8
	033 Call Object..ctor, X0
	034 Move [X24+24], W31
	035 Move [X24+28], W23
	036 Move [X24+32], W22
	037 Move [X24+36], W21
	038 Move [X24+40], W19
	039 Move X0, X24
	040 Move X1, X20
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X24, [X31+16]
	046 Move X23, [X31+24]
	047 Move X30, [X31+64]
	048 Move X25, [X31+72]
	049 Call SerializationHeaderRecord.Write, X0, X1
	050 Return 

Method: System.Void WriteMethodCall()

Disassembly:
	0x032B3014 ADRP X8, 0xE72000
	0x032B3018 LDR X8, [X8 + 0x310]
	0x032B301C LDR X0, [X8]
	0x032B3020 BL 0x1C16F10
	0x032B3024 MOV X1, X31
	0x032B3028 MOV X21, X0
	0x032B302C BL 0x33BDD8C
	0x032B3030 STR X21, [X19 + 0x90]
	0x032B3034 CBZ X21, 0x32B30AC
	0x032B3038 STR W22, [X21 + 0x10]
	0x032B303C STR X20, [X21 + 0x18]
	0x032B3040 CBZ X21, 0x32B30AC
	0x032B3044 MOV X0, X21
	0x032B3048 MOV X1, X19
	0x032B304C LDP X20, X19, [X31 + 0x20]
	0x032B3050 LDP X22, X21, [X31 + 0x10]
	0x032B3054 LDP X30, X23, [X31], #0x30
	0x032B3058 B 0x32ACBD8
	0x032B305C LDR X21, [X19 + 0x88]
	0x032B3060 CBNZ X21, 0x32B3088
	0x032B3064 ADRP X8, 0xE72000
	0x032B3068 LDR X8, [X8 + 0x318]
	0x032B306C LDR X0, [X8]
	0x032B3070 BL 0x1C16F10
	0x032B3074 MOV X1, X31
	0x032B3078 MOV X21, X0
	0x032B307C BL 0x33BDD8C
	0x032B3080 STR X21, [X19 + 0x88]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x112A000
	005 Move W8, [X20+2030]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE73000
	012 Move X0, [X0+720]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2030], W8
	016 Move X20, [X19+64]
	017 Compare X20, 0
	018 JumpIfNotEqual {29}
	019 Move X8, 0xE73000
	020 Move X8, [X8+720]
	021 Move X0, [X8]
	022 Call 0x1C17F10
	023 Move W8, 1
	024 Move X1, X31
	025 Move X20, X0
	026 Move [X0+56], W8
	027 Call Object..ctor, X0
	028 Move [X19+64], X20
	029 Move X0, X20
	030 Move X1, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Call BinaryMethodCall.Write, X0, X1
	035 Return 

Method: System.Void WriteMethodReturn()

Disassembly:
	0x032B3084 CBZ X21, 0x32B30AC
	0x032B3088 STR W22, [X21 + 0x10]
	0x032B308C STR X20, [X21 + 0x18]
	0x032B3090 CBZ X21, 0x32B30AC
	0x032B3094 MOV X0, X21
	0x032B3098 MOV X1, X19
	0x032B309C LDP X20, X19, [X31 + 0x20]
	0x032B30A0 LDP X22, X21, [X31 + 0x10]
	0x032B30A4 LDP X30, X23, [X31], #0x30
	0x032B30A8 B 0x32ADF80
	0x032B30AC BL 0x1C16F20
	0x032B30B0 STP X30, X21, [X31 - 0x20]!
	0x032B30B4 STP X20, X19, [X31 + 0x10]
	0x032B30B8 ADRP X21, 0x1129000
	0x032B30BC LDRB W8, [X21 + 0x7F7]
	0x032B30C0 MOV X20, X1
	0x032B30C4 MOV X19, X0
	0x032B30C8 TBNZ X8, 0x0, 0x32B30E0
	0x032B30CC ADRP X0, 0xE72000
	0x032B30D0 LDR X0, [X0 + 0x2F8]
	0x032B30D4 BL 0x1C16CF4
	0x032B30D8 MOVZ W8, 0x1
	0x032B30DC STRB W8, [X21 + 0x7F7]
	0x032B30E0 MOV X0, X19
	0x032B30E4 BL 0x32B25B4
	0x032B30E8 LDR X21, [X19 + 0x98]
	0x032B30EC CBNZ X21, 0x32B3110
	0x032B30F0 ADRP X8, 0xE72000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x112A000
	005 Move W8, [X20+2031]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE73000
	012 Move X0, [X0]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2031], W8
	016 Move X20, [X19+72]
	017 Compare X20, 0
	018 JumpIfNotEqual {29}
	019 Move X8, 0xE73000
	020 Move X8, [X8]
	021 Move X0, [X8]
	022 Call 0x1C17F10
	023 Move W8, 1
	024 Move X1, X31
	025 Move X20, X0
	026 Move [X0+48], W8
	027 Call Object..ctor, X0
	028 Move [X19+72], X20
	029 Move X0, X20
	030 Move X1, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Call BinaryMethodReturn.Write, X0, X1
	035 Return 

Method: System.Void WriteObject(System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, System.Int32 numMembers, System.String[] memberNames, System.Type[] memberTypes, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo[] memberObjectInfos)

Disassembly:
	0x032B30F4 LDR X8, [X8 + 0x2F8]
	0x032B30F8 LDR X0, [X8]
	0x032B30FC BL 0x1C16F10
	0x032B3100 MOV X1, X31
	0x032B3104 MOV X21, X0
	0x032B3108 BL 0x33BDD8C
	0x032B310C STR X21, [X19 + 0x98]
	0x032B3110 CBZ X20, 0x32B3148
	0x032B3114 LDRB W8, [X20 + 0x3A]
	0x032B3118 CBNZ W8, 0x32B313C
	0x032B311C CBZ X21, 0x32B3148
	0x032B3120 MOVZ W8, 0x1
	0x032B3124 STR W8, [X21 + 0x10]
	0x032B3128 CBZ X21, 0x32B3148
	0x032B312C MOV X0, X21
	0x032B3130 MOV X1, X19
	0x032B3134 BL 0x32AE080
	0x032B3138 STR W31, [X19 + 0x3C]
	0x032B313C LDP X20, X19, [X31 + 0x10]
	0x032B3140 LDP X30, X21, [X31], #0x20
	0x032B3144 RET
	0x032B3148 BL 0x1C16F20
	0x032B314C STR X30, [X31 - 0x30]!
	0x032B3150 STP X22, X21, [X31 + 0x10]
	0x032B3154 STP X20, X19, [X31 + 0x20]
	0x032B3158 ADRP X22, 0x1129000
	0x032B315C LDRB W8, [X22 + 0x7F8]
	0x032B3160 MOV W21, W2
	0x032B3164 MOV X20, X1
	0x032B3168 MOV X19, X0
	0x032B316C TBNZ X8, 0x0, 0x32B3184
	0x032B3170 ADRP X0, 0xE72000
	0x032B3174 LDR X0, [X0 + 0x320]
	0x032B3178 BL 0x1C16CF4
	0x032B317C MOVZ W8, 0x1
	0x032B3180 STRB W8, [X22 + 0x7F8]
	0x032B3184 MOV X0, X19
	0x032B3188 BL 0x32B25B4
	0x032B318C LDR X22, [X19 + 0xA0]
	0x032B3190 CBNZ X22, 0x32B31B8
	0x032B3194 ADRP X8, 0xE72000
	0x032B3198 LDR X8, [X8 + 0x320]
	0x032B319C LDR X0, [X8]
	0x032B31A0 BL 0x1C16F10
	0x032B31A4 MOV X1, X31
	0x032B31A8 MOV X22, X0
	0x032B31AC BL 0x33BDD8C
	0x032B31B0 STR X22, [X19 + 0xA0]
	0x032B31B4 CBZ X22, 0x32B31DC
	0x032B31B8 STR W21, [X22 + 0x10]
	0x032B31BC CBZ X20, 0x32B31DC
	0x032B31C0 CBZ X22, 0x32B31DC
	0x032B31C4 MOV X0, X22
	0x032B31C8 MOV X1, X19
	0x032B31CC LDP X20, X19, [X31 + 0x20]
	0x032B31D0 LDP X22, X21, [X31 + 0x10]
	0x032B31D4 LDR X30, [X31], #0x30
	0x032B31D8 B 0x32ADFE4
	0x032B31DC BL 0x1C16F20
	0x032B31E0 STP X30, X19, [X31 - 0x10]!
	0x032B31E4 MOV X19, X1
	0x032B31E8 BL 0x32B25B4
	0x032B31EC CBZ X19, 0x32B31F8
	0x032B31F0 LDP X30, X19, [X31], #0x10
	0x032B31F4 RET
	0x032B31F8 BL 0x1C16F20
	0x032B31FC STR X30, [X31 - 0x30]!
	0x032B3200 STP X22, X21, [X31 + 0x10]
	0x032B3204 STP X20, X19, [X31 + 0x20]
	0x032B3208 MOV X19, X3
	0x032B320C MOV X20, X2
	0x032B3210 MOV X22, X1
	0x032B3214 MOV X21, X0
	0x032B3218 BL 0x32B25B4
	0x032B321C CBZ X22, 0x32B3240
	0x032B3220 CBZ X20, 0x32B3240
	0x032B3224 LDR W1, [X20 + 0x18]
	0x032B3228 MOV X0, X21
	0x032B322C MOV X2, X19
	0x032B3230 LDP X20, X19, [X31 + 0x20]
	0x032B3234 LDP X22, X21, [X31 + 0x10]
	0x032B3238 LDR X30, [X31], #0x30
	0x032B323C B 0x32B27C0
	0x032B3240 BL 0x1C16F20
	0x032B3244 STR X30, [X31 - 0x30]!
	0x032B3248 STP X22, X21, [X31 + 0x10]
	0x032B324C STP X20, X19, [X31 + 0x20]
	0x032B3250 MOV X19, X3
	0x032B3254 MOV X20, X2
	0x032B3258 MOV X21, X1
	0x032B325C MOV X22, X0
	0x032B3260 BL 0x32B25B4
	0x032B3264 MOV X0, X22
	0x032B3268 MOV X1, X21
	0x032B326C MOV X2, X20
	0x032B3270 MOV X3, X19
	0x032B3274 LDP X20, X19, [X31 + 0x20]
	0x032B3278 LDP X22, X21, [X31 + 0x10]
	0x032B327C LDR X30, [X31], #0x30
	0x032B3280 B 0x32B2FA8
	0x032B3284 LDR W8, [X0 + 0x3C]
	0x032B3288 ADD W8, W8, 0x1
	0x032B328C STR W8, [X0 + 0x3C]
	0x032B3290 B 0x32B25B4
	0x032B3294 LDR W8, [X0 + 0x3C]
	0x032B3298 ADD W8, W8, 0x1
	0x032B329C STR W8, [X0 + 0x3C]
	0x032B32A0 RET
	0x032B32A4 B 0x32B25B4
	0x032B32A8 STP X30, X21, [X31 - 0x20]!
	0x032B32AC STP X20, X19, [X31 + 0x10]
	0x032B32B0 MOV W19, W2
	0x032B32B4 MOV X20, X1
	0x032B32B8 MOV X21, X0
	0x032B32BC BL 0x32B25B4
	0x032B32C0 MOV X1, X20
	0x032B32C4 MOV W2, W19
	0x032B32C8 LDP X20, X19, [X31 + 0x10]
	0x032B32CC MOV X0, X21
	0x032B32D0 LDP X30, X21, [X31], #0x20
	0x032B32D4 B 0x32B314C
	0x032B32D8 STP X30, X23, [X31 - 0x30]!
	0x032B32DC STP X22, X21, [X31 + 0x10]
	0x032B32E0 STP X20, X19, [X31 + 0x20]
	0x032B32E4 ADRP X23, 0x1129000
	0x032B32E8 LDRB W8, [X23 + 0x7FA]
	0x032B32EC MOV W22, W4
	0x032B32F0 MOV W20, W3
	0x032B32F4 MOV X21, X2
	0x032B32F8 MOV X19, X0
	0x032B32FC TBNZ X8, 0x0, 0x32B3320
	0x032B3300 ADRP X0, 0xE72000
	0x032B3304 LDR X0, [X0 + 0x328]
	0x032B3308 BL 0x1C16CF4
	0x032B330C ADRP X0, 0xE42000
	0x032B3310 LDR X0, [X0 + 0x278]
	0x032B3314 BL 0x1C16CF4
	0x032B3318 MOVZ W8, 0x1
	0x032B331C STRB W8, [X23 + 0x7FA]
	0x032B3320 MOV X0, X19
	0x032B3324 BL 0x32B25B4
	0x032B3328 CBZ X21, 0x32B3380
	0x032B332C TBZ X22, 0x0, 0x32B3398
	0x032B3330 LDR X22, [X19 + 0xA8]
	0x032B3334 CBNZ X22, 0x32B335C
	0x032B3338 ADRP X8, 0xE72000
	0x032B333C LDR X8, [X8 + 0x328]
	0x032B3340 LDR X0, [X8]
	0x032B3344 BL 0x1C16F10
	0x032B3348 MOV X1, X31
	0x032B334C MOV X22, X0
	0x032B3350 BL 0x33BDD8C
	0x032B3354 STR X22, [X19 + 0xA8]
	0x032B3358 CBZ X22, 0x32B33A8
	0x032B335C STR W20, [X22 + 0x10]
	0x032B3360 STR X21, [X22 + 0x18]
	0x032B3364 CBZ X22, 0x32B33A8
	0x032B3368 MOV X0, X22
	0x032B336C MOV X1, X19
	0x032B3370 LDP X20, X19, [X31 + 0x20]
	0x032B3374 LDP X22, X21, [X31 + 0x10]
	0x032B3378 LDP X30, X23, [X31], #0x30
	0x032B337C B 0x32AC4BC
	0x032B3380 ADRP X8, 0xE42000
	0x032B3384 LDR X8, [X8 + 0x278]
	0x032B3388 LDR X8, [X8]
	0x032B338C LDR X8, [X8 + 0xB8]
	0x032B3390 LDR X21, [X8]
	0x032B3394 TBNZ X22, 0x0, 0x32B3330
	0x032B3398 LDP X20, X19, [X31 + 0x20]
	0x032B339C LDP X22, X21, [X31 + 0x10]
	0x032B33A0 LDP X30, X23, [X31], #0x30
	0x032B33A4 RET
	0x032B33A8 BL 0x1C16F20
	0x032B33AC MOV X1, X31
	0x032B33B0 B 0x33BDD8C
	0x032B33B4 MOV X1, X0
	0x032B33B8 LDR X0, [X0 + 0x60]
	0x032B33BC B 0x32B33C0
	0x032B33C0 STR X30, [X31 - 0x10]!
	0x032B33C4 CBZ X0, 0x32B33DC
	0x032B33C8 LDR X0, [X0 + 0x20]
	0x032B33CC CBZ X0, 0x32B33DC
	0x032B33D0 MOV X2, X31
	0x032B33D4 LDR X30, [X31], #0x10
	0x032B33D8 B 0x32BD7AC
	0x032B33DC BL 0x1C16F20
	0x032B33E0 MOVI V0.2D, 0x0
	0x032B33E4 STP X31, X31, [X0 + 0x18]
	0x032B33E8 STR W31, [X0 + 0x28]
	0x032B33EC STP X31, X31, [X0 + 0x38]
	0x032B33F0 STR X31, [X0 + 0x30]
	0x032B33F4 STUR V0, [X0 + 0x68]
	0x032B33F8 STUR V0, [X0 + 0x78]
	0x032B33FC RET
	0x032B3400 SUB X31, X31, 0x60
	0x032B3404 STP X30, X27, [X31 + 0x10]
	0x032B3408 STP X26, X25, [X31 + 0x20]
	0x032B340C STP X24, X23, [X31 + 0x30]
	0x032B3410 STP X22, X21, [X31 + 0x40]
	0x032B3414 STP X20, X19, [X31 + 0x50]
	0x032B3418 MOV X27, X0
	0x032B341C MOV X0, X4
	0x032B3420 MOV X23, X7
	0x032B3424 MOV X19, X6
	0x032B3428 MOV X20, X5
	0x032B342C MOV X21, X4
	0x032B3430 MOV X22, X3
	0x032B3434 MOV X24, X2
	0x032B3438 MOV X26, X1
	0x032B343C BL 0x32B3490
	0x032B3440 CBZ X0, 0x32B348C
	0x032B3444 MOV X1, X27
	0x032B3448 MOV X2, X26
	0x032B344C MOV X3, X24
	0x032B3450 MOV X4, X22
	0x032B3454 MOV X5, X21
	0x032B3458 MOV X6, X20
	0x032B345C MOV X7, X19
	0x032B3460 MOV X25, X0
	0x032B3464 STR X23, [X31]
	0x032B3468 BL 0x32B3570
	0x032B346C MOV X0, X25
	0x032B3470 LDP X20, X19, [X31 + 0x50]
	0x032B3474 LDP X22, X21, [X31 + 0x40]
	0x032B3478 LDP X24, X23, [X31 + 0x30]
	0x032B347C LDP X26, X25, [X31 + 0x20]
	0x032B3480 LDP X30, X27, [X31 + 0x10]
	0x032B3484 ADD X31, X31, 0x60
	0x032B3488 RET
	0x032B348C BL 0x1C16F20
	0x032B3490 STR X30, [X31 - 0x20]!
	0x032B3494 STP X20, X19, [X31 + 0x10]
	0x032B3498 ADRP X19, 0x1129000
	0x032B349C LDRB W8, [X19 + 0x804]
	0x032B34A0 MOV X20, X0
	0x032B34A4 TBNZ X8, 0x0, 0x32B34BC
	0x032B34A8 ADRP X0, 0xE72000
	0x032B34AC LDR X0, [X0 + 0x270]
	0x032B34B0 BL 0x1C16CF4
	0x032B34B4 MOVZ W8, 0x1
	0x032B34B8 STRB W8, [X19 + 0x804]
	0x032B34BC CBZ X20, 0x32B3564
	0x032B34C0 LDR X0, [X20 + 0x20]
	0x032B34C4 CBZ X0, 0x32B3564
	0x032B34C8 MOV X1, X31
	0x032B34CC BL 0x32BD9B4
	0x032B34D0 TBZ X0, 0x0, 0x32B3508
	0x032B34D4 ADRP X8, 0xE72000
	0x032B34D8 LDR X8, [X8 + 0x270]
	0x032B34DC LDR X0, [X8]
	0x032B34E0 BL 0x1C16F10
	0x032B34E4 MOV X1, X31
	0x032B34E8 MOV X19, X0
	0x032B34EC BL 0x33BDD8C
	0x032B34F0 LDR W8, [X20 + 0x18]
	0x032B34F4 ADD W9, W8, 0x1
	0x032B34F8 STR W9, [X20 + 0x18]
	0x032B34FC CBZ X19, 0x32B3564
	0x032B3500 STR W8, [X19 + 0x10]
	0x032B3504 B 0x32B3554
	0x032B3508 LDR X0, [X20 + 0x20]
	0x032B350C CBZ X0, 0x32B3564
	0x032B3510 MOV X1, X31
	0x032B3514 BL 0x32BD8E0
	0x032B3518 CBZ X0, 0x32B3564
	0x032B351C ADRP X8, 0xE72000
	0x032B3520 LDR X8, [X8 + 0x270]
	0x032B3524 MOV X19, X0
	0x032B3528 LDR X1, [X8]
	0x032B352C LDR X8, [X0]
	0x032B3530 CMP X8, X1
	0x032B3534 B.NE 0x32B3568
	0x032B3538 MOVI V0.2D, 0x0
	0x032B353C STP X31, X31, [X19 + 0x18]
	0x032B3540 STR W31, [X19 + 0x28]
	0x032B3544 STP X31, X31, [X19 + 0x38]
	0x032B3548 STR X31, [X19 + 0x30]
	0x032B354C STUR V0, [X19 + 0x68]
	0x032B3550 STUR V0, [X19 + 0x78]
	0x032B3554 MOV X0, X19
	0x032B3558 LDP X20, X19, [X31 + 0x10]
	0x032B355C LDR X30, [X31], #0x20
	0x032B3560 RET
	0x032B3564 BL 0x1C16F20
	0x032B3568 MOV X0, X19
	0x032B356C BL 0x1C171E0
	0x032B3570 SUB X31, X31, 0x60
	0x032B3574 STP X30, X27, [X31 + 0x10]
	0x032B3578 STP X26, X25, [X31 + 0x20]
	0x032B357C STP X24, X23, [X31 + 0x30]
	0x032B3580 STP X22, X21, [X31 + 0x40]
	0x032B3584 STP X20, X19, [X31 + 0x50]
	0x032B3588 ADRP X27, 0x1129000
	0x032B358C LDRB W8, [X27 + 0x7FD]
	0x032B3590 MOV X25, X7
	0x032B3594 MOV X23, X6
	0x032B3598 MOV X26, X5
	0x032B359C MOV X20, X4
	0x032B35A0 MOV X21, X3
	0x032B35A4 MOV X24, X2
	0x032B35A8 MOV X22, X1
	0x032B35AC MOV X19, X0
	0x032B35B0 TBNZ X8, 0x0, 0x32B35F8

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+96], X29
	003 Move [X31+104], X30
	004 Move [X31+112], X28
	005 Move [X31+120], X27
	006 Move [X31+128], X26
	007 Move [X31+136], X25
	008 Move [X31+144], X24
	009 Move [X31+152], X23
	010 Move [X31+160], X22
	011 Move [X31+168], X21
	012 Move [X31+176], X20
	013 Move [X31+184], X19
	014 Move X19, 0x112A000
	015 Move W8, [X19+2032]
	016 Move X20, X5
	017 Move X21, X4
	018 Move W22, W3
	019 Move X28, X2
	020 Move X23, X1
	021 Move X24, X0
	022 Move [X31+72], X6
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {53}
	027 Move X0, 0xE73000
	028 Move X0, [X0+728]
	029 Call 0x1C17CF4
	030 Move X0, 0xE73000
	031 Move X0, [X0+736]
	032 Call 0x1C17CF4
	033 Move X0, 0xE73000
	034 Move X0, [X0+744]
	035 Call 0x1C17CF4
	036 Move X0, 0xE73000
	037 Move X0, [X0+16]
	038 Call 0x1C17CF4
	039 Move X0, 0xE71000
	040 Move X0, [X0+3512]
	041 Call 0x1C17CF4
	042 Move X0, 0xE42000
	043 Move X0, [X0+3672]
	044 Call 0x1C17CF4
	045 Move X0, 0xE73000
	046 Move X0, [X0+752]
	047 Call 0x1C17CF4
	048 Move X0, 0xE41000
	049 Move X0, [X0+2512]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X19+2032], W8
	053 Move X0, X24
	054 Move [X31+92], W31
	055 Call __BinaryWriter.InternalWriteItemNull, X0
	056 Compare X23, 0
	057 JumpIfEqual {344}
	058 Move W27, [X23+24]
	059 Move TEMP, X27
	060 And TEMP, TEMP, -2147483648
	061 Compare TEMP, -2147483648
	062 JumpIfNotEqual {66}
	063 Move X23, X28
	064 Compare X28, 0
	065 JumpIfEqual {344}
	066 Move X0, X23
	067 Move X1, X31
	068 Call NameInfo.get_NIname, X0
	069 Move X25, [X24+32]
	070 Move X19, X0
	071 Compare X25, 0
	072 JumpIfNotEqual {83}
	073 Move X8, 0xE71000
	074 Move X8, [X8+3512]
	075 Move X0, [X8]
	076 Call 0x1C17F10
	077 Move X1, X31
	078 Move X25, X0
	079 Call Hashtable..ctor, X0
	080 Move [X24+32], X25
	081 Compare X25, 0
	082 JumpIfEqual {344}
	083 Move X8, [X25]
	084 Move X29, 0xE73000
	085 Move X0, X25
	086 Move X1, X19
	087 Move X9, [X8+728]
	088 Move X2, [X8+736]
	089 Move X29, [X29+752]
	090 NotImplemented "Instruction BLR not yet implemented."
	091 Move X25, X0
	092 Compare X0, 0
	093 JumpIfEqual {125}
	094 Move X1, [X29]
	095 Move X8, [X25]
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Move X0, X25
	098 Move W1, W22
	099 Move X2, X21
	100 Move X3, X20
	101 Call ObjectMapInfo.isCompatible, X0, X1, X2, X3
	102 Move TEMP, X0
	103 And TEMP, TEMP, 1
	104 Compare TEMP, 1
	105 JumpIfNotEqual {125}
	106 Move X19, [X24+80]
	107 Compare X19, 0
	108 JumpIfNotEqual {119}
	109 Move X8, 0xE73000
	110 Move X8, [X8+744]
	111 Move X0, [X8]
	112 Call 0x1C17F10
	113 Move X1, X31
	114 Move X19, X0
	115 Call Object..ctor, X0
	116 Move [X24+80], X19
	117 Compare X19, 0
	118 JumpIfEqual {344}
	119 Move W8, [X25+16]
	120 Move X0, X19
	121 Move X1, X24
	122 Move [X19+16], W27
	123 Move [X19+20], W8
	124 Call BinaryObject.Write, X0, X1
	125 Compare X28, 0
	126 JumpIfEqual {344}
	127 Move W8, [X28+59]
	128 Compare W8, 0
	129 JumpIfEqual {224}
	130 Move [X31+8], X25
	131 Move [X31+24], X28
	132 Move [X31+32], X21
	133 Move [X31+40], X19
	134 Move [X31+20], W27
	135 Move [X31+64], X24
	136 Move X8, 0xE73000
	137 Move X8, [X8+16]
	138 Move W1, W22
	139 Move X0, [X8]
	140 Call 0x1C17D6C
	141 Move X8, 0xE41000
	142 Move X8, [X8+2512]
	143 Move X27, X0
	144 Move W1, W22
	145 Move X8, [X8]
	146 Move X0, X8
	147 Call 0x1C17D6C
	148 Move X8, 0xE42000
	149 Move X8, [X8+3672]
	150 Move X28, X0
	151 Move W1, W22
	152 Move X8, [X8]
	153 Move X0, X8
	154 Call 0x1C17D6C
	155 Move X9, [X31+72]
	156 NotImplemented "Instruction CMP not yet implemented."
	157 Move X29, X0
	158 Move [X31+52], W22
	159 Move W8, [X31+52]
	160 Move X23, X31
	161 Add X24, X20, 32
	162 Add X25, X9, 32
	163 Move W8, W8
	164 Add X22, X27, 32
	165 Add X19, X28, 32
	166 Add X26, X29, 32
	167 Move [X31+56], X8
	168 Move [X31+80], X31
	169 Compare X20, 0
	170 JumpIfEqual {344}
	171 Move W8, [X20+24]
	172 NotImplemented "Instruction CMP not yet implemented."
	173 Compare X9, 0
	174 JumpIfEqual {344}
	175 Move W8, [X9+24]
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Move X8, [X31+64]
	178 Move X0, [X24]
	179 Move X1, [X25]
	180 Add X4, X31, 80
	181 Move X3, [X8+40]
	182 Add X5, X31, 92
	183 Call BinaryConverter.GetBinaryTypeInfo, X0, X1, X2, X3, X4, X5
	184 Compare X27, 0
	185 JumpIfEqual {344}
	186 Move W8, [X27+24]
	187 NotImplemented "Instruction CMP not yet implemented."
	188 Move [X22], W0
	189 Compare X28, 0
	190 JumpIfEqual {344}
	191 Move X21, X20
	192 Move X20, [X31+80]
	193 Compare X20, 0
	194 JumpIfEqual {201}
	195 Move X8, [X28]
	196 Move X0, X20
	197 Move X1, [X8+64]
	198 Call 0x1C17E00
	199 Compare X0, 0
	200 JumpIfEqual {346}
	201 Move W8, [X28+24]
	202 NotImplemented "Instruction CMP not yet implemented."
	203 Move [X19], X20
	204 Compare X29, 0
	205 JumpIfEqual {344}
	206 Move W8, [X29+24]
	207 NotImplemented "Instruction CMP not yet implemented."
	208 Move W8, [X31+92]
	209 Move X9, [X31+72]
	210 Move X20, X21
	211 Move [X26], W8
	212 Move X8, [X31+56]
	213 Add X23, X23, 1
	214 NotImplemented "Instruction CMP not yet implemented."
	215 Move X22, [X31+64]
	216 Move X26, [X22+96]
	217 Compare X26, 0
	218 JumpIfEqual {229}
	219 Move X8, [X31+24]
	220 Move X19, [X31+32]
	221 Move W21, [X31+52]
	222 Move W8, [X8+32]
	223 Move [X31+92], W8
	224 Move X26, [X24+88]
	225 Compare X26, 0
	226 JumpIfEqual {281}
	227 Move W8, [X28+32]
	228 Move [X31+92], W8
	229 Move X8, 0xE73000
	230 Move X8, [X8+728]
	231 Move X0, [X8]
	232 Call 0x1C17F10
	233 Move X1, X31
	234 Move X26, X0
	235 Call Object..ctor, X0
	236 Move X8, [X31+24]
	237 Move X19, [X31+32]
	238 Move [X22+96], X26
	239 Move W21, [X31+52]
	240 Move W8, [X8+32]
	241 Move [X31+92], W8
	242 Compare X26, 0
	243 JumpIfEqual {344}
	244 Move X9, [X31+40]
	245 Move W23, [X31+20]
	246 Move [X26+72], W8
	247 NotImplemented "Instruction CMP not yet implemented."
	248 Move W8, 4
	249 NotImplemented "Instruction CINC not yet implemented."
	250 Move X0, X26
	251 Move X1, X22
	252 Move [X26+24], X9
	253 Move [X26+32], W21
	254 Move [X26+40], X19
	255 Move [X26+48], X27
	256 Move [X26+56], X28
	257 Move [X26+64], X29
	258 Move [X26+16], W8
	259 Move [X26+20], W23
	260 Call BinaryObjectWithMapTyped.Write, X0, X1
	261 Move X9, 0xE73000
	262 Move X8, [X31+8]
	263 Move X9, [X9+752]
	264 Compare X8, 0
	265 JumpIfNotEqual {330}
	266 Move X0, [X9]
	267 Move X22, [X22+32]
	268 Call 0x1C17F10
	269 Move X1, X31
	270 Move X24, X0
	271 Call Object..ctor, X0
	272 Move [X24+16], W23
	273 Move [X24+20], W21
	274 Move [X24+24], X19
	275 Move [X24+32], X20
	276 Compare X22, 0
	277 JumpIfEqual {344}
	278 Move X8, [X22]
	279 Move X1, [X31+40]
	280 Move X0, X22
	281 Move X8, 0xE73000
	282 Move X8, [X8+736]
	283 Move X0, [X8]
	284 Call 0x1C17F10
	285 Move X1, X31
	286 Move X26, X0
	287 Call Object..ctor, X0
	288 Move [X24+88], X26
	289 Move W8, [X28+32]
	290 Move [X31+92], W8
	291 Compare X26, 0
	292 JumpIfEqual {344}
	293 Move [X26+48], W8
	294 NotImplemented "Instruction CMP not yet implemented."
	295 Move W8, 2
	296 NotImplemented "Instruction CINC not yet implemented."
	297 Move [X26+24], X19
	298 Move [X26+32], W22
	299 Move [X26+40], X21
	300 Move [X26+16], W8
	301 Move [X26+20], W27
	302 Compare X26, 0
	303 JumpIfEqual {344}
	304 Move X0, X26
	305 Move X1, X24
	306 Move X23, X19
	307 Call BinaryObjectWithMap.Write, X0, X1
	308 Compare X25, 0
	309 JumpIfNotEqual {330}
	310 Move X0, [X29]
	311 Move W19, W22
	312 Move X22, [X24+32]
	313 Call 0x1C17F10
	314 Move X1, X31
	315 Move X24, X0
	316 Call Object..ctor, X0
	317 Move [X24+16], W27
	318 Move [X24+20], W19
	319 Move [X24+24], X21
	320 Move [X24+32], X20
	321 Compare X22, 0
	322 JumpIfEqual {344}
	323 Move X8, [X22]
	324 Move X0, X22
	325 Move X1, X23
	326 Move X9, [X8+632]
	327 Move X3, [X8+640]
	328 Move X2, X24
	329 NotImplemented "Instruction BLR not yet implemented."
	330 Move X20, [X31+176]
	331 Move X19, [X31+184]
	332 Move X22, [X31+160]
	333 Move X21, [X31+168]
	334 Move X24, [X31+144]
	335 Move X23, [X31+152]
	336 Move X26, [X31+128]
	337 Move X25, [X31+136]
	338 Move X28, [X31+112]
	339 Move X27, [X31+120]
	340 Move X29, [X31+96]
	341 Move X30, [X31+104]
	342 Add X31, X31, 192
	343 Return 
	344 Call 0x1C17F20
	345 Call 0x1C17F28
	346 Call 0x1C17F44
	347 Move X1, X31
	348 Call 0x1C17DEC
	349 Move X0, X25
	350 Call 0x1C181E0

Method: System.Void WriteObjectString(System.Int32 objectId, System.String value)

Disassembly:
	0x032B37C0 ADRP X8, 0xE71000
	0x032B37C4 LDR X8, [X8 + 0xB70]
	0x032B37C8 LDR X25, [X19 + 0x20]
	0x032B37CC LDR X0, [X8]
	0x032B37D0 LDR W8, [X0 + 0xE0]
	0x032B37D4 CBNZ W8, 0x32B37DC
	0x032B37D8 BL 0x1C16DFC
	0x032B37DC MOV X0, X31
	0x032B37E0 BL 0x32A1A28
	0x032B37E4 ADRP X8, 0xE72000
	0x032B37E8 LDR X8, [X8 + 0x50]
	0x032B37EC MOV W26, W0
	0x032B37F0 LDR X8, [X8]
	0x032B37F4 MOV X0, X8
	0x032B37F8 BL 0x1C16F10
	0x032B37FC ORN W8, W31, W26, 0x0
	0x032B3800 AND W3, W8, 0x1
	0x032B3804 MOV X1, X25
	0x032B3808 MOV X2, X23
	0x032B380C MOV X24, X0
	0x032B3810 BL 0x32A8324
	0x032B3814 STR X24, [X19 + 0x30]
	0x032B3818 LDR X23, [X27]
	0x032B381C MOV X0, X22
	0x032B3820 MOV X1, X23
	0x032B3824 BL 0x1C16E00
	0x032B3828 CBZ X0, 0x32B3A34
	0x032B382C LDR X25, [X27]
	0x032B3830 MOV X0, X22
	0x032B3834 MOV X1, X25
	0x032B3838 BL 0x1C16E00
	0x032B383C CBZ X0, 0x32B3A40
	0x032B3840 LDR X8, [X0]
	0x032B3844 MOV X23, X0
	0x032B3848 LDRH W9, [X8 + 0x12E]
	0x032B384C CBZ X9, 0x32B3870

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x112A000
	007 Move W8, [X22+2033]
	008 Move X19, X2
	009 Move W20, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xE73000
	016 Move X0, [X0+768]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+2033], W8
	020 Move X0, X21
	021 Call __BinaryWriter.InternalWriteItemNull, X0
	022 Move X22, [X21+104]
	023 Compare X22, 0
	024 JumpIfNotEqual {35}
	025 Move X8, 0xE73000
	026 Move X8, [X8+768]
	027 Move X0, [X8]
	028 Call 0x1C17F10
	029 Move X1, X31
	030 Move X22, X0
	031 Call Object..ctor, X0
	032 Move [X21+104], X22
	033 Compare X22, 0
	034 JumpIfEqual {46}
	035 Move [X22+16], W20
	036 Move [X22+24], X19
	037 Move X0, X22
	038 Move X1, X21
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Call BinaryObjectString.Write, X0, X1
	045 Return 
	046 Call 0x1C17F20

Method: System.Void WriteSingleArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, System.Int32 length, System.Int32 lowerBound, System.Array array)

Disassembly:
	0x032B3850 LDR X10, [X8 + 0xB0]
	0x032B3854 ADD X10, X10, 0x8
	0x032B3858 LDUR X11, [X10 - 0x8]
	0x032B385C CMP X11, X25
	0x032B3860 B.EQ 0x32B3890
	0x032B3864 SUBS X9, X9, 0x1
	0x032B3868 ADD X10, X10, 0x10
	0x032B386C B.NE 0x32B3858
	0x032B3870 MOV X0, X23
	0x032B3874 MOV X1, X25
	0x032B3878 MOV W2, W31
	0x032B387C BL 0x1C5C788
	0x032B3880 B 0x32B389C
	0x032B3884 MOV X0, X19
	0x032B3888 BL 0x32B3F80
	0x032B388C B 0x32B38BC
	0x032B3890 LDRSW X9, [X10]
	0x032B3894 ADD X8, X8, X9, 0x4, LSL
	0x032B3898 ADD X0, X8, 0x138
	0x032B389C LDP X8, X4, [X0]
	0x032B38A0 MOV X0, X23
	0x032B38A4 MOV X1, X24
	0x032B38A8 MOV X2, X21
	0x032B38AC MOV X3, X20
	0x032B38B0 BLR X8
	0x032B38B4 MOV X0, X19
	0x032B38B8 BL 0x32B3B54
	0x032B38BC LDR X0, [X19 + 0x38]
	0x032B38C0 LDR X1, [X19 + 0x20]
	0x032B38C4 LDR X2, [X19 + 0x80]
	0x032B38C8 BL 0x32B3E2C
	0x032B38CC B 0x32B3900
	0x032B38D0 LDRSW X9, [X10]
	0x032B38D4 ADD X8, X8, X9, 0x4, LSL
	0x032B38D8 ADD X0, X8, 0x138
	0x032B38DC LDP X8, X5, [X0]
	0x032B38E0 MOV X0, X23
	0x032B38E4 MOV X1, X22
	0x032B38E8 MOV X2, X24
	0x032B38EC MOV X3, X21
	0x032B38F0 MOV X4, X20
	0x032B38F4 BLR X8
	0x032B38F8 MOV X0, X19
	0x032B38FC BL 0x32B3B54
	0x032B3900 LDP X20, X19, [X31 + 0x50]
	0x032B3904 LDP X22, X21, [X31 + 0x40]
	0x032B3908 LDP X24, X23, [X31 + 0x30]
	0x032B390C LDP X26, X25, [X31 + 0x20]
	0x032B3910 LDP X30, X27, [X31 + 0x10]
	0x032B3914 ADD X31, X31, 0x60
	0x032B3918 RET
	0x032B391C BL 0x1C16F20
	0x032B3920 ADRP X0, 0xE40000
	0x032B3924 LDR X0, [X0 + 0x9D0]
	0x032B3928 BL 0x1C16D08
	0x032B392C MOVZ W1, 0x2
	0x032B3930 BL 0x1C16D6C
	0x032B3934 LDR X21, [X19 + 0x20]
	0x032B3938 MOV X20, X0
	0x032B393C MOV X0, X21
	0x032B3940 BL 0x19903C0
	0x032B3944 LDR X8, [X21]
	0x032B3948 MOV X0, X21
	0x032B394C LDR X9, [X8 + 0x2E8]
	0x032B3950 LDR X1, [X8 + 0x2F0]
	0x032B3954 BLR X9
	0x032B3958 MOV X21, X0
	0x032B395C MOV X0, X20
	0x032B3960 BL 0x19903C0
	0x032B3964 MOV X0, X20
	0x032B3968 MOV X1, X21
	0x032B396C BL 0x19980B4
	0x032B3970 MOV X0, X20
	0x032B3974 MOV X1, X31
	0x032B3978 MOV X2, X21
	0x032B397C BL 0x1993444
	0x032B3980 LDR X19, [X19 + 0x20]
	0x032B3984 MOV X0, X19
	0x032B3988 BL 0x19903C0
	0x032B398C LDR X8, [X19]
	0x032B3990 MOV X0, X19
	0x032B3994 LDR X9, [X8 + 0x2F8]
	0x032B3998 LDR X1, [X8 + 0x300]
	0x032B399C BLR X9
	0x032B39A0 MOV X19, X0
	0x032B39A4 BL 0x19903C0
	0x032B39A8 LDR X8, [X19]
	0x032B39AC MOV X0, X19
	0x032B39B0 LDP X9, X1, [X8 + 0x1B8]
	0x032B39B4 BLR X9
	0x032B39B8 MOV X19, X0
	0x032B39BC MOV X0, X20
	0x032B39C0 BL 0x19903C0
	0x032B39C4 MOV X0, X20
	0x032B39C8 MOV X1, X19
	0x032B39CC BL 0x19980B4
	0x032B39D0 MOVZ W1, 0x1
	0x032B39D4 MOV X0, X20
	0x032B39D8 MOV X2, X19
	0x032B39DC BL 0x1993444
	0x032B39E0 ADRP X0, 0xE71000
	0x032B39E4 LDR X0, [X0 + 0xBC0]
	0x032B39E8 BL 0x1C16D08
	0x032B39EC MOV X1, X20
	0x032B39F0 MOV X2, X31
	0x032B39F4 BL 0x33BFB40
	0x032B39F8 MOV X19, X0
	0x032B39FC ADRP X0, 0xE6A000
	0x032B3A00 LDR X0, [X0 + 0x2E0]
	0x032B3A04 BL 0x1C16D08
	0x032B3A08 BL 0x1C16F10
	0x032B3A0C MOV X1, X19
	0x032B3A10 MOV X2, X31
	0x032B3A14 MOV X20, X0
	0x032B3A18 BL 0x329F100
	0x032B3A1C ADRP X0, 0xE72000
	0x032B3A20 LDR X0, [X0 + 0x330]
	0x032B3A24 BL 0x1C16D08
	0x032B3A28 MOV X1, X0
	0x032B3A2C MOV X0, X20
	0x032B3A30 BL 0x1C16DEC
	0x032B3A34 MOV X0, X22
	0x032B3A38 MOV X1, X23
	0x032B3A3C BL 0x1C171E0
	0x032B3A40 MOV X0, X22
	0x032B3A44 MOV X1, X25
	0x032B3A48 BL 0x1C171E0
	0x032B3A4C STP X30, X21, [X31 - 0x20]!
	0x032B3A50 STP X20, X19, [X31 + 0x10]
	0x032B3A54 ADRP X20, 0x1129000
	0x032B3A58 LDRB W8, [X20 + 0x801]
	0x032B3A5C MOV X19, X0
	0x032B3A60 TBNZ X8, 0x0, 0x32B3A78
	0x032B3A64 ADRP X0, 0xE72000
	0x032B3A68 LDR X0, [X0 + 0x338]
	0x032B3A6C BL 0x1C16CF4
	0x032B3A70 MOVZ W8, 0x1
	0x032B3A74 STRB W8, [X20 + 0x801]
	0x032B3A78 LDR X8, [X19 + 0x60]
	0x032B3A7C CBZ X8, 0x32B3B24
	0x032B3A80 LDR X0, [X8 + 0x10]
	0x032B3A84 CBZ X0, 0x32B3B24
	0x032B3A88 LDR X8, [X0]
	0x032B3A8C LDR X1, [X19 + 0x20]
	0x032B3A90 ADRP X20, 0xE72000
	0x032B3A94 LDR X9, [X8 + 0x2D8]
	0x032B3A98 LDR X2, [X8 + 0x2E0]
	0x032B3A9C LDR X20, [X20 + 0x338]
	0x032B3AA0 BLR X9
	0x032B3AA4 LDR X1, [X20]
	0x032B3AA8 CBZ X0, 0x32B3AD4
	0x032B3AAC LDR X8, [X0]
	0x032B3AB0 CMP X8, X1
	0x032B3AB4 B.NE 0x32B3B28
	0x032B3AB8 STR X0, [X19 + 0x38]
	0x032B3ABC LDR X8, [X0]
	0x032B3AC0 CMP X8, X1
	0x032B3AC4 B.NE 0x32B3B28
	0x032B3AC8 LDP X20, X19, [X31 + 0x10]
	0x032B3ACC LDP X30, X21, [X31], #0x20
	0x032B3AD0 RET
	0x032B3AD4 LDR X21, [X19 + 0x20]
	0x032B3AD8 MOV X0, X1
	0x032B3ADC STR X31, [X19 + 0x38]
	0x032B3AE0 BL 0x1C16F10
	0x032B3AE4 MOV X1, X21
	0x032B3AE8 MOV X20, X0
	0x032B3AEC BL 0x32B45A0
	0x032B3AF0 LDR X8, [X19 + 0x60]
	0x032B3AF4 STR X20, [X19 + 0x38]
	0x032B3AF8 CBZ X8, 0x32B3B24
	0x032B3AFC LDR X0, [X8 + 0x10]
	0x032B3B00 CBZ X0, 0x32B3B24
	0x032B3B04 LDR X8, [X0]
	0x032B3B08 LDR X1, [X19 + 0x20]
	0x032B3B0C MOV X2, X20
	0x032B3B10 LDP X20, X19, [X31 + 0x10]
	0x032B3B14 LDR X4, [X8 + 0x278]
	0x032B3B18 LDR X3, [X8 + 0x280]
	0x032B3B1C LDP X30, X21, [X31], #0x20
	0x032B3B20 BR X4
	0x032B3B24 BL 0x1C16F20
	0x032B3B28 BL 0x1C171E0
	0x032B3B2C CBZ X1, 0x32B3B50

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X25, 0x112A000
	015 Move X27, 0xE42000
	016 Move W8, [X25+2034]
	017 Move X27, [X27+3672]
	018 Move X20, X7
	019 Move W22, W6
	020 Move W26, W5
	021 Move X21, X4
	022 Move X24, X3
	023 Move X23, X2
	024 Move X19, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {46}
	029 Move X0, 0xE73000
	030 Move X0, [X0+776]
	031 Call 0x1C17CF4
	032 Move X0, 0xE41000
	033 Move X0, [X0+1560]
	034 Call 0x1C17CF4
	035 Move X0, 0xE4A000
	036 Move X0, [X0+2264]
	037 Call 0x1C17CF4
	038 Move X0, 0xE72000
	039 Move X0, [X0+3968]
	040 Call 0x1C17CF4
	041 Move X0, 0xE42000
	042 Move X0, [X0+3672]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X25+2034], W8
	046 Move X0, X19
	047 Move [X31+4], W31
	048 Call __BinaryWriter.InternalWriteItemNull, X0
	049 Move X0, [X27]
	050 Move W1, 1
	051 Call 0x1C17D6C
	052 Compare X0, 0
	053 JumpIfEqual {216}
	054 Move W8, [X0+24]
	055 Move X25, X0
	056 Compare W8, 0
	057 JumpIfEqual {217}
	058 Move [X25+32], W26
	059 Move [X31+8], X31
	060 Compare W22, 0
	061 JumpIfEqual {75}
	062 Move X0, [X27]
	063 Move W1, 1
	064 Call 0x1C17D6C
	065 Compare X0, 0
	066 JumpIfEqual {216}
	067 Move W8, [X0+24]
	068 Move X26, X0
	069 Compare W8, 0
	070 JumpIfEqual {217}
	071 Move W29, 3
	072 Move [X26+32], W22
	073 Compare X21, 0
	074 JumpIfNotEqual {79}
	075 Move X26, X31
	076 Move W29, W31
	077 Compare X21, 0
	078 JumpIfEqual {216}
	079 Move X27, [X21+48]
	080 Move X0, X21
	081 Move X1, X31
	082 Call NameInfo.get_NIname, X0
	083 Move X3, [X19+40]
	084 Add X4, X31, 8
	085 Add X5, X31, 4
	086 Move X0, X27
	087 Move X1, X24
	088 Call BinaryConverter.GetBinaryTypeInfo, X0, X1, X2, X3, X4, X5
	089 Move X24, [X19+112]
	090 Move W27, W0
	091 Compare X24, 0
	092 JumpIfNotEqual {101}
	093 Move X8, 0xE73000
	094 Move X8, [X8+776]
	095 Move X0, [X8]
	096 Call 0x1C17F10
	097 Move X1, X31
	098 Move X24, X0
	099 Call Object..ctor, X0
	100 Move [X19+112], X24
	101 Compare X23, 0
	102 JumpIfEqual {216}
	103 Compare X24, 0
	104 JumpIfEqual {216}
	105 Move X28, 0xE72000
	106 Move X28, [X28+3968]
	107 Move W8, [X31+4]
	108 Move X9, [X31+8]
	109 Move X10, [X23+24]
	110 Move W11, 1
	111 Move W12, 7
	112 Move [X24+24], X25
	113 Move [X24+32], X26
	114 Move [X24+40], W27
	115 Move [X24+16], W10
	116 Move [X24+20], W11
	117 Move [X24+48], X9
	118 Move [X24+56], W8
	119 Move [X24+60], W12
	120 Move [X24+64], W29
	121 Compare W22, 0
	122 JumpIfNotEqual {131}
	123 NotImplemented "Instruction CMP not yet implemented."
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Compare W27, 0
	126 JumpIfNotEqual {131}
	127 Move W8, 15
	128 Move W8, 16
	129 Move W8, 17
	130 Move [X24+60], W8
	131 Move X0, X24
	132 Move X1, X19
	133 Call BinaryArray.Write, X0, X1
	134 Move X0, [X28]
	135 Move W23, [X21+40]
	136 Move W8, [X0+224]
	137 Compare W8, 0
	138 JumpIfNotEqual {140}
	139 Call 0x1C17DFC
	140 Move W0, W23
	141 Call Converter.IsWriteAsByteArray, X0
	142 Compare W22, 0
	143 JumpIfNotEqual {202}
	144 Move TEMP, X0
	145 And TEMP, TEMP, 1
	146 Compare TEMP, 1
	147 JumpIfNotEqual {202}
	148 Move W21, [X21+40]
	149 NotImplemented "Instruction CMP not yet implemented."
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Compare X20, 0
	152 JumpIfEqual {187}
	153 Move X8, 0xE41000
	154 Move X8, [X8+1560]
	155 Move X0, X20
	156 Move X21, [X8]
	157 Move X1, X21
	158 Call 0x1C17E00
	159 Move X1, X0
	160 Compare X0, 0
	161 JumpIfNotEqual {188}
	162 Compare X20, 0
	163 JumpIfEqual {194}
	164 Move X8, 0xE4A000
	165 Move X8, [X8+2264]
	166 Move X0, X20
	167 Move X21, [X8]
	168 Move X1, X21
	169 Call 0x1C17E00
	170 Move X1, X0
	171 Compare X0, 0
	172 JumpIfNotEqual {195}
	173 Move X0, X20
	174 Move X1, X21
	175 Call 0x1C181E0
	176 Move X0, [X28]
	177 Move W8, [X0+224]
	178 Compare W8, 0
	179 JumpIfNotEqual {181}
	180 Call 0x1C17DFC
	181 Move W0, W21
	182 Call Converter.TypeLength, X0
	183 Move W2, W0
	184 Move X0, X19
	185 Move X1, X20
	186 Call __BinaryWriter.WriteArrayAsBytes, X0, X1, X2
	187 Move X1, X31
	188 Move X0, [X19+48]
	189 Compare X0, 0
	190 JumpIfEqual {216}
	191 Move X8, [X0]
	192 Move X9, [X8+472]
	193 Move X2, [X8+480]
	194 Move X1, X31
	195 Move X0, [X19+48]
	196 Compare X0, 0
	197 JumpIfEqual {216}
	198 Move X8, [X0]
	199 Move X9, [X8+520]
	200 Move X2, [X8+528]
	201 NotImplemented "Instruction BLR not yet implemented."
	202 Move X20, [X31+96]
	203 Move X19, [X31+104]
	204 Move X22, [X31+80]
	205 Move X21, [X31+88]
	206 Move X24, [X31+64]
	207 Move X23, [X31+72]
	208 Move X26, [X31+48]
	209 Move X25, [X31+56]
	210 Move X28, [X31+32]
	211 Move X27, [X31+40]
	212 Move X29, [X31+16]
	213 Move X30, [X31+24]
	214 Add X31, X31, 112
	215 Return 
	216 Call 0x1C17F20
	217 Call 0x1C17F28

Method: System.Void WriteArrayAsBytes(System.Array array, System.Int32 typeLength)

Disassembly:
	0x032B3B30 LDR X9, [X1]
	0x032B3B34 LDR X8, [X0 + 0x20]
	0x032B3B38 ADD X2, X0, 0x80
	0x032B3B3C ADD X3, X0, 0x78
	0x032B3B40 LDP X5, X4, [X9 + 0x178]
	0x032B3B44 MOV X0, X1
	0x032B3B48 MOV X1, X8
	0x032B3B4C BR X5
	0x032B3B50 RET
	0x032B3B54 STR X30, [X31 - 0x50]!
	0x032B3B58 STP X26, X25, [X31 + 0x10]
	0x032B3B5C STP X24, X23, [X31 + 0x20]
	0x032B3B60 STP X22, X21, [X31 + 0x30]
	0x032B3B64 STP X20, X19, [X31 + 0x40]
	0x032B3B68 ADRP X20, 0x1129000
	0x032B3B6C LDRB W8, [X20 + 0x7FF]
	0x032B3B70 MOV X19, X0
	0x032B3B74 TBNZ X8, 0x0, 0x32B3BBC
	0x032B3B78 ADRP X0, 0xE6C000
	0x032B3B7C LDR X0, [X0 + 0xD0]
	0x032B3B80 BL 0x1C16CF4
	0x032B3B84 ADRP X0, 0xE40000
	0x032B3B88 LDR X0, [X0 + 0x9D0]
	0x032B3B8C BL 0x1C16CF4
	0x032B3B90 ADRP X0, 0xE72000
	0x032B3B94 LDR X0, [X0 + 0x338]
	0x032B3B98 BL 0x1C16CF4
	0x032B3B9C ADRP X0, 0xE40000
	0x032B3BA0 LDR X0, [X0 + 0xAC8]
	0x032B3BA4 BL 0x1C16CF4
	0x032B3BA8 ADRP X0, 0xE48000
	0x032B3BAC LDR X0, [X0 + 0xC60]
	0x032B3BB0 BL 0x1C16CF4
	0x032B3BB4 MOVZ W8, 0x1
	0x032B3BB8 STRB W8, [X20 + 0x7FF]
	0x032B3BBC LDR X0, [X19 + 0x30]
	0x032B3BC0 MOVZ W8, 0x1
	0x032B3BC4 STRB W8, [X19 + 0x28]
	0x032B3BC8 CBZ X0, 0x32B3E18
	0x032B3BCC BL 0x32A8830
	0x032B3BD0 LDR X8, [X19 + 0x30]
	0x032B3BD4 CBZ X8, 0x32B3E18
	0x032B3BD8 LDR W20, [X8 + 0x30]
	0x032B3BDC LDRB W9, [X8 + 0x58]
	0x032B3BE0 LDR X22, [X8 + 0x48]
	0x032B3BE4 CBZ W9, 0x32B3BFC
	0x032B3BE8 LDRB W9, [X8 + 0x59]
	0x032B3BEC LDR X23, [X8 + 0x40]
	0x032B3BF0 CBZ W9, 0x32B3C48
	0x032B3BF4 MOV W24, W31
	0x032B3BF8 B 0x32B3C80
	0x032B3BFC ADRP X9, 0xE6C000
	0x032B3C00 LDR X9, [X9 + 0xD0]
	0x032B3C04 LDR X21, [X8 + 0x50]
	0x032B3C08 LDR X0, [X9]
	0x032B3C0C LDR W9, [X0 + 0xE0]
	0x032B3C10 CBNZ W9, 0x32B3C18
	0x032B3C14 BL 0x1C16DFC
	0x032B3C18 MOV X0, X21
	0x032B3C1C BL 0x32B1848
	0x032B3C20 CBZ X0, 0x32B3E18
	0x032B3C24 LDR X8, [X19 + 0x30]
	0x032B3C28 CBZ X8, 0x32B3E18
	0x032B3C2C LDRB W9, [X0 + 0x20]
	0x032B3C30 LDRB W8, [X8 + 0x59]
	0x032B3C34 LDR X23, [X0 + 0x10]
	0x032B3C38 CMP W9, 0x0
	0x032B3C3C CSET W24, NE
	0x032B3C40 CBNZ W8, 0x32B3C80
	0x032B3C44 B 0x32B3C70
	0x032B3C48 ADRP X9, 0xE6C000
	0x032B3C4C LDR X9, [X9 + 0xD0]
	0x032B3C50 LDR X21, [X8 + 0x50]
	0x032B3C54 LDR X0, [X9]
	0x032B3C58 LDR W9, [X0 + 0xE0]
	0x032B3C5C CBNZ W9, 0x32B3C64
	0x032B3C60 BL 0x1C16DFC
	0x032B3C64 MOV X0, X21
	0x032B3C68 BL 0x32B1848
	0x032B3C6C CBZ X0, 0x32B3E18

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0x112A000
	010 Move W8, [X22+2035]
	011 Move W19, W2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0xE41000
	019 Move X0, [X0+1560]
	020 Call 0x1C17CF4
	021 Move X0, 0xE41000
	022 Move X0, [X0+1448]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+2035], W8
	026 Move X0, X21
	027 Call __BinaryWriter.InternalWriteItemNull, X0
	028 Move X8, [X21+120]
	029 Compare X8, 0
	030 JumpIfNotEqual {37}
	031 Move X8, 0xE41000
	032 Move W1, [X21+128]
	033 Move X8, [X8+1560]
	034 Move X0, [X8]
	035 Call 0x1C17D6C
	036 Move [X21+120], X0
	037 Compare X20, 0
	038 JumpIfEqual {94}
	039 Move X0, X20
	040 Move X1, X31
	041 Call Array.get_Length, X0
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X25, 0xE41000
	044 Move X25, [X25+1448]
	045 Move W24, W31
	046 Move W23, [X21+128]
	047 Move X0, X20
	048 Move X1, X31
	049 Call Array.get_Length, X0
	050 Move X8, [X25]
	051 Move W22, W0
	052 Move W9, [X8+224]
	053 Compare W9, 0
	054 JumpIfNotEqual {57}
	055 Move X0, X8
	056 Call 0x1C17DFC
	057 NotImplemented "Instruction SDIV not yet implemented."
	058 Subtract W1, W22, W24
	059 Move X2, X31
	060 Call Math.Min, X0, X1
	061 Move X2, [X21+120]
	062 Multiply W23, W0, W19
	063 Move W22, W0
	064 Multiply W1, W24, W19
	065 Move X0, X20
	066 Move W3, W31
	067 Move W4, W23
	068 Move X5, X31
	069 Call Buffer.InternalBlockCopy, X0, X1, X2, X3, X4
	070 Move X0, [X21+48]
	071 Compare X0, 0
	072 JumpIfEqual {94}
	073 Move X8, [X0]
	074 Move X1, [X21+120]
	075 Move W2, W31
	076 Move W3, W23
	077 Move X9, [X8+488]
	078 Move X4, [X8+496]
	079 NotImplemented "Instruction BLR not yet implemented."
	080 Move X0, X20
	081 Move X1, X31
	082 Add W24, W22, W24
	083 Call Array.get_Length, X0
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move X20, [X31+48]
	086 Move X19, [X31+56]
	087 Move X22, [X31+32]
	088 Move X21, [X31+40]
	089 Move X24, [X31+16]
	090 Move X23, [X31+24]
	091 Move X30, [X31+64]
	092 Move X25, [X31+72]
	093 Return 
	094 Call 0x1C17F20

Method: System.Void WriteJaggedArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, System.Int32 length, System.Int32 lowerBound)

Disassembly:
	0x032B3C70 LDRB W8, [X0 + 0x20]
	0x032B3C74 LDR X22, [X0 + 0x18]
	0x032B3C78 CMP W8, 0x0
	0x032B3C7C CSET W24, NE
	0x032B3C80 ADRP X8, 0xE72000
	0x032B3C84 LDR X8, [X8 + 0x338]
	0x032B3C88 ADRP X25, 0xE40000
	0x032B3C8C ADRP X26, 0xE48000
	0x032B3C90 LDR X0, [X8]
	0x032B3C94 LDR X25, [X25 + 0xAC8]
	0x032B3C98 LDR X26, [X26 + 0xC60]
	0x032B3C9C BL 0x1C16F10
	0x032B3CA0 MOV X1, X31
	0x032B3CA4 MOV X21, X0
	0x032B3CA8 BL 0x33BDD8C
	0x032B3CAC STP X23, X22, [X21 + 0x10]
	0x032B3CB0 STRB W24, [X21 + 0x20]
	0x032B3CB4 STR X21, [X19 + 0x38]
	0x032B3CB8 LDR X0, [X25]
	0x032B3CBC MOV W1, W20
	0x032B3CC0 BL 0x1C16D6C
	0x032B3CC4 STR X0, [X21 + 0x30]
	0x032B3CC8 LDR X0, [X26]
	0x032B3CCC LDR X21, [X19 + 0x38]
	0x032B3CD0 MOV W1, W20
	0x032B3CD4 BL 0x1C16D6C
	0x032B3CD8 CBZ X21, 0x32B3E18
	0x032B3CDC ADRP X8, 0xE40000
	0x032B3CE0 LDR X8, [X8 + 0x9D0]
	0x032B3CE4 STR X0, [X21 + 0x38]
	0x032B3CE8 MOV W1, W20
	0x032B3CEC LDR X0, [X8]
	0x032B3CF0 BL 0x1C16D6C
	0x032B3CF4 LDR X8, [X19 + 0x30]
	0x032B3CF8 STR X0, [X19 + 0x40]
	0x032B3CFC CBZ X8, 0x32B3E18
	0x032B3D00 MOV X0, X8
	0x032B3D04 BL 0x32A8830
	0x032B3D08 CBZ X0, 0x32B3E18
	0x032B3D0C MOV X1, X31
	0x032B3D10 MOV X20, X0
	0x032B3D14 BL 0x3291B70
	0x032B3D18 TBZ X0, 0x0, 0x32B3DF8
	0x032B3D1C MOV W22, W31
	0x032B3D20 LDR X8, [X19 + 0x38]
	0x032B3D24 CBZ X8, 0x32B3E18
	0x032B3D28 LDR X21, [X8 + 0x30]
	0x032B3D2C MOV X0, X20
	0x032B3D30 MOV X1, X31
	0x032B3D34 BL 0x3291A04
	0x032B3D38 CBZ X21, 0x32B3E18
	0x032B3D3C LDR W8, [X21 + 0x18]
	0x032B3D40 CMP W22, W8
	0x032B3D44 B.CS 0x32B3E1C
	0x032B3D48 SXTW X23, W22
	0x032B3D4C ADD X8, X21, X23, 0x3, LSL
	0x032B3D50 STR X0, [X8 + 0x20]
	0x032B3D54 LDR X8, [X19 + 0x38]
	0x032B3D58 CBZ X8, 0x32B3E18
	0x032B3D5C LDR X24, [X8 + 0x38]
	0x032B3D60 MOV X0, X20
	0x032B3D64 MOV X1, X31
	0x032B3D68 BL 0x329F29C
	0x032B3D6C CBZ X24, 0x32B3E18
	0x032B3D70 MOV X21, X0
	0x032B3D74 CBZ X0, 0x32B3D8C
	0x032B3D78 LDR X8, [X24]
	0x032B3D7C MOV X0, X21
	0x032B3D80 LDR X1, [X8 + 0x40]
	0x032B3D84 BL 0x1C16E00
	0x032B3D88 CBZ X0, 0x32B3E20
	0x032B3D8C LDR W8, [X24 + 0x18]
	0x032B3D90 CMP W22, W8
	0x032B3D94 B.CS 0x32B3E1C
	0x032B3D98 ADD X8, X24, X23, 0x3, LSL
	0x032B3D9C STR X21, [X8 + 0x20]
	0x032B3DA0 LDR X24, [X19 + 0x40]
	0x032B3DA4 MOV X0, X20
	0x032B3DA8 MOV X1, X31
	0x032B3DAC BL 0x3291A88
	0x032B3DB0 CBZ X24, 0x32B3E18
	0x032B3DB4 MOV X21, X0
	0x032B3DB8 CBZ X0, 0x32B3DD0
	0x032B3DBC LDR X8, [X24]
	0x032B3DC0 MOV X0, X21
	0x032B3DC4 LDR X1, [X8 + 0x40]
	0x032B3DC8 BL 0x1C16E00
	0x032B3DCC CBZ X0, 0x32B3E20
	0x032B3DD0 LDR W8, [X24 + 0x18]
	0x032B3DD4 CMP W22, W8
	0x032B3DD8 B.CS 0x32B3E1C
	0x032B3DDC ADD X8, X24, X23, 0x3, LSL
	0x032B3DE0 MOV X0, X20
	0x032B3DE4 MOV X1, X31
	0x032B3DE8 ADD W22, W22, 0x1
	0x032B3DEC STR X21, [X8 + 0x20]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+32], X26
	004 Move [X31+40], X25
	005 Move [X31+48], X24
	006 Move [X31+56], X23
	007 Move [X31+64], X22
	008 Move [X31+72], X21
	009 Move [X31+80], X20
	010 Move [X31+88], X19
	011 Move X21, 0x112A000
	012 Move X26, 0xE42000
	013 Move W8, [X21+2036]
	014 Move X26, [X26+3672]
	015 Move W25, W6
	016 Move W24, W5
	017 Move X23, X4
	018 Move X22, X3
	019 Move X20, X2
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {33}
	025 Move X0, 0xE73000
	026 Move X0, [X0+776]
	027 Call 0x1C17CF4
	028 Move X0, 0xE42000
	029 Move X0, [X0+3672]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+2036], W8
	033 Move X0, X19
	034 Call __BinaryWriter.InternalWriteItemNull, X0
	035 Move X0, [X26]
	036 Move W1, 1
	037 Call 0x1C17D6C
	038 Compare X0, 0
	039 JumpIfEqual {120}
	040 Move W8, [X0+24]
	041 Move X21, X0
	042 Compare W8, 0
	043 JumpIfEqual {121}
	044 Move [X21+32], W24
	045 Move [X31+24], X31
	046 Move [X31+12], W31
	047 Compare W25, 0
	048 JumpIfEqual {62}
	049 Move X0, [X26]
	050 Move W1, 1
	051 Call 0x1C17D6C
	052 Compare X0, 0
	053 JumpIfEqual {120}
	054 Move W8, [X0+24]
	055 Move X24, X0
	056 Compare W8, 0
	057 JumpIfEqual {121}
	058 Move W26, 4
	059 Move [X24+32], W25
	060 Compare X23, 0
	061 JumpIfNotEqual {66}
	062 Move X24, X31
	063 Move W26, 1
	064 Compare X23, 0
	065 JumpIfEqual {120}
	066 Move X25, [X23+48]
	067 Move X0, X23
	068 Move X1, X31
	069 Call NameInfo.get_NIname, X0
	070 Move X3, [X19+40]
	071 Add X4, X31, 24
	072 Add X5, X31, 12
	073 Move X0, X25
	074 Move X1, X22
	075 Call BinaryConverter.GetBinaryTypeInfo, X0, X1, X2, X3, X4, X5
	076 Move X23, [X19+112]
	077 Move W22, W0
	078 Compare X23, 0
	079 JumpIfNotEqual {88}
	080 Move X8, 0xE73000
	081 Move X8, [X8+776]
	082 Move X0, [X8]
	083 Call 0x1C17F10
	084 Move X1, X31
	085 Move X23, X0
	086 Call Object..ctor, X0
	087 Move [X19+112], X23
	088 Compare X20, 0
	089 JumpIfEqual {120}
	090 Compare X23, 0
	091 JumpIfEqual {120}
	092 Move W8, [X31+12]
	093 Move X30, [X31+16]
	094 Move X9, [X31+24]
	095 Move X10, [X20+24]
	096 Move W11, 1
	097 Move W12, 7
	098 Move [X23+24], X21
	099 Move [X23+32], X24
	100 Move [X23+40], W22
	101 Move [X23+16], W10
	102 Move [X23+20], W11
	103 Move [X23+48], X9
	104 Move [X23+56], W8
	105 Move [X23+60], W12
	106 Move [X23+64], W26
	107 Move X0, X23
	108 Move X1, X19
	109 Move X20, [X31+80]
	110 Move X19, [X31+88]
	111 Move X22, [X31+64]
	112 Move X21, [X31+72]
	113 Move X24, [X31+48]
	114 Move X23, [X31+56]
	115 Move X26, [X31+32]
	116 Move X25, [X31+40]
	117 Add X31, X31, 96
	118 Call BinaryArray.Write, X0, X1
	119 Return 
	120 Call 0x1C17F20
	121 Call 0x1C17F28

Method: System.Void WriteRectangleArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, System.Int32 rank, System.Int32[] lengthA, System.Int32[] lowerBoundA)

Disassembly:
	0x032B3DF0 BL 0x3291B70
	0x032B3DF4 TBNZ X0, 0x0, 0x32B3D20
	0x032B3DF8 MOVZ W8, 0x1
	0x032B3DFC STURH W8, [X19 + 0x29]
	0x032B3E00 LDP X20, X19, [X31 + 0x40]
	0x032B3E04 LDP X22, X21, [X31 + 0x30]
	0x032B3E08 LDP X24, X23, [X31 + 0x20]
	0x032B3E0C LDP X26, X25, [X31 + 0x10]
	0x032B3E10 LDR X30, [X31], #0x50
	0x032B3E14 RET
	0x032B3E18 BL 0x1C16F20
	0x032B3E1C BL 0x1C16F28
	0x032B3E20 BL 0x1C16F44
	0x032B3E24 MOV X1, X31
	0x032B3E28 BL 0x1C16DEC
	0x032B3E2C STR X30, [X31 - 0x30]!
	0x032B3E30 STP X22, X21, [X31 + 0x10]
	0x032B3E34 STP X20, X19, [X31 + 0x20]
	0x032B3E38 ADRP X22, 0x1129000
	0x032B3E3C LDRB W8, [X22 + 0x800]
	0x032B3E40 MOV X21, X2
	0x032B3E44 MOV X19, X1
	0x032B3E48 MOV X20, X0
	0x032B3E4C TBNZ X8, 0x0, 0x32B3E64
	0x032B3E50 ADRP X0, 0xE71000
	0x032B3E54 LDR X0, [X0 + 0xB70]
	0x032B3E58 BL 0x1C16CF4
	0x032B3E5C MOVZ W8, 0x1
	0x032B3E60 STRB W8, [X22 + 0x800]
	0x032B3E64 CBZ X20, 0x32B3EF0
	0x032B3E68 CBNZ X21, 0x32B3EE0
	0x032B3E6C LDRB W8, [X20 + 0x20]
	0x032B3E70 CBZ W8, 0x32B3EE0
	0x032B3E74 ADRP X8, 0xE71000
	0x032B3E78 LDR X8, [X8 + 0xB70]
	0x032B3E7C LDR X0, [X8]
	0x032B3E80 LDR W8, [X0 + 0xE0]
	0x032B3E84 CBNZ W8, 0x32B3E8C
	0x032B3E88 BL 0x1C16DFC
	0x032B3E8C MOV X0, X31
	0x032B3E90 BL 0x32A1A28
	0x032B3E94 TBNZ X0, 0x0, 0x32B3EE0
	0x032B3E98 CBZ X19, 0x32B3EF0
	0x032B3E9C LDR X8, [X19]
	0x032B3EA0 MOV X0, X19
	0x032B3EA4 LDR X9, [X8 + 0x2F8]
	0x032B3EA8 LDR X1, [X8 + 0x300]
	0x032B3EAC BLR X9
	0x032B3EB0 CBZ X0, 0x32B3EF0
	0x032B3EB4 LDR X8, [X0]
	0x032B3EB8 MOV X21, X0
	0x032B3EBC LDP X9, X1, [X8 + 0x1B8]
	0x032B3EC0 BLR X9
	0x032B3EC4 LDR X1, [X20 + 0x18]
	0x032B3EC8 BL 0x32A86DC
	0x032B3ECC TBNZ X0, 0x0, 0x32B3EE0
	0x032B3ED0 MOV X0, X21
	0x032B3ED4 MOV X1, X31
	0x032B3ED8 BL 0x32D5B84
	0x032B3EDC TBZ X0, 0x0, 0x32B3EF4
	0x032B3EE0 LDP X20, X19, [X31 + 0x20]
	0x032B3EE4 LDP X22, X21, [X31 + 0x10]
	0x032B3EE8 LDR X30, [X31], #0x30
	0x032B3EEC RET
	0x032B3EF0 BL 0x1C16F20
	0x032B3EF4 ADRP X0, 0xE40000
	0x032B3EF8 LDR X0, [X0 + 0x9D0]
	0x032B3EFC BL 0x1C16D08
	0x032B3F00 MOVZ W1, 0x1
	0x032B3F04 BL 0x1C16D6C
	0x032B3F08 MOV X20, X0
	0x032B3F0C BL 0x19903C0
	0x032B3F10 MOV X0, X20
	0x032B3F14 MOV X1, X19
	0x032B3F18 BL 0x19980B4
	0x032B3F1C MOV X0, X20
	0x032B3F20 MOV X1, X31
	0x032B3F24 MOV X2, X19
	0x032B3F28 BL 0x1993444
	0x032B3F2C ADRP X0, 0xE72000
	0x032B3F30 LDR X0, [X0 + 0x340]
	0x032B3F34 BL 0x1C16D08
	0x032B3F38 MOV X1, X20
	0x032B3F3C MOV X2, X31
	0x032B3F40 BL 0x33BFB40
	0x032B3F44 MOV X19, X0

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+32], X26
	004 Move [X31+40], X25
	005 Move [X31+48], X24
	006 Move [X31+56], X23
	007 Move [X31+64], X22
	008 Move [X31+72], X21
	009 Move [X31+80], X20
	010 Move [X31+88], X19
	011 Move X26, 0x112A000
	012 Move W8, [X26+2037]
	013 Move X20, X7
	014 Move X22, X6
	015 Move W19, W5
	016 Move X25, X4
	017 Move X24, X3
	018 Move X23, X2
	019 Move X21, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0xE73000
	025 Move X0, [X0+776]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X26+2037], W8
	029 Move X0, X21
	030 Call __BinaryWriter.InternalWriteItemNull, X0
	031 Move [X31+24], X31
	032 Move [X31+12], W31
	033 Compare X25, 0
	034 JumpIfEqual {105}
	035 Move X26, [X25+48]
	036 Move X0, X25
	037 Move X1, X31
	038 Call NameInfo.get_NIname, X0
	039 Move X3, [X21+40]
	040 Add X4, X31, 24
	041 Add X5, X31, 12
	042 Move X0, X26
	043 Move X1, X24
	044 Call BinaryConverter.GetBinaryTypeInfo, X0, X1, X2, X3, X4, X5
	045 Move X25, [X21+112]
	046 Move W24, W0
	047 Compare X25, 0
	048 JumpIfNotEqual {57}
	049 Move X8, 0xE73000
	050 Move X8, [X8+776]
	051 Move X0, [X8]
	052 Call 0x1C17F10
	053 Move X1, X31
	054 Move X25, X0
	055 Call Object..ctor, X0
	056 Move [X21+112], X25
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Compare X20, 0
	059 JumpIfEqual {105}
	060 Move W8, [X20+24]
	061 Move W9, W31
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Add X10, X20, W9
	064 Move W10, [X10+32]
	065 Compare W10, 0
	066 JumpIfNotEqual {72}
	067 Add W9, W9, 1
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move W8, 2
	070 Compare X23, 0
	071 JumpIfNotEqual {75}
	072 Move W8, 5
	073 Compare X23, 0
	074 JumpIfEqual {105}
	075 Compare X25, 0
	076 JumpIfEqual {105}
	077 Move W9, [X31+12]
	078 Move X30, [X31+16]
	079 Move X10, [X31+24]
	080 Move X11, [X23+24]
	081 Move [X25+64], W8
	082 Move W8, 7
	083 Move [X25+24], X22
	084 Move [X25+32], X20
	085 Move [X25+40], W24
	086 Move [X25+16], W11
	087 Move [X25+20], W19
	088 Move [X25+48], X10
	089 Move [X25+56], W9
	090 Move [X25+60], W8
	091 Move X0, X25
	092 Move X1, X21
	093 Move X20, [X31+80]
	094 Move X19, [X31+88]
	095 Move X22, [X31+64]
	096 Move X21, [X31+72]
	097 Move X24, [X31+48]
	098 Move X23, [X31+56]
	099 Move X26, [X31+32]
	100 Move X25, [X31+40]
	101 Add X31, X31, 96
	102 Call BinaryArray.Write, X0, X1
	103 Return 
	104 Call 0x1C17F28
	105 Call 0x1C17F20

Method: System.Void WriteObjectByteArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, System.Int32 length, System.Int32 lowerBound, System.Byte[] byteA)

Disassembly:
	0x032B3F48 ADRP X0, 0xE6E000
	0x032B3F4C LDR X0, [X0 + 0x690]
	0x032B3F50 BL 0x1C16D08
	0x032B3F54 BL 0x1C16F10
	0x032B3F58 MOV X1, X19
	0x032B3F5C MOV X2, X31
	0x032B3F60 MOV X20, X0
	0x032B3F64 BL 0x324A9B4
	0x032B3F68 ADRP X0, 0xE72000
	0x032B3F6C LDR X0, [X0 + 0x348]
	0x032B3F70 BL 0x1C16D08
	0x032B3F74 MOV X1, X0
	0x032B3F78 MOV X0, X20
	0x032B3F7C BL 0x1C16DEC
	0x032B3F80 STR X30, [X31 - 0x50]!
	0x032B3F84 STP X26, X25, [X31 + 0x10]
	0x032B3F88 STP X24, X23, [X31 + 0x20]
	0x032B3F8C STP X22, X21, [X31 + 0x30]
	0x032B3F90 STP X20, X19, [X31 + 0x40]
	0x032B3F94 ADRP X20, 0x1129000
	0x032B3F98 LDRB W8, [X20 + 0x802]
	0x032B3F9C MOV X19, X0
	0x032B3FA0 TBNZ X8, 0x0, 0x32B3FDC
	0x032B3FA4 ADRP X0, 0xE71000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X19, X7
	010 Move W20, W6
	011 Move W21, W5
	012 Move X22, X4
	013 Move X23, X3
	014 Move X24, X2
	015 Move X25, X0
	016 Call __BinaryWriter.InternalWriteItemNull, X0
	017 Move X2, X24
	018 Move X3, X23
	019 Move X4, X22
	020 Move W5, W21
	021 Move W6, W20
	022 Move X7, X19
	023 Move X20, [X31+48]
	024 Move X19, [X31+56]
	025 Move X22, [X31+32]
	026 Move X21, [X31+40]
	027 Move X24, [X31+16]
	028 Move X23, [X31+24]
	029 Move X0, X25
	030 Move X30, [X31+64]
	031 Move X25, [X31+72]
	032 Call __BinaryWriter.WriteSingleArray, X0, X1, X2, X3, X4, X5, X6, X7
	033 Return 

Method: System.Void WriteMember(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, System.Object value)

Disassembly:
	0x032B3FA8 LDR X0, [X0 + 0xB70]
	0x032B3FAC BL 0x1C16CF4
	0x032B3FB0 ADRP X0, 0xE72000
	0x032B3FB4 LDR X0, [X0 + 0x338]
	0x032B3FB8 BL 0x1C16CF4
	0x032B3FBC ADRP X0, 0xE40000
	0x032B3FC0 LDR X0, [X0 + 0xAC8]
	0x032B3FC4 BL 0x1C16CF4
	0x032B3FC8 ADRP X0, 0xE48000
	0x032B3FCC LDR X0, [X0 + 0xC60]
	0x032B3FD0 BL 0x1C16CF4
	0x032B3FD4 MOVZ W8, 0x1
	0x032B3FD8 STRB W8, [X20 + 0x802]
	0x032B3FDC LDR X8, [X19 + 0x60]
	0x032B3FE0 CBZ X8, 0x32B422C
	0x032B3FE4 LDR X0, [X8 + 0x10]
	0x032B3FE8 CBZ X0, 0x32B422C
	0x032B3FEC LDR X8, [X0]
	0x032B3FF0 LDR X1, [X19 + 0x20]
	0x032B3FF4 ADRP X20, 0xE72000
	0x032B3FF8 ADRP X24, 0xE71000
	0x032B3FFC LDR X9, [X8 + 0x2D8]
	0x032B4000 LDR X2, [X8 + 0x2E0]
	0x032B4004 LDR X20, [X20 + 0x338]
	0x032B4008 LDR X24, [X24 + 0xB70]
	0x032B400C BLR X9
	0x032B4010 LDR X1, [X20]
	0x032B4014 CBZ X0, 0x32B403C
	0x032B4018 LDR X8, [X0]
	0x032B401C CMP X8, X1
	0x032B4020 B.NE 0x32B4038
	0x032B4024 MOV X25, X19
	0x032B4028 STR X0, [X25 + 0x38]!
	0x032B402C LDR X8, [X0]
	0x032B4030 CMP X8, X1
	0x032B4034 B.EQ 0x32B41D4
	0x032B4038 BL 0x1C171E0
	0x032B403C MOV X25, X19
	0x032B4040 STR X31, [X25 + 0x38]!
	0x032B4044 LDUR X21, [X25 - 0x18]
	0x032B4048 MOV X0, X1
	0x032B404C BL 0x1C16F10
	0x032B4050 MOV X1, X21
	0x032B4054 MOV X20, X0
	0x032B4058 BL 0x32B45A0
	0x032B405C STR X20, [X25]
	0x032B4060 LDR X0, [X24]
	0x032B4064 LDUR X23, [X25 - 0x18]
	0x032B4068 LDP X22, X21, [X25 + 0x18]
	0x032B406C LDR W8, [X0 + 0xE0]
	0x032B4070 CBNZ W8, 0x32B4078
	0x032B4074 BL 0x1C16DFC
	0x032B4078 MOV X0, X23
	0x032B407C MOV X1, X22
	0x032B4080 MOV X2, X21
	0x032B4084 MOV X3, X31
	0x032B4088 BL 0x32A15D4
	0x032B408C CBZ X20, 0x32B422C
	0x032B4090 STR X0, [X20 + 0x28]
	0x032B4094 LDR X21, [X25]
	0x032B4098 CBZ X21, 0x32B422C
	0x032B409C LDR X8, [X21 + 0x28]
	0x032B40A0 CBZ X8, 0x32B422C
	0x032B40A4 LDR W20, [X8 + 0x18]
	0x032B40A8 ADRP X8, 0xE3F000
	0x032B40AC LDR X8, [X8 + 0xAC8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x112A000
	008 Move W8, [X23+2038]
	009 Move X20, X3
	010 Move X21, X2
	011 Move X22, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xE73000
	018 Move X0, [X0+784]
	019 Call 0x1C17CF4
	020 Move X0, 0xE73000
	021 Move X0, [X0+792]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+2038], W8
	025 Move X0, X19
	026 Call __BinaryWriter.InternalWriteItemNull, X0
	027 Compare X21, 0
	028 JumpIfEqual {89}
	029 Compare X22, 0
	030 JumpIfEqual {89}
	031 Move W8, [X22+60]
	032 Move W22, [X21+40]
	033 Compare W8, 0
	034 JumpIfEqual {62}
	035 Move X21, [X19+144]
	036 Compare X21, 0
	037 JumpIfNotEqual {48}
	038 Move X8, 0xE72000
	039 Move X8, [X8+784]
	040 Move X0, [X8]
	041 Call 0x1C17F10
	042 Move X1, X31
	043 Move X21, X0
	044 Call Object..ctor, X0
	045 Move [X19+144], X21
	046 Compare X21, 0
	047 JumpIfEqual {89}
	048 Move [X21+16], W22
	049 Move [X21+24], X20
	050 Compare X21, 0
	051 JumpIfEqual {89}
	052 Move X0, X21
	053 Move X1, X19
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move X30, [X31+48]
	059 Move X23, [X31+56]
	060 Call MemberPrimitiveTyped.Write, X0, X1
	061 Return 
	062 Move X21, [X19+136]
	063 Compare X21, 0
	064 JumpIfNotEqual {75}
	065 Move X8, 0xE72000
	066 Move X8, [X8+792]
	067 Move X0, [X8]
	068 Call 0x1C17F10
	069 Move X1, X31
	070 Move X21, X0
	071 Call Object..ctor, X0
	072 Move [X19+136], X21
	073 Compare X21, 0
	074 JumpIfEqual {89}
	075 Move [X21+16], W22
	076 Move [X21+24], X20
	077 Compare X21, 0
	078 JumpIfEqual {89}
	079 Move X0, X21
	080 Move X1, X19
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X22, [X31+16]
	084 Move X21, [X31+24]
	085 Move X30, [X31+48]
	086 Move X23, [X31+56]
	087 Call MemberPrimitiveUnTyped.Write, X0, X1
	088 Return 
	089 Call 0x1C17F20

Method: System.Void WriteNullMember(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo)

Disassembly:
	0x032B40B0 MOV W1, W20
	0x032B40B4 LDR X0, [X8]
	0x032B40B8 BL 0x1C16D6C
	0x032B40BC STR X0, [X21 + 0x30]
	0x032B40C0 ADRP X8, 0xE47000
	0x032B40C4 LDR X8, [X8 + 0xC60]
	0x032B40C8 LDR X21, [X25]
	0x032B40CC MOV W1, W20
	0x032B40D0 LDR X0, [X8]
	0x032B40D4 BL 0x1C16D6C
	0x032B40D8 CBZ X21, 0x32B422C
	0x032B40DC CMP W20, 0x1
	0x032B40E0 STR X0, [X21 + 0x38]
	0x032B40E4 B.LT 0x32B41AC
	0x032B40E8 MOV W22, W31
	0x032B40EC LDR X8, [X25]
	0x032B40F0 CBZ X8, 0x32B422C
	0x032B40F4 LDR X9, [X8 + 0x28]
	0x032B40F8 CBZ X9, 0x32B422C
	0x032B40FC LDR W10, [X9 + 0x18]
	0x032B4100 CMP W22, W10
	0x032B4104 B.CS 0x32B4230
	0x032B4108 SXTW X23, W22
	0x032B410C ADD X9, X9, X23, 0x3, LSL
	0x032B4110 LDR X0, [X9 + 0x20]
	0x032B4114 CBZ X0, 0x32B422C
	0x032B4118 LDR X9, [X0]
	0x032B411C LDR X21, [X8 + 0x30]
	0x032B4120 LDP X8, X1, [X9 + 0x1A8]
	0x032B4124 BLR X8
	0x032B4128 CBZ X21, 0x32B422C
	0x032B412C LDR W8, [X21 + 0x18]
	0x032B4130 CMP W22, W8
	0x032B4134 B.CS 0x32B4230
	0x032B4138 ADD X8, X21, X23, 0x3, LSL
	0x032B413C STR X0, [X8 + 0x20]
	0x032B4140 LDR X8, [X25]
	0x032B4144 CBZ X8, 0x32B422C
	0x032B4148 LDR X9, [X8 + 0x28]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1129000
	006 Move W8, [X21+2039]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xE72000
	014 Move X0, [X0+760]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2039], W8
	018 Move X0, X19
	019 Call __BinaryWriter.InternalWriteItemNull, X0
	020 Move X21, [X19+152]
	021 Compare X21, 0
	022 JumpIfNotEqual {31}
	023 Move X8, 0xE72000
	024 Move X8, [X8+760]
	025 Move X0, [X8]
	026 Call 0x1C17F10
	027 Move X1, X31
	028 Move X21, X0
	029 Call Object..ctor, X0
	030 Move [X19+152], X21
	031 Compare X20, 0
	032 JumpIfEqual {51}
	033 Move W8, [X20+58]
	034 Compare W8, 0
	035 JumpIfNotEqual {46}
	036 Compare X21, 0
	037 JumpIfEqual {51}
	038 Move W8, 1
	039 Move [X21+16], W8
	040 Compare X21, 0
	041 JumpIfEqual {51}
	042 Move X0, X21
	043 Move X1, X19
	044 Call ObjectNull.Write, X0, X1
	045 Move [X19+60], W31
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Return 
	051 Call 0x1C17F20

Method: System.Void WriteMemberObjectRef(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Int32 idRef)

Disassembly:
	0x032B414C CBZ X9, 0x32B422C
	0x032B4150 LDR W10, [X9 + 0x18]
	0x032B4154 CMP W22, W10
	0x032B4158 B.CS 0x32B4230
	0x032B415C LDR X26, [X8 + 0x38]
	0x032B4160 ADD X8, X9, X23, 0x3, LSL
	0x032B4164 LDR X1, [X8 + 0x20]
	0x032B4168 BL 0x32B4664
	0x032B416C CBZ X26, 0x32B422C
	0x032B4170 MOV X21, X0
	0x032B4174 CBZ X0, 0x32B418C
	0x032B4178 LDR X8, [X26]
	0x032B417C MOV X0, X21
	0x032B4180 LDR X1, [X8 + 0x40]
	0x032B4184 BL 0x1C16E00
	0x032B4188 CBZ X0, 0x32B4234
	0x032B418C LDR W8, [X26 + 0x18]
	0x032B4190 CMP W22, W8
	0x032B4194 B.CS 0x32B4230
	0x032B4198 ADD W22, W22, 0x1
	0x032B419C ADD X8, X26, X23, 0x3, LSL
	0x032B41A0 CMP W20, W22
	0x032B41A4 STR X21, [X8 + 0x20]
	0x032B41A8 B.NE 0x32B40EC
	0x032B41AC LDR X8, [X19 + 0x60]
	0x032B41B0 CBZ X8, 0x32B422C
	0x032B41B4 LDR X0, [X8 + 0x10]
	0x032B41B8 CBZ X0, 0x32B422C
	0x032B41BC LDR X8, [X0]
	0x032B41C0 LDR X2, [X19 + 0x38]
	0x032B41C4 LDR X1, [X19 + 0x20]
	0x032B41C8 LDR X9, [X8 + 0x278]
	0x032B41CC LDR X3, [X8 + 0x280]
	0x032B41D0 BLR X9
	0x032B41D4 LDR X20, [X19 + 0x18]
	0x032B41D8 CBZ X20, 0x32B420C
	0x032B41DC LDR X8, [X25]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1129000
	007 Move W8, [X22+2040]
	008 Move W21, W2
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xE72000
	016 Move X0, [X0+800]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+2040], W8
	020 Move X0, X19
	021 Call __BinaryWriter.InternalWriteItemNull, X0
	022 Move X22, [X19+160]
	023 Compare X22, 0
	024 JumpIfNotEqual {35}
	025 Move X8, 0xE72000
	026 Move X8, [X8+800]
	027 Move X0, [X8]
	028 Call 0x1C17F10
	029 Move X1, X31
	030 Move X22, X0
	031 Call Object..ctor, X0
	032 Move [X19+160], X22
	033 Compare X22, 0
	034 JumpIfEqual {49}
	035 Move [X22+16], W21
	036 Compare X20, 0
	037 JumpIfEqual {49}
	038 Compare X22, 0
	039 JumpIfEqual {49}
	040 Move X0, X22
	041 Move X1, X19
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X30, [X31+48]
	047 Call MemberReference.Write, X0, X1
	048 Return 
	049 Call 0x1C17F20

Method: System.Void WriteMemberNested(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo)

Disassembly:
	0x032B41E0 CBZ X8, 0x32B422C
	0x032B41E4 LDR X0, [X24]
	0x032B41E8 LDR X21, [X8 + 0x28]
	0x032B41EC LDR W9, [X0 + 0xE0]
	0x032B41F0 CBNZ W9, 0x32B41F8
	0x032B41F4 BL 0x1C16DFC
	0x032B41F8 MOV X0, X20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X1
	004 Call __BinaryWriter.InternalWriteItemNull, X0
	005 Compare X19, 0
	006 JumpIfEqual {10}
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Call 0x1C17F20

Method: System.Void WriteMemberString(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, System.String value)

Disassembly:
	0x032B41FC MOV X1, X21
	0x032B4200 MOV X2, X31
	0x032B4204 BL 0x32A2064
	0x032B4208 STR X0, [X19 + 0x40]
	0x032B420C MOVZ W8, 0x101
	0x032B4210 STURH W8, [X19 + 0x29]
	0x032B4214 LDP X20, X19, [X31 + 0x40]
	0x032B4218 LDP X22, X21, [X31 + 0x30]
	0x032B421C LDP X24, X23, [X31 + 0x20]
	0x032B4220 LDP X26, X25, [X31 + 0x10]
	0x032B4224 LDR X30, [X31], #0x50
	0x032B4228 RET
	0x032B422C BL 0x1C16F20
	0x032B4230 BL 0x1C16F28
	0x032B4234 BL 0x1C16F44
	0x032B4238 MOV X1, X31
	0x032B423C BL 0x1C16DEC
	0x032B4240 SUB X31, X31, 0x60

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, X3
	007 Move X20, X2
	008 Move X22, X1
	009 Move X21, X0
	010 Call __BinaryWriter.InternalWriteItemNull, X0
	011 Compare X22, 0
	012 JumpIfEqual {25}
	013 Compare X20, 0
	014 JumpIfEqual {25}
	015 Move W1, [X20+24]
	016 Move X0, X21
	017 Move X2, X19
	018 Move X20, [X31+32]
	019 Move X19, [X31+40]
	020 Move X22, [X31+16]
	021 Move X21, [X31+24]
	022 Move X30, [X31+48]
	023 Call __BinaryWriter.WriteObjectString, X0, X1, X2
	024 Return 
	025 Call 0x1C17F20

Method: System.Void WriteItem(System.Runtime.Serialization.Formatters.Binary.NameInfo itemNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, System.Object value)

Disassembly:
	0x032B4244 STR X30, [X31 + 0x10]
	0x032B4248 STP X26, X25, [X31 + 0x20]
	0x032B424C STP X24, X23, [X31 + 0x30]
	0x032B4250 STP X22, X21, [X31 + 0x40]
	0x032B4254 STP X20, X19, [X31 + 0x50]
	0x032B4258 MOV X26, X0
	0x032B425C MOV X0, X4
	0x032B4260 MOV X19, X6
	0x032B4264 MOV X20, X5
	0x032B4268 MOV X21, X4
	0x032B426C MOV X22, X3
	0x032B4270 MOV X23, X2
	0x032B4274 MOV X25, X1
	0x032B4278 BL 0x32B3490
	0x032B427C CBZ X0, 0x32B42C4
	0x032B4280 MOV X1, X26

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, X3
	007 Move X20, X2
	008 Move X21, X1
	009 Move X22, X0
	010 Call __BinaryWriter.InternalWriteItemNull, X0
	011 Move X0, X22
	012 Move X1, X21
	013 Move X2, X20
	014 Move X3, X19
	015 Move X20, [X31+32]
	016 Move X19, [X31+40]
	017 Move X22, [X31+16]
	018 Move X21, [X31+24]
	019 Move X30, [X31+48]
	020 Call __BinaryWriter.WriteMember, X0, X1, X2, X3
	021 Return 

Method: System.Void WriteNullItem(System.Runtime.Serialization.Formatters.Binary.NameInfo itemNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo)

Disassembly:
	0x032B4284 MOV X2, X25
	0x032B4288 MOV X3, X23
	0x032B428C MOV X4, X22
	0x032B4290 MOV X5, X21

ISIL:
	001 Move W8, [X0+60]
	002 Add W8, W8, 1
	003 Move [X0+60], W8
	004 Call __BinaryWriter.InternalWriteItemNull, X0
	005 Return 

Method: System.Void WriteDelayedNullItem()

Disassembly:
	0x032B4294 MOV X6, X20
	0x032B4298 MOV X7, X19
	0x032B429C MOV X24, X0
	0x032B42A0 BL 0x32B42C8

ISIL:
	001 Move W8, [X0+60]
	002 Add W8, W8, 1
	003 Move [X0+60], W8
	004 Return 

Method: System.Void WriteItemEnd()

Disassembly:
	0x032B42A4 MOV X0, X24

ISIL:
	001 Call __BinaryWriter.InternalWriteItemNull, X0
	002 Return 

Method: System.Void InternalWriteItemNull()

Disassembly:
	0x032B35B4 ADRP X0, 0xE71000
	0x032B35B8 LDR X0, [X0 + 0xB70]
	0x032B35BC BL 0x1C16CF4
	0x032B35C0 ADRP X0, 0xE70000
	0x032B35C4 LDR X0, [X0 + 0xC30]
	0x032B35C8 BL 0x1C16CF4
	0x032B35CC ADRP X0, 0xE71000
	0x032B35D0 LDR X0, [X0 + 0xCA0]
	0x032B35D4 BL 0x1C16CF4
	0x032B35D8 ADRP X0, 0xE71000
	0x032B35DC LDR X0, [X0 + 0x9E0]
	0x032B35E0 BL 0x1C16CF4
	0x032B35E4 ADRP X0, 0xE72000
	0x032B35E8 LDR X0, [X0 + 0x50]
	0x032B35EC BL 0x1C16CF4
	0x032B35F0 MOVZ W8, 0x1
	0x032B35F4 STRB W8, [X27 + 0x7FD]
	0x032B35F8 STR X31, [X31 + 0x8]
	0x032B35FC STP X21, X20, [X19 + 0x50]
	0x032B3600 STR X22, [X19 + 0x18]
	0x032B3604 STR X26, [X19 + 0x60]
	0x032B3608 CBZ X22, 0x32B391C
	0x032B360C MOV X0, X22
	0x032B3610 MOV X1, X31
	0x032B3614 BL 0x33BE520
	0x032B3618 STR X0, [X19 + 0x20]
	0x032B361C CBZ X0, 0x32B391C
	0x032B3620 MOV X1, X31
	0x032B3624 BL 0x3396BF8
	0x032B3628 TBZ X0, 0x0, 0x32B3640
	0x032B362C MOVZ W8, 0x1
	0x032B3630 MOV X0, X19
	0x032B3634 STRB W8, [X19 + 0x2B]
	0x032B3638 BL 0x32B3A4C
	0x032B363C B 0x32B3900
	0x032B3640 LDR X0, [X31 + 0x60]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x112A000
	005 Move W8, [X20+2041]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE73000
	012 Move X0, [X0+760]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2041], W8
	016 Move W8, [X19+60]
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X20, [X19+152]
	019 Compare X20, 0
	020 JumpIfNotEqual {31}
	021 Move X8, 0xE73000
	022 Move X8, [X8+760]
	023 Move X0, [X8]
	024 Call 0x1C17F10
	025 Move X1, X31
	026 Move X20, X0
	027 Call Object..ctor, X0
	028 Move [X19+152], X20
	029 Compare X20, 0
	030 JumpIfEqual {43}
	031 Move W8, [X19+60]
	032 Move [X20+16], W8
	033 Compare X20, 0
	034 JumpIfEqual {43}
	035 Move X0, X20
	036 Move X1, X19
	037 Call ObjectNull.Write, X0, X1
	038 Move [X19+60], W31
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Return 
	043 Call 0x1C17F20

Method: System.Void WriteItemObjectRef(System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo, System.Int32 idRef)

Disassembly:
	0x032B42A8 LDP X20, X19, [X31 + 0x50]
	0x032B42AC LDP X22, X21, [X31 + 0x40]
	0x032B42B0 LDP X24, X23, [X31 + 0x30]
	0x032B42B4 LDP X26, X25, [X31 + 0x20]
	0x032B42B8 LDR X30, [X31 + 0x10]
	0x032B42BC ADD X31, X31, 0x60
	0x032B42C0 RET
	0x032B42C4 BL 0x1C16F20
	0x032B42C8 SUB X31, X31, 0x60
	0x032B42CC STP X30, X27, [X31 + 0x10]
	0x032B42D0 STP X26, X25, [X31 + 0x20]
	0x032B42D4 STP X24, X23, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W19, W2
	006 Move X20, X1
	007 Move X21, X0
	008 Call __BinaryWriter.InternalWriteItemNull, X0
	009 Move X1, X20
	010 Move W2, W19
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X0, X21
	014 Move X30, [X31+32]
	015 Move X21, [X31+40]
	016 Call __BinaryWriter.WriteMemberObjectRef, X0, X1, X2
	017 Return 

Method: System.Void WriteAssembly(System.Type type, System.String assemblyString, System.Int32 assemId, System.Boolean isNew)

Disassembly:
	0x032B42D8 STP X22, X21, [X31 + 0x40]
	0x032B42DC STP X20, X19, [X31 + 0x50]
	0x032B42E0 ADRP X27, 0x1128000
	0x032B42E4 LDRB W8, [X27 + 0x7FE]
	0x032B42E8 MOV X25, X7
	0x032B42EC MOV X21, X6
	0x032B42F0 MOV X26, X5
	0x032B42F4 MOV X22, X4
	0x032B42F8 MOV X23, X3
	0x032B42FC MOV X24, X2
	0x032B4300 MOV X19, X1
	0x032B4304 MOV X20, X0
	0x032B4308 TBNZ X8, 0x0, 0x32B4350
	0x032B430C ADRP X0, 0xE70000
	0x032B4310 LDR X0, [X0 + 0xF80]
	0x032B4314 BL 0x1C16CF4
	0x032B4318 ADRP X0, 0xE70000
	0x032B431C LDR X0, [X0 + 0xB70]
	0x032B4320 BL 0x1C16CF4
	0x032B4324 ADRP X0, 0xE70000
	0x032B4328 LDR X0, [X0 + 0x9E0]
	0x032B432C BL 0x1C16CF4
	0x032B4330 ADRP X0, 0xE71000
	0x032B4334 LDR X0, [X0 + 0x338]
	0x032B4338 BL 0x1C16CF4
	0x032B433C ADRP X0, 0xE71000
	0x032B4340 LDR X0, [X0 + 0x50]
	0x032B4344 BL 0x1C16CF4
	0x032B4348 MOVZ W8, 0x1
	0x032B434C STRB W8, [X27 + 0x7FE]
	0x032B4350 STR X31, [X31 + 0x8]
	0x032B4354 STR X19, [X20 + 0x20]
	0x032B4358 STP X23, X22, [X20 + 0x50]
	0x032B435C STR X26, [X20 + 0x60]
	0x032B4360 CBZ X19, 0x32B459C
	0x032B4364 MOV X0, X19
	0x032B4368 MOV X1, X31
	0x032B436C BL 0x3396BF8
	0x032B4370 TBZ X0, 0x0, 0x32B4380
	0x032B4374 MOV X0, X20
	0x032B4378 BL 0x32B3A4C
	0x032B437C B 0x32B4580
	0x032B4380 CBZ X25, 0x32B43A0
	0x032B4384 LDR X8, [X25]
	0x032B4388 LDR X1, [X20 + 0x20]
	0x032B438C ADD X2, X20, 0x80
	0x032B4390 ADD X3, X20, 0x78
	0x032B4394 LDP X9, X4, [X8 + 0x178]
	0x032B4398 MOV X0, X25
	0x032B439C BLR X9
	0x032B43A0 STR X31, [X31 + 0x8]
	0x032B43A4 CBZ X24, 0x32B43F0
	0x032B43A8 ADRP X10, 0xE70000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x1129000
	008 Move W8, [X23+2042]
	009 Move W22, W4
	010 Move W20, W3
	011 Move X21, X2
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xE72000
	018 Move X0, [X0+808]
	019 Call 0x1C17CF4
	020 Move X0, 0xE42000
	021 Move X0, [X0+632]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+2042], W8
	025 Move X0, X19
	026 Call __BinaryWriter.InternalWriteItemNull, X0
	027 Compare X21, 0
	028 JumpIfEqual {60}
	029 Move TEMP, X22
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {69}
	033 Move X22, [X19+168]
	034 Compare X22, 0
	035 JumpIfNotEqual {46}
	036 Move X8, 0xE72000
	037 Move X8, [X8+808]
	038 Move X0, [X8]
	039 Call 0x1C17F10
	040 Move X1, X31
	041 Move X22, X0
	042 Call Object..ctor, X0
	043 Move [X19+168], X22
	044 Compare X22, 0
	045 JumpIfEqual {76}
	046 Move [X22+16], W20
	047 Move [X22+24], X21
	048 Compare X22, 0
	049 JumpIfEqual {76}
	050 Move X0, X22
	051 Move X1, X19
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X22, [X31+16]
	055 Move X21, [X31+24]
	056 Move X30, [X31+48]
	057 Move X23, [X31+56]
	058 Call BinaryAssembly.Write, X0, X1
	059 Return 
	060 Move X8, 0xE42000
	061 Move X8, [X8+632]
	062 Move X8, [X8]
	063 Move X8, [X8+184]
	064 Move X21, [X8]
	065 Move TEMP, X22
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfEqual {33}
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X22, [X31+16]
	072 Move X21, [X31+24]
	073 Move X30, [X31+48]
	074 Move X23, [X31+56]
	075 Return 
	076 Call 0x1C17F20

Method: System.Void WriteValue(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, System.Object value)

Disassembly:
	0x032AC8D4 LDR X30, [X31], #0x20
	0x032AC8D8 RET
	0x032AC8DC MOVZ W8, 0x1
	0x032AC8E0 MOV X1, X31
	0x032AC8E4 STRB W8, [X0 + 0x30]
	0x032AC8E8 B 0x33BDD8C
	0x032AC8EC STP X30, X21, [X31 - 0x20]!
	0x032AC8F0 STP X20, X19, [X31 + 0x10]
	0x032AC8F4 ADRP X21, 0x1130000
	0x032AC8F8 LDRB W8, [X21 + 0x7CA]
	0x032AC8FC MOV X19, X1
	0x032AC900 MOV X20, X0
	0x032AC904 TBNZ X8, 0x0, 0x32AC91C
	0x032AC908 ADRP X0, 0xE49000
	0x032AC90C LDR X0, [X0 + 0x278]
	0x032AC910 BL 0x1C16CF4
	0x032AC914 MOVZ W8, 0x1
	0x032AC918 STRB W8, [X21 + 0x7CA]
	0x032AC91C CBZ X19, 0x32ACA28
	0x032AC920 LDR X0, [X19 + 0x30]
	0x032AC924 CBZ X0, 0x32ACA28
	0x032AC928 LDR X8, [X0]
	0x032AC92C MOVZ W1, 0x16
	0x032AC930 LDP X9, X2, [X8 + 0x1C8]
	0x032AC934 BLR X9
	0x032AC938 LDR X0, [X19 + 0x30]
	0x032AC93C CBZ X0, 0x32ACA28
	0x032AC940 LDR X8, [X0]
	0x032AC944 LDR W1, [X20 + 0x34]
	0x032AC948 LDR X9, [X8 + 0x248]
	0x032AC94C LDR X2, [X8 + 0x250]
	0x032AC950 BLR X9
	0x032AC954 LDR W8, [X20 + 0x34]
	0x032AC958 TBZ X8, 0xB, 0x32AC970
	0x032AC95C LDR X0, [X20 + 0x38]
	0x032AC960 LDR X1, [X20 + 0x10]
	0x032AC964 MOV X2, X19
	0x032AC968 BL 0x32AB7A8
	0x032AC96C LDR W8, [X20 + 0x34]
	0x032AC970 TBZ X8, 0x5, 0x32AC9A0
	0x032AC974 LDR X0, [X20 + 0x20]
	0x032AC978 CBZ X0, 0x32AC994
	0x032AC97C ADRP X8, 0xE49000
	0x032AC980 LDR X8, [X8 + 0x278]
	0x032AC984 LDR X1, [X8]
	0x032AC988 LDR X8, [X0]
	0x032AC98C CMP X8, X1
	0x032AC990 B.NE 0x32ACA30
	0x032AC994 MOV X1, X19
	0x032AC998 BL 0x32AB734
	0x032AC99C LDR W8, [X20 + 0x34]
	0x032AC9A0 TBNZ X8, 0x1, 0x32AC9B0
	0x032AC9A4 LDP X20, X19, [X31 + 0x10]
	0x032AC9A8 LDP X30, X21, [X31], #0x20
	0x032AC9AC RET
	0x032AC9B0 LDR X8, [X20 + 0x18]
	0x032AC9B4 CBZ X8, 0x32ACA28
	0x032AC9B8 LDR X0, [X19 + 0x30]
	0x032AC9BC CBZ X0, 0x32ACA28
	0x032AC9C0 LDR X9, [X0]
	0x032AC9C4 LDR W1, [X8 + 0x18]
	0x032AC9C8 LDR X8, [X9 + 0x248]
	0x032AC9CC LDR X2, [X9 + 0x250]
	0x032AC9D0 BLR X8
	0x032AC9D4 LDR X8, [X20 + 0x18]
	0x032AC9D8 CBZ X8, 0x32ACA28
	0x032AC9DC MOVZ W21, 0x4
	0x032AC9E0 LDR W9, [X8 + 0x18]
	0x032AC9E4 SUB X10, X21, 0x4
	0x032AC9E8 CMP X10, W9, SXTW
	0x032AC9EC B.GE 0x32AC9A4
	0x032AC9F0 LDR X11, [X20 + 0x28]
	0x032AC9F4 CBZ X11, 0x32ACA28
	0x032AC9F8 LDR W12, [X11 + 0x18]
	0x032AC9FC CMP X10, X12
	0x032ACA00 B.CS 0x32ACA2C
	0x032ACA04 CMP X10, X9
	0x032ACA08 B.CS 0x32ACA2C
	0x032ACA0C LDR X0, [X11, X21, LSL #3]
	0x032ACA10 LDR X1, [X8, X21, LSL #3]
	0x032ACA14 MOV X2, X19
	0x032ACA18 BL 0x32AB7A8
	0x032ACA1C LDR X8, [X20 + 0x18]
	0x032ACA20 ADD X21, X21, 0x1
	0x032ACA24 CBNZ X8, 0x32AC9E0
	0x032ACA28 BL 0x1C16F20
	0x032ACA2C BL 0x1C16F28
	0x032ACA30 BL 0x1C171E0
	0x032ACA34 RET
	0x032ACA38 MOV X1, X31
	0x032ACA3C B 0x33BDD8C
	0x032ACA40 STR W1, [X0 + 0x10]
	0x032ACA44 STR X2, [X0 + 0x18]
	0x032ACA48 RET
	0x032ACA4C STR X30, [X31 - 0x20]!
	0x032ACA50 STP X20, X19, [X31 + 0x10]
	0x032ACA54 CBZ X1, 0x32ACAB8
	0x032ACA58 MOV X19, X0
	0x032ACA5C LDR X0, [X1 + 0x30]
	0x032ACA60 MOV X20, X1
	0x032ACA64 CBZ X0, 0x32ACAB8
	0x032ACA68 LDR X8, [X0]
	0x032ACA6C MOVZ W1, 0x6
	0x032ACA70 LDP X9, X2, [X8 + 0x1C8]
	0x032ACA74 BLR X9
	0x032ACA78 LDR X0, [X20 + 0x30]
	0x032ACA7C CBZ X0, 0x32ACAB8
	0x032ACA80 LDR X8, [X0]
	0x032ACA84 LDR W1, [X19 + 0x10]
	0x032ACA88 LDR X9, [X8 + 0x248]
	0x032ACA8C LDR X2, [X8 + 0x250]
	0x032ACA90 BLR X9
	0x032ACA94 LDR X0, [X20 + 0x30]
	0x032ACA98 CBZ X0, 0x32ACAB8
	0x032ACA9C LDR X8, [X0]
	0x032ACAA0 LDR X1, [X19 + 0x18]
	0x032ACAA4 LDP X20, X19, [X31 + 0x10]
	0x032ACAA8 LDR X3, [X8 + 0x298]
	0x032ACAAC LDR X2, [X8 + 0x2A0]
	0x032ACAB0 LDR X30, [X31], #0x20
	0x032ACAB4 BR X3
	0x032ACAB8 BL 0x1C16F20
	0x032ACABC STR X30, [X31 - 0x20]!
	0x032ACAC0 STP X20, X19, [X31 + 0x10]
	0x032ACAC4 CBZ X1, 0x32ACB14
	0x032ACAC8 MOV X19, X0
	0x032ACACC LDR X0, [X1 + 0x68]
	0x032ACAD0 MOV X20, X1
	0x032ACAD4 CBZ X0, 0x32ACB14
	0x032ACAD8 LDR X8, [X0]
	0x032ACADC LDR X9, [X8 + 0x228]
	0x032ACAE0 LDR X1, [X8 + 0x230]
	0x032ACAE4 BLR X9
	0x032ACAE8 STR W0, [X19 + 0x10]
	0x032ACAEC LDR X0, [X20 + 0x68]
	0x032ACAF0 CBZ X0, 0x32ACB14
	0x032ACAF4 LDR X8, [X0]
	0x032ACAF8 LDR X9, [X8 + 0x298]
	0x032ACAFC LDR X1, [X8 + 0x2A0]
	0x032ACB00 BLR X9
	0x032ACB04 STR X0, [X19 + 0x18]
	0x032ACB08 LDP X20, X19, [X31 + 0x10]
	0x032ACB0C LDR X30, [X31], #0x20
	0x032ACB10 RET
	0x032ACB14 BL 0x1C16F20
	0x032ACB18 RET
	0x032ACB1C MOV X1, X31
	0x032ACB20 B 0x33BDD8C
	0x032ACB24 STR X30, [X31 - 0x20]!
	0x032ACB28 STP X20, X19, [X31 + 0x10]
	0x032ACB2C CBZ X1, 0x32ACB7C
	0x032ACB30 MOV X19, X0
	0x032ACB34 LDR X0, [X1 + 0x68]
	0x032ACB38 MOV X20, X1
	0x032ACB3C CBZ X0, 0x32ACB7C
	0x032ACB40 LDR X8, [X0]
	0x032ACB44 LDR X9, [X8 + 0x228]
	0x032ACB48 LDR X1, [X8 + 0x230]
	0x032ACB4C BLR X9
	0x032ACB50 STR W0, [X19 + 0x10]
	0x032ACB54 LDR X0, [X20 + 0x68]
	0x032ACB58 CBZ X0, 0x32ACB7C
	0x032ACB5C LDR X8, [X0]
	0x032ACB60 LDR X9, [X8 + 0x228]
	0x032ACB64 LDR X1, [X8 + 0x230]
	0x032ACB68 BLR X9
	0x032ACB6C STR W0, [X19 + 0x14]
	0x032ACB70 LDP X20, X19, [X31 + 0x10]
	0x032ACB74 LDR X30, [X31], #0x20
	0x032ACB78 RET
	0x032ACB7C BL 0x1C16F20
	0x032ACB80 RET
	0x032ACB84 MOV X1, X31
	0x032ACB88 B 0x33BDD8C
	0x032ACB8C STP X30, X19, [X31 - 0x10]!
	0x032ACB90 CBZ X1, 0x32ACBBC
	0x032ACB94 MOV X19, X0
	0x032ACB98 LDR X0, [X1 + 0x68]
	0x032ACB9C CBZ X0, 0x32ACBBC
	0x032ACBA0 LDR X8, [X0]
	0x032ACBA4 LDR X9, [X8 + 0x228]
	0x032ACBA8 LDR X1, [X8 + 0x230]
	0x032ACBAC BLR X9
	0x032ACBB0 STR W0, [X19 + 0x10]
	0x032ACBB4 LDP X30, X19, [X31], #0x10
	0x032ACBB8 RET
	0x032ACBBC BL 0x1C16F20
	0x032ACBC0 RET
	0x032ACBC4 MOV X1, X31
	0x032ACBC8 B 0x33BDD8C
	0x032ACBCC STR W1, [X0 + 0x10]
	0x032ACBD0 STR X2, [X0 + 0x18]
	0x032ACBD4 RET
	0x032ACBD8 STR X30, [X31 - 0x20]!
	0x032ACBDC STP X20, X19, [X31 + 0x10]
	0x032ACBE0 CBZ X1, 0x32ACC34
	0x032ACBE4 MOV X20, X0
	0x032ACBE8 LDR X0, [X1 + 0x30]
	0x032ACBEC MOV X19, X1
	0x032ACBF0 CBZ X0, 0x32ACC34
	0x032ACBF4 LDR X8, [X0]
	0x032ACBF8 MOVZ W1, 0x8
	0x032ACBFC LDP X9, X2, [X8 + 0x1C8]
	0x032ACC00 BLR X9
	0x032ACC04 LDR X0, [X19 + 0x30]
	0x032ACC08 CBZ X0, 0x32ACC34
	0x032ACC0C LDR X8, [X0]
	0x032ACC10 LDR W1, [X20 + 0x10]
	0x032ACC14 LDP X9, X2, [X8 + 0x1C8]
	0x032ACC18 BLR X9
	0x032ACC1C LDR W1, [X20 + 0x10]
	0x032ACC20 LDR X2, [X20 + 0x18]
	0x032ACC24 MOV X0, X19
	0x032ACC28 LDP X20, X19, [X31 + 0x10]
	0x032ACC2C LDR X30, [X31], #0x20
	0x032ACC30 B 0x32AB8D4
	0x032ACC34 BL 0x1C16F20
	0x032ACC38 STR X30, [X31 - 0x20]!
	0x032ACC3C STP X20, X19, [X31 + 0x10]
	0x032ACC40 CBZ X1, 0x32ACC80
	0x032ACC44 MOV X19, X0
	0x032ACC48 LDR X0, [X1 + 0x68]
	0x032ACC4C MOV X20, X1
	0x032ACC50 CBZ X0, 0x32ACC80
	0x032ACC54 LDR X8, [X0]
	0x032ACC58 LDP X9, X1, [X8 + 0x1D8]
	0x032ACC5C BLR X9
	0x032ACC60 AND W1, W0, 0xFF
	0x032ACC64 MOV X0, X20
	0x032ACC68 STR W1, [X19 + 0x10]
	0x032ACC6C BL 0x32ACC84
	0x032ACC70 STR X0, [X19 + 0x18]
	0x032ACC74 LDP X20, X19, [X31 + 0x10]
	0x032ACC78 LDR X30, [X31], #0x20
	0x032ACC7C RET
	0x032ACC80 BL 0x1C16F20
	0x032ACC84 SUB X31, X31, 0x50
	0x032ACC88 STR X30, [X31 + 0x20]
	0x032ACC8C STP X22, X21, [X31 + 0x30]
	0x032ACC90 STP X20, X19, [X31 + 0x40]
	0x032ACC94 MRS X21, 0xC000
	0x032ACC98 LDR X8, [X21 + 0x28]
	0x032ACC9C ADRP X22, 0x1130000
	0x032ACCA0 MOV W19, W1
	0x032ACCA4 MOV X20, X0
	0x032ACCA8 STR X8, [X31 + 0x18]
	0x032ACCAC LDRB W8, [X22 + 0x848]
	0x032ACCB0 TBNZ X8, 0x0, 0x32ACD70
	0x032ACCB4 ADRP X0, 0xE47000
	0x032ACCB8 LDR X0, [X0 + 0xB58]
	0x032ACCBC BL 0x1C16CF4
	0x032ACCC0 ADRP X0, 0xE48000
	0x032ACCC4 LDR X0, [X0 + 0x9D8]
	0x032ACCC8 BL 0x1C16CF4
	0x032ACCCC ADRP X0, 0xE49000
	0x032ACCD0 LDR X0, [X0 + 0x170]
	0x032ACCD4 BL 0x1C16CF4
	0x032ACCD8 ADRP X0, 0xE48000
	0x032ACCDC LDR X0, [X0 + 0x9F0]
	0x032ACCE0 BL 0x1C16CF4
	0x032ACCE4 ADRP X0, 0xE6F000
	0x032ACCE8 LDR X0, [X0 + 0x5F0]
	0x032ACCEC BL 0x1C16CF4
	0x032ACCF0 ADRP X0, 0xE4A000
	0x032ACCF4 LDR X0, [X0 + 0x978]
	0x032ACCF8 BL 0x1C16CF4
	0x032ACCFC ADRP X0, 0xE4B000
	0x032ACD00 LDR X0, [X0 + 0x628]
	0x032ACD04 BL 0x1C16CF4
	0x032ACD08 ADRP X0, 0xE47000
	0x032ACD0C LDR X0, [X0 + 0x758]
	0x032ACD10 BL 0x1C16CF4
	0x032ACD14 ADRP X0, 0xE49000
	0x032ACD18 LDR X0, [X0 + 0xA60]
	0x032ACD1C BL 0x1C16CF4
	0x032ACD20 ADRP X0, 0xE70000
	0x032ACD24 LDR X0, [X0 + 0x6B0]
	0x032ACD28 BL 0x1C16CF4
	0x032ACD2C ADRP X0, 0xE47000
	0x032ACD30 LDR X0, [X0 + 0xA90]
	0x032ACD34 BL 0x1C16CF4
	0x032ACD38 ADRP X0, 0xE49000
	0x032ACD3C LDR X0, [X0 + 0x570]
	0x032ACD40 BL 0x1C16CF4
	0x032ACD44 ADRP X0, 0xE4C000
	0x032ACD48 LDR X0, [X0 + 0x658]
	0x032ACD4C BL 0x1C16CF4
	0x032ACD50 ADRP X0, 0xE4F000
	0x032ACD54 LDR X0, [X0 + 0x720]
	0x032ACD58 BL 0x1C16CF4
	0x032ACD5C ADRP X0, 0xE48000
	0x032ACD60 LDR X0, [X0 + 0x758]
	0x032ACD64 BL 0x1C16CF4
	0x032ACD68 MOVZ W8, 0x1
	0x032ACD6C STRB W8, [X22 + 0x848]
	0x032ACD70 SUB W8, W19, 0x1
	0x032ACD74 CMP W8, 0xF
	0x032ACD78 B.HI 0x32ACFF0
	0x032ACD7C ADRP X9, 0xFFFFFFFFFD8EA000
	0x032ACD80 ADD X9, X9, 0x518
	0x032ACD84 ADR X10, 0x10
	0x032ACD88 LDRB W11, [X9, X8, LSL]
	0x032ACD8C ADD X10, X10, X11, 0x2, LSL
	0x032ACD90 BR X10
	0x032ACD94 LDR X0, [X20 + 0x68]
	0x032ACD98 CBZ X0, 0x32ACFEC
	0x032ACD9C LDR X8, [X0]
	0x032ACDA0 LDP X9, X1, [X8 + 0x1C8]
	0x032ACDA4 BLR X9
	0x032ACDA8 ADRP X8, 0xE47000
	0x032ACDAC LDR X8, [X8 + 0xB58]
	0x032ACDB0 AND W9, W0, 0x1
	0x032ACDB4 STRB W9, [X31 + 0x8]
	0x032ACDB8 B 0x32ACF60
	0x032ACDBC MOV X0, X20
	0x032ACDC0 BL 0x32BC9E8
	0x032ACDC4 ADRP X8, 0xE48000
	0x032ACDC8 LDR X8, [X8 + 0x9F0]
	0x032ACDCC B 0x32ACF88
	0x032ACDD0 LDR X0, [X20 + 0x68]
	0x032ACDD4 CBZ X0, 0x32ACFEC
	0x032ACDD8 LDR X8, [X0]
	0x032ACDDC LDR X9, [X8 + 0x268]
	0x032ACDE0 LDR X1, [X8 + 0x270]
	0x032ACDE4 BLR X9
	0x032ACDE8 ADRP X8, 0xE47000
	0x032ACDEC LDR X8, [X8 + 0xA90]
	0x032ACDF0 STR S0, [X31 + 0x8]
	0x032ACDF4 B 0x32ACED0
	0x032ACDF8 LDR X0, [X20 + 0x68]
	0x032ACDFC CBZ X0, 0x32ACFEC
	0x032ACE00 LDR X8, [X0]
	0x032ACE04 LDR X9, [X8 + 0x218]
	0x032ACE08 LDR X1, [X8 + 0x220]
	0x032ACE0C BLR X9
	0x032ACE10 ADRP X8, 0xE4C000
	0x032ACE14 LDR X8, [X8 + 0x658]
	0x032ACE18 B 0x32ACF40
	0x032ACE1C LDR X0, [X20 + 0x68]
	0x032ACE20 CBZ X0, 0x32ACFEC
	0x032ACE24 LDR X8, [X0]
	0x032ACE28 LDP X9, X1, [X8 + 0x1D8]
	0x032ACE2C BLR X9
	0x032ACE30 ADRP X8, 0xE70000
	0x032ACE34 LDR X8, [X8 + 0x6B0]
	0x032ACE38 B 0x32ACEA0
	0x032ACE3C LDR X0, [X20 + 0x68]
	0x032ACE40 CBZ X0, 0x32ACFEC
	0x032ACE44 LDR X8, [X0]
	0x032ACE48 LDR X9, [X8 + 0x248]
	0x032ACE4C LDR X1, [X8 + 0x250]
	0x032ACE50 BLR X9
	0x032ACE54 ADRP X8, 0xE49000
	0x032ACE58 LDR X8, [X8 + 0x570]
	0x032ACE5C B 0x32ACF88
	0x032ACE60 LDR X0, [X20 + 0x68]
	0x032ACE64 CBZ X0, 0x32ACFEC
	0x032ACE68 LDR X8, [X0]
	0x032ACE6C LDR X9, [X8 + 0x238]
	0x032ACE70 LDR X1, [X8 + 0x240]
	0x032ACE74 BLR X9
	0x032ACE78 ADRP X8, 0xE4F000
	0x032ACE7C LDR X8, [X8 + 0x720]
	0x032ACE80 B 0x32ACFB4
	0x032ACE84 LDR X0, [X20 + 0x68]
	0x032ACE88 CBZ X0, 0x32ACFEC
	0x032ACE8C LDR X8, [X0]
	0x032ACE90 LDP X9, X1, [X8 + 0x1D8]
	0x032ACE94 BLR X9
	0x032ACE98 ADRP X8, 0xE48000
	0x032ACE9C LDR X8, [X8 + 0x9D8]
	0x032ACEA0 LDR X8, [X8]
	0x032ACEA4 STRB W0, [X31 + 0x8]
	0x032ACEA8 B 0x32ACFBC
	0x032ACEAC LDR X0, [X20 + 0x68]
	0x032ACEB0 CBZ X0, 0x32ACFEC
	0x032ACEB4 LDR X8, [X0]
	0x032ACEB8 LDR X9, [X8 + 0x278]
	0x032ACEBC LDR X1, [X8 + 0x280]
	0x032ACEC0 BLR X9
	0x032ACEC4 ADRP X8, 0xE4A000
	0x032ACEC8 LDR X8, [X8 + 0x978]
	0x032ACECC STR D0, [X31 + 0x8]
	0x032ACED0 LDR X0, [X8]
	0x032ACED4 ADD X1, X31, 0x8
	0x032ACED8 B 0x32ACFC4
	0x032ACEDC LDR X0, [X20 + 0x68]
	0x032ACEE0 CBZ X0, 0x32ACFEC
	0x032ACEE4 LDR X8, [X0]
	0x032ACEE8 LDR X9, [X8 + 0x208]
	0x032ACEEC LDR X1, [X8 + 0x210]
	0x032ACEF0 BLR X9
	0x032ACEF4 ADRP X8, 0xE4B000
	0x032ACEF8 LDR X8, [X8 + 0x628]
	0x032ACEFC B 0x32ACF40
	0x032ACF00 LDR X0, [X20 + 0x68]
	0x032ACF04 CBZ X0, 0x32ACFEC
	0x032ACF08 LDR X8, [X0]
	0x032ACF0C LDR X9, [X8 + 0x258]
	0x032ACF10 LDR X1, [X8 + 0x260]
	0x032ACF14 BLR X9
	0x032ACF18 ADRP X8, 0xE48000
	0x032ACF1C LDR X8, [X8 + 0x758]
	0x032ACF20 B 0x32ACF88
	0x032ACF24 LDR X0, [X20 + 0x68]
	0x032ACF28 CBZ X0, 0x32ACFEC
	0x032ACF2C LDR X8, [X0]
	0x032ACF30 LDP X9, X1, [X8 + 0x1F8]
	0x032ACF34 BLR X9
	0x032ACF38 ADRP X8, 0xE49000
	0x032ACF3C LDR X8, [X8 + 0x170]
	0x032ACF40 LDR X8, [X8]
	0x032ACF44 STRH W0, [X31 + 0x8]
	0x032ACF48 B 0x32ACFBC
	0x032ACF4C MOV X0, X20
	0x032ACF50 BL 0x32BC860
	0x032ACF54 ADRP X8, 0xE6F000
	0x032ACF58 LDR X8, [X8 + 0x5F0]
	0x032ACF5C STP X0, X1, [X31 + 0x8]
	0x032ACF60 LDR X8, [X8]
	0x032ACF64 B 0x32ACFBC
	0x032ACF68 LDR X0, [X20 + 0x68]
	0x032ACF6C CBZ X0, 0x32ACFEC
	0x032ACF70 LDR X8, [X0]
	0x032ACF74 LDR X9, [X8 + 0x248]
	0x032ACF78 LDR X1, [X8 + 0x250]
	0x032ACF7C BLR X9
	0x032ACF80 ADRP X8, 0xE49000
	0x032ACF84 LDR X8, [X8 + 0xA60]
	0x032ACF88 LDR X8, [X8]
	0x032ACF8C STR X0, [X31 + 0x8]
	0x032ACF90 B 0x32ACFBC
	0x032ACF94 LDR X0, [X20 + 0x68]
	0x032ACF98 CBZ X0, 0x32ACFEC
	0x032ACF9C LDR X8, [X0]
	0x032ACFA0 LDR X9, [X8 + 0x228]
	0x032ACFA4 LDR X1, [X8 + 0x230]
	0x032ACFA8 BLR X9
	0x032ACFAC ADRP X8, 0xE47000
	0x032ACFB0 LDR X8, [X8 + 0x758]
	0x032ACFB4 LDR X8, [X8]
	0x032ACFB8 STR W0, [X31 + 0x8]
	0x032ACFBC ADD X1, X31, 0x8
	0x032ACFC0 MOV X0, X8
	0x032ACFC4 BL 0x1C16E04
	0x032ACFC8 LDR X8, [X21 + 0x28]
	0x032ACFCC LDR X9, [X31 + 0x18]
	0x032ACFD0 CMP X8, X9
	0x032ACFD4 B.NE 0x32AD0A4
	0x032ACFD8 LDP X20, X19, [X31 + 0x40]
	0x032ACFDC LDP X22, X21, [X31 + 0x30]
	0x032ACFE0 LDR X30, [X31 + 0x20]
	0x032ACFE4 ADD X31, X31, 0x50
	0x032ACFE8 RET
	0x032ACFEC BL 0x1C16F20
	0x032ACFF0 ADRP X0, 0xE47000
	0x032ACFF4 LDR X0, [X0 + 0x9D0]
	0x032ACFF8 BL 0x1C16D08
	0x032ACFFC MOVZ W1, 0x1
	0x032AD000 BL 0x1C16D6C
	0x032AD004 MOV X20, X0
	0x032AD008 STR W19, [X31 + 0x8]
	0x032AD00C ADRP X0, 0xE77000
	0x032AD010 LDR X0, [X0 + 0xF88]
	0x032AD014 BL 0x1C16D08
	0x032AD018 ADD X1, X31, 0x8
	0x032AD01C BL 0x1C16E04
	0x032AD020 MOV X1, X31
	0x032AD024 BL 0x33B162C
	0x032AD028 MOV X19, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1131000
	007 Move W8, [X22+2043]
	008 Move X20, X2
	009 Move W21, W1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0xE51000
	016 Move X0, [X0+2536]
	017 Call 0x1C17CF4
	018 Move X0, 0xE4A000
	019 Move X0, [X0+3144]
	020 Call 0x1C17CF4
	021 Move X0, 0xE49000
	022 Move X0, [X0+2544]
	023 Call 0x1C17CF4
	024 Move X0, 0xE4A000
	025 Move X0, [X0+1392]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X22+2043], W8
	029 Subtract W8, W21, 1
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X9, -40980480
	032 Add X9, X9, 1272
	033 NotImplemented "Instruction ADR not yet implemented."
	034 NotImplemented "Instruction LDRH not yet implemented."
	035 Add X10, X10, X11
	036 CallNoReturn X10
	037 Move X8, 0xE4A000
	038 Move X8, [X8+3144]
	039 Move X0, [X8]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X31
	045 Call CultureInfo.get_InvariantCulture
	046 Move X8, 0xE51000
	047 Move X8, [X8+2536]
	048 Move X21, X0
	049 Move X8, [X8]
	050 Move W9, [X8+224]
	051 Compare W9, 0
	052 JumpIfNotEqual {55}
	053 Move X0, X8
	054 Call 0x1C17DFC
	055 Move X0, X20
	056 Move X1, X21
	057 Move X2, X31
	058 Call Convert.ToBoolean, X0, X1
	059 Move X8, [X19+48]
	060 Compare X8, 0
	061 JumpIfEqual {476}
	062 Move X9, [X8]
	063 And W1, W0, 1
	064 Move X3, [X9+440]
	065 Move X2, [X9+448]
	066 Move X8, 0xE4A000
	067 Move X8, [X8+3144]
	068 Move X0, [X8]
	069 Move W8, [X0+224]
	070 Compare W8, 0
	071 JumpIfNotEqual {73}
	072 Call 0x1C17DFC
	073 Move X0, X31
	074 Call CultureInfo.get_InvariantCulture
	075 Move X8, 0xE51000
	076 Move X8, [X8+2536]
	077 Move X21, X0
	078 Move X8, [X8]
	079 Move W9, [X8+224]
	080 Compare W9, 0
	081 JumpIfNotEqual {84}
	082 Move X0, X8
	083 Call 0x1C17DFC
	084 Move X0, X20
	085 Move X1, X21
	086 Move X2, X31
	087 Call Convert.ToByte, X0, X1
	088 Move X8, 0xE4A000
	089 Move X8, [X8+3144]
	090 Move X0, [X8]
	091 Move W8, [X0+224]
	092 Compare W8, 0
	093 JumpIfNotEqual {95}
	094 Call 0x1C17DFC
	095 Move X0, X31
	096 Call CultureInfo.get_InvariantCulture
	097 Move X8, 0xE51000
	098 Move X8, [X8+2536]
	099 Move X21, X0
	100 Move X8, [X8]
	101 Move W9, [X8+224]
	102 Compare W9, 0
	103 JumpIfNotEqual {106}
	104 Move X0, X8
	105 Call 0x1C17DFC
	106 Move X0, X20
	107 Move X1, X21
	108 Move X2, X31
	109 Call Convert.ToChar, X0, X1
	110 Move X8, [X19+48]
	111 Compare X8, 0
	112 JumpIfEqual {476}
	113 Move X9, [X8]
	114 Move W1, W0
	115 Move X3, [X9+504]
	116 Move X2, [X9+512]
	117 Move X8, 0xE4A000
	118 Move X8, [X8+3144]
	119 Move X0, [X8]
	120 Move W8, [X0+224]
	121 Compare W8, 0
	122 JumpIfNotEqual {124}
	123 Call 0x1C17DFC
	124 Move X0, X31
	125 Call CultureInfo.get_InvariantCulture
	126 Move X8, 0xE51000
	127 Move X8, [X8+2536]
	128 Move X21, X0
	129 Move X8, [X8]
	130 Move W9, [X8+224]
	131 Compare W9, 0
	132 JumpIfNotEqual {135}
	133 Move X0, X8
	134 Call 0x1C17DFC
	135 Move X0, X20
	136 Move X1, X21
	137 Move X2, X31
	138 Call Convert.ToDecimal, X0, X1
	139 Move X2, X0
	140 Move X0, X19
	141 Move X20, [X31+32]
	142 Move X19, [X31+40]
	143 Move X22, [X31+16]
	144 Move X21, [X31+24]
	145 Move X3, X1
	146 Move X1, X2
	147 Move X2, X3
	148 Move X30, [X31+48]
	149 Call __BinaryWriter.WriteDecimal, X0, X1
	150 Return 
	151 Move X8, 0xE4A000
	152 Move X8, [X8+3144]
	153 Move X0, [X8]
	154 Move W8, [X0+224]
	155 Compare W8, 0
	156 JumpIfNotEqual {158}
	157 Call 0x1C17DFC
	158 Move X0, X31
	159 Call CultureInfo.get_InvariantCulture
	160 Move X8, 0xE51000
	161 Move X8, [X8+2536]
	162 Move X21, X0
	163 Move X8, [X8]
	164 Move W9, [X8+224]
	165 Compare W9, 0
	166 JumpIfNotEqual {169}
	167 Move X0, X8
	168 Call 0x1C17DFC
	169 Move X0, X20
	170 Move X1, X21
	171 Move X2, X31
	172 Call Convert.ToDouble, X0, X1
	173 Move X0, [X19+48]
	174 Compare X0, 0
	175 JumpIfEqual {476}
	176 Move X8, [X0]
	177 Move X20, [X31+32]
	178 Move X19, [X31+40]
	179 Move X22, [X31+16]
	180 Move X21, [X31+24]
	181 Move X2, [X8+536]
	182 Move X1, [X8+544]
	183 Move X30, [X31+48]
	184 CallNoReturn X2
	185 Move X8, 0xE4A000
	186 Move X8, [X8+3144]
	187 Move X0, [X8]
	188 Move W8, [X0+224]
	189 Compare W8, 0
	190 JumpIfNotEqual {192}
	191 Call 0x1C17DFC
	192 Move X0, X31
	193 Call CultureInfo.get_InvariantCulture
	194 Move X8, 0xE51000
	195 Move X8, [X8+2536]
	196 Move X21, X0
	197 Move X8, [X8]
	198 Move W9, [X8+224]
	199 Compare W9, 0
	200 JumpIfNotEqual {203}
	201 Move X0, X8
	202 Call 0x1C17DFC
	203 Move X0, X20
	204 Move X1, X21
	205 Move X2, X31
	206 Call Convert.ToInt16, X0, X1
	207 Move X8, [X19+48]
	208 Compare X8, 0
	209 JumpIfEqual {476}
	210 Move X9, [X8]
	211 Move W1, W0
	212 Move X3, [X9+552]
	213 Move X2, [X9+560]
	214 Move X8, 0xE4A000
	215 Move X8, [X8+3144]
	216 Move X0, [X8]
	217 Move W8, [X0+224]
	218 Compare W8, 0
	219 JumpIfNotEqual {221}
	220 Call 0x1C17DFC
	221 Move X0, X31
	222 Call CultureInfo.get_InvariantCulture
	223 Move X8, 0xE51000
	224 Move X8, [X8+2536]
	225 Move X21, X0
	226 Move X8, [X8]
	227 Move W9, [X8+224]
	228 Compare W9, 0
	229 JumpIfNotEqual {232}
	230 Move X0, X8
	231 Call 0x1C17DFC
	232 Move X0, X20
	233 Move X1, X21
	234 Move X2, X31
	235 Call Convert.ToInt32, X0, X1
	236 Move X8, [X19+48]
	237 Compare X8, 0
	238 JumpIfEqual {476}
	239 Move X9, [X8]
	240 Move W1, W0
	241 Move X3, [X9+584]
	242 Move X2, [X9+592]
	243 Move X8, 0xE4A000
	244 Move X8, [X8+3144]
	245 Move X0, [X8]
	246 Move W8, [X0+224]
	247 Compare W8, 0
	248 JumpIfNotEqual {250}
	249 Call 0x1C17DFC
	250 Move X0, X31
	251 Call CultureInfo.get_InvariantCulture
	252 Move X8, 0xE51000
	253 Move X8, [X8+2536]
	254 Move X21, X0
	255 Move X8, [X8]
	256 Move W9, [X8+224]
	257 Compare W9, 0
	258 JumpIfNotEqual {261}
	259 Move X0, X8
	260 Call 0x1C17DFC
	261 Move X0, X20
	262 Move X1, X21
	263 Move X2, X31
	264 Call Convert.ToInt64, X0, X1
	265 Move X8, [X19+48]
	266 Compare X8, 0
	267 JumpIfEqual {476}
	268 Move X9, [X8]
	269 Move X1, X0
	270 Move X3, [X9+616]
	271 Move X2, [X9+624]
	272 Move X8, 0xE4A000
	273 Move X8, [X8+3144]
	274 Move X0, [X8]
	275 Move W8, [X0+224]
	276 Compare W8, 0
	277 JumpIfNotEqual {279}
	278 Call 0x1C17DFC
	279 Move X0, X31
	280 Call CultureInfo.get_InvariantCulture
	281 Move X8, 0xE51000
	282 Move X8, [X8+2536]
	283 Move X21, X0
	284 Move X8, [X8]
	285 Move W9, [X8+224]
	286 Compare W9, 0
	287 JumpIfNotEqual {290}
	288 Move X0, X8
	289 Call 0x1C17DFC
	290 Move X0, X20
	291 Move X1, X21
	292 Move X2, X31
	293 Call Convert.ToSByte, X0, X1
	294 Move X8, [X19+48]
	295 Compare X8, 0
	296 JumpIfEqual {476}
	297 Move X9, [X8]
	298 Move W1, W0
	299 Move X3, [X9+456]
	300 Move X2, [X9+464]
	301 Move X8, 0xE4A000
	302 Move X8, [X8+3144]
	303 Move X0, [X8]
	304 Move W8, [X0+224]
	305 Compare W8, 0
	306 JumpIfNotEqual {308}
	307 Call 0x1C17DFC
	308 Move X0, X31
	309 Call CultureInfo.get_InvariantCulture
	310 Move X8, 0xE51000
	311 Move X8, [X8+2536]
	312 Move X21, X0
	313 Move X8, [X8]
	314 Move W9, [X8+224]
	315 Compare W9, 0
	316 JumpIfNotEqual {319}
	317 Move X0, X8
	318 Call 0x1C17DFC
	319 Move X0, X20
	320 Move X1, X21
	321 Move X2, X31
	322 Call Convert.ToSingle, X0, X1
	323 Move X0, [X19+48]
	324 Compare X0, 0
	325 JumpIfEqual {476}
	326 Move X8, [X0]
	327 Move X20, [X31+32]
	328 Move X19, [X31+40]
	329 Move X22, [X31+16]
	330 Move X21, [X31+24]
	331 Move X2, [X8+648]
	332 Move X1, [X8+656]
	333 Move X30, [X31+48]
	334 CallNoReturn X2
	335 Compare X20, 0
	336 JumpIfEqual {476}
	337 Move X8, 0xE4A000
	338 Move X8, [X8+1392]
	339 Move X9, [X20]
	340 Move X1, [X8]
	341 Move X8, [X9+64]
	342 Move X9, [X1+64]
	343 NotImplemented "Instruction CMP not yet implemented."
	344 Move X0, X20
	345 Call 0x1C17E08
	346 Move X1, [X0]
	347 Move X0, X19
	348 Move X20, [X31+32]
	349 Move X19, [X31+40]
	350 Move X22, [X31+16]
	351 Move X21, [X31+24]
	352 Move X30, [X31+48]
	353 Call __BinaryWriter.WriteTimeSpan, X0, X1
	354 Return 
	355 Compare X20, 0
	356 JumpIfEqual {476}
	357 Move X8, 0xE49000
	358 Move X8, [X8+2544]
	359 Move X9, [X20]
	360 Move X1, [X8]
	361 Move X8, [X9+64]
	362 Move X9, [X1+64]
	363 NotImplemented "Instruction CMP not yet implemented."
	364 Move X0, X20
	365 Call 0x1C17E08
	366 Move X1, [X0]
	367 Move X0, X19
	368 Move X20, [X31+32]
	369 Move X19, [X31+40]
	370 Move X22, [X31+16]
	371 Move X21, [X31+24]
	372 Move X30, [X31+48]
	373 Call __BinaryWriter.WriteDateTime, X0, X1
	374 Return 
	375 Move X8, 0xE4A000
	376 Move X8, [X8+3144]
	377 Move X0, [X8]
	378 Move W8, [X0+224]
	379 Compare W8, 0
	380 JumpIfNotEqual {382}
	381 Call 0x1C17DFC
	382 Move X0, X31
	383 Call CultureInfo.get_InvariantCulture
	384 Move X8, 0xE51000
	385 Move X8, [X8+2536]
	386 Move X21, X0
	387 Move X8, [X8]
	388 Move W9, [X8+224]
	389 Compare W9, 0
	390 JumpIfNotEqual {393}
	391 Move X0, X8
	392 Call 0x1C17DFC
	393 Move X0, X20
	394 Move X1, X21
	395 Move X2, X31
	396 Call Convert.ToUInt16, X0, X1
	397 Move X8, [X19+48]
	398 Compare X8, 0
	399 JumpIfEqual {476}
	400 Move X9, [X8]
	401 Move W1, W0
	402 Move X3, [X9+568]
	403 Move X2, [X9+576]
	404 Move X8, 0xE4A000
	405 Move X8, [X8+3144]
	406 Move X0, [X8]
	407 Move W8, [X0+224]
	408 Compare W8, 0
	409 JumpIfNotEqual {411}
	410 Call 0x1C17DFC
	411 Move X0, X31
	412 Call CultureInfo.get_InvariantCulture
	413 Move X8, 0xE51000
	414 Move X8, [X8+2536]
	415 Move X21, X0
	416 Move X8, [X8]
	417 Move W9, [X8+224]
	418 Compare W9, 0
	419 JumpIfNotEqual {422}
	420 Move X0, X8
	421 Call 0x1C17DFC
	422 Move X0, X20
	423 Move X1, X21
	424 Move X2, X31
	425 Call Convert.ToUInt32, X0, X1
	426 Move X8, [X19+48]
	427 Compare X8, 0
	428 JumpIfEqual {476}
	429 Move X9, [X8]
	430 Move W1, W0
	431 Move X3, [X9+600]
	432 Move X2, [X9+608]
	433 Move X20, [X31+32]
	434 Move X19, [X31+40]
	435 Move X22, [X31+16]
	436 Move X21, [X31+24]
	437 Move X0, X8
	438 Move X30, [X31+48]
	439 CallNoReturn X3
	440 Move X8, 0xE4A000
	441 Move X8, [X8+3144]
	442 Move X0, [X8]
	443 Move W8, [X0+224]
	444 Compare W8, 0
	445 JumpIfNotEqual {447}
	446 Call 0x1C17DFC
	447 Move X0, X31
	448 Call CultureInfo.get_InvariantCulture
	449 Move X8, 0xE51000
	450 Move X8, [X8+2536]
	451 Move X21, X0
	452 Move X8, [X8]
	453 Move W9, [X8+224]
	454 Compare W9, 0
	455 JumpIfNotEqual {458}
	456 Move X0, X8
	457 Call 0x1C17DFC
	458 Move X0, X20
	459 Move X1, X21
	460 Move X2, X31
	461 Call Convert.ToUInt64, X0, X1
	462 Move X8, [X19+48]
	463 Compare X8, 0
	464 JumpIfEqual {476}
	465 Move X9, [X8]
	466 Move X1, X0
	467 Move X3, [X9+632]
	468 Move X2, [X9+640]
	469 Move X20, [X31+32]
	470 Move X19, [X31+40]
	471 Move X22, [X31+16]
	472 Move X21, [X31+24]
	473 Move X0, X8
	474 Move X30, [X31+48]
	475 CallNoReturn X3
	476 Call 0x1C17F20
	477 Move X0, X20
	478 Call 0x1C181E0
	479 Move X0, 0xE48000
	480 Move X0, [X0+2512]
	481 Call 0x1C17D08
	482 Move W1, 1
	483 Call 0x1C17D6C
	484 Move X19, X0
	485 Move [X31+12], W21
	486 Move X0, 0xE79000
	487 Move X0, [X0+3976]
	488 Call 0x1C17D08
	489 Add X1, X31, 12
	490 Call 0x1C17E04
	491 Move X1, X31
	492 Call Enum.ToString, X0
	493 Move X20, X0
	494 Move X0, X19
	495 Call 0x19913C0
	496 Move X0, X19
	497 Move X1, X20
	498 Call 0x19990B4
	499 Move X0, X19
	500 Move X1, X31
	501 Move X2, X20
	502 Call 0x1994444
	503 Move X0, 0xE79000
	504 Move X0, [X0+4048]
	505 Call 0x1C17D08
	506 Move X1, X19
	507 Move X2, X31
	508 Call Environment.GetResourceString, X0, X1
	509 Move X19, X0
	510 Move X0, 0xE72000
	511 Move X0, [X0+736]
	512 Call 0x1C17D08
	513 Call 0x1C17F10
	514 Move X1, X19
	515 Move X2, X31
	516 Move X20, X0
	517 Call SerializationException..ctor, X0, X1
	518 Move X0, 0xE78000
	519 Move X0, [X0+4056]
	520 Call 0x1C17D08
	521 Move X1, X0
	522 Move X0, X20
	523 Call 0x1C17DEC

