Type: System.Runtime.Serialization.ValueTypeFixupInfo

Method: System.Void .ctor(System.Int64 containerID, System.Reflection.FieldInfo member, System.Int32[] parentIndex)

Disassembly:
	0x032A15CC RET
	0x032A15D0 BL 0x1C16F20
	0x032A15D4 STR X30, [X31 - 0x50]!
	0x032A15D8 STP X26, X25, [X31 + 0x10]
	0x032A15DC STP X24, X23, [X31 + 0x20]
	0x032A15E0 STP X22, X21, [X31 + 0x30]
	0x032A15E4 STP X20, X19, [X31 + 0x40]
	0x032A15E8 ADRP X21, 0x113B000
	0x032A15EC ADRP X23, 0xE83000
	0x032A15F0 LDRB W8, [X21 + 0x76C]
	0x032A15F4 LDR X23, [X23 + 0xBE8]
	0x032A15F8 MOV X19, X2
	0x032A15FC MOV X20, X1
	0x032A1600 MOV X22, X0
	0x032A1604 TBNZ X8, 0x0, 0x32A1664
	0x032A1608 ADRP X0, 0xE83000
	0x032A160C LDR X0, [X0 + 0xBF0]
	0x032A1610 BL 0x1C16CF4
	0x032A1614 ADRP X0, 0xE83000
	0x032A1618 LDR X0, [X0 + 0xB70]
	0x032A161C BL 0x1C16CF4
	0x032A1620 ADRP X0, 0xE83000
	0x032A1624 LDR X0, [X0 + 0xBF8]
	0x032A1628 BL 0x1C16CF4
	0x032A162C ADRP X0, 0xE83000
	0x032A1630 LDR X0, [X0 + 0xA70]
	0x032A1634 BL 0x1C16CF4
	0x032A1638 ADRP X0, 0xE7B000
	0x032A163C LDR X0, [X0 + 0x4E8]
	0x032A1640 BL 0x1C16CF4
	0x032A1644 ADRP X0, 0xE83000
	0x032A1648 LDR X0, [X0 + 0xC00]
	0x032A164C BL 0x1C16CF4
	0x032A1650 ADRP X0, 0xE83000
	0x032A1654 LDR X0, [X0 + 0xBE8]
	0x032A1658 BL 0x1C16CF4
	0x032A165C MOVZ W8, 0x1
	0x032A1660 STRB W8, [X21 + 0x76C]
	0x032A1664 LDR X0, [X23]
	0x032A1668 BL 0x1C16F10
	0x032A166C MOV X1, X31
	0x032A1670 MOV X21, X0
	0x032A1674 BL 0x33BDD8C
	0x032A1678 CBZ X21, 0x32A1814
	0x032A167C STR X22, [X21 + 0x10]
	0x032A1680 CBZ X22, 0x32A1818
	0x032A1684 ADRP X8, 0xE7B000
	0x032A1688 LDR X8, [X8 + 0x4E8]
	0x032A168C LDR X9, [X22]
	0x032A1690 LDR X8, [X8]
	0x032A1694 LDRB W11, [X9 + 0x130]
	0x032A1698 LDRB W10, [X8 + 0x130]
	0x032A169C CMP W11, W10
	0x032A16A0 B.CC 0x32A1760
	0x032A16A4 LDR X9, [X9 + 0xC8]
	0x032A16A8 ADD X9, X9, X10, 0x3, LSL
	0x032A16AC LDUR X9, [X9 - 0x8]
	0x032A16B0 CMP X9, X8
	0x032A16B4 B.NE 0x32A1760
	0x032A16B8 ADRP X8, 0xE83000
	0x032A16BC LDR X8, [X8 + 0xA70]
	0x032A16C0 ADRP X26, 0xE83000
	0x032A16C4 ADRP X25, 0xE83000
	0x032A16C8 ADRP X24, 0xE83000
	0x032A16CC LDR X0, [X8]
	0x032A16D0 LDR X26, [X26 + 0xB70]
	0x032A16D4 LDR X25, [X25 + 0xBF8]
	0x032A16D8 LDR X24, [X24 + 0xC00]
	0x032A16DC BL 0x1C16F10
	0x032A16E0 MOV X1, X31
	0x032A16E4 MOV X23, X0
	0x032A16E8 BL 0x33BDD8C
	0x032A16EC STP X22, X20, [X23 + 0x10]
	0x032A16F0 STR X19, [X23 + 0x20]
	0x032A16F4 LDR X0, [X26]
	0x032A16F8 LDR W8, [X0 + 0xE0]
	0x032A16FC CBNZ W8, 0x32A1708
	0x032A1700 BL 0x1C16DFC
	0x032A1704 LDR X0, [X26]
	0x032A1708 LDR X8, [X0 + 0xB8]
	0x032A170C LDR X0, [X25]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, X1
	007 Move X1, X31
	008 Move X19, X3
	009 Move X20, X2
	010 Move X21, X0
	011 Call Object..ctor, X0
	012 Move X0, X20
	013 Move X1, X31
	014 Move X2, X31
	015 Call FieldInfo.op_Equality, X0, X1
	016 Compare X19, 0
	017 JumpIfNotEqual {22}
	018 Move TEMP, X0
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {71}
	022 Compare X22, 0
	023 JumpIfNotEqual {35}
	024 Move X0, X20
	025 Move X1, X31
	026 Move X2, X31
	027 Call FieldInfo.op_Equality, X0, X1
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {35}
	032 Move [X21+16], X31
	033 Move [X21+24], X20
	034 Move [X21+32], X19
	035 Move X0, X20
	036 Move X1, X31
	037 Move X2, X31
	038 Call FieldInfo.op_Inequality, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {62}
	043 Compare X19, 0
	044 JumpIfNotEqual {79}
	045 Compare X20, 0
	046 JumpIfEqual {78}
	047 Move X8, [X20]
	048 Move X0, X20
	049 Move X9, [X8+600]
	050 Move X1, [X8+608]
	051 NotImplemented "Instruction BLR not yet implemented."
	052 Compare X0, 0
	053 JumpIfEqual {78}
	054 Move X1, X31
	055 Call Type.get_IsValueType, X0
	056 Compare X22, 0
	057 JumpIfNotEqual {62}
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfEqual {86}
	062 Move [X21+16], X22
	063 Move [X21+24], X20
	064 Move [X21+32], X19
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X22, [X31+16]
	068 Move X21, [X31+24]
	069 Move X30, [X31+48]
	070 Return 
	071 Move X0, 0xE5B000
	072 Move X0, [X0+1400]
	073 Call 0x1C17D08
	074 Call 0x1C17F10
	075 Move X19, X0
	076 Move X0, 0xE84000
	077 Move X0, [X0+2880]
	078 Call 0x1C17F20
	079 Move X0, 0xE5B000
	080 Move X0, [X0+1400]
	081 Call 0x1C17D08
	082 Call 0x1C17F10
	083 Move X19, X0
	084 Move X0, 0xE84000
	085 Move X0, [X0+2888]
	086 Move X0, 0xE5B000
	087 Move X0, [X0+1400]
	088 Call 0x1C17D08
	089 Call 0x1C17F10
	090 Move X19, X0
	091 Move X0, 0xE84000
	092 Move X0, [X0+2896]
	093 Call 0x1C17D08
	094 Move X1, X0
	095 Move X0, X19
	096 Move X2, X31
	097 Call ArgumentException..ctor, X0, X1
	098 Move X0, 0xE84000
	099 Move X0, [X0+2904]
	100 Call 0x1C17D08
	101 Move X1, X0
	102 Move X0, X19
	103 Call 0x1C17DEC

Method: System.Int64 get_ContainerID()

Disassembly:
	0x032A1710 LDR X19, [X8]
	0x032A1714 BL 0x1C16F10

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Reflection.FieldInfo get_ParentField()

Disassembly:
	0x032A1718 LDR X2, [X24]
	0x032A171C MOV X1, X21

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Int32[] get_ParentIndex()

Disassembly:
	0x032A1720 MOV X3, X31
	0x032A1724 MOV X20, X0

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

