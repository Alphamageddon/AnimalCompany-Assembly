Type: System.Runtime.InteropServices.Marshal

Method: System.IntPtr AllocCoTaskMem(System.Int32 cb)

Disassembly:
	0x032C1984 TBNZ X0, 0x0, 0x32C1A38

ISIL:
	001 Call 0x1C75434
	002 Return X0

Method: System.IntPtr AllocHGlobal(System.IntPtr cb)

Disassembly:
	0x032C1988 MOV X0, X20

ISIL:
	001 Call 0x1C17F14
	002 Return X0

Method: System.IntPtr AllocHGlobal(System.Int32 cb)

Disassembly:
	0x032C198C MOV X1, X31
	0x032C1990 MOV X2, X31
	0x032C1994 BL 0x33BE5B0
	0x032C1998 TBNZ X0, 0x0, 0x32C1A6C
	0x032C199C ADRP X8, 0xE5A000
	0x032C19A0 LDR X8, [X8 + 0x850]
	0x032C19A4 LDR X0, [X8]
	0x032C19A8 LDR W8, [X0 + 0xE0]
	0x032C19AC CBNZ W8, 0x32C19B4
	0x032C19B0 BL 0x1C16DFC
	0x032C19B4 MOV X0, X20
	0x032C19B8 MOV X1, X19
	0x032C19BC LDP X20, X19, [X31 + 0x20]
	0x032C19C0 LDP X22, X21, [X31 + 0x10]
	0x032C19C4 LDP X30, X23, [X31], #0x30
	0x032C19C8 B 0x1C74444
	0x032C19CC ADRP X0, 0xE3A000
	0x032C19D0 LDR X0, [X0 + 0x578]
	0x032C19D4 BL 0x1C16D08
	0x032C19D8 BL 0x1C16F10
	0x032C19DC MOV X19, X0
	0x032C19E0 ADRP X0, 0xE64000
	0x032C19E4 LDR X0, [X0 + 0x710]
	0x032C19E8 BL 0x1C16D08
	0x032C19EC MOV X20, X0
	0x032C19F0 ADRP X0, 0xE64000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x111C000
	006 Move X20, 0xE5B000
	007 Move W8, [X21+2155]
	008 Move X20, [X20+2128]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE5B000
	015 Move X0, [X0+2128]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2155], W8
	019 Move W0, W19
	020 Move X1, X31
	021 Call IntPtr.op_Explicit, X0
	022 Move X8, [X20]
	023 Move X19, X0
	024 Move W9, [X8+224]
	025 Compare W9, 0
	026 JumpIfNotEqual {29}
	027 Move X0, X8
	028 Call 0x1C17DFC
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Call 0x1C17F14
	035 Return X0

Method: System.Void copy_to_unmanaged_fixed(System.Array source, System.Int32 startIndex, System.IntPtr destination, System.Int32 length, System.Void* fixed_source_element)

Disassembly:
	0x032C19F4 LDR X0, [X0 + 0x718]

ISIL:
	001 Call 0x1C75EDC
	002 Return 

Method: System.Boolean skip_fixed(System.Array array, System.Int32 startIndex)

Disassembly:
	0x032C19F8 BL 0x1C16D08
	0x032C19FC MOV X2, X0
	0x032C1A00 MOV X0, X19
	0x032C1A04 MOV X1, X20
	0x032C1A08 MOV X3, X31
	0x032C1A0C BL 0x330E16C
	0x032C1A10 B 0x32C1A9C
	0x032C1A14 ADRP X0, 0xE37000
	0x032C1A18 LDR X0, [X0 + 0x528]
	0x032C1A1C BL 0x1C16D08
	0x032C1A20 BL 0x1C16F10
	0x032C1A24 MOV X19, X0
	0x032C1A28 ADRP X0, 0xE64000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move TEMP, X1
	004 And TEMP, TEMP, -2147483648
	005 Compare TEMP, -2147483648
	006 JumpIfEqual {14}
	007 Compare X0, 0
	008 JumpIfEqual {18}
	009 Move W19, W1
	010 Move X1, X31
	011 Call Array.get_Length, X0
	012 NotImplemented "Instruction CMP not yet implemented."
	013 NotImplemented "Instruction CSET not yet implemented."
	014 Move W0, 1
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Return X0
	018 Call 0x1C17F20

Method: System.Void copy_to_unmanaged(System.Byte[] source, System.Int32 startIndex, System.IntPtr destination, System.Int32 length)

Disassembly:
	0x032C1A2C LDR X0, [X0 + 0x718]
	0x032C1A30 B 0x32C1A88
	0x032C1A34 BL 0x1C16F20
	0x032C1A38 ADRP X0, 0xE3A000
	0x032C1A3C LDR X0, [X0 + 0x578]
	0x032C1A40 BL 0x1C16D08
	0x032C1A44 BL 0x1C16F10
	0x032C1A48 MOV X19, X0
	0x032C1A4C ADRP X0, 0xE64000
	0x032C1A50 LDR X0, [X0 + 0x720]
	0x032C1A54 BL 0x1C16D08
	0x032C1A58 MOV X1, X0
	0x032C1A5C MOV X0, X19
	0x032C1A60 MOV X2, X31
	0x032C1A64 BL 0x3314A68
	0x032C1A68 B 0x32C1A9C
	0x032C1A6C ADRP X0, 0xE37000
	0x032C1A70 LDR X0, [X0 + 0x528]
	0x032C1A74 BL 0x1C16D08
	0x032C1A78 BL 0x1C16F10
	0x032C1A7C MOV X19, X0
	0x032C1A80 ADRP X0, 0xE61000
	0x032C1A84 LDR X0, [X0 + 0x240]
	0x032C1A88 BL 0x1C16D08
	0x032C1A8C MOV X1, X0
	0x032C1A90 MOV X0, X19
	0x032C1A94 MOV X2, X31
	0x032C1A98 BL 0x330E100
	0x032C1A9C ADRP X0, 0xE64000
	0x032C1AA0 LDR X0, [X0 + 0x728]
	0x032C1AA4 BL 0x1C16D08
	0x032C1AA8 MOV X1, X0
	0x032C1AAC MOV X0, X19
	0x032C1AB0 BL 0x1C16DEC
	0x032C1AB4 B 0x1C17294
	0x032C1AB8 STR X30, [X31 - 0x20]!
	0x032C1ABC STP X20, X19, [X31 + 0x10]
	0x032C1AC0 ADRP X20, 0x111B000
	0x032C1AC4 LDRB W8, [X20 + 0x87D]
	0x032C1AC8 MOV X19, X0
	0x032C1ACC TBNZ X8, 0x0, 0x32C1AE4
	0x032C1AD0 ADRP X0, 0xE5A000
	0x032C1AD4 LDR X0, [X0 + 0x850]
	0x032C1AD8 BL 0x1C16CF4
	0x032C1ADC MOVZ W8, 0x1
	0x032C1AE0 STRB W8, [X20 + 0x87D]
	0x032C1AE4 CBZ X19, 0x32C1B10
	0x032C1AE8 ADRP X8, 0xE5A000
	0x032C1AEC LDR X8, [X8 + 0x850]
	0x032C1AF0 LDR X0, [X8]
	0x032C1AF4 LDR W8, [X0 + 0xE0]
	0x032C1AF8 CBNZ W8, 0x32C1B00
	0x032C1AFC BL 0x1C16DFC
	0x032C1B00 MOV X0, X19
	0x032C1B04 LDP X20, X19, [X31 + 0x10]
	0x032C1B08 LDR X30, [X31], #0x20
	0x032C1B0C B 0x1C17294
	0x032C1B10 ADRP X0, 0xE37000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x111C000
	009 Move X23, 0xE5B000
	010 Move W8, [X24+2156]
	011 Move X23, [X23+2128]
	012 Move W19, W3
	013 Move X20, X2
	014 Move W21, W1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xE5B000
	021 Move X0, [X0+2128]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+2156], W8
	025 Move X0, [X23]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X22
	031 Move W1, W21
	032 Call Marshal.skip_fixed, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {47}
	037 Move X0, [X23]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X22
	043 Move W1, W21
	044 Move X2, X20
	045 Move W3, W19
	046 Move X4, X31
	047 Compare X22, 0
	048 JumpIfEqual {72}
	049 Move W8, [X22+24]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X0, [X23]
	052 Add X9, X22, W21
	053 Add X23, X9, 32
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move X0, X22
	059 Move W1, W21
	060 Move X2, X20
	061 Move W3, W19
	062 Move X4, X23
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X24, [X31+16]
	068 Move X23, [X31+24]
	069 Move X30, [X31+64]
	070 Call 0x1C75EDC
	071 Return 
	072 Call 0x1C17F20
	073 Call 0x1C17F28

Method: System.Void Copy(System.Byte[] source, System.Int32 startIndex, System.IntPtr destination, System.Int32 length)

Disassembly:
	0x032C1B14 LDR X0, [X0 + 0x528]
	0x032C1B18 BL 0x1C16D08
	0x032C1B1C BL 0x1C16F10
	0x032C1B20 MOV X19, X0
	0x032C1B24 ADRP X0, 0xE5B000
	0x032C1B28 LDR X0, [X0 + 0x58]
	0x032C1B2C BL 0x1C16D08
	0x032C1B30 MOV X1, X0
	0x032C1B34 MOV X0, X19
	0x032C1B38 MOV X2, X31
	0x032C1B3C BL 0x330E100
	0x032C1B40 ADRP X0, 0xE64000
	0x032C1B44 LDR X0, [X0 + 0x730]
	0x032C1B48 BL 0x1C16D08
	0x032C1B4C MOV X1, X0
	0x032C1B50 MOV X0, X19
	0x032C1B54 BL 0x1C16DEC
	0x032C1B58 SUB X31, X31, 0x80
	0x032C1B5C STR X30, [X31 + 0x30]
	0x032C1B60 STP X26, X25, [X31 + 0x40]
	0x032C1B64 STP X24, X23, [X31 + 0x50]
	0x032C1B68 STP X22, X21, [X31 + 0x60]
	0x032C1B6C STP X20, X19, [X31 + 0x70]
	0x032C1B70 ADRP X22, 0x111B000
	0x032C1B74 ADRP X21, 0xE64000
	0x032C1B78 ADRP X24, 0xE5A000
	0x032C1B7C LDRB W8, [X22 + 0x87E]
	0x032C1B80 LDR X21, [X21 + 0x738]
	0x032C1B84 LDR X24, [X24 + 0x850]
	0x032C1B88 MOV X20, X1
	0x032C1B8C MOV X19, X0
	0x032C1B90 TBNZ X8, 0x0, 0x32C1C5C
	0x032C1B94 ADRP X0, 0xE64000
	0x032C1B98 LDR X0, [X0 + 0x740]
	0x032C1B9C BL 0x1C16CF4
	0x032C1BA0 ADRP X0, 0xE64000
	0x032C1BA4 LDR X0, [X0 + 0x748]
	0x032C1BA8 BL 0x1C16CF4
	0x032C1BAC ADRP X0, 0xE64000
	0x032C1BB0 LDR X0, [X0 + 0x750]
	0x032C1BB4 BL 0x1C16CF4
	0x032C1BB8 ADRP X0, 0xE64000
	0x032C1BBC LDR X0, [X0 + 0x758]
	0x032C1BC0 BL 0x1C16CF4
	0x032C1BC4 ADRP X0, 0xE64000
	0x032C1BC8 LDR X0, [X0 + 0x760]
	0x032C1BCC BL 0x1C16CF4
	0x032C1BD0 ADRP X0, 0xE64000
	0x032C1BD4 LDR X0, [X0 + 0x768]
	0x032C1BD8 BL 0x1C16CF4
	0x032C1BDC ADRP X0, 0xE5A000
	0x032C1BE0 LDR X0, [X0 + 0x850]
	0x032C1BE4 BL 0x1C16CF4
	0x032C1BE8 ADRP X0, 0xE32000
	0x032C1BEC LDR X0, [X0 + 0x9D0]
	0x032C1BF0 BL 0x1C16CF4
	0x032C1BF4 ADRP X0, 0xE63000
	0x032C1BF8 LDR X0, [X0 + 0x9A0]
	0x032C1BFC BL 0x1C16CF4
	0x032C1C00 ADRP X0, 0xE5A000
	0x032C1C04 LDR X0, [X0 + 0xB60]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x111C000
	009 Move X23, 0xE5B000
	010 Move W8, [X24+2157]
	011 Move X23, [X23+2128]
	012 Move W19, W3
	013 Move X20, X2
	014 Move W21, W1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xE5B000
	021 Move X0, [X0+2128]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+2157], W8
	025 Move X0, [X23]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X22
	031 Move W1, W21
	032 Call Marshal.skip_fixed, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {55}
	037 Move X0, [X23]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X22
	043 Move W1, W21
	044 Move X2, X20
	045 Move W3, W19
	046 Move X20, [X31+48]
	047 Move X19, [X31+56]
	048 Move X22, [X31+32]
	049 Move X21, [X31+40]
	050 Move X24, [X31+16]
	051 Move X23, [X31+24]
	052 Move X30, [X31+64]
	053 Call Marshal.copy_to_unmanaged, X0, X1, X2, X3
	054 Return 
	055 Compare X22, 0
	056 JumpIfEqual {80}
	057 Move W8, [X22+24]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X0, [X23]
	060 Add X9, X22, W21
	061 Add X23, X9, 32
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X0, X22
	067 Move W1, W21
	068 Move X2, X20
	069 Move W3, W19
	070 Move X4, X23
	071 Move X20, [X31+48]
	072 Move X19, [X31+56]
	073 Move X22, [X31+32]
	074 Move X21, [X31+40]
	075 Move X24, [X31+16]
	076 Move X23, [X31+24]
	077 Move X30, [X31+64]
	078 Call 0x1C75EDC
	079 Return 
	080 Call 0x1C17F20
	081 Call 0x1C17F28

Method: System.Void copy_from_unmanaged(System.IntPtr source, System.Int32 startIndex, System.Array destination, System.Int32 length)

Disassembly:
	0x032C1C08 BL 0x1C16CF4
	0x032C1C0C ADRP X0, 0xE3A000
	0x032C1C10 LDR X0, [X0 + 0xC60]
	0x032C1C14 BL 0x1C16CF4
	0x032C1C18 ADRP X0, 0xE32000
	0x032C1C1C LDR X0, [X0 + 0x6C0]
	0x032C1C20 BL 0x1C16CF4
	0x032C1C24 ADRP X0, 0xE64000
	0x032C1C28 LDR X0, [X0 + 0x770]
	0x032C1C2C BL 0x1C16CF4
	0x032C1C30 ADRP X0, 0xE64000
	0x032C1C34 LDR X0, [X0 + 0x778]
	0x032C1C38 BL 0x1C16CF4
	0x032C1C3C ADRP X0, 0xE64000
	0x032C1C40 LDR X0, [X0 + 0x738]
	0x032C1C44 BL 0x1C16CF4
	0x032C1C48 ADRP X0, 0xE5B000
	0x032C1C4C LDR X0, [X0 + 0x370]
	0x032C1C50 BL 0x1C16CF4
	0x032C1C54 MOVZ W8, 0x1
	0x032C1C58 STRB W8, [X22 + 0x87E]
	0x032C1C5C ADRP X25, 0xE64000
	0x032C1C60 LDR X25, [X25 + 0x778]
	0x032C1C64 LDR X3, [X21]
	0x032C1C68 ADD X0, X31, 0x20
	0x032C1C6C MOV X1, X19
	0x032C1C70 MOV X2, X20
	0x032C1C74 STP X31, X31, [X31 + 0x20]
	0x032C1C78 STR X31, [X31 + 0x38]
	0x032C1C7C STRB W31, [X31 + 0x1C]
	0x032C1C80 STR X31, [X31 + 0x10]
	0x032C1C84 BL 0x27ABC80

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x111C000
	009 Move X24, 0xE5B000
	010 Move W8, [X23+2158]
	011 Move X24, [X24+2128]
	012 Move W19, W3
	013 Move X20, X2
	014 Move W21, W1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xE5B000
	021 Move X0, [X0+2128]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+2158], W8
	025 Move X0, [X24]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X22
	031 Move W1, W21
	032 Move X2, X20
	033 Move W3, W19
	034 Move X20, [X31+48]
	035 Move X19, [X31+56]
	036 Move X22, [X31+32]
	037 Move X21, [X31+40]
	038 Move X24, [X31+16]
	039 Move X23, [X31+24]
	040 Move X4, X31
	041 Move X30, [X31+64]
	042 Call 0x1C75E88
	043 Return 

Method: System.Void copy_from_unmanaged_fixed(System.IntPtr source, System.Int32 startIndex, System.Array destination, System.Int32 length, System.Void* fixed_destination_element)

Disassembly:
	0x032C1C88 LDR X0, [X24]

ISIL:
	001 Call 0x1C75E88
	002 Return 

Method: System.Void Copy(System.IntPtr source, System.Byte[] destination, System.Int32 startIndex, System.Int32 length)

Disassembly:
	0x032C1C8C LDR W8, [X0 + 0xE0]
	0x032C1C90 CBNZ W8, 0x32C1C98
	0x032C1C94 BL 0x1C16DFC
	0x032C1C98 LDR X0, [X25]
	0x032C1C9C LDR W8, [X0 + 0xE0]
	0x032C1CA0 CBNZ W8, 0x32C1CAC
	0x032C1CA4 BL 0x1C16DFC
	0x032C1CA8 LDR X0, [X25]
	0x032C1CAC LDR X8, [X0 + 0xB8]
	0x032C1CB0 LDR X9, [X24]
	0x032C1CB4 ADRP X26, 0xE64000
	0x032C1CB8 LDR X22, [X8 + 0x8]
	0x032C1CBC LDR X8, [X9 + 0xB8]
	0x032C1CC0 LDR X26, [X26 + 0x768]
	0x032C1CC4 ADD X21, X8, 0x8
	0x032C1CC8 CBNZ X22, 0x32C1D1C
	0x032C1CCC LDR W8, [X0 + 0xE0]
	0x032C1CD0 CBNZ W8, 0x32C1CDC
	0x032C1CD4 BL 0x1C16DFC
	0x032C1CD8 LDR X0, [X25]
	0x032C1CDC ADRP X9, 0xE64000
	0x032C1CE0 LDR X8, [X0 + 0xB8]
	0x032C1CE4 LDR X9, [X9 + 0x750]
	0x032C1CE8 LDR X23, [X8]
	0x032C1CEC LDR X0, [X9]
	0x032C1CF0 BL 0x1C16F10
	0x032C1CF4 ADRP X8, 0xE64000
	0x032C1CF8 LDR X8, [X8 + 0x770]
	0x032C1CFC MOV X1, X23
	0x032C1D00 MOV X3, X31
	0x032C1D04 MOV X22, X0
	0x032C1D08 LDR X2, [X8]
	0x032C1D0C BL 0x2D27AA8
	0x032C1D10 LDR X8, [X25]
	0x032C1D14 LDR X8, [X8 + 0xB8]
	0x032C1D18 STR X22, [X8 + 0x8]
	0x032C1D1C LDR X2, [X26]
	0x032C1D20 MOV X0, X21
	0x032C1D24 MOV X1, X22
	0x032C1D28 BL 0x2212A40
	0x032C1D2C LDR X0, [X24]
	0x032C1D30 LDR W8, [X0 + 0xE0]
	0x032C1D34 CBNZ W8, 0x32C1D40
	0x032C1D38 BL 0x1C16DFC
	0x032C1D3C LDR X0, [X24]
	0x032C1D40 LDR X8, [X0 + 0xB8]
	0x032C1D44 LDR X22, [X8 + 0x10]
	0x032C1D48 STRB W31, [X31 + 0x1C]
	0x032C1D4C ADD X1, X31, 0x1C
	0x032C1D50 MOV X0, X22
	0x032C1D54 MOV X2, X31
	0x032C1D58 BL 0x33DE64C
	0x032C1D5C LDR X0, [X24]
	0x032C1D60 LDR W8, [X0 + 0xE0]
	0x032C1D64 CBNZ W8, 0x32C1D70
	0x032C1D68 BL 0x1C16DFC
	0x032C1D6C LDR X0, [X24]
	0x032C1D70 LDR X8, [X0 + 0xB8]
	0x032C1D74 LDR X0, [X8 + 0x8]
	0x032C1D78 CBZ X0, 0x32C2044
	0x032C1D7C ADRP X8, 0xE64000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x111C000
	009 Move X23, 0xE5B000
	010 Move W8, [X24+2159]
	011 Move X23, [X23+2128]
	012 Move W19, W3
	013 Move W21, W2
	014 Move X20, X1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xE5B000
	021 Move X0, [X0+2128]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+2159], W8
	025 Move X0, [X23]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move W1, W21
	032 Call Marshal.skip_fixed, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {55}
	037 Move X0, [X23]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X22
	043 Move W1, W21
	044 Move X2, X20
	045 Move W3, W19
	046 Move X20, [X31+48]
	047 Move X19, [X31+56]
	048 Move X22, [X31+32]
	049 Move X21, [X31+40]
	050 Move X24, [X31+16]
	051 Move X23, [X31+24]
	052 Move X30, [X31+64]
	053 Call Marshal.copy_from_unmanaged, X0, X1, X2, X3
	054 Return 
	055 Compare X20, 0
	056 JumpIfEqual {80}
	057 Move W8, [X20+24]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X0, [X23]
	060 Add X9, X20, W21
	061 Add X23, X9, 32
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X0, X22
	067 Move W1, W21
	068 Move X2, X20
	069 Move W3, W19
	070 Move X4, X23
	071 Move X20, [X31+48]
	072 Move X19, [X31+56]
	073 Move X22, [X31+32]
	074 Move X21, [X31+40]
	075 Move X24, [X31+16]
	076 Move X23, [X31+24]
	077 Move X30, [X31+64]
	078 Call 0x1C75E88
	079 Return 
	080 Call 0x1C17F20
	081 Call 0x1C17F28

Method: System.Void Copy(System.IntPtr source, System.Char[] destination, System.Int32 startIndex, System.Int32 length)

Disassembly:
	0x032C1D80 LDR X8, [X8 + 0x740]
	0x032C1D84 LDP X1, X2, [X31 + 0x20]
	0x032C1D88 LDR X4, [X8]
	0x032C1D8C ADD X3, X31, 0x38
	0x032C1D90 BL 0x29C83E4
	0x032C1D94 MOV W21, W0
	0x032C1D98 MOV X23, X31
	0x032C1D9C MOVZ W25, 0x3
	0x032C1DA0 LDRB W8, [X31 + 0x1C]
	0x032C1DA4 CBZ W8, 0x32C1DB4
	0x032C1DA8 MOV X0, X22
	0x032C1DAC MOV X1, X31
	0x032C1DB0 BL 0x33E14E4
	0x032C1DB4 CBNZ X23, 0x32C203C
	0x032C1DB8 CMP W25, 0x3
	0x032C1DBC B.EQ 0x32C1DC4
	0x032C1DC0 CBNZ W25, 0x32C2020
	0x032C1DC4 TBNZ X21, 0x0, 0x32C201C
	0x032C1DC8 ADRP X8, 0xE3A000
	0x032C1DCC LDR X8, [X8 + 0xC60]
	0x032C1DD0 LDR X0, [X8]
	0x032C1DD4 MOVZ W1, 0x1
	0x032C1DD8 BL 0x1C16D6C
	0x032C1DDC ADRP X23, 0xE32000
	0x032C1DE0 LDR X23, [X23 + 0x6C0]
	0x032C1DE4 ADRP X8, 0xE5A000
	0x032C1DE8 MOV X21, X0
	0x032C1DEC LDR X0, [X23]
	0x032C1DF0 LDR X8, [X8 + 0xB60]
	0x032C1DF4 LDR W9, [X0 + 0xE0]
	0x032C1DF8 LDR X22, [X8]
	0x032C1DFC CBNZ W9, 0x32C1E04
	0x032C1E00 BL 0x1C16DFC
	0x032C1E04 MOV X0, X22
	0x032C1E08 MOV X1, X31
	0x032C1E0C BL 0x338C698
	0x032C1E10 CBZ X21, 0x32C208C
	0x032C1E14 MOV X22, X0
	0x032C1E18 CBZ X0, 0x32C1E30
	0x032C1E1C LDR X8, [X21]
	0x032C1E20 LDR X1, [X8 + 0x40]
	0x032C1E24 MOV X0, X22
	0x032C1E28 BL 0x1C16E00
	0x032C1E2C CBZ X0, 0x32C20AC
	0x032C1E30 LDR W8, [X21 + 0x18]
	0x032C1E34 CBZ W8, 0x32C2090
	0x032C1E38 STR X22, [X21 + 0x20]
	0x032C1E3C CBZ X19, 0x32C2094
	0x032C1E40 ADRP X8, 0xE5B000
	0x032C1E44 LDR X8, [X8 + 0x370]
	0x032C1E48 LDR X1, [X8]
	0x032C1E4C MOVZ W2, 0x138
	0x032C1E50 MOV X0, X19
	0x032C1E54 MOV X3, X31
	0x032C1E58 MOV X4, X21
	0x032C1E5C MOV X5, X31
	0x032C1E60 MOV X6, X31
	0x032C1E64 BL 0x33976A4
	0x032C1E68 MOV X21, X0
	0x032C1E6C CBZ X0, 0x32C2048
	0x032C1E70 ADRP X9, 0xE63000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x111C000
	009 Move X23, 0xE5B000
	010 Move W8, [X24+2160]
	011 Move X23, [X23+2128]
	012 Move W19, W3
	013 Move W21, W2
	014 Move X20, X1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xE5B000
	021 Move X0, [X0+2128]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+2160], W8
	025 Move X0, [X23]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move W1, W21
	032 Call Marshal.skip_fixed, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {55}
	037 Move X0, [X23]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X22
	043 Move W1, W21
	044 Move X2, X20
	045 Move W3, W19
	046 Move X20, [X31+48]
	047 Move X19, [X31+56]
	048 Move X22, [X31+32]
	049 Move X21, [X31+40]
	050 Move X24, [X31+16]
	051 Move X23, [X31+24]
	052 Move X30, [X31+64]
	053 Call Marshal.copy_from_unmanaged, X0, X1, X2, X3
	054 Return 
	055 Compare X20, 0
	056 JumpIfEqual {80}
	057 Move W8, [X20+24]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X0, [X23]
	060 Add X9, X20, W21
	061 Add X23, X9, 32
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X0, X22
	067 Move W1, W21
	068 Move X2, X20
	069 Move W3, W19
	070 Move X4, X23
	071 Move X20, [X31+48]
	072 Move X19, [X31+56]
	073 Move X22, [X31+32]
	074 Move X21, [X31+40]
	075 Move X24, [X31+16]
	076 Move X23, [X31+24]
	077 Move X30, [X31+64]
	078 Call 0x1C75E88
	079 Return 
	080 Call 0x1C17F20
	081 Call 0x1C17F28

Method: System.Void Copy(System.IntPtr source, System.Int16[] destination, System.Int32 startIndex, System.Int32 length)

Disassembly:
	0x032C1E74 LDR X9, [X9 + 0x9A0]
	0x032C1E78 LDR X8, [X21]
	0x032C1E7C LDR X1, [X9]
	0x032C1E80 LDRB W10, [X8 + 0x130]
	0x032C1E84 LDRB W9, [X1 + 0x130]
	0x032C1E88 CMP W10, W9
	0x032C1E8C B.CC 0x32C2084
	0x032C1E90 LDR X8, [X8 + 0xC8]
	0x032C1E94 ADD X8, X8, X9, 0x3, LSL
	0x032C1E98 LDUR X8, [X8 - 0x8]
	0x032C1E9C CMP X8, X1
	0x032C1EA0 B.NE 0x32C2084
	0x032C1EA4 LDR X8, [X21]
	0x032C1EA8 MOV X0, X21
	0x032C1EAC LDR X9, [X8 + 0x3B8]
	0x032C1EB0 LDR X1, [X8 + 0x3C0]
	0x032C1EB4 BLR X9
	0x032C1EB8 ADRP X9, 0xE64000
	0x032C1EBC LDR X8, [X23]
	0x032C1EC0 LDR X9, [X9 + 0x758]
	0x032C1EC4 MOV X22, X0
	0x032C1EC8 LDR W10, [X8 + 0xE0]
	0x032C1ECC LDR X23, [X9]
	0x032C1ED0 CBNZ W10, 0x32C1EDC
	0x032C1ED4 MOV X0, X8
	0x032C1ED8 BL 0x1C16DFC
	0x032C1EDC MOV X0, X23
	0x032C1EE0 MOV X1, X31
	0x032C1EE4 BL 0x338C698
	0x032C1EE8 MOV X1, X0
	0x032C1EEC MOV X0, X22
	0x032C1EF0 MOV X2, X31
	0x032C1EF4 BL 0x3395F0C
	0x032C1EF8 TBNZ X0, 0x0, 0x32C2048
	0x032C1EFC ADRP X8, 0xE32000
	0x032C1F00 LDR X8, [X8 + 0x9D0]
	0x032C1F04 LDR X0, [X8]
	0x032C1F08 MOVZ W1, 0x1
	0x032C1F0C BL 0x1C16D6C
	0x032C1F10 MOV X22, X0
	0x032C1F14 CBZ X0, 0x32C2098
	0x032C1F18 CBZ X20, 0x32C1F30
	0x032C1F1C LDR X8, [X22]
	0x032C1F20 LDR X1, [X8 + 0x40]
	0x032C1F24 MOV X0, X20
	0x032C1F28 BL 0x1C16E00
	0x032C1F2C CBZ X0, 0x32C20B8
	0x032C1F30 LDR W8, [X22 + 0x18]
	0x032C1F34 CBZ W8, 0x32C209C
	0x032C1F38 STR X20, [X22 + 0x20]
	0x032C1F3C ADD X3, X31, 0x10
	0x032C1F40 MOV X0, X21
	0x032C1F44 MOV X1, X31
	0x032C1F48 MOV X2, X22
	0x032C1F4C MOV X4, X31
	0x032C1F50 BL 0x32DB04C
	0x032C1F54 MOV X20, X0
	0x032C1F58 CBZ X0, 0x32C1F84
	0x032C1F5C ADRP X8, 0xE64000
	0x032C1F60 LDR X8, [X8 + 0x760]
	0x032C1F64 LDR X21, [X8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x111C000
	009 Move X23, 0xE5B000
	010 Move W8, [X24+2161]
	011 Move X23, [X23+2128]
	012 Move W19, W3
	013 Move W21, W2
	014 Move X20, X1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xE5B000
	021 Move X0, [X0+2128]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+2161], W8
	025 Move X0, [X23]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move W1, W21
	032 Call Marshal.skip_fixed, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {55}
	037 Move X0, [X23]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X22
	043 Move W1, W21
	044 Move X2, X20
	045 Move W3, W19
	046 Move X20, [X31+48]
	047 Move X19, [X31+56]
	048 Move X22, [X31+32]
	049 Move X21, [X31+40]
	050 Move X24, [X31+16]
	051 Move X23, [X31+24]
	052 Move X30, [X31+64]
	053 Call Marshal.copy_from_unmanaged, X0, X1, X2, X3
	054 Return 
	055 Compare X20, 0
	056 JumpIfEqual {80}
	057 Move W8, [X20+24]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X0, [X23]
	060 Add X9, X20, W21
	061 Add X23, X9, 32
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X0, X22
	067 Move W1, W21
	068 Move X2, X20
	069 Move W3, W19
	070 Move X4, X23
	071 Move X20, [X31+48]
	072 Move X19, [X31+56]
	073 Move X22, [X31+32]
	074 Move X21, [X31+40]
	075 Move X24, [X31+16]
	076 Move X23, [X31+24]
	077 Move X30, [X31+64]
	078 Call 0x1C75E88
	079 Return 
	080 Call 0x1C17F20
	081 Call 0x1C17F28

Method: System.Void Copy(System.IntPtr source, System.Single[] destination, System.Int32 startIndex, System.Int32 length)

Disassembly:
	0x032C1F68 MOV X0, X20
	0x032C1F6C MOV X1, X21
	0x032C1F70 BL 0x1C16E00
	0x032C1F74 CBNZ X0, 0x32C1F88
	0x032C1F78 MOV X0, X20
	0x032C1F7C MOV X1, X21
	0x032C1F80 BL 0x1C171E0
	0x032C1F84 MOV X0, X31
	0x032C1F88 LDR X20, [X31 + 0x10]
	0x032C1F8C STR X0, [X31 + 0x38]
	0x032C1F90 CBNZ X20, 0x32C21B4
	0x032C1F94 CBZ X0, 0x32C2178
	0x032C1F98 LDR X0, [X24]
	0x032C1F9C LDR W8, [X0 + 0xE0]
	0x032C1FA0 CBNZ W8, 0x32C1FAC
	0x032C1FA4 BL 0x1C16DFC
	0x032C1FA8 LDR X0, [X24]
	0x032C1FAC LDR X8, [X0 + 0xB8]
	0x032C1FB0 LDR X19, [X8 + 0x10]
	0x032C1FB4 STRB W31, [X31 + 0x1C]
	0x032C1FB8 ADD X1, X31, 0x1C
	0x032C1FBC MOV X0, X19
	0x032C1FC0 MOV X2, X31
	0x032C1FC4 BL 0x33DE64C
	0x032C1FC8 LDR X0, [X24]
	0x032C1FCC LDR W8, [X0 + 0xE0]
	0x032C1FD0 CBNZ W8, 0x32C1FDC
	0x032C1FD4 BL 0x1C16DFC
	0x032C1FD8 LDR X0, [X24]
	0x032C1FDC LDR X8, [X0 + 0xB8]
	0x032C1FE0 LDR X0, [X8 + 0x8]
	0x032C1FE4 CBZ X0, 0x32C20A8
	0x032C1FE8 ADRP X8, 0xE64000
	0x032C1FEC LDR X3, [X31 + 0x38]
	0x032C1FF0 LDP X1, X2, [X31 + 0x20]
	0x032C1FF4 LDR X8, [X8 + 0x748]
	0x032C1FF8 LDR X4, [X8]
	0x032C1FFC BL 0x29C69BC
	0x032C2000 MOV X20, X31
	0x032C2004 LDRB W8, [X31 + 0x1C]
	0x032C2008 CBZ W8, 0x32C2018
	0x032C200C MOV X0, X19
	0x032C2010 MOV X1, X31
	0x032C2014 BL 0x33E14E4
	0x032C2018 CBNZ X20, 0x32C20A0
	0x032C201C LDR X0, [X31 + 0x38]
	0x032C2020 LDP X20, X19, [X31 + 0x70]
	0x032C2024 LDP X22, X21, [X31 + 0x60]
	0x032C2028 LDP X24, X23, [X31 + 0x50]
	0x032C202C LDP X26, X25, [X31 + 0x40]
	0x032C2030 LDR X30, [X31 + 0x30]
	0x032C2034 ADD X31, X31, 0x80
	0x032C2038 RET
	0x032C203C MOV X0, X23
	0x032C2040 BL 0x1C16F18
	0x032C2044 BL 0x1C16F20
	0x032C2048 MOV X0, X19
	0x032C204C BL 0x19903C0
	0x032C2050 LDR X8, [X19]
	0x032C2054 MOV X0, X19
	0x032C2058 LDR X9, [X8 + 0x2E8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x111C000
	009 Move X23, 0xE5B000
	010 Move W8, [X24+2162]
	011 Move X23, [X23+2128]
	012 Move W19, W3
	013 Move W21, W2
	014 Move X20, X1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xE5B000
	021 Move X0, [X0+2128]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+2162], W8
	025 Move X0, [X23]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move W1, W21
	032 Call Marshal.skip_fixed, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {55}
	037 Move X0, [X23]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X22
	043 Move W1, W21
	044 Move X2, X20
	045 Move W3, W19
	046 Move X20, [X31+48]
	047 Move X19, [X31+56]
	048 Move X22, [X31+32]
	049 Move X21, [X31+40]
	050 Move X24, [X31+16]
	051 Move X23, [X31+24]
	052 Move X30, [X31+64]
	053 Call Marshal.copy_from_unmanaged, X0, X1, X2, X3
	054 Return 
	055 Compare X20, 0
	056 JumpIfEqual {80}
	057 Move W8, [X20+24]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X0, [X23]
	060 Add X9, X20, W21
	061 Add X23, X9, 32
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X0, X22
	067 Move W1, W21
	068 Move X2, X20
	069 Move W3, W19
	070 Move X4, X23
	071 Move X20, [X31+48]
	072 Move X19, [X31+56]
	073 Move X22, [X31+32]
	074 Move X21, [X31+40]
	075 Move X24, [X31+16]
	076 Move X23, [X31+24]
	077 Move X30, [X31+64]
	078 Call 0x1C75E88
	079 Return 
	080 Call 0x1C17F20
	081 Call 0x1C17F28

Method: System.Void FreeBSTR(System.IntPtr ptr)

Disassembly:
	0x032C205C LDR X1, [X8 + 0x2F0]

ISIL:
	001 Call 0x1C7543C
	002 Return 

Method: System.Void FreeCoTaskMem(System.IntPtr ptr)

Disassembly:
	0x032C2060 BLR X9

ISIL:
	001 Call 0x1C75440
	002 Return 

Method: System.Void FreeHGlobal(System.IntPtr hglobal)

Disassembly:
	0x032C2064 MOV X19, X0

ISIL:
	001 Call 0x1C75440
	002 Return 

Method: System.Void ClearAnsi(System.IntPtr ptr)

Disassembly:
	0x032C2068 ADRP X0, 0xE63000
	0x032C206C LDR X0, [X0 + 0x780]
	0x032C2070 BL 0x1C16D08
	0x032C2074 MOV X20, X0
	0x032C2078 ADRP X0, 0xE63000
	0x032C207C LDR X0, [X0 + 0x788]
	0x032C2080 B 0x32C22CC
	0x032C2084 MOV X0, X21
	0x032C2088 BL 0x1C171E0
	0x032C208C BL 0x1C16F20
	0x032C2090 BL 0x1C16F28
	0x032C2094 BL 0x1C16F20
	0x032C2098 BL 0x1C16F20
	0x032C209C BL 0x1C16F28
	0x032C20A0 MOV X0, X20
	0x032C20A4 BL 0x1C16F18
	0x032C20A8 BL 0x1C16F20
	0x032C20AC BL 0x1C16F44
	0x032C20B0 MOV X1, X31
	0x032C20B4 BL 0x1C16DEC
	0x032C20B8 BL 0x1C16F44
	0x032C20BC MOV X1, X31
	0x032C20C0 BL 0x1C16DEC
	0x032C20C4 B 0x32C225C
	0x032C20C8 B 0x32C2130
	0x032C20CC B 0x32C225C
	0x032C20D0 B 0x32C20D4
	0x032C20D4 MOV X21, X0
	0x032C20D8 CMP W1, 0x1
	0x032C20DC B.NE 0x32C20F4
	0x032C20E0 MOV X0, X21
	0x032C20E4 BL 0x3EB1AD0
	0x032C20E8 LDR X20, [X0]
	0x032C20EC BL 0x3EB1AE0
	0x032C20F0 B 0x32C2004
	0x032C20F4 MOV X20, X31
	0x032C20F8 B 0x32C2100
	0x032C20FC MOV X21, X0
	0x032C2100 LDRB W8, [X31 + 0x1C]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x111B000
	006 Move W8, [X20+2163]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE5A000
	013 Move X0, [X0+2128]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2163], W8
	017 Move X21, 0xE5A000
	018 Move X21, [X21+2128]
	019 Move W20, W31
	020 Move X0, [X21]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X1, X31
	027 Call IntPtr.op_Explicit, X0
	028 Move W8, [X0]
	029 Compare W8, 0
	030 JumpIfEqual {44}
	031 Move X0, [X21]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X19
	037 Move W1, W20
	038 Move X2, X31
	039 Call IntPtr.Add, X0, X1
	040 Move X1, X31
	041 Call IntPtr.op_Explicit, X0
	042 Add W20, W20, 1
	043 Move [X0], W31
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Return 

Method: System.Void ClearUnicode(System.IntPtr ptr)

Disassembly:
	0x032C2144 MOV X20, X0
	0x032C2148 ADRP X0, 0xE31000
	0x032C214C LDR X0, [X0 + 0x7D0]
	0x032C2150 BL 0x1C16D08
	0x032C2154 LDR X8, [X20]
	0x032C2158 LDR X1, [X8]
	0x032C215C BL 0x1C17270
	0x032C2160 TBZ X0, 0x0, 0x32C21CC
	0x032C2164 LDR X20, [X20]
	0x032C2168 BL 0x3EB1AE0
	0x032C216C STR X20, [X31 + 0x10]
	0x032C2170 STR X31, [X31 + 0x38]
	0x032C2174 CBNZ X20, 0x32C21B4
	0x032C2178 MOV X0, X19
	0x032C217C BL 0x19903C0
	0x032C2180 LDR X8, [X19]
	0x032C2184 MOV X0, X19
	0x032C2188 LDR X9, [X8 + 0x2E8]
	0x032C218C LDR X1, [X8 + 0x2F0]
	0x032C2190 BLR X9
	0x032C2194 MOV X19, X0
	0x032C2198 ADRP X0, 0xE63000
	0x032C219C LDR X0, [X0 + 0x790]
	0x032C21A0 BL 0x1C16D08
	0x032C21A4 MOV X20, X0
	0x032C21A8 ADRP X0, 0xE63000
	0x032C21AC LDR X0, [X0 + 0x798]
	0x032C21B0 B 0x32C22CC
	0x032C21B4 MOV X0, X20
	0x032C21B8 BL 0x32C2380
	0x032C21BC MOV X19, X0
	0x032C21C0 BL 0x19903C0
	0x032C21C4 MOV X0, X19
	0x032C21C8 BL 0x32C2440
	0x032C21CC MOVZ W0, 0x8
	0x032C21D0 BL 0x3EB1AF0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x111B000
	006 Move W8, [X20+2164]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE5A000
	013 Move X0, [X0+2128]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2164], W8
	017 Move X21, 0xE5A000
	018 Move X21, [X21+2128]
	019 Move W20, W31
	020 Move X0, [X21]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move W1, W20
	027 Call Marshal.ReadInt16, X0, X1
	028 And W31, W0, 0xFFFF
	029 Move X0, [X21]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move W1, W20
	036 Move W2, W31
	037 Call Marshal.WriteInt16, X0, X1, X2
	038 Add W20, W20, 2
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Return 

Method: System.Void ZeroFreeGlobalAllocAnsi(System.IntPtr s)

Disassembly:
	0x032C2260 CMP W1, 0x1
	0x032C2264 B.NE 0x32C2348
	0x032C2268 MOV X0, X21
	0x032C226C BL 0x3EB1AD0
	0x032C2270 MOV X20, X0
	0x032C2274 ADRP X0, 0xE63000
	0x032C2278 LDR X0, [X0 + 0x7A0]
	0x032C227C BL 0x1C16D08
	0x032C2280 LDR X8, [X20]
	0x032C2284 LDR X1, [X8]
	0x032C2288 BL 0x1C17270
	0x032C228C TBZ X0, 0x0, 0x32C2320
	0x032C2290 BL 0x3EB1AE0
	0x032C2294 MOV X0, X19
	0x032C2298 BL 0x19903C0
	0x032C229C LDR X8, [X19]
	0x032C22A0 MOV X0, X19
	0x032C22A4 LDR X9, [X8 + 0x2E8]
	0x032C22A8 LDR X1, [X8 + 0x2F0]
	0x032C22AC BLR X9
	0x032C22B0 MOV X19, X0
	0x032C22B4 ADRP X0, 0xE63000
	0x032C22B8 LDR X0, [X0 + 0x780]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x111B000
	006 Move X21, 0xE5A000
	007 Move W8, [X20+2165]
	008 Move X21, [X21+2128]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE5A000
	015 Move X0, [X0+2128]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2165], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call Marshal.ClearAnsi, X0
	026 Move X0, X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call 0x1C75440
	032 Return 

Method: System.Void ZeroFreeGlobalAllocUnicode(System.IntPtr s)

Disassembly:
	0x032C22BC BL 0x1C16D08
	0x032C22C0 MOV X20, X0
	0x032C22C4 ADRP X0, 0xE63000
	0x032C22C8 LDR X0, [X0 + 0x7A8]
	0x032C22CC BL 0x1C16D08
	0x032C22D0 MOV X2, X0
	0x032C22D4 MOV X0, X20
	0x032C22D8 MOV X1, X19
	0x032C22DC MOV X3, X31
	0x032C22E0 BL 0x32274B8
	0x032C22E4 MOV X19, X0
	0x032C22E8 ADRP X0, 0xE63000
	0x032C22EC LDR X0, [X0 + 0x7B0]
	0x032C22F0 BL 0x1C16D08
	0x032C22F4 BL 0x1C16F10
	0x032C22F8 MOV X1, X19
	0x032C22FC MOV X2, X31
	0x032C2300 MOV X20, X0
	0x032C2304 BL 0x3315AEC
	0x032C2308 ADRP X0, 0xE63000
	0x032C230C LDR X0, [X0 + 0x7B8]
	0x032C2310 BL 0x1C16D08
	0x032C2314 MOV X1, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x111B000
	006 Move X21, 0xE5A000
	007 Move W8, [X20+2166]
	008 Move X21, [X21+2128]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE5A000
	015 Move X0, [X0+2128]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2166], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call Marshal.ClearUnicode, X0
	026 Move X0, X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call 0x1C75440
	032 Return 

Method: System.Int32 GetHRForException(System.Exception e)

Disassembly:
	0x032C2318 MOV X0, X20
	0x032C231C BL 0x1C16DEC
	0x032C2320 MOVZ W0, 0x8

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {4}
	003 Move W0, [X0+96]
	004 Return X0

Method: System.Int32 GetLastWin32Error()

Disassembly:
	0x032C2324 BL 0x3EB1AF0

ISIL:
	001 Call 0x1C758FC
	002 Return X0

Method: System.IntPtr OffsetOf(System.Type t, System.String fieldName)

Disassembly:
	0x032C2328 LDR X8, [X20]

ISIL:
	001 Call 0x1C75900
	002 Return X0

Method: System.String PtrToStringAnsi(System.IntPtr ptr)

Disassembly:
	0x032C232C STR X8, [X0]

ISIL:
	001 Call 0x1C622E0
	002 Return X0

Method: System.String PtrToStringUni(System.IntPtr ptr)

Disassembly:
	0x032C2330 ADRP X1, 0xBF2000

ISIL:
	001 Call 0x1C622EC
	002 Return X0

Method: System.String PtrToStringUni(System.IntPtr ptr, System.Int32 len)

Disassembly:
	0x032C2334 ADD X1, X1, 0xE58

ISIL:
	001 Call 0x1C7546C
	002 Return X0

Method: System.Object PtrToStructure(System.IntPtr ptr, System.Type structureType)

Disassembly:
	0x032C2338 MOV X2, X31

ISIL:
	001 Call 0x1C7548C
	002 Return X0

Method: T PtrToStructure(System.IntPtr ptr)

Disassembly:
	0x022167DC NOP
	0x022167E0 MADD X8, X26, X10, X22
	0x022167E4 ADD X3, X8, 0x20
	0x022167E8 BL 0x1C17728
	0x022167EC LDUR W8, [X29 - 0xC]
	0x022167F0 LDR W28, [X22 + 0x18]
	0x022167F4 TBZ X8, 0x1F, 0x2216830
	0x022167F8 CMP X26, X28
	0x022167FC B.CS 0x22168B0
	0x02216800 LDR X8, [X22]
	0x02216804 MOV X0, X23
	0x02216808 MOV X2, X21
	0x0221680C LDR W8, [X8 + 0x104]
	0x02216810 NOP
	0x02216814 MADD X8, X26, X8, X22
	0x02216818 ADD X1, X8, 0x20
	0x0221681C BL 0x3EB1AC0
	0x02216820 MOV X0, X25
	0x02216824 MOV X1, X23
	0x02216828 MOV X2, X21
	0x0221682C BL 0x3EB1AC0
	0x02216830 MOV X0, X23
	0x02216834 MOV X1, X25
	0x02216838 MOV X2, X21
	0x0221683C ADD X26, X26, 0x1
	0x02216840 BL 0x3EB1AC0
	0x02216844 CMP X26, W28, SXTW
	0x02216848 B.LT 0x2216788
	0x0221684C B 0x2216870
	0x02216850 MOV X0, X26
	0x02216854 MOV W1, W31
	0x02216858 MOV X2, X21
	0x0221685C BL 0x3EB1B10
	0x02216860 MOV X0, X23
	0x02216864 MOV X1, X26
	0x02216868 MOV X2, X21
	0x0221686C BL 0x3EB1AC0
	0x02216870 MOV X0, X19
	0x02216874 MOV X1, X23
	0x02216878 MOV X2, X21
	0x0221687C BL 0x3EB1AC0
	0x02216880 LDR X8, [X27 + 0x28]
	0x02216884 LDUR X9, [X29 - 0x8]
	0x02216888 CMP X8, X9
	0x0221688C B.NE 0x22168B4
	0x02216890 ADD X31, X29, 0x0
	0x02216894 LDP X20, X19, [X31 + 0x50]
	0x02216898 LDP X22, X21, [X31 + 0x40]
	0x0221689C LDP X24, X23, [X31 + 0x30]
	0x022168A0 LDP X26, X25, [X31 + 0x20]
	0x022168A4 LDP X28, X27, [X31 + 0x10]
	0x022168A8 LDP X29, X30, [X31], #0x60
	0x022168AC RET
	0x022168B0 BL 0x1C16F28
	0x022168B4 BL 0x3EB1B20
	0x022168B8 MOVZ W0, 0x100
	0x022168BC RET
	0x022168C0 MOVZ W0, 0x4C0
	0x022168C4 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X1+56]
	006 Move X19, X1
	007 Move X20, X0
	008 Compare X8, 0
	009 JumpIfNotEqual {22}
	010 Move X0, 0x1F06000
	011 Move X0, [X0+2128]
	012 Call 0x1C17CF4
	013 Move X0, 0x1EDE000
	014 Move X0, [X0+1728]
	015 Call 0x1C17CF4
	016 Move X8, [X19+56]
	017 Compare X8, 0
	018 JumpIfNotEqual {22}
	019 Move X0, X19
	020 Call 0x1C5D6E0
	021 Move X8, [X19+56]
	022 Move X9, 0x1EDE000
	023 Move X9, [X9+1728]
	024 Move X21, [X8]
	025 Move X0, [X9]
	026 Move W9, [X0+224]
	027 Compare W9, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X21
	031 Move X1, X31
	032 Call Type.GetTypeFromHandle, X0
	033 Move X8, 0x1F06000
	034 Move X8, [X8+2128]
	035 Move X21, X0
	036 Move X8, [X8]
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X0, X20
	043 Move X1, X21
	044 Move X2, X31
	045 Call Marshal.PtrToStructure, X0, X1
	046 Move X8, [X19+56]
	047 Move X20, X0
	048 Move X19, [X8+8]
	049 Move W8, [X19+309]
	050 Move TEMP, X8
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfEqual {57}
	054 Move X0, X19
	055 Call 0x1C5D684
	056 Move X19, X0
	057 Compare X20, 0
	058 JumpIfEqual {67}
	059 Move X0, X20
	060 Move X1, X19
	061 Call 0x1C17E00
	062 Compare X0, 0
	063 JumpIfNotEqual {68}
	064 Move X0, X20
	065 Move X1, X19
	066 Call 0x1C181E0
	067 Move X0, X31
	068 Move X20, [X31+16]
	069 Move X19, [X31+24]
	070 Move X30, [X31+32]
	071 Move X21, [X31+40]
	072 Return X0

Method: System.Byte ReadByte(System.IntPtr ptr, System.Int32 ofs)

Disassembly:
	0x032C2128 B 0x32C21FC
	0x032C212C B 0x32C21FC
	0x032C2130 MOV X21, X0
	0x032C2134 CMP W1, 0x1
	0x032C2138 B.NE 0x32C2348
	0x032C213C MOV X0, X21
	0x032C2140 BL 0x3EB1AD0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, W1
	004 Move X1, X31
	005 Call IntPtr.op_Explicit, X0
	006 Move W0, [X0]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0

Method: System.Int16 ReadInt16(System.IntPtr ptr, System.Int32 ofs)

Disassembly:
	0x032C221C LDR X23, [X31 + 0x8]
	0x032C2220 MOV W25, W31
	0x032C2224 MOV W21, W31
	0x032C2228 B 0x32C1DA0
	0x032C222C STR X31, [X31 + 0x8]
	0x032C2230 B 0x32C2238
	0x032C2234 MOV X21, X0
	0x032C2238 LDRB W8, [X31 + 0x1C]
	0x032C223C CBZ W8, 0x32C224C
	0x032C2240 MOV X0, X22
	0x032C2244 MOV X1, X31
	0x032C2248 BL 0x33E14E4
	0x032C224C LDR X8, [X31 + 0x8]
	0x032C2250 CBZ X8, 0x32C2348
	0x032C2254 LDR X0, [X31 + 0x8]
	0x032C2258 BL 0x1C16F18
	0x032C225C MOV X21, X0

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X31
	006 NotImplemented "Instruction STRH not yet implemented."
	007 Call IntPtr.op_Explicit, X0
	008 Add X1, X0, W19
	009 Move TEMP, X1
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {18}
	013 Add X0, X31, 12
	014 Move W2, 2
	015 Move X3, X31
	016 Call Buffer.Memcpy, X0, X1, X2
	017 Add X1, X31, 12
	018 NotImplemented "Instruction LDRH not yet implemented."
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Add X31, X31, 32
	022 Return X0

Method: System.Int32 SizeOf(System.Object structure)

Disassembly:
	0x032C233C BL 0x3EB1B00
	0x032C2340 MOV X21, X0
	0x032C2344 BL 0x3EB1AE0
	0x032C2348 MOV X0, X21
	0x032C234C BL 0x1D2C690
	0x032C2350 BL 0x1990590
	0x032C2354 CMP X0, X1
	0x032C2358 B.EQ 0x32C2374
	0x032C235C MOV W8, W31
	0x032C2360 CBZ X0, 0x32C2378
	0x032C2364 CBZ X1, 0x32C2378
	0x032C2368 LDR X8, [X0]
	0x032C236C LDP X3, X2, [X8 + 0x138]
	0x032C2370 BR X3
	0x032C2374 MOVZ W8, 0x1
	0x032C2378 MOV W0, W8
	0x032C237C RET
	0x032C2380 STR X30, [X31 - 0x20]!
	0x032C2384 STP X20, X19, [X31 + 0x10]
	0x032C2388 ADRP X20, 0x111A000
	0x032C238C LDRB W8, [X20 + 0x886]
	0x032C2390 MOV X19, X0
	0x032C2394 TBNZ X8, 0x0, 0x32C23AC
	0x032C2398 ADRP X0, 0xE39000
	0x032C239C LDR X0, [X0 + 0x5B8]
	0x032C23A0 BL 0x1C16CF4
	0x032C23A4 MOVZ W8, 0x1
	0x032C23A8 STRB W8, [X20 + 0x886]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x111B000
	005 Move W8, [X20+2167]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE5A000
	012 Move X0, [X0+2128]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2167], W8
	016 Compare X19, 0
	017 JumpIfEqual {36}
	018 Move X20, 0xE5A000
	019 Move X20, [X20+2128]
	020 Move X0, X19
	021 Move X1, X31
	022 Call "il2cpp_vm_object_is_inst", X0
	023 Move X8, [X20]
	024 Move X19, X0
	025 Move W9, [X8+224]
	026 Compare W9, 0
	027 JumpIfNotEqual {30}
	028 Move X0, X8
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Call 0x1C7562C
	035 Return X0
	036 Call 0x1C17F20

Method: System.Int32 SizeOf(System.Type t)

Disassembly:
	0x032C23AC CBZ X19, 0x32C23DC

ISIL:
	001 Call 0x1C7562C
	002 Return X0

Method: System.Int32 SizeOf()

Disassembly:
	0x02216A0C MOV X0, X24
	0x02216A10 MOV W1, W31
	0x02216A14 MOV X2, X22
	0x02216A18 BL 0x3EB1B10
	0x02216A1C MOV X0, X23
	0x02216A20 MOV X1, X24
	0x02216A24 MOV X2, X22
	0x02216A28 BL 0x3EB1AC0
	0x02216A2C LDR X0, [X26 + 0x10]
	0x02216A30 MOV X1, X23
	0x02216A34 BL 0x1C16ED4
	0x02216A38 TBNZ X0, 0x0, 0x2216A98
	0x02216A3C MOV X0, X20
	0x02216A40 MOV X1, X31
	0x02216A44 BL 0x33BE520
	0x02216A48 ADRP X8, 0x1EDD000
	0x02216A4C LDR X8, [X8 + 0x6C0]
	0x02216A50 LDR X9, [X21 + 0x38]
	0x02216A54 MOV X22, X0
	0x02216A58 LDR X8, [X8]
	0x02216A5C LDR X23, [X9 + 0x18]
	0x02216A60 LDR W10, [X8 + 0xE0]
	0x02216A64 CBNZ W10, 0x2216A70
	0x02216A68 MOV X0, X8
	0x02216A6C BL 0x1C16DFC
	0x02216A70 MOV X0, X23
	0x02216A74 MOV X1, X31
	0x02216A78 BL 0x338C698
	0x02216A7C MOV X1, X0
	0x02216A80 MOV X0, X22
	0x02216A84 MOV X2, X31
	0x02216A88 BL 0x3395F0C
	0x02216A8C TBZ X0, 0x0, 0x2216A98
	0x02216A90 MOV X0, X31
	0x02216A94 BL 0x339D56C
	0x02216A98 LDR W8, [X20 + 0x18]
	0x02216A9C CMP W8, W19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+56]
	004 Compare X8, 0
	005 JumpIfNotEqual {19}
	006 Move X19, X0
	007 Move X0, 0x1F06000
	008 Move X0, [X0+2128]
	009 Call 0x1C17CF4
	010 Move X0, 0x1EDE000
	011 Move X0, [X0+1728]
	012 Call 0x1C17CF4
	013 Move X8, [X19+56]
	014 Compare X8, 0
	015 JumpIfNotEqual {19}
	016 Move X0, X19
	017 Call 0x1C5D6E0
	018 Move X8, [X19+56]
	019 Move X9, 0x1EDE000
	020 Move X9, [X9+1728]
	021 Move X19, [X8]
	022 Move X0, [X9]
	023 Move W9, [X0+224]
	024 Compare W9, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X19
	028 Move X1, X31
	029 Call Type.GetTypeFromHandle, X0
	030 Move X8, 0x1F06000
	031 Move X8, [X8+2128]
	032 Move X19, X0
	033 Move X8, [X8]
	034 Move W9, [X8+224]
	035 Compare W9, 0
	036 JumpIfNotEqual {39}
	037 Move X0, X8
	038 Call 0x1C17DFC
	039 Move X0, X19
	040 Move X1, X31
	041 Move X30, [X31+16]
	042 Move X19, [X31+24]
	043 Call Marshal.SizeOf, X0
	044 Return X0

Method: System.Int32 SizeOf(T structure)

Disassembly:
	0x02216D84 STP X20, X19, [X31 + 0x30]
	0x02216D88 LDR X8, [X4 + 0x38]
	0x02216D8C MOV X23, X4
	0x02216D90 MOV X20, X3
	0x02216D94 MOV X19, X2
	0x02216D98 MOV X22, X1
	0x02216D9C MOV X21, X0
	0x02216DA0 CBNZ X8, 0x2216DB0
	0x02216DA4 MOV X0, X23
	0x02216DA8 BL 0x1C5C6E0
	0x02216DAC LDR X8, [X23 + 0x38]
	0x02216DB0 STR X31, [X31 + 0x8]
	0x02216DB4 LDR X1, [X8 + 0x20]
	0x02216DB8 ADD X0, X31, 0x8
	0x02216DBC BL 0x1F96FD0
	0x02216DC0 CMP W22, W20
	0x02216DC4 TBZ X0, 0x0, 0x2216DF4
	0x02216DC8 B.LT 0x2216DF8
	0x02216DCC LDR X9, [X31 + 0x8]
	0x02216DD0 SUB W8, W22, W20
	0x02216DD4 UBFM X8, X8, 0x20, 0x1F
	0x02216DD8 ADD X0, X21, X8, 0x1F, ASR
	0x02216DDC SXTW X8, W20
	0x02216DE0 MUL X2, X9, X8
	0x02216DE4 MOV X1, X19
	0x02216DE8 MOV X3, X31
	0x02216DEC BL 0x3391068
	0x02216DF0 B 0x2216E20
	0x02216DF4 B.GE 0x2216E00
	0x02216DF8 MOV W0, W31
	0x02216DFC B 0x2216E20
	0x02216E00 LDR X8, [X23 + 0x38]
	0x02216E04 MOV X1, X19
	0x02216E08 MOV W2, W20
	0x02216E0C LDR X3, [X8 + 0x40]
	0x02216E10 SUB W8, W22, W20
	0x02216E14 UBFM X8, X8, 0x20, 0x1F
	0x02216E18 ADD X0, X21, X8, 0x1F, ASR
	0x02216E1C BL 0x22586B8
	0x02216E20 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X8, [X1+56]
	006 Move W19, W0
	007 Compare X8, 0
	008 JumpIfNotEqual {19}
	009 Move X0, 0x1F06000
	010 Move X0, [X0+2128]
	011 Move X20, X1
	012 Call 0x1C17CF4
	013 Move X8, [X20+56]
	014 Compare X8, 0
	015 JumpIfNotEqual {19}
	016 Move X0, X20
	017 Call 0x1C5D6E0
	018 Move X8, [X20+56]
	019 Move X0, [X8]
	020 Move W8, [X0+309]
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {26}
	025 Call 0x1C5D684
	026 Move TEMP, 0
	027 Not TEMP
	028 Move X8, TEMP
	029 Move [X31+8], X0
	030 Move [X31+16], X8
	031 Add X0, X31, 8
	032 Move X1, X31
	033 NotImplemented "Instruction STRH not yet implemented."
	034 Call "il2cpp_vm_object_is_inst", X0
	035 Move X8, 0x1F06000
	036 Move X8, [X8+2128]
	037 Move X19, X0
	038 Move X8, [X8]
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {44}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X0, X19
	045 Move X1, X31
	046 Call Marshal.SizeOf, X0
	047 Move X20, [X31+48]
	048 Move X19, [X31+56]
	049 Move X30, [X31+32]
	050 Add X31, X31, 64
	051 Return X0

Method: System.IntPtr StringToHGlobalAnsi(System.Char* s, System.Int32 length)

Disassembly:
	0x032C23B0 ADRP X8, 0xE39000

ISIL:
	001 Call 0x1C7575C
	002 Return X0

Method: System.IntPtr StringToHGlobalAnsi(System.String s)

Disassembly:
	0x032C23B4 LDR X8, [X8 + 0x5B8]
	0x032C23B8 LDR X0, [X8]
	0x032C23BC BL 0x1C16F10
	0x032C23C0 MOV X1, X19
	0x032C23C4 MOV X20, X0
	0x032C23C8 BL 0x32C27A4
	0x032C23CC MOV X0, X20
	0x032C23D0 LDP X20, X19, [X31 + 0x10]
	0x032C23D4 LDR X30, [X31], #0x20
	0x032C23D8 RET
	0x032C23DC ADRP X0, 0xE62000
	0x032C23E0 LDR X0, [X0 + 0xCB0]
	0x032C23E4 BL 0x1C16D08
	0x032C23E8 MOV X1, X31
	0x032C23EC BL 0x33BDD84
	0x032C23F0 MOV X19, X0
	0x032C23F4 ADRP X0, 0xE36000
	0x032C23F8 LDR X0, [X0 + 0x528]
	0x032C23FC BL 0x1C16D08
	0x032C2400 BL 0x1C16F10
	0x032C2404 MOV X20, X0
	0x032C2408 ADRP X0, 0xE3C000
	0x032C240C LDR X0, [X0 + 0x580]
	0x032C2410 BL 0x1C16D08
	0x032C2414 MOV X1, X0
	0x032C2418 MOV X0, X20
	0x032C241C MOV X2, X19
	0x032C2420 MOV X3, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x111B000
	006 Move W8, [X20+2168]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE5A000
	013 Move X0, [X0+2128]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2168], W8
	017 Move X21, 0xE5A000
	018 Move X21, [X21+2128]
	019 Compare X19, 0
	020 JumpIfEqual {24}
	021 Call 0x1C4DA08
	022 Move W20, [X19+16]
	023 Add X19, X19, W0
	024 Move W20, W31
	025 Move X0, [X21]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move W1, W20
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call 0x1C7575C
	037 Return X0

Method: System.IntPtr SecureStringGlobalAllocator(System.Int32 len)

Disassembly:
	0x032C2428 ADRP X0, 0xE63000
	0x032C242C LDR X0, [X0 + 0x7C0]
	0x032C2430 BL 0x1C16D08
	0x032C2434 MOV X1, X0
	0x032C2438 MOV X0, X20
	0x032C243C BL 0x1C16DEC
	0x032C2440 STR X30, [X31 - 0x20]!
	0x032C2444 STP X20, X19, [X31 + 0x10]
	0x032C2448 LDR X20, [X0 + 0x10]
	0x032C244C MOV X19, X0
	0x032C2450 MOV X0, X20
	0x032C2454 BL 0x19903C0
	0x032C2458 MOV X0, X20
	0x032C245C MOV X1, X19
	0x032C2460 MOV X2, X31
	0x032C2464 BL 0x33B3B40
	0x032C2468 ADRP X0, 0xE63000
	0x032C246C LDR X19, [X19 + 0x10]
	0x032C2470 LDR X0, [X0 + 0x7C8]
	0x032C2474 BL 0x1C16D08
	0x032C2478 MOV X1, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x111B000
	006 Move X21, 0xE5A000
	007 Move W8, [X20+2169]
	008 Move X21, [X21+2128]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE5A000
	015 Move X0, [X0+2128]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2169], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move W0, W19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call Marshal.AllocHGlobal, X0
	030 Return X0

Method: System.IntPtr SecureStringToUnicode(System.Security.SecureString s, System.Runtime.InteropServices.Marshal/SecureStringAllocator allocator)

Disassembly:
	0x032C247C MOV X0, X19
	0x032C2480 BL 0x1C16DEC
	0x032C2484 STP X30, X21, [X31 - 0x20]!
	0x032C2488 STP X20, X19, [X31 + 0x10]
	0x032C248C ADRP X21, 0x111A000
	0x032C2490 ADRP X20, 0xE59000
	0x032C2494 ADRP X19, 0xE37000
	0x032C2498 LDRB W8, [X21 + 0x87F]
	0x032C249C LDR X20, [X20 + 0x850]
	0x032C24A0 LDR X19, [X19 + 0xCC0]
	0x032C24A4 TBNZ X8, 0x0, 0x32C24C8
	0x032C24A8 ADRP X0, 0xE59000
	0x032C24AC LDR X0, [X0 + 0x850]
	0x032C24B0 BL 0x1C16CF4
	0x032C24B4 ADRP X0, 0xE37000
	0x032C24B8 LDR X0, [X0 + 0xCC0]
	0x032C24BC BL 0x1C16CF4
	0x032C24C0 MOVZ W8, 0x1
	0x032C24C4 STRB W8, [X21 + 0x87F]
	0x032C24C8 LDR X8, [X20]
	0x032C24CC MOVZ W9, 0x2
	0x032C24D0 MOV X0, X31
	0x032C24D4 LDR X8, [X8 + 0xB8]
	0x032C24D8 STR W9, [X8]
	0x032C24DC BL 0x33C1A14
	0x032C24E0 LDR X8, [X20]
	0x032C24E4 ANDS W31, W0, 0x1
	0x032C24E8 MOVZ W9, 0x1
	0x032C24EC CINC W9, W9, NE
	0x032C24F0 LDR X8, [X8 + 0xB8]
	0x032C24F4 STR W9, [X8 + 0x4]
	0x032C24F8 LDR X0, [X19]
	0x032C24FC BL 0x1C16F10
	0x032C2500 MOV X1, X31
	0x032C2504 MOV X19, X0
	0x032C2508 BL 0x33BDD8C
	0x032C250C LDR X8, [X20]
	0x032C2510 LDR X8, [X8 + 0xB8]
	0x032C2514 STR X19, [X8 + 0x10]
	0x032C2518 LDP X20, X19, [X31 + 0x10]
	0x032C251C LDP X30, X21, [X31], #0x20
	0x032C2520 RET
	0x032C2524 LDR X8, [X0 + 0x40]
	0x032C2528 LDR X3, [X0 + 0x18]
	0x032C252C LDR X2, [X0 + 0x28]
	0x032C2530 MOV X0, X8
	0x032C2534 BR X3
	0x032C2538 SUB X31, X31, 0x40
	0x032C253C STP X2, X30, [X31 + 0x8]
	0x032C2540 STP X22, X21, [X31 + 0x20]
	0x032C2544 STP X20, X19, [X31 + 0x30]
	0x032C2548 ADRP X21, 0x111A000
	0x032C254C STR X1, [X31]
	0x032C2550 ADRP X22, 0xE63000
	0x032C2554 LDRB W8, [X21 + 0x880]
	0x032C2558 LDR X22, [X22 + 0x7D0]
	0x032C255C MOV X19, X4
	0x032C2560 MOV X20, X3
	0x032C2564 TBNZ X8, 0x0, 0x32C257C
	0x032C2568 ADRP X0, 0xE63000
	0x032C256C LDR X0, [X0 + 0x7D0]
	0x032C2570 BL 0x1C16CF4
	0x032C2574 MOVZ W8, 0x1
	0x032C2578 STRB W8, [X21 + 0x880]
	0x032C257C LDR X3, [X22]
	0x032C2580 ADD X0, X31, 0x0
	0x032C2584 MOV X1, X20
	0x032C2588 MOV X2, X19
	0x032C258C BL 0x27AC170
	0x032C2590 LDP X20, X19, [X31 + 0x30]
	0x032C2594 LDP X22, X21, [X31 + 0x20]
	0x032C2598 LDR X30, [X31 + 0x10]
	0x032C259C CMP W0, 0x0
	0x032C25A0 CSET W0, EQ
	0x032C25A4 ADD X31, X31, 0x40
	0x032C25A8 RET
	0x032C25AC SUB X31, X31, 0x30
	0x032C25B0 STP X2, X30, [X31 + 0x8]
	0x032C25B4 STP X20, X19, [X31 + 0x20]
	0x032C25B8 ADRP X19, 0x111A000
	0x032C25BC STR X1, [X31]
	0x032C25C0 ADRP X20, 0xE63000
	0x032C25C4 LDRB W8, [X19 + 0x881]
	0x032C25C8 LDR X20, [X20 + 0x7D8]
	0x032C25CC TBNZ X8, 0x0, 0x32C25E4
	0x032C25D0 ADRP X0, 0xE63000
	0x032C25D4 LDR X0, [X0 + 0x7D8]
	0x032C25D8 BL 0x1C16CF4
	0x032C25DC MOVZ W8, 0x1
	0x032C25E0 STRB W8, [X19 + 0x881]
	0x032C25E4 LDR X1, [X20]
	0x032C25E8 ADD X0, X31, 0x0
	0x032C25EC BL 0x27AC498
	0x032C25F0 LDP X20, X19, [X31 + 0x20]
	0x032C25F4 LDR X30, [X31 + 0x10]
	0x032C25F8 ADD X31, X31, 0x30
	0x032C25FC RET
	0x032C2600 MOV X1, X31
	0x032C2604 B 0x33BDD8C
	0x032C2608 STR X30, [X31 - 0x20]!
	0x032C260C STP X20, X19, [X31 + 0x10]
	0x032C2610 ADRP X19, 0x111A000
	0x032C2614 ADRP X20, 0xE63000
	0x032C2618 LDRB W8, [X19 + 0x882]
	0x032C261C LDR X20, [X20 + 0x778]
	0x032C2620 TBNZ X8, 0x0, 0x32C2638
	0x032C2624 ADRP X0, 0xE63000
	0x032C2628 LDR X0, [X0 + 0x778]
	0x032C262C BL 0x1C16CF4
	0x032C2630 MOVZ W8, 0x1
	0x032C2634 STRB W8, [X19 + 0x882]
	0x032C2638 LDR X0, [X20]
	0x032C263C BL 0x1C16F10
	0x032C2640 MOV X1, X31
	0x032C2644 MOV X19, X0
	0x032C2648 BL 0x33BDD8C
	0x032C264C LDR X8, [X20]
	0x032C2650 LDR X8, [X8 + 0xB8]
	0x032C2654 STR X19, [X8]
	0x032C2658 LDP X20, X19, [X31 + 0x10]
	0x032C265C LDR X30, [X31], #0x20
	0x032C2660 RET
	0x032C2664 MOV X1, X31
	0x032C2668 B 0x33BDD8C
	0x032C266C STR X30, [X31 - 0x30]!
	0x032C2670 STP X22, X21, [X31 + 0x10]
	0x032C2674 STP X20, X19, [X31 + 0x20]
	0x032C2678 ADRP X19, 0x111A000
	0x032C267C ADRP X22, 0xE63000
	0x032C2680 ADRP X21, 0xE63000
	0x032C2684 ADRP X20, 0xE63000
	0x032C2688 LDRB W8, [X19 + 0x883]
	0x032C268C LDR X22, [X22 + 0x7E0]
	0x032C2690 LDR X21, [X21 + 0x7E8]
	0x032C2694 LDR X20, [X20 + 0x7F0]
	0x032C2698 TBNZ X8, 0x0, 0x32C26C8
	0x032C269C ADRP X0, 0xE63000
	0x032C26A0 LDR X0, [X0 + 0x7F0]
	0x032C26A4 BL 0x1C16CF4
	0x032C26A8 ADRP X0, 0xE63000
	0x032C26AC LDR X0, [X0 + 0x7E8]
	0x032C26B0 BL 0x1C16CF4
	0x032C26B4 ADRP X0, 0xE63000
	0x032C26B8 LDR X0, [X0 + 0x7E0]
	0x032C26BC BL 0x1C16CF4
	0x032C26C0 MOVZ W8, 0x1
	0x032C26C4 STRB W8, [X19 + 0x883]
	0x032C26C8 LDR X0, [X22]
	0x032C26CC BL 0x1C16F10
	0x032C26D0 MOV X1, X31
	0x032C26D4 MOV X19, X0
	0x032C26D8 BL 0x33BDD8C
	0x032C26DC LDR X0, [X21]
	0x032C26E0 BL 0x1C16F10
	0x032C26E4 LDR X2, [X20]
	0x032C26E8 MOV X1, X19
	0x032C26EC MOV X20, X0
	0x032C26F0 BL 0x29C6134
	0x032C26F4 MOV X0, X20
	0x032C26F8 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X21, 0x111B000
	013 Move W8, [X21+2170]
	014 Move X20, X1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xE5A000
	021 Move X0, [X0+2128]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2170], W8
	025 Compare X19, 0
	026 JumpIfEqual {106}
	027 Move X0, X19
	028 Move X1, X31
	029 Call SecureString.get_Length, X0
	030 Compare X20, 0
	031 JumpIfEqual {124}
	032 Move W22, W0
	033 Move X8, [X20+24]
	034 Move X0, [X20+64]
	035 Move X2, [X20+40]
	036 Move W9, W22
	037 ShiftRight W9, 31
	038 And W9, W9, 0x3FFFFFFF
	039 Add W1, W9, 2
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X20, X0
	042 Move X0, X19
	043 Move X1, X31
	044 Call SecureString.GetBuffer, X0
	045 Move X23, 0xE5A000
	046 Move X23, [X23+2128]
	047 Move X19, X0
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Compare X19, 0
	050 JumpIfEqual {126}
	051 Move W8, W22
	052 Move X21, X31
	053 Move X24, X31
	054 Move X25, 1
	055 Move X26, X8
	056 ShiftRight X26, 63
	057 And X26, X26, 0x3FFFFFFF
	058 Move X27, 2
	059 Move W8, [X19+24]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Add X9, X21, 1
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X0, [X23]
	064 Add X8, X19, X24
	065 Move W28, [X8+32]
	066 Add X8, X24, X25
	067 Add X8, X19, X8
	068 Move W9, [X0+224]
	069 Move W22, [X8+32]
	070 Compare W9, 0
	071 JumpIfNotEqual {73}
	072 Call 0x1C17DFC
	073 NotImplemented "Instruction BFM not yet implemented."
	074 Move X0, X20
	075 Move W1, W21
	076 Move W2, W22
	077 Call Marshal.WriteInt16, X0, X1, X2
	078 Add X21, X21, 2
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Add X24, X24, X27
	081 Compare X19, 0
	082 JumpIfEqual {125}
	083 Move X0, [X23]
	084 Move W8, [X0+224]
	085 Compare W8, 0
	086 JumpIfNotEqual {88}
	087 Call 0x1C17DFC
	088 Move W1, [X19+24]
	089 Move X0, X20
	090 Move W2, W31
	091 Call Marshal.WriteInt16, X0, X1, X2
	092 Move X21, X31
	093 Move W8, [X19+24]
	094 Subtract W9, W8, 1
	095 Add X9, X9, X19
	096 Add X9, X9, 32
	097 Subtract W10, W8, 2
	098 Move [X9], W31
	099 Move W11, [X19+24]
	100 Subtract X9, X9, 1
	101 Subtract W8, W8, 1
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Call 0x1C17F28
	104 Call 0x1C17F28
	105 Call 0x1C17F28
	106 Move X0, 0xE37000
	107 Move X0, [X0+1320]
	108 Call 0x1C17D08
	109 Call 0x1C17F10
	110 Move X19, X0
	111 Move X0, 0xE5B000
	112 Move X0, [X0+3264]
	113 Call 0x1C17D08
	114 Move X1, X0
	115 Move X0, X19
	116 Move X2, X31
	117 Call ArgumentNullException..ctor, X0, X1
	118 Move X0, 0xE64000
	119 Move X0, [X0+1768]
	120 Call 0x1C17D08
	121 Move X1, X0
	122 Move X0, X19
	123 Call 0x1C17DEC
	124 Call 0x1C17F20
	125 Call 0x1C17F20
	126 Call 0x1C17F20
	127 Move X19, X31
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Call 0x3EB2AD0
	130 Move X21, [X0]
	131 Call 0x3EB2AE0
	132 Compare X19, 0
	133 JumpIfNotEqual {93}
	134 Compare X21, 0
	135 JumpIfNotEqual {149}
	136 Move X0, X20
	137 Move X20, [X31+80]
	138 Move X19, [X31+88]
	139 Move X22, [X31+64]
	140 Move X21, [X31+72]
	141 Move X24, [X31+48]
	142 Move X23, [X31+56]
	143 Move X26, [X31+32]
	144 Move X25, [X31+40]
	145 Move X28, [X31+16]
	146 Move X27, [X31+24]
	147 Move X30, [X31+96]
	148 Return X0
	149 Move X0, X21
	150 Call 0x1C17F18
	151 Move X21, X31
	152 Compare X19, 0
	153 JumpIfEqual {165}
	154 Move W8, [X19+24]
	155 Subtract W9, W8, 1
	156 Add X9, X9, X19
	157 Add X9, X9, 32
	158 Subtract W10, W8, 2
	159 Move [X9], W31
	160 Move W11, [X19+24]
	161 Subtract X9, X9, 1
	162 Subtract W8, W8, 1
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Call 0x1C17F28
	165 Compare X21, 0
	166 JumpIfNotEqual {168}
	167 Call 0x1D2D690
	168 Move X0, X21
	169 Call 0x1C17F18
	170 Call 0x1991590

Method: System.IntPtr SecureStringToGlobalAllocUnicode(System.Security.SecureString s)

Disassembly:
	0x032C26FC LDP X22, X21, [X31 + 0x10]
	0x032C2700 LDR X30, [X31], #0x30
	0x032C2704 RET
	0x032C2708 STR X30, [X31 - 0x20]!
	0x032C270C STP X20, X19, [X31 + 0x10]
	0x032C2710 MOV W19, W1
	0x032C2714 MOV X1, X31
	0x032C2718 MOV X20, X0
	0x032C271C BL 0x33A51F0
	0x032C2720 STR W19, [X20 + 0x30]
	0x032C2724 LDP X20, X19, [X31 + 0x10]
	0x032C2728 LDR X30, [X31], #0x20
	0x032C272C RET
	0x032C2730 LDR W0, [X0 + 0x30]
	0x032C2734 RET
	0x032C2738 STR X30, [X31 - 0x20]!
	0x032C273C STP X20, X19, [X31 + 0x10]
	0x032C2740 ADRP X20, 0x111A000
	0x032C2744 LDRB W8, [X20 + 0x884]
	0x032C2748 MOV X19, X0
	0x032C274C TBNZ X8, 0x0, 0x32C2764
	0x032C2750 ADRP X0, 0xE63000
	0x032C2754 LDR X0, [X0 + 0x7F8]
	0x032C2758 BL 0x1C16CF4
	0x032C275C MOVZ W8, 0x1
	0x032C2760 STRB W8, [X20 + 0x884]
	0x032C2764 MOV X0, X19
	0x032C2768 MOV X1, X31
	0x032C276C BL 0x33C5A24
	0x032C2770 CBZ X0, 0x32C278C
	0x032C2774 ADRP X8, 0xE63000
	0x032C2778 LDR X8, [X8 + 0x7F8]
	0x032C277C LDR X1, [X8]
	0x032C2780 LDR X8, [X0]
	0x032C2784 CMP X8, X1
	0x032C2788 B.NE 0x32C2798
	0x032C278C LDP X20, X19, [X31 + 0x10]
	0x032C2790 LDR X30, [X31], #0x20
	0x032C2794 RET
	0x032C2798 BL 0x1C171E0
	0x032C279C MOV X1, X31
	0x032C27A0 B 0x33A51F0
	0x032C27A4 STR X30, [X31 - 0x40]!
	0x032C27A8 STP X24, X23, [X31 + 0x10]
	0x032C27AC STP X22, X21, [X31 + 0x20]
	0x032C27B0 STP X20, X19, [X31 + 0x30]
	0x032C27B4 ADRP X21, 0x111A000
	0x032C27B8 LDRB W8, [X21 + 0x885]
	0x032C27BC MOV X20, X1
	0x032C27C0 MOV X19, X0
	0x032C27C4 TBNZ X8, 0x0, 0x32C27E8
	0x032C27C8 ADRP X0, 0xE63000
	0x032C27CC LDR X0, [X0 + 0x800]
	0x032C27D0 BL 0x1C16CF4
	0x032C27D4 ADRP X0, 0xE63000
	0x032C27D8 LDR X0, [X0 + 0x808]
	0x032C27DC BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x111B000
	006 Move W8, [X20+2171]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0xE64000
	013 Move X0, [X0+1776]
	014 Call 0x1C17CF4
	015 Move X0, 0xE5A000
	016 Move X0, [X0+2128]
	017 Call 0x1C17CF4
	018 Move X0, 0xE64000
	019 Move X0, [X0+1784]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+2171], W8
	023 Compare X19, 0
	024 JumpIfEqual {50}
	025 Move X8, 0xE64000
	026 Move X8, [X8+1784]
	027 Move X20, 0xE64000
	028 Move X21, 0xE5A000
	029 Move X0, [X8]
	030 Move X20, [X20+1776]
	031 Move X21, [X21+2128]
	032 Call 0x1C17F10
	033 Move X2, [X20]
	034 Move X1, X31
	035 Move X20, X0
	036 Call SecureStringAllocator..ctor, X0, X1, X2
	037 Move X0, [X21]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X19
	043 Move X1, X20
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Call Marshal.SecureStringToUnicode, X0, X1
	049 Return X0
	050 Move X0, 0xE37000
	051 Move X0, [X0+1320]
	052 Call 0x1C17D08
	053 Call 0x1C17F10
	054 Move X19, X0
	055 Move X0, 0xE5B000
	056 Move X0, [X0+3264]
	057 Call 0x1C17D08
	058 Move X1, X0
	059 Move X0, X19
	060 Move X2, X31
	061 Call ArgumentNullException..ctor, X0, X1
	062 Move X0, 0xE64000
	063 Move X0, [X0+1792]
	064 Call 0x1C17D08
	065 Move X1, X0
	066 Move X0, X19
	067 Call 0x1C17DEC

Method: System.Void StructureToPtr(System.Object structure, System.IntPtr ptr, System.Boolean fDeleteOld)

Disassembly:
	0x032C286C BL 0x334E4CC
	0x032C2870 CBZ X22, 0x32C28B8

ISIL:
	001 And W2, W2, 1
	002 Call 0x1C757F8
	003 Return 

Method: System.Void StructureToPtr(T structure, System.IntPtr ptr, System.Boolean fDeleteOld)

Disassembly:
	0x02216FF0 BLR X9
	0x02216FF4 LDR X8, [X19 + 0x38]
	0x02216FF8 MOV X1, X0
	0x02216FFC MOV X0, X21
	0x02217000 MOV W2, W20
	0x02217004 LDR X3, [X8 + 0x40]
	0x02217008 LDR X8, [X3]
	0x0221700C BLR X8
	0x02217010 LDR X8, [X25 + 0x28]
	0x02217014 LDUR X9, [X29 - 0x8]
	0x02217018 CMP X8, X9
	0x0221701C B.NE 0x2217040
	0x02217020 AND W0, W0, 0x1
	0x02217024 ADD X31, X29, 0x0
	0x02217028 LDP X20, X19, [X31 + 0x40]
	0x0221702C LDP X22, X21, [X31 + 0x30]
	0x02217030 LDP X24, X23, [X31 + 0x20]
	0x02217034 LDR X25, [X31 + 0x10]
	0x02217038 LDP X29, X30, [X31], #0x50
	0x0221703C RET
	0x02217040 BL 0x3EB1B20
	0x02217044 STR X30, [X31 - 0x40]!
	0x02217048 STP X24, X23, [X31 + 0x10]
	0x0221704C STP X22, X21, [X31 + 0x20]
	0x02217050 STP X20, X19, [X31 + 0x30]
	0x02217054 LDR X8, [X3 + 0x38]
	0x02217058 MOV X22, X3
	0x0221705C MOV W20, W2
	0x02217060 MOV X19, X1
	0x02217064 MOV X21, X0
	0x02217068 CBNZ X8, 0x22170A4
	0x0221706C ADRP X0, 0x1F03000
	0x02217070 LDR X0, [X0 + 0xD68]
	0x02217074 BL 0x1C16CF4
	0x02217078 ADRP X0, 0x1F03000
	0x0221707C LDR X0, [X0 + 0xD70]
	0x02217080 BL 0x1C16CF4
	0x02217084 ADRP X0, 0x1EDC000
	0x02217088 LDR X0, [X0 + 0x6C0]
	0x0221708C BL 0x1C16CF4
	0x02217090 LDR X8, [X22 + 0x38]
	0x02217094 CBNZ X8, 0x22170A4
	0x02217098 MOV X0, X22
	0x0221709C BL 0x1C5C6E0
	0x022170A0 LDR X8, [X22 + 0x38]
	0x022170A4 ADRP X24, 0x1EDC000
	0x022170A8 LDR X24, [X24 + 0x6C0]
	0x022170AC LDR X23, [X8]
	0x022170B0 LDR X0, [X24]
	0x022170B4 LDR W9, [X0 + 0xE0]
	0x022170B8 CBNZ W9, 0x22170C0
	0x022170BC BL 0x1C16DFC
	0x022170C0 MOV X0, X23
	0x022170C4 MOV X1, X31
	0x022170C8 BL 0x338C698
	0x022170CC ADRP X8, 0x1F03000
	0x022170D0 LDR X8, [X8 + 0xD68]
	0x022170D4 MOV X23, X0
	0x022170D8 MOV X1, X31
	0x022170DC LDR X8, [X8]
	0x022170E0 MOV X0, X8
	0x022170E4 BL 0x338C698
	0x022170E8 MOV X1, X0
	0x022170EC MOV X0, X23

ISIL:
	001 Move [X31-64], X29
	002 Move [X31-56], X30
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Add X29, X31, 0
	010 Subtract X31, X31, 16
	011 NotImplemented "Instruction MRS not yet implemented."
	012 Move X8, [X23+40]
	013 Move W19, W2
	014 Move X21, X0
	015 Move X20, X1
	016 Move [X29-8], X8
	017 Move [X29-16], X0
	018 Move X24, [X3+56]
	019 Compare X24, 0
	020 JumpIfNotEqual {31}
	021 Move X0, 0x1F05000
	022 Move X0, [X0+2128]
	023 Move X22, X3
	024 Call 0x1C17CF4
	025 Move X24, [X22+56]
	026 Compare X24, 0
	027 JumpIfNotEqual {31}
	028 Move X0, X22
	029 Call 0x1C5D6E0
	030 Move X24, [X22+56]
	031 Move X8, [X24]
	032 Add X9, X31, 0
	033 Move W2, [X8+252]
	034 Add X10, X2, 15
	035 And X10, X10, 0x1FFFFFFFF
	036 Subtract X22, X9, X10
	037 Add X31, X22, 0
	038 Move W8, [X8+40]
	039 Move X0, X22
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Subtract X8, X29, 16
	042 NotImplemented "Instruction CSEL not yet implemented."
	043 Call 0x3EB2AC0
	044 Move X0, [X24]
	045 Move X1, X22
	046 Call 0x1C17E04
	047 Move X8, 0x1F05000
	048 Move X8, [X8+2128]
	049 Move X21, X0
	050 Move X8, [X8]
	051 Move W9, [X8+224]
	052 Compare W9, 0
	053 JumpIfNotEqual {56}
	054 Move X0, X8
	055 Call 0x1C17DFC
	056 And W2, W19, 1
	057 Move X0, X21
	058 Move X1, X20
	059 Move X3, X31
	060 Call Marshal.StructureToPtr, X0, X1, X2
	061 Move X8, [X23+40]
	062 NotImplemented "Instruction LDUR not yet implemented."
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Add X31, X29, 0
	065 Move X20, [X31+48]
	066 Move X19, [X31+56]
	067 Move X22, [X31+32]
	068 Move X21, [X31+40]
	069 Move X24, [X31+16]
	070 Move X23, [X31+24]
	071 Move X29, [X31+64]
	072 Move X30, [X31+72]
	073 Return 
	074 Call 0x3EB2B20

Method: System.IntPtr UnsafeAddrOfPinnedArrayElement(System.Array arr, System.Int32 index)

Disassembly:
	0x032C2874 CBZ X23, 0x32C288C

ISIL:
	001 Call 0x1C75E5C
	002 Return X0

Method: System.IntPtr UnsafeAddrOfPinnedArrayElement(T[] arr, System.Int32 index)

Disassembly:
	0x022170F0 MOV X2, X31
	0x022170F4 BL 0x3395194
	0x022170F8 TBZ X0, 0x0, 0x2217120
	0x022170FC MOV X0, X21
	0x02217100 MOV W1, W20
	0x02217104 MOV W2, W19
	0x02217108 LDP X20, X19, [X31 + 0x30]
	0x0221710C LDP X22, X21, [X31 + 0x20]
	0x02217110 LDP X24, X23, [X31 + 0x10]
	0x02217114 MOV X3, X31
	0x02217118 LDR X30, [X31], #0x40
	0x0221711C B 0x3390DC0
	0x02217120 LDR X0, [X24]
	0x02217124 LDR X8, [X22 + 0x38]
	0x02217128 LDR W9, [X0 + 0xE0]
	0x0221712C LDR X23, [X8]
	0x02217130 CBNZ W9, 0x2217138
	0x02217134 BL 0x1C16DFC
	0x02217138 MOV X0, X23
	0x0221713C MOV X1, X31
	0x02217140 BL 0x338C698
	0x02217144 ADRP X8, 0x1F03000
	0x02217148 LDR X8, [X8 + 0xD70]
	0x0221714C MOV X23, X0
	0x02217150 MOV X1, X31
	0x02217154 LDR X8, [X8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x21C3000
	007 Move X22, 0x1F05000
	008 Move W8, [X21+2168]
	009 Move X22, [X22+2128]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x1F05000
	017 Move X0, [X0+2128]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2168], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move W1, W19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+48]
	034 Call Marshal.UnsafeAddrOfPinnedArrayElement, X0, X1
	035 Return X0

Method: System.Void WriteByte(System.IntPtr ptr, System.Int32 ofs, System.Byte val)

Disassembly:
	0x032C2104 CBZ W8, 0x32C2114
	0x032C2108 MOV X0, X19
	0x032C210C MOV X1, X31
	0x032C2110 BL 0x33E14E4
	0x032C2114 CBZ X20, 0x32C2348
	0x032C2118 MOV X0, X20
	0x032C211C BL 0x1C16F18
	0x032C2120 B 0x32C2130
	0x032C2124 B 0x32C225C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, W2
	004 Move X2, X31
	005 Call IntPtr.Add, X0, X1
	006 Move X1, X31
	007 Call IntPtr.op_Explicit, X0
	008 Move [X0], W19
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 

Method: System.Void WriteInt16(System.IntPtr ptr, System.Int32 ofs, System.Int16 val)

Disassembly:
	0x032C21D4 LDR X8, [X20]
	0x032C21D8 STR X8, [X0]
	0x032C21DC ADRP X1, 0xBF2000
	0x032C21E0 ADD X1, X1, 0xE58
	0x032C21E4 MOV X2, X31
	0x032C21E8 BL 0x3EB1B00
	0x032C21EC B 0x32C2340
	0x032C21F0 MOV X21, X0
	0x032C21F4 BL 0x3EB1AE0
	0x032C21F8 B 0x32C2348
	0x032C21FC MOV X21, X0
	0x032C2200 CMP W1, 0x1
	0x032C2204 B.NE 0x32C222C
	0x032C2208 MOV X0, X21
	0x032C220C BL 0x3EB1AD0
	0x032C2210 LDR X8, [X0]
	0x032C2214 STR X8, [X31 + 0x8]
	0x032C2218 BL 0x3EB1AE0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W20, W1
	005 Move X1, X31
	006 Move W19, W2
	007 NotImplemented "Instruction STRH not yet implemented."
	008 Call IntPtr.op_Explicit, X0
	009 Add X0, X0, W20
	010 Move TEMP, X0
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {15}
	014 NotImplemented "Instruction STRH not yet implemented."
	015 Add X1, X31, 12
	016 Move W2, 2
	017 Move X3, X31
	018 Call Buffer.Memcpy, X0, X1, X2
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Return 

Method: System.Delegate GetDelegateForFunctionPointerInternal(System.IntPtr ptr, System.Type t)

Disassembly:
	0x032C2878 LDR X8, [X22]

ISIL:
	001 Call 0x1C75444
	002 Return X0

Method: System.Delegate GetDelegateForFunctionPointer(System.IntPtr ptr, System.Type t)

Disassembly:
	0x032C287C MOV X0, X23
	0x032C2880 LDR X1, [X8 + 0x40]
	0x032C2884 BL 0x1C16E00
	0x032C2888 CBZ X0, 0x32C28C0
	0x032C288C LDR W8, [X22 + 0x18]
	0x032C2890 CMP W21, W8
	0x032C2894 B.CS 0x32C28BC
	0x032C2898 ADD X8, X22, W21, 0x3, SXTW
	0x032C289C STR X23, [X8 + 0x20]
	0x032C28A0 STR X22, [X19 + 0x18]
	0x032C28A4 LDP X20, X19, [X31 + 0x30]
	0x032C28A8 LDP X22, X21, [X31 + 0x20]
	0x032C28AC LDP X24, X23, [X31 + 0x10]
	0x032C28B0 LDR X30, [X31], #0x40
	0x032C28B4 RET
	0x032C28B8 BL 0x1C16F20
	0x032C28BC BL 0x1C16F28
	0x032C28C0 BL 0x1C16F44
	0x032C28C4 MOV X1, X31
	0x032C28C8 BL 0x1C16DEC
	0x032C28CC LDR X0, [X0 + 0x18]
	0x032C28D0 RET
	0x032C28D4 LDR X0, [X0 + 0x10]
	0x032C28D8 RET
	0x032C28DC STP X30, X19, [X31 - 0x10]!
	0x032C28E0 BL 0x32C2380
	0x032C28E4 MOV X19, X0
	0x032C28E8 BL 0x19903C0
	0x032C28EC MOV X0, X19
	0x032C28F0 BL 0x32C2440
	0x032C28F4 STP X30, X21, [X31 - 0x20]!
	0x032C28F8 STP X20, X19, [X31 + 0x10]
	0x032C28FC MOV W20, W1
	0x032C2900 MOV X1, X31
	0x032C2904 MOV W19, W2
	0x032C2908 MOV X21, X0
	0x032C290C BL 0x33A51F0
	0x032C2910 STP W20, W19, [X21 + 0x10]
	0x032C2914 LDP X20, X19, [X31 + 0x10]
	0x032C2918 LDP X30, X21, [X31], #0x20
	0x032C291C RET
	0x032C2920 MOV X1, X31
	0x032C2924 B 0x33A51F0
	0x032C2928 MOV X1, X31
	0x032C292C B 0x33CB4DC
	0x032C2930 STR X30, [X31 - 0x20]!
	0x032C2934 STP X20, X19, [X31 + 0x10]
	0x032C2938 MOV X19, X1
	0x032C293C MOV X1, X31
	0x032C2940 MOV X20, X0
	0x032C2944 BL 0x33A51F0
	0x032C2948 STR X19, [X20 + 0x10]
	0x032C294C LDP X20, X19, [X31 + 0x10]
	0x032C2950 LDR X30, [X31], #0x20
	0x032C2954 RET
	0x032C2958 STR X30, [X31 - 0x20]!
	0x032C295C STP X20, X19, [X31 + 0x10]
	0x032C2960 MOV X19, X1
	0x032C2964 MOV X1, X31
	0x032C2968 MOV X20, X0
	0x032C296C BL 0x33A51F0
	0x032C2970 STR X19, [X20 + 0x10]
	0x032C2974 LDP X20, X19, [X31 + 0x10]
	0x032C2978 LDR X30, [X31], #0x20
	0x032C297C RET
	0x032C2980 STR X30, [X31 - 0x20]!
	0x032C2984 STP X20, X19, [X31 + 0x10]
	0x032C2988 MOV X19, X1
	0x032C298C MOV X1, X31
	0x032C2990 MOV X20, X0
	0x032C2994 BL 0x33A51F0
	0x032C2998 STR X19, [X20 + 0x10]
	0x032C299C LDP X20, X19, [X31 + 0x10]
	0x032C29A0 LDR X30, [X31], #0x20
	0x032C29A4 RET
	0x032C29A8 MOV X1, X31
	0x032C29AC B 0x33A51F0
	0x032C29B0 MOV X1, X31
	0x032C29B4 B 0x33A51F0
	0x032C29B8 MOV X1, X31
	0x032C29BC B 0x33A51F0
	0x032C29C0 MOV X1, X31
	0x032C29C4 B 0x33A51F0
	0x032C29C8 STP X1, X2, [X0]
	0x032C29CC RET
	0x032C29D0 LDP X8, X1, [X0]
	0x032C29D4 MOV X0, X8
	0x032C29D8 RET
	0x032C29DC STP X1, X2, [X0]
	0x032C29E0 RET
	0x032C29E4 STP X30, X21, [X31 - 0x20]!
	0x032C29E8 STP X20, X19, [X31 + 0x10]
	0x032C29EC ADRP X20, 0x111A000
	0x032C29F0 ADRP X21, 0xE5B000
	0x032C29F4 LDRB W8, [X20 + 0x887]
	0x032C29F8 LDR X21, [X21 + 0xE40]
	0x032C29FC MOV X19, X0
	0x032C2A00 TBNZ X8, 0x0, 0x32C2A18
	0x032C2A04 ADRP X0, 0xE5B000
	0x032C2A08 LDR X0, [X0 + 0xE40]
	0x032C2A0C BL 0x1C16CF4
	0x032C2A10 MOVZ W8, 0x1
	0x032C2A14 STRB W8, [X20 + 0x887]
	0x032C2A18 LDR X0, [X21]
	0x032C2A1C LDR W8, [X0 + 0xE0]
	0x032C2A20 CBNZ W8, 0x32C2A28
	0x032C2A24 BL 0x1C16DFC
	0x032C2A28 MOV X0, X19
	0x032C2A2C LDP X20, X19, [X31 + 0x10]
	0x032C2A30 MOV X1, X31
	0x032C2A34 LDP X30, X21, [X31], #0x20
	0x032C2A38 B 0x32D5470
	0x032C2A3C STP X30, X21, [X31 - 0x20]!
	0x032C2A40 STP X20, X19, [X31 + 0x10]
	0x032C2A44 ADRP X20, 0x111A000
	0x032C2A48 ADRP X21, 0xE5B000
	0x032C2A4C LDRB W8, [X20 + 0x888]
	0x032C2A50 LDR X21, [X21 + 0xE40]
	0x032C2A54 MOV X19, X0
	0x032C2A58 TBNZ X8, 0x0, 0x32C2A70
	0x032C2A5C ADRP X0, 0xE5B000
	0x032C2A60 LDR X0, [X0 + 0xE40]
	0x032C2A64 BL 0x1C16CF4
	0x032C2A68 MOVZ W8, 0x1
	0x032C2A6C STRB W8, [X20 + 0x888]
	0x032C2A70 LDR X0, [X21]
	0x032C2A74 LDR W8, [X0 + 0xE0]
	0x032C2A78 CBNZ W8, 0x32C2A80
	0x032C2A7C BL 0x1C16DFC
	0x032C2A80 MOV X0, X19
	0x032C2A84 LDP X20, X19, [X31 + 0x10]
	0x032C2A88 MOV X1, X31
	0x032C2A8C LDP X30, X21, [X31], #0x20
	0x032C2A90 B 0x32D5578
	0x032C2A94 STR X30, [X31 - 0x40]!
	0x032C2A98 STP X24, X23, [X31 + 0x10]
	0x032C2A9C STP X22, X21, [X31 + 0x20]
	0x032C2AA0 STP X20, X19, [X31 + 0x30]
	0x032C2AA4 ADRP X20, 0x111A000
	0x032C2AA8 LDRB W8, [X20 + 0x889]
	0x032C2AAC MOV X19, X1
	0x032C2AB0 MOV X21, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x111B000
	008 Move X22, 0xE32000
	009 Move W8, [X21+2172]
	010 Move X22, [X22+1728]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0xE5A000
	018 Move X0, [X0+2128]
	019 Call 0x1C17CF4
	020 Move X0, 0xE64000
	021 Move X0, [X0+1800]
	022 Call 0x1C17CF4
	023 Move X0, 0xE32000
	024 Move X0, [X0+1728]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+2172], W8
	028 Move X0, [X22]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X19
	034 Move X1, X31
	035 Move X2, X31
	036 Call Type.op_Equality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {132}
	041 Move X23, 0xE64000
	042 Move X0, [X22]
	043 Move X23, [X23+1800]
	044 Move W8, [X0+224]
	045 Move X21, [X23]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X21
	050 Move X1, X31
	051 Call Type.GetTypeFromHandle, X0
	052 Compare X19, 0
	053 JumpIfEqual {139}
	054 Move X8, [X19]
	055 Move X1, X0
	056 Move X0, X19
	057 Move X9, [X8+664]
	058 Move X2, [X8+672]
	059 NotImplemented "Instruction BLR not yet implemented."
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {115}
	064 Move X0, [X22]
	065 Move X21, [X23]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move X0, X21
	071 Move X1, X31
	072 Call Type.GetTypeFromHandle, X0
	073 Move X1, X0
	074 Move X0, X19
	075 Move X2, X31
	076 Call Type.op_Equality, X0, X1
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfEqual {115}
	081 Move X8, [X19]
	082 Move X0, X19
	083 Move X9, [X8+968]
	084 Move X1, [X8+976]
	085 NotImplemented "Instruction BLR not yet implemented."
	086 Move TEMP, X0
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfEqual {140}
	090 Move X0, X20
	091 Move X1, X31
	092 Move X2, X31
	093 Call IntPtr.op_Equality, X0, X1
	094 Move TEMP, X0
	095 And TEMP, TEMP, 1
	096 Compare TEMP, 1
	097 JumpIfEqual {152}
	098 Move X8, 0xE5A000
	099 Move X8, [X8+2128]
	100 Move X0, [X8]
	101 Move W8, [X0+224]
	102 Compare W8, 0
	103 JumpIfNotEqual {105}
	104 Call 0x1C17DFC
	105 Move X0, X20
	106 Move X1, X19
	107 Move X20, [X31+32]
	108 Move X19, [X31+40]
	109 Move X22, [X31+16]
	110 Move X21, [X31+24]
	111 Move X30, [X31+48]
	112 Move X23, [X31+56]
	113 Call 0x1C75444
	114 Return X0
	115 Move X0, 0xE3A000
	116 Move X0, [X0+1400]
	117 Call 0x1C17D08
	118 Call 0x1C17F10
	119 Move X19, X0
	120 Move X0, 0xE64000
	121 Move X0, [X0+1808]
	122 Call 0x1C17D08
	123 Move X20, X0
	124 Move X0, 0xE64000
	125 Move X0, [X0+1816]
	126 Call 0x1C17D08
	127 Move X2, X0
	128 Move X0, X19
	129 Move X1, X20
	130 Move X3, X31
	131 Call ArgumentException..ctor, X0, X1, X2
	132 Move X0, 0xE37000
	133 Move X0, [X0+1320]
	134 Call 0x1C17D08
	135 Call 0x1C17F10
	136 Move X19, X0
	137 Move X0, 0xE64000
	138 Move X0, [X0+1816]
	139 Call 0x1C17F20
	140 Move X0, 0xE3A000
	141 Move X0, [X0+1400]
	142 Call 0x1C17D08
	143 Call 0x1C17F10
	144 Move X19, X0
	145 Move X0, 0xE64000
	146 Move X0, [X0+1824]
	147 Call 0x1C17D08
	148 Move X1, X0
	149 Move X0, X19
	150 Move X2, X31
	151 Call ArgumentException..ctor, X0, X1
	152 Move X0, 0xE37000
	153 Move X0, [X0+1320]
	154 Call 0x1C17D08
	155 Call 0x1C17F10
	156 Move X19, X0
	157 Move X0, 0xE61000
	158 Move X0, [X0+576]
	159 Call 0x1C17D08
	160 Move X1, X0
	161 Move X0, X19
	162 Move X2, X31
	163 Call ArgumentNullException..ctor, X0, X1
	164 Move X0, 0xE64000
	165 Move X0, [X0+1832]
	166 Call 0x1C17D08
	167 Move X1, X0
	168 Move X0, X19
	169 Call 0x1C17DEC

Method: TDelegate GetDelegateForFunctionPointer(System.IntPtr ptr)

Disassembly:
	0x0221630C CSEL X1, X20, X8, LT
	0x02216310 BL 0x3EB1AC0
	0x02216314 LDR X0, [X23]
	0x02216318 MOV X1, X24
	0x0221631C BL 0x1C16E04
	0x02216320 MOV X20, X0
	0x02216324 ADRP X0, 0x1F06000
	0x02216328 LDR X0, [X0 + 0x60]
	0x0221632C BL 0x1C16D08
	0x02216330 MOV X1, X21
	0x02216334 MOV X2, X20
	0x02216338 MOV X3, X31
	0x0221633C BL 0x320A264
	0x02216340 MOV X20, X0
	0x02216344 ADRP X0, 0x1EE5000
	0x02216348 LDR X0, [X0 + 0x578]
	0x0221634C BL 0x1C16D08
	0x02216350 BL 0x1C16F10
	0x02216354 MOV X1, X20
	0x02216358 MOV X2, X31
	0x0221635C MOV X21, X0
	0x02216360 BL 0x3314A68
	0x02216364 MOV X0, X21
	0x02216368 MOV X1, X19
	0x0221636C BL 0x1C16DEC
	0x02216370 STP X29, X30, [X31 - 0x60]!
	0x02216374 STP X28, X27, [X31 + 0x10]
	0x02216378 STP X26, X25, [X31 + 0x20]
	0x0221637C STP X24, X23, [X31 + 0x30]
	0x02216380 STP X22, X21, [X31 + 0x40]
	0x02216384 STP X20, X19, [X31 + 0x50]
	0x02216388 ADD X29, X31, 0x0
	0x0221638C SUB X31, X31, 0x20
	0x02216390 MRS X27, 0xC000
	0x02216394 LDR X8, [X27 + 0x28]
	0x02216398 MOV X20, X2
	0x0221639C MOV X19, X1
	0x022163A0 MOV X22, X0
	0x022163A4 STUR X8, [X29 - 0x8]
	0x022163A8 LDR X8, [X2 + 0x38]
	0x022163AC CBNZ X8, 0x22163BC
	0x022163B0 MOV X0, X20
	0x022163B4 BL 0x1C5C6E0
	0x022163B8 LDR X8, [X20 + 0x38]
	0x022163BC LDR X0, [X8 + 0x8]
	0x022163C0 LDR W21, [X0 + 0xFC]
	0x022163C4 LDRB W9, [X0 + 0x135]
	0x022163C8 MOV W8, W21
	0x022163CC TBNZ X9, 0x0, 0x22163D8
	0x022163D0 BL 0x1C5C684
	0x022163D4 LDR W8, [X0 + 0xFC]
	0x022163D8 ADD W8, W8, 0x10
	0x022163DC ADD X8, X8, 0xF
	0x022163E0 ADD X9, X31, 0x0
	0x022163E4 AND X8, X8, 0x1FFFFFFFF
	0x022163E8 SUB X24, X9, X8
	0x022163EC ADD X31, X24, 0x0
	0x022163F0 ADD X9, X21, 0xF
	0x022163F4 ADD X8, X31, 0x0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X1+56]
	006 Move X19, X1
	007 Move X20, X0
	008 Compare X8, 0
	009 JumpIfNotEqual {22}
	010 Move X0, 0x1F06000
	011 Move X0, [X0+2128]
	012 Call 0x1C17CF4
	013 Move X0, 0x1EDE000
	014 Move X0, [X0+1728]
	015 Call 0x1C17CF4
	016 Move X8, [X19+56]
	017 Compare X8, 0
	018 JumpIfNotEqual {22}
	019 Move X0, X19
	020 Call 0x1C5D6E0
	021 Move X8, [X19+56]
	022 Move X9, 0x1EDE000
	023 Move X9, [X9+1728]
	024 Move X21, [X8]
	025 Move X0, [X9]
	026 Move W9, [X0+224]
	027 Compare W9, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X21
	031 Move X1, X31
	032 Call Type.GetTypeFromHandle, X0
	033 Move X8, 0x1F06000
	034 Move X8, [X8+2128]
	035 Move X21, X0
	036 Move X8, [X8]
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X0, X20
	043 Move X1, X21
	044 Move X2, X31
	045 Call Marshal.GetDelegateForFunctionPointer, X0, X1
	046 Move X8, [X19+56]
	047 Move X20, X0
	048 Move X19, [X8+8]
	049 Move W8, [X19+309]
	050 Move TEMP, X8
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfEqual {57}
	054 Move X0, X19
	055 Call 0x1C5D684
	056 Move X19, X0
	057 Compare X20, 0
	058 JumpIfEqual {67}
	059 Move X0, X20
	060 Move X1, X19
	061 Call 0x1C17E00
	062 Compare X0, 0
	063 JumpIfNotEqual {68}
	064 Move X0, X20
	065 Move X1, X19
	066 Call 0x1C181E0
	067 Move X0, X31
	068 Move X20, [X31+16]
	069 Move X19, [X31+24]
	070 Move X30, [X31+32]
	071 Move X21, [X31+40]
	072 Return X0

Method: System.IntPtr GetFunctionPointerForDelegateInternal(System.Delegate d)

Disassembly:
	0x032C2AB4 TBNZ X8, 0x0, 0x32C2AF0

ISIL:
	001 Call 0x1C18294
	002 Return X0

Method: System.IntPtr GetFunctionPointerForDelegate(System.Delegate d)

Disassembly:
	0x032C2AB8 ADRP X0, 0xE60000
	0x032C2ABC LDR X0, [X0 + 0xEA8]
	0x032C2AC0 BL 0x1C16CF4
	0x032C2AC4 ADRP X0, 0xE32000
	0x032C2AC8 LDR X0, [X0 + 0x7B8]
	0x032C2ACC BL 0x1C16CF4
	0x032C2AD0 ADRP X0, 0xE59000
	0x032C2AD4 LDR X0, [X0 + 0x678]
	0x032C2AD8 BL 0x1C16CF4
	0x032C2ADC ADRP X0, 0xE5B000
	0x032C2AE0 LDR X0, [X0 + 0xE40]
	0x032C2AE4 BL 0x1C16CF4
	0x032C2AE8 MOVZ W8, 0x1
	0x032C2AEC STRB W8, [X20 + 0x889]
	0x032C2AF0 LDR X20, [X21]
	0x032C2AF4 CBZ X20, 0x32C2BA4
	0x032C2AF8 ADRP X9, 0xE32000
	0x032C2AFC LDR X9, [X9 + 0x7B8]
	0x032C2B00 LDR X8, [X20]
	0x032C2B04 LDR X9, [X9]
	0x032C2B08 LDRB W11, [X8 + 0x130]
	0x032C2B0C LDRB W10, [X9 + 0x130]
	0x032C2B10 CMP W11, W10
	0x032C2B14 B.CC 0x32C2B2C
	0x032C2B18 LDR X11, [X8 + 0xC8]
	0x032C2B1C ADD X10, X11, X10, 0x3, LSL
	0x032C2B20 LDUR X10, [X10 - 0x8]
	0x032C2B24 CMP X10, X9
	0x032C2B28 B.EQ 0x32C2C0C
	0x032C2B2C ADRP X22, 0xE59000
	0x032C2B30 LDR X22, [X22 + 0x678]
	0x032C2B34 ADRP X24, 0xE60000
	0x032C2B38 LDR X0, [X22]
	0x032C2B3C LDR W9, [X0 + 0xE0]
	0x032C2B40 LDR X24, [X24 + 0xEA8]
	0x032C2B44 CBNZ W9, 0x32C2B54
	0x032C2B48 BL 0x1C16DFC
	0x032C2B4C LDR X0, [X22]
	0x032C2B50 LDR X8, [X20]
	0x032C2B54 LDR X10, [X0 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x111B000
	005 Move W8, [X20+2173]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE5A000
	012 Move X0, [X0+2128]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2173], W8
	016 Compare X19, 0
	017 JumpIfEqual {31}
	018 Move X8, 0xE5A000
	019 Move X8, [X8+2128]
	020 Move X0, [X8]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Call 0x1C18294
	030 Return X0
	031 Move X0, 0xE37000
	032 Move X0, [X0+1320]
	033 Call 0x1C17D08
	034 Call 0x1C17F10
	035 Move X19, X0
	036 Move X0, 0xE5B000
	037 Move X0, [X0+88]
	038 Call 0x1C17D08
	039 Move X1, X0
	040 Move X0, X19
	041 Move X2, X31
	042 Call ArgumentNullException..ctor, X0, X1
	043 Move X0, 0xE64000
	044 Move X0, [X0+1840]
	045 Call 0x1C17D08
	046 Move X1, X0
	047 Move X0, X19
	048 Call 0x1C17DEC

Method: System.IntPtr GetFunctionPointerForDelegate(TDelegate d)

Disassembly:
	0x0221653C MOV X2, X21
	0x02216540 ADD X26, X26, 0x1
	0x02216544 BL 0x3EB1AC0
	0x02216548 CMP X26, W28, SXTW
	0x0221654C B.LT 0x221648C
	0x02216550 B 0x2216574
	0x02216554 MOV X0, X26
	0x02216558 MOV W1, W31
	0x0221655C MOV X2, X21
	0x02216560 BL 0x3EB1B10
	0x02216564 MOV X0, X23
	0x02216568 MOV X1, X26
	0x0221656C MOV X2, X21
	0x02216570 BL 0x3EB1AC0
	0x02216574 MOV X0, X19
	0x02216578 MOV X1, X23
	0x0221657C MOV X2, X21
	0x02216580 BL 0x3EB1AC0
	0x02216584 LDR X8, [X27 + 0x28]
	0x02216588 LDUR X9, [X29 - 0x8]
	0x0221658C CMP X8, X9
	0x02216590 B.NE 0x22165B8
	0x02216594 ADD X31, X29, 0x0
	0x02216598 LDP X20, X19, [X31 + 0x50]
	0x0221659C LDP X22, X21, [X31 + 0x40]
	0x022165A0 LDP X24, X23, [X31 + 0x30]
	0x022165A4 LDP X26, X25, [X31 + 0x20]
	0x022165A8 LDP X28, X27, [X31 + 0x10]
	0x022165AC LDP X29, X30, [X31], #0x60
	0x022165B0 RET
	0x022165B4 BL 0x1C16F28
	0x022165B8 BL 0x3EB1B20
	0x022165BC STP X30, X23, [X31 - 0x30]!
	0x022165C0 STP X22, X21, [X31 + 0x10]
	0x022165C4 STP X20, X19, [X31 + 0x20]
	0x022165C8 LDR X8, [X1 + 0x38]
	0x022165CC MOV X19, X1
	0x022165D0 MOV X20, X0
	0x022165D4 CBZ X8, 0x22165E0
	0x022165D8 CBNZ X20, 0x22165EC
	0x022165DC B 0x2216650
	0x022165E0 MOV X0, X19
	0x022165E4 BL 0x1C5C6E0
	0x022165E8 CBZ X20, 0x2216650
	0x022165EC LDR X8, [X20 + 0x18]
	0x022165F0 CMP W8, 0x1
	0x022165F4 B.LT 0x2216650
	0x022165F8 LDR W21, [X20 + 0x20]
	0x022165FC B.EQ 0x2216654
	0x02216600 AND X8, X8, 0x0
	0x02216604 ADD X22, X20, 0x24
	0x02216608 MOVZ W23, 0x1
	0x0221660C CMP X23, W8, UXTW
	0x02216610 B.CS 0x2216668
	0x02216614 LDR X8, [X19 + 0x38]
	0x02216618 MOV X0, X22
	0x0221661C MOV W1, W21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x21C4000
	006 Move W8, [X21+2167]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x1F06000
	014 Move X0, [X0+2160]
	015 Call 0x1C17CF4
	016 Move X0, 0x1F06000
	017 Move X0, [X0+2128]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2167], W8
	021 Compare X19, 0
	022 JumpIfEqual {51}
	023 Move X8, 0x1F06000
	024 Move X8, [X8+2128]
	025 Move X20, 0x1F06000
	026 Move X0, [X8]
	027 Move W8, [X0+224]
	028 Move X20, [X20+2160]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X8, [X19]
	033 Move X1, [X20]
	034 Move W10, [X8+304]
	035 Move W9, [X1+304]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X8, [X8+200]
	038 Add X8, X8, X9
	039 NotImplemented "Instruction LDUR not yet implemented."
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X0, X19
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X1, X31
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Call Marshal.GetFunctionPointerForDelegateInternal, X0
	048 Return X0
	049 Move X0, X19
	050 Call 0x1C181E0
	051 Move X0, 0x1EE3000
	052 Move X0, [X0+1320]
	053 Call 0x1C17D08
	054 Call 0x1C17F10
	055 Move X19, X0
	056 Move X0, 0x1F07000
	057 Move X0, [X0+88]
	058 Call 0x1C17D08
	059 Move X1, X0
	060 Move X0, X19
	061 Move X2, X31
	062 Call ArgumentNullException..ctor, X0, X1
	063 Move X0, X19
	064 Move X1, X20
	065 Call 0x1C17DEC

Method: System.Runtime.InteropServices.ICustomMarshaler GetCustomMarshalerInstance(System.Type type, System.String cookie)

Disassembly:
	0x032C2B58 LDRB W11, [X21 + 0xA]
	0x032C2B5C LDRH W22, [X21 + 0x8]
	0x032C2B60 LDRH W9, [X8 + 0x12E]
	0x032C2B64 LDR X23, [X10]
	0x032C2B68 LDR X1, [X24]
	0x032C2B6C ORR W21, W11, 0x2
	0x032C2B70 CBZ X9, 0x32C2B94
	0x032C2B74 LDR X10, [X8 + 0xB0]
	0x032C2B78 ADD X10, X10, 0x8
	0x032C2B7C LDUR X11, [X10 - 0x8]
	0x032C2B80 CMP X11, X1
	0x032C2B84 B.EQ 0x32C2BD0
	0x032C2B88 SUBS X9, X9, 0x1
	0x032C2B8C ADD X10, X10, 0x10
	0x032C2B90 B.NE 0x32C2B7C
	0x032C2B94 MOVZ W2, 0x1
	0x032C2B98 MOV X0, X20
	0x032C2B9C BL 0x1C5C788
	0x032C2BA0 B 0x32C2BE0
	0x032C2BA4 ADRP X8, 0xE5B000
	0x032C2BA8 LDR X8, [X8 + 0xE40]
	0x032C2BAC LDR X0, [X8]
	0x032C2BB0 LDR W8, [X0 + 0xE0]
	0x032C2BB4 CBNZ W8, 0x32C2BBC
	0x032C2BB8 BL 0x1C16DFC
	0x032C2BBC MOV X0, X31
	0x032C2BC0 BL 0x33ED4C8
	0x032C2BC4 CBZ X0, 0x32C2C40
	0x032C2BC8 LDRB W1, [X21 + 0xA]
	0x032C2BCC B 0x32C2C14
	0x032C2BD0 LDR W9, [X10]
	0x032C2BD4 ADD W9, W9, 0x1
	0x032C2BD8 ADD X8, X8, W9, 0x4, SXTW
	0x032C2BDC ADD X0, X8, 0x138
	0x032C2BE0 LDP X6, X5, [X0]
	0x032C2BE4 MOV X0, X20
	0x032C2BE8 MOV X1, X23
	0x032C2BEC MOV X2, X19
	0x032C2BF0 MOV W3, W22
	0x032C2BF4 MOV W4, W21
	0x032C2BF8 LDP X20, X19, [X31 + 0x30]
	0x032C2BFC LDP X22, X21, [X31 + 0x20]
	0x032C2C00 LDP X24, X23, [X31 + 0x10]
	0x032C2C04 LDR X30, [X31], #0x40
	0x032C2C08 BR X6
	0x032C2C0C LDRB W1, [X21 + 0xA]
	0x032C2C10 MOV X0, X20
	0x032C2C14 MOV X2, X31
	0x032C2C18 BL 0x33ED3A0
	0x032C2C1C ANDS W31, W1, 0xFF
	0x032C2C20 MOV X1, X19
	0x032C2C24 LDP X20, X19, [X31 + 0x30]
	0x032C2C28 LDP X22, X21, [X31 + 0x20]
	0x032C2C2C LDP X24, X23, [X31 + 0x10]
	0x032C2C30 CSET W2, NE
	0x032C2C34 MOVZ W3, 0x1
	0x032C2C38 LDR X30, [X31], #0x40
	0x032C2C3C B 0x32C3A9C
	0x032C2C40 BL 0x1C16F20
	0x032C2C44 LDR X8, [X0]
	0x032C2C48 LDRB W2, [X0 + 0x8]
	0x032C2C4C MOVZ W3, 0x1
	0x032C2C50 MOV X0, X8
	0x032C2C54 B 0x32C3A9C
	0x032C2C58 STR X30, [X31 - 0x40]!
	0x032C2C5C STP X24, X23, [X31 + 0x10]
	0x032C2C60 STP X22, X21, [X31 + 0x20]
	0x032C2C64 STP X20, X19, [X31 + 0x30]
	0x032C2C68 ADRP X20, 0x111A000
	0x032C2C6C LDRB W8, [X20 + 0x88A]
	0x032C2C70 MOV X19, X1
	0x032C2C74 MOV X21, X0
	0x032C2C78 TBNZ X8, 0x0, 0x32C2CB4
	0x032C2C7C ADRP X0, 0xE60000
	0x032C2C80 LDR X0, [X0 + 0xEA8]
	0x032C2C84 BL 0x1C16CF4
	0x032C2C88 ADRP X0, 0xE32000
	0x032C2C8C LDR X0, [X0 + 0x7B8]
	0x032C2C90 BL 0x1C16CF4
	0x032C2C94 ADRP X0, 0xE59000
	0x032C2C98 LDR X0, [X0 + 0x678]
	0x032C2C9C BL 0x1C16CF4
	0x032C2CA0 ADRP X0, 0xE5B000
	0x032C2CA4 LDR X0, [X0 + 0xE40]
	0x032C2CA8 BL 0x1C16CF4
	0x032C2CAC MOVZ W8, 0x1
	0x032C2CB0 STRB W8, [X20 + 0x88A]
	0x032C2CB4 LDR X20, [X21]
	0x032C2CB8 CBZ X20, 0x32C2D64
	0x032C2CBC ADRP X9, 0xE32000
	0x032C2CC0 LDR X9, [X9 + 0x7B8]
	0x032C2CC4 LDR X8, [X20]
	0x032C2CC8 LDR X9, [X9]
	0x032C2CCC LDRB W11, [X8 + 0x130]
	0x032C2CD0 LDRB W10, [X9 + 0x130]
	0x032C2CD4 CMP W11, W10
	0x032C2CD8 B.CC 0x32C2CF0
	0x032C2CDC LDR X11, [X8 + 0xC8]
	0x032C2CE0 ADD X10, X11, X10, 0x3, LSL
	0x032C2CE4 LDUR X10, [X10 - 0x8]
	0x032C2CE8 CMP X10, X9
	0x032C2CEC B.EQ 0x32C2DCC
	0x032C2CF0 ADRP X22, 0xE59000
	0x032C2CF4 LDR X22, [X22 + 0x678]
	0x032C2CF8 ADRP X24, 0xE60000
	0x032C2CFC LDR X0, [X22]
	0x032C2D00 LDR W9, [X0 + 0xE0]
	0x032C2D04 LDR X24, [X24 + 0xEA8]
	0x032C2D08 CBNZ W9, 0x32C2D18
	0x032C2D0C BL 0x1C16DFC
	0x032C2D10 LDR X0, [X22]
	0x032C2D14 LDR X8, [X20]
	0x032C2D18 LDR X10, [X0 + 0xB8]
	0x032C2D1C LDRH W22, [X21 + 0x8]
	0x032C2D20 LDRB W21, [X21 + 0xA]
	0x032C2D24 LDRH W9, [X8 + 0x12E]
	0x032C2D28 LDR X23, [X10]
	0x032C2D2C LDR X1, [X24]
	0x032C2D30 CBZ X9, 0x32C2D54
	0x032C2D34 LDR X10, [X8 + 0xB0]
	0x032C2D38 ADD X10, X10, 0x8
	0x032C2D3C LDUR X11, [X10 - 0x8]
	0x032C2D40 CMP X11, X1
	0x032C2D44 B.EQ 0x32C2D90
	0x032C2D48 SUBS X9, X9, 0x1
	0x032C2D4C ADD X10, X10, 0x10
	0x032C2D50 B.NE 0x32C2D3C
	0x032C2D54 MOVZ W2, 0x1
	0x032C2D58 MOV X0, X20
	0x032C2D5C BL 0x1C5C788
	0x032C2D60 B 0x32C2DA0
	0x032C2D64 ADRP X8, 0xE5B000
	0x032C2D68 LDR X8, [X8 + 0xE40]
	0x032C2D6C LDR X0, [X8]
	0x032C2D70 LDR W8, [X0 + 0xE0]
	0x032C2D74 CBNZ W8, 0x32C2D7C
	0x032C2D78 BL 0x1C16DFC
	0x032C2D7C MOV X0, X31
	0x032C2D80 BL 0x33ED4C8
	0x032C2D84 CBZ X0, 0x32C2E00
	0x032C2D88 LDRB W1, [X21 + 0xA]
	0x032C2D8C B 0x32C2DD4
	0x032C2D90 LDR W9, [X10]
	0x032C2D94 ADD W9, W9, 0x1
	0x032C2D98 ADD X8, X8, W9, 0x4, SXTW
	0x032C2D9C ADD X0, X8, 0x138
	0x032C2DA0 LDP X6, X5, [X0]
	0x032C2DA4 MOV X0, X20
	0x032C2DA8 MOV X1, X23
	0x032C2DAC MOV X2, X19
	0x032C2DB0 MOV W3, W22
	0x032C2DB4 MOV W4, W21
	0x032C2DB8 LDP X20, X19, [X31 + 0x30]
	0x032C2DBC LDP X22, X21, [X31 + 0x20]
	0x032C2DC0 LDP X24, X23, [X31 + 0x10]
	0x032C2DC4 LDR X30, [X31], #0x40
	0x032C2DC8 BR X6
	0x032C2DCC LDRB W1, [X21 + 0xA]
	0x032C2DD0 MOV X0, X20
	0x032C2DD4 MOV X2, X31
	0x032C2DD8 BL 0x33ED3A0
	0x032C2DDC ANDS W31, W1, 0xFF
	0x032C2DE0 MOV X1, X19
	0x032C2DE4 LDP X20, X19, [X31 + 0x30]
	0x032C2DE8 LDP X22, X21, [X31 + 0x20]
	0x032C2DEC LDP X24, X23, [X31 + 0x10]
	0x032C2DF0 CSET W2, NE
	0x032C2DF4 MOV W3, W31
	0x032C2DF8 LDR X30, [X31], #0x40
	0x032C2DFC B 0x32C3A9C
	0x032C2E00 BL 0x1C16F20
	0x032C2E04 LDR X8, [X0]
	0x032C2E08 LDRB W2, [X0 + 0x8]
	0x032C2E0C MOV W3, W31
	0x032C2E10 MOV X0, X8
	0x032C2E14 B 0x32C3A9C
	0x032C2E18 MOV X1, X31
	0x032C2E1C B 0x33A51F0
	0x032C2E20 SUB X31, X31, 0x30
	0x032C2E24 STP X30, X21, [X31 + 0x10]
	0x032C2E28 STP X20, X19, [X31 + 0x20]
	0x032C2E2C ADRP X21, 0x111A000
	0x032C2E30 ADRP X20, 0xE32000
	0x032C2E34 LDRB W8, [X21 + 0x88B]
	0x032C2E38 LDR X20, [X20 + 0x9F0]
	0x032C2E3C MOV X19, X0
	0x032C2E40 TBNZ X8, 0x0, 0x32C2E58
	0x032C2E44 ADRP X0, 0xE32000
	0x032C2E48 LDR X0, [X0 + 0x9F0]
	0x032C2E4C BL 0x1C16CF4
	0x032C2E50 MOVZ W8, 0x1
	0x032C2E54 STRB W8, [X21 + 0x88B]
	0x032C2E58 LDR X8, [X19 + 0x10]
	0x032C2E5C LDR X0, [X20]
	0x032C2E60 ADD X1, X31, 0x8
	0x032C2E64 STR X8, [X31 + 0x8]
	0x032C2E68 BL 0x1C16E04
	0x032C2E6C LDP X20, X19, [X31 + 0x20]
	0x032C2E70 LDP X30, X21, [X31 + 0x10]
	0x032C2E74 ADD X31, X31, 0x30
	0x032C2E78 RET
	0x032C2E7C SUB X31, X31, 0x60
	0x032C2E80 STP X30, X25, [X31 + 0x20]
	0x032C2E84 STP X24, X23, [X31 + 0x30]
	0x032C2E88 STP X22, X21, [X31 + 0x40]
	0x032C2E8C STP X20, X19, [X31 + 0x50]
	0x032C2E90 MRS X25, 0xC000
	0x032C2E94 LDR X8, [X25 + 0x28]
	0x032C2E98 MOV W23, W1
	0x032C2E9C MOV X1, X31
	0x032C2EA0 MOV W19, W5
	0x032C2EA4 MOV W20, W4
	0x032C2EA8 MOV W21, W3
	0x032C2EAC MOV W22, W2
	0x032C2EB0 MOV X24, X0
	0x032C2EB4 STR X8, [X31 + 0x18]
	0x032C2EB8 BL 0x33A51F0
	0x032C2EBC ANDS W31, W22, 0xFF
	0x032C2EC0 CSET W4, NE
	0x032C2EC4 ADD X0, X31, 0x8
	0x032C2EC8 MOV W1, W19
	0x032C2ECC MOV W2, W20
	0x032C2ED0 MOV W3, W21
	0x032C2ED4 MOV W5, W23
	0x032C2ED8 MOV X6, X31
	0x032C2EDC STP X31, X31, [X31 + 0x8]
	0x032C2EE0 BL 0x33D6CEC
	0x032C2EE4 LDUR V0, [X31 + 0x8]
	0x032C2EE8 STR V0, [X24 + 0x1]
	0x032C2EEC LDR X8, [X25 + 0x28]
	0x032C2EF0 LDR X9, [X31 + 0x18]
	0x032C2EF4 CMP X8, X9
	0x032C2EF8 B.NE 0x32C2F14
	0x032C2EFC LDP X20, X19, [X31 + 0x50]
	0x032C2F00 LDP X22, X21, [X31 + 0x40]
	0x032C2F04 LDP X24, X23, [X31 + 0x30]
	0x032C2F08 LDP X30, X25, [X31 + 0x20]
	0x032C2F0C ADD X31, X31, 0x60
	0x032C2F10 RET
	0x032C2F14 BL 0x3EB1B20
	0x032C2F18 LDP X8, X1, [X0 + 0x10]
	0x032C2F1C MOV X0, X8
	0x032C2F20 RET
	0x032C2F24 MOV X1, X31
	0x032C2F28 B 0x33A51F0
	0x032C2F2C STP X30, X21, [X31 - 0x20]!
	0x032C2F30 STP X20, X19, [X31 + 0x10]
	0x032C2F34 MOV X20, X1
	0x032C2F38 MOV X1, X31
	0x032C2F3C MOV W19, W2
	0x032C2F40 MOV X21, X0
	0x032C2F44 BL 0x33A51F0
	0x032C2F48 STR X20, [X21 + 0x10]
	0x032C2F4C STR W19, [X21 + 0x18]
	0x032C2F50 LDP X20, X19, [X31 + 0x10]
	0x032C2F54 LDP X30, X21, [X31], #0x20
	0x032C2F58 RET
	0x032C2F5C LDR X0, [X0 + 0x10]
	0x032C2F60 RET
	0x032C2F64 LDR W0, [X0 + 0x18]
	0x032C2F68 RET
	0x032C2F6C STP X30, X21, [X31 - 0x20]!
	0x032C2F70 STP X20, X19, [X31 + 0x10]
	0x032C2F74 ADRP X21, 0x111A000
	0x032C2F78 LDRB W8, [X21 + 0x88C]
	0x032C2F7C MOV X19, X1
	0x032C2F80 MOV X20, X0
	0x032C2F84 TBNZ X8, 0x0, 0x32C2F9C
	0x032C2F88 ADRP X0, 0xE63000
	0x032C2F8C LDR X0, [X0 + 0x810]
	0x032C2F90 BL 0x1C16CF4
	0x032C2F94 MOVZ W8, 0x1
	0x032C2F98 STRB W8, [X21 + 0x88C]
	0x032C2F9C CBZ X20, 0x32C2FD4
	0x032C2FA0 CBZ X19, 0x32C2FF4
	0x032C2FA4 ADRP X8, 0xE63000
	0x032C2FA8 LDR X8, [X8 + 0x810]
	0x032C2FAC LDR X0, [X8]
	0x032C2FB0 BL 0x1C16F10
	0x032C2FB4 MOV X1, X31
	0x032C2FB8 MOV X21, X0
	0x032C2FBC BL 0x336756C
	0x032C2FC0 STP X20, X19, [X21 + 0x10]
	0x032C2FC4 LDP X20, X19, [X31 + 0x10]
	0x032C2FC8 MOV X0, X21
	0x032C2FCC LDP X30, X21, [X31], #0x20
	0x032C2FD0 RET
	0x032C2FD4 ADRP X0, 0xE36000
	0x032C2FD8 LDR X0, [X0 + 0x528]
	0x032C2FDC BL 0x1C16D08
	0x032C2FE0 BL 0x1C16F10
	0x032C2FE4 MOV X19, X0
	0x032C2FE8 ADRP X0, 0xE60000
	0x032C2FEC LDR X0, [X0 + 0xA0]
	0x032C2FF0 B 0x32C3010
	0x032C2FF4 ADRP X0, 0xE36000
	0x032C2FF8 LDR X0, [X0 + 0x528]
	0x032C2FFC BL 0x1C16D08
	0x032C3000 BL 0x1C16F10
	0x032C3004 MOV X19, X0
	0x032C3008 ADRP X0, 0xE62000
	0x032C300C LDR X0, [X0 + 0x818]
	0x032C3010 BL 0x1C16D08
	0x032C3014 MOV X1, X0
	0x032C3018 MOV X0, X19
	0x032C301C MOV X2, X31
	0x032C3020 BL 0x330E100
	0x032C3024 ADRP X0, 0xE62000
	0x032C3028 LDR X0, [X0 + 0x820]
	0x032C302C BL 0x1C16D08
	0x032C3030 MOV X1, X0
	0x032C3034 MOV X0, X19
	0x032C3038 BL 0x1C16DEC
	0x032C303C STP X30, X21, [X31 - 0x20]!
	0x032C3040 STP X20, X19, [X31 + 0x10]
	0x032C3044 MOV X20, X1
	0x032C3048 MOV X1, X31
	0x032C304C MOV X19, X2
	0x032C3050 MOV X21, X0
	0x032C3054 BL 0x336756C
	0x032C3058 STP X20, X19, [X21 + 0x10]
	0x032C305C LDP X20, X19, [X31 + 0x10]
	0x032C3060 LDP X30, X21, [X31], #0x20
	0x032C3064 RET
	0x032C3068 LDR X0, [X0 + 0x10]
	0x032C306C RET
	0x032C3070 LDR X0, [X0 + 0x18]
	0x032C3074 RET
	0x032C3078 STR X30, [X31 - 0x10]!
	0x032C307C LDR X8, [X0 + 0x18]
	0x032C3080 CBZ X8, 0x32C3090
	0x032C3084 LDR W0, [X8 + 0x18]
	0x032C3088 LDR X30, [X31], #0x10
	0x032C308C RET
	0x032C3090 BL 0x1C16F20
	0x032C3094 STR X30, [X31 - 0x10]!
	0x032C3098 LDR X8, [X0 + 0x18]
	0x032C309C CBZ X8, 0x32C30BC
	0x032C30A0 LDR W9, [X8 + 0x18]
	0x032C30A4 CMP W9, W1
	0x032C30A8 B.LS 0x32C30C0
	0x032C30AC ADD X8, X8, W1, 0x3, SXTW
	0x032C30B0 LDR X0, [X8 + 0x20]
	0x032C30B4 LDR X30, [X31], #0x10
	0x032C30B8 RET
	0x032C30BC BL 0x1C16F20
	0x032C30C0 BL 0x1C16F28
	0x032C30C4 LDP X8, X2, [X0 + 0x10]
	0x032C30C8 MOV X0, X1
	0x032C30CC MOV X3, X31
	0x032C30D0 MOV X1, X8
	0x032C30D4 B 0x3227E0C
	0x032C30D8 MOV X1, X31
	0x032C30DC B 0x33A51F0
	0x032C30E0 MOV X1, X31
	0x032C30E4 B 0x33A51F0
	0x032C30E8 MOV X1, X31
	0x032C30EC B 0x33A51F0
	0x032C30F0 STR X30, [X31 - 0x20]!
	0x032C30F4 STP X20, X19, [X31 + 0x10]
	0x032C30F8 MOV X19, X1
	0x032C30FC MOV X1, X31
	0x032C3100 MOV X20, X0
	0x032C3104 BL 0x33A51F0
	0x032C3108 STR X19, [X20 + 0x10]
	0x032C310C LDP X20, X19, [X31 + 0x10]
	0x032C3110 LDR X30, [X31], #0x20
	0x032C3114 RET
	0x032C3118 MOV X1, X31
	0x032C311C B 0x33A51F0
	0x032C3120 AND W8, W1, 0x1
	0x032C3124 STRB W8, [X0 + 0x10]
	0x032C3128 RET
	0x032C312C MOV W0, W31
	0x032C3130 RET
	0x032C3134 STR X30, [X31 - 0x30]!
	0x032C3138 STP X22, X21, [X31 + 0x10]
	0x032C313C STP X20, X19, [X31 + 0x20]
	0x032C3140 ADRP X22, 0x1119000
	0x032C3144 ADRP X21, 0xE30000
	0x032C3148 LDRB W8, [X22 + 0x88D]
	0x032C314C LDR X21, [X21 + 0x7D0]
	0x032C3150 MOV X19, X1
	0x032C3154 MOV X20, X0
	0x032C3158 TBNZ X8, 0x0, 0x32C317C
	0x032C315C ADRP X0, 0xE30000
	0x032C3160 LDR X0, [X0 + 0x7D0]
	0x032C3164 BL 0x1C16CF4
	0x032C3168 ADRP X0, 0xE62000
	0x032C316C LDR X0, [X0 + 0x828]
	0x032C3170 BL 0x1C16CF4
	0x032C3174 MOVZ W8, 0x1
	0x032C3178 STRB W8, [X22 + 0x88D]
	0x032C317C LDR X0, [X21]
	0x032C3180 ADRP X21, 0xE62000
	0x032C3184 LDR W8, [X0 + 0xE0]
	0x032C3188 LDR X21, [X21 + 0x828]
	0x032C318C CBNZ W8, 0x32C3194
	0x032C3190 BL 0x1C16DFC
	0x032C3194 LDR X1, [X21]
	0x032C3198 MOV X0, X20
	0x032C319C MOV X2, X31
	0x032C31A0 BL 0x33B2C70
	0x032C31A4 MOVZ W8, 0x153E
	0x032C31A8 MOVK W8, 0x80130000
	0x032C31AC STR W8, [X20 + 0x60]
	0x032C31B0 STR X19, [X20 + 0x90]
	0x032C31B4 LDP X20, X19, [X31 + 0x20]
	0x032C31B8 LDP X22, X21, [X31 + 0x10]
	0x032C31BC LDR X30, [X31], #0x30
	0x032C31C0 RET
	0x032C31C4 STR X30, [X31 - 0x40]!
	0x032C31C8 STP X24, X23, [X31 + 0x10]
	0x032C31CC STP X22, X21, [X31 + 0x20]
	0x032C31D0 STP X20, X19, [X31 + 0x30]
	0x032C31D4 ADRP X24, 0x1119000
	0x032C31D8 ADRP X23, 0xE30000
	0x032C31DC LDRB W8, [X24 + 0x88E]
	0x032C31E0 LDR X23, [X23 + 0x7D0]
	0x032C31E4 MOV X21, X3
	0x032C31E8 MOV X22, X2
	0x032C31EC MOV X20, X1
	0x032C31F0 MOV X19, X0
	0x032C31F4 TBNZ X8, 0x0, 0x32C3230
	0x032C31F8 ADRP X0, 0xE30000
	0x032C31FC LDR X0, [X0 + 0x7D0]
	0x032C3200 BL 0x1C16CF4
	0x032C3204 ADRP X0, 0xE3A000
	0x032C3208 LDR X0, [X0 + 0x968]
	0x032C320C BL 0x1C16CF4
	0x032C3210 ADRP X0, 0xE30000
	0x032C3214 LDR X0, [X0 + 0x6C0]
	0x032C3218 BL 0x1C16CF4
	0x032C321C ADRP X0, 0xE62000
	0x032C3220 LDR X0, [X0 + 0x830]
	0x032C3224 BL 0x1C16CF4
	0x032C3228 MOVZ W8, 0x1
	0x032C322C STRB W8, [X24 + 0x88E]
	0x032C3230 LDR X0, [X23]
	0x032C3234 ADRP X23, 0xE3A000
	0x032C3238 ADRP X24, 0xE30000
	0x032C323C LDR W8, [X0 + 0xE0]
	0x032C3240 LDR X23, [X23 + 0x968]
	0x032C3244 LDR X24, [X24 + 0x6C0]
	0x032C3248 CBNZ W8, 0x32C3250
	0x032C324C BL 0x1C16DFC
	0x032C3250 MOV X0, X19
	0x032C3254 MOV X1, X20
	0x032C3258 MOV X2, X22
	0x032C325C MOV X3, X21
	0x032C3260 MOV X4, X31
	0x032C3264 BL 0x33B2CD8
	0x032C3268 LDR X0, [X24]
	0x032C326C LDR X21, [X23]
	0x032C3270 LDR W8, [X0 + 0xE0]
	0x032C3274 CBNZ W8, 0x32C327C
	0x032C3278 BL 0x1C16DFC
	0x032C327C MOV X0, X21
	0x032C3280 MOV X1, X31
	0x032C3284 BL 0x338C698
	0x032C3288 CBZ X20, 0x32C32C0
	0x032C328C ADRP X8, 0xE62000
	0x032C3290 LDR X8, [X8 + 0x830]
	0x032C3294 MOV X2, X0
	0x032C3298 MOV X0, X20
	0x032C329C MOV X3, X31
	0x032C32A0 LDR X1, [X8]
	0x032C32A4 BL 0x32A9678
	0x032C32A8 STR X0, [X19 + 0x90]
	0x032C32AC LDP X20, X19, [X31 + 0x30]
	0x032C32B0 LDP X22, X21, [X31 + 0x20]
	0x032C32B4 LDP X24, X23, [X31 + 0x10]
	0x032C32B8 LDR X30, [X31], #0x40
	0x032C32BC RET
	0x032C32C0 BL 0x1C16F20
	0x032C32C4 STP X30, X25, [X31 - 0x40]!
	0x032C32C8 STP X24, X23, [X31 + 0x10]
	0x032C32CC STP X22, X21, [X31 + 0x20]
	0x032C32D0 STP X20, X19, [X31 + 0x30]
	0x032C32D4 ADRP X25, 0x1119000
	0x032C32D8 ADRP X23, 0xE3A000
	0x032C32DC ADRP X24, 0xE30000
	0x032C32E0 LDRB W8, [X25 + 0x88F]
	0x032C32E4 LDR X23, [X23 + 0x968]
	0x032C32E8 LDR X24, [X24 + 0x6C0]
	0x032C32EC MOV X21, X3
	0x032C32F0 MOV X22, X2
	0x032C32F4 MOV X19, X1
	0x032C32F8 MOV X20, X0
	0x032C32FC TBNZ X8, 0x0, 0x32C332C
	0x032C3300 ADRP X0, 0xE3A000
	0x032C3304 LDR X0, [X0 + 0x968]
	0x032C3308 BL 0x1C16CF4
	0x032C330C ADRP X0, 0xE30000
	0x032C3310 LDR X0, [X0 + 0x6C0]
	0x032C3314 BL 0x1C16CF4
	0x032C3318 ADRP X0, 0xE62000
	0x032C331C LDR X0, [X0 + 0x830]
	0x032C3320 BL 0x1C16CF4
	0x032C3324 MOVZ W8, 0x1
	0x032C3328 STRB W8, [X25 + 0x88F]
	0x032C332C MOV X0, X20
	0x032C3330 MOV X1, X19
	0x032C3334 MOV X2, X22
	0x032C3338 MOV X3, X21
	0x032C333C MOV X4, X31
	0x032C3340 BL 0x33B3620
	0x032C3344 LDR X0, [X24]
	0x032C3348 LDR X20, [X20 + 0x90]
	0x032C334C LDR X21, [X23]
	0x032C3350 LDR W8, [X0 + 0xE0]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+48], X30
	003 Move [X31+64], X26
	004 Move [X31+72], X25
	005 Move [X31+80], X24
	006 Move [X31+88], X23
	007 Move [X31+96], X22
	008 Move [X31+104], X21
	009 Move [X31+112], X20
	010 Move [X31+120], X19
	011 Move X22, 0x111B000
	012 Move X21, 0xE64000
	013 Move X24, 0xE5A000
	014 Move W8, [X22+2174]
	015 Move X21, [X21+1848]
	016 Move X24, [X24+2128]
	017 Move X20, X1
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {73}
	023 Move X0, 0xE64000
	024 Move X0, [X0+1856]
	025 Call 0x1C17CF4
	026 Move X0, 0xE64000
	027 Move X0, [X0+1864]
	028 Call 0x1C17CF4
	029 Move X0, 0xE64000
	030 Move X0, [X0+1872]
	031 Call 0x1C17CF4
	032 Move X0, 0xE64000
	033 Move X0, [X0+1880]
	034 Call 0x1C17CF4
	035 Move X0, 0xE64000
	036 Move X0, [X0+1888]
	037 Call 0x1C17CF4
	038 Move X0, 0xE64000
	039 Move X0, [X0+1896]
	040 Call 0x1C17CF4
	041 Move X0, 0xE5A000
	042 Move X0, [X0+2128]
	043 Call 0x1C17CF4
	044 Move X0, 0xE32000
	045 Move X0, [X0+2512]
	046 Call 0x1C17CF4
	047 Move X0, 0xE63000
	048 Move X0, [X0+2464]
	049 Call 0x1C17CF4
	050 Move X0, 0xE5A000
	051 Move X0, [X0+2912]
	052 Call 0x1C17CF4
	053 Move X0, 0xE3A000
	054 Move X0, [X0+3168]
	055 Call 0x1C17CF4
	056 Move X0, 0xE32000
	057 Move X0, [X0+1728]
	058 Call 0x1C17CF4
	059 Move X0, 0xE64000
	060 Move X0, [X0+1904]
	061 Call 0x1C17CF4
	062 Move X0, 0xE64000
	063 Move X0, [X0+1912]
	064 Call 0x1C17CF4
	065 Move X0, 0xE64000
	066 Move X0, [X0+1848]
	067 Call 0x1C17CF4
	068 Move X0, 0xE5B000
	069 Move X0, [X0+880]
	070 Call 0x1C17CF4
	071 Move W8, 1
	072 Move [X22+2174], W8
	073 Move X25, 0xE64000
	074 Move X25, [X25+1912]
	075 Move X3, [X21]
	076 Add X0, X31, 32
	077 Move X1, X19
	078 Move X2, X20
	079 Move [X31+32], X31
	080 Move [X31+40], X31
	081 Move [X31+56], X31
	082 Move [X31+28], W31
	083 Move [X31+16], X31
	084 Call ValueTuple`2<Object, Object>..ctor, X0, X1, X2
	085 Move X0, [X24]
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {90}
	089 Call 0x1C17DFC
	090 Move X0, [X25]
	091 Move W8, [X0+224]
	092 Compare W8, 0
	093 JumpIfNotEqual {96}
	094 Call 0x1C17DFC
	095 Move X0, [X25]
	096 Move X8, [X0+184]
	097 Move X9, [X24]
	098 Move X26, 0xE64000
	099 Move X22, [X8+8]
	100 Move X8, [X9+184]
	101 Move X26, [X26+1896]
	102 Add X21, X8, 8
	103 Compare X22, 0
	104 JumpIfNotEqual {126}
	105 Move W8, [X0+224]
	106 Compare W8, 0
	107 JumpIfNotEqual {110}
	108 Call 0x1C17DFC
	109 Move X0, [X25]
	110 Move X9, 0xE64000
	111 Move X8, [X0+184]
	112 Move X9, [X9+1872]
	113 Move X23, [X8]
	114 Move X0, [X9]
	115 Call 0x1C17F10
	116 Move X8, 0xE64000
	117 Move X8, [X8+1904]
	118 Move X1, X23
	119 Move X3, X31
	120 Move X22, X0
	121 Move X2, [X8]
	122 Call Func`1<Object>..ctor, X0, X1, X2
	123 Move X8, [X25]
	124 Move X8, [X8+184]
	125 Move [X8+8], X22
	126 Move X2, [X26]
	127 Move X0, X21
	128 Move X1, X22
	129 Call 0x2213A40, X0, X1
	130 Move X0, [X24]
	131 Move W8, [X0+224]
	132 Compare W8, 0
	133 JumpIfNotEqual {136}
	134 Call 0x1C17DFC
	135 Move X0, [X24]
	136 Move X8, [X0+184]
	137 Move X22, [X8+16]
	138 Move [X31+28], W31
	139 Add X1, X31, 28
	140 Move X0, X22
	141 Move X2, X31
	142 Call Monitor.Enter, X0, X1
	143 Move X0, [X24]
	144 Move W8, [X0+224]
	145 Compare W8, 0
	146 JumpIfNotEqual {149}
	147 Call 0x1C17DFC
	148 Move X0, [X24]
	149 Move X8, [X0+184]
	150 Move X0, [X8+8]
	151 Compare X0, 0
	152 JumpIfEqual {364}
	153 Move X8, 0xE64000
	154 Move X8, [X8+1856]
	155 Move X1, [X31+32]
	156 Move X2, [X31+40]
	157 Move X4, [X8]
	158 Add X3, X31, 56
	159 Call Dictionary`2<ValueTuple`2<Object, Object>, Object>.TryGetValue, X0, X1, X2
	160 Move W21, W0
	161 Move X23, X31
	162 Move W25, 3
	163 Move W8, [X31+28]
	164 Compare W8, 0
	165 JumpIfEqual {169}
	166 Move X0, X22
	167 Move X1, X31
	168 Call Monitor.Exit, X0
	169 Compare X23, 0
	170 JumpIfNotEqual {362}
	171 NotImplemented "Instruction CMP not yet implemented."
	172 Compare W25, 0
	173 JumpIfNotEqual {351}
	174 Move TEMP, X21
	175 And TEMP, TEMP, 1
	176 Compare TEMP, 1
	177 JumpIfEqual {350}
	178 Move X8, 0xE3A000
	179 Move X8, [X8+3168]
	180 Move X0, [X8]
	181 Move W1, 1
	182 Call 0x1C17D6C
	183 Move X23, 0xE32000
	184 Move X23, [X23+1728]
	185 Move X8, 0xE5A000
	186 Move X21, X0
	187 Move X0, [X23]
	188 Move X8, [X8+2912]
	189 Move W9, [X0+224]
	190 Move X22, [X8]
	191 Compare W9, 0
	192 JumpIfNotEqual {194}
	193 Call 0x1C17DFC
	194 Move X0, X22
	195 Move X1, X31
	196 Call Type.GetTypeFromHandle, X0
	197 Compare X21, 0
	198 JumpIfEqual {381}
	199 Move X22, X0
	200 Compare X0, 0
	201 JumpIfEqual {208}
	202 Move X8, [X21]
	203 Move X1, [X8+64]
	204 Move X0, X22
	205 Call 0x1C17E00
	206 Compare X0, 0
	207 JumpIfEqual {389}
	208 Move W8, [X21+24]
	209 Compare W8, 0
	210 JumpIfEqual {382}
	211 Move [X21+32], X22
	212 Compare X19, 0
	213 JumpIfEqual {383}
	214 Move X8, 0xE5B000
	215 Move X8, [X8+880]
	216 Move X1, [X8]
	217 Move W2, 312
	218 Move X0, X19
	219 Move X3, X31
	220 Move X4, X21
	221 Move X5, X31
	222 Move X6, X31
	223 Call Type.GetMethod, X0, X1, X2, X3, X4, X5
	224 Move X21, X0
	225 Compare X0, 0
	226 JumpIfEqual {365}
	227 Move X9, 0xE63000
	228 Move X9, [X9+2464]
	229 Move X8, [X21]
	230 Move X1, [X9]
	231 Move W10, [X8+304]
	232 Move W9, [X1+304]
	233 NotImplemented "Instruction CMP not yet implemented."
	234 Move X8, [X8+200]
	235 Add X8, X8, X9
	236 NotImplemented "Instruction LDUR not yet implemented."
	237 NotImplemented "Instruction CMP not yet implemented."
	238 Move X8, [X21]
	239 Move X0, X21
	240 Move X9, [X8+952]
	241 Move X1, [X8+960]
	242 NotImplemented "Instruction BLR not yet implemented."
	243 Move X9, 0xE64000
	244 Move X8, [X23]
	245 Move X9, [X9+1880]
	246 Move X22, X0
	247 Move W10, [X8+224]
	248 Move X23, [X9]
	249 Compare W10, 0
	250 JumpIfNotEqual {253}
	251 Move X0, X8
	252 Call 0x1C17DFC
	253 Move X0, X23
	254 Move X1, X31
	255 Call Type.GetTypeFromHandle, X0
	256 Move X1, X0
	257 Move X0, X22
	258 Move X2, X31
	259 Call Type.op_Inequality, X0, X1
	260 Move TEMP, X0
	261 And TEMP, TEMP, 1
	262 Compare TEMP, 1
	263 JumpIfEqual {365}
	264 Move X8, 0xE32000
	265 Move X8, [X8+2512]
	266 Move X0, [X8]
	267 Move W1, 1
	268 Call 0x1C17D6C
	269 Move X22, X0
	270 Compare X0, 0
	271 JumpIfEqual {384}
	272 Compare X20, 0
	273 JumpIfEqual {280}
	274 Move X8, [X22]
	275 Move X1, [X8+64]
	276 Move X0, X20
	277 Call 0x1C17E00
	278 Compare X0, 0
	279 JumpIfEqual {392}
	280 Move W8, [X22+24]
	281 Compare W8, 0
	282 JumpIfEqual {385}
	283 Move [X22+32], X20
	284 Add X3, X31, 16
	285 Move X0, X21
	286 Move X1, X31
	287 Move X2, X22
	288 Move X4, X31
	289 Call RuntimeMethodInfo.InternalInvoke, X0, X1, X2, X3
	290 Move X20, X0
	291 Compare X0, 0
	292 JumpIfEqual {304}
	293 Move X8, 0xE64000
	294 Move X8, [X8+1888]
	295 Move X21, [X8]
	296 Move X0, X20
	297 Move X1, X21
	298 Call 0x1C17E00
	299 Compare X0, 0
	300 JumpIfNotEqual {305}
	301 Move X0, X20
	302 Move X1, X21
	303 Call 0x1C181E0
	304 Move X0, X31
	305 Move X20, [X31+16]
	306 Move [X31+56], X0
	307 Compare X20, 0
	308 JumpIfNotEqual {448}
	309 Compare X0, 0
	310 JumpIfEqual {434}
	311 Move X0, [X24]
	312 Move W8, [X0+224]
	313 Compare W8, 0
	314 JumpIfNotEqual {317}
	315 Call 0x1C17DFC
	316 Move X0, [X24]
	317 Move X8, [X0+184]
	318 Move X19, [X8+16]
	319 Move [X31+28], W31
	320 Add X1, X31, 28
	321 Move X0, X19
	322 Move X2, X31
	323 Call Monitor.Enter, X0, X1
	324 Move X0, [X24]
	325 Move W8, [X0+224]
	326 Compare W8, 0
	327 JumpIfNotEqual {330}
	328 Call 0x1C17DFC
	329 Move X0, [X24]
	330 Move X8, [X0+184]
	331 Move X0, [X8+8]
	332 Compare X0, 0
	333 JumpIfEqual {388}
	334 Move X8, 0xE64000
	335 Move X3, [X31+56]
	336 Move X1, [X31+32]
	337 Move X2, [X31+40]
	338 Move X8, [X8+1864]
	339 Move X4, [X8]
	340 Call Dictionary`2<ValueTuple`2<Object, Object>, Object>.set_Item, X0, X1, X2
	341 Move X20, X31
	342 Move W8, [X31+28]
	343 Compare W8, 0
	344 JumpIfEqual {348}
	345 Move X0, X19
	346 Move X1, X31
	347 Call Monitor.Exit, X0
	348 Compare X20, 0
	349 JumpIfNotEqual {386}
	350 Move X0, [X31+56]
	351 Move X20, [X31+112]
	352 Move X19, [X31+120]
	353 Move X22, [X31+96]
	354 Move X21, [X31+104]
	355 Move X24, [X31+80]
	356 Move X23, [X31+88]
	357 Move X26, [X31+64]
	358 Move X25, [X31+72]
	359 Move X30, [X31+48]
	360 Add X31, X31, 128
	361 Return X0
	362 Move X0, X23
	363 Call 0x1C17F18
	364 Call 0x1C17F20
	365 Move X0, X19
	366 Call 0x19913C0
	367 Move X8, [X19]
	368 Move X0, X19
	369 Move X9, [X8+744]
	370 Move X1, [X8+752]
	371 NotImplemented "Instruction BLR not yet implemented."
	372 Move X19, X0
	373 Move X0, 0xE63000
	374 Move X0, [X0+1920]
	375 Call 0x1C17D08
	376 Move X20, X0
	377 Move X0, 0xE63000
	378 Move X0, [X0+1928]
	379 Move X0, X21
	380 Call 0x1C181E0
	381 Call 0x1C17F20
	382 Call 0x1C17F28
	383 Call 0x1C17F20
	384 Call 0x1C17F20
	385 Call 0x1C17F28
	386 Move X0, X20
	387 Call 0x1C17F18
	388 Call 0x1C17F20
	389 Call 0x1C17F44
	390 Move X1, X31
	391 Call 0x1C17DEC
	392 Call 0x1C17F44
	393 Move X1, X31
	394 Call 0x1C17DEC
	395 Move X21, X0
	396 NotImplemented "Instruction CMP not yet implemented."
	397 Move X0, X21
	398 Call 0x3EB2AD0
	399 Move X20, [X0]
	400 Call 0x3EB2AE0
	401 Move X20, X31
	402 Move X21, X0
	403 Move W8, [X31+28]
	404 Compare W8, 0
	405 JumpIfEqual {409}
	406 Move X0, X19
	407 Move X1, X31
	408 Call Monitor.Exit, X0
	409 Compare X20, 0
	410 JumpIfEqual {548}
	411 Move X0, X20
	412 Call 0x1C17F18
	413 Move X21, X0
	414 NotImplemented "Instruction CMP not yet implemented."
	415 Move X0, X21
	416 Call 0x3EB2AD0
	417 Move X20, X0
	418 Move X0, 0xE31000
	419 Move X0, [X0+2000]
	420 Call 0x1C17D08
	421 Move X8, [X20]
	422 Move X1, [X8]
	423 Call 0x1C18270
	424 Move TEMP, X0
	425 And TEMP, TEMP, 1
	426 Compare TEMP, 1
	427 JumpIfNotEqual {454}
	428 Move X20, [X20]
	429 Call 0x3EB2AE0
	430 Move [X31+16], X20
	431 Move [X31+56], X31
	432 Compare X20, 0
	433 JumpIfNotEqual {448}
	434 Move X0, X19
	435 Call 0x19913C0
	436 Move X8, [X19]
	437 Move X0, X19
	438 Move X9, [X8+744]
	439 Move X1, [X8+752]
	440 NotImplemented "Instruction BLR not yet implemented."
	441 Move X19, X0
	442 Move X0, 0xE63000
	443 Move X0, [X0+1936]
	444 Call 0x1C17D08
	445 Move X20, X0
	446 Move X0, 0xE63000
	447 Move X0, [X0+1944]
	448 Move X0, X20
	449 Call ExceptionDispatchInfo.Capture, X0
	450 Move X19, X0
	451 Call 0x19913C0
	452 Move X0, X19
	453 Call ExceptionDispatchInfo.Throw, X0
	454 Move W0, 8
	455 Call 0x3EB2AF0
	456 Move X8, [X20]
	457 Move [X0], X8
	458 Move X1, 0xBF2000
	459 Add X1, X1, 3672
	460 Move X2, X31
	461 Call 0x3EB2B00
	462 Move X21, X0
	463 Call 0x3EB2AE0
	464 Move X21, X0
	465 NotImplemented "Instruction CMP not yet implemented."
	466 Move X0, X21
	467 Call 0x3EB2AD0
	468 Move X8, [X0]
	469 Move [X31+8], X8
	470 Call 0x3EB2AE0
	471 Move X23, [X31+8]
	472 Move W25, W31
	473 Move W21, W31
	474 Move [X31+8], X31
	475 Move X21, X0
	476 Move W8, [X31+28]
	477 Compare W8, 0
	478 JumpIfEqual {482}
	479 Move X0, X22
	480 Move X1, X31
	481 Call Monitor.Exit, X0
	482 Move X8, [X31+8]
	483 Compare X8, 0
	484 JumpIfEqual {548}
	485 Move X0, [X31+8]
	486 Call 0x1C17F18
	487 Move X21, X0
	488 NotImplemented "Instruction CMP not yet implemented."
	489 Move X0, X21
	490 Call 0x3EB2AD0
	491 Move X20, X0
	492 Move X0, 0xE63000
	493 Move X0, [X0+1952]
	494 Call 0x1C17D08
	495 Move X8, [X20]
	496 Move X1, [X8]
	497 Call 0x1C18270
	498 Move TEMP, X0
	499 And TEMP, TEMP, 1
	500 Compare TEMP, 1
	501 JumpIfNotEqual {538}
	502 Call 0x3EB2AE0
	503 Move X0, X19
	504 Call 0x19913C0
	505 Move X8, [X19]
	506 Move X0, X19
	507 Move X9, [X8+744]
	508 Move X1, [X8+752]
	509 NotImplemented "Instruction BLR not yet implemented."
	510 Move X19, X0
	511 Move X0, 0xE63000
	512 Move X0, [X0+1920]
	513 Call 0x1C17D08
	514 Move X20, X0
	515 Move X0, 0xE63000
	516 Move X0, [X0+1960]
	517 Call 0x1C17D08
	518 Move X2, X0
	519 Move X0, X20
	520 Move X1, X19
	521 Move X3, X31
	522 Call String.Concat, X0, X1, X2
	523 Move X19, X0
	524 Move X0, 0xE63000
	525 Move X0, [X0+1968]
	526 Call 0x1C17D08
	527 Call 0x1C17F10
	528 Move X1, X19
	529 Move X2, X31
	530 Move X20, X0
	531 Call ApplicationException..ctor, X0, X1
	532 Move X0, 0xE63000
	533 Move X0, [X0+1976]
	534 Call 0x1C17D08
	535 Move X1, X0
	536 Move X0, X20
	537 Call 0x1C17DEC
	538 Move W0, 8
	539 Call 0x3EB2AF0
	540 Move X8, [X20]
	541 Move [X0], X8
	542 Move X1, 0xBF2000
	543 Add X1, X1, 3672
	544 Move X2, X31
	545 Call 0x3EB2B00
	546 Move X21, X0
	547 Call 0x3EB2AE0
	548 Move X0, X21
	549 Call 0x1D2D690
	550 Call 0x1991590

Method: System.Void .cctor()

Disassembly:
	0x032C3484 STR X19, [X20 + 0x10]
	0x032C3488 LDP X20, X19, [X31 + 0x10]
	0x032C348C LDR X30, [X31], #0x20
	0x032C3490 RET
	0x032C3494 ADRP X0, 0xE35000
	0x032C3498 LDR X0, [X0 + 0x528]
	0x032C349C BL 0x1C16D08
	0x032C34A0 BL 0x1C16F10
	0x032C34A4 MOV X19, X0
	0x032C34A8 ADRP X0, 0xE62000
	0x032C34AC LDR X0, [X0 + 0x850]
	0x032C34B0 BL 0x1C16D08
	0x032C34B4 MOV X1, X0
	0x032C34B8 MOV X0, X19
	0x032C34BC MOV X2, X31
	0x032C34C0 BL 0x330E100
	0x032C34C4 ADRP X0, 0xE62000
	0x032C34C8 LDR X0, [X0 + 0x858]
	0x032C34CC BL 0x1C16D08
	0x032C34D0 MOV X1, X0
	0x032C34D4 MOV X0, X19
	0x032C34D8 BL 0x1C16DEC
	0x032C34DC LDR X0, [X0 + 0x10]
	0x032C34E0 RET
	0x032C34E4 MOV X1, X31
	0x032C34E8 B 0x33A51F0
	0x032C34EC STP X1, X2, [X0]
	0x032C34F0 RET
	0x032C34F4 STP X30, X21, [X31 - 0x20]!
	0x032C34F8 STP X20, X19, [X31 + 0x10]
	0x032C34FC ADRP X20, 0x1119000
	0x032C3500 ADRP X21, 0xE5A000
	0x032C3504 LDRB W8, [X20 + 0x891]
	0x032C3508 LDR X21, [X21 + 0xE40]
	0x032C350C MOV X19, X0
	0x032C3510 TBNZ X8, 0x0, 0x32C3528
	0x032C3514 ADRP X0, 0xE5A000
	0x032C3518 LDR X0, [X0 + 0xE40]
	0x032C351C BL 0x1C16CF4
	0x032C3520 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x111A000
	006 Move X20, 0xE59000
	007 Move X19, 0xE37000
	008 Move W8, [X21+2175]
	009 Move X20, [X20+2128]
	010 Move X19, [X19+3264]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xE59000
	016 Move X0, [X0+2128]
	017 Call 0x1C17CF4
	018 Move X0, 0xE37000
	019 Move X0, [X0+3264]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+2175], W8
	023 Move X8, [X20]
	024 Move W9, 2
	025 Move X0, X31
	026 Move X8, [X8+184]
	027 Move [X8], W9
	028 Call Environment.get_IsRunningOnWindows
	029 Move X8, [X20]
	030 And W31, W0, 1
	031 Move W9, 1
	032 NotImplemented "Instruction CINC not yet implemented."
	033 Move X8, [X8+184]
	034 Move [X8+4], W9
	035 Move X0, [X19]
	036 Call 0x1C17F10
	037 Move X1, X31
	038 Move X19, X0
	039 Call Object..ctor, X0
	040 Move X8, [X20]
	041 Move X8, [X8+184]
	042 Move [X8+16], X19
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Return 

