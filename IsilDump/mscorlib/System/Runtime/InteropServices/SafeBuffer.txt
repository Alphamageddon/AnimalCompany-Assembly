Type: System.Runtime.InteropServices.SafeBuffer

Method: System.Void AcquirePointer(ref System.Byte* pointer)

Disassembly:
	0x032C080C MOV X1, X0
	0x032C0810 MOV X0, X19
	0x032C0814 MOV X2, X31
	0x032C0818 BL 0x337DF1C
	0x032C081C ADRP X0, 0xE65000
	0x032C0820 LDR X0, [X0 + 0x6C0]
	0x032C0824 BL 0x1C16D08
	0x032C0828 MOV X1, X0
	0x032C082C MOV X0, X19
	0x032C0830 BL 0x1C16DEC
	0x032C0834 B 0x1C742D0
	0x032C0838 RET
	0x032C083C STP X30, X19, [X31 - 0x10]!
	0x032C0840 MOV X1, X31
	0x032C0844 MOV X2, X31
	0x032C0848 MOV X19, X0
	0x032C084C BL 0x33BE5B0
	0x032C0850 TBNZ X0, 0x0, 0x32C086C
	0x032C0854 MOV X0, X19
	0x032C0858 BL 0x1C4CAE4
	0x032C085C TBZ X0, 0x0, 0x32C08A0
	0x032C0860 MOV X0, X19
	0x032C0864 LDP X30, X19, [X31], #0x10
	0x032C0868 RET
	0x032C086C ADRP X0, 0xE33000
	0x032C0870 LDR X0, [X0 + 0x5B0]
	0x032C0874 BL 0x1C16D08
	0x032C0878 BL 0x1C16F10
	0x032C087C MOV X19, X0
	0x032C0880 ADRP X0, 0xE65000
	0x032C0884 LDR X0, [X0 + 0x6C8]
	0x032C0888 BL 0x1C16D08
	0x032C088C MOV X1, X0
	0x032C0890 MOV X0, X19
	0x032C0894 MOV X2, X31
	0x032C0898 BL 0x337DF1C
	0x032C089C B 0x32C08D0
	0x032C08A0 ADRP X0, 0xE3B000
	0x032C08A4 LDR X0, [X0 + 0x578]
	0x032C08A8 BL 0x1C16D08
	0x032C08AC BL 0x1C16F10
	0x032C08B0 MOV X19, X0
	0x032C08B4 ADRP X0, 0xE65000
	0x032C08B8 LDR X0, [X0 + 0x6D0]
	0x032C08BC BL 0x1C16D08
	0x032C08C0 MOV X1, X0
	0x032C08C4 MOV X0, X19
	0x032C08C8 MOV X2, X31
	0x032C08CC BL 0x3314A68
	0x032C08D0 ADRP X0, 0xE65000
	0x032C08D4 LDR X0, [X0 + 0x6D8]
	0x032C08D8 BL 0x1C16D08

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x111D000
	007 Move X22, 0xE66000
	008 Move W8, [X21+2145]
	009 Move X22, [X22+1608]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xE66000
	017 Move X0, [X0+1608]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2145], W8
	021 Move X0, [X22]
	022 Move X21, [X20+32]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X22]
	028 Move X8, [X0+184]
	029 Move X0, X21
	030 Move X2, X31
	031 Move X1, [X8]
	032 Call UIntPtr.op_Equality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {52}
	037 Add X1, X31, 12
	038 Move X0, X20
	039 Move [X19], X31
	040 Move [X31+12], W31
	041 Call SafeHandle.DangerousAddRef, X0, X1
	042 Move X0, [X20+16]
	043 Move X1, X31
	044 Call IntPtr.op_Explicit, X0
	045 Move [X19], X0
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X30, [X31+48]
	051 Return 
	052 Move X0, 0xE66000
	053 Move X0, [X0+1608]
	054 Call 0x1C17D08
	055 Call 0x19913D0
	056 Call SafeBuffer.NotInitialized
	057 Move X19, X0
	058 Move X0, 0xE66000
	059 Move X0, [X0+1616]
	060 Call 0x1C17D08
	061 Move X1, X0
	062 Move X0, X19
	063 Call 0x1C17DEC

Method: System.Void ReleasePointer()

Disassembly:
	0x032C0A0C BL 0x3395B7C
	0x032C0A10 CMP W0, W19
	0x032C0A14 CSET W0, LE
	0x032C0A18 B 0x32C0A20
	0x032C0A1C MOVZ W0, 0x1
	0x032C0A20 LDP X30, X19, [X31], #0x10
	0x032C0A24 RET
	0x032C0A28 BL 0x1C16F20
	0x032C0A2C STR X30, [X31 - 0x40]!
	0x032C0A30 STP X24, X23, [X31 + 0x10]
	0x032C0A34 STP X22, X21, [X31 + 0x20]
	0x032C0A38 STP X20, X19, [X31 + 0x30]
	0x032C0A3C ADRP X24, 0x111C000
	0x032C0A40 ADRP X23, 0xE5B000
	0x032C0A44 LDRB W8, [X24 + 0x86C]
	0x032C0A48 LDR X23, [X23 + 0x850]
	0x032C0A4C MOV W19, W3
	0x032C0A50 MOV X20, X2
	0x032C0A54 MOV W21, W1
	0x032C0A58 MOV X22, X0
	0x032C0A5C TBNZ X8, 0x0, 0x32C0A74
	0x032C0A60 ADRP X0, 0xE5B000
	0x032C0A64 LDR X0, [X0 + 0x850]
	0x032C0A68 BL 0x1C16CF4
	0x032C0A6C MOVZ W8, 0x1
	0x032C0A70 STRB W8, [X24 + 0x86C]
	0x032C0A74 LDR X0, [X23]
	0x032C0A78 LDR W8, [X0 + 0xE0]
	0x032C0A7C CBNZ W8, 0x32C0A84
	0x032C0A80 BL 0x1C16DFC
	0x032C0A84 MOV X0, X22
	0x032C0A88 MOV W1, W21
	0x032C0A8C BL 0x32C09F8
	0x032C0A90 TBZ X0, 0x0, 0x32C0ABC
	0x032C0A94 LDR X0, [X23]
	0x032C0A98 LDR W8, [X0 + 0xE0]
	0x032C0A9C CBNZ W8, 0x32C0AA4
	0x032C0AA0 BL 0x1C16DFC
	0x032C0AA4 MOV X0, X22
	0x032C0AA8 MOV W1, W21
	0x032C0AAC MOV X2, X20
	0x032C0AB0 MOV W3, W19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x111D000
	006 Move X21, 0xE66000
	007 Move W8, [X20+2146]
	008 Move X21, [X21+1608]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE66000
	015 Move X0, [X0+1608]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2146], W8
	019 Move X0, [X21]
	020 Move X20, [X19+32]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X21]
	026 Move X8, [X0+184]
	027 Move X0, X20
	028 Move X2, X31
	029 Move X1, [X8]
	030 Call UIntPtr.op_Equality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {43}
	035 Move X0, X19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move W1, W31
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Call SafeHandle.DangerousReleaseInternal, X0, X1
	042 Return 
	043 Move X0, 0xE66000
	044 Move X0, [X0+1608]
	045 Call 0x1C17D08
	046 Call 0x19913D0
	047 Call SafeBuffer.NotInitialized
	048 Move X19, X0
	049 Move X0, 0xE66000
	050 Move X0, [X0+1648]
	051 Call 0x1C17D08
	052 Move X1, X0
	053 Move X0, X19
	054 Call 0x1C17DEC

Method: System.InvalidOperationException NotInitialized()

Disassembly:
	0x032C08DC MOV X1, X0
	0x032C08E0 MOV X0, X19
	0x032C08E4 BL 0x1C16DEC
	0x032C08E8 B 0x1C4CAE4
	0x032C08EC MOV X2, X31
	0x032C08F0 B 0x33BE5B0
	0x032C08F4 STP X30, X21, [X31 - 0x20]!
	0x032C08F8 STP X20, X19, [X31 + 0x10]
	0x032C08FC ADRP X21, 0x111C000
	0x032C0900 LDRB W8, [X21 + 0x86A]
	0x032C0904 MOV X19, X1
	0x032C0908 MOV X20, X0
	0x032C090C TBNZ X8, 0x0, 0x32C0924
	0x032C0910 ADRP X0, 0xE65000
	0x032C0914 LDR X0, [X0 + 0x6E0]
	0x032C0918 BL 0x1C16CF4
	0x032C091C MOVZ W8, 0x1
	0x032C0920 STRB W8, [X21 + 0x86A]
	0x032C0924 CBZ X19, 0x32C0940
	0x032C0928 ADRP X8, 0xE65000
	0x032C092C LDR X8, [X8 + 0x6E0]
	0x032C0930 LDR X9, [X19]
	0x032C0934 LDR X8, [X8]
	0x032C0938 CMP X9, X8
	0x032C093C B.EQ 0x32C0950
	0x032C0940 LDP X20, X19, [X31 + 0x10]
	0x032C0944 MOV W0, W31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x111D000
	006 Move X21, 0xE34000
	007 Move X19, 0xE66000
	008 Move W8, [X20+2147]
	009 Move X21, [X21+1456]
	010 Move X19, [X19+1624]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xE34000
	016 Move X0, [X0+1456]
	017 Call 0x1C17CF4
	018 Move X0, 0xE66000
	019 Move X0, [X0+1624]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+2147], W8
	023 Move X0, [X21]
	024 Call 0x1C17F10
	025 Move X1, [X19]
	026 Move X2, X31
	027 Move X19, X0
	028 Call InvalidOperationException..ctor, X0, X1
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return X0

Method: System.Void .cctor()

Disassembly:
	0x032C0ABC CBZ X22, 0x32C0B0C
	0x032C0AC0 LDR W8, [X22 + 0x18]
	0x032C0AC4 CMP W8, W21
	0x032C0AC8 B.LS 0x32C0B10
	0x032C0ACC LDR X0, [X23]
	0x032C0AD0 ADD X9, X22, W21, SXTW
	0x032C0AD4 ADD X23, X9, 0x20
	0x032C0AD8 LDR W8, [X0 + 0xE0]
	0x032C0ADC CBNZ W8, 0x32C0AE4
	0x032C0AE0 BL 0x1C16DFC
	0x032C0AE4 MOV X0, X22
	0x032C0AE8 MOV W1, W21
	0x032C0AEC MOV X2, X20
	0x032C0AF0 MOV W3, W19
	0x032C0AF4 MOV X4, X23
	0x032C0AF8 LDP X20, X19, [X31 + 0x30]
	0x032C0AFC LDP X22, X21, [X31 + 0x20]
	0x032C0B00 LDP X24, X23, [X31 + 0x10]
	0x032C0B04 LDR X30, [X31], #0x40
	0x032C0B08 B 0x1C74EDC
	0x032C0B0C BL 0x1C16F20
	0x032C0B10 BL 0x1C16F28
	0x032C0B14 STR X30, [X31 - 0x40]!
	0x032C0B18 STP X24, X23, [X31 + 0x10]
	0x032C0B1C STP X22, X21, [X31 + 0x20]
	0x032C0B20 STP X20, X19, [X31 + 0x30]
	0x032C0B24 ADRP X24, 0x111C000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x111D000
	004 Move W8, [X19+2148]
	005 Move TEMP, X8
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfEqual {14}
	009 Move X0, 0xE66000
	010 Move X0, [X0+1608]
	011 Call 0x1C17CF4
	012 Move W8, 1
	013 Move [X19+2148], W8
	014 Move X19, 0xE66000
	015 Move X19, [X19+1608]
	016 Move X0, X31
	017 Call UIntPtr.get_Size
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move TEMP, 0
	020 Not TEMP
	021 Move W0, TEMP
	022 Move X1, X31
	023 Call UIntPtr.op_Explicit, X0
	024 Move TEMP, 0
	025 Not TEMP
	026 Move X0, TEMP
	027 Move X1, X31
	028 Call UIntPtr.op_Explicit, X0
	029 Move X8, [X19]
	030 Move X8, [X8+184]
	031 Move [X8], X0
	032 Move X30, [X31+16]
	033 Move X19, [X31+24]
	034 Return 

