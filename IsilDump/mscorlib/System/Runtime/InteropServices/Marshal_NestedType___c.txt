Type: System.Runtime.InteropServices.Marshal/<>c

Method: System.Void .cctor()

Disassembly:
	0x032C3608 LDR X9, [X9 + 0x7B8]
	0x032C360C LDR X8, [X20]
	0x032C3610 LDR X9, [X9]
	0x032C3614 LDRB W11, [X8 + 0x130]
	0x032C3618 LDRB W10, [X9 + 0x130]
	0x032C361C CMP W11, W10
	0x032C3620 B.CC 0x32C3638
	0x032C3624 LDR X11, [X8 + 0xC8]
	0x032C3628 ADD X10, X11, X10, 0x3, LSL
	0x032C362C LDUR X10, [X10 - 0x8]
	0x032C3630 CMP X10, X9
	0x032C3634 B.EQ 0x32C3708
	0x032C3638 ADRP X22, 0xE58000
	0x032C363C LDR X22, [X22 + 0x678]
	0x032C3640 ADRP X23, 0xE5F000
	0x032C3644 LDR X0, [X22]
	0x032C3648 LDR W9, [X0 + 0xE0]
	0x032C364C LDR X23, [X23 + 0xEA8]
	0x032C3650 CBNZ W9, 0x32C3660
	0x032C3654 BL 0x1C16DFC
	0x032C3658 LDR X0, [X22]
	0x032C365C LDR X8, [X20]
	0x032C3660 LDR X10, [X0 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x111A000
	005 Move X20, 0xE63000
	006 Move W8, [X19+2178]
	007 Move X20, [X20+1912]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE63000
	013 Move X0, [X0+1912]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+2178], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move X1, X31
	020 Move X19, X0
	021 Call Object..ctor, X0
	022 Move X8, [X20]
	023 Move X8, [X8+184]
	024 Move [X8], X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return 

Method: System.Void .ctor()

Disassembly:
	0x032C3664 LDRH W21, [X21 + 0x8]
	0x032C3668 LDRH W9, [X8 + 0x12E]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Collections.Generic.Dictionary`2<System.ValueTuple`2<System.Type, System.String>, System.Runtime.InteropServices.ICustomMarshaler> <GetCustomMarshalerInstance>b__201_0()

Disassembly:
	0x032C366C LDR X1, [X23]
	0x032C3670 LDR X22, [X10]
	0x032C3674 CBZ X9, 0x32C3698
	0x032C3678 LDR X10, [X8 + 0xB0]
	0x032C367C ADD X10, X10, 0x8
	0x032C3680 LDUR X11, [X10 - 0x8]
	0x032C3684 CMP X11, X1
	0x032C3688 B.EQ 0x32C36D0
	0x032C368C SUBS X9, X9, 0x1
	0x032C3690 ADD X10, X10, 0x10
	0x032C3694 B.NE 0x32C3680
	0x032C3698 MOVZ W2, 0x1
	0x032C369C MOV X0, X20
	0x032C36A0 BL 0x1C5C788
	0x032C36A4 B 0x32C36E0
	0x032C36A8 ADRP X8, 0xE5A000
	0x032C36AC LDR X8, [X8 + 0xE40]
	0x032C36B0 LDR X0, [X8]
	0x032C36B4 LDR W8, [X0 + 0xE0]
	0x032C36B8 CBNZ W8, 0x32C36C0
	0x032C36BC BL 0x1C16DFC
	0x032C36C0 MOV X0, X31
	0x032C36C4 BL 0x33ED4C8
	0x032C36C8 CBNZ X0, 0x32C370C
	0x032C36CC BL 0x1C16F20
	0x032C36D0 LDR W9, [X10]
	0x032C36D4 ADD W9, W9, 0x1
	0x032C36D8 ADD X8, X8, W9, 0x4, SXTW
	0x032C36DC ADD X0, X8, 0x138
	0x032C36E0 LDP X6, X5, [X0]
	0x032C36E4 MOV X0, X20
	0x032C36E8 MOV X1, X22
	0x032C36EC MOV X2, X19
	0x032C36F0 MOV W3, W21
	0x032C36F4 LDP X20, X19, [X31 + 0x20]
	0x032C36F8 LDP X22, X21, [X31 + 0x10]
	0x032C36FC MOVZ W4, 0x3
	0x032C3700 LDP X30, X23, [X31], #0x30
	0x032C3704 BR X6

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0x111A000
	007 Move X22, 0xE63000
	008 Move X21, 0xE63000
	009 Move X20, 0xE63000
	010 Move W8, [X19+2179]
	011 Move X22, [X22+2016]
	012 Move X21, [X21+2024]
	013 Move X20, [X20+2032]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0xE63000
	019 Move X0, [X0+2032]
	020 Call 0x1C17CF4
	021 Move X0, 0xE63000
	022 Move X0, [X0+2024]
	023 Call 0x1C17CF4
	024 Move X0, 0xE63000
	025 Move X0, [X0+2016]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X19+2179], W8
	029 Move X0, [X22]
	030 Call 0x1C17F10
	031 Move X1, X31
	032 Move X19, X0
	033 Call Object..ctor, X0
	034 Move X0, [X21]
	035 Call 0x1C17F10
	036 Move X2, [X20]
	037 Move X1, X19
	038 Move X20, X0
	039 Call Dictionary`2<ValueTuple`2<Object, Object>, Object>..ctor, X0, X1
	040 Move X0, X20
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Return X0

