Type: System.Runtime.Remoting.Messaging.ReturnMessage

Method: System.Void .ctor(System.Object ret, System.Object[] outArgs, System.Int32 outArgsCount, System.Runtime.Remoting.Messaging.LogicalCallContext callCtx, System.Runtime.Remoting.Messaging.IMethodCallMessage mcm)

Disassembly:
	0x0329EB68 BL 0x1993444
	0x0329EB6C MOV X0, X19
	0x0329EB70 BL 0x19903C0
	0x0329EB74 ADRP X0, 0xE86000
	0x0329EB78 LDR X0, [X0 + 0xA20]
	0x0329EB7C BL 0x1C16D08
	0x0329EB80 MOV X2, X0
	0x0329EB84 MOVZ W1, 0x4
	0x0329EB88 MOV X0, X19
	0x0329EB8C BL 0x1993444
	0x0329EB90 MOV X0, X20
	0x0329EB94 BL 0x19903C0
	0x0329EB98 LDR X8, [X20]
	0x0329EB9C MOV X0, X20
	0x0329EBA0 LDR X9, [X8 + 0x2D8]
	0x0329EBA4 LDR X1, [X8 + 0x2E0]
	0x0329EBA8 BLR X9
	0x0329EBAC MOV X20, X0
	0x0329EBB0 MOV X0, X19
	0x0329EBB4 BL 0x19903C0
	0x0329EBB8 MOVZ W1, 0x5
	0x0329EBBC MOV X0, X19
	0x0329EBC0 MOV X2, X20
	0x0329EBC4 BL 0x1993444
	0x0329EBC8 MOV X0, X19
	0x0329EBCC BL 0x19903C0
	0x0329EBD0 ADRP X0, 0xE5D000
	0x0329EBD4 LDR X0, [X0 + 0x9B0]
	0x0329EBD8 BL 0x1C16D08
	0x0329EBDC MOV X2, X0
	0x0329EBE0 MOVZ W1, 0x6
	0x0329EBE4 MOV X0, X19
	0x0329EBE8 BL 0x1993444
	0x0329EBEC MOV X0, X19
	0x0329EBF0 MOV X1, X31
	0x0329EBF4 BL 0x32278CC
	0x0329EBF8 MOV X19, X0
	0x0329EBFC ADRP X0, 0xE85000
	0x0329EC00 LDR X0, [X0 + 0xD20]
	0x0329EC04 BL 0x1C16D08
	0x0329EC08 BL 0x1C16F10
	0x0329EC0C MOV X1, X19
	0x0329EC10 MOV X2, X31
	0x0329EC14 MOV X20, X0
	0x0329EC18 BL 0x3273098
	0x0329EC1C ADRP X0, 0xE86000
	0x0329EC20 LDR X0, [X0 + 0xA28]
	0x0329EC24 BL 0x1C16D08
	0x0329EC28 MOV X1, X0
	0x0329EC2C MOV X0, X20
	0x0329EC30 BL 0x1C16DEC
	0x0329EC34 MOV X0, X20
	0x0329EC38 MOV X1, X21
	0x0329EC3C BL 0x1C171E0
	0x0329EC40 STP X30, X23, [X31 - 0x30]!
	0x0329EC44 STP X22, X21, [X31 + 0x10]
	0x0329EC48 STP X20, X19, [X31 + 0x20]
	0x0329EC4C ADRP X21, 0x113E000
	0x0329EC50 ADRP X23, 0xE55000
	0x0329EC54 LDRB W8, [X21 + 0x750]
	0x0329EC58 LDR X23, [X23 + 0x9D0]
	0x0329EC5C MOV X20, X2
	0x0329EC60 MOV X22, X1
	0x0329EC64 MOV X19, X0
	0x0329EC68 TBNZ X8, 0x0, 0x329EC98
	0x0329EC6C ADRP X0, 0xE55000
	0x0329EC70 LDR X0, [X0 + 0x9D0]
	0x0329EC74 BL 0x1C16CF4
	0x0329EC78 ADRP X0, 0xE86000
	0x0329EC7C LDR X0, [X0 + 0xA30]
	0x0329EC80 BL 0x1C16CF4
	0x0329EC84 ADRP X0, 0xE5E000
	0x0329EC88 LDR X0, [X0 + 0x958]
	0x0329EC8C BL 0x1C16CF4
	0x0329EC90 MOVZ W8, 0x1
	0x0329EC94 STRB W8, [X21 + 0x750]
	0x0329EC98 LDR X0, [X23]
	0x0329EC9C MOVZ W1, 0x2
	0x0329ECA0 BL 0x1C16D6C
	0x0329ECA4 CBZ X0, 0x329ED58
	0x0329ECA8 MOV X21, X0
	0x0329ECAC CBZ X22, 0x329ECC4
	0x0329ECB0 LDR X8, [X21]
	0x0329ECB4 MOV X0, X22
	0x0329ECB8 LDR X1, [X8 + 0x40]
	0x0329ECBC BL 0x1C16E00
	0x0329ECC0 CBZ X0, 0x329ED4C
	0x0329ECC4 LDR W8, [X21 + 0x18]
	0x0329ECC8 CBZ W8, 0x329ED48
	0x0329ECCC STR X22, [X21 + 0x20]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0x113F000
	010 Move W8, [X25+1859]
	011 Move X21, X5
	012 Move X23, X4
	013 Move W19, W3
	014 Move X22, X2
	015 Move X24, X1
	016 Move X20, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0xE87000
	022 Move X0, [X0+624]
	023 Call 0x1C17CF4
	024 Move X0, 0xE56000
	025 Move X0, [X0+2512]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X25+1859], W8
	029 Move X0, X20
	030 Move X1, X31
	031 Call Object..ctor, X0
	032 Move [X20+32], X23
	033 Move [X20+40], X24
	034 Move [X20+24], X22
	035 Compare X21, 0
	036 JumpIfEqual {86}
	037 Move X22, 0xE87000
	038 Move X8, [X21]
	039 Move X22, [X22+624]
	040 NotImplemented "Instruction LDRH not yet implemented."
	041 Move X1, [X22]
	042 Compare X9, 0
	043 JumpIfEqual {50}
	044 Move X10, [X8+176]
	045 Add X10, X10, 8
	046 NotImplemented "Instruction LDUR not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Subtract X9, X9, 1
	049 Add X10, X10, 16
	050 Move W2, 7
	051 Move X0, X21
	052 Call 0x1C5D788
	053 Move W9, [X10]
	054 Add W9, W9, 7
	055 Add X8, X8, W9
	056 Add X0, X8, 312
	057 Move X8, [X0]
	058 Move X1, [X0+8]
	059 Move X0, X21
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move [X20+48], X0
	062 Move X8, [X21]
	063 Move X1, [X22]
	064 NotImplemented "Instruction LDRH not yet implemented."
	065 Compare X9, 0
	066 JumpIfEqual {73}
	067 Move X10, [X8+176]
	068 Add X10, X10, 8
	069 NotImplemented "Instruction LDUR not yet implemented."
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Subtract X9, X9, 1
	072 Add X10, X10, 16
	073 Move W2, 3
	074 Move X0, X21
	075 Call 0x1C5D788
	076 Move W9, [X10]
	077 Add W9, W9, 3
	078 Add X8, X8, W9
	079 Add X0, X8, 312
	080 Move X8, [X0]
	081 Move X1, [X0+8]
	082 Move X0, X21
	083 NotImplemented "Instruction BLR not yet implemented."
	084 Move X22, [X20+24]
	085 Move [X20+64], X0
	086 Compare X22, 0
	087 JumpIfNotEqual {94}
	088 Move X8, 0xE56000
	089 Move X8, [X8+2512]
	090 Move W1, W19
	091 Move X0, [X8]
	092 Call 0x1C17D6C
	093 Move [X20+24], X0
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Move X25, [X31+72]
	102 Return 

Method: System.Void .ctor(System.Exception e, System.Runtime.Remoting.Messaging.IMethodCallMessage mcm)

Disassembly:
	0x0328FBC0 STRB W8, [X20 + 0x6C7]
	0x0328FBC4 LDR X0, [X22]
	0x0328FBC8 LDR W8, [X0 + 0xE0]
	0x0328FBCC CBNZ W8, 0x328FBD4
	0x0328FBD0 BL 0x1C16DFC
	0x0328FBD4 ADRP X21, 0xE94000
	0x0328FBD8 LDR X21, [X21 + 0xE68]
	0x0328FBDC MOV X0, X19
	0x0328FBE0 MOV X1, X31
	0x0328FBE4 BL 0x3275B24
	0x0328FBE8 CBZ X0, 0x328FC1C
	0x0328FBEC MOV X20, X0
	0x0328FBF0 LDR X0, [X21]
	0x0328FBF4 LDR W8, [X0 + 0xE0]
	0x0328FBF8 CBNZ W8, 0x328FC00
	0x0328FBFC BL 0x1C16DFC
	0x0328FC00 MOV X0, X20
	0x0328FC04 LDP X20, X19, [X31 + 0x20]
	0x0328FC08 LDP X22, X21, [X31 + 0x10]
	0x0328FC0C MOV X1, X31
	0x0328FC10 MOV X2, X31
	0x0328FC14 LDR X30, [X31], #0x30
	0x0328FC18 B 0x32805B4
	0x0328FC1C LDR X0, [X22]
	0x0328FC20 LDR W8, [X0 + 0xE0]
	0x0328FC24 CBNZ W8, 0x328FC2C
	0x0328FC28 BL 0x1C16DFC
	0x0328FC2C MOV X0, X19
	0x0328FC30 MOV X1, X31
	0x0328FC34 BL 0x3275CAC
	0x0328FC38 CBZ X0, 0x328FC68
	0x0328FC3C MOV X20, X0
	0x0328FC40 LDR X0, [X21]
	0x0328FC44 LDR W8, [X0 + 0xE0]
	0x0328FC48 CBNZ W8, 0x328FC50
	0x0328FC4C BL 0x1C16DFC
	0x0328FC50 MOV X0, X20
	0x0328FC54 LDP X20, X19, [X31 + 0x20]
	0x0328FC58 LDP X22, X21, [X31 + 0x10]
	0x0328FC5C MOV X1, X31
	0x0328FC60 LDR X30, [X31], #0x30
	0x0328FC64 B 0x3280920
	0x0328FC68 CBZ X19, 0x328FCBC
	0x0328FC6C MOV X0, X19
	0x0328FC70 MOV X1, X31
	0x0328FC74 BL 0x33971A8
	0x0328FC78 TBZ X0, 0x0, 0x328FCA8
	0x0328FC7C LDR X0, [X21]
	0x0328FC80 LDR W8, [X0 + 0xE0]
	0x0328FC84 CBNZ W8, 0x328FC8C
	0x0328FC88 BL 0x1C16DFC
	0x0328FC8C MOV X0, X19
	0x0328FC90 LDP X20, X19, [X31 + 0x20]
	0x0328FC94 LDP X22, X21, [X31 + 0x10]
	0x0328FC98 MOV X1, X31
	0x0328FC9C MOV X2, X31
	0x0328FCA0 LDR X30, [X31], #0x30
	0x0328FCA4 B 0x3280988
	0x0328FCA8 LDP X20, X19, [X31 + 0x20]
	0x0328FCAC LDP X22, X21, [X31 + 0x10]
	0x0328FCB0 MOV X0, X31
	0x0328FCB4 LDR X30, [X31], #0x30
	0x0328FCB8 RET
	0x0328FCBC BL 0x1C16F20
	0x0328FCC0 AND W1, W1, 0x1
	0x0328FCC4 B 0x1C713DC
	0x0328FCC8 LDR X0, [X0 + 0x18]
	0x0328FCCC RET
	0x0328FCD0 STR X30, [X31 - 0x40]!
	0x0328FCD4 STP X24, X23, [X31 + 0x10]
	0x0328FCD8 STP X22, X21, [X31 + 0x20]
	0x0328FCDC STP X20, X19, [X31 + 0x30]
	0x0328FCE0 ADRP X23, 0x114D000
	0x0328FCE4 ADRP X21, 0xE95000
	0x0328FCE8 ADRP X22, 0xE64000
	0x0328FCEC LDRB W8, [X23 + 0x6C8]
	0x0328FCF0 LDR X21, [X21 + 0x710]
	0x0328FCF4 LDR X22, [X22 + 0x6C0]
	0x0328FCF8 MOV X19, X1
	0x0328FCFC MOV X20, X0
	0x0328FD00 TBNZ X8, 0x0, 0x328FD60
	0x0328FD04 ADRP X0, 0xE95000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x114E000
	007 Move W8, [X22+1860]
	008 Move X20, X2
	009 Move X21, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xE96000
	016 Move X0, [X0+624]
	017 Call 0x1C17CF4
	018 Move X0, 0xE65000
	019 Move X0, [X0+2512]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+1860], W8
	023 Move X22, 0xE65000
	024 Move X22, [X22+2512]
	025 Move X0, X19
	026 Move X1, X31
	027 Call Object..ctor, X0
	028 Move [X19+56], X21
	029 Compare X20, 0
	030 JumpIfEqual {79}
	031 Move X21, 0xE96000
	032 Move X8, [X20]
	033 Move X21, [X21+624]
	034 NotImplemented "Instruction LDRH not yet implemented."
	035 Move X1, [X21]
	036 Compare X9, 0
	037 JumpIfEqual {44}
	038 Move X10, [X8+176]
	039 Add X10, X10, 8
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Subtract X9, X9, 1
	043 Add X10, X10, 16
	044 Move W2, 3
	045 Move X0, X20
	046 Call 0x1C5D788
	047 Move W9, [X10]
	048 Add W9, W9, 3
	049 Add X8, X8, W9
	050 Add X0, X8, 312
	051 Move X8, [X0]
	052 Move X1, [X0+8]
	053 Move X0, X20
	054 NotImplemented "Instruction BLR not yet implemented."
	055 Move [X19+64], X0
	056 Move X8, [X20]
	057 Move X1, [X21]
	058 NotImplemented "Instruction LDRH not yet implemented."
	059 Compare X9, 0
	060 JumpIfEqual {67}
	061 Move X10, [X8+176]
	062 Add X10, X10, 8
	063 NotImplemented "Instruction LDUR not yet implemented."
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Subtract X9, X9, 1
	066 Add X10, X10, 16
	067 Move W2, 2
	068 Move X0, X20
	069 Call 0x1C5D788
	070 Move W9, [X10]
	071 Add W9, W9, 2
	072 Add X8, X8, W9
	073 Add X0, X8, 312
	074 Move X8, [X0]
	075 Move X1, [X0+8]
	076 Move X0, X20
	077 NotImplemented "Instruction BLR not yet implemented."
	078 Move [X19+32], X0
	079 Move X0, [X22]
	080 Move W1, W31
	081 Call 0x1C17D6C
	082 Move [X19+24], X0
	083 Move X20, [X31+32]
	084 Move X19, [X31+40]
	085 Move X22, [X31+16]
	086 Move X21, [X31+24]
	087 Move X30, [X31+48]
	088 Return 

Method: System.Int32 get_ArgCount()

Disassembly:
	0x0329ECD0 CBZ X20, 0x329ECEC
	0x0329ECD4 LDR X8, [X21]
	0x0329ECD8 MOV X0, X20
	0x0329ECDC LDR X1, [X8 + 0x40]
	0x0329ECE0 BL 0x1C16E00
	0x0329ECE4 CBZ X0, 0x329ED4C
	0x0329ECE8 LDR W8, [X21 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+24]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Object[] get_Args()

Disassembly:
	0x0329ECEC CMP W8, 0x1
	0x0329ECF0 B.LS 0x329ED48

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext()

Disassembly:
	0x0329ECF4 ADRP X8, 0xE5E000
	0x0329ECF8 LDR X8, [X8 + 0x958]
	0x0329ECFC STR X20, [X21 + 0x28]
	0x0329ED00 ADRP X20, 0xE86000
	0x0329ED04 LDR X0, [X8]
	0x0329ED08 LDR X20, [X20 + 0xA30]
	0x0329ED0C BL 0x1C16F10
	0x0329ED10 LDR X2, [X20]
	0x0329ED14 MOV X1, X19
	0x0329ED18 MOV X3, X31
	0x0329ED1C MOV X20, X0
	0x0329ED20 BL 0x33E7508
	0x0329ED24 MOV X0, X20
	0x0329ED28 MOV X1, X21
	0x0329ED2C MOV X2, X31
	0x0329ED30 BL 0x33E9B34
	0x0329ED34 LDP X20, X19, [X31 + 0x20]
	0x0329ED38 LDP X22, X21, [X31 + 0x10]
	0x0329ED3C MOV X0, X31
	0x0329ED40 LDP X30, X23, [X31], #0x30
	0x0329ED44 RET
	0x0329ED48 BL 0x1C16F28
	0x0329ED4C BL 0x1C16F44
	0x0329ED50 MOV X1, X31
	0x0329ED54 BL 0x1C16DEC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x113F000
	005 Move W8, [X20+1861]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE87000
	012 Move X0, [X0+880]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1861], W8
	016 Move X20, [X19+32]
	017 Compare X20, 0
	018 JumpIfNotEqual {27}
	019 Move X8, 0xE87000
	020 Move X8, [X8+880]
	021 Move X0, [X8]
	022 Call 0x1C17F10
	023 Move X1, X31
	024 Move X20, X0
	025 Call Object..ctor, X0
	026 Move [X19+32], X20
	027 Move X0, X20
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return X0

Method: System.Reflection.MethodBase get_MethodBase()

Disassembly:
	0x0329ED58 BL 0x1C16F20
	0x0329ED5C STP X30, X25, [X31 - 0x40]!

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.String get_MethodName()

Disassembly:
	0x0329ED60 STP X24, X23, [X31 + 0x10]
	0x0329ED64 STP X22, X21, [X31 + 0x20]
	0x0329ED68 STP X20, X19, [X31 + 0x30]
	0x0329ED6C ADRP X20, 0x113E000
	0x0329ED70 LDRB W8, [X20 + 0x751]
	0x0329ED74 MOV X21, X1
	0x0329ED78 MOV X19, X0
	0x0329ED7C TBNZ X8, 0x0, 0x329EDB8
	0x0329ED80 ADRP X0, 0xE86000
	0x0329ED84 LDR X0, [X0 + 0x3B8]
	0x0329ED88 BL 0x1C16CF4
	0x0329ED8C ADRP X0, 0xE86000
	0x0329ED90 LDR X0, [X0 + 0x458]
	0x0329ED94 BL 0x1C16CF4
	0x0329ED98 ADRP X0, 0xE55000
	0x0329ED9C LDR X0, [X0 + 0x9D0]
	0x0329EDA0 BL 0x1C16CF4
	0x0329EDA4 ADRP X0, 0xE85000
	0x0329EDA8 LDR X0, [X0 + 0xE68]
	0x0329EDAC BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+64]
	005 Move X1, X31
	006 Move X2, X31
	007 Call MethodBase.op_Inequality, X0, X1
	008 Move X8, [X19+72]
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {24}
	013 Compare X8, 0
	014 JumpIfNotEqual {24}
	015 Move X0, [X19+64]
	016 Compare X0, 0
	017 JumpIfEqual {28}
	018 Move X8, [X0]
	019 Move X9, [X8+424]
	020 Move X1, [X8+432]
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Move X8, X0
	023 Move [X19+72], X0
	024 Move X0, X8
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Return X0
	028 Call 0x1C17F20

Method: System.Object get_MethodSignature()

Disassembly:
	0x0329EDB0 MOVZ W8, 0x1
	0x0329EDB4 STRB W8, [X20 + 0x751]
	0x0329EDB8 CBZ X21, 0x329EF1C
	0x0329EDBC ADRP X8, 0xE55000
	0x0329EDC0 LDR X8, [X8 + 0x9D0]
	0x0329EDC4 MOV X0, X21
	0x0329EDC8 LDR X22, [X8]
	0x0329EDCC MOV X1, X22
	0x0329EDD0 BL 0x1C16E00
	0x0329EDD4 CBZ X0, 0x329EF30
	0x0329EDD8 LDR W8, [X0 + 0x18]
	0x0329EDDC MOV X20, X0
	0x0329EDE0 CBZ W8, 0x329EF20
	0x0329EDE4 LDR X22, [X20 + 0x20]
	0x0329EDE8 CBZ X22, 0x329EE14
	0x0329EDEC ADRP X8, 0xE86000
	0x0329EDF0 LDR X8, [X8 + 0x458]
	0x0329EDF4 MOV X0, X22
	0x0329EDF8 LDR X23, [X8]
	0x0329EDFC MOV X1, X23
	0x0329EE00 BL 0x1C16E00
	0x0329EE04 CBZ X0, 0x329EF24
	0x0329EE08 LDR W8, [X20 + 0x18]
	0x0329EE0C MOV X21, X0
	0x0329EE10 B 0x329EE18
	0x0329EE14 MOV X21, X31
	0x0329EE18 CMP W8, 0x1
	0x0329EE1C B.LS 0x329EF20
	0x0329EE20 ADRP X24, 0xE86000
	0x0329EE24 LDR X22, [X20 + 0x28]
	0x0329EE28 LDR X24, [X24 + 0x3B8]
	0x0329EE2C MOV X1, X21
	0x0329EE30 BL 0x329E87C
	0x0329EE34 LDR X25, [X19 + 0x18]
	0x0329EE38 CBZ X22, 0x329EE74
	0x0329EE3C LDR X23, [X24]
	0x0329EE40 MOV X0, X22
	0x0329EE44 MOV X1, X23
	0x0329EE48 BL 0x1C16E00
	0x0329EE4C MOV X20, X0
	0x0329EE50 CBZ X0, 0x329EF24
	0x0329EE54 CBZ X25, 0x329EE7C
	0x0329EE58 LDR X0, [X19 + 0x18]
	0x0329EE5C CBZ X0, 0x329EF1C
	0x0329EE60 LDR X8, [X0]
	0x0329EE64 MOV X1, X21
	0x0329EE68 LDP X9, X2, [X8 + 0x188]
	0x0329EE6C BLR X9
	0x0329EE70 B 0x329EEA8
	0x0329EE74 MOV X20, X31
	0x0329EE78 CBNZ X25, 0x329EE58
	0x0329EE7C ADRP X8, 0xE85000
	0x0329EE80 LDR X8, [X8 + 0xE68]
	0x0329EE84 LDR X19, [X19 + 0x10]
	0x0329EE88 LDR X0, [X8]
	0x0329EE8C LDR W8, [X0 + 0xE0]
	0x0329EE90 CBNZ W8, 0x329EE98
	0x0329EE94 BL 0x1C16DFC
	0x0329EE98 MOV X0, X19
	0x0329EE9C MOV X1, X21
	0x0329EEA0 MOV X2, X31
	0x0329EEA4 BL 0x327DD34
	0x0329EEA8 MOV X19, X0
	0x0329EEAC CBZ X20, 0x329EF1C
	0x0329EEB0 LDR X8, [X20]
	0x0329EEB4 LDR X1, [X24]
	0x0329EEB8 LDRH W9, [X8 + 0x12E]
	0x0329EEBC CBZ X9, 0x329EEE0
	0x0329EEC0 LDR X10, [X8 + 0xB0]
	0x0329EEC4 ADD X10, X10, 0x8
	0x0329EEC8 LDUR X11, [X10 - 0x8]
	0x0329EECC CMP X11, X1
	0x0329EED0 B.EQ 0x329EEF0
	0x0329EED4 SUBS X9, X9, 0x1
	0x0329EED8 ADD X10, X10, 0x10

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x113F000
	008 Move W8, [X20+1862]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE5E000
	015 Move X0, [X0+3168]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1862], W8
	019 Move X0, [X19+64]
	020 Move X1, X31
	021 Move X2, X31
	022 Call MethodBase.op_Inequality, X0, X1
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {30}
	027 Move X8, [X19+80]
	028 Compare X8, 0
	029 JumpIfEqual {38}
	030 Move X0, [X19+80]
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Move X23, [X31+56]
	037 Return X0
	038 Move X0, [X19+64]
	039 Compare X0, 0
	040 JumpIfEqual {88}
	041 Move X8, [X0]
	042 Move X9, [X8+584]
	043 Move X1, [X8+592]
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Compare X0, 0
	046 JumpIfEqual {88}
	047 Move X8, 0xE5E000
	048 Move X8, [X8+3168]
	049 Move X20, X0
	050 Move W1, [X20+24]
	051 Move X0, [X8]
	052 Call 0x1C17D6C
	053 Move [X19+80], X0
	054 Move W8, [X20+24]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X21, X0
	057 Move W23, 4
	058 Move X0, [X20]
	059 Compare X0, 0
	060 JumpIfEqual {88}
	061 Move X8, [X0]
	062 Move X9, [X8+472]
	063 Move X1, [X8+480]
	064 NotImplemented "Instruction BLR not yet implemented."
	065 Compare X21, 0
	066 JumpIfEqual {88}
	067 Move X22, X0
	068 Compare X0, 0
	069 JumpIfEqual {76}
	070 Move X8, [X21]
	071 Move X0, X22
	072 Move X1, [X8+64]
	073 Call 0x1C17E00
	074 Compare X0, 0
	075 JumpIfEqual {89}
	076 Move W8, [X21+24]
	077 Subtract X9, X23, 4
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move [X21], X22
	080 Move W8, [X20+24]
	081 Subtract W9, W23, 3
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X21, [X19+80]
	084 Add X23, X23, 1
	085 Subtract W9, W23, 4
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Call 0x1C17F28
	088 Call 0x1C17F20
	089 Call 0x1C17F44
	090 Move X1, X31
	091 Call 0x1C17DEC

Method: System.Collections.IDictionary get_Properties()

Disassembly:
	0x0329EEDC B.NE 0x329EEC8
	0x0329EEE0 MOV X0, X20
	0x0329EEE4 MOV W2, W31
	0x0329EEE8 BL 0x1C5C788
	0x0329EEEC B 0x329EEFC
	0x0329EEF0 LDRSW X9, [X10]
	0x0329EEF4 ADD X8, X8, X9, 0x4, LSL
	0x0329EEF8 ADD X0, X8, 0x138
	0x0329EEFC LDP X3, X2, [X0]
	0x0329EF00 MOV X0, X20
	0x0329EF04 MOV X1, X19
	0x0329EF08 LDP X20, X19, [X31 + 0x30]
	0x0329EF0C LDP X22, X21, [X31 + 0x20]
	0x0329EF10 LDP X24, X23, [X31 + 0x10]
	0x0329EF14 LDP X30, X25, [X31], #0x40
	0x0329EF18 BR X3
	0x0329EF1C BL 0x1C16F20
	0x0329EF20 BL 0x1C16F28
	0x0329EF24 MOV X0, X22
	0x0329EF28 MOV X1, X23
	0x0329EF2C BL 0x1C171E0
	0x0329EF30 MOV X0, X21
	0x0329EF34 MOV X1, X22
	0x0329EF38 BL 0x1C171E0
	0x0329EF3C STP X30, X19, [X31 - 0x10]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x113F000
	005 Move W8, [X20+1863]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE87000
	012 Move X0, [X0+2312]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1863], W8
	016 Move X20, [X19+96]
	017 Compare X20, 0
	018 JumpIfNotEqual {27}
	019 Move X8, 0xE87000
	020 Move X8, [X8+2312]
	021 Move X0, [X8]
	022 Call 0x1C17F10
	023 Move X1, X19
	024 Move X20, X0
	025 Call MethodReturnDictionary..ctor, X0, X1
	026 Move [X19+96], X20
	027 Move X0, X20
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return X0

Method: System.String get_TypeName()

Disassembly:
	0x0329EF40 BL 0x329ED5C
	0x0329EF44 LDP X30, X19, [X31], #0x10
	0x0329EF48 RET
	0x0329EF4C CMP W1, 0x1
	0x0329EF50 MOV X19, X0
	0x0329EF54 B.NE 0x329EFB0
	0x0329EF58 MOV X0, X19
	0x0329EF5C BL 0x3EB1AD0
	0x0329EF60 MOV X19, X0
	0x0329EF64 ADRP X0, 0xE5B000
	0x0329EF68 LDR X0, [X0 + 0xCC0]
	0x0329EF6C BL 0x1C16D08
	0x0329EF70 LDR X8, [X19]
	0x0329EF74 LDR X1, [X8]
	0x0329EF78 BL 0x1C17270
	0x0329EF7C TBZ X0, 0x0, 0x329EF88
	0x0329EF80 LDP X30, X19, [X31], #0x10
	0x0329EF84 B 0x3EB1AE0
	0x0329EF88 MOVZ W0, 0x8
	0x0329EF8C BL 0x3EB1AF0
	0x0329EF90 LDR X8, [X19]
	0x0329EF94 STR X8, [X0]
	0x0329EF98 ADRP X1, 0xC16000
	0x0329EF9C ADD X1, X1, 0xE58
	0x0329EFA0 MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+64]
	005 Move X1, X31
	006 Move X2, X31
	007 Call MethodBase.op_Inequality, X0, X1
	008 Move X8, [X19+88]
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {30}
	013 Compare X8, 0
	014 JumpIfNotEqual {30}
	015 Move X0, [X19+64]
	016 Compare X0, 0
	017 JumpIfEqual {34}
	018 Move X8, [X0]
	019 Move X9, [X8+440]
	020 Move X1, [X8+448]
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Compare X0, 0
	023 JumpIfEqual {34}
	024 Move X8, [X0]
	025 Move X9, [X8+728]
	026 Move X1, [X8+736]
	027 NotImplemented "Instruction BLR not yet implemented."
	028 Move X8, X0
	029 Move [X19+88], X0
	030 Move X0, X8
	031 Move X30, [X31+16]
	032 Move X19, [X31+24]
	033 Return X0
	034 Call 0x1C17F20

Method: System.String get_Uri()

Disassembly:
	0x0329EFA4 BL 0x3EB1B00
	0x0329EFA8 MOV X19, X0

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_Uri(System.String value)

Disassembly:
	0x0329EFAC BL 0x3EB1AE0
	0x0329EFB0 MOV X0, X19

ISIL:
	001 Move [X0+48], X1
	002 Return 

Method: System.String System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri()

Disassembly:
	0x0329EFB4 BL 0x1D2C690
	0x0329EFB8 BL 0x1990590

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(System.String value)

Disassembly:
	0x0329EFBC MOV X1, X31
	0x0329EFC0 B 0x33A51F0

ISIL:
	001 Move [X0+48], X1
	002 Return 

Method: System.Object GetArg(System.Int32 argNum)

Disassembly:
	0x0329EFC4 STR X30, [X31 - 0x20]!
	0x0329EFC8 STP X20, X19, [X31 + 0x10]
	0x0329EFCC MOV X19, X1
	0x0329EFD0 MOV X1, X31
	0x0329EFD4 MOV X20, X0
	0x0329EFD8 BL 0x33A51F0
	0x0329EFDC CBZ X19, 0x329EFF0
	0x0329EFE0 STR X19, [X20 + 0x10]
	0x0329EFE4 LDP X20, X19, [X31 + 0x10]
	0x0329EFE8 LDR X30, [X31], #0x20
	0x0329EFEC RET
	0x0329EFF0 ADRP X0, 0xE5A000

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+24]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move W9, [X8+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Add X8, X8, W1
	008 Move X0, [X8+32]
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20
	012 Call 0x1C17F28

Method: System.Exception get_Exception()

Disassembly:
	0x0329EFF4 LDR X0, [X0 + 0x528]
	0x0329EFF8 BL 0x1C16D08

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.Object[] get_OutArgs()

Disassembly:
	0x0329EFFC BL 0x1C16F10
	0x0329F000 MOV X19, X0
	0x0329F004 ADRP X0, 0xE85000
	0x0329F008 LDR X0, [X0 + 0xA38]
	0x0329F00C BL 0x1C16D08
	0x0329F010 MOV X1, X0
	0x0329F014 MOV X0, X19
	0x0329F018 MOV X2, X31
	0x0329F01C BL 0x330E100
	0x0329F020 ADRP X0, 0xE85000
	0x0329F024 LDR X0, [X0 + 0xA40]
	0x0329F028 BL 0x1C16D08
	0x0329F02C MOV X1, X0
	0x0329F030 MOV X0, X19
	0x0329F034 BL 0x1C16DEC
	0x0329F038 STR X1, [X0 + 0x18]
	0x0329F03C RET
	0x0329F040 STR X30, [X31 - 0x20]!
	0x0329F044 STP X20, X19, [X31 + 0x10]
	0x0329F048 ADRP X19, 0x113D000
	0x0329F04C ADRP X20, 0xE85000
	0x0329F050 LDRB W8, [X19 + 0x753]
	0x0329F054 LDR X20, [X20 + 0xA48]
	0x0329F058 TBNZ X8, 0x0, 0x329F070
	0x0329F05C ADRP X0, 0xE85000
	0x0329F060 LDR X0, [X0 + 0xA48]
	0x0329F064 BL 0x1C16CF4
	0x0329F068 MOVZ W8, 0x1
	0x0329F06C STRB W8, [X19 + 0x753]
	0x0329F070 LDR X8, [X20]
	0x0329F074 LDP X20, X19, [X31 + 0x10]
	0x0329F078 MOVZ W9, 0x101
	0x0329F07C LDR X8, [X8 + 0xB8]
	0x0329F080 STRH W9, [X8]
	0x0329F084 LDR X30, [X31], #0x20
	0x0329F088 RET
	0x0329F08C STP X30, X21, [X31 - 0x20]!
	0x0329F090 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x113E000
	006 Move W8, [X20+1864]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE86000
	013 Move X0, [X0+2456]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1864], W8
	017 Move X0, [X19+16]
	018 Compare X0, 0
	019 JumpIfNotEqual {43}
	020 Move X8, [X19+24]
	021 Compare X8, 0
	022 JumpIfEqual {42}
	023 Move X20, [X19+112]
	024 Compare X20, 0
	025 JumpIfNotEqual {38}
	026 Move X8, 0xE86000
	027 Move X21, [X19+64]
	028 Move X8, [X8+2456]
	029 Move X0, [X8]
	030 Call 0x1C17F10
	031 Move W2, 1
	032 Move X1, X21
	033 Move X20, X0
	034 Call ArgInfo..ctor, X0, X1, X2
	035 Move [X19+112], X20
	036 Compare X20, 0
	037 JumpIfEqual {48}
	038 Move X1, [X19+24]
	039 Move X0, X20
	040 Call ArgInfo.GetInOutArgs, X0, X1
	041 Move [X19+16], X0
	042 Move X0, X31
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Return X0
	048 Call 0x1C17F20

Method: System.Object get_ReturnValue()

Disassembly:
	0x0329F094 ADRP X21, 0x113D000
	0x0329F098 ADRP X20, 0xE7E000

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Runtime.Remoting.Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity()

Disassembly:
	0x0329F09C LDRB W8, [X21 + 0x754]
	0x0329F0A0 LDR X20, [X20 + 0x2E0]

ISIL:
	001 Move X0, [X0+104]
	002 Return X0

Method: System.Void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(System.Runtime.Remoting.Identity value)

Disassembly:
	0x0329F0A4 MOV X19, X0
	0x0329F0A8 TBNZ X8, 0x0, 0x329F0C0

ISIL:
	001 Move [X0+104], X1
	002 Return 

