Type: System.Runtime.CompilerServices.ConditionalWeakTable`2/Enumerator

Method: System.Void .ctor(System.Runtime.CompilerServices.ConditionalWeakTable`2<TKey, TValue> table)

Disassembly:
	0x02C0B30C MOV X0, X31
	0x02C0B310 BL 0x339E09C
	0x02C0B314 STR W31, [X19 + 0x8]
	0x02C0B318 STR X31, [X19 + 0x10]
	0x02C0B31C LDP X30, X19, [X31], #0x10
	0x02C0B320 RET
	0x02C0B324 BL 0x1C16F20
	0x02C0B328 STR X30, [X31 - 0x10]!
	0x02C0B32C STR X1, [X0]
	0x02C0B330 CBZ X1, 0x2C0B354
	0x02C0B334 LDR W8, [X1 + 0x2C]
	0x02C0B338 MOVI V0.2D, 0x0
	0x02C0B33C STR W2, [X0 + 0x38]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X1
	006 Move TEMP, 0
	007 Not TEMP
	008 Move W21, TEMP
	009 Move X1, X31
	010 Move X20, X0
	011 Move [X0+24], W21
	012 Call Object..ctor, X0
	013 Move [X20+16], X19
	014 Move [X20+24], W21
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 Move X21, [X31+40]
	019 Return 

Method: System.Void Finalize()

Disassembly:
	0x02C0B340 STP V0, V0, [X0 + 0x10]
	0x02C0B344 STP W8, W31, [X0 + 0x8]
	0x02C0B348 STR X31, [X0 + 0x30]
	0x02C0B34C LDR X30, [X31], #0x10
	0x02C0B350 RET
	0x02C0B354 BL 0x1C16F20
	0x02C0B358 SUB X31, X31, 0xA0
	0x02C0B35C STP X30, X23, [X31 + 0x70]
	0x02C0B360 STP X22, X21, [X31 + 0x80]
	0x02C0B364 STP X20, X19, [X31 + 0x90]
	0x02C0B368 LDR X8, [X0]
	0x02C0B36C CBZ X8, 0x2C0B488
	0x02C0B370 LDR W9, [X0 + 0x8]
	0x02C0B374 LDR W10, [X8 + 0x2C]
	0x02C0B378 MOV X19, X0
	0x02C0B37C MOV X20, X1
	0x02C0B380 CMP W9, W10
	0x02C0B384 B.EQ 0x2C0B398
	0x02C0B388 MOV X0, X31
	0x02C0B38C BL 0x339E09C
	0x02C0B390 LDR X8, [X19]
	0x02C0B394 CBZ X8, 0x2C0B488
	0x02C0B398 LDR W11, [X19 + 0xC]
	0x02C0B39C LDR W22, [X8 + 0x20]
	0x02C0B3A0 MOVZ W10, 0x30
	0x02C0B3A4 MOV W23, W11
	0x02C0B3A8 CMP W11, W22
	0x02C0B3AC B.CS 0x2C0B458
	0x02C0B3B0 LDR X9, [X8 + 0x18]
	0x02C0B3B4 ADD W11, W23, 0x1
	0x02C0B3B8 STR W11, [X19 + 0xC]
	0x02C0B3BC CBZ X9, 0x2C0B488
	0x02C0B3C0 LDR W12, [X9 + 0x18]
	0x02C0B3C4 SUB W11, W11, 0x1
	0x02C0B3C8 CMP W11, W12
	0x02C0B3CC B.CS 0x2C0B48C
	0x02C0B3D0 SMADDL X12, X23, X10, X9
	0x02C0B3D4 LDR W12, [X12 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Call 0x2C0B3D8, X0
	007 Move X20, X31
	008 Compare X19, 0
	009 JumpIfEqual {20}
	010 Move X0, X19
	011 Move X1, X31
	012 Call Object.Finalize, X0
	013 Compare X20, 0
	014 JumpIfNotEqual {21}
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 Move X21, [X31+40]
	019 Return 
	020 Call 0x1C17F20
	021 Move X0, X20
	022 Call 0x1C17F18
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X21, X0
	025 Move X0, X21
	026 Call 0x3EB2AD0
	027 Move X20, [X0]
	028 Call 0x3EB2AE0
	029 Move X20, X31
	030 Move X21, X0
	031 Compare X19, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17F20
	034 Move X0, X19
	035 Move X1, X31
	036 Call Object.Finalize, X0
	037 Compare X20, 0
	038 JumpIfNotEqual {41}
	039 Move X0, X21
	040 Call 0x1D2D690
	041 Move X0, X20
	042 Call 0x1C17F18
	043 Call 0x1991590

Method: System.Void Dispose()

Disassembly:
	0x02C0B3D8 ADD W11, W11, 0x1
	0x02C0B3DC TBNZ X12, 0x1F, 0x2C0B3A4
	0x02C0B3E0 SXTW X8, W23
	0x02C0B3E4 MOVZ W10, 0x30
	0x02C0B3E8 MADD X8, X8, X10, X9
	0x02C0B3EC LDUR V1, [X8 + 0x3C]
	0x02C0B3F0 LDR V2, [X8 + 0x3]
	0x02C0B3F4 MOVI V0.2D, 0x0
	0x02C0B3F8 LDR X21, [X8 + 0x28]
	0x02C0B3FC STR X31, [X31 + 0x40]
	0x02C0B400 STUR V1, [X31 + 0xC]
	0x02C0B404 STR V2, [X31]
	0x02C0B408 STP V0, V0, [X31 + 0x20]
	0x02C0B40C LDR X0, [X20 + 0x20]
	0x02C0B410 LDRB W8, [X0 + 0x135]
	0x02C0B414 TBNZ X8, 0x0, 0x2C0B41C
	0x02C0B418 BL 0x1C5C684
	0x02C0B41C LDR X8, [X0 + 0xC0]
	0x02C0B420 LDR V0, [X31]
	0x02C0B424 LDUR V1, [X31 + 0xC]
	0x02C0B428 ADD X0, X31, 0x20
	0x02C0B42C LDR X3, [X8 + 0x38]
	0x02C0B430 ADD X2, X31, 0x50
	0x02C0B434 MOV X1, X21
	0x02C0B438 STR V0, [X31 + 0x5]
	0x02C0B43C STUR V1, [X31 + 0x5C]
	0x02C0B440 BL 0x2EE2914
	0x02C0B444 LDR X8, [X31 + 0x40]
	0x02C0B448 LDP V1, V0, [X31 + 0x20]
	0x02C0B44C STR X8, [X19 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x17D1000
	005 Move W8, [X20+1601]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x14F0000
	012 Move X0, [X0+3088]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1601], W8
	016 Add X0, X19, 16
	017 Move X1, X31
	018 Call 0x1C252E8
	019 Compare X0, 0
	020 JumpIfEqual {37}
	021 Move X8, 0x14F0000
	022 Move X8, [X8+3088]
	023 Move [X19+32], X31
	024 Move [X19+40], X31
	025 Move X0, [X8]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X1, X31
	034 Move X30, [X31+32]
	035 Call GC.SuppressFinalize, X0
	036 Return 
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Return 

Method: System.Boolean MoveNext()

Disassembly:
	0x02C0B450 STP V1, V0, [X19 + 0x10]
	0x02C0B454 B 0x2C0B46C
	0x02C0B458 ADD W8, W22, 0x1
	0x02C0B45C MOVI V0.2D, 0x0
	0x02C0B460 STR W8, [X19 + 0xC]
	0x02C0B464 STP V0, V0, [X19 + 0x10]
	0x02C0B468 STR X31, [X19 + 0x30]
	0x02C0B46C CMP W23, W22
	0x02C0B470 LDP X20, X19, [X31 + 0x90]
	0x02C0B474 LDP X22, X21, [X31 + 0x80]
	0x02C0B478 LDP X30, X23, [X31 + 0x70]
	0x02C0B47C CSET W0, CC
	0x02C0B480 ADD X31, X31, 0xA0
	0x02C0B484 RET
	0x02C0B488 BL 0x1C16F20
	0x02C0B48C BL 0x1C16F28
	0x02C0B490 LDR X9, [X0 + 0x30]
	0x02C0B494 LDP V1, V0, [X0 + 0x10]
	0x02C0B498 STR X9, [X8 + 0x20]
	0x02C0B49C STP V1, V0, [X8]
	0x02C0B4A0 RET
	0x02C0B4A4 RET
	0x02C0B4A8 SUB X31, X31, 0xC0
	0x02C0B4AC STR X30, [X31 + 0x90]
	0x02C0B4B0 STP X22, X21, [X31 + 0xA0]
	0x02C0B4B4 STP X20, X19, [X31 + 0xB0]
	0x02C0B4B8 ADRP X20, 0x17D0000
	0x02C0B4BC LDRB W8, [X20 + 0x645]
	0x02C0B4C0 MOV X19, X1
	0x02C0B4C4 MOV X21, X0
	0x02C0B4C8 TBNZ X8, 0x0, 0x2C0B4E0
	0x02C0B4CC ADRP X0, 0x14F0000
	0x02C0B4D0 LDR X0, [X0 + 0xF10]
	0x02C0B4D4 BL 0x1C16CF4
	0x02C0B4D8 MOVZ W8, 0x1
	0x02C0B4DC STRB W8, [X20 + 0x645]
	0x02C0B4E0 LDR W8, [X21 + 0xC]
	0x02C0B4E4 CBZ W8, 0x2C0B500
	0x02C0B4E8 LDR X9, [X21]
	0x02C0B4EC CBZ X9, 0x2C0B648
	0x02C0B4F0 LDR W9, [X9 + 0x20]
	0x02C0B4F4 ADD W9, W9, 0x1
	0x02C0B4F8 CMP W8, W9
	0x02C0B4FC B.NE 0x2C0B508
	0x02C0B500 MOV X0, X31
	0x02C0B504 BL 0x339E0E8
	0x02C0B508 LDR X0, [X19 + 0x20]
	0x02C0B50C LDR W22, [X21 + 0x38]
	0x02C0B510 LDRB W8, [X0 + 0x135]
	0x02C0B514 TBNZ X8, 0x0, 0x2C0B51C
	0x02C0B518 BL 0x1C5C684
	0x02C0B51C LDR X0, [X19 + 0x20]
	0x02C0B520 LDR X20, [X21 + 0x10]
	0x02C0B524 CMP W22, 0x1
	0x02C0B528 ADD X8, X0, 0x135
	0x02C0B52C LDRH W8, [X8]
	0x02C0B530 B.NE 0x2C0B5A4
	0x02C0B534 TBNZ X8, 0x0, 0x2C0B548
	0x02C0B538 BL 0x1C5C684
	0x02C0B53C LDR X0, [X19 + 0x20]
	0x02C0B540 ADD X8, X0, 0x135
	0x02C0B544 LDRH W8, [X8]
	0x02C0B548 LDUR V0, [X21 + 0x24]
	0x02C0B54C LDUR V1, [X21 + 0x18]
	0x02C0B550 STUR V0, [X31 + 0x5C]
	0x02C0B554 STR V1, [X31 + 0x5]
	0x02C0B558 TBNZ X8, 0x0, 0x2C0B560
	0x02C0B55C BL 0x1C5C684
	0x02C0B560 LDR X8, [X0 + 0xC0]
	0x02C0B564 ADD X1, X31, 0x50
	0x02C0B568 LDR X0, [X8 + 0x30]
	0x02C0B56C BL 0x1C16E04
	0x02C0B570 MOV X2, X0
	0x02C0B574 ADD X0, X31, 0x0
	0x02C0B578 MOV X1, X20
	0x02C0B57C MOV X3, X31
	0x02C0B580 STP X31, X31, [X31]
	0x02C0B584 BL 0x335035C
	0x02C0B588 ADRP X8, 0x14F0000
	0x02C0B58C LDR V0, [X31]
	0x02C0B590 LDR X8, [X8 + 0xF10]
	0x02C0B594 ADD X1, X31, 0x80
	0x02C0B598 STR V0, [X31 + 0x8]
	0x02C0B59C LDR X0, [X8]
	0x02C0B5A0 B 0x2C0B630
	0x02C0B5A4 TBNZ X8, 0x0, 0x2C0B5B8
	0x02C0B5A8 BL 0x1C5C684
	0x02C0B5AC LDR X0, [X19 + 0x20]
	0x02C0B5B0 ADD X8, X0, 0x135
	0x02C0B5B4 LDRH W8, [X8]
	0x02C0B5B8 LDUR V0, [X21 + 0x24]
	0x02C0B5BC LDUR V1, [X21 + 0x18]
	0x02C0B5C0 MOVI V2.2D, 0x0
	0x02C0B5C4 STR X31, [X31 + 0x70]
	0x02C0B5C8 STUR V0, [X31 + 0x3C]
	0x02C0B5CC STR V1, [X31 + 0x3]
	0x02C0B5D0 STP V2, V2, [X31 + 0x50]
	0x02C0B5D4 TBNZ X8, 0x0, 0x2C0B5DC
	0x02C0B5D8 BL 0x1C5C684
	0x02C0B5DC LDR X8, [X0 + 0xC0]
	0x02C0B5E0 LDR V0, [X31 + 0x3]
	0x02C0B5E4 LDUR V1, [X31 + 0x3C]
	0x02C0B5E8 ADD X0, X31, 0x50
	0x02C0B5EC LDR X3, [X8 + 0x38]
	0x02C0B5F0 ADD X2, X31, 0x0
	0x02C0B5F4 MOV X1, X20
	0x02C0B5F8 STR V0, [X31]
	0x02C0B5FC STUR V1, [X31 + 0xC]
	0x02C0B600 BL 0x2EE2914
	0x02C0B604 LDR X8, [X31 + 0x70]
	0x02C0B608 LDP V1, V0, [X31 + 0x50]
	0x02C0B60C STR X8, [X31 + 0x20]
	0x02C0B610 STP V1, V0, [X31]
	0x02C0B614 LDR X0, [X19 + 0x20]
	0x02C0B618 LDRB W8, [X0 + 0x135]
	0x02C0B61C TBNZ X8, 0x0, 0x2C0B624
	0x02C0B620 BL 0x1C5C684
	0x02C0B624 LDR X8, [X0 + 0xC0]
	0x02C0B628 ADD X1, X31, 0x0
	0x02C0B62C LDR X0, [X8 + 0x10]
	0x02C0B630 BL 0x1C16E04
	0x02C0B634 LDP X20, X19, [X31 + 0xB0]
	0x02C0B638 LDP X22, X21, [X31 + 0xA0]
	0x02C0B63C LDR X30, [X31 + 0x90]
	0x02C0B640 ADD X31, X31, 0xC0
	0x02C0B644 RET
	0x02C0B648 BL 0x1C16F20
	0x02C0B64C STP X30, X19, [X31 - 0x10]!
	0x02C0B650 LDR X8, [X0]
	0x02C0B654 CBZ X8, 0x2C0B68C
	0x02C0B658 LDR W9, [X0 + 0x8]
	0x02C0B65C LDR W8, [X8 + 0x2C]
	0x02C0B660 MOV X19, X0
	0x02C0B664 CMP W9, W8
	0x02C0B668 B.EQ 0x2C0B674
	0x02C0B66C MOV X0, X31
	0x02C0B670 BL 0x339E09C
	0x02C0B674 MOVI V0.2D, 0x0
	0x02C0B678 STUR V0, [X19 + 0x28]
	0x02C0B67C STUR V0, [X19 + 0x1C]
	0x02C0B680 STUR V0, [X19 + 0xC]
	0x02C0B684 LDP X30, X19, [X31], #0x10

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], X30
	003 Move [X31+40], X25
	004 Move [X31+48], X24
	005 Move [X31+56], X23
	006 Move [X31+64], X22
	007 Move [X31+72], X21
	008 Move [X31+80], X20
	009 Move [X31+88], X19
	010 Move X19, 0x17D1000
	011 Move W8, [X19+1602]
	012 Move X21, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x14F0000
	019 Move X0, [X0+3088]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+1602], W8
	023 Move X22, [X20+16]
	024 Compare X22, 0
	025 JumpIfEqual {100}
	026 Move X19, [X22+24]
	027 Move [X31+28], W31
	028 Add X1, X31, 28
	029 Move X0, X19
	030 Move X2, X31
	031 Call Monitor.Enter, X0, X1
	032 Move X23, 0x14F0000
	033 Move X23, [X23+3088]
	034 Move X0, [X23]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X23]
	040 Move X8, [X22+16]
	041 Compare X8, 0
	042 JumpIfEqual {136}
	043 Move X10, [X0+184]
	044 Move W9, [X8+24]
	045 Move W11, [X20+24]
	046 Move X10, [X10]
	047 Subtract W12, W9, 1
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Add W11, W11, 1
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move [X20+24], W11
	052 Move X13, W11
	053 Add X13, X8, X13
	054 Move X24, [X13+32]
	055 Compare X24, 0
	056 JumpIfEqual {48}
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X22, [X13+40]
	059 Move [X31+8], X31
	060 Move [X31+16], X31
	061 Move X8, [X21+32]
	062 Move X8, [X8+192]
	063 Move X25, [X8+40]
	064 Move W8, [X25+309]
	065 Move TEMP, X8
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfEqual {72}
	069 Move X0, X25
	070 Call 0x1C5D684
	071 Move X25, X0
	072 Move X0, X24
	073 Move X1, X25
	074 Call 0x1C17E00
	075 Move X23, X0
	076 Compare X0, 0
	077 JumpIfEqual {137}
	078 Move X8, [X21+32]
	079 Move X8, [X8+192]
	080 Move X24, [X8+48]
	081 Move W8, [X24+309]
	082 Move TEMP, X8
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfEqual {89}
	086 Move X0, X24
	087 Call 0x1C5D684
	088 Move X24, X0
	089 Compare X22, 0
	090 JumpIfEqual {103}
	091 Move X0, X22
	092 Move X1, X24
	093 Call 0x1C17E00
	094 Move X2, X0
	095 Compare X0, 0
	096 JumpIfNotEqual {104}
	097 Move X0, X22
	098 Move X1, X24
	099 Call 0x1C181E0
	100 Move W20, W31
	101 Move X21, X31
	102 Move W20, W31
	103 Move X2, X31
	104 Move X8, [X21+32]
	105 Move X8, [X8+192]
	106 Move X3, [X8+56]
	107 Add X0, X31, 8
	108 Move X1, X23
	109 Call KeyValuePair`2<Object, Object>..ctor, X0, X1, X2
	110 NotImplemented "Instruction LDUR not yet implemented."
	111 Move X21, X31
	112 Move [X20+2], V0
	113 Move W20, 1
	114 Move W8, [X31+28]
	115 Compare W8, 0
	116 JumpIfEqual {120}
	117 Move X0, X19
	118 Move X1, X31
	119 Call Monitor.Exit, X0
	120 Compare X21, 0
	121 JumpIfNotEqual {134}
	122 Move W0, W20
	123 Move X20, [X31+80]
	124 Move X19, [X31+88]
	125 Move X22, [X31+64]
	126 Move X21, [X31+72]
	127 Move X24, [X31+48]
	128 Move X23, [X31+56]
	129 Move X30, [X31+32]
	130 Move X25, [X31+40]
	131 Add X31, X31, 96
	132 Return X0
	133 Call 0x1C17F28
	134 Move X0, X21
	135 Call 0x1C17F18
	136 Call 0x1C17F20
	137 Move X0, X24
	138 Move X1, X25
	139 Call 0x1C181E0
	140 Move X20, X0
	141 NotImplemented "Instruction CMP not yet implemented."
	142 Move X0, X20
	143 Call 0x3EB2AD0
	144 Move X21, [X0]
	145 Call 0x3EB2AE0
	146 Move X21, X31
	147 Move X20, X0
	148 Move W8, [X31+28]
	149 Compare W8, 0
	150 JumpIfEqual {154}
	151 Move X0, X19
	152 Move X1, X31
	153 Call Monitor.Exit, X0
	154 Compare X21, 0
	155 JumpIfNotEqual {158}
	156 Move X0, X20
	157 Call 0x1D2D690
	158 Move X0, X21
	159 Call 0x1C17F18
	160 Call 0x1991590

Method: System.Collections.Generic.KeyValuePair`2<TKey, TValue> get_Current()

Disassembly:
	0x02C0B688 RET
	0x02C0B68C BL 0x1C16F20
	0x02C0B690 SUB X31, X31, 0x50
	0x02C0B694 STP X30, X21, [X31 + 0x30]
	0x02C0B698 STP X20, X19, [X31 + 0x40]
	0x02C0B69C LDR W8, [X0 + 0xC]
	0x02C0B6A0 MOV X19, X0
	0x02C0B6A4 MOV X21, X1
	0x02C0B6A8 CBZ W8, 0x2C0B6C4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+24]
	004 Move X19, X0
	005 Move TEMP, X8
	006 And TEMP, TEMP, -2147483648
	007 Compare TEMP, -2147483648
	008 JumpIfNotEqual {11}
	009 Move X0, X31
	010 Call ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumOpCantHappen
	011 Move X0, [X19+32]
	012 Move X1, [X19+40]
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Return X0

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x02C0B6AC LDR X9, [X19]
	0x02C0B6B0 CBZ X9, 0x2C0B758
	0x02C0B6B4 LDR W9, [X9 + 0x20]
	0x02C0B6B8 ADD W9, W9, 0x1
	0x02C0B6BC CMP W8, W9
	0x02C0B6C0 B.NE 0x2C0B6CC
	0x02C0B6C4 MOV X0, X31
	0x02C0B6C8 BL 0x339E0E8
	0x02C0B6CC LDR X0, [X21 + 0x20]
	0x02C0B6D0 ADD X8, X0, 0x135
	0x02C0B6D4 LDRH W8, [X8]
	0x02C0B6D8 TBNZ X8, 0x0, 0x2C0B6EC
	0x02C0B6DC BL 0x1C5C684
	0x02C0B6E0 LDR X0, [X21 + 0x20]
	0x02C0B6E4 ADD X8, X0, 0x135
	0x02C0B6E8 LDRH W8, [X8]
	0x02C0B6EC LDR X20, [X19 + 0x10]
	0x02C0B6F0 TBNZ X8, 0x0, 0x2C0B704
	0x02C0B6F4 BL 0x1C5C684
	0x02C0B6F8 LDR X0, [X21 + 0x20]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move W8, [X0+24]
	006 Move X20, X0
	007 Move X19, X1
	008 Move TEMP, X8
	009 And TEMP, TEMP, -2147483648
	010 Compare TEMP, -2147483648
	011 JumpIfNotEqual {14}
	012 Move X0, X31
	013 Call ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumOpCantHappen
	014 Move X8, [X20+32]
	015 Move X9, [X20+40]
	016 Add X1, X31, 0
	017 Move [X31], X8
	018 Move [X31+8], X9
	019 Move X8, [X19+32]
	020 Move X8, [X8+192]
	021 Move X0, [X8+32]
	022 Call 0x1C17E04
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X30, [X31+16]
	026 Add X31, X31, 48
	027 Return X0

Method: System.Void Reset()

Disassembly:
	0x02C0B6FC ADD X8, X0, 0x135

ISIL:
	001 Return 

