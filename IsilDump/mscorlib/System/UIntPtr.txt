Type: System.UIntPtr

Method: System.Void .ctor(System.UInt64 value)

Disassembly:
	0x033D622C MOVZ W8, 0x80000000
	0x033D6230 SUB X1, X31, X1

ISIL:
	001 Move [X0], X1
	002 Return 

Method: System.Void .ctor(System.UInt32 value)

Disassembly:
	0x033D623C STR W31, [X0 + 0x4]
	0x033D6240 RET
	0x033D6244 STP X31, X1, [X0]

ISIL:
	001 Move W8, W1
	002 Move [X0], X8
	003 Return 

Method: System.Void .ctor(System.Void* value)

Disassembly:
	0x033D6248 RET
	0x033D624C STR D8, [X31 - 0x30]!

ISIL:
	001 Move [X0], X1
	002 Return 

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x033D6250 STP X30, X21, [X31 + 0x10]
	0x033D6254 STP X20, X19, [X31 + 0x20]
	0x033D6258 ADRP X21, 0x1007000
	0x033D625C ADRP X20, 0xD45000
	0x033D6260 LDRB W8, [X21 + 0x312]
	0x033D6264 LDR X20, [X20 + 0x5F0]
	0x033D6268 MOV V8.16B, V0.16B
	0x033D626C MOV X19, X0
	0x033D6270 TBNZ X8, 0x0, 0x33D6294
	0x033D6274 ADRP X0, 0xD56000
	0x033D6278 LDR X0, [X0 + 0xDE8]
	0x033D627C BL 0x1C16CF4
	0x033D6280 ADRP X0, 0xD45000
	0x033D6284 LDR X0, [X0 + 0x5F0]
	0x033D6288 BL 0x1C16CF4
	0x033D628C MOVZ W8, 0x1
	0x033D6290 STRB W8, [X21 + 0x312]
	0x033D6294 LDR X0, [X20]
	0x033D6298 ADRP X20, 0xD56000
	0x033D629C LDR W8, [X0 + 0xE0]
	0x033D62A0 LDR X20, [X20 + 0xDE8]
	0x033D62A4 CBNZ W8, 0x33D62AC
	0x033D62A8 BL 0x1C16DFC
	0x033D62AC LDR X0, [X20]
	0x033D62B0 LDR W8, [X0 + 0xE0]
	0x033D62B4 CBNZ W8, 0x33D62BC
	0x033D62B8 BL 0x1C16DFC
	0x033D62BC MOV X0, X19
	0x033D62C0 LDP X20, X19, [X31 + 0x20]
	0x033D62C4 LDP X30, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1008000
	006 Move W8, [X21+740]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD47000
	014 Move X0, [X0+3888]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+740], W8
	018 Compare X20, 0
	019 JumpIfEqual {25}
	020 Move X8, 0xD47000
	021 Move X8, [X8+3888]
	022 Move X9, [X20]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W0, W31
	026 Move X0, X20
	027 Call 0x1C17E08
	028 Move X8, [X0]
	029 Move X9, [X19]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSET not yet implemented."
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x033D62C8 MOV V0.16B, V8.16B
	0x033D62CC LDR V8, [X31], #0x30

ISIL:
	001 Move W0, [X0]
	002 Return X0

Method: System.String ToString()

Disassembly:
	0x033D62D0 B 0x33D62D4
	0x033D62D4 STR D8, [X31 - 0x40]!
	0x033D62D8 STR X30, [X31 + 0x8]
	0x033D62DC STP X24, X23, [X31 + 0x10]
	0x033D62E0 STP X22, X21, [X31 + 0x20]
	0x033D62E4 STP X20, X19, [X31 + 0x30]
	0x033D62E8 ADRP X21, 0x1007000
	0x033D62EC ADRP X20, 0xD56000

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0]
	003 Add X0, X31, 8
	004 Move X1, X31
	005 Move [X31+8], X8
	006 Call UInt64.ToString, X0
	007 Move X30, [X31+16]
	008 Return X0

Method: System.Void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)

Disassembly:
	0x033D62F0 LDRB W8, [X21 + 0x354]
	0x033D62F4 LDR X20, [X20 + 0xDE8]
	0x033D62F8 MOV X19, X0
	0x033D62FC MOV V8.16B, V0.16B
	0x033D6300 TBNZ X8, 0x0, 0x33D6318
	0x033D6304 ADRP X0, 0xD56000
	0x033D6308 LDR X0, [X0 + 0xDE8]
	0x033D630C BL 0x1C16CF4
	0x033D6310 MOVZ W8, 0x1
	0x033D6314 STRB W8, [X21 + 0x354]
	0x033D6318 STP X31, X31, [X19]
	0x033D631C LDR X0, [X20]
	0x033D6320 LDR W8, [X0 + 0xE0]
	0x033D6324 CBNZ W8, 0x33D632C
	0x033D6328 BL 0x1C16DFC
	0x033D632C FMOV W8, S8
	0x033D6330 UBFM W9, W8, 0x17, 0x1E
	0x033D6334 CMP W9, 0x20
	0x033D6338 B.CC 0x33D6688
	0x033D633C CMP W9, 0xDF
	0x033D6340 B.CS 0x33D66A0
	0x033D6344 MOVZ W8, 0xEDDF
	0x033D6348 MOVZ W10, 0x4D10
	0x033D634C MOVZ W11, 0x1220
	0x033D6350 MOVK W8, 0xF0000
	0x033D6354 FCMP S8, 0x0
	0x033D6358 FNEG S0, S8
	0x033D635C MOVK W11, 0xFFDA0000
	0x033D6360 MUL W9, W9, W10
	0x033D6364 MOVZ W12, 0x6
	0x033D6368 FCSEL S0, S0, S8, MI
	0x033D636C ADD W10, W8, 0x1D0000
	0x033D6370 ADD W23, W9, W11
	0x033D6374 CSET W21, MI
	0x033D6378 FCVT S8, S0
	0x033D637C CMP W9, W10
	0x033D6380 SUB W22, W12, W23, 0x10, ASR
	0x033D6384 B.LS 0x33D63A8
	0x033D6388 ADRP X8, 0xFFFFFFFFFD714000
	0x033D638C LDR V1, [X8 + 0x9C]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1008000
	006 Move W8, [X21+741]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD51000
	014 Move X0, [X0+3488]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+741], W8
	018 Compare X19, 0
	019 JumpIfEqual {32}
	020 Move X8, 0xD51000
	021 Move X8, [X8+3488]
	022 Move X2, [X20]
	023 Move X0, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X1, [X8]
	027 Move X3, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call SerializationInfo.AddValue, X0, X1, X2
	031 Return 
	032 Move X0, 0xD23000
	033 Move X0, [X0+1320]
	034 Call 0x1C17D08
	035 Call 0x1C17F10
	036 Move X19, X0
	037 Move X0, 0xD48000
	038 Move X0, [X0+728]
	039 Call 0x1C17D08
	040 Move X1, X0
	041 Move X0, X19
	042 Move X2, X31
	043 Call ArgumentNullException..ctor, X0, X1
	044 Move X0, 0xD57000
	045 Move X0, [X0+3512]
	046 Call 0x1C17D08
	047 Move X1, X0
	048 Move X0, X19
	049 Call 0x1C17DEC

Method: System.Boolean op_Equality(System.UIntPtr value1, System.UIntPtr value2)

Disassembly:
	0x033D6390 FCMP S0, S1
	0x033D6394 B.GE 0x33D63F0
	0x033D6398 ADDS W31, W22, 0x1

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: System.Boolean op_Inequality(System.UIntPtr value1, System.UIntPtr value2)

Disassembly:
	0x033D639C B.NE 0x33D63F0
	0x033D63A0 MOV W22, W31
	0x033D63A4 B 0x33D6430

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: System.UInt64 op_Explicit(System.UIntPtr value)

Disassembly:
	0x033D63A8 LDR X0, [X20]

ISIL:
	001 Return X0

Method: System.UInt32 op_Explicit(System.UIntPtr value)

Disassembly:
	0x033D63AC CMP W9, W8

ISIL:
	001 Return X0

Method: System.UIntPtr op_Explicit(System.UInt64 value)

Disassembly:
	0x033D63B0 MOVZ W8, 0x1C

ISIL:
	001 Return X0

Method: System.UIntPtr op_Explicit(System.UInt32 value)

Disassembly:
	0x033D63B4 CSEL W22, W22, W8, HI
	0x033D63B8 LDR W10, [X0 + 0xE0]

ISIL:
	001 Move W0, W0
	002 Return X0

Method: System.Int32 get_Size()

Disassembly:
	0x033D6234 STR W8, [X0]
	0x033D6238 STR X1, [X0 + 0x8]

ISIL:
	001 Move W0, 8
	002 Return X0

Method: System.Boolean System.IEquatable<System.UIntPtr>.Equals(System.UIntPtr other)

Disassembly:
	0x033D63BC CBNZ W10, 0x33D63C8
	0x033D63C0 BL 0x1C16DFC
	0x033D63C4 LDR X0, [X20]
	0x033D63C8 LDR X8, [X0 + 0xB8]

ISIL:
	001 Move X8, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Void .cctor()

Disassembly:
	0x033D63CC LDR X8, [X8 + 0x10]
	0x033D63D0 CBZ X8, 0x33D66E8
	0x033D63D4 LDR W9, [X8 + 0x18]
	0x033D63D8 CMP W22, W9
	0x033D63DC B.CS 0x33D66EC
	0x033D63E0 ADD X8, X8, W22, 0x3, UXTW
	0x033D63E4 LDR V0, [X8 + 0x20]
	0x033D63E8 FMUL D8, D0, D8
	0x033D63EC B 0x33D6430
	0x033D63F0 LDR X0, [X20]
	0x033D63F4 LDR W8, [X0 + 0xE0]
	0x033D63F8 CBNZ W8, 0x33D6404
	0x033D63FC BL 0x1C16DFC
	0x033D6400 LDR X0, [X20]
	0x033D6404 LDR X8, [X0 + 0xB8]
	0x033D6408 LDR X8, [X8 + 0x10]
	0x033D640C CBZ X8, 0x33D66E8
	0x033D6410 LDR W10, [X8 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x1008000
	005 Move X20, 0xD47000
	006 Move W8, [X19+742]
	007 Move X20, [X20+3888]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xD47000
	013 Move X0, [X0+3888]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+742], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move [X8], X31
	022 Move X30, [X31+32]
	023 Return 

