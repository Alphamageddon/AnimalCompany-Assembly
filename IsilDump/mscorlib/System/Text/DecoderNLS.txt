Type: System.Text.DecoderNLS

Method: System.Void .ctor(System.Text.Encoding encoding)

Disassembly:
	0x033FDA64 ADD X0, X8, 0x8
	0x033FDA68 BL 0x1C24138
	0x033FDA6C CBNZ X0, 0x33FDA7C
	0x033FDA70 LDR X8, [X20]
	0x033FDA74 LDR X8, [X8 + 0xB8]
	0x033FDA78 LDR X0, [X8 + 0x8]
	0x033FDA7C LDP X20, X19, [X31 + 0x10]
	0x033FDA80 LDR X30, [X31], #0x20
	0x033FDA84 RET
	0x033FDA88 STP X30, X19, [X31 - 0x10]!
	0x033FDA8C MOV X19, X0
	0x033FDA90 LDR X8, [X19]
	0x033FDA94 MOV X0, X19
	0x033FDA98 LDP X9, X1, [X8 + 0x188]
	0x033FDA9C BLR X9
	0x033FDAA0 ANDS W31, W0, 0xFFFF
	0x033FDAA4 B.NE 0x33FDA90

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move X1, X31
	006 Move X19, X0
	007 Call Object..ctor, X0
	008 Move [X19+32], X20
	009 Compare X20, 0
	010 JumpIfEqual {21}
	011 Move X8, [X20+48]
	012 Move X9, [X19]
	013 Move X0, X19
	014 Move [X19+16], X8
	015 Move X2, [X9+376]
	016 Move X1, [X9+384]
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+32]
	020 CallNoReturn X2
	021 Call 0x1C17F20

Method: System.Void Reset()

Disassembly:
	0x033FEFA0 MOV X0, X20
	0x033FEFA4 MOV X1, X19
	0x033FEFA8 MOV X3, X31
	0x033FEFAC BL 0x3311888
	0x033FEFB0 ADRP X0, 0xD2F000
	0x033FEFB4 LDR X0, [X0 + 0xC60]

ISIL:
	001 Move X0, [X0+24]
	002 Compare X0, 0
	003 JumpIfEqual {8}
	004 Move X8, [X0]
	005 Move X2, [X8+408]
	006 Move X1, [X8+416]
	007 CallNoReturn X2
	008 Return 

Method: System.Int32 GetCharCount(System.Byte[] bytes, System.Int32 index, System.Int32 count)

Disassembly:
	0x033FEFB8 BL 0x1C16D08
	0x033FEFBC MOV X1, X0
	0x033FEFC0 MOV X0, X20
	0x033FEFC4 BL 0x1C16DEC

ISIL:
	001 Move X8, [X0]
	002 Move W4, W31
	003 Move X6, [X8+408]
	004 Move X5, [X8+416]
	005 CallNoReturn X6

Method: System.Int32 GetCharCount(System.Byte[] bytes, System.Int32 index, System.Int32 count, System.Boolean flush)

Disassembly:
	0x033FEFC8 STR X30, [X31 - 0x20]!
	0x033FEFCC STP X20, X19, [X31 + 0x10]
	0x033FEFD0 MOV X19, X1
	0x033FEFD4 MOV X1, X31
	0x033FEFD8 MOV X20, X0
	0x033FEFDC BL 0x33BDD8C
	0x033FEFE0 STR X19, [X20 + 0x10]
	0x033FEFE4 LDP X20, X19, [X31 + 0x10]
	0x033FEFE8 LDR X30, [X31], #0x20
	0x033FEFEC RET
	0x033FEFF0 MOV X1, X31
	0x033FEFF4 B 0x33BDD8C
	0x033FEFF8 STP X30, X21, [X31 - 0x20]!
	0x033FEFFC STP X20, X19, [X31 + 0x10]
	0x033FF000 ADRP X20, 0xFDE000
	0x033FF004 ADRP X21, 0xD2E000
	0x033FF008 LDRB W8, [X20 + 0x4F5]
	0x033FF00C B 0x3EB163C
	0x033FF010 MOV X19, X0
	0x033FF014 TBNZ X8, 0x0, 0x33FF02C
	0x033FF018 ADRP X0, 0xD2E000
	0x033FF01C LDR X0, [X0 + 0xC68]
	0x033FF020 BL 0x1C16CF4
	0x033FF024 MOVZ W8, 0x1
	0x033FF028 STRB W8, [X20 + 0x4F5]
	0x033FF02C LDR X0, [X21]
	0x033FF030 BL 0x1C16F10
	0x033FF034 MOV X1, X19
	0x033FF038 MOV X20, X0
	0x033FF03C BL 0x33FF050
	0x033FF040 MOV X0, X20
	0x033FF044 LDP X20, X19, [X31 + 0x10]
	0x033FF048 LDP X30, X21, [X31], #0x20
	0x033FF04C RET
	0x033FF050 SUB X31, X31, 0x30
	0x033FF054 STP X30, X21, [X31 + 0x10]
	0x033FF058 STP X20, X19, [X31 + 0x20]
	0x033FF05C MOV X20, X1
	0x033FF060 MOVN W8, 0x0
	0x033FF064 MOV X1, X31
	0x033FF068 MOV X21, X0
	0x033FF06C STR W8, [X0 + 0x40]
	0x033FF070 BL 0x33BDD8C
	0x033FF074 STR X20, [X21 + 0x38]
	0x033FF078 CBZ X20, 0x33FF0FC
	0x033FF07C LDR X8, [X20 + 0x18]
	0x033FF080 CBNZ X8, 0x33FF0EC
	0x033FF084 BL 0x33FF264
	0x033FF088 MOV X19, X0
	0x033FF08C STRB W31, [X31 + 0xC]
	0x033FF090 ADD X1, X31, 0xC
	0x033FF094 MOV X2, X31
	0x033FF098 BL 0x33DE64C
	0x033FF09C LDR X21, [X21 + 0x38]
	0x033FF0A0 CBZ X21, 0x33FF108
	0x033FF0A4 LDR X8, [X21 + 0x18]
	0x033FF0A8 CBZ X8, 0x33FF0B4
	0x033FF0AC MOV X20, X31
	0x033FF0B0 B 0x33FF0D4
	0x033FF0B4 LDR X0, [X20 + 0x10]
	0x033FF0B8 CBZ X0, 0x33FF10C
	0x033FF0BC LDR X8, [X0]
	0x033FF0C0 LDR X1, [X8 + 0x3A0]
	0x033FF0C4 LDR X9, [X8 + 0x398]
	0x033FF0C8 BLR X9
	0x033FF0CC MOV X20, X31
	0x033FF0D0 STR X0, [X21 + 0x18]
	0x033FF0D4 LDRB W8, [X31 + 0xC]
	0x033FF0D8 CBZ W8, 0x33FF0E8
	0x033FF0DC MOV X0, X19
	0x033FF0E0 MOV X1, X31
	0x033FF0E4 BL 0x33E14E4
	0x033FF0E8 CBNZ X20, 0x33FF100
	0x033FF0EC LDP X20, X19, [X31 + 0x20]
	0x033FF0F0 LDP X30, X21, [X31 + 0x10]
	0x033FF0F4 ADD X31, X31, 0x30
	0x033FF0F8 RET
	0x033FF0FC BL 0x1C16F20
	0x033FF100 MOV X0, X20
	0x033FF104 BL 0x1C16F18
	0x033FF108 BL 0x1C16F20
	0x033FF10C BL 0x1C16F20
	0x033FF110 B 0x33FF11C
	0x033FF114 B 0x33FF11C
	0x033FF118 B 0x33FF11C
	0x033FF11C MOV X21, X0
	0x033FF120 CMP W1, 0x1
	0x033FF124 B.NE 0x33FF13C
	0x033FF128 MOV X0, X21
	0x033FF12C BL 0x3EB1AD0
	0x033FF130 LDR X20, [X0]
	0x033FF134 BL 0x3EB1AE0
	0x033FF138 B 0x33FF0D4
	0x033FF13C MOV X20, X31
	0x033FF140 B 0x33FF148
	0x033FF144 MOV X21, X0
	0x033FF148 LDRB W8, [X31 + 0xC]
	0x033FF14C CBZ W8, 0x33FF15C
	0x033FF150 MOV X0, X19
	0x033FF154 MOV X1, X31
	0x033FF158 BL 0x33E14E4
	0x033FF15C CBNZ X20, 0x33FF168
	0x033FF160 MOV X0, X21
	0x033FF164 BL 0x1D2C690
	0x033FF168 MOV X0, X20
	0x033FF16C BL 0x1C16F18
	0x033FF170 BL 0x1990590
	0x033FF174 MOVZ W0, 0x1
	0x033FF178 RET
	0x033FF17C STP X30, X21, [X31 - 0x20]!
	0x033FF180 STP X20, X19, [X31 + 0x10]
	0x033FF184 ADRP X21, 0xFDE000
	0x033FF188 LDRB W8, [X21 + 0x4F6]
	0x033FF18C MOV X19, X1
	0x033FF190 MOV X20, X0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0xFE0000
	009 Move W8, [X24+1258]
	010 Move W21, W4
	011 Move W19, W3
	012 Move W20, W2
	013 Move X23, X1
	014 Move X22, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xD24000
	020 Move X0, [X0+2096]
	021 Call 0x1C17CF4
	022 Move X0, 0xD24000
	023 Move X0, [X0+760]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+1258], W8
	027 Compare X23, 0
	028 JumpIfEqual {64}
	029 Move TEMP, X19
	030 And TEMP, TEMP, -2147483648
	031 Compare TEMP, -2147483648
	032 JumpIfEqual {81}
	033 Move TEMP, X20
	034 And TEMP, TEMP, -2147483648
	035 Compare TEMP, -2147483648
	036 JumpIfEqual {81}
	037 Move W8, [X23+24]
	038 Subtract W8, W8, W20
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X8, 0xD24000
	041 Move X8, [X8+760]
	042 Move X24, 0xD23000
	043 Move X0, X23
	044 Move X1, [X8]
	045 Move X24, [X24+2096]
	046 Call 0x25FC4C0, X0
	047 Move X2, [X24]
	048 Call 0x2219CF4, X0
	049 Move X8, [X22]
	050 Add X1, X0, W20
	051 And W3, W21, 1
	052 Move X0, X22
	053 Move X5, [X8+424]
	054 Move X4, [X8+432]
	055 Move W2, W19
	056 Move X20, [X31+48]
	057 Move X19, [X31+56]
	058 Move X22, [X31+32]
	059 Move X21, [X31+40]
	060 Move X24, [X31+16]
	061 Move X23, [X31+24]
	062 Move X30, [X31+64]
	063 CallNoReturn X5
	064 Move X0, 0xCFA000
	065 Move X0, [X0+1320]
	066 Call 0x1C17D08
	067 Call 0x1C17F10
	068 Move X19, X0
	069 Move X0, 0xD24000
	070 Move X0, [X0+776]
	071 Call 0x1C17D08
	072 Move X20, X0
	073 Move X0, 0xD24000
	074 Move X0, [X0+736]
	075 Call 0x1C17D08
	076 Move X2, X0
	077 Move X0, X19
	078 Move X1, X20
	079 Move X3, X31
	080 Call ArgumentNullException..ctor, X0, X1, X2
	081 Move X8, 0xD1D000
	082 Move X9, 0xD00000
	083 Move X8, [X8+1608]
	084 Move X9, [X9+304]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 NotImplemented "Instruction CSEL not yet implemented."
	087 Call 0x1C17D08
	088 Move X19, X0
	089 Move X0, 0xCFD000
	090 Move X0, [X0+1888]
	091 Call 0x1C17D08
	092 Call 0x1C17F10
	093 Move X20, X0
	094 Move X0, 0xD1D000
	095 Move X0, [X0+1648]
	096 Call 0x1C17D08
	097 Move X2, X0
	098 Move X0, X20
	099 Move X1, X19
	100 Move X3, X31
	101 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	102 Move X0, 0xD2F000
	103 Move X0, [X0+3112]
	104 Call 0x1C17D08
	105 Move X1, X0
	106 Move X0, X20
	107 Call 0x1C17DEC
	108 Move X0, 0xCFD000
	109 Move X0, [X0+1888]
	110 Call 0x1C17D08
	111 Call 0x1C17F10
	112 Move X19, X0
	113 Move X0, 0xD24000
	114 Move X0, [X0+776]
	115 Call 0x1C17D08
	116 Move X20, X0
	117 Move X0, 0xD24000
	118 Move X0, [X0+224]
	119 Call 0x1C17D08
	120 Move X2, X0
	121 Move X0, X19
	122 Move X1, X20
	123 Move X3, X31
	124 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	125 Move X0, 0xD2F000
	126 Move X0, [X0+3112]
	127 Call 0x1C17D08
	128 Move X1, X0
	129 Move X0, X19
	130 Call 0x1C17DEC

Method: System.Int32 GetCharCount(System.Byte* bytes, System.Int32 count, System.Boolean flush)

Disassembly:
	0x033FF194 TBNZ X8, 0x0, 0x33FF1AC
	0x033FF198 ADRP X0, 0xD23000
	0x033FF19C LDR X0, [X0 + 0x940]
	0x033FF1A0 BL 0x1C16CF4
	0x033FF1A4 MOVZ W8, 0x1
	0x033FF1A8 STRB W8, [X21 + 0x4F6]
	0x033FF1AC CBZ X19, 0x33FF1E8
	0x033FF1B0 ADRP X8, 0xD23000
	0x033FF1B4 LDR X8, [X8 + 0x940]
	0x033FF1B8 LDR X9, [X19]
	0x033FF1BC LDR X8, [X8]
	0x033FF1C0 LDRB W11, [X9 + 0x130]
	0x033FF1C4 LDRB W10, [X8 + 0x130]
	0x033FF1C8 CMP W11, W10
	0x033FF1CC B.CC 0x33FF1E8
	0x033FF1D0 LDR X9, [X9 + 0xC8]
	0x033FF1D4 ADD X9, X9, X10, 0x3, LSL
	0x033FF1D8 LDUR X9, [X9 - 0x8]
	0x033FF1DC CMP X9, X8
	0x033FF1E0 CSEL X21, X19, X31, EQ
	0x033FF1E4 B.EQ 0x33FF1F8
	0x033FF1E8 MOV W0, W31
	0x033FF1EC LDP X20, X19, [X31 + 0x10]
	0x033FF1F0 LDP X30, X21, [X31], #0x20
	0x033FF1F4 RET
	0x033FF1F8 LDR X0, [X20 + 0x10]
	0x033FF1FC CBZ X0, 0x33FF23C
	0x033FF200 LDR X8, [X0]
	0x033FF204 LDR X9, [X8 + 0x328]
	0x033FF208 LDR X1, [X8 + 0x330]
	0x033FF20C BLR X9
	0x033FF210 CBZ X21, 0x33FF23C
	0x033FF214 MOV W19, W0
	0x033FF218 LDR X0, [X21 + 0x10]
	0x033FF21C CBZ X0, 0x33FF23C
	0x033FF220 LDR X8, [X0]
	0x033FF224 LDR X9, [X8 + 0x328]
	0x033FF228 LDR X1, [X8 + 0x330]
	0x033FF22C BLR X9
	0x033FF230 CMP W19, W0
	0x033FF234 CSET W0, EQ
	0x033FF238 B 0x33FF1EC
	0x033FF23C BL 0x1C16F20
	0x033FF240 STR X30, [X31 - 0x10]!
	0x033FF244 LDR X0, [X0 + 0x10]
	0x033FF248 CBZ X0, 0x33FF260
	0x033FF24C LDR X8, [X0]
	0x033FF250 LDR X2, [X8 + 0x328]
	0x033FF254 LDR X1, [X8 + 0x330]
	0x033FF258 LDR X30, [X31], #0x10
	0x033FF25C BR X2
	0x033FF260 BL 0x1C16F20
	0x033FF264 STR X30, [X31 - 0x20]!
	0x033FF268 STP X20, X19, [X31 + 0x10]
	0x033FF26C ADRP X19, 0xFDE000
	0x033FF270 ADRP X20, 0xD2E000
	0x033FF274 LDRB W8, [X19 + 0x4F7]
	0x033FF278 LDR X20, [X20 + 0xC68]
	0x033FF27C TBNZ X8, 0x0, 0x33FF2A0
	0x033FF280 ADRP X0, 0xD2E000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {26}
	006 Move TEMP, X2
	007 And TEMP, TEMP, -2147483648
	008 Compare TEMP, -2147483648
	009 JumpIfEqual {43}
	010 Move X8, X0
	011 Move X0, [X0+32]
	012 And W9, W3, 1
	013 Move [X8+40], W9
	014 Move W9, 1
	015 Move [X8+41], W9
	016 Compare X0, 0
	017 JumpIfEqual {66}
	018 Move X9, [X0]
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X3, X8
	022 Move X5, [X9+712]
	023 Move X4, [X9+720]
	024 Move X30, [X31+32]
	025 CallNoReturn X5
	026 Move X0, 0xCFA000
	027 Move X0, [X0+1320]
	028 Call 0x1C17D08
	029 Call 0x1C17F10
	030 Move X19, X0
	031 Move X0, 0xD24000
	032 Move X0, [X0+776]
	033 Call 0x1C17D08
	034 Move X20, X0
	035 Move X0, 0xD24000
	036 Move X0, [X0+736]
	037 Call 0x1C17D08
	038 Move X2, X0
	039 Move X0, X19
	040 Move X1, X20
	041 Move X3, X31
	042 Call ArgumentNullException..ctor, X0, X1, X2
	043 Move X0, 0xCFD000
	044 Move X0, [X0+1888]
	045 Call 0x1C17D08
	046 Call 0x1C17F10
	047 Move X19, X0
	048 Move X0, 0xD1D000
	049 Move X0, [X0+1608]
	050 Call 0x1C17D08
	051 Move X20, X0
	052 Move X0, 0xD1D000
	053 Move X0, [X0+1648]
	054 Call 0x1C17D08
	055 Move X2, X0
	056 Move X0, X19
	057 Move X1, X20
	058 Move X3, X31
	059 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	060 Move X0, 0xD2F000
	061 Move X0, [X0+3120]
	062 Call 0x1C17D08
	063 Move X1, X0
	064 Move X0, X19
	065 Call 0x1C17DEC
	066 Call 0x1C17F20

Method: System.Int32 GetChars(System.Byte[] bytes, System.Int32 byteIndex, System.Int32 byteCount, System.Char[] chars, System.Int32 charIndex)

Disassembly:
	0x033FF284 LDR X0, [X0 + 0xC68]
	0x033FF288 BL 0x1C16CF4
	0x033FF28C ADRP X0, 0xCFA000
	0x033FF290 LDR X0, [X0 + 0xCC0]

ISIL:
	001 Move X8, [X0]
	002 Move W6, W31
	003 Move X9, [X8+456]
	004 Move X7, [X8+464]
	005 CallNoReturn X9

Method: System.Int32 GetChars(System.Byte[] bytes, System.Int32 byteIndex, System.Int32 byteCount, System.Char[] chars, System.Int32 charIndex, System.Boolean flush)

Disassembly:
	0x033FF294 BL 0x1C16CF4
	0x033FF298 MOVZ W8, 0x1
	0x033FF29C STRB W8, [X19 + 0x4F7]
	0x033FF2A0 LDR X8, [X20]
	0x033FF2A4 LDR X8, [X8 + 0xB8]
	0x033FF2A8 LDR X0, [X8]
	0x033FF2AC CBNZ X0, 0x33FF2EC
	0x033FF2B0 ADRP X8, 0xCFA000
	0x033FF2B4 LDR X8, [X8 + 0xCC0]
	0x033FF2B8 LDR X0, [X8]
	0x033FF2BC BL 0x1C16F10
	0x033FF2C0 MOV X1, X31
	0x033FF2C4 MOV X19, X0
	0x033FF2C8 BL 0x33BDD8C
	0x033FF2CC LDR X8, [X20]
	0x033FF2D0 MOV X1, X19
	0x033FF2D4 MOV X2, X31
	0x033FF2D8 LDR X0, [X8 + 0xB8]
	0x033FF2DC BL 0x1C24138
	0x033FF2E0 LDR X8, [X20]
	0x033FF2E4 LDR X8, [X8 + 0xB8]
	0x033FF2E8 LDR X0, [X8]
	0x033FF2EC LDP X20, X19, [X31 + 0x10]
	0x033FF2F0 LDR X30, [X31], #0x20
	0x033FF2F4 RET
	0x033FF2F8 MOV X1, X31
	0x033FF2FC B 0x33BDD8C
	0x033FF300 STP X30, X19, [X31 - 0x10]!
	0x033FF304 MOVI V0.2S, 0x1
	0x033FF308 MOV X19, X0
	0x033FF30C STR D0, [X0 + 0x40]
	0x033FF310 BL 0x33FF330
	0x033FF314 ANDS W31, W0, 0xFFFF
	0x033FF318 MOVZ W8, 0x3F
	0x033FF31C CSEL W8, W8, W0, EQ
	0x033FF320 MOVZ W0, 0x1
	0x033FF324 STRH W8, [X19 + 0x30]
	0x033FF328 LDP X30, X19, [X31], #0x10
	0x033FF32C RET
	0x033FF330 STR X30, [X31 - 0x10]!
	0x033FF334 LDR X8, [X0 + 0x38]
	0x033FF338 CBZ X8, 0x33FF400
	0x033FF33C LDR X8, [X8 + 0x18]
	0x033FF340 CBZ X8, 0x33FF400
	0x033FF344 LDR W9, [X8 + 0x18]
	0x033FF348 CMP W9, 0x7
	0x033FF34C B.LT 0x33FF394
	0x033FF350 MOV W10, W31
	0x033FF354 MOV W12, W9
	0x033FF358 MOV W11, W9
	0x033FF35C ADD W12, W10, W12, 0x1, LSR
	0x033FF360 AND W12, W12, 0xFFFE
	0x033FF364 CMP W12, W9
	0x033FF368 B.CS 0x33FF3FC
	0x033FF36C ADD X13, X8, W12, 0x1, UXTW
	0x033FF370 LDRH W13, [X13 + 0x20]
	0x033FF374 CMP W13, W1, UXTH
	0x033FF378 B.EQ 0x33FF3CC
	0x033FF37C CSEL W11, W11, W12, CC
	0x033FF380 CSEL W10, W12, W10, CC
	0x033FF384 SUB W12, W11, W10
	0x033FF388 CMP W12, 0x6
	0x033FF38C B.GT 0x33FF35C
	0x033FF390 B 0x33FF3BC
	0x033FF394 MOV W10, W31
	0x033FF398 MOV W11, W9
	0x033FF39C B 0x33FF3BC
	0x033FF3A0 CMP W10, W9
	0x033FF3A4 B.CS 0x33FF3FC
	0x033FF3A8 ADD X12, X8, W10, 0x1, SXTW
	0x033FF3AC LDRH W12, [X12 + 0x20]
	0x033FF3B0 CMP W12, W1, UXTH
	0x033FF3B4 B.EQ 0x33FF3E0
	0x033FF3B8 ADD W10, W10, 0x2
	0x033FF3BC CMP W10, W11
	0x033FF3C0 B.LT 0x33FF3A0
	0x033FF3C4 MOV W0, W31
	0x033FF3C8 B 0x33FF3F4
	0x033FF3CC ORR W10, W12, 0x1
	0x033FF3D0 CMP W10, W9
	0x033FF3D4 B.CS 0x33FF3FC
	0x033FF3D8 ADD X8, X8, W10, 0x1, UXTW
	0x033FF3DC B 0x33FF3F0
	0x033FF3E0 ADD W10, W10, 0x1
	0x033FF3E4 CMP W10, W9
	0x033FF3E8 B.CS 0x33FF3FC
	0x033FF3EC ADD X8, X8, W10, 0x1, SXTW
	0x033FF3F0 LDRH W0, [X8 + 0x20]
	0x033FF3F4 LDR X30, [X31], #0x10
	0x033FF3F8 RET
	0x033FF3FC BL 0x1C16F28
	0x033FF400 BL 0x1C16F20
	0x033FF404 SUB X31, X31, 0x40
	0x033FF408 STP X30, X23, [X31 + 0x10]
	0x033FF40C STP X22, X21, [X31 + 0x20]
	0x033FF410 STP X20, X19, [X31 + 0x30]
	0x033FF414 ADRP X23, 0xFDE000
	0x033FF418 ADRP X22, 0xCF6000
	0x033FF41C LDRB W8, [X23 + 0x4F8]
	0x033FF420 LDR X22, [X22 + 0x170]
	0x033FF424 MOV W20, W2
	0x033FF428 MOV W21, W1
	0x033FF42C MOV X19, X0
	0x033FF430 TBNZ X8, 0x0, 0x33FF448
	0x033FF434 ADRP X0, 0xCF6000
	0x033FF438 LDR X0, [X0 + 0x170]
	0x033FF43C BL 0x1C16CF4
	0x033FF440 MOVZ W8, 0x1
	0x033FF444 STRB W8, [X23 + 0x4F8]
	0x033FF448 LDR X0, [X22]
	0x033FF44C LDR W8, [X0 + 0xE0]
	0x033FF450 CBNZ W8, 0x33FF458
	0x033FF454 BL 0x1C16DFC
	0x033FF458 MOV W0, W21
	0x033FF45C MOV X1, X31
	0x033FF460 BL 0x331BFEC
	0x033FF464 TBZ X0, 0x0, 0x33FF4B0
	0x033FF468 LDR X0, [X22]
	0x033FF46C LDR W8, [X0 + 0xE0]
	0x033FF470 CBNZ W8, 0x33FF478
	0x033FF474 BL 0x1C16DFC
	0x033FF478 MOV W0, W20
	0x033FF47C MOV X1, X31
	0x033FF480 BL 0x331C0FC
	0x033FF484 TBZ X0, 0x0, 0x33FF530
	0x033FF488 MOVZ W8, 0x3F
	0x033FF48C MOVI V0.2S, 0x2
	0x033FF490 STRH W8, [X19 + 0x30]
	0x033FF494 STR D0, [X19 + 0x40]
	0x033FF498 LDP X20, X19, [X31 + 0x30]
	0x033FF49C LDP X22, X21, [X31 + 0x20]
	0x033FF4A0 LDP X30, X23, [X31 + 0x10]
	0x033FF4A4 MOVZ W0, 0x1
	0x033FF4A8 ADD X31, X31, 0x40
	0x033FF4AC RET
	0x033FF4B0 MOVZ W8, 0xD800
	0x033FF4B4 STR W8, [X31 + 0xC]
	0x033FF4B8 ADRP X19, 0xCF4000
	0x033FF4BC LDR X19, [X19 + 0x758]
	0x033FF4C0 MOV X0, X19
	0x033FF4C4 BL 0x1C16D08
	0x033FF4C8 ADD X1, X31, 0xC
	0x033FF4CC BL 0x1C16E04
	0x033FF4D0 MOV X20, X0
	0x033FF4D4 MOVZ W8, 0xDBFF
	0x033FF4D8 MOV X0, X19
	0x033FF4DC STR W8, [X31 + 0x8]
	0x033FF4E0 BL 0x1C16D08
	0x033FF4E4 ADD X1, X31, 0x8
	0x033FF4E8 BL 0x1C16E04
	0x033FF4EC MOV X19, X0
	0x033FF4F0 ADRP X0, 0xD23000
	0x033FF4F4 LDR X0, [X0 + 0x370]
	0x033FF4F8 BL 0x1C16D08
	0x033FF4FC MOV X1, X20
	0x033FF500 MOV X2, X19
	0x033FF504 MOV X3, X31
	0x033FF508 BL 0x320A264
	0x033FF50C MOV X19, X0
	0x033FF510 ADRP X0, 0xCFC000

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X26, 0xFDF000
	014 Move W8, [X26+1259]
	015 Move W20, W6
	016 Move W21, W5
	017 Move X24, X4
	018 Move W19, W3
	019 Move W22, W2
	020 Move X25, X1
	021 Move X23, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {40}
	026 Move X0, 0xD23000
	027 Move X0, [X0+2096]
	028 Call 0x1C17CF4
	029 Move X0, 0xD24000
	030 Move X0, [X0+712]
	031 Call 0x1C17CF4
	032 Move X0, 0xD24000
	033 Move X0, [X0+760]
	034 Call 0x1C17CF4
	035 Move X0, 0xD24000
	036 Move X0, [X0+720]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X26+1259], W8
	040 Compare X25, 0
	041 JumpIfEqual {113}
	042 Compare X24, 0
	043 JumpIfEqual {113}
	044 Move TEMP, X19
	045 And TEMP, TEMP, -2147483648
	046 Compare TEMP, -2147483648
	047 JumpIfEqual {134}
	048 Move TEMP, X22
	049 And TEMP, TEMP, -2147483648
	050 Compare TEMP, -2147483648
	051 JumpIfEqual {134}
	052 Move W8, [X25+24]
	053 Subtract W8, W8, W22
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move TEMP, X21
	056 And TEMP, TEMP, -2147483648
	057 Compare TEMP, -2147483648
	058 JumpIfEqual {102}
	059 Move W8, [X24+24]
	060 Subtract W26, W8, W21
	061 Move X8, 0xD24000
	062 Move X8, [X8+760]
	063 Move X27, 0xD23000
	064 Move X28, 0xD24000
	065 Move X29, 0xD24000
	066 Move X1, [X8]
	067 Move X27, [X27+2096]
	068 Move X28, [X28+720]
	069 Move X29, [X29+712]
	070 Move X0, X25
	071 Call 0x25FC4C0, X0
	072 Move X2, [X27]
	073 Call 0x2219CF4, X0
	074 Move X1, [X28]
	075 Move X25, X0
	076 Move X0, X24
	077 Call Span`1<Char>.op_Implicit, X0
	078 Move X2, [X29]
	079 Call MemoryMarshal.GetReference, X0
	080 Move X8, [X23]
	081 Add X1, X25, W22
	082 Add X3, X0, W21
	083 And W5, W20, 1
	084 Move X7, [X8+472]
	085 Move X6, [X8+480]
	086 Move X0, X23
	087 Move W2, W19
	088 Move W4, W26
	089 Move X20, [X31+80]
	090 Move X19, [X31+88]
	091 Move X22, [X31+64]
	092 Move X21, [X31+72]
	093 Move X24, [X31+48]
	094 Move X23, [X31+56]
	095 Move X26, [X31+32]
	096 Move X25, [X31+40]
	097 Move X28, [X31+16]
	098 Move X27, [X31+24]
	099 Move X29, [X31+96]
	100 Move X30, [X31+104]
	101 CallNoReturn X7
	102 Move X0, 0xCFD000
	103 Move X0, [X0+1888]
	104 Call 0x1C17D08
	105 Call 0x1C17F10
	106 Move X19, X0
	107 Move X0, 0xD24000
	108 Move X0, [X0+792]
	109 Call 0x1C17D08
	110 Move X20, X0
	111 Move X0, 0xD1D000
	112 Move X0, [X0+1632]
	113 Move X8, 0xD24000
	114 Move X9, 0xD24000
	115 Move X8, [X8+728]
	116 Move X9, [X9+776]
	117 NotImplemented "Instruction CMP not yet implemented."
	118 NotImplemented "Instruction CSEL not yet implemented."
	119 Call 0x1C17D08
	120 Move X19, X0
	121 Move X0, 0xCFA000
	122 Move X0, [X0+1320]
	123 Call 0x1C17D08
	124 Call 0x1C17F10
	125 Move X20, X0
	126 Move X0, 0xD24000
	127 Move X0, [X0+736]
	128 Call 0x1C17D08
	129 Move X2, X0
	130 Move X0, X20
	131 Move X1, X19
	132 Move X3, X31
	133 Call ArgumentNullException..ctor, X0, X1, X2
	134 Move X8, 0xD24000
	135 Move X9, 0xD24000
	136 Move X8, [X8+808]
	137 Move X9, [X9+768]
	138 NotImplemented "Instruction CMP not yet implemented."
	139 NotImplemented "Instruction CSEL not yet implemented."
	140 Call 0x1C17D08
	141 Move X19, X0
	142 Move X0, 0xCFD000
	143 Move X0, [X0+1888]
	144 Call 0x1C17D08
	145 Call 0x1C17F10
	146 Move X20, X0
	147 Move X0, 0xD1D000
	148 Move X0, [X0+1648]
	149 Call 0x1C17D08
	150 Move X2, X0
	151 Move X0, X20
	152 Move X1, X19
	153 Move X3, X31
	154 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	155 Move X0, 0xD2F000
	156 Move X0, [X0+3128]
	157 Call 0x1C17D08
	158 Move X1, X0
	159 Move X0, X20
	160 Call 0x1C17DEC
	161 Move X0, 0xCFD000
	162 Move X0, [X0+1888]
	163 Call 0x1C17D08
	164 Call 0x1C17F10
	165 Move X19, X0
	166 Move X0, 0xD24000
	167 Move X0, [X0+776]
	168 Call 0x1C17D08
	169 Move X20, X0
	170 Move X0, 0xD24000
	171 Move X0, [X0+224]
	172 Call 0x1C17D08
	173 Move X2, X0
	174 Move X0, X19
	175 Move X1, X20
	176 Move X3, X31
	177 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	178 Move X0, 0xD2F000
	179 Move X0, [X0+3128]
	180 Call 0x1C17D08
	181 Move X1, X0
	182 Move X0, X19
	183 Call 0x1C17DEC

Method: System.Int32 GetChars(System.Byte* bytes, System.Int32 byteCount, System.Char* chars, System.Int32 charCount, System.Boolean flush)

Disassembly:
	0x033FF514 LDR X0, [X0 + 0x760]
	0x033FF518 BL 0x1C16D08
	0x033FF51C BL 0x1C16F10
	0x033FF520 MOV X20, X0
	0x033FF524 ADRP X0, 0xD23000
	0x033FF528 LDR X0, [X0 + 0x378]
	0x033FF52C B 0x33FF5AC
	0x033FF530 MOVZ W8, 0xDC00
	0x033FF534 STR W8, [X31 + 0xC]
	0x033FF538 ADRP X19, 0xCF4000
	0x033FF53C LDR X19, [X19 + 0x758]
	0x033FF540 MOV X0, X19
	0x033FF544 BL 0x1C16D08
	0x033FF548 ADD X1, X31, 0xC
	0x033FF54C BL 0x1C16E04
	0x033FF550 MOV X20, X0
	0x033FF554 MOVZ W8, 0xDFFF
	0x033FF558 MOV X0, X19
	0x033FF55C STR W8, [X31 + 0x8]
	0x033FF560 BL 0x1C16D08
	0x033FF564 ADD X1, X31, 0x8
	0x033FF568 BL 0x1C16E04
	0x033FF56C MOV X19, X0
	0x033FF570 ADRP X0, 0xD23000
	0x033FF574 LDR X0, [X0 + 0x370]
	0x033FF578 BL 0x1C16D08
	0x033FF57C MOV X1, X20
	0x033FF580 MOV X2, X19
	0x033FF584 MOV X3, X31
	0x033FF588 BL 0x320A264
	0x033FF58C MOV X19, X0
	0x033FF590 ADRP X0, 0xCFC000
	0x033FF594 LDR X0, [X0 + 0x760]
	0x033FF598 BL 0x1C16D08
	0x033FF59C BL 0x1C16F10
	0x033FF5A0 MOV X20, X0
	0x033FF5A4 ADRP X0, 0xD23000
	0x033FF5A8 LDR X0, [X0 + 0x380]
	0x033FF5AC BL 0x1C16D08
	0x033FF5B0 MOV X1, X0
	0x033FF5B4 MOV X0, X20
	0x033FF5B8 MOV X2, X19
	0x033FF5BC MOV X3, X31
	0x033FF5C0 BL 0x3311888
	0x033FF5C4 ADRP X0, 0xD2E000
	0x033FF5C8 LDR X0, [X0 + 0xC70]
	0x033FF5CC BL 0x1C16D08
	0x033FF5D0 MOV X1, X0
	0x033FF5D4 MOV X0, X20
	0x033FF5D8 BL 0x1C16DEC
	0x033FF5DC LDR W9, [X0 + 0x40]
	0x033FF5E0 SUBS W9, W9, 0x1
	0x033FF5E4 STR W9, [X0 + 0x40]
	0x033FF5E8 B.MI 0x33FF60C
	0x033FF5EC MOVN W10, 0x80000000
	0x033FF5F0 MOV X8, X0
	0x033FF5F4 CMP W9, W10
	0x033FF5F8 B.NE 0x33FF614
	0x033FF5FC MOV W0, W31
	0x033FF600 MOVN W9, 0x0
	0x033FF604 STR W9, [X8 + 0x40]
	0x033FF608 RET
	0x033FF60C MOV W0, W31
	0x033FF610 RET
	0x033FF614 LDRH W0, [X8 + 0x30]
	0x033FF618 RET
	0x033FF61C LDR W8, [X0 + 0x40]
	0x033FF620 TBNZ X8, 0x1F, 0x33FF640
	0x033FF624 ADDS W8, W8, 0x1
	0x033FF628 STR W8, [X0 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {32}
	006 Compare X3, 0
	007 JumpIfEqual {32}
	008 Move TEMP, X4
	009 And TEMP, TEMP, -2147483648
	010 Compare TEMP, -2147483648
	011 JumpIfEqual {53}
	012 Move TEMP, X2
	013 And TEMP, TEMP, -2147483648
	014 Compare TEMP, -2147483648
	015 JumpIfEqual {53}
	016 Move X8, X0
	017 Move X0, [X0+32]
	018 And W9, W5, 1
	019 Move [X8+40], W9
	020 Move W9, 1
	021 Move [X8+41], W9
	022 Compare X0, 0
	023 JumpIfEqual {80}
	024 Move X9, [X0]
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X5, X8
	028 Move X7, [X9+776]
	029 Move X6, [X9+784]
	030 Move X30, [X31+32]
	031 CallNoReturn X7
	032 Move X8, 0xD24000
	033 Move X9, 0xD24000
	034 Move X8, [X8+776]
	035 Move X9, [X9+728]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction CSEL not yet implemented."
	038 Call 0x1C17D08
	039 Move X19, X0
	040 Move X0, 0xCFA000
	041 Move X0, [X0+1320]
	042 Call 0x1C17D08
	043 Call 0x1C17F10
	044 Move X20, X0
	045 Move X0, 0xD24000
	046 Move X0, [X0+736]
	047 Call 0x1C17D08
	048 Move X2, X0
	049 Move X0, X20
	050 Move X1, X19
	051 Move X3, X31
	052 Call ArgumentNullException..ctor, X0, X1, X2
	053 Move X8, 0xD24000
	054 Move X9, 0xD24000
	055 Move X8, [X8+784]
	056 Move X9, [X9+808]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 NotImplemented "Instruction CSEL not yet implemented."
	059 Call 0x1C17D08
	060 Move X19, X0
	061 Move X0, 0xCFD000
	062 Move X0, [X0+1888]
	063 Call 0x1C17D08
	064 Call 0x1C17F10
	065 Move X20, X0
	066 Move X0, 0xD1D000
	067 Move X0, [X0+1648]
	068 Call 0x1C17D08
	069 Move X2, X0
	070 Move X0, X20
	071 Move X1, X19
	072 Move X3, X31
	073 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	074 Move X0, 0xD2F000
	075 Move X0, [X0+3136]
	076 Call 0x1C17D08
	077 Move X1, X0
	078 Move X0, X20
	079 Call 0x1C17DEC
	080 Call 0x1C17F20

Method: System.Boolean get_MustFlush()

Disassembly:
	0x033FF62C B.MI 0x33FF640
	0x033FF630 LDR W9, [X0 + 0x44]

ISIL:
	001 Move W0, [X0+40]
	002 Return X0

Method: System.Boolean get_HasState()

Disassembly:
	0x033FF634 CMP W8, W9
	0x033FF638 CSET W0, LE

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Void ClearMustFlush()

Disassembly:
	0x033FF63C RET
	0x033FF640 MOV W0, W31

ISIL:
	001 Move [X0+40], W31
	002 Return 

