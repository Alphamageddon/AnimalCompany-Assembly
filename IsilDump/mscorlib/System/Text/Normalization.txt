Type: System.Text.Normalization

Method: System.UInt32 PropValue(System.Int32 cp)

Disassembly:
	0x03247480 CMP X23, X9
	0x03247484 B.CS 0x32474D8
	0x03247488 LDR X0, [X22]
	0x0324748C CBZ X0, 0x32474D4
	0x03247490 ADD X8, X8, X23, 0x2, LSL
	0x03247494 LDRH W8, [X8 + 0x20]
	0x03247498 AND W8, W8, 0xFFF
	0x0324749C ADD W1, W8, W26
	0x032474A0 MOV X2, X31
	0x032474A4 BL 0x3233D30
	0x032474A8 ADD X23, X23, 0x1
	0x032474AC CMP X24, X23
	0x032474B0 B.NE 0x324743C
	0x032474B4 ADD W8, W20, 0x1
	0x032474B8 STR W8, [X19]
	0x032474BC LDP X20, X19, [X31 + 0x40]
	0x032474C0 LDP X22, X21, [X31 + 0x30]
	0x032474C4 LDP X24, X23, [X31 + 0x20]
	0x032474C8 LDP X26, X25, [X31 + 0x10]
	0x032474CC LDR X30, [X31], #0x50
	0x032474D0 RET
	0x032474D4 BL 0x1C16F20
	0x032474D8 BL 0x1C16F28
	0x032474DC STP X30, X27, [X31 - 0x50]!
	0x032474E0 STP X26, X25, [X31 + 0x10]
	0x032474E4 STP X24, X23, [X31 + 0x20]
	0x032474E8 STP X22, X21, [X31 + 0x30]
	0x032474EC STP X20, X19, [X31 + 0x40]
	0x032474F0 ADRP X20, 0xEDB000
	0x032474F4 ADRP X23, 0xEAC000
	0x032474F8 LDR X20, [X20 + 0x2B8]
	0x032474FC LDR X23, [X23 + 0x8F0]
	0x03247500 MOV W21, W2
	0x03247504 MOV X19, X1
	0x03247508 MOV X22, X0
	0x0324750C ADRP X26, 0x1195000
	0x03247510 MOVZ W27, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1196000
	006 Move X20, 0xEDC000
	007 Move W8, [X21+1115]
	008 Move X20, [X20+696]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xEDB000
	015 Move X0, [X0+3016]
	016 Call 0x1C17CF4
	017 Move X0, 0xEDC000
	018 Move X0, [X0+696]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1115], W8
	022 Move X0, [X20]
	023 Move X21, 0xEDB000
	024 Move W8, [X0+224]
	025 Move X21, [X21+3016]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X20]
	030 Move X8, [X21]
	031 Move X9, [X0+184]
	032 Move W10, [X8+224]
	033 Move X20, [X9]
	034 Compare W10, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Move W0, W19
	039 Move X1, X31
	040 Call NormalizationTableUtil.PropIdx, X0
	041 Move W0, [X20]
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Move X21, [X31+40]
	046 Return X0

Method: System.Int32 CharMapIdx(System.Int32 cp)

Disassembly:
	0x03247514 LDRB W8, [X26 + 0x468]
	0x03247518 TBNZ X8, 0x0, 0x3247530
	0x0324751C MOV X0, X20
	0x03247520 BL 0x1C16CF4
	0x03247524 MOV X0, X23
	0x03247528 BL 0x1C16CF4
	0x0324752C STRB W27, [X26 + 0x468]
	0x03247530 LDR X0, [X19]
	0x03247534 CBNZ X0, 0x3247720
	0x03247538 CBZ X22, 0x3247748
	0x0324753C LDR W8, [X22 + 0x10]
	0x03247540 CMP W8, 0x2
	0x03247544 B.LT 0x3247730
	0x03247548 MOVZ W21, 0x1
	0x0324754C MOV X0, X22
	0x03247550 MOV W1, W21
	0x03247554 MOV X2, X31
	0x03247558 BL 0x3222A1C
	0x0324755C LDR X8, [X20]
	0x03247560 MOV W24, W0
	0x03247564 LDR W9, [X8 + 0xE0]
	0x03247568 CBNZ W9, 0x3247574
	0x0324756C MOV X0, X8
	0x03247570 BL 0x1C16DFC
	0x03247574 AND W0, W24, 0xFFFF
	0x03247578 BL 0x32465A8
	0x0324757C ANDS W31, W0, 0xFF
	0x03247580 B.EQ 0x32475C4
	0x03247584 MOV W24, W0
	0x03247588 SUB W1, W21, 0x1
	0x0324758C MOV X0, X22
	0x03247590 MOV X2, X31
	0x03247594 BL 0x3222A1C
	0x03247598 LDR X8, [X20]
	0x0324759C MOV W25, W0
	0x032475A0 LDR W9, [X8 + 0xE0]
	0x032475A4 CBNZ W9, 0x32475B0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1196000
	006 Move X20, 0xEDC000
	007 Move W8, [X21+1116]
	008 Move X20, [X20+696]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xEDB000
	015 Move X0, [X0+3016]
	016 Call 0x1C17CF4
	017 Move X0, 0xEDC000
	018 Move X0, [X0+696]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1116], W8
	022 Move X0, [X20]
	023 Move X21, 0xEDB000
	024 Move W8, [X0+224]
	025 Move X21, [X21+3016]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X20]
	030 Move X8, [X21]
	031 Move X9, [X0+184]
	032 Move W10, [X8+224]
	033 Move X20, [X9+16]
	034 Compare W10, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Move W0, W19
	039 Move X1, X31
	040 Call NormalizationTableUtil.MapIdx, X0
	041 NotImplemented "Instruction LDRSH not yet implemented."
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Move X21, [X31+40]
	046 Return X0

Method: System.Byte GetCombiningClass(System.Int32 c)

Disassembly:
	0x032475A8 MOV X0, X8
	0x032475AC BL 0x1C16DFC
	0x032475B0 AND W0, W25, 0xFFFF
	0x032475B4 BL 0x32465A8
	0x032475B8 AND W8, W0, 0xFF
	0x032475BC CMP W8, W24, UXTB
	0x032475C0 B.HI 0x32475D8
	0x032475C4 LDR W8, [X22 + 0x10]
	0x032475C8 ADD W21, W21, 0x1
	0x032475CC CMP W21, W8
	0x032475D0 B.LT 0x324754C
	0x032475D4 B 0x3247730
	0x032475D8 LDR X0, [X23]
	0x032475DC LDR W25, [X22 + 0x10]
	0x032475E0 BL 0x1C16F10
	0x032475E4 MOV W1, W25
	0x032475E8 MOV X2, X31
	0x032475EC MOV X24, X0
	0x032475F0 BL 0x3231B28
	0x032475F4 STR X24, [X19]
	0x032475F8 CBZ X24, 0x3247748
	0x032475FC LDR W3, [X22 + 0x10]
	0x03247600 MOV X0, X24
	0x03247604 MOV X1, X22
	0x03247608 MOV W2, W31
	0x0324760C MOV X4, X31
	0x03247610 BL 0x323351C
	0x03247614 LDR X0, [X20]
	0x03247618 LDR W8, [X0 + 0xE0]
	0x0324761C CBNZ W8, 0x3247514
	0x03247620 BL 0x1C16DFC
	0x03247624 B 0x3247514
	0x03247628 LDR X0, [X19]
	0x0324762C CBZ X0, 0x3247748
	0x03247630 MOV W1, W21
	0x03247634 MOV X2, X31
	0x03247638 BL 0x3232E88
	0x0324763C LDR X8, [X20]
	0x03247640 MOV W22, W0
	0x03247644 LDR W9, [X8 + 0xE0]
	0x03247648 CBNZ W9, 0x3247654
	0x0324764C MOV X0, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1196000
	006 Move X20, 0xEDC000
	007 Move W8, [X21+1117]
	008 Move X20, [X20+696]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xEDB000
	015 Move X0, [X0+3016]
	016 Call 0x1C17CF4
	017 Move X0, 0xEDC000
	018 Move X0, [X0+696]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1117], W8
	022 Move X0, [X20]
	023 Move X21, 0xEDB000
	024 Move W8, [X0+224]
	025 Move X21, [X21+3016]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X20]
	030 Move X8, [X21]
	031 Move X9, [X0+184]
	032 Move W10, [X8+224]
	033 Move X20, [X9+40]
	034 Compare W10, 0
	035 JumpIfNotEqual {39}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Move X8, [X21]
	039 Move X8, [X8+184]
	040 Move X0, [X8+16]
	041 Compare X0, 0
	042 JumpIfEqual {52}
	043 Move W1, W19
	044 Move X2, X31
	045 Call CodePointIndexer.ToIndex, X0, X1
	046 Move W0, [X20]
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return X0
	052 Call 0x1C17F20

Method: System.Int32 GetPrimaryCompositeFromMapIndex(System.Int32 src)

Disassembly:
	0x03247650 BL 0x1C16DFC
	0x03247654 AND W0, W22, 0xFFFF
	0x03247658 BL 0x32465A8
	0x0324765C ANDS W31, W0, 0xFF
	0x03247660 B.EQ 0x3247714
	0x03247664 MOV W23, W0
	0x03247668 LDR X0, [X19]
	0x0324766C CBZ X0, 0x3247748
	0x03247670 SUB W22, W21, 0x1
	0x03247674 MOV W1, W22
	0x03247678 MOV X2, X31
	0x0324767C BL 0x3232E88
	0x03247680 LDR X8, [X20]
	0x03247684 MOV W24, W0
	0x03247688 LDR W9, [X8 + 0xE0]
	0x0324768C CBNZ W9, 0x3247698
	0x03247690 MOV X0, X8
	0x03247694 BL 0x1C16DFC
	0x03247698 AND W0, W24, 0xFFFF
	0x0324769C BL 0x32465A8
	0x032476A0 AND W8, W0, 0xFF
	0x032476A4 CMP W8, W23, UXTB
	0x032476A8 B.LS 0x3247714
	0x032476AC LDR X0, [X19]
	0x032476B0 CBZ X0, 0x3247748
	0x032476B4 MOV W1, W22
	0x032476B8 MOV X2, X31
	0x032476BC BL 0x3232E88
	0x032476C0 LDR X24, [X19]
	0x032476C4 CBZ X24, 0x3247748
	0x032476C8 MOV W23, W0
	0x032476CC MOV X0, X24
	0x032476D0 MOV W1, W21
	0x032476D4 MOV X2, X31
	0x032476D8 BL 0x3232E88
	0x032476DC MOV W2, W0
	0x032476E0 MOV X0, X24
	0x032476E4 MOV W1, W22
	0x032476E8 MOV X3, X31
	0x032476EC BL 0x3232F10
	0x032476F0 LDR X0, [X19]
	0x032476F4 CBZ X0, 0x3247748

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1196000
	006 Move X20, 0xEDC000
	007 Move W8, [X21+1118]
	008 Move X20, [X20+696]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xEDB000
	015 Move X0, [X0+3016]
	016 Call 0x1C17CF4
	017 Move X0, 0xEDC000
	018 Move X0, [X0+696]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1118], W8
	022 Move X0, [X20]
	023 Move X21, 0xEDB000
	024 Move W8, [X0+224]
	025 Move X21, [X21+3016]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X20]
	030 Move X8, [X21]
	031 Move X9, [X0+184]
	032 Move W10, [X8+224]
	033 Move X20, [X9+32]
	034 Compare W10, 0
	035 JumpIfNotEqual {39}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Move X8, [X21]
	039 Move X8, [X8+184]
	040 Move X0, [X8+24]
	041 Compare X0, 0
	042 JumpIfEqual {52}
	043 Move W1, W19
	044 Move X2, X31
	045 Call CodePointIndexer.ToIndex, X0, X1
	046 NotImplemented "Instruction LDRH not yet implemented."
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return X0
	052 Call 0x1C17F20

Method: System.Int32 GetPrimaryCompositeHelperIndex(System.Int32 cp)

Disassembly:
	0x032476F8 MOV W1, W21
	0x032476FC MOV W2, W23
	0x03247700 MOV X3, X31
	0x03247704 BL 0x3232F10
	0x03247708 CMP W21, 0x2
	0x0324770C CSEL W21, W21, W22, LT
	0x03247710 B 0x3247718
	0x03247714 ADD W21, W21, 0x1
	0x03247718 LDR X0, [X19]
	0x0324771C CBZ X0, 0x3247748
	0x03247720 MOV X1, X31
	0x03247724 BL 0x323260C
	0x03247728 CMP W21, W0
	0x0324772C B.LT 0x3247628
	0x03247730 LDP X20, X19, [X31 + 0x40]
	0x03247734 LDP X22, X21, [X31 + 0x30]
	0x03247738 LDP X24, X23, [X31 + 0x20]
	0x0324773C LDP X26, X25, [X31 + 0x10]
	0x03247740 LDP X30, X27, [X31], #0x50
	0x03247744 RET
	0x03247748 BL 0x1C16F20
	0x0324774C STR X30, [X31 - 0x40]!
	0x03247750 STP X24, X23, [X31 + 0x10]
	0x03247754 STP X22, X21, [X31 + 0x20]
	0x03247758 STP X20, X19, [X31 + 0x30]
	0x0324775C ADRP X22, 0x1195000
	0x03247760 ADRP X24, 0xEDB000
	0x03247764 LDRB W8, [X22 + 0x46B]
	0x03247768 LDR X24, [X24 + 0x2B8]
	0x0324776C MOV W21, W3
	0x03247770 MOV W20, W2
	0x03247774 MOV X19, X1
	0x03247778 MOV W23, W0
	0x0324777C TBNZ X8, 0x0, 0x3247794
	0x03247780 ADRP X0, 0xEDB000
	0x03247784 LDR X0, [X0 + 0x2B8]
	0x03247788 BL 0x1C16CF4
	0x0324778C MOVZ W8, 0x1
	0x03247790 STRB W8, [X22 + 0x46B]
	0x03247794 LDR X0, [X24]
	0x03247798 LDR W8, [X0 + 0xE0]
	0x0324779C CBNZ W8, 0x32477A4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1196000
	006 Move X20, 0xEDC000
	007 Move W8, [X21+1119]
	008 Move X20, [X20+696]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xEDB000
	015 Move X0, [X0+3016]
	016 Call 0x1C17CF4
	017 Move X0, 0xEDC000
	018 Move X0, [X0+696]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1119], W8
	022 Move X0, [X20]
	023 Move X21, 0xEDB000
	024 Move W8, [X0+224]
	025 Move X21, [X21+3016]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X20]
	030 Move X8, [X21]
	031 Move X9, [X0+184]
	032 Move W10, [X8+224]
	033 Move X20, [X9+24]
	034 Compare W10, 0
	035 JumpIfNotEqual {39}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Move X8, [X21]
	039 Move X8, [X8+184]
	040 Move X0, [X8+32]
	041 Compare X0, 0
	042 JumpIfEqual {52}
	043 Move W1, W19
	044 Move X2, X31
	045 Call CodePointIndexer.ToIndex, X0, X1
	046 NotImplemented "Instruction LDRSH not yet implemented."
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return X0
	052 Call 0x1C17F20

Method: System.String Compose(System.String source, System.Int32 checkType)

Disassembly:
	0x032477A0 BL 0x1C16DFC
	0x032477A4 MOV W0, W23
	0x032477A8 MOV X1, X19
	0x032477AC MOV W2, W20
	0x032477B0 BL 0x3247904
	0x032477B4 CMP W0, W20
	0x032477B8 B.GT 0x32478E8
	0x032477BC LDR X0, [X24]
	0x032477C0 LDR W8, [X0 + 0xE0]
	0x032477C4 CBNZ W8, 0x32477CC
	0x032477C8 BL 0x1C16DFC
	0x032477CC MOV W0, W23
	0x032477D0 BL 0x3246514
	0x032477D4 CBZ W0, 0x3247804
	0x032477D8 MOV W22, W0
	0x032477DC LDR X0, [X24]
	0x032477E0 LDR W8, [X0 + 0xE0]
	0x032477E4 CBNZ W8, 0x32477F0
	0x032477E8 BL 0x1C16DFC
	0x032477EC LDR X0, [X24]
	0x032477F0 LDR X8, [X0 + 0xB8]
	0x032477F4 LDR X8, [X8 + 0x8]
	0x032477F8 LDR W8, [X8, W22, SXTW]
	0x032477FC CMP W8, W23
	0x03247800 B.NE 0x3247824
	0x03247804 CBZ X19, 0x32478FC
	0x03247808 LDR W8, [X19 + 0x18]
	0x0324780C CMP W8, W20
	0x03247810 B.LS 0x3247900
	0x03247814 ADD X8, X19, W20, 0x2, SXTW
	0x03247818 ADD W0, W20, 0x1
	0x0324781C STR W23, [X8 + 0x20]
	0x03247820 B 0x32478E8
	0x03247824 LDR W8, [X0 + 0xE0]
	0x03247828 CBNZ W8, 0x3247834
	0x0324782C BL 0x1C16DFC
	0x03247830 LDR X0, [X24]
	0x03247834 LDR X8, [X0 + 0xB8]
	0x03247838 LDR X8, [X8 + 0x8]
	0x0324783C ADD X8, X8, W22, 0x2, SXTW
	0x03247840 LDR W9, [X8]
	0x03247844 CBZ W9, 0x32478E4
	0x03247848 LDR W9, [X0 + 0xE0]
	0x0324784C CBNZ W9, 0x3247868
	0x03247850 SBFM X23, X22, 0x3E, 0x1F
	0x03247854 BL 0x1C16DFC
	0x03247858 LDR X0, [X24]
	0x0324785C LDR X8, [X0 + 0xB8]
	0x03247860 LDR X8, [X8 + 0x8]
	0x03247864 ADD X8, X23, X8
	0x03247868 LDR W23, [X8]
	0x0324786C CMP W23, 0x10000
	0x03247870 B.GE 0x3247894
	0x03247874 LDR W8, [X0 + 0xE0]
	0x03247878 CBNZ W8, 0x3247880

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1196000
	007 Move X22, 0xEDC000
	008 Move W8, [X21+1120]
	009 Move X22, [X22+696]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEDC000
	017 Move X0, [X0+696]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1120], W8
	021 Move X0, [X22]
	022 Move [X31+8], X31
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move W9, 3
	025 Move W8, [X0+224]
	026 NotImplemented "Instruction CSINC not yet implemented."
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Add X1, X31, 8
	031 Move X0, X20
	032 Move W2, W21
	033 Call Normalization.Decompose, X0, X1, X2
	034 Move X0, [X22]
	035 Move X21, [X31+8]
	036 Move W8, [X0+224]
	037 Compare X21, 0
	038 JumpIfEqual {46}
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X21
	043 Move W1, W31
	044 Move W2, W19
	045 Call Normalization.Combine, X0, X1, X2
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X20
	050 Move W2, W19
	051 Call Normalization.Combine, X0, X1, X2
	052 Move X21, X0
	053 Compare X0, 0
	054 JumpIfEqual {61}
	055 Move X8, [X21]
	056 Move X0, X21
	057 Move X9, [X8+360]
	058 Move X1, [X8+368]
	059 NotImplemented "Instruction BLR not yet implemented."
	060 Move X20, X0
	061 Move X0, X20
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X22, [X31+16]
	065 Move X21, [X31+24]
	066 Move X30, [X31+48]
	067 Return X0

Method: System.Text.StringBuilder Combine(System.String source, System.Int32 start, System.Int32 checkType)

Disassembly:
	0x032479AC B.CS 0x32479E8
	0x032479B0 MOVZ W11, 0x11A7
	0x032479B4 ADD W2, W2, 0x3
	0x032479B8 ADD W10, W10, W11
	0x032479BC ADD X9, X1, W9, 0x2, SXTW
	0x032479C0 STR W10, [X9 + 0x20]
	0x032479C4 B 0x32479CC
	0x032479C8 MOV W2, W9
	0x032479CC CMP W2, W8
	0x032479D0 B.CS 0x32479E8
	0x032479D4 ADD X8, X1, W2, 0x2, SXTW
	0x032479D8 STR W31, [X8 + 0x20]
	0x032479DC MOV W0, W2
	0x032479E0 LDR X30, [X31], #0x10
	0x032479E4 RET
	0x032479E8 BL 0x1C16F28
	0x032479EC BL 0x1C16F20
	0x032479F0 STP X30, X21, [X31 - 0x20]!
	0x032479F4 STP X20, X19, [X31 + 0x10]
	0x032479F8 ADRP X21, 0x1195000
	0x032479FC LDRB W8, [X21 + 0x46C]
	0x03247A00 MOV W20, W1
	0x03247A04 MOV X19, X0
	0x03247A08 TBNZ X8, 0x0, 0x3247A20
	0x03247A0C ADRP X0, 0xEDB000
	0x03247A10 LDR X0, [X0 + 0x2B8]
	0x03247A14 BL 0x1C16CF4
	0x03247A18 MOVZ W8, 0x1
	0x03247A1C STRB W8, [X21 + 0x46C]
	0x03247A20 ADRP X8, 0xEDB000
	0x03247A24 LDR X8, [X8 + 0x2B8]
	0x03247A28 CMP W20, 0x2
	0x03247A2C B.EQ 0x3247A58
	0x03247A30 CMP W20, 0x5
	0x03247A34 B.EQ 0x3247A70
	0x03247A38 CMP W20, 0x6
	0x03247A3C B.NE 0x3247A88
	0x03247A40 LDR X0, [X8]
	0x03247A44 LDR W8, [X0 + 0xE0]
	0x03247A48 CBNZ W8, 0x3247A50
	0x03247A4C BL 0x1C16DFC
	0x03247A50 MOVZ W1, 0x3
	0x03247A54 B 0x3247A9C
	0x03247A58 LDR X0, [X8]
	0x03247A5C LDR W8, [X0 + 0xE0]
	0x03247A60 CBNZ W8, 0x3247A68
	0x03247A64 BL 0x1C16DFC
	0x03247A68 MOVZ W1, 0x1
	0x03247A6C B 0x3247A9C
	0x03247A70 LDR X0, [X8]
	0x03247A74 LDR W8, [X0 + 0xE0]
	0x03247A78 CBNZ W8, 0x3247A80
	0x03247A7C BL 0x1C16DFC
	0x03247A80 MOVZ W1, 0x2
	0x03247A84 B 0x3247A9C
	0x03247A88 LDR X0, [X8]
	0x03247A8C LDR W8, [X0 + 0xE0]
	0x03247A90 CBNZ W8, 0x3247A98
	0x03247A94 BL 0x1C16DFC
	0x03247A98 MOV W1, W31
	0x03247A9C MOV X0, X19
	0x03247AA0 LDP X20, X19, [X31 + 0x10]
	0x03247AA4 LDP X30, X21, [X31], #0x20
	0x03247AA8 B 0x3247AAC
	0x03247AAC STP X30, X21, [X31 - 0x20]!
	0x03247AB0 STP X20, X19, [X31 + 0x10]
	0x03247AB4 ADRP X21, 0x1195000
	0x03247AB8 LDRB W8, [X21 + 0x46D]
	0x03247ABC MOV W19, W1
	0x03247AC0 MOV X20, X0
	0x03247AC4 TBNZ X8, 0x0, 0x3247ADC
	0x03247AC8 ADRP X0, 0xEDB000
	0x03247ACC LDR X0, [X0 + 0x2B8]
	0x03247AD0 BL 0x1C16CF4
	0x03247AD4 MOVZ W8, 0x1
	0x03247AD8 STRB W8, [X21 + 0x46D]
	0x03247ADC CMP W19, 0x3
	0x03247AE0 B.EQ 0x3247AF4
	0x03247AE4 CMP W19, 0x2

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x1196000
	009 Move W8, [X21+1121]
	010 Move W19, W2
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xEDC000
	017 Move X0, [X0+696]
	018 Call 0x1C17CF4
	019 Move X0, 0xEAD000
	020 Move X0, [X0+2288]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1121], W8
	024 Compare X20, 0
	025 JumpIfEqual {92}
	026 Move W8, [X20+16]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X23, 0xEDC000
	029 Move X23, [X23+696]
	030 Move W21, W31
	031 Move X0, X20
	032 Move W1, W21
	033 Move X2, X31
	034 Call String.get_Chars, X0, X1
	035 Move X8, [X23]
	036 Move W22, W0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move W0, W22
	043 Move W1, W19
	044 Call Normalization.QuickCheck, X0, X1
	045 Compare W0, 0
	046 JumpIfNotEqual {51}
	047 Move W8, [X20+16]
	048 Add W21, W21, 1
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X22, X31
	051 Move X8, 0xEAD000
	052 NotImplemented "Instruction LDRSW not yet implemented."
	053 Move X8, [X8+2288]
	054 Move X0, [X8]
	055 Call 0x1C17F10
	056 Move W8, 0x6667
	057 NotImplemented "Instruction MOVK not yet implemented."
	058 Multiply X8, X24, X8
	059 Move X9, X8
	060 ShiftRight X9, 63
	061 And X9, X9, 0x7FFFFFFF
	062 NotImplemented "Instruction SBFM not yet implemented."
	063 Add W8, W8, W9
	064 Add W1, W8, W24
	065 Move X2, X31
	066 Move X22, X0
	067 Call StringBuilder..ctor, X0, X1
	068 Compare X22, 0
	069 JumpIfEqual {92}
	070 Move X0, X22
	071 Move X1, X20
	072 Move X2, X31
	073 Call StringBuilder.Append, X0, X1
	074 Move X0, [X23]
	075 Move W8, [X0+224]
	076 Compare W8, 0
	077 JumpIfNotEqual {79}
	078 Call 0x1C17DFC
	079 Move X0, X22
	080 Move W1, W21
	081 Move W2, W19
	082 Call Normalization.Combine, X0, X1, X2
	083 Move X0, X22
	084 Move X20, [X31+48]
	085 Move X19, [X31+56]
	086 Move X22, [X31+32]
	087 Move X21, [X31+40]
	088 Move X24, [X31+16]
	089 Move X23, [X31+24]
	090 Move X30, [X31+64]
	091 Return X0
	092 Call 0x1C17F20

Method: System.Void Combine(System.Text.StringBuilder sb, System.Int32 i, System.Int32 checkType)

Disassembly:
	0x03247AE8 B.EQ 0x3247B20
	0x03247AEC CMP W19, 0x1
	0x03247AF0 B.NE 0x3247B20
	0x03247AF4 ADRP X8, 0xEDB000
	0x03247AF8 LDR X8, [X8 + 0x2B8]
	0x03247AFC LDR X0, [X8]
	0x03247B00 LDR W8, [X0 + 0xE0]
	0x03247B04 CBNZ W8, 0x3247B0C
	0x03247B08 BL 0x1C16DFC
	0x03247B0C MOV X0, X20
	0x03247B10 MOV W1, W19
	0x03247B14 LDP X20, X19, [X31 + 0x10]
	0x03247B18 LDP X30, X21, [X31], #0x20
	0x03247B1C B 0x3247278
	0x03247B20 ADRP X8, 0xEDB000
	0x03247B24 LDR X8, [X8 + 0x2B8]
	0x03247B28 LDR X0, [X8]
	0x03247B2C LDR W8, [X0 + 0xE0]
	0x03247B30 CBNZ W8, 0x3247B38
	0x03247B34 BL 0x1C16DFC
	0x03247B38 MOV X0, X20
	0x03247B3C MOV W1, W19
	0x03247B40 LDP X20, X19, [X31 + 0x10]
	0x03247B44 LDP X30, X21, [X31], #0x20
	0x03247B48 B 0x32467A0
	0x03247B4C B 0x1CB7510
	0x03247B50 SUB X31, X31, 0x60
	0x03247B54 STR X30, [X31 + 0x30]
	0x03247B58 STP X22, X21, [X31 + 0x40]
	0x03247B5C STP X20, X19, [X31 + 0x50]
	0x03247B60 ADRP X20, 0x1195000
	0x03247B64 ADRP X19, 0xEB2000
	0x03247B68 ADRP X22, 0xEDB000
	0x03247B6C LDRB W8, [X20 + 0x46E]
	0x03247B70 LDR X19, [X19 + 0xCC0]
	0x03247B74 LDR X22, [X22 + 0x2B8]
	0x03247B78 TBNZ X8, 0x0, 0x3247B9C
	0x03247B7C ADRP X0, 0xEDB000
	0x03247B80 LDR X0, [X0 + 0x2B8]
	0x03247B84 BL 0x1C16CF4
	0x03247B88 ADRP X0, 0xEB2000
	0x03247B8C LDR X0, [X0 + 0xCC0]
	0x03247B90 BL 0x1C16CF4
	0x03247B94 MOVZ W8, 0x1
	0x03247B98 STRB W8, [X20 + 0x46E]
	0x03247B9C LDR X0, [X19]
	0x03247BA0 STR X31, [X31 + 0x38]
	0x03247BA4 STP X31, X31, [X31 + 0x20]
	0x03247BA8 STP X31, X31, [X31 + 0x10]
	0x03247BAC STR X31, [X31 + 0x8]
	0x03247BB0 BL 0x1C16F10
	0x03247BB4 MOV X1, X31
	0x03247BB8 MOV X19, X0
	0x03247BBC BL 0x33BDD8C
	0x03247BC0 LDR X8, [X22]
	0x03247BC4 LDR X8, [X8 + 0xB8]
	0x03247BC8 STR X19, [X8 + 0x30]
	0x03247BCC STRB W31, [X31 + 0x4]
	0x03247BD0 ADD X1, X31, 0x4
	0x03247BD4 MOV X0, X19
	0x03247BD8 MOV X2, X31
	0x03247BDC BL 0x33DE64C
	0x03247BE0 ADD X0, X31, 0x38
	0x03247BE4 ADD X1, X31, 0x28
	0x03247BE8 ADD X2, X31, 0x20
	0x03247BEC ADD X3, X31, 0x18
	0x03247BF0 ADD X4, X31, 0x10
	0x03247BF4 ADD X5, X31, 0x8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x1196000
	008 Move X23, 0xEDC000
	009 Move W8, [X22+1122]
	010 Move X23, [X23+696]
	011 Move W19, W2
	012 Move W21, W1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xEDC000
	019 Move X0, [X0+696]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+1122], W8
	023 Move X0, [X23]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 NotImplemented "Instruction CSET not yet implemented."
	026 Subtract W22, W21, W9
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Move W2, W22
	034 Call Normalization.CombineHangul, X0, X1, X2
	035 Compare X20, 0
	036 JumpIfEqual {79}
	037 Move X0, X20
	038 Move X1, X31
	039 Call StringBuilder.get_Length, X0
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X0, X20
	042 Move W1, W21
	043 Move X2, X31
	044 Call StringBuilder.get_Chars, X0, X1
	045 Move X8, [X23]
	046 Move W22, W0
	047 Move W9, [X8+224]
	048 Compare W9, 0
	049 JumpIfNotEqual {52}
	050 Move X0, X8
	051 Call 0x1C17DFC
	052 Move W0, W22
	053 Move W1, W19
	054 Call Normalization.QuickCheck, X0, X1
	055 Compare W0, 0
	056 JumpIfEqual {67}
	057 Move X0, [X23]
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X20
	063 Move X1, X31
	064 Move W2, W21
	065 Call Normalization.TryComposeWithPreviousStarter, X0, X1, X2
	066 Move W21, W0
	067 Add W21, W21, 1
	068 Move X0, X20
	069 Move X1, X31
	070 Call StringBuilder.get_Length, X0
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X20, [X31+32]
	073 Move X19, [X31+40]
	074 Move X22, [X31+16]
	075 Move X21, [X31+24]
	076 Move X30, [X31+48]
	077 Move X23, [X31+56]
	078 Return 
	079 Call 0x1C17F20

Method: System.Int32 CombineHangul(System.Text.StringBuilder sb, System.String s, System.Int32 current)

Disassembly:
	0x03247D2C CBNZ X20, 0x3247D38
	0x03247D30 MOV X0, X21
	0x03247D34 BL 0x1D2C690
	0x03247D38 MOV X0, X20
	0x03247D3C BL 0x1C16F18
	0x03247D40 BL 0x1990590
	0x03247D44 STR X30, [X31 - 0x30]!
	0x03247D48 STP X22, X21, [X31 + 0x10]
	0x03247D4C STP X20, X19, [X31 + 0x20]
	0x03247D50 ADRP X19, 0x1195000
	0x03247D54 ADRP X22, 0xEDB000
	0x03247D58 LDRB W8, [X19 + 0x46F]
	0x03247D5C LDR X22, [X22 + 0x9D8]
	0x03247D60 TBNZ X8, 0x0, 0x3247D84
	0x03247D64 ADRP X0, 0xEDB000
	0x03247D68 LDR X0, [X0 + 0x9D8]
	0x03247D6C BL 0x1C16CF4
	0x03247D70 ADRP X0, 0xEDB000
	0x03247D74 LDR X0, [X0 + 0x828]
	0x03247D78 BL 0x1C16CF4
	0x03247D7C MOVZ W8, 0x1
	0x03247D80 STRB W8, [X19 + 0x46F]
	0x03247D84 LDR X0, [X22]
	0x03247D88 STRB W31, [X31 + 0xC]
	0x03247D8C LDR W8, [X0 + 0xE0]
	0x03247D90 CBNZ W8, 0x3247D9C
	0x03247D94 BL 0x1C16DFC
	0x03247D98 LDR X0, [X22]
	0x03247D9C LDR X8, [X0 + 0xB8]
	0x03247DA0 LDR X19, [X8]
	0x03247DA4 BL 0x1C16D44
	0x03247DA8 CBNZ X19, 0x3247E84
	0x03247DAC LDR X0, [X22]
	0x03247DB0 LDR W8, [X0 + 0xE0]
	0x03247DB4 CBNZ W8, 0x3247DC0
	0x03247DB8 BL 0x1C16DFC
	0x03247DBC LDR X0, [X22]
	0x03247DC0 LDR X8, [X0 + 0xB8]
	0x03247DC4 LDR X19, [X8 + 0x8]
	0x03247DC8 STRB W31, [X31 + 0xC]
	0x03247DCC ADD X1, X31, 0xC
	0x03247DD0 MOV X0, X19
	0x03247DD4 MOV X2, X31
	0x03247DD8 BL 0x33DE64C
	0x03247DDC LDR X0, [X22]
	0x03247DE0 LDR W8, [X0 + 0xE0]
	0x03247DE4 CBNZ W8, 0x3247DF0
	0x03247DE8 BL 0x1C16DFC
	0x03247DEC LDR X0, [X22]
	0x03247DF0 LDR X8, [X0 + 0xB8]
	0x03247DF4 LDR X20, [X8]
	0x03247DF8 BL 0x1C16D44
	0x03247DFC CBZ X20, 0x3247E08
	0x03247E00 MOV X20, X31
	0x03247E04 B 0x3247E6C
	0x03247E08 ADRP X8, 0xEDB000
	0x03247E0C LDR X8, [X8 + 0x828]
	0x03247E10 LDR X0, [X8]
	0x03247E14 BL 0x1C16F10
	0x03247E18 MOV X20, X0
	0x03247E1C MOV W1, W31
	0x03247E20 MOV W2, W31
	0x03247E24 MOV X3, X31
	0x03247E28 BL 0x323A334
	0x03247E2C LDR X0, [X22]
	0x03247E30 LDR W8, [X0 + 0xE0]
	0x03247E34 CBNZ W8, 0x3247E3C
	0x03247E38 BL 0x1C16DFC
	0x03247E3C BL 0x1C16D44
	0x03247E40 LDR X8, [X22]
	0x03247E44 LDR X8, [X8 + 0xB8]
	0x03247E48 STR X20, [X8]
	0x03247E4C LDR X8, [X22]
	0x03247E50 LDR X8, [X8 + 0xB8]
	0x03247E54 LDR X21, [X8]
	0x03247E58 BL 0x1C16D44
	0x03247E5C CBZ X21, 0x3247EC0
	0x03247E60 MOVZ W8, 0x1
	0x03247E64 MOV X20, X31
	0x03247E68 STRB W8, [X21 + 0x21]
	0x03247E6C LDRB W8, [X31 + 0xC]
	0x03247E70 CBZ W8, 0x3247E80
	0x03247E74 MOV X0, X19
	0x03247E78 MOV X1, X31
	0x03247E7C BL 0x33E14E4
	0x03247E80 CBNZ X20, 0x3247EB8
	0x03247E84 LDR X0, [X22]
	0x03247E88 LDR W8, [X0 + 0xE0]
	0x03247E8C CBNZ W8, 0x3247E98
	0x03247E90 BL 0x1C16DFC
	0x03247E94 LDR X0, [X22]
	0x03247E98 LDR X8, [X0 + 0xB8]
	0x03247E9C LDR X19, [X8]
	0x03247EA0 BL 0x1C16D44
	0x03247EA4 MOV X0, X19
	0x03247EA8 LDP X20, X19, [X31 + 0x20]
	0x03247EAC LDP X22, X21, [X31 + 0x10]
	0x03247EB0 LDR X30, [X31], #0x30
	0x03247EB4 RET
	0x03247EB8 MOV X0, X20
	0x03247EBC BL 0x1C16F18
	0x03247EC0 BL 0x1C16F20
	0x03247EC4 B 0x3247ED0
	0x03247EC8 B 0x3247ED0
	0x03247ECC B 0x3247ED0
	0x03247ED0 MOV X21, X0
	0x03247ED4 CMP W1, 0x1
	0x03247ED8 B.NE 0x3247EF0
	0x03247EDC MOV X0, X21
	0x03247EE0 BL 0x3EB1AD0
	0x03247EE4 LDR X20, [X0]
	0x03247EE8 BL 0x3EB1AE0
	0x03247EEC B 0x3247E6C

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X22, 0x1196000
	014 Move W8, [X22+1123]
	015 Move W20, W2
	016 Move X19, X1
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xEDC000
	023 Move X0, [X0+696]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+1123], W8
	027 Compare X21, 0
	028 JumpIfEqual {33}
	029 Move X0, X21
	030 Move X1, X31
	031 Call StringBuilder.get_Length, X0
	032 Move W22, W0
	033 Compare X19, 0
	034 JumpIfEqual {141}
	035 Move W22, [X19+16]
	036 Move X26, 0xEDC000
	037 Move X26, [X26+696]
	038 Move X0, [X26]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X21
	044 Move X1, X19
	045 Move W2, W20
	046 Call Normalization.Fetch, X0, X1, X2
	047 Add W23, W20, 1
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move W25, W0
	050 Move TEMP, 0x10FF
	051 Not TEMP
	052 Move W27, TEMP
	053 Move TEMP, 0xABFF
	054 Not TEMP
	055 Move W28, TEMP
	056 Move W29, 28
	057 Move X0, [X26]
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X21
	063 Move X1, X19
	064 Move W2, W23
	065 Call Normalization.Fetch, X0, X1, X2
	066 Add W8, W25, W27
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move W24, W0
	069 Move TEMP, 0x1160
	070 Not TEMP
	071 Move W9, TEMP
	072 Add W9, W24, W9
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Add W8, W25, W28
	075 Move W9, W8
	076 ShiftRight W9, 2
	077 And W9, W9, 0x7FFFFFFF
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move W9, 0x2493
	080 NotImplemented "Instruction MOVK not yet implemented."
	081 NotImplemented "Instruction SMADDL not yet implemented."
	082 Move X9, X9
	083 ShiftRight X9, 32
	084 And X9, X9, 0x7FFFFFFF
	085 Add W9, W9, W8
	086 NotImplemented "Instruction SBFM not yet implemented."
	087 Add W9, W10, W9
	088 NotImplemented "Instruction MSUB not yet implemented."
	089 Compare W8, 0
	090 JumpIfNotEqual {103}
	091 Move TEMP, 0x11A7
	092 Not TEMP
	093 Move W8, TEMP
	094 Add W8, W24, W8
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Compare X21, 0
	097 JumpIfEqual {124}
	098 Add W8, W25, W24
	099 Move TEMP, 0x11A6
	100 Not TEMP
	101 Move W9, TEMP
	102 Add W24, W8, W9
	103 Move W20, W23
	104 Compare X21, 0
	105 JumpIfEqual {124}
	106 Move W10, 21
	107 NotImplemented "Instruction MADD not yet implemented."
	108 Move W9, 0xAC00
	109 NotImplemented "Instruction MADD not yet implemented."
	110 Move X0, X21
	111 Move W1, W20
	112 Move W2, W24
	113 Move X3, X31
	114 Call StringBuilder.set_Chars, X0, X1, X2
	115 Move W2, 1
	116 Move X0, X21
	117 Move W1, W23
	118 Move X3, X31
	119 Call StringBuilder.Remove, X0, X1, X2
	120 Subtract W22, W22, 1
	121 Add W23, W20, 1
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move W25, W24
	124 Move TEMP, 0
	125 Not TEMP
	126 Move W22, TEMP
	127 Move W0, W22
	128 Move X20, [X31+80]
	129 Move X19, [X31+88]
	130 Move X22, [X31+64]
	131 Move X21, [X31+72]
	132 Move X24, [X31+48]
	133 Move X23, [X31+56]
	134 Move X26, [X31+32]
	135 Move X25, [X31+40]
	136 Move X28, [X31+16]
	137 Move X27, [X31+24]
	138 Move X29, [X31+96]
	139 Move X30, [X31+104]
	140 Return X0
	141 Call 0x1C17F20

Method: System.Int32 Fetch(System.Text.StringBuilder sb, System.String s, System.Int32 i)

Disassembly:
	0x03248124 BL 0x3222A1C
	0x03248128 CBZ X23, 0x324820C
	0x0324812C LDR W9, [X23 + 0x18]
	0x03248130 ADD W8, W25, W24
	0x03248134 SUB W8, W8, 0x1
	0x03248138 CMP W8, W9
	0x0324813C B.CS 0x3248210
	0x03248140 UBFM W9, W0, 0x8, 0x1F
	0x03248144 ADD X8, X23, W8, SXTW
	0x03248148 STRB W9, [X8 + 0x20]
	0x0324814C LDR X23, [X21 + 0x10]
	0x03248150 LDR W25, [X19]
	0x03248154 MOV X0, X20
	0x03248158 MOV W1, W22
	0x0324815C MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {7}
	004 Move W1, W2
	005 Move X2, X31
	006 Call StringBuilder.get_Chars, X0, X1
	007 Compare X1, 0
	008 JumpIfEqual {16}
	009 Move X0, X1
	010 Move W1, W2
	011 Move X2, X31
	012 Call String.get_Chars, X0, X1
	013 And W0, W0, 0xFFFF
	014 Move X30, [X31+16]
	015 Return X0
	016 Call 0x1C17F20

Method: System.Int32 TryComposeWithPreviousStarter(System.Text.StringBuilder sb, System.String s, System.Int32 current)

Disassembly:
	0x03247EF0 MOV X20, X31
	0x03247EF4 B 0x3247EFC
	0x03247EF8 MOV X21, X0
	0x03247EFC LDRB W8, [X31 + 0xC]
	0x03247F00 CBZ W8, 0x3247F10
	0x03247F04 MOV X0, X19
	0x03247F08 MOV X1, X31
	0x03247F0C BL 0x33E14E4
	0x03247F10 CBNZ X20, 0x3247F1C
	0x03247F14 MOV X0, X21
	0x03247F18 BL 0x1D2C690
	0x03247F1C MOV X0, X20
	0x03247F20 BL 0x1C16F18
	0x03247F24 BL 0x1990590
	0x03247F28 B 0x1CB7280
	0x03247F2C STP X30, X21, [X31 - 0x20]!
	0x03247F30 STP X20, X19, [X31 + 0x10]
	0x03247F34 ADRP X19, 0x1195000
	0x03247F38 ADRP X21, 0xEB2000
	0x03247F3C ADRP X20, 0xEDB000
	0x03247F40 LDRB W8, [X19 + 0x472]
	0x03247F44 LDR X21, [X21 + 0xCC0]
	0x03247F48 LDR X20, [X20 + 0x9D8]
	0x03247F4C TBNZ X8, 0x0, 0x3247F70
	0x03247F50 ADRP X0, 0xEDB000
	0x03247F54 LDR X0, [X0 + 0x9D8]
	0x03247F58 BL 0x1C16CF4
	0x03247F5C ADRP X0, 0xEB2000
	0x03247F60 LDR X0, [X0 + 0xCC0]
	0x03247F64 BL 0x1C16CF4
	0x03247F68 MOVZ W8, 0x1
	0x03247F6C STRB W8, [X19 + 0x472]
	0x03247F70 LDR X0, [X21]
	0x03247F74 BL 0x1C16F10
	0x03247F78 MOV X1, X31
	0x03247F7C MOV X19, X0
	0x03247F80 BL 0x33BDD8C
	0x03247F84 LDR X8, [X20]
	0x03247F88 LDR X8, [X8 + 0xB8]
	0x03247F8C STR X19, [X8 + 0x8]
	0x03247F90 LDP X20, X19, [X31 + 0x10]
	0x03247F94 LDP X30, X21, [X31], #0x20
	0x03247F98 RET
	0x03247F9C MOV X1, X31
	0x03247FA0 B 0x3393E38
	0x03247FA4 MOV X1, X31
	0x03247FA8 B 0x3393E38
	0x03247FAC MOV X1, X31
	0x03247FB0 B 0x3393E38
	0x03247FB4 MOV X4, X31
	0x03247FB8 B 0x338CA74
	0x03247FBC STR X30, [X31 - 0x30]!
	0x03247FC0 STP X22, X21, [X31 + 0x10]
	0x03247FC4 STP X20, X19, [X31 + 0x20]
	0x03247FC8 ADRP X22, 0x1195000
	0x03247FCC ADRP X21, 0xEAC000
	0x03247FD0 LDRB W8, [X22 + 0x473]
	0x03247FD4 LDR X21, [X21 + 0x618]
	0x03247FD8 MOV W20, W1
	0x03247FDC MOV X19, X0
	0x03247FE0 TBNZ X8, 0x0, 0x3247FF8
	0x03247FE4 ADRP X0, 0xEAC000
	0x03247FE8 LDR X0, [X0 + 0x618]
	0x03247FEC BL 0x1C16CF4
	0x03247FF0 MOVZ W8, 0x1
	0x03247FF4 STRB W8, [X22 + 0x473]
	0x03247FF8 MOV X0, X19
	0x03247FFC MOV X1, X31
	0x03248000 BL 0x33BDD8C
	0x03248004 LDR X0, [X21]
	0x03248008 MOV W1, W20
	0x0324800C BL 0x1C16D6C
	0x03248010 STR X0, [X19 + 0x10]
	0x03248014 LDP X20, X19, [X31 + 0x20]
	0x03248018 LDP X22, X21, [X31 + 0x10]
	0x0324801C LDR X30, [X31], #0x30
	0x03248020 RET
	0x03248024 STP X30, X21, [X31 - 0x20]!
	0x03248028 STP X20, X19, [X31 + 0x10]
	0x0324802C ADRP X21, 0x1194000
	0x03248030 LDRB W8, [X21 + 0x474]
	0x03248034 MOV W20, W1
	0x03248038 MOV X19, X0
	0x0324803C TBNZ X8, 0x0, 0x3248054
	0x03248040 ADRP X0, 0xEAB000
	0x03248044 LDR X0, [X0 + 0x618]
	0x03248048 BL 0x1C16CF4
	0x0324804C MOVZ W8, 0x1
	0x03248050 STRB W8, [X21 + 0x474]
	0x03248054 LDR X8, [X19 + 0x10]
	0x03248058 CBZ X8, 0x32480C4
	0x0324805C LDR W8, [X8 + 0x18]
	0x03248060 CMP W8, W20
	0x03248064 B.GE 0x32480B8
	0x03248068 ADRP X8, 0xEAB000
	0x0324806C LDR X8, [X8 + 0x618]
	0x03248070 ADD W9, W20, 0x1F
	0x03248074 CMP W20, 0x0
	0x03248078 LDR X0, [X8]
	0x0324807C CSEL W8, W9, W20, LT
	0x03248080 AND W8, W8, 0xFFFFFFE0
	0x03248084 ADD W1, W8, 0x20
	0x03248088 BL 0x1C16D6C
	0x0324808C LDR X8, [X19 + 0x10]
	0x03248090 CBZ X8, 0x32480C4
	0x03248094 LDR W4, [X8 + 0x18]
	0x03248098 MOV X20, X0
	0x0324809C MOV X0, X8
	0x032480A0 MOV W1, W31
	0x032480A4 MOV X2, X20
	0x032480A8 MOV W3, W31
	0x032480AC MOV X5, X31
	0x032480B0 BL 0x339FCE8
	0x032480B4 STR X20, [X19 + 0x10]
	0x032480B8 LDP X20, X19, [X31 + 0x10]
	0x032480BC LDP X30, X21, [X31], #0x20
	0x032480C0 RET
	0x032480C4 BL 0x1C16F20
	0x032480C8 STP X30, X25, [X31 - 0x40]!
	0x032480CC STP X24, X23, [X31 + 0x10]
	0x032480D0 STP X22, X21, [X31 + 0x20]
	0x032480D4 STP X20, X19, [X31 + 0x30]
	0x032480D8 CBZ X1, 0x324820C
	0x032480DC LDR W8, [X2]
	0x032480E0 LDR W9, [X1 + 0x10]
	0x032480E4 MOV X20, X1
	0x032480E8 MOV X19, X2
	0x032480EC MOV X21, X0
	0x032480F0 ADD W8, W8, W9, 0x1, LSL
	0x032480F4 ADD W1, W8, 0x2
	0x032480F8 BL 0x3248024
	0x032480FC LDR W8, [X20 + 0x10]
	0x03248100 LDR X23, [X21 + 0x10]
	0x03248104 LDR W25, [X19]
	0x03248108 CMP W8, 0x1
	0x0324810C B.LT 0x324819C
	0x03248110 MOV W22, W31
	0x03248114 MOVZ W24, 0x1
	0x03248118 MOV X0, X20
	0x0324811C MOV W1, W22
	0x03248120 MOV X2, X31

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X22, 0x1196000
	015 Move X29, 0xEDC000
	016 Move W8, [X22+1124]
	017 Move X29, [X29+696]
	018 Move W19, W2
	019 Move X21, X1
	020 Move X20, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0xEDC000
	026 Move X0, [X0+696]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X22+1124], W8
	030 Move X0, [X29]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X20
	036 Move X1, X21
	037 Move W2, W19
	038 Subtract W22, W19, 1
	039 Call Normalization.Fetch, X0, X1, X2
	040 Call Normalization.GetCombiningClass, X0
	041 And W31, W0, 255
	042 Move TEMP, X22
	043 And TEMP, TEMP, -2147483648
	044 Compare TEMP, -2147483648
	045 JumpIfEqual {95}
	046 Move W22, W19
	047 Move X0, [X29]
	048 Subtract W22, W22, 1
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Move X0, X20
	054 Move X1, X21
	055 Move W2, W22
	056 Call Normalization.Fetch, X0, X1, X2
	057 Call Normalization.GetCombiningClass, X0
	058 And W31, W0, 255
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move TEMP, X22
	061 And TEMP, TEMP, -2147483648
	062 Compare TEMP, -2147483648
	063 JumpIfEqual {95}
	064 Move X0, [X29]
	065 Move W8, [X0+224]
	066 Compare W8, 0
	067 JumpIfNotEqual {69}
	068 Call 0x1C17DFC
	069 Move X0, X20
	070 Move X1, X21
	071 Move W2, W22
	072 Call Normalization.Fetch, X0, X1, X2
	073 Call Normalization.GetCombiningClass, X0
	074 And W31, W0, 255
	075 Move X0, [X29]
	076 Move W8, [X0+224]
	077 Compare W8, 0
	078 JumpIfNotEqual {80}
	079 Call 0x1C17DFC
	080 Move X0, X20
	081 Move X1, X21
	082 Move W2, W22
	083 Call Normalization.Fetch, X0, X1, X2
	084 Move [X31+12], W0
	085 Call Normalization.GetPrimaryCompositeHelperIndex, X0
	086 Compare W0, 0
	087 JumpIfEqual {95}
	088 Move W24, W0
	089 Compare X20, 0
	090 JumpIfEqual {111}
	091 Move X0, X20
	092 Move X1, X31
	093 Call StringBuilder.get_Length, X0
	094 Move W26, W0
	095 Add W19, W19, 1
	096 Move W0, W19
	097 Move X20, [X31+96]
	098 Move X19, [X31+104]
	099 Move X22, [X31+80]
	100 Move X21, [X31+88]
	101 Move X24, [X31+64]
	102 Move X23, [X31+72]
	103 Move X26, [X31+48]
	104 Move X25, [X31+56]
	105 Move X28, [X31+32]
	106 Move X27, [X31+40]
	107 Move X29, [X31+16]
	108 Move X30, [X31+24]
	109 Add X31, X31, 112
	110 Return X0
	111 Compare X21, 0
	112 JumpIfEqual {165}
	113 Move W26, [X21+16]
	114 Add W25, W22, 1
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move TEMP, 0
	117 Not TEMP
	118 Move W23, TEMP
	119 Move X0, [X29]
	120 Move W8, [X0+224]
	121 Compare W8, 0
	122 JumpIfNotEqual {124}
	123 Call 0x1C17DFC
	124 Move X0, X20
	125 Move X1, X21
	126 Move W2, W25
	127 Call Normalization.Fetch, X0, X1, X2
	128 Move W28, W0
	129 Call Normalization.GetCombiningClass, X0
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Move W27, W0
	132 Move X0, [X29]
	133 Move W8, [X0+224]
	134 Compare W8, 0
	135 JumpIfNotEqual {137}
	136 Call 0x1C17DFC
	137 Move W1, [X31+12]
	138 Move W0, W24
	139 Move W2, W28
	140 Call Normalization.TryCompose, X0, X1, X2
	141 Compare W0, 0
	142 JumpIfNotEqual {149}
	143 And W23, W27, 255
	144 Compare W23, 0
	145 JumpIfEqual {161}
	146 Add W25, W25, 1
	147 NotImplemented "Instruction CMP not yet implemented."
	148 Move W19, W26
	149 Compare X20, 0
	150 JumpIfEqual {162}
	151 Move W2, W0
	152 Move X0, X20
	153 Move W1, W22
	154 Move X3, X31
	155 Call StringBuilder.set_Chars, X0, X1, X2
	156 Move W2, 1
	157 Move X0, X20
	158 Move W1, W25
	159 Move X3, X31
	160 Call StringBuilder.Remove, X0, X1, X2
	161 Add W19, W25, 1
	162 Move TEMP, 0
	163 Not TEMP
	164 Move W19, TEMP
	165 Call 0x1C17F20

Method: System.Int32 TryCompose(System.Int32 i, System.Int32 starter, System.Int32 candidate)

Disassembly:
	0x03248160 BL 0x3222A1C
	0x03248164 CBZ X23, 0x324820C
	0x03248168 LDR W9, [X23 + 0x18]
	0x0324816C ADD W8, W24, W25
	0x03248170 CMP W8, W9
	0x03248174 B.CS 0x3248210
	0x03248178 ADD X8, X23, W8, SXTW
	0x0324817C STRB W0, [X8 + 0x20]
	0x03248180 LDR W8, [X20 + 0x10]
	0x03248184 LDR X23, [X21 + 0x10]
	0x03248188 LDR W25, [X19]
	0x0324818C ADD W22, W22, 0x1
	0x03248190 CMP W22, W8
	0x03248194 ADD W24, W24, 0x2
	0x03248198 B.LT 0x3248118
	0x0324819C CBZ X23, 0x324820C
	0x032481A0 LDR W9, [X23 + 0x18]
	0x032481A4 ADD W8, W25, W8, 0x1, LSL
	0x032481A8 CMP W8, W9
	0x032481AC B.CS 0x3248210
	0x032481B0 ADD X8, X23, W8, SXTW
	0x032481B4 STRB W31, [X8 + 0x20]
	0x032481B8 LDR X8, [X21 + 0x10]
	0x032481BC CBZ X8, 0x324820C
	0x032481C0 LDR W9, [X20 + 0x10]
	0x032481C4 LDR W10, [X19]
	0x032481C8 LDR W11, [X8 + 0x18]
	0x032481CC ADD W9, W10, W9, 0x1, LSL
	0x032481D0 ADD W9, W9, 0x1
	0x032481D4 CMP W9, W11
	0x032481D8 B.CS 0x3248210
	0x032481DC ADD X8, X8, W9, SXTW
	0x032481E0 STRB W31, [X8 + 0x20]
	0x032481E4 LDR W8, [X19]
	0x032481E8 LDR W9, [X20 + 0x10]
	0x032481EC LDP X22, X21, [X31 + 0x20]
	0x032481F0 LDP X24, X23, [X31 + 0x10]
	0x032481F4 ADD W8, W8, W9, 0x1, LSL
	0x032481F8 ADD W8, W8, 0x2
	0x032481FC STR W8, [X19]
	0x03248200 LDP X20, X19, [X31 + 0x30]
	0x03248204 LDP X30, X25, [X31], #0x40
	0x03248208 RET
	0x0324820C BL 0x1C16F20
	0x03248210 BL 0x1C16F28
	0x03248214 STP X30, X19, [X31 - 0x10]!
	0x03248218 LDR W10, [X2]
	0x0324821C SUBS W8, W10, 0x2
	0x03248220 B.LT 0x3248268
	0x03248224 LDR X9, [X0 + 0x10]
	0x03248228 CBZ X9, 0x324829C
	0x0324822C LDR W11, [X9 + 0x18]
	0x03248230 SUB W10, W10, 0x1
	0x03248234 CMP W10, W11
	0x03248238 B.CS 0x3248298
	0x0324823C ADD X10, X9, W10, UXTW
	0x03248240 LDRB W10, [X10 + 0x20]
	0x03248244 CBNZ W10, 0x3248268
	0x03248248 CMP W8, W11
	0x0324824C B.CS 0x3248298
	0x03248250 ADD X9, X9, W8, UXTW
	0x03248254 LDRB W9, [X9 + 0x20]
	0x03248258 CBNZ W9, 0x3248268
	0x0324825C STR W8, [X2]
	0x03248260 LDP X30, X19, [X31], #0x10
	0x03248264 B 0x32480C8
	0x03248268 ADRP X0, 0xEDA000
	0x0324826C LDR X0, [X0 + 0xB60]
	0x03248270 BL 0x1C16D08
	0x03248274 BL 0x1C16F10

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x1195000
	008 Move X23, 0xEDB000
	009 Move W8, [X22+1125]
	010 Move X23, [X23+696]
	011 Move W19, W2
	012 Move W20, W1
	013 Move W21, W0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xEDB000
	019 Move X0, [X0+696]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+1125], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X23]
	029 Move X8, [X0+184]
	030 Move X8, [X8+8]
	031 Move W9, [X8]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W9, [X0+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {40}
	036 Call 0x1C17DFC
	037 Move X0, [X23]
	038 Move X8, [X0+184]
	039 Move X8, [X8+8]
	040 Add W9, W21, 1
	041 Move W9, [X8]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move W9, [X0+224]
	044 Compare W9, 0
	045 JumpIfNotEqual {50}
	046 Call 0x1C17DFC
	047 Move X0, [X23]
	048 Move X8, [X0+184]
	049 Move X8, [X8+8]
	050 Add W9, W21, 2
	051 Move W8, [X8]
	052 Compare W8, 0
	053 JumpIfNotEqual {67}
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move W0, W21
	059 Call Normalization.GetPrimaryCompositeFromMapIndex, X0
	060 Move W22, W0
	061 Call Normalization.PropValue, X0
	062 Move TEMP, X0
	063 And TEMP, TEMP, 64
	064 Compare TEMP, 64
	065 JumpIfNotEqual {79}
	066 Move X0, [X23]
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfNotEqual {72}
	070 Call 0x1C17DFC
	071 Move X0, [X23]
	072 Move X8, [X0+184]
	073 Move X8, [X8+8]
	074 Move W8, [X8]
	075 Add W21, W21, 1
	076 Compare W8, 0
	077 JumpIfNotEqual {67}
	078 Move W22, W31
	079 Move W0, W22
	080 Move X20, [X31+32]
	081 Move X19, [X31+40]
	082 Move X22, [X31+16]
	083 Move X21, [X31+24]
	084 Move X30, [X31+48]
	085 Move X23, [X31+56]
	086 Return X0

Method: System.String Decompose(System.String source, System.Int32 checkType)

Disassembly:
	0x03248278 MOV X19, X0
	0x0324827C BL 0x3247F9C
	0x03248280 ADRP X0, 0xEDA000
	0x03248284 LDR X0, [X0 + 0xB68]
	0x03248288 BL 0x1C16D08
	0x0324828C MOV X1, X0
	0x03248290 MOV X0, X19
	0x03248294 BL 0x1C16DEC
	0x03248298 BL 0x1C16F28
	0x0324829C BL 0x1C16F20
	0x032482A0 STR X30, [X31 - 0x10]!
	0x032482A4 CBZ X0, 0x32482BC
	0x032482A8 LDR W8, [X0 + 0x10]
	0x032482AC UBFM W8, W8, 0x1F, 0x1E
	0x032482B0 ADD W0, W8, 0x2
	0x032482B4 LDR X30, [X31], #0x10
	0x032482B8 RET
	0x032482BC BL 0x1C16F20
	0x032482C0 STR X30, [X31 - 0x60]!
	0x032482C4 STP X28, X27, [X31 + 0x10]
	0x032482C8 STP X26, X25, [X31 + 0x20]
	0x032482CC STP X24, X23, [X31 + 0x30]
	0x032482D0 STP X22, X21, [X31 + 0x40]
	0x032482D4 STP X20, X19, [X31 + 0x50]
	0x032482D8 ADRP X21, 0x1194000
	0x032482DC LDRB W8, [X21 + 0x475]
	0x032482E0 MOV W22, W2
	0x032482E4 MOV X19, X1
	0x032482E8 MOV X20, X0
	0x032482EC TBNZ X8, 0x0, 0x3248310
	0x032482F0 ADRP X0, 0xEDA000
	0x032482F4 LDR X0, [X0 + 0xB70]
	0x032482F8 BL 0x1C16CF4
	0x032482FC ADRP X0, 0xEAB000
	0x03248300 LDR X0, [X0 + 0x8F0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1195000
	007 Move X21, 0xEDB000
	008 Move W8, [X22+1126]
	009 Move X21, [X21+696]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEDB000
	017 Move X0, [X0+696]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1126], W8
	021 Move X0, [X21]
	022 Move [X31+8], X31
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Add X1, X31, 8
	028 Move X0, X19
	029 Move W2, W20
	030 Call Normalization.Decompose, X0, X1, X2
	031 Move X0, [X31+8]
	032 Compare X0, 0
	033 JumpIfEqual {39}
	034 Move X8, [X0]
	035 Move X9, [X8+360]
	036 Move X1, [X8+368]
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Move X19, X0
	039 Move X0, X19
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X30, [X31+48]
	045 Return X0

Method: System.Void Decompose(System.String source, ref System.Text.StringBuilder sb, System.Int32 checkType)

Disassembly:
	0x0324787C BL 0x1C16DFC
	0x03247880 MOV W0, W23
	0x03247884 MOV W1, W21
	0x03247888 BL 0x3246BF8
	0x0324788C CBZ W0, 0x32478C4
	0x03247890 LDR X0, [X24]
	0x03247894 LDR W8, [X0 + 0xE0]
	0x03247898 CBNZ W8, 0x32478A0
	0x0324789C BL 0x1C16DFC
	0x032478A0 MOV W0, W23
	0x032478A4 MOV X1, X19
	0x032478A8 MOV W2, W20
	0x032478AC MOV W3, W21
	0x032478B0 BL 0x324774C
	0x032478B4 MOV W20, W0
	0x032478B8 LDR X0, [X24]
	0x032478BC ADD W22, W22, 0x1
	0x032478C0 B 0x3247824
	0x032478C4 CBZ X19, 0x32478FC
	0x032478C8 LDR W8, [X19 + 0x18]
	0x032478CC CMP W20, W8
	0x032478D0 B.CS 0x3247900
	0x032478D4 ADD X8, X19, W20, 0x2, SXTW
	0x032478D8 ADD W20, W20, 0x1
	0x032478DC STR W23, [X8 + 0x20]
	0x032478E0 B 0x32478B8
	0x032478E4 MOV W0, W20
	0x032478E8 LDP X20, X19, [X31 + 0x30]
	0x032478EC LDP X22, X21, [X31 + 0x20]
	0x032478F0 LDP X24, X23, [X31 + 0x10]
	0x032478F4 LDR X30, [X31], #0x40
	0x032478F8 RET
	0x032478FC BL 0x1C16F20
	0x03247900 BL 0x1C16F28
	0x03247904 STR X30, [X31 - 0x10]!
	0x03247908 MOVN W8, 0xABFF
	0x0324790C ADD W9, W0, W8
	0x03247910 UBFM W8, W9, 0x2, 0x1F
	0x03247914 CMP W8, 0xAE8
	0x03247918 B.HI 0x32479DC
	0x0324791C CBZ X1, 0x32479EC
	0x03247920 LDR W8, [X1 + 0x18]
	0x03247924 CMP W8, W2
	0x03247928 B.LS 0x32479E8
	0x0324792C MOVZ W12, 0x5C4D
	0x03247930 AND W10, W9, 0xFFFF
	0x03247934 MOVK W12, 0xDEE90000
	0x03247938 UMADDL X12, X10, X12, X31
	0x0324793C MOVZ W13, 0x1100
	0x03247940 ADD W11, W2, 0x1
	0x03247944 UBFM X12, X12, 0x29, 0x3F
	0x03247948 ADD X14, X1, W2, 0x2, SXTW
	0x0324794C ORR W13, W12, W13, 0x0
	0x03247950 CMP W11, W8
	0x03247954 STR W13, [X14 + 0x20]
	0x03247958 B.CS 0x32479E8
	0x0324795C MOVZ W13, 0x24C
	0x03247960 MOVZ W14, 0x4925
	0x03247964 MOVK W14, 0x24920000
	0x03247968 UBFM W9, W9, 0x2, 0xF
	0x0324796C MSUB W12, W12, W13, W10
	0x03247970 UMADDL X9, X9, X14, X31
	0x03247974 UBFM W12, W12, 0x2, 0x1F
	0x03247978 MOVZ W13, 0x1C
	0x0324797C UBFM X9, X9, 0x20, 0x3F
	0x03247980 UMADDL X12, X12, X14, X31
	0x03247984 MSUB W10, W9, W13, W10
	0x03247988 MOVZ W13, 0x1161
	0x0324798C UBFM X12, X12, 0x20, 0x3F
	0x03247990 ADD W9, W2, 0x2
	0x03247994 ADD X11, X1, W11, 0x2, SXTW
	0x03247998 ADD W12, W12, W13
	0x0324799C ANDS W31, W10, 0xFFFF
	0x032479A0 STR W12, [X11 + 0x20]
	0x032479A4 B.EQ 0x32479C8
	0x032479A8 CMP W9, W8

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+32], X24
	004 Move [X31+40], X23
	005 Move [X31+48], X22
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X22, 0x1196000
	010 Move W8, [X22+1127]
	011 Move W21, W2
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xEDC000
	019 Move X0, [X0+696]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+1127], W8
	023 Move [X31+24], X31
	024 Move [X31+12], W31
	025 Compare X20, 0
	026 JumpIfEqual {88}
	027 Move W8, [X20+16]
	028 Move X24, 0xEDC000
	029 Move X24, [X24+696]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move W22, W31
	032 Move X0, X20
	033 Move W1, W22
	034 Move X2, X31
	035 Call String.get_Chars, X0, X1
	036 Move X8, [X24]
	037 Move W23, W0
	038 Move W9, [X8+224]
	039 Compare W9, 0
	040 JumpIfNotEqual {43}
	041 Move X0, X8
	042 Call 0x1C17DFC
	043 Move W0, W23
	044 Move W1, W21
	045 Call Normalization.QuickCheck, X0, X1
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X0, [X24]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Add X1, X31, 24
	053 Add X5, X31, 12
	054 Move X0, X19
	055 Move X2, X20
	056 Move W3, W22
	057 Move W4, W21
	058 Call Normalization.DecomposeChar, X0, X1, X2, X3, X4, X5
	059 Move W8, [X20+16]
	060 Add W22, W22, 1
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X0, [X19]
	063 Compare X0, 0
	064 JumpIfEqual {70}
	065 Move W2, [X31+12]
	066 Move X1, X20
	067 Move X4, X31
	068 Subtract W3, W8, W2
	069 Call StringBuilder.Append, X0, X1, X2, X3
	070 Move X0, [X24]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Move X0, X20
	076 Move X1, X19
	077 Move X20, [X31+64]
	078 Move X19, [X31+72]
	079 Move X22, [X31+48]
	080 Move X21, [X31+56]
	081 Move X24, [X31+32]
	082 Move X23, [X31+40]
	083 Move X30, [X31+16]
	084 Move W2, 1
	085 Add X31, X31, 80
	086 Call Normalization.ReorderCanonical, X0, X1, X2
	087 Return 
	088 Call 0x1C17F20

Method: System.Void ReorderCanonical(System.String src, ref System.Text.StringBuilder sb, System.Int32 start)

Disassembly:
	0x032484DC LDP X22, X21, [X31 + 0x40]
	0x032484E0 LDP X24, X23, [X31 + 0x30]
	0x032484E4 LDP X26, X25, [X31 + 0x20]
	0x032484E8 LDP X28, X27, [X31 + 0x10]
	0x032484EC LDR X30, [X31], #0x60
	0x032484F0 RET
	0x032484F4 BL 0x1C16F28
	0x032484F8 BL 0x1C16F20
	0x032484FC BL 0x1C16F28
	0x03248500 BL 0x1C16F28
	0x03248504 BL 0x1C16F20
	0x03248508 BL 0x1C16F20
	0x0324850C BL 0x1C16F20
	0x03248510 BL 0x1C16F28
	0x03248514 BL 0x1C16F20
	0x03248518 BL 0x1C16F28
	0x0324851C BL 0x1C16F20
	0x03248520 BL 0x1C16F20
	0x03248524 MOV X0, X20
	0x03248528 BL 0x1C16F18
	0x0324852C BL 0x1C16F20
	0x03248530 B 0x324855C
	0x03248534 B 0x324855C
	0x03248538 B 0x324855C
	0x0324853C B 0x324855C
	0x03248540 B 0x324855C
	0x03248544 B 0x324855C
	0x03248548 B 0x324855C
	0x0324854C B 0x324855C
	0x03248550 B 0x324855C
	0x03248554 B 0x324855C
	0x03248558 B 0x324855C
	0x0324855C MOV X19, X0
	0x03248560 CMP W1, 0x1
	0x03248564 B.NE 0x3248580
	0x03248568 MOV X0, X19
	0x0324856C BL 0x3EB1AD0
	0x03248570 LDR X20, [X0]
	0x03248574 BL 0x3EB1AE0
	0x03248578 MOV X21, X31
	0x0324857C B 0x32484B4
	0x03248580 MOV X20, X31
	0x03248584 B 0x324858C
	0x03248588 MOV X19, X0
	0x0324858C LDR X0, [X23]
	0x03248590 LDR W8, [X0 + 0xE0]
	0x03248594 CBNZ W8, 0x324859C
	0x03248598 BL 0x1C16DFC
	0x0324859C ADD X0, X31, 0x8
	0x032485A0 MOV X1, X31
	0x032485A4 BL 0x33BDF58
	0x032485A8 CBNZ X20, 0x32485B4
	0x032485AC MOV X0, X19
	0x032485B0 BL 0x1D2C690
	0x032485B4 MOV X0, X20
	0x032485B8 BL 0x1C16F18
	0x032485BC BL 0x1990590
	0x032485C0 STR X30, [X31 - 0x40]!
	0x032485C4 STP X24, X23, [X31 + 0x10]
	0x032485C8 STP X22, X21, [X31 + 0x20]
	0x032485CC STP X20, X19, [X31 + 0x30]
	0x032485D0 ADRP X20, 0x1194000
	0x032485D4 LDRB W8, [X20 + 0x496]
	0x032485D8 MOV X19, X0
	0x032485DC TBNZ X8, 0x0, 0x32485F4
	0x032485E0 ADRP X0, 0xEAB000
	0x032485E4 LDR X0, [X0 + 0xAC8]
	0x032485E8 BL 0x1C16CF4
	0x032485EC MOVZ W8, 0x1
	0x032485F0 STRB W8, [X20 + 0x496]
	0x032485F4 LDP X0, X20, [X19 + 0x20]
	0x032485F8 LDR W21, [X19 + 0x30]
	0x032485FC CBZ X0, 0x3248638
	0x03248600 MOV X1, X20
	0x03248604 MOV W2, W31
	0x03248608 MOV W3, W21
	0x0324860C MOV X4, X31
	0x03248610 BL 0x3233154
	0x03248614 LDR X0, [X19 + 0x20]
	0x03248618 CBZ X0, 0x32487D8
	0x0324861C LDR X8, [X0]
	0x03248620 LDP X20, X19, [X31 + 0x30]
	0x03248624 LDP X22, X21, [X31 + 0x20]
	0x03248628 LDP X24, X23, [X31 + 0x10]
	0x0324862C LDP X2, X1, [X8 + 0x168]
	0x03248630 LDR X30, [X31], #0x40
	0x03248634 BR X2
	0x03248638 LDP W8, W9, [X19 + 0x18]
	0x0324863C UBFM W10, W8, 0x2, 0x1F
	0x03248640 UBFM W10, W10, 0x1F, 0x1E
	0x03248644 ADD W10, W10, W8, 0x2, LSR
	0x03248648 CMP W9, W10
	0x0324864C B.LS 0x324870C
	0x03248650 ADRP X9, 0xEAB000
	0x03248654 LDR X9, [X9 + 0xAC8]
	0x03248658 UBFM W22, W8, 0x1F, 0x1E
	0x0324865C MOV W1, W22
	0x03248660 LDR X0, [X9]
	0x03248664 BL 0x1C16D6C
	0x03248668 LDR W8, [X19 + 0x18]
	0x0324866C MOV X23, X0
	0x03248670 CBZ W8, 0x3248704
	0x03248674 MOV X24, X31
	0x03248678 LDR X9, [X19 + 0x10]
	0x0324867C CBZ X9, 0x32487D8
	0x03248680 LDR W10, [X9 + 0x18]
	0x03248684 CMP W24, W10
	0x03248688 B.CS 0x32487D4
	0x0324868C ADD X9, X9, X24, 0x3, LSL
	0x03248690 LDR X0, [X9 + 0x20]
	0x03248694 CBZ X0, 0x32486F4
	0x03248698 BL 0x324C56C
	0x0324869C CBZ X23, 0x32487D8
	0x032486A0 LDR W8, [X23 + 0x18]
	0x032486A4 UDIV W9, W0, W22
	0x032486A8 MSUB W9, W9, W22, W0
	0x032486AC CMP W9, W8
	0x032486B0 B.CS 0x32487D4
	0x032486B4 ADD X10, X23, W9, 0x3, UXTW
	0x032486B8 LDR X11, [X10 + 0x20]!
	0x032486BC CBZ X11, 0x32486D0
	0x032486C0 ADD W10, W9, 0x1
	0x032486C4 CMP W10, W22
	0x032486C8 CSINC W9, W31, W9, CS
	0x032486CC B 0x32486AC
	0x032486D0 LDR X8, [X19 + 0x10]
	0x032486D4 CBZ X8, 0x32487D8
	0x032486D8 LDR W9, [X8 + 0x18]
	0x032486DC CMP W24, W9
	0x032486E0 B.CS 0x32487D4
	0x032486E4 ADD X8, X8, X24, 0x3, LSL
	0x032486E8 LDR X8, [X8 + 0x20]
	0x032486EC STR X8, [X10]
	0x032486F0 LDR W8, [X19 + 0x18]
	0x032486F4 ADD W9, W24, 0x1
	0x032486F8 SXTW X24, W9
	0x032486FC CMP X24, W8, UXTW
	0x03248700 B.LT 0x3248678
	0x03248704 STR W22, [X19 + 0x18]
	0x03248708 STR X23, [X19 + 0x10]
	0x0324870C MOV X0, X20
	0x03248710 MOV W1, W21
	0x03248714 BL 0x324C5D8
	0x03248718 LDR X8, [X19 + 0x10]
	0x0324871C CBZ X8, 0x32487D8
	0x03248720 LDR W9, [X19 + 0x18]
	0x03248724 UDIV W10, W0, W9
	0x03248728 MSUB W23, W10, W9, W0
	0x0324872C LDR W9, [X8 + 0x18]
	0x03248730 CMP W23, W9
	0x03248734 B.CS 0x32487D4
	0x03248738 ADD X8, X8, W23, 0x3, UXTW
	0x0324873C LDR X22, [X8 + 0x20]
	0x03248740 CBZ X22, 0x3248774
	0x03248744 MOV X1, X22
	0x03248748 MOV X2, X20

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0xEDB000
	012 Move X23, 0xEAC000
	013 Move X20, [X20+696]
	014 Move X23, [X23+2288]
	015 Move W21, W2
	016 Move X19, X1
	017 Move X22, X0
	018 Move X26, 0x1195000
	019 Move W27, 1
	020 Move W8, [X26+1128]
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, X20
	026 Call 0x1C17CF4
	027 Move X0, X23
	028 Call 0x1C17CF4
	029 Move [X26+1128], W27
	030 Move X0, [X19]
	031 Compare X0, 0
	032 JumpIfNotEqual {159}
	033 Compare X22, 0
	034 JumpIfEqual {173}
	035 Move W8, [X22+16]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move W21, 1
	038 Move X0, X22
	039 Move W1, W21
	040 Move X2, X31
	041 Call String.get_Chars, X0, X1
	042 Move X8, [X20]
	043 Move W24, W0
	044 Move W9, [X8+224]
	045 Compare W9, 0
	046 JumpIfNotEqual {49}
	047 Move X0, X8
	048 Call 0x1C17DFC
	049 And W0, W24, 0xFFFF
	050 Call Normalization.GetCombiningClass, X0
	051 And W31, W0, 255
	052 Move W24, W0
	053 Subtract W1, W21, 1
	054 Move X0, X22
	055 Move X2, X31
	056 Call String.get_Chars, X0, X1
	057 Move X8, [X20]
	058 Move W25, W0
	059 Move W9, [X8+224]
	060 Compare W9, 0
	061 JumpIfNotEqual {64}
	062 Move X0, X8
	063 Call 0x1C17DFC
	064 And W0, W25, 0xFFFF
	065 Call Normalization.GetCombiningClass, X0
	066 And W8, W0, 255
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move W8, [X22+16]
	069 Add W21, W21, 1
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X0, [X23]
	072 Move W25, [X22+16]
	073 Call 0x1C17F10
	074 Move W1, W25
	075 Move X2, X31
	076 Move X24, X0
	077 Call StringBuilder..ctor, X0, X1
	078 Move [X19], X24
	079 Compare X24, 0
	080 JumpIfEqual {173}
	081 Move W3, [X22+16]
	082 Move X0, X24
	083 Move X1, X22
	084 Move W2, W31
	085 Move X4, X31
	086 Call StringBuilder.Append, X0, X1, X2, X3
	087 Move X0, [X20]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {20}
	091 Call 0x1C17DFC
	092 Move X0, [X19]
	093 Compare X0, 0
	094 JumpIfEqual {173}
	095 Move W1, W21
	096 Move X2, X31
	097 Call StringBuilder.get_Chars, X0, X1
	098 Move X8, [X20]
	099 Move W22, W0
	100 Move W9, [X8+224]
	101 Compare W9, 0
	102 JumpIfNotEqual {105}
	103 Move X0, X8
	104 Call 0x1C17DFC
	105 And W0, W22, 0xFFFF
	106 Call Normalization.GetCombiningClass, X0
	107 And W31, W0, 255
	108 Move W23, W0
	109 Move X0, [X19]
	110 Compare X0, 0
	111 JumpIfEqual {173}
	112 Subtract W22, W21, 1
	113 Move W1, W22
	114 Move X2, X31
	115 Call StringBuilder.get_Chars, X0, X1
	116 Move X8, [X20]
	117 Move W24, W0
	118 Move W9, [X8+224]
	119 Compare W9, 0
	120 JumpIfNotEqual {123}
	121 Move X0, X8
	122 Call 0x1C17DFC
	123 And W0, W24, 0xFFFF
	124 Call Normalization.GetCombiningClass, X0
	125 And W8, W0, 255
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Move X0, [X19]
	128 Compare X0, 0
	129 JumpIfEqual {173}
	130 Move W1, W22
	131 Move X2, X31
	132 Call StringBuilder.get_Chars, X0, X1
	133 Move X24, [X19]
	134 Compare X24, 0
	135 JumpIfEqual {173}
	136 Move W23, W0
	137 Move X0, X24
	138 Move W1, W21
	139 Move X2, X31
	140 Call StringBuilder.get_Chars, X0, X1
	141 Move W2, W0
	142 Move X0, X24
	143 Move W1, W22
	144 Move X3, X31
	145 Call StringBuilder.set_Chars, X0, X1, X2
	146 Move X0, [X19]
	147 Compare X0, 0
	148 JumpIfEqual {173}
	149 Move W1, W21
	150 Move W2, W23
	151 Move X3, X31
	152 Call StringBuilder.set_Chars, X0, X1, X2
	153 NotImplemented "Instruction CMP not yet implemented."
	154 NotImplemented "Instruction CSEL not yet implemented."
	155 Add W21, W21, 1
	156 Move X0, [X19]
	157 Compare X0, 0
	158 JumpIfEqual {173}
	159 Move X1, X31
	160 Call StringBuilder.get_Length, X0
	161 NotImplemented "Instruction CMP not yet implemented."
	162 Move X20, [X31+64]
	163 Move X19, [X31+72]
	164 Move X22, [X31+48]
	165 Move X21, [X31+56]
	166 Move X24, [X31+32]
	167 Move X23, [X31+40]
	168 Move X26, [X31+16]
	169 Move X25, [X31+24]
	170 Move X30, [X31+80]
	171 Move X27, [X31+88]
	172 Return 
	173 Call 0x1C17F20

Method: System.Void DecomposeChar(ref System.Text.StringBuilder sb, ref System.Int32[] buf, System.String s, System.Int32 i, System.Int32 checkType, ref System.Int32 start)

Disassembly:
	0x03248304 BL 0x1C16CF4
	0x03248308 MOVZ W8, 0x1
	0x0324830C STRB W8, [X21 + 0x475]
	0x03248310 STR X31, [X31 + 0x8]
	0x03248314 LDR X8, [X20 + 0x10]
	0x03248318 CBZ X8, 0x3248520
	0x0324831C LDR W9, [X8 + 0x18]
	0x03248320 LDR W24, [X19]
	0x03248324 SUB W10, W9, 0x1
	0x03248328 CMP W24, W10
	0x0324832C B.GE 0x3248364
	0x03248330 CMP W24, W9
	0x03248334 B.CS 0x32484F4
	0x03248338 ADD X11, X8, W24, SXTW
	0x0324833C LDRB W11, [X11 + 0x20]
	0x03248340 CBNZ W11, 0x324835C
	0x03248344 ADD W11, W24, 0x1
	0x03248348 CMP W11, W9
	0x0324834C B.CS 0x32484F4
	0x03248350 ADD X11, X8, W11, SXTW
	0x03248354 LDRB W11, [X11 + 0x20]
	0x03248358 CBZ W11, 0x3248364
	0x0324835C ADD W24, W24, 0x2
	0x03248360 B 0x3248328
	0x03248364 ADRP X23, 0xEDA000
	0x03248368 LDR X23, [X23 + 0xB70]
	0x0324836C LDR X0, [X23]
	0x03248370 LDR W8, [X0 + 0xE0]
	0x03248374 CBNZ W8, 0x324837C
	0x03248378 BL 0x1C16DFC
	0x0324837C MOV X0, X31
	0x03248380 BL 0x33BDD90
	0x03248384 STR X0, [X31 + 0x8]
	0x03248388 TBZ X22, 0x0, 0x32484A4
	0x0324838C MOV X21, X0
	0x03248390 CBZ X0, 0x324852C
	0x03248394 STR X31, [X21 + 0x20]
	0x03248398 STR W31, [X21 + 0x30]
	0x0324839C LDR W8, [X19]
	0x032483A0 CMP W8, W24
	0x032483A4 B.GE 0x3248488
	0x032483A8 ADRP X25, 0xEAB000
	0x032483AC LDR X25, [X25 + 0x8F0]
	0x032483B0 MOVZ W26, 0x1
	0x032483B4 LDR X9, [X20 + 0x10]
	0x032483B8 CBZ X9, 0x32484F8
	0x032483BC LDR W10, [X9 + 0x18]
	0x032483C0 CMP W8, W10
	0x032483C4 B.CS 0x3248500
	0x032483C8 ADD W27, W8, 0x1
	0x032483CC CMP W27, W10
	0x032483D0 B.CS 0x32484FC
	0x032483D4 ADD X10, X9, 0x20
	0x032483D8 LDRSW X9, [X21 + 0x30]
	0x032483DC LDRB W28, [X10, W27, SXTW]
	0x032483E0 LDRB W8, [X10, W8, SXTW]
	0x032483E4 CMP W9, 0x1FF
	0x032483E8 BFM W28, W8, 0x18, 0x17
	0x032483EC B.LE 0x3248458
	0x032483F0 LDR X8, [X21 + 0x20]
	0x032483F4 CBNZ X8, 0x3248418
	0x032483F8 LDR X0, [X25]
	0x032483FC BL 0x1C16F10
	0x03248400 MOV X22, X0
	0x03248404 MOV X1, X31
	0x03248408 BL 0x3231AC4
	0x0324840C STR X22, [X21 + 0x20]
	0x03248410 LDR X21, [X31 + 0x8]
	0x03248414 CBZ X21, 0x324851C
	0x03248418 LDR X0, [X21 + 0x20]
	0x0324841C CBZ X0, 0x3248508
	0x03248420 LDR X1, [X21 + 0x28]
	0x03248424 MOVZ W3, 0x200
	0x03248428 MOV W2, W31
	0x0324842C MOV X4, X31
	0x03248430 BL 0x3233154
	0x03248434 LDR X21, [X31 + 0x8]
	0x03248438 CBZ X21, 0x324850C
	0x0324843C LDR X8, [X21 + 0x28]
	0x03248440 CBZ X8, 0x3248514
	0x03248444 LDR W9, [X8 + 0x18]
	0x03248448 CBZ W9, 0x3248510
	0x0324844C STRH W28, [X8 + 0x20]
	0x03248450 STR W26, [X21 + 0x30]
	0x03248454 B 0x324847C
	0x03248458 LDR X8, [X21 + 0x28]
	0x0324845C ADD W10, W9, 0x1
	0x03248460 STR W10, [X21 + 0x30]
	0x03248464 CBZ X8, 0x3248504
	0x03248468 LDR W10, [X8 + 0x18]
	0x0324846C CMP W9, W10
	0x03248470 B.CS 0x3248518
	0x03248474 ADD X8, X8, X9, 0x1, LSL
	0x03248478 STRH W28, [X8 + 0x20]
	0x0324847C ADD W8, W27, 0x1
	0x03248480 CMP W8, W24
	0x03248484 B.LT 0x32483B4
	0x03248488 ADD W8, W24, 0x2
	0x0324848C STR W8, [X19]
	0x03248490 MOV X0, X21
	0x03248494 BL 0x32485C0
	0x03248498 MOV X21, X0
	0x0324849C MOV X20, X31
	0x032484A0 B 0x32484B4
	0x032484A4 ADD W8, W24, 0x2
	0x032484A8 MOV X20, X31
	0x032484AC MOV X21, X31
	0x032484B0 STR W8, [X19]
	0x032484B4 LDR X0, [X23]
	0x032484B8 LDR W8, [X0 + 0xE0]
	0x032484BC CBNZ W8, 0x32484C4
	0x032484C0 BL 0x1C16DFC
	0x032484C4 ADD X0, X31, 0x8
	0x032484C8 MOV X1, X31
	0x032484CC BL 0x33BDF58
	0x032484D0 CBNZ X20, 0x3248524
	0x032484D4 MOV X0, X21
	0x032484D8 LDP X20, X19, [X31 + 0x50]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0x1195000
	011 Move W8, [X25+1129]
	012 Move X19, X5
	013 Move W23, W4
	014 Move W20, W3
	015 Move X24, X2
	016 Move X21, X1
	017 Move X22, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {33}
	022 Move X0, 0xEAD000
	023 Move X0, [X0+3672]
	024 Call 0x1C17CF4
	025 Move X0, 0xEDB000
	026 Move X0, [X0+696]
	027 Call 0x1C17CF4
	028 Move X0, 0xEAC000
	029 Move X0, [X0+2288]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X25+1129], W8
	033 Move X25, [X22]
	034 Compare X25, 0
	035 JumpIfNotEqual {50}
	036 Compare X24, 0
	037 JumpIfEqual {137}
	038 Move X8, 0xEAC000
	039 Move W26, [X24+16]
	040 Move X8, [X8+2288]
	041 Move X0, [X8]
	042 Call 0x1C17F10
	043 Add W1, W26, 100
	044 Move X2, X31
	045 Move X25, X0
	046 Call StringBuilder..ctor, X0, X1
	047 Move [X22], X25
	048 Compare X25, 0
	049 JumpIfEqual {137}
	050 Move W2, [X19]
	051 Move X0, X25
	052 Move X1, X24
	053 Move X4, X31
	054 Subtract W3, W20, W2
	055 Call StringBuilder.Append, X0, X1, X2, X3
	056 Move X8, [X21]
	057 Compare X8, 0
	058 JumpIfNotEqual {65}
	059 Move X8, 0xEAD000
	060 Move X8, [X8+3672]
	061 Move W1, 19
	062 Move X0, [X8]
	063 Call 0x1C17D6C
	064 Move [X21], X0
	065 Compare X24, 0
	066 JumpIfEqual {137}
	067 Move X25, 0xEDB000
	068 Move X25, [X25+696]
	069 Move X0, X24
	070 Move W1, W20
	071 Move X2, X31
	072 Call String.get_Chars, X0, X1
	073 Move X8, [X25]
	074 Move X24, [X21]
	075 Move W25, W0
	076 Move W9, [X8+224]
	077 Compare W9, 0
	078 JumpIfNotEqual {81}
	079 Move X0, X8
	080 Call 0x1C17DFC
	081 And W0, W25, 0xFFFF
	082 Move X1, X24
	083 Move W2, W31
	084 Move W3, W23
	085 Call Normalization.GetCanonical, X0, X1, X2, X3
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move X23, X31
	088 Move W24, W0
	089 Move W25, 0xFFFE
	090 Move TEMP, 0x23FF
	091 Not TEMP
	092 Move W26, TEMP
	093 Move X8, [X21]
	094 Compare X8, 0
	095 JumpIfEqual {137}
	096 Move W9, [X8+24]
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move X0, [X22]
	099 Compare X0, 0
	100 JumpIfEqual {137}
	101 Add X8, X8, X23
	102 Move W1, [X8+32]
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Move W1, W1
	105 ShiftRight W1, 10
	106 And W1, W1, 0x7FFFFFFF
	107 Move X2, X31
	108 Call StringBuilder.Append, X0, X1
	109 Move X8, [X21]
	110 Compare X8, 0
	111 JumpIfEqual {137}
	112 Move W9, [X8+24]
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move X0, [X22]
	115 Compare X0, 0
	116 JumpIfEqual {137}
	117 Add X8, X8, X23
	118 NotImplemented "Instruction LDRH not yet implemented."
	119 And W8, W8, 4095
	120 Add W1, W8, W26
	121 Move X2, X31
	122 Call StringBuilder.Append, X0, X1
	123 Add X23, X23, 1
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Add W8, W20, 1
	126 Move [X19], W8
	127 Move X20, [X31+64]
	128 Move X19, [X31+72]
	129 Move X22, [X31+48]
	130 Move X21, [X31+56]
	131 Move X24, [X31+32]
	132 Move X23, [X31+40]
	133 Move X26, [X31+16]
	134 Move X25, [X31+24]
	135 Move X30, [X31+80]
	136 Return 
	137 Call 0x1C17F20
	138 Call 0x1C17F28

Method: System.Text.NormalizationCheck QuickCheck(System.Char c, System.Int32 type)

Disassembly:
	0x03247BF8 BL 0x1CB7510
	0x03247BFC LDR X0, [X31 + 0x38]
	0x03247C00 MOV X1, X31
	0x03247C04 BL 0x33C6948
	0x03247C08 LDR X8, [X22]
	0x03247C0C LDR X8, [X8 + 0xB8]
	0x03247C10 STR X0, [X8]
	0x03247C14 LDR X0, [X31 + 0x28]
	0x03247C18 MOV X1, X31
	0x03247C1C BL 0x33C6948
	0x03247C20 LDR X8, [X22]
	0x03247C24 LDR X8, [X8 + 0xB8]
	0x03247C28 STR X0, [X8 + 0x8]
	0x03247C2C LDR X0, [X31 + 0x20]
	0x03247C30 MOV X1, X31
	0x03247C34 BL 0x33C6948
	0x03247C38 LDR X8, [X22]
	0x03247C3C LDR X8, [X8 + 0xB8]
	0x03247C40 STR X0, [X8 + 0x10]
	0x03247C44 LDR X0, [X31 + 0x18]
	0x03247C48 MOV X1, X31
	0x03247C4C BL 0x33C6948
	0x03247C50 LDR X8, [X22]
	0x03247C54 LDR X8, [X8 + 0xB8]
	0x03247C58 STR X0, [X8 + 0x18]
	0x03247C5C LDR X0, [X31 + 0x10]
	0x03247C60 MOV X1, X31
	0x03247C64 BL 0x33C6948
	0x03247C68 LDR X8, [X22]
	0x03247C6C LDR X8, [X8 + 0xB8]
	0x03247C70 STR X0, [X8 + 0x20]
	0x03247C74 LDR X0, [X31 + 0x8]
	0x03247C78 MOV X1, X31
	0x03247C7C BL 0x33C6948
	0x03247C80 LDR X8, [X22]
	0x03247C84 MOV X20, X31
	0x03247C88 LDR X8, [X8 + 0xB8]
	0x03247C8C STR X0, [X8 + 0x28]
	0x03247C90 LDRB W8, [X31 + 0x4]
	0x03247C94 CBZ W8, 0x3247CA4
	0x03247C98 MOV X0, X19
	0x03247C9C MOV X1, X31
	0x03247CA0 BL 0x33E14E4
	0x03247CA4 CBNZ X20, 0x3247CCC
	0x03247CA8 LDR X8, [X22]
	0x03247CAC LDP X20, X19, [X31 + 0x50]
	0x03247CB0 LDP X22, X21, [X31 + 0x40]
	0x03247CB4 LDR X30, [X31 + 0x30]
	0x03247CB8 LDR X8, [X8 + 0xB8]
	0x03247CBC MOVZ W9, 0x1
	0x03247CC0 STRB W9, [X8 + 0x38]
	0x03247CC4 ADD X31, X31, 0x60
	0x03247CC8 RET
	0x03247CCC MOV X0, X20
	0x03247CD0 BL 0x1C16F18
	0x03247CD4 B 0x3247CEC
	0x03247CD8 B 0x3247CEC
	0x03247CDC B 0x3247CEC
	0x03247CE0 B 0x3247CEC
	0x03247CE4 B 0x3247CEC
	0x03247CE8 B 0x3247CEC
	0x03247CEC MOV X21, X0
	0x03247CF0 CMP W1, 0x1
	0x03247CF4 B.NE 0x3247D0C
	0x03247CF8 MOV X0, X21
	0x03247CFC BL 0x3EB1AD0
	0x03247D00 LDR X20, [X0]
	0x03247D04 BL 0x3EB1AE0
	0x03247D08 B 0x3247C90
	0x03247D0C MOV X20, X31
	0x03247D10 B 0x3247D18
	0x03247D14 MOV X21, X0
	0x03247D18 LDRB W8, [X31 + 0x4]
	0x03247D1C CBZ W8, 0x3247D2C
	0x03247D20 MOV X0, X19
	0x03247D24 MOV X1, X31
	0x03247D28 BL 0x33E14E4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1196000
	006 Move W8, [X21+1130]
	007 Move W20, W1
	008 Move W19, W0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xEDC000
	014 Move X0, [X0+696]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1130], W8
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction CMP not yet implemented."
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move W8, 0x5400
	022 Add W8, W19, W8
	023 Move W8, W8
	024 ShiftRight W8, 2
	025 And W8, W8, 0x7FFF
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X8, 0xEDC000
	028 Move X8, [X8+696]
	029 And W19, W19, 0xFFFF
	030 Move X0, [X8]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move W0, W19
	036 Call Normalization.PropValue, X0
	037 Move W0, W0
	038 ShiftRight W0, 1
	039 And W0, W0, 1
	040 Move W8, 0x5400
	041 Add W8, W19, W8
	042 Move W8, W8
	043 ShiftRight W8, 2
	044 And W8, W8, 0x7FFF
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X8, 0xEDC000
	047 Move X8, [X8+696]
	048 And W19, W19, 0xFFFF
	049 Move X0, [X8]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move W0, W19
	055 Call Normalization.PropValue, X0
	056 And W0, W0, 1
	057 Move X8, 0xEDC000
	058 Move X8, [X8+696]
	059 Move X0, [X8]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 And W0, W19, 0xFFFF
	065 Call Normalization.PropValue, X0
	066 Move TEMP, X0
	067 And TEMP, TEMP, 16
	068 Compare TEMP, 16
	069 JumpIfEqual {90}
	070 Move W8, W0
	071 ShiftRight W8, 4
	072 And W8, W8, 0x7FFFFFFF
	073 Move X8, 0xEDC000
	074 Move X8, [X8+696]
	075 Move X0, [X8]
	076 Move W8, [X0+224]
	077 Compare W8, 0
	078 JumpIfNotEqual {80}
	079 Call 0x1C17DFC
	080 And W0, W19, 0xFFFF
	081 Call Normalization.PropValue, X0
	082 Move TEMP, X0
	083 And TEMP, TEMP, 4
	084 Compare TEMP, 4
	085 JumpIfEqual {90}
	086 Move W8, W0
	087 ShiftRight W8, 2
	088 And W8, W8, 0x7FFFFFFF
	089 And W0, W8, 2
	090 Move W0, 1
	091 Move X20, [X31+16]
	092 Move X19, [X31+24]
	093 Move X30, [X31+32]
	094 Move X21, [X31+40]
	095 Return X0

Method: System.Int32 GetCanonicalHangul(System.Int32 s, System.Int32[] buf, System.Int32 bufIdx)

Disassembly:
	0x03248904 LDR X0, [X8]
	0x03248908 BL 0x1C16F10
	0x0324890C MOV X1, X23
	0x03248910 MOV X2, X31
	0x03248914 MOV X22, X0
	0x03248918 BL 0x3249108
	0x0324891C B 0x3248970
	0x03248920 MOV X22, X31
	0x03248924 B 0x3248970
	0x03248928 AND W24, W20, 0x1
	0x0324892C ADD W8, W8, 0x1
	0x03248930 MOV X0, X21
	0x03248934 MOV X1, X19
	0x03248938 MOV W2, W24
	0x0324893C STR W8, [X19]
	0x03248940 BL 0x32482C0
	0x03248944 MOV X23, X0
	0x03248948 MOV X0, X21
	0x0324894C MOV X1, X19
	0x03248950 MOV W2, W24
	0x03248954 BL 0x32482C0
	0x03248958 TBZ X20, 0x0, 0x3248970
	0x0324895C CBZ X22, 0x3248A34
	0x03248960 MOV X2, X0
	0x03248964 MOV X0, X22
	0x03248968 MOV X1, X23
	0x0324896C BL 0x3248A74
	0x03248970 LDR X9, [X21 + 0x10]
	0x03248974 CBZ X9, 0x3248A34
	0x03248978 LDRSW X8, [X19]
	0x0324897C LDR W10, [X9 + 0x18]
	0x03248980 CMP W8, W10
	0x03248984 B.CS 0x3248A38
	0x03248988 ADD X9, X9, X8
	0x0324898C LDRB W9, [X9 + 0x20]
	0x03248990 CMP W9, 0x2
	0x03248994 B.EQ 0x3248928
	0x03248998 CMP W9, 0x3
	0x0324899C B.NE 0x32489EC
	0x032489A0 ADD W8, W8, 0x1
	0x032489A4 AND W2, W20, 0x1
	0x032489A8 MOV X0, X21
	0x032489AC MOV X1, X19
	0x032489B0 STR W8, [X19]
	0x032489B4 BL 0x32482C0
	0x032489B8 TBZ X20, 0x0, 0x32489EC
	0x032489BC CBZ X22, 0x3248A34
	0x032489C0 STR X0, [X22 + 0x10]
	0x032489C4 B 0x32489EC
	0x032489C8 AND W2, W20, 0x1
	0x032489CC MOV X0, X21
	0x032489D0 MOV X1, X19
	0x032489D4 BL 0x3248870
	0x032489D8 TBZ X20, 0x0, 0x32489EC
	0x032489DC CBZ X22, 0x3248A34
	0x032489E0 MOV X1, X0
	0x032489E4 MOV X0, X22
	0x032489E8 BL 0x3248C08
	0x032489EC LDR X8, [X21 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move TEMP, 0xABFF
	003 Not TEMP
	004 Move W8, TEMP
	005 Add W9, W0, W8
	006 Move W8, W9
	007 ShiftRight W8, 2
	008 And W8, W8, 0x7FFFFFFF
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Compare X1, 0
	011 JumpIfEqual {67}
	012 Move W8, [X1+24]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move W12, 0x5C4D
	015 And W10, W9, 0xFFFF
	016 NotImplemented "Instruction MOVK not yet implemented."
	017 NotImplemented "Instruction UMADDL not yet implemented."
	018 Move W13, 0x1100
	019 Add W11, W2, 1
	020 Move X12, X12
	021 ShiftRight X12, 41
	022 And X12, X12, 0x7FFFFFFF
	023 Add X14, X1, W2
	024 Or W13, W12, W13
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move [X14+32], W13
	027 Move W13, 588
	028 Move W14, 0x4925
	029 NotImplemented "Instruction MOVK not yet implemented."
	030 Move W9, W9
	031 ShiftRight W9, 2
	032 And W9, W9, 0x7FFF
	033 NotImplemented "Instruction MSUB not yet implemented."
	034 NotImplemented "Instruction UMADDL not yet implemented."
	035 Move W12, W12
	036 ShiftRight W12, 2
	037 And W12, W12, 0x7FFFFFFF
	038 Move W13, 28
	039 Move X9, X9
	040 ShiftRight X9, 32
	041 And X9, X9, 0x7FFFFFFF
	042 NotImplemented "Instruction UMADDL not yet implemented."
	043 NotImplemented "Instruction MSUB not yet implemented."
	044 Move W13, 0x1161
	045 Move X12, X12
	046 ShiftRight X12, 32
	047 And X12, X12, 0x7FFFFFFF
	048 Add W9, W2, 2
	049 Add X11, X1, W11
	050 Add W12, W12, W13
	051 And W31, W10, 0xFFFF
	052 Move [X11+32], W12
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move W11, 0x11A7
	055 Add W2, W2, 3
	056 Add W10, W10, W11
	057 Add X9, X1, W9
	058 Move [X9+32], W10
	059 Move W2, W9
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Add X8, X1, W2
	062 Move [X8+32], W31
	063 Move W0, W2
	064 Move X30, [X31+16]
	065 Return X0
	066 Call 0x1C17F28
	067 Call 0x1C17F20

Method: System.Int32 GetCanonical(System.Int32 c, System.Int32[] buf, System.Int32 bufIdx, System.Int32 checkType)

Disassembly:
	0x0324874C MOV W3, W21
	0x03248750 BL 0x324C6C8
	0x03248754 TBNZ X0, 0x0, 0x32487BC
	0x03248758 LDR W9, [X19 + 0x18]
	0x0324875C LDR X8, [X19 + 0x10]
	0x03248760 ADD W10, W23, 0x1
	0x03248764 CMP W10, W9
	0x03248768 CSINC W23, W31, W23, CS
	0x0324876C CBNZ X8, 0x324872C
	0x03248770 B 0x32487D8
	0x03248774 MOV X0, X31
	0x03248778 MOV X1, X20
	0x0324877C MOV W2, W31
	0x03248780 MOV W3, W21
	0x03248784 MOV X4, X31
	0x03248788 BL 0x322EAE4
	0x0324878C LDR X8, [X19 + 0x10]
	0x03248790 CBZ X8, 0x32487D8
	0x03248794 LDR W9, [X8 + 0x18]
	0x03248798 CMP W23, W9
	0x0324879C B.CS 0x32487D4
	0x032487A0 MOV W9, W23
	0x032487A4 ADD X8, X8, X9, 0x3, LSL
	0x032487A8 STR X0, [X8 + 0x20]
	0x032487AC LDR W8, [X19 + 0x1C]
	0x032487B0 MOV X22, X0
	0x032487B4 ADD W8, W8, 0x1
	0x032487B8 STR W8, [X19 + 0x1C]
	0x032487BC MOV X0, X22
	0x032487C0 LDP X20, X19, [X31 + 0x30]
	0x032487C4 LDP X22, X21, [X31 + 0x20]
	0x032487C8 LDP X24, X23, [X31 + 0x10]
	0x032487CC LDR X30, [X31], #0x40
	0x032487D0 RET
	0x032487D4 BL 0x1C16F28
	0x032487D8 BL 0x1C16F20
	0x032487DC STP X30, X21, [X31 - 0x20]!
	0x032487E0 STP X20, X19, [X31 + 0x10]
	0x032487E4 LDR W8, [X2]
	0x032487E8 MOV W19, W1
	0x032487EC MOV X20, X2
	0x032487F0 MOV X21, X0
	0x032487F4 ADD W1, W8, 0x1
	0x032487F8 BL 0x3248024
	0x032487FC LDRSW X8, [X20]
	0x03248800 LDR X9, [X21 + 0x10]
	0x03248804 ADD W10, W8, 0x1
	0x03248808 STR W10, [X20]
	0x0324880C CBZ X9, 0x3248830
	0x03248810 LDR W10, [X9 + 0x18]
	0x03248814 CMP W8, W10
	0x03248818 B.CS 0x3248834
	0x0324881C ADD X8, X9, X8
	0x03248820 STRB W19, [X8 + 0x20]
	0x03248824 LDP X20, X19, [X31 + 0x10]
	0x03248828 LDP X30, X21, [X31], #0x20
	0x0324882C RET
	0x03248830 BL 0x1C16F20
	0x03248834 BL 0x1C16F28
	0x03248838 STR X30, [X31 - 0x10]!
	0x0324883C ADD X1, X31, 0xC
	0x03248840 MOVZ W2, 0x1
	0x03248844 STR W31, [X31 + 0xC]
	0x03248848 BL 0x3248870
	0x0324884C LDR X30, [X31], #0x10
	0x03248850 RET
	0x03248854 STR X30, [X31 - 0x10]!
	0x03248858 STR W1, [X31 + 0xC]
	0x0324885C AND W2, W2, 0x1
	0x03248860 ADD X1, X31, 0xC
	0x03248864 BL 0x3248870
	0x03248868 LDR X30, [X31], #0x10
	0x0324886C RET
	0x03248870 STR X30, [X31 - 0x40]!
	0x03248874 STP X24, X23, [X31 + 0x10]
	0x03248878 STP X22, X21, [X31 + 0x20]
	0x0324887C STP X20, X19, [X31 + 0x30]
	0x03248880 ADRP X22, 0x1194000
	0x03248884 LDRB W8, [X22 + 0x476]
	0x03248888 MOV W20, W2
	0x0324888C MOV X19, X1
	0x03248890 MOV X21, X0
	0x03248894 TBNZ X8, 0x0, 0x32488AC
	0x03248898 ADRP X0, 0xED9000
	0x0324889C LDR X0, [X0 + 0x8F0]
	0x032488A0 BL 0x1C16CF4
	0x032488A4 MOVZ W8, 0x1
	0x032488A8 STRB W8, [X22 + 0x476]
	0x032488AC LDR X8, [X21 + 0x10]
	0x032488B0 CBZ X8, 0x3248A34
	0x032488B4 LDRSW X9, [X19]
	0x032488B8 LDR W10, [X8 + 0x18]
	0x032488BC CMP W9, W10
	0x032488C0 B.GE 0x3248A3C
	0x032488C4 ADD W11, W9, 0x1
	0x032488C8 CMP W9, W10
	0x032488CC STR W11, [X19]
	0x032488D0 B.CS 0x3248A38
	0x032488D4 ADD X8, X8, X9
	0x032488D8 LDRB W8, [X8 + 0x20]
	0x032488DC CMP W8, 0x1
	0x032488E0 B.NE 0x3248A3C
	0x032488E4 AND W2, W20, 0x1
	0x032488E8 MOV X0, X21
	0x032488EC MOV X1, X19
	0x032488F0 BL 0x32482C0
	0x032488F4 TBZ X20, 0x0, 0x3248920
	0x032488F8 ADRP X8, 0xED9000
	0x032488FC LDR X8, [X8 + 0x8F0]
	0x03248900 MOV X23, X0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x1195000
	009 Move X24, 0xEDB000
	010 Move W8, [X22+1131]
	011 Move X24, [X24+696]
	012 Move W21, W3
	013 Move W20, W2
	014 Move X19, X1
	015 Move W23, W0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xEDB000
	021 Move X0, [X0+696]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+1131], W8
	025 Move X0, [X24]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move W0, W23
	031 Move X1, X19
	032 Move W2, W20
	033 Call Normalization.GetCanonicalHangul, X0, X1, X2
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X0, [X24]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move W0, W23
	041 Call Normalization.CharMapIdx, X0
	042 Compare W0, 0
	043 JumpIfEqual {55}
	044 Move W22, W0
	045 Move X0, [X24]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {51}
	049 Call 0x1C17DFC
	050 Move X0, [X24]
	051 Move X8, [X0+184]
	052 Move X8, [X8+8]
	053 Move W8, [X8]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Compare X19, 0
	056 JumpIfEqual {122}
	057 Move W8, [X19+24]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Add X8, X19, W20
	060 Add W0, W20, 1
	061 Move [X8+32], W23
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {67}
	065 Call 0x1C17DFC
	066 Move X0, [X24]
	067 Move X8, [X0+184]
	068 Move X8, [X8+8]
	069 Add X8, X8, W22
	070 Move W9, [X8]
	071 Compare W9, 0
	072 JumpIfEqual {113}
	073 Move W9, [X0+224]
	074 Compare W9, 0
	075 JumpIfNotEqual {82}
	076 NotImplemented "Instruction SBFM not yet implemented."
	077 Call 0x1C17DFC
	078 Move X0, [X24]
	079 Move X8, [X0+184]
	080 Move X8, [X8+8]
	081 Add X8, X23, X8
	082 Move W23, [X8]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move W8, [X0+224]
	085 Compare W8, 0
	086 JumpIfNotEqual {88}
	087 Call 0x1C17DFC
	088 Move W0, W23
	089 Move W1, W21
	090 Call Normalization.QuickCheck, X0, X1
	091 Compare W0, 0
	092 JumpIfEqual {106}
	093 Move X0, [X24]
	094 Move W8, [X0+224]
	095 Compare W8, 0
	096 JumpIfNotEqual {98}
	097 Call 0x1C17DFC
	098 Move W0, W23
	099 Move X1, X19
	100 Move W2, W20
	101 Move W3, W21
	102 Call Normalization.GetCanonical, X0, X1, X2, X3
	103 Move W20, W0
	104 Move X0, [X24]
	105 Add W22, W22, 1
	106 Compare X19, 0
	107 JumpIfEqual {122}
	108 Move W8, [X19+24]
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Add X8, X19, W20
	111 Add W20, W20, 1
	112 Move [X8+32], W23
	113 Move W0, W20
	114 Move X20, [X31+48]
	115 Move X19, [X31+56]
	116 Move X22, [X31+32]
	117 Move X21, [X31+40]
	118 Move X24, [X31+16]
	119 Move X23, [X31+24]
	120 Move X30, [X31+64]
	121 Return X0
	122 Call 0x1C17F20
	123 Call 0x1C17F28

Method: System.String Normalize(System.String source, System.Text.NormalizationForm normalizationForm)

Disassembly:
	0x032489F0 CBZ X8, 0x3248A34
	0x032489F4 LDRSW X9, [X19]
	0x032489F8 LDR W10, [X8 + 0x18]
	0x032489FC CMP W9, W10
	0x03248A00 B.CS 0x3248A38
	0x03248A04 ADD X8, X8, X9
	0x03248A08 LDRB W8, [X8 + 0x20]
	0x03248A0C CMP W8, 0x4
	0x03248A10 B.NE 0x32489C8
	0x03248A14 ADD W8, W9, 0x1
	0x03248A18 STR W8, [X19]
	0x03248A1C MOV X0, X22
	0x03248A20 LDP X20, X19, [X31 + 0x30]
	0x03248A24 LDP X22, X21, [X31 + 0x20]
	0x03248A28 LDP X24, X23, [X31 + 0x10]
	0x03248A2C LDR X30, [X31], #0x40
	0x03248A30 RET
	0x03248A34 BL 0x1C16F20
	0x03248A38 BL 0x1C16F28
	0x03248A3C ADRP X0, 0xEDA000
	0x03248A40 LDR X0, [X0 + 0xB60]
	0x03248A44 BL 0x1C16D08
	0x03248A48 BL 0x1C16F10
	0x03248A4C MOV X19, X0
	0x03248A50 BL 0x3247F9C
	0x03248A54 ADRP X0, 0xEDA000
	0x03248A58 LDR X0, [X0 + 0xB78]
	0x03248A5C BL 0x1C16D08
	0x03248A60 MOV X1, X0
	0x03248A64 MOV X0, X19
	0x03248A68 BL 0x1C16DEC
	0x03248A6C MOV X2, X31
	0x03248A70 B 0x3249108
	0x03248A74 STP X30, X23, [X31 - 0x30]!
	0x03248A78 STP X22, X21, [X31 + 0x10]
	0x03248A7C STP X20, X19, [X31 + 0x20]
	0x03248A80 ADRP X22, 0x1194000
	0x03248A84 LDRB W8, [X22 + 0x47B]
	0x03248A88 MOV X20, X2
	0x03248A8C MOV X19, X1
	0x03248A90 MOV X21, X0
	0x03248A94 TBNZ X8, 0x0, 0x3248AB8
	0x03248A98 ADRP X0, 0xED8000
	0x03248A9C LDR X0, [X0 + 0xBA0]
	0x03248AA0 BL 0x1C16CF4
	0x03248AA4 ADRP X0, 0xEDA000
	0x03248AA8 LDR X0, [X0 + 0xB80]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1195000
	006 Move W8, [X21+1132]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xEDB000
	014 Move X0, [X0+696]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1132], W8
	018 Move X8, 0xEDB000
	019 Move X8, [X8+696]
	020 NotImplemented "Instruction CMP not yet implemented."
	021 NotImplemented "Instruction CMP not yet implemented."
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X0, [X8]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move W1, 3
	029 Move X0, [X8]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move W1, 1
	035 Move X0, [X8]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move W1, 2
	041 Move X0, [X8]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move W1, W31
	047 Move X0, X19
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]

Method: System.String Normalize(System.String source, System.Int32 type)

Disassembly:
	0x03248AAC BL 0x1C16CF4
	0x03248AB0 MOVZ W8, 0x1
	0x03248AB4 STRB W8, [X22 + 0x47B]
	0x03248AB8 CBZ X19, 0x3248B40
	0x03248ABC CBZ X20, 0x3248B60
	0x03248AC0 MOV X0, X21
	0x03248AC4 MOV X1, X19
	0x03248AC8 BL 0x3249618
	0x03248ACC CBNZ X0, 0x3248BA8
	0x03248AD0 ADRP X23, 0xEDA000
	0x03248AD4 LDR X22, [X21 + 0x20]
	0x03248AD8 LDR X23, [X23 + 0xB80]
	0x03248ADC CBNZ X22, 0x3248B00
	0x03248AE0 ADRP X8, 0xED8000
	0x03248AE4 LDR X8, [X8 + 0xBA0]
	0x03248AE8 LDR X0, [X8]
	0x03248AEC BL 0x1C16F10
	0x03248AF0 MOV X1, X31
	0x03248AF4 MOV X22, X0
	0x03248AF8 BL 0x3351F5C
	0x03248AFC STR X22, [X21 + 0x20]
	0x03248B00 LDR X0, [X23]
	0x03248B04 BL 0x1C16F10
	0x03248B08 MOV X1, X19
	0x03248B0C MOV X2, X20
	0x03248B10 MOV X21, X0
	0x03248B14 BL 0x324991C
	0x03248B18 CBZ X22, 0x3248C04
	0x03248B1C LDR X8, [X22]
	0x03248B20 MOV X0, X22
	0x03248B24 MOV X1, X21
	0x03248B28 LDP X20, X19, [X31 + 0x20]
	0x03248B2C LDR X3, [X8 + 0x308]
	0x03248B30 LDR X2, [X8 + 0x310]
	0x03248B34 LDP X22, X21, [X31 + 0x10]
	0x03248B38 LDP X30, X23, [X31], #0x30
	0x03248B3C BR X3
	0x03248B40 ADRP X0, 0xEB0000
	0x03248B44 LDR X0, [X0 + 0x528]
	0x03248B48 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1195000
	006 Move W8, [X21+1133]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xEDB000
	014 Move X0, [X0+696]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1133], W8
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction CMP not yet implemented."
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move X8, 0xEDB000
	022 Move X8, [X8+696]
	023 Move X0, [X8]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move W1, W19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Call Normalization.Decompose, X0, X1
	035 Return X0
	036 Move X8, 0xEDB000
	037 Move X8, [X8+696]
	038 Move X0, [X8]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X20
	044 Move W1, W19
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call Normalization.Compose, X0, X1
	050 Return X0

Method: System.Void load_normalization_resource(out System.IntPtr props, out System.IntPtr mappedChars, out System.IntPtr charMapIndex, out System.IntPtr helperIndex, out System.IntPtr mapIdxToComposite, out System.IntPtr combiningClass)

Disassembly:
	0x03248B4C BL 0x1C16F10

ISIL:
	001 Call 0x1CB8510
	002 Return 

Method: System.Void .cctor()

Disassembly:
	0x03248B50 MOV X19, X0
	0x03248B54 ADRP X0, 0xEB3000
	0x03248B58 LDR X0, [X0 + 0x588]
	0x03248B5C B 0x3248B7C
	0x03248B60 ADRP X0, 0xEB0000
	0x03248B64 LDR X0, [X0 + 0x528]
	0x03248B68 BL 0x1C16D08
	0x03248B6C BL 0x1C16F10
	0x03248B70 MOV X19, X0
	0x03248B74 ADRP X0, 0xEB5000
	0x03248B78 LDR X0, [X0 + 0xEC8]
	0x03248B7C BL 0x1C16D08
	0x03248B80 MOV X1, X0
	0x03248B84 MOV X0, X19
	0x03248B88 MOV X2, X31
	0x03248B8C BL 0x330E100
	0x03248B90 ADRP X0, 0xEDA000
	0x03248B94 LDR X0, [X0 + 0xB88]
	0x03248B98 BL 0x1C16D08
	0x03248B9C MOV X1, X0
	0x03248BA0 MOV X0, X19
	0x03248BA4 BL 0x1C16DEC
	0x03248BA8 ADRP X0, 0xEDA000
	0x03248BAC LDR X0, [X0 + 0xB90]
	0x03248BB0 BL 0x1C16D08
	0x03248BB4 MOV X1, X19
	0x03248BB8 MOV X2, X31
	0x03248BBC BL 0x321B938
	0x03248BC0 MOV X1, X31
	0x03248BC4 BL 0x320A160
	0x03248BC8 MOV X19, X0
	0x03248BCC ADRP X0, 0xEB3000
	0x03248BD0 LDR X0, [X0 + 0x578]
	0x03248BD4 BL 0x1C16D08
	0x03248BD8 BL 0x1C16F10
	0x03248BDC MOV X1, X19
	0x03248BE0 MOV X2, X31
	0x03248BE4 MOV X20, X0
	0x03248BE8 BL 0x3314A68
	0x03248BEC ADRP X0, 0xEDA000
	0x03248BF0 LDR X0, [X0 + 0xB88]
	0x03248BF4 BL 0x1C16D08
	0x03248BF8 MOV X1, X0
	0x03248BFC MOV X0, X20
	0x03248C00 BL 0x1C16DEC
	0x03248C04 BL 0x1C16F20
	0x03248C08 STP X30, X21, [X31 - 0x20]!
	0x03248C0C STP X20, X19, [X31 + 0x10]
	0x03248C10 ADRP X21, 0x1194000
	0x03248C14 LDRB W8, [X21 + 0x47C]
	0x03248C18 MOV X19, X1
	0x03248C1C MOV X20, X0
	0x03248C20 TBNZ X8, 0x0, 0x3248C38
	0x03248C24 ADRP X0, 0xED8000
	0x03248C28 LDR X0, [X0 + 0xBA0]
	0x03248C2C BL 0x1C16CF4
	0x03248C30 MOVZ W8, 0x1
	0x03248C34 STRB W8, [X21 + 0x47C]
	0x03248C38 CBZ X19, 0x3248C88
	0x03248C3C LDR X21, [X20 + 0x28]
	0x03248C40 CBNZ X21, 0x3248C68
	0x03248C44 ADRP X8, 0xED8000
	0x03248C48 LDR X8, [X8 + 0xBA0]
	0x03248C4C LDR X0, [X8]
	0x03248C50 BL 0x1C16F10
	0x03248C54 MOV X1, X31
	0x03248C58 MOV X21, X0
	0x03248C5C BL 0x3351F5C
	0x03248C60 STR X21, [X20 + 0x28]
	0x03248C64 CBZ X21, 0x3248CD0
	0x03248C68 LDR X8, [X21]
	0x03248C6C MOV X1, X19
	0x03248C70 LDP X20, X19, [X31 + 0x10]
	0x03248C74 MOV X0, X21
	0x03248C78 LDR X3, [X8 + 0x308]
	0x03248C7C LDR X2, [X8 + 0x310]
	0x03248C80 LDP X30, X21, [X31], #0x20
	0x03248C84 BR X3
	0x03248C88 ADRP X0, 0xEB0000
	0x03248C8C LDR X0, [X0 + 0x528]
	0x03248C90 BL 0x1C16D08
	0x03248C94 BL 0x1C16F10
	0x03248C98 MOV X19, X0
	0x03248C9C ADRP X0, 0xEDA000
	0x03248CA0 LDR X0, [X0 + 0xB98]
	0x03248CA4 BL 0x1C16D08
	0x03248CA8 MOV X1, X0
	0x03248CAC MOV X0, X19
	0x03248CB0 MOV X2, X31
	0x03248CB4 BL 0x330E100
	0x03248CB8 ADRP X0, 0xEDA000
	0x03248CBC LDR X0, [X0 + 0xBA0]
	0x03248CC0 BL 0x1C16D08
	0x03248CC4 MOV X1, X0
	0x03248CC8 MOV X0, X19
	0x03248CCC BL 0x1C16DEC
	0x03248CD0 BL 0x1C16F20
	0x03248CD4 STP X30, X19, [X31 - 0x10]!
	0x03248CD8 MOV X1, X31
	0x03248CDC MOV X19, X0
	0x03248CE0 BL 0x33BDD8C
	0x03248CE4 MOVZ W1, 0x8
	0x03248CE8 MOV X0, X19
	0x03248CEC MOV W2, W31
	0x03248CF0 LDP X30, X19, [X31], #0x10
	0x03248CF4 B 0x3248CF8
	0x03248CF8 STR X30, [X31 - 0x30]!
	0x03248CFC STP X22, X21, [X31 + 0x10]
	0x03248D00 STP X20, X19, [X31 + 0x20]
	0x03248D04 ADRP X22, 0x1194000
	0x03248D08 LDRB W8, [X22 + 0x477]
	0x03248D0C MOV W20, W2
	0x03248D10 MOV W21, W1
	0x03248D14 MOV X19, X0
	0x03248D18 TBNZ X8, 0x0, 0x3248D3C
	0x03248D1C ADRP X0, 0xEAB000
	0x03248D20 LDR X0, [X0 + 0x618]
	0x03248D24 BL 0x1C16CF4
	0x03248D28 ADRP X0, 0xEAB000
	0x03248D2C LDR X0, [X0 + 0x5A8]
	0x03248D30 BL 0x1C16CF4
	0x03248D34 MOVZ W8, 0x1
	0x03248D38 STRB W8, [X22 + 0x477]
	0x03248D3C CMP W21, 0x10000
	0x03248D40 B.HI 0x3248E18

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+64], X22
	004 Move [X31+72], X21
	005 Move [X31+80], X20
	006 Move [X31+88], X19
	007 Move X20, 0x1195000
	008 Move X19, 0xEB2000
	009 Move X22, 0xEDB000
	010 Move W8, [X20+1134]
	011 Move X19, [X19+3264]
	012 Move X22, [X22+696]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xEDB000
	018 Move X0, [X0+696]
	019 Call 0x1C17CF4
	020 Move X0, 0xEB2000
	021 Move X0, [X0+3264]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+1134], W8
	025 Move X0, [X19]
	026 Move [X31+56], X31
	027 Move [X31+32], X31
	028 Move [X31+40], X31
	029 Move [X31+16], X31
	030 Move [X31+24], X31
	031 Move [X31+8], X31
	032 Call 0x1C17F10
	033 Move X1, X31
	034 Move X19, X0
	035 Call Object..ctor, X0
	036 Move X8, [X22]
	037 Move X8, [X8+184]
	038 Move [X8+48], X19
	039 Move [X31+4], W31
	040 Add X1, X31, 4
	041 Move X0, X19
	042 Move X2, X31
	043 Call Monitor.Enter, X0, X1
	044 Add X0, X31, 56
	045 Add X1, X31, 40
	046 Add X2, X31, 32
	047 Add X3, X31, 24
	048 Add X4, X31, 16
	049 Add X5, X31, 8
	050 Call 0x1CB8510
	051 Move X0, [X31+56]
	052 Move X1, X31
	053 Call IntPtr.op_Explicit, X0
	054 Move X8, [X22]
	055 Move X8, [X8+184]
	056 Move [X8], X0
	057 Move X0, [X31+40]
	058 Move X1, X31
	059 Call IntPtr.op_Explicit, X0
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+8], X0
	063 Move X0, [X31+32]
	064 Move X1, X31
	065 Call IntPtr.op_Explicit, X0
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+16], X0
	069 Move X0, [X31+24]
	070 Move X1, X31
	071 Call IntPtr.op_Explicit, X0
	072 Move X8, [X22]
	073 Move X8, [X8+184]
	074 Move [X8+24], X0
	075 Move X0, [X31+16]
	076 Move X1, X31
	077 Call IntPtr.op_Explicit, X0
	078 Move X8, [X22]
	079 Move X8, [X8+184]
	080 Move [X8+32], X0
	081 Move X0, [X31+8]
	082 Move X1, X31
	083 Call IntPtr.op_Explicit, X0
	084 Move X8, [X22]
	085 Move X20, X31
	086 Move X8, [X8+184]
	087 Move [X8+40], X0
	088 Move W8, [X31+4]
	089 Compare W8, 0
	090 JumpIfEqual {94}
	091 Move X0, X19
	092 Move X1, X31
	093 Call Monitor.Exit, X0
	094 Compare X20, 0
	095 JumpIfNotEqual {107}
	096 Move X8, [X22]
	097 Move X20, [X31+80]
	098 Move X19, [X31+88]
	099 Move X22, [X31+64]
	100 Move X21, [X31+72]
	101 Move X30, [X31+48]
	102 Move X8, [X8+184]
	103 Move W9, 1
	104 Move [X8+56], W9
	105 Add X31, X31, 96
	106 Return 
	107 Move X0, X20
	108 Call 0x1C17F18
	109 Move X21, X0
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Move X0, X21
	112 Call 0x3EB2AD0
	113 Move X20, [X0]
	114 Call 0x3EB2AE0
	115 Move X20, X31
	116 Move X21, X0
	117 Move W8, [X31+4]
	118 Compare W8, 0
	119 JumpIfEqual {123}
	120 Move X0, X19
	121 Move X1, X31
	122 Call Monitor.Exit, X0
	123 Compare X20, 0
	124 JumpIfNotEqual {127}
	125 Move X0, X21
	126 Call 0x1D2D690
	127 Move X0, X20
	128 Call 0x1C17F18
	129 Call 0x1991590

