Type: System.Text.Encoding/EncodingCharBuffer

Method: System.Void .ctor(System.Text.Encoding enc, System.Text.DecoderNLS decoder, System.Char* charStart, System.Int32 charCount, System.Byte* byteStart, System.Int32 byteCount)

Disassembly:
	0x03246DD8 LDR W8, [X0 + 0xE0]
	0x03246DDC CBNZ W8, 0x3246DE4
	0x03246DE0 BL 0x1C16DFC
	0x03246DE4 MOV X0, X21
	0x03246DE8 MOV X1, X19
	0x03246DEC MOV W2, W23
	0x03246DF0 BL 0x3247124
	0x03246DF4 ADD W8, W25, W27
	0x03246DF8 CMP W8, 0x12
	0x03246DFC MOV W24, W0
	0x03246E00 B.HI 0x3246E14
	0x03246E04 MOVN W9, 0x1160
	0x03246E08 ADD W9, W24, W9
	0x03246E0C CMP W9, 0x14
	0x03246E10 B.LS 0x3246E74
	0x03246E14 ADD W8, W25, W28
	0x03246E18 UBFM W9, W8, 0x2, 0x1F
	0x03246E1C CMP W9, 0xAE8
	0x03246E20 B.HI 0x3246E6C
	0x03246E24 MOVZ W9, 0x2493
	0x03246E28 MOVK W9, 0x92490000
	0x03246E2C SMADDL X9, X8, X9, X31
	0x03246E30 UBFM X9, X9, 0x20, 0x3F
	0x03246E34 ADD W9, W9, W8
	0x03246E38 SBFM W10, W9, 0x4, 0x1F
	0x03246E3C ADD W9, W10, W9, 0x1F, LSR
	0x03246E40 MSUB W8, W9, W29, W8
	0x03246E44 CBNZ W8, 0x3246E6C
	0x03246E48 MOVN W8, 0x11A7
	0x03246E4C ADD W8, W24, W8
	0x03246E50 CMP W8, 0x1A
	0x03246E54 B.HI 0x3246E6C
	0x03246E58 CBZ X21, 0x3246EC8
	0x03246E5C ADD W8, W25, W24
	0x03246E60 MOVN W9, 0x11A6
	0x03246E64 ADD W24, W8, W9
	0x03246E68 B 0x3246E88
	0x03246E6C MOV W20, W23
	0x03246E70 B 0x3246EB4
	0x03246E74 CBZ X21, 0x3246EC8
	0x03246E78 MOVZ W10, 0x15
	0x03246E7C MADD W8, W8, W10, W9

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, X1
	010 Move X1, X31
	011 Move W22, W6
	012 Move X23, X5
	013 Move W24, W4
	014 Move X25, X3
	015 Move X21, X2
	016 Move X19, X0
	017 Call Object..ctor, X0
	018 Add X8, X25, W24
	019 Add X9, X23, W22
	020 Move [X19+48], X20
	021 Move [X19+56], X21
	022 Move [X19+16], X25
	023 Move [X19+24], X25
	024 Move [X19+32], X8
	025 Move [X19+64], X23
	026 Move [X19+72], X9
	027 Move [X19+80], X23
	028 Compare X21, 0
	029 JumpIfEqual {33}
	030 Move X0, X21
	031 Move X1, X31
	032 Call Decoder.get_FallbackBuffer, X0
	033 Compare X20, 0
	034 JumpIfEqual {58}
	035 Move X0, [X20+48]
	036 Compare X0, 0
	037 JumpIfEqual {58}
	038 Move X8, [X0]
	039 Move X9, [X8+376]
	040 Move X1, [X8+384]
	041 NotImplemented "Instruction BLR not yet implemented."
	042 Move [X19+88], X0
	043 Compare X0, 0
	044 JumpIfEqual {58}
	045 Move X2, [X19+32]
	046 Move X1, [X19+80]
	047 Move X20, [X31+48]
	048 Move X19, [X31+56]
	049 Move X22, [X31+32]
	050 Move X21, [X31+40]
	051 Move X24, [X31+16]
	052 Move X23, [X31+24]
	053 Move X3, X31
	054 Move X30, [X31+64]
	055 Move X25, [X31+72]
	056 Call DecoderFallbackBuffer.InternalInitialize, X0, X1, X2
	057 Return 
	058 Call 0x1C17F20

Method: System.Boolean AddChar(System.Char ch, System.Int32 numBytes)

Disassembly:
	0x03246E80 MOVZ W9, 0xAC00
	0x03246E84 MADD W24, W8, W29, W9
	0x03246E88 MOV X0, X21
	0x03246E8C MOV W1, W20
	0x03246E90 MOV W2, W24
	0x03246E94 MOV X3, X31
	0x03246E98 BL 0x3232F10
	0x03246E9C MOVZ W2, 0x1
	0x03246EA0 MOV X0, X21
	0x03246EA4 MOV W1, W23
	0x03246EA8 MOV X3, X31
	0x03246EAC BL 0x3233A34
	0x03246EB0 SUB W22, W22, 0x1
	0x03246EB4 ADD W23, W20, 0x1
	0x03246EB8 CMP W23, W22
	0x03246EBC MOV W25, W24
	0x03246EC0 B.LT 0x3246DD4
	0x03246EC4 B 0x3246ECC
	0x03246EC8 MOVN W22, 0x0
	0x03246ECC MOV W0, W22
	0x03246ED0 LDP X20, X19, [X31 + 0x50]
	0x03246ED4 LDP X22, X21, [X31 + 0x40]
	0x03246ED8 LDP X24, X23, [X31 + 0x30]
	0x03246EDC LDP X26, X25, [X31 + 0x20]
	0x03246EE0 LDP X28, X27, [X31 + 0x10]
	0x03246EE4 LDP X29, X30, [X31], #0x60
	0x03246EE8 RET
	0x03246EEC BL 0x1C16F20

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move X9, [X0+32]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Add X9, X8, 2
	008 Move [X0+16], X9
	009 NotImplemented "Instruction STRH not yet implemented."
	010 Move W8, [X0+40]
	011 Add W8, W8, 1
	012 Move [X0+40], W8
	013 Move W0, 1
	014 Move X9, [X0+80]
	015 Move X8, [X0+48]
	016 Subtract X9, X9, W2
	017 Move [X0+80], X9
	018 Compare X8, 0
	019 JumpIfEqual {29}
	020 Move X1, [X0+56]
	021 Move X10, [X0+64]
	022 Move X0, X8
	023 NotImplemented "Instruction CMP not yet implemented."
	024 NotImplemented "Instruction CSET not yet implemented."
	025 Call Encoding.ThrowCharsOverflow, X0, X1, X2
	026 Move W0, W31
	027 Move X30, [X31+16]
	028 Return X0
	029 Call 0x1C17F20

Method: System.Boolean AddChar(System.Char ch)

Disassembly:
	0x03246EF0 SUB X31, X31, 0x70
	0x03246EF4 STP X29, X30, [X31 + 0x10]

ISIL:
	001 Move W2, 1
	002 Call EncodingCharBuffer.AddChar, X0, X1, X2
	003 Return X0

Method: System.Void AdjustBytes(System.Int32 count)

Disassembly:
	0x03246EF8 STP X28, X27, [X31 + 0x20]
	0x03246EFC STP X26, X25, [X31 + 0x30]
	0x03246F00 STP X24, X23, [X31 + 0x40]
	0x03246F04 STP X22, X21, [X31 + 0x50]

ISIL:
	001 Move X8, [X0+80]
	002 Add X8, X8, W1
	003 Move [X0+80], X8
	004 Return 

Method: System.Boolean get_MoreData()

Disassembly:
	0x03246F08 STP X20, X19, [X31 + 0x60]
	0x03246F0C ADRP X22, 0x1196000
	0x03246F10 ADRP X29, 0xEDC000
	0x03246F14 LDRB W8, [X22 + 0x464]

ISIL:
	001 Move X9, [X0+72]
	002 Move X8, [X0+80]
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Return X0

Method: System.Byte GetNextByte()

Disassembly:
	0x03246F18 LDR X29, [X29 + 0x2B8]
	0x03246F1C MOV W19, W2
	0x03246F20 MOV X21, X1
	0x03246F24 MOV X20, X0
	0x03246F28 TBNZ X8, 0x0, 0x3246F40
	0x03246F2C ADRP X0, 0xEDC000
	0x03246F30 LDR X0, [X0 + 0x2B8]
	0x03246F34 BL 0x1C16CF4
	0x03246F38 MOVZ W8, 0x1

ISIL:
	001 Move X9, [X0+72]
	002 Move X8, [X0+80]
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Add X9, X8, 1
	005 Move [X0+80], X9
	006 Move W0, [X8]
	007 Return X0
	008 Move W0, W31
	009 Return X0

Method: System.Int32 get_BytesUsed()

Disassembly:
	0x03246F3C STRB W8, [X22 + 0x464]
	0x03246F40 LDR X0, [X29]
	0x03246F44 LDR W8, [X0 + 0xE0]
	0x03246F48 CBNZ W8, 0x3246F50

ISIL:
	001 Move W8, [X0+80]
	002 Move W9, [X0+64]
	003 Subtract W0, W8, W9
	004 Return X0

Method: System.Boolean Fallback(System.Byte fallbackByte)

Disassembly:
	0x03246F4C BL 0x1C16DFC
	0x03246F50 MOV X0, X20
	0x03246F54 MOV X1, X21
	0x03246F58 MOV W2, W19
	0x03246F5C SUB W22, W19, 0x1
	0x03246F60 BL 0x3247124
	0x03246F64 BL 0x32465A8
	0x03246F68 ANDS W31, W0, 0xFF
	0x03246F6C B.EQ 0x3246FB4
	0x03246F70 TBNZ X22, 0x1F, 0x324702C
	0x03246F74 MOV W22, W19
	0x03246F78 LDR X0, [X29]
	0x03246F7C SUB W22, W22, 0x1
	0x03246F80 LDR W8, [X0 + 0xE0]
	0x03246F84 CBNZ W8, 0x3246F8C
	0x03246F88 BL 0x1C16DFC
	0x03246F8C MOV X0, X20
	0x03246F90 MOV X1, X21
	0x03246F94 MOV W2, W22
	0x03246F98 BL 0x3247124
	0x03246F9C BL 0x32465A8
	0x03246FA0 ANDS W31, W0, 0xFF
	0x03246FA4 B.EQ 0x3246FE4
	0x03246FA8 CMP W22, 0x1
	0x03246FAC B.GE 0x3246F78
	0x03246FB0 B 0x324702C
	0x03246FB4 TBNZ X22, 0x1F, 0x324702C
	0x03246FB8 LDR X0, [X29]
	0x03246FBC LDR W8, [X0 + 0xE0]
	0x03246FC0 CBNZ W8, 0x3246FC8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1197000
	007 Move X22, 0xEAE000
	008 Move W8, [X21+1114]
	009 Move X22, [X22+1560]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEAE000
	017 Move X0, [X0+1560]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1114], W8
	021 Move X0, [X22]
	022 Move W1, 1
	023 Call 0x1C17D6C
	024 Compare X0, 0
	025 JumpIfEqual {37}
	026 Move W8, [X0+24]
	027 Move X1, X0
	028 Compare W8, 0
	029 JumpIfEqual {38}
	030 Move [X1+32], W20
	031 Move X0, X19
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move X30, [X31+48]
	037 Call 0x1C17F20
	038 Call 0x1C17F28

Method: System.Boolean Fallback(System.Byte[] byteBuffer)

Disassembly:
	0x03246FC4 BL 0x1C16DFC
	0x03246FC8 MOV X0, X20
	0x03246FCC MOV X1, X21
	0x03246FD0 MOV W2, W22
	0x03246FD4 BL 0x3247124
	0x03246FD8 BL 0x32465A8
	0x03246FDC ANDS W31, W0, 0xFF
	0x03246FE0 B.NE 0x324702C
	0x03246FE4 LDR X0, [X29]
	0x03246FE8 LDR W8, [X0 + 0xE0]
	0x03246FEC CBNZ W8, 0x3246FF4
	0x03246FF0 BL 0x1C16DFC
	0x03246FF4 MOV X0, X20
	0x03246FF8 MOV X1, X21
	0x03246FFC MOV W2, W22
	0x03247000 BL 0x3247124
	0x03247004 STR W0, [X31 + 0xC]
	0x03247008 BL 0x32466F8
	0x0324700C CBZ W0, 0x324702C
	0x03247010 MOV W24, W0
	0x03247014 CBZ X20, 0x3247054
	0x03247018 MOV X0, X20
	0x0324701C MOV X1, X31
	0x03247020 BL 0x323260C
	0x03247024 MOV W26, W0
	0x03247028 B 0x324705C
	0x0324702C ADD W19, W19, 0x1
	0x03247030 MOV W0, W19
	0x03247034 LDP X20, X19, [X31 + 0x60]
	0x03247038 LDP X22, X21, [X31 + 0x50]
	0x0324703C LDP X24, X23, [X31 + 0x40]
	0x03247040 LDP X26, X25, [X31 + 0x30]
	0x03247044 LDP X28, X27, [X31 + 0x20]
	0x03247048 LDP X29, X30, [X31 + 0x10]
	0x0324704C ADD X31, X31, 0x70
	0x03247050 RET
	0x03247054 CBZ X21, 0x3247120
	0x03247058 LDR W26, [X21 + 0x10]
	0x0324705C ADD W25, W22, 0x1
	0x03247060 CMP W25, W26
	0x03247064 B.GE 0x32470D8
	0x03247068 MOVN W23, 0x0
	0x0324706C LDR X0, [X29]
	0x03247070 LDR W8, [X0 + 0xE0]
	0x03247074 CBNZ W8, 0x324707C
	0x03247078 BL 0x1C16DFC
	0x0324707C MOV X0, X20
	0x03247080 MOV X1, X21
	0x03247084 MOV W2, W25
	0x03247088 BL 0x3247124
	0x0324708C MOV W28, W0
	0x03247090 BL 0x32465A8
	0x03247094 CMP W23, W0, UXTB
	0x03247098 B.EQ 0x32470CC
	0x0324709C MOV W27, W0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X3, X0
	006 Add X3, X3, 16
	007 Move X21, [X3]
	008 Move X19, X0
	009 Move X20, X1
	010 Compare X21, 0
	011 JumpIfEqual {34}
	012 Move X0, [X19+88]
	013 Compare X0, 0
	014 JumpIfEqual {73}
	015 Move X8, [X0]
	016 Move X2, [X19+80]
	017 Move X1, X20
	018 Move X9, [X8+424]
	019 Move X4, [X8+432]
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {47}
	025 Move X8, [X19+16]
	026 Move W9, [X19+40]
	027 Subtract X8, X8, X21
	028 NotImplemented "Instruction CMP not yet implemented."
	029 NotImplemented "Instruction CINC not yet implemented."
	030 Move X8, X8
	031 ShiftRight X8, 1
	032 And X8, X8, 0x7FFFFFFF
	033 Add W8, W9, W8
	034 Move X0, [X19+88]
	035 Compare X0, 0
	036 JumpIfEqual {73}
	037 Move X8, [X0]
	038 Move X2, [X19+80]
	039 Move W21, [X19+40]
	040 Move X1, X20
	041 Move X9, [X8+440]
	042 Move X3, [X8+448]
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Add W8, W0, W21
	045 Move W0, 1
	046 Move [X19+40], W8
	047 Compare X20, 0
	048 JumpIfEqual {73}
	049 NotImplemented "Instruction LDRSW not yet implemented."
	050 Move X9, [X19+80]
	051 Move X0, [X19+88]
	052 Subtract X8, X9, X8
	053 Move [X19+80], X8
	054 Compare X0, 0
	055 JumpIfEqual {73}
	056 Move X1, X31
	057 Call DecoderFallbackBuffer.InternalReset, X0
	058 Move X0, [X19+48]
	059 Compare X0, 0
	060 JumpIfEqual {73}
	061 Move X9, [X19+16]
	062 Move X8, [X19+24]
	063 Move X1, [X19+56]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 NotImplemented "Instruction CSET not yet implemented."
	066 Call Encoding.ThrowCharsOverflow, X0, X1, X2
	067 Move W0, W31
	068 Move X20, [X31+16]
	069 Move X19, [X31+24]
	070 Move X30, [X31+32]
	071 Move X21, [X31+40]
	072 Return X0
	073 Call 0x1C17F20

Method: System.Int32 get_Count()

Disassembly:
	0x032470A0 LDR X0, [X29]
	0x032470A4 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move W0, [X0+40]
	002 Return X0

