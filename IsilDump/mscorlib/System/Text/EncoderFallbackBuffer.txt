Type: System.Text.EncoderFallbackBuffer

Method: System.Boolean Fallback(System.Char charUnknown, System.Int32 index)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Boolean Fallback(System.Char charUnknownHigh, System.Char charUnknownLow, System.Int32 index)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Char GetNextChar()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Boolean MovePrevious()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Int32 get_Remaining()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void Reset()

Disassembly:
	0x03400D68 MOV X20, X0
	0x03400D6C CBZ X21, 0x3400D84
	0x03400D70 LDR X8, [X20]
	0x03400D74 MOV X0, X21
	0x03400D78 LDR X1, [X8 + 0x40]
	0x03400D7C BL 0x1C16E00
	0x03400D80 CBZ X0, 0x3400E94
	0x03400D84 LDR W8, [X20 + 0x18]
	0x03400D88 CBZ W8, 0x3400E90
	0x03400D8C ADRP X23, 0xD2D000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X8, [X19]
	005 Move X0, X19
	006 Move X9, [X8+408]
	007 Move X1, [X8+416]
	008 NotImplemented "Instruction BLR not yet implemented."
	009 And W31, W0, 0xFFFF
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 

Method: System.Void InternalReset()

Disassembly:
	0x03400D90 LDR X23, [X23 + 0xD20]
	0x03400D94 STR X21, [X20 + 0x20]
	0x03400D98 LDR X0, [X23]
	0x03400D9C CBZ X0, 0x3400DB4
	0x03400DA0 LDR X8, [X20]
	0x03400DA4 LDR X1, [X8 + 0x40]

ISIL:
	001 Move X8, [X0]
	002 Move [X0+16], X31
	003 Move [X0+42], W31
	004 Move [X0+44], W31
	005 Move X2, [X8+456]
	006 Move X1, [X8+464]
	007 CallNoReturn X2

Method: System.Void InternalInitialize(System.Char* charStart, System.Char* charEnd, System.Text.EncoderNLS encoder, System.Boolean setEncoder)

Disassembly:
	0x033FCF60 MOV X4, X24
	0x033FCF64 MOV W5, W31
	0x033FCF68 BLR X9
	0x033FCF6C CMP W0, W20
	0x033FCF70 CSEL W0, W0, W20, LT
	0x033FCF74 CMP W0, 0x1
	0x033FCF78 B.LT 0x33FCFAC

ISIL:
	001 And W8, W4, 1
	002 Move [X0+16], X1
	003 Move [X0+24], X2
	004 Move [X0+32], X3
	005 NotImplemented "Instruction STURH not yet implemented."
	006 Move [X0+40], W8
	007 Move [X0+44], W31
	008 Return 

Method: System.Char InternalGetNextChar()

Disassembly:
	0x033FCF7C CBZ X24, 0x33FCFC4
	0x033FCF80 LDR W9, [X24 + 0x18]
	0x033FCF84 MOV X8, X31
	0x033FCF88 MOV W10, W0
	0x033FCF8C ADD X11, X24, 0x20
	0x033FCF90 CMP X8, X9
	0x033FCF94 B.CS 0x33FCFC0
	0x033FCF98 LDRH W12, [X11, X8, LSL #1]
	0x033FCF9C ADD X8, X8, 0x1
	0x033FCFA0 CMP X10, X8
	0x033FCFA4 STRH W12, [X19], #0x2
	0x033FCFA8 B.NE 0x33FCF90

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Move X19, X0
	005 Move X9, [X8+408]
	006 Move X1, [X8+416]
	007 NotImplemented "Instruction BLR not yet implemented."
	008 And W8, W0, 0xFFFF
	009 NotImplemented "Instruction CSET not yet implemented."
	010 Move [X19+42], W9
	011 Compare W8, 0
	012 JumpIfNotEqual {14}
	013 Move [X19+44], W31
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Return X0

Method: System.Boolean InternalFallback(System.Char ch, ref System.Char* chars)

Disassembly:
	0x03400DA8 BL 0x1C16E00
	0x03400DAC CBZ X0, 0x3400E94
	0x03400DB0 LDR W8, [X20 + 0x18]
	0x03400DB4 CMP W8, 0x1
	0x03400DB8 B.LS 0x3400E90
	0x03400DBC LDR X8, [X23]
	0x03400DC0 ADRP X9, 0xD2D000
	0x03400DC4 LDR X9, [X9 + 0xD08]
	0x03400DC8 ADD X1, X31, 0xC
	0x03400DCC STR X8, [X20 + 0x28]
	0x03400DD0 LDR W8, [X19 + 0x18]
	0x03400DD4 LDR X0, [X9]
	0x03400DD8 STR W8, [X31 + 0xC]
	0x03400DDC BL 0x1C16E04
	0x03400DE0 MOV X21, X0
	0x03400DE4 CBZ X0, 0x3400DFC
	0x03400DE8 LDR X8, [X20]
	0x03400DEC MOV X0, X21
	0x03400DF0 LDR X1, [X8 + 0x40]
	0x03400DF4 BL 0x1C16E00
	0x03400DF8 CBZ X0, 0x3400E94
	0x03400DFC LDR W8, [X20 + 0x18]
	0x03400E00 CMP W8, 0x2
	0x03400E04 B.LS 0x3400E90
	0x03400E08 STR X21, [X20 + 0x30]
	0x03400E0C LDR X0, [X22]
	0x03400E10 CBZ X0, 0x3400E28
	0x03400E14 LDR X8, [X20]
	0x03400E18 LDR X1, [X8 + 0x40]
	0x03400E1C BL 0x1C16E00
	0x03400E20 CBZ X0, 0x3400E94
	0x03400E24 LDR W8, [X20 + 0x18]
	0x03400E28 CMP W8, 0x3
	0x03400E2C B.LS 0x3400E90
	0x03400E30 LDR X8, [X22]
	0x03400E34 ADRP X21, 0xD2D000
	0x03400E38 ADRP X23, 0xD2D000
	0x03400E3C LDR X21, [X21 + 0xD10]
	0x03400E40 LDR X23, [X23 + 0xD18]
	0x03400E44 MOV X0, X20
	0x03400E48 MOV X1, X31
	0x03400E4C STR X8, [X20 + 0x38]
	0x03400E50 BL 0x3227578
	0x03400E54 LDR X2, [X19 + 0x20]
	0x03400E58 LDR X1, [X21]
	0x03400E5C LDR X3, [X22]
	0x03400E60 MOV X4, X31
	0x03400E64 BL 0x32277C4
	0x03400E68 LDR X2, [X19 + 0x28]
	0x03400E6C LDR X1, [X23]
	0x03400E70 LDR X3, [X22]
	0x03400E74 MOV X4, X31
	0x03400E78 BL 0x32277C4
	0x03400E7C LDP X20, X19, [X31 + 0x30]
	0x03400E80 LDP X22, X21, [X31 + 0x20]
	0x03400E84 LDP X24, X23, [X31 + 0x10]
	0x03400E88 LDR X30, [X31], #0x40
	0x03400E8C RET
	0x03400E90 BL 0x1C16F28
	0x03400E94 BL 0x1C16F44
	0x03400E98 MOV X1, X31
	0x03400E9C BL 0x1C16DEC
	0x03400EA0 BL 0x1C16F20
	0x03400EA4 MOV X1, X31
	0x03400EA8 B 0x33BDD8C
	0x03400EAC LDR X0, [X0 + 0x10]
	0x03400EB0 RET
	0x03400EB4 STR X1, [X0 + 0x10]
	0x03400EB8 RET
	0x03400EBC LDR W0, [X0 + 0x18]
	0x03400EC0 RET
	0x03400EC4 LDR W0, [X0 + 0x18]
	0x03400EC8 RET
	0x03400ECC STR W1, [X0 + 0x18]
	0x03400ED0 RET
	0x03400ED4 LDR X0, [X0 + 0x20]
	0x03400ED8 RET
	0x03400EDC STR X1, [X0 + 0x20]
	0x03400EE0 RET
	0x03400EE4 LDR X0, [X0 + 0x28]
	0x03400EE8 RET
	0x03400EEC STR X1, [X0 + 0x28]
	0x03400EF0 RET
	0x03400EF4 STR X30, [X31 - 0x40]!
	0x03400EF8 STP X24, X23, [X31 + 0x10]
	0x03400EFC STP X22, X21, [X31 + 0x20]
	0x03400F00 STP X20, X19, [X31 + 0x30]
	0x03400F04 ADRP X23, 0xFDD000
	0x03400F08 ADRP X24, 0xCF3000
	0x03400F0C ADRP X21, 0xD2D000
	0x03400F10 ADRP X22, 0xCF3000
	0x03400F14 ADRP X20, 0xCF3000
	0x03400F18 LDRB W8, [X23 + 0x50C]
	0x03400F1C LDR X24, [X24 + 0x988]
	0x03400F20 LDR X21, [X21 + 0xD00]
	0x03400F24 LDR X22, [X22 + 0x838]
	0x03400F28 LDR X20, [X20 + 0x9D0]
	0x03400F2C MOV X19, X0
	0x03400F30 TBNZ X8, 0x0, 0x3400F9C
	0x03400F34 ADRP X0, 0xD2D000
	0x03400F38 LDR X0, [X0 + 0xD08]
	0x03400F3C BL 0x1C16CF4
	0x03400F40 ADRP X0, 0xCF3000
	0x03400F44 LDR X0, [X0 + 0x9D0]
	0x03400F48 BL 0x1C16CF4
	0x03400F4C ADRP X0, 0xD2D000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xFDE000
	009 Move X24, 0xCF6000
	010 Move W8, [X21+1279]
	011 Move X24, [X24+368]
	012 Move X22, X2
	013 Move W20, W1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xCF6000
	020 Move X0, [X0+368]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1279], W8
	024 Move X8, [X22]
	025 Move X9, [X19+16]
	026 Move X0, [X24]
	027 Subtract X8, X8, X9
	028 Move W9, [X0+224]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction CINC not yet implemented."
	031 Move X8, X8
	032 ShiftRight X8, 1
	033 And X8, X8, 0x7FFFFFFF
	034 Subtract W21, W8, 1
	035 Compare W9, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move W0, W20
	039 Move X1, X31
	040 Call Char.IsHighSurrogate, X0
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {85}
	045 Move X8, [X22]
	046 Move X9, [X19+24]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X0, [X24]
	049 NotImplemented "Instruction LDRH not yet implemented."
	050 Move W9, [X0+224]
	051 Compare W9, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move W0, W23
	055 Move X1, X31
	056 Call Char.IsLowSurrogate, X0
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {85}
	061 Move W8, [X19+42]
	062 Compare W8, 0
	063 JumpIfEqual {68}
	064 Move W8, [X19+44]
	065 Add W9, W8, 1
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move [X19+44], W9
	068 Move X8, [X22]
	069 Move X0, X19
	070 Move W1, W20
	071 Move W2, W23
	072 Add X8, X8, 2
	073 Move [X22], X8
	074 Move X8, [X19]
	075 Move W3, W21
	076 Move X9, [X8+392]
	077 Move X4, [X8+400]
	078 NotImplemented "Instruction BLR not yet implemented."
	079 Move X8, [X19+32]
	080 Compare X8, 0
	081 JumpIfEqual {85}
	082 Move W9, [X8+48]
	083 Compare W9, 0
	084 JumpIfEqual {110}
	085 Move W8, [X19+42]
	086 Compare W8, 0
	087 JumpIfEqual {92}
	088 Move W8, [X19+44]
	089 Add W9, W8, 1
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move [X19+44], W9
	092 Move X8, [X19]
	093 Move X0, X19
	094 Move W1, W20
	095 Move W2, W21
	096 Move X9, [X8+376]
	097 Move X3, [X8+384]
	098 NotImplemented "Instruction BLR not yet implemented."
	099 And W8, W0, 1
	100 Move [X19+42], W8
	101 Move X20, [X31+48]
	102 Move X19, [X31+56]
	103 Move X22, [X31+32]
	104 Move X21, [X31+40]
	105 Move X24, [X31+16]
	106 Move X23, [X31+24]
	107 And W0, W0, 1
	108 Move X30, [X31+64]
	109 Return X0
	110 Move W9, [X19+40]
	111 Compare W9, 0
	112 JumpIfEqual {116}
	113 Move W9, 1
	114 Move [X19+41], W9
	115 NotImplemented "Instruction STRH not yet implemented."
	116 Move W0, W31
	117 Move [X19+42], W31
	118 And W1, W20, 0xFFFF
	119 Call EncoderFallbackBuffer.ThrowLastCharRecursive, X0, X1
	120 Move X0, [X24]
	121 Call 0x19913D0
	122 Move W0, W20
	123 Move W1, W23
	124 Move X2, X31
	125 Call Char.ConvertToUtf32, X0, X1
	126 Move W1, W0
	127 Call EncoderFallbackBuffer.ThrowLastCharRecursive, X0, X1

Method: System.Void ThrowLastCharRecursive(System.Int32 charRecursive)

Disassembly:
	0x03400F50 LDR X0, [X0 + 0xD10]
	0x03400F54 BL 0x1C16CF4
	0x03400F58 ADRP X0, 0xD2D000
	0x03400F5C LDR X0, [X0 + 0xD18]
	0x03400F60 BL 0x1C16CF4
	0x03400F64 ADRP X0, 0xCF3000
	0x03400F68 LDR X0, [X0 + 0x838]
	0x03400F6C BL 0x1C16CF4
	0x03400F70 ADRP X0, 0xD2D000
	0x03400F74 LDR X0, [X0 + 0xD00]
	0x03400F78 BL 0x1C16CF4
	0x03400F7C ADRP X0, 0xD2D000
	0x03400F80 LDR X0, [X0 + 0xD20]
	0x03400F84 BL 0x1C16CF4
	0x03400F88 ADRP X0, 0xCF3000
	0x03400F8C LDR X0, [X0 + 0x988]
	0x03400F90 BL 0x1C16CF4
	0x03400F94 MOVZ W8, 0x1
	0x03400F98 STRB W8, [X23 + 0x50C]
	0x03400F9C LDR X0, [X24]
	0x03400FA0 LDR X2, [X19 + 0x10]
	0x03400FA4 LDR X1, [X21]
	0x03400FA8 LDR X3, [X22]
	0x03400FAC MOV X4, X31
	0x03400FB0 BL 0x32277C4
	0x03400FB4 LDR X8, [X20]
	0x03400FB8 MOV X21, X0
	0x03400FBC MOVZ W1, 0x4
	0x03400FC0 MOV X0, X8
	0x03400FC4 BL 0x1C16D6C
	0x03400FC8 CBZ X0, 0x3401104
	0x03400FCC MOV X20, X0
	0x03400FD0 CBZ X21, 0x3400FE8
	0x03400FD4 LDR X8, [X20]
	0x03400FD8 MOV X0, X21
	0x03400FDC LDR X1, [X8 + 0x40]
	0x03400FE0 BL 0x1C16E00
	0x03400FE4 CBZ X0, 0x34010F8
	0x03400FE8 LDR W8, [X20 + 0x18]
	0x03400FEC CBZ W8, 0x34010F4
	0x03400FF0 ADRP X23, 0xD2D000
	0x03400FF4 LDR X23, [X23 + 0xD20]
	0x03400FF8 STR X21, [X20 + 0x20]
	0x03400FFC LDR X0, [X23]
	0x03401000 CBZ X0, 0x3401018
	0x03401004 LDR X8, [X20]
	0x03401008 LDR X1, [X8 + 0x40]
	0x0340100C BL 0x1C16E00
	0x03401010 CBZ X0, 0x34010F8
	0x03401014 LDR W8, [X20 + 0x18]
	0x03401018 CMP W8, 0x1
	0x0340101C B.LS 0x34010F4
	0x03401020 LDR X8, [X23]
	0x03401024 ADRP X9, 0xD2C000
	0x03401028 LDR X9, [X9 + 0xD08]
	0x0340102C ADD X1, X31, 0xC
	0x03401030 STR X8, [X20 + 0x28]
	0x03401034 LDR W8, [X19 + 0x18]
	0x03401038 LDR X0, [X9]
	0x0340103C STR W8, [X31 + 0xC]
	0x03401040 BL 0x1C16E04
	0x03401044 MOV X21, X0
	0x03401048 CBZ X0, 0x3401060
	0x0340104C LDR X8, [X20]
	0x03401050 MOV X0, X21
	0x03401054 LDR X1, [X8 + 0x40]
	0x03401058 BL 0x1C16E00
	0x0340105C CBZ X0, 0x34010F8
	0x03401060 LDR W8, [X20 + 0x18]
	0x03401064 CMP W8, 0x2
	0x03401068 B.LS 0x34010F4
	0x0340106C STR X21, [X20 + 0x30]
	0x03401070 LDR X0, [X22]
	0x03401074 CBZ X0, 0x340108C
	0x03401078 LDR X8, [X20]
	0x0340107C LDR X1, [X8 + 0x40]
	0x03401080 BL 0x1C16E00
	0x03401084 CBZ X0, 0x34010F8
	0x03401088 LDR W8, [X20 + 0x18]
	0x0340108C CMP W8, 0x3
	0x03401090 B.LS 0x34010F4
	0x03401094 LDR X8, [X22]
	0x03401098 ADRP X21, 0xD2C000
	0x0340109C ADRP X23, 0xD2C000
	0x034010A0 LDR X21, [X21 + 0xD10]
	0x034010A4 LDR X23, [X23 + 0xD18]
	0x034010A8 MOV X0, X20
	0x034010AC MOV X1, X31
	0x034010B0 STR X8, [X20 + 0x38]
	0x034010B4 BL 0x3227578
	0x034010B8 LDR X2, [X19 + 0x20]
	0x034010BC LDR X1, [X21]
	0x034010C0 LDR X3, [X22]
	0x034010C4 MOV X4, X31
	0x034010C8 BL 0x32277C4
	0x034010CC LDR X2, [X19 + 0x28]
	0x034010D0 LDR X1, [X23]
	0x034010D4 LDR X3, [X22]
	0x034010D8 MOV X4, X31
	0x034010DC BL 0x32277C4
	0x034010E0 LDP X20, X19, [X31 + 0x30]
	0x034010E4 LDP X22, X21, [X31 + 0x20]
	0x034010E8 LDP X24, X23, [X31 + 0x10]
	0x034010EC LDR X30, [X31], #0x40
	0x034010F0 RET
	0x034010F4 BL 0x1C16F28
	0x034010F8 BL 0x1C16F44
	0x034010FC MOV X1, X31
	0x03401100 BL 0x1C16DEC
	0x03401104 BL 0x1C16F20
	0x03401108 MOV X1, X31
	0x0340110C B 0x33BDD8C
	0x03401110 LDR X0, [X0 + 0x10]
	0x03401114 RET
	0x03401118 STR X1, [X0 + 0x10]
	0x0340111C RET
	0x03401120 STR X30, [X31 - 0x20]!
	0x03401124 STP X20, X19, [X31 + 0x10]
	0x03401128 ADRP X20, 0xFDC000
	0x0340112C LDRB W8, [X20 + 0x50D]
	0x03401130 MOV X19, X0
	0x03401134 TBNZ X8, 0x0, 0x3401158
	0x03401138 ADRP X0, 0xD2C000
	0x0340113C LDR X0, [X0 + 0xD28]
	0x03401140 BL 0x1C16CF4
	0x03401144 ADRP X0, 0xD2C000
	0x03401148 LDR X0, [X0 + 0xD30]
	0x0340114C BL 0x1C16CF4
	0x03401150 MOVZ W8, 0x1
	0x03401154 STRB W8, [X20 + 0x50D]
	0x03401158 LDR X19, [X19 + 0x18]
	0x0340115C CBNZ X19, 0x3401188
	0x03401160 ADRP X8, 0xD2C000
	0x03401164 LDR X8, [X8 + 0xD30]
	0x03401168 LDR X0, [X8]
	0x0340116C BL 0x1C16F10
	0x03401170 ADRP X8, 0xD2C000
	0x03401174 LDR X8, [X8 + 0xD28]
	0x03401178 MOV W1, W31
	0x0340117C MOV X19, X0
	0x03401180 LDR X2, [X8]
	0x03401184 BL 0x301B830
	0x03401188 MOV X0, X19
	0x0340118C LDP X20, X19, [X31 + 0x10]
	0x03401190 LDR X30, [X31], #0x20
	0x03401194 RET
	0x03401198 LDR X0, [X0 + 0x18]
	0x0340119C RET
	0x034011A0 STR X1, [X0 + 0x18]
	0x034011A4 RET
	0x034011A8 LDR X0, [X0 + 0x20]
	0x034011AC RET
	0x034011B0 STR X1, [X0 + 0x20]
	0x034011B4 RET
	0x034011B8 LDR X0, [X0 + 0x28]
	0x034011BC RET
	0x034011C0 STR X1, [X0 + 0x28]
	0x034011C4 RET
	0x034011C8 LDR X0, [X0 + 0x30]
	0x034011CC RET
	0x034011D0 LDR X0, [X0 + 0x30]
	0x034011D4 RET
	0x034011D8 STR X1, [X0 + 0x30]
	0x034011DC RET
	0x034011E0 LDR X0, [X0 + 0x38]
	0x034011E4 RET
	0x034011E8 STR X1, [X0 + 0x38]
	0x034011EC RET
	0x034011F0 LDR X0, [X0 + 0x40]
	0x034011F4 RET
	0x034011F8 STR X1, [X0 + 0x40]
	0x034011FC RET
	0x03401200 STP X29, X30, [X31 - 0x60]!
	0x03401204 STP X28, X27, [X31 + 0x10]
	0x03401208 STP X26, X25, [X31 + 0x20]
	0x0340120C STP X24, X23, [X31 + 0x30]
	0x03401210 STP X22, X21, [X31 + 0x40]
	0x03401214 STP X20, X19, [X31 + 0x50]
	0x03401218 ADRP X28, 0xFDC000
	0x0340121C ADRP X29, 0xCF2000
	0x03401220 ADRP X20, 0xD2C000
	0x03401224 ADRP X22, 0xCF2000
	0x03401228 ADRP X27, 0xD2C000
	0x0340122C ADRP X25, 0xD2C000
	0x03401230 ADRP X26, 0xD2C000
	0x03401234 ADRP X24, 0xD2C000
	0x03401238 ADRP X23, 0xD2C000
	0x0340123C ADRP X21, 0xCF2000
	0x03401240 LDR X29, [X29 + 0x988]
	0x03401244 LDR X20, [X20 + 0xD38]
	0x03401248 LDR X22, [X22 + 0x838]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move [X31+12], W1
	005 Move X0, 0xCF4000
	006 Move X0, [X0+1880]
	007 Call 0x1C17D08
	008 Add X1, X31, 12
	009 Call 0x1C17E04
	010 Move X19, X0
	011 Move X0, 0xD23000
	012 Move X0, [X0+2264]
	013 Call 0x1C17D08
	014 Move X1, X19
	015 Move X2, X31
	016 Call SR.Format, X0, X1
	017 Move X19, X0
	018 Move X0, 0xCFC000
	019 Move X0, [X0+1400]
	020 Call 0x1C17D08
	021 Call 0x1C17F10
	022 Move X20, X0
	023 Move X0, 0xD23000
	024 Move X0, [X0+728]
	025 Call 0x1C17D08
	026 Move X2, X0
	027 Move X0, X20
	028 Move X1, X19
	029 Move X3, X31
	030 Call ArgumentException..ctor, X0, X1, X2
	031 Move X0, 0xD2E000
	032 Move X0, [X0+3256]
	033 Call 0x1C17D08
	034 Move X1, X0
	035 Move X0, X20
	036 Call 0x1C17DEC
	037 Move [X31-32], X30
	038 Move [X31+16], X20
	039 Move [X31+24], X19
	040 Move X19, 0xFDE000
	041 Move W8, [X19+1281]
	042 Move X20, X0
	043 Compare W8, 0
	044 JumpIfNotEqual {53}
	045 Move X0, 0xD23000
	046 Move X0, [X0+3752]
	047 Call 0x1C17CF4
	048 Move X0, 0xCF4000
	049 Move X0, [X0+1976]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X19+1281], W8
	053 Move X19, [X20]
	054 Compare X19, 0
	055 JumpIfEqual {83}
	056 Move X9, 0xCF4000
	057 Move X9, [X9+1976]
	058 Move X8, [X19]
	059 Move X9, [X9]
	060 Move W11, [X8+304]
	061 Move W10, [X9+304]
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X11, [X8+200]
	064 Add X10, X11, X10
	065 NotImplemented "Instruction LDUR not yet implemented."
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move X10, 0xD22000
	068 NotImplemented "Instruction LDRH not yet implemented."
	069 Move X10, [X10+3752]
	070 NotImplemented "Instruction LDRH not yet implemented."
	071 Move X1, [X10]
	072 Compare X9, 0
	073 JumpIfEqual {80}
	074 Move X10, [X8+176]
	075 Add X10, X10, 8
	076 NotImplemented "Instruction LDUR not yet implemented."
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Subtract X9, X9, 1
	079 Add X10, X10, 16
	080 Move X0, X19
	081 Move W2, W31
	082 Call 0x1C5D788
	083 Move W0, 1
	084 NotImplemented "Instruction LDRSW not yet implemented."
	085 Add X8, X8, X9
	086 Add X0, X8, 312
	087 Move X8, [X0]
	088 Move X2, [X0+8]
	089 Move X0, X19
	090 Move W1, W20
	091 NotImplemented "Instruction BLR not yet implemented."
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move W19, [X19+56]
	094 Call 0x1C17D44
	095 Move W8, 0x1600000
	096 And W8, W19, W8
	097 Move W9, 0x1000000
	098 NotImplemented "Instruction CMP not yet implemented."
	099 NotImplemented "Instruction CSET not yet implemented."
	100 Move X20, [X31+16]
	101 Move X19, [X31+24]
	102 Move X30, [X31+32]
	103 Return 
	104 Move [X31-16], X30
	105 Move [X31-8], X19
	106 Move X19, 0xFD9000
	107 Move W8, [X19+2190]
	108 Compare W8, 0
	109 JumpIfNotEqual {115}
	110 Move X0, 0xCF4000
	111 Move X0, [X0+1976]
	112 Call 0x1C17CF4
	113 Move W8, 1
	114 Move [X19+2190], W8
	115 Move X19, 0xCF4000
	116 Move X19, [X19+1976]
	117 Move X0, [X19]
	118 Move W8, [X0+224]
	119 Compare W8, 0
	120 JumpIfNotEqual {123}
	121 Call 0x1C17DFC
	122 Move X0, [X19]
	123 Call 0x1C17D0C
	124 Move X0, [X0]
	125 Move X30, [X31+16]
	126 Move X19, [X31+24]
	127 Return 
	128 Move [X31-16], X30
	129 Move [X31-8], X19
	130 Move X19, 0xFD9000
	131 Move W8, [X19+2189]
	132 Compare W8, 0
	133 JumpIfNotEqual {139}
	134 Move X0, 0xCFB000
	135 Move X0, [X0+2024]
	136 Call 0x1C17CF4
	137 Move W8, 1
	138 Move [X19+2189], W8
	139 Move X19, 0xCFB000
	140 Move X19, [X19+2024]
	141 Move X0, [X19]
	142 Move W8, [X0+224]
	143 Compare W8, 0
	144 JumpIfNotEqual {147}
	145 Call 0x1C17DFC
	146 Move X0, [X19]
	147 Move X8, [X0+184]
	148 Move X0, [X8+8]
	149 Move X30, [X31+16]
	150 Move X19, [X31+24]
	151 Return 
	152 Move [X31-32], X30
	153 Move [X31+16], X20
	154 Move [X31+24], X19
	155 Move X19, 0xFDD000
	156 Move W8, [X19+1284]
	157 Compare W8, 0
	158 JumpIfNotEqual {170}
	159 Move X0, 0xD25000
	160 Move X0, [X0+2376]
	161 Call 0x1C17CF4
	162 Move X0, 0xD2D000
	163 Move X0, [X0+2536]
	164 Call 0x1C17CF4
	165 Move X0, 0xD2D000
	166 Move X0, [X0+2040]
	167 Call 0x1C17CF4
	168 Move W8, 1
	169 Move [X19+1284], W8
	170 Move X20, 0xD2D000
	171 Move X20, [X20+2040]
	172 Move X0, [X20]
	173 Move W8, [X0+224]
	174 Compare W8, 0
	175 JumpIfNotEqual {178}
	176 Call 0x1C17DFC
	177 Move X0, [X20]
	178 Move X8, [X0+184]
	179 Move X19, [X8+8]
	180 Compare X19, 0
	181 JumpIfNotEqual {201}
	182 Move X8, 0xD25000
	183 Move X8, [X8+2376]
	184 Move X0, [X8]
	185 Call 0x1C17F10
	186 Move X8, 0xD2D000
	187 Move X8, [X8+2536]
	188 Move X1, X31
	189 Move X3, X31
	190 Move X19, X0
	191 Move X2, [X8]
	192 Call ContextCallback..ctor, X0, X1, X2
	193 Move X0, [X20]
	194 Move W8, [X0+224]
	195 Compare W8, 0
	196 JumpIfNotEqual {199}
	197 Call 0x1C17DFC
	198 Move X0, [X20]
	199 Move X8, [X0+184]
	200 Move [X8+8], X19
	201 Move X0, X19
	202 Move X20, [X31+16]
	203 Move X19, [X31+24]
	204 Move X30, [X31+32]
	205 Return 

Method: System.Void .ctor()

Disassembly:
	0x034002F8 ADRP X23, 0xCF3000
	0x034002FC LDRB W8, [X22 + 0x506]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

