Type: System.Text.InternalEncoderBestFitFallbackBuffer

Method: System.Object get_InternalSyncObject()

Disassembly:
	0x03400264 STR X30, [X31 - 0x40]!
	0x03400268 STP X24, X23, [X31 + 0x10]
	0x0340026C STP X22, X21, [X31 + 0x20]
	0x03400270 STP X20, X19, [X31 + 0x30]
	0x03400274 ADRP X23, 0xFDD000
	0x03400278 ADRP X24, 0xCF3000
	0x0340027C LDRB W8, [X23 + 0x505]
	0x03400280 LDR X24, [X24 + 0x7D0]
	0x03400284 MOV W19, W3
	0x03400288 MOV X22, X2
	0x0340028C MOV X21, X1
	0x03400290 MOV X20, X0
	0x03400294 TBNZ X8, 0x0, 0x34002AC
	0x03400298 ADRP X0, 0xCF3000
	0x0340029C LDR X0, [X0 + 0x7D0]
	0x034002A0 BL 0x1C16CF4
	0x034002A4 MOVZ W8, 0x1
	0x034002A8 STRB W8, [X23 + 0x505]
	0x034002AC LDR X0, [X24]
	0x034002B0 LDR W8, [X0 + 0xE0]
	0x034002B4 CBNZ W8, 0x34002BC
	0x034002B8 BL 0x1C16DFC
	0x034002BC MOV X0, X20
	0x034002C0 MOV X1, X22
	0x034002C4 MOV X2, X31
	0x034002C8 BL 0x33B2C70
	0x034002CC STR X21, [X20 + 0x90]
	0x034002D0 STR W19, [X20 + 0x98]
	0x034002D4 LDP X20, X19, [X31 + 0x30]
	0x034002D8 LDP X22, X21, [X31 + 0x20]
	0x034002DC LDP X24, X23, [X31 + 0x10]
	0x034002E0 LDR X30, [X31], #0x40
	0x034002E4 RET
	0x034002E8 STP X30, X23, [X31 - 0x30]!
	0x034002EC STP X22, X21, [X31 + 0x10]
	0x034002F0 STP X20, X19, [X31 + 0x20]
	0x034002F4 ADRP X22, 0xFDD000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xFDE000
	005 Move X20, 0xD2E000
	006 Move W8, [X19+1271]
	007 Move X20, [X20+3176]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xD2E000
	013 Move X0, [X0+3176]
	014 Call 0x1C17CF4
	015 Move X0, 0xCFA000
	016 Move X0, [X0+3264]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+1271], W8
	020 Move X8, [X20]
	021 Move X8, [X8+184]
	022 Move X0, [X8]
	023 Compare X0, 0
	024 JumpIfNotEqual {40}
	025 Move X8, 0xCFA000
	026 Move X8, [X8+3264]
	027 Move X0, [X8]
	028 Call 0x1C17F10
	029 Move X1, X31
	030 Move X19, X0
	031 Call Object..ctor, X0
	032 Move X8, [X20]
	033 Move X1, X19
	034 Move X2, X31
	035 Move X0, [X8+184]
	036 Call 0x1C25138
	037 Move X8, [X20]
	038 Move X8, [X8+184]
	039 Move X0, [X8]
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Return X0

Method: System.Void .ctor(System.Text.InternalEncoderBestFitFallback fallback)

Disassembly:
	0x03400050 ADRP X10, 0xD22000
	0x03400054 LDRH W20, [X20 + 0x8]
	0x03400058 LDR X10, [X10 + 0xEA8]
	0x0340005C LDRH W9, [X8 + 0x12E]
	0x03400060 LDR X1, [X10]
	0x03400064 CBZ X9, 0x3400088
	0x03400068 LDR X10, [X8 + 0xB0]
	0x0340006C ADD X10, X10, 0x8
	0x03400070 LDUR X11, [X10 - 0x8]
	0x03400074 CMP X11, X1
	0x03400078 B.EQ 0x34000A0
	0x0340007C SUBS X9, X9, 0x1
	0x03400080 ADD X10, X10, 0x10
	0x03400084 B.NE 0x3400070
	0x03400088 MOV X0, X19
	0x0340008C MOV W2, W31
	0x03400090 BL 0x1C5C788
	0x03400094 B 0x34000AC
	0x03400098 MOVZ W0, 0x1
	0x0340009C B 0x34000E0
	0x034000A0 LDRSW X9, [X10]
	0x034000A4 ADD X8, X8, X9, 0x4, LSL
	0x034000A8 ADD X0, X8, 0x138
	0x034000AC LDP X8, X2, [X0]
	0x034000B0 MOV X0, X19
	0x034000B4 MOV W1, W20
	0x034000B8 BLR X8
	0x034000BC CMP W0, 0x1
	0x034000C0 B 0x34000DC
	0x034000C4 LDR W19, [X19 + 0x38]
	0x034000C8 BL 0x1C16D44
	0x034000CC MOVZ W8, 0x1600000
	0x034000D0 AND W8, W19, W8, 0x0
	0x034000D4 MOVZ W9, 0x1000000
	0x034000D8 CMP W8, W9
	0x034000DC CSET W0, EQ
	0x034000E0 LDP X20, X19, [X31 + 0x10]
	0x034000E4 LDR X30, [X31], #0x20
	0x034000E8 RET
	0x034000EC STP X30, X19, [X31 - 0x10]!
	0x034000F0 ADRP X19, 0xFD9000
	0x034000F4 LDRB W8, [X19 + 0x88E]
	0x034000F8 CBNZ W8, 0x3400110
	0x034000FC ADRP X0, 0xCF4000
	0x03400100 LDR X0, [X0 + 0x7B8]
	0x03400104 BL 0x1C16CF4
	0x03400108 MOVZ W8, 0x1
	0x0340010C STRB W8, [X19 + 0x88E]
	0x03400110 ADRP X19, 0xCF4000
	0x03400114 LDR X19, [X19 + 0x7B8]
	0x03400118 LDR X0, [X19]
	0x0340011C LDR W8, [X0 + 0xE0]
	0x03400120 CBNZ W8, 0x340012C
	0x03400124 BL 0x1C16DFC
	0x03400128 LDR X0, [X19]
	0x0340012C BL 0x1C16D0C
	0x03400130 LDR X0, [X0]
	0x03400134 LDP X30, X19, [X31], #0x10
	0x03400138 RET
	0x0340013C STP X30, X19, [X31 - 0x10]!
	0x03400140 ADRP X19, 0xFD9000
	0x03400144 LDRB W8, [X19 + 0x88D]
	0x03400148 CBNZ W8, 0x3400160
	0x0340014C ADRP X0, 0xCFB000
	0x03400150 LDR X0, [X0 + 0x7E8]
	0x03400154 BL 0x1C16CF4
	0x03400158 MOVZ W8, 0x1
	0x0340015C STRB W8, [X19 + 0x88D]
	0x03400160 ADRP X19, 0xCFB000
	0x03400164 LDR X19, [X19 + 0x7E8]
	0x03400168 LDR X0, [X19]
	0x0340016C LDR W8, [X0 + 0xE0]
	0x03400170 CBNZ W8, 0x340017C

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, X1
	007 Move TEMP, 0
	008 Not TEMP
	009 Move W8, TEMP
	010 Move X1, X31
	011 Move X21, X0
	012 Move [X0+64], W8
	013 Call Object..ctor, X0
	014 Move [X21+56], X20
	015 Compare X20, 0
	016 JumpIfEqual {56}
	017 Move X8, [X20+24]
	018 Compare X8, 0
	019 JumpIfNotEqual {50}
	020 Call InternalEncoderBestFitFallbackBuffer.get_InternalSyncObject
	021 Move X19, X0
	022 Move [X31+12], W31
	023 Add X1, X31, 12
	024 Move X2, X31
	025 Call Monitor.Enter, X0, X1
	026 Move X21, [X21+56]
	027 Compare X21, 0
	028 JumpIfEqual {59}
	029 Move X8, [X21+24]
	030 Compare X8, 0
	031 JumpIfEqual {33}
	032 Move X20, X31
	033 Move X0, [X20+16]
	034 Compare X0, 0
	035 JumpIfEqual {60}
	036 Move X8, [X0]
	037 Move X1, [X8+928]
	038 Move X9, [X8+920]
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Move X20, X31
	041 Move [X21+24], X0
	042 Move W8, [X31+12]
	043 Compare W8, 0
	044 JumpIfEqual {48}
	045 Move X0, X19
	046 Move X1, X31
	047 Call Monitor.Exit, X0
	048 Compare X20, 0
	049 JumpIfNotEqual {57}
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X30, [X31+16]
	053 Move X21, [X31+24]
	054 Add X31, X31, 48
	055 Return 
	056 Call 0x1C17F20
	057 Move X0, X20
	058 Call 0x1C17F18
	059 Call 0x1C17F20
	060 Call 0x1C17F20
	061 Move X21, X0
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X0, X21
	064 Call 0x3EB2AD0
	065 Move X20, [X0]
	066 Call 0x3EB2AE0
	067 Move X20, X31
	068 Move X21, X0
	069 Move W8, [X31+12]
	070 Compare W8, 0
	071 JumpIfEqual {75}
	072 Move X0, X19
	073 Move X1, X31
	074 Call Monitor.Exit, X0
	075 Compare X20, 0
	076 JumpIfNotEqual {79}
	077 Move X0, X21
	078 Call 0x1D2D690
	079 Move X0, X20
	080 Call 0x1C17F18
	081 Call 0x1991590

Method: System.Boolean Fallback(System.Char charUnknown, System.Int32 index)

Disassembly:
	0x03400300 LDR X23, [X23 + 0x7D0]
	0x03400304 MOV X20, X2
	0x03400308 MOV X21, X1
	0x0340030C MOV X19, X0
	0x03400310 TBNZ X8, 0x0, 0x3400328
	0x03400314 ADRP X0, 0xCF3000
	0x03400318 LDR X0, [X0 + 0x7D0]
	0x0340031C BL 0x1C16CF4
	0x03400320 MOVZ W8, 0x1
	0x03400324 STRB W8, [X22 + 0x506]
	0x03400328 LDR X0, [X23]
	0x0340032C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 NotImplemented "Instruction MOVI not yet implemented."
	004 Move X19, X0
	005 Move [X0+64], D0
	006 Call InternalEncoderBestFitFallbackBuffer.TryBestFit, X0, X1
	007 And W31, W0, 0xFFFF
	008 Move W8, 63
	009 NotImplemented "Instruction CSEL not yet implemented."
	010 Move W0, 1
	011 NotImplemented "Instruction STRH not yet implemented."
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return X0

Method: System.Boolean Fallback(System.Char charUnknownHigh, System.Char charUnknownLow, System.Int32 index)

Disassembly:
	0x03400404 BLR X9
	0x03400408 MOV X21, X0
	0x0340040C LDR W8, [X19 + 0x98]
	0x03400410 LDR X0, [X23]
	0x03400414 ADD X1, X31, 0x4
	0x03400418 STR W8, [X31 + 0x4]
	0x0340041C BL 0x1C16E04
	0x03400420 LDR X8, [X22]
	0x03400424 MOV X3, X0
	0x03400428 MOV X1, X20
	0x0340042C MOV X2, X21
	0x03400430 MOV X0, X8
	0x03400434 MOV X4, X31
	0x03400438 BL 0x3227C18
	0x0340043C LDP X20, X19, [X31 + 0x30]
	0x03400440 LDP X22, X21, [X31 + 0x20]
	0x03400444 LDP X30, X23, [X31 + 0x10]
	0x03400448 ADD X31, X31, 0x40
	0x0340044C RET
	0x03400450 LDR X0, [X0 + 0x10]
	0x03400454 RET
	0x03400458 STR X1, [X0 + 0x10]
	0x0340045C RET
	0x03400460 LDR X0, [X0 + 0x18]
	0x03400464 RET
	0x03400468 STR X1, [X0 + 0x18]
	0x0340046C RET
	0x03400470 LDR X0, [X0 + 0x20]
	0x03400474 RET
	0x03400478 STR X1, [X0 + 0x20]
	0x0340047C RET
	0x03400480 LDR X0, [X0 + 0x28]
	0x03400484 RET
	0x03400488 STR X1, [X0 + 0x28]
	0x0340048C RET
	0x03400490 LDRB W0, [X0 + 0x30]
	0x03400494 RET
	0x03400498 AND W8, W1, 0x1
	0x0340049C STRB W8, [X0 + 0x30]
	0x034004A0 RET
	0x034004A4 SUB X31, X31, 0x60
	0x034004A8 STP X30, X27, [X31 + 0x10]
	0x034004AC STP X26, X25, [X31 + 0x20]
	0x034004B0 STP X24, X23, [X31 + 0x30]
	0x034004B4 STP X22, X21, [X31 + 0x40]
	0x034004B8 STP X20, X19, [X31 + 0x50]
	0x034004BC ADRP X26, 0xFDD000
	0x034004C0 ADRP X27, 0xCF3000
	0x034004C4 ADRP X25, 0xD2D000
	0x034004C8 ADRP X22, 0xCF3000
	0x034004CC ADRP X24, 0xD2D000
	0x034004D0 ADRP X23, 0xD2D000
	0x034004D4 ADRP X21, 0xCF4000
	0x034004D8 ADRP X20, 0xCF3000
	0x034004DC LDR X27, [X27 + 0x988]
	0x034004E0 LDR X25, [X25 + 0xCC8]
	0x034004E4 LDRB W8, [X26 + 0x508]
	0x034004E8 LDR X22, [X22 + 0x838]
	0x034004EC LDR X24, [X24 + 0xCD0]
	0x034004F0 LDR X23, [X23 + 0xCD8]
	0x034004F4 LDR X21, [X21 + 0xEE0]
	0x034004F8 LDR X20, [X20 + 0x9D0]
	0x034004FC MOV X19, X0
	0x03400500 TBNZ X8, 0x0, 0x3400578
	0x03400504 ADRP X0, 0xCF3000
	0x03400508 LDR X0, [X0 + 0xB58]
	0x0340050C BL 0x1C16CF4
	0x03400510 ADRP X0, 0xCF3000
	0x03400514 LDR X0, [X0 + 0x9D0]
	0x03400518 BL 0x1C16CF4
	0x0340051C ADRP X0, 0xD2D000
	0x03400520 LDR X0, [X0 + 0xCD8]
	0x03400524 BL 0x1C16CF4
	0x03400528 ADRP X0, 0xCF4000
	0x0340052C LDR X0, [X0 + 0xEE0]
	0x03400530 BL 0x1C16CF4
	0x03400534 ADRP X0, 0xCF3000
	0x03400538 LDR X0, [X0 + 0x838]
	0x0340053C BL 0x1C16CF4
	0x03400540 ADRP X0, 0xD2D000
	0x03400544 LDR X0, [X0 + 0xCE0]
	0x03400548 BL 0x1C16CF4
	0x0340054C ADRP X0, 0xD2D000
	0x03400550 LDR X0, [X0 + 0xCC8]
	0x03400554 BL 0x1C16CF4
	0x03400558 ADRP X0, 0xCF3000
	0x0340055C LDR X0, [X0 + 0x988]
	0x03400560 BL 0x1C16CF4
	0x03400564 ADRP X0, 0xD2D000
	0x03400568 LDR X0, [X0 + 0xCD0]
	0x0340056C BL 0x1C16CF4
	0x03400570 MOVZ W8, 0x1
	0x03400574 STRB W8, [X26 + 0x508]
	0x03400578 LDR X0, [X27]
	0x0340057C LDR X2, [X19 + 0x10]
	0x03400580 LDR X1, [X25]
	0x03400584 LDR X3, [X22]
	0x03400588 MOV X4, X31
	0x0340058C BL 0x32277C4
	0x03400590 LDR X2, [X19 + 0x18]
	0x03400594 LDR X1, [X24]
	0x03400598 LDR X3, [X22]
	0x0340059C MOV X4, X31
	0x034005A0 BL 0x32277C4
	0x034005A4 LDR X2, [X19 + 0x20]
	0x034005A8 LDR X1, [X23]
	0x034005AC LDR X3, [X22]
	0x034005B0 MOV X4, X31
	0x034005B4 BL 0x32277C4
	0x034005B8 LDR X2, [X19 + 0x28]
	0x034005BC LDR X1, [X21]
	0x034005C0 LDR X3, [X22]
	0x034005C4 MOV X4, X31
	0x034005C8 BL 0x32277C4
	0x034005CC LDR X8, [X20]
	0x034005D0 MOV X21, X0
	0x034005D4 MOVZ W1, 0x4
	0x034005D8 MOV X0, X8

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xFDE000
	009 Move X22, 0xCF6000
	010 Move W8, [X23+1272]
	011 Move X22, [X22+368]
	012 Move W20, W2
	013 Move W21, W1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xCF6000
	020 Move X0, [X0+368]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X23+1272], W8
	024 Move X0, [X22]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move W0, W21
	030 Move X1, X31
	031 Call Char.IsHighSurrogate, X0
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {61}
	036 Move X0, [X22]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move W0, W20
	042 Move X1, X31
	043 Call Char.IsLowSurrogate, X0
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {92}
	048 Move W8, 63
	049 NotImplemented "Instruction MOVI not yet implemented."
	050 NotImplemented "Instruction STRH not yet implemented."
	051 Move [X19+64], D0
	052 Move X20, [X31+48]
	053 Move X19, [X31+56]
	054 Move X22, [X31+32]
	055 Move X21, [X31+40]
	056 Move X30, [X31+16]
	057 Move X23, [X31+24]
	058 Move W0, 1
	059 Add X31, X31, 64
	060 Return X0
	061 Move W8, 0xD800
	062 Move [X31+12], W8
	063 Move X19, 0xCF4000
	064 Move X19, [X19+1880]
	065 Move X0, X19
	066 Call 0x1C17D08
	067 Add X1, X31, 12
	068 Call 0x1C17E04
	069 Move X20, X0
	070 Move W8, 0xDBFF
	071 Move X0, X19
	072 Move [X31+8], W8
	073 Call 0x1C17D08
	074 Add X1, X31, 8
	075 Call 0x1C17E04
	076 Move X19, X0
	077 Move X0, 0xD23000
	078 Move X0, [X0+880]
	079 Call 0x1C17D08
	080 Move X1, X20
	081 Move X2, X19
	082 Move X3, X31
	083 Call SR.Format, X0, X1, X2
	084 Move X19, X0
	085 Move X0, 0xCFC000
	086 Move X0, [X0+1888]
	087 Call 0x1C17D08
	088 Call 0x1C17F10
	089 Move X20, X0
	090 Move X0, 0xD23000
	091 Move X0, [X0+888]
	092 Move W8, 0xDC00
	093 Move [X31+12], W8
	094 Move X19, 0xCF4000
	095 Move X19, [X19+1880]
	096 Move X0, X19
	097 Call 0x1C17D08
	098 Add X1, X31, 12
	099 Call 0x1C17E04
	100 Move X20, X0
	101 Move W8, 0xDFFF
	102 Move X0, X19
	103 Move [X31+8], W8
	104 Call 0x1C17D08
	105 Add X1, X31, 8
	106 Call 0x1C17E04
	107 Move X19, X0
	108 Move X0, 0xD23000
	109 Move X0, [X0+880]
	110 Call 0x1C17D08
	111 Move X1, X20
	112 Move X2, X19
	113 Move X3, X31
	114 Call SR.Format, X0, X1, X2
	115 Move X19, X0
	116 Move X0, 0xCFC000
	117 Move X0, [X0+1888]
	118 Call 0x1C17D08
	119 Call 0x1C17F10
	120 Move X20, X0
	121 Move X0, 0xD23000
	122 Move X0, [X0+896]
	123 Call 0x1C17D08
	124 Move X1, X0
	125 Move X0, X20
	126 Move X2, X19
	127 Move X3, X31
	128 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	129 Move X0, 0xD2E000
	130 Move X0, [X0+3184]
	131 Call 0x1C17D08
	132 Move X1, X0
	133 Move X0, X20
	134 Call 0x1C17DEC

Method: System.Char GetNextChar()

Disassembly:
	0x034005DC BL 0x1C16D6C
	0x034005E0 CBZ X0, 0x34006EC
	0x034005E4 MOV X20, X0
	0x034005E8 CBZ X21, 0x3400600
	0x034005EC LDR X8, [X20]
	0x034005F0 MOV X0, X21
	0x034005F4 LDR X1, [X8 + 0x40]
	0x034005F8 BL 0x1C16E00
	0x034005FC CBZ X0, 0x34006E0
	0x03400600 LDR W8, [X20 + 0x18]
	0x03400604 CBZ W8, 0x34006DC
	0x03400608 ADRP X23, 0xD2D000
	0x0340060C LDR X23, [X23 + 0xCE0]
	0x03400610 STR X21, [X20 + 0x20]
	0x03400614 LDR X0, [X23]
	0x03400618 CBZ X0, 0x3400630

ISIL:
	001 Move W9, [X0+64]
	002 Subtract W9, W9, 1
	003 Move [X0+64], W9
	004 Move TEMP, 0x80000000
	005 Not TEMP
	006 Move W10, TEMP
	007 Move X8, X0
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move W0, W31
	010 Move TEMP, 0
	011 Not TEMP
	012 Move W9, TEMP
	013 Move [X8+64], W9
	014 Return X0
	015 Move W0, W31
	016 Return X0
	017 NotImplemented "Instruction LDRH not yet implemented."
	018 Return X0

Method: System.Boolean MovePrevious()

Disassembly:
	0x0340061C LDR X8, [X20]
	0x03400620 LDR X1, [X8 + 0x40]
	0x03400624 BL 0x1C16E00
	0x03400628 CBZ X0, 0x34006E0
	0x0340062C LDR W8, [X20 + 0x18]
	0x03400630 CMP W8, 0x1
	0x03400634 B.LS 0x34006DC
	0x03400638 LDR X8, [X23]
	0x0340063C ADRP X9, 0xCF3000
	0x03400640 LDR X9, [X9 + 0xB58]
	0x03400644 ADD X1, X31, 0xC

ISIL:
	001 Move W8, [X0+64]
	002 Move TEMP, X8
	003 And TEMP, TEMP, -2147483648
	004 Compare TEMP, -2147483648
	005 JumpIfEqual {12}
	006 Add W8, W8, 1
	007 Move [X0+64], W8
	008 Move W9, [X0+68]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 NotImplemented "Instruction CSET not yet implemented."
	011 Return X0
	012 Move W0, W31
	013 Return X0

Method: System.Int32 get_Remaining()

Disassembly:
	0x03400648 STR X8, [X20 + 0x28]
	0x0340064C LDRB W8, [X19 + 0x30]
	0x03400650 LDR X0, [X9]

ISIL:
	001 Move W8, [X0+64]
	002 NotImplemented "Instruction BIC not yet implemented."
	003 Return X0

Method: System.Void Reset()

Disassembly:
	0x03400654 STRB W8, [X31 + 0xC]
	0x03400658 BL 0x1C16E04
	0x0340065C MOV X19, X0
	0x03400660 CBZ X0, 0x3400678
	0x03400664 LDR X8, [X20]

ISIL:
	001 Move TEMP, 0
	002 Not TEMP
	003 Move W8, TEMP
	004 Move [X0+16], X31
	005 Move [X0+64], W8
	006 Move [X0+42], W31
	007 Return 

Method: System.Char TryBestFit(System.Char cUnknown)

Disassembly:
	0x03400330 CBNZ W8, 0x3400338
	0x03400334 BL 0x1C16DFC
	0x03400338 MOV X0, X19
	0x0340033C MOV X1, X21
	0x03400340 MOV X2, X20
	0x03400344 MOV X3, X31
	0x03400348 BL 0x33B2CA0
	0x0340034C MOVN X8, 0x0
	0x03400350 MOVN W9, 0x0
	0x03400354 STR X8, [X19 + 0x90]
	0x03400358 STR W9, [X19 + 0x98]
	0x0340035C LDP X20, X19, [X31 + 0x20]
	0x03400360 LDP X22, X21, [X31 + 0x10]
	0x03400364 LDP X30, X23, [X31], #0x30
	0x03400368 RET
	0x0340036C MOV X2, X1
	0x03400370 MOVN X1, 0x0
	0x03400374 MOVN W3, 0x0
	0x03400378 B 0x3400264
	0x0340037C SUB X31, X31, 0x40
	0x03400380 STP X30, X23, [X31 + 0x10]
	0x03400384 STP X22, X21, [X31 + 0x20]
	0x03400388 STP X20, X19, [X31 + 0x30]
	0x0340038C ADRP X21, 0xFDD000
	0x03400390 ADRP X20, 0xCF5000
	0x03400394 ADRP X23, 0xCF3000
	0x03400398 ADRP X22, 0xD2D000
	0x0340039C LDRB W8, [X21 + 0x507]
	0x034003A0 LDR X20, [X20 + 0xA60]
	0x034003A4 LDR X23, [X23 + 0x758]
	0x034003A8 LDR X22, [X22 + 0xCC0]
	0x034003AC MOV X19, X0
	0x034003B0 TBNZ X8, 0x0, 0x34003E0
	0x034003B4 ADRP X0, 0xCF3000
	0x034003B8 LDR X0, [X0 + 0x758]
	0x034003BC BL 0x1C16CF4
	0x034003C0 ADRP X0, 0xCF5000
	0x034003C4 LDR X0, [X0 + 0xA60]
	0x034003C8 BL 0x1C16CF4
	0x034003CC ADRP X0, 0xD2D000
	0x034003D0 LDR X0, [X0 + 0xCC0]
	0x034003D4 BL 0x1C16CF4
	0x034003D8 MOVZ W8, 0x1
	0x034003DC STRB W8, [X21 + 0x507]
	0x034003E0 LDR X8, [X19 + 0x90]
	0x034003E4 LDR X0, [X20]
	0x034003E8 ADD X1, X31, 0x8
	0x034003EC STR X8, [X31 + 0x8]
	0x034003F0 BL 0x1C16E04
	0x034003F4 LDR X8, [X19]
	0x034003F8 MOV X20, X0
	0x034003FC MOV X0, X19
	0x03400400 LDP X9, X1, [X8 + 0x188]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+56]
	003 Compare X8, 0
	004 JumpIfEqual {42}
	005 Move X8, [X8+24]
	006 Compare X8, 0
	007 JumpIfEqual {42}
	008 Move W9, [X8+24]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move W10, W31
	011 Move W12, W9
	012 Move W11, W9
	013 Add W12, W10, W12
	014 And W12, W12, 0xFFFE
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Add X13, X8, W12
	017 NotImplemented "Instruction LDRH not yet implemented."
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction CSEL not yet implemented."
	020 NotImplemented "Instruction CSEL not yet implemented."
	021 Subtract W12, W11, W10
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move W10, W31
	024 Move W11, W9
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Add X12, X8, W10
	027 NotImplemented "Instruction LDRH not yet implemented."
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Add W10, W10, 2
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move W0, W31
	032 Or W10, W12, 1
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Add X8, X8, W10
	035 Add W10, W10, 1
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Add X8, X8, W10
	038 NotImplemented "Instruction LDRH not yet implemented."
	039 Move X30, [X31+16]
	040 Return X0
	041 Call 0x1C17F28
	042 Call 0x1C17F20

