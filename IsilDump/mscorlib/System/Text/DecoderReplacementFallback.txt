Type: System.Text.DecoderReplacementFallback

Method: System.Void .ctor()

Disassembly:
	0x033FE9A4 LDP X30, X21, [X31], #0x20
	0x033FE9A8 RET
	0x033FE9AC STR X30, [X31 - 0x20]!
	0x033FE9B0 STP X20, X19, [X31 + 0x10]
	0x033FE9B4 MOV X20, X1
	0x033FE9B8 MOVI V0.2D, 0xFFFFFFFFFFFFFFFF
	0x033FE9BC MOV X1, X31
	0x033FE9C0 MOV X19, X0
	0x033FE9C4 STR D0, [X0 + 0x28]
	0x033FE9C8 BL 0x33BDD8C
	0x033FE9CC CBZ X20, 0x33FE9E4
	0x033FE9D0 LDR X8, [X20 + 0x10]
	0x033FE9D4 STR X8, [X19 + 0x20]
	0x033FE9D8 LDP X20, X19, [X31 + 0x10]
	0x033FE9DC LDR X30, [X31], #0x20
	0x033FE9E0 RET
	0x033FE9E4 BL 0x1C16F20
	0x033FE9E8 STR X30, [X31 - 0x10]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xFE0000
	006 Move X21, 0xD24000
	007 Move W8, [X20+1260]
	008 Move X21, [X21+2448]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD24000
	015 Move X0, [X0+2448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1260], W8
	019 Move X1, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call DecoderReplacementFallback..ctor, X0, X1
	026 Return 

Method: System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)

Disassembly:
	0x033FF7EC MOV W20, W2
	0x033FF7F0 MOV X2, X31
	0x033FF7F4 MOV W19, W3
	0x033FF7F8 MOV X21, X0
	0x033FF7FC BL 0x3314A68
	0x033FF800 STRH W20, [X21 + 0x98]
	0x033FF804 STR W19, [X21 + 0xA0]
	0x033FF808 LDP X20, X19, [X31 + 0x10]
	0x033FF80C LDP X30, X21, [X31], #0x20
	0x033FF810 RET
	0x033FF814 SUB X31, X31, 0x40
	0x033FF818 STP X30, X23, [X31 + 0x10]
	0x033FF81C STP X22, X21, [X31 + 0x20]
	0x033FF820 STP X20, X19, [X31 + 0x30]
	0x033FF824 ADRP X0, 0xCF6000
	0x033FF828 LDR X0, [X0 + 0x170]
	0x033FF82C MOV W19, W3
	0x033FF830 MOV W20, W2
	0x033FF834 MOV W21, W1
	0x033FF838 BL 0x1C16D08
	0x033FF83C LDR W8, [X0 + 0xE0]
	0x033FF840 CBNZ W8, 0x33FF848
	0x033FF844 BL 0x1C16DFC
	0x033FF848 MOV W0, W21
	0x033FF84C MOV X1, X31
	0x033FF850 BL 0x331BFEC
	0x033FF854 TBZ X0, 0x0, 0x33FF938
	0x033FF858 ADRP X0, 0xCF6000
	0x033FF85C LDR X0, [X0 + 0x170]
	0x033FF860 BL 0x1C16D08
	0x033FF864 LDR W8, [X0 + 0xE0]
	0x033FF868 CBNZ W8, 0x33FF870
	0x033FF86C BL 0x1C16DFC
	0x033FF870 MOV W0, W20
	0x033FF874 MOV X1, X31
	0x033FF878 BL 0x331C0FC
	0x033FF87C TBZ X0, 0x0, 0x33FF9B8
	0x033FF880 ADRP X0, 0xCF6000
	0x033FF884 LDR X0, [X0 + 0x170]
	0x033FF888 BL 0x1C16D08
	0x033FF88C BL 0x19903D0
	0x033FF890 MOV W0, W21
	0x033FF894 MOV W1, W20
	0x033FF898 MOV X2, X31
	0x033FF89C BL 0x331C12C
	0x033FF8A0 STR W0, [X31 + 0xC]
	0x033FF8A4 ADRP X22, 0xCF4000
	0x033FF8A8 LDR X22, [X22 + 0x758]
	0x033FF8AC MOV X0, X22
	0x033FF8B0 BL 0x1C16D08
	0x033FF8B4 ADD X1, X31, 0xC
	0x033FF8B8 BL 0x1C16E04
	0x033FF8BC MOV X23, X0
	0x033FF8C0 MOV X0, X22
	0x033FF8C4 STR W19, [X31 + 0x8]
	0x033FF8C8 BL 0x1C16D08
	0x033FF8CC ADD X1, X31, 0x8
	0x033FF8D0 BL 0x1C16E04
	0x033FF8D4 MOV X22, X0
	0x033FF8D8 ADRP X0, 0xD2E000
	0x033FF8DC LDR X0, [X0 + 0xC88]
	0x033FF8E0 BL 0x1C16D08
	0x033FF8E4 MOV X1, X23
	0x033FF8E8 MOV X2, X22
	0x033FF8EC MOV X3, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xFDF000
	006 Move W8, [X21+1261]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD24000
	014 Move X0, [X0+848]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1261], W8
	018 Move X0, X19
	019 Move X1, X31
	020 Call Object..ctor, X0
	021 Compare X20, 0
	022 JumpIfEqual {35}
	023 Move X8, 0xD24000
	024 Move X8, [X8+848]
	025 Move X1, [X8]
	026 Move X0, X20
	027 Move X2, X31
	028 Call SerializationInfo.GetString, X0, X1
	029 Move [X19+16], X0
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return 
	035 Call 0x1C17F20
	036 Move X21, X0
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X0, X21
	039 Call 0x3EB2AD0
	040 Move X21, X0
	041 Move X0, 0xCFB000
	042 Move X0, [X0+3264]
	043 Call 0x1C17D08
	044 Move X8, [X21]
	045 Move X1, [X8]
	046 Call 0x1C18270
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {61}
	051 Call 0x3EB2AE0
	052 Compare X20, 0
	053 JumpIfEqual {69}
	054 Move X0, 0xD24000
	055 Move X0, [X0+856]
	056 Call 0x1C17D08
	057 Move X1, X0
	058 Move X0, X20
	059 Move X2, X31
	060 Call SerializationInfo.GetString, X0, X1
	061 Move W0, 8
	062 Call 0x3EB2AF0
	063 Move X8, [X21]
	064 Move [X0], X8
	065 Move X1, 0xAB6000
	066 Add X1, X1, 3672
	067 Move X2, X31
	068 Call 0x3EB2B00
	069 Call 0x1C17F20
	070 Move X21, X0
	071 Call 0x3EB2AE0
	072 Move X0, X21
	073 Call 0x1D2D690
	074 Call 0x1991590

Method: System.Void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)

Disassembly:
	0x033FF8F0 BL 0x320A264
	0x033FF8F4 MOV X22, X0
	0x033FF8F8 ADRP X0, 0xD2E000
	0x033FF8FC LDR X0, [X0 + 0xC90]
	0x033FF900 BL 0x1C16D08
	0x033FF904 BL 0x1C16F10
	0x033FF908 MOV X1, X22
	0x033FF90C MOV W2, W21
	0x033FF910 MOV W3, W20
	0x033FF914 MOV W4, W19
	0x033FF918 MOV X23, X0
	0x033FF91C BL 0x33FFA64
	0x033FF920 ADRP X0, 0xD2E000
	0x033FF924 LDR X0, [X0 + 0xCA0]
	0x033FF928 BL 0x1C16D08
	0x033FF92C MOV X1, X0
	0x033FF930 MOV X0, X23
	0x033FF934 BL 0x1C16DEC
	0x033FF938 MOVZ W8, 0xD800
	0x033FF93C STR W8, [X31 + 0xC]
	0x033FF940 ADRP X19, 0xCF4000
	0x033FF944 LDR X19, [X19 + 0x758]
	0x033FF948 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xFDF000
	006 Move W8, [X21+1262]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD24000
	014 Move X0, [X0+848]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1262], W8
	018 Compare X19, 0
	019 JumpIfEqual {32}
	020 Move X8, 0xD24000
	021 Move X8, [X8+848]
	022 Move X2, [X20+16]
	023 Move X0, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X1, [X8]
	027 Move X3, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call SerializationInfo.AddValue, X0, X1, X2
	031 Return 
	032 Call 0x1C17F20

Method: System.Void .ctor(System.String replacement)

Disassembly:
	0x033FF644 RET
	0x033FF648 LDR W8, [X0 + 0x40]
	0x033FF64C BIC W0, W8, W8, 0x1F
	0x033FF650 RET
	0x033FF654 MOVN W8, 0x0
	0x033FF658 STR X31, [X0 + 0x10]
	0x033FF65C STR W8, [X0 + 0x40]
	0x033FF660 STRB W31, [X0 + 0x2A]
	0x033FF664 RET
	0x033FF668 MOV X1, X31
	0x033FF66C B 0x33BDD8C
	0x033FF670 STR X30, [X31 - 0x20]!
	0x033FF674 STP X20, X19, [X31 + 0x10]
	0x033FF678 ADRP X19, 0xFDE000
	0x033FF67C ADRP X20, 0xD2E000
	0x033FF680 LDRB W8, [X19 + 0x4F9]
	0x033FF684 LDR X20, [X20 + 0xC78]
	0x033FF688 TBNZ X8, 0x0, 0x33FF6A0
	0x033FF68C ADRP X0, 0xD2E000
	0x033FF690 LDR X0, [X0 + 0xC78]
	0x033FF694 BL 0x1C16CF4
	0x033FF698 MOVZ W8, 0x1
	0x033FF69C STRB W8, [X19 + 0x4F9]
	0x033FF6A0 LDR X0, [X20]
	0x033FF6A4 BL 0x1C16F10
	0x033FF6A8 MOV X1, X31
	0x033FF6AC MOV X19, X0
	0x033FF6B0 BL 0x33BDD8C
	0x033FF6B4 MOV X0, X19
	0x033FF6B8 LDP X20, X19, [X31 + 0x10]
	0x033FF6BC LDR X30, [X31], #0x20
	0x033FF6C0 RET
	0x033FF6C4 MOV X1, X31
	0x033FF6C8 B 0x33BDD8C
	0x033FF6CC MOV W0, W31
	0x033FF6D0 RET
	0x033FF6D4 STR X30, [X31 - 0x20]!
	0x033FF6D8 STP X20, X19, [X31 + 0x10]
	0x033FF6DC ADRP X20, 0xFDE000
	0x033FF6E0 LDRB W8, [X20 + 0x4FA]
	0x033FF6E4 MOV X19, X1
	0x033FF6E8 TBNZ X8, 0x0, 0x33FF700
	0x033FF6EC ADRP X0, 0xD2E000
	0x033FF6F0 LDR X0, [X0 + 0xC80]
	0x033FF6F4 BL 0x1C16CF4
	0x033FF6F8 MOVZ W8, 0x1
	0x033FF6FC STRB W8, [X20 + 0x4FA]
	0x033FF700 CBZ X19, 0x33FF720
	0x033FF704 ADRP X8, 0xD2E000
	0x033FF708 LDR X8, [X8 + 0xC80]
	0x033FF70C LDR X9, [X19]
	0x033FF710 LDR X8, [X8]
	0x033FF714 CMP X9, X8
	0x033FF718 CSET W0, EQ
	0x033FF71C B 0x33FF724
	0x033FF720 MOV W0, W31
	0x033FF724 LDP X20, X19, [X31 + 0x10]
	0x033FF728 LDR X30, [X31], #0x20
	0x033FF72C RET
	0x033FF730 MOVZ W0, 0x28E
	0x033FF734 RET
	0x033FF738 STR X30, [X31 - 0x30]!
	0x033FF73C STP X22, X21, [X31 + 0x10]
	0x033FF740 STP X20, X19, [X31 + 0x20]
	0x033FF744 AND W8, W1, 0xFFFF
	0x033FF748 STR W8, [X31 + 0xC]
	0x033FF74C ADRP X21, 0xCF4000
	0x033FF750 LDR X21, [X21 + 0x758]
	0x033FF754 MOV W19, W2
	0x033FF758 MOV W20, W1
	0x033FF75C MOV X0, X21
	0x033FF760 BL 0x1C16D08
	0x033FF764 ADD X1, X31, 0xC
	0x033FF768 BL 0x1C16E04
	0x033FF76C MOV X22, X0
	0x033FF770 MOV X0, X21
	0x033FF774 STR W19, [X31 + 0x8]
	0x033FF778 BL 0x1C16D08
	0x033FF77C ADD X1, X31, 0x8
	0x033FF780 BL 0x1C16E04
	0x033FF784 MOV X21, X0
	0x033FF788 ADRP X0, 0xD2E000
	0x033FF78C LDR X0, [X0 + 0xC88]
	0x033FF790 BL 0x1C16D08
	0x033FF794 MOV X1, X22
	0x033FF798 MOV X2, X21
	0x033FF79C MOV X3, X31
	0x033FF7A0 BL 0x320A264
	0x033FF7A4 MOV X21, X0
	0x033FF7A8 ADRP X0, 0xD2E000
	0x033FF7AC LDR X0, [X0 + 0xC90]
	0x033FF7B0 BL 0x1C16D08
	0x033FF7B4 BL 0x1C16F10
	0x033FF7B8 MOV X1, X21
	0x033FF7BC MOV W2, W20
	0x033FF7C0 MOV W3, W19
	0x033FF7C4 MOV X22, X0
	0x033FF7C8 BL 0x33FF7E4
	0x033FF7CC ADRP X0, 0xD2E000
	0x033FF7D0 LDR X0, [X0 + 0xC98]
	0x033FF7D4 BL 0x1C16D08
	0x033FF7D8 MOV X1, X0
	0x033FF7DC MOV X0, X22
	0x033FF7E0 BL 0x1C16DEC
	0x033FF7E4 STP X30, X21, [X31 - 0x20]!
	0x033FF7E8 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xFDF000
	008 Move W8, [X21+1263]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xCF7000
	016 Move X0, [X0+368]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1263], W8
	020 Move X0, X20
	021 Move X1, X31
	022 Call Object..ctor, X0
	023 Compare X19, 0
	024 JumpIfEqual {111}
	025 Move W8, [X19+16]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X22, 0xCF7000
	028 Move X22, [X22+368]
	029 Move W23, W31
	030 Move W21, W31
	031 Move X0, [X22]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X19
	037 Move W1, W21
	038 Move X2, X31
	039 Call Char.IsSurrogate, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {65}
	044 Move X0, [X22]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X19
	050 Move W1, W21
	051 Move X2, X31
	052 Call Char.IsHighSurrogate, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {69}
	057 Move TEMP, X23
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfEqual {85}
	061 Move W8, [X19+16]
	062 Add W21, W21, 1
	063 Move W23, 1
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move TEMP, X23
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {73}
	069 Move TEMP, X23
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {85}
	073 Move W8, [X19+16]
	074 Add W21, W21, 1
	075 Move W23, W31
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move [X20+16], X19
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X30, [X31+48]
	083 Move X23, [X31+56]
	084 Return 
	085 Move X0, 0xD24000
	086 Move X0, [X0+824]
	087 Call 0x1C17D08
	088 Move X19, X0
	089 Move X0, 0xD24000
	090 Move X0, [X0+832]
	091 Call 0x1C17D08
	092 Move X1, X0
	093 Move X0, X19
	094 Move X2, X31
	095 Call SR.Format, X0, X1
	096 Move X19, X0
	097 Move X0, 0xCFD000
	098 Move X0, [X0+1400]
	099 Call 0x1C17D08
	100 Call 0x1C17F10
	101 Move X1, X19
	102 Move X2, X31
	103 Move X20, X0
	104 Call ArgumentException..ctor, X0, X1
	105 Move X0, 0xD2F000
	106 Move X0, [X0+3144]
	107 Call 0x1C17D08
	108 Move X1, X0
	109 Move X0, X20
	110 Call 0x1C17DEC
	111 Move X0, 0xCFA000
	112 Move X0, [X0+1320]
	113 Call 0x1C17D08
	114 Call 0x1C17F10
	115 Move X19, X0
	116 Move X0, 0xD24000
	117 Move X0, [X0+832]
	118 Call 0x1C17D08
	119 Move X1, X0
	120 Move X0, X19
	121 Move X2, X31
	122 Call ArgumentNullException..ctor, X0, X1
	123 Move X0, 0xD2F000
	124 Move X0, [X0+3144]
	125 Call 0x1C17D08
	126 Move X1, X0
	127 Move X0, X19
	128 Call 0x1C17DEC

Method: System.String get_DefaultString()

Disassembly:
	0x033FF94C BL 0x1C16D08
	0x033FF950 ADD X1, X31, 0xC

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Text.DecoderFallbackBuffer CreateFallbackBuffer()

Disassembly:
	0x033FF954 BL 0x1C16E04
	0x033FF958 MOV X20, X0
	0x033FF95C MOVZ W8, 0xDBFF
	0x033FF960 MOV X0, X19
	0x033FF964 STR W8, [X31 + 0x8]
	0x033FF968 BL 0x1C16D08
	0x033FF96C ADD X1, X31, 0x8
	0x033FF970 BL 0x1C16E04
	0x033FF974 MOV X19, X0
	0x033FF978 ADRP X0, 0xD23000
	0x033FF97C LDR X0, [X0 + 0x370]
	0x033FF980 BL 0x1C16D08
	0x033FF984 MOV X1, X20
	0x033FF988 MOV X2, X19
	0x033FF98C MOV X3, X31
	0x033FF990 BL 0x320A264
	0x033FF994 MOV X19, X0
	0x033FF998 ADRP X0, 0xCFC000
	0x033FF99C LDR X0, [X0 + 0x760]
	0x033FF9A0 BL 0x1C16D08
	0x033FF9A4 BL 0x1C16F10
	0x033FF9A8 MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xFDF000
	006 Move X21, 0xD2F000
	007 Move W8, [X20+1264]
	008 Move X21, [X21+3152]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xD2F000
	015 Move X0, [X0+3152]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1264], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X19
	022 Move X20, X0
	023 Call DecoderReplacementFallbackBuffer..ctor, X0, X1
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: System.Int32 get_MaxCharCount()

Disassembly:
	0x033FF9E8 BL 0x1C16D08
	0x033FF9EC ADD X1, X31, 0x8
	0x033FF9F0 BL 0x1C16E04
	0x033FF9F4 MOV X19, X0
	0x033FF9F8 ADRP X0, 0xD23000
	0x033FF9FC LDR X0, [X0 + 0x370]
	0x033FFA00 BL 0x1C16D08

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+16]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Boolean Equals(System.Object value)

Disassembly:
	0x033FFA04 MOV X1, X20
	0x033FFA08 MOV X2, X19
	0x033FFA0C MOV X3, X31
	0x033FFA10 BL 0x320A264
	0x033FFA14 MOV X19, X0
	0x033FFA18 ADRP X0, 0xCFC000
	0x033FFA1C LDR X0, [X0 + 0x760]
	0x033FFA20 BL 0x1C16D08
	0x033FFA24 BL 0x1C16F10
	0x033FFA28 MOV X20, X0
	0x033FFA2C ADRP X0, 0xD23000
	0x033FFA30 LDR X0, [X0 + 0x380]
	0x033FFA34 BL 0x1C16D08
	0x033FFA38 MOV X1, X0
	0x033FFA3C MOV X0, X20
	0x033FFA40 MOV X2, X19
	0x033FFA44 MOV X3, X31
	0x033FFA48 BL 0x3311888
	0x033FFA4C ADRP X0, 0xD2E000
	0x033FFA50 LDR X0, [X0 + 0xCA0]
	0x033FFA54 BL 0x1C16D08
	0x033FFA58 MOV X1, X0
	0x033FFA5C MOV X0, X20
	0x033FFA60 BL 0x1C16DEC
	0x033FFA64 SUB X31, X31, 0x50
	0x033FFA68 STP X30, X25, [X31 + 0x10]
	0x033FFA6C STP X24, X23, [X31 + 0x20]
	0x033FFA70 STP X22, X21, [X31 + 0x30]
	0x033FFA74 STP X20, X19, [X31 + 0x40]
	0x033FFA78 ADRP X25, 0xFDE000
	0x033FFA7C ADRP X24, 0xCF6000
	0x033FFA80 LDRB W8, [X25 + 0x4FC]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xFDF000
	006 Move W8, [X21+1265]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD24000
	014 Move X0, [X0+1608]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1265], W8
	018 Compare X20, 0
	019 JumpIfEqual {26}
	020 Move X8, 0xD24000
	021 Move X8, [X8+1608]
	022 Move X9, [X20]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 NotImplemented "Instruction CSEL not yet implemented."
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move W0, W31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0
	032 Compare X8, 0
	033 JumpIfEqual {43}
	034 Move X0, [X19+16]
	035 Move X1, [X8+16]
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X2, X31
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Call String.op_Equality, X0, X1
	042 Return X0
	043 Call 0x1C17F20

Method: System.Int32 GetHashCode()

Disassembly:
	0x033FFA84 LDR X24, [X24 + 0x170]
	0x033FFA88 MOV W19, W4
	0x033FFA8C MOV W20, W3
	0x033FFA90 MOV W22, W2
	0x033FFA94 MOV X23, X1
	0x033FFA98 MOV X21, X0
	0x033FFA9C TBNZ X8, 0x0, 0x33FFAB4
	0x033FFAA0 ADRP X0, 0xCF6000

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+344]
	007 Move X1, [X8+352]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

