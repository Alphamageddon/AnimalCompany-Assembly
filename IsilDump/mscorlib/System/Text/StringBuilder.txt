Type: System.Text.StringBuilder

Method: System.Void .ctor()

Disassembly:
	0x03232AC4 MOV W1, W31
	0x03232AC8 MOV X19, X0
	0x03232ACC BL 0x3232ADC
	0x03232AD0 MOV X0, X19
	0x03232AD4 LDP X30, X19, [X31], #0x10
	0x03232AD8 RET
	0x03232ADC STR X30, [X31 - 0x40]!
	0x03232AE0 STP X24, X23, [X31 + 0x10]
	0x03232AE4 STP X22, X21, [X31 + 0x20]
	0x03232AE8 STP X20, X19, [X31 + 0x30]
	0x03232AEC ADRP X21, 0x11AA000
	0x03232AF0 LDRB W8, [X21 + 0x3CF]
	0x03232AF4 MOV W20, W1
	0x03232AF8 MOV X19, X0
	0x03232AFC TBNZ X8, 0x0, 0x3232B20
	0x03232B00 ADRP X0, 0xECA000
	0x03232B04 LDR X0, [X0 + 0x8D8]
	0x03232B08 BL 0x1C16CF4
	0x03232B0C ADRP X0, 0xEC1000
	0x03232B10 LDR X0, [X0 + 0x5A8]
	0x03232B14 BL 0x1C16CF4
	0x03232B18 MOVZ W8, 0x1
	0x03232B1C STRB W8, [X21 + 0x3CF]
	0x03232B20 TBNZ X20, 0x1F, 0x3232C98
	0x03232B24 LDR W8, [X19 + 0x28]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11AB000
	006 Move X20, 0xECB000
	007 Move W8, [X21+967]
	008 Move X20, [X20+2264]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xECB000
	015 Move X0, [X0+2264]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+967], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call Object..ctor, X0
	022 Move TEMP, 0x80000000
	023 Not TEMP
	024 Move W8, TEMP
	025 Move [X19+40], W8
	026 Move X0, [X20]
	027 Move W1, 16
	028 Call 0x1C17D6C
	029 Move [X19+16], X0
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return 

Method: System.Void .ctor(System.Int32 capacity)

Disassembly:
	0x03232B28 CMP W8, W20
	0x03232B2C B.LT 0x3232CC8

ISIL:
	001 Move TEMP, 0x80000000
	002 Not TEMP
	003 Move W2, TEMP

Method: System.Void .ctor(System.String value)

Disassembly:
	0x03232CF8 MOV X2, X0
	0x03232CFC MOV X0, X19
	0x03232D00 MOV X1, X20
	0x03232D04 MOV X3, X31
	0x03232D08 BL 0x3311888
	0x03232D0C ADRP X0, 0xEF0000
	0x03232D10 LDR X0, [X0 + 0x510]

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {4}
	003 Move W3, [X1+16]
	004 Move W3, W31
	005 Move W4, 16
	006 Move W2, W31
	007 Call StringBuilder..ctor, X0, X1, X2, X3, X4
	008 Return 

Method: System.Void .ctor(System.String value, System.Int32 capacity)

Disassembly:
	0x03232D14 BL 0x1C16D08
	0x03232D18 MOV X1, X0
	0x03232D1C MOV X0, X19
	0x03232D20 BL 0x1C16DEC
	0x03232D24 STP X30, X21, [X31 - 0x20]!
	0x03232D28 STP X20, X19, [X31 + 0x10]
	0x03232D2C TBNZ X2, 0x1F, 0x3232DD4

ISIL:
	001 Move W4, W2
	002 Compare X1, 0
	003 JumpIfEqual {5}
	004 Move W3, [X1+16]
	005 Move W3, W31
	006 Move W2, W31

Method: System.Void .ctor(System.String value, System.Int32 startIndex, System.Int32 length, System.Int32 capacity)

Disassembly:
	0x03232D30 MOV W20, W2
	0x03232D34 MOV X19, X0
	0x03232D38 CBZ W2, 0x3232DBC
	0x03232D3C LDP W8, W9, [X19 + 0x20]
	0x03232D40 LDR W10, [X19 + 0x28]
	0x03232D44 ADD W9, W9, W20
	0x03232D48 ADD W9, W9, W8
	0x03232D4C CMP W9, W10
	0x03232D50 B.GT 0x3232E04
	0x03232D54 CMP W9, W20
	0x03232D58 B.LT 0x3232E04
	0x03232D5C MOV W21, W1
	0x03232D60 LDR X9, [X19 + 0x10]
	0x03232D64 MOV W10, W8
	0x03232D68 CBZ X9, 0x3232DCC
	0x03232D6C LDR X8, [X9 + 0x18]
	0x03232D70 CMP W10, W8
	0x03232D74 B.LT 0x3232D98
	0x03232D78 MOV X0, X19
	0x03232D7C MOV W1, W20
	0x03232D80 STR W10, [X19 + 0x20]
	0x03232D84 BL 0x3232FC8
	0x03232D88 LDR X9, [X19 + 0x10]
	0x03232D8C MOV W10, W31
	0x03232D90 CBNZ X9, 0x3232D6C
	0x03232D94 B 0x3232DCC
	0x03232D98 CMP W10, W8
	0x03232D9C B.CS 0x3232DD0
	0x03232DA0 ADD W8, W10, 0x1
	0x03232DA4 ADD X9, X9, W10, 0x1, SXTW
	0x03232DA8 CMP W20, 0x2
	0x03232DAC SUB W20, W20, 0x1
	0x03232DB0 STRH W21, [X9 + 0x20]
	0x03232DB4 B.GE 0x3232D60
	0x03232DB8 STR W8, [X19 + 0x20]
	0x03232DBC MOV X0, X19
	0x03232DC0 LDP X20, X19, [X31 + 0x10]
	0x03232DC4 LDP X30, X21, [X31], #0x20
	0x03232DC8 RET
	0x03232DCC BL 0x1C16F20
	0x03232DD0 BL 0x1C16F28
	0x03232DD4 ADRP X0, 0xEC9000
	0x03232DD8 LDR X0, [X0 + 0x760]
	0x03232DDC BL 0x1C16D08
	0x03232DE0 BL 0x1C16F10
	0x03232DE4 MOV X19, X0
	0x03232DE8 ADRP X0, 0xEF0000
	0x03232DEC LDR X0, [X0 + 0x518]
	0x03232DF0 BL 0x1C16D08
	0x03232DF4 MOV X20, X0
	0x03232DF8 ADRP X0, 0xEF0000
	0x03232DFC LDR X0, [X0 + 0x30]
	0x03232E00 B 0x3232E30
	0x03232E04 ADRP X0, 0xEC9000
	0x03232E08 LDR X0, [X0 + 0x760]
	0x03232E0C BL 0x1C16D08
	0x03232E10 BL 0x1C16F10
	0x03232E14 MOV X19, X0
	0x03232E18 ADRP X0, 0xEF0000
	0x03232E1C LDR X0, [X0 + 0x518]
	0x03232E20 BL 0x1C16D08
	0x03232E24 MOV X20, X0
	0x03232E28 ADRP X0, 0xEF0000
	0x03232E2C LDR X0, [X0 + 0x520]
	0x03232E30 BL 0x1C16D08
	0x03232E34 MOV X2, X0
	0x03232E38 MOV X0, X19
	0x03232E3C MOV X1, X20
	0x03232E40 MOV X3, X31
	0x03232E44 BL 0x3311888
	0x03232E48 ADRP X0, 0xEF0000
	0x03232E4C LDR X0, [X0 + 0x528]
	0x03232E50 BL 0x1C16D08
	0x03232E54 MOV X1, X0
	0x03232E58 MOV X0, X19
	0x03232E5C BL 0x1C16DEC
	0x03232E60 STR X30, [X31 - 0x10]!
	0x03232E64 CBZ X0, 0x3232E7C
	0x03232E68 LDR W8, [X0 + 0x24]
	0x03232E6C CMP W8, W1
	0x03232E70 B.LE 0x3232E80
	0x03232E74 LDR X0, [X0 + 0x18]
	0x03232E78 CBNZ X0, 0x3232E68
	0x03232E7C BL 0x1C16F20
	0x03232E80 LDR X30, [X31], #0x10
	0x03232E84 RET
	0x03232E88 STP X30, X19, [X31 - 0x10]!
	0x03232E8C CBZ X0, 0x3232F08
	0x03232E90 LDR W8, [X0 + 0x24]
	0x03232E94 SUBS W8, W1, W8
	0x03232E98 B.PL 0x3232ED8
	0x03232E9C LDR X0, [X0 + 0x18]
	0x03232EA0 CBNZ X0, 0x3232E8C
	0x03232EA4 ADRP X0, 0xECB000
	0x03232EA8 LDR X0, [X0 + 0xF78]
	0x03232EAC BL 0x1C16D08
	0x03232EB0 BL 0x1C16F10
	0x03232EB4 MOV X1, X31
	0x03232EB8 MOV X19, X0
	0x03232EBC BL 0x3379B10
	0x03232EC0 ADRP X0, 0xEF0000
	0x03232EC4 LDR X0, [X0 + 0x530]
	0x03232EC8 BL 0x1C16D08
	0x03232ECC MOV X1, X0
	0x03232ED0 MOV X0, X19
	0x03232ED4 BL 0x1C16DEC
	0x03232ED8 LDR W9, [X0 + 0x20]
	0x03232EDC CMP W8, W9
	0x03232EE0 B.GE 0x3232EA4
	0x03232EE4 LDR X9, [X0 + 0x10]
	0x03232EE8 CBZ X9, 0x3232F08
	0x03232EEC LDR W10, [X9 + 0x18]
	0x03232EF0 CMP W8, W10
	0x03232EF4 B.CS 0x3232F0C
	0x03232EF8 ADD X8, X9, W8, 0x1, UXTW
	0x03232EFC LDRH W0, [X8 + 0x20]
	0x03232F00 LDP X30, X19, [X31], #0x10
	0x03232F04 RET
	0x03232F08 BL 0x1C16F20
	0x03232F0C BL 0x1C16F28
	0x03232F10 STR X30, [X31 - 0x20]!
	0x03232F14 STP X20, X19, [X31 + 0x10]
	0x03232F18 CBZ X0, 0x3232FC0
	0x03232F1C LDR W8, [X0 + 0x24]
	0x03232F20 SUBS W8, W1, W8
	0x03232F24 B.PL 0x3232F8C
	0x03232F28 LDR X0, [X0 + 0x18]
	0x03232F2C CBNZ X0, 0x3232F18
	0x03232F30 ADRP X0, 0xEC9000
	0x03232F34 LDR X0, [X0 + 0x760]
	0x03232F38 BL 0x1C16D08
	0x03232F3C BL 0x1C16F10
	0x03232F40 MOV X19, X0
	0x03232F44 ADRP X0, 0xECC000
	0x03232F48 LDR X0, [X0 + 0x130]
	0x03232F4C BL 0x1C16D08
	0x03232F50 MOV X20, X0
	0x03232F54 ADRP X0, 0xEE9000
	0x03232F58 LDR X0, [X0 + 0x660]
	0x03232F5C BL 0x1C16D08
	0x03232F60 MOV X2, X0
	0x03232F64 MOV X0, X19
	0x03232F68 MOV X1, X20
	0x03232F6C MOV X3, X31
	0x03232F70 BL 0x3311888
	0x03232F74 ADRP X0, 0xEF0000
	0x03232F78 LDR X0, [X0 + 0x538]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x11AB000
	009 Move W8, [X24+968]
	010 Move W23, W4
	011 Move W19, W3
	012 Move W20, W2
	013 Move X21, X1
	014 Move X22, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {30}
	019 Move X0, 0xECB000
	020 Move X0, [X0+2264]
	021 Call 0x1C17CF4
	022 Move X0, 0xEC2000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move X0, 0xEC4000
	026 Move X0, [X0+632]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X24+968], W8
	030 Move X0, X22
	031 Move X1, X31
	032 Call Object..ctor, X0
	033 Move TEMP, X23
	034 And TEMP, TEMP, -2147483648
	035 Compare TEMP, -2147483648
	036 JumpIfEqual {96}
	037 Move TEMP, X19
	038 And TEMP, TEMP, -2147483648
	039 Compare TEMP, -2147483648
	040 JumpIfEqual {101}
	041 Move TEMP, X20
	042 And TEMP, TEMP, -2147483648
	043 Compare TEMP, -2147483648
	044 JumpIfEqual {132}
	045 Compare X21, 0
	046 JumpIfNotEqual {54}
	047 Move X8, 0xEC4000
	048 Move X8, [X8+632]
	049 Move X8, [X8]
	050 Move X8, [X8+184]
	051 Move X21, [X8]
	052 Compare X21, 0
	053 JumpIfEqual {166}
	054 Move W8, [X21+16]
	055 Subtract W8, W8, W19
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X8, 0xEC2000
	058 Move X8, [X8+1448]
	059 Move TEMP, 0x80000000
	060 Not TEMP
	061 Move W9, TEMP
	062 Move [X22+40], W9
	063 Move X24, 0xECB000
	064 Move X0, [X8]
	065 Move W8, [X0+224]
	066 Move X24, [X24+2264]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move W8, 16
	072 NotImplemented "Instruction CSEL not yet implemented."
	073 Move W1, W19
	074 Move X2, X31
	075 Call Math.Max, X0, X1
	076 Move X8, [X24]
	077 Move W1, W0
	078 Move X0, X8
	079 Call 0x1C17D6C
	080 Move [X22+16], X0
	081 Move X0, X31
	082 Move [X22+32], W19
	083 Call RuntimeHelpers.get_OffsetToStringData
	084 Move X1, [X22+16]
	085 Add X8, X21, W20
	086 Move W3, W19
	087 Move X20, [X31+48]
	088 Move X19, [X31+56]
	089 Move X22, [X31+32]
	090 Move X21, [X31+40]
	091 Move X24, [X31+16]
	092 Move X23, [X31+24]
	093 Add X0, X8, W0
	094 Move W2, W31
	095 Move X30, [X31+64]
	096 Move X0, 0xEF1000
	097 Move X0, [X0+1136]
	098 Call 0x1C17D08
	099 Move X20, 0xEEC000
	100 Move X20, [X20+88]
	101 Move X0, 0xEF1000
	102 Move X0, [X0+1144]
	103 Call 0x1C17D08
	104 Move X20, 0xECA000
	105 Move X20, [X20+1896]
	106 Move X19, X0
	107 Move X0, X20
	108 Call 0x1C17D08
	109 Move X1, X0
	110 Move X0, X19
	111 Move X2, X31
	112 Call SR.Format, X0, X1
	113 Move X19, X0
	114 Move X0, 0xECA000
	115 Move X0, [X0+1888]
	116 Call 0x1C17D08
	117 Call 0x1C17F10
	118 Move X21, X0
	119 Move X0, X20
	120 Call 0x1C17D08
	121 Move X1, X0
	122 Move X0, X21
	123 Move X2, X19
	124 Move X3, X31
	125 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	126 Move X0, 0xEF1000
	127 Move X0, [X0+1152]
	128 Call 0x1C17D08
	129 Move X1, X0
	130 Move X0, X21
	131 Call 0x1C17DEC
	132 Move X0, 0xECA000
	133 Move X0, [X0+1888]
	134 Call 0x1C17D08
	135 Call 0x1C17F10
	136 Move X19, X0
	137 Move X0, 0xEEA000
	138 Move X0, [X0+1624]
	139 Call 0x1C17D08
	140 Move X20, X0
	141 Move X0, 0xEF1000
	142 Move X0, [X0+216]
	143 Move X0, 0xECA000
	144 Move X0, [X0+1888]
	145 Call 0x1C17D08
	146 Call 0x1C17F10
	147 Move X19, X0
	148 Move X0, 0xECA000
	149 Move X0, [X0+1896]
	150 Call 0x1C17D08
	151 Move X20, X0
	152 Move X0, 0xEF1000
	153 Move X0, [X0+304]
	154 Call 0x1C17D08
	155 Move X2, X0
	156 Move X0, X19
	157 Move X1, X20
	158 Move X3, X31
	159 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	160 Move X0, 0xEF1000
	161 Move X0, [X0+1152]
	162 Call 0x1C17D08
	163 Move X1, X0
	164 Move X0, X19
	165 Call 0x1C17DEC
	166 Call 0x1C17F20

Method: System.Void .ctor(System.Int32 capacity, System.Int32 maxCapacity)

Disassembly:
	0x03232B30 CBNZ W20, 0x3232B3C
	0x03232B34 LDR X8, [X19 + 0x18]
	0x03232B38 CBZ X8, 0x3232C58
	0x03232B3C LDP W9, W8, [X19 + 0x20]
	0x03232B40 ADD W23, W9, W8
	0x03232B44 SUB W2, W20, W23
	0x03232B48 CMP W2, 0x0
	0x03232B4C B.LE 0x3232B6C
	0x03232B50 MOV X0, X19
	0x03232B54 LDP X20, X19, [X31 + 0x30]
	0x03232B58 LDP X22, X21, [X31 + 0x20]
	0x03232B5C LDP X24, X23, [X31 + 0x10]
	0x03232B60 MOV W1, W31
	0x03232B64 LDR X30, [X31], #0x40
	0x03232B68 B 0x3232D24
	0x03232B6C CMP W8, W20
	0x03232B70 MOV X22, X19
	0x03232B74 B.LE 0x3232B90
	0x03232B78 MOV X22, X19
	0x03232B7C LDR X22, [X22 + 0x18]
	0x03232B80 CBZ X22, 0x3232C64
	0x03232B84 LDR W9, [X22 + 0x24]
	0x03232B88 CMP W9, W20
	0x03232B8C B.GT 0x3232B7C
	0x03232B90 CMP X22, X19
	0x03232B94 B.EQ 0x3232C60
	0x03232B98 LDR X24, [X19 + 0x10]
	0x03232B9C CBZ X24, 0x3232C64
	0x03232BA0 ADRP X9, 0xEC1000
	0x03232BA4 LDR X9, [X9 + 0x5A8]
	0x03232BA8 LDR W1, [X24 + 0x18]
	0x03232BAC LDR X0, [X9]
	0x03232BB0 ADD W21, W8, W1
	0x03232BB4 LDR W9, [X0 + 0xE0]
	0x03232BB8 CBNZ W9, 0x3232BC4
	0x03232BBC BL 0x1C16DFC
	0x03232BC0 LDR W1, [X24 + 0x18]
	0x03232BC4 ADD W8, W23, W23, 0x1, LSL
	0x03232BC8 MOVZ W9, 0x6667
	0x03232BCC MOVK W9, 0x66660000
	0x03232BD0 UBFM W8, W8, 0x1F, 0x1E
	0x03232BD4 SMADDL X8, X8, X9, X31
	0x03232BD8 UBFM X9, X8, 0x3F, 0x3F
	0x03232BDC SBFM X8, X8, 0x21, 0x3F
	0x03232BE0 ADD W0, W8, W9
	0x03232BE4 MOV X2, X31
	0x03232BE8 BL 0x337EDF0
	0x03232BEC MOV W1, W0
	0x03232BF0 MOV W0, W21
	0x03232BF4 MOV X2, X31
	0x03232BF8 BL 0x337EE94
	0x03232BFC LDR X9, [X22 + 0x10]
	0x03232C00 CBZ X9, 0x3232C64
	0x03232C04 LDR W8, [X22 + 0x24]
	0x03232C08 LDR W10, [X9 + 0x18]
	0x03232C0C SUB W1, W0, W8
	0x03232C10 CMP W1, W10
	0x03232C14 B.LE 0x3232C68
	0x03232C18 ADRP X8, 0xECA000
	0x03232C1C LDR X8, [X8 + 0x8D8]
	0x03232C20 LDR X0, [X8]
	0x03232C24 BL 0x1C16D6C
	0x03232C28 LDR X8, [X22 + 0x10]
	0x03232C2C LDR W4, [X22 + 0x20]
	0x03232C30 MOV X21, X0
	0x03232C34 MOV W1, W31
	0x03232C38 MOV X0, X8
	0x03232C3C MOV X2, X21
	0x03232C40 MOV W3, W31
	0x03232C44 MOV X5, X31
	0x03232C48 BL 0x339FCE8
	0x03232C4C STR X21, [X19 + 0x10]
	0x03232C50 LDR W8, [X22 + 0x24]
	0x03232C54 B 0x3232C6C
	0x03232C58 STR X31, [X19 + 0x20]
	0x03232C5C B 0x3232C84
	0x03232C60 CBNZ X19, 0x3232C78
	0x03232C64 BL 0x1C16F20
	0x03232C68 STR X9, [X19 + 0x10]
	0x03232C6C LDR X9, [X22 + 0x18]
	0x03232C70 STR W8, [X19 + 0x24]
	0x03232C74 STR X9, [X19 + 0x18]
	0x03232C78 LDR W8, [X22 + 0x24]
	0x03232C7C SUB W8, W20, W8
	0x03232C80 STR W8, [X19 + 0x20]
	0x03232C84 LDP X20, X19, [X31 + 0x30]
	0x03232C88 LDP X22, X21, [X31 + 0x20]
	0x03232C8C LDP X24, X23, [X31 + 0x10]
	0x03232C90 LDR X30, [X31], #0x40
	0x03232C94 RET
	0x03232C98 ADRP X0, 0xEC9000
	0x03232C9C LDR X0, [X0 + 0x760]
	0x03232CA0 BL 0x1C16D08
	0x03232CA4 BL 0x1C16F10
	0x03232CA8 MOV X19, X0
	0x03232CAC ADRP X0, 0xECB000
	0x03232CB0 LDR X0, [X0 + 0xEC8]
	0x03232CB4 BL 0x1C16D08
	0x03232CB8 MOV X20, X0
	0x03232CBC ADRP X0, 0xEF0000
	0x03232CC0 LDR X0, [X0]
	0x03232CC4 B 0x3232CF4
	0x03232CC8 ADRP X0, 0xEC9000
	0x03232CCC LDR X0, [X0 + 0x760]
	0x03232CD0 BL 0x1C16D08
	0x03232CD4 BL 0x1C16F10
	0x03232CD8 MOV X19, X0
	0x03232CDC ADRP X0, 0xECB000
	0x03232CE0 LDR X0, [X0 + 0xEC8]
	0x03232CE4 BL 0x1C16D08
	0x03232CE8 MOV X20, X0
	0x03232CEC ADRP X0, 0xEEB000
	0x03232CF0 LDR X0, [X0 + 0x2A0]
	0x03232CF4 BL 0x1C16D08

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11AB000
	007 Move W8, [X22+969]
	008 Move W20, W2
	009 Move W21, W1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xECB000
	016 Move X0, [X0+2264]
	017 Call 0x1C17CF4
	018 Move X0, 0xEC2000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+969], W8
	023 Move X0, X19
	024 Move X1, X31
	025 Call Object..ctor, X0
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move TEMP, X21
	029 And TEMP, TEMP, -2147483648
	030 Compare TEMP, -2147483648
	031 JumpIfEqual {93}
	032 Move X22, 0xECB000
	033 Move X22, [X22+2264]
	034 Compare W21, 0
	035 JumpIfNotEqual {48}
	036 Move X8, 0xEC2000
	037 Move X8, [X8+1448]
	038 Move X0, [X8]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move W0, 16
	044 Move W1, W20
	045 Move X2, X31
	046 Call Math.Min, X0, X1
	047 Move W21, W0
	048 Move [X19+40], W20
	049 Move X0, [X22]
	050 Move W1, W21
	051 Call 0x1C17D6C
	052 Move [X19+16], X0
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X30, [X31+48]
	058 Return 
	059 Move X0, 0xECA000
	060 Move X0, [X0+1888]
	061 Call 0x1C17D08
	062 Call 0x1C17F10
	063 Move X19, X0
	064 Move X0, 0xEEC000
	065 Move X0, [X0+88]
	066 Call 0x1C17D08
	067 Move X20, X0
	068 Move X0, 0xEF1000
	069 Move X0, [X0+1104]
	070 Move X0, 0xECA000
	071 Move X0, [X0+1888]
	072 Call 0x1C17D08
	073 Call 0x1C17F10
	074 Move X19, X0
	075 Move X0, 0xEF1000
	076 Move X0, [X0+1112]
	077 Call 0x1C17D08
	078 Move X20, X0
	079 Move X0, 0xEF1000
	080 Move X0, [X0+1120]
	081 Call 0x1C17D08
	082 Move X2, X0
	083 Move X0, X19
	084 Move X1, X20
	085 Move X3, X31
	086 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	087 Move X0, 0xEF1000
	088 Move X0, [X0+1128]
	089 Call 0x1C17D08
	090 Move X1, X0
	091 Move X0, X19
	092 Call 0x1C17DEC
	093 Move X0, 0xEF1000
	094 Move X0, [X0+1136]
	095 Call 0x1C17D08
	096 Move X20, 0xEEC000
	097 Move X20, [X20+88]
	098 Move X19, X0
	099 Move X0, X20
	100 Call 0x1C17D08
	101 Move X1, X0
	102 Move X0, X19
	103 Move X2, X31
	104 Call SR.Format, X0, X1
	105 Move X19, X0
	106 Move X0, 0xECA000
	107 Move X0, [X0+1888]
	108 Call 0x1C17D08
	109 Call 0x1C17F10
	110 Move X21, X0
	111 Move X0, X20
	112 Call 0x1C17D08
	113 Move X1, X0
	114 Move X0, X21
	115 Move X2, X19
	116 Move X3, X31
	117 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	118 Move X0, 0xEF1000
	119 Move X0, [X0+1128]
	120 Call 0x1C17D08
	121 Move X1, X0
	122 Move X0, X21
	123 Call 0x1C17DEC

Method: System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)

Disassembly:
	0x03233044 LDR W8, [X0 + 0xE0]
	0x03233048 LDR X22, [X22 + 0x8F0]
	0x0323304C CBNZ W8, 0x3233054
	0x03233050 BL 0x1C16DFC
	0x03233054 MOVZ W1, 0x1F40
	0x03233058 MOV W0, W21
	0x0323305C MOV X2, X31
	0x03233060 BL 0x337EE94
	0x03233064 MOV W1, W0
	0x03233068 MOV W0, W20
	0x0323306C MOV X2, X31
	0x03233070 BL 0x337EDF0
	0x03233074 LDR X8, [X22]
	0x03233078 MOV W20, W0
	0x0323307C MOV X0, X8
	0x03233080 BL 0x1C16F10
	0x03233084 MOV X1, X19
	0x03233088 MOV X21, X0
	0x0323308C BL 0x32359C4
	0x03233090 LDP W9, W8, [X19 + 0x20]
	0x03233094 STR X21, [X19 + 0x18]
	0x03233098 ADD W8, W9, W8
	0x0323309C ADD W9, W8, W20
	0x032330A0 CMP W9, W20
	0x032330A4 STP W31, W8, [X19 + 0x20]
	0x032330A8 B.LT 0x323311C
	0x032330AC ADRP X8, 0xEC9000
	0x032330B0 LDR X8, [X8 + 0x8D8]
	0x032330B4 MOV W1, W20
	0x032330B8 LDR X0, [X8]
	0x032330BC BL 0x1C16D6C
	0x032330C0 STR X0, [X19 + 0x10]
	0x032330C4 LDP X20, X19, [X31 + 0x20]
	0x032330C8 LDP X22, X21, [X31 + 0x10]
	0x032330CC LDR X30, [X31], #0x30
	0x032330D0 RET
	0x032330D4 ADRP X0, 0xEC8000
	0x032330D8 LDR X0, [X0 + 0x760]
	0x032330DC BL 0x1C16D08
	0x032330E0 BL 0x1C16F10
	0x032330E4 MOV X19, X0
	0x032330E8 ADRP X0, 0xEEF000
	0x032330EC LDR X0, [X0 + 0x540]
	0x032330F0 BL 0x1C16D08
	0x032330F4 MOV X20, X0
	0x032330F8 ADRP X0, 0xEEA000
	0x032330FC LDR X0, [X0 + 0x2A0]
	0x03233100 BL 0x1C16D08
	0x03233104 MOV X2, X0
	0x03233108 MOV X0, X19
	0x0323310C MOV X1, X20
	0x03233110 MOV X3, X31
	0x03233114 BL 0x3311888
	0x03233118 B 0x323313C
	0x0323311C STR X31, [X19 + 0x10]
	0x03233120 ADRP X0, 0xEC9000
	0x03233124 LDR X0, [X0 + 0xDB8]
	0x03233128 BL 0x1C16D08
	0x0323312C BL 0x1C16F10
	0x03233130 MOV X1, X31
	0x03233134 MOV X19, X0
	0x03233138 BL 0x339F30C
	0x0323313C ADRP X0, 0xEEF000
	0x03233140 LDR X0, [X0 + 0x548]
	0x03233144 BL 0x1C16D08
	0x03233148 MOV X1, X0
	0x0323314C MOV X0, X19
	0x03233150 BL 0x1C16DEC
	0x03233154 STR X30, [X31 - 0x20]!
	0x03233158 STP X20, X19, [X31 + 0x10]
	0x0323315C TBNZ X2, 0x1F, 0x32331AC
	0x03233160 TBNZ X3, 0x1F, 0x32331CC
	0x03233164 CBZ X1, 0x3233198
	0x03233168 LDR W8, [X1 + 0x18]
	0x0323316C SUB W9, W8, W2
	0x03233170 CMP W9, W3
	0x03233174 B.LT 0x32331FC
	0x03233178 CBZ W3, 0x32331A0
	0x0323317C CMP W8, W2
	0x03233180 B.LS 0x3233258
	0x03233184 ADD X8, X1, W2, 0x1, UXTW
	0x03233188 ADD X1, X8, 0x20
	0x0323318C MOV W2, W3
	0x03233190 BL 0x3233290
	0x03233194 B 0x32331A0
	0x03233198 ORR W8, W2, W3, 0x0
	0x0323319C CBNZ W8, 0x323325C
	0x032331A0 LDP X20, X19, [X31 + 0x10]
	0x032331A4 LDR X30, [X31], #0x20
	0x032331A8 RET
	0x032331AC ADRP X0, 0xEC8000
	0x032331B0 LDR X0, [X0 + 0x760]
	0x032331B4 BL 0x1C16D08
	0x032331B8 BL 0x1C16F10
	0x032331BC MOV X19, X0
	0x032331C0 ADRP X0, 0xEE8000
	0x032331C4 LDR X0, [X0 + 0x658]
	0x032331C8 B 0x32331E8
	0x032331CC ADRP X0, 0xEC8000
	0x032331D0 LDR X0, [X0 + 0x760]
	0x032331D4 BL 0x1C16D08
	0x032331D8 BL 0x1C16F10
	0x032331DC MOV X19, X0
	0x032331E0 ADRP X0, 0xEEF000
	0x032331E4 LDR X0, [X0 + 0x310]
	0x032331E8 BL 0x1C16D08
	0x032331EC MOV X20, X0
	0x032331F0 ADRP X0, 0xEEF000
	0x032331F4 LDR X0, [X0 + 0x550]
	0x032331F8 B 0x3233228
	0x032331FC ADRP X0, 0xEC8000
	0x03233200 LDR X0, [X0 + 0x760]
	0x03233204 BL 0x1C16D08
	0x03233208 BL 0x1C16F10
	0x0323320C MOV X19, X0
	0x03233210 ADRP X0, 0xEEF000
	0x03233214 LDR X0, [X0 + 0x310]
	0x03233218 BL 0x1C16D08
	0x0323321C MOV X20, X0
	0x03233220 ADRP X0, 0xEE8000
	0x03233224 LDR X0, [X0 + 0x660]
	0x03233228 BL 0x1C16D08
	0x0323322C MOV X2, X0
	0x03233230 MOV X0, X19
	0x03233234 MOV X1, X20
	0x03233238 MOV X3, X31
	0x0323323C BL 0x3311888
	0x03233240 ADRP X0, 0xEEF000
	0x03233244 LDR X0, [X0 + 0x558]
	0x03233248 BL 0x1C16D08
	0x0323324C MOV X1, X0
	0x03233250 MOV X0, X19
	0x03233254 BL 0x1C16DEC
	0x03233258 BL 0x1C16F28
	0x0323325C ADRP X0, 0xEC5000
	0x03233260 LDR X0, [X0 + 0x528]
	0x03233264 BL 0x1C16D08
	0x03233268 BL 0x1C16F10
	0x0323326C MOV X19, X0
	0x03233270 ADRP X0, 0xECA000
	0x03233274 LDR X0, [X0 + 0xEC8]
	0x03233278 BL 0x1C16D08
	0x0323327C MOV X1, X0
	0x03233280 MOV X0, X19
	0x03233284 MOV X2, X31
	0x03233288 BL 0x330E100
	0x0323328C B 0x3233240
	0x03233290 STP X30, X23, [X31 - 0x30]!
	0x03233294 STP X22, X21, [X31 + 0x10]
	0x03233298 STP X20, X19, [X31 + 0x20]
	0x0323329C TBNZ X2, 0x1F, 0x3233354
	0x032332A0 MOV W21, W2
	0x032332A4 LDP W2, W8, [X0 + 0x20]
	0x032332A8 LDR W9, [X0 + 0x28]
	0x032332AC MOV X19, X0
	0x032332B0 ADD W22, W2, W21
	0x032332B4 ADD W8, W22, W8
	0x032332B8 CMP W8, W9
	0x032332BC B.GT 0x3233384
	0x032332C0 CMP W8, W21
	0x032332C4 B.LT 0x3233384
	0x032332C8 MOV X20, X1
	0x032332CC LDR X1, [X19 + 0x10]
	0x032332D0 CBZ X1, 0x3233350
	0x032332D4 LDR W8, [X1 + 0x18]
	0x032332D8 CMP W22, W8
	0x032332DC B.LE 0x323332C
	0x032332E0 SUB W23, W8, W2
	0x032332E4 CMP W23, 0x1
	0x032332E8 B.LT 0x3233308
	0x032332EC MOV X0, X20
	0x032332F0 MOV W3, W23
	0x032332F4 BL 0x3231F7C
	0x032332F8 LDR X8, [X19 + 0x10]
	0x032332FC CBZ X8, 0x3233350
	0x03233300 LDR X8, [X8 + 0x18]
	0x03233304 STR W8, [X19 + 0x20]
	0x03233308 SUB W22, W21, W23
	0x0323330C MOV X0, X19
	0x03233310 MOV W1, W22
	0x03233314 BL 0x3232FC8
	0x03233318 LDR X1, [X19 + 0x10]
	0x0323331C ADD X0, X20, W23, 0x1, SXTW
	0x03233320 MOV W2, W31
	0x03233324 MOV W3, W22
	0x03233328 B 0x3233334
	0x0323332C MOV X0, X20
	0x03233330 MOV W3, W21

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X20, 0x11AA000
	014 Move W8, [X20+970]
	015 Move X21, X1
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {41}
	021 Move X0, 0xECA000
	022 Move X0, [X0+2264]
	023 Call 0x1C17CF4
	024 Move X0, 0xEC1000
	025 Move X0, [X0+1448]
	026 Call 0x1C17CF4
	027 Move X0, 0xEC3000
	028 Move X0, [X0+632]
	029 Call 0x1C17CF4
	030 Move X0, 0xEF0000
	031 Move X0, [X0+1168]
	032 Call 0x1C17CF4
	033 Move X0, 0xEF0000
	034 Move X0, [X0+1176]
	035 Call 0x1C17CF4
	036 Move X0, 0xECE000
	037 Move X0, [X0+336]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X20+970], W8
	041 Move X0, X19
	042 Move X1, X31
	043 Call Object..ctor, X0
	044 Compare X21, 0
	045 JumpIfEqual {202}
	046 Move X0, X21
	047 Move X1, X31
	048 Call SerializationInfo.GetEnumerator, X0
	049 Compare X0, 0
	050 JumpIfEqual {182}
	051 Move X28, 0xEF0000
	052 Move X29, 0xEF0000
	053 Move X26, 0xECE000
	054 Move X28, [X28+1168]
	055 Move X29, [X29+1176]
	056 Move X26, [X26+336]
	057 Move X24, X0
	058 Move W27, W31
	059 Move X20, X31
	060 Move W23, W31
	061 Move TEMP, 0x80000000
	062 Not TEMP
	063 Move W22, TEMP
	064 Move X0, X24
	065 Move X1, X31
	066 Call SerializationInfoEnumerator.MoveNext, X0
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {114}
	071 Move X0, X24
	072 Move X1, X31
	073 Call SerializationInfoEnumerator.get_Name, X0
	074 Move X1, [X28]
	075 Move X2, X31
	076 Move X25, X0
	077 Call String.op_Equality, X0, X1
	078 Move TEMP, X0
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfEqual {104}
	082 Move X1, [X29]
	083 Move X0, X25
	084 Move X2, X31
	085 Call String.op_Equality, X0, X1
	086 Move TEMP, X0
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfEqual {109}
	090 Move X1, [X26]
	091 Move X0, X25
	092 Move X2, X31
	093 Call String.op_Equality, X0, X1
	094 Move TEMP, X0
	095 And TEMP, TEMP, 1
	096 Compare TEMP, 1
	097 JumpIfNotEqual {64}
	098 Move X1, [X26]
	099 Move X0, X21
	100 Move X2, X31
	101 Call SerializationInfo.GetInt32, X0, X1
	102 Move W23, W0
	103 Move W27, 1
	104 Move X1, [X28]
	105 Move X0, X21
	106 Move X2, X31
	107 Call SerializationInfo.GetInt32, X0, X1
	108 Move W22, W0
	109 Move X1, [X29]
	110 Move X0, X21
	111 Move X2, X31
	112 Call SerializationInfo.GetString, X0, X1
	113 Move X20, X0
	114 Compare X20, 0
	115 JumpIfNotEqual {121}
	116 Move X8, 0xEC3000
	117 Move X8, [X8+632]
	118 Move X8, [X8]
	119 Move X8, [X8+184]
	120 Move X20, [X8]
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Compare X20, 0
	123 JumpIfEqual {182}
	124 Move W21, [X20+16]
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Move TEMP, X27
	127 And TEMP, TEMP, 1
	128 Compare TEMP, 1
	129 JumpIfEqual {145}
	130 Move X8, 0xEC1000
	131 Move X8, [X8+1448]
	132 Move X0, [X8]
	133 Move W8, [X0+224]
	134 Compare W8, 0
	135 JumpIfNotEqual {137}
	136 Call 0x1C17DFC
	137 Move W0, 16
	138 Move W1, W21
	139 Move X2, X31
	140 Call Math.Max, X0, X1
	141 Move W1, W22
	142 Move X2, X31
	143 Call Math.Min, X0, X1
	144 Move W23, W0
	145 Move TEMP, X23
	146 And TEMP, TEMP, -2147483648
	147 Compare TEMP, -2147483648
	148 JumpIfEqual {190}
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Move W8, [X20+16]
	151 NotImplemented "Instruction CMP not yet implemented."
	152 Move [X19+40], W22
	153 Move X8, 0xECA000
	154 Move X8, [X8+2264]
	155 Move W1, W23
	156 Move X0, [X8]
	157 Call 0x1C17D6C
	158 Move [X19+16], X0
	159 Move W4, [X20+16]
	160 Move X2, X0
	161 Move X0, X20
	162 Move W1, W31
	163 Move W3, W31
	164 Move X5, X31
	165 Call String.CopyTo, X0, X1, X2, X3, X4
	166 Move W8, [X20+16]
	167 Move [X19+24], X31
	168 Move X22, [X31+64]
	169 Move X21, [X31+72]
	170 Move X24, [X31+48]
	171 Move X23, [X31+56]
	172 Move [X19+32], W8
	173 Move X20, [X31+80]
	174 Move X19, [X31+88]
	175 Move X26, [X31+32]
	176 Move X25, [X31+40]
	177 Move X28, [X31+16]
	178 Move X27, [X31+24]
	179 Move X29, [X31+96]
	180 Move X30, [X31+104]
	181 Return 
	182 Call 0x1C17F20
	183 Move X0, 0xEEB000
	184 Move X0, [X0+736]
	185 Call 0x1C17D08
	186 Call 0x1C17F10
	187 Move X19, X0
	188 Move X0, 0xEF0000
	189 Move X0, [X0+1184]
	190 Move X0, 0xEEB000
	191 Move X0, [X0+736]
	192 Call 0x1C17D08
	193 Call 0x1C17F10
	194 Move X19, X0
	195 Move X0, 0xEF0000
	196 Move X0, [X0+1192]
	197 Call 0x1C17D08
	198 Move X1, X0
	199 Move X0, X19
	200 Move X2, X31
	201 Call SerializationException..ctor, X0, X1
	202 Move X0, 0xEC6000
	203 Move X0, [X0+1320]
	204 Call 0x1C17D08
	205 Call 0x1C17F10
	206 Move X19, X0
	207 Move X0, 0xEEB000
	208 Move X0, [X0+728]
	209 Call 0x1C17D08
	210 Move X1, X0
	211 Move X0, X19
	212 Move X2, X31
	213 Call ArgumentNullException..ctor, X0, X1
	214 Move X0, 0xEF0000
	215 Move X0, [X0+1200]
	216 Call 0x1C17D08
	217 Move X1, X0
	218 Move X0, X19
	219 Call 0x1C17DEC

Method: System.Void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)

Disassembly:
	0x03233334 BL 0x3231F7C
	0x03233338 STR W22, [X19 + 0x20]
	0x0323333C MOV X0, X19
	0x03233340 LDP X20, X19, [X31 + 0x20]
	0x03233344 LDP X22, X21, [X31 + 0x10]
	0x03233348 LDP X30, X23, [X31], #0x30
	0x0323334C RET
	0x03233350 BL 0x1C16F20
	0x03233354 ADRP X0, 0xEC8000
	0x03233358 LDR X0, [X0 + 0x760]
	0x0323335C BL 0x1C16D08
	0x03233360 BL 0x1C16F10
	0x03233364 MOV X19, X0
	0x03233368 ADRP X0, 0xEEF000
	0x0323336C LDR X0, [X0 + 0x560]
	0x03233370 BL 0x1C16D08
	0x03233374 MOV X20, X0
	0x03233378 ADRP X0, 0xEEF000
	0x0323337C LDR X0, [X0 + 0x30]
	0x03233380 B 0x32333B0
	0x03233384 ADRP X0, 0xEC8000
	0x03233388 LDR X0, [X0 + 0x760]
	0x0323338C BL 0x1C16D08
	0x03233390 BL 0x1C16F10
	0x03233394 MOV X19, X0
	0x03233398 ADRP X0, 0xEEF000
	0x0323339C LDR X0, [X0 + 0x560]
	0x032333A0 BL 0x1C16D08
	0x032333A4 MOV X20, X0
	0x032333A8 ADRP X0, 0xEEF000
	0x032333AC LDR X0, [X0 + 0x520]
	0x032333B0 BL 0x1C16D08
	0x032333B4 MOV X2, X0
	0x032333B8 MOV X0, X19
	0x032333BC MOV X1, X20
	0x032333C0 MOV X3, X31
	0x032333C4 BL 0x3311888
	0x032333C8 ADRP X0, 0xEEF000
	0x032333CC LDR X0, [X0 + 0x568]
	0x032333D0 BL 0x1C16D08
	0x032333D4 MOV X1, X0
	0x032333D8 MOV X0, X19
	0x032333DC BL 0x1C16DEC
	0x032333E0 STR X30, [X31 - 0x40]!
	0x032333E4 STP X24, X23, [X31 + 0x10]
	0x032333E8 STP X22, X21, [X31 + 0x20]
	0x032333EC STP X20, X19, [X31 + 0x30]
	0x032333F0 MOV X19, X0
	0x032333F4 CBZ X1, 0x32334C4
	0x032333F8 LDR X23, [X19 + 0x10]
	0x032333FC CBZ X23, 0x32334DC
	0x03233400 LDRSW X24, [X19 + 0x20]
	0x03233404 LDR W21, [X1 + 0x10]
	0x03233408 LDR W8, [X23 + 0x18]
	0x0323340C MOV X20, X1
	0x03233410 ADD W22, W21, W24
	0x03233414 CMP W22, W8
	0x03233418 B.GE 0x3233454
	0x0323341C CMP W21, 0x2
	0x03233420 B.LE 0x3233464
	0x03233424 MOV X0, X31
	0x03233428 BL 0x32C1424
	0x0323342C LDR W8, [X23 + 0x18]
	0x03233430 CMP W24, W8
	0x03233434 B.CS 0x32334E0
	0x03233438 ADD X8, X23, X24, 0x1, LSL
	0x0323343C ADD X1, X20, W0, SXTW
	0x03233440 ADD X0, X8, 0x20
	0x03233444 MOV W2, W21
	0x03233448 MOV X3, X31
	0x0323344C BL 0x3227300
	0x03233450 B 0x32334C0
	0x03233454 MOV X0, X19
	0x03233458 MOV X1, X20
	0x0323345C BL 0x32334E4
	0x03233460 B 0x32334C4
	0x03233464 CMP W21, 0x1
	0x03233468 B.LT 0x32334C0
	0x0323346C MOV X0, X20
	0x03233470 MOV W1, W31
	0x03233474 MOV X2, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11AA000
	007 Move W8, [X21+971]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0xEF0000
	015 Move X0, [X0+1208]
	016 Call 0x1C17CF4
	017 Move X0, 0xEF0000
	018 Move X0, [X0+1168]
	019 Call 0x1C17CF4
	020 Move X0, 0xEF0000
	021 Move X0, [X0+1176]
	022 Call 0x1C17CF4
	023 Move X0, 0xECE000
	024 Move X0, [X0+336]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+971], W8
	028 Compare X19, 0
	029 JumpIfEqual {74}
	030 Move X8, 0xEF0000
	031 Move X8, [X8+1168]
	032 Move W2, [X20+40]
	033 Move X0, X19
	034 Move X3, X31
	035 Move X1, [X8]
	036 Call SerializationInfo.AddValue, X0, X1, X2
	037 Move X8, [X20+16]
	038 Compare X8, 0
	039 JumpIfEqual {92}
	040 Move X9, 0xECE000
	041 Move X9, [X9+336]
	042 Move W10, [X20+36]
	043 Move W8, [X8+24]
	044 Move X21, 0xEF0000
	045 Move X1, [X9]
	046 Move X22, 0xEF0000
	047 Move X21, [X21+1176]
	048 Move X22, [X22+1208]
	049 Add W2, W10, W8
	050 Move X0, X19
	051 Move X3, X31
	052 Call SerializationInfo.AddValue, X0, X1, X2
	053 Move X8, [X20]
	054 Move X0, X20
	055 Move X9, [X8+360]
	056 Move X1, [X8+368]
	057 NotImplemented "Instruction BLR not yet implemented."
	058 Move X1, [X21]
	059 Move X2, X0
	060 Move X0, X19
	061 Move X3, X31
	062 Call SerializationInfo.AddValue, X0, X1, X2
	063 Move X1, [X22]
	064 Move X0, X19
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X22, [X31+16]
	068 Move X21, [X31+24]
	069 Move W2, W31
	070 Move X3, X31
	071 Move X30, [X31+48]
	072 Call SerializationInfo.AddValue, X0, X1, X2
	073 Return 
	074 Move X0, 0xEC6000
	075 Move X0, [X0+1320]
	076 Call 0x1C17D08
	077 Call 0x1C17F10
	078 Move X19, X0
	079 Move X0, 0xEEB000
	080 Move X0, [X0+728]
	081 Call 0x1C17D08
	082 Move X1, X0
	083 Move X0, X19
	084 Move X2, X31
	085 Call ArgumentNullException..ctor, X0, X1
	086 Move X0, 0xEF0000
	087 Move X0, [X0+1216]
	088 Call 0x1C17D08
	089 Move X1, X0
	090 Move X0, X19
	091 Call 0x1C17DEC
	092 Call 0x1C17F20

Method: System.Int32 get_Capacity()

Disassembly:
	0x03233478 BL 0x3222A1C
	0x0323347C LDR W8, [X23 + 0x18]
	0x03233480 CMP W24, W8
	0x03233484 B.CS 0x32334E0
	0x03233488 ADD X8, X23, X24, 0x1, LSL
	0x0323348C CMP W21, 0x2
	0x03233490 STRH W0, [X8 + 0x20]
	0x03233494 B.LT 0x32334C0
	0x03233498 MOVZ W1, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move W9, [X0+36]
	006 Move W8, [X8+24]
	007 Add W0, W9, W8
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: System.Void set_Capacity(System.Int32 value)

Disassembly:
	0x0323349C MOV X0, X20
	0x032334A0 MOV X2, X31
	0x032334A4 BL 0x3222A1C
	0x032334A8 LDR W9, [X23 + 0x18]
	0x032334AC ADD W8, W24, 0x1
	0x032334B0 CMP W8, W9
	0x032334B4 B.CS 0x32334E0
	0x032334B8 ADD X8, X23, W8, 0x1, SXTW
	0x032334BC STRH W0, [X8 + 0x20]
	0x032334C0 STR W22, [X19 + 0x20]
	0x032334C4 MOV X0, X19
	0x032334C8 LDP X20, X19, [X31 + 0x30]
	0x032334CC LDP X22, X21, [X31 + 0x20]
	0x032334D0 LDP X24, X23, [X31 + 0x10]
	0x032334D4 LDR X30, [X31], #0x40
	0x032334D8 RET
	0x032334DC BL 0x1C16F20
	0x032334E0 BL 0x1C16F28
	0x032334E4 STR X30, [X31 - 0x20]!
	0x032334E8 STP X20, X19, [X31 + 0x10]
	0x032334EC CBZ X1, 0x3233518
	0x032334F0 MOV X20, X0
	0x032334F4 MOV X0, X31
	0x032334F8 MOV X19, X1
	0x032334FC BL 0x32C1424
	0x03233500 LDR W2, [X19 + 0x10]
	0x03233504 ADD X1, X19, W0, SXTW
	0x03233508 MOV X0, X20
	0x0323350C LDP X20, X19, [X31 + 0x10]
	0x03233510 LDR X30, [X31], #0x20
	0x03233514 B 0x3233290
	0x03233518 BL 0x1C16F20
	0x0323351C STR X30, [X31 - 0x30]!
	0x03233520 STP X22, X21, [X31 + 0x10]
	0x03233524 STP X20, X19, [X31 + 0x20]
	0x03233528 TBNZ X2, 0x1F, 0x3233594
	0x0323352C MOV W20, W3
	0x03233530 TBNZ X3, 0x1F, 0x32335C4
	0x03233534 MOV W21, W2
	0x03233538 MOV X22, X1
	0x0323353C MOV X19, X0
	0x03233540 CBZ X1, 0x3233578
	0x03233544 CBZ W20, 0x3233580
	0x03233548 LDR W8, [X22 + 0x10]
	0x0323354C SUB W8, W8, W20
	0x03233550 CMP W8, W21
	0x03233554 B.LT 0x3233594
	0x03233558 MOV X0, X31
	0x0323355C BL 0x32C1424
	0x03233560 ADD X8, X22, W21, 0x1, UXTW
	0x03233564 ADD X1, X8, W0, SXTW
	0x03233568 MOV X0, X19
	0x0323356C MOV W2, W20
	0x03233570 BL 0x3233290
	0x03233574 B 0x3233580
	0x03233578 ORR W8, W21, W20, 0x0
	0x0323357C CBNZ W8, 0x3233620
	0x03233580 MOV X0, X19
	0x03233584 LDP X20, X19, [X31 + 0x20]
	0x03233588 LDP X22, X21, [X31 + 0x10]
	0x0323358C LDR X30, [X31], #0x30
	0x03233590 RET
	0x03233594 ADRP X0, 0xEC8000
	0x03233598 LDR X0, [X0 + 0x760]
	0x0323359C BL 0x1C16D08
	0x032335A0 BL 0x1C16F10
	0x032335A4 MOV X19, X0
	0x032335A8 ADRP X0, 0xEE8000
	0x032335AC LDR X0, [X0 + 0x658]
	0x032335B0 BL 0x1C16D08
	0x032335B4 MOV X20, X0
	0x032335B8 ADRP X0, 0xEE8000
	0x032335BC LDR X0, [X0 + 0x660]
	0x032335C0 B 0x32335F0
	0x032335C4 ADRP X0, 0xEC8000
	0x032335C8 LDR X0, [X0 + 0x760]
	0x032335CC BL 0x1C16D08
	0x032335D0 BL 0x1C16F10
	0x032335D4 MOV X19, X0
	0x032335D8 ADRP X0, 0xEE8000
	0x032335DC LDR X0, [X0 + 0x648]
	0x032335E0 BL 0x1C16D08
	0x032335E4 MOV X20, X0
	0x032335E8 ADRP X0, 0xEEF000
	0x032335EC LDR X0, [X0 + 0x550]
	0x032335F0 BL 0x1C16D08
	0x032335F4 MOV X2, X0
	0x032335F8 MOV X0, X19
	0x032335FC MOV X1, X20
	0x03233600 MOV X3, X31
	0x03233604 BL 0x3311888
	0x03233608 ADRP X0, 0xEEF000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11AA000
	006 Move W8, [X21+972]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xECA000
	014 Move X0, [X0+2264]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+972], W8
	018 Move TEMP, X20
	019 And TEMP, TEMP, -2147483648
	020 Compare TEMP, -2147483648
	021 JumpIfEqual {54}
	022 Move W8, [X19+40]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move W9, [X19+32]
	025 Move W8, [X19+36]
	026 Add W9, W9, W8
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X9, [X19+16]
	029 Compare X9, 0
	030 JumpIfEqual {99}
	031 Move W9, [X9+24]
	032 Add W9, W8, W9
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X9, 0xECA000
	035 Move X9, [X9+2264]
	036 Subtract W1, W20, W8
	037 Move X0, [X9]
	038 Call 0x1C17D6C
	039 Move X8, [X19+16]
	040 Move W4, [X19+32]
	041 Move X20, X0
	042 Move W1, W31
	043 Move X0, X8
	044 Move X2, X20
	045 Move W3, W31
	046 Move X5, X31
	047 Call Array.Copy, X0, X1, X2, X3, X4
	048 Move [X19+16], X20
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Return 
	054 Move X0, 0xEC9000
	055 Move X0, [X0+1888]
	056 Call 0x1C17D08
	057 Call 0x1C17F10
	058 Move X19, X0
	059 Move X0, 0xECB000
	060 Move X0, [X0+3784]
	061 Call 0x1C17D08
	062 Move X20, X0
	063 Move X0, 0xEF0000
	064 Move X0, [X0+1224]
	065 Move X0, 0xEC9000
	066 Move X0, [X0+1888]
	067 Call 0x1C17D08
	068 Call 0x1C17F10
	069 Move X19, X0
	070 Move X0, 0xECB000
	071 Move X0, [X0+3784]
	072 Call 0x1C17D08
	073 Move X20, X0
	074 Move X0, 0xEF0000
	075 Move X0, [X0+1104]
	076 Move X0, 0xEC9000
	077 Move X0, [X0+1888]
	078 Call 0x1C17D08
	079 Call 0x1C17F10
	080 Move X19, X0
	081 Move X0, 0xECB000
	082 Move X0, [X0+3784]
	083 Call 0x1C17D08
	084 Move X20, X0
	085 Move X0, 0xEEB000
	086 Move X0, [X0+672]
	087 Call 0x1C17D08
	088 Move X2, X0
	089 Move X0, X19
	090 Move X1, X20
	091 Move X3, X31
	092 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	093 Move X0, 0xEF0000
	094 Move X0, [X0+1232]
	095 Call 0x1C17D08
	096 Move X1, X0
	097 Move X0, X19
	098 Call 0x1C17DEC
	099 Call 0x1C17F20

Method: System.Int32 get_MaxCapacity()

Disassembly:
	0x03233618 MOV X0, X19
	0x0323361C BL 0x1C16DEC

ISIL:
	001 Move W0, [X0+40]
	002 Return X0

Method: System.String ToString()

Disassembly:
	0x03233620 ADRP X0, 0xEC5000
	0x03233624 LDR X0, [X0 + 0x528]
	0x03233628 BL 0x1C16D08
	0x0323362C BL 0x1C16F10
	0x03233630 MOV X19, X0
	0x03233634 ADRP X0, 0xECA000
	0x03233638 LDR X0, [X0 + 0xEC8]
	0x0323363C BL 0x1C16D08
	0x03233640 MOV X1, X0
	0x03233644 MOV X0, X19
	0x03233648 MOV X2, X31
	0x0323364C BL 0x330E100
	0x03233650 B 0x3233608
	0x03233654 CBZ X1, 0x323366C
	0x03233658 LDP W9, W8, [X1 + 0x20]
	0x0323365C ADDS W3, W9, W8
	0x03233660 B.EQ 0x323366C
	0x03233664 MOV W2, W31
	0x03233668 B 0x3233670
	0x0323366C RET
	0x03233670 STR X30, [X31 - 0x50]!
	0x03233674 STP X26, X25, [X31 + 0x10]
	0x03233678 STP X24, X23, [X31 + 0x20]
	0x0323367C STP X22, X21, [X31 + 0x30]
	0x03233680 STP X20, X19, [X31 + 0x40]
	0x03233684 ADRP X23, 0x11A9000
	0x03233688 LDRB W8, [X23 + 0x3D0]
	0x0323368C MOV W21, W3
	0x03233690 MOV W22, W2
	0x03233694 MOV X20, X1
	0x03233698 MOV X19, X0
	0x0323369C TBNZ X8, 0x0, 0x32336C0
	0x032336A0 ADRP X0, 0xEC0000
	0x032336A4 LDR X0, [X0 + 0x5A8]
	0x032336A8 BL 0x1C16CF4
	0x032336AC ADRP X0, 0xEEF000
	0x032336B0 LDR X0, [X0 + 0x578]
	0x032336B4 BL 0x1C16CF4
	0x032336B8 MOVZ W8, 0x1
	0x032336BC STRB W8, [X23 + 0x3D0]
	0x032336C0 CMP X20, X19
	0x032336C4 B.EQ 0x32337EC
	0x032336C8 LDP W25, W8, [X19 + 0x20]
	0x032336CC LDR W9, [X19 + 0x28]
	0x032336D0 ADD W8, W8, W21
	0x032336D4 ADD W8, W8, W25
	0x032336D8 CMP W8, W9
	0x032336DC B.HI 0x323382C
	0x032336E0 CMP W21, 0x1
	0x032336E4 B.LT 0x323380C
	0x032336E8 ADRP X24, 0xEC0000
	0x032336EC LDR X24, [X24 + 0x5A8]
	0x032336F0 LDR X23, [X19 + 0x10]
	0x032336F4 CBZ X23, 0x3233828
	0x032336F8 LDR X0, [X24]
	0x032336FC LDR W8, [X0 + 0xE0]
	0x03233700 CBNZ W8, 0x3233708
	0x03233704 BL 0x1C16DFC
	0x03233708 LDR W8, [X23 + 0x18]
	0x0323370C MOV W1, W21
	0x03233710 MOV X2, X31
	0x03233714 SUB W0, W8, W25
	0x03233718 BL 0x337EE94
	0x0323371C MOV W23, W0
	0x03233720 CBNZ W0, 0x3233764
	0x03233724 MOV X0, X19
	0x03233728 MOV W1, W21
	0x0323372C BL 0x3232FC8
	0x03233730 LDR X23, [X19 + 0x10]
	0x03233734 CBZ X23, 0x3233828
	0x03233738 LDR X0, [X24]
	0x0323373C LDR W25, [X19 + 0x20]
	0x03233740 LDR W8, [X0 + 0xE0]
	0x03233744 CBNZ W8, 0x323374C
	0x03233748 BL 0x1C16DFC
	0x0323374C LDR W8, [X23 + 0x18]
	0x03233750 MOV W1, W21
	0x03233754 MOV X2, X31
	0x03233758 SUB W0, W8, W25

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11AA000
	006 Move W8, [X20+973]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xEC3000
	013 Move X0, [X0+632]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+973], W8
	017 Move W9, [X19+32]
	018 Move W8, [X19+36]
	019 Add W0, W9, W8
	020 Move X1, X31
	021 Call String.FastAllocateString, X0
	022 Move X20, X0
	023 Compare X0, 0
	024 JumpIfEqual {33}
	025 Move X0, X31
	026 Call RuntimeHelpers.get_OffsetToStringData
	027 Add X21, X20, W0
	028 Move X8, 0xEC3000
	029 Move X8, [X8+632]
	030 Move X8, [X8]
	031 Move X8, [X8+184]
	032 Move X20, [X8]
	033 Move X21, X20
	034 Move W2, [X19+32]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Compare X20, 0
	037 JumpIfEqual {62}
	038 NotImplemented "Instruction LDRSW not yet implemented."
	039 Move W9, [X20+16]
	040 Add W10, W8, W2
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X9, [X19+16]
	043 Compare X9, 0
	044 JumpIfEqual {62}
	045 Move W10, [X9+24]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Compare W10, 0
	048 JumpIfEqual {86}
	049 Add X1, X9, 32
	050 Add X0, X21, X8
	051 Move X3, X31
	052 Call String.wstrcpy, X0, X1, X2
	053 Move X19, [X19+24]
	054 Compare X19, 0
	055 JumpIfNotEqual {34}
	056 Move X0, X20
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X30, [X31+32]
	060 Move X21, [X31+40]
	061 Return X0
	062 Call 0x1C17F20
	063 Move X0, 0xEC9000
	064 Move X0, [X0+1888]
	065 Call 0x1C17D08
	066 Call 0x1C17F10
	067 Move X19, X0
	068 Move X0, 0xEF0000
	069 Move X0, [X0+1240]
	070 Call 0x1C17D08
	071 Move X20, X0
	072 Move X0, 0xEE9000
	073 Move X0, [X0+1632]
	074 Call 0x1C17D08
	075 Move X2, X0
	076 Move X0, X19
	077 Move X1, X20
	078 Move X3, X31
	079 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	080 Move X0, 0xEF0000
	081 Move X0, [X0+1248]
	082 Call 0x1C17D08
	083 Move X1, X0
	084 Move X0, X19
	085 Call 0x1C17DEC
	086 Call 0x1C17F28

Method: System.String ToString(System.Int32 startIndex, System.Int32 length)

Disassembly:
	0x0323375C BL 0x337EE94
	0x03233760 MOV W23, W0
	0x03233764 LDR X26, [X19 + 0x10]
	0x03233768 LDRSW X25, [X19 + 0x20]
	0x0323376C CBZ X26, 0x32337A0
	0x03233770 LDR W8, [X26 + 0x18]
	0x03233774 SUBS W8, W8, W25
	0x03233778 B.CC 0x3233784
	0x0323377C CMP W8, W23
	0x03233780 B.CS 0x323378C
	0x03233784 MOV X0, X31
	0x03233788 BL 0x339D6EC
	0x0323378C ADD X8, X26, X25, 0x1, LSL
	0x03233790 ADD X2, X8, 0x20
	0x03233794 MOV W3, W23
	0x03233798 CBNZ X20, 0x32337BC
	0x0323379C B 0x3233828
	0x032337A0 ORR W8, W25, W23, 0x0
	0x032337A4 CBZ W8, 0x32337B0
	0x032337A8 MOV X0, X31
	0x032337AC BL 0x339D6EC
	0x032337B0 MOV X2, X31
	0x032337B4 MOV X3, X31
	0x032337B8 CBZ X20, 0x3233828
	0x032337BC MOV X0, X20
	0x032337C0 MOV W1, W22
	0x032337C4 MOV W4, W23
	0x032337C8 BL 0x32328F4
	0x032337CC LDR W8, [X19 + 0x20]
	0x032337D0 SUB W21, W21, W23
	0x032337D4 CMP W21, 0x0
	0x032337D8 ADD W22, W23, W22
	0x032337DC ADD W25, W8, W23
	0x032337E0 STR W25, [X19 + 0x20]
	0x032337E4 B.GT 0x32336F0
	0x032337E8 B 0x323380C
	0x032337EC CBZ X20, 0x3233828
	0x032337F0 MOV X0, X20
	0x032337F4 MOV W1, W22
	0x032337F8 MOV W2, W21
	0x032337FC BL 0x323275C
	0x03233800 MOV X1, X0
	0x03233804 MOV X0, X20
	0x03233808 BL 0x32333E0
	0x0323380C MOV X0, X19
	0x03233810 LDP X20, X19, [X31 + 0x40]
	0x03233814 LDP X22, X21, [X31 + 0x30]
	0x03233818 LDP X24, X23, [X31 + 0x20]
	0x0323381C LDP X26, X25, [X31 + 0x10]
	0x03233820 LDR X30, [X31], #0x50
	0x03233824 RET
	0x03233828 BL 0x1C16F20
	0x0323382C ADRP X0, 0xEC8000
	0x03233830 LDR X0, [X0 + 0x760]
	0x03233834 BL 0x1C16D08
	0x03233838 BL 0x1C16F10
	0x0323383C MOV X19, X0
	0x03233840 ADRP X0, 0xECD000
	0x03233844 LDR X0, [X0 + 0x150]
	0x03233848 BL 0x1C16D08
	0x0323384C MOV X20, X0
	0x03233850 ADRP X0, 0xEEF000
	0x03233854 LDR X0, [X0 + 0x450]
	0x03233858 BL 0x1C16D08
	0x0323385C MOV X2, X0
	0x03233860 MOV X0, X19
	0x03233864 MOV X1, X20
	0x03233868 MOV X3, X31
	0x0323386C BL 0x3311888
	0x03233870 ADRP X0, 0xEEF000
	0x03233874 LDR X0, [X0 + 0x580]
	0x03233878 BL 0x1C16D08
	0x0323387C MOV X1, X0
	0x03233880 MOV X0, X19
	0x03233884 BL 0x1C16DEC
	0x03233888 STP X30, X19, [X31 - 0x10]!
	0x0323388C MOV X19, X0
	0x03233890 MOV X0, X31
	0x03233894 BL 0x33C1548
	0x03233898 MOV X1, X0
	0x0323389C MOV X0, X19
	0x032338A0 LDP X30, X19, [X31], #0x10
	0x032338A4 B 0x32333E0
	0x032338A8 STP X30, X19, [X31 - 0x10]!
	0x032338AC MOV X19, X0
	0x032338B0 BL 0x32333E0
	0x032338B4 MOV X0, X31
	0x032338B8 BL 0x33C1548
	0x032338BC MOV X1, X0
	0x032338C0 MOV X0, X19
	0x032338C4 LDP X30, X19, [X31], #0x10
	0x032338C8 B 0x32333E0
	0x032338CC STP X30, X25, [X31 - 0x40]!
	0x032338D0 STP X24, X23, [X31 + 0x10]
	0x032338D4 STP X22, X21, [X31 + 0x20]
	0x032338D8 STP X20, X19, [X31 + 0x30]
	0x032338DC ADRP X25, 0x11A9000
	0x032338E0 LDRB W8, [X25 + 0x3DD]
	0x032338E4 MOV W19, W5
	0x032338E8 MOV W20, W4
	0x032338EC MOV X21, X3
	0x032338F0 MOV X22, X2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11AA000
	007 Move W8, [X22+974]
	008 Move W19, W2
	009 Move W20, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xEF0000
	016 Move X0, [X0+1256]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+974], W8
	020 Move TEMP, X20
	021 And TEMP, TEMP, -2147483648
	022 Compare TEMP, -2147483648
	023 JumpIfEqual {56}
	024 Move W9, [X21+32]
	025 Move W8, [X21+36]
	026 Add W8, W9, W8
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move TEMP, X19
	029 And TEMP, TEMP, -2147483648
	030 Compare TEMP, -2147483648
	031 JumpIfEqual {78}
	032 Subtract W8, W8, W19
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move W0, W19
	035 Move X1, X31
	036 Call String.FastAllocateString, X0
	037 Move X22, X0
	038 Compare X0, 0
	039 JumpIfEqual {43}
	040 Move X0, X31
	041 Call RuntimeHelpers.get_OffsetToStringData
	042 Add X2, X22, W0
	043 Move X2, X22
	044 Move W3, W19
	045 Move X0, X21
	046 Move W1, W20
	047 Move W4, W19
	048 Call StringBuilder.CopyTo, X0, X1, X2, X3
	049 Move X0, X22
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X30, [X31+48]
	055 Return X0
	056 Move X0, 0xEC9000
	057 Move X0, [X0+1888]
	058 Call 0x1C17D08
	059 Call 0x1C17F10
	060 Move X19, X0
	061 Move X0, 0xEE9000
	062 Move X0, [X0+1624]
	063 Call 0x1C17D08
	064 Move X20, X0
	065 Move X0, 0xEF0000
	066 Move X0, [X0+216]
	067 Move X0, 0xEC9000
	068 Move X0, [X0+1888]
	069 Call 0x1C17D08
	070 Call 0x1C17F10
	071 Move X19, X0
	072 Move X0, 0xEE9000
	073 Move X0, [X0+1624]
	074 Call 0x1C17D08
	075 Move X20, X0
	076 Move X0, 0xEF0000
	077 Move X0, [X0+296]
	078 Move X0, 0xEC9000
	079 Move X0, [X0+1888]
	080 Call 0x1C17D08
	081 Call 0x1C17F10
	082 Move X19, X0
	083 Move X0, 0xEC9000
	084 Move X0, [X0+1896]
	085 Call 0x1C17D08
	086 Move X20, X0
	087 Move X0, 0xEF0000
	088 Move X0, [X0]
	089 Move X0, 0xEC9000
	090 Move X0, [X0+1888]
	091 Call 0x1C17D08
	092 Call 0x1C17F10
	093 Move X19, X0
	094 Move X0, 0xEC9000
	095 Move X0, [X0+1896]
	096 Call 0x1C17D08
	097 Move X20, X0
	098 Move X0, 0xEF0000
	099 Move X0, [X0+304]
	100 Call 0x1C17D08
	101 Move X2, X0
	102 Move X0, X19
	103 Move X1, X20
	104 Move X3, X31
	105 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	106 Move X0, 0xEF0000
	107 Move X0, [X0+1264]
	108 Call 0x1C17D08
	109 Move X1, X0
	110 Move X0, X19
	111 Call 0x1C17DEC

Method: System.Text.StringBuilder Clear()

Disassembly:
	0x03233AC0 ADRP X0, 0xEC8000
	0x03233AC4 LDR X0, [X0 + 0x768]
	0x03233AC8 BL 0x1C16D08
	0x03233ACC MOV X20, X0
	0x03233AD0 ADRP X0, 0xEEF000
	0x03233AD4 LDR X0, [X0]
	0x03233AD8 B 0x3233B38

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, W31
	004 Move X19, X0
	005 Call StringBuilder.set_Length, X0, X1
	006 Move X0, X19
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0

Method: System.Int32 get_Length()

Disassembly:
	0x0323360C LDR X0, [X0 + 0x570]
	0x03233610 BL 0x1C16D08
	0x03233614 MOV X1, X0

ISIL:
	001 Move W9, [X0+32]
	002 Move W8, [X0+36]
	003 Add W0, W9, W8
	004 Return X0

Method: System.Void set_Length(System.Int32 value)

Disassembly:
	0x03233ADC ADRP X0, 0xEC8000
	0x03233AE0 LDR X0, [X0 + 0x760]
	0x03233AE4 BL 0x1C16D08
	0x03233AE8 BL 0x1C16F10
	0x03233AEC MOV X19, X0
	0x03233AF0 ADRP X0, 0xEE8000
	0x03233AF4 LDR X0, [X0 + 0x658]
	0x03233AF8 BL 0x1C16D08
	0x03233AFC MOV X20, X0
	0x03233B00 ADRP X0, 0xEEF000
	0x03233B04 LDR X0, [X0 + 0xD8]
	0x03233B08 B 0x3233B38
	0x03233B0C ADRP X0, 0xEC8000
	0x03233B10 LDR X0, [X0 + 0x760]
	0x03233B14 BL 0x1C16D08
	0x03233B18 BL 0x1C16F10
	0x03233B1C MOV X19, X0
	0x03233B20 ADRP X0, 0xEC8000
	0x03233B24 LDR X0, [X0 + 0x768]
	0x03233B28 BL 0x1C16D08
	0x03233B2C MOV X20, X0
	0x03233B30 ADRP X0, 0xEE8000
	0x03233B34 LDR X0, [X0 + 0x660]
	0x03233B38 BL 0x1C16D08
	0x03233B3C MOV X2, X0
	0x03233B40 MOV X0, X19
	0x03233B44 MOV X1, X20
	0x03233B48 MOV X3, X31
	0x03233B4C BL 0x3311888
	0x03233B50 ADRP X0, 0xEEF000
	0x03233B54 LDR X0, [X0 + 0x598]
	0x03233B58 BL 0x1C16D08
	0x03233B5C MOV X1, X0
	0x03233B60 MOV X0, X19
	0x03233B64 BL 0x1C16DEC
	0x03233B68 STP X30, X25, [X31 - 0x40]!
	0x03233B6C STP X24, X23, [X31 + 0x10]
	0x03233B70 STP X22, X21, [X31 + 0x20]
	0x03233B74 STP X20, X19, [X31 + 0x30]
	0x03233B78 ADRP X19, 0x11A9000
	0x03233B7C LDRB W8, [X19 + 0x3E2]
	0x03233B80 MOV X21, X4
	0x03233B84 MOV X20, X3
	0x03233B88 MOV W23, W2
	0x03233B8C MOV W24, W1
	0x03233B90 MOV X22, X0
	0x03233B94 TBNZ X8, 0x0, 0x3233BAC
	0x03233B98 ADRP X0, 0xEEF000
	0x03233B9C LDR X0, [X0 + 0x2D0]
	0x03233BA0 BL 0x1C16CF4
	0x03233BA4 MOVZ W8, 0x1
	0x03233BA8 STRB W8, [X19 + 0x3E2]
	0x03233BAC STR X22, [X20]
	0x03233BB0 CBZ X22, 0x3233BF8
	0x03233BB4 MOV X8, X31
	0x03233BB8 MOV W19, W31
	0x03233BBC ADD W9, W23, W24
	0x03233BC0 LDR W10, [X22 + 0x24]
	0x03233BC4 SUBS W11, W9, W10
	0x03233BC8 B.MI 0x3233BE4
	0x03233BCC CMP X8, 0x0
	0x03233BD0 CSEL W19, W11, W19, EQ
	0x03233BD4 CSEL X8, X22, X8, EQ
	0x03233BD8 SUBS W25, W24, W10
	0x03233BDC B.MI 0x3233BEC
	0x03233BE0 B 0x3233BFC
	0x03233BE4 SUB W10, W10, W23
	0x03233BE8 STR W10, [X22 + 0x24]
	0x03233BEC LDR X22, [X22 + 0x18]
	0x03233BF0 STR X22, [X20]
	0x03233BF4 CBNZ X22, 0x3233BC0
	0x03233BF8 BL 0x1C16F20
	0x03233BFC STR W25, [X21]
	0x03233C00 LDR W9, [X8 + 0x20]
	0x03233C04 CMP X8, X22
	0x03233C08 B.EQ 0x3233C48
	0x03233C0C STR W25, [X22 + 0x20]
	0x03233C10 STR X22, [X8 + 0x18]
	0x03233C14 LDR X10, [X20]
	0x03233C18 CBZ X10, 0x3233BF8
	0x03233C1C LDP W12, W11, [X10 + 0x20]
	0x03233C20 ADD W11, W12, W11
	0x03233C24 STR W11, [X8 + 0x24]
	0x03233C28 LDR W11, [X21]
	0x03233C2C CBZ W11, 0x3233C38
	0x03233C30 MOV W25, W31
	0x03233C34 B 0x3233C48
	0x03233C38 LDR X10, [X10 + 0x18]
	0x03233C3C MOV W25, W31
	0x03233C40 STR X10, [X8 + 0x18]
	0x03233C44 STR X8, [X20]
	0x03233C48 LDR W10, [X8 + 0x20]
	0x03233C4C SUBS W11, W25, W19
	0x03233C50 ADD W10, W11, W10
	0x03233C54 STR W10, [X8 + 0x20]
	0x03233C58 B.NE 0x3233C70
	0x03233C5C LDP X20, X19, [X31 + 0x30]
	0x03233C60 LDP X22, X21, [X31 + 0x20]
	0x03233C64 LDP X24, X23, [X31 + 0x10]
	0x03233C68 LDP X30, X25, [X31], #0x40
	0x03233C6C RET
	0x03233C70 LDR X20, [X8 + 0x10]
	0x03233C74 ADRP X8, 0xEEF000
	0x03233C78 LDR X8, [X8 + 0x2D0]
	0x03233C7C SUB W21, W9, W19
	0x03233C80 MOV X0, X20
	0x03233C84 LDR X1, [X8]
	0x03233C88 BL 0x25FBC40
	0x03233C8C MOV X2, X0
	0x03233C90 MOV X3, X1
	0x03233C94 MOV X0, X20
	0x03233C98 MOV W1, W19
	0x03233C9C MOV W5, W21
	0x03233CA0 LDP X20, X19, [X31 + 0x30]
	0x03233CA4 LDP X22, X21, [X31 + 0x20]
	0x03233CA8 LDP X24, X23, [X31 + 0x10]
	0x03233CAC MOV W4, W25
	0x03233CB0 LDP X30, X25, [X31], #0x40
	0x03233CB4 B 0x32338CC
	0x03233CB8 SUB X31, X31, 0x30
	0x03233CBC STP X30, X21, [X31 + 0x10]
	0x03233CC0 STP X20, X19, [X31 + 0x20]
	0x03233CC4 AND W9, W1, 0x1
	0x03233CC8 ADRP X20, 0x11A9000
	0x03233CCC STRB W9, [X31 + 0xC]
	0x03233CD0 ADRP X21, 0xEC0000
	0x03233CD4 LDRB W8, [X20 + 0x3D2]
	0x03233CD8 LDR X21, [X21 + 0xB58]
	0x03233CDC MOV X19, X0
	0x03233CE0 TBNZ X8, 0x0, 0x3233CF8
	0x03233CE4 ADRP X0, 0xEC0000
	0x03233CE8 LDR X0, [X0 + 0xB58]
	0x03233CEC BL 0x1C16CF4
	0x03233CF0 MOVZ W8, 0x1
	0x03233CF4 STRB W8, [X20 + 0x3D2]
	0x03233CF8 LDR X0, [X21]
	0x03233CFC LDR W8, [X0 + 0xE0]
	0x03233D00 CBNZ W8, 0x3233D08
	0x03233D04 BL 0x1C16DFC
	0x03233D08 ADD X0, X31, 0xC
	0x03233D0C MOV X1, X31
	0x03233D10 BL 0x33176C4
	0x03233D14 MOV X1, X0
	0x03233D18 MOV X0, X19
	0x03233D1C BL 0x32333E0
	0x03233D20 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x11AA000
	009 Move W8, [X21+975]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xECA000
	017 Move X0, [X0+2264]
	018 Call 0x1C17CF4
	019 Move X0, 0xEC1000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+975], W8
	024 Move TEMP, X20
	025 And TEMP, TEMP, -2147483648
	026 Compare TEMP, -2147483648
	027 JumpIfEqual {130}
	028 Move W8, [X19+40]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Compare W20, 0
	031 JumpIfNotEqual {35}
	032 Move X8, [X19+24]
	033 Compare X8, 0
	034 JumpIfEqual {111}
	035 Move W9, [X19+32]
	036 Move W8, [X19+36]
	037 Add W23, W9, W8
	038 Subtract W2, W20, W23
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X0, X19
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X24, [X31+16]
	046 Move X23, [X31+24]
	047 Move W1, W31
	048 Move X30, [X31+64]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X22, X19
	051 Move X22, X19
	052 Move X22, [X22+24]
	053 Compare X22, 0
	054 JumpIfEqual {114}
	055 Move W9, [X22+36]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X24, [X19+16]
	059 Compare X24, 0
	060 JumpIfEqual {114}
	061 Move X9, 0xEC1000
	062 Move X9, [X9+1448]
	063 Move W1, [X24+24]
	064 Move X0, [X9]
	065 Add W21, W8, W1
	066 Move W9, [X0+224]
	067 Compare W9, 0
	068 JumpIfNotEqual {71}
	069 Call 0x1C17DFC
	070 Move W1, [X24+24]
	071 Add W8, W23, W23
	072 Move W9, 0x6667
	073 NotImplemented "Instruction MOVK not yet implemented."
	074 Move W8, W8
	075 ShiftRight W8, 31
	076 And W8, W8, 0x3FFFFFFF
	077 NotImplemented "Instruction SMADDL not yet implemented."
	078 Move X9, X8
	079 ShiftRight X9, 63
	080 And X9, X9, 0x7FFFFFFF
	081 NotImplemented "Instruction SBFM not yet implemented."
	082 Add W0, W8, W9
	083 Move X2, X31
	084 Call Math.Max, X0, X1
	085 Move W1, W0
	086 Move W0, W21
	087 Move X2, X31
	088 Call Math.Min, X0, X1
	089 Move X9, [X22+16]
	090 Compare X9, 0
	091 JumpIfEqual {114}
	092 Move W8, [X22+36]
	093 Move W10, [X9+24]
	094 Subtract W1, W0, W8
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move X8, 0xECA000
	097 Move X8, [X8+2264]
	098 Move X0, [X8]
	099 Call 0x1C17D6C
	100 Move X8, [X22+16]
	101 Move W4, [X22+32]
	102 Move X21, X0
	103 Move W1, W31
	104 Move X0, X8
	105 Move X2, X21
	106 Move W3, W31
	107 Move X5, X31
	108 Call Array.Copy, X0, X1, X2, X3, X4
	109 Move [X19+16], X21
	110 Move W8, [X22+36]
	111 Move [X19+32], X31
	112 Compare X19, 0
	113 JumpIfNotEqual {119}
	114 Call 0x1C17F20
	115 Move [X19+16], X9
	116 Move X9, [X22+24]
	117 Move [X19+36], W8
	118 Move [X19+24], X9
	119 Move W8, [X22+36]
	120 Subtract W8, W20, W8
	121 Move [X19+32], W8
	122 Move X20, [X31+48]
	123 Move X19, [X31+56]
	124 Move X22, [X31+32]
	125 Move X21, [X31+40]
	126 Move X24, [X31+16]
	127 Move X23, [X31+24]
	128 Move X30, [X31+64]
	129 Return 
	130 Move X0, 0xEC9000
	131 Move X0, [X0+1888]
	132 Call 0x1C17D08
	133 Call 0x1C17F10
	134 Move X19, X0
	135 Move X0, 0xECB000
	136 Move X0, [X0+3784]
	137 Call 0x1C17D08
	138 Move X20, X0
	139 Move X0, 0xEF0000
	140 Move X0, [X0]
	141 Move X0, 0xEC9000
	142 Move X0, [X0+1888]
	143 Call 0x1C17D08
	144 Call 0x1C17F10
	145 Move X19, X0
	146 Move X0, 0xECB000
	147 Move X0, [X0+3784]
	148 Call 0x1C17D08
	149 Move X20, X0
	150 Move X0, 0xEEB000
	151 Move X0, [X0+672]
	152 Call 0x1C17D08
	153 Move X2, X0
	154 Move X0, X19
	155 Move X1, X20
	156 Move X3, X31
	157 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	158 Move X0, 0xEF0000
	159 Move X0, [X0+1296]
	160 Call 0x1C17D08
	161 Move X1, X0
	162 Move X0, X19
	163 Call 0x1C17DEC

Method: System.Char get_Chars(System.Int32 index)

Disassembly:
	0x03233E88 STR D8, [X31 - 0x30]!
	0x03233E8C STP X30, X21, [X31 + 0x10]
	0x03233E90 STP X20, X19, [X31 + 0x20]
	0x03233E94 ADRP X20, 0x11A9000
	0x03233E98 ADRP X21, 0xEEF000
	0x03233E9C LDRB W8, [X20 + 0x3D6]
	0x03233EA0 LDR X21, [X21 + 0x5B8]
	0x03233EA4 MOV V8.16B, V0.16B
	0x03233EA8 MOV X19, X0
	0x03233EAC TBNZ X8, 0x0, 0x3233EC4
	0x03233EB0 ADRP X0, 0xEEF000
	0x03233EB4 LDR X0, [X0 + 0x5B8]
	0x03233EB8 BL 0x1C16CF4
	0x03233EBC MOVZ W8, 0x1
	0x03233EC0 STRB W8, [X20 + 0x3D6]
	0x03233EC4 LDR X1, [X21]
	0x03233EC8 MOV X0, X19
	0x03233ECC LDP X20, X19, [X31 + 0x20]
	0x03233ED0 LDP X30, X21, [X31 + 0x10]
	0x03233ED4 MOV V0.16B, V8.16B
	0x03233ED8 LDR V8, [X31], #0x30
	0x03233EDC B 0x228C78C
	0x03233EE0 STR X30, [X31 - 0x30]!
	0x03233EE4 STP X22, X21, [X31 + 0x10]
	0x03233EE8 STP X20, X19, [X31 + 0x20]
	0x03233EEC ADRP X21, 0x11A9000
	0x03233EF0 ADRP X22, 0xEEF000
	0x03233EF4 LDRB W8, [X21 + 0x3D7]
	0x03233EF8 LDR X22, [X22 + 0x5C0]
	0x03233EFC MOV W19, W1
	0x03233F00 MOV X20, X0
	0x03233F04 TBNZ X8, 0x0, 0x3233F1C
	0x03233F08 ADRP X0, 0xEEF000
	0x03233F0C LDR X0, [X0 + 0x5C0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X0, 0
	004 JumpIfEqual {35}
	005 Move W8, [X0+36]
	006 Subtract W8, W1, W8
	007 Move X0, [X0+24]
	008 Compare X0, 0
	009 JumpIfNotEqual {3}
	010 Move X0, 0xECB000
	011 Move X0, [X0+3960]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X1, X31
	015 Move X19, X0
	016 Call IndexOutOfRangeException..ctor, X0
	017 Move X0, 0xEF0000
	018 Move X0, [X0+1328]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Call 0x1C17DEC
	023 Move W9, [X0+32]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X9, [X0+16]
	026 Compare X9, 0
	027 JumpIfEqual {35}
	028 Move W10, [X9+24]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Add X8, X9, W8
	031 NotImplemented "Instruction LDRH not yet implemented."
	032 Move X30, [X31+16]
	033 Move X19, [X31+24]
	034 Return X0
	035 Call 0x1C17F20
	036 Call 0x1C17F28

Method: System.Void set_Chars(System.Int32 index, System.Char value)

Disassembly:
	0x03233F10 BL 0x1C16CF4
	0x03233F14 MOVZ W8, 0x1
	0x03233F18 STRB W8, [X21 + 0x3D7]
	0x03233F1C LDR X2, [X22]
	0x03233F20 MOV X0, X20
	0x03233F24 MOV W1, W19
	0x03233F28 LDP X20, X19, [X31 + 0x20]
	0x03233F2C LDP X22, X21, [X31 + 0x10]
	0x03233F30 LDR X30, [X31], #0x30
	0x03233F34 B 0x228C930
	0x03233F38 STR X30, [X31 - 0x30]!
	0x03233F3C STP X22, X21, [X31 + 0x10]
	0x03233F40 STP X20, X19, [X31 + 0x20]
	0x03233F44 ADRP X21, 0x11A9000
	0x03233F48 ADRP X22, 0xEEF000
	0x03233F4C LDRB W8, [X21 + 0x3D8]
	0x03233F50 LDR X22, [X22 + 0x5C8]
	0x03233F54 MOV W19, W1
	0x03233F58 MOV X20, X0
	0x03233F5C TBNZ X8, 0x0, 0x3233F74
	0x03233F60 ADRP X0, 0xEEF000
	0x03233F64 LDR X0, [X0 + 0x5C8]
	0x03233F68 BL 0x1C16CF4
	0x03233F6C MOVZ W8, 0x1
	0x03233F70 STRB W8, [X21 + 0x3D8]
	0x03233F74 LDR X2, [X22]
	0x03233F78 MOV X0, X20
	0x03233F7C MOV W1, W19
	0x03233F80 LDP X20, X19, [X31 + 0x20]
	0x03233F84 LDP X22, X21, [X31 + 0x10]
	0x03233F88 LDR X30, [X31], #0x30
	0x03233F8C B 0x228C9BC
	0x03233F90 STP X30, X19, [X31 - 0x10]!
	0x03233F94 MOV X19, X0
	0x03233F98 CBZ X1, 0x3233FBC
	0x03233F9C LDR X8, [X1]
	0x03233FA0 MOV X0, X1
	0x03233FA4 LDP X9, X8, [X8 + 0x168]
	0x03233FA8 MOV X1, X8
	0x03233FAC BLR X9
	0x03233FB0 MOV X1, X0
	0x03233FB4 MOV X0, X19
	0x03233FB8 BL 0x32333E0
	0x03233FBC MOV X0, X19
	0x03233FC0 LDP X30, X19, [X31], #0x10
	0x03233FC4 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X0, 0
	005 JumpIfEqual {47}
	006 Move W8, [X0+36]
	007 Subtract W8, W1, W8
	008 Move X0, [X0+24]
	009 Compare X0, 0
	010 JumpIfNotEqual {4}
	011 Move X0, 0xEC9000
	012 Move X0, [X0+1888]
	013 Call 0x1C17D08
	014 Call 0x1C17F10
	015 Move X19, X0
	016 Move X0, 0xECC000
	017 Move X0, [X0+304]
	018 Call 0x1C17D08
	019 Move X20, X0
	020 Move X0, 0xEE9000
	021 Move X0, [X0+1632]
	022 Call 0x1C17D08
	023 Move X2, X0
	024 Move X0, X19
	025 Move X1, X20
	026 Move X3, X31
	027 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	028 Move X0, 0xEF0000
	029 Move X0, [X0+1336]
	030 Call 0x1C17D08
	031 Move X1, X0
	032 Move X0, X19
	033 Call 0x1C17DEC
	034 Move W9, [X0+32]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X9, [X0+16]
	037 Compare X9, 0
	038 JumpIfEqual {47}
	039 Move W10, [X9+24]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Add X8, X9, W8
	044 NotImplemented "Instruction STRH not yet implemented."
	045 Move X30, [X31+32]
	046 Return 
	047 Call 0x1C17F20
	048 Call 0x1C17F28

Method: System.Text.StringBuilder Append(System.Char value, System.Int32 repeatCount)

Disassembly:
	0x03233D24 LDP X30, X21, [X31 + 0x10]
	0x03233D28 ADD X31, X31, 0x30
	0x03233D2C RET
	0x03233D30 STR X30, [X31 - 0x10]!
	0x03233D34 LDR X8, [X0 + 0x10]
	0x03233D38 CBZ X8, 0x3233D78
	0x03233D3C LDRSW X9, [X0 + 0x20]
	0x03233D40 LDR W10, [X8 + 0x18]
	0x03233D44 CMP W9, W10
	0x03233D48 B.GE 0x3233D68
	0x03233D4C ADD W11, W9, 0x1
	0x03233D50 CMP W9, W10
	0x03233D54 STR W11, [X0 + 0x20]
	0x03233D58 B.CS 0x3233D7C
	0x03233D5C ADD X8, X8, X9, 0x1, LSL
	0x03233D60 STRH W1, [X8 + 0x20]
	0x03233D64 B 0x3233D70
	0x03233D68 MOVZ W2, 0x1
	0x03233D6C BL 0x3232D24
	0x03233D70 LDR X30, [X31], #0x10
	0x03233D74 RET
	0x03233D78 BL 0x1C16F20
	0x03233D7C BL 0x1C16F28
	0x03233D80 STR X30, [X31 - 0x30]!
	0x03233D84 STP X22, X21, [X31 + 0x10]
	0x03233D88 STP X20, X19, [X31 + 0x20]
	0x03233D8C ADRP X21, 0x11A9000
	0x03233D90 ADRP X22, 0xEEF000
	0x03233D94 LDRB W8, [X21 + 0x3D3]
	0x03233D98 LDR X22, [X22 + 0x5A0]
	0x03233D9C MOV W19, W1
	0x03233DA0 MOV X20, X0
	0x03233DA4 TBNZ X8, 0x0, 0x3233DBC
	0x03233DA8 ADRP X0, 0xEEF000
	0x03233DAC LDR X0, [X0 + 0x5A0]
	0x03233DB0 BL 0x1C16CF4
	0x03233DB4 MOVZ W8, 0x1
	0x03233DB8 STRB W8, [X21 + 0x3D3]
	0x03233DBC LDR X2, [X22]
	0x03233DC0 MOV X0, X20
	0x03233DC4 MOV W1, W19
	0x03233DC8 LDP X20, X19, [X31 + 0x20]
	0x03233DCC LDP X22, X21, [X31 + 0x10]
	0x03233DD0 LDR X30, [X31], #0x30
	0x03233DD4 B 0x228C700
	0x03233DD8 STR X30, [X31 - 0x30]!
	0x03233DDC STP X22, X21, [X31 + 0x10]
	0x03233DE0 STP X20, X19, [X31 + 0x20]
	0x03233DE4 ADRP X21, 0x11A9000
	0x03233DE8 ADRP X22, 0xEEF000
	0x03233DEC LDRB W8, [X21 + 0x3D4]
	0x03233DF0 LDR X22, [X22 + 0x5A8]
	0x03233DF4 MOV W19, W1
	0x03233DF8 MOV X20, X0
	0x03233DFC TBNZ X8, 0x0, 0x3233E14
	0x03233E00 ADRP X0, 0xEEF000
	0x03233E04 LDR X0, [X0 + 0x5A8]
	0x03233E08 BL 0x1C16CF4
	0x03233E0C MOVZ W8, 0x1
	0x03233E10 STRB W8, [X21 + 0x3D4]
	0x03233E14 LDR X2, [X22]
	0x03233E18 MOV X0, X20
	0x03233E1C MOV W1, W19
	0x03233E20 LDP X20, X19, [X31 + 0x20]
	0x03233E24 LDP X22, X21, [X31 + 0x10]
	0x03233E28 LDR X30, [X31], #0x30
	0x03233E2C B 0x228C818
	0x03233E30 STR X30, [X31 - 0x30]!
	0x03233E34 STP X22, X21, [X31 + 0x10]
	0x03233E38 STP X20, X19, [X31 + 0x20]
	0x03233E3C ADRP X21, 0x11A9000
	0x03233E40 ADRP X22, 0xEEF000
	0x03233E44 LDRB W8, [X21 + 0x3D5]
	0x03233E48 LDR X22, [X22 + 0x5B0]
	0x03233E4C MOV W19, W1
	0x03233E50 MOV X20, X0
	0x03233E54 TBNZ X8, 0x0, 0x3233E6C
	0x03233E58 ADRP X0, 0xEEF000
	0x03233E5C LDR X0, [X0 + 0x5B0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move TEMP, X2
	006 And TEMP, TEMP, -2147483648
	007 Compare TEMP, -2147483648
	008 JumpIfEqual {50}
	009 Move W20, W2
	010 Move X19, X0
	011 Compare W2, 0
	012 JumpIfEqual {42}
	013 Move W8, [X19+32]
	014 Move W9, [X19+36]
	015 Move W10, [X19+40]
	016 Add W9, W9, W20
	017 Add W9, W9, W8
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move W21, W1
	021 Move X9, [X19+16]
	022 Move W10, W8
	023 Compare X9, 0
	024 JumpIfEqual {48}
	025 Move X8, [X9+24]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X0, X19
	028 Move W1, W20
	029 Move [X19+32], W10
	030 Call StringBuilder.ExpandByABlock, X0, X1
	031 Move X9, [X19+16]
	032 Move W10, W31
	033 Compare X9, 0
	034 JumpIfNotEqual {25}
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Add W8, W10, 1
	037 Add X9, X9, W10
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Subtract W20, W20, 1
	040 NotImplemented "Instruction STRH not yet implemented."
	041 Move [X19+32], W8
	042 Move X0, X19
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Return X0
	048 Call 0x1C17F20
	049 Call 0x1C17F28
	050 Move X0, 0xEC9000
	051 Move X0, [X0+1888]
	052 Call 0x1C17D08
	053 Call 0x1C17F10
	054 Move X19, X0
	055 Move X0, 0xEF0000
	056 Move X0, [X0+1304]
	057 Call 0x1C17D08
	058 Move X20, X0
	059 Move X0, 0xEF0000
	060 Move X0, [X0+48]
	061 Move X0, 0xEC9000
	062 Move X0, [X0+1888]
	063 Call 0x1C17D08
	064 Call 0x1C17F10
	065 Move X19, X0
	066 Move X0, 0xEF0000
	067 Move X0, [X0+1304]
	068 Call 0x1C17D08
	069 Move X20, X0
	070 Move X0, 0xEF0000
	071 Move X0, [X0+1312]
	072 Call 0x1C17D08
	073 Move X2, X0
	074 Move X0, X19
	075 Move X1, X20
	076 Move X3, X31
	077 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	078 Move X0, 0xEF0000
	079 Move X0, [X0+1320]
	080 Call 0x1C17D08
	081 Move X1, X0
	082 Move X0, X19
	083 Call 0x1C17DEC

Method: System.Text.StringBuilder Append(System.Char[] value, System.Int32 startIndex, System.Int32 charCount)

Disassembly:
	0x03234154 B.LT 0x323418C
	0x03234158 MOV X21, X2
	0x0323415C ADD X3, X31, 0x8
	0x03234160 ADD X4, X31, 0x4
	0x03234164 MOV W2, W19
	0x03234168 MOV W5, W31
	0x0323416C MOV X20, X0
	0x03234170 BL 0x3235568
	0x03234174 ADD X1, X31, 0x8
	0x03234178 ADD X2, X31, 0x4
	0x0323417C MOV X0, X20
	0x03234180 MOV X3, X21
	0x03234184 MOV W4, W19
	0x03234188 BL 0x3235814
	0x0323418C LDP X20, X19, [X31 + 0x20]
	0x03234190 LDP X30, X21, [X31 + 0x10]
	0x03234194 ADD X31, X31, 0x30
	0x03234198 RET
	0x0323419C ADRP X0, 0xEC7000
	0x032341A0 LDR X0, [X0 + 0x760]
	0x032341A4 BL 0x1C16D08
	0x032341A8 BL 0x1C16F10
	0x032341AC MOV X19, X0
	0x032341B0 ADRP X0, 0xECA000
	0x032341B4 LDR X0, [X0 + 0x130]
	0x032341B8 BL 0x1C16D08
	0x032341BC MOV X20, X0
	0x032341C0 ADRP X0, 0xEE7000
	0x032341C4 LDR X0, [X0 + 0x660]
	0x032341C8 BL 0x1C16D08
	0x032341CC MOV X2, X0
	0x032341D0 MOV X0, X19
	0x032341D4 MOV X1, X20
	0x032341D8 MOV X3, X31
	0x032341DC BL 0x3311888
	0x032341E0 ADRP X0, 0xEEE000
	0x032341E4 LDR X0, [X0 + 0x5D8]
	0x032341E8 BL 0x1C16D08
	0x032341EC MOV X1, X0
	0x032341F0 MOV X0, X19
	0x032341F4 BL 0x1C16DEC
	0x032341F8 SUB X31, X31, 0x20
	0x032341FC STP X30, X19, [X31 + 0x10]
	0x03234200 STRH W2, [X31 + 0xC]
	0x03234204 ADD X2, X31, 0xC
	0x03234208 MOVZ W3, 0x1
	0x0323420C MOV X19, X0
	0x03234210 BL 0x3234128
	0x03234214 MOV X0, X19
	0x03234218 LDP X30, X19, [X31 + 0x10]
	0x0323421C ADD X31, X31, 0x20
	0x03234220 RET
	0x03234224 SUB X31, X31, 0x60
	0x03234228 STR X30, [X31 + 0x40]
	0x0323422C STP X20, X19, [X31 + 0x50]
	0x03234230 MOV X19, X1
	0x03234234 MOV X20, X0
	0x03234238 MOVI V0.2D, 0x0
	0x0323423C ADD X0, X31, 0x20
	0x03234240 MOV X1, X2
	0x03234244 MOV X2, X31
	0x03234248 STP V0, V0, [X31 + 0x20]
	0x0323424C BL 0x338CBA8
	0x03234250 LDP V0, V1, [X31 + 0x20]
	0x03234254 ADD X3, X31, 0x0
	0x03234258 MOV X0, X20
	0x0323425C MOV X1, X31
	0x03234260 MOV X2, X19
	0x03234264 STP V0, V1, [X31]
	0x03234268 BL 0x323427C
	0x0323426C LDP X20, X19, [X31 + 0x50]
	0x03234270 LDR X30, [X31 + 0x40]
	0x03234274 ADD X31, X31, 0x60
	0x03234278 RET
	0x0323427C SUB X31, X31, 0xC0
	0x03234280 STP X29, X30, [X31 + 0x60]
	0x03234284 STP X28, X27, [X31 + 0x70]
	0x03234288 STP X26, X25, [X31 + 0x80]
	0x0323428C STP X24, X23, [X31 + 0x90]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move TEMP, X2
	005 And TEMP, TEMP, -2147483648
	006 Compare TEMP, -2147483648
	007 JumpIfEqual {31}
	008 Move TEMP, X3
	009 And TEMP, TEMP, -2147483648
	010 Compare TEMP, -2147483648
	011 JumpIfEqual {38}
	012 Compare X1, 0
	013 JumpIfEqual {24}
	014 Move W8, [X1+24]
	015 Subtract W9, W8, W2
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Compare W3, 0
	018 JumpIfEqual {27}
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Add X8, X1, W2
	021 Add X1, X8, 32
	022 Move W2, W3
	023 Call StringBuilder.Append, X0, X1, X2
	024 Or W8, W2, W3
	025 Compare W8, 0
	026 JumpIfNotEqual {73}
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Return X0
	031 Move X0, 0xEC8000
	032 Move X0, [X0+1888]
	033 Call 0x1C17D08
	034 Call 0x1C17F10
	035 Move X19, X0
	036 Move X0, 0xEE8000
	037 Move X0, [X0+1624]
	038 Move X0, 0xEC8000
	039 Move X0, [X0+1888]
	040 Call 0x1C17D08
	041 Call 0x1C17F10
	042 Move X19, X0
	043 Move X0, 0xEEF000
	044 Move X0, [X0+784]
	045 Call 0x1C17D08
	046 Move X20, X0
	047 Move X0, 0xEEF000
	048 Move X0, [X0+1360]
	049 Move X0, 0xEC8000
	050 Move X0, [X0+1888]
	051 Call 0x1C17D08
	052 Call 0x1C17F10
	053 Move X19, X0
	054 Move X0, 0xEEF000
	055 Move X0, [X0+784]
	056 Call 0x1C17D08
	057 Move X20, X0
	058 Move X0, 0xEE8000
	059 Move X0, [X0+1632]
	060 Call 0x1C17D08
	061 Move X2, X0
	062 Move X0, X19
	063 Move X1, X20
	064 Move X3, X31
	065 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	066 Move X0, 0xEEF000
	067 Move X0, [X0+1368]
	068 Call 0x1C17D08
	069 Move X1, X0
	070 Move X0, X19
	071 Call 0x1C17DEC
	072 Call 0x1C17F28
	073 Move X0, 0xEC5000
	074 Move X0, [X0+1320]
	075 Call 0x1C17D08
	076 Call 0x1C17F10
	077 Move X19, X0
	078 Move X0, 0xECA000
	079 Move X0, [X0+3784]
	080 Call 0x1C17D08
	081 Move X1, X0
	082 Move X0, X19
	083 Move X2, X31
	084 Call ArgumentNullException..ctor, X0, X1

Method: System.Text.StringBuilder Append(System.String value)

Disassembly:
	0x032343E0 CBZ X0, 0x3234410
	0x032343E4 ADRP X8, 0xEEE000
	0x032343E8 LDR X8, [X8 + 0x5E8]
	0x032343EC MOV X19, X0
	0x032343F0 LDR X21, [X8]
	0x032343F4 MOV X1, X21
	0x032343F8 BL 0x1C16E00
	0x032343FC STR X0, [X31 + 0x10]
	0x03234400 CBNZ X0, 0x3234414
	0x03234404 MOV X0, X19
	0x03234408 MOV X1, X21
	0x0323440C BL 0x1C171E0
	0x03234410 STR X31, [X31 + 0x10]
	0x03234414 MOVZ W27, 0x4240
	0x03234418 SUB W26, W31, W23
	0x0323441C SUB W8, W23, 0x1
	0x03234420 MOV X24, X31
	0x03234424 MOV W28, W31
	0x03234428 MOVK W27, 0xF0000
	0x0323442C STR W8, [X31 + 0x1C]
	0x03234430 MOVZ W22, 0xA
	0x03234434 STR X25, [X31 + 0x30]
	0x03234438 STR X26, [X31 + 0x8]
	0x0323443C CMP W28, W23
	0x03234440 MOV W21, W28
	0x03234444 B.GE 0x32344E4
	0x03234448 MOV X0, X20
	0x0323444C MOV W1, W28
	0x03234450 MOV X2, X31
	0x03234454 BL 0x3222A1C
	0x03234458 AND W8, W0, 0xFFFF
	0x0323445C MOV W19, W0
	0x03234460 CMP W8, 0x7B
	0x03234464 ADD W21, W28, 0x1
	0x03234468 B.EQ 0x323449C
	0x0323446C CMP W8, 0x7D
	0x03234470 B.NE 0x32344C4
	0x03234474 CMP W21, W23
	0x03234478 B.GE 0x3234D14
	0x0323447C MOV X0, X20
	0x03234480 MOV W1, W21
	0x03234484 MOV X2, X31
	0x03234488 BL 0x3222A1C
	0x0323448C AND W8, W0, 0xFFFF
	0x03234490 CMP W8, 0x7D
	0x03234494 B.EQ 0x32344C0
	0x03234498 B 0x3234D14
	0x0323449C CMP W21, W23
	0x032344A0 B.GE 0x32344E0
	0x032344A4 MOV X0, X20
	0x032344A8 MOV W1, W21
	0x032344AC MOV X2, X31
	0x032344B0 BL 0x3222A1C
	0x032344B4 AND W8, W0, 0xFFFF
	0x032344B8 CMP W8, 0x7B
	0x032344BC B.NE 0x32344E0
	0x032344C0 ADD W21, W28, 0x2
	0x032344C4 MOV X0, X25
	0x032344C8 MOV W1, W19
	0x032344CC BL 0x3233D30
	0x032344D0 CMP W21, W23
	0x032344D4 MOV W28, W21
	0x032344D8 B.LT 0x3234448
	0x032344DC B 0x32344E4
	0x032344E0 MOV W21, W28

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, X0
	009 Compare X1, 0
	010 JumpIfEqual {54}
	011 Move X23, [X19+16]
	012 Compare X23, 0
	013 JumpIfEqual {63}
	014 NotImplemented "Instruction LDRSW not yet implemented."
	015 Move W21, [X1+16]
	016 Move W8, [X23+24]
	017 Move X20, X1
	018 Add W22, W21, W24
	019 NotImplemented "Instruction CMP not yet implemented."
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move X0, X31
	022 Call RuntimeHelpers.get_OffsetToStringData
	023 Move W8, [X23+24]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Add X8, X23, X24
	026 Add X1, X20, W0
	027 Add X0, X8, 32
	028 Move W2, W21
	029 Move X3, X31
	030 Call String.wstrcpy, X0, X1, X2
	031 Move X0, X19
	032 Move X1, X20
	033 Call StringBuilder.AppendHelper, X0, X1
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X0, X20
	036 Move W1, W31
	037 Move X2, X31
	038 Call String.get_Chars, X0, X1
	039 Move W8, [X23+24]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Add X8, X23, X24
	042 NotImplemented "Instruction CMP not yet implemented."
	043 NotImplemented "Instruction STRH not yet implemented."
	044 Move W1, 1
	045 Move X0, X20
	046 Move X2, X31
	047 Call String.get_Chars, X0, X1
	048 Move W9, [X23+24]
	049 Add W8, W24, 1
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Add X8, X23, W8
	052 NotImplemented "Instruction STRH not yet implemented."
	053 Move [X19+32], W22
	054 Move X0, X19
	055 Move X20, [X31+48]
	056 Move X19, [X31+56]
	057 Move X22, [X31+32]
	058 Move X21, [X31+40]
	059 Move X24, [X31+16]
	060 Move X23, [X31+24]
	061 Move X30, [X31+64]
	062 Return X0
	063 Call 0x1C17F20
	064 Call 0x1C17F28

Method: System.Void AppendHelper(System.String value)

Disassembly:
	0x032344E4 CMP W21, W23
	0x032344E8 B.EQ 0x3234CF0
	0x032344EC ADD W1, W21, 0x1
	0x032344F0 CMP W1, W23
	0x032344F4 B.EQ 0x3234D14
	0x032344F8 MOV X0, X20
	0x032344FC MOV X2, X31
	0x03234500 BL 0x3222A1C
	0x03234504 SUB W8, W0, 0x30
	0x03234508 AND W8, W8, 0xFFFF
	0x0323450C CMP W8, 0x9
	0x03234510 B.HI 0x3234D14
	0x03234514 LDR W28, [X31 + 0x1C]
	0x03234518 MOV W26, W0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {18}
	006 Move X20, X0
	007 Move X0, X31
	008 Move X19, X1
	009 Call RuntimeHelpers.get_OffsetToStringData
	010 Move W2, [X19+16]
	011 Add X1, X19, W0
	012 Move X0, X20
	013 Move X20, [X31+16]
	014 Move X19, [X31+24]
	015 Move X30, [X31+32]
	016 Call StringBuilder.Append, X0, X1, X2
	017 Return 
	018 Call 0x1C17F20

Method: System.Text.StringBuilder Append(System.String value, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x0323451C MOV W25, W31
	0x03234520 ADD W21, W21, 0x2
	0x03234524 CMP W23, W21
	0x03234528 B.EQ 0x3234D14
	0x0323452C MUL W8, W25, W22
	0x03234530 ADD W8, W8, W26, UXTH
	0x03234534 MOV X0, X20
	0x03234538 MOV W1, W21
	0x0323453C MOV X2, X31
	0x03234540 SUB W25, W8, 0x30
	0x03234544 BL 0x3222A1C
	0x03234548 MOV W26, W0
	0x0323454C CMP W25, W27
	0x03234550 ADD W21, W21, 0x1
	0x03234554 B.GE 0x3234568
	0x03234558 SUB W8, W26, 0x30
	0x0323455C AND W8, W8, 0xFFFF
	0x03234560 CMP W8, 0xA
	0x03234564 B.CC 0x3234524
	0x03234568 ADRP X8, 0xEEE000
	0x0323456C LDR X8, [X8 + 0x98]
	0x03234570 LDR X0, [X8]
	0x03234574 LDR W8, [X0 + 0xE0]
	0x03234578 CBNZ W8, 0x3234580
	0x0323457C BL 0x1C16DFC
	0x03234580 LDR X0, [X31 + 0x40]
	0x03234584 MOV X1, X31
	0x03234588 BL 0x338CD78
	0x0323458C CMP W25, W0
	0x03234590 B.GE 0x3234D1C
	0x03234594 SUB W21, W21, 0x1
	0x03234598 CMP W21, W23
	0x0323459C B.GE 0x32345D8
	0x032345A0 MOV X0, X20
	0x032345A4 MOV W1, W21
	0x032345A8 MOV X2, X31
	0x032345AC BL 0x3222A1C
	0x032345B0 AND W8, W0, 0xFFFF
	0x032345B4 CMP W8, 0x20
	0x032345B8 B.NE 0x32345D4
	0x032345BC ADD W21, W21, 0x1
	0x032345C0 CMP W23, W21
	0x032345C4 B.NE 0x32345A0
	0x032345C8 STR W31, [X31 + 0x58]
	0x032345CC MOV W29, W31
	0x032345D0 B 0x3234704
	0x032345D4 MOV W26, W0
	0x032345D8 AND W8, W26, 0xFFFF
	0x032345DC CMP W8, 0x2C
	0x032345E0 B.NE 0x32346CC
	0x032345E4 ADD W8, W21, 0x2
	0x032345E8 SUB W21, W8, 0x1
	0x032345EC MOV W19, W8
	0x032345F0 CMP W21, W23
	0x032345F4 B.GE 0x3234618
	0x032345F8 MOV X0, X20
	0x032345FC MOV W1, W21
	0x03234600 MOV X2, X31
	0x03234604 BL 0x3222A1C
	0x03234608 AND W8, W0, 0xFFFF
	0x0323460C CMP W8, 0x20
	0x03234610 ADD W8, W19, 0x1
	0x03234614 B.EQ 0x32345E8
	0x03234618 LDR X8, [X31 + 0x8]
	0x0323461C ADD W8, W8, W19
	0x03234620 CMP W8, 0x1
	0x03234624 B.EQ 0x3234D14
	0x03234628 MOV X0, X20
	0x0323462C MOV W1, W21
	0x03234630 MOV X2, X31
	0x03234634 BL 0x3222A1C
	0x03234638 AND W8, W0, 0xFFFF
	0x0323463C CMP W8, 0x2D
	0x03234640 MOV W26, W0
	0x03234644 CSET W8, EQ
	0x03234648 STR W8, [X31 + 0x58]
	0x0323464C B.NE 0x3234670
	0x03234650 CMP W23, W19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move TEMP, X2
	007 And TEMP, TEMP, -2147483648
	008 Compare TEMP, -2147483648
	009 JumpIfEqual {42}
	010 Move W20, W3
	011 Move TEMP, X3
	012 And TEMP, TEMP, -2147483648
	013 Compare TEMP, -2147483648
	014 JumpIfEqual {53}
	015 Move W21, W2
	016 Move X22, X1
	017 Move X19, X0
	018 Compare X1, 0
	019 JumpIfEqual {32}
	020 Compare W20, 0
	021 JumpIfEqual {35}
	022 Move W8, [X22+16]
	023 Subtract W8, W8, W20
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X0, X31
	026 Call RuntimeHelpers.get_OffsetToStringData
	027 Add X8, X22, W21
	028 Add X1, X8, W0
	029 Move X0, X19
	030 Move W2, W20
	031 Call StringBuilder.Append, X0, X1, X2
	032 Or W8, W21, W20
	033 Compare W8, 0
	034 JumpIfNotEqual {76}
	035 Move X0, X19
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X30, [X31+48]
	041 Return X0
	042 Move X0, 0xEC8000
	043 Move X0, [X0+1888]
	044 Call 0x1C17D08
	045 Call 0x1C17F10
	046 Move X19, X0
	047 Move X0, 0xEE8000
	048 Move X0, [X0+1624]
	049 Call 0x1C17D08
	050 Move X20, X0
	051 Move X0, 0xEE8000
	052 Move X0, [X0+1632]
	053 Move X0, 0xEC8000
	054 Move X0, [X0+1888]
	055 Call 0x1C17D08
	056 Call 0x1C17F10
	057 Move X19, X0
	058 Move X0, 0xEE8000
	059 Move X0, [X0+1608]
	060 Call 0x1C17D08
	061 Move X20, X0
	062 Move X0, 0xEEF000
	063 Move X0, [X0+1360]
	064 Call 0x1C17D08
	065 Move X2, X0
	066 Move X0, X19
	067 Move X1, X20
	068 Move X3, X31
	069 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	070 Move X0, 0xEEF000
	071 Move X0, [X0+1392]
	072 Call 0x1C17D08
	073 Move X1, X0
	074 Move X0, X19
	075 Call 0x1C17DEC
	076 Move X0, 0xEC5000
	077 Move X0, [X0+1320]
	078 Call 0x1C17D08
	079 Call 0x1C17F10
	080 Move X19, X0
	081 Move X0, 0xECA000
	082 Move X0, [X0+3784]
	083 Call 0x1C17D08
	084 Move X1, X0
	085 Move X0, X19
	086 Move X2, X31
	087 Call ArgumentNullException..ctor, X0, X1

Method: System.Text.StringBuilder Append(System.Text.StringBuilder value)

Disassembly:
	0x03234654 B.EQ 0x3234D14
	0x03234658 MOV X0, X20
	0x0323465C MOV W1, W19
	0x03234660 MOV X2, X31
	0x03234664 BL 0x3222A1C
	0x03234668 MOV W26, W0
	0x0323466C MOV W21, W19

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {7}
	003 Move W9, [X1+32]
	004 Move W8, [X1+36]
	005 Add W3, W9, W8
	006 Move W2, W31
	007 Return X0

Method: System.Text.StringBuilder AppendCore(System.Text.StringBuilder value, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x03234670 SUB W8, W26, 0x30
	0x03234674 AND W8, W8, 0xFFFF
	0x03234678 CMP W8, 0x9
	0x0323467C B.HI 0x3234D14
	0x03234680 MOV W29, W31
	0x03234684 CMP W28, W21
	0x03234688 B.EQ 0x3234D14
	0x0323468C MUL W8, W29, W22
	0x03234690 ADD W21, W21, 0x1
	0x03234694 ADD W8, W8, W26, UXTH
	0x03234698 MOV X0, X20
	0x0323469C MOV W1, W21
	0x032346A0 MOV X2, X31
	0x032346A4 SUB W29, W8, 0x30
	0x032346A8 BL 0x3222A1C
	0x032346AC CMP W29, W27
	0x032346B0 MOV W26, W0
	0x032346B4 B.GE 0x32346D4
	0x032346B8 SUB W8, W26, 0x30
	0x032346BC AND W8, W8, 0xFFFF
	0x032346C0 CMP W8, 0xA
	0x032346C4 B.CC 0x3234684
	0x032346C8 B 0x32346D4
	0x032346CC MOV W29, W31
	0x032346D0 STR W31, [X31 + 0x58]
	0x032346D4 CMP W21, W23
	0x032346D8 B.GE 0x3234714
	0x032346DC MOV X0, X20
	0x032346E0 MOV W1, W21
	0x032346E4 MOV X2, X31
	0x032346E8 BL 0x3222A1C
	0x032346EC AND W8, W0, 0xFFFF
	0x032346F0 CMP W8, 0x20
	0x032346F4 B.NE 0x3234710
	0x032346F8 ADD W21, W21, 0x1
	0x032346FC CMP W23, W21
	0x03234700 B.NE 0x32346DC
	0x03234704 MOVZ W26, 0x20
	0x03234708 MOV W21, W23
	0x0323470C B 0x3234714
	0x03234710 MOV W26, W0
	0x03234714 ADRP X8, 0xEEE000
	0x03234718 LDR X8, [X8 + 0x98]
	0x0323471C LDR X0, [X8]
	0x03234720 LDR W8, [X0 + 0xE0]
	0x03234724 CBNZ W8, 0x323472C
	0x03234728 BL 0x1C16DFC
	0x0323472C LDR X0, [X31 + 0x40]
	0x03234730 MOV W1, W25
	0x03234734 MOV X2, X31
	0x03234738 BL 0x338CD94
	0x0323473C AND W8, W26, 0xFFFF
	0x03234740 CMP W8, 0x7D
	0x03234744 STR X0, [X31 + 0x48]
	0x03234748 B.EQ 0x3234824
	0x0323474C LDR X26, [X31 + 0x8]
	0x03234750 CMP W8, 0x3A
	0x03234754 B.NE 0x3234D14
	0x03234758 ADD W19, W21, 0x1
	0x0323475C ADRP X21, 0xEBF000
	0x03234760 LDR X21, [X21 + 0x8F0]
	0x03234764 MOV X25, X31
	0x03234768 MOV W28, W19
	0x0323476C ADD X19, X26, W19, UXTW
	0x03234770 ADDS W31, W19, W25
	0x03234774 B.EQ 0x3234D14
	0x03234778 ADD X1, X28, X25
	0x0323477C MOV X0, X20
	0x03234780 MOV X2, X31
	0x03234784 BL 0x3222A1C
	0x03234788 AND W8, W0, 0xFFFF
	0x0323478C CMP W8, 0x7D
	0x03234790 ADD X25, X25, 0x1
	0x03234794 B.EQ 0x32347C8
	0x03234798 CMP W8, 0x7B
	0x0323479C B.NE 0x3234770
	0x032347A0 ADD X1, X28, X25
	0x032347A4 CMP W1, W23
	0x032347A8 B.GE 0x3234D14
	0x032347AC MOV X0, X20
	0x032347B0 MOV X2, X31
	0x032347B4 BL 0x3222A1C
	0x032347B8 AND W8, W0, 0xFFFF
	0x032347BC CMP W8, 0x7B
	0x032347C0 B.EQ 0x32347EC
	0x032347C4 B 0x3234D14
	0x032347C8 ADD X1, X28, X25
	0x032347CC CMP W1, W23
	0x032347D0 B.GE 0x3234838
	0x032347D4 MOV X0, X20
	0x032347D8 MOV X2, X31
	0x032347DC BL 0x3222A1C
	0x032347E0 AND W8, W0, 0xFFFF
	0x032347E4 CMP W8, 0x7D
	0x032347E8 B.NE 0x3234838
	0x032347EC CBNZ X24, 0x3234804
	0x032347F0 LDR X0, [X21]
	0x032347F4 BL 0x1C16F10
	0x032347F8 MOV X24, X0
	0x032347FC BL 0x3231AC4
	0x03234800 CBZ X24, 0x3234D18
	0x03234804 ADD X8, X28, X25
	0x03234808 MOV X0, X24
	0x0323480C MOV X1, X20
	0x03234810 MOV W2, W28
	0x03234814 MOV W3, W25
	0x03234818 ADD X19, X8, 0x1
	0x0323481C BL 0x323351C
	0x03234820 B 0x3234764
	0x03234824 LDR X25, [X31 + 0x30]
	0x03234828 MOV X12, X31
	0x0323482C STR X31, [X31 + 0x50]
	0x03234830 STR X31, [X31 + 0x38]
	0x03234834 B 0x3234980
	0x03234838 SUB W8, W28, 0x1
	0x0323483C ADD X21, X8, X25
	0x03234840 CBZ X24, 0x3234850
	0x03234844 LDP W9, W8, [X24 + 0x20]
	0x03234848 ADDS W31, W9, W8
	0x0323484C B.NE 0x32348E0
	0x03234850 CMP W25, 0x1
	0x03234854 B.NE 0x3234870
	0x03234858 LDR X25, [X31 + 0x30]
	0x0323485C MOV X12, X31
	0x03234860 STR X31, [X31 + 0x50]
	0x03234864 STR X31, [X31 + 0x38]
	0x03234868 MOV W21, W28
	0x0323486C B 0x3234980
	0x03234870 ADRP X8, 0x11A5000
	0x03234874 LDRB W8, [X8 + 0x761]
	0x03234878 CBNZ W8, 0x3234894
	0x0323487C ADRP X0, 0xEE6000
	0x03234880 LDR X0, [X0 + 0x290]
	0x03234884 BL 0x1C16CF4

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X23, 0x11A9000
	011 Move W8, [X23+976]
	012 Move W21, W3
	013 Move W22, W2
	014 Move X20, X1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0xEC0000
	021 Move X0, [X0+1448]
	022 Call 0x1C17CF4
	023 Move X0, 0xEEF000
	024 Move X0, [X0+1400]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X23+976], W8
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move W25, [X19+32]
	030 Move W8, [X19+36]
	031 Move W9, [X19+40]
	032 Add W8, W8, W21
	033 Add W8, W8, W25
	034 NotImplemented "Instruction CMP not yet implemented."
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X24, 0xEC0000
	037 Move X24, [X24+1448]
	038 Move X23, [X19+16]
	039 Compare X23, 0
	040 JumpIfEqual {125}
	041 Move X0, [X24]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move W8, [X23+24]
	047 Move W1, W21
	048 Move X2, X31
	049 Subtract W0, W8, W25
	050 Call Math.Min, X0, X1
	051 Move W23, W0
	052 Compare W0, 0
	053 JumpIfNotEqual {72}
	054 Move X0, X19
	055 Move W1, W21
	056 Call StringBuilder.ExpandByABlock, X0, X1
	057 Move X23, [X19+16]
	058 Compare X23, 0
	059 JumpIfEqual {125}
	060 Move X0, [X24]
	061 Move W25, [X19+32]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move W8, [X23+24]
	067 Move W1, W21
	068 Move X2, X31
	069 Subtract W0, W8, W25
	070 Call Math.Min, X0, X1
	071 Move W23, W0
	072 Move X26, [X19+16]
	073 NotImplemented "Instruction LDRSW not yet implemented."
	074 Compare X26, 0
	075 JumpIfEqual {86}
	076 Move W8, [X26+24]
	077 Subtract W8, W8, W25
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X0, X31
	080 Call ThrowHelper.ThrowArgumentOutOfRangeException
	081 Add X8, X26, X25
	082 Add X2, X8, 32
	083 Move W3, W23
	084 Compare X20, 0
	085 JumpIfNotEqual {95}
	086 Or W8, W25, W23
	087 Compare W8, 0
	088 JumpIfEqual {91}
	089 Move X0, X31
	090 Call ThrowHelper.ThrowArgumentOutOfRangeException
	091 Move X2, X31
	092 Move X3, X31
	093 Compare X20, 0
	094 JumpIfEqual {125}
	095 Move X0, X20
	096 Move W1, W22
	097 Move W4, W23
	098 Call StringBuilder.CopyTo, X0, X1, X2, X3
	099 Move W8, [X19+32]
	100 Subtract W21, W21, W23
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Add W22, W23, W22
	103 Add W25, W8, W23
	104 Move [X19+32], W25
	105 Compare X20, 0
	106 JumpIfEqual {125}
	107 Move X0, X20
	108 Move W1, W22
	109 Move W2, W21
	110 Call StringBuilder.ToString, X0, X1, X2
	111 Move X1, X0
	112 Move X0, X20
	113 Call StringBuilder.Append, X0, X1
	114 Move X0, X19
	115 Move X20, [X31+64]
	116 Move X19, [X31+72]
	117 Move X22, [X31+48]
	118 Move X21, [X31+56]
	119 Move X24, [X31+32]
	120 Move X23, [X31+40]
	121 Move X26, [X31+16]
	122 Move X25, [X31+24]
	123 Move X30, [X31+80]
	124 Return X0
	125 Call 0x1C17F20
	126 Move X0, 0xEC8000
	127 Move X0, [X0+1888]
	128 Call 0x1C17D08
	129 Call 0x1C17F10
	130 Move X19, X0
	131 Move X0, 0xECD000
	132 Move X0, [X0+336]
	133 Call 0x1C17D08
	134 Move X20, X0
	135 Move X0, 0xEEF000
	136 Move X0, [X0+1104]
	137 Call 0x1C17D08
	138 Move X2, X0
	139 Move X0, X19
	140 Move X1, X20
	141 Move X3, X31
	142 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	143 Move X0, 0xEEF000
	144 Move X0, [X0+1408]
	145 Call 0x1C17D08
	146 Move X1, X0
	147 Move X0, X19
	148 Call 0x1C17DEC

Method: System.Text.StringBuilder AppendLine()

Disassembly:
	0x03234888 MOVZ W8, 0x1
	0x0323488C ADRP X9, 0x11A5000
	0x03234890 STRB W8, [X9 + 0x761]
	0x03234894 LDR W8, [X20 + 0x10]
	0x03234898 SUB X9, X25, 0x1
	0x0323489C STR X9, [X31 + 0x50]
	0x032348A0 SUBS W8, W8, W28
	0x032348A4 B.CC 0x32348B4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, X31
	005 Call Environment.get_NewLine
	006 Move X1, X0
	007 Move X0, X19
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Call StringBuilder.Append, X0, X1
	011 Return X0

Method: System.Text.StringBuilder AppendLine(System.String value)

Disassembly:
	0x032348A8 LDR X9, [X31 + 0x50]
	0x032348AC CMP W8, W9
	0x032348B0 B.CS 0x32348C0
	0x032348B4 MOVZ W0, 0x18
	0x032348B8 MOV X1, X31
	0x032348BC BL 0x339D764
	0x032348C0 MOV X0, X20
	0x032348C4 MOV X1, X31
	0x032348C8 BL 0x3225708

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call StringBuilder.Append, X0, X1
	005 Move X0, X31
	006 Call Environment.get_NewLine
	007 Move X1, X0
	008 Move X0, X19
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Call StringBuilder.Append, X0, X1
	012 Return X0

Method: System.Void CopyTo(System.Int32 sourceIndex, System.Span`1<System.Char> destination, System.Int32 count)

Disassembly:
	0x032338F4 MOV W23, W1
	0x032338F8 MOV X24, X0
	0x032338FC TBNZ X8, 0x0, 0x3233920
	0x03233900 ADRP X0, 0xEEF000
	0x03233904 LDR X0, [X0 + 0x2C8]
	0x03233908 BL 0x1C16CF4
	0x0323390C ADRP X0, 0xEEF000
	0x03233910 LDR X0, [X0 + 0x588]
	0x03233914 BL 0x1C16CF4
	0x03233918 MOVZ W8, 0x1
	0x0323391C STRB W8, [X25 + 0x3DD]
	0x03233920 CMP W19, 0x1
	0x03233924 B.LT 0x323399C
	0x03233928 CBZ X24, 0x32339B0
	0x0323392C LDR W8, [X24 + 0x18]
	0x03233930 SUBS W9, W8, W23
	0x03233934 B.CC 0x32339B4
	0x03233938 CMP W9, W19
	0x0323393C B.LT 0x32339B4
	0x03233940 SUBS W9, W21, W20
	0x03233944 B.CC 0x32339D4
	0x03233948 CMP W9, W19
	0x0323394C B.LT 0x32339D4
	0x03233950 CMP W8, W23
	0x03233954 B.LS 0x3233A30
	0x03233958 ADRP X8, 0xEEF000
	0x0323395C LDR X8, [X8 + 0x2C8]
	0x03233960 MOV X0, X22
	0x03233964 MOV X1, X21
	0x03233968 LDR X2, [X8]
	0x0323396C ADD X8, X24, W23, 0x1, SXTW
	0x03233970 ADD X23, X8, 0x20
	0x03233974 BL 0x2218CFC
	0x03233978 ADD X0, X0, W20, 0x1, SXTW
	0x0323397C MOV X1, X23
	0x03233980 MOV W2, W19
	0x03233984 LDP X20, X19, [X31 + 0x30]
	0x03233988 LDP X22, X21, [X31 + 0x20]
	0x0323398C LDP X24, X23, [X31 + 0x10]
	0x03233990 MOV X3, X31
	0x03233994 LDP X30, X25, [X31], #0x40
	0x03233998 B 0x3227300
	0x0323399C LDP X20, X19, [X31 + 0x30]
	0x032339A0 LDP X22, X21, [X31 + 0x20]
	0x032339A4 LDP X24, X23, [X31 + 0x10]
	0x032339A8 LDP X30, X25, [X31], #0x40
	0x032339AC RET
	0x032339B0 BL 0x1C16F20
	0x032339B4 ADRP X0, 0xEC8000
	0x032339B8 LDR X0, [X0 + 0x760]
	0x032339BC BL 0x1C16D08
	0x032339C0 BL 0x1C16F10
	0x032339C4 MOV X19, X0
	0x032339C8 ADRP X0, 0xEEF000
	0x032339CC LDR X0, [X0 + 0x280]
	0x032339D0 B 0x32339F0
	0x032339D4 ADRP X0, 0xEC8000
	0x032339D8 LDR X0, [X0 + 0x760]
	0x032339DC BL 0x1C16D08
	0x032339E0 BL 0x1C16F10
	0x032339E4 MOV X19, X0
	0x032339E8 ADRP X0, 0xEEF000
	0x032339EC LDR X0, [X0 + 0x288]
	0x032339F0 BL 0x1C16D08
	0x032339F4 MOV X20, X0
	0x032339F8 ADRP X0, 0xEE8000
	0x032339FC LDR X0, [X0 + 0x660]
	0x03233A00 BL 0x1C16D08
	0x03233A04 MOV X2, X0
	0x03233A08 MOV X0, X19
	0x03233A0C MOV X1, X20
	0x03233A10 MOV X3, X31
	0x03233A14 BL 0x3311888
	0x03233A18 ADRP X0, 0xEEF000
	0x03233A1C LDR X0, [X0 + 0x590]
	0x03233A20 BL 0x1C16D08
	0x03233A24 MOV X1, X0
	0x03233A28 MOV X0, X19
	0x03233A2C BL 0x1C16DEC
	0x03233A30 BL 0x1C16F28
	0x03233A34 SUB X31, X31, 0x30
	0x03233A38 STP X30, X31, [X31 + 0x10]
	0x03233A3C STP X20, X19, [X31 + 0x20]
	0x03233A40 STR W31, [X31 + 0xC]
	0x03233A44 TBNZ X2, 0x1F, 0x3233AAC
	0x03233A48 TBNZ X1, 0x1F, 0x3233ADC
	0x03233A4C LDP W9, W8, [X0 + 0x20]
	0x03233A50 MOV X19, X0
	0x03233A54 ADD W8, W9, W8
	0x03233A58 SUB W9, W8, W1
	0x03233A5C CMP W9, W2
	0x03233A60 B.LT 0x3233B0C
	0x03233A64 CBNZ W1, 0x3233A80
	0x03233A68 CMP W8, W2
	0x03233A6C B.NE 0x3233A80
	0x03233A70 MOV X0, X19
	0x03233A74 MOV W1, W31
	0x03233A78 BL 0x3232ADC
	0x03233A7C B 0x3233A98
	0x03233A80 CMP W2, 0x1
	0x03233A84 B.LT 0x3233A98
	0x03233A88 ADD X3, X31, 0x18
	0x03233A8C ADD X4, X31, 0xC
	0x03233A90 MOV X0, X19
	0x03233A94 BL 0x3233B68
	0x03233A98 MOV X0, X19
	0x03233A9C LDP X20, X19, [X31 + 0x20]
	0x03233AA0 LDR X30, [X31 + 0x10]
	0x03233AA4 ADD X31, X31, 0x30
	0x03233AA8 RET
	0x03233AAC ADRP X0, 0xEC8000
	0x03233AB0 LDR X0, [X0 + 0x760]
	0x03233AB4 BL 0x1C16D08
	0x03233AB8 BL 0x1C16F10
	0x03233ABC MOV X19, X0

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X24, 0x11AA000
	012 Move W8, [X24+977]
	013 Move W19, W4
	014 Move X20, X3
	015 Move X21, X2
	016 Move W23, W1
	017 Move X22, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xEC1000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+977], W8
	027 Move TEMP, X19
	028 And TEMP, TEMP, -2147483648
	029 Compare TEMP, -2147483648
	030 JumpIfEqual {82}
	031 Move W9, [X22+32]
	032 Move W8, [X22+36]
	033 Add W8, W9, W8
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Subtract W8, W8, W19
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X26, 0xEC1000
	039 Move X26, [X26+1448]
	040 Add W27, W19, W23
	041 Move W23, W19
	042 Compare X22, 0
	043 JumpIfEqual {81}
	044 Move W8, [X22+36]
	045 Subtract W24, W27, W8
	046 Move X0, [X26]
	047 Move W25, [X22+32]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Move W0, W24
	053 Move W1, W25
	054 Move X2, X31
	055 Call Math.Min, X0, X1
	056 Subtract W9, W0, W19
	057 Move X8, [X22+16]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 NotImplemented "Instruction CSEL not yet implemented."
	060 Subtract W23, W23, W5
	061 NotImplemented "Instruction BIC not yet implemented."
	062 Move X0, X8
	063 Move X2, X21
	064 Move X3, X20
	065 Move W4, W23
	066 Subtract W19, W19, W5
	067 Call StringBuilder.ThreadSafeCopy, X0, X1, X2, X3, X4
	068 Move X22, [X22+24]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move X20, [X31+64]
	071 Move X19, [X31+72]
	072 Move X22, [X31+48]
	073 Move X21, [X31+56]
	074 Move X24, [X31+32]
	075 Move X23, [X31+40]
	076 Move X26, [X31+16]
	077 Move X25, [X31+24]
	078 Move X30, [X31+80]
	079 Move X27, [X31+88]
	080 Return 
	081 Call 0x1C17F20
	082 Move X0, 0xEC9000
	083 Move X0, [X0+1888]
	084 Call 0x1C17D08
	085 Call 0x1C17F10
	086 Move X19, X0
	087 Move X0, 0xEE9000
	088 Move X0, [X0+1608]
	089 Call 0x1C17D08
	090 Move X20, X0
	091 Move X0, 0xEF0000
	092 Move X0, [X0+1272]
	093 Move X0, 0xEC9000
	094 Move X0, [X0+1888]
	095 Call 0x1C17D08
	096 Call 0x1C17F10
	097 Move X19, X0
	098 Move X0, 0xEF0000
	099 Move X0, [X0+640]
	100 Call 0x1C17D08
	101 Move X20, X0
	102 Move X0, 0xEE9000
	103 Move X0, [X0+1632]
	104 Call 0x1C17D08
	105 Move X2, X0
	106 Move X0, X19
	107 Move X1, X20
	108 Move X3, X31
	109 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	110 Move X0, 0xEC9000
	111 Move X0, [X0+1400]
	112 Call 0x1C17D08
	113 Call 0x1C17F10
	114 Move X19, X0
	115 Move X0, 0xEF0000
	116 Move X0, [X0+1280]
	117 Call 0x1C17D08
	118 Move X1, X0
	119 Move X0, X19
	120 Move X2, X31
	121 Call ArgumentException..ctor, X0, X1
	122 Move X0, 0xEF0000
	123 Move X0, [X0+1288]
	124 Call 0x1C17D08
	125 Move X1, X0
	126 Move X0, X19
	127 Call 0x1C17DEC

Method: System.Text.StringBuilder Remove(System.Int32 startIndex, System.Int32 length)

Disassembly:
	0x03234A34 MOV X2, X21
	0x03234A38 STR X12, [X31 + 0x28]
	0x03234A3C BLR X8
	0x03234A40 MOV X19, X0
	0x03234A44 CBNZ X0, 0x3234C90
	0x03234A48 ADRP X8, 0xEEE000
	0x03234A4C LDR X8, [X8 + 0x5F8]
	0x03234A50 MOV X0, X21
	0x03234A54 LDR X1, [X8]
	0x03234A58 BL 0x1C16E00
	0x03234A5C LDR W9, [X31 + 0x58]
	0x03234A60 CMP W29, 0x0
	0x03234A64 CSET W8, NE
	0x03234A68 BIC W8, W8, W9, 0x0
	0x03234A6C TBNZ X8, 0x0, 0x3234B98
	0x03234A70 MOV X21, X0
	0x03234A74 CBZ X0, 0x3234B98
	0x03234A78 ADRP X8, 0x11A8000
	0x03234A7C LDRB W8, [X8 + 0x423]
	0x03234A80 CBNZ W8, 0x3234A9C
	0x03234A84 ADRP X0, 0xEEE000
	0x03234A88 LDR X0, [X0 + 0x578]
	0x03234A8C BL 0x1C16CF4
	0x03234A90 ADRP X8, 0x11A8000
	0x03234A94 MOVZ W9, 0x1
	0x03234A98 STRB W9, [X8 + 0x423]
	0x03234A9C LDR X19, [X25 + 0x10]
	0x03234AA0 CBZ X19, 0x3234D18
	0x03234AA4 LDRSW X12, [X25 + 0x20]
	0x03234AA8 LDR W26, [X19 + 0x18]
	0x03234AAC CMP W12, W26
	0x03234AB0 B.LS 0x3234AC4
	0x03234AB4 MOV X0, X31
	0x03234AB8 MOV X25, X12
	0x03234ABC BL 0x339D6EC
	0x03234AC0 MOV X12, X25
	0x03234AC4 LDR X8, [X21]
	0x03234AC8 ADRP X10, 0xEEE000
	0x03234ACC SUB W2, W26, W12
	0x03234AD0 LDRH W9, [X8 + 0x12E]
	0x03234AD4 LDR X10, [X10 + 0x5F8]
	0x03234AD8 LDR X1, [X10]
	0x03234ADC CBZ X9, 0x3234B00
	0x03234AE0 LDR X10, [X8 + 0xB0]
	0x03234AE4 ADD X10, X10, 0x8
	0x03234AE8 LDUR X11, [X10 - 0x8]
	0x03234AEC CMP X11, X1
	0x03234AF0 B.EQ 0x3234B28
	0x03234AF4 SUBS X9, X9, 0x1
	0x03234AF8 ADD X10, X10, 0x10
	0x03234AFC B.NE 0x3234AE8
	0x03234B00 MOV X0, X21
	0x03234B04 STR X2, [X31]
	0x03234B08 MOV W2, W31
	0x03234B0C MOV X25, X21
	0x03234B10 MOV X21, X12
	0x03234B14 BL 0x1C5C788
	0x03234B18 LDR X2, [X31]
	0x03234B1C MOV X12, X21
	0x03234B20 MOV X21, X25
	0x03234B24 B 0x3234B34
	0x03234B28 LDRSW X9, [X10]
	0x03234B2C ADD X8, X8, X9, 0x4, LSL
	0x03234B30 ADD X0, X8, 0x138
	0x03234B34 LDP X8, X7, [X0]
	0x03234B38 LDR X4, [X31 + 0x38]
	0x03234B3C LDR X5, [X31 + 0x50]
	0x03234B40 LDR X6, [X31 + 0x20]
	0x03234B44 ADD X9, X19, X12, 0x1, LSL
	0x03234B48 ADD X1, X9, 0x20
	0x03234B4C ADD X3, X31, 0x5C
	0x03234B50 MOV X0, X21
	0x03234B54 BLR X8
	0x03234B58 LDR X25, [X31 + 0x30]
	0x03234B5C TBZ X0, 0x0, 0x3234B98
	0x03234B60 LDR W9, [X31 + 0x5C]
	0x03234B64 LDR W8, [X25 + 0x20]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X31
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move [X31+12], W31
	007 Move TEMP, X2
	008 And TEMP, TEMP, -2147483648
	009 Compare TEMP, -2147483648
	010 JumpIfEqual {38}
	011 Move TEMP, X1
	012 And TEMP, TEMP, -2147483648
	013 Compare TEMP, -2147483648
	014 JumpIfEqual {49}
	015 Move W9, [X0+32]
	016 Move W8, [X0+36]
	017 Move X19, X0
	018 Add W8, W9, W8
	019 Subtract W9, W8, W1
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Compare W1, 0
	022 JumpIfNotEqual {27}
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X0, X19
	025 Move W1, W31
	026 Call StringBuilder.set_Length, X0, X1
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Add X3, X31, 24
	029 Add X4, X31, 12
	030 Move X0, X19
	031 Call StringBuilder.Remove, X0, X1, X2, X3, X4
	032 Move X0, X19
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X30, [X31+16]
	036 Add X31, X31, 48
	037 Return X0
	038 Move X0, 0xEC8000
	039 Move X0, [X0+1888]
	040 Call 0x1C17D08
	041 Call 0x1C17F10
	042 Move X19, X0
	043 Move X0, 0xEC8000
	044 Move X0, [X0+1896]
	045 Call 0x1C17D08
	046 Move X20, X0
	047 Move X0, 0xEEF000
	048 Move X0, [X0]
	049 Move X0, 0xEC8000
	050 Move X0, [X0+1888]
	051 Call 0x1C17D08
	052 Call 0x1C17F10
	053 Move X19, X0
	054 Move X0, 0xEE8000
	055 Move X0, [X0+1624]
	056 Call 0x1C17D08
	057 Move X20, X0
	058 Move X0, 0xEEF000
	059 Move X0, [X0+216]
	060 Move X0, 0xEC8000
	061 Move X0, [X0+1888]
	062 Call 0x1C17D08
	063 Call 0x1C17F10
	064 Move X19, X0
	065 Move X0, 0xEC8000
	066 Move X0, [X0+1896]
	067 Call 0x1C17D08
	068 Move X20, X0
	069 Move X0, 0xEE8000
	070 Move X0, [X0+1632]
	071 Call 0x1C17D08
	072 Move X2, X0
	073 Move X0, X19
	074 Move X1, X20
	075 Move X3, X31
	076 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	077 Move X0, 0xEEF000
	078 Move X0, [X0+1432]
	079 Call 0x1C17D08
	080 Move X1, X0
	081 Move X0, X19
	082 Call 0x1C17DEC

Method: System.Text.StringBuilder Append(System.Boolean value)

Disassembly:
	0x03234CB8 BL 0x3232D24
	0x03234CBC MOV X0, X25
	0x03234CC0 MOV X1, X19
	0x03234CC4 BL 0x32333E0
	0x03234CC8 CMP W21, 0x1
	0x03234CCC B.LT 0x323443C
	0x03234CD0 LDR W8, [X31 + 0x58]
	0x03234CD4 EOR W8, W8, 0x1
	0x03234CD8 CBNZ W8, 0x323443C
	0x03234CDC MOVZ W1, 0x20
	0x03234CE0 MOV X0, X25
	0x03234CE4 MOV W2, W21
	0x03234CE8 BL 0x3232D24
	0x03234CEC B 0x323443C
	0x03234CF0 MOV X0, X25
	0x03234CF4 LDP X20, X19, [X31 + 0xB0]
	0x03234CF8 LDP X22, X21, [X31 + 0xA0]
	0x03234CFC LDP X24, X23, [X31 + 0x90]
	0x03234D00 LDP X26, X25, [X31 + 0x80]
	0x03234D04 LDP X28, X27, [X31 + 0x70]
	0x03234D08 LDP X29, X30, [X31 + 0x60]
	0x03234D0C ADD X31, X31, 0xC0
	0x03234D10 RET
	0x03234D14 BL 0x3234F64
	0x03234D18 BL 0x1C16F20
	0x03234D1C ADRP X0, 0xEEC000
	0x03234D20 LDR X0, [X0 + 0xC08]
	0x03234D24 BL 0x1C16D08
	0x03234D28 BL 0x1C16F10
	0x03234D2C MOV X19, X0

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 And W9, W1, 1
	007 Move X20, 0x11A9000
	008 Move [X31+12], W9
	009 Move X21, 0xEC0000
	010 Move W8, [X20+978]
	011 Move X21, [X21+2904]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xEC0000
	018 Move X0, [X0+2904]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+978], W8
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Add X0, X31, 12
	028 Move X1, X31
	029 Call Boolean.ToString, X0
	030 Move X1, X0
	031 Move X0, X19
	032 Call StringBuilder.Append, X0, X1
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X30, [X31+16]
	036 Move X21, [X31+24]
	037 Add X31, X31, 48
	038 Return X0

Method: System.Text.StringBuilder Append(System.Char value)

Disassembly:
	0x03234D30 ADRP X0, 0xEEE000
	0x03234D34 LDR X0, [X0 + 0x600]
	0x03234D38 BL 0x1C16D08
	0x03234D3C MOV X1, X0
	0x03234D40 MOV X0, X19
	0x03234D44 MOV X2, X31
	0x03234D48 BL 0x33674A0
	0x03234D4C ADRP X0, 0xEEE000
	0x03234D50 LDR X0, [X0 + 0x608]
	0x03234D54 BL 0x1C16D08
	0x03234D58 MOV X1, X0
	0x03234D5C MOV X0, X19
	0x03234D60 BL 0x1C16DEC
	0x03234D64 ADRP X0, 0xEC4000
	0x03234D68 LDR X0, [X0 + 0x528]
	0x03234D6C BL 0x1C16D08
	0x03234D70 BL 0x1C16F10
	0x03234D74 MOV X19, X0
	0x03234D78 ADRP X0, 0xEEE000
	0x03234D7C LDR X0, [X0 + 0xA0]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {17}
	005 NotImplemented "Instruction LDRSW not yet implemented."
	006 Move W10, [X8+24]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Add W11, W9, 1
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move [X0+32], W11
	011 Add X8, X8, X9
	012 NotImplemented "Instruction STRH not yet implemented."
	013 Move W2, 1
	014 Call StringBuilder.Append, X0, X1, X2
	015 Move X30, [X31+16]
	016 Return X0
	017 Call 0x1C17F20
	018 Call 0x1C17F28

Method: System.Text.StringBuilder Append(System.Byte value)

Disassembly:
	0x03234D80 BL 0x1C16D08
	0x03234D84 MOV X1, X0
	0x03234D88 MOV X0, X19
	0x03234D8C MOV X2, X31
	0x03234D90 BL 0x330E100
	0x03234D94 B 0x3234D4C
	0x03234D98 SUB X31, X31, 0x60
	0x03234D9C STR X30, [X31 + 0x40]
	0x03234DA0 STP X20, X19, [X31 + 0x50]
	0x03234DA4 MOV X19, X1
	0x03234DA8 MOV X20, X0
	0x03234DAC MOVI V0.2D, 0x0
	0x03234DB0 ADD X0, X31, 0x20
	0x03234DB4 MOV X1, X2
	0x03234DB8 MOV X2, X3
	0x03234DBC MOV X3, X31
	0x03234DC0 STP V0, V0, [X31 + 0x20]
	0x03234DC4 BL 0x338CC1C
	0x03234DC8 LDP V0, V1, [X31 + 0x20]
	0x03234DCC ADD X3, X31, 0x0
	0x03234DD0 MOV X0, X20
	0x03234DD4 MOV X1, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11A9000
	007 Move X22, 0xEEF000
	008 Move W8, [X21+979]
	009 Move X22, [X22+1440]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEEF000
	017 Move X0, [X0+1440]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+979], W8
	021 Move X2, [X22]
	022 Move X0, X20
	023 Move W1, W19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x228D700, X0, X1
	030 Return X0

Method: System.Text.StringBuilder Append(System.Int16 value)

Disassembly:
	0x03234DD8 MOV X2, X19
	0x03234DDC STP V0, V1, [X31]
	0x03234DE0 BL 0x323427C
	0x03234DE4 LDP X20, X19, [X31 + 0x50]
	0x03234DE8 LDR X30, [X31 + 0x40]
	0x03234DEC ADD X31, X31, 0x60
	0x03234DF0 RET
	0x03234DF4 SUB X31, X31, 0x60
	0x03234DF8 STR X30, [X31 + 0x40]
	0x03234DFC STP X20, X19, [X31 + 0x50]
	0x03234E00 MOV X19, X1
	0x03234E04 MOV X20, X0
	0x03234E08 MOVI V0.2D, 0x0
	0x03234E0C ADD X0, X31, 0x20
	0x03234E10 MOV X1, X2
	0x03234E14 MOV X2, X3
	0x03234E18 MOV X3, X4
	0x03234E1C MOV X4, X31
	0x03234E20 STP V0, V0, [X31 + 0x20]
	0x03234E24 BL 0x338CC94
	0x03234E28 LDP V0, V1, [X31 + 0x20]
	0x03234E2C ADD X3, X31, 0x0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11A9000
	007 Move X22, 0xEEF000
	008 Move W8, [X21+980]
	009 Move X22, [X22+1448]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEEF000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+980], W8
	021 Move X2, [X22]
	022 Move X0, X20
	023 Move W1, W19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call StringBuilder.AppendSpanFormattable, X0, X1
	030 Return X0

Method: System.Text.StringBuilder Append(System.Int32 value)

Disassembly:
	0x03234E30 MOV X0, X20
	0x03234E34 MOV X1, X31
	0x03234E38 MOV X2, X19
	0x03234E3C STP V0, V1, [X31]
	0x03234E40 BL 0x323427C
	0x03234E44 LDP X20, X19, [X31 + 0x50]
	0x03234E48 LDR X30, [X31 + 0x40]
	0x03234E4C ADD X31, X31, 0x60
	0x03234E50 RET
	0x03234E54 SUB X31, X31, 0x60
	0x03234E58 STR X30, [X31 + 0x40]
	0x03234E5C STP X20, X19, [X31 + 0x50]
	0x03234E60 MOV X19, X1
	0x03234E64 CBZ X2, 0x3234EB0
	0x03234E68 MOV X20, X0
	0x03234E6C MOVI V0.2D, 0x0
	0x03234E70 ADD X0, X31, 0x20
	0x03234E74 MOV X1, X2
	0x03234E78 MOV X2, X31
	0x03234E7C STP V0, V0, [X31 + 0x20]
	0x03234E80 BL 0x338CD18
	0x03234E84 LDP V0, V1, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11A9000
	007 Move X22, 0xEEF000
	008 Move W8, [X21+981]
	009 Move X22, [X22+1456]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEEF000
	017 Move X0, [X0+1456]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+981], W8
	021 Move X2, [X22]
	022 Move X0, X20
	023 Move W1, W19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call StringBuilder.AppendSpanFormattable, X0, X1
	030 Return X0

Method: System.Text.StringBuilder Append(System.Double value)

Disassembly:
	0x03234E88 ADD X3, X31, 0x0
	0x03234E8C MOV X0, X20
	0x03234E90 MOV X1, X31
	0x03234E94 MOV X2, X19
	0x03234E98 STP V0, V1, [X31]
	0x03234E9C BL 0x323427C
	0x03234EA0 LDP X20, X19, [X31 + 0x50]
	0x03234EA4 LDR X30, [X31 + 0x40]
	0x03234EA8 ADD X31, X31, 0x60
	0x03234EAC RET
	0x03234EB0 ADRP X8, 0xEEE000
	0x03234EB4 ADRP X9, 0xEEE000
	0x03234EB8 LDR X8, [X8 + 0x88]
	0x03234EBC LDR X9, [X9 + 0xA0]
	0x03234EC0 CMP X19, 0x0
	0x03234EC4 CSEL X0, X9, X8, EQ
	0x03234EC8 BL 0x1C16D08
	0x03234ECC MOV X19, X0
	0x03234ED0 ADRP X0, 0xEC4000
	0x03234ED4 LDR X0, [X0 + 0x528]
	0x03234ED8 BL 0x1C16D08
	0x03234EDC BL 0x1C16F10

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11A9000
	007 Move X21, 0xEEF000
	008 Move W8, [X20+982]
	009 Move X21, [X21+1464]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEEF000
	017 Move X0, [X0+1464]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+982], W8
	021 Move X1, [X21]
	022 Move X0, X19
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X30, [X31+16]
	026 Move X21, [X31+24]
	027 Move V0, V8
	028 Move V8, [X31+48]
	029 Call StringBuilder.AppendSpanFormattable, X0, V0
	030 Return X0

Method: System.Text.StringBuilder Append(System.UInt16 value)

Disassembly:
	0x03234EE0 MOV X1, X19
	0x03234EE4 MOV X2, X31
	0x03234EE8 MOV X20, X0
	0x03234EEC BL 0x330E100
	0x03234EF0 ADRP X0, 0xEEE000
	0x03234EF4 LDR X0, [X0 + 0x610]
	0x03234EF8 BL 0x1C16D08
	0x03234EFC MOV X1, X0
	0x03234F00 MOV X0, X20
	0x03234F04 BL 0x1C16DEC
	0x03234F08 SUB X31, X31, 0x60
	0x03234F0C STP X30, X21, [X31 + 0x40]
	0x03234F10 STP X20, X19, [X31 + 0x50]
	0x03234F14 MOV X19, X2
	0x03234F18 MOV X20, X1
	0x03234F1C MOV X21, X0
	0x03234F20 MOVI V0.2D, 0x0
	0x03234F24 ADD X0, X31, 0x20
	0x03234F28 MOV X1, X3
	0x03234F2C MOV X2, X31
	0x03234F30 STP V0, V0, [X31 + 0x20]
	0x03234F34 BL 0x338CBA8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11A9000
	007 Move X22, 0xEEF000
	008 Move W8, [X21+983]
	009 Move X22, [X22+1472]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEEF000
	017 Move X0, [X0+1472]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+983], W8
	021 Move X2, [X22]
	022 Move X0, X20
	023 Move W1, W19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call StringBuilder.AppendSpanFormattable, X0, X1
	030 Return X0

Method: System.Text.StringBuilder Append(System.UInt32 value)

Disassembly:
	0x03234F38 LDP V0, V1, [X31 + 0x20]
	0x03234F3C ADD X3, X31, 0x0
	0x03234F40 MOV X0, X21
	0x03234F44 MOV X1, X20
	0x03234F48 MOV X2, X19
	0x03234F4C STP V0, V1, [X31]
	0x03234F50 BL 0x323427C
	0x03234F54 LDP X20, X19, [X31 + 0x50]
	0x03234F58 LDP X30, X21, [X31 + 0x40]
	0x03234F5C ADD X31, X31, 0x60
	0x03234F60 RET
	0x03234F64 STP X30, X19, [X31 - 0x10]!
	0x03234F68 ADRP X0, 0xEEC000
	0x03234F6C LDR X0, [X0 + 0xC08]
	0x03234F70 BL 0x1C16D08
	0x03234F74 BL 0x1C16F10
	0x03234F78 MOV X19, X0
	0x03234F7C ADRP X0, 0xEEE000
	0x03234F80 LDR X0, [X0 + 0x618]
	0x03234F84 BL 0x1C16D08
	0x03234F88 MOV X1, X0
	0x03234F8C MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11A9000
	007 Move X22, 0xEEF000
	008 Move W8, [X21+984]
	009 Move X22, [X22+1480]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEEF000
	017 Move X0, [X0+1480]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+984], W8
	021 Move X2, [X22]
	022 Move X0, X20
	023 Move W1, W19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call StringBuilder.AppendSpanFormattable, X0, X1
	030 Return X0

Method: System.Text.StringBuilder AppendSpanFormattable(T value)

Disassembly:
	0x0228D700 MOV W1, W24
	0x0228D704 MOV X2, X31
	0x0228D708 BL 0x322B484
	0x0228D70C MOV X1, X31
	0x0228D710 BL 0x337BA10
	0x0228D714 ADD W28, W0, 0x1
	0x0228D718 MOV X0, X27
	0x0228D71C MOV W1, W31
	0x0228D720 MOV W2, W24
	0x0228D724 MOV X3, X31
	0x0228D728 BL 0x3228DE4
	0x0228D72C STR X0, [X31]
	0x0228D730 ADRP X29, 0x1E66000
	0x0228D734 LDR X29, [X29 + 0xE18]
	0x0228D738 LDR X8, [X19 + 0x38]
	0x0228D73C LDR X1, [X8 + 0x8]
	0x0228D740 LDRB W8, [X1 + 0x135]
	0x0228D744 TBNZ X8, 0x0, 0x228D754
	0x0228D748 MOV X0, X1
	0x0228D74C BL 0x1C5C684
	0x0228D750 MOV X1, X0
	0x0228D754 LDR X8, [X21]
	0x0228D758 LDRH W9, [X8 + 0x12E]
	0x0228D75C CBZ X9, 0x228D780
	0x0228D760 LDR X10, [X8 + 0xB0]
	0x0228D764 ADD X10, X10, 0x8
	0x0228D768 LDUR X11, [X10 - 0x8]
	0x0228D76C CMP X11, X1
	0x0228D770 B.EQ 0x228D790
	0x0228D774 SUBS X9, X9, 0x1
	0x0228D778 ADD X10, X10, 0x10
	0x0228D77C B.NE 0x228D768
	0x0228D780 MOV X0, X21
	0x0228D784 MOV W2, W31
	0x0228D788 BL 0x1C5C788

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move [X31+12], W1
	005 Move X8, [X2+56]
	006 Move X20, X2
	007 Move X19, X0
	008 Compare X8, 0
	009 JumpIfNotEqual {18}
	010 Move X0, 0x1E69000
	011 Move X0, [X0+3144]
	012 Call 0x1C17CF4
	013 Move X8, [X20+56]
	014 Compare X8, 0
	015 JumpIfNotEqual {18}
	016 Move X0, X20
	017 Call 0x1C5D6E0
	018 Move X8, 0x1E69000
	019 Move X8, [X8+3144]
	020 Move X0, [X8]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X31
	026 Call CultureInfo.get_CurrentCulture
	027 Move X8, [X20+56]
	028 Move X2, X0
	029 Add X0, X31, 12
	030 Move X1, X31
	031 Move X3, [X8+8]
	032 Call Byte.ToString, X0, X1, X2
	033 Move X1, X0
	034 Move X0, X19
	035 Move X2, X31
	036 Call StringBuilder.Append, X0, X1
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Return X0

Method: System.Text.StringBuilder Append(System.Object value)

Disassembly:
	0x03234F90 MOV X2, X31
	0x03234F94 BL 0x33674A0
	0x03234F98 ADRP X0, 0xEEE000
	0x03234F9C LDR X0, [X0 + 0x620]
	0x03234FA0 BL 0x1C16D08
	0x03234FA4 MOV X1, X0
	0x03234FA8 MOV X0, X19
	0x03234FAC BL 0x1C16DEC
	0x03234FB0 LDP W9, W8, [X0 + 0x20]
	0x03234FB4 MOV W3, W31
	0x03234FB8 ADD W4, W9, W8
	0x03234FBC B 0x3234FC0
	0x03234FC0 SUB X31, X31, 0x60
	0x03234FC4 STP X30, X27, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Compare X1, 0
	005 JumpIfEqual {15}
	006 Move X8, [X1]
	007 Move X0, X1
	008 Move X9, [X8+360]
	009 Move X8, [X8+368]
	010 Move X1, X8
	011 NotImplemented "Instruction BLR not yet implemented."
	012 Move X1, X0
	013 Move X0, X19
	014 Call StringBuilder.Append, X0, X1
	015 Move X0, X19
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Return X0

Method: System.Text.StringBuilder Append(System.Char[] value)

Disassembly:
	0x03234FC8 STP X26, X25, [X31 + 0x20]
	0x03234FCC STP X24, X23, [X31 + 0x30]
	0x03234FD0 STP X22, X21, [X31 + 0x40]
	0x03234FD4 STP X20, X19, [X31 + 0x50]
	0x03234FD8 ADRP X23, 0x11A8000
	0x03234FDC LDRB W8, [X23 + 0x3DB]
	0x03234FE0 MOV W19, W4
	0x03234FE4 MOV W24, W3
	0x03234FE8 MOV X22, X2
	0x03234FEC MOV X20, X1

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {11}
	004 Move X2, [X1+24]
	005 Compare X2, 0
	006 JumpIfEqual {11}
	007 Compare W2, 0
	008 JumpIfEqual {13}
	009 Add X1, X1, 32
	010 Call StringBuilder.Append, X0, X1, X2
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F28

Method: System.Text.StringBuilder Append(System.ReadOnlySpan`1<System.Char> value)

Disassembly:
	0x03234FF0 MOV X21, X0
	0x03234FF4 TBNZ X8, 0x0, 0x3235024
	0x03234FF8 ADRP X0, 0xEE8000
	0x03234FFC LDR X0, [X0 + 0xED0]
	0x03235000 BL 0x1C16CF4
	0x03235004 ADRP X0, 0xEBF000
	0x03235008 LDR X0, [X0 + 0xE58]
	0x0323500C BL 0x1C16CF4
	0x03235010 ADRP X0, 0xEC0000
	0x03235014 LDR X0, [X0 + 0x278]
	0x03235018 BL 0x1C16CF4
	0x0323501C MOVZ W8, 0x1
	0x03235020 STRB W8, [X23 + 0x3DB]
	0x03235024 STR X31, [X31 + 0x8]
	0x03235028 LDP W9, W8, [X21 + 0x20]
	0x0323502C ADD W9, W9, W8
	0x03235030 CMP W9, W24
	0x03235034 B.CC 0x32351DC
	0x03235038 TBNZ X19, 0x1F, 0x32351FC
	0x0323503C SUB W9, W9, W19
	0x03235040 CMP W9, W24
	0x03235044 B.LT 0x32351FC
	0x03235048 CBZ X20, 0x3235244
	0x0323504C LDR W9, [X20 + 0x10]
	0x03235050 CBZ W9, 0x3235278
	0x03235054 CBNZ X22, 0x3235070
	0x03235058 ADRP X9, 0xEC0000
	0x0323505C LDR X9, [X9 + 0x278]
	0x03235060 LDR X9, [X9]
	0x03235064 LDR X9, [X9 + 0xB8]
	0x03235068 LDR X22, [X9]
	0x0323506C CBZ X22, 0x32351B4
	0x03235070 CMP W8, W24
	0x03235074 MOV X23, X21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11A9000
	007 Move W8, [X22+985]
	008 Move X19, X2
	009 Move X21, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xEEE000
	016 Move X0, [X0+32]
	017 Call 0x1C17CF4
	018 Move X0, 0xEEE000
	019 Move X0, [X0+40]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+985], W8
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X8, 0xEEE000
	025 Move X8, [X8+32]
	026 Move X0, X21
	027 Move X1, X19
	028 Move X2, [X8]
	029 Call MemoryMarshal.GetReference, X0
	030 Move X1, X0
	031 Move X0, X20
	032 Move W2, W19
	033 Call StringBuilder.Append, X0, X1, X2
	034 Move X0, X20
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: System.Text.StringBuilder Insert(System.Int32 index, System.String value)

Disassembly:
	0x03235078 STR X31, [X31 + 0x8]
	0x0323507C B.LE 0x3235098
	0x03235080 MOV X23, X21
	0x03235084 LDR X23, [X23 + 0x18]
	0x03235088 CBZ X23, 0x32351B4
	0x0323508C LDR W8, [X23 + 0x24]
	0x03235090 CMP W8, W24
	0x03235094 B.GT 0x3235084
	0x03235098 ADRP X26, 0xEBF000
	0x0323509C ADRP X27, 0xEE7000
	0x032350A0 LDR X26, [X26 + 0xE58]
	0x032350A4 LDR X27, [X27 + 0xED0]
	0x032350A8 SUB W24, W24, W8
	0x032350AC MOV W25, W31
	0x032350B0 CMP W19, 0x0
	0x032350B4 B.LE 0x32351B8
	0x032350B8 MOV X0, X21
	0x032350BC MOV X1, X23
	0x032350C0 MOV W2, W24
	0x032350C4 MOV W3, W19
	0x032350C8 MOV X4, X20
	0x032350CC BL 0x32352D4
	0x032350D0 TBZ X0, 0x0, 0x3235110
	0x032350D4 LDR X0, [X31 + 0x8]
	0x032350D8 CBZ X0, 0x3235120
	0x032350DC LDR W8, [X0 + 0x18]
	0x032350E0 CMP W25, W8
	0x032350E4 B.LT 0x3235134
	0x032350E8 ADD W8, W8, W8, 0x1, LSL
	0x032350EC CMP W8, 0x0
	0x032350F0 LDR X2, [X27]
	0x032350F4 CINC W8, W8, LT
	0x032350F8 SBFM W8, W8, 0x1, 0x1F
	0x032350FC ADD W1, W8, 0x4
	0x03235100 ADD X0, X31, 0x8
	0x03235104 BL 0x2116294
	0x03235108 LDR X0, [X31 + 0x8]
	0x0323510C B 0x3235130
	0x03235110 ADD W24, W24, 0x1
	0x03235114 SUB W19, W19, 0x1
	0x03235118 CBNZ W19, 0x323515C
	0x0323511C B 0x3235168
	0x03235120 LDR X0, [X26]
	0x03235124 MOVZ W1, 0x5

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W9, [X0+32]
	006 Move W8, [X0+36]
	007 Add W8, W9, W8
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move X19, X0
	010 Move X21, X2
	011 Compare X2, 0
	012 JumpIfEqual {21}
	013 Move X0, X31
	014 Move W20, W1
	015 Call RuntimeHelpers.get_OffsetToStringData
	016 Move W3, [X21+16]
	017 Add X2, X21, W0
	018 Move X0, X19
	019 Move W1, W20
	020 Call StringBuilder.Insert, X0, X1, X2, X3
	021 Move X0, X19
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Return X0
	027 Move X0, 0xEC7000
	028 Move X0, [X0+1888]
	029 Call 0x1C17D08
	030 Call 0x1C17F10
	031 Move X19, X0
	032 Move X0, 0xECA000
	033 Move X0, [X0+304]
	034 Call 0x1C17D08
	035 Move X20, X0
	036 Move X0, 0xEE7000
	037 Move X0, [X0+1632]
	038 Call 0x1C17D08
	039 Move X2, X0
	040 Move X0, X19
	041 Move X1, X20
	042 Move X3, X31
	043 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	044 Move X0, 0xEEE000
	045 Move X0, [X0+1488]
	046 Call 0x1C17D08
	047 Move X1, X0
	048 Move X0, X19
	049 Call 0x1C17DEC

Method: System.Text.StringBuilder Insert(System.Int32 index, System.Char value)

Disassembly:
	0x032351F8 B 0x3235218
	0x032351FC ADRP X0, 0xEC6000
	0x03235200 LDR X0, [X0 + 0x760]
	0x03235204 BL 0x1C16D08
	0x03235208 BL 0x1C16F10
	0x0323520C MOV X19, X0
	0x03235210 ADRP X0, 0xEE6000
	0x03235214 LDR X0, [X0 + 0x648]
	0x03235218 BL 0x1C16D08
	0x0323521C MOV X20, X0
	0x03235220 ADRP X0, 0xEE6000

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 NotImplemented "Instruction STRH not yet implemented."
	005 Add X2, X31, 12
	006 Move W3, 1
	007 Move X19, X0
	008 Call StringBuilder.Insert, X0, X1, X2, X3
	009 Move X0, X19
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Add X31, X31, 32
	013 Return X0

Method: System.Text.StringBuilder AppendFormat(System.String format, System.Object arg0)

Disassembly:
	0x03235224 LDR X0, [X0 + 0x660]
	0x03235228 BL 0x1C16D08
	0x0323522C MOV X2, X0
	0x03235230 MOV X0, X19
	0x03235234 MOV X1, X20
	0x03235238 MOV X3, X31
	0x0323523C BL 0x3311888
	0x03235240 B 0x32352BC
	0x03235244 ADRP X0, 0xEC3000
	0x03235248 LDR X0, [X0 + 0x528]
	0x0323524C BL 0x1C16D08
	0x03235250 BL 0x1C16F10
	0x03235254 MOV X19, X0
	0x03235258 ADRP X0, 0xEED000
	0x0323525C LDR X0, [X0 + 0x148]
	0x03235260 BL 0x1C16D08
	0x03235264 MOV X1, X0
	0x03235268 MOV X0, X19
	0x0323526C MOV X2, X31
	0x03235270 BL 0x330E100
	0x03235274 B 0x32352BC
	0x03235278 ADRP X0, 0xEC6000

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+80], X20
	004 Move [X31+88], X19
	005 Move X19, X1
	006 Move X20, X0
	007 NotImplemented "Instruction MOVI not yet implemented."
	008 Add X0, X31, 32
	009 Move X1, X2
	010 Move X2, X31
	011 Move [X31+32], V0
	012 Move [X31+40], V0
	013 Call ParamsArray..ctor, X0, X1
	014 Move V0, [X31+32]
	015 Move V1, [X31+48]
	016 Add X3, X31, 0
	017 Move X0, X20
	018 Move X1, X31
	019 Move X2, X19
	020 Move [X31], V0
	021 Move [X31+8], V1
	022 Call StringBuilder.AppendFormatHelper, X0, X1, X2, X3
	023 Move X20, [X31+80]
	024 Move X19, [X31+88]
	025 Move X30, [X31+64]
	026 Add X31, X31, 96
	027 Return X0

Method: System.Text.StringBuilder AppendFormat(System.String format, System.Object arg0, System.Object arg1)

Disassembly:
	0x03235D98 MOV X2, X31
	0x03235D9C MOV X20, X0
	0x03235DA0 BL 0x33FE644
	0x03235DA4 STR X20, [X19 + 0x30]
	0x03235DA8 LDP X20, X19, [X31 + 0x10]
	0x03235DAC LDP X30, X21, [X31], #0x20
	0x03235DB0 RET
	0x03235DB4 STR X30, [X31 - 0x20]!
	0x03235DB8 STP X20, X19, [X31 + 0x10]
	0x03235DBC CBZ X1, 0x3235E1C
	0x03235DC0 TBNZ X3, 0x1F, 0x3235E64
	0x03235DC4 TBNZ X2, 0x1F, 0x3235E64
	0x03235DC8 LDR W8, [X1 + 0x18]
	0x03235DCC SUB W9, W8, W2
	0x03235DD0 CMP W9, W3
	0x03235DD4 B.LT 0x3235ED0
	0x03235DD8 CBZ W3, 0x3235E0C
	0x03235DDC LDR X9, [X0]
	0x03235DE0 LDP X20, X19, [X31 + 0x10]
	0x03235DE4 ADD X10, X1, 0x20
	0x03235DE8 CMP W8, 0x0
	0x03235DEC LDR X5, [X9 + 0x228]
	0x03235DF0 LDR X4, [X9 + 0x230]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+80], X20
	004 Move [X31+88], X19
	005 Move X19, X1
	006 Move X20, X0
	007 NotImplemented "Instruction MOVI not yet implemented."
	008 Add X0, X31, 32
	009 Move X1, X2
	010 Move X2, X3
	011 Move X3, X31
	012 Move [X31+32], V0
	013 Move [X31+40], V0
	014 Call ParamsArray..ctor, X0, X1, X2
	015 Move V0, [X31+32]
	016 Move V1, [X31+48]
	017 Add X3, X31, 0
	018 Move X0, X20
	019 Move X1, X31
	020 Move X2, X19
	021 Move [X31], V0
	022 Move [X31+8], V1
	023 Call StringBuilder.AppendFormatHelper, X0, X1, X2, X3
	024 Move X20, [X31+80]
	025 Move X19, [X31+88]
	026 Move X30, [X31+64]
	027 Add X31, X31, 96
	028 Return X0

Method: System.Text.StringBuilder AppendFormat(System.String format, System.Object arg0, System.Object arg1, System.Object arg2)

Disassembly:
	0x03235DF4 CSEL X8, X31, X10, EQ
	0x03235DF8 ADD X1, X8, W2, 0x1, SXTW
	0x03235DFC MOV W2, W3
	0x03235E00 MOV X3, X31
	0x03235E04 LDR X30, [X31], #0x20
	0x03235E08 BR X5
	0x03235E0C LDP X20, X19, [X31 + 0x10]
	0x03235E10 MOV W0, W31
	0x03235E14 LDR X30, [X31], #0x20
	0x03235E18 RET
	0x03235E1C ADRP X0, 0xEC3000
	0x03235E20 LDR X0, [X0 + 0x528]
	0x03235E24 BL 0x1C16D08
	0x03235E28 BL 0x1C16F10
	0x03235E2C MOV X19, X0
	0x03235E30 ADRP X0, 0xEED000
	0x03235E34 LDR X0, [X0 + 0x2D8]
	0x03235E38 BL 0x1C16D08
	0x03235E3C MOV X20, X0
	0x03235E40 ADRP X0, 0xEED000
	0x03235E44 LDR X0, [X0 + 0x2E0]
	0x03235E48 BL 0x1C16D08
	0x03235E4C MOV X2, X0
	0x03235E50 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+80], X20
	004 Move [X31+88], X19
	005 Move X19, X1
	006 Move X20, X0
	007 NotImplemented "Instruction MOVI not yet implemented."
	008 Add X0, X31, 32
	009 Move X1, X2
	010 Move X2, X3
	011 Move X3, X4
	012 Move X4, X31
	013 Move [X31+32], V0
	014 Move [X31+40], V0
	015 Call ParamsArray..ctor, X0, X1, X2, X3
	016 Move V0, [X31+32]
	017 Move V1, [X31+48]
	018 Add X3, X31, 0
	019 Move X0, X20
	020 Move X1, X31
	021 Move X2, X19
	022 Move [X31], V0
	023 Move [X31+8], V1
	024 Call StringBuilder.AppendFormatHelper, X0, X1, X2, X3
	025 Move X20, [X31+80]
	026 Move X19, [X31+88]
	027 Move X30, [X31+64]
	028 Add X31, X31, 96
	029 Return X0

Method: System.Text.StringBuilder AppendFormat(System.String format, System.Object[] args)

Disassembly:
	0x03235E54 MOV X1, X20
	0x03235E58 MOV X3, X31
	0x03235E5C BL 0x3315F7C
	0x03235E60 B 0x3235F14
	0x03235E64 ADRP X8, 0xEE6000
	0x03235E68 ADRP X9, 0xEC9000
	0x03235E6C LDR X8, [X8 + 0x648]
	0x03235E70 LDR X9, [X9 + 0x130]
	0x03235E74 CMP W2, 0x0
	0x03235E78 CSEL X0, X9, X8, LT
	0x03235E7C BL 0x1C16D08
	0x03235E80 MOV X19, X0
	0x03235E84 ADRP X0, 0xEC6000
	0x03235E88 LDR X0, [X0 + 0x760]
	0x03235E8C BL 0x1C16D08
	0x03235E90 BL 0x1C16F10
	0x03235E94 MOV X20, X0
	0x03235E98 ADRP X0, 0xEE6000
	0x03235E9C LDR X0, [X0 + 0x670]
	0x03235EA0 BL 0x1C16D08
	0x03235EA4 MOV X2, X0
	0x03235EA8 MOV X0, X20
	0x03235EAC MOV X1, X19
	0x03235EB0 MOV X3, X31
	0x03235EB4 BL 0x3311888
	0x03235EB8 ADRP X0, 0xEED000
	0x03235EBC LDR X0, [X0 + 0x658]
	0x03235EC0 BL 0x1C16D08
	0x03235EC4 MOV X1, X0
	0x03235EC8 MOV X0, X20
	0x03235ECC BL 0x1C16DEC
	0x03235ED0 ADRP X0, 0xEC6000
	0x03235ED4 LDR X0, [X0 + 0x760]
	0x03235ED8 BL 0x1C16D08
	0x03235EDC BL 0x1C16F10
	0x03235EE0 MOV X19, X0
	0x03235EE4 ADRP X0, 0xEED000
	0x03235EE8 LDR X0, [X0 + 0x2D8]
	0x03235EEC BL 0x1C16D08
	0x03235EF0 MOV X20, X0
	0x03235EF4 ADRP X0, 0xEED000
	0x03235EF8 LDR X0, [X0 + 0xE0]
	0x03235EFC BL 0x1C16D08
	0x03235F00 MOV X2, X0
	0x03235F04 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+80], X20
	004 Move [X31+88], X19
	005 Move X19, X1
	006 Compare X2, 0
	007 JumpIfEqual {30}
	008 Move X20, X0
	009 NotImplemented "Instruction MOVI not yet implemented."
	010 Add X0, X31, 32
	011 Move X1, X2
	012 Move X2, X31
	013 Move [X31+32], V0
	014 Move [X31+40], V0
	015 Call ParamsArray..ctor, X0, X1
	016 Move V0, [X31+32]
	017 Move V1, [X31+48]
	018 Add X3, X31, 0
	019 Move X0, X20
	020 Move X1, X31
	021 Move X2, X19
	022 Move [X31], V0
	023 Move [X31+8], V1
	024 Call StringBuilder.AppendFormatHelper, X0, X1, X2, X3
	025 Move X20, [X31+80]
	026 Move X19, [X31+88]
	027 Move X30, [X31+64]
	028 Add X31, X31, 96
	029 Return X0
	030 Move X8, 0xEEE000
	031 Move X9, 0xEEE000
	032 Move X8, [X8+136]
	033 Move X9, [X9+160]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 NotImplemented "Instruction CSEL not yet implemented."
	036 Call 0x1C17D08
	037 Move X19, X0
	038 Move X0, 0xEC4000
	039 Move X0, [X0+1320]
	040 Call 0x1C17D08
	041 Call 0x1C17F10
	042 Move X1, X19
	043 Move X2, X31
	044 Move X20, X0
	045 Call ArgumentNullException..ctor, X0, X1
	046 Move X0, 0xEEE000
	047 Move X0, [X0+1552]
	048 Call 0x1C17D08
	049 Move X1, X0
	050 Move X0, X20
	051 Call 0x1C17DEC

Method: System.Text.StringBuilder AppendFormat(System.IFormatProvider provider, System.String format, System.Object arg0)

Disassembly:
	0x03235F08 MOV X1, X20
	0x03235F0C MOV X3, X31
	0x03235F10 BL 0x3311888
	0x03235F14 ADRP X0, 0xEED000
	0x03235F18 LDR X0, [X0 + 0x658]
	0x03235F1C BL 0x1C16D08
	0x03235F20 MOV X1, X0
	0x03235F24 MOV X0, X19
	0x03235F28 BL 0x1C16DEC
	0x03235F2C STR X30, [X31 - 0x20]!
	0x03235F30 STP X20, X19, [X31 + 0x10]
	0x03235F34 CBZ X1, 0x3235F70
	0x03235F38 MOV X20, X0
	0x03235F3C MOV X0, X31
	0x03235F40 MOV X19, X1
	0x03235F44 BL 0x32C1424
	0x03235F48 LDR X8, [X20]
	0x03235F4C LDR W2, [X19 + 0x10]
	0x03235F50 ADD X1, X19, W0, SXTW
	0x03235F54 MOV X0, X20
	0x03235F58 LDR X5, [X8 + 0x228]
	0x03235F5C LDR X4, [X8 + 0x230]
	0x03235F60 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move X19, X2
	007 Move X20, X1
	008 Move X21, X0
	009 NotImplemented "Instruction MOVI not yet implemented."
	010 Add X0, X31, 32
	011 Move X1, X3
	012 Move X2, X31
	013 Move [X31+32], V0
	014 Move [X31+40], V0
	015 Call ParamsArray..ctor, X0, X1
	016 Move V0, [X31+32]
	017 Move V1, [X31+48]
	018 Add X3, X31, 0
	019 Move X0, X21
	020 Move X1, X20
	021 Move X2, X19
	022 Move [X31], V0
	023 Move [X31+8], V1
	024 Call StringBuilder.AppendFormatHelper, X0, X1, X2, X3
	025 Move X20, [X31+80]
	026 Move X19, [X31+88]
	027 Move X30, [X31+64]
	028 Move X21, [X31+72]
	029 Add X31, X31, 96
	030 Return X0

Method: System.Void FormatError()

Disassembly:
	0x03235F64 MOV X3, X31
	0x03235F68 LDR X30, [X31], #0x20
	0x03235F6C BR X5
	0x03235F70 ADRP X0, 0xEC3000
	0x03235F74 LDR X0, [X0 + 0x528]
	0x03235F78 BL 0x1C16D08
	0x03235F7C BL 0x1C16F10
	0x03235F80 MOV X19, X0
	0x03235F84 ADRP X0, 0xEE7000
	0x03235F88 LDR X0, [X0 + 0xCC0]
	0x03235F8C BL 0x1C16D08
	0x03235F90 MOV X1, X0
	0x03235F94 MOV X0, X19
	0x03235F98 MOV X2, X31
	0x03235F9C BL 0x330E100
	0x03235FA0 ADRP X0, 0xEED000
	0x03235FA4 LDR X0, [X0 + 0x660]
	0x03235FA8 BL 0x1C16D08
	0x03235FAC MOV X1, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xEEC000
	004 Move X0, [X0+3080]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xEEE000
	009 Move X0, [X0+1560]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call FormatException..ctor, X0, X1
	015 Move X0, 0xEEE000
	016 Move X0, [X0+1568]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Text.StringBuilder AppendFormatHelper(System.IFormatProvider provider, System.String format, System.ParamsArray args)

Disassembly:
	0x0323527C LDR X0, [X0 + 0x578]
	0x03235280 BL 0x1C16D08
	0x03235284 BL 0x1C16F10
	0x03235288 MOV X19, X0
	0x0323528C ADRP X0, 0xEED000
	0x03235290 LDR X0, [X0 + 0x628]
	0x03235294 BL 0x1C16D08
	0x03235298 MOV X20, X0
	0x0323529C ADRP X0, 0xEED000
	0x032352A0 LDR X0, [X0 + 0x148]
	0x032352A4 BL 0x1C16D08
	0x032352A8 MOV X2, X0
	0x032352AC MOV X0, X19
	0x032352B0 MOV X1, X20
	0x032352B4 MOV X3, X31
	0x032352B8 BL 0x330E16C
	0x032352BC ADRP X0, 0xEED000
	0x032352C0 LDR X0, [X0 + 0x630]
	0x032352C4 BL 0x1C16D08
	0x032352C8 MOV X1, X0
	0x032352CC MOV X0, X19
	0x032352D0 BL 0x1C16DEC
	0x032352D4 STR X30, [X31 - 0x40]!
	0x032352D8 STP X24, X23, [X31 + 0x10]
	0x032352DC STP X22, X21, [X31 + 0x20]
	0x032352E0 STP X20, X19, [X31 + 0x30]
	0x032352E4 CBZ X4, 0x32353A4
	0x032352E8 LDR W8, [X4 + 0x10]
	0x032352EC MOV X19, X4
	0x032352F0 CMP W8, 0x1
	0x032352F4 B.LT 0x3235384
	0x032352F8 MOV W20, W3
	0x032352FC MOV W24, W2
	0x03235300 MOV X22, X1
	0x03235304 MOV X21, X0
	0x03235308 MOV W23, W31
	0x0323530C CMP W20, W23
	0x03235310 B.EQ 0x323538C
	0x03235314 CBZ X22, 0x32353A4
	0x03235318 LDR W8, [X22 + 0x20]
	0x0323531C CMP W24, W8
	0x03235320 B.LT 0x323533C
	0x03235324 MOV X0, X21
	0x03235328 MOV X1, X22
	0x0323532C BL 0x323591C
	0x03235330 CBZ X0, 0x3235390
	0x03235334 MOV X22, X0
	0x03235338 MOV W24, W31
	0x0323533C MOV X0, X19
	0x03235340 MOV W1, W23
	0x03235344 MOV X2, X31
	0x03235348 BL 0x3222A1C
	0x0323534C LDR X8, [X22 + 0x10]
	0x03235350 CBZ X8, 0x32353A4
	0x03235354 LDR W9, [X8 + 0x18]
	0x03235358 CMP W24, W9
	0x0323535C B.CS 0x32353A8
	0x03235360 ADD X8, X8, W24, 0x1, SXTW
	0x03235364 LDRH W8, [X8 + 0x20]
	0x03235368 CMP W8, W0, UXTH
	0x0323536C B.NE 0x323538C
	0x03235370 LDR W8, [X19 + 0x10]
	0x03235374 ADD W23, W23, 0x1
	0x03235378 ADD W24, W24, 0x1
	0x0323537C CMP W23, W8
	0x03235380 B.LT 0x323530C
	0x03235384 MOVZ W0, 0x1
	0x03235388 B 0x3235390
	0x0323538C MOV W0, W31
	0x03235390 LDP X20, X19, [X31 + 0x30]
	0x03235394 LDP X22, X21, [X31 + 0x20]
	0x03235398 LDP X24, X23, [X31 + 0x10]
	0x0323539C LDR X30, [X31], #0x40
	0x032353A0 RET
	0x032353A4 BL 0x1C16F20
	0x032353A8 BL 0x1C16F28
	0x032353AC SUB X31, X31, 0x60
	0x032353B0 STP X30, X27, [X31 + 0x10]
	0x032353B4 STP X26, X25, [X31 + 0x20]
	0x032353B8 STP X24, X23, [X31 + 0x30]
	0x032353BC STP X22, X21, [X31 + 0x40]
	0x032353C0 STP X20, X19, [X31 + 0x50]
	0x032353C4 CMP W2, 0x1
	0x032353C8 B.LT 0x3235548
	0x032353CC MOV X20, X5
	0x032353D0 CBZ X5, 0x3235564
	0x032353D4 MOV X19, X0
	0x032353D8 MOV X0, X31
	0x032353DC MOV W21, W4
	0x032353E0 MOV X22, X3
	0x032353E4 MOV W26, W2
	0x032353E8 MOV X23, X1
	0x032353EC BL 0x32C1424
	0x032353F0 LDR W4, [X20 + 0x10]
	0x032353F4 STR X22, [X31 + 0x8]
	0x032353F8 CBZ X23, 0x3235564
	0x032353FC LDR W8, [X23 + 0x18]
	0x03235400 CBZ W8, 0x3235518
	0x03235404 LDR W8, [X23 + 0x20]
	0x03235408 SUB W9, W4, W21
	0x0323540C MUL W24, W9, W26
	0x03235410 MOV W25, W0
	0x03235414 CMP W24, 0x1
	0x03235418 STR W8, [X31 + 0x4]
	0x0323541C B.LT 0x3235448
	0x03235420 CBZ X22, 0x3235564
	0x03235424 LDR W9, [X22 + 0x24]
	0x03235428 ADD X3, X31, 0x8
	0x0323542C ADD X4, X31, 0x4
	0x03235430 MOVZ W5, 0x1
	0x03235434 ADD W1, W9, W8
	0x03235438 MOV X0, X19
	0x0323543C MOV W2, W24
	0x03235440 BL 0x3235568
	0x03235444 LDR W4, [X20 + 0x10]
	0x03235448 ADD X25, X20, W25, SXTW
	0x0323544C ADD X1, X31, 0x8
	0x03235450 ADD X2, X31, 0x4
	0x03235454 MOV X0, X19
	0x03235458 MOV X3, X25
	0x0323545C BL 0x3235814
	0x03235460 LDR X9, [X23 + 0x18]
	0x03235464 CBZ W9, 0x3235518
	0x03235468 CMP W26, 0x1
	0x0323546C CSINC W10, W26, W31, GT
	0x03235470 MOV X8, X31
	0x03235474 AND X9, X9, 0x0
	0x03235478 SUB W26, W10, 0x1
	0x0323547C CMP X26, X8
	0x03235480 B.EQ 0x323551C
	0x03235484 ADD X27, X8, 0x1
	0x03235488 CMP X27, W9, UXTW
	0x0323548C B.CS 0x3235518
	0x03235490 ADD X9, X23, X8, 0x2, LSL
	0x03235494 LDR W9, [X9 + 0x20]
	0x03235498 ADD X8, X23, X8, 0x2, LSL
	0x0323549C LDR W8, [X8 + 0x24]
	0x032354A0 ADD W9, W9, W21
	0x032354A4 CBZ W24, 0x32354E0
	0x032354A8 CBZ X22, 0x3235564
	0x032354AC LDR X10, [X22 + 0x10]
	0x032354B0 CBZ X10, 0x3235564
	0x032354B4 LDR W11, [X10 + 0x18]
	0x032354B8 CMP W9, W11
	0x032354BC B.CS 0x3235518
	0x032354C0 ADD X10, X10, W9, 0x1, SXTW
	0x032354C4 ADD X3, X10, 0x20
	0x032354C8 SUB W4, W8, W9
	0x032354CC ADD X1, X31, 0x8
	0x032354D0 ADD X2, X31, 0x4
	0x032354D4 MOV X0, X19
	0x032354D8 BL 0x3235814
	0x032354DC B 0x32354F0
	0x032354E0 LDR W10, [X31 + 0x4]
	0x032354E4 SUB W8, W8, W9
	0x032354E8 ADD W8, W8, W10
	0x032354EC STR W8, [X31 + 0x4]
	0x032354F0 LDR W4, [X20 + 0x10]
	0x032354F4 ADD X1, X31, 0x8
	0x032354F8 ADD X2, X31, 0x4
	0x032354FC MOV X0, X19
	0x03235500 MOV X3, X25
	0x03235504 BL 0x3235814
	0x03235508 LDR W9, [X23 + 0x18]
	0x0323550C MOV X8, X27
	0x03235510 CMP X27, X9
	0x03235514 B.CC 0x323547C
	0x03235518 BL 0x1C16F28
	0x0323551C TBZ X24, 0x1F, 0x3235548
	0x03235520 LDR X8, [X31 + 0x8]
	0x03235524 CBZ X8, 0x3235564
	0x03235528 LDR W8, [X8 + 0x24]
	0x0323552C LDR W9, [X31 + 0x4]
	0x03235530 SUB W2, W31, W24
	0x03235534 ADD X3, X31, 0x8
	0x03235538 ADD X4, X31, 0x4
	0x0323553C ADD W1, W9, W8
	0x03235540 MOV X0, X19
	0x03235544 BL 0x3233B68
	0x03235548 LDP X20, X19, [X31 + 0x50]
	0x0323554C LDP X22, X21, [X31 + 0x40]
	0x03235550 LDP X24, X23, [X31 + 0x30]
	0x03235554 LDP X26, X25, [X31 + 0x20]
	0x03235558 LDP X30, X27, [X31 + 0x10]
	0x0323555C ADD X31, X31, 0x60
	0x03235560 RET
	0x03235564 BL 0x1C16F20
	0x03235568 STR X30, [X31 - 0x50]!
	0x0323556C STP X26, X25, [X31 + 0x10]
	0x03235570 STP X24, X23, [X31 + 0x20]
	0x03235574 STP X22, X21, [X31 + 0x30]
	0x03235578 STP X20, X19, [X31 + 0x40]
	0x0323557C ADRP X25, 0x11A7000
	0x03235580 LDRB W8, [X25 + 0x3E0]
	0x03235584 MOV W23, W5
	0x03235588 MOV X20, X4
	0x0323558C MOV X21, X3
	0x03235590 MOV W19, W2
	0x03235594 MOV W24, W1
	0x03235598 MOV X22, X0
	0x0323559C TBNZ X8, 0x0, 0x32355C0
	0x032355A0 ADRP X0, 0xEBE000
	0x032355A4 LDR X0, [X0 + 0x5A8]
	0x032355A8 BL 0x1C16CF4
	0x032355AC ADRP X0, 0xEBE000
	0x032355B0 LDR X0, [X0 + 0x8F0]
	0x032355B4 BL 0x1C16CF4
	0x032355B8 MOVZ W8, 0x1
	0x032355BC STRB W8, [X25 + 0x3E0]
	0x032355C0 LDP W9, W8, [X22 + 0x20]
	0x032355C4 LDR W10, [X22 + 0x28]
	0x032355C8 ADD W8, W8, W19
	0x032355CC ADD W8, W8, W9
	0x032355D0 CMP W8, W10
	0x032355D4 B.GT 0x32357B8
	0x032355D8 CMP W8, W19
	0x032355DC B.LT 0x32357B8
	0x032355E0 ADRP X10, 0xEBE000
	0x032355E4 ADRP X26, 0xEBE000
	0x032355E8 LDR X10, [X10 + 0x5A8]
	0x032355EC LDR X26, [X26 + 0x8F0]
	0x032355F0 STR X22, [X21]
	0x032355F4 LDR W8, [X22 + 0x24]
	0x032355F8 CMP W8, W24
	0x032355FC B.LE 0x3235618
	0x03235600 ADD W8, W8, W19
	0x03235604 STR W8, [X22 + 0x24]
	0x03235608 LDR X22, [X22 + 0x18]
	0x0323560C STR X22, [X21]
	0x03235610 CBNZ X22, 0x32355F4
	0x03235614 BL 0x1C16F20
	0x03235618 SUB W12, W24, W8
	0x0323561C STR W12, [X20]
	0x03235620 TBNZ X23, 0x0, 0x3235648
	0x03235624 LDRSW X8, [X22 + 0x20]
	0x03235628 CMP W8, 0x20
	0x0323562C B.GT 0x3235648
	0x03235630 LDR X9, [X22 + 0x10]
	0x03235634 CBZ X9, 0x3235614
	0x03235638 LDR W11, [X9 + 0x18]
	0x0323563C SUB W13, W11, W8
	0x03235640 CMP W13, W19
	0x03235644 B.GE 0x323574C
	0x03235648 LDR X0, [X10]
	0x0323564C LDR W8, [X0 + 0xE0]
	0x03235650 CBNZ W8, 0x3235658
	0x03235654 BL 0x1C16DFC
	0x03235658 MOVZ W1, 0x10
	0x0323565C MOV W0, W19
	0x03235660 MOV X2, X31
	0x03235664 BL 0x337EDF0
	0x03235668 LDR X8, [X21]
	0x0323566C CBZ X8, 0x3235614
	0x03235670 MOV W23, W0
	0x03235674 LDR X0, [X26]
	0x03235678 LDR W24, [X8 + 0x28]
	0x0323567C LDR X25, [X8 + 0x18]
	0x03235680 BL 0x1C16F10
	0x03235684 MOV W1, W23
	0x03235688 MOV W2, W24
	0x0323568C MOV X3, X25
	0x03235690 MOV X22, X0
	0x03235694 BL 0x3235A10
	0x03235698 CBZ X22, 0x3235614
	0x0323569C STR W19, [X22 + 0x20]
	0x032356A0 LDR W1, [X20]
	0x032356A4 MOV W0, W19
	0x032356A8 MOV X2, X31
	0x032356AC BL 0x337EE94
	0x032356B0 MOV W23, W0
	0x032356B4 CMP W0, 0x1
	0x032356B8 B.LT 0x3235718
	0x032356BC LDR X8, [X21]
	0x032356C0 CBZ X8, 0x3235614
	0x032356C4 LDR X8, [X8 + 0x10]
	0x032356C8 CBZ X8, 0x3235614
	0x032356CC LDR W9, [X8 + 0x18]
	0x032356D0 CBZ W9, 0x32357B4
	0x032356D4 LDR X1, [X22 + 0x10]
	0x032356D8 ADD X24, X8, 0x20
	0x032356DC MOV X0, X24
	0x032356E0 MOV W2, W31
	0x032356E4 MOV W3, W23
	0x032356E8 BL 0x3231F7C
	0x032356EC LDR W8, [X20]
	0x032356F0 SUBS W25, W8, W23
	0x032356F4 B.MI 0x3235718
	0x032356F8 LDR X8, [X21]
	0x032356FC CBZ X8, 0x3235614
	0x03235700 LDR X1, [X8 + 0x10]
	0x03235704 ADD X0, X24, W23, 0x1, UXTW
	0x03235708 MOV W2, W31
	0x0323570C MOV W3, W25
	0x03235710 BL 0x3231F7C
	0x03235714 STR W25, [X20]
	0x03235718 LDR X8, [X21]
	0x0323571C CBZ X8, 0x3235614
	0x03235720 STR X22, [X8 + 0x18]
	0x03235724 LDR X8, [X21]
	0x03235728 CBZ X8, 0x3235614
	0x0323572C LDR W9, [X8 + 0x24]
	0x03235730 CMP W23, W19
	0x03235734 ADD W9, W9, W19
	0x03235738 STR W9, [X8 + 0x24]
	0x0323573C B.GE 0x323579C
	0x03235740 STR X22, [X21]
	0x03235744 STR W23, [X20]
	0x03235748 B 0x323579C
	0x0323574C CMP W8, W12
	0x03235750 B.LE 0x3235794
	0x03235754 SXTW X10, W12
	0x03235758 ADD X12, X9, 0x1E
	0x0323575C SUB W13, W8, 0x1
	0x03235760 MOV X14, X8
	0x03235764 CMP W13, W11
	0x03235768 B.CS 0x32357B4
	0x0323576C ADD W15, W19, W13
	0x03235770 CMP W15, W11
	0x03235774 B.CS 0x32357B4
	0x03235778 LDRH W16, [X12, X14, LSL #1]
	0x0323577C SUB X14, X14, 0x1
	0x03235780 ADD X15, X9, W15, 0x1, SXTW
	0x03235784 CMP X14, X10
	0x03235788 SUB W13, W13, 0x1
	0x0323578C STRH W16, [X15 + 0x20]
	0x03235790 B.GT 0x3235764
	0x03235794 ADD W8, W8, W19
	0x03235798 STR W8, [X22 + 0x20]
	0x0323579C LDP X20, X19, [X31 + 0x40]
	0x032357A0 LDP X22, X21, [X31 + 0x30]
	0x032357A4 LDP X24, X23, [X31 + 0x20]
	0x032357A8 LDP X26, X25, [X31 + 0x10]
	0x032357AC LDR X30, [X31], #0x50
	0x032357B0 RET
	0x032357B4 BL 0x1C16F28
	0x032357B8 ADRP X0, 0xEC6000
	0x032357BC LDR X0, [X0 + 0x760]
	0x032357C0 BL 0x1C16D08
	0x032357C4 BL 0x1C16F10
	0x032357C8 MOV X19, X0
	0x032357CC ADRP X0, 0xEED000
	0x032357D0 LDR X0, [X0 + 0x540]
	0x032357D4 BL 0x1C16D08
	0x032357D8 MOV X20, X0
	0x032357DC ADRP X0, 0xEE8000
	0x032357E0 LDR X0, [X0 + 0x2A0]
	0x032357E4 BL 0x1C16D08
	0x032357E8 MOV X2, X0
	0x032357EC MOV X0, X19
	0x032357F0 MOV X1, X20
	0x032357F4 MOV X3, X31
	0x032357F8 BL 0x3311888
	0x032357FC ADRP X0, 0xEED000
	0x03235800 LDR X0, [X0 + 0x638]
	0x03235804 BL 0x1C16D08
	0x03235808 MOV X1, X0
	0x0323580C MOV X0, X19
	0x03235810 BL 0x1C16DEC
	0x03235814 STR X30, [X31 - 0x50]!
	0x03235818 STP X26, X25, [X31 + 0x10]
	0x0323581C STP X24, X23, [X31 + 0x20]
	0x03235820 STP X22, X21, [X31 + 0x30]
	0x03235824 STP X20, X19, [X31 + 0x40]
	0x03235828 ADRP X24, 0x11A7000
	0x0323582C LDRB W8, [X24 + 0x3DC]
	0x03235830 MOV W19, W4
	0x03235834 MOV X20, X3
	0x03235838 MOV X21, X2
	0x0323583C MOV X22, X1
	0x03235840 MOV X23, X0
	0x03235844 TBNZ X8, 0x0, 0x323585C
	0x03235848 ADRP X0, 0xEBE000
	0x0323584C LDR X0, [X0 + 0x5A8]
	0x03235850 BL 0x1C16CF4
	0x03235854 MOVZ W8, 0x1
	0x03235858 STRB W8, [X24 + 0x3DC]
	0x0323585C CBZ W19, 0x3235904
	0x03235860 LDR X1, [X22]
	0x03235864 CBZ X1, 0x3235900
	0x03235868 ADRP X25, 0xEBE000
	0x0323586C LDR W26, [X21]
	0x03235870 LDR X25, [X25 + 0x5A8]
	0x03235874 LDR X0, [X25]
	0x03235878 LDR W24, [X1 + 0x20]
	0x0323587C LDR W8, [X0 + 0xE0]
	0x03235880 CBNZ W8, 0x3235888
	0x03235884 BL 0x1C16DFC
	0x03235888 SUB W0, W24, W26
	0x0323588C MOV W1, W19
	0x03235890 MOV X2, X31
	0x03235894 BL 0x337EE94
	0x03235898 LDR X8, [X22]
	0x0323589C CBZ X8, 0x3235900
	0x032358A0 LDR X1, [X8 + 0x10]
	0x032358A4 LDR W2, [X21]
	0x032358A8 MOV W24, W0
	0x032358AC MOV X0, X20
	0x032358B0 MOV W3, W24
	0x032358B4 BL 0x3231F7C
	0x032358B8 LDR W8, [X21]
	0x032358BC ADD W26, W8, W24
	0x032358C0 STR W26, [X21]
	0x032358C4 LDR X1, [X22]
	0x032358C8 CBZ X1, 0x3235900
	0x032358CC LDR W8, [X1 + 0x20]
	0x032358D0 CMP W26, W8
	0x032358D4 B.LT 0x32358F0
	0x032358D8 MOV X0, X23
	0x032358DC BL 0x323591C
	0x032358E0 MOV X1, X0
	0x032358E4 MOV W26, W31
	0x032358E8 STR X0, [X22]
	0x032358EC STR W31, [X21]
	0x032358F0 SUBS W19, W19, W24
	0x032358F4 B.EQ 0x3235904
	0x032358F8 ADD X20, X20, W24, 0x1, SXTW
	0x032358FC CBNZ X1, 0x3235874
	0x03235900 BL 0x1C16F20
	0x03235904 LDP X20, X19, [X31 + 0x40]
	0x03235908 LDP X22, X21, [X31 + 0x30]
	0x0323590C LDP X24, X23, [X31 + 0x20]
	0x03235910 LDP X26, X25, [X31 + 0x10]
	0x03235914 LDR X30, [X31], #0x50
	0x03235918 RET
	0x0323591C STR X30, [X31 - 0x10]!
	0x03235920 CMP X1, X0
	0x03235924 B.EQ 0x3235950
	0x03235928 CBZ X1, 0x323594C
	0x0323592C CBZ X0, 0x323594C
	0x03235930 LDP W9, W8, [X1 + 0x20]
	0x03235934 ADD W8, W9, W8
	0x03235938 LDR W9, [X0 + 0x24]
	0x0323593C CMP W9, W8
	0x03235940 B.LE 0x3235954
	0x03235944 LDR X0, [X0 + 0x18]
	0x03235948 CBNZ X0, 0x3235938
	0x0323594C BL 0x1C16F20
	0x03235950 MOV X0, X31
	0x03235954 LDR X30, [X31], #0x10
	0x03235958 RET
	0x0323595C STP X30, X21, [X31 - 0x20]!
	0x03235960 STP X20, X19, [X31 + 0x10]
	0x03235964 ADRP X20, 0x11A7000
	0x03235968 LDRB W8, [X20 + 0x3DE]
	0x0323596C MOV X19, X0
	0x03235970 TBNZ X8, 0x0, 0x3235988
	0x03235974 ADRP X0, 0xEED000
	0x03235978 LDR X0, [X0 + 0x578]
	0x0323597C BL 0x1C16CF4
	0x03235980 MOVZ W8, 0x1
	0x03235984 STRB W8, [X20 + 0x3DE]
	0x03235988 LDR X20, [X19 + 0x10]
	0x0323598C CBZ X20, 0x32359C0
	0x03235990 LDRSW X19, [X19 + 0x20]
	0x03235994 LDR W21, [X20 + 0x18]
	0x03235998 CMP W19, W21
	0x0323599C B.LS 0x32359A8
	0x032359A0 MOV X0, X31
	0x032359A4 BL 0x339D6EC
	0x032359A8 SUB W1, W21, W19
	0x032359AC ADD X8, X20, X19, 0x1, LSL
	0x032359B0 LDP X20, X19, [X31 + 0x10]
	0x032359B4 ADD X0, X8, 0x20
	0x032359B8 LDP X30, X21, [X31], #0x20
	0x032359BC RET
	0x032359C0 BL 0x1C16F20
	0x032359C4 STR X30, [X31 - 0x20]!
	0x032359C8 STP X20, X19, [X31 + 0x10]
	0x032359CC MOV X20, X1
	0x032359D0 MOV X1, X31
	0x032359D4 MOV X19, X0
	0x032359D8 BL 0x33BDD8C
	0x032359DC CBZ X20, 0x3235A0C
	0x032359E0 LDR V0, [X20 + 0x20]
	0x032359E4 STR D0, [X19 + 0x20]
	0x032359E8 LDR X8, [X20 + 0x10]
	0x032359EC STR X8, [X19 + 0x10]
	0x032359F0 LDR X8, [X20 + 0x18]
	0x032359F4 STR X8, [X19 + 0x18]
	0x032359F8 LDR W8, [X20 + 0x28]
	0x032359FC STR W8, [X19 + 0x28]
	0x03235A00 LDP X20, X19, [X31 + 0x10]
	0x03235A04 LDR X30, [X31], #0x20
	0x03235A08 RET
	0x03235A0C BL 0x1C16F20
	0x03235A10 STR X30, [X31 - 0x40]!
	0x03235A14 STP X24, X23, [X31 + 0x10]
	0x03235A18 STP X22, X21, [X31 + 0x20]
	0x03235A1C STP X20, X19, [X31 + 0x30]
	0x03235A20 ADRP X24, 0x11A7000
	0x03235A24 ADRP X23, 0xEC7000
	0x03235A28 LDRB W8, [X24 + 0x3E1]
	0x03235A2C LDR X23, [X23 + 0x8D8]
	0x03235A30 MOV X19, X3
	0x03235A34 MOV W21, W2
	0x03235A38 MOV W22, W1
	0x03235A3C MOV X20, X0
	0x03235A40 TBNZ X8, 0x0, 0x3235A58
	0x03235A44 ADRP X0, 0xEC7000
	0x03235A48 LDR X0, [X0 + 0x8D8]
	0x03235A4C BL 0x1C16CF4
	0x03235A50 MOVZ W8, 0x1
	0x03235A54 STRB W8, [X24 + 0x3E1]
	0x03235A58 MOV X0, X20
	0x03235A5C MOV X1, X31
	0x03235A60 BL 0x33BDD8C
	0x03235A64 LDR X0, [X23]
	0x03235A68 MOV W1, W22
	0x03235A6C BL 0x1C16D6C
	0x03235A70 STR W21, [X20 + 0x28]
	0x03235A74 STP X0, X19, [X20 + 0x10]
	0x03235A78 CBZ X19, 0x3235A88
	0x03235A7C LDP W9, W8, [X19 + 0x20]
	0x03235A80 ADD W8, W9, W8
	0x03235A84 STR W8, [X20 + 0x24]
	0x03235A88 LDP X20, X19, [X31 + 0x30]
	0x03235A8C LDP X22, X21, [X31 + 0x20]
	0x03235A90 LDP X24, X23, [X31 + 0x10]
	0x03235A94 LDR X30, [X31], #0x40
	0x03235A98 RET
	0x03235A9C STP X30, X21, [X31 - 0x20]!
	0x03235AA0 STP X20, X19, [X31 + 0x10]
	0x03235AA4 ADRP X20, 0x11A7000
	0x03235AA8 LDRB W8, [X20 + 0x3E3]
	0x03235AAC MOV W19, W0
	0x03235AB0 TBNZ X8, 0x0, 0x3235AD4
	0x03235AB4 ADRP X0, 0xEED000
	0x03235AB8 LDR X0, [X0 + 0x640]
	0x03235ABC BL 0x1C16CF4
	0x03235AC0 ADRP X0, 0xEBE000
	0x03235AC4 LDR X0, [X0 + 0x8F0]
	0x03235AC8 BL 0x1C16CF4
	0x03235ACC MOVZ W8, 0x1
	0x03235AD0 STRB W8, [X20 + 0x3E3]
	0x03235AD4 CMP W19, 0x168
	0x03235AD8 B.GT 0x3235B10
	0x03235ADC ADRP X21, 0xEED000
	0x03235AE0 LDR X21, [X21 + 0x640]
	0x03235AE4 LDR X0, [X21]
	0x03235AE8 BL 0x1C16D0C
	0x03235AEC LDR X20, [X0]
	0x03235AF0 CBZ X20, 0x3235B10
	0x03235AF4 LDR X8, [X20 + 0x10]
	0x03235AF8 CBZ X8, 0x3235B64
	0x03235AFC LDR W9, [X20 + 0x24]
	0x03235B00 LDR W8, [X8 + 0x18]
	0x03235B04 ADD W8, W9, W8
	0x03235B08 CMP W8, W19
	0x03235B0C B.GE 0x3235B40
	0x03235B10 ADRP X8, 0xEBE000
	0x03235B14 LDR X8, [X8 + 0x8F0]
	0x03235B18 LDR X0, [X8]
	0x03235B1C BL 0x1C16F10
	0x03235B20 MOVN W2, 0x80000000
	0x03235B24 MOV W1, W19
	0x03235B28 MOV X20, X0
	0x03235B2C BL 0x3231B30
	0x03235B30 MOV X0, X20
	0x03235B34 LDP X20, X19, [X31 + 0x10]
	0x03235B38 LDP X30, X21, [X31], #0x20
	0x03235B3C RET
	0x03235B40 LDR X0, [X21]
	0x03235B44 BL 0x1C16D0C
	0x03235B48 STR X31, [X0]
	0x03235B4C LDR X0, [X21]
	0x03235B50 BL 0x1C16D0C
	0x03235B54 MOV X0, X20
	0x03235B58 MOV W1, W31
	0x03235B5C BL 0x3232ADC
	0x03235B60 B 0x3235B30
	0x03235B64 BL 0x1C16F20
	0x03235B68 STR X30, [X31 - 0x20]!
	0x03235B6C STP X20, X19, [X31 + 0x10]
	0x03235B70 ADRP X20, 0x11A7000
	0x03235B74 LDRB W8, [X20 + 0x3E4]
	0x03235B78 MOV X19, X0
	0x03235B7C TBNZ X8, 0x0, 0x3235B94
	0x03235B80 ADRP X0, 0xEED000
	0x03235B84 LDR X0, [X0 + 0x640]
	0x03235B88 BL 0x1C16CF4
	0x03235B8C MOVZ W8, 0x1
	0x03235B90 STRB W8, [X20 + 0x3E4]
	0x03235B94 CBZ X19, 0x3235BE4
	0x03235B98 LDR X8, [X19 + 0x10]
	0x03235B9C CBZ X8, 0x3235BE4
	0x03235BA0 LDR W9, [X19 + 0x24]
	0x03235BA4 LDR W8, [X8 + 0x18]
	0x03235BA8 ADD W8, W9, W8
	0x03235BAC CMP W8, 0x168
	0x03235BB0 B.LE 0x3235BC0
	0x03235BB4 LDP X20, X19, [X31 + 0x10]
	0x03235BB8 LDR X30, [X31], #0x20
	0x03235BBC RET
	0x03235BC0 ADRP X20, 0xEED000
	0x03235BC4 LDR X20, [X20 + 0x640]
	0x03235BC8 LDR X0, [X20]
	0x03235BCC BL 0x1C16D0C
	0x03235BD0 STR X19, [X0]
	0x03235BD4 LDR X0, [X20]
	0x03235BD8 LDP X20, X19, [X31 + 0x10]
	0x03235BDC LDR X30, [X31], #0x20
	0x03235BE0 B 0x1C16D0C
	0x03235BE4 BL 0x1C16F20
	0x03235BE8 STR X30, [X31 - 0x20]!
	0x03235BEC STP X20, X19, [X31 + 0x10]
	0x03235BF0 CBZ X0, 0x3235C20
	0x03235BF4 LDR X8, [X0]
	0x03235BF8 MOV X19, X0
	0x03235BFC LDP X9, X1, [X8 + 0x168]
	0x03235C00 BLR X9
	0x03235C04 MOV X20, X0
	0x03235C08 MOV X0, X19
	0x03235C0C BL 0x3235B68
	0x03235C10 MOV X0, X20
	0x03235C14 LDP X20, X19, [X31 + 0x10]
	0x03235C18 LDR X30, [X31], #0x20
	0x03235C1C RET
	0x03235C20 BL 0x1C16F20
	0x03235C24 STP X30, X19, [X31 - 0x10]!
	0x03235C28 MOVZ W1, 0x2EE0
	0x03235C2C MOV X2, X31
	0x03235C30 MOV X19, X0
	0x03235C34 BL 0x3241B10
	0x03235C38 MOVZ W8, 0x1
	0x03235C3C STRB W31, [X19 + 0x3A]
	0x03235C40 STRH W8, [X19 + 0x38]
	0x03235C44 LDP X30, X19, [X31], #0x10
	0x03235C48 RET
	0x03235C4C STP X30, X23, [X31 - 0x30]!
	0x03235C50 STP X22, X21, [X31 + 0x10]
	0x03235C54 STP X20, X19, [X31 + 0x20]
	0x03235C58 ANDS W23, W1, 0x1
	0x03235C5C MOVZ W8, 0x2EE0
	0x03235C60 AND W22, W2, 0x1
	0x03235C64 CINC W1, W8, NE
	0x03235C68 MOV X2, X31
	0x03235C6C MOV W20, W3
	0x03235C70 MOV X19, X0
	0x03235C74 AND W21, W3, 0x1
	0x03235C78 BL 0x3241B10
	0x03235C7C STRB W23, [X19 + 0x3A]
	0x03235C80 STRB W22, [X19 + 0x38]
	0x03235C84 STRB W21, [X19 + 0x39]
	0x03235C88 TBZ X20, 0x0, 0x3235CA8
	0x03235C8C LDR X8, [X19]
	0x03235C90 MOV X0, X19
	0x03235C94 LDP X20, X19, [X31 + 0x20]
	0x03235C98 LDP X22, X21, [X31 + 0x10]
	0x03235C9C LDP X2, X1, [X8 + 0x188]
	0x03235CA0 LDP X30, X23, [X31], #0x30
	0x03235CA4 BR X2
	0x03235CA8 LDP X20, X19, [X31 + 0x20]
	0x03235CAC LDP X22, X21, [X31 + 0x10]
	0x03235CB0 LDP X30, X23, [X31], #0x30
	0x03235CB4 RET
	0x03235CB8 STP X30, X21, [X31 - 0x20]!
	0x03235CBC STP X20, X19, [X31 + 0x10]
	0x03235CC0 ANDS W21, W1, 0x1
	0x03235CC4 MOVZ W8, 0x2EE0
	0x03235CC8 AND W20, W2, 0x1
	0x03235CCC CINC W1, W8, NE
	0x03235CD0 MOV X2, X31
	0x03235CD4 MOV X19, X0
	0x03235CD8 BL 0x3241B10
	0x03235CDC STRB W21, [X19 + 0x3A]
	0x03235CE0 STRB W20, [X19 + 0x38]
	0x03235CE4 STRB W31, [X19 + 0x39]
	0x03235CE8 LDP X20, X19, [X31 + 0x10]
	0x03235CEC LDP X30, X21, [X31], #0x20
	0x03235CF0 RET
	0x03235CF4 STP X30, X21, [X31 - 0x20]!
	0x03235CF8 STP X20, X19, [X31 + 0x10]
	0x03235CFC ADRP X20, 0x11A7000
	0x03235D00 LDRB W8, [X20 + 0x3E5]
	0x03235D04 MOV X19, X0
	0x03235D08 TBNZ X8, 0x0, 0x3235D38
	0x03235D0C ADRP X0, 0xEED000
	0x03235D10 LDR X0, [X0 + 0x648]
	0x03235D14 BL 0x1C16CF4
	0x03235D18 ADRP X0, 0xEED000
	0x03235D1C LDR X0, [X0 + 0x368]
	0x03235D20 BL 0x1C16CF4
	0x03235D24 ADRP X0, 0xEED000
	0x03235D28 LDR X0, [X0 + 0x650]
	0x03235D2C BL 0x1C16CF4
	0x03235D30 MOVZ W8, 0x1
	0x03235D34 STRB W8, [X20 + 0x3E5]
	0x03235D38 LDRB W8, [X19 + 0x39]
	0x03235D3C CBZ W8, 0x3235D5C
	0x03235D40 MOV X0, X31
	0x03235D44 BL 0x33FFCD0
	0x03235D48 STR X0, [X19 + 0x28]
	0x03235D4C MOV X0, X31
	0x03235D50 BL 0x33FD9EC
	0x03235D54 STR X0, [X19 + 0x30]
	0x03235D58 B 0x3235DA8
	0x03235D5C ADRP X8, 0xEED000
	0x03235D60 LDR X8, [X8 + 0x368]
	0x03235D64 LDR X0, [X8]
	0x03235D68 BL 0x1C16F10
	0x03235D6C ADRP X21, 0xEED000
	0x03235D70 LDR X21, [X21 + 0x650]
	0x03235D74 MOV X20, X0
	0x03235D78 LDR X1, [X21]
	0x03235D7C BL 0x322F374
	0x03235D80 STR X20, [X19 + 0x28]
	0x03235D84 ADRP X8, 0xEED000
	0x03235D88 LDR X8, [X8 + 0x648]
	0x03235D8C LDR X0, [X8]
	0x03235D90 BL 0x1C16F10
	0x03235D94 LDR X1, [X21]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+96], X29
	003 Move [X31+104], X30
	004 Move [X31+112], X28
	005 Move [X31+120], X27
	006 Move [X31+128], X26
	007 Move [X31+136], X25
	008 Move [X31+144], X24
	009 Move [X31+152], X23
	010 Move [X31+160], X22
	011 Move [X31+168], X21
	012 Move [X31+176], X20
	013 Move [X31+184], X19
	014 Move X19, 0x11A8000
	015 Move W8, [X19+986]
	016 Move X20, X2
	017 Move X22, X1
	018 Move X25, X0
	019 Move [X31+64], X3
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {56}
	024 Move X0, 0xEEE000
	025 Move X0, [X0+1504]
	026 Call 0x1C17CF4
	027 Move X0, 0xEEE000
	028 Move X0, [X0+1512]
	029 Call 0x1C17CF4
	030 Move X0, 0xEEE000
	031 Move X0, [X0+1520]
	032 Call 0x1C17CF4
	033 Move X0, 0xEE9000
	034 Move X0, [X0+3832]
	035 Call 0x1C17CF4
	036 Move X0, 0xEEE000
	037 Move X0, [X0+1528]
	038 Call 0x1C17CF4
	039 Move X0, 0xEEE000
	040 Move X0, [X0+152]
	041 Call 0x1C17CF4
	042 Move X0, 0xEEE000
	043 Move X0, [X0+40]
	044 Call 0x1C17CF4
	045 Move X0, 0xEBF000
	046 Move X0, [X0+2288]
	047 Call 0x1C17CF4
	048 Move X0, 0xEC1000
	049 Move X0, [X0+632]
	050 Call 0x1C17CF4
	051 Move X0, 0xEBF000
	052 Move X0, [X0+1728]
	053 Call 0x1C17CF4
	054 Move W8, 1
	055 Move [X19+986], W8
	056 Move [X31+92], W31
	057 Compare X20, 0
	058 JumpIfEqual {689}
	059 Move W23, [X20+16]
	060 Move [X31+32], X22
	061 Compare X22, 0
	062 JumpIfEqual {115}
	063 Move X8, 0xEBF000
	064 Move X8, [X8+1728]
	065 Move X21, 0xEEE000
	066 Move X0, [X8]
	067 Move X8, 0xEEE000
	068 Move X8, [X8+1504]
	069 Move W9, [X0+224]
	070 Move X19, [X8]
	071 Move X21, [X21+1520]
	072 Compare W9, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Move X0, X19
	076 Move X1, X31
	077 Call Type.GetTypeFromHandle, X0
	078 Move X8, [X22]
	079 Move X1, [X21]
	080 Move X19, X0
	081 NotImplemented "Instruction LDRH not yet implemented."
	082 Compare X9, 0
	083 JumpIfEqual {90}
	084 Move X10, [X8+176]
	085 Add X10, X10, 8
	086 NotImplemented "Instruction LDUR not yet implemented."
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Subtract X9, X9, 1
	089 Add X10, X10, 16
	090 Move X0, X22
	091 Move W2, W31
	092 Call 0x1C5D788
	093 NotImplemented "Instruction LDRSW not yet implemented."
	094 Add X8, X8, X9
	095 Add X0, X8, 312
	096 Move X8, [X0]
	097 Move X2, [X0+8]
	098 Move X0, X22
	099 Move X1, X19
	100 NotImplemented "Instruction BLR not yet implemented."
	101 Compare X0, 0
	102 JumpIfEqual {115}
	103 Move X8, 0xEEE000
	104 Move X8, [X8+1512]
	105 Move X19, X0
	106 Move X21, [X8]
	107 Move X1, X21
	108 Call 0x1C17E00
	109 Move [X31+16], X0
	110 Compare X0, 0
	111 JumpIfNotEqual {116}
	112 Move X0, X19
	113 Move X1, X21
	114 Call 0x1C181E0
	115 Move [X31+16], X31
	116 Move W27, 0x4240
	117 Subtract W26, W31, W23
	118 Subtract W8, W23, 1
	119 Move X24, X31
	120 Move W28, W31
	121 NotImplemented "Instruction MOVK not yet implemented."
	122 Move [X31+28], W8
	123 Move W22, 10
	124 Move [X31+48], X25
	125 Move [X31+8], X26
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Move W21, W28
	128 Move X0, X20
	129 Move W1, W28
	130 Move X2, X31
	131 Call String.get_Chars, X0, X1
	132 And W8, W0, 0xFFFF
	133 Move W19, W0
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Add W21, W28, 1
	136 NotImplemented "Instruction CMP not yet implemented."
	137 NotImplemented "Instruction CMP not yet implemented."
	138 Move X0, X20
	139 Move W1, W21
	140 Move X2, X31
	141 Call String.get_Chars, X0, X1
	142 And W8, W0, 0xFFFF
	143 NotImplemented "Instruction CMP not yet implemented."
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Move X0, X20
	146 Move W1, W21
	147 Move X2, X31
	148 Call String.get_Chars, X0, X1
	149 And W8, W0, 0xFFFF
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Add W21, W28, 2
	152 Move X0, X25
	153 Move W1, W19
	154 Call StringBuilder.Append, X0, X1
	155 NotImplemented "Instruction CMP not yet implemented."
	156 Move W28, W21
	157 Move W21, W28
	158 NotImplemented "Instruction CMP not yet implemented."
	159 Add W1, W21, 1
	160 NotImplemented "Instruction CMP not yet implemented."
	161 Move X0, X20
	162 Move X2, X31
	163 Call String.get_Chars, X0, X1
	164 Subtract W8, W0, 48
	165 And W8, W8, 0xFFFF
	166 NotImplemented "Instruction CMP not yet implemented."
	167 Move W28, [X31+28]
	168 Move W26, W0
	169 Move W25, W31
	170 Add W21, W21, 2
	171 NotImplemented "Instruction CMP not yet implemented."
	172 Multiply W8, W25, W22
	173 Add W8, W8, W26
	174 Move X0, X20
	175 Move W1, W21
	176 Move X2, X31
	177 Subtract W25, W8, 48
	178 Call String.get_Chars, X0, X1
	179 Move W26, W0
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Add W21, W21, 1
	182 Subtract W8, W26, 48
	183 And W8, W8, 0xFFFF
	184 NotImplemented "Instruction CMP not yet implemented."
	185 Move X8, 0xEEE000
	186 Move X8, [X8+152]
	187 Move X0, [X8]
	188 Move W8, [X0+224]
	189 Compare W8, 0
	190 JumpIfNotEqual {192}
	191 Call 0x1C17DFC
	192 Move X0, [X31+64]
	193 Move X1, X31
	194 Call ParamsArray.get_Length, X0
	195 NotImplemented "Instruction CMP not yet implemented."
	196 Subtract W21, W21, 1
	197 NotImplemented "Instruction CMP not yet implemented."
	198 Move X0, X20
	199 Move W1, W21
	200 Move X2, X31
	201 Call String.get_Chars, X0, X1
	202 And W8, W0, 0xFFFF
	203 NotImplemented "Instruction CMP not yet implemented."
	204 Add W21, W21, 1
	205 NotImplemented "Instruction CMP not yet implemented."
	206 Move [X31+88], W31
	207 Move W29, W31
	208 Move W26, W0
	209 And W8, W26, 0xFFFF
	210 NotImplemented "Instruction CMP not yet implemented."
	211 Add W8, W21, 2
	212 Subtract W21, W8, 1
	213 Move W19, W8
	214 NotImplemented "Instruction CMP not yet implemented."
	215 Move X0, X20
	216 Move W1, W21
	217 Move X2, X31
	218 Call String.get_Chars, X0, X1
	219 And W8, W0, 0xFFFF
	220 NotImplemented "Instruction CMP not yet implemented."
	221 Add W8, W19, 1
	222 Move X8, [X31+8]
	223 Add W8, W8, W19
	224 NotImplemented "Instruction CMP not yet implemented."
	225 Move X0, X20
	226 Move W1, W21
	227 Move X2, X31
	228 Call String.get_Chars, X0, X1
	229 And W8, W0, 0xFFFF
	230 NotImplemented "Instruction CMP not yet implemented."
	231 Move W26, W0
	232 NotImplemented "Instruction CSET not yet implemented."
	233 Move [X31+88], W8
	234 NotImplemented "Instruction CMP not yet implemented."
	235 Move X0, X20
	236 Move W1, W19
	237 Move X2, X31
	238 Call String.get_Chars, X0, X1
	239 Move W26, W0
	240 Move W21, W19
	241 Subtract W8, W26, 48
	242 And W8, W8, 0xFFFF
	243 NotImplemented "Instruction CMP not yet implemented."
	244 Move W29, W31
	245 NotImplemented "Instruction CMP not yet implemented."
	246 Multiply W8, W29, W22
	247 Add W21, W21, 1
	248 Add W8, W8, W26
	249 Move X0, X20
	250 Move W1, W21
	251 Move X2, X31
	252 Subtract W29, W8, 48
	253 Call String.get_Chars, X0, X1
	254 NotImplemented "Instruction CMP not yet implemented."
	255 Move W26, W0
	256 Subtract W8, W26, 48
	257 And W8, W8, 0xFFFF
	258 NotImplemented "Instruction CMP not yet implemented."
	259 Move W29, W31
	260 Move [X31+88], W31
	261 NotImplemented "Instruction CMP not yet implemented."
	262 Move X0, X20
	263 Move W1, W21
	264 Move X2, X31
	265 Call String.get_Chars, X0, X1
	266 And W8, W0, 0xFFFF
	267 NotImplemented "Instruction CMP not yet implemented."
	268 Add W21, W21, 1
	269 NotImplemented "Instruction CMP not yet implemented."
	270 Move W26, 32
	271 Move W21, W23
	272 Move W26, W0
	273 Move X8, 0xEEE000
	274 Move X8, [X8+152]
	275 Move X0, [X8]
	276 Move W8, [X0+224]
	277 Compare W8, 0
	278 JumpIfNotEqual {280}
	279 Call 0x1C17DFC
	280 Move X0, [X31+64]
	281 Move W1, W25
	282 Move X2, X31
	283 Call ParamsArray.get_Item, X0, X1
	284 And W8, W26, 0xFFFF
	285 NotImplemented "Instruction CMP not yet implemented."
	286 Move [X31+72], X0
	287 Move X26, [X31+8]
	288 NotImplemented "Instruction CMP not yet implemented."
	289 Add W19, W21, 1
	290 Move X21, 0xEBF000
	291 Move X21, [X21+2288]
	292 Move X25, X31
	293 Move W28, W19
	294 Add X19, X26, W19
	295 Add W31, W19, W25
	296 Add X1, X28, X25
	297 Move X0, X20
	298 Move X2, X31
	299 Call String.get_Chars, X0, X1
	300 And W8, W0, 0xFFFF
	301 NotImplemented "Instruction CMP not yet implemented."
	302 Add X25, X25, 1
	303 NotImplemented "Instruction CMP not yet implemented."
	304 Add X1, X28, X25
	305 NotImplemented "Instruction CMP not yet implemented."
	306 Move X0, X20
	307 Move X2, X31
	308 Call String.get_Chars, X0, X1
	309 And W8, W0, 0xFFFF
	310 NotImplemented "Instruction CMP not yet implemented."
	311 Add X1, X28, X25
	312 NotImplemented "Instruction CMP not yet implemented."
	313 Move X0, X20
	314 Move X2, X31
	315 Call String.get_Chars, X0, X1
	316 And W8, W0, 0xFFFF
	317 NotImplemented "Instruction CMP not yet implemented."
	318 Compare X24, 0
	319 JumpIfNotEqual {326}
	320 Move X0, [X21]
	321 Call 0x1C17F10
	322 Move X24, X0
	323 Call StringBuilder..ctor, X0
	324 Compare X24, 0
	325 JumpIfEqual {670}
	326 Add X8, X28, X25
	327 Move X0, X24
	328 Move X1, X20
	329 Move W2, W28
	330 Move W3, W25
	331 Add X19, X8, 1
	332 Call StringBuilder.Append, X0, X1, X2, X3
	333 Move X25, [X31+48]
	334 Move X12, X31
	335 Move [X31+80], X31
	336 Move [X31+56], X31
	337 Subtract W8, W28, 1
	338 Add X21, X8, X25
	339 Compare X24, 0
	340 JumpIfEqual {344}
	341 Move W9, [X24+32]
	342 Move W8, [X24+36]
	343 Add W31, W9, W8
	344 NotImplemented "Instruction CMP not yet implemented."
	345 Move X25, [X31+48]
	346 Move X12, X31
	347 Move [X31+80], X31
	348 Move [X31+56], X31
	349 Move W21, W28
	350 Move X8, 0x11A5000
	351 Move W8, [X8+1889]
	352 Compare W8, 0
	353 JumpIfNotEqual {360}
	354 Move X0, 0xEE6000
	355 Move X0, [X0+656]
	356 Call 0x1C17CF4
	357 Move W8, 1
	358 Move X9, 0x11A5000
	359 Move [X9+1889], W8
	360 Move W8, [X20+16]
	361 Subtract X9, X25, 1
	362 Move [X31+80], X9
	363 Subtract W8, W8, W28
	364 Move X9, [X31+80]
	365 NotImplemented "Instruction CMP not yet implemented."
	366 Move W0, 24
	367 Move X1, X31
	368 Call ThrowHelper.ThrowArgumentOutOfRangeException, X0
	369 Move X0, X20
	370 Move X1, X31
	371 Call String.GetRawStringData, X0
	372 Move X25, [X31+48]
	373 Add X8, X0, W28
	374 Move X12, X31
	375 Move [X31+56], X8
	376 Subtract W3, W25, 1
	377 Move X0, X24
	378 Move X1, X20
	379 Move W2, W28
	380 Call StringBuilder.Append, X0, X1, X2, X3
	381 Move X8, [X24]
	382 Move X9, [X8+360]
	383 Move X1, [X8+368]
	384 NotImplemented "Instruction BLR not yet implemented."
	385 Move X8, 0x11A5000
	386 Move W8, [X8+1890]
	387 Move X10, X0
	388 Compare W8, 0
	389 JumpIfNotEqual {398}
	390 Move X0, 0xEE6000
	391 Move X0, [X0+656]
	392 Move X19, X10
	393 Call 0x1C17CF4
	394 Move X10, X19
	395 Move W8, 1
	396 Move X9, 0x11A5000
	397 Move [X9+1890], W8
	398 Move X25, [X31+48]
	399 Compare X10, 0
	400 JumpIfEqual {411}
	401 Move X0, X10
	402 Move X1, X31
	403 Move X27, X10
	404 Call String.GetRawStringData, X0
	405 Move W8, [X27+16]
	406 Move X19, X27
	407 Move W27, 0x4240
	408 NotImplemented "Instruction MOVK not yet implemented."
	409 Move [X31+80], X8
	410 Move [X31+56], X0
	411 Move X19, X10
	412 Move [X31+56], X31
	413 Move [X31+80], X31
	414 Move X0, X24
	415 Move W1, W31
	416 Call StringBuilder.set_Length, X0, X1
	417 Move X12, X19
	418 Move X19, [X31+16]
	419 Add W28, W21, 1
	420 Compare X19, 0
	421 JumpIfEqual {454}
	422 Move X21, [X31+72]
	423 Compare X12, 0
	424 JumpIfNotEqual {434}
	425 Move X8, [X31+80]
	426 Compare W8, 0
	427 JumpIfEqual {434}
	428 Move X1, [X31+56]
	429 Move X2, [X31+80]
	430 Move X0, X31
	431 Move X3, X31
	432 Call String.CreateString, X0, X1
	433 Move X12, X0
	434 Move X8, [X19]
	435 Move X10, 0xEEE000
	436 NotImplemented "Instruction LDRH not yet implemented."
	437 Move X10, [X10+1512]
	438 Move X1, [X10]
	439 Compare X9, 0
	440 JumpIfEqual {447}
	441 Move X10, [X8+176]
	442 Add X10, X10, 8
	443 NotImplemented "Instruction LDUR not yet implemented."
	444 NotImplemented "Instruction CMP not yet implemented."
	445 Subtract X9, X9, 1
	446 Add X10, X10, 16
	447 Move X0, X19
	448 Move W2, W31
	449 Move X27, X12
	450 Call 0x1C5D788
	451 Move X12, X27
	452 Move W27, 0x4240
	453 NotImplemented "Instruction MOVK not yet implemented."
	454 Move X21, [X31+72]
	455 Move [X31+40], X12
	456 NotImplemented "Instruction LDRSW not yet implemented."
	457 Add X8, X8, X9
	458 Add X0, X8, 312
	459 Move X8, [X0]
	460 Move X4, [X0+8]
	461 Move X3, [X31+32]
	462 Move X0, X19
	463 Move X1, X12
	464 Move X2, X21
	465 Move [X31+40], X12
	466 NotImplemented "Instruction BLR not yet implemented."
	467 Move X19, X0
	468 Compare X0, 0
	469 JumpIfNotEqual {628}
	470 Move X8, 0xEEE000
	471 Move X8, [X8+1528]
	472 Move X0, X21
	473 Move X1, [X8]
	474 Call 0x1C17E00
	475 Move W9, [X31+88]
	476 NotImplemented "Instruction CMP not yet implemented."
	477 NotImplemented "Instruction CSET not yet implemented."
	478 NotImplemented "Instruction BIC not yet implemented."
	479 Move TEMP, X8
	480 And TEMP, TEMP, 1
	481 Compare TEMP, 1
	482 JumpIfEqual {562}
	483 Move X21, X0
	484 Compare X0, 0
	485 JumpIfEqual {562}
	486 Move X8, 0x11A8000
	487 Move W8, [X8+1059]
	488 Compare W8, 0
	489 JumpIfNotEqual {496}
	490 Move X0, 0xEEE000
	491 Move X0, [X0+1400]
	492 Call 0x1C17CF4
	493 Move X8, 0x11A8000
	494 Move W9, 1
	495 Move [X8+1059], W9
	496 Move X19, [X25+16]
	497 Compare X19, 0
	498 JumpIfEqual {670}
	499 NotImplemented "Instruction LDRSW not yet implemented."
	500 Move W26, [X19+24]
	501 NotImplemented "Instruction CMP not yet implemented."
	502 Move X0, X31
	503 Move X25, X12
	504 Call ThrowHelper.ThrowArgumentOutOfRangeException
	505 Move X12, X25
	506 Move X8, [X21]
	507 Move X10, 0xEEE000
	508 Subtract W2, W26, W12
	509 NotImplemented "Instruction LDRH not yet implemented."
	510 Move X10, [X10+1528]
	511 Move X1, [X10]
	512 Compare X9, 0
	513 JumpIfEqual {520}
	514 Move X10, [X8+176]
	515 Add X10, X10, 8
	516 NotImplemented "Instruction LDUR not yet implemented."
	517 NotImplemented "Instruction CMP not yet implemented."
	518 Subtract X9, X9, 1
	519 Add X10, X10, 16
	520 Move X0, X21
	521 Move [X31], X2
	522 Move W2, W31
	523 Move X25, X21
	524 Move X21, X12
	525 Call 0x1C5D788
	526 Move X2, [X31]
	527 Move X12, X21
	528 Move X21, X25
	529 NotImplemented "Instruction LDRSW not yet implemented."
	530 Add X8, X8, X9
	531 Add X0, X8, 312
	532 Move X8, [X0]
	533 Move X7, [X0+8]
	534 Move X4, [X31+56]
	535 Move X5, [X31+80]
	536 Move X6, [X31+32]
	537 Add X9, X19, X12
	538 Add X1, X9, 32
	539 Add X3, X31, 92
	540 Move X0, X21
	541 NotImplemented "Instruction BLR not yet implemented."
	542 Move X25, [X31+48]
	543 Move TEMP, X0
	544 And TEMP, TEMP, 1
	545 Compare TEMP, 1
	546 JumpIfNotEqual {562}
	547 Move W9, [X31+92]
	548 Move W8, [X25+32]
	549 Subtract W2, W29, W9
	550 Add W8, W9, W8
	551 NotImplemented "Instruction CMP not yet implemented."
	552 Move [X25+32], W8
	553 Move W8, [X31+88]
	554 Xor W8, W8, 1
	555 Move TEMP, X8
	556 And TEMP, TEMP, 1
	557 Compare TEMP, 1
	558 JumpIfEqual {126}
	559 Move W1, 32
	560 Move X0, X25
	561 Call StringBuilder.Append, X0, X1, X2
	562 Move X8, 0xEE9000
	563 Move X8, [X8+3832]
	564 Move X19, [X31+72]
	565 Move X1, [X8]
	566 Move X0, X19
	567 Call 0x1C17E00
	568 Compare X0, 0
	569 JumpIfEqual {583}
	570 Move X8, [X31+80]
	571 Move X21, X0
	572 Compare W8, 0
	573 JumpIfEqual {590}
	574 Move X12, [X31+40]
	575 Compare X12, 0
	576 JumpIfNotEqual {591}
	577 Move X1, [X31+56]
	578 Move X2, [X31+80]
	579 Move X0, X31
	580 Move X3, X31
	581 Call String.CreateString, X0, X1
	582 Move X12, X0
	583 Compare X19, 0
	584 JumpIfEqual {621}
	585 Move X8, [X19]
	586 Move X0, X19
	587 Move X9, [X8+360]
	588 Move X1, [X8+368]
	589 NotImplemented "Instruction BLR not yet implemented."
	590 Move X12, [X31+40]
	591 Move X8, [X21]
	592 Move X10, 0xEE9000
	593 NotImplemented "Instruction LDRH not yet implemented."
	594 Move X10, [X10+3832]
	595 Move X1, [X10]
	596 Compare X9, 0
	597 JumpIfEqual {604}
	598 Move X10, [X8+176]
	599 Add X10, X10, 8
	600 NotImplemented "Instruction LDUR not yet implemented."
	601 NotImplemented "Instruction CMP not yet implemented."
	602 Subtract X9, X9, 1
	603 Add X10, X10, 16
	604 Move X0, X21
	605 Move W2, W31
	606 Move X19, X12
	607 Call 0x1C5D788
	608 Move X12, X19
	609 NotImplemented "Instruction LDRSW not yet implemented."
	610 Add X8, X8, X9
	611 Add X0, X8, 312
	612 Move X8, [X0]
	613 Move X3, [X0+8]
	614 Move X2, [X31+32]
	615 Move X0, X21
	616 Move X1, X12
	617 NotImplemented "Instruction BLR not yet implemented."
	618 Move X19, X0
	619 Compare X0, 0
	620 JumpIfNotEqual {628}
	621 Move X8, 0xEC1000
	622 Move X8, [X8+632]
	623 Move X8, [X8]
	624 Move X8, [X8+184]
	625 Move X19, [X8]
	626 Compare X19, 0
	627 JumpIfEqual {670}
	628 Move W8, [X19+16]
	629 Move W9, [X31+88]
	630 Subtract W21, W29, W8
	631 NotImplemented "Instruction CMP not yet implemented."
	632 NotImplemented "Instruction CSET not yet implemented."
	633 Or W8, W9, W8
	634 Move TEMP, X8
	635 And TEMP, TEMP, 1
	636 Compare TEMP, 1
	637 JumpIfEqual {642}
	638 Move W1, 32
	639 Move X0, X25
	640 Move W2, W21
	641 Call StringBuilder.Append, X0, X1, X2
	642 Move X0, X25
	643 Move X1, X19
	644 Call StringBuilder.Append, X0, X1
	645 NotImplemented "Instruction CMP not yet implemented."
	646 Move W8, [X31+88]
	647 Xor W8, W8, 1
	648 Compare W8, 0
	649 JumpIfNotEqual {126}
	650 Move W1, 32
	651 Move X0, X25
	652 Move W2, W21
	653 Call StringBuilder.Append, X0, X1, X2
	654 Move X0, X25
	655 Move X20, [X31+176]
	656 Move X19, [X31+184]
	657 Move X22, [X31+160]
	658 Move X21, [X31+168]
	659 Move X24, [X31+144]
	660 Move X23, [X31+152]
	661 Move X26, [X31+128]
	662 Move X25, [X31+136]
	663 Move X28, [X31+112]
	664 Move X27, [X31+120]
	665 Move X29, [X31+96]
	666 Move X30, [X31+104]
	667 Add X31, X31, 192
	668 Return X0
	669 Call StringBuilder.FormatError
	670 Call 0x1C17F20
	671 Move X0, 0xEEC000
	672 Move X0, [X0+3080]
	673 Call 0x1C17D08
	674 Call 0x1C17F10
	675 Move X19, X0
	676 Move X0, 0xEEE000
	677 Move X0, [X0+1536]
	678 Call 0x1C17D08
	679 Move X1, X0
	680 Move X0, X19
	681 Move X2, X31
	682 Call FormatException..ctor, X0, X1
	683 Move X0, 0xEEE000
	684 Move X0, [X0+1544]
	685 Call 0x1C17D08
	686 Move X1, X0
	687 Move X0, X19
	688 Call 0x1C17DEC
	689 Move X0, 0xEC4000
	690 Move X0, [X0+1320]
	691 Call 0x1C17D08
	692 Call 0x1C17F10
	693 Move X19, X0
	694 Move X0, 0xEEE000
	695 Move X0, [X0+160]
	696 Call 0x1C17D08
	697 Move X1, X0
	698 Move X0, X19
	699 Move X2, X31
	700 Call ArgumentNullException..ctor, X0, X1

Method: System.Text.StringBuilder Replace(System.String oldValue, System.String newValue)

Disassembly:
	0x03235FB0 MOV X0, X19
	0x03235FB4 BL 0x1C16DEC
	0x03235FB8 STR X30, [X31 - 0x20]!
	0x03235FBC STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move W9, [X0+32]
	002 Move W8, [X0+36]
	003 Move W3, W31
	004 Add W4, W9, W8

Method: System.Text.StringBuilder Replace(System.String oldValue, System.String newValue, System.Int32 startIndex, System.Int32 count)

Disassembly:
	0x03235FC0 CBZ X1, 0x3235FE4
	0x03235FC4 TBNZ X2, 0x1F, 0x323602C
	0x03235FC8 LDR X8, [X0]
	0x03235FCC LDP X20, X19, [X31 + 0x10]
	0x03235FD0 MOV X3, X31
	0x03235FD4 LDR X5, [X8 + 0x228]
	0x03235FD8 LDR X4, [X8 + 0x230]
	0x03235FDC LDR X30, [X31], #0x20
	0x03235FE0 BR X5
	0x03235FE4 ADRP X0, 0xEC3000
	0x03235FE8 LDR X0, [X0 + 0x528]
	0x03235FEC BL 0x1C16D08
	0x03235FF0 BL 0x1C16F10
	0x03235FF4 MOV X19, X0
	0x03235FF8 ADRP X0, 0xEED000
	0x03235FFC LDR X0, [X0 + 0x2D8]
	0x03236000 BL 0x1C16D08
	0x03236004 MOV X20, X0
	0x03236008 ADRP X0, 0xEEC000
	0x0323600C LDR X0, [X0 + 0x2E0]
	0x03236010 BL 0x1C16D08
	0x03236014 MOV X2, X0
	0x03236018 MOV X0, X19
	0x0323601C MOV X1, X20
	0x03236020 MOV X3, X31
	0x03236024 BL 0x3315F7C
	0x03236028 B 0x3236070
	0x0323602C ADRP X0, 0xEC5000
	0x03236030 LDR X0, [X0 + 0x760]
	0x03236034 BL 0x1C16D08
	0x03236038 BL 0x1C16F10
	0x0323603C MOV X19, X0
	0x03236040 ADRP X0, 0xEE5000
	0x03236044 LDR X0, [X0 + 0x648]
	0x03236048 BL 0x1C16D08
	0x0323604C MOV X20, X0
	0x03236050 ADRP X0, 0xEE5000
	0x03236054 LDR X0, [X0 + 0x670]
	0x03236058 BL 0x1C16D08
	0x0323605C MOV X2, X0
	0x03236060 MOV X0, X19
	0x03236064 MOV X1, X20
	0x03236068 MOV X3, X31
	0x0323606C BL 0x3311888
	0x03236070 ADRP X0, 0xEEC000
	0x03236074 LDR X0, [X0 + 0x668]
	0x03236078 BL 0x1C16D08
	0x0323607C MOV X1, X0
	0x03236080 MOV X0, X19
	0x03236084 BL 0x1C16DEC
	0x03236088 STP X30, X27, [X31 - 0x50]!
	0x0323608C STP X26, X25, [X31 + 0x10]
	0x03236090 STP X24, X23, [X31 + 0x20]
	0x03236094 STP X22, X21, [X31 + 0x30]
	0x03236098 STP X20, X19, [X31 + 0x40]
	0x0323609C ADRP X25, 0x11A6000
	0x032360A0 LDRB W8, [X25 + 0x3E6]
	0x032360A4 MOV W19, W5
	0x032360A8 MOV X24, X4
	0x032360AC MOV W20, W3
	0x032360B0 MOV W21, W2
	0x032360B4 MOV X22, X1
	0x032360B8 MOV X23, X0
	0x032360BC TBNZ X8, 0x0, 0x32360E0
	0x032360C0 ADRP X0, 0xEEB000
	0x032360C4 LDR X0, [X0 + 0x830]
	0x032360C8 BL 0x1C16CF4
	0x032360CC ADRP X0, 0xEEC000
	0x032360D0 LDR X0, [X0 + 0x2F8]
	0x032360D4 BL 0x1C16CF4
	0x032360D8 MOVZ W8, 0x1
	0x032360DC STRB W8, [X25 + 0x3E6]
	0x032360E0 CBZ X22, 0x32361B0
	0x032360E4 CBZ X24, 0x32361B0
	0x032360E8 TBNZ X20, 0x1F, 0x3236208
	0x032360EC TBNZ X21, 0x1F, 0x3236208
	0x032360F0 LDR W8, [X22 + 0x10]
	0x032360F4 SUB W8, W8, W21
	0x032360F8 CMP W8, W20
	0x032360FC B.LT 0x3236274
	0x03236100 TBNZ X19, 0x1F, 0x3236180
	0x03236104 LDR W8, [X24 + 0x18]
	0x03236108 SUBS W25, W8, W19
	0x0323610C B.LT 0x3236180
	0x03236110 ADRP X26, 0xEEC000
	0x03236114 ADRP X27, 0xEEB000
	0x03236118 LDR X26, [X26 + 0x2F8]
	0x0323611C LDR X27, [X27 + 0x830]
	0x03236120 MOV X0, X31
	0x03236124 BL 0x32C1424
	0x03236128 LDR X1, [X26]
	0x0323612C MOV W26, W0
	0x03236130 MOV X0, X24
	0x03236134 BL 0x25FB4C0
	0x03236138 LDR X2, [X27]
	0x0323613C BL 0x2218CF4
	0x03236140 LDR X8, [X23]
	0x03236144 ADD X3, X0, W19, UXTW
	0x03236148 MOV X0, X23
	0x0323614C MOV W2, W20
	0x03236150 LDR X7, [X8 + 0x288]
	0x03236154 LDR X6, [X8 + 0x290]
	0x03236158 ADD X8, X22, W21, 0x1, SXTW
	0x0323615C ADD X1, X8, W26, SXTW
	0x03236160 MOV W4, W25
	0x03236164 LDP X20, X19, [X31 + 0x40]
	0x03236168 LDP X22, X21, [X31 + 0x30]
	0x0323616C LDP X24, X23, [X31 + 0x20]
	0x03236170 LDP X26, X25, [X31 + 0x10]
	0x03236174 MOV X5, X31
	0x03236178 LDP X30, X27, [X31], #0x50
	0x0323617C BR X7
	0x03236180 ADRP X0, 0xEC5000
	0x03236184 LDR X0, [X0 + 0x760]
	0x03236188 BL 0x1C16D08
	0x0323618C BL 0x1C16F10
	0x03236190 MOV X19, X0
	0x03236194 ADRP X0, 0xEEC000
	0x03236198 LDR X0, [X0 + 0x300]
	0x0323619C BL 0x1C16D08
	0x032361A0 MOV X20, X0
	0x032361A4 ADRP X0, 0xEE5000
	0x032361A8 LDR X0, [X0 + 0x660]
	0x032361AC B 0x32362A0
	0x032361B0 ADRP X8, 0xEEC000
	0x032361B4 ADRP X9, 0xEE6000
	0x032361B8 LDR X8, [X8 + 0x308]
	0x032361BC LDR X9, [X9 + 0xCC0]
	0x032361C0 CMP X22, 0x0
	0x032361C4 CSEL X0, X9, X8, EQ
	0x032361C8 BL 0x1C16D08
	0x032361CC MOV X19, X0
	0x032361D0 ADRP X0, 0xEC2000
	0x032361D4 LDR X0, [X0 + 0x528]
	0x032361D8 BL 0x1C16D08
	0x032361DC BL 0x1C16F10
	0x032361E0 MOV X20, X0
	0x032361E4 ADRP X0, 0xEEC000
	0x032361E8 LDR X0, [X0 + 0x2E0]
	0x032361EC BL 0x1C16D08
	0x032361F0 MOV X2, X0
	0x032361F4 MOV X0, X20
	0x032361F8 MOV X1, X19
	0x032361FC MOV X3, X31
	0x03236200 BL 0x3315F7C
	0x03236204 B 0x323625C
	0x03236208 ADRP X8, 0xEEC000
	0x0323620C ADRP X9, 0xEEC000
	0x03236210 LDR X8, [X8 + 0x310]
	0x03236214 LDR X9, [X9 + 0x318]
	0x03236218 CMP W21, 0x0
	0x0323621C CSEL X0, X9, X8, LT
	0x03236220 BL 0x1C16D08
	0x03236224 MOV X19, X0
	0x03236228 ADRP X0, 0xEC5000
	0x0323622C LDR X0, [X0 + 0x760]
	0x03236230 BL 0x1C16D08
	0x03236234 BL 0x1C16F10
	0x03236238 MOV X20, X0
	0x0323623C ADRP X0, 0xEE5000
	0x03236240 LDR X0, [X0 + 0x670]
	0x03236244 BL 0x1C16D08
	0x03236248 MOV X2, X0
	0x0323624C MOV X0, X20
	0x03236250 MOV X1, X19
	0x03236254 MOV X3, X31
	0x03236258 BL 0x3311888
	0x0323625C ADRP X0, 0xEEC000
	0x03236260 LDR X0, [X0 + 0x670]
	0x03236264 BL 0x1C16D08
	0x03236268 MOV X1, X0
	0x0323626C MOV X0, X20
	0x03236270 BL 0x1C16DEC
	0x03236274 ADRP X0, 0xEC5000
	0x03236278 LDR X0, [X0 + 0x760]
	0x0323627C BL 0x1C16D08
	0x03236280 BL 0x1C16F10
	0x03236284 MOV X19, X0
	0x03236288 ADRP X0, 0xEE6000
	0x0323628C LDR X0, [X0 + 0xCC0]
	0x03236290 BL 0x1C16D08
	0x03236294 MOV X20, X0
	0x03236298 ADRP X0, 0xEEC000
	0x0323629C LDR X0, [X0 + 0x108]
	0x032362A0 BL 0x1C16D08
	0x032362A4 MOV X2, X0
	0x032362A8 MOV X0, X19
	0x032362AC MOV X1, X20
	0x032362B0 MOV X3, X31
	0x032362B4 BL 0x3311888
	0x032362B8 ADRP X0, 0xEEC000
	0x032362BC LDR X0, [X0 + 0x670]
	0x032362C0 BL 0x1C16D08
	0x032362C4 MOV X1, X0
	0x032362C8 MOV X0, X19
	0x032362CC BL 0x1C16DEC
	0x032362D0 STR X30, [X31 - 0x50]!

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X23, 0x11A8000
	013 Move W8, [X23+987]
	014 Move W19, W4
	015 Move W24, W3
	016 Move X22, X2
	017 Move X20, X1
	018 Move X21, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {34}
	023 Move X0, 0xEE8000
	024 Move X0, [X0+3792]
	025 Call 0x1C17CF4
	026 Move X0, 0xEBF000
	027 Move X0, [X0+3672]
	028 Call 0x1C17CF4
	029 Move X0, 0xEC0000
	030 Move X0, [X0+632]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X23+987], W8
	034 Move [X31+8], X31
	035 Move W9, [X21+32]
	036 Move W8, [X21+36]
	037 Add W9, W9, W8
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move TEMP, X19
	040 And TEMP, TEMP, -2147483648
	041 Compare TEMP, -2147483648
	042 JumpIfEqual {162}
	043 Subtract W9, W9, W19
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Compare X20, 0
	046 JumpIfEqual {179}
	047 Move W9, [X20+16]
	048 Compare W9, 0
	049 JumpIfEqual {191}
	050 Compare X22, 0
	051 JumpIfNotEqual {59}
	052 Move X9, 0xEC0000
	053 Move X9, [X9+632]
	054 Move X9, [X9]
	055 Move X9, [X9+184]
	056 Move X22, [X9]
	057 Compare X22, 0
	058 JumpIfEqual {140}
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X23, X21
	061 Move [X31+8], X31
	062 Move X23, X21
	063 Move X23, [X23+24]
	064 Compare X23, 0
	065 JumpIfEqual {140}
	066 Move W8, [X23+36]
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move X26, 0xEBF000
	069 Move X27, 0xEE7000
	070 Move X26, [X26+3672]
	071 Move X27, [X27+3792]
	072 Subtract W24, W24, W8
	073 Move W25, W31
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X0, X21
	076 Move X1, X23
	077 Move W2, W24
	078 Move W3, W19
	079 Move X4, X20
	080 Call StringBuilder.StartsWith, X0, X1, X2, X3, X4
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfNotEqual {99}
	085 Move X0, [X31+8]
	086 Compare X0, 0
	087 JumpIfEqual {103}
	088 Move W8, [X0+24]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Add W8, W8, W8
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move X2, [X27]
	093 NotImplemented "Instruction CINC not yet implemented."
	094 NotImplemented "Instruction SBFM not yet implemented."
	095 Add W1, W8, 4
	096 Add X0, X31, 8
	097 Call Array.Resize, X0, X1
	098 Move X0, [X31+8]
	099 Add W24, W24, 1
	100 Subtract W19, W19, 1
	101 Compare W19, 0
	102 JumpIfNotEqual {119}
	103 Move X0, [X26]
	104 Move W1, 5
	105 Call 0x1C17D6C
	106 Move [X31+8], X0
	107 Compare X0, 0
	108 JumpIfEqual {140}
	109 Move W8, [X0+24]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Add X8, X0, W25
	112 Move [X8+32], W24
	113 Move W8, [X20+16]
	114 Add W25, W25, 1
	115 Add W24, W8, W24
	116 Subtract W19, W19, W8
	117 Compare W19, 0
	118 JumpIfEqual {121}
	119 Move W8, [X23+32]
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move W8, [X23+36]
	122 Move X1, [X31+8]
	123 Move W4, [X20+16]
	124 Move X0, X21
	125 Move W2, W25
	126 Move X3, X23
	127 Move X5, X22
	128 Add W24, W8, W24
	129 Call StringBuilder.ReplaceAllInChunk, X0, X1, X2, X3, X4, X5
	130 Move W8, [X22+16]
	131 Move W9, [X20+16]
	132 Move X23, X21
	133 Subtract W8, W8, W9
	134 NotImplemented "Instruction MADD not yet implemented."
	135 Move W9, [X23+36]
	136 Subtract W24, W8, W9
	137 Move X23, [X23+24]
	138 Compare X23, 0
	139 JumpIfNotEqual {135}
	140 Call 0x1C17F20
	141 Move X0, X21
	142 Move X20, [X31+80]
	143 Move X19, [X31+88]
	144 Move X22, [X31+64]
	145 Move X21, [X31+72]
	146 Move X24, [X31+48]
	147 Move X23, [X31+56]
	148 Move X26, [X31+32]
	149 Move X25, [X31+40]
	150 Move X30, [X31+16]
	151 Move X27, [X31+24]
	152 Add X31, X31, 96
	153 Return X0
	154 Call 0x1C17F28
	155 Move X0, 0xEC6000
	156 Move X0, [X0+1888]
	157 Call 0x1C17D08
	158 Call 0x1C17F10
	159 Move X19, X0
	160 Move X0, 0xEE6000
	161 Move X0, [X0+1624]
	162 Move X0, 0xEC6000
	163 Move X0, [X0+1888]
	164 Call 0x1C17D08
	165 Call 0x1C17F10
	166 Move X19, X0
	167 Move X0, 0xEE6000
	168 Move X0, [X0+1608]
	169 Call 0x1C17D08
	170 Move X20, X0
	171 Move X0, 0xEE6000
	172 Move X0, [X0+1632]
	173 Call 0x1C17D08
	174 Move X2, X0
	175 Move X0, X19
	176 Move X1, X20
	177 Move X3, X31
	178 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	179 Move X0, 0xEC3000
	180 Move X0, [X0+1320]
	181 Call 0x1C17D08
	182 Call 0x1C17F10
	183 Move X19, X0
	184 Move X0, 0xEED000
	185 Move X0, [X0+328]
	186 Call 0x1C17D08
	187 Move X1, X0
	188 Move X0, X19
	189 Move X2, X31
	190 Call ArgumentNullException..ctor, X0, X1
	191 Move X0, 0xEC6000
	192 Move X0, [X0+1400]
	193 Call 0x1C17D08
	194 Call 0x1C17F10
	195 Move X19, X0
	196 Move X0, 0xEED000
	197 Move X0, [X0+1576]
	198 Call 0x1C17D08
	199 Move X20, X0
	200 Move X0, 0xEED000
	201 Move X0, [X0+328]
	202 Call 0x1C17D08
	203 Move X2, X0
	204 Move X0, X19
	205 Move X1, X20
	206 Move X3, X31
	207 Call ArgumentException..ctor, X0, X1, X2
	208 Move X0, 0xEED000
	209 Move X0, [X0+1584]
	210 Call 0x1C17D08
	211 Move X1, X0
	212 Move X0, X19
	213 Call 0x1C17DEC

Method: System.Text.StringBuilder Append(System.Char* value, System.Int32 valueCount)

Disassembly:
	0x03234290 STP X22, X21, [X31 + 0xA0]
	0x03234294 STP X20, X19, [X31 + 0xB0]
	0x03234298 ADRP X19, 0x11A8000
	0x0323429C LDRB W8, [X19 + 0x3DA]
	0x032342A0 MOV X20, X2
	0x032342A4 MOV X22, X1
	0x032342A8 MOV X25, X0
	0x032342AC STR X3, [X31 + 0x40]
	0x032342B0 TBNZ X8, 0x0, 0x3234334
	0x032342B4 ADRP X0, 0xEEE000
	0x032342B8 LDR X0, [X0 + 0x5E0]
	0x032342BC BL 0x1C16CF4
	0x032342C0 ADRP X0, 0xEEE000
	0x032342C4 LDR X0, [X0 + 0x5E8]
	0x032342C8 BL 0x1C16CF4
	0x032342CC ADRP X0, 0xEEE000
	0x032342D0 LDR X0, [X0 + 0x5F0]
	0x032342D4 BL 0x1C16CF4
	0x032342D8 ADRP X0, 0xEE9000
	0x032342DC LDR X0, [X0 + 0xEF8]
	0x032342E0 BL 0x1C16CF4
	0x032342E4 ADRP X0, 0xEEE000
	0x032342E8 LDR X0, [X0 + 0x5F8]
	0x032342EC BL 0x1C16CF4
	0x032342F0 ADRP X0, 0xEEE000
	0x032342F4 LDR X0, [X0 + 0x98]
	0x032342F8 BL 0x1C16CF4
	0x032342FC ADRP X0, 0xEEE000
	0x03234300 LDR X0, [X0 + 0x28]
	0x03234304 BL 0x1C16CF4
	0x03234308 ADRP X0, 0xEBF000
	0x0323430C LDR X0, [X0 + 0x8F0]
	0x03234310 BL 0x1C16CF4
	0x03234314 ADRP X0, 0xEC1000
	0x03234318 LDR X0, [X0 + 0x278]
	0x0323431C BL 0x1C16CF4
	0x03234320 ADRP X0, 0xEBF000
	0x03234324 LDR X0, [X0 + 0x6C0]
	0x03234328 BL 0x1C16CF4
	0x0323432C MOVZ W8, 0x1
	0x03234330 STRB W8, [X19 + 0x3DA]
	0x03234334 STR W31, [X31 + 0x5C]
	0x03234338 CBZ X20, 0x3234D64
	0x0323433C LDR W23, [X20 + 0x10]
	0x03234340 STR X22, [X31 + 0x20]
	0x03234344 CBZ X22, 0x3234410
	0x03234348 ADRP X8, 0xEBF000
	0x0323434C LDR X8, [X8 + 0x6C0]
	0x03234350 ADRP X21, 0xEEE000
	0x03234354 LDR X0, [X8]
	0x03234358 ADRP X8, 0xEEE000
	0x0323435C LDR X8, [X8 + 0x5E0]
	0x03234360 LDR W9, [X0 + 0xE0]
	0x03234364 LDR X19, [X8]
	0x03234368 LDR X21, [X21 + 0x5F0]
	0x0323436C CBNZ W9, 0x3234374
	0x03234370 BL 0x1C16DFC
	0x03234374 MOV X0, X19
	0x03234378 MOV X1, X31
	0x0323437C BL 0x338C698
	0x03234380 LDR X8, [X22]
	0x03234384 LDR X1, [X21]
	0x03234388 MOV X19, X0
	0x0323438C LDRH W9, [X8 + 0x12E]
	0x03234390 CBZ X9, 0x32343B4
	0x03234394 LDR X10, [X8 + 0xB0]
	0x03234398 ADD X10, X10, 0x8
	0x0323439C LDUR X11, [X10 - 0x8]
	0x032343A0 CMP X11, X1
	0x032343A4 B.EQ 0x32343C4
	0x032343A8 SUBS X9, X9, 0x1
	0x032343AC ADD X10, X10, 0x10
	0x032343B0 B.NE 0x323439C
	0x032343B4 MOV X0, X22
	0x032343B8 MOV W2, W31
	0x032343BC BL 0x1C5C788
	0x032343C0 B 0x32343D0
	0x032343C4 LDRSW X9, [X10]
	0x032343C8 ADD X8, X8, X9, 0x4, LSL
	0x032343CC ADD X0, X8, 0x138
	0x032343D0 LDP X8, X2, [X0]
	0x032343D4 MOV X0, X22
	0x032343D8 MOV X1, X19
	0x032343DC BLR X8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move TEMP, X2
	008 And TEMP, TEMP, -2147483648
	009 Compare TEMP, -2147483648
	010 JumpIfEqual {57}
	011 Move W21, W2
	012 Move W2, [X0+32]
	013 Move W8, [X0+36]
	014 Move W9, [X0+40]
	015 Move X19, X0
	016 Add W22, W2, W21
	017 Add W8, W22, W8
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X20, X1
	021 Move X1, [X19+16]
	022 Compare X1, 0
	023 JumpIfEqual {56}
	024 Move W8, [X1+24]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Subtract W23, W8, W2
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X0, X20
	029 Move W3, W23
	030 Call StringBuilder.ThreadSafeCopy, X0, X1, X2, X3
	031 Move X8, [X19+16]
	032 Compare X8, 0
	033 JumpIfEqual {56}
	034 Move X8, [X8+24]
	035 Move [X19+32], W8
	036 Subtract W22, W21, W23
	037 Move X0, X19
	038 Move W1, W22
	039 Call StringBuilder.ExpandByABlock, X0, X1
	040 Move X1, [X19+16]
	041 Add X0, X20, W23
	042 Move W2, W31
	043 Move W3, W22
	044 Move X0, X20
	045 Move W3, W21
	046 Call StringBuilder.ThreadSafeCopy, X0, X1, X2, X3
	047 Move [X19+32], W22
	048 Move X0, X19
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Move X23, [X31+56]
	055 Return X0
	056 Call 0x1C17F20
	057 Move X0, 0xEC8000
	058 Move X0, [X0+1888]
	059 Call 0x1C17D08
	060 Call 0x1C17F10
	061 Move X19, X0
	062 Move X0, 0xEEF000
	063 Move X0, [X0+1376]
	064 Call 0x1C17D08
	065 Move X20, X0
	066 Move X0, 0xEEF000
	067 Move X0, [X0+48]
	068 Move X0, 0xEC8000
	069 Move X0, [X0+1888]
	070 Call 0x1C17D08
	071 Call 0x1C17F10
	072 Move X19, X0
	073 Move X0, 0xEEF000
	074 Move X0, [X0+1376]
	075 Call 0x1C17D08
	076 Move X20, X0
	077 Move X0, 0xEEF000
	078 Move X0, [X0+1312]
	079 Call 0x1C17D08
	080 Move X2, X0
	081 Move X0, X19
	082 Move X1, X20
	083 Move X3, X31
	084 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	085 Move X0, 0xEEF000
	086 Move X0, [X0+1384]
	087 Call 0x1C17D08
	088 Move X1, X0
	089 Move X0, X19
	090 Call 0x1C17DEC

Method: System.Void Insert(System.Int32 index, System.Char* value, System.Int32 valueCount)

Disassembly:
	0x03235128 BL 0x1C16D6C
	0x0323512C STR X0, [X31 + 0x8]
	0x03235130 CBZ X0, 0x32351B4
	0x03235134 LDR W8, [X0 + 0x18]
	0x03235138 CMP W25, W8
	0x0323513C B.CS 0x32351D8
	0x03235140 ADD X8, X0, W25, 0x2, SXTW
	0x03235144 STR W24, [X8 + 0x20]
	0x03235148 LDR W8, [X20 + 0x10]
	0x0323514C ADD W25, W25, 0x1
	0x03235150 ADD W24, W8, W24
	0x03235154 SUB W19, W19, W8
	0x03235158 CBZ W19, 0x3235168
	0x0323515C LDR W8, [X23 + 0x20]
	0x03235160 CMP W24, W8
	0x03235164 B.LT 0x32350B0
	0x03235168 LDR W8, [X23 + 0x24]
	0x0323516C LDR X1, [X31 + 0x8]
	0x03235170 LDR W4, [X20 + 0x10]
	0x03235174 MOV X0, X21
	0x03235178 MOV W2, W25
	0x0323517C MOV X3, X23
	0x03235180 MOV X5, X22
	0x03235184 ADD W24, W8, W24
	0x03235188 BL 0x32353AC
	0x0323518C LDR W8, [X22 + 0x10]
	0x03235190 LDR W9, [X20 + 0x10]
	0x03235194 MOV X23, X21
	0x03235198 SUB W8, W8, W9
	0x0323519C MADD W8, W8, W25, W24
	0x032351A0 LDR W9, [X23 + 0x24]
	0x032351A4 SUBS W24, W8, W9
	0x032351A8 B.GE 0x32350AC
	0x032351AC LDR X23, [X23 + 0x18]
	0x032351B0 CBNZ X23, 0x32351A0
	0x032351B4 BL 0x1C16F20
	0x032351B8 MOV X0, X21
	0x032351BC LDP X20, X19, [X31 + 0x50]
	0x032351C0 LDP X22, X21, [X31 + 0x40]
	0x032351C4 LDP X24, X23, [X31 + 0x30]
	0x032351C8 LDP X26, X25, [X31 + 0x20]
	0x032351CC LDP X30, X27, [X31 + 0x10]
	0x032351D0 ADD X31, X31, 0x60
	0x032351D4 RET
	0x032351D8 BL 0x1C16F28
	0x032351DC ADRP X0, 0xEC6000
	0x032351E0 LDR X0, [X0 + 0x760]
	0x032351E4 BL 0x1C16D08
	0x032351E8 BL 0x1C16F10
	0x032351EC MOV X19, X0
	0x032351F0 ADRP X0, 0xEE6000
	0x032351F4 LDR X0, [X0 + 0x658]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move [X31+8], X31
	007 Move [X31+4], W31
	008 Move W9, [X0+32]
	009 Move W8, [X0+36]
	010 Add W8, W9, W8
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move W19, W3
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X21, X2
	015 Add X3, X31, 8
	016 Add X4, X31, 4
	017 Move W2, W19
	018 Move W5, W31
	019 Move X20, X0
	020 Call StringBuilder.MakeRoom, X0, X1, X2, X3, X4, X5
	021 Add X1, X31, 8
	022 Add X2, X31, 4
	023 Move X0, X20
	024 Move X3, X21
	025 Move W4, W19
	026 Call StringBuilder.ReplaceInPlaceAtChunk, X0, X1, X2, X3, X4
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X30, [X31+16]
	030 Move X21, [X31+24]
	031 Add X31, X31, 48
	032 Return 
	033 Move X0, 0xEC7000
	034 Move X0, [X0+1888]
	035 Call 0x1C17D08
	036 Call 0x1C17F10
	037 Move X19, X0
	038 Move X0, 0xECA000
	039 Move X0, [X0+304]
	040 Call 0x1C17D08
	041 Move X20, X0
	042 Move X0, 0xEE7000
	043 Move X0, [X0+1632]
	044 Call 0x1C17D08
	045 Move X2, X0
	046 Move X0, X19
	047 Move X1, X20
	048 Move X3, X31
	049 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	050 Move X0, 0xEEE000
	051 Move X0, [X0+1496]
	052 Call 0x1C17D08
	053 Move X1, X0
	054 Move X0, X19
	055 Call 0x1C17DEC

Method: System.Void ReplaceAllInChunk(System.Int32[] replacements, System.Int32 replacementsCount, System.Text.StringBuilder sourceChunk, System.Int32 removeCount, System.String value)

Disassembly:
	0x032363AC LDP X20, X19, [X31 + 0x40]
	0x032363B0 LDP X22, X21, [X31 + 0x30]
	0x032363B4 LDP X24, X23, [X31 + 0x20]
	0x032363B8 LDP X26, X25, [X31 + 0x10]
	0x032363BC MOV X5, X31
	0x032363C0 LDR X30, [X31], #0x50
	0x032363C4 BR X7
	0x032363C8 LDP X20, X19, [X31 + 0x40]
	0x032363CC LDP X22, X21, [X31 + 0x30]
	0x032363D0 LDP X24, X23, [X31 + 0x20]
	0x032363D4 LDP X26, X25, [X31 + 0x10]
	0x032363D8 MOV W0, W31
	0x032363DC LDR X30, [X31], #0x50
	0x032363E0 RET
	0x032363E4 ADRP X0, 0xEC5000
	0x032363E8 LDR X0, [X0 + 0x760]
	0x032363EC BL 0x1C16D08
	0x032363F0 BL 0x1C16F10
	0x032363F4 MOV X19, X0
	0x032363F8 ADRP X0, 0xEEC000
	0x032363FC LDR X0, [X0 + 0x300]
	0x03236400 BL 0x1C16D08
	0x03236404 MOV X20, X0
	0x03236408 ADRP X0, 0xEE5000
	0x0323640C LDR X0, [X0 + 0x660]
	0x03236410 B 0x3236504
	0x03236414 ADRP X8, 0xEEC000
	0x03236418 ADRP X9, 0xEEC000
	0x0323641C LDR X8, [X8 + 0x308]
	0x03236420 LDR X9, [X9 + 0x2D8]
	0x03236424 CMP X24, 0x0
	0x03236428 CSEL X0, X9, X8, EQ
	0x0323642C BL 0x1C16D08
	0x03236430 MOV X19, X0
	0x03236434 ADRP X0, 0xEC2000
	0x03236438 LDR X0, [X0 + 0x528]
	0x0323643C BL 0x1C16D08
	0x03236440 BL 0x1C16F10
	0x03236444 MOV X20, X0
	0x03236448 ADRP X0, 0xEEC000
	0x0323644C LDR X0, [X0 + 0x2E0]
	0x03236450 BL 0x1C16D08
	0x03236454 MOV X2, X0
	0x03236458 MOV X0, X20
	0x0323645C MOV X1, X19
	0x03236460 MOV X3, X31
	0x03236464 BL 0x3315F7C
	0x03236468 B 0x32364C0
	0x0323646C ADRP X8, 0xEEC000
	0x03236470 ADRP X9, 0xEEC000
	0x03236474 LDR X8, [X8 + 0x310]
	0x03236478 LDR X9, [X9 + 0x318]
	0x0323647C CMP W21, 0x0
	0x03236480 CSEL X0, X9, X8, LT
	0x03236484 BL 0x1C16D08
	0x03236488 MOV X19, X0
	0x0323648C ADRP X0, 0xEC5000
	0x03236490 LDR X0, [X0 + 0x760]
	0x03236494 BL 0x1C16D08
	0x03236498 BL 0x1C16F10
	0x0323649C MOV X20, X0
	0x032364A0 ADRP X0, 0xEE5000
	0x032364A4 LDR X0, [X0 + 0x670]
	0x032364A8 BL 0x1C16D08
	0x032364AC MOV X2, X0
	0x032364B0 MOV X0, X20
	0x032364B4 MOV X1, X19
	0x032364B8 MOV X3, X31
	0x032364BC BL 0x3311888
	0x032364C0 ADRP X0, 0xEEC000
	0x032364C4 LDR X0, [X0 + 0x678]
	0x032364C8 BL 0x1C16D08
	0x032364CC MOV X1, X0
	0x032364D0 MOV X0, X20
	0x032364D4 BL 0x1C16DEC
	0x032364D8 ADRP X0, 0xEC5000
	0x032364DC LDR X0, [X0 + 0x760]
	0x032364E0 BL 0x1C16D08
	0x032364E4 BL 0x1C16F10
	0x032364E8 MOV X19, X0
	0x032364EC ADRP X0, 0xEEC000
	0x032364F0 LDR X0, [X0 + 0x2D8]
	0x032364F4 BL 0x1C16D08
	0x032364F8 MOV X20, X0
	0x032364FC ADRP X0, 0xEEC000
	0x03236500 LDR X0, [X0 + 0xE0]
	0x03236504 BL 0x1C16D08
	0x03236508 MOV X2, X0
	0x0323650C MOV X0, X19
	0x03236510 MOV X1, X20
	0x03236514 MOV X3, X31
	0x03236518 BL 0x3311888
	0x0323651C ADRP X0, 0xEEC000
	0x03236520 LDR X0, [X0 + 0x678]
	0x03236524 BL 0x1C16D08
	0x03236528 MOV X1, X0
	0x0323652C MOV X0, X19
	0x03236530 BL 0x1C16DEC
	0x03236534 STR X30, [X31 - 0x20]!
	0x03236538 STP X20, X19, [X31 + 0x10]
	0x0323653C CBZ X1, 0x3236568
	0x03236540 CBZ X3, 0x3236568
	0x03236544 TBNZ X4, 0x1F, 0x32365C0
	0x03236548 TBNZ X2, 0x1F, 0x32365C0
	0x0323654C LDR X8, [X0]
	0x03236550 LDP X20, X19, [X31 + 0x10]
	0x03236554 MOV X5, X31
	0x03236558 LDR X7, [X8 + 0x288]
	0x0323655C LDR X6, [X8 + 0x290]
	0x03236560 LDR X30, [X31], #0x20
	0x03236564 BR X7

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move X20, X5
	014 Compare X5, 0
	015 JumpIfEqual {126}
	016 Move X19, X0
	017 Move X0, X31
	018 Move W21, W4
	019 Move X22, X3
	020 Move W26, W2
	021 Move X23, X1
	022 Call RuntimeHelpers.get_OffsetToStringData
	023 Move W4, [X20+16]
	024 Move [X31+8], X22
	025 Compare X23, 0
	026 JumpIfEqual {126}
	027 Move W8, [X23+24]
	028 Compare W8, 0
	029 JumpIfEqual {98}
	030 Move W8, [X23+32]
	031 Subtract W9, W4, W21
	032 Multiply W24, W9, W26
	033 Move W25, W0
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move [X31+4], W8
	036 Compare X22, 0
	037 JumpIfEqual {126}
	038 Move W9, [X22+36]
	039 Add X3, X31, 8
	040 Add X4, X31, 4
	041 Move W5, 1
	042 Add W1, W9, W8
	043 Move X0, X19
	044 Move W2, W24
	045 Call StringBuilder.MakeRoom, X0, X1, X2, X3, X4, X5
	046 Move W4, [X20+16]
	047 Add X25, X20, W25
	048 Add X1, X31, 8
	049 Add X2, X31, 4
	050 Move X0, X19
	051 Move X3, X25
	052 Call StringBuilder.ReplaceInPlaceAtChunk, X0, X1, X2, X3, X4
	053 Move X9, [X23+24]
	054 Compare W9, 0
	055 JumpIfEqual {98}
	056 NotImplemented "Instruction CMP not yet implemented."
	057 NotImplemented "Instruction CSINC not yet implemented."
	058 Move X8, X31
	059 And X9, X9, 0
	060 Subtract W26, W10, 1
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Add X27, X8, 1
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Add X9, X23, X8
	065 Move W9, [X9+32]
	066 Add X8, X23, X8
	067 Move W8, [X8+36]
	068 Add W9, W9, W21
	069 Compare W24, 0
	070 JumpIfEqual {85}
	071 Compare X22, 0
	072 JumpIfEqual {126}
	073 Move X10, [X22+16]
	074 Compare X10, 0
	075 JumpIfEqual {126}
	076 Move W11, [X10+24]
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Add X10, X10, W9
	079 Add X3, X10, 32
	080 Subtract W4, W8, W9
	081 Add X1, X31, 8
	082 Add X2, X31, 4
	083 Move X0, X19
	084 Call StringBuilder.ReplaceInPlaceAtChunk, X0, X1, X2, X3, X4
	085 Move W10, [X31+4]
	086 Subtract W8, W8, W9
	087 Add W8, W8, W10
	088 Move [X31+4], W8
	089 Move W4, [X20+16]
	090 Add X1, X31, 8
	091 Add X2, X31, 4
	092 Move X0, X19
	093 Move X3, X25
	094 Call StringBuilder.ReplaceInPlaceAtChunk, X0, X1, X2, X3, X4
	095 Move W9, [X23+24]
	096 Move X8, X27
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Call 0x1C17F28
	099 Move TEMP, X24
	100 And TEMP, TEMP, -2147483648
	101 Compare TEMP, -2147483648
	102 JumpIfNotEqual {114}
	103 Move X8, [X31+8]
	104 Compare X8, 0
	105 JumpIfEqual {126}
	106 Move W8, [X8+36]
	107 Move W9, [X31+4]
	108 Subtract W2, W31, W24
	109 Add X3, X31, 8
	110 Add X4, X31, 4
	111 Add W1, W9, W8
	112 Move X0, X19
	113 Call StringBuilder.Remove, X0, X1, X2, X3, X4
	114 Move X20, [X31+80]
	115 Move X19, [X31+88]
	116 Move X22, [X31+64]
	117 Move X21, [X31+72]
	118 Move X24, [X31+48]
	119 Move X23, [X31+56]
	120 Move X26, [X31+32]
	121 Move X25, [X31+40]
	122 Move X30, [X31+16]
	123 Move X27, [X31+24]
	124 Add X31, X31, 96
	125 Return 
	126 Call 0x1C17F20

Method: System.Boolean StartsWith(System.Text.StringBuilder chunk, System.Int32 indexInChunk, System.Int32 count, System.String value)

Disassembly:
	0x032362D4 STP X26, X25, [X31 + 0x10]
	0x032362D8 STP X24, X23, [X31 + 0x20]
	0x032362DC STP X22, X21, [X31 + 0x30]
	0x032362E0 STP X20, X19, [X31 + 0x40]
	0x032362E4 ADRP X25, 0x11A6000
	0x032362E8 LDRB W8, [X25 + 0x3E7]
	0x032362EC MOV W20, W5
	0x032362F0 MOV X23, X4
	0x032362F4 MOV W19, W3
	0x032362F8 MOV W21, W2
	0x032362FC MOV X24, X1
	0x03236300 MOV X22, X0
	0x03236304 TBNZ X8, 0x0, 0x3236328
	0x03236308 ADRP X0, 0xEEB000
	0x0323630C LDR X0, [X0 + 0x830]
	0x03236310 BL 0x1C16CF4
	0x03236314 ADRP X0, 0xEEC000
	0x03236318 LDR X0, [X0 + 0x2F8]
	0x0323631C BL 0x1C16CF4
	0x03236320 MOVZ W8, 0x1
	0x03236324 STRB W8, [X25 + 0x3E7]
	0x03236328 CBZ X24, 0x3236414
	0x0323632C CBZ X23, 0x3236414
	0x03236330 TBNZ X19, 0x1F, 0x323646C
	0x03236334 TBNZ X21, 0x1F, 0x323646C
	0x03236338 LDR W8, [X24 + 0x18]
	0x0323633C SUB W9, W8, W21
	0x03236340 CMP W9, W19
	0x03236344 B.LT 0x32364D8
	0x03236348 TBNZ X20, 0x1F, 0x32363E4
	0x0323634C LDR W9, [X23 + 0x18]
	0x03236350 SUBS W25, W9, W20
	0x03236354 B.LT 0x32363E4
	0x03236358 CBZ W19, 0x32363C8
	0x0323635C ADRP X9, 0xEEC000
	0x03236360 LDR X9, [X9 + 0x2F8]
	0x03236364 ADRP X26, 0xEEB000
	0x03236368 LDR X26, [X26 + 0x830]
	0x0323636C CMP W8, 0x0
	0x03236370 LDR X1, [X9]
	0x03236374 ADD X9, X24, 0x20
	0x03236378 MOV X0, X23
	0x0323637C CSEL X24, X31, X9, EQ
	0x03236380 BL 0x25FB4C0
	0x03236384 LDR X2, [X26]
	0x03236388 BL 0x2218CF4
	0x0323638C LDR X8, [X22]
	0x03236390 ADD X1, X24, W21, 0x1, SXTW
	0x03236394 ADD X3, X0, W20, UXTW
	0x03236398 MOV X0, X22
	0x0323639C LDR X7, [X8 + 0x288]
	0x032363A0 LDR X6, [X8 + 0x290]
	0x032363A4 MOV W2, W19
	0x032363A8 MOV W4, W25

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Compare X4, 0
	009 JumpIfEqual {56}
	010 Move W8, [X4+16]
	011 Move X19, X4
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W20, W3
	014 Move W24, W2
	015 Move X22, X1
	016 Move X21, X0
	017 Move W23, W31
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Compare X22, 0
	020 JumpIfEqual {56}
	021 Move W8, [X22+32]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X0, X21
	024 Move X1, X22
	025 Call StringBuilder.Next, X0, X1
	026 Compare X0, 0
	027 JumpIfEqual {48}
	028 Move X22, X0
	029 Move W24, W31
	030 Move X0, X19
	031 Move W1, W23
	032 Move X2, X31
	033 Call String.get_Chars, X0, X1
	034 Move X8, [X22+16]
	035 Compare X8, 0
	036 JumpIfEqual {56}
	037 Move W9, [X8+24]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Add X8, X8, W24
	040 NotImplemented "Instruction LDRH not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move W8, [X19+16]
	043 Add W23, W23, 1
	044 Add W24, W24, 1
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move W0, 1
	047 Move W0, W31
	048 Move X20, [X31+48]
	049 Move X19, [X31+56]
	050 Move X22, [X31+32]
	051 Move X21, [X31+40]
	052 Move X24, [X31+16]
	053 Move X23, [X31+24]
	054 Move X30, [X31+64]
	055 Return X0
	056 Call 0x1C17F20
	057 Call 0x1C17F28

Method: System.Void ReplaceInPlaceAtChunk(ref System.Text.StringBuilder chunk, ref System.Int32 indexInChunk, System.Char* value, System.Int32 count)

Disassembly:
	0x03236814 B 0x323685C
	0x03236818 ADRP X0, 0xEC5000
	0x0323681C LDR X0, [X0 + 0x760]
	0x03236820 BL 0x1C16D08
	0x03236824 BL 0x1C16F10
	0x03236828 MOV X19, X0
	0x0323682C ADRP X0, 0xEE5000
	0x03236830 LDR X0, [X0 + 0x648]
	0x03236834 BL 0x1C16D08
	0x03236838 MOV X20, X0
	0x0323683C ADRP X0, 0xEE5000
	0x03236840 LDR X0, [X0 + 0x670]
	0x03236844 BL 0x1C16D08
	0x03236848 MOV X2, X0
	0x0323684C MOV X0, X19
	0x03236850 MOV X1, X20
	0x03236854 MOV X3, X31
	0x03236858 BL 0x3311888
	0x0323685C ADRP X0, 0xEEC000
	0x03236860 LDR X0, [X0 + 0x690]
	0x03236864 BL 0x1C16D08
	0x03236868 MOV X1, X0
	0x0323686C MOV X0, X19
	0x03236870 BL 0x1C16DEC
	0x03236874 STR X30, [X31 - 0x50]!
	0x03236878 STP X26, X25, [X31 + 0x10]
	0x0323687C STP X24, X23, [X31 + 0x20]
	0x03236880 STP X22, X21, [X31 + 0x30]
	0x03236884 STP X20, X19, [X31 + 0x40]
	0x03236888 ADRP X25, 0x11A6000
	0x0323688C LDRB W8, [X25 + 0x3E8]
	0x03236890 MOV W20, W5
	0x03236894 MOV X23, X4
	0x03236898 MOV W19, W3
	0x0323689C MOV W21, W2
	0x032368A0 MOV X24, X1
	0x032368A4 MOV X22, X0
	0x032368A8 TBNZ X8, 0x0, 0x32368CC
	0x032368AC ADRP X0, 0xEEC000
	0x032368B0 LDR X0, [X0 + 0x2C8]
	0x032368B4 BL 0x1C16CF4
	0x032368B8 ADRP X0, 0xEEC000
	0x032368BC LDR X0, [X0 + 0x2D0]
	0x032368C0 BL 0x1C16CF4
	0x032368C4 MOVZ W8, 0x1
	0x032368C8 STRB W8, [X25 + 0x3E8]
	0x032368CC CBZ X24, 0x32369B8
	0x032368D0 CBZ X23, 0x32369B8
	0x032368D4 TBNZ X19, 0x1F, 0x3236A10
	0x032368D8 TBNZ X21, 0x1F, 0x3236A10
	0x032368DC LDR W8, [X24 + 0x18]
	0x032368E0 SUB W9, W8, W21
	0x032368E4 CMP W9, W19
	0x032368E8 B.LT 0x3236A7C
	0x032368EC TBNZ X20, 0x1F, 0x3236988
	0x032368F0 LDR W9, [X23 + 0x18]
	0x032368F4 SUBS W25, W9, W20
	0x032368F8 B.LT 0x3236988
	0x032368FC CBZ W19, 0x323696C
	0x03236900 ADRP X9, 0xEEC000
	0x03236904 LDR X9, [X9 + 0x2D0]
	0x03236908 ADRP X26, 0xEEC000
	0x0323690C LDR X26, [X26 + 0x2C8]
	0x03236910 CMP W8, 0x0
	0x03236914 LDR X1, [X9]
	0x03236918 ADD X9, X24, 0x20

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X24, 0x11A7000
	011 Move W8, [X24+988]
	012 Move W19, W4
	013 Move X20, X3
	014 Move X21, X2
	015 Move X22, X1
	016 Move X23, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xEBE000
	022 Move X0, [X0+1448]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X24+988], W8
	026 Compare W19, 0
	027 JumpIfEqual {72}
	028 Move X1, [X22]
	029 Compare X1, 0
	030 JumpIfEqual {71}
	031 Move X25, 0xEBE000
	032 Move W26, [X21]
	033 Move X25, [X25+1448]
	034 Move X0, [X25]
	035 Move W24, [X1+32]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Subtract W0, W24, W26
	041 Move W1, W19
	042 Move X2, X31
	043 Call Math.Min, X0, X1
	044 Move X8, [X22]
	045 Compare X8, 0
	046 JumpIfEqual {71}
	047 Move X1, [X8+16]
	048 Move W2, [X21]
	049 Move W24, W0
	050 Move X0, X20
	051 Move W3, W24
	052 Call StringBuilder.ThreadSafeCopy, X0, X1, X2, X3
	053 Move W8, [X21]
	054 Add W26, W8, W24
	055 Move [X21], W26
	056 Move X1, [X22]
	057 Compare X1, 0
	058 JumpIfEqual {71}
	059 Move W8, [X1+32]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X0, X23
	062 Call StringBuilder.Next, X0, X1
	063 Move X1, X0
	064 Move W26, W31
	065 Move [X22], X0
	066 Move [X21], W31
	067 Subtract W19, W19, W24
	068 Add X20, X20, W24
	069 Compare X1, 0
	070 JumpIfNotEqual {34}
	071 Call 0x1C17F20
	072 Move X20, [X31+64]
	073 Move X19, [X31+72]
	074 Move X22, [X31+48]
	075 Move X21, [X31+56]
	076 Move X24, [X31+32]
	077 Move X23, [X31+40]
	078 Move X26, [X31+16]
	079 Move X25, [X31+24]
	080 Move X30, [X31+80]
	081 Return 

Method: System.Void ThreadSafeCopy(System.Char* sourcePtr, System.Char[] destination, System.Int32 destinationIndex, System.Int32 count)

Disassembly:
	0x03232F7C BL 0x1C16D08
	0x03232F80 MOV X1, X0
	0x03232F84 MOV X0, X19
	0x03232F88 BL 0x1C16DEC
	0x03232F8C LDR W9, [X0 + 0x20]
	0x03232F90 CMP W8, W9
	0x03232F94 B.GE 0x3232F30
	0x03232F98 LDR X9, [X0 + 0x10]
	0x03232F9C CBZ X9, 0x3232FC0
	0x03232FA0 LDR W10, [X9 + 0x18]
	0x03232FA4 CMP W8, W10
	0x03232FA8 B.CS 0x3232FC4
	0x03232FAC LDP X20, X19, [X31 + 0x10]
	0x03232FB0 ADD X8, X9, W8, 0x1, UXTW
	0x03232FB4 STRH W2, [X8 + 0x20]
	0x03232FB8 LDR X30, [X31], #0x20
	0x03232FBC RET
	0x03232FC0 BL 0x1C16F20
	0x03232FC4 BL 0x1C16F28
	0x03232FC8 STR X30, [X31 - 0x30]!
	0x03232FCC STP X22, X21, [X31 + 0x10]
	0x03232FD0 STP X20, X19, [X31 + 0x20]
	0x03232FD4 ADRP X21, 0x11AA000
	0x03232FD8 LDRB W8, [X21 + 0x3DF]
	0x03232FDC MOV W20, W1
	0x03232FE0 MOV X19, X0
	0x03232FE4 TBNZ X8, 0x0, 0x3233014
	0x03232FE8 ADRP X0, 0xECA000
	0x03232FEC LDR X0, [X0 + 0x8D8]
	0x03232FF0 BL 0x1C16CF4
	0x03232FF4 ADRP X0, 0xEC1000
	0x03232FF8 LDR X0, [X0 + 0x5A8]
	0x03232FFC BL 0x1C16CF4
	0x03233000 ADRP X0, 0xEC0000
	0x03233004 LDR X0, [X0 + 0x8F0]
	0x03233008 BL 0x1C16CF4
	0x0323300C MOVZ W8, 0x1
	0x03233010 STRB W8, [X21 + 0x3DF]
	0x03233014 LDP W9, W8, [X19 + 0x20]
	0x03233018 LDR W10, [X19 + 0x28]
	0x0323301C ADD W21, W9, W8
	0x03233020 ADD W8, W21, W20
	0x03233024 CMP W8, W10
	0x03233028 B.GT 0x32330D4
	0x0323302C CMP W8, W20
	0x03233030 B.LT 0x32330D4
	0x03233034 ADRP X8, 0xEC0000
	0x03233038 LDR X8, [X8 + 0x5A8]
	0x0323303C ADRP X22, 0xEC0000
	0x03233040 LDR X0, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Compare X1, 0
	006 JumpIfEqual {27}
	007 Move W9, [X1+24]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Add W10, W3, W2
	010 NotImplemented "Instruction CMP not yet implemented."
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X8, X0
	015 Add X9, X1, W2
	016 Add X0, X9, 32
	017 Move X1, X8
	018 Move W2, W3
	019 Move X3, X31
	020 Move X30, [X31+32]
	021 Call String.wstrcpy, X0, X1, X2
	022 Return 
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Return 
	027 Call 0x1C17F20
	028 Move X0, 0xECA000
	029 Move X0, [X0+1888]
	030 Call 0x1C17D08
	031 Call 0x1C17F10
	032 Move X19, X0
	033 Move X0, 0xEF1000
	034 Move X0, [X0+648]
	035 Call 0x1C17D08
	036 Move X20, X0
	037 Move X0, 0xEE9000
	038 Move X0, [X0+1632]
	039 Call 0x1C17D08
	040 Move X2, X0
	041 Move X0, X19
	042 Move X1, X20
	043 Move X3, X31
	044 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	045 Move X0, 0xEF0000
	046 Move X0, [X0+1160]
	047 Call 0x1C17D08
	048 Move X1, X0
	049 Move X0, X19
	050 Call 0x1C17DEC
	051 Call 0x1C17F28

Method: System.Void ThreadSafeCopy(System.Char[] source, System.Int32 sourceIndex, System.Span`1<System.Char> destination, System.Int32 destinationIndex, System.Int32 count)

Disassembly:
	0x032348CC LDR X25, [X31 + 0x30]
	0x032348D0 ADD X8, X0, W28, 0x1, SXTW
	0x032348D4 MOV X12, X31
	0x032348D8 STR X8, [X31 + 0x38]
	0x032348DC B 0x3234980
	0x032348E0 SUB W3, W25, 0x1
	0x032348E4 MOV X0, X24
	0x032348E8 MOV X1, X20
	0x032348EC MOV W2, W28
	0x032348F0 BL 0x323351C
	0x032348F4 LDR X8, [X24]
	0x032348F8 LDP X9, X1, [X8 + 0x168]
	0x032348FC BLR X9
	0x03234900 ADRP X8, 0x11A5000
	0x03234904 LDRB W8, [X8 + 0x762]
	0x03234908 MOV X10, X0
	0x0323490C CBNZ W8, 0x3234930
	0x03234910 ADRP X0, 0xEE6000
	0x03234914 LDR X0, [X0 + 0x290]
	0x03234918 MOV X19, X10
	0x0323491C BL 0x1C16CF4
	0x03234920 MOV X10, X19
	0x03234924 MOVZ W8, 0x1
	0x03234928 ADRP X9, 0x11A5000
	0x0323492C STRB W8, [X9 + 0x762]
	0x03234930 LDR X25, [X31 + 0x30]
	0x03234934 CBZ X10, 0x3234964
	0x03234938 MOV X0, X10
	0x0323493C MOV X1, X31
	0x03234940 MOV X27, X10
	0x03234944 BL 0x3225708
	0x03234948 LDR W8, [X27 + 0x10]
	0x0323494C MOV X19, X27
	0x03234950 MOVZ W27, 0x4240
	0x03234954 MOVK W27, 0xF0000
	0x03234958 STR X8, [X31 + 0x50]
	0x0323495C STR X0, [X31 + 0x38]
	0x03234960 B 0x3234970
	0x03234964 MOV X19, X10
	0x03234968 STR X31, [X31 + 0x38]
	0x0323496C STR X31, [X31 + 0x50]
	0x03234970 MOV X0, X24
	0x03234974 MOV W1, W31
	0x03234978 BL 0x3232ADC
	0x0323497C MOV X12, X19
	0x03234980 LDR X19, [X31 + 0x10]
	0x03234984 ADD W28, W21, 0x1
	0x03234988 CBZ X19, 0x3234A0C
	0x0323498C LDR X21, [X31 + 0x48]
	0x03234990 CBNZ X12, 0x32349B4
	0x03234994 LDR X8, [X31 + 0x50]
	0x03234998 CBZ W8, 0x32349B4
	0x0323499C LDR X1, [X31 + 0x38]
	0x032349A0 LDR X2, [X31 + 0x50]
	0x032349A4 MOV X0, X31
	0x032349A8 MOV X3, X31
	0x032349AC BL 0x322EB14
	0x032349B0 MOV X12, X0
	0x032349B4 LDR X8, [X19]
	0x032349B8 ADRP X10, 0xEEE000
	0x032349BC LDRH W9, [X8 + 0x12E]
	0x032349C0 LDR X10, [X10 + 0x5E8]
	0x032349C4 LDR X1, [X10]
	0x032349C8 CBZ X9, 0x32349EC
	0x032349CC LDR X10, [X8 + 0xB0]
	0x032349D0 ADD X10, X10, 0x8
	0x032349D4 LDUR X11, [X10 - 0x8]
	0x032349D8 CMP X11, X1
	0x032349DC B.EQ 0x3234A18
	0x032349E0 SUBS X9, X9, 0x1
	0x032349E4 ADD X10, X10, 0x10
	0x032349E8 B.NE 0x32349D4
	0x032349EC MOV X0, X19
	0x032349F0 MOV W2, W31
	0x032349F4 MOV X27, X12
	0x032349F8 BL 0x1C5C788
	0x032349FC MOV X12, X27
	0x03234A00 MOVZ W27, 0x4240
	0x03234A04 MOVK W27, 0xF0000
	0x03234A08 B 0x3234A24
	0x03234A0C LDR X21, [X31 + 0x48]
	0x03234A10 STR X12, [X31 + 0x28]
	0x03234A14 B 0x3234A48
	0x03234A18 LDRSW X9, [X10]
	0x03234A1C ADD X8, X8, X9, 0x4, LSL
	0x03234A20 ADD X0, X8, 0x138
	0x03234A24 LDP X8, X4, [X0]
	0x03234A28 LDR X3, [X31 + 0x20]
	0x03234A2C MOV X0, X19
	0x03234A30 MOV X1, X12

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0x11A9000
	010 Move W8, [X25+989]
	011 Move W19, W5
	012 Move W20, W4
	013 Move X21, X3
	014 Move X22, X2
	015 Move W23, W1
	016 Move X24, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0xEEF000
	022 Move X0, [X0+712]
	023 Call 0x1C17CF4
	024 Move X0, 0xEEF000
	025 Move X0, [X0+1416]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X25+989], W8
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Compare X24, 0
	031 JumpIfEqual {69}
	032 Move W8, [X24+24]
	033 Subtract W9, W8, W23
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Subtract W9, W21, W20
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X8, 0xEEF000
	039 Move X8, [X8+712]
	040 Move X0, X22
	041 Move X1, X21
	042 Move X2, [X8]
	043 Add X8, X24, W23
	044 Add X23, X8, 32
	045 Call MemoryMarshal.GetReference, X0
	046 Add X0, X0, W20
	047 Move X1, X23
	048 Move W2, W19
	049 Move X20, [X31+48]
	050 Move X19, [X31+56]
	051 Move X22, [X31+32]
	052 Move X21, [X31+40]
	053 Move X24, [X31+16]
	054 Move X23, [X31+24]
	055 Move X3, X31
	056 Move X30, [X31+64]
	057 Move X25, [X31+72]
	058 Call String.wstrcpy, X0, X1, X2
	059 Return 
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Move X25, [X31+72]
	068 Return 
	069 Call 0x1C17F20
	070 Move X0, 0xEC8000
	071 Move X0, [X0+1888]
	072 Call 0x1C17D08
	073 Call 0x1C17F10
	074 Move X19, X0
	075 Move X0, 0xEEF000
	076 Move X0, [X0+640]
	077 Move X0, 0xEC8000
	078 Move X0, [X0+1888]
	079 Call 0x1C17D08
	080 Call 0x1C17F10
	081 Move X19, X0
	082 Move X0, 0xEEF000
	083 Move X0, [X0+648]
	084 Call 0x1C17D08
	085 Move X20, X0
	086 Move X0, 0xEE8000
	087 Move X0, [X0+1632]
	088 Call 0x1C17D08
	089 Move X2, X0
	090 Move X0, X19
	091 Move X1, X20
	092 Move X3, X31
	093 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	094 Move X0, 0xEEF000
	095 Move X0, [X0+1424]
	096 Call 0x1C17D08
	097 Move X1, X0
	098 Move X0, X19
	099 Call 0x1C17DEC
	100 Call 0x1C17F28

Method: System.Text.StringBuilder FindChunkForIndex(System.Int32 index)

Disassembly:
	0x03233E60 BL 0x1C16CF4
	0x03233E64 MOVZ W8, 0x1
	0x03233E68 STRB W8, [X21 + 0x3D5]
	0x03233E6C LDR X2, [X22]
	0x03233E70 MOV X0, X20
	0x03233E74 MOV W1, W19
	0x03233E78 LDP X20, X19, [X31 + 0x20]
	0x03233E7C LDP X22, X21, [X31 + 0x10]
	0x03233E80 LDR X30, [X31], #0x30
	0x03233E84 B 0x228C8A4

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {9}
	004 Move W8, [X0+36]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X0, [X0+24]
	007 Compare X0, 0
	008 JumpIfNotEqual {4}
	009 Call 0x1C17F20
	010 Move X30, [X31+16]
	011 Return X0

Method: System.Span`1<System.Char> get_RemainingCurrentChunk()

Disassembly:
	0x0323695C LDP X26, X25, [X31 + 0x10]
	0x03236960 MOV X5, X31
	0x03236964 LDR X30, [X31], #0x50
	0x03236968 BR X7
	0x0323696C LDP X20, X19, [X31 + 0x40]
	0x03236970 LDP X22, X21, [X31 + 0x30]
	0x03236974 LDP X24, X23, [X31 + 0x20]
	0x03236978 LDP X26, X25, [X31 + 0x10]
	0x0323697C MOV W0, W31
	0x03236980 LDR X30, [X31], #0x50
	0x03236984 RET
	0x03236988 ADRP X0, 0xEC5000
	0x0323698C LDR X0, [X0 + 0x760]
	0x03236990 BL 0x1C16D08
	0x03236994 BL 0x1C16F10
	0x03236998 MOV X19, X0
	0x0323699C ADRP X0, 0xEEC000
	0x032369A0 LDR X0, [X0 + 0x318]
	0x032369A4 BL 0x1C16D08
	0x032369A8 MOV X20, X0
	0x032369AC ADRP X0, 0xEE5000
	0x032369B0 LDR X0, [X0 + 0x660]
	0x032369B4 B 0x3236AA8
	0x032369B8 ADRP X8, 0xEEC000
	0x032369BC ADRP X9, 0xEEC000
	0x032369C0 LDR X8, [X8 + 0x2D8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11A7000
	006 Move W8, [X20+990]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xEED000
	013 Move X0, [X0+1400]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+990], W8
	017 Move X20, [X19+16]
	018 Compare X20, 0
	019 JumpIfEqual {33}
	020 NotImplemented "Instruction LDRSW not yet implemented."
	021 Move W21, [X20+24]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X0, X31
	024 Call ThrowHelper.ThrowArgumentOutOfRangeException
	025 Subtract W1, W21, W19
	026 Add X8, X20, X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Add X0, X8, 32
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0
	033 Call 0x1C17F20

Method: System.Text.StringBuilder Next(System.Text.StringBuilder chunk)

Disassembly:
	0x0323691C MOV X0, X23
	0x03236920 CSEL X24, X31, X9, EQ
	0x03236924 BL 0x25FBC40
	0x03236928 LDR X2, [X26]
	0x0323692C BL 0x2218CFC
	0x03236930 LDR X8, [X22]
	0x03236934 ADD X1, X24, W21, SXTW
	0x03236938 ADD X3, X0, W20, 0x1, UXTW
	0x0323693C MOV X0, X22
	0x03236940 LDR X7, [X8 + 0x308]
	0x03236944 LDR X6, [X8 + 0x310]
	0x03236948 MOV W2, W19
	0x0323694C MOV W4, W25
	0x03236950 LDP X20, X19, [X31 + 0x40]
	0x03236954 LDP X22, X21, [X31 + 0x30]
	0x03236958 LDP X24, X23, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Compare X1, 0
	004 JumpIfEqual {15}
	005 Compare X0, 0
	006 JumpIfEqual {15}
	007 Move W9, [X1+32]
	008 Move W8, [X1+36]
	009 Add W8, W9, W8
	010 Move W9, [X0+36]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move X0, [X0+24]
	013 Compare X0, 0
	014 JumpIfNotEqual {10}
	015 Call 0x1C17F20
	016 Move X0, X31
	017 Move X30, [X31+16]
	018 Return X0

Method: System.Void ExpandByABlock(System.Int32 minBlockCharCount)

Disassembly:
	0x03233FC8 STR X30, [X31 - 0x10]!
	0x03233FCC CBZ X1, 0x3233FE4
	0x03233FD0 LDR X2, [X1 + 0x18]
	0x03233FD4 CBZ X2, 0x3233FE4
	0x03233FD8 CBZ W2, 0x3233FEC
	0x03233FDC ADD X1, X1, 0x20
	0x03233FE0 BL 0x3233290
	0x03233FE4 LDR X30, [X31], #0x10
	0x03233FE8 RET
	0x03233FEC BL 0x1C16F28
	0x03233FF0 STR X30, [X31 - 0x30]!
	0x03233FF4 STP X22, X21, [X31 + 0x10]
	0x03233FF8 STP X20, X19, [X31 + 0x20]
	0x03233FFC ADRP X22, 0x11A9000
	0x03234000 LDRB W8, [X22 + 0x3D9]
	0x03234004 MOV X19, X2
	0x03234008 MOV X21, X1
	0x0323400C MOV X20, X0
	0x03234010 TBNZ X8, 0x0, 0x3234034
	0x03234014 ADRP X0, 0xEEE000
	0x03234018 LDR X0, [X0 + 0x20]
	0x0323401C BL 0x1C16CF4
	0x03234020 ADRP X0, 0xEEE000
	0x03234024 LDR X0, [X0 + 0x28]
	0x03234028 BL 0x1C16CF4
	0x0323402C MOVZ W8, 0x1
	0x03234030 STRB W8, [X22 + 0x3D9]
	0x03234034 CMP W19, 0x1
	0x03234038 B.LT 0x3234064
	0x0323403C ADRP X8, 0xEEE000
	0x03234040 LDR X8, [X8 + 0x20]
	0x03234044 MOV X0, X21
	0x03234048 MOV X1, X19
	0x0323404C LDR X2, [X8]
	0x03234050 BL 0x2218CF8
	0x03234054 MOV X1, X0
	0x03234058 MOV X0, X20
	0x0323405C MOV W2, W19
	0x03234060 BL 0x3233290
	0x03234064 MOV X0, X20
	0x03234068 LDP X20, X19, [X31 + 0x20]
	0x0323406C LDP X22, X21, [X31 + 0x10]
	0x03234070 LDR X30, [X31], #0x30
	0x03234074 RET
	0x03234078 STP X30, X21, [X31 - 0x20]!
	0x0323407C STP X20, X19, [X31 + 0x10]
	0x03234080 LDP W9, W8, [X0 + 0x20]
	0x03234084 ADD W8, W9, W8
	0x03234088 CMP W8, W1
	0x0323408C B.CC 0x32340CC
	0x03234090 MOV X19, X0
	0x03234094 MOV X21, X2
	0x03234098 CBZ X2, 0x32340BC
	0x0323409C MOV X0, X31
	0x032340A0 MOV W20, W1
	0x032340A4 BL 0x32C1424
	0x032340A8 LDR W3, [X21 + 0x10]
	0x032340AC ADD X2, X21, W0, SXTW
	0x032340B0 MOV X0, X19
	0x032340B4 MOV W1, W20
	0x032340B8 BL 0x3234128
	0x032340BC MOV X0, X19
	0x032340C0 LDP X20, X19, [X31 + 0x10]
	0x032340C4 LDP X30, X21, [X31], #0x20
	0x032340C8 RET
	0x032340CC ADRP X0, 0xEC7000
	0x032340D0 LDR X0, [X0 + 0x760]
	0x032340D4 BL 0x1C16D08
	0x032340D8 BL 0x1C16F10
	0x032340DC MOV X19, X0
	0x032340E0 ADRP X0, 0xECA000
	0x032340E4 LDR X0, [X0 + 0x130]
	0x032340E8 BL 0x1C16D08
	0x032340EC MOV X20, X0
	0x032340F0 ADRP X0, 0xEE7000
	0x032340F4 LDR X0, [X0 + 0x660]
	0x032340F8 BL 0x1C16D08
	0x032340FC MOV X2, X0
	0x03234100 MOV X0, X19
	0x03234104 MOV X1, X20
	0x03234108 MOV X3, X31
	0x0323410C BL 0x3311888
	0x03234110 ADRP X0, 0xEEE000
	0x03234114 LDR X0, [X0 + 0x5D0]
	0x03234118 BL 0x1C16D08
	0x0323411C MOV X1, X0
	0x03234120 MOV X0, X19
	0x03234124 BL 0x1C16DEC
	0x03234128 SUB X31, X31, 0x30
	0x0323412C STP X30, X21, [X31 + 0x10]
	0x03234130 STP X20, X19, [X31 + 0x20]
	0x03234134 STR X31, [X31 + 0x8]
	0x03234138 STR W31, [X31 + 0x4]
	0x0323413C LDP W9, W8, [X0 + 0x20]
	0x03234140 ADD W8, W9, W8
	0x03234144 CMP W8, W1
	0x03234148 B.CC 0x323419C
	0x0323414C MOV W19, W3
	0x03234150 CMP W3, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11AA000
	007 Move W8, [X21+991]
	008 Move W20, W1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0xECA000
	015 Move X0, [X0+2264]
	016 Call 0x1C17CF4
	017 Move X0, 0xEC1000
	018 Move X0, [X0+1448]
	019 Call 0x1C17CF4
	020 Move X0, 0xEC0000
	021 Move X0, [X0+2288]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+991], W8
	025 Move W9, [X19+32]
	026 Move W8, [X19+36]
	027 Move W10, [X19+40]
	028 Add W21, W9, W8
	029 Add W8, W21, W20
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X8, 0xEC0000
	033 Move X8, [X8+1448]
	034 Move X22, 0xEC0000
	035 Move X0, [X8]
	036 Move W8, [X0+224]
	037 Move X22, [X22+2288]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move W1, 0x1F40
	042 Move W0, W21
	043 Move X2, X31
	044 Call Math.Min, X0, X1
	045 Move W1, W0
	046 Move W0, W20
	047 Move X2, X31
	048 Call Math.Max, X0, X1
	049 Move X8, [X22]
	050 Move W20, W0
	051 Move X0, X8
	052 Call 0x1C17F10
	053 Move X1, X19
	054 Move X21, X0
	055 Call StringBuilder..ctor, X0, X1
	056 Move W9, [X19+32]
	057 Move W8, [X19+36]
	058 Move [X19+24], X21
	059 Add W8, W9, W8
	060 Add W9, W8, W20
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move [X19+32], W31
	063 Move [X19+36], W8
	064 Move X8, 0xEC9000
	065 Move X8, [X8+2264]
	066 Move W1, W20
	067 Move X0, [X8]
	068 Call 0x1C17D6C
	069 Move [X19+16], X0
	070 Move X20, [X31+32]
	071 Move X19, [X31+40]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Return 
	076 Move X0, 0xEC8000
	077 Move X0, [X0+1888]
	078 Call 0x1C17D08
	079 Call 0x1C17F10
	080 Move X19, X0
	081 Move X0, 0xEEF000
	082 Move X0, [X0+1344]
	083 Call 0x1C17D08
	084 Move X20, X0
	085 Move X0, 0xEEA000
	086 Move X0, [X0+672]
	087 Call 0x1C17D08
	088 Move X2, X0
	089 Move X0, X19
	090 Move X1, X20
	091 Move X3, X31
	092 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	093 Move [X19+16], X31
	094 Move X0, 0xEC9000
	095 Move X0, [X0+3512]
	096 Call 0x1C17D08
	097 Call 0x1C17F10
	098 Move X1, X31
	099 Move X19, X0
	100 Call OutOfMemoryException..ctor, X0
	101 Move X0, 0xEEF000
	102 Move X0, [X0+1352]
	103 Call 0x1C17D08
	104 Move X1, X0
	105 Move X0, X19
	106 Call 0x1C17DEC

Method: System.Void .ctor(System.Text.StringBuilder from)

Disassembly:
	0x032369C4 LDR X9, [X9 + 0x308]
	0x032369C8 CMP X24, 0x0
	0x032369CC CSEL X0, X9, X8, EQ
	0x032369D0 BL 0x1C16D08
	0x032369D4 MOV X19, X0
	0x032369D8 ADRP X0, 0xEC2000
	0x032369DC LDR X0, [X0 + 0x528]
	0x032369E0 BL 0x1C16D08
	0x032369E4 BL 0x1C16F10
	0x032369E8 MOV X20, X0
	0x032369EC ADRP X0, 0xEEC000
	0x032369F0 LDR X0, [X0 + 0x2E0]
	0x032369F4 BL 0x1C16D08
	0x032369F8 MOV X2, X0
	0x032369FC MOV X0, X20
	0x03236A00 MOV X1, X19
	0x03236A04 MOV X3, X31
	0x03236A08 BL 0x3315F7C
	0x03236A0C B 0x3236A64

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move X1, X31
	006 Move X19, X0
	007 Call Object..ctor, X0
	008 Compare X20, 0
	009 JumpIfEqual {22}
	010 Move V0, [X20+32]
	011 Move [X19+32], D0
	012 Move X8, [X20+16]
	013 Move [X19+16], X8
	014 Move X8, [X20+24]
	015 Move [X19+24], X8
	016 Move W8, [X20+40]
	017 Move [X19+40], W8
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return 
	022 Call 0x1C17F20

Method: System.Void MakeRoom(System.Int32 index, System.Int32 count, out System.Text.StringBuilder chunk, out System.Int32 indexInChunk, System.Boolean doNotMoveFollowingChars)

Disassembly:
	0x03236568 ADRP X8, 0xEEC000
	0x0323656C ADRP X9, 0xEEC000
	0x03236570 LDR X8, [X8 + 0x2D8]
	0x03236574 LDR X9, [X9 + 0x308]
	0x03236578 CMP X3, 0x0
	0x0323657C CSEL X0, X9, X8, EQ
	0x03236580 BL 0x1C16D08
	0x03236584 MOV X19, X0
	0x03236588 ADRP X0, 0xEC2000
	0x0323658C LDR X0, [X0 + 0x528]
	0x03236590 BL 0x1C16D08
	0x03236594 BL 0x1C16F10
	0x03236598 MOV X20, X0
	0x0323659C ADRP X0, 0xEEC000
	0x032365A0 LDR X0, [X0 + 0x2E0]
	0x032365A4 BL 0x1C16D08
	0x032365A8 MOV X2, X0
	0x032365AC MOV X0, X20
	0x032365B0 MOV X1, X19
	0x032365B4 MOV X3, X31
	0x032365B8 BL 0x3315F7C
	0x032365BC B 0x3236614
	0x032365C0 ADRP X8, 0xEEC000
	0x032365C4 ADRP X9, 0xEEC000
	0x032365C8 LDR X8, [X8 + 0x328]
	0x032365CC LDR X9, [X9 + 0x310]
	0x032365D0 CMP W2, 0x0
	0x032365D4 CSEL X0, X9, X8, LT
	0x032365D8 BL 0x1C16D08
	0x032365DC MOV X19, X0
	0x032365E0 ADRP X0, 0xEC5000
	0x032365E4 LDR X0, [X0 + 0x760]
	0x032365E8 BL 0x1C16D08
	0x032365EC BL 0x1C16F10
	0x032365F0 MOV X20, X0
	0x032365F4 ADRP X0, 0xEE5000
	0x032365F8 LDR X0, [X0 + 0x670]
	0x032365FC BL 0x1C16D08
	0x03236600 MOV X2, X0
	0x03236604 MOV X0, X20
	0x03236608 MOV X1, X19
	0x0323660C MOV X3, X31
	0x03236610 BL 0x3311888
	0x03236614 ADRP X0, 0xEEC000
	0x03236618 LDR X0, [X0 + 0x680]
	0x0323661C BL 0x1C16D08
	0x03236620 MOV X1, X0
	0x03236624 MOV X0, X20
	0x03236628 BL 0x1C16DEC
	0x0323662C STR X30, [X31 - 0x20]!
	0x03236630 STP X20, X19, [X31 + 0x10]
	0x03236634 CBZ X1, 0x3236694
	0x03236638 TBNZ X3, 0x1F, 0x32366DC
	0x0323663C TBNZ X2, 0x1F, 0x32366DC
	0x03236640 LDR W8, [X1 + 0x18]
	0x03236644 SUB W9, W8, W2
	0x03236648 CMP W9, W3
	0x0323664C B.LT 0x3236748
	0x03236650 CBZ W3, 0x3236684
	0x03236654 LDR X9, [X0]
	0x03236658 LDP X20, X19, [X31 + 0x10]
	0x0323665C ADD X10, X1, 0x20
	0x03236660 CMP W8, 0x0
	0x03236664 LDR X5, [X9 + 0x2C8]
	0x03236668 LDR X4, [X9 + 0x2D0]
	0x0323666C CSEL X8, X31, X10, EQ
	0x03236670 ADD X1, X8, W2, SXTW
	0x03236674 MOV W2, W3
	0x03236678 MOV X3, X31
	0x0323667C LDR X30, [X31], #0x20
	0x03236680 BR X5
	0x03236684 LDP X20, X19, [X31 + 0x10]
	0x03236688 MOV W0, W31
	0x0323668C LDR X30, [X31], #0x20
	0x03236690 RET
	0x03236694 ADRP X0, 0xEC2000
	0x03236698 LDR X0, [X0 + 0x528]
	0x0323669C BL 0x1C16D08
	0x032366A0 BL 0x1C16F10
	0x032366A4 MOV X19, X0
	0x032366A8 ADRP X0, 0xEEC000
	0x032366AC LDR X0, [X0 + 0x308]
	0x032366B0 BL 0x1C16D08
	0x032366B4 MOV X20, X0
	0x032366B8 ADRP X0, 0xEEC000
	0x032366BC LDR X0, [X0 + 0x2E0]
	0x032366C0 BL 0x1C16D08
	0x032366C4 MOV X2, X0
	0x032366C8 MOV X0, X19
	0x032366CC MOV X1, X20
	0x032366D0 MOV X3, X31
	0x032366D4 BL 0x3315F7C
	0x032366D8 B 0x323678C
	0x032366DC ADRP X8, 0xEE5000
	0x032366E0 ADRP X9, 0xEC8000
	0x032366E4 LDR X8, [X8 + 0x648]
	0x032366E8 LDR X9, [X9 + 0x130]
	0x032366EC CMP W2, 0x0
	0x032366F0 CSEL X0, X9, X8, LT
	0x032366F4 BL 0x1C16D08
	0x032366F8 MOV X19, X0
	0x032366FC ADRP X0, 0xEC5000
	0x03236700 LDR X0, [X0 + 0x760]
	0x03236704 BL 0x1C16D08
	0x03236708 BL 0x1C16F10
	0x0323670C MOV X20, X0
	0x03236710 ADRP X0, 0xEE5000
	0x03236714 LDR X0, [X0 + 0x670]
	0x03236718 BL 0x1C16D08
	0x0323671C MOV X2, X0
	0x03236720 MOV X0, X20
	0x03236724 MOV X1, X19
	0x03236728 MOV X3, X31
	0x0323672C BL 0x3311888
	0x03236730 ADRP X0, 0xEEC000
	0x03236734 LDR X0, [X0 + 0x688]
	0x03236738 BL 0x1C16D08
	0x0323673C MOV X1, X0
	0x03236740 MOV X0, X20
	0x03236744 BL 0x1C16DEC
	0x03236748 ADRP X0, 0xEC5000
	0x0323674C LDR X0, [X0 + 0x760]
	0x03236750 BL 0x1C16D08
	0x03236754 BL 0x1C16F10
	0x03236758 MOV X19, X0
	0x0323675C ADRP X0, 0xEEC000
	0x03236760 LDR X0, [X0 + 0x308]
	0x03236764 BL 0x1C16D08
	0x03236768 MOV X20, X0
	0x0323676C ADRP X0, 0xEEC000
	0x03236770 LDR X0, [X0 + 0xE0]
	0x03236774 BL 0x1C16D08
	0x03236778 MOV X2, X0
	0x0323677C MOV X0, X19
	0x03236780 MOV X1, X20
	0x03236784 MOV X3, X31
	0x03236788 BL 0x3311888
	0x0323678C ADRP X0, 0xEEC000
	0x03236790 LDR X0, [X0 + 0x688]
	0x03236794 BL 0x1C16D08
	0x03236798 MOV X1, X0
	0x0323679C MOV X0, X19
	0x032367A0 BL 0x1C16DEC
	0x032367A4 STR X30, [X31 - 0x20]!
	0x032367A8 STP X20, X19, [X31 + 0x10]
	0x032367AC CBZ X1, 0x32367D0
	0x032367B0 TBNZ X2, 0x1F, 0x3236818
	0x032367B4 LDR X8, [X0]
	0x032367B8 LDP X20, X19, [X31 + 0x10]
	0x032367BC MOV X3, X31
	0x032367C0 LDR X5, [X8 + 0x2C8]
	0x032367C4 LDR X4, [X8 + 0x2D0]
	0x032367C8 LDR X30, [X31], #0x20
	0x032367CC BR X5
	0x032367D0 ADRP X0, 0xEC2000
	0x032367D4 LDR X0, [X0 + 0x528]
	0x032367D8 BL 0x1C16D08
	0x032367DC BL 0x1C16F10
	0x032367E0 MOV X19, X0
	0x032367E4 ADRP X0, 0xEEC000
	0x032367E8 LDR X0, [X0 + 0x308]
	0x032367EC BL 0x1C16D08
	0x032367F0 MOV X20, X0
	0x032367F4 ADRP X0, 0xEEC000
	0x032367F8 LDR X0, [X0 + 0x2E0]
	0x032367FC BL 0x1C16D08
	0x03236800 MOV X2, X0
	0x03236804 MOV X0, X19
	0x03236808 MOV X1, X20
	0x0323680C MOV X3, X31
	0x03236810 BL 0x3315F7C

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0x11A7000
	011 Move W8, [X25+992]
	012 Move W23, W5
	013 Move X20, X4
	014 Move X21, X3
	015 Move W19, W2
	016 Move W24, W1
	017 Move X22, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {30}
	022 Move X0, 0xEBE000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move X0, 0xEBE000
	026 Move X0, [X0+2288]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X25+992], W8
	030 Move W9, [X22+32]
	031 Move W8, [X22+36]
	032 Move W10, [X22+40]
	033 Add W8, W8, W19
	034 Add W8, W8, W9
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X10, 0xEBE000
	038 Move X26, 0xEBE000
	039 Move X10, [X10+1448]
	040 Move X26, [X26+2288]
	041 Move [X21], X22
	042 Move W8, [X22+36]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Add W8, W8, W19
	045 Move [X22+36], W8
	046 Move X22, [X22+24]
	047 Move [X21], X22
	048 Compare X22, 0
	049 JumpIfNotEqual {42}
	050 Call 0x1C17F20
	051 Subtract W12, W24, W8
	052 Move [X20], W12
	053 Move TEMP, X23
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfEqual {65}
	057 NotImplemented "Instruction LDRSW not yet implemented."
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X9, [X22+16]
	060 Compare X9, 0
	061 JumpIfEqual {50}
	062 Move W11, [X9+24]
	063 Subtract W13, W11, W8
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X0, [X10]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move W1, 16
	071 Move W0, W19
	072 Move X2, X31
	073 Call Math.Max, X0, X1
	074 Move X8, [X21]
	075 Compare X8, 0
	076 JumpIfEqual {50}
	077 Move W23, W0
	078 Move X0, [X26]
	079 Move W24, [X8+40]
	080 Move X25, [X8+24]
	081 Call 0x1C17F10
	082 Move W1, W23
	083 Move W2, W24
	084 Move X3, X25
	085 Move X22, X0
	086 Call StringBuilder..ctor, X0, X1, X2, X3
	087 Compare X22, 0
	088 JumpIfEqual {50}
	089 Move [X22+32], W19
	090 Move W1, [X20]
	091 Move W0, W19
	092 Move X2, X31
	093 Call Math.Min, X0, X1
	094 Move W23, W0
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move X8, [X21]
	097 Compare X8, 0
	098 JumpIfEqual {50}
	099 Move X8, [X8+16]
	100 Compare X8, 0
	101 JumpIfEqual {50}
	102 Move W9, [X8+24]
	103 Compare W9, 0
	104 JumpIfEqual {161}
	105 Move X1, [X22+16]
	106 Add X24, X8, 32
	107 Move X0, X24
	108 Move W2, W31
	109 Move W3, W23
	110 Call StringBuilder.ThreadSafeCopy, X0, X1, X2, X3
	111 Move W8, [X20]
	112 Subtract W25, W8, W23
	113 Move X8, [X21]
	114 Compare X8, 0
	115 JumpIfEqual {50}
	116 Move X1, [X8+16]
	117 Add X0, X24, W23
	118 Move W2, W31
	119 Move W3, W25
	120 Call StringBuilder.ThreadSafeCopy, X0, X1, X2, X3
	121 Move [X20], W25
	122 Move X8, [X21]
	123 Compare X8, 0
	124 JumpIfEqual {50}
	125 Move [X8+24], X22
	126 Move X8, [X21]
	127 Compare X8, 0
	128 JumpIfEqual {50}
	129 Move W9, [X8+36]
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Add W9, W9, W19
	132 Move [X8+36], W9
	133 Move [X21], X22
	134 Move [X20], W23
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Move X10, W12
	137 Add X12, X9, 30
	138 Subtract W13, W8, 1
	139 Move X14, X8
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Add W15, W19, W13
	142 NotImplemented "Instruction CMP not yet implemented."
	143 NotImplemented "Instruction LDRH not yet implemented."
	144 Subtract X14, X14, 1
	145 Add X15, X9, W15
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Subtract W13, W13, 1
	148 NotImplemented "Instruction STRH not yet implemented."
	149 Add W8, W8, W19
	150 Move [X22+32], W8
	151 Move X20, [X31+64]
	152 Move X19, [X31+72]
	153 Move X22, [X31+48]
	154 Move X21, [X31+56]
	155 Move X24, [X31+32]
	156 Move X23, [X31+40]
	157 Move X26, [X31+16]
	158 Move X25, [X31+24]
	159 Move X30, [X31+80]
	160 Return 
	161 Call 0x1C17F28
	162 Move X0, 0xEC6000
	163 Move X0, [X0+1888]
	164 Call 0x1C17D08
	165 Call 0x1C17F10
	166 Move X19, X0
	167 Move X0, 0xEED000
	168 Move X0, [X0+1344]
	169 Call 0x1C17D08
	170 Move X20, X0
	171 Move X0, 0xEE8000
	172 Move X0, [X0+672]
	173 Call 0x1C17D08
	174 Move X2, X0
	175 Move X0, X19
	176 Move X1, X20
	177 Move X3, X31
	178 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	179 Move X0, 0xEED000
	180 Move X0, [X0+1592]
	181 Call 0x1C17D08
	182 Move X1, X0
	183 Move X0, X19
	184 Call 0x1C17DEC

Method: System.Void .ctor(System.Int32 size, System.Int32 maxCapacity, System.Text.StringBuilder previousBlock)

Disassembly:
	0x03236A10 ADRP X8, 0xEEC000
	0x03236A14 ADRP X9, 0xEEC000
	0x03236A18 LDR X8, [X8 + 0x328]
	0x03236A1C LDR X9, [X9 + 0x300]
	0x03236A20 CMP W21, 0x0
	0x03236A24 CSEL X0, X9, X8, LT
	0x03236A28 BL 0x1C16D08
	0x03236A2C MOV X19, X0
	0x03236A30 ADRP X0, 0xEC5000
	0x03236A34 LDR X0, [X0 + 0x760]
	0x03236A38 BL 0x1C16D08
	0x03236A3C BL 0x1C16F10
	0x03236A40 MOV X20, X0
	0x03236A44 ADRP X0, 0xEE5000
	0x03236A48 LDR X0, [X0 + 0x670]
	0x03236A4C BL 0x1C16D08
	0x03236A50 MOV X2, X0
	0x03236A54 MOV X0, X20
	0x03236A58 MOV X1, X19
	0x03236A5C MOV X3, X31
	0x03236A60 BL 0x3311888
	0x03236A64 ADRP X0, 0xEEC000
	0x03236A68 LDR X0, [X0 + 0x698]
	0x03236A6C BL 0x1C16D08
	0x03236A70 MOV X1, X0
	0x03236A74 MOV X0, X20
	0x03236A78 BL 0x1C16DEC
	0x03236A7C ADRP X0, 0xEC5000
	0x03236A80 LDR X0, [X0 + 0x760]
	0x03236A84 BL 0x1C16D08
	0x03236A88 BL 0x1C16F10
	0x03236A8C MOV X19, X0
	0x03236A90 ADRP X0, 0xEEC000
	0x03236A94 LDR X0, [X0 + 0x308]
	0x03236A98 BL 0x1C16D08

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x11A7000
	009 Move X23, 0xEC7000
	010 Move W8, [X24+993]
	011 Move X23, [X23+2264]
	012 Move X19, X3
	013 Move W21, W2
	014 Move W22, W1
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xEC7000
	021 Move X0, [X0+2264]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+993], W8
	025 Move X0, X20
	026 Move X1, X31
	027 Call Object..ctor, X0
	028 Move X0, [X23]
	029 Move W1, W22
	030 Call 0x1C17D6C
	031 Move [X20+40], W21
	032 Move [X20+16], X0
	033 Move [X20+24], X19
	034 Compare X19, 0
	035 JumpIfEqual {40}
	036 Move W9, [X19+32]
	037 Move W8, [X19+36]
	038 Add W8, W9, W8
	039 Move [X20+36], W8
	040 Move X20, [X31+48]
	041 Move X19, [X31+56]
	042 Move X22, [X31+32]
	043 Move X21, [X31+40]
	044 Move X24, [X31+16]
	045 Move X23, [X31+24]
	046 Move X30, [X31+64]
	047 Return 

Method: System.Void Remove(System.Int32 startIndex, System.Int32 count, out System.Text.StringBuilder chunk, out System.Int32 indexInChunk)

Disassembly:
	0x03234B68 SUB W2, W29, W9
	0x03234B6C ADD W8, W9, W8
	0x03234B70 CMP W2, 0x1
	0x03234B74 STR W8, [X25 + 0x20]
	0x03234B78 B.LT 0x323443C
	0x03234B7C LDR W8, [X31 + 0x58]
	0x03234B80 EOR W8, W8, 0x1
	0x03234B84 TBNZ X8, 0x0, 0x323443C
	0x03234B88 MOVZ W1, 0x20
	0x03234B8C MOV X0, X25
	0x03234B90 BL 0x3232D24
	0x03234B94 B 0x323443C
	0x03234B98 ADRP X8, 0xEE9000
	0x03234B9C LDR X8, [X8 + 0xEF8]
	0x03234BA0 LDR X19, [X31 + 0x48]
	0x03234BA4 LDR X1, [X8]
	0x03234BA8 MOV X0, X19
	0x03234BAC BL 0x1C16E00
	0x03234BB0 CBZ X0, 0x3234BE4
	0x03234BB4 LDR X8, [X31 + 0x50]
	0x03234BB8 MOV X21, X0
	0x03234BBC CBZ W8, 0x3234BFC
	0x03234BC0 LDR X12, [X31 + 0x28]
	0x03234BC4 CBNZ X12, 0x3234C00
	0x03234BC8 LDR X1, [X31 + 0x38]
	0x03234BCC LDR X2, [X31 + 0x50]
	0x03234BD0 MOV X0, X31
	0x03234BD4 MOV X3, X31
	0x03234BD8 BL 0x322EB14
	0x03234BDC MOV X12, X0
	0x03234BE0 B 0x3234C00
	0x03234BE4 CBZ X19, 0x3234C78
	0x03234BE8 LDR X8, [X19]
	0x03234BEC MOV X0, X19
	0x03234BF0 LDP X9, X1, [X8 + 0x168]
	0x03234BF4 BLR X9
	0x03234BF8 B 0x3234C70
	0x03234BFC LDR X12, [X31 + 0x28]
	0x03234C00 LDR X8, [X21]
	0x03234C04 ADRP X10, 0xEE9000
	0x03234C08 LDRH W9, [X8 + 0x12E]
	0x03234C0C LDR X10, [X10 + 0xEF8]
	0x03234C10 LDR X1, [X10]
	0x03234C14 CBZ X9, 0x3234C38
	0x03234C18 LDR X10, [X8 + 0xB0]
	0x03234C1C ADD X10, X10, 0x8
	0x03234C20 LDUR X11, [X10 - 0x8]
	0x03234C24 CMP X11, X1
	0x03234C28 B.EQ 0x3234C50
	0x03234C2C SUBS X9, X9, 0x1
	0x03234C30 ADD X10, X10, 0x10
	0x03234C34 B.NE 0x3234C20
	0x03234C38 MOV X0, X21
	0x03234C3C MOV W2, W31
	0x03234C40 MOV X19, X12
	0x03234C44 BL 0x1C5C788
	0x03234C48 MOV X12, X19
	0x03234C4C B 0x3234C5C
	0x03234C50 LDRSW X9, [X10]
	0x03234C54 ADD X8, X8, X9, 0x4, LSL
	0x03234C58 ADD X0, X8, 0x138
	0x03234C5C LDP X8, X3, [X0]
	0x03234C60 LDR X2, [X31 + 0x20]
	0x03234C64 MOV X0, X21
	0x03234C68 MOV X1, X12
	0x03234C6C BLR X8
	0x03234C70 MOV X19, X0
	0x03234C74 CBNZ X0, 0x3234C90
	0x03234C78 ADRP X8, 0xEC1000
	0x03234C7C LDR X8, [X8 + 0x278]
	0x03234C80 LDR X8, [X8]
	0x03234C84 LDR X8, [X8 + 0xB8]
	0x03234C88 LDR X19, [X8]
	0x03234C8C CBZ X19, 0x3234D18
	0x03234C90 LDR W8, [X19 + 0x10]
	0x03234C94 LDR W9, [X31 + 0x58]
	0x03234C98 SUB W21, W29, W8
	0x03234C9C CMP W21, 0x1
	0x03234CA0 CSET W8, LT
	0x03234CA4 ORR W8, W9, W8, 0x0
	0x03234CA8 TBNZ X8, 0x0, 0x3234CBC
	0x03234CAC MOVZ W1, 0x20
	0x03234CB0 MOV X0, X25
	0x03234CB4 MOV W2, W21

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X19, 0x11A9000
	010 Move W8, [X19+994]
	011 Move X21, X4
	012 Move X20, X3
	013 Move W23, W2
	014 Move W24, W1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xEEF000
	021 Move X0, [X0+720]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X19+994], W8
	025 Move [X20], X22
	026 Compare X22, 0
	027 JumpIfEqual {43}
	028 Move X8, X31
	029 Move W19, W31
	030 Add W9, W23, W24
	031 Move W10, [X22+36]
	032 Subtract W11, W9, W10
	033 NotImplemented "Instruction CMP not yet implemented."
	034 NotImplemented "Instruction CSEL not yet implemented."
	035 NotImplemented "Instruction CSEL not yet implemented."
	036 Subtract W25, W24, W10
	037 Subtract W10, W10, W23
	038 Move [X22+36], W10
	039 Move X22, [X22+24]
	040 Move [X20], X22
	041 Compare X22, 0
	042 JumpIfNotEqual {31}
	043 Call 0x1C17F20
	044 Move [X21], W25
	045 Move W9, [X8+32]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move [X22+32], W25
	048 Move [X8+24], X22
	049 Move X10, [X20]
	050 Compare X10, 0
	051 JumpIfEqual {43}
	052 Move W12, [X10+32]
	053 Move W11, [X10+36]
	054 Add W11, W12, W11
	055 Move [X8+36], W11
	056 Move W11, [X21]
	057 Compare W11, 0
	058 JumpIfEqual {60}
	059 Move W25, W31
	060 Move X10, [X10+24]
	061 Move W25, W31
	062 Move [X8+24], X10
	063 Move [X20], X8
	064 Move W10, [X8+32]
	065 Subtract W11, W25, W19
	066 Add W10, W11, W10
	067 Move [X8+32], W10
	068 Move X20, [X31+48]
	069 Move X19, [X31+56]
	070 Move X22, [X31+32]
	071 Move X21, [X31+40]
	072 Move X24, [X31+16]
	073 Move X23, [X31+24]
	074 Move X30, [X31+64]
	075 Move X25, [X31+72]
	076 Return 
	077 Move X20, [X8+16]
	078 Move X8, 0xEEF000
	079 Move X8, [X8+720]
	080 Subtract W21, W9, W19
	081 Move X0, X20
	082 Move X1, [X8]
	083 Call Span`1<Char>.op_Implicit, X0
	084 Move X2, X0
	085 Move X3, X1
	086 Move X0, X20
	087 Move W1, W19
	088 Move W5, W21
	089 Move X20, [X31+48]
	090 Move X19, [X31+56]
	091 Move X22, [X31+32]
	092 Move X21, [X31+40]
	093 Move X24, [X31+16]
	094 Move X23, [X31+24]
	095 Move W4, W25
	096 Move X30, [X31+64]
	097 Move X25, [X31+72]
	098 Call StringBuilder.ThreadSafeCopy, X0, X1, X2, X3, X4
	099 Return 

