Type: System.Text.UTF8Encoding

Method: System.Void .ctor()

Disassembly:
	0x0323B2E4 LDP X20, X19, [X31 + 0x20]
	0x0323B2E8 LDP X22, X21, [X31 + 0x10]
	0x0323B2EC MOV X3, X31
	0x0323B2F0 LDP X30, X23, [X31], #0x30
	0x0323B2F4 B 0x322DAF4
	0x0323B2F8 ADRP X8, 0xEBA000
	0x0323B2FC LDR X8, [X8 + 0x278]
	0x0323B300 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 0xFDE9
	004 Move X2, X31
	005 Move X19, X0
	006 Call Encoding..ctor, X0, X1
	007 NotImplemented "Instruction STRH not yet implemented."
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 

Method: System.Void .ctor(System.Boolean encoderShouldEmitUTF8Identifier)

Disassembly:
	0x0323B304 LDP X22, X21, [X31 + 0x10]
	0x0323B308 LDR X8, [X8]
	0x0323B30C LDR X8, [X8 + 0xB8]
	0x0323B310 LDR X0, [X8]
	0x0323B314 LDP X30, X23, [X31], #0x30
	0x0323B318 RET
	0x0323B31C ADRP X0, 0xEBD000
	0x0323B320 LDR X0, [X0 + 0x528]
	0x0323B324 BL 0x1C16D08
	0x0323B328 BL 0x1C16F10
	0x0323B32C MOV X19, X0
	0x0323B330 ADRP X0, 0xEE7000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 And W20, W1, 1
	005 Move W1, 0xFDE9
	006 Move X2, X31
	007 Move X19, X0
	008 Call Encoding..ctor, X0, X1
	009 Move [X19+56], W20
	010 Move [X19+57], W31
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]
	014 Return 

Method: System.Void .ctor(System.Boolean encoderShouldEmitUTF8Identifier, System.Boolean throwOnInvalidBytes)

Disassembly:
	0x0323B334 LDR X0, [X0 + 0x308]
	0x0323B338 BL 0x1C16D08
	0x0323B33C MOV X20, X0
	0x0323B340 ADRP X0, 0xEE7000
	0x0323B344 LDR X0, [X0 + 0x2E0]
	0x0323B348 BL 0x1C16D08
	0x0323B34C MOV X2, X0
	0x0323B350 MOV X0, X19
	0x0323B354 MOV X1, X20
	0x0323B358 MOV X3, X31
	0x0323B35C BL 0x3315F7C
	0x0323B360 B 0x323B414
	0x0323B364 ADRP X8, 0xEE0000
	0x0323B368 ADRP X9, 0xEC3000
	0x0323B36C LDR X8, [X8 + 0x648]
	0x0323B370 LDR X9, [X9 + 0x130]
	0x0323B374 CMP W19, 0x0
	0x0323B378 CSEL X0, X9, X8, LT
	0x0323B37C BL 0x1C16D08
	0x0323B380 MOV X19, X0
	0x0323B384 ADRP X0, 0xEC0000
	0x0323B388 LDR X0, [X0 + 0x760]
	0x0323B38C BL 0x1C16D08
	0x0323B390 BL 0x1C16F10

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W20, W2
	007 And W21, W2, 1
	008 And W22, W1, 1
	009 Move W1, 0xFDE9
	010 Move X2, X31
	011 Move X19, X0
	012 Call Encoding..ctor, X0, X1
	013 Move [X19+56], W22
	014 Move [X19+57], W21
	015 Move TEMP, X20
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfNotEqual {29}
	019 Move X8, [X19]
	020 Move X0, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X2, [X8+392]
	026 Move X1, [X8+400]
	027 Move X30, [X31+48]
	028 CallNoReturn X2
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X22, [X31+16]
	032 Move X21, [X31+24]
	033 Move X30, [X31+48]
	034 Return 

Method: System.Void SetDefaultFallbacks()

Disassembly:
	0x0323B394 MOV X20, X0
	0x0323B398 ADRP X0, 0xEE0000
	0x0323B39C LDR X0, [X0 + 0x670]
	0x0323B3A0 BL 0x1C16D08
	0x0323B3A4 MOV X2, X0
	0x0323B3A8 MOV X0, X20
	0x0323B3AC MOV X1, X19
	0x0323B3B0 MOV X3, X31
	0x0323B3B4 BL 0x3311888
	0x0323B3B8 ADRP X0, 0xEE7000
	0x0323B3BC LDR X0, [X0 + 0x818]
	0x0323B3C0 BL 0x1C16D08
	0x0323B3C4 MOV X1, X0
	0x0323B3C8 MOV X0, X20
	0x0323B3CC BL 0x1C16DEC
	0x0323B3D0 ADRP X0, 0xEC0000
	0x0323B3D4 LDR X0, [X0 + 0x760]
	0x0323B3D8 BL 0x1C16D08
	0x0323B3DC BL 0x1C16F10
	0x0323B3E0 MOV X19, X0
	0x0323B3E4 ADRP X0, 0xEE7000
	0x0323B3E8 LDR X0, [X0 + 0x308]
	0x0323B3EC BL 0x1C16D08
	0x0323B3F0 MOV X20, X0
	0x0323B3F4 ADRP X0, 0xEE7000
	0x0323B3F8 LDR X0, [X0 + 0xE0]
	0x0323B3FC BL 0x1C16D08
	0x0323B400 MOV X2, X0
	0x0323B404 MOV X0, X19
	0x0323B408 MOV X1, X20
	0x0323B40C MOV X3, X31
	0x0323B410 BL 0x3311888
	0x0323B414 ADRP X0, 0xEE7000
	0x0323B418 LDR X0, [X0 + 0x818]
	0x0323B41C BL 0x1C16D08
	0x0323B420 MOV X1, X0
	0x0323B424 MOV X0, X19
	0x0323B428 BL 0x1C16DEC
	0x0323B42C SUB X31, X31, 0x80
	0x0323B430 STP X29, X30, [X31 + 0x20]
	0x0323B434 STP X28, X27, [X31 + 0x30]
	0x0323B438 STP X26, X25, [X31 + 0x40]
	0x0323B43C STP X24, X23, [X31 + 0x50]
	0x0323B440 STP X22, X21, [X31 + 0x60]
	0x0323B444 STP X20, X19, [X31 + 0x70]
	0x0323B448 ADRP X21, 0x11A1000
	0x0323B44C LDRB W8, [X21 + 0x407]
	0x0323B450 MOV X19, X3

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11A2000
	006 Move W8, [X20+1026]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0xEE8000
	013 Move X0, [X0+1608]
	014 Call 0x1C17CF4
	015 Move X0, 0xEE8000
	016 Move X0, [X0+872]
	017 Call 0x1C17CF4
	018 Move X0, 0xEE8000
	019 Move X0, [X0+1616]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1026], W8
	023 Move W8, [X19+57]
	024 Compare W8, 0
	025 JumpIfEqual {32}
	026 Move X0, X31
	027 Call EncoderFallback.get_ExceptionFallback
	028 Move [X19+40], X0
	029 Move X0, X31
	030 Call DecoderFallback.get_ExceptionFallback
	031 Move [X19+48], X0
	032 Move X8, 0xEE8000
	033 Move X8, [X8+872]
	034 Move X0, [X8]
	035 Call 0x1C17F10
	036 Move X21, 0xEE8000
	037 Move X21, [X21+1616]
	038 Move X20, X0
	039 Move X1, [X21]
	040 Call EncoderReplacementFallback..ctor, X0, X1
	041 Move [X19+40], X20
	042 Move X8, 0xEE8000
	043 Move X8, [X8+1608]
	044 Move X0, [X8]
	045 Call 0x1C17F10
	046 Move X1, [X21]
	047 Move X2, X31
	048 Move X20, X0
	049 Call DecoderReplacementFallback..ctor, X0, X1
	050 Move [X19+48], X20
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Return 

Method: System.Int32 GetByteCount(System.Char[] chars, System.Int32 index, System.Int32 count)

Disassembly:
	0x0323B454 MOV W20, W2
	0x0323B458 MOV X22, X1
	0x0323B45C STR X0, [X31 + 0x8]
	0x0323B460 TBNZ X8, 0x0, 0x323B484
	0x0323B464 ADRP X0, 0xEE7000
	0x0323B468 LDR X0, [X0 + 0x820]
	0x0323B46C BL 0x1C16CF4
	0x0323B470 ADRP X0, 0xEE7000
	0x0323B474 LDR X0, [X0 + 0x828]
	0x0323B478 BL 0x1C16CF4
	0x0323B47C MOVZ W8, 0x1
	0x0323B480 STRB W8, [X21 + 0x407]
	0x0323B484 ADD X23, X22, W20, 0x1, SXTW
	0x0323B488 STR X31, [X31 + 0x18]
	0x0323B48C CBZ X19, 0x323B504
	0x0323B490 ADRP X8, 0xEE7000
	0x0323B494 LDR X8, [X8 + 0x820]
	0x0323B498 LDR X1, [X8]
	0x0323B49C LDR X8, [X19]
	0x0323B4A0 CMP X8, X1
	0x0323B4A4 B.NE 0x323B940
	0x0323B4A8 LDR W25, [X19 + 0x38]
	0x0323B4AC MOV X0, X19
	0x0323B4B0 MOV X1, X31
	0x0323B4B4 BL 0x33FBF14
	0x0323B4B8 TBZ X0, 0x0, 0x323B508
	0x0323B4BC MOV X0, X19
	0x0323B4C0 MOV X1, X31
	0x0323B4C4 BL 0x33FBF24
	0x0323B4C8 CBZ X0, 0x323B948
	0x0323B4CC LDR X8, [X0]
	0x0323B4D0 MOV X24, X0
	0x0323B4D4 LDP X9, X1, [X8 + 0x1B8]
	0x0323B4D8 BLR X9
	0x0323B4DC CMP W0, 0x1
	0x0323B4E0 B.GE 0x323B94C
	0x0323B4E4 MOV X0, X24
	0x0323B4E8 MOV X1, X22
	0x0323B4EC MOV X2, X23
	0x0323B4F0 MOV X3, X19
	0x0323B4F4 MOV W4, W31
	0x0323B4F8 MOV X5, X31
	0x0323B4FC BL 0x33FBF60
	0x0323B500 B 0x323B50C
	0x0323B504 MOV W25, W31
	0x0323B508 MOV X24, X31
	0x0323B50C ADRP X26, 0xEE7000
	0x0323B510 LDR X26, [X26 + 0x828]
	0x0323B514 MOVZ W27, 0xD800
	0x0323B518 ORR W28, W31, 0xFF80FF80
	0x0323B51C ORR W29, W31, 0xF800F800
	0x0323B520 STR X22, [X31 + 0x10]
	0x0323B524 CMP X23, X22
	0x0323B528 B.LS 0x323B560
	0x0323B52C CMP W25, 0x1
	0x0323B530 B.LT 0x323B5D0
	0x0323B534 LDR X0, [X26]
	0x0323B538 LDRH W21, [X22]
	0x0323B53C LDR W8, [X0 + 0xE0]
	0x0323B540 CBNZ W8, 0x323B548
	0x0323B544 BL 0x1C16DFC
	0x0323B548 UBFM W8, W21, 0xA, 0x1F
	0x0323B54C CMP W8, 0x37
	0x0323B550 ADD W20, W20, 0x1
	0x0323B554 B.NE 0x323B640
	0x0323B558 ADD X22, X22, 0x2
	0x0323B55C B 0x323B5AC
	0x0323B560 CBZ W25, 0x323B5F0
	0x0323B564 CBZ X24, 0x323B5B4
	0x0323B568 LDRB W8, [X24 + 0x2A]
	0x0323B56C CBZ W8, 0x323B5B4
	0x0323B570 MOV X0, X24
	0x0323B574 MOV X1, X31
	0x0323B578 BL 0x33FBF7C
	0x0323B57C LDR X8, [X26]
	0x0323B580 MOV W25, W0
	0x0323B584 LDR W9, [X8 + 0xE0]
	0x0323B588 CBNZ W9, 0x323B594
	0x0323B58C MOV X0, X8
	0x0323B590 BL 0x1C16DFC
	0x0323B594 AND W25, W25, 0xFFFF
	0x0323B598 AND W8, W25, 0xFC00
	0x0323B59C MOVZ W9, 0xDC00
	0x0323B5A0 CMP W8, W9
	0x0323B5A4 B.NE 0x323B60C
	0x0323B5A8 ADD W20, W20, 0x2
	0x0323B5AC MOVZ W25, 0xFFFD
	0x0323B5B0 B 0x323B640
	0x0323B5B4 CMP W25, 0x1
	0x0323B5B8 B.LT 0x323B8D0
	0x0323B5BC CBZ X19, 0x323B5C8
	0x0323B5C0 LDRB W8, [X19 + 0x30]
	0x0323B5C4 CBZ W8, 0x323B8D0
	0x0323B5C8 ADD W20, W20, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {37}
	006 Move TEMP, X3
	007 And TEMP, TEMP, -2147483648
	008 Compare TEMP, -2147483648
	009 JumpIfEqual {54}
	010 Move TEMP, X2
	011 And TEMP, TEMP, -2147483648
	012 Compare TEMP, -2147483648
	013 JumpIfEqual {54}
	014 Move W8, [X1+24]
	015 Subtract W9, W8, W2
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Compare W3, 0
	018 JumpIfEqual {32}
	019 Move X9, [X0]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Add X10, X1, 32
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X5, [X9+552]
	025 Move X4, [X9+560]
	026 NotImplemented "Instruction CSEL not yet implemented."
	027 Add X1, X8, W2
	028 Move W2, W3
	029 Move X3, X31
	030 Move X30, [X31+32]
	031 CallNoReturn X5
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move W0, W31
	035 Move X30, [X31+32]
	036 Return X0
	037 Move X0, 0xEBE000
	038 Move X0, [X0+1320]
	039 Call 0x1C17D08
	040 Call 0x1C17F10
	041 Move X19, X0
	042 Move X0, 0xEE8000
	043 Move X0, [X0+728]
	044 Call 0x1C17D08
	045 Move X20, X0
	046 Move X0, 0xEE8000
	047 Move X0, [X0+736]
	048 Call 0x1C17D08
	049 Move X2, X0
	050 Move X0, X19
	051 Move X1, X20
	052 Move X3, X31
	053 Call ArgumentNullException..ctor, X0, X1, X2
	054 Move X8, 0xEE1000
	055 Move X9, 0xEC4000
	056 Move X8, [X8+1608]
	057 Move X9, [X9+304]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 NotImplemented "Instruction CSEL not yet implemented."
	060 Call 0x1C17D08
	061 Move X19, X0
	062 Move X0, 0xEC1000
	063 Move X0, [X0+1888]
	064 Call 0x1C17D08
	065 Call 0x1C17F10
	066 Move X20, X0
	067 Move X0, 0xEE1000
	068 Move X0, [X0+1648]
	069 Call 0x1C17D08
	070 Move X2, X0
	071 Move X0, X20
	072 Move X1, X19
	073 Move X3, X31
	074 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	075 Move X0, 0xEE8000
	076 Move X0, [X0+1992]
	077 Call 0x1C17D08
	078 Move X1, X0
	079 Move X0, X20
	080 Call 0x1C17DEC
	081 Move X0, 0xEC1000
	082 Move X0, [X0+1888]
	083 Call 0x1C17D08
	084 Call 0x1C17F10
	085 Move X19, X0
	086 Move X0, 0xEE8000
	087 Move X0, [X0+728]
	088 Call 0x1C17D08
	089 Move X20, X0
	090 Move X0, 0xEE8000
	091 Move X0, [X0+224]
	092 Call 0x1C17D08
	093 Move X2, X0
	094 Move X0, X19
	095 Move X1, X20
	096 Move X3, X31
	097 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	098 Move X0, 0xEE8000
	099 Move X0, [X0+1992]
	100 Call 0x1C17D08
	101 Move X1, X0
	102 Move X0, X19
	103 Call 0x1C17DEC

Method: System.Int32 GetByteCount(System.String chars)

Disassembly:
	0x0323B5CC B 0x323B640
	0x0323B5D0 CBZ X24, 0x323B5E8
	0x0323B5D4 MOV X0, X24
	0x0323B5D8 MOV X1, X31
	0x0323B5DC BL 0x33FBF7C
	0x0323B5E0 ANDS W31, W0, 0xFFFF
	0x0323B5E4 B.NE 0x323B614
	0x0323B5E8 LDRH W25, [X22], #0x2
	0x0323B5EC B 0x323B61C
	0x0323B5F0 CBZ X24, 0x323B8D0
	0x0323B5F4 MOV X0, X24
	0x0323B5F8 MOV X1, X31
	0x0323B5FC BL 0x33FBF7C
	0x0323B600 ANDS W31, W0, 0xFFFF
	0x0323B604 B.NE 0x323B614
	0x0323B608 B 0x323B8D0
	0x0323B60C CBNZ W25, 0x323B618
	0x0323B610 B 0x323B8D0
	0x0323B614 AND W25, W0, 0xFFFF
	0x0323B618 ADD W20, W20, 0x1
	0x0323B61C LDR X0, [X26]
	0x0323B620 LDR W8, [X0 + 0xE0]
	0x0323B624 CBNZ W8, 0x323B62C
	0x0323B628 BL 0x1C16DFC
	0x0323B62C AND W8, W25, 0xFC00
	0x0323B630 CMP W8, W27
	0x0323B634 B.NE 0x323B640
	0x0323B638 SUB W20, W20, 0x1
	0x0323B63C B 0x323B524
	0x0323B640 LDR X0, [X26]
	0x0323B644 LDR W8, [X0 + 0xE0]
	0x0323B648 CBNZ W8, 0x323B650
	0x0323B64C BL 0x1C16DFC
	0x0323B650 UBFM W8, W25, 0xB, 0x1F
	0x0323B654 CMP W8, 0x1B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {21}
	006 Move X20, X0
	007 Move X0, X31
	008 Move X19, X1
	009 Call RuntimeHelpers.get_OffsetToStringData
	010 Move X8, [X20]
	011 Move W2, [X19+16]
	012 Add X1, X19, W0
	013 Move X0, X20
	014 Move X5, [X8+552]
	015 Move X4, [X8+560]
	016 Move X20, [X31+16]
	017 Move X19, [X31+24]
	018 Move X3, X31
	019 Move X30, [X31+32]
	020 CallNoReturn X5
	021 Move X0, 0xEBE000
	022 Move X0, [X0+1320]
	023 Call 0x1C17D08
	024 Call 0x1C17F10
	025 Move X19, X0
	026 Move X0, 0xEE2000
	027 Move X0, [X0+3264]
	028 Call 0x1C17D08
	029 Move X1, X0
	030 Move X0, X19
	031 Move X2, X31
	032 Call ArgumentNullException..ctor, X0, X1
	033 Move X0, 0xEE8000
	034 Move X0, [X0+2000]
	035 Call 0x1C17D08
	036 Move X1, X0
	037 Move X0, X19
	038 Call 0x1C17DEC

Method: System.Int32 GetByteCount(System.Char* chars, System.Int32 count)

Disassembly:
	0x0323B658 B.EQ 0x323B848
	0x0323B65C CMP W25, 0x7FF
	0x0323B660 CINC W8, W20, GT
	0x0323B664 CMP W25, 0x80
	0x0323B668 CSINC W20, W20, W8, LT
	0x0323B66C TBNZ X20, 0x1F, 0x323B8F8
	0x0323B670 CBZ X24, 0x323B688
	0x0323B674 MOV X0, X24
	0x0323B678 MOV X1, X31
	0x0323B67C BL 0x33FBF7C
	0x0323B680 ANDS W31, W0, 0xFFFF
	0x0323B684 B.NE 0x323B614
	0x0323B688 LDR X0, [X26]
	0x0323B68C LDR W8, [X0 + 0xE0]
	0x0323B690 CBNZ W8, 0x323B698
	0x0323B694 BL 0x1C16DFC
	0x0323B698 SUB X8, X23, X22
	0x0323B69C CMP W8, 0x1B
	0x0323B6A0 B.LS 0x323B824
	0x0323B6A4 AND X8, X8, 0x1FFFFFFF
	0x0323B6A8 ADD X8, X22, X8
	0x0323B6AC SUB X21, X8, 0xE
	0x0323B6B0 CMP X21, X22
	0x0323B6B4 MOV W25, W31
	0x0323B6B8 B.LS 0x323B524
	0x0323B6BC LDRH W25, [X22]
	0x0323B6C0 ADD X8, X22, 0x2
	0x0323B6C4 CMP W25, 0x80
	0x0323B6C8 B.CC 0x323B6E8
	0x0323B6CC CMP W25, 0x800
	0x0323B6D0 B.CC 0x323B6E4
	0x0323B6D4 AND W9, W25, 0xF800
	0x0323B6D8 CMP W9, W27
	0x0323B6DC B.EQ 0x323B710
	0x0323B6E0 ADD W20, W20, 0x1
	0x0323B6E4 ADD W20, W20, 0x1
	0x0323B6E8 TBZ X8, 0x1, 0x323B720
	0x0323B6EC LDRH W25, [X22 + 0x2]
	0x0323B6F0 ADD X8, X22, 0x4
	0x0323B6F4 CMP W25, 0x80
	0x0323B6F8 B.CC 0x323B720
	0x0323B6FC CMP W25, 0x800
	0x0323B700 B.CC 0x323B71C
	0x0323B704 AND W9, W25, 0xF800
	0x0323B708 CMP W9, W27
	0x0323B70C B.NE 0x323B718
	0x0323B710 MOV X22, X8
	0x0323B714 B 0x323B7CC
	0x0323B718 ADD W20, W20, 0x1
	0x0323B71C ADD W20, W20, 0x1
	0x0323B720 CMP X21, X8
	0x0323B724 B.LS 0x323B83C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {18}
	006 Move TEMP, X2
	007 And TEMP, TEMP, -2147483648
	008 Compare TEMP, -2147483648
	009 JumpIfEqual {35}
	010 Move X8, [X0]
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X3, X31
	014 Move X5, [X8+552]
	015 Move X4, [X8+560]
	016 Move X30, [X31+32]
	017 CallNoReturn X5
	018 Move X0, 0xEBE000
	019 Move X0, [X0+1320]
	020 Call 0x1C17D08
	021 Call 0x1C17F10
	022 Move X19, X0
	023 Move X0, 0xEE8000
	024 Move X0, [X0+728]
	025 Call 0x1C17D08
	026 Move X20, X0
	027 Move X0, 0xEE8000
	028 Move X0, [X0+736]
	029 Call 0x1C17D08
	030 Move X2, X0
	031 Move X0, X19
	032 Move X1, X20
	033 Move X3, X31
	034 Call ArgumentNullException..ctor, X0, X1, X2
	035 Move X0, 0xEC1000
	036 Move X0, [X0+1888]
	037 Call 0x1C17D08
	038 Call 0x1C17F10
	039 Move X19, X0
	040 Move X0, 0xEE1000
	041 Move X0, [X0+1608]
	042 Call 0x1C17D08
	043 Move X20, X0
	044 Move X0, 0xEE1000
	045 Move X0, [X0+1648]
	046 Call 0x1C17D08
	047 Move X2, X0
	048 Move X0, X19
	049 Move X1, X20
	050 Move X3, X31
	051 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	052 Move X0, 0xEE8000
	053 Move X0, [X0+2008]
	054 Call 0x1C17D08
	055 Move X1, X0
	056 Move X0, X19
	057 Call 0x1C17DEC

Method: System.Int32 GetBytes(System.String s, System.Int32 charIndex, System.Int32 charCount, System.Byte[] bytes, System.Int32 byteIndex)

Disassembly:
	0x0323B728 LDP W9, W10, [X8]
	0x0323B72C ORR W11, W10, W9, 0x0
	0x0323B730 ANDS W31, W11, W28, 0x0
	0x0323B734 B.EQ 0x323B768
	0x0323B738 ANDS W31, W11, W29, 0x0
	0x0323B73C B.NE 0x323B7B4
	0x0323B740 UBFM W11, W9, 0x17, 0x1F
	0x0323B744 CMP W11, 0x0
	0x0323B748 UBFM W12, W10, 0x17, 0x1F
	0x0323B74C CINC W11, W20, NE
	0x0323B750 ANDS W31, W9, 0xFF80
	0x0323B754 CINC W9, W11, NE
	0x0323B758 CMP W12, 0x0
	0x0323B75C CINC W9, W9, NE
	0x0323B760 ANDS W31, W10, 0xFF80
	0x0323B764 CINC W20, W9, NE
	0x0323B768 LDP W9, W10, [X8 + 0x8]
	0x0323B76C ORR W11, W10, W9, 0x0
	0x0323B770 ANDS W31, W11, W28, 0x0
	0x0323B774 B.EQ 0x323B7A8
	0x0323B778 ANDS W31, W11, W29, 0x0
	0x0323B77C B.NE 0x323B7B0
	0x0323B780 UBFM W11, W9, 0x17, 0x1F
	0x0323B784 CMP W11, 0x0
	0x0323B788 UBFM W12, W10, 0x17, 0x1F
	0x0323B78C CINC W11, W20, NE
	0x0323B790 ANDS W31, W9, 0xFF80
	0x0323B794 CINC W9, W11, NE
	0x0323B798 CMP W12, 0x0
	0x0323B79C CINC W9, W9, NE
	0x0323B7A0 ANDS W31, W10, 0xFF80
	0x0323B7A4 CINC W20, W9, NE
	0x0323B7A8 ADD X8, X8, 0x10
	0x0323B7AC B 0x323B720
	0x0323B7B0 ADD X8, X8, 0x8
	0x0323B7B4 AND W25, W9, 0xFFFF
	0x0323B7B8 CMP W25, 0x80
	0x0323B7BC ADD X22, X8, 0x2
	0x0323B7C0 B.CC 0x323B6B0
	0x0323B7C4 CMP W25, 0x800
	0x0323B7C8 B.CC 0x323B81C
	0x0323B7CC LDR X0, [X26]
	0x0323B7D0 LDR W8, [X0 + 0xE0]
	0x0323B7D4 CBNZ W8, 0x323B7DC
	0x0323B7D8 BL 0x1C16DFC
	0x0323B7DC AND W8, W25, 0xF800
	0x0323B7E0 CMP W8, W27
	0x0323B7E4 B.NE 0x323B818
	0x0323B7E8 UBFM W8, W25, 0xA, 0x1F
	0x0323B7EC CMP W8, 0x36
	0x0323B7F0 B.HI 0x323B8C4
	0x0323B7F4 LDR X0, [X26]
	0x0323B7F8 LDRH W25, [X22]
	0x0323B7FC LDR W8, [X0 + 0xE0]
	0x0323B800 CBNZ W8, 0x323B808
	0x0323B804 BL 0x1C16DFC
	0x0323B808 UBFM W8, W25, 0xA, 0x1F
	0x0323B80C CMP W8, 0x37
	0x0323B810 B.NE 0x323B8C4
	0x0323B814 ADD X22, X22, 0x2
	0x0323B818 ADD W20, W20, 0x1
	0x0323B81C ADD W20, W20, 0x1
	0x0323B820 B 0x323B6B0
	0x0323B824 CMP X23, X22
	0x0323B828 B.LS 0x323B8D0
	0x0323B82C LDRH W25, [X22], #0x2
	0x0323B830 CMP W25, 0x7F
	0x0323B834 B.LS 0x323B824
	0x0323B838 B 0x323B61C
	0x0323B83C MOV W25, W31
	0x0323B840 MOV X22, X8
	0x0323B844 B 0x323B524
	0x0323B848 CBNZ X24, 0x323B89C
	0x0323B84C CBZ X19, 0x323B860
	0x0323B850 MOV X0, X19
	0x0323B854 MOV X1, X31
	0x0323B858 BL 0x33FBF24
	0x0323B85C B 0x323B878
	0x0323B860 LDR X8, [X31 + 0x8]
	0x0323B864 LDR X0, [X8 + 0x28]
	0x0323B868 CBZ X0, 0x323B948
	0x0323B86C LDR X8, [X0]
	0x0323B870 LDP X9, X1, [X8 + 0x178]
	0x0323B874 BLR X9
	0x0323B878 MOV X24, X0
	0x0323B87C CBZ X0, 0x323B948
	0x0323B880 LDR X1, [X31 + 0x10]
	0x0323B884 MOV X0, X24
	0x0323B888 MOV X2, X23
	0x0323B88C MOV X3, X19
	0x0323B890 MOV W4, W31
	0x0323B894 MOV X5, X31
	0x0323B898 BL 0x33FBF60
	0x0323B89C STR X22, [X31 + 0x18]
	0x0323B8A0 LDR X8, [X24]
	0x0323B8A4 ADD X2, X31, 0x18
	0x0323B8A8 MOV X0, X24
	0x0323B8AC MOV W1, W25
	0x0323B8B0 LDP X9, X3, [X8 + 0x1D8]
	0x0323B8B4 BLR X9
	0x0323B8B8 LDR X22, [X31 + 0x18]
	0x0323B8BC MOV W25, W31
	0x0323B8C0 B 0x323B638
	0x0323B8C4 MOV W25, W31
	0x0323B8C8 SUB X22, X22, 0x2
	0x0323B8CC B 0x323B524
	0x0323B8D0 TBNZ X20, 0x1F, 0x323B8F8
	0x0323B8D4 MOV W0, W20
	0x0323B8D8 LDP X20, X19, [X31 + 0x70]
	0x0323B8DC LDP X22, X21, [X31 + 0x60]
	0x0323B8E0 LDP X24, X23, [X31 + 0x50]
	0x0323B8E4 LDP X26, X25, [X31 + 0x40]
	0x0323B8E8 LDP X28, X27, [X31 + 0x30]
	0x0323B8EC LDP X29, X30, [X31 + 0x20]
	0x0323B8F0 ADD X31, X31, 0x80
	0x0323B8F4 RET
	0x0323B8F8 ADRP X0, 0xEC0000
	0x0323B8FC LDR X0, [X0 + 0x578]
	0x0323B900 BL 0x1C16D08
	0x0323B904 BL 0x1C16F10
	0x0323B908 MOV X19, X0
	0x0323B90C ADRP X0, 0xEE7000
	0x0323B910 LDR X0, [X0 + 0x830]
	0x0323B914 BL 0x1C16D08
	0x0323B918 MOV X1, X0
	0x0323B91C MOV X0, X19
	0x0323B920 MOV X2, X31
	0x0323B924 BL 0x3314A68
	0x0323B928 ADRP X0, 0xEE7000
	0x0323B92C LDR X0, [X0 + 0x838]
	0x0323B930 BL 0x1C16D08
	0x0323B934 MOV X1, X0
	0x0323B938 MOV X0, X19
	0x0323B93C BL 0x1C16DEC
	0x0323B940 MOV X0, X19
	0x0323B944 BL 0x1C171E0
	0x0323B948 BL 0x1C16F20
	0x0323B94C LDR X0, [X31 + 0x8]
	0x0323B950 LDR X8, [X0]
	0x0323B954 LDP X9, X1, [X8 + 0x1B8]
	0x0323B958 BLR X9
	0x0323B95C MOV X20, X0
	0x0323B960 MOV X0, X19
	0x0323B964 BL 0x19903C0
	0x0323B968 LDR X19, [X19 + 0x10]
	0x0323B96C MOV X0, X19

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X25, 0x11A2000
	012 Move W8, [X25+1027]
	013 Move W19, W5
	014 Move X24, X4
	015 Move W20, W3
	016 Move W21, W2
	017 Move X22, X1
	018 Move X23, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {31}
	023 Move X0, 0xEE7000
	024 Move X0, [X0+2096]
	025 Call 0x1C17CF4
	026 Move X0, 0xEE8000
	027 Move X0, [X0+760]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X25+1027], W8
	031 Compare X22, 0
	032 JumpIfEqual {96}
	033 Compare X24, 0
	034 JumpIfEqual {96}
	035 Move TEMP, X20
	036 And TEMP, TEMP, -2147483648
	037 Compare TEMP, -2147483648
	038 JumpIfEqual {117}
	039 Move TEMP, X21
	040 And TEMP, TEMP, -2147483648
	041 Compare TEMP, -2147483648
	042 JumpIfEqual {117}
	043 Move W8, [X22+16]
	044 Subtract W8, W8, W21
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move TEMP, X19
	047 And TEMP, TEMP, -2147483648
	048 Compare TEMP, -2147483648
	049 JumpIfEqual {85}
	050 Move W8, [X24+24]
	051 Subtract W25, W8, W19
	052 Move X26, 0xEE8000
	053 Move X27, 0xEE7000
	054 Move X26, [X26+760]
	055 Move X27, [X27+2096]
	056 Move X0, X31
	057 Call RuntimeHelpers.get_OffsetToStringData
	058 Move X1, [X26]
	059 Move W26, W0
	060 Move X0, X24
	061 Call 0x25FC4C0, X0
	062 Move X2, [X27]
	063 Call 0x2219CF4, X0
	064 Move X8, [X23]
	065 Add X3, X0, W19
	066 Move X0, X23
	067 Move W2, W20
	068 Move X7, [X8+648]
	069 Move X6, [X8+656]
	070 Add X8, X22, W21
	071 Add X1, X8, W26
	072 Move W4, W25
	073 Move X20, [X31+64]
	074 Move X19, [X31+72]
	075 Move X22, [X31+48]
	076 Move X21, [X31+56]
	077 Move X24, [X31+32]
	078 Move X23, [X31+40]
	079 Move X26, [X31+16]
	080 Move X25, [X31+24]
	081 Move X5, X31
	082 Move X30, [X31+80]
	083 Move X27, [X31+88]
	084 CallNoReturn X7
	085 Move X0, 0xEC1000
	086 Move X0, [X0+1888]
	087 Call 0x1C17D08
	088 Call 0x1C17F10
	089 Move X19, X0
	090 Move X0, 0xEE8000
	091 Move X0, [X0+768]
	092 Call 0x1C17D08
	093 Move X20, X0
	094 Move X0, 0xEE1000
	095 Move X0, [X0+1632]
	096 Move X8, 0xEE8000
	097 Move X9, 0xEE2000
	098 Move X8, [X8+776]
	099 Move X9, [X9+3264]
	100 NotImplemented "Instruction CMP not yet implemented."
	101 NotImplemented "Instruction CSEL not yet implemented."
	102 Call 0x1C17D08
	103 Move X19, X0
	104 Move X0, 0xEBE000
	105 Move X0, [X0+1320]
	106 Call 0x1C17D08
	107 Call 0x1C17F10
	108 Move X20, X0
	109 Move X0, 0xEE8000
	110 Move X0, [X0+736]
	111 Call 0x1C17D08
	112 Move X2, X0
	113 Move X0, X20
	114 Move X1, X19
	115 Move X3, X31
	116 Call ArgumentNullException..ctor, X0, X1, X2
	117 Move X8, 0xEE8000
	118 Move X9, 0xEE8000
	119 Move X8, [X8+784]
	120 Move X9, [X9+792]
	121 NotImplemented "Instruction CMP not yet implemented."
	122 NotImplemented "Instruction CSEL not yet implemented."
	123 Call 0x1C17D08
	124 Move X19, X0
	125 Move X0, 0xEC1000
	126 Move X0, [X0+1888]
	127 Call 0x1C17D08
	128 Call 0x1C17F10
	129 Move X20, X0
	130 Move X0, 0xEE1000
	131 Move X0, [X0+1648]
	132 Call 0x1C17D08
	133 Move X2, X0
	134 Move X0, X20
	135 Move X1, X19
	136 Move X3, X31
	137 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	138 Move X0, 0xEE8000
	139 Move X0, [X0+2016]
	140 Call 0x1C17D08
	141 Move X1, X0
	142 Move X0, X20
	143 Call 0x1C17DEC
	144 Move X0, 0xEC1000
	145 Move X0, [X0+1888]
	146 Call 0x1C17D08
	147 Call 0x1C17F10
	148 Move X19, X0
	149 Move X0, 0xEE2000
	150 Move X0, [X0+3264]
	151 Call 0x1C17D08
	152 Move X20, X0
	153 Move X0, 0xEE8000
	154 Move X0, [X0+264]
	155 Call 0x1C17D08
	156 Move X2, X0
	157 Move X0, X19
	158 Move X1, X20
	159 Move X3, X31
	160 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	161 Move X0, 0xEE8000
	162 Move X0, [X0+2016]
	163 Call 0x1C17D08
	164 Move X1, X0
	165 Move X0, X19
	166 Call 0x1C17DEC

Method: System.Int32 GetBytes(System.Char[] chars, System.Int32 charIndex, System.Int32 charCount, System.Byte[] bytes, System.Int32 byteIndex)

Disassembly:
	0x0323B970 BL 0x19903C0
	0x0323B974 MOV X0, X19
	0x0323B978 MOV X1, X31
	0x0323B97C BL 0x33BE520
	0x0323B980 MOV X19, X0
	0x0323B984 ADRP X0, 0xEE7000
	0x0323B988 LDR X0, [X0 + 0x6B0]
	0x0323B98C BL 0x1C16D08
	0x0323B990 MOV X1, X20
	0x0323B994 MOV X2, X19
	0x0323B998 MOV X3, X31
	0x0323B99C BL 0x320A264
	0x0323B9A0 MOV X19, X0
	0x0323B9A4 ADRP X0, 0xEC0000
	0x0323B9A8 LDR X0, [X0 + 0x578]
	0x0323B9AC BL 0x1C16D08
	0x0323B9B0 BL 0x1C16F10
	0x0323B9B4 MOV X1, X19
	0x0323B9B8 MOV X2, X31
	0x0323B9BC MOV X20, X0
	0x0323B9C0 BL 0x3314A68
	0x0323B9C4 ADRP X0, 0xEE7000
	0x0323B9C8 LDR X0, [X0 + 0x838]
	0x0323B9CC BL 0x1C16D08
	0x0323B9D0 MOV X1, X0
	0x0323B9D4 MOV X0, X20
	0x0323B9D8 BL 0x1C16DEC
	0x0323B9DC SUB W8, W0, W1
	0x0323B9E0 SUB W9, W2, W1
	0x0323B9E4 CMP W8, W9
	0x0323B9E8 CSET W0, LS
	0x0323B9EC RET
	0x0323B9F0 SUB W8, W0, W1
	0x0323B9F4 UBFM W0, W8, 0x1, 0x1F
	0x0323B9F8 RET
	0x0323B9FC SUB W0, W0, W1
	0x0323BA00 RET
	0x0323BA04 SUB X31, X31, 0x90
	0x0323BA08 STP X29, X30, [X31 + 0x30]
	0x0323BA0C STP X28, X27, [X31 + 0x40]
	0x0323BA10 STP X26, X25, [X31 + 0x50]
	0x0323BA14 STP X24, X23, [X31 + 0x60]
	0x0323BA18 STP X22, X21, [X31 + 0x70]
	0x0323BA1C STP X20, X19, [X31 + 0x80]
	0x0323BA20 ADRP X19, 0x11A1000
	0x0323BA24 LDRB W8, [X19 + 0x408]
	0x0323BA28 MOV X20, X5
	0x0323BA2C MOV W27, W4
	0x0323BA30 MOV X23, X3
	0x0323BA34 MOV W22, W2
	0x0323BA38 MOV X29, X1
	0x0323BA3C STR X0, [X31 + 0x18]
	0x0323BA40 TBNZ X8, 0x0, 0x323BA64
	0x0323BA44 ADRP X0, 0xEE7000
	0x0323BA48 LDR X0, [X0 + 0x820]
	0x0323BA4C BL 0x1C16CF4
	0x0323BA50 ADRP X0, 0xEE7000
	0x0323BA54 LDR X0, [X0 + 0x828]
	0x0323BA58 BL 0x1C16CF4
	0x0323BA5C MOVZ W8, 0x1
	0x0323BA60 STRB W8, [X19 + 0x408]
	0x0323BA64 ADD X24, X29, W22, 0x1, SXTW
	0x0323BA68 STR X31, [X31 + 0x28]
	0x0323BA6C STR X20, [X31 + 0x10]
	0x0323BA70 CBZ X20, 0x323BAF0
	0x0323BA74 ADRP X8, 0xEE7000
	0x0323BA78 LDR X8, [X8 + 0x820]
	0x0323BA7C LDR X1, [X8]
	0x0323BA80 LDR X8, [X20]
	0x0323BA84 CMP X8, X1
	0x0323BA88 B.NE 0x323C058
	0x0323BA8C LDR W26, [X20 + 0x38]
	0x0323BA90 MOV X0, X20
	0x0323BA94 MOV X1, X31
	0x0323BA98 BL 0x33FBF14
	0x0323BA9C TBZ X0, 0x0, 0x323BB00
	0x0323BAA0 MOV X0, X20
	0x0323BAA4 MOV X1, X31
	0x0323BAA8 BL 0x33FBF24
	0x0323BAAC CBZ X0, 0x323C060
	0x0323BAB0 LDR X8, [X0]
	0x0323BAB4 MOV X25, X0
	0x0323BAB8 LDP X9, X1, [X8 + 0x1B8]
	0x0323BABC BLR X9
	0x0323BAC0 CMP W0, 0x1
	0x0323BAC4 B.LT 0x323BAD0
	0x0323BAC8 LDRB W8, [X20 + 0x31]
	0x0323BACC CBNZ W8, 0x323C064
	0x0323BAD0 MOVZ W4, 0x1
	0x0323BAD4 MOV X0, X25
	0x0323BAD8 MOV X1, X29
	0x0323BADC MOV X2, X24
	0x0323BAE0 MOV X3, X20
	0x0323BAE4 MOV X5, X31
	0x0323BAE8 BL 0x33FBF60
	0x0323BAEC B 0x323BB04
	0x0323BAF0 MOV W26, W31
	0x0323BAF4 MOV X25, X31
	0x0323BAF8 MOV X22, X31
	0x0323BAFC B 0x323BB08
	0x0323BB00 MOV X25, X31
	0x0323BB04 MOV X22, X20
	0x0323BB08 ADRP X21, 0xEE7000
	0x0323BB0C LDR X21, [X21 + 0x828]
	0x0323BB10 ADD X20, X23, W27, SXTW
	0x0323BB14 MOVZ W19, 0xD800
	0x0323BB18 MOV X28, X23
	0x0323BB1C STR X29, [X31 + 0x20]
	0x0323BB20 CMP X24, X29
	0x0323BB24 B.LS 0x323BB70
	0x0323BB28 CMP W26, 0x1
	0x0323BB2C B.LT 0x323BBE4
	0x0323BB30 LDR X0, [X21]
	0x0323BB34 LDRH W19, [X29]
	0x0323BB38 LDR W8, [X0 + 0xE0]
	0x0323BB3C CBNZ W8, 0x323BB44
	0x0323BB40 BL 0x1C16DFC
	0x0323BB44 AND W8, W19, 0xFC00
	0x0323BB48 MOVZ W9, 0xDC00
	0x0323BB4C CMP W8, W9
	0x0323BB50 B.NE 0x323BB68
	0x0323BB54 MOVZ W8, 0x2400
	0x0323BB58 MOVK W8, 0xFCA00000
	0x0323BB5C ADD W8, W8, W26, 0xA, LSL
	0x0323BB60 ADD W26, W8, W19
	0x0323BB64 ADD X29, X29, 0x2
	0x0323BB68 MOVZ W19, 0xD800
	0x0323BB6C B 0x323BC44
	0x0323BB70 CBZ W26, 0x323BC04
	0x0323BB74 CBZ X25, 0x323BBCC
	0x0323BB78 LDRB W8, [X25 + 0x2A]
	0x0323BB7C CBZ W8, 0x323BBCC
	0x0323BB80 MOV X0, X25
	0x0323BB84 MOV X1, X31
	0x0323BB88 BL 0x33FBF7C
	0x0323BB8C LDR X8, [X21]
	0x0323BB90 MOV W27, W0
	0x0323BB94 LDR W9, [X8 + 0xE0]
	0x0323BB98 CBNZ W9, 0x323BBA4
	0x0323BB9C MOV X0, X8
	0x0323BBA0 BL 0x1C16DFC
	0x0323BBA4 AND W8, W27, 0xFFFF
	0x0323BBA8 AND W9, W8, 0xFC00
	0x0323BBAC MOVZ W10, 0xDC00
	0x0323BBB0 CMP W9, W10
	0x0323BBB4 B.NE 0x323BC20
	0x0323BBB8 MOVZ W9, 0x2400
	0x0323BBBC MOVK W9, 0xFCA00000
	0x0323BBC0 ADD W9, W9, W26, 0xA, LSL
	0x0323BBC4 ADD W26, W9, W8
	0x0323BBC8 B 0x323BC44
	0x0323BBCC CMP W26, 0x1
	0x0323BBD0 B.LT 0x323C018

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0x11A2000
	011 Move W8, [X25+1028]
	012 Move W20, W5
	013 Move X23, X4
	014 Move W19, W3
	015 Move W21, W2
	016 Move X24, X1
	017 Move X22, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {30}
	022 Move X0, 0xEE7000
	023 Move X0, [X0+2096]
	024 Call 0x1C17CF4
	025 Move X0, 0xEE8000
	026 Move X0, [X0+760]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X25+1028], W8
	030 Compare X24, 0
	031 JumpIfEqual {106}
	032 Compare X23, 0
	033 JumpIfEqual {106}
	034 Move TEMP, X19
	035 And TEMP, TEMP, -2147483648
	036 Compare TEMP, -2147483648
	037 JumpIfEqual {127}
	038 Move TEMP, X21
	039 And TEMP, TEMP, -2147483648
	040 Compare TEMP, -2147483648
	041 JumpIfEqual {127}
	042 Move W8, [X24+24]
	043 Subtract W9, W8, W21
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move TEMP, X20
	046 And TEMP, TEMP, -2147483648
	047 Compare TEMP, -2147483648
	048 JumpIfEqual {95}
	049 Move W9, [X23+24]
	050 Subtract W25, W9, W20
	051 Compare W19, 0
	052 JumpIfEqual {84}
	053 Move X9, 0xEE8000
	054 Move X9, [X9+760]
	055 Move X26, 0xEE7000
	056 Move X26, [X26+2096]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X1, [X9]
	059 Add X9, X24, 32
	060 Move X0, X23
	061 NotImplemented "Instruction CSEL not yet implemented."
	062 Call 0x25FC4C0, X0
	063 Move X2, [X26]
	064 Call 0x2219CF4, X0
	065 Move X8, [X22]
	066 Add X1, X24, W21
	067 Add X3, X0, W20
	068 Move X0, X22
	069 Move X7, [X8+648]
	070 Move X6, [X8+656]
	071 Move W2, W19
	072 Move W4, W25
	073 Move X20, [X31+64]
	074 Move X19, [X31+72]
	075 Move X22, [X31+48]
	076 Move X21, [X31+56]
	077 Move X24, [X31+32]
	078 Move X23, [X31+40]
	079 Move X26, [X31+16]
	080 Move X25, [X31+24]
	081 Move X5, X31
	082 Move X30, [X31+80]
	083 CallNoReturn X7
	084 Move X20, [X31+64]
	085 Move X19, [X31+72]
	086 Move X22, [X31+48]
	087 Move X21, [X31+56]
	088 Move X24, [X31+32]
	089 Move X23, [X31+40]
	090 Move X26, [X31+16]
	091 Move X25, [X31+24]
	092 Move W0, W31
	093 Move X30, [X31+80]
	094 Return X0
	095 Move X0, 0xEC1000
	096 Move X0, [X0+1888]
	097 Call 0x1C17D08
	098 Call 0x1C17F10
	099 Move X19, X0
	100 Move X0, 0xEE8000
	101 Move X0, [X0+768]
	102 Call 0x1C17D08
	103 Move X20, X0
	104 Move X0, 0xEE1000
	105 Move X0, [X0+1632]
	106 Move X8, 0xEE8000
	107 Move X9, 0xEE8000
	108 Move X8, [X8+776]
	109 Move X9, [X9+728]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 NotImplemented "Instruction CSEL not yet implemented."
	112 Call 0x1C17D08
	113 Move X19, X0
	114 Move X0, 0xEBE000
	115 Move X0, [X0+1320]
	116 Call 0x1C17D08
	117 Call 0x1C17F10
	118 Move X20, X0
	119 Move X0, 0xEE8000
	120 Move X0, [X0+736]
	121 Call 0x1C17D08
	122 Move X2, X0
	123 Move X0, X20
	124 Move X1, X19
	125 Move X3, X31
	126 Call ArgumentNullException..ctor, X0, X1, X2
	127 Move X8, 0xEE8000
	128 Move X9, 0xEE8000
	129 Move X8, [X8+784]
	130 Move X9, [X9+792]
	131 NotImplemented "Instruction CMP not yet implemented."
	132 NotImplemented "Instruction CSEL not yet implemented."
	133 Call 0x1C17D08
	134 Move X19, X0
	135 Move X0, 0xEC1000
	136 Move X0, [X0+1888]
	137 Call 0x1C17D08
	138 Call 0x1C17F10
	139 Move X20, X0
	140 Move X0, 0xEE1000
	141 Move X0, [X0+1648]
	142 Call 0x1C17D08
	143 Move X2, X0
	144 Move X0, X20
	145 Move X1, X19
	146 Move X3, X31
	147 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	148 Move X0, 0xEE8000
	149 Move X0, [X0+2024]
	150 Call 0x1C17D08
	151 Move X1, X0
	152 Move X0, X20
	153 Call 0x1C17DEC
	154 Move X0, 0xEC1000
	155 Move X0, [X0+1888]
	156 Call 0x1C17D08
	157 Call 0x1C17F10
	158 Move X19, X0
	159 Move X0, 0xEE8000
	160 Move X0, [X0+728]
	161 Call 0x1C17D08
	162 Move X20, X0
	163 Move X0, 0xEE8000
	164 Move X0, [X0+224]
	165 Call 0x1C17D08
	166 Move X2, X0
	167 Move X0, X19
	168 Move X1, X20
	169 Move X3, X31
	170 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	171 Move X0, 0xEE8000
	172 Move X0, [X0+2024]
	173 Call 0x1C17D08
	174 Move X1, X0
	175 Move X0, X19
	176 Call 0x1C17DEC

Method: System.Int32 GetBytes(System.Char* chars, System.Int32 charCount, System.Byte* bytes, System.Int32 byteCount)

Disassembly:
	0x0323BBD4 CBZ X22, 0x323BC44
	0x0323BBD8 LDRB W8, [X22 + 0x30]
	0x0323BBDC CBNZ W8, 0x323BC44
	0x0323BBE0 B 0x323C01C
	0x0323BBE4 CBZ X25, 0x323BBFC
	0x0323BBE8 MOV X0, X25
	0x0323BBEC MOV X1, X31
	0x0323BBF0 BL 0x33FBF7C
	0x0323BBF4 ANDS W26, W0, 0xFFFF
	0x0323BBF8 B.NE 0x323BC28
	0x0323BBFC LDRH W26, [X29], #0x2
	0x0323BC00 B 0x323BC28
	0x0323BC04 CBZ X25, 0x323C014
	0x0323BC08 MOV X0, X25
	0x0323BC0C MOV X1, X31
	0x0323BC10 BL 0x33FBF7C
	0x0323BC14 ANDS W26, W0, 0xFFFF
	0x0323BC18 B.NE 0x323BC28
	0x0323BC1C B 0x323C018
	0x0323BC20 CBZ W8, 0x323C014
	0x0323BC24 MOV W26, W8
	0x0323BC28 LDR X0, [X21]
	0x0323BC2C LDR W8, [X0 + 0xE0]
	0x0323BC30 CBNZ W8, 0x323BC38
	0x0323BC34 BL 0x1C16DFC
	0x0323BC38 AND W8, W26, 0xFC00
	0x0323BC3C CMP W8, W19
	0x0323BC40 B.EQ 0x323BB20
	0x0323BC44 LDR X0, [X21]
	0x0323BC48 LDR W8, [X0 + 0xE0]
	0x0323BC4C CBNZ W8, 0x323BC54
	0x0323BC50 BL 0x1C16DFC
	0x0323BC54 UBFM W8, W26, 0xB, 0x1F
	0x0323BC58 CMP W8, 0x1B
	0x0323BC5C B.EQ 0x323BF10
	0x0323BC60 CMP W26, 0x10000
	0x0323BC64 MOVN X8, 0x3
	0x0323BC68 CINC X8, X8, LT
	0x0323BC6C CMP W26, 0x800
	0x0323BC70 MOVN X9, 0x1
	0x0323BC74 CSEL X8, X9, X8, LT
	0x0323BC78 CMP W26, 0x80
	0x0323BC7C CSINV X8, X8, X31, GE
	0x0323BC80 ADD X8, X8, X20
	0x0323BC84 CMP X8, X28
	0x0323BC88 B.CC 0x323BFB0
	0x0323BC8C CMP W26, 0x7F
	0x0323BC90 B.LE 0x323BCBC
	0x0323BC94 CMP W26, 0x7FF
	0x0323BC98 B.LE 0x323BCC4
	0x0323BC9C CMP W26, 0x10000
	0x0323BCA0 B.LT 0x323BCD0
	0x0323BCA4 UBFM W9, W26, 0x12, 0x1F
	0x0323BCA8 MOVN W8, 0x7F
	0x0323BCAC ORR W9, W9, 0xF0
	0x0323BCB0 STRB W9, [X28], #0x1
	0x0323BCB4 BFM W8, W26, 0xC, 0x11
	0x0323BCB8 B 0x323BCD8
	0x0323BCBC STRB W26, [X28]
	0x0323BCC0 B 0x323BCF4
	0x0323BCC4 UBFM W8, W26, 0x6, 0x1F
	0x0323BCC8 ORR W8, W8, 0xC0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {24}
	006 Compare X3, 0
	007 JumpIfEqual {24}
	008 Move TEMP, X4
	009 And TEMP, TEMP, -2147483648
	010 Compare TEMP, -2147483648
	011 JumpIfEqual {45}
	012 Move TEMP, X2
	013 And TEMP, TEMP, -2147483648
	014 Compare TEMP, -2147483648
	015 JumpIfEqual {45}
	016 Move X8, [X0]
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X5, X31
	020 Move X7, [X8+648]
	021 Move X6, [X8+656]
	022 Move X30, [X31+32]
	023 CallNoReturn X7
	024 Move X8, 0xEE8000
	025 Move X9, 0xEE8000
	026 Move X8, [X8+728]
	027 Move X9, [X9+776]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 NotImplemented "Instruction CSEL not yet implemented."
	030 Call 0x1C17D08
	031 Move X19, X0
	032 Move X0, 0xEBE000
	033 Move X0, [X0+1320]
	034 Call 0x1C17D08
	035 Call 0x1C17F10
	036 Move X20, X0
	037 Move X0, 0xEE8000
	038 Move X0, [X0+736]
	039 Call 0x1C17D08
	040 Move X2, X0
	041 Move X0, X20
	042 Move X1, X19
	043 Move X3, X31
	044 Call ArgumentNullException..ctor, X0, X1, X2
	045 Move X8, 0xEE8000
	046 Move X9, 0xEE8000
	047 Move X8, [X8+808]
	048 Move X9, [X9+784]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 NotImplemented "Instruction CSEL not yet implemented."
	051 Call 0x1C17D08
	052 Move X19, X0
	053 Move X0, 0xEC1000
	054 Move X0, [X0+1888]
	055 Call 0x1C17D08
	056 Call 0x1C17F10
	057 Move X20, X0
	058 Move X0, 0xEE1000
	059 Move X0, [X0+1648]
	060 Call 0x1C17D08
	061 Move X2, X0
	062 Move X0, X20
	063 Move X1, X19
	064 Move X3, X31
	065 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	066 Move X0, 0xEE8000
	067 Move X0, [X0+2032]
	068 Call 0x1C17D08
	069 Move X1, X0
	070 Move X0, X20
	071 Call 0x1C17DEC

Method: System.Int32 GetCharCount(System.Byte[] bytes, System.Int32 index, System.Int32 count)

Disassembly:
	0x0323BCCC B 0x323BCE4
	0x0323BCD0 UBFM W8, W26, 0xC, 0x1F
	0x0323BCD4 ORR W8, W8, 0xE0
	0x0323BCD8 STRB W8, [X28], #0x1
	0x0323BCDC MOVN W8, 0x7F
	0x0323BCE0 BFM W8, W26, 0x6, 0xB
	0x0323BCE4 STRB W8, [X28]
	0x0323BCE8 MOVZ W8, 0x80
	0x0323BCEC BFM W8, W26, 0x0, 0x5
	0x0323BCF0 STRB W8, [X28 + 0x1]!
	0x0323BCF4 ADD X28, X28, 0x1
	0x0323BCF8 CBZ X25, 0x323BD10
	0x0323BCFC MOV X0, X25
	0x0323BD00 MOV X1, X31
	0x0323BD04 BL 0x33FBF7C
	0x0323BD08 ANDS W26, W0, 0xFFFF
	0x0323BD0C B.NE 0x323BC28
	0x0323BD10 LDR X0, [X21]
	0x0323BD14 LDR W8, [X0 + 0xE0]
	0x0323BD18 CBNZ W8, 0x323BD20
	0x0323BD1C BL 0x1C16DFC
	0x0323BD20 SUB W9, W24, W29
	0x0323BD24 UBFM W8, W9, 0x1, 0x1F
	0x0323BD28 CMP W9, 0x1B
	0x0323BD2C SUB W9, W20, W28
	0x0323BD30 B.LS 0x323BEE0
	0x0323BD34 CMP W8, W9
	0x0323BD38 CSEL W8, W9, W8, GT
	0x0323BD3C ADD X8, X29, W8, 0x1, SXTW
	0x0323BD40 SUB X27, X8, 0xA
	0x0323BD44 CMP X29, X27
	0x0323BD48 MOV W26, W31
	0x0323BD4C B.CS 0x323BB20
	0x0323BD50 MOV X8, X29
	0x0323BD54 LDRH W26, [X8], #0x2
	0x0323BD58 CMP W26, 0x7F
	0x0323BD5C B.HI 0x323BDF4
	0x0323BD60 MOV X9, X28
	0x0323BD64 STRB W26, [X9], #0x1
	0x0323BD68 TBNZ X8, 0x1, 0x323BD78
	0x0323BD6C MOV X28, X9
	0x0323BD70 MOV X29, X8
	0x0323BD74 B 0x323BD90
	0x0323BD78 LDRH W26, [X29 + 0x2]
	0x0323BD7C ADD X29, X29, 0x4
	0x0323BD80 CMP W26, 0x7F
	0x0323BD84 B.HI 0x323BDFC
	0x0323BD88 STRB W26, [X28 + 0x1]
	0x0323BD8C ADD X28, X28, 0x2
	0x0323BD90 CMP X29, X27
	0x0323BD94 B.CS 0x323BDE8
	0x0323BD98 LDP W8, W9, [X29]
	0x0323BD9C ORR W10, W9, W8, 0x0
	0x0323BDA0 ANDS W31, W10, 0xFF80FF80
	0x0323BDA4 B.NE 0x323BDD4
	0x0323BDA8 STRB W8, [X28]
	0x0323BDAC UBFM W8, W8, 0x10, 0x1F
	0x0323BDB0 ADD X29, X29, 0x8
	0x0323BDB4 STRB W9, [X28 + 0x2]
	0x0323BDB8 UBFM W9, W9, 0x10, 0x1F
	0x0323BDBC STRB W8, [X28 + 0x1]
	0x0323BDC0 STRB W9, [X28 + 0x3]
	0x0323BDC4 CMP X27, X29
	0x0323BDC8 ADD X28, X28, 0x4
	0x0323BDCC B.HI 0x323BD98
	0x0323BDD0 B 0x323BDE8
	0x0323BDD4 AND W26, W8, 0xFFFF
	0x0323BDD8 CMP W26, 0x7F
	0x0323BDDC ADD X29, X29, 0x2
	0x0323BDE0 B.HI 0x323BE00
	0x0323BDE4 STRB W8, [X28], #0x1
	0x0323BDE8 CMP X29, X27
	0x0323BDEC B.CC 0x323BD50
	0x0323BDF0 B 0x323BF84
	0x0323BDF4 MOV X29, X8
	0x0323BDF8 B 0x323BE00
	0x0323BDFC MOV X28, X9
	0x0323BE00 CMP W26, 0x7FF
	0x0323BE04 B.LS 0x323BE98
	0x0323BE08 LDR X0, [X21]
	0x0323BE0C LDR W8, [X0 + 0xE0]
	0x0323BE10 CBNZ W8, 0x323BE18
	0x0323BE14 BL 0x1C16DFC
	0x0323BE18 AND W8, W26, 0xF800
	0x0323BE1C CMP W8, W19
	0x0323BE20 B.NE 0x323BEA4
	0x0323BE24 UBFM W8, W26, 0xA, 0x1F
	0x0323BE28 CMP W8, 0x37
	0x0323BE2C B.CS 0x323BF8C
	0x0323BE30 STR X22, [X31 + 0x8]
	0x0323BE34 MOV X22, X23
	0x0323BE38 MOV X23, X29
	0x0323BE3C LDRH W19, [X23], #0x2
	0x0323BE40 LDR X0, [X21]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {37}
	006 Move TEMP, X3
	007 And TEMP, TEMP, -2147483648
	008 Compare TEMP, -2147483648
	009 JumpIfEqual {54}
	010 Move TEMP, X2
	011 And TEMP, TEMP, -2147483648
	012 Compare TEMP, -2147483648
	013 JumpIfEqual {54}
	014 Move W8, [X1+24]
	015 Subtract W9, W8, W2
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Compare W3, 0
	018 JumpIfEqual {32}
	019 Move X9, [X0]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Add X10, X1, 32
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X5, [X9+712]
	025 Move X4, [X9+720]
	026 NotImplemented "Instruction CSEL not yet implemented."
	027 Add X1, X8, W2
	028 Move W2, W3
	029 Move X3, X31
	030 Move X30, [X31+32]
	031 CallNoReturn X5
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move W0, W31
	035 Move X30, [X31+32]
	036 Return X0
	037 Move X0, 0xEBE000
	038 Move X0, [X0+1320]
	039 Call 0x1C17D08
	040 Call 0x1C17F10
	041 Move X19, X0
	042 Move X0, 0xEE8000
	043 Move X0, [X0+776]
	044 Call 0x1C17D08
	045 Move X20, X0
	046 Move X0, 0xEE8000
	047 Move X0, [X0+736]
	048 Call 0x1C17D08
	049 Move X2, X0
	050 Move X0, X19
	051 Move X1, X20
	052 Move X3, X31
	053 Call ArgumentNullException..ctor, X0, X1, X2
	054 Move X8, 0xEE1000
	055 Move X9, 0xEC4000
	056 Move X8, [X8+1608]
	057 Move X9, [X9+304]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 NotImplemented "Instruction CSEL not yet implemented."
	060 Call 0x1C17D08
	061 Move X19, X0
	062 Move X0, 0xEC1000
	063 Move X0, [X0+1888]
	064 Call 0x1C17D08
	065 Call 0x1C17F10
	066 Move X20, X0
	067 Move X0, 0xEE1000
	068 Move X0, [X0+1648]
	069 Call 0x1C17D08
	070 Move X2, X0
	071 Move X0, X20
	072 Move X1, X19
	073 Move X3, X31
	074 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	075 Move X0, 0xEE8000
	076 Move X0, [X0+2040]
	077 Call 0x1C17D08
	078 Move X1, X0
	079 Move X0, X20
	080 Call 0x1C17DEC
	081 Move X0, 0xEC1000
	082 Move X0, [X0+1888]
	083 Call 0x1C17D08
	084 Call 0x1C17F10
	085 Move X19, X0
	086 Move X0, 0xEE8000
	087 Move X0, [X0+776]
	088 Call 0x1C17D08
	089 Move X20, X0
	090 Move X0, 0xEE8000
	091 Move X0, [X0+224]
	092 Call 0x1C17D08
	093 Move X2, X0
	094 Move X0, X19
	095 Move X1, X20
	096 Move X3, X31
	097 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	098 Move X0, 0xEE8000
	099 Move X0, [X0+2040]
	100 Call 0x1C17D08
	101 Move X1, X0
	102 Move X0, X19
	103 Call 0x1C17DEC

Method: System.Int32 GetCharCount(System.Byte* bytes, System.Int32 count)

Disassembly:
	0x0323BE44 LDR W8, [X0 + 0xE0]
	0x0323BE48 CBNZ W8, 0x323BE50
	0x0323BE4C BL 0x1C16DFC
	0x0323BE50 AND W8, W19, 0xFC00
	0x0323BE54 MOVZ W9, 0xDC00
	0x0323BE58 CMP W8, W9
	0x0323BE5C B.NE 0x323BF98
	0x0323BE60 MOVZ W8, 0x2400
	0x0323BE64 MOVK W8, 0xFCA00000
	0x0323BE68 ADD W9, W8, W26, 0xA, LSL
	0x0323BE6C ADD W26, W9, W19
	0x0323BE70 MOV X29, X23
	0x0323BE74 MOV X23, X22
	0x0323BE78 LDR X22, [X31 + 0x8]
	0x0323BE7C UBFM W9, W26, 0x12, 0x1F
	0x0323BE80 MOVN W8, 0x7F
	0x0323BE84 ORR W9, W9, 0xF0
	0x0323BE88 STRB W9, [X28], #0x1
	0x0323BE8C BFM W8, W26, 0xC, 0x11
	0x0323BE90 MOVZ W19, 0xD800
	0x0323BE94 B 0x323BEAC
	0x0323BE98 UBFM W8, W26, 0x6, 0x1F
	0x0323BE9C ORR W8, W8, 0xFFFFFFC0
	0x0323BEA0 B 0x323BEBC
	0x0323BEA4 UBFM W8, W26, 0xC, 0x1F
	0x0323BEA8 ORR W8, W8, 0xFFFFFFE0
	0x0323BEAC STRB W8, [X28], #0x1
	0x0323BEB0 MOVN W8, 0x7F
	0x0323BEB4 SUB X27, X27, 0x2
	0x0323BEB8 BFM W8, W26, 0x6, 0xB
	0x0323BEBC STRB W8, [X28]
	0x0323BEC0 MOVZ W8, 0x80
	0x0323BEC4 SUB X27, X27, 0x2
	0x0323BEC8 BFM W8, W26, 0x0, 0x5
	0x0323BECC CMP X29, X27
	0x0323BED0 STRB W8, [X28 + 0x1]
	0x0323BED4 ADD X28, X28, 0x2
	0x0323BED8 B.CC 0x323BD50
	0x0323BEDC B 0x323BF84
	0x0323BEE0 CMP W8, W9
	0x0323BEE4 MOV W26, W31
	0x0323BEE8 B.GT 0x323BB20
	0x0323BEEC CMP X24, X29
	0x0323BEF0 B.LS 0x323C014
	0x0323BEF4 LDRH W26, [X29], #0x2
	0x0323BEF8 CMP W26, 0x7F
	0x0323BEFC B.HI 0x323BC28
	0x0323BF00 CMP X24, X29
	0x0323BF04 STRB W26, [X28], #0x1
	0x0323BF08 B.HI 0x323BEF4
	0x0323BF0C B 0x323C014
	0x0323BF10 CBNZ X25, 0x323BF64

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {18}
	006 Move TEMP, X2
	007 And TEMP, TEMP, -2147483648
	008 Compare TEMP, -2147483648
	009 JumpIfEqual {35}
	010 Move X8, [X0]
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X3, X31
	014 Move X5, [X8+712]
	015 Move X4, [X8+720]
	016 Move X30, [X31+32]
	017 CallNoReturn X5
	018 Move X0, 0xEBE000
	019 Move X0, [X0+1320]
	020 Call 0x1C17D08
	021 Call 0x1C17F10
	022 Move X19, X0
	023 Move X0, 0xEE8000
	024 Move X0, [X0+776]
	025 Call 0x1C17D08
	026 Move X20, X0
	027 Move X0, 0xEE8000
	028 Move X0, [X0+736]
	029 Call 0x1C17D08
	030 Move X2, X0
	031 Move X0, X19
	032 Move X1, X20
	033 Move X3, X31
	034 Call ArgumentNullException..ctor, X0, X1, X2
	035 Move X0, 0xEC1000
	036 Move X0, [X0+1888]
	037 Call 0x1C17D08
	038 Call 0x1C17F10
	039 Move X19, X0
	040 Move X0, 0xEE1000
	041 Move X0, [X0+1608]
	042 Call 0x1C17D08
	043 Move X20, X0
	044 Move X0, 0xEE1000
	045 Move X0, [X0+1648]
	046 Call 0x1C17D08
	047 Move X2, X0
	048 Move X0, X19
	049 Move X1, X20
	050 Move X3, X31
	051 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	052 Move X0, 0xEE8000
	053 Move X0, [X0+2048]
	054 Call 0x1C17D08
	055 Move X1, X0
	056 Move X0, X19
	057 Call 0x1C17DEC

Method: System.Int32 GetChars(System.Byte[] bytes, System.Int32 byteIndex, System.Int32 byteCount, System.Char[] chars, System.Int32 charIndex)

Disassembly:
	0x0323BF14 LDR X0, [X31 + 0x10]
	0x0323BF18 CBZ X0, 0x323BF28
	0x0323BF1C MOV X1, X31
	0x0323BF20 BL 0x33FBF24
	0x0323BF24 B 0x323BF40
	0x0323BF28 LDR X8, [X31 + 0x18]
	0x0323BF2C LDR X0, [X8 + 0x28]
	0x0323BF30 CBZ X0, 0x323C060
	0x0323BF34 LDR X8, [X0]
	0x0323BF38 LDP X9, X1, [X8 + 0x178]
	0x0323BF3C BLR X9
	0x0323BF40 MOV X25, X0
	0x0323BF44 CBZ X0, 0x323C060
	0x0323BF48 LDR X1, [X31 + 0x20]
	0x0323BF4C LDR X3, [X31 + 0x10]
	0x0323BF50 MOVZ W4, 0x1
	0x0323BF54 MOV X0, X25
	0x0323BF58 MOV X2, X24
	0x0323BF5C MOV X5, X31
	0x0323BF60 BL 0x33FBF60
	0x0323BF64 STR X29, [X31 + 0x28]
	0x0323BF68 LDR X8, [X25]
	0x0323BF6C ADD X2, X31, 0x28
	0x0323BF70 MOV X0, X25
	0x0323BF74 MOV W1, W26
	0x0323BF78 LDP X9, X3, [X8 + 0x1D8]
	0x0323BF7C BLR X9
	0x0323BF80 LDR X29, [X31 + 0x28]
	0x0323BF84 MOV W26, W31
	0x0323BF88 B 0x323BB20
	0x0323BF8C MOV W26, W31
	0x0323BF90 SUB X29, X29, 0x2
	0x0323BF94 B 0x323BB20
	0x0323BF98 MOV X23, X22
	0x0323BF9C LDR X22, [X31 + 0x8]
	0x0323BFA0 MOV W26, W31
	0x0323BFA4 SUB X29, X29, 0x2
	0x0323BFA8 MOVZ W19, 0xD800
	0x0323BFAC B 0x323BB20
	0x0323BFB0 CBZ X25, 0x323BFE8
	0x0323BFB4 LDRB W8, [X25 + 0x2A]
	0x0323BFB8 CBZ W8, 0x323BFE8
	0x0323BFBC LDR X8, [X25]
	0x0323BFC0 MOV X0, X25
	0x0323BFC4 LDP X9, X1, [X8 + 0x1A8]
	0x0323BFC8 BLR X9
	0x0323BFCC CMP W26, 0x10000
	0x0323BFD0 B.LT 0x323BFFC
	0x0323BFD4 LDR X8, [X25]
	0x0323BFD8 MOV X0, X25
	0x0323BFDC LDP X9, X1, [X8 + 0x1A8]
	0x0323BFE0 BLR X9
	0x0323BFE4 B 0x323BFFC
	0x0323BFE8 CMP W26, 0x10000
	0x0323BFEC B.GE 0x323BFF8
	0x0323BFF0 SUB X29, X29, 0x2
	0x0323BFF4 B 0x323BFFC
	0x0323BFF8 SUB X29, X29, 0x4
	0x0323BFFC LDR X0, [X31 + 0x18]
	0x0323C000 CMP X28, X23
	0x0323C004 CSET W2, EQ
	0x0323C008 MOV X1, X22
	0x0323C00C MOV X3, X31
	0x0323C010 BL 0x3245184
	0x0323C014 MOV W26, W31
	0x0323C018 CBZ X22, 0x323C034
	0x0323C01C LDR X8, [X31 + 0x20]
	0x0323C020 SUB X8, X29, X8
	0x0323C024 CMP X8, 0x0
	0x0323C028 CINC X8, X8, LT
	0x0323C02C UBFM X8, X8, 0x1, 0x3F
	0x0323C030 STP W8, W26, [X22 + 0x34]
	0x0323C034 SUB W0, W28, W23
	0x0323C038 LDP X20, X19, [X31 + 0x80]
	0x0323C03C LDP X22, X21, [X31 + 0x70]
	0x0323C040 LDP X24, X23, [X31 + 0x60]
	0x0323C044 LDP X26, X25, [X31 + 0x50]
	0x0323C048 LDP X28, X27, [X31 + 0x40]
	0x0323C04C LDP X29, X30, [X31 + 0x30]
	0x0323C050 ADD X31, X31, 0x90
	0x0323C054 RET
	0x0323C058 MOV X0, X20
	0x0323C05C BL 0x1C171E0
	0x0323C060 BL 0x1C16F20
	0x0323C064 LDR X0, [X31 + 0x18]
	0x0323C068 LDR X8, [X0]
	0x0323C06C LDP X9, X1, [X8 + 0x1B8]
	0x0323C070 BLR X9
	0x0323C074 MOV X19, X0
	0x0323C078 MOV X0, X20
	0x0323C07C BL 0x19903C0
	0x0323C080 LDR X20, [X20 + 0x10]
	0x0323C084 MOV X0, X20
	0x0323C088 BL 0x19903C0
	0x0323C08C MOV X0, X20
	0x0323C090 MOV X1, X31
	0x0323C094 BL 0x33BE520
	0x0323C098 MOV X20, X0
	0x0323C09C ADRP X0, 0xEE6000
	0x0323C0A0 LDR X0, [X0 + 0x6B0]
	0x0323C0A4 BL 0x1C16D08
	0x0323C0A8 MOV X1, X19
	0x0323C0AC MOV X2, X20
	0x0323C0B0 MOV X3, X31
	0x0323C0B4 BL 0x320A264
	0x0323C0B8 MOV X19, X0
	0x0323C0BC ADRP X0, 0xEBF000
	0x0323C0C0 LDR X0, [X0 + 0x578]
	0x0323C0C4 BL 0x1C16D08
	0x0323C0C8 BL 0x1C16F10
	0x0323C0CC MOV X1, X19
	0x0323C0D0 MOV X2, X31
	0x0323C0D4 MOV X20, X0
	0x0323C0D8 BL 0x3314A68
	0x0323C0DC ADRP X0, 0xEE6000
	0x0323C0E0 LDR X0, [X0 + 0x840]
	0x0323C0E4 BL 0x1C16D08
	0x0323C0E8 MOV X1, X0
	0x0323C0EC MOV X0, X20
	0x0323C0F0 BL 0x1C16DEC
	0x0323C0F4 STP X29, X30, [X31 - 0x60]!
	0x0323C0F8 STP X28, X27, [X31 + 0x10]
	0x0323C0FC STP X26, X25, [X31 + 0x20]
	0x0323C100 STP X24, X23, [X31 + 0x30]
	0x0323C104 STP X22, X21, [X31 + 0x40]
	0x0323C108 STP X20, X19, [X31 + 0x50]
	0x0323C10C ADRP X20, 0x11A0000
	0x0323C110 LDRB W8, [X20 + 0x409]
	0x0323C114 MOV X22, X3
	0x0323C118 MOV W23, W2
	0x0323C11C MOV X28, X1
	0x0323C120 MOV X19, X0
	0x0323C124 TBNZ X8, 0x0, 0x323C148
	0x0323C128 ADRP X0, 0xEE6000
	0x0323C12C LDR X0, [X0 + 0x848]
	0x0323C130 BL 0x1C16CF4
	0x0323C134 ADRP X0, 0xEE6000
	0x0323C138 LDR X0, [X0 + 0x828]
	0x0323C13C BL 0x1C16CF4
	0x0323C140 MOVZ W8, 0x1
	0x0323C144 STRB W8, [X20 + 0x409]
	0x0323C148 CBZ X22, 0x323C170
	0x0323C14C ADRP X8, 0xEE6000
	0x0323C150 LDR X8, [X8 + 0x848]
	0x0323C154 LDR X1, [X8]
	0x0323C158 LDR X8, [X22]
	0x0323C15C CMP X8, X1
	0x0323C160 B.NE 0x323C590
	0x0323C164 LDR W25, [X22 + 0x30]
	0x0323C168 SUB W21, W23, W25, 0x1E, ASR
	0x0323C16C B 0x323C178
	0x0323C170 MOV W25, W31
	0x0323C174 MOV W21, W23

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0x11A2000
	011 Move W8, [X25+1029]
	012 Move W20, W5
	013 Move X23, X4
	014 Move W19, W3
	015 Move W21, W2
	016 Move X24, X1
	017 Move X22, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {30}
	022 Move X0, 0xEE8000
	023 Move X0, [X0+712]
	024 Call 0x1C17CF4
	025 Move X0, 0xEE8000
	026 Move X0, [X0+720]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X25+1029], W8
	030 Compare X24, 0
	031 JumpIfEqual {106}
	032 Compare X23, 0
	033 JumpIfEqual {106}
	034 Move TEMP, X19
	035 And TEMP, TEMP, -2147483648
	036 Compare TEMP, -2147483648
	037 JumpIfEqual {127}
	038 Move TEMP, X21
	039 And TEMP, TEMP, -2147483648
	040 Compare TEMP, -2147483648
	041 JumpIfEqual {127}
	042 Move W8, [X24+24]
	043 Subtract W9, W8, W21
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move TEMP, X20
	046 And TEMP, TEMP, -2147483648
	047 Compare TEMP, -2147483648
	048 JumpIfEqual {95}
	049 Move W9, [X23+24]
	050 Subtract W25, W9, W20
	051 Compare W19, 0
	052 JumpIfEqual {84}
	053 Move X9, 0xEE8000
	054 Move X9, [X9+720]
	055 Move X26, 0xEE8000
	056 Move X26, [X26+712]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X1, [X9]
	059 Add X9, X24, 32
	060 Move X0, X23
	061 NotImplemented "Instruction CSEL not yet implemented."
	062 Call Span`1<Char>.op_Implicit, X0
	063 Move X2, [X26]
	064 Call MemoryMarshal.GetReference, X0
	065 Move X8, [X22]
	066 Add X1, X24, W21
	067 Add X3, X0, W20
	068 Move X0, X22
	069 Move X7, [X8+776]
	070 Move X6, [X8+784]
	071 Move W2, W19
	072 Move W4, W25
	073 Move X20, [X31+64]
	074 Move X19, [X31+72]
	075 Move X22, [X31+48]
	076 Move X21, [X31+56]
	077 Move X24, [X31+32]
	078 Move X23, [X31+40]
	079 Move X26, [X31+16]
	080 Move X25, [X31+24]
	081 Move X5, X31
	082 Move X30, [X31+80]
	083 CallNoReturn X7
	084 Move X20, [X31+64]
	085 Move X19, [X31+72]
	086 Move X22, [X31+48]
	087 Move X21, [X31+56]
	088 Move X24, [X31+32]
	089 Move X23, [X31+40]
	090 Move X26, [X31+16]
	091 Move X25, [X31+24]
	092 Move W0, W31
	093 Move X30, [X31+80]
	094 Return X0
	095 Move X0, 0xEC0000
	096 Move X0, [X0+1888]
	097 Call 0x1C17D08
	098 Call 0x1C17F10
	099 Move X19, X0
	100 Move X0, 0xEE7000
	101 Move X0, [X0+792]
	102 Call 0x1C17D08
	103 Move X20, X0
	104 Move X0, 0xEE0000
	105 Move X0, [X0+1632]
	106 Move X8, 0xEE7000
	107 Move X9, 0xEE7000
	108 Move X8, [X8+728]
	109 Move X9, [X9+776]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 NotImplemented "Instruction CSEL not yet implemented."
	112 Call 0x1C17D08
	113 Move X19, X0
	114 Move X0, 0xEBD000
	115 Move X0, [X0+1320]
	116 Call 0x1C17D08
	117 Call 0x1C17F10
	118 Move X20, X0
	119 Move X0, 0xEE7000
	120 Move X0, [X0+736]
	121 Call 0x1C17D08
	122 Move X2, X0
	123 Move X0, X20
	124 Move X1, X19
	125 Move X3, X31
	126 Call ArgumentNullException..ctor, X0, X1, X2
	127 Move X8, 0xEE7000
	128 Move X9, 0xEE7000
	129 Move X8, [X8+808]
	130 Move X9, [X9+768]
	131 NotImplemented "Instruction CMP not yet implemented."
	132 NotImplemented "Instruction CSEL not yet implemented."
	133 Call 0x1C17D08
	134 Move X19, X0
	135 Move X0, 0xEC0000
	136 Move X0, [X0+1888]
	137 Call 0x1C17D08
	138 Call 0x1C17F10
	139 Move X20, X0
	140 Move X0, 0xEE0000
	141 Move X0, [X0+1648]
	142 Call 0x1C17D08
	143 Move X2, X0
	144 Move X0, X20
	145 Move X1, X19
	146 Move X3, X31
	147 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	148 Move X0, 0xEE7000
	149 Move X0, [X0+2056]
	150 Call 0x1C17D08
	151 Move X1, X0
	152 Move X0, X20
	153 Call 0x1C17DEC
	154 Move X0, 0xEC0000
	155 Move X0, [X0+1888]
	156 Call 0x1C17D08
	157 Call 0x1C17F10
	158 Move X19, X0
	159 Move X0, 0xEE7000
	160 Move X0, [X0+776]
	161 Call 0x1C17D08
	162 Move X20, X0
	163 Move X0, 0xEE7000
	164 Move X0, [X0+224]
	165 Call 0x1C17D08
	166 Move X2, X0
	167 Move X0, X19
	168 Move X1, X20
	169 Move X3, X31
	170 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	171 Move X0, 0xEE7000
	172 Move X0, [X0+2056]
	173 Call 0x1C17D08
	174 Move X1, X0
	175 Move X0, X19
	176 Call 0x1C17DEC

Method: System.Int32 GetChars(System.Byte* bytes, System.Int32 byteCount, System.Char* chars, System.Int32 charCount)

Disassembly:
	0x0323C178 ADD X26, X28, W23, SXTW
	0x0323C17C CMP W25, 0x0
	0x0323C180 CSET W8, EQ
	0x0323C184 CMP X26, X28
	0x0323C188 B.LS 0x323C4F0
	0x0323C18C MOVZ W29, 0x8000
	0x0323C190 MOV X23, X31
	0x0323C194 ORR W27, W31, 0x80808080
	0x0323C198 MOVK W29, 0x48220000
	0x0323C19C MOV X20, X28
	0x0323C1A0 MOV W9, W25
	0x0323C1A4 LDRB W25, [X20]
	0x0323C1A8 TBZ X8, 0x0, 0x323C1B8
	0x0323C1AC ADD X20, X20, 0x1
	0x0323C1B0 TBZ X25, 0x7, 0x323C2C0
	0x0323C1B4 B 0x323C460
	0x0323C1B8 AND W8, W25, 0xC0
	0x0323C1BC CMP W8, 0x80
	0x0323C1C0 B.NE 0x323C1E8
	0x0323C1C4 ADD X20, X20, 0x1
	0x0323C1C8 TBNZ X9, 0x17, 0x323C1F4
	0x0323C1CC BFM W25, W9, 0x1A, 0x19
	0x0323C1D0 TBNZ X9, 0x16, 0x323C210
	0x0323C1D4 ANDS W8, W25, 0x3E0
	0x0323C1D8 B.EQ 0x323C23C
	0x0323C1DC CMP W8, 0x360
	0x0323C1E0 B.EQ 0x323C23C
	0x0323C1E4 B 0x323C2A8
	0x0323C1E8 ADD W21, W21, W9, 0x1E, ASR
	0x0323C1EC MOV W25, W9
	0x0323C1F0 B 0x323C23C
	0x0323C1F4 MOVZ W8, 0x7C00
	0x0323C1F8 MOVK W8, 0x400000
	0x0323C1FC AND W8, W9, W8, 0x0
	0x0323C200 CMP W8, 0x400000
	0x0323C204 CSET W8, EQ
	0x0323C208 SUB W21, W21, W8
	0x0323C20C B 0x323C2C0
	0x0323C210 TBNZ X9, 0x11, 0x323C2A8
	0x0323C214 ADRP X8, 0xEE6000
	0x0323C218 LDR X8, [X8 + 0x828]
	0x0323C21C LDR X0, [X8]
	0x0323C220 LDR W8, [X0 + 0xE0]
	0x0323C224 CBNZ W8, 0x323C22C
	0x0323C228 BL 0x1C16DFC
	0x0323C22C AND W8, W25, 0x1F0
	0x0323C230 SUB W8, W8, 0x10
	0x0323C234 CMP W8, 0xF1
	0x0323C238 B.CC 0x323C2A8
	0x0323C23C CBNZ X23, 0x323C284
	0x0323C240 CBZ X22, 0x323C254
	0x0323C244 MOV X0, X22
	0x0323C248 MOV X1, X31
	0x0323C24C BL 0x33FC534
	0x0323C250 B 0x323C268
	0x0323C254 LDR X0, [X19 + 0x30]
	0x0323C258 CBZ X0, 0x323C58C
	0x0323C25C LDR X8, [X0]
	0x0323C260 LDP X9, X1, [X8 + 0x178]
	0x0323C264 BLR X9
	0x0323C268 MOV X23, X0
	0x0323C26C CBZ X0, 0x323C58C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {24}
	006 Compare X3, 0
	007 JumpIfEqual {24}
	008 Move TEMP, X2
	009 And TEMP, TEMP, -2147483648
	010 Compare TEMP, -2147483648
	011 JumpIfEqual {45}
	012 Move TEMP, X4
	013 And TEMP, TEMP, -2147483648
	014 Compare TEMP, -2147483648
	015 JumpIfEqual {45}
	016 Move X8, [X0]
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X5, X31
	020 Move X7, [X8+776]
	021 Move X6, [X8+784]
	022 Move X30, [X31+32]
	023 CallNoReturn X7
	024 Move X8, 0xEE7000
	025 Move X9, 0xEE7000
	026 Move X8, [X8+728]
	027 Move X9, [X9+776]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 NotImplemented "Instruction CSEL not yet implemented."
	030 Call 0x1C17D08
	031 Move X19, X0
	032 Move X0, 0xEBD000
	033 Move X0, [X0+1320]
	034 Call 0x1C17D08
	035 Call 0x1C17F10
	036 Move X20, X0
	037 Move X0, 0xEE7000
	038 Move X0, [X0+736]
	039 Call 0x1C17D08
	040 Move X2, X0
	041 Move X0, X20
	042 Move X1, X19
	043 Move X3, X31
	044 Call ArgumentNullException..ctor, X0, X1, X2
	045 Move X8, 0xEE7000
	046 Move X9, 0xEE7000
	047 Move X8, [X8+808]
	048 Move X9, [X9+784]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 NotImplemented "Instruction CSEL not yet implemented."
	051 Call 0x1C17D08
	052 Move X19, X0
	053 Move X0, 0xEC0000
	054 Move X0, [X0+1888]
	055 Call 0x1C17D08
	056 Call 0x1C17F10
	057 Move X20, X0
	058 Move X0, 0xEE0000
	059 Move X0, [X0+1648]
	060 Call 0x1C17D08
	061 Move X2, X0
	062 Move X0, X20
	063 Move X1, X19
	064 Move X3, X31
	065 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	066 Move X0, 0xEE7000
	067 Move X0, [X0+2064]
	068 Call 0x1C17D08
	069 Move X1, X0
	070 Move X0, X20
	071 Call 0x1C17DEC

Method: System.String GetString(System.Byte[] bytes, System.Int32 index, System.Int32 count)

Disassembly:
	0x0323C270 MOV X0, X23
	0x0323C274 MOV X1, X28
	0x0323C278 MOV X2, X31
	0x0323C27C MOV X3, X31
	0x0323C280 BL 0x33FC570
	0x0323C284 MOV X0, X19
	0x0323C288 MOV X1, X20
	0x0323C28C MOV W2, W25
	0x0323C290 MOV X3, X23
	0x0323C294 BL 0x323C598
	0x0323C298 MOV W25, W31
	0x0323C29C ADD W21, W0, W21
	0x0323C2A0 B 0x323C2A8
	0x0323C2A4 MOV W25, W31
	0x0323C2A8 CMP W25, 0x0
	0x0323C2AC CSET W8, EQ
	0x0323C2B0 CMP X26, X20
	0x0323C2B4 MOV W9, W25
	0x0323C2B8 B.HI 0x323C1A4
	0x0323C2BC B 0x323C4F8
	0x0323C2C0 ADRP X8, 0xEE6000
	0x0323C2C4 LDR X8, [X8 + 0x828]
	0x0323C2C8 MOV X24, X20
	0x0323C2CC LDR X0, [X8]
	0x0323C2D0 LDR W8, [X0 + 0xE0]
	0x0323C2D4 CBNZ W8, 0x323C2DC
	0x0323C2D8 BL 0x1C16DFC
	0x0323C2DC SUB X8, X26, X24
	0x0323C2E0 CMP W8, 0xD
	0x0323C2E4 B.LE 0x323C448
	0x0323C2E8 ADD X8, X24, W8, UXTW
	0x0323C2EC SUB X25, X8, 0x7
	0x0323C2F0 CMP X25, X24
	0x0323C2F4 B.LS 0x323C4D0
	0x0323C2F8 MOV X20, X24
	0x00000000 INVALID
	0x0323C300 TBNZ X8, 0x1F, 0x323C384
	0x0323C304 TBZ X20, 0x0, 0x323C314
	0x00000000 INVALID
	0x0323C30C ADD X20, X24, 0x2
	0x0323C310 TBNZ X8, 0x1F, 0x323C384
	0x0323C314 TBZ X20, 0x1, 0x323C328
	0x0323C318 LDRH W8, [X20]
	0x0323C31C ANDS W31, W8, 0x80808080
	0x0323C320 B.NE 0x323C36C
	0x0323C324 ADD X20, X20, 0x2
	0x0323C328 CMP X25, X20
	0x0323C32C B.LS 0x323C2A4
	0x0323C330 LDP W8, W9, [X20]
	0x0323C334 ORR W9, W9, W8, 0x0
	0x0323C338 ANDS W31, W9, W27, 0x0
	0x0323C33C B.NE 0x323C368
	0x0323C340 ADD X8, X20, 0x8
	0x0323C344 CMP X8, X25
	0x0323C348 B.CS 0x323C474
	0x0323C34C LDP W8, W9, [X20 + 0x8]
	0x0323C350 ORR W9, W9, W8, 0x0
	0x0323C354 ANDS W31, W9, W27, 0x0
	0x0323C358 B.NE 0x323C364
	0x0323C35C ADD X20, X20, 0x10
	0x0323C360 B 0x323C328
	0x0323C364 ADD X20, X20, 0x8
	0x0323C368 AND W8, W8, 0xFF
	0x0323C36C AND W8, W8, 0xFF
	0x0323C370 CMP W8, 0x80
	0x0323C374 ADD X24, X20, 0x1
	0x0323C378 B.CC 0x323C2F0
	0x0323C37C MOV X20, X24
	0x0323C380 B 0x323C388
	0x0323C384 AND W8, W8, 0xFF
	0x0323C388 MOV X24, X20
	0x0323C38C LDRB W9, [X24], #0x1
	0x0323C390 TBZ X8, 0x6, 0x323C4E4
	0x0323C394 AND W10, W9, 0xC0
	0x0323C398 CMP W10, 0x80
	0x0323C39C B.NE 0x323C4E4
	0x0323C3A0 TBNZ X8, 0x5, 0x323C3B0
	0x0323C3A4 ANDS W31, W8, 0x1E
	0x0323C3A8 B.NE 0x323C440
	0x0323C3AC B 0x323C4E4
	0x0323C3B0 LDRB W24, [X24]
	0x0323C3B4 AND W29, W9, 0x3F
	0x0323C3B8 BFM W29, W8, 0x1A, 0x3
	0x0323C3BC TBNZ X8, 0x4, 0x323C3EC
	0x0323C3C0 ANDS W8, W29, 0x3E0
	0x0323C3C4 MOVZ W29, 0x8000
	0x0323C3C8 MOVK W29, 0x48220000
	0x0323C3CC B.EQ 0x323C4E4
	0x0323C3D0 CMP W8, 0x360
	0x0323C3D4 B.EQ 0x323C4E4
	0x0323C3D8 AND W8, W24, 0xC0
	0x0323C3DC CMP W8, 0x80
	0x0323C3E0 B.NE 0x323C4E4
	0x0323C3E4 ADD X24, X20, 0x2
	0x0323C3E8 B 0x323C43C
	0x0323C3EC ADRP X8, 0xEE6000
	0x0323C3F0 LDR X8, [X8 + 0x828]
	0x0323C3F4 LDR X0, [X8]
	0x0323C3F8 LDR W8, [X0 + 0xE0]
	0x0323C3FC CBNZ W8, 0x323C404
	0x0323C400 BL 0x1C16DFC
	0x0323C404 UBFM W8, W29, 0x4, 0x1F
	0x0323C408 SUB W8, W8, 0x1
	0x0323C40C MOVZ W29, 0x8000
	0x0323C410 CMP W8, 0xF
	0x0323C414 MOVK W29, 0x48220000
	0x0323C418 B.HI 0x323C4E4
	0x0323C41C AND W8, W24, 0xC0
	0x0323C420 CMP W8, 0x80
	0x0323C424 B.NE 0x323C4E4
	0x0323C428 LDRB W8, [X20 + 0x2]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x11A1000
	008 Move W8, [X23+1030]
	009 Move W20, W3
	010 Move W19, W2
	011 Move X22, X1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xEBA000
	018 Move X0, [X0+632]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+1030], W8
	022 Compare X22, 0
	023 JumpIfEqual {64}
	024 Move TEMP, X20
	025 And TEMP, TEMP, -2147483648
	026 Compare TEMP, -2147483648
	027 JumpIfEqual {81}
	028 Move TEMP, X19
	029 And TEMP, TEMP, -2147483648
	030 Compare TEMP, -2147483648
	031 JumpIfEqual {81}
	032 Move W8, [X22+24]
	033 Subtract W9, W8, W19
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Compare W20, 0
	036 JumpIfEqual {52}
	037 Add X9, X22, 32
	038 NotImplemented "Instruction CMP not yet implemented."
	039 NotImplemented "Instruction CSEL not yet implemented."
	040 Add X0, X8, W19
	041 Move W1, W20
	042 Move X2, X21
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X22, [X31+16]
	046 Move X21, [X31+24]
	047 Move X3, X31
	048 Move X30, [X31+48]
	049 Move X23, [X31+56]
	050 Call String.CreateStringFromEncoding, X0, X1, X2
	051 Return X0
	052 Move X8, 0xEBA000
	053 Move X8, [X8+632]
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move X8, [X8]
	059 Move X8, [X8+184]
	060 Move X0, [X8]
	061 Move X30, [X31+48]
	062 Move X23, [X31+56]
	063 Return X0
	064 Move X0, 0xEBD000
	065 Move X0, [X0+1320]
	066 Call 0x1C17D08
	067 Call 0x1C17F10
	068 Move X19, X0
	069 Move X0, 0xEE7000
	070 Move X0, [X0+776]
	071 Call 0x1C17D08
	072 Move X20, X0
	073 Move X0, 0xEE7000
	074 Move X0, [X0+736]
	075 Call 0x1C17D08
	076 Move X2, X0
	077 Move X0, X19
	078 Move X1, X20
	079 Move X3, X31
	080 Call ArgumentNullException..ctor, X0, X1, X2
	081 Move X8, 0xEE0000
	082 Move X9, 0xEC3000
	083 Move X8, [X8+1608]
	084 Move X9, [X9+304]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 NotImplemented "Instruction CSEL not yet implemented."
	087 Call 0x1C17D08
	088 Move X19, X0
	089 Move X0, 0xEC0000
	090 Move X0, [X0+1888]
	091 Call 0x1C17D08
	092 Call 0x1C17F10
	093 Move X20, X0
	094 Move X0, 0xEE0000
	095 Move X0, [X0+1648]
	096 Call 0x1C17D08
	097 Move X2, X0
	098 Move X0, X20
	099 Move X1, X19
	100 Move X3, X31
	101 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	102 Move X0, 0xEE7000
	103 Move X0, [X0+2072]
	104 Call 0x1C17D08
	105 Move X1, X0
	106 Move X0, X20
	107 Call 0x1C17DEC
	108 Move X0, 0xEC0000
	109 Move X0, [X0+1888]
	110 Call 0x1C17D08
	111 Call 0x1C17F10
	112 Move X19, X0
	113 Move X0, 0xEE7000
	114 Move X0, [X0+776]
	115 Call 0x1C17D08
	116 Move X20, X0
	117 Move X0, 0xEE7000
	118 Move X0, [X0+224]
	119 Call 0x1C17D08
	120 Move X2, X0
	121 Move X0, X19
	122 Move X1, X20
	123 Move X3, X31
	124 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	125 Move X0, 0xEE7000
	126 Move X0, [X0+2072]
	127 Call 0x1C17D08
	128 Move X1, X0
	129 Move X0, X19
	130 Call 0x1C17DEC

Method: System.Int32 GetByteCount(System.Char* chars, System.Int32 count, System.Text.EncoderNLS baseEncoder)

Disassembly:
	0x0323C42C AND W8, W8, 0xC0
	0x0323C430 CMP W8, 0x80
	0x0323C434 B.NE 0x323C4E4
	0x0323C438 ADD X24, X20, 0x3
	0x0323C43C SUB W21, W21, 0x1
	0x0323C440 SUB W21, W21, 0x1
	0x0323C444 B 0x323C2F0
	0x0323C448 CMP X26, X24
	0x0323C44C B.LS 0x323C56C
	0x00000000 INVALID
	0x0323C454 TBZ X25, 0x1F, 0x323C448
	0x0323C458 MOV X20, X24
	0x0323C45C TBZ X25, 0x7, 0x323C2C0
	0x0323C460 AND W25, W25, 0xFF
	0x0323C464 SUB W8, W21, 0x1
	0x0323C468 TBNZ X25, 0x6, 0x323C480
	0x0323C46C MOV W21, W8
	0x0323C470 B 0x323C23C
	0x0323C474 MOV W25, W31
	0x0323C478 MOV X20, X8
	0x0323C47C B 0x323C2A8
	0x0323C480 TBNZ X25, 0x5, 0x323C49C
	0x0323C484 AND W9, W25, 0x1F
	0x0323C488 CMP W9, 0x1
	0x0323C48C B.LS 0x323C4AC
	0x0323C490 ORR W25, W9, 0x800000
	0x0323C494 MOV W21, W8
	0x0323C498 B 0x323C2A8
	0x0323C49C AND W9, W25, 0xF
	0x0323C4A0 TBNZ X25, 0x4, 0x323C4B4
	0x0323C4A4 ORR W25, W9, W29, 0x0
	0x0323C4A8 B 0x323C4C8
	0x0323C4AC ORR W25, W9, 0xC0
	0x0323C4B0 B 0x323C46C
	0x0323C4B4 CMP W9, 0x5
	0x0323C4B8 B.CS 0x323C4DC
	0x0323C4BC MOVZ W8, 0xC00
	0x0323C4C0 MOVK W8, 0x504D0000
	0x0323C4C4 ORR W25, W9, W8, 0x0
	0x0323C4C8 SUB W21, W21, 0x2
	0x0323C4CC B 0x323C2A8
	0x0323C4D0 MOV W25, W31
	0x0323C4D4 MOV X20, X24
	0x0323C4D8 B 0x323C2A8
	0x0323C4DC ORR W25, W25, 0xF0
	0x0323C4E0 B 0x323C46C
	0x0323C4E4 MOV W25, W31
	0x0323C4E8 SUB X20, X20, 0x1
	0x0323C4EC B 0x323C2A8
	0x0323C4F0 MOV X23, X31
	0x0323C4F4 MOV X20, X28
	0x0323C4F8 TBNZ X8, 0x0, 0x323C56C
	0x0323C4FC ADD W21, W21, W25, 0x1E, ASR
	0x0323C500 CBZ X22, 0x323C520
	0x0323C504 LDRB W8, [X22 + 0x28]
	0x0323C508 CBZ W8, 0x323C56C
	0x0323C50C CBNZ X23, 0x323C554
	0x0323C510 MOV X0, X22
	0x0323C514 MOV X1, X31
	0x0323C518 BL 0x33FC534
	0x0323C51C B 0x323C538
	0x0323C520 CBNZ X23, 0x323C554
	0x0323C524 LDR X0, [X19 + 0x30]
	0x0323C528 CBZ X0, 0x323C58C
	0x0323C52C LDR X8, [X0]
	0x0323C530 LDP X9, X1, [X8 + 0x178]
	0x0323C534 BLR X9
	0x0323C538 MOV X23, X0
	0x0323C53C CBZ X0, 0x323C58C
	0x0323C540 MOV X0, X23
	0x0323C544 MOV X1, X28
	0x0323C548 MOV X2, X31
	0x0323C54C MOV X3, X31
	0x0323C550 BL 0x33FC570
	0x0323C554 MOV X0, X19
	0x0323C558 MOV X1, X20
	0x0323C55C MOV W2, W25
	0x0323C560 MOV X3, X23
	0x0323C564 BL 0x323C598
	0x0323C568 ADD W21, W0, W21
	0x0323C56C MOV W0, W21
	0x0323C570 LDP X20, X19, [X31 + 0x50]
	0x0323C574 LDP X22, X21, [X31 + 0x40]
	0x0323C578 LDP X24, X23, [X31 + 0x30]
	0x0323C57C LDP X26, X25, [X31 + 0x20]
	0x0323C580 LDP X28, X27, [X31 + 0x10]
	0x0323C584 LDP X29, X30, [X31], #0x60
	0x0323C588 RET
	0x0323C58C BL 0x1C16F20
	0x0323C590 MOV X0, X22
	0x0323C594 BL 0x1C171E0
	0x0323C598 SUB X31, X31, 0x20
	0x0323C59C STP X30, X19, [X31 + 0x10]
	0x0323C5A0 STR X1, [X31 + 0x8]
	0x0323C5A4 ADD X1, X31, 0x8
	0x0323C5A8 MOV X19, X3
	0x0323C5AC BL 0x323CCE4
	0x0323C5B0 CBZ X19, 0x323C5D4
	0x0323C5B4 LDR X8, [X19]
	0x0323C5B8 MOV X1, X0
	0x0323C5BC LDR X2, [X31 + 0x8]
	0x0323C5C0 MOV X0, X19
	0x0323C5C4 LDP X4, X3, [X8 + 0x1B8]
	0x0323C5C8 LDP X30, X19, [X31 + 0x10]
	0x0323C5CC ADD X31, X31, 0x20
	0x0323C5D0 BR X4
	0x0323C5D4 BL 0x1C16F20
	0x0323C5D8 SUB X31, X31, 0x80
	0x0323C5DC STP X29, X30, [X31 + 0x20]
	0x0323C5E0 STP X28, X27, [X31 + 0x30]
	0x0323C5E4 STP X26, X25, [X31 + 0x40]
	0x0323C5E8 STP X24, X23, [X31 + 0x50]
	0x0323C5EC STP X22, X21, [X31 + 0x60]
	0x0323C5F0 STP X20, X19, [X31 + 0x70]
	0x0323C5F4 ADRP X21, 0x11A0000
	0x0323C5F8 LDRB W8, [X21 + 0x40A]
	0x0323C5FC MOV X20, X5
	0x0323C600 MOV W23, W4
	0x0323C604 MOV X28, X3
	0x0323C608 MOV W24, W2
	0x0323C60C MOV X27, X1
	0x0323C610 MOV X19, X0
	0x0323C614 TBNZ X8, 0x0, 0x323C638
	0x0323C618 ADRP X0, 0xEE6000
	0x0323C61C LDR X0, [X0 + 0x848]
	0x0323C620 BL 0x1C16CF4
	0x0323C624 ADRP X0, 0xEE6000
	0x0323C628 LDR X0, [X0 + 0x828]
	0x0323C62C BL 0x1C16CF4
	0x0323C630 MOVZ W8, 0x1
	0x0323C634 STRB W8, [X21 + 0x40A]
	0x0323C638 ADRP X22, 0xEE6000
	0x0323C63C LDR X22, [X22 + 0x848]
	0x0323C640 STP X31, X31, [X31 + 0x10]
	0x0323C644 CBZ X20, 0x323C660
	0x0323C648 LDR X1, [X22]
	0x0323C64C LDR X8, [X20]
	0x0323C650 CMP X8, X1
	0x0323C654 B.NE 0x323CC6C
	0x0323C658 LDR W25, [X20 + 0x30]
	0x0323C65C B 0x323C664
	0x0323C660 MOV W25, W31
	0x0323C664 ADD X29, X27, W24, SXTW
	0x0323C668 CMP W25, 0x0
	0x0323C66C CSET W8, EQ
	0x0323C670 CMP X29, X27
	0x0323C674 ADD X23, X28, W23, 0x1, SXTW
	0x0323C678 MOV X24, X31
	0x0323C67C MOV X26, X27
	0x0323C680 STR X28, [X31 + 0x8]
	0x0323C684 B.LS 0x323CAE0
	0x0323C688 MOV W9, W25
	0x0323C68C LDRB W10, [X26]
	0x0323C690 TBZ X8, 0x0, 0x323C6BC
	0x0323C694 ADD X26, X26, 0x1
	0x0323C698 AND W25, W10, 0xFF
	0x0323C69C TBZ X10, 0x7, 0x323C74C
	0x0323C6A0 TBZ X25, 0x6, 0x323C6F8
	0x0323C6A4 TBNZ X25, 0x5, 0x323CA90
	0x0323C6A8 AND W8, W25, 0x1F
	0x0323C6AC CMP W8, 0x1
	0x0323C6B0 B.LS 0x323CAA4
	0x0323C6B4 ORR W25, W8, 0x800000
	0x0323C6B8 B 0x323CA78
	0x0323C6BC AND W8, W10, 0xC0
	0x0323C6C0 CMP W8, 0x80
	0x0323C6C4 B.NE 0x323C6F4
	0x0323C6C8 UBFM W8, W9, 0x1A, 0x19
	0x0323C6CC MOV W25, W8
	0x0323C6D0 ADD X26, X26, 0x1
	0x0323C6D4 BFM W25, W10, 0x0, 0x5
	0x0323C6D8 TBNZ X9, 0x17, 0x323C710
	0x0323C6DC TBNZ X9, 0x16, 0x323C9F0
	0x0323C6E0 ANDS W8, W25, 0x3E0
	0x0323C6E4 B.EQ 0x323C6F8
	0x0323C6E8 CMP W8, 0x360
	0x0323C6EC B.EQ 0x323C6F8
	0x0323C6F0 B 0x323CA78
	0x0323C6F4 MOV W25, W9
	0x0323C6F8 CBNZ X24, 0x323CA50
	0x0323C6FC CBZ X20, 0x323CA20
	0x0323C700 MOV X0, X20
	0x0323C704 MOV X1, X31
	0x0323C708 BL 0x33FC534
	0x0323C70C B 0x323CA34
	0x0323C710 MOVZ W10, 0x101F0000
	0x0323C714 AND W8, W8, W10, 0x0
	0x0323C718 MOVZ W10, 0x1
	0x0323C71C MOVK W10, 0x10000000
	0x0323C720 CMP W8, W10
	0x0323C724 B.CC 0x323C74C
	0x0323C728 CMP X23, X28
	0x0323C72C B.LS 0x323C74C
	0x0323C730 UBFM W8, W9, 0x4, 0xE
	0x0323C734 MOVZ W9, 0xDC00
	0x0323C738 MOVN W10, 0x283F
	0x0323C73C ADD W8, W8, W10
	0x0323C740 BFM W9, W25, 0x0, 0x9
	0x0323C744 STRH W8, [X28], #0x2
	0x0323C748 MOV W25, W9
	0x0323C74C MOV X21, X28
	0x0323C750 CMP X23, X28
	0x0323C754 B.LS 0x323CBF4
	0x0323C758 MOV X28, X21
	0x0323C75C STRH W25, [X28], #0x2
	0x0323C760 ADRP X8, 0xEE6000
	0x0323C764 LDR X8, [X8 + 0x828]
	0x0323C768 LDR X0, [X8]
	0x0323C76C LDR W8, [X0 + 0xE0]
	0x0323C770 CBNZ W8, 0x323C778
	0x0323C774 BL 0x1C16DFC
	0x0323C778 SUB W9, W23, W28
	0x0323C77C SUB W8, W29, W26
	0x0323C780 CMP W8, 0xD
	0x0323C784 UBFM W9, W9, 0x1, 0x1F
	0x0323C788 B.LE 0x323C9B4
	0x0323C78C CMP W9, W8
	0x0323C790 CSEL W8, W9, W8, LT
	0x0323C794 ADD X8, X21, W8, 0x1, SXTW
	0x0323C798 SUB X25, X8, 0xC
	0x0323C79C CMP X28, X25
	0x0323C7A0 B.CS 0x323CA74
	0x0323C7A4 MOV X21, X26
	0x00000000 INVALID
	0x0323C7AC AND W8, W9, 0xFF
	0x0323C7B0 TBNZ X9, 0x1F, 0x323C8A8
	0x0323C7B4 ADD X9, X28, 0x2
	0x0323C7B8 STRH W8, [X28]
	0x0323C7BC TBNZ X21, 0x0, 0x323C7CC
	0x0323C7C0 MOV X28, X9
	0x0323C7C4 TBNZ X21, 0x1, 0x323C7E8
	0x0323C7C8 B 0x323C80C
	0x00000000 INVALID
	0x0323C7D0 ADD X21, X26, 0x2
	0x0323C7D4 AND W8, W10, 0xFF
	0x0323C7D8 TBNZ X10, 0x1F, 0x323C8A4
	0x0323C7DC STRH W8, [X28 + 0x2]
	0x0323C7E0 ADD X28, X28, 0x4
	0x0323C7E4 TBZ X21, 0x1, 0x323C80C
	0x0323C7E8 LDRH W8, [X21]
	0x0323C7EC ANDS W31, W8, 0x80808080
	0x0323C7F0 B.NE 0x323C87C
	0x0323C7F4 AND W9, W8, 0x7F
	0x0323C7F8 UBFM W8, W8, 0x8, 0xE
	0x0323C7FC ADD X21, X21, 0x2
	0x0323C800 STRH W9, [X28]
	0x0323C804 STRH W8, [X28 + 0x2]
	0x0323C808 ADD X28, X28, 0x4
	0x0323C80C CMP X28, X25
	0x0323C810 B.CS 0x323C9E4
	0x0323C814 LDP W9, W8, [X21]
	0x0323C818 ORR W10, W8, W9, 0x0
	0x0323C81C ANDS W31, W10, 0x80808080
	0x0323C820 B.NE 0x323C878
	0x0323C824 AND W10, W9, 0x7F
	0x0323C828 STRH W10, [X28]
	0x0323C82C UBFM W10, W9, 0x8, 0xE
	0x0323C830 STRH W10, [X28 + 0x2]
	0x0323C834 UBFM W10, W9, 0x10, 0x16
	0x0323C838 UBFM W9, W9, 0x18, 0x1E
	0x0323C83C STRH W10, [X28 + 0x4]
	0x0323C840 AND W10, W8, 0x7F
	0x0323C844 STRH W9, [X28 + 0x6]
	0x0323C848 UBFM W9, W8, 0x8, 0xE
	0x0323C84C STRH W10, [X28 + 0x8]
	0x0323C850 UBFM W10, W8, 0x10, 0x16
	0x0323C854 UBFM W8, W8, 0x18, 0x1E
	0x0323C858 STRH W9, [X28 + 0xA]
	0x0323C85C STRH W10, [X28 + 0xC]
	0x0323C860 STRH W8, [X28 + 0xE]
	0x0323C864 ADD X28, X28, 0x10
	0x0323C868 CMP X25, X28
	0x0323C86C ADD X21, X21, 0x8
	0x0323C870 B.HI 0x323C814
	0x0323C874 B 0x323C9E4
	0x0323C878 AND W8, W9, 0xFF
	0x0323C87C AND W8, W8, 0xFF
	0x0323C880 CMP W8, 0x7F
	0x0323C884 ADD X26, X21, 0x1
	0x0323C888 B.HI 0x323C89C
	0x0323C88C STRH W8, [X28], #0x2
	0x0323C890 CMP X25, X28
	0x0323C894 B.HI 0x323C7A4
	0x0323C898 B 0x323CA74
	0x0323C89C MOV X21, X26
	0x0323C8A0 B 0x323C8A8
	0x0323C8A4 MOV X28, X9
	0x0323C8A8 MOV X26, X21
	0x0323C8AC LDRB W9, [X26], #0x1
	0x0323C8B0 TBZ X8, 0x6, 0x323CACC
	0x0323C8B4 AND W10, W9, 0xC0
	0x0323C8B8 CMP W10, 0x80
	0x0323C8BC B.NE 0x323CACC
	0x0323C8C0 AND W22, W9, 0x3F
	0x0323C8C4 TBNZ X8, 0x5, 0x323C8E0
	0x0323C8C8 AND W8, W8, 0x1F
	0x0323C8CC CMP W8, 0x2
	0x0323C8D0 B.CC 0x323CACC
	0x0323C8D4 BFM W22, W8, 0x1A, 0x4
	0x0323C8D8 MOV W8, W22
	0x0323C8DC B 0x323C998
	0x0323C8E0 LDRB W10, [X26]
	0x0323C8E4 BFM W22, W8, 0x1A, 0x3
	0x0323C8E8 TBNZ X8, 0x4, 0x323C918
	0x0323C8EC ANDS W8, W22, 0x3E0
	0x0323C8F0 B.EQ 0x323CACC
	0x0323C8F4 CMP W8, 0x360
	0x0323C8F8 B.EQ 0x323CACC
	0x0323C8FC AND W8, W10, 0xC0
	0x0323C900 CMP W8, 0x80
	0x0323C904 B.NE 0x323CACC
	0x0323C908 AND W8, W10, 0x3F
	0x0323C90C ADD X26, X21, 0x2
	0x0323C910 BFM W8, W22, 0x1A, 0x9
	0x0323C914 B 0x323C994
	0x0323C918 ADRP X8, 0xEE6000
	0x0323C91C LDR X8, [X8 + 0x828]
	0x0323C920 LDR X0, [X8]
	0x0323C924 LDR W8, [X0 + 0xE0]
	0x0323C928 CBNZ W8, 0x323C938
	0x0323C92C MOV W26, W10
	0x0323C930 BL 0x1C16DFC
	0x0323C934 MOV W10, W26
	0x0323C938 UBFM W8, W22, 0x4, 0x1F
	0x0323C93C SUB W8, W8, 0x1
	0x0323C940 CMP W8, 0xF
	0x0323C944 B.HI 0x323CACC
	0x0323C948 AND W8, W10, 0xC0
	0x0323C94C CMP W8, 0x80
	0x0323C950 B.NE 0x323CACC
	0x0323C954 LDRB W8, [X21 + 0x2]
	0x0323C958 AND W9, W8, 0xC0
	0x0323C95C CMP W9, 0x80
	0x0323C960 B.NE 0x323CACC
	0x0323C964 UBFM W9, W10, 0x1A, 0x19
	0x0323C968 AND W8, W8, 0x3F
	0x0323C96C AND W9, W9, 0xC00
	0x0323C970 BFM W8, W10, 0x1A, 0x3
	0x0323C974 BFM W9, W22, 0x14, 0x9
	0x0323C978 MOVN W10, 0x23FF
	0x0323C97C ORR W8, W8, W10, 0x0
	0x0323C980 UBFM W9, W9, 0xA, 0x14
	0x0323C984 MOVN W10, 0x283F
	0x0323C988 ADD W9, W9, W10
	0x0323C98C ADD X26, X21, 0x3
	0x0323C990 STRH W9, [X28], #0x2
	0x0323C994 SUB X25, X25, 0x2
	0x0323C998 STRH W8, [X28], #0x2
	0x0323C99C ADRP X22, 0xEE6000
	0x0323C9A0 LDR X22, [X22 + 0x848]
	0x0323C9A4 SUB X25, X25, 0x2
	0x0323C9A8 CMP X28, X25
	0x0323C9AC B.CC 0x323C7A4
	0x0323C9B0 B 0x323CA74
	0x0323C9B4 CMP W9, W8
	0x0323C9B8 B.LT 0x323CA74
	0x0323C9BC CMP X29, X26
	0x0323C9C0 B.LS 0x323CB90
	0x00000000 INVALID
	0x0323C9C8 ADD X26, X26, 0x1
	0x0323C9CC TBNZ X10, 0x1F, 0x323C698
	0x0323C9D0 AND W8, W10, 0xFF
	0x0323C9D4 CMP X29, X26
	0x0323C9D8 STRH W8, [X28], #0x2

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], X29
	003 Move [X31+40], X30
	004 Move [X31+48], X28
	005 Move [X31+56], X27
	006 Move [X31+64], X26
	007 Move [X31+72], X25
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X21, 0x11A1000
	015 Move W8, [X21+1031]
	016 Move X19, X3
	017 Move W20, W2
	018 Move X22, X1
	019 Move [X31+8], X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {32}
	024 Move X0, 0xEE7000
	025 Move X0, [X0+2080]
	026 Call 0x1C17CF4
	027 Move X0, 0xEE7000
	028 Move X0, [X0+2088]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X21+1031], W8
	032 Add X23, X22, W20
	033 Move [X31+24], X31
	034 Compare X19, 0
	035 JumpIfEqual {67}
	036 Move X8, 0xEE7000
	037 Move X8, [X8+2080]
	038 Move X1, [X8]
	039 Move X8, [X19]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move W25, [X19+56]
	042 Move X0, X19
	043 Move X1, X31
	044 Call Encoder.get_InternalHasFallbackBuffer, X0
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {68}
	049 Move X0, X19
	050 Move X1, X31
	051 Call Encoder.get_FallbackBuffer, X0
	052 Compare X0, 0
	053 JumpIfEqual {350}
	054 Move X8, [X0]
	055 Move X24, X0
	056 Move X9, [X8+440]
	057 Move X1, [X8+448]
	058 NotImplemented "Instruction BLR not yet implemented."
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X0, X24
	061 Move X1, X22
	062 Move X2, X23
	063 Move X3, X19
	064 Move W4, W31
	065 Move X5, X31
	066 Call EncoderFallbackBuffer.InternalInitialize, X0, X1, X2, X3, X4
	067 Move W25, W31
	068 Move X24, X31
	069 Move X26, 0xEE7000
	070 Move X26, [X26+2088]
	071 Move W27, 0xD800
	072 Or W28, W31, 0xFF80FF80
	073 Or W29, W31, 0xF800F800
	074 Move [X31+16], X22
	075 NotImplemented "Instruction CMP not yet implemented."
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move X0, [X26]
	078 NotImplemented "Instruction LDRH not yet implemented."
	079 Move W8, [X0+224]
	080 Compare W8, 0
	081 JumpIfNotEqual {83}
	082 Call 0x1C17DFC
	083 Move W8, W21
	084 ShiftRight W8, 10
	085 And W8, W8, 0x7FFFFFFF
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Add W20, W20, 1
	088 Add X22, X22, 2
	089 Compare W25, 0
	090 JumpIfEqual {126}
	091 Compare X24, 0
	092 JumpIfEqual {112}
	093 Move W8, [X24+42]
	094 Compare W8, 0
	095 JumpIfEqual {112}
	096 Move X0, X24
	097 Move X1, X31
	098 Call EncoderFallbackBuffer.InternalGetNextChar, X0
	099 Move X8, [X26]
	100 Move W25, W0
	101 Move W9, [X8+224]
	102 Compare W9, 0
	103 JumpIfNotEqual {106}
	104 Move X0, X8
	105 Call 0x1C17DFC
	106 And W25, W25, 0xFFFF
	107 And W8, W25, 0xFC00
	108 Move W9, 0xDC00
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Add W20, W20, 2
	111 Move W25, 0xFFFD
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Compare X19, 0
	114 JumpIfEqual {118}
	115 Move W8, [X19+48]
	116 Compare W8, 0
	117 JumpIfEqual {311}
	118 Add W20, W20, 1
	119 Compare X24, 0
	120 JumpIfEqual {125}
	121 Move X0, X24
	122 Move X1, X31
	123 Call EncoderFallbackBuffer.InternalGetNextChar, X0
	124 And W31, W0, 0xFFFF
	125 NotImplemented "Instruction LDRH not yet implemented."
	126 Compare X24, 0
	127 JumpIfEqual {311}
	128 Move X0, X24
	129 Move X1, X31
	130 Call EncoderFallbackBuffer.InternalGetNextChar, X0
	131 And W31, W0, 0xFFFF
	132 Compare W25, 0
	133 JumpIfNotEqual {135}
	134 And W25, W0, 0xFFFF
	135 Add W20, W20, 1
	136 Move X0, [X26]
	137 Move W8, [X0+224]
	138 Compare W8, 0
	139 JumpIfNotEqual {141}
	140 Call 0x1C17DFC
	141 And W8, W25, 0xFC00
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Subtract W20, W20, 1
	144 Move X0, [X26]
	145 Move W8, [X0+224]
	146 Compare W8, 0
	147 JumpIfNotEqual {149}
	148 Call 0x1C17DFC
	149 Move W8, W25
	150 ShiftRight W8, 11
	151 And W8, W8, 0x7FFFFFFF
	152 NotImplemented "Instruction CMP not yet implemented."
	153 NotImplemented "Instruction CMP not yet implemented."
	154 NotImplemented "Instruction CINC not yet implemented."
	155 NotImplemented "Instruction CMP not yet implemented."
	156 NotImplemented "Instruction CSINC not yet implemented."
	157 Move TEMP, X20
	158 And TEMP, TEMP, -2147483648
	159 Compare TEMP, -2147483648
	160 JumpIfEqual {330}
	161 Compare X24, 0
	162 JumpIfEqual {167}
	163 Move X0, X24
	164 Move X1, X31
	165 Call EncoderFallbackBuffer.InternalGetNextChar, X0
	166 And W31, W0, 0xFFFF
	167 Move X0, [X26]
	168 Move W8, [X0+224]
	169 Compare W8, 0
	170 JumpIfNotEqual {172}
	171 Call 0x1C17DFC
	172 Subtract X8, X23, X22
	173 NotImplemented "Instruction CMP not yet implemented."
	174 And X8, X8, 0x1FFFFFFF
	175 Add X8, X22, X8
	176 Subtract X21, X8, 14
	177 NotImplemented "Instruction CMP not yet implemented."
	178 Move W25, W31
	179 NotImplemented "Instruction LDRH not yet implemented."
	180 Add X8, X22, 2
	181 NotImplemented "Instruction CMP not yet implemented."
	182 NotImplemented "Instruction CMP not yet implemented."
	183 And W9, W25, 0xF800
	184 NotImplemented "Instruction CMP not yet implemented."
	185 Add W20, W20, 1
	186 Add W20, W20, 1
	187 Move TEMP, X8
	188 And TEMP, TEMP, 2
	189 Compare TEMP, 2
	190 JumpIfNotEqual {200}
	191 NotImplemented "Instruction LDRH not yet implemented."
	192 Add X8, X22, 4
	193 NotImplemented "Instruction CMP not yet implemented."
	194 NotImplemented "Instruction CMP not yet implemented."
	195 And W9, W25, 0xF800
	196 NotImplemented "Instruction CMP not yet implemented."
	197 Move X22, X8
	198 Add W20, W20, 1
	199 Add W20, W20, 1
	200 NotImplemented "Instruction CMP not yet implemented."
	201 Move W9, [X8]
	202 Move W10, [X8+4]
	203 Or W11, W10, W9
	204 And W31, W11, W28
	205 And W31, W11, W29
	206 Move W11, W9
	207 ShiftRight W11, 23
	208 And W11, W11, 0x7FFFFFFF
	209 NotImplemented "Instruction CMP not yet implemented."
	210 Move W12, W10
	211 ShiftRight W12, 23
	212 And W12, W12, 0x7FFFFFFF
	213 NotImplemented "Instruction CINC not yet implemented."
	214 And W31, W9, 0xFF80
	215 NotImplemented "Instruction CINC not yet implemented."
	216 NotImplemented "Instruction CMP not yet implemented."
	217 NotImplemented "Instruction CINC not yet implemented."
	218 And W31, W10, 0xFF80
	219 NotImplemented "Instruction CINC not yet implemented."
	220 Move W9, [X8+8]
	221 Move W10, [X8+12]
	222 Or W11, W10, W9
	223 And W31, W11, W28
	224 And W31, W11, W29
	225 Move W11, W9
	226 ShiftRight W11, 23
	227 And W11, W11, 0x7FFFFFFF
	228 NotImplemented "Instruction CMP not yet implemented."
	229 Move W12, W10
	230 ShiftRight W12, 23
	231 And W12, W12, 0x7FFFFFFF
	232 NotImplemented "Instruction CINC not yet implemented."
	233 And W31, W9, 0xFF80
	234 NotImplemented "Instruction CINC not yet implemented."
	235 NotImplemented "Instruction CMP not yet implemented."
	236 NotImplemented "Instruction CINC not yet implemented."
	237 And W31, W10, 0xFF80
	238 NotImplemented "Instruction CINC not yet implemented."
	239 Add X8, X8, 16
	240 Add X8, X8, 8
	241 And W25, W9, 0xFFFF
	242 NotImplemented "Instruction CMP not yet implemented."
	243 Add X22, X8, 2
	244 NotImplemented "Instruction CMP not yet implemented."
	245 Move X0, [X26]
	246 Move W8, [X0+224]
	247 Compare W8, 0
	248 JumpIfNotEqual {250}
	249 Call 0x1C17DFC
	250 And W8, W25, 0xF800
	251 NotImplemented "Instruction CMP not yet implemented."
	252 Move W8, W25
	253 ShiftRight W8, 10
	254 And W8, W8, 0x7FFFFFFF
	255 NotImplemented "Instruction CMP not yet implemented."
	256 Move X0, [X26]
	257 NotImplemented "Instruction LDRH not yet implemented."
	258 Move W8, [X0+224]
	259 Compare W8, 0
	260 JumpIfNotEqual {262}
	261 Call 0x1C17DFC
	262 Move W8, W25
	263 ShiftRight W8, 10
	264 And W8, W8, 0x7FFFFFFF
	265 NotImplemented "Instruction CMP not yet implemented."
	266 Add X22, X22, 2
	267 Add W20, W20, 1
	268 Add W20, W20, 1
	269 NotImplemented "Instruction CMP not yet implemented."
	270 NotImplemented "Instruction LDRH not yet implemented."
	271 NotImplemented "Instruction CMP not yet implemented."
	272 Move W25, W31
	273 Move X22, X8
	274 Compare X24, 0
	275 JumpIfNotEqual {299}
	276 Compare X19, 0
	277 JumpIfEqual {281}
	278 Move X0, X19
	279 Move X1, X31
	280 Call Encoder.get_FallbackBuffer, X0
	281 Move X8, [X31+8]
	282 Move X0, [X8+40]
	283 Compare X0, 0
	284 JumpIfEqual {350}
	285 Move X8, [X0]
	286 Move X9, [X8+376]
	287 Move X1, [X8+384]
	288 NotImplemented "Instruction BLR not yet implemented."
	289 Move X24, X0
	290 Compare X0, 0
	291 JumpIfEqual {350}
	292 Move X1, [X31+16]
	293 Move X0, X24
	294 Move X2, X23
	295 Move X3, X19
	296 Move W4, W31
	297 Move X5, X31
	298 Call EncoderFallbackBuffer.InternalInitialize, X0, X1, X2, X3, X4
	299 Move [X31+24], X22
	300 Move X8, [X24]
	301 Add X2, X31, 24
	302 Move X0, X24
	303 Move W1, W25
	304 Move X9, [X8+472]
	305 Move X3, [X8+480]
	306 NotImplemented "Instruction BLR not yet implemented."
	307 Move X22, [X31+24]
	308 Move W25, W31
	309 Move W25, W31
	310 Subtract X22, X22, 2
	311 Move TEMP, X20
	312 And TEMP, TEMP, -2147483648
	313 Compare TEMP, -2147483648
	314 JumpIfEqual {330}
	315 Move W0, W20
	316 Move X20, [X31+112]
	317 Move X19, [X31+120]
	318 Move X22, [X31+96]
	319 Move X21, [X31+104]
	320 Move X24, [X31+80]
	321 Move X23, [X31+88]
	322 Move X26, [X31+64]
	323 Move X25, [X31+72]
	324 Move X28, [X31+48]
	325 Move X27, [X31+56]
	326 Move X29, [X31+32]
	327 Move X30, [X31+40]
	328 Add X31, X31, 128
	329 Return X0
	330 Move X0, 0xEC0000
	331 Move X0, [X0+1400]
	332 Call 0x1C17D08
	333 Call 0x1C17F10
	334 Move X19, X0
	335 Move X0, 0xEE7000
	336 Move X0, [X0+2096]
	337 Call 0x1C17D08
	338 Move X1, X0
	339 Move X0, X19
	340 Move X2, X31
	341 Call ArgumentException..ctor, X0, X1
	342 Move X0, 0xEE7000
	343 Move X0, [X0+2104]
	344 Call 0x1C17D08
	345 Move X1, X0
	346 Move X0, X19
	347 Call 0x1C17DEC
	348 Move X0, X19
	349 Call 0x1C181E0
	350 Call 0x1C17F20
	351 Move X0, [X31+8]
	352 Move X8, [X0]
	353 Move X9, [X8+440]
	354 Move X1, [X8+448]
	355 NotImplemented "Instruction BLR not yet implemented."
	356 Move X20, X0
	357 Move X0, X19
	358 Call 0x19913C0
	359 Move X19, [X19+16]
	360 Move X0, X19
	361 Call 0x19913C0
	362 Move X0, X19
	363 Move X1, X31
	364 Call "il2cpp_vm_object_is_inst", X0
	365 Move X19, X0
	366 Move X0, 0xEE7000
	367 Move X0, [X0+1712]
	368 Call 0x1C17D08
	369 Move X1, X20
	370 Move X2, X19
	371 Move X3, X31
	372 Call SR.Format, X0, X1, X2
	373 Move X19, X0
	374 Move X0, 0xEC0000
	375 Move X0, [X0+1400]
	376 Call 0x1C17D08
	377 Call 0x1C17F10
	378 Move X1, X19
	379 Move X2, X31
	380 Move X20, X0
	381 Call ArgumentException..ctor, X0, X1
	382 Move X0, 0xEE7000
	383 Move X0, [X0+2104]
	384 Call 0x1C17D08
	385 Move X1, X0
	386 Move X0, X20
	387 Call 0x1C17DEC

Method: System.Int32 PtrDiff(System.Char* a, System.Char* b)

Disassembly:
	0x0323C9F0 TBNZ X9, 0x11, 0x323CA78
	0x0323C9F4 ADRP X8, 0xEE6000
	0x0323C9F8 LDR X8, [X8 + 0x828]

ISIL:
	001 Subtract W8, W0, W1
	002 Move W0, W8
	003 ShiftRight W0, 1
	004 And W0, W0, 0x7FFFFFFF
	005 Return X0

Method: System.Int32 PtrDiff(System.Byte* a, System.Byte* b)

Disassembly:
	0x0323C9FC LDR X0, [X8]
	0x0323CA00 LDR W8, [X0 + 0xE0]

ISIL:
	001 Subtract W0, W0, W1
	002 Return X0

Method: System.Boolean InRange(System.Int32 ch, System.Int32 start, System.Int32 end)

Disassembly:
	0x0323C9DC B.NE 0x323C9C4
	0x0323C9E0 B 0x323CB04
	0x0323C9E4 MOV W25, W31
	0x0323C9E8 MOV X26, X21
	0x0323C9EC B 0x323CA78

ISIL:
	001 Subtract W8, W0, W1
	002 Subtract W9, W2, W1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Return X0

Method: System.Int32 GetBytes(System.Char* chars, System.Int32 charCount, System.Byte* bytes, System.Int32 byteCount, System.Text.EncoderNLS baseEncoder)

Disassembly:
	0x0323CA04 CBNZ W8, 0x323CA0C
	0x0323CA08 BL 0x1C16DFC
	0x0323CA0C AND W8, W25, 0x1F0
	0x0323CA10 SUB W8, W8, 0x10
	0x0323CA14 CMP W8, 0xF1
	0x0323CA18 B.CS 0x323C6F8
	0x0323CA1C B 0x323CA78
	0x0323CA20 LDR X0, [X19 + 0x30]
	0x0323CA24 CBZ X0, 0x323CC74
	0x0323CA28 LDR X8, [X0]
	0x0323CA2C LDP X9, X1, [X8 + 0x178]
	0x0323CA30 BLR X9
	0x0323CA34 MOV X24, X0
	0x0323CA38 CBZ X0, 0x323CC74
	0x0323CA3C MOV X0, X24
	0x0323CA40 MOV X1, X27
	0x0323CA44 MOV X2, X23
	0x0323CA48 MOV X3, X31
	0x0323CA4C BL 0x33FC570
	0x0323CA50 ADD X1, X31, 0x18
	0x0323CA54 ADD X4, X31, 0x10
	0x0323CA58 MOV X0, X19
	0x0323CA5C MOV W2, W25
	0x0323CA60 MOV X3, X24
	0x0323CA64 STP X28, X26, [X31 + 0x10]
	0x0323CA68 BL 0x323CC78
	0x0323CA6C LDP X28, X26, [X31 + 0x10]
	0x0323CA70 TBZ X0, 0x0, 0x323CB68
	0x0323CA74 MOV W25, W31
	0x0323CA78 CMP W25, 0x0
	0x0323CA7C CSET W8, EQ
	0x0323CA80 CMP X29, X26
	0x0323CA84 MOV W9, W25
	0x0323CA88 B.HI 0x323C68C
	0x0323CA8C B 0x323CAE0
	0x0323CA90 AND W8, W25, 0xF
	0x0323CA94 TBNZ X25, 0x4, 0x323CAAC
	0x0323CA98 MOVZ W9, 0x8000
	0x0323CA9C MOVK W9, 0x48220000
	0x0323CAA0 B 0x323CABC
	0x0323CAA4 ORR W25, W8, 0xC0
	0x0323CAA8 B 0x323C6F8
	0x0323CAAC CMP W8, 0x5
	0x0323CAB0 B.CS 0x323CAC4
	0x0323CAB4 MOVZ W9, 0xC00
	0x0323CAB8 MOVK W9, 0x504D0000
	0x0323CABC ORR W25, W8, W9, 0x0
	0x0323CAC0 B 0x323CA78
	0x0323CAC4 ORR W25, W25, 0xF0
	0x0323CAC8 B 0x323C6F8
	0x0323CACC ADRP X22, 0xEE6000
	0x0323CAD0 LDR X22, [X22 + 0x848]
	0x0323CAD4 MOV W25, W31
	0x0323CAD8 SUB X26, X21, 0x1
	0x0323CADC B 0x323CA78
	0x0323CAE0 TBNZ X8, 0x0, 0x323CB90
	0x0323CAE4 CBZ X20, 0x323CB10
	0x0323CAE8 LDRB W8, [X20 + 0x28]
	0x0323CAEC CBZ W8, 0x323CB98
	0x0323CAF0 CBNZ X24, 0x323CB44
	0x0323CAF4 MOV X0, X20
	0x0323CAF8 MOV X1, X31
	0x0323CAFC BL 0x33FC534
	0x0323CB00 B 0x323CB28
	0x0323CB04 MOV X26, X29
	0x0323CB08 CBNZ X20, 0x323CB94
	0x0323CB0C B 0x323CBB0
	0x0323CB10 CBNZ X24, 0x323CB44
	0x0323CB14 LDR X0, [X19 + 0x30]
	0x0323CB18 CBZ X0, 0x323CC74
	0x0323CB1C LDR X8, [X0]
	0x0323CB20 LDP X9, X1, [X8 + 0x178]
	0x0323CB24 BLR X9
	0x0323CB28 MOV X24, X0
	0x0323CB2C CBZ X0, 0x323CC74
	0x0323CB30 MOV X0, X24
	0x0323CB34 MOV X1, X27
	0x0323CB38 MOV X2, X23
	0x0323CB3C MOV X3, X31
	0x0323CB40 BL 0x33FC570
	0x0323CB44 ADD X1, X31, 0x18
	0x0323CB48 ADD X4, X31, 0x10
	0x0323CB4C MOV X0, X19
	0x0323CB50 MOV W2, W25
	0x0323CB54 MOV X3, X24
	0x0323CB58 STP X28, X26, [X31 + 0x10]
	0x0323CB5C BL 0x323CC78
	0x0323CB60 LDP X28, X26, [X31 + 0x10]
	0x0323CB64 TBNZ X0, 0x0, 0x323CB90
	0x0323CB68 MOV X0, X24
	0x0323CB6C MOV X1, X31
	0x0323CB70 BL 0x33FC800
	0x0323CB74 LDR X8, [X31 + 0x8]
	0x0323CB78 MOV X0, X19
	0x0323CB7C MOV X1, X20
	0x0323CB80 MOV X3, X31
	0x0323CB84 CMP X28, X8
	0x0323CB88 CSET W2, EQ
	0x0323CB8C BL 0x3245300
	0x0323CB90 CBZ X20, 0x323CBB0
	0x0323CB94 MOV W25, W31
	0x0323CB98 LDR X1, [X22]
	0x0323CB9C LDR X8, [X20]
	0x0323CBA0 CMP X8, X1
	0x0323CBA4 B.NE 0x323CC6C
	0x0323CBA8 SUB W8, W26, W27
	0x0323CBAC STP W8, W25, [X20 + 0x2C]
	0x0323CBB0 ADRP X8, 0xEE6000
	0x0323CBB4 LDR X8, [X8 + 0x828]
	0x0323CBB8 LDR X19, [X31 + 0x8]
	0x0323CBBC LDR X0, [X8]
	0x0323CBC0 LDR W8, [X0 + 0xE0]
	0x0323CBC4 CBNZ W8, 0x323CBCC
	0x0323CBC8 BL 0x1C16DFC
	0x0323CBCC SUB W8, W28, W19
	0x0323CBD0 LDP X20, X19, [X31 + 0x70]
	0x0323CBD4 LDP X22, X21, [X31 + 0x60]
	0x0323CBD8 LDP X24, X23, [X31 + 0x50]
	0x0323CBDC LDP X26, X25, [X31 + 0x40]
	0x0323CBE0 LDP X28, X27, [X31 + 0x30]
	0x0323CBE4 LDP X29, X30, [X31 + 0x20]
	0x0323CBE8 UBFM W0, W8, 0x1, 0x1F
	0x0323CBEC ADD X31, X31, 0x80
	0x0323CBF0 RET
	0x0323CBF4 AND W8, W25, 0x1FFFFF
	0x0323CBF8 CMP W8, 0x80
	0x0323CBFC B.CS 0x323CC08
	0x0323CC00 MOV X0, X19
	0x0323CC04 B 0x323CC44
	0x0323CC08 CMP W8, 0x800
	0x0323CC0C MOV X0, X19
	0x0323CC10 B.CC 0x323CC40
	0x0323CC14 AND W9, W25, 0x1FFC00
	0x0323CC18 MOVZ W10, 0xDC00
	0x0323CC1C CMP W9, W10
	0x0323CC20 B.NE 0x323CC30
	0x0323CC24 SUB X26, X26, 0x1
	0x0323CC28 SUB X21, X21, 0x2
	0x0323CC2C B 0x323CC3C
	0x0323CC30 CMP W8, 0x10000
	0x0323CC34 B.CC 0x323CC3C
	0x0323CC38 SUB X26, X26, 0x1
	0x0323CC3C SUB X26, X26, 0x1
	0x0323CC40 SUB X26, X26, 0x1
	0x0323CC44 LDR X8, [X31 + 0x8]
	0x0323CC48 MOV X1, X20
	0x0323CC4C MOV X3, X31
	0x0323CC50 SUB X26, X26, 0x1
	0x0323CC54 CMP X21, X8
	0x0323CC58 CSET W2, EQ
	0x0323CC5C BL 0x3245300
	0x0323CC60 MOV X28, X21
	0x0323CC64 CBNZ X20, 0x323CB94
	0x0323CC68 B 0x323CBB0
	0x0323CC6C MOV X0, X20
	0x0323CC70 BL 0x1C171E0
	0x0323CC74 BL 0x1C16F20
	0x0323CC78 SUB X31, X31, 0x30
	0x0323CC7C STP X30, X21, [X31 + 0x10]
	0x0323CC80 STP X20, X19, [X31 + 0x20]
	0x0323CC84 LDR X8, [X1]
	0x0323CC88 MOV X19, X1
	0x0323CC8C ADD X1, X31, 0x8
	0x0323CC90 MOV X20, X4
	0x0323CC94 MOV X21, X3
	0x0323CC98 STR X8, [X31 + 0x8]
	0x0323CC9C BL 0x323CCE4
	0x0323CCA0 CBZ X21, 0x323CCE0
	0x0323CCA4 LDR X8, [X21]
	0x0323CCA8 LDR X2, [X19]
	0x0323CCAC MOV X1, X0
	0x0323CCB0 MOV X0, X21
	0x0323CCB4 LDP X9, X4, [X8 + 0x1A8]
	0x0323CCB8 MOV X3, X20
	0x0323CCBC BLR X9
	0x0323CCC0 TBNZ X0, 0x0, 0x323CCCC
	0x0323CCC4 LDR X8, [X31 + 0x8]
	0x0323CCC8 STR X8, [X19]
	0x0323CCCC LDP X20, X19, [X31 + 0x20]
	0x0323CCD0 LDP X30, X21, [X31 + 0x10]
	0x0323CCD4 AND W0, W0, 0x1
	0x0323CCD8 ADD X31, X31, 0x30
	0x0323CCDC RET
	0x0323CCE0 BL 0x1C16F20
	0x0323CCE4 STP X30, X21, [X31 - 0x20]!
	0x0323CCE8 STP X20, X19, [X31 + 0x10]
	0x0323CCEC ADRP X21, 0x11A0000
	0x0323CCF0 LDRB W8, [X21 + 0x40B]
	0x0323CCF4 MOV W19, W2
	0x0323CCF8 MOV X20, X1
	0x0323CCFC TBNZ X8, 0x0, 0x323CD14
	0x0323CD00 ADRP X0, 0xEB7000
	0x0323CD04 LDR X0, [X0 + 0x618]
	0x0323CD08 BL 0x1C16CF4
	0x0323CD0C MOVZ W8, 0x1
	0x0323CD10 STRB W8, [X21 + 0x40B]
	0x0323CD14 ADRP X8, 0xEB7000
	0x0323CD18 LDR X8, [X8 + 0x618]
	0x0323CD1C CMP W19, 0xFF
	0x0323CD20 B.LS 0x323CD64
	0x0323CD24 ANDS W31, W19, 0x18000000
	0x0323CD28 B.EQ 0x323CD90
	0x0323CD2C TBNZ X19, 0x1C, 0x323CDC4
	0x0323CD30 LDR X9, [X20]
	0x0323CD34 TBNZ X19, 0x17, 0x323CDFC
	0x0323CD38 SUB X9, X9, 0x1
	0x0323CD3C STR X9, [X20]
	0x0323CD40 LDR X0, [X8]
	0x0323CD44 MOVZ W1, 0x1
	0x0323CD48 BL 0x1C16D6C
	0x0323CD4C CBZ X0, 0x323CED4
	0x0323CD50 LDR W8, [X0 + 0x18]
	0x0323CD54 CBZ W8, 0x323CED0
	0x0323CD58 MOVZ W8, 0xE0
	0x0323CD5C BFM W8, W19, 0x0, 0x3
	0x0323CD60 B 0x323CDBC
	0x0323CD64 LDR X9, [X20]
	0x0323CD68 MOVZ W1, 0x1
	0x0323CD6C SUB X9, X9, 0x1
	0x0323CD70 STR X9, [X20]
	0x0323CD74 LDR X0, [X8]
	0x0323CD78 BL 0x1C16D6C
	0x0323CD7C CBZ X0, 0x323CED4
	0x0323CD80 LDR W8, [X0 + 0x18]
	0x0323CD84 CBZ W8, 0x323CED0
	0x0323CD88 STRB W19, [X0 + 0x20]
	0x0323CD8C B 0x323CEC4
	0x0323CD90 LDR X9, [X20]
	0x0323CD94 MOVZ W1, 0x1
	0x0323CD98 SUB X9, X9, 0x1
	0x0323CD9C STR X9, [X20]
	0x0323CDA0 LDR X0, [X8]
	0x0323CDA4 BL 0x1C16D6C
	0x0323CDA8 CBZ X0, 0x323CED4
	0x0323CDAC LDR W8, [X0 + 0x18]
	0x0323CDB0 CBZ W8, 0x323CED0
	0x0323CDB4 MOVZ W8, 0xC0
	0x0323CDB8 BFM W8, W19, 0x0, 0x4
	0x0323CDBC STRB W8, [X0 + 0x20]
	0x0323CDC0 B 0x323CEC4
	0x0323CDC4 TBNZ X19, 0x17, 0x323CE28
	0x0323CDC8 LDR X9, [X20]
	0x0323CDCC TBNZ X19, 0x11, 0x323CE84
	0x0323CDD0 SUB X9, X9, 0x1
	0x0323CDD4 STR X9, [X20]
	0x0323CDD8 LDR X0, [X8]
	0x0323CDDC MOVZ W1, 0x1
	0x0323CDE0 BL 0x1C16D6C
	0x0323CDE4 CBZ X0, 0x323CED4
	0x0323CDE8 LDR W8, [X0 + 0x18]
	0x0323CDEC CBZ W8, 0x323CED0
	0x0323CDF0 MOVZ W8, 0xF0
	0x0323CDF4 BFM W8, W19, 0x0, 0x2
	0x0323CDF8 B 0x323CDBC
	0x0323CDFC SUB X9, X9, 0x2
	0x0323CE00 STR X9, [X20]
	0x0323CE04 LDR X0, [X8]
	0x0323CE08 MOVZ W1, 0x2
	0x0323CE0C BL 0x1C16D6C
	0x0323CE10 CBZ X0, 0x323CED4
	0x0323CE14 LDR W8, [X0 + 0x18]
	0x0323CE18 CBZ W8, 0x323CED0
	0x0323CE1C MOVZ W9, 0xE0
	0x0323CE20 BFM W9, W19, 0x6, 0x9
	0x0323CE24 B 0x323CEAC
	0x0323CE28 LDR X9, [X20]
	0x0323CE2C MOVZ W1, 0x3
	0x0323CE30 SUB X9, X9, 0x3
	0x0323CE34 STR X9, [X20]
	0x0323CE38 LDR X0, [X8]
	0x0323CE3C BL 0x1C16D6C
	0x0323CE40 CBZ X0, 0x323CED4
	0x0323CE44 LDR W8, [X0 + 0x18]
	0x0323CE48 CBZ W8, 0x323CED0
	0x0323CE4C MOVZ W9, 0xF0
	0x0323CE50 BFM W9, W19, 0xC, 0xE
	0x0323CE54 CMP W8, 0x1
	0x0323CE58 STRB W9, [X0 + 0x20]
	0x0323CE5C B.EQ 0x323CED0
	0x0323CE60 MOVZ W10, 0x80
	0x0323CE64 MOVZ W9, 0x80
	0x0323CE68 BFM W10, W19, 0x6, 0xB
	0x0323CE6C CMP W8, 0x2
	0x0323CE70 STRB W10, [X0 + 0x21]
	0x0323CE74 B.LS 0x323CED0
	0x0323CE78 BFM W9, W19, 0x0, 0x5
	0x0323CE7C STRB W9, [X0 + 0x22]
	0x0323CE80 B 0x323CEC4
	0x0323CE84 SUB X9, X9, 0x2
	0x0323CE88 STR X9, [X20]
	0x0323CE8C LDR X0, [X8]
	0x0323CE90 MOVZ W1, 0x2
	0x0323CE94 BL 0x1C16D6C
	0x0323CE98 CBZ X0, 0x323CED4
	0x0323CE9C LDR W8, [X0 + 0x18]
	0x0323CEA0 CBZ W8, 0x323CED0
	0x0323CEA4 MOVZ W9, 0xF0
	0x0323CEA8 BFM W9, W19, 0x6, 0x8
	0x0323CEAC CMP W8, 0x1
	0x0323CEB0 STRB W9, [X0 + 0x20]
	0x0323CEB4 B.EQ 0x323CED0
	0x0323CEB8 MOVZ W8, 0x80
	0x0323CEBC BFM W8, W19, 0x0, 0x5
	0x0323CEC0 STRB W8, [X0 + 0x21]
	0x0323CEC4 LDP X20, X19, [X31 + 0x10]
	0x0323CEC8 LDP X30, X21, [X31], #0x20
	0x0323CECC RET
	0x0323CED0 BL 0x1C16F28
	0x0323CED4 BL 0x1C16F20
	0x0323CED8 STP X30, X21, [X31 - 0x20]!
	0x0323CEDC STP X20, X19, [X31 + 0x10]
	0x0323CEE0 ADRP X20, 0x11A0000
	0x0323CEE4 ADRP X21, 0xEE6000
	0x0323CEE8 LDRB W8, [X20 + 0x40C]
	0x0323CEEC LDR X21, [X21 + 0x848]
	0x0323CEF0 MOV X19, X0
	0x0323CEF4 TBNZ X8, 0x0, 0x323CF0C
	0x0323CEF8 ADRP X0, 0xEE6000
	0x0323CEFC LDR X0, [X0 + 0x848]
	0x0323CF00 BL 0x1C16CF4
	0x0323CF04 MOVZ W8, 0x1
	0x0323CF08 STRB W8, [X20 + 0x40C]
	0x0323CF0C LDR X0, [X21]
	0x0323CF10 BL 0x1C16F10
	0x0323CF14 MOV X1, X19
	0x0323CF18 MOV X2, X31
	0x0323CF1C MOV X20, X0
	0x0323CF20 BL 0x33FCA64
	0x0323CF24 MOV X0, X20
	0x0323CF28 LDP X20, X19, [X31 + 0x10]
	0x0323CF2C LDP X30, X21, [X31], #0x20
	0x0323CF30 RET
	0x0323CF34 MOV X2, X31
	0x0323CF38 B 0x33FCA64
	0x0323CF3C STP X30, X21, [X31 - 0x20]!
	0x0323CF40 STP X20, X19, [X31 + 0x10]
	0x0323CF44 ADRP X20, 0x11A0000
	0x0323CF48 ADRP X21, 0xEE6000
	0x0323CF4C LDRB W8, [X20 + 0x40D]
	0x0323CF50 LDR X21, [X21 + 0x820]
	0x0323CF54 MOV X19, X0
	0x0323CF58 TBNZ X8, 0x0, 0x323CF70
	0x0323CF5C ADRP X0, 0xEE6000
	0x0323CF60 LDR X0, [X0 + 0x820]
	0x0323CF64 BL 0x1C16CF4
	0x0323CF68 MOVZ W8, 0x1
	0x0323CF6C STRB W8, [X20 + 0x40D]
	0x0323CF70 LDR X0, [X21]
	0x0323CF74 BL 0x1C16F10
	0x0323CF78 MOV X1, X19
	0x0323CF7C MOV X20, X0
	0x0323CF80 BL 0x322EC5C
	0x0323CF84 MOV X0, X20
	0x0323CF88 LDP X20, X19, [X31 + 0x10]
	0x0323CF8C LDP X30, X21, [X31], #0x20
	0x0323CF90 RET
	0x0323CF94 B 0x322EC5C
	0x0323CF98 STR X30, [X31 - 0x20]!
	0x0323CF9C STP X20, X19, [X31 + 0x10]
	0x0323CFA0 TBNZ X1, 0x1F, 0x323D00C
	0x0323CFA4 MOV X19, X0
	0x0323CFA8 LDR X0, [X0 + 0x28]
	0x0323CFAC CBZ X0, 0x323D008
	0x0323CFB0 LDR X8, [X0]
	0x0323CFB4 MOV W10, W1
	0x0323CFB8 ADD X20, X10, 0x1
	0x0323CFBC LDP X9, X8, [X8 + 0x188]
	0x0323CFC0 MOV X1, X8
	0x0323CFC4 BLR X9
	0x0323CFC8 CMP W0, 0x2
	0x0323CFCC B.LT 0x323CFEC
	0x0323CFD0 LDR X0, [X19 + 0x28]
	0x0323CFD4 CBZ X0, 0x323D008
	0x0323CFD8 LDR X8, [X0]
	0x0323CFDC LDP X9, X1, [X8 + 0x188]
	0x0323CFE0 BLR X9
	0x0323CFE4 SXTW X8, W0
	0x0323CFE8 MUL X20, X20, X8
	0x0323CFEC ADD X0, X20, X20, 0x1, LSL
	0x0323CFF0 MOVZ W8, 0x80000000
	0x0323CFF4 CMP X0, X8
	0x0323CFF8 B.GE 0x323D03C
	0x0323CFFC LDP X20, X19, [X31 + 0x10]
	0x0323D000 LDR X30, [X31], #0x20
	0x0323D004 RET
	0x0323D008 BL 0x1C16F20
	0x0323D00C ADRP X0, 0xEBE000
	0x0323D010 LDR X0, [X0 + 0x760]
	0x0323D014 BL 0x1C16D08
	0x0323D018 BL 0x1C16F10
	0x0323D01C MOV X19, X0
	0x0323D020 ADRP X0, 0xEE5000
	0x0323D024 LDR X0, [X0 + 0x310]
	0x0323D028 BL 0x1C16D08
	0x0323D02C MOV X20, X0
	0x0323D030 ADRP X0, 0xEDE000
	0x0323D034 LDR X0, [X0 + 0x670]
	0x0323D038 B 0x323D068
	0x0323D03C ADRP X0, 0xEBE000
	0x0323D040 LDR X0, [X0 + 0x760]
	0x0323D044 BL 0x1C16D08
	0x0323D048 BL 0x1C16F10
	0x0323D04C MOV X19, X0
	0x0323D050 ADRP X0, 0xEE5000
	0x0323D054 LDR X0, [X0 + 0x310]
	0x0323D058 BL 0x1C16D08
	0x0323D05C MOV X20, X0
	0x0323D060 ADRP X0, 0xEE5000
	0x0323D064 LDR X0, [X0 + 0x420]
	0x0323D068 BL 0x1C16D08
	0x0323D06C MOV X2, X0
	0x0323D070 MOV X0, X19
	0x0323D074 MOV X1, X20
	0x0323D078 MOV X3, X31
	0x0323D07C BL 0x3311888
	0x0323D080 ADRP X0, 0xEE5000
	0x0323D084 LDR X0, [X0 + 0x850]
	0x0323D088 BL 0x1C16D08
	0x0323D08C MOV X1, X0
	0x0323D090 MOV X0, X19
	0x0323D094 BL 0x1C16DEC
	0x0323D098 STR X30, [X31 - 0x20]!
	0x0323D09C STP X20, X19, [X31 + 0x10]
	0x0323D0A0 TBNZ X1, 0x1F, 0x323D10C
	0x0323D0A4 MOV X20, X0
	0x0323D0A8 LDR X0, [X0 + 0x30]
	0x0323D0AC CBZ X0, 0x323D108
	0x0323D0B0 LDR X8, [X0]
	0x0323D0B4 MOV W10, W1
	0x0323D0B8 ADD X19, X10, 0x1
	0x0323D0BC LDP X9, X8, [X8 + 0x188]
	0x0323D0C0 MOV X1, X8
	0x0323D0C4 BLR X9
	0x0323D0C8 CMP W0, 0x2
	0x0323D0CC B.LT 0x323D0EC
	0x0323D0D0 LDR X0, [X20 + 0x30]
	0x0323D0D4 CBZ X0, 0x323D108
	0x0323D0D8 LDR X8, [X0]
	0x0323D0DC LDP X9, X1, [X8 + 0x188]
	0x0323D0E0 BLR X9
	0x0323D0E4 SXTW X8, W0
	0x0323D0E8 MUL X19, X19, X8
	0x0323D0EC MOVZ W8, 0x80000000
	0x0323D0F0 CMP X19, X8

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+48], X29
	003 Move [X31+56], X30
	004 Move [X31+64], X28
	005 Move [X31+72], X27
	006 Move [X31+80], X26
	007 Move [X31+88], X25
	008 Move [X31+96], X24
	009 Move [X31+104], X23
	010 Move [X31+112], X22
	011 Move [X31+120], X21
	012 Move [X31+128], X20
	013 Move [X31+136], X19
	014 Move X19, 0x11A1000
	015 Move W8, [X19+1032]
	016 Move X20, X5
	017 Move W27, W4
	018 Move X23, X3
	019 Move W22, W2
	020 Move X29, X1
	021 Move [X31+24], X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {34}
	026 Move X0, 0xEE7000
	027 Move X0, [X0+2080]
	028 Call 0x1C17CF4
	029 Move X0, 0xEE7000
	030 Move X0, [X0+2088]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X19+1032], W8
	034 Add X24, X29, W22
	035 Move [X31+40], X31
	036 Move [X31+16], X20
	037 Compare X20, 0
	038 JumpIfEqual {73}
	039 Move X8, 0xEE7000
	040 Move X8, [X8+2080]
	041 Move X1, [X8]
	042 Move X8, [X20]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move W26, [X20+56]
	045 Move X0, X20
	046 Move X1, X31
	047 Call Encoder.get_InternalHasFallbackBuffer, X0
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {76}
	052 Move X0, X20
	053 Move X1, X31
	054 Call Encoder.get_FallbackBuffer, X0
	055 Compare X0, 0
	056 JumpIfEqual {438}
	057 Move X8, [X0]
	058 Move X25, X0
	059 Move X9, [X8+440]
	060 Move X1, [X8+448]
	061 NotImplemented "Instruction BLR not yet implemented."
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move W8, [X20+49]
	064 Compare W8, 0
	065 JumpIfNotEqual {439}
	066 Move W4, 1
	067 Move X0, X25
	068 Move X1, X29
	069 Move X2, X24
	070 Move X3, X20
	071 Move X5, X31
	072 Call EncoderFallbackBuffer.InternalInitialize, X0, X1, X2, X3, X4
	073 Move W26, W31
	074 Move X25, X31
	075 Move X22, X31
	076 Move X25, X31
	077 Move X22, X20
	078 Move X21, 0xEE7000
	079 Move X21, [X21+2088]
	080 Add X20, X23, W27
	081 Move W19, 0xD800
	082 Move X28, X23
	083 Move [X31+32], X29
	084 NotImplemented "Instruction CMP not yet implemented."
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X0, [X21]
	087 NotImplemented "Instruction LDRH not yet implemented."
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1C17DFC
	092 And W8, W19, 0xFC00
	093 Move W9, 0xDC00
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move W8, 0x2400
	096 NotImplemented "Instruction MOVK not yet implemented."
	097 Add W8, W8, W26
	098 Add W26, W8, W19
	099 Add X29, X29, 2
	100 Move W19, 0xD800
	101 Compare W26, 0
	102 JumpIfEqual {139}
	103 Compare X25, 0
	104 JumpIfEqual {126}
	105 Move W8, [X25+42]
	106 Compare W8, 0
	107 JumpIfEqual {126}
	108 Move X0, X25
	109 Move X1, X31
	110 Call EncoderFallbackBuffer.InternalGetNextChar, X0
	111 Move X8, [X21]
	112 Move W27, W0
	113 Move W9, [X8+224]
	114 Compare W9, 0
	115 JumpIfNotEqual {118}
	116 Move X0, X8
	117 Call 0x1C17DFC
	118 And W8, W27, 0xFFFF
	119 And W9, W8, 0xFC00
	120 Move W10, 0xDC00
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Move W9, 0x2400
	123 NotImplemented "Instruction MOVK not yet implemented."
	124 Add W9, W9, W26
	125 Add W26, W9, W8
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Compare X22, 0
	128 JumpIfEqual {155}
	129 Move W8, [X22+48]
	130 Compare W8, 0
	131 JumpIfNotEqual {155}
	132 Compare X25, 0
	133 JumpIfEqual {138}
	134 Move X0, X25
	135 Move X1, X31
	136 Call EncoderFallbackBuffer.InternalGetNextChar, X0
	137 And W26, W0, 0xFFFF
	138 NotImplemented "Instruction LDRH not yet implemented."
	139 Compare X25, 0
	140 JumpIfEqual {409}
	141 Move X0, X25
	142 Move X1, X31
	143 Call EncoderFallbackBuffer.InternalGetNextChar, X0
	144 And W26, W0, 0xFFFF
	145 Compare W8, 0
	146 JumpIfEqual {409}
	147 Move W26, W8
	148 Move X0, [X21]
	149 Move W8, [X0+224]
	150 Compare W8, 0
	151 JumpIfNotEqual {153}
	152 Call 0x1C17DFC
	153 And W8, W26, 0xFC00
	154 NotImplemented "Instruction CMP not yet implemented."
	155 Move X0, [X21]
	156 Move W8, [X0+224]
	157 Compare W8, 0
	158 JumpIfNotEqual {160}
	159 Call 0x1C17DFC
	160 Move W8, W26
	161 ShiftRight W8, 11
	162 And W8, W8, 0x7FFFFFFF
	163 NotImplemented "Instruction CMP not yet implemented."
	164 NotImplemented "Instruction CMP not yet implemented."
	165 Move TEMP, 3
	166 Not TEMP
	167 Move X8, TEMP
	168 NotImplemented "Instruction CINC not yet implemented."
	169 NotImplemented "Instruction CMP not yet implemented."
	170 Move TEMP, 1
	171 Not TEMP
	172 Move X9, TEMP
	173 NotImplemented "Instruction CSEL not yet implemented."
	174 NotImplemented "Instruction CMP not yet implemented."
	175 NotImplemented "Instruction CSINV not yet implemented."
	176 Add X8, X8, X20
	177 NotImplemented "Instruction CMP not yet implemented."
	178 NotImplemented "Instruction CMP not yet implemented."
	179 NotImplemented "Instruction CMP not yet implemented."
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Move W9, W26
	182 ShiftRight W9, 18
	183 And W9, W9, 0x7FFFFFFF
	184 Move TEMP, 127
	185 Not TEMP
	186 Move W8, TEMP
	187 Or W9, W9, 240
	188 Move [X28+1], W9
	189 NotImplemented "Instruction BFM not yet implemented."
	190 Move [X28], W26
	191 Move W8, W26
	192 ShiftRight W8, 6
	193 And W8, W8, 0x7FFFFFFF
	194 Or W8, W8, 192
	195 Move W8, W26
	196 ShiftRight W8, 12
	197 And W8, W8, 0x7FFFFFFF
	198 Or W8, W8, 224
	199 Move [X28+1], W8
	200 Move TEMP, 127
	201 Not TEMP
	202 Move W8, TEMP
	203 NotImplemented "Instruction BFM not yet implemented."
	204 Move [X28], W8
	205 Move W8, 128
	206 NotImplemented "Instruction BFM not yet implemented."
	207 Move [X28+1], W8
	208 Add X28, X28, 1
	209 Compare X25, 0
	210 JumpIfEqual {215}
	211 Move X0, X25
	212 Move X1, X31
	213 Call EncoderFallbackBuffer.InternalGetNextChar, X0
	214 And W26, W0, 0xFFFF
	215 Move X0, [X21]
	216 Move W8, [X0+224]
	217 Compare W8, 0
	218 JumpIfNotEqual {220}
	219 Call 0x1C17DFC
	220 Subtract W9, W24, W29
	221 Move W8, W9
	222 ShiftRight W8, 1
	223 And W8, W8, 0x7FFFFFFF
	224 NotImplemented "Instruction CMP not yet implemented."
	225 Subtract W9, W20, W28
	226 NotImplemented "Instruction CMP not yet implemented."
	227 NotImplemented "Instruction CSEL not yet implemented."
	228 Add X8, X29, W8
	229 Subtract X27, X8, 10
	230 NotImplemented "Instruction CMP not yet implemented."
	231 Move W26, W31
	232 Move X8, X29
	233 NotImplemented "Instruction LDRH not yet implemented."
	234 NotImplemented "Instruction CMP not yet implemented."
	235 Move X9, X28
	236 Move [X9+1], W26
	237 Move TEMP, X8
	238 And TEMP, TEMP, 2
	239 Compare TEMP, 2
	240 JumpIfEqual {243}
	241 Move X28, X9
	242 Move X29, X8
	243 NotImplemented "Instruction LDRH not yet implemented."
	244 Add X29, X29, 4
	245 NotImplemented "Instruction CMP not yet implemented."
	246 Move [X28+1], W26
	247 Add X28, X28, 2
	248 NotImplemented "Instruction CMP not yet implemented."
	249 Move W8, [X29]
	250 Move W9, [X29+4]
	251 Or W10, W9, W8
	252 And W31, W10, 0xFF80FF80
	253 Move [X28], W8
	254 Move W8, W8
	255 ShiftRight W8, 16
	256 And W8, W8, 0x7FFFFFFF
	257 Add X29, X29, 8
	258 Move [X28+2], W9
	259 Move W9, W9
	260 ShiftRight W9, 16
	261 And W9, W9, 0x7FFFFFFF
	262 Move [X28+1], W8
	263 Move [X28+3], W9
	264 NotImplemented "Instruction CMP not yet implemented."
	265 Add X28, X28, 4
	266 And W26, W8, 0xFFFF
	267 NotImplemented "Instruction CMP not yet implemented."
	268 Add X29, X29, 2
	269 Move [X28+1], W8
	270 NotImplemented "Instruction CMP not yet implemented."
	271 Move X29, X8
	272 Move X28, X9
	273 NotImplemented "Instruction CMP not yet implemented."
	274 Move X0, [X21]
	275 Move W8, [X0+224]
	276 Compare W8, 0
	277 JumpIfNotEqual {279}
	278 Call 0x1C17DFC
	279 And W8, W26, 0xF800
	280 NotImplemented "Instruction CMP not yet implemented."
	281 Move W8, W26
	282 ShiftRight W8, 10
	283 And W8, W8, 0x7FFFFFFF
	284 NotImplemented "Instruction CMP not yet implemented."
	285 Move [X31+8], X22
	286 Move X22, X23
	287 Move X23, X29
	288 NotImplemented "Instruction LDRH not yet implemented."
	289 Move X0, [X21]
	290 Move W8, [X0+224]
	291 Compare W8, 0
	292 JumpIfNotEqual {294}
	293 Call 0x1C17DFC
	294 And W8, W19, 0xFC00
	295 Move W9, 0xDC00
	296 NotImplemented "Instruction CMP not yet implemented."
	297 Move W8, 0x2400
	298 NotImplemented "Instruction MOVK not yet implemented."
	299 Add W9, W8, W26
	300 Add W26, W9, W19
	301 Move X29, X23
	302 Move X23, X22
	303 Move X22, [X31+8]
	304 Move W9, W26
	305 ShiftRight W9, 18
	306 And W9, W9, 0x7FFFFFFF
	307 Move TEMP, 127
	308 Not TEMP
	309 Move W8, TEMP
	310 Or W9, W9, 240
	311 Move [X28+1], W9
	312 NotImplemented "Instruction BFM not yet implemented."
	313 Move W19, 0xD800
	314 Move W8, W26
	315 ShiftRight W8, 6
	316 And W8, W8, 0x7FFFFFFF
	317 Or W8, W8, 0xFFFFFFC0
	318 Move W8, W26
	319 ShiftRight W8, 12
	320 And W8, W8, 0x7FFFFFFF
	321 Or W8, W8, 0xFFFFFFE0
	322 Move [X28+1], W8
	323 Move TEMP, 127
	324 Not TEMP
	325 Move W8, TEMP
	326 Subtract X27, X27, 2
	327 NotImplemented "Instruction BFM not yet implemented."
	328 Move [X28], W8
	329 Move W8, 128
	330 Subtract X27, X27, 2
	331 NotImplemented "Instruction BFM not yet implemented."
	332 NotImplemented "Instruction CMP not yet implemented."
	333 Move [X28+1], W8
	334 Add X28, X28, 2
	335 NotImplemented "Instruction CMP not yet implemented."
	336 Move W26, W31
	337 NotImplemented "Instruction CMP not yet implemented."
	338 NotImplemented "Instruction LDRH not yet implemented."
	339 NotImplemented "Instruction CMP not yet implemented."
	340 NotImplemented "Instruction CMP not yet implemented."
	341 Move [X28+1], W26
	342 Compare X25, 0
	343 JumpIfNotEqual {367}
	344 Move X0, [X31+16]
	345 Compare X0, 0
	346 JumpIfEqual {349}
	347 Move X1, X31
	348 Call Encoder.get_FallbackBuffer, X0
	349 Move X8, [X31+24]
	350 Move X0, [X8+40]
	351 Compare X0, 0
	352 JumpIfEqual {438}
	353 Move X8, [X0]
	354 Move X9, [X8+376]
	355 Move X1, [X8+384]
	356 NotImplemented "Instruction BLR not yet implemented."
	357 Move X25, X0
	358 Compare X0, 0
	359 JumpIfEqual {438}
	360 Move X1, [X31+32]
	361 Move X3, [X31+16]
	362 Move W4, 1
	363 Move X0, X25
	364 Move X2, X24
	365 Move X5, X31
	366 Call EncoderFallbackBuffer.InternalInitialize, X0, X1, X2, X3, X4
	367 Move [X31+40], X29
	368 Move X8, [X25]
	369 Add X2, X31, 40
	370 Move X0, X25
	371 Move W1, W26
	372 Move X9, [X8+472]
	373 Move X3, [X8+480]
	374 NotImplemented "Instruction BLR not yet implemented."
	375 Move X29, [X31+40]
	376 Move W26, W31
	377 Move W26, W31
	378 Subtract X29, X29, 2
	379 Move X23, X22
	380 Move X22, [X31+8]
	381 Move W26, W31
	382 Subtract X29, X29, 2
	383 Move W19, 0xD800
	384 Compare X25, 0
	385 JumpIfEqual {400}
	386 Move W8, [X25+42]
	387 Compare W8, 0
	388 JumpIfEqual {400}
	389 Move X8, [X25]
	390 Move X0, X25
	391 Move X9, [X8+424]
	392 Move X1, [X8+432]
	393 NotImplemented "Instruction BLR not yet implemented."
	394 NotImplemented "Instruction CMP not yet implemented."
	395 Move X8, [X25]
	396 Move X0, X25
	397 Move X9, [X8+424]
	398 Move X1, [X8+432]
	399 NotImplemented "Instruction BLR not yet implemented."
	400 NotImplemented "Instruction CMP not yet implemented."
	401 Subtract X29, X29, 2
	402 Subtract X29, X29, 4
	403 Move X0, [X31+24]
	404 NotImplemented "Instruction CMP not yet implemented."
	405 NotImplemented "Instruction CSET not yet implemented."
	406 Move X1, X22
	407 Move X3, X31
	408 Call Encoding.ThrowBytesOverflow, X0, X1, X2
	409 Move W26, W31
	410 Compare X22, 0
	411 JumpIfEqual {421}
	412 Move X8, [X31+32]
	413 Subtract X8, X29, X8
	414 NotImplemented "Instruction CMP not yet implemented."
	415 NotImplemented "Instruction CINC not yet implemented."
	416 Move X8, X8
	417 ShiftRight X8, 1
	418 And X8, X8, 0x7FFFFFFF
	419 Move [X22+52], W8
	420 Move [X22+56], W26
	421 Subtract W0, W28, W23
	422 Move X20, [X31+128]
	423 Move X19, [X31+136]
	424 Move X22, [X31+112]
	425 Move X21, [X31+120]
	426 Move X24, [X31+96]
	427 Move X23, [X31+104]
	428 Move X26, [X31+80]
	429 Move X25, [X31+88]
	430 Move X28, [X31+64]
	431 Move X27, [X31+72]
	432 Move X29, [X31+48]
	433 Move X30, [X31+56]
	434 Add X31, X31, 144
	435 Return X0
	436 Move X0, X20
	437 Call 0x1C181E0
	438 Call 0x1C17F20
	439 Move X0, [X31+24]
	440 Move X8, [X0]
	441 Move X9, [X8+440]
	442 Move X1, [X8+448]
	443 NotImplemented "Instruction BLR not yet implemented."
	444 Move X19, X0
	445 Move X0, X20
	446 Call 0x19913C0
	447 Move X20, [X20+16]
	448 Move X0, X20
	449 Call 0x19913C0
	450 Move X0, X20
	451 Move X1, X31
	452 Call "il2cpp_vm_object_is_inst", X0
	453 Move X20, X0
	454 Move X0, 0xEE6000
	455 Move X0, [X0+1712]
	456 Call 0x1C17D08
	457 Move X1, X19
	458 Move X2, X20
	459 Move X3, X31
	460 Call SR.Format, X0, X1, X2
	461 Move X19, X0
	462 Move X0, 0xEBF000
	463 Move X0, [X0+1400]
	464 Call 0x1C17D08
	465 Call 0x1C17F10
	466 Move X1, X19
	467 Move X2, X31
	468 Move X20, X0
	469 Call ArgumentException..ctor, X0, X1
	470 Move X0, 0xEE6000
	471 Move X0, [X0+2112]
	472 Call 0x1C17D08
	473 Move X1, X0
	474 Move X0, X20
	475 Call 0x1C17DEC

Method: System.Int32 GetCharCount(System.Byte* bytes, System.Int32 count, System.Text.DecoderNLS baseDecoder)

Disassembly:
	0x0323D0F4 B.GE 0x323D13C
	0x0323D0F8 MOV W0, W19
	0x0323D0FC LDP X20, X19, [X31 + 0x10]
	0x0323D100 LDR X30, [X31], #0x20
	0x0323D104 RET
	0x0323D108 BL 0x1C16F20
	0x0323D10C ADRP X0, 0xEBE000
	0x0323D110 LDR X0, [X0 + 0x760]
	0x0323D114 BL 0x1C16D08
	0x0323D118 BL 0x1C16F10
	0x0323D11C MOV X19, X0
	0x0323D120 ADRP X0, 0xEE5000
	0x0323D124 LDR X0, [X0 + 0x328]
	0x0323D128 BL 0x1C16D08
	0x0323D12C MOV X20, X0
	0x0323D130 ADRP X0, 0xEDE000
	0x0323D134 LDR X0, [X0 + 0x670]
	0x0323D138 B 0x323D168
	0x0323D13C ADRP X0, 0xEBE000
	0x0323D140 LDR X0, [X0 + 0x760]
	0x0323D144 BL 0x1C16D08
	0x0323D148 BL 0x1C16F10
	0x0323D14C MOV X19, X0
	0x0323D150 ADRP X0, 0xEE5000
	0x0323D154 LDR X0, [X0 + 0x328]
	0x0323D158 BL 0x1C16D08
	0x0323D15C MOV X20, X0
	0x0323D160 ADRP X0, 0xEE5000
	0x0323D164 LDR X0, [X0 + 0x430]
	0x0323D168 BL 0x1C16D08
	0x0323D16C MOV X2, X0
	0x0323D170 MOV X0, X19
	0x0323D174 MOV X1, X20
	0x0323D178 MOV X3, X31
	0x0323D17C BL 0x3311888
	0x0323D180 ADRP X0, 0xEE5000
	0x0323D184 LDR X0, [X0 + 0x858]
	0x0323D188 BL 0x1C16D08
	0x0323D18C MOV X1, X0
	0x0323D190 MOV X0, X19
	0x0323D194 BL 0x1C16DEC
	0x0323D198 STR X30, [X31 - 0x20]!
	0x0323D19C STP X20, X19, [X31 + 0x10]
	0x0323D1A0 ADRP X20, 0x119F000
	0x0323D1A4 LDRB W8, [X20 + 0x40E]
	0x0323D1A8 MOV X19, X0
	0x0323D1AC TBNZ X8, 0x0, 0x323D1DC
	0x0323D1B0 ADRP X0, 0xEBE000
	0x0323D1B4 LDR X0, [X0 + 0xCC8]
	0x0323D1B8 BL 0x1C16CF4
	0x0323D1BC ADRP X0, 0xEB6000
	0x0323D1C0 LDR X0, [X0 + 0x618]
	0x0323D1C4 BL 0x1C16CF4
	0x0323D1C8 ADRP X0, 0xEE5000
	0x0323D1CC LDR X0, [X0 + 0x860]
	0x0323D1D0 BL 0x1C16CF4
	0x0323D1D4 MOVZ W8, 0x1
	0x0323D1D8 STRB W8, [X20 + 0x40E]
	0x0323D1DC LDRB W8, [X19 + 0x38]
	0x0323D1E0 CBZ W8, 0x323D214
	0x0323D1E4 ADRP X8, 0xEB6000
	0x0323D1E8 LDR X8, [X8 + 0x618]
	0x0323D1EC ADRP X19, 0xEE5000
	0x0323D1F0 MOVZ W1, 0x3
	0x0323D1F4 LDR X0, [X8]
	0x0323D1F8 LDR X19, [X19 + 0x860]
	0x0323D1FC BL 0x1C16D6C
	0x0323D200 LDR X1, [X19]
	0x0323D204 MOV X2, X31
	0x0323D208 MOV X19, X0
	0x0323D20C BL 0x32C5BD8
	0x0323D210 B 0x323D26C
	0x0323D214 ADRP X8, 0xEBE000
	0x0323D218 LDR X8, [X8 + 0xCC8]
	0x0323D21C LDR X19, [X8]
	0x0323D220 LDR X8, [X19 + 0x38]
	0x0323D224 CBNZ X8, 0x323D234
	0x0323D228 MOV X0, X19
	0x0323D22C BL 0x1C5C6E0
	0x0323D230 LDR X8, [X19 + 0x38]
	0x0323D234 LDR X0, [X8 + 0x10]
	0x0323D238 LDRB W8, [X0 + 0x135]
	0x0323D23C TBNZ X8, 0x0, 0x323D244
	0x0323D240 BL 0x1C5C684
	0x0323D244 LDR W8, [X0 + 0xE0]
	0x0323D248 CBNZ W8, 0x323D250
	0x0323D24C BL 0x1C16DFC
	0x0323D250 LDR X8, [X19 + 0x38]
	0x0323D254 LDR X0, [X8 + 0x10]
	0x0323D258 LDRB W8, [X0 + 0x135]
	0x0323D25C TBNZ X8, 0x0, 0x323D264
	0x0323D260 BL 0x1C5C684
	0x0323D264 LDR X8, [X0 + 0xB8]
	0x0323D268 LDR X19, [X8]
	0x0323D26C MOV X0, X19
	0x0323D270 LDP X20, X19, [X31 + 0x10]
	0x0323D274 LDR X30, [X31], #0x20
	0x0323D278 RET
	0x0323D27C STR X30, [X31 - 0x30]!
	0x0323D280 STP X22, X21, [X31 + 0x10]
	0x0323D284 STP X20, X19, [X31 + 0x20]
	0x0323D288 ADRP X22, 0x119F000
	0x0323D28C ADRP X20, 0xEE5000
	0x0323D290 ADRP X21, 0xEB6000
	0x0323D294 LDRB W8, [X22 + 0x40F]
	0x0323D298 LDR X20, [X20 + 0x868]
	0x0323D29C LDR X21, [X21 + 0x6C0]
	0x0323D2A0 MOV X19, X0
	0x0323D2A4 TBNZ X8, 0x0, 0x323D2EC
	0x0323D2A8 ADRP X0, 0xEBE000
	0x0323D2AC LDR X0, [X0 + 0xCC8]
	0x0323D2B0 BL 0x1C16CF4
	0x0323D2B4 ADRP X0, 0xEE5000
	0x0323D2B8 LDR X0, [X0 + 0x6F0]
	0x0323D2BC BL 0x1C16CF4
	0x0323D2C0 ADRP X0, 0xEB6000
	0x0323D2C4 LDR X0, [X0 + 0x6C0]
	0x0323D2C8 BL 0x1C16CF4
	0x0323D2CC ADRP X0, 0xEE5000
	0x0323D2D0 LDR X0, [X0 + 0x868]
	0x0323D2D4 BL 0x1C16CF4
	0x0323D2D8 ADRP X0, 0xEE5000
	0x0323D2DC LDR X0, [X0 + 0x828]
	0x0323D2E0 BL 0x1C16CF4
	0x0323D2E4 MOVZ W8, 0x1
	0x0323D2E8 STRB W8, [X22 + 0x40F]
	0x0323D2EC MOV X0, X19
	0x0323D2F0 MOV X1, X31
	0x0323D2F4 BL 0x33BE520
	0x0323D2F8 LDR X8, [X21]
	0x0323D2FC LDR X21, [X20]
	0x0323D300 MOV X20, X0
	0x0323D304 LDR W9, [X8 + 0xE0]
	0x0323D308 CBNZ W9, 0x323D314
	0x0323D30C MOV X0, X8
	0x0323D310 BL 0x1C16DFC
	0x0323D314 ADRP X22, 0xEE5000
	0x0323D318 LDR X22, [X22 + 0x6F0]
	0x0323D31C MOV X0, X21
	0x0323D320 MOV X1, X31
	0x0323D324 BL 0x338C698
	0x0323D328 MOV X1, X0
	0x0323D32C MOV X0, X20
	0x0323D330 MOV X2, X31
	0x0323D334 BL 0x3395F0C
	0x0323D338 TBZ X0, 0x0, 0x323D350
	0x0323D33C LDR X8, [X19]
	0x0323D340 MOV X0, X19
	0x0323D344 LDP X9, X1, [X8 + 0x198]
	0x0323D348 BLR X9
	0x0323D34C B 0x323D3D8
	0x0323D350 LDRB W8, [X19 + 0x38]
	0x0323D354 CBZ W8, 0x323D380
	0x0323D358 ADRP X19, 0xEE5000
	0x0323D35C LDR X19, [X19 + 0x828]
	0x0323D360 LDR X0, [X19]
	0x0323D364 LDR W8, [X0 + 0xE0]
	0x0323D368 CBNZ W8, 0x323D374
	0x0323D36C BL 0x1C16DFC
	0x0323D370 LDR X0, [X19]
	0x0323D374 LDR X8, [X0 + 0xB8]
	0x0323D378 LDR X0, [X8 + 0x8]
	0x0323D37C B 0x323D3D8
	0x0323D380 ADRP X8, 0xEBE000
	0x0323D384 LDR X8, [X8 + 0xCC8]
	0x0323D388 LDR X19, [X8]
	0x0323D38C LDR X8, [X19 + 0x38]
	0x0323D390 CBNZ X8, 0x323D3A0
	0x0323D394 MOV X0, X19
	0x0323D398 BL 0x1C5C6E0
	0x0323D39C LDR X8, [X19 + 0x38]
	0x0323D3A0 LDR X0, [X8 + 0x10]
	0x0323D3A4 LDRB W8, [X0 + 0x135]
	0x0323D3A8 TBNZ X8, 0x0, 0x323D3B0
	0x0323D3AC BL 0x1C5C684
	0x0323D3B0 LDR W8, [X0 + 0xE0]
	0x0323D3B4 CBNZ W8, 0x323D3BC
	0x0323D3B8 BL 0x1C16DFC
	0x0323D3BC LDR X8, [X19 + 0x38]
	0x0323D3C0 LDR X0, [X8 + 0x10]
	0x0323D3C4 LDRB W8, [X0 + 0x135]
	0x0323D3C8 TBNZ X8, 0x0, 0x323D3D0
	0x0323D3CC BL 0x1C5C684
	0x0323D3D0 LDR X8, [X0 + 0xB8]
	0x0323D3D4 LDR X0, [X8]
	0x0323D3D8 LDR X1, [X22]
	0x0323D3DC LDP X20, X19, [X31 + 0x20]
	0x0323D3E0 LDP X22, X21, [X31 + 0x10]
	0x0323D3E4 LDR X30, [X31], #0x30
	0x0323D3E8 B 0x25BEADC
	0x0323D3EC STP X30, X21, [X31 - 0x20]!
	0x0323D3F0 STP X20, X19, [X31 + 0x10]
	0x0323D3F4 ADRP X21, 0x119F000
	0x0323D3F8 LDRB W8, [X21 + 0x410]
	0x0323D3FC MOV X20, X1
	0x0323D400 MOV X19, X0
	0x0323D404 TBNZ X8, 0x0, 0x323D41C
	0x0323D408 ADRP X0, 0xEE5000
	0x0323D40C LDR X0, [X0 + 0x828]
	0x0323D410 BL 0x1C16CF4
	0x0323D414 MOVZ W8, 0x1
	0x0323D418 STRB W8, [X21 + 0x410]
	0x0323D41C CBZ X20, 0x323D4A8
	0x0323D420 ADRP X8, 0xEE5000
	0x0323D424 LDR X8, [X8 + 0x828]
	0x0323D428 LDR X9, [X20]
	0x0323D42C LDR X8, [X8]
	0x0323D430 LDRB W11, [X9 + 0x130]
	0x0323D434 LDRB W10, [X8 + 0x130]
	0x0323D438 CMP W11, W10
	0x0323D43C B.CC 0x323D4A8
	0x0323D440 LDR X9, [X9 + 0xC8]
	0x0323D444 ADD X9, X9, X10, 0x3, LSL
	0x0323D448 LDUR X9, [X9 - 0x8]
	0x0323D44C CMP X9, X8
	0x0323D450 CSEL X20, X20, X31, EQ
	0x0323D454 B.NE 0x323D4A8
	0x0323D458 CBZ X20, 0x323D4B8
	0x0323D45C LDRB W8, [X19 + 0x38]
	0x0323D460 LDRB W9, [X20 + 0x38]
	0x0323D464 CMP W8, W9
	0x0323D468 B.NE 0x323D4A8
	0x0323D46C LDR X0, [X19 + 0x28]
	0x0323D470 CBZ X0, 0x323D4B8
	0x0323D474 LDR X8, [X0]
	0x0323D478 LDR X1, [X20 + 0x28]
	0x0323D47C LDP X9, X2, [X8 + 0x138]
	0x0323D480 BLR X9
	0x0323D484 TBZ X0, 0x0, 0x323D4A8
	0x0323D488 LDR X0, [X19 + 0x30]
	0x0323D48C CBZ X0, 0x323D4B8
	0x0323D490 LDR X8, [X0]
	0x0323D494 LDR X1, [X20 + 0x30]
	0x0323D498 LDP X20, X19, [X31 + 0x10]
	0x0323D49C LDP X3, X2, [X8 + 0x138]
	0x0323D4A0 LDP X30, X21, [X31], #0x20
	0x0323D4A4 BR X3
	0x0323D4A8 LDP X20, X19, [X31 + 0x10]
	0x0323D4AC MOV W0, W31
	0x0323D4B0 LDP X30, X21, [X31], #0x20
	0x0323D4B4 RET
	0x0323D4B8 BL 0x1C16F20
	0x0323D4BC STR X30, [X31 - 0x20]!
	0x0323D4C0 STP X20, X19, [X31 + 0x10]
	0x0323D4C4 MOV X19, X0
	0x0323D4C8 LDR X0, [X0 + 0x28]
	0x0323D4CC CBZ X0, 0x323D518
	0x0323D4D0 LDR X8, [X0]
	0x0323D4D4 LDP X9, X1, [X8 + 0x158]
	0x0323D4D8 BLR X9
	0x0323D4DC LDR X8, [X19 + 0x30]
	0x0323D4E0 CBZ X8, 0x323D518
	0x0323D4E4 LDR X9, [X8]
	0x0323D4E8 MOV W20, W0
	0x0323D4EC MOV X0, X8
	0x0323D4F0 LDP X10, X1, [X9 + 0x158]
	0x0323D4F4 BLR X10
	0x0323D4F8 LDRB W8, [X19 + 0x38]
	0x0323D4FC ADD W9, W20, W0
	0x0323D500 LDP X20, X19, [X31 + 0x10]
	0x0323D504 ADD W8, W9, W8
	0x0323D508 MOVZ W9, 0xFDE9
	0x0323D50C ADD W0, W8, W9
	0x0323D510 LDR X30, [X31], #0x20
	0x0323D514 RET
	0x0323D518 BL 0x1C16F20
	0x0323D51C STP X30, X23, [X31 - 0x30]!
	0x0323D520 STP X22, X21, [X31 + 0x10]
	0x0323D524 STP X20, X19, [X31 + 0x20]
	0x0323D528 ADRP X19, 0x119F000
	0x0323D52C ADRP X23, 0xEE5000
	0x0323D530 ADRP X20, 0xEE5000
	0x0323D534 ADRP X22, 0xEB6000
	0x0323D538 ADRP X21, 0xEE5000
	0x0323D53C LDRB W8, [X19 + 0x411]
	0x0323D540 LDR X23, [X23 + 0x870]
	0x0323D544 LDR X20, [X20 + 0x828]
	0x0323D548 LDR X22, [X22 + 0x618]
	0x0323D54C LDR X21, [X21 + 0x860]
	0x0323D550 TBNZ X8, 0x0, 0x323D58C
	0x0323D554 ADRP X0, 0xEB6000
	0x0323D558 LDR X0, [X0 + 0x618]
	0x0323D55C BL 0x1C16CF4
	0x0323D560 ADRP X0, 0xEE5000
	0x0323D564 LDR X0, [X0 + 0x860]
	0x0323D568 BL 0x1C16CF4
	0x0323D56C ADRP X0, 0xEE5000
	0x0323D570 LDR X0, [X0 + 0x870]
	0x0323D574 BL 0x1C16CF4
	0x0323D578 ADRP X0, 0xEE5000
	0x0323D57C LDR X0, [X0 + 0x828]
	0x0323D580 BL 0x1C16CF4
	0x0323D584 MOVZ W8, 0x1
	0x0323D588 STRB W8, [X19 + 0x411]
	0x0323D58C LDR X0, [X23]
	0x0323D590 BL 0x1C16F10
	0x0323D594 MOVZ W1, 0x1

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X20, 0x11A0000
	014 Move W8, [X20+1033]
	015 Move X22, X3
	016 Move W23, W2
	017 Move X28, X1
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {31}
	023 Move X0, 0xEE6000
	024 Move X0, [X0+2120]
	025 Call 0x1C17CF4
	026 Move X0, 0xEE6000
	027 Move X0, [X0+2088]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+1033], W8
	031 Compare X22, 0
	032 JumpIfEqual {40}
	033 Move X8, 0xEE6000
	034 Move X8, [X8+2120]
	035 Move X1, [X8]
	036 Move X8, [X22]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move W25, [X22+48]
	039 Subtract W21, W23, W25
	040 Move W25, W31
	041 Move W21, W23
	042 Add X26, X28, W23
	043 NotImplemented "Instruction CMP not yet implemented."
	044 NotImplemented "Instruction CSET not yet implemented."
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move W29, 0x8000
	047 Move X23, X31
	048 Or W27, W31, 0x80808080
	049 NotImplemented "Instruction MOVK not yet implemented."
	050 Move X20, X28
	051 Move W9, W25
	052 Move W25, [X20]
	053 Move TEMP, X8
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {62}
	057 Add X20, X20, 1
	058 Move TEMP, X25
	059 And TEMP, TEMP, 128
	060 Compare TEMP, 128
	061 JumpIfNotEqual {132}
	062 And W8, W25, 192
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Add X20, X20, 1
	065 Move TEMP, X9
	066 And TEMP, TEMP, 0x800000
	067 Compare TEMP, 0x800000
	068 JumpIfEqual {78}
	069 NotImplemented "Instruction BFM not yet implemented."
	070 Move TEMP, X9
	071 And TEMP, TEMP, 0x400000
	072 Compare TEMP, 0x400000
	073 JumpIfEqual {84}
	074 And W8, W25, 992
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Add W21, W21, W9
	077 Move W25, W9
	078 Move W8, 0x7C00
	079 NotImplemented "Instruction MOVK not yet implemented."
	080 And W8, W9, W8
	081 NotImplemented "Instruction CMP not yet implemented."
	082 NotImplemented "Instruction CSET not yet implemented."
	083 Subtract W21, W21, W8
	084 Move TEMP, X9
	085 And TEMP, TEMP, 0x20000
	086 Compare TEMP, 0x20000
	087 JumpIfEqual {128}
	088 Move X8, 0xEE6000
	089 Move X8, [X8+2088]
	090 Move X0, [X8]
	091 Move W8, [X0+224]
	092 Compare W8, 0
	093 JumpIfNotEqual {95}
	094 Call 0x1C17DFC
	095 And W8, W25, 496
	096 Subtract W8, W8, 16
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Compare X23, 0
	099 JumpIfNotEqual {120}
	100 Compare X22, 0
	101 JumpIfEqual {105}
	102 Move X0, X22
	103 Move X1, X31
	104 Call Decoder.get_FallbackBuffer, X0
	105 Move X0, [X19+48]
	106 Compare X0, 0
	107 JumpIfEqual {335}
	108 Move X8, [X0]
	109 Move X9, [X8+376]
	110 Move X1, [X8+384]
	111 NotImplemented "Instruction BLR not yet implemented."
	112 Move X23, X0
	113 Compare X0, 0
	114 JumpIfEqual {335}
	115 Move X0, X23
	116 Move X1, X28
	117 Move X2, X31
	118 Move X3, X31
	119 Call DecoderFallbackBuffer.InternalInitialize, X0, X1, X2
	120 Move X0, X19
	121 Move X1, X20
	122 Move W2, W25
	123 Move X3, X23
	124 Call UTF8Encoding.FallbackInvalidByteSequence, X0, X1, X2, X3
	125 Move W25, W31
	126 Add W21, W0, W21
	127 Move W25, W31
	128 NotImplemented "Instruction CMP not yet implemented."
	129 NotImplemented "Instruction CSET not yet implemented."
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Move W9, W25
	132 Move X8, 0xEE6000
	133 Move X8, [X8+2088]
	134 Move X24, X20
	135 Move X0, [X8]
	136 Move W8, [X0+224]
	137 Compare W8, 0
	138 JumpIfNotEqual {140}
	139 Call 0x1C17DFC
	140 Subtract X8, X26, X24
	141 NotImplemented "Instruction CMP not yet implemented."
	142 Add X8, X24, W8
	143 Subtract X25, X8, 7
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Move X20, X24
	146 NotImplemented "Instruction INVALID not yet implemented."
	147 Move TEMP, X8
	148 And TEMP, TEMP, -2147483648
	149 Compare TEMP, -2147483648
	150 JumpIfEqual {186}
	151 Move TEMP, X20
	152 And TEMP, TEMP, 1
	153 Compare TEMP, 1
	154 JumpIfNotEqual {161}
	155 NotImplemented "Instruction INVALID not yet implemented."
	156 Add X20, X24, 2
	157 Move TEMP, X8
	158 And TEMP, TEMP, -2147483648
	159 Compare TEMP, -2147483648
	160 JumpIfEqual {186}
	161 Move TEMP, X20
	162 And TEMP, TEMP, 2
	163 Compare TEMP, 2
	164 JumpIfNotEqual {168}
	165 NotImplemented "Instruction LDRH not yet implemented."
	166 And W31, W8, 0x80808080
	167 Add X20, X20, 2
	168 NotImplemented "Instruction CMP not yet implemented."
	169 Move W8, [X20]
	170 Move W9, [X20+4]
	171 Or W9, W9, W8
	172 And W31, W9, W27
	173 Add X8, X20, 8
	174 NotImplemented "Instruction CMP not yet implemented."
	175 Move W8, [X20+8]
	176 Move W9, [X20+12]
	177 Or W9, W9, W8
	178 And W31, W9, W27
	179 Add X20, X20, 16
	180 Add X20, X20, 8
	181 And W8, W8, 255
	182 And W8, W8, 255
	183 NotImplemented "Instruction CMP not yet implemented."
	184 Add X24, X20, 1
	185 Move X20, X24
	186 And W8, W8, 255
	187 Move X24, X20
	188 Move W9, [X24+1]
	189 Move TEMP, X8
	190 And TEMP, TEMP, 64
	191 Compare TEMP, 64
	192 JumpIfNotEqual {279}
	193 And W10, W9, 192
	194 NotImplemented "Instruction CMP not yet implemented."
	195 Move TEMP, X8
	196 And TEMP, TEMP, 32
	197 Compare TEMP, 32
	198 JumpIfEqual {200}
	199 And W31, W8, 30
	200 Move W24, [X24]
	201 And W29, W9, 63
	202 NotImplemented "Instruction BFM not yet implemented."
	203 Move TEMP, X8
	204 And TEMP, TEMP, 16
	205 Compare TEMP, 16
	206 JumpIfEqual {214}
	207 And W8, W29, 992
	208 Move W29, 0x8000
	209 NotImplemented "Instruction MOVK not yet implemented."
	210 NotImplemented "Instruction CMP not yet implemented."
	211 And W8, W24, 192
	212 NotImplemented "Instruction CMP not yet implemented."
	213 Add X24, X20, 2
	214 Move X8, 0xEE6000
	215 Move X8, [X8+2088]
	216 Move X0, [X8]
	217 Move W8, [X0+224]
	218 Compare W8, 0
	219 JumpIfNotEqual {221}
	220 Call 0x1C17DFC
	221 Move W8, W29
	222 ShiftRight W8, 4
	223 And W8, W8, 0x7FFFFFFF
	224 Subtract W8, W8, 1
	225 Move W29, 0x8000
	226 NotImplemented "Instruction CMP not yet implemented."
	227 NotImplemented "Instruction MOVK not yet implemented."
	228 And W8, W24, 192
	229 NotImplemented "Instruction CMP not yet implemented."
	230 Move W8, [X20+2]
	231 And W8, W8, 192
	232 NotImplemented "Instruction CMP not yet implemented."
	233 Add X24, X20, 3
	234 Subtract W21, W21, 1
	235 Subtract W21, W21, 1
	236 NotImplemented "Instruction CMP not yet implemented."
	237 NotImplemented "Instruction INVALID not yet implemented."
	238 Move TEMP, X25
	239 And TEMP, TEMP, -2147483648
	240 Compare TEMP, -2147483648
	241 JumpIfNotEqual {236}
	242 Move X20, X24
	243 Move TEMP, X25
	244 And TEMP, TEMP, 128
	245 Compare TEMP, 128
	246 JumpIfNotEqual {132}
	247 And W25, W25, 255
	248 Subtract W8, W21, 1
	249 Move TEMP, X25
	250 And TEMP, TEMP, 64
	251 Compare TEMP, 64
	252 JumpIfEqual {256}
	253 Move W21, W8
	254 Move W25, W31
	255 Move X20, X8
	256 Move TEMP, X25
	257 And TEMP, TEMP, 32
	258 Compare TEMP, 32
	259 JumpIfEqual {264}
	260 And W9, W25, 31
	261 NotImplemented "Instruction CMP not yet implemented."
	262 Or W25, W9, 0x800000
	263 Move W21, W8
	264 And W9, W25, 15
	265 Move TEMP, X25
	266 And TEMP, TEMP, 16
	267 Compare TEMP, 16
	268 JumpIfEqual {271}
	269 Or W25, W9, W29
	270 Or W25, W9, 192
	271 NotImplemented "Instruction CMP not yet implemented."
	272 Move W8, 3072
	273 NotImplemented "Instruction MOVK not yet implemented."
	274 Or W25, W9, W8
	275 Subtract W21, W21, 2
	276 Move W25, W31
	277 Move X20, X24
	278 Or W25, W25, 240
	279 Move W25, W31
	280 Subtract X20, X20, 1
	281 Move X23, X31
	282 Move X20, X28
	283 Move TEMP, X8
	284 And TEMP, TEMP, 1
	285 Compare TEMP, 1
	286 JumpIfEqual {321}
	287 Add W21, W21, W25
	288 Compare X22, 0
	289 JumpIfEqual {298}
	290 Move W8, [X22+40]
	291 Compare W8, 0
	292 JumpIfEqual {321}
	293 Compare X23, 0
	294 JumpIfNotEqual {315}
	295 Move X0, X22
	296 Move X1, X31
	297 Call Decoder.get_FallbackBuffer, X0
	298 Compare X23, 0
	299 JumpIfNotEqual {315}
	300 Move X0, [X19+48]
	301 Compare X0, 0
	302 JumpIfEqual {335}
	303 Move X8, [X0]
	304 Move X9, [X8+376]
	305 Move X1, [X8+384]
	306 NotImplemented "Instruction BLR not yet implemented."
	307 Move X23, X0
	308 Compare X0, 0
	309 JumpIfEqual {335}
	310 Move X0, X23
	311 Move X1, X28
	312 Move X2, X31
	313 Move X3, X31
	314 Call DecoderFallbackBuffer.InternalInitialize, X0, X1, X2
	315 Move X0, X19
	316 Move X1, X20
	317 Move W2, W25
	318 Move X3, X23
	319 Call UTF8Encoding.FallbackInvalidByteSequence, X0, X1, X2, X3
	320 Add W21, W0, W21
	321 Move W0, W21
	322 Move X20, [X31+80]
	323 Move X19, [X31+88]
	324 Move X22, [X31+64]
	325 Move X21, [X31+72]
	326 Move X24, [X31+48]
	327 Move X23, [X31+56]
	328 Move X26, [X31+32]
	329 Move X25, [X31+40]
	330 Move X28, [X31+16]
	331 Move X27, [X31+24]
	332 Move X29, [X31+96]
	333 Move X30, [X31+104]
	334 Return X0
	335 Call 0x1C17F20
	336 Move X0, X22
	337 Call 0x1C181E0

Method: System.Int32 GetChars(System.Byte* bytes, System.Int32 byteCount, System.Char* chars, System.Int32 charCount, System.Text.DecoderNLS baseDecoder)

Disassembly:
	0x0323D5D8 LDP X20, X19, [X31 + 0x20]
	0x0323D5DC LDP X30, X23, [X31], #0x30
	0x0323D5E0 RET
	0x0323D5E4 STR X30, [X31 - 0x30]!
	0x0323D5E8 STP X22, X21, [X31 + 0x10]
	0x0323D5EC STP X20, X19, [X31 + 0x20]
	0x0323D5F0 ADRP X21, 0x119F000
	0x0323D5F4 ADRP X22, 0xEE5000
	0x0323D5F8 LDRB W8, [X21 + 0x412]
	0x0323D5FC LDR X22, [X22 + 0x828]
	0x0323D600 MOV W20, W1
	0x0323D604 MOV X19, X0
	0x0323D608 TBNZ X8, 0x0, 0x323D620
	0x0323D60C ADRP X0, 0xEE5000
	0x0323D610 LDR X0, [X0 + 0x828]
	0x0323D614 BL 0x1C16CF4
	0x0323D618 MOVZ W8, 0x1
	0x0323D61C STRB W8, [X21 + 0x412]
	0x0323D620 LDR X0, [X22]
	0x0323D624 LDR W8, [X0 + 0xE0]
	0x0323D628 CBNZ W8, 0x323D630
	0x0323D62C BL 0x1C16DFC
	0x0323D630 MOVZ W1, 0xFDE9
	0x0323D634 MOV X0, X19
	0x0323D638 MOV X2, X31
	0x0323D63C AND W20, W20, 0x1
	0x0323D640 BL 0x3241B10
	0x0323D644 STRB W20, [X19 + 0x38]
	0x0323D648 STRB W31, [X19 + 0x39]
	0x0323D64C LDP X20, X19, [X31 + 0x20]
	0x0323D650 LDP X22, X21, [X31 + 0x10]
	0x0323D654 LDR X30, [X31], #0x30
	0x0323D658 RET
	0x0323D65C STR X30, [X31 - 0x20]!
	0x0323D660 STP X20, X19, [X31 + 0x10]
	0x0323D664 ADRP X20, 0x119F000
	0x0323D668 LDRB W8, [X20 + 0x413]
	0x0323D66C MOV X19, X0
	0x0323D670 TBNZ X8, 0x0, 0x323D6A0
	0x0323D674 ADRP X0, 0xEBE000
	0x0323D678 LDR X0, [X0 + 0xCC8]
	0x0323D67C BL 0x1C16CF4
	0x0323D680 ADRP X0, 0xEE5000
	0x0323D684 LDR X0, [X0 + 0x6F0]
	0x0323D688 BL 0x1C16CF4
	0x0323D68C ADRP X0, 0xEE5000
	0x0323D690 LDR X0, [X0 + 0x828]
	0x0323D694 BL 0x1C16CF4
	0x0323D698 MOVZ W8, 0x1
	0x0323D69C STRB W8, [X20 + 0x413]
	0x0323D6A0 ADRP X20, 0xEE5000
	0x0323D6A4 LDRB W8, [X19 + 0x38]
	0x0323D6A8 LDR X20, [X20 + 0x6F0]
	0x0323D6AC CBZ W8, 0x323D6D8
	0x0323D6B0 ADRP X19, 0xEE5000
	0x0323D6B4 LDR X19, [X19 + 0x828]
	0x0323D6B8 LDR X0, [X19]
	0x0323D6BC LDR W8, [X0 + 0xE0]
	0x0323D6C0 CBNZ W8, 0x323D6CC
	0x0323D6C4 BL 0x1C16DFC
	0x0323D6C8 LDR X0, [X19]
	0x0323D6CC LDR X8, [X0 + 0xB8]
	0x0323D6D0 ADD X8, X8, 0x8
	0x0323D6D4 B 0x323D72C
	0x0323D6D8 ADRP X8, 0xEBE000
	0x0323D6DC LDR X8, [X8 + 0xCC8]
	0x0323D6E0 LDR X19, [X8]
	0x0323D6E4 LDR X8, [X19 + 0x38]
	0x0323D6E8 CBNZ X8, 0x323D6F8
	0x0323D6EC MOV X0, X19
	0x0323D6F0 BL 0x1C5C6E0
	0x0323D6F4 LDR X8, [X19 + 0x38]
	0x0323D6F8 LDR X0, [X8 + 0x10]
	0x0323D6FC LDRB W8, [X0 + 0x135]
	0x0323D700 TBNZ X8, 0x0, 0x323D708
	0x0323D704 BL 0x1C5C684
	0x0323D708 LDR W8, [X0 + 0xE0]
	0x0323D70C CBNZ W8, 0x323D714
	0x0323D710 BL 0x1C16DFC
	0x0323D714 LDR X8, [X19 + 0x38]
	0x0323D718 LDR X0, [X8 + 0x10]
	0x0323D71C LDRB W8, [X0 + 0x135]
	0x0323D720 TBNZ X8, 0x0, 0x323D728
	0x0323D724 BL 0x1C5C684
	0x0323D728 LDR X8, [X0 + 0xB8]
	0x0323D72C LDR X0, [X8]
	0x0323D730 LDR X1, [X20]
	0x0323D734 LDP X20, X19, [X31 + 0x10]
	0x0323D738 LDR X30, [X31], #0x20
	0x0323D73C B 0x25BEADC
	0x0323D740 MOV X8, X0
	0x0323D744 LDR X0, [X0 + 0x18]
	0x0323D748 STR W31, [X8 + 0x38]
	0x0323D74C CBZ X0, 0x323D75C
	0x0323D750 LDR X8, [X0]
	0x0323D754 LDP X2, X1, [X8 + 0x1C8]
	0x0323D758 BR X2
	0x0323D75C RET
	0x0323D760 MOV X8, X0
	0x0323D764 LDR X0, [X0 + 0x18]
	0x0323D768 STR W31, [X8 + 0x30]
	0x0323D76C CBZ X0, 0x323D77C
	0x0323D770 LDR X8, [X0]
	0x0323D774 LDP X2, X1, [X8 + 0x198]
	0x0323D778 BR X2
	0x0323D77C RET
	0x0323D780 LDR W8, [X0 + 0x30]
	0x0323D784 CMP W8, 0x0
	0x0323D788 CSET W0, NE
	0x0323D78C RET
	0x0323D790 STR X30, [X31 - 0x20]!
	0x0323D794 STP X20, X19, [X31 + 0x10]
	0x0323D798 MOVZ W20, 0x1
	0x0323D79C MOVZ W1, 0x4B0
	0x0323D7A0 MOV X2, X31
	0x0323D7A4 MOV X19, X0
	0x0323D7A8 STRB W20, [X0 + 0x3A]
	0x0323D7AC BL 0x3241B10
	0x0323D7B0 STRH W31, [X19 + 0x38]
	0x0323D7B4 STRB W20, [X19 + 0x3A]
	0x0323D7B8 LDP X20, X19, [X31 + 0x10]
	0x0323D7BC LDR X30, [X31], #0x20
	0x0323D7C0 RET
	0x0323D7C4 STP X30, X21, [X31 - 0x20]!
	0x0323D7C8 STP X20, X19, [X31 + 0x10]
	0x0323D7CC ANDS W21, W1, 0x1
	0x0323D7D0 MOVZ W9, 0x4B0
	0x0323D7D4 AND W20, W2, 0x1
	0x0323D7D8 MOVZ W8, 0x1
	0x0323D7DC CINC W1, W9, NE
	0x0323D7E0 MOV X2, X31
	0x0323D7E4 MOV X19, X0
	0x0323D7E8 STRB W8, [X0 + 0x3A]
	0x0323D7EC BL 0x3241B10
	0x0323D7F0 STRB W31, [X19 + 0x38]
	0x0323D7F4 STRB W21, [X19 + 0x39]
	0x0323D7F8 STRB W20, [X19 + 0x3A]
	0x0323D7FC LDP X20, X19, [X31 + 0x10]
	0x0323D800 LDP X30, X21, [X31], #0x20
	0x0323D804 RET
	0x0323D808 STP X30, X23, [X31 - 0x30]!
	0x0323D80C STP X22, X21, [X31 + 0x10]
	0x0323D810 STP X20, X19, [X31 + 0x20]
	0x0323D814 ANDS W23, W1, 0x1
	0x0323D818 MOVZ W9, 0x4B0
	0x0323D81C AND W22, W2, 0x1
	0x0323D820 MOVZ W8, 0x1
	0x0323D824 CINC W1, W9, NE
	0x0323D828 MOV X2, X31
	0x0323D82C MOV W20, W3
	0x0323D830 MOV X19, X0
	0x0323D834 AND W21, W3, 0x1
	0x0323D838 STRB W8, [X0 + 0x3A]
	0x0323D83C BL 0x3241B10
	0x0323D840 STRB W21, [X19 + 0x38]
	0x0323D844 STRB W23, [X19 + 0x39]
	0x0323D848 STRB W22, [X19 + 0x3A]
	0x0323D84C TBZ X20, 0x0, 0x323D86C
	0x0323D850 LDR X8, [X19]
	0x0323D854 MOV X0, X19
	0x0323D858 LDP X20, X19, [X31 + 0x20]
	0x0323D85C LDP X22, X21, [X31 + 0x10]
	0x0323D860 LDP X2, X1, [X8 + 0x188]
	0x0323D864 LDP X30, X23, [X31], #0x30
	0x0323D868 BR X2
	0x0323D86C LDP X20, X19, [X31 + 0x20]
	0x0323D870 LDP X22, X21, [X31 + 0x10]
	0x0323D874 LDP X30, X23, [X31], #0x30
	0x0323D878 RET
	0x0323D87C STP X30, X21, [X31 - 0x20]!
	0x0323D880 STP X20, X19, [X31 + 0x10]
	0x0323D884 ADRP X20, 0x119F000
	0x0323D888 LDRB W8, [X20 + 0x414]
	0x0323D88C MOV X19, X0
	0x0323D890 TBNZ X8, 0x0, 0x323D8C0
	0x0323D894 ADRP X0, 0xEE5000
	0x0323D898 LDR X0, [X0 + 0x648]
	0x0323D89C BL 0x1C16CF4
	0x0323D8A0 ADRP X0, 0xEE5000
	0x0323D8A4 LDR X0, [X0 + 0x368]
	0x0323D8A8 BL 0x1C16CF4
	0x0323D8AC ADRP X0, 0xEE5000
	0x0323D8B0 LDR X0, [X0 + 0x650]
	0x0323D8B4 BL 0x1C16CF4
	0x0323D8B8 MOVZ W8, 0x1
	0x0323D8BC STRB W8, [X20 + 0x414]
	0x0323D8C0 LDRB W8, [X19 + 0x38]
	0x0323D8C4 CBZ W8, 0x323D8E4
	0x0323D8C8 MOV X0, X31
	0x0323D8CC BL 0x33FFCD0
	0x0323D8D0 STR X0, [X19 + 0x28]
	0x0323D8D4 MOV X0, X31
	0x0323D8D8 BL 0x33FD9EC
	0x0323D8DC STR X0, [X19 + 0x30]
	0x0323D8E0 B 0x323D930
	0x0323D8E4 ADRP X8, 0xEE5000
	0x0323D8E8 LDR X8, [X8 + 0x368]
	0x0323D8EC LDR X0, [X8]
	0x0323D8F0 BL 0x1C16F10
	0x0323D8F4 ADRP X21, 0xEE5000
	0x0323D8F8 LDR X21, [X21 + 0x650]
	0x0323D8FC MOV X20, X0
	0x0323D900 LDR X1, [X21]
	0x0323D904 BL 0x322F374
	0x0323D908 STR X20, [X19 + 0x28]
	0x0323D90C ADRP X8, 0xEE5000
	0x0323D910 LDR X8, [X8 + 0x648]
	0x0323D914 LDR X0, [X8]
	0x0323D918 BL 0x1C16F10
	0x0323D91C LDR X1, [X21]
	0x0323D920 MOV X2, X31
	0x0323D924 MOV X20, X0
	0x0323D928 BL 0x33FE644
	0x0323D92C STR X20, [X19 + 0x30]
	0x0323D930 LDP X20, X19, [X31 + 0x10]
	0x0323D934 LDP X30, X21, [X31], #0x20
	0x0323D938 RET
	0x0323D93C STR X30, [X31 - 0x20]!
	0x0323D940 STP X20, X19, [X31 + 0x10]
	0x0323D944 CBZ X1, 0x323D9A4
	0x0323D948 TBNZ X3, 0x1F, 0x323D9EC
	0x0323D94C TBNZ X2, 0x1F, 0x323D9EC
	0x0323D950 LDR W8, [X1 + 0x18]
	0x0323D954 SUB W9, W8, W2
	0x0323D958 CMP W9, W3
	0x0323D95C B.LT 0x323DA58
	0x0323D960 CBZ W3, 0x323D994
	0x0323D964 LDR X9, [X0]
	0x0323D968 LDP X20, X19, [X31 + 0x10]
	0x0323D96C ADD X10, X1, 0x20
	0x0323D970 CMP W8, 0x0
	0x0323D974 LDR X5, [X9 + 0x228]
	0x0323D978 LDR X4, [X9 + 0x230]
	0x0323D97C CSEL X8, X31, X10, EQ
	0x0323D980 ADD X1, X8, W2, 0x1, SXTW
	0x0323D984 MOV W2, W3
	0x0323D988 MOV X3, X31
	0x0323D98C LDR X30, [X31], #0x20
	0x0323D990 BR X5
	0x0323D994 LDP X20, X19, [X31 + 0x10]
	0x0323D998 MOV W0, W31
	0x0323D99C LDR X30, [X31], #0x20
	0x0323D9A0 RET
	0x0323D9A4 ADRP X0, 0xEBB000
	0x0323D9A8 LDR X0, [X0 + 0x528]
	0x0323D9AC BL 0x1C16D08
	0x0323D9B0 BL 0x1C16F10
	0x0323D9B4 MOV X19, X0
	0x0323D9B8 ADRP X0, 0xEE5000
	0x0323D9BC LDR X0, [X0 + 0x2D8]
	0x0323D9C0 BL 0x1C16D08
	0x0323D9C4 MOV X20, X0
	0x0323D9C8 ADRP X0, 0xEE5000
	0x0323D9CC LDR X0, [X0 + 0x2E0]
	0x0323D9D0 BL 0x1C16D08
	0x0323D9D4 MOV X2, X0
	0x0323D9D8 MOV X0, X19
	0x0323D9DC MOV X1, X20
	0x0323D9E0 MOV X3, X31
	0x0323D9E4 BL 0x3315F7C
	0x0323D9E8 B 0x323DA9C
	0x0323D9EC ADRP X8, 0xEDE000
	0x0323D9F0 ADRP X9, 0xEC1000
	0x0323D9F4 LDR X8, [X8 + 0x648]
	0x0323D9F8 LDR X9, [X9 + 0x130]
	0x0323D9FC CMP W2, 0x0
	0x0323DA00 CSEL X0, X9, X8, LT
	0x0323DA04 BL 0x1C16D08
	0x0323DA08 MOV X19, X0
	0x0323DA0C ADRP X0, 0xEBE000
	0x0323DA10 LDR X0, [X0 + 0x760]
	0x0323DA14 BL 0x1C16D08
	0x0323DA18 BL 0x1C16F10
	0x0323DA1C MOV X20, X0
	0x0323DA20 ADRP X0, 0xEDE000
	0x0323DA24 LDR X0, [X0 + 0x670]
	0x0323DA28 BL 0x1C16D08
	0x0323DA2C MOV X2, X0
	0x0323DA30 MOV X0, X20
	0x0323DA34 MOV X1, X19
	0x0323DA38 MOV X3, X31
	0x0323DA3C BL 0x3311888
	0x0323DA40 ADRP X0, 0xEE5000
	0x0323DA44 LDR X0, [X0 + 0x878]
	0x0323DA48 BL 0x1C16D08
	0x0323DA4C MOV X1, X0
	0x0323DA50 MOV X0, X20
	0x0323DA54 BL 0x1C16DEC
	0x0323DA58 ADRP X0, 0xEBE000
	0x0323DA5C LDR X0, [X0 + 0x760]
	0x0323DA60 BL 0x1C16D08
	0x0323DA64 BL 0x1C16F10
	0x0323DA68 MOV X19, X0
	0x0323DA6C ADRP X0, 0xEE5000
	0x0323DA70 LDR X0, [X0 + 0x2D8]
	0x0323DA74 BL 0x1C16D08
	0x0323DA78 MOV X20, X0
	0x0323DA7C ADRP X0, 0xEE5000
	0x0323DA80 LDR X0, [X0 + 0xE0]
	0x0323DA84 BL 0x1C16D08
	0x0323DA88 MOV X2, X0
	0x0323DA8C MOV X0, X19
	0x0323DA90 MOV X1, X20
	0x0323DA94 MOV X3, X31
	0x0323DA98 BL 0x3311888
	0x0323DA9C ADRP X0, 0xEE5000
	0x0323DAA0 LDR X0, [X0 + 0x878]
	0x0323DAA4 BL 0x1C16D08
	0x0323DAA8 MOV X1, X0
	0x0323DAAC MOV X0, X19
	0x0323DAB0 BL 0x1C16DEC
	0x0323DAB4 STR X30, [X31 - 0x20]!
	0x0323DAB8 STP X20, X19, [X31 + 0x10]
	0x0323DABC CBZ X1, 0x323DAF8
	0x0323DAC0 MOV X20, X0
	0x0323DAC4 MOV X0, X31
	0x0323DAC8 MOV X19, X1
	0x0323DACC BL 0x32C1424
	0x0323DAD0 LDR X8, [X20]
	0x0323DAD4 LDR W2, [X19 + 0x10]
	0x0323DAD8 ADD X1, X19, W0, SXTW
	0x0323DADC MOV X0, X20
	0x0323DAE0 LDR X5, [X8 + 0x228]
	0x0323DAE4 LDR X4, [X8 + 0x230]
	0x0323DAE8 LDP X20, X19, [X31 + 0x10]
	0x0323DAEC MOV X3, X31
	0x0323DAF0 LDR X30, [X31], #0x20
	0x0323DAF4 BR X5
	0x0323DAF8 ADRP X0, 0xEBB000
	0x0323DAFC LDR X0, [X0 + 0x528]
	0x0323DB00 BL 0x1C16D08
	0x0323DB04 BL 0x1C16F10
	0x0323DB08 MOV X19, X0
	0x0323DB0C ADRP X0, 0xEDF000
	0x0323DB10 LDR X0, [X0 + 0xCC0]
	0x0323DB14 BL 0x1C16D08
	0x0323DB18 MOV X1, X0
	0x0323DB1C MOV X0, X19
	0x0323DB20 MOV X2, X31
	0x0323DB24 BL 0x330E100
	0x0323DB28 ADRP X0, 0xEE5000
	0x0323DB2C LDR X0, [X0 + 0x880]
	0x0323DB30 BL 0x1C16D08
	0x0323DB34 MOV X1, X0
	0x0323DB38 MOV X0, X19
	0x0323DB3C BL 0x1C16DEC
	0x0323DB40 STR X30, [X31 - 0x20]!
	0x0323DB44 STP X20, X19, [X31 + 0x10]
	0x0323DB48 CBZ X1, 0x323DB6C
	0x0323DB4C TBNZ X2, 0x1F, 0x323DBB4
	0x0323DB50 LDR X8, [X0]
	0x0323DB54 LDP X20, X19, [X31 + 0x10]
	0x0323DB58 MOV X3, X31
	0x0323DB5C LDR X5, [X8 + 0x228]
	0x0323DB60 LDR X4, [X8 + 0x230]
	0x0323DB64 LDR X30, [X31], #0x20
	0x0323DB68 BR X5
	0x0323DB6C ADRP X0, 0xEBB000
	0x0323DB70 LDR X0, [X0 + 0x528]
	0x0323DB74 BL 0x1C16D08
	0x0323DB78 BL 0x1C16F10
	0x0323DB7C MOV X19, X0
	0x0323DB80 ADRP X0, 0xEE5000
	0x0323DB84 LDR X0, [X0 + 0x2D8]
	0x0323DB88 BL 0x1C16D08
	0x0323DB8C MOV X20, X0
	0x0323DB90 ADRP X0, 0xEE5000
	0x0323DB94 LDR X0, [X0 + 0x2E0]
	0x0323DB98 BL 0x1C16D08
	0x0323DB9C MOV X2, X0
	0x0323DBA0 MOV X0, X19
	0x0323DBA4 MOV X1, X20
	0x0323DBA8 MOV X3, X31
	0x0323DBAC BL 0x3315F7C
	0x0323DBB0 B 0x323DBF8
	0x0323DBB4 ADRP X0, 0xEBE000
	0x0323DBB8 LDR X0, [X0 + 0x760]
	0x0323DBBC BL 0x1C16D08
	0x0323DBC0 BL 0x1C16F10
	0x0323DBC4 MOV X19, X0
	0x0323DBC8 ADRP X0, 0xEDE000
	0x0323DBCC LDR X0, [X0 + 0x648]
	0x0323DBD0 BL 0x1C16D08
	0x0323DBD4 MOV X20, X0
	0x0323DBD8 ADRP X0, 0xEDE000
	0x0323DBDC LDR X0, [X0 + 0x670]
	0x0323DBE0 BL 0x1C16D08
	0x0323DBE4 MOV X2, X0
	0x0323DBE8 MOV X0, X19
	0x0323DBEC MOV X1, X20
	0x0323DBF0 MOV X3, X31
	0x0323DBF4 BL 0x3311888
	0x0323DBF8 ADRP X0, 0xEE5000
	0x0323DBFC LDR X0, [X0 + 0x888]
	0x0323DC00 BL 0x1C16D08
	0x0323DC04 MOV X1, X0
	0x0323DC08 MOV X0, X19
	0x0323DC0C BL 0x1C16DEC
	0x0323DC10 STP X30, X27, [X31 - 0x50]!
	0x0323DC14 STP X26, X25, [X31 + 0x10]
	0x0323DC18 STP X24, X23, [X31 + 0x20]
	0x0323DC1C STP X22, X21, [X31 + 0x30]
	0x0323DC20 STP X20, X19, [X31 + 0x40]
	0x0323DC24 ADRP X25, 0x119F000
	0x0323DC28 LDRB W8, [X25 + 0x415]
	0x0323DC2C MOV W19, W5
	0x0323DC30 MOV X24, X4
	0x0323DC34 MOV W20, W3
	0x0323DC38 MOV W21, W2
	0x0323DC3C MOV X22, X1
	0x0323DC40 MOV X23, X0
	0x0323DC44 TBNZ X8, 0x0, 0x323DC68
	0x0323DC48 ADRP X0, 0xEE4000
	0x0323DC4C LDR X0, [X0 + 0x830]
	0x0323DC50 BL 0x1C16CF4
	0x0323DC54 ADRP X0, 0xEE5000
	0x0323DC58 LDR X0, [X0 + 0x2F8]
	0x0323DC5C BL 0x1C16CF4
	0x0323DC60 MOVZ W8, 0x1
	0x0323DC64 STRB W8, [X25 + 0x415]
	0x0323DC68 CBZ X22, 0x323DD38
	0x0323DC6C CBZ X24, 0x323DD38
	0x0323DC70 TBNZ X20, 0x1F, 0x323DD90
	0x0323DC74 TBNZ X21, 0x1F, 0x323DD90

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], X29
	003 Move [X31+40], X30
	004 Move [X31+48], X28
	005 Move [X31+56], X27
	006 Move [X31+64], X26
	007 Move [X31+72], X25
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X21, 0x11A0000
	015 Move W8, [X21+1034]
	016 Move X20, X5
	017 Move W23, W4
	018 Move X28, X3
	019 Move W24, W2
	020 Move X27, X1
	021 Move X19, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {34}
	026 Move X0, 0xEE6000
	027 Move X0, [X0+2120]
	028 Call 0x1C17CF4
	029 Move X0, 0xEE6000
	030 Move X0, [X0+2088]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X21+1034], W8
	034 Move X22, 0xEE6000
	035 Move X22, [X22+2120]
	036 Move [X31+16], X31
	037 Move [X31+24], X31
	038 Compare X20, 0
	039 JumpIfEqual {44}
	040 Move X1, [X22]
	041 Move X8, [X20]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move W25, [X20+48]
	044 Move W25, W31
	045 Add X29, X27, W24
	046 NotImplemented "Instruction CMP not yet implemented."
	047 NotImplemented "Instruction CSET not yet implemented."
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Add X23, X28, W23
	050 Move X24, X31
	051 Move X26, X27
	052 Move [X31+8], X28
	053 Move W9, W25
	054 Move W10, [X26]
	055 Move TEMP, X8
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {76}
	059 Add X26, X26, 1
	060 And W25, W10, 255
	061 Move TEMP, X10
	062 And TEMP, TEMP, 128
	063 Compare TEMP, 128
	064 JumpIfNotEqual {119}
	065 Move TEMP, X25
	066 And TEMP, TEMP, 64
	067 Compare TEMP, 64
	068 JumpIfNotEqual {95}
	069 Move TEMP, X25
	070 And TEMP, TEMP, 32
	071 Compare TEMP, 32
	072 JumpIfEqual {362}
	073 And W8, W25, 31
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Or W25, W8, 0x800000
	076 And W8, W10, 192
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move W8, W9
	079 ShiftRight W8, 26
	080 And W8, W8, 0x1FFFFFF
	081 Move W25, W8
	082 Add X26, X26, 1
	083 NotImplemented "Instruction BFM not yet implemented."
	084 Move TEMP, X9
	085 And TEMP, TEMP, 0x800000
	086 Compare TEMP, 0x800000
	087 JumpIfEqual {102}
	088 Move TEMP, X9
	089 And TEMP, TEMP, 0x400000
	090 Compare TEMP, 0x400000
	091 JumpIfEqual {314}
	092 And W8, W25, 992
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move W25, W9
	095 Compare X24, 0
	096 JumpIfNotEqual {343}
	097 Compare X20, 0
	098 JumpIfEqual {328}
	099 Move X0, X20
	100 Move X1, X31
	101 Call Decoder.get_FallbackBuffer, X0
	102 Move W10, 0x101F0000
	103 And W8, W8, W10
	104 Move W10, 1
	105 NotImplemented "Instruction MOVK not yet implemented."
	106 NotImplemented "Instruction CMP not yet implemented."
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move W8, W9
	109 ShiftRight W8, 4
	110 And W8, W8, 0x3FFF
	111 Move W9, 0xDC00
	112 Move TEMP, 0x283F
	113 Not TEMP
	114 Move W10, TEMP
	115 Add W8, W8, W10
	116 NotImplemented "Instruction BFM not yet implemented."
	117 NotImplemented "Instruction STRH not yet implemented."
	118 Move W25, W9
	119 Move X21, X28
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move X28, X21
	122 NotImplemented "Instruction STRH not yet implemented."
	123 Move X8, 0xEE6000
	124 Move X8, [X8+2088]
	125 Move X0, [X8]
	126 Move W8, [X0+224]
	127 Compare W8, 0
	128 JumpIfNotEqual {130}
	129 Call 0x1C17DFC
	130 Subtract W9, W23, W28
	131 Subtract W8, W29, W26
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Move W9, W9
	134 ShiftRight W9, 1
	135 And W9, W9, 0x7FFFFFFF
	136 NotImplemented "Instruction CMP not yet implemented."
	137 NotImplemented "Instruction CSEL not yet implemented."
	138 Add X8, X21, W8
	139 Subtract X25, X8, 12
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Move X21, X26
	142 NotImplemented "Instruction INVALID not yet implemented."
	143 And W8, W9, 255
	144 Move TEMP, X9
	145 And TEMP, TEMP, -2147483648
	146 Compare TEMP, -2147483648
	147 JumpIfEqual {226}
	148 Add X9, X28, 2
	149 NotImplemented "Instruction STRH not yet implemented."
	150 Move TEMP, X21
	151 And TEMP, TEMP, 1
	152 Compare TEMP, 1
	153 Invalid "Jump target not found in method."
	154 Move X28, X9
	155 Move TEMP, X21
	156 And TEMP, TEMP, 2
	157 Compare TEMP, 2
	158 JumpIfEqual {172}
	159 NotImplemented "Instruction INVALID not yet implemented."
	160 Add X21, X26, 2
	161 And W8, W10, 255
	162 Move TEMP, X10
	163 And TEMP, TEMP, -2147483648
	164 Compare TEMP, -2147483648
	165 JumpIfEqual {225}
	166 NotImplemented "Instruction STRH not yet implemented."
	167 Add X28, X28, 4
	168 Move TEMP, X21
	169 And TEMP, TEMP, 2
	170 Compare TEMP, 2
	171 JumpIfNotEqual {182}
	172 NotImplemented "Instruction LDRH not yet implemented."
	173 And W31, W8, 0x80808080
	174 And W9, W8, 127
	175 Move W8, W8
	176 ShiftRight W8, 8
	177 And W8, W8, 0x3FFF
	178 Add X21, X21, 2
	179 NotImplemented "Instruction STRH not yet implemented."
	180 NotImplemented "Instruction STRH not yet implemented."
	181 Add X28, X28, 4
	182 NotImplemented "Instruction CMP not yet implemented."
	183 Move W9, [X21]
	184 Move W8, [X21+4]
	185 Or W10, W8, W9
	186 And W31, W10, 0x80808080
	187 And W10, W9, 127
	188 NotImplemented "Instruction STRH not yet implemented."
	189 Move W10, W9
	190 ShiftRight W10, 8
	191 And W10, W10, 0x3FFF
	192 NotImplemented "Instruction STRH not yet implemented."
	193 Move W10, W9
	194 ShiftRight W10, 16
	195 And W10, W10, 0x3FFFFF
	196 Move W9, W9
	197 ShiftRight W9, 24
	198 And W9, W9, 0x3FFFFFFF
	199 NotImplemented "Instruction STRH not yet implemented."
	200 And W10, W8, 127
	201 NotImplemented "Instruction STRH not yet implemented."
	202 Move W9, W8
	203 ShiftRight W9, 8
	204 And W9, W9, 0x3FFF
	205 NotImplemented "Instruction STRH not yet implemented."
	206 Move W10, W8
	207 ShiftRight W10, 16
	208 And W10, W10, 0x3FFFFF
	209 Move W8, W8
	210 ShiftRight W8, 24
	211 And W8, W8, 0x3FFFFFFF
	212 NotImplemented "Instruction STRH not yet implemented."
	213 NotImplemented "Instruction STRH not yet implemented."
	214 NotImplemented "Instruction STRH not yet implemented."
	215 Add X28, X28, 16
	216 NotImplemented "Instruction CMP not yet implemented."
	217 Add X21, X21, 8
	218 And W8, W9, 255
	219 And W8, W8, 255
	220 NotImplemented "Instruction CMP not yet implemented."
	221 Add X26, X21, 1
	222 NotImplemented "Instruction STRH not yet implemented."
	223 NotImplemented "Instruction CMP not yet implemented."
	224 Move X21, X26
	225 Move X28, X9
	226 Move X26, X21
	227 Move W9, [X26+1]
	228 Move TEMP, X8
	229 And TEMP, TEMP, 64
	230 Compare TEMP, 64
	231 JumpIfNotEqual {375}
	232 And W10, W9, 192
	233 NotImplemented "Instruction CMP not yet implemented."
	234 And W22, W9, 63
	235 Move TEMP, X8
	236 And TEMP, TEMP, 32
	237 Compare TEMP, 32
	238 JumpIfEqual {243}
	239 And W8, W8, 31
	240 NotImplemented "Instruction CMP not yet implemented."
	241 NotImplemented "Instruction BFM not yet implemented."
	242 Move W8, W22
	243 Move W10, [X26]
	244 NotImplemented "Instruction BFM not yet implemented."
	245 Move TEMP, X8
	246 And TEMP, TEMP, 16
	247 Compare TEMP, 16
	248 JumpIfEqual {256}
	249 And W8, W22, 992
	250 NotImplemented "Instruction CMP not yet implemented."
	251 And W8, W10, 192
	252 NotImplemented "Instruction CMP not yet implemented."
	253 And W8, W10, 63
	254 Add X26, X21, 2
	255 NotImplemented "Instruction BFM not yet implemented."
	256 Move X8, 0xEE6000
	257 Move X8, [X8+2088]
	258 Move X0, [X8]
	259 Move W8, [X0+224]
	260 Compare W8, 0
	261 JumpIfNotEqual {265}
	262 Move W26, W10
	263 Call 0x1C17DFC
	264 Move W10, W26
	265 Move W8, W22
	266 ShiftRight W8, 4
	267 And W8, W8, 0x7FFFFFFF
	268 Subtract W8, W8, 1
	269 NotImplemented "Instruction CMP not yet implemented."
	270 And W8, W10, 192
	271 NotImplemented "Instruction CMP not yet implemented."
	272 Move W8, [X21+2]
	273 And W9, W8, 192
	274 NotImplemented "Instruction CMP not yet implemented."
	275 Move W9, W10
	276 ShiftRight W9, 26
	277 And W9, W9, 0x1FFFFFF
	278 And W8, W8, 63
	279 And W9, W9, 3072
	280 NotImplemented "Instruction BFM not yet implemented."
	281 NotImplemented "Instruction BFM not yet implemented."
	282 Move TEMP, 0x23FF
	283 Not TEMP
	284 Move W10, TEMP
	285 Or W8, W8, W10
	286 Move W9, W9
	287 ShiftRight W9, 10
	288 And W9, W9, 0xFFFFF
	289 Move TEMP, 0x283F
	290 Not TEMP
	291 Move W10, TEMP
	292 Add W9, W9, W10
	293 Add X26, X21, 3
	294 NotImplemented "Instruction STRH not yet implemented."
	295 Subtract X25, X25, 2
	296 NotImplemented "Instruction STRH not yet implemented."
	297 Move X22, 0xEE6000
	298 Move X22, [X22+2120]
	299 Subtract X25, X25, 2
	300 NotImplemented "Instruction CMP not yet implemented."
	301 NotImplemented "Instruction CMP not yet implemented."
	302 NotImplemented "Instruction CMP not yet implemented."
	303 NotImplemented "Instruction INVALID not yet implemented."
	304 Add X26, X26, 1
	305 Move TEMP, X10
	306 And TEMP, TEMP, -2147483648
	307 Compare TEMP, -2147483648
	308 JumpIfEqual {60}
	309 And W8, W10, 255
	310 NotImplemented "Instruction CMP not yet implemented."
	311 NotImplemented "Instruction STRH not yet implemented."
	312 Move W25, W31
	313 Move X26, X21
	314 Move TEMP, X9
	315 And TEMP, TEMP, 0x20000
	316 Compare TEMP, 0x20000
	317 JumpIfEqual {358}
	318 Move X8, 0xEE6000
	319 Move X8, [X8+2088]
	320 Move X0, [X8]
	321 Move W8, [X0+224]
	322 Compare W8, 0
	323 JumpIfNotEqual {325}
	324 Call 0x1C17DFC
	325 And W8, W25, 496
	326 Subtract W8, W8, 16
	327 NotImplemented "Instruction CMP not yet implemented."
	328 Move X0, [X19+48]
	329 Compare X0, 0
	330 JumpIfEqual {498}
	331 Move X8, [X0]
	332 Move X9, [X8+376]
	333 Move X1, [X8+384]
	334 NotImplemented "Instruction BLR not yet implemented."
	335 Move X24, X0
	336 Compare X0, 0
	337 JumpIfEqual {498}
	338 Move X0, X24
	339 Move X1, X27
	340 Move X2, X23
	341 Move X3, X31
	342 Call DecoderFallbackBuffer.InternalInitialize, X0, X1, X2
	343 Add X1, X31, 24
	344 Add X4, X31, 16
	345 Move X0, X19
	346 Move W2, W25
	347 Move X3, X24
	348 Move [X31+16], X28
	349 Move [X31+24], X26
	350 Call UTF8Encoding.FallbackInvalidByteSequence, X0, X1, X2, X3, X4
	351 Move X28, [X31+16]
	352 Move X26, [X31+24]
	353 Move TEMP, X0
	354 And TEMP, TEMP, 1
	355 Compare TEMP, 1
	356 JumpIfNotEqual {427}
	357 Move W25, W31
	358 NotImplemented "Instruction CMP not yet implemented."
	359 NotImplemented "Instruction CSET not yet implemented."
	360 NotImplemented "Instruction CMP not yet implemented."
	361 Move W9, W25
	362 And W8, W25, 15
	363 Move TEMP, X25
	364 And TEMP, TEMP, 16
	365 Compare TEMP, 16
	366 JumpIfEqual {370}
	367 Move W9, 0x8000
	368 NotImplemented "Instruction MOVK not yet implemented."
	369 Or W25, W8, 192
	370 NotImplemented "Instruction CMP not yet implemented."
	371 Move W9, 3072
	372 NotImplemented "Instruction MOVK not yet implemented."
	373 Or W25, W8, W9
	374 Or W25, W25, 240
	375 Move X22, 0xEE6000
	376 Move X22, [X22+2120]
	377 Move W25, W31
	378 Subtract X26, X21, 1
	379 Move TEMP, X8
	380 And TEMP, TEMP, 1
	381 Compare TEMP, 1
	382 JumpIfEqual {437}
	383 Compare X20, 0
	384 JumpIfEqual {396}
	385 Move W8, [X20+40]
	386 Compare W8, 0
	387 JumpIfEqual {440}
	388 Compare X24, 0
	389 JumpIfNotEqual {413}
	390 Move X0, X20
	391 Move X1, X31
	392 Call Decoder.get_FallbackBuffer, X0
	393 Move X26, X29
	394 Compare X20, 0
	395 JumpIfNotEqual {439}
	396 Compare X24, 0
	397 JumpIfNotEqual {413}
	398 Move X0, [X19+48]
	399 Compare X0, 0
	400 JumpIfEqual {498}
	401 Move X8, [X0]
	402 Move X9, [X8+376]
	403 Move X1, [X8+384]
	404 NotImplemented "Instruction BLR not yet implemented."
	405 Move X24, X0
	406 Compare X0, 0
	407 JumpIfEqual {498}
	408 Move X0, X24
	409 Move X1, X27
	410 Move X2, X23
	411 Move X3, X31
	412 Call DecoderFallbackBuffer.InternalInitialize, X0, X1, X2
	413 Add X1, X31, 24
	414 Add X4, X31, 16
	415 Move X0, X19
	416 Move W2, W25
	417 Move X3, X24
	418 Move [X31+16], X28
	419 Move [X31+24], X26
	420 Call UTF8Encoding.FallbackInvalidByteSequence, X0, X1, X2, X3, X4
	421 Move X28, [X31+16]
	422 Move X26, [X31+24]
	423 Move TEMP, X0
	424 And TEMP, TEMP, 1
	425 Compare TEMP, 1
	426 JumpIfEqual {437}
	427 Move X0, X24
	428 Move X1, X31
	429 Call DecoderFallbackBuffer.InternalReset, X0
	430 Move X8, [X31+8]
	431 Move X0, X19
	432 Move X1, X20
	433 Move X3, X31
	434 NotImplemented "Instruction CMP not yet implemented."
	435 NotImplemented "Instruction CSET not yet implemented."
	436 Call Encoding.ThrowCharsOverflow, X0, X1, X2
	437 Compare X20, 0
	438 JumpIfEqual {446}
	439 Move W25, W31
	440 Move X1, [X22]
	441 Move X8, [X20]
	442 NotImplemented "Instruction CMP not yet implemented."
	443 Subtract W8, W26, W27
	444 Move [X20+44], W8
	445 Move [X20+48], W25
	446 Move X8, 0xEE6000
	447 Move X8, [X8+2088]
	448 Move X19, [X31+8]
	449 Move X0, [X8]
	450 Move W8, [X0+224]
	451 Compare W8, 0
	452 JumpIfNotEqual {454}
	453 Call 0x1C17DFC
	454 Subtract W8, W28, W19
	455 Move X20, [X31+112]
	456 Move X19, [X31+120]
	457 Move X22, [X31+96]
	458 Move X21, [X31+104]
	459 Move X24, [X31+80]
	460 Move X23, [X31+88]
	461 Move X26, [X31+64]
	462 Move X25, [X31+72]
	463 Move X28, [X31+48]
	464 Move X27, [X31+56]
	465 Move X29, [X31+32]
	466 Move X30, [X31+40]
	467 Move W0, W8
	468 ShiftRight W0, 1
	469 And W0, W0, 0x7FFFFFFF
	470 Add X31, X31, 128
	471 Return X0
	472 And W8, W25, 0x1FFFFF
	473 NotImplemented "Instruction CMP not yet implemented."
	474 Move X0, X19
	475 NotImplemented "Instruction CMP not yet implemented."
	476 Move X0, X19
	477 And W9, W25, 0x1FFC00
	478 Move W10, 0xDC00
	479 NotImplemented "Instruction CMP not yet implemented."
	480 Subtract X26, X26, 1
	481 Subtract X21, X21, 2
	482 NotImplemented "Instruction CMP not yet implemented."
	483 Subtract X26, X26, 1
	484 Subtract X26, X26, 1
	485 Subtract X26, X26, 1
	486 Move X8, [X31+8]
	487 Move X1, X20
	488 Move X3, X31
	489 Subtract X26, X26, 1
	490 NotImplemented "Instruction CMP not yet implemented."
	491 NotImplemented "Instruction CSET not yet implemented."
	492 Call Encoding.ThrowCharsOverflow, X0, X1, X2
	493 Move X28, X21
	494 Compare X20, 0
	495 JumpIfNotEqual {439}
	496 Move X0, X20
	497 Call 0x1C181E0
	498 Call 0x1C17F20

Method: System.Boolean FallbackInvalidByteSequence(ref System.Byte* pSrc, System.Int32 ch, System.Text.DecoderFallbackBuffer fallback, ref System.Char* pTarget)

Disassembly:
	0x0323DC78 LDR W8, [X22 + 0x10]
	0x0323DC7C SUB W8, W8, W21
	0x0323DC80 CMP W8, W20
	0x0323DC84 B.LT 0x323DDFC
	0x0323DC88 TBNZ X19, 0x1F, 0x323DD08
	0x0323DC8C LDR W8, [X24 + 0x18]
	0x0323DC90 SUBS W25, W8, W19
	0x0323DC94 B.LT 0x323DD08
	0x0323DC98 ADRP X26, 0xEE5000
	0x0323DC9C ADRP X27, 0xEE4000
	0x0323DCA0 LDR X26, [X26 + 0x2F8]
	0x0323DCA4 LDR X27, [X27 + 0x830]
	0x0323DCA8 MOV X0, X31
	0x0323DCAC BL 0x32C1424
	0x0323DCB0 LDR X1, [X26]
	0x0323DCB4 MOV W26, W0
	0x0323DCB8 MOV X0, X24
	0x0323DCBC BL 0x25FB4C0
	0x0323DCC0 LDR X2, [X27]
	0x0323DCC4 BL 0x2218CF4
	0x0323DCC8 LDR X8, [X23]
	0x0323DCCC ADD X3, X0, W19, UXTW
	0x0323DCD0 MOV X0, X23
	0x0323DCD4 MOV W2, W20
	0x0323DCD8 LDR X7, [X8 + 0x288]
	0x0323DCDC LDR X6, [X8 + 0x290]
	0x0323DCE0 ADD X8, X22, W21, 0x1, SXTW

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X1]
	007 Move X19, X1
	008 Add X1, X31, 8
	009 Move X20, X4
	010 Move X21, X3
	011 Move [X31+8], X8
	012 Call UTF8Encoding.GetBytesUnknown, X0, X1, X2
	013 Compare X21, 0
	014 JumpIfEqual {36}
	015 Move X8, [X21]
	016 Move X2, [X19]
	017 Move X1, X0
	018 Move X0, X21
	019 Move X9, [X8+424]
	020 Move X4, [X8+432]
	021 Move X3, X20
	022 NotImplemented "Instruction BLR not yet implemented."
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {29}
	027 Move X8, [X31+8]
	028 Move [X19], X8
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X30, [X31+16]
	032 Move X21, [X31+24]
	033 And W0, W0, 1
	034 Add X31, X31, 48
	035 Return X0
	036 Call 0x1C17F20

Method: System.Int32 FallbackInvalidByteSequence(System.Byte* pSrc, System.Int32 ch, System.Text.DecoderFallbackBuffer fallback)

Disassembly:
	0x0323D598 MOV X19, X0
	0x0323D59C BL 0x323D5E4
	0x0323D5A0 LDR X8, [X20]
	0x0323D5A4 MOVZ W1, 0x3
	0x0323D5A8 LDR X8, [X8 + 0xB8]
	0x0323D5AC STR X19, [X8]
	0x0323D5B0 LDR X0, [X22]
	0x0323D5B4 BL 0x1C16D6C
	0x0323D5B8 LDR X1, [X21]
	0x0323D5BC MOV X2, X31
	0x0323D5C0 MOV X19, X0
	0x0323D5C4 BL 0x32C5BD8
	0x0323D5C8 LDR X8, [X20]
	0x0323D5CC LDP X22, X21, [X31 + 0x10]
	0x0323D5D0 LDR X8, [X8 + 0xB8]
	0x0323D5D4 STR X19, [X8 + 0x8]

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move [X31+8], X1
	005 Add X1, X31, 8
	006 Move X19, X3
	007 Call UTF8Encoding.GetBytesUnknown, X0, X1, X2
	008 Compare X19, 0
	009 JumpIfEqual {20}
	010 Move X8, [X19]
	011 Move X1, X0
	012 Move X2, [X31+8]
	013 Move X0, X19
	014 Move X4, [X8+440]
	015 Move X3, [X8+448]
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Add X31, X31, 32
	019 CallNoReturn X4
	020 Call 0x1C17F20

Method: System.Byte[] GetBytesUnknown(ref System.Byte* pSrc, System.Int32 ch)

Disassembly:
	0x0323DCE4 ADD X1, X8, W26, SXTW
	0x0323DCE8 MOV W4, W25
	0x0323DCEC LDP X20, X19, [X31 + 0x40]
	0x0323DCF0 LDP X22, X21, [X31 + 0x30]
	0x0323DCF4 LDP X24, X23, [X31 + 0x20]
	0x0323DCF8 LDP X26, X25, [X31 + 0x10]
	0x0323DCFC MOV X5, X31
	0x0323DD00 LDP X30, X27, [X31], #0x50
	0x0323DD04 BR X7
	0x0323DD08 ADRP X0, 0xEBE000
	0x0323DD0C LDR X0, [X0 + 0x760]
	0x0323DD10 BL 0x1C16D08
	0x0323DD14 BL 0x1C16F10
	0x0323DD18 MOV X19, X0
	0x0323DD1C ADRP X0, 0xEE5000
	0x0323DD20 LDR X0, [X0 + 0x300]
	0x0323DD24 BL 0x1C16D08
	0x0323DD28 MOV X20, X0
	0x0323DD2C ADRP X0, 0xEDE000
	0x0323DD30 LDR X0, [X0 + 0x660]
	0x0323DD34 B 0x323DE28
	0x0323DD38 ADRP X8, 0xEE5000
	0x0323DD3C ADRP X9, 0xEDF000
	0x0323DD40 LDR X8, [X8 + 0x308]
	0x0323DD44 LDR X9, [X9 + 0xCC0]
	0x0323DD48 CMP X22, 0x0
	0x0323DD4C CSEL X0, X9, X8, EQ
	0x0323DD50 BL 0x1C16D08
	0x0323DD54 MOV X19, X0
	0x0323DD58 ADRP X0, 0xEBB000
	0x0323DD5C LDR X0, [X0 + 0x528]
	0x0323DD60 BL 0x1C16D08
	0x0323DD64 BL 0x1C16F10
	0x0323DD68 MOV X20, X0
	0x0323DD6C ADRP X0, 0xEE5000
	0x0323DD70 LDR X0, [X0 + 0x2E0]
	0x0323DD74 BL 0x1C16D08
	0x0323DD78 MOV X2, X0
	0x0323DD7C MOV X0, X20
	0x0323DD80 MOV X1, X19
	0x0323DD84 MOV X3, X31
	0x0323DD88 BL 0x3315F7C
	0x0323DD8C B 0x323DDE4
	0x0323DD90 ADRP X8, 0xEE5000
	0x0323DD94 ADRP X9, 0xEE5000
	0x0323DD98 LDR X8, [X8 + 0x310]
	0x0323DD9C LDR X9, [X9 + 0x318]
	0x0323DDA0 CMP W21, 0x0
	0x0323DDA4 CSEL X0, X9, X8, LT
	0x0323DDA8 BL 0x1C16D08
	0x0323DDAC MOV X19, X0
	0x0323DDB0 ADRP X0, 0xEBE000
	0x0323DDB4 LDR X0, [X0 + 0x760]
	0x0323DDB8 BL 0x1C16D08
	0x0323DDBC BL 0x1C16F10
	0x0323DDC0 MOV X20, X0
	0x0323DDC4 ADRP X0, 0xEDE000
	0x0323DDC8 LDR X0, [X0 + 0x670]
	0x0323DDCC BL 0x1C16D08
	0x0323DDD0 MOV X2, X0
	0x0323DDD4 MOV X0, X20
	0x0323DDD8 MOV X1, X19
	0x0323DDDC MOV X3, X31
	0x0323DDE0 BL 0x3311888
	0x0323DDE4 ADRP X0, 0xEE5000
	0x0323DDE8 LDR X0, [X0 + 0x890]
	0x0323DDEC BL 0x1C16D08
	0x0323DDF0 MOV X1, X0
	0x0323DDF4 MOV X0, X20
	0x0323DDF8 BL 0x1C16DEC
	0x0323DDFC ADRP X0, 0xEBE000
	0x0323DE00 LDR X0, [X0 + 0x760]
	0x0323DE04 BL 0x1C16D08
	0x0323DE08 BL 0x1C16F10
	0x0323DE0C MOV X19, X0
	0x0323DE10 ADRP X0, 0xEDF000
	0x0323DE14 LDR X0, [X0 + 0xCC0]
	0x0323DE18 BL 0x1C16D08
	0x0323DE1C MOV X20, X0
	0x0323DE20 ADRP X0, 0xEE5000
	0x0323DE24 LDR X0, [X0 + 0x108]
	0x0323DE28 BL 0x1C16D08
	0x0323DE2C MOV X2, X0
	0x0323DE30 MOV X0, X19
	0x0323DE34 MOV X1, X20
	0x0323DE38 MOV X3, X31
	0x0323DE3C BL 0x3311888
	0x0323DE40 ADRP X0, 0xEE5000
	0x0323DE44 LDR X0, [X0 + 0x890]
	0x0323DE48 BL 0x1C16D08
	0x0323DE4C MOV X1, X0
	0x0323DE50 MOV X0, X19
	0x0323DE54 BL 0x1C16DEC
	0x0323DE58 STR X30, [X31 - 0x50]!
	0x0323DE5C STP X26, X25, [X31 + 0x10]
	0x0323DE60 STP X24, X23, [X31 + 0x20]
	0x0323DE64 STP X22, X21, [X31 + 0x30]
	0x0323DE68 STP X20, X19, [X31 + 0x40]
	0x0323DE6C ADRP X25, 0x119F000
	0x0323DE70 LDRB W8, [X25 + 0x416]
	0x0323DE74 MOV W20, W5
	0x0323DE78 MOV X23, X4
	0x0323DE7C MOV W19, W3
	0x0323DE80 MOV W21, W2
	0x0323DE84 MOV X24, X1
	0x0323DE88 MOV X22, X0
	0x0323DE8C TBNZ X8, 0x0, 0x323DEB0
	0x0323DE90 ADRP X0, 0xEE4000
	0x0323DE94 LDR X0, [X0 + 0x830]
	0x0323DE98 BL 0x1C16CF4
	0x0323DE9C ADRP X0, 0xEE5000
	0x0323DEA0 LDR X0, [X0 + 0x2F8]
	0x0323DEA4 BL 0x1C16CF4
	0x0323DEA8 MOVZ W8, 0x1
	0x0323DEAC STRB W8, [X25 + 0x416]
	0x0323DEB0 CBZ X24, 0x323DF9C
	0x0323DEB4 CBZ X23, 0x323DF9C
	0x0323DEB8 TBNZ X19, 0x1F, 0x323DFF4
	0x0323DEBC TBNZ X21, 0x1F, 0x323DFF4
	0x0323DEC0 LDR W8, [X24 + 0x18]
	0x0323DEC4 SUB W9, W8, W21
	0x0323DEC8 CMP W9, W19
	0x0323DECC B.LT 0x323E060
	0x0323DED0 TBNZ X20, 0x1F, 0x323DF6C
	0x0323DED4 LDR W9, [X23 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11A0000
	006 Move W8, [X21+1035]
	007 Move W19, W2
	008 Move X20, X1
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xEB7000
	014 Move X0, [X0+1560]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1035], W8
	018 Move X8, 0xEB7000
	019 Move X8, [X8+1560]
	020 NotImplemented "Instruction CMP not yet implemented."
	021 And W31, W19, 0x18000000
	022 Move TEMP, X19
	023 And TEMP, TEMP, 0x10000000
	024 Compare TEMP, 0x10000000
	025 JumpIfEqual {69}
	026 Move X9, [X20]
	027 Move TEMP, X19
	028 And TEMP, TEMP, 0x800000
	029 Compare TEMP, 0x800000
	030 JumpIfEqual {90}
	031 Subtract X9, X9, 1
	032 Move [X20], X9
	033 Move X0, [X8]
	034 Move W1, 1
	035 Call 0x1C17D6C
	036 Compare X0, 0
	037 JumpIfEqual {147}
	038 Move W8, [X0+24]
	039 Compare W8, 0
	040 JumpIfEqual {146}
	041 Move W8, 224
	042 NotImplemented "Instruction BFM not yet implemented."
	043 Move X9, [X20]
	044 Move W1, 1
	045 Subtract X9, X9, 1
	046 Move [X20], X9
	047 Move X0, [X8]
	048 Call 0x1C17D6C
	049 Compare X0, 0
	050 JumpIfEqual {147}
	051 Move W8, [X0+24]
	052 Compare W8, 0
	053 JumpIfEqual {146}
	054 Move [X0+32], W19
	055 Move X9, [X20]
	056 Move W1, 1
	057 Subtract X9, X9, 1
	058 Move [X20], X9
	059 Move X0, [X8]
	060 Call 0x1C17D6C
	061 Compare X0, 0
	062 JumpIfEqual {147}
	063 Move W8, [X0+24]
	064 Compare W8, 0
	065 JumpIfEqual {146}
	066 Move W8, 192
	067 NotImplemented "Instruction BFM not yet implemented."
	068 Move [X0+32], W8
	069 Move TEMP, X19
	070 And TEMP, TEMP, 0x800000
	071 Compare TEMP, 0x800000
	072 JumpIfEqual {102}
	073 Move X9, [X20]
	074 Move TEMP, X19
	075 And TEMP, TEMP, 0x20000
	076 Compare TEMP, 0x20000
	077 JumpIfEqual {124}
	078 Subtract X9, X9, 1
	079 Move [X20], X9
	080 Move X0, [X8]
	081 Move W1, 1
	082 Call 0x1C17D6C
	083 Compare X0, 0
	084 JumpIfEqual {147}
	085 Move W8, [X0+24]
	086 Compare W8, 0
	087 JumpIfEqual {146}
	088 Move W8, 240
	089 NotImplemented "Instruction BFM not yet implemented."
	090 Subtract X9, X9, 2
	091 Move [X20], X9
	092 Move X0, [X8]
	093 Move W1, 2
	094 Call 0x1C17D6C
	095 Compare X0, 0
	096 JumpIfEqual {147}
	097 Move W8, [X0+24]
	098 Compare W8, 0
	099 JumpIfEqual {146}
	100 Move W9, 224
	101 NotImplemented "Instruction BFM not yet implemented."
	102 Move X9, [X20]
	103 Move W1, 3
	104 Subtract X9, X9, 3
	105 Move [X20], X9
	106 Move X0, [X8]
	107 Call 0x1C17D6C
	108 Compare X0, 0
	109 JumpIfEqual {147}
	110 Move W8, [X0+24]
	111 Compare W8, 0
	112 JumpIfEqual {146}
	113 Move W9, 240
	114 NotImplemented "Instruction BFM not yet implemented."
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move [X0+32], W9
	117 Move W10, 128
	118 Move W9, 128
	119 NotImplemented "Instruction BFM not yet implemented."
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move [X0+33], W10
	122 NotImplemented "Instruction BFM not yet implemented."
	123 Move [X0+34], W9
	124 Subtract X9, X9, 2
	125 Move [X20], X9
	126 Move X0, [X8]
	127 Move W1, 2
	128 Call 0x1C17D6C
	129 Compare X0, 0
	130 JumpIfEqual {147}
	131 Move W8, [X0+24]
	132 Compare W8, 0
	133 JumpIfEqual {146}
	134 Move W9, 240
	135 NotImplemented "Instruction BFM not yet implemented."
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Move [X0+32], W9
	138 Move W8, 128
	139 NotImplemented "Instruction BFM not yet implemented."
	140 Move [X0+33], W8
	141 Move X20, [X31+16]
	142 Move X19, [X31+24]
	143 Move X30, [X31+32]
	144 Move X21, [X31+40]
	145 Return X0
	146 Call 0x1C17F28
	147 Call 0x1C17F20

Method: System.Text.Decoder GetDecoder()

Disassembly:
	0x0323DED8 SUBS W25, W9, W20
	0x0323DEDC B.LT 0x323DF6C
	0x0323DEE0 CBZ W19, 0x323DF50
	0x0323DEE4 ADRP X9, 0xEE5000
	0x0323DEE8 LDR X9, [X9 + 0x2F8]
	0x0323DEEC ADRP X26, 0xEE4000
	0x0323DEF0 LDR X26, [X26 + 0x830]
	0x0323DEF4 CMP W8, 0x0
	0x0323DEF8 LDR X1, [X9]
	0x0323DEFC ADD X9, X24, 0x20
	0x0323DF00 MOV X0, X23
	0x0323DF04 CSEL X24, X31, X9, EQ
	0x0323DF08 BL 0x25FB4C0
	0x0323DF0C LDR X2, [X26]
	0x0323DF10 BL 0x2218CF4
	0x0323DF14 LDR X8, [X22]
	0x0323DF18 ADD X1, X24, W21, 0x1, SXTW
	0x0323DF1C ADD X3, X0, W20, UXTW
	0x0323DF20 MOV X0, X22
	0x0323DF24 LDR X7, [X8 + 0x288]
	0x0323DF28 LDR X6, [X8 + 0x290]
	0x0323DF2C MOV W2, W19
	0x0323DF30 MOV W4, W25

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11A0000
	006 Move X21, 0xEE6000
	007 Move W8, [X20+1036]
	008 Move X21, [X21+2120]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEE6000
	015 Move X0, [X0+2120]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1036], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X19
	022 Move X2, X31
	023 Move X20, X0
	024 Call DecoderNLS..ctor, X0, X1
	025 Move X0, X20
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0

Method: System.Text.Encoder GetEncoder()

Disassembly:
	0x0323DF3C LDP X24, X23, [X31 + 0x20]
	0x0323DF40 LDP X26, X25, [X31 + 0x10]
	0x0323DF44 MOV X5, X31
	0x0323DF48 LDR X30, [X31], #0x50
	0x0323DF4C BR X7
	0x0323DF50 LDP X20, X19, [X31 + 0x40]
	0x0323DF54 LDP X22, X21, [X31 + 0x30]
	0x0323DF58 LDP X24, X23, [X31 + 0x20]
	0x0323DF5C LDP X26, X25, [X31 + 0x10]
	0x0323DF60 MOV W0, W31
	0x0323DF64 LDR X30, [X31], #0x50
	0x0323DF68 RET
	0x0323DF6C ADRP X0, 0xEBE000
	0x0323DF70 LDR X0, [X0 + 0x760]
	0x0323DF74 BL 0x1C16D08
	0x0323DF78 BL 0x1C16F10
	0x0323DF7C MOV X19, X0
	0x0323DF80 ADRP X0, 0xEE5000
	0x0323DF84 LDR X0, [X0 + 0x300]
	0x0323DF88 BL 0x1C16D08
	0x0323DF8C MOV X20, X0
	0x0323DF90 ADRP X0, 0xEDE000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11A0000
	006 Move X21, 0xEE6000
	007 Move W8, [X20+1037]
	008 Move X21, [X21+2080]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEE6000
	015 Move X0, [X0+2080]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1037], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X19
	022 Move X20, X0
	023 Call EncoderNLS..ctor, X0, X1
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: System.Int32 GetMaxByteCount(System.Int32 charCount)

Disassembly:
	0x0323DF98 B 0x323E08C
	0x0323DF9C ADRP X8, 0xEE5000
	0x0323DFA0 ADRP X9, 0xEE5000
	0x0323DFA4 LDR X8, [X8 + 0x308]
	0x0323DFA8 LDR X9, [X9 + 0x2D8]
	0x0323DFAC CMP X24, 0x0
	0x0323DFB0 CSEL X0, X9, X8, EQ
	0x0323DFB4 BL 0x1C16D08
	0x0323DFB8 MOV X19, X0
	0x0323DFBC ADRP X0, 0xEBB000
	0x0323DFC0 LDR X0, [X0 + 0x528]
	0x0323DFC4 BL 0x1C16D08
	0x0323DFC8 BL 0x1C16F10
	0x0323DFCC MOV X20, X0
	0x0323DFD0 ADRP X0, 0xEE5000
	0x0323DFD4 LDR X0, [X0 + 0x2E0]
	0x0323DFD8 BL 0x1C16D08
	0x0323DFDC MOV X2, X0
	0x0323DFE0 MOV X0, X20
	0x0323DFE4 MOV X1, X19
	0x0323DFE8 MOV X3, X31
	0x0323DFEC BL 0x3315F7C
	0x0323DFF0 B 0x323E048
	0x0323DFF4 ADRP X8, 0xEE5000
	0x0323DFF8 ADRP X9, 0xEE5000
	0x0323DFFC LDR X8, [X8 + 0x310]
	0x0323E000 B 0x3EB1894
	0x0323E004 CMP W21, 0x0
	0x0323E008 CSEL X0, X9, X8, LT
	0x0323E00C BL 0x1C16D08
	0x0323E010 MOV X19, X0
	0x0323E014 ADRP X0, 0xEBD000
	0x0323E018 LDR X0, [X0 + 0x760]
	0x0323E01C BL 0x1C16D08
	0x0323E020 BL 0x1C16F10
	0x0323E024 MOV X20, X0
	0x0323E028 ADRP X0, 0xEDD000
	0x0323E02C LDR X0, [X0 + 0x670]
	0x0323E030 BL 0x1C16D08
	0x0323E034 MOV X2, X0
	0x0323E038 MOV X0, X20
	0x0323E03C MOV X1, X19
	0x0323E040 MOV X3, X31
	0x0323E044 BL 0x3311888
	0x0323E048 ADRP X0, 0xEE4000
	0x0323E04C LDR X0, [X0 + 0x898]
	0x0323E050 BL 0x1C16D08
	0x0323E054 MOV X1, X0
	0x0323E058 MOV X0, X20
	0x0323E05C BL 0x1C16DEC
	0x0323E060 ADRP X0, 0xEBD000
	0x0323E064 LDR X0, [X0 + 0x760]
	0x0323E068 BL 0x1C16D08
	0x0323E06C BL 0x1C16F10
	0x0323E070 MOV X19, X0
	0x0323E074 ADRP X0, 0xEE4000
	0x0323E078 LDR X0, [X0 + 0x2D8]
	0x0323E07C BL 0x1C16D08
	0x0323E080 MOV X20, X0
	0x0323E084 ADRP X0, 0xEE4000
	0x0323E088 LDR X0, [X0 + 0xE0]
	0x0323E08C BL 0x1C16D08
	0x0323E090 MOV X2, X0
	0x0323E094 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move TEMP, X1
	005 And TEMP, TEMP, -2147483648
	006 Compare TEMP, -2147483648
	007 JumpIfEqual {37}
	008 Move X19, X0
	009 Move X0, [X0+40]
	010 Compare X0, 0
	011 JumpIfEqual {36}
	012 Move X8, [X0]
	013 Move W10, W1
	014 Add X20, X10, 1
	015 Move X9, [X8+392]
	016 Move X8, [X8+400]
	017 Move X1, X8
	018 NotImplemented "Instruction BLR not yet implemented."
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X0, [X19+40]
	021 Compare X0, 0
	022 JumpIfEqual {36}
	023 Move X8, [X0]
	024 Move X9, [X8+392]
	025 Move X1, [X8+400]
	026 NotImplemented "Instruction BLR not yet implemented."
	027 Move X8, W0
	028 Multiply X20, X20, X8
	029 Add X0, X20, X20
	030 Move W8, 0x80000000
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return X0
	036 Call 0x1C17F20
	037 Move X0, 0xEBE000
	038 Move X0, [X0+1888]
	039 Call 0x1C17D08
	040 Call 0x1C17F10
	041 Move X19, X0
	042 Move X0, 0xEE5000
	043 Move X0, [X0+784]
	044 Call 0x1C17D08
	045 Move X20, X0
	046 Move X0, 0xEDE000
	047 Move X0, [X0+1648]
	048 Move X0, 0xEBE000
	049 Move X0, [X0+1888]
	050 Call 0x1C17D08
	051 Call 0x1C17F10
	052 Move X19, X0
	053 Move X0, 0xEE5000
	054 Move X0, [X0+784]
	055 Call 0x1C17D08
	056 Move X20, X0
	057 Move X0, 0xEE5000
	058 Move X0, [X0+1056]
	059 Call 0x1C17D08
	060 Move X2, X0
	061 Move X0, X19
	062 Move X1, X20
	063 Move X3, X31
	064 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	065 Move X0, 0xEE5000
	066 Move X0, [X0+2128]
	067 Call 0x1C17D08
	068 Move X1, X0
	069 Move X0, X19
	070 Call 0x1C17DEC

Method: System.Int32 GetMaxCharCount(System.Int32 byteCount)

Disassembly:
	0x0323E098 MOV X1, X20
	0x0323E09C MOV X3, X31
	0x0323E0A0 BL 0x3311888
	0x0323E0A4 ADRP X0, 0xEE4000
	0x0323E0A8 LDR X0, [X0 + 0x898]
	0x0323E0AC BL 0x1C16D08
	0x0323E0B0 MOV X1, X0
	0x0323E0B4 MOV X0, X19
	0x0323E0B8 BL 0x1C16DEC
	0x0323E0BC STR X30, [X31 - 0x20]!
	0x0323E0C0 STP X20, X19, [X31 + 0x10]
	0x0323E0C4 CBZ X1, 0x323E0F0
	0x0323E0C8 CBZ X3, 0x323E0F0
	0x0323E0CC TBNZ X4, 0x1F, 0x323E148
	0x0323E0D0 TBNZ X2, 0x1F, 0x323E148
	0x0323E0D4 LDR X8, [X0]
	0x0323E0D8 LDP X20, X19, [X31 + 0x10]
	0x0323E0DC MOV X5, X31
	0x0323E0E0 LDR X7, [X8 + 0x288]
	0x0323E0E4 LDR X6, [X8 + 0x290]
	0x0323E0E8 LDR X30, [X31], #0x20
	0x0323E0EC BR X7
	0x0323E0F0 ADRP X8, 0xEE4000
	0x0323E0F4 ADRP X9, 0xEE4000
	0x0323E0F8 LDR X8, [X8 + 0x2D8]
	0x0323E0FC LDR X9, [X9 + 0x308]
	0x0323E100 CMP X3, 0x0
	0x0323E104 CSEL X0, X9, X8, EQ
	0x0323E108 BL 0x1C16D08
	0x0323E10C MOV X19, X0
	0x0323E110 ADRP X0, 0xEBA000
	0x0323E114 LDR X0, [X0 + 0x528]
	0x0323E118 BL 0x1C16D08
	0x0323E11C BL 0x1C16F10
	0x0323E120 MOV X20, X0
	0x0323E124 ADRP X0, 0xEE4000
	0x0323E128 LDR X0, [X0 + 0x2E0]
	0x0323E12C BL 0x1C16D08
	0x0323E130 MOV X2, X0
	0x0323E134 MOV X0, X20
	0x0323E138 MOV X1, X19
	0x0323E13C MOV X3, X31
	0x0323E140 BL 0x3315F7C
	0x0323E144 B 0x323E19C
	0x0323E148 ADRP X8, 0xEE4000
	0x0323E14C ADRP X9, 0xEE4000
	0x0323E150 LDR X8, [X8 + 0x328]
	0x0323E154 LDR X9, [X9 + 0x310]
	0x0323E158 CMP W2, 0x0
	0x0323E15C CSEL X0, X9, X8, LT
	0x0323E160 BL 0x1C16D08
	0x0323E164 MOV X19, X0
	0x0323E168 ADRP X0, 0xEBD000
	0x0323E16C LDR X0, [X0 + 0x760]
	0x0323E170 BL 0x1C16D08
	0x0323E174 BL 0x1C16F10
	0x0323E178 MOV X20, X0
	0x0323E17C ADRP X0, 0xEDD000
	0x0323E180 LDR X0, [X0 + 0x670]
	0x0323E184 BL 0x1C16D08
	0x0323E188 MOV X2, X0
	0x0323E18C MOV X0, X20
	0x0323E190 MOV X1, X19
	0x0323E194 MOV X3, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move TEMP, X1
	005 And TEMP, TEMP, -2147483648
	006 Compare TEMP, -2147483648
	007 JumpIfEqual {37}
	008 Move X20, X0
	009 Move X0, [X0+48]
	010 Compare X0, 0
	011 JumpIfEqual {36}
	012 Move X8, [X0]
	013 Move W10, W1
	014 Add X19, X10, 1
	015 Move X9, [X8+392]
	016 Move X8, [X8+400]
	017 Move X1, X8
	018 NotImplemented "Instruction BLR not yet implemented."
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X0, [X20+48]
	021 Compare X0, 0
	022 JumpIfEqual {36}
	023 Move X8, [X0]
	024 Move X9, [X8+392]
	025 Move X1, [X8+400]
	026 NotImplemented "Instruction BLR not yet implemented."
	027 Move X8, W0
	028 Multiply X19, X19, X8
	029 Move W8, 0x80000000
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move W0, W19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return X0
	036 Call 0x1C17F20
	037 Move X0, 0xEBE000
	038 Move X0, [X0+1888]
	039 Call 0x1C17D08
	040 Call 0x1C17F10
	041 Move X19, X0
	042 Move X0, 0xEE5000
	043 Move X0, [X0+808]
	044 Call 0x1C17D08
	045 Move X20, X0
	046 Move X0, 0xEDE000
	047 Move X0, [X0+1648]
	048 Move X0, 0xEBE000
	049 Move X0, [X0+1888]
	050 Call 0x1C17D08
	051 Call 0x1C17F10
	052 Move X19, X0
	053 Move X0, 0xEE5000
	054 Move X0, [X0+808]
	055 Call 0x1C17D08
	056 Move X20, X0
	057 Move X0, 0xEE5000
	058 Move X0, [X0+1072]
	059 Call 0x1C17D08
	060 Move X2, X0
	061 Move X0, X19
	062 Move X1, X20
	063 Move X3, X31
	064 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	065 Move X0, 0xEE5000
	066 Move X0, [X0+2136]
	067 Call 0x1C17D08
	068 Move X1, X0
	069 Move X0, X19
	070 Call 0x1C17DEC

Method: System.Byte[] GetPreamble()

Disassembly:
	0x0323E198 BL 0x3311888
	0x0323E19C ADRP X0, 0xEE4000
	0x0323E1A0 LDR X0, [X0 + 0x8A0]
	0x0323E1A4 BL 0x1C16D08
	0x0323E1A8 MOV X1, X0
	0x0323E1AC MOV X0, X20
	0x0323E1B0 BL 0x1C16DEC
	0x0323E1B4 STR X30, [X31 - 0x20]!
	0x0323E1B8 STP X20, X19, [X31 + 0x10]
	0x0323E1BC CBZ X1, 0x323E21C
	0x0323E1C0 TBNZ X3, 0x1F, 0x323E264
	0x0323E1C4 TBNZ X2, 0x1F, 0x323E264
	0x0323E1C8 LDR W8, [X1 + 0x18]
	0x0323E1CC SUB W9, W8, W2
	0x0323E1D0 CMP W9, W3
	0x0323E1D4 B.LT 0x323E2D0
	0x0323E1D8 CBZ W3, 0x323E20C
	0x0323E1DC LDR X9, [X0]
	0x0323E1E0 LDP X20, X19, [X31 + 0x10]
	0x0323E1E4 ADD X10, X1, 0x20
	0x0323E1E8 CMP W8, 0x0
	0x0323E1EC LDR X5, [X9 + 0x2C8]
	0x0323E1F0 LDR X4, [X9 + 0x2D0]
	0x0323E1F4 CSEL X8, X31, X10, EQ
	0x0323E1F8 ADD X1, X8, W2, SXTW
	0x0323E1FC MOV W2, W3
	0x0323E200 MOV X3, X31
	0x0323E204 LDR X30, [X31], #0x20
	0x0323E208 BR X5
	0x0323E20C LDP X20, X19, [X31 + 0x10]
	0x0323E210 MOV W0, W31
	0x0323E214 LDR X30, [X31], #0x20
	0x0323E218 RET
	0x0323E21C ADRP X0, 0xEBA000
	0x0323E220 LDR X0, [X0 + 0x528]
	0x0323E224 BL 0x1C16D08
	0x0323E228 BL 0x1C16F10
	0x0323E22C MOV X19, X0
	0x0323E230 ADRP X0, 0xEE4000
	0x0323E234 LDR X0, [X0 + 0x308]
	0x0323E238 BL 0x1C16D08
	0x0323E23C MOV X20, X0
	0x0323E240 ADRP X0, 0xEE4000
	0x0323E244 LDR X0, [X0 + 0x2E0]
	0x0323E248 BL 0x1C16D08
	0x0323E24C MOV X2, X0
	0x0323E250 MOV X0, X19
	0x0323E254 MOV X1, X20
	0x0323E258 MOV X3, X31
	0x0323E25C BL 0x3315F7C
	0x0323E260 B 0x323E314
	0x0323E264 ADRP X8, 0xEDD000
	0x0323E268 ADRP X9, 0xEC0000
	0x0323E26C LDR X8, [X8 + 0x648]
	0x0323E270 LDR X9, [X9 + 0x130]
	0x0323E274 CMP W2, 0x0
	0x0323E278 CSEL X0, X9, X8, LT

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x119F000
	005 Move W8, [X20+1038]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {22}
	011 Move X0, 0xEBE000
	012 Move X0, [X0+3272]
	013 Call 0x1C17CF4
	014 Move X0, 0xEB6000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move X0, 0xEE5000
	018 Move X0, [X0+2144]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1038], W8
	022 Move W8, [X19+56]
	023 Compare W8, 0
	024 JumpIfEqual {36}
	025 Move X8, 0xEB6000
	026 Move X8, [X8+1560]
	027 Move X19, 0xEE5000
	028 Move W1, 3
	029 Move X0, [X8]
	030 Move X19, [X19+2144]
	031 Call 0x1C17D6C
	032 Move X1, [X19]
	033 Move X2, X31
	034 Move X19, X0
	035 Call RuntimeHelpers.InitializeArray, X0, X1
	036 Move X8, 0xEBE000
	037 Move X8, [X8+3272]
	038 Move X19, [X8]
	039 Move X8, [X19+56]
	040 Compare X8, 0
	041 JumpIfNotEqual {45}
	042 Move X0, X19
	043 Call 0x1C5D6E0
	044 Move X8, [X19+56]
	045 Move X0, [X8+16]
	046 Move W8, [X0+309]
	047 Move TEMP, X8
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfEqual {52}
	051 Call 0x1C5D684
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Move X8, [X19+56]
	057 Move X0, [X8+16]
	058 Move W8, [X0+309]
	059 Move TEMP, X8
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfEqual {64}
	063 Call 0x1C5D684
	064 Move X8, [X0+184]
	065 Move X19, [X8]
	066 Move X0, X19
	067 Move X20, [X31+16]
	068 Move X19, [X31+24]
	069 Move X30, [X31+32]
	070 Return X0

Method: System.ReadOnlySpan`1<System.Byte> get_Preamble()

Disassembly:
	0x0323E27C BL 0x1C16D08
	0x0323E280 MOV X19, X0
	0x0323E284 ADRP X0, 0xEBD000
	0x0323E288 LDR X0, [X0 + 0x760]
	0x0323E28C BL 0x1C16D08
	0x0323E290 BL 0x1C16F10
	0x0323E294 MOV X20, X0
	0x0323E298 ADRP X0, 0xEDD000
	0x0323E29C LDR X0, [X0 + 0x670]
	0x0323E2A0 BL 0x1C16D08
	0x0323E2A4 MOV X2, X0
	0x0323E2A8 MOV X0, X20
	0x0323E2AC MOV X1, X19
	0x0323E2B0 MOV X3, X31
	0x0323E2B4 BL 0x3311888
	0x0323E2B8 ADRP X0, 0xEE4000
	0x0323E2BC LDR X0, [X0 + 0x8A8]
	0x0323E2C0 BL 0x1C16D08
	0x0323E2C4 MOV X1, X0
	0x0323E2C8 MOV X0, X20
	0x0323E2CC BL 0x1C16DEC
	0x0323E2D0 ADRP X0, 0xEBD000
	0x0323E2D4 LDR X0, [X0 + 0x760]
	0x0323E2D8 BL 0x1C16D08
	0x0323E2DC BL 0x1C16F10
	0x0323E2E0 MOV X19, X0
	0x0323E2E4 ADRP X0, 0xEE4000
	0x0323E2E8 LDR X0, [X0 + 0x308]
	0x0323E2EC BL 0x1C16D08
	0x0323E2F0 MOV X20, X0
	0x0323E2F4 ADRP X0, 0xEE4000
	0x0323E2F8 LDR X0, [X0 + 0xE0]
	0x0323E2FC BL 0x1C16D08
	0x0323E300 MOV X2, X0
	0x0323E304 MOV X0, X19
	0x0323E308 MOV X1, X20
	0x0323E30C MOV X3, X31
	0x0323E310 BL 0x3311888
	0x0323E314 ADRP X0, 0xEE4000
	0x0323E318 LDR X0, [X0 + 0x8A8]
	0x0323E31C BL 0x1C16D08
	0x0323E320 MOV X1, X0
	0x0323E324 MOV X0, X19
	0x0323E328 BL 0x1C16DEC
	0x0323E32C STR X30, [X31 - 0x20]!
	0x0323E330 STP X20, X19, [X31 + 0x10]
	0x0323E334 CBZ X1, 0x323E358
	0x0323E338 TBNZ X2, 0x1F, 0x323E3A0
	0x0323E33C LDR X8, [X0]
	0x0323E340 LDP X20, X19, [X31 + 0x10]
	0x0323E344 MOV X3, X31
	0x0323E348 LDR X5, [X8 + 0x2C8]
	0x0323E34C LDR X4, [X8 + 0x2D0]
	0x0323E350 LDR X30, [X31], #0x20
	0x0323E354 BR X5
	0x0323E358 ADRP X0, 0xEBA000
	0x0323E35C LDR X0, [X0 + 0x528]
	0x0323E360 BL 0x1C16D08
	0x0323E364 BL 0x1C16F10
	0x0323E368 MOV X19, X0
	0x0323E36C ADRP X0, 0xEE4000
	0x0323E370 LDR X0, [X0 + 0x308]
	0x0323E374 BL 0x1C16D08
	0x0323E378 MOV X20, X0
	0x0323E37C ADRP X0, 0xEE4000
	0x0323E380 LDR X0, [X0 + 0x2E0]
	0x0323E384 BL 0x1C16D08
	0x0323E388 MOV X2, X0
	0x0323E38C MOV X0, X19
	0x0323E390 MOV X1, X20
	0x0323E394 MOV X3, X31
	0x0323E398 BL 0x3315F7C
	0x0323E39C B 0x323E3E4
	0x0323E3A0 ADRP X0, 0xEBD000
	0x0323E3A4 LDR X0, [X0 + 0x760]
	0x0323E3A8 BL 0x1C16D08
	0x0323E3AC BL 0x1C16F10
	0x0323E3B0 MOV X19, X0
	0x0323E3B4 ADRP X0, 0xEDD000
	0x0323E3B8 LDR X0, [X0 + 0x648]
	0x0323E3BC BL 0x1C16D08
	0x0323E3C0 MOV X20, X0
	0x0323E3C4 ADRP X0, 0xEDD000
	0x0323E3C8 LDR X0, [X0 + 0x670]
	0x0323E3CC BL 0x1C16D08
	0x0323E3D0 MOV X2, X0
	0x0323E3D4 MOV X0, X19
	0x0323E3D8 MOV X1, X20
	0x0323E3DC MOV X3, X31
	0x0323E3E0 BL 0x3311888
	0x0323E3E4 ADRP X0, 0xEE4000
	0x0323E3E8 LDR X0, [X0 + 0x8B0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x119F000
	007 Move X20, 0xEE5000
	008 Move X21, 0xEB6000
	009 Move W8, [X22+1039]
	010 Move X20, [X20+2152]
	011 Move X21, [X21+1728]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xEBE000
	018 Move X0, [X0+3272]
	019 Call 0x1C17CF4
	020 Move X0, 0xEE5000
	021 Move X0, [X0+1776]
	022 Call 0x1C17CF4
	023 Move X0, 0xEB6000
	024 Move X0, [X0+1728]
	025 Call 0x1C17CF4
	026 Move X0, 0xEE5000
	027 Move X0, [X0+2152]
	028 Call 0x1C17CF4
	029 Move X0, 0xEE5000
	030 Move X0, [X0+2088]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X22+1039], W8
	034 Move X0, X19
	035 Move X1, X31
	036 Call "il2cpp_vm_object_is_inst", X0
	037 Move X8, [X21]
	038 Move X21, [X20]
	039 Move X20, X0
	040 Move W9, [X8+224]
	041 Compare W9, 0
	042 JumpIfNotEqual {45}
	043 Move X0, X8
	044 Call 0x1C17DFC
	045 Move X22, 0xEE5000
	046 Move X22, [X22+1776]
	047 Move X0, X21
	048 Move X1, X31
	049 Call Type.GetTypeFromHandle, X0
	050 Move X1, X0
	051 Move X0, X20
	052 Move X2, X31
	053 Call Type.op_Inequality, X0, X1
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {63}
	058 Move X8, [X19]
	059 Move X0, X19
	060 Move X9, [X8+408]
	061 Move X1, [X8+416]
	062 NotImplemented "Instruction BLR not yet implemented."
	063 Move W8, [X19+56]
	064 Compare W8, 0
	065 JumpIfEqual {76}
	066 Move X19, 0xEE5000
	067 Move X19, [X19+2088]
	068 Move X0, [X19]
	069 Move W8, [X0+224]
	070 Compare W8, 0
	071 JumpIfNotEqual {74}
	072 Call 0x1C17DFC
	073 Move X0, [X19]
	074 Move X8, [X0+184]
	075 Move X0, [X8+8]
	076 Move X8, 0xEBE000
	077 Move X8, [X8+3272]
	078 Move X19, [X8]
	079 Move X8, [X19+56]
	080 Compare X8, 0
	081 JumpIfNotEqual {85}
	082 Move X0, X19
	083 Call 0x1C5D6E0
	084 Move X8, [X19+56]
	085 Move X0, [X8+16]
	086 Move W8, [X0+309]
	087 Move TEMP, X8
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfEqual {92}
	091 Call 0x1C5D684
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1C17DFC
	096 Move X8, [X19+56]
	097 Move X0, [X8+16]
	098 Move W8, [X0+309]
	099 Move TEMP, X8
	100 And TEMP, TEMP, 1
	101 Compare TEMP, 1
	102 JumpIfEqual {104}
	103 Call 0x1C5D684
	104 Move X8, [X0+184]
	105 Move X0, [X8]
	106 Move X1, [X22]
	107 Move X20, [X31+32]
	108 Move X19, [X31+40]
	109 Move X22, [X31+16]
	110 Move X21, [X31+24]
	111 Move X30, [X31+48]
	112 Call 0x25BFADC, X0
	113 Return X0

Method: System.Boolean Equals(System.Object value)

Disassembly:
	0x0323E3EC BL 0x1C16D08
	0x0323E3F0 MOV X1, X0
	0x0323E3F4 MOV X0, X19
	0x0323E3F8 BL 0x1C16DEC
	0x0323E3FC STR X30, [X31 - 0x50]!
	0x0323E400 STP X26, X25, [X31 + 0x10]
	0x0323E404 STP X24, X23, [X31 + 0x20]
	0x0323E408 STP X22, X21, [X31 + 0x30]
	0x0323E40C STP X20, X19, [X31 + 0x40]
	0x0323E410 ADRP X25, 0x119E000
	0x0323E414 LDRB W8, [X25 + 0x417]
	0x0323E418 MOV W20, W5
	0x0323E41C MOV X23, X4
	0x0323E420 MOV W19, W3
	0x0323E424 MOV W21, W2
	0x0323E428 MOV X24, X1
	0x0323E42C MOV X22, X0
	0x0323E430 TBNZ X8, 0x0, 0x323E454
	0x0323E434 ADRP X0, 0xEE4000
	0x0323E438 LDR X0, [X0 + 0x2C8]
	0x0323E43C BL 0x1C16CF4
	0x0323E440 ADRP X0, 0xEE4000
	0x0323E444 LDR X0, [X0 + 0x2D0]
	0x0323E448 BL 0x1C16CF4
	0x0323E44C MOVZ W8, 0x1
	0x0323E450 STRB W8, [X25 + 0x417]
	0x0323E454 CBZ X24, 0x323E540
	0x0323E458 CBZ X23, 0x323E540
	0x0323E45C TBNZ X19, 0x1F, 0x323E598
	0x0323E460 TBNZ X21, 0x1F, 0x323E598
	0x0323E464 LDR W8, [X24 + 0x18]
	0x0323E468 SUB W9, W8, W21
	0x0323E46C CMP W9, W19
	0x0323E470 B.LT 0x323E604
	0x0323E474 TBNZ X20, 0x1F, 0x323E510
	0x0323E478 LDR W9, [X23 + 0x18]
	0x0323E47C SUBS W25, W9, W20
	0x0323E480 B.LT 0x323E510
	0x0323E484 CBZ W19, 0x323E4F4
	0x0323E488 ADRP X9, 0xEE4000
	0x0323E48C LDR X9, [X9 + 0x2D0]
	0x0323E490 ADRP X26, 0xEE4000
	0x0323E494 LDR X26, [X26 + 0x2C8]
	0x0323E498 CMP W8, 0x0
	0x0323E49C LDR X1, [X9]
	0x0323E4A0 ADD X9, X24, 0x20
	0x0323E4A4 MOV X0, X23
	0x0323E4A8 CSEL X24, X31, X9, EQ
	0x0323E4AC BL 0x25FBC40
	0x0323E4B0 LDR X2, [X26]
	0x0323E4B4 BL 0x2218CFC
	0x0323E4B8 LDR X8, [X22]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x119F000
	006 Move W8, [X21+1040]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xEE5000
	014 Move X0, [X0+2088]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1040], W8
	018 Compare X20, 0
	019 JumpIfEqual {61}
	020 Move X8, 0xEE5000
	021 Move X8, [X8+2088]
	022 Move X9, [X20]
	023 Move X8, [X8]
	024 Move W11, [X9+304]
	025 Move W10, [X8+304]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X9, [X9+200]
	028 Add X9, X9, X10
	029 NotImplemented "Instruction LDUR not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSEL not yet implemented."
	032 Compare X20, 0
	033 JumpIfEqual {67}
	034 Move W8, [X19+56]
	035 Move W9, [X20+56]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, [X19+40]
	038 Compare X0, 0
	039 JumpIfEqual {67}
	040 Move X8, [X0]
	041 Move X1, [X20+40]
	042 Move X9, [X8+312]
	043 Move X2, [X8+320]
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {61}
	049 Move X0, [X19+48]
	050 Compare X0, 0
	051 JumpIfEqual {67}
	052 Move X8, [X0]
	053 Move X1, [X20+48]
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X3, [X8+312]
	057 Move X2, [X8+320]
	058 Move X30, [X31+32]
	059 Move X21, [X31+40]
	060 CallNoReturn X3
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move W0, W31
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 Return X0
	067 Call 0x1C17F20

Method: System.Int32 GetHashCode()

Disassembly:
	0x0323E4BC ADD X1, X24, W21, SXTW
	0x0323E4C0 ADD X3, X0, W20, 0x1, UXTW
	0x0323E4C4 MOV X0, X22
	0x0323E4C8 LDR X7, [X8 + 0x308]
	0x0323E4CC LDR X6, [X8 + 0x310]
	0x0323E4D0 MOV W2, W19
	0x0323E4D4 MOV W4, W25
	0x0323E4D8 LDP X20, X19, [X31 + 0x40]
	0x0323E4DC LDP X22, X21, [X31 + 0x30]
	0x0323E4E0 LDP X24, X23, [X31 + 0x20]
	0x0323E4E4 LDP X26, X25, [X31 + 0x10]
	0x0323E4E8 MOV X5, X31
	0x0323E4EC LDR X30, [X31], #0x50
	0x0323E4F0 BR X7
	0x0323E4F4 LDP X20, X19, [X31 + 0x40]
	0x0323E4F8 LDP X22, X21, [X31 + 0x30]
	0x0323E4FC LDP X24, X23, [X31 + 0x20]
	0x0323E500 LDP X26, X25, [X31 + 0x10]
	0x0323E504 MOV W0, W31
	0x0323E508 LDR X30, [X31], #0x50
	0x0323E50C RET
	0x0323E510 ADRP X0, 0xEBD000
	0x0323E514 LDR X0, [X0 + 0x760]
	0x0323E518 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+40]
	006 Compare X0, 0
	007 JumpIfEqual {30}
	008 Move X8, [X0]
	009 Move X9, [X8+344]
	010 Move X1, [X8+352]
	011 NotImplemented "Instruction BLR not yet implemented."
	012 Move X8, [X19+48]
	013 Compare X8, 0
	014 JumpIfEqual {30}
	015 Move X9, [X8]
	016 Move W20, W0
	017 Move X0, X8
	018 Move X10, [X9+344]
	019 Move X1, [X9+352]
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move W8, [X19+56]
	022 Add W9, W20, W0
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Add W8, W9, W8
	026 Move W9, 0xFDE9
	027 Add W0, W8, W9
	028 Move X30, [X31+32]
	029 Return X0
	030 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x0323E51C BL 0x1C16F10
	0x0323E520 MOV X19, X0
	0x0323E524 ADRP X0, 0xEE4000
	0x0323E528 LDR X0, [X0 + 0x318]
	0x0323E52C BL 0x1C16D08
	0x0323E530 MOV X20, X0
	0x0323E534 ADRP X0, 0xEDD000
	0x0323E538 LDR X0, [X0 + 0x660]
	0x0323E53C B 0x323E630
	0x0323E540 ADRP X8, 0xEE4000
	0x0323E544 ADRP X9, 0xEE4000
	0x0323E548 LDR X8, [X8 + 0x2D8]
	0x0323E54C LDR X9, [X9 + 0x308]
	0x0323E550 CMP X24, 0x0
	0x0323E554 CSEL X0, X9, X8, EQ
	0x0323E558 BL 0x1C16D08
	0x0323E55C MOV X19, X0
	0x0323E560 ADRP X0, 0xEBA000
	0x0323E564 LDR X0, [X0 + 0x528]
	0x0323E568 BL 0x1C16D08
	0x0323E56C BL 0x1C16F10
	0x0323E570 MOV X20, X0
	0x0323E574 ADRP X0, 0xEE4000
	0x0323E578 LDR X0, [X0 + 0x2E0]
	0x0323E57C BL 0x1C16D08
	0x0323E580 MOV X2, X0
	0x0323E584 MOV X0, X20
	0x0323E588 MOV X1, X19
	0x0323E58C MOV X3, X31
	0x0323E590 BL 0x3315F7C
	0x0323E594 B 0x323E5EC
	0x0323E598 ADRP X8, 0xEE4000
	0x0323E59C ADRP X9, 0xEE4000
	0x0323E5A0 LDR X8, [X8 + 0x328]
	0x0323E5A4 LDR X9, [X9 + 0x300]
	0x0323E5A8 CMP W21, 0x0
	0x0323E5AC CSEL X0, X9, X8, LT
	0x0323E5B0 BL 0x1C16D08
	0x0323E5B4 MOV X19, X0
	0x0323E5B8 ADRP X0, 0xEBD000
	0x0323E5BC LDR X0, [X0 + 0x760]
	0x0323E5C0 BL 0x1C16D08
	0x0323E5C4 BL 0x1C16F10
	0x0323E5C8 MOV X20, X0
	0x0323E5CC ADRP X0, 0xEDD000
	0x0323E5D0 LDR X0, [X0 + 0x670]
	0x0323E5D4 BL 0x1C16D08
	0x0323E5D8 MOV X2, X0
	0x0323E5DC MOV X0, X20
	0x0323E5E0 MOV X1, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, 0x119F000
	008 Move X23, 0xEE5000
	009 Move X20, 0xEE5000
	010 Move X22, 0xEB6000
	011 Move X21, 0xEE5000
	012 Move W8, [X19+1041]
	013 Move X23, [X23+2160]
	014 Move X20, [X20+2088]
	015 Move X22, [X22+1560]
	016 Move X21, [X21+2144]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, 0xEB6000
	022 Move X0, [X0+1560]
	023 Call 0x1C17CF4
	024 Move X0, 0xEE5000
	025 Move X0, [X0+2144]
	026 Call 0x1C17CF4
	027 Move X0, 0xEE5000
	028 Move X0, [X0+2160]
	029 Call 0x1C17CF4
	030 Move X0, 0xEE5000
	031 Move X0, [X0+2088]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X19+1041], W8
	035 Move X0, [X23]
	036 Call 0x1C17F10
	037 Move W1, 1
	038 Move X19, X0
	039 Call UTF8EncodingSealed..ctor, X0, X1
	040 Move X8, [X20]
	041 Move W1, 3
	042 Move X8, [X8+184]
	043 Move [X8], X19
	044 Move X0, [X22]
	045 Call 0x1C17D6C
	046 Move X1, [X21]
	047 Move X2, X31
	048 Move X19, X0
	049 Call RuntimeHelpers.InitializeArray, X0, X1
	050 Move X8, [X20]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X8, [X8+184]
	054 Move [X8+8], X19
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X30, [X31+48]
	058 Move X23, [X31+56]
	059 Return 

