Type: System.Text.Encoding

Method: System.Void .ctor()

Disassembly:
	0x03242AE0 B 0x3242B54
	0x03242AE4 B 0x3242B54
	0x03242AE8 B 0x3242B54
	0x03242AEC B 0x3242B54
	0x03242AF0 B 0x3242B54
	0x03242AF4 B 0x3242B54
	0x03242AF8 B 0x3242B54
	0x03242AFC B 0x3242B54
	0x03242B00 B 0x3242B54
	0x03242B04 B 0x3242B54
	0x03242B08 B 0x3242B54
	0x03242B0C B 0x3242B54

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, 1
	004 Move X1, X31
	005 Move X19, X0
	006 Move [X0+33], W8
	007 Call Object..ctor, X0
	008 Move X8, [X19]
	009 Move [X19+16], W31
	010 Move X0, X19
	011 Move X2, [X8+392]
	012 Move X1, [X8+400]
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 CallNoReturn X2

Method: System.Void .ctor(System.Int32 codePage)

Disassembly:
	0x03242B10 B 0x3242B54
	0x03242B14 B 0x3242B54
	0x03242B18 B 0x3242B54
	0x03242B1C B 0x3242B54
	0x03242B20 B 0x3242B54
	0x03242B24 B 0x3242B54
	0x03242B28 B 0x3242B54
	0x03242B2C B 0x3242B54
	0x03242B30 B 0x3242B54
	0x03242B34 B 0x3242B54
	0x03242B38 B 0x3242B54
	0x03242B3C B 0x3242B54
	0x03242B40 B 0x3242B54
	0x03242B44 B 0x3242B54
	0x03242B48 B 0x3242B54
	0x03242B4C B 0x3242B54
	0x03242B50 B 0x3242B54
	0x03242B54 MOV X21, X0
	0x03242B58 CMP W1, 0x1
	0x03242B5C B.NE 0x3242B7C
	0x03242B60 MOV X0, X21
	0x03242B64 BL 0x3EB1AD0
	0x03242B68 LDR X20, [X0]
	0x03242B6C BL 0x3EB1AE0
	0x03242B70 MOV W22, W31
	0x03242B74 MOV X21, X31
	0x03242B78 B 0x3242750
	0x03242B7C MOV X20, X31
	0x03242B80 B 0x3242B88
	0x03242B84 MOV X21, X0
	0x03242B88 LDRB W8, [X31 + 0x14]
	0x03242B8C CBZ W8, 0x3242B9C
	0x03242B90 MOV X0, X19
	0x03242B94 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W20, W1
	005 Move W8, 1
	006 Move X1, X31
	007 Move X19, X0
	008 Move [X0+33], W8
	009 Call Object..ctor, X0
	010 Move TEMP, X20
	011 And TEMP, TEMP, -2147483648
	012 Compare TEMP, -2147483648
	013 JumpIfEqual {23}
	014 Move X8, [X19]
	015 Move [X19+16], W20
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X2, [X8+392]
	020 Move X1, [X8+400]
	021 Move X30, [X31+32]
	022 CallNoReturn X2
	023 Move X0, 0xEBA000
	024 Move X0, [X0+1888]
	025 Call 0x1C17D08
	026 Call 0x1C17F10
	027 Move X19, X0
	028 Move X0, 0xEE1000
	029 Move X0, [X0+2352]
	030 Call 0x1C17D08
	031 Move X1, X0
	032 Move X0, X19
	033 Move X2, X31
	034 Call ArgumentOutOfRangeException..ctor, X0, X1
	035 Move X0, 0xEE1000
	036 Move X0, [X0+2360]
	037 Call 0x1C17D08
	038 Move X1, X0
	039 Move X0, X19
	040 Call 0x1C17DEC

Method: System.Void SetDefaultFallbacks()

Disassembly:
	0x03242B98 BL 0x33E14E4
	0x03242B9C CBNZ X20, 0x3242BA8
	0x03242BA0 MOV X0, X21
	0x03242BA4 BL 0x1D2C690
	0x03242BA8 MOV X0, X20
	0x03242BAC BL 0x1C16F18
	0x03242BB0 BL 0x1990590
	0x03242BB4 STR X30, [X31 - 0x20]!
	0x03242BB8 STP X20, X19, [X31 + 0x10]
	0x03242BBC ADRP X19, 0x119A000
	0x03242BC0 ADRP X20, 0xEE0000
	0x03242BC4 LDRB W8, [X19 + 0x44A]
	0x03242BC8 LDR X20, [X20 + 0x3F8]
	0x03242BCC TBNZ X8, 0x0, 0x3242BE4
	0x03242BD0 ADRP X0, 0xEE0000
	0x03242BD4 LDR X0, [X0 + 0x3F8]
	0x03242BD8 BL 0x1C16CF4
	0x03242BDC MOVZ W8, 0x1
	0x03242BE0 STRB W8, [X19 + 0x44A]
	0x03242BE4 LDR X8, [X20]
	0x03242BE8 LDR X8, [X8 + 0xB8]
	0x03242BEC LDR X19, [X8]
	0x03242BF0 BL 0x1C16D44
	0x03242BF4 CBNZ X19, 0x3242C10
	0x03242BF8 BL 0x3244B74
	0x03242BFC MOV X19, X0
	0x03242C00 BL 0x1C16D44
	0x03242C04 LDR X8, [X20]
	0x03242C08 LDR X8, [X8 + 0xB8]
	0x03242C0C STR X19, [X8]
	0x03242C10 LDR X8, [X20]
	0x03242C14 LDR X8, [X8 + 0xB8]
	0x03242C18 LDR X19, [X8]
	0x03242C1C BL 0x1C16D44
	0x03242C20 MOV X0, X19
	0x03242C24 LDP X20, X19, [X31 + 0x10]
	0x03242C28 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x119B000
	007 Move X22, 0xEE1000
	008 Move X21, 0xEE1000
	009 Move W8, [X20+1074]
	010 Move X22, [X22+2368]
	011 Move X21, [X21+2376]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xEE1000
	018 Move X0, [X0+2376]
	019 Call 0x1C17CF4
	020 Move X0, 0xEE1000
	021 Move X0, [X0+2368]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+1074], W8
	025 Move X0, [X22]
	026 Call 0x1C17F10
	027 Move X1, X19
	028 Move X2, X31
	029 Move X20, X0
	030 Call InternalEncoderBestFitFallback..ctor, X0, X1
	031 Move [X19+40], X20
	032 Move X0, [X21]
	033 Call 0x1C17F10
	034 Move X1, X19
	035 Move X2, X31
	036 Move X20, X0
	037 Call InternalDecoderBestFitFallback..ctor, X0, X1
	038 Move [X19+48], X20
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Return 

Method: System.Void OnDeserializing()

Disassembly:
	0x03242C2C RET
	0x03242C30 STR X30, [X31 - 0x20]!
	0x03242C34 STP X20, X19, [X31 + 0x10]
	0x03242C38 ADRP X19, 0x119A000

ISIL:
	001 Move W8, 1
	002 Move [X0+40], X31
	003 Move [X0+48], X31
	004 Move [X0+33], W8
	005 Return 

Method: System.Void OnDeserialized()

Disassembly:
	0x03242C3C ADRP X20, 0xEE0000
	0x03242C40 LDRB W8, [X19 + 0x44C]
	0x03242C44 LDR X20, [X20 + 0x3F8]
	0x03242C48 TBNZ X8, 0x0, 0x3242C6C
	0x03242C4C ADRP X0, 0xEE0000
	0x03242C50 LDR X0, [X0 + 0x3F8]
	0x03242C54 BL 0x1C16CF4
	0x03242C58 ADRP X0, 0xEE0000
	0x03242C5C LDR X0, [X0 + 0x8D0]
	0x03242C60 BL 0x1C16CF4
	0x03242C64 MOVZ W8, 0x1
	0x03242C68 STRB W8, [X19 + 0x44C]
	0x03242C6C LDR X8, [X20]
	0x03242C70 LDR X8, [X8 + 0xB8]
	0x03242C74 LDR X19, [X8 + 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+40]
	004 Move X19, X0
	005 Compare X8, 0
	006 JumpIfEqual {10}
	007 Move X8, [X19+48]
	008 Compare X8, 0
	009 JumpIfNotEqual {17}
	010 Move X8, [X19]
	011 Move W9, 1
	012 Move [X19+32], W9
	013 Move X0, X19
	014 Move X9, [X8+392]
	015 Move X1, [X8+400]
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move [X19+24], X31
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Return 

Method: System.Void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx)

Disassembly:
	0x03242C78 BL 0x1C16D44
	0x03242C7C CBZ X19, 0x3242C8C
	0x03242C80 LDR X8, [X20]
	0x03242C84 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move W8, 1
	002 Move [X0+40], X31
	003 Move [X0+48], X31
	004 Move [X0+33], W8
	005 Return 

Method: System.Void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx)

Disassembly:
	0x03242C88 B 0x3242CC0
	0x03242C8C ADRP X8, 0xEE0000
	0x03242C90 LDR X8, [X8 + 0x8D0]
	0x03242C94 LDR X0, [X8]
	0x03242C98 BL 0x1C16F10
	0x03242C9C MOVZ W2, 0x1
	0x03242CA0 MOV W1, W31
	0x03242CA4 MOV X3, X31
	0x03242CA8 MOV X19, X0
	0x03242CAC BL 0x323D7C4
	0x03242CB0 BL 0x1C16D44
	0x03242CB4 LDR X8, [X20]
	0x03242CB8 LDR X8, [X8 + 0xB8]
	0x03242CBC STR X19, [X8 + 0x8]
	0x03242CC0 LDR X19, [X8 + 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+40]
	004 Move X19, X0
	005 Compare X8, 0
	006 JumpIfEqual {10}
	007 Move X8, [X19+48]
	008 Compare X8, 0
	009 JumpIfNotEqual {17}
	010 Move X8, [X19]
	011 Move W9, 1
	012 Move [X19+32], W9
	013 Move X0, X19
	014 Move X9, [X8+392]
	015 Move X1, [X8+400]
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move [X19+24], X31
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Return 

Method: System.Void OnSerializing(System.Runtime.Serialization.StreamingContext ctx)

Disassembly:
	0x03242CC4 BL 0x1C16D44
	0x03242CC8 MOV X0, X19

ISIL:
	001 Move [X0+24], X31
	002 Return 

Method: System.Void DeserializeEncoding(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)

Disassembly:
	0x03242CCC LDP X20, X19, [X31 + 0x10]
	0x03242CD0 LDR X30, [X31], #0x20
	0x03242CD4 RET
	0x03242CD8 STR X30, [X31 - 0x20]!
	0x03242CDC STP X20, X19, [X31 + 0x10]
	0x03242CE0 ADRP X19, 0x119A000
	0x03242CE4 ADRP X20, 0xEE0000
	0x03242CE8 LDRB W8, [X19 + 0x44D]
	0x03242CEC LDR X20, [X20 + 0x3F8]
	0x03242CF0 TBNZ X8, 0x0, 0x3242D14
	0x03242CF4 ADRP X0, 0xEE0000
	0x03242CF8 LDR X0, [X0 + 0x3F8]
	0x03242CFC BL 0x1C16CF4
	0x03242D00 ADRP X0, 0xEE0000
	0x03242D04 LDR X0, [X0 + 0x8D0]
	0x03242D08 BL 0x1C16CF4
	0x03242D0C MOVZ W8, 0x1
	0x03242D10 STRB W8, [X19 + 0x44D]
	0x03242D14 LDR X8, [X20]
	0x03242D18 LDR X8, [X8 + 0xB8]
	0x03242D1C LDR X19, [X8 + 0x10]
	0x03242D20 BL 0x1C16D44
	0x03242D24 CBZ X19, 0x3242D34
	0x03242D28 LDR X8, [X20]
	0x03242D2C LDR X8, [X8 + 0xB8]
	0x03242D30 B 0x3242D68
	0x03242D34 ADRP X8, 0xEE0000
	0x03242D38 LDR X8, [X8 + 0x8D0]
	0x03242D3C LDR X0, [X8]
	0x03242D40 BL 0x1C16F10
	0x03242D44 MOVZ W1, 0x1
	0x03242D48 MOVZ W2, 0x1
	0x03242D4C MOV X3, X31
	0x03242D50 MOV X19, X0
	0x03242D54 BL 0x323D7C4
	0x03242D58 BL 0x1C16D44
	0x03242D5C LDR X8, [X20]
	0x03242D60 LDR X8, [X8 + 0xB8]
	0x03242D64 STR X19, [X8 + 0x10]
	0x03242D68 LDR X19, [X8 + 0x10]
	0x03242D6C BL 0x1C16D44
	0x03242D70 MOV X0, X19
	0x03242D74 LDP X20, X19, [X31 + 0x10]
	0x03242D78 LDR X30, [X31], #0x20
	0x03242D7C RET
	0x03242D80 STR X30, [X31 - 0x20]!
	0x03242D84 STP X20, X19, [X31 + 0x10]
	0x03242D88 ADRP X19, 0x119A000
	0x03242D8C ADRP X20, 0xEE0000
	0x03242D90 LDRB W8, [X19 + 0x44E]
	0x03242D94 LDR X20, [X20 + 0x3F8]
	0x03242D98 TBNZ X8, 0x0, 0x3242DBC
	0x03242D9C ADRP X0, 0xEE0000
	0x03242DA0 LDR X0, [X0 + 0x3F8]
	0x03242DA4 BL 0x1C16CF4
	0x03242DA8 ADRP X0, 0xEE0000
	0x03242DAC LDR X0, [X0 + 0x728]
	0x03242DB0 BL 0x1C16CF4
	0x03242DB4 MOVZ W8, 0x1
	0x03242DB8 STRB W8, [X19 + 0x44E]
	0x03242DBC LDR X8, [X20]
	0x03242DC0 LDR X8, [X8 + 0xB8]
	0x03242DC4 LDR X19, [X8 + 0x18]
	0x03242DC8 BL 0x1C16D44
	0x03242DCC CBZ X19, 0x3242DDC
	0x03242DD0 LDR X8, [X20]
	0x03242DD4 LDR X8, [X8 + 0xB8]
	0x03242DD8 B 0x3242E08
	0x03242DDC ADRP X8, 0xEE0000
	0x03242DE0 LDR X8, [X8 + 0x728]
	0x03242DE4 LDR X0, [X8]
	0x03242DE8 BL 0x1C16F10
	0x03242DEC MOV X1, X31
	0x03242DF0 MOV X19, X0
	0x03242DF4 BL 0x3238348
	0x03242DF8 BL 0x1C16D44
	0x03242DFC LDR X8, [X20]
	0x03242E00 LDR X8, [X8 + 0xB8]
	0x03242E04 STR X19, [X8 + 0x18]
	0x03242E08 LDR X19, [X8 + 0x18]
	0x03242E0C BL 0x1C16D44
	0x03242E10 MOV X0, X19
	0x03242E14 LDP X20, X19, [X31 + 0x10]
	0x03242E18 LDR X30, [X31], #0x20
	0x03242E1C RET
	0x03242E20 STR X30, [X31 - 0x20]!
	0x03242E24 STP X20, X19, [X31 + 0x10]
	0x03242E28 ADRP X19, 0x119A000
	0x03242E2C ADRP X20, 0xEE0000
	0x03242E30 LDRB W8, [X19 + 0x450]
	0x03242E34 LDR X20, [X20 + 0x3F8]
	0x03242E38 TBNZ X8, 0x0, 0x3242E5C
	0x03242E3C ADRP X0, 0xEE0000
	0x03242E40 LDR X0, [X0 + 0x3F8]
	0x03242E44 BL 0x1C16CF4
	0x03242E48 ADRP X0, 0xEE0000
	0x03242E4C LDR X0, [X0 + 0x6F8]
	0x03242E50 BL 0x1C16CF4
	0x03242E54 MOVZ W8, 0x1
	0x03242E58 STRB W8, [X19 + 0x450]
	0x03242E5C LDR X8, [X20]
	0x03242E60 LDR X8, [X8 + 0xB8]
	0x03242E64 LDR X19, [X8 + 0x28]
	0x03242E68 BL 0x1C16D44
	0x03242E6C CBZ X19, 0x3242E7C
	0x03242E70 LDR X8, [X20]
	0x03242E74 LDR X8, [X8 + 0xB8]
	0x03242E78 B 0x3242EB0
	0x03242E7C ADRP X8, 0xEE0000
	0x03242E80 LDR X8, [X8 + 0x6F8]
	0x03242E84 LDR X0, [X8]
	0x03242E88 BL 0x1C16F10
	0x03242E8C MOVZ W2, 0x1
	0x03242E90 MOV W1, W31
	0x03242E94 MOV X3, X31
	0x03242E98 MOV X19, X0
	0x03242E9C BL 0x3235CB8
	0x03242EA0 BL 0x1C16D44
	0x03242EA4 LDR X8, [X20]
	0x03242EA8 LDR X8, [X8 + 0xB8]
	0x03242EAC STR X19, [X8 + 0x28]
	0x03242EB0 LDR X19, [X8 + 0x28]
	0x03242EB4 BL 0x1C16D44
	0x03242EB8 MOV X0, X19
	0x03242EBC LDP X20, X19, [X31 + 0x10]
	0x03242EC0 LDR X30, [X31], #0x20
	0x03242EC4 RET
	0x03242EC8 STR X30, [X31 - 0x20]!
	0x03242ECC STP X20, X19, [X31 + 0x10]
	0x03242ED0 ADRP X19, 0x119A000
	0x03242ED4 ADRP X20, 0xEE0000
	0x03242ED8 LDRB W8, [X19 + 0x43D]
	0x03242EDC LDR X20, [X20 + 0x3F8]
	0x03242EE0 TBNZ X8, 0x0, 0x3242F04
	0x03242EE4 ADRP X0, 0xEE0000
	0x03242EE8 LDR X0, [X0 + 0xA18]
	0x03242EEC BL 0x1C16CF4
	0x03242EF0 ADRP X0, 0xEE0000
	0x03242EF4 LDR X0, [X0 + 0x3F8]
	0x03242EF8 BL 0x1C16CF4
	0x03242EFC MOVZ W8, 0x1
	0x03242F00 STRB W8, [X19 + 0x43D]
	0x03242F04 LDR X8, [X20]
	0x03242F08 LDR X8, [X8 + 0xB8]
	0x03242F0C LDR X19, [X8 + 0x30]
	0x03242F10 BL 0x1C16D44
	0x03242F14 CBZ X19, 0x3242F24
	0x03242F18 LDR X8, [X20]
	0x03242F1C LDR X8, [X8 + 0xB8]
	0x03242F20 B 0x3242F50
	0x03242F24 ADRP X8, 0xEE0000
	0x03242F28 LDR X8, [X8 + 0xA18]
	0x03242F2C LDR X0, [X8]
	0x03242F30 BL 0x1C16F10
	0x03242F34 MOV X1, X31
	0x03242F38 MOV X19, X0
	0x03242F3C BL 0x33FAAF4
	0x03242F40 BL 0x1C16D44
	0x03242F44 LDR X8, [X20]
	0x03242F48 LDR X8, [X8 + 0xB8]
	0x03242F4C STR X19, [X8 + 0x30]
	0x03242F50 LDR X19, [X8 + 0x30]
	0x03242F54 BL 0x1C16D44
	0x03242F58 MOV X0, X19
	0x03242F5C LDP X20, X19, [X31 + 0x10]
	0x03242F60 LDR X30, [X31], #0x20
	0x03242F64 RET
	0x03242F68 STR X30, [X31 - 0x20]!
	0x03242F6C STP X20, X19, [X31 + 0x10]
	0x03242F70 ADRP X19, 0x119A000
	0x03242F74 ADRP X20, 0xEE0000
	0x03242F78 LDRB W8, [X19 + 0x43E]
	0x03242F7C LDR X20, [X20 + 0x3F8]
	0x03242F80 TBNZ X8, 0x0, 0x3242FA4
	0x03242F84 ADRP X0, 0xEE0000
	0x03242F88 LDR X0, [X0 + 0x3F8]
	0x03242F8C BL 0x1C16CF4
	0x03242F90 ADRP X0, 0xEE0000
	0x03242F94 LDR X0, [X0 + 0x440]
	0x03242F98 BL 0x1C16CF4
	0x03242F9C MOVZ W8, 0x1
	0x03242FA0 STRB W8, [X19 + 0x43E]
	0x03242FA4 LDR X8, [X20]
	0x03242FA8 LDR X8, [X8 + 0xB8]
	0x03242FAC LDR X19, [X8 + 0x38]
	0x03242FB0 BL 0x1C16D44
	0x03242FB4 CBZ X19, 0x3242FC4
	0x03242FB8 LDR X8, [X20]
	0x03242FBC LDR X8, [X8 + 0xB8]
	0x03242FC0 B 0x3242FF0
	0x03242FC4 ADRP X8, 0xEE0000
	0x03242FC8 LDR X8, [X8 + 0x440]
	0x03242FCC LDR X0, [X8]
	0x03242FD0 BL 0x1C16F10
	0x03242FD4 MOV X1, X31
	0x03242FD8 MOV X19, X0
	0x03242FDC BL 0x323109C
	0x03242FE0 BL 0x1C16D44
	0x03242FE4 LDR X8, [X20]
	0x03242FE8 LDR X8, [X8 + 0xB8]
	0x03242FEC STR X19, [X8 + 0x38]
	0x03242FF0 LDR X19, [X8 + 0x38]
	0x03242FF4 BL 0x1C16D44
	0x03242FF8 MOV X0, X19
	0x03242FFC LDP X20, X19, [X31 + 0x10]
	0x03243000 LDR X30, [X31], #0x20
	0x03243004 RET
	0x03243008 SUB X31, X31, 0x60
	0x0324300C STP X30, X23, [X31 + 0x30]
	0x03243010 STP X22, X21, [X31 + 0x40]
	0x03243014 STP X20, X19, [X31 + 0x50]
	0x03243018 ADRP X19, 0x1199000
	0x0324301C ADRP X23, 0xEDF000
	0x03243020 LDRB W8, [X19 + 0x471]
	0x03243024 LDR X23, [X23 + 0x9D8]
	0x03243028 MOV X20, X1
	0x0324302C MOV X21, X0
	0x03243030 TBNZ X8, 0x0, 0x3243078
	0x03243034 ADRP X0, 0xEDF000
	0x03243038 LDR X0, [X0 + 0x9D8]
	0x0324303C BL 0x1C16CF4
	0x03243040 ADRP X0, 0xEB0000
	0x03243044 LDR X0, [X0 + 0x6C0]
	0x03243048 BL 0x1C16CF4
	0x0324304C ADRP X0, 0xEDF000
	0x03243050 LDR X0, [X0 + 0xA20]
	0x03243054 BL 0x1C16CF4
	0x03243058 ADRP X0, 0xEDF000
	0x0324305C LDR X0, [X0 + 0xA28]
	0x03243060 BL 0x1C16CF4
	0x03243064 ADRP X0, 0xEDF000
	0x03243068 LDR X0, [X0 + 0xA30]
	0x0324306C BL 0x1C16CF4
	0x03243070 MOVZ W8, 0x1
	0x03243074 STRB W8, [X19 + 0x471]
	0x03243078 LDR X0, [X23]
	0x0324307C STR W31, [X31 + 0x20]
	0x03243080 LDR W8, [X0 + 0xE0]
	0x03243084 CBNZ W8, 0x3243090
	0x03243088 BL 0x1C16DFC
	0x0324308C LDR X0, [X23]
	0x03243090 LDR X8, [X0 + 0xB8]
	0x03243094 LDR X19, [X8 + 0x8]
	0x03243098 STRB W31, [X31 + 0x2C]
	0x0324309C ADD X1, X31, 0x2C
	0x032430A0 MOV X0, X19
	0x032430A4 MOV X2, X31
	0x032430A8 BL 0x33DE64C
	0x032430AC LDR X0, [X23]
	0x032430B0 LDR W8, [X0 + 0xE0]
	0x032430B4 CBNZ W8, 0x32430C0
	0x032430B8 BL 0x1C16DFC
	0x032430BC LDR X0, [X23]
	0x032430C0 LDR X8, [X0 + 0xB8]
	0x032430C4 LDRB W9, [X8 + 0x18]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x119B000
	008 Move W8, [X21+1075]
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {56}
	015 Move X0, 0xEDB000
	016 Move X0, [X0+584]
	017 Call 0x1C17CF4
	018 Move X0, 0xEB2000
	019 Move X0, [X0+2904]
	020 Call 0x1C17CF4
	021 Move X0, 0xEE1000
	022 Move X0, [X0+2384]
	023 Call 0x1C17CF4
	024 Move X0, 0xEE1000
	025 Move X0, [X0+2392]
	026 Call 0x1C17CF4
	027 Move X0, 0xEE1000
	028 Move X0, [X0+2400]
	029 Call 0x1C17CF4
	030 Move X0, 0xEE1000
	031 Move X0, [X0+2408]
	032 Call 0x1C17CF4
	033 Move X0, 0xED9000
	034 Move X0, [X0+3456]
	035 Call 0x1C17CF4
	036 Move X0, 0xEB2000
	037 Move X0, [X0+1880]
	038 Call 0x1C17CF4
	039 Move X0, 0xEB2000
	040 Move X0, [X0+1728]
	041 Call 0x1C17CF4
	042 Move X0, 0xEE1000
	043 Move X0, [X0+2416]
	044 Call 0x1C17CF4
	045 Move X0, 0xEE1000
	046 Move X0, [X0+2424]
	047 Call 0x1C17CF4
	048 Move X0, 0xEE1000
	049 Move X0, [X0+2432]
	050 Call 0x1C17CF4
	051 Move X0, 0xEE1000
	052 Move X0, [X0+2440]
	053 Call 0x1C17CF4
	054 Move W8, 1
	055 Move [X21+1075], W8
	056 Compare X20, 0
	057 JumpIfEqual {198}
	058 Move X22, 0xEB2000
	059 Move X22, [X22+1728]
	060 Move X8, 0xED9000
	061 Move X23, 0xEE1000
	062 Move X0, [X22]
	063 Move X8, [X8+3456]
	064 Move W9, [X0+224]
	065 Move X21, [X8]
	066 Move X23, [X23+2432]
	067 Compare W9, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move X0, X21
	071 Move X1, X31
	072 Call Type.GetTypeFromHandle, X0
	073 Move X1, [X23]
	074 Move X2, X0
	075 Move X0, X20
	076 Move X3, X31
	077 Call SerializationInfo.GetValue, X0, X1, X2
	078 Compare X0, 0
	079 JumpIfEqual {216}
	080 Move X8, 0xEB2000
	081 Move X8, [X8+1880]
	082 Move X9, [X0]
	083 Move X1, [X8]
	084 Move X8, [X9+64]
	085 Move X9, [X1+64]
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move X21, 0xEDB000
	088 Move X21, [X21+584]
	089 Call 0x1C17E08
	090 Move W8, [X0]
	091 Move [X19+24], X31
	092 Move [X19+16], W8
	093 Move X0, [X22]
	094 Move X21, [X21]
	095 Move W8, [X0+224]
	096 Compare W8, 0
	097 JumpIfNotEqual {99}
	098 Call 0x1C17DFC
	099 Move X0, X21
	100 Move X1, X31
	101 Call Type.GetTypeFromHandle, X0
	102 Move X8, 0xEE1000
	103 Move X8, [X8+2424]
	104 Move X2, X0
	105 Move X1, [X8]
	106 Move X0, X20
	107 Move X3, X31
	108 Call SerializationInfo.GetValue, X0, X1, X2
	109 Compare X0, 0
	110 JumpIfEqual {218}
	111 Move X8, 0xEB2000
	112 Move X8, [X8+2904]
	113 Move X9, [X0]
	114 Move X1, [X8]
	115 Move X8, [X9+64]
	116 Move X9, [X1+64]
	117 NotImplemented "Instruction CMP not yet implemented."
	118 Call 0x1C17E08
	119 Move W8, [X0]
	120 Move X9, 0xEE1000
	121 Move X9, [X9+2400]
	122 Move [X19+33], W8
	123 Move X0, [X9]
	124 Move X1, X31
	125 Call Type.GetTypeFromHandle, X0
	126 Move X8, 0xEE1000
	127 Move X8, [X8+2416]
	128 Move X2, X0
	129 Move X1, [X8]
	130 Move X0, X20
	131 Move X3, X31
	132 Call SerializationInfo.GetValue, X0, X1, X2
	133 Compare X0, 0
	134 JumpIfEqual {154}
	135 Move X8, 0xEE1000
	136 Move X8, [X8+2408]
	137 Move X9, [X0]
	138 Move X1, [X8]
	139 Move W10, [X9+304]
	140 Move W8, [X1+304]
	141 NotImplemented "Instruction CMP not yet implemented."
	142 Move X10, [X9+200]
	143 Subtract X9, X8, 1
	144 Move X10, [X10]
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Move [X19+40], X0
	147 Move X10, [X0]
	148 Move W11, [X10+304]
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Move X8, [X10+200]
	151 Move X8, [X8]
	152 NotImplemented "Instruction CMP not yet implemented."
	153 Call 0x1C181E0
	154 Move [X19+40], X31
	155 Move X8, 0xEE1000
	156 Move X8, [X8+2384]
	157 Move X0, [X8]
	158 Move X1, X31
	159 Call Type.GetTypeFromHandle, X0
	160 Move X8, 0xEE1000
	161 Move X8, [X8+2440]
	162 Move X2, X0
	163 Move X1, [X8]
	164 Move X0, X20
	165 Move X3, X31
	166 Call SerializationInfo.GetValue, X0, X1, X2
	167 Compare X0, 0
	168 JumpIfEqual {188}
	169 Move X8, 0xEE1000
	170 Move X8, [X8+2392]
	171 Move X9, [X0]
	172 Move X1, [X8]
	173 Move W10, [X9+304]
	174 Move W8, [X1+304]
	175 NotImplemented "Instruction CMP not yet implemented."
	176 Move X10, [X9+200]
	177 Subtract X9, X8, 1
	178 Move X10, [X10]
	179 NotImplemented "Instruction CMP not yet implemented."
	180 Move [X19+48], X0
	181 Move X10, [X0]
	182 Move W11, [X10+304]
	183 NotImplemented "Instruction CMP not yet implemented."
	184 Move X8, [X10+200]
	185 Move X8, [X8]
	186 NotImplemented "Instruction CMP not yet implemented."
	187 Call 0x1C181E0
	188 Move [X19+48], X31
	189 Move X20, [X31+32]
	190 Move X19, [X31+40]
	191 Move X22, [X31+16]
	192 Move X21, [X31+24]
	193 Move X30, [X31+48]
	194 Move X23, [X31+56]
	195 Return 
	196 Call 0x1C181E0
	197 Call 0x1C181E0
	198 Move X0, 0xEB7000
	199 Move X0, [X0+1320]
	200 Call 0x1C17D08
	201 Call 0x1C17F10
	202 Move X19, X0
	203 Move X0, 0xEDC000
	204 Move X0, [X0+728]
	205 Call 0x1C17D08
	206 Move X1, X0
	207 Move X0, X19
	208 Move X2, X31
	209 Call ArgumentNullException..ctor, X0, X1
	210 Move X0, 0xEE1000
	211 Move X0, [X0+2448]
	212 Call 0x1C17D08
	213 Move X1, X0
	214 Move X0, X19
	215 Call 0x1C17DEC
	216 Call 0x1C17F20
	217 Call 0x1C181E0
	218 Call 0x1C17F20
	219 Call 0x1C181E0
	220 Move X20, X0
	221 NotImplemented "Instruction CMP not yet implemented."
	222 Move X0, X20
	223 Call 0x3EB2AD0
	224 Move X20, X0
	225 Move X0, 0xEDB000
	226 Move X0, [X0+736]
	227 Call 0x1C17D08
	228 Move X8, [X20]
	229 Move X1, [X8]
	230 Call 0x1C18270
	231 Move TEMP, X0
	232 And TEMP, TEMP, 1
	233 Compare TEMP, 1
	234 JumpIfNotEqual {249}
	235 Call 0x3EB2AE0
	236 Move X8, [X19]
	237 Move W9, 257
	238 NotImplemented "Instruction STRH not yet implemented."
	239 Move X0, X19
	240 Move X2, [X8+392]
	241 Move X1, [X8+400]
	242 Move X20, [X31+32]
	243 Move X19, [X31+40]
	244 Move X22, [X31+16]
	245 Move X21, [X31+24]
	246 Move X30, [X31+48]
	247 Move X23, [X31+56]
	248 CallNoReturn X2
	249 Move W0, 8
	250 Call 0x3EB2AF0
	251 Move X8, [X20]
	252 Move [X0], X8
	253 Move X1, 0xC72000
	254 Add X1, X1, 3672
	255 Move X2, X31
	256 Call 0x3EB2B00
	257 Move X20, X0
	258 Call 0x3EB2AE0
	259 Move X0, X20
	260 Call 0x1D2D690
	261 Call 0x1991590

Method: System.Void SerializeEncoding(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)

Disassembly:
	0x032430C8 CBZ W9, 0x3243104
	0x032430CC MOV X21, X31
	0x032430D0 MOV X20, X31
	0x032430D4 LDRB W8, [X31 + 0x2C]
	0x032430D8 CBZ W8, 0x32430E8
	0x032430DC MOV X0, X19
	0x032430E0 MOV X1, X31
	0x032430E4 BL 0x33E14E4
	0x032430E8 CBNZ X21, 0x3243288
	0x032430EC MOV X0, X20
	0x032430F0 LDP X20, X19, [X31 + 0x50]
	0x032430F4 LDP X22, X21, [X31 + 0x40]
	0x032430F8 LDP X30, X23, [X31 + 0x30]
	0x032430FC ADD X31, X31, 0x60
	0x03243100 RET
	0x03243104 LDR W9, [X0 + 0xE0]
	0x03243108 CBNZ W9, 0x3243118
	0x0324310C BL 0x1C16DFC
	0x03243110 LDR X8, [X23]
	0x03243114 LDR X8, [X8 + 0xB8]
	0x03243118 LDR X0, [X8 + 0x10]
	0x0324311C MOV X1, X31
	0x03243120 MOV X2, X31
	0x03243124 BL 0x32D5BF8
	0x03243128 TBZ X0, 0x0, 0x3243198
	0x0324312C ADRP X8, 0xEDF000
	0x03243130 LDR X8, [X8 + 0xA30]
	0x03243134 LDR X0, [X8]
	0x03243138 MOV X1, X31
	0x0324313C BL 0x32D59A8
	0x03243140 MOV X22, X0
	0x03243144 LDR X0, [X23]
	0x03243148 LDR W8, [X0 + 0xE0]
	0x0324314C CBZ W8, 0x324315C
	0x03243150 LDR X8, [X0 + 0xB8]
	0x03243154 STR X22, [X8 + 0x10]
	0x03243158 B 0x3243184
	0x0324315C BL 0x1C16DFC
	0x03243160 LDR X0, [X23]
	0x03243164 LDR W8, [X0 + 0xE0]
	0x03243168 LDR X9, [X0 + 0xB8]
	0x0324316C STR X22, [X9 + 0x10]
	0x03243170 CBNZ W8, 0x3243184
	0x03243174 BL 0x1C16DFC
	0x03243178 LDR X8, [X23]
	0x0324317C LDR X8, [X8 + 0xB8]
	0x03243180 LDR X22, [X8 + 0x10]
	0x03243184 MOV X0, X22
	0x03243188 MOV X1, X31
	0x0324318C MOV X2, X31
	0x03243190 BL 0x32D5BF8
	0x03243194 TBNZ X0, 0x0, 0x32430CC
	0x03243198 LDR X0, [X23]
	0x0324319C LDR W8, [X0 + 0xE0]
	0x032431A0 CBNZ W8, 0x32431AC
	0x032431A4 BL 0x1C16DFC
	0x032431A8 LDR X0, [X23]
	0x032431AC LDR X8, [X0 + 0xB8]
	0x032431B0 LDR X0, [X8 + 0x10]
	0x032431B4 CBZ X0, 0x3243290
	0x032431B8 ADRP X9, 0xEDF000
	0x032431BC LDR X8, [X0]
	0x032431C0 LDR X9, [X9 + 0xA28]
	0x032431C4 LDR X2, [X8 + 0x240]
	0x032431C8 LDR X1, [X9]
	0x032431CC LDR X9, [X8 + 0x238]
	0x032431D0 BLR X9
	0x032431D4 ADRP X8, 0xEB0000
	0x032431D8 LDR X8, [X8 + 0x6C0]
	0x032431DC MOV X22, X0
	0x032431E0 LDR X0, [X8]
	0x032431E4 LDR W8, [X0 + 0xE0]
	0x032431E8 CBNZ W8, 0x32431F0
	0x032431EC BL 0x1C16DFC
	0x032431F0 MOV X0, X22
	0x032431F4 MOV X1, X31
	0x032431F8 MOV X2, X31
	0x032431FC BL 0x3395194
	0x03243200 TBNZ X0, 0x0, 0x32430CC
	0x03243204 CBZ X22, 0x3243294
	0x03243208 ADRP X9, 0xEDF000
	0x0324320C LDR X8, [X22]
	0x03243210 LDR X9, [X9 + 0xA20]
	0x03243214 LDR X1, [X9]
	0x03243218 LDR X9, [X8 + 0x828]
	0x0324321C LDR X8, [X8 + 0x830]
	0x03243220 MOVZ W2, 0x1018
	0x03243224 MOV X0, X22
	0x03243228 MOV X3, X31
	0x0324322C MOV X4, X31
	0x03243230 MOV X5, X31
	0x03243234 MOV X6, X31
	0x03243238 MOV X7, X31
	0x0324323C STP X31, X8, [X31]
	0x03243240 BLR X9
	0x03243244 MOV X4, X0
	0x03243248 CBZ X0, 0x32430CC
	0x0324324C LDR X8, [X22]
	0x03243250 LDR X9, [X8 + 0x828]
	0x03243254 LDR X8, [X8 + 0x830]
	0x03243258 MOVZ W2, 0x114
	0x0324325C MOV X0, X22
	0x03243260 MOV X1, X21
	0x03243264 MOV X3, X31
	0x03243268 MOV X5, X20
	0x0324326C MOV X6, X31

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x119A000
	011 Move W8, [X21+1076]
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {41}
	018 Move X0, 0xEE0000
	019 Move X0, [X0+2416]
	020 Call 0x1C17CF4
	021 Move X0, 0xEE0000
	022 Move X0, [X0+2424]
	023 Call 0x1C17CF4
	024 Move X0, 0xEE0000
	025 Move X0, [X0+2456]
	026 Call 0x1C17CF4
	027 Move X0, 0xEE0000
	028 Move X0, [X0+2464]
	029 Call 0x1C17CF4
	030 Move X0, 0xEE0000
	031 Move X0, [X0+2432]
	032 Call 0x1C17CF4
	033 Move X0, 0xEE0000
	034 Move X0, [X0+2440]
	035 Call 0x1C17CF4
	036 Move X0, 0xEE0000
	037 Move X0, [X0+2472]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X21+1076], W8
	041 Compare X19, 0
	042 JumpIfEqual {102}
	043 Move X8, 0xEE0000
	044 Move X8, [X8+2424]
	045 Move X21, 0xEE0000
	046 Move X22, 0xEE0000
	047 Move X23, 0xEE0000
	048 Move X21, [X21+2416]
	049 Move X22, [X22+2440]
	050 Move X23, [X23+2432]
	051 Move W2, [X20+33]
	052 Move X1, [X8]
	053 Move X24, 0xEE0000
	054 Move X25, 0xEE0000
	055 Move X26, 0xEE0000
	056 Move X24, [X24+2472]
	057 Move X25, [X25+2464]
	058 Move X26, [X26+2456]
	059 Move X0, X19
	060 Move X3, X31
	061 Call SerializationInfo.AddValue, X0, X1, X2
	062 Move X2, [X20+40]
	063 Move X1, [X21]
	064 Move X0, X19
	065 Move X3, X31
	066 Call SerializationInfo.AddValue, X0, X1, X2
	067 Move X2, [X20+48]
	068 Move X1, [X22]
	069 Move X0, X19
	070 Move X3, X31
	071 Call SerializationInfo.AddValue, X0, X1, X2
	072 Move W2, [X20+16]
	073 Move X1, [X23]
	074 Move X0, X19
	075 Move X3, X31
	076 Call SerializationInfo.AddValue, X0, X1, X2
	077 Move X1, [X24]
	078 Move X0, X19
	079 Move X2, X31
	080 Move X3, X31
	081 Call SerializationInfo.AddValue, X0, X1, X2
	082 Move W2, [X20+16]
	083 Move X1, [X25]
	084 Move X0, X19
	085 Move X3, X31
	086 Call SerializationInfo.AddValue, X0, X1, X2
	087 Move X1, [X26]
	088 Move X0, X19
	089 Move X20, [X31+64]
	090 Move X19, [X31+72]
	091 Move X22, [X31+48]
	092 Move X21, [X31+56]
	093 Move X24, [X31+32]
	094 Move X23, [X31+40]
	095 Move X26, [X31+16]
	096 Move X25, [X31+24]
	097 Move X2, X31
	098 Move X3, X31
	099 Move X30, [X31+80]
	100 Call SerializationInfo.AddValue, X0, X1, X2
	101 Return 
	102 Move X0, 0xEB6000
	103 Move X0, [X0+1320]
	104 Call 0x1C17D08
	105 Call 0x1C17F10
	106 Move X19, X0
	107 Move X0, 0xEDB000
	108 Move X0, [X0+728]
	109 Call 0x1C17D08
	110 Move X1, X0
	111 Move X0, X19
	112 Move X2, X31
	113 Call ArgumentNullException..ctor, X0, X1
	114 Move X0, 0xEE0000
	115 Move X0, [X0+2480]
	116 Call 0x1C17D08
	117 Move X1, X0
	118 Move X0, X19
	119 Call 0x1C17DEC

Method: System.Object get_InternalSyncObject()

Disassembly:
	0x03243270 MOV X7, X31
	0x03243274 STP X31, X8, [X31]
	0x03243278 BLR X9
	0x0324327C MOV X20, X0
	0x03243280 MOV X21, X31
	0x03243284 B 0x32430D4
	0x03243288 MOV X0, X21
	0x0324328C BL 0x1C16F18
	0x03243290 BL 0x1C16F20
	0x03243294 BL 0x1C16F20
	0x03243298 B 0x3243490
	0x0324329C MOV X21, X1
	0x032432A0 CMP W21, 0x1
	0x032432A4 MOV X20, X0
	0x032432A8 B.NE 0x32436C8
	0x032432AC MOV X0, X20
	0x032432B0 BL 0x3EB1AD0
	0x032432B4 MOV X20, X0
	0x032432B8 ADRP X0, 0xED9000
	0x032432BC LDR X0, [X0 + 0x28]
	0x032432C0 BL 0x1C16D08
	0x032432C4 LDR X8, [X20]
	0x032432C8 LDR X1, [X8]
	0x032432CC BL 0x1C17270
	0x032432D0 TBZ X0, 0x0, 0x32432DC
	0x032432D4 MOVZ W21, 0x11
	0x032432D8 B 0x32432FC
	0x032432DC ADRP X0, 0xEDE000
	0x032432E0 LDR X0, [X0 + 0x690]
	0x032432E4 BL 0x1C16D08
	0x032432E8 LDR X8, [X20]
	0x032432EC LDR X1, [X8]
	0x032432F0 BL 0x1C17270
	0x032432F4 TBZ X0, 0x0, 0x324332C
	0x032432F8 MOVZ W21, 0x12
	0x032432FC LDR X8, [X20]
	0x03243300 LDRSW X9, [X31 + 0x20]
	0x03243304 ADD X10, X31, 0x10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x119A000
	005 Move X20, 0xEE0000
	006 Move W8, [X19+1077]
	007 Move X20, [X20+1016]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xEE0000
	013 Move X0, [X0+1016]
	014 Call 0x1C17CF4
	015 Move X0, 0xEB7000
	016 Move X0, [X0+3264]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+1077], W8
	020 Move X8, [X20]
	021 Move X8, [X8+184]
	022 Move X0, [X8+72]
	023 Compare X0, 0
	024 JumpIfNotEqual {41}
	025 Move X8, 0xEB7000
	026 Move X8, [X8+3264]
	027 Move X0, [X8]
	028 Call 0x1C17F10
	029 Move X1, X31
	030 Move X19, X0
	031 Call Object..ctor, X0
	032 Move X8, [X20]
	033 Move X1, X19
	034 Move X2, X31
	035 Move X8, [X8+184]
	036 Add X0, X8, 72
	037 Call 0x1C25138
	038 Move X8, [X20]
	039 Move X8, [X8+184]
	040 Move X0, [X8+72]
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Return X0

Method: System.Text.Encoding GetEncoding(System.Int32 codepage)

Disassembly:
	0x03243308 STR X8, [X10, X9, LSL #3]
	0x0324330C ADD W8, W9, 0x1
	0x03243310 STR W8, [X31 + 0x20]
	0x03243314 BL 0x3EB1AE0
	0x03243318 CMP W21, 0x11
	0x0324331C B.EQ 0x324359C
	0x03243320 CMP W21, 0x12
	0x03243324 B.EQ 0x324359C
	0x03243328 B 0x32430CC
	0x0324332C MOVZ W0, 0x8
	0x03243330 BL 0x3EB1AF0
	0x03243334 LDR X8, [X20]
	0x03243338 STR X8, [X0]
	0x0324333C ADRP X1, 0xC71000
	0x03243340 ADD X1, X1, 0xE58
	0x03243344 MOV X2, X31
	0x03243348 BL 0x3EB1B00
	0x0324334C B 0x32436A4
	0x03243350 B 0x32436C0
	0x03243354 MOV X21, X1
	0x03243358 MOV X20, X0
	0x0324335C BL 0x3EB1AE0
	0x03243360 B 0x32436C8
	0x03243364 B 0x32436C0
	0x03243368 B 0x32435E8
	0x0324336C B 0x3243370
	0x03243370 MOV X21, X1
	0x03243374 MOV X20, X0
	0x03243378 CMP W21, 0x1
	0x0324337C B.NE 0x32436C8
	0x03243380 MOV X0, X20
	0x03243384 BL 0x3EB1AD0
	0x03243388 MOV X20, X0
	0x0324338C ADRP X0, 0xED9000
	0x03243390 LDR X0, [X0 + 0x28]
	0x03243394 BL 0x1C16D08
	0x03243398 LDR X8, [X20]
	0x0324339C LDR X1, [X8]
	0x032433A0 BL 0x1C17270
	0x032433A4 TBZ X0, 0x0, 0x32433B0
	0x032433A8 MOVZ W21, 0xE
	0x032433AC B 0x32433F4
	0x032433B0 ADRP X0, 0xEDE000
	0x032433B4 LDR X0, [X0 + 0x690]
	0x032433B8 BL 0x1C16D08
	0x032433BC LDR X8, [X20]
	0x032433C0 LDR X1, [X8]
	0x032433C4 BL 0x1C17270
	0x032433C8 TBZ X0, 0x0, 0x32433D4
	0x032433CC MOVZ W21, 0xF
	0x032433D0 B 0x32433F4
	0x032433D4 ADRP X0, 0xEB9000
	0x032433D8 LDR X0, [X0 + 0x758]
	0x032433DC BL 0x1C16D08
	0x032433E0 LDR X8, [X20]
	0x032433E4 LDR X1, [X8]
	0x032433E8 BL 0x1C17270
	0x032433EC TBZ X0, 0x0, 0x3243450
	0x032433F0 MOVZ W21, 0x10
	0x032433F4 LDR X8, [X20]
	0x032433F8 LDRSW X9, [X31 + 0x20]
	0x032433FC ADD X10, X31, 0x10
	0x03243400 STR X8, [X10, X9, LSL #3]
	0x03243404 ADD W8, W9, 0x1
	0x03243408 STR W8, [X31 + 0x20]
	0x0324340C BL 0x3EB1AE0
	0x03243410 CMP W21, 0xE
	0x03243414 B.EQ 0x324359C
	0x03243418 CMP W21, 0xF
	0x0324341C B.EQ 0x324359C
	0x03243420 CMP W21, 0x10
	0x03243424 B.NE 0x32430CC
	0x03243428 ADRP X0, 0xEDF000
	0x0324342C LDR X0, [X0 + 0x9D8]
	0x03243430 BL 0x1C16D08
	0x03243434 LDR W8, [X0 + 0xE0]
	0x03243438 CBNZ W8, 0x3243440
	0x0324343C BL 0x1C16DFC
	0x03243440 ADRP X0, 0xEDF000
	0x03243444 LDR X0, [X0 + 0x9D8]
	0x03243448 BL 0x1C16D08
	0x0324344C B 0x3243660
	0x03243450 MOVZ W0, 0x8
	0x03243454 BL 0x3EB1AF0
	0x03243458 LDR X8, [X20]
	0x0324345C STR X8, [X0]
	0x03243460 ADRP X1, 0xC71000
	0x03243464 ADD X1, X1, 0xE58
	0x03243468 MOV X2, X31
	0x0324346C BL 0x3EB1B00
	0x03243470 B 0x32436A4
	0x03243474 B 0x32436C0
	0x03243478 B 0x32436C0
	0x0324347C MOV X21, X1
	0x03243480 MOV X20, X0
	0x03243484 BL 0x3EB1AE0
	0x03243488 B 0x32436C8
	0x0324348C B 0x32436C0
	0x03243490 MOV X21, X1
	0x03243494 MOV X20, X0
	0x03243498 B 0x3243550
	0x0324349C MOV X21, X1
	0x032434A0 CMP W21, 0x1
	0x032434A4 MOV X20, X0
	0x032434A8 B.NE 0x3243550
	0x032434AC MOV X0, X20
	0x032434B0 BL 0x3EB1AD0
	0x032434B4 MOV X20, X0
	0x032434B8 ADRP X0, 0xEB9000
	0x032434BC LDR X0, [X0 + 0x758]
	0x032434C0 BL 0x1C16D08
	0x032434C4 LDR X8, [X20]
	0x032434C8 LDR X1, [X8]
	0x032434CC BL 0x1C17270
	0x032434D0 TBZ X0, 0x0, 0x3243518
	0x032434D4 LDR X8, [X20]
	0x032434D8 LDRSW X9, [X31 + 0x20]
	0x032434DC ADD X10, X31, 0x10
	0x032434E0 STR X8, [X10, X9, LSL #3]
	0x032434E4 ADD W8, W9, 0x1
	0x032434E8 STR W8, [X31 + 0x20]
	0x032434EC BL 0x3EB1AE0
	0x032434F0 ADRP X0, 0xEDF000
	0x032434F4 LDR X0, [X0 + 0x9D8]
	0x032434F8 BL 0x1C16D08
	0x032434FC LDR W8, [X0 + 0xE0]
	0x03243500 CBNZ W8, 0x3243508
	0x03243504 BL 0x1C16DFC
	0x03243508 ADRP X0, 0xEDF000
	0x0324350C LDR X0, [X0 + 0x9D8]
	0x03243510 BL 0x1C16D08
	0x03243514 B 0x3243660
	0x03243518 MOVZ W0, 0x8
	0x0324351C BL 0x3EB1AF0
	0x03243520 LDR X8, [X20]
	0x03243524 STR X8, [X0]
	0x03243528 ADRP X1, 0xC71000
	0x0324352C ADD X1, X1, 0xE58
	0x03243530 MOV X2, X31
	0x03243534 BL 0x3EB1B00
	0x03243538 B 0x32436A4
	0x0324353C B 0x3243490
	0x03243540 B 0x3243490
	0x03243544 MOV X21, X1
	0x03243548 MOV X20, X0
	0x0324354C BL 0x3EB1AE0
	0x03243550 CMP W21, 0x1
	0x03243554 B.NE 0x32436C8
	0x03243558 MOV X0, X20
	0x0324355C BL 0x3EB1AD0
	0x03243560 MOV X20, X0
	0x03243564 ADRP X0, 0xEDE000
	0x03243568 LDR X0, [X0 + 0xBE8]
	0x0324356C BL 0x1C16D08
	0x03243570 LDR X8, [X20]
	0x03243574 LDR X1, [X8]
	0x03243578 BL 0x1C17270
	0x0324357C TBZ X0, 0x0, 0x32435A8
	0x03243580 LDR X8, [X20]
	0x03243584 LDRSW X9, [X31 + 0x20]
	0x03243588 ADD X10, X31, 0x10
	0x0324358C STR X8, [X10, X9, LSL #3]
	0x03243590 ADD W8, W9, 0x1
	0x03243594 STR W8, [X31 + 0x20]
	0x03243598 BL 0x3EB1AE0
	0x0324359C MOV X21, X31
	0x032435A0 MOV X20, X31
	0x032435A4 B 0x3243674
	0x032435A8 MOVZ W0, 0x8
	0x032435AC BL 0x3EB1AF0
	0x032435B0 LDR X8, [X20]
	0x032435B4 STR X8, [X0]
	0x032435B8 ADRP X1, 0xC71000
	0x032435BC ADD X1, X1, 0xE58
	0x032435C0 MOV X2, X31
	0x032435C4 BL 0x3EB1B00
	0x032435C8 B 0x32436A4
	0x032435CC B 0x32436C0
	0x032435D0 MOV X21, X1
	0x032435D4 MOV X20, X0
	0x032435D8 BL 0x3EB1AE0
	0x032435DC B 0x32436C8
	0x032435E0 B 0x32436C0
	0x032435E4 B 0x32435E8
	0x032435E8 MOV X21, X1
	0x032435EC MOV X20, X0
	0x032435F0 CMP W21, 0x1
	0x032435F4 B.NE 0x32436C8
	0x032435F8 MOV X0, X20
	0x032435FC BL 0x3EB1AD0
	0x03243600 MOV X20, X0
	0x03243604 ADRP X0, 0xEB9000
	0x03243608 LDR X0, [X0 + 0x758]
	0x0324360C BL 0x1C16D08
	0x03243610 LDR X8, [X20]
	0x03243614 LDR X1, [X8]
	0x03243618 BL 0x1C17270
	0x0324361C TBZ X0, 0x0, 0x3243684
	0x03243620 LDR X8, [X20]
	0x03243624 LDRSW X9, [X31 + 0x20]
	0x03243628 ADD X10, X31, 0x10
	0x0324362C STR X8, [X10, X9, LSL #3]
	0x03243630 ADD W8, W9, 0x1
	0x03243634 STR W8, [X31 + 0x20]
	0x03243638 BL 0x3EB1AE0
	0x0324363C ADRP X0, 0xEDF000
	0x03243640 LDR X0, [X0 + 0x9D8]
	0x03243644 BL 0x1C16D08
	0x03243648 LDR W8, [X0 + 0xE0]
	0x0324364C CBNZ W8, 0x3243654
	0x03243650 BL 0x1C16DFC
	0x03243654 ADRP X0, 0xEDF000
	0x03243658 LDR X0, [X0 + 0x9D8]
	0x0324365C BL 0x1C16D08
	0x03243660 LDR X8, [X0 + 0xB8]
	0x03243664 MOVZ W9, 0x1
	0x03243668 MOV X21, X31
	0x0324366C MOV X20, X31
	0x03243670 STRB W9, [X8 + 0x18]
	0x03243674 LDR W8, [X31 + 0x20]
	0x03243678 SUB W8, W8, 0x1
	0x0324367C STR W8, [X31 + 0x20]
	0x03243680 B 0x32430D4
	0x03243684 MOVZ W0, 0x8
	0x03243688 BL 0x3EB1AF0
	0x0324368C LDR X8, [X20]
	0x03243690 STR X8, [X0]
	0x03243694 ADRP X1, 0xC71000
	0x03243698 ADD X1, X1, 0xE58
	0x0324369C MOV X2, X31
	0x032436A0 BL 0x3EB1B00
	0x032436A4 B 0x32436C0
	0x032436A8 B 0x32436C0
	0x032436AC MOV X21, X1
	0x032436B0 MOV X20, X0
	0x032436B4 BL 0x3EB1AE0
	0x032436B8 B 0x32436C8
	0x032436BC B 0x32436C0
	0x032436C0 MOV X21, X1
	0x032436C4 MOV X20, X0
	0x032436C8 CMP W21, 0x1
	0x032436CC B.NE 0x32436E4
	0x032436D0 MOV X0, X20
	0x032436D4 BL 0x3EB1AD0
	0x032436D8 LDR X21, [X0]
	0x032436DC BL 0x3EB1AE0
	0x032436E0 B 0x32430D0
	0x032436E4 MOV X21, X31
	0x032436E8 B 0x32436F0
	0x032436EC MOV X20, X0
	0x032436F0 LDRB W8, [X31 + 0x2C]
	0x032436F4 CBZ W8, 0x3243704
	0x032436F8 MOV X0, X19
	0x032436FC MOV X1, X31
	0x03243700 BL 0x33E14E4
	0x03243704 CBNZ X21, 0x3243710
	0x03243708 MOV X0, X20
	0x0324370C BL 0x1D2C690
	0x03243710 MOV X0, X21
	0x03243714 BL 0x1C16F18
	0x03243718 BL 0x1990590
	0x0324371C STP X30, X23, [X31 - 0x30]!
	0x03243720 STP X22, X21, [X31 + 0x10]
	0x03243724 STP X20, X19, [X31 + 0x20]
	0x03243728 ADRP X22, 0x1199000
	0x0324372C ADRP X23, 0xEDF000
	0x03243730 LDRB W8, [X22 + 0x437]
	0x03243734 LDR X23, [X23 + 0x400]
	0x03243738 MOV X19, X2
	0x0324373C MOV X20, X1
	0x03243740 MOV W21, W0
	0x03243744 TBNZ X8, 0x0, 0x3243768
	0x03243748 ADRP X0, 0xEDF000
	0x0324374C LDR X0, [X0 + 0x400]
	0x03243750 BL 0x1C16CF4
	0x03243754 ADRP X0, 0xEDF000
	0x03243758 LDR X0, [X0 + 0x3F8]
	0x0324375C BL 0x1C16CF4
	0x03243760 MOVZ W8, 0x1
	0x03243764 STRB W8, [X22 + 0x437]
	0x03243768 LDR X0, [X23]
	0x0324376C LDR W8, [X0 + 0xE0]
	0x03243770 CBNZ W8, 0x3243778
	0x03243774 BL 0x1C16DFC
	0x03243778 MOV W0, W21
	0x0324377C MOV X1, X20
	0x03243780 MOV X2, X19
	0x03243784 MOV X3, X31
	0x03243788 BL 0x3230F38
	0x0324378C MOV X22, X0
	0x03243790 CBNZ X0, 0x3243800
	0x03243794 MOV W0, W21
	0x03243798 BL 0x3242308
	0x0324379C CBZ X0, 0x3243814
	0x032437A0 LDR X8, [X0]
	0x032437A4 LDP X9, X1, [X8 + 0x1E8]
	0x032437A8 BLR X9
	0x032437AC CBZ X0, 0x3243814
	0x032437B0 ADRP X9, 0xEDF000
	0x032437B4 LDR X9, [X9 + 0x3F8]
	0x032437B8 LDR X8, [X0]
	0x032437BC MOV X22, X0
	0x032437C0 LDR X1, [X9]
	0x032437C4 LDRB W10, [X8 + 0x130]
	0x032437C8 LDRB W9, [X1 + 0x130]
	0x032437CC CMP W10, W9
	0x032437D0 B.CC 0x3243818
	0x032437D4 LDR X8, [X8 + 0xC8]
	0x032437D8 ADD X8, X8, X9, 0x3, LSL
	0x032437DC LDUR X8, [X8 - 0x8]
	0x032437E0 CMP X8, X1
	0x032437E4 B.NE 0x3243818
	0x032437E8 MOV X0, X22
	0x032437EC MOV X1, X20
	0x032437F0 BL 0x3243820
	0x032437F4 MOV X0, X22
	0x032437F8 MOV X1, X19
	0x032437FC BL 0x32438DC
	0x03243800 MOV X0, X22
	0x03243804 LDP X20, X19, [X31 + 0x20]
	0x03243808 LDP X22, X21, [X31 + 0x10]
	0x0324380C LDP X30, X23, [X31], #0x30
	0x03243810 RET
	0x03243814 BL 0x1C16F20
	0x03243818 MOV X0, X22
	0x0324381C BL 0x1C171E0
	0x03243820 STR X30, [X31 - 0x20]!
	0x03243824 STP X20, X19, [X31 + 0x10]
	0x03243828 LDRB W8, [X0 + 0x21]
	0x0324382C CBNZ W8, 0x3243844
	0x03243830 CBZ X1, 0x3243894
	0x03243834 LDP X20, X19, [X31 + 0x10]
	0x03243838 STR X1, [X0 + 0x28]
	0x0324383C LDR X30, [X31], #0x20
	0x03243840 RET
	0x03243844 ADRP X0, 0xEDF000
	0x03243848 LDR X0, [X0 + 0xA38]
	0x0324384C BL 0x1C16D08
	0x03243850 MOV X1, X31
	0x03243854 BL 0x33BDD84
	0x03243858 MOV X19, X0
	0x0324385C ADRP X0, 0xEB0000
	0x03243860 LDR X0, [X0 + 0x5B0]
	0x03243864 BL 0x1C16D08
	0x03243868 BL 0x1C16F10
	0x0324386C MOV X1, X19
	0x03243870 MOV X2, X31
	0x03243874 MOV X20, X0
	0x03243878 BL 0x337DF1C
	0x0324387C ADRP X0, 0xEDF000
	0x03243880 LDR X0, [X0 + 0xA40]
	0x03243884 BL 0x1C16D08
	0x03243888 MOV X1, X0
	0x0324388C MOV X0, X20
	0x03243890 BL 0x1C16DEC
	0x03243894 ADRP X0, 0xEB5000
	0x03243898 LDR X0, [X0 + 0x528]
	0x0324389C BL 0x1C16D08
	0x032438A0 BL 0x1C16F10
	0x032438A4 MOV X19, X0
	0x032438A8 ADRP X0, 0xEBA000
	0x032438AC LDR X0, [X0 + 0xEC8]
	0x032438B0 BL 0x1C16D08
	0x032438B4 MOV X1, X0
	0x032438B8 MOV X0, X19
	0x032438BC MOV X2, X31
	0x032438C0 BL 0x330E100
	0x032438C4 ADRP X0, 0xEDF000
	0x032438C8 LDR X0, [X0 + 0xA40]
	0x032438CC BL 0x1C16D08
	0x032438D0 MOV X1, X0
	0x032438D4 MOV X0, X19
	0x032438D8 BL 0x1C16DEC
	0x032438DC STR X30, [X31 - 0x20]!
	0x032438E0 STP X20, X19, [X31 + 0x10]
	0x032438E4 LDRB W8, [X0 + 0x21]
	0x032438E8 CBNZ W8, 0x3243900
	0x032438EC CBZ X1, 0x3243950
	0x032438F0 LDP X20, X19, [X31 + 0x10]
	0x032438F4 STR X1, [X0 + 0x30]
	0x032438F8 LDR X30, [X31], #0x20
	0x032438FC RET
	0x03243900 ADRP X0, 0xEDF000
	0x03243904 LDR X0, [X0 + 0xA38]
	0x03243908 BL 0x1C16D08
	0x0324390C MOV X1, X31
	0x03243910 BL 0x33BDD84
	0x03243914 MOV X19, X0
	0x03243918 ADRP X0, 0xEB0000
	0x0324391C LDR X0, [X0 + 0x5B0]
	0x03243920 BL 0x1C16D08
	0x03243924 BL 0x1C16F10
	0x03243928 MOV X1, X19
	0x0324392C MOV X2, X31
	0x03243930 MOV X20, X0
	0x03243934 BL 0x337DF1C
	0x03243938 ADRP X0, 0xEDF000
	0x0324393C LDR X0, [X0 + 0xA48]
	0x03243940 BL 0x1C16D08
	0x03243944 MOV X1, X0
	0x03243948 MOV X0, X20
	0x0324394C BL 0x1C16DEC
	0x03243950 ADRP X0, 0xEB5000
	0x03243954 LDR X0, [X0 + 0x528]
	0x03243958 BL 0x1C16D08
	0x0324395C BL 0x1C16F10
	0x03243960 MOV X19, X0
	0x03243964 ADRP X0, 0xEBA000
	0x03243968 LDR X0, [X0 + 0xEC8]
	0x0324396C BL 0x1C16D08
	0x03243970 MOV X1, X0
	0x03243974 MOV X0, X19
	0x03243978 MOV X2, X31
	0x0324397C BL 0x330E100
	0x03243980 ADRP X0, 0xEDF000
	0x03243984 LDR X0, [X0 + 0xA48]
	0x03243988 BL 0x1C16D08
	0x0324398C MOV X1, X0
	0x03243990 MOV X0, X19
	0x03243994 BL 0x1C16DEC
	0x03243998 STP X30, X21, [X31 - 0x20]!
	0x0324399C STP X20, X19, [X31 + 0x10]
	0x032439A0 ADRP X20, 0x1199000
	0x032439A4 ADRP X21, 0xEDF000
	0x032439A8 LDRB W8, [X20 + 0x438]
	0x032439AC LDR X21, [X21 + 0x400]
	0x032439B0 MOV X19, X0
	0x032439B4 TBNZ X8, 0x0, 0x32439D8
	0x032439B8 ADRP X0, 0xEDF000
	0x032439BC LDR X0, [X0 + 0x400]
	0x032439C0 BL 0x1C16CF4
	0x032439C4 ADRP X0, 0xEDF000
	0x032439C8 LDR X0, [X0 + 0x9E0]
	0x032439CC BL 0x1C16CF4
	0x032439D0 MOVZ W8, 0x1
	0x032439D4 STRB W8, [X20 + 0x438]
	0x032439D8 LDR X0, [X21]
	0x032439DC LDR W8, [X0 + 0xE0]
	0x032439E0 CBNZ W8, 0x32439E8
	0x032439E4 BL 0x1C16DFC
	0x032439E8 MOV X0, X19
	0x032439EC MOV X1, X31
	0x032439F0 BL 0x3230E5C
	0x032439F4 CBZ X0, 0x3243A04
	0x032439F8 LDP X20, X19, [X31 + 0x10]
	0x032439FC LDP X30, X21, [X31], #0x20
	0x03243A00 RET
	0x03243A04 ADRP X8, 0xEDF000
	0x03243A08 LDR X8, [X8 + 0x9E0]
	0x03243A0C LDR X0, [X8]
	0x03243A10 LDR W8, [X0 + 0xE0]
	0x03243A14 CBNZ W8, 0x3243A1C
	0x03243A18 BL 0x1C16DFC
	0x03243A1C MOV X0, X19
	0x03243A20 MOV X1, X31
	0x03243A24 BL 0x3346890
	0x03243A28 LDP X20, X19, [X31 + 0x10]
	0x03243A2C LDP X30, X21, [X31], #0x20
	0x03243A30 B 0x3242308
	0x03243A34 STR X30, [X31 - 0x20]!
	0x03243A38 STP X20, X19, [X31 + 0x10]
	0x03243A3C ADRP X20, 0x1199000
	0x03243A40 ADRP X19, 0xEDF000
	0x03243A44 LDRB W8, [X20 + 0x439]
	0x03243A48 LDR X19, [X19 + 0xA50]
	0x03243A4C TBNZ X8, 0x0, 0x3243A64
	0x03243A50 ADRP X0, 0xEDF000
	0x03243A54 LDR X0, [X0 + 0xA50]
	0x03243A58 BL 0x1C16CF4
	0x03243A5C MOVZ W8, 0x1
	0x03243A60 STRB W8, [X20 + 0x439]
	0x03243A64 LDR X0, [X19]
	0x03243A68 LDR W8, [X0 + 0xE0]
	0x03243A6C CBNZ W8, 0x3243A78
	0x03243A70 BL 0x1C16DFC
	0x03243A74 LDR X0, [X19]
	0x03243A78 LDR X8, [X0 + 0xB8]
	0x03243A7C LDP X20, X19, [X31 + 0x10]
	0x03243A80 LDR X0, [X8]
	0x03243A84 LDR X30, [X31], #0x20
	0x03243A88 RET
	0x03243A8C STP X30, X21, [X31 - 0x20]!
	0x03243A90 STP X20, X19, [X31 + 0x10]
	0x03243A94 ADRP X21, 0x1199000
	0x03243A98 ADRP X20, 0xEDF000
	0x03243A9C LDRB W8, [X21 + 0x43A]
	0x03243AA0 LDR X20, [X20 + 0x6F0]
	0x03243AA4 MOV X19, X0
	0x03243AA8 TBNZ X8, 0x0, 0x3243AC0
	0x03243AAC ADRP X0, 0xEDF000
	0x03243AB0 LDR X0, [X0 + 0x6F0]
	0x03243AB4 BL 0x1C16CF4
	0x03243AB8 MOVZ W8, 0x1
	0x03243ABC STRB W8, [X21 + 0x43A]
	0x03243AC0 LDR X8, [X19]
	0x03243AC4 MOV X0, X19
	0x03243AC8 LDP X9, X1, [X8 + 0x198]
	0x03243ACC BLR X9
	0x03243AD0 LDR X1, [X20]
	0x03243AD4 LDP X20, X19, [X31 + 0x10]
	0x03243AD8 LDP X30, X21, [X31], #0x20
	0x03243ADC B 0x25BEADC
	0x03243AE0 STR X30, [X31 - 0x20]!
	0x03243AE4 STP X20, X19, [X31 + 0x10]
	0x03243AE8 ADRP X20, 0x1199000
	0x03243AEC LDRB W8, [X20 + 0x43B]
	0x03243AF0 MOV X19, X0
	0x03243AF4 TBNZ X8, 0x0, 0x3243B0C
	0x03243AF8 ADRP X0, 0xEDF000
	0x03243AFC LDR X0, [X0 + 0x9E0]
	0x03243B00 BL 0x1C16CF4
	0x03243B04 MOVZ W8, 0x1
	0x03243B08 STRB W8, [X20 + 0x43B]
	0x03243B0C LDR X8, [X19 + 0x18]
	0x03243B10 CBNZ X8, 0x3243B44
	0x03243B14 ADRP X8, 0xEDF000
	0x03243B18 LDR X8, [X8 + 0x9E0]
	0x03243B1C LDR W20, [X19 + 0x10]
	0x03243B20 LDR X0, [X8]
	0x03243B24 LDR W8, [X0 + 0xE0]
	0x03243B28 CBNZ W8, 0x3243B30
	0x03243B2C BL 0x1C16DFC
	0x03243B30 MOV W0, W20
	0x03243B34 MOV X1, X31
	0x03243B38 BL 0x3346B0C
	0x03243B3C STR X0, [X19 + 0x18]
	0x03243B40 CBZ X0, 0x3243B50
	0x03243B44 LDP X20, X19, [X31 + 0x10]
	0x03243B48 LDR X30, [X31], #0x20
	0x03243B4C RET
	0x03243B50 ADRP X0, 0xEB0000
	0x03243B54 LDR X0, [X0 + 0x9D0]
	0x03243B58 BL 0x1C16D08
	0x03243B5C MOVZ W1, 0x1
	0x03243B60 BL 0x1C16D6C
	0x03243B64 LDR W8, [X19 + 0x10]
	0x03243B68 MOV X20, X0
	0x03243B6C ADRP X0, 0xEB0000
	0x03243B70 STR W8, [X31 + 0xC]
	0x03243B74 LDR X0, [X0 + 0x758]
	0x03243B78 BL 0x1C16D08
	0x03243B7C ADD X1, X31, 0xC
	0x03243B80 BL 0x1C16E04
	0x03243B84 MOV X19, X0
	0x03243B88 MOV X0, X20
	0x03243B8C BL 0x19903C0
	0x03243B90 MOV X0, X20
	0x03243B94 MOV X1, X19
	0x03243B98 BL 0x19980B4
	0x03243B9C MOV X0, X20
	0x03243BA0 MOV X1, X31
	0x03243BA4 MOV X2, X19
	0x03243BA8 BL 0x1993444
	0x03243BAC ADRP X0, 0xEDF000
	0x03243BB0 LDR X0, [X0 + 0xA10]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X21, 0x119A000
	009 Move X19, 0xEE0000
	010 Move W8, [X21+1078]
	011 Move X19, [X19+1024]
	012 Move W20, W0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {55}
	017 Move X0, 0xEE0000
	018 Move X0, [X0+2488]
	019 Call 0x1C17CF4
	020 Move X0, 0xEE0000
	021 Move X0, [X0+2496]
	022 Call 0x1C17CF4
	023 Move X0, 0xEE0000
	024 Move X0, [X0+2504]
	025 Call 0x1C17CF4
	026 Move X0, 0xEE0000
	027 Move X0, [X0+2512]
	028 Call 0x1C17CF4
	029 Move X0, 0xEE0000
	030 Move X0, [X0+2520]
	031 Call 0x1C17CF4
	032 Move X0, 0xEE0000
	033 Move X0, [X0+1024]
	034 Call 0x1C17CF4
	035 Move X0, 0xEE0000
	036 Move X0, [X0+2528]
	037 Call 0x1C17CF4
	038 Move X0, 0xEE0000
	039 Move X0, [X0+1016]
	040 Call 0x1C17CF4
	041 Move X0, 0xEB1000
	042 Move X0, [X0+1880]
	043 Call 0x1C17CF4
	044 Move X0, 0xEB1000
	045 Move X0, [X0+2512]
	046 Call 0x1C17CF4
	047 Move X0, 0xEE0000
	048 Move X0, [X0+1784]
	049 Call 0x1C17CF4
	050 Move X0, 0xEE0000
	051 Move X0, [X0+2536]
	052 Call 0x1C17CF4
	053 Move W8, 1
	054 Move [X21+1078], W8
	055 Move X0, [X19]
	056 Move [X31+20], W31
	057 Move W8, [X0+224]
	058 Compare W8, 0
	059 JumpIfNotEqual {61}
	060 Call 0x1C17DFC
	061 Move W0, W20
	062 Move X1, X31
	063 Call EncodingProvider.GetEncodingFromProvider, X0
	064 Move X21, X0
	065 Move [X31+24], X0
	066 Compare X0, 0
	067 JumpIfNotEqual {282}
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move X23, 0xEE0000
	070 Move X23, [X23+1016]
	071 Move X8, [X23]
	072 Move X8, [X8+184]
	073 Move X19, [X8+64]
	074 Call 0x1C17D44
	075 Compare X19, 0
	076 JumpIfEqual {93}
	077 Move X8, [X23]
	078 Move X8, [X8+184]
	079 Move X19, [X8+64]
	080 Call 0x1C17D44
	081 Compare X19, 0
	082 JumpIfEqual {356}
	083 Move X8, 0xEE0000
	084 Move X8, [X8+2496]
	085 Add X2, X31, 24
	086 Move X0, X19
	087 Move W1, W20
	088 Move X3, [X8]
	089 Call Dictionary`2<Int32, Object>.TryGetValue, X0, X1, X2
	090 Move X8, [X31+24]
	091 Compare X8, 0
	092 JumpIfNotEqual {281}
	093 Call Encoding.get_InternalSyncObject
	094 Move X19, X0
	095 Move [X31+20], W31
	096 Add X1, X31, 20
	097 Move X2, X31
	098 Call Monitor.Enter, X0, X1
	099 Move X8, [X23]
	100 Move X8, [X8+184]
	101 Move X21, [X8+64]
	102 Call 0x1C17D44
	103 Compare X21, 0
	104 JumpIfEqual {107}
	105 Move X8, [X23]
	106 Move X8, [X8+184]
	107 Move X8, 0xEE0000
	108 Move X8, [X8+2512]
	109 Move X0, [X8]
	110 Call 0x1C17F10
	111 Move X8, 0xEE0000
	112 Move X8, [X8+2504]
	113 Move X21, X0
	114 Move X1, [X8]
	115 Call Dictionary`2<Int32, Object>..ctor, X0
	116 Call 0x1C17D44
	117 Move X8, [X23]
	118 Move X8, [X8+184]
	119 Move [X8+64], X21
	120 Move X21, [X8+64]
	121 Call 0x1C17D44
	122 Compare X21, 0
	123 JumpIfEqual {359}
	124 Move X8, 0xEE0000
	125 Move X8, [X8+2496]
	126 Move X3, [X8]
	127 Add X2, X31, 24
	128 Move X0, X21
	129 Move W1, W20
	130 Call Dictionary`2<Int32, Object>.TryGetValue, X0, X1, X2
	131 Move TEMP, X0
	132 And TEMP, TEMP, 1
	133 Compare TEMP, 1
	134 JumpIfNotEqual {138}
	135 Move X21, [X31+24]
	136 Move X20, X31
	137 Move W22, 11
	138 NotImplemented "Instruction CMP not yet implemented."
	139 Move W8, 0x4E9F
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Move W8, 0x6FAF
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Move W8, 0xFDE8
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Move W8, 0xFDE9
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Call Encoding.get_UTF8
	148 NotImplemented "Instruction CMP not yet implemented."
	149 NotImplemented "Instruction CMP not yet implemented."
	150 NotImplemented "Instruction CMP not yet implemented."
	151 NotImplemented "Instruction CMP not yet implemented."
	152 Move W8, 0x2EE0
	153 NotImplemented "Instruction CMP not yet implemented."
	154 Move W8, 0x2EE1
	155 NotImplemented "Instruction CMP not yet implemented."
	156 Move W8, 0x4E9F
	157 NotImplemented "Instruction CMP not yet implemented."
	158 Call Encoding.get_ASCII
	159 Compare W20, 0
	160 JumpIfNotEqual {361}
	161 Call Encoding.get_Default
	162 Move X8, 0xEE0000
	163 Move X8, [X8+2528]
	164 Move X0, [X8]
	165 Move W8, [X0+224]
	166 Compare W8, 0
	167 JumpIfNotEqual {169}
	168 Call 0x1C17DFC
	169 Move W0, W20
	170 Move X1, X31
	171 Call EncodingTable.GetCodePageDataItem, X0
	172 Compare X0, 0
	173 JumpIfEqual {376}
	174 Move W8, 0x2EE0
	175 NotImplemented "Instruction CMP not yet implemented."
	176 Move W8, 0x2EE1
	177 NotImplemented "Instruction CMP not yet implemented."
	178 Move X8, 0xEE0000
	179 Move X8, [X8+1784]
	180 Move X0, [X8]
	181 Call 0x1C17F10
	182 Move X21, X0
	183 Move W1, 1
	184 Move W2, 1
	185 Move X3, X31
	186 Call UTF32Encoding..ctor, X0, X1, X2
	187 Call Encoding.get_BigEndianUnicode
	188 Call Encoding.get_Unicode
	189 Call Encoding.get_UTF32
	190 Move X8, 0xEB1000
	191 Move X8, [X8+2512]
	192 Move X0, [X8]
	193 Move W1, 1
	194 Call 0x1C17D6C
	195 Move X8, 0xEB1000
	196 Move X8, [X8+1880]
	197 Move X21, X0
	198 Move [X31+16], W20
	199 Move X0, [X8]
	200 Add X1, X31, 16
	201 Call 0x1C17E04
	202 Compare X21, 0
	203 JumpIfEqual {391}
	204 Move X22, X0
	205 Compare X0, 0
	206 JumpIfEqual {213}
	207 Move X8, [X21]
	208 Move X1, [X8+64]
	209 Move X0, X22
	210 Call 0x1C17E00
	211 Compare X0, 0
	212 JumpIfEqual {422}
	213 Move W8, [X21+24]
	214 Compare W8, 0
	215 JumpIfEqual {392}
	216 Move [X21+32], X22
	217 Move X8, 0xEE0000
	218 Move X8, [X8+2520]
	219 Move X0, [X8]
	220 Move W8, [X0+224]
	221 Compare W8, 0
	222 JumpIfNotEqual {224}
	223 Call 0x1C17DFC
	224 Move X8, 0xEE0000
	225 Move X8, [X8+2536]
	226 Move X0, [X8]
	227 Move X1, X21
	228 Call EncodingHelper.InvokeI18N, X0, X1
	229 Compare X0, 0
	230 JumpIfEqual {393}
	231 Move X8, [X0]
	232 Move X1, [X23]
	233 Move W10, [X8+304]
	234 Move W9, [X1+304]
	235 NotImplemented "Instruction CMP not yet implemented."
	236 Move X8, [X8+200]
	237 Add X8, X8, X9
	238 NotImplemented "Instruction LDUR not yet implemented."
	239 NotImplemented "Instruction CMP not yet implemented."
	240 Call 0x1C181E0
	241 Call Encoding.get_UTF7
	242 Move X8, 0xEE0000
	243 Move X8, [X8+1784]
	244 Move X0, [X8]
	245 Call 0x1C17F10
	246 Move X21, X0
	247 Move W1, 1
	248 Move W2, 1
	249 Move X3, X31
	250 Call UTF32Encoding..ctor, X0, X1, X2
	251 Move [X31+24], X21
	252 Call Encoding.get_Latin1
	253 Call Encoding.get_UTF32
	254 Move [X31+24], X0
	255 Move X8, [X23]
	256 Move X8, [X8+184]
	257 Move X21, [X8+64]
	258 Call 0x1C17D44
	259 Compare X21, 0
	260 JumpIfEqual {360}
	261 Move X8, 0xEE0000
	262 Move X2, [X31+24]
	263 Move X8, [X8+2488]
	264 Move X3, [X8]
	265 Move X0, X21
	266 Move W1, W20
	267 Call Dictionary`2<Int32, Object>.Add, X0, X1, X2
	268 Move X20, X31
	269 Move X21, X31
	270 Move W22, 8
	271 Move W8, [X31+20]
	272 Compare W8, 0
	273 JumpIfEqual {277}
	274 Move X0, X19
	275 Move X1, X31
	276 Call Monitor.Exit, X0
	277 Compare X20, 0
	278 JumpIfNotEqual {357}
	279 Or W8, W22, 8
	280 NotImplemented "Instruction CMP not yet implemented."
	281 Move X21, [X31+24]
	282 Move X0, X21
	283 Move X20, [X31+64]
	284 Move X19, [X31+72]
	285 Move X22, [X31+48]
	286 Move X21, [X31+56]
	287 Move X30, [X31+32]
	288 Move X23, [X31+40]
	289 Add X31, X31, 80
	290 Return X0
	291 Move X0, 0xEB1000
	292 Move X0, [X0+2512]
	293 Call 0x1C17D08
	294 Move W1, 2
	295 Call 0x1C17D6C
	296 Move [X31+16], W31
	297 Move X20, 0xEB1000
	298 Move X20, [X20+1880]
	299 Move X19, X0
	300 Move X0, X20
	301 Call 0x1C17D08
	302 Add X1, X31, 16
	303 Call 0x1C17E04
	304 Move X21, X0
	305 Move X0, X19
	306 Call 0x19913C0
	307 Move X0, X19
	308 Move X1, X21
	309 Call 0x19990B4
	310 Move X0, X19
	311 Move X1, X31
	312 Move X2, X21
	313 Call 0x1994444
	314 Move W8, 0xFFFF
	315 Move X0, X20
	316 Move [X31+12], W8
	317 Call 0x1C17D08
	318 Add X1, X31, 12
	319 Call 0x1C17E04
	320 Move X20, X0
	321 Move X0, X19
	322 Call 0x19913C0
	323 Move X0, X19
	324 Move X1, X20
	325 Call 0x19990B4
	326 Move W1, 1
	327 Move X0, X19
	328 Move X2, X20
	329 Call 0x1994444
	330 Move X0, 0xEE0000
	331 Move X0, [X0+880]
	332 Call 0x1C17D08
	333 Move X1, X19
	334 Move X2, X31
	335 Call Environment.GetResourceString, X0, X1
	336 Move X19, X0
	337 Move X0, 0xEB9000
	338 Move X0, [X0+1888]
	339 Call 0x1C17D08
	340 Call 0x1C17F10
	341 Move X20, X0
	342 Move X0, 0xEE0000
	343 Move X0, [X0+2544]
	344 Call 0x1C17D08
	345 Move X1, X0
	346 Move X0, X20
	347 Move X2, X19
	348 Move X3, X31
	349 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	350 Move X0, 0xEE0000
	351 Move X0, [X0+2552]
	352 Call 0x1C17D08
	353 Move X1, X0
	354 Move X0, X20
	355 Call 0x1C17DEC
	356 Call 0x1C17F20
	357 Move X0, X20
	358 Call 0x1C17F18
	359 Call 0x1C17F20
	360 Call 0x1C17F20
	361 Move X0, 0xEB1000
	362 Move X0, [X0+2512]
	363 Call 0x1C17D08
	364 Move W1, 1
	365 Call 0x1C17D6C
	366 Move X21, X0
	367 Move [X31+16], W20
	368 Move X0, 0xEB1000
	369 Move X0, [X0+1880]
	370 Call 0x1C17D08
	371 Add X1, X31, 16
	372 Call 0x1C17E04
	373 Compare X21, 0
	374 JumpIfNotEqual {425}
	375 Call 0x1C17F20
	376 Move X0, 0xEB1000
	377 Move X0, [X0+2512]
	378 Call 0x1C17D08
	379 Move W1, 1
	380 Call 0x1C17D6C
	381 Move X21, X0
	382 Move [X31+16], W20
	383 Move X0, 0xEB1000
	384 Move X0, [X0+1880]
	385 Call 0x1C17D08
	386 Add X1, X31, 16
	387 Call 0x1C17E04
	388 Compare X21, 0
	389 JumpIfNotEqual {432}
	390 Call 0x1C17F20
	391 Call 0x1C17F20
	392 Call 0x1C17F28
	393 Move [X31+24], X31
	394 Move [X31+16], W20
	395 Move X0, 0xEB1000
	396 Move X0, [X0+1880]
	397 Call 0x1C17D08
	398 Add X1, X31, 16
	399 Call 0x1C17E04
	400 Move X20, X0
	401 Move X0, 0xEE0000
	402 Move X0, [X0+2560]
	403 Call 0x1C17D08
	404 Move X1, X20
	405 Move X2, X31
	406 Call String.Format, X0, X1
	407 Move X20, X0
	408 Move X0, 0xEB1000
	409 Move X0, [X0+2880]
	410 Call 0x1C17D08
	411 Call 0x1C17F10
	412 Move X21, X0
	413 Move X1, X20
	414 Move X2, X31
	415 Call NotSupportedException..ctor, X0, X1
	416 Move X0, 0xEE0000
	417 Move X0, [X0+2552]
	418 Call 0x1C17D08
	419 Move X1, X0
	420 Move X0, X21
	421 Call 0x1C17DEC
	422 Call 0x1C17F44
	423 Move X1, X31
	424 Call 0x1C17DEC
	425 Move X20, X0
	426 Compare X0, 0
	427 JumpIfNotEqual {439}
	428 Move W8, [X21+24]
	429 Compare W8, 0
	430 JumpIfNotEqual {448}
	431 Call 0x1C17F28
	432 Move X20, X0
	433 Compare X0, 0
	434 JumpIfNotEqual {475}
	435 Move W8, [X21+24]
	436 Compare W8, 0
	437 JumpIfNotEqual {484}
	438 Call 0x1C17F28
	439 Move X8, [X21]
	440 Move X1, [X8+64]
	441 Move X0, X20
	442 Call 0x1C17E00
	443 Compare X0, 0
	444 JumpIfNotEqual {428}
	445 Call 0x1C17F44
	446 Move X1, X31
	447 Call 0x1C17DEC
	448 Move [X21+32], X20
	449 Move X0, 0xEE0000
	450 Move X0, [X0+2568]
	451 Call 0x1C17D08
	452 Move X1, X21
	453 Move X2, X31
	454 Call Environment.GetResourceString, X0, X1
	455 Move X21, X0
	456 Move X0, 0xEB9000
	457 Move X0, [X0+1400]
	458 Call 0x1C17D08
	459 Call 0x1C17F10
	460 Move X20, X0
	461 Move X0, 0xEE0000
	462 Move X0, [X0+2544]
	463 Call 0x1C17D08
	464 Move X2, X0
	465 Move X0, X20
	466 Move X1, X21
	467 Move X3, X31
	468 Call ArgumentException..ctor, X0, X1, X2
	469 Move X0, 0xEE0000
	470 Move X0, [X0+2552]
	471 Call 0x1C17D08
	472 Move X1, X0
	473 Move X0, X20
	474 Call 0x1C17DEC
	475 Move X8, [X21]
	476 Move X1, [X8+64]
	477 Move X0, X20
	478 Call 0x1C17E00
	479 Compare X0, 0
	480 JumpIfNotEqual {435}
	481 Call 0x1C17F44
	482 Move X1, X31
	483 Call 0x1C17DEC
	484 Move [X21+32], X20
	485 Move X0, 0xEE0000
	486 Move X0, [X0+2576]
	487 Call 0x1C17D08
	488 Move X1, X21
	489 Move X2, X31
	490 Call Environment.GetResourceString, X0, X1
	491 Move X20, X0
	492 Move X0, 0xEB1000
	493 Move X0, [X0+2880]
	494 Call 0x1C17D08
	495 Call 0x1C17F10
	496 Move X21, X0
	497 Move X1, X20
	498 Move X2, X31
	499 Call NotSupportedException..ctor, X0, X1
	500 Move X0, 0xEE0000
	501 Move X0, [X0+2552]
	502 Call 0x1C17D08
	503 Move X1, X0
	504 Move X0, X21
	505 Call 0x1C17DEC
	506 Move X21, X0
	507 NotImplemented "Instruction CMP not yet implemented."
	508 Move X0, X21
	509 Call 0x3EB2AD0
	510 Move X20, [X0]
	511 Call 0x3EB2AE0
	512 Move W22, W31
	513 Move X21, X31
	514 Move X20, X31
	515 Move X21, X0
	516 Move W8, [X31+20]
	517 Compare W8, 0
	518 JumpIfEqual {522}
	519 Move X0, X19
	520 Move X1, X31
	521 Call Monitor.Exit, X0
	522 Compare X20, 0
	523 JumpIfNotEqual {526}
	524 Move X0, X21
	525 Call 0x1D2D690
	526 Move X0, X20
	527 Call 0x1C17F18
	528 Call 0x1991590

Method: System.Text.Encoding GetEncoding(System.Int32 codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback)

Disassembly:
	0x0324471C ADD X8, X8, 0x1
	0x03244720 CMP X10, X8
	0x03244724 B.NE 0x324470C
	0x03244728 ADRP X8, 0xEB8000
	0x0324472C LDR X8, [X8 + 0x8D8]
	0x03244730 MOV W1, W20
	0x03244734 LDR X0, [X8]
	0x03244738 BL 0x1C16D6C
	0x0324473C LDR X8, [X22]
	0x03244740 MOV X23, X0
	0x03244744 MOV X0, X22
	0x03244748 MOV X1, X24
	0x0324474C LDR X9, [X8 + 0x2E8]
	0x03244750 LDR X6, [X8 + 0x2F0]
	0x03244754 MOV W2, W31
	0x03244758 MOV W3, W21
	0x0324475C MOV X4, X23
	0x03244760 MOV W5, W31
	0x03244764 BLR X9
	0x03244768 CMP W0, W20
	0x0324476C CSEL W0, W0, W20, LT
	0x03244770 CMP W0, 0x1
	0x03244774 B.LT 0x32447A8
	0x03244778 CBZ X23, 0x32447C0
	0x0324477C LDR W9, [X23 + 0x18]
	0x03244780 MOV X8, X31
	0x03244784 MOV W10, W0
	0x03244788 ADD X11, X23, 0x20
	0x0324478C CMP X8, X9
	0x03244790 B.CS 0x32447BC
	0x03244794 LDRH W12, [X11, X8, LSL #1]
	0x03244798 ADD X8, X8, 0x1
	0x0324479C CMP X10, X8
	0x032447A0 STRH W12, [X19], #0x2
	0x032447A4 B.NE 0x324478C
	0x032447A8 LDP X20, X19, [X31 + 0x30]
	0x032447AC LDP X22, X21, [X31 + 0x20]
	0x032447B0 LDP X24, X23, [X31 + 0x10]
	0x032447B4 LDR X30, [X31], #0x40
	0x032447B8 RET
	0x032447BC BL 0x1C16F28
	0x032447C0 BL 0x1C16F20
	0x032447C4 ADRP X0, 0xEDE000
	0x032447C8 LDR X0, [X0 + 0x2D8]
	0x032447CC B 0x32447D8
	0x032447D0 ADRP X0, 0xEDE000
	0x032447D4 LDR X0, [X0 + 0x308]
	0x032447D8 BL 0x1C16D08
	0x032447DC MOV X19, X0
	0x032447E0 ADRP X0, 0xEDE000
	0x032447E4 LDR X0, [X0 + 0x2E0]
	0x032447E8 BL 0x1C16D08
	0x032447EC MOV X1, X31
	0x032447F0 BL 0x33BDD84
	0x032447F4 MOV X20, X0
	0x032447F8 ADRP X0, 0xEB4000
	0x032447FC LDR X0, [X0 + 0x528]
	0x03244800 BL 0x1C16D08
	0x03244804 BL 0x1C16F10
	0x03244808 MOV X1, X19
	0x0324480C MOV X2, X20
	0x03244810 MOV X3, X31
	0x03244814 MOV X21, X0
	0x03244818 BL 0x3315F7C
	0x0324481C B 0x324487C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x1199000
	008 Move X23, 0xEDF000
	009 Move W8, [X22+1079]
	010 Move X23, [X23+1024]
	011 Move X19, X2
	012 Move X20, X1
	013 Move W21, W0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0xEDF000
	019 Move X0, [X0+1024]
	020 Call 0x1C17CF4
	021 Move X0, 0xEDF000
	022 Move X0, [X0+1016]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+1079], W8
	026 Move X0, [X23]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move W0, W21
	032 Move X1, X20
	033 Move X2, X19
	034 Move X3, X31
	035 Call EncodingProvider.GetEncodingFromProvider, X0, X1, X2
	036 Move X22, X0
	037 Compare X0, 0
	038 JumpIfNotEqual {67}
	039 Move W0, W21
	040 Call Encoding.GetEncoding, X0
	041 Compare X0, 0
	042 JumpIfEqual {75}
	043 Move X8, [X0]
	044 Move X9, [X8+488]
	045 Move X1, [X8+496]
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Compare X0, 0
	048 JumpIfEqual {75}
	049 Move X9, 0xEDF000
	050 Move X9, [X9+1016]
	051 Move X8, [X0]
	052 Move X22, X0
	053 Move X1, [X9]
	054 Move W10, [X8+304]
	055 Move W9, [X1+304]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X8, [X8+200]
	058 Add X8, X8, X9
	059 NotImplemented "Instruction LDUR not yet implemented."
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X0, X22
	062 Move X1, X20
	063 Call Encoding.set_EncoderFallback, X0, X1
	064 Move X0, X22
	065 Move X1, X19
	066 Call Encoding.set_DecoderFallback, X0, X1
	067 Move X0, X22
	068 Move X20, [X31+32]
	069 Move X19, [X31+40]
	070 Move X22, [X31+16]
	071 Move X21, [X31+24]
	072 Move X30, [X31+48]
	073 Move X23, [X31+56]
	074 Return X0
	075 Call 0x1C17F20
	076 Move X0, X22
	077 Call 0x1C181E0

Method: System.Text.Encoding GetEncoding(System.String name)

Disassembly:
	0x03244998 ADRP X25, 0x1198000
	0x0324499C ADRP X24, 0xEDE000
	0x032449A0 LDRB W8, [X25 + 0x446]
	0x032449A4 LDR X24, [X24 + 0xAB0]
	0x032449A8 MOV X19, X4
	0x032449AC MOV X21, X3
	0x032449B0 MOV X20, X2
	0x032449B4 MOV X23, X1
	0x032449B8 MOV X22, X0
	0x032449BC TBNZ X8, 0x0, 0x32449F8
	0x032449C0 ADRP X0, 0xEDE000
	0x032449C4 LDR X0, [X0 + 0xAB0]
	0x032449C8 BL 0x1C16CF4
	0x032449CC ADRP X0, 0xEDE000
	0x032449D0 LDR X0, [X0 + 0xAB8]
	0x032449D4 BL 0x1C16CF4
	0x032449D8 ADRP X0, 0xEDE000
	0x032449DC LDR X0, [X0 + 0xAC0]
	0x032449E0 BL 0x1C16CF4
	0x032449E4 ADRP X0, 0xEDE000
	0x032449E8 LDR X0, [X0 + 0x588]
	0x032449EC BL 0x1C16CF4
	0x032449F0 MOVZ W8, 0x1
	0x032449F4 STRB W8, [X25 + 0x446]
	0x032449F8 LDR X0, [X24]
	0x032449FC ADRP X24, 0xEDE000
	0x03244A00 LDR X8, [X0 + 0x38]
	0x03244A04 LDR X24, [X24 + 0xAB8]
	0x03244A08 CBNZ X8, 0x3244A10
	0x03244A0C BL 0x1C5C6E0
	0x03244A10 LDR X0, [X24]
	0x03244A14 LDR X8, [X0 + 0x38]
	0x03244A18 CBNZ X8, 0x3244A20
	0x03244A1C BL 0x1C5C6E0
	0x03244A20 LDR X8, [X22]
	0x03244A24 CMP W20, 0x0
	0x03244A28 CSINC X1, X23, X31, NE
	0x03244A2C CMP W19, 0x0
	0x03244A30 LDR X6, [X8 + 0x2F8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1199000
	006 Move X21, 0xEDF000
	007 Move W8, [X20+1080]
	008 Move X21, [X21+1024]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xEDF000
	015 Move X0, [X0+1024]
	016 Call 0x1C17CF4
	017 Move X0, 0xEDF000
	018 Move X0, [X0+2528]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1080], W8
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X19
	028 Move X1, X31
	029 Call EncodingProvider.GetEncodingFromProvider, X0
	030 Compare X0, 0
	031 JumpIfEqual {37}
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return X0
	037 Move X8, 0xEDF000
	038 Move X8, [X8+2528]
	039 Move X0, [X8]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X19
	045 Move X1, X31
	046 Call EncodingTable.GetCodePageFromName, X0
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Call Encoding.GetEncoding, X0
	052 Return X0

Method: System.Byte[] GetPreamble()

Disassembly:
	0x03244A34 LDR X5, [X8 + 0x300]
	0x03244A38 CSINC X3, X21, X31, NE
	0x03244A3C MOV X0, X22
	0x03244A40 MOV W2, W20
	0x03244A44 MOV W4, W19
	0x03244A48 LDP X20, X19, [X31 + 0x30]
	0x03244A4C LDP X22, X21, [X31 + 0x20]
	0x03244A50 LDP X24, X23, [X31 + 0x10]
	0x03244A54 LDP X30, X25, [X31], #0x40
	0x03244A58 BR X6
	0x03244A5C STP X30, X23, [X31 - 0x30]!
	0x03244A60 STP X22, X21, [X31 + 0x10]
	0x03244A64 STP X20, X19, [X31 + 0x20]
	0x03244A68 ADRP X23, 0x1198000
	0x03244A6C ADRP X22, 0xEDE000
	0x03244A70 LDRB W8, [X23 + 0x447]
	0x03244A74 LDR X22, [X22 + 0xAB0]
	0x03244A78 MOV X19, X2
	0x03244A7C MOV X21, X1
	0x03244A80 MOV X20, X0
	0x03244A84 TBNZ X8, 0x0, 0x3244AA8
	0x03244A88 ADRP X0, 0xEDE000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1199000
	005 Move X19, 0xEDF000
	006 Move W8, [X20+1081]
	007 Move X19, [X19+2640]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xEDF000
	013 Move X0, [X0+2640]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1081], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.ReadOnlySpan`1<System.Byte> get_Preamble()

Disassembly:
	0x03244A8C LDR X0, [X0 + 0xAB0]
	0x03244A90 BL 0x1C16CF4
	0x03244A94 ADRP X0, 0xEDE000
	0x03244A98 LDR X0, [X0 + 0xAC0]
	0x03244A9C BL 0x1C16CF4
	0x03244AA0 MOVZ W8, 0x1
	0x03244AA4 STRB W8, [X23 + 0x447]
	0x03244AA8 LDR X0, [X22]
	0x03244AAC LDR X8, [X0 + 0x38]
	0x03244AB0 CBNZ X8, 0x3244AB8
	0x03244AB4 BL 0x1C5C6E0
	0x03244AB8 CMP W19, 0x0
	0x03244ABC CSINC X1, X21, X31, NE
	0x03244AC0 MOV X0, X20
	0x03244AC4 MOV W2, W19
	0x03244AC8 LDP X20, X19, [X31 + 0x20]
	0x03244ACC LDP X22, X21, [X31 + 0x10]
	0x03244AD0 LDP X30, X23, [X31], #0x30
	0x03244AD4 B 0x32448A4
	0x03244AD8 LDR W0, [X0 + 0x10]
	0x03244ADC RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1199000
	006 Move X20, 0xEDF000
	007 Move W8, [X21+1082]
	008 Move X20, [X20+1776]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEDF000
	015 Move X0, [X0+1776]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1082], W8
	019 Move X8, [X19]
	020 Move X0, X19
	021 Move X9, [X8+408]
	022 Move X1, [X8+416]
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Move X1, [X20]
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call 0x25BFADC, X0
	030 Return X0

Method: System.Void GetDataItem()

Disassembly:
	0x03244AE0 STP X30, X21, [X31 - 0x20]!
	0x03244AE4 STP X20, X19, [X31 + 0x10]
	0x03244AE8 ADRP X20, 0x1198000
	0x03244AEC ADRP X21, 0xEDE000
	0x03244AF0 LDRB W8, [X20 + 0x448]
	0x03244AF4 LDR X21, [X21 + 0xAC8]
	0x03244AF8 MOV X19, X0
	0x03244AFC TBNZ X8, 0x0, 0x3244B14
	0x03244B00 ADRP X0, 0xEDE000
	0x03244B04 LDR X0, [X0 + 0xAC8]
	0x03244B08 BL 0x1C16CF4
	0x03244B0C MOVZ W8, 0x1
	0x03244B10 STRB W8, [X20 + 0x448]
	0x03244B14 LDR X0, [X21]
	0x03244B18 BL 0x1C16F10
	0x03244B1C MOV X1, X31
	0x03244B20 MOV X20, X0
	0x03244B24 BL 0x33FCBCC
	0x03244B28 MOVZ W8, 0x1
	0x03244B2C STR X19, [X20 + 0x20]
	0x03244B30 STRB W8, [X20 + 0x28]
	0x03244B34 MOV X0, X20
	0x03244B38 LDP X20, X19, [X31 + 0x10]
	0x03244B3C LDP X30, X21, [X31], #0x20
	0x03244B40 RET
	0x03244B44 STR X30, [X31 - 0x20]!
	0x03244B48 STP X20, X19, [X31 + 0x10]
	0x03244B4C MOV X19, X1
	0x03244B50 MOV X1, X31
	0x03244B54 MOV X20, X0
	0x03244B58 BL 0x33FCBCC
	0x03244B5C MOVZ W8, 0x1
	0x03244B60 STR X19, [X20 + 0x20]
	0x03244B64 STRB W8, [X20 + 0x28]
	0x03244B68 LDP X20, X19, [X31 + 0x10]
	0x03244B6C LDR X30, [X31], #0x20
	0x03244B70 RET
	0x03244B74 STR X30, [X31 - 0x20]!
	0x03244B78 STP X20, X19, [X31 + 0x10]
	0x03244B7C ADRP X19, 0x1198000
	0x03244B80 ADRP X20, 0xEDE000
	0x03244B84 LDRB W8, [X19 + 0x449]
	0x03244B88 LDR X20, [X20 + 0x9D8]
	0x03244B8C TBNZ X8, 0x0, 0x3244BA4
	0x03244B90 ADRP X0, 0xEDE000
	0x03244B94 LDR X0, [X0 + 0x9D8]
	0x03244B98 BL 0x1C16CF4
	0x03244B9C MOVZ W8, 0x1
	0x03244BA0 STRB W8, [X19 + 0x449]
	0x03244BA4 LDR X0, [X20]
	0x03244BA8 LDR W8, [X0 + 0xE0]
	0x03244BAC CBNZ W8, 0x3244BB4
	0x03244BB0 BL 0x1C16DFC
	0x03244BB4 BL 0x3244BD4
	0x03244BB8 CBZ X0, 0x3244BD0
	0x03244BBC LDP X20, X19, [X31 + 0x10]
	0x03244BC0 MOVZ W8, 0x1
	0x03244BC4 STRB W8, [X0 + 0x21]
	0x03244BC8 LDR X30, [X31], #0x20
	0x03244BCC RET
	0x03244BD0 BL 0x1C16F20
	0x03244BD4 STR X30, [X31 - 0x20]!
	0x03244BD8 STP X20, X19, [X31 + 0x10]
	0x03244BDC ADRP X20, 0x1198000
	0x03244BE0 ADRP X19, 0xEDE000
	0x03244BE4 LDRB W8, [X20 + 0x470]
	0x03244BE8 LDR X19, [X19 + 0x9D8]
	0x03244BEC TBNZ X8, 0x0, 0x3244C04
	0x03244BF0 ADRP X0, 0xEDE000
	0x03244BF4 LDR X0, [X0 + 0x9D8]
	0x03244BF8 BL 0x1C16CF4
	0x03244BFC MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1199000
	005 Move W8, [X20+1083]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xEDF000
	012 Move X0, [X0+2528]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1083], W8
	016 Move X8, [X19+24]
	017 Compare X8, 0
	018 JumpIfNotEqual {33}
	019 Move X8, 0xEDF000
	020 Move X8, [X8+2528]
	021 Move W20, [X19+16]
	022 Move X0, [X8]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move W0, W20
	028 Move X1, X31
	029 Call EncodingTable.GetCodePageDataItem, X0
	030 Move [X19+24], X0
	031 Compare X0, 0
	032 JumpIfEqual {37}
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return 
	037 Move X0, 0xEB0000
	038 Move X0, [X0+2512]
	039 Call 0x1C17D08
	040 Move W1, 1
	041 Call 0x1C17D6C
	042 Move W8, [X19+16]
	043 Move X20, X0
	044 Move X0, 0xEB0000
	045 Move [X31+12], W8
	046 Move X0, [X0+1880]
	047 Call 0x1C17D08
	048 Add X1, X31, 12
	049 Call 0x1C17E04
	050 Move X19, X0
	051 Move X0, X20
	052 Call 0x19913C0
	053 Move X0, X20
	054 Move X1, X19
	055 Call 0x19990B4
	056 Move X0, X20
	057 Move X1, X31
	058 Move X2, X19
	059 Call 0x1994444
	060 Move X0, 0xEDF000
	061 Move X0, [X0+2576]
	062 Call 0x1C17D08
	063 Move X1, X20
	064 Move X2, X31
	065 Call Environment.GetResourceString, X0, X1
	066 Move X19, X0
	067 Move X0, 0xEB0000
	068 Move X0, [X0+2880]
	069 Call 0x1C17D08
	070 Call 0x1C17F10
	071 Move X1, X19
	072 Move X2, X31
	073 Move X20, X0
	074 Call NotSupportedException..ctor, X0, X1
	075 Move X0, 0xEDF000
	076 Move X0, [X0+2648]
	077 Call 0x1C17D08
	078 Move X1, X0
	079 Move X0, X20
	080 Call 0x1C17DEC

Method: System.String get_EncodingName()

Disassembly:
	0x03244C00 STRB W8, [X20 + 0x470]
	0x03244C04 LDR X0, [X19]
	0x03244C08 MOVZ W8, 0x1

ISIL:
	001 Move W0, [X0+16]
	002 Move X1, X31
	003 Call Environment.GetResourceStringEncodingName, X0
	004 Return X0

Method: System.String get_HeaderName()

Disassembly:
	0x03244C0C STR W8, [X31 + 0xC]
	0x03244C10 LDR W8, [X0 + 0xE0]
	0x03244C14 CBNZ W8, 0x3244C1C
	0x03244C18 BL 0x1C16DFC
	0x03244C1C ADD X0, X31, 0xC
	0x03244C20 BL 0x1CB7280
	0x03244C24 LDR W8, [X31 + 0xC]
	0x03244C28 ADDS W31, W8, 0x1
	0x03244C2C B.EQ 0x3244C64
	0x03244C30 AND W0, W8, 0xFFFFFFF
	0x03244C34 SUB W8, W0, 0x1
	0x03244C38 CMP W8, 0x5

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+24]
	005 Compare X0, 0
	006 JumpIfNotEqual {12}
	007 Move X0, X19
	008 Call Encoding.GetDataItem, X0
	009 Move X0, [X19+24]
	010 Compare X0, 0
	011 JumpIfEqual {17}
	012 Move X1, X31
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Call CodePageDataItem.get_HeaderName, X0
	016 Return X0
	017 Call 0x1C17F20

Method: System.String get_WebName()

Disassembly:
	0x03244C3C STR W0, [X31 + 0xC]
	0x03244C40 B.HI 0x3244C94
	0x03244C44 ADRP X9, 0xFFFFFFFFFD952000
	0x03244C48 ADD X9, X9, 0x483
	0x03244C4C ADR X10, 0x10
	0x03244C50 LDRB W11, [X9, X8, LSL]
	0x03244C54 ADD X10, X10, X11, 0x2, LSL
	0x03244C58 BR X10
	0x03244C5C MOVZ W0, 0x4E9F
	0x03244C60 B 0x3244C90
	0x03244C64 BL 0x3243998
	0x03244C68 B 0x3244C98

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+24]
	005 Compare X0, 0
	006 JumpIfNotEqual {12}
	007 Move X0, X19
	008 Call Encoding.GetDataItem, X0
	009 Move X0, [X19+24]
	010 Compare X0, 0
	011 JumpIfEqual {17}
	012 Move X1, X31
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Call CodePageDataItem.get_WebName, X0
	016 Return X0
	017 Call 0x1C17F20

Method: System.Text.EncoderFallback get_EncoderFallback()

Disassembly:
	0x03244C6C MOVZ W0, 0x4B1
	0x03244C70 B 0x3244C90

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_EncoderFallback(System.Text.EncoderFallback value)

Disassembly:
	0x03244820 ADRP X8, 0xEDE000
	0x03244824 ADRP X9, 0xEDE000
	0x03244828 LDR X8, [X8 + 0x310]
	0x0324482C LDR X9, [X9 + 0x328]
	0x03244830 CMP W21, 0x0
	0x03244834 CSEL X0, X9, X8, LT
	0x03244838 BL 0x1C16D08
	0x0324483C MOV X19, X0
	0x03244840 ADRP X0, 0xED7000
	0x03244844 LDR X0, [X0 + 0x670]
	0x03244848 BL 0x1C16D08
	0x0324484C MOV X1, X31
	0x03244850 BL 0x33BDD84
	0x03244854 MOV X20, X0
	0x03244858 ADRP X0, 0xEB7000
	0x0324485C LDR X0, [X0 + 0x760]
	0x03244860 BL 0x1C16D08
	0x03244864 BL 0x1C16F10
	0x03244868 MOV X1, X19
	0x0324486C MOV X2, X20
	0x03244870 MOV X3, X31
	0x03244874 MOV X21, X0
	0x03244878 BL 0x3311888
	0x0324487C ADRP X0, 0xEDE000
	0x03244880 LDR X0, [X0 + 0xAA0]
	0x03244884 BL 0x1C16D08
	0x03244888 MOV X1, X0
	0x0324488C MOV X0, X21
	0x03244890 BL 0x1C16DEC
	0x03244894 LDR X8, [X0]
	0x03244898 LDR X6, [X8 + 0x2F8]
	0x0324489C LDR X5, [X8 + 0x300]
	0x032448A0 BR X6
	0x032448A4 STR X30, [X31 - 0x20]!
	0x032448A8 STP X20, X19, [X31 + 0x10]
	0x032448AC CBZ X1, 0x32448D4
	0x032448B0 TBNZ X2, 0x1F, 0x3244924
	0x032448B4 LDP X20, X19, [X31 + 0x10]
	0x032448B8 MOV X8, X0
	0x032448BC MOV X0, X1
	0x032448C0 MOV W1, W2
	0x032448C4 MOV X2, X8
	0x032448C8 MOV X3, X31
	0x032448CC LDR X30, [X31], #0x20
	0x032448D0 B 0x322DAF4
	0x032448D4 ADRP X0, 0xEDE000
	0x032448D8 LDR X0, [X0 + 0x2E0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+33]
	005 Compare W8, 0
	006 JumpIfNotEqual {14}
	007 Compare X1, 0
	008 JumpIfEqual {34}
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move [X0+40], X1
	012 Move X30, [X31+32]
	013 Return 
	014 Move X0, 0xEDF000
	015 Move X0, [X0+2616]
	016 Call 0x1C17D08
	017 Move X1, X31
	018 Call Environment.GetResourceString, X0
	019 Move X19, X0
	020 Move X0, 0xEB0000
	021 Move X0, [X0+1456]
	022 Call 0x1C17D08
	023 Call 0x1C17F10
	024 Move X1, X19
	025 Move X2, X31
	026 Move X20, X0
	027 Call InvalidOperationException..ctor, X0, X1
	028 Move X0, 0xEDF000
	029 Move X0, [X0+2624]
	030 Call 0x1C17D08
	031 Move X1, X0
	032 Move X0, X20
	033 Call 0x1C17DEC
	034 Move X0, 0xEB5000
	035 Move X0, [X0+1320]
	036 Call 0x1C17D08
	037 Call 0x1C17F10
	038 Move X19, X0
	039 Move X0, 0xEBA000
	040 Move X0, [X0+3784]
	041 Call 0x1C17D08
	042 Move X1, X0
	043 Move X0, X19
	044 Move X2, X31
	045 Call ArgumentNullException..ctor, X0, X1
	046 Move X0, 0xEDF000
	047 Move X0, [X0+2624]
	048 Call 0x1C17D08
	049 Move X1, X0
	050 Move X0, X19
	051 Call 0x1C17DEC

Method: System.Text.DecoderFallback get_DecoderFallback()

Disassembly:
	0x03244C74 MOVZ W0, 0xFDE9
	0x03244C78 B 0x3244C90

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_DecoderFallback(System.Text.DecoderFallback value)

Disassembly:
	0x032448DC BL 0x1C16D08
	0x032448E0 MOV X1, X31
	0x032448E4 BL 0x33BDD84
	0x032448E8 MOV X19, X0
	0x032448EC ADRP X0, 0xEB4000
	0x032448F0 LDR X0, [X0 + 0x528]
	0x032448F4 BL 0x1C16D08
	0x032448F8 BL 0x1C16F10
	0x032448FC MOV X20, X0
	0x03244900 ADRP X0, 0xEDE000
	0x03244904 LDR X0, [X0 + 0x308]
	0x03244908 BL 0x1C16D08
	0x0324490C MOV X1, X0
	0x03244910 MOV X0, X20
	0x03244914 MOV X2, X19
	0x03244918 MOV X3, X31
	0x0324491C BL 0x3315F7C
	0x03244920 B 0x3244970
	0x03244924 ADRP X0, 0xED7000
	0x03244928 LDR X0, [X0 + 0x670]
	0x0324492C BL 0x1C16D08
	0x03244930 MOV X1, X31
	0x03244934 BL 0x33BDD84
	0x03244938 MOV X19, X0
	0x0324493C ADRP X0, 0xEB7000
	0x03244940 LDR X0, [X0 + 0x760]
	0x03244944 BL 0x1C16D08
	0x03244948 BL 0x1C16F10
	0x0324494C MOV X20, X0
	0x03244950 ADRP X0, 0xEDE000
	0x03244954 LDR X0, [X0 + 0x328]
	0x03244958 BL 0x1C16D08
	0x0324495C MOV X1, X0
	0x03244960 MOV X0, X20
	0x03244964 MOV X2, X19
	0x03244968 MOV X3, X31
	0x0324496C BL 0x3311888
	0x03244970 ADRP X0, 0xEDE000
	0x03244974 LDR X0, [X0 + 0xAA8]
	0x03244978 BL 0x1C16D08
	0x0324497C MOV X1, X0
	0x03244980 MOV X0, X20
	0x03244984 BL 0x1C16DEC
	0x03244988 STP X30, X25, [X31 - 0x40]!
	0x0324498C STP X24, X23, [X31 + 0x10]
	0x03244990 STP X22, X21, [X31 + 0x20]
	0x03244994 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+33]
	005 Compare W8, 0
	006 JumpIfNotEqual {14}
	007 Compare X1, 0
	008 JumpIfEqual {34}
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move [X0+48], X1
	012 Move X30, [X31+32]
	013 Return 
	014 Move X0, 0xEDF000
	015 Move X0, [X0+2616]
	016 Call 0x1C17D08
	017 Move X1, X31
	018 Call Environment.GetResourceString, X0
	019 Move X19, X0
	020 Move X0, 0xEB0000
	021 Move X0, [X0+1456]
	022 Call 0x1C17D08
	023 Call 0x1C17F10
	024 Move X1, X19
	025 Move X2, X31
	026 Move X20, X0
	027 Call InvalidOperationException..ctor, X0, X1
	028 Move X0, 0xEDF000
	029 Move X0, [X0+2632]
	030 Call 0x1C17D08
	031 Move X1, X0
	032 Move X0, X20
	033 Call 0x1C17DEC
	034 Move X0, 0xEB5000
	035 Move X0, [X0+1320]
	036 Call 0x1C17D08
	037 Call 0x1C17F10
	038 Move X19, X0
	039 Move X0, 0xEBA000
	040 Move X0, [X0+3784]
	041 Call 0x1C17D08
	042 Move X1, X0
	043 Move X0, X19
	044 Move X2, X31
	045 Call ArgumentNullException..ctor, X0, X1
	046 Move X0, 0xEDF000
	047 Move X0, [X0+2632]
	048 Call 0x1C17D08
	049 Move X1, X0
	050 Move X0, X19
	051 Call 0x1C17DEC

Method: System.Object Clone()

Disassembly:
	0x03244C7C MOVZ W0, 0x4B0
	0x03244C80 B 0x3244C90
	0x03244C84 MOVZ W0, 0xFDEF
	0x03244C88 B 0x3244C90
	0x03244C8C MOVZ W0, 0x4E4
	0x03244C90 STR W0, [X31 + 0xC]
	0x03244C94 BL 0x3242308
	0x03244C98 LDP X20, X19, [X31 + 0x10]
	0x03244C9C LDR X30, [X31], #0x20
	0x03244CA0 RET
	0x03244CA4 B 0x3244CA8
	0x03244CA8 MOV X19, X0
	0x03244CAC CMP W1, 0x1
	0x03244CB0 B.NE 0x3244D44
	0x03244CB4 MOV X0, X19
	0x03244CB8 BL 0x3EB1AD0
	0x03244CBC MOV X19, X0
	0x03244CC0 ADRP X0, 0xEAF000
	0x03244CC4 LDR X0, [X0 + 0xB40]
	0x03244CC8 BL 0x1C16D08
	0x03244CCC LDR X8, [X19]
	0x03244CD0 LDR X1, [X8]
	0x03244CD4 BL 0x1C17270
	0x03244CD8 TBNZ X0, 0x0, 0x3244CF8
	0x03244CDC ADRP X0, 0xEB7000
	0x03244CE0 LDR X0, [X0 + 0x578]
	0x03244CE4 BL 0x1C16D08
	0x03244CE8 LDR X8, [X19]
	0x03244CEC LDR X1, [X8]
	0x03244CF0 BL 0x1C17270
	0x03244CF4 TBZ X0, 0x0, 0x3244D1C
	0x03244CF8 BL 0x3EB1AE0
	0x03244CFC ADRP X0, 0xEDE000
	0x03244D00 LDR X0, [X0 + 0x9D8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1199000
	005 Move W8, [X20+1084]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xEDF000
	012 Move X0, [X0+1016]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1084], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Call Object.MemberwiseClone, X0
	019 Compare X0, 0
	020 JumpIfEqual {38}
	021 Move X9, 0xEDF000
	022 Move X9, [X9+1016]
	023 Move X8, [X0]
	024 Move X1, [X9]
	025 Move W10, [X8+304]
	026 Move W9, [X1+304]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X8, [X8+200]
	029 Add X8, X8, X9
	030 NotImplemented "Instruction LDUR not yet implemented."
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move [X0+33], W31
	035 Move X30, [X31+32]
	036 Return X0
	037 Call 0x1C181E0
	038 Call 0x1C17F20

Method: System.Boolean get_IsReadOnly()

Disassembly:
	0x03244D04 BL 0x1C16D08
	0x03244D08 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move W0, [X0+33]
	002 Return X0

Method: System.Text.Encoding get_ASCII()

Disassembly:
	0x03243EC8 MOV X20, X0
	0x03243ECC ADRP X0, 0xED8000
	0x03243ED0 LDR X0, [X0 + 0x648]
	0x03243ED4 BL 0x1C16D08
	0x03243ED8 MOV X1, X0
	0x03243EDC MOV X0, X20
	0x03243EE0 MOV X2, X19
	0x03243EE4 MOV X3, X31
	0x03243EE8 BL 0x3311888
	0x03243EEC ADRP X0, 0xEDF000
	0x03243EF0 LDR X0, [X0 + 0xA68]
	0x03243EF4 BL 0x1C16D08
	0x03243EF8 MOV X1, X0
	0x03243EFC MOV X0, X20
	0x03243F00 BL 0x1C16DEC
	0x03243F04 BL 0x1C16F20
	0x03243F08 LDR X8, [X0]
	0x03243F0C LDR X4, [X8 + 0x218]
	0x03243F10 LDR X3, [X8 + 0x220]
	0x03243F14 BR X4
	0x03243F18 STR X30, [X31 - 0x20]!
	0x03243F1C STP X20, X19, [X31 + 0x10]
	0x03243F20 CBZ X1, 0x3243F44
	0x03243F24 LDR X8, [X0]
	0x03243F28 LDR W3, [X1 + 0x18]
	0x03243F2C LDP X20, X19, [X31 + 0x10]
	0x03243F30 MOV W2, W31
	0x03243F34 LDR X5, [X8 + 0x248]
	0x03243F38 LDR X4, [X8 + 0x250]
	0x03243F3C LDR X30, [X31], #0x20
	0x03243F40 BR X5
	0x03243F44 ADRP X0, 0xEDF000
	0x03243F48 LDR X0, [X0 + 0x2E0]
	0x03243F4C BL 0x1C16D08
	0x03243F50 MOV X1, X31
	0x03243F54 BL 0x33BDD84
	0x03243F58 MOV X19, X0
	0x03243F5C ADRP X0, 0xEB5000
	0x03243F60 LDR X0, [X0 + 0x528]
	0x03243F64 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x119A000
	005 Move X20, 0xEE0000
	006 Move W8, [X19+1085]
	007 Move X20, [X20+1016]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xEE0000
	013 Move X0, [X0+2584]
	014 Call 0x1C17CF4
	015 Move X0, 0xEE0000
	016 Move X0, [X0+1016]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+1085], W8
	020 Move X8, [X20]
	021 Move X8, [X8+184]
	022 Move X19, [X8+48]
	023 Call 0x1C17D44
	024 Compare X19, 0
	025 JumpIfEqual {28}
	026 Move X8, [X20]
	027 Move X8, [X8+184]
	028 Move X8, 0xEE0000
	029 Move X8, [X8+2584]
	030 Move X0, [X8]
	031 Call 0x1C17F10
	032 Move X1, X31
	033 Move X19, X0
	034 Call ASCIIEncoding..ctor, X0
	035 Call 0x1C17D44
	036 Move X8, [X20]
	037 Move X8, [X8+184]
	038 Move [X8+48], X19
	039 Move X19, [X8+48]
	040 Call 0x1C17D44
	041 Move X0, X19
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Return X0

Method: System.Text.Encoding get_Latin1()

Disassembly:
	0x03243F68 BL 0x1C16F10
	0x03243F6C MOV X20, X0
	0x03243F70 ADRP X0, 0xEDF000
	0x03243F74 LDR X0, [X0 + 0x2D8]
	0x03243F78 BL 0x1C16D08
	0x03243F7C MOV X1, X0
	0x03243F80 MOV X0, X20
	0x03243F84 MOV X2, X19
	0x03243F88 MOV X3, X31
	0x03243F8C BL 0x3315F7C
	0x03243F90 ADRP X0, 0xEDF000
	0x03243F94 LDR X0, [X0 + 0xA70]
	0x03243F98 BL 0x1C16D08
	0x03243F9C MOV X1, X0
	0x03243FA0 MOV X0, X20
	0x03243FA4 BL 0x1C16DEC
	0x03243FA8 STR X30, [X31 - 0x40]!
	0x03243FAC STP X24, X23, [X31 + 0x10]
	0x03243FB0 STP X22, X21, [X31 + 0x20]
	0x03243FB4 STP X20, X19, [X31 + 0x30]
	0x03243FB8 ADRP X24, 0x1199000
	0x03243FBC ADRP X23, 0xEB0000
	0x03243FC0 LDRB W8, [X24 + 0x440]
	0x03243FC4 LDR X23, [X23 + 0x618]
	0x03243FC8 MOV W19, W3
	0x03243FCC MOV W20, W2
	0x03243FD0 MOV X21, X1
	0x03243FD4 MOV X22, X0
	0x03243FD8 TBNZ X8, 0x0, 0x3243FF0
	0x03243FDC ADRP X0, 0xEB0000
	0x03243FE0 LDR X0, [X0 + 0x618]
	0x03243FE4 BL 0x1C16CF4
	0x03243FE8 MOVZ W8, 0x1
	0x03243FEC STRB W8, [X24 + 0x440]
	0x03243FF0 LDR X8, [X22]
	0x03243FF4 MOV X0, X22
	0x03243FF8 MOV X1, X21
	0x03243FFC MOV W2, W20
	0x03244000 LDR X9, [X8 + 0x208]
	0x03244004 LDR X4, [X8 + 0x210]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x119A000
	005 Move X20, 0xEE0000
	006 Move W8, [X19+1086]
	007 Move X20, [X20+1016]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xEE0000
	013 Move X0, [X0+1016]
	014 Call 0x1C17CF4
	015 Move X0, 0xEE0000
	016 Move X0, [X0+1088]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+1086], W8
	020 Move X8, [X20]
	021 Move X8, [X8+184]
	022 Move X19, [X8+56]
	023 Call 0x1C17D44
	024 Compare X19, 0
	025 JumpIfEqual {28}
	026 Move X8, [X20]
	027 Move X8, [X8+184]
	028 Move X8, 0xEE0000
	029 Move X8, [X8+1088]
	030 Move X0, [X8]
	031 Call 0x1C17F10
	032 Move X1, X31
	033 Move X19, X0
	034 Call Latin1Encoding..ctor, X0
	035 Call 0x1C17D44
	036 Move X8, [X20]
	037 Move X8, [X8+184]
	038 Move [X8+56], X19
	039 Move X19, [X8+56]
	040 Call 0x1C17D44
	041 Move X0, X19
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Return X0

Method: System.Int32 GetByteCount(System.String s)

Disassembly:
	0x03244D0C CBNZ W8, 0x3244D14
	0x03244D10 BL 0x1C16DFC
	0x03244D14 BL 0x3247D44
	0x03244D18 B 0x3244C98
	0x03244D1C MOVZ W0, 0x8
	0x03244D20 BL 0x3EB1AF0
	0x03244D24 LDR X8, [X19]
	0x03244D28 STR X8, [X0]
	0x03244D2C ADRP X1, 0xC70000
	0x03244D30 ADD X1, X1, 0xE58
	0x03244D34 MOV X2, X31
	0x03244D38 BL 0x3EB1B00
	0x03244D3C MOV X19, X0
	0x03244D40 BL 0x3EB1AE0
	0x03244D44 MOV X0, X19
	0x03244D48 BL 0x1D2C690
	0x03244D4C BL 0x1990590
	0x03244D50 AND W8, W1, 0x1
	0x03244D54 STRB W8, [X0 + 0x21]
	0x03244D58 RET
	0x03244D5C STP X30, X21, [X31 - 0x20]!
	0x03244D60 STP X20, X19, [X31 + 0x10]
	0x03244D64 ADRP X20, 0x1198000
	0x03244D68 ADRP X21, 0xEDE000
	0x03244D6C LDRB W8, [X20 + 0x44B]
	0x03244D70 LDR X21, [X21 + 0xAD0]
	0x03244D74 MOV X19, X0
	0x03244D78 TBNZ X8, 0x0, 0x3244D90
	0x03244D7C ADRP X0, 0xEDE000
	0x03244D80 LDR X0, [X0 + 0xAD0]
	0x03244D84 BL 0x1C16CF4
	0x03244D88 MOVZ W8, 0x1
	0x03244D8C STRB W8, [X20 + 0x44B]
	0x03244D90 LDR X0, [X21]
	0x03244D94 BL 0x1C16F10

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X1, 0
	004 JumpIfEqual {21}
	005 Move X19, X0
	006 Move X0, X1
	007 Move X1, X31
	008 Call String.ToCharArray, X0
	009 Compare X0, 0
	010 JumpIfEqual {39}
	011 Move X8, [X19]
	012 Move W3, [X0+24]
	013 Move X1, X0
	014 Move X0, X19
	015 Move X5, [X8+520]
	016 Move X4, [X8+528]
	017 Move W2, W31
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 CallNoReturn X5
	021 Move X0, 0xEB5000
	022 Move X0, [X0+1320]
	023 Call 0x1C17D08
	024 Call 0x1C17F10
	025 Move X19, X0
	026 Move X0, 0xED9000
	027 Move X0, [X0+3264]
	028 Call 0x1C17D08
	029 Move X1, X0
	030 Move X0, X19
	031 Move X2, X31
	032 Call ArgumentNullException..ctor, X0, X1
	033 Move X0, 0xEDF000
	034 Move X0, [X0+2656]
	035 Call 0x1C17D08
	036 Move X1, X0
	037 Move X0, X19
	038 Call 0x1C17DEC
	039 Call 0x1C17F20

Method: System.Int32 GetByteCount(System.Char[] chars, System.Int32 index, System.Int32 count)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Int32 GetByteCount(System.Char* chars, System.Int32 count)

Disassembly:
	0x03244D98 MOV X1, X31
	0x03244D9C MOV X20, X0
	0x03244DA0 BL 0x33FEB60
	0x03244DA4 MOVZ W8, 0x1
	0x03244DA8 STR X19, [X20 + 0x20]
	0x03244DAC STRB W8, [X20 + 0x28]
	0x03244DB0 MOV X0, X20
	0x03244DB4 LDP X20, X19, [X31 + 0x10]
	0x03244DB8 LDP X30, X21, [X31], #0x20
	0x03244DBC RET
	0x03244DC0 STR X30, [X31 - 0x20]!
	0x03244DC4 STP X20, X19, [X31 + 0x10]
	0x03244DC8 MOV X19, X1
	0x03244DCC MOV X1, X31
	0x03244DD0 MOV X20, X0
	0x03244DD4 BL 0x33FEB60
	0x03244DD8 MOVZ W8, 0x1
	0x03244DDC STR X19, [X20 + 0x20]
	0x03244DE0 STRB W8, [X20 + 0x28]
	0x03244DE4 LDP X20, X19, [X31 + 0x10]
	0x03244DE8 LDR X30, [X31], #0x20
	0x03244DEC RET
	0x03244DF0 STR X30, [X31 - 0x20]!
	0x03244DF4 STP X20, X19, [X31 + 0x10]
	0x03244DF8 CBZ X1, 0x3244E1C
	0x03244DFC LDR X8, [X0]
	0x03244E00 LDR W3, [X1 + 0x18]
	0x03244E04 LDP X20, X19, [X31 + 0x10]
	0x03244E08 MOV W2, W31
	0x03244E0C LDR X5, [X8 + 0x388]
	0x03244E10 LDR X4, [X8 + 0x390]
	0x03244E14 LDR X30, [X31], #0x20
	0x03244E18 BR X5
	0x03244E1C ADRP X0, 0xEDE000
	0x03244E20 LDR X0, [X0 + 0x2E0]
	0x03244E24 BL 0x1C16D08
	0x03244E28 MOV X1, X31
	0x03244E2C BL 0x33BDD84
	0x03244E30 MOV X19, X0
	0x03244E34 ADRP X0, 0xEB4000
	0x03244E38 LDR X0, [X0 + 0x528]
	0x03244E3C BL 0x1C16D08
	0x03244E40 BL 0x1C16F10
	0x03244E44 MOV X20, X0
	0x03244E48 ADRP X0, 0xEDE000
	0x03244E4C LDR X0, [X0 + 0x308]
	0x03244E50 BL 0x1C16D08
	0x03244E54 MOV X1, X0
	0x03244E58 MOV X0, X20
	0x03244E5C MOV X2, X19
	0x03244E60 MOV X3, X31
	0x03244E64 BL 0x3315F7C
	0x03244E68 ADRP X0, 0xEDE000
	0x03244E6C LDR X0, [X0 + 0xAD8]
	0x03244E70 BL 0x1C16D08
	0x03244E74 MOV X1, X0
	0x03244E78 MOV X0, X20
	0x03244E7C BL 0x1C16DEC
	0x03244E80 STR X30, [X31 - 0x10]!
	0x03244E84 LDR X8, [X0]
	0x03244E88 LDR X9, [X8 + 0x2D8]
	0x03244E8C LDR X4, [X8 + 0x2E0]
	0x03244E90 BLR X9
	0x03244E94 MOV X1, X0
	0x03244E98 MOV X0, X31
	0x03244E9C MOV X2, X31
	0x03244EA0 LDR X30, [X31], #0x10
	0x03244EA4 B 0x32256D4
	0x03244EA8 STP X30, X21, [X31 - 0x20]!
	0x03244EAC STP X20, X19, [X31 + 0x10]
	0x03244EB0 ADRP X21, 0x1198000
	0x03244EB4 LDRB W8, [X21 + 0x451]
	0x03244EB8 MOV X20, X1
	0x03244EBC MOV X19, X0
	0x03244EC0 TBNZ X8, 0x0, 0x3244ED8
	0x03244EC4 ADRP X0, 0xEDE000
	0x03244EC8 LDR X0, [X0 + 0x3F8]
	0x03244ECC BL 0x1C16CF4
	0x03244ED0 MOVZ W8, 0x1
	0x03244ED4 STRB W8, [X21 + 0x451]
	0x03244ED8 CBZ X20, 0x3244F64
	0x03244EDC ADRP X8, 0xEDE000
	0x03244EE0 LDR X8, [X8 + 0x3F8]
	0x03244EE4 LDR X9, [X20]
	0x03244EE8 LDR X8, [X8]
	0x03244EEC LDRB W11, [X9 + 0x130]
	0x03244EF0 LDRB W10, [X8 + 0x130]
	0x03244EF4 CMP W11, W10
	0x03244EF8 B.CC 0x3244F64
	0x03244EFC LDR X9, [X9 + 0xC8]
	0x03244F00 ADD X9, X9, X10, 0x3, LSL
	0x03244F04 LDUR X9, [X9 - 0x8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1199000
	007 Move W8, [X22+1087]
	008 Move W19, W2
	009 Move X21, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xEB9000
	016 Move X0, [X0+2264]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1087], W8
	020 Compare X21, 0
	021 JumpIfEqual {58}
	022 Move TEMP, X19
	023 And TEMP, TEMP, -2147483648
	024 Compare TEMP, -2147483648
	025 JumpIfEqual {77}
	026 Move X8, 0xEB9000
	027 Move X8, [X8+2264]
	028 Move W1, W19
	029 Move X0, [X8]
	030 Call 0x1C17D6C
	031 Move X1, X0
	032 Compare W19, 0
	033 JumpIfEqual {45}
	034 Compare X1, 0
	035 JumpIfEqual {102}
	036 Move W9, [X1+24]
	037 Move X8, X31
	038 Move W10, W19
	039 Add X11, X1, 32
	040 NotImplemented "Instruction CMP not yet implemented."
	041 NotImplemented "Instruction LDRH not yet implemented."
	042 NotImplemented "Instruction STRH not yet implemented."
	043 Add X8, X8, 1
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X8, [X20]
	046 Move X0, X20
	047 Move W3, W19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X5, [X8+520]
	051 Move X4, [X8+528]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move W2, W31
	055 Move X30, [X31+48]
	056 CallNoReturn X5
	057 Call 0x1C17F28
	058 Move X0, 0xEDF000
	059 Move X0, [X0+736]
	060 Call 0x1C17D08
	061 Move X1, X31
	062 Call Environment.GetResourceString, X0
	063 Move X19, X0
	064 Move X0, 0xEB5000
	065 Move X0, [X0+1320]
	066 Call 0x1C17D08
	067 Call 0x1C17F10
	068 Move X20, X0
	069 Move X0, 0xEDF000
	070 Move X0, [X0+728]
	071 Call 0x1C17D08
	072 Move X1, X0
	073 Move X0, X20
	074 Move X2, X19
	075 Move X3, X31
	076 Call ArgumentNullException..ctor, X0, X1, X2
	077 Move X0, 0xED8000
	078 Move X0, [X0+1648]
	079 Call 0x1C17D08
	080 Move X1, X31
	081 Call Environment.GetResourceString, X0
	082 Move X19, X0
	083 Move X0, 0xEB8000
	084 Move X0, [X0+1888]
	085 Call 0x1C17D08
	086 Call 0x1C17F10
	087 Move X20, X0
	088 Move X0, 0xED8000
	089 Move X0, [X0+1608]
	090 Call 0x1C17D08
	091 Move X1, X0
	092 Move X0, X20
	093 Move X2, X19
	094 Move X3, X31
	095 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	096 Move X0, 0xEDF000
	097 Move X0, [X0+2664]
	098 Call 0x1C17D08
	099 Move X1, X0
	100 Move X0, X20
	101 Call 0x1C17DEC
	102 Call 0x1C17F20

Method: System.Int32 GetByteCount(System.Char* chars, System.Int32 count, System.Text.EncoderNLS encoder)

Disassembly:
	0x03244F08 CMP X9, X8
	0x03244F0C CSEL X20, X20, X31, EQ
	0x03244F10 B.NE 0x3244F64
	0x03244F14 CBZ X20, 0x3244F74

ISIL:
	001 Move X8, [X0]
	002 Move X4, [X8+536]
	003 Move X3, [X8+544]
	004 CallNoReturn X4

Method: System.Byte[] GetBytes(System.Char[] chars)

Disassembly:
	0x03244F18 LDR W8, [X19 + 0x10]
	0x03244F1C LDR W9, [X20 + 0x10]
	0x03244F20 CMP W8, W9
	0x03244F24 B.NE 0x3244F64
	0x03244F28 LDR X0, [X19 + 0x28]
	0x03244F2C CBZ X0, 0x3244F74
	0x03244F30 LDR X8, [X0]
	0x03244F34 LDR X1, [X20 + 0x28]
	0x03244F38 LDP X9, X2, [X8 + 0x138]
	0x03244F3C BLR X9
	0x03244F40 TBZ X0, 0x0, 0x3244F64
	0x03244F44 LDR X0, [X19 + 0x30]
	0x03244F48 CBZ X0, 0x3244F74
	0x03244F4C LDR X8, [X0]
	0x03244F50 LDR X1, [X20 + 0x30]
	0x03244F54 LDP X20, X19, [X31 + 0x10]
	0x03244F58 LDP X3, X2, [X8 + 0x138]
	0x03244F5C LDP X30, X21, [X31], #0x20
	0x03244F60 BR X3
	0x03244F64 LDP X20, X19, [X31 + 0x10]
	0x03244F68 MOV W0, W31
	0x03244F6C LDP X30, X21, [X31], #0x20
	0x03244F70 RET
	0x03244F74 BL 0x1C16F20
	0x03244F78 STR X30, [X31 - 0x20]!
	0x03244F7C STP X20, X19, [X31 + 0x10]
	0x03244F80 MOV X19, X0
	0x03244F84 LDR X0, [X0 + 0x28]
	0x03244F88 CBZ X0, 0x3244FCC
	0x03244F8C LDR X8, [X0]
	0x03244F90 LDR W20, [X19 + 0x10]
	0x03244F94 LDP X9, X1, [X8 + 0x158]
	0x03244F98 BLR X9
	0x03244F9C LDR X8, [X19 + 0x30]
	0x03244FA0 CBZ X8, 0x3244FCC
	0x03244FA4 LDR X9, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {15}
	006 Move X8, [X0]
	007 Move W3, [X1+24]
	008 Move X20, [X31+16]
	009 Move X19, [X31+24]
	010 Move W2, W31
	011 Move X5, [X8+584]
	012 Move X4, [X8+592]
	013 Move X30, [X31+32]
	014 CallNoReturn X5
	015 Move X0, 0xEDF000
	016 Move X0, [X0+736]
	017 Call 0x1C17D08
	018 Move X1, X31
	019 Call Environment.GetResourceString, X0
	020 Move X19, X0
	021 Move X0, 0xEB5000
	022 Move X0, [X0+1320]
	023 Call 0x1C17D08
	024 Call 0x1C17F10
	025 Move X20, X0
	026 Move X0, 0xEDF000
	027 Move X0, [X0+728]
	028 Call 0x1C17D08
	029 Move X1, X0
	030 Move X0, X20
	031 Move X2, X19
	032 Move X3, X31
	033 Call ArgumentNullException..ctor, X0, X1, X2
	034 Move X0, 0xEDF000
	035 Move X0, [X0+2672]
	036 Call 0x1C17D08
	037 Move X1, X0
	038 Move X0, X20
	039 Call 0x1C17DEC

Method: System.Byte[] GetBytes(System.Char[] chars, System.Int32 index, System.Int32 count)

Disassembly:
	0x03244FA8 MOV W19, W0
	0x03244FAC MOV X0, X8
	0x03244FB0 LDP X10, X1, [X9 + 0x158]
	0x03244FB4 BLR X10
	0x03244FB8 ADD W8, W19, W20
	0x03244FBC LDP X20, X19, [X31 + 0x10]
	0x03244FC0 ADD W0, W8, W0
	0x03244FC4 LDR X30, [X31], #0x20
	0x03244FC8 RET
	0x03244FCC BL 0x1C16F20
	0x03244FD0 STR X30, [X31 - 0x20]!
	0x03244FD4 STP X20, X19, [X31 + 0x10]
	0x03244FD8 ADRP X20, 0x1198000
	0x03244FDC ADRP X19, 0xEDE000
	0x03244FE0 LDRB W8, [X20 + 0x452]
	0x03244FE4 LDR X19, [X19 + 0xAE0]
	0x03244FE8 TBNZ X8, 0x0, 0x3245000
	0x03244FEC ADRP X0, 0xEDE000
	0x03244FF0 LDR X0, [X0 + 0xAE0]
	0x03244FF4 BL 0x1C16CF4
	0x03244FF8 MOVZ W8, 0x1
	0x03244FFC STRB W8, [X20 + 0x452]
	0x03245000 LDR X0, [X19]
	0x03245004 LDR W8, [X0 + 0xE0]
	0x03245008 CBNZ W8, 0x3245014
	0x0324500C BL 0x1C16DFC
	0x03245010 LDR X0, [X19]
	0x03245014 LDR X8, [X0 + 0xB8]
	0x03245018 LDP X20, X19, [X31 + 0x10]
	0x0324501C LDR X0, [X8]
	0x03245020 LDR X30, [X31], #0x20
	0x03245024 RET
	0x03245028 STR X30, [X31 - 0x20]!
	0x0324502C STP X20, X19, [X31 + 0x10]
	0x03245030 ADRP X20, 0x1197000
	0x03245034 ADRP X19, 0xEDD000
	0x03245038 LDRB W8, [X20 + 0x453]
	0x0324503C LDR X19, [X19 + 0xAE0]
	0x03245040 TBNZ X8, 0x0, 0x3245058
	0x03245044 ADRP X0, 0xEDD000
	0x03245048 LDR X0, [X0 + 0xAE0]
	0x0324504C BL 0x1C16CF4
	0x03245050 MOVZ W8, 0x1
	0x03245054 STRB W8, [X20 + 0x453]
	0x03245058 LDR X0, [X19]
	0x0324505C LDR W8, [X0 + 0xE0]
	0x03245060 CBNZ W8, 0x324506C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x1199000
	009 Move X23, 0xEB0000
	010 Move W8, [X24+1088]
	011 Move X23, [X23+1560]
	012 Move W19, W3
	013 Move W20, W2
	014 Move X21, X1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xEB0000
	021 Move X0, [X0+1560]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+1088], W8
	025 Move X8, [X22]
	026 Move X0, X22
	027 Move X1, X21
	028 Move W2, W20
	029 Move X9, [X8+520]
	030 Move X4, [X8+528]
	031 Move W3, W19
	032 NotImplemented "Instruction BLR not yet implemented."
	033 Move X8, [X23]
	034 Move W1, W0
	035 Move X0, X8
	036 Call 0x1C17D6C
	037 Move X8, [X22]
	038 Move X23, X0
	039 Move X0, X22
	040 Move X1, X21
	041 Move X9, [X8+600]
	042 Move X6, [X8+608]
	043 Move W2, W20
	044 Move W3, W19
	045 Move X4, X23
	046 Move W5, W31
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Move X0, X23
	049 Move X20, [X31+48]
	050 Move X19, [X31+56]
	051 Move X22, [X31+32]
	052 Move X21, [X31+40]
	053 Move X24, [X31+16]
	054 Move X23, [X31+24]
	055 Move X30, [X31+64]
	056 Return X0

Method: System.Int32 GetBytes(System.Char[] chars, System.Int32 charIndex, System.Int32 charCount, System.Byte[] bytes, System.Int32 byteIndex)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Byte[] GetBytes(System.String s)

Disassembly:
	0x03245064 BL 0x1C16DFC
	0x03245068 LDR X0, [X19]
	0x0324506C LDR X8, [X0 + 0xB8]
	0x03245070 LDP X20, X19, [X31 + 0x10]
	0x03245074 LDR X0, [X8]
	0x03245078 LDR X30, [X31], #0x20
	0x0324507C RET
	0x03245080 STP X30, X21, [X31 - 0x20]!
	0x03245084 STP X20, X19, [X31 + 0x10]
	0x03245088 MOV X19, X0
	0x0324508C ADRP X0, 0xEAE000
	0x03245090 LDR X0, [X0 + 0x9D0]
	0x03245094 BL 0x1C16D08
	0x03245098 MOVZ W1, 0x2
	0x0324509C BL 0x1C16D6C
	0x032450A0 LDR X8, [X19]
	0x032450A4 MOV X20, X0
	0x032450A8 MOV X0, X19
	0x032450AC LDP X9, X1, [X8 + 0x1B8]
	0x032450B0 BLR X9
	0x032450B4 MOV X21, X0
	0x032450B8 MOV X0, X20
	0x032450BC BL 0x19903C0
	0x032450C0 MOV X0, X20
	0x032450C4 MOV X1, X21
	0x032450C8 BL 0x19980B4
	0x032450CC MOV X0, X20
	0x032450D0 MOV X1, X31
	0x032450D4 MOV X2, X21
	0x032450D8 BL 0x1993444
	0x032450DC LDR X19, [X19 + 0x28]
	0x032450E0 MOV X0, X19
	0x032450E4 BL 0x19903C0
	0x032450E8 MOV X0, X19
	0x032450EC MOV X1, X31
	0x032450F0 BL 0x33BE520
	0x032450F4 MOV X19, X0
	0x032450F8 MOV X0, X20
	0x032450FC BL 0x19903C0
	0x03245100 MOV X0, X20
	0x03245104 MOV X1, X19
	0x03245108 BL 0x19980B4
	0x0324510C MOVZ W1, 0x1
	0x03245110 MOV X0, X20
	0x03245114 MOV X2, X19
	0x03245118 BL 0x1993444
	0x0324511C ADRP X0, 0xEDD000
	0x03245120 LDR X0, [X0 + 0xAE8]
	0x03245124 BL 0x1C16D08
	0x03245128 MOV X1, X20
	0x0324512C MOV X2, X31
	0x03245130 BL 0x33BFB40
	0x03245134 MOV X19, X0
	0x03245138 ADRP X0, 0xEB6000
	0x0324513C LDR X0, [X0 + 0x578]
	0x03245140 BL 0x1C16D08
	0x03245144 BL 0x1C16F10
	0x03245148 MOV X20, X0
	0x0324514C ADRP X0, 0xEDD000
	0x03245150 LDR X0, [X0 + 0x308]
	0x03245154 BL 0x1C16D08
	0x03245158 MOV X2, X0
	0x0324515C MOV X0, X20
	0x03245160 MOV X1, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1198000
	006 Move W8, [X21+1089]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xEAF000
	014 Move X0, [X0+1560]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1089], W8
	018 Compare X19, 0
	019 JumpIfEqual {49}
	020 Move X8, [X20]
	021 Move X21, 0xEAF000
	022 Move X0, X20
	023 Move X1, X19
	024 Move X9, [X8+504]
	025 Move X2, [X8+512]
	026 Move X21, [X21+1560]
	027 NotImplemented "Instruction BLR not yet implemented."
	028 Move X8, [X21]
	029 Move W1, W0
	030 Move X0, X8
	031 Call 0x1C17D6C
	032 Move X8, [X20]
	033 Move W3, [X19+16]
	034 Move X21, X0
	035 Move X0, X20
	036 Move X9, [X8+632]
	037 Move X6, [X8+640]
	038 Move X1, X19
	039 Move W2, W31
	040 Move X4, X21
	041 Move W5, W31
	042 NotImplemented "Instruction BLR not yet implemented."
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X0, X21
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Return X0
	049 Move X0, 0xEDE000
	050 Move X0, [X0+2680]
	051 Call 0x1C17D08
	052 Move X1, X31
	053 Call Environment.GetResourceString, X0
	054 Move X19, X0
	055 Move X0, 0xEB4000
	056 Move X0, [X0+1320]
	057 Call 0x1C17D08
	058 Call 0x1C17F10
	059 Move X20, X0
	060 Move X0, 0xED8000
	061 Move X0, [X0+3264]
	062 Call 0x1C17D08
	063 Move X1, X0
	064 Move X0, X20
	065 Move X2, X19
	066 Move X3, X31
	067 Call ArgumentNullException..ctor, X0, X1, X2
	068 Move X0, 0xEDE000
	069 Move X0, [X0+2688]
	070 Call 0x1C17D08
	071 Move X1, X0
	072 Move X0, X20
	073 Call 0x1C17DEC

Method: System.Int32 GetBytes(System.String s, System.Int32 charIndex, System.Int32 charCount, System.Byte[] bytes, System.Int32 byteIndex)

Disassembly:
	0x03245164 MOV X3, X31
	0x03245168 BL 0x330E16C
	0x0324516C ADRP X0, 0xEDD000
	0x03245170 LDR X0, [X0 + 0xAF0]
	0x03245174 BL 0x1C16D08
	0x03245178 MOV X1, X0
	0x0324517C MOV X0, X20
	0x03245180 BL 0x1C16DEC
	0x03245184 SUB X31, X31, 0x20
	0x03245188 STR X30, [X31 + 0x10]
	0x0324518C CBZ X1, 0x32451F8
	0x03245190 LDRB W8, [X1 + 0x31]
	0x03245194 AND W9, W2, 0x1
	0x03245198 ORR W8, W8, W9, 0x0
	0x0324519C CBNZ W8, 0x32451B4
	0x032451A0 LDR X30, [X31 + 0x10]
	0x032451A4 MOV X0, X1
	0x032451A8 MOV X1, X31
	0x032451AC ADD X31, X31, 0x20
	0x032451B0 B 0x322F324
	0x032451B4 STR X0, [X31 + 0x18]
	0x032451B8 MOV X0, X1
	0x032451BC STR X1, [X31 + 0x8]
	0x032451C0 MOV X1, X31
	0x032451C4 BL 0x33FBF14
	0x032451C8 LDR X8, [X31 + 0x8]
	0x032451CC MOV W9, W0
	0x032451D0 LDR X0, [X31 + 0x18]
	0x032451D4 TBZ X9, 0x0, 0x32451F8
	0x032451D8 MOV X0, X8
	0x032451DC MOV X1, X31
	0x032451E0 BL 0x33FBF24
	0x032451E4 CBNZ X0, 0x32451EC
	0x032451E8 BL 0x1C16F20
	0x032451EC MOV X1, X31
	0x032451F0 BL 0x33FFD90
	0x032451F4 LDR X0, [X31 + 0x18]
	0x032451F8 BL 0x3245080
	0x032451FC STP X30, X21, [X31 - 0x20]!
	0x03245200 STP X20, X19, [X31 + 0x10]
	0x03245204 MOV X19, X0
	0x03245208 ADRP X0, 0xEAE000
	0x0324520C LDR X0, [X0 + 0x9D0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Compare X1, 0
	008 JumpIfEqual {33}
	009 Move X23, X0
	010 Move X0, X1
	011 Move X1, X31
	012 Move W19, W5
	013 Move X20, X4
	014 Move W21, W3
	015 Move W22, W2
	016 Call String.ToCharArray, X0
	017 Move X8, [X23]
	018 Move W2, W22
	019 Move W3, W21
	020 Move X4, X20
	021 Move X7, [X8+600]
	022 Move X6, [X8+608]
	023 Move W5, W19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X1, X0
	029 Move X0, X23
	030 Move X30, [X31+48]
	031 Move X23, [X31+56]
	032 CallNoReturn X7
	033 Move X0, 0xEB4000
	034 Move X0, [X0+1320]
	035 Call 0x1C17D08
	036 Call 0x1C17F10
	037 Move X19, X0
	038 Move X0, 0xED8000
	039 Move X0, [X0+3264]
	040 Call 0x1C17D08
	041 Move X1, X0
	042 Move X0, X19
	043 Move X2, X31
	044 Call ArgumentNullException..ctor, X0, X1
	045 Move X0, 0xEDE000
	046 Move X0, [X0+2696]
	047 Call 0x1C17D08
	048 Move X1, X0
	049 Move X0, X19
	050 Call 0x1C17DEC

Method: System.Int32 GetBytes(System.Char* chars, System.Int32 charCount, System.Byte* bytes, System.Int32 byteCount, System.Text.EncoderNLS encoder)

Disassembly:
	0x03245210 BL 0x1C16D08
	0x03245214 MOVZ W1, 0x2
	0x03245218 BL 0x1C16D6C
	0x0324521C LDR X8, [X19]

ISIL:
	001 Move X8, [X0]
	002 Move X6, [X8+664]
	003 Move X5, [X8+672]
	004 CallNoReturn X6

Method: System.Int32 GetBytes(System.Char* chars, System.Int32 charCount, System.Byte* bytes, System.Int32 byteCount)

Disassembly:
	0x03245220 MOV X20, X0
	0x03245224 MOV X0, X19
	0x03245228 LDP X9, X1, [X8 + 0x1B8]
	0x0324522C BLR X9
	0x03245230 MOV X21, X0
	0x03245234 MOV X0, X20
	0x03245238 BL 0x19903C0
	0x0324523C MOV X0, X20
	0x03245240 MOV X1, X21
	0x03245244 BL 0x19980B4
	0x03245248 MOV X0, X20
	0x0324524C MOV X1, X31
	0x03245250 MOV X2, X21
	0x03245254 BL 0x1993444
	0x03245258 LDR X19, [X19 + 0x30]
	0x0324525C MOV X0, X19
	0x03245260 BL 0x19903C0
	0x03245264 MOV X0, X19
	0x03245268 MOV X1, X31
	0x0324526C BL 0x33BE520
	0x03245270 MOV X19, X0
	0x03245274 MOV X0, X20
	0x03245278 BL 0x19903C0
	0x0324527C MOV X0, X20
	0x03245280 MOV X1, X19
	0x03245284 BL 0x19980B4
	0x03245288 MOVZ W1, 0x1
	0x0324528C MOV X0, X20
	0x03245290 MOV X2, X19
	0x03245294 BL 0x1993444
	0x03245298 ADRP X0, 0xEDD000
	0x0324529C LDR X0, [X0 + 0xAF8]
	0x032452A0 BL 0x1C16D08
	0x032452A4 MOV X1, X20
	0x032452A8 MOV X2, X31
	0x032452AC BL 0x33BFB40
	0x032452B0 MOV X19, X0
	0x032452B4 ADRP X0, 0xEB6000
	0x032452B8 LDR X0, [X0 + 0x578]
	0x032452BC BL 0x1C16D08
	0x032452C0 BL 0x1C16F10
	0x032452C4 MOV X20, X0
	0x032452C8 ADRP X0, 0xEDD000
	0x032452CC LDR X0, [X0 + 0x2D8]
	0x032452D0 BL 0x1C16D08
	0x032452D4 MOV X2, X0
	0x032452D8 MOV X0, X20
	0x032452DC MOV X1, X19
	0x032452E0 MOV X3, X31
	0x032452E4 BL 0x330E16C
	0x032452E8 ADRP X0, 0xEDD000
	0x032452EC LDR X0, [X0 + 0xB00]
	0x032452F0 BL 0x1C16D08
	0x032452F4 MOV X1, X0
	0x032452F8 MOV X0, X20
	0x032452FC BL 0x1C16DEC
	0x03245300 SUB X31, X31, 0x20
	0x03245304 STR X30, [X31 + 0x10]
	0x03245308 CBZ X1, 0x3245374
	0x0324530C LDRB W8, [X1 + 0x29]
	0x03245310 AND W9, W2, 0x1
	0x03245314 ORR W8, W8, W9, 0x0
	0x03245318 CBNZ W8, 0x3245330
	0x0324531C LDR X30, [X31 + 0x10]
	0x03245320 MOV X0, X1
	0x03245324 MOV X1, X31
	0x03245328 ADD X31, X31, 0x20
	0x0324532C B 0x33FE63C
	0x03245330 STR X0, [X31 + 0x18]
	0x03245334 MOV X0, X1
	0x03245338 STR X1, [X31 + 0x8]
	0x0324533C MOV X1, X31
	0x03245340 BL 0x33FCBDC
	0x03245344 LDR X8, [X31 + 0x8]
	0x03245348 MOV W9, W0
	0x0324534C LDR X0, [X31 + 0x18]
	0x03245350 TBZ X9, 0x0, 0x3245374
	0x03245354 MOV X0, X8
	0x03245358 MOV X1, X31
	0x0324535C BL 0x33FC534
	0x03245360 CBNZ X0, 0x3245368
	0x03245364 BL 0x1C16F20
	0x03245368 MOV X1, X31
	0x0324536C BL 0x33FC800
	0x03245370 LDR X0, [X31 + 0x18]
	0x03245374 BL 0x32451FC
	0x03245378 STP X30, X25, [X31 - 0x40]!
	0x0324537C STP X24, X23, [X31 + 0x10]
	0x03245380 STP X22, X21, [X31 + 0x20]
	0x03245384 STP X20, X19, [X31 + 0x30]
	0x03245388 ADRP X25, 0x1197000
	0x0324538C ADRP X24, 0xEDD000
	0x03245390 LDRB W8, [X25 + 0x454]
	0x03245394 LDR X24, [X24 + 0xB08]
	0x03245398 MOV X19, X4
	0x0324539C MOV X21, X3
	0x032453A0 MOV X20, X2
	0x032453A4 MOV X23, X1
	0x032453A8 MOV X22, X0
	0x032453AC TBNZ X8, 0x0, 0x32453E8
	0x032453B0 ADRP X0, 0xEDD000
	0x032453B4 LDR X0, [X0 + 0xB10]
	0x032453B8 BL 0x1C16CF4
	0x032453BC ADRP X0, 0xEDD000
	0x032453C0 LDR X0, [X0 + 0xB08]
	0x032453C4 BL 0x1C16CF4
	0x032453C8 ADRP X0, 0xEDD000
	0x032453CC LDR X0, [X0 + 0x28]
	0x032453D0 BL 0x1C16CF4
	0x032453D4 ADRP X0, 0xEDD000
	0x032453D8 LDR X0, [X0 + 0x928]
	0x032453DC BL 0x1C16CF4
	0x032453E0 MOVZ W8, 0x1
	0x032453E4 STRB W8, [X25 + 0x454]
	0x032453E8 LDR X0, [X24]
	0x032453EC ADRP X24, 0xEDD000
	0x032453F0 LDR X8, [X0 + 0x38]
	0x032453F4 LDR X24, [X24 + 0xB10]
	0x032453F8 CBNZ X8, 0x3245400
	0x032453FC BL 0x1C5C6E0
	0x03245400 LDR X0, [X24]
	0x03245404 LDR X8, [X0 + 0x38]
	0x03245408 CBNZ X8, 0x3245410
	0x0324540C BL 0x1C5C6E0
	0x03245410 LDR X8, [X22]
	0x03245414 CMP W20, 0x0
	0x03245418 CSINC X1, X23, X31, NE
	0x0324541C CMP W19, 0x0
	0x03245420 LDR X6, [X8 + 0x298]
	0x03245424 LDR X5, [X8 + 0x2A0]
	0x03245428 CSINC X3, X21, X31, NE
	0x0324542C MOV X0, X22
	0x03245430 MOV W2, W20
	0x03245434 MOV W4, W19
	0x03245438 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x1198000
	009 Move W8, [X24+1090]
	010 Move W20, W4
	011 Move X19, X3
	012 Move W21, W2
	013 Move X23, X1
	014 Move X22, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xEAF000
	020 Move X0, [X0+1560]
	021 Call 0x1C17CF4
	022 Move X0, 0xEB8000
	023 Move X0, [X0+2264]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+1090], W8
	027 Compare X19, 0
	028 JumpIfEqual {97}
	029 Compare X23, 0
	030 JumpIfEqual {99}
	031 Move TEMP, X20
	032 And TEMP, TEMP, -2147483648
	033 Compare TEMP, -2147483648
	034 JumpIfEqual {118}
	035 Move TEMP, X21
	036 And TEMP, TEMP, -2147483648
	037 Compare TEMP, -2147483648
	038 JumpIfEqual {118}
	039 Move X8, 0xEB8000
	040 Move X8, [X8+2264]
	041 Move W1, W21
	042 Move X0, [X8]
	043 Call 0x1C17D6C
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X24, X0
	046 Compare X24, 0
	047 JumpIfEqual {96}
	048 Move W9, [X24+24]
	049 Move X8, X31
	050 Move W10, W21
	051 Add X11, X24, 32
	052 NotImplemented "Instruction CMP not yet implemented."
	053 NotImplemented "Instruction LDRH not yet implemented."
	054 NotImplemented "Instruction STRH not yet implemented."
	055 Add X8, X8, 1
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X8, 0xEAF000
	058 Move X8, [X8+1560]
	059 Move W1, W20
	060 Move X0, [X8]
	061 Call 0x1C17D6C
	062 Move X8, [X22]
	063 Move X23, X0
	064 Move X0, X22
	065 Move X1, X24
	066 Move X9, [X8+600]
	067 Move X6, [X8+608]
	068 Move W2, W31
	069 Move W3, W21
	070 Move X4, X23
	071 Move W5, W31
	072 NotImplemented "Instruction BLR not yet implemented."
	073 NotImplemented "Instruction CMP not yet implemented."
	074 NotImplemented "Instruction CSEL not yet implemented."
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Compare X23, 0
	077 JumpIfEqual {96}
	078 Move X8, X31
	079 Move W9, W0
	080 Add X10, X23, 32
	081 Move W11, [X23+24]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move W11, [X10]
	084 Move [X19], W11
	085 Add X8, X8, 1
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move X20, [X31+48]
	088 Move X19, [X31+56]
	089 Move X22, [X31+32]
	090 Move X21, [X31+40]
	091 Move X24, [X31+16]
	092 Move X23, [X31+24]
	093 Move X30, [X31+64]
	094 Return X0
	095 Call 0x1C17F28
	096 Call 0x1C17F20
	097 Move X0, 0xEDE000
	098 Move X0, [X0+776]
	099 Move X0, 0xEDE000
	100 Move X0, [X0+728]
	101 Call 0x1C17D08
	102 Move X19, X0
	103 Move X0, 0xEDE000
	104 Move X0, [X0+736]
	105 Call 0x1C17D08
	106 Move X1, X31
	107 Call Environment.GetResourceString, X0
	108 Move X20, X0
	109 Move X0, 0xEB4000
	110 Move X0, [X0+1320]
	111 Call 0x1C17D08
	112 Call 0x1C17F10
	113 Move X1, X19
	114 Move X2, X20
	115 Move X3, X31
	116 Move X21, X0
	117 Call ArgumentNullException..ctor, X0, X1, X2
	118 Move X8, 0xEDE000
	119 Move X9, 0xEDE000
	120 Move X8, [X8+808]
	121 Move X9, [X9+784]
	122 NotImplemented "Instruction CMP not yet implemented."
	123 NotImplemented "Instruction CSEL not yet implemented."
	124 Call 0x1C17D08
	125 Move X19, X0
	126 Move X0, 0xED7000
	127 Move X0, [X0+1648]
	128 Call 0x1C17D08
	129 Move X1, X31
	130 Call Environment.GetResourceString, X0
	131 Move X20, X0
	132 Move X0, 0xEB7000
	133 Move X0, [X0+1888]
	134 Call 0x1C17D08
	135 Call 0x1C17F10
	136 Move X1, X19
	137 Move X2, X20
	138 Move X3, X31
	139 Move X21, X0
	140 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	141 Move X0, 0xEDE000
	142 Move X0, [X0+2704]
	143 Call 0x1C17D08
	144 Move X1, X0
	145 Move X0, X21
	146 Call 0x1C17DEC

Method: System.Int32 GetCharCount(System.Byte[] bytes, System.Int32 index, System.Int32 count)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Int32 GetCharCount(System.Byte* bytes, System.Int32 count)

Disassembly:
	0x0324543C LDP X22, X21, [X31 + 0x20]
	0x03245440 LDP X24, X23, [X31 + 0x10]
	0x03245444 LDP X30, X25, [X31], #0x40
	0x03245448 BR X6
	0x0324544C STP X30, X23, [X31 - 0x30]!
	0x03245450 STP X22, X21, [X31 + 0x10]
	0x03245454 STP X20, X19, [X31 + 0x20]
	0x03245458 ADRP X21, 0x1197000
	0x0324545C LDRB W8, [X21 + 0x455]
	0x03245460 MOV X20, X1
	0x03245464 MOV X19, X0
	0x03245468 TBNZ X8, 0x0, 0x32454EC
	0x0324546C ADRP X0, 0xED5000
	0x03245470 LDR X0, [X0 + 0xD70]
	0x03245474 BL 0x1C16CF4
	0x03245478 ADRP X0, 0xEB0000
	0x0324547C LDR X0, [X0 + 0x170]
	0x03245480 BL 0x1C16CF4
	0x03245484 ADRP X0, 0xEDD000
	0x03245488 LDR X0, [X0 + 0x960]
	0x0324548C BL 0x1C16CF4
	0x03245490 ADRP X0, 0xEDD000
	0x03245494 LDR X0, [X0 + 0x968]
	0x03245498 BL 0x1C16CF4
	0x0324549C ADRP X0, 0xEDD000
	0x032454A0 LDR X0, [X0 + 0xB18]
	0x032454A4 BL 0x1C16CF4
	0x032454A8 ADRP X0, 0xEDD000
	0x032454AC LDR X0, [X0 + 0x3F8]
	0x032454B0 BL 0x1C16CF4
	0x032454B4 ADRP X0, 0xEAE000
	0x032454B8 LDR X0, [X0 + 0x6C0]
	0x032454BC BL 0x1C16CF4
	0x032454C0 ADRP X0, 0xEDD000
	0x032454C4 LDR X0, [X0 + 0xB20]
	0x032454C8 BL 0x1C16CF4
	0x032454CC ADRP X0, 0xEDD000
	0x032454D0 LDR X0, [X0 + 0xB28]
	0x032454D4 BL 0x1C16CF4
	0x032454D8 ADRP X0, 0xEDD000
	0x032454DC LDR X0, [X0 + 0xB30]
	0x032454E0 BL 0x1C16CF4
	0x032454E4 MOVZ W8, 0x1
	0x032454E8 STRB W8, [X21 + 0x455]
	0x032454EC MOV X0, X19
	0x032454F0 MOV X1, X31
	0x032454F4 BL 0x33FEB60
	0x032454F8 CBZ X20, 0x32456C8
	0x032454FC ADRP X22, 0xEAE000
	0x03245500 LDR X22, [X22 + 0x6C0]
	0x03245504 ADRP X8, 0xEDD000
	0x03245508 ADRP X23, 0xEDD000
	0x0324550C LDR X0, [X22]
	0x03245510 LDR X8, [X8 + 0xB18]
	0x03245514 LDR W9, [X0 + 0xE0]
	0x03245518 LDR X21, [X8]
	0x0324551C LDR X23, [X23 + 0xB20]
	0x03245520 CBNZ W9, 0x3245528
	0x03245524 BL 0x1C16DFC
	0x03245528 MOV X0, X21
	0x0324552C MOV X1, X31
	0x03245530 BL 0x338C698
	0x03245534 LDR X1, [X23]
	0x03245538 MOV X2, X0
	0x0324553C MOV X0, X20
	0x03245540 MOV X3, X31
	0x03245544 BL 0x32A9678
	0x03245548 CBZ X0, 0x32455A8
	0x0324554C ADRP X8, 0xEDD000
	0x03245550 LDR X8, [X8 + 0x3F8]
	0x03245554 LDR X9, [X0]
	0x03245558 LDR X1, [X8]
	0x0324555C LDRB W10, [X9 + 0x130]
	0x03245560 LDRB W8, [X1 + 0x130]
	0x03245564 CMP W10, W8
	0x03245568 B.CC 0x32455A4
	0x0324556C LDR X10, [X9 + 0xC8]
	0x03245570 SUB X9, X8, 0x1
	0x03245574 LDR X10, [X10, X9, LSL #3]
	0x03245578 CMP X10, X1
	0x0324557C B.NE 0x32455A4
	0x03245580 STR X0, [X19 + 0x20]
	0x03245584 LDR X10, [X0]
	0x03245588 LDRB W11, [X10 + 0x130]
	0x0324558C CMP W11, W8
	0x03245590 B.CC 0x32455A4
	0x03245594 LDR X8, [X10 + 0xC8]
	0x03245598 LDR X8, [X8, X9, LSL #3]
	0x0324559C CMP X8, X1
	0x032455A0 B.EQ 0x32455AC
	0x032455A4 BL 0x1C171E0
	0x032455A8 STR X31, [X19 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1198000
	007 Move W8, [X22+1091]
	008 Move W19, W2
	009 Move X21, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xEAF000
	016 Move X0, [X0+1560]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1091], W8
	020 Compare X21, 0
	021 JumpIfEqual {58}
	022 Move TEMP, X19
	023 And TEMP, TEMP, -2147483648
	024 Compare TEMP, -2147483648
	025 JumpIfEqual {77}
	026 Move X8, 0xEAF000
	027 Move X8, [X8+1560]
	028 Move W1, W19
	029 Move X0, [X8]
	030 Call 0x1C17D6C
	031 Move X1, X0
	032 Compare W19, 0
	033 JumpIfEqual {45}
	034 Compare X1, 0
	035 JumpIfEqual {102}
	036 Move W9, [X1+24]
	037 Move X8, X31
	038 Move W10, W19
	039 Add X11, X1, 32
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move W12, [X21]
	042 Move [X11], W12
	043 Add X8, X8, 1
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X8, [X20]
	046 Move X0, X20
	047 Move W3, W19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X5, [X8+680]
	051 Move X4, [X8+688]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move W2, W31
	055 Move X30, [X31+48]
	056 CallNoReturn X5
	057 Call 0x1C17F28
	058 Move X0, 0xEDE000
	059 Move X0, [X0+736]
	060 Call 0x1C17D08
	061 Move X1, X31
	062 Call Environment.GetResourceString, X0
	063 Move X19, X0
	064 Move X0, 0xEB4000
	065 Move X0, [X0+1320]
	066 Call 0x1C17D08
	067 Call 0x1C17F10
	068 Move X20, X0
	069 Move X0, 0xEDE000
	070 Move X0, [X0+776]
	071 Call 0x1C17D08
	072 Move X1, X0
	073 Move X0, X20
	074 Move X2, X19
	075 Move X3, X31
	076 Call ArgumentNullException..ctor, X0, X1, X2
	077 Move X0, 0xED7000
	078 Move X0, [X0+1648]
	079 Call 0x1C17D08
	080 Move X1, X31
	081 Call Environment.GetResourceString, X0
	082 Move X19, X0
	083 Move X0, 0xEB7000
	084 Move X0, [X0+1888]
	085 Call 0x1C17D08
	086 Call 0x1C17F10
	087 Move X20, X0
	088 Move X0, 0xED7000
	089 Move X0, [X0+1608]
	090 Call 0x1C17D08
	091 Move X1, X0
	092 Move X0, X20
	093 Move X2, X19
	094 Move X3, X31
	095 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	096 Move X0, 0xEDE000
	097 Move X0, [X0+2712]
	098 Call 0x1C17D08
	099 Move X1, X0
	100 Move X0, X20
	101 Call 0x1C17DEC
	102 Call 0x1C17F20

Method: System.Int32 GetCharCount(System.Byte* bytes, System.Int32 count, System.Text.DecoderNLS decoder)

Disassembly:
	0x032455AC ADRP X8, 0xEDD000
	0x032455B0 LDR X0, [X22]
	0x032455B4 LDR X8, [X8 + 0x960]
	0x032455B8 LDR W9, [X0 + 0xE0]

ISIL:
	001 Move X8, [X0]
	002 Move X4, [X8+696]
	003 Move X3, [X8+704]
	004 CallNoReturn X4

Method: System.Char[] GetChars(System.Byte[] bytes, System.Int32 index, System.Int32 count)

Disassembly:
	0x032455BC LDR X21, [X8]
	0x032455C0 CBNZ W9, 0x32455C8
	0x032455C4 BL 0x1C16DFC
	0x032455C8 MOV X0, X21
	0x032455CC MOV X1, X31
	0x032455D0 BL 0x338C698
	0x032455D4 ADRP X8, 0xEDD000
	0x032455D8 LDR X8, [X8 + 0xB30]
	0x032455DC MOV X2, X0
	0x032455E0 LDR X1, [X8]
	0x032455E4 MOV X0, X20
	0x032455E8 MOV X3, X31
	0x032455EC BL 0x32A9678
	0x032455F0 CBZ X0, 0x3245650
	0x032455F4 ADRP X8, 0xEDD000
	0x032455F8 LDR X8, [X8 + 0x968]
	0x032455FC LDR X9, [X0]
	0x03245600 LDR X1, [X8]
	0x03245604 LDRB W10, [X9 + 0x130]
	0x03245608 LDRB W8, [X1 + 0x130]
	0x0324560C CMP W10, W8
	0x03245610 B.CC 0x32456C4
	0x03245614 LDR X10, [X9 + 0xC8]
	0x03245618 SUB X9, X8, 0x1
	0x0324561C LDR X10, [X10, X9, LSL #3]
	0x03245620 CMP X10, X1
	0x03245624 B.NE 0x32456C4
	0x03245628 STR X0, [X19 + 0x10]
	0x0324562C LDR X10, [X0]
	0x03245630 LDRB W11, [X10 + 0x130]
	0x03245634 CMP W11, W8
	0x03245638 B.CC 0x324564C
	0x0324563C LDR X8, [X10 + 0xC8]
	0x03245640 LDR X8, [X8, X9, LSL #3]
	0x03245644 CMP X8, X1
	0x03245648 B.EQ 0x3245654
	0x0324564C BL 0x1C171E0
	0x03245650 STR X31, [X19 + 0x10]
	0x03245654 ADRP X8, 0xED5000
	0x03245658 LDR X8, [X8 + 0xD70]
	0x0324565C LDR X0, [X8]
	0x03245660 MOV X1, X31
	0x03245664 BL 0x338C698
	0x03245668 ADRP X8, 0xEDD000
	0x0324566C LDR X8, [X8 + 0xB28]
	0x03245670 MOV X2, X0
	0x03245674 LDR X1, [X8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x1198000
	009 Move X23, 0xEB8000
	010 Move W8, [X24+1092]
	011 Move X23, [X23+2264]
	012 Move W19, W3
	013 Move W20, W2
	014 Move X21, X1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xEB8000
	021 Move X0, [X0+2264]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+1092], W8
	025 Move X8, [X22]
	026 Move X0, X22
	027 Move X1, X21
	028 Move W2, W20
	029 Move X9, [X8+680]
	030 Move X4, [X8+688]
	031 Move W3, W19
	032 NotImplemented "Instruction BLR not yet implemented."
	033 Move X8, [X23]
	034 Move W1, W0
	035 Move X0, X8
	036 Call 0x1C17D6C
	037 Move X8, [X22]
	038 Move X23, X0
	039 Move X0, X22
	040 Move X1, X21
	041 Move X9, [X8+744]
	042 Move X6, [X8+752]
	043 Move W2, W20
	044 Move W3, W19
	045 Move X4, X23
	046 Move W5, W31
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Move X0, X23
	049 Move X20, [X31+48]
	050 Move X19, [X31+56]
	051 Move X22, [X31+32]
	052 Move X21, [X31+40]
	053 Move X24, [X31+16]
	054 Move X23, [X31+24]
	055 Move X30, [X31+64]
	056 Return X0

Method: System.Int32 GetChars(System.Byte[] bytes, System.Int32 byteIndex, System.Int32 byteCount, System.Char[] chars, System.Int32 charIndex)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Int32 GetChars(System.Byte* bytes, System.Int32 byteCount, System.Char* chars, System.Int32 charCount)

Disassembly:
	0x03245678 MOV X0, X20
	0x0324567C MOV X3, X31
	0x03245680 BL 0x32A9678
	0x03245684 CBZ X0, 0x3245710
	0x03245688 ADRP X8, 0xEB0000
	0x0324568C LDR X8, [X8 + 0x170]
	0x03245690 LDR X9, [X0]
	0x03245694 LDR X1, [X8]
	0x03245698 LDR X8, [X9 + 0x40]
	0x0324569C LDR X9, [X1 + 0x40]
	0x032456A0 CMP X8, X9
	0x032456A4 B.NE 0x3245714
	0x032456A8 BL 0x1C16E08
	0x032456AC LDRH W8, [X0]
	0x032456B0 LDP X22, X21, [X31 + 0x10]
	0x032456B4 STRH W8, [X19 + 0x2A]
	0x032456B8 LDP X20, X19, [X31 + 0x20]
	0x032456BC LDP X30, X23, [X31], #0x30
	0x032456C0 RET
	0x032456C4 BL 0x1C171E0
	0x032456C8 ADRP X0, 0xEB3000
	0x032456CC LDR X0, [X0 + 0x528]
	0x032456D0 BL 0x1C16D08
	0x032456D4 BL 0x1C16F10
	0x032456D8 MOV X19, X0
	0x032456DC ADRP X0, 0xED8000
	0x032456E0 LDR X0, [X0 + 0x2D8]
	0x032456E4 BL 0x1C16D08
	0x032456E8 MOV X1, X0
	0x032456EC MOV X0, X19
	0x032456F0 MOV X2, X31
	0x032456F4 BL 0x330E100
	0x032456F8 ADRP X0, 0xEDD000
	0x032456FC LDR X0, [X0 + 0xB38]
	0x03245700 BL 0x1C16D08
	0x03245704 MOV X1, X0
	0x03245708 MOV X0, X19
	0x0324570C BL 0x1C16DEC
	0x03245710 BL 0x1C16F20
	0x03245714 BL 0x1C171E0
	0x03245718 B 0x3245728
	0x0324571C B 0x3245728
	0x03245720 B 0x3245728
	0x03245724 B 0x3245728
	0x03245728 MOV X19, X0
	0x0324572C CMP W1, 0x1
	0x03245730 B.NE 0x3245794
	0x03245734 MOV X0, X19
	0x03245738 BL 0x3EB1AD0
	0x0324573C MOV X19, X0
	0x03245740 ADRP X0, 0xED8000
	0x03245744 LDR X0, [X0 + 0x2E0]
	0x03245748 BL 0x1C16D08
	0x0324574C LDR X8, [X19]
	0x03245750 LDR X1, [X8]
	0x03245754 BL 0x1C17270
	0x03245758 TBZ X0, 0x0, 0x324576C
	0x0324575C LDP X20, X19, [X31 + 0x20]
	0x03245760 LDP X22, X21, [X31 + 0x10]
	0x03245764 LDP X30, X23, [X31], #0x30
	0x03245768 B 0x3EB1AE0
	0x0324576C MOVZ W0, 0x8
	0x03245770 BL 0x3EB1AF0
	0x03245774 LDR X8, [X19]
	0x03245778 STR X8, [X0]
	0x0324577C ADRP X1, 0xC6F000
	0x03245780 ADD X1, X1, 0xE58
	0x03245784 MOV X2, X31
	0x03245788 BL 0x3EB1B00
	0x0324578C MOV X19, X0
	0x03245790 BL 0x3EB1AE0
	0x03245794 MOV X0, X19
	0x03245798 BL 0x1D2C690
	0x0324579C BL 0x1990590
	0x032457A0 STR X30, [X31 - 0x20]!
	0x032457A4 STP X20, X19, [X31 + 0x10]
	0x032457A8 ADRP X20, 0x1197000
	0x032457AC LDRB W8, [X20 + 0x456]
	0x032457B0 MOV X19, X0
	0x032457B4 TBNZ X8, 0x0, 0x32457CC
	0x032457B8 ADRP X0, 0xEDD000
	0x032457BC LDR X0, [X0 + 0x3F0]
	0x032457C0 BL 0x1C16CF4
	0x032457C4 MOVZ W8, 0x1
	0x032457C8 STRB W8, [X20 + 0x456]
	0x032457CC LDRB W8, [X19 + 0x28]
	0x032457D0 CBZ W8, 0x32457E4
	0x032457D4 MOV X0, X19
	0x032457D8 LDP X20, X19, [X31 + 0x10]
	0x032457DC LDR X30, [X31], #0x20
	0x032457E0 RET
	0x032457E4 LDR X0, [X19 + 0x20]
	0x032457E8 CBZ X0, 0x3245854
	0x032457EC LDR X8, [X0]
	0x032457F0 LDR X9, [X8 + 0x348]
	0x032457F4 LDR X1, [X8 + 0x350]
	0x032457F8 BLR X9
	0x032457FC LDR X8, [X19 + 0x10]
	0x03245800 CBZ X8, 0x324580C
	0x03245804 CBZ X0, 0x3245854
	0x03245808 STR X8, [X0 + 0x10]
	0x0324580C LDRH W8, [X19 + 0x2A]
	0x03245810 CBZ W8, 0x32457D8
	0x03245814 CBZ X0, 0x32457D8
	0x03245818 ADRP X9, 0xEDD000
	0x0324581C LDR X9, [X9 + 0x3F0]
	0x03245820 LDR X10, [X0]
	0x03245824 LDR X9, [X9]
	0x03245828 LDRB W12, [X10 + 0x130]
	0x0324582C LDRB W11, [X9 + 0x130]
	0x03245830 CMP W12, W11
	0x03245834 B.CC 0x32457D8
	0x03245838 LDR X10, [X10 + 0xC8]
	0x0324583C ADD X10, X10, X11, 0x3, LSL
	0x03245840 LDUR X10, [X10 - 0x8]
	0x03245844 CMP X10, X9
	0x03245848 B.NE 0x32457D8
	0x0324584C STRH W8, [X0 + 0x20]
	0x03245850 B 0x32457D8
	0x03245854 BL 0x1C16F20
	0x03245858 STP X30, X21, [X31 - 0x20]!
	0x0324585C STP X20, X19, [X31 + 0x10]
	0x03245860 ADRP X21, 0x1197000
	0x03245864 LDRB W8, [X21 + 0x457]
	0x03245868 MOV X19, X1
	0x0324586C MOV X20, X0
	0x03245870 TBNZ X8, 0x0, 0x3245888
	0x03245874 ADRP X0, 0xEDD000
	0x03245878 LDR X0, [X0 + 0xB20]
	0x0324587C BL 0x1C16CF4
	0x03245880 MOVZ W8, 0x1
	0x03245884 STRB W8, [X21 + 0x457]
	0x03245888 CBZ X19, 0x32458B0
	0x0324588C ADRP X8, 0xEDD000
	0x03245890 LDR X8, [X8 + 0xB20]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x1198000
	009 Move W8, [X24+1093]
	010 Move W20, W4
	011 Move X19, X3
	012 Move W21, W2
	013 Move X23, X1
	014 Move X22, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xEAF000
	020 Move X0, [X0+1560]
	021 Call 0x1C17CF4
	022 Move X0, 0xEB8000
	023 Move X0, [X0+2264]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+1093], W8
	027 Compare X19, 0
	028 JumpIfEqual {97}
	029 Compare X23, 0
	030 JumpIfEqual {99}
	031 Move TEMP, X20
	032 And TEMP, TEMP, -2147483648
	033 Compare TEMP, -2147483648
	034 JumpIfEqual {118}
	035 Move TEMP, X21
	036 And TEMP, TEMP, -2147483648
	037 Compare TEMP, -2147483648
	038 JumpIfEqual {118}
	039 Move X8, 0xEAF000
	040 Move X8, [X8+1560]
	041 Move W1, W21
	042 Move X0, [X8]
	043 Call 0x1C17D6C
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X24, X0
	046 Compare X24, 0
	047 JumpIfEqual {96}
	048 Move W9, [X24+24]
	049 Move X8, X31
	050 Move W10, W21
	051 Add X11, X24, 32
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move W12, [X23]
	054 Move [X11], W12
	055 Add X8, X8, 1
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X8, 0xEB8000
	058 Move X8, [X8+2264]
	059 Move W1, W20
	060 Move X0, [X8]
	061 Call 0x1C17D6C
	062 Move X8, [X22]
	063 Move X23, X0
	064 Move X0, X22
	065 Move X1, X24
	066 Move X9, [X8+744]
	067 Move X6, [X8+752]
	068 Move W2, W31
	069 Move W3, W21
	070 Move X4, X23
	071 Move W5, W31
	072 NotImplemented "Instruction BLR not yet implemented."
	073 NotImplemented "Instruction CMP not yet implemented."
	074 NotImplemented "Instruction CSEL not yet implemented."
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Compare X23, 0
	077 JumpIfEqual {96}
	078 Move W9, [X23+24]
	079 Move X8, X31
	080 Move W10, W0
	081 Add X11, X23, 32
	082 NotImplemented "Instruction CMP not yet implemented."
	083 NotImplemented "Instruction LDRH not yet implemented."
	084 Add X8, X8, 1
	085 NotImplemented "Instruction CMP not yet implemented."
	086 NotImplemented "Instruction STRH not yet implemented."
	087 Move X20, [X31+48]
	088 Move X19, [X31+56]
	089 Move X22, [X31+32]
	090 Move X21, [X31+40]
	091 Move X24, [X31+16]
	092 Move X23, [X31+24]
	093 Move X30, [X31+64]
	094 Return X0
	095 Call 0x1C17F28
	096 Call 0x1C17F20
	097 Move X0, 0xEDE000
	098 Move X0, [X0+728]
	099 Move X0, 0xEDE000
	100 Move X0, [X0+776]
	101 Call 0x1C17D08
	102 Move X19, X0
	103 Move X0, 0xEDE000
	104 Move X0, [X0+736]
	105 Call 0x1C17D08
	106 Move X1, X31
	107 Call Environment.GetResourceString, X0
	108 Move X20, X0
	109 Move X0, 0xEB4000
	110 Move X0, [X0+1320]
	111 Call 0x1C17D08
	112 Call 0x1C17F10
	113 Move X1, X19
	114 Move X2, X20
	115 Move X3, X31
	116 Move X21, X0
	117 Call ArgumentNullException..ctor, X0, X1, X2
	118 Move X8, 0xEDE000
	119 Move X9, 0xEDE000
	120 Move X8, [X8+784]
	121 Move X9, [X9+808]
	122 NotImplemented "Instruction CMP not yet implemented."
	123 NotImplemented "Instruction CSEL not yet implemented."
	124 Call 0x1C17D08
	125 Move X19, X0
	126 Move X0, 0xED7000
	127 Move X0, [X0+1648]
	128 Call 0x1C17D08
	129 Move X1, X31
	130 Call Environment.GetResourceString, X0
	131 Move X20, X0
	132 Move X0, 0xEB7000
	133 Move X0, [X0+1888]
	134 Call 0x1C17D08
	135 Call 0x1C17F10
	136 Move X1, X19
	137 Move X2, X20
	138 Move X3, X31
	139 Move X21, X0
	140 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	141 Move X0, 0xEDE000
	142 Move X0, [X0+2720]
	143 Call 0x1C17D08
	144 Move X1, X0
	145 Move X0, X21
	146 Call 0x1C17DEC

Method: System.Int32 GetChars(System.Byte* bytes, System.Int32 byteCount, System.Char* chars, System.Int32 charCount, System.Text.DecoderNLS decoder)

Disassembly:
	0x03245894 LDR X2, [X20 + 0x20]
	0x03245898 MOV X0, X19
	0x0324589C LDP X20, X19, [X31 + 0x10]
	0x032458A0 LDR X1, [X8]

ISIL:
	001 Move X8, [X0]
	002 Move X6, [X8+760]
	003 Move X5, [X8+768]
	004 CallNoReturn X6

Method: System.String GetString(System.Byte* bytes, System.Int32 byteCount)

Disassembly:
	0x032458A4 MOV X3, X31
	0x032458A8 LDP X30, X21, [X31], #0x20
	0x032458AC B 0x32A8BF0
	0x032458B0 ADRP X0, 0xEB3000
	0x032458B4 LDR X0, [X0 + 0x528]
	0x032458B8 BL 0x1C16D08
	0x032458BC BL 0x1C16F10
	0x032458C0 MOV X19, X0
	0x032458C4 ADRP X0, 0xED8000
	0x032458C8 LDR X0, [X0 + 0x2D8]
	0x032458CC BL 0x1C16D08
	0x032458D0 MOV X1, X0
	0x032458D4 MOV X0, X19
	0x032458D8 MOV X2, X31
	0x032458DC BL 0x330E100
	0x032458E0 ADRP X0, 0xEDD000
	0x032458E4 LDR X0, [X0 + 0xB40]
	0x032458E8 BL 0x1C16D08
	0x032458EC MOV X1, X0
	0x032458F0 MOV X0, X19
	0x032458F4 BL 0x1C16DEC
	0x032458F8 STR X30, [X31 - 0x10]!
	0x032458FC LDR X0, [X0 + 0x20]
	0x03245900 CBZ X0, 0x3245918
	0x03245904 LDR X8, [X0]
	0x03245908 LDR X5, [X8 + 0x208]
	0x0324590C LDR X4, [X8 + 0x210]
	0x03245910 LDR X30, [X31], #0x10
	0x03245914 BR X5
	0x03245918 BL 0x1C16F20
	0x0324591C STR X30, [X31 - 0x10]!
	0x03245920 LDR X0, [X0 + 0x20]
	0x03245924 CBZ X0, 0x324593C
	0x03245928 LDR X8, [X0]
	0x0324592C LDR X4, [X8 + 0x218]
	0x03245930 LDR X3, [X8 + 0x220]
	0x03245934 LDR X30, [X31], #0x10
	0x03245938 BR X4
	0x0324593C BL 0x1C16F20
	0x03245940 STR X30, [X31 - 0x10]!
	0x03245944 LDR X0, [X0 + 0x20]
	0x03245948 CBZ X0, 0x3245960
	0x0324594C LDR X8, [X0]
	0x03245950 LDR X7, [X8 + 0x258]
	0x03245954 LDR X6, [X8 + 0x260]
	0x03245958 LDR X30, [X31], #0x10
	0x0324595C BR X7
	0x03245960 BL 0x1C16F20
	0x03245964 STR X30, [X31 - 0x10]!
	0x03245968 LDR X0, [X0 + 0x20]
	0x0324596C CBZ X0, 0x3245984
	0x03245970 LDR X8, [X0]
	0x03245974 LDR X6, [X8 + 0x298]
	0x03245978 LDR X5, [X8 + 0x2A0]
	0x0324597C LDR X30, [X31], #0x10
	0x03245980 BR X6
	0x03245984 BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {20}
	006 Move TEMP, X2
	007 And TEMP, TEMP, -2147483648
	008 Compare TEMP, -2147483648
	009 JumpIfEqual {39}
	010 Move X20, [X31+16]
	011 Move X19, [X31+24]
	012 Move X8, X0
	013 Move X0, X1
	014 Move W1, W2
	015 Move X2, X8
	016 Move X3, X31
	017 Move X30, [X31+32]
	018 Call String.CreateStringFromEncoding, X0, X1, X2
	019 Return X0
	020 Move X0, 0xEDE000
	021 Move X0, [X0+736]
	022 Call 0x1C17D08
	023 Move X1, X31
	024 Call Environment.GetResourceString, X0
	025 Move X19, X0
	026 Move X0, 0xEB4000
	027 Move X0, [X0+1320]
	028 Call 0x1C17D08
	029 Call 0x1C17F10
	030 Move X20, X0
	031 Move X0, 0xEDE000
	032 Move X0, [X0+776]
	033 Call 0x1C17D08
	034 Move X1, X0
	035 Move X0, X20
	036 Move X2, X19
	037 Move X3, X31
	038 Call ArgumentNullException..ctor, X0, X1, X2
	039 Move X0, 0xED7000
	040 Move X0, [X0+1648]
	041 Call 0x1C17D08
	042 Move X1, X31
	043 Call Environment.GetResourceString, X0
	044 Move X19, X0
	045 Move X0, 0xEB7000
	046 Move X0, [X0+1888]
	047 Call 0x1C17D08
	048 Call 0x1C17F10
	049 Move X20, X0
	050 Move X0, 0xEDE000
	051 Move X0, [X0+808]
	052 Call 0x1C17D08
	053 Move X1, X0
	054 Move X0, X20
	055 Move X2, X19
	056 Move X3, X31
	057 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	058 Move X0, 0xEDE000
	059 Move X0, [X0+2728]
	060 Call 0x1C17D08
	061 Move X1, X0
	062 Move X0, X20
	063 Call 0x1C17DEC

Method: System.Int32 GetChars(System.ReadOnlySpan`1<System.Byte> bytes, System.Span`1<System.Char> chars)

Disassembly:
	0x03245988 STP X30, X23, [X31 - 0x30]!
	0x0324598C STP X22, X21, [X31 + 0x10]
	0x03245990 STP X20, X19, [X31 + 0x20]
	0x03245994 ADRP X21, 0x1197000
	0x03245998 LDRB W8, [X21 + 0x458]
	0x0324599C MOV X20, X1
	0x032459A0 MOV X19, X0
	0x032459A4 TBNZ X8, 0x0, 0x3245A04
	0x032459A8 ADRP X0, 0xEDD000
	0x032459AC LDR X0, [X0 + 0x950]
	0x032459B0 BL 0x1C16CF4
	0x032459B4 ADRP X0, 0xEDD000
	0x032459B8 LDR X0, [X0 + 0x958]
	0x032459BC BL 0x1C16CF4
	0x032459C0 ADRP X0, 0xEDD000
	0x032459C4 LDR X0, [X0 + 0xB18]
	0x032459C8 BL 0x1C16CF4
	0x032459CC ADRP X0, 0xEDD000
	0x032459D0 LDR X0, [X0 + 0x3F8]
	0x032459D4 BL 0x1C16CF4
	0x032459D8 ADRP X0, 0xEAE000
	0x032459DC LDR X0, [X0 + 0x6C0]
	0x032459E0 BL 0x1C16CF4
	0x032459E4 ADRP X0, 0xEDD000
	0x032459E8 LDR X0, [X0 + 0xB20]
	0x032459EC BL 0x1C16CF4
	0x032459F0 ADRP X0, 0xEDD000
	0x032459F4 LDR X0, [X0 + 0xB30]
	0x032459F8 BL 0x1C16CF4
	0x032459FC MOVZ W8, 0x1
	0x03245A00 STRB W8, [X21 + 0x458]
	0x03245A04 MOV X0, X19
	0x03245A08 MOV X1, X31
	0x03245A0C BL 0x33FCBCC
	0x03245A10 CBZ X20, 0x3245B6C
	0x03245A14 ADRP X22, 0xEAE000
	0x03245A18 LDR X22, [X22 + 0x6C0]
	0x03245A1C ADRP X8, 0xEDD000
	0x03245A20 ADRP X23, 0xEDD000
	0x03245A24 LDR X0, [X22]
	0x03245A28 LDR X8, [X8 + 0xB18]
	0x03245A2C LDR W9, [X0 + 0xE0]
	0x03245A30 LDR X21, [X8]
	0x03245A34 LDR X23, [X23 + 0xB20]
	0x03245A38 CBNZ W9, 0x3245A40
	0x03245A3C BL 0x1C16DFC
	0x03245A40 MOV X0, X21
	0x03245A44 MOV X1, X31
	0x03245A48 BL 0x338C698
	0x03245A4C LDR X1, [X23]
	0x03245A50 MOV X2, X0
	0x03245A54 MOV X0, X20
	0x03245A58 MOV X3, X31

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0x1198000
	010 Move X24, 0xEDE000
	011 Move W8, [X25+1094]
	012 Move X24, [X24+2736]
	013 Move X19, X4
	014 Move X21, X3
	015 Move X20, X2
	016 Move X23, X1
	017 Move X22, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {36}
	022 Move X0, 0xEDE000
	023 Move X0, [X0+2736]
	024 Call 0x1C17CF4
	025 Move X0, 0xEDE000
	026 Move X0, [X0+2744]
	027 Call 0x1C17CF4
	028 Move X0, 0xEDE000
	029 Move X0, [X0+2752]
	030 Call 0x1C17CF4
	031 Move X0, 0xEDE000
	032 Move X0, [X0+1416]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X25+1094], W8
	036 Move X0, [X24]
	037 Move X24, 0xEDE000
	038 Move X8, [X0+56]
	039 Move X24, [X24+2744]
	040 Compare X8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C5D6E0
	043 Move X0, [X24]
	044 Move X8, [X0+56]
	045 Compare X8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C5D6E0
	048 Move X8, [X22]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 NotImplemented "Instruction CSINC not yet implemented."
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X6, [X8+760]
	053 Move X5, [X8+768]
	054 NotImplemented "Instruction CSINC not yet implemented."
	055 Move X0, X22
	056 Move W2, W20
	057 Move W4, W19
	058 Move X20, [X31+48]
	059 Move X19, [X31+56]
	060 Move X22, [X31+32]
	061 Move X21, [X31+40]
	062 Move X24, [X31+16]
	063 Move X23, [X31+24]
	064 Move X30, [X31+64]
	065 Move X25, [X31+72]
	066 CallNoReturn X6

Method: System.String GetString(System.ReadOnlySpan`1<System.Byte> bytes)

Disassembly:
	0x03245A5C BL 0x32A9678
	0x03245A60 CBZ X0, 0x3245AC0
	0x03245A64 ADRP X8, 0xEDD000
	0x03245A68 LDR X8, [X8 + 0x3F8]
	0x03245A6C LDR X9, [X0]
	0x03245A70 LDR X1, [X8]
	0x03245A74 LDRB W10, [X9 + 0x130]
	0x03245A78 LDRB W8, [X1 + 0x130]
	0x03245A7C CMP W10, W8
	0x03245A80 B.CC 0x3245ABC
	0x03245A84 LDR X10, [X9 + 0xC8]
	0x03245A88 SUB X9, X8, 0x1
	0x03245A8C LDR X10, [X10, X9, LSL #3]
	0x03245A90 CMP X10, X1
	0x03245A94 B.NE 0x3245ABC
	0x03245A98 STR X0, [X19 + 0x20]
	0x03245A9C LDR X10, [X0]
	0x03245AA0 LDRB W11, [X10 + 0x130]
	0x03245AA4 CMP W11, W8
	0x03245AA8 B.CC 0x3245ABC
	0x03245AAC LDR X8, [X10 + 0xC8]
	0x03245AB0 LDR X8, [X8, X9, LSL #3]
	0x03245AB4 CMP X8, X1
	0x03245AB8 B.EQ 0x3245AC4
	0x03245ABC BL 0x1C171E0
	0x03245AC0 STR X31, [X19 + 0x20]
	0x03245AC4 ADRP X8, 0xEDD000
	0x03245AC8 LDR X0, [X22]
	0x03245ACC LDR X8, [X8 + 0x950]
	0x03245AD0 LDR W9, [X0 + 0xE0]
	0x03245AD4 LDR X21, [X8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x1198000
	008 Move X22, 0xEDE000
	009 Move W8, [X23+1095]
	010 Move X22, [X22+2736]
	011 Move X19, X2
	012 Move X21, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0xEDE000
	019 Move X0, [X0+2736]
	020 Call 0x1C17CF4
	021 Move X0, 0xEDE000
	022 Move X0, [X0+2752]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+1095], W8
	026 Move X0, [X22]
	027 Move X8, [X0+56]
	028 Compare X8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C5D6E0
	031 NotImplemented "Instruction CMP not yet implemented."
	032 NotImplemented "Instruction CSINC not yet implemented."
	033 Move X0, X20
	034 Move W2, W19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Move X23, [X31+56]
	041 Call Encoding.GetString, X0, X1, X2
	042 Return X0

Method: System.Int32 get_CodePage()

Disassembly:
	0x03245AD8 CBNZ W9, 0x3245AE0
	0x03245ADC BL 0x1C16DFC

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Text.Decoder GetDecoder()

Disassembly:
	0x03245AE0 MOV X0, X21
	0x03245AE4 MOV X1, X31
	0x03245AE8 BL 0x338C698
	0x03245AEC ADRP X8, 0xEDD000
	0x03245AF0 LDR X8, [X8 + 0xB30]
	0x03245AF4 MOV X2, X0
	0x03245AF8 LDR X1, [X8]
	0x03245AFC MOV X0, X20
	0x03245B00 MOV X3, X31
	0x03245B04 BL 0x32A9678
	0x03245B08 CBZ X0, 0x3245BF4
	0x03245B0C ADRP X8, 0xEDD000
	0x03245B10 LDR X8, [X8 + 0x958]
	0x03245B14 LDR X9, [X0]
	0x03245B18 LDR X1, [X8]
	0x03245B1C LDRB W10, [X9 + 0x130]
	0x03245B20 LDRB W8, [X1 + 0x130]
	0x03245B24 CMP W10, W8
	0x03245B28 B.CC 0x3245B68
	0x03245B2C LDR X10, [X9 + 0xC8]
	0x03245B30 SUB X9, X8, 0x1
	0x03245B34 LDR X10, [X10, X9, LSL #3]
	0x03245B38 CMP X10, X1
	0x03245B3C B.NE 0x3245B68
	0x03245B40 STR X0, [X19 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1198000
	006 Move X21, 0xEDE000
	007 Move W8, [X20+1096]
	008 Move X21, [X21+2760]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEDE000
	015 Move X0, [X0+2760]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1096], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X31
	022 Move X20, X0
	023 Call Decoder..ctor, X0
	024 Move W8, 1
	025 Move [X20+32], X19
	026 Move [X20+40], W8
	027 Move X0, X20
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0

Method: System.Text.Encoding CreateDefaultEncoding()

Disassembly:
	0x03245B74 BL 0x1C16D08
	0x03245B78 BL 0x1C16F10
	0x03245B7C MOV X19, X0
	0x03245B80 ADRP X0, 0xED8000
	0x03245B84 LDR X0, [X0 + 0x2D8]
	0x03245B88 BL 0x1C16D08
	0x03245B8C MOV X1, X0
	0x03245B90 MOV X0, X19
	0x03245B94 MOV X2, X31
	0x03245B98 BL 0x330E100
	0x03245B9C ADRP X0, 0xEDD000
	0x03245BA0 LDR X0, [X0 + 0xB48]
	0x03245BA4 BL 0x1C16D08
	0x03245BA8 MOV X1, X0
	0x03245BAC MOV X0, X19
	0x03245BB0 BL 0x1C16DEC
	0x03245BB4 B 0x3245BBC
	0x03245BB8 B 0x3245BBC
	0x03245BBC MOV X20, X0
	0x03245BC0 CMP W1, 0x1
	0x03245BC4 B.NE 0x3245C30
	0x03245BC8 MOV X0, X20
	0x03245BCC BL 0x3EB1AD0
	0x03245BD0 MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x1198000
	005 Move X20, 0xEDE000
	006 Move W8, [X19+1097]
	007 Move X20, [X20+2520]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xEDE000
	013 Move X0, [X0+2520]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1097], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Call EncodingHelper.GetDefaultEncoding
	023 Compare X0, 0
	024 JumpIfEqual {31}
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move W8, 1
	028 Move [X0+33], W8
	029 Move X30, [X31+32]
	030 Return X0
	031 Call 0x1C17F20

Method: System.Void setReadOnly(System.Boolean value = True)

Disassembly:
	0x03245D50 LDR X30, [X31], #0x10
	0x03245D54 BR X5
	0x03245D58 BL 0x1C16F20

ISIL:
	001 And W8, W1, 1
	002 Move [X0+33], W8
	003 Return 

Method: System.Text.Encoding get_Default()

Disassembly:
	0x03243BB4 BL 0x1C16D08
	0x03243BB8 MOV X1, X20
	0x03243BBC MOV X2, X31
	0x03243BC0 BL 0x33BFB40
	0x03243BC4 MOV X19, X0
	0x03243BC8 ADRP X0, 0xEB0000
	0x03243BCC LDR X0, [X0 + 0xB40]
	0x03243BD0 BL 0x1C16D08
	0x03243BD4 BL 0x1C16F10
	0x03243BD8 MOV X1, X19
	0x03243BDC MOV X2, X31
	0x03243BE0 MOV X20, X0
	0x03243BE4 BL 0x3379A44
	0x03243BE8 ADRP X0, 0xEDF000
	0x03243BEC LDR X0, [X0 + 0xA58]
	0x03243BF0 BL 0x1C16D08
	0x03243BF4 MOV X1, X0
	0x03243BF8 MOV X0, X20
	0x03243BFC BL 0x1C16DEC
	0x03243C00 LDR W0, [X0 + 0x10]
	0x03243C04 MOV X1, X31
	0x03243C08 B 0x33C1398
	0x03243C0C STP X30, X19, [X31 - 0x10]!
	0x03243C10 MOV X19, X0
	0x03243C14 LDR X0, [X0 + 0x18]
	0x03243C18 CBNZ X0, 0x3243C2C
	0x03243C1C MOV X0, X19
	0x03243C20 BL 0x3243AE0
	0x03243C24 LDR X0, [X19 + 0x18]
	0x03243C28 CBZ X0, 0x3243C38
	0x03243C2C MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x119A000
	005 Move X20, 0xEE0000
	006 Move W8, [X19+1098]
	007 Move X20, [X20+1016]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xEE0000
	013 Move X0, [X0+1016]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1098], W8
	017 Move X8, [X20]
	018 Move X8, [X8+184]
	019 Move X19, [X8]
	020 Call 0x1C17D44
	021 Compare X19, 0
	022 JumpIfNotEqual {29}
	023 Call Encoding.CreateDefaultEncoding
	024 Move X19, X0
	025 Call 0x1C17D44
	026 Move X8, [X20]
	027 Move X8, [X8+184]
	028 Move [X8], X19
	029 Move X8, [X20]
	030 Move X8, [X8+184]
	031 Move X19, [X8]
	032 Call 0x1C17D44
	033 Move X0, X19
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return X0

Method: System.Text.Encoder GetEncoder()

Disassembly:
	0x03245D5C STR X30, [X31 - 0x10]!
	0x03245D60 LDR X0, [X0 + 0x20]
	0x03245D64 CBZ X0, 0x3245D7C
	0x03245D68 LDR X8, [X0]
	0x03245D6C LDR X4, [X8 + 0x2B8]
	0x03245D70 LDR X3, [X8 + 0x2C0]
	0x03245D74 LDR X30, [X31], #0x10
	0x03245D78 BR X4
	0x03245D7C BL 0x1C16F20
	0x03245D80 LDR X8, [X0]
	0x03245D84 MOV W6, W31
	0x03245D88 LDP X9, X7, [X8 + 0x1C8]
	0x03245D8C BR X9
	0x03245D90 STR X30, [X31 - 0x10]!
	0x03245D94 LDR X0, [X0 + 0x20]
	0x03245D98 CBZ X0, 0x3245DB0
	0x03245D9C LDR X8, [X0]
	0x03245DA0 LDR X7, [X8 + 0x2E8]
	0x03245DA4 LDR X6, [X8 + 0x2F0]
	0x03245DA8 LDR X30, [X31], #0x10
	0x03245DAC BR X7
	0x03245DB0 BL 0x1C16F20
	0x03245DB4 STR X30, [X31 - 0x10]!
	0x03245DB8 LDR X0, [X0 + 0x20]
	0x03245DBC CBZ X0, 0x3245DD4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1198000
	006 Move X21, 0xEDE000
	007 Move W8, [X20+1099]
	008 Move X21, [X21+2768]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEDE000
	015 Move X0, [X0+2768]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1099], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X31
	022 Move X20, X0
	023 Call Encoder..ctor, X0
	024 Move W8, 1
	025 Move [X20+32], X19
	026 Move [X20+40], W8
	027 Move X0, X20
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0

Method: System.Int32 GetMaxByteCount(System.Int32 charCount)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Int32 GetMaxCharCount(System.Int32 byteCount)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.String GetString(System.Byte[] bytes)

Disassembly:
	0x03245DF0 MOV W22, W6
	0x03245DF4 MOV X23, X5
	0x03245DF8 MOV W24, W4
	0x03245DFC MOV X25, X3
	0x03245E00 MOV X21, X2
	0x03245E04 MOV X19, X0
	0x03245E08 BL 0x33BDD8C
	0x03245E0C ADD X8, X25, W24, 0x1, SXTW
	0x03245E10 ADD X9, X23, W22, SXTW
	0x03245E14 STP X20, X21, [X19 + 0x30]
	0x03245E18 STP X25, X25, [X19 + 0x10]
	0x03245E1C STR X8, [X19 + 0x20]
	0x03245E20 STR X23, [X19 + 0x40]
	0x03245E24 STP X9, X23, [X19 + 0x48]
	0x03245E28 CBZ X21, 0x3245E3C
	0x03245E2C MOV X0, X21
	0x03245E30 MOV X1, X31
	0x03245E34 BL 0x33FC534
	0x03245E38 B 0x3245E54
	0x03245E3C CBZ X20, 0x3245E7C
	0x03245E40 LDR X0, [X20 + 0x30]
	0x03245E44 CBZ X0, 0x3245E7C
	0x03245E48 LDR X8, [X0]
	0x03245E4C LDP X9, X1, [X8 + 0x178]
	0x03245E50 BLR X9
	0x03245E54 STR X0, [X19 + 0x58]
	0x03245E58 CBZ X0, 0x3245E7C
	0x03245E5C LDR X2, [X19 + 0x20]
	0x03245E60 LDR X1, [X19 + 0x50]
	0x03245E64 LDP X20, X19, [X31 + 0x30]
	0x03245E68 LDP X22, X21, [X31 + 0x20]
	0x03245E6C LDP X24, X23, [X31 + 0x10]
	0x03245E70 MOV X3, X31
	0x03245E74 LDP X30, X25, [X31], #0x40
	0x03245E78 B 0x33FC570
	0x03245E7C BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {15}
	006 Move X8, [X0]
	007 Move W3, [X1+24]
	008 Move X20, [X31+16]
	009 Move X19, [X31+24]
	010 Move W2, W31
	011 Move X5, [X8+904]
	012 Move X4, [X8+912]
	013 Move X30, [X31+32]
	014 CallNoReturn X5
	015 Move X0, 0xEDE000
	016 Move X0, [X0+736]
	017 Call 0x1C17D08
	018 Move X1, X31
	019 Call Environment.GetResourceString, X0
	020 Move X19, X0
	021 Move X0, 0xEB4000
	022 Move X0, [X0+1320]
	023 Call 0x1C17D08
	024 Call 0x1C17F10
	025 Move X20, X0
	026 Move X0, 0xEDE000
	027 Move X0, [X0+776]
	028 Call 0x1C17D08
	029 Move X1, X0
	030 Move X0, X20
	031 Move X2, X19
	032 Move X3, X31
	033 Call ArgumentNullException..ctor, X0, X1, X2
	034 Move X0, 0xEDE000
	035 Move X0, [X0+2776]
	036 Call 0x1C17D08
	037 Move X1, X0
	038 Move X0, X20
	039 Call 0x1C17DEC

Method: System.String GetString(System.Byte[] bytes, System.Int32 index, System.Int32 count)

Disassembly:
	0x03245E80 STR X30, [X31 - 0x10]!
	0x03245E84 LDR X8, [X0 + 0x10]
	0x03245E88 CBZ X8, 0x3245EA4
	0x03245E8C LDR X9, [X0 + 0x20]
	0x03245E90 CMP X8, X9
	0x03245E94 B.CS 0x3245EB8
	0x03245E98 ADD X9, X8, 0x2
	0x03245E9C STR X9, [X0 + 0x10]
	0x03245EA0 STRH W1, [X8]
	0x03245EA4 LDR W8, [X0 + 0x28]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0]
	003 Move X9, [X8+728]
	004 Move X4, [X8+736]
	005 NotImplemented "Instruction BLR not yet implemented."
	006 Move X1, X0
	007 Move X0, X31
	008 Move X2, X31
	009 Move X30, [X31+16]
	010 Call String.CreateString, X0, X1
	011 Return X0

Method: System.Text.Encoding get_Unicode()

Disassembly:
	0x03243C30 LDP X30, X19, [X31], #0x10
	0x03243C34 B 0x3340FD0
	0x03243C38 BL 0x1C16F20
	0x03243C3C STP X30, X19, [X31 - 0x10]!
	0x03243C40 MOV X19, X0
	0x03243C44 LDR X0, [X0 + 0x18]
	0x03243C48 CBNZ X0, 0x3243C5C
	0x03243C4C MOV X0, X19
	0x03243C50 BL 0x3243AE0
	0x03243C54 LDR X0, [X19 + 0x18]
	0x03243C58 CBZ X0, 0x3243C68
	0x03243C5C MOV X1, X31
	0x03243C60 LDP X30, X19, [X31], #0x10
	0x03243C64 B 0x3340F14
	0x03243C68 BL 0x1C16F20
	0x03243C6C LDR X0, [X0 + 0x28]
	0x03243C70 RET
	0x03243C74 LDR X0, [X0 + 0x30]
	0x03243C78 RET
	0x03243C7C STR X30, [X31 - 0x20]!
	0x03243C80 STP X20, X19, [X31 + 0x10]
	0x03243C84 ADRP X20, 0x1199000
	0x03243C88 LDRB W8, [X20 + 0x43C]
	0x03243C8C MOV X19, X0
	0x03243C90 TBNZ X8, 0x0, 0x3243CA8
	0x03243C94 ADRP X0, 0xEDF000
	0x03243C98 LDR X0, [X0 + 0x3F8]
	0x03243C9C BL 0x1C16CF4
	0x03243CA0 MOVZ W8, 0x1
	0x03243CA4 STRB W8, [X20 + 0x43C]
	0x03243CA8 MOV X0, X19
	0x03243CAC MOV X1, X31
	0x03243CB0 BL 0x33C5A24
	0x03243CB4 CBZ X0, 0x3243D00
	0x03243CB8 ADRP X9, 0xEDF000
	0x03243CBC LDR X9, [X9 + 0x3F8]
	0x03243CC0 LDR X8, [X0]
	0x03243CC4 LDR X1, [X9]
	0x03243CC8 LDRB W10, [X8 + 0x130]
	0x03243CCC LDRB W9, [X1 + 0x130]
	0x03243CD0 CMP W10, W9
	0x03243CD4 B.CC 0x3243CFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x119A000
	005 Move X20, 0xEE0000
	006 Move W8, [X19+1100]
	007 Move X20, [X20+1016]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xEE0000
	013 Move X0, [X0+1016]
	014 Call 0x1C17CF4
	015 Move X0, 0xEE0000
	016 Move X0, [X0+2256]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+1100], W8
	020 Move X8, [X20]
	021 Move X8, [X8+184]
	022 Move X19, [X8+8]
	023 Call 0x1C17D44
	024 Compare X19, 0
	025 JumpIfEqual {28}
	026 Move X8, [X20]
	027 Move X8, [X8+184]
	028 Move X8, 0xEE0000
	029 Move X8, [X8+2256]
	030 Move X0, [X8]
	031 Call 0x1C17F10
	032 Move W2, 1
	033 Move W1, W31
	034 Move X3, X31
	035 Move X19, X0
	036 Call UnicodeEncoding..ctor, X0, X1, X2
	037 Call 0x1C17D44
	038 Move X8, [X20]
	039 Move X8, [X8+184]
	040 Move [X8+8], X19
	041 Move X19, [X8+8]
	042 Call 0x1C17D44
	043 Move X0, X19
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X30, [X31+32]
	047 Return X0

Method: System.Text.Encoding get_BigEndianUnicode()

Disassembly:
	0x03243CD8 LDR X8, [X8 + 0xC8]
	0x03243CDC ADD X8, X8, X9, 0x3, LSL
	0x03243CE0 LDUR X8, [X8 - 0x8]
	0x03243CE4 CMP X8, X1
	0x03243CE8 B.NE 0x3243CFC
	0x03243CEC LDP X20, X19, [X31 + 0x10]
	0x03243CF0 STRB W31, [X0 + 0x21]
	0x03243CF4 LDR X30, [X31], #0x20
	0x03243CF8 RET
	0x03243CFC BL 0x1C171E0
	0x03243D00 BL 0x1C16F20
	0x03243D04 LDRB W0, [X0 + 0x21]
	0x03243D08 RET
	0x03243D0C STP X30, X19, [X31 - 0x10]!
	0x03243D10 CBZ X1, 0x3243D4C
	0x03243D14 MOV X19, X0
	0x03243D18 MOV X0, X1
	0x03243D1C MOV X1, X31
	0x03243D20 BL 0x322D958
	0x03243D24 CBZ X0, 0x3243D94
	0x03243D28 LDR X8, [X19]
	0x03243D2C LDR W3, [X0 + 0x18]
	0x03243D30 MOV X1, X0
	0x03243D34 MOV X0, X19
	0x03243D38 LDR X5, [X8 + 0x208]
	0x03243D3C LDR X4, [X8 + 0x210]
	0x03243D40 MOV W2, W31
	0x03243D44 LDP X30, X19, [X31], #0x10
	0x03243D48 BR X5
	0x03243D4C ADRP X0, 0xEB5000
	0x03243D50 LDR X0, [X0 + 0x528]
	0x03243D54 BL 0x1C16D08
	0x03243D58 BL 0x1C16F10
	0x03243D5C MOV X19, X0
	0x03243D60 ADRP X0, 0xED9000
	0x03243D64 LDR X0, [X0 + 0xCC0]
	0x03243D68 BL 0x1C16D08
	0x03243D6C MOV X1, X0
	0x03243D70 MOV X0, X19
	0x03243D74 MOV X2, X31
	0x03243D78 BL 0x330E100
	0x03243D7C ADRP X0, 0xEDF000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x119A000
	005 Move X20, 0xEE0000
	006 Move W8, [X19+1101]
	007 Move X20, [X20+1016]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xEE0000
	013 Move X0, [X0+1016]
	014 Call 0x1C17CF4
	015 Move X0, 0xEE0000
	016 Move X0, [X0+2256]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+1101], W8
	020 Move X8, [X20]
	021 Move X8, [X8+184]
	022 Move X19, [X8+16]
	023 Call 0x1C17D44
	024 Compare X19, 0
	025 JumpIfEqual {28}
	026 Move X8, [X20]
	027 Move X8, [X8+184]
	028 Move X8, 0xEE0000
	029 Move X8, [X8+2256]
	030 Move X0, [X8]
	031 Call 0x1C17F10
	032 Move W1, 1
	033 Move W2, 1
	034 Move X3, X31
	035 Move X19, X0
	036 Call UnicodeEncoding..ctor, X0, X1, X2
	037 Call 0x1C17D44
	038 Move X8, [X20]
	039 Move X8, [X8+184]
	040 Move [X8+16], X19
	041 Move X19, [X8+16]
	042 Call 0x1C17D44
	043 Move X0, X19
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X30, [X31+32]
	047 Return X0

Method: System.Text.Encoding get_UTF7()

Disassembly:
	0x03243D80 LDR X0, [X0 + 0xA60]
	0x03243D84 BL 0x1C16D08
	0x03243D88 MOV X1, X0
	0x03243D8C MOV X0, X19
	0x03243D90 BL 0x1C16DEC
	0x03243D94 BL 0x1C16F20
	0x03243D98 STR X30, [X31 - 0x30]!
	0x03243D9C STP X22, X21, [X31 + 0x10]
	0x03243DA0 STP X20, X19, [X31 + 0x20]
	0x03243DA4 ADRP X22, 0x1199000
	0x03243DA8 LDRB W8, [X22 + 0x43F]
	0x03243DAC MOV W19, W2
	0x03243DB0 MOV X21, X1
	0x03243DB4 MOV X20, X0
	0x03243DB8 TBNZ X8, 0x0, 0x3243DD0
	0x03243DBC ADRP X0, 0xEB9000
	0x03243DC0 LDR X0, [X0 + 0x8D8]
	0x03243DC4 BL 0x1C16CF4
	0x03243DC8 MOVZ W8, 0x1
	0x03243DCC STRB W8, [X22 + 0x43F]
	0x03243DD0 CBZ X21, 0x3243E50
	0x03243DD4 TBNZ X19, 0x1F, 0x3243EA0
	0x03243DD8 ADRP X8, 0xEB9000
	0x03243DDC LDR X8, [X8 + 0x8D8]
	0x03243DE0 MOV W1, W19
	0x03243DE4 LDR X0, [X8]
	0x03243DE8 BL 0x1C16D6C
	0x03243DEC MOV X1, X0
	0x03243DF0 CBZ W19, 0x3243E24
	0x03243DF4 CBZ X1, 0x3243F04
	0x03243DF8 LDR W9, [X1 + 0x18]
	0x03243DFC MOV X8, X31
	0x03243E00 MOV W10, W19
	0x03243E04 ADD X11, X1, 0x20
	0x03243E08 CMP X8, X9
	0x03243E0C B.CS 0x3243E4C
	0x03243E10 LDRH W12, [X21], #0x2
	0x03243E14 STRH W12, [X11, X8, LSL #1]
	0x03243E18 ADD X8, X8, 0x1
	0x03243E1C CMP X10, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x119A000
	005 Move X20, 0xEE0000
	006 Move W8, [X19+1102]
	007 Move X20, [X20+1016]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xEE0000
	013 Move X0, [X0+1016]
	014 Call 0x1C17CF4
	015 Move X0, 0xEE0000
	016 Move X0, [X0+1832]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+1102], W8
	020 Move X8, [X20]
	021 Move X8, [X8+184]
	022 Move X19, [X8+24]
	023 Call 0x1C17D44
	024 Compare X19, 0
	025 JumpIfEqual {28}
	026 Move X8, [X20]
	027 Move X8, [X8+184]
	028 Move X8, 0xEE0000
	029 Move X8, [X8+1832]
	030 Move X0, [X8]
	031 Call 0x1C17F10
	032 Move X1, X31
	033 Move X19, X0
	034 Call UTF7Encoding..ctor, X0
	035 Call 0x1C17D44
	036 Move X8, [X20]
	037 Move X8, [X8+184]
	038 Move [X8+24], X19
	039 Move X19, [X8+24]
	040 Call 0x1C17D44
	041 Move X0, X19
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Return X0

Method: System.Text.Encoding get_UTF8()

Disassembly:
	0x03242948 BL 0x1C16D08
	0x0324294C MOV X1, X20
	0x03242950 MOV X2, X31
	0x03242954 BL 0x321EFD0
	0x03242958 MOV X20, X0
	0x0324295C ADRP X0, 0xEB1000
	0x03242960 LDR X0, [X0 + 0xB40]
	0x03242964 BL 0x1C16D08
	0x03242968 BL 0x1C16F10
	0x0324296C MOV X21, X0
	0x03242970 MOV X1, X20
	0x03242974 MOV X2, X31
	0x03242978 BL 0x3379A44
	0x0324297C ADRP X0, 0xEE0000
	0x03242980 LDR X0, [X0 + 0x9F8]
	0x03242984 BL 0x1C16D08
	0x03242988 MOV X1, X0
	0x0324298C MOV X0, X21
	0x03242990 BL 0x1C16DEC
	0x03242994 BL 0x1C16F44
	0x03242998 MOV X1, X31
	0x0324299C BL 0x1C16DEC
	0x032429A0 MOV X20, X0
	0x032429A4 CBNZ X0, 0x32429C8
	0x032429A8 LDR W8, [X21 + 0x18]
	0x032429AC CBNZ W8, 0x32429E8
	0x032429B0 BL 0x1C16F28
	0x032429B4 MOV X20, X0
	0x032429B8 CBNZ X0, 0x3242A54
	0x032429BC LDR W8, [X21 + 0x18]
	0x032429C0 CBNZ W8, 0x3242A74
	0x032429C4 BL 0x1C16F28
	0x032429C8 LDR X8, [X21]
	0x032429CC LDR X1, [X8 + 0x40]
	0x032429D0 MOV X0, X20
	0x032429D4 BL 0x1C16E00
	0x032429D8 CBNZ X0, 0x32429A8
	0x032429DC BL 0x1C16F44
	0x032429E0 MOV X1, X31
	0x032429E4 BL 0x1C16DEC
	0x032429E8 STR X20, [X21 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x119B000
	005 Move X20, 0xEE1000
	006 Move W8, [X19+1103]
	007 Move X20, [X20+1016]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xEE1000
	013 Move X0, [X0+1016]
	014 Call 0x1C17CF4
	015 Move X0, 0xEE1000
	016 Move X0, [X0+2088]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+1103], W8
	020 Move X8, [X20]
	021 Move X8, [X8+184]
	022 Move X19, [X8+32]
	023 Call 0x1C17D44
	024 Compare X19, 0
	025 JumpIfEqual {28}
	026 Move X8, [X20]
	027 Move X8, [X8+184]
	028 Move X8, 0xEE1000
	029 Move X8, [X8+2088]
	030 Move X0, [X8]
	031 Call 0x1C17F10
	032 Move W1, 1
	033 Move X2, X31
	034 Move X19, X0
	035 Call UTF8Encoding..ctor, X0, X1
	036 Call 0x1C17D44
	037 Move X8, [X20]
	038 Move X8, [X8+184]
	039 Move [X8+32], X19
	040 Move X19, [X8+32]
	041 Call 0x1C17D44
	042 Move X0, X19
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Return X0

Method: System.Text.Encoding get_UTF32()

Disassembly:
	0x03243E20 B.NE 0x3243E08
	0x03243E24 LDR X8, [X20]
	0x03243E28 MOV X0, X20
	0x03243E2C MOV W3, W19
	0x03243E30 LDP X20, X19, [X31 + 0x20]
	0x03243E34 LDR X5, [X8 + 0x208]
	0x03243E38 LDR X4, [X8 + 0x210]
	0x03243E3C LDP X22, X21, [X31 + 0x10]
	0x03243E40 MOV W2, W31
	0x03243E44 LDR X30, [X31], #0x30
	0x03243E48 BR X5
	0x03243E4C BL 0x1C16F28
	0x03243E50 ADRP X0, 0xEDF000
	0x03243E54 LDR X0, [X0 + 0x2E0]
	0x03243E58 BL 0x1C16D08
	0x03243E5C MOV X1, X31
	0x03243E60 BL 0x33BDD84
	0x03243E64 MOV X19, X0
	0x03243E68 ADRP X0, 0xEB5000
	0x03243E6C LDR X0, [X0 + 0x528]
	0x03243E70 BL 0x1C16D08
	0x03243E74 BL 0x1C16F10
	0x03243E78 MOV X20, X0
	0x03243E7C ADRP X0, 0xEDF000
	0x03243E80 LDR X0, [X0 + 0x2D8]
	0x03243E84 BL 0x1C16D08
	0x03243E88 MOV X1, X0
	0x03243E8C MOV X0, X20
	0x03243E90 MOV X2, X19
	0x03243E94 MOV X3, X31
	0x03243E98 BL 0x3315F7C
	0x03243E9C B 0x3243EEC
	0x03243EA0 ADRP X0, 0xED8000
	0x03243EA4 LDR X0, [X0 + 0x670]
	0x03243EA8 BL 0x1C16D08
	0x03243EAC MOV X1, X31
	0x03243EB0 BL 0x33BDD84
	0x03243EB4 MOV X19, X0
	0x03243EB8 ADRP X0, 0xEB8000
	0x03243EBC LDR X0, [X0 + 0x760]
	0x03243EC0 BL 0x1C16D08
	0x03243EC4 BL 0x1C16F10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x119A000
	005 Move X20, 0xEE0000
	006 Move W8, [X19+1104]
	007 Move X20, [X20+1016]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xEE0000
	013 Move X0, [X0+1016]
	014 Call 0x1C17CF4
	015 Move X0, 0xEE0000
	016 Move X0, [X0+1784]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+1104], W8
	020 Move X8, [X20]
	021 Move X8, [X8+184]
	022 Move X19, [X8+40]
	023 Call 0x1C17D44
	024 Compare X19, 0
	025 JumpIfEqual {28}
	026 Move X8, [X20]
	027 Move X8, [X8+184]
	028 Move X8, 0xEE0000
	029 Move X8, [X8+1784]
	030 Move X0, [X8]
	031 Call 0x1C17F10
	032 Move W2, 1
	033 Move W1, W31
	034 Move X3, X31
	035 Move X19, X0
	036 Call UTF32Encoding..ctor, X0, X1, X2
	037 Call 0x1C17D44
	038 Move X8, [X20]
	039 Move X8, [X8+184]
	040 Move [X8+40], X19
	041 Move X19, [X8+40]
	042 Call 0x1C17D44
	043 Move X0, X19
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X30, [X31+32]
	047 Return X0

Method: System.Boolean Equals(System.Object value)

Disassembly:
	0x03245EA8 ADD W8, W8, 0x1
	0x03245EAC STR W8, [X0 + 0x28]
	0x03245EB0 MOVZ W0, 0x1
	0x03245EB4 B 0x3245EE4
	0x03245EB8 LDR X9, [X0 + 0x50]
	0x03245EBC LDR X8, [X0 + 0x30]
	0x03245EC0 SUB X9, X9, W2, SXTW
	0x03245EC4 STR X9, [X0 + 0x50]
	0x03245EC8 CBZ X8, 0x3245EEC
	0x03245ECC LDP X1, X10, [X0 + 0x38]
	0x03245ED0 MOV X0, X8
	0x03245ED4 CMP X9, X10
	0x03245ED8 CSET W2, LS
	0x03245EDC BL 0x3245300
	0x03245EE0 MOV W0, W31
	0x03245EE4 LDR X30, [X31], #0x10
	0x03245EE8 RET
	0x03245EEC BL 0x1C16F20
	0x03245EF0 MOVZ W2, 0x1
	0x03245EF4 B 0x3245E80
	0x03245EF8 LDR X8, [X0 + 0x50]
	0x03245EFC ADD X8, X8, W1, SXTW
	0x03245F00 STR X8, [X0 + 0x50]
	0x03245F04 RET
	0x03245F08 LDP X9, X8, [X0 + 0x48]
	0x03245F0C CMP X8, X9
	0x03245F10 CSET W0, CC
	0x03245F14 RET
	0x03245F18 LDP X9, X8, [X0 + 0x48]
	0x03245F1C CMP X8, X9
	0x03245F20 B.CS 0x3245F34
	0x03245F24 ADD X9, X8, 0x1
	0x03245F28 STR X9, [X0 + 0x50]
	0x03245F2C LDRB W0, [X8]
	0x03245F30 RET
	0x03245F34 MOV W0, W31
	0x03245F38 RET
	0x03245F3C LDR W8, [X0 + 0x50]
	0x03245F40 LDR W9, [X0 + 0x40]
	0x03245F44 SUB W0, W8, W9
	0x03245F48 RET
	0x03245F4C STR X30, [X31 - 0x30]!
	0x03245F50 STP X22, X21, [X31 + 0x10]
	0x03245F54 STP X20, X19, [X31 + 0x20]
	0x03245F58 ADRP X21, 0x1197000
	0x03245F5C ADRP X22, 0xEAE000
	0x03245F60 LDRB W8, [X21 + 0x45A]
	0x03245F64 LDR X22, [X22 + 0x618]
	0x03245F68 MOV W20, W1
	0x03245F6C MOV X19, X0
	0x03245F70 TBNZ X8, 0x0, 0x3245F88
	0x03245F74 ADRP X0, 0xEAE000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1198000
	006 Move W8, [X21+1105]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xEDE000
	014 Move X0, [X0+1016]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1105], W8
	018 Compare X20, 0
	019 JumpIfEqual {61}
	020 Move X8, 0xEDE000
	021 Move X8, [X8+1016]
	022 Move X9, [X20]
	023 Move X8, [X8]
	024 Move W11, [X9+304]
	025 Move W10, [X8+304]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X9, [X9+200]
	028 Add X9, X9, X10
	029 NotImplemented "Instruction LDUR not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSEL not yet implemented."
	032 Compare X20, 0
	033 JumpIfEqual {67}
	034 Move W8, [X19+16]
	035 Move W9, [X20+16]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, [X19+40]
	038 Compare X0, 0
	039 JumpIfEqual {67}
	040 Move X8, [X0]
	041 Move X1, [X20+40]
	042 Move X9, [X8+312]
	043 Move X2, [X8+320]
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {61}
	049 Move X0, [X19+48]
	050 Compare X0, 0
	051 JumpIfEqual {67}
	052 Move X8, [X0]
	053 Move X1, [X20+48]
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X3, [X8+312]
	057 Move X2, [X8+320]
	058 Move X30, [X31+32]
	059 Move X21, [X31+40]
	060 CallNoReturn X3
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move W0, W31
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 Return X0
	067 Call 0x1C17F20

Method: System.Int32 GetHashCode()

Disassembly:
	0x03245F78 LDR X0, [X0 + 0x618]
	0x03245F7C BL 0x1C16CF4
	0x03245F80 MOVZ W8, 0x1
	0x03245F84 STRB W8, [X21 + 0x45A]
	0x03245F88 LDR X0, [X22]
	0x03245F8C MOVZ W1, 0x1
	0x03245F90 BL 0x1C16D6C
	0x03245F94 CBZ X0, 0x3245FBC
	0x03245F98 LDR W8, [X0 + 0x18]
	0x03245F9C MOV X1, X0
	0x03245FA0 CBZ W8, 0x3245FC0
	0x03245FA4 STRB W20, [X1 + 0x20]
	0x03245FA8 MOV X0, X19
	0x03245FAC LDP X20, X19, [X31 + 0x20]
	0x03245FB0 LDP X22, X21, [X31 + 0x10]
	0x03245FB4 LDR X30, [X31], #0x30
	0x03245FB8 B 0x3245FC4
	0x03245FBC BL 0x1C16F20
	0x03245FC0 BL 0x1C16F28
	0x03245FC4 STP X30, X21, [X31 - 0x20]!
	0x03245FC8 STP X20, X19, [X31 + 0x10]
	0x03245FCC MOV X3, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+40]
	006 Compare X0, 0
	007 JumpIfEqual {28}
	008 Move X8, [X0]
	009 Move W20, [X19+16]
	010 Move X9, [X8+344]
	011 Move X1, [X8+352]
	012 NotImplemented "Instruction BLR not yet implemented."
	013 Move X8, [X19+48]
	014 Compare X8, 0
	015 JumpIfEqual {28}
	016 Move X9, [X8]
	017 Move W19, W0
	018 Move X0, X8
	019 Move X10, [X9+344]
	020 Move X1, [X9+352]
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Add W8, W19, W20
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Add W0, W8, W0
	026 Move X30, [X31+32]
	027 Return X0
	028 Call 0x1C17F20

Method: System.Char[] GetBestFitUnicodeToBytesData()

Disassembly:
	0x03245FD0 LDR X21, [X3 + 0x10]!
	0x03245FD4 MOV X19, X0
	0x03245FD8 MOV X20, X1
	0x03245FDC CBZ X21, 0x3246020
	0x03245FE0 LDR X0, [X19 + 0x58]
	0x03245FE4 CBZ X0, 0x324609C
	0x03245FE8 LDR X8, [X0]
	0x03245FEC LDR X2, [X19 + 0x50]
	0x03245FF0 MOV X1, X20
	0x03245FF4 LDP X9, X4, [X8 + 0x1A8]
	0x03245FF8 BLR X9
	0x03245FFC TBZ X0, 0x0, 0x3246050
	0x03246000 LDR X8, [X19 + 0x10]
	0x03246004 LDR W9, [X19 + 0x28]
	0x03246008 SUB X8, X8, X21
	0x0324600C CMP X8, 0x0
	0x03246010 CINC X8, X8, LT
	0x03246014 UBFM X8, X8, 0x1, 0x3F
	0x03246018 ADD W8, W9, W8
	0x0324601C B 0x3246044
	0x03246020 LDR X0, [X19 + 0x58]
	0x03246024 CBZ X0, 0x324609C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1198000
	005 Move X19, 0xEDE000
	006 Move W8, [X20+1106]
	007 Move X19, [X19+2784]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xEDE000
	013 Move X0, [X0+2784]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1106], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Char[] GetBestFitBytesToUnicodeData()

Disassembly:
	0x03246028 LDR X8, [X0]
	0x0324602C LDR X2, [X19 + 0x50]
	0x03246030 LDR W21, [X19 + 0x28]
	0x03246034 MOV X1, X20
	0x03246038 LDP X9, X3, [X8 + 0x1B8]
	0x0324603C BLR X9
	0x03246040 ADD W8, W0, W21
	0x03246044 MOVZ W0, 0x1
	0x03246048 STR W8, [X19 + 0x28]
	0x0324604C B 0x3246090
	0x03246050 CBZ X20, 0x324609C
	0x03246054 LDRSW X8, [X20 + 0x18]
	0x03246058 LDP X9, X0, [X19 + 0x50]
	0x0324605C SUB X8, X9, X8
	0x03246060 STR X8, [X19 + 0x50]
	0x03246064 CBZ X0, 0x324609C
	0x03246068 MOV X1, X31
	0x0324606C BL 0x33FC800
	0x03246070 LDR X0, [X19 + 0x30]
	0x03246074 CBZ X0, 0x324609C
	0x03246078 LDP X9, X8, [X19 + 0x10]
	0x0324607C LDR X1, [X19 + 0x38]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1197000
	005 Move X19, 0xEDD000
	006 Move W8, [X20+1107]
	007 Move X19, [X19+2784]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xEDD000
	013 Move X0, [X0+2784]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1107], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Void ThrowBytesOverflow()

Disassembly:
	0x03246080 CMP X9, X8
	0x03246084 CSET W2, EQ
	0x03246088 BL 0x3245300
	0x0324608C MOV W0, W31
	0x03246090 LDP X20, X19, [X31 + 0x10]
	0x03246094 LDP X30, X21, [X31], #0x20
	0x03246098 RET
	0x0324609C BL 0x1C16F20
	0x032460A0 LDR W0, [X0 + 0x28]
	0x032460A4 RET
	0x032460A8 STP X30, X25, [X31 - 0x40]!
	0x032460AC STP X24, X23, [X31 + 0x10]
	0x032460B0 STP X22, X21, [X31 + 0x20]
	0x032460B4 STP X20, X19, [X31 + 0x30]
	0x032460B8 MOV X20, X1
	0x032460BC MOV X1, X31
	0x032460C0 MOV W22, W6
	0x032460C4 MOV X23, X5
	0x032460C8 MOV W24, W4
	0x032460CC MOV X25, X3
	0x032460D0 MOV X21, X2
	0x032460D4 MOV X19, X0
	0x032460D8 BL 0x33BDD8C
	0x032460DC ADD X8, X23, W22, 0x1, SXTW
	0x032460E0 ADD X9, X25, W24, SXTW
	0x032460E4 STP X20, X21, [X19 + 0x48]
	0x032460E8 STP X25, X25, [X19 + 0x10]
	0x032460EC STP X23, X8, [X19 + 0x30]
	0x032460F0 STP X9, X23, [X19 + 0x20]
	0x032460F4 CBZ X21, 0x324624C
	0x032460F8 MOV X0, X21
	0x032460FC MOV X1, X31
	0x03246100 BL 0x33FBF24
	0x03246104 LDR X8, [X19 + 0x50]
	0x03246108 STR X0, [X19 + 0x58]
	0x0324610C CBZ X8, 0x32462A0
	0x03246110 LDRB W9, [X8 + 0x31]
	0x03246114 CBZ W9, 0x3246268
	0x03246118 MOV X0, X8
	0x0324611C MOV X1, X31
	0x03246120 BL 0x33FBF14
	0x03246124 TBZ X0, 0x0, 0x3246268
	0x03246128 LDR X0, [X19 + 0x58]
	0x0324612C CBZ X0, 0x32462A0
	0x03246130 LDR X8, [X0]
	0x03246134 LDP X9, X1, [X8 + 0x1B8]
	0x03246138 BLR X9
	0x0324613C CMP W0, 0x1
	0x03246140 B.LT 0x3246268
	0x03246144 ADRP X0, 0xEAD000
	0x03246148 LDR X0, [X0 + 0x9D0]
	0x0324614C BL 0x1C16D08
	0x03246150 MOVZ W1, 0x2
	0x03246154 BL 0x1C16D6C
	0x03246158 LDR X21, [X19 + 0x50]
	0x0324615C MOV X20, X0
	0x03246160 MOV X0, X21
	0x03246164 BL 0x19903C0
	0x03246168 LDR X21, [X21 + 0x28]
	0x0324616C MOV X0, X21
	0x03246170 BL 0x19903C0
	0x03246174 LDR X8, [X21]
	0x03246178 MOV X0, X21
	0x0324617C LDP X9, X1, [X8 + 0x1B8]
	0x03246180 BLR X9

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Move X0, 0xEAE000
	007 Move X0, [X0+2512]
	008 Call 0x1C17D08
	009 Move W1, 2
	010 Call 0x1C17D6C
	011 Move X8, [X19]
	012 Move X20, X0
	013 Move X0, X19
	014 Move X9, [X8+440]
	015 Move X1, [X8+448]
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move X21, X0
	018 Move X0, X20
	019 Call 0x19913C0
	020 Move X0, X20
	021 Move X1, X21
	022 Call 0x19990B4
	023 Move X0, X20
	024 Move X1, X31
	025 Move X2, X21
	026 Call 0x1994444
	027 Move X19, [X19+40]
	028 Move X0, X19
	029 Call 0x19913C0
	030 Move X0, X19
	031 Move X1, X31
	032 Call "il2cpp_vm_object_is_inst", X0
	033 Move X19, X0
	034 Move X0, X20
	035 Call 0x19913C0
	036 Move X0, X20
	037 Move X1, X19
	038 Call 0x19990B4
	039 Move W1, 1
	040 Move X0, X20
	041 Move X2, X19
	042 Call 0x1994444
	043 Move X0, 0xEDD000
	044 Move X0, [X0+2792]
	045 Call 0x1C17D08
	046 Move X1, X20
	047 Move X2, X31
	048 Call Environment.GetResourceString, X0, X1
	049 Move X19, X0
	050 Move X0, 0xEB6000
	051 Move X0, [X0+1400]
	052 Call 0x1C17D08
	053 Call 0x1C17F10
	054 Move X20, X0
	055 Move X0, 0xEDD000
	056 Move X0, [X0+776]
	057 Call 0x1C17D08
	058 Move X2, X0
	059 Move X0, X20
	060 Move X1, X19
	061 Move X3, X31
	062 Call ArgumentException..ctor, X0, X1, X2
	063 Move X0, 0xEDD000
	064 Move X0, [X0+2800]
	065 Call 0x1C17D08
	066 Move X1, X0
	067 Move X0, X20
	068 Call 0x1C17DEC

Method: System.Void ThrowBytesOverflow(System.Text.EncoderNLS encoder, System.Boolean nothingEncoded)

Disassembly:
	0x03246184 MOV X21, X0
	0x03246188 MOV X0, X20
	0x0324618C BL 0x19903C0
	0x03246190 MOV X0, X20
	0x03246194 MOV X1, X21
	0x03246198 BL 0x19980B4
	0x0324619C MOV X0, X20
	0x032461A0 MOV X1, X31
	0x032461A4 MOV X2, X21
	0x032461A8 BL 0x1993444
	0x032461AC LDR X19, [X19 + 0x50]
	0x032461B0 MOV X0, X19
	0x032461B4 BL 0x19903C0
	0x032461B8 LDR X19, [X19 + 0x10]
	0x032461BC MOV X0, X19
	0x032461C0 BL 0x19903C0
	0x032461C4 MOV X0, X19
	0x032461C8 MOV X1, X31
	0x032461CC BL 0x33BE520
	0x032461D0 MOV X19, X0
	0x032461D4 MOV X0, X20
	0x032461D8 BL 0x19903C0
	0x032461DC MOV X0, X20
	0x032461E0 MOV X1, X19
	0x032461E4 BL 0x19980B4
	0x032461E8 MOVZ W1, 0x1
	0x032461EC MOV X0, X20
	0x032461F0 MOV X2, X19
	0x032461F4 BL 0x1993444
	0x032461F8 ADRP X0, 0xEDC000

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Compare X1, 0
	004 JumpIfEqual {37}
	005 Move W8, [X1+49]
	006 And W9, W2, 1
	007 Or W8, W8, W9
	008 Compare W8, 0
	009 JumpIfNotEqual {16}
	010 Move X30, [X31+16]
	011 Move X0, X1
	012 Move X1, X31
	013 Add X31, X31, 32
	014 Call EncoderNLS.ClearMustFlush, X0
	015 Return 
	016 Move [X31+24], X0
	017 Move X0, X1
	018 Move [X31+8], X1
	019 Move X1, X31
	020 Call Encoder.get_InternalHasFallbackBuffer, X0
	021 Move X8, [X31+8]
	022 Move W9, W0
	023 Move X0, [X31+24]
	024 Move TEMP, X9
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {37}
	028 Move X0, X8
	029 Move X1, X31
	030 Call Encoder.get_FallbackBuffer, X0
	031 Compare X0, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17F20
	034 Move X1, X31
	035 Call EncoderFallbackBuffer.InternalReset, X0
	036 Move X0, [X31+24]
	037 Call Encoding.ThrowBytesOverflow, X0

Method: System.Void ThrowCharsOverflow()

Disassembly:
	0x032461FC LDR X0, [X0 + 0x6B0]
	0x03246200 BL 0x1C16D08
	0x03246204 MOV X1, X20
	0x03246208 MOV X2, X31
	0x0324620C BL 0x33BFB40
	0x03246210 MOV X19, X0
	0x03246214 ADRP X0, 0xEB5000
	0x03246218 LDR X0, [X0 + 0x578]
	0x0324621C BL 0x1C16D08
	0x03246220 BL 0x1C16F10
	0x03246224 MOV X1, X19
	0x03246228 MOV X2, X31
	0x0324622C MOV X20, X0
	0x03246230 BL 0x3314A68
	0x03246234 ADRP X0, 0xEDC000
	0x03246238 LDR X0, [X0 + 0xB58]
	0x0324623C BL 0x1C16D08
	0x03246240 MOV X1, X0
	0x03246244 MOV X0, X20
	0x03246248 BL 0x1C16DEC
	0x0324624C CBZ X20, 0x32462A0
	0x03246250 LDR X0, [X20 + 0x28]
	0x03246254 CBZ X0, 0x32462A0
	0x03246258 LDR X8, [X0]
	0x0324625C LDP X9, X1, [X8 + 0x178]
	0x03246260 BLR X9
	0x03246264 STR X0, [X19 + 0x58]
	0x03246268 LDR X0, [X19 + 0x58]
	0x0324626C CBZ X0, 0x32462A0
	0x03246270 LDR X8, [X19 + 0x10]
	0x03246274 LDR X3, [X19 + 0x50]
	0x03246278 LDR X2, [X19 + 0x38]
	0x0324627C LDR X1, [X19 + 0x28]
	0x03246280 LDP X20, X19, [X31 + 0x30]
	0x03246284 LDP X22, X21, [X31 + 0x20]
	0x03246288 LDP X24, X23, [X31 + 0x10]
	0x0324628C CMP X8, 0x0
	0x03246290 CSET W4, NE
	0x03246294 MOV X5, X31
	0x03246298 LDP X30, X25, [X31], #0x40
	0x0324629C B 0x33FBF60
	0x032462A0 BL 0x1C16F20
	0x032462A4 STR X30, [X31 - 0x10]!
	0x032462A8 LDR X8, [X0 + 0x10]
	0x032462AC CBZ X8, 0x32462CC
	0x032462B0 LDR X9, [X0 + 0x20]
	0x032462B4 SUB X9, X9, W2, SXTW
	0x032462B8 CMP X9, X8
	0x032462BC B.LS 0x32462E0
	0x032462C0 ADD X9, X8, 0x1
	0x032462C4 STR X9, [X0 + 0x10]
	0x032462C8 STRB W1, [X8]
	0x032462CC LDR W8, [X0 + 0x40]
	0x032462D0 ADD W8, W8, 0x1
	0x032462D4 STR W8, [X0 + 0x40]
	0x032462D8 MOVZ W0, 0x1
	0x032462DC B 0x32462EC
	0x032462E0 MOVZ W1, 0x1
	0x032462E4 BL 0x32462F4
	0x032462E8 MOV W0, W31
	0x032462EC LDR X30, [X31], #0x10
	0x032462F0 RET
	0x032462F4 STR X30, [X31 - 0x20]!
	0x032462F8 STP X20, X19, [X31 + 0x10]
	0x032462FC MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Move X0, 0xEAE000
	007 Move X0, [X0+2512]
	008 Call 0x1C17D08
	009 Move W1, 2
	010 Call 0x1C17D6C
	011 Move X8, [X19]
	012 Move X20, X0
	013 Move X0, X19
	014 Move X9, [X8+440]
	015 Move X1, [X8+448]
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move X21, X0
	018 Move X0, X20
	019 Call 0x19913C0
	020 Move X0, X20
	021 Move X1, X21
	022 Call 0x19990B4
	023 Move X0, X20
	024 Move X1, X31
	025 Move X2, X21
	026 Call 0x1994444
	027 Move X19, [X19+48]
	028 Move X0, X19
	029 Call 0x19913C0
	030 Move X0, X19
	031 Move X1, X31
	032 Call "il2cpp_vm_object_is_inst", X0
	033 Move X19, X0
	034 Move X0, X20
	035 Call 0x19913C0
	036 Move X0, X20
	037 Move X1, X19
	038 Call 0x19990B4
	039 Move W1, 1
	040 Move X0, X20
	041 Move X2, X19
	042 Call 0x1994444
	043 Move X0, 0xEDD000
	044 Move X0, [X0+2808]
	045 Call 0x1C17D08
	046 Move X1, X20
	047 Move X2, X31
	048 Call Environment.GetResourceString, X0, X1
	049 Move X19, X0
	050 Move X0, 0xEB6000
	051 Move X0, [X0+1400]
	052 Call 0x1C17D08
	053 Call 0x1C17F10
	054 Move X20, X0
	055 Move X0, 0xEDD000
	056 Move X0, [X0+728]
	057 Call 0x1C17D08
	058 Move X2, X0
	059 Move X0, X20
	060 Move X1, X19
	061 Move X3, X31
	062 Call ArgumentException..ctor, X0, X1, X2
	063 Move X0, 0xEDD000
	064 Move X0, [X0+2816]
	065 Call 0x1C17D08
	066 Move X1, X0
	067 Move X0, X20
	068 Call 0x1C17DEC

Method: System.Void ThrowCharsOverflow(System.Text.DecoderNLS decoder, System.Boolean nothingDecoded)

Disassembly:
	0x03246300 LDR X0, [X0 + 0x58]
	0x03246304 CBZ X0, 0x324636C
	0x03246308 LDRB W8, [X0 + 0x2A]
	0x0324630C MOV W20, W1
	0x03246310 CBZ W8, 0x3246324
	0x03246314 LDR X8, [X0]
	0x03246318 LDP X9, X1, [X8 + 0x1A8]
	0x0324631C BLR X9
	0x03246320 B 0x3246338
	0x03246324 LDP X8, X9, [X19 + 0x28]
	0x03246328 CMP X8, X9
	0x0324632C B.LS 0x3246338
	0x03246330 SUB X8, X8, 0x2
	0x03246334 STR X8, [X19 + 0x28]
	0x03246338 TBZ X20, 0x0, 0x3246360
	0x0324633C LDR X0, [X19 + 0x48]
	0x03246340 CBZ X0, 0x324636C
	0x03246344 LDP X9, X8, [X19 + 0x10]
	0x03246348 LDR X1, [X19 + 0x50]
	0x0324634C LDP X20, X19, [X31 + 0x10]
	0x03246350 CMP X9, X8
	0x03246354 CSET W2, EQ
	0x03246358 LDR X30, [X31], #0x20
	0x0324635C B 0x3245184
	0x03246360 LDP X20, X19, [X31 + 0x10]
	0x03246364 LDR X30, [X31], #0x20
	0x03246368 RET
	0x0324636C BL 0x1C16F20
	0x03246370 MOV W2, W31
	0x03246374 B 0x32462A4

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Compare X1, 0
	004 JumpIfEqual {37}
	005 Move W8, [X1+41]
	006 And W9, W2, 1
	007 Or W8, W8, W9
	008 Compare W8, 0
	009 JumpIfNotEqual {16}
	010 Move X30, [X31+16]
	011 Move X0, X1
	012 Move X1, X31
	013 Add X31, X31, 32
	014 Call DecoderNLS.ClearMustFlush, X0
	015 Return 
	016 Move [X31+24], X0
	017 Move X0, X1
	018 Move [X31+8], X1
	019 Move X1, X31
	020 Call Decoder.get_InternalHasFallbackBuffer, X0
	021 Move X8, [X31+8]
	022 Move W9, W0
	023 Move X0, [X31+24]
	024 Move TEMP, X9
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {37}
	028 Move X0, X8
	029 Move X1, X31
	030 Call Decoder.get_FallbackBuffer, X0
	031 Compare X0, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17F20
	034 Move X1, X31
	035 Call DecoderFallbackBuffer.InternalReset, X0
	036 Move X0, [X31+24]
	037 Call Encoding.ThrowCharsOverflow, X0

Method: System.Int32 GetBytes(System.ReadOnlySpan`1<System.Char> chars, System.Span`1<System.Byte> bytes)

Disassembly:
	0x03246378 MOV W3, W31
	0x0324637C B 0x3246380
	0x03246380 STP X30, X21, [X31 - 0x20]!
	0x03246384 STP X20, X19, [X31 + 0x10]
	0x03246388 MOV W20, W2
	0x0324638C ADD W2, W3, 0x1
	0x03246390 MOV W19, W3
	0x03246394 MOV X21, X0
	0x03246398 BL 0x32462A4
	0x0324639C TBZ X0, 0x0, 0x32463B8
	0x032463A0 MOV W1, W20
	0x032463A4 MOV W2, W19
	0x032463A8 LDP X20, X19, [X31 + 0x10]
	0x032463AC MOV X0, X21
	0x032463B0 LDP X30, X21, [X31], #0x20
	0x032463B4 B 0x32462A4
	0x032463B8 LDP X20, X19, [X31 + 0x10]
	0x032463BC MOV W0, W31
	0x032463C0 LDP X30, X21, [X31], #0x20
	0x032463C4 RET
	0x032463C8 STP X30, X19, [X31 - 0x10]!
	0x032463CC MOV X19, X0
	0x032463D0 LDR X0, [X0 + 0x58]
	0x032463D4 CBZ X0, 0x324640C
	0x032463D8 LDR X8, [X0]
	0x032463DC LDP X9, X1, [X8 + 0x1B8]
	0x032463E0 BLR X9
	0x032463E4 CMP W0, 0x0
	0x032463E8 B.LE 0x32463F4
	0x032463EC MOVZ W0, 0x1
	0x032463F0 B 0x3246404
	0x032463F4 LDR X8, [X19 + 0x28]
	0x032463F8 LDR X9, [X19 + 0x38]
	0x032463FC CMP X8, X9
	0x03246400 CSET W0, CC
	0x03246404 LDP X30, X19, [X31], #0x10
	0x03246408 RET
	0x0324640C BL 0x1C16F20
	0x03246410 STP X30, X19, [X31 - 0x10]!
	0x03246414 MOV X19, X0
	0x03246418 LDR X0, [X0 + 0x58]
	0x0324641C CBZ X0, 0x324645C
	0x03246420 MOV X1, X31
	0x03246424 BL 0x33FBF7C
	0x03246428 ANDS W31, W0, 0xFFFF
	0x0324642C B.NE 0x3246454
	0x03246430 LDR X8, [X19 + 0x28]
	0x03246434 LDR X9, [X19 + 0x38]
	0x03246438 CMP X8, X9
	0x0324643C B.CS 0x3246450
	0x03246440 ADD X9, X8, 0x2
	0x03246444 STR X9, [X19 + 0x28]
	0x03246448 LDRH W0, [X8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0x1197000
	010 Move X24, 0xEDD000
	011 Move W8, [X25+1108]
	012 Move X24, [X24+2824]
	013 Move X19, X4
	014 Move X21, X3
	015 Move X20, X2
	016 Move X23, X1
	017 Move X22, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {36}
	022 Move X0, 0xEDD000
	023 Move X0, [X0+2832]
	024 Call 0x1C17CF4
	025 Move X0, 0xEDD000
	026 Move X0, [X0+2824]
	027 Call 0x1C17CF4
	028 Move X0, 0xEDD000
	029 Move X0, [X0+40]
	030 Call 0x1C17CF4
	031 Move X0, 0xEDD000
	032 Move X0, [X0+2344]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X25+1108], W8
	036 Move X0, [X24]
	037 Move X24, 0xEDD000
	038 Move X8, [X0+56]
	039 Move X24, [X24+2832]
	040 Compare X8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C5D6E0
	043 Move X0, [X24]
	044 Move X8, [X0+56]
	045 Compare X8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C5D6E0
	048 Move X8, [X22]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 NotImplemented "Instruction CSINC not yet implemented."
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X6, [X8+664]
	053 Move X5, [X8+672]
	054 NotImplemented "Instruction CSINC not yet implemented."
	055 Move X0, X22
	056 Move W2, W20
	057 Move W4, W19
	058 Move X20, [X31+48]
	059 Move X19, [X31+56]
	060 Move X22, [X31+32]
	061 Move X21, [X31+40]
	062 Move X24, [X31+16]
	063 Move X23, [X31+24]
	064 Move X30, [X31+64]
	065 Move X25, [X31+72]
	066 CallNoReturn X6

