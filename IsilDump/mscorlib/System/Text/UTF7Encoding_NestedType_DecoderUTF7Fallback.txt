Type: System.Text.UTF7Encoding/DecoderUTF7Fallback

Method: System.Void .ctor()

Disassembly:
	0x032396CC LDR X0, [X8]
	0x032396D0 LDP X30, X23, [X31], #0x30

ISIL:
	001 Move X1, X31
	002 Call DecoderFallback..ctor, X0
	003 Return 

Method: System.Text.DecoderFallbackBuffer CreateFallbackBuffer()

Disassembly:
	0x0323B12C MOV X19, X0
	0x0323B130 ADRP X0, 0xEE7000
	0x0323B134 LDR X0, [X0 + 0x308]
	0x0323B138 BL 0x1C16D08
	0x0323B13C MOV X20, X0
	0x0323B140 ADRP X0, 0xEE7000
	0x0323B144 LDR X0, [X0 + 0xE0]
	0x0323B148 BL 0x1C16D08
	0x0323B14C MOV X2, X0
	0x0323B150 MOV X0, X19
	0x0323B154 MOV X1, X20
	0x0323B158 MOV X3, X31
	0x0323B15C BL 0x3311888
	0x0323B160 ADRP X0, 0xEE7000
	0x0323B164 LDR X0, [X0 + 0x808]
	0x0323B168 BL 0x1C16D08
	0x0323B16C MOV X1, X0
	0x0323B170 MOV X0, X19
	0x0323B174 BL 0x1C16DEC
	0x0323B178 STR X30, [X31 - 0x20]!
	0x0323B17C STP X20, X19, [X31 + 0x10]
	0x0323B180 CBZ X1, 0x323B1AC
	0x0323B184 CBZ X3, 0x323B1AC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x11A2000
	005 Move X20, 0xEE8000
	006 Move W8, [X19+1024]
	007 Move X20, [X20+1976]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xEE8000
	013 Move X0, [X0+1976]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1024], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move TEMP, 0
	020 Not TEMP
	021 Move W8, TEMP
	022 Move X1, X31
	023 Move X19, X0
	024 Move [X0+36], W8
	025 Call DecoderFallbackBuffer..ctor, X0
	026 Move X0, X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Return X0

Method: System.Int32 get_MaxCharCount()

Disassembly:
	0x0323B198 MOV X5, X31
	0x0323B19C LDR X7, [X8 + 0x308]

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Boolean Equals(System.Object value)

Disassembly:
	0x0323B1A0 LDR X6, [X8 + 0x310]
	0x0323B1A4 LDR X30, [X31], #0x20
	0x0323B1A8 BR X7
	0x0323B1AC ADRP X8, 0xEE7000
	0x0323B1B0 ADRP X9, 0xEE7000
	0x0323B1B4 LDR X8, [X8 + 0x2D8]
	0x0323B1B8 LDR X9, [X9 + 0x308]
	0x0323B1BC CMP X1, 0x0
	0x0323B1C0 CSEL X0, X9, X8, EQ
	0x0323B1C4 BL 0x1C16D08
	0x0323B1C8 MOV X19, X0
	0x0323B1CC ADRP X0, 0xEBD000
	0x0323B1D0 LDR X0, [X0 + 0x528]
	0x0323B1D4 BL 0x1C16D08
	0x0323B1D8 BL 0x1C16F10
	0x0323B1DC MOV X20, X0
	0x0323B1E0 ADRP X0, 0xEE7000
	0x0323B1E4 LDR X0, [X0 + 0x2E0]
	0x0323B1E8 BL 0x1C16D08
	0x0323B1EC MOV X2, X0
	0x0323B1F0 MOV X0, X20
	0x0323B1F4 MOV X1, X19
	0x0323B1F8 MOV X3, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11A2000
	005 Move W8, [X20+1025]
	006 Move X19, X1
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xEE8000
	012 Move X0, [X0+1824]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1025], W8
	016 Compare X19, 0
	017 JumpIfEqual {24}
	018 Move X8, 0xEE8000
	019 Move X8, [X8+1824]
	020 Move X9, [X19]
	021 Move X8, [X8]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 NotImplemented "Instruction CSET not yet implemented."
	024 Move W0, W31
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x0323B1FC BL 0x3315F7C
	0x0323B200 B 0x323B258

ISIL:
	001 Move W0, 984
	002 Return X0

