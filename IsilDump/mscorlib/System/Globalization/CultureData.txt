Type: System.Globalization.CultureData

Method: System.Void .ctor(System.String name)

Disassembly:
	0x03340FFC BL 0x1C16CF4
	0x03341000 MOVZ W8, 0x1
	0x03341004 STRB W8, [X20 + 0xD6D]
	0x03341008 LDR X0, [X19 + 0x20]
	0x0334100C CBNZ X0, 0x3341078
	0x03341010 ADRP X20, 0xDE1000
	0x03341014 LDR X20, [X20 + 0x9E0]
	0x03341018 LDR X0, [X20]
	0x0334101C LDR W8, [X0 + 0xE0]
	0x03341020 CBNZ W8, 0x334102C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+88], X19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Globalization.CultureData get_Invariant()

Disassembly:
	0x0333CD94 STP X22, X21, [X31 + 0x20]
	0x0333CD98 STP X20, X19, [X31 + 0x30]
	0x0333CD9C ADRP X21, 0x10A0000
	0x0333CDA0 LDRB W8, [X21 + 0xD3B]
	0x0333CDA4 MOV X19, X1
	0x0333CDA8 MOV X20, X0
	0x0333CDAC TBNZ X8, 0x0, 0x333CDC4
	0x0333CDB0 ADRP X0, 0xDB9000
	0x0333CDB4 LDR X0, [X0 + 0x278]
	0x0333CDB8 BL 0x1C16CF4
	0x0333CDBC MOVZ W8, 0x1
	0x0333CDC0 STRB W8, [X21 + 0xD3B]
	0x0333CDC4 CBZ X19, 0x333CE6C
	0x0333CDC8 LDR W0, [X19 + 0x10]
	0x0333CDCC CBZ W0, 0x333CDFC
	0x0333CDD0 MOV X1, X31
	0x0333CDD4 BL 0x32277A4
	0x0333CDD8 MOV X21, X0
	0x0333CDDC MOV X0, X31
	0x0333CDE0 BL 0x32C1424
	0x0333CDE4 MOV W22, W0
	0x0333CDE8 CBZ X21, 0x333CE14
	0x0333CDEC MOV X0, X31
	0x0333CDF0 BL 0x32C1424
	0x0333CDF4 ADD X23, X21, W0, SXTW
	0x0333CDF8 B 0x333CE18
	0x0333CDFC ADRP X8, 0xDB9000
	0x0333CE00 LDR X8, [X8 + 0x278]
	0x0333CE04 LDR X8, [X8]
	0x0333CE08 LDR X8, [X8 + 0xB8]
	0x0333CE0C LDR X21, [X8]
	0x0333CE10 B 0x333CE54
	0x0333CE14 MOV X23, X21
	0x0333CE18 LDR W8, [X19 + 0x10]
	0x0333CE1C CMP W8, 0x1
	0x0333CE20 B.LT 0x333CE54
	0x0333CE24 MOV W24, W31
	0x0333CE28 ADD X22, X19, W22, SXTW
	0x0333CE2C LDR X8, [X20]
	0x0333CE30 MOV X0, X20
	0x0333CE34 LDP X9, X2, [X8 + 0x1A8]
	0x0333CE38 LDRH W1, [X22], #0x2
	0x0333CE3C BLR X9
	0x0333CE40 STRH W0, [X23], #0x2
	0x0333CE44 LDR W8, [X19 + 0x10]
	0x0333CE48 ADD W24, W24, 0x1
	0x0333CE4C CMP W24, W8
	0x0333CE50 B.LT 0x333CE2C
	0x0333CE54 MOV X0, X21
	0x0333CE58 LDP X20, X19, [X31 + 0x30]
	0x0333CE5C LDP X22, X21, [X31 + 0x20]
	0x0333CE60 LDP X24, X23, [X31 + 0x10]
	0x0333CE64 LDR X30, [X31], #0x40
	0x0333CE68 RET
	0x0333CE6C BL 0x1C16F20
	0x0333CE70 STR X30, [X31 - 0x20]!
	0x0333CE74 STP X20, X19, [X31 + 0x10]
	0x0333CE78 AND W8, W1, 0xFFFF
	0x0333CE7C MOV W19, W1
	0x0333CE80 CMP W8, 0x7F
	0x0333CE84 MOV X20, X0
	0x0333CE88 B.HI 0x333CEB8
	0x0333CE8C MOV X0, X20
	0x0333CE90 BL 0x333C798
	0x0333CE94 TBZ X0, 0x0, 0x333CEB8
	0x0333CE98 SUB W8, W19, 0x61
	0x0333CE9C AND W8, W8, 0xFFFF
	0x0333CEA0 AND W9, W19, 0xFFFFFFDF
	0x0333CEA4 CMP W8, 0x19
	0x0333CEA8 CSEL W0, W19, W9, HI
	0x0333CEAC LDP X20, X19, [X31 + 0x10]
	0x0333CEB0 LDR X30, [X31], #0x20
	0x0333CEB4 RET
	0x0333CEB8 MOV X0, X20
	0x0333CEBC MOV W1, W19
	0x0333CEC0 LDP X20, X19, [X31 + 0x10]
	0x0333CEC4 LDR X30, [X31], #0x20
	0x0333CEC8 B 0x333CEE4
	0x0333CECC SUB W8, W0, 0x61
	0x0333CED0 AND W8, W8, 0xFFFF
	0x0333CED4 AND W9, W0, 0xFFFFFFDF
	0x0333CED8 CMP W8, 0x19
	0x0333CEDC CSEL W0, W0, W9, HI
	0x0333CEE0 RET
	0x0333CEE4 STP X30, X21, [X31 - 0x20]!
	0x0333CEE8 STP X20, X19, [X31 + 0x10]
	0x0333CEEC ADRP X21, 0x10A0000
	0x0333CEF0 LDRB W8, [X21 + 0xD3C]
	0x0333CEF4 MOV W19, W1
	0x0333CEF8 MOV X20, X0
	0x0333CEFC TBNZ X8, 0x0, 0x333CF14
	0x0333CF00 ADRP X0, 0xDEC000
	0x0333CF04 LDR X0, [X0 + 0xB90]
	0x0333CF08 BL 0x1C16CF4
	0x0333CF0C MOVZ W8, 0x1
	0x0333CF10 STRB W8, [X21 + 0xD3C]
	0x0333CF14 LDR X8, [X20 + 0x28]
	0x0333CF18 CBZ X8, 0x333D374
	0x0333CF1C LDR X0, [X8 + 0x58]
	0x0333CF20 MOV X1, X31
	0x0333CF24 BL 0x32277A8
	0x0333CF28 TBZ X0, 0x0, 0x333D00C
	0x0333CF2C SUB W8, W19, 0xE0
	0x0333CF30 AND W8, W8, 0xFFFF
	0x0333CF34 CMP W8, 0x4A6
	0x0333CF38 B.LS 0x333D044
	0x0333CF3C MOVN W8, 0x1E00
	0x0333CF40 ADD W8, W19, W8
	0x0333CF44 AND W8, W8, 0xFFFF
	0x0333CF48 CMP W8, 0x1F2
	0x0333CF4C B.LS 0x333D0A8
	0x0333CF50 MOVN W8, 0x216F
	0x0333CF54 ADD W8, W19, W8
	0x0333CF58 AND W8, W8, 0xFFFF
	0x0333CF5C CMP W8, 0x14
	0x0333CF60 B.LS 0x333D120
	0x0333CF64 MOVN W8, 0x24CF
	0x0333CF68 ADD W8, W19, W8
	0x0333CF6C AND W8, W8, 0xFFFF
	0x0333CF70 CMP W8, 0x19
	0x0333CF74 B.LS 0x333D1BC
	0x0333CF78 MOVN W8, 0x2C2F
	0x0333CF7C ADD W8, W19, W8
	0x0333CF80 AND W8, W8, 0xFFFF
	0x0333CF84 CMP W8, 0xB3
	0x0333CF88 B.LS 0x333D210
	0x0333CF8C MOVN W8, 0x2CFF
	0x0333CF90 ADD W8, W19, W8
	0x0333CF94 AND W8, W8, 0xFFFF
	0x0333CF98 CMP W8, 0x25
	0x0333CF9C B.LS 0x333D2A4
	0x0333CFA0 MOVZ W8, 0x59BF
	0x0333CFA4 ADD W8, W19, W8
	0x0333CFA8 AND W8, W8, 0xFFFF
	0x0333CFAC CMP W8, 0x56
	0x0333CFB0 B.LS 0x333D2D8
	0x0333CFB4 MOVZ W8, 0x58DD
	0x0333CFB8 ADD W8, W19, W8
	0x0333CFBC AND W8, W8, 0xFFFF
	0x0333CFC0 CMP W8, 0x69
	0x0333CFC4 B.LS 0x333D30C
	0x0333CFC8 ADD W8, W19, 0xBF
	0x0333CFCC AND W8, W8, 0xFFFF
	0x0333CFD0 CMP W8, 0x19
	0x0333CFD4 B.LS 0x333D35C
	0x0333CFD8 AND W8, W19, 0xFFFF
	0x0333CFDC MOVZ W9, 0x1D79
	0x0333CFE0 CMP W8, W9
	0x0333CFE4 B.EQ 0x333D364
	0x0333CFE8 MOVZ W9, 0x1D7D
	0x0333CFEC CMP W8, W9
	0x0333CFF0 B.EQ 0x333D36C
	0x0333CFF4 MOVZ W9, 0x214E
	0x0333CFF8 CMP W8, W9
	0x0333CFFC MOV W0, W19
	0x0333D000 B.NE 0x333D350
	0x0333D004 MOVZ W0, 0x2132
	0x0333D008 B 0x333D350
	0x0333D00C AND W8, W19, 0xFFFF
	0x0333D010 CMP W8, 0x1F2
	0x0333D014 B.HI 0x333D07C
	0x0333D018 CMP W8, 0x17F
	0x0333D01C B.HI 0x333D0DC
	0x0333D020 AND W8, W19, 0xFFFF
	0x0333D024 CMP W8, 0xB5
	0x0333D028 B.EQ 0x333D1F0
	0x0333D02C CMP W8, 0x131
	0x0333D030 B.EQ 0x333D1F8
	0x0333D034 CMP W8, 0x17F
	0x0333D038 B.NE 0x333D254
	0x0333D03C MOVZ W0, 0x53
	0x0333D040 B 0x333D350
	0x0333D044 ADRP X20, 0xDEB000
	0x0333D048 LDR X20, [X20 + 0xB90]
	0x0333D04C LDR X0, [X20]
	0x0333D050 LDR W8, [X0 + 0xE0]
	0x0333D054 CBNZ W8, 0x333D060
	0x0333D058 BL 0x1C16DFC
	0x0333D05C LDR X0, [X20]
	0x0333D060 LDR X8, [X0 + 0xB8]
	0x0333D064 LDR X8, [X8]
	0x0333D068 CBZ X8, 0x333D374
	0x0333D06C LDR W10, [X8 + 0x18]
	0x0333D070 AND X9, X19, 0xFFFF
	0x0333D074 SUB X9, X9, 0xE0
	0x0333D078 B 0x333D340
	0x0333D07C CMP W8, 0x3F0
	0x0333D080 B.HI 0x333D0FC
	0x0333D084 AND W8, W19, 0xFFFF
	0x0333D088 CMP W8, 0x3C2
	0x0333D08C B.HI 0x333D154
	0x0333D090 CMP W8, 0x345
	0x0333D094 B.EQ 0x333D1B4
	0x0333D098 CMP W8, 0x3C2
	0x0333D09C B.NE 0x333D254

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0x10A1000
	007 Move X22, 0xDED000
	008 Move W8, [X19+3422]
	009 Move X22, [X22+2816]
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {64}
	014 Move X0, 0xDED000
	015 Move X0, [X0+2824]
	016 Call 0x1C17CF4
	017 Move X0, 0xDED000
	018 Move X0, [X0+1440]
	019 Call 0x1C17CF4
	020 Move X0, 0xDED000
	021 Move X0, [X0+2816]
	022 Call 0x1C17CF4
	023 Move X0, 0xDB9000
	024 Move X0, [X0+3672]
	025 Call 0x1C17CF4
	026 Move X0, 0xDB8000
	027 Move X0, [X0+2760]
	028 Call 0x1C17CF4
	029 Move X0, 0xDED000
	030 Move X0, [X0+2832]
	031 Call 0x1C17CF4
	032 Move X0, 0xDED000
	033 Move X0, [X0+2840]
	034 Call 0x1C17CF4
	035 Move X0, 0xDC1000
	036 Move X0, [X0+2440]
	037 Call 0x1C17CF4
	038 Move X0, 0xDED000
	039 Move X0, [X0+2848]
	040 Call 0x1C17CF4
	041 Move X0, 0xDED000
	042 Move X0, [X0+2856]
	043 Call 0x1C17CF4
	044 Move X0, 0xDED000
	045 Move X0, [X0+2864]
	046 Call 0x1C17CF4
	047 Move X0, 0xDBA000
	048 Move X0, [X0+928]
	049 Call 0x1C17CF4
	050 Move X0, 0xDED000
	051 Move X0, [X0+2872]
	052 Call 0x1C17CF4
	053 Move X0, 0xDED000
	054 Move X0, [X0+2880]
	055 Call 0x1C17CF4
	056 Move X0, 0xDED000
	057 Move X0, [X0+2888]
	058 Call 0x1C17CF4
	059 Move X0, 0xDB8000
	060 Move X0, [X0+2440]
	061 Call 0x1C17CF4
	062 Move W8, 1
	063 Move [X19+3422], W8
	064 Move X0, [X22]
	065 Move X8, [X0+184]
	066 Move X8, [X8]
	067 Compare X8, 0
	068 JumpIfNotEqual {202}
	069 Call 0x1C17F10
	070 Move X8, 0xDB8000
	071 Move X8, [X8+2440]
	072 Move X1, X31
	073 Move X19, X0
	074 Move X20, [X8]
	075 Call Object..ctor, X0
	076 Move [X19+88], X20
	077 Move X8, 0xDED000
	078 Move X8, [X8+2880]
	079 Move X9, 0xDED000
	080 Move X21, 0xDB8000
	081 Move W1, 1
	082 Move X8, [X8]
	083 Move X9, [X9+2872]
	084 Move [X19+80], X8
	085 Move X8, [X9]
	086 Move X9, 0xDED000
	087 Move X9, [X9+2888]
	088 Move [X19+16], X8
	089 Move X10, [X9]
	090 Move X9, 0xDC1000
	091 Move X9, [X9+2440]
	092 Move X8, [X9]
	093 Move [X19+24], X10
	094 Move [X19+32], X8
	095 Move X21, [X21+2760]
	096 Move X0, [X21]
	097 Call 0x1C17D6C
	098 Compare X0, 0
	099 JumpIfEqual {210}
	100 Move W8, [X0+24]
	101 Move X20, X0
	102 Compare W8, 0
	103 JumpIfEqual {209}
	104 Move X8, 0xDED000
	105 Move X8, [X8+2848]
	106 Move X8, [X8]
	107 Move [X20+32], X8
	108 Call 0x1C17D44
	109 Move [X19+40], X20
	110 Move X0, [X21]
	111 Move W1, 4
	112 Call 0x1C17D6C
	113 Compare X0, 0
	114 JumpIfEqual {210}
	115 Move W8, [X0+24]
	116 Move X20, X0
	117 Compare W8, 0
	118 JumpIfEqual {209}
	119 Move X9, 0xDED000
	120 Move X9, [X9+2840]
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Move X9, [X9]
	123 Move [X20+32], X9
	124 Move X9, 0xDED000
	125 Move X9, [X9+2832]
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Move X9, [X9]
	128 Move [X20+40], X9
	129 Move X9, 0xDED000
	130 Move X9, [X9+2856]
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move X9, [X9]
	133 Move [X20+48], X9
	134 Move X8, 0xDED000
	135 Move X8, [X8+2864]
	136 Move X8, [X8]
	137 Move [X20+56], X8
	138 Call 0x1C17D44
	139 Move [X19+48], X20
	140 Move [X19+56], X31
	141 Move X8, 0xDB9000
	142 Move X8, [X8+3672]
	143 Move W1, 1
	144 Move X0, [X8]
	145 Call 0x1C17D6C
	146 Compare X0, 0
	147 JumpIfEqual {210}
	148 Move W8, [X0+24]
	149 Move X20, X0
	150 Compare W8, 0
	151 JumpIfEqual {209}
	152 Move W8, 1
	153 Move [X20+32], W8
	154 Call 0x1C17D44
	155 Move [X19+64], X20
	156 Move X8, 0xDED000
	157 Move X8, [X8+2824]
	158 Move W1, 23
	159 Move X0, [X8]
	160 Call 0x1C17D6C
	161 Move [X19+72], X0
	162 Move X21, 0xDED000
	163 Move X21, [X21+1440]
	164 Move X20, X0
	165 Move X0, [X21]
	166 Move W8, [X0+224]
	167 Compare W8, 0
	168 JumpIfNotEqual {171}
	169 Call 0x1C17DFC
	170 Move X0, [X21]
	171 Compare X20, 0
	172 JumpIfEqual {210}
	173 Move X8, [X0+184]
	174 Move X21, [X8]
	175 Compare X21, 0
	176 JumpIfEqual {183}
	177 Move X8, [X20]
	178 Move X0, X21
	179 Move X1, [X8+64]
	180 Call 0x1C17E00
	181 Compare X0, 0
	182 JumpIfEqual {211}
	183 Move W8, [X20+24]
	184 Compare W8, 0
	185 JumpIfEqual {209}
	186 Move X8, -42270720
	187 Move V0, [X8+59]
	188 Move [X20+32], X21
	189 Move X8, 0xDB9000
	190 Move X1, X19
	191 Move [X19+108], V0
	192 Move X8, [X8+928]
	193 Move X2, X31
	194 Move X8, [X8]
	195 Move [X19+128], X8
	196 Move X8, [X22]
	197 Move X0, [X8+184]
	198 Call 0x1C25138
	199 Move X8, [X22]
	200 Move X8, [X8+184]
	201 Move X8, [X8]
	202 Move X20, [X31+32]
	203 Move X19, [X31+40]
	204 Move X22, [X31+16]
	205 Move X21, [X31+24]
	206 Move X0, X8
	207 Move X30, [X31+48]
	208 Return X0
	209 Call 0x1C17F28
	210 Call 0x1C17F20
	211 Call 0x1C17F44
	212 Move X1, X31
	213 Call 0x1C17DEC

Method: System.Globalization.CultureData GetCultureData(System.String cultureName, System.Boolean useUserOverride)

Disassembly:
	0x03341024 BL 0x1C16DFC
	0x03341028 LDR X0, [X20]
	0x0334102C LDR X8, [X0 + 0xB8]
	0x03341030 LDR X8, [X8 + 0x8]
	0x03341034 CBZ X8, 0x3341084
	0x03341038 LDRSW X9, [X19 + 0x10]
	0x0334103C LDR W10, [X8 + 0x18]
	0x03341040 CMP W9, W10
	0x03341044 B.CS 0x3341088
	0x03341048 ADRP X10, 0xDE7000
	0x0334104C LDR X10, [X10 + 0xC80]
	0x03341050 ADD X8, X8, X9, 0x4, LSL
	0x03341054 LDR X20, [X8 + 0x28]
	0x03341058 LDR X0, [X10]
	0x0334105C LDR W9, [X0 + 0xE0]
	0x03341060 CBNZ W9, 0x3341068
	0x03341064 BL 0x1C16DFC
	0x03341068 MOVZ W1, 0x1
	0x0334106C MOV X0, X20
	0x03341070 BL 0x3340E60
	0x03341074 STR X0, [X19 + 0x20]
	0x03341078 LDP X20, X19, [X31 + 0x10]
	0x0334107C LDR X30, [X31], #0x20
	0x03341080 RET
	0x03341084 BL 0x1C16F20
	0x03341088 BL 0x1C16F28
	0x0334108C STR X30, [X31 - 0x20]!
	0x03341090 STP X20, X19, [X31 + 0x10]
	0x03341094 ADRP X19, 0x109B000
	0x03341098 ADRP X20, 0xDBB000
	0x0334109C LDRB W8, [X19 + 0xD6E]
	0x033410A0 LDR X20, [X20 + 0x8D8]
	0x033410A4 TBNZ X8, 0x0, 0x33410C8
	0x033410A8 ADRP X0, 0xDBB000
	0x033410AC LDR X0, [X0 + 0x8D8]
	0x033410B0 BL 0x1C16CF4
	0x033410B4 ADRP X0, 0xDE7000
	0x033410B8 LDR X0, [X0 + 0xC80]
	0x033410BC BL 0x1C16CF4
	0x033410C0 MOVZ W8, 0x1
	0x033410C4 STRB W8, [X19 + 0xD6E]
	0x033410C8 LDR X0, [X20]
	0x033410CC MOVZ W1, 0x1
	0x033410D0 BL 0x1C16D6C
	0x033410D4 CBZ X0, 0x3341108
	0x033410D8 LDR W8, [X0 + 0x18]
	0x033410DC CBZ W8, 0x334110C
	0x033410E0 ADRP X8, 0xDE7000
	0x033410E4 LDR X8, [X8 + 0xC80]
	0x033410E8 MOVZ W9, 0x7C
	0x033410EC STRH W9, [X0 + 0x20]
	0x033410F0 LDP X20, X19, [X31 + 0x10]
	0x033410F4 LDR X8, [X8]
	0x033410F8 LDR X8, [X8 + 0xB8]
	0x033410FC STR X0, [X8]
	0x03341100 LDR X30, [X31], #0x20
	0x03341104 RET
	0x03341108 BL 0x1C16F20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x109C000
	007 Move X22, 0xDB5000
	008 Move W8, [X21+3423]
	009 Move X22, [X22+3144]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xDB5000
	017 Move X0, [X0+3144]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3423], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X21, X0
	024 And W2, W20, 1
	025 Move X1, X19
	026 Move W3, W31
	027 Call CultureInfo..ctor, X0, X1, X2, X3
	028 Compare X21, 0
	029 JumpIfEqual {37}
	030 Move X0, [X21+192]
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Return X0
	037 Call 0x1C17F20
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X19, X0
	040 Move X0, X19
	041 Call 0x3EB2AD0
	042 Move X19, X0
	043 Move X0, 0xDB9000
	044 Move X0, [X0+3264]
	045 Call 0x1C17D08
	046 Move X8, [X19]
	047 Move X1, [X8]
	048 Call 0x1C18270
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {55}
	053 Call 0x3EB2AE0
	054 Move X0, X31
	055 Move W0, 8
	056 Call 0x3EB2AF0
	057 Move X8, [X19]
	058 Move [X0], X8
	059 Move X1, 0xB74000
	060 Add X1, X1, 3672
	061 Move X2, X31
	062 Call 0x3EB2B00
	063 Move X19, X0
	064 Call 0x3EB2AE0
	065 Move X0, X19
	066 Call 0x1D2D690
	067 Call 0x1991590

Method: System.Globalization.CultureData GetCultureData(System.String cultureName, System.Boolean useUserOverride, System.Int32 datetimeIndex, System.Int32 calendarId, System.Int32 numberIndex, System.String iso2lang, System.Int32 ansiCodePage, System.Int32 oemCodePage, System.Int32 macCodePage, System.Int32 ebcdicCodePage, System.Boolean rightToLeft, System.String listSeparator)

Disassembly:
	0x03341118 ADRP X20, 0x109B000
	0x0334111C ADRP X19, 0xDE1000
	0x03341120 LDRB W8, [X20 + 0xD6F]
	0x03341124 LDR X19, [X19 + 0x9E0]
	0x03341128 TBNZ X8, 0x0, 0x3341140
	0x0334112C ADRP X0, 0xDE1000
	0x03341130 LDR X0, [X0 + 0x9E0]
	0x03341134 BL 0x1C16CF4
	0x03341138 MOVZ W8, 0x1
	0x0334113C STRB W8, [X20 + 0xD6F]
	0x03341140 LDR X0, [X19]
	0x03341144 LDR W8, [X0 + 0xE0]
	0x03341148 CBNZ W8, 0x3341154
	0x0334114C BL 0x1C16DFC
	0x03341150 LDR X0, [X19]
	0x03341154 LDR X8, [X0 + 0xB8]
	0x03341158 LDR X8, [X8]
	0x0334115C CBZ X8, 0x3341170
	0x03341160 LDR W0, [X8 + 0x18]
	0x03341164 LDP X20, X19, [X31 + 0x10]
	0x03341168 LDR X30, [X31], #0x20
	0x0334116C RET
	0x03341170 BL 0x1C16F20
	0x03341174 AND X1, X1, 0xFFFF
	0x03341178 RET
	0x0334117C AND X8, X1, 0xFFFF
	0x03341180 BFM X0, X8, 0x30, 0xF
	0x03341184 BFM X0, X3, 0x20, 0x1F
	0x03341188 MOV X1, X2
	0x0334118C RET
	0x03341190 STP X29, X30, [X31 - 0x60]!
	0x03341194 STP X28, X27, [X31 + 0x10]
	0x03341198 STP X26, X25, [X31 + 0x20]
	0x0334119C STP X24, X23, [X31 + 0x30]
	0x033411A0 STP X22, X21, [X31 + 0x40]
	0x033411A4 STP X20, X19, [X31 + 0x50]
	0x033411A8 ADRP X19, 0x109B000
	0x033411AC ADRP X20, 0xDE7000
	0x033411B0 LDRB W8, [X19 + 0xD70]
	0x033411B4 LDR X20, [X20 + 0xC88]
	0x033411B8 TBNZ X8, 0x0, 0x33425E0
	0x033411BC ADRP X0, 0xDE7000
	0x033411C0 LDR X0, [X0 + 0xC90]
	0x033411C4 BL 0x1C16CF4
	0x033411C8 ADRP X0, 0xDE7000
	0x033411CC LDR X0, [X0 + 0xC98]
	0x033411D0 BL 0x1C16CF4
	0x033411D4 ADRP X0, 0xDE7000
	0x033411D8 LDR X0, [X0 + 0xCA0]
	0x033411DC BL 0x1C16CF4
	0x033411E0 ADRP X0, 0xDB4000
	0x033411E4 LDR X0, [X0 + 0xB18]
	0x033411E8 BL 0x1C16CF4
	0x033411EC ADRP X0, 0xDE1000
	0x033411F0 LDR X0, [X0 + 0x9E0]
	0x033411F4 BL 0x1C16CF4
	0x033411F8 ADRP X0, 0xDE7000
	0x033411FC LDR X0, [X0 + 0xCA8]
	0x03341200 BL 0x1C16CF4
	0x03341204 ADRP X0, 0xDE7000
	0x03341208 LDR X0, [X0 + 0xC88]
	0x0334120C BL 0x1C16CF4
	0x03341210 ADRP X0, 0xDBF000
	0x03341214 LDR X0, [X0 + 0x2F0]
	0x03341218 BL 0x1C16CF4
	0x0334121C ADRP X0, 0xDE7000
	0x03341220 LDR X0, [X0 + 0xCB0]
	0x03341224 BL 0x1C16CF4
	0x03341228 ADRP X0, 0xDE7000

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, 0x109C000
	015 Move X27, [X31+136]
	016 Move W28, [X31+120]
	017 Move W29, [X31+112]
	018 Move W8, [X20+3424]
	019 Move W19, [X31+128]
	020 Move X21, X5
	021 Move W22, W4
	022 Move W23, W3
	023 Move W24, W2
	024 Move W26, W1
	025 Move X25, X0
	026 Move [X31+8], W6
	027 Move [X31+12], W7
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {37}
	032 Move X0, 0xDE8000
	033 Move X0, [X0+2816]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3424], W8
	037 Move X0, X25
	038 Move X1, X31
	039 Call String.IsNullOrEmpty, X0
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {59}
	044 Move X20, [X31+96]
	045 Move X19, [X31+104]
	046 Move X22, [X31+80]
	047 Move X21, [X31+88]
	048 Move X24, [X31+64]
	049 Move X23, [X31+72]
	050 Move X26, [X31+48]
	051 Move X25, [X31+56]
	052 Move X28, [X31+32]
	053 Move X27, [X31+40]
	054 Move X29, [X31+16]
	055 Move X30, [X31+24]
	056 Add X31, X31, 112
	057 Call CultureData.get_Invariant
	058 Return X0
	059 Move X8, 0xDE8000
	060 Move X8, [X8+2816]
	061 And W20, W26, 1
	062 And W19, W19, 1
	063 Move X0, [X8]
	064 Call 0x1C17F10
	065 Move X1, X31
	066 Move X26, X0
	067 Call Object..ctor, X0
	068 Move X0, X26
	069 Move W1, W24
	070 Move [X26+88], X25
	071 Call 0x1C4397C
	072 Move W9, [X31+8]
	073 Move W8, [X31+12]
	074 Move [X26+96], W20
	075 Move [X26+100], W23
	076 Move [X26+104], W22
	077 Move [X26+80], X21
	078 Move [X26+108], W9
	079 Move [X26+112], W8
	080 Move [X26+116], W29
	081 Move [X26+120], W28
	082 Move [X26+124], W19
	083 Move [X26+128], X27
	084 Move X0, X26
	085 Move X20, [X31+96]
	086 Move X19, [X31+104]
	087 Move X22, [X31+80]
	088 Move X21, [X31+88]
	089 Move X24, [X31+64]
	090 Move X23, [X31+72]
	091 Move X26, [X31+48]
	092 Move X25, [X31+56]
	093 Move X28, [X31+32]
	094 Move X27, [X31+40]
	095 Move X29, [X31+16]
	096 Move X30, [X31+24]
	097 Add X31, X31, 112
	098 Return X0

Method: System.Void fill_culture_data(System.Int32 datetimeIndex)

Disassembly:
	0x0334122C LDR X0, [X0 + 0xCB8]

ISIL:
	001 Call 0x1C4397C
	002 Return 

Method: System.Globalization.CalendarData GetCalendar(System.Int32 calendarId)

Disassembly:
	0x03341230 BL 0x1C16CF4
	0x03341234 ADRP X0, 0xDE7000
	0x03341238 LDR X0, [X0 + 0xCC0]
	0x0334123C BL 0x1C16CF4
	0x03341240 ADRP X0, 0xDE7000
	0x03341244 LDR X0, [X0 + 0xCC8]
	0x03341248 BL 0x1C16CF4
	0x0334124C ADRP X0, 0xDE7000
	0x03341250 LDR X0, [X0 + 0xCD0]
	0x03341254 BL 0x1C16CF4
	0x03341258 ADRP X0, 0xDE7000
	0x0334125C LDR X0, [X0 + 0xCD8]
	0x03341260 BL 0x1C16CF4
	0x03341264 ADRP X0, 0xDE7000
	0x03341268 LDR X0, [X0 + 0xCE0]
	0x0334126C BL 0x1C16CF4
	0x03341270 ADRP X0, 0xDE7000
	0x03341274 LDR X0, [X0 + 0xCE8]
	0x03341278 BL 0x1C16CF4
	0x0334127C ADRP X0, 0xDE7000
	0x03341280 LDR X0, [X0 + 0xCF0]
	0x03341284 BL 0x1C16CF4
	0x03341288 ADRP X0, 0xDE7000
	0x0334128C LDR X0, [X0 + 0xCF8]
	0x03341290 BL 0x1C16CF4
	0x03341294 ADRP X0, 0xDE7000
	0x03341298 LDR X0, [X0 + 0xD00]
	0x0334129C BL 0x1C16CF4
	0x033412A0 ADRP X0, 0xDE7000
	0x033412A4 LDR X0, [X0 + 0xD08]
	0x033412A8 BL 0x1C16CF4
	0x033412AC ADRP X0, 0xDE7000
	0x033412B0 LDR X0, [X0 + 0xD10]
	0x033412B4 BL 0x1C16CF4
	0x033412B8 ADRP X0, 0xDE7000
	0x033412BC LDR X0, [X0 + 0xD18]
	0x033412C0 BL 0x1C16CF4
	0x033412C4 ADRP X0, 0xDE7000
	0x033412C8 LDR X0, [X0 + 0xD20]
	0x033412CC BL 0x1C16CF4
	0x033412D0 ADRP X0, 0xDE7000
	0x033412D4 LDR X0, [X0 + 0xD28]
	0x033412D8 BL 0x1C16CF4
	0x033412DC ADRP X0, 0xDE7000
	0x033412E0 LDR X0, [X0 + 0xD30]
	0x033412E4 BL 0x1C16CF4
	0x033412E8 ADRP X0, 0xDE7000
	0x033412EC LDR X0, [X0 + 0xD38]
	0x033412F0 BL 0x1C16CF4
	0x033412F4 ADRP X0, 0xDE7000
	0x033412F8 LDR X0, [X0 + 0xD40]
	0x033412FC BL 0x1C16CF4
	0x03341300 ADRP X0, 0xDE7000
	0x03341304 LDR X0, [X0 + 0xD48]
	0x03341308 BL 0x1C16CF4
	0x0334130C ADRP X0, 0xDE7000
	0x03341310 LDR X0, [X0 + 0xD50]
	0x03341314 BL 0x1C16CF4
	0x03341318 ADRP X0, 0xDE7000
	0x0334131C LDR X0, [X0 + 0xD58]
	0x03341320 BL 0x1C16CF4
	0x03341324 ADRP X0, 0xDE7000
	0x03341328 LDR X0, [X0 + 0xD60]
	0x0334132C BL 0x1C16CF4
	0x03341330 ADRP X0, 0xDE7000
	0x03341334 LDR X0, [X0 + 0xD68]
	0x03341338 BL 0x1C16CF4
	0x0334133C ADRP X0, 0xDE7000
	0x03341340 LDR X0, [X0 + 0xD70]
	0x03341344 BL 0x1C16CF4

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x109C000
	010 Move W8, [X21+3425]
	011 Move W20, W1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xDE8000
	018 Move X0, [X0+2824]
	019 Call 0x1C17CF4
	020 Move X0, 0xDE8000
	021 Move X0, [X0+1440]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3425], W8
	025 Move X0, [X19+72]
	026 Compare X0, 0
	027 JumpIfNotEqual {36}
	028 Move X8, 0xDE8000
	029 Move X8, [X8+2824]
	030 Move W1, 23
	031 Move X0, [X8]
	032 Call 0x1C17D6C
	033 Move [X19+72], X0
	034 Compare X0, 0
	035 JumpIfEqual {82}
	036 Move W8, [X0+24]
	037 Subtract W24, W20, 1
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X25, W24
	040 Add X8, X0, X25
	041 Move X21, [X8+32]
	042 Compare X21, 0
	043 JumpIfNotEqual {71}
	044 Move X8, 0xDE8000
	045 Move X22, [X19+88]
	046 Move W23, [X19+96]
	047 Move X8, [X8+1440]
	048 Move X0, [X8]
	049 Call 0x1C17F10
	050 Move X1, X22
	051 Move W2, W20
	052 Move W3, W23
	053 Move X4, X31
	054 Move X21, X0
	055 Call CalendarData..ctor, X0, X1, X2, X3
	056 Move X19, [X19+72]
	057 Compare X19, 0
	058 JumpIfEqual {82}
	059 Compare X21, 0
	060 JumpIfEqual {67}
	061 Move X8, [X19]
	062 Move X0, X21
	063 Move X1, [X8+64]
	064 Call 0x1C17E00
	065 Compare X0, 0
	066 JumpIfEqual {83}
	067 Move W8, [X19+24]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Add X8, X19, X25
	070 Move [X8+32], X21
	071 Move X0, X21
	072 Move X20, [X31+48]
	073 Move X19, [X31+56]
	074 Move X22, [X31+32]
	075 Move X21, [X31+40]
	076 Move X24, [X31+16]
	077 Move X23, [X31+24]
	078 Move X30, [X31+64]
	079 Move X25, [X31+72]
	080 Return X0
	081 Call 0x1C17F28
	082 Call 0x1C17F20
	083 Call 0x1C17F44
	084 Move X1, X31
	085 Call 0x1C17DEC

Method: System.String[] get_LongTimes()

Disassembly:
	0x03341348 ADRP X0, 0xDE7000
	0x0334134C LDR X0, [X0 + 0xD78]
	0x03341350 BL 0x1C16CF4
	0x03341354 ADRP X0, 0xDE7000
	0x03341358 LDR X0, [X0 + 0xD80]
	0x0334135C BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+40]
	004 Call 0x1C17D44
	005 Move X0, X19
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return X0

Method: System.String[] get_ShortTimes()

Disassembly:
	0x03341360 ADRP X0, 0xDE7000
	0x03341364 LDR X0, [X0 + 0xD88]
	0x03341368 BL 0x1C16CF4
	0x0334136C ADRP X0, 0xDE7000
	0x03341370 LDR X0, [X0 + 0xD90]
	0x03341374 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+48]
	004 Call 0x1C17D44
	005 Move X0, X19
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return X0

Method: System.String get_SISO639LANGNAME()

Disassembly:
	0x03341378 ADRP X0, 0xDE7000
	0x0334137C LDR X0, [X0 + 0xD98]

ISIL:
	001 Move X0, [X0+80]
	002 Return X0

Method: System.Int32 get_IFIRSTDAYOFWEEK()

Disassembly:
	0x03341380 BL 0x1C16CF4
	0x03341384 ADRP X0, 0xDE7000

ISIL:
	001 Move W0, [X0+56]
	002 Return X0

Method: System.Int32 get_IFIRSTWEEKOFYEAR()

Disassembly:
	0x03341388 LDR X0, [X0 + 0xDA0]
	0x0334138C BL 0x1C16CF4

ISIL:
	001 Move W0, [X0+60]
	002 Return X0

Method: System.String get_SAM1159()

Disassembly:
	0x03341390 ADRP X0, 0xDE7000
	0x03341394 LDR X0, [X0 + 0xDA8]

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.String get_SPM2359()

Disassembly:
	0x03341398 BL 0x1C16CF4
	0x0334139C ADRP X0, 0xDE7000

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.String get_TimeSeparator()

Disassembly:
	0x033413A0 LDR X0, [X0 + 0xDB0]
	0x033413A4 BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Int32[] get_CalendarIds()

Disassembly:
	0x033413A8 ADRP X0, 0xDE7000
	0x033413AC LDR X0, [X0 + 0xDB8]
	0x033413B0 BL 0x1C16CF4
	0x033413B4 ADRP X0, 0xDE7000
	0x033413B8 LDR X0, [X0 + 0xDC0]
	0x033413BC BL 0x1C16CF4
	0x033413C0 ADRP X0, 0xDE7000
	0x033413C4 LDR X0, [X0 + 0xDC8]
	0x033413C8 BL 0x1C16CF4
	0x033413CC ADRP X0, 0xDE7000
	0x033413D0 LDR X0, [X0 + 0xDD0]
	0x033413D4 BL 0x1C16CF4
	0x033413D8 ADRP X0, 0xDE7000
	0x033413DC LDR X0, [X0 + 0xDD8]
	0x033413E0 BL 0x1C16CF4
	0x033413E4 ADRP X0, 0xDE7000
	0x033413E8 LDR X0, [X0 + 0xDE0]
	0x033413EC BL 0x1C16CF4
	0x033413F0 ADRP X0, 0xDE7000
	0x033413F4 LDR X0, [X0 + 0xDE8]
	0x033413F8 BL 0x1C16CF4
	0x033413FC ADRP X0, 0xDE7000
	0x03341400 LDR X0, [X0 + 0xDF0]
	0x03341404 BL 0x1C16CF4
	0x03341408 ADRP X0, 0xDE7000
	0x0334140C LDR X0, [X0 + 0xDF8]
	0x03341410 BL 0x1C16CF4
	0x03341414 ADRP X0, 0xDE7000
	0x03341418 LDR X0, [X0 + 0xE00]
	0x0334141C BL 0x1C16CF4
	0x03341420 ADRP X0, 0xDE7000
	0x03341424 LDR X0, [X0 + 0xE08]
	0x03341428 BL 0x1C16CF4
	0x0334142C ADRP X0, 0xDE7000
	0x03341430 LDR X0, [X0 + 0xE10]
	0x03341434 BL 0x1C16CF4
	0x03341438 ADRP X0, 0xDE7000
	0x0334143C LDR X0, [X0 + 0xE18]
	0x03341440 BL 0x1C16CF4
	0x03341444 ADRP X0, 0xDE7000
	0x03341448 LDR X0, [X0 + 0xE20]
	0x0334144C BL 0x1C16CF4
	0x03341450 ADRP X0, 0xDE7000
	0x03341454 LDR X0, [X0 + 0xE28]
	0x03341458 BL 0x1C16CF4
	0x0334145C ADRP X0, 0xDE7000
	0x03341460 LDR X0, [X0 + 0xE30]
	0x03341464 BL 0x1C16CF4
	0x03341468 ADRP X0, 0xDE7000
	0x0334146C LDR X0, [X0 + 0xE38]
	0x03341470 BL 0x1C16CF4
	0x03341474 ADRP X0, 0xDE7000
	0x03341478 LDR X0, [X0 + 0xE40]
	0x0334147C BL 0x1C16CF4
	0x03341480 ADRP X0, 0xDE7000
	0x03341484 LDR X0, [X0 + 0xE48]
	0x03341488 BL 0x1C16CF4
	0x0334148C ADRP X0, 0xDE7000
	0x03341490 LDR X0, [X0 + 0xE50]
	0x03341494 BL 0x1C16CF4
	0x03341498 ADRP X0, 0xDE7000
	0x0334149C LDR X0, [X0 + 0xE58]
	0x033414A0 BL 0x1C16CF4
	0x033414A4 ADRP X0, 0xDE7000
	0x033414A8 LDR X0, [X0 + 0xE60]
	0x033414AC BL 0x1C16CF4
	0x033414B0 ADRP X0, 0xDE7000
	0x033414B4 LDR X0, [X0 + 0xE68]
	0x033414B8 BL 0x1C16CF4
	0x033414BC ADRP X0, 0xDE7000
	0x033414C0 LDR X0, [X0 + 0xE70]
	0x033414C4 BL 0x1C16CF4
	0x033414C8 ADRP X0, 0xDE7000
	0x033414CC LDR X0, [X0 + 0xE78]
	0x033414D0 BL 0x1C16CF4
	0x033414D4 ADRP X0, 0xDE7000
	0x033414D8 LDR X0, [X0 + 0xE80]
	0x033414DC BL 0x1C16CF4
	0x033414E0 ADRP X0, 0xDE7000
	0x033414E4 LDR X0, [X0 + 0xE88]
	0x033414E8 BL 0x1C16CF4
	0x033414EC ADRP X0, 0xDE7000
	0x033414F0 LDR X0, [X0 + 0xE90]
	0x033414F4 BL 0x1C16CF4
	0x033414F8 ADRP X0, 0xDE7000
	0x033414FC LDR X0, [X0 + 0xE98]
	0x03341500 BL 0x1C16CF4
	0x03341504 ADRP X0, 0xDE7000
	0x03341508 LDR X0, [X0 + 0xEA0]
	0x0334150C BL 0x1C16CF4
	0x03341510 ADRP X0, 0xDE7000
	0x03341514 LDR X0, [X0 + 0xEA8]
	0x03341518 BL 0x1C16CF4
	0x0334151C ADRP X0, 0xDE7000
	0x03341520 LDR X0, [X0 + 0xEB0]
	0x03341524 BL 0x1C16CF4
	0x03341528 ADRP X0, 0xDE7000
	0x0334152C LDR X0, [X0 + 0xEB8]
	0x03341530 BL 0x1C16CF4
	0x03341534 ADRP X0, 0xDE7000
	0x03341538 LDR X0, [X0 + 0xEC0]
	0x0334153C BL 0x1C16CF4
	0x03341540 ADRP X0, 0xDE7000
	0x03341544 LDR X0, [X0 + 0xEC8]
	0x03341548 BL 0x1C16CF4
	0x0334154C ADRP X0, 0xDE7000
	0x03341550 LDR X0, [X0 + 0xED0]
	0x03341554 BL 0x1C16CF4
	0x03341558 ADRP X0, 0xDE7000
	0x0334155C LDR X0, [X0 + 0xED8]
	0x03341560 BL 0x1C16CF4
	0x03341564 ADRP X0, 0xDE7000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x109C000
	005 Move W8, [X20+3426]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {25}
	011 Move X0, 0xDB4000
	012 Move X0, [X0+3672]
	013 Call 0x1C17CF4
	014 Move X0, 0xDE1000
	015 Move X0, [X0+2736]
	016 Call 0x1C17CF4
	017 Move X0, 0xDE8000
	018 Move X0, [X0+3168]
	019 Call 0x1C17CF4
	020 Move X0, 0xDE8000
	021 Move X0, [X0+3176]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3426], W8
	025 Move X20, [X19+64]
	026 Call 0x1C17D44
	027 Compare X20, 0
	028 JumpIfEqual {30}
	029 Move X20, [X19+64]
	030 Move X8, 0xDE1000
	031 Move X20, [X19+80]
	032 Move X8, [X8+2736]
	033 Move X2, X31
	034 Move X0, X20
	035 Move X1, [X8]
	036 Call String.op_Equality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {56}
	041 Move X8, 0xDB4000
	042 Move X8, [X8+3672]
	043 Move W1, 2
	044 Move X0, [X8]
	045 Call 0x1C17D6C
	046 Compare X0, 0
	047 JumpIfEqual {128}
	048 Move W8, [X0+24]
	049 Move X20, X0
	050 Compare W8, 0
	051 JumpIfEqual {127}
	052 Move W9, [X19+100]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move [X20+32], W9
	055 Move W8, 3
	056 Move X8, 0xDE8000
	057 Move X8, [X8+3176]
	058 Move X0, X20
	059 Move X2, X31
	060 Move X1, [X8]
	061 Call String.op_Equality, X0, X1
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {81}
	066 Move X8, 0xDB4000
	067 Move X8, [X8+3672]
	068 Move W1, 2
	069 Move X0, [X8]
	070 Call 0x1C17D6C
	071 Compare X0, 0
	072 JumpIfEqual {128}
	073 Move W8, [X0+24]
	074 Move X20, X0
	075 Compare W8, 0
	076 JumpIfEqual {127}
	077 Move W9, [X19+100]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move [X20+32], W9
	080 Move W8, 4
	081 Move X8, 0xDE8000
	082 Move X8, [X8+3168]
	083 Move X0, X20
	084 Move X2, X31
	085 Move X1, [X8]
	086 Call String.op_Equality, X0, X1
	087 Move X8, 0xDB4000
	088 Move X8, [X8+3672]
	089 Move X8, [X8]
	090 Move TEMP, X0
	091 And TEMP, TEMP, 1
	092 Compare TEMP, 1
	093 JumpIfNotEqual {116}
	094 Move W1, 2
	095 Move X0, X8
	096 Call 0x1C17D6C
	097 Compare X0, 0
	098 JumpIfEqual {128}
	099 Move W8, [X0+24]
	100 Move X20, X0
	101 Compare W8, 0
	102 JumpIfEqual {127}
	103 Move W9, [X19+100]
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move [X20+32], W9
	106 Move W8, 8
	107 Move [X20+36], W8
	108 Call 0x1C17D44
	109 Move [X19+64], X20
	110 Call 0x1C17D44
	111 Move X0, X20
	112 Move X20, [X31+16]
	113 Move X19, [X31+24]
	114 Move X30, [X31+32]
	115 Return X0
	116 Move W1, 1
	117 Move X0, X8
	118 Call 0x1C17D6C
	119 Compare X0, 0
	120 JumpIfEqual {128}
	121 Move W8, [X0+24]
	122 Move X20, X0
	123 Compare W8, 0
	124 JumpIfEqual {127}
	125 Move W8, [X19+100]
	126 Move [X20+32], W8
	127 Call 0x1C17F28
	128 Call 0x1C17F20

Method: System.Globalization.CalendarId[] GetCalendarIds()

Disassembly:
	0x03341568 LDR X0, [X0 + 0xEE0]
	0x0334156C BL 0x1C16CF4
	0x03341570 ADRP X0, 0xDE7000
	0x03341574 LDR X0, [X0 + 0xEE8]
	0x03341578 BL 0x1C16CF4
	0x0334157C ADRP X0, 0xDE7000
	0x03341580 LDR X0, [X0 + 0xEF0]
	0x03341584 BL 0x1C16CF4
	0x03341588 ADRP X0, 0xDE7000
	0x0334158C LDR X0, [X0 + 0xEF8]
	0x03341590 BL 0x1C16CF4
	0x03341594 ADRP X0, 0xDE7000
	0x03341598 LDR X0, [X0 + 0xF00]
	0x0334159C BL 0x1C16CF4
	0x033415A0 ADRP X0, 0xDE7000
	0x033415A4 LDR X0, [X0 + 0xF08]
	0x033415A8 BL 0x1C16CF4
	0x033415AC ADRP X0, 0xDE7000
	0x033415B0 LDR X0, [X0 + 0xF10]
	0x033415B4 BL 0x1C16CF4
	0x033415B8 ADRP X0, 0xDE7000
	0x033415BC LDR X0, [X0 + 0xF18]
	0x033415C0 BL 0x1C16CF4
	0x033415C4 ADRP X0, 0xDE7000
	0x033415C8 LDR X0, [X0 + 0xF20]
	0x033415CC BL 0x1C16CF4
	0x033415D0 ADRP X0, 0xDE7000
	0x033415D4 LDR X0, [X0 + 0xF28]
	0x033415D8 BL 0x1C16CF4
	0x033415DC ADRP X0, 0xDE7000
	0x033415E0 LDR X0, [X0 + 0xF30]
	0x033415E4 BL 0x1C16CF4
	0x033415E8 ADRP X0, 0xDE7000
	0x033415EC LDR X0, [X0 + 0xF38]
	0x033415F0 BL 0x1C16CF4
	0x033415F4 ADRP X0, 0xDE7000
	0x033415F8 LDR X0, [X0 + 0xF40]
	0x033415FC BL 0x1C16CF4
	0x03341600 ADRP X0, 0xDE7000
	0x03341604 LDR X0, [X0 + 0xF48]
	0x03341608 BL 0x1C16CF4
	0x0334160C ADRP X0, 0xDE7000
	0x03341610 LDR X0, [X0 + 0xF50]
	0x03341614 BL 0x1C16CF4
	0x03341618 ADRP X0, 0xDE7000
	0x0334161C LDR X0, [X0 + 0xF58]
	0x03341620 BL 0x1C16CF4
	0x03341624 ADRP X0, 0xDE7000
	0x03341628 LDR X0, [X0 + 0xF60]
	0x0334162C BL 0x1C16CF4
	0x03341630 ADRP X0, 0xDE7000
	0x03341634 LDR X0, [X0 + 0xF68]
	0x03341638 BL 0x1C16CF4
	0x0334163C ADRP X0, 0xDE7000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x109C000
	007 Move W8, [X20+3427]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xDE8000
	014 Move X0, [X0+3184]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+3427], W8
	018 Move X0, X19
	019 Call CultureData.get_CalendarIds, X0
	020 Compare X0, 0
	021 JumpIfEqual {55}
	022 Move X8, 0xDE8000
	023 Move X8, [X8+3184]
	024 Move W1, [X0+24]
	025 Move X8, [X8]
	026 Move X0, X8
	027 Call 0x1C17D6C
	028 Move X20, X0
	029 Move X0, X19
	030 Call CultureData.get_CalendarIds, X0
	031 Compare X0, 0
	032 JumpIfEqual {55}
	033 Move X21, X31
	034 Add X22, X20, 32
	035 NotImplemented "Instruction LDRSW not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, X19
	038 Call CultureData.get_CalendarIds, X0
	039 Compare X0, 0
	040 JumpIfEqual {55}
	041 Move W8, [X0+24]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Compare X20, 0
	044 JumpIfEqual {55}
	045 Move W8, [X20+24]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Add X8, X0, X21
	048 Move W8, [X8+32]
	049 Move X0, X19
	050 NotImplemented "Instruction STRH not yet implemented."
	051 Add X21, X21, 1
	052 Call CultureData.get_CalendarIds, X0
	053 Compare X0, 0
	054 JumpIfNotEqual {35}
	055 Call 0x1C17F20
	056 Move X0, X20
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X22, [X31+16]
	060 Move X21, [X31+24]
	061 Move X30, [X31+48]
	062 Return X0
	063 Call 0x1C17F28

Method: System.Boolean get_IsInvariantCulture()

Disassembly:
	0x0333BB00 MOV X0, X8
	0x0333BB04 BL 0x1C16D08
	0x0333BB08 BL 0x19903D0

ISIL:
	001 Move X0, [X0+88]
	002 Move X1, X31
	003 Call String.IsNullOrEmpty, X0
	004 Return X0

Method: System.String get_CultureName()

Disassembly:
	0x03341640 LDR X0, [X0 + 0xF70]
	0x03341644 BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+88]
	002 Return X0

Method: System.String get_SCOMPAREINFO()

Disassembly:
	0x03341648 ADRP X0, 0xDE7000
	0x0334164C LDR X0, [X0 + 0xF78]
	0x03341650 BL 0x1C16CF4
	0x03341654 ADRP X0, 0xDE7000
	0x03341658 LDR X0, [X0 + 0xF80]
	0x0334165C BL 0x1C16CF4
	0x03341660 ADRP X0, 0xDE7000
	0x03341664 LDR X0, [X0 + 0xF88]
	0x03341668 BL 0x1C16CF4
	0x0334166C ADRP X0, 0xDE7000
	0x03341670 LDR X0, [X0 + 0xF90]
	0x03341674 BL 0x1C16CF4
	0x03341678 ADRP X0, 0xDE7000
	0x0334167C LDR X0, [X0 + 0xF98]
	0x03341680 BL 0x1C16CF4
	0x03341684 ADRP X0, 0xDE7000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x109C000
	005 Move X20, 0xDB3000
	006 Move W8, [X19+3428]
	007 Move X20, [X20+2440]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xDB3000
	013 Move X0, [X0+2440]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3428], W8
	017 Move X0, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0

Method: System.String get_STEXTINFO()

Disassembly:
	0x03341688 LDR X0, [X0 + 0xFA0]
	0x0334168C BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+88]
	002 Return X0

Method: System.Boolean get_UseUserOverride()

Disassembly:
	0x03341690 ADRP X0, 0xDE7000
	0x03341694 LDR X0, [X0 + 0xFA8]

ISIL:
	001 Move W0, [X0+96]
	002 Return X0

Method: System.String[] EraNames(System.Int32 calendarId)

Disassembly:
	0x03341698 BL 0x1C16CF4
	0x0334169C ADRP X0, 0xDE7000
	0x033416A0 LDR X0, [X0 + 0xFB0]
	0x033416A4 BL 0x1C16CF4
	0x033416A8 ADRP X0, 0xDE7000
	0x033416AC LDR X0, [X0 + 0xFB8]
	0x033416B0 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Call CultureData.GetCalendar, X0, X1
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X0, [X0+56]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.String[] AbbrevEraNames(System.Int32 calendarId)

Disassembly:
	0x033416B4 ADRP X0, 0xDE7000
	0x033416B8 LDR X0, [X0 + 0xFC0]
	0x033416BC BL 0x1C16CF4
	0x033416C0 ADRP X0, 0xDE7000
	0x033416C4 LDR X0, [X0 + 0xFC8]
	0x033416C8 BL 0x1C16CF4
	0x033416CC ADRP X0, 0xDE7000

ISIL:
	001 Move [X31-16], X30
	002 Call CultureData.GetCalendar, X0, X1
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X0, [X0+64]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.String[] AbbreviatedEnglishEraNames(System.Int32 calendarId)

Disassembly:
	0x033416D0 LDR X0, [X0 + 0xFD0]
	0x033416D4 BL 0x1C16CF4
	0x033416D8 ADRP X0, 0xDE7000
	0x033416DC LDR X0, [X0 + 0xFD8]
	0x033416E0 BL 0x1C16CF4
	0x033416E4 ADRP X0, 0xDE7000
	0x033416E8 LDR X0, [X0 + 0xFE0]

ISIL:
	001 Move [X31-16], X30
	002 Call CultureData.GetCalendar, X0, X1
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X0, [X0+72]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.String[] ShortDates(System.Int32 calendarId)

Disassembly:
	0x033416EC BL 0x1C16CF4
	0x033416F0 ADRP X0, 0xDE7000
	0x033416F4 LDR X0, [X0 + 0xFE8]
	0x033416F8 BL 0x1C16CF4
	0x033416FC ADRP X0, 0xDE7000
	0x03341700 LDR X0, [X0 + 0xFF0]
	0x03341704 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Call CultureData.GetCalendar, X0, X1
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X0, [X0+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.String[] LongDates(System.Int32 calendarId)

Disassembly:
	0x03341708 ADRP X0, 0xDE7000
	0x0334170C LDR X0, [X0 + 0xFF8]
	0x03341710 BL 0x1C16CF4
	0x03341714 ADRP X0, 0xDE8000
	0x03341718 LDR X0, [X0]
	0x0334171C BL 0x1C16CF4
	0x03341720 ADRP X0, 0xDE8000

ISIL:
	001 Move [X31-16], X30
	002 Call CultureData.GetCalendar, X0, X1
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X0, [X0+40]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.String[] YearMonths(System.Int32 calendarId)

Disassembly:
	0x03341724 LDR X0, [X0 + 0x8]
	0x03341728 BL 0x1C16CF4
	0x0334172C ADRP X0, 0xDE8000
	0x03341730 LDR X0, [X0 + 0x10]
	0x03341734 BL 0x1C16CF4
	0x03341738 ADRP X0, 0xDE8000
	0x0334173C LDR X0, [X0 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Call CultureData.GetCalendar, X0, X1
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X0, [X0+32]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.String[] DayNames(System.Int32 calendarId)

Disassembly:
	0x03341740 BL 0x1C16CF4
	0x03341744 ADRP X0, 0xDE8000
	0x03341748 LDR X0, [X0 + 0x20]
	0x0334174C BL 0x1C16CF4
	0x03341750 ADRP X0, 0xDE8000
	0x03341754 LDR X0, [X0 + 0x28]
	0x03341758 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Call CultureData.GetCalendar, X0, X1
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X0, [X0+80]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.String[] AbbreviatedDayNames(System.Int32 calendarId)

Disassembly:
	0x0334175C ADRP X0, 0xDE8000
	0x03341760 LDR X0, [X0 + 0x30]
	0x03341764 BL 0x1C16CF4
	0x03341768 ADRP X0, 0xDE8000
	0x0334176C LDR X0, [X0 + 0x38]
	0x03341770 BL 0x1C16CF4
	0x03341774 ADRP X0, 0xDE8000

ISIL:
	001 Move [X31-16], X30
	002 Call CultureData.GetCalendar, X0, X1
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X0, [X0+88]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.String[] MonthNames(System.Int32 calendarId)

Disassembly:
	0x03341778 LDR X0, [X0 + 0x40]
	0x0334177C BL 0x1C16CF4
	0x03341780 ADRP X0, 0xDE8000
	0x03341784 LDR X0, [X0 + 0x48]
	0x03341788 BL 0x1C16CF4
	0x0334178C ADRP X0, 0xDE8000
	0x03341790 LDR X0, [X0 + 0x50]

ISIL:
	001 Move [X31-16], X30
	002 Call CultureData.GetCalendar, X0, X1
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X0, [X0+104]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.String[] GenitiveMonthNames(System.Int32 calendarId)

Disassembly:
	0x03341794 BL 0x1C16CF4
	0x03341798 ADRP X0, 0xDE8000
	0x0334179C LDR X0, [X0 + 0x58]
	0x033417A0 BL 0x1C16CF4
	0x033417A4 ADRP X0, 0xDE8000
	0x033417A8 LDR X0, [X0 + 0x60]
	0x033417AC BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Call CultureData.GetCalendar, X0, X1
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X0, [X0+120]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.String[] AbbreviatedMonthNames(System.Int32 calendarId)

Disassembly:
	0x033417B0 ADRP X0, 0xDE8000
	0x033417B4 LDR X0, [X0 + 0x68]
	0x033417B8 BL 0x1C16CF4
	0x033417BC ADRP X0, 0xDE8000
	0x033417C0 LDR X0, [X0 + 0x70]
	0x033417C4 BL 0x1C16CF4
	0x033417C8 ADRP X0, 0xDE8000

ISIL:
	001 Move [X31-16], X30
	002 Call CultureData.GetCalendar, X0, X1
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X0, [X0+112]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.String[] AbbreviatedGenitiveMonthNames(System.Int32 calendarId)

Disassembly:
	0x033417CC LDR X0, [X0 + 0x78]
	0x033417D0 BL 0x1C16CF4
	0x033417D4 ADRP X0, 0xDE8000
	0x033417D8 LDR X0, [X0 + 0x80]
	0x033417DC BL 0x1C16CF4
	0x033417E0 ADRP X0, 0xDE8000
	0x033417E4 LDR X0, [X0 + 0x88]

ISIL:
	001 Move [X31-16], X30
	002 Call CultureData.GetCalendar, X0, X1
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X0, [X0+128]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.String[] LeapYearMonthNames(System.Int32 calendarId)

Disassembly:
	0x033417E8 BL 0x1C16CF4
	0x033417EC ADRP X0, 0xDE8000
	0x033417F0 LDR X0, [X0 + 0x90]
	0x033417F4 BL 0x1C16CF4
	0x033417F8 ADRP X0, 0xDE8000
	0x033417FC LDR X0, [X0 + 0x98]
	0x03341800 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Call CultureData.GetCalendar, X0, X1
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X0, [X0+136]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.String MonthDay(System.Int32 calendarId)

Disassembly:
	0x03341804 ADRP X0, 0xDE8000
	0x03341808 LDR X0, [X0 + 0xA0]
	0x0334180C BL 0x1C16CF4
	0x03341810 ADRP X0, 0xDE8000
	0x03341814 LDR X0, [X0 + 0xA8]
	0x03341818 BL 0x1C16CF4
	0x0334181C ADRP X0, 0xDE8000

ISIL:
	001 Move [X31-16], X30
	002 Call CultureData.GetCalendar, X0, X1
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X0, [X0+48]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.String DateSeparator(System.Int32 calendarId)

Disassembly:
	0x03341820 LDR X0, [X0 + 0xB0]
	0x03341824 BL 0x1C16CF4
	0x03341828 ADRP X0, 0xDE8000
	0x0334182C LDR X0, [X0 + 0xB8]
	0x03341830 BL 0x1C16CF4
	0x03341834 ADRP X0, 0xDE8000
	0x03341838 LDR X0, [X0 + 0xC0]
	0x0334183C BL 0x1C16CF4
	0x03341840 ADRP X0, 0xDE8000
	0x03341844 LDR X0, [X0 + 0xC8]
	0x03341848 BL 0x1C16CF4
	0x0334184C ADRP X0, 0xDE8000
	0x03341850 LDR X0, [X0 + 0xD0]
	0x03341854 BL 0x1C16CF4
	0x03341858 ADRP X0, 0xDE8000
	0x0334185C LDR X0, [X0 + 0xD8]
	0x03341860 BL 0x1C16CF4
	0x03341864 ADRP X0, 0xDE8000
	0x03341868 LDR X0, [X0 + 0xE0]
	0x0334186C BL 0x1C16CF4
	0x03341870 ADRP X0, 0xDE8000
	0x03341874 LDR X0, [X0 + 0xE8]
	0x03341878 BL 0x1C16CF4
	0x0334187C ADRP X0, 0xDE8000
	0x03341880 LDR X0, [X0 + 0xF0]
	0x03341884 BL 0x1C16CF4
	0x03341888 ADRP X0, 0xDE8000
	0x0334188C LDR X0, [X0 + 0xF8]
	0x03341890 BL 0x1C16CF4
	0x03341894 ADRP X0, 0xDE8000
	0x03341898 LDR X0, [X0 + 0x100]
	0x0334189C BL 0x1C16CF4
	0x033418A0 ADRP X0, 0xDE8000
	0x033418A4 LDR X0, [X0 + 0x108]
	0x033418A8 BL 0x1C16CF4
	0x033418AC ADRP X0, 0xDE8000
	0x033418B0 LDR X0, [X0 + 0x110]
	0x033418B4 BL 0x1C16CF4
	0x033418B8 ADRP X0, 0xDE8000
	0x033418BC LDR X0, [X0 + 0x118]
	0x033418C0 BL 0x1C16CF4
	0x033418C4 ADRP X0, 0xDE8000
	0x033418C8 LDR X0, [X0 + 0x120]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x109C000
	006 Move W8, [X21+3429]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xDE3000
	014 Move X0, [X0+2912]
	015 Call 0x1C17CF4
	016 Move X0, 0xDB4000
	017 Move X0, [X0+3784]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3429], W8
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X8, 0xDE3000
	023 Move X8, [X8+2912]
	024 Move X8, [X8]
	025 Move X8, [X8+184]
	026 Move W8, [X8+3]
	027 Compare W8, 0
	028 JumpIfEqual {45}
	029 Move X0, X20
	030 Move W1, W19
	031 Call CultureData.GetCalendar, X0, X1
	032 Compare X0, 0
	033 JumpIfEqual {53}
	034 Move X8, [X0+24]
	035 Compare X8, 0
	036 JumpIfEqual {53}
	037 Move W9, [X8+24]
	038 Compare W9, 0
	039 JumpIfEqual {54}
	040 Move X0, [X8+32]
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Move X8, 0xDB4000
	046 Move X8, [X8+3784]
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X0, [X8]
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Return X0
	053 Call 0x1C17F20
	054 Call 0x1C17F28

Method: System.String GetDateSeparator(System.String format)

Disassembly:
	0x033418CC BL 0x1C16CF4
	0x033418D0 ADRP X0, 0xDE8000
	0x033418D4 LDR X0, [X0 + 0x128]
	0x033418D8 BL 0x1C16CF4
	0x033418DC ADRP X0, 0xDE8000
	0x033418E0 LDR X0, [X0 + 0x130]
	0x033418E4 BL 0x1C16CF4
	0x033418E8 ADRP X0, 0xDE8000
	0x033418EC LDR X0, [X0 + 0x138]
	0x033418F0 BL 0x1C16CF4
	0x033418F4 ADRP X0, 0xDE8000
	0x033418F8 LDR X0, [X0 + 0x140]
	0x033418FC BL 0x1C16CF4
	0x03341900 ADRP X0, 0xDE8000
	0x03341904 LDR X0, [X0 + 0x148]
	0x03341908 BL 0x1C16CF4
	0x0334190C ADRP X0, 0xDE8000
	0x03341910 LDR X0, [X0 + 0x150]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x109C000
	006 Move X21, 0xDE8000
	007 Move W8, [X20+3430]
	008 Move X21, [X21+3192]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDE8000
	015 Move X0, [X0+3192]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3430], W8
	019 Move X1, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]

Method: System.String GetSeparator(System.String format, System.String timeParts)

Disassembly:
	0x03341914 BL 0x1C16CF4
	0x03341918 ADRP X0, 0xDE8000
	0x0334191C LDR X0, [X0 + 0x158]
	0x03341920 BL 0x1C16CF4
	0x03341924 ADRP X0, 0xDE8000
	0x03341928 LDR X0, [X0 + 0x160]
	0x0334192C BL 0x1C16CF4
	0x03341930 ADRP X0, 0xDE8000
	0x03341934 LDR X0, [X0 + 0x168]
	0x03341938 BL 0x1C16CF4
	0x0334193C ADRP X0, 0xDE8000
	0x03341940 LDR X0, [X0 + 0x170]
	0x03341944 BL 0x1C16CF4
	0x03341948 ADRP X0, 0xDE8000
	0x0334194C LDR X0, [X0 + 0x178]
	0x03341950 BL 0x1C16CF4
	0x03341954 ADRP X0, 0xDE8000
	0x03341958 LDR X0, [X0 + 0x180]
	0x0334195C BL 0x1C16CF4
	0x03341960 ADRP X0, 0xDE8000
	0x03341964 LDR X0, [X0 + 0x188]
	0x03341968 BL 0x1C16CF4
	0x0334196C ADRP X0, 0xDE8000
	0x03341970 LDR X0, [X0 + 0x190]
	0x03341974 BL 0x1C16CF4
	0x03341978 ADRP X0, 0xDE8000
	0x0334197C LDR X0, [X0 + 0x198]
	0x03341980 BL 0x1C16CF4
	0x03341984 ADRP X0, 0xDE8000
	0x03341988 LDR X0, [X0 + 0x1A0]
	0x0334198C BL 0x1C16CF4
	0x03341990 ADRP X0, 0xDE8000
	0x03341994 LDR X0, [X0 + 0x1A8]
	0x03341998 BL 0x1C16CF4
	0x0334199C ADRP X0, 0xDE8000
	0x033419A0 LDR X0, [X0 + 0x1B0]
	0x033419A4 BL 0x1C16CF4
	0x033419A8 ADRP X0, 0xDE8000
	0x033419AC LDR X0, [X0 + 0x1B8]
	0x033419B0 BL 0x1C16CF4
	0x033419B4 ADRP X0, 0xDE8000
	0x033419B8 LDR X0, [X0 + 0x1C0]
	0x033419BC BL 0x1C16CF4
	0x033419C0 ADRP X0, 0xDE8000
	0x033419C4 LDR X0, [X0 + 0x1C8]
	0x033419C8 BL 0x1C16CF4
	0x033419CC ADRP X0, 0xDE8000
	0x033419D0 LDR X0, [X0 + 0x1D0]
	0x033419D4 BL 0x1C16CF4
	0x033419D8 ADRP X0, 0xDE8000
	0x033419DC LDR X0, [X0 + 0x1D8]
	0x033419E0 BL 0x1C16CF4
	0x033419E4 ADRP X0, 0xDE8000
	0x033419E8 LDR X0, [X0 + 0x1E0]
	0x033419EC BL 0x1C16CF4
	0x033419F0 ADRP X0, 0xDE8000
	0x033419F4 LDR X0, [X0 + 0x1E8]
	0x033419F8 BL 0x1C16CF4
	0x033419FC ADRP X0, 0xDE8000
	0x03341A00 LDR X0, [X0 + 0x1F0]
	0x03341A04 BL 0x1C16CF4
	0x03341A08 ADRP X0, 0xDE8000
	0x03341A0C LDR X0, [X0 + 0x1F8]
	0x03341A10 BL 0x1C16CF4
	0x03341A14 ADRP X0, 0xDE8000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x109C000
	007 Move W8, [X21+3431]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDB5000
	015 Move X0, [X0+632]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3431], W8
	019 Move X0, X19
	020 Move W1, W31
	021 Move X2, X20
	022 Call CultureData.IndexOfTimePart, X0, X1, X2
	023 Add W31, W0, 1
	024 Compare X19, 0
	025 JumpIfEqual {71}
	026 Move W21, W0
	027 Move X0, X19
	028 Move W1, W21
	029 Move X2, X31
	030 Call String.get_Chars, X0, X1
	031 Move W22, W0
	032 Add W9, W21, 1
	033 Move W8, [X19+16]
	034 Move W21, W9
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X0, X19
	037 Move W1, W21
	038 Move X2, X31
	039 Call String.get_Chars, X0, X1
	040 And W8, W0, 0xFFFF
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Add W9, W21, 1
	043 Move W8, [X19+16]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X0, X19
	046 Move W1, W21
	047 Move X2, X20
	048 Call CultureData.IndexOfTimePart, X0, X1, X2
	049 Add W31, W0, 1
	050 Subtract W2, W0, 1
	051 Move X0, X19
	052 Move W1, W21
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X30, [X31+48]
	058 Call CultureData.UnescapeNlsString, X0, X1, X2
	059 Return X0
	060 Move X8, 0xDB5000
	061 Move X8, [X8+632]
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X22, [X31+16]
	065 Move X21, [X31+24]
	066 Move X8, [X8]
	067 Move X8, [X8+184]
	068 Move X0, [X8]
	069 Move X30, [X31+48]
	070 Return X0
	071 Call 0x1C17F20

Method: System.Int32 IndexOfTimePart(System.String format, System.Int32 startIndex, System.String timeParts)

Disassembly:
	0x03341A18 LDR X0, [X0 + 0x200]
	0x03341A1C BL 0x1C16CF4
	0x03341A20 ADRP X0, 0xDE8000
	0x03341A24 LDR X0, [X0 + 0x208]
	0x03341A28 BL 0x1C16CF4
	0x03341A2C ADRP X0, 0xDE8000
	0x03341A30 LDR X0, [X0 + 0x210]
	0x03341A34 BL 0x1C16CF4
	0x03341A38 ADRP X0, 0xDE8000
	0x03341A3C LDR X0, [X0 + 0x218]
	0x03341A40 BL 0x1C16CF4
	0x03341A44 ADRP X0, 0xDE8000
	0x03341A48 LDR X0, [X0 + 0x220]
	0x03341A4C BL 0x1C16CF4
	0x03341A50 ADRP X0, 0xDE8000
	0x03341A54 LDR X0, [X0 + 0x228]
	0x03341A58 BL 0x1C16CF4
	0x03341A5C ADRP X0, 0xDE8000
	0x03341A60 LDR X0, [X0 + 0x230]
	0x03341A64 BL 0x1C16CF4
	0x03341A68 ADRP X0, 0xDE8000
	0x03341A6C LDR X0, [X0 + 0x238]
	0x03341A70 BL 0x1C16CF4
	0x03341A74 ADRP X0, 0xDE8000
	0x03341A78 LDR X0, [X0 + 0x240]
	0x03341A7C BL 0x1C16CF4
	0x03341A80 ADRP X0, 0xDE8000
	0x03341A84 LDR X0, [X0 + 0x248]
	0x03341A88 BL 0x1C16CF4
	0x03341A8C ADRP X0, 0xDE8000
	0x03341A90 LDR X0, [X0 + 0x250]
	0x03341A94 BL 0x1C16CF4
	0x03341A98 ADRP X0, 0xDE8000
	0x03341A9C LDR X0, [X0 + 0x258]
	0x03341AA0 BL 0x1C16CF4
	0x03341AA4 ADRP X0, 0xDE8000
	0x03341AA8 LDR X0, [X0 + 0x260]
	0x03341AAC BL 0x1C16CF4
	0x03341AB0 ADRP X0, 0xDE8000
	0x03341AB4 LDR X0, [X0 + 0x268]
	0x03341AB8 BL 0x1C16CF4
	0x03341ABC ADRP X0, 0xDE8000
	0x03341AC0 LDR X0, [X0 + 0x270]
	0x03341AC4 BL 0x1C16CF4
	0x03341AC8 ADRP X0, 0xDE8000
	0x03341ACC LDR X0, [X0 + 0x278]
	0x03341AD0 BL 0x1C16CF4
	0x03341AD4 ADRP X0, 0xDE8000
	0x03341AD8 LDR X0, [X0 + 0x280]
	0x03341ADC BL 0x1C16CF4
	0x03341AE0 ADRP X0, 0xDE8000
	0x03341AE4 LDR X0, [X0 + 0x288]
	0x03341AE8 BL 0x1C16CF4
	0x03341AEC ADRP X0, 0xDE8000
	0x03341AF0 LDR X0, [X0 + 0x290]
	0x03341AF4 BL 0x1C16CF4
	0x03341AF8 ADRP X0, 0xDE8000
	0x03341AFC LDR X0, [X0 + 0x298]
	0x03341B00 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Compare X0, 0
	008 JumpIfEqual {63}
	009 Move W8, [X0+16]
	010 Move W19, W1
	011 Move X21, X0
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move X20, X2
	014 Move W23, W31
	015 Move TEMP, X23
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {30}
	019 Move X0, X21
	020 Move W1, W19
	021 Move X2, X31
	022 Call String.get_Chars, X0, X1
	023 Compare X20, 0
	024 JumpIfEqual {63}
	025 Move W1, W0
	026 Move X0, X20
	027 Move X2, X31
	028 Call String.IndexOf, X0, X1
	029 Add W31, W0, 1
	030 Move X0, X21
	031 Move W1, W19
	032 Move X2, X31
	033 Call String.get_Chars, X0, X1
	034 And W8, W0, 0xFFFF
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move W8, [X21+16]
	038 Add W22, W19, 1
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X0, X21
	041 Move W1, W22
	042 Move X2, X31
	043 Call String.get_Chars, X0, X1
	044 And W8, W0, 0xFFFF
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move W19, W22
	048 Xor W23, W23, 1
	049 Move W8, [X21+16]
	050 Add W19, W19, 1
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move TEMP, 0
	053 Not TEMP
	054 Move W19, TEMP
	055 Move W0, W19
	056 Move X20, [X31+32]
	057 Move X19, [X31+40]
	058 Move X22, [X31+16]
	059 Move X21, [X31+24]
	060 Move X30, [X31+48]
	061 Move X23, [X31+56]
	062 Return X0
	063 Call 0x1C17F20

Method: System.String UnescapeNlsString(System.String str, System.Int32 start, System.Int32 end)

Disassembly:
	0x03341B04 ADRP X0, 0xDE8000
	0x03341B08 LDR X0, [X0 + 0x2A0]
	0x03341B0C BL 0x1C16CF4
	0x03341B10 ADRP X0, 0xDE8000
	0x03341B14 LDR X0, [X0 + 0x2A8]
	0x03341B18 BL 0x1C16CF4
	0x03341B1C ADRP X0, 0xDE8000
	0x03341B20 LDR X0, [X0 + 0x2B0]
	0x03341B24 BL 0x1C16CF4
	0x03341B28 ADRP X0, 0xDE8000
	0x03341B2C LDR X0, [X0 + 0x2B8]
	0x03341B30 BL 0x1C16CF4
	0x03341B34 ADRP X0, 0xDE8000
	0x03341B38 LDR X0, [X0 + 0x2C0]
	0x03341B3C BL 0x1C16CF4
	0x03341B40 ADRP X0, 0xDE8000
	0x03341B44 LDR X0, [X0 + 0x2C8]
	0x03341B48 BL 0x1C16CF4
	0x03341B4C ADRP X0, 0xDE8000
	0x03341B50 LDR X0, [X0 + 0x2D0]
	0x03341B54 BL 0x1C16CF4
	0x03341B58 ADRP X0, 0xDE8000
	0x03341B5C LDR X0, [X0 + 0x2D8]
	0x03341B60 BL 0x1C16CF4
	0x03341B64 ADRP X0, 0xDE8000
	0x03341B68 LDR X0, [X0 + 0x2E0]
	0x03341B6C BL 0x1C16CF4
	0x03341B70 ADRP X0, 0xDE8000
	0x03341B74 LDR X0, [X0 + 0x2E8]
	0x03341B78 BL 0x1C16CF4
	0x03341B7C ADRP X0, 0xDE8000
	0x03341B80 LDR X0, [X0 + 0x2F0]
	0x03341B84 BL 0x1C16CF4
	0x03341B88 ADRP X0, 0xDE8000
	0x03341B8C LDR X0, [X0 + 0x2F8]
	0x03341B90 BL 0x1C16CF4
	0x03341B94 ADRP X0, 0xDE8000
	0x03341B98 LDR X0, [X0 + 0x300]
	0x03341B9C BL 0x1C16CF4
	0x03341BA0 ADRP X0, 0xDE8000
	0x03341BA4 LDR X0, [X0 + 0x308]
	0x03341BA8 BL 0x1C16CF4
	0x03341BAC ADRP X0, 0xDE8000
	0x03341BB0 LDR X0, [X0 + 0x310]
	0x03341BB4 BL 0x1C16CF4
	0x03341BB8 ADRP X0, 0xDE8000
	0x03341BBC LDR X0, [X0 + 0x318]
	0x03341BC0 BL 0x1C16CF4
	0x03341BC4 ADRP X0, 0xDE8000
	0x03341BC8 LDR X0, [X0 + 0x320]
	0x03341BCC BL 0x1C16CF4
	0x03341BD0 ADRP X0, 0xDE8000
	0x03341BD4 LDR X0, [X0 + 0x328]
	0x03341BD8 BL 0x1C16CF4
	0x03341BDC ADRP X0, 0xDE8000
	0x03341BE0 LDR X0, [X0 + 0x330]
	0x03341BE4 BL 0x1C16CF4
	0x03341BE8 ADRP X0, 0xDE8000
	0x03341BEC LDR X0, [X0 + 0x338]
	0x03341BF0 BL 0x1C16CF4
	0x03341BF4 ADRP X0, 0xDE8000
	0x03341BF8 LDR X0, [X0 + 0x340]
	0x03341BFC BL 0x1C16CF4
	0x03341C00 ADRP X0, 0xDE8000
	0x03341C04 LDR X0, [X0 + 0x348]
	0x03341C08 BL 0x1C16CF4
	0x03341C0C ADRP X0, 0xDE8000
	0x03341C10 LDR X0, [X0 + 0x350]
	0x03341C14 BL 0x1C16CF4
	0x03341C18 ADRP X0, 0xDE8000
	0x03341C1C LDR X0, [X0 + 0x358]
	0x03341C20 BL 0x1C16CF4
	0x03341C24 ADRP X0, 0xDE8000
	0x03341C28 LDR X0, [X0 + 0x360]
	0x03341C2C BL 0x1C16CF4
	0x03341C30 ADRP X0, 0xDE8000
	0x03341C34 LDR X0, [X0 + 0x368]
	0x03341C38 BL 0x1C16CF4
	0x03341C3C ADRP X0, 0xDE8000
	0x03341C40 LDR X0, [X0 + 0x370]
	0x03341C44 BL 0x1C16CF4
	0x03341C48 ADRP X0, 0xDE8000
	0x03341C4C LDR X0, [X0 + 0x378]
	0x03341C50 BL 0x1C16CF4
	0x03341C54 ADRP X0, 0xDE8000
	0x03341C58 LDR X0, [X0 + 0x380]
	0x03341C5C BL 0x1C16CF4
	0x03341C60 ADRP X0, 0xDE8000
	0x03341C64 LDR X0, [X0 + 0x388]
	0x03341C68 BL 0x1C16CF4
	0x03341C6C ADRP X0, 0xDE8000
	0x03341C70 LDR X0, [X0 + 0x390]
	0x03341C74 BL 0x1C16CF4
	0x03341C78 ADRP X0, 0xDE8000
	0x03341C7C LDR X0, [X0 + 0x398]
	0x03341C80 BL 0x1C16CF4
	0x03341C84 ADRP X0, 0xDE8000
	0x03341C88 LDR X0, [X0 + 0x3A0]
	0x03341C8C BL 0x1C16CF4
	0x03341C90 ADRP X0, 0xDE8000
	0x03341C94 LDR X0, [X0 + 0x3A8]
	0x03341C98 BL 0x1C16CF4
	0x03341C9C ADRP X0, 0xDE8000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0x109C000
	010 Move W8, [X22+3432]
	011 Move W20, W2
	012 Move W19, W1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xDB3000
	019 Move X0, [X0+2288]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+3432], W8
	023 Compare X21, 0
	024 JumpIfEqual {117}
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X22, X31
	027 Move W8, [X21+16]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X25, 0xDB3000
	030 Move X25, [X25+2288]
	031 Move X22, X31
	032 Move W23, W19
	033 Move X0, X21
	034 Move W1, W23
	035 Move X2, X31
	036 Call String.get_Chars, X0, X1
	037 And W8, W0, 0xFFFF
	038 NotImplemented "Instruction CMP not yet implemented."
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Compare X22, 0
	041 JumpIfNotEqual {83}
	042 Move X0, [X25]
	043 Move W24, [X21+16]
	044 Call 0x1C17F10
	045 Subtract W3, W23, W19
	046 Move X1, X21
	047 Move W2, W19
	048 Move W4, W24
	049 Move X5, X31
	050 Move X22, X0
	051 Call StringBuilder..ctor, X0, X1, X2, X3, X4
	052 Compare X22, 0
	053 JumpIfNotEqual {64}
	054 Move X0, [X25]
	055 Move W24, [X21+16]
	056 Call 0x1C17F10
	057 Subtract W3, W23, W19
	058 Move X1, X21
	059 Move W2, W19
	060 Move W4, W24
	061 Move X5, X31
	062 Move X22, X0
	063 Call StringBuilder..ctor, X0, X1, X2, X3, X4
	064 Move W8, [X21+16]
	065 Add W23, W23, 1
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move X0, X21
	068 Move W1, W23
	069 Move X2, X31
	070 Call String.get_Chars, X0, X1
	071 Compare X22, 0
	072 JumpIfNotEqual {79}
	073 Compare X22, 0
	074 JumpIfEqual {83}
	075 Move X0, X21
	076 Move W1, W23
	077 Move X2, X31
	078 Call String.get_Chars, X0, X1
	079 Move W1, W0
	080 Move X0, X22
	081 Move X2, X31
	082 Call StringBuilder.Append, X0, X1
	083 Add W23, W23, 1
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move W8, [X21+16]
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Compare X22, 0
	088 JumpIfEqual {102}
	089 Move X8, [X22]
	090 Move X0, X22
	091 Move X20, [X31+48]
	092 Move X19, [X31+56]
	093 Move X22, [X31+32]
	094 Move X21, [X31+40]
	095 Move X2, [X8+360]
	096 Move X1, [X8+368]
	097 Move X24, [X31+16]
	098 Move X23, [X31+24]
	099 Move X30, [X31+64]
	100 Move X25, [X31+72]
	101 CallNoReturn X2
	102 Subtract W8, W20, W19
	103 Move X0, X21
	104 Move W1, W19
	105 Move X20, [X31+48]
	106 Move X19, [X31+56]
	107 Move X22, [X31+32]
	108 Move X21, [X31+40]
	109 Move X24, [X31+16]
	110 Move X23, [X31+24]
	111 Add W2, W8, 1
	112 Move X3, X31
	113 Move X30, [X31+64]
	114 Move X25, [X31+72]
	115 Call String.Substring, X0, X1, X2
	116 Return X0
	117 Call 0x1C17F20

Method: System.String[] ReescapeWin32Strings(System.String[] array)

Disassembly:
	0x03341CA0 LDR X0, [X0 + 0x3B0]

ISIL:
	001 Return X0

Method: System.String ReescapeWin32String(System.String str)

Disassembly:
	0x03341CA4 BL 0x1C16CF4

ISIL:
	001 Return X0

Method: System.Int32 strlen(System.Byte* s)

Disassembly:
	0x03341CA8 ADRP X0, 0xDE8000
	0x03341CAC LDR X0, [X0 + 0x3B8]
	0x03341CB0 BL 0x1C16CF4
	0x03341CB4 ADRP X0, 0xDE8000
	0x03341CB8 LDR X0, [X0 + 0x3C0]
	0x03341CBC BL 0x1C16CF4

ISIL:
	001 Move X8, X0
	002 Move TEMP, 0
	003 Not TEMP
	004 Move W0, TEMP
	005 Add W0, W0, 1
	006 Move W9, [X8]
	007 Compare W9, 0
	008 JumpIfNotEqual {5}
	009 Return X0

Method: System.String idx2string(System.Byte* data, System.Int32 idx)

Disassembly:
	0x03341CC0 ADRP X0, 0xDE8000
	0x03341CC4 LDR X0, [X0 + 0x3C8]
	0x03341CC8 BL 0x1C16CF4
	0x03341CCC ADRP X0, 0xDE8000
	0x03341CD0 LDR X0, [X0 + 0x3D0]
	0x03341CD4 BL 0x1C16CF4
	0x03341CD8 ADRP X0, 0xDE8000
	0x03341CDC LDR X0, [X0 + 0x3D8]
	0x03341CE0 BL 0x1C16CF4
	0x03341CE4 ADRP X0, 0xDE8000
	0x03341CE8 LDR X0, [X0 + 0x3E0]
	0x03341CEC BL 0x1C16CF4
	0x03341CF0 ADRP X0, 0xDE8000
	0x03341CF4 LDR X0, [X0 + 0x3E8]
	0x03341CF8 BL 0x1C16CF4
	0x03341CFC ADRP X0, 0xDE8000
	0x03341D00 LDR X0, [X0 + 0x3F0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X0
	005 Move X0, X31
	006 Move W19, W1
	007 Call Encoding.get_UTF8
	008 Add X1, X20, W19
	009 Move TEMP, 0
	010 Not TEMP
	011 Move W2, TEMP
	012 Add W2, W2, 1
	013 Move W8, [X1]
	014 Compare W8, 0
	015 JumpIfNotEqual {12}
	016 Compare X0, 0
	017 JumpIfEqual {24}
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X3, X31
	021 Move X30, [X31+32]
	022 Call Encoding.GetString, X0, X1, X2
	023 Return X0
	024 Call 0x1C17F20

Method: System.Int32[] create_group_sizes_array(System.Int32 gs0, System.Int32 gs1)

Disassembly:
	0x03341D04 BL 0x1C16CF4
	0x03341D08 ADRP X0, 0xDE8000
	0x03341D0C LDR X0, [X0 + 0x3F8]
	0x03341D10 BL 0x1C16CF4
	0x03341D14 ADRP X0, 0xDE8000
	0x03341D18 LDR X0, [X0 + 0x400]
	0x03341D1C BL 0x1C16CF4
	0x03341D20 ADRP X0, 0xDE8000
	0x03341D24 LDR X0, [X0 + 0x408]
	0x03341D28 BL 0x1C16CF4
	0x03341D2C ADRP X0, 0xDE8000
	0x03341D30 LDR X0, [X0 + 0x410]
	0x03341D34 BL 0x1C16CF4
	0x03341D38 ADRP X0, 0xDE8000
	0x03341D3C LDR X0, [X0 + 0x418]
	0x03341D40 BL 0x1C16CF4
	0x03341D44 ADRP X0, 0xDE8000
	0x03341D48 LDR X0, [X0 + 0x420]
	0x03341D4C BL 0x1C16CF4
	0x03341D50 ADRP X0, 0xDE8000
	0x03341D54 LDR X0, [X0 + 0x428]
	0x03341D58 BL 0x1C16CF4
	0x03341D5C ADRP X0, 0xDE8000
	0x03341D60 LDR X0, [X0 + 0x430]
	0x03341D64 BL 0x1C16CF4
	0x03341D68 ADRP X0, 0xDE8000
	0x03341D6C LDR X0, [X0 + 0x438]
	0x03341D70 BL 0x1C16CF4
	0x03341D74 ADRP X0, 0xDE8000
	0x03341D78 LDR X0, [X0 + 0x440]
	0x03341D7C BL 0x1C16CF4
	0x03341D80 ADRP X0, 0xDE8000
	0x03341D84 LDR X0, [X0 + 0x448]
	0x03341D88 BL 0x1C16CF4
	0x03341D8C ADRP X0, 0xDE8000
	0x03341D90 LDR X0, [X0 + 0x450]
	0x03341D94 BL 0x1C16CF4
	0x03341D98 ADRP X0, 0xDE8000
	0x03341D9C LDR X0, [X0 + 0x458]
	0x03341DA0 BL 0x1C16CF4
	0x03341DA4 ADRP X0, 0xDE8000
	0x03341DA8 LDR X0, [X0 + 0x460]
	0x03341DAC BL 0x1C16CF4
	0x03341DB0 ADRP X0, 0xDE8000
	0x03341DB4 LDR X0, [X0 + 0x468]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x109C000
	006 Move W8, [X21+3433]
	007 Move W20, W2
	008 Move W19, W1
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xDB4000
	014 Move X0, [X0+3672]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3433], W8
	018 Move X8, 0xDB4000
	019 Move X8, [X8+3672]
	020 Add W31, W19, 1
	021 Move X0, [X8]
	022 Add W31, W20, 1
	023 Move W1, 2
	024 Call 0x1C17D6C
	025 Compare X0, 0
	026 JumpIfEqual {55}
	027 Move W8, [X0+24]
	028 Compare W8, 0
	029 JumpIfEqual {54}
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move [X0+32], W19
	032 Move [X0+36], W20
	033 Move X0, [X8]
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move W1, W31
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Call 0x1C17D6C
	040 Return X0
	041 Move W1, 1
	042 Call 0x1C17D6C
	043 Compare X0, 0
	044 JumpIfEqual {55}
	045 Move W8, [X0+24]
	046 Compare W8, 0
	047 JumpIfEqual {54}
	048 Move [X0+32], W19
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Return X0
	054 Call 0x1C17F28
	055 Call 0x1C17F20

Method: System.Void GetNFIValues(System.Globalization.NumberFormatInfo nfi)

Disassembly:
	0x0333B968 STP X20, X19, [X31 + 0x30]
	0x0333B96C MOV W20, W1
	0x0333B970 MOV X1, X31
	0x0333B974 MOV X19, X0
	0x0333B978 BL 0x3332E70
	0x0333B97C CMP W20, 0x63
	0x0333B980 B.LT 0x333B9B0
	0x0333B984 LDR X8, [X19 + 0x20]
	0x0333B988 CBZ X8, 0x333BA90
	0x0333B98C LDR W8, [X8 + 0x10]
	0x0333B990 CMP W8, W20
	0x0333B994 B.LT 0x333B9B0
	0x0333B998 STR W20, [X19 + 0x18]
	0x0333B99C LDP X20, X19, [X31 + 0x30]
	0x0333B9A0 LDP X22, X21, [X31 + 0x20]
	0x0333B9A4 LDP X30, X23, [X31 + 0x10]
	0x0333B9A8 ADD X31, X31, 0x40
	0x0333B9AC RET
	0x0333B9B0 ADRP X0, 0xDBA000
	0x0333B9B4 LDR X0, [X0 + 0xC48]
	0x0333B9B8 BL 0x1C16D08
	0x0333B9BC BL 0x19903D0
	0x0333B9C0 BL 0x33387A0
	0x0333B9C4 MOV X20, X0
	0x0333B9C8 ADRP X0, 0xDE7000
	0x0333B9CC LDR X0, [X0 + 0x370]
	0x0333B9D0 BL 0x1C16D08
	0x0333B9D4 MOV X1, X31
	0x0333B9D8 BL 0x33BDD84
	0x0333B9DC MOVZ W8, 0x63
	0x0333B9E0 STR W8, [X31 + 0xC]
	0x0333B9E4 ADRP X22, 0xDB8000
	0x0333B9E8 LDR X22, [X22 + 0x758]
	0x0333B9EC MOV X21, X0
	0x0333B9F0 MOV X0, X22
	0x0333B9F4 BL 0x1C16D08
	0x0333B9F8 ADD X1, X31, 0xC
	0x0333B9FC BL 0x1C16E04
	0x0333BA00 LDR X19, [X19 + 0x20]
	0x0333BA04 MOV X23, X0
	0x0333BA08 MOV X0, X19
	0x0333BA0C BL 0x19903C0
	0x0333BA10 LDR W8, [X19 + 0x10]
	0x0333BA14 MOV X0, X22
	0x0333BA18 STR W8, [X31 + 0x8]
	0x0333BA1C BL 0x1C16D08
	0x0333BA20 ADD X1, X31, 0x8
	0x0333BA24 BL 0x1C16E04
	0x0333BA28 MOV X3, X0
	0x0333BA2C MOV X0, X20
	0x0333BA30 MOV X1, X21
	0x0333BA34 MOV X2, X23
	0x0333BA38 MOV X4, X31
	0x0333BA3C BL 0x3227D58
	0x0333BA40 MOV X19, X0
	0x0333BA44 ADRP X0, 0xDC0000
	0x0333BA48 LDR X0, [X0 + 0x760]
	0x0333BA4C BL 0x1C16D08
	0x0333BA50 BL 0x1C16F10
	0x0333BA54 MOV X20, X0
	0x0333BA58 ADRP X0, 0xDED000
	0x0333BA5C LDR X0, [X0 + 0x5A8]
	0x0333BA60 BL 0x1C16D08
	0x0333BA64 MOV X1, X0
	0x0333BA68 MOV X0, X20
	0x0333BA6C MOV X2, X19
	0x0333BA70 MOV X3, X31
	0x0333BA74 BL 0x3311888
	0x0333BA78 ADRP X0, 0xDED000
	0x0333BA7C LDR X0, [X0 + 0xAE8]
	0x0333BA80 BL 0x1C16D08
	0x0333BA84 MOV X1, X0
	0x0333BA88 MOV X0, X20
	0x0333BA8C BL 0x1C16DEC
	0x0333BA90 BL 0x1C16F20
	0x0333BA94 SUB X31, X31, 0x40
	0x0333BA98 STP X30, X23, [X31 + 0x10]
	0x0333BA9C STP X22, X21, [X31 + 0x20]
	0x0333BAA0 STP X20, X19, [X31 + 0x30]
	0x0333BAA4 CMP W1, 0x0
	0x0333BAA8 B.LE 0x333BAD8
	0x0333BAAC LDR X8, [X0 + 0x20]
	0x0333BAB0 CBZ X8, 0x333BAF0
	0x0333BAB4 LDR W8, [X8 + 0x10]
	0x0333BAB8 CMP W8, W1
	0x0333BABC B.LT 0x333BAF4
	0x0333BAC0 LDP X20, X19, [X31 + 0x30]
	0x0333BAC4 LDP X22, X21, [X31 + 0x20]
	0x0333BAC8 LDP X30, X23, [X31 + 0x10]
	0x0333BACC MOV W0, W1
	0x0333BAD0 ADD X31, X31, 0x40
	0x0333BAD4 RET
	0x0333BAD8 ADRP X0, 0xDEB000
	0x0333BADC LDR X0, [X0 + 0xD28]
	0x0333BAE0 BL 0x1C16D08
	0x0333BAE4 MOV X1, X31
	0x0333BAE8 BL 0x33BDD84
	0x0333BAEC B 0x333BB8C
	0x0333BAF0 BL 0x1C16F20
	0x0333BAF4 ADRP X8, 0xDBA000
	0x0333BAF8 LDR X8, [X8 + 0xC48]
	0x0333BAFC MOV X22, X0

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+96], X30
	003 Move [X31+112], X20
	004 Move [X31+120], X19
	005 NotImplemented "Instruction MOVI not yet implemented."
	006 Move [X31+76], V0
	007 Move [X31+48], V0
	008 Move [X31+56], V0
	009 Move [X31+16], V0
	010 Move [X31+24], V0
	011 Move [X31], V0
	012 Move X20, X0
	013 Move X0, [X0+88]
	014 Move X19, X1
	015 Move X1, X31
	016 Call String.IsNullOrEmpty, X0
	017 Move TEMP, X0
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfNotEqual {23}
	021 Compare X19, 0
	022 JumpIfNotEqual {106}
	023 NotImplemented "Instruction MOVI not yet implemented."
	024 Move [X31+76], V0
	025 Move [X31+48], V0
	026 Move [X31+56], V0
	027 Move [X31+16], V0
	028 Move [X31+24], V0
	029 Move [X31], V0
	030 Move W0, [X20+104]
	031 Add X1, X31, 0
	032 Call 0x1C438CC
	033 Move W1, [X31+12]
	034 Move W2, [X31+16]
	035 Move X20, X0
	036 Call CultureData.create_group_sizes_array, X0, X1, X2
	037 Compare X19, 0
	038 JumpIfEqual {117}
	039 Move [X19+24], X0
	040 Move W1, [X31+56]
	041 Move W2, [X31+60]
	042 Call CultureData.create_group_sizes_array, X0, X1, X2
	043 Move [X19+16], X0
	044 Move W1, [X31+32]
	045 Move X0, X20
	046 Call CultureData.idx2string, X0, X1
	047 Move X1, X0
	048 Move X0, X19
	049 Call NumberFormatInfo.set_NaNSymbol, X0, X1
	050 Move W8, [X31]
	051 Move W1, [X31+4]
	052 Move X0, X20
	053 Move [X19+176], W8
	054 Call CultureData.idx2string, X0, X1
	055 Move [X19+80], X0
	056 Move W1, [X31+8]
	057 Move X0, X20
	058 Call CultureData.idx2string, X0, X1
	059 Move [X19+72], X0
	060 NotImplemented "Instruction LDUR not yet implemented."
	061 Move X0, X20
	062 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	063 Move [X19+180], D0
	064 Move W1, [X31+28]
	065 Call CultureData.idx2string, X0, X1
	066 Move [X19+88], X0
	067 Move W1, [X31+36]
	068 Move X0, X20
	069 Call CultureData.idx2string, X0, X1
	070 Move [X19+120], X0
	071 Move W1, [X31+40]
	072 Move X0, X20
	073 Call CultureData.idx2string, X0, X1
	074 Move [X19+48], X0
	075 Move W8, [X31+44]
	076 Move W1, [X31+48]
	077 Move X0, X20
	078 Move [X19+172], W8
	079 Call CultureData.idx2string, X0, X1
	080 Move [X19+56], X0
	081 Move W1, [X31+52]
	082 Move X0, X20
	083 Call CultureData.idx2string, X0, X1
	084 Move [X19+64], X0
	085 Move W8, [X31+64]
	086 Move W1, [X31+68]
	087 Move X0, X20
	088 Move [X19+188], W8
	089 Call CultureData.idx2string, X0, X1
	090 Move [X19+152], X0
	091 Move V0, [X31+72]
	092 Move X0, X20
	093 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	094 Move [X19+192], D0
	095 Move W1, [X31+80]
	096 Call CultureData.idx2string, X0, X1
	097 Move [X19+144], X0
	098 Move W1, [X31+84]
	099 Move X0, X20
	100 Call CultureData.idx2string, X0, X1
	101 Move [X19+112], X0
	102 Move W1, [X31+88]
	103 Move X0, X20
	104 Call CultureData.idx2string, X0, X1
	105 Move [X19+40], X0
	106 Move W8, [X19+172]
	107 Move X9, [X19+16]
	108 NotImplemented "Instruction LDUR not yet implemented."
	109 Move X30, [X31+96]
	110 Move [X19+200], W8
	111 Move [X19+32], X9
	112 Move [X19+8], V0
	113 Move X20, [X31+112]
	114 Move X19, [X31+120]
	115 Add X31, X31, 128
	116 Return 
	117 Call 0x1C17F20

Method: System.Byte* fill_number_data(System.Int32 index, ref System.Globalization.CultureData/NumberFormatEntryManaged nfe)

Disassembly:
	0x03341DB8 BL 0x1C16CF4

ISIL:
	001 Call 0x1C438CC
	002 Return X0

