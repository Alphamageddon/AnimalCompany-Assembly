Type: System.Globalization.DateTimeFormatInfo

Method: System.String get_CultureName()

Disassembly:
	0x03325334 B.CS 0x33253C0
	0x03325338 ADD X8, X8, W9, 0x3, UXTW
	0x0332533C LDR X0, [X8 + 0x20]
	0x03325340 LDP X20, X19, [X31 + 0x10]
	0x03325344 LDR X30, [X31], #0x20
	0x03325348 RET
	0x0332534C MOV X0, X19
	0x03325350 MOV W1, W20
	0x03325354 LDP X20, X19, [X31 + 0x10]
	0x03325358 LDR X30, [X31], #0x20
	0x0332535C B 0x33251B0

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+24]
	003 Compare X8, 0
	004 JumpIfNotEqual {10}
	005 Move X8, [X0+16]
	006 Compare X8, 0
	007 JumpIfEqual {13}
	008 Move X8, [X8+88]
	009 Move [X0+24], X8
	010 Move X0, X8
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F20

Method: System.Globalization.CultureInfo get_Culture()

Disassembly:
	0x03325360 BL 0x1C16F20
	0x03325364 ADRP X0, 0xDD6000
	0x03325368 LDR X0, [X0 + 0x760]
	0x0332536C BL 0x1C16D08
	0x03325370 BL 0x1C16F10
	0x03325374 MOV X19, X0
	0x03325378 ADRP X0, 0xE03000
	0x0332537C LDR X0, [X0 + 0x340]
	0x03325380 BL 0x1C16D08
	0x03325384 MOV X20, X0
	0x03325388 ADRP X0, 0xE03000
	0x0332538C LDR X0, [X0 + 0x348]
	0x03325390 BL 0x1C16D08
	0x03325394 MOV X2, X0
	0x03325398 MOV X0, X19
	0x0332539C MOV X1, X20
	0x033253A0 MOV X3, X31
	0x033253A4 BL 0x3311888
	0x033253A8 ADRP X0, 0xE03000
	0x033253AC LDR X0, [X0 + 0x358]
	0x033253B0 BL 0x1C16D08
	0x033253B4 MOV X1, X0
	0x033253B8 MOV X0, X19
	0x033253BC BL 0x1C16DEC
	0x033253C0 BL 0x1C16F28
	0x033253C4 STR X30, [X31 - 0x20]!
	0x033253C8 STP X20, X19, [X31 + 0x10]
	0x033253CC MOV X19, X0
	0x033253D0 LDR X0, [X0 + 0x130]
	0x033253D4 CBNZ X0, 0x3325408
	0x033253D8 LDR X0, [X19 + 0x78]
	0x033253DC CBZ X0, 0x3325414
	0x033253E0 LDR X8, [X0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10B8000
	005 Move W8, [X20+3198]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDD1000
	012 Move X0, [X0+3144]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3198], W8
	016 Move X0, [X19+48]
	017 Compare X0, 0
	018 JumpIfNotEqual {38}
	019 Move X20, [X19+24]
	020 Compare X20, 0
	021 JumpIfNotEqual {27}
	022 Move X8, [X19+16]
	023 Compare X8, 0
	024 JumpIfEqual {42}
	025 Move X20, [X8+88]
	026 Move [X19+24], X20
	027 Move X8, 0xDD1000
	028 Move X8, [X8+3144]
	029 Move X0, [X8]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move X1, X31
	036 Call CultureInfo.GetCultureInfo, X0
	037 Move [X19+48], X0
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Return X0
	042 Call 0x1C17F20

Method: System.String get_LanguageName()

Disassembly:
	0x033253E4 LDR X20, [X19 + 0x10]
	0x033253E8 LDP X9, X1, [X8 + 0x1A8]
	0x033253EC BLR X9
	0x033253F0 CBZ X20, 0x3325414
	0x033253F4 MOV W1, W0
	0x033253F8 MOV X0, X20
	0x033253FC MOV X2, X31
	0x03325400 BL 0x33406D0
	0x03325404 STR X0, [X19 + 0x130]
	0x03325408 LDP X20, X19, [X31 + 0x10]
	0x0332540C LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+32]
	003 Compare X8, 0
	004 JumpIfNotEqual {10}
	005 Move X8, [X0+16]
	006 Compare X8, 0
	007 JumpIfEqual {13}
	008 Move X8, [X8+80]
	009 Move [X0+32], X8
	010 Move X0, X8
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F20

Method: System.String[] internalGetAbbreviatedDayOfWeekNames()

Disassembly:
	0x03325410 RET
	0x03325414 BL 0x1C16F20
	0x03325418 STR X30, [X31 - 0x20]!
	0x0332541C STP X20, X19, [X31 + 0x10]
	0x03325420 MOV X19, X0

ISIL:
	001 Move X8, [X0+144]
	002 Compare X8, 0
	003 Invalid "Jump target not found in method."
	004 Move X0, X8
	005 Return X0

Method: System.String[] internalGetAbbreviatedDayOfWeekNamesCore()

Disassembly:
	0x03325424 LDR X0, [X0 + 0x48]
	0x03325428 CBNZ X0, 0x332545C
	0x0332542C LDR X0, [X19 + 0x78]
	0x03325430 CBZ X0, 0x3325468
	0x03325434 LDR X8, [X0]
	0x03325438 LDR X20, [X19 + 0x10]
	0x0332543C LDP X9, X1, [X8 + 0x1A8]
	0x03325440 BLR X9
	0x03325444 CBZ X20, 0x3325468
	0x03325448 MOV W1, W0
	0x0332544C MOV X0, X20
	0x03325450 MOV X2, X31
	0x03325454 BL 0x3340820
	0x03325458 STR X0, [X19 + 0x48]
	0x0332545C LDP X20, X19, [X31 + 0x10]
	0x03325460 LDR X30, [X31], #0x20
	0x03325464 RET
	0x03325468 BL 0x1C16F20
	0x0332546C STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+120]
	006 Compare X0, 0
	007 JumpIfEqual {24}
	008 Move X8, [X0]
	009 Move X20, [X19+16]
	010 Move X9, [X8+424]
	011 Move X1, [X8+432]
	012 NotImplemented "Instruction BLR not yet implemented."
	013 Compare X20, 0
	014 JumpIfEqual {24}
	015 Move W1, W0
	016 Move X0, X20
	017 Move X2, X31
	018 Call CultureData.AbbreviatedDayNames, X0, X1
	019 Move [X19+144], X0
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0
	024 Call 0x1C17F20

Method: System.String[] internalGetDayOfWeekNames()

Disassembly:
	0x03325470 STP X20, X19, [X31 + 0x10]
	0x03325474 ADRP X20, 0x10B7000
	0x03325478 LDRB W8, [X20 + 0xC86]
	0x0332547C MOV X19, X0
	0x03325480 TBNZ X8, 0x0, 0x3325498

ISIL:
	001 Move X8, [X0+160]
	002 Compare X8, 0
	003 Invalid "Jump target not found in method."
	004 Move X0, X8
	005 Return X0

Method: System.String[] internalGetDayOfWeekNamesCore()

Disassembly:
	0x03325484 ADRP X0, 0xDCE000
	0x03325488 LDR X0, [X0 + 0xDD8]
	0x0332548C BL 0x1C16CF4
	0x03325490 MOVZ W8, 0x1
	0x03325494 STRB W8, [X20 + 0xC86]
	0x03325498 LDR X0, [X19 + 0x88]
	0x0332549C CBNZ X0, 0x33254D4
	0x033254A0 MOV X0, X19
	0x033254A4 BL 0x33254E0
	0x033254A8 MOV X20, X0
	0x033254AC MOV X0, X19
	0x033254B0 BL 0x332551C
	0x033254B4 ADRP X8, 0xDCE000
	0x033254B8 LDR X8, [X8 + 0xDD8]
	0x033254BC MOV X2, X0
	0x033254C0 MOV X0, X20
	0x033254C4 MOV X3, X31
	0x033254C8 LDR X1, [X8]
	0x033254CC BL 0x32274B8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+120]
	006 Compare X0, 0
	007 JumpIfEqual {24}
	008 Move X8, [X0]
	009 Move X20, [X19+16]
	010 Move X9, [X8+424]
	011 Move X1, [X8+432]
	012 NotImplemented "Instruction BLR not yet implemented."
	013 Compare X20, 0
	014 JumpIfEqual {24}
	015 Move W1, W0
	016 Move X0, X20
	017 Move X2, X31
	018 Call CultureData.DayNames, X0, X1
	019 Move [X19+160], X0
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0
	024 Call 0x1C17F20

Method: System.String[] internalGetAbbreviatedMonthNames()

Disassembly:
	0x033254D0 STR X0, [X19 + 0x88]
	0x033254D4 LDP X20, X19, [X31 + 0x10]
	0x033254D8 LDR X30, [X31], #0x20
	0x033254DC RET
	0x033254E0 STP X30, X19, [X31 - 0x10]!

ISIL:
	001 Move X8, [X0+168]
	002 Compare X8, 0
	003 Invalid "Jump target not found in method."
	004 Move X0, X8
	005 Return X0

Method: System.String[] internalGetAbbreviatedMonthNamesCore()

Disassembly:
	0x033254E4 MOV X19, X0
	0x033254E8 LDR X0, [X0 + 0xD0]
	0x033254EC CBNZ X0, 0x332550C
	0x033254F0 MOV X0, X19
	0x033254F4 BL 0x3325558
	0x033254F8 CBZ X0, 0x3325514
	0x033254FC LDR W8, [X0 + 0x18]
	0x03325500 CBZ W8, 0x3325518
	0x03325504 LDR X0, [X0 + 0x20]
	0x03325508 STR X0, [X19 + 0xD0]
	0x0332550C LDP X30, X19, [X31], #0x10
	0x03325510 RET
	0x03325514 BL 0x1C16F20
	0x03325518 BL 0x1C16F28
	0x0332551C STP X30, X19, [X31 - 0x10]!
	0x03325520 MOV X19, X0
	0x03325524 LDR X0, [X0 + 0xE8]
	0x03325528 CBNZ X0, 0x3325548
	0x0332552C MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+120]
	006 Compare X0, 0
	007 JumpIfEqual {24}
	008 Move X8, [X0]
	009 Move X20, [X19+16]
	010 Move X9, [X8+424]
	011 Move X1, [X8+432]
	012 NotImplemented "Instruction BLR not yet implemented."
	013 Compare X20, 0
	014 JumpIfEqual {24}
	015 Move W1, W0
	016 Move X0, X20
	017 Move X2, X31
	018 Call CultureData.AbbreviatedMonthNames, X0, X1
	019 Move [X19+168], X0
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0
	024 Call 0x1C17F20

Method: System.String[] internalGetMonthNames()

Disassembly:
	0x03325530 BL 0x33255AC
	0x03325534 CBZ X0, 0x3325550
	0x03325538 LDR W8, [X0 + 0x18]
	0x0332553C CBZ W8, 0x3325554
	0x03325540 LDR X0, [X0 + 0x20]

ISIL:
	001 Move X8, [X0+176]
	002 Compare X8, 0
	003 Invalid "Jump target not found in method."
	004 Move X0, X8
	005 Return X0

Method: System.String[] internalGetMonthNamesCore()

Disassembly:
	0x03325544 STR X0, [X19 + 0xE8]
	0x03325548 LDP X30, X19, [X31], #0x10
	0x0332554C RET
	0x03325550 BL 0x1C16F20
	0x03325554 BL 0x1C16F28
	0x03325558 STR X30, [X31 - 0x20]!
	0x0332555C STP X20, X19, [X31 + 0x10]
	0x03325560 MOV X19, X0
	0x03325564 LDR X0, [X0 + 0x108]
	0x03325568 CBNZ X0, 0x332559C
	0x0332556C LDR X0, [X19 + 0x78]
	0x03325570 CBZ X0, 0x33255A8
	0x03325574 LDR X8, [X0]
	0x03325578 LDR X20, [X19 + 0x10]
	0x0332557C LDP X9, X1, [X8 + 0x1A8]
	0x03325580 BLR X9
	0x03325584 CBZ X20, 0x33255A8
	0x03325588 MOV W1, W0
	0x0332558C MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+120]
	006 Compare X0, 0
	007 JumpIfEqual {24}
	008 Move X8, [X0]
	009 Move X20, [X19+16]
	010 Move X9, [X8+424]
	011 Move X1, [X8+432]
	012 NotImplemented "Instruction BLR not yet implemented."
	013 Compare X20, 0
	014 JumpIfEqual {24}
	015 Move W1, W0
	016 Move X0, X20
	017 Move X2, X31
	018 Call CultureData.MonthNames, X0, X1
	019 Move [X19+176], X0
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0
	024 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03325590 MOV X2, X31
	0x03325594 BL 0x3340708
	0x03325598 STR X0, [X19 + 0x108]
	0x0332559C LDP X20, X19, [X31 + 0x10]
	0x033255A0 LDR X30, [X31], #0x20
	0x033255A4 RET
	0x033255A8 BL 0x1C16F20
	0x033255AC STP X30, X19, [X31 - 0x10]!
	0x033255B0 MOV X19, X0
	0x033255B4 LDR X0, [X0 + 0x118]
	0x033255B8 CBNZ X0, 0x33255D0
	0x033255BC LDR X0, [X19 + 0x10]
	0x033255C0 CBZ X0, 0x33255D8
	0x033255C4 MOV X1, X31
	0x033255C8 BL 0x3340348
	0x033255CC STR X0, [X19 + 0x118]
	0x033255D0 LDP X30, X19, [X31], #0x10
	0x033255D4 RET
	0x033255D8 BL 0x1C16F20
	0x033255DC STR X30, [X31 - 0x20]!
	0x033255E0 STP X20, X19, [X31 + 0x10]
	0x033255E4 MOV X19, X0
	0x033255E8 LDR X0, [X0 + 0x68]
	0x033255EC CBNZ X0, 0x3325620
	0x033255F0 LDR X0, [X19 + 0x78]
	0x033255F4 CBZ X0, 0x332562C
	0x033255F8 LDR X8, [X0]
	0x033255FC LDR X20, [X19 + 0x10]
	0x03325600 LDP X9, X1, [X8 + 0x1A8]
	0x03325604 BLR X9
	0x03325608 CBZ X20, 0x332562C
	0x0332560C MOV W1, W0
	0x03325610 MOV X0, X20
	0x03325614 MOV X2, X31
	0x03325618 BL 0x3340804
	0x0332561C STR X0, [X19 + 0x68]
	0x03325620 LDP X20, X19, [X31 + 0x10]
	0x03325624 LDR X30, [X31], #0x20
	0x03325628 RET
	0x0332562C BL 0x1C16F20
	0x03325630 STR X30, [X31 - 0x10]!
	0x03325634 LDR X8, [X0 + 0x40]
	0x03325638 CBNZ X8, 0x332564C
	0x0332563C LDR X8, [X0 + 0x10]
	0x03325640 CBZ X8, 0x3325658
	0x03325644 LDR X8, [X8 + 0x18]
	0x03325648 STR X8, [X0 + 0x40]
	0x0332564C MOV X0, X8
	0x03325650 LDR X30, [X31], #0x10
	0x03325654 RET
	0x03325658 BL 0x1C16F20
	0x0332565C STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10B8000
	006 Move X20, 0xDD1000
	007 Move W8, [X21+3199]
	008 Move X20, [X20+3144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xDD1000
	015 Move X0, [X0+3144]
	016 Call 0x1C17CF4
	017 Move X0, 0xE04000
	018 Move X0, [X0+784]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3199], W8
	022 NotImplemented "Instruction MOVI not yet implemented."
	023 Move TEMP, 0
	024 Not TEMP
	025 Move W8, TEMP
	026 Move X0, X19
	027 Move X1, X31
	028 Move [X19+128], D0
	029 Move [X19+324], W8
	030 Call Object..ctor, X0
	031 Move X0, [X20]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X31
	037 Call CultureInfo.get_InvariantCulture
	038 Compare X0, 0
	039 JumpIfEqual {67}
	040 Move X8, [X0+192]
	041 Move X9, 0xE04000
	042 Move X9, [X9+784]
	043 Move [X19+16], X8
	044 Move X0, [X9]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Call GregorianCalendar.GetDefaultInstance
	050 Move [X19+120], X0
	051 Compare X0, 0
	052 JumpIfEqual {67}
	053 Move X8, [X0]
	054 Move X20, [X19+16]
	055 Move X9, [X8+424]
	056 Move X1, [X8+432]
	057 NotImplemented "Instruction BLR not yet implemented."
	058 Move W2, W0
	059 Move X0, X19
	060 Move X1, X20
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X30, [X31+32]
	064 Move X21, [X31+40]
	065 Call DateTimeFormatInfo.InitializeOverridableProperties, X0, X1, X2
	066 Return 
	067 Call 0x1C17F20

Method: System.Void .ctor(System.Globalization.CultureData cultureData, System.Globalization.Calendar cal)

Disassembly:
	0x03325844 LDR X30, [X31], #0x20
	0x03325848 RET
	0x0332584C STR X30, [X31 - 0x20]!
	0x03325850 STP X20, X19, [X31 + 0x10]
	0x03325854 ADRP X20, 0x10B7000
	0x03325858 LDRB W8, [X20 + 0xC8A]
	0x0332585C MOV X19, X0
	0x03325860 TBNZ X8, 0x0, 0x3325878
	0x03325864 ADRP X0, 0xDCE000
	0x03325868 LDR X0, [X0 + 0xDD8]
	0x0332586C BL 0x1C16CF4
	0x03325870 MOVZ W8, 0x1
	0x03325874 STRB W8, [X20 + 0xC8A]
	0x03325878 LDR X0, [X19 + 0x58]
	0x0332587C CBNZ X0, 0x33258B4
	0x03325880 MOV X0, X19
	0x03325884 BL 0x332569C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, X1
	006 NotImplemented "Instruction MOVI not yet implemented."
	007 Move TEMP, 0
	008 Not TEMP
	009 Move W8, TEMP
	010 Move X1, X31
	011 Move X19, X2
	012 Move X21, X0
	013 Move [X0+128], D0
	014 Move [X0+324], W8
	015 Call Object..ctor, X0
	016 Move [X21+16], X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X0, X21
	021 Move X30, [X31+32]
	022 Move X21, [X31+40]

Method: System.Void InitializeOverridableProperties(System.Globalization.CultureData cultureData, System.Int32 calendarId)

Disassembly:
	0x03325728 BL 0x1C16F20
	0x0332572C STP X30, X19, [X31 - 0x10]!
	0x03325730 MOV X19, X0
	0x03325734 LDR X0, [X0 + 0xF0]
	0x03325738 CBNZ X0, 0x3325758
	0x0332573C MOV X0, X19
	0x03325740 BL 0x3325768
	0x03325744 CBZ X0, 0x3325760
	0x03325748 LDR W8, [X0 + 0x18]
	0x0332574C CBZ W8, 0x3325764
	0x03325750 LDR X0, [X0 + 0x20]
	0x03325754 STR X0, [X19 + 0xF0]
	0x03325758 LDP X30, X19, [X31], #0x10
	0x0332575C RET
	0x03325760 BL 0x1C16F20
	0x03325764 BL 0x1C16F28
	0x03325768 STP X30, X19, [X31 - 0x10]!
	0x0332576C MOV X19, X0
	0x03325770 LDR X0, [X0 + 0x110]
	0x03325774 CBNZ X0, 0x332578C
	0x03325778 LDR X0, [X19 + 0x10]
	0x0332577C CBZ X0, 0x3325794
	0x03325780 MOV X1, X31
	0x03325784 BL 0x3340360
	0x03325788 STR X0, [X19 + 0x110]
	0x0332578C LDP X30, X19, [X31], #0x10
	0x03325790 RET
	0x03325794 BL 0x1C16F20
	0x03325798 STR X30, [X31 - 0x20]!
	0x0332579C STP X20, X19, [X31 + 0x10]
	0x033257A0 ADRP X19, 0x10B7000
	0x033257A4 ADRP X20, 0xE03000
	0x033257A8 LDRB W8, [X19 + 0xC88]
	0x033257AC LDR X20, [X20 + 0x368]
	0x033257B0 TBNZ X8, 0x0, 0x33257C8
	0x033257B4 ADRP X0, 0xE03000
	0x033257B8 LDR X0, [X0 + 0x368]
	0x033257BC BL 0x1C16CF4
	0x033257C0 MOVZ W8, 0x1
	0x033257C4 STRB W8, [X19 + 0xC88]
	0x033257C8 LDR X0, [X20]
	0x033257CC LDP X20, X19, [X31 + 0x10]
	0x033257D0 LDR X30, [X31], #0x20
	0x033257D4 RET
	0x033257D8 STR X30, [X31 - 0x20]!
	0x033257DC STP X20, X19, [X31 + 0x10]
	0x033257E0 ADRP X20, 0x10B7000
	0x033257E4 LDRB W8, [X20 + 0xC89]
	0x033257E8 MOV X19, X0
	0x033257EC TBNZ X8, 0x0, 0x3325804
	0x033257F0 ADRP X0, 0xDCE000
	0x033257F4 LDR X0, [X0 + 0xDD8]
	0x033257F8 BL 0x1C16CF4
	0x033257FC MOVZ W8, 0x1
	0x03325800 STRB W8, [X20 + 0xC89]
	0x03325804 LDR X0, [X19 + 0x50]
	0x03325808 CBNZ X0, 0x3325840
	0x0332580C MOV X0, X19
	0x03325810 BL 0x332569C
	0x03325814 MOV X20, X0
	0x03325818 MOV X0, X19
	0x0332581C BL 0x332572C
	0x03325820 ADRP X8, 0xDCE000
	0x03325824 LDR X8, [X8 + 0xDD8]
	0x03325828 MOV X2, X0
	0x0332582C MOV X0, X20
	0x03325830 MOV X3, X31
	0x03325834 LDR X1, [X8]
	0x03325838 BL 0x32274B8
	0x0332583C STR X0, [X19 + 0x50]
	0x03325840 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W8, [X0+128]
	006 Move W20, W2
	007 Move X19, X0
	008 Move X21, X1
	009 Add W31, W8, 1
	010 Compare X21, 0
	011 JumpIfEqual {86}
	012 Move W8, [X21+56]
	013 Move [X19+128], W8
	014 Move W8, [X19+132]
	015 Add W31, W8, 1
	016 Compare X21, 0
	017 JumpIfEqual {86}
	018 Move W8, [X21+60]
	019 Move [X19+132], W8
	020 Move X8, [X19+56]
	021 Compare X8, 0
	022 JumpIfNotEqual {27}
	023 Compare X21, 0
	024 JumpIfEqual {86}
	025 Move X8, [X21+16]
	026 Move [X19+56], X8
	027 Move X8, [X19+64]
	028 Compare X8, 0
	029 JumpIfNotEqual {34}
	030 Compare X21, 0
	031 JumpIfEqual {86}
	032 Move X8, [X21+24]
	033 Move [X19+64], X8
	034 Move X8, [X19+96]
	035 Compare X8, 0
	036 JumpIfNotEqual {41}
	037 Compare X21, 0
	038 JumpIfEqual {86}
	039 Move X8, [X21+32]
	040 Move [X19+96], X8
	041 Move X8, [X19+72]
	042 Compare X8, 0
	043 JumpIfNotEqual {51}
	044 Compare X21, 0
	045 JumpIfEqual {86}
	046 Move X0, X21
	047 Move W1, W20
	048 Move X2, X31
	049 Call CultureData.DateSeparator, X0, X1
	050 Move [X19+72], X0
	051 Move X0, [X19+16]
	052 Compare X0, 0
	053 JumpIfEqual {86}
	054 Move X1, X31
	055 Call CultureData.get_LongTimes, X0
	056 Move X8, [X19+16]
	057 Move [X19+280], X0
	058 Compare X8, 0
	059 JumpIfEqual {86}
	060 Move X0, X8
	061 Move X1, X31
	062 Call CultureData.get_ShortTimes, X0
	063 Move [X19+272], X0
	064 Compare X21, 0
	065 JumpIfEqual {86}
	066 Move X0, X21
	067 Move W1, W20
	068 Move X2, X31
	069 Call CultureData.LongDates, X0, X1
	070 Move [X19+264], X0
	071 Move X0, X21
	072 Move W1, W20
	073 Move X2, X31
	074 Call CultureData.ShortDates, X0, X1
	075 Move [X19+256], X0
	076 Move X0, X21
	077 Move W1, W20
	078 Move X2, X31
	079 Call CultureData.YearMonths, X0, X1
	080 Move [X19+248], X0
	081 Move X20, [X31+16]
	082 Move X19, [X31+24]
	083 Move X30, [X31+32]
	084 Move X21, [X31+40]
	085 Return 
	086 Call 0x1C17F20

Method: System.Globalization.DateTimeFormatInfo get_InvariantInfo()

Disassembly:
	0x03325B20 LDP X9, X1, [X8 + 0x1A8]
	0x03325B24 BLR X9
	0x03325B28 CBZ X20, 0x3325B4C
	0x03325B2C MOV W1, W0
	0x03325B30 MOV X0, X20
	0x03325B34 MOV X2, X31
	0x03325B38 BL 0x3340724
	0x03325B3C STR X0, [X19 + 0xF8]
	0x03325B40 LDP X20, X19, [X31 + 0x10]
	0x03325B44 LDR X30, [X31], #0x20
	0x03325B48 RET
	0x03325B4C BL 0x1C16F20
	0x03325B50 STR X30, [X31 - 0x20]!
	0x03325B54 STP X20, X19, [X31 + 0x10]
	0x03325B58 ADRP X20, 0x10B7000
	0x03325B5C LDRB W8, [X20 + 0xC8D]
	0x03325B60 MOV X19, X0
	0x03325B64 TBNZ X8, 0x0, 0x3325B7C
	0x03325B68 ADRP X0, 0xDCE000
	0x03325B6C LDR X0, [X0 + 0xAC8]
	0x03325B70 BL 0x1C16CF4
	0x03325B74 MOVZ W8, 0x1
	0x03325B78 STRB W8, [X20 + 0xC8D]
	0x03325B7C LDR X0, [X19 + 0x90]
	0x03325B80 CBNZ X0, 0x3325B90
	0x03325B84 MOV X0, X19
	0x03325B88 BL 0x3324424
	0x03325B8C CBZ X0, 0x3325BD0
	0x03325B90 MOV X1, X31
	0x03325B94 BL 0x33A01F0
	0x03325B98 CBZ X0, 0x3325BB8
	0x03325B9C ADRP X8, 0xDCE000
	0x03325BA0 LDR X8, [X8 + 0xAC8]
	0x03325BA4 MOV X19, X0
	0x03325BA8 LDR X20, [X8]
	0x03325BAC MOV X1, X20
	0x03325BB0 BL 0x1C16E00
	0x03325BB4 CBZ X0, 0x3325BC4
	0x03325BB8 LDP X20, X19, [X31 + 0x10]
	0x03325BBC LDR X30, [X31], #0x20
	0x03325BC0 RET
	0x03325BC4 MOV X0, X19
	0x03325BC8 MOV X1, X20
	0x03325BCC BL 0x1C171E0
	0x03325BD0 BL 0x1C16F20
	0x03325BD4 STR X30, [X31 - 0x20]!
	0x03325BD8 STP X20, X19, [X31 + 0x10]
	0x03325BDC ADRP X20, 0x10B7000
	0x03325BE0 LDRB W8, [X20 + 0xC8E]
	0x03325BE4 MOV X19, X0
	0x03325BE8 TBNZ X8, 0x0, 0x3325C00
	0x03325BEC ADRP X0, 0xDCE000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x10B8000
	005 Move X20, 0xE04000
	006 Move W8, [X19+3200]
	007 Move X20, [X20+808]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE04000
	013 Move X0, [X0+808]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3200], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X20]
	023 Move X8, [X0+184]
	024 Move X19, [X8]
	025 Call 0x1C17D44
	026 Compare X19, 0
	027 JumpIfNotEqual {49}
	028 Move X0, [X20]
	029 Call 0x1C17F10
	030 Move X19, X0
	031 Call DateTimeFormatInfo..ctor, X0
	032 Compare X19, 0
	033 JumpIfEqual {63}
	034 Move X8, [X19+120]
	035 Compare X8, 0
	036 JumpIfEqual {63}
	037 Move W9, 1
	038 Move [X8+20], W9
	039 Move [X19+320], W9
	040 Move X0, [X20]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Call 0x1C17D44
	046 Move X8, [X20]
	047 Move X8, [X8+184]
	048 Move [X8], X19
	049 Move X0, [X20]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {55}
	053 Call 0x1C17DFC
	054 Move X0, [X20]
	055 Move X8, [X0+184]
	056 Move X19, [X8]
	057 Call 0x1C17D44
	058 Move X0, X19
	059 Move X20, [X31+16]
	060 Move X19, [X31+24]
	061 Move X30, [X31+32]
	062 Return X0
	063 Call 0x1C17F20

Method: System.Globalization.DateTimeFormatInfo get_CurrentInfo()

Disassembly:
	0x03325BF0 LDR X0, [X0 + 0xAC8]
	0x03325BF4 BL 0x1C16CF4
	0x03325BF8 MOVZ W8, 0x1
	0x03325BFC STRB W8, [X20 + 0xC8E]
	0x03325C00 LDR X0, [X19 + 0xA0]
	0x03325C04 CBNZ X0, 0x3325C14
	0x03325C08 MOV X0, X19
	0x03325C0C BL 0x3324484
	0x03325C10 CBZ X0, 0x3325C54
	0x03325C14 MOV X1, X31
	0x03325C18 BL 0x33A01F0
	0x03325C1C CBZ X0, 0x3325C3C
	0x03325C20 ADRP X8, 0xDCE000
	0x03325C24 LDR X8, [X8 + 0xAC8]
	0x03325C28 MOV X19, X0
	0x03325C2C LDR X20, [X8]
	0x03325C30 MOV X1, X20
	0x03325C34 BL 0x1C16E00
	0x03325C38 CBZ X0, 0x3325C48
	0x03325C3C LDP X20, X19, [X31 + 0x10]
	0x03325C40 LDR X30, [X31], #0x20
	0x03325C44 RET
	0x03325C48 MOV X0, X19
	0x03325C4C MOV X1, X20
	0x03325C50 BL 0x1C171E0
	0x03325C54 BL 0x1C16F20
	0x03325C58 STR X30, [X31 - 0x20]!
	0x03325C5C STP X20, X19, [X31 + 0x10]
	0x03325C60 ADRP X20, 0x10B7000
	0x03325C64 LDRB W8, [X20 + 0xC8F]
	0x03325C68 MOV X19, X0
	0x03325C6C TBNZ X8, 0x0, 0x3325C84
	0x03325C70 ADRP X0, 0xDCE000
	0x03325C74 LDR X0, [X0 + 0xAC8]
	0x03325C78 BL 0x1C16CF4
	0x03325C7C MOVZ W8, 0x1
	0x03325C80 STRB W8, [X20 + 0xC8F]
	0x03325C84 LDR X0, [X19 + 0xA8]
	0x03325C88 CBNZ X0, 0x3325C98
	0x03325C8C MOV X0, X19
	0x03325C90 BL 0x33244E4
	0x03325C94 CBZ X0, 0x3325CD8
	0x03325C98 MOV X1, X31
	0x03325C9C BL 0x33A01F0
	0x03325CA0 CBZ X0, 0x3325CC0
	0x03325CA4 ADRP X8, 0xDCE000
	0x03325CA8 LDR X8, [X8 + 0xAC8]
	0x03325CAC MOV X19, X0
	0x03325CB0 LDR X20, [X8]
	0x03325CB4 MOV X1, X20
	0x03325CB8 BL 0x1C16E00
	0x03325CBC CBZ X0, 0x3325CCC
	0x03325CC0 LDP X20, X19, [X31 + 0x10]
	0x03325CC4 LDR X30, [X31], #0x20
	0x03325CC8 RET
	0x03325CCC MOV X0, X19
	0x03325CD0 MOV X1, X20
	0x03325CD4 BL 0x1C171E0
	0x03325CD8 BL 0x1C16F20
	0x03325CDC STR X30, [X31 - 0x20]!
	0x03325CE0 STP X20, X19, [X31 + 0x10]
	0x03325CE4 ADRP X20, 0x10B7000
	0x03325CE8 LDRB W8, [X20 + 0xC90]
	0x03325CEC MOV X19, X0
	0x03325CF0 TBNZ X8, 0x0, 0x3325D08
	0x03325CF4 ADRP X0, 0xDCE000
	0x03325CF8 LDR X0, [X0 + 0xAC8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x10B8000
	005 Move X20, 0xDD1000
	006 Move W8, [X19+3201]
	007 Move X20, [X20+3144]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {26}
	012 Move X0, 0xDD1000
	013 Move X0, [X0+3144]
	014 Call 0x1C17CF4
	015 Move X0, 0xE04000
	016 Move X0, [X0+816]
	017 Call 0x1C17CF4
	018 Move X0, 0xE04000
	019 Move X0, [X0+808]
	020 Call 0x1C17CF4
	021 Move X0, 0xDCF000
	022 Move X0, [X0+1728]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X19+3201], W8
	026 Move X0, [X20]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X31
	032 Call CultureInfo.get_CurrentCulture
	033 Compare X0, 0
	034 JumpIfEqual {77}
	035 Move W8, [X0+200]
	036 Move X19, X0
	037 Compare W8, 0
	038 JumpIfEqual {68}
	039 Move X8, 0xDCF000
	040 Move X8, [X8+1728]
	041 Move X0, [X8]
	042 Move X8, 0xE04000
	043 Move X8, [X8+816]
	044 Move W9, [X0+224]
	045 Move X20, [X8]
	046 Compare W9, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X20
	050 Move X1, X31
	051 Call Type.GetTypeFromHandle, X0
	052 Move X8, [X19]
	053 Move X1, X0
	054 Move X0, X19
	055 Move X9, [X8+616]
	056 Move X2, [X8+624]
	057 NotImplemented "Instruction BLR not yet implemented."
	058 Move X20, X0
	059 Compare X0, 0
	060 JumpIfEqual {72}
	061 Move X8, 0xE04000
	062 Move X8, [X8+808]
	063 Move X1, [X8]
	064 Move X8, [X20]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X0, X20
	067 Call 0x1C181E0
	068 Move X20, [X19+56]
	069 Call 0x1C17D44
	070 Compare X20, 0
	071 JumpIfEqual {39}
	072 Move X0, X20
	073 Move X20, [X31+16]
	074 Move X19, [X31+24]
	075 Move X30, [X31+32]
	076 Return X0
	077 Call 0x1C17F20

Method: System.Globalization.DateTimeFormatInfo GetInstance(System.IFormatProvider provider)

Disassembly:
	0x03325CFC BL 0x1C16CF4
	0x03325D00 MOVZ W8, 0x1
	0x03325D04 STRB W8, [X20 + 0xC90]
	0x03325D08 LDR X0, [X19 + 0xB0]
	0x03325D0C CBNZ X0, 0x3325D1C
	0x03325D10 MOV X0, X19
	0x03325D14 BL 0x3324544
	0x03325D18 CBZ X0, 0x3325D5C
	0x03325D1C MOV X1, X31
	0x03325D20 BL 0x33A01F0
	0x03325D24 CBZ X0, 0x3325D44
	0x03325D28 ADRP X8, 0xDCE000
	0x03325D2C LDR X8, [X8 + 0xAC8]
	0x03325D30 MOV X19, X0
	0x03325D34 LDR X20, [X8]
	0x03325D38 MOV X1, X20
	0x03325D3C BL 0x1C16E00
	0x03325D40 CBZ X0, 0x3325D50
	0x03325D44 LDP X20, X19, [X31 + 0x10]
	0x03325D48 LDR X30, [X31], #0x20
	0x03325D4C RET
	0x03325D50 MOV X0, X19
	0x03325D54 MOV X1, X20
	0x03325D58 BL 0x1C171E0
	0x03325D5C BL 0x1C16F20
	0x03325D60 STR X30, [X31 - 0x10]!
	0x03325D64 MOV X8, X0
	0x03325D68 LDR W0, [X0 + 0x144]
	0x03325D6C ADDS W31, W0, 0x1
	0x03325D70 B.NE 0x3325D7C
	0x03325D74 MOV X0, X8
	0x03325D78 BL 0x3326FB4
	0x03325D7C UBFM W0, W0, 0x2, 0x2
	0x03325D80 LDR X30, [X31], #0x10
	0x03325D84 RET
	0x03325D88 LDR W8, [X0 + 0x144]
	0x03325D8C ADDS W31, W8, 0x1
	0x03325D90 B.EQ 0x3325D9C
	0x03325D94 MOV W0, W8
	0x03325D98 RET
	0x03325D9C B 0x3326FB4
	0x03325DA0 STR X30, [X31 - 0x10]!
	0x03325DA4 MOV X8, X0
	0x03325DA8 LDR W0, [X0 + 0x144]
	0x03325DAC ADDS W31, W0, 0x1
	0x03325DB0 B.NE 0x3325DBC
	0x03325DB4 MOV X0, X8
	0x03325DB8 BL 0x3326FB4
	0x03325DBC UBFM W0, W0, 0x4, 0x4
	0x03325DC0 LDR X30, [X31], #0x10
	0x03325DC4 RET
	0x03325DC8 SUB X31, X31, 0x30
	0x03325DCC STP X30, X21, [X31 + 0x10]
	0x03325DD0 STP X20, X19, [X31 + 0x20]
	0x03325DD4 MOV W19, W1
	0x03325DD8 CMP W2, 0x2
	0x03325DDC MOV X8, X0
	0x03325DE0 B.EQ 0x3325DFC
	0x03325DE4 CMP W2, 0x1
	0x03325DE8 B.NE 0x3325E08
	0x03325DEC AND W1, W3, 0x1
	0x03325DF0 MOV X0, X8
	0x03325DF4 BL 0x3325F28
	0x03325DF8 B 0x3325E30
	0x03325DFC MOV X0, X8
	0x03325E00 BL 0x3325FBC
	0x03325E04 B 0x3325E30
	0x03325E08 TBZ X3, 0x0, 0x3325E20
	0x03325E0C LDR X0, [X8 + 0xA8]
	0x03325E10 CBNZ X0, 0x3325E30
	0x03325E14 MOV X0, X8
	0x03325E18 BL 0x33244E4
	0x03325E1C B 0x3325E30
	0x03325E20 LDR X0, [X8 + 0xB0]
	0x03325E24 CBNZ X0, 0x3325E30
	0x03325E28 MOV X0, X8
	0x03325E2C BL 0x3324544
	0x03325E30 SUBS W8, W19, 0x1
	0x03325E34 B.LT 0x3325E68
	0x03325E38 CBZ X0, 0x3325F20
	0x03325E3C LDR W9, [X0 + 0x18]
	0x03325E40 CMP W9, W19
	0x03325E44 B.LT 0x3325E68
	0x03325E48 CMP W8, W9
	0x03325E4C B.CS 0x3325F24
	0x03325E50 ADD X8, X0, W8, 0x3, UXTW
	0x03325E54 LDR X0, [X8 + 0x20]
	0x03325E58 LDP X20, X19, [X31 + 0x20]
	0x03325E5C LDP X30, X21, [X31 + 0x10]
	0x03325E60 ADD X31, X31, 0x30
	0x03325E64 RET
	0x03325E68 MOVZ W8, 0x1
	0x03325E6C STR W8, [X31 + 0xC]
	0x03325E70 ADRP X19, 0xDCE000
	0x03325E74 LDR X19, [X19 + 0x758]
	0x03325E78 MOV X20, X0
	0x03325E7C MOV X0, X19
	0x03325E80 BL 0x1C16D08
	0x03325E84 ADD X1, X31, 0xC
	0x03325E88 BL 0x1C16E04
	0x03325E8C MOV X21, X0
	0x03325E90 MOV X0, X20
	0x03325E94 BL 0x19903C0
	0x03325E98 LDR X8, [X20 + 0x18]
	0x03325E9C MOV X0, X19
	0x03325EA0 STR W8, [X31 + 0x8]
	0x03325EA4 BL 0x1C16D08
	0x03325EA8 ADD X1, X31, 0x8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x10B8000
	006 Move W8, [X20+3202]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {29}
	012 Move X0, 0xDD1000
	013 Move X0, [X0+3144]
	014 Call 0x1C17CF4
	015 Move X0, 0xE04000
	016 Move X0, [X0+816]
	017 Call 0x1C17CF4
	018 Move X0, 0xE04000
	019 Move X0, [X0+808]
	020 Call 0x1C17CF4
	021 Move X0, 0xDFE000
	022 Move X0, [X0+1520]
	023 Call 0x1C17CF4
	024 Move X0, 0xDCF000
	025 Move X0, [X0+1728]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+3202], W8
	029 Move X21, 0xE04000
	030 Move X21, [X21+808]
	031 Compare X19, 0
	032 JumpIfEqual {57}
	033 Move X9, 0xDD1000
	034 Move X9, [X9+3144]
	035 Move X8, [X19]
	036 Move X9, [X9]
	037 Move W11, [X8+304]
	038 Move W10, [X9+304]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X11, [X8+200]
	041 Add X10, X11, X10
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move W9, [X19+200]
	045 Compare W9, 0
	046 JumpIfEqual {115}
	047 Move X9, [X21]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 NotImplemented "Instruction CSEL not yet implemented."
	050 Compare X0, 0
	051 JumpIfEqual {61}
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Return X0
	057 Move X0, [X21]
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {109}
	061 Move X8, 0xDCF000
	062 Move X8, [X8+1728]
	063 Move X0, [X8]
	064 Move X8, 0xE04000
	065 Move X8, [X8+816]
	066 Move W9, [X0+224]
	067 Move X20, [X8]
	068 Compare W9, 0
	069 JumpIfNotEqual {71}
	070 Call 0x1C17DFC
	071 Move X0, X20
	072 Move X1, X31
	073 Call Type.GetTypeFromHandle, X0
	074 Move X10, 0xDFE000
	075 Move X8, [X19]
	076 Move X10, [X10+1520]
	077 Move X20, X0
	078 NotImplemented "Instruction LDRH not yet implemented."
	079 Move X1, [X10]
	080 Compare X9, 0
	081 JumpIfEqual {88}
	082 Move X10, [X8+176]
	083 Add X10, X10, 8
	084 NotImplemented "Instruction LDUR not yet implemented."
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Subtract X9, X9, 1
	087 Add X10, X10, 16
	088 Move X0, X19
	089 Move W2, W31
	090 Call 0x1C5D788
	091 NotImplemented "Instruction LDRSW not yet implemented."
	092 Add X8, X8, X9
	093 Add X0, X8, 312
	094 Move X8, [X0]
	095 Move X2, [X0+8]
	096 Move X0, X19
	097 Move X1, X20
	098 NotImplemented "Instruction BLR not yet implemented."
	099 Move X8, [X21]
	100 Compare X0, 0
	101 JumpIfEqual {104}
	102 Move X9, [X0]
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Move W9, [X8+224]
	105 Compare W9, 0
	106 JumpIfNotEqual {109}
	107 Move X0, X8
	108 Call 0x1C17DFC
	109 Move X20, [X31+16]
	110 Move X19, [X31+24]
	111 Move X30, [X31+32]
	112 Move X21, [X31+40]
	113 Call DateTimeFormatInfo.get_CurrentInfo
	114 Return X0
	115 Move X2, [X8+568]
	116 Move X1, [X8+576]
	117 Move X0, X19
	118 Move X20, [X31+16]
	119 Move X19, [X31+24]
	120 Move X30, [X31+32]
	121 Move X21, [X31+40]
	122 CallNoReturn X2

Method: System.Object GetFormat(System.Type formatType)

Disassembly:
	0x03325EAC BL 0x1C16E04
	0x03325EB0 MOV X19, X0
	0x03325EB4 ADRP X0, 0xDFD000
	0x03325EB8 LDR X0, [X0 + 0x370]
	0x03325EBC BL 0x1C16D08
	0x03325EC0 MOV X1, X21
	0x03325EC4 MOV X2, X19
	0x03325EC8 MOV X3, X31
	0x03325ECC BL 0x320A264
	0x03325ED0 MOV X19, X0
	0x03325ED4 ADRP X0, 0xDD6000
	0x03325ED8 LDR X0, [X0 + 0x760]
	0x03325EDC BL 0x1C16D08
	0x03325EE0 BL 0x1C16F10
	0x03325EE4 MOV X20, X0
	0x03325EE8 ADRP X0, 0xE02000
	0x03325EEC LDR X0, [X0 + 0xDA8]
	0x03325EF0 BL 0x1C16D08
	0x03325EF4 MOV X1, X0
	0x03325EF8 MOV X0, X20
	0x03325EFC MOV X2, X19
	0x03325F00 MOV X3, X31
	0x03325F04 BL 0x3311888
	0x03325F08 ADRP X0, 0xE03000
	0x03325F0C LDR X0, [X0 + 0x380]
	0x03325F10 BL 0x1C16D08
	0x03325F14 MOV X1, X0
	0x03325F18 MOV X0, X20
	0x03325F1C BL 0x1C16DEC
	0x03325F20 BL 0x1C16F20
	0x03325F24 BL 0x1C16F28
	0x03325F28 STR X30, [X31 - 0x20]!
	0x03325F2C STP X20, X19, [X31 + 0x10]
	0x03325F30 MOV X19, X0
	0x03325F34 TBZ X1, 0x0, 0x3325F74
	0x03325F38 LDR X0, [X19 + 0xC0]
	0x03325F3C CBNZ X0, 0x3325FAC
	0x03325F40 LDR X0, [X19 + 0x78]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x10B8000
	008 Move X21, 0xE04000
	009 Move X22, 0xDCF000
	010 Move W8, [X23+3203]
	011 Move X21, [X21+816]
	012 Move X22, [X22+1728]
	013 Move X20, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xE04000
	020 Move X0, [X0+816]
	021 Call 0x1C17CF4
	022 Move X0, 0xDCF000
	023 Move X0, [X0+1728]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+3203], W8
	027 Move X0, [X22]
	028 Move X21, [X21]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X21
	034 Move X1, X31
	035 Call Type.GetTypeFromHandle, X0
	036 Move X1, X0
	037 Move X0, X20
	038 Move X2, X31
	039 Call Type.op_Equality, X0, X1
	040 And W31, W0, 1
	041 NotImplemented "Instruction CSEL not yet implemented."
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X30, [X31+48]
	047 Move X23, [X31+56]
	048 Return X0

Method: System.Object Clone()

Disassembly:
	0x03325F44 CBZ X0, 0x3325FB8
	0x03325F48 LDR X8, [X0]
	0x03325F4C LDR X20, [X19 + 0x10]
	0x03325F50 LDP X9, X1, [X8 + 0x1A8]
	0x03325F54 BLR X9
	0x03325F58 CBZ X20, 0x3325FB8
	0x03325F5C MOV W1, W0
	0x03325F60 MOV X0, X20
	0x03325F64 MOV X2, X31
	0x03325F68 BL 0x33407CC
	0x03325F6C STR X0, [X19 + 0xC0]
	0x03325F70 B 0x3325FAC
	0x03325F74 LDR X0, [X19 + 0xB8]
	0x03325F78 CBNZ X0, 0x3325FAC
	0x03325F7C LDR X0, [X19 + 0x78]
	0x03325F80 CBZ X0, 0x3325FB8
	0x03325F84 LDR X8, [X0]
	0x03325F88 LDR X20, [X19 + 0x10]
	0x03325F8C LDP X9, X1, [X8 + 0x1A8]
	0x03325F90 BLR X9
	0x03325F94 CBZ X20, 0x3325FB8
	0x03325F98 MOV W1, W0
	0x03325F9C MOV X0, X20
	0x03325FA0 MOV X2, X31
	0x03325FA4 BL 0x3340794
	0x03325FA8 STR X0, [X19 + 0xB8]
	0x03325FAC LDP X20, X19, [X31 + 0x10]
	0x03325FB0 LDR X30, [X31], #0x20
	0x03325FB4 RET
	0x03325FB8 BL 0x1C16F20
	0x03325FBC STR X30, [X31 - 0x20]!
	0x03325FC0 STP X20, X19, [X31 + 0x10]
	0x03325FC4 MOV X19, X0
	0x03325FC8 LDR X0, [X0 + 0xC8]
	0x03325FCC CBNZ X0, 0x3326000
	0x03325FD0 LDR X0, [X19 + 0x78]
	0x03325FD4 CBZ X0, 0x332600C
	0x03325FD8 LDR X8, [X0]
	0x03325FDC LDR X20, [X19 + 0x10]
	0x03325FE0 LDP X9, X1, [X8 + 0x1A8]
	0x03325FE4 BLR X9
	0x03325FE8 CBZ X20, 0x332600C
	0x03325FEC MOV W1, W0
	0x03325FF0 MOV X0, X20
	0x03325FF4 MOV X2, X31
	0x03325FF8 BL 0x33407E8
	0x03325FFC STR X0, [X19 + 0xC8]
	0x03326000 LDP X20, X19, [X31 + 0x10]
	0x03326004 LDR X30, [X31], #0x20
	0x03326008 RET
	0x0332600C BL 0x1C16F20
	0x03326010 STR X30, [X31 - 0x20]!
	0x03326014 STP X20, X19, [X31 + 0x10]
	0x03326018 CMP W1, 0x7
	0x0332601C B.CS 0x332605C
	0x03326020 MOV X8, X0
	0x03326024 LDR X0, [X0 + 0x90]
	0x03326028 MOV W19, W1
	0x0332602C CBNZ X0, 0x332603C
	0x03326030 MOV X0, X8
	0x03326034 BL 0x3324424
	0x03326038 CBZ X0, 0x3326108
	0x0332603C LDR W8, [X0 + 0x18]
	0x03326040 CMP W8, W19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x10B8000
	005 Move W8, [X19+3204]
	006 Move X20, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xE04000
	012 Move X0, [X0+824]
	013 Call 0x1C17CF4
	014 Move X0, 0xE04000
	015 Move X0, [X0+808]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+3204], W8
	019 Move X0, X20
	020 Move X1, X31
	021 Call Object.MemberwiseClone, X0
	022 Move X19, X0
	023 Compare X0, 0
	024 JumpIfEqual {30}
	025 Move X8, 0xE04000
	026 Move X8, [X8+808]
	027 Move X1, [X8]
	028 Move X8, [X19]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X0, [X20+120]
	031 Compare X0, 0
	032 JumpIfEqual {67}
	033 Move X8, [X0]
	034 Move X9, [X8+456]
	035 Move X1, [X8+464]
	036 NotImplemented "Instruction BLR not yet implemented."
	037 Compare X19, 0
	038 JumpIfEqual {67}
	039 Compare X0, 0
	040 JumpIfEqual {60}
	041 Move X8, 0xE04000
	042 Move X8, [X8+824]
	043 Move X9, [X0]
	044 Move X1, [X8]
	045 Move W10, [X9+304]
	046 Move W8, [X1+304]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X10, [X9+200]
	049 Subtract X9, X8, 1
	050 Move X10, [X10]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move [X19+120], X0
	053 Move X10, [X0]
	054 Move W11, [X10+304]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X8, [X10+200]
	057 Move X8, [X8]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Call 0x1C181E0
	060 Move [X19+120], X31
	061 Move [X19+320], W31
	062 Move X0, X19
	063 Move X20, [X31+16]
	064 Move X19, [X31+24]
	065 Move X30, [X31+32]
	066 Return X0
	067 Call 0x1C17F20
	068 Move X0, X19
	069 Call 0x1C181E0

Method: System.String get_AMDesignator()

Disassembly:
	0x03326044 B.LS 0x3326104
	0x03326048 ADD X8, X0, W19, 0x3, UXTW
	0x0332604C LDR X0, [X8 + 0x20]
	0x03326050 LDP X20, X19, [X31 + 0x10]
	0x03326054 LDR X30, [X31], #0x20
	0x03326058 RET
	0x0332605C STR W31, [X31 + 0xC]
	0x03326060 ADRP X19, 0xDD2000
	0x03326064 LDR X19, [X19 + 0xB78]
	0x03326068 MOV X0, X19
	0x0332606C BL 0x1C16D08

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+56]
	003 Compare X8, 0
	004 JumpIfNotEqual {10}
	005 Move X8, [X0+16]
	006 Compare X8, 0
	007 JumpIfEqual {13}
	008 Move X8, [X8+16]
	009 Move [X0+56], X8
	010 Move X0, X8
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F20

Method: System.Globalization.Calendar get_Calendar()

Disassembly:
	0x03326070 ADD X1, X31, 0xC
	0x03326074 BL 0x1C16E04

ISIL:
	001 Move X0, [X0+120]
	002 Return X0

Method: System.Void set_Calendar(System.Globalization.Calendar value)

Disassembly:
	0x03325888 MOV X20, X0
	0x0332588C MOV X0, X19
	0x03325890 BL 0x332551C
	0x03325894 ADRP X8, 0xDCE000
	0x03325898 LDR X8, [X8 + 0xDD8]
	0x0332589C MOV X2, X0
	0x033258A0 MOV X0, X20
	0x033258A4 MOV X3, X31
	0x033258A8 LDR X1, [X8]
	0x033258AC BL 0x32274B8
	0x033258B0 STR X0, [X19 + 0x58]
	0x033258B4 LDP X20, X19, [X31 + 0x10]
	0x033258B8 LDR X30, [X31], #0x20
	0x033258BC RET
	0x033258C0 STP X30, X23, [X31 - 0x30]!
	0x033258C4 STP X22, X21, [X31 + 0x10]
	0x033258C8 STP X20, X19, [X31 + 0x20]
	0x033258CC ADRP X20, 0x10B7000
	0x033258D0 LDRB W8, [X20 + 0xC8B]
	0x033258D4 MOV X19, X0
	0x033258D8 TBNZ X8, 0x0, 0x33258FC
	0x033258DC ADRP X0, 0xDCE000
	0x033258E0 LDR X0, [X0 + 0xDD8]
	0x033258E4 BL 0x1C16CF4
	0x033258E8 ADRP X0, 0xE03000
	0x033258EC LDR X0, [X0 + 0x370]
	0x033258F0 BL 0x1C16CF4
	0x033258F4 MOVZ W8, 0x1
	0x033258F8 STRB W8, [X20 + 0xC8B]
	0x033258FC LDR X20, [X19 + 0x70]
	0x03325900 CBNZ X20, 0x3325A40
	0x03325904 MOV X0, X19
	0x03325908 BL 0x332569C
	0x0332590C MOV X20, X0
	0x03325910 MOV X0, X19
	0x03325914 BL 0x332551C
	0x03325918 ADRP X8, 0xDCE000
	0x0332591C LDR X8, [X8 + 0xDD8]
	0x03325920 MOV X2, X0
	0x03325924 MOV X0, X20
	0x03325928 MOV X3, X31
	0x0332592C LDR X1, [X8]
	0x03325930 BL 0x32274B8
	0x03325934 MOV X20, X0
	0x03325938 MOV X0, X19
	0x0332593C BL 0x332551C
	0x03325940 CBZ X0, 0x3325A1C
	0x03325944 MOV W21, W31
	0x03325948 MOV W23, W31
	0x0332594C MOVZ W22, 0x27
	0x03325950 LDR W8, [X0 + 0x10]
	0x03325954 CMP W21, W8
	0x03325958 B.GE 0x3325A20
	0x0332595C MOV X0, X19
	0x03325960 BL 0x332551C
	0x03325964 CBZ X0, 0x3325A1C
	0x03325968 MOV W1, W21
	0x0332596C MOV X2, X31
	0x03325970 BL 0x3222A1C
	0x03325974 AND W8, W0, 0xFFFF
	0x03325978 CMP W8, 0x25
	0x0332597C B.HI 0x3325990
	0x03325980 B.EQ 0x33259A8
	0x03325984 CMP W8, 0x22
	0x03325988 B.NE 0x33259AC
	0x0332598C B 0x33259C8
	0x03325990 CMP W8, 0x5C
	0x03325994 B.EQ 0x33259A8
	0x03325998 CMP W8, 0x7A
	0x0332599C B.NE 0x33259C0
	0x033259A0 TBNZ X23, 0x0, 0x33259AC
	0x033259A4 B 0x3325A3C
	0x033259A8 ADD W21, W21, 0x1
	0x033259AC MOV X0, X19
	0x033259B0 ADD W21, W21, 0x1
	0x033259B4 BL 0x332551C
	0x033259B8 CBNZ X0, 0x3325950
	0x033259BC B 0x3325A1C
	0x033259C0 CMP W8, 0x27
	0x033259C4 B.NE 0x33259AC
	0x033259C8 MOV X0, X19
	0x033259CC BL 0x332551C
	0x033259D0 TBZ X23, 0x0, 0x33259F4
	0x033259D4 CBZ X0, 0x3325A1C
	0x033259D8 MOV W1, W21
	0x033259DC MOV X2, X31
	0x033259E0 BL 0x3222A1C
	0x033259E4 AND W8, W22, 0xFFFF
	0x033259E8 CMP W8, W0, UXTH
	0x033259EC CSET W23, NE
	0x033259F0 B 0x33259AC
	0x033259F4 CBZ X0, 0x3325A1C
	0x033259F8 MOV W1, W21
	0x033259FC MOV X2, X31
	0x03325A00 BL 0x3222A1C
	0x03325A04 MOV W22, W0
	0x03325A08 MOV X0, X19
	0x03325A0C ADD W21, W21, 0x1
	0x03325A10 BL 0x332551C
	0x03325A14 MOVZ W23, 0x1
	0x03325A18 CBNZ X0, 0x3325950
	0x03325A1C BL 0x1C16F20
	0x03325A20 ADRP X8, 0xE03000
	0x03325A24 LDR X8, [X8 + 0x370]
	0x03325A28 MOV X0, X20
	0x03325A2C MOV X2, X31
	0x03325A30 LDR X1, [X8]
	0x03325A34 BL 0x321B938
	0x03325A38 MOV X20, X0
	0x03325A3C STR X20, [X19 + 0x70]
	0x03325A40 MOV X0, X20
	0x03325A44 LDP X20, X19, [X31 + 0x20]
	0x03325A48 LDP X22, X21, [X31 + 0x10]
	0x03325A4C LDP X30, X23, [X31], #0x30
	0x03325A50 RET
	0x03325A54 STR X30, [X31 - 0x10]!
	0x03325A58 LDR X8, [X0 + 0x60]
	0x03325A5C CBNZ X8, 0x3325A70
	0x03325A60 LDR X8, [X0 + 0x10]
	0x03325A64 CBZ X8, 0x3325A7C
	0x03325A68 LDR X8, [X8 + 0x20]
	0x03325A6C STR X8, [X0 + 0x60]
	0x03325A70 MOV X0, X8
	0x03325A74 LDR X30, [X31], #0x10
	0x03325A78 RET
	0x03325A7C BL 0x1C16F20
	0x03325A80 STR X30, [X31 - 0x20]!
	0x03325A84 STP X20, X19, [X31 + 0x10]
	0x03325A88 ADRP X19, 0x10B7000
	0x03325A8C ADRP X20, 0xE03000
	0x03325A90 LDRB W8, [X19 + 0xC8C]
	0x03325A94 LDR X20, [X20 + 0x378]
	0x03325A98 TBNZ X8, 0x0, 0x3325AB0
	0x03325A9C ADRP X0, 0xE03000
	0x03325AA0 LDR X0, [X0 + 0x378]
	0x03325AA4 BL 0x1C16CF4
	0x03325AA8 MOVZ W8, 0x1
	0x03325AAC STRB W8, [X19 + 0xC8C]
	0x03325AB0 LDR X0, [X20]
	0x03325AB4 LDP X20, X19, [X31 + 0x10]
	0x03325AB8 LDR X30, [X31], #0x20
	0x03325ABC RET
	0x03325AC0 STP X30, X19, [X31 - 0x10]!
	0x03325AC4 MOV X19, X0
	0x03325AC8 LDR X0, [X0 + 0xE0]
	0x03325ACC CBNZ X0, 0x3325AEC
	0x03325AD0 MOV X0, X19
	0x03325AD4 BL 0x3325AFC
	0x03325AD8 CBZ X0, 0x3325AF4
	0x03325ADC LDR W8, [X0 + 0x18]
	0x03325AE0 CBZ W8, 0x3325AF8
	0x03325AE4 LDR X0, [X0 + 0x20]
	0x03325AE8 STR X0, [X19 + 0xE0]
	0x03325AEC LDP X30, X19, [X31], #0x10
	0x03325AF0 RET
	0x03325AF4 BL 0x1C16F20
	0x03325AF8 BL 0x1C16F28
	0x03325AFC STR X30, [X31 - 0x20]!
	0x03325B00 STP X20, X19, [X31 + 0x10]
	0x03325B04 MOV X19, X0
	0x03325B08 LDR X0, [X0 + 0xF8]
	0x03325B0C CBNZ X0, 0x3325B40
	0x03325B10 LDR X0, [X19 + 0x78]
	0x03325B14 CBZ X0, 0x3325B4C
	0x03325B18 LDR X8, [X0]
	0x03325B1C LDR X20, [X19 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x10B8000
	007 Move X21, 0xE03000
	008 Move W8, [X22+3205]
	009 Move X21, [X21+2352]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xE03000
	017 Move X0, [X0+2352]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3205], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X22, 0x10B8000
	027 Move W8, [X22+2814]
	028 Compare W8, 0
	029 JumpIfNotEqual {35}
	030 Move X0, 0xE03000
	031 Move X0, [X0+2352]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X22+2814], W8
	035 Move X0, [X21]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X21]
	041 Move X8, [X0+184]
	042 Move W8, [X8]
	043 Compare W8, 0
	044 JumpIfNotEqual {157}
	045 Move X0, X19
	046 Call DateTimeFormatInfo.get_IsReadOnly, X0
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfEqual {164}
	051 Compare X20, 0
	052 JumpIfEqual {176}
	053 Move X8, [X19+120]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X0, X19
	056 Call DateTimeFormatInfo.get_OptionalCalendars, X0
	057 Compare X0, 0
	058 JumpIfEqual {81}
	059 Move X21, X31
	060 Move W8, [X0+24]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X0, X19
	063 Call DateTimeFormatInfo.get_OptionalCalendars, X0
	064 Compare X0, 0
	065 JumpIfEqual {81}
	066 Move W8, [X0+24]
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move X8, [X20]
	069 Add X9, X0, X21
	070 NotImplemented "Instruction LDRH not yet implemented."
	071 Move X0, X20
	072 Move X9, [X8+424]
	073 Move X1, [X8+432]
	074 NotImplemented "Instruction BLR not yet implemented."
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move X0, X19
	077 Call DateTimeFormatInfo.get_OptionalCalendars, X0
	078 Add X21, X21, 1
	079 Compare X0, 0
	080 JumpIfNotEqual {60}
	081 Call 0x1C17F20
	082 Move X8, [X19+120]
	083 Compare X8, 0
	084 JumpIfEqual {110}
	085 NotImplemented "Instruction MOVI not yet implemented."
	086 Move TEMP, 0
	087 Not TEMP
	088 Move W8, TEMP
	089 Move [X19+104], X31
	090 Move [X19+112], X31
	091 Move [X19+296], X31
	092 Move [X19+304], X31
	093 Move [X19+288], X31
	094 Move [X19+136], X31
	095 Move [X19+344], X31
	096 Move [X19+80], X31
	097 Move [X19+88], X31
	098 Move [X19+72], X31
	099 Move [X19+216], X31
	100 Move [X19+224], X31
	101 Move [X19+208], X31
	102 Move [X19+248], X31
	103 Move [X19+256], X31
	104 Move [X19+264], X31
	105 Move [X19+144], V0
	106 Move [X19+152], V0
	107 Move [X19+176], V0
	108 Move [X19+184], V0
	109 Move [X19+324], W8
	110 Move [X19+120], X20
	111 Move X8, [X20]
	112 Move X21, [X19+16]
	113 Move X0, X20
	114 Move X9, [X8+424]
	115 Move X1, [X8+432]
	116 NotImplemented "Instruction BLR not yet implemented."
	117 Move W2, W0
	118 Move X0, X19
	119 Move X1, X21
	120 Move X20, [X31+32]
	121 Move X19, [X31+40]
	122 Move X22, [X31+16]
	123 Move X21, [X31+24]
	124 Move X30, [X31+48]
	125 Call DateTimeFormatInfo.InitializeOverridableProperties, X0, X1, X2
	126 Return 
	127 Move X20, [X31+32]
	128 Move X19, [X31+40]
	129 Move X22, [X31+16]
	130 Move X21, [X31+24]
	131 Move X30, [X31+48]
	132 Return 
	133 Move X0, 0xDD7000
	134 Move X0, [X0+1888]
	135 Call 0x1C17D08
	136 Call 0x1C17F10
	137 Move X19, X0
	138 Move X0, 0xDD9000
	139 Move X0, [X0+3784]
	140 Call 0x1C17D08
	141 Move X20, X0
	142 Move X0, 0xE04000
	143 Move X0, [X0+792]
	144 Call 0x1C17D08
	145 Move X2, X0
	146 Move X0, X19
	147 Move X1, X20
	148 Move X3, X31
	149 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	150 Move X0, 0xE04000
	151 Move X0, [X0+800]
	152 Call 0x1C17D08
	153 Move X1, X0
	154 Move X0, X19
	155 Call 0x1C17DEC
	156 Call 0x1C17F28
	157 Move X0, 0xDFA000
	158 Move X0, [X0+3152]
	159 Call 0x1C17D08
	160 Call 0x1C17F10
	161 Move X1, X31
	162 Move X19, X0
	163 Call PlatformNotSupportedException..ctor, X0
	164 Move X0, 0xDCF000
	165 Move X0, [X0+1456]
	166 Call 0x1C17D08
	167 Call 0x1C17F10
	168 Move X19, X0
	169 Move X0, 0xDFE000
	170 Move X0, [X0+2616]
	171 Call 0x1C17D08
	172 Move X1, X0
	173 Move X0, X19
	174 Move X2, X31
	175 Call InvalidOperationException..ctor, X0, X1
	176 Move X0, 0xDD4000
	177 Move X0, [X0+1320]
	178 Call 0x1C17D08
	179 Call 0x1C17F10
	180 Move X19, X0
	181 Move X0, 0xDD9000
	182 Move X0, [X0+3784]
	183 Call 0x1C17D08
	184 Move X20, X0
	185 Move X0, 0xE00000
	186 Move X0, [X0+3248]
	187 Call 0x1C17D08
	188 Move X2, X0
	189 Move X0, X19
	190 Move X1, X20
	191 Move X3, X31
	192 Call ArgumentNullException..ctor, X0, X1, X2

Method: System.Globalization.CalendarId[] get_OptionalCalendars()

Disassembly:
	0x0332611C STP X22, X21, [X31 + 0x40]
	0x03326120 STP X20, X19, [X31 + 0x50]
	0x03326124 ADRP X22, 0x10B6000
	0x03326128 LDRB W8, [X22 + 0xC91]
	0x0332612C MOV X19, X2
	0x03326130 MOV X20, X1
	0x03326134 MOV X21, X0
	0x03326138 TBNZ X8, 0x0, 0x3326150
	0x0332613C ADRP X0, 0xDCD000
	0x03326140 LDR X0, [X0 + 0xAC8]
	0x03326144 BL 0x1C16CF4
	0x03326148 MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+312]
	005 Compare X0, 0
	006 JumpIfNotEqual {13}
	007 Move X0, [X19+16]
	008 Compare X0, 0
	009 JumpIfEqual {16}
	010 Move X1, X31
	011 Call CultureData.GetCalendarIds, X0
	012 Move [X19+312], X0
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Return X0
	016 Call 0x1C17F20

Method: System.String[] get_EraNames()

Disassembly:
	0x0332615C LDR X8, [X8 + 0xAC8]
	0x03326160 LDR W9, [X21 + 0x18]
	0x03326164 LDR W10, [X20 + 0x18]
	0x03326168 LDR X0, [X8]
	0x0332616C MUL W1, W10, W9
	0x03326170 BL 0x1C16D6C
	0x03326174 LDR X9, [X21 + 0x18]
	0x03326178 MOV X22, X0
	0x0332617C CMP W9, 0x1
	0x03326180 B.LT 0x3326228
	0x03326184 LDR W8, [X20 + 0x18]
	0x03326188 MOV X23, X31
	0x0332618C MOV W24, W31
	0x03326190 AND X9, X9, 0x0
	0x03326194 ADD X25, X20, 0x20
	0x03326198 CMP W8, 0x1
	0x0332619C B.LT 0x332621C
	0x033261A0 CMP X23, W9, UXTW
	0x033261A4 B.CS 0x3326248
	0x033261A8 ADD X9, X21, X23, 0x3, LSL
	0x033261AC MOV X27, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+288]
	006 Compare X0, 0
	007 JumpIfNotEqual {23}
	008 Move X0, [X19+120]
	009 Compare X0, 0
	010 JumpIfEqual {27}
	011 Move X8, [X0]
	012 Move X20, [X19+16]
	013 Move X9, [X8+424]
	014 Move X1, [X8+432]
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Compare X20, 0
	017 JumpIfEqual {27}
	018 Move W1, W0
	019 Move X0, X20
	020 Move X2, X31
	021 Call CultureData.EraNames, X0, X1
	022 Move [X19+288], X0
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Return X0
	027 Call 0x1C17F20

Method: System.String GetEraName(System.Int32 era)

Disassembly:
	0x033261B0 ADD X26, X9, 0x20
	0x033261B4 MOV W28, W24
	0x033261B8 CMP X27, W8, UXTW
	0x033261BC B.CS 0x3326248
	0x033261C0 LDR X0, [X26]
	0x033261C4 LDR X2, [X25, X27, LSL #3]
	0x033261C8 MOV X1, X19
	0x033261CC MOV X3, X31
	0x033261D0 BL 0x32274B8
	0x033261D4 CBZ X22, 0x332624C
	0x033261D8 LDR W9, [X22 + 0x18]
	0x033261DC ADD X8, X28, X27
	0x033261E0 CMP W8, W9
	0x033261E4 B.CS 0x3326248
	0x033261E8 ADD X8, X22, W8, 0x3, SXTW
	0x033261EC STR X0, [X8 + 0x20]
	0x033261F0 LDR W8, [X20 + 0x18]
	0x033261F4 LDR W9, [X21 + 0x18]
	0x033261F8 ADD X10, X27, 0x1
	0x033261FC CMP X10, W8, SXTW
	0x03326200 B.GE 0x3326214
	0x03326204 CMP X23, X9
	0x03326208 MOV X27, X10
	0x0332620C B.CC 0x33261B8
	0x03326210 B 0x3326248
	0x03326214 ADD W10, W24, W27
	0x03326218 ADD W24, W10, 0x1
	0x0332621C ADD X23, X23, 0x1
	0x03326220 CMP X23, W9, SXTW
	0x03326224 B.LT 0x3326198
	0x03326228 MOV X0, X22
	0x0332622C LDP X20, X19, [X31 + 0x50]
	0x03326230 LDP X22, X21, [X31 + 0x40]
	0x03326234 LDP X24, X23, [X31 + 0x30]
	0x03326238 LDP X26, X25, [X31 + 0x20]
	0x0332623C LDP X28, X27, [X31 + 0x10]
	0x03326240 LDR X30, [X31], #0x60
	0x03326244 RET
	0x03326248 BL 0x1C16F28
	0x0332624C BL 0x1C16F20
	0x03326250 SUB X31, X31, 0x30
	0x03326254 STP X30, X21, [X31 + 0x10]
	0x03326258 STP X20, X19, [X31 + 0x20]
	0x0332625C ADRP X21, 0x10B6000
	0x03326260 LDRB W8, [X21 + 0xC92]
	0x03326264 MOV W20, W1
	0x03326268 MOV X19, X0
	0x0332626C TBNZ X8, 0x0, 0x33262C0
	0x03326270 ADRP X0, 0xE02000
	0x03326274 LDR X0, [X0 + 0x328]
	0x03326278 BL 0x1C16CF4
	0x0332627C ADRP X0, 0xDCD000
	0x03326280 LDR X0, [X0 + 0xAC8]
	0x03326284 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W20, W1
	005 Move X19, X0
	006 Compare W1, 0
	007 JumpIfNotEqual {16}
	008 Move X0, [X19+120]
	009 Compare X0, 0
	010 JumpIfEqual {38}
	011 Move X8, [X0]
	012 Move X9, [X8+472]
	013 Move X1, [X8+480]
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Move W20, W0
	016 Move X0, X19
	017 Call DateTimeFormatInfo.get_EraNames, X0
	018 Compare X0, 0
	019 JumpIfEqual {38}
	020 Subtract W8, W20, 1
	021 Move TEMP, X8
	022 And TEMP, TEMP, -2147483648
	023 Compare TEMP, -2147483648
	024 JumpIfEqual {39}
	025 Move W9, [X0+24]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X9, [X19+288]
	028 Compare X9, 0
	029 JumpIfEqual {38}
	030 Move W10, [X9+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Add X8, X9, W8
	033 Move X0, [X8+32]
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return X0
	038 Call 0x1C17F20
	039 Move X0, 0xDD6000
	040 Move X0, [X0+1888]
	041 Call 0x1C17D08
	042 Call 0x1C17F10
	043 Move X19, X0
	044 Move X0, 0xE03000
	045 Move X0, [X0+832]
	046 Call 0x1C17D08
	047 Move X20, X0
	048 Move X0, 0xE03000
	049 Move X0, [X0+840]
	050 Call 0x1C17D08
	051 Move X2, X0
	052 Move X0, X19
	053 Move X1, X20
	054 Move X3, X31
	055 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	056 Move X0, 0xE03000
	057 Move X0, [X0+848]
	058 Call 0x1C17D08
	059 Move X1, X0
	060 Move X0, X19
	061 Call 0x1C17DEC
	062 Call 0x1C17F28

Method: System.String[] get_AbbreviatedEraNames()

Disassembly:
	0x03326288 ADRP X0, 0xDCD000
	0x0332628C LDR X0, [X0 + 0xDD8]
	0x03326290 BL 0x1C16CF4
	0x03326294 ADRP X0, 0xE02000
	0x03326298 LDR X0, [X0 + 0x398]
	0x0332629C BL 0x1C16CF4
	0x033262A0 ADRP X0, 0xE02000
	0x033262A4 LDR X0, [X0 + 0x360]
	0x033262A8 BL 0x1C16CF4
	0x033262AC ADRP X0, 0xE02000
	0x033262B0 LDR X0, [X0 + 0x368]
	0x033262B4 BL 0x1C16CF4
	0x033262B8 MOVZ W8, 0x1
	0x033262BC STRB W8, [X21 + 0xC92]
	0x033262C0 AND W8, W20, 0xFFFF
	0x033262C4 CMP W8, 0x55
	0x033262C8 B.HI 0x33262FC
	0x033262CC SUB W8, W8, 0x44
	0x033262D0 CMP W8, 0x11
	0x033262D4 B.HI 0x332653C
	0x033262D8 ADRP X9, 0xFFFFFFFFFD870000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+296]
	006 Compare X0, 0
	007 JumpIfNotEqual {23}
	008 Move X0, [X19+120]
	009 Compare X0, 0
	010 JumpIfEqual {27}
	011 Move X8, [X0]
	012 Move X20, [X19+16]
	013 Move X9, [X8+424]
	014 Move X1, [X8+432]
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Compare X20, 0
	017 JumpIfEqual {27}
	018 Move W1, W0
	019 Move X0, X20
	020 Move X2, X31
	021 Call CultureData.AbbrevEraNames, X0, X1
	022 Move [X19+296], X0
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Return X0
	027 Call 0x1C17F20

Method: System.String GetAbbreviatedEraName(System.Int32 era)

Disassembly:
	0x033262DC ADD X9, X9, 0x68E
	0x033262E0 ADR X10, 0x10
	0x033262E4 LDRB W11, [X9, X8, LSL]
	0x033262E8 ADD X10, X10, X11, 0x2, LSL
	0x033262EC BR X10
	0x033262F0 MOV X0, X19
	0x033262F4 BL 0x3326634
	0x033262F8 B 0x33263E4
	0x033262FC SUB W9, W8, 0x64
	0x03326300 CMP W9, 0x15
	0x03326304 B.HI 0x3326408
	0x03326308 ADRP X8, 0xFFFFFFFFFD870000
	0x0332630C ADD X8, X8, 0x678
	0x03326310 ADR X10, 0x10
	0x03326314 LDRB W11, [X8, X9, LSL]
	0x03326318 ADD X10, X10, X11, 0x2, LSL
	0x0332631C BR X10
	0x03326320 MOV X0, X19
	0x03326324 LDP X20, X19, [X31 + 0x20]
	0x03326328 LDP X30, X21, [X31 + 0x10]
	0x0332632C ADD X31, X31, 0x30
	0x03326330 B 0x33265C0
	0x03326334 ADRP X8, 0xDCD000
	0x03326338 LDR X8, [X8 + 0xAC8]
	0x0332633C MOVZ W1, 0x1
	0x03326340 LDR X0, [X8]
	0x03326344 BL 0x1C16D6C
	0x03326348 MOV X20, X0
	0x0332634C MOV X0, X19
	0x03326350 BL 0x33255DC
	0x03326354 CBZ X20, 0x3326534
	0x03326358 LDR W8, [X20 + 0x18]
	0x0332635C CBZ W8, 0x3326538
	0x03326360 STR X0, [X20 + 0x20]
	0x03326364 B 0x3326520
	0x03326368 ADRP X8, 0xDCD000
	0x0332636C LDR X8, [X8 + 0xAC8]
	0x03326370 MOVZ W1, 0x1
	0x03326374 LDR X0, [X8]
	0x03326378 BL 0x1C16D6C
	0x0332637C CBZ X0, 0x3326534
	0x03326380 LDR W8, [X0 + 0x18]
	0x03326384 MOV X20, X0
	0x03326388 CBZ W8, 0x3326538
	0x0332638C ADRP X8, 0xE02000
	0x03326390 LDR X8, [X8 + 0x398]
	0x03326394 B 0x3326518
	0x03326398 ADRP X8, 0xDCD000
	0x0332639C LDR X8, [X8 + 0xAC8]
	0x033263A0 MOVZ W1, 0x1
	0x033263A4 LDR X0, [X8]
	0x033263A8 BL 0x1C16D6C
	0x033263AC CBZ X0, 0x3326534
	0x033263B0 LDR W8, [X0 + 0x18]
	0x033263B4 MOV X20, X0
	0x033263B8 CBZ W8, 0x3326538
	0x033263BC ADRP X8, 0xE02000
	0x033263C0 LDR X8, [X8 + 0x360]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W20, W1
	005 Move X19, X0
	006 Call DateTimeFormatInfo.get_AbbreviatedEraNames, X0
	007 Compare X0, 0
	008 JumpIfEqual {45}
	009 Move X8, [X0+24]
	010 Compare X8, 0
	011 JumpIfEqual {38}
	012 Compare W20, 0
	013 JumpIfNotEqual {22}
	014 Move X0, [X19+120]
	015 Compare X0, 0
	016 JumpIfEqual {45}
	017 Move X8, [X0]
	018 Move X9, [X8+472]
	019 Move X1, [X8+480]
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move W20, W0
	022 Move X8, [X19+296]
	023 Compare X8, 0
	024 JumpIfEqual {45}
	025 Subtract W9, W20, 1
	026 Move TEMP, X9
	027 And TEMP, TEMP, -2147483648
	028 Compare TEMP, -2147483648
	029 JumpIfEqual {46}
	030 Move W10, [X8+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Add X8, X8, W9
	033 Move X0, [X8+32]
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return X0
	038 Move X0, X19
	039 Move W1, W20
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Call DateTimeFormatInfo.GetEraName, X0, X1
	044 Return X0
	045 Call 0x1C17F20
	046 Move X0, 0xDD6000
	047 Move X0, [X0+1888]
	048 Call 0x1C17D08
	049 Call 0x1C17F10
	050 Move X19, X0
	051 Move X0, 0xE03000
	052 Move X0, [X0+832]
	053 Call 0x1C17D08
	054 Move X20, X0
	055 Move X0, 0xE03000
	056 Move X0, [X0+840]
	057 Call 0x1C17D08
	058 Move X2, X0
	059 Move X0, X19
	060 Move X1, X20
	061 Move X3, X31
	062 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	063 Move X0, 0xE03000
	064 Move X0, [X0+856]
	065 Call 0x1C17D08
	066 Move X1, X0
	067 Move X0, X19
	068 Call 0x1C17DEC
	069 Call 0x1C17F28

Method: System.String[] get_AbbreviatedEnglishEraNames()

Disassembly:
	0x033263C4 B 0x3326518
	0x033263C8 MOV X0, X19
	0x033263CC LDP X20, X19, [X31 + 0x20]
	0x033263D0 LDP X30, X21, [X31 + 0x10]
	0x033263D4 ADD X31, X31, 0x30
	0x033263D8 B 0x3326634
	0x033263DC MOV X0, X19
	0x033263E0 BL 0x33265C0
	0x033263E4 MOV X20, X0
	0x033263E8 MOV X0, X19
	0x033263EC BL 0x332671C
	0x033263F0 B 0x3326444
	0x033263F4 MOV X0, X19
	0x033263F8 LDP X20, X19, [X31 + 0x20]
	0x033263FC LDP X30, X21, [X31 + 0x10]
	0x03326400 ADD X31, X31, 0x30
	0x03326404 B 0x332671C
	0x03326408 CMP W8, 0x59
	0x0332640C B.NE 0x332653C
	0x03326410 MOV X0, X19
	0x03326414 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+304]
	006 Compare X0, 0
	007 JumpIfNotEqual {23}
	008 Move X0, [X19+120]
	009 Compare X0, 0
	010 JumpIfEqual {27}
	011 Move X8, [X0]
	012 Move X20, [X19+16]
	013 Move X9, [X8+424]
	014 Move X1, [X8+432]
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Compare X20, 0
	017 JumpIfEqual {27}
	018 Move W1, W0
	019 Move X0, X20
	020 Move X2, X31
	021 Call CultureData.AbbreviatedEnglishEraNames, X0, X1
	022 Move [X19+304], X0
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Return X0
	027 Call 0x1C17F20

Method: System.String get_DateSeparator()

Disassembly:
	0x03326418 LDP X30, X21, [X31 + 0x10]
	0x0332641C ADD X31, X31, 0x30
	0x03326420 B 0x3326790
	0x03326424 MOV X0, X19
	0x03326428 BL 0x3326634
	0x0332642C B 0x3326438
	0x03326430 MOV X0, X19
	0x03326434 BL 0x33265C0
	0x03326438 MOV X20, X0
	0x0332643C MOV X0, X19
	0x03326440 BL 0x33266A8
	0x03326444 ADRP X8, 0xE02000
	0x03326448 LDR X8, [X8 + 0x328]
	0x0332644C MOV X19, X0
	0x03326450 LDR X8, [X8]
	0x03326454 LDR W9, [X8 + 0xE0]
	0x03326458 CBNZ W9, 0x3326464
	0x0332645C MOV X0, X8
	0x03326460 BL 0x1C16DFC
	0x03326464 ADRP X8, 0xDCD000
	0x03326468 LDR X8, [X8 + 0xDD8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+72]
	006 Compare X0, 0
	007 JumpIfNotEqual {23}
	008 Move X0, [X19+120]
	009 Compare X0, 0
	010 JumpIfEqual {27}
	011 Move X8, [X0]
	012 Move X20, [X19+16]
	013 Move X9, [X8+424]
	014 Move X1, [X8+432]
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Compare X20, 0
	017 JumpIfEqual {27}
	018 Move W1, W0
	019 Move X0, X20
	020 Move X2, X31
	021 Call CultureData.DateSeparator, X0, X1
	022 Move [X19+72], X0
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Return X0
	027 Call 0x1C17F20

Method: System.String get_FullDateTimePattern()

Disassembly:
	0x0332646C MOV X0, X20
	0x03326470 MOV X1, X19
	0x03326474 LDP X20, X19, [X31 + 0x20]
	0x03326478 LDR X2, [X8]
	0x0332647C LDP X30, X21, [X31 + 0x10]
	0x03326480 ADD X31, X31, 0x30
	0x03326484 B 0x332610C
	0x03326488 ADRP X8, 0xDCD000
	0x0332648C LDR X8, [X8 + 0xAC8]
	0x03326490 MOVZ W1, 0x1
	0x03326494 LDR X0, [X8]
	0x03326498 BL 0x1C16D6C
	0x0332649C CBZ X0, 0x3326534
	0x033264A0 LDR W8, [X0 + 0x18]
	0x033264A4 MOV X20, X0
	0x033264A8 CBZ W8, 0x3326538
	0x033264AC ADRP X8, 0xE02000
	0x033264B0 LDR X8, [X8 + 0x368]
	0x033264B4 B 0x3326518
	0x033264B8 MOV X0, X19
	0x033264BC LDP X20, X19, [X31 + 0x20]
	0x033264C0 LDP X30, X21, [X31 + 0x10]
	0x033264C4 ADD X31, X31, 0x30
	0x033264C8 B 0x33266A8
	0x033264CC ADRP X8, 0xDCD000
	0x033264D0 LDR X8, [X8 + 0xAC8]
	0x033264D4 MOVZ W1, 0x1
	0x033264D8 MOVZ W19, 0x1
	0x033264DC LDR X0, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10B7000
	005 Move W8, [X20+3206]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDCE000
	012 Move X0, [X0+3544]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3206], W8
	016 Move X0, [X19+136]
	017 Compare X0, 0
	018 JumpIfNotEqual {32}
	019 Move X0, X19
	020 Call DateTimeFormatInfo.get_LongDatePattern, X0
	021 Move X20, X0
	022 Move X0, X19
	023 Call DateTimeFormatInfo.get_LongTimePattern, X0
	024 Move X8, 0xDCE000
	025 Move X8, [X8+3544]
	026 Move X2, X0
	027 Move X0, X20
	028 Move X3, X31
	029 Move X1, [X8]
	030 Call String.Concat, X0, X1, X2
	031 Move [X19+136], X0
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return X0

Method: System.String get_LongDatePattern()

Disassembly:
	0x033264E0 BL 0x1C16D6C
	0x033264E4 ADRP X21, 0x10B6000
	0x033264E8 LDRB W8, [X21 + 0xC8C]
	0x033264EC MOV X20, X0
	0x033264F0 TBNZ X8, 0x0, 0x3326504
	0x033264F4 ADRP X0, 0xE02000
	0x033264F8 LDR X0, [X0 + 0x378]
	0x033264FC BL 0x1C16CF4
	0x03326500 STRB W19, [X21 + 0xC8C]
	0x03326504 CBZ X20, 0x3326534
	0x03326508 LDR W8, [X20 + 0x18]
	0x0332650C CBZ W8, 0x3326538
	0x03326510 ADRP X8, 0xE02000
	0x03326514 LDR X8, [X8 + 0x378]
	0x03326518 LDR X8, [X8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+208]
	005 Compare X0, 0
	006 JumpIfNotEqual {16}
	007 Move X0, X19
	008 Call DateTimeFormatInfo.get_UnclonedLongDatePatterns, X0
	009 Compare X0, 0
	010 JumpIfEqual {19}
	011 Move W8, [X0+24]
	012 Compare W8, 0
	013 JumpIfEqual {20}
	014 Move X0, [X0+32]
	015 Move [X19+208], X0
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Return X0
	019 Call 0x1C17F20
	020 Call 0x1C17F28

Method: System.String get_LongTimePattern()

Disassembly:
	0x0332651C STR X8, [X20 + 0x20]
	0x03326520 MOV X0, X20
	0x03326524 LDP X20, X19, [X31 + 0x20]
	0x03326528 LDP X30, X21, [X31 + 0x10]
	0x0332652C ADD X31, X31, 0x30
	0x03326530 RET
	0x03326534 BL 0x1C16F20
	0x03326538 BL 0x1C16F28
	0x0332653C STRH W20, [X31 + 0xC]
	0x03326540 ADRP X0, 0xDCF000
	0x03326544 LDR X0, [X0 + 0x170]
	0x03326548 BL 0x1C16D08
	0x0332654C ADD X1, X31, 0xC
	0x03326550 BL 0x1C16E04
	0x03326554 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+232]
	005 Compare X0, 0
	006 JumpIfNotEqual {16}
	007 Move X0, X19
	008 Call DateTimeFormatInfo.get_UnclonedLongTimePatterns, X0
	009 Compare X0, 0
	010 JumpIfEqual {19}
	011 Move W8, [X0+24]
	012 Compare W8, 0
	013 JumpIfEqual {20}
	014 Move X0, [X0+32]
	015 Move [X19+232], X0
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Return X0
	019 Call 0x1C17F20
	020 Call 0x1C17F28

Method: System.String get_MonthDayPattern()

Disassembly:
	0x033265DC TBNZ X8, 0x0, 0x33265F4
	0x033265E0 ADRP X0, 0xE02000
	0x033265E4 LDR X0, [X0 + 0x328]
	0x033265E8 BL 0x1C16CF4
	0x033265EC MOVZ W8, 0x1
	0x033265F0 STRB W8, [X20 + 0xC95]
	0x033265F4 MOV X0, X19
	0x033265F8 BL 0x33256D8
	0x033265FC MOV X20, X0
	0x03326600 MOV X0, X19
	0x03326604 BL 0x332569C
	0x03326608 LDR X8, [X21]
	0x0332660C MOV X19, X0
	0x03326610 LDR W9, [X8 + 0xE0]
	0x03326614 CBNZ W9, 0x3326620
	0x03326618 MOV X0, X8
	0x0332661C BL 0x1C16DFC
	0x03326620 MOV X0, X20
	0x03326624 MOV X1, X19
	0x03326628 LDP X20, X19, [X31 + 0x10]
	0x0332662C LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+104]
	006 Compare X0, 0
	007 JumpIfNotEqual {23}
	008 Move X0, [X19+120]
	009 Compare X0, 0
	010 JumpIfEqual {27}
	011 Move X8, [X0]
	012 Move X20, [X19+16]
	013 Move X9, [X8+424]
	014 Move X1, [X8+432]
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Compare X20, 0
	017 JumpIfEqual {27}
	018 Move W1, W0
	019 Move X0, X20
	020 Move X2, X31
	021 Call CultureData.MonthDay, X0, X1
	022 Move [X19+104], X0
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Return X0
	027 Call 0x1C17F20

Method: System.String get_PMDesignator()

Disassembly:
	0x03326630 B 0x3326B00
	0x03326634 STP X30, X21, [X31 - 0x20]!
	0x03326638 STP X20, X19, [X31 + 0x10]
	0x0332663C ADRP X20, 0x10B6000
	0x03326640 ADRP X21, 0xE02000
	0x03326644 LDRB W8, [X20 + 0xC97]
	0x03326648 LDR X21, [X21 + 0x328]
	0x0332664C MOV X19, X0
	0x03326650 TBNZ X8, 0x0, 0x3326668
	0x03326654 ADRP X0, 0xE02000
	0x03326658 LDR X0, [X0 + 0x328]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+64]
	003 Compare X8, 0
	004 JumpIfNotEqual {10}
	005 Move X8, [X0+16]
	006 Compare X8, 0
	007 JumpIfEqual {13}
	008 Move X8, [X8+24]
	009 Move [X0+64], X8
	010 Move X0, X8
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F20

Method: System.String get_RFC1123Pattern()

Disassembly:
	0x0332665C BL 0x1C16CF4
	0x03326660 MOVZ W8, 0x1
	0x03326664 STRB W8, [X20 + 0xC97]
	0x03326668 MOV X0, X19
	0x0332666C BL 0x3325558
	0x03326670 MOV X20, X0
	0x03326674 MOV X0, X19
	0x03326678 BL 0x33254E0
	0x0332667C LDR X8, [X21]
	0x03326680 MOV X19, X0
	0x03326684 LDR W9, [X8 + 0xE0]
	0x03326688 CBNZ W9, 0x3326694
	0x0332668C MOV X0, X8
	0x03326690 BL 0x1C16DFC
	0x03326694 MOV X0, X20
	0x03326698 MOV X1, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x10B7000
	005 Move X20, 0xE03000
	006 Move W8, [X19+3207]
	007 Move X20, [X20+864]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE03000
	013 Move X0, [X0+864]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3207], W8
	017 Move X0, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0

Method: System.String get_ShortDatePattern()

Disassembly:
	0x0332669C LDP X20, X19, [X31 + 0x10]
	0x033266A0 LDP X30, X21, [X31], #0x20
	0x033266A4 B 0x3326B00
	0x033266A8 STP X30, X21, [X31 - 0x20]!
	0x033266AC STP X20, X19, [X31 + 0x10]
	0x033266B0 ADRP X20, 0x10B6000
	0x033266B4 ADRP X21, 0xE02000
	0x033266B8 LDRB W8, [X20 + 0xC96]
	0x033266BC LDR X21, [X21 + 0x328]
	0x033266C0 MOV X19, X0
	0x033266C4 TBNZ X8, 0x0, 0x33266DC
	0x033266C8 ADRP X0, 0xE02000
	0x033266CC LDR X0, [X0 + 0x328]
	0x033266D0 BL 0x1C16CF4
	0x033266D4 MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+216]
	005 Compare X0, 0
	006 JumpIfNotEqual {16}
	007 Move X0, X19
	008 Call DateTimeFormatInfo.get_UnclonedShortDatePatterns, X0
	009 Compare X0, 0
	010 JumpIfEqual {19}
	011 Move W8, [X0+24]
	012 Compare W8, 0
	013 JumpIfEqual {20}
	014 Move X0, [X0+32]
	015 Move [X19+216], X0
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Return X0
	019 Call 0x1C17F20
	020 Call 0x1C17F28

Method: System.String get_ShortTimePattern()

Disassembly:
	0x0332672C LDRB W8, [X20 + 0xC98]
	0x03326730 LDR X21, [X21 + 0x328]
	0x03326734 MOV X19, X0
	0x03326738 TBNZ X8, 0x0, 0x3326750
	0x0332673C ADRP X0, 0xE02000
	0x03326740 LDR X0, [X0 + 0x328]
	0x03326744 BL 0x1C16CF4
	0x03326748 MOVZ W8, 0x1
	0x0332674C STRB W8, [X20 + 0xC98]
	0x03326750 MOV X0, X19
	0x03326754 BL 0x33255AC
	0x03326758 MOV X20, X0
	0x0332675C MOV X0, X19
	0x03326760 BL 0x332551C
	0x03326764 LDR X8, [X21]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+240]
	005 Compare X0, 0
	006 JumpIfNotEqual {16}
	007 Move X0, X19
	008 Call DateTimeFormatInfo.get_UnclonedShortTimePatterns, X0
	009 Compare X0, 0
	010 JumpIfEqual {19}
	011 Move W8, [X0+24]
	012 Compare W8, 0
	013 JumpIfEqual {20}
	014 Move X0, [X0+32]
	015 Move [X19+240], X0
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Return X0
	019 Call 0x1C17F20
	020 Call 0x1C17F28

Method: System.String get_SortableDateTimePattern()

Disassembly:
	0x03326798 ADRP X20, 0x10B6000
	0x0332679C ADRP X21, 0xE02000
	0x033267A0 LDRB W8, [X20 + 0xC94]
	0x033267A4 LDR X21, [X21 + 0x328]
	0x033267A8 MOV X19, X0
	0x033267AC TBNZ X8, 0x0, 0x33267C4
	0x033267B0 ADRP X0, 0xE02000
	0x033267B4 LDR X0, [X0 + 0x328]
	0x033267B8 BL 0x1C16CF4
	0x033267BC MOVZ W8, 0x1
	0x033267C0 STRB W8, [X20 + 0xC94]
	0x033267C4 MOV X0, X19
	0x033267C8 BL 0x3325AFC
	0x033267CC MOV X20, X0
	0x033267D0 MOV X0, X19
	0x033267D4 BL 0x3325AC0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x10B7000
	005 Move X20, 0xE03000
	006 Move W8, [X19+3208]
	007 Move X20, [X20+872]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE03000
	013 Move X0, [X0+872]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3208], W8
	017 Move X0, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0

Method: System.String get_GeneralShortTimePattern()

Disassembly:
	0x033267D8 LDR X8, [X21]
	0x033267DC MOV X19, X0
	0x033267E0 LDR W9, [X8 + 0xE0]
	0x033267E4 CBNZ W9, 0x33267F0
	0x033267E8 MOV X0, X8
	0x033267EC BL 0x1C16DFC
	0x033267F0 MOV X0, X20
	0x033267F4 MOV X1, X19
	0x033267F8 LDP X20, X19, [X31 + 0x10]
	0x033267FC LDP X30, X21, [X31], #0x20
	0x03326800 B 0x3326B00
	0x03326804 STR X30, [X31 - 0x20]!
	0x03326808 STP X20, X19, [X31 + 0x10]
	0x0332680C CMP W1, 0x7
	0x03326810 B.CS 0x3326850
	0x03326814 MOV X8, X0
	0x03326818 LDR X0, [X0 + 0xA0]
	0x0332681C MOV W19, W1
	0x03326820 CBNZ X0, 0x3326830
	0x03326824 MOV X0, X8
	0x03326828 BL 0x3324484
	0x0332682C CBZ X0, 0x33268FC
	0x03326830 LDR W8, [X0 + 0x18]
	0x03326834 CMP W8, W19
	0x03326838 B.LS 0x33268F8
	0x0332683C ADD X8, X0, W19, 0x3, UXTW
	0x03326840 LDR X0, [X8 + 0x20]
	0x03326844 LDP X20, X19, [X31 + 0x10]
	0x03326848 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10B7000
	005 Move W8, [X20+3209]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDCE000
	012 Move X0, [X0+3544]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3209], W8
	016 Move X0, [X19+80]
	017 Compare X0, 0
	018 JumpIfNotEqual {32}
	019 Move X0, X19
	020 Call DateTimeFormatInfo.get_ShortDatePattern, X0
	021 Move X20, X0
	022 Move X0, X19
	023 Call DateTimeFormatInfo.get_ShortTimePattern, X0
	024 Move X8, 0xDCE000
	025 Move X8, [X8+3544]
	026 Move X2, X0
	027 Move X0, X20
	028 Move X3, X31
	029 Move X1, [X8]
	030 Call String.Concat, X0, X1, X2
	031 Move [X19+80], X0
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return X0

Method: System.String get_GeneralLongTimePattern()

Disassembly:
	0x0332684C RET
	0x03326850 STR W31, [X31 + 0xC]
	0x03326854 ADRP X19, 0xDD2000
	0x03326858 LDR X19, [X19 + 0xB78]
	0x0332685C MOV X0, X19
	0x03326860 BL 0x1C16D08
	0x03326864 ADD X1, X31, 0xC
	0x03326868 BL 0x1C16E04
	0x0332686C MOV X20, X0
	0x03326870 MOVZ W8, 0x6
	0x03326874 MOV X0, X19
	0x03326878 STR W8, [X31 + 0x8]
	0x0332687C BL 0x1C16D08
	0x03326880 ADD X1, X31, 0x8
	0x03326884 BL 0x1C16E04
	0x03326888 MOV X19, X0
	0x0332688C ADRP X0, 0xDFC000
	0x03326890 LDR X0, [X0 + 0x370]
	0x03326894 BL 0x1C16D08
	0x03326898 MOV X1, X20
	0x0332689C MOV X2, X19
	0x033268A0 MOV X3, X31
	0x033268A4 BL 0x320A264
	0x033268A8 MOV X19, X0
	0x033268AC ADRP X0, 0xDD5000
	0x033268B0 LDR X0, [X0 + 0x760]
	0x033268B4 BL 0x1C16D08
	0x033268B8 BL 0x1C16F10
	0x033268BC MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10B7000
	005 Move W8, [X20+3210]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDCE000
	012 Move X0, [X0+3544]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3210], W8
	016 Move X0, [X19+88]
	017 Compare X0, 0
	018 JumpIfNotEqual {32}
	019 Move X0, X19
	020 Call DateTimeFormatInfo.get_ShortDatePattern, X0
	021 Move X20, X0
	022 Move X0, X19
	023 Call DateTimeFormatInfo.get_LongTimePattern, X0
	024 Move X8, 0xDCE000
	025 Move X8, [X8+3544]
	026 Move X2, X0
	027 Move X0, X20
	028 Move X3, X31
	029 Move X1, [X8]
	030 Call String.Concat, X0, X1, X2
	031 Move [X19+88], X0
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return X0

Method: System.String get_DateTimeOffsetPattern()

Disassembly:
	0x033268C0 ADRP X0, 0xE02000
	0x033268C4 LDR X0, [X0 + 0x388]
	0x033268C8 BL 0x1C16D08
	0x033268CC MOV X1, X0
	0x033268D0 MOV X0, X20
	0x033268D4 MOV X2, X19
	0x033268D8 MOV X3, X31
	0x033268DC BL 0x3311888
	0x033268E0 ADRP X0, 0xE02000
	0x033268E4 LDR X0, [X0 + 0x3B0]
	0x033268E8 BL 0x1C16D08
	0x033268EC MOV X1, X0
	0x033268F0 MOV X0, X20
	0x033268F4 BL 0x1C16DEC
	0x033268F8 BL 0x1C16F28
	0x033268FC BL 0x1C16F20
	0x03326900 STR X30, [X31 - 0x20]!
	0x03326904 STP X20, X19, [X31 + 0x10]
	0x03326908 SUB W19, W1, 0x1
	0x0332690C CMP W19, 0xD
	0x03326910 B.CS 0x332694C
	0x03326914 MOV X8, X0
	0x03326918 LDR X0, [X0 + 0xA8]
	0x0332691C CBNZ X0, 0x332692C
	0x03326920 MOV X0, X8
	0x03326924 BL 0x33244E4
	0x03326928 CBZ X0, 0x33269FC
	0x0332692C LDR W8, [X0 + 0x18]
	0x03326930 CMP W19, W8
	0x03326934 B.CS 0x33269F8
	0x03326938 ADD X8, X0, W19, 0x3, UXTW
	0x0332693C LDR X0, [X8 + 0x20]
	0x03326940 LDP X20, X19, [X31 + 0x10]
	0x03326944 LDR X30, [X31], #0x20
	0x03326948 RET
	0x0332694C MOVZ W8, 0x1
	0x03326950 STR W8, [X31 + 0xC]
	0x03326954 ADRP X19, 0xDCD000
	0x03326958 LDR X19, [X19 + 0x758]
	0x0332695C MOV X0, X19
	0x03326960 BL 0x1C16D08
	0x03326964 ADD X1, X31, 0xC
	0x03326968 BL 0x1C16E04
	0x0332696C MOV X20, X0
	0x03326970 MOVZ W8, 0xD
	0x03326974 MOV X0, X19
	0x03326978 STR W8, [X31 + 0x8]
	0x0332697C BL 0x1C16D08
	0x03326980 ADD X1, X31, 0x8
	0x03326984 BL 0x1C16E04
	0x03326988 MOV X19, X0
	0x0332698C ADRP X0, 0xDFC000
	0x03326990 LDR X0, [X0 + 0x370]
	0x03326994 BL 0x1C16D08
	0x03326998 MOV X1, X20
	0x0332699C MOV X2, X19
	0x033269A0 MOV X3, X31
	0x033269A4 BL 0x320A264
	0x033269A8 MOV X19, X0
	0x033269AC ADRP X0, 0xDD5000
	0x033269B0 LDR X0, [X0 + 0x760]
	0x033269B4 BL 0x1C16D08
	0x033269B8 BL 0x1C16F10
	0x033269BC MOV X20, X0
	0x033269C0 ADRP X0, 0xE01000
	0x033269C4 LDR X0, [X0 + 0xDA8]
	0x033269C8 BL 0x1C16D08
	0x033269CC MOV X1, X0
	0x033269D0 MOV X0, X20
	0x033269D4 MOV X2, X19
	0x033269D8 MOV X3, X31
	0x033269DC BL 0x3311888
	0x033269E0 ADRP X0, 0xE02000
	0x033269E4 LDR X0, [X0 + 0x3B8]
	0x033269E8 BL 0x1C16D08
	0x033269EC MOV X1, X0
	0x033269F0 MOV X0, X20
	0x033269F4 BL 0x1C16DEC
	0x033269F8 BL 0x1C16F28
	0x033269FC BL 0x1C16F20
	0x03326A00 STR X30, [X31 - 0x20]!
	0x03326A04 STP X20, X19, [X31 + 0x10]
	0x03326A08 SUB W19, W1, 0x1
	0x03326A0C CMP W19, 0xD
	0x03326A10 B.CS 0x3326A4C
	0x03326A14 MOV X8, X0
	0x03326A18 LDR X0, [X0 + 0xB0]
	0x03326A1C CBNZ X0, 0x3326A2C
	0x03326A20 MOV X0, X8
	0x03326A24 BL 0x3324544
	0x03326A28 CBZ X0, 0x3326AFC
	0x03326A2C LDR W8, [X0 + 0x18]
	0x03326A30 CMP W19, W8
	0x03326A34 B.CS 0x3326AF8
	0x03326A38 ADD X8, X0, W19, 0x3, UXTW
	0x03326A3C LDR X0, [X8 + 0x20]
	0x03326A40 LDP X20, X19, [X31 + 0x10]
	0x03326A44 LDR X30, [X31], #0x20
	0x03326A48 RET
	0x03326A4C MOVZ W8, 0x1
	0x03326A50 STR W8, [X31 + 0xC]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x10B7000
	008 Move W8, [X20+3211]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xDCE000
	015 Move X0, [X0+3544]
	016 Call 0x1C17CF4
	017 Move X0, 0xE03000
	018 Move X0, [X0+880]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3211], W8
	022 Move X20, [X19+112]
	023 Compare X20, 0
	024 JumpIfNotEqual {105}
	025 Move X0, X19
	026 Call DateTimeFormatInfo.get_ShortDatePattern, X0
	027 Move X20, X0
	028 Move X0, X19
	029 Call DateTimeFormatInfo.get_LongTimePattern, X0
	030 Move X8, 0xDCE000
	031 Move X8, [X8+3544]
	032 Move X2, X0
	033 Move X0, X20
	034 Move X3, X31
	035 Move X1, [X8]
	036 Call String.Concat, X0, X1, X2
	037 Move X20, X0
	038 Move X0, X19
	039 Call DateTimeFormatInfo.get_LongTimePattern, X0
	040 Compare X0, 0
	041 JumpIfEqual {96}
	042 Move W21, W31
	043 Move W23, W31
	044 Move W22, 39
	045 Move W8, [X0+16]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X0, X19
	048 Call DateTimeFormatInfo.get_LongTimePattern, X0
	049 Compare X0, 0
	050 JumpIfEqual {96}
	051 Move W1, W21
	052 Move X2, X31
	053 Call String.get_Chars, X0, X1
	054 And W8, W0, 0xFFFF
	055 NotImplemented "Instruction CMP not yet implemented."
	056 NotImplemented "Instruction CMP not yet implemented."
	057 NotImplemented "Instruction CMP not yet implemented."
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move TEMP, X23
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfEqual {64}
	063 Add W21, W21, 1
	064 Move X0, X19
	065 Add W21, W21, 1
	066 Call DateTimeFormatInfo.get_LongTimePattern, X0
	067 Compare X0, 0
	068 JumpIfNotEqual {45}
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move X0, X19
	071 Call DateTimeFormatInfo.get_LongTimePattern, X0
	072 Move TEMP, X23
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfNotEqual {84}
	076 Compare X0, 0
	077 JumpIfEqual {96}
	078 Move W1, W21
	079 Move X2, X31
	080 Call String.get_Chars, X0, X1
	081 And W8, W22, 0xFFFF
	082 NotImplemented "Instruction CMP not yet implemented."
	083 NotImplemented "Instruction CSET not yet implemented."
	084 Compare X0, 0
	085 JumpIfEqual {96}
	086 Move W1, W21
	087 Move X2, X31
	088 Call String.get_Chars, X0, X1
	089 Move W22, W0
	090 Move X0, X19
	091 Add W21, W21, 1
	092 Call DateTimeFormatInfo.get_LongTimePattern, X0
	093 Move W23, 1
	094 Compare X0, 0
	095 JumpIfNotEqual {45}
	096 Call 0x1C17F20
	097 Move X8, 0xE03000
	098 Move X8, [X8+880]
	099 Move X0, X20
	100 Move X2, X31
	101 Move X1, [X8]
	102 Call String.Concat, X0, X1
	103 Move X20, X0
	104 Move [X19+112], X20
	105 Move X0, X20
	106 Move X20, [X31+32]
	107 Move X19, [X31+40]
	108 Move X22, [X31+16]
	109 Move X21, [X31+24]
	110 Move X30, [X31+48]
	111 Move X23, [X31+56]
	112 Return X0

Method: System.String get_TimeSeparator()

Disassembly:
	0x03326A54 ADRP X19, 0xDCD000
	0x03326A58 LDR X19, [X19 + 0x758]
	0x03326A5C MOV X0, X19
	0x03326A60 BL 0x1C16D08
	0x03326A64 ADD X1, X31, 0xC
	0x03326A68 BL 0x1C16E04
	0x03326A6C MOV X20, X0
	0x03326A70 MOVZ W8, 0xD
	0x03326A74 MOV X0, X19
	0x03326A78 STR W8, [X31 + 0x8]
	0x03326A7C BL 0x1C16D08

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+96]
	003 Compare X8, 0
	004 JumpIfNotEqual {10}
	005 Move X8, [X0+16]
	006 Compare X8, 0
	007 JumpIfEqual {13}
	008 Move X8, [X8+32]
	009 Move [X0+96], X8
	010 Move X0, X8
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F20

Method: System.String get_UniversalSortableDateTimePattern()

Disassembly:
	0x03326A80 ADD X1, X31, 0x8
	0x03326A84 BL 0x1C16E04
	0x03326A88 MOV X19, X0
	0x03326A8C ADRP X0, 0xDFC000
	0x03326A90 LDR X0, [X0 + 0x370]
	0x03326A94 BL 0x1C16D08
	0x03326A98 MOV X1, X20
	0x03326A9C MOV X2, X19
	0x03326AA0 MOV X3, X31
	0x03326AA4 BL 0x320A264
	0x03326AA8 MOV X19, X0
	0x03326AAC ADRP X0, 0xDD5000
	0x03326AB0 LDR X0, [X0 + 0x760]
	0x03326AB4 BL 0x1C16D08
	0x03326AB8 BL 0x1C16F10
	0x03326ABC MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x10B7000
	005 Move X20, 0xE03000
	006 Move W8, [X19+3212]
	007 Move X20, [X20+888]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE03000
	013 Move X0, [X0+888]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3212], W8
	017 Move X0, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0

Method: System.String get_YearMonthPattern()

Disassembly:
	0x03326AC0 ADRP X0, 0xE01000
	0x03326AC4 LDR X0, [X0 + 0xDA8]
	0x03326AC8 BL 0x1C16D08
	0x03326ACC MOV X1, X0
	0x03326AD0 MOV X0, X20
	0x03326AD4 MOV X2, X19
	0x03326AD8 MOV X3, X31
	0x03326ADC BL 0x3311888
	0x03326AE0 ADRP X0, 0xE02000
	0x03326AE4 LDR X0, [X0 + 0x3C0]
	0x03326AE8 BL 0x1C16D08
	0x03326AEC MOV X1, X0
	0x03326AF0 MOV X0, X20
	0x03326AF4 BL 0x1C16DEC
	0x03326AF8 BL 0x1C16F28

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+224]
	005 Compare X0, 0
	006 JumpIfNotEqual {16}
	007 Move X0, X19
	008 Call DateTimeFormatInfo.get_UnclonedYearMonthPatterns, X0
	009 Compare X0, 0
	010 JumpIfEqual {19}
	011 Move W8, [X0+24]
	012 Compare W8, 0
	013 JumpIfEqual {20}
	014 Move X0, [X0+32]
	015 Move [X19+224], X0
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Return X0
	019 Call 0x1C17F20
	020 Call 0x1C17F28

Method: System.String[] get_AbbreviatedDayNames()

Disassembly:
	0x03326B50 TBZ X0, 0x0, 0x3326B90
	0x03326B54 MOV X0, X20
	0x03326B58 MOV X1, X31
	0x03326B5C BL 0x33A01F0
	0x03326B60 CBZ X0, 0x3326BD8
	0x03326B64 ADRP X8, 0xDCD000
	0x03326B68 LDR X8, [X8 + 0xAC8]
	0x03326B6C MOV X19, X0
	0x03326B70 LDR X20, [X8]
	0x03326B74 MOV X1, X20
	0x03326B78 BL 0x1C16E00
	0x03326B7C MOV X21, X0
	0x03326B80 CBNZ X0, 0x3326C88
	0x03326B84 MOV X0, X19
	0x03326B88 MOV X1, X20
	0x03326B8C BL 0x1C171E0
	0x03326B90 LDR X8, [X20 + 0x18]
	0x03326B94 CMP W8, 0x1
	0x03326B98 B.LT 0x3326BE0
	0x03326B9C MOV X23, X31
	0x03326BA0 AND X8, X8, 0x0
	0x03326BA4 ADD X21, X20, 0x20
	0x03326BA8 CMP X23, W8, UXTW
	0x03326BAC B.CS 0x3326C9C
	0x03326BB0 LDR X1, [X21, X23, LSL #3]
	0x03326BB4 MOV X0, X19
	0x03326BB8 MOV X2, X31
	0x03326BBC BL 0x321BA08
	0x03326BC0 TBNZ X0, 0x0, 0x3326BE8
	0x03326BC4 LDR W8, [X20 + 0x18]
	0x03326BC8 ADD X23, X23, 0x1
	0x03326BCC CMP X23, W8, SXTW
	0x03326BD0 B.LT 0x3326BA8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10B7000
	005 Move W8, [X20+3213]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDCE000
	012 Move X0, [X0+2760]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3213], W8
	016 Move X0, [X19+144]
	017 Compare X0, 0
	018 JumpIfNotEqual {23}
	019 Move X0, X19
	020 Call DateTimeFormatInfo.internalGetAbbreviatedDayOfWeekNamesCore, X0
	021 Compare X0, 0
	022 JumpIfEqual {42}
	023 Move X1, X31
	024 Call Array.Clone, X0
	025 Compare X0, 0
	026 JumpIfEqual {35}
	027 Move X8, 0xDCE000
	028 Move X8, [X8+2760]
	029 Move X19, X0
	030 Move X20, [X8]
	031 Move X1, X20
	032 Call 0x1C17E00
	033 Compare X0, 0
	034 JumpIfEqual {39}
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Return X0
	039 Move X0, X19
	040 Move X1, X20
	041 Call 0x1C181E0
	042 Call 0x1C17F20

Method: System.String[] get_DayNames()

Disassembly:
	0x03326BD4 B 0x3326BEC
	0x03326BD8 MOV X21, X31
	0x03326BDC B 0x3326C88
	0x03326BE0 MOV W23, W31
	0x03326BE4 B 0x3326BEC
	0x03326BE8 LDR X8, [X20 + 0x18]
	0x03326BEC CMP W23, W8
	0x03326BF0 B.GE 0x3326C44
	0x03326BF4 MOV X0, X20
	0x03326BF8 MOV X1, X31
	0x03326BFC BL 0x33A01F0
	0x03326C00 CBZ X0, 0x3326CA0
	0x03326C04 ADRP X8, 0xDCD000
	0x03326C08 LDR X8, [X8 + 0xAC8]
	0x03326C0C MOV X20, X0
	0x03326C10 LDR X22, [X8]
	0x03326C14 MOV X1, X22
	0x03326C18 BL 0x1C16E00
	0x03326C1C CBZ X0, 0x3326CA4
	0x03326C20 LDR W8, [X0 + 0x18]
	0x03326C24 MOV X21, X0
	0x03326C28 CBZ W8, 0x3326C9C
	0x03326C2C CMP W23, W8
	0x03326C30 B.CS 0x3326C9C
	0x03326C34 MOV X8, X21
	0x03326C38 LDR X9, [X8 + 0x20]!
	0x03326C3C STR X9, [X8, W23, SXTW]
	0x03326C40 B 0x3326C7C
	0x03326C44 ADRP X9, 0xDCD000
	0x03326C48 LDR X9, [X9 + 0xAC8]
	0x03326C4C ADD W1, W8, 0x1
	0x03326C50 LDR X0, [X9]
	0x03326C54 BL 0x1C16D6C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10B7000
	005 Move W8, [X20+3214]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDCE000
	012 Move X0, [X0+2760]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3214], W8
	016 Move X0, [X19+160]
	017 Compare X0, 0
	018 JumpIfNotEqual {23}
	019 Move X0, X19
	020 Call DateTimeFormatInfo.internalGetDayOfWeekNamesCore, X0
	021 Compare X0, 0
	022 JumpIfEqual {42}
	023 Move X1, X31
	024 Call Array.Clone, X0
	025 Compare X0, 0
	026 JumpIfEqual {35}
	027 Move X8, 0xDCE000
	028 Move X8, [X8+2760]
	029 Move X19, X0
	030 Move X20, [X8]
	031 Move X1, X20
	032 Call 0x1C17E00
	033 Compare X0, 0
	034 JumpIfEqual {39}
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Return X0
	039 Move X0, X19
	040 Move X1, X20
	041 Call 0x1C181E0
	042 Call 0x1C17F20

Method: System.String[] get_AbbreviatedMonthNames()

Disassembly:
	0x03326C58 LDR W4, [X20 + 0x18]
	0x03326C5C MOV X21, X0
	0x03326C60 MOVZ W3, 0x1
	0x03326C64 MOV X0, X20
	0x03326C68 MOV W1, W31
	0x03326C6C MOV X2, X21
	0x03326C70 MOV X5, X31
	0x03326C74 BL 0x339FCE8
	0x03326C78 CBZ X21, 0x3326CA0
	0x03326C7C LDR W8, [X21 + 0x18]
	0x03326C80 CBZ W8, 0x3326C9C
	0x03326C84 STR X19, [X21 + 0x20]
	0x03326C88 MOV X0, X21
	0x03326C8C LDP X20, X19, [X31 + 0x20]
	0x03326C90 LDP X22, X21, [X31 + 0x10]
	0x03326C94 LDP X30, X23, [X31], #0x30
	0x03326C98 RET
	0x03326C9C BL 0x1C16F28
	0x03326CA0 BL 0x1C16F20
	0x03326CA4 MOV X0, X20
	0x03326CA8 MOV X1, X22
	0x03326CAC BL 0x1C171E0
	0x03326CB0 STR X30, [X31 - 0x20]!
	0x03326CB4 STP X20, X19, [X31 + 0x10]
	0x03326CB8 ADRP X20, 0x10B6000
	0x03326CBC LDRB W8, [X20 + 0xC9A]
	0x03326CC0 MOV X19, X0
	0x03326CC4 TBNZ X8, 0x0, 0x3326CDC
	0x03326CC8 ADRP X0, 0xDCD000
	0x03326CCC LDR X0, [X0 + 0xAC8]
	0x03326CD0 BL 0x1C16CF4
	0x03326CD4 MOVZ W8, 0x1
	0x03326CD8 STRB W8, [X20 + 0xC9A]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10B7000
	005 Move W8, [X20+3215]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDCE000
	012 Move X0, [X0+2760]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3215], W8
	016 Move X0, [X19+168]
	017 Compare X0, 0
	018 JumpIfNotEqual {23}
	019 Move X0, X19
	020 Call DateTimeFormatInfo.internalGetAbbreviatedMonthNamesCore, X0
	021 Compare X0, 0
	022 JumpIfEqual {42}
	023 Move X1, X31
	024 Call Array.Clone, X0
	025 Compare X0, 0
	026 JumpIfEqual {35}
	027 Move X8, 0xDCE000
	028 Move X8, [X8+2760]
	029 Move X19, X0
	030 Move X20, [X8]
	031 Move X1, X20
	032 Call 0x1C17E00
	033 Compare X0, 0
	034 JumpIfEqual {39}
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Return X0
	039 Move X0, X19
	040 Move X1, X20
	041 Call 0x1C181E0
	042 Call 0x1C17F20

Method: System.String[] get_MonthNames()

Disassembly:
	0x03326CDC MOV X0, X19
	0x03326CE0 MOV W1, W31
	0x03326CE4 BL 0x3325F28
	0x03326CE8 CBZ X0, 0x3326D20
	0x03326CEC MOV X1, X31
	0x03326CF0 BL 0x33A01F0
	0x03326CF4 CBZ X0, 0x3326D14
	0x03326CF8 ADRP X8, 0xDCD000
	0x03326CFC LDR X8, [X8 + 0xAC8]
	0x03326D00 MOV X19, X0
	0x03326D04 LDR X20, [X8]
	0x03326D08 MOV X1, X20
	0x03326D0C BL 0x1C16E00
	0x03326D10 CBZ X0, 0x3326D24
	0x03326D14 LDP X20, X19, [X31 + 0x10]
	0x03326D18 LDR X30, [X31], #0x20
	0x03326D1C RET
	0x03326D20 BL 0x1C16F20
	0x03326D24 MOV X0, X19
	0x03326D28 MOV X1, X20
	0x03326D2C BL 0x1C171E0
	0x03326D30 STP X30, X21, [X31 - 0x20]!
	0x03326D34 STP X20, X19, [X31 + 0x10]
	0x03326D38 ADRP X20, 0x10B6000
	0x03326D3C LDRB W8, [X20 + 0xC9B]
	0x03326D40 MOV X19, X0
	0x03326D44 TBNZ X8, 0x0, 0x3326D74
	0x03326D48 ADRP X0, 0xE02000
	0x03326D4C LDR X0, [X0 + 0x3C8]
	0x03326D50 BL 0x1C16CF4
	0x03326D54 ADRP X0, 0xE02000
	0x03326D58 LDR X0, [X0 + 0x3D0]
	0x03326D5C BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10B7000
	005 Move W8, [X20+3216]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDCE000
	012 Move X0, [X0+2760]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3216], W8
	016 Move X0, [X19+176]
	017 Compare X0, 0
	018 JumpIfNotEqual {23}
	019 Move X0, X19
	020 Call DateTimeFormatInfo.internalGetMonthNamesCore, X0
	021 Compare X0, 0
	022 JumpIfEqual {42}
	023 Move X1, X31
	024 Call Array.Clone, X0
	025 Compare X0, 0
	026 JumpIfEqual {35}
	027 Move X8, 0xDCE000
	028 Move X8, [X8+2760]
	029 Move X19, X0
	030 Move X20, [X8]
	031 Move X1, X20
	032 Call 0x1C17E00
	033 Compare X0, 0
	034 JumpIfEqual {39}
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Return X0
	039 Move X0, X19
	040 Move X1, X20
	041 Call 0x1C181E0
	042 Call 0x1C17F20

Method: System.Boolean get_HasSpacesInMonthNames()

Disassembly:
	0x03326D60 ADRP X0, 0xE02000
	0x03326D64 LDR X0, [X0 + 0x3D8]
	0x03326D68 BL 0x1C16CF4
	0x03326D6C MOVZ W8, 0x1
	0x03326D70 STRB W8, [X20 + 0xC9B]
	0x03326D74 LDR X0, [X19 + 0x148]
	0x03326D78 CBNZ X0, 0x3326DEC
	0x03326D7C LDR X20, [X19 + 0x10]
	0x03326D80 CBZ X20, 0x3326DF8
	0x03326D84 LDRB W8, [X20 + 0x60]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, X0
	003 Move W0, [X0+324]
	004 Add W31, W0, 1
	005 Move X0, X8
	006 Call DateTimeFormatInfo.InitializeFormatFlags, X0
	007 Move W0, W0
	008 ShiftRight W0, 2
	009 And W0, W0, 3
	010 Move X30, [X31+16]
	011 Return X0

Method: System.Boolean get_HasSpacesInDayNames()

Disassembly:
	0x03326DA0 ADRP X8, 0xE02000
	0x03326DA4 LDR X8, [X8 + 0x3C8]
	0x03326DA8 LDR X0, [X8]
	0x03326DAC BL 0x1C16F10
	0x03326DB0 MOV X1, X20
	0x03326DB4 MOV X2, X31
	0x03326DB8 MOV X21, X0
	0x03326DBC BL 0x333A4AC
	0x03326DC0 CBZ X21, 0x3326DF8
	0x03326DC4 ADRP X8, 0xE02000

ISIL:
	001 Move [X31-16], X30
	002 Move X8, X0
	003 Move W0, [X0+324]
	004 Add W31, W0, 1
	005 Move X0, X8
	006 Call DateTimeFormatInfo.InitializeFormatFlags, X0
	007 Move W0, W0
	008 ShiftRight W0, 4
	009 And W0, W0, 15
	010 Move X30, [X31+16]
	011 Return X0

Method: System.String internalGetMonthName(System.Int32 month, System.Globalization.MonthNameStyles style, System.Boolean abbreviated)

Disassembly:
	0x03326DC8 ADRP X9, 0xE02000
	0x03326DCC LDR X1, [X21 + 0x38]
	0x03326DD0 LDR X8, [X8 + 0x3D0]
	0x03326DD4 LDR X9, [X9 + 0x3D8]
	0x03326DD8 MOV X3, X31
	0x03326DDC LDR X0, [X8]
	0x03326DE0 LDR X2, [X9]
	0x03326DE4 BL 0x32274B8
	0x03326DE8 STR X0, [X19 + 0x148]
	0x03326DEC LDP X20, X19, [X31 + 0x10]
	0x03326DF0 LDP X30, X21, [X31], #0x20
	0x03326DF4 RET
	0x03326DF8 BL 0x1C16F20
	0x03326DFC STR X30, [X31 - 0x20]!
	0x03326E00 STP X20, X19, [X31 + 0x10]
	0x03326E04 ADRP X20, 0x10B6000
	0x03326E08 LDRB W8, [X20 + 0xC9C]
	0x03326E0C MOV X19, X0
	0x03326E10 TBNZ X8, 0x0, 0x3326E28
	0x03326E14 ADRP X0, 0xE02000
	0x03326E18 LDR X0, [X0 + 0x3E0]
	0x03326E1C BL 0x1C16CF4
	0x03326E20 MOVZ W8, 0x1
	0x03326E24 STRB W8, [X20 + 0xC9C]
	0x03326E28 LDR X0, [X19 + 0x150]
	0x03326E2C CBNZ X0, 0x3326E58
	0x03326E30 MOV X0, X19
	0x03326E34 BL 0x3326D30
	0x03326E38 ADRP X8, 0xE02000
	0x03326E3C LDR X8, [X8 + 0x3E0]
	0x03326E40 MOV X1, X0
	0x03326E44 MOV X2, X31
	0x03326E48 LDR X8, [X8]
	0x03326E4C MOV X0, X8
	0x03326E50 BL 0x321B938
	0x03326E54 STR X0, [X19 + 0x150]
	0x03326E58 LDP X20, X19, [X31 + 0x10]
	0x03326E5C LDR X30, [X31], #0x20
	0x03326E60 RET
	0x03326E64 STR X30, [X31 - 0x20]!
	0x03326E68 STP X20, X19, [X31 + 0x10]
	0x03326E6C ADRP X20, 0x10B6000
	0x03326E70 LDRB W8, [X20 + 0xC9D]
	0x03326E74 MOV X19, X0
	0x03326E78 TBNZ X8, 0x0, 0x3326E90
	0x03326E7C ADRP X0, 0xDFB000
	0x03326E80 LDR X0, [X0 + 0xFD0]
	0x03326E84 BL 0x1C16CF4
	0x03326E88 MOVZ W8, 0x1
	0x03326E8C STRB W8, [X20 + 0xC9D]
	0x03326E90 LDR X0, [X19 + 0x28]
	0x03326E94 CBNZ X0, 0x3326ED8
	0x03326E98 LDR X0, [X19 + 0x10]
	0x03326E9C CBZ X0, 0x3326EE4
	0x03326EA0 MOV X1, X31
	0x03326EA4 BL 0x3340648
	0x03326EA8 ADRP X8, 0xDFB000
	0x03326EAC LDR X8, [X8 + 0xFD0]
	0x03326EB0 MOV X20, X0
	0x03326EB4 LDR X8, [X8]
	0x03326EB8 LDR W9, [X8 + 0xE0]
	0x03326EBC CBNZ W9, 0x3326EC8
	0x03326EC0 MOV X0, X8
	0x03326EC4 BL 0x1C16DFC
	0x03326EC8 MOV X0, X20
	0x03326ECC MOV X1, X31
	0x03326ED0 BL 0x3303EA0
	0x03326ED4 STR X0, [X19 + 0x28]
	0x03326ED8 LDP X20, X19, [X31 + 0x10]
	0x03326EDC LDR X30, [X31], #0x20
	0x03326EE0 RET
	0x03326EE4 BL 0x1C16F20
	0x03326EE8 STR X30, [X31 - 0x20]!
	0x03326EEC STP X20, X19, [X31 + 0x10]
	0x03326EF0 CMP W0, 0x100
	0x03326EF4 B.CS 0x3326F1C
	0x03326EF8 ORN W8, W31, W0, 0x0
	0x03326EFC ANDS W31, W8, 0x60
	0x03326F00 B.EQ 0x3326F40
	0x03326F04 TBZ X0, 0x7, 0x3326F10
	0x03326F08 AND W8, W0, 0x70
	0x03326F0C CBNZ W8, 0x3326F64
	0x03326F10 LDP X20, X19, [X31 + 0x10]
	0x03326F14 LDR X30, [X31], #0x20
	0x03326F18 RET
	0x03326F1C ADRP X0, 0xDD5000
	0x03326F20 LDR X0, [X0 + 0x578]
	0x03326F24 MOV X19, X1

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W19, W1
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X8, X0
	009 NotImplemented "Instruction CMP not yet implemented."
	010 And W1, W3, 1
	011 Move X0, X8
	012 Call DateTimeFormatInfo.internalGetGenitiveMonthNames, X0, X1
	013 Move X0, X8
	014 Call DateTimeFormatInfo.internalGetLeapYearMonthNames, X0
	015 Move TEMP, X3
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfNotEqual {24}
	019 Move X0, [X8+168]
	020 Compare X0, 0
	021 JumpIfNotEqual {29}
	022 Move X0, X8
	023 Call DateTimeFormatInfo.internalGetAbbreviatedMonthNamesCore, X0
	024 Move X0, [X8+176]
	025 Compare X0, 0
	026 JumpIfNotEqual {29}
	027 Move X0, X8
	028 Call DateTimeFormatInfo.internalGetMonthNamesCore, X0
	029 Subtract W8, W19, 1
	030 Compare X0, 0
	031 JumpIfEqual {89}
	032 Move W9, [X0+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Add X8, X0, W8
	036 Move X0, [X8+32]
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X30, [X31+16]
	040 Move X21, [X31+24]
	041 Add X31, X31, 48
	042 Return X0
	043 Move W8, 1
	044 Move [X31+12], W8
	045 Move X19, 0xDCE000
	046 Move X19, [X19+1880]
	047 Move X20, X0
	048 Move X0, X19
	049 Call 0x1C17D08
	050 Add X1, X31, 12
	051 Call 0x1C17E04
	052 Move X21, X0
	053 Move X0, X20
	054 Call 0x19913C0
	055 Move X8, [X20+24]
	056 Move X0, X19
	057 Move [X31+8], W8
	058 Call 0x1C17D08
	059 Add X1, X31, 8
	060 Call 0x1C17E04
	061 Move X19, X0
	062 Move X0, 0xDFD000
	063 Move X0, [X0+880]
	064 Call 0x1C17D08
	065 Move X1, X21
	066 Move X2, X19
	067 Move X3, X31
	068 Call SR.Format, X0, X1, X2
	069 Move X19, X0
	070 Move X0, 0xDD6000
	071 Move X0, [X0+1888]
	072 Call 0x1C17D08
	073 Call 0x1C17F10
	074 Move X20, X0
	075 Move X0, 0xE02000
	076 Move X0, [X0+3496]
	077 Call 0x1C17D08
	078 Move X1, X0
	079 Move X0, X20
	080 Move X2, X19
	081 Move X3, X31
	082 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	083 Move X0, 0xE03000
	084 Move X0, [X0+896]
	085 Call 0x1C17D08
	086 Move X1, X0
	087 Move X0, X20
	088 Call 0x1C17DEC
	089 Call 0x1C17F20
	090 Call 0x1C17F28

Method: System.String[] internalGetGenitiveMonthNames(System.Boolean abbreviated)

Disassembly:
	0x03326F28 BL 0x1C16D08
	0x03326F2C BL 0x1C16F10
	0x03326F30 MOV X20, X0
	0x03326F34 ADRP X0, 0xE02000
	0x03326F38 LDR X0, [X0 + 0x3E8]
	0x03326F3C B 0x3326F84
	0x03326F40 ADRP X0, 0xDD5000
	0x03326F44 LDR X0, [X0 + 0x578]
	0x03326F48 MOV X19, X1
	0x03326F4C BL 0x1C16D08
	0x03326F50 BL 0x1C16F10
	0x03326F54 MOV X20, X0
	0x03326F58 ADRP X0, 0xE02000
	0x03326F5C LDR X0, [X0 + 0x3F0]
	0x03326F60 B 0x3326F84
	0x03326F64 ADRP X0, 0xDD5000
	0x03326F68 LDR X0, [X0 + 0x578]
	0x03326F6C MOV X19, X1
	0x03326F70 BL 0x1C16D08
	0x03326F74 BL 0x1C16F10
	0x03326F78 MOV X20, X0
	0x03326F7C ADRP X0, 0xE02000
	0x03326F80 LDR X0, [X0 + 0x3F8]
	0x03326F84 BL 0x1C16D08
	0x03326F88 MOV X1, X0
	0x03326F8C MOV X0, X20
	0x03326F90 MOV X2, X19
	0x03326F94 MOV X3, X31
	0x03326F98 BL 0x330E16C
	0x03326F9C ADRP X0, 0xE02000
	0x03326FA0 LDR X0, [X0 + 0x400]
	0x03326FA4 BL 0x1C16D08
	0x03326FA8 MOV X1, X0
	0x03326FAC MOV X0, X20
	0x03326FB0 BL 0x1C16DEC
	0x03326FB4 STP X30, X23, [X31 - 0x30]!
	0x03326FB8 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move TEMP, X1
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfNotEqual {27}
	009 Move X0, [X19+192]
	010 Compare X0, 0
	011 JumpIfNotEqual {45}
	012 Move X0, [X19+120]
	013 Compare X0, 0
	014 JumpIfEqual {49}
	015 Move X8, [X0]
	016 Move X20, [X19+16]
	017 Move X9, [X8+424]
	018 Move X1, [X8+432]
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Compare X20, 0
	021 JumpIfEqual {49}
	022 Move W1, W0
	023 Move X0, X20
	024 Move X2, X31
	025 Call CultureData.AbbreviatedGenitiveMonthNames, X0, X1
	026 Move [X19+192], X0
	027 Move X0, [X19+184]
	028 Compare X0, 0
	029 JumpIfNotEqual {45}
	030 Move X0, [X19+120]
	031 Compare X0, 0
	032 JumpIfEqual {49}
	033 Move X8, [X0]
	034 Move X20, [X19+16]
	035 Move X9, [X8+424]
	036 Move X1, [X8+432]
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Compare X20, 0
	039 JumpIfEqual {49}
	040 Move W1, W0
	041 Move X0, X20
	042 Move X2, X31
	043 Call CultureData.GenitiveMonthNames, X0, X1
	044 Move [X19+184], X0
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Return X0
	049 Call 0x1C17F20

Method: System.String[] internalGetLeapYearMonthNames()

Disassembly:
	0x03326FBC STP X20, X19, [X31 + 0x20]
	0x03326FC0 MOV X19, X0
	0x03326FC4 BL 0x3325CDC
	0x03326FC8 MOV X22, X0
	0x03326FCC MOV X0, X19
	0x03326FD0 MOV W1, W31
	0x03326FD4 BL 0x3325F28
	0x03326FD8 MOV X23, X0
	0x03326FDC MOV X0, X19
	0x03326FE0 BL 0x3325C58
	0x03326FE4 MOV X20, X0
	0x03326FE8 MOVZ W1, 0x1
	0x03326FEC MOV X0, X19
	0x03326FF0 BL 0x3325F28
	0x03326FF4 MOV X21, X0
	0x03326FF8 MOV X0, X22
	0x03326FFC MOV X1, X23
	0x03327000 BL 0x332AC28
	0x03327004 TBZ X0, 0x0, 0x3327020
	0x03327008 MOV X0, X20
	0x0332700C MOV X1, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+200]
	006 Compare X0, 0
	007 JumpIfNotEqual {23}
	008 Move X0, [X19+120]
	009 Compare X0, 0
	010 JumpIfEqual {27}
	011 Move X8, [X0]
	012 Move X20, [X19+16]
	013 Move X9, [X8+424]
	014 Move X1, [X8+432]
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Compare X20, 0
	017 JumpIfEqual {27}
	018 Move W1, W0
	019 Move X0, X20
	020 Move X2, X31
	021 Call CultureData.LeapYearMonthNames, X0, X1
	022 Move [X19+200], X0
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Return X0
	027 Call 0x1C17F20

Method: System.String GetAbbreviatedDayName(System.DayOfWeek dayofweek)

Disassembly:
	0x03327010 BL 0x332AC28
	0x03327014 TBZ X0, 0x0, 0x3327020
	0x03327018 MOV W23, W31
	0x0332701C B 0x3327024
	0x03327020 MOVZ W23, 0x1
	0x03327024 MOV X0, X19
	0x03327028 BL 0x3325CDC
	0x0332702C MOV X20, X0
	0x03327030 MOV X0, X19
	0x03327034 MOV W1, W31
	0x03327038 BL 0x3325F28
	0x0332703C MOV X21, X0
	0x03327040 MOV X0, X19
	0x03327044 BL 0x3325C58
	0x03327048 MOV X22, X0
	0x0332704C MOVZ W1, 0x1
	0x03327050 MOV X0, X19
	0x03327054 BL 0x3325F28
	0x03327058 MOV X3, X0
	0x0332705C MOV X0, X20
	0x03327060 MOV X1, X21
	0x03327064 MOV X2, X22
	0x03327068 BL 0x3327130
	0x0332706C MOV W20, W0
	0x03327070 MOV X0, X19
	0x03327074 BL 0x3325BD4
	0x03327078 MOV X22, X0
	0x0332707C MOV X0, X19
	0x03327080 BL 0x3325B50
	0x03327084 MOV X21, X0
	0x03327088 MOV X0, X22
	0x0332708C BL 0x332AF34
	0x03327090 TBNZ X0, 0x0, 0x33270A0
	0x03327094 MOV X0, X21
	0x03327098 BL 0x332AF34
	0x0332709C TBZ X0, 0x0, 0x33270A8
	0x033270A0 MOVZ W21, 0x10
	0x033270A4 B 0x33270AC
	0x033270A8 MOV W21, W31
	0x033270AC LDR X0, [X19 + 0x78]
	0x033270B0 CBZ X0, 0x33270EC
	0x033270B4 LDR X8, [X0]
	0x033270B8 LDP X9, X1, [X8 + 0x1A8]
	0x033270BC BLR X9
	0x033270C0 CMP W0, 0x8
	0x033270C4 MOVZ W8, 0xA
	0x033270C8 ORR W9, W20, W23, 0x0
	0x033270CC CSEL W8, W8, W31, EQ
	0x033270D0 ORR W9, W9, W21, 0x0
	0x033270D4 ORR W0, W9, W8, 0x0
	0x033270D8 STR W0, [X19 + 0x144]
	0x033270DC LDP X20, X19, [X31 + 0x20]
	0x033270E0 LDP X22, X21, [X31 + 0x10]
	0x033270E4 LDP X30, X23, [X31], #0x30
	0x033270E8 RET
	0x033270EC BL 0x1C16F20
	0x033270F0 STR X30, [X31 - 0x20]!
	0x033270F4 STP X20, X19, [X31 + 0x10]
	0x033270F8 MOV X19, X3
	0x033270FC MOV X20, X2
	0x03327100 BL 0x332AC28
	0x03327104 TBZ X0, 0x0, 0x3327120
	0x03327108 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move X8, X0
	006 Move X0, [X0+144]
	007 Move W19, W1
	008 Compare X0, 0
	009 JumpIfNotEqual {14}
	010 Move X0, X8
	011 Call DateTimeFormatInfo.internalGetAbbreviatedDayOfWeekNamesCore, X0
	012 Compare X0, 0
	013 JumpIfEqual {65}
	014 Move W8, [X0+24]
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Add X8, X0, W19
	017 Move X0, [X8+32]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move [X31+12], W31
	023 Move X19, 0xDD2000
	024 Move X19, [X19+2936]
	025 Move X0, X19
	026 Call 0x1C17D08
	027 Add X1, X31, 12
	028 Call 0x1C17E04
	029 Move X20, X0
	030 Move W8, 6
	031 Move X0, X19
	032 Move [X31+8], W8
	033 Call 0x1C17D08
	034 Add X1, X31, 8
	035 Call 0x1C17E04
	036 Move X19, X0
	037 Move X0, 0xDFC000
	038 Move X0, [X0+880]
	039 Call 0x1C17D08
	040 Move X1, X20
	041 Move X2, X19
	042 Move X3, X31
	043 Call SR.Format, X0, X1, X2
	044 Move X19, X0
	045 Move X0, 0xDD5000
	046 Move X0, [X0+1888]
	047 Call 0x1C17D08
	048 Call 0x1C17F10
	049 Move X20, X0
	050 Move X0, 0xE02000
	051 Move X0, [X0+904]
	052 Call 0x1C17D08
	053 Move X1, X0
	054 Move X0, X20
	055 Move X2, X19
	056 Move X3, X31
	057 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	058 Move X0, 0xE02000
	059 Move X0, [X0+912]
	060 Call 0x1C17D08
	061 Move X1, X0
	062 Move X0, X20
	063 Call 0x1C17DEC
	064 Call 0x1C17F28
	065 Call 0x1C17F20

Method: System.String[] GetCombinedPatterns(System.String[] patterns1, System.String[] patterns2, System.String connectString)

Disassembly:
	0x0332710C MOV X1, X19
	0x03327110 BL 0x332AC28
	0x03327114 TBZ X0, 0x0, 0x3327120
	0x03327118 MOV W0, W31
	0x0332711C B 0x3327124
	0x03327120 MOVZ W0, 0x1
	0x03327124 LDP X20, X19, [X31 + 0x10]
	0x03327128 LDR X30, [X31], #0x20
	0x0332712C RET
	0x03327130 STP X30, X23, [X31 - 0x30]!
	0x03327134 STP X22, X21, [X31 + 0x10]
	0x03327138 STP X20, X19, [X31 + 0x20]
	0x0332713C MOV X19, X3
	0x03327140 MOV X20, X2
	0x03327144 MOV X21, X1
	0x03327148 MOV X22, X0
	0x0332714C BL 0x332ACD8
	0x03327150 TBNZ X0, 0x0, 0x3327178
	0x03327154 MOV X0, X21
	0x03327158 BL 0x332ACD8
	0x0332715C TBNZ X0, 0x0, 0x3327178
	0x03327160 MOV X0, X20
	0x03327164 BL 0x332ACD8
	0x03327168 TBNZ X0, 0x0, 0x3327178
	0x0332716C MOV X0, X19
	0x03327170 BL 0x332ACD8
	0x03327174 TBZ X0, 0x0, 0x33271E0
	0x03327178 MOVZ W23, 0x20
	0x0332717C MOV X0, X22
	0x03327180 BL 0x332AF34
	0x03327184 ANDS W8, W0, 0x1
	0x03327188 CSEL W22, W31, W23, NE
	0x0332718C CBNZ W8, 0x33271C4
	0x03327190 MOV X0, X21
	0x03327194 BL 0x332AF34
	0x03327198 ANDS W8, W0, 0x1
	0x0332719C CSEL W21, W31, W22, NE
	0x033271A0 CBNZ W8, 0x33271C4
	0x033271A4 MOV X0, X20
	0x033271A8 BL 0x332AF34
	0x033271AC MOV W23, W22
	0x033271B0 TBNZ X0, 0x0, 0x33271C4
	0x033271B4 MOV X0, X19
	0x033271B8 BL 0x332AF34
	0x033271BC TBZ X0, 0x0, 0x33271E8
	0x033271C0 MOV W23, W21
	0x033271C4 MOVZ W8, 0x4
	0x033271C8 MOV W21, W23
	0x033271CC ORR W0, W8, W21, 0x0
	0x033271D0 LDP X20, X19, [X31 + 0x20]
	0x033271D4 LDP X22, X21, [X31 + 0x10]
	0x033271D8 LDP X30, X23, [X31], #0x30
	0x033271DC RET
	0x033271E0 MOV W23, W31
	0x033271E4 B 0x332717C
	0x033271E8 MOV W8, W31
	0x033271EC B 0x33271CC
	0x033271F0 STP X30, X19, [X31 - 0x10]!
	0x033271F4 MOV X19, X1
	0x033271F8 BL 0x332AF34
	0x033271FC TBNZ X0, 0x0, 0x332720C
	0x03327200 MOV X0, X19
	0x03327204 BL 0x332AF34
	0x03327208 TBZ X0, 0x0, 0x3327214
	0x0332720C MOVZ W0, 0x10
	0x03327210 B 0x3327218
	0x03327214 MOV W0, W31
	0x03327218 LDP X30, X19, [X31], #0x10
	0x0332721C RET
	0x03327220 CMP W0, 0x8
	0x03327224 MOVZ W8, 0xA
	0x03327228 CSEL W0, W8, W31, EQ
	0x0332722C RET
	0x03327230 STR X30, [X31 - 0x10]!
	0x03327234 LDR X0, [X0 + 0x78]
	0x03327238 CBZ X0, 0x3327260
	0x0332723C LDR X8, [X0]
	0x03327240 LDP X9, X1, [X8 + 0x1A8]
	0x03327244 BLR X9
	0x03327248 AND W8, W0, 0xFFFF
	0x0332724C SUB W8, W8, 0x3

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X22, 0x10B6000
	013 Move W8, [X22+3217]
	014 Move X19, X2
	015 Move X20, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xDCD000
	022 Move X0, [X0+2760]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+3217], W8
	026 Compare X21, 0
	027 JumpIfEqual {88}
	028 Compare X20, 0
	029 JumpIfEqual {88}
	030 Move X8, 0xDCD000
	031 Move X8, [X8+2760]
	032 Move W9, [X21+24]
	033 Move W10, [X20+24]
	034 Move X0, [X8]
	035 Multiply W1, W10, W9
	036 Call 0x1C17D6C
	037 Move X9, [X21+24]
	038 Move X22, X0
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move W8, [X20+24]
	041 Move X23, X31
	042 Move W24, W31
	043 And X9, X9, 0
	044 Add X25, X20, 32
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Add X9, X21, X23
	048 Move X27, X31
	049 Add X26, X9, 32
	050 Move W28, W24
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X0, [X26]
	053 Move X2, [X25]
	054 Move X1, X19
	055 Move X3, X31
	056 Call String.Concat, X0, X1, X2
	057 Compare X22, 0
	058 JumpIfEqual {88}
	059 Move W9, [X22+24]
	060 Add X8, X28, X27
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Add X8, X22, W8
	063 Move [X8+32], X0
	064 Move W8, [X20+24]
	065 Move W9, [X21+24]
	066 Add X10, X27, 1
	067 NotImplemented "Instruction CMP not yet implemented."
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move X27, X10
	070 Add W10, W24, W27
	071 Add W24, W10, 1
	072 Add X23, X23, 1
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move X0, X22
	075 Move X20, [X31+80]
	076 Move X19, [X31+88]
	077 Move X22, [X31+64]
	078 Move X21, [X31+72]
	079 Move X24, [X31+48]
	080 Move X23, [X31+56]
	081 Move X26, [X31+32]
	082 Move X25, [X31+40]
	083 Move X28, [X31+16]
	084 Move X27, [X31+24]
	085 Move X30, [X31+96]
	086 Return X0
	087 Call 0x1C17F28
	088 Call 0x1C17F20

Method: System.String[] GetAllDateTimePatterns(System.Char format)

Disassembly:
	0x03327250 CMP W8, 0x2
	0x03327254 CSET W0, CC
	0x03327258 LDR X30, [X31], #0x10
	0x0332725C RET
	0x03327260 BL 0x1C16F20
	0x03327264 STR X30, [X31 - 0x10]!
	0x03327268 MOV X8, X0
	0x0332726C LDR W0, [X0 + 0x144]
	0x03327270 ADDS W31, W0, 0x1
	0x03327274 B.NE 0x3327280
	0x03327278 MOV X0, X8
	0x0332727C BL 0x3326FB4
	0x03327280 UBFM W0, W0, 0x3, 0x3
	0x03327284 LDR X30, [X31], #0x10
	0x03327288 RET
	0x0332728C STR X30, [X31 - 0x40]!
	0x03327290 STP X24, X23, [X31 + 0x10]
	0x03327294 STP X22, X21, [X31 + 0x20]
	0x03327298 STP X20, X19, [X31 + 0x30]
	0x0332729C MOV X21, X0
	0x033272A0 LDR W0, [X0 + 0x144]
	0x033272A4 MOV W22, W3
	0x033272A8 MOV X19, X2
	0x033272AC MOV X20, X1
	0x033272B0 ADDS W31, W0, 0x1
	0x033272B4 B.EQ 0x33272C0
	0x033272B8 TBNZ X0, 0x3, 0x33272CC
	0x033272BC B 0x33273A4
	0x033272C0 MOV X0, X21
	0x033272C4 BL 0x3326FB4
	0x033272C8 TBZ X0, 0x3, 0x33273A4
	0x033272CC LDR W24, [X20]
	0x033272D0 CMP W24, 0x3E7
	0x033272D4 B.GT 0x33272E4
	0x033272D8 MOVZ W8, 0x1388
	0x033272DC ADD W24, W24, W8
	0x033272E0 STR W24, [X20]
	0x033272E4 LDR X23, [X21 + 0x78]
	0x033272E8 CBZ X23, 0x33273BC
	0x033272EC LDR X8, [X23]
	0x033272F0 MOV X0, X23
	0x033272F4 LDP X9, X1, [X8 + 0x188]
	0x033272F8 BLR X9
	0x033272FC LDR X8, [X23]
	0x03327300 MOV X1, X0
	0x03327304 MOV X0, X23
	0x03327308 LDR X9, [X8 + 0x268]
	0x0332730C LDR X2, [X8 + 0x270]
	0x03327310 BLR X9
	0x03327314 CMP W24, W0
	0x03327318 B.LT 0x3327358
	0x0332731C LDR X23, [X21 + 0x78]
	0x03327320 CBZ X23, 0x33273BC
	0x03327324 LDR X8, [X23]
	0x03327328 LDR W24, [X20]
	0x0332732C MOV X0, X23
	0x03327330 LDP X9, X1, [X8 + 0x198]
	0x03327334 BLR X9
	0x03327338 LDR X8, [X23]
	0x0332733C MOV X1, X0
	0x03327340 MOV X0, X23
	0x03327344 LDR X9, [X8 + 0x268]
	0x03327348 LDR X2, [X8 + 0x270]
	0x0332734C BLR X9
	0x03327350 CMP W24, W0
	0x03327354 B.LE 0x3327360
	0x03327358 MOV W0, W31
	0x0332735C B 0x33273A8
	0x03327360 TBZ X22, 0x0, 0x33273A4
	0x03327364 LDR X0, [X21 + 0x78]
	0x03327368 CBZ X0, 0x33273BC
	0x0332736C LDR X8, [X0]
	0x03327370 LDR W1, [X20]
	0x03327374 LDR X9, [X8 + 0x278]
	0x03327378 LDR X2, [X8 + 0x280]
	0x0332737C BLR X9
	0x03327380 TBNZ X0, 0x0, 0x33273A4
	0x03327384 LDR W8, [X19]
	0x03327388 CMP W8, 0x8
	0x0332738C B.GE 0x332739C
	0x03327390 CMP W8, 0x7
	0x03327394 B.EQ 0x3327358
	0x03327398 B 0x33273A4
	0x0332739C SUB W8, W8, 0x1
	0x033273A0 STR W8, [X19]
	0x033273A4 MOVZ W0, 0x1
	0x033273A8 LDP X20, X19, [X31 + 0x30]
	0x033273AC LDP X22, X21, [X31 + 0x20]
	0x033273B0 LDP X24, X23, [X31 + 0x10]
	0x033273B4 LDR X30, [X31], #0x40
	0x033273B8 RET
	0x033273BC BL 0x1C16F20
	0x033273C0 STP X30, X21, [X31 - 0x20]!
	0x033273C4 STP X20, X19, [X31 + 0x10]
	0x033273C8 ADRP X19, 0x10B5000
	0x033273CC ADRP X20, 0xE01000
	0x033273D0 LDRB W8, [X19 + 0xC9E]
	0x033273D4 LDR X20, [X20 + 0x328]
	0x033273D8 TBNZ X8, 0x0, 0x3327420
	0x033273DC ADRP X0, 0xDCE000
	0x033273E0 LDR X0, [X0 + 0xC48]
	0x033273E4 BL 0x1C16CF4
	0x033273E8 ADRP X0, 0xE01000
	0x033273EC LDR X0, [X0 + 0x328]
	0x033273F0 BL 0x1C16CF4
	0x033273F4 ADRP X0, 0xE00000
	0x033273F8 LDR X0, [X0 + 0x930]
	0x033273FC BL 0x1C16CF4
	0x03327400 ADRP X0, 0xE01000
	0x03327404 LDR X0, [X0 + 0x408]
	0x03327408 BL 0x1C16CF4
	0x0332740C ADRP X0, 0xE01000
	0x03327410 LDR X0, [X0 + 0x410]
	0x03327414 BL 0x1C16CF4
	0x03327418 MOVZ W8, 0x1
	0x0332741C STRB W8, [X19 + 0xC9E]
	0x03327420 LDR X0, [X20]
	0x03327424 LDR W8, [X0 + 0xE0]
	0x03327428 CBNZ W8, 0x3327434
	0x0332742C BL 0x1C16DFC
	0x03327430 LDR X0, [X20]
	0x03327434 LDR X8, [X0 + 0xB8]
	0x03327438 LDR X19, [X8 + 0x10]
	0x0332743C BL 0x1C16D44
	0x03327440 CBNZ X19, 0x3327540
	0x03327444 ADRP X19, 0xE00000
	0x03327448 LDR X19, [X19 + 0x930]
	0x0332744C LDR X0, [X19]
	0x03327450 LDR W8, [X0 + 0xE0]
	0x03327454 CBNZ W8, 0x332745C
	0x03327458 BL 0x1C16DFC
	0x0332745C ADRP X21, 0x10B5000
	0x03327460 LDRB W8, [X21 + 0xAFE]
	0x03327464 CBNZ W8, 0x332747C
	0x03327468 ADRP X0, 0xE00000
	0x0332746C LDR X0, [X0 + 0x930]
	0x03327470 BL 0x1C16CF4
	0x03327474 MOVZ W8, 0x1
	0x03327478 STRB W8, [X21 + 0xAFE]
	0x0332747C LDR X0, [X19]
	0x03327480 LDR W8, [X0 + 0xE0]
	0x03327484 CBNZ W8, 0x3327490
	0x03327488 BL 0x1C16DFC
	0x0332748C LDR X0, [X19]
	0x03327490 LDR X8, [X0 + 0xB8]
	0x03327494 LDRB W8, [X8]
	0x03327498 CBZ W8, 0x33274A4
	0x0332749C MOV X19, X31
	0x033274A0 B 0x3327540
	0x033274A4 ADRP X8, 0xDCE000
	0x033274A8 LDR X8, [X8 + 0xC48]
	0x033274AC LDR X0, [X8]
	0x033274B0 BL 0x1C16F10
	0x033274B4 ADRP X8, 0xE01000
	0x033274B8 LDR X8, [X8 + 0x410]
	0x033274BC MOV W2, W31
	0x033274C0 MOV X3, X31
	0x033274C4 MOV X19, X0
	0x033274C8 LDR X1, [X8]
	0x033274CC BL 0x334010C
	0x033274D0 CBZ X19, 0x3327550
	0x033274D4 LDR X8, [X19]
	0x033274D8 MOV X0, X19
	0x033274DC LDR X9, [X8 + 0x238]
	0x033274E0 LDR X1, [X8 + 0x240]
	0x033274E4 BLR X9
	0x033274E8 ADRP X8, 0xE01000
	0x033274EC LDR X8, [X8 + 0x408]
	0x033274F0 MOV X19, X0
	0x033274F4 LDR X8, [X8]
	0x033274F8 LDR W9, [X8 + 0xE0]
	0x033274FC CBNZ W9, 0x3327508
	0x03327500 MOV X0, X8
	0x03327504 BL 0x1C16DFC
	0x03327508 MOV X0, X31
	0x0332750C BL 0x3339C08
	0x03327510 CBZ X19, 0x3327550
	0x03327514 MOV X1, X0
	0x03327518 MOV X0, X19
	0x0332751C BL 0x3324888
	0x03327520 LDR X0, [X20]
	0x03327524 LDR W8, [X0 + 0xE0]
	0x03327528 CBNZ W8, 0x3327530
	0x0332752C BL 0x1C16DFC
	0x03327530 BL 0x1C16D44
	0x03327534 LDR X8, [X20]
	0x03327538 LDR X8, [X8 + 0xB8]
	0x0332753C STR X19, [X8 + 0x10]
	0x03327540 MOV X0, X19
	0x03327544 LDP X20, X19, [X31 + 0x10]
	0x03327548 LDP X30, X21, [X31], #0x20
	0x0332754C RET
	0x03327550 BL 0x1C16F20
	0x03327554 STP X30, X21, [X31 - 0x20]!
	0x03327558 STP X20, X19, [X31 + 0x10]
	0x0332755C ADRP X19, 0x10B5000
	0x03327560 ADRP X20, 0xE01000
	0x03327564 LDRB W8, [X19 + 0xC9F]
	0x03327568 LDR X20, [X20 + 0x328]
	0x0332756C TBNZ X8, 0x0, 0x33275B4
	0x03327570 ADRP X0, 0xDCE000
	0x03327574 LDR X0, [X0 + 0xC48]
	0x03327578 BL 0x1C16CF4
	0x0332757C ADRP X0, 0xE01000
	0x03327580 LDR X0, [X0 + 0x328]
	0x03327584 BL 0x1C16CF4
	0x03327588 ADRP X0, 0xE00000
	0x0332758C LDR X0, [X0 + 0x930]
	0x03327590 BL 0x1C16CF4
	0x03327594 ADRP X0, 0xE01000
	0x03327598 LDR X0, [X0 + 0x418]
	0x0332759C BL 0x1C16CF4
	0x033275A0 ADRP X0, 0xE01000
	0x033275A4 LDR X0, [X0 + 0x420]
	0x033275A8 BL 0x1C16CF4
	0x033275AC MOVZ W8, 0x1
	0x033275B0 STRB W8, [X19 + 0xC9F]
	0x033275B4 LDR X0, [X20]
	0x033275B8 LDR W8, [X0 + 0xE0]
	0x033275BC CBNZ W8, 0x33275C8

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x10B6000
	007 Move W8, [X21+3218]
	008 Move W20, W1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {34}
	014 Move X0, 0xE02000
	015 Move X0, [X0+808]
	016 Call 0x1C17CF4
	017 Move X0, 0xDCD000
	018 Move X0, [X0+2760]
	019 Call 0x1C17CF4
	020 Move X0, 0xDCD000
	021 Move X0, [X0+3544]
	022 Call 0x1C17CF4
	023 Move X0, 0xE02000
	024 Move X0, [X0+920]
	025 Call 0x1C17CF4
	026 Move X0, 0xE02000
	027 Move X0, [X0+864]
	028 Call 0x1C17CF4
	029 Move X0, 0xE02000
	030 Move X0, [X0+872]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X21+3218], W8
	034 And W8, W20, 0xFFFF
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Subtract W8, W8, 68
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X9, -41484288
	039 Add X9, X9, 1678
	040 NotImplemented "Instruction ADR not yet implemented."
	041 Move W11, [X9]
	042 Add X10, X10, X11
	043 CallNoReturn X10
	044 Move X0, X19
	045 Call DateTimeFormatInfo.get_AllLongDatePatterns, X0
	046 Subtract W9, W8, 100
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X8, -41484288
	049 Add X8, X8, 1656
	050 NotImplemented "Instruction ADR not yet implemented."
	051 Move W11, [X8]
	052 Add X10, X10, X11
	053 CallNoReturn X10
	054 Move X0, X19
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X30, [X31+16]
	058 Move X21, [X31+24]
	059 Add X31, X31, 48
	060 Move X8, 0xDCD000
	061 Move X8, [X8+2760]
	062 Move W1, 1
	063 Move X0, [X8]
	064 Call 0x1C17D6C
	065 Move X20, X0
	066 Move X0, X19
	067 Call DateTimeFormatInfo.get_MonthDayPattern, X0
	068 Compare X20, 0
	069 JumpIfEqual {212}
	070 Move W8, [X20+24]
	071 Compare W8, 0
	072 JumpIfEqual {213}
	073 Move [X20+32], X0
	074 Move X8, 0xDCD000
	075 Move X8, [X8+2760]
	076 Move W1, 1
	077 Move X0, [X8]
	078 Call 0x1C17D6C
	079 Compare X0, 0
	080 JumpIfEqual {212}
	081 Move W8, [X0+24]
	082 Move X20, X0
	083 Compare W8, 0
	084 JumpIfEqual {213}
	085 Move X8, 0xE02000
	086 Move X8, [X8+920]
	087 Move X8, 0xDCD000
	088 Move X8, [X8+2760]
	089 Move W1, 1
	090 Move X0, [X8]
	091 Call 0x1C17D6C
	092 Compare X0, 0
	093 JumpIfEqual {212}
	094 Move W8, [X0+24]
	095 Move X20, X0
	096 Compare W8, 0
	097 JumpIfEqual {213}
	098 Move X8, 0xE02000
	099 Move X8, [X8+864]
	100 Move X0, X19
	101 Move X20, [X31+32]
	102 Move X19, [X31+40]
	103 Move X30, [X31+16]
	104 Move X21, [X31+24]
	105 Add X31, X31, 48
	106 Call DateTimeFormatInfo.get_AllLongDatePatterns, X0
	107 Return X0
	108 Move X0, X19
	109 Call DateTimeFormatInfo.get_AllShortDatePatterns, X0
	110 Move X20, X0
	111 Move X0, X19
	112 Call DateTimeFormatInfo.get_AllLongTimePatterns, X0
	113 Move X0, X19
	114 Move X20, [X31+32]
	115 Move X19, [X31+40]
	116 Move X30, [X31+16]
	117 Move X21, [X31+24]
	118 Add X31, X31, 48
	119 Call DateTimeFormatInfo.get_AllLongTimePatterns, X0
	120 Return X0
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Move X0, X19
	123 Move X20, [X31+32]
	124 Move X19, [X31+40]
	125 Move X30, [X31+16]
	126 Move X21, [X31+24]
	127 Add X31, X31, 48
	128 Call DateTimeFormatInfo.get_AllYearMonthPatterns, X0
	129 Return X0
	130 Move X0, X19
	131 Call DateTimeFormatInfo.get_AllLongDatePatterns, X0
	132 Move X0, X19
	133 Call DateTimeFormatInfo.get_AllShortDatePatterns, X0
	134 Move X20, X0
	135 Move X0, X19
	136 Call DateTimeFormatInfo.get_AllShortTimePatterns, X0
	137 Move X8, 0xE02000
	138 Move X8, [X8+808]
	139 Move X19, X0
	140 Move X8, [X8]
	141 Move W9, [X8+224]
	142 Compare W9, 0
	143 JumpIfNotEqual {146}
	144 Move X0, X8
	145 Call 0x1C17DFC
	146 Move X8, 0xDCD000
	147 Move X8, [X8+3544]
	148 Move X0, X20
	149 Move X1, X19
	150 Move X20, [X31+32]
	151 Move X19, [X31+40]
	152 Move X2, [X8]
	153 Move X30, [X31+16]
	154 Move X21, [X31+24]
	155 Add X31, X31, 48
	156 Call DateTimeFormatInfo.GetCombinedPatterns, X0, X1, X2
	157 Return X0
	158 Move X8, 0xDCD000
	159 Move X8, [X8+2760]
	160 Move W1, 1
	161 Move X0, [X8]
	162 Call 0x1C17D6C
	163 Compare X0, 0
	164 JumpIfEqual {212}
	165 Move W8, [X0+24]
	166 Move X20, X0
	167 Compare W8, 0
	168 JumpIfEqual {213}
	169 Move X8, 0xE02000
	170 Move X8, [X8+872]
	171 Move X0, X19
	172 Move X20, [X31+32]
	173 Move X19, [X31+40]
	174 Move X30, [X31+16]
	175 Move X21, [X31+24]
	176 Add X31, X31, 48
	177 Call DateTimeFormatInfo.get_AllShortTimePatterns, X0
	178 Return X0
	179 Move X8, 0xDCD000
	180 Move X8, [X8+2760]
	181 Move W1, 1
	182 Move W19, 1
	183 Move X0, [X8]
	184 Call 0x1C17D6C
	185 Move X21, 0x10B6000
	186 Move W8, [X21+3212]
	187 Move X20, X0
	188 Move TEMP, X8
	189 And TEMP, TEMP, 1
	190 Compare TEMP, 1
	191 JumpIfEqual {196}
	192 Move X0, 0xE02000
	193 Move X0, [X0+888]
	194 Call 0x1C17CF4
	195 Move [X21+3212], W19
	196 Compare X20, 0
	197 JumpIfEqual {212}
	198 Move W8, [X20+24]
	199 Compare W8, 0
	200 JumpIfEqual {213}
	201 Move X8, 0xE02000
	202 Move X8, [X8+888]
	203 Move X8, [X8]
	204 Move [X20+32], X8
	205 Move X0, X20
	206 Move X20, [X31+32]
	207 Move X19, [X31+40]
	208 Move X30, [X31+16]
	209 Move X21, [X31+24]
	210 Add X31, X31, 48
	211 Return X0
	212 Call 0x1C17F20
	213 Call 0x1C17F28
	214 NotImplemented "Instruction STRH not yet implemented."
	215 Move X0, 0xDCF000
	216 Move X0, [X0+368]
	217 Call 0x1C17D08
	218 Add X1, X31, 12
	219 Call 0x1C17E04
	220 Move X19, X0
	221 Move X0, 0xE02000
	222 Move X0, [X0+928]
	223 Call 0x1C17D08
	224 Move X1, X19
	225 Move X2, X31
	226 Call SR.Format, X0, X1
	227 Move X19, X0
	228 Move X0, 0xDD5000
	229 Move X0, [X0+1400]
	230 Call 0x1C17D08
	231 Call 0x1C17F10
	232 Move X20, X0
	233 Move X0, 0xDFC000
	234 Move X0, [X0+160]
	235 Call 0x1C17D08
	236 Move X2, X0
	237 Move X0, X20
	238 Move X1, X19
	239 Move X3, X31
	240 Call ArgumentException..ctor, X0, X1, X2
	241 Move X0, 0xE02000
	242 Move X0, [X0+936]
	243 Call 0x1C17D08
	244 Move X1, X0
	245 Move X0, X20
	246 Call 0x1C17DEC

Method: System.String GetDayName(System.DayOfWeek dayofweek)

Disassembly:
	0x03327804 MOV X0, X8
	0x03327808 BL 0x1C16DFC
	0x0332780C ADRP X23, 0x10B5000
	0x03327810 LDRB W8, [X23 + 0xAFE]
	0x03327814 CBNZ W8, 0x332782C
	0x03327818 ADRP X0, 0xE00000
	0x0332781C LDR X0, [X0 + 0x930]
	0x03327820 BL 0x1C16CF4
	0x03327824 MOVZ W8, 0x1
	0x03327828 STRB W8, [X23 + 0xAFE]
	0x0332782C LDR X0, [X22]
	0x03327830 LDR W8, [X0 + 0xE0]
	0x03327834 CBNZ W8, 0x3327840
	0x03327838 BL 0x1C16DFC
	0x0332783C LDR X0, [X22]
	0x03327840 LDR X8, [X0 + 0xB8]
	0x03327844 LDRB W8, [X8]
	0x03327848 CBNZ W8, 0x332787C
	0x0332784C LDR X0, [X19 + 0x20]
	0x03327850 CBNZ X0, 0x3327868
	0x03327854 LDR X8, [X19 + 0x10]
	0x03327858 CBZ X8, 0x3327F00
	0x0332785C LDR X0, [X8 + 0x50]
	0x03327860 STR X0, [X19 + 0x20]
	0x03327864 CBZ X0, 0x3327F00
	0x03327868 ADRP X8, 0xDFA000
	0x0332786C LDR X8, [X8 + 0xAB8]
	0x03327870 MOV X2, X31
	0x03327874 LDR X1, [X8]
	0x03327878 BL 0x322693C
	0x0332787C LDR X0, [X19 + 0x60]
	0x03327880 CBNZ X0, 0x3327898
	0x03327884 LDR X8, [X19 + 0x10]
	0x03327888 CBZ X8, 0x3327F00
	0x0332788C LDR X0, [X8 + 0x20]
	0x03327890 STR X0, [X19 + 0x60]
	0x03327894 CBZ X0, 0x3327F00
	0x03327898 MOV X1, X31
	0x0332789C BL 0x322B8DC
	0x033278A0 ADRP X24, 0xDCE000
	0x033278A4 LDR X24, [X24 + 0x3A0]
	0x033278A8 MOV X21, X0
	0x033278AC MOV X1, X21
	0x033278B0 MOV X2, X31
	0x033278B4 LDR X8, [X24]
	0x033278B8 MOV X0, X8
	0x033278BC BL 0x3226EF8
	0x033278C0 TBZ X0, 0x0, 0x33278DC
	0x033278C4 LDR X2, [X24]
	0x033278C8 MOVZ W3, 0xF
	0x033278CC MOV X0, X19
	0x033278D0 MOV X1, X20
	0x033278D4 MOV W4, W31
	0x033278D8 BL 0x3327FC4
	0x033278DC ADRP X24, 0xDD5000
	0x033278E0 LDR X24, [X24 + 0x790]
	0x033278E4 MOV X1, X21
	0x033278E8 MOV X2, X31
	0x033278EC LDR X0, [X24]
	0x033278F0 BL 0x3226EF8
	0x033278F4 TBZ X0, 0x0, 0x3327910
	0x033278F8 LDR X2, [X24]
	0x033278FC MOVZ W3, 0xF

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move X8, X0
	006 Move X0, [X0+160]
	007 Move W19, W1
	008 Compare X0, 0
	009 JumpIfNotEqual {14}
	010 Move X0, X8
	011 Call DateTimeFormatInfo.internalGetDayOfWeekNamesCore, X0
	012 Compare X0, 0
	013 JumpIfEqual {65}
	014 Move W8, [X0+24]
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Add X8, X0, W19
	017 Move X0, [X8+32]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move [X31+12], W31
	023 Move X19, 0xDD2000
	024 Move X19, [X19+2936]
	025 Move X0, X19
	026 Call 0x1C17D08
	027 Add X1, X31, 12
	028 Call 0x1C17E04
	029 Move X20, X0
	030 Move W8, 6
	031 Move X0, X19
	032 Move [X31+8], W8
	033 Call 0x1C17D08
	034 Add X1, X31, 8
	035 Call 0x1C17E04
	036 Move X19, X0
	037 Move X0, 0xDFC000
	038 Move X0, [X0+880]
	039 Call 0x1C17D08
	040 Move X1, X20
	041 Move X2, X19
	042 Move X3, X31
	043 Call SR.Format, X0, X1, X2
	044 Move X19, X0
	045 Move X0, 0xDD5000
	046 Move X0, [X0+1888]
	047 Call 0x1C17D08
	048 Call 0x1C17F10
	049 Move X20, X0
	050 Move X0, 0xE02000
	051 Move X0, [X0+904]
	052 Call 0x1C17D08
	053 Move X1, X0
	054 Move X0, X20
	055 Move X2, X19
	056 Move X3, X31
	057 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	058 Move X0, 0xE02000
	059 Move X0, [X0+944]
	060 Call 0x1C17D08
	061 Move X1, X0
	062 Move X0, X20
	063 Call 0x1C17DEC
	064 Call 0x1C17F28
	065 Call 0x1C17F20

Method: System.String GetAbbreviatedMonthName(System.Int32 month)

Disassembly:
	0x03327900 MOV X0, X19
	0x03327904 MOV X1, X20
	0x03327908 MOV W4, W31
	0x0332790C BL 0x3327FC4
	0x03327910 LDR X0, [X22]
	0x03327914 LDR W8, [X0 + 0xE0]
	0x03327918 CBNZ W8, 0x3327920
	0x0332791C BL 0x1C16DFC
	0x03327920 LDRB W8, [X23 + 0xAFE]
	0x03327924 CBNZ W8, 0x332793C
	0x03327928 ADRP X0, 0xE00000
	0x0332792C LDR X0, [X0 + 0x930]
	0x03327930 BL 0x1C16CF4
	0x03327934 MOVZ W8, 0x1
	0x03327938 STRB W8, [X23 + 0xAFE]
	0x0332793C LDR X0, [X22]
	0x03327940 LDR W8, [X0 + 0xE0]
	0x03327944 CBNZ W8, 0x3327950
	0x03327948 BL 0x1C16DFC
	0x0332794C LDR X0, [X22]
	0x03327950 LDR X8, [X0 + 0xB8]
	0x03327954 LDRB W8, [X8]
	0x03327958 CBNZ W8, 0x33279DC
	0x0332795C ADRP X8, 0xE01000
	0x03327960 LDR X8, [X8 + 0x448]
	0x03327964 MOV X1, X21
	0x03327968 MOV X2, X31
	0x0332796C LDR X0, [X8]
	0x03327970 BL 0x3226EF8
	0x03327974 TBZ X0, 0x0, 0x33279DC
	0x03327978 ADRP X8, 0xE01000
	0x0332797C LDR X8, [X8 + 0x450]
	0x03327980 MOV X1, X21
	0x03327984 MOV X2, X31
	0x03327988 LDR X0, [X8]
	0x0332798C BL 0x3226EF8
	0x03327990 TBZ X0, 0x0, 0x33279DC
	0x03327994 ADRP X8, 0xE01000
	0x03327998 LDR X8, [X8 + 0x430]
	0x0332799C MOV X1, X21
	0x033279A0 MOV X2, X31
	0x033279A4 LDR X0, [X8]
	0x033279A8 BL 0x3226EF8
	0x033279AC TBZ X0, 0x0, 0x33279DC
	0x033279B0 LDR X2, [X19 + 0x60]
	0x033279B4 CBNZ X2, 0x33279C8
	0x033279B8 LDR X8, [X19 + 0x10]
	0x033279BC CBZ X8, 0x3327F00
	0x033279C0 LDR X2, [X8 + 0x20]
	0x033279C4 STR X2, [X19 + 0x60]
	0x033279C8 MOVZ W3, 0x700
	0x033279CC MOV X0, X19
	0x033279D0 MOV X1, X20
	0x033279D4 MOV W4, W31
	0x033279D8 BL 0x3327FC4
	0x033279DC LDR X2, [X19 + 0x38]
	0x033279E0 CBNZ X2, 0x33279F4
	0x033279E4 LDR X8, [X19 + 0x10]
	0x033279E8 CBZ X8, 0x3327F00
	0x033279EC LDR X2, [X8 + 0x10]
	0x033279F0 STR X2, [X19 + 0x38]
	0x033279F4 MOVZ W3, 0x403
	0x033279F8 MOV X0, X19
	0x033279FC MOV X1, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Subtract W19, W1, 1
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X8, X0
	007 Move X0, [X0+168]
	008 Compare X0, 0
	009 JumpIfNotEqual {14}
	010 Move X0, X8
	011 Call DateTimeFormatInfo.internalGetAbbreviatedMonthNamesCore, X0
	012 Compare X0, 0
	013 JumpIfEqual {66}
	014 Move W8, [X0+24]
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Add X8, X0, W19
	017 Move X0, [X8+32]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move W8, 1
	023 Move [X31+12], W8
	024 Move X19, 0xDCD000
	025 Move X19, [X19+1880]
	026 Move X0, X19
	027 Call 0x1C17D08
	028 Add X1, X31, 12
	029 Call 0x1C17E04
	030 Move X20, X0
	031 Move W8, 13
	032 Move X0, X19
	033 Move [X31+8], W8
	034 Call 0x1C17D08
	035 Add X1, X31, 8
	036 Call 0x1C17E04
	037 Move X19, X0
	038 Move X0, 0xDFC000
	039 Move X0, [X0+880]
	040 Call 0x1C17D08
	041 Move X1, X20
	042 Move X2, X19
	043 Move X3, X31
	044 Call SR.Format, X0, X1, X2
	045 Move X19, X0
	046 Move X0, 0xDD5000
	047 Move X0, [X0+1888]
	048 Call 0x1C17D08
	049 Call 0x1C17F10
	050 Move X20, X0
	051 Move X0, 0xE01000
	052 Move X0, [X0+3496]
	053 Call 0x1C17D08
	054 Move X1, X0
	055 Move X0, X20
	056 Move X2, X19
	057 Move X3, X31
	058 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	059 Move X0, 0xE02000
	060 Move X0, [X0+952]
	061 Call 0x1C17D08
	062 Move X1, X0
	063 Move X0, X20
	064 Call 0x1C17DEC
	065 Call 0x1C17F28
	066 Call 0x1C17F20

Method: System.String GetMonthName(System.Int32 month)

Disassembly:
	0x03327A00 MOV W4, W31
	0x03327A04 BL 0x3327FC4
	0x03327A08 LDR X2, [X19 + 0x40]
	0x03327A0C CBNZ X2, 0x3327A20
	0x03327A10 LDR X8, [X19 + 0x10]
	0x03327A14 CBZ X8, 0x3327F00
	0x03327A18 LDR X2, [X8 + 0x18]
	0x03327A1C STR X2, [X19 + 0x40]
	0x03327A20 MOVZ W3, 0x504
	0x03327A24 MOVZ W4, 0x1
	0x03327A28 MOV X0, X19
	0x03327A2C MOV X1, X20
	0x03327A30 BL 0x3327FC4
	0x03327A34 LDR X0, [X22]
	0x03327A38 STRB W31, [X31 + 0xC]
	0x03327A3C LDR W8, [X0 + 0xE0]
	0x03327A40 CBNZ W8, 0x3327A48
	0x03327A44 BL 0x1C16DFC
	0x03327A48 LDRB W8, [X23 + 0xAFE]
	0x03327A4C CBNZ W8, 0x3327A64
	0x03327A50 ADRP X0, 0xE00000
	0x03327A54 LDR X0, [X0 + 0x930]
	0x03327A58 BL 0x1C16CF4
	0x03327A5C MOVZ W8, 0x1
	0x03327A60 STRB W8, [X23 + 0xAFE]
	0x03327A64 LDR X0, [X22]
	0x03327A68 LDR W8, [X0 + 0xE0]
	0x03327A6C CBNZ W8, 0x3327A78
	0x03327A70 BL 0x1C16DFC
	0x03327A74 LDR X0, [X22]
	0x03327A78 LDR X8, [X0 + 0xB8]
	0x03327A7C LDRB W8, [X8]
	0x03327A80 CBNZ W8, 0x3327A98
	0x03327A84 ADD X2, X31, 0xC
	0x03327A88 MOV X0, X19
	0x03327A8C MOV X1, X20
	0x03327A90 BL 0x33282BC
	0x03327A94 LDR X0, [X22]
	0x03327A98 LDR W8, [X0 + 0xE0]
	0x03327A9C CBNZ W8, 0x3327AA4
	0x03327AA0 BL 0x1C16DFC
	0x03327AA4 LDRB W8, [X23 + 0xAFE]
	0x03327AA8 CBNZ W8, 0x3327AC0
	0x03327AAC ADRP X0, 0xE00000
	0x03327AB0 LDR X0, [X0 + 0x930]
	0x03327AB4 BL 0x1C16CF4
	0x03327AB8 MOVZ W8, 0x1
	0x03327ABC STRB W8, [X23 + 0xAFE]
	0x03327AC0 LDR X0, [X22]
	0x03327AC4 LDR W8, [X0 + 0xE0]
	0x03327AC8 CBNZ W8, 0x3327AD4
	0x03327ACC BL 0x1C16DFC
	0x03327AD0 LDR X0, [X22]
	0x03327AD4 LDR X8, [X0 + 0xB8]
	0x03327AD8 LDRB W8, [X8]
	0x03327ADC CBNZ W8, 0x3327B1C
	0x03327AE0 LDR X0, [X19 + 0x20]
	0x03327AE4 CBNZ X0, 0x3327AFC
	0x03327AE8 LDR X8, [X19 + 0x10]
	0x03327AEC CBZ X8, 0x3327F00
	0x03327AF0 LDR X0, [X8 + 0x50]
	0x03327AF4 STR X0, [X19 + 0x20]
	0x03327AF8 CBZ X0, 0x3327F00
	0x03327AFC ADRP X8, 0xE01000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Subtract W19, W1, 1
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X8, X0
	007 Move X0, [X0+176]
	008 Compare X0, 0
	009 JumpIfNotEqual {14}
	010 Move X0, X8
	011 Call DateTimeFormatInfo.internalGetMonthNamesCore, X0
	012 Compare X0, 0
	013 JumpIfEqual {66}
	014 Move W8, [X0+24]
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Add X8, X0, W19
	017 Move X0, [X8+32]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move W8, 1
	023 Move [X31+12], W8
	024 Move X19, 0xDCD000
	025 Move X19, [X19+1880]
	026 Move X0, X19
	027 Call 0x1C17D08
	028 Add X1, X31, 12
	029 Call 0x1C17E04
	030 Move X20, X0
	031 Move W8, 13
	032 Move X0, X19
	033 Move [X31+8], W8
	034 Call 0x1C17D08
	035 Add X1, X31, 8
	036 Call 0x1C17E04
	037 Move X19, X0
	038 Move X0, 0xDFC000
	039 Move X0, [X0+880]
	040 Call 0x1C17D08
	041 Move X1, X20
	042 Move X2, X19
	043 Move X3, X31
	044 Call SR.Format, X0, X1, X2
	045 Move X19, X0
	046 Move X0, 0xDD5000
	047 Move X0, [X0+1888]
	048 Call 0x1C17D08
	049 Call 0x1C17F10
	050 Move X20, X0
	051 Move X0, 0xE01000
	052 Move X0, [X0+3496]
	053 Call 0x1C17D08
	054 Move X1, X0
	055 Move X0, X20
	056 Move X2, X19
	057 Move X3, X31
	058 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	059 Move X0, 0xE02000
	060 Move X0, [X0+960]
	061 Call 0x1C17D08
	062 Move X1, X0
	063 Move X0, X20
	064 Call 0x1C17DEC
	065 Call 0x1C17F28
	066 Call 0x1C17F20

Method: System.String[] GetMergedPatterns(System.String[] patterns, System.String defaultPattern)

Disassembly:
	0x03327B00 LDR X8, [X8 + 0x438]
	0x03327B04 MOV X2, X31
	0x03327B08 LDR X1, [X8]
	0x03327B0C BL 0x322693C
	0x03327B10 TBZ X0, 0x0, 0x3327B1C
	0x03327B14 MOVZ W3, 0xF
	0x03327B18 B 0x3327B20
	0x03327B1C MOVZ W3, 0xF00
	0x03327B20 ADRP X8, 0xDCD000
	0x03327B24 LDR X8, [X8 + 0x2A8]
	0x03327B28 MOV X0, X19
	0x03327B2C MOV X1, X20
	0x03327B30 MOV W4, W31
	0x03327B34 LDR X2, [X8]
	0x03327B38 BL 0x3327FC4
	0x03327B3C LDRB W8, [X31 + 0xC]
	0x03327B40 CBNZ W8, 0x3327B64
	0x03327B44 MOV X0, X19
	0x03327B48 BL 0x3325418
	0x03327B4C MOV X2, X0
	0x03327B50 MOVZ W3, 0x600
	0x03327B54 MOV X0, X19
	0x03327B58 MOV X1, X20
	0x03327B5C MOV W4, W31
	0x03327B60 BL 0x3327FC4
	0x03327B64 MOV X0, X19
	0x03327B68 MOV X1, X20
	0x03327B6C MOV X2, X31
	0x03327B70 BL 0x3328BA8
	0x03327B74 MOVZ W21, 0x1
	0x03327B78 MOV X0, X19
	0x03327B7C MOV W1, W21
	0x03327B80 BL 0x3326900
	0x03327B84 MOV X2, X0
	0x03327B88 MOVZ W3, 0x5
	0x03327B8C MOV X0, X19
	0x03327B90 MOV X1, X20
	0x03327B94 MOV W4, W21
	0x03327B98 BL 0x3327FC4
	0x03327B9C ADD W21, W21, 0x1
	0x03327BA0 CMP W21, 0xE
	0x03327BA4 B.NE 0x3327B78
	0x03327BA8 LDR W0, [X19 + 0x144]
	0x03327BAC ADDS W31, W0, 0x1
	0x03327BB0 B.EQ 0x3327BBC
	0x03327BB4 TBNZ X0, 0x0, 0x3327BC8
	0x03327BB8 B 0x3327C04
	0x03327BBC MOV X0, X19
	0x03327BC0 BL 0x3326FB4
	0x03327BC4 TBZ X0, 0x0, 0x3327C04
	0x03327BC8 MOVZ W21, 0x1
	0x03327BCC MOVZ W2, 0x1
	0x03327BD0 MOV X0, X19
	0x03327BD4 MOV W1, W21
	0x03327BD8 MOV W3, W31
	0x03327BDC BL 0x3325DC8
	0x03327BE0 MOV X2, X0
	0x03327BE4 MOVZ W3, 0x5
	0x03327BE8 MOV X0, X19
	0x03327BEC MOV X1, X20
	0x03327BF0 MOV W4, W21
	0x03327BF4 BL 0x3327FC4
	0x03327BF8 ADD W21, W21, 0x1
	0x03327BFC CMP W21, 0xE
	0x03327C00 B.NE 0x3327BCC
	0x03327C04 LDR W0, [X19 + 0x144]
	0x03327C08 ADDS W31, W0, 0x1
	0x03327C0C B.EQ 0x3327C18
	0x03327C10 TBNZ X0, 0x1, 0x3327C24
	0x03327C14 B 0x3327C60
	0x03327C18 MOV X0, X19
	0x03327C1C BL 0x3326FB4
	0x03327C20 TBZ X0, 0x1, 0x3327C60
	0x03327C24 MOVZ W21, 0x1
	0x03327C28 MOVZ W2, 0x2
	0x03327C2C MOV X0, X19
	0x03327C30 MOV W1, W21
	0x03327C34 MOV W3, W31
	0x03327C38 BL 0x3325DC8
	0x03327C3C MOV X2, X0
	0x03327C40 MOVZ W3, 0x5
	0x03327C44 MOV X0, X19
	0x03327C48 MOV X1, X20
	0x03327C4C MOV W4, W21
	0x03327C50 BL 0x3327FC4
	0x03327C54 ADD W21, W21, 0x1
	0x03327C58 CMP W21, 0xE
	0x03327C5C B.NE 0x3327C28
	0x03327C60 MOV W21, W31
	0x03327C64 MOV X0, X19
	0x03327C68 MOV W1, W21
	0x03327C6C BL 0x3326804
	0x03327C70 MOV X2, X0
	0x03327C74 MOVZ W3, 0x7
	0x03327C78 MOV X0, X19
	0x03327C7C MOV X1, X20
	0x03327C80 MOV W4, W21
	0x03327C84 BL 0x3327FC4
	0x03327C88 MOV X0, X19
	0x03327C8C MOV W1, W21
	0x03327C90 BL 0x3326010
	0x03327C94 MOV X2, X0
	0x03327C98 MOVZ W3, 0x7
	0x03327C9C MOV X0, X19
	0x03327CA0 MOV X1, X20
	0x03327CA4 MOV W4, W21
	0x03327CA8 BL 0x3327FC4
	0x03327CAC ADD W21, W21, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x10B6000
	008 Move W8, [X21+3219]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xDCD000
	016 Move X0, [X0+2760]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3219], W8
	020 Compare X20, 0
	021 JumpIfEqual {121}
	022 Move W8, [X20+24]
	023 Compare W8, 0
	024 JumpIfEqual {120}
	025 Move X1, [X20+32]
	026 Move X0, X19
	027 Move X2, X31
	028 Call String.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {50}
	033 Move X0, X20
	034 Move X1, X31
	035 Call Array.Clone, X0
	036 Compare X0, 0
	037 JumpIfEqual {67}
	038 Move X8, 0xDCD000
	039 Move X8, [X8+2760]
	040 Move X19, X0
	041 Move X20, [X8]
	042 Move X1, X20
	043 Call 0x1C17E00
	044 Move X21, X0
	045 Compare X0, 0
	046 JumpIfNotEqual {112}
	047 Move X0, X19
	048 Move X1, X20
	049 Call 0x1C181E0
	050 Move X8, [X20+24]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X23, X31
	053 And X8, X8, 0
	054 Add X21, X20, 32
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X1, [X21]
	057 Move X0, X19
	058 Move X2, X31
	059 Call String.op_Equality, X0, X1
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfEqual {69}
	064 Move W8, [X20+24]
	065 Add X23, X23, 1
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move X21, X31
	068 Move W23, W31
	069 Move X8, [X20+24]
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X0, X20
	072 Move X1, X31
	073 Call Array.Clone, X0
	074 Compare X0, 0
	075 JumpIfEqual {121}
	076 Move X8, 0xDCD000
	077 Move X8, [X8+2760]
	078 Move X20, X0
	079 Move X22, [X8]
	080 Move X1, X22
	081 Call 0x1C17E00
	082 Compare X0, 0
	083 JumpIfEqual {122}
	084 Move W8, [X0+24]
	085 Move X21, X0
	086 Compare W8, 0
	087 JumpIfEqual {120}
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move X8, X21
	090 Add X8, X8, 32
	091 Move X9, [X8]
	092 Move [X8], X9
	093 Move X9, 0xDCD000
	094 Move X9, [X9+2760]
	095 Add W1, W8, 1
	096 Move X0, [X9]
	097 Call 0x1C17D6C
	098 Move W4, [X20+24]
	099 Move X21, X0
	100 Move W3, 1
	101 Move X0, X20
	102 Move W1, W31
	103 Move X2, X21
	104 Move X5, X31
	105 Call Array.Copy, X0, X1, X2, X3, X4
	106 Compare X21, 0
	107 JumpIfEqual {121}
	108 Move W8, [X21+24]
	109 Compare W8, 0
	110 JumpIfEqual {120}
	111 Move [X21+32], X19
	112 Move X0, X21
	113 Move X20, [X31+32]
	114 Move X19, [X31+40]
	115 Move X22, [X31+16]
	116 Move X21, [X31+24]
	117 Move X30, [X31+48]
	118 Move X23, [X31+56]
	119 Return X0
	120 Call 0x1C17F28
	121 Call 0x1C17F20
	122 Move X0, X20
	123 Move X1, X22
	124 Call 0x1C181E0

Method: System.String[] get_AllYearMonthPatterns()

Disassembly:
	0x03327790 LDR X0, [X0 + 0x988]
	0x03327794 BL 0x1C16CF4
	0x03327798 ADRP X0, 0xE01000
	0x0332779C LDR X0, [X0 + 0x450]
	0x033277A0 BL 0x1C16CF4
	0x033277A4 ADRP X0, 0xE01000
	0x033277A8 LDR X0, [X0 + 0x458]
	0x033277AC BL 0x1C16CF4
	0x033277B0 ADRP X0, 0xDCE000
	0x033277B4 LDR X0, [X0 + 0x3A0]
	0x033277B8 BL 0x1C16CF4
	0x033277BC ADRP X0, 0xDD5000
	0x033277C0 LDR X0, [X0 + 0x790]
	0x033277C4 BL 0x1C16CF4
	0x033277C8 MOVZ W8, 0x1
	0x033277CC STRB W8, [X20 + 0xCA0]
	0x033277D0 LDR X20, [X19 + 0x158]
	0x033277D4 CBNZ X20, 0x3327FA8
	0x033277D8 ADRP X8, 0xE01000
	0x033277DC LDR X8, [X8 + 0x428]
	0x033277E0 MOVZ W1, 0xC7
	0x033277E4 LDR X0, [X8]
	0x033277E8 BL 0x1C16D6C
	0x033277EC ADRP X22, 0xE00000
	0x033277F0 LDR X22, [X22 + 0x930]
	0x033277F4 MOV X20, X0
	0x033277F8 LDR X8, [X22]
	0x033277FC LDR W9, [X8 + 0xE0]
	0x03327800 CBNZ W9, 0x332780C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x10B6000
	006 Move X21, 0xE02000
	007 Move W8, [X20+3220]
	008 Move X21, [X21+808]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE02000
	015 Move X0, [X0+808]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3220], W8
	019 Move X0, X19
	020 Call DateTimeFormatInfo.get_UnclonedYearMonthPatterns, X0
	021 Move X20, X0
	022 Move X0, X19
	023 Call DateTimeFormatInfo.get_YearMonthPattern, X0
	024 Move X8, [X21]
	025 Move X19, X0
	026 Move W9, [X8+224]
	027 Compare W9, 0
	028 JumpIfNotEqual {31}
	029 Move X0, X8
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call DateTimeFormatInfo.GetMergedPatterns, X0, X1
	038 Return X0

Method: System.String[] get_AllShortDatePatterns()

Disassembly:
	0x033275C0 BL 0x1C16DFC
	0x033275C4 LDR X0, [X20]
	0x033275C8 LDR X8, [X0 + 0xB8]
	0x033275CC LDR X19, [X8 + 0x18]
	0x033275D0 BL 0x1C16D44
	0x033275D4 CBNZ X19, 0x33276D4
	0x033275D8 ADRP X19, 0xE00000
	0x033275DC LDR X19, [X19 + 0x930]
	0x033275E0 LDR X0, [X19]
	0x033275E4 LDR W8, [X0 + 0xE0]
	0x033275E8 CBNZ W8, 0x33275F0
	0x033275EC BL 0x1C16DFC
	0x033275F0 ADRP X21, 0x10B5000
	0x033275F4 LDRB W8, [X21 + 0xAFE]
	0x033275F8 CBNZ W8, 0x3327610
	0x033275FC ADRP X0, 0xE00000
	0x03327600 LDR X0, [X0 + 0x930]
	0x03327604 BL 0x1C16CF4
	0x03327608 MOVZ W8, 0x1
	0x0332760C STRB W8, [X21 + 0xAFE]
	0x03327610 LDR X0, [X19]
	0x03327614 LDR W8, [X0 + 0xE0]
	0x03327618 CBNZ W8, 0x3327624
	0x0332761C BL 0x1C16DFC
	0x03327620 LDR X0, [X19]
	0x03327624 LDR X8, [X0 + 0xB8]
	0x03327628 LDRB W8, [X8]
	0x0332762C CBZ W8, 0x3327638
	0x03327630 MOV X19, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x10B6000
	006 Move X21, 0xE02000
	007 Move W8, [X20+3221]
	008 Move X21, [X21+808]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE02000
	015 Move X0, [X0+808]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3221], W8
	019 Move X0, X19
	020 Call DateTimeFormatInfo.get_UnclonedShortDatePatterns, X0
	021 Move X20, X0
	022 Move X0, X19
	023 Call DateTimeFormatInfo.get_ShortDatePattern, X0
	024 Move X8, [X21]
	025 Move X19, X0
	026 Move W9, [X8+224]
	027 Compare W9, 0
	028 JumpIfNotEqual {31}
	029 Move X0, X8
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call DateTimeFormatInfo.GetMergedPatterns, X0, X1
	038 Return X0

Method: System.String[] get_AllShortTimePatterns()

Disassembly:
	0x033276A8 MOV X1, X0
	0x033276AC MOV X0, X19
	0x033276B0 BL 0x3324888
	0x033276B4 LDR X0, [X20]
	0x033276B8 LDR W8, [X0 + 0xE0]
	0x033276BC CBNZ W8, 0x33276C4
	0x033276C0 BL 0x1C16DFC
	0x033276C4 BL 0x1C16D44
	0x033276C8 LDR X8, [X20]
	0x033276CC LDR X8, [X8 + 0xB8]
	0x033276D0 STR X19, [X8 + 0x18]
	0x033276D4 MOV X0, X19
	0x033276D8 LDP X20, X19, [X31 + 0x10]
	0x033276DC LDP X30, X21, [X31], #0x20
	0x033276E0 RET
	0x033276E4 BL 0x1C16F20
	0x033276E8 STR X30, [X31 - 0x40]!
	0x033276EC STP X24, X23, [X31 + 0x10]
	0x033276F0 STP X22, X21, [X31 + 0x20]
	0x033276F4 STP X20, X19, [X31 + 0x30]
	0x033276F8 ADRP X20, 0x10B5000
	0x033276FC LDRB W8, [X20 + 0xCA0]
	0x03327700 MOV X19, X0
	0x03327704 TBNZ X8, 0x0, 0x33277D0
	0x03327708 ADRP X0, 0xE01000
	0x0332770C LDR X0, [X0 + 0x328]
	0x03327710 BL 0x1C16CF4
	0x03327714 ADRP X0, 0xE00000
	0x03327718 LDR X0, [X0 + 0x930]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x10B6000
	006 Move X21, 0xE02000
	007 Move W8, [X20+3222]
	008 Move X21, [X21+808]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE02000
	015 Move X0, [X0+808]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3222], W8
	019 Move X0, X19
	020 Call DateTimeFormatInfo.get_UnclonedShortTimePatterns, X0
	021 Move X20, X0
	022 Move X0, X19
	023 Call DateTimeFormatInfo.get_ShortTimePattern, X0
	024 Move X8, [X21]
	025 Move X19, X0
	026 Move W9, [X8+224]
	027 Compare W9, 0
	028 JumpIfNotEqual {31}
	029 Move X0, X8
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call DateTimeFormatInfo.GetMergedPatterns, X0, X1
	038 Return X0

Method: System.String[] get_AllLongDatePatterns()

Disassembly:
	0x03327634 B 0x33276D4
	0x03327638 ADRP X8, 0xDCE000
	0x0332763C LDR X8, [X8 + 0xC48]
	0x03327640 LDR X0, [X8]
	0x03327644 BL 0x1C16F10
	0x03327648 ADRP X8, 0xE01000
	0x0332764C LDR X8, [X8 + 0x420]
	0x03327650 MOV W2, W31
	0x03327654 MOV X3, X31
	0x03327658 MOV X19, X0
	0x0332765C LDR X1, [X8]
	0x03327660 BL 0x334010C
	0x03327664 CBZ X19, 0x33276E4
	0x03327668 LDR X8, [X19]
	0x0332766C MOV X0, X19
	0x03327670 LDR X9, [X8 + 0x238]
	0x03327674 LDR X1, [X8 + 0x240]
	0x03327678 BLR X9
	0x0332767C ADRP X8, 0xE01000
	0x03327680 LDR X8, [X8 + 0x418]
	0x03327684 MOV X19, X0
	0x03327688 LDR X8, [X8]
	0x0332768C LDR W9, [X8 + 0xE0]
	0x03327690 CBNZ W9, 0x332769C
	0x03327694 MOV X0, X8
	0x03327698 BL 0x1C16DFC
	0x0332769C MOV X0, X31
	0x033276A0 BL 0x333B4C8
	0x033276A4 CBZ X19, 0x33276E4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x10B6000
	006 Move X21, 0xE02000
	007 Move W8, [X20+3223]
	008 Move X21, [X21+808]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE02000
	015 Move X0, [X0+808]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3223], W8
	019 Move X0, X19
	020 Call DateTimeFormatInfo.get_UnclonedLongDatePatterns, X0
	021 Move X20, X0
	022 Move X0, X19
	023 Call DateTimeFormatInfo.get_LongDatePattern, X0
	024 Move X8, [X21]
	025 Move X19, X0
	026 Move W9, [X8+224]
	027 Compare W9, 0
	028 JumpIfNotEqual {31}
	029 Move X0, X8
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call DateTimeFormatInfo.GetMergedPatterns, X0, X1
	038 Return X0

Method: System.String[] get_AllLongTimePatterns()

Disassembly:
	0x0332771C BL 0x1C16CF4
	0x03327720 ADRP X0, 0xE01000
	0x03327724 LDR X0, [X0 + 0x428]
	0x03327728 BL 0x1C16CF4
	0x0332772C ADRP X0, 0xE01000
	0x03327730 LDR X0, [X0 + 0x430]
	0x03327734 BL 0x1C16CF4
	0x03327738 ADRP X0, 0xE01000
	0x0332773C LDR X0, [X0 + 0x438]
	0x03327740 BL 0x1C16CF4
	0x03327744 ADRP X0, 0xE01000
	0x03327748 LDR X0, [X0 + 0x440]
	0x0332774C BL 0x1C16CF4
	0x03327750 ADRP X0, 0xE01000
	0x03327754 LDR X0, [X0 + 0x448]
	0x03327758 BL 0x1C16CF4
	0x0332775C ADRP X0, 0xDCD000
	0x03327760 LDR X0, [X0 + 0x2A8]
	0x03327764 BL 0x1C16CF4
	0x03327768 ADRP X0, 0xDFA000
	0x0332776C LDR X0, [X0 + 0xAB8]
	0x03327770 BL 0x1C16CF4
	0x03327774 ADRP X0, 0xDF5000
	0x03327778 LDR X0, [X0 + 0x418]
	0x0332777C BL 0x1C16CF4
	0x03327780 ADRP X0, 0xDCD000
	0x03327784 LDR X0, [X0 + 0xEC8]
	0x03327788 BL 0x1C16CF4
	0x0332778C ADRP X0, 0xDD5000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x10B6000
	006 Move X21, 0xE02000
	007 Move W8, [X20+3224]
	008 Move X21, [X21+808]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE02000
	015 Move X0, [X0+808]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3224], W8
	019 Move X0, X19
	020 Call DateTimeFormatInfo.get_UnclonedLongTimePatterns, X0
	021 Move X20, X0
	022 Move X0, X19
	023 Call DateTimeFormatInfo.get_LongTimePattern, X0
	024 Move X8, [X21]
	025 Move X19, X0
	026 Move W9, [X8+224]
	027 Compare W9, 0
	028 JumpIfNotEqual {31}
	029 Move X0, X8
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call DateTimeFormatInfo.GetMergedPatterns, X0, X1
	038 Return X0

Method: System.String[] get_UnclonedYearMonthPatterns()

Disassembly:
	0x03326AFC BL 0x1C16F20
	0x03326B00 STP X30, X23, [X31 - 0x30]!
	0x03326B04 STP X22, X21, [X31 + 0x10]
	0x03326B08 STP X20, X19, [X31 + 0x20]
	0x03326B0C ADRP X21, 0x10B6000
	0x03326B10 LDRB W8, [X21 + 0xC93]
	0x03326B14 MOV X19, X1
	0x03326B18 MOV X20, X0
	0x03326B1C TBNZ X8, 0x0, 0x3326B34
	0x03326B20 ADRP X0, 0xDCD000
	0x03326B24 LDR X0, [X0 + 0xAC8]
	0x03326B28 BL 0x1C16CF4
	0x03326B2C MOVZ W8, 0x1
	0x03326B30 STRB W8, [X21 + 0xC93]
	0x03326B34 CBZ X20, 0x3326CA0
	0x03326B38 LDR W8, [X20 + 0x18]
	0x03326B3C CBZ W8, 0x3326C9C
	0x03326B40 LDR X1, [X20 + 0x20]
	0x03326B44 MOV X0, X19
	0x03326B48 MOV X2, X31
	0x03326B4C BL 0x321BA08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+248]
	006 Compare X0, 0
	007 JumpIfNotEqual {23}
	008 Move X0, [X19+120]
	009 Compare X0, 0
	010 JumpIfEqual {27}
	011 Move X8, [X0]
	012 Move X20, [X19+16]
	013 Move X9, [X8+424]
	014 Move X1, [X8+432]
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Compare X20, 0
	017 JumpIfEqual {27}
	018 Move W1, W0
	019 Move X0, X20
	020 Move X2, X31
	021 Call CultureData.YearMonths, X0, X1
	022 Move [X19+248], X0
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Return X0
	027 Call 0x1C17F20

Method: System.String[] get_UnclonedShortDatePatterns()

Disassembly:
	0x033266D8 STRB W8, [X20 + 0xC96]
	0x033266DC MOV X0, X19
	0x033266E0 BL 0x3325768
	0x033266E4 MOV X20, X0
	0x033266E8 MOV X0, X19
	0x033266EC BL 0x332572C
	0x033266F0 LDR X8, [X21]
	0x033266F4 MOV X19, X0
	0x033266F8 LDR W9, [X8 + 0xE0]
	0x033266FC CBNZ W9, 0x3326708
	0x03326700 MOV X0, X8
	0x03326704 BL 0x1C16DFC
	0x03326708 MOV X0, X20
	0x0332670C MOV X1, X19
	0x03326710 LDP X20, X19, [X31 + 0x10]
	0x03326714 LDP X30, X21, [X31], #0x20
	0x03326718 B 0x3326B00
	0x0332671C STP X30, X21, [X31 - 0x20]!
	0x03326720 STP X20, X19, [X31 + 0x10]
	0x03326724 ADRP X20, 0x10B6000
	0x03326728 ADRP X21, 0xE02000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+256]
	006 Compare X0, 0
	007 JumpIfNotEqual {23}
	008 Move X0, [X19+120]
	009 Compare X0, 0
	010 JumpIfEqual {27}
	011 Move X8, [X0]
	012 Move X20, [X19+16]
	013 Move X9, [X8+424]
	014 Move X1, [X8+432]
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Compare X20, 0
	017 JumpIfEqual {27}
	018 Move W1, W0
	019 Move X0, X20
	020 Move X2, X31
	021 Call CultureData.ShortDates, X0, X1
	022 Move [X19+256], X0
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Return X0
	027 Call 0x1C17F20

Method: System.String[] get_UnclonedLongDatePatterns()

Disassembly:
	0x03326558 ADRP X0, 0xE02000
	0x0332655C LDR X0, [X0 + 0x3A0]
	0x03326560 BL 0x1C16D08
	0x03326564 MOV X1, X19
	0x03326568 MOV X2, X31
	0x0332656C BL 0x32094D4
	0x03326570 MOV X19, X0
	0x03326574 ADRP X0, 0xDD5000
	0x03326578 LDR X0, [X0 + 0x578]
	0x0332657C BL 0x1C16D08
	0x03326580 BL 0x1C16F10
	0x03326584 MOV X20, X0
	0x03326588 ADRP X0, 0xDFC000
	0x0332658C LDR X0, [X0 + 0xA0]
	0x03326590 BL 0x1C16D08
	0x03326594 MOV X2, X0
	0x03326598 MOV X0, X20
	0x0332659C MOV X1, X19
	0x033265A0 MOV X3, X31
	0x033265A4 BL 0x330E16C
	0x033265A8 ADRP X0, 0xE02000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+264]
	006 Compare X0, 0
	007 JumpIfNotEqual {23}
	008 Move X0, [X19+120]
	009 Compare X0, 0
	010 JumpIfEqual {27}
	011 Move X8, [X0]
	012 Move X20, [X19+16]
	013 Move X9, [X8+424]
	014 Move X1, [X8+432]
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Compare X20, 0
	017 JumpIfEqual {27}
	018 Move W1, W0
	019 Move X0, X20
	020 Move X2, X31
	021 Call CultureData.LongDates, X0, X1
	022 Move [X19+264], X0
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Return X0
	027 Call 0x1C17F20

Method: System.String[] get_UnclonedShortTimePatterns()

Disassembly:
	0x03326768 MOV X19, X0
	0x0332676C LDR W9, [X8 + 0xE0]
	0x03326770 CBNZ W9, 0x332677C
	0x03326774 MOV X0, X8
	0x03326778 BL 0x1C16DFC
	0x0332677C MOV X0, X20
	0x03326780 MOV X1, X19
	0x03326784 LDP X20, X19, [X31 + 0x10]
	0x03326788 LDP X30, X21, [X31], #0x20
	0x0332678C B 0x3326B00
	0x03326790 STP X30, X21, [X31 - 0x20]!
	0x03326794 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+272]
	005 Compare X0, 0
	006 JumpIfNotEqual {13}
	007 Move X0, [X19+16]
	008 Compare X0, 0
	009 JumpIfEqual {16}
	010 Move X1, X31
	011 Call CultureData.get_ShortTimes, X0
	012 Move [X19+272], X0
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Return X0
	016 Call 0x1C17F20

Method: System.String[] get_UnclonedLongTimePatterns()

Disassembly:
	0x033265AC LDR X0, [X0 + 0x3A8]
	0x033265B0 BL 0x1C16D08
	0x033265B4 MOV X1, X0
	0x033265B8 MOV X0, X20
	0x033265BC BL 0x1C16DEC
	0x033265C0 STP X30, X21, [X31 - 0x20]!
	0x033265C4 STP X20, X19, [X31 + 0x10]
	0x033265C8 ADRP X20, 0x10B6000
	0x033265CC ADRP X21, 0xE02000
	0x033265D0 LDRB W8, [X20 + 0xC95]
	0x033265D4 LDR X21, [X21 + 0x328]
	0x033265D8 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+280]
	005 Compare X0, 0
	006 JumpIfNotEqual {13}
	007 Move X0, [X19+16]
	008 Compare X0, 0
	009 JumpIfEqual {16}
	010 Move X1, X31
	011 Call CultureData.get_LongTimes, X0
	012 Move [X19+280], X0
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Return X0
	016 Call 0x1C17F20

Method: System.Boolean get_IsReadOnly()

Disassembly:
	0x03326078 MOV X20, X0
	0x0332607C MOVZ W8, 0x6
	0x03326080 MOV X0, X19
	0x03326084 STR W8, [X31 + 0x8]
	0x03326088 BL 0x1C16D08
	0x0332608C ADD X1, X31, 0x8
	0x03326090 BL 0x1C16E04
	0x03326094 MOV X19, X0
	0x03326098 ADRP X0, 0xDFC000
	0x0332609C LDR X0, [X0 + 0x370]
	0x033260A0 BL 0x1C16D08
	0x033260A4 MOV X1, X20
	0x033260A8 MOV X2, X19
	0x033260AC MOV X3, X31
	0x033260B0 BL 0x320A264
	0x033260B4 MOV X19, X0
	0x033260B8 ADRP X0, 0xDD5000
	0x033260BC LDR X0, [X0 + 0x760]
	0x033260C0 BL 0x1C16D08
	0x033260C4 BL 0x1C16F10
	0x033260C8 MOV X20, X0
	0x033260CC ADRP X0, 0xE02000
	0x033260D0 LDR X0, [X0 + 0x388]
	0x033260D4 BL 0x1C16D08
	0x033260D8 MOV X1, X0
	0x033260DC MOV X0, X20
	0x033260E0 MOV X2, X19
	0x033260E4 MOV X3, X31
	0x033260E8 BL 0x3311888
	0x033260EC ADRP X0, 0xE02000
	0x033260F0 LDR X0, [X0 + 0x390]
	0x033260F4 BL 0x1C16D08
	0x033260F8 MOV X1, X0
	0x033260FC MOV X0, X20
	0x03326100 BL 0x1C16DEC
	0x03326104 BL 0x1C16F28
	0x03326108 BL 0x1C16F20
	0x0332610C STR X30, [X31 - 0x60]!
	0x03326110 STP X28, X27, [X31 + 0x10]
	0x03326114 STP X26, X25, [X31 + 0x20]
	0x03326118 STP X24, X23, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10B7000
	006 Move X20, 0xE02000
	007 Move W8, [X21+3225]
	008 Move X20, [X20+2352]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE02000
	015 Move X0, [X0+2352]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3225], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X21, 0x10B7000
	025 Move W8, [X21+2814]
	026 Compare W8, 0
	027 JumpIfNotEqual {33}
	028 Move X0, 0xE02000
	029 Move X0, [X0+2352]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+2814], W8
	033 Move X0, [X20]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {39}
	037 Call 0x1C17DFC
	038 Move X0, [X20]
	039 Move X8, [X0+184]
	040 Move W8, [X8]
	041 Compare W8, 0
	042 JumpIfEqual {44}
	043 Move W0, 1
	044 Move W8, [X19+320]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction CSET not yet implemented."
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return X0

Method: System.String[] get_MonthGenitiveNames()

Disassembly:
	0x03327CB0 CMP W21, 0x7
	0x03327CB4 B.NE 0x3327C64
	0x03327CB8 LDR X0, [X19 + 0x78]
	0x03327CBC CBZ X0, 0x3327F00
	0x03327CC0 LDR X8, [X0]
	0x03327CC4 LDR X9, [X8 + 0x238]
	0x03327CC8 LDR X1, [X8 + 0x240]
	0x03327CCC BLR X9
	0x03327CD0 CBZ X0, 0x3327F00
	0x03327CD4 LDR W8, [X0 + 0x18]
	0x03327CD8 MOV X21, X0
	0x03327CDC CMP W8, 0x1
	0x03327CE0 B.LT 0x3327D40
	0x03327CE4 MOVZ W22, 0x1
	0x03327CE8 MOV X0, X19
	0x03327CEC MOV W1, W22
	0x03327CF0 BL 0x33251B0
	0x03327CF4 MOV X2, X0
	0x03327CF8 MOVZ W3, 0x9
	0x03327CFC MOV X0, X19
	0x03327D00 MOV X1, X20
	0x03327D04 MOV W4, W22
	0x03327D08 BL 0x3327FC4
	0x03327D0C MOV X0, X19
	0x03327D10 MOV W1, W22
	0x03327D14 BL 0x33252DC
	0x03327D18 MOV X2, X0
	0x03327D1C MOVZ W3, 0x9
	0x03327D20 MOV X0, X19
	0x03327D24 MOV X1, X20
	0x03327D28 MOV W4, W22
	0x03327D2C BL 0x3327FC4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10B6000
	005 Move W8, [X20+3226]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDCD000
	012 Move X0, [X0+2760]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3226], W8
	016 Move X0, X19
	017 Move W1, W31
	018 Call DateTimeFormatInfo.internalGetGenitiveMonthNames, X0, X1
	019 Compare X0, 0
	020 JumpIfEqual {37}
	021 Move X1, X31
	022 Call Array.Clone, X0
	023 Compare X0, 0
	024 JumpIfEqual {33}
	025 Move X8, 0xDCD000
	026 Move X8, [X8+2760]
	027 Move X19, X0
	028 Move X20, [X8]
	029 Move X1, X20
	030 Call 0x1C17E00
	031 Compare X0, 0
	032 JumpIfEqual {38}
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0
	037 Call 0x1C17F20
	038 Move X0, X19
	039 Move X1, X20
	040 Call 0x1C181E0

Method: System.String get_FullTimeSpanPositivePattern()

Disassembly:
	0x03327D30 LDR W8, [X21 + 0x18]
	0x03327D34 ADD W22, W22, 0x1
	0x03327D38 CMP W22, W8
	0x03327D3C B.LE 0x3327CE8
	0x03327D40 ADRP X22, 0xE01000
	0x03327D44 LDR X22, [X22 + 0x328]
	0x03327D48 LDR X0, [X22]
	0x03327D4C LDR W8, [X0 + 0xE0]
	0x03327D50 CBNZ W8, 0x3327D58
	0x03327D54 BL 0x1C16DFC
	0x03327D58 BL 0x3324B20
	0x03327D5C CBZ X0, 0x3327F00
	0x03327D60 LDR X2, [X0 + 0x38]
	0x03327D64 CBNZ X2, 0x3327D78
	0x03327D68 LDR X8, [X0 + 0x10]
	0x03327D6C CBZ X8, 0x3327F00
	0x03327D70 LDR X2, [X8 + 0x10]
	0x03327D74 STR X2, [X0 + 0x38]
	0x03327D78 MOVZ W3, 0x403
	0x03327D7C MOV X0, X19
	0x03327D80 MOV X1, X20
	0x03327D84 MOV W4, W31
	0x03327D88 BL 0x3327FC4
	0x03327D8C BL 0x3324B20
	0x03327D90 CBZ X0, 0x3327F00
	0x03327D94 LDR X2, [X0 + 0x40]
	0x03327D98 CBNZ X2, 0x3327DAC
	0x03327D9C LDR X8, [X0 + 0x10]
	0x03327DA0 CBZ X8, 0x3327F00
	0x03327DA4 LDR X2, [X8 + 0x18]
	0x03327DA8 STR X2, [X0 + 0x40]
	0x03327DAC MOVZ W3, 0x504
	0x03327DB0 MOVZ W4, 0x1
	0x03327DB4 MOV X0, X19
	0x03327DB8 MOV X1, X20
	0x03327DBC MOVZ W21, 0x1
	0x03327DC0 BL 0x3327FC4
	0x03327DC4 LDR X0, [X22]
	0x03327DC8 LDR W8, [X0 + 0xE0]
	0x03327DCC CBNZ W8, 0x3327DD4
	0x03327DD0 BL 0x1C16DFC
	0x03327DD4 BL 0x3324B20
	0x03327DD8 CBZ X0, 0x3327F00
	0x03327DDC MOV W1, W21
	0x03327DE0 BL 0x3326A00
	0x03327DE4 MOV X2, X0
	0x03327DE8 MOVZ W3, 0x5
	0x03327DEC MOV X0, X19
	0x03327DF0 MOV X1, X20
	0x03327DF4 MOV W4, W21
	0x03327DF8 BL 0x3327FC4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x10B6000
	006 Move W8, [X20+3227]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0xE02000
	013 Move X0, [X0+968]
	014 Call 0x1C17CF4
	015 Move X0, 0xE02000
	016 Move X0, [X0+976]
	017 Call 0x1C17CF4
	018 Move X0, 0xE02000
	019 Move X0, [X0+984]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3227], W8
	023 Move X0, [X19+328]
	024 Compare X0, 0
	025 JumpIfNotEqual {57}
	026 Move X20, [X19+16]
	027 Compare X20, 0
	028 JumpIfEqual {62}
	029 Move W8, [X20+96]
	030 Compare W8, 0
	031 JumpIfEqual {37}
	032 Move X0, [X20+88]
	033 Move W1, W31
	034 Move X2, X31
	035 Call CultureData.GetCultureData, X0, X1
	036 Move X20, X0
	037 Move X8, 0xE02000
	038 Move X8, [X8+968]
	039 Move X0, [X8]
	040 Call 0x1C17F10
	041 Move X1, X20
	042 Move X2, X31
	043 Move X21, X0
	044 Call NumberFormatInfo..ctor, X0, X1
	045 Compare X21, 0
	046 JumpIfEqual {62}
	047 Move X8, 0xE02000
	048 Move X9, 0xE02000
	049 Move X1, [X21+56]
	050 Move X8, [X8+976]
	051 Move X9, [X9+984]
	052 Move X3, X31
	053 Move X0, [X8]
	054 Move X2, [X9]
	055 Call String.Concat, X0, X1, X2
	056 Move [X19+328], X0
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X30, [X31+32]
	060 Move X21, [X31+40]
	061 Return X0
	062 Call 0x1C17F20

Method: System.String get_FullTimeSpanNegativePattern()

Disassembly:
	0x03327DFC BL 0x3324B20
	0x03327E00 CBZ X0, 0x3327F00
	0x03327E04 MOV W1, W21
	0x03327E08 BL 0x3326900
	0x03327E0C MOV X2, X0
	0x03327E10 MOVZ W3, 0x5
	0x03327E14 MOV X0, X19
	0x03327E18 MOV X1, X20
	0x03327E1C MOV W4, W21
	0x03327E20 BL 0x3327FC4
	0x03327E24 ADD W21, W21, 0x1
	0x03327E28 CMP W21, 0xD
	0x03327E2C B.NE 0x3327DC4
	0x03327E30 MOV W21, W31
	0x03327E34 LDR X0, [X22]
	0x03327E38 LDR W8, [X0 + 0xE0]
	0x03327E3C CBNZ W8, 0x3327E44
	0x03327E40 BL 0x1C16DFC
	0x03327E44 BL 0x3324B20
	0x03327E48 CBZ X0, 0x3327F00
	0x03327E4C MOV W1, W21
	0x03327E50 BL 0x3326804
	0x03327E54 MOV X2, X0
	0x03327E58 MOVZ W3, 0x7
	0x03327E5C MOV X0, X19
	0x03327E60 MOV X1, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10B6000
	005 Move W8, [X20+3228]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE02000
	012 Move X0, [X0+992]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3228], W8
	016 Move X0, [X19+336]
	017 Compare X0, 0
	018 JumpIfNotEqual {29}
	019 Move X0, X19
	020 Call DateTimeFormatInfo.get_FullTimeSpanPositivePattern, X0
	021 Move X8, 0xE02000
	022 Move X8, [X8+992]
	023 Move X1, X0
	024 Move X2, X31
	025 Move X8, [X8]
	026 Move X0, X8
	027 Call String.Concat, X0, X1
	028 Move [X19+336], X0
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Return X0

Method: System.Globalization.CompareInfo get_CompareInfo()

Disassembly:
	0x03327E64 MOV W4, W21
	0x03327E68 BL 0x3327FC4
	0x03327E6C BL 0x3324B20
	0x03327E70 CBZ X0, 0x3327F00
	0x03327E74 MOV W1, W21
	0x03327E78 BL 0x3326010
	0x03327E7C MOV X2, X0
	0x03327E80 MOVZ W3, 0x7
	0x03327E84 MOV X0, X19
	0x03327E88 MOV X1, X20
	0x03327E8C MOV W4, W21
	0x03327E90 BL 0x3327FC4
	0x03327E94 ADD W21, W21, 0x1
	0x03327E98 CMP W21, 0x7
	0x03327E9C B.NE 0x3327E34
	0x03327EA0 MOV X0, X19
	0x03327EA4 BL 0x33253C4
	0x03327EA8 CBZ X0, 0x3327F00
	0x03327EAC MOV X21, X31
	0x03327EB0 LDRSW X8, [X0 + 0x18]
	0x03327EB4 CMP X21, X8
	0x03327EB8 B.GE 0x3327F04
	0x03327EBC MOV X0, X19
	0x03327EC0 BL 0x33253C4
	0x03327EC4 CBZ X0, 0x3327F00
	0x03327EC8 LDR W8, [X0 + 0x18]
	0x03327ECC CMP X21, X8
	0x03327ED0 B.CS 0x3327FC0
	0x03327ED4 ADD X8, X0, X21, 0x3, LSL
	0x03327ED8 LDR X2, [X8 + 0x20]
	0x03327EDC ADD X21, X21, 0x1
	0x03327EE0 MOVZ W3, 0x9
	0x03327EE4 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10B6000
	005 Move W8, [X20+3229]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDFB000
	012 Move X0, [X0+4048]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3229], W8
	016 Move X0, [X19+40]
	017 Compare X0, 0
	018 JumpIfNotEqual {37}
	019 Move X0, [X19+16]
	020 Compare X0, 0
	021 JumpIfEqual {41}
	022 Move X1, X31
	023 Call CultureData.get_SCOMPAREINFO, X0
	024 Move X8, 0xDFB000
	025 Move X8, [X8+4048]
	026 Move X20, X0
	027 Move X8, [X8]
	028 Move W9, [X8+224]
	029 Compare W9, 0
	030 JumpIfNotEqual {33}
	031 Move X0, X8
	032 Call 0x1C17DFC
	033 Move X0, X20
	034 Move X1, X31
	035 Call CompareInfo.GetCompareInfo, X0
	036 Move [X19+40], X0
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Return X0
	041 Call 0x1C17F20

Method: System.Void ValidateStyles(System.Globalization.DateTimeStyles style, System.String parameterName)

Disassembly:
	0x03327EE8 MOV X1, X20
	0x03327EEC MOV W4, W21
	0x03327EF0 BL 0x3327FC4
	0x03327EF4 MOV X0, X19
	0x03327EF8 BL 0x33253C4
	0x03327EFC CBNZ X0, 0x3327EB0
	0x03327F00 BL 0x1C16F20
	0x03327F04 ADRP X8, 0xDF5000
	0x03327F08 LDR X8, [X8 + 0x418]
	0x03327F0C MOVZ W3, 0xE00
	0x03327F10 MOV X0, X19
	0x03327F14 MOV X1, X20
	0x03327F18 LDR X2, [X8]
	0x03327F1C MOV W4, W31
	0x03327F20 BL 0x3327FC4
	0x03327F24 ADRP X8, 0xE01000
	0x03327F28 LDR X8, [X8 + 0x458]
	0x03327F2C MOVZ W3, 0x8
	0x03327F30 MOV X0, X19
	0x03327F34 MOV X1, X20
	0x03327F38 LDR X2, [X8]
	0x03327F3C MOV W4, W31
	0x03327F40 BL 0x3327FC4
	0x03327F44 ADRP X8, 0xE01000
	0x03327F48 LDR X8, [X8 + 0x440]
	0x03327F4C MOVZ W3, 0x8
	0x03327F50 MOV X0, X19
	0x03327F54 MOV X1, X20
	0x03327F58 LDR X2, [X8]
	0x03327F5C MOV W4, W31
	0x03327F60 BL 0x3327FC4
	0x03327F64 ADRP X8, 0xDCD000
	0x03327F68 LDR X8, [X8 + 0xEC8]
	0x03327F6C MOVZ W3, 0x600
	0x03327F70 MOV X0, X19
	0x03327F74 MOV X1, X20
	0x03327F78 LDR X2, [X8]
	0x03327F7C MOV W4, W31
	0x03327F80 BL 0x3327FC4
	0x03327F84 ADRP X8, 0xDD5000
	0x03327F88 LDR X8, [X8 + 0x988]
	0x03327F8C MOVZ W3, 0x700
	0x03327F90 MOV X0, X19
	0x03327F94 MOV X1, X20
	0x03327F98 LDR X2, [X8]
	0x03327F9C MOV W4, W31
	0x03327FA0 BL 0x3327FC4
	0x03327FA4 STR X20, [X19 + 0x158]
	0x03327FA8 MOV X0, X20
	0x03327FAC LDP X20, X19, [X31 + 0x30]
	0x03327FB0 LDP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction ORN not yet implemented."
	006 And W31, W8, 96
	007 Move TEMP, X0
	008 And TEMP, TEMP, 128
	009 Compare TEMP, 128
	010 JumpIfNotEqual {14}
	011 And W8, W0, 112
	012 Compare W8, 0
	013 JumpIfNotEqual {34}
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Move X30, [X31+32]
	017 Return 
	018 Move X0, 0xDD5000
	019 Move X0, [X0+1400]
	020 Move X19, X1
	021 Call 0x1C17D08
	022 Call 0x1C17F10
	023 Move X20, X0
	024 Move X0, 0xE02000
	025 Move X0, [X0+1000]
	026 Move X0, 0xDD5000
	027 Move X0, [X0+1400]
	028 Move X19, X1
	029 Call 0x1C17D08
	030 Call 0x1C17F10
	031 Move X20, X0
	032 Move X0, 0xE02000
	033 Move X0, [X0+1008]
	034 Move X0, 0xDD5000
	035 Move X0, [X0+1400]
	036 Move X19, X1
	037 Call 0x1C17D08
	038 Call 0x1C17F10
	039 Move X20, X0
	040 Move X0, 0xE02000
	041 Move X0, [X0+1016]
	042 Call 0x1C17D08
	043 Move X1, X0
	044 Move X0, X20
	045 Move X2, X19
	046 Move X3, X31
	047 Call ArgumentException..ctor, X0, X1, X2
	048 Move X0, 0xE02000
	049 Move X0, [X0+1024]
	050 Call 0x1C17D08
	051 Move X1, X0
	052 Move X0, X20
	053 Call 0x1C17DEC

Method: System.Globalization.DateTimeFormatFlags get_FormatFlags()

Disassembly:
	0x03326D88 CBZ W8, 0x3326DA0
	0x03326D8C LDR X0, [X20 + 0x58]
	0x03326D90 MOV W1, W31
	0x03326D94 MOV X2, X31
	0x03326D98 BL 0x3340024
	0x03326D9C MOV X20, X0

ISIL:
	001 Move W8, [X0+324]
	002 Add W31, W8, 1
	003 Move W0, W8
	004 Return X0
	005 Call DateTimeFormatInfo.InitializeFormatFlags, X0
	006 Return X0

Method: System.Globalization.DateTimeFormatFlags InitializeFormatFlags()

Disassembly:
	0x03327FB4 LDP X24, X23, [X31 + 0x10]
	0x03327FB8 LDR X30, [X31], #0x40
	0x03327FBC RET
	0x03327FC0 BL 0x1C16F28
	0x03327FC4 SUB X31, X31, 0x70
	0x03327FC8 STP X29, X30, [X31 + 0x10]
	0x03327FCC STP X28, X27, [X31 + 0x20]
	0x03327FD0 STP X26, X25, [X31 + 0x30]
	0x03327FD4 STP X24, X23, [X31 + 0x40]
	0x03327FD8 STP X22, X21, [X31 + 0x50]
	0x03327FDC STP X20, X19, [X31 + 0x60]
	0x03327FE0 ADRP X24, 0x10B5000
	0x03327FE4 LDRB W8, [X24 + 0xCA7]
	0x03327FE8 MOV W19, W4
	0x03327FEC MOV W20, W3
	0x03327FF0 MOV X22, X2
	0x03327FF4 MOV X21, X1
	0x03327FF8 MOV X23, X0
	0x03327FFC TBNZ X8, 0x0, 0x3328020
	0x03328000 ADRP X0, 0xDCD000
	0x03328004 LDR X0, [X0 + 0x170]
	0x03328008 BL 0x1C16CF4
	0x0332800C ADRP X0, 0xE00000
	0x03328010 LDR X0, [X0 + 0x460]
	0x03328014 BL 0x1C16CF4
	0x03328018 MOVZ W8, 0x1
	0x0332801C STRB W8, [X24 + 0xCA7]
	0x03328020 CBZ X22, 0x332820C
	0x03328024 LDR W8, [X22 + 0x10]
	0x03328028 CBZ W8, 0x332820C
	0x0332802C MOV X0, X22
	0x03328030 MOV W1, W31
	0x03328034 MOV X2, X31
	0x03328038 BL 0x3222A1C
	0x0332803C ADRP X25, 0xDCD000
	0x03328040 LDR X25, [X25 + 0x170]
	0x03328044 MOV W24, W0
	0x03328048 LDR X8, [X25]
	0x0332804C LDR W9, [X8 + 0xE0]
	0x03328050 CBNZ W9, 0x332805C
	0x03328054 MOV X0, X8
	0x03328058 BL 0x1C16DFC
	0x0332805C MOV W0, W24
	0x03328060 MOV X1, X31
	0x03328064 BL 0x3317FCC
	0x03328068 TBNZ X0, 0x0, 0x33280A8
	0x0332806C LDR W8, [X22 + 0x10]
	0x03328070 MOV X0, X22
	0x03328074 MOV X2, X31
	0x03328078 SUB W1, W8, 0x1
	0x0332807C BL 0x3222A1C
	0x03328080 LDR X8, [X25]
	0x03328084 MOV W24, W0
	0x03328088 LDR W9, [X8 + 0xE0]
	0x0332808C CBNZ W9, 0x3328098
	0x03328090 MOV X0, X8
	0x03328094 BL 0x1C16DFC
	0x03328098 MOV W0, W24
	0x0332809C MOV X1, X31
	0x033280A0 BL 0x3317FCC
	0x033280A4 TBZ X0, 0x0, 0x33280C8
	0x033280A8 MOV X0, X22
	0x033280AC MOV X1, X31
	0x033280B0 MOV X2, X31
	0x033280B4 BL 0x322BBA0
	0x033280B8 CBZ X0, 0x33282A8
	0x033280BC LDR W8, [X0 + 0x10]
	0x033280C0 MOV X22, X0
	0x033280C4 CBZ W8, 0x332820C
	0x033280C8 MOV X0, X23
	0x033280CC BL 0x3324360
	0x033280D0 CBZ X0, 0x33282A8
	0x033280D4 LDR X8, [X0]
	0x033280D8 LDP X9, X1, [X8 + 0x1D8]
	0x033280DC BLR X9
	0x033280E0 MOV X24, X0
	0x033280E4 MOV X0, X22
	0x033280E8 MOV W1, W31
	0x033280EC MOV X2, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, X0
	008 Call DateTimeFormatInfo.get_MonthNames, X0
	009 Move X22, X0
	010 Move X0, X19
	011 Move W1, W31
	012 Call DateTimeFormatInfo.internalGetGenitiveMonthNames, X0, X1
	013 Move X23, X0
	014 Move X0, X19
	015 Call DateTimeFormatInfo.get_AbbreviatedMonthNames, X0
	016 Move X20, X0
	017 Move W1, 1
	018 Move X0, X19
	019 Call DateTimeFormatInfo.internalGetGenitiveMonthNames, X0, X1
	020 Move X21, X0
	021 Move X0, X22
	022 Move X1, X23
	023 Call DateTimeFormatInfoScanner.EqualStringArrays, X0, X1
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {36}
	028 Move X0, X20
	029 Move X1, X21
	030 Call DateTimeFormatInfoScanner.EqualStringArrays, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {36}
	035 Move W23, W31
	036 Move W23, 1
	037 Move X0, X19
	038 Call DateTimeFormatInfo.get_MonthNames, X0
	039 Move X20, X0
	040 Move X0, X19
	041 Move W1, W31
	042 Call DateTimeFormatInfo.internalGetGenitiveMonthNames, X0, X1
	043 Move X21, X0
	044 Move X0, X19
	045 Call DateTimeFormatInfo.get_AbbreviatedMonthNames, X0
	046 Move X22, X0
	047 Move W1, 1
	048 Move X0, X19
	049 Call DateTimeFormatInfo.internalGetGenitiveMonthNames, X0, X1
	050 Move X3, X0
	051 Move X0, X20
	052 Move X1, X21
	053 Move X2, X22
	054 Call DateTimeFormatInfoScanner.GetFormatFlagUseSpaceInMonthNames, X0, X1, X2, X3
	055 Move W20, W0
	056 Move X0, X19
	057 Call DateTimeFormatInfo.get_DayNames, X0
	058 Move X22, X0
	059 Move X0, X19
	060 Call DateTimeFormatInfo.get_AbbreviatedDayNames, X0
	061 Move X21, X0
	062 Move X0, X22
	063 Call DateTimeFormatInfoScanner.ArrayElementsHaveSpace, X0
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfEqual {74}
	068 Move X0, X21
	069 Call DateTimeFormatInfoScanner.ArrayElementsHaveSpace, X0
	070 Move TEMP, X0
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfNotEqual {75}
	074 Move W21, 16
	075 Move W21, W31
	076 Move X0, [X19+120]
	077 Compare X0, 0
	078 JumpIfEqual {97}
	079 Move X8, [X0]
	080 Move X9, [X8+424]
	081 Move X1, [X8+432]
	082 NotImplemented "Instruction BLR not yet implemented."
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move W8, 10
	085 Or W9, W20, W23
	086 NotImplemented "Instruction CSEL not yet implemented."
	087 Or W9, W9, W21
	088 Or W0, W9, W8
	089 Move [X19+324], W0
	090 Move X20, [X31+32]
	091 Move X19, [X31+40]
	092 Move X22, [X31+16]
	093 Move X21, [X31+24]
	094 Move X30, [X31+48]
	095 Move X23, [X31+56]
	096 Return X0
	097 Call 0x1C17F20

Method: System.Boolean get_HasForceTwoDigitYears()

Disassembly:
	0x03328230 CBZ X8, 0x33282A8
	0x03328234 LDR W9, [X22 + 0x10]
	0x03328238 LDR W8, [X8 + 0x10]
	0x0332823C CMP W9, W8
	0x03328240 B.LE 0x3328270
	0x03328244 MOV X0, X23
	0x03328248 MOV X1, X21
	0x0332824C MOV X2, X22
	0x03328250 MOV W3, W25
	0x03328254 MOV W4, W20
	0x03328258 MOV W5, W19
	0x0332825C MOV W6, W26
	0x03328260 MOV W7, W24

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+120]
	003 Compare X0, 0
	004 JumpIfEqual {15}
	005 Move X8, [X0]
	006 Move X9, [X8+424]
	007 Move X1, [X8+432]
	008 NotImplemented "Instruction BLR not yet implemented."
	009 And W8, W0, 0xFFFF
	010 Subtract W8, W8, 3
	011 NotImplemented "Instruction CMP not yet implemented."
	012 NotImplemented "Instruction CSET not yet implemented."
	013 Move X30, [X31+16]
	014 Return X0
	015 Call 0x1C17F20

Method: System.Boolean get_HasYearMonthAdjustment()

Disassembly:
	0x03328264 STR W27, [X31]
	0x03328268 BL 0x3329B28
	0x0332826C B 0x332820C
	0x03328270 LDR W8, [X28 + 0x18]
	0x03328274 ANDS W31, W20, 0xFF
	0x03328278 B.EQ 0x3328284
	0x0332827C AND W9, W8, 0xFF
	0x03328280 CBZ W9, 0x3328294
	0x03328284 ANDS W31, W20, 0xFF00
	0x03328288 B.EQ 0x332820C

ISIL:
	001 Move [X31-16], X30
	002 Move X8, X0
	003 Move W0, [X0+324]
	004 Add W31, W0, 1
	005 Move X0, X8
	006 Call DateTimeFormatInfo.InitializeFormatFlags, X0
	007 Move W0, W0
	008 ShiftRight W0, 3
	009 And W0, W0, 7
	010 Move X30, [X31+16]
	011 Return X0

Method: System.Boolean YearMonthAdjustment(ref System.Int32 year, ref System.Int32 month, System.Boolean parsedMonthName)

Disassembly:
	0x0332828C AND W9, W8, 0xFF00
	0x03328290 CBNZ W9, 0x332820C
	0x03328294 ORR W8, W8, W20, 0x0
	0x03328298 STR W8, [X28 + 0x18]
	0x0332829C CBZ W19, 0x332820C
	0x033282A0 STR W19, [X28 + 0x1C]
	0x033282A4 B 0x332820C
	0x033282A8 BL 0x1C16F20
	0x033282AC BL 0x1C16F28
	0x033282B0 BL 0x1C16F44
	0x033282B4 MOV X1, X31
	0x033282B8 BL 0x1C16DEC
	0x033282BC STP X29, X30, [X31 - 0x60]!
	0x033282C0 STP X28, X27, [X31 + 0x10]
	0x033282C4 STP X26, X25, [X31 + 0x20]
	0x033282C8 STP X24, X23, [X31 + 0x30]
	0x033282CC STP X22, X21, [X31 + 0x40]
	0x033282D0 STP X20, X19, [X31 + 0x50]
	0x033282D4 ADRP X22, 0x10B4000
	0x033282D8 LDRB W8, [X22 + 0xCA1]
	0x033282DC MOV X23, X2
	0x033282E0 MOV X19, X1
	0x033282E4 MOV X20, X0
	0x033282E8 TBNZ X8, 0x0, 0x3328420
	0x033282EC ADRP X0, 0xDFB000
	0x033282F0 LDR X0, [X0 + 0xB60]
	0x033282F4 BL 0x1C16CF4
	0x033282F8 ADRP X0, 0xE00000
	0x033282FC LDR X0, [X0 + 0x468]
	0x03328300 BL 0x1C16CF4
	0x03328304 ADRP X0, 0xE00000
	0x03328308 LDR X0, [X0 + 0x328]
	0x0332830C BL 0x1C16CF4
	0x03328310 ADRP X0, 0xE00000
	0x03328314 LDR X0, [X0 + 0x430]
	0x03328318 BL 0x1C16CF4
	0x0332831C ADRP X0, 0xDF9000
	0x03328320 LDR X0, [X0 + 0xAB0]
	0x03328324 BL 0x1C16CF4
	0x03328328 ADRP X0, 0xE00000
	0x0332832C LDR X0, [X0 + 0x470]
	0x03328330 BL 0x1C16CF4
	0x03328334 ADRP X0, 0xE00000
	0x03328338 LDR X0, [X0 + 0x478]
	0x0332833C BL 0x1C16CF4
	0x03328340 ADRP X0, 0xE00000
	0x03328344 LDR X0, [X0 + 0x480]
	0x03328348 BL 0x1C16CF4
	0x0332834C ADRP X0, 0xE00000
	0x03328350 LDR X0, [X0 + 0x488]
	0x03328354 BL 0x1C16CF4
	0x03328358 ADRP X0, 0xE00000
	0x0332835C LDR X0, [X0 + 0x448]
	0x03328360 BL 0x1C16CF4
	0x03328364 ADRP X0, 0xE00000
	0x03328368 LDR X0, [X0 + 0x490]
	0x0332836C BL 0x1C16CF4
	0x03328370 ADRP X0, 0xE00000
	0x03328374 LDR X0, [X0 + 0x498]
	0x03328378 BL 0x1C16CF4
	0x0332837C ADRP X0, 0xDF9000
	0x03328380 LDR X0, [X0 + 0xAB8]
	0x03328384 BL 0x1C16CF4
	0x03328388 ADRP X0, 0xE00000
	0x0332838C LDR X0, [X0 + 0x4A0]
	0x03328390 BL 0x1C16CF4
	0x03328394 ADRP X0, 0xE00000
	0x03328398 LDR X0, [X0 + 0x4A8]
	0x0332839C BL 0x1C16CF4
	0x033283A0 ADRP X0, 0xE00000
	0x033283A4 LDR X0, [X0 + 0x450]
	0x033283A8 BL 0x1C16CF4
	0x033283AC ADRP X0, 0xE00000
	0x033283B0 LDR X0, [X0 + 0x4B0]
	0x033283B4 BL 0x1C16CF4
	0x033283B8 ADRP X0, 0xDD6000
	0x033283BC LDR X0, [X0 + 0x310]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, X0
	009 Move W0, [X0+324]
	010 Move W22, W3
	011 Move X19, X2
	012 Move X20, X1
	013 Add W31, W0, 1
	014 Move TEMP, X0
	015 And TEMP, TEMP, 8
	016 Compare TEMP, 8
	017 JumpIfEqual {24}
	018 Move X0, X21
	019 Call DateTimeFormatInfo.InitializeFormatFlags, X0
	020 Move TEMP, X0
	021 And TEMP, TEMP, 8
	022 Compare TEMP, 8
	023 JumpIfNotEqual {82}
	024 Move W24, [X20]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W8, 0x1388
	027 Add W24, W24, W8
	028 Move [X20], W24
	029 Move X23, [X21+120]
	030 Compare X23, 0
	031 JumpIfEqual {91}
	032 Move X8, [X23]
	033 Move X0, X23
	034 Move X9, [X8+392]
	035 Move X1, [X8+400]
	036 NotImplemented "Instruction BLR not yet implemented."
	037 Move X8, [X23]
	038 Move X1, X0
	039 Move X0, X23
	040 Move X9, [X8+616]
	041 Move X2, [X8+624]
	042 NotImplemented "Instruction BLR not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X23, [X21+120]
	045 Compare X23, 0
	046 JumpIfEqual {91}
	047 Move X8, [X23]
	048 Move W24, [X20]
	049 Move X0, X23
	050 Move X9, [X8+408]
	051 Move X1, [X8+416]
	052 NotImplemented "Instruction BLR not yet implemented."
	053 Move X8, [X23]
	054 Move X1, X0
	055 Move X0, X23
	056 Move X9, [X8+616]
	057 Move X2, [X8+624]
	058 NotImplemented "Instruction BLR not yet implemented."
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move W0, W31
	061 Move TEMP, X22
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfNotEqual {82}
	065 Move X0, [X21+120]
	066 Compare X0, 0
	067 JumpIfEqual {91}
	068 Move X8, [X0]
	069 Move W1, [X20]
	070 Move X9, [X8+632]
	071 Move X2, [X8+640]
	072 NotImplemented "Instruction BLR not yet implemented."
	073 Move TEMP, X0
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfEqual {82}
	077 Move W8, [X19]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Subtract W8, W8, 1
	081 Move [X19], W8
	082 Move W0, 1
	083 Move X20, [X31+48]
	084 Move X19, [X31+56]
	085 Move X22, [X31+32]
	086 Move X21, [X31+40]
	087 Move X24, [X31+16]
	088 Move X23, [X31+24]
	089 Move X30, [X31+64]
	090 Return X0
	091 Call 0x1C17F20

Method: System.Globalization.DateTimeFormatInfo GetJapaneseCalendarDTFI()

Disassembly:
	0x033283C0 BL 0x1C16CF4
	0x033283C4 ADRP X0, 0xE00000
	0x033283C8 LDR X0, [X0 + 0x4B8]
	0x033283CC BL 0x1C16CF4
	0x033283D0 ADRP X0, 0xE00000
	0x033283D4 LDR X0, [X0 + 0x4C0]
	0x033283D8 BL 0x1C16CF4
	0x033283DC ADRP X0, 0xDCC000
	0x033283E0 LDR X0, [X0 + 0x608]
	0x033283E4 BL 0x1C16CF4
	0x033283E8 ADRP X0, 0xE00000
	0x033283EC LDR X0, [X0 + 0x420]
	0x033283F0 BL 0x1C16CF4
	0x033283F4 ADRP X0, 0xE00000
	0x033283F8 LDR X0, [X0 + 0x4C8]
	0x033283FC BL 0x1C16CF4
	0x03328400 ADRP X0, 0xE00000
	0x03328404 LDR X0, [X0 + 0x4D0]
	0x03328408 BL 0x1C16CF4
	0x0332840C ADRP X0, 0xDD4000
	0x03328410 LDR X0, [X0 + 0x790]
	0x03328414 BL 0x1C16CF4
	0x03328418 MOVZ W8, 0x1
	0x0332841C STRB W8, [X22 + 0xCA1]
	0x03328420 LDR X0, [X20 + 0x20]
	0x03328424 CBNZ X0, 0x332843C
	0x03328428 LDR X8, [X20 + 0x10]
	0x0332842C CBZ X8, 0x3328B84
	0x03328430 LDR X0, [X8 + 0x50]
	0x03328434 STR X0, [X20 + 0x20]
	0x03328438 CBZ X0, 0x3328B84
	0x0332843C ADRP X8, 0xE00000
	0x03328440 LDR X8, [X8 + 0x498]
	0x03328444 MOV X2, X31
	0x03328448 LDR X1, [X8]
	0x0332844C BL 0x322693C
	0x03328450 TBZ X0, 0x0, 0x33284D4
	0x03328454 LDR X1, [X20 + 0x38]
	0x03328458 CBNZ X1, 0x332846C
	0x0332845C LDR X8, [X20 + 0x10]
	0x03328460 CBZ X8, 0x3328B84
	0x03328464 LDR X1, [X8 + 0x10]
	0x03328468 STR X1, [X20 + 0x38]
	0x0332846C ADRP X22, 0xDD4000
	0x03328470 LDR X22, [X22 + 0x790]
	0x03328474 MOV X2, X31
	0x03328478 LDR X0, [X22]
	0x0332847C BL 0x321B938
	0x03328480 MOV X2, X0
	0x03328484 MOVZ W3, 0x403
	0x03328488 MOV X0, X20
	0x0332848C MOV X1, X19
	0x03328490 MOV W4, W31
	0x03328494 BL 0x3327FC4
	0x03328498 LDR X1, [X20 + 0x40]
	0x0332849C CBNZ X1, 0x33284B0
	0x033284A0 LDR X8, [X20 + 0x10]
	0x033284A4 CBZ X8, 0x3328B84
	0x033284A8 LDR X1, [X8 + 0x18]
	0x033284AC STR X1, [X20 + 0x40]
	0x033284B0 LDR X0, [X22]
	0x033284B4 MOV X2, X31
	0x033284B8 BL 0x321B938
	0x033284BC MOV X2, X0
	0x033284C0 MOVZ W3, 0x504
	0x033284C4 MOVZ W4, 0x1
	0x033284C8 MOV X0, X20
	0x033284CC MOV X1, X19
	0x033284D0 BL 0x3327FC4
	0x033284D4 ADRP X8, 0xE00000
	0x033284D8 LDR X8, [X8 + 0x4D0]
	0x033284DC ADRP X27, 0xE00000
	0x033284E0 ADRP X28, 0xE00000
	0x033284E4 ADRP X29, 0xE00000
	0x033284E8 ADRP X21, 0xE00000
	0x033284EC ADRP X22, 0xE00000
	0x033284F0 ADRP X26, 0xE00000
	0x033284F4 ADRP X25, 0xE00000
	0x033284F8 LDR X27, [X27 + 0x478]
	0x033284FC LDR X28, [X28 + 0x4B8]
	0x03328500 LDR X29, [X29 + 0x470]
	0x03328504 LDR X21, [X21 + 0x4A0]
	0x03328508 LDR X22, [X22 + 0x490]
	0x0332850C LDR X26, [X26 + 0x450]
	0x03328510 LDR X25, [X25 + 0x430]
	0x03328514 LDR X2, [X8]
	0x03328518 ADRP X24, 0xE00000
	0x0332851C LDR X24, [X24 + 0x4C0]
	0x03328520 MOVZ W3, 0x800
	0x03328524 MOV X0, X20
	0x03328528 MOV X1, X19
	0x0332852C MOV W4, W31
	0x03328530 BL 0x3327FC4
	0x03328534 LDR X2, [X27]
	0x03328538 MOVZ W3, 0x800
	0x0332853C MOV X0, X20
	0x03328540 MOV X1, X19
	0x03328544 MOV W4, W31
	0x03328548 BL 0x3327FC4
	0x0332854C LDR X2, [X28]
	0x03328550 MOVZ W3, 0x900

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10B5000
	006 Move X20, 0xE01000
	007 Move W8, [X19+3230]
	008 Move X20, [X20+808]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xDCE000
	014 Move X0, [X0+3144]
	015 Call 0x1C17CF4
	016 Move X0, 0xE01000
	017 Move X0, [X0+808]
	018 Call 0x1C17CF4
	019 Move X0, 0xE00000
	020 Move X0, [X0+2352]
	021 Call 0x1C17CF4
	022 Move X0, 0xE01000
	023 Move X0, [X0+1032]
	024 Call 0x1C17CF4
	025 Move X0, 0xE01000
	026 Move X0, [X0+1040]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X19+3230], W8
	030 Move X0, [X20]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {36}
	034 Call 0x1C17DFC
	035 Move X0, [X20]
	036 Move X8, [X0+184]
	037 Move X19, [X8+16]
	038 Call 0x1C17D44
	039 Compare X19, 0
	040 JumpIfNotEqual {111}
	041 Move X19, 0xE00000
	042 Move X19, [X19+2352]
	043 Move X0, [X19]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X21, 0x10B5000
	049 Move W8, [X21+2814]
	050 Compare W8, 0
	051 JumpIfNotEqual {57}
	052 Move X0, 0xE00000
	053 Move X0, [X0+2352]
	054 Call 0x1C17CF4
	055 Move W8, 1
	056 Move [X21+2814], W8
	057 Move X0, [X19]
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {63}
	061 Call 0x1C17DFC
	062 Move X0, [X19]
	063 Move X8, [X0+184]
	064 Move W8, [X8]
	065 Compare W8, 0
	066 JumpIfEqual {68}
	067 Move X19, X31
	068 Move X8, 0xDCE000
	069 Move X8, [X8+3144]
	070 Move X0, [X8]
	071 Call 0x1C17F10
	072 Move X8, 0xE01000
	073 Move X8, [X8+1040]
	074 Move W2, W31
	075 Move X3, X31
	076 Move X19, X0
	077 Move X1, [X8]
	078 Call CultureInfo..ctor, X0, X1, X2
	079 Compare X19, 0
	080 JumpIfEqual {117}
	081 Move X8, [X19]
	082 Move X0, X19
	083 Move X9, [X8+568]
	084 Move X1, [X8+576]
	085 NotImplemented "Instruction BLR not yet implemented."
	086 Move X8, 0xE01000
	087 Move X8, [X8+1032]
	088 Move X19, X0
	089 Move X8, [X8]
	090 Move W9, [X8+224]
	091 Compare W9, 0
	092 JumpIfNotEqual {95}
	093 Move X0, X8
	094 Call 0x1C17DFC
	095 Move X0, X31
	096 Call JapaneseCalendar.GetDefaultInstance
	097 Compare X19, 0
	098 JumpIfEqual {117}
	099 Move X1, X0
	100 Move X0, X19
	101 Call DateTimeFormatInfo.set_Calendar, X0, X1
	102 Move X0, [X20]
	103 Move W8, [X0+224]
	104 Compare W8, 0
	105 JumpIfNotEqual {107}
	106 Call 0x1C17DFC
	107 Call 0x1C17D44
	108 Move X8, [X20]
	109 Move X8, [X8+184]
	110 Move [X8+16], X19
	111 Move X0, X19
	112 Move X20, [X31+16]
	113 Move X19, [X31+24]
	114 Move X30, [X31+32]
	115 Move X21, [X31+40]
	116 Return X0
	117 Call 0x1C17F20

Method: System.Globalization.DateTimeFormatInfo GetTaiwanCalendarDTFI()

Disassembly:
	0x03328554 MOV X0, X20
	0x03328558 MOV X1, X19
	0x0332855C MOV W4, W31
	0x03328560 BL 0x3327FC4
	0x03328564 LDR X2, [X29]
	0x03328568 MOVZ W3, 0x900
	0x0332856C MOV X0, X20
	0x03328570 MOV X1, X19
	0x03328574 MOV W4, W31
	0x03328578 BL 0x3327FC4
	0x0332857C LDR X2, [X21]
	0x03328580 MOVZ W3, 0xA00
	0x03328584 MOV X0, X20
	0x03328588 MOV X1, X19
	0x0332858C MOV W4, W31
	0x03328590 BL 0x3327FC4
	0x03328594 LDR X2, [X22]
	0x03328598 MOVZ W3, 0xA00
	0x0332859C MOV X0, X20
	0x033285A0 MOV X1, X19
	0x033285A4 MOV W4, W31
	0x033285A8 BL 0x3327FC4
	0x033285AC LDR X2, [X26]
	0x033285B0 MOVZ W3, 0xB00
	0x033285B4 MOV X0, X20
	0x033285B8 MOV X1, X19
	0x033285BC MOV W4, W31
	0x033285C0 BL 0x3327FC4
	0x033285C4 LDR X2, [X25]
	0x033285C8 MOVZ W3, 0xB00
	0x033285CC MOV X0, X20
	0x033285D0 MOV X1, X19
	0x033285D4 MOV W4, W31
	0x033285D8 BL 0x3327FC4
	0x033285DC LDR X2, [X24]
	0x033285E0 MOVZ W3, 0xC00
	0x033285E4 MOV X0, X20
	0x033285E8 MOV X1, X19
	0x033285EC MOV W4, W31
	0x033285F0 BL 0x3327FC4
	0x033285F4 ADRP X8, 0xE00000
	0x033285F8 LDR X8, [X8 + 0x488]
	0x033285FC MOVZ W3, 0xD00
	0x03328600 MOV X0, X20
	0x03328604 MOV X1, X19
	0x03328608 LDR X2, [X8]
	0x0332860C MOV W4, W31
	0x03328610 BL 0x3327FC4
	0x03328614 ADRP X8, 0xDFB000
	0x03328618 LDR X8, [X8 + 0xB60]
	0x0332861C LDR X8, [X8]
	0x03328620 LDR X8, [X8 + 0xB8]
	0x03328624 LDRB W8, [X8 + 0x3]
	0x03328628 CBNZ W8, 0x33286A8
	0x0332862C LDR X0, [X20 + 0x78]
	0x03328630 CBZ X0, 0x3328B84
	0x03328634 LDR X8, [X0]
	0x03328638 LDP X9, X1, [X8 + 0x1A8]
	0x0332863C BLR X9
	0x03328640 CMP W0, 0x3
	0x03328644 B.NE 0x33286A8
	0x03328648 ADRP X8, 0xE00000
	0x0332864C LDR X8, [X8 + 0x4C8]
	0x03328650 MOVZ W3, 0x2
	0x03328654 MOVZ W4, 0x1
	0x03328658 MOV X0, X20
	0x0332865C LDR X2, [X8]
	0x03328660 MOV X1, X19
	0x03328664 BL 0x3327FC4
	0x03328668 ADRP X8, 0xDD6000
	0x0332866C LDR X8, [X8 + 0x310]
	0x03328670 MOVZ W3, 0xF
	0x03328674 MOV X0, X20
	0x03328678 MOV X1, X19
	0x0332867C LDR X2, [X8]
	0x03328680 MOV W4, W31
	0x03328684 BL 0x3327FC4
	0x03328688 ADRP X8, 0xDCC000
	0x0332868C LDR X8, [X8 + 0x608]
	0x03328690 MOVZ W3, 0xF
	0x03328694 MOV X0, X20
	0x03328698 MOV X1, X19
	0x0332869C LDR X2, [X8]
	0x033286A0 MOV W4, W31
	0x033286A4 BL 0x3327FC4
	0x033286A8 LDR X0, [X20 + 0x20]
	0x033286AC MOV X21, X23
	0x033286B0 CBNZ X0, 0x33286C8
	0x033286B4 LDR X8, [X20 + 0x10]
	0x033286B8 CBZ X8, 0x3328B84
	0x033286BC LDR X0, [X8 + 0x50]
	0x033286C0 STR X0, [X20 + 0x20]
	0x033286C4 CBZ X0, 0x3328B84
	0x033286C8 ADRP X8, 0xDF9000
	0x033286CC LDR X8, [X8 + 0xAB8]
	0x033286D0 ADRP X22, 0xE00000
	0x033286D4 MOV X2, X31
	0x033286D8 LDR X1, [X8]
	0x033286DC LDR X22, [X22 + 0x468]
	0x033286E0 BL 0x322693C
	0x033286E4 TBZ X0, 0x0, 0x3328748

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10B5000
	006 Move X20, 0xE01000
	007 Move W8, [X19+3231]
	008 Move X20, [X20+808]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xDCE000
	014 Move X0, [X0+3144]
	015 Call 0x1C17CF4
	016 Move X0, 0xE01000
	017 Move X0, [X0+808]
	018 Call 0x1C17CF4
	019 Move X0, 0xE00000
	020 Move X0, [X0+2352]
	021 Call 0x1C17CF4
	022 Move X0, 0xE01000
	023 Move X0, [X0+1048]
	024 Call 0x1C17CF4
	025 Move X0, 0xE01000
	026 Move X0, [X0+1056]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X19+3231], W8
	030 Move X0, [X20]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {36}
	034 Call 0x1C17DFC
	035 Move X0, [X20]
	036 Move X8, [X0+184]
	037 Move X19, [X8+24]
	038 Call 0x1C17D44
	039 Compare X19, 0
	040 JumpIfNotEqual {111}
	041 Move X19, 0xE00000
	042 Move X19, [X19+2352]
	043 Move X0, [X19]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X21, 0x10B5000
	049 Move W8, [X21+2814]
	050 Compare W8, 0
	051 JumpIfNotEqual {57}
	052 Move X0, 0xE00000
	053 Move X0, [X0+2352]
	054 Call 0x1C17CF4
	055 Move W8, 1
	056 Move [X21+2814], W8
	057 Move X0, [X19]
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {63}
	061 Call 0x1C17DFC
	062 Move X0, [X19]
	063 Move X8, [X0+184]
	064 Move W8, [X8]
	065 Compare W8, 0
	066 JumpIfEqual {68}
	067 Move X19, X31
	068 Move X8, 0xDCE000
	069 Move X8, [X8+3144]
	070 Move X0, [X8]
	071 Call 0x1C17F10
	072 Move X8, 0xE01000
	073 Move X8, [X8+1056]
	074 Move W2, W31
	075 Move X3, X31
	076 Move X19, X0
	077 Move X1, [X8]
	078 Call CultureInfo..ctor, X0, X1, X2
	079 Compare X19, 0
	080 JumpIfEqual {117}
	081 Move X8, [X19]
	082 Move X0, X19
	083 Move X9, [X8+568]
	084 Move X1, [X8+576]
	085 NotImplemented "Instruction BLR not yet implemented."
	086 Move X8, 0xE01000
	087 Move X8, [X8+1048]
	088 Move X19, X0
	089 Move X8, [X8]
	090 Move W9, [X8+224]
	091 Compare W9, 0
	092 JumpIfNotEqual {95}
	093 Move X0, X8
	094 Call 0x1C17DFC
	095 Move X0, X31
	096 Call TaiwanCalendar.GetDefaultInstance
	097 Compare X19, 0
	098 JumpIfEqual {117}
	099 Move X1, X0
	100 Move X0, X19
	101 Call DateTimeFormatInfo.set_Calendar, X0, X1
	102 Move X0, [X20]
	103 Move W8, [X0+224]
	104 Compare W8, 0
	105 JumpIfNotEqual {107}
	106 Call 0x1C17DFC
	107 Call 0x1C17D44
	108 Move X8, [X20]
	109 Move X8, [X8+184]
	110 Move [X8+24], X19
	111 Move X0, X19
	112 Move X20, [X31+16]
	113 Move X19, [X31+24]
	114 Move X30, [X31+32]
	115 Move X21, [X31+40]
	116 Return X0
	117 Call 0x1C17F20

Method: System.Void ClearTokenHashTable()

Disassembly:
	0x0332614C STRB W8, [X22 + 0xC91]
	0x03326150 CBZ X21, 0x332624C
	0x03326154 CBZ X20, 0x332624C
	0x03326158 ADRP X8, 0xDCD000

ISIL:
	001 Move TEMP, 0
	002 Not TEMP
	003 Move W8, TEMP
	004 Move [X0+344], X31
	005 Move [X0+324], W8
	006 Return 

Method: System.Globalization.DateTimeFormatInfo/TokenHashValue[] CreateTokenHashTable()

Disassembly:
	0x033286E8 ADRP X8, 0xE00000
	0x033286EC LDR X8, [X8 + 0x448]
	0x033286F0 MOVZ W3, 0xB00
	0x033286F4 MOV X0, X20
	0x033286F8 MOV X1, X19
	0x033286FC LDR X2, [X8]
	0x03328700 MOV W4, W31
	0x03328704 BL 0x3327FC4
	0x03328708 ADRP X8, 0xE00000
	0x0332870C LDR X8, [X8 + 0x4B0]
	0x03328710 MOVZ W3, 0xC00
	0x03328714 MOV X0, X20
	0x03328718 MOV X1, X19
	0x0332871C LDR X2, [X8]
	0x03328720 MOV W4, W31
	0x03328724 BL 0x3327FC4
	0x03328728 ADRP X8, 0xE00000
	0x0332872C LDR X8, [X8 + 0x480]
	0x03328730 MOVZ W3, 0xD00
	0x03328734 MOV X0, X20
	0x03328738 MOV X1, X19
	0x0332873C LDR X2, [X8]
	0x03328740 MOV W4, W31
	0x03328744 BL 0x3327FC4
	0x03328748 LDR X0, [X22]
	0x0332874C BL 0x1C16F10
	0x03328750 MOV X22, X0
	0x03328754 BL 0x3328C54
	0x03328758 CBZ X22, 0x3328B84
	0x0332875C MOV X0, X22
	0x03328760 MOV X1, X20
	0x03328764 BL 0x3328CD0
	0x03328768 LDR W8, [X20 + 0x144]
	0x0332876C MOV X22, X0
	0x03328770 ADDS W31, W8, 0x1
	0x03328774 B.EQ 0x3328780
	0x03328778 CBNZ X22, 0x332878C
	0x0332877C B 0x3328920
	0x03328780 MOV X0, X20
	0x03328784 BL 0x3326FB4
	0x03328788 CBZ X22, 0x3328920
	0x0332878C LDR W8, [X22 + 0x18]
	0x03328790 CMP W8, 0x1
	0x03328794 B.LT 0x3328920
	0x03328798 ADRP X28, 0xE00000
	0x0332879C ADRP X29, 0xDD4000
	0x033287A0 LDR X28, [X28 + 0x4A8]
	0x033287A4 LDR X29, [X29 + 0x790]
	0x033287A8 MOV X24, X31
	0x033287AC ADD X25, X22, 0x20
	0x033287B0 MOVZ W26, 0xE001
	0x033287B4 MOVZ W27, 0x1
	0x033287B8 CMP W24, W8
	0x033287BC B.CS 0x3328BA4
	0x033287C0 LDR X0, [X25, X24, LSL #3]
	0x033287C4 CBZ X0, 0x3328B84
	0x033287C8 MOV W1, W31
	0x033287CC MOV X2, X31
	0x033287D0 BL 0x3222A1C
	0x033287D4 AND W8, W0, 0xFFFF
	0x033287D8 CMP W8, W26
	0x033287DC B.EQ 0x332881C
	0x033287E0 CMP W8, 0xE000
	0x033287E4 B.NE 0x332888C
	0x033287E8 LDR W8, [X22 + 0x18]
	0x033287EC CMP W24, W8
	0x033287F0 B.CS 0x3328BA4
	0x033287F4 LDR X0, [X25, X24, LSL #3]
	0x033287F8 CBZ X0, 0x3328B84
	0x033287FC MOVZ W1, 0x1
	0x03328800 MOV X2, X31
	0x03328804 BL 0x322B484
	0x03328808 MOV X2, X0
	0x0332880C MOV X0, X20
	0x03328810 MOV X1, X19
	0x03328814 BL 0x3328BA8
	0x03328818 B 0x3328910
	0x0332881C LDR W8, [X22 + 0x18]
	0x03328820 CMP W24, W8
	0x03328824 B.CS 0x3328BA4
	0x03328828 LDR X0, [X25, X24, LSL #3]
	0x0332882C CBZ X0, 0x3328B84
	0x03328830 MOVZ W1, 0x1
	0x03328834 MOV X2, X31
	0x03328838 BL 0x322B484
	0x0332883C MOV X23, X0
	0x03328840 MOVZ W3, 0xF
	0x03328844 MOV X0, X20
	0x03328848 MOV X1, X19
	0x0332884C MOV X2, X23
	0x03328850 MOV W4, W31
	0x03328854 BL 0x3327FC4
	0x03328858 MOV X0, X20
	0x0332885C BL 0x3325418
	0x03328860 CBZ X0, 0x3328B84
	0x03328864 MOV X1, X31
	0x03328868 MOV X2, X31
	0x0332886C BL 0x322BBA0
	0x03328870 CBZ X0, 0x3328B84
	0x03328874 MOV X1, X23
	0x03328878 MOV X2, X31
	0x0332887C BL 0x322693C
	0x03328880 TBZ X0, 0x0, 0x3328910
	0x03328884 STRB W27, [X21]
	0x03328888 B 0x3328910
	0x0332888C LDR W8, [X22 + 0x18]
	0x03328890 CMP W24, W8
	0x03328894 B.CS 0x3328BA4
	0x03328898 LDR X2, [X25, X24, LSL #3]
	0x0332889C MOVZ W3, 0xA
	0x033288A0 MOV X0, X20
	0x033288A4 MOV X1, X19
	0x033288A8 MOV W4, W31
	0x033288AC BL 0x3327FC4
	0x033288B0 LDR X0, [X20 + 0x20]
	0x033288B4 CBNZ X0, 0x33288CC
	0x033288B8 LDR X8, [X20 + 0x10]
	0x033288BC CBZ X8, 0x3328B84
	0x033288C0 LDR X0, [X8 + 0x50]
	0x033288C4 STR X0, [X20 + 0x20]
	0x033288C8 CBZ X0, 0x3328B84
	0x033288CC LDR X1, [X28]
	0x033288D0 MOV X2, X31
	0x033288D4 BL 0x322693C
	0x033288D8 TBZ X0, 0x0, 0x3328910
	0x033288DC LDR W8, [X22 + 0x18]
	0x033288E0 CMP W24, W8
	0x033288E4 B.CS 0x3328BA4
	0x033288E8 LDR X1, [X25, X24, LSL #3]
	0x033288EC LDR X0, [X29]
	0x033288F0 MOV X2, X31
	0x033288F4 BL 0x321B938
	0x033288F8 MOV X2, X0
	0x033288FC MOVZ W3, 0xA
	0x03328900 MOV X0, X20
	0x03328904 MOV X1, X19
	0x03328908 MOV W4, W31
	0x0332890C BL 0x3327FC4
	0x03328910 LDR W8, [X22 + 0x18]
	0x03328914 ADD X24, X24, 0x1
	0x03328918 CMP W24, W8
	0x0332891C B.LT 0x33287B8
	0x03328920 LDR X0, [X20 + 0x20]
	0x03328924 CBNZ X0, 0x332893C
	0x03328928 LDR X8, [X20 + 0x10]
	0x0332892C CBZ X8, 0x3328B84
	0x03328930 LDR X0, [X8 + 0x50]
	0x03328934 STR X0, [X20 + 0x20]
	0x03328938 CBZ X0, 0x3328B84
	0x0332893C ADRP X8, 0xDF9000
	0x03328940 LDR X8, [X8 + 0xAB0]
	0x03328944 MOV X2, X31
	0x03328948 LDR X1, [X8]
	0x0332894C BL 0x322693C
	0x03328950 TBZ X0, 0x0, 0x3328AB4
	0x03328954 ADRP X22, 0xDD6000
	0x03328958 ADRP X23, 0xDCC000
	0x0332895C LDR X22, [X22 + 0x310]
	0x03328960 LDR X23, [X23 + 0x608]
	0x03328964 MOV W21, W31
	0x03328968 MOV X0, X20
	0x0332896C MOV W1, W21
	0x03328970 BL 0x3326010
	0x03328974 LDR X8, [X22]
	0x03328978 LDR X2, [X23]
	0x0332897C MOV X1, X0
	0x03328980 MOV X3, X31
	0x03328984 MOV X0, X8
	0x03328988 BL 0x32274B8
	0x0332898C MOV X2, X0
	0x03328990 MOVZ W3, 0x7
	0x03328994 MOV X0, X20
	0x03328998 MOV X1, X19
	0x0332899C MOV W4, W21
	0x033289A0 BL 0x3327FC4
	0x033289A4 ADD W21, W21, 0x1
	0x033289A8 CMP W21, 0x7
	0x033289AC B.NE 0x3328968
	0x033289B0 ADRP X22, 0xE00000
	0x033289B4 LDR X22, [X22 + 0x328]
	0x033289B8 LDR X21, [X20 + 0x78]
	0x033289BC LDR X0, [X22]
	0x033289C0 LDR W8, [X0 + 0xE0]
	0x033289C4 CBNZ W8, 0x33289CC
	0x033289C8 BL 0x1C16DFC
	0x033289CC MOV X0, X21
	0x033289D0 BL 0x3328F60
	0x033289D4 TBNZ X0, 0x0, 0x3328B88
	0x033289D8 LDR X0, [X22]
	0x033289DC LDR W8, [X0 + 0xE0]
	0x033289E0 CBNZ W8, 0x33289E8
	0x033289E4 BL 0x1C16DFC
	0x033289E8 BL 0x33273C0
	0x033289EC CBZ X0, 0x3328B84
	0x033289F0 MOV X21, X0
	0x033289F4 LDR X0, [X0 + 0x78]
	0x033289F8 CBZ X0, 0x3328B84
	0x033289FC MOV W23, W31
	0x03328A00 LDR X8, [X0]
	0x03328A04 LDR X9, [X8 + 0x238]
	0x03328A08 LDR X1, [X8 + 0x240]
	0x03328A0C BLR X9
	0x03328A10 CBZ X0, 0x3328B84
	0x03328A14 LDR W8, [X0 + 0x18]
	0x03328A18 ADD W22, W23, 0x1
	0x03328A1C CMP W22, W8
	0x03328A20 B.GT 0x3328B88
	0x03328A24 MOV X0, X21
	0x03328A28 MOV W1, W22
	0x03328A2C BL 0x33251B0
	0x03328A30 MOV X2, X0
	0x03328A34 MOVZ W3, 0xD
	0x03328A38 MOV X0, X20
	0x03328A3C MOV X1, X19
	0x03328A40 MOV W4, W22
	0x03328A44 BL 0x3327FC4
	0x03328A48 MOV X0, X21
	0x03328A4C MOV W1, W22
	0x03328A50 BL 0x33252DC
	0x03328A54 MOV X2, X0
	0x03328A58 MOVZ W3, 0xD
	0x03328A5C MOV X0, X20
	0x03328A60 MOV X1, X19
	0x03328A64 MOV W4, W22
	0x03328A68 BL 0x3327FC4
	0x03328A6C MOV X0, X21
	0x03328A70 BL 0x33253C4
	0x03328A74 CBZ X0, 0x3328B84
	0x03328A78 LDR W9, [X0 + 0x18]
	0x03328A7C SUB W8, W22, 0x1
	0x03328A80 CMP W8, W9
	0x03328A84 B.CS 0x3328BA4
	0x03328A88 ADD X9, X0, W23, 0x3, SXTW
	0x03328A8C LDR X2, [X9 + 0x20]
	0x03328A90 ADD W4, W8, 0x1
	0x03328A94 MOVZ W3, 0xD
	0x03328A98 MOV X0, X20
	0x03328A9C MOV X1, X19
	0x03328AA0 BL 0x3327FC4
	0x03328AA4 LDR X0, [X21 + 0x78]
	0x03328AA8 ADD W23, W23, 0x1
	0x03328AAC CBNZ X0, 0x3328A00
	0x03328AB0 B 0x3328B84
	0x03328AB4 LDR X0, [X20 + 0x18]
	0x03328AB8 CBNZ X0, 0x3328AD0
	0x03328ABC LDR X8, [X20 + 0x10]
	0x03328AC0 CBZ X8, 0x3328B84
	0x03328AC4 LDR X0, [X8 + 0x58]
	0x03328AC8 STR X0, [X20 + 0x18]
	0x03328ACC CBZ X0, 0x3328B84
	0x03328AD0 ADRP X8, 0xE00000
	0x03328AD4 LDR X8, [X8 + 0x420]
	0x03328AD8 MOV X2, X31
	0x03328ADC LDR X1, [X8]
	0x03328AE0 BL 0x322693C
	0x03328AE4 TBZ X0, 0x0, 0x3328B88
	0x03328AE8 ADRP X8, 0xE00000
	0x03328AEC LDR X8, [X8 + 0x328]
	0x03328AF0 LDR X0, [X8]
	0x03328AF4 LDR W8, [X0 + 0xE0]
	0x03328AF8 CBNZ W8, 0x3328B00
	0x03328AFC BL 0x1C16DFC
	0x03328B00 BL 0x3327554
	0x03328B04 CBZ X0, 0x3328B84
	0x03328B08 MOV X21, X0
	0x03328B0C LDR X0, [X0 + 0x78]
	0x03328B10 CBZ X0, 0x3328B84
	0x03328B14 MOVZ W22, 0x1
	0x03328B18 LDR X8, [X0]
	0x03328B1C LDR X9, [X8 + 0x238]
	0x03328B20 LDR X1, [X8 + 0x240]
	0x03328B24 BLR X9
	0x03328B28 CBZ X0, 0x3328B84
	0x03328B2C LDR W8, [X0 + 0x18]
	0x03328B30 CMP W22, W8
	0x03328B34 B.GT 0x3328B88
	0x03328B38 MOV X0, X21
	0x03328B3C MOV W1, W22
	0x03328B40 BL 0x33251B0
	0x03328B44 CBZ X0, 0x3328B84
	0x03328B48 LDR W8, [X0 + 0x10]
	0x03328B4C CMP W8, 0x1
	0x03328B50 B.LT 0x3328B78
	0x03328B54 MOV X0, X21
	0x03328B58 MOV W1, W22
	0x03328B5C BL 0x33251B0
	0x03328B60 MOV X2, X0
	0x03328B64 MOVZ W3, 0xE
	0x03328B68 MOV X0, X20
	0x03328B6C MOV X1, X19
	0x03328B70 MOV W4, W22
	0x03328B74 BL 0x3327FC4
	0x03328B78 LDR X0, [X21 + 0x78]
	0x03328B7C ADD W22, W22, 0x1
	0x03328B80 CBNZ X0, 0x3328B18
	0x03328B84 BL 0x1C16F20
	0x03328B88 LDP X20, X19, [X31 + 0x50]
	0x03328B8C LDP X22, X21, [X31 + 0x40]
	0x03328B90 LDP X24, X23, [X31 + 0x30]
	0x03328B94 LDP X26, X25, [X31 + 0x20]
	0x03328B98 LDP X28, X27, [X31 + 0x10]
	0x03328B9C LDP X29, X30, [X31], #0x60
	0x03328BA0 RET
	0x03328BA4 BL 0x1C16F28
	0x03328BA8 STR X30, [X31 - 0x30]!
	0x03328BAC STP X22, X21, [X31 + 0x10]
	0x03328BB0 STP X20, X19, [X31 + 0x20]
	0x03328BB4 MOV X19, X2
	0x03328BB8 MOV X20, X1
	0x03328BBC MOV X21, X0
	0x03328BC0 MOVZ W22, 0x1
	0x03328BC4 MOV X0, X21
	0x03328BC8 MOV W1, W22
	0x03328BCC BL 0x3326A00
	0x03328BD0 CBZ X0, 0x3328C50
	0x03328BD4 LDR W8, [X0 + 0x10]
	0x03328BD8 MOV X2, X0
	0x03328BDC CMP W8, 0x1
	0x03328BE0 B.LT 0x3328C10
	0x03328BE4 CBZ X19, 0x3328BFC
	0x03328BE8 MOV X0, X2
	0x03328BEC MOV X1, X19
	0x03328BF0 MOV X2, X31
	0x03328BF4 BL 0x321B938
	0x03328BF8 MOV X2, X0
	0x03328BFC MOVZ W3, 0x5
	0x03328C00 MOV X0, X21
	0x03328C04 MOV X1, X20
	0x03328C08 MOV W4, W22
	0x03328C0C BL 0x3327FC4
	0x03328C10 MOV X0, X21
	0x03328C14 MOV W1, W22
	0x03328C18 BL 0x3326900
	0x03328C1C MOV X2, X0
	0x03328C20 MOVZ W3, 0x5
	0x03328C24 MOV X0, X21
	0x03328C28 MOV X1, X20
	0x03328C2C MOV W4, W22
	0x03328C30 BL 0x3327FC4
	0x03328C34 ADD W22, W22, 0x1
	0x03328C38 CMP W22, 0xE
	0x03328C3C B.NE 0x3328BC4
	0x03328C40 LDP X20, X19, [X31 + 0x20]
	0x03328C44 LDP X22, X21, [X31 + 0x10]
	0x03328C48 LDR X30, [X31], #0x30
	0x03328C4C RET
	0x03328C50 BL 0x1C16F20
	0x03328C54 STR X30, [X31 - 0x30]!
	0x03328C58 STP X22, X21, [X31 + 0x10]
	0x03328C5C STP X20, X19, [X31 + 0x20]
	0x03328C60 ADRP X21, 0x10B4000
	0x03328C64 ADRP X22, 0xDCC000
	0x03328C68 ADRP X20, 0xDCC000
	0x03328C6C LDRB W8, [X21 + 0xCB1]
	0x03328C70 LDR X22, [X22 + 0x1D0]
	0x03328C74 LDR X20, [X20 + 0x1C0]
	0x03328C78 MOV X19, X0
	0x03328C7C TBNZ X8, 0x0, 0x3328CA0
	0x03328C80 ADRP X0, 0xDCC000
	0x03328C84 LDR X0, [X0 + 0x1C0]
	0x03328C88 BL 0x1C16CF4
	0x03328C8C ADRP X0, 0xDCC000
	0x03328C90 LDR X0, [X0 + 0x1D0]
	0x03328C94 BL 0x1C16CF4
	0x03328C98 MOVZ W8, 0x1
	0x03328C9C STRB W8, [X21 + 0xCB1]
	0x03328CA0 LDR X0, [X22]
	0x03328CA4 BL 0x1C16F10
	0x03328CA8 LDR X1, [X20]
	0x03328CAC MOV X20, X0
	0x03328CB0 BL 0x301B7C4
	0x03328CB4 STR X20, [X19 + 0x10]
	0x03328CB8 MOV X0, X19
	0x03328CBC LDP X20, X19, [X31 + 0x20]
	0x03328CC0 LDP X22, X21, [X31 + 0x10]
	0x03328CC4 MOV X1, X31
	0x03328CC8 LDR X30, [X31], #0x30
	0x03328CCC B 0x33BDD8C
	0x03328CD0 STP X30, X23, [X31 - 0x30]!
	0x03328CD4 STP X22, X21, [X31 + 0x10]
	0x03328CD8 STP X20, X19, [X31 + 0x20]
	0x03328CDC ADRP X21, 0x10B4000
	0x03328CE0 LDRB W8, [X21 + 0xCAF]
	0x03328CE4 MOV X20, X1
	0x03328CE8 MOV X19, X0
	0x03328CEC TBNZ X8, 0x0, 0x3328D1C
	0x03328CF0 ADRP X0, 0xDCC000
	0x03328CF4 LDR X0, [X0 + 0x1C8]
	0x03328CF8 BL 0x1C16CF4
	0x03328CFC ADRP X0, 0xDF3000
	0x03328D00 LDR X0, [X0 + 0xB58]
	0x03328D04 BL 0x1C16CF4
	0x03328D08 ADRP X0, 0xDCB000
	0x03328D0C LDR X0, [X0 + 0xAC8]
	0x03328D10 BL 0x1C16CF4
	0x03328D14 MOVZ W8, 0x1
	0x03328D18 STRB W8, [X21 + 0xCAF]
	0x03328D1C CBZ X20, 0x3328F40
	0x03328D20 MOVZ W1, 0x44
	0x03328D24 MOV X0, X20
	0x03328D28 BL 0x3326250
	0x03328D2C CBZ X0, 0x3328F40
	0x03328D30 LDR X8, [X0 + 0x18]
	0x03328D34 MOV X21, X0
	0x03328D38 CMP W8, 0x1
	0x03328D3C B.LT 0x3328D70
	0x03328D40 MOV X22, X31
	0x03328D44 AND X8, X8, 0x0
	0x03328D48 ADD X23, X21, 0x20
	0x03328D4C CMP X22, W8, UXTW
	0x03328D50 B.CS 0x3328F5C
	0x03328D54 LDR X1, [X23, X22, LSL #3]
	0x03328D58 MOV X0, X19
	0x03328D5C BL 0x332A9EC
	0x03328D60 LDR W8, [X21 + 0x18]
	0x03328D64 ADD X22, X22, 0x1
	0x03328D68 CMP X22, W8, SXTW
	0x03328D6C B.LT 0x3328D4C
	0x03328D70 MOVZ W1, 0x64
	0x03328D74 MOV X0, X20
	0x03328D78 BL 0x3326250
	0x03328D7C CBZ X0, 0x3328F40
	0x03328D80 LDR X8, [X0 + 0x18]
	0x03328D84 MOV X21, X0
	0x03328D88 CMP W8, 0x1
	0x03328D8C B.LT 0x3328DC0
	0x03328D90 MOV X22, X31
	0x03328D94 AND X8, X8, 0x0
	0x03328D98 ADD X23, X21, 0x20
	0x03328D9C CMP X22, W8, UXTW
	0x03328DA0 B.CS 0x3328F5C
	0x03328DA4 LDR X1, [X23, X22, LSL #3]
	0x03328DA8 MOV X0, X19
	0x03328DAC BL 0x332A9EC
	0x03328DB0 LDR W8, [X21 + 0x18]
	0x03328DB4 ADD X22, X22, 0x1
	0x03328DB8 CMP X22, W8, SXTW
	0x03328DBC B.LT 0x3328D9C
	0x03328DC0 MOVZ W1, 0x79
	0x03328DC4 MOV X0, X20
	0x03328DC8 BL 0x3326250
	0x03328DCC CBZ X0, 0x3328F40
	0x03328DD0 LDR X8, [X0 + 0x18]
	0x03328DD4 MOV X21, X0
	0x03328DD8 CMP W8, 0x1
	0x03328DDC B.LT 0x3328E10
	0x03328DE0 MOV X22, X31
	0x03328DE4 AND X8, X8, 0x0
	0x03328DE8 ADD X23, X21, 0x20
	0x03328DEC CMP X22, W8, UXTW
	0x03328DF0 B.CS 0x3328F5C
	0x03328DF4 LDR X1, [X23, X22, LSL #3]
	0x03328DF8 MOV X0, X19
	0x03328DFC BL 0x332A9EC
	0x03328E00 LDR W8, [X21 + 0x18]
	0x03328E04 ADD X22, X22, 0x1
	0x03328E08 CMP X22, W8, SXTW
	0x03328E0C B.LT 0x3328DEC
	0x03328E10 MOV X0, X20
	0x03328E14 BL 0x33255DC
	0x03328E18 MOV X1, X0
	0x03328E1C MOV X0, X19
	0x03328E20 BL 0x332A9EC
	0x03328E24 MOVZ W1, 0x54
	0x03328E28 MOV X0, X20
	0x03328E2C BL 0x3326250
	0x03328E30 CBZ X0, 0x3328F40
	0x03328E34 LDR X8, [X0 + 0x18]
	0x03328E38 MOV X21, X0
	0x03328E3C CMP W8, 0x1
	0x03328E40 B.LT 0x3328E74
	0x03328E44 MOV X22, X31
	0x03328E48 AND X8, X8, 0x0
	0x03328E4C ADD X23, X21, 0x20
	0x03328E50 CMP X22, W8, UXTW
	0x03328E54 B.CS 0x3328F5C
	0x03328E58 LDR X1, [X23, X22, LSL #3]
	0x03328E5C MOV X0, X19
	0x03328E60 BL 0x332A9EC
	0x03328E64 LDR W8, [X21 + 0x18]
	0x03328E68 ADD X22, X22, 0x1
	0x03328E6C CMP X22, W8, SXTW
	0x03328E70 B.LT 0x3328E50
	0x03328E74 MOVZ W1, 0x74
	0x03328E78 MOV X0, X20
	0x03328E7C BL 0x3326250
	0x03328E80 CBZ X0, 0x3328F40
	0x03328E84 LDR X8, [X0 + 0x18]
	0x03328E88 MOV X20, X0
	0x03328E8C CMP W8, 0x1
	0x03328E90 B.LT 0x3328EC4
	0x03328E94 MOV X21, X31
	0x03328E98 AND X8, X8, 0x0
	0x03328E9C ADD X22, X20, 0x20
	0x03328EA0 CMP X21, W8, UXTW
	0x03328EA4 B.CS 0x3328F5C
	0x03328EA8 LDR X1, [X22, X21, LSL #3]
	0x03328EAC MOV X0, X19
	0x03328EB0 BL 0x332A9EC
	0x03328EB4 LDR W8, [X20 + 0x18]
	0x03328EB8 ADD X21, X21, 0x1
	0x03328EBC CMP X21, W8, SXTW
	0x03328EC0 B.LT 0x3328EA0
	0x03328EC4 LDR X8, [X19 + 0x10]
	0x03328EC8 CBZ X8, 0x3328F44
	0x03328ECC LDR W1, [X8 + 0x18]
	0x03328ED0 CMP W1, 0x1
	0x03328ED4 B.LT 0x3328F44
	0x03328ED8 ADRP X8, 0xDCB000
	0x03328EDC LDR X8, [X8 + 0xAC8]
	0x03328EE0 LDR X0, [X8]
	0x03328EE4 BL 0x1C16D6C
	0x03328EE8 LDR X8, [X19 + 0x10]
	0x03328EEC CBZ X8, 0x3328F40
	0x03328EF0 ADRP X23, 0xDF3000
	0x03328EF4 LDR X23, [X23 + 0xB58]
	0x03328EF8 MOV X20, X0
	0x03328EFC MOV X21, X31
	0x03328F00 ADD X22, X0, 0x20
	0x03328F04 LDRSW X9, [X8 + 0x18]
	0x03328F08 CMP X21, X9
	0x03328F0C B.GE 0x3328F48
	0x03328F10 LDR X2, [X23]
	0x03328F14 MOV X0, X8
	0x03328F18 MOV W1, W21
	0x03328F1C BL 0x301BCCC
	0x03328F20 CBZ X20, 0x3328F40
	0x03328F24 LDR W8, [X20 + 0x18]
	0x03328F28 CMP X21, X8
	0x03328F2C B.CS 0x3328F5C
	0x03328F30 STR X0, [X22, X21, LSL #3]
	0x03328F34 LDR X8, [X19 + 0x10]
	0x03328F38 ADD X21, X21, 0x1
	0x03328F3C CBNZ X8, 0x3328F04
	0x03328F40 BL 0x1C16F20
	0x03328F44 MOV X20, X31
	0x03328F48 MOV X0, X20
	0x03328F4C LDP X20, X19, [X31 + 0x20]
	0x03328F50 LDP X22, X21, [X31 + 0x10]
	0x03328F54 LDP X30, X23, [X31], #0x30
	0x03328F58 RET
	0x03328F5C BL 0x1C16F28
	0x03328F60 STP X30, X21, [X31 - 0x20]!
	0x03328F64 STP X20, X19, [X31 + 0x10]
	0x03328F68 ADRP X21, 0x10B4000
	0x03328F6C ADRP X20, 0xDFF000
	0x03328F70 LDRB W8, [X21 + 0xCA2]
	0x03328F74 LDR X20, [X20 + 0x930]
	0x03328F78 MOV X19, X0
	0x03328F7C TBNZ X8, 0x0, 0x3328FAC
	0x03328F80 ADRP X0, 0xDFF000
	0x03328F84 LDR X0, [X0 + 0x930]
	0x03328F88 BL 0x1C16CF4
	0x03328F8C ADRP X0, 0xE00000
	0x03328F90 LDR X0, [X0 + 0x4D8]
	0x03328F94 BL 0x1C16CF4
	0x03328F98 ADRP X0, 0xDCB000
	0x03328F9C LDR X0, [X0 + 0x6C0]
	0x03328FA0 BL 0x1C16CF4
	0x03328FA4 MOVZ W8, 0x1
	0x03328FA8 STRB W8, [X21 + 0xCA2]
	0x03328FAC LDR X0, [X20]
	0x03328FB0 LDR W8, [X0 + 0xE0]
	0x03328FB4 CBNZ W8, 0x3328FBC
	0x03328FB8 BL 0x1C16DFC
	0x03328FBC ADRP X21, 0x10B4000
	0x03328FC0 LDRB W8, [X21 + 0xAFE]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x10B5000
	009 Move W8, [X20+3232]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {65}
	015 Move X0, 0xE01000
	016 Move X0, [X0+808]
	017 Call 0x1C17CF4
	018 Move X0, 0xE00000
	019 Move X0, [X0+2352]
	020 Call 0x1C17CF4
	021 Move X0, 0xE01000
	022 Move X0, [X0+1064]
	023 Call 0x1C17CF4
	024 Move X0, 0xE01000
	025 Move X0, [X0+1072]
	026 Call 0x1C17CF4
	027 Move X0, 0xE01000
	028 Move X0, [X0+1080]
	029 Call 0x1C17CF4
	030 Move X0, 0xE01000
	031 Move X0, [X0+1088]
	032 Call 0x1C17CF4
	033 Move X0, 0xE01000
	034 Move X0, [X0+1096]
	035 Call 0x1C17CF4
	036 Move X0, 0xDCD000
	037 Move X0, [X0+680]
	038 Call 0x1C17CF4
	039 Move X0, 0xDFA000
	040 Move X0, [X0+2744]
	041 Call 0x1C17CF4
	042 Move X0, 0xDF5000
	043 Move X0, [X0+1048]
	044 Call 0x1C17CF4
	045 Move X0, 0xDCD000
	046 Move X0, [X0+3784]
	047 Call 0x1C17CF4
	048 Move X0, 0xDD5000
	049 Move X0, [X0+2440]
	050 Call 0x1C17CF4
	051 Move X0, 0xE01000
	052 Move X0, [X0+1104]
	053 Call 0x1C17CF4
	054 Move X0, 0xE01000
	055 Move X0, [X0+1112]
	056 Call 0x1C17CF4
	057 Move X0, 0xDCE000
	058 Move X0, [X0+928]
	059 Call 0x1C17CF4
	060 Move X0, 0xDD5000
	061 Move X0, [X0+1936]
	062 Call 0x1C17CF4
	063 Move W8, 1
	064 Move [X20+3232], W8
	065 Move X20, [X19+344]
	066 Compare X20, 0
	067 JumpIfNotEqual {633}
	068 Move X8, 0xE01000
	069 Move X8, [X8+1064]
	070 Move W1, 199
	071 Move X0, [X8]
	072 Call 0x1C17D6C
	073 Move X22, 0xE00000
	074 Move X22, [X22+2352]
	075 Move X20, X0
	076 Move X8, [X22]
	077 Move W9, [X8+224]
	078 Compare W9, 0
	079 JumpIfNotEqual {82}
	080 Move X0, X8
	081 Call 0x1C17DFC
	082 Move X23, 0x10B5000
	083 Move W8, [X23+2814]
	084 Compare W8, 0
	085 JumpIfNotEqual {91}
	086 Move X0, 0xE00000
	087 Move X0, [X0+2352]
	088 Call 0x1C17CF4
	089 Move W8, 1
	090 Move [X23+2814], W8
	091 Move X0, [X22]
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {97}
	095 Call 0x1C17DFC
	096 Move X0, [X22]
	097 Move X8, [X0+184]
	098 Move W8, [X8]
	099 Compare W8, 0
	100 JumpIfNotEqual {116}
	101 Move X0, [X19+32]
	102 Compare X0, 0
	103 JumpIfNotEqual {111}
	104 Move X8, [X19+16]
	105 Compare X8, 0
	106 JumpIfEqual {591}
	107 Move X0, [X8+80]
	108 Move [X19+32], X0
	109 Compare X0, 0
	110 JumpIfEqual {591}
	111 Move X8, 0xDFA000
	112 Move X8, [X8+2744]
	113 Move X2, X31
	114 Move X1, [X8]
	115 Call String.Equals, X0, X1
	116 Move X0, [X19+96]
	117 Compare X0, 0
	118 JumpIfNotEqual {126}
	119 Move X8, [X19+16]
	120 Compare X8, 0
	121 JumpIfEqual {591}
	122 Move X0, [X8+32]
	123 Move [X19+96], X0
	124 Compare X0, 0
	125 JumpIfEqual {591}
	126 Move X1, X31
	127 Call String.Trim, X0
	128 Move X24, 0xDCE000
	129 Move X24, [X24+928]
	130 Move X21, X0
	131 Move X1, X21
	132 Move X2, X31
	133 Move X8, [X24]
	134 Move X0, X8
	135 Call String.op_Inequality, X0, X1
	136 Move TEMP, X0
	137 And TEMP, TEMP, 1
	138 Compare TEMP, 1
	139 JumpIfNotEqual {146}
	140 Move X2, [X24]
	141 Move W3, 15
	142 Move X0, X19
	143 Move X1, X20
	144 Move W4, W31
	145 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	146 Move X24, 0xDD5000
	147 Move X24, [X24+1936]
	148 Move X1, X21
	149 Move X2, X31
	150 Move X0, [X24]
	151 Call String.op_Inequality, X0, X1
	152 Move TEMP, X0
	153 And TEMP, TEMP, 1
	154 Compare TEMP, 1
	155 JumpIfNotEqual {162}
	156 Move X2, [X24]
	157 Move W3, 15
	158 Move X0, X19
	159 Move X1, X20
	160 Move W4, W31
	161 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	162 Move X0, [X22]
	163 Move W8, [X0+224]
	164 Compare W8, 0
	165 JumpIfNotEqual {167}
	166 Call 0x1C17DFC
	167 Move W8, [X23+2814]
	168 Compare W8, 0
	169 JumpIfNotEqual {175}
	170 Move X0, 0xE00000
	171 Move X0, [X0+2352]
	172 Call 0x1C17CF4
	173 Move W8, 1
	174 Move [X23+2814], W8
	175 Move X0, [X22]
	176 Move W8, [X0+224]
	177 Compare W8, 0
	178 JumpIfNotEqual {181}
	179 Call 0x1C17DFC
	180 Move X0, [X22]
	181 Move X8, [X0+184]
	182 Move W8, [X8]
	183 Compare W8, 0
	184 JumpIfNotEqual {228}
	185 Move X8, 0xE01000
	186 Move X8, [X8+1096]
	187 Move X1, X21
	188 Move X2, X31
	189 Move X0, [X8]
	190 Call String.op_Inequality, X0, X1
	191 Move TEMP, X0
	192 And TEMP, TEMP, 1
	193 Compare TEMP, 1
	194 JumpIfNotEqual {228}
	195 Move X8, 0xE01000
	196 Move X8, [X8+1104]
	197 Move X1, X21
	198 Move X2, X31
	199 Move X0, [X8]
	200 Call String.op_Inequality, X0, X1
	201 Move TEMP, X0
	202 And TEMP, TEMP, 1
	203 Compare TEMP, 1
	204 JumpIfNotEqual {228}
	205 Move X8, 0xE01000
	206 Move X8, [X8+1072]
	207 Move X1, X21
	208 Move X2, X31
	209 Move X0, [X8]
	210 Call String.op_Inequality, X0, X1
	211 Move TEMP, X0
	212 And TEMP, TEMP, 1
	213 Compare TEMP, 1
	214 JumpIfNotEqual {228}
	215 Move X2, [X19+96]
	216 Compare X2, 0
	217 JumpIfNotEqual {223}
	218 Move X8, [X19+16]
	219 Compare X8, 0
	220 JumpIfEqual {591}
	221 Move X2, [X8+32]
	222 Move [X19+96], X2
	223 Move W3, 1792
	224 Move X0, X19
	225 Move X1, X20
	226 Move W4, W31
	227 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	228 Move X2, [X19+56]
	229 Compare X2, 0
	230 JumpIfNotEqual {236}
	231 Move X8, [X19+16]
	232 Compare X8, 0
	233 JumpIfEqual {591}
	234 Move X2, [X8+16]
	235 Move [X19+56], X2
	236 Move W3, 1027
	237 Move X0, X19
	238 Move X1, X20
	239 Move W4, W31
	240 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	241 Move X2, [X19+64]
	242 Compare X2, 0
	243 JumpIfNotEqual {249}
	244 Move X8, [X19+16]
	245 Compare X8, 0
	246 JumpIfEqual {591}
	247 Move X2, [X8+24]
	248 Move [X19+64], X2
	249 Move W3, 1284
	250 Move W4, 1
	251 Move X0, X19
	252 Move X1, X20
	253 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	254 Move X0, [X22]
	255 Move [X31+12], W31
	256 Move W8, [X0+224]
	257 Compare W8, 0
	258 JumpIfNotEqual {260}
	259 Call 0x1C17DFC
	260 Move W8, [X23+2814]
	261 Compare W8, 0
	262 JumpIfNotEqual {268}
	263 Move X0, 0xE00000
	264 Move X0, [X0+2352]
	265 Call 0x1C17CF4
	266 Move W8, 1
	267 Move [X23+2814], W8
	268 Move X0, [X22]
	269 Move W8, [X0+224]
	270 Compare W8, 0
	271 JumpIfNotEqual {274}
	272 Call 0x1C17DFC
	273 Move X0, [X22]
	274 Move X8, [X0+184]
	275 Move W8, [X8]
	276 Compare W8, 0
	277 JumpIfNotEqual {283}
	278 Add X2, X31, 12
	279 Move X0, X19
	280 Move X1, X20
	281 Call DateTimeFormatInfo.PopulateSpecialTokenHashTable, X0, X1, X2
	282 Move X0, [X22]
	283 Move W8, [X0+224]
	284 Compare W8, 0
	285 JumpIfNotEqual {287}
	286 Call 0x1C17DFC
	287 Move W8, [X23+2814]
	288 Compare W8, 0
	289 JumpIfNotEqual {295}
	290 Move X0, 0xE00000
	291 Move X0, [X0+2352]
	292 Call 0x1C17CF4
	293 Move W8, 1
	294 Move [X23+2814], W8
	295 Move X0, [X22]
	296 Move W8, [X0+224]
	297 Compare W8, 0
	298 JumpIfNotEqual {301}
	299 Call 0x1C17DFC
	300 Move X0, [X22]
	301 Move X8, [X0+184]
	302 Move W8, [X8]
	303 Compare W8, 0
	304 JumpIfNotEqual {325}
	305 Move X0, [X19+32]
	306 Compare X0, 0
	307 JumpIfNotEqual {315}
	308 Move X8, [X19+16]
	309 Compare X8, 0
	310 JumpIfEqual {591}
	311 Move X0, [X8+80]
	312 Move [X19+32], X0
	313 Compare X0, 0
	314 JumpIfEqual {591}
	315 Move X8, 0xE01000
	316 Move X8, [X8+1080]
	317 Move X2, X31
	318 Move X1, [X8]
	319 Call String.Equals, X0, X1
	320 Move TEMP, X0
	321 And TEMP, TEMP, 1
	322 Compare TEMP, 1
	323 JumpIfNotEqual {325}
	324 Move W3, 15
	325 Move W3, 3840
	326 Move X8, 0xDCD000
	327 Move X8, [X8+680]
	328 Move X0, X19
	329 Move X1, X20
	330 Move W4, W31
	331 Move X2, [X8]
	332 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	333 Move W8, [X31+12]
	334 Compare W8, 0
	335 JumpIfNotEqual {344}
	336 Move X0, X19
	337 Call DateTimeFormatInfo.get_DateSeparator, X0
	338 Move X2, X0
	339 Move W3, 1536
	340 Move X0, X19
	341 Move X1, X20
	342 Move W4, W31
	343 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	344 Move X0, X19
	345 Move X1, X20
	346 Move X2, X31
	347 Call DateTimeFormatInfo.AddMonthNames, X0, X1, X2
	348 Move W21, 1
	349 Move X0, X19
	350 Move W1, W21
	351 Call DateTimeFormatInfo.GetAbbreviatedMonthName, X0, X1
	352 Move X2, X0
	353 Move W3, 5
	354 Move X0, X19
	355 Move X1, X20
	356 Move W4, W21
	357 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	358 Add W21, W21, 1
	359 NotImplemented "Instruction CMP not yet implemented."
	360 Move W0, [X19+324]
	361 Add W31, W0, 1
	362 Move TEMP, X0
	363 And TEMP, TEMP, 1
	364 Compare TEMP, 1
	365 JumpIfEqual {372}
	366 Move X0, X19
	367 Call DateTimeFormatInfo.InitializeFormatFlags, X0
	368 Move TEMP, X0
	369 And TEMP, TEMP, 1
	370 Compare TEMP, 1
	371 JumpIfNotEqual {386}
	372 Move W21, 1
	373 Move W2, 1
	374 Move X0, X19
	375 Move W1, W21
	376 Move W3, W31
	377 Call DateTimeFormatInfo.internalGetMonthName, X0, X1, X2, X3
	378 Move X2, X0
	379 Move W3, 5
	380 Move X0, X19
	381 Move X1, X20
	382 Move W4, W21
	383 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	384 Add W21, W21, 1
	385 NotImplemented "Instruction CMP not yet implemented."
	386 Move W0, [X19+324]
	387 Add W31, W0, 1
	388 Move TEMP, X0
	389 And TEMP, TEMP, 2
	390 Compare TEMP, 2
	391 JumpIfEqual {398}
	392 Move X0, X19
	393 Call DateTimeFormatInfo.InitializeFormatFlags, X0
	394 Move TEMP, X0
	395 And TEMP, TEMP, 2
	396 Compare TEMP, 2
	397 JumpIfNotEqual {412}
	398 Move W21, 1
	399 Move W2, 2
	400 Move X0, X19
	401 Move W1, W21
	402 Move W3, W31
	403 Call DateTimeFormatInfo.internalGetMonthName, X0, X1, X2, X3
	404 Move X2, X0
	405 Move W3, 5
	406 Move X0, X19
	407 Move X1, X20
	408 Move W4, W21
	409 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	410 Add W21, W21, 1
	411 NotImplemented "Instruction CMP not yet implemented."
	412 Move W21, W31
	413 Move X0, X19
	414 Move W1, W21
	415 Call DateTimeFormatInfo.GetDayName, X0, X1
	416 Move X2, X0
	417 Move W3, 7
	418 Move X0, X19
	419 Move X1, X20
	420 Move W4, W21
	421 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	422 Move X0, X19
	423 Move W1, W21
	424 Call DateTimeFormatInfo.GetAbbreviatedDayName, X0, X1
	425 Move X2, X0
	426 Move W3, 7
	427 Move X0, X19
	428 Move X1, X20
	429 Move W4, W21
	430 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	431 Add W21, W21, 1
	432 NotImplemented "Instruction CMP not yet implemented."
	433 Move X0, [X19+120]
	434 Compare X0, 0
	435 JumpIfEqual {591}
	436 Move X8, [X0]
	437 Move X9, [X8+568]
	438 Move X1, [X8+576]
	439 NotImplemented "Instruction BLR not yet implemented."
	440 Compare X0, 0
	441 JumpIfEqual {591}
	442 Move W8, [X0+24]
	443 Move X21, X0
	444 NotImplemented "Instruction CMP not yet implemented."
	445 Move W22, 1
	446 Move X0, X19
	447 Move W1, W22
	448 Call DateTimeFormatInfo.GetEraName, X0, X1
	449 Move X2, X0
	450 Move W3, 9
	451 Move X0, X19
	452 Move X1, X20
	453 Move W4, W22
	454 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	455 Move X0, X19
	456 Move W1, W22
	457 Call DateTimeFormatInfo.GetAbbreviatedEraName, X0, X1
	458 Move X2, X0
	459 Move W3, 9
	460 Move X0, X19
	461 Move X1, X20
	462 Move W4, W22
	463 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	464 Move W8, [X21+24]
	465 Add W22, W22, 1
	466 NotImplemented "Instruction CMP not yet implemented."
	467 Move X22, 0xE01000
	468 Move X22, [X22+808]
	469 Move X0, [X22]
	470 Move W8, [X0+224]
	471 Compare W8, 0
	472 JumpIfNotEqual {474}
	473 Call 0x1C17DFC
	474 Call DateTimeFormatInfo.get_InvariantInfo
	475 Compare X0, 0
	476 JumpIfEqual {591}
	477 Move X2, [X0+56]
	478 Compare X2, 0
	479 JumpIfNotEqual {485}
	480 Move X8, [X0+16]
	481 Compare X8, 0
	482 JumpIfEqual {591}
	483 Move X2, [X8+16]
	484 Move [X0+56], X2
	485 Move W3, 1027
	486 Move X0, X19
	487 Move X1, X20
	488 Move W4, W31
	489 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	490 Call DateTimeFormatInfo.get_InvariantInfo
	491 Compare X0, 0
	492 JumpIfEqual {591}
	493 Move X2, [X0+64]
	494 Compare X2, 0
	495 JumpIfNotEqual {501}
	496 Move X8, [X0+16]
	497 Compare X8, 0
	498 JumpIfEqual {591}
	499 Move X2, [X8+24]
	500 Move [X0+64], X2
	501 Move W3, 1284
	502 Move W4, 1
	503 Move X0, X19
	504 Move X1, X20
	505 Move W21, 1
	506 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	507 Move X0, [X22]
	508 Move W8, [X0+224]
	509 Compare W8, 0
	510 JumpIfNotEqual {512}
	511 Call 0x1C17DFC
	512 Call DateTimeFormatInfo.get_InvariantInfo
	513 Compare X0, 0
	514 JumpIfEqual {591}
	515 Move W1, W21
	516 Call DateTimeFormatInfo.GetMonthName, X0, X1
	517 Move X2, X0
	518 Move W3, 5
	519 Move X0, X19
	520 Move X1, X20
	521 Move W4, W21
	522 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	523 Call DateTimeFormatInfo.get_InvariantInfo
	524 Compare X0, 0
	525 JumpIfEqual {591}
	526 Move W1, W21
	527 Call DateTimeFormatInfo.GetAbbreviatedMonthName, X0, X1
	528 Move X2, X0
	529 Move W3, 5
	530 Move X0, X19
	531 Move X1, X20
	532 Move W4, W21
	533 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	534 Add W21, W21, 1
	535 NotImplemented "Instruction CMP not yet implemented."
	536 Move W21, W31
	537 Move X0, [X22]
	538 Move W8, [X0+224]
	539 Compare W8, 0
	540 JumpIfNotEqual {542}
	541 Call 0x1C17DFC
	542 Call DateTimeFormatInfo.get_InvariantInfo
	543 Compare X0, 0
	544 JumpIfEqual {591}
	545 Move W1, W21
	546 Call DateTimeFormatInfo.GetDayName, X0, X1
	547 Move X2, X0
	548 Move W3, 7
	549 Move X0, X19
	550 Move X1, X20
	551 Move W4, W21
	552 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	553 Call DateTimeFormatInfo.get_InvariantInfo
	554 Compare X0, 0
	555 JumpIfEqual {591}
	556 Move W1, W21
	557 Call DateTimeFormatInfo.GetAbbreviatedDayName, X0, X1
	558 Move X2, X0
	559 Move W3, 7
	560 Move X0, X19
	561 Move X1, X20
	562 Move W4, W21
	563 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	564 Add W21, W21, 1
	565 NotImplemented "Instruction CMP not yet implemented."
	566 Move X0, X19
	567 Call DateTimeFormatInfo.get_AbbreviatedEnglishEraNames, X0
	568 Compare X0, 0
	569 JumpIfEqual {591}
	570 Move X21, X31
	571 NotImplemented "Instruction LDRSW not yet implemented."
	572 NotImplemented "Instruction CMP not yet implemented."
	573 Move X0, X19
	574 Call DateTimeFormatInfo.get_AbbreviatedEnglishEraNames, X0
	575 Compare X0, 0
	576 JumpIfEqual {591}
	577 Move W8, [X0+24]
	578 NotImplemented "Instruction CMP not yet implemented."
	579 Add X8, X0, X21
	580 Move X2, [X8+32]
	581 Add X21, X21, 1
	582 Move W3, 9
	583 Move X0, X19
	584 Move X1, X20
	585 Move W4, W21
	586 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	587 Move X0, X19
	588 Call DateTimeFormatInfo.get_AbbreviatedEnglishEraNames, X0
	589 Compare X0, 0
	590 JumpIfNotEqual {571}
	591 Call 0x1C17F20
	592 Move X8, 0xDF5000
	593 Move X8, [X8+1048]
	594 Move W3, 3584
	595 Move X0, X19
	596 Move X1, X20
	597 Move X2, [X8]
	598 Move W4, W31
	599 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	600 Move X8, 0xE01000
	601 Move X8, [X8+1112]
	602 Move W3, 8
	603 Move X0, X19
	604 Move X1, X20
	605 Move X2, [X8]
	606 Move W4, W31
	607 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	608 Move X8, 0xE01000
	609 Move X8, [X8+1088]
	610 Move W3, 8
	611 Move X0, X19
	612 Move X1, X20
	613 Move X2, [X8]
	614 Move W4, W31
	615 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	616 Move X8, 0xDCD000
	617 Move X8, [X8+3784]
	618 Move W3, 1536
	619 Move X0, X19
	620 Move X1, X20
	621 Move X2, [X8]
	622 Move W4, W31
	623 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	624 Move X8, 0xDD5000
	625 Move X8, [X8+2440]
	626 Move W3, 1792
	627 Move X0, X19
	628 Move X1, X20
	629 Move X2, [X8]
	630 Move W4, W31
	631 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	632 Move [X19+344], X20
	633 Move X0, X20
	634 Move X20, [X31+48]
	635 Move X19, [X31+56]
	636 Move X22, [X31+32]
	637 Move X21, [X31+40]
	638 Move X24, [X31+16]
	639 Move X23, [X31+24]
	640 Move X30, [X31+64]
	641 Return X0
	642 Call 0x1C17F28

Method: System.Void PopulateSpecialTokenHashTable(System.Globalization.DateTimeFormatInfo/TokenHashValue[] temp, ref System.Boolean useDateSepAsIgnorableSymbol)

Disassembly:
	0x033292BC LDP X30, X21, [X31], #0x20
	0x033292C0 RET
	0x033292C4 BL 0x1C16F20
	0x033292C8 BL 0x1C16F28
	0x033292CC STRB W31, [X0]
	0x033292D0 STR W1, [X0 + 0x4]
	0x033292D4 RET
	0x033292D8 STP X30, X23, [X31 - 0x30]!
	0x033292DC STP X22, X21, [X31 + 0x10]
	0x033292E0 STP X20, X19, [X31 + 0x20]
	0x033292E4 ADRP X21, 0x10B3000
	0x033292E8 LDRB W8, [X21 + 0xCB3]
	0x033292EC MOV X19, X1
	0x033292F0 MOV W20, W0
	0x033292F4 TBNZ X8, 0x0, 0x332930C
	0x033292F8 ADRP X0, 0xDFF000
	0x033292FC LDR X0, [X0 + 0x4E8]
	0x03329300 BL 0x1C16CF4
	0x03329304 MOVZ W8, 0x1
	0x03329308 STRB W8, [X21 + 0xCB3]
	0x0332930C ADRP X21, 0xDFF000
	0x03329310 LDR X21, [X21 + 0x4E8]
	0x03329314 AND W8, W20, 0xFFFF
	0x03329318 CMP W8, 0x22
	0x0332931C B.EQ 0x3329330
	0x03329320 CMP W8, 0x27
	0x03329324 B.NE 0x3329394
	0x03329328 MOVZ W20, 0x8
	0x0332932C B 0x3329334
	0x03329330 MOVZ W20, 0x9
	0x03329334 LDR X0, [X21]
	0x03329338 LDR W8, [X0 + 0xE0]
	0x0332933C CBNZ W8, 0x3329348
	0x03329340 BL 0x1C16DFC
	0x03329344 LDR X0, [X21]
	0x03329348 LDR X8, [X0 + 0xB8]
	0x0332934C LDR X8, [X8 + 0x10]
	0x03329350 CBZ X8, 0x3329468
	0x00000000 INVALID
	0x03329358 LDR W10, [X8 + 0x18]
	0x0332935C MOVZ W11, 0xA
	0x03329360 MUL X9, X9, X11
	0x03329364 ADD X9, X9, W20, SXTW
	0x03329368 CMP W9, W10
	0x0332936C B.CS 0x332946C
	0x03329370 ADD X8, X8, X9
	0x03329374 LDRB W8, [X8 + 0x20]
	0x03329378 CMP W8, 0xFF
	0x0332937C STRB W8, [X19]
	0x03329380 B.EQ 0x3329454
	0x03329384 CMP W8, 0x64
	0x03329388 MOVZ W8, 0x2
	0x0332938C CINC W0, W8, NE
	0x03329390 B 0x3329458
	0x03329394 AND W8, W20, 0xFFFF
	0x03329398 CMP W8, 0x5D0
	0x0332939C B.CC 0x332944C
	0x033293A0 LDR X0, [X21]
	0x033293A4 LDR W8, [X0 + 0xE0]
	0x033293A8 CBNZ W8, 0x33293B4
	0x033293AC BL 0x1C16DFC
	0x033293B0 LDR X0, [X21]
	0x033293B4 LDR X8, [X0 + 0xB8]
	0x033293B8 LDR X8, [X8]
	0x033293BC CBZ X8, 0x3329468
	0x033293C0 LDR W9, [X8 + 0x18]
	0x033293C4 AND X10, X20, 0xFFFF
	0x033293C8 SUB X22, X10, 0x5D0
	0x033293CC CMP W22, W9
	0x033293D0 B.GE 0x332944C
	0x033293D4 LDR W9, [X0 + 0xE0]
	0x033293D8 CBNZ W9, 0x33293F0
	0x033293DC BL 0x1C16DFC
	0x033293E0 LDR X0, [X21]
	0x033293E4 LDR X8, [X0 + 0xB8]
	0x033293E8 LDR X8, [X8]
	0x033293EC CBZ X8, 0x3329468
	0x033293F0 LDR W9, [X8 + 0x18]
	0x033293F4 CMP W22, W9
	0x033293F8 B.CS 0x332946C
	0x033293FC ADD X9, X8, X22, 0x2, LSL
	0x03329400 LDRSH W20, [X9 + 0x20]
	0x03329404 ADDS W31, W20, 0x1
	0x03329408 B.EQ 0x332944C
	0x0332940C LDR W9, [X0 + 0xE0]
	0x03329410 LDR W23, [X19 + 0x4]
	0x03329414 CBNZ W9, 0x332942C
	0x03329418 BL 0x1C16DFC
	0x0332941C LDR X8, [X21]
	0x03329420 LDR X8, [X8 + 0xB8]
	0x03329424 LDR X8, [X8]
	0x03329428 CBZ X8, 0x3329468
	0x0332942C LDR W9, [X8 + 0x18]
	0x03329430 CMP W22, W9
	0x03329434 B.CS 0x332946C
	0x03329438 ADD X8, X8, X22, 0x2, LSL
	0x0332943C LDRSH W8, [X8 + 0x22]
	0x03329440 ADD W8, W23, W8
	0x03329444 STR W8, [X19 + 0x4]
	0x03329448 B 0x3329334
	0x0332944C MOVZ W0, 0x1
	0x03329450 B 0x3329458
	0x03329454 MOV W0, W31
	0x03329458 LDP X20, X19, [X31 + 0x20]
	0x0332945C LDP X22, X21, [X31 + 0x10]
	0x03329460 LDP X30, X23, [X31], #0x30
	0x03329464 RET
	0x03329468 BL 0x1C16F20
	0x0332946C BL 0x1C16F28
	0x03329470 SUB W8, W0, 0x590
	0x03329474 AND W8, W8, 0xFFFF
	0x03329478 CMP W8, 0x70
	0x0332947C CSET W0, CC
	0x03329480 RET
	0x03329484 STP X30, X23, [X31 - 0x30]!
	0x03329488 STP X22, X21, [X31 + 0x10]
	0x0332948C STP X20, X19, [X31 + 0x20]
	0x03329490 ADRP X22, 0x10B3000
	0x03329494 ADRP X23, 0xDFA000
	0x03329498 LDRB W8, [X22 + 0xCA4]
	0x0332949C LDR X23, [X23 + 0xB60]
	0x033294A0 MOV W19, W2
	0x033294A4 MOV X20, X1
	0x033294A8 MOV X21, X0
	0x033294AC TBNZ X8, 0x0, 0x33294DC
	0x033294B0 ADRP X0, 0xDFA000
	0x033294B4 LDR X0, [X0 + 0xB60]
	0x033294B8 BL 0x1C16CF4
	0x033294BC ADRP X0, 0xDFF000
	0x033294C0 LDR X0, [X0 + 0x4C8]
	0x033294C4 BL 0x1C16CF4
	0x033294C8 ADRP X0, 0xDFF000
	0x033294CC LDR X0, [X0 + 0x4D0]
	0x033294D0 BL 0x1C16CF4
	0x033294D4 MOVZ W8, 0x1
	0x033294D8 STRB W8, [X22 + 0xCA4]
	0x033294DC LDR X8, [X23]
	0x033294E0 LDR X8, [X8 + 0xB8]
	0x033294E4 LDRB W8, [X8 + 0x3]
	0x033294E8 CBNZ W8, 0x3329574
	0x033294EC LDR X0, [X21 + 0x78]
	0x033294F0 CBZ X0, 0x3329588
	0x033294F4 LDR X8, [X0]
	0x033294F8 LDP X9, X1, [X8 + 0x1A8]
	0x033294FC BLR X9
	0x03329500 CMP W0, 0x3
	0x03329504 B.NE 0x3329574
	0x03329508 ADRP X21, 0xDFF000
	0x0332950C LDR X21, [X21 + 0x4C8]
	0x03329510 LDR X0, [X21]
	0x03329514 CBZ X0, 0x3329588
	0x03329518 MOV W1, W31
	0x0332951C MOV X2, X31
	0x03329520 BL 0x3222A1C
	0x03329524 AND W8, W0, 0xFFFF
	0x03329528 CMP W8, W19, UXTH
	0x0332952C B.NE 0x3329538
	0x03329530 MOVZ W0, 0x1
	0x03329534 B 0x3329578
	0x03329538 LDR X1, [X21]
	0x0332953C MOV X0, X20
	0x03329540 MOV X2, X31
	0x03329544 BL 0x321BA08
	0x03329548 TBZ X0, 0x0, 0x3329574
	0x0332954C ADRP X8, 0xDFF000
	0x03329550 LDR X8, [X8 + 0x4D0]
	0x03329554 LDR X0, [X8]
	0x03329558 CBZ X0, 0x3329588
	0x0332955C MOV W1, W31
	0x03329560 MOV X2, X31
	0x03329564 BL 0x3222A1C
	0x03329568 AND W8, W0, 0xFFFF
	0x0332956C CMP W8, W19, UXTH
	0x03329570 B.EQ 0x3329530
	0x03329574 MOV W0, W31
	0x03329578 LDP X20, X19, [X31 + 0x20]
	0x0332957C LDP X22, X21, [X31 + 0x10]
	0x03329580 LDP X30, X23, [X31], #0x30
	0x03329584 RET
	0x03329588 BL 0x1C16F20
	0x0332958C SUB X31, X31, 0x90
	0x03329590 STP X29, X30, [X31 + 0x30]
	0x03329594 STP X28, X27, [X31 + 0x40]
	0x03329598 STP X26, X25, [X31 + 0x50]
	0x0332959C STP X24, X23, [X31 + 0x60]
	0x033295A0 STP X22, X21, [X31 + 0x70]
	0x033295A4 STP X20, X19, [X31 + 0x80]
	0x033295A8 STR X0, [X31 + 0x20]
	0x033295AC ADRP X20, 0x10B3000
	0x033295B0 ADRP X21, 0xDCC000
	0x033295B4 LDRB W8, [X20 + 0xCA5]
	0x033295B8 LDR X21, [X21 + 0x170]
	0x033295BC MOV X19, X4
	0x033295C0 MOV X23, X3
	0x033295C4 MOV X22, X2
	0x033295C8 MOV W24, W1
	0x033295CC TBNZ X8, 0x0, 0x3329614
	0x033295D0 ADRP X0, 0xDCC000
	0x033295D4 LDR X0, [X0 + 0x170]
	0x033295D8 BL 0x1C16CF4
	0x033295DC ADRP X0, 0xDFF000
	0x033295E0 LDR X0, [X0 + 0x328]
	0x033295E4 BL 0x1C16CF4
	0x033295E8 ADRP X0, 0xDFE000
	0x033295EC LDR X0, [X0 + 0x930]
	0x033295F0 BL 0x1C16CF4
	0x033295F4 ADRP X0, 0xDFD000
	0x033295F8 LDR X0, [X0 + 0xD90]
	0x033295FC BL 0x1C16CF4
	0x03329600 ADRP X0, 0xDFF000
	0x03329604 LDR X0, [X0 + 0x4F0]
	0x03329608 BL 0x1C16CF4
	0x0332960C MOVZ W8, 0x1
	0x03329610 STRB W8, [X20 + 0xCA5]
	0x03329614 MOVZ W8, 0xB
	0x03329618 STRB W31, [X31 + 0x2C]
	0x0332961C STR W31, [X31 + 0x28]
	0x03329620 STR W8, [X22]
	0x03329624 STR W31, [X23]
	0x03329628 LDR X0, [X21]
	0x0332962C LDRH W26, [X19 + 0x14]
	0x03329630 LDR W8, [X0 + 0xE0]
	0x03329634 CBNZ W8, 0x332963C
	0x03329638 BL 0x1C16DFC
	0x0332963C MOV W0, W26
	0x03329640 MOV X1, X31
	0x03329644 BL 0x331A888
	0x03329648 STR W0, [X31 + 0x1C]
	0x0332964C TBZ X0, 0x0, 0x33296DC
	0x03329650 LDR X0, [X31 + 0x20]
	0x03329654 BL 0x3324360
	0x03329658 CBZ X0, 0x3329B20
	0x0332965C LDR X8, [X0]
	0x03329660 LDP X9, X1, [X8 + 0x1D8]
	0x03329664 BLR X9
	0x03329668 CBZ X0, 0x3329B20
	0x0332966C LDR X8, [X0]
	0x03329670 MOV W1, W26
	0x03329674 LDP X9, X2, [X8 + 0x1A8]
	0x03329678 BLR X9
	0x0332967C ADRP X20, 0xDFE000
	0x03329680 LDR X20, [X20 + 0x930]
	0x03329684 MOV W26, W0
	0x03329688 LDR X8, [X20]
	0x0332968C LDR W9, [X8 + 0xE0]
	0x03329690 CBNZ W9, 0x332969C
	0x03329694 MOV X0, X8
	0x03329698 BL 0x1C16DFC
	0x0332969C ADRP X21, 0x10B3000
	0x033296A0 LDRB W8, [X21 + 0xAFE]
	0x033296A4 CBNZ W8, 0x33296BC
	0x033296A8 ADRP X0, 0xDFE000
	0x033296AC LDR X0, [X0 + 0x930]
	0x033296B0 BL 0x1C16CF4
	0x033296B4 MOVZ W8, 0x1
	0x033296B8 STRB W8, [X21 + 0xAFE]
	0x033296BC LDR X0, [X20]
	0x033296C0 LDR W8, [X0 + 0xE0]
	0x033296C4 CBNZ W8, 0x33296D0
	0x033296C8 BL 0x1C16DFC
	0x033296CC LDR X0, [X20]
	0x033296D0 LDR X8, [X0 + 0xB8]
	0x033296D4 LDRB W8, [X8]
	0x033296D8 CBZ W8, 0x33299FC
	0x033296DC STR W24, [X31 + 0x18]
	0x033296E0 ADRP X8, 0xDFF000
	0x033296E4 LDR X8, [X8 + 0x4F0]
	0x033296E8 LDR X0, [X8]
	0x033296EC LDR W8, [X0 + 0xE0]
	0x033296F0 CBNZ W8, 0x33296F8
	0x033296F4 BL 0x1C16DFC
	0x033296F8 MOV X0, X19
	0x033296FC MOV X1, X31
	0x03329700 STP X23, X22, [X31 + 0x8]
	0x03329704 BL 0x33748E0
	0x03329708 LDR X8, [X31 + 0x20]
	0x0332970C LDR W20, [X19 + 0x10]
	0x03329710 MOV W27, W0
	0x03329714 LDR X25, [X8 + 0x158]
	0x03329718 CBNZ X25, 0x332972C
	0x0332971C LDR X0, [X31 + 0x20]
	0x03329720 BL 0x33276E8
	0x03329724 MOV X25, X0
	0x03329728 CBZ X0, 0x3329B20
	0x0332972C MOVZ W9, 0x8873
	0x03329730 MOVZ W10, 0xE78F
	0x03329734 AND W8, W26, 0xFFFF
	0x03329738 MOVK W9, 0x4CAB0000
	0x0332973C MOVK W10, 0x52540000
	0x03329740 UMADDL X9, X8, X9, X31
	0x03329744 UMADDL X10, X8, X10, X31
	0x03329748 MOVZ W11, 0xC7
	0x0332974C UBFM X9, X9, 0x20, 0x3F
	0x03329750 UBFM X10, X10, 0x26, 0x3F
	0x03329754 MSUB W21, W10, W11, W8
	0x03329758 SUB W10, W8, W9
	0x0332975C SUB W28, W27, W20
	0x03329760 ADD W9, W9, W10, 0x1, LSR
	0x03329764 LDR W27, [X31 + 0x18]
	0x03329768 MOVZ W12, 0xC5
	0x0332976C UBFM W9, W9, 0x7, 0x1F
	0x03329770 MSUB W8, W9, W12, W8
	0x03329774 ADD W20, W8, 0x1
	0x03329778 MOVZ W29, 0xC7
	0x0332977C LDR W8, [X25 + 0x18]
	0x03329780 CMP W21, W8
	0x03329784 B.CS 0x3329B24
	0x03329788 ADD X8, X25, W21, 0x3, SXTW
	0x0332978C LDR X24, [X8 + 0x20]
	0x03329790 CBZ X24, 0x33299F4
	0x03329794 LDR W8, [X24 + 0x18]
	0x03329798 AND W8, W8, W27, 0x0
	0x0332979C CMP W8, 0x1
	0x033297A0 B.LT 0x33299E0
	0x033297A4 LDR X8, [X24 + 0x10]
	0x033297A8 CBZ X8, 0x3329B20
	0x033297AC LDR W23, [X8 + 0x10]
	0x033297B0 CMP W23, W28
	0x033297B4 B.GT 0x33299E0
	0x033297B8 LDR W8, [X31 + 0x1C]
	0x033297BC TBZ X8, 0x0, 0x3329874
	0x033297C0 ADRP X8, 0xDFF000
	0x033297C4 LDR X8, [X8 + 0x4F0]
	0x033297C8 LDR W22, [X19 + 0x10]
	0x033297CC LDR X0, [X8]
	0x033297D0 LDR W8, [X0 + 0xE0]
	0x033297D4 CBNZ W8, 0x33297DC
	0x033297D8 BL 0x1C16DFC
	0x033297DC MOV X0, X19
	0x033297E0 MOV X1, X31
	0x033297E4 ADD W26, W22, W23
	0x033297E8 BL 0x33748E0
	0x033297EC CMP W26, W0
	0x033297F0 B.GT 0x3329944
	0x033297F4 ADRP X8, 0xDFF000
	0x033297F8 LDR X8, [X8 + 0x4F0]
	0x033297FC LDR X0, [X8]
	0x03329800 LDR W8, [X0 + 0xE0]
	0x03329804 CBNZ W8, 0x332980C
	0x03329808 BL 0x1C16DFC
	0x0332980C MOV X0, X19
	0x03329810 MOV X1, X31
	0x03329814 BL 0x33748E0
	0x03329818 CMP W26, W0
	0x0332981C B.GE 0x3329874
	0x03329820 LDR W8, [X19 + 0x8]
	0x03329824 CMP W26, W8
	0x03329828 B.CS 0x3329B24
	0x0332982C ADRP X8, 0xDCC000
	0x03329830 LDR X8, [X8 + 0x170]
	0x03329834 LDR X0, [X8]
	0x03329838 LDR X8, [X19]
	0x0332983C LDR W9, [X0 + 0xE0]
	0x03329840 LDRH W26, [X8, W26, SXTW]
	0x03329844 CBNZ W9, 0x332984C
	0x03329848 BL 0x1C16DFC
	0x0332984C MOV W0, W26
	0x03329850 MOV X1, X31
	0x03329854 BL 0x331A888
	0x03329858 TBZ X0, 0x0, 0x3329874
	0x0332985C LDR X1, [X24 + 0x10]
	0x03329860 LDR X0, [X31 + 0x20]
	0x03329864 MOV W2, W26
	0x03329868 MOV X3, X31
	0x0332986C BL 0x3337F84
	0x03329870 TBZ X0, 0x0, 0x3329944
	0x03329874 LDR X0, [X24 + 0x10]
	0x03329878 CBZ X0, 0x3329B20
	0x0332987C LDR W8, [X0 + 0x10]
	0x03329880 CMP W8, 0x1
	0x03329884 B.NE 0x33298B4
	0x03329888 LDRSW X8, [X19 + 0x10]
	0x0332988C LDR W9, [X19 + 0x8]
	0x03329890 CMP W8, W9
	0x03329894 B.CS 0x3329B24
	0x03329898 LDR X9, [X19]
	0x0332989C MOV W1, W31
	0x033298A0 MOV X2, X31
	0x033298A4 LDRH W22, [X9, X8, LSL #1]
	0x033298A8 BL 0x3222A1C
	0x033298AC CMP W22, W0, UXTH
	0x033298B0 B.EQ 0x3329A68
	0x033298B4 LDR X0, [X31 + 0x20]
	0x033298B8 BL 0x3324360
	0x033298BC CBZ X0, 0x3329B20
	0x033298C0 LDR X8, [X0]
	0x033298C4 LDP X9, X1, [X8 + 0x1F8]
	0x033298C8 BLR X9
	0x033298CC LDR X8, [X24 + 0x10]
	0x033298D0 CBZ X8, 0x3329B20
	0x033298D4 LDR W27, [X8 + 0x10]
	0x033298D8 ADRP X8, 0xDFD000
	0x033298DC LDRSW X23, [X19 + 0x10]
	0x033298E0 LDR W9, [X19 + 0x8]
	0x033298E4 LDR X8, [X8 + 0xD90]
	0x033298E8 MOV X26, X0
	0x033298EC LDR X22, [X8]
	0x033298F0 SUBS W8, W9, W23
	0x033298F4 B.CC 0x3329900
	0x033298F8 CMP W8, W27
	0x033298FC B.CS 0x3329908
	0x03329900 MOV X0, X31
	0x03329904 BL 0x339D6EC
	0x03329908 LDR X0, [X22 + 0x20]
	0x0332990C LDR X22, [X19]
	0x03329910 LDRB W8, [X0 + 0x135]
	0x03329914 TBNZ X8, 0x0, 0x332991C
	0x03329918 BL 0x1C5C684
	0x0332991C CBZ X26, 0x3329B20
	0x03329920 LDR X3, [X24 + 0x10]
	0x03329924 ADD X1, X22, X23, 0x1, LSL
	0x03329928 MOVZ W4, 0x1
	0x0332992C MOV X0, X26
	0x03329930 MOV X2, X27
	0x03329934 MOV X5, X31
	0x03329938 BL 0x33046C4
	0x0332993C LDR W27, [X31 + 0x18]
	0x03329940 CBZ W0, 0x3329A68
	0x03329944 LDR W8, [X24 + 0x18]
	0x03329948 CMP W8, 0x5
	0x0332994C B.NE 0x3329978
	0x03329950 LDR X8, [X31 + 0x20]
	0x03329954 LDR W0, [X8 + 0x144]
	0x03329958 ADDS W31, W0, 0x1
	0x0332995C B.EQ 0x3329968
	0x03329960 TBZ X0, 0x2, 0x3329974
	0x03329964 B 0x33299A4
	0x03329968 LDR X0, [X31 + 0x20]
	0x0332996C BL 0x3326FB4
	0x03329970 TBNZ X0, 0x2, 0x33299A4
	0x03329974 LDR W8, [X24 + 0x18]
	0x03329978 CMP W8, 0x7
	0x0332997C B.NE 0x33299E0
	0x03329980 LDR X8, [X31 + 0x20]
	0x03329984 LDR W0, [X8 + 0x144]
	0x03329988 ADDS W31, W0, 0x1
	0x0332998C B.EQ 0x3329998
	0x03329990 TBNZ X0, 0x4, 0x33299A4
	0x03329994 B 0x33299E0
	0x03329998 LDR X0, [X31 + 0x20]
	0x0332999C BL 0x3326FB4
	0x033299A0 TBZ X0, 0x4, 0x33299E0
	0x033299A4 ADRP X8, 0xDFF000
	0x033299A8 LDR X8, [X8 + 0x4F0]
	0x033299AC STR W31, [X31 + 0x28]
	0x033299B0 LDR X26, [X24 + 0x10]
	0x033299B4 LDR X0, [X8]
	0x033299B8 LDR W8, [X0 + 0xE0]
	0x033299BC CBNZ W8, 0x33299C4
	0x033299C0 BL 0x1C16DFC
	0x033299C4 ADD X3, X31, 0x28
	0x033299C8 MOVZ W2, 0x1
	0x033299CC MOV X0, X19
	0x033299D0 MOV X1, X26
	0x033299D4 MOV X4, X31
	0x033299D8 BL 0x3375320
	0x033299DC TBNZ X0, 0x0, 0x3329ADC
	0x033299E0 ADD W8, W21, W20
	0x033299E4 SUBS W9, W8, 0xC7
	0x033299E8 CSEL W21, W8, W9, LT
	0x033299EC SUBS W29, W29, 0x1
	0x033299F0 B.NE 0x332977C
	0x033299F4 MOV W0, W31
	0x033299F8 B 0x3329ABC
	0x033299FC ADRP X20, 0xDFF000
	0x03329A00 LDR X20, [X20 + 0x328]
	0x03329A04 LDR X0, [X20]
	0x03329A08 LDR W8, [X0 + 0xE0]
	0x03329A0C CBNZ W8, 0x3329A14
	0x03329A10 BL 0x1C16DFC
	0x03329A14 CMP W24, 0xFF
	0x03329A18 B.NE 0x33296DC
	0x03329A1C SUB W8, W26, 0x590
	0x03329A20 AND W8, W8, 0xFFFF
	0x03329A24 CMP W8, 0x6F
	0x03329A28 B.HI 0x33296DC
	0x03329A2C LDR X0, [X20]
	0x03329A30 LDR W8, [X0 + 0xE0]
	0x03329A34 CBNZ W8, 0x3329A3C
	0x03329A38 BL 0x1C16DFC
	0x03329A3C ADD X1, X31, 0x2C
	0x03329A40 MOV X0, X19
	0x03329A44 MOV X2, X23
	0x03329A48 BL 0x3329094
	0x03329A4C TBZ X0, 0x0, 0x33296DC
	0x03329A50 LDRB W8, [X31 + 0x2C]
	0x03329A54 CBZ W8, 0x3329B14
	0x03329A58 MOVZ W8, 0xB
	0x03329A5C MOV W0, W31
	0x03329A60 STR W8, [X22]
	0x03329A64 B 0x3329ABC
	0x03329A68 LDR W8, [X24 + 0x18]
	0x03329A6C LDR X9, [X31 + 0x10]
	0x03329A70 AND W8, W8, W27, 0x0
	0x03329A74 STR W8, [X9]
	0x03329A78 LDR W8, [X24 + 0x1C]
	0x03329A7C LDR X9, [X31 + 0x8]
	0x03329A80 STR W8, [X9]
	0x03329A84 LDR X8, [X24 + 0x10]
	0x03329A88 CBZ X8, 0x3329B20
	0x03329A8C ADRP X9, 0xDFF000
	0x03329A90 LDR X9, [X9 + 0x4F0]
	0x03329A94 LDR W20, [X8 + 0x10]
	0x03329A98 LDR X0, [X9]
	0x03329A9C LDR W9, [X0 + 0xE0]
	0x03329AA0 CBNZ W9, 0x3329AA8
	0x03329AA4 BL 0x1C16DFC
	0x03329AA8 MOV X0, X19
	0x03329AAC MOV W1, W20
	0x03329AB0 MOV X2, X31
	0x03329AB4 BL 0x3374BA0
	0x03329AB8 MOVZ W0, 0x1
	0x03329ABC LDP X20, X19, [X31 + 0x80]
	0x03329AC0 LDP X22, X21, [X31 + 0x70]
	0x03329AC4 LDP X24, X23, [X31 + 0x60]
	0x03329AC8 LDP X26, X25, [X31 + 0x50]
	0x03329ACC LDP X28, X27, [X31 + 0x40]
	0x03329AD0 LDP X29, X30, [X31 + 0x30]
	0x03329AD4 ADD X31, X31, 0x90
	0x03329AD8 RET
	0x03329ADC LDR W8, [X24 + 0x18]
	0x03329AE0 LDR X9, [X31 + 0x10]
	0x03329AE4 AND W8, W8, W27, 0x0
	0x03329AE8 STR W8, [X9]
	0x03329AEC LDR W8, [X24 + 0x1C]
	0x03329AF0 LDR X9, [X31 + 0x8]
	0x03329AF4 STR W8, [X9]
	0x03329AF8 ADRP X8, 0xDFF000
	0x03329AFC LDR X8, [X8 + 0x4F0]
	0x03329B00 LDR W20, [X31 + 0x28]
	0x03329B04 LDR X0, [X8]
	0x03329B08 LDR W8, [X0 + 0xE0]
	0x03329B0C CBNZ W8, 0x3329AA8
	0x03329B10 B 0x3329AA4
	0x03329B14 MOVZ W8, 0xC
	0x03329B18 STR W8, [X22]
	0x03329B1C B 0x3329AB8
	0x03329B20 BL 0x1C16F20
	0x03329B24 BL 0x1C16F28
	0x03329B28 STP X29, X30, [X31 - 0x60]!
	0x03329B2C STP X28, X27, [X31 + 0x10]
	0x03329B30 STP X26, X25, [X31 + 0x20]
	0x03329B34 STP X24, X23, [X31 + 0x30]
	0x03329B38 STP X22, X21, [X31 + 0x40]
	0x03329B3C STP X20, X19, [X31 + 0x50]
	0x03329B40 ADRP X27, 0x10B3000
	0x03329B44 LDRB W8, [X27 + 0xCA6]
	0x03329B48 MOV W19, W7
	0x03329B4C MOV W23, W6
	0x03329B50 MOV W24, W5
	0x03329B54 MOV W25, W4
	0x03329B58 MOV W20, W3
	0x03329B5C MOV X26, X2
	0x03329B60 MOV X21, X1
	0x03329B64 MOV X22, X0
	0x03329B68 TBNZ X8, 0x0, 0x3329B80
	0x03329B6C ADRP X0, 0xDFF000
	0x03329B70 LDR X0, [X0 + 0x460]
	0x03329B74 BL 0x1C16CF4
	0x03329B78 MOVZ W8, 0x1
	0x03329B7C STRB W8, [X27 + 0xCA6]
	0x03329B80 CBZ X21, 0x3329CC0
	0x03329B84 LDR W8, [X21 + 0x18]
	0x03329B88 CMP W8, W19
	0x03329B8C B.LS 0x3329CC4
	0x03329B90 ADRP X8, 0xDFF000
	0x03329B94 LDR X8, [X8 + 0x460]
	0x03329B98 ADD X29, X21, W19, 0x3, SXTW
	0x03329B9C LDR X28, [X29 + 0x20]!
	0x03329BA0 LDR X0, [X8]
	0x03329BA4 BL 0x1C16F10

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X22, 0x10B4000
	014 Move W8, [X22+3233]
	015 Move X23, X2
	016 Move X19, X1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {99}
	022 Move X0, 0xDFB000
	023 Move X0, [X0+2912]
	024 Call 0x1C17CF4
	025 Move X0, 0xE00000
	026 Move X0, [X0+1128]
	027 Call 0x1C17CF4
	028 Move X0, 0xE00000
	029 Move X0, [X0+808]
	030 Call 0x1C17CF4
	031 Move X0, 0xE00000
	032 Move X0, [X0+1072]
	033 Call 0x1C17CF4
	034 Move X0, 0xDF9000
	035 Move X0, [X0+2736]
	036 Call 0x1C17CF4
	037 Move X0, 0xE00000
	038 Move X0, [X0+1136]
	039 Call 0x1C17CF4
	040 Move X0, 0xE00000
	041 Move X0, [X0+1144]
	042 Call 0x1C17CF4
	043 Move X0, 0xE00000
	044 Move X0, [X0+1152]
	045 Call 0x1C17CF4
	046 Move X0, 0xE00000
	047 Move X0, [X0+1160]
	048 Call 0x1C17CF4
	049 Move X0, 0xE00000
	050 Move X0, [X0+1096]
	051 Call 0x1C17CF4
	052 Move X0, 0xE00000
	053 Move X0, [X0+1168]
	054 Call 0x1C17CF4
	055 Move X0, 0xE00000
	056 Move X0, [X0+1176]
	057 Call 0x1C17CF4
	058 Move X0, 0xDF9000
	059 Move X0, [X0+2744]
	060 Call 0x1C17CF4
	061 Move X0, 0xE00000
	062 Move X0, [X0+1184]
	063 Call 0x1C17CF4
	064 Move X0, 0xE00000
	065 Move X0, [X0+1192]
	066 Call 0x1C17CF4
	067 Move X0, 0xE00000
	068 Move X0, [X0+1104]
	069 Call 0x1C17CF4
	070 Move X0, 0xE00000
	071 Move X0, [X0+1200]
	072 Call 0x1C17CF4
	073 Move X0, 0xDD6000
	074 Move X0, [X0+784]
	075 Call 0x1C17CF4
	076 Move X0, 0xE00000
	077 Move X0, [X0+1208]
	078 Call 0x1C17CF4
	079 Move X0, 0xE00000
	080 Move X0, [X0+1216]
	081 Call 0x1C17CF4
	082 Move X0, 0xDCC000
	083 Move X0, [X0+1544]
	084 Call 0x1C17CF4
	085 Move X0, 0xE00000
	086 Move X0, [X0+1056]
	087 Call 0x1C17CF4
	088 Move X0, 0xE00000
	089 Move X0, [X0+1224]
	090 Call 0x1C17CF4
	091 Move X0, 0xE00000
	092 Move X0, [X0+1232]
	093 Call 0x1C17CF4
	094 Move X0, 0xDD4000
	095 Move X0, [X0+1936]
	096 Call 0x1C17CF4
	097 Move W8, 1
	098 Move [X22+3233], W8
	099 Move X0, [X20+32]
	100 Compare X0, 0
	101 JumpIfNotEqual {109}
	102 Move X8, [X20+16]
	103 Compare X8, 0
	104 JumpIfEqual {616}
	105 Move X0, [X8+80]
	106 Move [X20+32], X0
	107 Compare X0, 0
	108 JumpIfEqual {616}
	109 Move X8, 0xE00000
	110 Move X8, [X8+1176]
	111 Move X2, X31
	112 Move X1, [X8]
	113 Call String.Equals, X0, X1
	114 Move TEMP, X0
	115 And TEMP, TEMP, 1
	116 Compare TEMP, 1
	117 JumpIfNotEqual {154}
	118 Move X1, [X20+56]
	119 Compare X1, 0
	120 JumpIfNotEqual {126}
	121 Move X8, [X20+16]
	122 Compare X8, 0
	123 JumpIfEqual {616}
	124 Move X1, [X8+16]
	125 Move [X20+56], X1
	126 Move X22, 0xDD4000
	127 Move X22, [X22+1936]
	128 Move X2, X31
	129 Move X0, [X22]
	130 Call String.Concat, X0, X1
	131 Move X2, X0
	132 Move W3, 1027
	133 Move X0, X20
	134 Move X1, X19
	135 Move W4, W31
	136 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	137 Move X1, [X20+64]
	138 Compare X1, 0
	139 JumpIfNotEqual {145}
	140 Move X8, [X20+16]
	141 Compare X8, 0
	142 JumpIfEqual {616}
	143 Move X1, [X8+24]
	144 Move [X20+64], X1
	145 Move X0, [X22]
	146 Move X2, X31
	147 Call String.Concat, X0, X1
	148 Move X2, X0
	149 Move W3, 1284
	150 Move W4, 1
	151 Move X0, X20
	152 Move X1, X19
	153 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	154 Move X8, 0xE00000
	155 Move X8, [X8+1232]
	156 Move X27, 0xE00000
	157 Move X28, 0xE00000
	158 Move X29, 0xE00000
	159 Move X21, 0xE00000
	160 Move X22, 0xE00000
	161 Move X26, 0xE00000
	162 Move X25, 0xE00000
	163 Move X27, [X27+1144]
	164 Move X28, [X28+1208]
	165 Move X29, [X29+1136]
	166 Move X21, [X21+1184]
	167 Move X22, [X22+1168]
	168 Move X26, [X26+1104]
	169 Move X25, [X25+1072]
	170 Move X2, [X8]
	171 Move X24, 0xE00000
	172 Move X24, [X24+1216]
	173 Move W3, 2048
	174 Move X0, X20
	175 Move X1, X19
	176 Move W4, W31
	177 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	178 Move X2, [X27]
	179 Move W3, 2048
	180 Move X0, X20
	181 Move X1, X19
	182 Move W4, W31
	183 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	184 Move X2, [X28]
	185 Move W3, 2304
	186 Move X0, X20
	187 Move X1, X19
	188 Move W4, W31
	189 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	190 Move X2, [X29]
	191 Move W3, 2304
	192 Move X0, X20
	193 Move X1, X19
	194 Move W4, W31
	195 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	196 Move X2, [X21]
	197 Move W3, 2560
	198 Move X0, X20
	199 Move X1, X19
	200 Move W4, W31
	201 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	202 Move X2, [X22]
	203 Move W3, 2560
	204 Move X0, X20
	205 Move X1, X19
	206 Move W4, W31
	207 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	208 Move X2, [X26]
	209 Move W3, 2816
	210 Move X0, X20
	211 Move X1, X19
	212 Move W4, W31
	213 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	214 Move X2, [X25]
	215 Move W3, 2816
	216 Move X0, X20
	217 Move X1, X19
	218 Move W4, W31
	219 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	220 Move X2, [X24]
	221 Move W3, 3072
	222 Move X0, X20
	223 Move X1, X19
	224 Move W4, W31
	225 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	226 Move X8, 0xE00000
	227 Move X8, [X8+1160]
	228 Move W3, 3328
	229 Move X0, X20
	230 Move X1, X19
	231 Move X2, [X8]
	232 Move W4, W31
	233 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	234 Move X8, 0xDFB000
	235 Move X8, [X8+2912]
	236 Move X8, [X8]
	237 Move X8, [X8+184]
	238 Move W8, [X8+3]
	239 Compare W8, 0
	240 JumpIfNotEqual {273}
	241 Move X0, [X20+120]
	242 Compare X0, 0
	243 JumpIfEqual {616}
	244 Move X8, [X0]
	245 Move X9, [X8+424]
	246 Move X1, [X8+432]
	247 NotImplemented "Instruction BLR not yet implemented."
	248 NotImplemented "Instruction CMP not yet implemented."
	249 Move X8, 0xE00000
	250 Move X8, [X8+1224]
	251 Move W3, 2
	252 Move W4, 1
	253 Move X0, X20
	254 Move X2, [X8]
	255 Move X1, X19
	256 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	257 Move X8, 0xDD6000
	258 Move X8, [X8+784]
	259 Move W3, 15
	260 Move X0, X20
	261 Move X1, X19
	262 Move X2, [X8]
	263 Move W4, W31
	264 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	265 Move X8, 0xDCC000
	266 Move X8, [X8+1544]
	267 Move W3, 15
	268 Move X0, X20
	269 Move X1, X19
	270 Move X2, [X8]
	271 Move W4, W31
	272 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	273 Move X0, [X20+32]
	274 Move X21, X23
	275 Compare X0, 0
	276 JumpIfNotEqual {284}
	277 Move X8, [X20+16]
	278 Compare X8, 0
	279 JumpIfEqual {616}
	280 Move X0, [X8+80]
	281 Move [X20+32], X0
	282 Compare X0, 0
	283 JumpIfEqual {616}
	284 Move X8, 0xDF9000
	285 Move X8, [X8+2744]
	286 Move X22, 0xE00000
	287 Move X2, X31
	288 Move X1, [X8]
	289 Move X22, [X22+1128]
	290 Call String.Equals, X0, X1
	291 Move TEMP, X0
	292 And TEMP, TEMP, 1
	293 Compare TEMP, 1
	294 JumpIfNotEqual {319}
	295 Move X8, 0xE00000
	296 Move X8, [X8+1096]
	297 Move W3, 2816
	298 Move X0, X20
	299 Move X1, X19
	300 Move X2, [X8]
	301 Move W4, W31
	302 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	303 Move X8, 0xE00000
	304 Move X8, [X8+1200]
	305 Move W3, 3072
	306 Move X0, X20
	307 Move X1, X19
	308 Move X2, [X8]
	309 Move W4, W31
	310 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	311 Move X8, 0xE00000
	312 Move X8, [X8+1152]
	313 Move W3, 3328
	314 Move X0, X20
	315 Move X1, X19
	316 Move X2, [X8]
	317 Move W4, W31
	318 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	319 Move X0, [X22]
	320 Call 0x1C17F10
	321 Move X22, X0
	322 Call DateTimeFormatInfoScanner..ctor, X0
	323 Compare X22, 0
	324 JumpIfEqual {616}
	325 Move X0, X22
	326 Move X1, X20
	327 Call DateTimeFormatInfoScanner.GetDateWordsOfDTFI, X0, X1
	328 Move W8, [X20+324]
	329 Move X22, X0
	330 Add W31, W8, 1
	331 Compare X22, 0
	332 JumpIfNotEqual {337}
	333 Move X0, X20
	334 Call DateTimeFormatInfo.InitializeFormatFlags, X0
	335 Compare X22, 0
	336 JumpIfEqual {441}
	337 Move W8, [X22+24]
	338 NotImplemented "Instruction CMP not yet implemented."
	339 Move X28, 0xE00000
	340 Move X29, 0xDD4000
	341 Move X28, [X28+1192]
	342 Move X29, [X29+1936]
	343 Move X24, X31
	344 Add X25, X22, 32
	345 Move W26, 0xE001
	346 Move W27, 1
	347 NotImplemented "Instruction CMP not yet implemented."
	348 Move X0, [X25]
	349 Compare X0, 0
	350 JumpIfEqual {616}
	351 Move W1, W31
	352 Move X2, X31
	353 Call String.get_Chars, X0, X1
	354 And W8, W0, 0xFFFF
	355 NotImplemented "Instruction CMP not yet implemented."
	356 NotImplemented "Instruction CMP not yet implemented."
	357 Move W8, [X22+24]
	358 NotImplemented "Instruction CMP not yet implemented."
	359 Move X0, [X25]
	360 Compare X0, 0
	361 JumpIfEqual {616}
	362 Move W1, 1
	363 Move X2, X31
	364 Call String.Substring, X0, X1
	365 Move X2, X0
	366 Move X0, X20
	367 Move X1, X19
	368 Call DateTimeFormatInfo.AddMonthNames, X0, X1, X2
	369 Move W8, [X22+24]
	370 NotImplemented "Instruction CMP not yet implemented."
	371 Move X0, [X25]
	372 Compare X0, 0
	373 JumpIfEqual {616}
	374 Move W1, 1
	375 Move X2, X31
	376 Call String.Substring, X0, X1
	377 Move X23, X0
	378 Move W3, 15
	379 Move X0, X20
	380 Move X1, X19
	381 Move X2, X23
	382 Move W4, W31
	383 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	384 Move X0, X20
	385 Call DateTimeFormatInfo.get_DateSeparator, X0
	386 Compare X0, 0
	387 JumpIfEqual {616}
	388 Move X1, X31
	389 Move X2, X31
	390 Call String.Trim, X0, X1
	391 Compare X0, 0
	392 JumpIfEqual {616}
	393 Move X1, X23
	394 Move X2, X31
	395 Call String.Equals, X0, X1
	396 Move TEMP, X0
	397 And TEMP, TEMP, 1
	398 Compare TEMP, 1
	399 JumpIfNotEqual {438}
	400 Move [X21], W27
	401 Move W8, [X22+24]
	402 NotImplemented "Instruction CMP not yet implemented."
	403 Move X2, [X25]
	404 Move W3, 10
	405 Move X0, X20
	406 Move X1, X19
	407 Move W4, W31
	408 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	409 Move X0, [X20+32]
	410 Compare X0, 0
	411 JumpIfNotEqual {419}
	412 Move X8, [X20+16]
	413 Compare X8, 0
	414 JumpIfEqual {616}
	415 Move X0, [X8+80]
	416 Move [X20+32], X0
	417 Compare X0, 0
	418 JumpIfEqual {616}
	419 Move X1, [X28]
	420 Move X2, X31
	421 Call String.Equals, X0, X1
	422 Move TEMP, X0
	423 And TEMP, TEMP, 1
	424 Compare TEMP, 1
	425 JumpIfNotEqual {438}
	426 Move W8, [X22+24]
	427 NotImplemented "Instruction CMP not yet implemented."
	428 Move X1, [X25]
	429 Move X0, [X29]
	430 Move X2, X31
	431 Call String.Concat, X0, X1
	432 Move X2, X0
	433 Move W3, 10
	434 Move X0, X20
	435 Move X1, X19
	436 Move W4, W31
	437 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	438 Move W8, [X22+24]
	439 Add X24, X24, 1
	440 NotImplemented "Instruction CMP not yet implemented."
	441 Move X0, [X20+32]
	442 Compare X0, 0
	443 JumpIfNotEqual {451}
	444 Move X8, [X20+16]
	445 Compare X8, 0
	446 JumpIfEqual {616}
	447 Move X0, [X8+80]
	448 Move [X20+32], X0
	449 Compare X0, 0
	450 JumpIfEqual {616}
	451 Move X8, 0xDF9000
	452 Move X8, [X8+2736]
	453 Move X2, X31
	454 Move X1, [X8]
	455 Call String.Equals, X0, X1
	456 Move TEMP, X0
	457 And TEMP, TEMP, 1
	458 Compare TEMP, 1
	459 JumpIfNotEqual {554}
	460 Move X22, 0xDD6000
	461 Move X23, 0xDCC000
	462 Move X22, [X22+784]
	463 Move X23, [X23+1544]
	464 Move W21, W31
	465 Move X0, X20
	466 Move W1, W21
	467 Call DateTimeFormatInfo.GetAbbreviatedDayName, X0, X1
	468 Move X8, [X22]
	469 Move X2, [X23]
	470 Move X1, X0
	471 Move X3, X31
	472 Move X0, X8
	473 Call String.Concat, X0, X1, X2
	474 Move X2, X0
	475 Move W3, 7
	476 Move X0, X20
	477 Move X1, X19
	478 Move W4, W21
	479 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	480 Add W21, W21, 1
	481 NotImplemented "Instruction CMP not yet implemented."
	482 Move X22, 0xE00000
	483 Move X22, [X22+808]
	484 Move X21, [X20+120]
	485 Move X0, [X22]
	486 Move W8, [X0+224]
	487 Compare W8, 0
	488 JumpIfNotEqual {490}
	489 Call 0x1C17DFC
	490 Move X0, X21
	491 Call DateTimeFormatInfo.IsJapaneseCalendar, X0
	492 Move TEMP, X0
	493 And TEMP, TEMP, 1
	494 Compare TEMP, 1
	495 JumpIfEqual {617}
	496 Move X0, [X22]
	497 Move W8, [X0+224]
	498 Compare W8, 0
	499 JumpIfNotEqual {501}
	500 Call 0x1C17DFC
	501 Call DateTimeFormatInfo.GetJapaneseCalendarDTFI
	502 Compare X0, 0
	503 JumpIfEqual {616}
	504 Move X21, X0
	505 Move X0, [X0+120]
	506 Compare X0, 0
	507 JumpIfEqual {616}
	508 Move W23, W31
	509 Move X8, [X0]
	510 Move X9, [X8+568]
	511 Move X1, [X8+576]
	512 NotImplemented "Instruction BLR not yet implemented."
	513 Compare X0, 0
	514 JumpIfEqual {616}
	515 Move W8, [X0+24]
	516 Add W22, W23, 1
	517 NotImplemented "Instruction CMP not yet implemented."
	518 Move X0, X21
	519 Move W1, W22
	520 Call DateTimeFormatInfo.GetEraName, X0, X1
	521 Move X2, X0
	522 Move W3, 13
	523 Move X0, X20
	524 Move X1, X19
	525 Move W4, W22
	526 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	527 Move X0, X21
	528 Move W1, W22
	529 Call DateTimeFormatInfo.GetAbbreviatedEraName, X0, X1
	530 Move X2, X0
	531 Move W3, 13
	532 Move X0, X20
	533 Move X1, X19
	534 Move W4, W22
	535 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	536 Move X0, X21
	537 Call DateTimeFormatInfo.get_AbbreviatedEnglishEraNames, X0
	538 Compare X0, 0
	539 JumpIfEqual {616}
	540 Move W9, [X0+24]
	541 Subtract W8, W22, 1
	542 NotImplemented "Instruction CMP not yet implemented."
	543 Add X9, X0, W23
	544 Move X2, [X9+32]
	545 Add W4, W8, 1
	546 Move W3, 13
	547 Move X0, X20
	548 Move X1, X19
	549 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	550 Move X0, [X21+120]
	551 Add W23, W23, 1
	552 Compare X0, 0
	553 JumpIfNotEqual {509}
	554 Move X0, [X20+24]
	555 Compare X0, 0
	556 JumpIfNotEqual {564}
	557 Move X8, [X20+16]
	558 Compare X8, 0
	559 JumpIfEqual {616}
	560 Move X0, [X8+88]
	561 Move [X20+24], X0
	562 Compare X0, 0
	563 JumpIfEqual {616}
	564 Move X8, 0xE00000
	565 Move X8, [X8+1056]
	566 Move X2, X31
	567 Move X1, [X8]
	568 Call String.Equals, X0, X1
	569 Move TEMP, X0
	570 And TEMP, TEMP, 1
	571 Compare TEMP, 1
	572 JumpIfNotEqual {617}
	573 Move X8, 0xE00000
	574 Move X8, [X8+808]
	575 Move X0, [X8]
	576 Move W8, [X0+224]
	577 Compare W8, 0
	578 JumpIfNotEqual {580}
	579 Call 0x1C17DFC
	580 Call DateTimeFormatInfo.GetTaiwanCalendarDTFI
	581 Compare X0, 0
	582 JumpIfEqual {616}
	583 Move X21, X0
	584 Move X0, [X0+120]
	585 Compare X0, 0
	586 JumpIfEqual {616}
	587 Move W22, 1
	588 Move X8, [X0]
	589 Move X9, [X8+568]
	590 Move X1, [X8+576]
	591 NotImplemented "Instruction BLR not yet implemented."
	592 Compare X0, 0
	593 JumpIfEqual {616}
	594 Move W8, [X0+24]
	595 NotImplemented "Instruction CMP not yet implemented."
	596 Move X0, X21
	597 Move W1, W22
	598 Call DateTimeFormatInfo.GetEraName, X0, X1
	599 Compare X0, 0
	600 JumpIfEqual {616}
	601 Move W8, [X0+16]
	602 NotImplemented "Instruction CMP not yet implemented."
	603 Move X0, X21
	604 Move W1, W22
	605 Call DateTimeFormatInfo.GetEraName, X0, X1
	606 Move X2, X0
	607 Move W3, 14
	608 Move X0, X20
	609 Move X1, X19
	610 Move W4, W22
	611 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	612 Move X0, [X21+120]
	613 Add W22, W22, 1
	614 Compare X0, 0
	615 JumpIfNotEqual {588}
	616 Call 0x1C17F20
	617 Move X20, [X31+80]
	618 Move X19, [X31+88]
	619 Move X22, [X31+64]
	620 Move X21, [X31+72]
	621 Move X24, [X31+48]
	622 Move X23, [X31+56]
	623 Move X26, [X31+32]
	624 Move X25, [X31+40]
	625 Move X28, [X31+16]
	626 Move X27, [X31+24]
	627 Move X29, [X31+96]
	628 Move X30, [X31+104]
	629 Return 
	630 Call 0x1C17F28

Method: System.Boolean IsJapaneseCalendar(System.Globalization.Calendar calendar)

Disassembly:
	0x03329F60 ADRP X0, 0xDCB000
	0x03329F64 LDR X0, [X0 + 0xEC8]
	0x03329F68 BL 0x1C16CF4
	0x03329F6C ADRP X0, 0xDFF000
	0x03329F70 LDR X0, [X0 + 0x450]
	0x03329F74 BL 0x1C16CF4
	0x03329F78 ADRP X0, 0xDFF000
	0x03329F7C LDR X0, [X0 + 0x4B0]
	0x03329F80 BL 0x1C16CF4
	0x03329F84 ADRP X0, 0xDFF000
	0x03329F88 LDR X0, [X0 + 0x4B8]
	0x03329F8C BL 0x1C16CF4
	0x03329F90 ADRP X0, 0xDFF000
	0x03329F94 LDR X0, [X0 + 0x4C0]
	0x03329F98 BL 0x1C16CF4
	0x03329F9C ADRP X0, 0xDFF000
	0x03329FA0 LDR X0, [X0 + 0x4D0]
	0x03329FA4 BL 0x1C16CF4
	0x03329FA8 ADRP X0, 0xDD3000
	0x03329FAC LDR X0, [X0 + 0x790]
	0x03329FB0 BL 0x1C16CF4
	0x03329FB4 MOVZ W8, 0x1
	0x03329FB8 STRB W8, [X19 + 0xCA9]
	0x03329FBC LDR X8, [X20]
	0x03329FC0 LDR X8, [X8 + 0xB8]
	0x03329FC4 LDR X19, [X8]
	0x03329FC8 BL 0x1C16D44
	0x03329FCC CBNZ X19, 0x332A258
	0x03329FD0 ADRP X8, 0xDCB000
	0x03329FD4 LDR X8, [X8 + 0x6D0]
	0x03329FD8 LDR X0, [X8]
	0x03329FDC BL 0x1C16F10
	0x03329FE0 ADRP X8, 0xDCB000
	0x03329FE4 LDR X8, [X8 + 0x6C0]
	0x03329FE8 MOV X19, X0
	0x03329FEC LDR X1, [X8]
	0x03329FF0 BL 0x2AA4804
	0x03329FF4 CBZ X19, 0x332A27C
	0x03329FF8 ADRP X21, 0xDCC000
	0x03329FFC LDR X21, [X21 + 0x278]
	0x0332A000 ADRP X9, 0xDCA000
	0x0332A004 ADRP X22, 0xDCA000
	0x0332A008 MOV X0, X19
	0x0332A00C LDR X8, [X21]
	0x0332A010 LDR X8, [X8 + 0xB8]
	0x0332A014 LDR X9, [X9 + 0xEC8]
	0x0332A018 LDR X22, [X22 + 0x810]
	0x0332A01C LDR X2, [X8]
	0x0332A020 LDR X1, [X9]
	0x0332A024 LDR X3, [X22]
	0x0332A028 BL 0x2AA5098
	0x0332A02C LDR X8, [X21]
	0x0332A030 ADRP X9, 0xDCA000
	0x0332A034 MOV X0, X19
	0x0332A038 LDR X8, [X8 + 0xB8]
	0x0332A03C LDR X9, [X9 + 0x2A8]
	0x0332A040 LDR X3, [X22]
	0x0332A044 LDR X2, [X8]
	0x0332A048 LDR X1, [X9]
	0x0332A04C BL 0x2AA5098
	0x0332A050 LDR X8, [X21]
	0x0332A054 ADRP X9, 0xDD2000
	0x0332A058 MOV X0, X19
	0x0332A05C LDR X8, [X8 + 0xB8]
	0x0332A060 LDR X9, [X9 + 0x790]
	0x0332A064 LDR X3, [X22]
	0x0332A068 LDR X2, [X8]
	0x0332A06C LDR X1, [X9]
	0x0332A070 BL 0x2AA5098
	0x0332A074 LDR X8, [X21]
	0x0332A078 ADRP X9, 0xDFE000
	0x0332A07C MOV X0, X19
	0x0332A080 LDR X8, [X8 + 0xB8]
	0x0332A084 LDR X9, [X9 + 0x4D0]
	0x0332A088 LDR X3, [X22]
	0x0332A08C LDR X2, [X8]
	0x0332A090 LDR X1, [X9]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10B4000
	006 Move X20, 0xDFF000
	007 Move W8, [X21+3234]
	008 Move X20, [X20+2352]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0xDFF000
	015 Move X0, [X0+2352]
	016 Call 0x1C17CF4
	017 Move X0, 0xE00000
	018 Move X0, [X0+1240]
	019 Call 0x1C17CF4
	020 Move X0, 0xDCB000
	021 Move X0, [X0+1728]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3234], W8
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X21, 0x10B4000
	031 Move W8, [X21+2814]
	032 Compare W8, 0
	033 JumpIfNotEqual {39}
	034 Move X0, 0xDFF000
	035 Move X0, [X0+2352]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X21+2814], W8
	039 Move X0, [X20]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {45}
	043 Call 0x1C17DFC
	044 Move X0, [X20]
	045 Move X8, [X0+184]
	046 Move W8, [X8]
	047 Compare W8, 0
	048 JumpIfNotEqual {79}
	049 Compare X19, 0
	050 JumpIfEqual {92}
	051 Move X20, 0xDFF000
	052 Move X21, 0xDCA000
	053 Move X20, [X20+1240]
	054 Call 0x3EB262C
	055 Return X0
	056 Move X0, X19
	057 Move X1, X31
	058 Call "il2cpp_vm_object_is_inst", X0
	059 Move X8, [X21]
	060 Move X20, [X20]
	061 Move X19, X0
	062 Move W9, [X8+224]
	063 Compare W9, 0
	064 JumpIfNotEqual {67}
	065 Move X0, X8
	066 Call 0x1C17DFC
	067 Move X0, X20
	068 Move X1, X31
	069 Call Type.GetTypeFromHandle, X0
	070 Move X1, X0
	071 Move X0, X19
	072 Move X20, [X31+16]
	073 Move X19, [X31+24]
	074 Move X2, X31
	075 Move X30, [X31+32]
	076 Move X21, [X31+40]
	077 Call Type.op_Equality, X0, X1
	078 Return X0
	079 Move X0, 0xDF5000
	080 Move X0, [X0+3152]
	081 Call 0x1C17D08
	082 Call 0x1C17F10
	083 Move X1, X31
	084 Move X19, X0
	085 Call PlatformNotSupportedException..ctor, X0
	086 Move X0, 0xDFF000
	087 Move X0, [X0+1248]
	088 Call 0x1C17D08
	089 Move X1, X0
	090 Move X0, X19
	091 Call 0x1C17DEC
	092 Call 0x1C17F20

Method: System.Void AddMonthNames(System.Globalization.DateTimeFormatInfo/TokenHashValue[] temp, System.String monthPostfix)

Disassembly:
	0x03329BA8 MOV X1, X31
	0x03329BAC MOV X27, X0
	0x03329BB0 BL 0x33BDD8C
	0x03329BB4 STR X26, [X27 + 0x10]
	0x03329BB8 STP W25, W24, [X27 + 0x18]
	0x03329BBC LDR X8, [X21]
	0x03329BC0 MOV X0, X27
	0x03329BC4 LDR X1, [X8 + 0x40]
	0x03329BC8 BL 0x1C16E00
	0x03329BCC CBZ X0, 0x3329CC8
	0x03329BD0 LDR W8, [X21 + 0x18]
	0x03329BD4 CMP W8, W19
	0x03329BD8 B.LS 0x3329CC4
	0x03329BDC LDR W26, [X31 + 0x60]
	0x03329BE0 STR X27, [X29]
	0x03329BE4 MOV X24, X28
	0x03329BE8 MOV W27, W23
	0x03329BEC ADD W23, W23, 0x1
	0x03329BF0 CMP W23, 0xC7
	0x03329BF4 B.GE 0x3329CA4
	0x03329BF8 LDR W8, [X21 + 0x18]
	0x03329BFC ADD W9, W19, W26
	0x03329C00 SUBS W10, W9, 0xC7
	0x03329C04 CSEL W19, W9, W10, LT
	0x03329C08 CMP W19, W8
	0x03329C0C B.CS 0x3329CC4
	0x03329C10 ADD X29, X21, W19, 0x3, SXTW
	0x03329C14 LDR X28, [X29 + 0x20]!
	0x03329C18 CBZ X28, 0x3329C74
	0x03329C1C MOV X0, X22
	0x03329C20 BL 0x3324360
	0x03329C24 CBZ X0, 0x3329CC0
	0x03329C28 LDR X8, [X0]
	0x03329C2C LDP X9, X1, [X8 + 0x1D8]
	0x03329C30 BLR X9
	0x03329C34 LDR X8, [X28 + 0x10]
	0x03329C38 CBZ X8, 0x3329CC0
	0x03329C3C MOV X25, X0
	0x03329C40 MOV X0, X8
	0x03329C44 MOV W1, W31
	0x03329C48 MOV X2, X31
	0x03329C4C BL 0x3222A1C
	0x03329C50 CBZ X25, 0x3329CC0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, X2
	007 Move X20, X1
	008 Move X21, X0
	009 Move W22, 1
	010 Move X0, X21
	011 Move W1, W22
	012 Call DateTimeFormatInfo.GetMonthName, X0, X1
	013 Compare X0, 0
	014 JumpIfEqual {47}
	015 Move W8, [X0+16]
	016 Move X2, X0
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Compare X19, 0
	019 JumpIfEqual {25}
	020 Move X0, X2
	021 Move X1, X19
	022 Move X2, X31
	023 Call String.Concat, X0, X1
	024 Move X2, X0
	025 Move W3, 5
	026 Move X0, X21
	027 Move X1, X20
	028 Move W4, W22
	029 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	030 Move X0, X21
	031 Move W1, W22
	032 Call DateTimeFormatInfo.GetAbbreviatedMonthName, X0, X1
	033 Move X2, X0
	034 Move W3, 5
	035 Move X0, X21
	036 Move X1, X20
	037 Move W4, W22
	038 Call DateTimeFormatInfo.InsertHash, X0, X1, X2, X3, X4
	039 Add W22, W22, 1
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Return 
	047 Call 0x1C17F20

Method: System.Boolean TryParseHebrewNumber(ref System.__DTString str, out System.Boolean badFormat, out System.Int32 number)

Disassembly:
	0x0332A094 BL 0x2AA5098
	0x0332A098 LDR X8, [X21]
	0x0332A09C ADRP X9, 0xDFE000
	0x0332A0A0 MOV X0, X19
	0x0332A0A4 LDR X8, [X8 + 0xB8]
	0x0332A0A8 LDR X9, [X9 + 0x4B8]
	0x0332A0AC LDR X3, [X22]
	0x0332A0B0 LDR X2, [X8]
	0x0332A0B4 LDR X1, [X9]
	0x0332A0B8 BL 0x2AA5098
	0x0332A0BC LDR X8, [X21]
	0x0332A0C0 ADRP X9, 0xDFE000
	0x0332A0C4 MOV X0, X19
	0x0332A0C8 LDR X8, [X8 + 0xB8]
	0x0332A0CC LDR X9, [X9 + 0x4A0]
	0x0332A0D0 LDR X3, [X22]
	0x0332A0D4 LDR X2, [X8]
	0x0332A0D8 LDR X1, [X9]
	0x0332A0DC BL 0x2AA5098
	0x0332A0E0 LDR X8, [X21]
	0x0332A0E4 ADRP X9, 0xDFE000
	0x0332A0E8 MOV X0, X19
	0x0332A0EC LDR X8, [X8 + 0xB8]
	0x0332A0F0 LDR X9, [X9 + 0x478]
	0x0332A0F4 LDR X3, [X22]
	0x0332A0F8 LDR X2, [X8]
	0x0332A0FC LDR X1, [X9]
	0x0332A100 BL 0x2AA5098
	0x0332A104 LDR X8, [X21]
	0x0332A108 ADRP X9, 0xDFE000
	0x0332A10C MOV X0, X19
	0x0332A110 LDR X8, [X8 + 0xB8]
	0x0332A114 LDR X9, [X9 + 0x470]
	0x0332A118 LDR X3, [X22]
	0x0332A11C LDR X2, [X8]
	0x0332A120 LDR X1, [X9]
	0x0332A124 BL 0x2AA5098
	0x0332A128 LDR X8, [X21]
	0x0332A12C ADRP X9, 0xDFE000
	0x0332A130 MOV X0, X19
	0x0332A134 LDR X8, [X8 + 0xB8]
	0x0332A138 LDR X9, [X9 + 0x490]
	0x0332A13C LDR X3, [X22]
	0x0332A140 LDR X2, [X8]
	0x0332A144 LDR X1, [X9]
	0x0332A148 BL 0x2AA5098
	0x0332A14C LDR X8, [X21]
	0x0332A150 ADRP X9, 0xDFE000
	0x0332A154 MOV X0, X19
	0x0332A158 LDR X8, [X8 + 0xB8]
	0x0332A15C LDR X9, [X9 + 0x448]
	0x0332A160 LDR X3, [X22]
	0x0332A164 LDR X2, [X8]
	0x0332A168 LDR X1, [X9]
	0x0332A16C BL 0x2AA5098
	0x0332A170 LDR X8, [X21]
	0x0332A174 ADRP X9, 0xDFE000
	0x0332A178 MOV X0, X19
	0x0332A17C LDR X8, [X8 + 0xB8]
	0x0332A180 LDR X9, [X9 + 0x4B0]
	0x0332A184 LDR X3, [X22]
	0x0332A188 LDR X2, [X8]
	0x0332A18C LDR X1, [X9]
	0x0332A190 BL 0x2AA5098
	0x0332A194 LDR X8, [X21]
	0x0332A198 ADRP X9, 0xDFE000
	0x0332A19C MOV X0, X19
	0x0332A1A0 LDR X8, [X8 + 0xB8]
	0x0332A1A4 LDR X9, [X9 + 0x480]
	0x0332A1A8 LDR X3, [X22]
	0x0332A1AC LDR X2, [X8]
	0x0332A1B0 LDR X1, [X9]
	0x0332A1B4 BL 0x2AA5098
	0x0332A1B8 LDR X8, [X21]
	0x0332A1BC ADRP X9, 0xDFE000
	0x0332A1C0 MOV X0, X19
	0x0332A1C4 LDR X8, [X8 + 0xB8]
	0x0332A1C8 LDR X9, [X9 + 0x450]
	0x0332A1CC LDR X3, [X22]
	0x0332A1D0 LDR X2, [X8]
	0x0332A1D4 LDR X1, [X9]
	0x0332A1D8 BL 0x2AA5098
	0x0332A1DC LDR X8, [X21]
	0x0332A1E0 ADRP X9, 0xDFE000
	0x0332A1E4 MOV X0, X19
	0x0332A1E8 LDR X8, [X8 + 0xB8]
	0x0332A1EC LDR X9, [X9 + 0x430]
	0x0332A1F0 LDR X3, [X22]
	0x0332A1F4 LDR X2, [X8]
	0x0332A1F8 LDR X1, [X9]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x10B3000
	009 Move W8, [X22+3235]
	010 Move X19, X2
	011 Move X21, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0xDFF000
	018 Move X0, [X0+1256]
	019 Call 0x1C17CF4
	020 Move X0, 0xDF9000
	021 Move X0, [X0+40]
	022 Call 0x1C17CF4
	023 Move X0, 0xDFF000
	024 Move X0, [X0+1264]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X22+3235], W8
	028 Move TEMP, 0
	029 Not TEMP
	030 Move W8, TEMP
	031 Move [X31+8], X31
	032 Move [X19], W8
	033 Move [X21], W31
	034 NotImplemented "Instruction LDRSW not yet implemented."
	035 Move W8, [X20+8]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X22, 0xDFF000
	038 Move X22, [X22+1256]
	039 Move X8, [X20]
	040 Move X0, [X22]
	041 NotImplemented "Instruction LDRH not yet implemented."
	042 Move W9, [X0+224]
	043 Compare W9, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move W0, W21
	047 Call HebrewNumber.IsDigit, X0
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {90}
	052 Move [X31+8], W31
	053 Move [X31+12], W31
	054 Move W8, [X20+8]
	055 Add W9, W23, 1
	056 Move W23, W9
	057 Subtract W9, W9, 1
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X0, [X22]
	060 Move X8, [X20]
	061 Move W10, [X0+224]
	062 NotImplemented "Instruction LDRH not yet implemented."
	063 Compare W10, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Add X1, X31, 8
	067 Move W0, W21
	068 Call HebrewNumber.ParseByChar, X0, X1
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move W8, [X20+8]
	071 NotImplemented "Instruction CMP not yet implemented."
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Add W9, W23, 1
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X8, 0xDFF000
	076 Move X8, [X8+1264]
	077 Move W21, [X20+16]
	078 Move X0, [X8]
	079 Move W8, [X0+224]
	080 Compare W8, 0
	081 JumpIfNotEqual {83}
	082 Call 0x1C17DFC
	083 Subtract W1, W23, W21
	084 Move X0, X20
	085 Move X2, X31
	086 Call __DTString.Advance, X0, X1
	087 Move W8, [X31+12]
	088 Move W0, 1
	089 Move [X19], W8
	090 Move W0, W31
	091 Move X20, [X31+48]
	092 Move X19, [X31+56]
	093 Move X22, [X31+32]
	094 Move X21, [X31+40]
	095 Move X30, [X31+16]
	096 Move X23, [X31+24]
	097 Add X31, X31, 64
	098 Return X0
	099 Call 0x1C17F28

Method: System.Boolean IsHebrewChar(System.Char ch)

Disassembly:
	0x0332A470 CBNZ X8, 0x332A49C
	0x0332A474 ADRP X8, 0xDCA000
	0x0332A478 LDR X8, [X8 + 0x1D0]
	0x0332A47C LDR X0, [X8]
	0x0332A480 BL 0x1C16F10

ISIL:
	001 Subtract W8, W0, 1424
	002 And W8, W8, 0xFFFF
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Return X0

Method: System.Boolean IsAllowedJapaneseTokenFollowedByNonSpaceLetter(System.String tokenString, System.Char nextCh)

Disassembly:
	0x0332A484 ADRP X8, 0xDCA000
	0x0332A488 LDR X8, [X8 + 0x1C0]
	0x0332A48C MOV X22, X0
	0x0332A490 LDR X1, [X8]
	0x0332A494 BL 0x301B7C4
	0x0332A498 STR X22, [X19 + 0x10]
	0x0332A49C ADRP X8, 0xDFE000
	0x0332A4A0 LDR X8, [X8 + 0x508]
	0x0332A4A4 MOV X0, X21
	0x0332A4A8 MOV X2, X31
	0x0332A4AC LDR X1, [X8]
	0x0332A4B0 BL 0x321BA08
	0x0332A4B4 TBZ X0, 0x0, 0x332A4EC
	0x0332A4B8 ADRP X8, 0xDFE000
	0x0332A4BC LDR X8, [X8 + 0x500]
	0x0332A4C0 MOV X1, X20
	0x0332A4C4 MOV X2, X31
	0x0332A4C8 LDR X0, [X8]
	0x0332A4CC BL 0x321B938
	0x0332A4D0 LDR X8, [X19 + 0x10]
	0x0332A4D4 CBZ X8, 0x332A634
	0x0332A4D8 ADRP X9, 0xDD2000
	0x0332A4DC LDR X9, [X9 + 0x110]
	0x0332A4E0 MOV X20, X0
	0x0332A4E4 LDR X2, [X9]
	0x0332A4E8 B 0x332A5B4
	0x0332A4EC LDR X0, [X19 + 0x10]
	0x0332A4F0 CBZ X0, 0x332A634
	0x0332A4F4 ADRP X21, 0xDD2000
	0x0332A4F8 LDR X21, [X21 + 0x110]
	0x0332A4FC MOV X1, X20
	0x0332A500 LDR X2, [X21]
	0x0332A504 BL 0x301C318
	0x0332A508 TBNZ X0, 0x0, 0x332A56C
	0x0332A50C LDR X0, [X19 + 0x10]
	0x0332A510 CBZ X0, 0x332A634
	0x0332A514 ADRP X9, 0xDCA000
	0x0332A518 LDR X9, [X9 + 0x1B8]
	0x0332A51C LDR W10, [X0 + 0x1C]
	0x0332A520 LDR X8, [X0 + 0x10]
	0x0332A524 LDR X9, [X9]
	0x0332A528 ADD W10, W10, 0x1
	0x0332A52C STR W10, [X0 + 0x1C]
	0x0332A530 CBZ X8, 0x332A634
	0x0332A534 LDRSW X10, [X0 + 0x18]
	0x0332A538 LDR W11, [X8 + 0x18]
	0x0332A53C CMP W10, W11
	0x0332A540 B.CS 0x332A558
	0x0332A544 ADD W9, W10, 0x1
	0x0332A548 ADD X8, X8, X10, 0x3, LSL
	0x0332A54C STR W9, [X0 + 0x18]
	0x0332A550 STR X20, [X8 + 0x20]
	0x0332A554 B 0x332A56C
	0x0332A558 LDR X8, [X9 + 0x20]
	0x0332A55C MOV X1, X20
	0x0332A560 LDR X8, [X8 + 0xC0]
	0x0332A564 LDR X2, [X8 + 0x70]
	0x0332A568 BL 0x301BF90
	0x0332A56C LDR W8, [X20 + 0x10]
	0x0332A570 MOV X0, X20
	0x0332A574 MOV X2, X31
	0x0332A578 SUB W1, W8, 0x1
	0x0332A57C BL 0x3222A1C
	0x0332A580 AND W8, W0, 0xFFFF
	0x0332A584 CMP W8, 0x2E
	0x0332A588 B.NE 0x332A624

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x10B3000
	008 Move X23, 0xDFA000
	009 Move W8, [X22+3236]
	010 Move X23, [X23+2912]
	011 Move W19, W2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0xDFA000
	019 Move X0, [X0+2912]
	020 Call 0x1C17CF4
	021 Move X0, 0xDFF000
	022 Move X0, [X0+1224]
	023 Call 0x1C17CF4
	024 Move X0, 0xDFF000
	025 Move X0, [X0+1232]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X22+3236], W8
	029 Move X8, [X23]
	030 Move X8, [X8+184]
	031 Move W8, [X8+3]
	032 Compare W8, 0
	033 JumpIfNotEqual {71}
	034 Move X0, [X21+120]
	035 Compare X0, 0
	036 JumpIfEqual {79}
	037 Move X8, [X0]
	038 Move X9, [X8+424]
	039 Move X1, [X8+432]
	040 NotImplemented "Instruction BLR not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X21, 0xDFF000
	043 Move X21, [X21+1224]
	044 Move X0, [X21]
	045 Compare X0, 0
	046 JumpIfEqual {79}
	047 Move W1, W31
	048 Move X2, X31
	049 Call String.get_Chars, X0, X1
	050 And W8, W0, 0xFFFF
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move W0, 1
	053 Move X1, [X21]
	054 Move X0, X20
	055 Move X2, X31
	056 Call String.op_Equality, X0, X1
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {71}
	061 Move X8, 0xDFF000
	062 Move X8, [X8+1232]
	063 Move X0, [X8]
	064 Compare X0, 0
	065 JumpIfEqual {79}
	066 Move W1, W31
	067 Move X2, X31
	068 Call String.get_Chars, X0, X1
	069 And W8, W0, 0xFFFF
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move W0, W31
	072 Move X20, [X31+32]
	073 Move X19, [X31+40]
	074 Move X22, [X31+16]
	075 Move X21, [X31+24]
	076 Move X30, [X31+48]
	077 Move X23, [X31+56]
	078 Return X0
	079 Call 0x1C17F20

Method: System.Boolean Tokenize(System.TokenType TokenMask, out System.TokenType tokenType, out System.Int32 tokenValue, ref System.__DTString str)

Disassembly:
	0x0332A58C LDR W8, [X20 + 0x10]
	0x0332A590 MOV X0, X20
	0x0332A594 MOV W1, W31
	0x0332A598 MOV X3, X31
	0x0332A59C SUB W2, W8, 0x1
	0x0332A5A0 BL 0x3228DE4
	0x0332A5A4 LDR X8, [X19 + 0x10]
	0x0332A5A8 CBZ X8, 0x332A634
	0x0332A5AC LDR X2, [X21]
	0x0332A5B0 MOV X20, X0
	0x0332A5B4 MOV X0, X8
	0x0332A5B8 MOV X1, X20
	0x0332A5BC BL 0x301C318
	0x0332A5C0 TBNZ X0, 0x0, 0x332A624
	0x0332A5C4 LDR X0, [X19 + 0x10]
	0x0332A5C8 CBZ X0, 0x332A634
	0x0332A5CC ADRP X9, 0xDCA000
	0x0332A5D0 LDR X9, [X9 + 0x1B8]
	0x0332A5D4 LDR W10, [X0 + 0x1C]
	0x0332A5D8 LDR X8, [X0 + 0x10]
	0x0332A5DC LDR X9, [X9]
	0x0332A5E0 ADD W10, W10, 0x1
	0x0332A5E4 STR W10, [X0 + 0x1C]
	0x0332A5E8 CBZ X8, 0x332A634
	0x0332A5EC LDRSW X10, [X0 + 0x18]
	0x0332A5F0 LDR W11, [X8 + 0x18]
	0x0332A5F4 CMP W10, W11
	0x0332A5F8 B.CS 0x332A610
	0x0332A5FC ADD W9, W10, 0x1
	0x0332A600 ADD X8, X8, X10, 0x3, LSL
	0x0332A604 STR W9, [X0 + 0x18]
	0x0332A608 STR X20, [X8 + 0x20]
	0x0332A60C B 0x332A624
	0x0332A610 LDR X8, [X9 + 0x20]
	0x0332A614 MOV X1, X20
	0x0332A618 LDR X8, [X8 + 0xC0]
	0x0332A61C LDR X2, [X8 + 0x70]
	0x0332A620 BL 0x301BF90
	0x0332A624 LDP X20, X19, [X31 + 0x20]
	0x0332A628 LDP X22, X21, [X31 + 0x10]
	0x0332A62C LDR X30, [X31], #0x30
	0x0332A630 RET
	0x0332A634 BL 0x1C16F20
	0x0332A638 STR X30, [X31 - 0x30]!
	0x0332A63C STP X22, X21, [X31 + 0x10]
	0x0332A640 STP X20, X19, [X31 + 0x20]
	0x0332A644 ADRP X21, 0x10B2000
	0x0332A648 LDRB W8, [X21 + 0xCAD]
	0x0332A64C MOV X20, X1
	0x0332A650 MOV X19, X0
	0x0332A654 TBNZ X8, 0x0, 0x332A69C
	0x0332A658 ADRP X0, 0xDCA000
	0x0332A65C LDR X0, [X0 + 0x1B8]
	0x0332A660 BL 0x1C16CF4
	0x0332A664 ADRP X0, 0xDD2000
	0x0332A668 LDR X0, [X0 + 0x110]
	0x0332A66C BL 0x1C16CF4
	0x0332A670 ADRP X0, 0xDCA000
	0x0332A674 LDR X0, [X0 + 0x1C0]
	0x0332A678 BL 0x1C16CF4
	0x0332A67C ADRP X0, 0xDCA000
	0x0332A680 LDR X0, [X0 + 0x1D0]
	0x0332A684 BL 0x1C16CF4
	0x0332A688 ADRP X0, 0xDFE000
	0x0332A68C LDR X0, [X0 + 0x510]
	0x0332A690 BL 0x1C16CF4
	0x0332A694 MOVZ W8, 0x1
	0x0332A698 STRB W8, [X21 + 0xCAD]
	0x0332A69C ADRP X22, 0xDFE000
	0x0332A6A0 LDR X8, [X19 + 0x10]
	0x0332A6A4 LDR X22, [X22 + 0x510]
	0x0332A6A8 CBNZ X8, 0x332A6D4
	0x0332A6AC ADRP X8, 0xDCA000
	0x0332A6B0 LDR X8, [X8 + 0x1D0]
	0x0332A6B4 LDR X0, [X8]
	0x0332A6B8 BL 0x1C16F10
	0x0332A6BC ADRP X8, 0xDCA000
	0x0332A6C0 LDR X8, [X8 + 0x1C0]
	0x0332A6C4 MOV X21, X0
	0x0332A6C8 LDR X1, [X8]
	0x0332A6CC BL 0x301B7C4
	0x0332A6D0 STR X21, [X19 + 0x10]
	0x0332A6D4 LDR X0, [X22]
	0x0332A6D8 MOV X1, X20
	0x0332A6DC MOV X2, X31
	0x0332A6E0 BL 0x321B938
	0x0332A6E4 LDR X8, [X19 + 0x10]
	0x0332A6E8 CBZ X8, 0x332A784
	0x0332A6EC ADRP X9, 0xDD2000
	0x0332A6F0 LDR X9, [X9 + 0x110]
	0x0332A6F4 MOV X20, X0
	0x0332A6F8 MOV X0, X8
	0x0332A6FC MOV X1, X20
	0x0332A700 LDR X2, [X9]
	0x0332A704 BL 0x301C318
	0x0332A708 TBNZ X0, 0x0, 0x332A754
	0x0332A70C LDR X0, [X19 + 0x10]
	0x0332A710 CBZ X0, 0x332A784
	0x0332A714 ADRP X9, 0xDCA000
	0x0332A718 LDR X9, [X9 + 0x1B8]
	0x0332A71C LDR W10, [X0 + 0x1C]
	0x0332A720 LDR X8, [X0 + 0x10]
	0x0332A724 LDR X9, [X9]
	0x0332A728 ADD W10, W10, 0x1
	0x0332A72C STR W10, [X0 + 0x1C]
	0x0332A730 CBZ X8, 0x332A784
	0x0332A734 LDRSW X10, [X0 + 0x18]
	0x0332A738 LDR W11, [X8 + 0x18]
	0x0332A73C CMP W10, W11
	0x0332A740 B.CS 0x332A764
	0x0332A744 ADD W9, W10, 0x1
	0x0332A748 ADD X8, X8, X10, 0x3, LSL
	0x0332A74C STR W9, [X0 + 0x18]
	0x0332A750 STR X20, [X8 + 0x20]
	0x0332A754 LDP X20, X19, [X31 + 0x20]
	0x0332A758 LDP X22, X21, [X31 + 0x10]
	0x0332A75C LDR X30, [X31], #0x30
	0x0332A760 RET
	0x0332A764 LDR X8, [X9 + 0x20]
	0x0332A768 MOV X1, X20
	0x0332A76C LDP X20, X19, [X31 + 0x20]
	0x0332A770 LDP X22, X21, [X31 + 0x10]
	0x0332A774 LDR X8, [X8 + 0xC0]
	0x0332A778 LDR X2, [X8 + 0x70]
	0x0332A77C LDR X30, [X31], #0x30
	0x0332A780 B 0x301BF90
	0x0332A784 BL 0x1C16F20
	0x0332A788 STR X30, [X31 - 0x50]!
	0x0332A78C STP X26, X25, [X31 + 0x10]
	0x0332A790 STP X24, X23, [X31 + 0x20]
	0x0332A794 STP X22, X21, [X31 + 0x30]
	0x0332A798 STP X20, X19, [X31 + 0x40]
	0x0332A79C ADRP X22, 0x10B2000
	0x0332A7A0 ADRP X21, 0xDC9000
	0x0332A7A4 LDRB W8, [X22 + 0xCAC]
	0x0332A7A8 LDR X21, [X21 + 0x8F0]
	0x0332A7AC MOV X23, X3
	0x0332A7B0 MOV W24, W2
	0x0332A7B4 MOV X20, X1
	0x0332A7B8 MOV X19, X0
	0x0332A7BC TBNZ X8, 0x0, 0x332A7E0
	0x0332A7C0 ADRP X0, 0xDCB000
	0x0332A7C4 LDR X0, [X0 + 0x170]
	0x0332A7C8 BL 0x1C16CF4
	0x0332A7CC ADRP X0, 0xDC9000
	0x0332A7D0 LDR X0, [X0 + 0x8F0]
	0x0332A7D4 BL 0x1C16CF4
	0x0332A7D8 MOVZ W8, 0x1
	0x0332A7DC STRB W8, [X22 + 0xCAC]
	0x0332A7E0 MOV X0, X20
	0x0332A7E4 MOV W1, W24
	0x0332A7E8 BL 0x332A280
	0x0332A7EC LDR X8, [X21]
	0x0332A7F0 MOV W21, W0
	0x0332A7F4 MOV X0, X8
	0x0332A7F8 BL 0x1C16F10
	0x0332A7FC MOV X1, X31
	0x0332A800 MOV X22, X0
	0x0332A804 BL 0x3231AC4
	0x0332A808 CBZ X20, 0x332A964
	0x0332A80C LDR W8, [X20 + 0x10]
	0x0332A810 CMP W21, W8
	0x0332A814 B.GE 0x332A918
	0x0332A818 ADRP X25, 0xDCB000
	0x0332A81C LDR X25, [X25 + 0x170]
	0x0332A820 CMP W21, W24
	0x0332A824 CSEL X23, X23, X31, EQ
	0x0332A828 MOV X0, X20
	0x0332A82C MOV W1, W21
	0x0332A830 MOV X2, X31
	0x0332A834 BL 0x3222A1C
	0x0332A838 AND W8, W0, 0xFFFF
	0x0332A83C CMP W8, 0x5C
	0x0332A840 B.EQ 0x332A87C
	0x0332A844 CMP W8, 0x27
	0x0332A848 B.EQ 0x332A920
	0x0332A84C MOV W24, W0
	0x0332A850 LDR X0, [X25]
	0x0332A854 LDR W8, [X0 + 0xE0]
	0x0332A858 CBNZ W8, 0x332A860
	0x0332A85C BL 0x1C16DFC
	0x0332A860 MOV W0, W24
	0x0332A864 MOV X1, X31
	0x0332A868 BL 0x3317FCC
	0x0332A86C CBZ X22, 0x332A964
	0x0332A870 TBNZ X0, 0x0, 0x332A8CC
	0x0332A874 MOVZ W26, 0x1
	0x0332A878 B 0x332A8A4
	0x0332A87C LDR W8, [X20 + 0x10]
	0x0332A880 ADD W1, W21, 0x1
	0x0332A884 CMP W1, W8
	0x0332A888 B.GE 0x332A8B8
	0x0332A88C MOV X0, X20
	0x0332A890 MOV X2, X31
	0x0332A894 BL 0x3222A1C
	0x0332A898 CBZ X22, 0x332A964
	0x0332A89C MOV W24, W0
	0x0332A8A0 MOVZ W26, 0x2
	0x0332A8A4 MOV X0, X22
	0x0332A8A8 MOV W1, W24
	0x0332A8AC MOV X2, X31
	0x0332A8B0 BL 0x3233D30
	0x0332A8B4 ADD W1, W21, W26
	0x0332A8B8 LDR W8, [X20 + 0x10]
	0x0332A8BC MOV W21, W1
	0x0332A8C0 CMP W1, W8
	0x0332A8C4 B.LT 0x332A828
	0x0332A8C8 B 0x332A948
	0x0332A8CC LDR X8, [X22]
	0x0332A8D0 MOV X0, X22
	0x0332A8D4 LDP X9, X1, [X8 + 0x168]
	0x0332A8D8 BLR X9
	0x0332A8DC MOV X2, X0
	0x0332A8E0 MOV X0, X19
	0x0332A8E4 MOV X1, X23
	0x0332A8E8 BL 0x332A37C
	0x0332A8EC MOV X0, X22
	0x0332A8F0 MOV W1, W31
	0x0332A8F4 MOV X2, X31
	0x0332A8F8 BL 0x3232ADC
	0x0332A8FC LDR W8, [X20 + 0x10]
	0x0332A900 ADD W21, W21, 0x1
	0x0332A904 MOV X23, X31
	0x0332A908 MOV W1, W21
	0x0332A90C CMP W21, W8
	0x0332A910 B.LT 0x332A828
	0x0332A914 B 0x332A948
	0x0332A918 MOV W1, W21
	0x0332A91C B 0x332A948
	0x0332A920 CBZ X22, 0x332A964
	0x0332A924 LDR X8, [X22]
	0x0332A928 MOV X0, X22
	0x0332A92C LDP X9, X1, [X8 + 0x168]
	0x0332A930 BLR X9
	0x0332A934 MOV X2, X0
	0x0332A938 MOV X0, X19
	0x0332A93C MOV X1, X23
	0x0332A940 BL 0x332A37C
	0x0332A944 ADD W1, W21, 0x1
	0x0332A948 LDP X20, X19, [X31 + 0x40]
	0x0332A94C LDP X22, X21, [X31 + 0x30]
	0x0332A950 LDP X24, X23, [X31 + 0x20]
	0x0332A954 LDP X26, X25, [X31 + 0x10]
	0x0332A958 MOV W0, W1
	0x0332A95C LDR X30, [X31], #0x50
	0x0332A960 RET
	0x0332A964 BL 0x1C16F20
	0x0332A968 STR X30, [X31 - 0x30]!
	0x0332A96C STP X22, X21, [X31 + 0x10]
	0x0332A970 STP X20, X19, [X31 + 0x20]
	0x0332A974 MOVZ W8, 0x1
	0x0332A978 STR W8, [X3]
	0x0332A97C CBZ X0, 0x332A9E8
	0x0332A980 LDR W8, [X0 + 0x10]
	0x0332A984 ADD W22, W2, 0x1
	0x0332A988 MOV X21, X0
	0x0332A98C CMP W22, W8
	0x0332A990 B.GE 0x332A9D4
	0x0332A994 MOV X19, X3
	0x0332A998 MOV W20, W1
	0x0332A99C MOV X0, X21
	0x0332A9A0 MOV W1, W22
	0x0332A9A4 MOV X2, X31
	0x0332A9A8 BL 0x3222A1C
	0x0332A9AC AND W8, W0, 0xFFFF
	0x0332A9B0 CMP W8, W20, UXTH
	0x0332A9B4 B.NE 0x332A9D4
	0x0332A9B8 LDR W8, [X19]
	0x0332A9BC ADD W22, W22, 0x1
	0x0332A9C0 ADD W8, W8, 0x1
	0x0332A9C4 STR W8, [X19]
	0x0332A9C8 LDR W8, [X21 + 0x10]
	0x0332A9CC CMP W22, W8
	0x0332A9D0 B.LT 0x332A99C
	0x0332A9D4 MOV W0, W22
	0x0332A9D8 LDP X20, X19, [X31 + 0x20]
	0x0332A9DC LDP X22, X21, [X31 + 0x10]
	0x0332A9E0 LDR X30, [X31], #0x30
	0x0332A9E4 RET
	0x0332A9E8 BL 0x1C16F20
	0x0332A9EC SUB X31, X31, 0x50
	0x0332A9F0 STP X30, X25, [X31 + 0x10]
	0x0332A9F4 STP X24, X23, [X31 + 0x20]
	0x0332A9F8 STP X22, X21, [X31 + 0x30]
	0x0332A9FC STP X20, X19, [X31 + 0x40]
	0x0332AA00 ADRP X21, 0x10B2000
	0x0332AA04 LDRB W8, [X21 + 0xCAE]
	0x0332AA08 MOV X19, X1
	0x0332AA0C MOV X20, X0
	0x0332AA10 TBNZ X8, 0x0, 0x332AA40
	0x0332AA14 ADRP X0, 0xDCB000
	0x0332AA18 LDR X0, [X0 + 0x170]
	0x0332AA1C BL 0x1C16CF4
	0x0332AA20 ADRP X0, 0xDFE000
	0x0332AA24 LDR X0, [X0 + 0x508]
	0x0332AA28 BL 0x1C16CF4
	0x0332AA2C ADRP X0, 0xDD2000
	0x0332AA30 LDR X0, [X0 + 0x790]
	0x0332AA34 BL 0x1C16CF4
	0x0332AA38 MOVZ W8, 0x1
	0x0332AA3C STRB W8, [X21 + 0xCAE]
	0x0332AA40 STR W31, [X31 + 0xC]
	0x0332AA44 STR W31, [X20 + 0x18]
	0x0332AA48 CBZ X19, 0x332AC24
	0x0332AA4C LDR W8, [X19 + 0x10]
	0x0332AA50 CMP W8, 0x1
	0x0332AA54 B.LT 0x332AC0C
	0x0332AA58 ADRP X23, 0xDD2000
	0x0332AA5C ADRP X24, 0xDFE000
	0x0332AA60 ADRP X25, 0xDCB000
	0x0332AA64 LDR X23, [X23 + 0x790]
	0x0332AA68 LDR X24, [X24 + 0x508]
	0x0332AA6C LDR X25, [X25 + 0x170]
	0x0332AA70 MOV W21, W31
	0x0332AA74 MOV X0, X19
	0x0332AA78 MOV W1, W21
	0x0332AA7C MOV X2, X31
	0x0332AA80 BL 0x3222A1C
	0x0332AA84 AND W8, W0, 0xFFFF
	0x0332AA88 MOV W22, W0
	0x0332AA8C CMP W8, 0x4D
	0x0332AA90 B.HI 0x332AB1C
	0x0332AA94 CMP W8, 0x27
	0x0332AA98 B.EQ 0x332ABE0
	0x0332AA9C CMP W8, 0x2E
	0x0332AAA0 B.EQ 0x332AB88
	0x0332AAA4 CMP W8, 0x4D
	0x0332AAA8 B.NE 0x332AB58
	0x0332AAAC ADD X3, X31, 0xC
	0x0332AAB0 MOVZ W1, 0x4D
	0x0332AAB4 MOV X0, X19
	0x0332AAB8 MOV W2, W21
	0x0332AABC BL 0x332A968
	0x0332AAC0 LDR W8, [X31 + 0xC]
	0x0332AAC4 MOV W21, W0
	0x0332AAC8 CMP W8, 0x4
	0x0332AACC B.LT 0x332AB10
	0x0332AAD0 LDR W8, [X19 + 0x10]
	0x0332AAD4 CMP W21, W8
	0x0332AAD8 B.GE 0x332AB10
	0x0332AADC MOV X0, X19
	0x0332AAE0 MOV W1, W21
	0x0332AAE4 MOV X2, X31
	0x0332AAE8 BL 0x3222A1C
	0x0332AAEC AND W8, W0, 0xFFFF
	0x0332AAF0 CMP W8, 0x27
	0x0332AAF4 B.NE 0x332AB10
	0x0332AAF8 LDR X3, [X24]
	0x0332AAFC ADD W2, W21, 0x1
	0x0332AB00 MOV X0, X20
	0x0332AB04 MOV X1, X19
	0x0332AB08 BL 0x332A788
	0x0332AB0C MOV W21, W0
	0x0332AB10 LDR W8, [X20 + 0x18]
	0x0332AB14 ORR W8, W8, 0x2
	0x0332AB18 B 0x332ABD8
	0x0332AB1C CMP W8, 0x5C
	0x0332AB20 B.EQ 0x332ABFC
	0x0332AB24 CMP W8, 0x64

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+48], X29
	003 Move [X31+56], X30
	004 Move [X31+64], X28
	005 Move [X31+72], X27
	006 Move [X31+80], X26
	007 Move [X31+88], X25
	008 Move [X31+96], X24
	009 Move [X31+104], X23
	010 Move [X31+112], X22
	011 Move [X31+120], X21
	012 Move [X31+128], X20
	013 Move [X31+136], X19
	014 Move [X31+32], X0
	015 Move X20, 0x10B3000
	016 Move X21, 0xDCC000
	017 Move W8, [X20+3237]
	018 Move X21, [X21+368]
	019 Move X19, X4
	020 Move X23, X3
	021 Move X22, X2
	022 Move W24, W1
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {44}
	027 Move X0, 0xDCC000
	028 Move X0, [X0+368]
	029 Call 0x1C17CF4
	030 Move X0, 0xDFF000
	031 Move X0, [X0+808]
	032 Call 0x1C17CF4
	033 Move X0, 0xDFE000
	034 Move X0, [X0+2352]
	035 Call 0x1C17CF4
	036 Move X0, 0xDFD000
	037 Move X0, [X0+3472]
	038 Call 0x1C17CF4
	039 Move X0, 0xDFF000
	040 Move X0, [X0+1264]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X20+3237], W8
	044 Move W8, 11
	045 Move [X31+44], W31
	046 Move [X31+40], W31
	047 Move [X22], W8
	048 Move [X23], W31
	049 Move X0, [X21]
	050 NotImplemented "Instruction LDRH not yet implemented."
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move W0, W26
	056 Move X1, X31
	057 Call Char.IsLetter, X0
	058 Move [X31+28], W0
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {106}
	063 Move X0, [X31+32]
	064 Call DateTimeFormatInfo.get_Culture, X0
	065 Compare X0, 0
	066 JumpIfEqual {419}
	067 Move X8, [X0]
	068 Move X9, [X8+472]
	069 Move X1, [X8+480]
	070 NotImplemented "Instruction BLR not yet implemented."
	071 Compare X0, 0
	072 JumpIfEqual {419}
	073 Move X8, [X0]
	074 Move W1, W26
	075 Move X9, [X8+424]
	076 Move X2, [X8+432]
	077 NotImplemented "Instruction BLR not yet implemented."
	078 Move X20, 0xDFE000
	079 Move X20, [X20+2352]
	080 Move W26, W0
	081 Move X8, [X20]
	082 Move W9, [X8+224]
	083 Compare W9, 0
	084 JumpIfNotEqual {87}
	085 Move X0, X8
	086 Call 0x1C17DFC
	087 Move X21, 0x10B3000
	088 Move W8, [X21+2814]
	089 Compare W8, 0
	090 JumpIfNotEqual {96}
	091 Move X0, 0xDFE000
	092 Move X0, [X0+2352]
	093 Call 0x1C17CF4
	094 Move W8, 1
	095 Move [X21+2814], W8
	096 Move X0, [X20]
	097 Move W8, [X0+224]
	098 Compare W8, 0
	099 JumpIfNotEqual {102}
	100 Call 0x1C17DFC
	101 Move X0, [X20]
	102 Move X8, [X0+184]
	103 Move W8, [X8]
	104 Compare W8, 0
	105 JumpIfEqual {336}
	106 Move [X31+24], W24
	107 Move X8, 0xDFF000
	108 Move X8, [X8+1264]
	109 Move X0, [X8]
	110 Move W8, [X0+224]
	111 Compare W8, 0
	112 JumpIfNotEqual {114}
	113 Call 0x1C17DFC
	114 Move X0, X19
	115 Move X1, X31
	116 Move [X31+8], X23
	117 Move [X31+16], X22
	118 Call __DTString.get_Length, X0
	119 Move X8, [X31+32]
	120 Move W20, [X19+16]
	121 Move W27, W0
	122 Move X25, [X8+344]
	123 Compare X25, 0
	124 JumpIfNotEqual {130}
	125 Move X0, [X31+32]
	126 Call DateTimeFormatInfo.CreateTokenHashTable, X0
	127 Move X25, X0
	128 Compare X0, 0
	129 JumpIfEqual {419}
	130 Move W9, 0x8873
	131 Move W10, 0xE78F
	132 And W8, W26, 0xFFFF
	133 NotImplemented "Instruction MOVK not yet implemented."
	134 NotImplemented "Instruction MOVK not yet implemented."
	135 NotImplemented "Instruction UMADDL not yet implemented."
	136 NotImplemented "Instruction UMADDL not yet implemented."
	137 Move W11, 199
	138 Move X9, X9
	139 ShiftRight X9, 32
	140 And X9, X9, 0x7FFFFFFF
	141 Move X10, X10
	142 ShiftRight X10, 38
	143 And X10, X10, 0x7FFFFFFF
	144 NotImplemented "Instruction MSUB not yet implemented."
	145 Subtract W10, W8, W9
	146 Subtract W28, W27, W20
	147 Add W9, W9, W10
	148 Move W27, [X31+24]
	149 Move W12, 197
	150 Move W9, W9
	151 ShiftRight W9, 7
	152 And W9, W9, 0x7FFFFFFF
	153 NotImplemented "Instruction MSUB not yet implemented."
	154 Add W20, W8, 1
	155 Move W29, 199
	156 Move W8, [X25+24]
	157 NotImplemented "Instruction CMP not yet implemented."
	158 Add X8, X25, W21
	159 Move X24, [X8+32]
	160 Compare X24, 0
	161 JumpIfEqual {335}
	162 Move W8, [X24+24]
	163 And W8, W8, W27
	164 NotImplemented "Instruction CMP not yet implemented."
	165 Move X8, [X24+16]
	166 Compare X8, 0
	167 JumpIfEqual {419}
	168 Move W23, [X8+16]
	169 NotImplemented "Instruction CMP not yet implemented."
	170 Move W8, [X31+28]
	171 Move TEMP, X8
	172 And TEMP, TEMP, 1
	173 Compare TEMP, 1
	174 JumpIfNotEqual {226}
	175 Move X8, 0xDFF000
	176 Move X8, [X8+1264]
	177 Move W22, [X19+16]
	178 Move X0, [X8]
	179 Move W8, [X0+224]
	180 Compare W8, 0
	181 JumpIfNotEqual {183}
	182 Call 0x1C17DFC
	183 Move X0, X19
	184 Move X1, X31
	185 Add W26, W22, W23
	186 Call __DTString.get_Length, X0
	187 NotImplemented "Instruction CMP not yet implemented."
	188 Move X8, 0xDFF000
	189 Move X8, [X8+1264]
	190 Move X0, [X8]
	191 Move W8, [X0+224]
	192 Compare W8, 0
	193 JumpIfNotEqual {195}
	194 Call 0x1C17DFC
	195 Move X0, X19
	196 Move X1, X31
	197 Call __DTString.get_Length, X0
	198 NotImplemented "Instruction CMP not yet implemented."
	199 Move W8, [X19+8]
	200 NotImplemented "Instruction CMP not yet implemented."
	201 Move X8, 0xDCC000
	202 Move X8, [X8+368]
	203 Move X0, [X8]
	204 Move X8, [X19]
	205 Move W9, [X0+224]
	206 NotImplemented "Instruction LDRH not yet implemented."
	207 Compare W9, 0
	208 JumpIfNotEqual {210}
	209 Call 0x1C17DFC
	210 Move W0, W26
	211 Move X1, X31
	212 Call Char.IsLetter, X0
	213 Move TEMP, X0
	214 And TEMP, TEMP, 1
	215 Compare TEMP, 1
	216 JumpIfNotEqual {226}
	217 Move X1, [X24+16]
	218 Move X0, [X31+32]
	219 Move W2, W26
	220 Move X3, X31
	221 Call 0x3338F84
	222 Move TEMP, X0
	223 And TEMP, TEMP, 1
	224 Compare TEMP, 1
	225 JumpIfNotEqual {282}
	226 Move X0, [X24+16]
	227 Compare X0, 0
	228 JumpIfEqual {419}
	229 Move W8, [X0+16]
	230 NotImplemented "Instruction CMP not yet implemented."
	231 NotImplemented "Instruction LDRSW not yet implemented."
	232 Move W9, [X19+8]
	233 NotImplemented "Instruction CMP not yet implemented."
	234 Move X9, [X19]
	235 Move W1, W31
	236 Move X2, X31
	237 NotImplemented "Instruction LDRH not yet implemented."
	238 Call String.get_Chars, X0, X1
	239 NotImplemented "Instruction CMP not yet implemented."
	240 Move X0, [X31+32]
	241 Call DateTimeFormatInfo.get_Culture, X0
	242 Compare X0, 0
	243 JumpIfEqual {419}
	244 Move X8, [X0]
	245 Move X9, [X8+504]
	246 Move X1, [X8+512]
	247 NotImplemented "Instruction BLR not yet implemented."
	248 Move X8, [X24+16]
	249 Compare X8, 0
	250 JumpIfEqual {419}
	251 Move W27, [X8+16]
	252 Move X8, 0xDFD000
	253 NotImplemented "Instruction LDRSW not yet implemented."
	254 Move W9, [X19+8]
	255 Move X8, [X8+3472]
	256 Move X26, X0
	257 Move X22, [X8]
	258 Subtract W8, W9, W23
	259 NotImplemented "Instruction CMP not yet implemented."
	260 Move X0, X31
	261 Call ThrowHelper.ThrowArgumentOutOfRangeException
	262 Move X0, [X22+32]
	263 Move X22, [X19]
	264 Move W8, [X0+309]
	265 Move TEMP, X8
	266 And TEMP, TEMP, 1
	267 Compare TEMP, 1
	268 JumpIfEqual {270}
	269 Call 0x1C5D684
	270 Compare X26, 0
	271 JumpIfEqual {419}
	272 Move X3, [X24+16]
	273 Add X1, X22, X23
	274 Move W4, 1
	275 Move X0, X26
	276 Move X2, X27
	277 Move X5, X31
	278 Call CompareInfo.Compare, X0, X1, X2, X3
	279 Move W27, [X31+24]
	280 Compare W0, 0
	281 JumpIfEqual {366}
	282 Move W8, [X24+24]
	283 NotImplemented "Instruction CMP not yet implemented."
	284 Move X8, [X31+32]
	285 Move W0, [X8+324]
	286 Add W31, W0, 1
	287 Move TEMP, X0
	288 And TEMP, TEMP, 4
	289 Compare TEMP, 4
	290 JumpIfNotEqual {297}
	291 Move X0, [X31+32]
	292 Call DateTimeFormatInfo.InitializeFormatFlags, X0
	293 Move TEMP, X0
	294 And TEMP, TEMP, 4
	295 Compare TEMP, 4
	296 JumpIfEqual {312}
	297 Move W8, [X24+24]
	298 NotImplemented "Instruction CMP not yet implemented."
	299 Move X8, [X31+32]
	300 Move W0, [X8+324]
	301 Add W31, W0, 1
	302 Move TEMP, X0
	303 And TEMP, TEMP, 16
	304 Compare TEMP, 16
	305 JumpIfEqual {312}
	306 Move X0, [X31+32]
	307 Call DateTimeFormatInfo.InitializeFormatFlags, X0
	308 Move TEMP, X0
	309 And TEMP, TEMP, 16
	310 Compare TEMP, 16
	311 JumpIfNotEqual {331}
	312 Move X8, 0xDFF000
	313 Move X8, [X8+1264]
	314 Move [X31+40], W31
	315 Move X26, [X24+16]
	316 Move X0, [X8]
	317 Move W8, [X0+224]
	318 Compare W8, 0
	319 JumpIfNotEqual {321}
	320 Call 0x1C17DFC
	321 Add X3, X31, 40
	322 Move W2, 1
	323 Move X0, X19
	324 Move X1, X26
	325 Move X4, X31
	326 Call __DTString.MatchSpecifiedWords, X0, X1, X2, X3
	327 Move TEMP, X0
	328 And TEMP, TEMP, 1
	329 Compare TEMP, 1
	330 JumpIfEqual {403}
	331 Add W8, W21, W20
	332 Subtract W9, W8, 199
	333 NotImplemented "Instruction CSEL not yet implemented."
	334 Subtract W29, W29, 1
	335 Move W0, W31
	336 Move X20, 0xDFF000
	337 Move X20, [X20+808]
	338 Move X0, [X20]
	339 Move W8, [X0+224]
	340 Compare W8, 0
	341 JumpIfNotEqual {343}
	342 Call 0x1C17DFC
	343 NotImplemented "Instruction CMP not yet implemented."
	344 Subtract W8, W26, 1424
	345 And W8, W8, 0xFFFF
	346 NotImplemented "Instruction CMP not yet implemented."
	347 Move X0, [X20]
	348 Move W8, [X0+224]
	349 Compare W8, 0
	350 JumpIfNotEqual {352}
	351 Call 0x1C17DFC
	352 Add X1, X31, 44
	353 Move X0, X19
	354 Move X2, X23
	355 Call DateTimeFormatInfo.TryParseHebrewNumber, X0, X1, X2
	356 Move TEMP, X0
	357 And TEMP, TEMP, 1
	358 Compare TEMP, 1
	359 JumpIfNotEqual {106}
	360 Move W8, [X31+44]
	361 Compare W8, 0
	362 JumpIfEqual {417}
	363 Move W8, 11
	364 Move W0, W31
	365 Move [X22], W8
	366 Move W8, [X24+24]
	367 Move X9, [X31+16]
	368 And W8, W8, W27
	369 Move [X9], W8
	370 Move W8, [X24+28]
	371 Move X9, [X31+8]
	372 Move [X9], W8
	373 Move X8, [X24+16]
	374 Compare X8, 0
	375 JumpIfEqual {419}
	376 Move X9, 0xDFF000
	377 Move X9, [X9+1264]
	378 Move W20, [X8+16]
	379 Move X0, [X9]
	380 Move W9, [X0+224]
	381 Compare W9, 0
	382 JumpIfNotEqual {384}
	383 Call 0x1C17DFC
	384 Move X0, X19
	385 Move W1, W20
	386 Move X2, X31
	387 Call __DTString.Advance, X0, X1
	388 Move W0, 1
	389 Move X20, [X31+128]
	390 Move X19, [X31+136]
	391 Move X22, [X31+112]
	392 Move X21, [X31+120]
	393 Move X24, [X31+96]
	394 Move X23, [X31+104]
	395 Move X26, [X31+80]
	396 Move X25, [X31+88]
	397 Move X28, [X31+64]
	398 Move X27, [X31+72]
	399 Move X29, [X31+48]
	400 Move X30, [X31+56]
	401 Add X31, X31, 144
	402 Return X0
	403 Move W8, [X24+24]
	404 Move X9, [X31+16]
	405 And W8, W8, W27
	406 Move [X9], W8
	407 Move W8, [X24+28]
	408 Move X9, [X31+8]
	409 Move [X9], W8
	410 Move X8, 0xDFF000
	411 Move X8, [X8+1264]
	412 Move W20, [X31+40]
	413 Move X0, [X8]
	414 Move W8, [X0+224]
	415 Compare W8, 0
	416 JumpIfNotEqual {384}
	417 Move W8, 12
	418 Move [X22], W8
	419 Call 0x1C17F20
	420 Call 0x1C17F28

Method: System.Void InsertAtCurrentHashNode(System.Globalization.DateTimeFormatInfo/TokenHashValue[] hashTable, System.String str, System.Char ch, System.TokenType tokenType, System.Int32 tokenValue, System.Int32 pos, System.Int32 hashcode, System.Int32 hashProbe)

Disassembly:
	0x0332AB28 B.EQ 0x332ABAC
	0x0332AB2C CMP W8, 0x79
	0x0332AB30 B.NE 0x332AB58
	0x0332AB34 ADD X3, X31, 0xC
	0x0332AB38 MOVZ W1, 0x79
	0x0332AB3C MOV X0, X19
	0x0332AB40 MOV W2, W21
	0x0332AB44 BL 0x332A968
	0x0332AB48 LDR W8, [X20 + 0x18]
	0x0332AB4C MOV W21, W0
	0x0332AB50 ORR W8, W8, 0x1
	0x0332AB54 B 0x332ABD8
	0x0332AB58 LDR W8, [X20 + 0x18]
	0x0332AB5C CMP W8, 0x7
	0x0332AB60 B.NE 0x332ABA4
	0x0332AB64 LDR X0, [X25]
	0x0332AB68 LDR W8, [X0 + 0xE0]
	0x0332AB6C CBNZ W8, 0x332AB74
	0x0332AB70 BL 0x1C16DFC
	0x0332AB74 MOV W0, W22
	0x0332AB78 MOV X1, X31
	0x0332AB7C BL 0x3317FCC
	0x0332AB80 TBZ X0, 0x0, 0x332ABA0
	0x0332AB84 B 0x332ABA4
	0x0332AB88 LDR W8, [X20 + 0x18]
	0x0332AB8C CMP W8, 0x7
	0x0332AB90 B.NE 0x332ABA4
	0x0332AB94 LDR X1, [X23]
	0x0332AB98 MOV X0, X20
	0x0332AB9C BL 0x332A638
	0x0332ABA0 STR W31, [X20 + 0x18]
	0x0332ABA4 ADD W21, W21, 0x1
	0x0332ABA8 B 0x332AC00
	0x0332ABAC ADD X3, X31, 0xC
	0x0332ABB0 MOVZ W1, 0x64
	0x0332ABB4 MOV X0, X19
	0x0332ABB8 MOV W2, W21
	0x0332ABBC BL 0x332A968
	0x0332ABC0 LDR W8, [X31 + 0xC]
	0x0332ABC4 MOV W21, W0
	0x0332ABC8 CMP W8, 0x2
	0x0332ABCC B.GT 0x332AC00
	0x0332ABD0 LDR W8, [X20 + 0x18]
	0x0332ABD4 ORR W8, W8, 0x4
	0x0332ABD8 STR W8, [X20 + 0x18]
	0x0332ABDC B 0x332AC00
	0x0332ABE0 ADD W2, W21, 0x1
	0x0332ABE4 MOV X0, X20
	0x0332ABE8 MOV X1, X19
	0x0332ABEC MOV X3, X31
	0x0332ABF0 BL 0x332A788
	0x0332ABF4 MOV W21, W0
	0x0332ABF8 B 0x332AC00
	0x0332ABFC ADD W21, W21, 0x2
	0x0332AC00 LDR W8, [X19 + 0x10]
	0x0332AC04 CMP W21, W8
	0x0332AC08 B.LT 0x332AA74
	0x0332AC0C LDP X20, X19, [X31 + 0x40]
	0x0332AC10 LDP X22, X21, [X31 + 0x30]
	0x0332AC14 LDP X24, X23, [X31 + 0x20]
	0x0332AC18 LDP X30, X25, [X31 + 0x10]
	0x0332AC1C ADD X31, X31, 0x50
	0x0332AC20 RET
	0x0332AC24 BL 0x1C16F20
	0x0332AC28 STP X30, X23, [X31 - 0x30]!
	0x0332AC2C STP X22, X21, [X31 + 0x10]
	0x0332AC30 STP X20, X19, [X31 + 0x20]
	0x0332AC34 CMP X0, X1
	0x0332AC38 B.EQ 0x332ACB0
	0x0332AC3C MOV X20, X0
	0x0332AC40 CBZ X0, 0x332ACD4
	0x0332AC44 MOV X19, X1
	0x0332AC48 CBZ X1, 0x332ACD4
	0x0332AC4C LDR W8, [X20 + 0x18]
	0x0332AC50 LDR W9, [X19 + 0x18]
	0x0332AC54 CMP W8, W9
	0x0332AC58 B.NE 0x332ACB8
	0x0332AC5C CMP W8, 0x1
	0x0332AC60 B.LT 0x332ACB0
	0x0332AC64 MOV X21, X31
	0x0332AC68 ADD X22, X19, 0x20
	0x0332AC6C ADD X23, X20, 0x20
	0x0332AC70 CMP W21, W8
	0x0332AC74 B.CS 0x332ACD0
	0x0332AC78 LDR W8, [X19 + 0x18]
	0x0332AC7C CMP W21, W8
	0x0332AC80 B.CS 0x332ACD0
	0x0332AC84 LDR X0, [X23, X21, LSL #3]
	0x0332AC88 CBZ X0, 0x332ACD4
	0x0332AC8C LDR X1, [X22, X21, LSL #3]
	0x0332AC90 MOV X2, X31
	0x0332AC94 BL 0x322693C
	0x0332AC98 TBZ X0, 0x0, 0x332ACBC
	0x0332AC9C LDR W8, [X20 + 0x18]
	0x0332ACA0 ADD X21, X21, 0x1
	0x0332ACA4 CMP W21, W8
	0x0332ACA8 B.LT 0x332AC70
	0x0332ACAC B 0x332ACBC
	0x0332ACB0 MOVZ W0, 0x1
	0x0332ACB4 B 0x332ACBC
	0x0332ACB8 MOV W0, W31
	0x0332ACBC LDP X20, X19, [X31 + 0x20]
	0x0332ACC0 LDP X22, X21, [X31 + 0x10]
	0x0332ACC4 AND W0, W0, 0x1
	0x0332ACC8 LDP X30, X23, [X31], #0x30
	0x0332ACCC RET
	0x0332ACD0 BL 0x1C16F28

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X27, 0x10B3000
	014 Move W8, [X27+3238]
	015 Move W19, W7
	016 Move W23, W6
	017 Move W24, W5
	018 Move W25, W4
	019 Move W20, W3
	020 Move X26, X2
	021 Move X21, X1
	022 Move X22, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {32}
	027 Move X0, 0xDFF000
	028 Move X0, [X0+1120]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X27+3238], W8
	032 Compare X21, 0
	033 JumpIfEqual {126}
	034 Move W8, [X21+24]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X8, 0xDFF000
	037 Move X8, [X8+1120]
	038 Add X29, X21, W19
	039 Add X29, X29, 32
	040 Move X28, [X29]
	041 Move X0, [X8]
	042 Call 0x1C17F10
	043 Move X1, X31
	044 Move X27, X0
	045 Call Object..ctor, X0
	046 Move [X27+16], X26
	047 Move [X27+24], W25
	048 Move [X27+28], W24
	049 Move X8, [X21]
	050 Move X0, X27
	051 Move X1, [X8+64]
	052 Call 0x1C17E00
	053 Compare X0, 0
	054 JumpIfEqual {128}
	055 Move W8, [X21+24]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move W26, [X31+96]
	058 Move [X29], X27
	059 Move X24, X28
	060 Move W27, W23
	061 Add W23, W23, 1
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move W8, [X21+24]
	064 Add W9, W19, W26
	065 Subtract W10, W9, 199
	066 NotImplemented "Instruction CSEL not yet implemented."
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Add X29, X21, W19
	069 Add X29, X29, 32
	070 Move X28, [X29]
	071 Compare X28, 0
	072 JumpIfEqual {99}
	073 Move X0, X22
	074 Call DateTimeFormatInfo.get_Culture, X0
	075 Compare X0, 0
	076 JumpIfEqual {126}
	077 Move X8, [X0]
	078 Move X9, [X8+472]
	079 Move X1, [X8+480]
	080 NotImplemented "Instruction BLR not yet implemented."
	081 Move X8, [X28+16]
	082 Compare X8, 0
	083 JumpIfEqual {126}
	084 Move X25, X0
	085 Move X0, X8
	086 Move W1, W31
	087 Move X2, X31
	088 Call String.get_Chars, X0, X1
	089 Compare X25, 0
	090 JumpIfEqual {126}
	091 Move X8, [X25]
	092 Move W1, W0
	093 Move X0, X25
	094 Move X9, [X8+424]
	095 Move X2, [X8+432]
	096 NotImplemented "Instruction BLR not yet implemented."
	097 And W8, W0, 0xFFFF
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Compare X24, 0
	100 JumpIfEqual {107}
	101 Move X8, [X21]
	102 Move X0, X24
	103 Move X1, [X8+64]
	104 Call 0x1C17E00
	105 Compare X0, 0
	106 JumpIfEqual {128}
	107 Move W8, [X21+24]
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Add W23, W27, 1
	110 Move [X29], X24
	111 Compare X28, 0
	112 JumpIfNotEqual {59}
	113 Move X20, [X31+80]
	114 Move X19, [X31+88]
	115 Move X22, [X31+64]
	116 Move X21, [X31+72]
	117 Move X24, [X31+48]
	118 Move X23, [X31+56]
	119 Move X26, [X31+32]
	120 Move X25, [X31+40]
	121 Move X28, [X31+16]
	122 Move X27, [X31+24]
	123 Move X29, [X31+96]
	124 Move X30, [X31+104]
	125 Return 
	126 Call 0x1C17F20
	127 Call 0x1C17F28
	128 Call 0x1C17F44
	129 Move X1, X31
	130 Call 0x1C17DEC

Method: System.Void InsertHash(System.Globalization.DateTimeFormatInfo/TokenHashValue[] hashTable, System.String str, System.TokenType tokenType, System.Int32 tokenValue)

Disassembly:
	0x03328FC4 CBNZ W8, 0x3328FDC
	0x03328FC8 ADRP X0, 0xDFF000
	0x03328FCC LDR X0, [X0 + 0x930]
	0x03328FD0 BL 0x1C16CF4
	0x03328FD4 MOVZ W8, 0x1
	0x03328FD8 STRB W8, [X21 + 0xAFE]
	0x03328FDC LDR X0, [X20]
	0x03328FE0 LDR W8, [X0 + 0xE0]
	0x03328FE4 CBNZ W8, 0x3328FF0
	0x03328FE8 BL 0x1C16DFC
	0x03328FEC LDR X0, [X20]
	0x03328FF0 LDR X8, [X0 + 0xB8]
	0x03328FF4 LDRB W8, [X8]
	0x03328FF8 CBNZ W8, 0x332905C
	0x03328FFC CBZ X19, 0x3329090
	0x03329000 ADRP X20, 0xDFF000
	0x03329004 ADRP X21, 0xDCA000
	0x03329008 LDR X20, [X20 + 0x4D8]
	0x0332900C B 0x3EB162C
	0x03329010 MOV X0, X19
	0x03329014 MOV X1, X31
	0x03329018 BL 0x33BE520
	0x0332901C LDR X8, [X21]
	0x03329020 LDR X20, [X20]
	0x03329024 MOV X19, X0
	0x03329028 LDR W9, [X8 + 0xE0]
	0x0332902C CBNZ W9, 0x3329038
	0x03329030 MOV X0, X8
	0x03329034 BL 0x1C16DFC
	0x03329038 MOV X0, X20
	0x0332903C MOV X1, X31
	0x03329040 BL 0x338C698
	0x03329044 MOV X1, X0
	0x03329048 MOV X0, X19
	0x0332904C LDP X20, X19, [X31 + 0x10]
	0x03329050 MOV X2, X31
	0x03329054 LDP X30, X21, [X31], #0x20
	0x03329058 B 0x3395194
	0x0332905C ADRP X0, 0xDF5000
	0x03329060 LDR X0, [X0 + 0xC50]
	0x03329064 BL 0x1C16D08
	0x03329068 BL 0x1C16F10
	0x0332906C MOV X1, X31
	0x03329070 MOV X19, X0
	0x03329074 BL 0x338E344
	0x03329078 ADRP X0, 0xDFF000
	0x0332907C LDR X0, [X0 + 0x4E0]
	0x03329080 BL 0x1C16D08
	0x03329084 MOV X1, X0
	0x03329088 MOV X0, X19
	0x0332908C BL 0x1C16DEC
	0x03329090 BL 0x1C16F20
	0x03329094 SUB X31, X31, 0x40
	0x03329098 STP X30, X23, [X31 + 0x10]
	0x0332909C STP X22, X21, [X31 + 0x20]
	0x033290A0 STP X20, X19, [X31 + 0x30]
	0x033290A4 ADRP X22, 0x10B3000
	0x033290A8 LDRB W8, [X22 + 0xCA3]
	0x033290AC MOV X19, X2
	0x033290B0 MOV X21, X1
	0x033290B4 MOV X20, X0
	0x033290B8 TBNZ X8, 0x0, 0x33290E8
	0x033290BC ADRP X0, 0xDFF000
	0x033290C0 LDR X0, [X0 + 0x4E8]
	0x033290C4 BL 0x1C16CF4
	0x033290C8 ADRP X0, 0xDF9000
	0x033290CC LDR X0, [X0 + 0x28]
	0x033290D0 BL 0x1C16CF4
	0x033290D4 ADRP X0, 0xDFF000
	0x033290D8 LDR X0, [X0 + 0x4F0]
	0x033290DC BL 0x1C16CF4
	0x033290E0 MOVZ W8, 0x1
	0x033290E4 STRB W8, [X22 + 0xCA3]
	0x033290E8 MOVN W8, 0x0
	0x033290EC STR X31, [X31 + 0x8]
	0x033290F0 STR W8, [X19]
	0x033290F4 STRB W31, [X21]
	0x033290F8 LDRSW X23, [X20 + 0x10]
	0x033290FC LDR W8, [X20 + 0x8]
	0x03329100 CMP W23, W8
	0x03329104 B.CS 0x33291F8
	0x03329108 ADRP X22, 0xDFF000
	0x0332910C LDR X22, [X22 + 0x4E8]
	0x03329110 LDR X8, [X20]
	0x03329114 LDR X0, [X22]
	0x03329118 LDRH W21, [X8, X23, LSL #1]
	0x0332911C LDR W9, [X0 + 0xE0]
	0x03329120 CBNZ W9, 0x3329128
	0x03329124 BL 0x1C16DFC
	0x03329128 MOV W0, W21
	0x0332912C BL 0x33291FC
	0x03329130 TBZ X0, 0x0, 0x33291E0
	0x03329134 STRB W31, [X31 + 0x8]
	0x03329138 STR W31, [X31 + 0xC]
	0x0332913C LDR W8, [X20 + 0x8]
	0x03329140 ADD W9, W23, 0x1
	0x03329144 MOV W23, W9
	0x03329148 SUB W9, W9, 0x1
	0x0332914C CMP W9, W8
	0x03329150 B.CS 0x33291F8
	0x03329154 LDR X0, [X22]
	0x03329158 LDR X8, [X20]
	0x0332915C LDR W10, [X0 + 0xE0]
	0x03329160 LDRH W21, [X8, W9, SXTW]
	0x03329164 CBNZ W10, 0x332916C
	0x03329168 BL 0x1C16DFC
	0x0332916C ADD X1, X31, 0x8
	0x03329170 MOV W0, W21
	0x03329174 BL 0x33292D8
	0x03329178 CMP W0, 0x2
	0x0332917C B.CC 0x33291E0
	0x03329180 LDR W8, [X20 + 0x8]
	0x03329184 CMP W23, W8
	0x03329188 B.GE 0x332919C
	0x0332918C CMP W0, 0x2
	0x03329190 ADD W9, W23, 0x1
	0x03329194 B.NE 0x3329144
	0x03329198 B 0x33291A4
	0x0332919C CMP W0, 0x2
	0x033291A0 B.NE 0x33291E0
	0x033291A4 ADRP X8, 0xDFF000
	0x033291A8 LDR X8, [X8 + 0x4F0]
	0x033291AC LDR W21, [X20 + 0x10]
	0x033291B0 LDR X0, [X8]
	0x033291B4 LDR W8, [X0 + 0xE0]
	0x033291B8 CBNZ W8, 0x33291C0
	0x033291BC BL 0x1C16DFC
	0x033291C0 SUB W1, W23, W21
	0x033291C4 MOV X0, X20
	0x033291C8 MOV X2, X31
	0x033291CC BL 0x3374BA0
	0x033291D0 LDR W8, [X31 + 0xC]
	0x033291D4 MOVZ W0, 0x1
	0x033291D8 STR W8, [X19]
	0x033291DC B 0x33291E4
	0x033291E0 MOV W0, W31
	0x033291E4 LDP X20, X19, [X31 + 0x30]
	0x033291E8 LDP X22, X21, [X31 + 0x20]
	0x033291EC LDP X30, X23, [X31 + 0x10]
	0x033291F0 ADD X31, X31, 0x40
	0x033291F4 RET
	0x033291F8 BL 0x1C16F28
	0x033291FC STP X30, X21, [X31 - 0x20]!
	0x03329200 STP X20, X19, [X31 + 0x10]
	0x03329204 ADRP X20, 0x10B3000
	0x03329208 LDRB W8, [X20 + 0xCB4]
	0x0332920C MOV W19, W0
	0x03329210 TBNZ X8, 0x0, 0x3329228
	0x03329214 ADRP X0, 0xDFF000
	0x03329218 LDR X0, [X0 + 0x4E8]
	0x0332921C BL 0x1C16CF4
	0x03329220 MOVZ W8, 0x1
	0x03329224 STRB W8, [X20 + 0xCB4]
	0x03329228 AND W20, W19, 0xFFFF
	0x0332922C CMP W20, 0x5D0
	0x03329230 B.CC 0x3329260
	0x03329234 ADRP X21, 0xDFF000
	0x03329238 LDR X21, [X21 + 0x4E8]
	0x0332923C LDR X0, [X21]
	0x03329240 LDR W8, [X0 + 0xE0]
	0x03329244 CBNZ W8, 0x3329250
	0x03329248 BL 0x1C16DFC
	0x0332924C LDR X0, [X21]
	0x03329250 LDR X8, [X0 + 0xB8]
	0x03329254 LDRH W8, [X8 + 0x8]
	0x03329258 CMP W8, W19, UXTH
	0x0332925C B.CS 0x3329278
	0x03329260 CMP W20, 0x27
	0x03329264 CSET W8, EQ
	0x03329268 CMP W20, 0x22
	0x0332926C CSET W9, EQ
	0x03329270 ORR W0, W8, W9, 0x0
	0x03329274 B 0x33292B8
	0x03329278 LDR W8, [X0 + 0xE0]
	0x0332927C CBNZ W8, 0x3329288
	0x03329280 BL 0x1C16DFC
	0x03329284 LDR X0, [X21]
	0x03329288 LDR X8, [X0 + 0xB8]
	0x0332928C LDR X8, [X8]
	0x03329290 CBZ X8, 0x33292C4
	0x03329294 LDR W10, [X8 + 0x18]
	0x03329298 AND X9, X19, 0xFFFF
	0x0332929C SUB X9, X9, 0x5D0
	0x033292A0 CMP W9, W10
	0x033292A4 B.CS 0x33292C8
	0x033292A8 ADD X8, X8, X9, 0x2, LSL
	0x033292AC LDRH W8, [X8 + 0x22]
	0x033292B0 UBFM W8, W8, 0xF, 0x1F
	0x033292B4 EOR W0, W8, 0x1
	0x033292B8 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X24, 0x10B5000
	015 Move W8, [X24+3239]
	016 Move W19, W4
	017 Move W20, W3
	018 Move X22, X2
	019 Move X21, X1
	020 Move X23, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {33}
	025 Move X0, 0xDCD000
	026 Move X0, [X0+368]
	027 Call 0x1C17CF4
	028 Move X0, 0xE00000
	029 Move X0, [X0+1120]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X24+3239], W8
	033 Compare X22, 0
	034 JumpIfEqual {182}
	035 Move W8, [X22+16]
	036 Compare W8, 0
	037 JumpIfEqual {182}
	038 Move X0, X22
	039 Move W1, W31
	040 Move X2, X31
	041 Call String.get_Chars, X0, X1
	042 Move X25, 0xDCD000
	043 Move X25, [X25+368]
	044 Move W24, W0
	045 Move X8, [X25]
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {51}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move W0, W24
	052 Move X1, X31
	053 Call Char.IsWhiteSpace, X0
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfEqual {77}
	058 Move W8, [X22+16]
	059 Move X0, X22
	060 Move X2, X31
	061 Subtract W1, W8, 1
	062 Call String.get_Chars, X0, X1
	063 Move X8, [X25]
	064 Move W24, W0
	065 Move W9, [X8+224]
	066 Compare W9, 0
	067 JumpIfNotEqual {70}
	068 Move X0, X8
	069 Call 0x1C17DFC
	070 Move W0, W24
	071 Move X1, X31
	072 Call Char.IsWhiteSpace, X0
	073 Move TEMP, X0
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {87}
	077 Move X0, X22
	078 Move X1, X31
	079 Move X2, X31
	080 Call String.Trim, X0, X1
	081 Compare X0, 0
	082 JumpIfEqual {226}
	083 Move W8, [X0+16]
	084 Move X22, X0
	085 Compare W8, 0
	086 JumpIfEqual {182}
	087 Move X0, X23
	088 Call DateTimeFormatInfo.get_Culture, X0
	089 Compare X0, 0
	090 JumpIfEqual {226}
	091 Move X8, [X0]
	092 Move X9, [X8+472]
	093 Move X1, [X8+480]
	094 NotImplemented "Instruction BLR not yet implemented."
	095 Move X24, X0
	096 Move X0, X22
	097 Move W1, W31
	098 Move X2, X31
	099 Call String.get_Chars, X0, X1
	100 Compare X24, 0
	101 JumpIfEqual {226}
	102 Move X8, [X24]
	103 Move W1, W0
	104 Move X0, X24
	105 Move X9, [X8+424]
	106 Move X2, [X8+432]
	107 NotImplemented "Instruction BLR not yet implemented."
	108 Compare X21, 0
	109 JumpIfEqual {226}
	110 Move W9, 0x8873
	111 And W8, W0, 0xFFFF
	112 NotImplemented "Instruction MOVK not yet implemented."
	113 NotImplemented "Instruction UMADDL not yet implemented."
	114 Move X9, X9
	115 ShiftRight X9, 32
	116 And X9, X9, 0x7FFFFFFF
	117 Subtract W11, W8, W9
	118 Add W9, W9, W11
	119 Move W11, 0xE78F
	120 NotImplemented "Instruction MOVK not yet implemented."
	121 Move W10, 197
	122 Move W9, W9
	123 ShiftRight W9, 7
	124 And W9, W9, 0x7FFFFFFF
	125 NotImplemented "Instruction UMADDL not yet implemented."
	126 NotImplemented "Instruction MSUB not yet implemented."
	127 Move W10, 199
	128 Move X11, X11
	129 ShiftRight X11, 38
	130 And X11, X11, 0x7FFFFFFF
	131 Move W25, W0
	132 Move W26, W31
	133 NotImplemented "Instruction MSUB not yet implemented."
	134 Add W27, W9, 1
	135 Move W8, [X21+24]
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Add X29, X21, W24
	138 Add X29, X29, 32
	139 Move X28, [X29]
	140 Compare X28, 0
	141 JumpIfEqual {163}
	142 Move X4, [X28+16]
	143 Compare X4, 0
	144 JumpIfEqual {226}
	145 Move W8, [X22+16]
	146 Move W3, [X4+16]
	147 NotImplemented "Instruction CMP not yet implemented."
	148 Move X0, X23
	149 Move X1, X22
	150 Move W2, W31
	151 Move W5, W31
	152 Move W6, W3
	153 Call DateTimeFormatInfo.CompareStringIgnoreCaseOptimized, X0, X1, X2, X3, X4, X5, X6
	154 Move TEMP, X0
	155 And TEMP, TEMP, 1
	156 Compare TEMP, 1
	157 JumpIfEqual {196}
	158 Add W8, W24, W27
	159 Add W26, W26, 1
	160 Subtract W9, W8, 199
	161 NotImplemented "Instruction CSEL not yet implemented."
	162 NotImplemented "Instruction CMP not yet implemented."
	163 Move X8, 0xE00000
	164 Move X8, [X8+1120]
	165 Move X0, [X8]
	166 Call 0x1C17F10
	167 Move X1, X31
	168 Move X23, X0
	169 Call Object..ctor, X0
	170 Move [X23+16], X22
	171 Move [X23+24], W20
	172 Move [X23+28], W19
	173 Move X8, [X21]
	174 Move X0, X23
	175 Move X1, [X8+64]
	176 Call 0x1C17E00
	177 Compare X0, 0
	178 JumpIfEqual {228}
	179 Move W8, [X21+24]
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Move [X29], X23
	182 Move X20, [X31+96]
	183 Move X19, [X31+104]
	184 Move X22, [X31+80]
	185 Move X21, [X31+88]
	186 Move X24, [X31+64]
	187 Move X23, [X31+72]
	188 Move X26, [X31+48]
	189 Move X25, [X31+56]
	190 Move X28, [X31+32]
	191 Move X27, [X31+40]
	192 Move X29, [X31+16]
	193 Move X30, [X31+24]
	194 Add X31, X31, 112
	195 Return 
	196 Move X8, [X28+16]
	197 Compare X8, 0
	198 JumpIfEqual {226}
	199 Move W9, [X22+16]
	200 Move W8, [X8+16]
	201 NotImplemented "Instruction CMP not yet implemented."
	202 Move X0, X23
	203 Move X1, X21
	204 Move X2, X22
	205 Move W3, W25
	206 Move W4, W20
	207 Move W5, W19
	208 Move W6, W26
	209 Move W7, W24
	210 Move [X31], W27
	211 Call DateTimeFormatInfo.InsertAtCurrentHashNode, X0, X1, X2, X3, X4, X5, X6, X7, X8
	212 Move W8, [X28+24]
	213 And W31, W20, 255
	214 And W9, W8, 255
	215 Compare W9, 0
	216 JumpIfEqual {221}
	217 And W31, W20, 0xFF00
	218 And W9, W8, 0xFF00
	219 Compare W9, 0
	220 JumpIfNotEqual {182}
	221 Or W8, W8, W20
	222 Move [X28+24], W8
	223 Compare W19, 0
	224 JumpIfEqual {182}
	225 Move [X28+28], W19
	226 Call 0x1C17F20
	227 Call 0x1C17F28
	228 Call 0x1C17F44
	229 Move X1, X31
	230 Call 0x1C17DEC

Method: System.Boolean CompareStringIgnoreCaseOptimized(System.String string1, System.Int32 offset1, System.Int32 length1, System.String string2, System.Int32 offset2, System.Int32 length2)

Disassembly:
	0x0332AD10 LDR W8, [X0 + 0x10]
	0x0332AD14 CMP W8, 0x1
	0x0332AD18 B.LT 0x332AD60
	0x0332AD1C MOV W1, W31
	0x0332AD20 MOV X2, X31
	0x0332AD24 BL 0x3222A1C
	0x0332AD28 AND W8, W0, 0xFFFF
	0x0332AD2C CMP W8, 0x30
	0x0332AD30 B.CC 0x332AD60
	0x0332AD34 LDR W8, [X19 + 0x18]
	0x0332AD38 CMP W22, W8
	0x0332AD3C B.CS 0x332AF30
	0x0332AD40 LDR X0, [X20, X22, LSL #3]
	0x0332AD44 CBZ X0, 0x332AF2C
	0x0332AD48 MOV W1, W31
	0x0332AD4C MOV X2, X31
	0x0332AD50 BL 0x3222A1C
	0x0332AD54 AND W8, W0, 0xFFFF
	0x0332AD58 CMP W8, 0x39
	0x0332AD5C B.LS 0x332AD84
	0x0332AD60 LDR W8, [X19 + 0x18]
	0x0332AD64 ADD X22, X22, 0x1
	0x0332AD68 CMP W22, W8
	0x0332AD6C B.LT 0x332AD00
	0x0332AD70 MOV W0, W31
	0x0332AD74 LDP X20, X19, [X31 + 0x20]
	0x0332AD78 LDP X22, X21, [X31 + 0x10]
	0x0332AD7C LDP X30, X23, [X31], #0x30
	0x0332AD80 RET
	0x0332AD84 LDR W8, [X19 + 0x18]
	0x0332AD88 CMP W22, W8
	0x0332AD8C B.CS 0x332AF30
	0x0332AD90 ADD X23, X19, 0x20
	0x0332AD94 MOVZ W20, 0x2
	0x0332AD98 LDR X0, [X23, X22, LSL #3]
	0x0332AD9C CBZ X0, 0x332AF2C
	0x0332ADA0 LDR W8, [X0 + 0x10]
	0x0332ADA4 SUB W21, W20, 0x1
	0x0332ADA8 CMP W21, W8
	0x0332ADAC B.GE 0x332AE08
	0x0332ADB0 MOV W1, W21
	0x0332ADB4 MOV X2, X31
	0x0332ADB8 BL 0x3222A1C
	0x0332ADBC AND W8, W0, 0xFFFF
	0x0332ADC0 CMP W8, 0x30
	0x0332ADC4 B.CC 0x332AE08
	0x0332ADC8 LDR W8, [X19 + 0x18]
	0x0332ADCC CMP W22, W8
	0x0332ADD0 B.CS 0x332AF30
	0x0332ADD4 LDR X0, [X23, X22, LSL #3]
	0x0332ADD8 CBZ X0, 0x332AF2C
	0x0332ADDC MOV W1, W21
	0x0332ADE0 MOV X2, X31
	0x0332ADE4 BL 0x3222A1C
	0x0332ADE8 AND W8, W0, 0xFFFF
	0x0332ADEC CMP W8, 0x3A
	0x0332ADF0 B.CS 0x332AE08
	0x0332ADF4 LDR W8, [X19 + 0x18]
	0x0332ADF8 ADD W20, W20, 0x1
	0x0332ADFC CMP W22, W8
	0x0332AE00 B.CC 0x332AD98

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+32], X26
	004 Move [X31+40], X25
	005 Move [X31+48], X24
	006 Move [X31+56], X23
	007 Move [X31+64], X22
	008 Move [X31+72], X21
	009 Move [X31+80], X20
	010 Move [X31+88], X19
	011 Move W19, W6
	012 Move W20, W5
	013 Move X21, X4
	014 Move W22, W3
	015 Move W23, W2
	016 Move X24, X1
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X25, X0
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Compare X24, 0
	021 JumpIfEqual {71}
	022 Move X0, X24
	023 Move W1, W23
	024 Move X2, X31
	025 Call String.get_Chars, X0, X1
	026 Compare X21, 0
	027 JumpIfEqual {71}
	028 Move W26, W0
	029 Move X0, X21
	030 Move W1, W20
	031 Move X2, X31
	032 Call String.get_Chars, X0, X1
	033 And W8, W26, 0xFFFF
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move W0, 1
	036 Move X0, X25
	037 Call DateTimeFormatInfo.get_Culture, X0
	038 Compare X0, 0
	039 JumpIfEqual {71}
	040 Move X8, [X0]
	041 Move X9, [X8+504]
	042 Move X1, [X8+512]
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Compare X0, 0
	045 JumpIfEqual {71}
	046 Move X8, [X0]
	047 Move W7, 1
	048 Move X1, X24
	049 Move W2, W23
	050 Move X9, [X8+440]
	051 Move X8, [X8+448]
	052 Move W3, W22
	053 Move X4, X21
	054 Move W5, W20
	055 Move W6, W19
	056 Move [X31], X8
	057 NotImplemented "Instruction BLR not yet implemented."
	058 NotImplemented "Instruction CMP not yet implemented."
	059 NotImplemented "Instruction CSET not yet implemented."
	060 Move X20, [X31+80]
	061 Move X19, [X31+88]
	062 Move X22, [X31+64]
	063 Move X21, [X31+72]
	064 Move X24, [X31+48]
	065 Move X23, [X31+56]
	066 Move X26, [X31+32]
	067 Move X25, [X31+40]
	068 Move X30, [X31+16]
	069 Add X31, X31, 96
	070 Return X0
	071 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x0332AE04 B 0x332AF30
	0x0332AE08 LDR W8, [X19 + 0x18]
	0x0332AE0C CMP W22, W8
	0x0332AE10 B.CS 0x332AF30
	0x0332AE14 LDR X0, [X23, X22, LSL #3]
	0x0332AE18 CBZ X0, 0x332AF2C
	0x0332AE1C LDR W9, [X0 + 0x10]
	0x0332AE20 SUB W10, W20, W9
	0x0332AE24 CMP W10, 0x1
	0x0332AE28 B.EQ 0x332AD70
	0x0332AE2C CMP W20, W9
	0x0332AE30 B.EQ 0x332AEF8
	0x0332AE34 CMP W22, W8
	0x0332AE38 B.CS 0x332AF30
	0x0332AE3C LDR X0, [X23, X22, LSL #3]
	0x0332AE40 CBZ X0, 0x332AF2C
	0x0332AE44 LDR W8, [X0 + 0x10]
	0x0332AE48 SUB W8, W20, W8
	0x0332AE4C ADDS W31, W8, 0x3
	0x0332AE50 B.NE 0x332AEF0
	0x0332AE54 MOV W1, W21
	0x0332AE58 MOV X2, X31
	0x0332AE5C BL 0x3222A1C
	0x0332AE60 AND W8, W0, 0xFFFF
	0x0332AE64 CMP W8, 0x27
	0x0332AE68 B.NE 0x332AEF0
	0x0332AE6C LDR W8, [X19 + 0x18]
	0x0332AE70 CMP W22, W8
	0x0332AE74 B.CS 0x332AF30
	0x0332AE78 LDR X0, [X23, X22, LSL #3]
	0x0332AE7C CBZ X0, 0x332AF2C
	0x0332AE80 MOV W1, W20
	0x0332AE84 MOV X2, X31
	0x0332AE88 BL 0x3222A1C
	0x0332AE8C AND W8, W0, 0xFFFF
	0x0332AE90 CMP W8, 0x20
	0x0332AE94 B.NE 0x332AEF0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x10B3000
	005 Move X20, 0xDD3000
	006 Move W8, [X19+3240]
	007 Move X20, [X20+2264]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xDD3000
	013 Move X0, [X0+2264]
	014 Call 0x1C17CF4
	015 Move X0, 0xDFF000
	016 Move X0, [X0+808]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+3240], W8
	020 Move X0, [X20]
	021 Move W1, 2
	022 Call 0x1C17D6C
	023 Compare X0, 0
	024 JumpIfEqual {43}
	025 Move W8, [X0+24]
	026 Compare W8, 0
	027 JumpIfEqual {42}
	028 Move W9, 32
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction STRH not yet implemented."
	031 Move X8, 0xDFF000
	032 Move X8, [X8+808]
	033 Move W9, 160
	034 NotImplemented "Instruction STRH not yet implemented."
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X8, [X8]
	038 Move X8, [X8+184]
	039 Move [X8+8], X0
	040 Move X30, [X31+32]
	041 Return 
	042 Call 0x1C17F28
	043 Call 0x1C17F20

