Type: System.Globalization.TimeSpanFormat/FormatLiterals

Method: System.String get_Start()

Disassembly:
	0x0332DB10 MOV X0, X19
	0x0332DB14 MOV X3, X31
	0x0332DB18 MOV X4, X31
	0x0332DB1C BL 0x332D348
	0x0332DB20 MOV W0, W31
	0x0332DB24 LDR X8, [X22 + 0x28]
	0x0332DB28 LDR X9, [X31 + 0x1D8]
	0x0332DB2C CMP X8, X9
	0x0332DB30 B.NE 0x332DCD4
	0x0332DB34 ADD X31, X31, 0x1E0

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+32]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move W9, [X8+24]
	006 Compare W9, 0
	007 JumpIfEqual {12}
	008 Move X0, [X8+32]
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20
	012 Call 0x1C17F28

Method: System.String get_DayHourSep()

Disassembly:
	0x0332DB38 LDP X20, X19, [X31 + 0x40]
	0x0332DB3C LDP X22, X21, [X31 + 0x30]
	0x0332DB40 LDP X24, X23, [X31 + 0x20]
	0x0332DB44 LDP X30, X25, [X31 + 0x10]
	0x0332DB48 LDR X29, [X31], #0x50
	0x0332DB4C RET
	0x0332DB50 TBZ X0, 0x0, 0x332D9F8
	0x0332DB54 MOV W21, W31
	0x0332DB58 ADD X8, X31, 0x1C4
	0x0332DB5C STR X31, [X31 + 0x168]
	0x0332DB60 STUR X31, [X8 + 0xC]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+32]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move W9, [X8+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X0, [X8+40]
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20
	011 Call 0x1C17F28

Method: System.String get_HourMinuteSep()

Disassembly:
	0x0332DB64 STUR X31, [X8 + 0x4]
	0x0332DB68 LDUR V0, [X20 + 0x78]
	0x0332DB6C LDUR V1, [X20 + 0x88]
	0x0332DB70 LDRH W9, [X31 + 0x164]
	0x0332DB74 MOVZ W11, 0x2
	0x0332DB78 MOVI V2.2D, 0x0
	0x0332DB7C STP V0, V1, [X31 + 0x80]
	0x0332DB80 LDR V0, [X8]
	0x0332DB84 LDRB W10, [X31 + 0x166]
	0x0332DB88 STUR D2, [X31 + 0x64]
	0x0332DB8C STUR D2, [X31 + 0x44]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+32]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move W9, [X8+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X0, [X8+48]
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20
	011 Call 0x1C17F28

Method: System.String get_MinuteSecondSep()

Disassembly:
	0x0332DB90 STUR D2, [X31 + 0x24]
	0x0332DB94 STUR D2, [X31 + 0x4]
	0x0332DB98 LDR V2, [X8]
	0x0332DB9C STRB W11, [X31 + 0x60]
	0x0332DBA0 STRB W11, [X31 + 0x40]
	0x0332DBA4 STRB W11, [X31 + 0x20]
	0x0332DBA8 STRB W11, [X31]
	0x0332DBAC LDRH W11, [X31 + 0x164]
	0x0332DBB0 LDR V1, [X8]
	0x0332DBB4 STR V0, [X31 + 0x19]
	0x0332DBB8 LDR V0, [X8]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+32]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move W9, [X8+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X0, [X8+56]
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20
	011 Call 0x1C17F28

Method: System.String get_SecondFractionSep()

Disassembly:
	0x0332DBBC LDRB W8, [X31 + 0x166]
	0x0332DBC0 STRH W9, [X31 + 0xAC]
	0x0332DBC4 LDRH W9, [X31 + 0x164]
	0x0332DBC8 STRB W10, [X31 + 0xAE]
	0x0332DBCC LDRB W10, [X31 + 0x166]
	0x0332DBD0 STRH W11, [X31 + 0xA8]
	0x0332DBD4 LDRH W11, [X31 + 0x164]
	0x0332DBD8 STRB W8, [X31 + 0xAA]
	0x0332DBDC LDRB W8, [X31 + 0x166]
	0x0332DBE0 STRH W9, [X31 + 0xA4]
	0x0332DBE4 LDR W9, [X31 + 0x1D4]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+32]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move W9, [X8+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X0, [X8+64]
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20
	011 Call 0x1C17F28

Method: System.String get_End()

Disassembly:
	0x0332DBE8 STR V2, [X31 + 0x1B]
	0x0332DBEC STRB W10, [X31 + 0xA6]
	0x0332DBF0 LDR W10, [X31 + 0x1D4]
	0x0332DBF4 STRB W8, [X31 + 0x3]
	0x0332DBF8 STURH W11, [X31 + 0x1]
	0x0332DBFC LDR W8, [X31 + 0x1D4]
	0x0332DC00 LDR W11, [X31 + 0x1D4]
	0x0332DC04 STR W9, [X31 + 0x1C0]
	0x0332DC08 LDRH W9, [X31 + 0xAC]
	0x0332DC0C STR V1, [X31 + 0x17]
	0x0332DC10 LDR V1, [X31 + 0x1B]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+32]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move W9, [X8+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X0, [X8+72]
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20
	011 Call 0x1C17F28

Method: System.Globalization.TimeSpanFormat/FormatLiterals InitInvariant(System.Boolean isNegative)

Disassembly:
	0x0332DCA8 SUB X8, X31, X8
	0x0332DCAC CMP X8, 0x1
	0x0332DCB0 B.LT 0x332DCC8
	0x0332DCB4 ADRP X8, 0xDFB000
	0x0332DCB8 LDR X8, [X8 + 0x580]
	0x0332DCBC MOVZ W1, 0x4
	0x0332DCC0 LDR X2, [X8]
	0x0332DCC4 B 0x332DB10
	0x0332DCC8 STR X8, [X19]
	0x0332DCCC MOVZ W0, 0x1
	0x0332DCD0 B 0x332DB24
	0x0332DCD4 BL 0x3EB1B20
	0x0332DCD8 STR X29, [X31 - 0x50]!
	0x0332DCDC STP X30, X25, [X31 + 0x10]
	0x0332DCE0 STP X24, X23, [X31 + 0x20]
	0x0332DCE4 STP X22, X21, [X31 + 0x30]
	0x0332DCE8 STP X20, X19, [X31 + 0x40]
	0x0332DCEC SUB X31, X31, 0x1C0
	0x0332DCF0 MRS X22, 0xC000
	0x0332DCF4 LDR X8, [X22 + 0x28]
	0x0332DCF8 ADRP X23, 0x10AF000
	0x0332DCFC MOV X19, X2
	0x0332DD00 MOV W21, W1
	0x0332DD04 STR X8, [X31 + 0x1B8]
	0x0332DD08 LDRB W8, [X23 + 0xCC4]
	0x0332DD0C MOV X20, X0
	0x0332DD10 TBNZ X8, 0x0, 0x332DD34
	0x0332DD14 ADRP X0, 0xDFB000
	0x0332DD18 LDR X0, [X0 + 0x580]
	0x0332DD1C BL 0x1C16CF4
	0x0332DD20 ADRP X0, 0xDFB000
	0x0332DD24 LDR X0, [X0 + 0x568]
	0x0332DD28 BL 0x1C16CF4
	0x0332DD2C MOVZ W8, 0x1
	0x0332DD30 STRB W8, [X23 + 0xCC4]
	0x0332DD34 STR X31, [X31 + 0x168]
	0x0332DD38 STRH W31, [X31 + 0x164]
	0x0332DD3C STRB W31, [X31 + 0x166]
	0x0332DD40 STR W31, [X31 + 0x1A4]
	0x0332DD44 LDR W8, [X20 + 0x8]
	0x0332DD48 ADRP X23, 0xDFB000
	0x0332DD4C LDR X23, [X23 + 0x568]
	0x0332DD50 CMP W8, 0x3
	0x0332DD54 B.NE 0x332DE78
	0x0332DD58 TBNZ X21, 0x2, 0x332DE78
	0x0332DD5C AND W21, W21, 0xFF
	0x0332DD60 TBNZ X21, 0x0, 0x332DDB0
	0x0332DD64 TBZ X21, 0x1, 0x332DE78
	0x0332DD68 ADD X8, X31, 0xD8
	0x0332DD6C MOV X0, X20
	0x0332DD70 BL 0x33300B8
	0x0332DD74 ADD X1, X31, 0xD8
	0x0332DD78 MOV X0, X20
	0x0332DD7C BL 0x3331624
	0x0332DD80 TBNZ X0, 0x0, 0x332DE10
	0x0332DD84 MOV W21, W0
	0x0332DD88 ADD X8, X31, 0xB0
	0x0332DD8C MOV X0, X20
	0x0332DD90 BL 0x3330168
	0x0332DD94 ADD X1, X31, 0xB0
	0x0332DD98 MOV X0, X20
	0x0332DD9C BL 0x3331624
	0x0332DDA0 TBZ X0, 0x0, 0x332DE78
	0x0332DDA4 EOR W8, W0, 0x1
	0x0332DDA8 AND W21, W21, W8, 0x0
	0x0332DDAC B 0x332DEC8
	0x0332DDB0 ADRP X24, 0x10AF000
	0x0332DDB4 LDRB W8, [X24 + 0xD04]
	0x0332DDB8 CBNZ W8, 0x332DDD0
	0x0332DDBC ADRP X0, 0xDFB000
	0x0332DDC0 LDR X0, [X0 + 0x530]
	0x0332DDC4 BL 0x1C16CF4
	0x0332DDC8 MOVZ W8, 0x1
	0x0332DDCC STRB W8, [X24 + 0xD04]
	0x0332DDD0 ADRP X24, 0xDFB000
	0x0332DDD4 LDR X24, [X24 + 0x530]
	0x0332DDD8 LDR X0, [X24]
	0x0332DDDC LDR W8, [X0 + 0xE0]
	0x0332DDE0 CBNZ W8, 0x332DDEC
	0x0332DDE4 BL 0x1C16DFC
	0x0332DDE8 LDR X0, [X24]
	0x0332DDEC LDR X8, [X0 + 0xB8]
	0x0332DDF0 ADD X1, X31, 0x130
	0x0332DDF4 MOV X0, X20
	0x0332DDF8 LDR X9, [X8 + 0x20]
	0x0332DDFC LDP V1, V0, [X8]
	0x0332DE00 STR X9, [X31 + 0x150]
	0x0332DE04 STP V1, V0, [X31 + 0x130]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x10B0000
	007 Move X21, 0xDC7000
	008 Move X19, X8
	009 Move W8, [X22+3260]
	010 Move X21, [X21+2760]
	011 Move W20, W0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {36}
	016 Move X0, 0xDC7000
	017 Move X0, [X0+2760]
	018 Call 0x1C17CF4
	019 Move X0, 0xDC9000
	020 Move X0, [X0+632]
	021 Call 0x1C17CF4
	022 Move X0, 0xDC8000
	023 Move X0, [X0+680]
	024 Call 0x1C17CF4
	025 Move X0, 0xDD0000
	026 Move X0, [X0+2440]
	027 Call 0x1C17CF4
	028 Move X0, 0xDFC000
	029 Move X0, [X0+1368]
	030 Call 0x1C17CF4
	031 Move X0, 0xDD0000
	032 Move X0, [X0+1936]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X22+3260], W8
	036 Move X0, [X21]
	037 Move X21, 0xDC9000
	038 Move X21, [X21+632]
	039 Move W1, 6
	040 Call 0x1C17D6C
	041 Move TEMP, X20
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {47}
	045 Move X9, 0xDC8000
	046 Move X9, [X9+680]
	047 Move X8, [X21]
	048 Move X9, [X8+184]
	049 Compare X0, 0
	050 JumpIfEqual {94}
	051 Move W8, [X0+24]
	052 Compare W8, 0
	053 JumpIfEqual {93}
	054 Move X9, [X9]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move [X0+32], X9
	057 Move X9, 0xDD0000
	058 Move X9, [X9+1936]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X10, [X9]
	061 Move [X0+40], X10
	062 Move X10, 0xDD0000
	063 Move X10, [X10+2440]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X11, [X10]
	066 Move [X0+48], X11
	067 Move X10, [X10]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move [X0+56], X10
	070 Move X9, [X9]
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move [X0+64], X9
	073 Move X8, [X21]
	074 Move X9, 0xDFC000
	075 Move X10, -42201088
	076 Move V0, [X10+2920]
	077 Move X8, [X8+184]
	078 NotImplemented "Instruction MOVI not yet implemented."
	079 Move X8, [X8]
	080 Move X9, [X9+1368]
	081 Move X22, [X31+16]
	082 Move X21, [X31+24]
	083 Move [X0+72], X8
	084 Move X8, [X9]
	085 Move [X19+8], V1
	086 Move [X19+24], D0
	087 Move [X19+32], X0
	088 Move [X19], X8
	089 Move X20, [X31+32]
	090 Move X19, [X31+40]
	091 Move X30, [X31+48]
	092 Return X0
	093 Call 0x1C17F28
	094 Call 0x1C17F20

Method: System.Void Init(System.ReadOnlySpan`1<System.Char> format, System.Boolean useInvariantFieldLengths)

Disassembly:
	0x0332D704 ADD W9, W9, 0x1
	0x0332D708 ADD W11, W11, 0x1
	0x0332D70C B 0x332D540
	0x0332D710 BL 0x1C16F28
	0x0332D714 CMP W8, W13
	0x0332D718 CSEL W8, W8, W13, HI
	0x0332D71C STR W8, [X20 + 0x10]
	0x0332D720 BL 0x1C16F28
	0x0332D724 SUB X31, X31, 0x50
	0x0332D728 STR X30, [X31 + 0x20]
	0x0332D72C STP X22, X21, [X31 + 0x30]
	0x0332D730 STP X20, X19, [X31 + 0x40]
	0x0332D734 ADRP X22, 0x10AF000
	0x0332D738 LDRB W8, [X22 + 0xCCD]
	0x0332D73C MOV X19, X2
	0x0332D740 MOV X20, X1
	0x0332D744 MOV X21, X0
	0x0332D748 TBNZ X8, 0x0, 0x332D76C
	0x0332D74C ADRP X0, 0xDFB000
	0x0332D750 LDR X0, [X0 + 0x580]
	0x0332D754 BL 0x1C16CF4
	0x0332D758 ADRP X0, 0xDFB000
	0x0332D75C LDR X0, [X0 + 0x568]
	0x0332D760 BL 0x1C16CF4
	0x0332D764 MOVZ W8, 0x1
	0x0332D768 STRB W8, [X22 + 0xCCD]
	0x0332D76C LDRB W8, [X20]
	0x0332D770 CMP W8, 0x4
	0x0332D774 B.EQ 0x332D7C8
	0x0332D778 CMP W8, 0x3
	0x0332D77C B.EQ 0x332D7D8
	0x0332D780 CMP W8, 0x2
	0x0332D784 B.NE 0x332D7FC
	0x0332D788 LDR W8, [X21 + 0x4]
	0x0332D78C CBNZ W8, 0x332D7A8
	0x0332D790 MOV X0, X21
	0x0332D794 MOV X1, X31
	0x0332D798 MOV X2, X31
	0x0332D79C MOV X3, X19
	0x0332D7A0 BL 0x333269C
	0x0332D7A4 TBZ X0, 0x0, 0x332D81C
	0x0332D7A8 LDP V1, V0, [X20]
	0x0332D7AC ADD X1, X31, 0x0
	0x0332D7B0 MOV X0, X21
	0x0332D7B4 MOV X2, X19
	0x0332D7B8 STP V1, V0, [X31]
	0x0332D7BC BL 0x33327A8
	0x0332D7C0 TBNZ X0, 0x0, 0x332D7EC
	0x0332D7C4 B 0x332D81C
	0x0332D7C8 ADRP X8, 0xDFB000
	0x0332D7CC LDR X8, [X8 + 0x580]
	0x0332D7D0 MOVZ W1, 0x4
	0x0332D7D4 B 0x332D808
	0x0332D7D8 LDP X1, X2, [X20 + 0x10]
	0x0332D7DC MOV X0, X21
	0x0332D7E0 MOV X3, X19
	0x0332D7E4 BL 0x333269C
	0x0332D7E8 TBZ X0, 0x0, 0x332D81C
	0x0332D7EC LDRB W8, [X20]
	0x0332D7F0 MOVZ W0, 0x1
	0x0332D7F4 STRB W8, [X21]
	0x0332D7F8 B 0x332D820
	0x0332D7FC ADRP X8, 0xDFB000
	0x0332D800 LDR X8, [X8 + 0x568]
	0x0332D804 MOVZ W1, 0x2
	0x0332D808 LDR X2, [X8]
	0x0332D80C MOV X0, X19
	0x0332D810 MOV X3, X31
	0x0332D814 MOV X4, X31
	0x0332D818 BL 0x332D348
	0x0332D81C MOV W0, W31
	0x0332D820 LDP X20, X19, [X31 + 0x40]
	0x0332D824 LDP X22, X21, [X31 + 0x30]
	0x0332D828 LDR X30, [X31 + 0x20]
	0x0332D82C ADD X31, X31, 0x50
	0x0332D830 RET
	0x0332D834 SUB X31, X31, 0x50
	0x0332D838 STR X30, [X31 + 0x20]
	0x0332D83C STP X22, X21, [X31 + 0x30]
	0x0332D840 STP X20, X19, [X31 + 0x40]
	0x0332D844 ADRP X22, 0x10AF000
	0x0332D848 LDRB W8, [X22 + 0xCC0]
	0x0332D84C MOV X19, X2
	0x0332D850 MOV W20, W1
	0x0332D854 MOV X21, X0
	0x0332D858 TBNZ X8, 0x0, 0x332D870
	0x0332D85C ADRP X0, 0xDFB000
	0x0332D860 LDR X0, [X0 + 0x568]
	0x0332D864 BL 0x1C16CF4
	0x0332D868 MOVZ W8, 0x1
	0x0332D86C STRB W8, [X22 + 0xCC0]
	0x0332D870 LDRB W8, [X21]
	0x0332D874 CMP W8, 0x2
	0x0332D878 B.NE 0x332D8A0
	0x0332D87C MOVI V0.2D, 0x0
	0x0332D880 MOVZ W8, 0x3
	0x0332D884 ADD X1, X31, 0x0
	0x0332D888 MOV X0, X21
	0x0332D88C MOV X2, X19
	0x0332D890 STP V0, V0, [X31]
	0x0332D894 STRB W8, [X31]
	0x0332D898 BL 0x332D724
	0x0332D89C TBZ X0, 0x0, 0x332D8DC
	0x0332D8A0 LDR W8, [X21 + 0xC]
	0x0332D8A4 SUB W8, W8, 0x1
	0x0332D8A8 CMP W8, 0x4
	0x0332D8AC B.HI 0x332D8DC
	0x0332D8B0 ADRP X9, 0xFFFFFFFFFD869000
	0x0332D8B4 ADD X9, X9, 0x6B7
	0x0332D8B8 ADR X10, 0x10
	0x0332D8BC LDRB W11, [X9, X8, LSL]
	0x0332D8C0 ADD X10, X10, X11, 0x2, LSL
	0x0332D8C4 BR X10
	0x0332D8C8 MOV X0, X21
	0x0332D8CC MOV W1, W20
	0x0332D8D0 MOV X2, X19
	0x0332D8D4 BL 0x332D968
	0x0332D8D8 B 0x332D950
	0x0332D8DC ADRP X8, 0xDFB000
	0x0332D8E0 LDR X8, [X8 + 0x568]
	0x0332D8E4 MOVZ W1, 0x2
	0x0332D8E8 MOV X0, X19
	0x0332D8EC MOV X3, X31
	0x0332D8F0 LDR X2, [X8]
	0x0332D8F4 MOV X4, X31
	0x0332D8F8 BL 0x332D348
	0x0332D8FC MOV W0, W31
	0x0332D900 B 0x332D950
	0x0332D904 MOV X0, X21
	0x0332D908 MOV W1, W20
	0x0332D90C MOV X2, X19
	0x0332D910 BL 0x332DCD8
	0x0332D914 B 0x332D950
	0x0332D918 MOV X0, X21
	0x0332D91C MOV W1, W20
	0x0332D920 MOV X2, X19
	0x0332D924 BL 0x332E010
	0x0332D928 B 0x332D950
	0x0332D92C MOV X0, X21
	0x0332D930 MOV W1, W20
	0x0332D934 MOV X2, X19
	0x0332D938 BL 0x332EE64
	0x0332D93C B 0x332D950
	0x0332D940 MOV X0, X21
	0x0332D944 MOV W1, W20
	0x0332D948 MOV X2, X19
	0x0332D94C BL 0x332FA18
	0x0332D950 LDP X20, X19, [X31 + 0x40]
	0x0332D954 LDP X22, X21, [X31 + 0x30]
	0x0332D958 LDR X30, [X31 + 0x20]
	0x0332D95C AND W0, W0, 0x1
	0x0332D960 ADD X31, X31, 0x50
	0x0332D964 RET
	0x0332D968 STR X29, [X31 - 0x50]!
	0x0332D96C STP X30, X25, [X31 + 0x10]
	0x0332D970 STP X24, X23, [X31 + 0x20]
	0x0332D974 STP X22, X21, [X31 + 0x30]
	0x0332D978 STP X20, X19, [X31 + 0x40]
	0x0332D97C SUB X31, X31, 0x1E0
	0x0332D980 MRS X22, 0xC000
	0x0332D984 LDR X8, [X22 + 0x28]
	0x0332D988 ADRP X23, 0x10AF000
	0x0332D98C MOV X19, X2
	0x0332D990 MOV W21, W1
	0x0332D994 STR X8, [X31 + 0x1D8]
	0x0332D998 LDRB W8, [X23 + 0xCC5]
	0x0332D99C MOV X20, X0
	0x0332D9A0 TBNZ X8, 0x0, 0x332D9C4
	0x0332D9A4 ADRP X0, 0xDFB000
	0x0332D9A8 LDR X0, [X0 + 0x580]
	0x0332D9AC BL 0x1C16CF4
	0x0332D9B0 ADRP X0, 0xDFB000
	0x0332D9B4 LDR X0, [X0 + 0x568]
	0x0332D9B8 BL 0x1C16CF4
	0x0332D9BC MOVZ W8, 0x1
	0x0332D9C0 STRB W8, [X23 + 0xCC5]
	0x0332D9C4 STR X31, [X31 + 0x168]
	0x0332D9C8 STRH W31, [X31 + 0x164]
	0x0332D9CC STRB W31, [X31 + 0x166]
	0x0332D9D0 STR W31, [X31 + 0x1C4]
	0x0332D9D4 LDR W8, [X20 + 0x8]
	0x0332D9D8 ADRP X23, 0xDFB000
	0x0332D9DC LDR X23, [X23 + 0x568]
	0x0332D9E0 CMP W8, 0x2
	0x0332D9E4 B.NE 0x332DB08
	0x0332D9E8 TBNZ X21, 0x2, 0x332DB08
	0x0332D9EC AND W21, W21, 0xFF
	0x0332D9F0 TBNZ X21, 0x0, 0x332DA40
	0x0332D9F4 TBZ X21, 0x1, 0x332DB08
	0x0332D9F8 ADD X8, X31, 0xD8
	0x0332D9FC MOV X0, X20
	0x0332DA00 BL 0x33300B8
	0x0332DA04 ADD X1, X31, 0xD8
	0x0332DA08 MOV X0, X20
	0x0332DA0C BL 0x3331884
	0x0332DA10 TBNZ X0, 0x0, 0x332DAA0
	0x0332DA14 MOV W21, W0
	0x0332DA18 ADD X8, X31, 0xB0
	0x0332DA1C MOV X0, X20
	0x0332DA20 BL 0x3330168
	0x0332DA24 ADD X1, X31, 0xB0
	0x0332DA28 MOV X0, X20
	0x0332DA2C BL 0x3331884
	0x0332DA30 TBZ X0, 0x0, 0x332DB08
	0x0332DA34 EOR W8, W0, 0x1
	0x0332DA38 AND W21, W21, W8, 0x0
	0x0332DA3C B 0x332DB58
	0x0332DA40 ADRP X24, 0x10AF000
	0x0332DA44 LDRB W8, [X24 + 0xD04]
	0x0332DA48 CBNZ W8, 0x332DA60
	0x0332DA4C ADRP X0, 0xDFB000
	0x0332DA50 LDR X0, [X0 + 0x530]
	0x0332DA54 BL 0x1C16CF4
	0x0332DA58 MOVZ W8, 0x1
	0x0332DA5C STRB W8, [X24 + 0xD04]
	0x0332DA60 ADRP X24, 0xDFB000
	0x0332DA64 LDR X24, [X24 + 0x530]
	0x0332DA68 LDR X0, [X24]
	0x0332DA6C LDR W8, [X0 + 0xE0]
	0x0332DA70 CBNZ W8, 0x332DA7C
	0x0332DA74 BL 0x1C16DFC
	0x0332DA78 LDR X0, [X24]
	0x0332DA7C LDR X8, [X0 + 0xB8]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X24, 0x10B0000
	014 Move X23, 0xDC7000
	015 Move W8, [X24+3261]
	016 Move X23, [X23+2760]
	017 Move W20, W3
	018 Move X21, X2
	019 Move X22, X1
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {36}
	025 Move X0, 0xDF6000
	026 Move X0, [X0+40]
	027 Call 0x1C17CF4
	028 Move X0, 0xDC7000
	029 Move X0, [X0+2760]
	030 Call 0x1C17CF4
	031 Move X0, 0xDC9000
	032 Move X0, [X0+632]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X24+3261], W8
	036 Move X24, X19
	037 Move [X24+8], X31
	038 Move [X24+8], X31
	039 Move [X24+16], W31
	040 Move X0, [X23]
	041 Move W1, 6
	042 Call 0x1C17D6C
	043 Move [X24+24], X0
	044 Compare X0, 0
	045 JumpIfEqual {61}
	046 Move X9, 0xDC9000
	047 Move X9, [X9+632]
	048 Move X8, X31
	049 Move W10, [X0+24]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X10, [X9]
	053 Add X11, X0, X8
	054 Add X8, X8, 1
	055 Move X10, [X10+184]
	056 Move X10, [X10]
	057 Move [X11+32], X10
	058 Move X0, [X19+32]
	059 Compare X0, 0
	060 JumpIfNotEqual {49}
	061 Call 0x1C17F20
	062 Move W0, 16
	063 Move X1, X31
	064 Call StringBuilderCache.Acquire, X0
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X23, X0
	067 Move X26, -41508864
	068 Move W28, W31
	069 Move W27, W31
	070 Move W25, W31
	071 Move W29, 39
	072 Add X26, X26, 1712
	073 NotImplemented "Instruction CMP not yet implemented."
	074 NotImplemented "Instruction LDRH not yet implemented."
	075 NotImplemented "Instruction CMP not yet implemented."
	076 NotImplemented "Instruction CMP not yet implemented."
	077 NotImplemented "Instruction CMP not yet implemented."
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Subtract W9, W1, 92
	080 Move W8, W9
	081 ShiftRight W8, 1
	082 And W8, W8, 0x7FFF
	083 NotImplemented "Instruction BFM not yet implemented."
	084 And W9, W8, 0xFFFF
	085 NotImplemented "Instruction CMP not yet implemented."
	086 And X8, X8, 0xFFFF
	087 NotImplemented "Instruction ADR not yet implemented."
	088 Move W10, [X26]
	089 Add X9, X9, X10
	090 CallNoReturn X9
	091 Move TEMP, X28
	092 And TEMP, TEMP, 1
	093 Compare TEMP, 1
	094 JumpIfEqual {119}
	095 Move W28, W31
	096 Add W25, W25, 1
	097 NotImplemented "Instruction CMP not yet implemented."
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move TEMP, X28
	100 And TEMP, TEMP, 1
	101 Compare TEMP, 1
	102 JumpIfEqual {171}
	103 Move W8, [X19+24]
	104 Move W28, W31
	105 Move W27, 5
	106 Add W8, W8, 1
	107 Move [X19+24], W8
	108 NotImplemented "Instruction CMP not yet implemented."
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Move TEMP, X28
	111 And TEMP, TEMP, 1
	112 Compare TEMP, 1
	113 JumpIfEqual {171}
	114 Move W8, [X19+20]
	115 Move W28, W31
	116 Move W27, 4
	117 Add W8, W8, 1
	118 Move [X19+20], W8
	119 Compare X23, 0
	120 JumpIfEqual {61}
	121 Move X0, X23
	122 Move X2, X31
	123 Call StringBuilder.Append, X0, X1
	124 Move TEMP, X28
	125 And TEMP, TEMP, 1
	126 Compare TEMP, 1
	127 JumpIfNotEqual {148}
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Compare X23, 0
	130 JumpIfEqual {61}
	131 Move X8, [X23]
	132 Move X28, [X19+32]
	133 Move X0, X23
	134 Move X9, [X8+360]
	135 Move X1, [X8+368]
	136 NotImplemented "Instruction BLR not yet implemented."
	137 Compare X28, 0
	138 JumpIfEqual {61}
	139 Move W8, [X28+24]
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Add X8, X28, W27
	142 Move [X8+32], X0
	143 Move X0, X23
	144 Move W1, W31
	145 Move X2, X31
	146 Call StringBuilder.set_Length, X0, X1
	147 Move W28, W31
	148 Move W28, 1
	149 Move TEMP, X28
	150 And TEMP, TEMP, 1
	151 Compare TEMP, 1
	152 JumpIfEqual {171}
	153 Move W8, [X19+16]
	154 Move W28, W31
	155 Move W27, 3
	156 Add W8, W8, 1
	157 Move [X19+16], W8
	158 Move TEMP, X28
	159 And TEMP, TEMP, 1
	160 Compare TEMP, 1
	161 JumpIfEqual {171}
	162 Move W8, [X24]
	163 Move W28, W31
	164 Move W27, 1
	165 Add W8, W8, 1
	166 Move [X24], W8
	167 Move TEMP, X28
	168 And TEMP, TEMP, 1
	169 Compare TEMP, 1
	170 JumpIfNotEqual {176}
	171 Move W28, 1
	172 Move W1, W29
	173 Add W25, W25, 1
	174 NotImplemented "Instruction CMP not yet implemented."
	175 Move W29, W1
	176 Move W8, [X19+12]
	177 Move W28, W31
	178 Move W27, 2
	179 Add W8, W8, 1
	180 Move [X19+12], W8
	181 Move X0, X19
	182 Call FormatLiterals.get_MinuteSecondSep, X0
	183 Move X21, X0
	184 Move X0, X19
	185 Call FormatLiterals.get_SecondFractionSep, X0
	186 Move X1, X0
	187 Move X0, X21
	188 Move X2, X31
	189 Call String.Concat, X0, X1
	190 Move [X19], X0
	191 Move TEMP, X20
	192 And TEMP, TEMP, 1
	193 Compare TEMP, 1
	194 JumpIfNotEqual {197}
	195 NotImplemented "Instruction MOVI not yet implemented."
	196 Move [X24], V0
	197 Move W8, [X24]
	198 Subtract W8, W8, 1
	199 NotImplemented "Instruction CMP not yet implemented."
	200 Move W8, 2
	201 Move [X24], W8
	202 Move W8, [X19+12]
	203 Subtract W8, W8, 1
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Move W8, 2
	206 Move [X19+12], W8
	207 Move W8, [X19+16]
	208 Subtract W8, W8, 1
	209 NotImplemented "Instruction CMP not yet implemented."
	210 Move W8, 2
	211 Move [X19+16], W8
	212 Move W8, [X19+20]
	213 Subtract W8, W8, 1
	214 NotImplemented "Instruction CMP not yet implemented."
	215 Move W8, 2
	216 Move [X19+20], W8
	217 Move W8, [X19+24]
	218 Subtract W8, W8, 1
	219 NotImplemented "Instruction CMP not yet implemented."
	220 Move W8, 7
	221 Move [X19+24], W8
	222 Move X0, X23
	223 Move X20, [X31+80]
	224 Move X19, [X31+88]
	225 Move X22, [X31+64]
	226 Move X21, [X31+72]
	227 Move X24, [X31+48]
	228 Move X23, [X31+56]
	229 Move X26, [X31+32]
	230 Move X25, [X31+40]
	231 Move X28, [X31+16]
	232 Move X27, [X31+24]
	233 Move X1, X31
	234 Move X29, [X31+96]
	235 Move X30, [X31+104]
	236 Call StringBuilderCache.Release, X0
	237 Return 
	238 Call 0x1C17F28

