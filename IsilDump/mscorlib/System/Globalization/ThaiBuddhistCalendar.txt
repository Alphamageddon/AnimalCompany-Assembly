Type: System.Globalization.ThaiBuddhistCalendar

Method: System.DateTime get_MinSupportedDateTime()

Disassembly:
	0x0333ED14 ADD X0, X31, 0x8
	0x0333ED18 MOV X1, X22
	0x0333ED1C MOV X2, X31
	0x0333ED20 BL 0x3360840
	0x0333ED24 CMP W0, 0x0
	0x0333ED28 B.GT 0x333ECC8
	0x0333ED2C LDR X0, [X23]
	0x0333ED30 LDR W8, [X0 + 0xE0]
	0x0333ED34 CBNZ W8, 0x333ED40
	0x0333ED38 BL 0x1C16DFC
	0x0333ED3C LDR X0, [X23]
	0x0333ED40 LDR X8, [X0 + 0xB8]
	0x0333ED44 LDR X8, [X8]
	0x0333ED48 CBZ X8, 0x333EEAC
	0x0333ED4C LDR W9, [X8 + 0x18]
	0x0333ED50 CMP W26, W9
	0x0333ED54 B.CS 0x333EEB0
	0x0333ED58 LDR X0, [X24]
	0x0333ED5C ADD X8, X8, X27, 0x4, LSL
	0x0333ED60 LDR X22, [X8 + 0x28]
	0x0333ED64 SUB W27, W26, 0x1
	0x0333ED68 LDR W9, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x109F000
	005 Move X19, 0xDB7000
	006 Move W8, [X20+3393]
	007 Move X19, [X19+2544]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xDB7000
	013 Move X0, [X0+2544]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3393], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8+16]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.DateTime get_MaxSupportedDateTime()

Disassembly:
	0x0333ED6C CBNZ W9, 0x333ED74
	0x0333ED70 BL 0x1C16DFC
	0x0333ED74 ADD X0, X31, 0x8
	0x0333ED78 MOV X1, X22
	0x0333ED7C MOV X2, X31
	0x0333ED80 BL 0x3360840
	0x0333ED84 LDR X8, [X23]
	0x0333ED88 CMP W0, 0x0
	0x0333ED8C CSEL W26, W26, W27, EQ
	0x0333ED90 LDR W9, [X8 + 0xE0]
	0x0333ED94 CBNZ W9, 0x333EDA4
	0x0333ED98 MOV X0, X8
	0x0333ED9C BL 0x1C16DFC
	0x0333EDA0 LDR X8, [X23]
	0x0333EDA4 LDR X8, [X8 + 0xB8]
	0x0333EDA8 LDR X8, [X8]
	0x0333EDAC CBZ X8, 0x333EEAC
	0x0333EDB0 LDR W9, [X8 + 0x18]
	0x0333EDB4 CMP W26, W9
	0x0333EDB8 B.CS 0x333EEB0
	0x0333EDBC LDR X0, [X24]
	0x0333EDC0 SXTW X24, W26

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x109F000
	005 Move X19, 0xDB7000
	006 Move W8, [X20+3394]
	007 Move X19, [X19+2544]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xDB7000
	013 Move X0, [X0+2544]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3394], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8+24]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Void .ctor()

Disassembly:
	0x0333EDC4 ADD X8, X8, X24, 0x4, LSL
	0x0333EDC8 LDR X22, [X8 + 0x28]
	0x0333EDCC LDR W9, [X0 + 0xE0]
	0x0333EDD0 CBNZ W9, 0x333EDD8
	0x0333EDD4 BL 0x1C16DFC
	0x0333EDD8 ADD X0, X31, 0x8
	0x0333EDDC MOV X1, X22
	0x0333EDE0 MOV X2, X31
	0x0333EDE4 BL 0x3361F58
	0x0333EDE8 LDR X8, [X25]
	0x0333EDEC STR X0, [X31]
	0x0333EDF0 LDR W9, [X8 + 0xE0]
	0x0333EDF4 CBNZ W9, 0x333EE00
	0x0333EDF8 MOV X0, X8
	0x0333EDFC BL 0x1C16DFC
	0x0333EE00 ADD X0, X31, 0x0
	0x0333EE04 MOV X1, X31
	0x0333EE08 BL 0x33941D0
	0x0333EE0C LDR X8, [X23]
	0x0333EE10 LDR X8, [X8 + 0xB8]
	0x0333EE14 LDR X8, [X8]
	0x0333EE18 CBZ X8, 0x333EEAC
	0x0333EE1C LDR W9, [X8 + 0x18]
	0x0333EE20 CMP W26, W9
	0x0333EE24 B.CS 0x333EEB0
	0x0333EE28 ADD X8, X8, X24, 0x4, LSL
	0x0333EE2C LDR W9, [X8 + 0x20]
	0x0333EE30 AND W8, W9, 0x1
	0x0333EE34 ADD W8, W8, 0x1D
	0x0333EE38 SCVTF D1, W8
	0x0333EE3C MOVZ W8, 0x1
	0x0333EE40 FCMP D0, D1
	0x0333EE44 B.LT 0x333EE68
	0x0333EE48 SBFM W9, W9, 0x1, 0x1F
	0x0333EE4C AND W10, W9, 0x1
	0x0333EE50 ADD W10, W10, 0x1D
	0x0333EE54 FSUB D0, D0, D1
	0x0333EE58 SCVTF D1, W10
	0x0333EE5C FCMP D0, D1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x109F000
	006 Move X20, 0xDEB000
	007 Move W8, [X21+3395]
	008 Move X20, [X20+3000]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xDEA000
	015 Move X0, [X0+3000]
	016 Call 0x1C17CF4
	017 Move X0, 0xDEB000
	018 Move X0, [X0+3000]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3395], W8
	022 Move X21, 0xDEA000
	023 Move X21, [X21+3000]
	024 Move X0, X19
	025 Move X1, X31
	026 Call Calendar..ctor, X0
	027 Move X0, [X20]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {33}
	031 Call 0x1C17DFC
	032 Move X0, [X20]
	033 Move X8, [X0+184]
	034 Move X0, [X21]
	035 Move X20, [X8]
	036 Call 0x1C17F10
	037 Move X1, X19
	038 Move X2, X20
	039 Move X3, X31
	040 Move X21, X0
	041 Call GregorianCalendarHelper..ctor, X0, X1, X2
	042 Move [X19+32], X21
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Return 

Method: System.Int32 get_ID()

Disassembly:
	0x0333EE60 ADD W8, W8, 0x1
	0x0333EE64 B.GE 0x333EE48

ISIL:
	001 Move W0, 7
	002 Return X0

Method: System.Int32 GetDaysInMonth(System.Int32 year, System.Int32 month, System.Int32 era)

Disassembly:
	0x0333EE68 MOVZ X11, 0x7FF00000
	0x0333EE6C FMOV D1, X11
	0x0333EE70 FCVTZS W10, D0
	0x0333EE74 ORR W12, W31, 0x80000001
	0x0333EE78 FCMP D0, D1
	0x0333EE7C ADD W9, W26, 0x526
	0x0333EE80 CSINC W10, W12, W10, EQ

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X4, X31
	006 Move X30, [X31+16]
	007 Call GregorianCalendarHelper.GetDaysInMonth, X0, X1, X2, X3
	008 Return X0
	009 Call 0x1C17F20

Method: System.Int32 GetDaysInYear(System.Int32 year, System.Int32 era)

Disassembly:
	0x0333EE84 STR W10, [X21]
	0x0333EE88 STR W8, [X20]
	0x0333EE8C STR W9, [X19]
	0x0333EE90 LDP X20, X19, [X31 + 0x50]
	0x0333EE94 LDP X22, X21, [X31 + 0x40]
	0x0333EE98 LDP X24, X23, [X31 + 0x30]
	0x0333EE9C LDP X26, X25, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X3, X31
	006 Move X30, [X31+16]
	007 Call GregorianCalendarHelper.GetDaysInYear, X0, X1, X2
	008 Return X0
	009 Call 0x1C17F20

Method: System.Int32 GetDayOfMonth(System.DateTime time)

Disassembly:
	0x0333EEA0 LDP X30, X27, [X31 + 0x10]
	0x0333EEA4 ADD X31, X31, 0x60
	0x0333EEA8 RET
	0x0333EEAC BL 0x1C16F20
	0x0333EEB0 BL 0x1C16F28
	0x0333EEB4 SUB X31, X31, 0x40
	0x0333EEB8 STP X30, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X2, X31
	006 Move X30, [X31+16]
	007 Call GregorianCalendarHelper.GetDayOfMonth, X0, X1
	008 Return X0
	009 Call 0x1C17F20

Method: System.DayOfWeek GetDayOfWeek(System.DateTime time)

Disassembly:
	0x0333EEBC STP X20, X19, [X31 + 0x30]
	0x0333EEC0 ADRP X21, 0x109E000
	0x0333EEC4 STR X1, [X31 + 0x18]
	0x0333EEC8 ADRP X20, 0xDB6000
	0x0333EECC LDRB W8, [X21 + 0xD4E]
	0x0333EED0 LDR X20, [X20 + 0x9F0]
	0x0333EED4 MOV W19, W2

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X2, X31
	006 Move X30, [X31+16]
	007 Call GregorianCalendarHelper.GetDayOfWeek, X0, X1
	008 Return X0
	009 Call 0x1C17F20

Method: System.Int32 GetMonthsInYear(System.Int32 year, System.Int32 era)

Disassembly:
	0x0333EED8 TBNZ X8, 0x0, 0x333EEFC
	0x0333EEDC ADRP X0, 0xDB6000
	0x0333EEE0 LDR X0, [X0 + 0x9F0]
	0x0333EEE4 BL 0x1C16CF4
	0x0333EEE8 ADRP X0, 0xDEA000
	0x0333EEEC LDR X0, [X0 + 0xBE0]
	0x0333EEF0 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X3, X31
	006 Move X30, [X31+16]
	007 Call GregorianCalendarHelper.GetMonthsInYear, X0, X1, X2
	008 Return X0
	009 Call 0x1C17F20

Method: System.Int32 GetEra(System.DateTime time)

Disassembly:
	0x0333EEF4 MOVZ W8, 0x1
	0x0333EEF8 STRB W8, [X21 + 0xD4E]
	0x0333EEFC LDR X0, [X20]
	0x0333EF00 STR X31, [X31 + 0x10]
	0x0333EF04 STR W31, [X31 + 0xC]
	0x0333EF08 ADRP X21, 0xDEA000
	0x0333EF0C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X2, X31
	006 Move X30, [X31+16]
	007 Call GregorianCalendarHelper.GetEra, X0, X1
	008 Return X0
	009 Call 0x1C17F20

Method: System.Int32 GetMonth(System.DateTime time)

Disassembly:
	0x0333EF10 LDR X21, [X21 + 0xBE0]
	0x0333EF14 CBNZ W8, 0x333EF1C
	0x0333EF18 BL 0x1C16DFC
	0x0333EF1C ADD X0, X31, 0x18
	0x0333EF20 MOV X1, X31
	0x0333EF24 BL 0x3361708
	0x0333EF28 LDR X8, [X21]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X2, X31
	006 Move X30, [X31+16]
	007 Call GregorianCalendarHelper.GetMonth, X0, X1
	008 Return X0
	009 Call 0x1C17F20

Method: System.Int32 GetYear(System.DateTime time)

Disassembly:
	0x0333EF2C MOV X20, X0
	0x0333EF30 LDR W9, [X8 + 0xE0]
	0x0333EF34 CBNZ W9, 0x333EF40
	0x0333EF38 MOV X0, X8
	0x0333EF3C BL 0x1C16DFC
	0x0333EF40 MOV X0, X20
	0x0333EF44 BL 0x333E754

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X2, X31
	006 Move X30, [X31+16]
	007 Call GregorianCalendarHelper.GetYear, X0, X1
	008 Return X0
	009 Call 0x1C17F20

Method: System.Boolean IsLeapYear(System.Int32 year, System.Int32 era)

Disassembly:
	0x0333EF48 LDR X0, [X31 + 0x18]
	0x0333EF4C ADD X1, X31, 0x14
	0x0333EF50 ADD X2, X31, 0x10
	0x0333EF54 ADD X3, X31, 0xC
	0x0333EF58 BL 0x333EBC8
	0x0333EF5C CMP W19, 0x3
	0x0333EF60 B.HI 0x333EFEC

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X3, X31
	006 Move X30, [X31+16]
	007 Call GregorianCalendarHelper.IsLeapYear, X0, X1, X2
	008 Return X0
	009 Call 0x1C17F20

Method: System.DateTime ToDateTime(System.Int32 year, System.Int32 month, System.Int32 day, System.Int32 hour, System.Int32 minute, System.Int32 second, System.Int32 millisecond, System.Int32 era)

Disassembly:
	0x0333EF64 ADRP X9, 0xFFFFFFFFFD858000
	0x0333EF68 MOV W8, W19
	0x0333EF6C ADD X9, X9, 0x737
	0x0333EF70 ADR X10, 0x10
	0x0333EF74 LDRB W11, [X9, X8, LSL]
	0x0333EF78 ADD X10, X10, X11, 0x2, LSL
	0x0333EF7C BR X10
	0x0333EF80 LDR W0, [X31 + 0x14]
	0x0333EF84 B 0x333EFDC

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move W8, [X31+16]
	006 Move [X31+24], X31
	007 Move [X31+16], W8
	008 Move X30, [X31+16]
	009 Call GregorianCalendarHelper.ToDateTime, X0, X1, X2, X3, X4, X5, X6, X7, X8
	010 Return X0
	011 Call 0x1C17F20

Method: System.Int32[] get_Eras()

Disassembly:
	0x0333EF88 LDR W0, [X31 + 0x10]
	0x0333EF8C B 0x333EFDC
	0x0333EF90 LDR X0, [X21]
	0x0333EF94 LDP W20, W19, [X31 + 0x10]
	0x0333EF98 LDR W21, [X31 + 0xC]
	0x0333EF9C LDR W8, [X0 + 0xE0]
	0x0333EFA0 CBNZ W8, 0x333EFA8

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call GregorianCalendarHelper.get_Eras, X0
	008 Return X0
	009 Call 0x1C17F20

Method: System.Int32 get_TwoDigitYearMax()

Disassembly:
	0x0333EFA4 BL 0x1C16DFC
	0x0333EFA8 MOV W0, W19
	0x0333EFAC MOV W1, W20
	0x0333EFB0 MOV W2, W21
	0x0333EFB4 BL 0x333E68C
	0x0333EFB8 MOV X20, X0
	0x0333EFBC MOVZ W1, 0x1
	0x0333EFC0 MOVZ W2, 0x1
	0x0333EFC4 MOV W0, W19
	0x0333EFC8 BL 0x333E68C
	0x0333EFCC SUB W8, W20, W0
	0x0333EFD0 ADD W0, W8, 0x1
	0x0333EFD4 B 0x333EFDC
	0x0333EFD8 LDR W0, [X31 + 0xC]
	0x0333EFDC LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move W0, [X0+24]
	005 Add W31, W0, 1
	006 Move X8, [X19]
	007 Move X0, X19
	008 Move X9, [X8+424]
	009 Move X1, [X8+432]
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Move W1, 2572
	012 Move X2, X31
	013 Call Calendar.GetSystemTwoDigitYearSetting, X0, X1
	014 Move [X19+24], W0
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Return X0

Method: System.Void set_TwoDigitYearMax(System.Int32 value)

Disassembly:
	0x0333EFE0 LDP X30, X21, [X31 + 0x20]
	0x0333EFE4 ADD X31, X31, 0x40
	0x0333EFE8 RET
	0x0333EFEC ADRP X0, 0xDEA000
	0x0333EFF0 LDR X0, [X0 + 0x998]
	0x0333EFF4 BL 0x1C16D08
	0x0333EFF8 MOV X1, X31
	0x0333EFFC BL 0x33BDD84
	0x0333F000 MOV X19, X0
	0x0333F004 ADRP X0, 0xDB4000
	0x0333F008 LDR X0, [X0 + 0x5B0]
	0x0333F00C BL 0x1C16D08
	0x0333F010 BL 0x1C16F10
	0x0333F014 MOV X1, X19
	0x0333F018 MOV X2, X31
	0x0333F01C MOV X20, X0
	0x0333F020 BL 0x337DF1C
	0x0333F024 ADRP X0, 0xDE9000
	0x0333F028 LDR X0, [X0 + 0xC08]
	0x0333F02C BL 0x1C16D08
	0x0333F030 MOV X1, X0
	0x0333F034 MOV X0, X20
	0x0333F038 BL 0x1C16DEC
	0x0333F03C LDR X8, [X0]
	0x0333F040 MOVZ W2, 0x3
	0x0333F044 LDR X4, [X8 + 0x318]
	0x0333F048 LDR X3, [X8 + 0x320]
	0x0333F04C BR X4
	0x0333F050 STR X30, [X31 - 0x20]!
	0x0333F054 STP X20, X19, [X31 + 0x10]
	0x0333F058 ADRP X19, 0x109D000
	0x0333F05C STR X1, [X31 + 0x8]
	0x0333F060 ADRP X20, 0xDB5000
	0x0333F064 LDRB W8, [X19 + 0xD4F]
	0x0333F068 LDR X20, [X20 + 0x9F0]
	0x0333F06C TBNZ X8, 0x0, 0x333F084
	0x0333F070 ADRP X0, 0xDB5000
	0x0333F074 LDR X0, [X0 + 0x9F0]
	0x0333F078 BL 0x1C16CF4
	0x0333F07C MOVZ W8, 0x1
	0x0333F080 STRB W8, [X19 + 0xD4F]
	0x0333F084 LDR X0, [X20]
	0x0333F088 LDR W8, [X0 + 0xE0]
	0x0333F08C CBNZ W8, 0x333F094
	0x0333F090 BL 0x1C16DFC
	0x0333F094 ADD X0, X31, 0x8
	0x0333F098 MOV X1, X31
	0x0333F09C BL 0x3361708
	0x0333F0A0 MOVZ X8, 0x81E3
	0x0333F0A4 MOVK X8, 0xE2050000
	0x0333F0A8 MOVK X8, 0xFF1D
	0x0333F0AC MOVK X8, 0xA2E30000
	0x0333F0B0 SMULH X8, X0, X8, X31
	0x0333F0B4 ADD X8, X8, X0
	0x0333F0B8 UBFM X9, X8, 0x3F, 0x3F
	0x0333F0BC SBFM X8, X8, 0x27, 0x3F
	0x0333F0C0 ADD W8, W8, W9
	0x0333F0C4 MOVZ W9, 0x2493
	0x0333F0C8 ADD W8, W8, 0x1
	0x0333F0CC MOVK W9, 0x92490000
	0x0333F0D0 SMADDL X9, X8, X9, X31
	0x0333F0D4 UBFM X9, X9, 0x20, 0x3F
	0x0333F0D8 ADD W9, W9, W8
	0x0333F0DC SBFM W10, W9, 0x2, 0x1F
	0x0333F0E0 LDP X20, X19, [X31 + 0x10]
	0x0333F0E4 ADD W9, W10, W9, 0x1F, LSR
	0x0333F0E8 SUB W9, W9, W9, 0x3, LSL
	0x0333F0EC ADD W0, W8, W9
	0x0333F0F0 LDR X30, [X31], #0x20
	0x0333F0F4 RET
	0x0333F0F8 STP X30, X23, [X31 - 0x30]!
	0x0333F0FC STP X22, X21, [X31 + 0x10]
	0x0333F100 STP X20, X19, [X31 + 0x20]
	0x0333F104 ADRP X23, 0x109D000
	0x0333F108 ADRP X22, 0xDE9000
	0x0333F10C LDRB W8, [X23 + 0xD50]
	0x0333F110 LDR X22, [X22 + 0xBE0]
	0x0333F114 MOV W21, W3

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move W20, W1
	009 Move X1, X31
	010 Move X19, X0
	011 Call Calendar.VerifyWritable, X0
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move X8, [X19+32]
	014 Compare X8, 0
	015 JumpIfEqual {83}
	016 Move W8, [X8+16]
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move [X19+24], W20
	019 Move X20, [X31+48]
	020 Move X19, [X31+56]
	021 Move X22, [X31+32]
	022 Move X21, [X31+40]
	023 Move X30, [X31+16]
	024 Move X23, [X31+24]
	025 Add X31, X31, 64
	026 Return 
	027 Move X0, 0xDB7000
	028 Move X0, [X0+3144]
	029 Call 0x1C17D08
	030 Call 0x19913D0
	031 Call CultureInfo.get_CurrentCulture
	032 Move X20, X0
	033 Move X0, 0xDE4000
	034 Move X0, [X0+880]
	035 Call 0x1C17D08
	036 Move X1, X31
	037 Call Environment.GetResourceString, X0
	038 Move W8, 99
	039 Move [X31+12], W8
	040 Move X22, 0xDB5000
	041 Move X22, [X22+1880]
	042 Move X21, X0
	043 Move X0, X22
	044 Call 0x1C17D08
	045 Add X1, X31, 12
	046 Call 0x1C17E04
	047 Move X19, [X19+32]
	048 Move X23, X0
	049 Move X0, X19
	050 Call 0x19913C0
	051 Move W8, [X19+16]
	052 Move X0, X22
	053 Move [X31+8], W8
	054 Call 0x1C17D08
	055 Add X1, X31, 8
	056 Call 0x1C17E04
	057 Move X3, X0
	058 Move X0, X20
	059 Move X1, X21
	060 Move X2, X23
	061 Move X4, X31
	062 Call String.Format, X0, X1, X2, X3
	063 Move X19, X0
	064 Move X0, 0xDBD000
	065 Move X0, [X0+1888]
	066 Call 0x1C17D08
	067 Call 0x1C17F10
	068 Move X20, X0
	069 Move X0, 0xDEA000
	070 Move X0, [X0+1448]
	071 Call 0x1C17D08
	072 Move X1, X0
	073 Move X0, X20
	074 Move X2, X19
	075 Move X3, X31
	076 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	077 Move X0, 0xDEA000
	078 Move X0, [X0+3008]
	079 Call 0x1C17D08
	080 Move X1, X0
	081 Move X0, X20
	082 Call 0x1C17DEC
	083 Call 0x1C17F20

Method: System.Int32 ToFourDigitYear(System.Int32 year)

Disassembly:
	0x0333F118 MOV W19, W2
	0x0333F11C MOV W20, W1
	0x0333F120 TBNZ X8, 0x0, 0x333F138
	0x0333F124 ADRP X0, 0xDE9000
	0x0333F128 LDR X0, [X0 + 0xBE0]
	0x0333F12C BL 0x1C16CF4
	0x0333F130 MOVZ W8, 0x1
	0x0333F134 STRB W8, [X23 + 0xD50]
	0x0333F138 LDR X0, [X22]
	0x0333F13C LDR W8, [X0 + 0xE0]
	0x0333F140 CBNZ W8, 0x333F148
	0x0333F144 BL 0x1C16DFC
	0x0333F148 MOV W0, W20
	0x0333F14C MOV W1, W19
	0x0333F150 MOV W2, W21
	0x0333F154 BL 0x333EAEC
	0x0333F158 LDR X8, [X22]
	0x0333F15C LDR X8, [X8 + 0xB8]
	0x0333F160 LDR X8, [X8]
	0x0333F164 CBZ X8, 0x333F1A4
	0x0333F168 LDR W10, [X8 + 0x18]
	0x0333F16C SUB W9, W20, 0x526
	0x0333F170 CMP W9, W10
	0x0333F174 B.CS 0x333F1A8
	0x0333F178 ADD X8, X8, W9, 0x4, SXTW
	0x0333F17C LDR W8, [X8 + 0x20]
	0x0333F180 SUB W9, W19, 0x1
	0x0333F184 LDP X20, X19, [X31 + 0x20]
	0x0333F188 LDP X22, X21, [X31 + 0x10]
	0x0333F18C LSRV W8, W8, W9
	0x0333F190 ANDS W31, W8, 0x1
	0x0333F194 MOVZ W8, 0x1D
	0x0333F198 CINC W0, W8, NE
	0x0333F19C LDP X30, X23, [X31], #0x30
	0x0333F1A0 RET
	0x0333F1A4 BL 0x1C16F20
	0x0333F1A8 BL 0x1C16F28
	0x0333F1AC STP X30, X21, [X31 - 0x20]!
	0x0333F1B0 STP X20, X19, [X31 + 0x10]
	0x0333F1B4 ADRP X21, 0x109D000
	0x0333F1B8 ADRP X20, 0xDE9000
	0x0333F1BC LDRB W8, [X21 + 0xD51]
	0x0333F1C0 LDR X20, [X20 + 0xBE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move TEMP, X1
	005 And TEMP, TEMP, -2147483648
	006 Compare TEMP, -2147483648
	007 JumpIfEqual {25}
	008 Move X8, [X0]
	009 Move W19, W1
	010 Move X20, [X0+32]
	011 Move X9, [X8+744]
	012 Move X1, [X8+752]
	013 NotImplemented "Instruction BLR not yet implemented."
	014 Compare X20, 0
	015 JumpIfEqual {50}
	016 Move W2, W0
	017 Move X0, X20
	018 Move W1, W19
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X3, X31
	022 Move X30, [X31+32]
	023 Call GregorianCalendarHelper.ToFourDigitYear, X0, X1, X2
	024 Return X0
	025 Move X0, 0xDDD000
	026 Move X0, [X0+1648]
	027 Call 0x1C17D08
	028 Move X1, X31
	029 Call Environment.GetResourceString, X0
	030 Move X19, X0
	031 Move X0, 0xDBD000
	032 Move X0, [X0+1888]
	033 Call 0x1C17D08
	034 Call 0x1C17F10
	035 Move X20, X0
	036 Move X0, 0xDEA000
	037 Move X0, [X0+1448]
	038 Call 0x1C17D08
	039 Move X1, X0
	040 Move X0, X20
	041 Move X2, X19
	042 Move X3, X31
	043 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	044 Move X0, 0xDEA000
	045 Move X0, [X0+3016]
	046 Call 0x1C17D08
	047 Move X1, X0
	048 Move X0, X20
	049 Call 0x1C17DEC
	050 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x0333F1C4 MOV W19, W0
	0x0333F1C8 TBNZ X8, 0x0, 0x333F1E0
	0x0333F1CC ADRP X0, 0xDE9000
	0x0333F1D0 LDR X0, [X0 + 0xBE0]
	0x0333F1D4 BL 0x1C16CF4
	0x0333F1D8 MOVZ W8, 0x1
	0x0333F1DC STRB W8, [X21 + 0xD51]
	0x0333F1E0 LDR X0, [X20]
	0x0333F1E4 LDR W8, [X0 + 0xE0]
	0x0333F1E8 CBNZ W8, 0x333F1F4
	0x0333F1EC BL 0x1C16DFC
	0x0333F1F0 LDR X0, [X20]
	0x0333F1F4 LDR X8, [X0 + 0xB8]
	0x0333F1F8 LDR X8, [X8]
	0x0333F1FC CBZ X8, 0x333F244
	0x0333F200 LDR W10, [X8 + 0x18]
	0x0333F204 SUB W9, W19, 0x526
	0x0333F208 CMP W9, W10
	0x0333F20C B.CS 0x333F248
	0x0333F210 ADD X8, X8, W9, 0x4, SXTW
	0x0333F214 LDR W8, [X8 + 0x20]
	0x0333F218 MOV W0, W31
	0x0333F21C MOVZ W9, 0xC
	0x0333F220 AND W10, W8, 0x1
	0x0333F224 ADD W10, W10, W0
	0x0333F228 SUBS W9, W9, 0x1
	0x0333F22C ADD W0, W10, 0x1D
	0x0333F230 SBFM W8, W8, 0x1, 0x1F
	0x0333F234 B.NE 0x333F220
	0x0333F238 LDP X20, X19, [X31 + 0x10]
	0x0333F23C LDP X30, X21, [X31], #0x20
	0x0333F240 RET
	0x0333F244 BL 0x1C16F20
	0x0333F248 BL 0x1C16F28
	0x0333F24C STR X30, [X31 - 0x30]!
	0x0333F250 STP X22, X21, [X31 + 0x10]
	0x0333F254 STP X20, X19, [X31 + 0x20]
	0x0333F258 ADRP X21, 0x109D000
	0x0333F25C ADRP X22, 0xDE9000
	0x0333F260 LDRB W8, [X21 + 0xD52]
	0x0333F264 LDR X22, [X22 + 0xBE0]
	0x0333F268 MOV W20, W2
	0x0333F26C MOV W19, W1
	0x0333F270 TBNZ X8, 0x0, 0x333F288
	0x0333F274 ADRP X0, 0xDE9000
	0x0333F278 LDR X0, [X0 + 0xBE0]
	0x0333F27C BL 0x1C16CF4
	0x0333F280 MOVZ W8, 0x1
	0x0333F284 STRB W8, [X21 + 0xD52]
	0x0333F288 LDR X0, [X22]
	0x0333F28C LDR W8, [X0 + 0xE0]
	0x0333F290 CBNZ W8, 0x333F298
	0x0333F294 BL 0x1C16DFC
	0x0333F298 MOV W0, W19
	0x0333F29C MOV W1, W20
	0x0333F2A0 BL 0x333E9A8
	0x0333F2A4 MOV W0, W19
	0x0333F2A8 LDP X20, X19, [X31 + 0x20]
	0x0333F2AC LDP X22, X21, [X31 + 0x10]
	0x0333F2B0 LDR X30, [X31], #0x30
	0x0333F2B4 B 0x333F1AC
	0x0333F2B8 STR X30, [X31 - 0x20]!

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x109E000
	007 Move X21, 0xDEA000
	008 Move X19, 0xDEA000
	009 Move W8, [X20+3396]
	010 Move X21, [X21+2512]
	011 Move X19, [X19+2520]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xDEA000
	017 Move X0, [X0+2512]
	018 Call 0x1C17CF4
	019 Move X0, 0xDEA000
	020 Move X0, [X0+2520]
	021 Call 0x1C17CF4
	022 Move X0, 0xDEA000
	023 Move X0, [X0+3000]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+3396], W8
	027 Move X0, [X21]
	028 Move W1, 1
	029 Call 0x1C17D6C
	030 Move X8, [X19]
	031 Move X19, X0
	032 Move X0, X8
	033 Call 0x1C17F10
	034 Move W1, 1
	035 Move W2, 1
	036 Move W3, 1
	037 Move W4, 1
	038 Move TEMP, 542
	039 Not TEMP
	040 Move W5, TEMP
	041 Move W6, 544
	042 Move W7, 0x292E
	043 Move X20, X0
	044 Move [X31], X31
	045 Call EraInfo..ctor, X0, X1, X2, X3, X4, X5, X6, X7
	046 Compare X19, 0
	047 JumpIfEqual {71}
	048 Compare X20, 0
	049 JumpIfEqual {56}
	050 Move X8, [X19]
	051 Move X0, X20
	052 Move X1, [X8+64]
	053 Call 0x1C17E00
	054 Compare X0, 0
	055 JumpIfEqual {73}
	056 Move W8, [X19+24]
	057 Compare W8, 0
	058 JumpIfEqual {72}
	059 Move X8, 0xDEA000
	060 Move X8, [X8+3000]
	061 Move [X19+32], X20
	062 Move X30, [X31+16]
	063 Move X21, [X31+24]
	064 Move X8, [X8]
	065 Move X8, [X8+184]
	066 Move [X8], X19
	067 Move X20, [X31+32]
	068 Move X19, [X31+40]
	069 Add X31, X31, 48
	070 Return 
	071 Call 0x1C17F20
	072 Call 0x1C17F28
	073 Call 0x1C17F44
	074 Move X1, X31
	075 Call 0x1C17DEC

