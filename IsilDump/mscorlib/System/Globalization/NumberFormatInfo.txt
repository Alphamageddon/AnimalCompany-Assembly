Type: System.Globalization.NumberFormatInfo

Method: System.Void .ctor()

Disassembly:
	0x0333B4A4 MOV X2, X31
	0x0333B4A8 MOV X20, X0

ISIL:
	001 Move X1, X31

Method: System.Void OnSerializing(System.Runtime.Serialization.StreamingContext ctx)

Disassembly:
	0x0333B8DC BL 0x1C16F20
	0x0333B8E0 STR X30, [X31 - 0x10]!
	0x0333B8E4 LDR X0, [X0 + 0x20]
	0x0333B8E8 CBZ X0, 0x333B900
	0x0333B8EC LDR W8, [X31 + 0x10]
	0x0333B8F0 STR X31, [X31 + 0x18]
	0x0333B8F4 STR W8, [X31 + 0x10]
	0x0333B8F8 LDR X30, [X31], #0x10
	0x0333B8FC B 0x3337C2C
	0x0333B900 BL 0x1C16F20
	0x0333B904 STR X30, [X31 - 0x10]!
	0x0333B908 LDR X0, [X0 + 0x20]
	0x0333B90C CBZ X0, 0x333B91C
	0x0333B910 MOV X1, X31
	0x0333B914 LDR X30, [X31], #0x10
	0x0333B918 B 0x333790C
	0x0333B91C BL 0x1C16F20
	0x0333B920 STP X30, X19, [X31 - 0x10]!
	0x0333B924 MOV X19, X0
	0x0333B928 LDR W0, [X0 + 0x18]
	0x0333B92C ADDS W31, W0, 0x1
	0x0333B930 B.NE 0x333B954
	0x0333B934 LDR X8, [X19]
	0x0333B938 MOV X0, X19
	0x0333B93C LDP X9, X1, [X8 + 0x1A8]
	0x0333B940 BLR X9
	0x0333B944 MOVZ W1, 0x63
	0x0333B948 MOV X2, X31
	0x0333B94C BL 0x33335E0
	0x0333B950 STR W0, [X19 + 0x18]
	0x0333B954 LDP X30, X19, [X31], #0x10
	0x0333B958 RET
	0x0333B95C SUB X31, X31, 0x40

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+56]
	005 Move X1, [X19+64]
	006 Move X2, X31
	007 Call String.op_Inequality, X0, X1
	008 Move X8, [X19+56]
	009 Move X1, [X19+64]
	010 And W9, W0, 1
	011 Move X2, X31
	012 Move [X19+211], W9
	013 Move X0, X8
	014 Call String.op_Inequality, X0, X1
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfNotEqual {44}
	019 Move X0, [X19+56]
	020 Move X1, [X19+72]
	021 Move X2, X31
	022 Call String.op_Inequality, X0, X1
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {44}
	027 Move X0, [X19+80]
	028 Move X1, [X19+64]
	029 Move X2, X31
	030 Call String.op_Inequality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {44}
	035 Move X1, [X19+72]
	036 Move X0, [X19+80]
	037 Move X2, X31
	038 Call String.op_Inequality, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {44}
	043 Move W8, 1
	044 Move W8, W31
	045 Move [X19+212], W8
	046 Move X30, [X31+16]
	047 Move X19, [X31+24]
	048 Return 

Method: System.Void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx)

Disassembly:
	0x0333B960 STP X30, X23, [X31 + 0x10]

ISIL:
	001 Return 

Method: System.Void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx)

Disassembly:
	0x0333B964 STP X22, X21, [X31 + 0x20]

ISIL:
	001 Return 

Method: System.Void .ctor(System.Globalization.CultureData cultureData)

Disassembly:
	0x0333B4AC BL 0x3314A68
	0x0333B4B0 ADRP X0, 0xDED000
	0x0333B4B4 LDR X0, [X0 + 0xAD8]
	0x0333B4B8 BL 0x1C16D08
	0x0333B4BC MOV X1, X0
	0x0333B4C0 MOV X0, X20
	0x0333B4C4 BL 0x1C16DEC
	0x0333B4C8 STR X30, [X31 - 0x20]!
	0x0333B4CC STP X20, X19, [X31 + 0x10]
	0x0333B4D0 ADRP X19, 0x10A1000
	0x0333B4D4 ADRP X20, 0xDED000
	0x0333B4D8 LDRB W8, [X19 + 0xD2D]
	0x0333B4DC LDR X20, [X20 + 0x418]
	0x0333B4E0 TBNZ X8, 0x0, 0x333B4F8
	0x0333B4E4 ADRP X0, 0xDED000
	0x0333B4E8 LDR X0, [X0 + 0x418]
	0x0333B4EC BL 0x1C16CF4
	0x0333B4F0 MOVZ W8, 0x1
	0x0333B4F4 STRB W8, [X19 + 0xD2D]
	0x0333B4F8 LDR X0, [X20]
	0x0333B4FC LDR W8, [X0 + 0xE0]
	0x0333B500 CBNZ W8, 0x333B50C
	0x0333B504 BL 0x1C16DFC
	0x0333B508 LDR X0, [X20]
	0x0333B50C LDR X8, [X0 + 0xB8]
	0x0333B510 LDR X19, [X8 + 0x8]
	0x0333B514 BL 0x1C16D44
	0x0333B518 LDR X0, [X20]
	0x0333B51C CBNZ X19, 0x333B54C
	0x0333B520 BL 0x1C16F10
	0x0333B524 MOV X19, X0
	0x0333B528 BL 0x333B578
	0x0333B52C LDR X0, [X20]
	0x0333B530 LDR W8, [X0 + 0xE0]
	0x0333B534 CBNZ W8, 0x333B53C
	0x0333B538 BL 0x1C16DFC
	0x0333B53C BL 0x1C16D44
	0x0333B540 LDR X0, [X20]
	0x0333B544 LDR X8, [X0 + 0xB8]
	0x0333B548 STR X19, [X8 + 0x8]
	0x0333B54C LDR W8, [X0 + 0xE0]
	0x0333B550 CBNZ W8, 0x333B55C
	0x0333B554 BL 0x1C16DFC
	0x0333B558 LDR X0, [X20]
	0x0333B55C LDR X8, [X0 + 0xB8]
	0x0333B560 LDR X19, [X8 + 0x8]
	0x0333B564 BL 0x1C16D44
	0x0333B568 MOV X0, X19
	0x0333B56C LDP X20, X19, [X31 + 0x10]
	0x0333B570 LDR X30, [X31], #0x20
	0x0333B574 RET
	0x0333B578 STP X30, X21, [X31 - 0x20]!
	0x0333B57C STP X20, X19, [X31 + 0x10]
	0x0333B580 ADRP X21, 0x10A1000
	0x0333B584 ADRP X20, 0xDBA000
	0x0333B588 LDRB W8, [X21 + 0xD30]
	0x0333B58C LDR X20, [X20 + 0xC48]
	0x0333B590 MOV X19, X0
	0x0333B594 TBNZ X8, 0x0, 0x333B5D0
	0x0333B598 ADRP X0, 0xDBA000
	0x0333B59C LDR X0, [X0 + 0xC48]
	0x0333B5A0 BL 0x1C16CF4
	0x0333B5A4 ADRP X0, 0xDEC000
	0x0333B5A8 LDR X0, [X0 + 0xBB8]
	0x0333B5AC BL 0x1C16CF4
	0x0333B5B0 ADRP X0, 0xDED000
	0x0333B5B4 LDR X0, [X0 + 0x418]
	0x0333B5B8 BL 0x1C16CF4
	0x0333B5BC ADRP X0, 0xDED000
	0x0333B5C0 LDR X0, [X0 + 0x420]
	0x0333B5C4 BL 0x1C16CF4
	0x0333B5C8 MOVZ W8, 0x1
	0x0333B5CC STRB W8, [X21 + 0xD30]
	0x0333B5D0 MOV X0, X19
	0x0333B5D4 MOV X1, X31
	0x0333B5D8 BL 0x3332DC0
	0x0333B5DC LDR X0, [X20]
	0x0333B5E0 BL 0x1C16F10
	0x0333B5E4 ADRP X8, 0xDED000
	0x0333B5E8 LDR X8, [X8 + 0x420]
	0x0333B5EC LDR X1, [X8]
	0x0333B5F0 MOVZ W2, 0x1
	0x0333B5F4 MOV W3, W31
	0x0333B5F8 BL 0x3348BD8
	0x0333B5FC ADRP X20, 0xDED000
	0x0333B600 LDR X20, [X20 + 0x418]
	0x0333B604 ADRP X21, 0xDEC000
	0x0333B608 LDR X0, [X20]
	0x0333B60C LDR W8, [X0 + 0xE0]
	0x0333B610 LDR X21, [X21 + 0xBB8]
	0x0333B614 CBNZ W8, 0x333B620
	0x0333B618 BL 0x1C16DFC
	0x0333B61C LDR X0, [X20]
	0x0333B620 LDR X8, [X0 + 0xB8]
	0x0333B624 LDR X0, [X21]
	0x0333B628 LDR X20, [X8]
	0x0333B62C BL 0x1C16F10
	0x0333B630 MOV X1, X19
	0x0333B634 MOV X2, X20
	0x0333B638 MOV X3, X31
	0x0333B63C MOV X21, X0
	0x0333B640 BL 0x3336904
	0x0333B644 STR X21, [X19 + 0x20]
	0x0333B648 LDP X20, X19, [X31 + 0x10]
	0x0333B64C LDP X30, X21, [X31], #0x20
	0x0333B650 RET
	0x0333B654 CMP W1, 0x1
	0x0333B658 MOV X20, X0
	0x0333B65C B.NE 0x333B720
	0x0333B660 MOV X0, X20
	0x0333B664 BL 0x3EB1AD0
	0x0333B668 MOV X20, X0
	0x0333B66C ADRP X0, 0xDC0000
	0x0333B670 LDR X0, [X0 + 0x578]
	0x0333B674 BL 0x1C16D08
	0x0333B678 LDR X8, [X20]
	0x0333B67C LDR X1, [X8]
	0x0333B680 BL 0x1C17270
	0x0333B684 TBZ X0, 0x0, 0x333B6F8
	0x0333B688 LDR X20, [X20]
	0x0333B68C BL 0x3EB1AE0
	0x0333B690 MOV X0, X19
	0x0333B694 MOV X1, X31
	0x0333B698 BL 0x33BE520
	0x0333B69C MOV X19, X0
	0x0333B6A0 BL 0x19903C0
	0x0333B6A4 LDR X8, [X19]
	0x0333B6A8 MOV X0, X19
	0x0333B6AC LDR X9, [X8 + 0x2E8]
	0x0333B6B0 LDR X1, [X8 + 0x2F0]
	0x0333B6B4 BLR X9
	0x0333B6B8 MOV X19, X0
	0x0333B6BC ADRP X0, 0xDED000
	0x0333B6C0 LDR X0, [X0 + 0xA38]
	0x0333B6C4 BL 0x1C16D08
	0x0333B6C8 BL 0x1C16F10
	0x0333B6CC MOV X1, X19
	0x0333B6D0 MOV X2, X20
	0x0333B6D4 MOV X3, X31
	0x0333B6D8 MOV X21, X0
	0x0333B6DC BL 0x33988F4
	0x0333B6E0 ADRP X0, 0xDED000
	0x0333B6E4 LDR X0, [X0 + 0xAE0]
	0x0333B6E8 BL 0x1C16D08
	0x0333B6EC MOV X1, X0
	0x0333B6F0 MOV X0, X21
	0x0333B6F4 BL 0x1C16DEC
	0x0333B6F8 MOVZ W0, 0x8
	0x0333B6FC BL 0x3EB1AF0
	0x0333B700 LDR X8, [X20]
	0x0333B704 STR X8, [X0]
	0x0333B708 ADRP X1, 0xB79000
	0x0333B70C ADD X1, X1, 0xE58
	0x0333B710 MOV X2, X31
	0x0333B714 BL 0x3EB1B00
	0x0333B718 MOV X20, X0
	0x0333B71C BL 0x3EB1AE0
	0x0333B720 MOV X0, X20
	0x0333B724 BL 0x1D2C690
	0x0333B728 BL 0x1990590
	0x0333B72C STR X30, [X31 - 0x20]!
	0x0333B730 STP X20, X19, [X31 + 0x10]
	0x0333B734 ADRP X20, 0x10A1000
	0x0333B738 ADRP X19, 0xDED000
	0x0333B73C LDRB W8, [X20 + 0xD2E]
	0x0333B740 LDR X19, [X19 + 0x418]
	0x0333B744 TBNZ X8, 0x0, 0x333B75C
	0x0333B748 ADRP X0, 0xDED000
	0x0333B74C LDR X0, [X0 + 0x418]
	0x0333B750 BL 0x1C16CF4
	0x0333B754 MOVZ W8, 0x1
	0x0333B758 STRB W8, [X20 + 0xD2E]
	0x0333B75C LDR X0, [X19]
	0x0333B760 LDR W8, [X0 + 0xE0]
	0x0333B764 CBNZ W8, 0x333B770
	0x0333B768 BL 0x1C16DFC
	0x0333B76C LDR X0, [X19]
	0x0333B770 LDR X8, [X0 + 0xB8]
	0x0333B774 LDP X20, X19, [X31 + 0x10]
	0x0333B778 LDR X0, [X8 + 0x10]
	0x0333B77C LDR X30, [X31], #0x20
	0x0333B780 RET
	0x0333B784 STR X30, [X31 - 0x20]!
	0x0333B788 STP X20, X19, [X31 + 0x10]
	0x0333B78C ADRP X20, 0x10A1000
	0x0333B790 ADRP X19, 0xDB9000
	0x0333B794 LDRB W8, [X20 + 0xD2F]
	0x0333B798 LDR X19, [X19 + 0x9F0]
	0x0333B79C TBNZ X8, 0x0, 0x333B7B4
	0x0333B7A0 ADRP X0, 0xDB9000
	0x0333B7A4 LDR X0, [X0 + 0x9F0]
	0x0333B7A8 BL 0x1C16CF4
	0x0333B7AC MOVZ W8, 0x1
	0x0333B7B0 STRB W8, [X20 + 0xD2F]
	0x0333B7B4 LDR X0, [X19]
	0x0333B7B8 LDR W8, [X0 + 0xE0]
	0x0333B7BC CBNZ W8, 0x333B7C8
	0x0333B7C0 BL 0x1C16DFC
	0x0333B7C4 LDR X0, [X19]
	0x0333B7C8 LDR X8, [X0 + 0xB8]
	0x0333B7CC LDP X20, X19, [X31 + 0x10]
	0x0333B7D0 LDR X0, [X8 + 0x18]
	0x0333B7D4 LDR X30, [X31], #0x20
	0x0333B7D8 RET
	0x0333B7DC MOVZ W0, 0x4
	0x0333B7E0 RET
	0x0333B7E4 STR X30, [X31 - 0x10]!
	0x0333B7E8 LDR X0, [X0 + 0x20]
	0x0333B7EC CBZ X0, 0x333B7FC
	0x0333B7F0 MOV X4, X31
	0x0333B7F4 LDR X30, [X31], #0x10
	0x0333B7F8 B 0x33375FC
	0x0333B7FC BL 0x1C16F20
	0x0333B800 STR X30, [X31 - 0x10]!
	0x0333B804 LDR X0, [X0 + 0x20]
	0x0333B808 CBZ X0, 0x333B818
	0x0333B80C MOV X3, X31
	0x0333B810 LDR X30, [X31], #0x10
	0x0333B814 B 0x3337798
	0x0333B818 BL 0x1C16F20
	0x0333B81C STR X30, [X31 - 0x10]!
	0x0333B820 LDR X0, [X0 + 0x20]
	0x0333B824 CBZ X0, 0x333B834
	0x0333B828 MOV X2, X31
	0x0333B82C LDR X30, [X31], #0x10
	0x0333B830 B 0x33374B0
	0x0333B834 BL 0x1C16F20
	0x0333B838 STR X30, [X31 - 0x10]!
	0x0333B83C LDR X0, [X0 + 0x20]
	0x0333B840 CBZ X0, 0x333B850
	0x0333B844 MOV X2, X31
	0x0333B848 LDR X30, [X31], #0x10
	0x0333B84C B 0x3337530
	0x0333B850 BL 0x1C16F20
	0x0333B854 STR X30, [X31 - 0x10]!
	0x0333B858 LDR X0, [X0 + 0x20]
	0x0333B85C CBZ X0, 0x333B86C
	0x0333B860 MOV X3, X31
	0x0333B864 LDR X30, [X31], #0x10
	0x0333B868 B 0x3337A7C
	0x0333B86C BL 0x1C16F20
	0x0333B870 STR X30, [X31 - 0x10]!
	0x0333B874 LDR X0, [X0 + 0x20]
	0x0333B878 CBZ X0, 0x333B888
	0x0333B87C MOV X2, X31
	0x0333B880 LDR X30, [X31], #0x10
	0x0333B884 B 0x3337804
	0x0333B888 BL 0x1C16F20
	0x0333B88C STR X30, [X31 - 0x10]!
	0x0333B890 LDR X0, [X0 + 0x20]
	0x0333B894 CBZ X0, 0x333B8A4
	0x0333B898 MOV X2, X31
	0x0333B89C LDR X30, [X31], #0x10
	0x0333B8A0 B 0x33379FC
	0x0333B8A4 BL 0x1C16F20
	0x0333B8A8 STR X30, [X31 - 0x10]!
	0x0333B8AC LDR X0, [X0 + 0x20]
	0x0333B8B0 CBZ X0, 0x333B8C0
	0x0333B8B4 MOV X2, X31
	0x0333B8B8 LDR X30, [X31], #0x10
	0x0333B8BC B 0x3337A94
	0x0333B8C0 BL 0x1C16F20
	0x0333B8C4 STR X30, [X31 - 0x10]!
	0x0333B8C8 LDR X0, [X0 + 0x20]
	0x0333B8CC CBZ X0, 0x333B8DC
	0x0333B8D0 MOV X3, X31
	0x0333B8D4 LDR X30, [X31], #0x10
	0x0333B8D8 B 0x3337BBC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x10A2000
	007 Move X21, 0xDBA000
	008 Move W8, [X22+3363]
	009 Move X21, [X21+3672]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {87}
	016 Move X0, 0xDED000
	017 Move X0, [X0+2352]
	018 Call 0x1C17CF4
	019 Move X0, 0xDBA000
	020 Move X0, [X0+3672]
	021 Call 0x1C17CF4
	022 Move X0, 0xDB9000
	023 Move X0, [X0+2760]
	024 Call 0x1C17CF4
	025 Move X0, 0xDEE000
	026 Move X0, [X0+2648]
	027 Call 0x1C17CF4
	028 Move X0, 0xDCA000
	029 Move X0, [X0+280]
	030 Call 0x1C17CF4
	031 Move X0, 0xDBE000
	032 Move X0, [X0+1016]
	033 Call 0x1C17CF4
	034 Move X0, 0xDCA000
	035 Move X0, [X0+824]
	036 Call 0x1C17CF4
	037 Move X0, 0xDCA000
	038 Move X0, [X0+2472]
	039 Call 0x1C17CF4
	040 Move X0, 0xDCB000
	041 Move X0, [X0+2224]
	042 Call 0x1C17CF4
	043 Move X0, 0xDBA000
	044 Move X0, [X0+680]
	045 Call 0x1C17CF4
	046 Move X0, 0xDEE000
	047 Move X0, [X0+2656]
	048 Call 0x1C17CF4
	049 Move X0, 0xDEE000
	050 Move X0, [X0+2664]
	051 Call 0x1C17CF4
	052 Move X0, 0xDE3000
	053 Move X0, [X0+2824]
	054 Call 0x1C17CF4
	055 Move X0, 0xDEE000
	056 Move X0, [X0+2672]
	057 Call 0x1C17CF4
	058 Move X0, 0xDD2000
	059 Move X0, [X0+880]
	060 Call 0x1C17CF4
	061 Move X0, 0xDD2000
	062 Move X0, [X0+1064]
	063 Call 0x1C17CF4
	064 Move X0, 0xDEE000
	065 Move X0, [X0+2680]
	066 Call 0x1C17CF4
	067 Move X0, 0xDD8000
	068 Move X0, [X0+1736]
	069 Call 0x1C17CF4
	070 Move X0, 0xDBB000
	071 Move X0, [X0+928]
	072 Call 0x1C17CF4
	073 Move X0, 0xDDD000
	074 Move X0, [X0+3776]
	075 Call 0x1C17CF4
	076 Move X0, 0xDC2000
	077 Move X0, [X0+1936]
	078 Call 0x1C17CF4
	079 Move X0, 0xDDF000
	080 Move X0, [X0+1448]
	081 Call 0x1C17CF4
	082 Move X0, 0xDBB000
	083 Move X0, [X0+1200]
	084 Call 0x1C17CF4
	085 Move W8, 1
	086 Move [X22+3363], W8
	087 Move X0, [X21]
	088 Move W1, 1
	089 Call 0x1C17D6C
	090 Compare X0, 0
	091 JumpIfEqual {283}
	092 Move W8, [X0+24]
	093 Compare W8, 0
	094 JumpIfEqual {282}
	095 Move W8, 3
	096 Move [X0+32], W8
	097 Move [X19+16], X0
	098 Move X0, [X21]
	099 Move W1, 1
	100 Call 0x1C17D6C
	101 Compare X0, 0
	102 JumpIfEqual {283}
	103 Move W8, [X0+24]
	104 Compare W8, 0
	105 JumpIfEqual {282}
	106 Move W8, 3
	107 Move [X0+32], W8
	108 Move [X19+24], X0
	109 Move X0, [X21]
	110 Move W1, 1
	111 Call 0x1C17D6C
	112 Compare X0, 0
	113 JumpIfEqual {283}
	114 Move W8, [X0+24]
	115 Compare W8, 0
	116 JumpIfEqual {282}
	117 Move X8, 0xDBE000
	118 Move X8, [X8+1016]
	119 Move W9, 3
	120 Move [X0+32], W9
	121 Move [X19+32], X0
	122 Move X8, [X8]
	123 Move X9, 0xDBA000
	124 Move X9, [X9+680]
	125 Move X10, 0xDEE000
	126 Move [X19+40], X8
	127 Move X11, 0xDEE000
	128 Move X8, [X9]
	129 Move X9, 0xDC2000
	130 Move X9, [X9+1936]
	131 Move W1, 10
	132 Move [X19+48], X8
	133 Move X8, [X9]
	134 Move X9, 0xDBB000
	135 Move X9, [X9+928]
	136 Move [X19+56], X8
	137 Move X9, [X9]
	138 Move X10, [X10+2656]
	139 Move [X19+72], X9
	140 Move [X19+80], X8
	141 Move [X19+64], X9
	142 Move X10, [X10]
	143 Move X11, [X11+2680]
	144 Move [X19+88], X10
	145 Move X10, [X11]
	146 Move X11, 0xDEE000
	147 Move X11, [X11+2664]
	148 Move [X19+104], X10
	149 Move X10, [X11]
	150 Move X11, 0xDEE000
	151 Move X11, [X11+2672]
	152 Move [X19+112], X10
	153 Move X10, [X11]
	154 Move X11, 0xDE3000
	155 Move X11, [X11+2824]
	156 Move [X19+136], X9
	157 Move [X19+120], X10
	158 Move [X19+128], X8
	159 Move X9, 0xDEE000
	160 Move X8, [X11]
	161 Move X9, [X9+2648]
	162 Move [X19+144], X8
	163 Move X8, [X9]
	164 Move X9, 0xDB9000
	165 Move X9, [X9+2760]
	166 Move [X19+152], X8
	167 Move X0, [X9]
	168 Call 0x1C17D6C
	169 Compare X0, 0
	170 JumpIfEqual {283}
	171 Move W8, [X0+24]
	172 Compare W8, 0
	173 JumpIfEqual {282}
	174 Move X9, 0xDBB000
	175 Move X9, [X9+1200]
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Move X9, [X9]
	178 Move [X0+32], X9
	179 Move X9, 0xDDD000
	180 Move X9, [X9+3776]
	181 NotImplemented "Instruction CMP not yet implemented."
	182 Move X9, [X9]
	183 Move [X0+40], X9
	184 Move X9, 0xDCA000
	185 Move X9, [X9+824]
	186 NotImplemented "Instruction CMP not yet implemented."
	187 Move X9, [X9]
	188 Move [X0+48], X9
	189 Move X9, 0xDCA000
	190 Move X9, [X9+280]
	191 NotImplemented "Instruction CMP not yet implemented."
	192 Move X9, [X9]
	193 Move [X0+56], X9
	194 Move X9, 0xDD2000
	195 Move X9, [X9+1064]
	196 NotImplemented "Instruction CMP not yet implemented."
	197 Move X9, [X9]
	198 Move [X0+64], X9
	199 Move X9, 0xDDF000
	200 Move X9, [X9+1448]
	201 NotImplemented "Instruction CMP not yet implemented."
	202 Move X9, [X9]
	203 Move [X0+72], X9
	204 Move X9, 0xDCB000
	205 Move X9, [X9+2224]
	206 NotImplemented "Instruction CMP not yet implemented."
	207 Move X9, [X9]
	208 Move [X0+80], X9
	209 Move X9, 0xDD2000
	210 Move X9, [X9+880]
	211 NotImplemented "Instruction CMP not yet implemented."
	212 Move X9, [X9]
	213 Move [X0+88], X9
	214 Move X9, 0xDD8000
	215 Move X9, [X9+1736]
	216 NotImplemented "Instruction CMP not yet implemented."
	217 Move X9, [X9]
	218 Move [X0+96], X9
	219 Move X8, 0xDCA000
	220 Move X8, [X8+2472]
	221 Move X21, 0xDED000
	222 Move X21, [X21+2352]
	223 Move X10, -42258432
	224 Move X8, [X8]
	225 Move V1, [X10+2584]
	226 NotImplemented "Instruction MOVI not yet implemented."
	227 Move W9, 1
	228 Move W11, 257
	229 Move [X0+104], X8
	230 Move [X19+160], X0
	231 Move X0, X19
	232 Move X1, X31
	233 Move [X19+172], D0
	234 Move [X19+188], W9
	235 Move [X19+200], D1
	236 NotImplemented "Instruction STURH not yet implemented."
	237 Call Object..ctor, X0
	238 Move X0, [X21]
	239 Move W8, [X0+224]
	240 Compare W8, 0
	241 JumpIfNotEqual {243}
	242 Call 0x1C17DFC
	243 Move X22, 0x10A2000
	244 Move W8, [X22+2814]
	245 Compare W8, 0
	246 JumpIfNotEqual {252}
	247 Move X0, 0xDED000
	248 Move X0, [X0+2352]
	249 Call 0x1C17CF4
	250 Move W8, 1
	251 Move [X22+2814], W8
	252 Move X0, [X21]
	253 Move W8, [X0+224]
	254 Compare W8, 0
	255 JumpIfNotEqual {258}
	256 Call 0x1C17DFC
	257 Move X0, [X21]
	258 Move X8, [X0+184]
	259 Move W8, [X8]
	260 Compare W8, 0
	261 JumpIfEqual {270}
	262 Move W8, 1
	263 Move [X19+210], W8
	264 Move X20, [X31+32]
	265 Move X19, [X31+40]
	266 Move X22, [X31+16]
	267 Move X21, [X31+24]
	268 Move X30, [X31+48]
	269 Return 
	270 Compare X20, 0
	271 JumpIfEqual {264}
	272 Move X0, X20
	273 Move X1, X19
	274 Call CultureData.GetNFIValues, X0, X1
	275 Move X0, [X20+88]
	276 Move X1, X31
	277 Call String.IsNullOrEmpty, X0
	278 Move TEMP, X0
	279 And TEMP, TEMP, 1
	280 Compare TEMP, 1
	281 JumpIfEqual {262}
	282 Call 0x1C17F28
	283 Call 0x1C17F20

Method: System.Void VerifyWritable()

Disassembly:
	0x0333BB0C BL 0x33387A0
	0x0333BB10 MOV X19, X0
	0x0333BB14 ADRP X0, 0xDE7000
	0x0333BB18 LDR X0, [X0 + 0x370]
	0x0333BB1C BL 0x1C16D08
	0x0333BB20 MOV X1, X31
	0x0333BB24 BL 0x33BDD84
	0x0333BB28 MOVZ W8, 0x1
	0x0333BB2C STR W8, [X31 + 0xC]
	0x0333BB30 ADRP X21, 0xDB8000
	0x0333BB34 LDR X21, [X21 + 0x758]
	0x0333BB38 MOV X20, X0
	0x0333BB3C MOV X0, X21
	0x0333BB40 BL 0x1C16D08
	0x0333BB44 ADD X1, X31, 0xC
	0x0333BB48 BL 0x1C16E04
	0x0333BB4C LDR X22, [X22 + 0x20]
	0x0333BB50 MOV X23, X0
	0x0333BB54 MOV X0, X22
	0x0333BB58 BL 0x19903C0
	0x0333BB5C LDR W8, [X22 + 0x10]
	0x0333BB60 MOV X0, X21
	0x0333BB64 STR W8, [X31 + 0x8]
	0x0333BB68 BL 0x1C16D08
	0x0333BB6C ADD X1, X31, 0x8
	0x0333BB70 BL 0x1C16E04
	0x0333BB74 MOV X3, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+208]
	005 Compare W8, 0
	006 JumpIfNotEqual {11}
	007 Move X20, [X31+16]
	008 Move X19, [X31+24]
	009 Move X30, [X31+32]
	010 Return 
	011 Move X0, 0xDE8000
	012 Move X0, [X0+2616]
	013 Call 0x1C17D08
	014 Move X1, X31
	015 Call Environment.GetResourceString, X0
	016 Move X19, X0
	017 Move X0, 0xDB9000
	018 Move X0, [X0+1456]
	019 Call 0x1C17D08
	020 Call 0x1C17F10
	021 Move X1, X19
	022 Move X2, X31
	023 Move X20, X0
	024 Call InvalidOperationException..ctor, X0, X1
	025 Move X0, 0xDEE000
	026 Move X0, [X0+2688]
	027 Call 0x1C17D08
	028 Move X1, X0
	029 Move X0, X20
	030 Call 0x1C17DEC

Method: System.Globalization.NumberFormatInfo get_InvariantInfo()

Disassembly:
	0x0333BB78 MOV X0, X19
	0x0333BB7C MOV X1, X20
	0x0333BB80 MOV X2, X23
	0x0333BB84 MOV X4, X31
	0x0333BB88 BL 0x3227D58
	0x0333BB8C MOV X19, X0
	0x0333BB90 ADRP X0, 0xDC0000
	0x0333BB94 LDR X0, [X0 + 0x760]
	0x0333BB98 BL 0x1C16D08
	0x0333BB9C BL 0x1C16F10
	0x0333BBA0 MOV X20, X0
	0x0333BBA4 ADRP X0, 0xDED000
	0x0333BBA8 LDR X0, [X0 + 0x5A8]
	0x0333BBAC BL 0x1C16D08
	0x0333BBB0 MOV X1, X0
	0x0333BBB4 MOV X0, X20
	0x0333BBB8 MOV X2, X19
	0x0333BBBC MOV X3, X31
	0x0333BBC0 BL 0x3311888
	0x0333BBC4 ADRP X0, 0xDED000
	0x0333BBC8 LDR X0, [X0 + 0xAF0]
	0x0333BBCC BL 0x1C16D08
	0x0333BBD0 MOV X1, X0
	0x0333BBD4 MOV X0, X20
	0x0333BBD8 BL 0x1C16DEC
	0x0333BBDC SUB X31, X31, 0x30
	0x0333BBE0 STP X30, X21, [X31 + 0x10]
	0x0333BBE4 STP X20, X19, [X31 + 0x20]
	0x0333BBE8 ADRP X20, 0x10A1000
	0x0333BBEC ADRP X21, 0xDED000
	0x0333BBF0 ADRP X19, 0xDED000
	0x0333BBF4 LDRB W8, [X20 + 0xD31]
	0x0333BBF8 LDR X21, [X21 + 0x9D0]
	0x0333BBFC LDR X19, [X19 + 0x9D8]
	0x0333BC00 TBNZ X8, 0x0, 0x333BC30
	0x0333BC04 ADRP X0, 0xDED000
	0x0333BC08 LDR X0, [X0 + 0x9D0]
	0x0333BC0C BL 0x1C16CF4
	0x0333BC10 ADRP X0, 0xDED000
	0x0333BC14 LDR X0, [X0 + 0x9D8]
	0x0333BC18 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x10A2000
	005 Move X20, 0xDEE000
	006 Move W8, [X19+3364]
	007 Move X20, [X20+968]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xDEE000
	013 Move X0, [X0+968]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3364], W8
	017 Move X8, [X20]
	018 Move X8, [X8+184]
	019 Move X19, [X8]
	020 Call 0x1C17D44
	021 Compare X19, 0
	022 JumpIfNotEqual {39}
	023 Move X0, [X20]
	024 Call 0x1C17F10
	025 Move X1, X31
	026 Move X19, X0
	027 Call NumberFormatInfo..ctor, X0, X1
	028 Compare X19, 0
	029 JumpIfEqual {48}
	030 Move W8, 1
	031 Move X0, X19
	032 Move [X19+210], W8
	033 Call NumberFormatInfo.ReadOnly, X0
	034 Move X19, X0
	035 Call 0x1C17D44
	036 Move X8, [X20]
	037 Move X8, [X8+184]
	038 Move [X8], X19
	039 Move X8, [X20]
	040 Move X8, [X8+184]
	041 Move X19, [X8]
	042 Call 0x1C17D44
	043 Move X0, X19
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X30, [X31+32]
	047 Return X0
	048 Call 0x1C17F20

Method: System.Globalization.NumberFormatInfo GetInstance(System.IFormatProvider formatProvider)

Disassembly:
	0x0333BCEC BL 0x1C16F20
	0x0333BCF0 BL 0x1C16F28
	0x0333BCF4 BL 0x1C16F44
	0x0333BCF8 MOV X1, X31
	0x0333BCFC BL 0x1C16DEC
	0x0333BD00 STP X30, X21, [X31 - 0x20]!
	0x0333BD04 STP X20, X19, [X31 + 0x10]
	0x0333BD08 ADRP X19, 0x10A1000
	0x0333BD0C ADRP X21, 0xDED000
	0x0333BD10 LDRB W8, [X19 + 0xD32]
	0x0333BD14 LDR X21, [X21 + 0xAF8]
	0x0333BD18 TBNZ X8, 0x0, 0x333BD30
	0x0333BD1C ADRP X0, 0xDED000
	0x0333BD20 LDR X0, [X0 + 0xAF8]
	0x0333BD24 BL 0x1C16CF4
	0x0333BD28 MOVZ W8, 0x1
	0x0333BD2C STRB W8, [X19 + 0xD32]
	0x0333BD30 LDR X8, [X21]
	0x0333BD34 LDR X8, [X8 + 0xB8]
	0x0333BD38 LDR X19, [X8]
	0x0333BD3C BL 0x1C16D44
	0x0333BD40 CBNZ X19, 0x333BD74
	0x0333BD44 BL 0x333BD94
	0x0333BD48 LDR X8, [X21]
	0x0333BD4C MOV X19, X0
	0x0333BD50 MOV X0, X8
	0x0333BD54 BL 0x1C16F10
	0x0333BD58 MOV X1, X19
	0x0333BD5C MOV X20, X0
	0x0333BD60 BL 0x333C0A0
	0x0333BD64 BL 0x1C16D44
	0x0333BD68 LDR X8, [X21]
	0x0333BD6C LDR X8, [X8 + 0xB8]
	0x0333BD70 STR X20, [X8]
	0x0333BD74 LDR X8, [X21]
	0x0333BD78 LDR X8, [X8 + 0xB8]
	0x0333BD7C LDR X19, [X8]
	0x0333BD80 BL 0x1C16D44
	0x0333BD84 MOV X0, X19
	0x0333BD88 LDP X20, X19, [X31 + 0x10]
	0x0333BD8C LDP X30, X21, [X31], #0x20
	0x0333BD90 RET
	0x0333BD94 STR X30, [X31 - 0x30]!
	0x0333BD98 STP X22, X21, [X31 + 0x10]
	0x0333BD9C STP X20, X19, [X31 + 0x20]
	0x0333BDA0 ADRP X19, 0x10A1000
	0x0333BDA4 ADRP X22, 0xDED000
	0x0333BDA8 LDRB W8, [X19 + 0xD5E]
	0x0333BDAC LDR X22, [X22 + 0xB00]
	0x0333BDB0 TBNZ X8, 0x0, 0x333BE7C
	0x0333BDB4 ADRP X0, 0xDED000
	0x0333BDB8 LDR X0, [X0 + 0xB08]
	0x0333BDBC BL 0x1C16CF4
	0x0333BDC0 ADRP X0, 0xDED000
	0x0333BDC4 LDR X0, [X0 + 0x5A0]
	0x0333BDC8 BL 0x1C16CF4
	0x0333BDCC ADRP X0, 0xDED000
	0x0333BDD0 LDR X0, [X0 + 0xB00]
	0x0333BDD4 BL 0x1C16CF4
	0x0333BDD8 ADRP X0, 0xDB9000
	0x0333BDDC LDR X0, [X0 + 0xE58]
	0x0333BDE0 BL 0x1C16CF4
	0x0333BDE4 ADRP X0, 0xDB8000
	0x0333BDE8 LDR X0, [X0 + 0xAC8]
	0x0333BDEC BL 0x1C16CF4
	0x0333BDF0 ADRP X0, 0xDED000
	0x0333BDF4 LDR X0, [X0 + 0xB10]
	0x0333BDF8 BL 0x1C16CF4
	0x0333BDFC ADRP X0, 0xDED000
	0x0333BE00 LDR X0, [X0 + 0xB18]
	0x0333BE04 BL 0x1C16CF4
	0x0333BE08 ADRP X0, 0xDC1000
	0x0333BE0C LDR X0, [X0 + 0x988]
	0x0333BE10 BL 0x1C16CF4
	0x0333BE14 ADRP X0, 0xDED000
	0x0333BE18 LDR X0, [X0 + 0xB20]
	0x0333BE1C BL 0x1C16CF4
	0x0333BE20 ADRP X0, 0xDED000
	0x0333BE24 LDR X0, [X0 + 0xB28]
	0x0333BE28 BL 0x1C16CF4
	0x0333BE2C ADRP X0, 0xDED000
	0x0333BE30 LDR X0, [X0 + 0xB30]
	0x0333BE34 BL 0x1C16CF4
	0x0333BE38 ADRP X0, 0xDBA000
	0x0333BE3C LDR X0, [X0 + 0x3A0]
	0x0333BE40 BL 0x1C16CF4
	0x0333BE44 ADRP X0, 0xDED000
	0x0333BE48 LDR X0, [X0 + 0xB38]
	0x0333BE4C BL 0x1C16CF4
	0x0333BE50 ADRP X0, 0xDED000
	0x0333BE54 LDR X0, [X0 + 0xB40]
	0x0333BE58 BL 0x1C16CF4
	0x0333BE5C ADRP X0, 0xDED000
	0x0333BE60 LDR X0, [X0 + 0xB48]
	0x0333BE64 BL 0x1C16CF4
	0x0333BE68 ADRP X0, 0xDB8000
	0x0333BE6C LDR X0, [X0 + 0x988]
	0x0333BE70 BL 0x1C16CF4
	0x0333BE74 MOVZ W8, 0x1
	0x0333BE78 STRB W8, [X19 + 0xD5E]
	0x0333BE7C LDR X0, [X22]
	0x0333BE80 LDR X8, [X0 + 0xB8]
	0x0333BE84 LDR X8, [X8]
	0x0333BE88 CBNZ X8, 0x333C078
	0x0333BE8C BL 0x1C16F10
	0x0333BE90 ADRP X8, 0xDB8000
	0x0333BE94 LDR X8, [X8 + 0x988]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x10A2000
	006 Move W8, [X20+3365]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {29}
	012 Move X0, 0xDBB000
	013 Move X0, [X0+3144]
	014 Call 0x1C17CF4
	015 Move X0, 0xDE8000
	016 Move X0, [X0+1520]
	017 Call 0x1C17CF4
	018 Move X0, 0xDEE000
	019 Move X0, [X0+2712]
	020 Call 0x1C17CF4
	021 Move X0, 0xDEE000
	022 Move X0, [X0+968]
	023 Call 0x1C17CF4
	024 Move X0, 0xDB9000
	025 Move X0, [X0+1728]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+3365], W8
	029 Compare X19, 0
	030 JumpIfEqual {94}
	031 Move X9, 0xDBB000
	032 Move X9, [X9+3144]
	033 Move X8, [X19]
	034 Move X9, [X9]
	035 Move W11, [X8+304]
	036 Move W10, [X9+304]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X11, [X8+200]
	039 Add X10, X11, X10
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move W9, [X19+200]
	043 Compare W9, 0
	044 JumpIfEqual {98}
	045 Move X21, 0xDEE000
	046 Move X21, [X21+968]
	047 Move X9, [X21]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move X8, 0xDB9000
	050 Move X8, [X8+1728]
	051 Move X0, [X8]
	052 Move X8, 0xDEE000
	053 Move X8, [X8+2712]
	054 Move W9, [X0+224]
	055 Move X20, [X8]
	056 Compare W9, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move X0, X20
	060 Move X1, X31
	061 Call Type.GetTypeFromHandle, X0
	062 Move X10, 0xDE8000
	063 Move X8, [X19]
	064 Move X10, [X10+1520]
	065 Move X20, X0
	066 NotImplemented "Instruction LDRH not yet implemented."
	067 Move X1, [X10]
	068 Compare X9, 0
	069 JumpIfEqual {76}
	070 Move X10, [X8+176]
	071 Add X10, X10, 8
	072 NotImplemented "Instruction LDUR not yet implemented."
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Subtract X9, X9, 1
	075 Add X10, X10, 16
	076 Move X0, X19
	077 Move W2, W31
	078 Call 0x1C5D788
	079 Move X20, X19
	080 NotImplemented "Instruction LDRSW not yet implemented."
	081 Add X8, X8, X9
	082 Add X0, X8, 312
	083 Move X8, [X0]
	084 Move X2, [X0+8]
	085 Move X0, X19
	086 Move X1, X20
	087 NotImplemented "Instruction BLR not yet implemented."
	088 Compare X0, 0
	089 JumpIfEqual {94}
	090 Move X8, [X21]
	091 Move X9, [X0]
	092 Move X20, X0
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move X20, [X31+16]
	095 Move X19, [X31+24]
	096 Move X30, [X31+32]
	097 Move X21, [X31+40]
	098 Move X20, [X19+48]
	099 Call 0x1C17D44
	100 Compare X20, 0
	101 JumpIfEqual {108}
	102 Move X0, X20
	103 Move X20, [X31+16]
	104 Move X19, [X31+24]
	105 Move X30, [X31+32]
	106 Move X21, [X31+40]
	107 Return X0
	108 Move X8, [X19]
	109 Move X0, X19
	110 Move X20, [X31+16]
	111 Move X19, [X31+24]
	112 Move X2, [X8+536]
	113 Move X1, [X8+544]
	114 Move X30, [X31+32]
	115 Move X21, [X31+40]
	116 CallNoReturn X2

Method: System.Object Clone()

Disassembly:
	0x0333BF8C LDR X8, [X8 + 0xB30]
	0x0333BF90 LDR X8, [X8]
	0x0333BF94 STR X8, [X20 + 0x38]
	0x0333BF98 BL 0x1C16D44
	0x0333BF9C STP X20, X31, [X19 + 0x30]
	0x0333BFA0 ADRP X8, 0xDB9000
	0x0333BFA4 LDR X8, [X8 + 0xE58]
	0x0333BFA8 MOVZ W1, 0x1
	0x0333BFAC LDR X0, [X8]
	0x0333BFB0 BL 0x1C16D6C
	0x0333BFB4 CBZ X0, 0x333C090
	0x0333BFB8 LDR W8, [X0 + 0x18]
	0x0333BFBC MOV X20, X0
	0x0333BFC0 CBZ W8, 0x333C08C
	0x0333BFC4 MOVZ W8, 0x1
	0x0333BFC8 STR W8, [X20 + 0x20]
	0x0333BFCC BL 0x1C16D44
	0x0333BFD0 STR X20, [X19 + 0x40]
	0x0333BFD4 ADRP X8, 0xDED000
	0x0333BFD8 LDR X8, [X8 + 0xB08]
	0x0333BFDC MOVZ W1, 0x17
	0x0333BFE0 LDR X0, [X8]
	0x0333BFE4 BL 0x1C16D6C
	0x0333BFE8 STR X0, [X19 + 0x48]
	0x0333BFEC ADRP X21, 0xDED000
	0x0333BFF0 LDR X21, [X21 + 0x5A0]
	0x0333BFF4 MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10A2000
	005 Move W8, [X20+3366]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDEE000
	012 Move X0, [X0+968]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3366], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Call Object.MemberwiseClone, X0
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, 0xDEE000
	022 Move X8, [X8+968]
	023 Move X1, [X8]
	024 Move X8, [X0]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move [X0+208], W31
	029 Move X30, [X31+32]
	030 Return X0
	031 Call 0x1C17F20
	032 Call 0x1C181E0

Method: System.Int32 get_CurrencyDecimalDigits()

Disassembly:
	0x0333BFF8 LDR X0, [X21]
	0x0333BFFC LDR W8, [X0 + 0xE0]

ISIL:
	001 Move W0, [X0+176]
	002 Return X0

Method: System.String get_CurrencyDecimalSeparator()

Disassembly:
	0x0333C000 CBNZ W8, 0x333C00C
	0x0333C004 BL 0x1C16DFC

ISIL:
	001 Move X0, [X0+80]
	002 Return X0

Method: System.Boolean get_IsReadOnly()

Disassembly:
	0x0333C008 LDR X0, [X21]
	0x0333C00C CBZ X20, 0x333C090

ISIL:
	001 Move W0, [X0+208]
	002 Return X0

Method: System.Int32[] get_CurrencyGroupSizes()

Disassembly:
	0x0333C010 LDR X8, [X0 + 0xB8]
	0x0333C014 LDR X21, [X8]
	0x0333C018 CBZ X21, 0x333C030
	0x0333C01C LDR X8, [X20]
	0x0333C020 MOV X0, X21
	0x0333C024 LDR X1, [X8 + 0x40]
	0x0333C028 BL 0x1C16E00
	0x0333C02C CBZ X0, 0x333C094
	0x0333C030 LDR W8, [X20 + 0x18]
	0x0333C034 CBZ W8, 0x333C08C
	0x0333C038 ADRP X8, 0xFFFFFFFFFD7B0000
	0x0333C03C LDR V0, [X8 + 0x3B]
	0x0333C040 STR X21, [X20 + 0x20]
	0x0333C044 ADRP X8, 0xDB9000
	0x0333C048 MOV X1, X19
	0x0333C04C STUR V0, [X19 + 0x6C]
	0x0333C050 LDR X8, [X8 + 0x3A0]
	0x0333C054 MOV X2, X31
	0x0333C058 LDR X8, [X8]
	0x0333C05C STR X8, [X19 + 0x80]
	0x0333C060 LDR X8, [X22]
	0x0333C064 LDR X0, [X8 + 0xB8]
	0x0333C068 BL 0x1C24138
	0x0333C06C LDR X8, [X22]
	0x0333C070 LDR X8, [X8 + 0xB8]
	0x0333C074 LDR X8, [X8]
	0x0333C078 LDP X20, X19, [X31 + 0x20]
	0x0333C07C LDP X22, X21, [X31 + 0x10]
	0x0333C080 MOV X0, X8
	0x0333C084 LDR X30, [X31], #0x30

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10A1000
	005 Move W8, [X20+3367]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDB9000
	012 Move X0, [X0+3672]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3367], W8
	016 Move X0, [X19+24]
	017 Compare X0, 0
	018 JumpIfEqual {35}
	019 Move X1, X31
	020 Call Array.Clone, X0
	021 Compare X0, 0
	022 JumpIfEqual {31}
	023 Move X8, 0xDB9000
	024 Move X8, [X8+3672]
	025 Move X19, X0
	026 Move X20, [X8]
	027 Move X1, X20
	028 Call 0x1C17E00
	029 Compare X0, 0
	030 JumpIfEqual {36}
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return X0
	035 Call 0x1C17F20
	036 Move X0, X19
	037 Move X1, X20
	038 Call 0x1C181E0

Method: System.Int32[] get_NumberGroupSizes()

Disassembly:
	0x0333C088 RET
	0x0333C08C BL 0x1C16F28
	0x0333C090 BL 0x1C16F20
	0x0333C094 BL 0x1C16F44
	0x0333C098 MOV X1, X31
	0x0333C09C BL 0x1C16DEC
	0x0333C0A0 STR X30, [X31 - 0x20]!
	0x0333C0A4 STP X20, X19, [X31 + 0x10]
	0x0333C0A8 MOV X20, X1
	0x0333C0AC MOV X1, X31
	0x0333C0B0 MOV X19, X0
	0x0333C0B4 BL 0x33BDD8C
	0x0333C0B8 STR X20, [X19 + 0x28]
	0x0333C0BC CBZ X20, 0x333C0D8
	0x0333C0C0 LDR X8, [X20 + 0x58]
	0x0333C0C4 STR X8, [X19 + 0x20]
	0x0333C0C8 STR X8, [X19 + 0x30]
	0x0333C0CC LDP X20, X19, [X31 + 0x10]
	0x0333C0D0 LDR X30, [X31], #0x20
	0x0333C0D4 RET
	0x0333C0D8 BL 0x1C16F20
	0x0333C0DC STP X31, X31, [X0 + 0x20]
	0x0333C0E0 RET
	0x0333C0E4 STR X30, [X31 - 0x20]!
	0x0333C0E8 STP X20, X19, [X31 + 0x10]
	0x0333C0EC ADRP X20, 0x10A0000
	0x0333C0F0 LDRB W8, [X20 + 0xD33]
	0x0333C0F4 MOV X19, X0
	0x0333C0F8 TBNZ X8, 0x0, 0x333C11C
	0x0333C0FC ADRP X0, 0xDB9000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10A1000
	005 Move W8, [X20+3368]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDB9000
	012 Move X0, [X0+3672]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3368], W8
	016 Move X0, [X19+16]
	017 Compare X0, 0
	018 JumpIfEqual {35}
	019 Move X1, X31
	020 Call Array.Clone, X0
	021 Compare X0, 0
	022 JumpIfEqual {31}
	023 Move X8, 0xDB9000
	024 Move X8, [X8+3672]
	025 Move X19, X0
	026 Move X20, [X8]
	027 Move X1, X20
	028 Call 0x1C17E00
	029 Compare X0, 0
	030 JumpIfEqual {36}
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return X0
	035 Call 0x1C17F20
	036 Move X0, X19
	037 Move X1, X20
	038 Call 0x1C181E0

Method: System.Int32[] get_PercentGroupSizes()

Disassembly:
	0x0333C100 LDR X0, [X0 + 0xC48]
	0x0333C104 BL 0x1C16CF4
	0x0333C108 ADRP X0, 0xDEC000
	0x0333C10C LDR X0, [X0 + 0x880]
	0x0333C110 BL 0x1C16CF4
	0x0333C114 MOVZ W8, 0x1
	0x0333C118 STRB W8, [X20 + 0xD33]
	0x0333C11C LDR X8, [X19 + 0x28]
	0x0333C120 CBNZ X8, 0x333C1B8
	0x0333C124 LDR X20, [X19 + 0x20]
	0x0333C128 CBNZ X20, 0x333C180
	0x0333C12C LDR X20, [X19 + 0x40]
	0x0333C130 CBNZ X20, 0x333C17C
	0x0333C134 LDR W20, [X19 + 0x50]
	0x0333C138 CBZ W20, 0x333C170
	0x0333C13C ADRP X8, 0xDB9000
	0x0333C140 LDR X8, [X8 + 0xC48]
	0x0333C144 LDR X0, [X8]
	0x0333C148 LDR W8, [X0 + 0xE0]
	0x0333C14C CBNZ W8, 0x333C154
	0x0333C150 BL 0x1C16DFC
	0x0333C154 MOV W0, W20
	0x0333C158 BL 0x333C1C8
	0x0333C15C CBZ X0, 0x333C1C4
	0x0333C160 LDR X8, [X0 + 0xC0]
	0x0333C164 CBZ X8, 0x333C1C4
	0x0333C168 LDR X20, [X8 + 0x58]
	0x0333C16C B 0x333C17C
	0x0333C170 ADRP X8, 0xDEC000
	0x0333C174 LDR X8, [X8 + 0x880]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10A1000
	005 Move W8, [X20+3369]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDB9000
	012 Move X0, [X0+3672]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3369], W8
	016 Move X0, [X19+32]
	017 Compare X0, 0
	018 JumpIfEqual {35}
	019 Move X1, X31
	020 Call Array.Clone, X0
	021 Compare X0, 0
	022 JumpIfEqual {31}
	023 Move X8, 0xDB9000
	024 Move X8, [X8+3672]
	025 Move X19, X0
	026 Move X20, [X8]
	027 Move X1, X20
	028 Call 0x1C17E00
	029 Compare X0, 0
	030 JumpIfEqual {36}
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return X0
	035 Call 0x1C17F20
	036 Move X0, X19
	037 Move X1, X20
	038 Call 0x1C181E0

Method: System.String get_CurrencyGroupSeparator()

Disassembly:
	0x0333C178 LDR X20, [X8]
	0x0333C17C STR X20, [X19 + 0x20]

ISIL:
	001 Move X0, [X0+72]
	002 Return X0

Method: System.String get_CurrencySymbol()

Disassembly:
	0x0333C180 ADRP X8, 0xDB9000
	0x0333C184 LDR X8, [X8 + 0xC48]

ISIL:
	001 Move X0, [X0+88]
	002 Return X0

Method: System.Globalization.NumberFormatInfo get_CurrentInfo()

Disassembly:
	0x0333BE98 MOV X1, X31
	0x0333BE9C MOV X19, X0
	0x0333BEA0 LDR X20, [X8]
	0x0333BEA4 BL 0x33BDD8C
	0x0333BEA8 STR X20, [X19 + 0x58]
	0x0333BEAC ADRP X8, 0xDED000
	0x0333BEB0 LDR X8, [X8 + 0xB40]
	0x0333BEB4 ADRP X9, 0xDED000
	0x0333BEB8 ADRP X21, 0xDB8000
	0x0333BEBC MOVZ W1, 0x1
	0x0333BEC0 LDR X8, [X8]
	0x0333BEC4 LDR X9, [X9 + 0xB38]
	0x0333BEC8 STR X8, [X19 + 0x50]
	0x0333BECC LDR X8, [X9]
	0x0333BED0 ADRP X9, 0xDED000
	0x0333BED4 LDR X9, [X9 + 0xB48]
	0x0333BED8 STR X8, [X19 + 0x10]
	0x0333BEDC LDR X10, [X9]
	0x0333BEE0 ADRP X9, 0xDC1000
	0x0333BEE4 LDR X9, [X9 + 0x988]
	0x0333BEE8 LDR X8, [X9]
	0x0333BEEC STP X10, X8, [X19 + 0x18]
	0x0333BEF0 LDR X21, [X21 + 0xAC8]
	0x0333BEF4 LDR X0, [X21]
	0x0333BEF8 BL 0x1C16D6C
	0x0333BEFC CBZ X0, 0x333C090
	0x0333BF00 LDR W8, [X0 + 0x18]
	0x0333BF04 MOV X20, X0
	0x0333BF08 CBZ W8, 0x333C08C
	0x0333BF0C ADRP X8, 0xDED000
	0x0333BF10 LDR X8, [X8 + 0xB20]
	0x0333BF14 LDR X8, [X8]
	0x0333BF18 STR X8, [X20 + 0x20]
	0x0333BF1C BL 0x1C16D44
	0x0333BF20 STR X20, [X19 + 0x28]
	0x0333BF24 LDR X0, [X21]
	0x0333BF28 MOVZ W1, 0x4
	0x0333BF2C BL 0x1C16D6C
	0x0333BF30 CBZ X0, 0x333C090
	0x0333BF34 LDR W8, [X0 + 0x18]
	0x0333BF38 MOV X20, X0
	0x0333BF3C CBZ W8, 0x333C08C
	0x0333BF40 ADRP X9, 0xDED000
	0x0333BF44 LDR X9, [X9 + 0xB18]
	0x0333BF48 CMP W8, 0x1
	0x0333BF4C LDR X9, [X9]
	0x0333BF50 STR X9, [X20 + 0x20]
	0x0333BF54 B.EQ 0x333C08C
	0x0333BF58 ADRP X9, 0xDED000
	0x0333BF5C LDR X9, [X9 + 0xB10]
	0x0333BF60 CMP W8, 0x2
	0x0333BF64 LDR X9, [X9]
	0x0333BF68 STR X9, [X20 + 0x28]
	0x0333BF6C B.LS 0x333C08C
	0x0333BF70 ADRP X9, 0xDED000
	0x0333BF74 LDR X9, [X9 + 0xB28]
	0x0333BF78 CMP W8, 0x3
	0x0333BF7C LDR X9, [X9]
	0x0333BF80 STR X9, [X20 + 0x30]
	0x0333BF84 B.EQ 0x333C08C
	0x0333BF88 ADRP X8, 0xDED000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x10A2000
	005 Move W8, [X19+3370]
	006 Move TEMP, X8
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfEqual {21}
	010 Move X0, 0xDEE000
	011 Move X0, [X0+2712]
	012 Call 0x1C17CF4
	013 Move X0, 0xDEE000
	014 Move X0, [X0+968]
	015 Call 0x1C17CF4
	016 Move X0, 0xDB9000
	017 Move X0, [X0+1728]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X19+3370], W8
	021 Move X0, X31
	022 Call Thread.get_CurrentThread
	023 Compare X0, 0
	024 JumpIfEqual {71}
	025 Move X1, X31
	026 Call Thread.get_CurrentCulture, X0
	027 Compare X0, 0
	028 JumpIfEqual {71}
	029 Move W8, [X0+200]
	030 Move X19, X0
	031 Compare W8, 0
	032 JumpIfEqual {62}
	033 Move X8, 0xDB9000
	034 Move X8, [X8+1728]
	035 Move X0, [X8]
	036 Move X8, 0xDEE000
	037 Move X8, [X8+2712]
	038 Move W9, [X0+224]
	039 Move X20, [X8]
	040 Compare W9, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X20
	044 Move X1, X31
	045 Call Type.GetTypeFromHandle, X0
	046 Move X8, [X19]
	047 Move X1, X0
	048 Move X0, X19
	049 Move X9, [X8+616]
	050 Move X2, [X8+624]
	051 NotImplemented "Instruction BLR not yet implemented."
	052 Move X20, X0
	053 Compare X0, 0
	054 JumpIfEqual {66}
	055 Move X8, 0xDEE000
	056 Move X8, [X8+968]
	057 Move X1, [X8]
	058 Move X8, [X20]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X0, X20
	061 Call 0x1C181E0
	062 Move X20, [X19+48]
	063 Call 0x1C17D44
	064 Compare X20, 0
	065 JumpIfEqual {33}
	066 Move X0, X20
	067 Move X20, [X31+16]
	068 Move X19, [X31+24]
	069 Move X30, [X31+32]
	070 Return X0
	071 Call 0x1C17F20

Method: System.String get_NaNSymbol()

Disassembly:
	0x0333C188 LDR X0, [X8]
	0x0333C18C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move X0, [X0+104]
	002 Return X0

Method: System.Void set_NaNSymbol(System.String value)

Disassembly:
	0x0333C190 CBNZ W8, 0x333C198
	0x0333C194 BL 0x1C16DFC
	0x0333C198 MOV X0, X20
	0x0333C19C BL 0x333C3F8
	0x0333C1A0 CBZ X0, 0x333C1C4
	0x0333C1A4 LDR X8, [X0 + 0xC0]
	0x0333C1A8 STR X8, [X19 + 0x28]
	0x0333C1AC CBZ X8, 0x333C1C4
	0x0333C1B0 LDR X8, [X8 + 0x58]
	0x0333C1B4 STR X8, [X19 + 0x30]
	0x0333C1B8 LDP X20, X19, [X31 + 0x10]
	0x0333C1BC LDR X30, [X31], #0x20
	0x0333C1C0 RET
	0x0333C1C4 BL 0x1C16F20
	0x0333C1C8 SUB X31, X31, 0x40
	0x0333C1CC STR X30, [X31 + 0x10]
	0x0333C1D0 STP X22, X21, [X31 + 0x20]
	0x0333C1D4 STP X20, X19, [X31 + 0x30]
	0x0333C1D8 ADRP X19, 0x10A0000
	0x0333C1DC LDRB W8, [X19 + 0xD86]
	0x0333C1E0 MOV W20, W0
	0x0333C1E4 TBNZ X8, 0x0, 0x333C208
	0x0333C1E8 ADRP X0, 0xDB9000
	0x0333C1EC LDR X0, [X0 + 0xC48]
	0x0333C1F0 BL 0x1C16CF4
	0x0333C1F4 ADRP X0, 0xDEC000
	0x0333C1F8 LDR X0, [X0 + 0xB50]
	0x0333C1FC BL 0x1C16CF4
	0x0333C200 MOVZ W8, 0x1
	0x0333C204 STRB W8, [X19 + 0xD86]
	0x0333C208 CMP W20, 0x0
	0x0333C20C STR X31, [X31 + 0x18]
	0x0333C210 B.LE 0x333C320
	0x0333C214 ADRP X22, 0xDB9000
	0x0333C218 LDR X22, [X22 + 0xC48]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {14}
	006 Move X19, X1
	007 Move X20, X0
	008 Call NumberFormatInfo.VerifyWritable, X0
	009 Move [X20+104], X19
	010 Move X20, [X31+16]
	011 Move X19, [X31+24]
	012 Move X30, [X31+32]
	013 Return 
	014 Move X0, 0xDE7000
	015 Move X0, [X0+2680]
	016 Call 0x1C17D08
	017 Move X1, X31
	018 Call Environment.GetResourceString, X0
	019 Move X19, X0
	020 Move X0, 0xDBD000
	021 Move X0, [X0+1320]
	022 Call 0x1C17D08
	023 Call 0x1C17F10
	024 Move X20, X0
	025 Move X0, 0xDED000
	026 Move X0, [X0+2720]
	027 Call 0x1C17D08
	028 Move X1, X0
	029 Move X0, X20
	030 Move X2, X19
	031 Move X3, X31
	032 Call ArgumentNullException..ctor, X0, X1, X2
	033 Move X0, 0xDED000
	034 Move X0, [X0+2728]
	035 Call 0x1C17D08
	036 Move X1, X0
	037 Move X0, X20
	038 Call 0x1C17DEC

Method: System.Int32 get_CurrencyNegativePattern()

Disassembly:
	0x0333C21C LDR X0, [X22]
	0x0333C220 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move W0, [X0+184]
	002 Return X0

Method: System.Int32 get_NumberNegativePattern()

Disassembly:
	0x0333C224 CBNZ W8, 0x333C230
	0x0333C228 BL 0x1C16DFC

ISIL:
	001 Move W0, [X0+188]
	002 Return X0

Method: System.Int32 get_PercentPositivePattern()

Disassembly:
	0x0333C22C LDR X0, [X22]
	0x0333C230 LDR X8, [X0 + 0xB8]

ISIL:
	001 Move W0, [X0+192]
	002 Return X0

Method: System.Int32 get_PercentNegativePattern()

Disassembly:
	0x0333C234 LDR X19, [X8 + 0x8]
	0x0333C238 STRB W31, [X31 + 0xC]

ISIL:
	001 Move W0, [X0+196]
	002 Return X0

Method: System.String get_NegativeInfinitySymbol()

Disassembly:
	0x0333C23C ADD X1, X31, 0xC
	0x0333C240 MOV X0, X19

ISIL:
	001 Move X0, [X0+120]
	002 Return X0

Method: System.String get_NegativeSign()

Disassembly:
	0x0333C244 MOV X2, X31
	0x0333C248 BL 0x33DE64C

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Int32 get_NumberDecimalDigits()

Disassembly:
	0x0333C24C LDR X8, [X22]
	0x0333C250 LDR W9, [X8 + 0xE0]

ISIL:
	001 Move W0, [X0+172]
	002 Return X0

Method: System.String get_NumberDecimalSeparator()

Disassembly:
	0x0333C254 CBNZ W9, 0x333C264
	0x0333C258 MOV X0, X8

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.String get_NumberGroupSeparator()

Disassembly:
	0x0333C25C BL 0x1C16DFC
	0x0333C260 LDR X8, [X22]

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.Int32 get_CurrencyPositivePattern()

Disassembly:
	0x0333C264 LDR X9, [X8 + 0xB8]
	0x0333C268 LDR X0, [X9 + 0x28]

ISIL:
	001 Move W0, [X0+180]
	002 Return X0

Method: System.String get_PositiveInfinitySymbol()

Disassembly:
	0x0333C26C CBZ X0, 0x333C2B0
	0x0333C270 LDR W9, [X8 + 0xE0]

ISIL:
	001 Move X0, [X0+112]
	002 Return X0

Method: System.String get_PositiveSign()

Disassembly:
	0x0333C274 CBNZ W9, 0x333C290
	0x0333C278 MOV X0, X8

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Int32 get_PercentDecimalDigits()

Disassembly:
	0x0333C27C BL 0x1C16DFC
	0x0333C280 LDR X8, [X22]

ISIL:
	001 Move W0, [X0+200]
	002 Return X0

Method: System.String get_PercentDecimalSeparator()

Disassembly:
	0x0333C284 LDR X8, [X8 + 0xB8]
	0x0333C288 LDR X0, [X8 + 0x28]

ISIL:
	001 Move X0, [X0+128]
	002 Return X0

Method: System.String get_PercentGroupSeparator()

Disassembly:
	0x0333C28C CBZ X0, 0x333C384
	0x0333C290 ADRP X8, 0xDEC000

ISIL:
	001 Move X0, [X0+136]
	002 Return X0

Method: System.String get_PercentSymbol()

Disassembly:
	0x0333C294 LDR X8, [X8 + 0xB50]
	0x0333C298 LDR X3, [X8]

ISIL:
	001 Move X0, [X0+144]
	002 Return X0

Method: System.String get_PerMilleSymbol()

Disassembly:
	0x0333C29C ADD X2, X31, 0x18
	0x0333C2A0 MOV W1, W20

ISIL:
	001 Move X0, [X0+152]
	002 Return X0

Method: System.Object GetFormat(System.Type formatType)

Disassembly:
	0x0333C2A4 BL 0x2A150AC
	0x0333C2A8 TBNZ X0, 0x0, 0x333C2E8
	0x0333C2AC LDR X8, [X22]
	0x0333C2B0 MOV X0, X8
	0x0333C2B4 BL 0x1C16F10
	0x0333C2B8 MOV X21, X0
	0x0333C2BC MOVZ W3, 0x1
	0x0333C2C0 MOV W1, W20
	0x0333C2C4 MOV W2, W31
	0x0333C2C8 BL 0x33488C4
	0x0333C2CC LDR X0, [X22]
	0x0333C2D0 STR X21, [X31 + 0x18]
	0x0333C2D4 LDR W8, [X0 + 0xE0]
	0x0333C2D8 CBNZ W8, 0x333C2E0
	0x0333C2DC BL 0x1C16DFC
	0x0333C2E0 MOV X0, X21
	0x0333C2E4 BL 0x3348FB0
	0x0333C2E8 LDR X21, [X31 + 0x18]
	0x0333C2EC MOV X20, X31
	0x0333C2F0 LDRB W8, [X31 + 0xC]
	0x0333C2F4 CBZ W8, 0x333C304
	0x0333C2F8 MOV X0, X19
	0x0333C2FC MOV X1, X31
	0x0333C300 BL 0x33E14E4
	0x0333C304 CBNZ X20, 0x333C37C
	0x0333C308 MOV X0, X21
	0x0333C30C LDP X20, X19, [X31 + 0x30]
	0x0333C310 LDP X22, X21, [X31 + 0x20]
	0x0333C314 LDR X30, [X31 + 0x10]
	0x0333C318 ADD X31, X31, 0x40
	0x0333C31C RET
	0x0333C320 ADRP X0, 0xDBF000
	0x0333C324 LDR X0, [X0 + 0x760]
	0x0333C328 BL 0x1C16D08
	0x0333C32C BL 0x1C16F10
	0x0333C330 MOV X19, X0
	0x0333C334 ADRP X0, 0xDE5000
	0x0333C338 LDR X0, [X0 + 0xFF0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x10A1000
	008 Move X21, 0xDED000
	009 Move X22, 0xDB8000
	010 Move W8, [X23+3371]
	011 Move X21, [X21+2712]
	012 Move X22, [X22+1728]
	013 Move X20, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xDED000
	020 Move X0, [X0+2712]
	021 Call 0x1C17CF4
	022 Move X0, 0xDB8000
	023 Move X0, [X0+1728]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+3371], W8
	027 Move X0, [X22]
	028 Move X21, [X21]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X21
	034 Move X1, X31
	035 Call Type.GetTypeFromHandle, X0
	036 Move X1, X0
	037 Move X0, X20
	038 Move X2, X31
	039 Call Type.op_Equality, X0, X1
	040 And W31, W0, 1
	041 NotImplemented "Instruction CSEL not yet implemented."
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X30, [X31+48]
	047 Move X23, [X31+56]
	048 Return X0

Method: System.Globalization.NumberFormatInfo ReadOnly(System.Globalization.NumberFormatInfo nfi)

Disassembly:
	0x0333BC1C ADRP X0, 0xDED000
	0x0333BC20 LDR X0, [X0 + 0x418]
	0x0333BC24 BL 0x1C16CF4
	0x0333BC28 MOVZ W8, 0x1
	0x0333BC2C STRB W8, [X20 + 0xD31]
	0x0333BC30 LDR X0, [X21]
	0x0333BC34 MOVZ W1, 0x1
	0x0333BC38 BL 0x1C16D6C
	0x0333BC3C LDR X8, [X19]
	0x0333BC40 MOV X19, X0
	0x0333BC44 MOV X0, X8
	0x0333BC48 BL 0x1C16F10
	0x0333BC4C MOVZ W1, 0x1
	0x0333BC50 MOVZ W2, 0x778
	0x0333BC54 MOVZ W3, 0x1
	0x0333BC58 MOVZ W4, 0x1
	0x0333BC5C MOVZ W5, 0x777
	0x0333BC60 MOVZ W6, 0x1
	0x0333BC64 MOVZ W7, 0x1F98
	0x0333BC68 MOV X20, X0
	0x0333BC6C STR X31, [X31]
	0x0333BC70 BL 0x3336724
	0x0333BC74 CBZ X19, 0x333BCEC
	0x0333BC78 CBZ X20, 0x333BC90
	0x0333BC7C LDR X8, [X19]
	0x0333BC80 MOV X0, X20
	0x0333BC84 LDR X1, [X8 + 0x40]
	0x0333BC88 BL 0x1C16E00
	0x0333BC8C CBZ X0, 0x333BCF4
	0x0333BC90 LDR W8, [X19 + 0x18]
	0x0333BC94 CBZ W8, 0x333BCF0
	0x0333BC98 ADRP X21, 0xDED000
	0x0333BC9C LDR X21, [X21 + 0x418]
	0x0333BCA0 STR X20, [X19 + 0x20]
	0x0333BCA4 ADD X0, X31, 0x8
	0x0333BCA8 MOVZ W1, 0x778
	0x0333BCAC LDR X8, [X21]
	0x0333BCB0 MOVZ W2, 0x1
	0x0333BCB4 MOVZ W3, 0x1
	0x0333BCB8 MOV X4, X31
	0x0333BCBC LDR X8, [X8 + 0xB8]
	0x0333BCC0 STR X19, [X8]
	0x0333BCC4 STR X31, [X31 + 0x8]
	0x0333BCC8 BL 0x335F0C4
	0x0333BCCC LDR X8, [X21]
	0x0333BCD0 LDR X9, [X31 + 0x8]
	0x0333BCD4 LDP X20, X19, [X31 + 0x20]
	0x0333BCD8 LDP X30, X21, [X31 + 0x10]
	0x0333BCDC LDR X8, [X8 + 0xB8]
	0x0333BCE0 STR X9, [X8 + 0x10]
	0x0333BCE4 ADD X31, X31, 0x30
	0x0333BCE8 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10A2000
	005 Move W8, [X20+3372]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDEE000
	012 Move X0, [X0+968]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3372], W8
	016 Compare X19, 0
	017 JumpIfEqual {39}
	018 Move W8, [X19+208]
	019 Compare W8, 0
	020 JumpIfNotEqual {34}
	021 Move X0, X19
	022 Move X1, X31
	023 Call Object.MemberwiseClone, X0
	024 Compare X0, 0
	025 JumpIfEqual {57}
	026 Move X8, 0xDEE000
	027 Move X8, [X8+968]
	028 Move X19, X0
	029 Move X1, [X8]
	030 Move X8, [X0]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move W8, 1
	033 Move [X19+208], W8
	034 Move X0, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Return X0
	039 Move X0, 0xDBE000
	040 Move X0, [X0+1320]
	041 Call 0x1C17D08
	042 Call 0x1C17F10
	043 Move X19, X0
	044 Move X0, 0xDEE000
	045 Move X0, [X0+2696]
	046 Call 0x1C17D08
	047 Move X1, X0
	048 Move X0, X19
	049 Move X2, X31
	050 Call ArgumentNullException..ctor, X0, X1
	051 Move X0, 0xDEE000
	052 Move X0, [X0+2704]
	053 Call 0x1C17D08
	054 Move X1, X0
	055 Move X0, X19
	056 Call 0x1C17DEC
	057 Call 0x1C17F20
	058 Move X0, X19
	059 Call 0x1C181E0

Method: System.Void ValidateParseStyleInteger(System.Globalization.NumberStyles style)

Disassembly:
	0x0333C33C BL 0x1C16D08
	0x0333C340 MOV X20, X0
	0x0333C344 ADRP X0, 0xDEA000
	0x0333C348 LDR X0, [X0 + 0xD28]
	0x0333C34C BL 0x1C16D08
	0x0333C350 MOV X2, X0
	0x0333C354 MOV X0, X19
	0x0333C358 MOV X1, X20
	0x0333C35C MOV X3, X31
	0x0333C360 BL 0x3311888
	0x0333C364 ADRP X0, 0xDEC000
	0x0333C368 LDR X0, [X0 + 0xB58]
	0x0333C36C BL 0x1C16D08
	0x0333C370 MOV X1, X0
	0x0333C374 MOV X0, X19
	0x0333C378 BL 0x1C16DEC
	0x0333C37C MOV X0, X20
	0x0333C380 BL 0x1C16F18
	0x0333C384 BL 0x1C16F20
	0x0333C388 B 0x333C39C
	0x0333C38C B 0x333C39C
	0x0333C390 B 0x333C39C
	0x0333C394 B 0x333C39C
	0x0333C398 B 0x333C39C
	0x0333C39C MOV X21, X0
	0x0333C3A0 CMP W1, 0x1
	0x0333C3A4 B.NE 0x333C3C0
	0x0333C3A8 MOV X0, X21
	0x0333C3AC BL 0x3EB1AD0
	0x0333C3B0 LDR X20, [X0]
	0x0333C3B4 BL 0x3EB1AE0
	0x0333C3B8 MOV X21, X31
	0x0333C3BC B 0x333C2F0
	0x0333C3C0 MOV X20, X31
	0x0333C3C4 B 0x333C3CC
	0x0333C3C8 MOV X21, X0
	0x0333C3CC LDRB W8, [X31 + 0xC]
	0x0333C3D0 CBZ W8, 0x333C3E0
	0x0333C3D4 MOV X0, X19
	0x0333C3D8 MOV X1, X31
	0x0333C3DC BL 0x33E14E4
	0x0333C3E0 CBNZ X20, 0x333C3EC
	0x0333C3E4 MOV X0, X21
	0x0333C3E8 BL 0x1D2C690
	0x0333C3EC MOV X0, X20
	0x0333C3F0 BL 0x1C16F18
	0x0333C3F4 BL 0x1990590
	0x0333C3F8 SUB X31, X31, 0x40
	0x0333C3FC STR X30, [X31 + 0x10]
	0x0333C400 STP X22, X21, [X31 + 0x20]
	0x0333C404 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move TEMP, X0
	006 And TEMP, TEMP, 512
	007 Compare TEMP, 512
	008 JumpIfNotEqual {15}
	009 Move TEMP, 515
	010 Not TEMP
	011 Move W8, TEMP
	012 And W8, W0, W8
	013 Compare W8, 0
	014 JumpIfNotEqual {38}
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 Return 
	019 Move X0, 0xDED000
	020 Move X0, [X0+2736]
	021 Call 0x1C17D08
	022 Move X1, X31
	023 Call Environment.GetResourceString, X0
	024 Move X19, X0
	025 Move X0, 0xDC0000
	026 Move X0, [X0+1400]
	027 Call 0x1C17D08
	028 Call 0x1C17F10
	029 Move X20, X0
	030 Move X0, 0xDED000
	031 Move X0, [X0+2744]
	032 Call 0x1C17D08
	033 Move X2, X0
	034 Move X0, X20
	035 Move X1, X19
	036 Move X3, X31
	037 Call ArgumentException..ctor, X0, X1, X2
	038 Move X0, 0xDED000
	039 Move X0, [X0+2752]
	040 Call 0x1C17D08
	041 Move X1, X31
	042 Call Environment.GetResourceString, X0
	043 Move X19, X0
	044 Move X0, 0xDC0000
	045 Move X0, [X0+1400]
	046 Call 0x1C17D08
	047 Call 0x1C17F10
	048 Move X1, X19
	049 Move X2, X31
	050 Move X20, X0
	051 Call ArgumentException..ctor, X0, X1
	052 Move X0, 0xDED000
	053 Move X0, [X0+2760]
	054 Call 0x1C17D08
	055 Move X1, X0
	056 Move X0, X20
	057 Call 0x1C17DEC

Method: System.Void ValidateParseStyleFloatingPoint(System.Globalization.NumberStyles style)

Disassembly:
	0x0333C408 ADRP X19, 0x10A0000
	0x0333C40C LDRB W8, [X19 + 0xD87]
	0x0333C410 MOV X20, X0
	0x0333C414 TBNZ X8, 0x0, 0x333C438
	0x0333C418 ADRP X0, 0xDB9000
	0x0333C41C LDR X0, [X0 + 0xC48]
	0x0333C420 BL 0x1C16CF4
	0x0333C424 ADRP X0, 0xDEC000
	0x0333C428 LDR X0, [X0 + 0xB60]
	0x0333C42C BL 0x1C16CF4
	0x0333C430 MOVZ W8, 0x1
	0x0333C434 STRB W8, [X19 + 0xD87]
	0x0333C438 STR X31, [X31 + 0x18]
	0x0333C43C CBZ X20, 0x333C54C
	0x0333C440 ADRP X22, 0xDB9000
	0x0333C444 LDR X22, [X22 + 0xC48]
	0x0333C448 LDR X0, [X22]
	0x0333C44C LDR W8, [X0 + 0xE0]
	0x0333C450 CBNZ W8, 0x333C45C
	0x0333C454 BL 0x1C16DFC
	0x0333C458 LDR X0, [X22]
	0x0333C45C LDR X8, [X0 + 0xB8]
	0x0333C460 LDR X19, [X8 + 0x8]
	0x0333C464 STRB W31, [X31 + 0xC]
	0x0333C468 ADD X1, X31, 0xC
	0x0333C46C MOV X0, X19
	0x0333C470 MOV X2, X31
	0x0333C474 BL 0x33DE64C
	0x0333C478 LDR X8, [X22]
	0x0333C47C LDR W9, [X8 + 0xE0]
	0x0333C480 CBNZ W9, 0x333C490
	0x0333C484 MOV X0, X8
	0x0333C488 BL 0x1C16DFC
	0x0333C48C LDR X8, [X22]
	0x0333C490 LDR X9, [X8 + 0xB8]
	0x0333C494 LDR X0, [X9 + 0x30]
	0x0333C498 CBZ X0, 0x333C4DC
	0x0333C49C LDR W9, [X8 + 0xE0]
	0x0333C4A0 CBNZ W9, 0x333C4BC
	0x0333C4A4 MOV X0, X8
	0x0333C4A8 BL 0x1C16DFC
	0x0333C4AC LDR X8, [X22]
	0x0333C4B0 LDR X8, [X8 + 0xB8]
	0x0333C4B4 LDR X0, [X8 + 0x30]
	0x0333C4B8 CBZ X0, 0x333C59C
	0x0333C4BC ADRP X8, 0xDEC000
	0x0333C4C0 LDR X8, [X8 + 0xB60]
	0x0333C4C4 LDR X3, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move TEMP, X0
	006 And TEMP, TEMP, 512
	007 Compare TEMP, 512
	008 JumpIfEqual {32}
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 
	013 Move X0, 0xDED000
	014 Move X0, [X0+2736]
	015 Call 0x1C17D08
	016 Move X1, X31
	017 Call Environment.GetResourceString, X0
	018 Move X19, X0
	019 Move X0, 0xDC0000
	020 Move X0, [X0+1400]
	021 Call 0x1C17D08
	022 Call 0x1C17F10
	023 Move X20, X0
	024 Move X0, 0xDED000
	025 Move X0, [X0+2744]
	026 Call 0x1C17D08
	027 Move X2, X0
	028 Move X0, X20
	029 Move X1, X19
	030 Move X3, X31
	031 Call ArgumentException..ctor, X0, X1, X2
	032 Move X0, 0xDED000
	033 Move X0, [X0+2768]
	034 Call 0x1C17D08
	035 Move X1, X31
	036 Call Environment.GetResourceString, X0
	037 Move X19, X0
	038 Move X0, 0xDC0000
	039 Move X0, [X0+1400]
	040 Call 0x1C17D08
	041 Call 0x1C17F10
	042 Move X1, X19
	043 Move X2, X31
	044 Move X20, X0
	045 Call ArgumentException..ctor, X0, X1
	046 Move X0, 0xDED000
	047 Move X0, [X0+2776]
	048 Call 0x1C17D08
	049 Move X1, X0
	050 Move X0, X20
	051 Call 0x1C17DEC

