Type: System.Globalization.TextInfo

Method: System.Globalization.TextInfo get_Invariant()

Disassembly:
	0x0333CD00 CMP W9, W10
	0x0333CD04 B.CS 0x333CD34
	0x0333CD08 ADD X8, X8, X9, 0x1, LSL
	0x0333CD0C LDRH W19, [X8 + 0x20]
	0x0333CD10 MOV W0, W19
	0x0333CD14 LDP X20, X19, [X31 + 0x10]
	0x0333CD18 LDP X30, X21, [X31], #0x20
	0x0333CD1C RET
	0x0333CD20 ADD W19, W19, 0x20
	0x0333CD24 B 0x333CD10
	0x0333CD28 MOVZ W19, 0x214E
	0x0333CD2C B 0x333CD10
	0x0333CD30 BL 0x1C16F20
	0x0333CD34 BL 0x1C16F28
	0x0333CD38 CBZ X1, 0x333CD40
	0x0333CD3C B 0x333CD8C
	0x0333CD40 STP X30, X19, [X31 - 0x10]!
	0x0333CD44 ADRP X0, 0xDBC000
	0x0333CD48 LDR X0, [X0 + 0x528]
	0x0333CD4C BL 0x1C16D08
	0x0333CD50 BL 0x1C16F10
	0x0333CD54 MOV X19, X0
	0x0333CD58 ADRP X0, 0xDB9000
	0x0333CD5C LDR X0, [X0 + 0xC80]
	0x0333CD60 BL 0x1C16D08
	0x0333CD64 MOV X1, X0
	0x0333CD68 MOV X0, X19
	0x0333CD6C MOV X2, X31
	0x0333CD70 BL 0x330E100
	0x0333CD74 ADRP X0, 0xDEC000
	0x0333CD78 LDR X0, [X0 + 0xB88]
	0x0333CD7C BL 0x1C16D08
	0x0333CD80 MOV X1, X0
	0x0333CD84 MOV X0, X19
	0x0333CD88 BL 0x1C16DEC
	0x0333CD8C STR X30, [X31 - 0x40]!
	0x0333CD90 STP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x10A1000
	006 Move X21, 0xDED000
	007 Move W8, [X19+3378]
	008 Move X21, [X21+2808]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xDED000
	014 Move X0, [X0+2808]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X19+3378], W8
	018 Move X8, [X21]
	019 Move X8, [X8+184]
	020 Move X19, [X8]
	021 Call 0x1C17D44
	022 Compare X19, 0
	023 JumpIfNotEqual {36}
	024 Call CultureData.get_Invariant
	025 Move X8, [X21]
	026 Move X19, X0
	027 Move X0, X8
	028 Call 0x1C17F10
	029 Move X1, X19
	030 Move X20, X0
	031 Call TextInfo..ctor, X0, X1
	032 Call 0x1C17D44
	033 Move X8, [X21]
	034 Move X8, [X8+184]
	035 Move [X8], X20
	036 Move X8, [X21]
	037 Move X8, [X8+184]
	038 Move X19, [X8]
	039 Call 0x1C17D44
	040 Move X0, X19
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Return X0

Method: System.Void .ctor(System.Globalization.CultureData cultureData)

Disassembly:
	0x0333D0A0 MOVZ W0, 0x3A3
	0x0333D0A4 B 0x333D350
	0x0333D0A8 ADRP X20, 0xDEB000
	0x0333D0AC LDR X20, [X20 + 0xB90]
	0x0333D0B0 LDR X0, [X20]
	0x0333D0B4 LDR W8, [X0 + 0xE0]
	0x0333D0B8 CBNZ W8, 0x333D0C4
	0x0333D0BC BL 0x1C16DFC
	0x0333D0C0 LDR X0, [X20]
	0x0333D0C4 LDR X8, [X0 + 0xB8]
	0x0333D0C8 LDR X8, [X8 + 0x8]
	0x0333D0CC CBZ X8, 0x333D374
	0x0333D0D0 LDR W10, [X8 + 0x18]
	0x0333D0D4 MOVN X9, 0x1E00
	0x0333D0D8 B 0x333D33C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move X1, X31
	006 Move X19, X0
	007 Call Object..ctor, X0
	008 Move [X19+40], X20
	009 Compare X20, 0
	010 JumpIfEqual {18}
	011 Move X8, [X20+88]
	012 Move [X19+32], X8
	013 Move [X19+48], X8
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Move X30, [X31+32]
	017 Return 
	018 Call 0x1C17F20

Method: System.Void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx)

Disassembly:
	0x0333D0DC AND W8, W19, 0xFFFF
	0x0333D0E0 CMP W8, 0x1C8

ISIL:
	001 Move [X0+32], X31
	002 Move [X0+40], X31
	003 Return 

Method: System.Void OnDeserialized()

Disassembly:
	0x0333D0E4 B.HI 0x333D184
	0x0333D0E8 CMP W8, 0x1C5
	0x0333D0EC B.EQ 0x333D194
	0x0333D0F0 CMP W8, 0x1C8
	0x0333D0F4 B.EQ 0x333D194
	0x0333D0F8 B 0x333D254
	0x0333D0FC AND W8, W19, 0xFFFF
	0x0333D100 CMP W8, 0x3F5
	0x0333D104 B.HI 0x333D19C
	0x0333D108 CMP W8, 0x3F1
	0x0333D10C B.EQ 0x333D200
	0x0333D110 CMP W8, 0x3F5
	0x0333D114 B.NE 0x333D254
	0x0333D118 MOVZ W0, 0x395
	0x0333D11C B 0x333D350
	0x0333D120 ADRP X20, 0xDEB000
	0x0333D124 LDR X20, [X20 + 0xB90]
	0x0333D128 LDR X0, [X20]
	0x0333D12C LDR W8, [X0 + 0xE0]
	0x0333D130 CBNZ W8, 0x333D13C
	0x0333D134 BL 0x1C16DFC
	0x0333D138 LDR X0, [X20]
	0x0333D13C LDR X8, [X0 + 0xB8]
	0x0333D140 LDR X8, [X8 + 0x10]
	0x0333D144 CBZ X8, 0x333D374
	0x0333D148 LDR W10, [X8 + 0x18]
	0x0333D14C MOVN X9, 0x216F
	0x0333D150 B 0x333D33C
	0x0333D154 SUB W9, W8, 0x3D0
	0x0333D158 CMP W9, 0x6
	0x0333D15C B.HI 0x333D244
	0x0333D160 ADRP X8, 0xFFFFFFFFFD859000
	0x0333D164 ADD X8, X8, 0x730
	0x0333D168 ADR X10, 0x14
	0x0333D16C LDRB W11, [X8, X9, LSL]
	0x0333D170 ADD X10, X10, X11, 0x2, LSL
	0x0333D174 MOVZ W0, 0x398
	0x0333D178 BR X10
	0x0333D17C MOVZ W0, 0x392
	0x0333D180 B 0x333D350
	0x0333D184 CMP W8, 0x1CB
	0x0333D188 B.EQ 0x333D194
	0x0333D18C CMP W8, 0x1F2
	0x0333D190 B.NE 0x333D254
	0x0333D194 SUB W0, W19, 0x1
	0x0333D198 B 0x333D350
	0x0333D19C MOVZ W9, 0x1E9B
	0x0333D1A0 CMP W8, W9
	0x0333D1A4 B.EQ 0x333D208
	0x0333D1A8 MOVZ W9, 0x1FBE
	0x0333D1AC CMP W8, W9
	0x0333D1B0 B.NE 0x333D254
	0x0333D1B4 MOVZ W0, 0x399
	0x0333D1B8 B 0x333D350
	0x0333D1BC ADRP X20, 0xDEB000
	0x0333D1C0 LDR X20, [X20 + 0xB90]
	0x0333D1C4 LDR X0, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10A0000
	005 Move W8, [X20+3379]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xDB9000
	012 Move X0, [X0+3144]
	013 Call 0x1C17CF4
	014 Move X0, 0xDEC000
	015 Move X0, [X0+2176]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3379], W8
	019 Move X8, [X19+40]
	020 Compare X8, 0
	021 JumpIfNotEqual {67}
	022 Move X20, [X19+32]
	023 Compare X20, 0
	024 JumpIfNotEqual {50}
	025 Move X20, [X19+64]
	026 Compare X20, 0
	027 JumpIfNotEqual {49}
	028 Move W20, [X19+80]
	029 Compare W20, 0
	030 JumpIfEqual {46}
	031 Move X8, 0xDB9000
	032 Move X8, [X8+3144]
	033 Move X0, [X8]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move W0, W20
	039 Call CultureInfo.GetCultureInfo, X0
	040 Compare X0, 0
	041 JumpIfEqual {71}
	042 Move X8, [X0+192]
	043 Compare X8, 0
	044 JumpIfEqual {71}
	045 Move X20, [X8+88]
	046 Move X8, 0xDEC000
	047 Move X8, [X8+2176]
	048 Move X20, [X8]
	049 Move [X19+32], X20
	050 Move X8, 0xDB9000
	051 Move X8, [X8+3144]
	052 Move X0, [X8]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Call CultureInfo.GetCultureInfo, X0
	059 Compare X0, 0
	060 JumpIfEqual {71}
	061 Move X8, [X0+192]
	062 Move [X19+40], X8
	063 Compare X8, 0
	064 JumpIfEqual {71}
	065 Move X8, [X8+88]
	066 Move [X19+48], X8
	067 Move X20, [X31+16]
	068 Move X19, [X31+24]
	069 Move X30, [X31+32]
	070 Return 
	071 Call 0x1C17F20

Method: System.Void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx)

Disassembly:
	0x0333D610 LDR X0, [X0 + 0x8F0]

ISIL:
	001 Call TextInfo.OnDeserialized, X0
	002 Return 

Method: System.Void OnSerializing(System.Runtime.Serialization.StreamingContext ctx)

Disassembly:
	0x0333D614 BL 0x1C16CF4
	0x0333D618 MOVZ W8, 0x1
	0x0333D61C STRB W8, [X21 + 0xD39]
	0x0333D620 STR W31, [X31 + 0xC]
	0x0333D624 CBZ X19, 0x333D8B8
	0x0333D628 LDR W8, [X19 + 0x10]
	0x0333D62C CBZ W8, 0x333D890
	0x0333D630 ADRP X8, 0xDB6000
	0x0333D634 LDR X8, [X8 + 0x8F0]
	0x0333D638 LDR X0, [X8]
	0x0333D63C BL 0x1C16F10
	0x0333D640 MOV X1, X31
	0x0333D644 MOV X21, X0
	0x0333D648 BL 0x3231AC4
	0x0333D64C STR X21, [X31 + 0x10]
	0x0333D650 LDR W8, [X19 + 0x10]
	0x0333D654 CMP W8, 0x1
	0x0333D658 B.LT 0x333D878
	0x0333D65C ADRP X26, 0xDB8000
	0x0333D660 LDR X26, [X26 + 0x170]
	0x0333D664 MOVZ W28, 0xF800
	0x0333D668 MOV X22, X31
	0x0333D66C MOV W23, W31
	0x0333D670 MOVZ W27, 0x1
	0x0333D674 MOVK W28, 0x1FFC0000
	0x0333D678 ADD X2, X31, 0xC
	0x0333D67C MOV X0, X19
	0x0333D680 MOV W1, W23
	0x0333D684 MOV X3, X31
	0x0333D688 BL 0x3303604
	0x0333D68C LDR X8, [X26]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x10A0000
	006 Move X21, 0xDB9000
	007 Move W8, [X20+3380]
	008 Move X21, [X21+3144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xDB9000
	015 Move X0, [X0+3144]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3380], W8
	019 Move X20, [X19+32]
	020 Move [X19+76], W31
	021 Move [X19+64], X20
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Call CultureInfo.GetCultureInfo, X0
	029 Compare X0, 0
	030 JumpIfEqual {41}
	031 Move X8, [X0]
	032 Move X9, [X8+408]
	033 Move X1, [X8+416]
	034 NotImplemented "Instruction BLR not yet implemented."
	035 Move [X19+80], W0
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Return 
	041 Call 0x1C17F20

Method: System.String get_CultureName()

Disassembly:
	0x0333D690 MOV W25, W0
	0x0333D694 LDR W9, [X8 + 0xE0]

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Object Clone()

Disassembly:
	0x0333D698 CBNZ W9, 0x333D6A4
	0x0333D69C MOV X0, X8
	0x0333D6A0 BL 0x1C16DFC
	0x0333D6A4 MOV W0, W25
	0x0333D6A8 MOV X1, X31
	0x0333D6AC BL 0x331A87C
	0x0333D6B0 LDR W4, [X31 + 0xC]
	0x0333D6B4 TBZ X0, 0x0, 0x333D7D8
	0x0333D6B8 ADD X1, X31, 0x10
	0x0333D6BC ADD X2, X31, 0x18
	0x0333D6C0 MOV X0, X20
	0x0333D6C4 MOV W3, W23
	0x0333D6C8 BL 0x333D900
	0x0333D6CC LDR W8, [X19 + 0x10]
	0x0333D6D0 ADD W24, W0, 0x1
	0x0333D6D4 CMP W25, 0x1
	0x0333D6D8 CSET W29, EQ
	0x0333D6DC MOV W23, W24
	0x0333D6E0 CMP W24, W8
	0x0333D6E4 B.GE 0x333D7EC
	0x0333D6E8 ADD X2, X31, 0xC
	0x0333D6EC MOV X0, X19
	0x0333D6F0 MOV W1, W23
	0x0333D6F4 MOV X3, X31
	0x0333D6F8 BL 0x3303604
	0x0333D6FC MOV W25, W0
	0x0333D700 CMP W0, 0x4
	0x0333D704 B.LS 0x333D748
	0x0333D708 MOV X0, X19
	0x0333D70C MOV W1, W23
	0x0333D710 MOV X2, X31
	0x0333D714 BL 0x3222A1C
	0x0333D718 AND W8, W0, 0xFFFF
	0x0333D71C CMP W8, 0x27

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10A0000
	005 Move W8, [X20+3381]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDEC000
	012 Move X0, [X0+2808]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3381], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Call Object.MemberwiseClone, X0
	019 Compare X0, 0
	020 JumpIfEqual {38}
	021 Move X9, 0xDEC000
	022 Move X9, [X9+2808]
	023 Move X8, [X0]
	024 Move X1, [X9]
	025 Move W10, [X8+304]
	026 Move W9, [X1+304]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X8, [X8+200]
	029 Add X8, X8, X9
	030 NotImplemented "Instruction LDUR not yet implemented."
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move [X0+24], W31
	035 Move X30, [X31+32]
	036 Return X0
	037 Call 0x1C181E0
	038 Call 0x1C17F20

Method: System.Void SetReadOnlyState(System.Boolean readOnly)

Disassembly:
	0x0333D720 B.EQ 0x333D76C
	0x0333D724 LSLV W8, W27, W25
	0x0333D728 ANDS W31, W8, W28, 0x0

ISIL:
	001 And W8, W1, 1
	002 Move [X0+24], W8
	003 Return 

Method: System.Char ToLower(System.Char c)

Disassembly:
	0x0333D72C B.NE 0x333D7EC
	0x0333D730 LDR W8, [X31 + 0xC]
	0x0333D734 LDR W9, [X19 + 0x10]
	0x0333D738 ADD W23, W8, W23
	0x0333D73C CMP W23, W9
	0x0333D740 B.LT 0x333D6E8
	0x0333D744 B 0x333D7EC
	0x0333D748 LDR W8, [X31 + 0xC]
	0x0333D74C LDR W9, [X19 + 0x10]
	0x0333D750 CMP W25, 0x1
	0x0333D754 CSET W10, EQ
	0x0333D758 ADD W23, W8, W23
	0x0333D75C CMP W23, W9
	0x0333D760 ORR W29, W29, W10, 0x0
	0x0333D764 B.LT 0x333D6E8
	0x0333D768 B 0x333D7EC
	0x0333D76C ADD W23, W23, 0x1
	0x0333D770 TBZ X29, 0x0, 0x333D7A4
	0x0333D774 CBNZ X22, 0x333D790
	0x0333D778 LDR X8, [X20]
	0x0333D77C MOV X0, X20
	0x0333D780 MOV X1, X19
	0x0333D784 LDP X9, X2, [X8 + 0x1B8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 And W8, W1, 0xFFFF
	005 Move W19, W1
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X20, X0
	008 Move X0, X20
	009 Call TextInfo.get_IsAsciiCasingSameAsInvariant, X0
	010 Move TEMP, X0
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfNotEqual {23}
	014 Subtract W8, W19, 65
	015 And W8, W8, 0xFFFF
	016 Or W9, W19, 32
	017 NotImplemented "Instruction CMP not yet implemented."
	018 NotImplemented "Instruction CSEL not yet implemented."
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Return X0
	023 Move X0, X20
	024 Move W1, W19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Call TextInfo.ToLowerInternal, X0, X1
	029 Return X0

Method: System.String ToLower(System.String str)

Disassembly:
	0x0333DD38 BL 0x1C16CF4
	0x0333DD3C MOVZ W8, 0x1
	0x0333DD40 STRB W8, [X20 + 0xD41]
	0x0333DD44 LDR X0, [X19]
	0x0333DD48 LDR W8, [X0 + 0xE0]
	0x0333DD4C CBNZ W8, 0x333DD58
	0x0333DD50 BL 0x1C16DFC
	0x0333DD54 LDR X0, [X19]
	0x0333DD58 LDR X8, [X0 + 0xB8]
	0x0333DD5C LDP X20, X19, [X31 + 0x10]
	0x0333DD60 LDR X0, [X8 + 0x10]
	0x0333DD64 LDR X30, [X31], #0x20
	0x0333DD68 RET
	0x0333DD6C STR X30, [X31 - 0x20]!
	0x0333DD70 STP X20, X19, [X31 + 0x10]
	0x0333DD74 ADRP X20, 0x109F000
	0x0333DD78 ADRP X19, 0xDB7000
	0x0333DD7C LDRB W8, [X20 + 0xD42]
	0x0333DD80 LDR X19, [X19 + 0x9F0]
	0x0333DD84 TBNZ X8, 0x0, 0x333DD9C
	0x0333DD88 ADRP X0, 0xDB7000

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {3}
	003 Move [X31-16], X30
	004 Move [X31-8], X19
	005 Move X0, 0xDBC000
	006 Move X0, [X0+1320]
	007 Call 0x1C17D08
	008 Call 0x1C17F10
	009 Move X19, X0
	010 Move X0, 0xDB9000
	011 Move X0, [X0+3200]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Move X2, X31
	016 Call ArgumentNullException..ctor, X0, X1
	017 Move X0, 0xDEC000
	018 Move X0, [X0+2952]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Call 0x1C17DEC

Method: System.Char ToLowerAsciiInvariant(System.Char c)

Disassembly:
	0x0333D89C LDP X24, X23, [X31 + 0x50]
	0x0333D8A0 LDP X26, X25, [X31 + 0x40]
	0x0333D8A4 LDP X28, X27, [X31 + 0x30]
	0x0333D8A8 LDP X29, X30, [X31 + 0x20]
	0x0333D8AC ADD X31, X31, 0x80
	0x0333D8B0 RET

ISIL:
	001 Subtract W8, W0, 65
	002 And W8, W8, 0xFFFF
	003 Or W9, W0, 32
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CSEL not yet implemented."
	006 Return X0

Method: System.Char ToUpper(System.Char c)

Disassembly:
	0x0333DE70 CBZ X0, 0x333DE80
	0x0333DE74 MOV X4, X31
	0x0333DE78 LDR X30, [X31], #0x10
	0x0333DE7C B 0x33375FC
	0x0333DE80 BL 0x1C16F20
	0x0333DE84 STR X30, [X31 - 0x10]!
	0x0333DE88 LDR X0, [X0 + 0x20]
	0x0333DE8C CBZ X0, 0x333DE9C
	0x0333DE90 MOV X3, X31
	0x0333DE94 LDR X30, [X31], #0x10
	0x0333DE98 B 0x3337798
	0x0333DE9C BL 0x1C16F20
	0x0333DEA0 STR X30, [X31 - 0x10]!
	0x0333DEA4 LDR X0, [X0 + 0x20]
	0x0333DEA8 CBZ X0, 0x333DEB8
	0x0333DEAC MOV X2, X31
	0x0333DEB0 LDR X30, [X31], #0x10
	0x0333DEB4 B 0x33374B0
	0x0333DEB8 BL 0x1C16F20
	0x0333DEBC STR X30, [X31 - 0x10]!
	0x0333DEC0 LDR X0, [X0 + 0x20]
	0x0333DEC4 CBZ X0, 0x333DED4
	0x0333DEC8 MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 And W8, W1, 0xFFFF
	005 Move W19, W1
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X20, X0
	008 Move X0, X20
	009 Call TextInfo.get_IsAsciiCasingSameAsInvariant, X0
	010 Move TEMP, X0
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfNotEqual {23}
	014 Subtract W8, W19, 97
	015 And W8, W8, 0xFFFF
	016 And W9, W19, 0xFFFFFFDF
	017 NotImplemented "Instruction CMP not yet implemented."
	018 NotImplemented "Instruction CSEL not yet implemented."
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Return X0
	023 Move X0, X20
	024 Move W1, W19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Call TextInfo.ToUpperInternal, X0, X1
	029 Return X0

Method: System.String ToUpper(System.String str)

Disassembly:
	0x0333E37C SUB W8, W23, 0x3
	0x0333E380 CMP W8, W11
	0x0333E384 B.CS 0x333E418
	0x0333E388 SUB W9, W23, 0x2
	0x0333E38C CMP W9, W11
	0x0333E390 B.CS 0x333E418
	0x0333E394 SUB W10, W23, 0x1
	0x0333E398 CMP W10, W11
	0x0333E39C B.CS 0x333E418
	0x0333E3A0 CMP W23, W11
	0x0333E3A4 B.CS 0x333E418
	0x0333E3A8 ADD X9, X19, W9, 0x1, SXTW
	0x0333E3AC ADD X11, X19, 0x20
	0x0333E3B0 ADD X8, X19, W8, 0x1, SXTW
	0x0333E3B4 LDRSH W1, [X9 + 0x20]
	0x0333E3B8 LDRSH W2, [X11, W10, SXTW]
	0x0333E3BC LDRSH W3, [X11, W23, SXTW]
	0x0333E3C0 LDRSH X24, [X8 + 0x20]
	0x0333E3C4 ADD X0, X31, 0x8
	0x0333E3C8 MOV X4, X31
	0x0333E3CC STR X31, [X31 + 0x8]

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {3}
	003 Move [X31-16], X30
	004 Move [X31-8], X19
	005 Move X0, 0xDBB000
	006 Move X0, [X0+1320]
	007 Call 0x1C17D08
	008 Call 0x1C17F10
	009 Move X19, X0
	010 Move X0, 0xDB8000
	011 Move X0, [X0+3200]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Move X2, X31
	016 Call ArgumentNullException..ctor, X0, X1
	017 Move X0, 0xDEB000
	018 Move X0, [X0+2968]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Call 0x1C17DEC

Method: System.Char ToUpperAsciiInvariant(System.Char c)

Disassembly:
	0x0333DECC LDR X30, [X31], #0x10
	0x0333DED0 B 0x3337530
	0x0333DED4 BL 0x1C16F20
	0x0333DED8 STR X30, [X31 - 0x10]!
	0x0333DEDC LDR X0, [X0 + 0x20]
	0x0333DEE0 CBZ X0, 0x333DEF0

ISIL:
	001 Subtract W8, W0, 97
	002 And W8, W8, 0xFFFF
	003 And W9, W0, 0xFFFFFFDF
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CSEL not yet implemented."
	006 Return X0

Method: System.Boolean IsAscii(System.Char c)

Disassembly:
	0x0333D788 BLR X9
	0x0333D78C MOV X22, X0
	0x0333D790 CBZ X21, 0x333D8B4
	0x0333D794 SUB W3, W23, W24

ISIL:
	001 And W8, W0, 0xFFFF
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Boolean get_IsAsciiCasingSameAsInvariant()

Disassembly:
	0x0333D798 MOV X0, X21
	0x0333D79C MOV X1, X22
	0x0333D7A0 B 0x333D7B4
	0x0333D7A4 CBZ X21, 0x333D8B4
	0x0333D7A8 SUB W3, W23, W24
	0x0333D7AC MOV X0, X21
	0x0333D7B0 MOV X1, X19
	0x0333D7B4 MOV W2, W24
	0x0333D7B8 MOV X4, X31
	0x0333D7BC BL 0x323351C
	0x0333D7C0 LDR W8, [X19 + 0x10]
	0x0333D7C4 MOVZ W29, 0x1
	0x0333D7C8 MOV W24, W23
	0x0333D7CC CMP W23, W8
	0x0333D7D0 B.LT 0x333D6E8
	0x0333D7D4 B 0x333D844
	0x0333D7D8 ADD X0, X31, 0x10
	0x0333D7DC ADD X1, X31, 0x18
	0x0333D7E0 MOV W2, W23
	0x0333D7E4 MOV W3, W4
	0x0333D7E8 B 0x333D860
	0x0333D7EC SUB W25, W23, W24
	0x0333D7F0 CMP W25, 0x1
	0x0333D7F4 B.LT 0x333D844
	0x0333D7F8 TBZ X29, 0x0, 0x333D828
	0x0333D7FC CBNZ X22, 0x333D818
	0x0333D800 LDR X8, [X20]
	0x0333D804 MOV X0, X20
	0x0333D808 MOV X1, X19
	0x0333D80C LDP X9, X2, [X8 + 0x1B8]
	0x0333D810 BLR X9
	0x0333D814 MOV X22, X0
	0x0333D818 CBZ X21, 0x333D8B4
	0x0333D81C MOV X0, X21
	0x0333D820 MOV X1, X22
	0x0333D824 B 0x333D834
	0x0333D828 CBZ X21, 0x333D8B4
	0x0333D82C MOV X0, X21
	0x0333D830 MOV X1, X19
	0x0333D834 MOV W2, W24
	0x0333D838 MOV W3, W25
	0x0333D83C MOV X4, X31
	0x0333D840 BL 0x323351C
	0x0333D844 LDR W8, [X19 + 0x10]
	0x0333D848 CMP W23, W8
	0x0333D84C B.GE 0x333D868
	0x0333D850 LDR W3, [X31 + 0xC]
	0x0333D854 ADD X0, X31, 0x10
	0x0333D858 ADD X1, X31, 0x18
	0x0333D85C MOV W2, W23
	0x0333D860 BL 0x333DA74
	0x0333D864 MOV W23, W0
	0x0333D868 LDR W8, [X19 + 0x10]
	0x0333D86C ADD W23, W23, 0x1
	0x0333D870 CMP W23, W8
	0x0333D874 B.LT 0x333D678
	0x0333D878 CBZ X21, 0x333D8B4
	0x0333D87C LDR X8, [X21]
	0x0333D880 MOV X0, X21
	0x0333D884 LDP X9, X1, [X8 + 0x168]
	0x0333D888 BLR X9
	0x0333D88C MOV X19, X0
	0x0333D890 MOV X0, X19
	0x0333D894 LDP X20, X19, [X31 + 0x70]
	0x0333D898 LDP X22, X21, [X31 + 0x60]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10A0000
	005 Move W8, [X20+3382]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {28}
	011 Move X0, 0xDBB000
	012 Move X0, [X0+4056]
	013 Call 0x1C17CF4
	014 Move X0, 0xDBB000
	015 Move X0, [X0+3056]
	016 Call 0x1C17CF4
	017 Move X0, 0xDBB000
	018 Move X0, [X0+3064]
	019 Call 0x1C17CF4
	020 Move X0, 0xDEC000
	021 Move X0, [X0+2928]
	022 Call 0x1C17CF4
	023 Move X0, 0xDEC000
	024 Move X0, [X0+2936]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+3382], W8
	028 Move X20, X19
	029 Add X20, X20, 56
	030 Move W8, [X20]
	031 Compare W8, 0
	032 JumpIfNotEqual {66}
	033 Move X8, [X19+40]
	034 Compare X8, 0
	035 JumpIfEqual {76}
	036 Move X0, [X8+80]
	037 Move X8, 0xDEC000
	038 Move X8, [X8+2936]
	039 Move X2, X31
	040 Move X1, [X8]
	041 Call String.op_Equality, X0, X1
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {47}
	046 Move W8, W31
	047 Move X8, [X19+40]
	048 Compare X8, 0
	049 JumpIfEqual {76}
	050 Move X0, [X8+80]
	051 Move X8, 0xDEC000
	052 Move X8, [X8+2928]
	053 Move X2, X31
	054 Move X1, [X8]
	055 Call String.op_Equality, X0, X1
	056 Xor W8, W0, 1
	057 Move X9, 0xDBB000
	058 Move X9, [X9+4056]
	059 And W1, W8, 1
	060 Add X0, X31, 12
	061 NotImplemented "Instruction STRH not yet implemented."
	062 Move X2, [X9]
	063 Call Nullable`1<Boolean>..ctor, X0, X1
	064 NotImplemented "Instruction LDRH not yet implemented."
	065 NotImplemented "Instruction STRH not yet implemented."
	066 Move X8, 0xDBB000
	067 Move X8, [X8+3064]
	068 Move X0, X20
	069 Move X1, [X8]
	070 Call Nullable`1<Boolean>.get_Value, X0
	071 Move X20, [X31+16]
	072 Move X19, [X31+24]
	073 And W0, W0, 1
	074 Move X30, [X31+32]
	075 Return X0
	076 Call 0x1C17F20

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x0333E4B4 RET
	0x0333E4B8 STR X30, [X31 - 0x20]!
	0x0333E4BC STP X20, X19, [X31 + 0x10]
	0x0333E4C0 ADRP X20, 0x109E000
	0x0333E4C4 ADRP X19, 0xDEA000
	0x0333E4C8 LDRB W8, [X20 + 0xD47]
	0x0333E4CC LDR X19, [X19 + 0xBE0]
	0x0333E4D0 TBNZ X8, 0x0, 0x333E4E8
	0x0333E4D4 ADRP X0, 0xDEA000
	0x0333E4D8 LDR X0, [X0 + 0xBE0]
	0x0333E4DC BL 0x1C16CF4
	0x0333E4E0 MOVZ W8, 0x1
	0x0333E4E4 STRB W8, [X20 + 0xD47]
	0x0333E4E8 LDR X0, [X19]
	0x0333E4EC LDR W8, [X0 + 0xE0]
	0x0333E4F0 CBNZ W8, 0x333E4FC
	0x0333E4F4 BL 0x1C16DFC
	0x0333E4F8 LDR X0, [X19]
	0x0333E4FC LDR X8, [X0 + 0xB8]
	0x0333E500 LDP X20, X19, [X31 + 0x10]
	0x0333E504 LDR X0, [X8 + 0x10]
	0x0333E508 LDR X30, [X31], #0x20
	0x0333E50C RET
	0x0333E510 MOV X1, X31
	0x0333E514 B 0x3332DC0
	0x0333E518 MOVZ W0, 0x6
	0x0333E51C RET
	0x0333E520 MOVZ W0, 0x17
	0x0333E524 RET
	0x0333E528 STR X30, [X31 - 0x50]!
	0x0333E52C STP X26, X25, [X31 + 0x10]
	0x0333E530 STP X24, X23, [X31 + 0x20]
	0x0333E534 STP X22, X21, [X31 + 0x30]
	0x0333E538 STP X20, X19, [X31 + 0x40]
	0x0333E53C ADRP X26, 0x109E000
	0x0333E540 ADRP X25, 0xDEA000
	0x0333E544 LDRB W8, [X26 + 0xD48]
	0x0333E548 LDR X25, [X25 + 0xBE0]
	0x0333E54C MOV X19, X5
	0x0333E550 MOV X20, X4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x109F000
	006 Move W8, [X21+3383]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xDEB000
	014 Move X0, [X0+2808]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3383], W8
	018 Compare X20, 0
	019 JumpIfEqual {32}
	020 Move X8, 0xDEB000
	021 Move X8, [X8+2808]
	022 Move X9, [X20]
	023 Move X8, [X8]
	024 Move W11, [X9+304]
	025 Move W10, [X8+304]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X9, [X9+200]
	028 Add X9, X9, X10
	029 NotImplemented "Instruction LDUR not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSEL not yet implemented."
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move W0, W31
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return X0
	038 Compare X8, 0
	039 JumpIfEqual {51}
	040 Move X0, [X19+48]
	041 Compare X0, 0
	042 JumpIfEqual {51}
	043 Move X1, [X8+48]
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X2, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call String.Equals, X0, X1
	050 Return X0
	051 Call 0x1C17F20

Method: System.Int32 GetHashCode()

Disassembly:
	0x0333E554 MOV X21, X3
	0x0333E558 MOV W23, W2
	0x0333E55C MOV W22, W1
	0x0333E560 MOV W24, W0
	0x0333E564 TBNZ X8, 0x0, 0x333E588
	0x0333E568 ADRP X0, 0xDB6000
	0x0333E56C LDR X0, [X0 + 0x9F0]
	0x0333E570 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+344]
	007 Move X1, [X8+352]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.String ToString()

Disassembly:
	0x0333E574 ADRP X0, 0xDEA000
	0x0333E578 LDR X0, [X0 + 0xBE0]
	0x0333E57C BL 0x1C16CF4
	0x0333E580 MOVZ W8, 0x1
	0x0333E584 STRB W8, [X26 + 0xD48]
	0x0333E588 LDR X0, [X25]
	0x0333E58C STR X31, [X31 + 0x8]
	0x0333E590 LDR W8, [X0 + 0xE0]
	0x0333E594 CBNZ W8, 0x333E5A0
	0x0333E598 BL 0x1C16DFC
	0x0333E59C LDR X0, [X25]
	0x0333E5A0 LDR X8, [X0 + 0xB8]
	0x0333E5A4 LDR X11, [X8]
	0x0333E5A8 CBZ X11, 0x333E684
	0x0333E5AC LDR W9, [X11 + 0x18]
	0x0333E5B0 SUB W10, W24, 0x526
	0x0333E5B4 CMP W10, W9
	0x0333E5B8 B.CS 0x333E688
	0x0333E5BC SXTW X9, W10
	0x0333E5C0 ADD X11, X11, X9, 0x4, LSL
	0x0333E5C4 LDR X11, [X11 + 0x28]
	0x0333E5C8 STR X11, [X31 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x109F000
	005 Move W8, [X20+3384]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xDEB000
	012 Move X0, [X0+2976]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3384], W8
	016 Move X8, [X19+40]
	017 Compare X8, 0
	018 JumpIfEqual {29}
	019 Move X9, 0xDEB000
	020 Move X9, [X9+2976]
	021 Move X1, [X8+88]
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X2, X31
	025 Move X0, [X9]
	026 Move X30, [X31+32]
	027 Call String.Concat, X0, X1
	028 Return X0
	029 Call 0x1C17F20

Method: System.String ToTitleCase(System.String str)

Disassembly:
	0x0333E5CC LDR X11, [X8]
	0x0333E5D0 CBZ X11, 0x333E684
	0x0333E5D4 LDR W8, [X11 + 0x18]
	0x0333E5D8 CMP W10, W8
	0x0333E5DC B.CS 0x333E688
	0x0333E5E0 ADRP X8, 0xDB6000
	0x0333E5E4 LDR X8, [X8 + 0x9F0]
	0x0333E5E8 SUB W23, W23, 0x1
	0x0333E5EC CMP W22, 0x2
	0x0333E5F0 B.LT 0x333E618
	0x0333E5F4 ADD X9, X11, X9, 0x4, LSL
	0x0333E5F8 LDR W9, [X9 + 0x20]
	0x0333E5FC SUB W10, W22, 0x1
	0x0333E600 AND W11, W9, 0x1
	0x0333E604 ADD W11, W23, W11
	0x0333E608 SUBS W10, W10, 0x1
	0x0333E60C ADD W23, W11, 0x1D
	0x0333E610 SBFM W9, W9, 0x1, 0x1F
	0x0333E614 B.NE 0x333E600
	0x0333E618 LDR X0, [X8]
	0x0333E61C LDR W8, [X0 + 0xE0]
	0x0333E620 CBNZ W8, 0x333E628
	0x0333E624 BL 0x1C16DFC
	0x0333E628 SCVTF D0, W23
	0x0333E62C ADD X0, X31, 0x8
	0x0333E630 MOV X1, X31
	0x0333E634 BL 0x335FEFC
	0x0333E638 STR X0, [X31 + 0x8]
	0x0333E63C ADD X0, X31, 0x8
	0x0333E640 MOV X1, X31
	0x0333E644 BL 0x3361868
	0x0333E648 STR W0, [X21]
	0x0333E64C ADD X0, X31, 0x8
	0x0333E650 MOV X1, X31
	0x0333E654 BL 0x336152C
	0x0333E658 STR W0, [X20]
	0x0333E65C ADD X0, X31, 0x8
	0x0333E660 MOV X1, X31
	0x0333E664 BL 0x3361168
	0x0333E668 STR W0, [X19]
	0x0333E66C LDP X20, X19, [X31 + 0x40]
	0x0333E670 LDP X22, X21, [X31 + 0x30]
	0x0333E674 LDP X24, X23, [X31 + 0x20]
	0x0333E678 LDP X26, X25, [X31 + 0x10]
	0x0333E67C LDR X30, [X31], #0x50
	0x0333E680 RET
	0x0333E684 BL 0x1C16F20
	0x0333E688 BL 0x1C16F28
	0x0333E68C SUB X31, X31, 0x40
	0x0333E690 STP X30, X23, [X31 + 0x10]
	0x0333E694 STP X22, X21, [X31 + 0x20]
	0x0333E698 STP X20, X19, [X31 + 0x30]
	0x0333E69C ADRP X23, 0x109E000
	0x0333E6A0 ADRP X22, 0xDEA000
	0x0333E6A4 LDRB W8, [X23 + 0xD49]
	0x0333E6A8 LDR X22, [X22 + 0xBE0]
	0x0333E6AC MOV W19, W2
	0x0333E6B0 MOV W20, W1
	0x0333E6B4 MOV W21, W0
	0x0333E6B8 TBNZ X8, 0x0, 0x333E6DC
	0x0333E6BC ADRP X0, 0xDEA000
	0x0333E6C0 LDR X0, [X0 + 0x310]
	0x0333E6C4 BL 0x1C16CF4
	0x0333E6C8 ADRP X0, 0xDEA000
	0x0333E6CC LDR X0, [X0 + 0xBE0]
	0x0333E6D0 BL 0x1C16CF4
	0x0333E6D4 MOVZ W8, 0x1
	0x0333E6D8 STRB W8, [X23 + 0xD49]
	0x0333E6DC LDR X0, [X22]
	0x0333E6E0 STR X31, [X31 + 0x8]
	0x0333E6E4 STR W31, [X31 + 0x4]
	0x0333E6E8 ADRP X22, 0xDEA000
	0x0333E6EC LDR W8, [X0 + 0xE0]
	0x0333E6F0 LDR X22, [X22 + 0x310]
	0x0333E6F4 CBNZ W8, 0x333E6FC
	0x0333E6F8 BL 0x1C16DFC
	0x0333E6FC ADD X3, X31, 0xC
	0x0333E700 ADD X4, X31, 0x8
	0x0333E704 ADD X5, X31, 0x4
	0x0333E708 MOV W0, W21
	0x0333E70C MOV W1, W20
	0x0333E710 MOV W2, W19
	0x0333E714 BL 0x333E528
	0x0333E718 LDR X0, [X22]
	0x0333E71C LDP W19, W21, [X31 + 0x8]
	0x0333E720 LDR W20, [X31 + 0x4]
	0x0333E724 LDR W8, [X0 + 0xE0]
	0x0333E728 CBNZ W8, 0x333E730
	0x0333E72C BL 0x1C16DFC
	0x0333E730 MOV W0, W21
	0x0333E734 MOV W1, W19
	0x0333E738 MOV W2, W20
	0x0333E73C LDP X20, X19, [X31 + 0x30]
	0x0333E740 LDP X22, X21, [X31 + 0x20]
	0x0333E744 LDP X30, X23, [X31 + 0x10]
	0x0333E748 MOV X3, X31
	0x0333E74C ADD X31, X31, 0x40
	0x0333E750 B 0x33356BC
	0x0333E754 SUB X31, X31, 0x40
	0x0333E758 STP X30, X23, [X31 + 0x10]
	0x0333E75C STP X22, X21, [X31 + 0x20]
	0x0333E760 STP X20, X19, [X31 + 0x30]
	0x0333E764 ADRP X21, 0x109E000
	0x0333E768 ADRP X20, 0xDEA000
	0x0333E76C LDRB W8, [X21 + 0xD4A]
	0x0333E770 LDR X20, [X20 + 0xBE0]
	0x0333E774 MOV X19, X0
	0x0333E778 TBNZ X8, 0x0, 0x333E79C
	0x0333E77C ADRP X0, 0xDB6000
	0x0333E780 LDR X0, [X0 + 0x9F0]
	0x0333E784 BL 0x1C16CF4
	0x0333E788 ADRP X0, 0xDEA000
	0x0333E78C LDR X0, [X0 + 0xBE0]
	0x0333E790 BL 0x1C16CF4
	0x0333E794 MOVZ W8, 0x1
	0x0333E798 STRB W8, [X21 + 0xD4A]
	0x0333E79C LDR X0, [X20]
	0x0333E7A0 ADRP X21, 0xDB6000
	0x0333E7A4 LDR W8, [X0 + 0xE0]
	0x0333E7A8 LDR X21, [X21 + 0x9F0]
	0x0333E7AC CBNZ W8, 0x333E7B4
	0x0333E7B0 BL 0x1C16DFC
	0x0333E7B4 LDR X0, [X21]
	0x0333E7B8 LDR W8, [X0 + 0xE0]
	0x0333E7BC CBNZ W8, 0x333E7C4
	0x0333E7C0 BL 0x1C16DFC
	0x0333E7C4 LDR X8, [X20]
	0x0333E7C8 MOV X1, X31
	0x0333E7CC LDR X8, [X8 + 0xB8]
	0x0333E7D0 ADD X0, X8, 0x8
	0x0333E7D4 BL 0x3361708
	0x0333E7D8 CMP X0, X19
	0x0333E7DC B.GT 0x333E830
	0x0333E7E0 LDR X0, [X20]
	0x0333E7E4 LDR W8, [X0 + 0xE0]
	0x0333E7E8 CBNZ W8, 0x333E7F0
	0x0333E7EC BL 0x1C16DFC
	0x0333E7F0 LDR X0, [X21]
	0x0333E7F4 LDR W8, [X0 + 0xE0]
	0x0333E7F8 CBNZ W8, 0x333E800
	0x0333E7FC BL 0x1C16DFC
	0x0333E800 LDR X8, [X20]
	0x0333E804 MOV X1, X31
	0x0333E808 LDR X8, [X8 + 0xB8]
	0x0333E80C ADD X0, X8, 0x10
	0x0333E810 BL 0x3361708
	0x0333E814 CMP X0, X19
	0x0333E818 B.LT 0x333E830
	0x0333E81C LDP X20, X19, [X31 + 0x30]
	0x0333E820 LDP X22, X21, [X31 + 0x20]
	0x0333E824 LDP X30, X23, [X31 + 0x10]
	0x0333E828 ADD X31, X31, 0x40
	0x0333E82C RET
	0x0333E830 ADRP X0, 0xDB7000
	0x0333E834 LDR X0, [X0 + 0xC48]
	0x0333E838 BL 0x1C16D08
	0x0333E83C BL 0x19903D0
	0x0333E840 BL 0x3338524
	0x0333E844 MOV X19, X0
	0x0333E848 ADRP X0, 0xDEA000
	0x0333E84C LDR X0, [X0 + 0x920]
	0x0333E850 BL 0x1C16D08
	0x0333E854 MOV X1, X31
	0x0333E858 BL 0x33BDD84
	0x0333E85C ADRP X21, 0xDEA000
	0x0333E860 LDR X21, [X21 + 0xBE0]
	0x0333E864 MOV X20, X0
	0x0333E868 MOV X0, X21
	0x0333E86C BL 0x1C16D08
	0x0333E870 BL 0x19903D0
	0x0333E874 MOV X0, X21
	0x0333E878 BL 0x1C16D08
	0x0333E87C LDR X8, [X0 + 0xB8]
	0x0333E880 ADRP X22, 0xDB6000
	0x0333E884 LDR X8, [X8 + 0x8]
	0x0333E888 STR X8, [X31 + 0x8]
	0x0333E88C LDR X22, [X22 + 0x9F0]
	0x0333E890 MOV X0, X22
	0x0333E894 BL 0x1C16D08
	0x0333E898 ADD X1, X31, 0x8
	0x0333E89C BL 0x1C16E04
	0x0333E8A0 MOV X23, X0
	0x0333E8A4 MOV X0, X21
	0x0333E8A8 BL 0x1C16D08
	0x0333E8AC LDR X8, [X0 + 0xB8]
	0x0333E8B0 MOV X0, X22
	0x0333E8B4 LDR X8, [X8 + 0x10]
	0x0333E8B8 STR X8, [X31]
	0x0333E8BC BL 0x1C16D08
	0x0333E8C0 ADD X1, X31, 0x0
	0x0333E8C4 BL 0x1C16E04
	0x0333E8C8 MOV X3, X0
	0x0333E8CC MOV X0, X19
	0x0333E8D0 MOV X1, X20
	0x0333E8D4 MOV X2, X23
	0x0333E8D8 MOV X4, X31
	0x0333E8DC BL 0x3227D58
	0x0333E8E0 MOV X19, X0
	0x0333E8E4 ADRP X0, 0xDBD000
	0x0333E8E8 LDR X0, [X0 + 0x760]
	0x0333E8EC BL 0x1C16D08
	0x0333E8F0 BL 0x1C16F10
	0x0333E8F4 MOV X20, X0
	0x0333E8F8 ADRP X0, 0xDE2000
	0x0333E8FC LDR X0, [X0 + 0x18]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], X29
	003 Move [X31+40], X30
	004 Move [X31+48], X28
	005 Move [X31+56], X27
	006 Move [X31+64], X26
	007 Move [X31+72], X25
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X21, 0x109F000
	015 Move W8, [X21+3385]
	016 Move X19, X1
	017 Move X20, X0
	018 Move [X31+24], X1
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {31}
	023 Move X0, 0xDB8000
	024 Move X0, [X0+368]
	025 Call 0x1C17CF4
	026 Move X0, 0xDB6000
	027 Move X0, [X0+2288]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X21+3385], W8
	031 Move [X31+12], W31
	032 Compare X19, 0
	033 JumpIfEqual {208}
	034 Move W8, [X19+16]
	035 Compare W8, 0
	036 JumpIfEqual {192}
	037 Move X8, 0xDB6000
	038 Move X8, [X8+2288]
	039 Move X0, [X8]
	040 Call 0x1C17F10
	041 Move X1, X31
	042 Move X21, X0
	043 Call StringBuilder..ctor, X0
	044 Move [X31+16], X21
	045 Move W8, [X19+16]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X26, 0xDB8000
	048 Move X26, [X26+368]
	049 Move W28, 0xF800
	050 Move X22, X31
	051 Move W23, W31
	052 Move W27, 1
	053 NotImplemented "Instruction MOVK not yet implemented."
	054 Add X2, X31, 12
	055 Move X0, X19
	056 Move W1, W23
	057 Move X3, X31
	058 Call CharUnicodeInfo.InternalGetUnicodeCategory, X0, X1, X2
	059 Move X8, [X26]
	060 Move W25, W0
	061 Move W9, [X8+224]
	062 Compare W9, 0
	063 JumpIfNotEqual {66}
	064 Move X0, X8
	065 Call 0x1C17DFC
	066 Move W0, W25
	067 Move X1, X31
	068 Call Char.CheckLetter, X0
	069 Move W4, [X31+12]
	070 Move TEMP, X0
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfNotEqual {142}
	074 Add X1, X31, 16
	075 Add X2, X31, 24
	076 Move X0, X20
	077 Move W3, W23
	078 Call TextInfo.AddTitlecaseLetter, X0, X1, X2, X3, X4
	079 Move W8, [X19+16]
	080 Add W24, W0, 1
	081 NotImplemented "Instruction CMP not yet implemented."
	082 NotImplemented "Instruction CSET not yet implemented."
	083 Move W23, W24
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Add X2, X31, 12
	086 Move X0, X19
	087 Move W1, W23
	088 Move X3, X31
	089 Call CharUnicodeInfo.InternalGetUnicodeCategory, X0, X1, X2
	090 Move W25, W0
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move X0, X19
	093 Move W1, W23
	094 Move X2, X31
	095 Call String.get_Chars, X0, X1
	096 And W8, W0, 0xFFFF
	097 NotImplemented "Instruction CMP not yet implemented."
	098 NotImplemented "Instruction LSLV not yet implemented."
	099 And W31, W8, W28
	100 Move W8, [X31+12]
	101 Move W9, [X19+16]
	102 Add W23, W8, W23
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Move W8, [X31+12]
	105 Move W9, [X19+16]
	106 NotImplemented "Instruction CMP not yet implemented."
	107 NotImplemented "Instruction CSET not yet implemented."
	108 Add W23, W8, W23
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Or W29, W29, W10
	111 Add W23, W23, 1
	112 Move TEMP, X29
	113 And TEMP, TEMP, 1
	114 Compare TEMP, 1
	115 JumpIfNotEqual {130}
	116 Compare X22, 0
	117 JumpIfNotEqual {125}
	118 Move X8, [X20]
	119 Move X0, X20
	120 Move X1, X19
	121 Move X9, [X8+440]
	122 Move X2, [X8+448]
	123 NotImplemented "Instruction BLR not yet implemented."
	124 Move X22, X0
	125 Compare X21, 0
	126 JumpIfEqual {207}
	127 Subtract W3, W23, W24
	128 Move X0, X21
	129 Move X1, X22
	130 Compare X21, 0
	131 JumpIfEqual {207}
	132 Subtract W3, W23, W24
	133 Move X0, X21
	134 Move X1, X19
	135 Move W2, W24
	136 Move X4, X31
	137 Call StringBuilder.Append, X0, X1, X2, X3
	138 Move W8, [X19+16]
	139 Move W29, 1
	140 Move W24, W23
	141 NotImplemented "Instruction CMP not yet implemented."
	142 Add X0, X31, 16
	143 Add X1, X31, 24
	144 Move W2, W23
	145 Move W3, W4
	146 Subtract W25, W23, W24
	147 NotImplemented "Instruction CMP not yet implemented."
	148 Move TEMP, X29
	149 And TEMP, TEMP, 1
	150 Compare TEMP, 1
	151 JumpIfNotEqual {165}
	152 Compare X22, 0
	153 JumpIfNotEqual {161}
	154 Move X8, [X20]
	155 Move X0, X20
	156 Move X1, X19
	157 Move X9, [X8+440]
	158 Move X2, [X8+448]
	159 NotImplemented "Instruction BLR not yet implemented."
	160 Move X22, X0
	161 Compare X21, 0
	162 JumpIfEqual {207}
	163 Move X0, X21
	164 Move X1, X22
	165 Compare X21, 0
	166 JumpIfEqual {207}
	167 Move X0, X21
	168 Move X1, X19
	169 Move W2, W24
	170 Move W3, W25
	171 Move X4, X31
	172 Call StringBuilder.Append, X0, X1, X2, X3
	173 Move W8, [X19+16]
	174 NotImplemented "Instruction CMP not yet implemented."
	175 Move W3, [X31+12]
	176 Add X0, X31, 16
	177 Add X1, X31, 24
	178 Move W2, W23
	179 Call TextInfo.AddNonLetter, X0, X1, X2, X3
	180 Move W23, W0
	181 Move W8, [X19+16]
	182 Add W23, W23, 1
	183 NotImplemented "Instruction CMP not yet implemented."
	184 Compare X21, 0
	185 JumpIfEqual {207}
	186 Move X8, [X21]
	187 Move X0, X21
	188 Move X9, [X8+360]
	189 Move X1, [X8+368]
	190 NotImplemented "Instruction BLR not yet implemented."
	191 Move X19, X0
	192 Move X0, X19
	193 Move X20, [X31+112]
	194 Move X19, [X31+120]
	195 Move X22, [X31+96]
	196 Move X21, [X31+104]
	197 Move X24, [X31+80]
	198 Move X23, [X31+88]
	199 Move X26, [X31+64]
	200 Move X25, [X31+72]
	201 Move X28, [X31+48]
	202 Move X27, [X31+56]
	203 Move X29, [X31+32]
	204 Move X30, [X31+40]
	205 Add X31, X31, 128
	206 Return X0
	207 Call 0x1C17F20
	208 Move X0, 0xDBB000
	209 Move X0, [X0+1320]
	210 Call 0x1C17D08
	211 Call 0x1C17F10
	212 Move X19, X0
	213 Move X0, 0xDB8000
	214 Move X0, [X0+3200]
	215 Call 0x1C17D08
	216 Move X1, X0
	217 Move X0, X19
	218 Move X2, X31
	219 Call ArgumentNullException..ctor, X0, X1
	220 Move X0, 0xDEB000
	221 Move X0, [X0+2984]
	222 Call 0x1C17D08
	223 Move X1, X0
	224 Move X0, X19
	225 Call 0x1C17DEC

Method: System.Int32 AddNonLetter(ref System.Text.StringBuilder result, ref System.String input, System.Int32 inputIndex, System.Int32 charLen)

Disassembly:
	0x0333EA74 STR W8, [X31 + 0x8]
	0x0333EA78 BL 0x1C16D08
	0x0333EA7C ADD X1, X31, 0x8
	0x0333EA80 BL 0x1C16E04
	0x0333EA84 MOV X3, X0
	0x0333EA88 MOV X0, X19
	0x0333EA8C MOV X1, X20
	0x0333EA90 MOV X2, X22
	0x0333EA94 MOV X4, X31
	0x0333EA98 BL 0x3227D58
	0x0333EA9C MOV X19, X0
	0x0333EAA0 ADRP X0, 0xDBD000
	0x0333EAA4 LDR X0, [X0 + 0x760]
	0x0333EAA8 BL 0x1C16D08
	0x0333EAAC BL 0x1C16F10
	0x0333EAB0 MOV X20, X0
	0x0333EAB4 ADRP X0, 0xDEA000
	0x0333EAB8 LDR X0, [X0 + 0x5A8]
	0x0333EABC BL 0x1C16D08
	0x0333EAC0 MOV X1, X0
	0x0333EAC4 MOV X0, X20
	0x0333EAC8 MOV X2, X19
	0x0333EACC MOV X3, X31
	0x0333EAD0 BL 0x3311888
	0x0333EAD4 ADRP X0, 0xDEA000
	0x0333EAD8 LDR X0, [X0 + 0xBF8]
	0x0333EADC BL 0x1C16D08
	0x0333EAE0 MOV X1, X0
	0x0333EAE4 MOV X0, X20
	0x0333EAE8 BL 0x1C16DEC
	0x0333EAEC STP X30, X23, [X31 - 0x30]!
	0x0333EAF0 STP X22, X21, [X31 + 0x10]
	0x0333EAF4 STP X20, X19, [X31 + 0x20]
	0x0333EAF8 ADRP X22, 0x109E000
	0x0333EAFC ADRP X23, 0xDEA000
	0x0333EB00 LDRB W8, [X22 + 0xD4C]
	0x0333EB04 LDR X23, [X23 + 0xBE0]
	0x0333EB08 MOV W20, W2
	0x0333EB0C MOV W19, W1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, X0
	007 Move X20, [X0]
	008 Move X0, [X1]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move W19, W2
	011 Compare X0, 0
	012 JumpIfEqual {46}
	013 Move X22, X1
	014 Move W1, W19
	015 Move X2, X31
	016 Call String.get_Chars, X0, X1
	017 Compare X20, 0
	018 JumpIfEqual {46}
	019 Move W1, W0
	020 Move X0, X20
	021 Move X2, X31
	022 Call StringBuilder.Append, X0, X1
	023 Move X0, [X22]
	024 Compare X0, 0
	025 JumpIfEqual {46}
	026 Move X20, [X21]
	027 Add W19, W19, 1
	028 Compare X0, 0
	029 JumpIfEqual {46}
	030 Move W1, W19
	031 Move X2, X31
	032 Call String.get_Chars, X0, X1
	033 Compare X20, 0
	034 JumpIfEqual {46}
	035 Move W1, W0
	036 Move X0, X20
	037 Move X2, X31
	038 Call StringBuilder.Append, X0, X1
	039 Move W0, W19
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X30, [X31+48]
	045 Return X0
	046 Call 0x1C17F20

Method: System.Int32 AddTitlecaseLetter(ref System.Text.StringBuilder result, ref System.String input, System.Int32 inputIndex, System.Int32 charLen)

Disassembly:
	0x0333E900 BL 0x1C16D08
	0x0333E904 MOV X1, X0
	0x0333E908 MOV X0, X20
	0x0333E90C MOV X2, X19
	0x0333E910 MOV X3, X31
	0x0333E914 BL 0x3311888
	0x0333E918 ADRP X0, 0xDEA000
	0x0333E91C LDR X0, [X0 + 0xBE8]
	0x0333E920 BL 0x1C16D08
	0x0333E924 MOV X1, X0
	0x0333E928 MOV X0, X20
	0x0333E92C BL 0x1C16DEC
	0x0333E930 CMP W0, 0x2
	0x0333E934 B.CS 0x333E93C
	0x0333E938 RET
	0x0333E93C STR X30, [X31 - 0x20]!
	0x0333E940 STP X20, X19, [X31 + 0x10]
	0x0333E944 ADRP X0, 0xDEA000
	0x0333E948 LDR X0, [X0 + 0x348]
	0x0333E94C BL 0x1C16D08
	0x0333E950 MOV X1, X31
	0x0333E954 BL 0x33BDD84
	0x0333E958 MOV X19, X0
	0x0333E95C ADRP X0, 0xDBD000
	0x0333E960 LDR X0, [X0 + 0x760]
	0x0333E964 BL 0x1C16D08
	0x0333E968 BL 0x1C16F10
	0x0333E96C MOV X20, X0
	0x0333E970 ADRP X0, 0xDEA000
	0x0333E974 LDR X0, [X0 + 0x340]
	0x0333E978 BL 0x1C16D08
	0x0333E97C MOV X1, X0
	0x0333E980 MOV X0, X20
	0x0333E984 MOV X2, X19
	0x0333E988 MOV X3, X31
	0x0333E98C BL 0x3311888
	0x0333E990 ADRP X0, 0xDEA000
	0x0333E994 LDR X0, [X0 + 0xBF0]
	0x0333E998 BL 0x1C16D08
	0x0333E99C MOV X1, X0
	0x0333E9A0 MOV X0, X20
	0x0333E9A4 BL 0x1C16DEC
	0x0333E9A8 STR X30, [X31 - 0x30]!
	0x0333E9AC STP X22, X21, [X31 + 0x10]
	0x0333E9B0 STP X20, X19, [X31 + 0x20]
	0x0333E9B4 ADRP X21, 0x109E000
	0x0333E9B8 ADRP X22, 0xDEA000
	0x0333E9BC LDRB W8, [X21 + 0xD4B]
	0x0333E9C0 LDR X22, [X22 + 0xBE0]
	0x0333E9C4 MOV W20, W1
	0x0333E9C8 MOV W19, W0
	0x0333E9CC TBNZ X8, 0x0, 0x333E9E4
	0x0333E9D0 ADRP X0, 0xDEA000
	0x0333E9D4 LDR X0, [X0 + 0xBE0]
	0x0333E9D8 BL 0x1C16CF4
	0x0333E9DC MOVZ W8, 0x1
	0x0333E9E0 STRB W8, [X21 + 0xD4B]
	0x0333E9E4 LDR X0, [X22]
	0x0333E9E8 LDR W8, [X0 + 0xE0]
	0x0333E9EC CBNZ W8, 0x333E9F4
	0x0333E9F0 BL 0x1C16DFC
	0x0333E9F4 MOV W0, W20
	0x0333E9F8 BL 0x333E930
	0x0333E9FC SUB W8, W19, 0x526
	0x0333EA00 CMP W8, 0xB7
	0x0333EA04 B.CS 0x333EA18
	0x0333EA08 LDP X20, X19, [X31 + 0x20]
	0x0333EA0C LDP X22, X21, [X31 + 0x10]
	0x0333EA10 LDR X30, [X31], #0x30
	0x0333EA14 RET
	0x0333EA18 ADRP X0, 0xDB7000
	0x0333EA1C LDR X0, [X0 + 0xC48]
	0x0333EA20 BL 0x1C16D08
	0x0333EA24 BL 0x19903D0
	0x0333EA28 BL 0x33387A0
	0x0333EA2C MOV X19, X0
	0x0333EA30 ADRP X0, 0xDE4000
	0x0333EA34 LDR X0, [X0 + 0x370]
	0x0333EA38 BL 0x1C16D08
	0x0333EA3C MOV X1, X31
	0x0333EA40 BL 0x33BDD84
	0x0333EA44 MOVZ W8, 0x526
	0x0333EA48 STR W8, [X31 + 0xC]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W19, W3
	007 Move X22, X2
	008 Move X21, X1
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X20, X0
	011 Move X0, [X22]
	012 Compare X0, 0
	013 JumpIfEqual {88}
	014 Move X21, [X21]
	015 Move W2, 2
	016 Move W1, W19
	017 Move X3, X31
	018 Call String.Substring, X0, X1, X2
	019 Move X8, [X20]
	020 Move X1, X0
	021 Move X0, X20
	022 Move X9, [X8+472]
	023 Move X2, [X8+480]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Compare X21, 0
	026 JumpIfEqual {88}
	027 Move X1, X0
	028 Move X0, X21
	029 Move X2, X31
	030 Call StringBuilder.Append, X0, X1
	031 Add W19, W19, 1
	032 Move X0, [X22]
	033 Compare X0, 0
	034 JumpIfEqual {88}
	035 Move W1, W19
	036 Move X2, X31
	037 Call String.get_Chars, X0, X1
	038 And W8, W0, 0xFFFF
	039 Subtract W9, W8, 452
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move W8, 1
	042 NotImplemented "Instruction LSLV not yet implemented."
	043 And W31, W8, 7
	044 And W31, W8, 56
	045 Move X0, [X21]
	046 Compare X0, 0
	047 JumpIfEqual {88}
	048 Move W1, 456
	049 Move X0, [X21]
	050 Compare X0, 0
	051 JumpIfEqual {88}
	052 Move W1, 453
	053 Move X0, [X21]
	054 Compare X0, 0
	055 JumpIfEqual {88}
	056 Move W1, 459
	057 Move X21, [X21]
	058 Subtract W8, W8, 497
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Compare X21, 0
	061 JumpIfEqual {88}
	062 Move W1, 498
	063 Move X0, [X22]
	064 Compare X0, 0
	065 JumpIfEqual {88}
	066 Move W1, W19
	067 Move X2, X31
	068 Call String.get_Chars, X0, X1
	069 Move X8, [X20]
	070 Move W1, W0
	071 Move X0, X20
	072 Move X9, [X8+456]
	073 Move X2, [X8+464]
	074 NotImplemented "Instruction BLR not yet implemented."
	075 Compare X21, 0
	076 JumpIfEqual {88}
	077 Move W1, W0
	078 Move X0, X21
	079 Move X2, X31
	080 Call StringBuilder.Append, X0, X1
	081 Move W0, W19
	082 Move X20, [X31+32]
	083 Move X19, [X31+40]
	084 Move X22, [X31+16]
	085 Move X21, [X31+24]
	086 Move X30, [X31+48]
	087 Return X0
	088 Call 0x1C17F20

Method: System.Boolean IsWordSeparator(System.Globalization.UnicodeCategory category)

Disassembly:
	0x0333EA58 MOV X0, X21
	0x0333EA5C BL 0x1C16D08
	0x0333EA60 ADD X1, X31, 0xC
	0x0333EA64 BL 0x1C16E04
	0x0333EA68 MOV X22, X0
	0x0333EA6C MOVZ W8, 0x5DC
	0x0333EA70 MOV X0, X21

ISIL:
	001 Move W8, 1
	002 Move W9, 0xF800
	003 NotImplemented "Instruction LSLV not yet implemented."
	004 NotImplemented "Instruction MOVK not yet implemented."
	005 And W31, W8, W9
	006 NotImplemented "Instruction CSET not yet implemented."
	007 Return X0

Method: System.Boolean IsLetterCategory(System.Globalization.UnicodeCategory uc)

Disassembly:
	0x0333EA4C ADRP X21, 0xDB5000
	0x0333EA50 LDR X21, [X21 + 0x758]
	0x0333EA54 MOV X20, X0

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: System.Void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object sender)

Disassembly:
	0x0333EB10 MOV W21, W0

ISIL:
	001 Call TextInfo.OnDeserialized, X0
	002 Return 

Method: System.String ToUpperInternal(System.String str)

Disassembly:
	0x0333E3D0 BL 0x335F0C4
	0x0333E3D4 LDR W8, [X20 + 0x18]
	0x0333E3D8 CMP X21, X8
	0x0333E3DC B.CS 0x333E418
	0x0333E3E0 LDR X9, [X31 + 0x8]
	0x0333E3E4 AND X10, X24, 0x0
	0x0333E3E8 ADD X21, X21, 0x1
	0x0333E3EC ADD W23, W23, 0x4
	0x0333E3F0 STP X10, X9, [X22 - 0x8]
	0x0333E3F4 CMP X21, W8, SXTW
	0x0333E3F8 ADD X22, X22, 0x10
	0x0333E3FC B.LT 0x333E378
	0x0333E400 MOV X0, X20
	0x0333E404 LDP X20, X19, [X31 + 0x30]
	0x0333E408 LDP X22, X21, [X31 + 0x20]
	0x0333E40C LDP X24, X23, [X31 + 0x10]
	0x0333E410 LDR X30, [X31], #0x40
	0x0333E414 RET
	0x0333E418 BL 0x1C16F28
	0x0333E41C BL 0x1C16F20
	0x0333E420 SUB X31, X31, 0x20
	0x0333E424 STP X30, X19, [X31 + 0x10]
	0x0333E428 MOV X19, X0
	0x0333E42C STR W1, [X0]
	0x0333E430 ADD X0, X31, 0x8
	0x0333E434 MOV W1, W2
	0x0333E438 MOV W2, W3
	0x0333E43C MOV W3, W4
	0x0333E440 MOV X4, X31
	0x0333E444 STR X31, [X31 + 0x8]
	0x0333E448 BL 0x335F0C4
	0x0333E44C LDR X8, [X31 + 0x8]
	0x0333E450 STR X8, [X19 + 0x8]
	0x0333E454 LDP X30, X19, [X31 + 0x10]
	0x0333E458 ADD X31, X31, 0x20
	0x0333E45C RET
	0x0333E460 STR X30, [X31 - 0x20]!
	0x0333E464 STP X20, X19, [X31 + 0x10]
	0x0333E468 ADRP X20, 0x109E000
	0x0333E46C ADRP X19, 0xDEA000
	0x0333E470 LDRB W8, [X20 + 0xD46]
	0x0333E474 LDR X19, [X19 + 0xBE0]
	0x0333E478 TBNZ X8, 0x0, 0x333E490
	0x0333E47C ADRP X0, 0xDEA000
	0x0333E480 LDR X0, [X0 + 0xBE0]
	0x0333E484 BL 0x1C16CF4
	0x0333E488 MOVZ W8, 0x1
	0x0333E48C STRB W8, [X20 + 0xD46]
	0x0333E490 LDR X0, [X19]
	0x0333E494 LDR W8, [X0 + 0xE0]
	0x0333E498 CBNZ W8, 0x333E4A4
	0x0333E49C BL 0x1C16DFC
	0x0333E4A0 LDR X0, [X19]
	0x0333E4A4 LDR X8, [X0 + 0xB8]
	0x0333E4A8 LDP X20, X19, [X31 + 0x10]
	0x0333E4AC LDR X0, [X8 + 0x8]
	0x0333E4B0 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x109F000
	009 Move W8, [X21+3386]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xDB8000
	017 Move X0, [X0+632]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3386], W8
	021 Compare X19, 0
	022 JumpIfEqual {66}
	023 Move W0, [X19+16]
	024 Compare W0, 0
	025 JumpIfEqual {37}
	026 Move X1, X31
	027 Call String.FastAllocateString, X0
	028 Move X21, X0
	029 Move X0, X31
	030 Call RuntimeHelpers.get_OffsetToStringData
	031 Move W22, W0
	032 Compare X21, 0
	033 JumpIfEqual {42}
	034 Move X0, X31
	035 Call RuntimeHelpers.get_OffsetToStringData
	036 Add X23, X21, W0
	037 Move X8, 0xDB8000
	038 Move X8, [X8+632]
	039 Move X8, [X8]
	040 Move X8, [X8+184]
	041 Move X21, [X8]
	042 Move X23, X21
	043 Move W8, [X19+16]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move W24, W31
	046 Add X22, X19, W22
	047 Move X8, [X20]
	048 Move X0, X20
	049 Move X9, [X8+456]
	050 Move X2, [X8+464]
	051 NotImplemented "Instruction LDRH not yet implemented."
	052 NotImplemented "Instruction BLR not yet implemented."
	053 NotImplemented "Instruction STRH not yet implemented."
	054 Move W8, [X19+16]
	055 Add W24, W24, 1
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X0, X21
	058 Move X20, [X31+48]
	059 Move X19, [X31+56]
	060 Move X22, [X31+32]
	061 Move X21, [X31+40]
	062 Move X24, [X31+16]
	063 Move X23, [X31+24]
	064 Move X30, [X31+64]
	065 Return X0
	066 Call 0x1C17F20

Method: System.String ToLowerInternal(System.String str)

Disassembly:
	0x0333DD8C LDR X0, [X0 + 0x9F0]
	0x0333DD90 BL 0x1C16CF4
	0x0333DD94 MOVZ W8, 0x1
	0x0333DD98 STRB W8, [X20 + 0xD42]
	0x0333DD9C LDR X0, [X19]
	0x0333DDA0 LDR W8, [X0 + 0xE0]
	0x0333DDA4 CBNZ W8, 0x333DDB0
	0x0333DDA8 BL 0x1C16DFC
	0x0333DDAC LDR X0, [X19]
	0x0333DDB0 LDR X8, [X0 + 0xB8]
	0x0333DDB4 LDP X20, X19, [X31 + 0x10]
	0x0333DDB8 LDR X0, [X8 + 0x18]
	0x0333DDBC LDR X30, [X31], #0x20
	0x0333DDC0 RET
	0x0333DDC4 STP X30, X21, [X31 - 0x20]!
	0x0333DDC8 STP X20, X19, [X31 + 0x10]
	0x0333DDCC ADRP X21, 0x109F000
	0x0333DDD0 ADRP X20, 0xDEB000
	0x0333DDD4 LDRB W8, [X21 + 0xD43]
	0x0333DDD8 LDR X20, [X20 + 0xBB8]
	0x0333DDDC MOV X19, X0
	0x0333DDE0 TBNZ X8, 0x0, 0x333DE04
	0x0333DDE4 ADRP X0, 0xDEA000
	0x0333DDE8 LDR X0, [X0 + 0xBB8]
	0x0333DDEC BL 0x1C16CF4
	0x0333DDF0 ADRP X0, 0xDEB000
	0x0333DDF4 LDR X0, [X0 + 0xBB8]
	0x0333DDF8 BL 0x1C16CF4
	0x0333DDFC MOVZ W8, 0x1
	0x0333DE00 STRB W8, [X21 + 0xD43]
	0x0333DE04 ADRP X21, 0xDEA000
	0x0333DE08 LDR X21, [X21 + 0xBB8]
	0x0333DE0C MOV X0, X19
	0x0333DE10 MOV X1, X31
	0x0333DE14 BL 0x3332DC0
	0x0333DE18 LDR X0, [X20]
	0x0333DE1C LDR W8, [X0 + 0xE0]
	0x0333DE20 CBNZ W8, 0x333DE2C
	0x0333DE24 BL 0x1C16DFC
	0x0333DE28 LDR X0, [X20]
	0x0333DE2C LDR X8, [X0 + 0xB8]
	0x0333DE30 LDR X0, [X21]
	0x0333DE34 LDR X20, [X8]
	0x0333DE38 BL 0x1C16F10
	0x0333DE3C MOV X1, X19
	0x0333DE40 MOV X2, X20
	0x0333DE44 MOV X3, X31
	0x0333DE48 MOV X21, X0
	0x0333DE4C BL 0x3336904
	0x0333DE50 STR X21, [X19 + 0x20]
	0x0333DE54 LDP X20, X19, [X31 + 0x10]
	0x0333DE58 LDP X30, X21, [X31], #0x20
	0x0333DE5C RET
	0x0333DE60 MOVZ W0, 0x7
	0x0333DE64 RET
	0x0333DE68 STR X30, [X31 - 0x10]!
	0x0333DE6C LDR X0, [X0 + 0x20]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x10A0000
	009 Move W8, [X21+3387]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xDB9000
	017 Move X0, [X0+632]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3387], W8
	021 Compare X19, 0
	022 JumpIfEqual {66}
	023 Move W0, [X19+16]
	024 Compare W0, 0
	025 JumpIfEqual {37}
	026 Move X1, X31
	027 Call String.FastAllocateString, X0
	028 Move X21, X0
	029 Move X0, X31
	030 Call RuntimeHelpers.get_OffsetToStringData
	031 Move W22, W0
	032 Compare X21, 0
	033 JumpIfEqual {42}
	034 Move X0, X31
	035 Call RuntimeHelpers.get_OffsetToStringData
	036 Add X23, X21, W0
	037 Move X8, 0xDB9000
	038 Move X8, [X8+632]
	039 Move X8, [X8]
	040 Move X8, [X8+184]
	041 Move X21, [X8]
	042 Move X23, X21
	043 Move W8, [X19+16]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move W24, W31
	046 Add X22, X19, W22
	047 Move X8, [X20]
	048 Move X0, X20
	049 Move X9, [X8+424]
	050 Move X2, [X8+432]
	051 NotImplemented "Instruction LDRH not yet implemented."
	052 NotImplemented "Instruction BLR not yet implemented."
	053 NotImplemented "Instruction STRH not yet implemented."
	054 Move W8, [X19+16]
	055 Add W24, W24, 1
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X0, X21
	058 Move X20, [X31+48]
	059 Move X19, [X31+56]
	060 Move X22, [X31+32]
	061 Move X21, [X31+40]
	062 Move X24, [X31+16]
	063 Move X23, [X31+24]
	064 Move X30, [X31+64]
	065 Return X0
	066 Call 0x1C17F20

Method: System.Char ToUpperInternal(System.Char c)

Disassembly:
	0x0333DEE4 MOV X3, X31
	0x0333DEE8 LDR X30, [X31], #0x10
	0x0333DEEC B 0x3337A7C
	0x0333DEF0 BL 0x1C16F20
	0x0333DEF4 STR X30, [X31 - 0x10]!
	0x0333DEF8 LDR X0, [X0 + 0x20]
	0x0333DEFC CBZ X0, 0x333DF0C
	0x0333DF00 MOV X2, X31
	0x0333DF04 LDR X30, [X31], #0x10
	0x0333DF08 B 0x3337804
	0x0333DF0C BL 0x1C16F20
	0x0333DF10 STR X30, [X31 - 0x10]!
	0x0333DF14 LDR X0, [X0 + 0x20]
	0x0333DF18 CBZ X0, 0x333DF28
	0x0333DF1C MOV X2, X31
	0x0333DF20 LDR X30, [X31], #0x10
	0x0333DF24 B 0x33379FC
	0x0333DF28 BL 0x1C16F20
	0x0333DF2C STR X30, [X31 - 0x10]!
	0x0333DF30 LDR X0, [X0 + 0x20]
	0x0333DF34 CBZ X0, 0x333DF44
	0x0333DF38 MOV X2, X31
	0x0333DF3C LDR X30, [X31], #0x10
	0x0333DF40 B 0x3337A94
	0x0333DF44 BL 0x1C16F20
	0x0333DF48 STR X30, [X31 - 0x10]!
	0x0333DF4C LDR X0, [X0 + 0x20]
	0x0333DF50 CBZ X0, 0x333DF60
	0x0333DF54 MOV X3, X31
	0x0333DF58 LDR X30, [X31], #0x10
	0x0333DF5C B 0x3337BBC
	0x0333DF60 BL 0x1C16F20
	0x0333DF64 STR X30, [X31 - 0x10]!
	0x0333DF68 LDR X0, [X0 + 0x20]
	0x0333DF6C CBZ X0, 0x333DF84
	0x0333DF70 LDR W8, [X31 + 0x10]
	0x0333DF74 STR X31, [X31 + 0x18]
	0x0333DF78 STR W8, [X31 + 0x10]
	0x0333DF7C LDR X30, [X31], #0x10
	0x0333DF80 B 0x3337C2C
	0x0333DF84 BL 0x1C16F20
	0x0333DF88 STR X30, [X31 - 0x10]!
	0x0333DF8C LDR X0, [X0 + 0x20]
	0x0333DF90 CBZ X0, 0x333DFA0
	0x0333DF94 MOV X1, X31
	0x0333DF98 LDR X30, [X31], #0x10
	0x0333DF9C B 0x333790C
	0x0333DFA0 BL 0x1C16F20
	0x0333DFA4 STP X30, X19, [X31 - 0x10]!
	0x0333DFA8 MOV X19, X0
	0x0333DFAC LDR W0, [X0 + 0x18]
	0x0333DFB0 ADDS W31, W0, 0x1
	0x0333DFB4 B.NE 0x333DFD8
	0x0333DFB8 LDR X8, [X19]
	0x0333DFBC MOV X0, X19
	0x0333DFC0 LDP X9, X1, [X8 + 0x1A8]
	0x0333DFC4 BLR X9
	0x0333DFC8 MOVZ W1, 0xA0C
	0x0333DFCC MOV X2, X31
	0x0333DFD0 BL 0x33335E0
	0x0333DFD4 STR W0, [X19 + 0x18]
	0x0333DFD8 LDP X30, X19, [X31], #0x10
	0x0333DFDC RET
	0x0333DFE0 SUB X31, X31, 0x40
	0x0333DFE4 STP X30, X23, [X31 + 0x10]
	0x0333DFE8 STP X22, X21, [X31 + 0x20]
	0x0333DFEC STP X20, X19, [X31 + 0x30]
	0x0333DFF0 MOV W20, W1
	0x0333DFF4 MOV X1, X31
	0x0333DFF8 MOV X19, X0
	0x0333DFFC BL 0x3332E70
	0x0333E000 CMP W20, 0x63
	0x0333E004 B.LT 0x333E034
	0x0333E008 LDR X8, [X19 + 0x20]
	0x0333E00C CBZ X8, 0x333E114
	0x0333E010 LDR W8, [X8 + 0x10]
	0x0333E014 CMP W8, W20
	0x0333E018 B.LT 0x333E034
	0x0333E01C STR W20, [X19 + 0x18]
	0x0333E020 LDP X20, X19, [X31 + 0x30]
	0x0333E024 LDP X22, X21, [X31 + 0x20]
	0x0333E028 LDP X30, X23, [X31 + 0x10]
	0x0333E02C ADD X31, X31, 0x40
	0x0333E030 RET
	0x0333E034 ADRP X0, 0xDB7000
	0x0333E038 LDR X0, [X0 + 0xC48]
	0x0333E03C BL 0x1C16D08
	0x0333E040 BL 0x19903D0
	0x0333E044 BL 0x33387A0
	0x0333E048 MOV X20, X0
	0x0333E04C ADRP X0, 0xDE4000
	0x0333E050 LDR X0, [X0 + 0x370]
	0x0333E054 BL 0x1C16D08
	0x0333E058 MOV X1, X31
	0x0333E05C BL 0x33BDD84
	0x0333E060 MOVZ W8, 0x63
	0x0333E064 STR W8, [X31 + 0xC]
	0x0333E068 ADRP X22, 0xDB5000
	0x0333E06C LDR X22, [X22 + 0x758]
	0x0333E070 MOV X21, X0
	0x0333E074 MOV X0, X22
	0x0333E078 BL 0x1C16D08
	0x0333E07C ADD X1, X31, 0xC
	0x0333E080 BL 0x1C16E04
	0x0333E084 LDR X19, [X19 + 0x20]
	0x0333E088 MOV X23, X0
	0x0333E08C MOV X0, X19
	0x0333E090 BL 0x19903C0
	0x0333E094 LDR W8, [X19 + 0x10]
	0x0333E098 MOV X0, X22
	0x0333E09C STR W8, [X31 + 0x8]
	0x0333E0A0 BL 0x1C16D08
	0x0333E0A4 ADD X1, X31, 0x8
	0x0333E0A8 BL 0x1C16E04
	0x0333E0AC MOV X3, X0
	0x0333E0B0 MOV X0, X20
	0x0333E0B4 MOV X1, X21
	0x0333E0B8 MOV X2, X23
	0x0333E0BC MOV X4, X31
	0x0333E0C0 BL 0x3227D58
	0x0333E0C4 MOV X19, X0
	0x0333E0C8 ADRP X0, 0xDBD000
	0x0333E0CC LDR X0, [X0 + 0x760]
	0x0333E0D0 BL 0x1C16D08
	0x0333E0D4 BL 0x1C16F10
	0x0333E0D8 MOV X20, X0
	0x0333E0DC ADRP X0, 0xDEA000
	0x0333E0E0 LDR X0, [X0 + 0x5A8]
	0x0333E0E4 BL 0x1C16D08
	0x0333E0E8 MOV X1, X0
	0x0333E0EC MOV X0, X20
	0x0333E0F0 MOV X2, X19
	0x0333E0F4 MOV X3, X31
	0x0333E0F8 BL 0x3311888
	0x0333E0FC ADRP X0, 0xDEA000
	0x0333E100 LDR X0, [X0 + 0xBC0]
	0x0333E104 BL 0x1C16D08
	0x0333E108 MOV X1, X0
	0x0333E10C MOV X0, X20
	0x0333E110 BL 0x1C16DEC
	0x0333E114 BL 0x1C16F20
	0x0333E118 STR X30, [X31 - 0x20]!
	0x0333E11C STP X20, X19, [X31 + 0x10]
	0x0333E120 TBNZ X1, 0x1F, 0x333E15C
	0x0333E124 LDR X8, [X0]
	0x0333E128 MOV W19, W1
	0x0333E12C LDR X20, [X0 + 0x20]
	0x0333E130 LDR X9, [X8 + 0x2E8]
	0x0333E134 LDR X1, [X8 + 0x2F0]
	0x0333E138 BLR X9
	0x0333E13C CBZ X20, 0x333E1C0
	0x0333E140 MOV W2, W0
	0x0333E144 MOV X0, X20
	0x0333E148 MOV W1, W19
	0x0333E14C LDP X20, X19, [X31 + 0x10]
	0x0333E150 MOV X3, X31
	0x0333E154 LDR X30, [X31], #0x20
	0x0333E158 B 0x3337D30
	0x0333E15C ADRP X0, 0xDDD000
	0x0333E160 LDR X0, [X0 + 0x670]
	0x0333E164 BL 0x1C16D08
	0x0333E168 MOV X1, X31
	0x0333E16C BL 0x33BDD84
	0x0333E170 MOV X19, X0
	0x0333E174 ADRP X0, 0xDBD000
	0x0333E178 LDR X0, [X0 + 0x760]
	0x0333E17C BL 0x1C16D08
	0x0333E180 BL 0x1C16F10
	0x0333E184 MOV X20, X0
	0x0333E188 ADRP X0, 0xDEA000
	0x0333E18C LDR X0, [X0 + 0x5A8]
	0x0333E190 BL 0x1C16D08
	0x0333E194 MOV X1, X0
	0x0333E198 MOV X0, X20
	0x0333E19C MOV X2, X19
	0x0333E1A0 MOV X3, X31
	0x0333E1A4 BL 0x3311888
	0x0333E1A8 ADRP X0, 0xDEA000
	0x0333E1AC LDR X0, [X0 + 0xBC8]
	0x0333E1B0 BL 0x1C16D08
	0x0333E1B4 MOV X1, X0
	0x0333E1B8 MOV X0, X20
	0x0333E1BC BL 0x1C16DEC
	0x0333E1C0 BL 0x1C16F20
	0x0333E1C4 SUB X31, X31, 0x30
	0x0333E1C8 STP X30, X21, [X31 + 0x10]
	0x0333E1CC STP X20, X19, [X31 + 0x20]
	0x0333E1D0 ADRP X20, 0x109E000
	0x0333E1D4 ADRP X21, 0xDEA000
	0x0333E1D8 ADRP X19, 0xDEA000
	0x0333E1DC LDRB W8, [X20 + 0xD44]
	0x0333E1E0 LDR X21, [X21 + 0x9D0]
	0x0333E1E4 LDR X19, [X19 + 0x9D8]
	0x0333E1E8 TBNZ X8, 0x0, 0x333E218
	0x0333E1EC ADRP X0, 0xDEA000
	0x0333E1F0 LDR X0, [X0 + 0x9D0]
	0x0333E1F4 BL 0x1C16CF4
	0x0333E1F8 ADRP X0, 0xDEA000
	0x0333E1FC LDR X0, [X0 + 0x9D8]
	0x0333E200 BL 0x1C16CF4
	0x0333E204 ADRP X0, 0xDEA000
	0x0333E208 LDR X0, [X0 + 0xBB8]
	0x0333E20C BL 0x1C16CF4
	0x0333E210 MOVZ W8, 0x1
	0x0333E214 STRB W8, [X20 + 0xD44]
	0x0333E218 LDR X0, [X21]
	0x0333E21C MOVZ W1, 0x1
	0x0333E220 BL 0x1C16D6C
	0x0333E224 LDR X8, [X19]
	0x0333E228 MOV X19, X0
	0x0333E22C MOV X0, X8
	0x0333E230 BL 0x1C16F10
	0x0333E234 MOVZ W1, 0x1
	0x0333E238 MOVZ W2, 0x1
	0x0333E23C MOVZ W3, 0x1
	0x0333E240 MOVZ W4, 0x1
	0x0333E244 MOVN W5, 0x21E
	0x0333E248 MOVZ W6, 0x220
	0x0333E24C MOVZ W7, 0x292E
	0x0333E250 MOV X20, X0
	0x0333E254 STR X31, [X31]
	0x0333E258 BL 0x3336724
	0x0333E25C CBZ X19, 0x333E2A8
	0x0333E260 CBZ X20, 0x333E278
	0x0333E264 LDR X8, [X19]
	0x0333E268 MOV X0, X20
	0x0333E26C LDR X1, [X8 + 0x40]
	0x0333E270 BL 0x1C16E00
	0x0333E274 CBZ X0, 0x333E2B0
	0x0333E278 LDR W8, [X19 + 0x18]
	0x0333E27C CBZ W8, 0x333E2AC
	0x0333E280 ADRP X8, 0xDEA000
	0x0333E284 LDR X8, [X8 + 0xBB8]
	0x0333E288 STR X20, [X19 + 0x20]
	0x0333E28C LDP X30, X21, [X31 + 0x10]
	0x0333E290 LDR X8, [X8]
	0x0333E294 LDR X8, [X8 + 0xB8]
	0x0333E298 STR X19, [X8]
	0x0333E29C LDP X20, X19, [X31 + 0x20]
	0x0333E2A0 ADD X31, X31, 0x30
	0x0333E2A4 RET
	0x0333E2A8 BL 0x1C16F20
	0x0333E2AC BL 0x1C16F28
	0x0333E2B0 BL 0x1C16F44
	0x0333E2B4 MOV X1, X31
	0x0333E2B8 BL 0x1C16DEC
	0x0333E2BC STR X30, [X31 - 0x40]!
	0x0333E2C0 STP X24, X23, [X31 + 0x10]
	0x0333E2C4 STP X22, X21, [X31 + 0x20]
	0x0333E2C8 STP X20, X19, [X31 + 0x30]
	0x0333E2CC ADRP X20, 0x109E000
	0x0333E2D0 ADRP X21, 0xDDD000
	0x0333E2D4 ADRP X19, 0xDEA000
	0x0333E2D8 LDRB W8, [X20 + 0xD45]
	0x0333E2DC LDR X21, [X21 + 0x820]
	0x0333E2E0 LDR X19, [X19 + 0xBD0]
	0x0333E2E4 TBNZ X8, 0x0, 0x333E314
	0x0333E2E8 ADRP X0, 0xDEA000
	0x0333E2EC LDR X0, [X0 + 0xBD8]
	0x0333E2F0 BL 0x1C16CF4
	0x0333E2F4 ADRP X0, 0xDDD000
	0x0333E2F8 LDR X0, [X0 + 0x820]
	0x0333E2FC BL 0x1C16CF4
	0x0333E300 ADRP X0, 0xDEA000
	0x0333E304 LDR X0, [X0 + 0xBD0]
	0x0333E308 BL 0x1C16CF4
	0x0333E30C MOVZ W8, 0x1
	0x0333E310 STRB W8, [X20 + 0xD45]
	0x0333E314 LDR X0, [X21]
	0x0333E318 MOVZ W1, 0x2E0
	0x0333E31C BL 0x1C16D6C
	0x0333E320 LDR X1, [X19]
	0x0333E324 MOV X2, X31
	0x0333E328 MOV X19, X0
	0x0333E32C BL 0x32C5BD8
	0x0333E330 CBZ X19, 0x333E41C
	0x0333E334 ADRP X9, 0xDEA000
	0x0333E338 LDR W8, [X19 + 0x18]
	0x0333E33C LDR X9, [X9 + 0xBD8]
	0x0333E340 CMP W8, 0x0
	0x0333E344 LDR X0, [X9]
	0x0333E348 ADD W9, W8, 0x3
	0x0333E34C CSEL W8, W9, W8, LT
	0x0333E350 SBFM W1, W8, 0x2, 0x1F
	0x0333E354 BL 0x1C16D6C
	0x0333E358 CBZ X0, 0x333E41C
	0x0333E35C LDR W8, [X0 + 0x18]
	0x0333E360 MOV X20, X0
	0x0333E364 CMP W8, 0x1
	0x0333E368 B.LT 0x333E400
	0x0333E36C MOV X21, X31
	0x0333E370 ADD X22, X20, 0x28
	0x0333E374 MOVZ W23, 0x3
	0x0333E378 LDR W11, [X19 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10A0000
	006 Move W8, [X21+3388]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xDEC000
	014 Move X0, [X0+2960]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3388], W8
	018 Move X8, [X20+40]
	019 Compare X8, 0
	020 JumpIfEqual {284}
	021 Move X0, [X8+88]
	022 Move X1, X31
	023 Call String.IsNullOrEmpty, X0
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {81}
	028 Subtract W8, W19, 224
	029 And W8, W8, 0xFFFF
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move TEMP, 0x1E00
	032 Not TEMP
	033 Move W8, TEMP
	034 Add W8, W19, W8
	035 And W8, W8, 0xFFFF
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move TEMP, 0x216F
	038 Not TEMP
	039 Move W8, TEMP
	040 Add W8, W19, W8
	041 And W8, W8, 0xFFFF
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move TEMP, 0x24CF
	044 Not TEMP
	045 Move W8, TEMP
	046 Add W8, W19, W8
	047 And W8, W8, 0xFFFF
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move TEMP, 0x2C2F
	050 Not TEMP
	051 Move W8, TEMP
	052 Add W8, W19, W8
	053 And W8, W8, 0xFFFF
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move TEMP, 0x2CFF
	056 Not TEMP
	057 Move W8, TEMP
	058 Add W8, W19, W8
	059 And W8, W8, 0xFFFF
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move W8, 0x59BF
	062 Add W8, W19, W8
	063 And W8, W8, 0xFFFF
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move W8, 0x58DD
	066 Add W8, W19, W8
	067 And W8, W8, 0xFFFF
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Add W8, W19, 191
	070 And W8, W8, 0xFFFF
	071 NotImplemented "Instruction CMP not yet implemented."
	072 And W8, W19, 0xFFFF
	073 Move W9, 0x1D79
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move W9, 0x1D7D
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move W9, 0x214E
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move W0, W19
	080 Move W0, 0x2132
	081 And W8, W19, 0xFFFF
	082 NotImplemented "Instruction CMP not yet implemented."
	083 NotImplemented "Instruction CMP not yet implemented."
	084 And W8, W19, 0xFFFF
	085 NotImplemented "Instruction CMP not yet implemented."
	086 NotImplemented "Instruction CMP not yet implemented."
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move W0, 83
	089 Move X20, 0xDEB000
	090 Move X20, [X20+2960]
	091 Move X0, [X20]
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {97}
	095 Call 0x1C17DFC
	096 Move X0, [X20]
	097 Move X8, [X0+184]
	098 Move X8, [X8]
	099 Compare X8, 0
	100 JumpIfEqual {284}
	101 Move W10, [X8+24]
	102 And X9, X19, 0xFFFF
	103 Subtract X9, X9, 224
	104 NotImplemented "Instruction CMP not yet implemented."
	105 And W8, W19, 0xFFFF
	106 NotImplemented "Instruction CMP not yet implemented."
	107 NotImplemented "Instruction CMP not yet implemented."
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Move W0, 931
	110 Move X20, 0xDEB000
	111 Move X20, [X20+2960]
	112 Move X0, [X20]
	113 Move W8, [X0+224]
	114 Compare W8, 0
	115 JumpIfNotEqual {118}
	116 Call 0x1C17DFC
	117 Move X0, [X20]
	118 Move X8, [X0+184]
	119 Move X8, [X8+8]
	120 Compare X8, 0
	121 JumpIfEqual {284}
	122 Move W10, [X8+24]
	123 Move TEMP, 0x1E00
	124 Not TEMP
	125 Move X9, TEMP
	126 And W8, W19, 0xFFFF
	127 NotImplemented "Instruction CMP not yet implemented."
	128 NotImplemented "Instruction CMP not yet implemented."
	129 NotImplemented "Instruction CMP not yet implemented."
	130 And W8, W19, 0xFFFF
	131 NotImplemented "Instruction CMP not yet implemented."
	132 NotImplemented "Instruction CMP not yet implemented."
	133 NotImplemented "Instruction CMP not yet implemented."
	134 Move W0, 917
	135 Move X20, 0xDEB000
	136 Move X20, [X20+2960]
	137 Move X0, [X20]
	138 Move W8, [X0+224]
	139 Compare W8, 0
	140 JumpIfNotEqual {143}
	141 Call 0x1C17DFC
	142 Move X0, [X20]
	143 Move X8, [X0+184]
	144 Move X8, [X8+16]
	145 Compare X8, 0
	146 JumpIfEqual {284}
	147 Move W10, [X8+24]
	148 Move TEMP, 0x216F
	149 Not TEMP
	150 Move X9, TEMP
	151 Subtract W9, W8, 976
	152 NotImplemented "Instruction CMP not yet implemented."
	153 Move X8, -41578496
	154 Add X8, X8, 1840
	155 NotImplemented "Instruction ADR not yet implemented."
	156 Move W11, [X8]
	157 Add X10, X10, X11
	158 Move W0, 920
	159 CallNoReturn X10
	160 Move W0, 914
	161 NotImplemented "Instruction CMP not yet implemented."
	162 NotImplemented "Instruction CMP not yet implemented."
	163 Subtract W0, W19, 1
	164 Move W9, 0x1E9B
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Move W9, 0x1FBE
	167 NotImplemented "Instruction CMP not yet implemented."
	168 Move W0, 921
	169 Move X20, 0xDEB000
	170 Move X20, [X20+2960]
	171 Move X0, [X20]
	172 Move W8, [X0+224]
	173 Compare W8, 0
	174 JumpIfNotEqual {177}
	175 Call 0x1C17DFC
	176 Move X0, [X20]
	177 Move X8, [X0+184]
	178 Move X8, [X8+24]
	179 Compare X8, 0
	180 JumpIfEqual {284}
	181 Move W10, [X8+24]
	182 Move TEMP, 0x24CF
	183 Not TEMP
	184 Move X9, TEMP
	185 Move W0, 924
	186 Move W0, 73
	187 Move W0, 929
	188 Move W0, 0x1E60
	189 Move X20, 0xDEB000
	190 Move X20, [X20+2960]
	191 Move X0, [X20]
	192 Move W8, [X0+224]
	193 Compare W8, 0
	194 JumpIfNotEqual {197}
	195 Call 0x1C17DFC
	196 Move X0, [X20]
	197 Move X8, [X0+184]
	198 Move X8, [X8+32]
	199 Compare X8, 0
	200 JumpIfEqual {284}
	201 Move W10, [X8+24]
	202 Move TEMP, 0x2C2F
	203 Not TEMP
	204 Move X9, TEMP
	205 NotImplemented "Instruction CMP not yet implemented."
	206 Move W0, 922
	207 Move X0, X20
	208 Call TextInfo.get_IsAsciiCasingSameAsInvariant, X0
	209 Move TEMP, X0
	210 And TEMP, TEMP, 1
	211 Compare TEMP, 1
	212 JumpIfEqual {28}
	213 And W8, W19, 0xFFFF
	214 NotImplemented "Instruction CMP not yet implemented."
	215 Move W0, 304
	216 NotImplemented "Instruction CMP not yet implemented."
	217 Subtract W8, W19, 97
	218 And W8, W8, 0xFFFF
	219 And W9, W19, 0xFFFFFFDF
	220 NotImplemented "Instruction CMP not yet implemented."
	221 NotImplemented "Instruction CSEL not yet implemented."
	222 Move W0, 934
	223 Move W0, 928
	224 Move X20, 0xDEB000
	225 Move X20, [X20+2960]
	226 Move X0, [X20]
	227 Move W8, [X0+224]
	228 Compare W8, 0
	229 JumpIfNotEqual {232}
	230 Call 0x1C17DFC
	231 Move X0, [X20]
	232 Move X8, [X0+184]
	233 Move X8, [X8+40]
	234 Compare X8, 0
	235 JumpIfEqual {284}
	236 Move W10, [X8+24]
	237 Move TEMP, 0x2CFF
	238 Not TEMP
	239 Move X9, TEMP
	240 Move X20, 0xDEB000
	241 Move X20, [X20+2960]
	242 Move X0, [X20]
	243 Move W8, [X0+224]
	244 Compare W8, 0
	245 JumpIfNotEqual {248}
	246 Call 0x1C17DFC
	247 Move X0, [X20]
	248 Move X8, [X0+184]
	249 Move X8, [X8+48]
	250 Compare X8, 0
	251 JumpIfEqual {284}
	252 Move W10, [X8+24]
	253 Move TEMP, 0xA640
	254 Not TEMP
	255 Move X9, TEMP
	256 Move X20, 0xDEB000
	257 Move X20, [X20+2960]
	258 Move X0, [X20]
	259 Move W8, [X0+224]
	260 Compare W8, 0
	261 JumpIfNotEqual {264}
	262 Call 0x1C17DFC
	263 Move X0, [X20]
	264 Move X8, [X0+184]
	265 Move X8, [X8+56]
	266 Compare X8, 0
	267 JumpIfEqual {284}
	268 Move W10, [X8+24]
	269 Move TEMP, 0xA722
	270 Not TEMP
	271 Move X9, TEMP
	272 Add X9, X9, W19
	273 NotImplemented "Instruction CMP not yet implemented."
	274 Add X8, X8, X9
	275 NotImplemented "Instruction LDRH not yet implemented."
	276 Move X20, [X31+16]
	277 Move X19, [X31+24]
	278 Move X30, [X31+32]
	279 Move X21, [X31+40]
	280 Return X0
	281 Subtract W0, W19, 32
	282 Move W0, 0xA77D
	283 Move W0, 0x2C63
	284 Call 0x1C17F20
	285 Call 0x1C17F28

Method: System.Char ToLowerInternal(System.Char c)

Disassembly:
	0x0333D8B4 BL 0x1C16F20
	0x0333D8B8 ADRP X0, 0xDBB000
	0x0333D8BC LDR X0, [X0 + 0x528]
	0x0333D8C0 BL 0x1C16D08
	0x0333D8C4 BL 0x1C16F10
	0x0333D8C8 MOV X19, X0
	0x0333D8CC ADRP X0, 0xDB8000
	0x0333D8D0 LDR X0, [X0 + 0xC80]
	0x0333D8D4 BL 0x1C16D08
	0x0333D8D8 MOV X1, X0
	0x0333D8DC MOV X0, X19
	0x0333D8E0 MOV X2, X31
	0x0333D8E4 BL 0x330E100
	0x0333D8E8 ADRP X0, 0xDEB000
	0x0333D8EC LDR X0, [X0 + 0xBA8]
	0x0333D8F0 BL 0x1C16D08
	0x0333D8F4 MOV X1, X0
	0x0333D8F8 MOV X0, X19
	0x0333D8FC BL 0x1C16DEC
	0x0333D900 STR X30, [X31 - 0x30]!
	0x0333D904 STP X22, X21, [X31 + 0x10]
	0x0333D908 STP X20, X19, [X31 + 0x20]
	0x0333D90C MOV W19, W3
	0x0333D910 MOV X22, X2
	0x0333D914 MOV X21, X1
	0x0333D918 CMP W4, 0x2
	0x0333D91C MOV X20, X0
	0x0333D920 B.NE 0x333D970
	0x0333D924 LDR X0, [X22]
	0x0333D928 CBZ X0, 0x333DA48
	0x0333D92C LDR X21, [X21]
	0x0333D930 MOVZ W2, 0x2
	0x0333D934 MOV W1, W19
	0x0333D938 MOV X3, X31
	0x0333D93C BL 0x3228DE4
	0x0333D940 LDR X8, [X20]
	0x0333D944 MOV X1, X0
	0x0333D948 MOV X0, X20
	0x0333D94C LDP X9, X2, [X8 + 0x1D8]
	0x0333D950 BLR X9
	0x0333D954 CBZ X21, 0x333DA48
	0x0333D958 MOV X1, X0
	0x0333D95C MOV X0, X21
	0x0333D960 MOV X2, X31
	0x0333D964 BL 0x32333E0
	0x0333D968 ADD W19, W19, 0x1
	0x0333D96C B 0x333DA34
	0x0333D970 LDR X0, [X22]
	0x0333D974 CBZ X0, 0x333DA48
	0x0333D978 MOV W1, W19
	0x0333D97C MOV X2, X31
	0x0333D980 BL 0x3222A1C
	0x0333D984 AND W8, W0, 0xFFFF
	0x0333D988 SUB W9, W8, 0x1C4
	0x0333D98C CMP W9, 0x8
	0x0333D990 B.HI 0x333D9DC
	0x0333D994 MOVZ W8, 0x1
	0x0333D998 LSLV W8, W8, W9
	0x0333D99C ANDS W31, W8, 0x7
	0x0333D9A0 B.NE 0x333D9BC
	0x0333D9A4 ANDS W31, W8, 0x38
	0x0333D9A8 B.EQ 0x333D9CC
	0x0333D9AC LDR X0, [X21]
	0x0333D9B0 CBZ X0, 0x333DA48
	0x0333D9B4 MOVZ W1, 0x1C8
	0x0333D9B8 B 0x333DA2C
	0x0333D9BC LDR X0, [X21]
	0x0333D9C0 CBZ X0, 0x333DA48
	0x0333D9C4 MOVZ W1, 0x1C5
	0x0333D9C8 B 0x333DA2C
	0x0333D9CC LDR X0, [X21]
	0x0333D9D0 CBZ X0, 0x333DA48
	0x0333D9D4 MOVZ W1, 0x1CB
	0x0333D9D8 B 0x333DA2C
	0x0333D9DC LDR X21, [X21]
	0x0333D9E0 SUB W8, W8, 0x1F1
	0x0333D9E4 CMP W8, 0x3
	0x0333D9E8 B.CS 0x333D9F8
	0x0333D9EC CBZ X21, 0x333DA48
	0x0333D9F0 MOVZ W1, 0x1F2
	0x0333D9F4 B 0x333DA28
	0x0333D9F8 LDR X0, [X22]
	0x0333D9FC CBZ X0, 0x333DA48
	0x0333DA00 MOV W1, W19
	0x0333DA04 MOV X2, X31
	0x0333DA08 BL 0x3222A1C
	0x0333DA0C LDR X8, [X20]
	0x0333DA10 MOV W1, W0
	0x0333DA14 MOV X0, X20
	0x0333DA18 LDP X9, X2, [X8 + 0x1C8]
	0x0333DA1C BLR X9
	0x0333DA20 CBZ X21, 0x333DA48
	0x0333DA24 MOV W1, W0
	0x0333DA28 MOV X0, X21
	0x0333DA2C MOV X2, X31
	0x0333DA30 BL 0x3233D30
	0x0333DA34 MOV W0, W19
	0x0333DA38 LDP X20, X19, [X31 + 0x20]
	0x0333DA3C LDP X22, X21, [X31 + 0x10]
	0x0333DA40 LDR X30, [X31], #0x30
	0x0333DA44 RET
	0x0333DA48 BL 0x1C16F20
	0x0333DA4C CMP W0, 0x5
	0x0333DA50 CSET W0, CC
	0x0333DA54 RET
	0x0333DA58 MOVZ W8, 0x1
	0x0333DA5C MOVZ W9, 0xF800
	0x0333DA60 LSLV W8, W8, W0
	0x0333DA64 MOVK W9, 0x1FFC0000
	0x0333DA68 ANDS W31, W8, W9, 0x0
	0x0333DA6C CSET W0, NE
	0x0333DA70 RET
	0x0333DA74 STR X30, [X31 - 0x30]!
	0x0333DA78 STP X22, X21, [X31 + 0x10]
	0x0333DA7C STP X20, X19, [X31 + 0x20]
	0x0333DA80 MOV X21, X0
	0x0333DA84 LDR X20, [X0]
	0x0333DA88 LDR X0, [X1]
	0x0333DA8C CMP W3, 0x2
	0x0333DA90 MOV W19, W2
	0x0333DA94 B.NE 0x333DAD4
	0x0333DA98 CBZ X0, 0x333DB0C
	0x0333DA9C MOV X22, X1
	0x0333DAA0 MOV W1, W19
	0x0333DAA4 MOV X2, X31
	0x0333DAA8 BL 0x3222A1C
	0x0333DAAC CBZ X20, 0x333DB0C
	0x0333DAB0 MOV W1, W0
	0x0333DAB4 MOV X0, X20
	0x0333DAB8 MOV X2, X31
	0x0333DABC BL 0x3233D30
	0x0333DAC0 LDR X0, [X22]
	0x0333DAC4 CBZ X0, 0x333DB0C
	0x0333DAC8 LDR X20, [X21]
	0x0333DACC ADD W19, W19, 0x1
	0x0333DAD0 B 0x333DAD8
	0x0333DAD4 CBZ X0, 0x333DB0C
	0x0333DAD8 MOV W1, W19
	0x0333DADC MOV X2, X31
	0x0333DAE0 BL 0x3222A1C
	0x0333DAE4 CBZ X20, 0x333DB0C
	0x0333DAE8 MOV W1, W0
	0x0333DAEC MOV X0, X20
	0x0333DAF0 MOV X2, X31
	0x0333DAF4 BL 0x3233D30
	0x0333DAF8 MOV W0, W19
	0x0333DAFC LDP X20, X19, [X31 + 0x20]
	0x0333DB00 LDP X22, X21, [X31 + 0x10]
	0x0333DB04 LDR X30, [X31], #0x30
	0x0333DB08 RET
	0x0333DB0C BL 0x1C16F20
	0x0333DB10 B 0x333C0E4
	0x0333DB14 STP X30, X23, [X31 - 0x30]!
	0x0333DB18 STP X22, X21, [X31 + 0x10]
	0x0333DB1C STP X20, X19, [X31 + 0x20]
	0x0333DB20 ADRP X23, 0x109F000
	0x0333DB24 LDRB W8, [X23 + 0xD3E]
	0x0333DB28 MOV X22, X4
	0x0333DB2C MOV X19, X3
	0x0333DB30 MOV X21, X2
	0x0333DB34 MOV X20, X1
	0x0333DB38 TBNZ X8, 0x0, 0x333DB50
	0x0333DB3C ADRP X0, 0xDE5000
	0x0333DB40 LDR X0, [X0 + 0x28]
	0x0333DB44 BL 0x1C16CF4
	0x0333DB48 MOVZ W8, 0x1
	0x0333DB4C STRB W8, [X23 + 0xD3E]
	0x0333DB50 CMP W21, 0x1
	0x0333DB54 B.LT 0x333DB88
	0x0333DB58 AND X8, X22, 0x0
	0x0333DB5C AND X9, X21, 0x0
	0x0333DB60 CBZ X8, 0x333DB98
	0x0333DB64 LDRH W10, [X20], #0x2
	0x0333DB68 SUB X8, X8, 0x1
	0x0333DB6C SUB W11, W10, 0x61
	0x0333DB70 AND W12, W10, 0xFFFFFFDF
	0x0333DB74 CMP W11, 0x19
	0x0333DB78 CSEL W10, W10, W12, HI
	0x0333DB7C SUBS X9, X9, 0x1
	0x0333DB80 STRH W10, [X19], #0x2
	0x0333DB84 B.NE 0x333DB60
	0x0333DB88 LDP X20, X19, [X31 + 0x20]
	0x0333DB8C LDP X22, X21, [X31 + 0x10]
	0x0333DB90 LDP X30, X23, [X31], #0x30
	0x0333DB94 RET
	0x0333DB98 BL 0x1C16F28
	0x0333DB9C SUB X31, X31, 0x50
	0x0333DBA0 STP X2, X30, [X31 + 0x8]
	0x0333DBA4 STP X24, X23, [X31 + 0x20]
	0x0333DBA8 STP X22, X21, [X31 + 0x30]
	0x0333DBAC STP X20, X19, [X31 + 0x40]
	0x0333DBB0 ADRP X20, 0x109F000
	0x0333DBB4 STR X1, [X31]
	0x0333DBB8 ADRP X24, 0xDEB000
	0x0333DBBC LDRB W8, [X20 + 0xD3F]
	0x0333DBC0 LDR X24, [X24 + 0x560]
	0x0333DBC4 MOV W22, W5
	0x0333DBC8 MOV X21, X4
	0x0333DBCC MOV X23, X3
	0x0333DBD0 MOV X19, X0
	0x0333DBD4 TBNZ X8, 0x0, 0x333DC10
	0x0333DBD8 ADRP X0, 0xDE5000
	0x0333DBDC LDR X0, [X0 + 0x2C8]
	0x0333DBE0 BL 0x1C16CF4
	0x0333DBE4 ADRP X0, 0xDE5000
	0x0333DBE8 LDR X0, [X0 + 0x20]
	0x0333DBEC BL 0x1C16CF4
	0x0333DBF0 ADRP X0, 0xDEB000
	0x0333DBF4 LDR X0, [X0 + 0x560]
	0x0333DBF8 BL 0x1C16CF4
	0x0333DBFC ADRP X0, 0xDE5000
	0x0333DC00 LDR X0, [X0 + 0x28]
	0x0333DC04 BL 0x1C16CF4
	0x0333DC08 MOVZ W8, 0x1
	0x0333DC0C STRB W8, [X20 + 0xD3F]
	0x0333DC10 LDR X1, [X24]
	0x0333DC14 ADD X0, X31, 0x0
	0x0333DC18 BL 0x25BF094
	0x0333DC1C TBNZ X0, 0x0, 0x333DCC4
	0x0333DC20 ADRP X8, 0xDE5000
	0x0333DC24 LDP X0, X1, [X31]
	0x0333DC28 LDR X8, [X8 + 0x20]
	0x0333DC2C LDR X2, [X8]
	0x0333DC30 BL 0x2218CF8
	0x0333DC34 ADRP X8, 0xDE5000
	0x0333DC38 LDR X8, [X8 + 0x2C8]
	0x0333DC3C MOV X20, X0
	0x0333DC40 MOV X0, X23
	0x0333DC44 MOV X1, X21
	0x0333DC48 LDR X2, [X8]
	0x0333DC4C BL 0x2218CFC
	0x0333DC50 LDR W8, [X31 + 0x8]
	0x0333DC54 MOV X21, X0
	0x0333DC58 CMP W8, 0x1
	0x0333DC5C TBZ X22, 0x0, 0x333DC94
	0x0333DC60 B.LT 0x333DCC4
	0x0333DC64 MOV W22, W31
	0x0333DC68 LDR X8, [X19]
	0x0333DC6C MOV X0, X19
	0x0333DC70 LDP X9, X2, [X8 + 0x1C8]
	0x0333DC74 LDRH W1, [X20], #0x2
	0x0333DC78 BLR X9
	0x0333DC7C STRH W0, [X21], #0x2
	0x0333DC80 LDR W8, [X31 + 0x8]
	0x0333DC84 ADD W22, W22, 0x1
	0x0333DC88 CMP W22, W8
	0x0333DC8C B.LT 0x333DC68
	0x0333DC90 B 0x333DCC4
	0x0333DC94 B.LT 0x333DCC4
	0x0333DC98 MOV W22, W31
	0x0333DC9C LDR X8, [X19]
	0x0333DCA0 MOV X0, X19
	0x0333DCA4 LDP X9, X2, [X8 + 0x1A8]
	0x0333DCA8 LDRH W1, [X20], #0x2
	0x0333DCAC BLR X9
	0x0333DCB0 STRH W0, [X21], #0x2
	0x0333DCB4 LDR W8, [X31 + 0x8]
	0x0333DCB8 ADD W22, W22, 0x1
	0x0333DCBC CMP W22, W8
	0x0333DCC0 B.LT 0x333DC9C
	0x0333DCC4 LDP X20, X19, [X31 + 0x40]
	0x0333DCC8 LDP X22, X21, [X31 + 0x30]
	0x0333DCCC LDP X24, X23, [X31 + 0x20]
	0x0333DCD0 LDR X30, [X31 + 0x10]
	0x0333DCD4 ADD X31, X31, 0x50
	0x0333DCD8 RET
	0x0333DCDC STR X30, [X31 - 0x20]!
	0x0333DCE0 STP X20, X19, [X31 + 0x10]
	0x0333DCE4 ADRP X19, 0x109F000
	0x0333DCE8 ADRP X20, 0xDEB000
	0x0333DCEC LDRB W8, [X19 + 0xD40]
	0x0333DCF0 LDR X20, [X20 + 0xBB0]
	0x0333DCF4 TBNZ X8, 0x0, 0x333DD0C
	0x0333DCF8 ADRP X0, 0xDEB000
	0x0333DCFC LDR X0, [X0 + 0xBB0]
	0x0333DD00 BL 0x1C16CF4
	0x0333DD04 MOVZ W8, 0x1
	0x0333DD08 STRB W8, [X19 + 0xD40]
	0x0333DD0C LDR X0, [X20]
	0x0333DD10 BL 0x1C16D9C
	0x0333DD14 STR X30, [X31 - 0x20]!
	0x0333DD18 STP X20, X19, [X31 + 0x10]
	0x0333DD1C ADRP X20, 0x109F000
	0x0333DD20 ADRP X19, 0xDB7000
	0x0333DD24 LDRB W8, [X20 + 0xD41]
	0x0333DD28 LDR X19, [X19 + 0x9F0]
	0x0333DD2C TBNZ X8, 0x0, 0x333DD44
	0x0333DD30 ADRP X0, 0xDB7000
	0x0333DD34 LDR X0, [X0 + 0x9F0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10A0000
	006 Move W8, [X21+3389]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xDEC000
	014 Move X0, [X0+2944]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3389], W8
	018 Move X8, [X20+40]
	019 Compare X8, 0
	020 JumpIfEqual {293}
	021 Move X0, [X8+88]
	022 Move X1, X31
	023 Call String.IsNullOrEmpty, X0
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {63}
	028 Subtract W8, W19, 192
	029 And W8, W8, 0xFFFF
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move TEMP, 0x109F
	032 Not TEMP
	033 Move W8, TEMP
	034 Add W8, W19, W8
	035 And W8, W8, 0xFFFF
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move TEMP, 0x1DFF
	038 Not TEMP
	039 Move W8, TEMP
	040 Add W8, W19, W8
	041 And W8, W8, 0xFFFF
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move W8, W19
	044 ShiftRight W8, 4
	045 And W8, W8, 0x7FFF
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X20, 0xDEC000
	048 Move X20, [X20+2944]
	049 Move X0, [X20]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {55}
	053 Call 0x1C17DFC
	054 Move X0, [X20]
	055 Move X8, [X0+184]
	056 Move X8, [X8+24]
	057 Compare X8, 0
	058 JumpIfEqual {293}
	059 Move W10, [X8+24]
	060 Move TEMP, 0x215F
	061 Not TEMP
	062 Move X9, TEMP
	063 And W8, W19, 0xFFFF
	064 NotImplemented "Instruction CMP not yet implemented."
	065 NotImplemented "Instruction CMP not yet implemented."
	066 And W8, W19, 0xFFFF
	067 NotImplemented "Instruction CMP not yet implemented."
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move X20, 0xDEC000
	070 Move X20, [X20+2944]
	071 Move X0, [X20]
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {77}
	075 Call 0x1C17DFC
	076 Move X0, [X20]
	077 Move X8, [X0+184]
	078 Move X8, [X8]
	079 Compare X8, 0
	080 JumpIfEqual {293}
	081 Move W10, [X8+24]
	082 And X9, X19, 0xFFFF
	083 Subtract X9, X9, 192
	084 Move W8, 0x1E9E
	085 NotImplemented "Instruction CMP not yet implemented."
	086 And W8, W19, 0xFFFF
	087 NotImplemented "Instruction CMP not yet implemented."
	088 NotImplemented "Instruction CMP not yet implemented."
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move W9, 0x1E9E
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move W19, 223
	093 Move X20, 0xDEC000
	094 Move X20, [X20+2944]
	095 Move X0, [X20]
	096 Move W8, [X0+224]
	097 Compare W8, 0
	098 JumpIfNotEqual {101}
	099 Call 0x1C17DFC
	100 Move X0, [X20]
	101 Move X8, [X0+184]
	102 Move X8, [X8+8]
	103 Compare X8, 0
	104 JumpIfEqual {293}
	105 Move W10, [X8+24]
	106 Move TEMP, 0x109F
	107 Not TEMP
	108 Move X9, TEMP
	109 And W8, W19, 0xFFFF
	110 Subtract W8, W8, 456
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Move W9, 1
	113 NotImplemented "Instruction LSLV not yet implemented."
	114 Move X9, 9
	115 NotImplemented "Instruction MOVK not yet implemented."
	116 And X31, X8, X9
	117 Add W19, W19, 1
	118 And W8, W19, 0xFFFF
	119 Move W9, 0x2126
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move W9, 0x212A
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move W9, 0x212B
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move W19, 229
	126 Move X20, 0xDEC000
	127 Move X20, [X20+2944]
	128 Move X0, [X20]
	129 Move W8, [X0+224]
	130 Compare W8, 0
	131 JumpIfNotEqual {134}
	132 Call 0x1C17DFC
	133 Move X0, [X20]
	134 Move X8, [X0+184]
	135 Move X8, [X8+16]
	136 Compare X8, 0
	137 JumpIfEqual {293}
	138 Move W10, [X8+24]
	139 Move TEMP, 0x1DFF
	140 Not TEMP
	141 Move X9, TEMP
	142 NotImplemented "Instruction CMP not yet implemented."
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Move W19, 973
	145 Move X0, X20
	146 Call TextInfo.get_IsAsciiCasingSameAsInvariant, X0
	147 Move TEMP, X0
	148 And TEMP, TEMP, 1
	149 Compare TEMP, 1
	150 JumpIfEqual {28}
	151 And W8, W19, 0xFFFF
	152 NotImplemented "Instruction CMP not yet implemented."
	153 Move W19, 305
	154 Move W19, 105
	155 Move TEMP, 0x24B5
	156 Not TEMP
	157 Move W8, TEMP
	158 Add W8, W19, W8
	159 And W8, W8, 0xFFFF
	160 NotImplemented "Instruction CMP not yet implemented."
	161 Move TEMP, 0x2BFF
	162 Not TEMP
	163 Move W8, TEMP
	164 Add W8, W19, W8
	165 And W8, W8, 0xFFFF
	166 NotImplemented "Instruction CMP not yet implemented."
	167 Move TEMP, 0x2C5F
	168 Not TEMP
	169 Move W8, TEMP
	170 Add W8, W19, W8
	171 And W8, W8, 0xFFFF
	172 NotImplemented "Instruction CMP not yet implemented."
	173 Move W8, 0x59C0
	174 Add W8, W19, W8
	175 And W8, W8, 0xFFFF
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Move W8, 0x58DE
	178 Add W8, W19, W8
	179 And W8, W8, 0xFFFF
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Add W8, W19, 223
	182 And W8, W8, 0xFFFF
	183 NotImplemented "Instruction CMP not yet implemented."
	184 And W8, W19, 0xFFFF
	185 Move W9, 0x2132
	186 NotImplemented "Instruction CMP not yet implemented."
	187 Move W9, 0x2183
	188 NotImplemented "Instruction CMP not yet implemented."
	189 Move W19, 0x2184
	190 Move W19, 969
	191 Move W19, 107
	192 NotImplemented "Instruction CMP not yet implemented."
	193 Subtract W8, W19, 65
	194 And W8, W8, 0xFFFF
	195 Or W9, W19, 32
	196 NotImplemented "Instruction CMP not yet implemented."
	197 NotImplemented "Instruction CSEL not yet implemented."
	198 Move W19, 971
	199 Move W19, 952
	200 Move W19, 965
	201 Move X20, 0xDEC000
	202 Move X20, [X20+2944]
	203 Move X0, [X20]
	204 Move W8, [X0+224]
	205 Compare W8, 0
	206 JumpIfNotEqual {209}
	207 Call 0x1C17DFC
	208 Move X0, [X20]
	209 Move X8, [X0+184]
	210 Move X8, [X8+32]
	211 Compare X8, 0
	212 JumpIfEqual {293}
	213 Move W10, [X8+24]
	214 Move TEMP, 0x24B5
	215 Not TEMP
	216 Move X9, TEMP
	217 Move X20, 0xDEC000
	218 Move X20, [X20+2944]
	219 Move X0, [X20]
	220 Move W8, [X0+224]
	221 Compare W8, 0
	222 JumpIfNotEqual {225}
	223 Call 0x1C17DFC
	224 Move X0, [X20]
	225 Move X8, [X0+184]
	226 Move X8, [X8+40]
	227 Compare X8, 0
	228 JumpIfEqual {293}
	229 Move W10, [X8+24]
	230 Move TEMP, 0x2BFF
	231 Not TEMP
	232 Move X9, TEMP
	233 Move X20, 0xDEC000
	234 Move X20, [X20+2944]
	235 Move X0, [X20]
	236 Move W8, [X0+224]
	237 Compare W8, 0
	238 JumpIfNotEqual {241}
	239 Call 0x1C17DFC
	240 Move X0, [X20]
	241 Move X8, [X0+184]
	242 Move X8, [X8+48]
	243 Compare X8, 0
	244 JumpIfEqual {293}
	245 Move W10, [X8+24]
	246 Move TEMP, 0x2C5F
	247 Not TEMP
	248 Move X9, TEMP
	249 Move X20, 0xDEC000
	250 Move X20, [X20+2944]
	251 Move X0, [X20]
	252 Move W8, [X0+224]
	253 Compare W8, 0
	254 JumpIfNotEqual {257}
	255 Call 0x1C17DFC
	256 Move X0, [X20]
	257 Move X8, [X0+184]
	258 Move X8, [X8+56]
	259 Compare X8, 0
	260 JumpIfEqual {293}
	261 Move W10, [X8+24]
	262 Move TEMP, 0xA63F
	263 Not TEMP
	264 Move X9, TEMP
	265 Move X20, 0xDEC000
	266 Move X20, [X20+2944]
	267 Move X0, [X20]
	268 Move W8, [X0+224]
	269 Compare W8, 0
	270 JumpIfNotEqual {273}
	271 Call 0x1C17DFC
	272 Move X0, [X20]
	273 Move X8, [X0+184]
	274 Move X8, [X8+64]
	275 Compare X8, 0
	276 JumpIfEqual {293}
	277 Move W10, [X8+24]
	278 Move TEMP, 0xA721
	279 Not TEMP
	280 Move X9, TEMP
	281 Add X9, X9, W19
	282 NotImplemented "Instruction CMP not yet implemented."
	283 Add X8, X8, X9
	284 NotImplemented "Instruction LDRH not yet implemented."
	285 Move W0, W19
	286 Move X20, [X31+16]
	287 Move X19, [X31+24]
	288 Move X30, [X31+32]
	289 Move X21, [X31+40]
	290 Return X0
	291 Add W19, W19, 32
	292 Move W19, 0x214E
	293 Call 0x1C17F20
	294 Call 0x1C17F28

Method: System.Void ToUpperAsciiInvariant(System.ReadOnlySpan`1<System.Char> source, System.Span`1<System.Char> destination)

Disassembly:
	0x0333EB14 TBNZ X8, 0x0, 0x333EB2C
	0x0333EB18 ADRP X0, 0xDEA000
	0x0333EB1C LDR X0, [X0 + 0xBE0]
	0x0333EB20 BL 0x1C16CF4
	0x0333EB24 MOVZ W8, 0x1
	0x0333EB28 STRB W8, [X22 + 0xD4C]
	0x0333EB2C LDR X0, [X23]
	0x0333EB30 LDR W8, [X0 + 0xE0]
	0x0333EB34 CBNZ W8, 0x333EB3C
	0x0333EB38 BL 0x1C16DFC
	0x0333EB3C MOV W0, W21
	0x0333EB40 MOV W1, W20
	0x0333EB44 BL 0x333E9A8
	0x0333EB48 SUB W8, W19, 0x1
	0x0333EB4C CMP W8, 0xC
	0x0333EB50 B.CS 0x333EB64
	0x0333EB54 LDP X20, X19, [X31 + 0x20]
	0x0333EB58 LDP X22, X21, [X31 + 0x10]
	0x0333EB5C LDP X30, X23, [X31], #0x30
	0x0333EB60 RET
	0x0333EB64 ADRP X0, 0xDEA000
	0x0333EB68 LDR X0, [X0 + 0x8C8]
	0x0333EB6C BL 0x1C16D08
	0x0333EB70 MOV X1, X31
	0x0333EB74 BL 0x33BDD84
	0x0333EB78 MOV X19, X0
	0x0333EB7C ADRP X0, 0xDBD000
	0x0333EB80 LDR X0, [X0 + 0x760]
	0x0333EB84 BL 0x1C16D08
	0x0333EB88 BL 0x1C16F10
	0x0333EB8C MOV X20, X0
	0x0333EB90 ADRP X0, 0xDE9000
	0x0333EB94 LDR X0, [X0 + 0xDA8]
	0x0333EB98 BL 0x1C16D08

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x109F000
	008 Move W8, [X23+3390]
	009 Move X22, X4
	010 Move X19, X3
	011 Move X21, X2
	012 Move X20, X1
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xDE5000
	018 Move X0, [X0+40]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+3390], W8
	022 NotImplemented "Instruction CMP not yet implemented."
	023 And X8, X22, 0
	024 And X9, X21, 0
	025 Compare X8, 0
	026 JumpIfEqual {42}
	027 NotImplemented "Instruction LDRH not yet implemented."
	028 Subtract X8, X8, 1
	029 Subtract W11, W10, 97
	030 And W12, W10, 0xFFFFFFDF
	031 NotImplemented "Instruction CMP not yet implemented."
	032 NotImplemented "Instruction CSEL not yet implemented."
	033 Subtract X9, X9, 1
	034 NotImplemented "Instruction STRH not yet implemented."
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Move X23, [X31+56]
	041 Return 
	042 Call 0x1C17F28

Method: System.Void ChangeCase(System.ReadOnlySpan`1<System.Char> source, System.Span`1<System.Char> destination, System.Boolean toUpper)

Disassembly:
	0x0333EB9C MOV X1, X0
	0x0333EBA0 MOV X0, X20
	0x0333EBA4 MOV X2, X19
	0x0333EBA8 MOV X3, X31
	0x0333EBAC BL 0x3311888
	0x0333EBB0 ADRP X0, 0xDEA000
	0x0333EBB4 LDR X0, [X0 + 0xC00]
	0x0333EBB8 BL 0x1C16D08
	0x0333EBBC MOV X1, X0
	0x0333EBC0 MOV X0, X20
	0x0333EBC4 BL 0x1C16DEC
	0x0333EBC8 SUB X31, X31, 0x60
	0x0333EBCC STP X30, X27, [X31 + 0x10]
	0x0333EBD0 STP X26, X25, [X31 + 0x20]
	0x0333EBD4 STP X24, X23, [X31 + 0x30]
	0x0333EBD8 STP X22, X21, [X31 + 0x40]
	0x0333EBDC STP X20, X19, [X31 + 0x50]
	0x0333EBE0 ADRP X22, 0x109E000
	0x0333EBE4 STR X0, [X31 + 0x8]
	0x0333EBE8 ADRP X24, 0xDB6000
	0x0333EBEC LDRB W8, [X22 + 0xD4D]
	0x0333EBF0 LDR X24, [X24 + 0x9F0]
	0x0333EBF4 MOV X21, X3
	0x0333EBF8 MOV X20, X2
	0x0333EBFC MOV X19, X1
	0x0333EC00 TBNZ X8, 0x0, 0x333EC30
	0x0333EC04 ADRP X0, 0xDB6000
	0x0333EC08 LDR X0, [X0 + 0x9F0]
	0x0333EC0C BL 0x1C16CF4
	0x0333EC10 ADRP X0, 0xDB7000
	0x0333EC14 LDR X0, [X0 + 0x570]
	0x0333EC18 BL 0x1C16CF4
	0x0333EC1C ADRP X0, 0xDEA000
	0x0333EC20 LDR X0, [X0 + 0xBE0]
	0x0333EC24 BL 0x1C16CF4
	0x0333EC28 MOVZ W8, 0x1
	0x0333EC2C STRB W8, [X22 + 0xD4D]
	0x0333EC30 LDR X0, [X24]
	0x0333EC34 STR X31, [X31]
	0x0333EC38 ADRP X23, 0xDEA000
	0x0333EC3C LDR W8, [X0 + 0xE0]
	0x0333EC40 LDR X23, [X23 + 0xBE0]
	0x0333EC44 CBNZ W8, 0x333EC4C
	0x0333EC48 BL 0x1C16DFC
	0x0333EC4C ADD X0, X31, 0x8
	0x0333EC50 MOV X1, X31
	0x0333EC54 BL 0x3361708
	0x0333EC58 LDR X8, [X23]
	0x0333EC5C MOV X22, X0
	0x0333EC60 LDR W9, [X8 + 0xE0]
	0x0333EC64 CBNZ W9, 0x333EC74
	0x0333EC68 MOV X0, X8
	0x0333EC6C BL 0x1C16DFC
	0x0333EC70 LDR X8, [X23]
	0x0333EC74 LDR X8, [X8 + 0xB8]
	0x0333EC78 ADRP X25, 0xDB7000
	0x0333EC7C LDR X25, [X25 + 0x570]
	0x0333EC80 MOV X1, X31
	0x0333EC84 ADD X0, X8, 0x8
	0x0333EC88 BL 0x3361708
	0x0333EC8C MOVZ X9, 0x81E3
	0x0333EC90 MOVK X9, 0xE2050000
	0x0333EC94 MOVK X9, 0xFF1D
	0x0333EC98 SUB X8, X22, X0
	0x0333EC9C MOVK X9, 0xA2E30000
	0x0333ECA0 SMULH X9, X8, X9, X31
	0x0333ECA4 ADD X8, X9, X8
	0x0333ECA8 MOVZ W10, 0xE1B7
	0x0333ECAC SBFM X9, X8, 0x27, 0x3F
	0x0333ECB0 MOVK W10, 0x5C4D0000
	0x0333ECB4 ADD X8, X9, X8, 0x3F, LSR
	0x0333ECB8 MUL X8, X8, X10
	0x0333ECBC UBFM X9, X8, 0x3F, 0x3F
	0x0333ECC0 SBFM X8, X8, 0x27, 0x3F
	0x0333ECC4 ADD W26, W8, W9
	0x0333ECC8 LDR X0, [X23]
	0x0333ECCC LDR W8, [X0 + 0xE0]
	0x0333ECD0 CBNZ W8, 0x333ECDC
	0x0333ECD4 BL 0x1C16DFC
	0x0333ECD8 LDR X0, [X23]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+8], X2
	003 Move [X31+16], X30
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x109F000
	011 Move [X31], X1
	012 Move X24, 0xDEB000
	013 Move W8, [X20+3391]
	014 Move X24, [X24+1376]
	015 Move W22, W5
	016 Move X21, X4
	017 Move X23, X3
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0xDE5000
	024 Move X0, [X0+712]
	025 Call 0x1C17CF4
	026 Move X0, 0xDE5000
	027 Move X0, [X0+32]
	028 Call 0x1C17CF4
	029 Move X0, 0xDEB000
	030 Move X0, [X0+1376]
	031 Call 0x1C17CF4
	032 Move X0, 0xDE5000
	033 Move X0, [X0+40]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3391], W8
	037 Move X1, [X24]
	038 Add X0, X31, 0
	039 Call ReadOnlySpan`1<Char>.get_IsEmpty, X0
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfEqual {86}
	044 Move X8, 0xDE5000
	045 Move X0, [X31]
	046 Move X1, [X31+8]
	047 Move X8, [X8+32]
	048 Move X2, [X8]
	049 Call MemoryMarshal.GetReference, X0
	050 Move X8, 0xDE5000
	051 Move X8, [X8+712]
	052 Move X20, X0
	053 Move X0, X23
	054 Move X1, X21
	055 Move X2, [X8]
	056 Call MemoryMarshal.GetReference, X0
	057 Move W8, [X31+8]
	058 Move X21, X0
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move TEMP, X22
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 Invalid "Jump target not found in method."
	064 Move W22, W31
	065 Move X8, [X19]
	066 Move X0, X19
	067 Move X9, [X8+456]
	068 Move X2, [X8+464]
	069 NotImplemented "Instruction LDRH not yet implemented."
	070 NotImplemented "Instruction BLR not yet implemented."
	071 NotImplemented "Instruction STRH not yet implemented."
	072 Move W8, [X31+8]
	073 Add W22, W22, 1
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move W22, W31
	076 Move X8, [X19]
	077 Move X0, X19
	078 Move X9, [X8+424]
	079 Move X2, [X8+432]
	080 NotImplemented "Instruction LDRH not yet implemented."
	081 NotImplemented "Instruction BLR not yet implemented."
	082 NotImplemented "Instruction STRH not yet implemented."
	083 Move W8, [X31+8]
	084 Add W22, W22, 1
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X20, [X31+64]
	087 Move X19, [X31+72]
	088 Move X22, [X31+48]
	089 Move X21, [X31+56]
	090 Move X24, [X31+32]
	091 Move X23, [X31+40]
	092 Move X30, [X31+16]
	093 Add X31, X31, 80
	094 Return 

Method: System.Void .ctor()

Disassembly:
	0x0333ECDC LDR X8, [X0 + 0xB8]
	0x0333ECE0 LDR X8, [X8]
	0x0333ECE4 CBZ X8, 0x333EEAC
	0x0333ECE8 LDR W9, [X8 + 0x18]
	0x0333ECEC ADD W26, W26, 0x1
	0x0333ECF0 CMP W26, W9
	0x0333ECF4 B.CS 0x333EEB0
	0x0333ECF8 LDR X0, [X24]
	0x0333ECFC SXTW X27, W26
	0x0333ED00 ADD X8, X8, X27, 0x4, LSL
	0x0333ED04 LDR X22, [X8 + 0x28]
	0x0333ED08 LDR W9, [X0 + 0xE0]
	0x0333ED0C CBNZ W9, 0x333ED14
	0x0333ED10 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x109F000
	005 Move X20, 0xDEB000
	006 Move W8, [X19+3392]
	007 Move X20, [X20+2992]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xDEB000
	013 Move X0, [X0+2992]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3392], W8
	017 Move X0, [X20]
	018 Call 0x1C17D9C

