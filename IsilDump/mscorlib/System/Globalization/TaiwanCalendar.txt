Type: System.Globalization.TaiwanCalendar

Method: System.Globalization.Calendar GetDefaultInstance()

Disassembly:
	0x0333C4C8 ADD X2, X31, 0x18
	0x0333C4CC MOV X1, X20
	0x0333C4D0 BL 0x2AA6B2C
	0x0333C4D4 TBNZ X0, 0x0, 0x333C514
	0x0333C4D8 LDR X8, [X22]
	0x0333C4DC MOV X0, X8
	0x0333C4E0 BL 0x1C16F10
	0x0333C4E4 MOV X21, X0
	0x0333C4E8 MOVZ W3, 0x1
	0x0333C4EC MOV X1, X20
	0x0333C4F0 MOV W2, W31
	0x0333C4F4 BL 0x3348BD8
	0x0333C4F8 LDR X0, [X22]
	0x0333C4FC STR X21, [X31 + 0x18]
	0x0333C500 LDR W8, [X0 + 0xE0]
	0x0333C504 CBNZ W8, 0x333C50C
	0x0333C508 BL 0x1C16DFC
	0x0333C50C MOV X0, X21
	0x0333C510 BL 0x3348FB0
	0x0333C514 LDR X21, [X31 + 0x18]
	0x0333C518 MOV X20, X31
	0x0333C51C LDRB W8, [X31 + 0xC]
	0x0333C520 CBZ W8, 0x333C530
	0x0333C524 MOV X0, X19
	0x0333C528 MOV X1, X31
	0x0333C52C BL 0x33E14E4
	0x0333C530 CBNZ X20, 0x333C594
	0x0333C534 MOV X0, X21
	0x0333C538 LDP X20, X19, [X31 + 0x30]
	0x0333C53C LDP X22, X21, [X31 + 0x20]
	0x0333C540 LDR X30, [X31 + 0x10]
	0x0333C544 ADD X31, X31, 0x40
	0x0333C548 RET
	0x0333C54C ADRP X0, 0xDBC000
	0x0333C550 LDR X0, [X0 + 0x528]
	0x0333C554 BL 0x1C16D08
	0x0333C558 BL 0x1C16F10
	0x0333C55C MOV X19, X0
	0x0333C560 ADRP X0, 0xDBF000
	0x0333C564 LDR X0, [X0 + 0x588]
	0x0333C568 BL 0x1C16D08
	0x0333C56C MOV X1, X0
	0x0333C570 MOV X0, X19
	0x0333C574 MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x10A1000
	005 Move X20, 0xDED000
	006 Move W8, [X19+3373]
	007 Move X20, [X20+1048]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xDED000
	013 Move X0, [X0+1048]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3373], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X20]
	023 Move X8, [X0+184]
	024 Move X19, [X8+8]
	025 Call 0x1C17D44
	026 Move X0, [X20]
	027 Compare X19, 0
	028 JumpIfNotEqual {41}
	029 Call 0x1C17F10
	030 Move X19, X0
	031 Call TaiwanCalendar..ctor, X0
	032 Move X0, [X20]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Call 0x1C17D44
	038 Move X0, [X20]
	039 Move X8, [X0+184]
	040 Move [X8+8], X19
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {46}
	044 Call 0x1C17DFC
	045 Move X0, [X20]
	046 Move X8, [X0+184]
	047 Move X19, [X8+8]
	048 Call 0x1C17D44
	049 Move X0, X19
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move X30, [X31+32]
	053 Return X0

Method: System.DateTime get_MinSupportedDateTime()

Disassembly:
	0x0333C72C STR X30, [X31 - 0x20]!
	0x0333C730 STP X20, X19, [X31 + 0x10]
	0x0333C734 AND W8, W1, 0xFFFF
	0x0333C738 MOV W19, W1
	0x0333C73C CMP W8, 0x7F
	0x0333C740 MOV X20, X0
	0x0333C744 B.HI 0x333C774
	0x0333C748 MOV X0, X20
	0x0333C74C BL 0x333C798
	0x0333C750 TBZ X0, 0x0, 0x333C774
	0x0333C754 SUB W8, W19, 0x41
	0x0333C758 AND W8, W8, 0xFFFF
	0x0333C75C ORR W9, W19, 0x20
	0x0333C760 CMP W8, 0x19
	0x0333C764 CSEL W0, W19, W9, HI
	0x0333C768 LDP X20, X19, [X31 + 0x10]
	0x0333C76C LDR X30, [X31], #0x20
	0x0333C770 RET
	0x0333C774 MOV X0, X20
	0x0333C778 MOV W1, W19
	0x0333C77C LDP X20, X19, [X31 + 0x10]
	0x0333C780 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10A1000
	005 Move X19, 0xDED000
	006 Move W8, [X20+3374]
	007 Move X19, [X19+1048]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xDED000
	013 Move X0, [X0+1048]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3374], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8+16]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.DateTime get_MaxSupportedDateTime()

Disassembly:
	0x0333C784 B 0x333C8B4
	0x0333C788 AND W8, W0, 0xFFFF
	0x0333C78C CMP W8, 0x80
	0x0333C790 CSET W0, CC
	0x0333C794 RET
	0x0333C798 STR X30, [X31 - 0x20]!
	0x0333C79C STP X20, X19, [X31 + 0x10]
	0x0333C7A0 ADRP X20, 0x10A0000
	0x0333C7A4 LDRB W8, [X20 + 0xD36]
	0x0333C7A8 MOV X19, X0
	0x0333C7AC TBNZ X8, 0x0, 0x333C7F4
	0x0333C7B0 ADRP X0, 0xDBB000
	0x0333C7B4 LDR X0, [X0 + 0xFD8]
	0x0333C7B8 BL 0x1C16CF4
	0x0333C7BC ADRP X0, 0xDBB000
	0x0333C7C0 LDR X0, [X0 + 0xBF0]
	0x0333C7C4 BL 0x1C16CF4
	0x0333C7C8 ADRP X0, 0xDBB000
	0x0333C7CC LDR X0, [X0 + 0xBF8]
	0x0333C7D0 BL 0x1C16CF4
	0x0333C7D4 ADRP X0, 0xDEC000
	0x0333C7D8 LDR X0, [X0 + 0xB70]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x10A1000
	005 Move X19, 0xDB9000
	006 Move W8, [X20+3375]
	007 Move X19, [X19+2544]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xDB9000
	013 Move X0, [X0+2544]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3375], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8+24]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Void .ctor()

Disassembly:
	0x0333C578 BL 0x330E100
	0x0333C57C ADRP X0, 0xDEC000
	0x0333C580 LDR X0, [X0 + 0xB68]
	0x0333C584 BL 0x1C16D08
	0x0333C588 MOV X1, X0
	0x0333C58C MOV X0, X19
	0x0333C590 BL 0x1C16DEC
	0x0333C594 MOV X0, X20
	0x0333C598 BL 0x1C16F18
	0x0333C59C BL 0x1C16F20
	0x0333C5A0 B 0x333C5B4
	0x0333C5A4 B 0x333C5B4
	0x0333C5A8 B 0x333C5B4
	0x0333C5AC B 0x333C5B4
	0x0333C5B0 B 0x333C5B4
	0x0333C5B4 MOV X21, X0
	0x0333C5B8 CMP W1, 0x1
	0x0333C5BC B.NE 0x333C5D8
	0x0333C5C0 MOV X0, X21
	0x0333C5C4 BL 0x3EB1AD0
	0x0333C5C8 LDR X20, [X0]
	0x0333C5CC BL 0x3EB1AE0
	0x0333C5D0 MOV X21, X31
	0x0333C5D4 B 0x333C51C
	0x0333C5D8 MOV X20, X31
	0x0333C5DC B 0x333C5E4
	0x0333C5E0 MOV X21, X0
	0x0333C5E4 LDRB W8, [X31 + 0xC]
	0x0333C5E8 CBZ W8, 0x333C5F8
	0x0333C5EC MOV X0, X19
	0x0333C5F0 MOV X1, X31
	0x0333C5F4 BL 0x33E14E4
	0x0333C5F8 CBNZ X20, 0x333C604
	0x0333C5FC MOV X0, X21
	0x0333C600 BL 0x1D2C690
	0x0333C604 MOV X0, X20
	0x0333C608 BL 0x1C16F18
	0x0333C60C BL 0x1990590
	0x0333C610 B 0x333C0E4
	0x0333C614 STP X30, X21, [X31 - 0x20]!
	0x0333C618 STP X20, X19, [X31 + 0x10]
	0x0333C61C ADRP X20, 0x10A0000
	0x0333C620 ADRP X21, 0xDB9000
	0x0333C624 LDRB W8, [X20 + 0xD34]
	0x0333C628 LDR X21, [X21 + 0xC48]
	0x0333C62C MOV X19, X0
	0x0333C630 TBNZ X8, 0x0, 0x333C648
	0x0333C634 ADRP X0, 0xDB9000
	0x0333C638 LDR X0, [X0 + 0xC48]
	0x0333C63C BL 0x1C16CF4
	0x0333C640 MOVZ W8, 0x1
	0x0333C644 STRB W8, [X20 + 0xD34]
	0x0333C648 LDR X20, [X19 + 0x20]
	0x0333C64C STRB W31, [X19 + 0x4C]
	0x0333C650 STR X20, [X19 + 0x40]
	0x0333C654 LDR X0, [X21]
	0x0333C658 LDR W8, [X0 + 0xE0]
	0x0333C65C CBNZ W8, 0x333C664
	0x0333C660 BL 0x1C16DFC
	0x0333C664 MOV X0, X20
	0x0333C668 BL 0x333C3F8
	0x0333C66C CBZ X0, 0x333C68C
	0x0333C670 LDR X8, [X0]
	0x0333C674 LDP X9, X1, [X8 + 0x198]
	0x0333C678 BLR X9
	0x0333C67C STR W0, [X19 + 0x50]
	0x0333C680 LDP X20, X19, [X31 + 0x10]
	0x0333C684 LDP X30, X21, [X31], #0x20
	0x0333C688 RET
	0x0333C68C BL 0x1C16F20
	0x0333C690 LDR X0, [X0 + 0x30]
	0x0333C694 RET
	0x0333C698 STR X30, [X31 - 0x20]!
	0x0333C69C STP X20, X19, [X31 + 0x10]
	0x0333C6A0 ADRP X20, 0x10A0000
	0x0333C6A4 LDRB W8, [X20 + 0xD35]
	0x0333C6A8 MOV X19, X0
	0x0333C6AC TBNZ X8, 0x0, 0x333C6C4
	0x0333C6B0 ADRP X0, 0xDEC000
	0x0333C6B4 LDR X0, [X0 + 0xAF8]
	0x0333C6B8 BL 0x1C16CF4
	0x0333C6BC MOVZ W8, 0x1
	0x0333C6C0 STRB W8, [X20 + 0xD35]
	0x0333C6C4 MOV X0, X19
	0x0333C6C8 MOV X1, X31
	0x0333C6CC BL 0x33C5A24
	0x0333C6D0 CBZ X0, 0x333C71C
	0x0333C6D4 ADRP X9, 0xDEC000
	0x0333C6D8 LDR X9, [X9 + 0xAF8]
	0x0333C6DC LDR X8, [X0]
	0x0333C6E0 LDR X1, [X9]
	0x0333C6E4 LDRB W10, [X8 + 0x130]
	0x0333C6E8 LDRB W9, [X1 + 0x130]
	0x0333C6EC CMP W10, W9
	0x0333C6F0 B.CC 0x333C718
	0x0333C6F4 LDR X8, [X8 + 0xC8]
	0x0333C6F8 ADD X8, X8, X9, 0x3, LSL
	0x0333C6FC LDUR X8, [X8 - 0x8]
	0x0333C700 CMP X8, X1
	0x0333C704 B.NE 0x333C718
	0x0333C708 LDP X20, X19, [X31 + 0x10]
	0x0333C70C STRB W31, [X0 + 0x18]
	0x0333C710 LDR X30, [X31], #0x20
	0x0333C714 RET
	0x0333C718 BL 0x1C171E0
	0x0333C71C BL 0x1C16F20
	0x0333C720 AND W8, W1, 0x1
	0x0333C724 STRB W8, [X0 + 0x18]
	0x0333C728 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x10A1000
	006 Move X20, 0xDBA000
	007 Move W8, [X21+3376]
	008 Move X20, [X20+3144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0xDBA000
	015 Move X0, [X0+3144]
	016 Call 0x1C17CF4
	017 Move X0, 0xDEC000
	018 Move X0, [X0+3000]
	019 Call 0x1C17CF4
	020 Move X0, 0xDED000
	021 Move X0, [X0+1048]
	022 Call 0x1C17CF4
	023 Move X0, 0xDED000
	024 Move X0, [X0+1056]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+3376], W8
	028 Move X0, X19
	029 Move X1, X31
	030 Call Calendar..ctor, X0
	031 Move X0, [X20]
	032 Call 0x1C17F10
	033 Move X8, 0xDED000
	034 Move X8, [X8+1056]
	035 Move X1, [X8]
	036 Move W2, 1
	037 Move W3, W31
	038 Call CultureInfo..ctor, X0, X1, X2, X3
	039 Move X20, 0xDED000
	040 Move X20, [X20+1048]
	041 Move X21, 0xDEC000
	042 Move X0, [X20]
	043 Move W8, [X0+224]
	044 Move X21, [X21+3000]
	045 Compare W8, 0
	046 JumpIfNotEqual {49}
	047 Call 0x1C17DFC
	048 Move X0, [X20]
	049 Move X8, [X0+184]
	050 Move X0, [X21]
	051 Move X20, [X8]
	052 Call 0x1C17F10
	053 Move X1, X19
	054 Move X2, X20
	055 Move X3, X31
	056 Move X21, X0
	057 Call GregorianCalendarHelper..ctor, X0, X1, X2
	058 Move [X19+32], X21
	059 Move X20, [X31+16]
	060 Move X19, [X31+24]
	061 Move X30, [X31+32]
	062 Move X21, [X31+40]
	063 Return 
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X20, X0
	066 Move X0, X20
	067 Call 0x3EB2AD0
	068 Move X20, X0
	069 Move X0, 0xDC0000
	070 Move X0, [X0+1400]
	071 Call 0x1C17D08
	072 Move X8, [X20]
	073 Move X1, [X8]
	074 Call 0x1C18270
	075 Move TEMP, X0
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfNotEqual {107}
	079 Move X20, [X20]
	080 Call 0x3EB2AE0
	081 Move X0, X19
	082 Move X1, X31
	083 Call "il2cpp_vm_object_is_inst", X0
	084 Move X19, X0
	085 Call 0x19913C0
	086 Move X8, [X19]
	087 Move X0, X19
	088 Move X9, [X8+744]
	089 Move X1, [X8+752]
	090 NotImplemented "Instruction BLR not yet implemented."
	091 Move X19, X0
	092 Move X0, 0xDED000
	093 Move X0, [X0+2616]
	094 Call 0x1C17D08
	095 Call 0x1C17F10
	096 Move X1, X19
	097 Move X2, X20
	098 Move X3, X31
	099 Move X21, X0
	100 Call TypeInitializationException..ctor, X0, X1, X2
	101 Move X0, 0xDED000
	102 Move X0, [X0+2784]
	103 Call 0x1C17D08
	104 Move X1, X0
	105 Move X0, X21
	106 Call 0x1C17DEC
	107 Move W0, 8
	108 Call 0x3EB2AF0
	109 Move X8, [X20]
	110 Move [X0], X8
	111 Move X1, 0xB79000
	112 Add X1, X1, 3672
	113 Move X2, X31
	114 Call 0x3EB2B00
	115 Move X20, X0
	116 Call 0x3EB2AE0
	117 Move X0, X20
	118 Call 0x1D2D690
	119 Call 0x1991590

Method: System.Int32 get_ID()

Disassembly:
	0x0333C7DC BL 0x1C16CF4
	0x0333C7E0 ADRP X0, 0xDEC000

ISIL:
	001 Move W0, 4
	002 Return X0

Method: System.Int32 GetDaysInMonth(System.Int32 year, System.Int32 month, System.Int32 era)

Disassembly:
	0x0333C7E4 LDR X0, [X0 + 0xB78]
	0x0333C7E8 BL 0x1C16CF4
	0x0333C7EC MOVZ W8, 0x1
	0x0333C7F0 STRB W8, [X20 + 0xD36]
	0x0333C7F4 MOV X20, X19
	0x0333C7F8 LDRB W8, [X20 + 0x38]!
	0x0333C7FC CBNZ W8, 0x333C874

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X4, X31
	006 Move X30, [X31+16]
	007 Call GregorianCalendarHelper.GetDaysInMonth, X0, X1, X2, X3
	008 Return X0
	009 Call 0x1C17F20

Method: System.Int32 GetDaysInYear(System.Int32 year, System.Int32 era)

Disassembly:
	0x0333C800 LDR X8, [X19 + 0x28]
	0x0333C804 CBZ X8, 0x333C898
	0x0333C808 LDR X0, [X8 + 0x50]
	0x0333C80C ADRP X8, 0xDEC000
	0x0333C810 LDR X8, [X8 + 0xB78]
	0x0333C814 MOV X2, X31
	0x0333C818 LDR X1, [X8]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X3, X31
	006 Move X30, [X31+16]
	007 Call GregorianCalendarHelper.GetDaysInYear, X0, X1, X2
	008 Return X0
	009 Call 0x1C17F20

Method: System.Int32 GetDayOfMonth(System.DateTime time)

Disassembly:
	0x0333C81C BL 0x321BA08
	0x0333C820 TBZ X0, 0x0, 0x333C82C
	0x0333C824 MOV W8, W31
	0x0333C828 B 0x333C850
	0x0333C82C LDR X8, [X19 + 0x28]
	0x0333C830 CBZ X8, 0x333C898
	0x0333C834 LDR X0, [X8 + 0x50]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X2, X31
	006 Move X30, [X31+16]
	007 Call GregorianCalendarHelper.GetDayOfMonth, X0, X1
	008 Return X0
	009 Call 0x1C17F20

Method: System.DayOfWeek GetDayOfWeek(System.DateTime time)

Disassembly:
	0x0333C838 ADRP X8, 0xDEC000
	0x0333C83C LDR X8, [X8 + 0xB70]
	0x0333C840 MOV X2, X31
	0x0333C844 LDR X1, [X8]
	0x0333C848 BL 0x321BA08
	0x0333C84C EOR W8, W0, 0x1
	0x0333C850 ADRP X9, 0xDBB000

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X2, X31
	006 Move X30, [X31+16]
	007 Call GregorianCalendarHelper.GetDayOfWeek, X0, X1
	008 Return X0
	009 Call 0x1C17F20

Method: System.Int32 GetMonthsInYear(System.Int32 year, System.Int32 era)

Disassembly:
	0x0333C854 LDR X9, [X9 + 0xFD8]
	0x0333C858 AND W1, W8, 0x1
	0x0333C85C ADD X0, X31, 0xC
	0x0333C860 STRH W31, [X31 + 0xC]
	0x0333C864 LDR X2, [X9]
	0x0333C868 BL 0x242D570
	0x0333C86C LDRH W8, [X31 + 0xC]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X3, X31
	006 Move X30, [X31+16]
	007 Call GregorianCalendarHelper.GetMonthsInYear, X0, X1, X2
	008 Return X0
	009 Call 0x1C17F20

Method: System.Int32 GetEra(System.DateTime time)

Disassembly:
	0x0333C870 STRH W8, [X19 + 0x38]
	0x0333C874 ADRP X8, 0xDBB000
	0x0333C878 LDR X8, [X8 + 0xBF8]
	0x0333C87C MOV X0, X20
	0x0333C880 LDR X1, [X8]
	0x0333C884 BL 0x242D58C
	0x0333C888 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X2, X31
	006 Move X30, [X31+16]
	007 Call GregorianCalendarHelper.GetEra, X0, X1
	008 Return X0
	009 Call 0x1C17F20

Method: System.Int32 GetMonth(System.DateTime time)

Disassembly:
	0x0333C88C AND W0, W0, 0x1
	0x0333C890 LDR X30, [X31], #0x20
	0x0333C894 RET
	0x0333C898 BL 0x1C16F20
	0x0333C89C SUB W8, W0, 0x41
	0x0333C8A0 AND W8, W8, 0xFFFF
	0x0333C8A4 ORR W9, W0, 0x20

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X2, X31
	006 Move X30, [X31+16]
	007 Call GregorianCalendarHelper.GetMonth, X0, X1
	008 Return X0
	009 Call 0x1C17F20

Method: System.Int32 GetYear(System.DateTime time)

Disassembly:
	0x0333C8A8 CMP W8, 0x19
	0x0333C8AC CSEL W0, W0, W9, HI
	0x0333C8B0 RET
	0x0333C8B4 STP X30, X21, [X31 - 0x20]!
	0x0333C8B8 STP X20, X19, [X31 + 0x10]
	0x0333C8BC ADRP X21, 0x10A0000
	0x0333C8C0 LDRB W8, [X21 + 0xD3D]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X2, X31
	006 Move X30, [X31+16]
	007 Call GregorianCalendarHelper.GetYear, X0, X1
	008 Return X0
	009 Call 0x1C17F20

Method: System.Boolean IsLeapYear(System.Int32 year, System.Int32 era)

Disassembly:
	0x0333C8C4 MOV W19, W1
	0x0333C8C8 MOV X20, X0
	0x0333C8CC TBNZ X8, 0x0, 0x333C8E4
	0x0333C8D0 ADRP X0, 0xDEC000
	0x0333C8D4 LDR X0, [X0 + 0xB80]
	0x0333C8D8 BL 0x1C16CF4
	0x0333C8DC MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X3, X31
	006 Move X30, [X31+16]
	007 Call GregorianCalendarHelper.IsLeapYear, X0, X1, X2
	008 Return X0
	009 Call 0x1C17F20

Method: System.DateTime ToDateTime(System.Int32 year, System.Int32 month, System.Int32 day, System.Int32 hour, System.Int32 minute, System.Int32 second, System.Int32 millisecond, System.Int32 era)

Disassembly:
	0x0333C8E0 STRB W8, [X21 + 0xD3D]
	0x0333C8E4 LDR X8, [X20 + 0x28]
	0x0333C8E8 CBZ X8, 0x333CD30
	0x0333C8EC LDR X0, [X8 + 0x58]
	0x0333C8F0 MOV X1, X31
	0x0333C8F4 BL 0x32277A8
	0x0333C8F8 TBZ X0, 0x0, 0x333C974
	0x0333C8FC SUB W8, W19, 0xC0
	0x0333C900 AND W8, W8, 0xFFFF

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move W8, [X31+16]
	006 Move [X31+24], X31
	007 Move [X31+16], W8
	008 Move X30, [X31+16]
	009 Call GregorianCalendarHelper.ToDateTime, X0, X1, X2, X3, X4, X5, X6, X7, X8
	010 Return X0
	011 Call 0x1C17F20

Method: System.Int32[] get_Eras()

Disassembly:
	0x0333C904 CMP W8, 0x496
	0x0333C908 B.LS 0x333C9A0
	0x0333C90C MOVN W8, 0x109F
	0x0333C910 ADD W8, W19, W8
	0x0333C914 AND W8, W8, 0xFFFF
	0x0333C918 CMP W8, 0x25
	0x0333C91C B.LS 0x333CA14

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call GregorianCalendarHelper.get_Eras, X0
	008 Return X0
	009 Call 0x1C17F20

Method: System.Int32 get_TwoDigitYearMax()

Disassembly:
	0x0333C920 MOVN W8, 0x1DFF
	0x0333C924 ADD W8, W19, W8
	0x0333C928 AND W8, W8, 0xFFFF
	0x0333C92C CMP W8, 0x1FC
	0x0333C930 B.LS 0x333CAA8
	0x0333C934 UBFM W8, W19, 0x4, 0xF
	0x0333C938 CMP W8, 0x216
	0x0333C93C B.NE 0x333CB1C
	0x0333C940 ADRP X20, 0xDEC000
	0x0333C944 LDR X20, [X20 + 0xB80]
	0x0333C948 LDR X0, [X20]
	0x0333C94C LDR W8, [X0 + 0xE0]
	0x0333C950 CBNZ W8, 0x333C95C
	0x0333C954 BL 0x1C16DFC
	0x0333C958 LDR X0, [X20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move W0, [X0+24]
	005 Add W31, W0, 1
	006 Move X8, [X19]
	007 Move X0, X19
	008 Move X9, [X8+424]
	009 Move X1, [X8+432]
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Move W1, 99
	012 Move X2, X31
	013 Call Calendar.GetSystemTwoDigitYearSetting, X0, X1
	014 Move [X19+24], W0
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Return X0

Method: System.Void set_TwoDigitYearMax(System.Int32 value)

Disassembly:
	0x0333C95C LDR X8, [X0 + 0xB8]
	0x0333C960 LDR X8, [X8 + 0x18]
	0x0333C964 CBZ X8, 0x333CD30
	0x0333C968 LDR W10, [X8 + 0x18]
	0x0333C96C MOVN X9, 0x215F
	0x0333C970 B 0x333CCFC
	0x0333C974 AND W8, W19, 0xFFFF
	0x0333C978 CMP W8, 0x1F2
	0x0333C97C B.HI 0x333C9D8
	0x0333C980 CMP W8, 0x1C5
	0x0333C984 B.HI 0x333CA48
	0x0333C988 AND W8, W19, 0xFFFF
	0x0333C98C CMP W8, 0x130
	0x0333C990 B.EQ 0x333CB14
	0x0333C994 CMP W8, 0x1C5
	0x0333C998 B.EQ 0x333CA70
	0x0333C99C B 0x333CAF4
	0x0333C9A0 ADRP X20, 0xDEC000
	0x0333C9A4 LDR X20, [X20 + 0xB80]
	0x0333C9A8 LDR X0, [X20]
	0x0333C9AC LDR W8, [X0 + 0xE0]
	0x0333C9B0 CBNZ W8, 0x333C9BC
	0x0333C9B4 BL 0x1C16DFC
	0x0333C9B8 LDR X0, [X20]
	0x0333C9BC LDR X8, [X0 + 0xB8]
	0x0333C9C0 LDR X8, [X8]
	0x0333C9C4 CBZ X8, 0x333CD30
	0x0333C9C8 LDR W10, [X8 + 0x18]
	0x0333C9CC AND X9, X19, 0xFFFF
	0x0333C9D0 SUB X9, X9, 0xC0
	0x0333C9D4 B 0x333CD00
	0x0333C9D8 MOVZ W8, 0x1E9E
	0x0333C9DC CMP W8, W19, UXTH
	0x0333C9E0 B.CC 0x333CA78
	0x0333C9E4 AND W8, W19, 0xFFFF
	0x0333C9E8 CMP W8, 0x3D3
	0x0333C9EC B.LE 0x333CADC
	0x0333C9F0 CMP W8, 0x3D4
	0x0333C9F4 B.EQ 0x333CBE4
	0x0333C9F8 CMP W8, 0x3F4
	0x0333C9FC B.EQ 0x333CBEC
	0x0333CA00 MOVZ W9, 0x1E9E
	0x0333CA04 CMP W8, W9
	0x0333CA08 B.NE 0x333CAF4
	0x0333CA0C MOVZ W19, 0xDF
	0x0333CA10 B 0x333CD10
	0x0333CA14 ADRP X20, 0xDEC000
	0x0333CA18 LDR X20, [X20 + 0xB80]
	0x0333CA1C LDR X0, [X20]
	0x0333CA20 LDR W8, [X0 + 0xE0]
	0x0333CA24 CBNZ W8, 0x333CA30
	0x0333CA28 BL 0x1C16DFC
	0x0333CA2C LDR X0, [X20]
	0x0333CA30 LDR X8, [X0 + 0xB8]
	0x0333CA34 LDR X8, [X8 + 0x8]
	0x0333CA38 CBZ X8, 0x333CD30
	0x0333CA3C LDR W10, [X8 + 0x18]
	0x0333CA40 MOVN X9, 0x109F
	0x0333CA44 B 0x333CCFC
	0x0333CA48 AND W8, W19, 0xFFFF
	0x0333CA4C SUB W8, W8, 0x1C8
	0x0333CA50 CMP W8, 0x2A
	0x0333CA54 B.HI 0x333CAF4
	0x0333CA58 MOVZ W9, 0x1
	0x0333CA5C LSLV X8, X9, X8
	0x0333CA60 MOVZ X9, 0x9
	0x0333CA64 MOVK X9, 0x400
	0x0333CA68 ANDS X31, X8, X9, 0x0
	0x0333CA6C B.EQ 0x333CAF4
	0x0333CA70 ADD W19, W19, 0x1
	0x0333CA74 B 0x333CD10
	0x0333CA78 AND W8, W19, 0xFFFF
	0x0333CA7C MOVZ W9, 0x2126
	0x0333CA80 CMP W8, W9
	0x0333CA84 B.EQ 0x333CBB4
	0x0333CA88 MOVZ W9, 0x212A
	0x0333CA8C CMP W8, W9
	0x0333CA90 B.EQ 0x333CBBC

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move W20, W1
	009 Move X1, X31
	010 Move X19, X0
	011 Call Calendar.VerifyWritable, X0
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move X8, [X19+32]
	014 Compare X8, 0
	015 JumpIfEqual {83}
	016 Move W8, [X8+16]
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move [X19+24], W20
	019 Move X20, [X31+48]
	020 Move X19, [X31+56]
	021 Move X22, [X31+32]
	022 Move X21, [X31+40]
	023 Move X30, [X31+16]
	024 Move X23, [X31+24]
	025 Add X31, X31, 64
	026 Return 
	027 Move X0, 0xDBA000
	028 Move X0, [X0+3144]
	029 Call 0x1C17D08
	030 Call 0x19913D0
	031 Call CultureInfo.get_CurrentCulture
	032 Move X20, X0
	033 Move X0, 0xDE7000
	034 Move X0, [X0+880]
	035 Call 0x1C17D08
	036 Move X1, X31
	037 Call Environment.GetResourceString, X0
	038 Move W8, 99
	039 Move [X31+12], W8
	040 Move X22, 0xDB8000
	041 Move X22, [X22+1880]
	042 Move X21, X0
	043 Move X0, X22
	044 Call 0x1C17D08
	045 Add X1, X31, 12
	046 Call 0x1C17E04
	047 Move X19, [X19+32]
	048 Move X23, X0
	049 Move X0, X19
	050 Call 0x19913C0
	051 Move W8, [X19+16]
	052 Move X0, X22
	053 Move [X31+8], W8
	054 Call 0x1C17D08
	055 Add X1, X31, 8
	056 Call 0x1C17E04
	057 Move X3, X0
	058 Move X0, X20
	059 Move X1, X21
	060 Move X2, X23
	061 Move X4, X31
	062 Call String.Format, X0, X1, X2, X3
	063 Move X19, X0
	064 Move X0, 0xDC0000
	065 Move X0, [X0+1888]
	066 Call 0x1C17D08
	067 Call 0x1C17F10
	068 Move X20, X0
	069 Move X0, 0xDED000
	070 Move X0, [X0+1448]
	071 Call 0x1C17D08
	072 Move X1, X0
	073 Move X0, X20
	074 Move X2, X19
	075 Move X3, X31
	076 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	077 Move X0, 0xDED000
	078 Move X0, [X0+2792]
	079 Call 0x1C17D08
	080 Move X1, X0
	081 Move X0, X20
	082 Call 0x1C17DEC
	083 Call 0x1C17F20

Method: System.Int32 ToFourDigitYear(System.Int32 year)

Disassembly:
	0x0333CA94 MOVZ W9, 0x212B
	0x0333CA98 CMP W8, W9
	0x0333CA9C B.NE 0x333CAF4
	0x0333CAA0 MOVZ W19, 0xE5
	0x0333CAA4 B 0x333CD10
	0x0333CAA8 ADRP X20, 0xDEC000
	0x0333CAAC LDR X20, [X20 + 0xB80]
	0x0333CAB0 LDR X0, [X20]
	0x0333CAB4 LDR W8, [X0 + 0xE0]
	0x0333CAB8 CBNZ W8, 0x333CAC4
	0x0333CABC BL 0x1C16DFC
	0x0333CAC0 LDR X0, [X20]
	0x0333CAC4 LDR X8, [X0 + 0xB8]
	0x0333CAC8 LDR X8, [X8 + 0x10]
	0x0333CACC CBZ X8, 0x333CD30
	0x0333CAD0 LDR W10, [X8 + 0x18]
	0x0333CAD4 MOVN X9, 0x1DFF
	0x0333CAD8 B 0x333CCFC
	0x0333CADC CMP W8, 0x3D2
	0x0333CAE0 B.EQ 0x333CBF4
	0x0333CAE4 CMP W8, 0x3D3
	0x0333CAE8 B.NE 0x333CAF4
	0x0333CAEC MOVZ W19, 0x3CD
	0x0333CAF0 B 0x333CD10
	0x0333CAF4 MOV X0, X20
	0x0333CAF8 BL 0x333C798
	0x0333CAFC TBNZ X0, 0x0, 0x333C8FC
	0x0333CB00 AND W8, W19, 0xFFFF
	0x0333CB04 CMP W8, 0x49
	0x0333CB08 B.NE 0x333CBC4
	0x0333CB0C MOVZ W19, 0x131
	0x0333CB10 B 0x333CD10
	0x0333CB14 MOVZ W19, 0x69
	0x0333CB18 B 0x333CD10
	0x0333CB1C MOVN W8, 0x24B5
	0x0333CB20 ADD W8, W19, W8
	0x0333CB24 AND W8, W8, 0xFFFF
	0x0333CB28 CMP W8, 0x19
	0x0333CB2C B.LS 0x333CBFC
	0x0333CB30 MOVN W8, 0x2BFF
	0x0333CB34 ADD W8, W19, W8
	0x0333CB38 AND W8, W8, 0xFFFF
	0x0333CB3C CMP W8, 0x2E
	0x0333CB40 B.LS 0x333CC30
	0x0333CB44 MOVN W8, 0x2C5F
	0x0333CB48 ADD W8, W19, W8
	0x0333CB4C AND W8, W8, 0xFFFF
	0x0333CB50 CMP W8, 0x82
	0x0333CB54 B.LS 0x333CC64
	0x0333CB58 MOVZ W8, 0x59C0
	0x0333CB5C ADD W8, W19, W8
	0x0333CB60 AND W8, W8, 0xFFFF
	0x0333CB64 CMP W8, 0x56
	0x0333CB68 B.LS 0x333CC98
	0x0333CB6C MOVZ W8, 0x58DE
	0x0333CB70 ADD W8, W19, W8
	0x0333CB74 AND W8, W8, 0xFFFF
	0x0333CB78 CMP W8, 0x69
	0x0333CB7C B.LS 0x333CCCC
	0x0333CB80 ADD W8, W19, 0xDF
	0x0333CB84 AND W8, W8, 0xFFFF
	0x0333CB88 CMP W8, 0x19
	0x0333CB8C B.LS 0x333CD20
	0x0333CB90 AND W8, W19, 0xFFFF
	0x0333CB94 MOVZ W9, 0x2132
	0x0333CB98 CMP W8, W9
	0x0333CB9C B.EQ 0x333CD28
	0x0333CBA0 MOVZ W9, 0x2183
	0x0333CBA4 CMP W8, W9
	0x0333CBA8 B.NE 0x333CD10
	0x0333CBAC MOVZ W19, 0x2184
	0x0333CBB0 B 0x333CD10
	0x0333CBB4 MOVZ W19, 0x3C9
	0x0333CBB8 B 0x333CD10
	0x0333CBBC MOVZ W19, 0x6B
	0x0333CBC0 B 0x333CD10
	0x0333CBC4 CMP W8, 0x7F
	0x0333CBC8 B.HI 0x333C8FC
	0x0333CBCC SUB W8, W19, 0x41
	0x0333CBD0 AND W8, W8, 0xFFFF
	0x0333CBD4 ORR W9, W19, 0x20
	0x0333CBD8 CMP W8, 0x19

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move X8, [X0+32]
	010 Compare X8, 0
	011 JumpIfEqual {28}
	012 Move W8, [X8+16]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X20, [X31+48]
	015 Move X19, [X31+56]
	016 Move X22, [X31+32]
	017 Move X21, [X31+40]
	018 Move X30, [X31+16]
	019 Move X23, [X31+24]
	020 Move W0, W1
	021 Add X31, X31, 64
	022 Return X0
	023 Move X0, 0xDEB000
	024 Move X0, [X0+3368]
	025 Call 0x1C17D08
	026 Move X1, X31
	027 Call Environment.GetResourceString, X0
	028 Call 0x1C17F20
	029 Move X8, 0xDBA000
	030 Move X8, [X8+3144]
	031 Move X22, X0
	032 Move X0, X8
	033 Call 0x1C17D08
	034 Call 0x19913D0
	035 Call CultureInfo.get_CurrentCulture
	036 Move X19, X0
	037 Move X0, 0xDE7000
	038 Move X0, [X0+880]
	039 Call 0x1C17D08
	040 Move X1, X31
	041 Call Environment.GetResourceString, X0
	042 Move W8, 1
	043 Move [X31+12], W8
	044 Move X21, 0xDB8000
	045 Move X21, [X21+1880]
	046 Move X20, X0
	047 Move X0, X21
	048 Call 0x1C17D08
	049 Add X1, X31, 12
	050 Call 0x1C17E04
	051 Move X22, [X22+32]
	052 Move X23, X0
	053 Move X0, X22
	054 Call 0x19913C0
	055 Move W8, [X22+16]
	056 Move X0, X21
	057 Move [X31+8], W8
	058 Call 0x1C17D08
	059 Add X1, X31, 8
	060 Call 0x1C17E04
	061 Move X3, X0
	062 Move X0, X19
	063 Move X1, X20
	064 Move X2, X23
	065 Move X4, X31
	066 Call String.Format, X0, X1, X2, X3
	067 Move X19, X0
	068 Move X0, 0xDC0000
	069 Move X0, [X0+1888]
	070 Call 0x1C17D08
	071 Call 0x1C17F10
	072 Move X20, X0
	073 Move X0, 0xDED000
	074 Move X0, [X0+1448]
	075 Call 0x1C17D08
	076 Move X1, X0
	077 Move X0, X20
	078 Move X2, X19
	079 Move X3, X31
	080 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	081 Move X0, 0xDED000
	082 Move X0, [X0+2800]
	083 Call 0x1C17D08
	084 Move X1, X0
	085 Move X0, X20
	086 Call 0x1C17DEC

Method: System.Void .cctor()

Disassembly:
	0x0333CBDC CSEL W19, W19, W9, HI
	0x0333CBE0 B 0x333CD10
	0x0333CBE4 MOVZ W19, 0x3CB
	0x0333CBE8 B 0x333CD10
	0x0333CBEC MOVZ W19, 0x3B8
	0x0333CBF0 B 0x333CD10
	0x0333CBF4 MOVZ W19, 0x3C5
	0x0333CBF8 B 0x333CD10
	0x0333CBFC ADRP X20, 0xDEC000
	0x0333CC00 LDR X20, [X20 + 0xB80]
	0x0333CC04 LDR X0, [X20]
	0x0333CC08 LDR W8, [X0 + 0xE0]
	0x0333CC0C CBNZ W8, 0x333CC18
	0x0333CC10 BL 0x1C16DFC
	0x0333CC14 LDR X0, [X20]
	0x0333CC18 LDR X8, [X0 + 0xB8]
	0x0333CC1C LDR X8, [X8 + 0x20]
	0x0333CC20 CBZ X8, 0x333CD30
	0x0333CC24 LDR W10, [X8 + 0x18]
	0x0333CC28 MOVN X9, 0x24B5
	0x0333CC2C B 0x333CCFC
	0x0333CC30 ADRP X20, 0xDEC000
	0x0333CC34 LDR X20, [X20 + 0xB80]
	0x0333CC38 LDR X0, [X20]
	0x0333CC3C LDR W8, [X0 + 0xE0]
	0x0333CC40 CBNZ W8, 0x333CC4C
	0x0333CC44 BL 0x1C16DFC
	0x0333CC48 LDR X0, [X20]
	0x0333CC4C LDR X8, [X0 + 0xB8]
	0x0333CC50 LDR X8, [X8 + 0x28]
	0x0333CC54 CBZ X8, 0x333CD30
	0x0333CC58 LDR W10, [X8 + 0x18]
	0x0333CC5C MOVN X9, 0x2BFF
	0x0333CC60 B 0x333CCFC
	0x0333CC64 ADRP X20, 0xDEC000
	0x0333CC68 LDR X20, [X20 + 0xB80]
	0x0333CC6C LDR X0, [X20]
	0x0333CC70 LDR W8, [X0 + 0xE0]
	0x0333CC74 CBNZ W8, 0x333CC80
	0x0333CC78 BL 0x1C16DFC
	0x0333CC7C LDR X0, [X20]
	0x0333CC80 LDR X8, [X0 + 0xB8]
	0x0333CC84 LDR X8, [X8 + 0x30]
	0x0333CC88 CBZ X8, 0x333CD30
	0x0333CC8C LDR W10, [X8 + 0x18]
	0x0333CC90 MOVN X9, 0x2C5F
	0x0333CC94 B 0x333CCFC
	0x0333CC98 ADRP X20, 0xDEC000
	0x0333CC9C LDR X20, [X20 + 0xB80]
	0x0333CCA0 LDR X0, [X20]
	0x0333CCA4 LDR W8, [X0 + 0xE0]
	0x0333CCA8 CBNZ W8, 0x333CCB4
	0x0333CCAC BL 0x1C16DFC
	0x0333CCB0 LDR X0, [X20]
	0x0333CCB4 LDR X8, [X0 + 0xB8]
	0x0333CCB8 LDR X8, [X8 + 0x38]
	0x0333CCBC CBZ X8, 0x333CD30
	0x0333CCC0 LDR W10, [X8 + 0x18]
	0x0333CCC4 MOVN X9, 0xA63F
	0x0333CCC8 B 0x333CCFC
	0x0333CCCC ADRP X20, 0xDEC000
	0x0333CCD0 LDR X20, [X20 + 0xB80]
	0x0333CCD4 LDR X0, [X20]
	0x0333CCD8 LDR W8, [X0 + 0xE0]
	0x0333CCDC CBNZ W8, 0x333CCE8
	0x0333CCE0 BL 0x1C16DFC
	0x0333CCE4 LDR X0, [X20]
	0x0333CCE8 LDR X8, [X0 + 0xB8]
	0x0333CCEC LDR X8, [X8 + 0x40]
	0x0333CCF0 CBZ X8, 0x333CD30
	0x0333CCF4 LDR W10, [X8 + 0x18]
	0x0333CCF8 MOVN X9, 0xA721
	0x0333CCFC ADD X9, X9, W19, UXTH

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x10A1000
	007 Move X21, 0xDED000
	008 Move X19, 0xDED000
	009 Move W8, [X20+3377]
	010 Move X21, [X21+2512]
	011 Move X19, [X19+2520]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xDED000
	017 Move X0, [X0+2512]
	018 Call 0x1C17CF4
	019 Move X0, 0xDED000
	020 Move X0, [X0+2520]
	021 Call 0x1C17CF4
	022 Move X0, 0xDED000
	023 Move X0, [X0+1048]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+3377], W8
	027 Move X0, [X21]
	028 Move W1, 1
	029 Call 0x1C17D6C
	030 Move X8, [X19]
	031 Move X19, X0
	032 Move X0, X8
	033 Call 0x1C17F10
	034 Move W1, 1
	035 Move W2, 1912
	036 Move W3, 1
	037 Move W4, 1
	038 Move W5, 1911
	039 Move W6, 1
	040 Move W7, 0x1F98
	041 Move X20, X0
	042 Move [X31], X31
	043 Call EraInfo..ctor, X0, X1, X2, X3, X4, X5, X6, X7
	044 Compare X19, 0
	045 JumpIfEqual {80}
	046 Compare X20, 0
	047 JumpIfEqual {54}
	048 Move X8, [X19]
	049 Move X0, X20
	050 Move X1, [X8+64]
	051 Call 0x1C17E00
	052 Compare X0, 0
	053 JumpIfEqual {82}
	054 Move W8, [X19+24]
	055 Compare W8, 0
	056 JumpIfEqual {81}
	057 Move X21, 0xDED000
	058 Move X21, [X21+1048]
	059 Move [X19+32], X20
	060 Add X0, X31, 8
	061 Move W1, 1912
	062 Move X8, [X21]
	063 Move W2, 1
	064 Move W3, 1
	065 Move X4, X31
	066 Move X8, [X8+184]
	067 Move [X8], X19
	068 Move [X31+8], X31
	069 Call DateTime..ctor, X0, X1, X2, X3
	070 Move X8, [X21]
	071 Move X9, [X31+8]
	072 Move X20, [X31+32]
	073 Move X19, [X31+40]
	074 Move X30, [X31+16]
	075 Move X21, [X31+24]
	076 Move X8, [X8+184]
	077 Move [X8+16], X9
	078 Add X31, X31, 48
	079 Return 
	080 Call 0x1C17F20
	081 Call 0x1C17F28
	082 Call 0x1C17F44
	083 Move X1, X31
	084 Call 0x1C17DEC

