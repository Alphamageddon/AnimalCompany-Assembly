Type: System.Numerics.Vector

Method: System.Numerics.Vector`1<T> Equals(System.Numerics.Vector`1<T> left, System.Numerics.Vector`1<T> right)

Disassembly:
	0x022AAC00 TBZ X0, 0x0, 0x22AADB8
	0x022AAC04 LDUR X26, [X29 - 0x30]
	0x022AAC08 MOV X0, X22
	0x022AAC0C MOV X1, X26
	0x022AAC10 MOV X2, X31
	0x022AAC14 BL 0x3E2061C
	0x022AAC18 LDR X8, [X20 + 0x38]
	0x022AAC1C MOV X27, X0
	0x022AAC20 LDR X1, [X8]
	0x022AAC24 LDRB W8, [X1 + 0x135]
	0x022AAC28 TBNZ X8, 0x0, 0x22AAC38
	0x022AAC2C MOV X0, X1
	0x022AAC30 BL 0x1C5C684
	0x022AAC34 MOV X1, X0
	0x022AAC38 MOV X0, X27
	0x022AAC3C BL 0x1C16E00
	0x022AAC40 MOV X27, X0
	0x022AAC44 CBZ X0, 0x22AABEC
	0x022AAC48 LDP V1, V0, [X21]
	0x022AAC4C STP V1, V0, [X29 - 0x60]
	0x022AAC50 LDR X8, [X20 + 0x38]
	0x022AAC54 LDR X1, [X8]
	0x022AAC58 LDRB W8, [X1 + 0x135]
	0x022AAC5C TBNZ X8, 0x0, 0x22AAC6C
	0x022AAC60 MOV X0, X1
	0x022AAC64 BL 0x1C5C684
	0x022AAC68 MOV X1, X0
	0x022AAC6C LDP V0, V1, [X29 - 0x60]
	0x022AAC70 STP V0, V1, [X29 - 0x80]
	0x022AAC74 LDR X8, [X27]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X4+56]
	008 Move X21, X4
	009 Move X19, X3
	010 Move X20, X2
	011 Move X22, X1
	012 Move X23, X0
	013 Compare X8, 0
	014 JumpIfNotEqual {18}
	015 Move X0, X21
	016 Call 0x1C5D6E0
	017 Move X8, [X21+56]
	018 Move X0, [X8+16]
	019 Move W8, [X0+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {25}
	024 Call 0x1C5D684
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X8, [X21+56]
	030 Move X1, X22
	031 Move X2, X20
	032 Move X3, X19
	033 Move X4, [X8+8]
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X0, X23
	039 Move X30, [X31+48]
	040 Move X23, [X31+56]
	041 Call 0x22BB330
	042 Return X0

Method: System.Boolean get_IsHardwareAccelerated()

Disassembly:
	0x032E25B8 LDP X30, X23, [X31], #0x30
	0x032E25BC RET

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Numerics.Vector`1<System.UInt64> AsVectorUInt64(System.Numerics.Vector`1<T> value)

Disassembly:
	0x022AAB3C LDR X8, [X8]
	0x022AAB40 LDRB W11, [X9 + 0x130]
	0x022AAB44 LDRB W10, [X8 + 0x130]
	0x022AAB48 CMP W11, W10
	0x022AAB4C B.CS 0x22AAB88
	0x022AAB50 MOV X19, X31
	0x022AAB54 LDR X8, [X28 + 0x28]
	0x022AAB58 LDUR X9, [X29 - 0x8]
	0x022AAB5C CMP X8, X9
	0x022AAB60 B.NE 0x22AADD8
	0x022AAB64 MOV X0, X19
	0x022AAB68 ADD X31, X29, 0x0
	0x022AAB6C LDP X20, X19, [X31 + 0x50]
	0x022AAB70 LDP X22, X21, [X31 + 0x40]
	0x022AAB74 LDP X24, X23, [X31 + 0x30]
	0x022AAB78 LDP X26, X25, [X31 + 0x20]
	0x022AAB7C LDP X28, X27, [X31 + 0x10]
	0x022AAB80 LDP X29, X30, [X31], #0x60
	0x022AAB84 RET
	0x022AAB88 LDR X9, [X9 + 0xC8]
	0x022AAB8C MOV X19, X31
	0x022AAB90 ADD X9, X9, X10, 0x3, LSL
	0x022AAB94 LDUR X9, [X9 - 0x8]
	0x022AAB98 CMP X9, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+56]
	006 Move X20, X2
	007 Move X19, X1
	008 Move X21, X0
	009 Compare X8, 0
	010 JumpIfNotEqual {14}
	011 Move X0, X20
	012 Call 0x1C5D6E0
	013 Move X8, [X20+56]
	014 Move X0, [X8+16]
	015 Move W8, [X0+309]
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {21}
	020 Call 0x1C5D684
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X8, [X20+56]
	026 Move X1, X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X0, X21
	030 Move X2, [X8+8]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call 0x28264B0, X0
	034 Return X0

