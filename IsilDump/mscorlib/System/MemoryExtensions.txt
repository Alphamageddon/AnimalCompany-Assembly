Type: System.MemoryExtensions

Method: System.Boolean EqualsOrdinal(System.ReadOnlySpan`1<System.Char> span, System.ReadOnlySpan`1<System.Char> value)

Disassembly:
	0x03380690 BL 0x1C16DFC
	0x03380694 SUB X0, X29, 0xD0
	0x03380698 SUB X1, X29, 0xA0
	0x0338069C MOVZ W5, 0x1
	0x033806A0 MOV W2, W24
	0x033806A4 MOV W3, W20
	0x033806A8 MOV X4, X19
	0x033806AC BL 0x3380A9C
	0x033806B0 B 0x33806DC
	0x033806B4 LDR X0, [X26]
	0x033806B8 LDR W8, [X0 + 0xE0]
	0x033806BC CBNZ W8, 0x33806C4
	0x033806C0 BL 0x1C16DFC
	0x033806C4 SUB X0, X29, 0xD0
	0x033806C8 SUB X1, X29, 0xA0
	0x033806CC MOV X2, X21
	0x033806D0 MOV X3, X20
	0x033806D4 MOV X4, X19
	0x033806D8 BL 0x338102C
	0x033806DC SUB X0, X29, 0xD0
	0x033806E0 MOV X1, X31
	0x033806E4 BL 0x3240CC4
	0x033806E8 LDR X8, [X25 + 0x28]
	0x033806EC LDUR X9, [X29 - 0x18]
	0x033806F0 CMP X8, X9
	0x033806F4 B.NE 0x3380718
	0x033806F8 ADD X31, X29, 0x0
	0x033806FC LDP X20, X19, [X31 + 0x50]
	0x03380700 LDP X22, X21, [X31 + 0x40]
	0x03380704 LDP X24, X23, [X31 + 0x30]
	0x03380708 LDP X26, X25, [X31 + 0x20]
	0x0338070C LDP X28, X27, [X31 + 0x10]
	0x03380710 LDP X29, X30, [X31], #0x60
	0x03380714 RET
	0x03380718 BL 0x3EB1B20
	0x0338071C STR X30, [X31 - 0x30]!
	0x03380720 STP X22, X21, [X31 + 0x10]
	0x03380724 STP X20, X19, [X31 + 0x20]
	0x03380728 ADRP X22, 0x105C000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x105D000
	008 Move W8, [X23+4002]
	009 Move X19, X3
	010 Move X20, X2
	011 Move X21, X1
	012 Move X22, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xD9B000
	018 Move X0, [X0+720]
	019 Call 0x1C17CF4
	020 Move X0, 0xDA3000
	021 Move X0, [X0+40]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+4002], W8
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Compare W21, 0
	027 JumpIfEqual {44}
	028 Move X8, 0xD9B000
	029 Move X8, [X8+720]
	030 Move X0, X22
	031 Move X1, X21
	032 Move X2, X20
	033 Move X4, [X8]
	034 Move X3, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Move X23, [X31+56]
	041 Call 0x1F97ECC
	042 Return X0
	043 Move W0, W31
	044 Move W0, 1
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X22, [X31+16]
	048 Move X21, [X31+24]
	049 Move X30, [X31+48]
	050 Move X23, [X31+56]
	051 Return X0

Method: System.Boolean EqualsOrdinalIgnoreCase(System.ReadOnlySpan`1<System.Char> span, System.ReadOnlySpan`1<System.Char> value)

Disassembly:
	0x0338072C LDRB W8, [X22 + 0xFD6]
	0x03380730 MOV X19, X2
	0x03380734 MOV X20, X1
	0x03380738 MOV X21, X0
	0x0338073C TBNZ X8, 0x0, 0x3380754
	0x03380740 ADRP X0, 0xDA2000
	0x03380744 LDR X0, [X0 + 0x28]
	0x03380748 BL 0x1C16CF4
	0x0338074C MOVZ W8, 0x1
	0x03380750 STRB W8, [X22 + 0xFD6]
	0x03380754 CMP W20, 0x1
	0x03380758 B.LT 0x33807B4
	0x0338075C LDRH W0, [X21]
	0x03380760 AND W8, W0, 0xFFFFFFDF
	0x03380764 SUB W8, W8, 0x41
	0x03380768 CMP W8, 0x19
	0x0338076C B.HI 0x338082C
	0x03380770 CMP W20, 0x1
	0x03380774 B.EQ 0x33807C0
	0x03380778 CMP W20, 0x2
	0x0338077C B.EQ 0x33807C8
	0x03380780 CMP W20, 0x3
	0x03380784 B.NE 0x33807D8
	0x03380788 LDRH W8, [X21 + 0x2]
	0x0338078C SUB W8, W8, 0x30
	0x03380790 CMP W8, 0x9
	0x03380794 B.HI 0x33807D8
	0x03380798 LDRH W9, [X21 + 0x4]
	0x0338079C SUB W9, W9, 0x30
	0x033807A0 CMP W9, 0x9
	0x033807A4 B.HI 0x33807D8
	0x033807A8 MOVZ W10, 0xA
	0x033807AC MADD W8, W8, W10, W9
	0x033807B0 B 0x3380848
	0x033807B4 MOVN W8, 0x0
	0x033807B8 STR W8, [X19]
	0x033807BC B 0x3380840
	0x033807C0 MOVN W8, 0x0
	0x033807C4 B 0x3380848
	0x033807C8 LDRH W8, [X21 + 0x2]
	0x033807CC SUB W8, W8, 0x30
	0x033807D0 CMP W8, 0x9
	0x033807D4 B.LS 0x3380848

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x105D000
	008 Move W8, [X23+4003]
	009 Move X19, X3
	010 Move X20, X2
	011 Move X21, X1
	012 Move X22, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xDA2000
	018 Move X0, [X0+4048]
	019 Call 0x1C17CF4
	020 Move X0, 0xDA3000
	021 Move X0, [X0+40]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+4003], W8
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Compare W21, 0
	027 JumpIfEqual {44}
	028 Move X8, 0xDA2000
	029 Move X8, [X8+4048]
	030 Move X0, [X8]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X22
	036 Move X1, X21
	037 Move X2, X20
	038 Move X3, X19
	039 Move X4, X31
	040 Call CompareInfo.CompareOrdinalIgnoreCase, X0, X1
	041 NotImplemented "Instruction CMP not yet implemented."
	042 NotImplemented "Instruction CSET not yet implemented."
	043 Move W0, W31
	044 Move W0, 1
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X22, [X31+16]
	048 Move X21, [X31+24]
	049 Move X30, [X31+48]
	050 Move X23, [X31+56]
	051 Return X0

Method: System.Boolean Contains(System.ReadOnlySpan`1<System.Char> source, System.Char value)

Disassembly:
	0x033807D8 MOV W8, W31
	0x033807DC MOVZ W10, 0x1
	0x033807E0 MOVZ W9, 0xA
	0x033807E4 CMP W8, 0x9
	0x033807E8 SXTW X11, W10
	0x033807EC B.GT 0x3380814
	0x033807F0 LDRH W10, [X21, W10, SXTW]
	0x033807F4 SUB W12, W10, 0x30
	0x033807F8 CMP W12, 0xA
	0x033807FC B.CS 0x3380814
	0x03380800 ADD W10, W11, 0x1
	0x03380804 CMP W20, W10
	0x03380808 MADD W8, W8, W9, W12
	0x0338080C B.NE 0x33807E4
	0x03380810 B 0x3380848
	0x03380814 CMP W20, W11
	0x03380818 B.EQ 0x3380848
	0x0338081C CMP W11, W20
	0x03380820 B.CS 0x338085C
	0x03380824 LDRH W9, [X21, X11, LSL #1]
	0x03380828 CBZ W9, 0x3380848
	0x0338082C MOVN W8, 0x0
	0x03380830 STR W8, [X19]
	0x03380834 CBZ W0, 0x3380840
	0x03380838 MOV W0, W31
	0x0338083C B 0x338084C
	0x03380840 MOVZ W0, 0x47
	0x03380844 B 0x338084C
	0x03380848 STR W8, [X19]
	0x0338084C LDP X20, X19, [X31 + 0x20]
	0x03380850 LDP X22, X21, [X31 + 0x10]
	0x03380854 LDR X30, [X31], #0x30
	0x03380858 RET
	0x0338085C BL 0x1C16F28
	0x03380860 SUB X31, X31, 0x70
	0x03380864 STP X30, X27, [X31 + 0x20]
	0x03380868 STP X26, X25, [X31 + 0x30]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x105D000
	007 Move W8, [X22+4004]
	008 Move W20, W2
	009 Move X19, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xDA3000
	016 Move X0, [X0+40]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+4004], W8
	020 NotImplemented "Instruction CMP not yet implemented."
	021 NotImplemented "Instruction LDRH not yet implemented."
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move W0, 1
	024 Move W0, W31
	025 Move W9, 1
	026 Move W8, W9
	027 NotImplemented "Instruction CMP not yet implemented."
	028 NotImplemented "Instruction LDRH not yet implemented."
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Add W9, W8, 1
	031 NotImplemented "Instruction CMP not yet implemented."
	032 NotImplemented "Instruction CSET not yet implemented."
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X30, [X31+48]
	038 Return X0

Method: System.Int32 ToUpperInvariant(System.ReadOnlySpan`1<System.Char> source, System.Span`1<System.Char> destination)

Disassembly:
	0x0338086C STP X24, X23, [X31 + 0x40]
	0x03380870 STP X22, X21, [X31 + 0x50]
	0x03380874 STP X20, X19, [X31 + 0x60]
	0x03380878 MRS X22, 0xC000
	0x0338087C LDR X8, [X22 + 0x28]
	0x03380880 ADRP X23, 0x105C000
	0x03380884 ADRP X24, 0xD9B000
	0x03380888 MOV X19, X2
	0x0338088C STR X8, [X31 + 0x18]
	0x03380890 LDRB W8, [X23 + 0xFB6]
	0x03380894 LDR X24, [X24 + 0x5F0]
	0x03380898 MOV X20, X1
	0x0338089C MOV X21, X0
	0x033808A0 TBNZ X8, 0x0, 0x33808C4
	0x033808A4 ADRP X0, 0xD9B000
	0x033808A8 LDR X0, [X0 + 0x5F0]
	0x033808AC BL 0x1C16CF4
	0x033808B0 ADRP X0, 0xDA8000
	0x033808B4 LDR X0, [X0 + 0x78]
	0x033808B8 BL 0x1C16CF4
	0x033808BC MOVZ W8, 0x1
	0x033808C0 STRB W8, [X23 + 0xFB6]
	0x033808C4 MOV X0, X19
	0x033808C8 MOV X1, X31
	0x033808CC STP X21, X20, [X31 + 0x8]
	0x033808D0 BL 0x338C3A8
	0x033808D4 MOVZ W8, 0x1D
	0x033808D8 STR W8, [X19]
	0x033808DC LDR X8, [X24]
	0x033808E0 MOV X20, X0
	0x033808E4 LDR W9, [X8 + 0xE0]
	0x033808E8 CBNZ W9, 0x33808F4
	0x033808EC MOV X0, X8
	0x033808F0 BL 0x1C16DFC
	0x033808F4 ADRP X25, 0xDA8000
	0x033808F8 LDR X25, [X25 + 0x78]
	0x033808FC ADD X0, X31, 0x8
	0x03380900 MOV X1, X31
	0x03380904 BL 0x33D6068
	0x03380908 AND W1, W0, 0x1
	0x0338090C MOV X0, X19
	0x03380910 MOV X2, X31
	0x03380914 BL 0x338C39C
	0x03380918 ADD X23, X20, 0x3A
	0x0338091C MOVZ W26, 0xCCCD
	0x03380920 MOVK W26, 0xCCCC0000
	0x03380924 MOVN W27, 0x9
	0x03380928 MOV X21, X23
	0x0338092C LDR X0, [X24]
	0x03380930 LDR W8, [X0 + 0xE0]
	0x03380934 CBZ W8, 0x338094C
	0x03380938 LDR W8, [X31 + 0x14]
	0x0338093C LDR W9, [X31 + 0xC]
	0x03380940 ORR W8, W9, W8, 0x0
	0x03380944 CBNZ W8, 0x3380970
	0x03380948 B 0x33809C8
	0x0338094C BL 0x1C16DFC
	0x03380950 LDR X0, [X24]
	0x03380954 LDR W9, [X31 + 0x14]
	0x03380958 LDR W10, [X31 + 0xC]
	0x0338095C LDR W8, [X0 + 0xE0]
	0x03380960 ORR W20, W10, W9, 0x0
	0x03380964 CBNZ W8, 0x338096C
	0x03380968 BL 0x1C16DFC
	0x0338096C CBZ W20, 0x33809C8
	0x03380970 ADD X0, X31, 0x8
	0x03380974 MOV X1, X31
	0x03380978 BL 0x33D60BC
	0x0338097C LDR X8, [X25]
	0x03380980 MOV W20, W0
	0x03380984 LDR W9, [X8 + 0xE0]
	0x03380988 CBNZ W9, 0x3380994
	0x0338098C MOV X0, X8
	0x03380990 BL 0x1C16DFC
	0x03380994 MOVZ W8, 0x7
	0x03380998 MOV W10, W8
	0x0338099C UMADDL X8, X20, X26, X31
	0x033809A0 MOV W9, W20
	0x033809A4 UBFM X20, X8, 0x23, 0x3F
	0x033809A8 MADD W8, W20, W27, W9
	0x033809AC ADD W8, W8, 0x30
	0x033809B0 STRH W8, [X21 - 0x2]!
	0x033809B4 SUB W8, W10, 0x1
	0x033809B8 TBZ X10, 0x1F, 0x3380998
	0x033809BC CMP W9, 0x9
	0x033809C0 B.HI 0x3380998

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x105D000
	009 Move W8, [X23+4005]
	010 Move X20, X3
	011 Move X21, X2
	012 Move X19, X1
	013 Move X22, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {32}
	018 Move X0, 0xD76000
	019 Move X0, [X0+3144]
	020 Call 0x1C17CF4
	021 Move X0, 0xDA8000
	022 Move X0, [X0+2352]
	023 Call 0x1C17CF4
	024 Move X0, 0xDA3000
	025 Move X0, [X0+40]
	026 Call 0x1C17CF4
	027 Move X0, 0xDA3000
	028 Move X0, [X0+1416]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X23+4005], W8
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move TEMP, 0
	034 Not TEMP
	035 Move W19, TEMP
	036 Move X23, 0xDA8000
	037 Move X23, [X23+2352]
	038 Move X0, [X23]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X24, 0x105D000
	044 Move W8, [X24+2814]
	045 Compare W8, 0
	046 JumpIfNotEqual {52}
	047 Move X0, 0xDA8000
	048 Move X0, [X0+2352]
	049 Call 0x1C17CF4
	050 Move W8, 1
	051 Move [X24+2814], W8
	052 Move X0, [X23]
	053 Move X24, 0xD76000
	054 Move W8, [X0+224]
	055 Move X24, [X24+3144]
	056 Compare W8, 0
	057 JumpIfNotEqual {60}
	058 Call 0x1C17DFC
	059 Move X0, [X23]
	060 Move X8, [X24]
	061 Move X9, [X0+184]
	062 Move W10, [X8+224]
	063 Move W23, [X9]
	064 Compare W10, 0
	065 JumpIfNotEqual {68}
	066 Move X0, X8
	067 Call 0x1C17DFC
	068 Move X0, X31
	069 Call CultureInfo.get_InvariantCulture
	070 Compare X0, 0
	071 JumpIfEqual {102}
	072 Move X8, [X0]
	073 Move X9, [X8+472]
	074 Move X1, [X8+480]
	075 NotImplemented "Instruction BLR not yet implemented."
	076 Compare X0, 0
	077 JumpIfEqual {102}
	078 Compare W23, 0
	079 JumpIfEqual {86}
	080 Move X1, X22
	081 Move X2, X19
	082 Move X3, X21
	083 Move X4, X20
	084 Move X5, X31
	085 Call TextInfo.ToUpperAsciiInvariant, X0, X1, X2
	086 Move W5, 1
	087 Move X1, X22
	088 Move X2, X19
	089 Move X3, X21
	090 Move X4, X20
	091 Move X6, X31
	092 Call TextInfo.ChangeCase, X0, X1, X2, X3
	093 Move W0, W19
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: System.Boolean EndsWith(System.ReadOnlySpan`1<System.Char> span, System.ReadOnlySpan`1<System.Char> value, System.StringComparison comparisonType)

Disassembly:
	0x033809C4 B 0x338092C
	0x033809C8 LDR X0, [X25]
	0x033809CC LDR W20, [X31 + 0x10]
	0x033809D0 LDR W8, [X0 + 0xE0]
	0x033809D4 CBNZ W8, 0x33809DC
	0x033809D8 BL 0x1C16DFC
	0x033809DC CBZ W20, 0x3380A1C
	0x033809E0 MOVZ W8, 0xCCCD
	0x033809E4 MOVN W10, 0x1
	0x033809E8 MOVK W8, 0xCCCC0000
	0x033809EC MOVN W9, 0x9
	0x033809F0 MOV W12, W10
	0x033809F4 UMADDL X10, X20, X8, X31
	0x033809F8 MOV W11, W20
	0x033809FC UBFM X20, X10, 0x23, 0x3F
	0x03380A00 MADD W10, W20, W9, W11
	0x03380A04 ADD W10, W10, 0x30
	0x03380A08 STRH W10, [X21 - 0x2]!
	0x03380A0C SUB W10, W12, 0x1
	0x03380A10 TBZ X12, 0x1F, 0x33809F0
	0x03380A14 CMP W11, 0x9
	0x03380A18 B.HI 0x33809F0
	0x03380A1C SUB X8, X23, X21
	0x03380A20 CMP X8, 0x0
	0x03380A24 CINC X8, X8, LT
	0x03380A28 ADD X0, X31, 0x8
	0x03380A2C MOV X1, X31
	0x03380A30 UBFM X20, X8, 0x1, 0x3F
	0x03380A34 BL 0x33D6074
	0x03380A38 SUB W8, W20, W0
	0x03380A3C MOV X0, X19
	0x03380A40 MOV X1, X31
	0x03380A44 STR W8, [X19 + 0x4]
	0x03380A48 BL 0x338C3A8
	0x03380A4C CMP W20, 0x1
	0x03380A50 B.MI 0x3380A68
	0x03380A54 LDRH W8, [X21], #0x2
	0x03380A58 SUB W20, W20, 0x1
	0x03380A5C CMP W20, 0x0
	0x03380A60 STRH W8, [X0], #0x2
	0x03380A64 B.GT 0x3380A54
	0x03380A68 STRH W31, [X0]
	0x03380A6C LDR X8, [X22 + 0x28]
	0x03380A70 LDR X9, [X31 + 0x18]
	0x03380A74 CMP X8, X9
	0x03380A78 B.NE 0x3380A98
	0x03380A7C LDP X20, X19, [X31 + 0x60]
	0x03380A80 LDP X22, X21, [X31 + 0x50]
	0x03380A84 LDP X24, X23, [X31 + 0x40]
	0x03380A88 LDP X26, X25, [X31 + 0x30]
	0x03380A8C LDP X30, X27, [X31 + 0x20]
	0x03380A90 ADD X31, X31, 0x70
	0x03380A94 RET
	0x03380A98 BL 0x3EB1B20
	0x03380A9C SUB X31, X31, 0x60
	0x03380AA0 STP X30, X27, [X31 + 0x10]
	0x03380AA4 STP X26, X25, [X31 + 0x20]
	0x03380AA8 STP X24, X23, [X31 + 0x30]
	0x03380AAC STP X22, X21, [X31 + 0x40]
	0x03380AB0 STP X20, X19, [X31 + 0x50]
	0x03380AB4 ADRP X25, 0x105C000
	0x03380AB8 LDRB W8, [X25 + 0xFD7]
	0x03380ABC MOV W24, W5
	0x03380AC0 MOV X19, X4
	0x03380AC4 MOV W22, W3
	0x03380AC8 MOV W23, W2
	0x03380ACC MOV X20, X1
	0x03380AD0 MOV X21, X0
	0x03380AD4 TBNZ X8, 0x0, 0x3380AEC
	0x03380AD8 ADRP X0, 0xDA8000
	0x03380ADC LDR X0, [X0 + 0x78]
	0x03380AE0 BL 0x1C16CF4
	0x03380AE4 MOVZ W8, 0x1
	0x03380AE8 STRB W8, [X25 + 0xFD7]
	0x03380AEC AND W8, W23, 0xFFFF
	0x03380AF0 CMP W8, 0x50
	0x03380AF4 B.HI 0x3380B1C
	0x03380AF8 SUB W8, W8, 0x43
	0x03380AFC CMP W8, 0xD
	0x03380B00 B.HI 0x3380FE0
	0x03380B04 ADRP X9, 0xFFFFFFFFFD816000
	0x03380B08 ADD X9, X9, 0x818
	0x03380B0C ADR X10, 0x34
	0x03380B10 LDRH W11, [X9, X8, LSL #1]
	0x03380B14 ADD X10, X10, X11, 0x2, LSL
	0x03380B18 BR X10
	0x03380B1C SUB W8, W8, 0x63
	0x03380B20 CMP W8, 0xD
	0x03380B24 B.HI 0x3380FE0
	0x03380B28 ADRP X9, 0xFFFFFFFFFD816000
	0x03380B2C ADD X9, X9, 0x7FC
	0x03380B30 ADR X10, 0x10
	0x03380B34 LDRH W11, [X9, X8, LSL #1]
	0x03380B38 ADD X10, X10, X11, 0x2, LSL
	0x03380B3C BR X10
	0x03380B40 TBZ X22, 0x1F, 0x3380B4C
	0x03380B44 CBZ X19, 0x3380FDC
	0x03380B48 LDR W22, [X19 + 0xB0]
	0x03380B4C ADRP X8, 0xDA8000
	0x03380B50 LDR X8, [X8 + 0x78]
	0x03380B54 LDR W23, [X20 + 0x4]
	0x03380B58 LDR X0, [X8]
	0x03380B5C LDR W8, [X0 + 0xE0]
	0x03380B60 CBNZ W8, 0x3380B68
	0x03380B64 BL 0x1C16DFC
	0x03380B68 ADD W1, W23, W22
	0x03380B6C MOV X0, X20
	0x03380B70 BL 0x3385AF4
	0x03380B74 MOV X0, X21
	0x03380B78 MOV X1, X20
	0x03380B7C MOV W2, W22
	0x03380B80 MOV W3, W22
	0x03380B84 MOV X4, X19
	0x03380B88 LDP X20, X19, [X31 + 0x50]
	0x03380B8C LDP X22, X21, [X31 + 0x40]
	0x03380B90 LDP X24, X23, [X31 + 0x30]
	0x03380B94 LDP X26, X25, [X31 + 0x20]
	0x03380B98 LDP X30, X27, [X31 + 0x10]
	0x03380B9C ADD X31, X31, 0x60
	0x03380BA0 B 0x3385BF0
	0x03380BA4 ADRP X25, 0xDA8000
	0x03380BA8 LDR X25, [X25 + 0x78]
	0x03380BAC CMP W22, 0x0
	0x03380BB0 MOVZ W9, 0x7
	0x03380BB4 CSINC W22, W9, W22, LT
	0x03380BB8 LDR X0, [X25]
	0x03380BBC LDR W8, [X0 + 0xE0]
	0x03380BC0 CBNZ W8, 0x3380BC8
	0x03380BC4 BL 0x1C16DFC
	0x03380BC8 MOV X0, X20
	0x03380BCC MOV W1, W22
	0x03380BD0 BL 0x3385AF4
	0x03380BD4 MOV X0, X20
	0x03380BD8 MOV X1, X31
	0x03380BDC BL 0x338C38C
	0x03380BE0 TBZ X0, 0x0, 0x3380E34
	0x03380BE4 CBZ X19, 0x3380FDC
	0x03380BE8 ADRP X26, 0x105D000
	0x03380BEC LDRB W8, [X26 + 0x4]
	0x03380BF0 LDR X24, [X19 + 0x30]
	0x03380BF4 CBNZ W8, 0x3380C0C
	0x03380BF8 ADRP X0, 0xDA2000
	0x03380BFC LDR X0, [X0 + 0x588]
	0x03380C00 BL 0x1C16CF4
	0x03380C04 MOVZ W8, 0x1
	0x03380C08 STRB W8, [X26 + 0x4]
	0x03380C0C CBZ X24, 0x3380FDC
	0x03380C10 LDR W8, [X24 + 0x10]
	0x03380C14 CMP W8, 0x1
	0x03380C18 B.NE 0x3380E24
	0x03380C1C LDRSW X26, [X21 + 0x18]
	0x03380C20 LDR W8, [X21 + 0x10]
	0x03380C24 CMP W26, W8
	0x03380C28 B.GE 0x3380E24
	0x03380C2C CMP W26, W8
	0x03380C30 B.CS 0x3381028
	0x03380C34 LDR X27, [X21 + 0x8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x105D000
	009 Move W8, [X24+4006]
	010 Move W23, W4
	011 Move X19, X3
	012 Move X20, X2
	013 Move X21, X1
	014 Move X22, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {33}
	019 Move X0, 0xDA2000
	020 Move X0, [X0+4048]
	021 Call 0x1C17CF4
	022 Move X0, 0xD76000
	023 Move X0, [X0+3144]
	024 Call 0x1C17CF4
	025 Move X0, 0xDAB000
	026 Move X0, [X0+3944]
	027 Call 0x1C17CF4
	028 Move X0, 0xDA3000
	029 Move X0, [X0+40]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X24+4006], W8
	033 Compare W19, 0
	034 JumpIfEqual {59}
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X9, -41848832
	037 Move W8, W23
	038 Add X9, X9, 2037
	039 NotImplemented "Instruction ADR not yet implemented."
	040 Move W11, [X9]
	041 Add X10, X10, X11
	042 CallNoReturn X10
	043 Move X8, 0xD76000
	044 Move X8, [X8+3144]
	045 Move X0, [X8]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move X0, X31
	051 Call CultureInfo.get_CurrentCulture
	052 Compare X0, 0
	053 JumpIfEqual {165}
	054 Move X8, [X0]
	055 Move X9, [X8+504]
	056 Move X1, [X8+512]
	057 NotImplemented "Instruction BLR not yet implemented."
	058 Move X4, X0
	059 Move W0, W23
	060 Move X1, X31
	061 Call String.CheckStringComparison, X0
	062 Move X20, [X31+48]
	063 Move X19, [X31+56]
	064 Move X22, [X31+32]
	065 Move X21, [X31+40]
	066 Move X24, [X31+16]
	067 Move X23, [X31+24]
	068 Move W0, 1
	069 Move X30, [X31+64]
	070 Return X0
	071 Move X8, 0xD76000
	072 Move X8, [X8+3144]
	073 Move X0, [X8]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {78}
	077 Call 0x1C17DFC
	078 Move X0, X31
	079 Call CultureInfo.get_CurrentCulture
	080 Compare X0, 0
	081 JumpIfEqual {165}
	082 Move X8, [X0]
	083 Move X9, [X8+504]
	084 Move X1, [X8+512]
	085 NotImplemented "Instruction BLR not yet implemented."
	086 Move X4, X0
	087 Move X23, 0xDA2000
	088 Move X23, [X23+4048]
	089 Move X0, [X23]
	090 Move W8, [X0+224]
	091 Compare W8, 0
	092 JumpIfNotEqual {95}
	093 Call 0x1C17DFC
	094 Move X0, [X23]
	095 Move X8, [X0+184]
	096 Move X4, [X8]
	097 Move X0, X22
	098 Move X1, X21
	099 Move X2, X20
	100 Move X3, X19
	101 Move X20, [X31+48]
	102 Move X19, [X31+56]
	103 Move X22, [X31+32]
	104 Move X21, [X31+40]
	105 Move X24, [X31+16]
	106 Move X23, [X31+24]
	107 Move X5, X31
	108 Move X30, [X31+64]
	109 Call SpanHelpers.EndsWithCultureHelper, X0, X1, X2
	110 Return X0
	111 Move X23, 0xDA2000
	112 Move X23, [X23+4048]
	113 Move X0, [X23]
	114 Move W8, [X0+224]
	115 Compare W8, 0
	116 JumpIfNotEqual {119}
	117 Call 0x1C17DFC
	118 Move X0, [X23]
	119 Move X8, [X0+184]
	120 Move X4, [X8]
	121 Move X0, X22
	122 Move X1, X21
	123 Move X2, X20
	124 Move X3, X19
	125 Move X20, [X31+48]
	126 Move X19, [X31+56]
	127 Move X22, [X31+32]
	128 Move X21, [X31+40]
	129 Move X24, [X31+16]
	130 Move X23, [X31+24]
	131 Move X5, X31
	132 Move X30, [X31+64]
	133 Call SpanHelpers.EndsWithCultureIgnoreCaseHelper, X0, X1, X2
	134 Return X0
	135 Move X8, 0xDAB000
	136 Move X8, [X8+3944]
	137 Move X0, X22
	138 Move X1, X21
	139 Move X2, X20
	140 Move X4, [X8]
	141 Move X3, X19
	142 Move X20, [X31+48]
	143 Move X19, [X31+56]
	144 Move X22, [X31+32]
	145 Move X21, [X31+40]
	146 Move X24, [X31+16]
	147 Move X23, [X31+24]
	148 Move X30, [X31+64]
	149 Call 0x338D170
	150 Return X0
	151 Move X0, X22
	152 Move X1, X21
	153 Move X2, X20
	154 Move X3, X19
	155 Move X20, [X31+48]
	156 Move X19, [X31+56]
	157 Move X22, [X31+32]
	158 Move X21, [X31+40]
	159 Move X24, [X31+16]
	160 Move X23, [X31+24]
	161 Move X4, X31
	162 Move X30, [X31+64]
	163 Call SpanHelpers.EndsWithOrdinalIgnoreCaseHelper, X0, X1
	164 Return X0
	165 Call 0x1C17F20
	166 Move X0, 0xD7C000
	167 Move X0, [X0+1400]
	168 Call 0x1C17D08
	169 Call 0x1C17F10
	170 Move X19, X0
	171 Move X0, 0xDA2000
	172 Move X0, [X0+4056]
	173 Call 0x1C17D08
	174 Move X20, X0
	175 Move X0, 0xDA2000
	176 Move X0, [X0+4064]
	177 Call 0x1C17D08
	178 Move X2, X0
	179 Move X0, X19
	180 Move X1, X20
	181 Move X3, X31
	182 Call ArgumentException..ctor, X0, X1, X2
	183 Move X0, 0xDAB000
	184 Move X0, [X0+3952]
	185 Call 0x1C17D08
	186 Move X1, X0
	187 Move X0, X19
	188 Call 0x1C17DEC

Method: System.Span`1<T> AsSpan(T[] array, System.Int32 start)

Disassembly:
	0x02217904 LDR X0, [X0 + 0xD90]
	0x02217908 BL 0x1C16CF4
	0x0221790C ADRP X0, 0x1EDC000
	0x02217910 LDR X0, [X0 + 0x6C0]
	0x02217914 BL 0x1C16CF4
	0x02217918 ADRP X0, 0x1F03000
	0x0221791C LDR X0, [X0 + 0xD98]
	0x02217920 BL 0x1C16CF4
	0x02217924 ADRP X0, 0x1F03000
	0x02217928 LDR X0, [X0 + 0xDA0]
	0x0221792C BL 0x1C16CF4
	0x02217930 ADRP X0, 0x1F03000
	0x02217934 LDR X0, [X0 + 0xDA8]
	0x02217938 BL 0x1C16CF4
	0x0221793C LDR X8, [X20 + 0x38]
	0x02217940 CBNZ X8, 0x2217950
	0x02217944 MOV X0, X20
	0x02217948 BL 0x1C5C6E0
	0x0221794C LDR X8, [X20 + 0x38]
	0x02217950 ADRP X22, 0x1EDC000
	0x02217954 LDR X22, [X22 + 0x6C0]
	0x02217958 LDR X21, [X8]
	0x0221795C LDR X0, [X22]
	0x02217960 LDR W9, [X0 + 0xE0]
	0x02217964 CBNZ W9, 0x221796C
	0x02217968 BL 0x1C16DFC
	0x0221796C MOV X0, X21
	0x02217970 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X2+56]
	005 Move W19, W1
	006 Move X20, X0
	007 Compare X8, 0
	008 JumpIfEqual {19}
	009 Compare X20, 0
	010 JumpIfEqual {23}
	011 Move W8, [X20+24]
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move X0, X31
	014 Call ThrowHelper.ThrowArgumentOutOfRangeException
	015 Move W8, [X20+24]
	016 Add X9, X20, W19
	017 Add X0, X9, 32
	018 Subtract W1, W8, W19
	019 Move X0, X2
	020 Call 0x1C5D6E0
	021 Compare X20, 0
	022 JumpIfNotEqual {11}
	023 Compare W19, 0
	024 JumpIfEqual {27}
	025 Move X0, X31
	026 Call ThrowHelper.ThrowArgumentOutOfRangeException
	027 Move X0, X31
	028 Move X1, X31
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Return X0

Method: System.ReadOnlySpan`1<System.Char> AsSpan(System.String text)

Disassembly:
	0x03380C38 MOV X0, X24
	0x03380C3C MOV W1, W31
	0x03380C40 MOV X2, X31
	0x03380C44 BL 0x3222A1C
	0x03380C48 ADD W8, W26, 0x1
	0x03380C4C STRH W0, [X27, X26, LSL #1]
	0x03380C50 STR W8, [X21 + 0x18]
	0x03380C54 B 0x3380E34
	0x03380C58 TBZ X22, 0x1F, 0x3380C64
	0x03380C5C CBZ X19, 0x3380FDC
	0x03380C60 LDR W22, [X19 + 0xAC]
	0x03380C64 ADRP X24, 0xDA8000
	0x03380C68 LDR X24, [X24 + 0x78]
	0x03380C6C LDR W23, [X20 + 0x4]
	0x03380C70 LDR X0, [X24]
	0x03380C74 LDR W8, [X0 + 0xE0]
	0x03380C78 CBNZ W8, 0x3380C80
	0x03380C7C BL 0x1C16DFC
	0x03380C80 ADD W1, W23, W22
	0x03380C84 MOV X0, X20
	0x03380C88 BL 0x3385AF4
	0x03380C8C MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x105D000
	005 Move W8, [X20+4007]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xD9B000
	012 Move X0, [X0+656]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+4007], W8
	016 Compare X19, 0
	017 JumpIfEqual {22}
	018 Move X0, X19
	019 Move X1, X31
	020 Call String.GetRawStringData, X0
	021 Move W1, [X19+16]
	022 Move X0, X31
	023 Move X1, X31
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Return X0

Method: System.ReadOnlySpan`1<System.Char> AsSpan(System.String text, System.Int32 start)

Disassembly:
	0x03380C90 MOV X1, X31
	0x03380C94 BL 0x338C38C
	0x03380C98 TBZ X0, 0x0, 0x3380E1C
	0x03380C9C CBZ X19, 0x3380FDC
	0x03380CA0 ADRP X25, 0x105D000
	0x03380CA4 LDRB W8, [X25 + 0x4]
	0x03380CA8 LDR X23, [X19 + 0x30]
	0x03380CAC CBNZ W8, 0x3380CC4
	0x03380CB0 ADRP X0, 0xDA2000
	0x03380CB4 LDR X0, [X0 + 0x588]
	0x03380CB8 BL 0x1C16CF4
	0x03380CBC MOVZ W8, 0x1
	0x03380CC0 STRB W8, [X25 + 0x4]
	0x03380CC4 CBZ X23, 0x3380FDC
	0x03380CC8 LDR W8, [X23 + 0x10]
	0x03380CCC CMP W8, 0x1
	0x03380CD0 B.NE 0x3380E74
	0x03380CD4 LDRSW X25, [X21 + 0x18]
	0x03380CD8 LDR W8, [X21 + 0x10]
	0x03380CDC CMP W25, W8
	0x03380CE0 B.GE 0x3380E74
	0x03380CE4 CMP W25, W8
	0x03380CE8 B.CS 0x3381028
	0x03380CEC LDR X26, [X21 + 0x8]
	0x03380CF0 MOV X0, X23
	0x03380CF4 MOV W1, W31
	0x03380CF8 MOV X2, X31
	0x03380CFC BL 0x3222A1C
	0x03380D00 ADD W8, W25, 0x1
	0x03380D04 STRH W0, [X26, X25, LSL #1]
	0x03380D08 STR W8, [X21 + 0x18]
	0x03380D0C B 0x3380E84
	0x03380D10 CMP W22, 0x0
	0x03380D14 B.GT 0x3380ED4
	0x03380D18 ADDS W31, W22, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x105D000
	006 Move W8, [X21+4008]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xD9B000
	014 Move X0, [X0+656]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+4008], W8
	018 Compare X20, 0
	019 JumpIfEqual {31}
	020 Move W8, [X20+16]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move W0, 24
	023 Move X1, X31
	024 Call ThrowHelper.ThrowArgumentOutOfRangeException, X0
	025 Move X0, X20
	026 Move X1, X31
	027 Call String.GetRawStringData, X0
	028 Move W8, [X20+16]
	029 Add X0, X0, W19
	030 Subtract W1, W8, W19
	031 Compare W19, 0
	032 JumpIfEqual {36}
	033 Move W0, 24
	034 Move X1, X31
	035 Call ThrowHelper.ThrowArgumentOutOfRangeException, X0
	036 Move X0, X31
	037 Move X1, X31
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return X0

Method: System.ReadOnlySpan`1<System.Char> AsSpan(System.String text, System.Int32 start, System.Int32 length)

Disassembly:
	0x03380D1C B.NE 0x3380ED0
	0x03380D20 TBZ X24, 0x0, 0x3380ED0
	0x03380D24 MOV X0, X20
	0x03380D28 MOV X1, X31
	0x03380D2C BL 0x338C3A8
	0x03380D30 LDRH W8, [X0]
	0x03380D34 CBNZ W8, 0x3380D48
	0x03380D38 MOV X0, X20
	0x03380D3C MOV W1, W31
	0x03380D40 MOV X2, X31
	0x03380D44 BL 0x338C39C
	0x03380D48 MOVZ W24, 0x1
	0x03380D4C MOVZ W22, 0x1D
	0x03380D50 B 0x3380EFC
	0x03380D54 TBZ X22, 0x1F, 0x3380D60
	0x03380D58 CBZ X19, 0x3380FDC
	0x03380D5C LDR W22, [X19 + 0xAC]
	0x03380D60 ADRP X8, 0xDA8000
	0x03380D64 LDR X8, [X8 + 0x78]
	0x03380D68 LDR W23, [X20 + 0x4]
	0x03380D6C LDR X0, [X8]
	0x03380D70 LDR W8, [X0 + 0xE0]
	0x03380D74 CBNZ W8, 0x3380D7C
	0x03380D78 BL 0x1C16DFC
	0x03380D7C ADD W1, W23, W22
	0x03380D80 MOV X0, X20
	0x03380D84 BL 0x3385AF4
	0x03380D88 MOV X0, X21
	0x03380D8C MOV X1, X20
	0x03380D90 MOV W3, W22
	0x03380D94 MOV X4, X19
	0x03380D98 LDP X20, X19, [X31 + 0x50]
	0x03380D9C LDP X22, X21, [X31 + 0x40]
	0x03380DA0 LDP X24, X23, [X31 + 0x30]
	0x03380DA4 LDP X26, X25, [X31 + 0x20]
	0x03380DA8 LDP X30, X27, [X31 + 0x10]
	0x03380DAC ADD X31, X31, 0x60
	0x03380DB0 B 0x3386388
	0x03380DB4 TBZ X22, 0x1F, 0x3380DC0
	0x03380DB8 CBZ X19, 0x3380FDC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x105D000
	007 Move W8, [X22+4009]
	008 Move W19, W2
	009 Move W20, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xD9B000
	016 Move X0, [X0+656]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+4009], W8
	020 Compare X21, 0
	021 JumpIfEqual {33}
	022 Move W8, [X21+16]
	023 Subtract W8, W8, W20
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W0, 24
	026 Move X1, X31
	027 Call ThrowHelper.ThrowArgumentOutOfRangeException, X0
	028 Move X0, X21
	029 Move X1, X31
	030 Call String.GetRawStringData, X0
	031 Add X0, X0, W20
	032 Move W1, W19
	033 Or W8, W19, W20
	034 Compare W8, 0
	035 JumpIfEqual {39}
	036 Move W0, 24
	037 Move X1, X31
	038 Call ThrowHelper.ThrowArgumentOutOfRangeException, X0
	039 Move X0, X31
	040 Move X1, X31
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Return X0

Method: System.ReadOnlySpan`1<System.Char> Trim(System.ReadOnlySpan`1<System.Char> span)

Disassembly:
	0x0337813C ADD X31, X31, 0x20
	0x03378140 RET
	0x03378144 STR X30, [X31 - 0x20]!
	0x03378148 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Call MemoryExtensions.TrimStart, X0
	003 Move X30, [X31+16]
	004 Call MemoryExtensions.TrimEnd, X0
	005 Return X0

Method: System.ReadOnlySpan`1<System.Char> TrimStart(System.ReadOnlySpan`1<System.Char> span)

Disassembly:
	0x03380DBC LDR W22, [X19 + 0xC8]
	0x03380DC0 LDR W8, [X20 + 0x4]
	0x03380DC4 ADD W23, W8, 0x2
	0x03380DC8 STR W23, [X20 + 0x4]
	0x03380DCC ADRP X8, 0xDA8000
	0x03380DD0 LDR X8, [X8 + 0x78]
	0x03380DD4 LDR X0, [X8]
	0x03380DD8 LDR W8, [X0 + 0xE0]
	0x03380DDC CBNZ W8, 0x3380DE4
	0x03380DE0 BL 0x1C16DFC
	0x03380DE4 ADD W1, W23, W22
	0x03380DE8 MOV X0, X20
	0x03380DEC BL 0x3385AF4
	0x03380DF0 MOV X0, X21
	0x03380DF4 MOV X1, X20
	0x03380DF8 MOV W3, W22
	0x03380DFC MOV X4, X19
	0x03380E00 LDP X20, X19, [X31 + 0x50]
	0x03380E04 LDP X22, X21, [X31 + 0x40]
	0x03380E08 LDP X24, X23, [X31 + 0x30]
	0x03380E0C LDP X26, X25, [X31 + 0x20]
	0x03380E10 LDP X30, X27, [X31 + 0x10]
	0x03380E14 ADD X31, X31, 0x60
	0x03380E18 B 0x3386BEC
	0x03380E1C CBNZ X19, 0x3380E84
	0x03380E20 B 0x3380FDC
	0x03380E24 MOV X0, X21
	0x03380E28 MOV X1, X24
	0x03380E2C MOV X2, X31
	0x03380E30 BL 0x3241020
	0x03380E34 LDR X0, [X25]
	0x03380E38 LDR W8, [X0 + 0xE0]
	0x03380E3C CBNZ W8, 0x3380E44
	0x03380E40 BL 0x1C16DFC
	0x03380E44 MOV X0, X21
	0x03380E48 MOV X1, X20
	0x03380E4C MOV W3, W22
	0x03380E50 MOV X4, X19
	0x03380E54 MOV W5, W23
	0x03380E58 LDP X20, X19, [X31 + 0x50]
	0x03380E5C LDP X22, X21, [X31 + 0x40]
	0x03380E60 LDP X24, X23, [X31 + 0x30]
	0x03380E64 LDP X26, X25, [X31 + 0x20]
	0x03380E68 LDP X30, X27, [X31 + 0x10]
	0x03380E6C ADD X31, X31, 0x60
	0x03380E70 B 0x33865DC
	0x03380E74 MOV X0, X21
	0x03380E78 MOV X1, X23
	0x03380E7C MOV X2, X31
	0x03380E80 BL 0x3241020
	0x03380E84 LDR X0, [X24]
	0x03380E88 LDR X19, [X19 + 0x38]
	0x03380E8C LDR W8, [X0 + 0xE0]
	0x03380E90 CBNZ W8, 0x3380E98
	0x03380E94 BL 0x1C16DFC
	0x03380E98 MOV X0, X21
	0x03380E9C MOV X1, X20
	0x03380EA0 MOV W3, W22
	0x03380EA4 MOV X5, X31
	0x03380EA8 MOV X6, X19
	0x03380EAC MOV X7, X31

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x105D000
	010 Move W8, [X21+4010]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0xD76000
	018 Move X0, [X0+368]
	019 Call 0x1C17CF4
	020 Move X0, 0xDA8000
	021 Move X0, [X0+2024]
	022 Call 0x1C17CF4
	023 Move X0, 0xDA3000
	024 Move X0, [X0+40]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+4010], W8
	028 Move X23, 0xDA8000
	029 Move X23, [X23+2024]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X24, 0xD76000
	032 Move X24, [X24+368]
	033 Move X22, X31
	034 And X25, X19, 0
	035 Move X0, [X24]
	036 NotImplemented "Instruction LDRH not yet implemented."
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move W0, W21
	042 Move X1, X31
	043 Call Char.IsWhiteSpace, X0
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {53}
	048 Add X22, X22, 1
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move W22, W19
	051 Move W22, W31
	052 Move X21, [X23]
	053 Move X21, [X23]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X0, X31
	056 Call ThrowHelper.ThrowArgumentOutOfRangeException
	057 Move X0, [X21+32]
	058 Move W8, [X0+309]
	059 Move TEMP, X8
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfEqual {64}
	063 Call 0x1C5D684
	064 Subtract W1, W19, W22
	065 Add X0, X20, W22
	066 Move X20, [X31+48]
	067 Move X19, [X31+56]
	068 Move X22, [X31+32]
	069 Move X21, [X31+40]
	070 Move X24, [X31+16]
	071 Move X23, [X31+24]
	072 Move X30, [X31+64]
	073 Move X25, [X31+72]
	074 Return X0

Method: System.ReadOnlySpan`1<System.Char> TrimEnd(System.ReadOnlySpan`1<System.Char> span)

Disassembly:
	0x03380EB0 BL 0x3385E58
	0x03380EB4 LDP X20, X19, [X31 + 0x50]
	0x03380EB8 LDP X22, X21, [X31 + 0x40]
	0x03380EBC LDP X24, X23, [X31 + 0x30]
	0x03380EC0 LDP X26, X25, [X31 + 0x20]
	0x03380EC4 LDP X30, X27, [X31 + 0x10]
	0x03380EC8 ADD X31, X31, 0x60
	0x03380ECC RET
	0x03380ED0 LDR W22, [X20]
	0x03380ED4 ADRP X8, 0xDA8000
	0x03380ED8 LDR X8, [X8 + 0x78]
	0x03380EDC LDR X0, [X8]
	0x03380EE0 LDR W8, [X0 + 0xE0]
	0x03380EE4 CBNZ W8, 0x3380EEC
	0x03380EE8 BL 0x1C16DFC
	0x03380EEC MOV X0, X20
	0x03380EF0 MOV W1, W22
	0x03380EF4 BL 0x3385AF4
	0x03380EF8 MOV W24, W31
	0x03380EFC MOV X0, X20
	0x03380F00 MOV X1, X31
	0x03380F04 BL 0x338C38C
	0x03380F08 TBZ X0, 0x0, 0x3380F90
	0x03380F0C CBZ X19, 0x3380FDC
	0x03380F10 ADRP X26, 0x105D000
	0x03380F14 LDRB W8, [X26 + 0x4]
	0x03380F18 LDR X25, [X19 + 0x30]
	0x03380F1C CBNZ W8, 0x3380F34
	0x03380F20 ADRP X0, 0xDA2000
	0x03380F24 LDR X0, [X0 + 0x588]
	0x03380F28 BL 0x1C16CF4
	0x03380F2C MOVZ W8, 0x1
	0x03380F30 STRB W8, [X26 + 0x4]
	0x03380F34 CBZ X25, 0x3380FDC
	0x03380F38 LDR W8, [X25 + 0x10]
	0x03380F3C CMP W8, 0x1
	0x03380F40 B.NE 0x3380F80
	0x03380F44 LDRSW X26, [X21 + 0x18]
	0x03380F48 LDR W8, [X21 + 0x10]
	0x03380F4C CMP W26, W8
	0x03380F50 B.GE 0x3380F80
	0x03380F54 CMP W26, W8
	0x03380F58 B.CS 0x3381028
	0x03380F5C LDR X27, [X21 + 0x8]
	0x03380F60 MOV X0, X25
	0x03380F64 MOV W1, W31
	0x03380F68 MOV X2, X31
	0x03380F6C BL 0x3222A1C
	0x03380F70 ADD W8, W26, 0x1
	0x03380F74 STRH W0, [X27, X26, LSL #1]
	0x03380F78 STR W8, [X21 + 0x18]
	0x03380F7C B 0x3380F90
	0x03380F80 MOV X0, X21
	0x03380F84 MOV X1, X25
	0x03380F88 MOV X2, X31
	0x03380F8C BL 0x3241020
	0x03380F90 ADRP X8, 0xDA8000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x105D000
	010 Move X22, 0xDA7000
	011 Move X24, 0xD76000
	012 Move W8, [X21+4011]
	013 Move X22, [X22+3472]
	014 Move X24, [X24+368]
	015 Move X20, X1
	016 Move X19, X0
	017 Move W25, W20
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {34}
	022 Move X0, 0xD76000
	023 Move X0, [X0+368]
	024 Call 0x1C17CF4
	025 Move X0, 0xDA7000
	026 Move X0, [X0+3472]
	027 Call 0x1C17CF4
	028 Move X0, 0xDA3000
	029 Move X0, [X0+40]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+4011], W8
	033 Move W25, W20
	034 Move W23, W25
	035 Subtract W25, W25, 1
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, [X24]
	038 NotImplemented "Instruction LDRH not yet implemented."
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move W0, W21
	044 Move X1, X31
	045 Call Char.IsWhiteSpace, X0
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfEqual {34}
	050 Move X21, [X22]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X0, X31
	053 Call ThrowHelper.ThrowArgumentOutOfRangeException
	054 Move X0, [X21+32]
	055 Move W8, [X0+309]
	056 Move TEMP, X8
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfEqual {61}
	060 Call 0x1C5D684
	061 Move W1, W23
	062 Move X0, X19
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X24, [X31+16]
	068 Move X23, [X31+24]
	069 Move X30, [X31+64]
	070 Move X25, [X31+72]
	071 Return X0
	072 Call 0x1C17F28

Method: System.Int32 IndexOf(System.ReadOnlySpan`1<T> span, T value)

Disassembly:
	0x02218044 MOV X1, X31
	0x02218048 BL 0x338C698
	0x0221804C ADRP X8, 0x1F02000
	0x02218050 LDR X8, [X8 + 0xDA8]
	0x02218054 MOV X20, X0
	0x02218058 MOV X1, X31
	0x0221805C LDR X8, [X8]
	0x02218060 MOV X0, X8
	0x02218064 BL 0x338C698
	0x02218068 MOV X1, X0
	0x0221806C MOV X0, X20
	0x02218070 MOV X2, X31
	0x02218074 BL 0x3395194
	0x02218078 ANDS W31, W0, 0x1
	0x0221807C MOVZ W8, 0x8
	0x02218080 CSEL X8, X8, X31, NE
	0x02218084 B 0x2217EFC
	0x02218088 SUB X31, X31, 0x40
	0x0221808C STP X30, X23, [X31 + 0x10]
	0x02218090 STP X22, X21, [X31 + 0x20]
	0x02218094 STP X20, X19, [X31 + 0x30]
	0x02218098 LDR X8, [X4 + 0x38]
	0x0221809C MOV X22, X4
	0x022180A0 MOV X23, X3
	0x022180A4 MOV X19, X2
	0x022180A8 MOV X20, X1
	0x022180AC MOV X21, X0
	0x022180B0 CBNZ X8, 0x22180C0
	0x022180B4 MOV X0, X22
	0x022180B8 BL 0x1C5C6E0
	0x022180BC LDR X8, [X22 + 0x38]
	0x022180C0 STR X31, [X31 + 0x8]
	0x022180C4 LDR X1, [X8 + 0x20]
	0x022180C8 ADD X0, X31, 0x8
	0x022180CC BL 0x1F96FD0
	0x022180D0 CMP W20, W23
	0x022180D4 TBZ X0, 0x0, 0x22180FC
	0x022180D8 B.NE 0x221811C
	0x022180DC LDR X8, [X31 + 0x8]
	0x022180E0 SXTW X9, W20
	0x022180E4 MOV X0, X21
	0x022180E8 MOV X1, X19
	0x022180EC MUL X2, X8, X9
	0x022180F0 MOV X3, X31
	0x022180F4 BL 0x3391068
	0x022180F8 B 0x2218120
	0x022180FC B.NE 0x221811C
	0x02218100 LDR X8, [X22 + 0x38]
	0x02218104 MOV X0, X21
	0x02218108 MOV X1, X19
	0x0221810C MOV W2, W20
	0x02218110 LDR X3, [X8 + 0x38]
	0x02218114 BL 0x22586B8
	0x02218118 B 0x2218120
	0x0221811C MOV W0, W31
	0x02218120 LDP X20, X19, [X31 + 0x30]
	0x02218124 LDP X22, X21, [X31 + 0x20]
	0x02218128 LDP X30, X23, [X31 + 0x10]
	0x0221812C AND W0, W0, 0x1
	0x02218130 ADD X31, X31, 0x40
	0x02218134 RET
	0x02218138 STP X29, X30, [X31 - 0x40]!
	0x0221813C STP X24, X23, [X31 + 0x10]
	0x02218140 STP X22, X21, [X31 + 0x20]
	0x02218144 STP X20, X19, [X31 + 0x30]
	0x02218148 ADD X29, X31, 0x0
	0x0221814C SUB X31, X31, 0x30
	0x02218150 MRS X24, 0xC000
	0x02218154 LDR X8, [X24 + 0x28]
	0x02218158 MOV X19, X4
	0x0221815C STUR X8, [X29 - 0x8]
	0x02218160 STP X0, X1, [X29 - 0x18]
	0x02218164 STP X2, X3, [X29 - 0x28]
	0x02218168 LDR X20, [X4 + 0x38]
	0x0221816C CBNZ X20, 0x221817C
	0x02218170 MOV X0, X19
	0x02218174 BL 0x1C5C6E0
	0x02218178 LDR X20, [X19 + 0x38]
	0x0221817C LDR X8, [X20 + 0x18]
	0x02218180 LDR W21, [X8 + 0xFC]
	0x02218184 ADD X8, X31, 0x0
	0x02218188 ADD X9, X21, 0xF
	0x0221818C AND X9, X9, 0x1FFFFFFFF
	0x02218190 SUB X22, X8, X9
	0x02218194 ADD X31, X22, 0x0
	0x02218198 ADD X8, X31, 0x0
	0x0221819C SUB X23, X8, X9
	0x022181A0 STUR X31, [X29 - 0x30]
	0x022181A4 ADD X31, X23, 0x0
	0x022181A8 MOV X0, X23
	0x022181AC MOV W1, W31
	0x022181B0 MOV X2, X21
	0x022181B4 BL 0x3EB1B10
	0x022181B8 LDR X1, [X20 + 0x8]
	0x022181BC SUB X0, X29, 0x18

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X3+56]
	009 Move X22, X3
	010 Move W20, W2
	011 Move X19, X1
	012 Move X21, X0
	013 Compare X8, 0
	014 JumpIfNotEqual {30}
	015 Move X0, 0x1F03000
	016 Move X0, [X0+3432]
	017 Call 0x1C17CF4
	018 Move X0, 0x1F03000
	019 Move X0, [X0+3440]
	020 Call 0x1C17CF4
	021 Move X0, 0x1EDC000
	022 Move X0, [X0+1728]
	023 Call 0x1C17CF4
	024 Move X8, [X22+56]
	025 Compare X8, 0
	026 JumpIfNotEqual {30}
	027 Move X0, X22
	028 Call 0x1C5D6E0
	029 Move X8, [X22+56]
	030 Move X24, 0x1EDC000
	031 Move X24, [X24+1728]
	032 Move X23, [X8]
	033 Move X0, [X24]
	034 Move W9, [X0+224]
	035 Compare W9, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, X23
	039 Move X1, X31
	040 Call Type.GetTypeFromHandle, X0
	041 Move X8, 0x1F03000
	042 Move X8, [X8+3432]
	043 Move X23, X0
	044 Move X1, X31
	045 Move X8, [X8]
	046 Move X0, X8
	047 Call Type.GetTypeFromHandle, X0
	048 Move X1, X0
	049 Move X0, X23
	050 Move X2, X31
	051 Call Type.op_Equality, X0, X1
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {69}
	056 Move X0, X21
	057 Move W1, W20
	058 Move W2, W19
	059 Move X20, [X31+48]
	060 Move X19, [X31+56]
	061 Move X22, [X31+32]
	062 Move X21, [X31+40]
	063 Move X24, [X31+16]
	064 Move X23, [X31+24]
	065 Move X3, X31
	066 Move X30, [X31+64]
	067 Call SpanHelpers.IndexOf, X0, X1, X2
	068 Return X0
	069 Move X0, [X24]
	070 Move X8, [X22+56]
	071 Move W9, [X0+224]
	072 Move X23, [X8]
	073 Compare W9, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1C17DFC
	076 Move X0, X23
	077 Move X1, X31
	078 Call Type.GetTypeFromHandle, X0
	079 Move X8, 0x1F03000
	080 Move X8, [X8+3440]
	081 Move X23, X0
	082 Move X1, X31
	083 Move X8, [X8]
	084 Move X0, X8
	085 Call Type.GetTypeFromHandle, X0
	086 Move X1, X0
	087 Move X0, X23
	088 Move X2, X31
	089 Call Type.op_Equality, X0, X1
	090 Move TEMP, X0
	091 And TEMP, TEMP, 1
	092 Compare TEMP, 1
	093 JumpIfNotEqual {107}
	094 And W1, W20, 255
	095 Move X0, X21
	096 Move W2, W19
	097 Move X20, [X31+48]
	098 Move X19, [X31+56]
	099 Move X22, [X31+32]
	100 Move X21, [X31+40]
	101 Move X24, [X31+16]
	102 Move X23, [X31+24]
	103 Move X3, X31
	104 Move X30, [X31+64]
	105 Call SpanHelpers.IndexOf, X0, X1, X2
	106 Return X0
	107 Move X8, [X22+56]
	108 Move X0, X21
	109 Move W1, W20
	110 Move W2, W19
	111 Move X3, [X8+56]
	112 Move X20, [X31+48]
	113 Move X19, [X31+56]
	114 Move X22, [X31+32]
	115 Move X21, [X31+40]
	116 Move X24, [X31+16]
	117 Move X23, [X31+24]
	118 Move X30, [X31+64]
	119 Call 0x22580F8, X0, X1, X2
	120 Return X0

Method: System.Int32 IndexOfAny(System.ReadOnlySpan`1<T> span, System.ReadOnlySpan`1<T> values)

Disassembly:
	0x022185F4 STP X24, X23, [X31 + 0x30]
	0x022185F8 STP X22, X21, [X31 + 0x40]
	0x022185FC STP X20, X19, [X31 + 0x50]
	0x02218600 ADD X29, X31, 0x0
	0x02218604 SUB X31, X31, 0x10
	0x02218608 MRS X27, 0xC000
	0x0221860C LDR X8, [X27 + 0x28]
	0x02218610 MOV X19, X2
	0x02218614 MOV X20, X1
	0x02218618 MOV X22, X0
	0x0221861C STUR X8, [X29 - 0x8]
	0x02218620 LDR X8, [X2 + 0x38]
	0x02218624 CBNZ X8, 0x2218634
	0x02218628 MOV X0, X19
	0x0221862C BL 0x1C5C6E0
	0x02218630 LDR X8, [X19 + 0x38]
	0x02218634 LDR X8, [X8 + 0x8]
	0x02218638 LDR W21, [X8 + 0xFC]
	0x0221863C ADD X8, X31, 0x0
	0x02218640 ADD X9, X21, 0xF
	0x02218644 AND X9, X9, 0x1FFFFFFFF
	0x02218648 SUB X25, X8, X9
	0x0221864C ADD X31, X25, 0x0
	0x02218650 ADD X8, X31, 0x0
	0x02218654 SUB X26, X8, X9
	0x02218658 ADD X31, X26, 0x0
	0x0221865C ADD X8, X31, 0x0
	0x02218660 SUB X23, X8, X9
	0x02218664 ADD X31, X23, 0x0
	0x02218668 ADD X8, X31, 0x0
	0x0221866C SUB X24, X8, X9
	0x02218670 ADD X31, X24, 0x0
	0x02218674 MOV X0, X24
	0x02218678 MOV W1, W31
	0x0221867C MOV X2, X21
	0x02218680 BL 0x3EB1B10
	0x02218684 MOV X0, X25
	0x02218688 MOV X1, X22
	0x0221868C MOV X2, X21
	0x02218690 BL 0x3EB1AC0
	0x02218694 MOV X0, X24
	0x02218698 MOV X1, X25
	0x0221869C MOV X2, X21
	0x022186A0 BL 0x3EB1AC0
	0x022186A4 MOV X0, X26
	0x022186A8 MOV X1, X20
	0x022186AC MOV X2, X21
	0x022186B0 BL 0x3EB1AC0
	0x022186B4 MOV X0, X22
	0x022186B8 MOV X1, X26
	0x022186BC MOV X2, X21
	0x022186C0 BL 0x3EB1AC0
	0x022186C4 LDR X8, [X19 + 0x38]
	0x022186C8 LDR X0, [X8 + 0x8]
	0x022186CC LDRB W8, [X0 + 0x135]
	0x022186D0 TBNZ X8, 0x0, 0x22186D8
	0x022186D4 BL 0x1C5C684
	0x022186D8 MOV X0, X23
	0x022186DC MOV X1, X24
	0x022186E0 MOV X2, X21
	0x022186E4 BL 0x3EB1AC0
	0x022186E8 MOV X0, X20
	0x022186EC MOV X1, X23
	0x022186F0 MOV X2, X21
	0x022186F4 BL 0x3EB1AC0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X4+56]
	009 Move X22, X4
	010 Move X19, X3
	011 Move X20, X2
	012 Move X21, X1
	013 Move X23, X0
	014 Compare X8, 0
	015 JumpIfNotEqual {28}
	016 Move X0, 0x1F03000
	017 Move X0, [X0+3432]
	018 Call 0x1C17CF4
	019 Move X0, 0x1EDC000
	020 Move X0, [X0+1728]
	021 Call 0x1C17CF4
	022 Move X8, [X22+56]
	023 Compare X8, 0
	024 JumpIfNotEqual {28}
	025 Move X0, X22
	026 Call 0x1C5D6E0
	027 Move X8, [X22+56]
	028 Move X9, 0x1EDC000
	029 Move X9, [X9+1728]
	030 Move X24, [X8]
	031 Move X0, [X9]
	032 Move W9, [X0+224]
	033 Compare W9, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X24
	037 Move X1, X31
	038 Call Type.GetTypeFromHandle, X0
	039 Move X8, 0x1F03000
	040 Move X8, [X8+3432]
	041 Move X24, X0
	042 Move X1, X31
	043 Move X8, [X8]
	044 Move X0, X8
	045 Call Type.GetTypeFromHandle, X0
	046 Move X1, X0
	047 Move X0, X24
	048 Move X2, X31
	049 Call Type.op_Equality, X0, X1
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {68}
	054 Move X0, X23
	055 Move W1, W21
	056 Move X2, X20
	057 Move W3, W19
	058 Move X20, [X31+48]
	059 Move X19, [X31+56]
	060 Move X22, [X31+32]
	061 Move X21, [X31+40]
	062 Move X24, [X31+16]
	063 Move X23, [X31+24]
	064 Move X4, X31
	065 Move X30, [X31+64]
	066 Call SpanHelpers.IndexOfAny, X0, X1, X2, X3
	067 Return X0
	068 Move X8, [X22+56]
	069 Move X0, X23
	070 Move W1, W21
	071 Move X2, X20
	072 Move X4, [X8+48]
	073 Move W3, W19
	074 Move X20, [X31+48]
	075 Move X19, [X31+56]
	076 Move X22, [X31+32]
	077 Move X21, [X31+40]
	078 Move X24, [X31+16]
	079 Move X23, [X31+24]
	080 Move X30, [X31+64]
	081 Call 0x22594B0, X0, X1, X2, X3
	082 Return X0

Method: System.Boolean SequenceEqual(System.ReadOnlySpan`1<T> span, System.ReadOnlySpan`1<T> other)

Disassembly:
	0x02219088 TBNZ X8, 0x0, 0x2219090
	0x0221908C BL 0x1C5C684
	0x02219090 LDR W8, [X0 + 0xE0]
	0x02219094 CBNZ W8, 0x221909C
	0x02219098 BL 0x1C16DFC
	0x0221909C LDR X8, [X20 + 0x38]
	0x022190A0 ADD X0, X31, 0x18
	0x022190A4 LDR X1, [X8 + 0x30]
	0x022190A8 LDR X8, [X1]
	0x022190AC BLR X8
	0x022190B0 LDR X8, [X20 + 0x38]
	0x022190B4 MOV X21, X0
	0x022190B8 ADD X0, X31, 0x18
	0x022190BC LDR X1, [X8 + 0x48]
	0x022190C0 LDR X8, [X1]
	0x022190C4 BLR X8
	0x022190C8 STP X31, X31, [X31 + 0x8]
	0x022190CC LDR X8, [X20 + 0x38]
	0x022190D0 LDP W3, W9, [X31 + 0x28]
	0x022190D4 MOV X1, X21
	0x022190D8 LDR X4, [X8 + 0x58]
	0x022190DC AND W8, W9, 0x7FFFFFFF
	0x022190E0 ADD W2, W8, W0
	0x022190E4 ADD X0, X31, 0x8
	0x022190E8 BL 0x2B8ADB0
	0x022190EC LDUR V0, [X31 + 0x8]
	0x022190F0 MOVZ W0, 0x1
	0x022190F4 STR V0, [X19]
	0x022190F8 B 0x221914C
	0x022190FC LDR W8, [X31 + 0x28]
	0x02219100 ANDS W31, W8, 0x7FFFFFFF
	0x02219104 B.EQ 0x2219114
	0x02219108 MOV W0, W31
	0x0221910C STP X31, X31, [X19]
	0x02219110 B 0x221914C
	0x02219114 LDR X8, [X20 + 0x38]
	0x02219118 LDR X0, [X8 + 0x38]
	0x0221911C LDRB W8, [X0 + 0x135]
	0x02219120 TBNZ X8, 0x0, 0x2219128
	0x02219124 BL 0x1C5C684
	0x02219128 LDR W8, [X0 + 0xE0]
	0x0221912C CBNZ W8, 0x2219134
	0x02219130 BL 0x1C16DFC
	0x02219134 LDR X8, [X20 + 0x38]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X4+56]
	009 Move X22, X4
	010 Move X23, X3
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Compare X8, 0
	015 JumpIfNotEqual {19}
	016 Move X0, X22
	017 Call 0x1C5D6E0
	018 Move X8, [X22+56]
	019 Move [X31+8], X31
	020 Move X1, [X8+32]
	021 Add X0, X31, 8
	022 Call 0x1F97FD0
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 Invalid "Jump target not found in method."
	028 Move X8, [X31+8]
	029 Move X9, W20
	030 Move X0, X21
	031 Move X1, X19
	032 Multiply X2, X8, X9
	033 Move X3, X31
	034 Call SpanHelpers.SequenceEqual, X0, X1, X2
	035 Move X8, [X22+56]
	036 Move X0, X21
	037 Move X1, X19
	038 Move W2, W20
	039 Move X3, [X8+56]
	040 Call 0x22596B8, X0, X1, X2
	041 Move W0, W31
	042 Move X20, [X31+48]
	043 Move X19, [X31+56]
	044 Move X22, [X31+32]
	045 Move X21, [X31+40]
	046 Move X30, [X31+16]
	047 Move X23, [X31+24]
	048 And W0, W0, 1
	049 Add X31, X31, 64
	050 Return X0

Method: System.Boolean StartsWith(System.ReadOnlySpan`1<T> span, System.ReadOnlySpan`1<T> value)

Disassembly:
	0x02219324 MOV W21, W3
	0x02219328 MOV W22, W2
	0x0221932C MOV W20, W1
	0x02219330 MOV X23, X0
	0x02219334 CBNZ X8, 0x2219340
	0x02219338 MOV X0, X19
	0x0221933C BL 0x1C5C6E0
	0x02219340 MOV X0, X23
	0x02219344 MOV X1, X31
	0x02219348 BL 0x3C175DC
	0x0221934C TBZ X0, 0x0, 0x22193BC
	0x02219350 MOV X0, X23
	0x02219354 MOV W1, W20
	0x02219358 MOV X2, X31
	0x0221935C BL 0x3C17434
	0x02219360 TBZ X0, 0x0, 0x22193CC
	0x02219364 MOV X0, X23
	0x02219368 MOV W1, W20
	0x0221936C MOV W2, W22
	0x02219370 MOV W3, W21
	0x02219374 MOV X4, X31
	0x02219378 BL 0x3C17514
	0x0221937C LDR X8, [X19 + 0x38]
	0x02219380 MOV X20, X0
	0x02219384 LDR X19, [X8]
	0x02219388 LDRB W8, [X19 + 0x135]
	0x0221938C TBNZ X8, 0x0, 0x221939C
	0x02219390 MOV X0, X19
	0x02219394 BL 0x1C5C684
	0x02219398 MOV X19, X0
	0x0221939C CBZ X20, 0x22193F4
	0x022193A0 MOV X0, X20
	0x022193A4 MOV X1, X19
	0x022193A8 BL 0x1C16E00
	0x022193AC CBNZ X0, 0x22193F8
	0x022193B0 MOV X0, X20
	0x022193B4 MOV X1, X19
	0x022193B8 BL 0x1C171E0
	0x022193BC MOV X0, X23
	0x022193C0 MOV W1, W20
	0x022193C4 MOV X2, X31
	0x022193C8 BL 0x3C173F0
	0x022193CC LDR X8, [X19 + 0x38]
	0x022193D0 LDR X0, [X8 + 0x8]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X4+56]
	009 Move X22, X4
	010 Move X20, X3
	011 Move X19, X2
	012 Move X23, X1
	013 Move X21, X0
	014 Compare X8, 0
	015 JumpIfNotEqual {19}
	016 Move X0, X22
	017 Call 0x1C5D6E0
	018 Move X8, [X22+56]
	019 Move [X31+8], X31
	020 Move X1, [X8+32]
	021 Add X0, X31, 8
	022 Call 0x1F97FD0
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 Invalid "Jump target not found in method."
	028 Move X8, [X31+8]
	029 Move X9, W20
	030 Move X0, X21
	031 Move X1, X19
	032 Multiply X2, X8, X9
	033 Move X3, X31
	034 Call SpanHelpers.SequenceEqual, X0, X1, X2
	035 Move W0, W31
	036 Move X8, [X22+56]
	037 Move X0, X21
	038 Move X1, X19
	039 Move W2, W20
	040 Move X3, [X8+56]
	041 Call 0x22596B8, X0, X1, X2
	042 Move X20, [X31+48]
	043 Move X19, [X31+56]
	044 Move X22, [X31+32]
	045 Move X21, [X31+40]
	046 Move X30, [X31+16]
	047 Move X23, [X31+24]
	048 And W0, W0, 1
	049 Add X31, X31, 64
	050 Return X0

Method: System.Boolean EndsWith(System.ReadOnlySpan`1<T> span, System.ReadOnlySpan`1<T> value)

Disassembly:
	0x02217D78 LDR X8, [X8]
	0x02217D7C MOV X0, X8
	0x02217D80 BL 0x338C698
	0x02217D84 MOV X1, X0
	0x02217D88 MOV X0, X21
	0x02217D8C MOV X2, X31
	0x02217D90 BL 0x3395194
	0x02217D94 TBNZ X0, 0x0, 0x2217DEC
	0x02217D98 LDR X0, [X22]
	0x02217D9C LDR X8, [X20 + 0x38]
	0x02217DA0 LDR W9, [X0 + 0xE0]
	0x02217DA4 LDR X21, [X8]
	0x02217DA8 CBNZ W9, 0x2217DB0
	0x02217DAC BL 0x1C16DFC
	0x02217DB0 MOV X0, X21
	0x02217DB4 MOV X1, X31
	0x02217DB8 BL 0x338C698
	0x02217DBC ADRP X8, 0x1F03000
	0x02217DC0 LDR X8, [X8 + 0xD90]
	0x02217DC4 MOV X21, X0
	0x02217DC8 MOV X1, X31
	0x02217DCC LDR X8, [X8]
	0x02217DD0 MOV X0, X8
	0x02217DD4 BL 0x338C698
	0x02217DD8 MOV X1, X0
	0x02217DDC MOV X0, X21
	0x02217DE0 MOV X2, X31
	0x02217DE4 BL 0x3395194
	0x02217DE8 TBZ X0, 0x0, 0x2217DF8
	0x02217DEC MOVZ W8, 0x1
	0x02217DF0 MOVZ W0, 0x1
	0x02217DF4 B 0x2217EFC
	0x02217DF8 LDR X0, [X22]
	0x02217DFC LDR X8, [X20 + 0x38]
	0x02217E00 LDR W9, [X0 + 0xE0]
	0x02217E04 LDR X21, [X8]
	0x02217E08 CBNZ W9, 0x2217E10
	0x02217E0C BL 0x1C16DFC
	0x02217E10 MOV X0, X21
	0x02217E14 MOV X1, X31
	0x02217E18 BL 0x338C698
	0x02217E1C ADRP X8, 0x1F03000
	0x02217E20 LDR X8, [X8 + 0xD70]
	0x02217E24 MOV X21, X0
	0x02217E28 MOV X1, X31
	0x02217E2C LDR X8, [X8]
	0x02217E30 MOV X0, X8
	0x02217E34 BL 0x338C698

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X4+56]
	009 Move X23, X4
	010 Move X20, X3
	011 Move X19, X2
	012 Move X22, X1
	013 Move X21, X0
	014 Compare X8, 0
	015 JumpIfNotEqual {19}
	016 Move X0, X23
	017 Call 0x1C5D6E0
	018 Move X8, [X23+56]
	019 Move [X31+8], X31
	020 Move X1, [X8+32]
	021 Add X0, X31, 8
	022 Call 0x1F97FD0
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 Invalid "Jump target not found in method."
	028 Move X9, [X31+8]
	029 Subtract W8, W22, W20
	030 Move X8, X8
	031 ShiftRight X8, 32
	032 And X8, X8, 0x7FFFFFFF
	033 Add X0, X21, X8
	034 Move X8, W20
	035 Multiply X2, X9, X8
	036 Move X1, X19
	037 Move X3, X31
	038 Call SpanHelpers.SequenceEqual, X0, X1, X2
	039 Move W0, W31
	040 Move X8, [X23+56]
	041 Move X1, X19
	042 Move W2, W20
	043 Move X3, [X8+64]
	044 Subtract W8, W22, W20
	045 Move X8, X8
	046 ShiftRight X8, 32
	047 And X8, X8, 0x7FFFFFFF
	048 Add X0, X21, X8
	049 Call 0x22596B8, X0, X1, X2
	050 Move X20, [X31+48]
	051 Move X19, [X31+56]
	052 Move X22, [X31+32]
	053 Move X21, [X31+40]
	054 Move X30, [X31+16]
	055 Move X23, [X31+24]
	056 And W0, W0, 1
	057 Add X31, X31, 64
	058 Return X0

Method: System.Span`1<T> AsSpan(T[] array, System.Int32 start, System.Int32 length)

Disassembly:
	0x02217B14 LDP X22, X21, [X31 + 0x10]
	0x02217B18 AND W0, W0, 0x1
	0x02217B1C LDR X30, [X31], #0x30
	0x02217B20 RET
	0x02217B24 LDR X0, [X22]
	0x02217B28 LDR X8, [X20 + 0x38]
	0x02217B2C LDR W9, [X0 + 0xE0]
	0x02217B30 LDR X21, [X8]
	0x02217B34 CBNZ W9, 0x2217B3C
	0x02217B38 BL 0x1C16DFC
	0x02217B3C MOV X0, X21
	0x02217B40 MOV X1, X31
	0x02217B44 BL 0x338C698
	0x02217B48 ADRP X8, 0x1F03000
	0x02217B4C LDR X8, [X8 + 0xD80]
	0x02217B50 MOV X21, X0
	0x02217B54 MOV X1, X31
	0x02217B58 LDR X8, [X8]
	0x02217B5C MOV X0, X8
	0x02217B60 BL 0x338C698
	0x02217B64 MOV X1, X0
	0x02217B68 MOV X0, X21
	0x02217B6C MOV X2, X31
	0x02217B70 BL 0x3395194
	0x02217B74 TBNZ X0, 0x0, 0x2217BCC
	0x02217B78 LDR X0, [X22]
	0x02217B7C LDR X8, [X20 + 0x38]
	0x02217B80 LDR W9, [X0 + 0xE0]
	0x02217B84 LDR X21, [X8]
	0x02217B88 CBNZ W9, 0x2217B90
	0x02217B8C BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X3+56]
	006 Move W19, W2
	007 Move W20, W1
	008 Move X21, X0
	009 Compare X8, 0
	010 JumpIfEqual {21}
	011 Compare X21, 0
	012 JumpIfEqual {25}
	013 Move W8, [X21+24]
	014 Subtract W8, W8, W20
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move X0, X31
	017 Call ThrowHelper.ThrowArgumentOutOfRangeException
	018 Add X8, X21, W20
	019 Add X0, X8, 32
	020 Move W1, W19
	021 Move X0, X3
	022 Call 0x1C5D6E0
	023 Compare X21, 0
	024 JumpIfNotEqual {13}
	025 Or W8, W19, W20
	026 Compare W8, 0
	027 JumpIfEqual {30}
	028 Move X0, X31
	029 Call ThrowHelper.ThrowArgumentOutOfRangeException
	030 Move X0, X31
	031 Move X1, X31
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return X0

Method: System.Void CopyTo(T[] source, System.Span`1<T> destination)

Disassembly:
	0x02217C74 BL 0x338C698
	0x02217C78 MOV X1, X0
	0x02217C7C MOV X0, X20
	0x02217C80 MOV X2, X31
	0x02217C84 BL 0x3395194
	0x02217C88 ANDS W31, W0, 0x1
	0x02217C8C MOVZ W8, 0x8
	0x02217C90 CSEL X8, X8, X31, NE
	0x02217C94 B 0x2217B0C
	0x02217C98 STR X30, [X31 - 0x30]!
	0x02217C9C STP X22, X21, [X31 + 0x10]
	0x02217CA0 STP X20, X19, [X31 + 0x20]
	0x02217CA4 LDR X8, [X1 + 0x38]
	0x02217CA8 MOV X20, X1
	0x02217CAC MOV X19, X0
	0x02217CB0 CBNZ X8, 0x2217D40
	0x02217CB4 ADRP X0, 0x1F03000
	0x02217CB8 LDR X0, [X0 + 0xD68]
	0x02217CBC BL 0x1C16CF4
	0x02217CC0 ADRP X0, 0x1F03000
	0x02217CC4 LDR X0, [X0 + 0xD70]
	0x02217CC8 BL 0x1C16CF4
	0x02217CCC ADRP X0, 0x1F03000
	0x02217CD0 LDR X0, [X0 + 0xD78]
	0x02217CD4 BL 0x1C16CF4
	0x02217CD8 ADRP X0, 0x1F03000
	0x02217CDC LDR X0, [X0 + 0xD80]
	0x02217CE0 BL 0x1C16CF4
	0x02217CE4 ADRP X0, 0x1F03000
	0x02217CE8 LDR X0, [X0 + 0xD88]
	0x02217CEC BL 0x1C16CF4
	0x02217CF0 ADRP X0, 0x1F03000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X8, [X3+56]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X8, 0
	012 JumpIfEqual {17}
	013 Compare X21, 0
	014 JumpIfEqual {23}
	015 Move W9, [X21+24]
	016 Add X10, X21, 32
	017 Move X0, X3
	018 Move X22, X3
	019 Call 0x1C5D6E0
	020 Move X8, [X22+56]
	021 Compare X21, 0
	022 JumpIfNotEqual {15}
	023 Move X10, X31
	024 Move W9, W31
	025 Move [X31], X10
	026 Move [X31+8], W9
	027 Move [X31+12], W31
	028 Move X3, [X8+32]
	029 Add X0, X31, 0
	030 Move X1, X20
	031 Move X2, X19
	032 Call 0x25BF5D8, X0, X1
	033 Move X20, [X31+48]
	034 Move X19, [X31+56]
	035 Move X22, [X31+32]
	036 Move X21, [X31+40]
	037 Move X30, [X31+16]
	038 Add X31, X31, 64
	039 Return 

Method: System.Boolean IsTypeComparableAsBytes(out System.UInt64 size)

Disassembly:
	0x022188A8 LDP X20, X19, [X31 + 0x10]
	0x022188AC MOV X0, X21
	0x022188B0 LDP X30, X21, [X31], #0x20
	0x022188B4 RET
	0x022188B8 BL 0x1C16F30
	0x022188BC MOV X1, X19
	0x022188C0 BL 0x1C16DEC
	0x022188C4 SUB X31, X31, 0x40
	0x022188C8 STP X1, X30, [X31 + 0x8]
	0x022188CC STP X22, X21, [X31 + 0x20]
	0x022188D0 STP X20, X19, [X31 + 0x30]
	0x022188D4 STR X0, [X31]
	0x022188D8 LDR X8, [X2 + 0x38]
	0x022188DC MOV X19, X2
	0x022188E0 MOV X20, X1
	0x022188E4 MOV X21, X0
	0x022188E8 CBNZ X8, 0x2218918
	0x022188EC ADRP X0, 0x1F04000
	0x022188F0 LDR X0, [X0 + 0x70]
	0x022188F4 BL 0x1C16CF4
	0x022188F8 ADRP X0, 0x1EDB000
	0x022188FC LDR X0, [X0 + 0x6C0]
	0x02218900 BL 0x1C16CF4
	0x02218904 LDR X8, [X19 + 0x38]
	0x02218908 CBNZ X8, 0x2218918
	0x0221890C MOV X0, X19
	0x02218910 BL 0x1C5C6E0
	0x02218914 LDR X8, [X19 + 0x38]
	0x02218918 LDR X0, [X8]
	0x0221891C BL 0x1C17838
	0x02218920 TBZ X0, 0x0, 0x2218958
	0x02218924 ADRP X8, 0x1EDB000
	0x02218928 LDR X8, [X8 + 0x6C0]
	0x0221892C LDR X0, [X8]
	0x02218930 LDR X8, [X19 + 0x38]
	0x02218934 LDR W9, [X0 + 0xE0]
	0x02218938 LDR X22, [X8 + 0x8]
	0x0221893C CBNZ W9, 0x2218944
	0x02218940 BL 0x1C16DFC
	0x02218944 MOV X0, X22
	0x02218948 MOV X1, X31
	0x0221894C BL 0x338C698
	0x02218950 MOV X1, X31
	0x02218954 BL 0x339E484
	0x02218958 LDR X8, [X19 + 0x38]
	0x0221895C MOV X0, X21
	0x02218960 MOV X1, X20
	0x02218964 LDR X2, [X8 + 0x18]
	0x02218968 LDR X8, [X2]
	0x0221896C BLR X8
	0x02218970 LDR X8, [X19 + 0x38]
	0x02218974 MOV X20, X0
	0x02218978 ADD X0, X31, 0x0
	0x0221897C LDR X1, [X8 + 0x28]
	0x02218980 LDR X8, [X1]
	0x02218984 BLR X8
	0x02218988 LDR X8, [X19 + 0x38]
	0x0221898C MOV W21, W0
	0x02218990 LDR X8, [X8 + 0x38]
	0x02218994 LDR X9, [X8]
	0x02218998 MOV X0, X8
	0x0221899C BLR X9
	0x022189A0 SMADDL X8, X0, X21, X31
	0x022189A4 CMP X8, W8, SXTW
	0x022189A8 B.NE 0x22189C8
	0x022189AC MUL W1, W0, W21
	0x022189B0 MOV X0, X20
	0x022189B4 LDP X20, X19, [X31 + 0x30]
	0x022189B8 LDP X22, X21, [X31 + 0x20]
	0x022189BC LDR X30, [X31 + 0x10]
	0x022189C0 ADD X31, X31, 0x40
	0x022189C4 RET
	0x022189C8 BL 0x1C16F30
	0x022189CC MOV X1, X19
	0x022189D0 BL 0x1C16DEC
	0x022189D4 SUB X31, X31, 0x40
	0x022189D8 STP X1, X30, [X31 + 0x8]
	0x022189DC STP X22, X21, [X31 + 0x20]
	0x022189E0 STP X20, X19, [X31 + 0x30]
	0x022189E4 STR X0, [X31]
	0x022189E8 LDR X8, [X2 + 0x38]
	0x022189EC MOV X19, X2
	0x022189F0 MOV X20, X1
	0x022189F4 MOV X21, X0
	0x022189F8 CBNZ X8, 0x2218A28
	0x022189FC ADRP X0, 0x1F04000
	0x02218A00 LDR X0, [X0 + 0x68]
	0x02218A04 BL 0x1C16CF4
	0x02218A08 ADRP X0, 0x1EDB000
	0x02218A0C LDR X0, [X0 + 0x6C0]
	0x02218A10 BL 0x1C16CF4
	0x02218A14 LDR X8, [X19 + 0x38]
	0x02218A18 CBNZ X8, 0x2218A28
	0x02218A1C MOV X0, X19
	0x02218A20 BL 0x1C5C6E0
	0x02218A24 LDR X8, [X19 + 0x38]
	0x02218A28 LDR X0, [X8]
	0x02218A2C BL 0x1C17838
	0x02218A30 TBZ X0, 0x0, 0x2218A68
	0x02218A34 ADRP X8, 0x1EDB000
	0x02218A38 LDR X8, [X8 + 0x6C0]
	0x02218A3C LDR X0, [X8]
	0x02218A40 LDR X8, [X19 + 0x38]
	0x02218A44 LDR W9, [X0 + 0xE0]
	0x02218A48 LDR X22, [X8 + 0x8]
	0x02218A4C CBNZ W9, 0x2218A54
	0x02218A50 BL 0x1C16DFC
	0x02218A54 MOV X0, X22
	0x02218A58 MOV X1, X31
	0x02218A5C BL 0x338C698
	0x02218A60 MOV X1, X31
	0x02218A64 BL 0x339E484
	0x02218A68 LDR X8, [X19 + 0x38]
	0x02218A6C MOV X0, X21
	0x02218A70 MOV X1, X20
	0x02218A74 LDR X2, [X8 + 0x18]
	0x02218A78 LDR X8, [X2]
	0x02218A7C BLR X8
	0x02218A80 LDR X8, [X19 + 0x38]
	0x02218A84 MOV X20, X0
	0x02218A88 ADD X0, X31, 0x0
	0x02218A8C LDR X1, [X8 + 0x28]
	0x02218A90 LDR X8, [X1]
	0x02218A94 BLR X8
	0x02218A98 LDR X8, [X19 + 0x38]
	0x02218A9C MOV W21, W0
	0x02218AA0 LDR X8, [X8 + 0x38]
	0x02218AA4 LDR X9, [X8]
	0x02218AA8 MOV X0, X8
	0x02218AAC BLR X9
	0x02218AB0 SMADDL X8, X0, X21, X31
	0x02218AB4 CMP X8, W8, SXTW
	0x02218AB8 B.NE 0x2218AD8
	0x02218ABC MUL W1, W0, W21
	0x02218AC0 MOV X0, X20
	0x02218AC4 LDP X20, X19, [X31 + 0x30]
	0x02218AC8 LDP X22, X21, [X31 + 0x20]
	0x02218ACC LDR X30, [X31 + 0x10]
	0x02218AD0 ADD X31, X31, 0x40
	0x02218AD4 RET
	0x02218AD8 BL 0x1C16F30
	0x02218ADC MOV X1, X19
	0x02218AE0 BL 0x1C16DEC
	0x02218AE4 RET
	0x02218AE8 RET
	0x02218AEC STR X30, [X31 - 0x20]!
	0x02218AF0 STP X20, X19, [X31 + 0x10]
	0x02218AF4 LDR X8, [X2 + 0x38]
	0x02218AF8 MOV W19, W1
	0x02218AFC MOV X20, X0
	0x02218B00 CBNZ X8, 0x2218B0C
	0x02218B04 MOV X0, X2
	0x02218B08 BL 0x1C5C6E0
	0x02218B0C MOV W1, W19
	0x02218B10 MOV X0, X20
	0x02218B14 LDP X20, X19, [X31 + 0x10]
	0x02218B18 LDR X30, [X31], #0x20
	0x02218B1C RET
	0x02218B20 STR X30, [X31 - 0x20]!
	0x02218B24 STP X20, X19, [X31 + 0x10]
	0x02218B28 LDR X8, [X2 + 0x38]
	0x02218B2C MOV W19, W1
	0x02218B30 MOV X20, X0
	0x02218B34 CBNZ X8, 0x2218B40
	0x02218B38 MOV X0, X2
	0x02218B3C BL 0x1C5C6E0
	0x02218B40 MOV W1, W19
	0x02218B44 MOV X0, X20
	0x02218B48 LDP X20, X19, [X31 + 0x10]
	0x02218B4C LDR X30, [X31], #0x20
	0x02218B50 RET
	0x02218B54 STR X30, [X31 - 0x20]!
	0x02218B58 STP X20, X19, [X31 + 0x10]
	0x02218B5C LDR X8, [X2 + 0x38]
	0x02218B60 MOV W19, W1
	0x02218B64 MOV X20, X0
	0x02218B68 CBNZ X8, 0x2218B74
	0x02218B6C MOV X0, X2
	0x02218B70 BL 0x1C5C6E0
	0x02218B74 MOV W1, W19
	0x02218B78 MOV X0, X20
	0x02218B7C LDP X20, X19, [X31 + 0x10]
	0x02218B80 LDR X30, [X31], #0x20
	0x02218B84 RET
	0x02218B88 STR X30, [X31 - 0x20]!
	0x02218B8C STP X20, X19, [X31 + 0x10]
	0x02218B90 LDR X8, [X2 + 0x38]
	0x02218B94 MOV X19, X1
	0x02218B98 MOV X20, X0
	0x02218B9C CBNZ X8, 0x2218BA8
	0x02218BA0 MOV X0, X2
	0x02218BA4 BL 0x1C5C6E0
	0x02218BA8 CMP W19, 0x0
	0x02218BAC CSINC X0, X20, X31, NE
	0x02218BB0 LDP X20, X19, [X31 + 0x10]
	0x02218BB4 LDR X30, [X31], #0x20
	0x02218BB8 RET
	0x02218BBC STR X30, [X31 - 0x20]!
	0x02218BC0 STP X20, X19, [X31 + 0x10]
	0x02218BC4 LDR X8, [X2 + 0x38]
	0x02218BC8 MOV X19, X1
	0x02218BCC MOV X20, X0
	0x02218BD0 CBNZ X8, 0x2218BDC
	0x02218BD4 MOV X0, X2
	0x02218BD8 BL 0x1C5C6E0
	0x02218BDC CMP W19, 0x0
	0x02218BE0 CSINC X0, X20, X31, NE
	0x02218BE4 LDP X20, X19, [X31 + 0x10]
	0x02218BE8 LDR X30, [X31], #0x20
	0x02218BEC RET
	0x02218BF0 STR X30, [X31 - 0x20]!
	0x02218BF4 STP X20, X19, [X31 + 0x10]
	0x02218BF8 LDR X8, [X2 + 0x38]
	0x02218BFC MOV X19, X1
	0x02218C00 MOV X20, X0
	0x02218C04 CBNZ X8, 0x2218C10
	0x02218C08 MOV X0, X2
	0x02218C0C BL 0x1C5C6E0
	0x02218C10 CMP W19, 0x0
	0x02218C14 CSINC X0, X20, X31, NE
	0x02218C18 LDP X20, X19, [X31 + 0x10]
	0x02218C1C LDR X30, [X31], #0x20
	0x02218C20 RET
	0x02218C24 STR X30, [X31 - 0x20]!
	0x02218C28 STP X20, X19, [X31 + 0x10]
	0x02218C2C LDR X8, [X2 + 0x38]
	0x02218C30 MOV X19, X1
	0x02218C34 MOV X20, X0
	0x02218C38 CBNZ X8, 0x2218C44
	0x02218C3C MOV X0, X2
	0x02218C40 BL 0x1C5C6E0
	0x02218C44 CMP W19, 0x0
	0x02218C48 CSINC X0, X20, X31, NE
	0x02218C4C LDP X20, X19, [X31 + 0x10]
	0x02218C50 LDR X30, [X31], #0x20
	0x02218C54 RET
	0x02218C58 SUB X31, X31, 0x20
	0x02218C5C STP X30, X19, [X31 + 0x10]
	0x02218C60 STP X0, X1, [X31]
	0x02218C64 LDR X8, [X2 + 0x38]
	0x02218C68 CBNZ X8, 0x2218C7C
	0x02218C6C MOV X0, X2
	0x02218C70 MOV X19, X2
	0x02218C74 BL 0x1C5C6E0
	0x02218C78 LDR X8, [X19 + 0x38]
	0x02218C7C LDR X1, [X8 + 0x8]
	0x02218C80 ADD X0, X31, 0x0
	0x02218C84 LDR X8, [X1]
	0x02218C88 BLR X8
	0x02218C8C LDR X8, [X31]
	0x02218C90 LDP X30, X19, [X31 + 0x10]
	0x02218C94 CMP W0, 0x0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X1+56]
	007 Move X20, X1
	008 Move X19, X0
	009 Compare X8, 0
	010 JumpIfNotEqual {47}
	011 Move X0, 0x1F03000
	012 Move X0, [X0+3432]
	013 Call 0x1C17CF4
	014 Move X0, 0x1F03000
	015 Move X0, [X0+3440]
	016 Call 0x1C17CF4
	017 Move X0, 0x1F03000
	018 Move X0, [X0+3448]
	019 Call 0x1C17CF4
	020 Move X0, 0x1F03000
	021 Move X0, [X0+3456]
	022 Call 0x1C17CF4
	023 Move X0, 0x1F03000
	024 Move X0, [X0+3464]
	025 Call 0x1C17CF4
	026 Move X0, 0x1F03000
	027 Move X0, [X0+3472]
	028 Call 0x1C17CF4
	029 Move X0, 0x1EDC000
	030 Move X0, [X0+1728]
	031 Call 0x1C17CF4
	032 Move X0, 0x1F03000
	033 Move X0, [X0+3480]
	034 Call 0x1C17CF4
	035 Move X0, 0x1F03000
	036 Move X0, [X0+3488]
	037 Call 0x1C17CF4
	038 Move X0, 0x1F03000
	039 Move X0, [X0+3496]
	040 Call 0x1C17CF4
	041 Move X8, [X20+56]
	042 Compare X8, 0
	043 JumpIfNotEqual {47}
	044 Move X0, X20
	045 Call 0x1C5D6E0
	046 Move X8, [X20+56]
	047 Move X22, 0x1EDC000
	048 Move X22, [X22+1728]
	049 Move X21, [X8]
	050 Move X0, [X22]
	051 Move W9, [X0+224]
	052 Compare W9, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move X0, X21
	056 Move X1, X31
	057 Call Type.GetTypeFromHandle, X0
	058 Move X8, 0x1F03000
	059 Move X8, [X8+3432]
	060 Move X21, X0
	061 Move X1, X31
	062 Move X8, [X8]
	063 Move X0, X8
	064 Call Type.GetTypeFromHandle, X0
	065 Move X1, X0
	066 Move X0, X21
	067 Move X2, X31
	068 Call Type.op_Equality, X0, X1
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfEqual {98}
	073 Move X0, [X22]
	074 Move X8, [X20+56]
	075 Move W9, [X0+224]
	076 Move X21, [X8]
	077 Compare W9, 0
	078 JumpIfNotEqual {80}
	079 Call 0x1C17DFC
	080 Move X0, X21
	081 Move X1, X31
	082 Call Type.GetTypeFromHandle, X0
	083 Move X8, 0x1F03000
	084 Move X8, [X8+3472]
	085 Move X21, X0
	086 Move X1, X31
	087 Move X8, [X8]
	088 Move X0, X8
	089 Call Type.GetTypeFromHandle, X0
	090 Move X1, X0
	091 Move X0, X21
	092 Move X2, X31
	093 Call Type.op_Equality, X0, X1
	094 Move TEMP, X0
	095 And TEMP, TEMP, 1
	096 Compare TEMP, 1
	097 JumpIfNotEqual {100}
	098 Move W8, 1
	099 Move W0, 1
	100 Move X0, [X22]
	101 Move X8, [X20+56]
	102 Move W9, [X0+224]
	103 Move X21, [X8]
	104 Compare W9, 0
	105 JumpIfNotEqual {107}
	106 Call 0x1C17DFC
	107 Move X0, X21
	108 Move X1, X31
	109 Call Type.GetTypeFromHandle, X0
	110 Move X8, 0x1F03000
	111 Move X8, [X8+3440]
	112 Move X21, X0
	113 Move X1, X31
	114 Move X8, [X8]
	115 Move X0, X8
	116 Call Type.GetTypeFromHandle, X0
	117 Move X1, X0
	118 Move X0, X21
	119 Move X2, X31
	120 Call Type.op_Equality, X0, X1
	121 Move TEMP, X0
	122 And TEMP, TEMP, 1
	123 Compare TEMP, 1
	124 JumpIfEqual {175}
	125 Move X0, [X22]
	126 Move X8, [X20+56]
	127 Move W9, [X0+224]
	128 Move X21, [X8]
	129 Compare W9, 0
	130 JumpIfNotEqual {132}
	131 Call 0x1C17DFC
	132 Move X0, X21
	133 Move X1, X31
	134 Call Type.GetTypeFromHandle, X0
	135 Move X8, 0x1F03000
	136 Move X8, [X8+3448]
	137 Move X21, X0
	138 Move X1, X31
	139 Move X8, [X8]
	140 Move X0, X8
	141 Call Type.GetTypeFromHandle, X0
	142 Move X1, X0
	143 Move X0, X21
	144 Move X2, X31
	145 Call Type.op_Equality, X0, X1
	146 Move TEMP, X0
	147 And TEMP, TEMP, 1
	148 Compare TEMP, 1
	149 JumpIfEqual {175}
	150 Move X0, [X22]
	151 Move X8, [X20+56]
	152 Move W9, [X0+224]
	153 Move X21, [X8]
	154 Compare W9, 0
	155 JumpIfNotEqual {157}
	156 Call 0x1C17DFC
	157 Move X0, X21
	158 Move X1, X31
	159 Call Type.GetTypeFromHandle, X0
	160 Move X8, 0x1F03000
	161 Move X8, [X8+3480]
	162 Move X21, X0
	163 Move X1, X31
	164 Move X8, [X8]
	165 Move X0, X8
	166 Call Type.GetTypeFromHandle, X0
	167 Move X1, X0
	168 Move X0, X21
	169 Move X2, X31
	170 Call Type.op_Equality, X0, X1
	171 Move TEMP, X0
	172 And TEMP, TEMP, 1
	173 Compare TEMP, 1
	174 JumpIfNotEqual {185}
	175 Move W0, 1
	176 Move W8, 2
	177 Move [X19], X8
	178 Move X20, [X31+32]
	179 Move X19, [X31+40]
	180 Move X22, [X31+16]
	181 Move X21, [X31+24]
	182 And W0, W0, 1
	183 Move X30, [X31+48]
	184 Return X0
	185 Move X0, [X22]
	186 Move X8, [X20+56]
	187 Move W9, [X0+224]
	188 Move X21, [X8]
	189 Compare W9, 0
	190 JumpIfNotEqual {192}
	191 Call 0x1C17DFC
	192 Move X0, X21
	193 Move X1, X31
	194 Call Type.GetTypeFromHandle, X0
	195 Move X8, 0x1F03000
	196 Move X8, [X8+3456]
	197 Move X21, X0
	198 Move X1, X31
	199 Move X8, [X8]
	200 Move X0, X8
	201 Call Type.GetTypeFromHandle, X0
	202 Move X1, X0
	203 Move X0, X21
	204 Move X2, X31
	205 Call Type.op_Equality, X0, X1
	206 Move TEMP, X0
	207 And TEMP, TEMP, 1
	208 Compare TEMP, 1
	209 JumpIfEqual {235}
	210 Move X0, [X22]
	211 Move X8, [X20+56]
	212 Move W9, [X0+224]
	213 Move X21, [X8]
	214 Compare W9, 0
	215 JumpIfNotEqual {217}
	216 Call 0x1C17DFC
	217 Move X0, X21
	218 Move X1, X31
	219 Call Type.GetTypeFromHandle, X0
	220 Move X8, 0x1F03000
	221 Move X8, [X8+3488]
	222 Move X21, X0
	223 Move X1, X31
	224 Move X8, [X8]
	225 Move X0, X8
	226 Call Type.GetTypeFromHandle, X0
	227 Move X1, X0
	228 Move X0, X21
	229 Move X2, X31
	230 Call Type.op_Equality, X0, X1
	231 Move TEMP, X0
	232 And TEMP, TEMP, 1
	233 Compare TEMP, 1
	234 JumpIfNotEqual {237}
	235 Move W0, 1
	236 Move W8, 4
	237 Move X0, [X22]
	238 Move X8, [X20+56]
	239 Move W9, [X0+224]
	240 Move X21, [X8]
	241 Compare W9, 0
	242 JumpIfNotEqual {244}
	243 Call 0x1C17DFC
	244 Move X0, X21
	245 Move X1, X31
	246 Call Type.GetTypeFromHandle, X0
	247 Move X8, 0x1F03000
	248 Move X8, [X8+3464]
	249 Move X21, X0
	250 Move X1, X31
	251 Move X8, [X8]
	252 Move X0, X8
	253 Call Type.GetTypeFromHandle, X0
	254 Move X1, X0
	255 Move X0, X21
	256 Move X2, X31
	257 Call Type.op_Equality, X0, X1
	258 Move TEMP, X0
	259 And TEMP, TEMP, 1
	260 Compare TEMP, 1
	261 JumpIfNotEqual {264}
	262 Move W0, 1
	263 Move W8, 8
	264 Move X0, [X22]
	265 Move X8, [X20+56]
	266 Move W9, [X0+224]
	267 Move X20, [X8]
	268 Compare W9, 0
	269 JumpIfNotEqual {271}
	270 Call 0x1C17DFC
	271 Move X0, X20
	272 Move X1, X31
	273 Call Type.GetTypeFromHandle, X0
	274 Move X8, 0x1F03000
	275 Move X8, [X8+3496]
	276 Move X20, X0
	277 Move X1, X31
	278 Move X8, [X8]
	279 Move X0, X8
	280 Call Type.GetTypeFromHandle, X0
	281 Move X1, X0
	282 Move X0, X20
	283 Move X2, X31
	284 Call Type.op_Equality, X0, X1
	285 And W31, W0, 1
	286 Move W8, 8
	287 NotImplemented "Instruction CSEL not yet implemented."

