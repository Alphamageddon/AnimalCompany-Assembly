Type: Internal.Cryptography.Helpers

Method: System.Byte[] CloneByteArray(System.Byte[] src)

Disassembly:
	0x03226544 BL 0x1C16F10
	0x03226548 MOV X19, X0
	0x0322654C ADRP X0, 0xEFC000
	0x03226550 LDR X0, [X0 + 0x40]
	0x03226554 BL 0x1C16D08
	0x03226558 MOV X1, X0
	0x0322655C MOV X0, X19
	0x03226560 MOV X2, X31
	0x03226564 BL 0x3314A68
	0x03226568 ADRP X0, 0xEFC000
	0x0322656C LDR X0, [X0 + 0x48]
	0x03226570 BL 0x1C16D08
	0x03226574 MOV X1, X0
	0x03226578 MOV X0, X19
	0x0322657C BL 0x1C16DEC
	0x03226580 MOV W2, W31
	0x03226584 B 0x322590C
	0x03226588 MOV W2, W31
	0x0322658C B 0x3226590
	0x03226590 STR X30, [X31 - 0x30]!
	0x03226594 STP X22, X21, [X31 + 0x10]
	0x03226598 STP X20, X19, [X31 + 0x20]
	0x0322659C ADRP X21, 0x11B6000
	0x032265A0 LDRB W8, [X21 + 0x35E]
	0x032265A4 MOV W22, W2
	0x032265A8 MOV X19, X1
	0x032265AC MOV X20, X0
	0x032265B0 TBNZ X8, 0x0, 0x32265D4
	0x032265B4 ADRP X0, 0xEFB000
	0x032265B8 LDR X0, [X0 + 0xFD0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11B7000
	005 Move W8, [X20+853]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xECE000
	012 Move X0, [X0+1560]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+853], W8
	016 Compare X19, 0
	017 JumpIfEqual {34}
	018 Move X0, X19
	019 Move X1, X31
	020 Call Array.Clone, X0
	021 Compare X0, 0
	022 JumpIfEqual {35}
	023 Move X8, 0xECE000
	024 Move X8, [X8+1560]
	025 Move X19, X0
	026 Move X20, [X8]
	027 Move X1, X20
	028 Call 0x1C17E00
	029 Compare X0, 0
	030 JumpIfNotEqual {35}
	031 Move X0, X19
	032 Move X1, X20
	033 Call 0x1C181E0
	034 Move X0, X31
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Return X0

Method: System.Char[] ToHexArrayUpper(System.Byte[] bytes)

Disassembly:
	0x032265BC BL 0x1C16CF4
	0x032265C0 ADRP X0, 0xECF000
	0x032265C4 LDR X0, [X0 + 0xC48]
	0x032265C8 BL 0x1C16CF4
	0x032265CC MOVZ W8, 0x1
	0x032265D0 STRB W8, [X21 + 0x35E]
	0x032265D4 CBZ X19, 0x32267B4
	0x032265D8 CMP X20, X19
	0x032265DC B.EQ 0x3226644
	0x032265E0 LDR W21, [X19 + 0x10]
	0x032265E4 CBZ W21, 0x3226644
	0x032265E8 CMP W22, 0x5
	0x032265EC B.HI 0x3226800
	0x032265F0 ADRP X9, 0xFFFFFFFFFD970000
	0x032265F4 MOV W8, W22
	0x032265F8 ADD X9, X9, 0x455
	0x032265FC ADR X10, 0x10
	0x03226600 LDRB W11, [X9, X8, LSL]
	0x03226604 ADD X10, X10, X11, 0x2, LSL
	0x03226608 BR X10
	0x0322660C ADRP X8, 0xECF000
	0x03226610 LDR X8, [X8 + 0xC48]
	0x03226614 LDR X0, [X8]
	0x03226618 LDR W8, [X0 + 0xE0]
	0x0322661C CBNZ W8, 0x3226624
	0x03226620 BL 0x1C16DFC
	0x03226624 MOV X0, X31
	0x03226628 BL 0x33387A0
	0x0322662C CBZ X0, 0x32267FC
	0x03226630 LDR X8, [X0]
	0x03226634 LDP X9, X1, [X8 + 0x1F8]
	0x03226638 BLR X9
	0x0322663C CBNZ X0, 0x32266D0
	0x03226640 B 0x32267FC
	0x03226644 CMP W22, 0x6
	0x03226648 B.CC 0x322665C
	0x0322664C MOVZ W0, 0x31
	0x03226650 MOVZ W1, 0x2F
	0x03226654 MOV X2, X31
	0x03226658 BL 0x339DD28
	0x0322665C MOVZ W0, 0x1
	0x03226660 LDP X20, X19, [X31 + 0x20]
	0x03226664 LDP X22, X21, [X31 + 0x10]
	0x03226668 LDR X30, [X31], #0x30
	0x0322666C RET
	0x03226670 ADRP X8, 0xECF000
	0x03226674 LDR X8, [X8 + 0xC48]
	0x03226678 LDR X0, [X8]
	0x0322667C LDR W8, [X0 + 0xE0]
	0x03226680 CBNZ W8, 0x3226688
	0x03226684 BL 0x1C16DFC
	0x03226688 MOV X0, X31
	0x0322668C BL 0x33387A0
	0x03226690 CBZ X0, 0x32267FC
	0x03226694 LDR X8, [X0]
	0x03226698 LDP X9, X1, [X8 + 0x1F8]
	0x0322669C BLR X9
	0x032266A0 CBNZ X0, 0x322670C
	0x032266A4 B 0x32267FC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11B7000
	005 Move W8, [X20+854]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xED7000
	012 Move X0, [X0+2264]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+854], W8
	016 Compare X19, 0
	017 JumpIfEqual {63}
	018 Move X8, 0xED7000
	019 Move X8, [X8+2264]
	020 Move W9, [X19+24]
	021 Move X0, [X8]
	022 Move W1, W9
	023 ShiftRight W1, 31
	024 And W1, W1, 0x3FFFFFFF
	025 Call 0x1C17D6C
	026 Move X9, [X19+24]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 And X9, X9, 0
	029 Move X8, X31
	030 Move W14, W31
	031 Add X10, X19, 32
	032 Move W11, 55
	033 Move X12, W9
	034 Move W13, 48
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move W15, [X10]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 NotImplemented "Instruction CSEL not yet implemented."
	039 Compare X0, 0
	040 JumpIfEqual {63}
	041 Move W17, [X0+24]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Add W1, W16, W15
	044 Add W16, W14, 1
	045 Add X2, X0, W14
	046 NotImplemented "Instruction CMP not yet implemented."
	047 NotImplemented "Instruction STRH not yet implemented."
	048 And W15, W15, 15
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Add W14, W14, 1
	051 NotImplemented "Instruction CSEL not yet implemented."
	052 Add X8, X8, 1
	053 Add X14, X0, W14
	054 Add W15, W17, W15
	055 NotImplemented "Instruction CMP not yet implemented."
	056 NotImplemented "Instruction STRH not yet implemented."
	057 Add W14, W16, 1
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X30, [X31+32]
	061 Return X0
	062 Call 0x1C17F28
	063 Call 0x1C17F20

Method: System.String ToHexStringUpper(System.Byte[] bytes)

Disassembly:
	0x032266C4 LDR X8, [X0 + 0xB8]
	0x032266C8 LDR X0, [X8]
	0x032266CC CBZ X0, 0x32267FC
	0x032266D0 LDR X8, [X0]

ISIL:
	001 Move [X31-16], X30
	002 Call Helpers.ToHexArrayUpper, X0
	003 Move X30, [X31+16]
	004 Call String.Ctor, X0
	005 Return X0

Method: System.Char NibbleToHex(System.Byte b)

Disassembly:
	0x032266A8 ADRP X21, 0xEFB000
	0x032266AC LDR X21, [X21 + 0xFD0]
	0x032266B0 LDR X0, [X21]
	0x032266B4 LDR W8, [X0 + 0xE0]
	0x032266B8 CBNZ W8, 0x32266C4
	0x032266BC BL 0x1C16DFC
	0x032266C0 LDR X0, [X21]

ISIL:
	001 And W8, W0, 255
	002 Move W9, 55
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move W8, 48
	005 NotImplemented "Instruction CSEL not yet implemented."
	006 Add W0, W8, W0
	007 Return X0

