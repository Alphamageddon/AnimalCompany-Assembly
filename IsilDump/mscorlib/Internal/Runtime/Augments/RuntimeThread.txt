Type: Internal.Runtime.Augments.RuntimeThread

Method: System.Void .ctor(System.Threading.Thread t)

Disassembly:
	0x032263CC MOV W0, W31
	0x032263D0 LDP X20, X19, [X31 + 0x30]
	0x032263D4 LDP X22, X21, [X31 + 0x20]
	0x032263D8 LDP X24, X23, [X31 + 0x10]
	0x032263DC LDR X30, [X31], #0x40
	0x032263E0 RET
	0x032263E4 ADRP X0, 0xED5000
	0x032263E8 LDR X0, [X0 + 0x760]
	0x032263EC BL 0x1C16D08
	0x032263F0 BL 0x1C16F10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], X19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: Internal.Runtime.Augments.RuntimeThread Create(System.Threading.ParameterizedThreadStart start, System.Int32 maxStackSize)

Disassembly:
	0x032263F4 MOV X19, X0
	0x032263F8 ADRP X0, 0xED5000
	0x032263FC LDR X0, [X0 + 0x768]
	0x03226400 BL 0x1C16D08
	0x03226404 MOV X20, X0
	0x03226408 ADRP X0, 0xEFC000
	0x0322640C LDR X0, [X0 + 0x30]
	0x03226410 BL 0x1C16D08
	0x03226414 MOV X2, X0
	0x03226418 MOV X0, X19
	0x0322641C MOV X1, X20
	0x03226420 MOV X3, X31
	0x03226424 BL 0x3311888
	0x03226428 ADRP X0, 0xEFC000
	0x0322642C LDR X0, [X0 + 0x38]
	0x03226430 BL 0x1C16D08
	0x03226434 MOV X1, X0
	0x03226438 MOV X0, X19
	0x0322643C BL 0x1C16DEC
	0x03226440 ADRP X8, 0xEFC000
	0x03226444 ADRP X9, 0xEFC000
	0x03226448 LDR X8, [X8 + 0x10]
	0x0322644C LDR X9, [X9 + 0x18]
	0x03226450 CMP W21, 0x0
	0x03226454 B 0x322646C
	0x03226458 ADRP X8, 0xEFC000
	0x0322645C ADRP X9, 0xEFC000
	0x03226460 LDR X8, [X8 + 0x10]
	0x03226464 LDR X9, [X9 + 0x18]
	0x03226468 CMP W24, 0x0
	0x0322646C CSEL X0, X9, X8, LT
	0x03226470 BL 0x1C16D08
	0x03226474 MOV X19, X0
	0x03226478 ADRP X0, 0xED5000
	0x0322647C LDR X0, [X0 + 0x760]
	0x03226480 BL 0x1C16D08
	0x03226484 BL 0x1C16F10
	0x03226488 MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x11B7000
	008 Move X23, 0xEFA000
	009 Move X22, 0xEF7000
	010 Move W8, [X21+851]
	011 Move X23, [X23+472]
	012 Move X22, [X22+3656]
	013 Move W19, W1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xEF7000
	020 Move X0, [X0+3656]
	021 Call 0x1C17CF4
	022 Move X0, 0xEFA000
	023 Move X0, [X0+472]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+851], W8
	027 Move X0, [X23]
	028 Call 0x1C17F10
	029 Move X1, X20
	030 Move W2, W19
	031 Move X3, X31
	032 Move X21, X0
	033 Call Thread..ctor, X0, X1, X2
	034 Move X0, [X22]
	035 Call 0x1C17F10
	036 Move X1, X31
	037 Move X19, X0
	038 Call Object..ctor, X0
	039 Move [X19+16], X21
	040 Move X0, X19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Move X23, [X31+56]
	047 Return X0

Method: System.Void set_IsBackground(System.Boolean value)

Disassembly:
	0x0322648C ADRP X0, 0xEF5000
	0x03226490 LDR X0, [X0 + 0x660]
	0x03226494 BL 0x1C16D08
	0x03226498 MOV X2, X0
	0x0322649C MOV X0, X20
	0x032264A0 MOV X1, X19
	0x032264A4 MOV X3, X31
	0x032264A8 BL 0x3311888

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 And W1, W1, 1
	006 Move X2, X31
	007 Move X30, [X31+16]
	008 Call Thread.set_IsBackground, X0, X1
	009 Return 
	010 Call 0x1C17F20

Method: System.Void Start(System.Object state)

Disassembly:
	0x032264AC ADRP X0, 0xEFC000
	0x032264B0 LDR X0, [X0 + 0x38]
	0x032264B4 BL 0x1C16D08
	0x032264B8 MOV X1, X0
	0x032264BC MOV X0, X20
	0x032264C0 BL 0x1C16DEC
	0x032264C4 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X2, X31
	006 Move X30, [X31+16]
	007 Call Thread.Start, X0, X1
	008 Return 
	009 Call 0x1C17F20

Method: System.Void Sleep(System.Int32 millisecondsTimeout)

Disassembly:
	0x032264C8 STP X20, X19, [X31 + 0x10]
	0x032264CC ADRP X21, 0x11B6000

ISIL:
	001 Move X1, X31
	002 Call Thread.Sleep, X0
	003 Return 

Method: System.Boolean Yield()

Disassembly:
	0x032264D0 LDRB W8, [X21 + 0x35D]
	0x032264D4 MOV X19, X1

ISIL:
	001 Move X0, X31
	002 Call Thread.Yield
	003 Return X0

Method: System.Boolean SpinWait(System.Int32 iterations)

Disassembly:
	0x032264D8 MOV X20, X0
	0x032264DC TBNZ X8, 0x0, 0x32264F4
	0x032264E0 ADRP X0, 0xECF000
	0x032264E4 LDR X0, [X0 + 0x278]
	0x032264E8 BL 0x1C16CF4
	0x032264EC MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move X1, X31
	003 Call Thread.SpinWait, X0
	004 Move W0, 1
	005 Move X30, [X31+16]
	006 Return X0

Method: System.Int32 GetCurrentProcessorId()

Disassembly:
	0x032264F0 STRB W8, [X21 + 0x35D]
	0x032264F4 CBZ X19, 0x3226528

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Void .cctor()

Disassembly:
	0x032264F8 ADRP X8, 0xECF000
	0x032264FC LDR X8, [X8 + 0x278]
	0x03226500 LDR X9, [X19]
	0x03226504 LDR X8, [X8]
	0x03226508 CMP X9, X8
	0x0322650C B.NE 0x3226538
	0x03226510 MOV X0, X20
	0x03226514 MOV X1, X19
	0x03226518 LDP X20, X19, [X31 + 0x10]
	0x0322651C MOV W2, W31
	0x03226520 LDP X30, X21, [X31], #0x20
	0x03226524 B 0x322590C
	0x03226528 LDP X20, X19, [X31 + 0x10]
	0x0322652C MOVZ W0, 0x1
	0x03226530 LDP X30, X21, [X31], #0x20
	0x03226534 RET
	0x03226538 ADRP X0, 0xED5000
	0x0322653C LDR X0, [X0 + 0x578]
	0x03226540 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x11B7000
	005 Move X20, 0xEF7000
	006 Move W8, [X19+852]
	007 Move X20, [X20+3656]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xEF7000
	013 Move X0, [X0+3656]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+852], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move W9, 64
	021 Move X8, [X8+184]
	022 Move [X8], W9
	023 Move X30, [X31+32]
	024 Return 

