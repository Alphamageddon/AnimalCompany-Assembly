Type: Microsoft.Win32.SafeHandles.SafePasswordHandle

Method: System.IntPtr CreateHandle(System.String password)

Disassembly:
	0x03225BEC MOV X21, X0
	0x03225BF0 MOV X0, X2
	0x03225BF4 LDP X9, X1, [X8 + 0x1F8]
	0x03225BF8 MOV W19, W3
	0x03225BFC BLR X9
	0x03225C00 CBZ X0, 0x3225C6C
	0x03225C04 LDR X8, [X0]
	0x03225C08 MOV X2, X20
	0x03225C0C MOV W3, W19
	0x03225C10 LDP X20, X19, [X31 + 0x10]
	0x03225C14 LDP X5, X4, [X8 + 0x1A8]
	0x03225C18 MOV X1, X21
	0x03225C1C LDP X30, X21, [X31], #0x20
	0x03225C20 BR X5
	0x03225C24 ADRP X0, 0xED3000
	0x03225C28 LDR X0, [X0 + 0x528]
	0x03225C2C BL 0x1C16D08
	0x03225C30 BL 0x1C16F10
	0x03225C34 MOV X19, X0
	0x03225C38 ADRP X0, 0xEFC000
	0x03225C3C LDR X0, [X0 + 0xFF0]
	0x03225C40 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11B8000
	006 Move X21, 0xEF7000
	007 Move W8, [X20+838]
	008 Move X21, [X21+2128]
	009 Move X19, X1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEF7000
	015 Move X0, [X0+2128]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+838], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call Marshal.StringToHGlobalAnsi, X0
	031 Return X0

Method: System.Void FreeHandle()

Disassembly:
	0x03225C44 MOV X1, X0
	0x03225C48 MOV X0, X19
	0x03225C4C MOV X2, X31
	0x03225C50 BL 0x330E100
	0x03225C54 ADRP X0, 0xEFC000
	0x03225C58 LDR X0, [X0 + 0xFF8]
	0x03225C5C BL 0x1C16D08
	0x03225C60 MOV X1, X0
	0x03225C64 MOV X0, X19
	0x03225C68 BL 0x1C16DEC
	0x03225C6C BL 0x1C16F20
	0x03225C70 MOV X8, X3
	0x03225C74 AND W3, W2, 0x1
	0x03225C78 MOV X2, X8
	0x03225C7C B 0x3225BD8
	0x03225C80 MOV W5, W31
	0x03225C84 B 0x3225C88
	0x03225C88 SUB X31, X31, 0x60
	0x03225C8C STP X30, X27, [X31 + 0x10]
	0x03225C90 STP X26, X25, [X31 + 0x20]
	0x03225C94 STP X24, X23, [X31 + 0x30]
	0x03225C98 STP X22, X21, [X31 + 0x40]
	0x03225C9C STP X20, X19, [X31 + 0x50]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11B8000
	006 Move X20, 0xEF7000
	007 Move W8, [X21+839]
	008 Move X20, [X20+2128]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEF7000
	015 Move X0, [X0+2128]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+839], W8
	019 Move X0, [X20]
	020 Move X19, [X19+16]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Marshal.ZeroFreeGlobalAllocAnsi, X0
	032 Return 

Method: System.Void .ctor(System.String password)

Disassembly:
	0x03225CA0 ADRP X25, 0x11B7000
	0x03225CA4 LDRB W8, [X25 + 0x359]
	0x03225CA8 MOV W23, W5
	0x03225CAC MOV W21, W4
	0x03225CB0 MOV W19, W3
	0x03225CB4 MOV X20, X2
	0x03225CB8 MOV W22, W1
	0x03225CBC MOV X24, X0
	0x03225CC0 TBNZ X8, 0x0, 0x3225CE4
	0x03225CC4 ADRP X0, 0xED0000
	0x03225CC8 LDR X0, [X0 + 0xC48]
	0x03225CCC BL 0x1C16CF4
	0x03225CD0 ADRP X0, 0xECE000
	0x03225CD4 LDR X0, [X0 + 0x5A8]
	0x03225CD8 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move W2, 1
	006 Move X1, X31
	007 Move X3, X31
	008 Move X19, X0
	009 Call SafeHandle..ctor, X0, X1, X2
	010 Compare X20, 0
	011 JumpIfEqual {15}
	012 Move X1, X20
	013 Call SafePasswordHandle.CreateHandle, X0, X1
	014 Move [X19+16], X0
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 Return 

Method: System.Boolean ReleaseHandle()

Disassembly:
	0x03225CDC MOVZ W8, 0x1
	0x03225CE0 STRB W8, [X25 + 0x359]
	0x03225CE4 ADRP X26, 0xECE000
	0x03225CE8 LDR X26, [X26 + 0x5A8]
	0x03225CEC MOV W25, W21
	0x03225CF0 CBZ X24, 0x3225D1C
	0x03225CF4 LDR X0, [X26]
	0x03225CF8 LDR W25, [X24 + 0x10]
	0x03225CFC LDR W8, [X0 + 0xE0]
	0x03225D00 CBNZ W8, 0x3225D08
	0x03225D04 BL 0x1C16DFC
	0x03225D08 SUB W1, W25, W22
	0x03225D0C MOV W0, W21
	0x03225D10 MOV X2, X31
	0x03225D14 BL 0x337EE94
	0x03225D18 MOV W25, W0
	0x03225D1C ADRP X27, 0xED0000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+16]
	005 Move X1, X31
	006 Move X2, X31
	007 Call IntPtr.op_Inequality, X0, X1
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {14}
	012 Move X0, X19
	013 Call SafePasswordHandle.FreeHandle, X0
	014 Move TEMP, 0
	015 Not TEMP
	016 Move W0, TEMP
	017 Move X1, X31
	018 Call IntPtr.op_Explicit, X0
	019 Move X8, X0
	020 Move W0, 1
	021 Move [X19+16], X8
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Return X0

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x03225D20 LDR X27, [X27 + 0xC48]
	0x03225D24 CBZ X20, 0x3225D50
	0x03225D28 LDR X0, [X26]
	0x03225D2C LDR W26, [X20 + 0x10]
	0x03225D30 LDR W8, [X0 + 0xE0]
	0x03225D34 CBNZ W8, 0x3225D3C
	0x03225D38 BL 0x1C16DFC
	0x03225D3C SUB W1, W26, W19
	0x03225D40 MOV W0, W21
	0x03225D44 MOV X2, X31
	0x03225D48 BL 0x337EE94
	0x03225D4C MOV W21, W0
	0x03225D50 LDR X0, [X27]
	0x03225D54 LDR W8, [X0 + 0xE0]
	0x03225D58 CBNZ W8, 0x3225D60
	0x03225D5C BL 0x1C16DFC
	0x03225D60 MOV X0, X31
	0x03225D64 BL 0x33387A0
	0x03225D68 CBZ X0, 0x3225DC4
	0x03225D6C LDR X8, [X0]
	0x03225D70 LDP X9, X1, [X8 + 0x1F8]
	0x03225D74 BLR X9
	0x03225D78 CBZ X0, 0x3225DC4
	0x03225D7C LDR X8, [X0]
	0x03225D80 AND W7, W23, 0x1
	0x03225D84 MOV X1, X24
	0x03225D88 MOV W2, W22
	0x03225D8C LDP X9, X8, [X8 + 0x1B8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11B8000
	006 Move W8, [X21+840]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xEFD000
	014 Move X0, [X0+4000]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+840], W8
	018 Move TEMP, X19
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfNotEqual {36}
	022 Move X8, 0xEFD000
	023 Move X8, [X8+4000]
	024 Move X0, X20
	025 Move X1, [X8]
	026 Call 0x25D736C, X0
	027 Move TEMP, X0
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfNotEqual {36}
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Return 
	036 And W1, W19, 1
	037 Move X0, X20
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X2, X31
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Call SafeHandle.Dispose, X0, X1
	044 Return 

Method: System.Boolean get_IsInvalid()

Disassembly:
	0x03225D90 MOV W3, W25
	0x03225D94 MOV X4, X20
	0x03225D98 MOV W5, W19
	0x03225D9C MOV W6, W21
	0x03225DA0 STR X8, [X31]
	0x03225DA4 BLR X9
	0x03225DA8 LDP X20, X19, [X31 + 0x50]
	0x03225DAC LDP X22, X21, [X31 + 0x40]
	0x03225DB0 LDP X24, X23, [X31 + 0x30]
	0x03225DB4 LDP X26, X25, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+16]
	004 Move TEMP, 0
	005 Not TEMP
	006 Move W0, TEMP
	007 Move X1, X31
	008 Call IntPtr.op_Explicit, X0
	009 Move X1, X0
	010 Move X0, X19
	011 Move X2, X31
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Call IntPtr.op_Equality, X0, X1
	015 Return X0

Method: System.String Mono_DangerousGetString()

Disassembly:
	0x03225DB8 LDP X30, X27, [X31 + 0x10]
	0x03225DBC ADD X31, X31, 0x60
	0x03225DC0 RET
	0x03225DC4 BL 0x1C16F20
	0x03225DC8 SUB X31, X31, 0x50
	0x03225DCC STP X30, X25, [X31 + 0x10]
	0x03225DD0 STP X24, X23, [X31 + 0x20]
	0x03225DD4 STP X22, X21, [X31 + 0x30]
	0x03225DD8 STP X20, X19, [X31 + 0x40]
	0x03225DDC ADRP X24, 0x11B7000
	0x03225DE0 LDRB W8, [X24 + 0x35A]
	0x03225DE4 MOV W25, W5
	0x03225DE8 MOV W23, W4
	0x03225DEC MOV W19, W3
	0x03225DF0 MOV X20, X2
	0x03225DF4 MOV W21, W1
	0x03225DF8 MOV X22, X0
	0x03225DFC TBNZ X8, 0x0, 0x3225E2C
	0x03225E00 ADRP X0, 0xEFC000
	0x03225E04 LDR X0, [X0 + 0xFD0]
	0x03225E08 BL 0x1C16CF4
	0x03225E0C ADRP X0, 0xED0000
	0x03225E10 LDR X0, [X0 + 0xC48]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11B8000
	006 Move X20, 0xEF7000
	007 Move W8, [X21+841]
	008 Move X20, [X20+2128]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEF7000
	015 Move X0, [X0+2128]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+841], W8
	019 Move X0, [X20]
	020 Move X19, [X19+16]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Marshal.PtrToStringAnsi, X0
	032 Return X0

