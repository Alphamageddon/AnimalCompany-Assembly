Type: Mono.SafeStringMarshal

Method: System.IntPtr StringToUtf8_icall(ref System.String str)

Disassembly:
	0x0320C1FC ADRP X8, 0xF15000

ISIL:
	001 Call 0x1C178D4
	002 Return X0

Method: System.IntPtr StringToUtf8(System.String str)

Disassembly:
	0x0320C200 LDR X8, [X8 + 0x960]
	0x0320C204 MOV X0, X20
	0x0320C208 MOV X2, X31
	0x0320C20C LDR X1, [X8]
	0x0320C210 BL 0x321BA08
	0x0320C214 TBZ X0, 0x0, 0x320C228

ISIL:
	001 Move [X31-16], X30
	002 Move [X31+8], X0
	003 Add X0, X31, 8
	004 Call 0x1C178D4
	005 Move X30, [X31+16]
	006 Return X0

Method: System.Void GFree(System.IntPtr ptr)

Disassembly:
	0x0320C218 LDR X0, [X19 + 0x38]

ISIL:
	001 Call 0x1C17950
	002 Return 

Method: System.Void .ctor(System.String str)

Disassembly:
	0x0320C030 MOV X20, X0
	0x0320C034 ADRP X0, 0xF15000

ISIL:
	001 Move [X0], X1
	002 Move [X0+8], X31
	003 Return 

Method: System.IntPtr get_Value()

Disassembly:
	0x0320C21C CBZ X0, 0x320C2E4
	0x0320C220 MOVZ W1, 0x26
	0x0320C224 B 0x320C2D4
	0x0320C228 ADRP X8, 0xF15000
	0x0320C22C LDR X8, [X8 + 0x958]
	0x0320C230 MOV X0, X20
	0x0320C234 MOV X2, X31
	0x0320C238 LDR X1, [X8]
	0x0320C23C BL 0x321BA08
	0x0320C240 TBZ X0, 0x0, 0x320C254
	0x0320C244 LDR X0, [X19 + 0x38]
	0x0320C248 CBZ X0, 0x320C2E4
	0x0320C24C MOVZ W1, 0x22
	0x0320C250 B 0x320C2D4
	0x0320C254 ADRP X8, 0xF15000
	0x0320C258 LDR X8, [X8 + 0x950]
	0x0320C25C MOV X0, X20
	0x0320C260 MOV X2, X31

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+8]
	006 Move X1, X31
	007 Move X2, X31
	008 Call IntPtr.op_Equality, X0, X1
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {20}
	013 Move X8, [X19]
	014 Compare X8, 0
	015 JumpIfEqual {20}
	016 Add X0, X31, 8
	017 Move [X31+8], X8
	018 Call 0x1C178D4
	019 Move [X19+8], X0
	020 Move X0, [X19+8]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Add X31, X31, 32
	024 Return X0

Method: System.Void Dispose()

Disassembly:
	0x0320C264 LDR X1, [X8]
	0x0320C268 BL 0x321BA08
	0x0320C26C TBZ X0, 0x0, 0x320C280
	0x0320C270 LDR X0, [X19 + 0x38]
	0x0320C274 CBZ X0, 0x320C2E4
	0x0320C278 MOVZ W1, 0x27
	0x0320C27C B 0x320C2D4
	0x0320C280 ADRP X8, 0xF15000
	0x0320C284 LDR X8, [X8 + 0x948]
	0x0320C288 MOV X0, X20
	0x0320C28C MOV X2, X31
	0x0320C290 LDR X1, [X8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+8]
	005 Move X1, X31
	006 Move X2, X31
	007 Call IntPtr.op_Inequality, X0, X1
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {15}
	012 Move X0, [X19+8]
	013 Call 0x1C17950
	014 Move [X19+8], X31
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Return 

