Type: Mono.Xml.SmallXmlParser/AttrListImpl

Method: System.Int32 get_Length()

Disassembly:
	0x0320E320 LDR X0, [X20]
	0x0320E324 MOVZ W8, 0x30
	0x0320E328 MOV X22, X19
	0x0320E32C LDR X9, [X0 + 0xB8]
	0x0320E330 LDR X8, [X9, X8, LSL]
	0x0320E334 STR X8, [X22]
	0x0320E338 LDP X20, X19, [X31 + 0x40]
	0x0320E33C LDP X22, X21, [X31 + 0x30]
	0x0320E340 LDP X24, X23, [X31 + 0x20]
	0x0320E344 LDP X26, X25, [X31 + 0x10]
	0x0320E348 LDR X30, [X31], #0x50
	0x0320E34C RET
	0x0320E350 ADRP X8, 0xF13000
	0x0320E354 LDR X8, [X8 + 0xAB8]
	0x0320E358 MOV X0, X24
	0x0320E35C MOV X2, X31
	0x0320E360 LDR X1, [X8]
	0x0320E364 BL 0x321BA08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11CF000
	005 Move W8, [X20+661]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xEE7000
	012 Move X0, [X0+456]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+661], W8
	016 Move X8, [X19+16]
	017 Compare X8, 0
	018 JumpIfEqual {24}
	019 Move W0, [X8+24]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0
	024 Call 0x1C17F20

Method: System.String GetName(System.Int32 i)

Disassembly:
	0x0320E368 TBZ X0, 0x0, 0x320E338
	0x0320E36C ADRP X24, 0xF13000
	0x0320E370 LDR X24, [X24 + 0xA10]
	0x0320E374 LDR X0, [X24]
	0x0320E378 LDR W8, [X0 + 0xE0]
	0x0320E37C CBNZ W8, 0x320E388
	0x0320E380 BL 0x1C16DFC
	0x0320E384 LDR X0, [X24]
	0x0320E388 LDR X8, [X0 + 0xB8]
	0x0320E38C LDR X9, [X8 + 0x48]
	0x0320E390 STR X9, [X21]
	0x0320E394 LDR X9, [X8 + 0x68]
	0x0320E398 STR X9, [X20]
	0x0320E39C LDR X8, [X8 + 0x70]
	0x0320E3A0 ADRP X20, 0xF13000
	0x0320E3A4 STR X8, [X23]
	0x0320E3A8 LDR X20, [X20 + 0xAA8]
	0x0320E3AC LDR X0, [X20]
	0x0320E3B0 LDR W8, [X0 + 0xE0]
	0x0320E3B4 CBNZ W8, 0x320E3C0
	0x0320E3B8 BL 0x1C16DFC
	0x0320E3BC LDR X0, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11CF000
	006 Move W8, [X21+662]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF0E000
	014 Move X0, [X0+2904]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+662], W8
	018 Move X0, [X20+16]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, 0xF0E000
	022 Move X8, [X8+2904]
	023 Move W1, W19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call List`1<Object>.get_Item, X0, X1
	030 Return X0
	031 Call 0x1C17F20

Method: System.String GetValue(System.Int32 i)

Disassembly:
	0x0320E3C0 LDR X8, [X0 + 0xB8]
	0x0320E3C4 LDR X8, [X8 + 0x30]
	0x0320E3C8 STR X8, [X19]
	0x0320E3CC LDR X0, [X20]
	0x0320E3D0 MOVZ W8, 0x30
	0x0320E3D4 B 0x320E32C
	0x0320E3D8 STP X30, X21, [X31 - 0x20]!
	0x0320E3DC STP X20, X19, [X31 + 0x10]
	0x0320E3E0 ADRP X21, 0x11CE000
	0x0320E3E4 ADRP X20, 0xF13000
	0x0320E3E8 LDRB W8, [X21 + 0x2A4]
	0x0320E3EC LDR X20, [X20 + 0xA10]
	0x0320E3F0 MOV W19, W0
	0x0320E3F4 TBNZ X8, 0x0, 0x320E418
	0x0320E3F8 ADRP X0, 0xF13000
	0x0320E3FC LDR X0, [X0 + 0xAA8]
	0x0320E400 BL 0x1C16CF4
	0x0320E404 ADRP X0, 0xF13000
	0x0320E408 LDR X0, [X0 + 0xA10]
	0x0320E40C BL 0x1C16CF4
	0x0320E410 MOVZ W8, 0x1
	0x0320E414 STRB W8, [X21 + 0x2A4]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11CF000
	006 Move W8, [X21+663]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF0E000
	014 Move X0, [X0+2904]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+663], W8
	018 Move X0, [X20+24]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, 0xF0E000
	022 Move X8, [X8+2904]
	023 Move W1, W19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call List`1<Object>.get_Item, X0, X1
	030 Return X0
	031 Call 0x1C17F20

Method: System.String GetValue(System.String name)

Disassembly:
	0x0320E418 LDR X0, [X20]
	0x0320E41C ADRP X21, 0xF13000
	0x0320E420 LDR W8, [X0 + 0xE0]
	0x0320E424 LDR X21, [X21 + 0xAA8]
	0x0320E428 CBNZ W8, 0x320E434
	0x0320E42C BL 0x1C16DFC
	0x0320E430 LDR X0, [X20]
	0x0320E434 LDR X8, [X21]
	0x0320E438 LDR X9, [X0 + 0xB8]
	0x0320E43C LDR W10, [X8 + 0xE0]
	0x0320E440 LDR X20, [X9 + 0x10]
	0x0320E444 CBNZ W10, 0x320E454
	0x0320E448 MOV X0, X8
	0x0320E44C BL 0x1C16DFC
	0x0320E450 LDR X8, [X21]
	0x0320E454 LDR X8, [X8 + 0xB8]
	0x0320E458 LDR X0, [X8 + 0x8]
	0x0320E45C CBZ X0, 0x320E478
	0x0320E460 MOV W1, W19
	0x0320E464 BL 0x320D6F0
	0x0320E468 LDRB W0, [X20, W0, SXTW]
	0x0320E46C LDP X20, X19, [X31 + 0x10]
	0x0320E470 LDP X30, X21, [X31], #0x20
	0x0320E474 RET
	0x0320E478 BL 0x1C16F20
	0x0320E47C STP X30, X21, [X31 - 0x20]!
	0x0320E480 STP X20, X19, [X31 + 0x10]
	0x0320E484 ADRP X21, 0x11CE000
	0x0320E488 ADRP X20, 0xF13000
	0x0320E48C LDRB W8, [X21 + 0x2A5]
	0x0320E490 LDR X20, [X20 + 0xA10]
	0x0320E494 MOV W19, W0
	0x0320E498 TBNZ X8, 0x0, 0x320E4BC
	0x0320E49C ADRP X0, 0xF13000
	0x0320E4A0 LDR X0, [X0 + 0xAA8]
	0x0320E4A4 BL 0x1C16CF4
	0x0320E4A8 ADRP X0, 0xF13000
	0x0320E4AC LDR X0, [X0 + 0xA10]
	0x0320E4B0 BL 0x1C16CF4
	0x0320E4B4 MOVZ W8, 0x1
	0x0320E4B8 STRB W8, [X21 + 0x2A5]
	0x0320E4BC LDR X0, [X20]
	0x0320E4C0 ADRP X21, 0xF13000
	0x0320E4C4 LDR W8, [X0 + 0xE0]
	0x0320E4C8 LDR X21, [X21 + 0xAA8]
	0x0320E4CC CBNZ W8, 0x320E4D8
	0x0320E4D0 BL 0x1C16DFC
	0x0320E4D4 LDR X0, [X20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11CF000
	007 Move W8, [X21+664]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xEE7000
	015 Move X0, [X0+456]
	016 Call 0x1C17CF4
	017 Move X0, 0xF0E000
	018 Move X0, [X0+2904]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+664], W8
	022 Move X0, [X20+16]
	023 Compare X0, 0
	024 JumpIfEqual {44}
	025 Move X22, 0xF0E000
	026 Move X22, [X22+2904]
	027 Move W21, W31
	028 Move W8, [X0+24]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X2, [X22]
	031 Move W1, W21
	032 Call List`1<Object>.get_Item, X0, X1
	033 Move X1, X19
	034 Move X2, X31
	035 Call String.op_Equality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {52}
	040 Move X0, [X20+16]
	041 Add W21, W21, 1
	042 Compare X0, 0
	043 JumpIfNotEqual {28}
	044 Call 0x1C17F20
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X22, [X31+16]
	048 Move X21, [X31+24]
	049 Move X0, X31
	050 Move X30, [X31+48]
	051 Return X0
	052 Move X0, [X20+24]
	053 Compare X0, 0
	054 JumpIfEqual {44}
	055 Move X2, [X22]
	056 Move W1, W21
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X22, [X31+16]
	060 Move X21, [X31+24]
	061 Move X30, [X31+48]
	062 Call List`1<Object>.get_Item, X0, X1
	063 Return X0

Method: System.String[] get_Names()

Disassembly:
	0x0320E4D8 LDR X8, [X21]
	0x0320E4DC LDR X9, [X0 + 0xB8]
	0x0320E4E0 LDR W10, [X8 + 0xE0]
	0x0320E4E4 LDR X20, [X9 + 0x18]
	0x0320E4E8 CBNZ W10, 0x320E4F8
	0x0320E4EC MOV X0, X8
	0x0320E4F0 BL 0x1C16DFC
	0x0320E4F4 LDR X8, [X21]
	0x0320E4F8 LDR X8, [X8 + 0xB8]
	0x0320E4FC LDR X0, [X8 + 0x10]
	0x0320E500 CBZ X0, 0x320E51C
	0x0320E504 MOV W1, W19
	0x0320E508 BL 0x320D6F0
	0x0320E50C LDRB W0, [X20, W0, SXTW]
	0x0320E510 LDP X20, X19, [X31 + 0x10]
	0x0320E514 LDP X30, X21, [X31], #0x20
	0x0320E518 RET
	0x0320E51C BL 0x1C16F20
	0x0320E520 STP X30, X21, [X31 - 0x20]!
	0x0320E524 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11CF000
	005 Move W8, [X20+665]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xEE8000
	012 Move X0, [X0+3704]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+665], W8
	016 Move X0, [X19+16]
	017 Compare X0, 0
	018 JumpIfEqual {27}
	019 Move X8, 0xEE8000
	020 Move X8, [X8+3704]
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X1, [X8]
	024 Move X30, [X31+32]
	025 Call List`1<Object>.ToArray, X0
	026 Return X0
	027 Call 0x1C17F20

Method: System.String[] get_Values()

Disassembly:
	0x0320E528 ADRP X21, 0x11CE000
	0x0320E52C ADRP X20, 0xF13000
	0x0320E530 LDRB W8, [X21 + 0x2A6]
	0x0320E534 LDR X20, [X20 + 0xA10]
	0x0320E538 MOV W19, W0
	0x0320E53C TBNZ X8, 0x0, 0x320E560
	0x0320E540 ADRP X0, 0xF13000
	0x0320E544 LDR X0, [X0 + 0xAA8]
	0x0320E548 BL 0x1C16CF4
	0x0320E54C ADRP X0, 0xF13000
	0x0320E550 LDR X0, [X0 + 0xA10]
	0x0320E554 BL 0x1C16CF4
	0x0320E558 MOVZ W8, 0x1
	0x0320E55C STRB W8, [X21 + 0x2A6]
	0x0320E560 LDR X0, [X20]
	0x0320E564 ADRP X21, 0xF13000
	0x0320E568 LDR W8, [X0 + 0xE0]
	0x0320E56C LDR X21, [X21 + 0xAA8]
	0x0320E570 CBNZ W8, 0x320E57C
	0x0320E574 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11CF000
	005 Move W8, [X20+666]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xEE8000
	012 Move X0, [X0+3704]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+666], W8
	016 Move X0, [X19+24]
	017 Compare X0, 0
	018 JumpIfEqual {27}
	019 Move X8, 0xEE8000
	020 Move X8, [X8+3704]
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X1, [X8]
	024 Move X30, [X31+32]
	025 Call List`1<Object>.ToArray, X0
	026 Return X0
	027 Call 0x1C17F20

Method: System.Void Clear()

Disassembly:
	0x0320DD50 LDRH W8, [X24, W27, SXTW]
	0x0320DD54 ADD W27, W27, 0x1
	0x0320DD58 ADD W3, W3, 0x1
	0x0320DD5C CBNZ W8, 0x320DD50
	0x0320DD60 MOV X0, X31
	0x0320DD64 MOV X1, X24
	0x0320DD68 MOV W2, W25
	0x0320DD6C MOV X4, X31
	0x0320DD70 BL 0x322EAD4
	0x0320DD74 ADRP X8, 0xF14000
	0x0320DD78 LDR X8, [X8 + 0xA40]
	0x0320DD7C MOV X25, X0
	0x0320DD80 LDR X8, [X8]
	0x0320DD84 MOV X0, X8
	0x0320DD88 BL 0x1C16F10
	0x0320DD8C MOV X1, X31
	0x0320DD90 MOV X26, X0
	0x0320DD94 BL 0x33BDD8C
	0x0320DD98 LDR W8, [X31 + 0x24]
	0x0320DD9C STP X21, X25, [X26 + 0x18]
	0x0320DDA0 STR X31, [X26 + 0x28]
	0x0320DDA4 STR W8, [X26 + 0x10]
	0x0320DDA8 CBZ X22, 0x320E0A4
	0x0320DDAC ADRP X9, 0xF14000
	0x0320DDB0 LDR W10, [X22 + 0x1C]
	0x0320DDB4 LDR X8, [X22 + 0x10]
	0x0320DDB8 LDR X9, [X9 + 0xA50]
	0x0320DDBC ADD W10, W10, 0x1
	0x0320DDC0 LDR X9, [X9]
	0x0320DDC4 STR W10, [X22 + 0x1C]
	0x0320DDC8 CBZ X8, 0x320E0A4
	0x0320DDCC LDRSW X10, [X22 + 0x18]
	0x0320DDD0 LDR W11, [X8 + 0x18]
	0x0320DDD4 CMP W10, W11
	0x0320DDD8 B.CS 0x320DF30
	0x0320DDDC ADD W9, W10, 0x1
	0x0320DDE0 ADD X8, X8, X10, 0x3, LSL
	0x0320DDE4 STR W9, [X22 + 0x18]
	0x0320DDE8 STR X26, [X8 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11D0000
	005 Move W8, [X20+667]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF0F000
	012 Move X0, [X0+2936]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+667], W8
	016 Move X8, [X19+16]
	017 Compare X8, 0
	018 JumpIfEqual {50}
	019 Move W2, [X8+24]
	020 Move W9, [X8+28]
	021 Add W9, W9, 1
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move [X8+24], W31
	024 Move [X8+28], W9
	025 Move X0, [X8+16]
	026 Move W1, W31
	027 Move X3, X31
	028 Call Array.Clear, X0, X1, X2
	029 Move X8, [X19+24]
	030 Compare X8, 0
	031 JumpIfEqual {50}
	032 Move W2, [X8+24]
	033 Move W9, [X8+28]
	034 Add W9, W9, 1
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move [X8+24], W31
	037 Move [X8+28], W9
	038 Move X0, [X8+16]
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move W1, W31
	042 Move X3, X31
	043 Move X30, [X31+32]
	044 Call Array.Clear, X0, X1, X2
	045 Return 
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Return 
	050 Call 0x1C17F20

Method: System.Void Add(System.String name, System.String value)

Disassembly:
	0x0320E214 BL 0x321BA08
	0x0320E218 TBZ X0, 0x0, 0x320E270
	0x0320E21C ADRP X22, 0xF13000
	0x0320E220 LDR X22, [X22 + 0xA10]
	0x0320E224 LDR X0, [X22]
	0x0320E228 LDR W8, [X0 + 0xE0]
	0x0320E22C CBNZ W8, 0x320E238
	0x0320E230 BL 0x1C16DFC
	0x0320E234 LDR X0, [X22]
	0x0320E238 LDR X8, [X0 + 0xB8]
	0x0320E23C LDR X9, [X8 + 0x30]
	0x0320E240 STR X9, [X21]
	0x0320E244 LDR X8, [X8 + 0x50]
	0x0320E248 STR X8, [X20]
	0x0320E24C ADRP X20, 0xF13000
	0x0320E250 LDR X20, [X20 + 0xAA8]
	0x0320E254 LDR X0, [X20]
	0x0320E258 LDR W8, [X0 + 0xE0]
	0x0320E25C CBNZ W8, 0x320E268
	0x0320E260 BL 0x1C16DFC
	0x0320E264 LDR X0, [X20]
	0x0320E268 MOVZ W8, 0x28
	0x0320E26C B 0x320E328
	0x0320E270 ADRP X8, 0xF13000
	0x0320E274 LDR X8, [X8 + 0xAC0]
	0x0320E278 MOV X0, X24
	0x0320E27C MOV X2, X31
	0x0320E280 LDR X1, [X8]
	0x0320E284 BL 0x321BA08
	0x0320E288 TBZ X0, 0x0, 0x320E2BC
	0x0320E28C ADRP X22, 0xF13000
	0x0320E290 LDR X22, [X22 + 0xA10]
	0x0320E294 LDR X0, [X22]
	0x0320E298 LDR W8, [X0 + 0xE0]
	0x0320E29C CBNZ W8, 0x320E2A8
	0x0320E2A0 BL 0x1C16DFC
	0x0320E2A4 LDR X0, [X22]
	0x0320E2A8 LDR X8, [X0 + 0xB8]
	0x0320E2AC LDR X9, [X8 + 0x38]
	0x0320E2B0 STR X9, [X21]
	0x0320E2B4 LDR X8, [X8 + 0x58]
	0x0320E2B8 B 0x320E304
	0x0320E2BC ADRP X8, 0xF13000
	0x0320E2C0 LDR X8, [X8 + 0xAB0]
	0x0320E2C4 MOV X0, X24
	0x0320E2C8 MOV X2, X31
	0x0320E2CC LDR X1, [X8]
	0x0320E2D0 BL 0x321BA08
	0x0320E2D4 TBZ X0, 0x0, 0x320E350
	0x0320E2D8 ADRP X22, 0xF13000
	0x0320E2DC LDR X22, [X22 + 0xA10]
	0x0320E2E0 LDR X0, [X22]
	0x0320E2E4 LDR W8, [X0 + 0xE0]
	0x0320E2E8 CBNZ W8, 0x320E2F4
	0x0320E2EC BL 0x1C16DFC
	0x0320E2F0 LDR X0, [X22]
	0x0320E2F4 LDR X8, [X0 + 0xB8]
	0x0320E2F8 LDR X9, [X8 + 0x40]
	0x0320E2FC STR X9, [X21]
	0x0320E300 LDR X8, [X8 + 0x60]
	0x0320E304 STR X8, [X20]
	0x0320E308 ADRP X20, 0xF13000
	0x0320E30C LDR X20, [X20 + 0xAA8]
	0x0320E310 LDR X0, [X20]
	0x0320E314 LDR W8, [X0 + 0xE0]
	0x0320E318 CBNZ W8, 0x320E324
	0x0320E31C BL 0x1C16DFC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11CF000
	007 Move W8, [X22+668]
	008 Move X19, X2
	009 Move X21, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xEE7000
	016 Move X0, [X0+440]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+668], W8
	020 Move X0, [X20+16]
	021 Compare X0, 0
	022 JumpIfEqual {78}
	023 Move X22, 0xEE7000
	024 Move X22, [X22+440]
	025 Move W10, [X0+28]
	026 Move X8, [X0+16]
	027 Move X9, [X22]
	028 Add W10, W10, 1
	029 Move [X0+28], W10
	030 Compare X8, 0
	031 JumpIfEqual {78}
	032 NotImplemented "Instruction LDRSW not yet implemented."
	033 Move W11, [X8+24]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Add W9, W10, 1
	036 Add X8, X8, X10
	037 Move [X0+24], W9
	038 Move [X8+32], X21
	039 Move X8, [X9+32]
	040 Move X1, X21
	041 Move X8, [X8+192]
	042 Move X2, [X8+112]
	043 Call List`1<Object>.AddWithResize, X0, X1
	044 Move X0, [X20+24]
	045 Compare X0, 0
	046 JumpIfEqual {78}
	047 Move W10, [X0+28]
	048 Move X8, [X0+16]
	049 Move X9, [X22]
	050 Add W10, W10, 1
	051 Move [X0+28], W10
	052 Compare X8, 0
	053 JumpIfEqual {78}
	054 NotImplemented "Instruction LDRSW not yet implemented."
	055 Move W11, [X8+24]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Add W9, W10, 1
	058 Add X8, X8, X10
	059 Move [X0+24], W9
	060 Move [X8+32], X19
	061 Move X20, [X31+32]
	062 Move X19, [X31+40]
	063 Move X22, [X31+16]
	064 Move X21, [X31+24]
	065 Move X30, [X31+48]
	066 Return 
	067 Move X8, [X9+32]
	068 Move X1, X19
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X22, [X31+16]
	072 Move X21, [X31+24]
	073 Move X8, [X8+192]
	074 Move X2, [X8+112]
	075 Move X30, [X31+48]
	076 Call List`1<Object>.AddWithResize, X0, X1
	077 Return 
	078 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x0320C9E8 MOV X0, X21
	0x0320C9EC MOV X1, X20
	0x0320C9F0 MOV X2, X22
	0x0320C9F4 BLR X8
	0x0320C9F8 LDR X0, [X19 + 0x50]
	0x0320C9FC CBZ X0, 0x320C9A8
	0x0320CA00 BL 0x320CD50
	0x0320CA04 MOV X0, X19
	0x0320CA08 MOV W1, W31
	0x0320CA0C BL 0x320BDD0
	0x0320CA10 LDR X0, [X19 + 0x18]
	0x0320CA14 CBZ X0, 0x320C9A8
	0x0320CA18 LDR X8, [X0]
	0x0320CA1C LDP X9, X1, [X8 + 0x1B8]
	0x0320CA20 BLR X9
	0x0320CA24 CMP W0, 0x2F
	0x0320CA28 B.NE 0x320CA7C
	0x0320CA2C MOV X0, X19
	0x0320CA30 BL 0x320BF3C
	0x0320CA34 LDR X21, [X19 + 0x10]
	0x0320CA38 CBZ X21, 0x320C9A8
	0x0320CA3C LDR X8, [X21]
	0x0320CA40 LDR X1, [X23]
	0x0320CA44 LDRH W9, [X8 + 0x12E]
	0x0320CA48 CBZ X9, 0x320CA6C
	0x0320CA4C LDR X10, [X8 + 0xB0]
	0x0320CA50 ADD X10, X10, 0x8
	0x0320CA54 LDUR X11, [X10 - 0x8]
	0x0320CA58 CMP X11, X1
	0x0320CA5C B.EQ 0x320CAB8
	0x0320CA60 SUBS X9, X9, 0x1
	0x0320CA64 ADD X10, X10, 0x10
	0x0320CA68 B.NE 0x320CA54
	0x0320CA6C MOVZ W2, 0x3
	0x0320CA70 MOV X0, X21
	0x0320CA74 BL 0x1C5C788
	0x0320CA78 B 0x320CAC8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11D1000
	007 Move X22, 0xEE9000
	008 Move X21, 0xEE9000
	009 Move W8, [X20+669]
	010 Move X22, [X22+464]
	011 Move X21, [X21+448]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xEE9000
	018 Move X0, [X0+448]
	019 Call 0x1C17CF4
	020 Move X0, 0xEE9000
	021 Move X0, [X0+464]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+669], W8
	025 Move X0, [X22]
	026 Call 0x1C17F10
	027 Move X1, [X21]
	028 Move X20, X0
	029 Call List`1<Object>..ctor, X0
	030 Move [X19+16], X20
	031 Move X0, [X22]
	032 Call 0x1C17F10
	033 Move X1, [X21]
	034 Move X20, X0
	035 Call List`1<Object>..ctor, X0
	036 Move [X19+24], X20
	037 Move X0, X19
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move X1, X31
	043 Move X30, [X31+48]
	044 Call Object..ctor, X0
	045 Return 

