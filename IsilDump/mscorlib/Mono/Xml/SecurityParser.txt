Type: Mono.Xml.SecurityParser

Method: System.Void .ctor()

Disassembly:
	0x0320C294 BL 0x321BA08
	0x0320C298 TBZ X0, 0x0, 0x320C2AC
	0x0320C29C LDR X0, [X19 + 0x38]
	0x0320C2A0 CBZ X0, 0x320C2E4
	0x0320C2A4 MOVZ W1, 0x3C
	0x0320C2A8 B 0x320C2D4
	0x0320C2AC ADRP X8, 0xF15000
	0x0320C2B0 LDR X8, [X8 + 0x940]
	0x0320C2B4 MOV X0, X20
	0x0320C2B8 MOV X2, X31
	0x0320C2BC LDR X1, [X8]
	0x0320C2C0 BL 0x321BA08
	0x0320C2C4 TBZ X0, 0x0, 0x320C2E8
	0x0320C2C8 LDR X0, [X19 + 0x38]
	0x0320C2CC CBZ X0, 0x320C2E4
	0x0320C2D0 MOVZ W1, 0x3E
	0x0320C2D4 LDP X20, X19, [X31 + 0x10]
	0x0320C2D8 MOV X2, X31
	0x0320C2DC LDR X30, [X31], #0x20
	0x0320C2E0 B 0x3233D30
	0x0320C2E4 BL 0x1C16F20
	0x0320C2E8 ADRP X0, 0xF15000
	0x0320C2EC LDR X0, [X0 + 0x968]
	0x0320C2F0 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11D1000
	006 Move X20, 0xF16000
	007 Move W8, [X21+646]
	008 Move X20, [X20+2248]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF16000
	015 Move X0, [X0+2248]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+646], W8
	019 Move X0, X19
	020 Call SmallXmlParser..ctor, X0
	021 Move X0, [X20]
	022 Call 0x1C17F10
	023 Move X1, X31
	024 Move X20, X0
	025 Call Stack..ctor, X0
	026 Move [X19+120], X20
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return 

Method: System.Void LoadXml(System.String xml)

Disassembly:
	0x0320C400 BL 0x33A0C7C
	0x0320C404 STR X23, [X19 + 0x40]
	0x0320C408 CBZ X23, 0x320C478
	0x0320C40C LDR W8, [X23 + 0x18]
	0x0320C410 CMP W20, W8
	0x0320C414 B.CS 0x320C47C
	0x0320C418 ADD X8, X23, W20, 0x1, SXTW
	0x0320C41C MOV X0, X19
	0x0320C420 STRH W22, [X8 + 0x20]
	0x0320C424 BL 0x320BF3C
	0x0320C428 LDR X0, [X19 + 0x18]
	0x0320C42C CBZ X0, 0x320C478
	0x0320C430 LDR X8, [X0]
	0x0320C434 ADD W20, W20, 0x1
	0x0320C438 LDP X9, X1, [X8 + 0x1B8]
	0x0320C43C BLR X9
	0x0320C440 MOV W22, W0
	0x0320C444 ADD W21, W21, 0x2
	0x0320C448 TBZ X0, 0x1F, 0x320C3B8
	0x0320C44C CBZ W20, 0x320C48C
	0x0320C450 LDR X1, [X19 + 0x40]
	0x0320C454 MOV W3, W20
	0x0320C458 LDP X20, X19, [X31 + 0x30]
	0x0320C45C LDP X22, X21, [X31 + 0x20]
	0x0320C460 LDP X24, X23, [X31 + 0x10]
	0x0320C464 MOV X0, X31
	0x0320C468 MOV W2, W31
	0x0320C46C MOV X4, X31
	0x0320C470 LDR X30, [X31], #0x40
	0x0320C474 B 0x322EAE4
	0x0320C478 BL 0x1C16F20
	0x0320C47C BL 0x1C16F28
	0x0320C480 ADRP X0, 0xF15000
	0x0320C484 LDR X0, [X0 + 0x978]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11D1000
	006 Move W8, [X21+647]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF14000
	014 Move X0, [X0+3952]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+647], W8
	018 Move X0, [X19+120]
	019 Move [X19+104], X31
	020 Compare X0, 0
	021 JumpIfEqual {41}
	022 Move X8, [X0]
	023 Move X21, 0xF14000
	024 Move X9, [X8+520]
	025 Move X1, [X8+528]
	026 Move X21, [X21+3952]
	027 NotImplemented "Instruction BLR not yet implemented."
	028 Move X0, [X21]
	029 Call 0x1C17F10
	030 Move X1, X20
	031 Move X2, X31
	032 Move X21, X0
	033 Call StringReader..ctor, X0, X1
	034 Move X0, X19
	035 Move X2, X19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X1, X21
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Call 0x1C17F20

Method: System.Security.SecurityElement ToXml()

Disassembly:
	0x0320C650 MOV X0, X19
	0x0320C654 BL 0x320C31C

ISIL:
	001 Move X0, [X0+104]
	002 Return X0

Method: System.Void OnStartParsing(Mono.Xml.SmallXmlParser parser)

Disassembly:
	0x0320C658 MOV X20, X0

ISIL:
	001 Return 

Method: System.Void OnProcessingInstruction(System.String name, System.String text)

Disassembly:
	0x0320C65C MOV X0, X19

ISIL:
	001 Return 

Method: System.Void OnIgnorableWhitespace(System.String s)

Disassembly:
	0x0320C660 MOV W1, W31

ISIL:
	001 Return 

Method: System.Void OnStartElement(System.String name, Mono.Xml.SmallXmlParser/IAttrList attrs)

Disassembly:
	0x0320C664 BL 0x320BDD0
	0x0320C668 LDR X0, [X19 + 0x18]
	0x0320C66C CBZ X0, 0x320C9A8
	0x0320C670 ADRP X8, 0xEE9000
	0x0320C674 LDR X8, [X8 + 0x278]
	0x0320C678 LDR X9, [X0]
	0x0320C67C LDR X8, [X8]
	0x0320C680 LDR X8, [X8 + 0xB8]
	0x0320C684 LDR X21, [X8]
	0x0320C688 LDP X8, X1, [X9 + 0x1B8]
	0x0320C68C BLR X8
	0x0320C690 CMP W0, 0x3F
	0x0320C694 B.NE 0x320C91C
	0x0320C698 LDR X22, [X19 + 0x10]
	0x0320C69C CBZ X22, 0x320C9A8
	0x0320C6A0 ADRP X10, 0xF15000
	0x0320C6A4 LDR X8, [X22]
	0x0320C6A8 LDR X10, [X10 + 0x8D8]
	0x0320C6AC LDRH W9, [X8 + 0x12E]
	0x0320C6B0 LDR X1, [X10]
	0x0320C6B4 CBZ X9, 0x320C6D8
	0x0320C6B8 LDR X10, [X8 + 0xB0]
	0x0320C6BC ADD X10, X10, 0x8
	0x0320C6C0 LDUR X11, [X10 - 0x8]
	0x0320C6C4 CMP X11, X1
	0x0320C6C8 B.EQ 0x320C9AC
	0x0320C6CC SUBS X9, X9, 0x1
	0x0320C6D0 ADD X10, X10, 0x10
	0x0320C6D4 B.NE 0x320C6C0
	0x0320C6D8 MOVZ W2, 0x4
	0x0320C6DC MOV X0, X22
	0x0320C6E0 BL 0x1C5C788
	0x0320C6E4 B 0x320C9BC
	0x0320C6E8 MOV X0, X19
	0x0320C6EC BL 0x320CB9C
	0x0320C6F0 LDR X0, [X19 + 0x20]
	0x0320C6F4 CBZ X0, 0x320C9A8
	0x0320C6F8 LDR X8, [X0]
	0x0320C6FC LDP X9, X1, [X8 + 0x1D8]
	0x0320C700 BLR X9
	0x0320C704 CBZ W0, 0x320CAF0
	0x0320C708 MOV X0, X19
	0x0320C70C BL 0x320BF3C
	0x0320C710 MOV X0, X19
	0x0320C714 BL 0x320C31C
	0x0320C718 MOV X20, X0
	0x0320C71C MOV X0, X19
	0x0320C720 MOV W1, W31
	0x0320C724 BL 0x320BDD0
	0x0320C728 LDR X0, [X19 + 0x20]
	0x0320C72C CBZ X0, 0x320C9A8
	0x0320C730 LDR X8, [X0]
	0x0320C734 LDR X9, [X8 + 0x258]
	0x0320C738 LDR X1, [X8 + 0x260]
	0x0320C73C BLR X9
	0x0320C740 ADRP X22, 0xEE9000
	0x0320C744 LDR X22, [X22 + 0x278]
	0x0320C748 MOV X21, X0
	0x0320C74C CBZ X0, 0x320C760
	0x0320C750 LDR X1, [X22]
	0x0320C754 LDR X8, [X21]
	0x0320C758 CMP X8, X1
	0x0320C75C B.NE 0x320CB1C
	0x0320C760 LDR X0, [X19 + 0x28]
	0x0320C764 CBZ X0, 0x320C9A8
	0x0320C768 LDR X8, [X0]
	0x0320C76C LDR X9, [X8 + 0x258]
	0x0320C770 LDR X1, [X8 + 0x260]
	0x0320C774 BLR X9
	0x0320C778 LDR X0, [X19 + 0x28]
	0x0320C77C CBZ X0, 0x320C9A8
	0x0320C780 LDR X8, [X0]
	0x0320C784 LDP X9, X1, [X8 + 0x1D8]
	0x0320C788 BLR X9
	0x0320C78C CMP W0, 0x1
	0x0320C790 B.LT 0x320C890
	0x0320C794 LDR X0, [X19 + 0x28]
	0x0320C798 CBZ X0, 0x320C9A8
	0x0320C79C LDR X8, [X0]
	0x0320C7A0 LDR X9, [X8 + 0x248]
	0x0320C7A4 LDR X1, [X8 + 0x250]
	0x0320C7A8 BLR X9
	0x0320C7AC CBZ X0, 0x320C890
	0x0320C7B0 LDR X1, [X22]
	0x0320C7B4 LDR X8, [X0]
	0x0320C7B8 CMP X8, X1
	0x0320C7BC B.NE 0x320C7D0
	0x0320C7C0 STR X0, [X19 + 0x30]
	0x0320C7C4 LDR X8, [X0]
	0x0320C7C8 CMP X8, X1
	0x0320C7CC B.EQ 0x320C894
	0x0320C7D0 BL 0x1C171E0
	0x0320C7D4 MOV X0, X19
	0x0320C7D8 BL 0x320CB9C
	0x0320C7DC MOV X0, X19
	0x0320C7E0 BL 0x320C31C
	0x0320C7E4 LDR X8, [X19 + 0x18]
	0x0320C7E8 CBZ X8, 0x320C9A8
	0x0320C7EC MOV X20, X0
	0x0320C7F0 LDR X9, [X8]
	0x0320C7F4 MOV X0, X8
	0x0320C7F8 LDP X10, X1, [X9 + 0x1B8]
	0x0320C7FC BLR X10
	0x0320C800 CMP W0, 0x3E
	0x0320C804 B.EQ 0x320C83C
	0x0320C808 LDR X0, [X19 + 0x18]
	0x0320C80C CBZ X0, 0x320C9A8
	0x0320C810 LDR X8, [X0]
	0x0320C814 LDP X9, X1, [X8 + 0x1B8]
	0x0320C818 BLR X9
	0x0320C81C CMP W0, 0x2F
	0x0320C820 B.EQ 0x320C83C
	0x0320C824 LDR X1, [X19 + 0x50]
	0x0320C828 MOV X0, X19
	0x0320C82C BL 0x320CF6C
	0x0320C830 LDR X8, [X19 + 0x18]
	0x0320C834 CBNZ X8, 0x320C7F0
	0x0320C838 B 0x320C9A8
	0x0320C83C LDR X21, [X19 + 0x10]
	0x0320C840 CBZ X21, 0x320C9A8
	0x0320C844 ADRP X23, 0xF15000
	0x0320C848 LDR X8, [X21]
	0x0320C84C LDR X22, [X19 + 0x50]
	0x0320C850 LDR X23, [X23 + 0x8D8]
	0x0320C854 LDRH W9, [X8 + 0x12E]
	0x0320C858 LDR X1, [X23]
	0x0320C85C CBZ X9, 0x320C880
	0x0320C860 LDR X10, [X8 + 0xB0]
	0x0320C864 ADD X10, X10, 0x8
	0x0320C868 LDUR X11, [X10 - 0x8]
	0x0320C86C CMP X11, X1
	0x0320C870 B.EQ 0x320C9D4
	0x0320C874 SUBS X9, X9, 0x1
	0x0320C878 ADD X10, X10, 0x10
	0x0320C87C B.NE 0x320C868
	0x0320C880 MOVZ W2, 0x2
	0x0320C884 MOV X0, X21
	0x0320C888 BL 0x1C5C788
	0x0320C88C B 0x320C9E4
	0x0320C890 STR X31, [X19 + 0x30]
	0x0320C894 MOV X0, X20
	0x0320C898 MOV X1, X21
	0x0320C89C MOV X2, X31
	0x0320C8A0 BL 0x3226EF8
	0x0320C8A4 TBNZ X0, 0x0, 0x320CAFC
	0x0320C8A8 LDR X21, [X19 + 0x10]
	0x0320C8AC CBZ X21, 0x320C9A8
	0x0320C8B0 ADRP X10, 0xF15000
	0x0320C8B4 LDR X8, [X21]
	0x0320C8B8 LDR X10, [X10 + 0x8D8]
	0x0320C8BC LDRH W9, [X8 + 0x12E]
	0x0320C8C0 LDR X1, [X10]
	0x0320C8C4 CBZ X9, 0x320CA6C
	0x0320C8C8 LDR X10, [X8 + 0xB0]
	0x0320C8CC ADD X10, X10, 0x8
	0x0320C8D0 LDUR X11, [X10 - 0x8]
	0x0320C8D4 CMP X11, X1
	0x0320C8D8 B.EQ 0x320CAB8

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0x11D1000
	012 Move X26, 0xF16000
	013 Move W8, [X21+648]
	014 Move X26, [X26+2288]
	015 Move X19, X2
	016 Move X22, X1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {30}
	022 Move X0, 0xF16000
	023 Move X0, [X0+2296]
	024 Call 0x1C17CF4
	025 Move X0, 0xF16000
	026 Move X0, [X0+2288]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+648], W8
	030 Move X0, [X26]
	031 Call 0x1C17F10
	032 Move X1, X22
	033 Move X2, X31
	034 Move X21, X0
	035 Call SecurityElement..ctor, X0, X1
	036 Move X8, [X20+104]
	037 Compare X8, 0
	038 JumpIfEqual {54}
	039 Move X0, [X20+120]
	040 Compare X0, 0
	041 JumpIfEqual {171}
	042 Move X8, [X0]
	043 Move X9, [X8+584]
	044 Move X1, [X8+592]
	045 NotImplemented "Instruction BLR not yet implemented."
	046 Compare X0, 0
	047 JumpIfEqual {171}
	048 Move X1, [X26]
	049 Move X8, [X0]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X1, X21
	052 Move X2, X31
	053 Call SecurityElement.AddChild, X0, X1
	054 Move [X20+104], X21
	055 Move [X20+112], X21
	056 Move X0, [X20+120]
	057 Compare X0, 0
	058 JumpIfEqual {171}
	059 Move X8, [X0]
	060 Move X1, X21
	061 Move X9, [X8+616]
	062 Move X2, [X8+624]
	063 NotImplemented "Instruction BLR not yet implemented."
	064 Move [X20+112], X21
	065 Compare X19, 0
	066 JumpIfEqual {171}
	067 Move X27, 0xF16000
	068 Move X8, [X19]
	069 Move X27, [X27+2296]
	070 NotImplemented "Instruction LDRH not yet implemented."
	071 Move X1, [X27]
	072 Compare X9, 0
	073 JumpIfEqual {80}
	074 Move X10, [X8+176]
	075 Add X10, X10, 8
	076 NotImplemented "Instruction LDUR not yet implemented."
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Subtract X9, X9, 1
	079 Add X10, X10, 16
	080 Move X0, X19
	081 Move W2, W31
	082 Call 0x1C5D788
	083 NotImplemented "Instruction LDRSW not yet implemented."
	084 Add X8, X8, X9
	085 Add X0, X8, 312
	086 Move X8, [X0]
	087 Move X1, [X0+8]
	088 Move X0, X19
	089 NotImplemented "Instruction BLR not yet implemented."
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move W21, W0
	092 Move W22, W31
	093 Move X8, [X19]
	094 Move X23, [X20+112]
	095 Move X1, [X27]
	096 NotImplemented "Instruction LDRH not yet implemented."
	097 Compare X9, 0
	098 JumpIfEqual {105}
	099 Move X10, [X8+176]
	100 Add X10, X10, 8
	101 NotImplemented "Instruction LDUR not yet implemented."
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Subtract X9, X9, 1
	104 Add X10, X10, 16
	105 Move W2, 1
	106 Move X0, X19
	107 Call 0x1C5D788
	108 Move W9, [X10]
	109 Add W9, W9, 1
	110 Add X8, X8, W9
	111 Add X0, X8, 312
	112 Move X8, [X0]
	113 Move X2, [X0+8]
	114 Move X0, X19
	115 Move W1, W22
	116 NotImplemented "Instruction BLR not yet implemented."
	117 Move X8, [X19]
	118 Move X1, [X27]
	119 Move X24, X0
	120 NotImplemented "Instruction LDRH not yet implemented."
	121 Compare X9, 0
	122 JumpIfEqual {129}
	123 Move X10, [X8+176]
	124 Add X10, X10, 8
	125 NotImplemented "Instruction LDUR not yet implemented."
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Subtract X9, X9, 1
	128 Add X10, X10, 16
	129 Move W2, 2
	130 Move X0, X19
	131 Call 0x1C5D788
	132 Move W9, [X10]
	133 Add W9, W9, 2
	134 Add X8, X8, W9
	135 Add X0, X8, 312
	136 Move X8, [X0]
	137 Move X2, [X0+8]
	138 Move X0, X19
	139 Move W1, W22
	140 NotImplemented "Instruction BLR not yet implemented."
	141 Move X8, [X26]
	142 Move X25, X0
	143 Move W9, [X8+224]
	144 Compare W9, 0
	145 JumpIfNotEqual {148}
	146 Move X0, X8
	147 Call 0x1C17DFC
	148 Move X0, X25
	149 Move X1, X31
	150 Call SecurityElement.Escape, X0
	151 Compare X23, 0
	152 JumpIfEqual {171}
	153 Move X2, X0
	154 Move X0, X23
	155 Move X1, X24
	156 Move X3, X31
	157 Call SecurityElement.AddAttribute, X0, X1, X2
	158 Add W22, W22, 1
	159 NotImplemented "Instruction CMP not yet implemented."
	160 Move X20, [X31+64]
	161 Move X19, [X31+72]
	162 Move X22, [X31+48]
	163 Move X21, [X31+56]
	164 Move X24, [X31+32]
	165 Move X23, [X31+40]
	166 Move X26, [X31+16]
	167 Move X25, [X31+24]
	168 Move X30, [X31+80]
	169 Move X27, [X31+88]
	170 Return 
	171 Call 0x1C17F20
	172 Call 0x1C181E0

Method: System.Void OnEndElement(System.String name)

Disassembly:
	0x0320C8DC SUBS X9, X9, 0x1
	0x0320C8E0 ADD X10, X10, 0x10
	0x0320C8E4 B.NE 0x320C8D0
	0x0320C8E8 B 0x320CA6C
	0x0320C8EC LDR X0, [X19 + 0x18]
	0x0320C8F0 CBZ X0, 0x320C9A8
	0x0320C8F4 LDR X8, [X0]
	0x0320C8F8 LDP X9, X1, [X8 + 0x1B8]
	0x0320C8FC BLR X9
	0x0320C900 CMP W0, 0x2D
	0x0320C904 B.NE 0x320CB30
	0x0320C908 MOV X0, X19
	0x0320C90C LDP X20, X19, [X31 + 0x20]
	0x0320C910 LDP X22, X21, [X31 + 0x10]
	0x0320C914 LDP X30, X23, [X31], #0x30
	0x0320C918 B 0x320CEE4
	0x0320C91C MOVZ W1, 0x3F
	0x0320C920 MOV X0, X19
	0x0320C924 MOV W2, W31
	0x0320C928 BL 0x320C078
	0x0320C92C MOV X1, X0
	0x0320C930 MOV X0, X21
	0x0320C934 MOV X2, X31
	0x0320C938 BL 0x321B938
	0x0320C93C LDR X8, [X19 + 0x18]
	0x0320C940 CBZ X8, 0x320C9A8
	0x0320C944 ADRP X22, 0xF15000
	0x0320C948 LDR X22, [X22 + 0x990]
	0x0320C94C MOV X21, X0
	0x0320C950 LDR X9, [X8]
	0x0320C954 MOV X0, X8
	0x0320C958 LDP X10, X1, [X9 + 0x1B8]
	0x0320C95C BLR X10
	0x0320C960 CMP W0, 0x3E

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11D1000
	005 Move W8, [X20+649]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF16000
	012 Move X0, [X0+2288]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+649], W8
	016 Move X0, [X19+120]
	017 Compare X0, 0
	018 JumpIfEqual {39}
	019 Move X8, [X0]
	020 Move X9, [X8+600]
	021 Move X1, [X8+608]
	022 NotImplemented "Instruction BLR not yet implemented."
	023 Compare X0, 0
	024 JumpIfEqual {34}
	025 Move X8, 0xF16000
	026 Move X8, [X8+2288]
	027 Move X1, [X8]
	028 Move X8, [X0]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move [X19+112], X0
	031 Move X8, [X0]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Call 0x1C181E0
	034 Move [X19+112], X31
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Return 
	039 Call 0x1C17F20

Method: System.Void OnChars(System.String ch)

Disassembly:
	0x0320C964 B.EQ 0x320C698
	0x0320C968 LDR X1, [X22]
	0x0320C96C MOV X0, X21
	0x0320C970 MOV X2, X31
	0x0320C974 BL 0x321B938
	0x0320C978 MOV X21, X0
	0x0320C97C MOVZ W1, 0x3F
	0x0320C980 MOV X0, X19
	0x0320C984 MOV W2, W31
	0x0320C988 BL 0x320C078
	0x0320C98C MOV X1, X0
	0x0320C990 MOV X0, X21
	0x0320C994 MOV X2, X31
	0x0320C998 BL 0x321B938
	0x0320C99C LDR X8, [X19 + 0x18]
	0x0320C9A0 MOV X21, X0
	0x0320C9A4 CBNZ X8, 0x320C950
	0x0320C9A8 BL 0x1C16F20
	0x0320C9AC LDR W9, [X10]
	0x0320C9B0 ADD W9, W9, 0x4
	0x0320C9B4 ADD X8, X8, W9, 0x4, SXTW
	0x0320C9B8 ADD X0, X8, 0x138
	0x0320C9BC LDP X8, X3, [X0]
	0x0320C9C0 MOV X0, X22
	0x0320C9C4 MOV X1, X20
	0x0320C9C8 MOV X2, X21
	0x0320C9CC BLR X8
	0x0320C9D0 B 0x320CAD8
	0x0320C9D4 LDR W9, [X10]
	0x0320C9D8 ADD W9, W9, 0x2
	0x0320C9DC ADD X8, X8, W9, 0x4, SXTW
	0x0320C9E0 ADD X0, X8, 0x138

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11D1000
	007 Move X21, 0xF16000
	008 Move W8, [X22+650]
	009 Move X21, [X21+2288]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF16000
	017 Move X0, [X0+2288]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+650], W8
	021 Move X0, [X21]
	022 Move X20, [X20+112]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X19
	028 Move X1, X31
	029 Call SecurityElement.Escape, X0
	030 Compare X20, 0
	031 JumpIfEqual {42}
	032 Move X1, X0
	033 Move X0, X20
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X2, X31
	039 Move X30, [X31+48]
	040 Call SecurityElement.set_Text, X0, X1
	041 Return 
	042 Call 0x1C17F20

Method: System.Void OnEndParsing(Mono.Xml.SmallXmlParser parser)

Disassembly:
	0x0320C9E4 LDP X8, X3, [X0]

ISIL:
	001 Return 

