Type: Mono.RuntimeMarshal

Method: System.String PtrToUtf8String(System.IntPtr ptr)

Disassembly:
	0x0320BF60 LDRB W8, [X19 + 0x60]
	0x0320BF64 CBZ W8, 0x320BF84
	0x0320BF68 LDR W8, [X19 + 0x58]
	0x0320BF6C MOVZ W9, 0x1
	0x0320BF70 STRB W31, [X19 + 0x60]
	0x0320BF74 ADD W8, W8, 0x1
	0x0320BF78 STP W8, W9, [X19 + 0x58]
	0x0320BF7C LDP X30, X19, [X31], #0x10
	0x0320BF80 RET
	0x0320BF84 LDR W8, [X19 + 0x5C]
	0x0320BF88 ADD W8, W8, 0x1
	0x0320BF8C STR W8, [X19 + 0x5C]
	0x0320BF90 B 0x320BF7C
	0x0320BF94 BL 0x1C16F20
	0x0320BF98 STR X30, [X31 - 0x10]!
	0x0320BF9C LDR X0, [X0 + 0x18]
	0x0320BFA0 CBZ X0, 0x320BFB4
	0x0320BFA4 LDR X8, [X0]
	0x0320BFA8 LDP X2, X1, [X8 + 0x1B8]
	0x0320BFAC LDR X30, [X31], #0x10
	0x0320BFB0 BR X2
	0x0320BFB4 BL 0x1C16F20
	0x0320BFB8 STR X30, [X31 - 0x30]!
	0x0320BFBC STP X22, X21, [X31 + 0x10]
	0x0320BFC0 STP X20, X19, [X31 + 0x20]
	0x0320BFC4 MOV W20, W1
	0x0320BFC8 MOV X19, X0
	0x0320BFCC BL 0x320BF3C
	0x0320BFD0 TBNZ X0, 0x1F, 0x320BFEC
	0x0320BFD4 CMP W0, W20
	0x0320BFD8 B.NE 0x320BFF8
	0x0320BFDC LDP X20, X19, [X31 + 0x20]
	0x0320BFE0 LDP X22, X21, [X31 + 0x10]
	0x0320BFE4 LDR X30, [X31], #0x30
	0x0320BFE8 RET
	0x0320BFEC MOV X0, X19
	0x0320BFF0 BL 0x320BBB8
	0x0320BFF4 B 0x320C05C
	0x0320BFF8 STRH W20, [X31 + 0xC]
	0x0320BFFC ADRP X20, 0xEEA000
	0x0320C000 LDR X20, [X20 + 0x170]
	0x0320C004 MOV W22, W0
	0x0320C008 MOV X0, X20
	0x0320C00C BL 0x1C16D08
	0x0320C010 ADD X1, X31, 0xC
	0x0320C014 BL 0x1C16E04
	0x0320C018 MOV X21, X0
	0x0320C01C MOV X0, X20
	0x0320C020 STRH W22, [X31 + 0x8]
	0x0320C024 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11D2000
	005 Move W8, [X20+644]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xEEB000
	012 Move X0, [X0+632]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+644], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Move X2, X31
	019 Call IntPtr.op_Equality, X0, X1
	020 Move TEMP, X0
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfNotEqual {33}
	024 Move X8, 0xEEB000
	025 Move X8, [X8+632]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X8, [X8]
	029 Move X8, [X8+184]
	030 Move X0, [X8]
	031 Move X30, [X31+32]
	032 Return X0
	033 Move X0, X19
	034 Move X1, X31
	035 Call IntPtr.op_Explicit, X0
	036 Move W8, [X0]
	037 Compare W8, 0
	038 JumpIfEqual {45}
	039 Move W20, W31
	040 Add X0, X0, 1
	041 Move W8, [X0]
	042 Add W20, W20, 1
	043 Compare W8, 0
	044 JumpIfNotEqual {40}
	045 Move W20, W31
	046 Move X0, X19
	047 Move X1, X31
	048 Call IntPtr.op_Explicit, X0
	049 Move X19, X0
	050 Move X0, X31
	051 Call Encoding.get_UTF8
	052 Move X1, X19
	053 Move W3, W20
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X4, X0
	057 Move X0, X31
	058 Move W2, W31
	059 Move X5, X31
	060 Move X30, [X31+32]
	061 Call String.CreateString, X0, X1, X2, X3, X4
	062 Return X0

Method: Mono.SafeStringMarshal MarshalString(System.String str)

Disassembly:
	0x0320C028 ADD X1, X31, 0x8
	0x0320C02C BL 0x1C16E04

ISIL:
	001 Move X1, X31
	002 Return X0

Method: System.Int32 DecodeBlobSize(System.IntPtr in_ptr, out System.IntPtr out_ptr)

Disassembly:
	0x0320C038 LDR X0, [X0 + 0x928]
	0x0320C03C BL 0x1C16D08
	0x0320C040 MOV X1, X21
	0x0320C044 MOV X2, X20
	0x0320C048 MOV X3, X31
	0x0320C04C BL 0x3227BD4
	0x0320C050 MOV X1, X0
	0x0320C054 MOV X0, X19
	0x0320C058 BL 0x320BA7C
	0x0320C05C MOV X19, X0
	0x0320C060 ADRP X0, 0xF15000
	0x0320C064 LDR X0, [X0 + 0x930]
	0x0320C068 BL 0x1C16D08
	0x0320C06C MOV X1, X0
	0x0320C070 MOV X0, X19
	0x0320C074 BL 0x1C16DEC
	0x0320C078 STP X30, X21, [X31 - 0x20]!
	0x0320C07C STP X20, X19, [X31 + 0x10]
	0x0320C080 MOV X19, X0
	0x0320C084 LDR X0, [X0 + 0x18]
	0x0320C088 CBZ X0, 0x320C0EC
	0x0320C08C MOV W20, W2
	0x0320C090 MOV W21, W1
	0x0320C094 LDR X8, [X0]
	0x0320C098 LDP X9, X1, [X8 + 0x1B8]
	0x0320C09C BLR X9
	0x0320C0A0 TBNZ X0, 0x1F, 0x320C130
	0x0320C0A4 MOV X0, X19
	0x0320C0A8 BL 0x320BF3C
	0x0320C0AC AND W8, W0, 0xFFFF
	0x0320C0B0 CMP W8, W21, UXTH

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X1, X31
	006 Call IntPtr.op_Explicit, X0
	007 Move W20, [X0]
	008 Move TEMP, X20
	009 And TEMP, TEMP, 128
	010 Compare TEMP, 128
	011 JumpIfEqual {13}
	012 Add X0, X0, 1
	013 Move W8, [X0+1]
	014 Move TEMP, X20
	015 And TEMP, TEMP, 64
	016 Compare TEMP, 64
	017 JumpIfEqual {22}
	018 And W9, W20, 63
	019 NotImplemented "Instruction BFM not yet implemented."
	020 Add X0, X0, 2
	021 Move W20, W8
	022 Move W9, [X0+2]
	023 Move W10, [X0+3]
	024 And W11, W20, 31
	025 Move W11, W11
	026 ShiftRight W11, 8
	027 And W11, W11, 127
	028 NotImplemented "Instruction BFM not yet implemented."
	029 NotImplemented "Instruction BFM not yet implemented."
	030 Or W20, W11, W10
	031 Add X0, X0, 4
	032 Move X1, X31
	033 Call IntPtr.op_Explicit, X0
	034 Move [X19], X0
	035 Move W0, W20
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Return X0

Method: System.Byte[] DecodeBlobArray(System.IntPtr ptr)

Disassembly:
	0x0320C0B4 B.EQ 0x320C0F0
	0x0320C0B8 MOV W1, W0
	0x0320C0BC CMP W8, 0x26
	0x0320C0C0 B.NE 0x320C0D4
	0x0320C0C4 TBZ X20, 0x0, 0x320C0D4
	0x0320C0C8 MOV X0, X19
	0x0320C0CC BL 0x320C154
	0x0320C0D0 B 0x320C0E4
	0x0320C0D4 LDR X0, [X19 + 0x38]
	0x0320C0D8 CBZ X0, 0x320C0EC
	0x0320C0DC MOV X2, X31
	0x0320C0E0 BL 0x3233D30
	0x0320C0E4 LDR X0, [X19 + 0x18]
	0x0320C0E8 CBNZ X0, 0x320C094
	0x0320C0EC BL 0x1C16F20
	0x0320C0F0 LDR X0, [X19 + 0x38]
	0x0320C0F4 CBZ X0, 0x320C0EC
	0x0320C0F8 LDR X8, [X0]
	0x0320C0FC LDP X9, X1, [X8 + 0x168]
	0x0320C100 BLR X9
	0x0320C104 LDR X8, [X19 + 0x38]
	0x0320C108 CBZ X8, 0x320C0EC
	0x0320C10C MOV X19, X0
	0x0320C110 MOV X0, X8
	0x0320C114 MOV W1, W31
	0x0320C118 MOV X2, X31
	0x0320C11C BL 0x3232ADC
	0x0320C120 MOV X0, X19
	0x0320C124 LDP X20, X19, [X31 + 0x10]
	0x0320C128 LDP X30, X21, [X31], #0x20
	0x0320C12C RET
	0x0320C130 MOV X0, X19
	0x0320C134 BL 0x320BBB8
	0x0320C138 MOV X19, X0
	0x0320C13C ADRP X0, 0xF15000
	0x0320C140 LDR X0, [X0 + 0x938]
	0x0320C144 BL 0x1C16D08
	0x0320C148 MOV X1, X0
	0x0320C14C MOV X0, X19
	0x0320C150 BL 0x1C16DEC
	0x0320C154 STR X30, [X31 - 0x20]!
	0x0320C158 STP X20, X19, [X31 + 0x10]
	0x0320C15C ADRP X20, 0x11D0000
	0x0320C160 LDRB W8, [X20 + 0x293]
	0x0320C164 MOV X19, X0
	0x0320C168 TBNZ X8, 0x0, 0x320C1B0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11D1000
	007 Move X21, 0xEE8000
	008 Move X20, 0xF10000
	009 Move W8, [X22+645]
	010 Move X21, [X21+1560]
	011 Move X20, [X20+2128]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xEE8000
	018 Move X0, [X0+1560]
	019 Call 0x1C17CF4
	020 Move X0, 0xF10000
	021 Move X0, [X0+2128]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+645], W8
	025 Add X1, X31, 8
	026 Move X0, X19
	027 Move [X31+8], X31
	028 Call RuntimeMarshal.DecodeBlobSize, X0, X1
	029 Move X8, [X21]
	030 Move W19, W0
	031 Move W1, W19
	032 Move X0, X8
	033 Call 0x1C17D6C
	034 Move X8, [X20]
	035 Move X21, [X31+8]
	036 Move X20, X0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X0, X21
	043 Move X1, X20
	044 Move W2, W31
	045 Move W3, W19
	046 Move X4, X31
	047 Call Marshal.Copy, X0, X1, X2, X3
	048 Move X0, X20
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Return X0

Method: System.Int32 AsciHexDigitValue(System.Int32 c)

Disassembly:
	0x0320C16C ADRP X0, 0xF15000
	0x0320C170 LDR X0, [X0 + 0x940]
	0x0320C174 BL 0x1C16CF4
	0x0320C178 ADRP X0, 0xF15000
	0x0320C17C LDR X0, [X0 + 0x948]
	0x0320C180 BL 0x1C16CF4
	0x0320C184 ADRP X0, 0xF15000
	0x0320C188 LDR X0, [X0 + 0x950]
	0x0320C18C BL 0x1C16CF4
	0x0320C190 ADRP X0, 0xF15000
	0x0320C194 LDR X0, [X0 + 0x958]

ISIL:
	001 Move W8, W0
	002 Subtract W0, W0, 48
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Subtract W9, W8, 97
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Subtract W0, W8, 55
	007 Return X0
	008 Subtract W0, W8, 87
	009 Return X0

Method: System.Void FreeAssemblyName(ref Mono.MonoAssemblyName name, System.Boolean freeStruct)

Disassembly:
	0x0320C198 BL 0x1C16CF4
	0x0320C19C ADRP X0, 0xF15000

ISIL:
	001 And W1, W1, 1
	002 Call 0x1C17894
	003 Return 

