Type: Mono.Security.Cryptography.DSAManaged

Method: System.Void .ctor(System.Int32 dwKeySize)

Disassembly:
	0x032205F0 MOV X2, X31
	0x032205F4 MOV X20, X0
	0x032205F8 BL 0x338C448
	0x032205FC ADRP X0, 0xF01000
	0x03220600 LDR X0, [X0 + 0xED8]
	0x03220604 BL 0x1C16D08
	0x03220608 MOV X1, X0
	0x0322060C MOV X0, X20
	0x03220610 BL 0x1C16DEC
	0x03220614 ADRP X0, 0xF00000
	0x03220618 LDR X0, [X0 + 0xCE0]
	0x0322061C BL 0x1C16D08
	0x03220620 BL 0x1C16F10
	0x03220624 MOV X19, X0
	0x03220628 ADRP X0, 0xF01000
	0x0322062C LDR X0, [X0 + 0xEE0]
	0x03220630 BL 0x1C16D08
	0x03220634 MOV X1, X0
	0x03220638 MOV X0, X19
	0x0322063C MOV X2, X31
	0x03220640 BL 0x3252170
	0x03220644 ADRP X0, 0xF01000
	0x03220648 LDR X0, [X0 + 0xED8]
	0x0322064C BL 0x1C16D08
	0x03220650 MOV X1, X0
	0x03220654 MOV X0, X19
	0x03220658 BL 0x1C16DEC
	0x0322065C STR X30, [X31 - 0x20]!
	0x03220660 STP X20, X19, [X31 + 0x10]
	0x03220664 CBZ X0, 0x32206C0
	0x03220668 LDR W8, [X0 + 0x10]
	0x0322066C MOV W19, W1
	0x03220670 MOV X20, X0
	0x03220674 CMP W8, 0x1
	0x03220678 B.EQ 0x3220690
	0x0322067C MOV X0, X20
	0x03220680 BL 0x32213F8
	0x03220684 LDR W8, [X20 + 0x10]
	0x03220688 CMP W8, 0x1
	0x0322068C B.NE 0x32206B0
	0x03220690 LDR X8, [X20 + 0x18]
	0x03220694 CBZ X8, 0x32206C0
	0x03220698 LDR W9, [X8 + 0x18]
	0x0322069C CBZ W9, 0x32206C4
	0x032206A0 LDR W8, [X8 + 0x20]
	0x032206A4 CMP W8, W19
	0x032206A8 CSET W0, NE

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x11BD000
	008 Move X22, 0xF02000
	009 Move X21, 0xF02000
	010 Move W8, [X23+781]
	011 Move X22, [X22+1312]
	012 Move X21, [X21+1320]
	013 Move W20, W1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xF02000
	020 Move X0, [X0+1312]
	021 Call 0x1C17CF4
	022 Move X0, 0xF02000
	023 Move X0, [X0+1320]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+781], W8
	027 Move X0, X19
	028 Move X1, X31
	029 Call DSA..ctor, X0
	030 Move [X19+16], W20
	031 Move X0, [X22]
	032 Move W1, 1
	033 Call 0x1C17D6C
	034 Move [X19+24], X0
	035 Move X20, X0
	036 Move X0, [X21]
	037 Call 0x1C17F10
	038 Move W1, 512
	039 Move W2, 1024
	040 Move W3, 64
	041 Move X4, X31
	042 Move X19, X0
	043 Call KeySizes..ctor, X0, X1, X2, X3
	044 Compare X20, 0
	045 JumpIfEqual {57}
	046 Move W8, [X20+24]
	047 Compare W8, 0
	048 JumpIfEqual {58}
	049 Move [X20+32], X19
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X30, [X31+48]
	055 Move X23, [X31+56]
	056 Return 
	057 Call 0x1C17F20
	058 Call 0x1C17F28

Method: System.Void Finalize()

Disassembly:
	0x032206AC B 0x32206B4
	0x032206B0 MOVZ W0, 0x1
	0x032206B4 LDP X20, X19, [X31 + 0x10]
	0x032206B8 LDR X30, [X31], #0x20
	0x032206BC RET
	0x032206C0 BL 0x1C16F20
	0x032206C4 BL 0x1C16F28
	0x032206C8 STP X30, X23, [X31 - 0x30]!
	0x032206CC STP X22, X21, [X31 + 0x10]
	0x032206D0 STP X20, X19, [X31 + 0x20]
	0x032206D4 ADRP X21, 0x11BC000
	0x032206D8 LDRB W8, [X21 + 0x313]
	0x032206DC MOV X20, X1
	0x032206E0 MOV X19, X0
	0x032206E4 TBNZ X8, 0x0, 0x32206FC
	0x032206E8 ADRP X0, 0xF01000
	0x032206EC LDR X0, [X0 + 0xD90]
	0x032206F0 BL 0x1C16CF4
	0x032206F4 MOVZ W8, 0x1
	0x032206F8 STRB W8, [X21 + 0x313]
	0x032206FC LDRB W8, [X19 + 0x21]
	0x03220700 CBNZ W8, 0x32208E4
	0x03220704 LDR X21, [X20]
	0x03220708 CBZ X21, 0x32208A8
	0x0322070C LDR X8, [X20 + 0x8]
	0x03220710 CBZ X8, 0x32208A8
	0x03220714 LDR X8, [X20 + 0x10]
	0x03220718 CBZ X8, 0x32208A8
	0x0322071C LDR X8, [X20 + 0x28]
	0x03220720 CBNZ X8, 0x322072C
	0x03220724 LDR X8, [X20 + 0x18]
	0x03220728 CBZ X8, 0x3220934
	0x0322072C ADRP X23, 0xF01000
	0x03220730 LDR X23, [X23 + 0xD90]
	0x03220734 LDR X0, [X23]
	0x03220738 BL 0x1C16F10
	0x0322073C MOV X1, X21
	0x03220740 MOV X22, X0
	0x03220744 BL 0x321C804
	0x03220748 STR X22, [X19 + 0x28]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X0]
	006 Move X19, X0
	007 Move X9, [X8+392]
	008 Move X2, [X8+400]
	009 Move W1, W31
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Move X0, X19
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X1, X31
	015 Move X30, [X31+32]
	016 Move X21, [X31+40]
	017 Call Object.Finalize, X0
	018 Return 
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X21, X0
	021 Move X0, X21
	022 Call 0x3EB2AD0
	023 Move X20, [X0]
	024 Call 0x3EB2AE0
	025 Move X0, X19
	026 Move X1, X31
	027 Call Object.Finalize, X0
	028 Compare X20, 0
	029 JumpIfNotEqual {36}
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return 
	035 Move X20, X31
	036 Move X0, X20
	037 Call 0x1C17F18
	038 Move X21, X0
	039 Move X0, X19
	040 Move X1, X31
	041 Call Object.Finalize, X0
	042 Compare X20, 0
	043 JumpIfNotEqual {46}
	044 Move X0, X21
	045 Call 0x1D2D690
	046 Move X0, X20
	047 Call 0x1C17F18
	048 Call 0x1991590

Method: System.Void Generate()

Disassembly:
	0x0322074C LDR X0, [X23]
	0x03220750 LDR X21, [X20 + 0x8]
	0x03220754 BL 0x1C16F10
	0x03220758 MOV X1, X21
	0x0322075C MOV X22, X0
	0x03220760 BL 0x321C804
	0x03220764 STR X22, [X19 + 0x30]
	0x03220768 LDR X0, [X23]
	0x0322076C LDR X21, [X20 + 0x10]
	0x03220770 BL 0x1C16F10
	0x03220774 MOV X1, X21
	0x03220778 MOV X22, X0
	0x0322077C BL 0x321C804
	0x03220780 STR X22, [X19 + 0x38]
	0x03220784 LDR X22, [X20 + 0x28]
	0x03220788 CBZ X22, 0x32207A8
	0x0322078C LDR X0, [X23]
	0x03220790 BL 0x1C16F10
	0x03220794 MOV X1, X22

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, [X0+16]
	004 Move X19, X0
	005 Call DSAManaged.GenerateParams, X0, X1
	006 Move X0, X19
	007 Call DSAManaged.GenerateKeyPair, X0
	008 Move X8, [X19+112]
	009 Move W9, 1
	010 Move [X19+32], W9
	011 Compare X8, 0
	012 JumpIfEqual {21}
	013 Move X4, [X8+24]
	014 Move X0, [X8+64]
	015 Move X3, [X8+40]
	016 Move X1, X19
	017 Move X2, X31
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 CallNoReturn X4
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Return 

Method: System.Void GenerateKeyPair()

Disassembly:
	0x03220CC0 B 0x3220D1C
	0x03220CC4 B 0x3220D1C
	0x03220CC8 B 0x3220D1C
	0x03220CCC B 0x3220D1C
	0x03220CD0 B 0x3220D1C
	0x03220CD4 B 0x3220D1C
	0x03220CD8 B 0x3220D1C
	0x03220CDC B 0x3220D1C
	0x03220CE0 B 0x3220D1C
	0x03220CE4 B 0x3220D1C
	0x03220CE8 B 0x3220D1C
	0x03220CEC B 0x3220D1C
	0x03220CF0 B 0x3220D1C
	0x03220CF4 B 0x3220D1C
	0x03220CF8 B 0x3220D1C
	0x03220CFC B 0x3220D1C
	0x03220D00 B 0x3220D1C
	0x03220D04 B 0x3220D1C
	0x03220D08 B 0x3220D1C
	0x03220D0C B 0x3220D1C
	0x03220D10 B 0x3220D1C
	0x03220D14 B 0x3220D1C
	0x03220D18 B 0x3220D1C
	0x03220D1C MOV X19, X0
	0x03220D20 CMP W1, 0x1
	0x03220D24 B.NE 0x3220DC4
	0x03220D28 MOV X0, X19
	0x03220D2C BL 0x3EB1AD0
	0x03220D30 MOV X19, X0
	0x03220D34 ADRP X0, 0xED9000
	0x03220D38 LDR X0, [X0 + 0xCC0]
	0x03220D3C BL 0x1C16D08
	0x03220D40 LDR X8, [X19]
	0x03220D44 LDR X1, [X8]
	0x03220D48 BL 0x1C17270
	0x03220D4C TBZ X0, 0x0, 0x3220D9C
	0x03220D50 BL 0x3EB1AE0
	0x03220D54 ADRP X0, 0xF00000
	0x03220D58 LDR X0, [X0 + 0xCE0]
	0x03220D5C BL 0x1C16D08
	0x03220D60 BL 0x1C16F10
	0x03220D64 MOV X19, X0
	0x03220D68 ADRP X0, 0xF01000
	0x03220D6C LDR X0, [X0 + 0xF28]
	0x03220D70 BL 0x1C16D08
	0x03220D74 MOV X1, X0
	0x03220D78 MOV X0, X19
	0x03220D7C MOV X2, X31
	0x03220D80 BL 0x3252170
	0x03220D84 ADRP X0, 0xF01000
	0x03220D88 LDR X0, [X0 + 0xF00]
	0x03220D8C BL 0x1C16D08
	0x03220D90 MOV X1, X0
	0x03220D94 MOV X0, X19
	0x03220D98 BL 0x1C16DEC
	0x03220D9C MOVZ W0, 0x8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11BD000
	007 Move X22, 0xF02000
	008 Move W8, [X20+782]
	009 Move X22, [X22+3472]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF02000
	016 Move X0, [X0+3472]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+782], W8
	020 Move X0, [X22]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, 160
	026 Call BigInteger.GenerateRandom, X0
	027 Move X20, X0
	028 Move [X19+64], X0
	029 Move X0, [X22]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move W1, W31
	036 Call BigInteger.op_Equality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {55}
	041 Move X0, [X22]
	042 Move X20, [X19+64]
	043 Move X21, [X19+48]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X0, X20
	049 Move X1, X21
	050 Call Kernel.Compare, X0, X1
	051 Move TEMP, X0
	052 And TEMP, TEMP, -2147483648
	053 Compare TEMP, -2147483648
	054 JumpIfEqual {60}
	055 Move X0, [X19+64]
	056 Compare X0, 0
	057 JumpIfEqual {73}
	058 Call BigInteger.Randomize, X0
	059 Move X20, [X19+64]
	060 Move X0, [X19+56]
	061 Compare X0, 0
	062 JumpIfEqual {73}
	063 Move X2, [X19+40]
	064 Move X1, [X19+64]
	065 Call BigInteger.ModPow, X0, X1, X2
	066 Move [X19+72], X0
	067 Move X20, [X31+32]
	068 Move X19, [X31+40]
	069 Move X22, [X31+16]
	070 Move X21, [X31+24]
	071 Move X30, [X31+48]
	072 Return 
	073 Call 0x1C17F20

Method: System.Void add(System.Byte[] a, System.Byte[] b, System.Int32 value)

Disassembly:
	0x03220EDC CBZ X0, 0x3220F9C
	0x03220EE0 BL 0x321CB3C
	0x03220EE4 STR X31, [X19 + 0x38]
	0x03220EE8 LDR X0, [X22]
	0x03220EEC LDR X20, [X19 + 0x50]
	0x03220EF0 LDR W8, [X0 + 0xE0]
	0x03220EF4 CBNZ W8, 0x3220EFC
	0x03220EF8 BL 0x1C16DFC
	0x03220EFC MOV X0, X20
	0x03220F00 MOV X1, X31
	0x03220F04 BL 0x321BFF8
	0x03220F08 TBZ X0, 0x0, 0x3220F1C
	0x03220F0C LDR X0, [X19 + 0x50]
	0x03220F10 CBZ X0, 0x3220F9C
	0x03220F14 BL 0x321CB3C
	0x03220F18 STR X31, [X19 + 0x50]
	0x03220F1C LDR X0, [X22]
	0x03220F20 LDR X20, [X19 + 0x58]
	0x03220F24 LDR W8, [X0 + 0xE0]
	0x03220F28 CBNZ W8, 0x3220F30
	0x03220F2C BL 0x1C16DFC
	0x03220F30 MOV X0, X20
	0x03220F34 MOV X1, X31
	0x03220F38 BL 0x321BFF8
	0x03220F3C TBZ X0, 0x0, 0x3220F50
	0x03220F40 LDR X0, [X19 + 0x58]
	0x03220F44 CBZ X0, 0x3220F9C
	0x03220F48 BL 0x321CB3C
	0x03220F4C STR X31, [X19 + 0x58]
	0x03220F50 LDR X0, [X22]
	0x03220F54 LDR X20, [X19 + 0x48]
	0x03220F58 LDR W8, [X0 + 0xE0]
	0x03220F5C CBNZ W8, 0x3220F64
	0x03220F60 BL 0x1C16DFC
	0x03220F64 MOV X0, X20
	0x03220F68 MOV X1, X31
	0x03220F6C BL 0x321BFF8
	0x03220F70 TBZ X0, 0x0, 0x3220F84
	0x03220F74 LDR X0, [X19 + 0x48]

ISIL:
	001 Move [X31-16], X30
	002 Compare X2, 0
	003 JumpIfEqual {36}
	004 Move W8, [X2+24]
	005 Compare W8, 0
	006 JumpIfEqual {33}
	007 Compare X1, 0
	008 JumpIfEqual {36}
	009 Move W10, [X1+24]
	010 Subtract W8, W8, 1
	011 Move X9, W8
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Add X8, X2, X9
	014 Move W8, [X8+32]
	015 Add X9, X1, X9
	016 Add W8, W8, W3
	017 Move [X9+32], W8
	018 Move X10, [X2+24]
	019 Subtract W9, W10, 2
	020 And X10, X10, 0
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move W9, W9
	023 Add X10, X1, 32
	024 Add X11, X2, 32
	025 Move W12, [X1+24]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move W12, [X11]
	028 Add W8, W12, W8
	029 Move [X10], W8
	030 Subtract X9, X9, 1
	031 Move W12, [X2+24]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Call 0x1C17F28
	034 Move X30, [X31+16]
	035 Return 
	036 Call 0x1C17F20

Method: System.Void GenerateParams(System.Int32 keyLength)

Disassembly:
	0x03220798 MOV X21, X0
	0x0322079C BL 0x321C804
	0x032207A0 STR X21, [X19 + 0x40]
	0x032207A4 B 0x32207B0
	0x032207A8 MOV X21, X31
	0x032207AC STR X31, [X19 + 0x40]
	0x032207B0 LDR X22, [X20 + 0x18]
	0x032207B4 CBZ X22, 0x32207D4
	0x032207B8 LDR X0, [X23]
	0x032207BC BL 0x1C16F10
	0x032207C0 MOV X1, X22
	0x032207C4 MOV X21, X0
	0x032207C8 BL 0x321C804
	0x032207CC STR X21, [X19 + 0x48]
	0x032207D0 B 0x32207EC
	0x032207D4 LDR X0, [X19 + 0x38]
	0x032207D8 CBZ X0, 0x3220940
	0x032207DC LDR X2, [X19 + 0x28]
	0x032207E0 MOV X1, X21
	0x032207E4 BL 0x321CA14
	0x032207E8 STR X0, [X19 + 0x48]
	0x032207EC LDR X21, [X20 + 0x20]
	0x032207F0 CBZ X21, 0x3220810
	0x032207F4 LDR X0, [X23]
	0x032207F8 BL 0x1C16F10
	0x032207FC MOV X1, X21
	0x03220800 MOV X22, X0
	0x03220804 BL 0x321C804
	0x03220808 STR X22, [X19 + 0x50]
	0x0322080C B 0x322084C
	0x03220810 LDR X0, [X23]
	0x03220814 LDR X21, [X19 + 0x28]
	0x03220818 LDR W8, [X0 + 0xE0]
	0x0322081C CBNZ W8, 0x3220824
	0x03220820 BL 0x1C16DFC
	0x03220824 MOVZ W0, 0x1
	0x03220828 MOVZ W22, 0x1
	0x0322082C BL 0x321C2D0
	0x03220830 MOV X1, X0
	0x03220834 MOV X0, X21
	0x03220838 BL 0x321C374
	0x0322083C LDR X1, [X19 + 0x30]
	0x03220840 BL 0x322026C
	0x03220844 STR X0, [X19 + 0x50]
	0x03220848 STRB W22, [X19 + 0x64]
	0x0322084C LDR X21, [X20 + 0x30]
	0x03220850 LDR X0, [X23]
	0x03220854 CBZ X21, 0x3220878
	0x03220858 BL 0x1C16F10
	0x0322085C MOV X1, X21
	0x03220860 MOV X22, X0
	0x03220864 BL 0x321C804
	0x03220868 STR X22, [X19 + 0x58]
	0x0322086C LDR W8, [X20 + 0x38]
	0x03220870 STR W8, [X19 + 0x60]
	0x03220874 B 0x3220890
	0x03220878 LDR W8, [X0 + 0xE0]
	0x0322087C CBNZ W8, 0x3220884
	0x03220880 BL 0x1C16DFC
	0x03220884 MOV W0, W31
	0x03220888 BL 0x321C2D0
	0x0322088C STR X0, [X19 + 0x58]
	0x03220890 MOVZ W8, 0x1
	0x03220894 STRB W8, [X19 + 0x20]
	0x03220898 LDP X20, X19, [X31 + 0x20]
	0x0322089C LDP X22, X21, [X31 + 0x10]
	0x032208A0 LDP X30, X23, [X31], #0x30
	0x032208A4 RET
	0x032208A8 ADRP X0, 0xF01000
	0x032208AC LDR X0, [X0 + 0xEE8]
	0x032208B0 BL 0x1C16D08
	0x032208B4 MOV X1, X31
	0x032208B8 BL 0x320A160
	0x032208BC MOV X19, X0
	0x032208C0 ADRP X0, 0xF00000
	0x032208C4 LDR X0, [X0 + 0xCE0]
	0x032208C8 BL 0x1C16D08
	0x032208CC BL 0x1C16F10
	0x032208D0 MOV X1, X19
	0x032208D4 MOV X2, X31
	0x032208D8 MOV X20, X0
	0x032208DC BL 0x3252170
	0x032208E0 B 0x322091C
	0x032208E4 ADRP X0, 0xF01000
	0x032208E8 LDR X0, [X0 + 0x578]
	0x032208EC BL 0x1C16D08
	0x032208F0 MOV X1, X31
	0x032208F4 BL 0x320A160
	0x032208F8 MOV X19, X0
	0x032208FC ADRP X0, 0xEFC000
	0x03220900 LDR X0, [X0 + 0x4B8]
	0x03220904 BL 0x1C16D08
	0x03220908 BL 0x1C16F10
	0x0322090C MOV X1, X19
	0x03220910 MOV X2, X31
	0x03220914 MOV X20, X0
	0x03220918 BL 0x338C448
	0x0322091C ADRP X0, 0xF01000
	0x03220920 LDR X0, [X0 + 0xEF0]
	0x03220924 BL 0x1C16D08
	0x03220928 MOV X1, X0
	0x0322092C MOV X0, X20
	0x03220930 BL 0x1C16DEC
	0x03220934 ADRP X0, 0xF01000
	0x03220938 LDR X0, [X0 + 0xEF8]
	0x0322093C B 0x32208B0
	0x03220940 BL 0x1C16F20
	0x03220944 STR X30, [X31 - 0x40]!
	0x03220948 STP X24, X23, [X31 + 0x10]
	0x0322094C STP X22, X21, [X31 + 0x20]
	0x03220950 STP X20, X19, [X31 + 0x30]
	0x03220954 ADRP X21, 0x11BC000
	0x03220958 LDRB W8, [X21 + 0x314]
	0x0322095C MOV X22, X2
	0x03220960 MOV X20, X1
	0x03220964 MOV X19, X0
	0x03220968 TBNZ X8, 0x0, 0x322098C
	0x0322096C ADRP X0, 0xF01000
	0x03220970 LDR X0, [X0 + 0xD90]
	0x03220974 BL 0x1C16CF4
	0x03220978 ADRP X0, 0xED3000
	0x0322097C LDR X0, [X0 + 0x618]
	0x03220980 BL 0x1C16CF4
	0x03220984 MOVZ W8, 0x1
	0x03220988 STRB W8, [X21 + 0x314]
	0x0322098C LDRB W8, [X19 + 0x21]
	0x03220990 CBNZ W8, 0x3220BB4
	0x03220994 CBZ X20, 0x3220C04
	0x03220998 CBZ X22, 0x3220C24
	0x0322099C LDR W8, [X20 + 0x18]
	0x032209A0 CMP W8, 0x14
	0x032209A4 B.NE 0x3220C58
	0x032209A8 LDR W8, [X22 + 0x18]
	0x032209AC CMP W8, 0x28
	0x032209B0 B.NE 0x3220C78
	0x032209B4 LDRB W8, [X19 + 0x20]
	0x032209B8 CBZ W8, 0x3220B98
	0x032209BC ADRP X24, 0xF01000
	0x032209C0 LDR X24, [X24 + 0xD90]
	0x032209C4 LDR X0, [X24]
	0x032209C8 BL 0x1C16F10
	0x032209CC MOV X21, X0
	0x032209D0 MOV X1, X20
	0x032209D4 BL 0x321C804
	0x032209D8 ADRP X8, 0xED3000
	0x032209DC LDR X8, [X8 + 0x618]
	0x032209E0 LDR X0, [X8]
	0x032209E4 MOVZ W1, 0x14
	0x032209E8 BL 0x1C16D6C
	0x032209EC MOV X23, X0
	0x032209F0 MOVZ W4, 0x14
	0x032209F4 MOV X0, X22
	0x032209F8 MOV W1, W31
	0x032209FC MOV X2, X23
	0x03220A00 MOV W3, W31
	0x03220A04 MOV X5, X31
	0x03220A08 BL 0x339FCE8
	0x03220A0C LDR X0, [X24]
	0x03220A10 BL 0x1C16F10
	0x03220A14 MOV X20, X0
	0x03220A18 MOV X1, X23
	0x03220A1C BL 0x321C804
	0x03220A20 MOVZ W1, 0x14
	0x03220A24 MOVZ W4, 0x14
	0x03220A28 MOV X0, X22
	0x03220A2C MOV X2, X23
	0x03220A30 MOV W3, W31
	0x03220A34 MOV X5, X31
	0x03220A38 BL 0x339FCE8
	0x03220A3C LDR X0, [X24]
	0x03220A40 BL 0x1C16F10
	0x03220A44 MOV X22, X0
	0x03220A48 MOV X1, X23
	0x03220A4C BL 0x321C804
	0x03220A50 LDR X0, [X24]
	0x03220A54 LDR W8, [X0 + 0xE0]
	0x03220A58 CBNZ W8, 0x3220A60
	0x03220A5C BL 0x1C16DFC
	0x03220A60 MOV W0, W31
	0x03220A64 BL 0x321C2D0
	0x03220A68 MOV X1, X0
	0x03220A6C MOV X0, X20
	0x03220A70 BL 0x32214D8
	0x03220A74 TBNZ X0, 0x1F, 0x3220B98
	0x03220A78 LDR X0, [X24]
	0x03220A7C LDR X23, [X19 + 0x30]
	0x03220A80 LDR W8, [X0 + 0xE0]
	0x03220A84 CBNZ W8, 0x3220A8C
	0x03220A88 BL 0x1C16DFC
	0x03220A8C MOV X0, X23
	0x03220A90 MOV X1, X20
	0x03220A94 BL 0x32214D8
	0x03220A98 CMP W0, 0x0
	0x03220A9C B.LE 0x3220B98
	0x03220AA0 LDR X0, [X24]
	0x03220AA4 LDR W8, [X0 + 0xE0]
	0x03220AA8 CBNZ W8, 0x3220AB0
	0x03220AAC BL 0x1C16DFC
	0x03220AB0 MOV W0, W31
	0x03220AB4 BL 0x321C2D0
	0x03220AB8 MOV X1, X0
	0x03220ABC MOV X0, X22
	0x03220AC0 BL 0x32214D8
	0x03220AC4 TBNZ X0, 0x1F, 0x3220B98
	0x03220AC8 LDR X0, [X24]
	0x03220ACC LDR X23, [X19 + 0x30]
	0x03220AD0 LDR W8, [X0 + 0xE0]
	0x03220AD4 CBNZ W8, 0x3220ADC
	0x03220AD8 BL 0x1C16DFC
	0x03220ADC MOV X0, X23
	0x03220AE0 MOV X1, X22
	0x03220AE4 BL 0x32214D8
	0x03220AE8 CMP W0, 0x0
	0x03220AEC B.LE 0x3220B98
	0x03220AF0 CBZ X22, 0x3220C98
	0x03220AF4 LDR X1, [X19 + 0x30]
	0x03220AF8 MOV X0, X22
	0x03220AFC BL 0x3222C00
	0x03220B00 MOV X22, X0
	0x03220B04 LDR X0, [X24]
	0x03220B08 LDR W8, [X0 + 0xE0]
	0x03220B0C CBNZ W8, 0x3220B14
	0x03220B10 BL 0x1C16DFC
	0x03220B14 MOV X0, X21
	0x03220B18 MOV X1, X22
	0x03220B1C BL 0x321C0A8
	0x03220B20 LDR X1, [X19 + 0x30]
	0x03220B24 BL 0x321C4E4
	0x03220B28 MOV X21, X0
	0x03220B2C MOV X0, X20
	0x03220B30 MOV X1, X22
	0x03220B34 BL 0x321C0A8
	0x03220B38 LDR X1, [X19 + 0x30]
	0x03220B3C BL 0x321C4E4
	0x03220B40 MOV X22, X0
	0x03220B44 LDR X0, [X19 + 0x38]
	0x03220B48 CBZ X0, 0x3220C9C
	0x03220B4C LDR X2, [X19 + 0x28]
	0x03220B50 MOV X1, X21
	0x03220B54 BL 0x321CA14
	0x03220B58 MOV X21, X0
	0x03220B5C LDR X0, [X19 + 0x48]
	0x03220B60 CBZ X0, 0x3220CA0
	0x03220B64 LDR X2, [X19 + 0x28]
	0x03220B68 MOV X1, X22
	0x03220B6C BL 0x321CA14
	0x03220B70 MOV X1, X0
	0x03220B74 MOV X0, X21
	0x03220B78 BL 0x321C0A8
	0x03220B7C LDR X1, [X19 + 0x28]
	0x03220B80 BL 0x321C4E4
	0x03220B84 LDR X1, [X19 + 0x30]
	0x03220B88 BL 0x321C4E4
	0x03220B8C MOV X1, X20
	0x03220B90 BL 0x321C64C
	0x03220B94 B 0x3220B9C
	0x03220B98 MOV W0, W31
	0x03220B9C LDP X20, X19, [X31 + 0x30]
	0x03220BA0 LDP X22, X21, [X31 + 0x20]
	0x03220BA4 LDP X24, X23, [X31 + 0x10]
	0x03220BA8 AND W0, W0, 0x1
	0x03220BAC LDR X30, [X31], #0x40
	0x03220BB0 RET
	0x03220BB4 ADRP X0, 0xF01000
	0x03220BB8 LDR X0, [X0 + 0x578]
	0x03220BBC BL 0x1C16D08
	0x03220BC0 MOV X1, X31
	0x03220BC4 BL 0x320A160
	0x03220BC8 MOV X19, X0
	0x03220BCC ADRP X0, 0xEFC000
	0x03220BD0 LDR X0, [X0 + 0x4B8]
	0x03220BD4 BL 0x1C16D08
	0x03220BD8 BL 0x1C16F10
	0x03220BDC MOV X1, X19
	0x03220BE0 MOV X2, X31
	0x03220BE4 MOV X20, X0
	0x03220BE8 BL 0x338C448
	0x03220BEC ADRP X0, 0xF01000
	0x03220BF0 LDR X0, [X0 + 0xF00]
	0x03220BF4 BL 0x1C16D08
	0x03220BF8 MOV X1, X0
	0x03220BFC MOV X0, X20
	0x03220C00 BL 0x1C16DEC
	0x03220C04 ADRP X0, 0xED8000
	0x03220C08 LDR X0, [X0 + 0x528]
	0x03220C0C BL 0x1C16D08
	0x03220C10 BL 0x1C16F10
	0x03220C14 MOV X19, X0
	0x03220C18 ADRP X0, 0xF01000
	0x03220C1C LDR X0, [X0 + 0xF08]
	0x03220C20 B 0x3220C40
	0x03220C24 ADRP X0, 0xED8000
	0x03220C28 LDR X0, [X0 + 0x528]
	0x03220C2C BL 0x1C16D08
	0x03220C30 BL 0x1C16F10
	0x03220C34 MOV X19, X0
	0x03220C38 ADRP X0, 0xF01000
	0x03220C3C LDR X0, [X0 + 0xF10]
	0x03220C40 BL 0x1C16D08
	0x03220C44 MOV X1, X0
	0x03220C48 MOV X0, X19
	0x03220C4C MOV X2, X31
	0x03220C50 BL 0x330E100
	0x03220C54 B 0x3220D84
	0x03220C58 ADRP X0, 0xF00000
	0x03220C5C LDR X0, [X0 + 0xCE0]
	0x03220C60 BL 0x1C16D08
	0x03220C64 BL 0x1C16F10
	0x03220C68 MOV X19, X0
	0x03220C6C ADRP X0, 0xF01000
	0x03220C70 LDR X0, [X0 + 0xF18]
	0x03220C74 B 0x3220D70
	0x03220C78 ADRP X0, 0xF00000
	0x03220C7C LDR X0, [X0 + 0xCE0]
	0x03220C80 BL 0x1C16D08
	0x03220C84 BL 0x1C16F10
	0x03220C88 MOV X19, X0
	0x03220C8C ADRP X0, 0xF01000
	0x03220C90 LDR X0, [X0 + 0xF20]
	0x03220C94 B 0x3220D70
	0x03220C98 BL 0x1C16F20
	0x03220C9C BL 0x1C16F20
	0x03220CA0 BL 0x1C16F20
	0x03220CA4 B 0x3220D1C
	0x03220CA8 B 0x3220D1C
	0x03220CAC B 0x3220D1C
	0x03220CB0 B 0x3220D1C
	0x03220CB4 B 0x3220D1C
	0x03220CB8 B 0x3220D1C
	0x03220CBC B 0x3220D1C

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X21, 0x11BD000
	015 Move X20, 0xED4000
	016 Move W8, [X21+783]
	017 Move X20, [X20+1560]
	018 Move W25, W1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {32}
	024 Move X0, 0xF02000
	025 Move X0, [X0+3472]
	026 Call 0x1C17CF4
	027 Move X0, 0xED4000
	028 Move X0, [X0+1560]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X21+783], W8
	032 Move X0, [X20]
	033 Move X28, 0xF02000
	034 Move X28, [X28+3472]
	035 Move W1, 20
	036 Call 0x1C17D6C
	037 Move X8, [X20]
	038 Move X21, X0
	039 Move W1, 20
	040 Move X0, X8
	041 Call 0x1C17D6C
	042 Move X0, [X20]
	043 Move W1, 20
	044 Call 0x1C17D6C
	045 Move X8, [X20]
	046 Move X22, X0
	047 Move W1, 20
	048 Move X0, X8
	049 Call 0x1C17D6C
	050 Move [X31+8], X0
	051 Move X0, X31
	052 Call SHA1.Create
	053 Move X24, X0
	054 Move W8, 0x6667
	055 Move X0, [X20]
	056 Subtract W29, W25, 1
	057 NotImplemented "Instruction MOVK not yet implemented."
	058 Add W9, W25, 7
	059 NotImplemented "Instruction CMP not yet implemented."
	060 NotImplemented "Instruction SMADDL not yet implemented."
	061 NotImplemented "Instruction CSEL not yet implemented."
	062 Move X10, X8
	063 ShiftRight X10, 63
	064 And X10, X10, 0x7FFFFFFF
	065 NotImplemented "Instruction SBFM not yet implemented."
	066 NotImplemented "Instruction SBFM not yet implemented."
	067 Move [X31+4], W25
	068 Add W25, W8, W10
	069 Call 0x1C17D6C
	070 Move X26, X0
	071 Move X0, [X19+104]
	072 Compare X0, 0
	073 JumpIfNotEqual {78}
	074 Call RandomNumberGenerator.Create
	075 Move [X19+104], X0
	076 Compare X0, 0
	077 JumpIfEqual {372}
	078 Move X8, [X0]
	079 Move X1, X21
	080 Move X9, [X8+408]
	081 Move X2, [X8+416]
	082 NotImplemented "Instruction BLR not yet implemented."
	083 Compare X24, 0
	084 JumpIfEqual {372}
	085 Move X0, X24
	086 Move X1, X21
	087 Move X2, X31
	088 Call HashAlgorithm.ComputeHash, X0, X1
	089 Compare X21, 0
	090 JumpIfEqual {372}
	091 Move W4, [X21+24]
	092 Move X27, X0
	093 Move X0, X21
	094 Move W1, W31
	095 Move X2, X22
	096 Move W3, W31
	097 Move X5, X31
	098 Call Array.Copy, X0, X1, X2, X3, X4
	099 Move W3, 1
	100 Move X1, X22
	101 Move X2, X21
	102 Call DSAManaged.add, X0, X1, X2, X3
	103 Move X0, X24
	104 Move X1, X22
	105 Move X2, X31
	106 Call HashAlgorithm.ComputeHash, X0, X1
	107 Move X23, [X31+8]
	108 Compare X23, 0
	109 JumpIfEqual {372}
	110 Move W9, [X23+24]
	111 Move X22, X0
	112 Compare W9, 0
	113 JumpIfEqual {137}
	114 Move W8, W31
	115 Compare X27, 0
	116 JumpIfEqual {372}
	117 Move W10, [X27+24]
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Compare X22, 0
	120 JumpIfEqual {372}
	121 Move W10, [X22+24]
	122 NotImplemented "Instruction CMP not yet implemented."
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Move X9, W8
	125 Add X10, X27, X9
	126 Add X11, X22, X9
	127 Move W10, [X10+32]
	128 Move W11, [X11+32]
	129 Add X9, X23, X9
	130 Add W8, W8, 1
	131 Xor W10, W11, W10
	132 Move [X9+32], W10
	133 Move W9, [X23+24]
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Compare W8, 0
	136 JumpIfNotEqual {140}
	137 Move W8, W31
	138 Compare W8, 0
	139 JumpIfEqual {373}
	140 Move W9, [X23+32]
	141 NotImplemented "Instruction CMP not yet implemented."
	142 Or W9, W9, 128
	143 Move [X23+32], W9
	144 Move W8, [X23+51]
	145 Or W8, W8, 1
	146 Move [X23+51], W8
	147 Move X0, [X28]
	148 Call 0x1C17F10
	149 Move X1, X23
	150 Move X20, X0
	151 Call BigInteger..ctor, X0, X1
	152 Move [X19+48], X20
	153 Compare X20, 0
	154 JumpIfEqual {372}
	155 Move X0, X20
	156 Call BigInteger.IsProbablePrime, X0
	157 Move TEMP, X0
	158 And TEMP, TEMP, 1
	159 Compare TEMP, 1
	160 JumpIfNotEqual {71}
	161 Move W20, 2
	162 Move [X19+96], W31
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Move W28, W31
	165 Add W3, W20, W28
	166 Move X1, X27
	167 Move X2, X21
	168 Call DSAManaged.add, X0, X1, X2, X3
	169 Move X0, X24
	170 Move X1, X27
	171 Move X2, X31
	172 Call HashAlgorithm.ComputeHash, X0, X1
	173 Compare X26, 0
	174 JumpIfEqual {372}
	175 Move X27, X0
	176 Compare X0, 0
	177 JumpIfEqual {372}
	178 Move W8, [X26+24]
	179 Move W4, [X27+24]
	180 Add W28, W28, 1
	181 Move X0, X27
	182 Move W1, W31
	183 NotImplemented "Instruction MSUB not yet implemented."
	184 Move X2, X26
	185 Move X5, X31
	186 Call Array.Copy, X0, X1, X2, X3, X4
	187 NotImplemented "Instruction CMP not yet implemented."
	188 Add W28, W20, W25
	189 Move X1, X27
	190 Move X2, X21
	191 Move W3, W28
	192 Call DSAManaged.add, X0, X1, X2, X3
	193 Move X0, X24
	194 Move X1, X27
	195 Move X2, X31
	196 Call HashAlgorithm.ComputeHash, X0, X1
	197 Compare X0, 0
	198 JumpIfEqual {372}
	199 Compare X26, 0
	200 JumpIfEqual {372}
	201 Move W8, [X0+24]
	202 Move W9, [X26+24]
	203 Move X2, X26
	204 Move W3, W31
	205 Move X5, X31
	206 NotImplemented "Instruction MSUB not yet implemented."
	207 Subtract W1, W8, W4
	208 Move X27, X0
	209 Move W23, W29
	210 Call Array.Copy, X0, X1, X2, X3, X4
	211 Move W8, [X26+24]
	212 Compare W8, 0
	213 JumpIfEqual {373}
	214 Move W8, [X26+32]
	215 Move X20, 0xF02000
	216 Or W8, W8, 128
	217 Move [X26+32], W8
	218 Move X20, [X20+3472]
	219 Move X0, [X20]
	220 Call 0x1C17F10
	221 Move X1, X26
	222 Move X29, X0
	223 Call BigInteger..ctor, X0, X1
	224 Move X0, [X20]
	225 Move X20, [X19+48]
	226 Move W8, [X0+224]
	227 Compare W8, 0
	228 JumpIfNotEqual {230}
	229 Call 0x1C17DFC
	230 Move W1, 2
	231 Move X0, X20
	232 Call BigInteger.op_Multiply, X0, X1
	233 Move X1, X0
	234 Move X0, X29
	235 Call BigInteger.op_Modulus, X0, X1
	236 Move X20, X0
	237 Move W0, 1
	238 Call BigInteger.op_Implicit, X0
	239 Move X1, X0
	240 Move X0, X20
	241 Call BigInteger.op_Subtraction, X0, X1
	242 Move X1, X0
	243 Move X0, X29
	244 Call BigInteger.op_Subtraction, X0, X1
	245 Move [X19+40], X0
	246 Compare X0, 0
	247 JumpIfEqual {372}
	248 Move W1, W23
	249 Move W29, W23
	250 Call BigInteger.TestBit, X0, X1
	251 Move TEMP, X0
	252 And TEMP, TEMP, 1
	253 Compare TEMP, 1
	254 JumpIfNotEqual {263}
	255 Move X0, [X19+40]
	256 Compare X0, 0
	257 JumpIfEqual {372}
	258 Call BigInteger.IsProbablePrime, X0
	259 Move TEMP, X0
	260 And TEMP, TEMP, 1
	261 Compare TEMP, 1
	262 JumpIfEqual {270}
	263 Move W8, [X19+96]
	264 Add W20, W28, 1
	265 Add W8, W8, 1
	266 NotImplemented "Instruction CMP not yet implemented."
	267 Move [X19+96], W8
	268 Move X28, 0xF02000
	269 Move X28, [X28+3472]
	270 Move X25, 0xF02000
	271 Move X25, [X25+3472]
	272 Move X22, [X19+40]
	273 Move X0, [X25]
	274 Move W8, [X0+224]
	275 Compare W8, 0
	276 JumpIfNotEqual {278}
	277 Call 0x1C17DFC
	278 Move W0, 1
	279 Call BigInteger.op_Implicit, X0
	280 Move X1, X0
	281 Move X0, X22
	282 Call BigInteger.op_Subtraction, X0, X1
	283 Move X1, [X19+48]
	284 Call BigInteger.op_Division, X0, X1
	285 Move W20, [X31+4]
	286 Move X22, X0
	287 Move X0, [X25]
	288 Move W8, [X0+224]
	289 Compare W8, 0
	290 JumpIfNotEqual {292}
	291 Call 0x1C17DFC
	292 Move W0, W20
	293 Call BigInteger.GenerateRandom, X0
	294 Move X23, X0
	295 Move W0, 1
	296 Call BigInteger.op_Implicit, X0
	297 Move X1, X0
	298 Move X0, X23
	299 Call Kernel.Compare, X0, X1
	300 NotImplemented "Instruction CMP not yet implemented."
	301 Move X0, [X25]
	302 Move X24, [X19+40]
	303 Move W8, [X0+224]
	304 Compare W8, 0
	305 JumpIfNotEqual {307}
	306 Call 0x1C17DFC
	307 Move W0, 1
	308 Call BigInteger.op_Implicit, X0
	309 Move X1, X0
	310 Move X0, X24
	311 Call BigInteger.op_Subtraction, X0, X1
	312 Move X1, X0
	313 Move X0, X23
	314 Call Kernel.Compare, X0, X1
	315 Move TEMP, X0
	316 And TEMP, TEMP, -2147483648
	317 Compare TEMP, -2147483648
	318 JumpIfNotEqual {287}
	319 Compare X23, 0
	320 JumpIfEqual {372}
	321 Move X2, [X19+40]
	322 Move X0, X23
	323 Move X1, X22
	324 Call BigInteger.ModPow, X0, X1, X2
	325 Move [X19+56], X0
	326 Move X23, X0
	327 Move X0, [X25]
	328 Move W8, [X0+224]
	329 Compare W8, 0
	330 JumpIfNotEqual {332}
	331 Call 0x1C17DFC
	332 Move W0, 1
	333 Call BigInteger.op_Implicit, X0
	334 Move X1, X0
	335 Move X0, X23
	336 Call Kernel.Compare, X0, X1
	337 NotImplemented "Instruction CMP not yet implemented."
	338 Move X0, [X25]
	339 Call 0x1C17F10
	340 Move X1, X21
	341 Move X20, X0
	342 Call BigInteger..ctor, X0, X1
	343 Move [X19+88], X20
	344 Move X0, [X25]
	345 Move X20, [X19+40]
	346 Move W8, [X0+224]
	347 Compare W8, 0
	348 JumpIfNotEqual {350}
	349 Call 0x1C17DFC
	350 Move W0, 1
	351 Call BigInteger.op_Implicit, X0
	352 Move X1, X0
	353 Move X0, X20
	354 Call BigInteger.op_Subtraction, X0, X1
	355 Move X1, [X19+48]
	356 Call BigInteger.op_Division, X0, X1
	357 Move [X19+80], X0
	358 Move X20, [X31+96]
	359 Move X19, [X31+104]
	360 Move X22, [X31+80]
	361 Move X21, [X31+88]
	362 Move X24, [X31+64]
	363 Move X23, [X31+72]
	364 Move X26, [X31+48]
	365 Move X25, [X31+56]
	366 Move X28, [X31+32]
	367 Move X27, [X31+40]
	368 Move X29, [X31+16]
	369 Move X30, [X31+24]
	370 Add X31, X31, 112
	371 Return 
	372 Call 0x1C17F20
	373 Call 0x1C17F28

Method: System.Security.Cryptography.RandomNumberGenerator get_Random()

Disassembly:
	0x03220F78 CBZ X0, 0x3220F9C
	0x03220F7C BL 0x321CB3C
	0x03220F80 STR X31, [X19 + 0x48]
	0x03220F84 MOVZ W8, 0x1
	0x03220F88 STRB W8, [X19 + 0x21]
	0x03220F8C LDP X20, X19, [X31 + 0x20]
	0x03220F90 LDP X22, X21, [X31 + 0x10]
	0x03220F94 LDR X30, [X31], #0x30

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+104]
	005 Compare X0, 0
	006 JumpIfNotEqual {9}
	007 Call RandomNumberGenerator.Create
	008 Move [X19+104], X0
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0

Method: System.Int32 get_KeySize()

Disassembly:
	0x032212AC CBZ X19, 0x3221320
	0x032212B0 LDR X0, [X19 + 0x18]
	0x032212B4 CBZ X0, 0x3221320
	0x032212B8 MOV X1, X31
	0x032212BC BL 0x33A01F0
	0x032212C0 CBZ X0, 0x3221304
	0x032212C4 ADRP X23, 0xEFB000
	0x032212C8 LDR X23, [X23 + 0xD08]
	0x032212CC MOV X21, X0
	0x032212D0 LDR X22, [X23]
	0x032212D4 MOV X1, X22

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+32]
	003 Compare W8, 0
	004 JumpIfEqual {11}
	005 Move X0, [X0+40]
	006 Compare X0, 0
	007 JumpIfEqual {14}
	008 Move X30, [X31+16]
	009 Call BigInteger.BitCount, X0
	010 Return X0
	011 Move W0, [X0+16]
	012 Move X30, [X31+16]
	013 Return X0
	014 Call 0x1C17F20

Method: System.Boolean get_PublicOnly()

Disassembly:
	0x032212D8 BL 0x1C16E00
	0x032212DC CBZ X0, 0x32212F8
	0x032212E0 STR X0, [X20 + 0x18]
	0x032212E4 LDR X22, [X23]
	0x032212E8 MOV X0, X21
	0x032212EC MOV X1, X22
	0x032212F0 BL 0x1C16E00
	0x032212F4 CBNZ X0, 0x3221308
	0x032212F8 MOV X0, X21
	0x032212FC MOV X1, X22
	0x03221300 BL 0x1C171E0
	0x03221304 STR X31, [X20 + 0x18]
	0x03221308 LDR W8, [X19 + 0x10]
	0x0322130C LDP X22, X21, [X31 + 0x10]
	0x03221310 STR W8, [X20 + 0x10]
	0x03221314 LDP X20, X19, [X31 + 0x20]
	0x03221318 LDP X30, X23, [X31], #0x30
	0x0322131C RET
	0x03221320 BL 0x1C16F20
	0x03221324 STP X30, X23, [X31 - 0x30]!
	0x03221328 STP X22, X21, [X31 + 0x10]
	0x0322132C STP X20, X19, [X31 + 0x20]
	0x03221330 ADRP X23, 0x11BB000
	0x03221334 ADRP X22, 0xEFB000
	0x03221338 LDRB W8, [X23 + 0x31A]
	0x0322133C LDR X22, [X22 + 0xD08]
	0x03221340 MOV W21, W2
	0x03221344 MOV X20, X1
	0x03221348 MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11BC000
	005 Move W8, [X20+784]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF01000
	012 Move X0, [X0+3472]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+784], W8
	016 Move W8, [X19+32]
	017 Compare W8, 0
	018 JumpIfEqual {34}
	019 Move X8, 0xF01000
	020 Move X8, [X8+3472]
	021 Move X19, [X19+64]
	022 Move X0, [X8]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X1, X31
	031 Move X30, [X31+32]
	032 Call BigInteger.op_Equality, X0, X1
	033 Return X0
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move W0, W31
	037 Move X30, [X31+32]
	038 Return X0

Method: System.Byte[] NormalizeArray(System.Byte[] array)

Disassembly:
	0x0322134C TBNZ X8, 0x0, 0x3221364
	0x03221350 ADRP X0, 0xEFB000
	0x03221354 LDR X0, [X0 + 0xD08]
	0x03221358 BL 0x1C16CF4
	0x0322135C MOVZ W8, 0x1
	0x03221360 STRB W8, [X23 + 0x31A]
	0x03221364 MOVZ W8, 0x1
	0x03221368 MOV X0, X19
	0x0322136C MOV X1, X31
	0x03221370 STR W8, [X19 + 0x10]
	0x03221374 BL 0x33BDD8C
	0x03221378 LDR X0, [X22]
	0x0322137C MOV W1, W21
	0x03221380 BL 0x1C16D6C
	0x03221384 STR X0, [X19 + 0x18]
	0x03221388 CBZ X20, 0x32213F0
	0x0322138C LDR W12, [X20 + 0x10]
	0x03221390 CBZ W12, 0x32213DC
	0x03221394 LDR X9, [X20 + 0x18]
	0x03221398 MOV X8, X31
	0x0322139C ADD X10, X0, 0x20
	0x032213A0 ADD X11, X9, 0x20
	0x032213A4 CBZ X9, 0x32213F0
	0x032213A8 LDR W12, [X9 + 0x18]
	0x032213AC CMP X8, X12
	0x032213B0 B.CS 0x32213F4
	0x032213B4 CBZ X0, 0x32213F0
	0x032213B8 LDR W12, [X0 + 0x18]
	0x032213BC CMP X8, X12
	0x032213C0 B.CS 0x32213F4
	0x032213C4 LDR W12, [X11, X8, LSL #2]
	0x032213C8 STR W12, [X10, X8, LSL #2]
	0x032213CC LDR W12, [X20 + 0x10]
	0x032213D0 ADD X8, X8, 0x1
	0x032213D4 CMP X8, X12
	0x032213D8 B.CC 0x32213A4
	0x032213DC STR W12, [X19 + 0x10]
	0x032213E0 LDP X20, X19, [X31 + 0x20]
	0x032213E4 LDP X22, X21, [X31 + 0x10]
	0x032213E8 LDP X30, X23, [X31], #0x30
	0x032213EC RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11BC000
	006 Move W8, [X20+785]
	007 Move X19, X1
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xED3000
	013 Move X0, [X0+1560]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+785], W8
	017 Compare X19, 0
	018 JumpIfEqual {48}
	019 Move W8, [X19+24]
	020 Add W9, W8, 3
	021 NotImplemented "Instruction CMP not yet implemented."
	022 NotImplemented "Instruction CSEL not yet implemented."
	023 And W9, W9, 0xFFFFFFFC
	024 Subtract W21, W8, W9
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X9, 0xED3000
	027 Move X9, [X9+1560]
	028 Subtract W8, W8, W21
	029 Add W1, W8, 4
	030 Move X0, [X9]
	031 Call 0x1C17D6C
	032 Move W4, [X19+24]
	033 Move X20, X0
	034 Move W8, 4
	035 Subtract W3, W8, W21
	036 Move X0, X19
	037 Move W1, W31
	038 Move X2, X20
	039 Move X5, X31
	040 Call Array.Copy, X0, X1, X2, X3, X4
	041 Move X19, X20
	042 Move X0, X19
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Return X0
	048 Call 0x1C17F20

Method: System.Security.Cryptography.DSAParameters ExportParameters(System.Boolean includePrivateParameters)

Disassembly:
	0x032213F0 BL 0x1C16F20
	0x032213F4 BL 0x1C16F28
	0x032213F8 STR X30, [X31 - 0x10]!
	0x032213FC LDR W10, [X0 + 0x10]
	0x03221400 CBZ W10, 0x3221438
	0x03221404 LDR X8, [X0 + 0x18]
	0x03221408 CBZ X8, 0x322144C
	0x0322140C LDR W9, [X8 + 0x18]
	0x03221410 SUB W10, W10, 0x1
	0x03221414 CMP W10, W9
	0x03221418 B.CS 0x3221448
	0x0322141C ADD X11, X8, W10, 0x2, SXTW
	0x03221420 LDR W11, [X11 + 0x20]
	0x03221424 CBNZ W11, 0x3221440
	0x03221428 STR W10, [X0 + 0x10]
	0x0322142C SUB W10, W10, 0x1
	0x03221430 ADDS W31, W10, 0x1
	0x03221434 B.NE 0x3221414
	0x03221438 MOVZ W8, 0x1
	0x0322143C STR W8, [X0 + 0x10]
	0x03221440 LDR X30, [X31], #0x10
	0x03221444 RET
	0x03221448 BL 0x1C16F28
	0x0322144C BL 0x1C16F20
	0x03221450 STR X30, [X31 - 0x30]!
	0x03221454 STP X22, X21, [X31 + 0x10]
	0x03221458 STP X20, X19, [X31 + 0x20]
	0x0322145C ADRP X22, 0x11BB000
	0x03221460 ADRP X21, 0xEFB000
	0x03221464 LDRB W8, [X22 + 0x31C]
	0x03221468 LDR X21, [X21 + 0xD08]
	0x0322146C MOV W20, W1
	0x03221470 MOV X19, X0
	0x03221474 TBNZ X8, 0x0, 0x322148C
	0x03221478 ADRP X0, 0xEFB000
	0x0322147C LDR X0, [X0 + 0xD08]
	0x03221480 BL 0x1C16CF4
	0x03221484 MOVZ W8, 0x1
	0x03221488 STRB W8, [X22 + 0x31C]
	0x0322148C MOVZ W8, 0x1
	0x03221490 MOV X0, X19
	0x03221494 MOV X1, X31
	0x03221498 STR W8, [X19 + 0x10]
	0x0322149C BL 0x33BDD8C
	0x032214A0 LDR X0, [X21]
	0x032214A4 MOVZ W1, 0x1
	0x032214A8 BL 0x1C16D6C
	0x032214AC CBZ X0, 0x32214D0
	0x032214B0 LDR W8, [X0 + 0x18]
	0x032214B4 CBZ W8, 0x32214D4
	0x032214B8 STR W20, [X0 + 0x20]
	0x032214BC STR X0, [X19 + 0x18]
	0x032214C0 LDP X20, X19, [X31 + 0x20]
	0x032214C4 LDP X22, X21, [X31 + 0x10]
	0x032214C8 LDR X30, [X31], #0x30
	0x032214CC RET
	0x032214D0 BL 0x1C16F20
	0x032214D4 BL 0x1C16F28
	0x032214D8 STR X30, [X31 - 0x10]!
	0x032214DC CBZ X0, 0x3221614
	0x032214E0 CBZ X1, 0x3221614
	0x032214E4 LDR W10, [X0 + 0x10]
	0x032214E8 LDR W9, [X1 + 0x10]
	0x032214EC MOV W8, W10
	0x032214F0 CBZ W10, 0x3221518
	0x032214F4 LDR X11, [X0 + 0x18]
	0x032214F8 CBZ X11, 0x3221614
	0x032214FC LDR W12, [X11 + 0x18]
	0x03221500 SUB W10, W8, 0x1
	0x03221504 CMP W10, W12
	0x03221508 B.CS 0x3221618
	0x0322150C ADD X11, X11, W10, 0x2, SXTW
	0x03221510 LDR W11, [X11 + 0x20]
	0x03221514 CBZ W11, 0x32214EC
	0x03221518 SUB W10, W8, 0x1
	0x0322151C MOV W11, W9
	0x03221520 CBZ W9, 0x3221548
	0x03221524 LDR X12, [X1 + 0x18]
	0x03221528 CBZ X12, 0x3221614
	0x0322152C LDR W13, [X12 + 0x18]
	0x03221530 SUB W9, W11, 0x1
	0x03221534 CMP W9, W13
	0x03221538 B.CS 0x3221618
	0x0322153C ADD X12, X12, W9, 0x2, SXTW
	0x03221540 LDR W12, [X12 + 0x20]
	0x03221544 CBZ W12, 0x322151C
	0x03221548 ORR W9, W11, W8, 0x0
	0x0322154C CBZ W9, 0x3221560
	0x03221550 CMP W8, W11
	0x03221554 B.CS 0x3221568
	0x03221558 MOVN W0, 0x0
	0x0322155C B 0x322160C
	0x03221560 MOV W0, W31
	0x03221564 B 0x322160C
	0x03221568 B.LS 0x3221574
	0x0322156C MOVZ W0, 0x1
	0x03221570 B 0x322160C
	0x03221574 LDR X8, [X0 + 0x18]
	0x03221578 MOV W9, W10
	0x0322157C CBZ W10, 0x32215C8
	0x03221580 CBZ X8, 0x3221614
	0x03221584 LDR W10, [X8 + 0x18]
	0x03221588 CMP W9, W10
	0x0322158C B.CS 0x3221618
	0x03221590 LDR X10, [X1 + 0x18]
	0x03221594 CBZ X10, 0x3221614
	0x03221598 LDR W11, [X10 + 0x18]
	0x0322159C CMP W9, W11
	0x032215A0 B.CS 0x3221618
	0x032215A4 MOV W11, W9
	0x032215A8 ADD X12, X8, X11, 0x2, LSL
	0x032215AC ADD X10, X10, X11, 0x2, LSL
	0x032215B0 LDR W11, [X12 + 0x20]
	0x032215B4 LDR W10, [X10 + 0x20]
	0x032215B8 CMP W11, W10
	0x032215BC SUB W10, W9, 0x1
	0x032215C0 B.EQ 0x3221578
	0x032215C4 B 0x32215CC
	0x032215C8 CBZ X8, 0x3221614
	0x032215CC LDR W10, [X8 + 0x18]
	0x032215D0 CMP W9, W10
	0x032215D4 B.CS 0x3221618
	0x032215D8 LDR X10, [X1 + 0x18]
	0x032215DC CBZ X10, 0x3221614
	0x032215E0 LDR W11, [X10 + 0x18]
	0x032215E4 CMP W9, W11
	0x032215E8 B.CS 0x3221618
	0x032215EC MOV W9, W9
	0x032215F0 ADD X8, X8, X9, 0x2, LSL
	0x032215F4 ADD X9, X10, X9, 0x2, LSL
	0x032215F8 LDR W8, [X8 + 0x20]
	0x032215FC LDR W9, [X9 + 0x20]
	0x03221600 CMP W8, W9
	0x03221604 B.CC 0x3221558
	0x03221608 CSET W0, HI
	0x0322160C LDR X30, [X31], #0x10
	0x03221610 RET
	0x03221614 BL 0x1C16F20
	0x03221618 BL 0x1C16F28
	0x0322161C STR X30, [X31 - 0x30]!
	0x03221620 STP X22, X21, [X31 + 0x10]
	0x03221624 STP X20, X19, [X31 + 0x20]
	0x03221628 ADRP X20, 0x11BB000
	0x0322162C LDRB W8, [X20 + 0x338]
	0x03221630 MOV X21, X1
	0x03221634 MOV X19, X0
	0x03221638 TBNZ X8, 0x0, 0x3221650
	0x0322163C ADRP X0, 0xF00000
	0x03221640 LDR X0, [X0 + 0xD90]
	0x03221644 BL 0x1C16CF4
	0x03221648 MOVZ W8, 0x1
	0x0322164C STRB W8, [X20 + 0x338]
	0x03221650 CBZ X19, 0x32217DC
	0x03221654 ADRP X8, 0xF00000
	0x03221658 LDR X8, [X8 + 0xD90]

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X22, 0x11BC000
	013 Move W9, [X22+786]
	014 Move W21, W1
	015 Move X20, X0
	016 Move X19, X8
	017 Move TEMP, X9
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xF01000
	022 Move X0, [X0+3472]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+786], W8
	026 Move W8, [X20+33]
	027 Compare W8, 0
	028 JumpIfNotEqual {159}
	029 Move W8, [X20+32]
	030 Compare W8, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X20
	033 Call DSAManaged.Generate, X0
	034 Move X27, 0xF01000
	035 Move X27, [X27+3472]
	036 Move TEMP, X21
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {53}
	040 Move X0, [X27]
	041 Move X22, [X20+64]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move X0, X22
	047 Move X1, X31
	048 Call BigInteger.op_Equality, X0, X1
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfEqual {179}
	053 Move X0, [X20+40]
	054 Compare X0, 0
	055 JumpIfEqual {158}
	056 Call BigInteger.GetBytes, X0
	057 Move X1, X0
	058 Call DSAManaged.NormalizeArray, X0, X1
	059 Move X8, [X20+48]
	060 Compare X8, 0
	061 JumpIfEqual {158}
	062 Move X22, X0
	063 Move X0, X8
	064 Call BigInteger.GetBytes, X0
	065 Move X1, X0
	066 Call DSAManaged.NormalizeArray, X0, X1
	067 Move X8, [X20+56]
	068 Compare X8, 0
	069 JumpIfEqual {158}
	070 Move X23, X0
	071 Move X0, X8
	072 Call BigInteger.GetBytes, X0
	073 Move X1, X0
	074 Call DSAManaged.NormalizeArray, X0, X1
	075 Move X8, [X20+72]
	076 Compare X8, 0
	077 JumpIfEqual {158}
	078 Move X24, X0
	079 Move X0, X8
	080 Call BigInteger.GetBytes, X0
	081 Move X1, X0
	082 Call DSAManaged.NormalizeArray, X0, X1
	083 Move W8, [X20+100]
	084 Move X25, X0
	085 Compare W8, 0
	086 JumpIfEqual {88}
	087 Move X26, X31
	088 Move X0, [X20+80]
	089 Compare X0, 0
	090 JumpIfEqual {158}
	091 Call BigInteger.GetBytes, X0
	092 Move X1, X0
	093 Call DSAManaged.NormalizeArray, X0, X1
	094 Move X26, X0
	095 Move X0, [X27]
	096 Move X27, [X20+88]
	097 Move W8, [X0+224]
	098 Compare W8, 0
	099 JumpIfNotEqual {101}
	100 Call 0x1C17DFC
	101 Move X0, X27
	102 Move W1, W31
	103 Call BigInteger.op_Inequality, X0, X1
	104 Move TEMP, X0
	105 And TEMP, TEMP, 1
	106 Compare TEMP, 1
	107 JumpIfNotEqual {120}
	108 Move X0, [X20+88]
	109 Compare X0, 0
	110 JumpIfEqual {158}
	111 Call BigInteger.GetBytes, X0
	112 Move X1, X0
	113 Call DSAManaged.NormalizeArray, X0, X1
	114 Move W28, [X20+96]
	115 Move X27, X0
	116 Move TEMP, X21
	117 And TEMP, TEMP, 1
	118 Compare TEMP, 1
	119 JumpIfEqual {126}
	120 Move X27, X31
	121 Move W28, W31
	122 Move TEMP, X21
	123 And TEMP, TEMP, 1
	124 Compare TEMP, 1
	125 JumpIfNotEqual {136}
	126 Move X0, [X20+64]
	127 Compare X0, 0
	128 JumpIfEqual {158}
	129 Call BigInteger.GetBytes, X0
	130 Compare X0, 0
	131 JumpIfEqual {158}
	132 Move W8, [X0+24]
	133 NotImplemented "Instruction CMP not yet implemented."
	134 Move X1, X0
	135 Call DSAManaged.NormalizeArray, X0, X1
	136 Move X0, X31
	137 Move [X19], X22
	138 Move [X19+8], X23
	139 Move [X19+16], X24
	140 Move [X19+24], X25
	141 Move [X19+32], X26
	142 Move [X19+40], X0
	143 Move [X19+48], X27
	144 Move [X19+56], W28
	145 Move [X19+60], W31
	146 Move X20, [X31+80]
	147 Move X19, [X31+88]
	148 Move X22, [X31+64]
	149 Move X21, [X31+72]
	150 Move X24, [X31+48]
	151 Move X23, [X31+56]
	152 Move X26, [X31+32]
	153 Move X25, [X31+40]
	154 Move X28, [X31+16]
	155 Move X27, [X31+24]
	156 Move X30, [X31+96]
	157 Return X0
	158 Call 0x1C17F20
	159 Move X0, 0xF01000
	160 Move X0, [X0+1400]
	161 Call 0x1C17D08
	162 Move X1, X31
	163 Call Locale.GetText, X0
	164 Move X19, X0
	165 Move X0, 0xEFC000
	166 Move X0, [X0+1208]
	167 Call 0x1C17D08
	168 Call 0x1C17F10
	169 Move X1, X19
	170 Move X2, X31
	171 Move X20, X0
	172 Call ObjectDisposedException..ctor, X0, X1
	173 Move X0, 0xF01000
	174 Move X0, [X0+3800]
	175 Call 0x1C17D08
	176 Move X1, X0
	177 Move X0, X20
	178 Call 0x1C17DEC
	179 Move X0, 0xF00000
	180 Move X0, [X0+3296]
	181 Call 0x1C17D08
	182 Call 0x1C17F10
	183 Move X19, X0
	184 Move X0, 0xF01000
	185 Move X0, [X0+3808]
	186 Call 0x1C17D08
	187 Move X1, X0
	188 Move X0, X19
	189 Move X2, X31
	190 Call CryptographicException..ctor, X0, X1
	191 Move X0, 0xF01000
	192 Move X0, [X0+3800]
	193 Call 0x1C17D08
	194 Move X1, X0
	195 Move X0, X19
	196 Call 0x1C17DEC

Method: System.Void ImportParameters(System.Security.Cryptography.DSAParameters parameters)

Disassembly:
	0x032216C8 B.CS 0x32217D8
	0x032216CC LDR W0, [X15, X10, LSL #2]
	0x032216D0 LDR W1, [X16, X10, LSL #2]
	0x032216D4 ADD W0, W0, W13
	0x032216D8 SUB W1, W1, W0
	0x032216DC STR W1, [X17, X10, LSL #2]
	0x032216E0 LDR W2, [X21 + 0x10]
	0x032216E4 CMP W0, W13
	0x032216E8 CSET W13, CC
	0x032216EC ADDS W31, W0, W1
	0x032216F0 CSET W0, CS
	0x032216F4 ADD X10, X10, 0x1
	0x032216F8 CMP X10, X2
	0x032216FC ORR W13, W13, W0, 0x0
	0x03221700 B.CC 0x32216A4
	0x03221704 LDR W14, [X19 + 0x10]
	0x03221708 CMP W14, W10
	0x0322170C B.EQ 0x32217BC
	0x03221710 TBZ X13, 0x0, 0x3221778
	0x03221714 CMP W10, W11
	0x03221718 CSEL X14, X10, X11, HI
	0x0322171C CMP W10, W12
	0x03221720 CSEL X15, X10, X12, HI
	0x03221724 ADD X13, X8, 0x20
	0x03221728 AND X14, X14, 0x0
	0x0322172C AND X15, X15, 0x0
	0x03221730 ADD X16, X9, 0x20
	0x03221734 CMP X14, X10
	0x03221738 B.EQ 0x32217D8
	0x0322173C CMP X15, X10
	0x03221740 B.EQ 0x32217D8
	0x03221744 LDR W17, [X13, X10, LSL #2]
	0x03221748 SUB W17, W17, 0x1
	0x0322174C STR W17, [X16, X10, LSL #2]
	0x03221750 LDR W1, [X13, X10, LSL #2]
	0x03221754 LDR W0, [X19 + 0x10]
	0x03221758 ADD X17, X10, 0x1
	0x0322175C CBNZ W1, 0x322176C
	0x03221760 CMP X17, X0
	0x03221764 MOV X10, X17
	0x03221768 B.CC 0x3221734
	0x0322176C CMP W17, W0
	0x03221770 B.EQ 0x32217BC
	0x03221774 MOV W10, W17
	0x03221778 CMP W10, W11
	0x0322177C CSEL W11, W10, W11, HI
	0x03221780 CMP W10, W12
	0x03221784 MOV W13, W10
	0x03221788 ADD X9, X9, 0x20
	0x0322178C CSEL W10, W10, W12, HI
	0x03221790 ADD X8, X8, 0x20
	0x03221794 CMP X11, X13
	0x03221798 B.EQ 0x32217D8
	0x0322179C CMP X10, X13
	0x032217A0 B.EQ 0x32217D8
	0x032217A4 LDR W12, [X8, X13, LSL #2]
	0x032217A8 STR W12, [X9, X13, LSL #2]
	0x032217AC LDR W12, [X19 + 0x10]
	0x032217B0 ADD X13, X13, 0x1
	0x032217B4 CMP X13, X12
	0x032217B8 B.CC 0x3221794
	0x032217BC MOV X0, X20
	0x032217C0 BL 0x32213F8
	0x032217C4 MOV X0, X20
	0x032217C8 LDP X20, X19, [X31 + 0x20]
	0x032217CC LDP X22, X21, [X31 + 0x10]
	0x032217D0 LDR X30, [X31], #0x30
	0x032217D4 RET
	0x032217D8 BL 0x1C16F28
	0x032217DC BL 0x1C16F20
	0x032217E0 STR X30, [X31 - 0x10]!
	0x032217E4 CBZ X0, 0x3221840
	0x032217E8 LDR W8, [X0 + 0x10]
	0x032217EC CBZ W8, 0x3221830
	0x032217F0 LDR X11, [X0 + 0x18]
	0x032217F4 CBZ X11, 0x3221840
	0x032217F8 LDR W9, [X11 + 0x18]
	0x032217FC MOV X0, X31
	0x03221800 MOV W10, W1
	0x03221804 ADD X11, X11, 0x1C
	0x03221808 SUB X12, X8, 0x1
	0x0322180C CMP X12, X9
	0x03221810 B.CS 0x322183C
	0x03221814 LDR W13, [X11, X8, LSL #2]
	0x03221818 MOV X8, X12
	0x0322181C BFM X13, X0, 0x20, 0x1F
	0x03221820 UDIV X14, X13, X10
	0x03221824 MSUB X0, X14, X10, X13
	0x03221828 CBNZ X12, 0x3221808
	0x0322182C B 0x3221834
	0x03221830 MOV W0, W31
	0x03221834 LDR X30, [X31], #0x10
	0x03221838 RET
	0x0322183C BL 0x1C16F28
	0x03221840 BL 0x1C16F20
	0x03221844 STP X30, X27, [X31 - 0x50]!
	0x03221848 STP X26, X25, [X31 + 0x10]
	0x0322184C STP X24, X23, [X31 + 0x20]
	0x03221850 STP X22, X21, [X31 + 0x30]
	0x03221854 STP X20, X19, [X31 + 0x40]
	0x03221858 ADRP X19, 0x11BB000
	0x0322185C LDRB W8, [X19 + 0x33A]
	0x03221860 MOV X22, X1
	0x03221864 MOV X20, X0
	0x03221868 TBNZ X8, 0x0, 0x322188C
	0x0322186C ADRP X0, 0xF00000
	0x03221870 LDR X0, [X0 + 0xF38]
	0x03221874 BL 0x1C16CF4
	0x03221878 ADRP X0, 0xF00000
	0x0322187C LDR X0, [X0 + 0xD90]
	0x03221880 BL 0x1C16CF4
	0x03221884 MOVZ W8, 0x1
	0x03221888 STRB W8, [X19 + 0x33A]
	0x0322188C MOV X0, X20
	0x03221890 MOV X1, X22
	0x03221894 BL 0x32214D8
	0x03221898 ADDS W31, W0, 0x1
	0x0322189C B.EQ 0x32218F4
	0x032218A0 CBZ X20, 0x3221C9C
	0x032218A4 MOV X0, X20
	0x032218A8 BL 0x32213F8
	0x032218AC CBZ X22, 0x3221C9C
	0x032218B0 MOV X0, X22
	0x032218B4 BL 0x32213F8
	0x032218B8 LDR W26, [X22 + 0x10]
	0x032218BC SUBS W8, W26, 0x1
	0x032218C0 B.NE 0x3221978
	0x032218C4 LDR X8, [X22 + 0x18]
	0x032218C8 CBZ X8, 0x3221C9C
	0x032218CC LDR W9, [X8 + 0x18]
	0x032218D0 CBZ W9, 0x3221C98
	0x032218D4 LDR W1, [X8 + 0x20]
	0x032218D8 MOV X0, X20
	0x032218DC LDP X20, X19, [X31 + 0x40]
	0x032218E0 LDP X22, X21, [X31 + 0x30]
	0x032218E4 LDP X24, X23, [X31 + 0x20]
	0x032218E8 LDP X26, X25, [X31 + 0x10]
	0x032218EC LDP X30, X27, [X31], #0x50
	0x032218F0 B 0x3223E34
	0x032218F4 ADRP X8, 0xF00000
	0x032218F8 LDR X8, [X8 + 0xF38]
	0x032218FC MOVZ W1, 0x2
	0x03221900 LDR X0, [X8]
	0x03221904 BL 0x1C16D6C
	0x03221908 ADRP X21, 0xF00000
	0x0322190C LDR X21, [X21 + 0xD90]
	0x03221910 MOV X22, X0
	0x03221914 LDR X8, [X21]
	0x03221918 LDR W9, [X8 + 0xE0]
	0x0322191C CBNZ W9, 0x3221928
	0x03221920 MOV X0, X8
	0x03221924 BL 0x1C16DFC
	0x03221928 MOV W0, W31
	0x0322192C BL 0x321C2D0
	0x03221930 CBZ X22, 0x3221C9C
	0x03221934 MOV X19, X0
	0x03221938 CBZ X0, 0x3221950
	0x0322193C LDR X8, [X22]
	0x03221940 MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x11BC000
	008 Move W8, [X21+787]
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF01000
	016 Move X0, [X0+3472]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+787], W8
	020 Move W8, [X19+33]
	021 Compare W8, 0
	022 JumpIfNotEqual {153}
	023 Move X21, [X20]
	024 Compare X21, 0
	025 JumpIfEqual {139}
	026 Move X8, [X20+8]
	027 Compare X8, 0
	028 JumpIfEqual {139}
	029 Move X8, [X20+16]
	030 Compare X8, 0
	031 JumpIfEqual {139}
	032 Move X8, [X20+40]
	033 Compare X8, 0
	034 JumpIfNotEqual {38}
	035 Move X8, [X20+24]
	036 Compare X8, 0
	037 JumpIfEqual {173}
	038 Move X23, 0xF01000
	039 Move X23, [X23+3472]
	040 Move X0, [X23]
	041 Call 0x1C17F10
	042 Move X1, X21
	043 Move X22, X0
	044 Call BigInteger..ctor, X0, X1
	045 Move [X19+40], X22
	046 Move X0, [X23]
	047 Move X21, [X20+8]
	048 Call 0x1C17F10
	049 Move X1, X21
	050 Move X22, X0
	051 Call BigInteger..ctor, X0, X1
	052 Move [X19+48], X22
	053 Move X0, [X23]
	054 Move X21, [X20+16]
	055 Call 0x1C17F10
	056 Move X1, X21
	057 Move X22, X0
	058 Call BigInteger..ctor, X0, X1
	059 Move [X19+56], X22
	060 Move X22, [X20+40]
	061 Compare X22, 0
	062 JumpIfEqual {69}
	063 Move X0, [X23]
	064 Call 0x1C17F10
	065 Move X1, X22
	066 Move X21, X0
	067 Call BigInteger..ctor, X0, X1
	068 Move [X19+64], X21
	069 Move X21, X31
	070 Move [X19+64], X31
	071 Move X22, [X20+24]
	072 Compare X22, 0
	073 JumpIfEqual {80}
	074 Move X0, [X23]
	075 Call 0x1C17F10
	076 Move X1, X22
	077 Move X21, X0
	078 Call BigInteger..ctor, X0, X1
	079 Move [X19+72], X21
	080 Move X0, [X19+56]
	081 Compare X0, 0
	082 JumpIfEqual {175}
	083 Move X2, [X19+40]
	084 Move X1, X21
	085 Call BigInteger.ModPow, X0, X1, X2
	086 Move [X19+72], X0
	087 Move X21, [X20+32]
	088 Compare X21, 0
	089 JumpIfEqual {96}
	090 Move X0, [X23]
	091 Call 0x1C17F10
	092 Move X1, X21
	093 Move X22, X0
	094 Call BigInteger..ctor, X0, X1
	095 Move [X19+80], X22
	096 Move X0, [X23]
	097 Move X21, [X19+40]
	098 Move W8, [X0+224]
	099 Compare W8, 0
	100 JumpIfNotEqual {102}
	101 Call 0x1C17DFC
	102 Move W0, 1
	103 Move W22, 1
	104 Call BigInteger.op_Implicit, X0
	105 Move X1, X0
	106 Move X0, X21
	107 Call BigInteger.op_Subtraction, X0, X1
	108 Move X1, [X19+48]
	109 Call BigInteger.op_Division, X0, X1
	110 Move [X19+80], X0
	111 Move [X19+100], W22
	112 Move X21, [X20+48]
	113 Move X0, [X23]
	114 Compare X21, 0
	115 JumpIfEqual {123}
	116 Call 0x1C17F10
	117 Move X1, X21
	118 Move X22, X0
	119 Call BigInteger..ctor, X0, X1
	120 Move [X19+88], X22
	121 Move W8, [X20+56]
	122 Move [X19+96], W8
	123 Move W8, [X0+224]
	124 Compare W8, 0
	125 JumpIfNotEqual {127}
	126 Call 0x1C17DFC
	127 Move W0, W31
	128 Call BigInteger.op_Implicit, X0
	129 Move [X19+88], X0
	130 Move W8, 1
	131 Move [X19+32], W8
	132 Move X20, [X31+32]
	133 Move X19, [X31+40]
	134 Move X22, [X31+16]
	135 Move X21, [X31+24]
	136 Move X30, [X31+48]
	137 Move X23, [X31+56]
	138 Return 
	139 Move X0, 0xF01000
	140 Move X0, [X0+3816]
	141 Call 0x1C17D08
	142 Move X1, X31
	143 Call Locale.GetText, X0
	144 Move X19, X0
	145 Move X0, 0xF00000
	146 Move X0, [X0+3296]
	147 Call 0x1C17D08
	148 Call 0x1C17F10
	149 Move X1, X19
	150 Move X2, X31
	151 Move X20, X0
	152 Call CryptographicException..ctor, X0, X1
	153 Move X0, 0xF01000
	154 Move X0, [X0+1400]
	155 Call 0x1C17D08
	156 Move X1, X31
	157 Call Locale.GetText, X0
	158 Move X19, X0
	159 Move X0, 0xEFC000
	160 Move X0, [X0+1208]
	161 Call 0x1C17D08
	162 Call 0x1C17F10
	163 Move X1, X19
	164 Move X2, X31
	165 Move X20, X0
	166 Call ObjectDisposedException..ctor, X0, X1
	167 Move X0, 0xF01000
	168 Move X0, [X0+3824]
	169 Call 0x1C17D08
	170 Move X1, X0
	171 Move X0, X20
	172 Call 0x1C17DEC
	173 Move X0, 0xF01000
	174 Move X0, [X0+3832]
	175 Call 0x1C17F20

Method: System.Boolean VerifySignature(System.Byte[] rgbHash, System.Byte[] rgbSignature)

Disassembly:
	0x03221944 LDR X1, [X8 + 0x40]
	0x03221948 BL 0x1C16E00
	0x0322194C CBZ X0, 0x3221CA0
	0x03221950 LDR W8, [X22 + 0x18]
	0x03221954 CBZ W8, 0x3221C98
	0x03221958 STR X19, [X22 + 0x20]
	0x0322195C LDR X0, [X21]
	0x03221960 BL 0x1C16F10
	0x03221964 MOV X1, X20
	0x03221968 MOV X19, X0
	0x0322196C BL 0x3221264
	0x03221970 CBNZ X19, 0x3221C58
	0x03221974 B 0x3221C6C
	0x03221978 LDR X9, [X22 + 0x18]
	0x0322197C CBZ X9, 0x3221C9C
	0x03221980 LDR W10, [X9 + 0x18]
	0x03221984 CMP W8, W10
	0x03221988 B.CS 0x3221C98
	0x0322198C LDR W25, [X20 + 0x10]
	0x03221990 ADD X8, X9, W8, 0x2, SXTW
	0x03221994 LDR W8, [X8 + 0x20]
	0x03221998 MOV W19, W31
	0x0322199C SUB W27, W25, W26
	0x032219A0 TBNZ X8, 0x1F, 0x32219C0
	0x032219A4 MOVZ W9, 0x80000000
	0x032219A8 UBFM W10, W9, 0x1, 0x1F
	0x032219AC ADD W19, W19, 0x1
	0x032219B0 CBZ W10, 0x32219C0
	0x032219B4 AND W11, W8, W9, 0x1
	0x032219B8 MOV W9, W10
	0x032219BC CBZ W11, 0x32219A8
	0x032219C0 ADRP X23, 0xF00000
	0x032219C4 LDR X23, [X23 + 0xD90]
	0x032219C8 LDR X0, [X23]
	0x032219CC BL 0x1C16F10
	0x032219D0 ADD W2, W27, 0x1
	0x032219D4 MOV X21, X0
	0x032219D8 BL 0x32211F0
	0x032219DC LDR X0, [X23]
	0x032219E0 LDR W8, [X0 + 0xE0]
	0x032219E4 CBNZ W8, 0x32219EC
	0x032219E8 BL 0x1C16DFC
	0x032219EC MOV X0, X20
	0x032219F0 MOV W1, W19
	0x032219F4 BL 0x3221E9C
	0x032219F8 CBZ X0, 0x3221C9C
	0x032219FC LDR X24, [X0 + 0x18]
	0x03221A00 MOV X20, X0
	0x03221A04 MOV X0, X22
	0x03221A08 MOV W1, W19
	0x03221A0C BL 0x3221E9C
	0x03221A10 CBZ X0, 0x3221C9C
	0x03221A14 LDR X11, [X0 + 0x18]
	0x03221A18 CBZ X11, 0x3221C9C
	0x03221A1C LDR W8, [X0 + 0x10]
	0x03221A20 LDR X9, [X11 + 0x18]
	0x03221A24 SUB W10, W8, 0x1
	0x03221A28 CMP W10, W9
	0x03221A2C B.CS 0x3221C98
	0x03221A30 SUB W12, W8, 0x2
	0x03221A34 CMP W12, W9
	0x03221A38 B.CS 0x3221C98
	0x03221A3C ADD W13, W25, 0x1
	0x03221A40 SUB W8, W13, W8
	0x03221A44 CMP W8, 0x1
	0x03221A48 B.LT 0x3221BBC
	0x03221A4C CBZ X24, 0x3221C9C
	0x03221A50 ADD X13, X11, W10, 0x2, SXTW
	0x03221A54 ADD X15, X11, W12, 0x2, SXTW
	0x03221A58 ADD W14, W26, 0x1
	0x03221A5C LDR W10, [X24 + 0x18]
	0x03221A60 LDR W12, [X13 + 0x20]
	0x03221A64 LDR W13, [X15 + 0x20]
	0x03221A68 SXTW X14, W14
	0x03221A6C CMP X14, 0x1
	0x03221A70 AND X9, X9, 0x0
	0x03221A74 ADD X11, X11, 0x20
	0x03221A78 CSINC X15, X14, X31, GT
	0x03221A7C MOV W17, W27
	0x03221A80 MOVZ X16, 0x1
	0x03221A84 CMP W25, W10
	0x03221A88 B.CS 0x3221C98
	0x03221A8C SUB W0, W25, 0x1
	0x03221A90 CMP W0, W10
	0x03221A94 B.CS 0x3221C98
	0x03221A98 ADD X4, X24, 0x20
	0x03221A9C LDR W3, [X4, W0, SXTW]
	0x03221AA0 LDR W1, [X4, W25, SXTW]
	0x03221AA4 SUB W2, W25, 0x2
	0x03221AA8 ADD X4, X4, W2, 0x2, SXTW
	0x03221AAC BFM X3, X1, 0x20, 0x1F
	0x03221AB0 UDIV X1, X3, X12
	0x03221AB4 MSUB X3, X1, X12, X3
	0x03221AB8 CMP X1, X16
	0x03221ABC B.EQ 0x3221ADC
	0x03221AC0 CMP W2, W10
	0x03221AC4 B.CS 0x3221C98
	0x03221AC8 LDR W5, [X4]
	0x03221ACC MUL X6, X1, X13
	0x03221AD0 BFM X5, X3, 0x20, 0x1F
	0x03221AD4 CMP X6, X5
	0x03221AD8 B.LS 0x3221AEC
	0x03221ADC ADD X3, X3, X12
	0x03221AE0 UBFM X5, X3, 0x20, 0x3F
	0x03221AE4 SUB X1, X1, 0x1
	0x03221AE8 CBZ X5, 0x3221AB8
	0x03221AEC MOV X2, X31
	0x03221AF0 MOV X3, X31
	0x03221AF4 AND X4, X1, 0x0
	0x03221AF8 CMP X9, X2
	0x03221AFC B.EQ 0x3221C98
	0x03221B00 ADD X5, X17, X2
	0x03221B04 CMP W5, W10
	0x03221B08 B.CS 0x3221C98
	0x03221B0C LDR W6, [X11, X2, LSL #2]
	0x03221B10 ADD X5, X24, W5, 0x2, SXTW
	0x03221B14 LDR W7, [X5 + 0x20]
	0x03221B18 ADD X2, X2, 0x1
	0x03221B1C MADD X3, X4, X6, X3
	0x03221B20 SUBS W6, W7, W3
	0x03221B24 UBFM X3, X3, 0x20, 0x3F
	0x03221B28 CINC X3, X3, CC
	0x03221B2C CMP X2, X14
	0x03221B30 STR W6, [X5 + 0x20]
	0x03221B34 B.LT 0x3221AF8
	0x03221B38 CBZ X3, 0x3221B84
	0x03221B3C MOV X2, X31
	0x03221B40 MOV X3, X31
	0x03221B44 SUB W1, W1, 0x1
	0x03221B48 ADD X4, X17, X2
	0x03221B4C CMP W4, W10
	0x03221B50 B.CS 0x3221C98
	0x03221B54 CMP X9, X2
	0x03221B58 B.EQ 0x3221C98
	0x03221B5C ADD X4, X24, W4, 0x2, SXTW
	0x03221B60 LDR W5, [X4 + 0x20]!
	0x03221B64 LDR W6, [X11, X2, LSL #2]
	0x03221B68 ADD X2, X2, 0x1
	0x03221B6C CMP X15, X2
	0x03221B70 ADD X3, X3, X5
	0x03221B74 ADD X3, X3, X6
	0x03221B78 STR W3, [X4]
	0x03221B7C UBFM X3, X3, 0x20, 0x3F
	0x03221B80 B.NE 0x3221B48
	0x03221B84 CBZ X21, 0x3221C9C
	0x03221B88 LDR X2, [X21 + 0x18]
	0x03221B8C CBZ X2, 0x3221C9C
	0x03221B90 LDR W3, [X2 + 0x18]
	0x03221B94 CMP W17, W3
	0x03221B98 B.CS 0x3221C98
	0x03221B9C SUB W8, W8, 0x1
	0x03221BA0 ADD X2, X2, W17, 0x2, SXTW
	0x03221BA4 SUB X17, X17, 0x1
	0x03221BA8 CMP W8, 0x0
	0x03221BAC MOV W25, W0
	0x03221BB0 STR W1, [X2 + 0x20]
	0x03221BB4 B.GT 0x3221A84
	0x03221BB8 B 0x3221BC0
	0x03221BBC CBZ X21, 0x3221C9C
	0x03221BC0 MOV X0, X21
	0x03221BC4 BL 0x32213F8
	0x03221BC8 MOV X0, X20
	0x03221BCC BL 0x32213F8
	0x03221BD0 ADRP X8, 0xF00000
	0x03221BD4 LDR X8, [X8 + 0xF38]
	0x03221BD8 MOVZ W1, 0x2
	0x03221BDC LDR X0, [X8]
	0x03221BE0 BL 0x1C16D6C
	0x03221BE4 CBZ X0, 0x3221C9C
	0x03221BE8 LDR X8, [X0]
	0x03221BEC MOV X22, X0
	0x03221BF0 MOV X0, X21
	0x03221BF4 LDR X1, [X8 + 0x40]
	0x03221BF8 BL 0x1C16E00
	0x03221BFC CBZ X0, 0x3221CA0
	0x03221C00 LDR W8, [X22 + 0x18]
	0x03221C04 CBZ W8, 0x3221C98
	0x03221C08 LDR X8, [X22]
	0x03221C0C STR X21, [X22 + 0x20]
	0x03221C10 MOV X0, X20
	0x03221C14 LDR X1, [X8 + 0x40]
	0x03221C18 BL 0x1C16E00
	0x03221C1C CBZ X0, 0x3221CA0
	0x03221C20 LDR W8, [X22 + 0x18]
	0x03221C24 CMP W8, 0x1
	0x03221C28 B.LS 0x3221C98
	0x03221C2C STR X20, [X22 + 0x28]
	0x03221C30 CBZ W19, 0x3221C7C
	0x03221C34 LDR X0, [X23]
	0x03221C38 LDR W8, [X0 + 0xE0]
	0x03221C3C CBNZ W8, 0x3221C44
	0x03221C40 BL 0x1C16DFC
	0x03221C44 MOV X0, X20
	0x03221C48 MOV W1, W19
	0x03221C4C BL 0x3222084
	0x03221C50 MOV X19, X0
	0x03221C54 CBZ X0, 0x3221C6C
	0x03221C58 LDR X8, [X22]
	0x03221C5C MOV X0, X19
	0x03221C60 LDR X1, [X8 + 0x40]
	0x03221C64 BL 0x1C16E00
	0x03221C68 CBZ X0, 0x3221CA0
	0x03221C6C LDR W8, [X22 + 0x18]
	0x03221C70 CMP W8, 0x1
	0x03221C74 B.LS 0x3221C98
	0x03221C78 STR X19, [X22 + 0x28]
	0x03221C7C MOV X0, X22
	0x03221C80 LDP X20, X19, [X31 + 0x40]
	0x03221C84 LDP X22, X21, [X31 + 0x30]
	0x03221C88 LDP X24, X23, [X31 + 0x20]
	0x03221C8C LDP X26, X25, [X31 + 0x10]
	0x03221C90 LDP X30, X27, [X31], #0x50
	0x03221C94 RET
	0x03221C98 BL 0x1C16F28
	0x03221C9C BL 0x1C16F20
	0x03221CA0 BL 0x1C16F44
	0x03221CA4 MOV X1, X31
	0x03221CA8 BL 0x1C16DEC
	0x03221CAC CBZ X0, 0x3221CC4
	0x03221CB0 LDR W8, [X0 + 0x18]
	0x03221CB4 CBZ W8, 0x3221CC4
	0x03221CB8 ADD X8, X0, 0x20
	0x03221CBC CBNZ X3, 0x3221CCC
	0x03221CC0 B 0x3221CE0
	0x03221CC4 MOV X8, X31
	0x03221CC8 CBZ X3, 0x3221CE0
	0x03221CCC LDR W9, [X3 + 0x18]
	0x03221CD0 CBZ W9, 0x3221CE0
	0x03221CD4 ADD X14, X3, 0x20
	0x03221CD8 CBNZ X6, 0x3221CE8
	0x03221CDC B 0x3221CF8
	0x03221CE0 MOV X14, X31
	0x03221CE4 CBZ X6, 0x3221CF8
	0x03221CE8 LDR W9, [X6 + 0x18]
	0x03221CEC CBZ W9, 0x3221CF8
	0x03221CF0 ADD X11, X6, 0x20
	0x03221CF4 B 0x3221CFC
	0x03221CF8 MOV X11, X31
	0x03221CFC ADD X8, X8, W1, 0x2, UXTW
	0x03221D00 ADD X9, X8, W2, 0x2, UXTW
	0x03221D04 CMP X8, X9
	0x03221D08 B.CS 0x3221DA4
	0x03221D0C MOV W12, W4
	0x03221D10 ADD X10, X14, W4, 0x2, UXTW
	0x03221D14 UBFM X15, X12, 0x3E, 0x3D
	0x03221D18 ADD X11, X11, W7, 0x2, UXTW
	0x03221D1C ADD X12, X10, W5, 0x2, UXTW
	0x03221D20 ADD X13, X10, 0x4
	0x03221D24 ADD X14, X14, X15
	0x03221D28 LDR W15, [X8]
	0x03221D2C CBZ W15, 0x3221D94
	0x03221D30 CMP X10, X12
	0x03221D34 B.CS 0x3221D94
	0x03221D38 LDR W17, [X10]
	0x03221D3C LDR W0, [X11]
	0x03221D40 MOV X16, X11
	0x03221D44 CMP X13, X12
	0x03221D48 MADD X15, X17, X15, X0
	0x03221D4C STR W15, [X16], #0x4
	0x03221D50 UBFM X15, X15, 0x20, 0x3F
	0x03221D54 B.CS 0x3221D8C
	0x03221D58 MOVZ W16, 0x4
	0x03221D5C LDR W0, [X11, X16, LSL]
	0x03221D60 LDR W17, [X8]
	0x03221D64 LDR W1, [X14, X16, LSL]
	0x03221D68 ADD X15, X15, X0
	0x03221D6C MADD X15, X1, X17, X15
	0x03221D70 STR W15, [X11, X16, LSL]
	0x03221D74 ADD X16, X16, 0x4
	0x03221D78 ADD X17, X14, X16
	0x03221D7C CMP X17, X12
	0x03221D80 UBFM X15, X15, 0x20, 0x3F
	0x03221D84 B.CC 0x3221D5C
	0x03221D88 ADD X16, X11, X16
	0x03221D8C CBZ X15, 0x3221D94
	0x03221D90 STR W15, [X16]
	0x03221D94 ADD X8, X8, 0x4
	0x03221D98 CMP X8, X9
	0x03221D9C ADD X11, X11, 0x4
	0x03221DA0 B.CC 0x3221D28
	0x03221DA4 RET
	0x03221DA8 STR X30, [X31 - 0x30]!
	0x03221DAC STP X22, X21, [X31 + 0x10]
	0x03221DB0 STP X20, X19, [X31 + 0x20]
	0x03221DB4 ADRP X20, 0x11BB000
	0x03221DB8 LDRB W8, [X20 + 0x33D]
	0x03221DBC MOV W21, W1
	0x03221DC0 MOV X19, X0
	0x03221DC4 TBNZ X8, 0x0, 0x3221DDC
	0x03221DC8 ADRP X0, 0xF00000
	0x03221DCC LDR X0, [X0 + 0xD90]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x11BC000
	009 Move W8, [X21+788]
	010 Move X22, X2
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF01000
	018 Move X0, [X0+3472]
	019 Call 0x1C17CF4
	020 Move X0, 0xED3000
	021 Move X0, [X0+1560]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+788], W8
	025 Move W8, [X19+33]
	026 Compare W8, 0
	027 JumpIfNotEqual {179}
	028 Compare X20, 0
	029 JumpIfEqual {199}
	030 Compare X22, 0
	031 JumpIfEqual {206}
	032 Move W8, [X20+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move W8, [X22+24]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move W8, [X19+32]
	037 Compare W8, 0
	038 JumpIfEqual {169}
	039 Move X24, 0xF01000
	040 Move X24, [X24+3472]
	041 Move X0, [X24]
	042 Call 0x1C17F10
	043 Move X21, X0
	044 Move X1, X20
	045 Call BigInteger..ctor, X0, X1
	046 Move X8, 0xED3000
	047 Move X8, [X8+1560]
	048 Move X0, [X8]
	049 Move W1, 20
	050 Call 0x1C17D6C
	051 Move X23, X0
	052 Move W4, 20
	053 Move X0, X22
	054 Move W1, W31
	055 Move X2, X23
	056 Move W3, W31
	057 Move X5, X31
	058 Call Array.Copy, X0, X1, X2, X3, X4
	059 Move X0, [X24]
	060 Call 0x1C17F10
	061 Move X20, X0
	062 Move X1, X23
	063 Call BigInteger..ctor, X0, X1
	064 Move W1, 20
	065 Move W4, 20
	066 Move X0, X22
	067 Move X2, X23
	068 Move W3, W31
	069 Move X5, X31
	070 Call Array.Copy, X0, X1, X2, X3, X4
	071 Move X0, [X24]
	072 Call 0x1C17F10
	073 Move X22, X0
	074 Move X1, X23
	075 Call BigInteger..ctor, X0, X1
	076 Move X0, [X24]
	077 Move W8, [X0+224]
	078 Compare W8, 0
	079 JumpIfNotEqual {81}
	080 Call 0x1C17DFC
	081 Move W0, W31
	082 Call BigInteger.op_Implicit, X0
	083 Move X1, X0
	084 Move X0, X20
	085 Call Kernel.Compare, X0, X1
	086 Move TEMP, X0
	087 And TEMP, TEMP, -2147483648
	088 Compare TEMP, -2147483648
	089 JumpIfEqual {169}
	090 Move X0, [X24]
	091 Move X23, [X19+48]
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1C17DFC
	096 Move X0, X23
	097 Move X1, X20
	098 Call Kernel.Compare, X0, X1
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Move X0, [X24]
	101 Move W8, [X0+224]
	102 Compare W8, 0
	103 JumpIfNotEqual {105}
	104 Call 0x1C17DFC
	105 Move W0, W31
	106 Call BigInteger.op_Implicit, X0
	107 Move X1, X0
	108 Move X0, X22
	109 Call Kernel.Compare, X0, X1
	110 Move TEMP, X0
	111 And TEMP, TEMP, -2147483648
	112 Compare TEMP, -2147483648
	113 JumpIfEqual {169}
	114 Move X0, [X24]
	115 Move X23, [X19+48]
	116 Move W8, [X0+224]
	117 Compare W8, 0
	118 JumpIfNotEqual {120}
	119 Call 0x1C17DFC
	120 Move X0, X23
	121 Move X1, X22
	122 Call Kernel.Compare, X0, X1
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Compare X22, 0
	125 JumpIfEqual {232}
	126 Move X1, [X19+48]
	127 Move X0, X22
	128 Call Kernel.modInverse, X0, X1
	129 Move X22, X0
	130 Move X0, [X24]
	131 Move W8, [X0+224]
	132 Compare W8, 0
	133 JumpIfNotEqual {135}
	134 Call 0x1C17DFC
	135 Move X0, X21
	136 Move X1, X22
	137 Call BigInteger.op_Multiply, X0, X1
	138 Move X1, [X19+48]
	139 Call BigInteger.op_Modulus, X0, X1
	140 Move X21, X0
	141 Move X0, X20
	142 Move X1, X22
	143 Call BigInteger.op_Multiply, X0, X1
	144 Move X1, [X19+48]
	145 Call BigInteger.op_Modulus, X0, X1
	146 Move X22, X0
	147 Move X0, [X19+56]
	148 Compare X0, 0
	149 JumpIfEqual {233}
	150 Move X2, [X19+40]
	151 Move X1, X21
	152 Call BigInteger.ModPow, X0, X1, X2
	153 Move X21, X0
	154 Move X0, [X19+72]
	155 Compare X0, 0
	156 JumpIfEqual {234}
	157 Move X2, [X19+40]
	158 Move X1, X22
	159 Call BigInteger.ModPow, X0, X1, X2
	160 Move X1, X0
	161 Move X0, X21
	162 Call BigInteger.op_Multiply, X0, X1
	163 Move X1, [X19+40]
	164 Call BigInteger.op_Modulus, X0, X1
	165 Move X1, [X19+48]
	166 Call BigInteger.op_Modulus, X0, X1
	167 Move X1, X20
	168 Call BigInteger.op_Equality, X0, X1
	169 Move W0, W31
	170 Move X20, [X31+48]
	171 Move X19, [X31+56]
	172 Move X22, [X31+32]
	173 Move X21, [X31+40]
	174 Move X24, [X31+16]
	175 Move X23, [X31+24]
	176 And W0, W0, 1
	177 Move X30, [X31+64]
	178 Return X0
	179 Move X0, 0xF01000
	180 Move X0, [X0+1400]
	181 Call 0x1C17D08
	182 Move X1, X31
	183 Call Locale.GetText, X0
	184 Move X19, X0
	185 Move X0, 0xEFC000
	186 Move X0, [X0+1208]
	187 Call 0x1C17D08
	188 Call 0x1C17F10
	189 Move X1, X19
	190 Move X2, X31
	191 Move X20, X0
	192 Call ObjectDisposedException..ctor, X0, X1
	193 Move X0, 0xF01000
	194 Move X0, [X0+3840]
	195 Call 0x1C17D08
	196 Move X1, X0
	197 Move X0, X20
	198 Call 0x1C17DEC
	199 Move X0, 0xED8000
	200 Move X0, [X0+1320]
	201 Call 0x1C17D08
	202 Call 0x1C17F10
	203 Move X19, X0
	204 Move X0, 0xF01000
	205 Move X0, [X0+3848]
	206 Move X0, 0xED8000
	207 Move X0, [X0+1320]
	208 Call 0x1C17D08
	209 Call 0x1C17F10
	210 Move X19, X0
	211 Move X0, 0xF01000
	212 Move X0, [X0+3856]
	213 Call 0x1C17D08
	214 Move X1, X0
	215 Move X0, X19
	216 Move X2, X31
	217 Call ArgumentNullException..ctor, X0, X1
	218 Move X0, 0xF00000
	219 Move X0, [X0+3296]
	220 Call 0x1C17D08
	221 Call 0x1C17F10
	222 Move X19, X0
	223 Move X0, 0xF01000
	224 Move X0, [X0+3864]
	225 Move X0, 0xF00000
	226 Move X0, [X0+3296]
	227 Call 0x1C17D08
	228 Call 0x1C17F10
	229 Move X19, X0
	230 Move X0, 0xF01000
	231 Move X0, [X0+3872]
	232 Call 0x1C17F20
	233 Call 0x1C17F20
	234 Call 0x1C17F20
	235 Move X19, X0
	236 NotImplemented "Instruction CMP not yet implemented."
	237 Move X0, X19
	238 Call 0x3EB2AD0
	239 Move X19, X0
	240 Move X0, 0xED9000
	241 Move X0, [X0+3264]
	242 Call 0x1C17D08
	243 Move X8, [X19]
	244 Move X1, [X8]
	245 Call 0x1C18270
	246 Move TEMP, X0
	247 And TEMP, TEMP, 1
	248 Compare TEMP, 1
	249 JumpIfNotEqual {269}
	250 Call 0x3EB2AE0
	251 Move X0, 0xF00000
	252 Move X0, [X0+3296]
	253 Call 0x1C17D08
	254 Call 0x1C17F10
	255 Move X19, X0
	256 Move X0, 0xF01000
	257 Move X0, [X0+3880]
	258 Call 0x1C17D08
	259 Move X1, X0
	260 Move X0, X19
	261 Move X2, X31
	262 Call CryptographicException..ctor, X0, X1
	263 Move X0, 0xF01000
	264 Move X0, [X0+3840]
	265 Call 0x1C17D08
	266 Move X1, X0
	267 Move X0, X19
	268 Call 0x1C17DEC
	269 Move W0, 8
	270 Call 0x3EB2AF0
	271 Move X8, [X19]
	272 Move [X0], X8
	273 Move X1, 0xC94000
	274 Add X1, X1, 3672
	275 Move X2, X31
	276 Call 0x3EB2B00
	277 Move X19, X0
	278 Call 0x3EB2AE0
	279 Move X0, X19
	280 Call 0x1D2D690
	281 Call 0x1991590

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x03221DD0 BL 0x1C16CF4
	0x03221DD4 MOVZ W8, 0x1
	0x03221DD8 STRB W8, [X20 + 0x33D]
	0x03221DDC CBZ X19, 0x3221E90
	0x03221DE0 ADRP X8, 0xF00000
	0x03221DE4 LDR X8, [X8 + 0xD90]
	0x03221DE8 LDR W22, [X19 + 0x10]
	0x03221DEC LDR X0, [X8]
	0x03221DF0 BL 0x1C16F10
	0x03221DF4 ADD W2, W22, 0x1
	0x03221DF8 MOV X20, X0
	0x03221DFC BL 0x32211F0
	0x03221E00 LDR X12, [X19 + 0x18]
	0x03221E04 CBZ X12, 0x3221E90
	0x03221E08 LDR W10, [X12 + 0x18]
	0x03221E0C MOV X8, X31
	0x03221E10 MOV X9, X31
	0x03221E14 MOV W11, W21
	0x03221E18 ADD X12, X12, 0x20
	0x03221E1C CMP X8, X10
	0x03221E20 B.CS 0x3221E94
	0x03221E24 CBZ X20, 0x3221E90
	0x03221E28 LDR X13, [X20 + 0x18]
	0x03221E2C CBZ X13, 0x3221E90
	0x03221E30 LDR W14, [X13 + 0x18]
	0x03221E34 CMP X8, X14
	0x03221E38 B.CS 0x3221E94
	0x03221E3C LDR W15, [X12, X8, LSL #2]
	0x03221E40 NOP
	0x03221E44 MADD X9, X15, X11, X9
	0x03221E48 ADD X15, X13, X8, 0x2, LSL
	0x03221E4C STR W9, [X15 + 0x20]
	0x03221E50 LDR W15, [X19 + 0x10]
	0x03221E54 ADD X8, X8, 0x1
	0x03221E58 UBFM X9, X9, 0x20, 0x3F
	0x03221E5C CMP X8, X15
	0x03221E60 B.CC 0x3221E1C
	0x03221E64 CMP W8, W14
	0x03221E68 B.CS 0x3221E94
	0x03221E6C ADD X8, X13, X8, 0x2, LSL
	0x03221E70 MOV X0, X20
	0x03221E74 STR W9, [X8 + 0x20]
	0x03221E78 BL 0x32213F8
	0x03221E7C MOV X0, X20
	0x03221E80 LDP X20, X19, [X31 + 0x20]
	0x03221E84 LDP X22, X21, [X31 + 0x10]
	0x03221E88 LDR X30, [X31], #0x30
	0x03221E8C RET
	0x03221E90 BL 0x1C16F20
	0x03221E94 BL 0x1C16F28
	0x03221E98 B 0x3221E9C
	0x03221E9C STR X30, [X31 - 0x40]!
	0x03221EA0 STP X24, X23, [X31 + 0x10]
	0x03221EA4 STP X22, X21, [X31 + 0x20]
	0x03221EA8 STP X20, X19, [X31 + 0x30]
	0x03221EAC ADRP X19, 0x11BB000
	0x03221EB0 LDRB W8, [X19 + 0x33B]
	0x03221EB4 MOV W21, W1
	0x03221EB8 MOV X20, X0
	0x03221EBC TBNZ X8, 0x0, 0x3221EE0
	0x03221EC0 ADRP X0, 0xF00000
	0x03221EC4 LDR X0, [X0 + 0xD90]
	0x03221EC8 BL 0x1C16CF4
	0x03221ECC ADRP X0, 0xF00000
	0x03221ED0 LDR X0, [X0 + 0xF40]
	0x03221ED4 BL 0x1C16CF4
	0x03221ED8 MOVZ W8, 0x1
	0x03221EDC STRB W8, [X19 + 0x33B]
	0x03221EE0 ADRP X8, 0xF00000
	0x03221EE4 LDR X8, [X8 + 0xD90]
	0x03221EE8 CBZ W21, 0x3221F9C
	0x03221EEC CBZ X20, 0x3222078
	0x03221EF0 LDR X0, [X8]
	0x03221EF4 LDR W24, [X20 + 0x10]
	0x03221EF8 SBFM W22, W21, 0x5, 0x1F
	0x03221EFC AND W23, W21, 0x1F
	0x03221F00 BL 0x1C16F10
	0x03221F04 ADD W8, W22, W24
	0x03221F08 ADD W2, W8, 0x1
	0x03221F0C MOV X19, X0
	0x03221F10 BL 0x32211F0
	0x03221F14 LDR W8, [X20 + 0x10]
	0x03221F18 CBZ W23, 0x3221FC0
	0x03221F1C CBZ W8, 0x322202C
	0x03221F20 LDR X12, [X20 + 0x18]
	0x03221F24 CBZ X12, 0x3222078
	0x03221F28 LDR W11, [X12 + 0x18]
	0x03221F2C SXTW X14, W22
	0x03221F30 SUB W13, W31, W21
	0x03221F34 UBFM X14, X14, 0x3E, 0x3D
	0x03221F38 MOV X10, X31
	0x03221F3C MOV W9, W31
	0x03221F40 ADD X12, X12, 0x20
	0x03221F44 AND W13, W13, 0x1F
	0x03221F48 ADD X14, X14, 0x20
	0x03221F4C MOV W15, W22
	0x03221F50 CMP X10, X11
	0x03221F54 B.CS 0x322207C
	0x03221F58 CBZ X19, 0x3222078
	0x03221F5C LDR X16, [X19 + 0x18]
	0x03221F60 CBZ X16, 0x3222078
	0x03221F64 LDR W17, [X16 + 0x18]
	0x03221F68 ADD W0, W15, W10
	0x03221F6C CMP W0, W17
	0x03221F70 B.CS 0x322207C
	0x03221F74 LDR W17, [X12, X10, LSL #2]
	0x03221F78 ADD X16, X16, X14
	0x03221F7C LSLV W0, W17, W23
	0x03221F80 ORR W9, W0, W9, 0x0
	0x03221F84 STR W9, [X16, X10, LSL #2]
	0x03221F88 ADD X10, X10, 0x1
	0x03221F8C CMP X8, X10
	0x03221F90 LSRV W9, W17, W13
	0x03221F94 B.NE 0x3221F50
	0x03221F98 B 0x3222038
	0x03221F9C CBZ X20, 0x3222078

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11BC000
	007 Move W8, [X21+789]
	008 Move W20, W1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF01000
	015 Move X0, [X0+3472]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+789], W8
	019 Move W8, [X19+33]
	020 Compare W8, 0
	021 JumpIfNotEqual {154}
	022 Move X22, 0xF01000
	023 Move X22, [X22+3472]
	024 Move X21, [X19+64]
	025 Move X0, [X22]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X21
	031 Move X1, X31
	032 Call BigInteger.op_Inequality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {42}
	037 Move X0, [X19+64]
	038 Compare X0, 0
	039 JumpIfEqual {162}
	040 Call BigInteger.Clear, X0
	041 Move [X19+64], X31
	042 Move TEMP, X20
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {154}
	046 Move X0, [X22]
	047 Move X20, [X19+40]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Move X0, X20
	053 Move X1, X31
	054 Call BigInteger.op_Inequality, X0, X1
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {64}
	059 Move X0, [X19+40]
	060 Compare X0, 0
	061 JumpIfEqual {162}
	062 Call BigInteger.Clear, X0
	063 Move [X19+40], X31
	064 Move X0, [X22]
	065 Move X20, [X19+48]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move X0, X20
	071 Move X1, X31
	072 Call BigInteger.op_Inequality, X0, X1
	073 Move TEMP, X0
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {82}
	077 Move X0, [X19+48]
	078 Compare X0, 0
	079 JumpIfEqual {162}
	080 Call BigInteger.Clear, X0
	081 Move [X19+48], X31
	082 Move X0, [X22]
	083 Move X20, [X19+56]
	084 Move W8, [X0+224]
	085 Compare W8, 0
	086 JumpIfNotEqual {88}
	087 Call 0x1C17DFC
	088 Move X0, X20
	089 Move X1, X31
	090 Call BigInteger.op_Inequality, X0, X1
	091 Move TEMP, X0
	092 And TEMP, TEMP, 1
	093 Compare TEMP, 1
	094 JumpIfNotEqual {100}
	095 Move X0, [X19+56]
	096 Compare X0, 0
	097 JumpIfEqual {162}
	098 Call BigInteger.Clear, X0
	099 Move [X19+56], X31
	100 Move X0, [X22]
	101 Move X20, [X19+80]
	102 Move W8, [X0+224]
	103 Compare W8, 0
	104 JumpIfNotEqual {106}
	105 Call 0x1C17DFC
	106 Move X0, X20
	107 Move X1, X31
	108 Call BigInteger.op_Inequality, X0, X1
	109 Move TEMP, X0
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfNotEqual {118}
	113 Move X0, [X19+80]
	114 Compare X0, 0
	115 JumpIfEqual {162}
	116 Call BigInteger.Clear, X0
	117 Move [X19+80], X31
	118 Move X0, [X22]
	119 Move X20, [X19+88]
	120 Move W8, [X0+224]
	121 Compare W8, 0
	122 JumpIfNotEqual {124}
	123 Call 0x1C17DFC
	124 Move X0, X20
	125 Move X1, X31
	126 Call BigInteger.op_Inequality, X0, X1
	127 Move TEMP, X0
	128 And TEMP, TEMP, 1
	129 Compare TEMP, 1
	130 JumpIfNotEqual {136}
	131 Move X0, [X19+88]
	132 Compare X0, 0
	133 JumpIfEqual {162}
	134 Call BigInteger.Clear, X0
	135 Move [X19+88], X31
	136 Move X0, [X22]
	137 Move X20, [X19+72]
	138 Move W8, [X0+224]
	139 Compare W8, 0
	140 JumpIfNotEqual {142}
	141 Call 0x1C17DFC
	142 Move X0, X20
	143 Move X1, X31
	144 Call BigInteger.op_Inequality, X0, X1
	145 Move TEMP, X0
	146 And TEMP, TEMP, 1
	147 Compare TEMP, 1
	148 JumpIfNotEqual {154}
	149 Move X0, [X19+72]
	150 Compare X0, 0
	151 JumpIfEqual {162}
	152 Call BigInteger.Clear, X0
	153 Move [X19+72], X31
	154 Move W8, 1
	155 Move [X19+33], W8
	156 Move X20, [X31+32]
	157 Move X19, [X31+40]
	158 Move X22, [X31+16]
	159 Move X21, [X31+24]
	160 Move X30, [X31+48]
	161 Return 
	162 Call 0x1C17F20

Method: System.Void add_KeyGenerated(Mono.Security.Cryptography.DSAManaged/KeyGeneratedEventHandler value)

Disassembly:
	0x03221FA0 LDR X0, [X8]
	0x03221FA4 LDR W21, [X20 + 0x10]
	0x03221FA8 BL 0x1C16F10
	0x03221FAC ADD W2, W21, 0x1
	0x03221FB0 MOV X1, X20
	0x03221FB4 MOV X19, X0
	0x03221FB8 BL 0x3221324
	0x03221FBC B 0x3222060
	0x03221FC0 CBZ W8, 0x3222024
	0x03221FC4 CBZ X19, 0x3222078
	0x03221FC8 MOV W11, W22
	0x03221FCC LDR X10, [X19 + 0x18]
	0x03221FD0 SXTW X13, W11
	0x03221FD4 LDR X11, [X20 + 0x18]
	0x03221FD8 MOV X9, X31
	0x03221FDC ADD X13, X10, X13, 0x2, LSL
	0x03221FE0 MOV W12, W22
	0x03221FE4 ADD X13, X13, 0x20
	0x03221FE8 ADD X14, X11, 0x20
	0x03221FEC CBZ X11, 0x3222078
	0x03221FF0 LDR W15, [X11 + 0x18]
	0x03221FF4 CMP X9, X15
	0x03221FF8 B.CS 0x322207C
	0x03221FFC CBZ X10, 0x3222078
	0x03222000 LDR W15, [X10 + 0x18]
	0x03222004 ADD W16, W12, W9
	0x03222008 CMP W16, W15
	0x0322200C B.CS 0x322207C
	0x03222010 LDR W15, [X14, X9, LSL #2]
	0x03222014 STR W15, [X13, X9, LSL #2]
	0x03222018 ADD X9, X9, 0x1
	0x0322201C CMP X8, X9
	0x03222020 B.NE 0x3221FEC
	0x03222024 CBNZ X19, 0x3222058
	0x03222028 B 0x3222078
	0x0322202C CBZ X19, 0x3222078
	0x03222030 MOV X8, X31
	0x03222034 MOV W9, W31
	0x03222038 LDR X10, [X19 + 0x18]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11BC000
	007 Move W8, [X21+790]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF01000
	015 Move X0, [X0+3888]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+790], W8
	019 Move X22, 0xF01000
	020 Add X20, X20, 112
	021 Move X21, [X20]
	022 Move X22, [X22+3888]
	023 Move X0, X21
	024 Move X1, X19
	025 Move X2, X31
	026 Call Delegate.Combine, X0, X1
	027 Move X8, X0
	028 Compare X0, 0
	029 JumpIfEqual {33}
	030 Move X1, [X22]
	031 Move X9, [X8]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X0, X20
	034 Move X1, X8
	035 Move X2, X21
	036 Call 0x1C25138
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X21, X0
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Return 
	045 Move X0, X8
	046 Call 0x1C181E0

Method: System.Void remove_KeyGenerated(Mono.Security.Cryptography.DSAManaged/KeyGeneratedEventHandler value)

Disassembly:
	0x0322203C CBZ X10, 0x3222078
	0x03222040 LDR W11, [X10 + 0x18]
	0x03222044 ADD X8, X8, W22, SXTW
	0x03222048 CMP W8, W11
	0x0322204C B.CS 0x322207C
	0x03222050 ADD X8, X10, X8, 0x2, LSL
	0x03222054 STR W9, [X8 + 0x20]
	0x03222058 MOV X0, X19
	0x0322205C BL 0x32213F8
	0x03222060 MOV X0, X19
	0x03222064 LDP X20, X19, [X31 + 0x30]
	0x03222068 LDP X22, X21, [X31 + 0x20]
	0x0322206C LDP X24, X23, [X31 + 0x10]
	0x03222070 LDR X30, [X31], #0x40
	0x03222074 RET
	0x03222078 BL 0x1C16F20
	0x0322207C BL 0x1C16F28
	0x03222080 B 0x3222084
	0x03222084 STP X30, X23, [X31 - 0x30]!
	0x03222088 STP X22, X21, [X31 + 0x10]
	0x0322208C STP X20, X19, [X31 + 0x20]
	0x03222090 ADRP X19, 0x11BA000
	0x03222094 LDRB W8, [X19 + 0x33C]
	0x03222098 MOV W20, W1
	0x0322209C MOV X21, X0
	0x032220A0 TBNZ X8, 0x0, 0x32220C4
	0x032220A4 ADRP X0, 0xEFF000
	0x032220A8 LDR X0, [X0 + 0xD90]
	0x032220AC BL 0x1C16CF4
	0x032220B0 ADRP X0, 0xEFF000
	0x032220B4 LDR X0, [X0 + 0xF48]
	0x032220B8 BL 0x1C16CF4
	0x032220BC MOVZ W8, 0x1
	0x032220C0 STRB W8, [X19 + 0x33C]
	0x032220C4 ADRP X8, 0xEFF000
	0x032220C8 LDR X8, [X8 + 0xD90]
	0x032220CC CBZ W20, 0x3222178
	0x032220D0 CBZ X21, 0x32221F8
	0x032220D4 LDR X0, [X8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11BB000
	007 Move W8, [X21+791]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF00000
	015 Move X0, [X0+3888]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+791], W8
	019 Move X22, 0xF00000
	020 Add X20, X20, 112
	021 Move X21, [X20]
	022 Move X22, [X22+3888]
	023 Move X0, X21
	024 Move X1, X19
	025 Move X2, X31
	026 Call Delegate.Remove, X0, X1
	027 Move X8, X0
	028 Compare X0, 0
	029 JumpIfEqual {33}
	030 Move X1, [X22]
	031 Move X9, [X8]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X0, X20
	034 Move X1, X8
	035 Move X2, X21
	036 Call 0x1C25138
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X21, X0
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Return 
	045 Move X0, X8
	046 Call 0x1C181E0

