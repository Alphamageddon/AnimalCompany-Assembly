Type: Mono.Security.Cryptography.KeyPairPersistence

Method: System.Void .ctor(System.Security.Cryptography.CspParameters parameters)

Disassembly:
	0x03218CF4 STP X20, X19, [X31 + 0x20]
	0x03218CF8 ADRP X21, 0x11C4000

ISIL:
	001 Move X2, X31

Method: System.Void .ctor(System.Security.Cryptography.CspParameters parameters, System.String keyPair)

Disassembly:
	0x03218CFC ADRP X22, 0xF09000
	0x03218D00 LDRB W8, [X21 + 0x2E7]
	0x03218D04 LDR X22, [X22 + 0xCF0]
	0x03218D08 MOV X20, X1
	0x03218D0C MOV X19, X0
	0x03218D10 TBNZ X8, 0x0, 0x3218D40
	0x03218D14 ADRP X0, 0xF09000
	0x03218D18 LDR X0, [X0 + 0xCF0]
	0x03218D1C BL 0x1C16CF4
	0x03218D20 ADRP X0, 0xF09000
	0x03218D24 LDR X0, [X0 + 0xCF8]
	0x03218D28 BL 0x1C16CF4
	0x03218D2C ADRP X0, 0xF09000
	0x03218D30 LDR X0, [X0 + 0xD00]
	0x03218D34 BL 0x1C16CF4
	0x03218D38 MOVZ W8, 0x1
	0x03218D3C STRB W8, [X21 + 0x2E7]
	0x03218D40 LDR X0, [X22]
	0x03218D44 BL 0x1C16F10
	0x03218D48 MOV X21, X0
	0x03218D4C BL 0x320B294
	0x03218D50 CBZ X21, 0x3218E04
	0x03218D54 MOV X0, X21
	0x03218D58 MOV X1, X20
	0x03218D5C BL 0x320B400
	0x03218D60 LDR X20, [X21 + 0x68]
	0x03218D64 CBZ X20, 0x3218E04
	0x03218D68 ADRP X8, 0xF09000
	0x03218D6C LDR X8, [X8 + 0xCF8]
	0x03218D70 LDR X0, [X20 + 0x18]
	0x03218D74 MOV X2, X31
	0x03218D78 LDR X1, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, X1
	006 Move X1, X31
	007 Move X19, X2
	008 Move X20, X0
	009 Call Object..ctor, X0
	010 Compare X21, 0
	011 JumpIfEqual {21}
	012 Move X1, X21
	013 Call KeyPairPersistence.Copy, X0, X1
	014 Move [X20+16], X0
	015 Move [X20+24], X19
	016 Move X20, [X31+16]
	017 Move X19, [X31+24]
	018 Move X30, [X31+32]
	019 Move X21, [X31+40]
	020 Return 
	021 Move X0, 0xEE1000
	022 Move X0, [X0+1320]
	023 Call 0x1C17D08
	024 Call 0x1C17F10
	025 Move X19, X0
	026 Move X0, 0xF0A000
	027 Move X0, [X0+3200]
	028 Call 0x1C17D08
	029 Move X1, X0
	030 Move X0, X19
	031 Move X2, X31
	032 Call ArgumentNullException..ctor, X0, X1
	033 Move X0, 0xF0A000
	034 Move X0, [X0+3208]
	035 Call 0x1C17D08
	036 Move X1, X0
	037 Move X0, X19
	038 Call 0x1C17DEC

Method: System.String get_Filename()

Disassembly:
	0x03218E14 ADRP X19, 0x11C4000
	0x03218E18 LDRB W8, [X19 + 0x2DD]
	0x03218E1C MOV X20, X0
	0x03218E20 TBNZ X8, 0x0, 0x3218E50
	0x03218E24 ADRP X0, 0xEDB000
	0x03218E28 LDR X0, [X0 + 0xE00]
	0x03218E2C BL 0x1C16CF4
	0x03218E30 ADRP X0, 0xF09000
	0x03218E34 LDR X0, [X0 + 0xC90]
	0x03218E38 BL 0x1C16CF4
	0x03218E3C ADRP X0, 0xF09000
	0x03218E40 LDR X0, [X0 + 0xD08]
	0x03218E44 BL 0x1C16CF4
	0x03218E48 MOVZ W8, 0x1
	0x03218E4C STRB W8, [X19 + 0x2DD]
	0x03218E50 ADRP X23, 0xEDB000
	0x03218E54 LDR X23, [X23 + 0xE00]
	0x03218E58 MOV X0, X20
	0x03218E5C BL 0x3217E14
	0x03218E60 MOVZ W1, 0x2
	0x03218E64 MOV X2, X31
	0x03218E68 BL 0x32ED148
	0x03218E6C MOV X19, X0
	0x03218E70 MOV X0, X31
	0x03218E74 BL 0x3241948
	0x03218E78 ADRP X8, 0xF09000
	0x03218E7C LDR X8, [X8 + 0xD08]
	0x03218E80 MOV X22, X0
	0x03218E84 LDR X0, [X8]
	0x03218E88 BL 0x1C16F10
	0x03218E8C MOV X21, X0
	0x03218E90 MOV X1, X19
	0x03218E94 MOV X2, X22
	0x03218E98 MOV X3, X31
	0x03218E9C BL 0x32E83A0
	0x03218EA0 MOV X0, X20
	0x03218EA4 BL 0x321904C
	0x03218EA8 MOV X1, X0
	0x03218EAC CBZ X21, 0x3218FA0
	0x03218EB0 LDR X8, [X21]
	0x03218EB4 LDR X9, [X8 + 0x248]
	0x03218EB8 LDR X2, [X8 + 0x250]
	0x03218EBC MOV X0, X21
	0x03218EC0 BLR X9
	0x03218EC4 LDR X8, [X21]
	0x03218EC8 LDP X9, X1, [X8 + 0x1B8]
	0x03218ECC MOV X0, X21
	0x03218ED0 BLR X9
	0x03218ED4 MOV X21, X31
	0x03218ED8 CBZ X19, 0x3218F34
	0x03218EDC LDR X8, [X19]
	0x03218EE0 LDR X1, [X23]
	0x03218EE4 LDRH W9, [X8 + 0x12E]
	0x03218EE8 CBZ X9, 0x3218F0C
	0x03218EEC LDR X10, [X8 + 0xB0]
	0x03218EF0 ADD X10, X10, 0x8
	0x03218EF4 LDUR X11, [X10 - 0x8]
	0x03218EF8 CMP X11, X1
	0x03218EFC B.EQ 0x3218F1C
	0x03218F00 SUBS X9, X9, 0x1
	0x03218F04 ADD X10, X10, 0x10
	0x03218F08 B.NE 0x3218EF4
	0x03218F0C MOV X0, X19
	0x03218F10 MOV W2, W31
	0x03218F14 BL 0x1C5C788
	0x03218F18 B 0x3218F28
	0x03218F1C LDRSW X9, [X10]
	0x03218F20 ADD X8, X8, X9, 0x4, LSL
	0x03218F24 ADD X0, X8, 0x138
	0x03218F28 LDP X8, X1, [X0]
	0x03218F2C MOV X0, X19
	0x03218F30 BLR X8
	0x03218F34 CBNZ X21, 0x3218F94
	0x03218F38 LDR X8, [X20 + 0x10]
	0x03218F3C CBZ X8, 0x3218F9C
	0x03218F40 ADRP X19, 0xF09000
	0x03218F44 LDR W21, [X8 + 0x2C]
	0x03218F48 LDR X19, [X19 + 0xC90]
	0x03218F4C MOV X0, X20
	0x03218F50 BL 0x3217E14
	0x03218F54 LDR X8, [X19]
	0x03218F58 MOV X19, X0
	0x03218F5C LDR W9, [X8 + 0xE0]
	0x03218F60 CBNZ W9, 0x3218F6C
	0x03218F64 MOV X0, X8
	0x03218F68 BL 0x1C16DFC
	0x03218F6C MOV X0, X19
	0x03218F70 TBNZ X21, 0x0, 0x3218F84
	0x03218F74 LDP X20, X19, [X31 + 0x20]
	0x03218F78 LDP X22, X21, [X31 + 0x10]
	0x03218F7C LDP X30, X23, [X31], #0x30
	0x03218F80 B 0x32192F0
	0x03218F84 LDP X20, X19, [X31 + 0x20]
	0x03218F88 LDP X22, X21, [X31 + 0x10]
	0x03218F8C LDP X30, X23, [X31], #0x30
	0x03218F90 B 0x3219260
	0x03218F94 MOV X0, X21
	0x03218F98 BL 0x1C16F18
	0x03218F9C BL 0x1C16F20
	0x03218FA0 BL 0x1C16F20

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11C5000
	009 Move W8, [X20+731]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {32}
	015 Move X0, 0xEDE000
	016 Move X0, [X0+3144]
	017 Call 0x1C17CF4
	018 Move X0, 0xEDC000
	019 Move X0, [X0+1880]
	020 Call 0x1C17CF4
	021 Move X0, 0xF0A000
	022 Move X0, [X0+3216]
	023 Call 0x1C17CF4
	024 Move X0, 0xF03000
	025 Move X0, [X0+464]
	026 Call 0x1C17CF4
	027 Move X0, 0xF0A000
	028 Move X0, [X0+3224]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+731], W8
	032 Move X0, [X19+32]
	033 Compare X0, 0
	034 JumpIfNotEqual {113}
	035 Move X8, 0xEDE000
	036 Move X8, [X8+3144]
	037 Move X0, [X8]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X31
	043 Call CultureInfo.get_InvariantCulture
	044 Move X8, [X19+16]
	045 Compare X8, 0
	046 JumpIfEqual {121}
	047 Move X23, 0xEDC000
	048 Move W8, [X8+16]
	049 Move X23, [X23+1880]
	050 Move X20, X0
	051 Add X1, X31, 12
	052 Move [X31+12], W8
	053 Move X0, [X23]
	054 Call 0x1C17E04
	055 Move X21, X0
	056 Move X0, X19
	057 Call KeyPairPersistence.get_ContainerName, X0
	058 Move X8, [X19+16]
	059 Compare X8, 0
	060 JumpIfEqual {121}
	061 Move X22, X0
	062 Move W8, [X8+40]
	063 Move X0, [X23]
	064 Add X1, X31, 8
	065 Move [X31+8], W8
	066 Call 0x1C17E04
	067 Move X8, 0xF0A000
	068 Move X8, [X8+3224]
	069 Move X4, X0
	070 Move X0, X20
	071 Move X2, X21
	072 Move X1, [X8]
	073 Move X3, X22
	074 Move X5, X31
	075 Call String.Format, X0, X1, X2, X3, X4
	076 Move X8, [X19+16]
	077 Move [X19+32], X0
	078 Compare X8, 0
	079 JumpIfEqual {121}
	080 Move X9, 0xF0A000
	081 Move X9, [X9+3216]
	082 Move W20, [X8+44]
	083 Move X0, [X9]
	084 Move W9, [X0+224]
	085 Compare W9, 0
	086 JumpIfEqual {92}
	087 Move TEMP, X20
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfEqual {97}
	091 Call KeyPairPersistence.get_UserPath
	092 Call 0x1C17DFC
	093 Move TEMP, X20
	094 And TEMP, TEMP, 1
	095 Compare TEMP, 1
	096 JumpIfNotEqual {91}
	097 Call KeyPairPersistence.get_MachinePath
	098 Move X8, 0xF03000
	099 Move X8, [X8+464]
	100 Move X20, [X19+32]
	101 Move X21, X0
	102 Move X8, [X8]
	103 Move W9, [X8+224]
	104 Compare W9, 0
	105 JumpIfNotEqual {108}
	106 Move X0, X8
	107 Call 0x1C17DFC
	108 Move X0, X21
	109 Move X1, X20
	110 Move X2, X31
	111 Call Path.Combine, X0, X1
	112 Move [X19+32], X0
	113 Move X20, [X31+48]
	114 Move X19, [X31+56]
	115 Move X22, [X31+32]
	116 Move X21, [X31+40]
	117 Move X30, [X31+16]
	118 Move X23, [X31+24]
	119 Add X31, X31, 64
	120 Return X0
	121 Call 0x1C17F20

Method: System.String get_KeyValue()

Disassembly:
	0x03219B0C B.EQ 0x3219B28
	0x03219B10 LDR W8, [X20 + 0x18]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_KeyValue(System.String value)

Disassembly:
	0x03219B14 ADD X21, X21, 0x1
	0x03219B18 ADD X25, X25, X26
	0x03219B1C CMP X21, X8
	0x03219B20 B.CC 0x3219AAC
	0x03219B24 BL 0x1C16F28

ISIL:
	001 Move X8, [X0+24]
	002 Compare X8, 0
	003 JumpIfEqual {5}
	004 Return 
	005 Move [X0+24], X1
	006 Return 

Method: System.Boolean Load()

Disassembly:
	0x03219B38 LDP X28, X27, [X31 + 0x10]
	0x03219B3C LDP X29, X30, [X31], #0x60
	0x03219B40 RET
	0x03219B44 BL 0x1C16F20
	0x03219B48 STR X30, [X31 - 0x20]!
	0x03219B4C STP X20, X19, [X31 + 0x10]
	0x03219B50 ADRP X20, 0x11C3000
	0x03219B54 LDRB W8, [X20 + 0x2ED]
	0x03219B58 MOV X19, X0
	0x03219B5C TBNZ X8, 0x0, 0x3219B74
	0x03219B60 ADRP X0, 0xEDA000
	0x03219B64 LDR X0, [X0 + 0x618]
	0x03219B68 BL 0x1C16CF4
	0x03219B6C MOVZ W8, 0x1
	0x03219B70 STRB W8, [X20 + 0x2ED]
	0x03219B74 LDR W8, [X19 + 0x40]
	0x03219B78 MOVZ W9, 0x10
	0x03219B7C SUB W20, W9, W8
	0x03219B80 CMP W20, 0x0
	0x03219B84 B.LE 0x3219BB0
	0x03219B88 MOV W1, W20
	0x03219B8C BL 0x321970C
	0x03219B90 LDR X8, [X19]
	0x03219B94 MOV X1, X0
	0x03219B98 MOV X0, X19
	0x03219B9C MOV W2, W31
	0x03219BA0 LDR X9, [X8 + 0x238]
	0x03219BA4 LDR X4, [X8 + 0x240]
	0x03219BA8 MOV W3, W20
	0x03219BAC BLR X9
	0x03219BB0 LDR X8, [X19]
	0x03219BB4 LDR X1, [X19 + 0x30]
	0x03219BB8 MOVZ W3, 0x10
	0x03219BBC MOV X0, X19
	0x03219BC0 LDR X9, [X8 + 0x238]
	0x03219BC4 LDR X4, [X8 + 0x240]
	0x03219BC8 MOV W2, W31
	0x03219BCC BLR X9
	0x03219BD0 LDR X0, [X19 + 0x28]
	0x03219BD4 CBZ X0, 0x3219C34
	0x03219BD8 MOV X1, X31
	0x03219BDC BL 0x33A01F0
	0x03219BE0 LDR X8, [X19]
	0x03219BE4 MOV X20, X0
	0x03219BE8 MOV X0, X19
	0x03219BEC LDR X9, [X8 + 0x258]
	0x03219BF0 LDR X1, [X8 + 0x260]
	0x03219BF4 BLR X9
	0x03219BF8 CBZ X20, 0x3219C24
	0x03219BFC ADRP X8, 0xEDA000
	0x03219C00 LDR X8, [X8 + 0x618]
	0x03219C04 MOV X0, X20
	0x03219C08 LDR X19, [X8]
	0x03219C0C MOV X1, X19
	0x03219C10 BL 0x1C16E00
	0x03219C14 CBNZ X0, 0x3219C28
	0x03219C18 MOV X0, X20
	0x03219C1C MOV X1, X19
	0x03219C20 BL 0x1C171E0
	0x03219C24 MOV X0, X31
	0x03219C28 LDP X20, X19, [X31 + 0x10]
	0x03219C2C LDR X30, [X31], #0x20
	0x03219C30 RET
	0x03219C34 BL 0x1C16F20
	0x03219C38 STR X30, [X31 - 0x30]!
	0x03219C3C STP X22, X21, [X31 + 0x10]
	0x03219C40 STP X20, X19, [X31 + 0x20]
	0x03219C44 ADRP X21, 0x11C3000
	0x03219C48 ADRP X22, 0xEDA000
	0x03219C4C ADRP X19, 0xF08000
	0x03219C50 ADRP X20, 0xF08000
	0x03219C54 LDRB W8, [X21 + 0x2EF]
	0x03219C58 LDR X22, [X22 + 0x618]
	0x03219C5C LDR X19, [X19 + 0xD48]
	0x03219C60 LDR X20, [X20 + 0xD40]
	0x03219C64 TBNZ X8, 0x0, 0x3219C94
	0x03219C68 ADRP X0, 0xEDA000
	0x03219C6C LDR X0, [X0 + 0x618]
	0x03219C70 BL 0x1C16CF4
	0x03219C74 ADRP X0, 0xF08000
	0x03219C78 LDR X0, [X0 + 0xD40]
	0x03219C7C BL 0x1C16CF4
	0x03219C80 ADRP X0, 0xF08000
	0x03219C84 LDR X0, [X0 + 0xD48]
	0x03219C88 BL 0x1C16CF4
	0x03219C8C MOVZ W8, 0x1
	0x03219C90 STRB W8, [X21 + 0x2EF]
	0x03219C94 LDR X0, [X22]
	0x03219C98 MOVZ W1, 0x100
	0x03219C9C BL 0x1C16D6C
	0x03219CA0 LDR X1, [X19]
	0x03219CA4 MOV X2, X31
	0x03219CA8 MOV X19, X0
	0x03219CAC BL 0x32C5BD8
	0x03219CB0 LDR X8, [X20]
	0x03219CB4 LDP X22, X21, [X31 + 0x10]
	0x03219CB8 LDR X8, [X8 + 0xB8]
	0x03219CBC STR X19, [X8]
	0x03219CC0 LDP X20, X19, [X31 + 0x20]
	0x03219CC4 LDR X30, [X31], #0x30
	0x03219CC8 RET
	0x03219CCC STP X30, X19, [X31 - 0x10]!
	0x03219CD0 MOV X1, X31
	0x03219CD4 MOV X19, X0
	0x03219CD8 BL 0x3251230
	0x03219CDC MOVZ W8, 0x80
	0x03219CE0 STR W8, [X19 + 0x14]
	0x03219CE4 LDP X30, X19, [X31], #0x10
	0x03219CE8 RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0x11C4000
	007 Move W8, [X19+732]
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xEDB000
	014 Move X0, [X0+3584]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X19+732], W8
	018 Move X0, X20
	019 Call KeyPairPersistence.get_Filename, X0
	020 Move X1, X31
	021 Call File.Exists, X0
	022 Move W21, W0
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {68}
	027 Move X0, X20
	028 Call KeyPairPersistence.get_Filename, X0
	029 Move X1, X31
	030 Call File.OpenText, X0
	031 Move X19, X0
	032 Compare X0, 0
	033 JumpIfEqual {75}
	034 Move X8, [X19]
	035 Move X9, [X8+488]
	036 Move X1, [X8+496]
	037 Move X0, X19
	038 NotImplemented "Instruction BLR not yet implemented."
	039 Move X1, X0
	040 Move X0, X20
	041 Call KeyPairPersistence.FromXml, X0, X1
	042 Move X20, X31
	043 Move X10, 0xEDB000
	044 Move X8, [X19]
	045 Move X10, [X10+3584]
	046 NotImplemented "Instruction LDRH not yet implemented."
	047 Move X1, [X10]
	048 Compare X9, 0
	049 JumpIfEqual {56}
	050 Move X10, [X8+176]
	051 Add X10, X10, 8
	052 NotImplemented "Instruction LDUR not yet implemented."
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Subtract X9, X9, 1
	055 Add X10, X10, 16
	056 Move X0, X19
	057 Move W2, W31
	058 Call 0x1C5D788
	059 NotImplemented "Instruction LDRSW not yet implemented."
	060 Add X8, X8, X9
	061 Add X0, X8, 312
	062 Move X8, [X0]
	063 Move X1, [X0+8]
	064 Move X0, X19
	065 NotImplemented "Instruction BLR not yet implemented."
	066 Compare X20, 0
	067 JumpIfNotEqual {76}
	068 And W0, W21, 1
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X22, [X31+16]
	072 Move X21, [X31+24]
	073 Move X30, [X31+48]
	074 Return X0
	075 Call 0x1C17F20
	076 Move X0, X20
	077 Call 0x1C17F18
	078 Move X22, X0
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X0, X22
	081 Call 0x3EB2AD0
	082 Move X20, [X0]
	083 Call 0x3EB2AE0
	084 Compare X19, 0
	085 JumpIfNotEqual {43}
	086 Move X20, X31
	087 Move X22, X0
	088 Compare X19, 0
	089 JumpIfEqual {113}
	090 Move X10, 0xEDB000
	091 Move X8, [X19]
	092 Move X10, [X10+3584]
	093 NotImplemented "Instruction LDRH not yet implemented."
	094 Move X1, [X10]
	095 Compare X9, 0
	096 JumpIfEqual {103}
	097 Move X10, [X8+176]
	098 Add X10, X10, 8
	099 NotImplemented "Instruction LDUR not yet implemented."
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Subtract X9, X9, 1
	102 Add X10, X10, 16
	103 Move X0, X19
	104 Move W2, W31
	105 Call 0x1C5D788
	106 NotImplemented "Instruction LDRSW not yet implemented."
	107 Add X8, X8, X9
	108 Add X0, X8, 312
	109 Move X8, [X0]
	110 Move X1, [X0+8]
	111 Move X0, X19
	112 NotImplemented "Instruction BLR not yet implemented."
	113 Compare X20, 0
	114 JumpIfNotEqual {117}
	115 Move X0, X22
	116 Call 0x1D2D690
	117 Move X0, X20
	118 Call 0x1C17F18
	119 Call 0x1991590

Method: System.Void Save()

Disassembly:
	0x03219E08 BR X2
	0x03219E0C STP X30, X19, [X31 - 0x10]!
	0x03219E10 LDR X8, [X0 + 0x38]
	0x03219E14 CBZ X8, 0x3219EBC
	0x03219E18 LDR W9, [X8 + 0x18]
	0x03219E1C CBZ W9, 0x3219EB8
	0x03219E20 CMP W9, 0x1
	0x03219E24 STR W31, [X8 + 0x20]
	0x03219E28 B.EQ 0x3219EB8
	0x03219E2C STR W31, [X8 + 0x24]
	0x03219E30 LDR X8, [X0 + 0x28]
	0x03219E34 MOV X19, X0
	0x03219E38 CBZ X8, 0x3219EBC
	0x03219E3C LDR W9, [X8 + 0x18]
	0x03219E40 CBZ W9, 0x3219EB8
	0x03219E44 MOVZ W10, 0x2301
	0x03219E48 MOVK W10, 0x67450000
	0x03219E4C CMP W9, 0x1
	0x03219E50 STR W10, [X8 + 0x20]
	0x03219E54 B.EQ 0x3219EB8
	0x03219E58 MOVZ W10, 0xAB89
	0x03219E5C MOVK W10, 0xEFCD0000
	0x03219E60 CMP W9, 0x2
	0x03219E64 STR W10, [X8 + 0x24]
	0x03219E68 B.LS 0x3219EB8
	0x03219E6C MOVZ W10, 0xDCFE
	0x03219E70 MOVK W10, 0x98BA0000
	0x03219E74 CMP W9, 0x3
	0x03219E78 STR W10, [X8 + 0x28]
	0x03219E7C B.EQ 0x3219EB8
	0x03219E80 MOVZ W9, 0x5476
	0x03219E84 MOVK W9, 0x10320000
	0x03219E88 STR W9, [X8 + 0x2C]
	0x03219E8C LDR X0, [X19 + 0x30]
	0x03219E90 MOVZ W2, 0x40
	0x03219E94 MOV W1, W31
	0x03219E98 MOV X3, X31
	0x03219E9C BL 0x339FA34
	0x03219EA0 LDR X0, [X19 + 0x40]
	0x03219EA4 MOVZ W2, 0x10
	0x03219EA8 MOV W1, W31
	0x03219EAC MOV X3, X31
	0x03219EB0 LDP X30, X19, [X31], #0x10
	0x03219EB4 B 0x339FA34
	0x03219EB8 BL 0x1C16F28
	0x03219EBC BL 0x1C16F20
	0x03219EC0 STR X30, [X31 - 0x40]!
	0x03219EC4 STP X24, X23, [X31 + 0x10]
	0x03219EC8 STP X22, X21, [X31 + 0x20]
	0x03219ECC STP X20, X19, [X31 + 0x30]
	0x03219ED0 LDR X8, [X0 + 0x38]
	0x03219ED4 CBZ X8, 0x3219FE0
	0x03219ED8 LDR W10, [X8 + 0x18]
	0x03219EDC CBZ W10, 0x3219FDC
	0x03219EE0 LDR W9, [X8 + 0x20]
	0x03219EE4 UBFM W11, W3, 0x1D, 0x1C
	0x03219EE8 MOV W19, W3
	0x03219EEC MOV W20, W2
	0x03219EF0 ADD W12, W9, W3, 0x3, LSL
	0x03219EF4 MOV X22, X0
	0x03219EF8 MOV X21, X1
	0x03219EFC CMP X12, W11, SXTW
	0x03219F00 STR W12, [X8 + 0x20]
	0x03219F04 B.GE 0x3219F20
	0x03219F08 CMP W10, 0x1
	0x03219F0C B.EQ 0x3219FDC
	0x03219F10 LDR W10, [X8 + 0x24]
	0x03219F14 ADD W10, W10, 0x1
	0x03219F18 STR W10, [X8 + 0x24]
	0x03219F1C B 0x3219F28
	0x03219F20 CMP W10, 0x1
	0x03219F24 B.EQ 0x3219FDC
	0x03219F28 LDR W10, [X8 + 0x24]
	0x03219F2C UBFM W24, W9, 0x3, 0x8
	0x03219F30 MOVZ W9, 0x40
	0x03219F34 SUB W23, W9, W24
	0x03219F38 ADD W9, W10, W19, 0x1D, ASR
	0x03219F3C CMP W23, W19
	0x03219F40 STR W9, [X8 + 0x24]
	0x03219F44 B.LE 0x3219F50
	0x03219F48 MOV W23, W31
	0x03219F4C B 0x3219FB0
	0x03219F50 LDR X2, [X22 + 0x30]
	0x03219F54 MOV X0, X21
	0x03219F58 MOV W1, W20
	0x03219F5C MOV W3, W24
	0x03219F60 MOV W4, W23
	0x03219F64 MOV X5, X31
	0x03219F68 BL 0x33A8A9C
	0x03219F6C LDP X1, X2, [X22 + 0x28]
	0x03219F70 MOV X0, X22
	0x03219F74 MOV W3, W31
	0x03219F78 BL 0x3219FE4
	0x03219F7C EOR W8, W24, 0x7F
	0x03219F80 CMP W8, W19
	0x03219F84 B.GE 0x3219FAC
	0x03219F88 LDR X1, [X22 + 0x28]
	0x03219F8C ADD W3, W20, W23
	0x03219F90 MOV X0, X22
	0x03219F94 MOV X2, X21
	0x03219F98 BL 0x3219FE4
	0x03219F9C ADD W8, W23, 0x7F
	0x03219FA0 CMP W8, W19
	0x03219FA4 ADD W23, W23, 0x40
	0x03219FA8 B.LT 0x3219F88
	0x03219FAC MOV W24, W31
	0x03219FB0 LDR X2, [X22 + 0x30]
	0x03219FB4 ADD W1, W23, W20
	0x03219FB8 SUB W4, W19, W23
	0x03219FBC MOV X0, X21
	0x03219FC0 MOV W3, W24
	0x03219FC4 LDP X20, X19, [X31 + 0x30]
	0x03219FC8 LDP X22, X21, [X31 + 0x20]
	0x03219FCC LDP X24, X23, [X31 + 0x10]
	0x03219FD0 MOV X5, X31
	0x03219FD4 LDR X30, [X31], #0x40
	0x03219FD8 B 0x33A8A9C
	0x03219FDC BL 0x1C16F28
	0x03219FE0 BL 0x1C16F20
	0x03219FE4 STR X30, [X31 - 0x60]!
	0x03219FE8 STP X28, X27, [X31 + 0x10]
	0x03219FEC STP X26, X25, [X31 + 0x20]
	0x03219FF0 STP X24, X23, [X31 + 0x30]
	0x03219FF4 STP X22, X21, [X31 + 0x40]
	0x03219FF8 STP X20, X19, [X31 + 0x50]
	0x03219FFC CBZ X1, 0x321A658
	0x0321A000 LDR W8, [X1 + 0x18]
	0x0321A004 MOV X19, X1
	0x0321A008 CBZ W8, 0x321A654
	0x0321A00C CMP W8, 0x1
	0x0321A010 B.EQ 0x321A654
	0x0321A014 CMP W8, 0x2
	0x0321A018 B.LS 0x321A654
	0x0321A01C CMP W8, 0x3
	0x0321A020 B.EQ 0x321A654
	0x0321A024 LDR X1, [X0 + 0x40]
	0x0321A028 LDP W23, W21, [X19 + 0x20]
	0x0321A02C LDP W22, W24, [X19 + 0x28]
	0x0321A030 MOV X20, X0
	0x0321A034 BL 0x321A994
	0x0321A038 LDR X1, [X20 + 0x40]
	0x0321A03C CBZ X1, 0x321A658
	0x0321A040 LDR W8, [X1 + 0x18]
	0x0321A044 CBZ W8, 0x321A654
	0x0321A048 CMP W8, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, 0x11C4000
	008 Move W8, [X19+733]
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0xEDB000
	015 Move X0, [X0+3584]
	016 Call 0x1C17CF4
	017 Move X0, 0xF09000
	018 Move X0, [X0+3216]
	019 Call 0x1C17CF4
	020 Move X0, 0xF09000
	021 Move X0, [X0+3336]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X19+733], W8
	025 Move X23, 0xEDB000
	026 Move X23, [X23+3584]
	027 Move X0, X20
	028 Call KeyPairPersistence.get_Filename, X0
	029 Move W1, 2
	030 Move X2, X31
	031 Call File.Open, X0, X1
	032 Move X19, X0
	033 Move X0, X31
	034 Call Encoding.get_UTF8
	035 Move X8, 0xF09000
	036 Move X8, [X8+3336]
	037 Move X22, X0
	038 Move X0, [X8]
	039 Call 0x1C17F10
	040 Move X21, X0
	041 Move X1, X19
	042 Move X2, X22
	043 Move X3, X31
	044 Call StreamWriter..ctor, X0, X1, X2
	045 Move X0, X20
	046 Call KeyPairPersistence.ToXml, X0
	047 Move X1, X0
	048 Compare X21, 0
	049 JumpIfEqual {125}
	050 Move X8, [X21]
	051 Move X9, [X8+584]
	052 Move X2, [X8+592]
	053 Move X0, X21
	054 NotImplemented "Instruction BLR not yet implemented."
	055 Move X8, [X21]
	056 Move X9, [X8+440]
	057 Move X1, [X8+448]
	058 Move X0, X21
	059 NotImplemented "Instruction BLR not yet implemented."
	060 Move X21, X31
	061 Compare X19, 0
	062 JumpIfEqual {84}
	063 Move X8, [X19]
	064 Move X1, [X23]
	065 NotImplemented "Instruction LDRH not yet implemented."
	066 Compare X9, 0
	067 JumpIfEqual {74}
	068 Move X10, [X8+176]
	069 Add X10, X10, 8
	070 NotImplemented "Instruction LDUR not yet implemented."
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Subtract X9, X9, 1
	073 Add X10, X10, 16
	074 Move X0, X19
	075 Move W2, W31
	076 Call 0x1C5D788
	077 NotImplemented "Instruction LDRSW not yet implemented."
	078 Add X8, X8, X9
	079 Add X0, X8, 312
	080 Move X8, [X0]
	081 Move X1, [X0+8]
	082 Move X0, X19
	083 NotImplemented "Instruction BLR not yet implemented."
	084 Compare X21, 0
	085 JumpIfNotEqual {122}
	086 Move X8, [X20+16]
	087 Compare X8, 0
	088 JumpIfEqual {124}
	089 Move X19, 0xF09000
	090 Move W21, [X8+44]
	091 Move X19, [X19+3216]
	092 Move X0, X20
	093 Call KeyPairPersistence.get_Filename, X0
	094 Move X8, [X19]
	095 Move X19, X0
	096 Move W9, [X8+224]
	097 Compare W9, 0
	098 JumpIfNotEqual {101}
	099 Move X0, X8
	100 Call 0x1C17DFC
	101 Move X0, X19
	102 Move TEMP, X21
	103 And TEMP, TEMP, 1
	104 Compare TEMP, 1
	105 JumpIfEqual {114}
	106 Move X20, [X31+32]
	107 Move X19, [X31+40]
	108 Move X22, [X31+16]
	109 Move X21, [X31+24]
	110 Move X30, [X31+48]
	111 Move X23, [X31+56]
	112 Call KeyPairPersistence.ProtectUser, X0
	113 Return 
	114 Move X20, [X31+32]
	115 Move X19, [X31+40]
	116 Move X22, [X31+16]
	117 Move X21, [X31+24]
	118 Move X30, [X31+48]
	119 Move X23, [X31+56]
	120 Call KeyPairPersistence.ProtectMachine, X0
	121 Return 
	122 Move X0, X21
	123 Call 0x1C17F18
	124 Call 0x1C17F20
	125 Call 0x1C17F20
	126 Move X22, X0
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move X0, X22
	129 Call 0x3EB2AD0
	130 Move X21, [X0]
	131 Call 0x3EB2AE0
	132 Move X21, X31
	133 Move X22, X0
	134 Compare X19, 0
	135 JumpIfEqual {157}
	136 Move X8, [X19]
	137 Move X1, [X23]
	138 NotImplemented "Instruction LDRH not yet implemented."
	139 Compare X9, 0
	140 JumpIfEqual {147}
	141 Move X10, [X8+176]
	142 Add X10, X10, 8
	143 NotImplemented "Instruction LDUR not yet implemented."
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Subtract X9, X9, 1
	146 Add X10, X10, 16
	147 Move X0, X19
	148 Move W2, W31
	149 Call 0x1C5D788
	150 NotImplemented "Instruction LDRSW not yet implemented."
	151 Add X8, X8, X9
	152 Add X0, X8, 312
	153 Move X8, [X0]
	154 Move X1, [X0+8]
	155 Move X0, X19
	156 NotImplemented "Instruction BLR not yet implemented."
	157 Compare X21, 0
	158 JumpIfNotEqual {161}
	159 Move X0, X22
	160 Call 0x1D2D690
	161 Move X0, X21
	162 Call 0x1C17F18
	163 Call 0x1991590

Method: System.Void Remove()

Disassembly:
	0x0321A380 ADD W20, W26, W20
	0x0321A384 ORR W24, W23, W21, 0x17
	0x0321A388 ADD W20, W20, W7
	0x0321A38C AND W21, W23, W21, 0x17
	0x0321A390 AND W24, W24, W20, 0x1D

ISIL:
	001 Move [X31-16], X30
	002 Call KeyPairPersistence.get_Filename, X0
	003 Move X1, X31
	004 Move X30, [X31+16]
	005 Call File.Delete, X0
	006 Return 

Method: System.String get_UserPath()

Disassembly:
	0x032195E8 STR X19, [X8 + 0x20]
	0x032195EC LDP X20, X19, [X31 + 0x10]
	0x032195F0 LDP X30, X21, [X31], #0x20
	0x032195F4 RET
	0x032195F8 STP X30, X19, [X31 - 0x10]!
	0x032195FC MOV X1, X31
	0x03219600 MOV X19, X0
	0x03219604 BL 0x3251230
	0x03219608 MOVZ W8, 0x80
	0x0321960C STR W8, [X19 + 0x14]
	0x03219610 LDP X30, X19, [X31], #0x10
	0x03219614 RET
	0x03219618 STR X30, [X31 - 0x20]!
	0x0321961C STP X20, X19, [X31 + 0x10]
	0x03219620 ADRP X19, 0x11C3000
	0x03219624 ADRP X20, 0xF08000
	0x03219628 LDRB W8, [X19 + 0x2EA]
	0x0321962C LDR X20, [X20 + 0xD40]
	0x03219630 TBNZ X8, 0x0, 0x3219648
	0x03219634 ADRP X0, 0xF08000
	0x03219638 LDR X0, [X0 + 0xD40]
	0x0321963C BL 0x1C16CF4
	0x03219640 MOVZ W8, 0x1
	0x03219644 STRB W8, [X19 + 0x2EA]
	0x03219648 LDR X0, [X20]
	0x0321964C BL 0x1C16F10
	0x03219650 MOV X19, X0
	0x03219654 BL 0x3219668
	0x03219658 MOV X0, X19
	0x0321965C LDP X20, X19, [X31 + 0x10]
	0x03219660 LDR X30, [X31], #0x20
	0x03219664 RET
	0x03219668 STP X30, X21, [X31 - 0x20]!
	0x0321966C STP X20, X19, [X31 + 0x10]
	0x03219670 ADRP X21, 0x11C3000
	0x03219674 ADRP X20, 0xEDA000
	0x03219678 LDRB W8, [X21 + 0x2EC]
	0x0321967C LDR X20, [X20 + 0x618]
	0x03219680 MOV X19, X0
	0x03219684 TBNZ X8, 0x0, 0x321969C
	0x03219688 ADRP X0, 0xEDA000
	0x0321968C LDR X0, [X0 + 0x618]
	0x03219690 BL 0x1C16CF4
	0x03219694 MOVZ W8, 0x1
	0x03219698 STRB W8, [X21 + 0x2EC]
	0x0321969C MOV X0, X19
	0x032196A0 MOV X1, X31
	0x032196A4 BL 0x3251230
	0x032196A8 MOVZ W8, 0x80
	0x032196AC STR W8, [X19 + 0x14]
	0x032196B0 LDR X0, [X20]
	0x032196B4 MOVZ W1, 0x10
	0x032196B8 BL 0x1C16D6C
	0x032196BC STR X0, [X19 + 0x28]
	0x032196C0 LDR X0, [X20]
	0x032196C4 MOVZ W1, 0x10
	0x032196C8 BL 0x1C16D6C
	0x032196CC STR X0, [X19 + 0x30]
	0x032196D0 LDR X0, [X20]
	0x032196D4 MOVZ W1, 0x10
	0x032196D8 BL 0x1C16D6C
	0x032196DC STR X0, [X19 + 0x38]
	0x032196E0 LDR X0, [X20]
	0x032196E4 MOVZ W1, 0x30
	0x032196E8 BL 0x1C16D6C
	0x032196EC LDR X8, [X19]
	0x032196F0 STR X0, [X19 + 0x48]
	0x032196F4 MOV X0, X19
	0x032196F8 LDP X20, X19, [X31 + 0x10]
	0x032196FC LDR X2, [X8 + 0x258]
	0x03219700 LDR X1, [X8 + 0x260]
	0x03219704 LDP X30, X21, [X31], #0x20
	0x03219708 BR X2
	0x0321970C STR X30, [X31 - 0x20]!
	0x03219710 STP X20, X19, [X31 + 0x10]
	0x03219714 ADRP X20, 0x11C3000
	0x03219718 LDRB W8, [X20 + 0x2EB]
	0x0321971C MOV W19, W1
	0x03219720 TBNZ X8, 0x0, 0x3219738
	0x03219724 ADRP X0, 0xEDA000
	0x03219728 LDR X0, [X0 + 0x618]
	0x0321972C BL 0x1C16CF4
	0x03219730 MOVZ W8, 0x1
	0x03219734 STRB W8, [X20 + 0x2EB]
	0x03219738 CMP W19, 0x1
	0x0321973C B.LT 0x3219790
	0x03219740 ADRP X8, 0xEDA000
	0x03219744 LDR X8, [X8 + 0x618]
	0x03219748 MOV W1, W19
	0x0321974C LDR X0, [X8]
	0x03219750 BL 0x1C16D6C
	0x03219754 CBZ X0, 0x32197A4
	0x03219758 LDR W8, [X0 + 0x18]
	0x0321975C UBFM X9, X8, 0x20, 0x1F
	0x03219760 CMP X9, 0x1
	0x03219764 B.LT 0x3219794
	0x03219768 MOV X9, X31
	0x0321976C SXTW X10, W8
	0x03219770 ADD X11, X0, 0x20
	0x03219774 CMP X9, X8
	0x03219778 B.CS 0x32197A0
	0x0321977C STRB W19, [X11, X9, LSL]
	0x03219780 ADD X9, X9, 0x1
	0x03219784 CMP X9, X10
	0x03219788 B.LT 0x3219774
	0x0321978C B 0x3219794
	0x03219790 MOV X0, X31
	0x03219794 LDP X20, X19, [X31 + 0x10]
	0x03219798 LDR X30, [X31], #0x20
	0x0321979C RET
	0x032197A0 BL 0x1C16F28
	0x032197A4 BL 0x1C16F20
	0x032197A8 STP X30, X19, [X31 - 0x10]!
	0x032197AC MOV X19, X0
	0x032197B0 LDR X0, [X0 + 0x28]
	0x032197B4 MOVZ W2, 0x10
	0x032197B8 MOV W1, W31
	0x032197BC MOV X3, X31
	0x032197C0 STR W31, [X19 + 0x40]
	0x032197C4 BL 0x339FA34
	0x032197C8 LDR X0, [X19 + 0x30]
	0x032197CC MOVZ W2, 0x10
	0x032197D0 MOV W1, W31
	0x032197D4 MOV X3, X31
	0x032197D8 BL 0x339FA34
	0x032197DC LDR X0, [X19 + 0x38]
	0x032197E0 MOVZ W2, 0x10
	0x032197E4 MOV W1, W31
	0x032197E8 MOV X3, X31
	0x032197EC BL 0x339FA34
	0x032197F0 LDR X0, [X19 + 0x48]
	0x032197F4 MOVZ W2, 0x30
	0x032197F8 MOV W1, W31
	0x032197FC MOV X3, X31
	0x03219800 LDP X30, X19, [X31], #0x10
	0x03219804 B 0x339FA34
	0x03219808 STR X30, [X31 - 0x40]!
	0x0321980C STP X24, X23, [X31 + 0x10]
	0x03219810 STP X22, X21, [X31 + 0x20]
	0x03219814 STP X20, X19, [X31 + 0x30]
	0x03219818 LDR W23, [X0 + 0x40]
	0x0321981C MOVZ W8, 0x10
	0x03219820 MOV W20, W3
	0x03219824 MOV W21, W2
	0x03219828 ADD W9, W23, W3
	0x0321982C SUB W24, W8, W23
	0x03219830 MOV X19, X1
	0x03219834 MOV X22, X0
	0x03219838 AND W8, W9, 0xF
	0x0321983C CMP W24, W3
	0x03219840 STR W8, [X0 + 0x40]
	0x03219844 B.LE 0x3219850
	0x03219848 MOV W24, W31
	0x0321984C B 0x32198B8
	0x03219850 LDR X2, [X22 + 0x38]
	0x03219854 MOV X0, X19
	0x03219858 MOV W1, W21
	0x0321985C MOV W3, W23
	0x03219860 MOV W4, W24
	0x03219864 MOV X5, X31
	0x03219868 BL 0x33A8A9C
	0x0321986C LDP X1, X2, [X22 + 0x28]
	0x03219870 LDR X3, [X22 + 0x38]
	0x03219874 MOV X0, X22
	0x03219878 MOV W4, W31
	0x0321987C BL 0x32198E4
	0x03219880 MOVZ W8, 0x1F
	0x03219884 SUB W8, W8, W23
	0x03219888 CMP W8, W20
	0x0321988C B.GE 0x32198B4
	0x03219890 LDP X1, X2, [X22 + 0x28]
	0x03219894 ADD W4, W21, W24
	0x03219898 MOV X0, X22
	0x0321989C MOV X3, X19
	0x032198A0 BL 0x32198E4
	0x032198A4 ADD W8, W24, 0x1F
	0x032198A8 CMP W8, W20
	0x032198AC ADD W24, W24, 0x10
	0x032198B0 B.LT 0x3219890
	0x032198B4 MOV W23, W31
	0x032198B8 LDR X2, [X22 + 0x38]
	0x032198BC ADD W1, W24, W21
	0x032198C0 SUB W4, W20, W24
	0x032198C4 MOV X0, X19
	0x032198C8 MOV W3, W23
	0x032198CC LDP X20, X19, [X31 + 0x30]
	0x032198D0 LDP X22, X21, [X31 + 0x20]
	0x032198D4 LDP X24, X23, [X31 + 0x10]
	0x032198D8 MOV X5, X31
	0x032198DC LDR X30, [X31], #0x40
	0x032198E0 B 0x33A8A9C
	0x032198E4 STP X29, X30, [X31 - 0x60]!
	0x032198E8 STP X28, X27, [X31 + 0x10]
	0x032198EC STP X26, X25, [X31 + 0x20]
	0x032198F0 STP X24, X23, [X31 + 0x30]
	0x032198F4 STP X22, X21, [X31 + 0x40]
	0x032198F8 STP X20, X19, [X31 + 0x50]
	0x032198FC ADRP X24, 0x11C3000
	0x03219900 LDRB W8, [X24 + 0x2EE]
	0x03219904 MOV W23, W4
	0x03219908 MOV X19, X3
	0x0321990C MOV X20, X2
	0x03219910 MOV X21, X1
	0x03219914 MOV X22, X0
	0x03219918 TBNZ X8, 0x0, 0x3219930
	0x0321991C ADRP X0, 0xF08000
	0x03219920 LDR X0, [X0 + 0xD40]
	0x03219924 BL 0x1C16CF4
	0x03219928 MOVZ W8, 0x1
	0x0321992C STRB W8, [X24 + 0x2EE]
	0x03219930 LDR X2, [X22 + 0x48]
	0x03219934 MOVZ W4, 0x10
	0x03219938 MOV X0, X21
	0x0321993C MOV W1, W31
	0x03219940 MOV W3, W31
	0x03219944 MOV X5, X31
	0x03219948 BL 0x33A8A9C
	0x0321994C LDR X2, [X22 + 0x48]
	0x03219950 MOVZ W3, 0x10
	0x03219954 MOVZ W4, 0x10
	0x03219958 MOV X0, X19
	0x0321995C MOV W1, W23
	0x03219960 MOV X5, X31
	0x03219964 BL 0x33A8A9C
	0x03219968 CBZ X21, 0x3219B44
	0x0321996C ADRP X24, 0xF08000
	0x03219970 LDR X24, [X24 + 0xD40]
	0x03219974 MOV X8, X31
	0x03219978 MOV W23, W23
	0x0321997C ADD X9, X21, 0x20
	0x03219980 LDR W10, [X21 + 0x18]
	0x03219984 CMP X8, X10
	0x03219988 B.CS 0x3219B24
	0x0321998C CBZ X19, 0x3219B44
	0x03219990 LDR W11, [X19 + 0x18]
	0x03219994 ADD X10, X23, X8
	0x03219998 CMP W10, W11
	0x0321999C B.CS 0x3219B24
	0x032199A0 LDR X11, [X22 + 0x48]
	0x032199A4 CBZ X11, 0x3219B44
	0x032199A8 LDR W13, [X11 + 0x18]
	0x032199AC ADD X12, X8, 0x20
	0x032199B0 CMP X12, X13
	0x032199B4 B.CS 0x3219B24
	0x032199B8 ADD X10, X19, W10, SXTW
	0x032199BC LDRB W13, [X9, X8, LSL]
	0x032199C0 LDRB W10, [X10 + 0x20]
	0x032199C4 ADD X11, X11, X8
	0x032199C8 SUB X8, X12, 0x1F
	0x032199CC CMP X8, 0x10
	0x032199D0 EOR W10, W10, W13, 0x0
	0x032199D4 STRB W10, [X11 + 0x40]
	0x032199D8 B.NE 0x3219980
	0x032199DC MOV W26, W31
	0x032199E0 MOV W25, W31
	0x032199E4 MOV X27, X31
	0x032199E8 LDR X8, [X22 + 0x48]
	0x032199EC CBZ X8, 0x3219B44
	0x032199F0 LDR W9, [X8 + 0x18]
	0x032199F4 CMP X27, X9
	0x032199F8 B.CS 0x3219B24
	0x032199FC LDR X0, [X24]
	0x03219A00 ADD X28, X8, X27
	0x03219A04 LDRB W29, [X28 + 0x20]
	0x03219A08 LDR W8, [X0 + 0xE0]
	0x03219A0C CBNZ W8, 0x3219A18
	0x03219A10 BL 0x1C16DFC
	0x03219A14 LDR X0, [X24]
	0x03219A18 LDR X8, [X0 + 0xB8]
	0x03219A1C LDR X8, [X8]
	0x03219A20 CBZ X8, 0x3219B44
	0x03219A24 LDR W9, [X8 + 0x18]
	0x03219A28 CMP W26, W9
	0x03219A2C B.CS 0x3219B24
	0x03219A30 ADD X8, X8, W26, UXTW
	0x03219A34 LDRB W8, [X8 + 0x20]
	0x03219A38 ADD X27, X27, 0x1
	0x03219A3C CMP X27, 0x30
	0x03219A40 EOR W8, W8, W29, 0x0
	0x03219A44 AND W26, W8, 0xFF
	0x03219A48 STRB W8, [X28 + 0x20]
	0x03219A4C B.NE 0x32199E8
	0x03219A50 ADD W8, W25, W26
	0x03219A54 ADD W25, W25, 0x1
	0x03219A58 CMP W25, 0x12
	0x03219A5C AND W26, W8, 0xFF
	0x03219A60 B.NE 0x32199E4
	0x03219A64 LDR X0, [X22 + 0x48]
	0x03219A68 MOVZ W4, 0x10
	0x03219A6C MOV W1, W31
	0x03219A70 MOV X2, X21
	0x03219A74 MOV W3, W31
	0x03219A78 MOV X5, X31
	0x03219A7C BL 0x33A8A9C
	0x03219A80 CBZ X20, 0x3219B44
	0x03219A84 LDR X8, [X20 + 0x18]
	0x03219A88 CMP W8, 0xF
	0x03219A8C B.LS 0x3219B24
	0x03219A90 AND X8, X8, 0x0
	0x03219A94 CBZ X8, 0x3219B24
	0x03219A98 LDRB W27, [X20 + 0x2F]
	0x03219A9C MOV X21, X31
	0x03219AA0 ADD X22, X20, 0x20
	0x03219AA4 UBFM X25, X23, 0x20, 0x1F
	0x03219AA8 MOVZ X26, 0x1
	0x03219AAC LDR X0, [X24]
	0x03219AB0 LDRB W28, [X22, X21, LSL]
	0x03219AB4 LDR W8, [X0 + 0xE0]
	0x03219AB8 CBNZ W8, 0x3219AC4
	0x03219ABC BL 0x1C16DFC
	0x03219AC0 LDR X0, [X24]
	0x03219AC4 LDR W8, [X19 + 0x18]
	0x03219AC8 ADD X9, X23, X21
	0x03219ACC CMP X9, X8
	0x03219AD0 B.CS 0x3219B24
	0x03219AD4 LDR X8, [X0 + 0xB8]
	0x03219AD8 LDR X8, [X8]
	0x03219ADC CBZ X8, 0x3219B44
	0x03219AE0 ADD X9, X19, X25, 0x20, ASR
	0x03219AE4 LDRB W9, [X9 + 0x20]
	0x03219AE8 LDR W10, [X8 + 0x18]
	0x03219AEC EOR W9, W9, W27, 0x0
	0x03219AF0 CMP W10, W9, UXTB
	0x03219AF4 B.LS 0x3219B24
	0x03219AF8 ADD X8, X8, W9, UXTB
	0x03219AFC LDRB W8, [X8 + 0x20]
	0x03219B00 CMP X21, 0xF
	0x03219B04 EOR W27, W8, W28, 0x0
	0x03219B08 STRB W27, [X22, X21, LSL]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, 0x11C4000
	009 Move X22, 0xF09000
	010 Move W8, [X19+734]
	011 Move X22, [X22+3216]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0xF09000
	017 Move X0, [X0+3216]
	018 Call 0x1C17CF4
	019 Move X0, 0xF02000
	020 Move X0, [X0+464]
	021 Call 0x1C17CF4
	022 Move X0, 0xF09000
	023 Move X0, [X0+664]
	024 Call 0x1C17CF4
	025 Move X0, 0xF09000
	026 Move X0, [X0+3240]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X19+734], W8
	030 Move X0, [X22]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {36}
	034 Call 0x1C17DFC
	035 Move X0, [X22]
	036 Move X8, [X0+184]
	037 Move X19, [X8+32]
	038 Move [X31+12], W31
	039 Add X1, X31, 12
	040 Move X0, X19
	041 Move X2, X31
	042 Call Monitor.Enter, X0, X1
	043 Move X8, [X22]
	044 Move W9, [X8+224]
	045 Compare W9, 0
	046 JumpIfNotEqual {50}
	047 Move X0, X8
	048 Call 0x1C17DFC
	049 Move X8, [X22]
	050 Move X9, [X8+184]
	051 Move X10, [X9+8]
	052 Compare X10, 0
	053 JumpIfEqual {64}
	054 Move W10, [X8+224]
	055 Compare W10, 0
	056 JumpIfNotEqual {61}
	057 Move X0, X8
	058 Call 0x1C17DFC
	059 Move X8, [X22]
	060 Move X9, [X8+184]
	061 Move W9, [X9]
	062 Compare W9, 0
	063 JumpIfNotEqual {129}
	064 Move W0, 26
	065 Move X1, X31
	066 Call Environment.GetFolderPath, X0
	067 Move X8, 0xF02000
	068 Move X8, [X8+464]
	069 Move X20, X0
	070 Move X0, [X8]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Move X8, 0xF09000
	076 Move X8, [X8+664]
	077 Move X1, [X8]
	078 Move X0, X20
	079 Move X2, X31
	080 Call Path.Combine, X0, X1
	081 Move X20, X0
	082 Move X0, [X22]
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {88}
	086 Call 0x1C17DFC
	087 Move X0, [X22]
	088 Move X8, [X0+184]
	089 Move X9, 0xF09000
	090 Move X9, [X9+3240]
	091 Move [X8+8], X20
	092 Move X1, [X9]
	093 Move X0, X20
	094 Move X2, X31
	095 Call Path.Combine, X0, X1
	096 Move X8, [X22]
	097 Move X8, [X8+184]
	098 Move [X8+8], X0
	099 Move X1, X31
	100 Call Directory.Exists, X0
	101 Move X8, [X22]
	102 And W10, W0, 1
	103 Move X9, [X8+184]
	104 Move [X9], W10
	105 Move TEMP, X0
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfEqual {129}
	109 Move W10, [X8+224]
	110 Compare W10, 0
	111 JumpIfNotEqual {116}
	112 Move X0, X8
	113 Call 0x1C17DFC
	114 Move X8, [X22]
	115 Move X9, [X8+184]
	116 Move X0, [X9+8]
	117 Move X1, X31
	118 Call Directory.CreateDirectory, X0
	119 Move X8, [X22]
	120 Move W9, [X8+224]
	121 Compare W9, 0
	122 JumpIfNotEqual {126}
	123 Move X0, X8
	124 Call 0x1C17DFC
	125 Move X8, [X22]
	126 Move X9, [X8+184]
	127 Move W10, 1
	128 Move [X9], W10
	129 Move W9, [X8+224]
	130 Compare W9, 0
	131 JumpIfNotEqual {135}
	132 Move X0, X8
	133 Call 0x1C17DFC
	134 Move X8, [X22]
	135 Move X8, [X8+184]
	136 Move X0, [X8+8]
	137 Call KeyPairPersistence.IsUserProtected, X0
	138 Move TEMP, X0
	139 And TEMP, TEMP, 1
	140 Compare TEMP, 1
	141 JumpIfEqual {155}
	142 Move X0, [X22]
	143 Move W8, [X0+224]
	144 Compare W8, 0
	145 JumpIfNotEqual {148}
	146 Call 0x1C17DFC
	147 Move X0, [X22]
	148 Move X8, [X0+184]
	149 Move X0, [X8+8]
	150 Call KeyPairPersistence.ProtectUser, X0
	151 Move TEMP, X0
	152 And TEMP, TEMP, 1
	153 Compare TEMP, 1
	154 JumpIfNotEqual {230}
	155 Move X21, X31
	156 Move W20, 11
	157 Move W8, [X31+12]
	158 Compare W8, 0
	159 JumpIfEqual {163}
	160 Move X0, X19
	161 Move X1, X31
	162 Call Monitor.Exit, X0
	163 Compare X21, 0
	164 JumpIfNotEqual {197}
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Compare W20, 0
	167 JumpIfNotEqual {189}
	168 Move X0, [X22]
	169 Move W8, [X0+224]
	170 Compare W8, 0
	171 JumpIfNotEqual {174}
	172 Call 0x1C17DFC
	173 Move X0, [X22]
	174 Move X8, [X0+184]
	175 Move X0, [X8+8]
	176 Call KeyPairPersistence.IsUserProtected, X0
	177 Move TEMP, X0
	178 And TEMP, TEMP, 1
	179 Compare TEMP, 1
	180 JumpIfNotEqual {199}
	181 Move X0, [X22]
	182 Move W8, [X0+224]
	183 Compare W8, 0
	184 JumpIfNotEqual {187}
	185 Call 0x1C17DFC
	186 Move X0, [X22]
	187 Move X8, [X0+184]
	188 Move X0, [X8+8]
	189 Move X20, [X31+48]
	190 Move X19, [X31+56]
	191 Move X22, [X31+32]
	192 Move X21, [X31+40]
	193 Move X30, [X31+16]
	194 Move X23, [X31+24]
	195 Add X31, X31, 64
	196 Return X0
	197 Move X0, X21
	198 Call 0x1C17F18
	199 Move X0, 0xF09000
	200 Move X0, [X0+3280]
	201 Call 0x1C17D08
	202 Move X20, 0xF09000
	203 Move X20, [X20+3216]
	204 Move X19, X0
	205 Move X0, X20
	206 Call 0x1C17D08
	207 Call 0x19913D0
	208 Move X0, X20
	209 Call 0x1C17D08
	210 Move X8, [X0+184]
	211 Move X0, X19
	212 Move X2, X31
	213 Move X1, [X8+8]
	214 Call String.Format, X0, X1
	215 Move X19, X0
	216 Move X0, 0xF08000
	217 Move X0, [X0+3296]
	218 Call 0x1C17D08
	219 Call 0x1C17F10
	220 Move X1, X19
	221 Move X2, X31
	222 Move X20, X0
	223 Call CryptographicException..ctor, X0, X1
	224 Move X0, 0xF09000
	225 Move X0, [X0+3288]
	226 Call 0x1C17D08
	227 Move X1, X0
	228 Move X0, X20
	229 Call 0x1C17DEC
	230 Move X0, 0xF09000
	231 Move X0, [X0+3296]
	232 Call 0x1C17D08
	233 Move X20, X0
	234 Move X0, 0xF09000
	235 Move X0, [X0+3216]
	236 Call 0x1C17D08
	237 Move W8, [X0+224]
	238 Compare W8, 0
	239 JumpIfNotEqual {241}
	240 Call 0x1C17DFC
	241 Move X0, 0xF09000
	242 Move X0, [X0+3216]
	243 Call 0x1C17D08
	244 Move X8, [X0+184]
	245 Move X1, [X8+8]
	246 Move X0, X20
	247 Move X2, X31
	248 Call String.Format, X0, X1
	249 Move X20, X0
	250 Move X0, 0xF09000
	251 Move X0, [X0+1960]
	252 Call 0x1C17D08
	253 Call 0x1C17F10
	254 Move X21, X0
	255 Move X1, X20
	256 Move X2, X31
	257 Call IOException..ctor, X0, X1
	258 Move X0, 0xF09000
	259 Move X0, [X0+3288]
	260 Call 0x1C17D08
	261 Move X1, X0
	262 Move X0, X21
	263 Call 0x1C17DEC
	264 Move X21, X1
	265 Move X20, X0
	266 NotImplemented "Instruction CMP not yet implemented."
	267 Move X0, X20
	268 Call 0x3EB2AD0
	269 Move X20, X0
	270 Move X0, 0xEDB000
	271 Move X0, [X0+2000]
	272 Call 0x1C17D08
	273 Move X8, [X20]
	274 Move X1, [X8]
	275 Call 0x1C18270
	276 Move TEMP, X0
	277 And TEMP, TEMP, 1
	278 Compare TEMP, 1
	279 JumpIfNotEqual {317}
	280 Move X20, [X20]
	281 Call 0x3EB2AE0
	282 Move X0, 0xF09000
	283 Move X0, [X0+3304]
	284 Call 0x1C17D08
	285 Move X21, X0
	286 Move X0, 0xF09000
	287 Move X0, [X0+3216]
	288 Call 0x1C17D08
	289 Move W8, [X0+224]
	290 Compare W8, 0
	291 JumpIfNotEqual {293}
	292 Call 0x1C17DFC
	293 Move X0, 0xF09000
	294 Move X0, [X0+3216]
	295 Call 0x1C17D08
	296 Move X8, [X0+184]
	297 Move X1, [X8+8]
	298 Move X0, X21
	299 Move X2, X31
	300 Call String.Format, X0, X1
	301 Move X23, X0
	302 Move X0, 0xF08000
	303 Move X0, [X0+3296]
	304 Call 0x1C17D08
	305 Call 0x1C17F10
	306 Move X21, X0
	307 Move X1, X23
	308 Move X2, X20
	309 Move X3, X31
	310 Call CryptographicException..ctor, X0, X1, X2
	311 Move X0, 0xF09000
	312 Move X0, [X0+3288]
	313 Call 0x1C17D08
	314 Move X1, X0
	315 Move X0, X21
	316 Call 0x1C17DEC
	317 Move W0, 8
	318 Call 0x3EB2AF0
	319 Move X8, [X20]
	320 Move [X0], X8
	321 Move X1, 0xC9C000
	322 Add X1, X1, 3672
	323 Move X2, X31
	324 Call 0x3EB2B00
	325 Move X21, X1
	326 Move X20, X0
	327 Call 0x3EB2AE0
	328 Move X21, X1
	329 Move X20, X0
	330 NotImplemented "Instruction CMP not yet implemented."
	331 Move X0, X20
	332 Call 0x3EB2AD0
	333 Move X21, [X0]
	334 Call 0x3EB2AE0
	335 Move W20, W31
	336 Move X21, X31
	337 Move X20, X0
	338 Move W8, [X31+12]
	339 Compare W8, 0
	340 JumpIfEqual {344}
	341 Move X0, X19
	342 Move X1, X31
	343 Call Monitor.Exit, X0
	344 Compare X21, 0
	345 JumpIfNotEqual {348}
	346 Move X0, X20
	347 Call 0x1D2D690
	348 Move X0, X21
	349 Call 0x1C17F18
	350 Call 0x1991590

Method: System.String get_MachinePath()

Disassembly:
	0x032190C4 BL 0x1C16CF4
	0x032190C8 ADRP X0, 0xF08000
	0x032190CC LDR X0, [X0 + 0xD38]
	0x032190D0 BL 0x1C16CF4
	0x032190D4 MOVZ W8, 0x1
	0x032190D8 STRB W8, [X20 + 0x2E8]
	0x032190DC LDR X0, [X21]
	0x032190E0 BL 0x1C16F10
	0x032190E4 MOV X1, X31
	0x032190E8 MOV X20, X0
	0x032190EC BL 0x3231AC4
	0x032190F0 MOV X0, X31
	0x032190F4 BL 0x33C1548
	0x032190F8 CBZ X20, 0x321925C
	0x032190FC ADRP X8, 0xF08000
	0x03219100 LDR X8, [X8 + 0xD20]
	0x03219104 MOV X2, X0
	0x03219108 MOV X0, X20
	0x0321910C MOV X3, X31
	0x03219110 LDR X1, [X8]
	0x03219114 BL 0x3234224
	0x03219118 LDR X8, [X19 + 0x10]
	0x0321911C CBZ X8, 0x321925C
	0x03219120 LDR X2, [X8 + 0x18]
	0x03219124 CBZ X2, 0x3219150
	0x03219128 LDR W9, [X2 + 0x10]
	0x0321912C CBZ W9, 0x3219150
	0x03219130 ADRP X8, 0xF08000
	0x03219134 LDR X8, [X8 + 0xD28]
	0x03219138 MOV X0, X20
	0x0321913C MOV X3, X31
	0x03219140 LDR X1, [X8]
	0x03219144 BL 0x3234224
	0x03219148 LDR X8, [X19 + 0x10]
	0x0321914C CBZ X8, 0x321925C
	0x03219150 ADRP X22, 0xEDA000
	0x03219154 LDR X22, [X22 + 0x758]
	0x03219158 LDR W8, [X8 + 0x10]
	0x0321915C ADRP X23, 0xF08000
	0x03219160 ADRP X24, 0xF08000
	0x03219164 LDR X0, [X22]
	0x03219168 LDR X23, [X23 + 0xD10]
	0x0321916C LDR X24, [X24 + 0xD38]
	0x03219170 ADD X1, X31, 0xC
	0x03219174 STR W8, [X31 + 0xC]
	0x03219178 BL 0x1C16E04
	0x0321917C MOV X21, X0
	0x03219180 MOV X0, X31
	0x03219184 BL 0x33C1548
	0x03219188 LDR X1, [X23]
	0x0321918C MOV X3, X0
	0x03219190 MOV X0, X20
	0x03219194 MOV X2, X21
	0x03219198 MOV X4, X31
	0x0321919C BL 0x3234D98
	0x032191A0 MOV X0, X19
	0x032191A4 BL 0x3217FA4
	0x032191A8 MOV X21, X0
	0x032191AC MOV X0, X31
	0x032191B0 BL 0x33C1548
	0x032191B4 LDR X1, [X24]
	0x032191B8 MOV X3, X0
	0x032191BC MOV X0, X20
	0x032191C0 MOV X2, X21
	0x032191C4 MOV X4, X31
	0x032191C8 BL 0x3234D98
	0x032191CC LDR X8, [X19 + 0x10]
	0x032191D0 CBZ X8, 0x321925C
	0x032191D4 LDR W8, [X8 + 0x28]
	0x032191D8 ADRP X21, 0xF08000
	0x032191DC LDR X21, [X21 + 0xD18]
	0x032191E0 ADDS W31, W8, 0x1
	0x032191E4 B.EQ 0x3219214
	0x032191E8 LDR X0, [X22]
	0x032191EC ADRP X22, 0xF08000
	0x032191F0 LDR X22, [X22 + 0xD30]
	0x032191F4 ADD X1, X31, 0x8
	0x032191F8 STR W8, [X31 + 0x8]
	0x032191FC BL 0x1C16E04
	0x03219200 LDR X1, [X22]
	0x03219204 MOV X2, X0
	0x03219208 MOV X0, X20
	0x0321920C MOV X3, X31
	0x03219210 BL 0x3234224
	0x03219214 LDR X19, [X19 + 0x18]
	0x03219218 MOV X0, X31
	0x0321921C BL 0x33C1548
	0x03219220 LDR X1, [X21]
	0x03219224 MOV X3, X0
	0x03219228 MOV X0, X20
	0x0321922C MOV X2, X19
	0x03219230 MOV X4, X31
	0x03219234 BL 0x3234D98
	0x03219238 LDR X8, [X20]
	0x0321923C MOV X0, X20
	0x03219240 LDP X9, X1, [X8 + 0x168]
	0x03219244 BLR X9
	0x03219248 LDP X20, X19, [X31 + 0x30]
	0x0321924C LDP X22, X21, [X31 + 0x20]
	0x03219250 LDP X24, X23, [X31 + 0x10]
	0x03219254 LDR X30, [X31], #0x40
	0x03219258 RET
	0x0321925C BL 0x1C16F20
	0x03219260 STP X30, X21, [X31 - 0x20]!
	0x03219264 STP X20, X19, [X31 + 0x10]
	0x03219268 ADRP X21, 0x11C3000
	0x0321926C ADRP X20, 0xF08000
	0x03219270 LDRB W8, [X21 + 0x2E2]
	0x03219274 LDR X20, [X20 + 0xC90]
	0x03219278 MOV X19, X0
	0x0321927C TBNZ X8, 0x0, 0x3219294
	0x03219280 ADRP X0, 0xF08000
	0x03219284 LDR X0, [X0 + 0xC90]
	0x03219288 BL 0x1C16CF4
	0x0321928C MOVZ W8, 0x1
	0x03219290 STRB W8, [X21 + 0x2E2]
	0x03219294 LDR X0, [X20]
	0x03219298 LDR W8, [X0 + 0xE0]
	0x0321929C CBNZ W8, 0x32192A4
	0x032192A0 BL 0x1C16DFC
	0x032192A4 MOV X0, X19
	0x032192A8 BL 0x32194C8
	0x032192AC TBZ X0, 0x0, 0x32192E0
	0x032192B0 CBZ X19, 0x32192C0
	0x032192B4 MOV X0, X31
	0x032192B8 BL 0x32C1424
	0x032192BC ADD X19, X19, W0, SXTW
	0x032192C0 LDR X0, [X20]
	0x032192C4 LDR W8, [X0 + 0xE0]
	0x032192C8 CBNZ W8, 0x32192D0
	0x032192CC BL 0x1C16DFC
	0x032192D0 MOV X0, X19
	0x032192D4 LDP X20, X19, [X31 + 0x10]
	0x032192D8 LDP X30, X21, [X31], #0x20
	0x032192DC B 0x1C24408
	0x032192E0 LDP X20, X19, [X31 + 0x10]
	0x032192E4 MOVZ W0, 0x1
	0x032192E8 LDP X30, X21, [X31], #0x20
	0x032192EC RET
	0x032192F0 STP X30, X21, [X31 - 0x20]!
	0x032192F4 STP X20, X19, [X31 + 0x10]
	0x032192F8 ADRP X21, 0x11C3000
	0x032192FC ADRP X20, 0xF08000
	0x03219300 LDRB W8, [X21 + 0x2E1]
	0x03219304 LDR X20, [X20 + 0xC90]
	0x03219308 MOV X19, X0
	0x0321930C TBNZ X8, 0x0, 0x3219324
	0x03219310 ADRP X0, 0xF08000
	0x03219314 LDR X0, [X0 + 0xC90]
	0x03219318 BL 0x1C16CF4
	0x0321931C MOVZ W8, 0x1
	0x03219320 STRB W8, [X21 + 0x2E1]
	0x03219324 LDR X0, [X20]
	0x03219328 LDR W8, [X0 + 0xE0]
	0x0321932C CBNZ W8, 0x3219334
	0x03219330 BL 0x1C16DFC
	0x03219334 MOV X0, X19
	0x03219338 BL 0x32194C8
	0x0321933C TBZ X0, 0x0, 0x3219370
	0x03219340 CBZ X19, 0x3219350
	0x03219344 MOV X0, X31
	0x03219348 BL 0x32C1424
	0x0321934C ADD X19, X19, W0, SXTW
	0x03219350 LDR X0, [X20]
	0x03219354 LDR W8, [X0 + 0xE0]
	0x03219358 CBNZ W8, 0x3219360
	0x0321935C BL 0x1C16DFC
	0x03219360 MOV X0, X19
	0x03219364 LDP X20, X19, [X31 + 0x10]
	0x03219368 LDP X30, X21, [X31], #0x20
	0x0321936C B 0x1C24408
	0x03219370 LDP X20, X19, [X31 + 0x10]
	0x03219374 MOVZ W0, 0x1
	0x03219378 LDP X30, X21, [X31], #0x20
	0x0321937C RET
	0x03219380 STR X30, [X31 - 0x10]!
	0x03219384 BL 0x3217E14
	0x03219388 MOV X1, X31
	0x0321938C LDR X30, [X31], #0x10
	0x03219390 B 0x32ED09C
	0x03219394 STP X30, X21, [X31 - 0x20]!
	0x03219398 STP X20, X19, [X31 + 0x10]
	0x0321939C ADRP X21, 0x11C3000
	0x032193A0 ADRP X20, 0xF08000
	0x032193A4 LDRB W8, [X21 + 0x2E3]
	0x032193A8 LDR X20, [X20 + 0xC90]
	0x032193AC MOV X19, X0
	0x032193B0 TBNZ X8, 0x0, 0x32193C8
	0x032193B4 ADRP X0, 0xF08000
	0x032193B8 LDR X0, [X0 + 0xC90]
	0x032193BC BL 0x1C16CF4
	0x032193C0 MOVZ W8, 0x1
	0x032193C4 STRB W8, [X21 + 0x2E3]
	0x032193C8 LDR X0, [X20]
	0x032193CC LDR W8, [X0 + 0xE0]
	0x032193D0 CBNZ W8, 0x32193D8
	0x032193D4 BL 0x1C16DFC
	0x032193D8 MOV X0, X19
	0x032193DC BL 0x32194C8
	0x032193E0 TBZ X0, 0x0, 0x3219414
	0x032193E4 CBZ X19, 0x32193F4
	0x032193E8 MOV X0, X31
	0x032193EC BL 0x32C1424
	0x032193F0 ADD X19, X19, W0, SXTW
	0x032193F4 LDR X0, [X20]
	0x032193F8 LDR W8, [X0 + 0xE0]
	0x032193FC CBNZ W8, 0x3219404
	0x03219400 BL 0x1C16DFC
	0x03219404 MOV X0, X19
	0x03219408 LDP X20, X19, [X31 + 0x10]
	0x0321940C LDP X30, X21, [X31], #0x20
	0x03219410 B 0x1C24408
	0x03219414 LDP X20, X19, [X31 + 0x10]
	0x03219418 MOVZ W0, 0x1
	0x0321941C LDP X30, X21, [X31], #0x20
	0x03219420 RET
	0x03219424 STP X30, X21, [X31 - 0x20]!
	0x03219428 STP X20, X19, [X31 + 0x10]
	0x0321942C ADRP X21, 0x11C3000
	0x03219430 ADRP X20, 0xF08000
	0x03219434 LDRB W8, [X21 + 0x2E4]
	0x03219438 LDR X20, [X20 + 0xC90]
	0x0321943C MOV X19, X0
	0x03219440 TBNZ X8, 0x0, 0x3219458
	0x03219444 ADRP X0, 0xF08000
	0x03219448 LDR X0, [X0 + 0xC90]
	0x0321944C BL 0x1C16CF4
	0x03219450 MOVZ W8, 0x1
	0x03219454 STRB W8, [X21 + 0x2E4]
	0x03219458 LDR X0, [X20]
	0x0321945C LDR W8, [X0 + 0xE0]
	0x03219460 CBNZ W8, 0x3219468
	0x03219464 BL 0x1C16DFC
	0x03219468 MOV X0, X19
	0x0321946C BL 0x32194C8
	0x03219470 TBZ X0, 0x0, 0x32194A4
	0x03219474 CBZ X19, 0x3219484
	0x03219478 MOV X0, X31
	0x0321947C BL 0x32C1424
	0x03219480 ADD X19, X19, W0, SXTW
	0x03219484 LDR X0, [X20]
	0x03219488 LDR W8, [X0 + 0xE0]
	0x0321948C CBNZ W8, 0x3219494
	0x03219490 BL 0x1C16DFC
	0x03219494 MOV X0, X19
	0x03219498 LDP X20, X19, [X31 + 0x10]
	0x0321949C LDP X30, X21, [X31], #0x20
	0x032194A0 B 0x1C24408
	0x032194A4 LDP X20, X19, [X31 + 0x10]
	0x032194A8 MOVZ W0, 0x1
	0x032194AC LDP X30, X21, [X31], #0x20
	0x032194B0 RET
	0x032194B4 B 0x1C24408
	0x032194B8 B 0x1C24408
	0x032194BC B 0x1C24408
	0x032194C0 B 0x1C24408
	0x032194C4 B 0x1C24408
	0x032194C8 STR X30, [X31 - 0x20]!
	0x032194CC STP X20, X19, [X31 + 0x10]
	0x032194D0 ADRP X20, 0x11C3000
	0x032194D4 LDRB W8, [X20 + 0x2E0]
	0x032194D8 MOV X19, X0
	0x032194DC TBNZ X8, 0x0, 0x32194F4
	0x032194E0 ADRP X0, 0xF08000
	0x032194E4 LDR X0, [X0 + 0xC90]
	0x032194E8 BL 0x1C16CF4
	0x032194EC MOVZ W8, 0x1
	0x032194F0 STRB W8, [X20 + 0x2E0]
	0x032194F4 MOV X0, X31
	0x032194F8 BL 0x33C15B8
	0x032194FC CBZ X0, 0x3219564
	0x03219500 LDR W8, [X0 + 0x18]
	0x03219504 CMP W8, 0x4
	0x03219508 B.EQ 0x321951C
	0x0321950C CMP W8, 0x6
	0x03219510 B.EQ 0x321951C
	0x03219514 CMP W8, 0x80
	0x03219518 B.NE 0x321952C
	0x0321951C LDP X20, X19, [X31 + 0x10]
	0x03219520 MOVZ W0, 0x1
	0x03219524 LDR X30, [X31], #0x20
	0x03219528 RET
	0x0321952C CBZ X19, 0x321953C
	0x03219530 MOV X0, X31
	0x03219534 BL 0x32C1424
	0x03219538 ADD X19, X19, W0, SXTW
	0x0321953C ADRP X8, 0xF08000
	0x03219540 LDR X8, [X8 + 0xC90]
	0x03219544 LDR X0, [X8]
	0x03219548 LDR W8, [X0 + 0xE0]
	0x0321954C CBNZ W8, 0x3219554
	0x03219550 BL 0x1C16DFC
	0x03219554 MOV X0, X19
	0x03219558 LDP X20, X19, [X31 + 0x10]
	0x0321955C LDR X30, [X31], #0x20
	0x03219560 B 0x1C24408
	0x03219564 BL 0x1C16F20
	0x03219568 STR X30, [X31 - 0x10]!
	0x0321956C LDR X8, [X0 + 0x10]
	0x03219570 CBZ X8, 0x3219584
	0x03219574 LDRB W8, [X8 + 0x2C]
	0x03219578 UBFM W0, W8, 0x1, 0x1
	0x0321957C LDR X30, [X31], #0x10
	0x03219580 RET
	0x03219584 BL 0x1C16F20
	0x03219588 STP X30, X21, [X31 - 0x20]!
	0x0321958C STP X20, X19, [X31 + 0x10]
	0x03219590 ADRP X19, 0x11C3000
	0x03219594 ADRP X21, 0xEE0000
	0x03219598 ADRP X20, 0xF08000
	0x0321959C LDRB W8, [X19 + 0x2E9]
	0x032195A0 LDR X21, [X21 + 0xCC0]
	0x032195A4 LDR X20, [X20 + 0xC90]
	0x032195A8 TBNZ X8, 0x0, 0x32195CC
	0x032195AC ADRP X0, 0xF08000
	0x032195B0 LDR X0, [X0 + 0xC90]
	0x032195B4 BL 0x1C16CF4
	0x032195B8 ADRP X0, 0xEE0000
	0x032195BC LDR X0, [X0 + 0xCC0]
	0x032195C0 BL 0x1C16CF4
	0x032195C4 MOVZ W8, 0x1
	0x032195C8 STRB W8, [X19 + 0x2E9]
	0x032195CC LDR X0, [X21]
	0x032195D0 BL 0x1C16F10
	0x032195D4 MOV X1, X31
	0x032195D8 MOV X19, X0
	0x032195DC BL 0x33BDD8C
	0x032195E0 LDR X8, [X20]
	0x032195E4 LDR X8, [X8 + 0xB8]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, 0x11C4000
	009 Move X22, 0xF09000
	010 Move W8, [X19+735]
	011 Move X22, [X22+3216]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0xF09000
	017 Move X0, [X0+3216]
	018 Call 0x1C17CF4
	019 Move X0, 0xF02000
	020 Move X0, [X0+464]
	021 Call 0x1C17CF4
	022 Move X0, 0xF09000
	023 Move X0, [X0+664]
	024 Call 0x1C17CF4
	025 Move X0, 0xF09000
	026 Move X0, [X0+3240]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X19+735], W8
	030 Move X0, [X22]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {36}
	034 Call 0x1C17DFC
	035 Move X0, [X22]
	036 Move X8, [X0+184]
	037 Move X19, [X8+32]
	038 Move [X31+12], W31
	039 Add X1, X31, 12
	040 Move X0, X19
	041 Move X2, X31
	042 Call Monitor.Enter, X0, X1
	043 Move X8, [X22]
	044 Move W9, [X8+224]
	045 Compare W9, 0
	046 JumpIfNotEqual {50}
	047 Move X0, X8
	048 Call 0x1C17DFC
	049 Move X8, [X22]
	050 Move X9, [X8+184]
	051 Move X10, [X9+24]
	052 Compare X10, 0
	053 JumpIfEqual {64}
	054 Move W10, [X8+224]
	055 Compare W10, 0
	056 JumpIfNotEqual {61}
	057 Move X0, X8
	058 Call 0x1C17DFC
	059 Move X8, [X22]
	060 Move X9, [X8+184]
	061 Move W9, [X9+16]
	062 Compare W9, 0
	063 JumpIfNotEqual {129}
	064 Move W0, 35
	065 Move X1, X31
	066 Call Environment.GetFolderPath, X0
	067 Move X8, 0xF02000
	068 Move X8, [X8+464]
	069 Move X20, X0
	070 Move X0, [X8]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Move X8, 0xF09000
	076 Move X8, [X8+664]
	077 Move X1, [X8]
	078 Move X0, X20
	079 Move X2, X31
	080 Call Path.Combine, X0, X1
	081 Move X20, X0
	082 Move X0, [X22]
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {88}
	086 Call 0x1C17DFC
	087 Move X0, [X22]
	088 Move X8, [X0+184]
	089 Move X9, 0xF09000
	090 Move X9, [X9+3240]
	091 Move [X8+24], X20
	092 Move X1, [X9]
	093 Move X0, X20
	094 Move X2, X31
	095 Call Path.Combine, X0, X1
	096 Move X8, [X22]
	097 Move X8, [X8+184]
	098 Move [X8+24], X0
	099 Move X1, X31
	100 Call Directory.Exists, X0
	101 Move X8, [X22]
	102 And W10, W0, 1
	103 Move X9, [X8+184]
	104 Move [X9+16], W10
	105 Move TEMP, X0
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfEqual {129}
	109 Move W10, [X8+224]
	110 Compare W10, 0
	111 JumpIfNotEqual {116}
	112 Move X0, X8
	113 Call 0x1C17DFC
	114 Move X8, [X22]
	115 Move X9, [X8+184]
	116 Move X0, [X9+24]
	117 Move X1, X31
	118 Call Directory.CreateDirectory, X0
	119 Move X8, [X22]
	120 Move W9, [X8+224]
	121 Compare W9, 0
	122 JumpIfNotEqual {126}
	123 Move X0, X8
	124 Call 0x1C17DFC
	125 Move X8, [X22]
	126 Move X9, [X8+184]
	127 Move W10, 1
	128 Move [X9+16], W10
	129 Move W9, [X8+224]
	130 Compare W9, 0
	131 JumpIfNotEqual {135}
	132 Move X0, X8
	133 Call 0x1C17DFC
	134 Move X8, [X22]
	135 Move X8, [X8+184]
	136 Move X0, [X8+24]
	137 Call KeyPairPersistence.IsMachineProtected, X0
	138 Move TEMP, X0
	139 And TEMP, TEMP, 1
	140 Compare TEMP, 1
	141 JumpIfEqual {155}
	142 Move X0, [X22]
	143 Move W8, [X0+224]
	144 Compare W8, 0
	145 JumpIfNotEqual {148}
	146 Call 0x1C17DFC
	147 Move X0, [X22]
	148 Move X8, [X0+184]
	149 Move X0, [X8+24]
	150 Call KeyPairPersistence.ProtectMachine, X0
	151 Move TEMP, X0
	152 And TEMP, TEMP, 1
	153 Compare TEMP, 1
	154 JumpIfNotEqual {230}
	155 Move X21, X31
	156 Move W20, 11
	157 Move W8, [X31+12]
	158 Compare W8, 0
	159 JumpIfEqual {163}
	160 Move X0, X19
	161 Move X1, X31
	162 Call Monitor.Exit, X0
	163 Compare X21, 0
	164 JumpIfNotEqual {197}
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Compare W20, 0
	167 JumpIfNotEqual {189}
	168 Move X0, [X22]
	169 Move W8, [X0+224]
	170 Compare W8, 0
	171 JumpIfNotEqual {174}
	172 Call 0x1C17DFC
	173 Move X0, [X22]
	174 Move X8, [X0+184]
	175 Move X0, [X8+24]
	176 Call KeyPairPersistence.IsMachineProtected, X0
	177 Move TEMP, X0
	178 And TEMP, TEMP, 1
	179 Compare TEMP, 1
	180 JumpIfNotEqual {199}
	181 Move X0, [X22]
	182 Move W8, [X0+224]
	183 Compare W8, 0
	184 JumpIfNotEqual {187}
	185 Call 0x1C17DFC
	186 Move X0, [X22]
	187 Move X8, [X0+184]
	188 Move X0, [X8+24]
	189 Move X20, [X31+48]
	190 Move X19, [X31+56]
	191 Move X22, [X31+32]
	192 Move X21, [X31+40]
	193 Move X30, [X31+16]
	194 Move X23, [X31+24]
	195 Add X31, X31, 64
	196 Return X0
	197 Move X0, X21
	198 Call 0x1C17F18
	199 Move X0, 0xF09000
	200 Move X0, [X0+3248]
	201 Call 0x1C17D08
	202 Move X20, 0xF09000
	203 Move X20, [X20+3216]
	204 Move X19, X0
	205 Move X0, X20
	206 Call 0x1C17D08
	207 Call 0x19913D0
	208 Move X0, X20
	209 Call 0x1C17D08
	210 Move X8, [X0+184]
	211 Move X0, X19
	212 Move X2, X31
	213 Move X1, [X8+24]
	214 Call String.Format, X0, X1
	215 Move X19, X0
	216 Move X0, 0xF08000
	217 Move X0, [X0+3296]
	218 Call 0x1C17D08
	219 Call 0x1C17F10
	220 Move X1, X19
	221 Move X2, X31
	222 Move X20, X0
	223 Call CryptographicException..ctor, X0, X1
	224 Move X0, 0xF09000
	225 Move X0, [X0+3256]
	226 Call 0x1C17D08
	227 Move X1, X0
	228 Move X0, X20
	229 Call 0x1C17DEC
	230 Move X0, 0xF09000
	231 Move X0, [X0+3264]
	232 Call 0x1C17D08
	233 Move X20, X0
	234 Move X0, 0xF09000
	235 Move X0, [X0+3216]
	236 Call 0x1C17D08
	237 Move W8, [X0+224]
	238 Compare W8, 0
	239 JumpIfNotEqual {241}
	240 Call 0x1C17DFC
	241 Move X0, 0xF09000
	242 Move X0, [X0+3216]
	243 Call 0x1C17D08
	244 Move X8, [X0+184]
	245 Move X1, [X8+24]
	246 Move X0, X20
	247 Move X2, X31
	248 Call String.Format, X0, X1
	249 Move X20, X0
	250 Move X0, 0xF09000
	251 Move X0, [X0+1960]
	252 Call 0x1C17D08
	253 Call 0x1C17F10
	254 Move X21, X0
	255 Move X1, X20
	256 Move X2, X31
	257 Call IOException..ctor, X0, X1
	258 Move X0, 0xF09000
	259 Move X0, [X0+3256]
	260 Call 0x1C17D08
	261 Move X1, X0
	262 Move X0, X21
	263 Call 0x1C17DEC
	264 Move X21, X1
	265 Move X20, X0
	266 NotImplemented "Instruction CMP not yet implemented."
	267 Move X0, X20
	268 Call 0x3EB2AD0
	269 Move X20, X0
	270 Move X0, 0xEDB000
	271 Move X0, [X0+2000]
	272 Call 0x1C17D08
	273 Move X8, [X20]
	274 Move X1, [X8]
	275 Call 0x1C18270
	276 Move TEMP, X0
	277 And TEMP, TEMP, 1
	278 Compare TEMP, 1
	279 JumpIfNotEqual {317}
	280 Move X20, [X20]
	281 Call 0x3EB2AE0
	282 Move X0, 0xF09000
	283 Move X0, [X0+3272]
	284 Call 0x1C17D08
	285 Move X21, X0
	286 Move X0, 0xF09000
	287 Move X0, [X0+3216]
	288 Call 0x1C17D08
	289 Move W8, [X0+224]
	290 Compare W8, 0
	291 JumpIfNotEqual {293}
	292 Call 0x1C17DFC
	293 Move X0, 0xF09000
	294 Move X0, [X0+3216]
	295 Call 0x1C17D08
	296 Move X8, [X0+184]
	297 Move X1, [X8+24]
	298 Move X0, X21
	299 Move X2, X31
	300 Call String.Format, X0, X1
	301 Move X23, X0
	302 Move X0, 0xF08000
	303 Move X0, [X0+3296]
	304 Call 0x1C17D08
	305 Call 0x1C17F10
	306 Move X21, X0
	307 Move X1, X23
	308 Move X2, X20
	309 Move X3, X31
	310 Call CryptographicException..ctor, X0, X1, X2
	311 Move X0, 0xF09000
	312 Move X0, [X0+3256]
	313 Call 0x1C17D08
	314 Move X1, X0
	315 Move X0, X21
	316 Call 0x1C17DEC
	317 Move W0, 8
	318 Call 0x3EB2AF0
	319 Move X8, [X20]
	320 Move [X0], X8
	321 Move X1, 0xC9C000
	322 Add X1, X1, 3672
	323 Move X2, X31
	324 Call 0x3EB2B00
	325 Move X21, X1
	326 Move X20, X0
	327 Call 0x3EB2AE0
	328 Move X21, X1
	329 Move X20, X0
	330 NotImplemented "Instruction CMP not yet implemented."
	331 Move X0, X20
	332 Call 0x3EB2AD0
	333 Move X21, [X0]
	334 Call 0x3EB2AE0
	335 Move W20, W31
	336 Move X21, X31
	337 Move X20, X0
	338 Move W8, [X31+12]
	339 Compare W8, 0
	340 JumpIfEqual {344}
	341 Move X0, X19
	342 Move X1, X31
	343 Call Monitor.Exit, X0
	344 Compare X21, 0
	345 JumpIfNotEqual {348}
	346 Move X0, X20
	347 Call 0x1D2D690
	348 Move X0, X21
	349 Call 0x1C17F18
	350 Call 0x1991590

Method: System.Boolean _CanSecure(System.Char* root)

Disassembly:
	0x0321A4B4 EOR W7, W20, W21, 0x1D

ISIL:
	001 Call 0x1C25408
	002 Return X0

Method: System.Boolean _ProtectUser(System.Char* path)

Disassembly:
	0x0321A4B8 ADD W14, W14, W0

ISIL:
	001 Call 0x1C25408
	002 Return X0

Method: System.Boolean _ProtectMachine(System.Char* path)

Disassembly:
	0x0321A4BC EOR W7, W7, W14, 0x15

ISIL:
	001 Call 0x1C25408
	002 Return X0

Method: System.Boolean _IsUserProtected(System.Char* path)

Disassembly:
	0x0321A4C0 ADD W2, W2, W20

ISIL:
	001 Call 0x1C25408
	002 Return X0

Method: System.Boolean _IsMachineProtected(System.Char* path)

Disassembly:
	0x0321A4C4 EXTR W20, W14, W14, 0x15

ISIL:
	001 Call 0x1C25408
	002 Return X0

Method: System.Boolean CanSecure(System.String path)

Disassembly:
	0x0321A4C8 ADD W4, W4, W7
	0x0321A4CC EOR W6, W20, W6, 0x17
	0x0321A4D0 ADD W4, W4, W0
	0x0321A4D4 ADD W12, W12, W22
	0x0321A4D8 EOR W6, W6, W4, 0x11
	0x0321A4DC EXTR W7, W4, W4, 0x11
	0x0321A4E0 ADD W12, W12, W6
	0x0321A4E4 EOR W14, W7, W14, 0x15
	0x0321A4E8 ADD W12, W12, W0
	0x0321A4EC EOR W14, W14, W12, 0x1D
	0x0321A4F0 EXTR W6, W12, W12, 0x1D
	0x0321A4F4 ADD W14, W2, W14
	0x0321A4F8 EOR W2, W6, W4, 0x11
	0x0321A4FC ADD W14, W14, W0
	0x0321A500 ADD W15, W15, W20
	0x0321A504 EOR W2, W2, W14, 0x17
	0x0321A508 EXTR W4, W14, W14, 0x17
	0x0321A50C ADD W15, W15, W2
	0x0321A510 EOR W12, W4, W12, 0x1D
	0x0321A514 ADD W15, W15, W0
	0x0321A518 ADD W5, W5, W7
	0x0321A51C EOR W12, W12, W15, 0x15
	0x0321A520 EXTR W2, W15, W15, 0x15
	0x0321A524 ADD W12, W5, W12
	0x0321A528 EOR W14, W2, W14, 0x17
	0x0321A52C ADD W12, W12, W0
	0x0321A530 ADD W9, W9, W6
	0x0321A534 EOR W14, W14, W12, 0x11
	0x0321A538 ADD W2, W13, W2
	0x0321A53C EXTR W13, W12, W12, 0x11
	0x0321A540 ADD W9, W9, W14
	0x0321A544 EOR W14, W13, W15, 0x15
	0x0321A548 ADD W9, W9, W0
	0x0321A54C ADD W17, W17, W4
	0x0321A550 EOR W14, W14, W9, 0x1D
	0x0321A554 ADD W15, W3, W13
	0x0321A558 EXTR W13, W9, W9, 0x1D
	0x0321A55C ADD W14, W17, W14
	0x0321A560 EOR W12, W13, W12, 0x11
	0x0321A564 ADD W14, W14, W0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11C3000
	005 Move W8, [X20+736]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF08000
	012 Move X0, [X0+3216]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+736], W8
	016 Move X0, X31
	017 Call Environment.get_OSVersion
	018 Compare X0, 0
	019 JumpIfEqual {47}
	020 Move W8, [X0+24]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 NotImplemented "Instruction CMP not yet implemented."
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move W0, 1
	027 Move X30, [X31+32]
	028 Return X0
	029 Compare X19, 0
	030 JumpIfEqual {34}
	031 Move X0, X31
	032 Call RuntimeHelpers.get_OffsetToStringData
	033 Add X19, X19, W0
	034 Move X8, 0xF08000
	035 Move X8, [X8+3216]
	036 Move X0, [X8]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X0, X19
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Call 0x1C25408
	046 Return X0
	047 Call 0x1C17F20

Method: System.Boolean ProtectUser(System.String path)

Disassembly:
	0x0321A2F0 AND W24, W24, W21, 0x13
	0x0321A2F4 ADD W26, W9, W26
	0x0321A2F8 ORR W22, W24, W22, 0x0
	0x0321A2FC EXTR W23, W21, W21, 0x13
	0x0321A300 ADD W22, W26, W22
	0x0321A304 ORR W24, W23, W20, 0x17
	0x0321A308 ADD W22, W22, W7
	0x0321A30C AND W20, W23, W20, 0x17
	0x0321A310 AND W24, W24, W22, 0x1D
	0x0321A314 ADD W27, W13, W27
	0x0321A318 ORR W20, W24, W20, 0x0
	0x0321A31C EXTR W26, W22, W22, 0x1D
	0x0321A320 ADD W20, W27, W20
	0x0321A324 ORR W24, W26, W21, 0x13
	0x0321A328 ADD W20, W20, W7
	0x0321A32C AND W21, W26, W21, 0x13
	0x0321A330 AND W24, W24, W20, 0x1B
	0x0321A334 ADD W25, W17, W25
	0x0321A338 ORR W21, W24, W21, 0x0
	0x0321A33C EXTR W27, W20, W20, 0x1B
	0x0321A340 ADD W21, W25, W21
	0x0321A344 ORR W24, W27, W22, 0x1D
	0x0321A348 ADD W21, W21, W7
	0x0321A34C AND W22, W27, W22, 0x1D
	0x0321A350 AND W24, W24, W21, 0x17
	0x0321A354 ADD W23, W3, W23
	0x0321A358 ORR W22, W24, W22, 0x0
	0x0321A35C EXTR W25, W21, W21, 0x17
	0x0321A360 ADD W22, W23, W22
	0x0321A364 ORR W24, W25, W20, 0x1B
	0x0321A368 ADD W22, W22, W7
	0x0321A36C AND W20, W25, W20, 0x1B
	0x0321A370 AND W24, W24, W22, 0x13
	0x0321A374 ADD W26, W12, W26
	0x0321A378 ORR W20, W24, W20, 0x0
	0x0321A37C EXTR W23, W22, W22, 0x13

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11C3000
	006 Move X20, 0xF08000
	007 Move W8, [X21+737]
	008 Move X20, [X20+3216]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF08000
	015 Move X0, [X0+3216]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+737], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call KeyPairPersistence.CanSecure, X0
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {47}
	030 Compare X19, 0
	031 JumpIfEqual {35}
	032 Move X0, X31
	033 Call RuntimeHelpers.get_OffsetToStringData
	034 Add X19, X19, W0
	035 Move X0, [X20]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X19
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Call 0x1C25408
	046 Return X0
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move W0, 1
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Return X0

Method: System.Boolean ProtectMachine(System.String path)

Disassembly:
	0x0321A260 ADD W20, W21, W20
	0x0321A264 ADD W27, W14, W23
	0x0321A268 ORR W23, W22, W23, 0x0
	0x0321A26C ADD W20, W20, W1
	0x0321A270 AND W23, W23, W20, 0xD
	0x0321A274 MOVZ W7, 0x7999
	0x0321A278 ORR W23, W23, W24, 0x0
	0x0321A27C MOVK W7, 0x5A820000
	0x0321A280 ADD W23, W26, W23
	0x0321A284 ORR W24, W22, W20, 0xD
	0x0321A288 ADD W23, W23, W7
	0x0321A28C ADD W25, W6, W22
	0x0321A290 AND W22, W22, W20, 0xD
	0x0321A294 AND W24, W24, W23, 0x1D
	0x0321A298 ORR W22, W24, W22, 0x0
	0x0321A29C EXTR W26, W23, W23, 0x1D
	0x0321A2A0 ADD W22, W27, W22
	0x0321A2A4 ORR W24, W26, W20, 0xD
	0x0321A2A8 ADD W22, W22, W7
	0x0321A2AC EXTR W21, W20, W20, 0xD
	0x0321A2B0 AND W20, W26, W20, 0xD
	0x0321A2B4 AND W24, W24, W22, 0x1B
	0x0321A2B8 ORR W20, W24, W20, 0x0
	0x0321A2BC EXTR W27, W22, W22, 0x1B
	0x0321A2C0 ADD W20, W25, W20
	0x0321A2C4 ORR W24, W27, W23, 0x1D
	0x0321A2C8 ADD W20, W20, W7
	0x0321A2CC AND W23, W27, W23, 0x1D
	0x0321A2D0 AND W24, W24, W20, 0x17
	0x0321A2D4 ADD W21, W4, W21
	0x0321A2D8 ORR W23, W24, W23, 0x0
	0x0321A2DC EXTR W25, W20, W20, 0x17
	0x0321A2E0 ADD W21, W21, W23
	0x0321A2E4 ORR W24, W25, W22, 0x1B
	0x0321A2E8 ADD W21, W21, W7
	0x0321A2EC AND W22, W25, W22, 0x1B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11C3000
	006 Move X20, 0xF08000
	007 Move W8, [X21+738]
	008 Move X20, [X20+3216]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF08000
	015 Move X0, [X0+3216]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+738], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call KeyPairPersistence.CanSecure, X0
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {47}
	030 Compare X19, 0
	031 JumpIfEqual {35}
	032 Move X0, X31
	033 Call RuntimeHelpers.get_OffsetToStringData
	034 Add X19, X19, W0
	035 Move X0, [X20]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X19
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Call 0x1C25408
	046 Return X0
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move W0, 1
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Return X0

Method: System.Boolean IsUserProtected(System.String path)

Disassembly:
	0x0321A394 ADD W27, W15, W27
	0x0321A398 ORR W21, W24, W21, 0x0
	0x0321A39C EXTR W26, W20, W20, 0x1D
	0x0321A3A0 ADD W21, W27, W21
	0x0321A3A4 ORR W24, W26, W22, 0x13
	0x0321A3A8 ADD W21, W21, W7
	0x0321A3AC AND W22, W26, W22, 0x13
	0x0321A3B0 AND W24, W24, W21, 0x1B
	0x0321A3B4 ADD W25, W2, W25
	0x0321A3B8 EXTR W27, W21, W21, 0x1B
	0x0321A3BC ORR W22, W24, W22, 0x0
	0x0321A3C0 ORR W24, W27, W20, 0x1D
	0x0321A3C4 AND W28, W27, W20, 0x1D
	0x0321A3C8 ADD W20, W25, W22
	0x0321A3CC ADD W22, W20, W7
	0x0321A3D0 AND W24, W24, W22, 0x17
	0x0321A3D4 ADD W23, W5, W23
	0x0321A3D8 ORR W24, W24, W28, 0x0
	0x0321A3DC EXTR W20, W22, W22, 0x17
	0x0321A3E0 ADD W23, W23, W24
	0x0321A3E4 ORR W25, W20, W21, 0x1B
	0x0321A3E8 ADD W23, W23, W7
	0x0321A3EC AND W21, W20, W21, 0x1B
	0x0321A3F0 AND W25, W25, W23, 0x13
	0x0321A3F4 ADD W26, W10, W26
	0x0321A3F8 ORR W21, W25, W21, 0x0
	0x0321A3FC EXTR W24, W23, W23, 0x13
	0x0321A400 ADD W21, W26, W21
	0x0321A404 ORR W25, W24, W22, 0x17
	0x0321A408 ADD W21, W21, W7
	0x0321A40C AND W22, W24, W22, 0x17
	0x0321A410 AND W25, W25, W21, 0x1D
	0x0321A414 ORR W22, W25, W22, 0x0
	0x0321A418 ADD W27, W11, W27
	0x0321A41C EXTR W26, W21, W21, 0x1D
	0x0321A420 ADD W22, W27, W22

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11C3000
	006 Move X20, 0xF08000
	007 Move W8, [X21+739]
	008 Move X20, [X20+3216]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF08000
	015 Move X0, [X0+3216]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+739], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call KeyPairPersistence.CanSecure, X0
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {47}
	030 Compare X19, 0
	031 JumpIfEqual {35}
	032 Move X0, X31
	033 Call RuntimeHelpers.get_OffsetToStringData
	034 Add X19, X19, W0
	035 Move X0, [X20]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X19
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Call 0x1C25408
	046 Return X0
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move W0, 1
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Return X0

Method: System.Boolean IsMachineProtected(System.String path)

Disassembly:
	0x0321A424 ORR W25, W26, W23, 0x13
	0x0321A428 ADD W22, W22, W7
	0x0321A42C AND W23, W26, W23, 0x13
	0x0321A430 AND W25, W25, W22, 0x1B
	0x0321A434 ORR W23, W25, W23, 0x0
	0x0321A438 ADD W20, W16, W20
	0x0321A43C EXTR W27, W22, W22, 0x1B
	0x0321A440 ADD W20, W20, W23
	0x0321A444 ORR W25, W27, W21, 0x1D
	0x0321A448 ADD W20, W20, W7
	0x0321A44C AND W21, W27, W21, 0x1D
	0x0321A450 AND W25, W25, W20, 0x17
	0x0321A454 ADD W24, W1, W24
	0x0321A458 ORR W21, W25, W21, 0x0
	0x0321A45C ADD W21, W24, W21
	0x0321A460 ADD W7, W21, W7
	0x0321A464 EXTR W21, W7, W7, 0x13
	0x0321A468 EXTR W23, W20, W20, 0x17
	0x0321A46C EOR W20, W21, W20, 0x17
	0x0321A470 ADD W26, W0, W26
	0x0321A474 MOVZ W0, 0xEBA1
	0x0321A478 ADD W4, W4, W21
	0x0321A47C EOR W21, W20, W22, 0x1B
	0x0321A480 MOVK W0, 0x6ED90000
	0x0321A484 ADD W21, W26, W21
	0x0321A488 ADD W21, W21, W0
	0x0321A48C ADD W6, W6, W27
	0x0321A490 EOR W20, W20, W21, 0x1D
	0x0321A494 EXTR W22, W21, W21, 0x1D
	0x0321A498 ADD W6, W6, W20
	0x0321A49C EOR W7, W22, W7, 0x13
	0x0321A4A0 ADD W6, W6, W0
	0x0321A4A4 ADD W14, W14, W23
	0x0321A4A8 EOR W7, W7, W6, 0x17
	0x0321A4AC EXTR W20, W6, W6, 0x17
	0x0321A4B0 ADD W14, W14, W7

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11C3000
	006 Move X20, 0xF08000
	007 Move W8, [X21+740]
	008 Move X20, [X20+3216]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF08000
	015 Move X0, [X0+3216]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+740], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call KeyPairPersistence.CanSecure, X0
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {47}
	030 Compare X19, 0
	031 JumpIfEqual {35}
	032 Move X0, X31
	033 Call RuntimeHelpers.get_OffsetToStringData
	034 Add X19, X19, W0
	035 Move X0, [X20]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X19
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Call 0x1C25408
	046 Return X0
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move W0, 1
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Return X0

Method: System.Boolean get_CanChange()

Disassembly:
	0x03219B28 LDP X20, X19, [X31 + 0x50]
	0x03219B2C LDP X22, X21, [X31 + 0x40]
	0x03219B30 LDP X24, X23, [X31 + 0x30]
	0x03219B34 LDP X26, X25, [X31 + 0x20]

ISIL:
	001 Move X8, [X0+24]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Boolean get_UseDefaultKeyContainer()

Disassembly:
	0x0321A568 EOR W12, W12, W14, 0x17
	0x0321A56C ADD W10, W10, W13
	0x0321A570 EXTR W13, W14, W14, 0x17
	0x0321A574 ADD W12, W2, W12
	0x0321A578 EOR W17, W13, W9, 0x1D
	0x0321A57C ADD W9, W12, W0
	0x0321A580 EOR W17, W17, W9, 0x15
	0x0321A584 EXTR W12, W9, W9, 0x15

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move W8, [X8+44]
	006 Move W0, W8
	007 ShiftRight W0, 1
	008 And W0, W0, 1
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

Method: System.Boolean get_UseMachineKeyStore()

Disassembly:
	0x032190A4 ADRP X0, 0xF08000
	0x032190A8 LDR X0, [X0 + 0xD20]
	0x032190AC BL 0x1C16CF4
	0x032190B0 ADRP X0, 0xF08000
	0x032190B4 LDR X0, [X0 + 0xD28]
	0x032190B8 BL 0x1C16CF4
	0x032190BC ADRP X0, 0xF08000
	0x032190C0 LDR X0, [X0 + 0xD30]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {9}
	005 Move W8, [X8+44]
	006 And W0, W8, 1
	007 Move X30, [X31+16]
	008 Return X0
	009 Call 0x1C17F20

Method: System.String get_ContainerName()

Disassembly:
	0x03218FA4 B 0x3218FAC
	0x03218FA8 B 0x3218FAC
	0x03218FAC MOV X22, X0
	0x03218FB0 CMP W1, 0x1
	0x03218FB4 B.NE 0x3218FCC
	0x03218FB8 MOV X0, X22
	0x03218FBC BL 0x3EB1AD0
	0x03218FC0 LDR X21, [X0]
	0x03218FC4 BL 0x3EB1AE0
	0x03218FC8 B 0x3218ED8
	0x03218FCC MOV X21, X31
	0x03218FD0 B 0x3218FD8
	0x03218FD4 MOV X22, X0
	0x03218FD8 CBZ X19, 0x3219034
	0x03218FDC LDR X8, [X19]
	0x03218FE0 LDR X1, [X23]
	0x03218FE4 LDRH W9, [X8 + 0x12E]
	0x03218FE8 CBZ X9, 0x321900C
	0x03218FEC LDR X10, [X8 + 0xB0]
	0x03218FF0 ADD X10, X10, 0x8
	0x03218FF4 LDUR X11, [X10 - 0x8]
	0x03218FF8 CMP X11, X1
	0x03218FFC B.EQ 0x321901C
	0x03219000 SUBS X9, X9, 0x1
	0x03219004 ADD X10, X10, 0x10
	0x03219008 B.NE 0x3218FF4
	0x0321900C MOV X0, X19
	0x03219010 MOV W2, W31
	0x03219014 BL 0x1C5C788
	0x03219018 B 0x3219028
	0x0321901C LDRSW X9, [X10]
	0x03219020 ADD X8, X8, X9, 0x4, LSL
	0x03219024 ADD X0, X8, 0x138
	0x03219028 LDP X8, X1, [X0]
	0x0321902C MOV X0, X19
	0x03219030 BLR X8
	0x03219034 CBNZ X21, 0x3219040
	0x03219038 MOV X0, X22
	0x0321903C BL 0x1D2C690
	0x03219040 MOV X0, X21
	0x03219044 BL 0x1C16F18
	0x03219048 BL 0x1990590
	0x0321904C STR X30, [X31 - 0x40]!
	0x03219050 STP X24, X23, [X31 + 0x10]
	0x03219054 STP X22, X21, [X31 + 0x20]
	0x03219058 STP X20, X19, [X31 + 0x30]
	0x0321905C ADRP X20, 0x11C3000
	0x03219060 ADRP X21, 0xEDA000
	0x03219064 LDRB W8, [X20 + 0x2E8]
	0x03219068 LDR X21, [X21 + 0x8F0]
	0x0321906C MOV X19, X0
	0x03219070 TBNZ X8, 0x0, 0x32190DC
	0x03219074 ADRP X0, 0xEDA000
	0x03219078 LDR X0, [X0 + 0x758]
	0x0321907C BL 0x1C16CF4
	0x03219080 ADRP X0, 0xEDA000
	0x03219084 LDR X0, [X0 + 0x8F0]
	0x03219088 BL 0x1C16CF4
	0x0321908C ADRP X0, 0xF08000
	0x03219090 LDR X0, [X0 + 0xD10]
	0x03219094 BL 0x1C16CF4
	0x03219098 ADRP X0, 0xF08000
	0x0321909C LDR X0, [X0 + 0xD18]
	0x032190A0 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x11C5000
	006 Move W8, [X20+741]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xF0A000
	013 Move X0, [X0+3232]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+741], W8
	017 Move [X31+16], X31
	018 Move [X31+24], X31
	019 Move X0, [X19+40]
	020 Compare X0, 0
	021 JumpIfNotEqual {75}
	022 Move X8, [X19+16]
	023 Compare X8, 0
	024 JumpIfEqual {80}
	025 Move W9, [X8+44]
	026 Move TEMP, X9
	027 And TEMP, TEMP, 2
	028 Compare TEMP, 2
	029 JumpIfEqual {64}
	030 Move X8, [X8+32]
	031 Compare X8, 0
	032 JumpIfEqual {67}
	033 Move W8, [X8+16]
	034 Compare W8, 0
	035 JumpIfEqual {67}
	036 Move X0, X31
	037 Call Encoding.get_UTF8
	038 Move X8, [X19+16]
	039 Compare X8, 0
	040 JumpIfEqual {80}
	041 Compare X0, 0
	042 JumpIfEqual {80}
	043 Move X9, [X0]
	044 Move X1, [X8+32]
	045 Move X8, [X9+616]
	046 Move X2, [X9+624]
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Move X20, X0
	049 Move X0, X31
	050 Call MD5.Create
	051 Compare X0, 0
	052 JumpIfEqual {80}
	053 Move X1, X20
	054 Move X2, X31
	055 Call HashAlgorithm.ComputeHash, X0, X1
	056 Move X1, X0
	057 Add X0, X31, 0
	058 Move X2, X31
	059 Move [X31], X31
	060 Move [X31+8], X31
	061 Call Guid..ctor, X0, X1
	062 Move V0, [X31]
	063 Move [X31+1], V0
	064 Move X8, 0xF09000
	065 Move X8, [X8+3232]
	066 Move X0, [X8]
	067 Move X0, X31
	068 Call Guid.NewGuid
	069 Move [X31+16], X0
	070 Move [X31+24], X1
	071 Add X0, X31, 16
	072 Move X1, X31
	073 Call Guid.ToString, X0
	074 Move [X19+40], X0
	075 Move X20, [X31+48]
	076 Move X19, [X31+56]
	077 Move X30, [X31+32]
	078 Add X31, X31, 64
	079 Return X0
	080 Call 0x1C17F20

Method: System.Security.Cryptography.CspParameters Copy(System.Security.Cryptography.CspParameters p)

Disassembly:
	0x03218D7C BL 0x321BA08
	0x03218D80 TBZ X0, 0x0, 0x3218DF4
	0x03218D84 ADRP X8, 0xF09000
	0x03218D88 LDR X8, [X8 + 0xD00]
	0x03218D8C MOV X0, X20
	0x03218D90 MOV X2, X31
	0x03218D94 LDR X1, [X8]
	0x03218D98 BL 0x3249D78
	0x03218D9C CBZ X0, 0x3218E04
	0x03218DA0 MOV X20, X0
	0x03218DA4 LDR X0, [X0 + 0x28]
	0x03218DA8 CBZ X0, 0x3218E04
	0x03218DAC LDR X8, [X0]
	0x03218DB0 LDR X9, [X8 + 0x298]
	0x03218DB4 LDR X1, [X8 + 0x2A0]
	0x03218DB8 BLR X9
	0x03218DBC CMP W0, 0x1
	0x03218DC0 B.LT 0x3218DF4
	0x03218DC4 LDR X0, [X20 + 0x28]
	0x03218DC8 CBZ X0, 0x3218E04
	0x03218DCC LDR X8, [X0]
	0x03218DD0 MOV W1, W31
	0x03218DD4 LDR X9, [X8 + 0x2E8]
	0x03218DD8 LDR X2, [X8 + 0x2F0]
	0x03218DDC BLR X9
	0x03218DE0 CBZ X0, 0x3218E04
	0x03218DE4 LDR X8, [X0]
	0x03218DE8 LDP X9, X1, [X8 + 0x168]
	0x03218DEC BLR X9
	0x03218DF0 STR X0, [X19 + 0x18]
	0x03218DF4 LDP X20, X19, [X31 + 0x20]
	0x03218DF8 LDP X22, X21, [X31 + 0x10]
	0x03218DFC LDR X30, [X31], #0x30
	0x03218E00 RET
	0x03218E04 BL 0x1C16F20
	0x03218E08 STP X30, X23, [X31 - 0x30]!
	0x03218E0C STP X22, X21, [X31 + 0x10]
	0x03218E10 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x11C5000
	008 Move W8, [X20+742]
	009 Move X19, X1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF0A000
	015 Move X0, [X0+1224]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+742], W8
	019 Compare X19, 0
	020 JumpIfEqual {50}
	021 Move X8, 0xF0A000
	022 Move X8, [X8+1224]
	023 Move W21, [X19+16]
	024 Move X22, [X19+24]
	025 Move X23, [X19+32]
	026 Move X0, [X8]
	027 Call 0x1C17F10
	028 Move W1, W21
	029 Move X2, X22
	030 Move X3, X23
	031 Move X4, X31
	032 Move X20, X0
	033 Call CspParameters..ctor, X0, X1, X2, X3
	034 Compare X20, 0
	035 JumpIfEqual {50}
	036 Move W8, [X19+40]
	037 Move X0, X20
	038 Move X2, X31
	039 Move [X20+40], W8
	040 Move W1, [X19+44]
	041 Call CspParameters.set_Flags, X0, X1
	042 Move X0, X20
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X22, [X31+16]
	046 Move X21, [X31+24]
	047 Move X30, [X31+48]
	048 Move X23, [X31+56]
	049 Return X0
	050 Call 0x1C17F20

Method: System.Void FromXml(System.String xml)

Disassembly:
	0x03219CEC STR X30, [X31 - 0x20]!
	0x03219CF0 STP X20, X19, [X31 + 0x10]
	0x03219CF4 ADRP X19, 0x11C3000
	0x03219CF8 ADRP X20, 0xF08000
	0x03219CFC LDRB W8, [X19 + 0x2F0]
	0x03219D00 LDR X20, [X20 + 0xD50]
	0x03219D04 TBNZ X8, 0x0, 0x3219D1C
	0x03219D08 ADRP X0, 0xF08000
	0x03219D0C LDR X0, [X0 + 0xD50]
	0x03219D10 BL 0x1C16CF4
	0x03219D14 MOVZ W8, 0x1
	0x03219D18 STRB W8, [X19 + 0x2F0]
	0x03219D1C LDR X0, [X20]
	0x03219D20 BL 0x1C16F10
	0x03219D24 MOV X19, X0
	0x03219D28 BL 0x3219D3C
	0x03219D2C MOV X0, X19
	0x03219D30 LDP X20, X19, [X31 + 0x10]
	0x03219D34 LDR X30, [X31], #0x20
	0x03219D38 RET
	0x03219D3C STR X30, [X31 - 0x30]!
	0x03219D40 STP X22, X21, [X31 + 0x10]
	0x03219D44 STP X20, X19, [X31 + 0x20]
	0x03219D48 ADRP X22, 0x11C3000
	0x03219D4C ADRP X20, 0xF03000
	0x03219D50 ADRP X21, 0xEDA000
	0x03219D54 LDRB W8, [X22 + 0x2F1]
	0x03219D58 LDR X20, [X20 + 0xD08]
	0x03219D5C LDR X21, [X21 + 0x618]
	0x03219D60 MOV X19, X0
	0x03219D64 TBNZ X8, 0x0, 0x3219D88
	0x03219D68 ADRP X0, 0xEDA000
	0x03219D6C LDR X0, [X0 + 0x618]
	0x03219D70 BL 0x1C16CF4
	0x03219D74 ADRP X0, 0xF03000
	0x03219D78 LDR X0, [X0 + 0xD08]
	0x03219D7C BL 0x1C16CF4
	0x03219D80 MOVZ W8, 0x1
	0x03219D84 STRB W8, [X22 + 0x2F1]
	0x03219D88 MOV X0, X19
	0x03219D8C MOV X1, X31
	0x03219D90 BL 0x3251230
	0x03219D94 MOVZ W8, 0x80
	0x03219D98 STR W8, [X19 + 0x14]
	0x03219D9C LDR X0, [X20]
	0x03219DA0 MOVZ W1, 0x4
	0x03219DA4 BL 0x1C16D6C
	0x03219DA8 STR X0, [X19 + 0x28]
	0x03219DAC LDR X0, [X20]
	0x03219DB0 MOVZ W1, 0x2
	0x03219DB4 BL 0x1C16D6C
	0x03219DB8 STR X0, [X19 + 0x38]
	0x03219DBC LDR X0, [X21]
	0x03219DC0 MOVZ W1, 0x40
	0x03219DC4 BL 0x1C16D6C
	0x03219DC8 STR X0, [X19 + 0x30]
	0x03219DCC LDR X0, [X21]
	0x03219DD0 MOVZ W1, 0x10
	0x03219DD4 BL 0x1C16D6C
	0x03219DD8 STR X0, [X19 + 0x48]
	0x03219DDC LDR X0, [X20]
	0x03219DE0 MOVZ W1, 0x10
	0x03219DE4 BL 0x1C16D6C
	0x03219DE8 LDR X8, [X19]
	0x03219DEC STR X0, [X19 + 0x40]
	0x03219DF0 MOV X0, X19
	0x03219DF4 LDP X20, X19, [X31 + 0x20]
	0x03219DF8 LDR X2, [X8 + 0x258]
	0x03219DFC LDR X1, [X8 + 0x260]
	0x03219E00 LDP X22, X21, [X31 + 0x10]
	0x03219E04 LDR X30, [X31], #0x30

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11C4000
	007 Move X22, 0xF09000
	008 Move W8, [X21+743]
	009 Move X22, [X22+3312]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xF09000
	017 Move X0, [X0+3312]
	018 Call 0x1C17CF4
	019 Move X0, 0xF09000
	020 Move X0, [X0+3320]
	021 Call 0x1C17CF4
	022 Move X0, 0xF09000
	023 Move X0, [X0+3328]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+743], W8
	027 Move X0, [X22]
	028 Call 0x1C17F10
	029 Move X21, X0
	030 Call SecurityParser..ctor, X0
	031 Compare X21, 0
	032 JumpIfEqual {87}
	033 Move X0, X21
	034 Move X1, X20
	035 Call SecurityParser.LoadXml, X0, X1
	036 Move X20, [X21+104]
	037 Compare X20, 0
	038 JumpIfEqual {87}
	039 Move X8, 0xF09000
	040 Move X8, [X8+3320]
	041 Move X0, [X20+24]
	042 Move X2, X31
	043 Move X1, [X8]
	044 Call String.op_Equality, X0, X1
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {81}
	049 Move X8, 0xF09000
	050 Move X8, [X8+3328]
	051 Move X0, X20
	052 Move X2, X31
	053 Move X1, [X8]
	054 Call SecurityElement.SearchForChildByTag, X0, X1
	055 Compare X0, 0
	056 JumpIfEqual {87}
	057 Move X20, X0
	058 Move X0, [X0+40]
	059 Compare X0, 0
	060 JumpIfEqual {87}
	061 Move X8, [X0]
	062 Move X9, [X8+664]
	063 Move X1, [X8+672]
	064 NotImplemented "Instruction BLR not yet implemented."
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X0, [X20+40]
	067 Compare X0, 0
	068 JumpIfEqual {87}
	069 Move X8, [X0]
	070 Move W1, W31
	071 Move X9, [X8+744]
	072 Move X2, [X8+752]
	073 NotImplemented "Instruction BLR not yet implemented."
	074 Compare X0, 0
	075 JumpIfEqual {87}
	076 Move X8, [X0]
	077 Move X9, [X8+360]
	078 Move X1, [X8+368]
	079 NotImplemented "Instruction BLR not yet implemented."
	080 Move [X19+24], X0
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X22, [X31+16]
	084 Move X21, [X31+24]
	085 Move X30, [X31+48]
	086 Return 
	087 Call 0x1C17F20

Method: System.String ToXml()

Disassembly:
	0x0321A04C B.EQ 0x321A654
	0x0321A050 CMP W8, 0x2
	0x0321A054 B.LS 0x321A654
	0x0321A058 CMP W8, 0x3
	0x0321A05C B.EQ 0x321A654
	0x0321A060 CMP W8, 0x4
	0x0321A064 B.LS 0x321A654
	0x0321A068 CMP W8, 0x5
	0x0321A06C B.EQ 0x321A654
	0x0321A070 CMP W8, 0x6
	0x0321A074 B.LS 0x321A654
	0x0321A078 CMP W8, 0x7
	0x0321A07C B.EQ 0x321A654
	0x0321A080 CMP W8, 0x8
	0x0321A084 B.LS 0x321A654
	0x0321A088 CMP W8, 0x9
	0x0321A08C B.EQ 0x321A654
	0x0321A090 CMP W8, 0xA
	0x0321A094 B.LS 0x321A654
	0x0321A098 CMP W8, 0xB
	0x0321A09C B.EQ 0x321A654
	0x0321A0A0 CMP W8, 0xC
	0x0321A0A4 B.LS 0x321A654
	0x0321A0A8 CMP W8, 0xD
	0x0321A0AC B.EQ 0x321A654
	0x0321A0B0 CMP W8, 0xE
	0x0321A0B4 B.LS 0x321A654
	0x0321A0B8 CMP W8, 0xF
	0x0321A0BC B.EQ 0x321A654
	0x0321A0C0 LDR W8, [X19 + 0x18]
	0x0321A0C4 CBZ W8, 0x321A654
	0x0321A0C8 LDP W0, W9, [X1 + 0x20]
	0x0321A0CC AND W20, W22, W21, 0x0
	0x0321A0D0 BIC W25, W24, W21, 0x0
	0x0321A0D4 ADD W20, W20, W23
	0x0321A0D8 ADD W20, W20, W25
	0x0321A0DC ADD W20, W20, W0
	0x0321A0E0 EXTR W20, W20, W20, 0x1D
	0x0321A0E4 AND W23, W20, W21, 0x0
	0x0321A0E8 BIC W25, W22, W20, 0x0
	0x0321A0EC ADD W23, W23, W24
	0x0321A0F0 ADD W23, W23, W25
	0x0321A0F4 ADD W23, W23, W9
	0x0321A0F8 LDP W12, W10, [X1 + 0x28]
	0x0321A0FC EXTR W23, W23, W23, 0x19
	0x0321A100 AND W24, W23, W20, 0x0
	0x0321A104 BIC W25, W21, W23, 0x0
	0x0321A108 ADD W22, W24, W22
	0x0321A10C ADD W22, W22, W25
	0x0321A110 ADD W22, W22, W12
	0x0321A114 EXTR W22, W22, W22, 0x15
	0x0321A118 AND W24, W22, W23, 0x0
	0x0321A11C BIC W25, W20, W22, 0x0
	0x0321A120 ADD W21, W24, W21
	0x0321A124 ADD W21, W21, W25
	0x0321A128 ADD W21, W21, W10
	0x0321A12C LDP W14, W13, [X1 + 0x30]
	0x0321A130 EXTR W21, W21, W21, 0xD
	0x0321A134 AND W24, W21, W22, 0x0
	0x0321A138 BIC W25, W23, W21, 0x0
	0x0321A13C ADD W20, W24, W20
	0x0321A140 ADD W20, W20, W25
	0x0321A144 ADD W20, W20, W14
	0x0321A148 EXTR W20, W20, W20, 0x1D
	0x0321A14C AND W24, W20, W21, 0x0
	0x0321A150 BIC W25, W22, W20, 0x0
	0x0321A154 ADD W23, W24, W23
	0x0321A158 ADD W23, W23, W25
	0x0321A15C ADD W23, W23, W13
	0x0321A160 LDP W15, W11, [X1 + 0x38]
	0x0321A164 EXTR W23, W23, W23, 0x19
	0x0321A168 AND W24, W23, W20, 0x0
	0x0321A16C BIC W25, W21, W23, 0x0
	0x0321A170 ADD W22, W24, W22
	0x0321A174 ADD W22, W22, W25
	0x0321A178 ADD W22, W22, W15
	0x0321A17C EXTR W22, W22, W22, 0x15
	0x0321A180 AND W24, W22, W23, 0x0
	0x0321A184 BIC W25, W20, W22, 0x0
	0x0321A188 ADD W21, W24, W21
	0x0321A18C ADD W21, W21, W25
	0x0321A190 ADD W21, W21, W11
	0x0321A194 LDP W6, W17, [X1 + 0x40]
	0x0321A198 EXTR W21, W21, W21, 0xD
	0x0321A19C AND W24, W21, W22, 0x0
	0x0321A1A0 BIC W25, W23, W21, 0x0
	0x0321A1A4 ADD W20, W24, W20
	0x0321A1A8 ADD W20, W20, W25
	0x0321A1AC ADD W20, W20, W6
	0x0321A1B0 EXTR W20, W20, W20, 0x1D
	0x0321A1B4 AND W24, W20, W21, 0x0
	0x0321A1B8 BIC W25, W22, W20, 0x0
	0x0321A1BC ADD W23, W24, W23
	0x0321A1C0 ADD W23, W23, W25
	0x0321A1C4 ADD W23, W23, W17
	0x0321A1C8 LDP W2, W16, [X1 + 0x48]
	0x0321A1CC EXTR W23, W23, W23, 0x19
	0x0321A1D0 AND W24, W23, W20, 0x0
	0x0321A1D4 BIC W25, W21, W23, 0x0
	0x0321A1D8 ADD W22, W24, W22
	0x0321A1DC ADD W22, W22, W25
	0x0321A1E0 ADD W22, W22, W2
	0x0321A1E4 EXTR W22, W22, W22, 0x15
	0x0321A1E8 AND W24, W22, W23, 0x0
	0x0321A1EC BIC W25, W20, W22, 0x0
	0x0321A1F0 ADD W21, W24, W21
	0x0321A1F4 ADD W21, W21, W25
	0x0321A1F8 ADD W21, W21, W16
	0x0321A1FC LDP W4, W3, [X1 + 0x50]
	0x0321A200 EXTR W21, W21, W21, 0xD
	0x0321A204 AND W24, W21, W22, 0x0
	0x0321A208 BIC W25, W23, W21, 0x0
	0x0321A20C ADD W20, W24, W20
	0x0321A210 ADD W20, W20, W25
	0x0321A214 ADD W20, W20, W4
	0x0321A218 EXTR W20, W20, W20, 0x1D
	0x0321A21C AND W24, W20, W21, 0x0
	0x0321A220 BIC W25, W22, W20, 0x0
	0x0321A224 ADD W23, W24, W23
	0x0321A228 ADD W23, W23, W25
	0x0321A22C ADD W23, W23, W3
	0x0321A230 LDP W5, W1, [X1 + 0x58]
	0x0321A234 EXTR W23, W23, W23, 0x19
	0x0321A238 AND W24, W23, W20, 0x0
	0x0321A23C BIC W25, W21, W23, 0x0
	0x0321A240 ADD W22, W24, W22
	0x0321A244 ADD W22, W22, W25
	0x0321A248 ADD W22, W22, W5
	0x0321A24C EXTR W22, W22, W22, 0x15
	0x0321A250 AND W24, W22, W23, 0x0
	0x0321A254 ADD W26, W0, W20
	0x0321A258 BIC W20, W20, W22, 0x0
	0x0321A25C ADD W21, W24, W21

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11C3000
	009 Move X21, 0xEDA000
	010 Move W8, [X20+744]
	011 Move X21, [X21+2288]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {43}
	017 Move X0, 0xEDA000
	018 Move X0, [X0+1880]
	019 Call 0x1C17CF4
	020 Move X0, 0xEDA000
	021 Move X0, [X0+2288]
	022 Call 0x1C17CF4
	023 Move X0, 0xF08000
	024 Move X0, [X0+3344]
	025 Call 0x1C17CF4
	026 Move X0, 0xF08000
	027 Move X0, [X0+3352]
	028 Call 0x1C17CF4
	029 Move X0, 0xF08000
	030 Move X0, [X0+3360]
	031 Call 0x1C17CF4
	032 Move X0, 0xF08000
	033 Move X0, [X0+3368]
	034 Call 0x1C17CF4
	035 Move X0, 0xF08000
	036 Move X0, [X0+3376]
	037 Call 0x1C17CF4
	038 Move X0, 0xF08000
	039 Move X0, [X0+3384]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X20+744], W8
	043 Move X0, [X21]
	044 Call 0x1C17F10
	045 Move X1, X31
	046 Move X20, X0
	047 Call StringBuilder..ctor, X0
	048 Move X0, X31
	049 Call Environment.get_NewLine
	050 Compare X20, 0
	051 JumpIfEqual {148}
	052 Move X8, 0xF08000
	053 Move X8, [X8+3360]
	054 Move X2, X0
	055 Move X0, X20
	056 Move X3, X31
	057 Move X1, [X8]
	058 Call StringBuilder.AppendFormat, X0, X1, X2
	059 Move X8, [X19+16]
	060 Compare X8, 0
	061 JumpIfEqual {148}
	062 Move X2, [X8+24]
	063 Compare X2, 0
	064 JumpIfEqual {77}
	065 Move W9, [X2+16]
	066 Compare W9, 0
	067 JumpIfEqual {77}
	068 Move X8, 0xF08000
	069 Move X8, [X8+3368]
	070 Move X0, X20
	071 Move X3, X31
	072 Move X1, [X8]
	073 Call StringBuilder.AppendFormat, X0, X1, X2
	074 Move X8, [X19+16]
	075 Compare X8, 0
	076 JumpIfEqual {148}
	077 Move X22, 0xEDA000
	078 Move X22, [X22+1880]
	079 Move W8, [X8+16]
	080 Move X23, 0xF08000
	081 Move X24, 0xF08000
	082 Move X0, [X22]
	083 Move X23, [X23+3344]
	084 Move X24, [X24+3384]
	085 Add X1, X31, 12
	086 Move [X31+12], W8
	087 Call 0x1C17E04
	088 Move X21, X0
	089 Move X0, X31
	090 Call Environment.get_NewLine
	091 Move X1, [X23]
	092 Move X3, X0
	093 Move X0, X20
	094 Move X2, X21
	095 Move X4, X31
	096 Call StringBuilder.AppendFormat, X0, X1, X2, X3
	097 Move X0, X19
	098 Call KeyPairPersistence.get_ContainerName, X0
	099 Move X21, X0
	100 Move X0, X31
	101 Call Environment.get_NewLine
	102 Move X1, [X24]
	103 Move X3, X0
	104 Move X0, X20
	105 Move X2, X21
	106 Move X4, X31
	107 Call StringBuilder.AppendFormat, X0, X1, X2, X3
	108 Move X8, [X19+16]
	109 Compare X8, 0
	110 JumpIfEqual {148}
	111 Move W8, [X8+40]
	112 Move X21, 0xF08000
	113 Move X21, [X21+3352]
	114 Add W31, W8, 1
	115 Move X0, [X22]
	116 Move X22, 0xF08000
	117 Move X22, [X22+3376]
	118 Add X1, X31, 8
	119 Move [X31+8], W8
	120 Call 0x1C17E04
	121 Move X1, [X22]
	122 Move X2, X0
	123 Move X0, X20
	124 Move X3, X31
	125 Call StringBuilder.AppendFormat, X0, X1, X2
	126 Move X19, [X19+24]
	127 Move X0, X31
	128 Call Environment.get_NewLine
	129 Move X1, [X21]
	130 Move X3, X0
	131 Move X0, X20
	132 Move X2, X19
	133 Move X4, X31
	134 Call StringBuilder.AppendFormat, X0, X1, X2, X3
	135 Move X8, [X20]
	136 Move X0, X20
	137 Move X9, [X8+360]
	138 Move X1, [X8+368]
	139 NotImplemented "Instruction BLR not yet implemented."
	140 Move X20, [X31+48]
	141 Move X19, [X31+56]
	142 Move X22, [X31+32]
	143 Move X21, [X31+40]
	144 Move X24, [X31+16]
	145 Move X23, [X31+24]
	146 Move X30, [X31+64]
	147 Return X0
	148 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x0321A588 ADD W15, W15, W17
	0x0321A58C EOR W17, W12, W14, 0x17
	0x0321A590 ADD W14, W15, W0
	0x0321A594 LDR W27, [X19 + 0x20]
	0x0321A598 EOR W15, W17, W14, 0x11
	0x0321A59C ADD W10, W10, W15
	0x0321A5A0 ADD W10, W10, W0
	0x0321A5A4 EXTR W15, W10, W10, 0x1D
	0x0321A5A8 ADD W17, W27, W15
	0x0321A5AC CMP W8, 0x1
	0x0321A5B0 STR W17, [X19 + 0x20]
	0x0321A5B4 B.EQ 0x321A654
	0x0321A5B8 EXTR W17, W14, W14, 0x11
	0x0321A5BC EOR W9, W17, W9, 0x15
	0x0321A5C0 ADD W13, W16, W13
	0x0321A5C4 EOR W9, W9, W10, 0x1D
	0x0321A5C8 ADD W9, W13, W9
	0x0321A5CC EOR W14, W15, W14, 0x11
	0x0321A5D0 ADD W13, W9, W0
	0x0321A5D4 ADD W11, W11, W12
	0x0321A5D8 EXTR W9, W13, W13, 0x17
	0x0321A5DC EOR W13, W14, W13, 0x17
	0x0321A5E0 ADD W11, W11, W13
	0x0321A5E4 EOR W13, W9, W10, 0x1D
	0x0321A5E8 ADD W10, W11, W0
	0x0321A5EC LDR W12, [X19 + 0x24]
	0x0321A5F0 ADD W15, W1, W17
	0x0321A5F4 EOR W11, W13, W10, 0x15

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x11C3000
	006 Move X21, 0xEE0000
	007 Move X20, 0xF08000
	008 Move W8, [X19+745]
	009 Move X21, [X21+3264]
	010 Move X20, [X20+3216]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xF08000
	016 Move X0, [X0+3216]
	017 Call 0x1C17CF4
	018 Move X0, 0xEE0000
	019 Move X0, [X0+3264]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+745], W8
	023 Move X0, [X21]
	024 Call 0x1C17F10
	025 Move X1, X31
	026 Move X19, X0
	027 Call Object..ctor, X0
	028 Move X8, [X20]
	029 Move X8, [X8+184]
	030 Move [X8+32], X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Return 

