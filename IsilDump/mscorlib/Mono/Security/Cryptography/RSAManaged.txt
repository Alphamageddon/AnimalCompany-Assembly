Type: Mono.Security.Cryptography.RSAManaged

Method: System.Void .ctor(System.Int32 keySize)

Disassembly:
	0x0321CB5C B.CS 0x321CB84
	0x0321CB60 ADD X11, X8, X10, 0x2, LSL
	0x0321CB64 STR W31, [X11 + 0x20]
	0x0321CB68 LDR W11, [X0 + 0x10]
	0x0321CB6C ADD W10, W10, 0x1
	0x0321CB70 SXTW X10, W10
	0x0321CB74 CMP X10, X11
	0x0321CB78 B.LT 0x321CB58
	0x0321CB7C LDR X30, [X31], #0x10
	0x0321CB80 RET
	0x0321CB84 BL 0x1C16F28
	0x0321CB88 BL 0x1C16F20
	0x0321CB8C STP X30, X27, [X31 - 0x50]!
	0x0321CB90 STP X26, X25, [X31 + 0x10]
	0x0321CB94 STP X24, X23, [X31 + 0x20]
	0x0321CB98 STP X22, X21, [X31 + 0x30]
	0x0321CB9C STP X20, X19, [X31 + 0x40]
	0x0321CBA0 ADRP X20, 0x11C0000
	0x0321CBA4 LDRB W9, [X20 + 0x301]
	0x0321CBA8 MOV W23, W1
	0x0321CBAC MOV X22, X0
	0x0321CBB0 MOV X19, X8
	0x0321CBB4 TBNZ X9, 0x0, 0x321CBD8
	0x0321CBB8 ADRP X0, 0xF05000
	0x0321CBBC LDR X0, [X0 + 0xD90]
	0x0321CBC0 BL 0x1C16CF4
	0x0321CBC4 ADRP X0, 0xED7000
	0x0321CBC8 LDR X0, [X0 + 0x618]
	0x0321CBCC BL 0x1C16CF4
	0x0321CBD0 MOVZ W8, 0x1
	0x0321CBD4 STRB W8, [X20 + 0x301]
	0x0321CBD8 LDRB W8, [X22 + 0x23]
	0x0321CBDC CBNZ W8, 0x321CE1C
	0x0321CBE0 LDRB W8, [X22 + 0x22]
	0x0321CBE4 CBNZ W8, 0x321CBF0
	0x0321CBE8 MOV X0, X22
	0x0321CBEC BL 0x321BCC8
	0x0321CBF0 LDR X0, [X22 + 0x60]
	0x0321CBF4 CBZ X0, 0x321CE18
	0x0321CBF8 BL 0x321CEB4
	0x0321CBFC LDR X8, [X22 + 0x58]
	0x0321CC00 CBZ X8, 0x321CE18
	0x0321CC04 MOV X20, X0
	0x0321CC08 MOV X0, X8
	0x0321CC0C BL 0x321CEB4
	0x0321CC10 MOV X21, X0
	0x0321CC14 TBZ X23, 0x0, 0x321CDC0
	0x0321CC18 ADRP X25, 0xF05000
	0x0321CC1C LDR X25, [X25 + 0xD90]
	0x0321CC20 LDR X23, [X22 + 0x28]
	0x0321CC24 LDR X0, [X25]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x11C1000
	008 Move X21, 0xF06000
	009 Move X22, 0xF06000
	010 Move W8, [X23+765]
	011 Move X21, [X21+1312]
	012 Move X22, [X22+1320]
	013 Move W19, W1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xF06000
	020 Move X0, [X0+1312]
	021 Call 0x1C17CF4
	022 Move X0, 0xF06000
	023 Move X0, [X0+1320]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+765], W8
	027 Move W8, 1
	028 Move X0, X20
	029 Move X1, X31
	030 Move [X20+33], W8
	031 Call RSA..ctor, X0
	032 Move X0, [X21]
	033 Move W1, 1
	034 Call 0x1C17D6C
	035 Move [X20+24], X0
	036 Move X21, X0
	037 Move X0, [X22]
	038 Call 0x1C17F10
	039 Move W1, 384
	040 Move W2, 0x4000
	041 Move W3, 8
	042 Move X4, X31
	043 Move X22, X0
	044 Call KeySizes..ctor, X0, X1, X2, X3
	045 Compare X21, 0
	046 JumpIfEqual {62}
	047 Move W8, [X21+24]
	048 Compare W8, 0
	049 JumpIfEqual {63}
	050 Move [X21+32], X22
	051 Move X0, X20
	052 Move W1, W19
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X2, X31
	058 Move X30, [X31+48]
	059 Move X23, [X31+56]
	060 Call AsymmetricAlgorithm.set_KeySize, X0, X1
	061 Return 
	062 Call 0x1C17F20
	063 Call 0x1C17F28

Method: System.Void Finalize()

Disassembly:
	0x0321CC28 LDR W8, [X0 + 0xE0]
	0x0321CC2C CBNZ W8, 0x321CC34
	0x0321CC30 BL 0x1C16DFC
	0x0321CC34 MOV X0, X23
	0x0321CC38 MOV X1, X31
	0x0321CC3C BL 0x321C64C
	0x0321CC40 TBNZ X0, 0x0, 0x321CE6C
	0x0321CC44 LDR X0, [X22 + 0x28]
	0x0321CC48 CBZ X0, 0x321CE18
	0x0321CC4C BL 0x321CEB4
	0x0321CC50 CBZ X0, 0x321CE18
	0x0321CC54 CBZ X21, 0x321CE18
	0x0321CC58 LDR W8, [X0 + 0x18]
	0x0321CC5C LDR W1, [X21 + 0x18]
	0x0321CC60 MOV X23, X0
	0x0321CC64 CMP W8, W1
	0x0321CC68 B.EQ 0x321CCA8
	0x0321CC6C ADRP X8, 0xED7000
	0x0321CC70 LDR X8, [X8 + 0x618]
	0x0321CC74 LDR X0, [X8]
	0x0321CC78 BL 0x1C16D6C
	0x0321CC7C CBZ X0, 0x321CE18
	0x0321CC80 LDR W8, [X0 + 0x18]
	0x0321CC84 LDR W4, [X23 + 0x18]
	0x0321CC88 MOV X24, X0
	0x0321CC8C MOV X0, X23
	0x0321CC90 MOV W1, W31
	0x0321CC94 SUB W3, W8, W4
	0x0321CC98 MOV X2, X24
	0x0321CC9C MOV X5, X31
	0x0321CCA0 BL 0x33A8A9C
	0x0321CCA4 MOV X23, X24
	0x0321CCA8 LDR X0, [X25]
	0x0321CCAC LDR X24, [X22 + 0x30]
	0x0321CCB0 LDR W8, [X0 + 0xE0]
	0x0321CCB4 CBNZ W8, 0x321CCBC
	0x0321CCB8 BL 0x1C16DFC
	0x0321CCBC MOV X0, X24
	0x0321CCC0 MOV X1, X31
	0x0321CCC4 BL 0x321BFF8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X0]
	006 Move X19, X0
	007 Move X9, [X8+392]
	008 Move X2, [X8+400]
	009 Move W1, W31
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Move X0, X19
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X1, X31
	015 Move X30, [X31+32]
	016 Move X21, [X31+40]
	017 Call Object.Finalize, X0
	018 Return 
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X21, X0
	021 Move X0, X21
	022 Call 0x3EB2AD0
	023 Move X20, [X0]
	024 Call 0x3EB2AE0
	025 Move X0, X19
	026 Move X1, X31
	027 Call Object.Finalize, X0
	028 Compare X20, 0
	029 JumpIfNotEqual {36}
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return 
	035 Move X20, X31
	036 Move X0, X20
	037 Call 0x1C17F18
	038 Move X21, X0
	039 Move X0, X19
	040 Move X1, X31
	041 Call Object.Finalize, X0
	042 Compare X20, 0
	043 JumpIfNotEqual {46}
	044 Move X0, X21
	045 Call 0x1D2D690
	046 Move X0, X20
	047 Call 0x1C17F18
	048 Call 0x1991590

Method: System.Void GenerateKeyPair()

Disassembly:
	0x0321CCC8 TBZ X0, 0x0, 0x321CDDC
	0x0321CCCC LDR X0, [X25]
	0x0321CCD0 LDR X24, [X22 + 0x38]
	0x0321CCD4 LDR W8, [X0 + 0xE0]
	0x0321CCD8 CBNZ W8, 0x321CCE0
	0x0321CCDC BL 0x1C16DFC
	0x0321CCE0 MOV X0, X24
	0x0321CCE4 MOV X1, X31
	0x0321CCE8 BL 0x321BFF8
	0x0321CCEC TBZ X0, 0x0, 0x321CDDC
	0x0321CCF0 LDR X0, [X25]
	0x0321CCF4 LDR X24, [X22 + 0x40]
	0x0321CCF8 LDR W8, [X0 + 0xE0]
	0x0321CCFC CBNZ W8, 0x321CD04
	0x0321CD00 BL 0x1C16DFC
	0x0321CD04 MOV X0, X24
	0x0321CD08 MOV X1, X31
	0x0321CD0C BL 0x321BFF8
	0x0321CD10 TBZ X0, 0x0, 0x321CDDC
	0x0321CD14 LDR X0, [X25]
	0x0321CD18 LDR X24, [X22 + 0x48]
	0x0321CD1C LDR W8, [X0 + 0xE0]
	0x0321CD20 CBNZ W8, 0x321CD28
	0x0321CD24 BL 0x1C16DFC
	0x0321CD28 MOV X0, X24
	0x0321CD2C MOV X1, X31
	0x0321CD30 BL 0x321BFF8
	0x0321CD34 TBZ X0, 0x0, 0x321CDDC
	0x0321CD38 LDR X0, [X25]
	0x0321CD3C LDR X24, [X22 + 0x50]
	0x0321CD40 LDR W8, [X0 + 0xE0]
	0x0321CD44 CBNZ W8, 0x321CD4C
	0x0321CD48 BL 0x1C16DFC
	0x0321CD4C MOV X0, X24
	0x0321CD50 MOV X1, X31
	0x0321CD54 BL 0x321BFF8
	0x0321CD58 TBZ X0, 0x0, 0x321CDDC
	0x0321CD5C LDR X8, [X22]
	0x0321CD60 MOV X0, X22
	0x0321CD64 LDP X9, X1, [X8 + 0x198]
	0x0321CD68 BLR X9
	0x0321CD6C LDR X1, [X22 + 0x30]
	0x0321CD70 SBFM W27, W0, 0x4, 0x1F
	0x0321CD74 MOV W2, W27
	0x0321CD78 BL 0x321CA8C
	0x0321CD7C LDR X1, [X22 + 0x38]
	0x0321CD80 MOV W2, W27
	0x0321CD84 MOV X24, X0
	0x0321CD88 BL 0x321CA8C
	0x0321CD8C LDR X1, [X22 + 0x40]
	0x0321CD90 MOV W2, W27
	0x0321CD94 MOV X25, X0
	0x0321CD98 BL 0x321CA8C
	0x0321CD9C LDR X1, [X22 + 0x48]
	0x0321CDA0 MOV W2, W27
	0x0321CDA4 MOV X26, X0
	0x0321CDA8 BL 0x321CA8C
	0x0321CDAC LDR X1, [X22 + 0x50]
	0x0321CDB0 MOV W2, W27
	0x0321CDB4 MOV X22, X0
	0x0321CDB8 BL 0x321CA8C
	0x0321CDBC B 0x321CDF0
	0x0321CDC0 MOV X24, X31
	0x0321CDC4 MOV X25, X31
	0x0321CDC8 MOV X26, X31
	0x0321CDCC MOV X22, X31
	0x0321CDD0 MOV X0, X31
	0x0321CDD4 MOV X23, X31
	0x0321CDD8 B 0x321CDF0
	0x0321CDDC MOV X24, X31
	0x0321CDE0 MOV X25, X31
	0x0321CDE4 MOV X26, X31
	0x0321CDE8 MOV X22, X31
	0x0321CDEC MOV X0, X31
	0x0321CDF0 STP X20, X21, [X19]
	0x0321CDF4 STP X24, X25, [X19 + 0x10]
	0x0321CDF8 STP X26, X22, [X19 + 0x20]
	0x0321CDFC STP X0, X23, [X19 + 0x30]
	0x0321CE00 LDP X20, X19, [X31 + 0x40]
	0x0321CE04 LDP X22, X21, [X31 + 0x30]
	0x0321CE08 LDP X24, X23, [X31 + 0x20]
	0x0321CE0C LDP X26, X25, [X31 + 0x10]
	0x0321CE10 LDP X30, X27, [X31], #0x50
	0x0321CE14 RET
	0x0321CE18 BL 0x1C16F20
	0x0321CE1C ADRP X0, 0xF05000
	0x0321CE20 LDR X0, [X0 + 0x578]
	0x0321CE24 BL 0x1C16D08
	0x0321CE28 MOV X1, X31
	0x0321CE2C BL 0x320A160
	0x0321CE30 MOV X19, X0
	0x0321CE34 ADRP X0, 0xF00000
	0x0321CE38 LDR X0, [X0 + 0x4B8]
	0x0321CE3C BL 0x1C16D08
	0x0321CE40 BL 0x1C16F10
	0x0321CE44 MOV X1, X19
	0x0321CE48 MOV X2, X31
	0x0321CE4C MOV X20, X0
	0x0321CE50 BL 0x338C448
	0x0321CE54 ADRP X0, 0xF05000
	0x0321CE58 LDR X0, [X0 + 0xDD0]
	0x0321CE5C BL 0x1C16D08
	0x0321CE60 MOV X1, X0
	0x0321CE64 MOV X0, X20
	0x0321CE68 BL 0x1C16DEC
	0x0321CE6C ADRP X0, 0xF04000
	0x0321CE70 LDR X0, [X0 + 0xCE0]
	0x0321CE74 BL 0x1C16D08
	0x0321CE78 BL 0x1C16F10
	0x0321CE7C MOV X19, X0
	0x0321CE80 ADRP X0, 0xF05000
	0x0321CE84 LDR X0, [X0 + 0x5A8]
	0x0321CE88 BL 0x1C16D08
	0x0321CE8C MOV X1, X0
	0x0321CE90 MOV X0, X19
	0x0321CE94 MOV X2, X31
	0x0321CE98 BL 0x3252170
	0x0321CE9C ADRP X0, 0xF05000
	0x0321CEA0 LDR X0, [X0 + 0xDD0]
	0x0321CEA4 BL 0x1C16D08
	0x0321CEA8 MOV X1, X0
	0x0321CEAC MOV X0, X19
	0x0321CEB0 BL 0x1C16DEC
	0x0321CEB4 STP X30, X21, [X31 - 0x20]!
	0x0321CEB8 STP X20, X19, [X31 + 0x10]
	0x0321CEBC ADRP X20, 0x11C0000
	0x0321CEC0 ADRP X21, 0xF05000
	0x0321CEC4 LDRB W8, [X20 + 0x328]
	0x0321CEC8 LDR X21, [X21 + 0xD90]
	0x0321CECC MOV X19, X0
	0x0321CED0 TBNZ X8, 0x0, 0x321CEF4
	0x0321CED4 ADRP X0, 0xF05000
	0x0321CED8 LDR X0, [X0 + 0xD90]
	0x0321CEDC BL 0x1C16CF4
	0x0321CEE0 ADRP X0, 0xED7000
	0x0321CEE4 LDR X0, [X0 + 0x618]
	0x0321CEE8 BL 0x1C16CF4
	0x0321CEEC MOVZ W8, 0x1
	0x0321CEF0 STRB W8, [X20 + 0x328]
	0x0321CEF4 LDR X0, [X21]
	0x0321CEF8 LDR W8, [X0 + 0xE0]
	0x0321CEFC CBNZ W8, 0x321CF04
	0x0321CF00 BL 0x1C16DFC
	0x0321CF04 ADRP X20, 0xED7000
	0x0321CF08 LDR X20, [X20 + 0x618]
	0x0321CF0C MOV X0, X19
	0x0321CF10 MOV W1, W31
	0x0321CF14 BL 0x321FE58
	0x0321CF18 TBZ X0, 0x0, 0x321CF30
	0x0321CF1C LDR X0, [X20]
	0x0321CF20 LDP X20, X19, [X31 + 0x10]
	0x0321CF24 MOVZ W1, 0x1
	0x0321CF28 LDP X30, X21, [X31], #0x20
	0x0321CF2C B 0x1C16D6C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x11C1000
	008 Move X23, 0xF06000
	009 Move W8, [X20+766]
	010 Move X23, [X23+3472]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF06000
	017 Move X0, [X0+3472]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+766], W8
	021 Move X8, [X19]
	022 Move X0, X19
	023 Move X9, [X8+408]
	024 Move X1, [X8+416]
	025 NotImplemented "Instruction BLR not yet implemented."
	026 Move X8, [X19]
	027 Add W20, W0, 1
	028 Move X0, X19
	029 NotImplemented "Instruction SBFM not yet implemented."
	030 Move X9, [X8+408]
	031 Move X1, [X8+416]
	032 NotImplemented "Instruction BLR not yet implemented."
	033 Move X8, [X23]
	034 Subtract W20, W0, W20
	035 Move W9, [X8+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {40}
	038 Move X0, X8
	039 Call 0x1C17DFC
	040 Or W0, W31, 0x10001
	041 Call BigInteger.op_Implicit, X0
	042 Move [X19+96], X0
	043 Move X0, [X23]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move W0, W21
	049 Call BigInteger.GeneratePseudoPrime, X0
	050 Or W1, W31, 0x10001
	051 Move [X19+48], X0
	052 Call Kernel.DwordMod, X0, X1
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X0, [X23]
	055 Move X22, [X19+56]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move X0, X21
	061 Move X1, X22
	062 Call Kernel.Compare, X0, X1
	063 Move TEMP, X0
	064 And TEMP, TEMP, -2147483648
	065 Compare TEMP, -2147483648
	066 JumpIfNotEqual {69}
	067 Move X8, [X19+56]
	068 Move [X19+48], X8
	069 Move X0, [X23]
	070 Move W8, [X0+224]
	071 Compare W8, 0
	072 JumpIfNotEqual {74}
	073 Call 0x1C17DFC
	074 Move W0, W20
	075 Call BigInteger.GeneratePseudoPrime, X0
	076 Or W1, W31, 0x10001
	077 Move [X19+56], X0
	078 Call Kernel.DwordMod, X0, X1
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X0, [X23]
	081 Move X22, [X19+48]
	082 Move X21, [X19+56]
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {87}
	086 Call 0x1C17DFC
	087 Move X0, X22
	088 Move X1, X21
	089 Call BigInteger.op_Inequality, X0, X1
	090 Move TEMP, X0
	091 And TEMP, TEMP, 1
	092 Compare TEMP, 1
	093 JumpIfNotEqual {69}
	094 Move X0, [X23]
	095 Move X22, [X19+48]
	096 Move X21, [X19+56]
	097 Move W8, [X0+224]
	098 Compare W8, 0
	099 JumpIfNotEqual {101}
	100 Call 0x1C17DFC
	101 Move X0, X22
	102 Move X1, X21
	103 Call BigInteger.op_Multiply, X0, X1
	104 Move [X19+88], X0
	105 Compare X0, 0
	106 JumpIfEqual {184}
	107 Call BigInteger.BitCount, X0
	108 Move X8, [X19]
	109 Move W22, W0
	110 Move X0, X19
	111 Move X9, [X8+408]
	112 Move X1, [X8+416]
	113 NotImplemented "Instruction BLR not yet implemented."
	114 Move X21, [X19+48]
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move X0, [X23]
	117 Move W8, [X0+224]
	118 Compare W8, 0
	119 JumpIfNotEqual {121}
	120 Call 0x1C17DFC
	121 Move W0, 1
	122 Call BigInteger.op_Implicit, X0
	123 Move X1, X0
	124 Move X0, X21
	125 Call BigInteger.op_Subtraction, X0, X1
	126 Move X21, [X19+56]
	127 Move X20, X0
	128 Move W0, 1
	129 Call BigInteger.op_Implicit, X0
	130 Move X1, X0
	131 Move X0, X21
	132 Call BigInteger.op_Subtraction, X0, X1
	133 Move X21, X0
	134 Move X0, X20
	135 Move X1, X21
	136 Call BigInteger.op_Multiply, X0, X1
	137 Move X8, [X19+96]
	138 Compare X8, 0
	139 JumpIfEqual {184}
	140 Move X1, X0
	141 Move X0, X8
	142 Call Kernel.modInverse, X0, X1
	143 Move X1, X20
	144 Move [X19+40], X0
	145 Call BigInteger.op_Modulus, X0, X1
	146 Move X8, [X19+40]
	147 Move [X19+64], X0
	148 Move X1, X21
	149 Move X0, X8
	150 Call BigInteger.op_Modulus, X0, X1
	151 Move X8, [X19+56]
	152 Move [X19+72], X0
	153 Compare X8, 0
	154 JumpIfEqual {184}
	155 Move X1, [X19+48]
	156 Move X0, X8
	157 Call Kernel.modInverse, X0, X1
	158 Move X8, [X19+104]
	159 Move W9, 1
	160 Move [X19+80], X0
	161 Move [X19+34], W9
	162 Move [X19+32], W9
	163 Compare X8, 0
	164 JumpIfEqual {177}
	165 Move X4, [X8+24]
	166 Move X0, [X8+64]
	167 Move X3, [X8+40]
	168 Move X1, X19
	169 Move X20, [X31+32]
	170 Move X19, [X31+40]
	171 Move X22, [X31+16]
	172 Move X21, [X31+24]
	173 Move X2, X31
	174 Move X30, [X31+48]
	175 Move X23, [X31+56]
	176 CallNoReturn X4
	177 Move X20, [X31+32]
	178 Move X19, [X31+40]
	179 Move X22, [X31+16]
	180 Move X21, [X31+24]
	181 Move X30, [X31+48]
	182 Move X23, [X31+56]
	183 Return 
	184 Call 0x1C17F20

Method: System.Int32 get_KeySize()

Disassembly:
	0x0321D510 CBNZ W8, 0x321D518
	0x0321D514 BL 0x1C16DFC
	0x0321D518 MOV X0, X21
	0x0321D51C MOV X1, X31
	0x0321D520 BL 0x321BFF8
	0x0321D524 TBZ X0, 0x0, 0x321D538
	0x0321D528 LDR X0, [X19 + 0x40]
	0x0321D52C CBZ X0, 0x321D624
	0x0321D530 BL 0x321CB3C
	0x0321D534 STR X31, [X19 + 0x40]
	0x0321D538 LDR X0, [X22]
	0x0321D53C LDR X21, [X19 + 0x48]
	0x0321D540 LDR W8, [X0 + 0xE0]
	0x0321D544 CBNZ W8, 0x321D54C
	0x0321D548 BL 0x1C16DFC
	0x0321D54C MOV X0, X21
	0x0321D550 MOV X1, X31
	0x0321D554 BL 0x321BFF8
	0x0321D558 TBZ X0, 0x0, 0x321D56C
	0x0321D55C LDR X0, [X19 + 0x48]
	0x0321D560 CBZ X0, 0x321D624
	0x0321D564 BL 0x321CB3C
	0x0321D568 STR X31, [X19 + 0x48]
	0x0321D56C LDR X0, [X22]
	0x0321D570 LDR X21, [X19 + 0x50]
	0x0321D574 LDR W8, [X0 + 0xE0]
	0x0321D578 CBNZ W8, 0x321D580
	0x0321D57C BL 0x1C16DFC
	0x0321D580 MOV X0, X21
	0x0321D584 MOV X1, X31
	0x0321D588 BL 0x321BFF8
	0x0321D58C TBZ X0, 0x0, 0x321D5A0
	0x0321D590 LDR X0, [X19 + 0x50]
	0x0321D594 CBZ X0, 0x321D624
	0x0321D598 BL 0x321CB3C
	0x0321D59C STR X31, [X19 + 0x50]
	0x0321D5A0 TBZ X20, 0x0, 0x321D60C
	0x0321D5A4 LDR X0, [X22]
	0x0321D5A8 LDR X20, [X19 + 0x60]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+35]
	005 Compare W8, 0
	006 JumpIfNotEqual {22}
	007 Move W8, [X0+34]
	008 Compare W8, 0
	009 JumpIfEqual {17}
	010 Move X0, [X0+88]
	011 Compare X0, 0
	012 JumpIfEqual {42}
	013 Call BigInteger.BitCount, X0
	014 And W31, W0, 7
	015 Add W8, W0, 8
	016 And W0, W8, 0xFFFFFFF8
	017 Move W0, [X0+16]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move X0, 0xF05000
	023 Move X0, [X0+1400]
	024 Call 0x1C17D08
	025 Move X1, X31
	026 Call Locale.GetText, X0
	027 Move X19, X0
	028 Move X0, 0xF00000
	029 Move X0, [X0+1208]
	030 Call 0x1C17D08
	031 Call 0x1C17F10
	032 Move X1, X19
	033 Move X2, X31
	034 Move X20, X0
	035 Call ObjectDisposedException..ctor, X0, X1
	036 Move X0, 0xF05000
	037 Move X0, [X0+3512]
	038 Call 0x1C17D08
	039 Move X1, X0
	040 Move X0, X20
	041 Call 0x1C17DEC
	042 Call 0x1C17F20

Method: System.Boolean get_PublicOnly()

Disassembly:
	0x0321D5AC LDR W8, [X0 + 0xE0]
	0x0321D5B0 CBNZ W8, 0x321D5B8
	0x0321D5B4 BL 0x1C16DFC
	0x0321D5B8 MOV X0, X20
	0x0321D5BC MOV X1, X31
	0x0321D5C0 BL 0x321BFF8
	0x0321D5C4 TBZ X0, 0x0, 0x321D5D8
	0x0321D5C8 LDR X0, [X19 + 0x60]
	0x0321D5CC CBZ X0, 0x321D624
	0x0321D5D0 BL 0x321CB3C
	0x0321D5D4 STR X31, [X19 + 0x60]
	0x0321D5D8 LDR X0, [X22]
	0x0321D5DC LDR X20, [X19 + 0x58]
	0x0321D5E0 LDR W8, [X0 + 0xE0]
	0x0321D5E4 CBNZ W8, 0x321D5EC
	0x0321D5E8 BL 0x1C16DFC
	0x0321D5EC MOV X0, X20
	0x0321D5F0 MOV X1, X31
	0x0321D5F4 BL 0x321BFF8
	0x0321D5F8 TBZ X0, 0x0, 0x321D60C
	0x0321D5FC LDR X0, [X19 + 0x58]
	0x0321D600 CBZ X0, 0x321D624
	0x0321D604 BL 0x321CB3C
	0x0321D608 STR X31, [X19 + 0x58]
	0x0321D60C MOVZ W8, 0x1
	0x0321D610 STRB W8, [X19 + 0x23]
	0x0321D614 LDP X20, X19, [X31 + 0x20]
	0x0321D618 LDP X22, X21, [X31 + 0x10]
	0x0321D61C LDR X30, [X31], #0x30
	0x0321D620 RET
	0x0321D624 BL 0x1C16F20
	0x0321D628 STR X30, [X31 - 0x30]!
	0x0321D62C STP X22, X21, [X31 + 0x10]
	0x0321D630 STP X20, X19, [X31 + 0x20]
	0x0321D634 ADRP X21, 0x11BF000
	0x0321D638 LDRB W8, [X21 + 0x304]
	0x0321D63C MOV X19, X1
	0x0321D640 MOV X20, X0
	0x0321D644 TBNZ X8, 0x0, 0x321D65C
	0x0321D648 ADRP X0, 0xF04000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11C0000
	006 Move W8, [X20+767]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xF05000
	013 Move X0, [X0+3472]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+767], W8
	017 Move W8, [X19+34]
	018 Compare W8, 0
	019 JumpIfEqual {36}
	020 Move X21, 0xF05000
	021 Move X21, [X21+3472]
	022 Move X20, [X19+40]
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Call BigInteger.op_Equality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {42}
	035 Move W0, 1
	036 Move W0, W31
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return X0
	042 Move X0, [X21]
	043 Move X19, [X19+88]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X0, X19
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X1, X31
	052 Move X30, [X31+32]
	053 Move X21, [X31+40]

Method: System.Byte[] EncryptValue(System.Byte[] rgb)

Disassembly:
	0x0321D6FC LDR X21, [X20 + 0x68]!
	0x0321D700 LDR X22, [X22 + 0xDE0]
	0x0321D704 MOV X0, X21
	0x0321D708 MOV X1, X19
	0x0321D70C MOV X2, X31
	0x0321D710 BL 0x33C0FDC
	0x0321D714 MOV X8, X0
	0x0321D718 CBZ X0, 0x321D72C
	0x0321D71C LDR X1, [X22]
	0x0321D720 LDR X9, [X8]
	0x0321D724 CMP X9, X1
	0x0321D728 B.NE 0x321D758
	0x0321D72C MOV X0, X20
	0x0321D730 MOV X1, X8
	0x0321D734 MOV X2, X21
	0x0321D738 BL 0x1C24138
	0x0321D73C CMP X21, X0
	0x0321D740 MOV X21, X0
	0x0321D744 B.NE 0x321D704
	0x0321D748 LDP X20, X19, [X31 + 0x20]
	0x0321D74C LDP X22, X21, [X31 + 0x10]
	0x0321D750 LDR X30, [X31], #0x30
	0x0321D754 RET
	0x0321D758 MOV X0, X8
	0x0321D75C BL 0x1C171E0
	0x0321D760 SUB X31, X31, 0xA0
	0x0321D764 STP X29, X30, [X31 + 0x40]
	0x0321D768 STP X28, X27, [X31 + 0x50]
	0x0321D76C STP X26, X25, [X31 + 0x60]
	0x0321D770 STP X24, X23, [X31 + 0x70]
	0x0321D774 STP X22, X21, [X31 + 0x80]
	0x0321D778 STP X20, X19, [X31 + 0x90]
	0x0321D77C ADRP X20, 0x11BF000
	0x0321D780 ADRP X21, 0xED6000
	0x0321D784 LDRB W8, [X20 + 0x306]
	0x0321D788 LDR X21, [X21 + 0x8F0]
	0x0321D78C MOV W26, W1
	0x0321D790 MOV X19, X0
	0x0321D794 TBNZ X8, 0x0, 0x321D890
	0x0321D798 ADRP X0, 0xEDF000
	0x0321D79C LDR X0, [X0 + 0x9E8]
	0x0321D7A0 BL 0x1C16CF4
	0x0321D7A4 ADRP X0, 0xED6000
	0x0321D7A8 LDR X0, [X0 + 0x8F0]
	0x0321D7AC BL 0x1C16CF4
	0x0321D7B0 ADRP X0, 0xF04000
	0x0321D7B4 LDR X0, [X0 + 0x5D0]
	0x0321D7B8 BL 0x1C16CF4
	0x0321D7BC ADRP X0, 0xF04000
	0x0321D7C0 LDR X0, [X0 + 0x5D8]
	0x0321D7C4 BL 0x1C16CF4
	0x0321D7C8 ADRP X0, 0xF04000
	0x0321D7CC LDR X0, [X0 + 0x5E0]
	0x0321D7D0 BL 0x1C16CF4
	0x0321D7D4 ADRP X0, 0xF04000
	0x0321D7D8 LDR X0, [X0 + 0x5E8]
	0x0321D7DC BL 0x1C16CF4
	0x0321D7E0 ADRP X0, 0xF04000
	0x0321D7E4 LDR X0, [X0 + 0x5F0]
	0x0321D7E8 BL 0x1C16CF4
	0x0321D7EC ADRP X0, 0xF04000
	0x0321D7F0 LDR X0, [X0 + 0x5F8]
	0x0321D7F4 BL 0x1C16CF4
	0x0321D7F8 ADRP X0, 0xF04000
	0x0321D7FC LDR X0, [X0 + 0x600]
	0x0321D800 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11C0000
	006 Move W8, [X21+768]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF05000
	014 Move X0, [X0+3472]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+768], W8
	018 Move W8, [X19+35]
	019 Compare W8, 0
	020 JumpIfNotEqual {62}
	021 Move X21, 0xF05000
	022 Move W8, [X19+34]
	023 Move X21, [X21+3472]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Move X0, X19
	027 Call RSAManaged.GenerateKeyPair, X0
	028 Move X0, [X21]
	029 Call 0x1C17F10
	030 Move X1, X20
	031 Move X21, X0
	032 Call BigInteger..ctor, X0, X1
	033 Compare X21, 0
	034 JumpIfEqual {61}
	035 Move X2, [X19+88]
	036 Move X1, [X19+96]
	037 Move X0, X21
	038 Call BigInteger.ModPow, X0, X1, X2
	039 Move X8, [X19]
	040 Move X20, X0
	041 Move X0, X19
	042 Move X9, [X8+408]
	043 Move X1, [X8+416]
	044 NotImplemented "Instruction BLR not yet implemented."
	045 NotImplemented "Instruction SBFM not yet implemented."
	046 Move X1, X20
	047 Call RSAManaged.GetPaddedValue, X0, X1, X2
	048 Move X19, X0
	049 Move X0, X21
	050 Call BigInteger.Clear, X0
	051 Compare X20, 0
	052 JumpIfEqual {61}
	053 Move X0, X20
	054 Call BigInteger.Clear, X0
	055 Move X0, X19
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X30, [X31+32]
	059 Move X21, [X31+40]
	060 Return X0
	061 Call 0x1C17F20
	062 Move X0, 0xF00000
	063 Move X0, [X0+1208]
	064 Call 0x1C17D08
	065 Call 0x1C17F10
	066 Move X19, X0
	067 Move X0, 0xF05000
	068 Move X0, [X0+1416]
	069 Call 0x1C17D08
	070 Move X1, X0
	071 Move X0, X19
	072 Move X2, X31
	073 Call ObjectDisposedException..ctor, X0, X1
	074 Move X0, 0xF05000
	075 Move X0, [X0+3520]
	076 Call 0x1C17D08
	077 Move X1, X0
	078 Move X0, X19
	079 Call 0x1C17DEC

Method: System.Security.Cryptography.RSAParameters ExportParameters(System.Boolean includePrivateParameters)

Disassembly:
	0x0321DB8C MOV X2, X31
	0x0321DB90 BL 0x32333E0
	0x0321DB94 LDR X0, [X29]
	0x0321DB98 LDR W8, [X0 + 0xE0]
	0x0321DB9C CBNZ W8, 0x321DBA4
	0x0321DBA0 BL 0x1C16DFC
	0x0321DBA4 MOV X0, X19
	0x0321DBA8 MOV X1, X31
	0x0321DBAC BL 0x33225A0
	0x0321DBB0 MOV X1, X0
	0x0321DBB4 MOV X0, X25
	0x0321DBB8 MOV X2, X31
	0x0321DBBC BL 0x32333E0
	0x0321DBC0 ADRP X8, 0xF04000
	0x0321DBC4 LDR X8, [X8 + 0x5E8]
	0x0321DBC8 LDR X1, [X8]
	0x0321DBCC MOV X0, X25
	0x0321DBD0 MOV X2, X31
	0x0321DBD4 BL 0x32333E0
	0x0321DBD8 ADRP X8, 0xF04000
	0x0321DBDC LDR X8, [X8 + 0x5F0]
	0x0321DBE0 LDR X1, [X8]
	0x0321DBE4 MOV X0, X25
	0x0321DBE8 MOV X2, X31
	0x0321DBEC BL 0x32333E0
	0x0321DBF0 LDR X8, [X25]
	0x0321DBF4 MOV X0, X25
	0x0321DBF8 LDP X9, X1, [X8 + 0x168]
	0x0321DBFC BLR X9
	0x0321DC00 LDP X20, X19, [X31 + 0x90]
	0x0321DC04 LDP X22, X21, [X31 + 0x80]
	0x0321DC08 LDP X24, X23, [X31 + 0x70]
	0x0321DC0C LDP X26, X25, [X31 + 0x60]
	0x0321DC10 LDP X28, X27, [X31 + 0x50]
	0x0321DC14 LDP X29, X30, [X31 + 0x40]
	0x0321DC18 ADD X31, X31, 0xA0
	0x0321DC1C RET
	0x0321DC20 BL 0x1C16F20
	0x0321DC24 B 0x321DCC8
	0x0321DC28 B 0x321DCC8
	0x0321DC2C B 0x321DCC8
	0x0321DC30 B 0x321DCC8
	0x0321DC34 B 0x321DCC8
	0x0321DC38 B 0x321DCC8
	0x0321DC3C B 0x321DCC8
	0x0321DC40 B 0x321DCC8
	0x0321DC44 B 0x321DCC8
	0x0321DC48 B 0x321DCC8
	0x0321DC4C B 0x321DCC8
	0x0321DC50 B 0x321DCC8
	0x0321DC54 B 0x321DCC8
	0x0321DC58 B 0x321DCC8
	0x0321DC5C B 0x321DCC8
	0x0321DC60 B 0x321DCC8
	0x0321DC64 B 0x321DCC8
	0x0321DC68 B 0x321DCC8
	0x0321DC6C B 0x321DCC8
	0x0321DC70 B 0x321DCC8
	0x0321DC74 B 0x321DCC8
	0x0321DC78 B 0x321DCC8
	0x0321DC7C B 0x321DCC8
	0x0321DC80 B 0x321DCC8
	0x0321DC84 B 0x321DCC8
	0x0321DC88 B 0x321DCC8
	0x0321DC8C B 0x321DCC8
	0x0321DC90 B 0x321DCC8
	0x0321DC94 B 0x321DCC8
	0x0321DC98 B 0x321DCC8
	0x0321DC9C B 0x321DCC8
	0x0321DCA0 B 0x321DCC8
	0x0321DCA4 B 0x321DCC8
	0x0321DCA8 B 0x321DCC8
	0x0321DCAC B 0x321DCC8
	0x0321DCB0 B 0x321DCC8
	0x0321DCB4 B 0x321DCC8
	0x0321DCB8 B 0x321DCC8
	0x0321DCBC B 0x321DCC8
	0x0321DCC0 B 0x321DCC8
	0x0321DCC4 B 0x321DCC8
	0x0321DCC8 MOV X25, X0
	0x0321DCCC CMP W1, 0x1
	0x0321DCD0 B.NE 0x321DDDC
	0x0321DCD4 MOV X0, X25
	0x0321DCD8 BL 0x3EB1AD0
	0x0321DCDC MOV X25, X0
	0x0321DCE0 ADRP X0, 0xEDC000
	0x0321DCE4 LDR X0, [X0 + 0xCC0]
	0x0321DCE8 BL 0x1C16D08
	0x0321DCEC LDR X8, [X25]
	0x0321DCF0 LDR X1, [X8]
	0x0321DCF4 BL 0x1C17270
	0x0321DCF8 TBZ X0, 0x0, 0x321DD38
	0x0321DCFC LDR X25, [X25]
	0x0321DD00 BL 0x3EB1AE0
	0x0321DD04 CBNZ X24, 0x321DD58
	0x0321DD08 CBNZ X23, 0x321DD70
	0x0321DD0C CBNZ X22, 0x321DD88
	0x0321DD10 CBNZ X21, 0x321DDA0
	0x0321DD14 CBNZ X20, 0x321DDB8
	0x0321DD18 CBZ X19, 0x321DD30
	0x0321DD1C LDR W2, [X19 + 0x18]
	0x0321DD20 MOV X0, X19
	0x0321DD24 MOV W1, W31
	0x0321DD28 MOV X3, X31
	0x0321DD2C BL 0x339FA34
	0x0321DD30 MOV X0, X25
	0x0321DD34 BL 0x1C16F18
	0x0321DD38 MOVZ W0, 0x8
	0x0321DD3C BL 0x3EB1AF0
	0x0321DD40 LDR X8, [X25]
	0x0321DD44 STR X8, [X0]
	0x0321DD48 ADRP X1, 0xC97000
	0x0321DD4C ADD X1, X1, 0xE58
	0x0321DD50 MOV X2, X31
	0x0321DD54 BL 0x3EB1B00
	0x0321DD58 LDR W2, [X24 + 0x18]
	0x0321DD5C MOV X0, X24
	0x0321DD60 MOV W1, W31
	0x0321DD64 MOV X3, X31
	0x0321DD68 BL 0x339FA34
	0x0321DD6C CBZ X23, 0x321DD0C
	0x0321DD70 LDR W2, [X23 + 0x18]
	0x0321DD74 MOV X0, X23
	0x0321DD78 MOV W1, W31
	0x0321DD7C MOV X3, X31
	0x0321DD80 BL 0x339FA34
	0x0321DD84 CBZ X22, 0x321DD10
	0x0321DD88 LDR W2, [X22 + 0x18]
	0x0321DD8C MOV X0, X22
	0x0321DD90 MOV W1, W31
	0x0321DD94 MOV X3, X31
	0x0321DD98 BL 0x339FA34
	0x0321DD9C CBZ X21, 0x321DD14
	0x0321DDA0 LDR W2, [X21 + 0x18]
	0x0321DDA4 MOV X0, X21
	0x0321DDA8 MOV W1, W31
	0x0321DDAC MOV X3, X31
	0x0321DDB0 BL 0x339FA34
	0x0321DDB4 CBZ X20, 0x321DD18
	0x0321DDB8 LDR W2, [X20 + 0x18]
	0x0321DDBC MOV X0, X20
	0x0321DDC0 MOV W1, W31
	0x0321DDC4 MOV X3, X31
	0x0321DDC8 BL 0x339FA34
	0x0321DDCC CBNZ X19, 0x321DD1C
	0x0321DDD0 B 0x321DD30
	0x0321DDD4 MOV X25, X0
	0x0321DDD8 BL 0x3EB1AE0
	0x0321DDDC MOV X0, X25
	0x0321DDE0 BL 0x1D2C690
	0x0321DDE4 BL 0x1990590
	0x0321DDE8 STR X30, [X31 - 0x30]!
	0x0321DDEC STP X22, X21, [X31 + 0x10]
	0x0321DDF0 STP X20, X19, [X31 + 0x20]
	0x0321DDF4 LDR X8, [X2 + 0x8]
	0x0321DDF8 STP X1, X2, [X0 + 0x20]
	0x0321DDFC MOV X19, X0
	0x0321DE00 MOV X20, X2
	0x0321DE04 STR X8, [X0 + 0x10]
	0x0321DE08 LDRB W22, [X2 + 0x52]
	0x0321DE0C STR X0, [X0 + 0x40]
	0x0321DE10 MOV X0, X2
	0x0321DE14 MOV X21, X1
	0x0321DE18 BL 0x1C16D84
	0x0321DE1C TBZ X0, 0x0, 0x321DE34
	0x0321DE20 CMP W22, 0x2
	0x0321DE24 B.NE 0x321DE70
	0x0321DE28 ADRP X8, 0xFFFFFFFFFE996000
	0x0321DE2C ADD X8, X8, 0xED0
	0x0321DE30 B 0x321DEB4
	0x0321DE34 CMP W22, 0x1
	0x0321DE38 B.NE 0x321DE6C
	0x0321DE3C LDRB W8, [X19 + 0x70]
	0x0321DE40 CBZ W8, 0x321DE84
	0x0321DE44 MOV X0, X20
	0x0321DE48 BL 0x1C16D7C
	0x0321DE4C MOV W21, W0
	0x0321DE50 MOV X0, X20
	0x0321DE54 BL 0x1C17238
	0x0321DE58 TBZ X21, 0x0, 0x321DE90
	0x0321DE5C TBZ X0, 0x0, 0x321DEA0
	0x0321DE60 ADRP X8, 0xFFFFFFFFFE996000
	0x0321DE64 ADD X8, X8, 0xFEC
	0x0321DE68 B 0x321DEB4
	0x0321DE6C CBZ X21, 0x321DED4
	0x0321DE70 LDR X8, [X19 + 0x10]
	0x0321DE74 LDR X9, [X19 + 0x20]
	0x0321DE78 STR X8, [X19 + 0x18]
	0x0321DE7C STR X9, [X19 + 0x40]
	0x0321DE80 B 0x321DEB8
	0x0321DE84 ADRP X8, 0xFFFFFFFFFE996000
	0x0321DE88 ADD X8, X8, 0xEAC
	0x0321DE8C B 0x321DEB4
	0x0321DE90 TBZ X0, 0x0, 0x321DEAC
	0x0321DE94 ADRP X8, 0xFFFFFFFFFE996000
	0x0321DE98 ADD X8, X8, 0xF14
	0x0321DE9C B 0x321DEB4
	0x0321DEA0 ADRP X8, 0xFFFFFFFFFE996000
	0x0321DEA4 ADD X8, X8, 0xFA0
	0x0321DEA8 B 0x321DEB4
	0x0321DEAC ADRP X8, 0xFFFFFFFFFE996000
	0x0321DEB0 ADD X8, X8, 0xEE4

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0x11C0000
	012 Move W9, [X20+769]
	013 Move W23, W1
	014 Move X22, X0
	015 Move X19, X8
	016 Move TEMP, X9
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0xF05000
	021 Move X0, [X0+3472]
	022 Call 0x1C17CF4
	023 Move X0, 0xED7000
	024 Move X0, [X0+1560]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+769], W8
	028 Move W8, [X22+35]
	029 Compare W8, 0
	030 JumpIfNotEqual {215}
	031 Move W8, [X22+34]
	032 Compare W8, 0
	033 JumpIfNotEqual {36}
	034 Move X0, X22
	035 Call RSAManaged.GenerateKeyPair, X0
	036 Move X0, [X22+96]
	037 Compare X0, 0
	038 JumpIfEqual {214}
	039 Call BigInteger.GetBytes, X0
	040 Move X8, [X22+88]
	041 Compare X8, 0
	042 JumpIfEqual {214}
	043 Move X20, X0
	044 Move X0, X8
	045 Call BigInteger.GetBytes, X0
	046 Move X21, X0
	047 Move TEMP, X23
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {184}
	051 Move X25, 0xF05000
	052 Move X25, [X25+3472]
	053 Move X23, [X22+40]
	054 Move X0, [X25]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move X0, X23
	060 Move X1, X31
	061 Call BigInteger.op_Equality, X0, X1
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfEqual {235}
	066 Move X0, [X22+40]
	067 Compare X0, 0
	068 JumpIfEqual {214}
	069 Call BigInteger.GetBytes, X0
	070 Compare X0, 0
	071 JumpIfEqual {214}
	072 Compare X21, 0
	073 JumpIfEqual {214}
	074 Move W8, [X0+24]
	075 Move W1, [X21+24]
	076 Move X23, X0
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X8, 0xED7000
	079 Move X8, [X8+1560]
	080 Move X0, [X8]
	081 Call 0x1C17D6C
	082 Compare X0, 0
	083 JumpIfEqual {214}
	084 Move W8, [X0+24]
	085 Move W4, [X23+24]
	086 Move X24, X0
	087 Move X0, X23
	088 Move W1, W31
	089 Subtract W3, W8, W4
	090 Move X2, X24
	091 Move X5, X31
	092 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	093 Move X23, X24
	094 Move X0, [X25]
	095 Move X24, [X22+48]
	096 Move W8, [X0+224]
	097 Compare W8, 0
	098 JumpIfNotEqual {100}
	099 Call 0x1C17DFC
	100 Move X0, X24
	101 Move X1, X31
	102 Call BigInteger.op_Inequality, X0, X1
	103 Move TEMP, X0
	104 And TEMP, TEMP, 1
	105 Compare TEMP, 1
	106 JumpIfNotEqual {190}
	107 Move X0, [X25]
	108 Move X24, [X22+56]
	109 Move W8, [X0+224]
	110 Compare W8, 0
	111 JumpIfNotEqual {113}
	112 Call 0x1C17DFC
	113 Move X0, X24
	114 Move X1, X31
	115 Call BigInteger.op_Inequality, X0, X1
	116 Move TEMP, X0
	117 And TEMP, TEMP, 1
	118 Compare TEMP, 1
	119 JumpIfNotEqual {190}
	120 Move X0, [X25]
	121 Move X24, [X22+64]
	122 Move W8, [X0+224]
	123 Compare W8, 0
	124 JumpIfNotEqual {126}
	125 Call 0x1C17DFC
	126 Move X0, X24
	127 Move X1, X31
	128 Call BigInteger.op_Inequality, X0, X1
	129 Move TEMP, X0
	130 And TEMP, TEMP, 1
	131 Compare TEMP, 1
	132 JumpIfNotEqual {190}
	133 Move X0, [X25]
	134 Move X24, [X22+72]
	135 Move W8, [X0+224]
	136 Compare W8, 0
	137 JumpIfNotEqual {139}
	138 Call 0x1C17DFC
	139 Move X0, X24
	140 Move X1, X31
	141 Call BigInteger.op_Inequality, X0, X1
	142 Move TEMP, X0
	143 And TEMP, TEMP, 1
	144 Compare TEMP, 1
	145 JumpIfNotEqual {190}
	146 Move X0, [X25]
	147 Move X24, [X22+80]
	148 Move W8, [X0+224]
	149 Compare W8, 0
	150 JumpIfNotEqual {152}
	151 Call 0x1C17DFC
	152 Move X0, X24
	153 Move X1, X31
	154 Call BigInteger.op_Inequality, X0, X1
	155 Move TEMP, X0
	156 And TEMP, TEMP, 1
	157 Compare TEMP, 1
	158 JumpIfNotEqual {190}
	159 Move X8, [X22]
	160 Move X0, X22
	161 Move X9, [X8+408]
	162 Move X1, [X8+416]
	163 NotImplemented "Instruction BLR not yet implemented."
	164 Move X1, [X22+48]
	165 NotImplemented "Instruction SBFM not yet implemented."
	166 Move W2, W27
	167 Call RSAManaged.GetPaddedValue, X0, X1, X2
	168 Move X1, [X22+56]
	169 Move W2, W27
	170 Move X24, X0
	171 Call RSAManaged.GetPaddedValue, X0, X1, X2
	172 Move X1, [X22+64]
	173 Move W2, W27
	174 Move X25, X0
	175 Call RSAManaged.GetPaddedValue, X0, X1, X2
	176 Move X1, [X22+72]
	177 Move W2, W27
	178 Move X26, X0
	179 Call RSAManaged.GetPaddedValue, X0, X1, X2
	180 Move X1, [X22+80]
	181 Move W2, W27
	182 Move X22, X0
	183 Call RSAManaged.GetPaddedValue, X0, X1, X2
	184 Move X24, X31
	185 Move X25, X31
	186 Move X26, X31
	187 Move X22, X31
	188 Move X0, X31
	189 Move X23, X31
	190 Move X24, X31
	191 Move X25, X31
	192 Move X26, X31
	193 Move X22, X31
	194 Move X0, X31
	195 Move [X19], X20
	196 Move [X19+8], X21
	197 Move [X19+16], X24
	198 Move [X19+24], X25
	199 Move [X19+32], X26
	200 Move [X19+40], X22
	201 Move [X19+48], X0
	202 Move [X19+56], X23
	203 Move X20, [X31+64]
	204 Move X19, [X31+72]
	205 Move X22, [X31+48]
	206 Move X21, [X31+56]
	207 Move X24, [X31+32]
	208 Move X23, [X31+40]
	209 Move X26, [X31+16]
	210 Move X25, [X31+24]
	211 Move X30, [X31+80]
	212 Move X27, [X31+88]
	213 Return X0
	214 Call 0x1C17F20
	215 Move X0, 0xF05000
	216 Move X0, [X0+1400]
	217 Call 0x1C17D08
	218 Move X1, X31
	219 Call Locale.GetText, X0
	220 Move X19, X0
	221 Move X0, 0xF00000
	222 Move X0, [X0+1208]
	223 Call 0x1C17D08
	224 Call 0x1C17F10
	225 Move X1, X19
	226 Move X2, X31
	227 Move X20, X0
	228 Call ObjectDisposedException..ctor, X0, X1
	229 Move X0, 0xF05000
	230 Move X0, [X0+3536]
	231 Call 0x1C17D08
	232 Move X1, X0
	233 Move X0, X20
	234 Call 0x1C17DEC
	235 Move X0, 0xF04000
	236 Move X0, [X0+3296]
	237 Call 0x1C17D08
	238 Call 0x1C17F10
	239 Move X19, X0
	240 Move X0, 0xF05000
	241 Move X0, [X0+1448]
	242 Call 0x1C17D08
	243 Move X1, X0
	244 Move X0, X19
	245 Move X2, X31
	246 Call CryptographicException..ctor, X0, X1
	247 Move X0, 0xF05000
	248 Move X0, [X0+3536]
	249 Call 0x1C17D08
	250 Move X1, X0
	251 Move X0, X19
	252 Call 0x1C17DEC

Method: System.Void ImportParameters(System.Security.Cryptography.RSAParameters parameters)

Disassembly:
	0x0321DFE8 ADRP X22, 0xED6000
	0x0321DFEC LDR X9, [X8 + 0x258]
	0x0321DFF0 LDR X1, [X8 + 0x260]
	0x0321DFF4 LDR X22, [X22 + 0x5A8]
	0x0321DFF8 BLR X9
	0x0321DFFC STR W0, [X19 + 0x40]
	0x0321E000 LDR W1, [X19 + 0x1C]
	0x0321E004 LDR X0, [X23]
	0x0321E008 BL 0x1C16D6C
	0x0321E00C STR X0, [X19 + 0x20]
	0x0321E010 MOV X21, X0
	0x0321E014 LDR X0, [X22]
	0x0321E018 LDR W22, [X19 + 0x1C]
	0x0321E01C LDR W8, [X0 + 0xE0]
	0x0321E020 CBNZ W8, 0x321E028
	0x0321E024 BL 0x1C16DFC
	0x0321E028 LDR W1, [X20 + 0x18]
	0x0321E02C MOV W0, W22
	0x0321E030 MOV X2, X31
	0x0321E034 BL 0x337EE94
	0x0321E038 MOV W4, W0
	0x0321E03C MOV X0, X20
	0x0321E040 MOV W1, W31
	0x0321E044 MOV X2, X21
	0x0321E048 MOV W3, W31
	0x0321E04C MOV X5, X31
	0x0321E050 BL 0x33A8A9C
	0x0321E054 LDR W1, [X19 + 0x1C]
	0x0321E058 LDR X0, [X23]
	0x0321E05C BL 0x1C16D6C
	0x0321E060 LDR X8, [X19 + 0x10]
	0x0321E064 STR X0, [X19 + 0x28]
	0x0321E068 CBZ X8, 0x321E0C0
	0x0321E06C LDR X9, [X8]
	0x0321E070 MOV X0, X8
	0x0321E074 LDP X10, X1, [X9 + 0x1B8]
	0x0321E078 BLR X10
	0x0321E07C SBFM W8, W0, 0x3, 0x1F
	0x0321E080 STR W8, [X19 + 0x44]
	0x0321E084 LDR W1, [X19 + 0x1C]
	0x0321E088 LDR X0, [X23]
	0x0321E08C BL 0x1C16D6C
	0x0321E090 STR X0, [X19 + 0x30]
	0x0321E094 LDR W1, [X19 + 0x1C]
	0x0321E098 LDR X0, [X23]
	0x0321E09C BL 0x1C16D6C
	0x0321E0A0 STR X0, [X19 + 0x38]
	0x0321E0A4 LDP X20, X19, [X31 + 0x30]
	0x0321E0A8 LDP X22, X21, [X31 + 0x20]
	0x0321E0AC LDP X30, X23, [X31 + 0x10]
	0x0321E0B0 ADD X31, X31, 0x40
	0x0321E0B4 RET
	0x0321E0B8 MOV X20, X31
	0x0321E0BC CBNZ X20, 0x321DFCC
	0x0321E0C0 BL 0x1C16F20
	0x0321E0C4 ADRP X0, 0xED5000
	0x0321E0C8 LDR X0, [X0 + 0x9D0]
	0x0321E0CC BL 0x1C16D08
	0x0321E0D0 MOVZ W1, 0x2
	0x0321E0D4 BL 0x1C16D6C
	0x0321E0D8 MOV X21, X0
	0x0321E0DC MOV X0, X20
	0x0321E0E0 BL 0x19903C0
	0x0321E0E4 LDR X8, [X20 + 0x18]
	0x0321E0E8 ADRP X20, 0xED5000
	0x0321E0EC STR W8, [X31 + 0xC]
	0x0321E0F0 LDR X20, [X20 + 0x758]
	0x0321E0F4 MOV X0, X20
	0x0321E0F8 BL 0x1C16D08
	0x0321E0FC ADD X1, X31, 0xC
	0x0321E100 BL 0x1C16E04
	0x0321E104 MOV X22, X0
	0x0321E108 MOV X0, X21
	0x0321E10C BL 0x19903C0
	0x0321E110 MOV X0, X21
	0x0321E114 MOV X1, X22
	0x0321E118 BL 0x19980B4
	0x0321E11C MOV X0, X21
	0x0321E120 MOV X1, X31
	0x0321E124 MOV X2, X22
	0x0321E128 BL 0x1993444
	0x0321E12C LDR W8, [X19 + 0x1C]
	0x0321E130 MOV X0, X20
	0x0321E134 STR W8, [X31 + 0x8]
	0x0321E138 BL 0x1C16D08
	0x0321E13C ADD X1, X31, 0x8
	0x0321E140 BL 0x1C16E04
	0x0321E144 MOV X19, X0
	0x0321E148 MOV X0, X21
	0x0321E14C BL 0x19903C0
	0x0321E150 MOV X0, X21
	0x0321E154 MOV X1, X19
	0x0321E158 BL 0x19980B4
	0x0321E15C MOVZ W1, 0x1
	0x0321E160 MOV X0, X21
	0x0321E164 MOV X2, X19
	0x0321E168 BL 0x1993444
	0x0321E16C ADRP X0, 0xF03000
	0x0321E170 LDR X0, [X0 + 0xDE8]
	0x0321E174 BL 0x1C16D08
	0x0321E178 MOV X1, X21
	0x0321E17C MOV X2, X31
	0x0321E180 BL 0x320A164
	0x0321E184 MOV X19, X0
	0x0321E188 ADRP X0, 0xF02000
	0x0321E18C LDR X0, [X0 + 0xCE0]
	0x0321E190 BL 0x1C16D08
	0x0321E194 BL 0x1C16F10
	0x0321E198 MOV X1, X19
	0x0321E19C MOV X2, X31
	0x0321E1A0 MOV X20, X0
	0x0321E1A4 BL 0x3252170
	0x0321E1A8 ADRP X0, 0xF03000
	0x0321E1AC LDR X0, [X0 + 0xDF0]
	0x0321E1B0 BL 0x1C16D08
	0x0321E1B4 MOV X1, X0
	0x0321E1B8 MOV X0, X20
	0x0321E1BC BL 0x1C16DEC
	0x0321E1C0 STP X30, X21, [X31 - 0x20]!
	0x0321E1C4 STP X20, X19, [X31 + 0x10]
	0x0321E1C8 LDR X8, [X0]
	0x0321E1CC MOV X19, X0
	0x0321E1D0 LDP X9, X2, [X8 + 0x1D8]
	0x0321E1D4 MOV W1, W31
	0x0321E1D8 BLR X9
	0x0321E1DC MOV X0, X19
	0x0321E1E0 LDP X20, X19, [X31 + 0x10]
	0x0321E1E4 MOV X1, X31
	0x0321E1E8 LDP X30, X21, [X31], #0x20
	0x0321E1EC B 0x33CB4DC
	0x0321E1F0 CMP W1, 0x1
	0x0321E1F4 MOV X21, X0
	0x0321E1F8 B.NE 0x321E228
	0x0321E1FC MOV X0, X21
	0x0321E200 BL 0x3EB1AD0
	0x0321E204 LDR X20, [X0]
	0x0321E208 BL 0x3EB1AE0
	0x0321E20C MOV X0, X19
	0x0321E210 MOV X1, X31
	0x0321E214 BL 0x33CB4DC
	0x0321E218 CBNZ X20, 0x321E230
	0x0321E21C LDP X20, X19, [X31 + 0x10]
	0x0321E220 LDP X30, X21, [X31], #0x20
	0x0321E224 RET
	0x0321E228 MOV X20, X31
	0x0321E22C B 0x321E23C
	0x0321E230 MOV X0, X20
	0x0321E234 BL 0x1C16F18
	0x0321E238 MOV X21, X0
	0x0321E23C MOV X0, X19
	0x0321E240 MOV X1, X31
	0x0321E244 BL 0x33CB4DC
	0x0321E248 CBNZ X20, 0x321E254
	0x0321E24C MOV X0, X21
	0x0321E250 BL 0x1D2C690
	0x0321E254 MOV X0, X20
	0x0321E258 BL 0x1C16F18
	0x0321E25C BL 0x1990590
	0x0321E260 STP X30, X21, [X31 - 0x20]!
	0x0321E264 STP X20, X19, [X31 + 0x10]
	0x0321E268 ADRP X21, 0x11BE000
	0x0321E26C ADRP X20, 0xEDC000
	0x0321E270 LDRB W8, [X21 + 0x309]
	0x0321E274 LDR X20, [X20 + 0xC10]
	0x0321E278 MOV X19, X0
	0x0321E27C TBNZ X8, 0x0, 0x321E294
	0x0321E280 ADRP X0, 0xEDC000
	0x0321E284 LDR X0, [X0 + 0xC10]
	0x0321E288 BL 0x1C16CF4
	0x0321E28C MOVZ W8, 0x1
	0x0321E290 STRB W8, [X21 + 0x309]
	0x0321E294 LDR X8, [X19]
	0x0321E298 MOVZ W1, 0x1
	0x0321E29C MOV X0, X19
	0x0321E2A0 LDP X9, X2, [X8 + 0x1D8]
	0x0321E2A4 BLR X9
	0x0321E2A8 LDR X0, [X20]
	0x0321E2AC LDR W8, [X0 + 0xE0]
	0x0321E2B0 CBNZ W8, 0x321E2B8
	0x0321E2B4 BL 0x1C16DFC
	0x0321E2B8 MOV X0, X19
	0x0321E2BC LDP X20, X19, [X31 + 0x10]
	0x0321E2C0 MOV X1, X31
	0x0321E2C4 LDP X30, X21, [X31], #0x20
	0x0321E2C8 B 0x33B3E9C
	0x0321E2CC STP X30, X19, [X31 - 0x10]!
	0x0321E2D0 LDRB W8, [X0 + 0x48]
	0x0321E2D4 CBNZ W8, 0x321E318
	0x0321E2D8 MOV X19, X0
	0x0321E2DC TBZ X1, 0x0, 0x321E310
	0x0321E2E0 LDR X0, [X19 + 0x20]
	0x0321E2E4 LDR W2, [X19 + 0x1C]
	0x0321E2E8 MOV W1, W31
	0x0321E2EC MOV X3, X31
	0x0321E2F0 BL 0x339FA34
	0x0321E2F4 LDR X0, [X19 + 0x28]
	0x0321E2F8 LDR W2, [X19 + 0x1C]
	0x0321E2FC MOV W1, W31
	0x0321E300 MOV X3, X31
	0x0321E304 STR X31, [X19 + 0x20]
	0x0321E308 BL 0x339FA34
	0x0321E30C STR X31, [X19 + 0x28]
	0x0321E310 MOVZ W8, 0x1
	0x0321E314 STRB W8, [X19 + 0x48]
	0x0321E318 LDP X30, X19, [X31], #0x10
	0x0321E31C RET
	0x0321E320 MOVZ W0, 0x1
	0x0321E324 RET
	0x0321E328 LDR W0, [X0 + 0x1C]
	0x0321E32C RET
	0x0321E330 LDR W0, [X0 + 0x1C]
	0x0321E334 RET
	0x0321E338 SUB X31, X31, 0x40
	0x0321E33C STP X30, X21, [X31 + 0x20]
	0x0321E340 STP X20, X19, [X31 + 0x30]
	0x0321E344 MOV X21, X0
	0x0321E348 LDR X0, [X0 + 0x10]
	0x0321E34C CBZ X0, 0x321E3F4
	0x0321E350 LDR X8, [X0]
	0x0321E354 MOV X20, X1
	0x0321E358 MOV X19, X2
	0x0321E35C LDR X9, [X8 + 0x238]
	0x0321E360 LDR X1, [X8 + 0x240]
	0x0321E364 BLR X9
	0x0321E368 SUB W8, W0, 0x1
	0x0321E36C CMP W8, 0x4
	0x0321E370 B.HI 0x321E3F8
	0x0321E374 ADRP X9, 0xFFFFFFFFFD978000
	0x0321E378 ADD X9, X9, 0x444
	0x0321E37C ADR X10, 0x10
	0x0321E380 LDRB W11, [X9, X8, LSL]
	0x0321E384 ADD X10, X10, X11, 0x2, LSL
	0x0321E388 BR X10
	0x0321E38C LDR X8, [X21]
	0x0321E390 LDR X4, [X8 + 0x238]
	0x0321E394 LDR X3, [X8 + 0x240]
	0x0321E398 B 0x321E3D8
	0x0321E39C LDR X8, [X21]
	0x0321E3A0 LDR X4, [X8 + 0x228]
	0x0321E3A4 LDR X3, [X8 + 0x230]
	0x0321E3A8 B 0x321E3D8
	0x0321E3AC LDR X8, [X21]
	0x0321E3B0 LDR X4, [X8 + 0x258]
	0x0321E3B4 LDR X3, [X8 + 0x260]
	0x0321E3B8 B 0x321E3D8
	0x0321E3BC LDR X8, [X21]
	0x0321E3C0 LDR X4, [X8 + 0x248]
	0x0321E3C4 LDR X3, [X8 + 0x250]
	0x0321E3C8 B 0x321E3D8
	0x0321E3CC LDR X8, [X21]
	0x0321E3D0 LDR X4, [X8 + 0x268]
	0x0321E3D4 LDR X3, [X8 + 0x270]
	0x0321E3D8 MOV X0, X21
	0x0321E3DC MOV X1, X20
	0x0321E3E0 MOV X2, X19
	0x0321E3E4 LDP X20, X19, [X31 + 0x30]
	0x0321E3E8 LDP X30, X21, [X31 + 0x20]
	0x0321E3EC ADD X31, X31, 0x40
	0x0321E3F0 BR X4
	0x0321E3F4 BL 0x1C16F20
	0x0321E3F8 LDR X19, [X21 + 0x10]
	0x0321E3FC MOV X0, X19
	0x0321E400 BL 0x19903C0
	0x0321E404 LDR X8, [X19]
	0x0321E408 MOV X0, X19
	0x0321E40C LDR X9, [X8 + 0x238]
	0x0321E410 LDR X1, [X8 + 0x240]
	0x0321E414 BLR X9
	0x0321E418 MOV W19, W0
	0x0321E41C ADRP X0, 0xF03000
	0x0321E420 LDR X0, [X0 + 0xDF8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x11C0000
	009 Move W8, [X21+770]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF04000
	017 Move X0, [X0+3472]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+770], W8
	021 Move W8, [X19+35]
	022 Compare W8, 0
	023 JumpIfNotEqual {291}
	024 Move X21, [X20]
	025 Compare X21, 0
	026 JumpIfEqual {305}
	027 Move X8, [X20+8]
	028 Compare X8, 0
	029 JumpIfEqual {307}
	030 Move X24, 0xF04000
	031 Move X24, [X24+3472]
	032 Move X0, [X24]
	033 Call 0x1C17F10
	034 Move X1, X21
	035 Move X22, X0
	036 Call BigInteger..ctor, X0, X1
	037 Move [X19+96], X22
	038 Move X0, [X24]
	039 Move X21, [X20+8]
	040 Call 0x1C17F10
	041 Move X1, X21
	042 Move X22, X0
	043 Call BigInteger..ctor, X0, X1
	044 NotImplemented "Instruction MOVI not yet implemented."
	045 Move X23, X19
	046 Move [X23+40], V0
	047 Move [X23+48], X22
	048 Move [X23+16], V0
	049 Move [X23+24], V0
	050 Move X21, [X20+56]
	051 Compare X21, 0
	052 JumpIfEqual {59}
	053 Move X0, [X24]
	054 Call 0x1C17F10
	055 Move X1, X21
	056 Move X22, X0
	057 Call BigInteger..ctor, X0, X1
	058 Move [X23], X22
	059 Move X21, [X20+32]
	060 Compare X21, 0
	061 JumpIfEqual {68}
	062 Move X0, [X24]
	063 Call 0x1C17F10
	064 Move X1, X21
	065 Move X22, X0
	066 Call BigInteger..ctor, X0, X1
	067 Move [X19+64], X22
	068 Move X21, [X20+40]
	069 Compare X21, 0
	070 JumpIfEqual {77}
	071 Move X0, [X24]
	072 Call 0x1C17F10
	073 Move X1, X21
	074 Move X22, X0
	075 Call BigInteger..ctor, X0, X1
	076 Move [X19+72], X22
	077 Move X21, [X20+48]
	078 Compare X21, 0
	079 JumpIfEqual {86}
	080 Move X0, [X24]
	081 Call 0x1C17F10
	082 Move X1, X21
	083 Move X22, X0
	084 Call BigInteger..ctor, X0, X1
	085 Move [X19+80], X22
	086 Move X21, [X20+16]
	087 Compare X21, 0
	088 JumpIfEqual {95}
	089 Move X0, [X24]
	090 Call 0x1C17F10
	091 Move X1, X21
	092 Move X22, X0
	093 Call BigInteger..ctor, X0, X1
	094 Move [X19+48], X22
	095 Move X20, [X20+24]
	096 Compare X20, 0
	097 JumpIfEqual {104}
	098 Move X0, [X24]
	099 Call 0x1C17F10
	100 Move X1, X20
	101 Move X21, X0
	102 Call BigInteger..ctor, X0, X1
	103 Move [X19+56], X21
	104 Move W8, 1
	105 Move [X19+34], W8
	106 Move X0, [X24]
	107 Move X20, [X19+48]
	108 Move W8, [X0+224]
	109 Compare W8, 0
	110 JumpIfNotEqual {112}
	111 Call 0x1C17DFC
	112 Move X0, X20
	113 Move X1, X31
	114 Call BigInteger.op_Inequality, X0, X1
	115 Move TEMP, X0
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfNotEqual {168}
	119 Move X0, [X24]
	120 Move X20, [X19+56]
	121 Move W8, [X0+224]
	122 Compare W8, 0
	123 JumpIfNotEqual {125}
	124 Call 0x1C17DFC
	125 Move X0, X20
	126 Move X1, X31
	127 Call BigInteger.op_Inequality, X0, X1
	128 Move TEMP, X0
	129 And TEMP, TEMP, 1
	130 Compare TEMP, 1
	131 JumpIfNotEqual {168}
	132 Move X0, [X24]
	133 Move X20, [X19+64]
	134 Move W8, [X0+224]
	135 Compare W8, 0
	136 JumpIfNotEqual {138}
	137 Call 0x1C17DFC
	138 Move X0, X20
	139 Move X1, X31
	140 Call BigInteger.op_Inequality, X0, X1
	141 Move TEMP, X0
	142 And TEMP, TEMP, 1
	143 Compare TEMP, 1
	144 JumpIfNotEqual {168}
	145 Move X0, [X24]
	146 Move X20, [X19+72]
	147 Move W8, [X0+224]
	148 Compare W8, 0
	149 JumpIfNotEqual {151}
	150 Call 0x1C17DFC
	151 Move X0, X20
	152 Move X1, X31
	153 Call BigInteger.op_Inequality, X0, X1
	154 Move TEMP, X0
	155 And TEMP, TEMP, 1
	156 Compare TEMP, 1
	157 JumpIfNotEqual {177}
	158 Move X0, [X24]
	159 Move X20, [X19+80]
	160 Move W8, [X0+224]
	161 Compare W8, 0
	162 JumpIfNotEqual {164}
	163 Call 0x1C17DFC
	164 Move X0, X20
	165 Move X1, X31
	166 Call BigInteger.op_Inequality, X0, X1
	167 And W8, W0, 1
	168 Move [X19+32], W31
	169 Move X20, [X31+48]
	170 Move X19, [X31+56]
	171 Move X22, [X31+32]
	172 Move X21, [X31+40]
	173 Move X24, [X31+16]
	174 Move X23, [X31+24]
	175 Move X30, [X31+64]
	176 Return 
	177 Move W8, W31
	178 Move [X19+32], W8
	179 Move X0, [X24]
	180 Move X20, [X19+88]
	181 Move X22, [X19+48]
	182 Move X21, [X19+56]
	183 Move W8, [X0+224]
	184 Compare W8, 0
	185 JumpIfNotEqual {187}
	186 Call 0x1C17DFC
	187 Move X0, X22
	188 Move X1, X21
	189 Call BigInteger.op_Multiply, X0, X1
	190 Move X1, X0
	191 Move X0, X20
	192 Call BigInteger.op_Equality, X0, X1
	193 Move TEMP, X0
	194 And TEMP, TEMP, 1
	195 Compare TEMP, 1
	196 JumpIfNotEqual {289}
	197 Move X0, [X24]
	198 Move X20, [X19+48]
	199 Move W8, [X0+224]
	200 Compare W8, 0
	201 JumpIfNotEqual {203}
	202 Call 0x1C17DFC
	203 Move W0, 1
	204 Call BigInteger.op_Implicit, X0
	205 Move X1, X0
	206 Move X0, X20
	207 Call BigInteger.op_Subtraction, X0, X1
	208 Move X20, [X19+56]
	209 Move X21, X0
	210 Move W0, 1
	211 Call BigInteger.op_Implicit, X0
	212 Move X1, X0
	213 Move X0, X20
	214 Call BigInteger.op_Subtraction, X0, X1
	215 Move X20, X0
	216 Move X0, X21
	217 Move X1, X20
	218 Call BigInteger.op_Multiply, X0, X1
	219 Move X8, [X19+96]
	220 Compare X8, 0
	221 JumpIfEqual {327}
	222 Move X1, X0
	223 Move X0, X8
	224 Call Kernel.modInverse, X0, X1
	225 Move X8, [X23]
	226 Move X22, X0
	227 Move X1, X22
	228 Move X0, X8
	229 Call BigInteger.op_Equality, X0, X1
	230 Move TEMP, X0
	231 And TEMP, TEMP, 1
	232 Compare TEMP, 1
	233 JumpIfEqual {169}
	234 Move W8, [X19+32]
	235 Compare W8, 0
	236 JumpIfEqual {289}
	237 Move X0, [X24]
	238 Move X23, [X19+64]
	239 Move W8, [X0+224]
	240 Compare W8, 0
	241 JumpIfNotEqual {243}
	242 Call 0x1C17DFC
	243 Move X0, X22
	244 Move X1, X21
	245 Call BigInteger.op_Modulus, X0, X1
	246 Move X1, X0
	247 Move X0, X23
	248 Call BigInteger.op_Equality, X0, X1
	249 Move TEMP, X0
	250 And TEMP, TEMP, 1
	251 Compare TEMP, 1
	252 JumpIfNotEqual {289}
	253 Move X0, [X24]
	254 Move X21, [X19+72]
	255 Move W8, [X0+224]
	256 Compare W8, 0
	257 JumpIfNotEqual {259}
	258 Call 0x1C17DFC
	259 Move X0, X22
	260 Move X1, X20
	261 Call BigInteger.op_Modulus, X0, X1
	262 Move X1, X0
	263 Move X0, X21
	264 Call BigInteger.op_Equality, X0, X1
	265 Move TEMP, X0
	266 And TEMP, TEMP, 1
	267 Compare TEMP, 1
	268 JumpIfNotEqual {289}
	269 Move X0, [X19+56]
	270 Compare X0, 0
	271 JumpIfEqual {327}
	272 Move X1, [X19+48]
	273 Move X20, [X19+80]
	274 Call Kernel.modInverse, X0, X1
	275 Move X8, [X24]
	276 Move X19, X0
	277 Move W9, [X8+224]
	278 Compare W9, 0
	279 JumpIfNotEqual {282}
	280 Move X0, X8
	281 Call 0x1C17DFC
	282 Move X0, X20
	283 Move X1, X19
	284 Call BigInteger.op_Equality, X0, X1
	285 Move TEMP, X0
	286 And TEMP, TEMP, 1
	287 Compare TEMP, 1
	288 JumpIfEqual {169}
	289 Move X0, 0xF04000
	290 Move X0, [X0+1456]
	291 Move X0, 0xF04000
	292 Move X0, [X0+1400]
	293 Call 0x1C17D08
	294 Move X1, X31
	295 Call Locale.GetText, X0
	296 Move X19, X0
	297 Move X0, 0xEFF000
	298 Move X0, [X0+1208]
	299 Call 0x1C17D08
	300 Call 0x1C17F10
	301 Move X1, X19
	302 Move X2, X31
	303 Move X20, X0
	304 Call ObjectDisposedException..ctor, X0, X1
	305 Move X0, 0xF04000
	306 Move X0, [X0+1464]
	307 Move X0, 0xF04000
	308 Move X0, [X0+1472]
	309 Call 0x1C17D08
	310 Move X1, X31
	311 Call Locale.GetText, X0
	312 Move X19, X0
	313 Move X0, 0xF03000
	314 Move X0, [X0+3296]
	315 Call 0x1C17D08
	316 Call 0x1C17F10
	317 Move X1, X19
	318 Move X2, X31
	319 Move X20, X0
	320 Call CryptographicException..ctor, X0, X1
	321 Move X0, 0xF04000
	322 Move X0, [X0+3544]
	323 Call 0x1C17D08
	324 Move X1, X0
	325 Move X0, X20
	326 Call 0x1C17DEC
	327 Call 0x1C17F20

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x0321E424 BL 0x1C16D08
	0x0321E428 MOVN X8, 0x0
	0x0321E42C STP X0, X8, [X31 + 0x8]
	0x0321E430 ADD X0, X31, 0x8
	0x0321E434 MOV X1, X31
	0x0321E438 STR W19, [X31 + 0x18]
	0x0321E43C BL 0x33B162C
	0x0321E440 MOV X19, X0
	0x0321E444 ADRP X0, 0xF03000
	0x0321E448 LDR X0, [X0 + 0xE00]
	0x0321E44C BL 0x1C16D08
	0x0321E450 MOV X1, X19
	0x0321E454 BL 0x321B938
	0x0321E458 MOV X19, X0
	0x0321E45C ADRP X0, 0xEDE000
	0x0321E460 LDR X0, [X0 + 0x758]
	0x0321E464 BL 0x1C16D08
	0x0321E468 BL 0x1C16F10
	0x0321E46C MOV X1, X19
	0x0321E470 MOV X2, X31
	0x0321E474 MOV X20, X0
	0x0321E478 BL 0x33802E4
	0x0321E47C ADRP X0, 0xF03000
	0x0321E480 LDR X0, [X0 + 0xE08]
	0x0321E484 BL 0x1C16D08
	0x0321E488 MOV X1, X0
	0x0321E48C MOV X0, X20
	0x0321E490 BL 0x1C16DEC
	0x0321E494 STP X30, X21, [X31 - 0x20]!
	0x0321E498 STP X20, X19, [X31 + 0x10]
	0x0321E49C LDRB W8, [X0 + 0x18]
	0x0321E4A0 MOV X20, X2
	0x0321E4A4 MOV X19, X0
	0x0321E4A8 MOV X21, X1
	0x0321E4AC CBZ W8, 0x321E540
	0x0321E4B0 LDR W8, [X19 + 0x1C]
	0x0321E4B4 LDR X1, [X19 + 0x20]
	0x0321E4B8 CMP W8, 0x1
	0x0321E4BC B.LT 0x321E510
	0x0321E4C0 MOVZ W8, 0x20
	0x0321E4C4 CBZ X1, 0x321E5F4
	0x0321E4C8 LDR W10, [X1 + 0x18]
	0x0321E4CC SUB X9, X8, 0x20
	0x0321E4D0 CMP X9, X10
	0x0321E4D4 B.CS 0x321E5F0
	0x0321E4D8 CBZ X21, 0x321E5F4
	0x0321E4DC LDR W10, [X21 + 0x18]
	0x0321E4E0 CMP X9, X10
	0x0321E4E4 B.CS 0x321E5F0
	0x0321E4E8 LDRB W9, [X1, X8, LSL]
	0x0321E4EC LDRB W10, [X21, X8, LSL]
	0x0321E4F0 EOR W9, W10, W9, 0x0
	0x0321E4F4 STRB W9, [X1, X8, LSL]
	0x0321E4F8 LDRSW X9, [X19 + 0x1C]
	0x0321E4FC LDR X1, [X19 + 0x20]
	0x0321E500 SUB X10, X8, 0x1F
	0x0321E504 ADD X8, X8, 0x1
	0x0321E508 CMP X10, X9
	0x0321E50C B.LT 0x321E4C4
	0x0321E510 LDR X8, [X19]
	0x0321E514 MOV X0, X19
	0x0321E518 MOV X2, X20
	0x0321E51C LDR X9, [X8 + 0x228]
	0x0321E520 LDR X3, [X8 + 0x230]
	0x0321E524 BLR X9
	0x0321E528 LDR X2, [X19 + 0x20]
	0x0321E52C LDR W4, [X19 + 0x1C]
	0x0321E530 MOV X0, X20
	0x0321E534 MOV W1, W31
	0x0321E538 MOV W3, W31
	0x0321E53C B 0x321E5E0
	0x0321E540 LDR X2, [X19 + 0x28]
	0x0321E544 LDR W4, [X19 + 0x1C]
	0x0321E548 MOV X0, X21
	0x0321E54C MOV W1, W31
	0x0321E550 MOV W3, W31
	0x0321E554 MOV X5, X31
	0x0321E558 BL 0x33A8A9C
	0x0321E55C LDR X8, [X19]
	0x0321E560 MOV X0, X19
	0x0321E564 MOV X1, X21
	0x0321E568 MOV X2, X20
	0x0321E56C LDR X9, [X8 + 0x228]
	0x0321E570 LDR X3, [X8 + 0x230]
	0x0321E574 BLR X9
	0x0321E578 LDR W4, [X19 + 0x1C]
	0x0321E57C CMP W4, 0x1
	0x0321E580 B.LT 0x321E5D4
	0x0321E584 CBZ X20, 0x321E5F4
	0x0321E588 LDR W8, [X20 + 0x18]
	0x0321E58C MOVZ W9, 0x20
	0x0321E590 SUB X11, X9, 0x20
	0x0321E594 CMP X11, X8
	0x0321E598 B.CS 0x321E5F0
	0x0321E59C LDR X10, [X19 + 0x20]
	0x0321E5A0 CBZ X10, 0x321E5F4
	0x0321E5A4 LDR W12, [X10 + 0x18]
	0x0321E5A8 CMP X11, X12
	0x0321E5AC B.CS 0x321E5F0
	0x0321E5B0 LDRB W11, [X20, X9, LSL]
	0x0321E5B4 LDRB W10, [X10, X9, LSL]
	0x0321E5B8 EOR W10, W10, W11, 0x0
	0x0321E5BC STRB W10, [X20, X9, LSL]
	0x0321E5C0 LDRSW X4, [X19 + 0x1C]
	0x0321E5C4 SUB X10, X9, 0x1F
	0x0321E5C8 ADD X9, X9, 0x1
	0x0321E5CC CMP X10, X4
	0x0321E5D0 B.LT 0x321E590
	0x0321E5D4 LDP X2, X0, [X19 + 0x20]
	0x0321E5D8 MOV W1, W31
	0x0321E5DC MOV W3, W31
	0x0321E5E0 LDP X20, X19, [X31 + 0x10]
	0x0321E5E4 MOV X5, X31
	0x0321E5E8 LDP X30, X21, [X31], #0x20
	0x0321E5EC B 0x33A8A9C
	0x0321E5F0 BL 0x1C16F28
	0x0321E5F4 BL 0x1C16F20
	0x0321E5F8 STP X30, X25, [X31 - 0x40]!
	0x0321E5FC STP X24, X23, [X31 + 0x10]
	0x0321E600 STP X22, X21, [X31 + 0x20]
	0x0321E604 STP X20, X19, [X31 + 0x30]
	0x0321E608 LDR W8, [X0 + 0x1C]
	0x0321E60C LDRB W9, [X0 + 0x18]
	0x0321E610 MOV X19, X2
	0x0321E614 MOV X20, X0
	0x0321E618 MOV X21, X1
	0x0321E61C CMP W8, 0x1
	0x0321E620 CBZ W9, 0x321E6E0
	0x0321E624 B.LT 0x321E7A4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11BF000
	007 Move W8, [X21+771]
	008 Move W20, W1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF04000
	015 Move X0, [X0+3472]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+771], W8
	019 Move W8, [X19+35]
	020 Compare W8, 0
	021 JumpIfNotEqual {172}
	022 Move X22, 0xF04000
	023 Move X22, [X22+3472]
	024 Move X21, [X19+40]
	025 Move X0, [X22]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X21
	031 Move X1, X31
	032 Call BigInteger.op_Inequality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {42}
	037 Move X0, [X19+40]
	038 Compare X0, 0
	039 JumpIfEqual {180}
	040 Call BigInteger.Clear, X0
	041 Move [X19+40], X31
	042 Move X0, [X22]
	043 Move X21, [X19+48]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X0, X21
	049 Move X1, X31
	050 Call BigInteger.op_Inequality, X0, X1
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {60}
	055 Move X0, [X19+48]
	056 Compare X0, 0
	057 JumpIfEqual {180}
	058 Call BigInteger.Clear, X0
	059 Move [X19+48], X31
	060 Move X0, [X22]
	061 Move X21, [X19+56]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X0, X21
	067 Move X1, X31
	068 Call BigInteger.op_Inequality, X0, X1
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {78}
	073 Move X0, [X19+56]
	074 Compare X0, 0
	075 JumpIfEqual {180}
	076 Call BigInteger.Clear, X0
	077 Move [X19+56], X31
	078 Move X0, [X22]
	079 Move X21, [X19+64]
	080 Move W8, [X0+224]
	081 Compare W8, 0
	082 JumpIfNotEqual {84}
	083 Call 0x1C17DFC
	084 Move X0, X21
	085 Move X1, X31
	086 Call BigInteger.op_Inequality, X0, X1
	087 Move TEMP, X0
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfNotEqual {96}
	091 Move X0, [X19+64]
	092 Compare X0, 0
	093 JumpIfEqual {180}
	094 Call BigInteger.Clear, X0
	095 Move [X19+64], X31
	096 Move X0, [X22]
	097 Move X21, [X19+72]
	098 Move W8, [X0+224]
	099 Compare W8, 0
	100 JumpIfNotEqual {102}
	101 Call 0x1C17DFC
	102 Move X0, X21
	103 Move X1, X31
	104 Call BigInteger.op_Inequality, X0, X1
	105 Move TEMP, X0
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfNotEqual {114}
	109 Move X0, [X19+72]
	110 Compare X0, 0
	111 JumpIfEqual {180}
	112 Call BigInteger.Clear, X0
	113 Move [X19+72], X31
	114 Move X0, [X22]
	115 Move X21, [X19+80]
	116 Move W8, [X0+224]
	117 Compare W8, 0
	118 JumpIfNotEqual {120}
	119 Call 0x1C17DFC
	120 Move X0, X21
	121 Move X1, X31
	122 Call BigInteger.op_Inequality, X0, X1
	123 Move TEMP, X0
	124 And TEMP, TEMP, 1
	125 Compare TEMP, 1
	126 JumpIfNotEqual {132}
	127 Move X0, [X19+80]
	128 Compare X0, 0
	129 JumpIfEqual {180}
	130 Call BigInteger.Clear, X0
	131 Move [X19+80], X31
	132 Move TEMP, X20
	133 And TEMP, TEMP, 1
	134 Compare TEMP, 1
	135 JumpIfNotEqual {172}
	136 Move X0, [X22]
	137 Move X20, [X19+96]
	138 Move W8, [X0+224]
	139 Compare W8, 0
	140 JumpIfNotEqual {142}
	141 Call 0x1C17DFC
	142 Move X0, X20
	143 Move X1, X31
	144 Call BigInteger.op_Inequality, X0, X1
	145 Move TEMP, X0
	146 And TEMP, TEMP, 1
	147 Compare TEMP, 1
	148 JumpIfNotEqual {154}
	149 Move X0, [X19+96]
	150 Compare X0, 0
	151 JumpIfEqual {180}
	152 Call BigInteger.Clear, X0
	153 Move [X19+96], X31
	154 Move X0, [X22]
	155 Move X20, [X19+88]
	156 Move W8, [X0+224]
	157 Compare W8, 0
	158 JumpIfNotEqual {160}
	159 Call 0x1C17DFC
	160 Move X0, X20
	161 Move X1, X31
	162 Call BigInteger.op_Inequality, X0, X1
	163 Move TEMP, X0
	164 And TEMP, TEMP, 1
	165 Compare TEMP, 1
	166 JumpIfNotEqual {172}
	167 Move X0, [X19+88]
	168 Compare X0, 0
	169 JumpIfEqual {180}
	170 Call BigInteger.Clear, X0
	171 Move [X19+88], X31
	172 Move W8, 1
	173 Move [X19+35], W8
	174 Move X20, [X31+32]
	175 Move X19, [X31+40]
	176 Move X22, [X31+16]
	177 Move X21, [X31+24]
	178 Move X30, [X31+48]
	179 Return 
	180 Call 0x1C17F20

Method: System.Void add_KeyGenerated(Mono.Security.Cryptography.RSAManaged/KeyGeneratedEventHandler value)

Disassembly:
	0x0321E628 MOV X22, X31
	0x0321E62C ADD X23, X21, 0x20
	0x0321E630 ADD X24, X19, 0x20
	0x0321E634 LDR X8, [X20]
	0x0321E638 LDP X1, X2, [X20 + 0x20]
	0x0321E63C MOV X0, X20
	0x0321E640 LDR X9, [X8 + 0x228]
	0x0321E644 LDR X3, [X8 + 0x230]
	0x0321E648 BLR X9
	0x0321E64C LDR X8, [X20 + 0x28]
	0x0321E650 CBZ X8, 0x321E7B8
	0x0321E654 LDR W9, [X8 + 0x18]
	0x0321E658 CBZ W9, 0x321E7BC
	0x0321E65C CBZ X21, 0x321E7B8
	0x0321E660 LDR W9, [X21 + 0x18]
	0x0321E664 CMP X22, X9
	0x0321E668 B.CS 0x321E7BC
	0x0321E66C CBZ X19, 0x321E7B8
	0x0321E670 LDR W9, [X19 + 0x18]
	0x0321E674 CMP X22, X9
	0x0321E678 B.CS 0x321E7BC
	0x0321E67C LDRB W8, [X8 + 0x20]
	0x0321E680 LDRB W9, [X23, X22, LSL]
	0x0321E684 MOVZ W1, 0x1
	0x0321E688 MOV W3, W31
	0x0321E68C MOV X5, X31
	0x0321E690 EOR W8, W9, W8, 0x0
	0x0321E694 STRB W8, [X24, X22, LSL]
	0x0321E698 LDR W8, [X20 + 0x1C]
	0x0321E69C LDR X0, [X20 + 0x20]
	0x0321E6A0 SUB W4, W8, 0x1
	0x0321E6A4 MOV X2, X0
	0x0321E6A8 BL 0x33A8A9C
	0x0321E6AC LDR W8, [X20 + 0x1C]
	0x0321E6B0 LDR X2, [X20 + 0x20]
	0x0321E6B4 MOVZ W4, 0x1
	0x0321E6B8 MOV X0, X19
	0x0321E6BC SUB W3, W8, 0x1
	0x0321E6C0 MOV W1, W22

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11BF000
	007 Move W8, [X21+772]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF04000
	015 Move X0, [X0+3552]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+772], W8
	019 Move X22, 0xF04000
	020 Add X20, X20, 104
	021 Move X21, [X20]
	022 Move X22, [X22+3552]
	023 Move X0, X21
	024 Move X1, X19
	025 Move X2, X31
	026 Call Delegate.Combine, X0, X1
	027 Move X8, X0
	028 Compare X0, 0
	029 JumpIfEqual {33}
	030 Move X1, [X22]
	031 Move X9, [X8]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X0, X20
	034 Move X1, X8
	035 Move X2, X21
	036 Call 0x1C25138
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X21, X0
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Return 
	045 Move X0, X8
	046 Call 0x1C181E0

Method: System.Void remove_KeyGenerated(Mono.Security.Cryptography.RSAManaged/KeyGeneratedEventHandler value)

Disassembly:
	0x0321E6C4 MOV X5, X31
	0x0321E6C8 BL 0x33A8A9C
	0x0321E6CC LDRSW X8, [X20 + 0x1C]
	0x0321E6D0 ADD X22, X22, 0x1
	0x0321E6D4 CMP X22, X8
	0x0321E6D8 B.LT 0x321E634
	0x0321E6DC B 0x321E7A4
	0x0321E6E0 B.LT 0x321E7A4
	0x0321E6E4 MOV X22, X31
	0x0321E6E8 ADD X23, X19, 0x20
	0x0321E6EC ADD X24, X21, 0x20
	0x0321E6F0 MOVZ W25, 0x1
	0x0321E6F4 LDR X8, [X20]
	0x0321E6F8 STRB W25, [X20 + 0x18]
	0x0321E6FC LDP X1, X2, [X20 + 0x20]
	0x0321E700 MOV X0, X20
	0x0321E704 LDR X9, [X8 + 0x228]
	0x0321E708 LDR X3, [X8 + 0x230]
	0x0321E70C BLR X9
	0x0321E710 LDR W8, [X20 + 0x1C]
	0x0321E714 LDR X0, [X20 + 0x20]
	0x0321E718 MOVZ W1, 0x1
	0x0321E71C MOV W3, W31
	0x0321E720 SUB W4, W8, 0x1
	0x0321E724 MOV X2, X0
	0x0321E728 MOV X5, X31
	0x0321E72C STRB W31, [X20 + 0x18]
	0x0321E730 BL 0x33A8A9C
	0x0321E734 LDR W8, [X20 + 0x1C]
	0x0321E738 LDR X2, [X20 + 0x20]
	0x0321E73C MOVZ W4, 0x1
	0x0321E740 MOV X0, X21
	0x0321E744 SUB W3, W8, 0x1
	0x0321E748 MOV W1, W22
	0x0321E74C MOV X5, X31
	0x0321E750 BL 0x33A8A9C
	0x0321E754 LDR X8, [X20 + 0x28]
	0x0321E758 CBZ X8, 0x321E7B8
	0x0321E75C LDR W9, [X8 + 0x18]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11BF000
	007 Move W8, [X21+773]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF04000
	015 Move X0, [X0+3552]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+773], W8
	019 Move X22, 0xF04000
	020 Add X20, X20, 104
	021 Move X21, [X20]
	022 Move X22, [X22+3552]
	023 Move X0, X21
	024 Move X1, X19
	025 Move X2, X31
	026 Call Delegate.Remove, X0, X1
	027 Move X8, X0
	028 Compare X0, 0
	029 JumpIfEqual {33}
	030 Move X1, [X22]
	031 Move X9, [X8]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X0, X20
	034 Move X1, X8
	035 Move X2, X21
	036 Call 0x1C25138
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X21, X0
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Return 
	045 Move X0, X8
	046 Call 0x1C181E0

Method: System.String ToXmlString(System.Boolean includePrivateParameters)

Disassembly:
	0x0321E760 CBZ W9, 0x321E7BC
	0x0321E764 CBZ X21, 0x321E7B8
	0x0321E768 LDR W9, [X21 + 0x18]
	0x0321E76C CMP X22, X9
	0x0321E770 B.CS 0x321E7BC
	0x0321E774 CBZ X19, 0x321E7B8
	0x0321E778 LDR W9, [X19 + 0x18]
	0x0321E77C CMP X22, X9
	0x0321E780 B.CS 0x321E7BC
	0x0321E784 LDRB W8, [X8 + 0x20]
	0x0321E788 LDRB W9, [X24, X22, LSL]
	0x0321E78C EOR W8, W9, W8, 0x0
	0x0321E790 STRB W8, [X23, X22, LSL]
	0x0321E794 LDRSW X8, [X20 + 0x1C]
	0x0321E798 ADD X22, X22, 0x1
	0x0321E79C CMP X22, X8
	0x0321E7A0 B.LT 0x321E6F4
	0x0321E7A4 LDP X20, X19, [X31 + 0x30]
	0x0321E7A8 LDP X22, X21, [X31 + 0x20]
	0x0321E7AC LDP X24, X23, [X31 + 0x10]
	0x0321E7B0 LDP X30, X25, [X31], #0x40
	0x0321E7B4 RET
	0x0321E7B8 BL 0x1C16F20
	0x0321E7BC BL 0x1C16F28
	0x0321E7C0 STP X30, X19, [X31 - 0x10]!
	0x0321E7C4 ADRP X0, 0xF02000
	0x0321E7C8 LDR X0, [X0 + 0xCE0]
	0x0321E7CC BL 0x1C16D08
	0x0321E7D0 BL 0x1C16F10
	0x0321E7D4 MOV X19, X0
	0x0321E7D8 ADRP X0, 0xF03000
	0x0321E7DC LDR X0, [X0 + 0xE10]
	0x0321E7E0 BL 0x1C16D08
	0x0321E7E4 MOV X1, X0
	0x0321E7E8 MOV X0, X19
	0x0321E7EC MOV X2, X31
	0x0321E7F0 BL 0x3252170
	0x0321E7F4 ADRP X0, 0xF03000
	0x0321E7F8 LDR X0, [X0 + 0xE18]
	0x0321E7FC BL 0x1C16D08
	0x0321E800 MOV X1, X0
	0x0321E804 MOV X0, X19
	0x0321E808 BL 0x1C16DEC
	0x0321E80C STP X30, X19, [X31 - 0x10]!
	0x0321E810 ADRP X0, 0xF02000
	0x0321E814 LDR X0, [X0 + 0xCE0]
	0x0321E818 BL 0x1C16D08
	0x0321E81C BL 0x1C16F10
	0x0321E820 MOV X19, X0
	0x0321E824 ADRP X0, 0xF03000
	0x0321E828 LDR X0, [X0 + 0xE20]
	0x0321E82C BL 0x1C16D08
	0x0321E830 MOV X1, X0
	0x0321E834 MOV X0, X19
	0x0321E838 MOV X2, X31
	0x0321E83C BL 0x3252170
	0x0321E840 ADRP X0, 0xF03000
	0x0321E844 LDR X0, [X0 + 0xE28]
	0x0321E848 BL 0x1C16D08
	0x0321E84C MOV X1, X0
	0x0321E850 MOV X0, X19
	0x0321E854 BL 0x1C16DEC
	0x0321E858 STR X30, [X31 - 0x20]!
	0x0321E85C STP X20, X19, [X31 + 0x10]
	0x0321E860 CBZ X1, 0x321E888
	0x0321E864 TBNZ X2, 0x1F, 0x321E8BC
	0x0321E868 TBNZ X3, 0x1F, 0x321E8DC
	0x0321E86C LDR W8, [X1 + 0x18]
	0x0321E870 SUB W8, W8, W3
	0x0321E874 CMP W8, W2
	0x0321E878 B.LT 0x321E938
	0x0321E87C LDP X20, X19, [X31 + 0x10]
	0x0321E880 LDR X30, [X31], #0x20
	0x0321E884 RET
	0x0321E888 ADRP X0, 0xEDA000
	0x0321E88C LDR X0, [X0 + 0x528]
	0x0321E890 BL 0x1C16D08
	0x0321E894 BL 0x1C16F10
	0x0321E898 MOV X19, X0
	0x0321E89C ADRP X0, 0xF03000
	0x0321E8A0 LDR X0, [X0 + 0xE30]
	0x0321E8A4 BL 0x1C16D08
	0x0321E8A8 MOV X1, X0
	0x0321E8AC MOV X0, X19
	0x0321E8B0 MOV X2, X31
	0x0321E8B4 BL 0x330E100
	0x0321E8B8 B 0x321E920
	0x0321E8BC ADRP X0, 0xEDD000
	0x0321E8C0 LDR X0, [X0 + 0x760]
	0x0321E8C4 BL 0x1C16D08
	0x0321E8C8 BL 0x1C16F10
	0x0321E8CC MOV X19, X0
	0x0321E8D0 ADRP X0, 0xF03000
	0x0321E8D4 LDR X0, [X0 + 0xE38]
	0x0321E8D8 B 0x321E8F8
	0x0321E8DC ADRP X0, 0xEDD000
	0x0321E8E0 LDR X0, [X0 + 0x760]
	0x0321E8E4 BL 0x1C16D08
	0x0321E8E8 BL 0x1C16F10
	0x0321E8EC MOV X19, X0
	0x0321E8F0 ADRP X0, 0xF03000
	0x0321E8F4 LDR X0, [X0 + 0xE40]
	0x0321E8F8 BL 0x1C16D08
	0x0321E8FC MOV X20, X0
	0x0321E900 ADRP X0, 0xF03000
	0x0321E904 LDR X0, [X0 + 0xE48]
	0x0321E908 BL 0x1C16D08
	0x0321E90C MOV X2, X0
	0x0321E910 MOV X0, X19
	0x0321E914 MOV X1, X20
	0x0321E918 MOV X3, X31
	0x0321E91C BL 0x3311888
	0x0321E920 ADRP X0, 0xF03000
	0x0321E924 LDR X0, [X0 + 0xE50]
	0x0321E928 BL 0x1C16D08
	0x0321E92C MOV X1, X0
	0x0321E930 MOV X0, X19
	0x0321E934 BL 0x1C16DEC
	0x0321E938 ADRP X0, 0xF03000
	0x0321E93C LDR X0, [X0 + 0xE58]
	0x0321E940 BL 0x1C16D08
	0x0321E944 MOV X1, X31
	0x0321E948 BL 0x320A160
	0x0321E94C MOV X19, X0
	0x0321E950 ADRP X0, 0xEDD000
	0x0321E954 LDR X0, [X0 + 0x578]
	0x0321E958 BL 0x1C16D08
	0x0321E95C BL 0x1C16F10
	0x0321E960 MOV X20, X0
	0x0321E964 ADRP X0, 0xF03000
	0x0321E968 LDR X0, [X0 + 0xE30]
	0x0321E96C BL 0x1C16D08
	0x0321E970 MOV X1, X0
	0x0321E974 MOV X0, X20
	0x0321E978 MOV X2, X19
	0x0321E97C MOV X3, X31
	0x0321E980 BL 0x330E16C
	0x0321E984 ADRP X0, 0xF03000
	0x0321E988 LDR X0, [X0 + 0xE50]
	0x0321E98C BL 0x1C16D08
	0x0321E990 MOV X1, X0
	0x0321E994 MOV X0, X20
	0x0321E998 BL 0x1C16DEC
	0x0321E99C STR X30, [X31 - 0x40]!
	0x0321E9A0 STP X24, X23, [X31 + 0x10]
	0x0321E9A4 STP X22, X21, [X31 + 0x20]
	0x0321E9A8 STP X20, X19, [X31 + 0x30]
	0x0321E9AC LDRB W8, [X0 + 0x48]
	0x0321E9B0 CBNZ W8, 0x321EADC
	0x0321E9B4 MOV W19, W5
	0x0321E9B8 MOV X20, X4
	0x0321E9BC MOV W24, W3
	0x0321E9C0 MOV W21, W2
	0x0321E9C4 MOV X22, X0
	0x0321E9C8 MOV X23, X1
	0x0321E9CC BL 0x321E858
	0x0321E9D0 CBZ X20, 0x321EB10
	0x0321E9D4 TBNZ X19, 0x1F, 0x321EB44
	0x0321E9D8 LDR W8, [X20 + 0x18]
	0x0321E9DC LDRB W10, [X22 + 0x18]
	0x0321E9E0 SUB W9, W8, W24
	0x0321E9E4 SUB W9, W9, W19
	0x0321E9E8 CBNZ W10, 0x321EA04
	0x0321E9EC TBZ X9, 0x1F, 0x321EA04
	0x0321E9F0 LDR W10, [X22 + 0x40]
	0x0321E9F4 ORR W11, W10, 0x2
	0x0321E9F8 CMP W11, 0x3
	0x0321E9FC B.NE 0x321EA0C
	0x0321EA00 B 0x321EA78
	0x0321EA04 CBNZ W10, 0x321EA18
	0x0321EA08 LDR W10, [X22 + 0x40]
	0x0321EA0C AND W10, W10, 0xFFFFFFFD
	0x0321EA10 CMP W10, 0x1
	0x0321EA14 B.NE 0x321EA40
	0x0321EA18 TBZ X9, 0x1F, 0x321EA4C
	0x0321EA1C CBZ X23, 0x321EBA0
	0x0321EA20 LDR W9, [X23 + 0x18]
	0x0321EA24 LDR W10, [X22 + 0x1C]
	0x0321EA28 ADD W11, W8, W21
	0x0321EA2C SUB W9, W9, W11
	0x0321EA30 CMP W9, W10
	0x0321EA34 B.NE 0x321EA78
	0x0321EA38 SUB W24, W8, W19
	0x0321EA3C B 0x321EA4C
	0x0321EA40 LDR W8, [X22 + 0x1C]
	0x0321EA44 ADDS W31, W8, W9
	0x0321EA48 B.MI 0x321EA78
	0x0321EA4C MOV X0, X22
	0x0321EA50 MOV X1, X23
	0x0321EA54 MOV W2, W21
	0x0321EA58 MOV W3, W24
	0x0321EA5C MOV X4, X20
	0x0321EA60 MOV W5, W19
	0x0321EA64 LDP X20, X19, [X31 + 0x30]
	0x0321EA68 LDP X22, X21, [X31 + 0x20]
	0x0321EA6C LDP X24, X23, [X31 + 0x10]
	0x0321EA70 LDR X30, [X31], #0x40
	0x0321EA74 B 0x321EBC8
	0x0321EA78 ADRP X0, 0xF03000
	0x0321EA7C LDR X0, [X0 + 0xE58]
	0x0321EA80 BL 0x1C16D08
	0x0321EA84 MOV X1, X31
	0x0321EA88 BL 0x320A160
	0x0321EA8C MOV X19, X0
	0x0321EA90 ADRP X0, 0xF02000
	0x0321EA94 LDR X0, [X0 + 0xCE0]
	0x0321EA98 BL 0x1C16D08
	0x0321EA9C BL 0x1C16F10
	0x0321EAA0 MOV X20, X0
	0x0321EAA4 ADRP X0, 0xF03000
	0x0321EAA8 LDR X0, [X0 + 0xE60]
	0x0321EAAC BL 0x1C16D08
	0x0321EAB0 MOV X1, X0
	0x0321EAB4 MOV X0, X20
	0x0321EAB8 MOV X2, X19
	0x0321EABC MOV X3, X31
	0x0321EAC0 BL 0x3252374
	0x0321EAC4 ADRP X0, 0xF03000
	0x0321EAC8 LDR X0, [X0 + 0xE68]
	0x0321EACC BL 0x1C16D08
	0x0321EAD0 MOV X1, X0
	0x0321EAD4 MOV X0, X20
	0x0321EAD8 BL 0x1C16DEC
	0x0321EADC ADRP X0, 0xEFE000
	0x0321EAE0 LDR X0, [X0 + 0x4B8]
	0x0321EAE4 BL 0x1C16D08
	0x0321EAE8 BL 0x1C16F10
	0x0321EAEC MOV X19, X0
	0x0321EAF0 ADRP X0, 0xF03000
	0x0321EAF4 LDR X0, [X0 + 0xE70]
	0x0321EAF8 BL 0x1C16D08
	0x0321EAFC MOV X1, X0
	0x0321EB00 MOV X0, X19
	0x0321EB04 MOV X2, X31
	0x0321EB08 BL 0x338C448
	0x0321EB0C B 0x321EB88
	0x0321EB10 ADRP X0, 0xEDA000
	0x0321EB14 LDR X0, [X0 + 0x528]
	0x0321EB18 BL 0x1C16D08
	0x0321EB1C BL 0x1C16F10
	0x0321EB20 MOV X19, X0
	0x0321EB24 ADRP X0, 0xF03000
	0x0321EB28 LDR X0, [X0 + 0xE60]
	0x0321EB2C BL 0x1C16D08
	0x0321EB30 MOV X1, X0
	0x0321EB34 MOV X0, X19
	0x0321EB38 MOV X2, X31
	0x0321EB3C BL 0x330E100
	0x0321EB40 B 0x321EB88
	0x0321EB44 ADRP X0, 0xEDD000
	0x0321EB48 LDR X0, [X0 + 0x760]
	0x0321EB4C BL 0x1C16D08
	0x0321EB50 BL 0x1C16F10
	0x0321EB54 MOV X19, X0
	0x0321EB58 ADRP X0, 0xF03000
	0x0321EB5C LDR X0, [X0 + 0xE78]
	0x0321EB60 BL 0x1C16D08
	0x0321EB64 MOV X20, X0
	0x0321EB68 ADRP X0, 0xF03000
	0x0321EB6C LDR X0, [X0 + 0xE48]
	0x0321EB70 BL 0x1C16D08
	0x0321EB74 MOV X2, X0
	0x0321EB78 MOV X0, X19
	0x0321EB7C MOV X1, X20
	0x0321EB80 MOV X3, X31
	0x0321EB84 BL 0x3311888
	0x0321EB88 ADRP X0, 0xF03000
	0x0321EB8C LDR X0, [X0 + 0xE68]
	0x0321EB90 BL 0x1C16D08
	0x0321EB94 MOV X1, X0
	0x0321EB98 MOV X0, X19
	0x0321EB9C BL 0x1C16DEC
	0x0321EBA0 BL 0x1C16F20
	0x0321EBA4 LDRB W8, [X0 + 0x18]
	0x0321EBA8 CBZ W8, 0x321EBB4
	0x0321EBAC MOV W0, W31
	0x0321EBB0 RET
	0x0321EBB4 LDR W8, [X0 + 0x40]
	0x0321EBB8 AND W8, W8, 0xFFFFFFFD
	0x0321EBBC CMP W8, 0x1
	0x0321EBC0 CSET W0, NE
	0x0321EBC4 RET
	0x0321EBC8 STP X30, X25, [X31 - 0x40]!
	0x0321EBCC STP X24, X23, [X31 + 0x10]
	0x0321EBD0 STP X22, X21, [X31 + 0x20]
	0x0321EBD4 STP X20, X19, [X31 + 0x30]
	0x0321EBD8 MOV X23, X4
	0x0321EBDC LDR W4, [X0 + 0x1C]
	0x0321EBE0 MOV W22, W5
	0x0321EBE4 MOV W20, W2
	0x0321EBE8 MOV X19, X0
	0x0321EBEC CMP W4, W3
	0x0321EBF0 MOV X21, X1
	0x0321EBF4 B.NE 0x321EC00
	0x0321EBF8 MOVZ W25, 0x1
	0x0321EBFC B 0x321EC0C
	0x0321EC00 SDIV W25, W3, W4
	0x0321EC04 MSUB W8, W25, W4, W3
	0x0321EC08 CBNZ W8, 0x321ED38
	0x0321EC0C LDRB W8, [X19 + 0x18]
	0x0321EC10 CBNZ W8, 0x321EC28
	0x0321EC14 LDR W8, [X19 + 0x40]
	0x0321EC18 AND W8, W8, 0xFFFFFFFD
	0x0321EC1C CMP W8, 0x1
	0x0321EC20 CSET W8, NE
	0x0321EC24 SUB W25, W25, W8
	0x0321EC28 LDRB W8, [X19 + 0x49]
	0x0321EC2C CBZ W8, 0x321EC78
	0x0321EC30 LDR X8, [X19]
	0x0321EC34 LDP X1, X2, [X19 + 0x30]
	0x0321EC38 MOV X0, X19
	0x0321EC3C LDR X9, [X8 + 0x218]
	0x0321EC40 LDR X3, [X8 + 0x220]
	0x0321EC44 BLR X9
	0x0321EC48 LDR X0, [X19 + 0x38]
	0x0321EC4C LDR W4, [X19 + 0x1C]
	0x0321EC50 MOV W1, W31
	0x0321EC54 MOV X2, X23
	0x0321EC58 MOV W3, W22
	0x0321EC5C MOV X5, X31
	0x0321EC60 BL 0x33A8A9C
	0x0321EC64 LDR W4, [X19 + 0x1C]
	0x0321EC68 STRB W31, [X19 + 0x49]
	0x0321EC6C ADD W22, W4, W22
	0x0321EC70 MOV W24, W4
	0x0321EC74 B 0x321EC7C
	0x0321EC78 MOV W24, W31
	0x0321EC7C CMP W25, 0x1
	0x0321EC80 B.LT 0x321ECE8
	0x0321EC84 LDR X2, [X19 + 0x30]
	0x0321EC88 MOV X0, X21
	0x0321EC8C MOV W1, W20
	0x0321EC90 MOV W3, W31
	0x0321EC94 MOV X5, X31
	0x0321EC98 BL 0x33A8A9C
	0x0321EC9C LDR X8, [X19]
	0x0321ECA0 LDP X1, X2, [X19 + 0x30]
	0x0321ECA4 MOV X0, X19
	0x0321ECA8 LDR X9, [X8 + 0x218]
	0x0321ECAC LDR X3, [X8 + 0x220]
	0x0321ECB0 BLR X9
	0x0321ECB4 LDR X0, [X19 + 0x38]
	0x0321ECB8 LDR W4, [X19 + 0x1C]
	0x0321ECBC MOV W1, W31
	0x0321ECC0 MOV X2, X23
	0x0321ECC4 MOV W3, W22
	0x0321ECC8 MOV X5, X31
	0x0321ECCC BL 0x33A8A9C
	0x0321ECD0 LDR W4, [X19 + 0x1C]
	0x0321ECD4 SUBS W25, W25, 0x1
	0x0321ECD8 ADD W20, W4, W20
	0x0321ECDC ADD W22, W4, W22
	0x0321ECE0 ADD W24, W4, W24
	0x0321ECE4 B.NE 0x321EC84
	0x0321ECE8 LDRB W8, [X19 + 0x18]
	0x0321ECEC CBNZ W8, 0x321ED20
	0x0321ECF0 LDR W8, [X19 + 0x40]
	0x0321ECF4 AND W8, W8, 0xFFFFFFFD
	0x0321ECF8 CMP W8, 0x1
	0x0321ECFC B.EQ 0x321ED20
	0x0321ED00 LDR X2, [X19 + 0x30]
	0x0321ED04 MOV X0, X21
	0x0321ED08 MOV W1, W20
	0x0321ED0C MOV W3, W31
	0x0321ED10 MOV X5, X31
	0x0321ED14 BL 0x33A8A9C
	0x0321ED18 MOVZ W8, 0x1
	0x0321ED1C STRB W8, [X19 + 0x49]
	0x0321ED20 MOV W0, W24
	0x0321ED24 LDP X20, X19, [X31 + 0x30]
	0x0321ED28 LDP X22, X21, [X31 + 0x20]
	0x0321ED2C LDP X24, X23, [X31 + 0x10]
	0x0321ED30 LDP X30, X25, [X31], #0x40
	0x0321ED34 RET
	0x0321ED38 ADRP X0, 0xF02000
	0x0321ED3C LDR X0, [X0 + 0xCE0]
	0x0321ED40 BL 0x1C16D08
	0x0321ED44 BL 0x1C16F10
	0x0321ED48 MOV X19, X0
	0x0321ED4C ADRP X0, 0xF03000
	0x0321ED50 LDR X0, [X0 + 0xE80]
	0x0321ED54 BL 0x1C16D08
	0x0321ED58 MOV X1, X0
	0x0321ED5C MOV X0, X19
	0x0321ED60 MOV X2, X31
	0x0321ED64 BL 0x3252170
	0x0321ED68 ADRP X0, 0xF03000
	0x0321ED6C LDR X0, [X0 + 0xE88]
	0x0321ED70 BL 0x1C16D08
	0x0321ED74 MOV X1, X0
	0x0321ED78 MOV X0, X19
	0x0321ED7C BL 0x1C16DEC
	0x0321ED80 STP X30, X23, [X31 - 0x30]!
	0x0321ED84 STP X22, X21, [X31 + 0x10]
	0x0321ED88 STP X20, X19, [X31 + 0x20]
	0x0321ED8C ADRP X23, 0x11BE000
	0x0321ED90 LDRB W8, [X23 + 0x30A]
	0x0321ED94 MOV W19, W3
	0x0321ED98 MOV W20, W2
	0x0321ED9C MOV X21, X1
	0x0321EDA0 MOV X22, X0
	0x0321EDA4 TBNZ X8, 0x0, 0x321EDBC
	0x0321EDA8 ADRP X0, 0xED5000
	0x0321EDAC LDR X0, [X0 + 0x618]
	0x0321EDB0 BL 0x1C16CF4
	0x0321EDB4 MOVZ W8, 0x1
	0x0321EDB8 STRB W8, [X23 + 0x30A]
	0x0321EDBC ADRP X23, 0xED5000
	0x0321EDC0 LDR X8, [X22 + 0x50]
	0x0321EDC4 LDR X23, [X23 + 0x618]
	0x0321EDC8 CBNZ X8, 0x321EDD8
	0x0321EDCC MOV X0, X31
	0x0321EDD0 BL 0x3256158
	0x0321EDD4 STR X0, [X22 + 0x50]
	0x0321EDD8 LDR X0, [X23]
	0x0321EDDC MOV W1, W19
	0x0321EDE0 BL 0x1C16D6C
	0x0321EDE4 LDR X8, [X22 + 0x50]

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+64], X29
	003 Move [X31+72], X30
	004 Move [X31+80], X28
	005 Move [X31+88], X27
	006 Move [X31+96], X26
	007 Move [X31+104], X25
	008 Move [X31+112], X24
	009 Move [X31+120], X23
	010 Move [X31+128], X22
	011 Move [X31+136], X21
	012 Move [X31+144], X20
	013 Move [X31+152], X19
	014 Move X20, 0x11BF000
	015 Move X21, 0xED6000
	016 Move W8, [X20+774]
	017 Move X21, [X21+2288]
	018 Move W26, W1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {86}
	024 Move X0, 0xEDF000
	025 Move X0, [X0+2536]
	026 Call 0x1C17CF4
	027 Move X0, 0xED6000
	028 Move X0, [X0+2288]
	029 Call 0x1C17CF4
	030 Move X0, 0xF04000
	031 Move X0, [X0+1488]
	032 Call 0x1C17CF4
	033 Move X0, 0xF04000
	034 Move X0, [X0+1496]
	035 Call 0x1C17CF4
	036 Move X0, 0xF04000
	037 Move X0, [X0+1504]
	038 Call 0x1C17CF4
	039 Move X0, 0xF04000
	040 Move X0, [X0+1512]
	041 Call 0x1C17CF4
	042 Move X0, 0xF04000
	043 Move X0, [X0+1520]
	044 Call 0x1C17CF4
	045 Move X0, 0xF04000
	046 Move X0, [X0+1528]
	047 Call 0x1C17CF4
	048 Move X0, 0xF04000
	049 Move X0, [X0+1536]
	050 Call 0x1C17CF4
	051 Move X0, 0xF04000
	052 Move X0, [X0+1544]
	053 Call 0x1C17CF4
	054 Move X0, 0xF04000
	055 Move X0, [X0+1552]
	056 Call 0x1C17CF4
	057 Move X0, 0xF04000
	058 Move X0, [X0+1560]
	059 Call 0x1C17CF4
	060 Move X0, 0xF04000
	061 Move X0, [X0+1568]
	062 Call 0x1C17CF4
	063 Move X0, 0xF04000
	064 Move X0, [X0+1576]
	065 Call 0x1C17CF4
	066 Move X0, 0xF04000
	067 Move X0, [X0+1584]
	068 Call 0x1C17CF4
	069 Move X0, 0xF04000
	070 Move X0, [X0+1592]
	071 Call 0x1C17CF4
	072 Move X0, 0xF04000
	073 Move X0, [X0+1600]
	074 Call 0x1C17CF4
	075 Move X0, 0xF04000
	076 Move X0, [X0+1608]
	077 Call 0x1C17CF4
	078 Move X0, 0xF04000
	079 Move X0, [X0+1616]
	080 Call 0x1C17CF4
	081 Move X0, 0xF04000
	082 Move X0, [X0+1624]
	083 Call 0x1C17CF4
	084 Move W8, 1
	085 Move [X20+774], W8
	086 Move X0, [X21]
	087 Call 0x1C17F10
	088 Move X1, X31
	089 Move X25, X0
	090 Call StringBuilder..ctor, X0
	091 Move X8, [X19]
	092 And W1, W26, 1
	093 Move X0, X19
	094 Move X9, [X8+488]
	095 Move X2, [X8+496]
	096 Add X8, X31, 0
	097 NotImplemented "Instruction BLR not yet implemented."
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X22, [X31+32]
	101 Move X21, [X31+40]
	102 Move X20, [X31+48]
	103 Move X19, [X31+56]
	104 Compare X25, 0
	105 JumpIfEqual {342}
	106 Move X8, 0xF04000
	107 Move X8, [X8+1584]
	108 Move X27, [X31]
	109 Move X28, [X31+8]
	110 Move X1, [X8]
	111 Move X0, X25
	112 Move X2, X31
	113 Call StringBuilder.Append, X0, X1
	114 Move X8, 0xF04000
	115 Move X8, [X8+1600]
	116 Move X1, [X8]
	117 Move X0, X25
	118 Move X2, X31
	119 Call StringBuilder.Append, X0, X1
	120 Move X29, 0xEDF000
	121 Move X29, [X29+2536]
	122 Move X0, [X29]
	123 Move W8, [X0+224]
	124 Compare W8, 0
	125 JumpIfNotEqual {127}
	126 Call 0x1C17DFC
	127 Move X0, X28
	128 Move X1, X31
	129 Call Convert.ToBase64String, X0
	130 Move X1, X0
	131 Move X0, X25
	132 Move X2, X31
	133 Call StringBuilder.Append, X0, X1
	134 Move X8, 0xF04000
	135 Move X8, [X8+1616]
	136 Move X1, [X8]
	137 Move X0, X25
	138 Move X2, X31
	139 Call StringBuilder.Append, X0, X1
	140 Move X8, 0xF04000
	141 Move X8, [X8+1488]
	142 Move X1, [X8]
	143 Move X0, X25
	144 Move X2, X31
	145 Call StringBuilder.Append, X0, X1
	146 Move X0, X27
	147 Move X1, X31
	148 Call Convert.ToBase64String, X0
	149 Move X1, X0
	150 Move X0, X25
	151 Move X2, X31
	152 Call StringBuilder.Append, X0, X1
	153 Move X8, 0xF04000
	154 Move X8, [X8+1568]
	155 Move X1, [X8]
	156 Move X0, X25
	157 Move X2, X31
	158 Call StringBuilder.Append, X0, X1
	159 Move TEMP, X26
	160 And TEMP, TEMP, 1
	161 Compare TEMP, 1
	162 JumpIfNotEqual {317}
	163 Compare X24, 0
	164 JumpIfEqual {189}
	165 Move X8, 0xF04000
	166 Move X8, [X8+1552]
	167 Move X1, [X8]
	168 Move X0, X25
	169 Move X2, X31
	170 Call StringBuilder.Append, X0, X1
	171 Move X0, [X29]
	172 Move W8, [X0+224]
	173 Compare W8, 0
	174 JumpIfNotEqual {176}
	175 Call 0x1C17DFC
	176 Move X0, X24
	177 Move X1, X31
	178 Call Convert.ToBase64String, X0
	179 Move X1, X0
	180 Move X0, X25
	181 Move X2, X31
	182 Call StringBuilder.Append, X0, X1
	183 Move X8, 0xF04000
	184 Move X8, [X8+1544]
	185 Move X1, [X8]
	186 Move X0, X25
	187 Move X2, X31
	188 Call StringBuilder.Append, X0, X1
	189 Compare X23, 0
	190 JumpIfEqual {215}
	191 Move X8, 0xF04000
	192 Move X8, [X8+1608]
	193 Move X1, [X8]
	194 Move X0, X25
	195 Move X2, X31
	196 Call StringBuilder.Append, X0, X1
	197 Move X0, [X29]
	198 Move W8, [X0+224]
	199 Compare W8, 0
	200 JumpIfNotEqual {202}
	201 Call 0x1C17DFC
	202 Move X0, X23
	203 Move X1, X31
	204 Call Convert.ToBase64String, X0
	205 Move X1, X0
	206 Move X0, X25
	207 Move X2, X31
	208 Call StringBuilder.Append, X0, X1
	209 Move X8, 0xF04000
	210 Move X8, [X8+1560]
	211 Move X1, [X8]
	212 Move X0, X25
	213 Move X2, X31
	214 Call StringBuilder.Append, X0, X1
	215 Compare X22, 0
	216 JumpIfEqual {241}
	217 Move X8, 0xF04000
	218 Move X8, [X8+1592]
	219 Move X1, [X8]
	220 Move X0, X25
	221 Move X2, X31
	222 Call StringBuilder.Append, X0, X1
	223 Move X0, [X29]
	224 Move W8, [X0+224]
	225 Compare W8, 0
	226 JumpIfNotEqual {228}
	227 Call 0x1C17DFC
	228 Move X0, X22
	229 Move X1, X31
	230 Call Convert.ToBase64String, X0
	231 Move X1, X0
	232 Move X0, X25
	233 Move X2, X31
	234 Call StringBuilder.Append, X0, X1
	235 Move X8, 0xF04000
	236 Move X8, [X8+1624]
	237 Move X1, [X8]
	238 Move X0, X25
	239 Move X2, X31
	240 Call StringBuilder.Append, X0, X1
	241 Compare X21, 0
	242 JumpIfEqual {267}
	243 Move X8, 0xF04000
	244 Move X8, [X8+1576]
	245 Move X1, [X8]
	246 Move X0, X25
	247 Move X2, X31
	248 Call StringBuilder.Append, X0, X1
	249 Move X0, [X29]
	250 Move W8, [X0+224]
	251 Compare W8, 0
	252 JumpIfNotEqual {254}
	253 Call 0x1C17DFC
	254 Move X0, X21
	255 Move X1, X31
	256 Call Convert.ToBase64String, X0
	257 Move X1, X0
	258 Move X0, X25
	259 Move X2, X31
	260 Call StringBuilder.Append, X0, X1
	261 Move X8, 0xF04000
	262 Move X8, [X8+1504]
	263 Move X1, [X8]
	264 Move X0, X25
	265 Move X2, X31
	266 Call StringBuilder.Append, X0, X1
	267 Compare X20, 0
	268 JumpIfEqual {293}
	269 Move X8, 0xF04000
	270 Move X8, [X8+1496]
	271 Move X1, [X8]
	272 Move X0, X25
	273 Move X2, X31
	274 Call StringBuilder.Append, X0, X1
	275 Move X0, [X29]
	276 Move W8, [X0+224]
	277 Compare W8, 0
	278 JumpIfNotEqual {280}
	279 Call 0x1C17DFC
	280 Move X0, X20
	281 Move X1, X31
	282 Call Convert.ToBase64String, X0
	283 Move X1, X0
	284 Move X0, X25
	285 Move X2, X31
	286 Call StringBuilder.Append, X0, X1
	287 Move X8, 0xF04000
	288 Move X8, [X8+1528]
	289 Move X1, [X8]
	290 Move X0, X25
	291 Move X2, X31
	292 Call StringBuilder.Append, X0, X1
	293 Move X8, 0xF04000
	294 Move X8, [X8+1536]
	295 Move X1, [X8]
	296 Move X0, X25
	297 Move X2, X31
	298 Call StringBuilder.Append, X0, X1
	299 Move X0, [X29]
	300 Move W8, [X0+224]
	301 Compare W8, 0
	302 JumpIfNotEqual {304}
	303 Call 0x1C17DFC
	304 Move X0, X19
	305 Move X1, X31
	306 Call Convert.ToBase64String, X0
	307 Move X1, X0
	308 Move X0, X25
	309 Move X2, X31
	310 Call StringBuilder.Append, X0, X1
	311 Move X8, 0xF04000
	312 Move X8, [X8+1512]
	313 Move X1, [X8]
	314 Move X0, X25
	315 Move X2, X31
	316 Call StringBuilder.Append, X0, X1
	317 Move X8, 0xF04000
	318 Move X8, [X8+1520]
	319 Move X1, [X8]
	320 Move X0, X25
	321 Move X2, X31
	322 Call StringBuilder.Append, X0, X1
	323 Move X8, [X25]
	324 Move X0, X25
	325 Move X9, [X8+360]
	326 Move X1, [X8+368]
	327 NotImplemented "Instruction BLR not yet implemented."
	328 Move X20, [X31+144]
	329 Move X19, [X31+152]
	330 Move X22, [X31+128]
	331 Move X21, [X31+136]
	332 Move X24, [X31+112]
	333 Move X23, [X31+120]
	334 Move X26, [X31+96]
	335 Move X25, [X31+104]
	336 Move X28, [X31+80]
	337 Move X27, [X31+88]
	338 Move X29, [X31+64]
	339 Move X30, [X31+72]
	340 Add X31, X31, 160
	341 Return X0
	342 Call 0x1C17F20
	343 Move X25, X0
	344 NotImplemented "Instruction CMP not yet implemented."
	345 Move X0, X25
	346 Call 0x3EB2AD0
	347 Move X25, X0
	348 Move X0, 0xEDC000
	349 Move X0, [X0+3264]
	350 Call 0x1C17D08
	351 Move X8, [X25]
	352 Move X1, [X8]
	353 Call 0x1C18270
	354 Move TEMP, X0
	355 And TEMP, TEMP, 1
	356 Compare TEMP, 1
	357 JumpIfNotEqual {379}
	358 Move X25, [X25]
	359 Call 0x3EB2AE0
	360 Compare X24, 0
	361 JumpIfNotEqual {387}
	362 Compare X23, 0
	363 JumpIfNotEqual {394}
	364 Compare X22, 0
	365 JumpIfNotEqual {401}
	366 Compare X21, 0
	367 JumpIfNotEqual {408}
	368 Compare X20, 0
	369 JumpIfNotEqual {415}
	370 Compare X19, 0
	371 JumpIfEqual {377}
	372 Move W2, [X19+24]
	373 Move X0, X19
	374 Move W1, W31
	375 Move X3, X31
	376 Call Array.Clear, X0, X1, X2
	377 Move X0, X25
	378 Call 0x1C17F18
	379 Move W0, 8
	380 Call 0x3EB2AF0
	381 Move X8, [X25]
	382 Move [X0], X8
	383 Move X1, 0xC97000
	384 Add X1, X1, 3672
	385 Move X2, X31
	386 Call 0x3EB2B00
	387 Move W2, [X24+24]
	388 Move X0, X24
	389 Move W1, W31
	390 Move X3, X31
	391 Call Array.Clear, X0, X1, X2
	392 Compare X23, 0
	393 JumpIfEqual {364}
	394 Move W2, [X23+24]
	395 Move X0, X23
	396 Move W1, W31
	397 Move X3, X31
	398 Call Array.Clear, X0, X1, X2
	399 Compare X22, 0
	400 JumpIfEqual {366}
	401 Move W2, [X22+24]
	402 Move X0, X22
	403 Move W1, W31
	404 Move X3, X31
	405 Call Array.Clear, X0, X1, X2
	406 Compare X21, 0
	407 JumpIfEqual {368}
	408 Move W2, [X21+24]
	409 Move X0, X21
	410 Move W1, W31
	411 Move X3, X31
	412 Call Array.Clear, X0, X1, X2
	413 Compare X20, 0
	414 JumpIfEqual {370}
	415 Move W2, [X20+24]
	416 Move X0, X20
	417 Move W1, W31
	418 Move X3, X31
	419 Call Array.Clear, X0, X1, X2
	420 Compare X19, 0
	421 JumpIfNotEqual {372}
	422 Move X25, X0
	423 Call 0x3EB2AE0
	424 Move X0, X25
	425 Call 0x1D2D690
	426 Call 0x1991590

Method: System.Byte[] GetPaddedValue(Mono.Math.BigInteger value, System.Int32 length)

Disassembly:
	0x0321DA8C MOV X1, X31
	0x0321DA90 BL 0x33225A0
	0x0321DA94 MOV X1, X0
	0x0321DA98 MOV X0, X25
	0x0321DA9C MOV X2, X31
	0x0321DAA0 BL 0x32333E0
	0x0321DAA4 ADRP X8, 0xF04000
	0x0321DAA8 LDR X8, [X8 + 0x658]
	0x0321DAAC LDR X1, [X8]
	0x0321DAB0 MOV X0, X25
	0x0321DAB4 MOV X2, X31
	0x0321DAB8 BL 0x32333E0
	0x0321DABC CBZ X21, 0x321DB1C
	0x0321DAC0 ADRP X8, 0xF04000
	0x0321DAC4 LDR X8, [X8 + 0x628]
	0x0321DAC8 LDR X1, [X8]
	0x0321DACC MOV X0, X25
	0x0321DAD0 MOV X2, X31
	0x0321DAD4 BL 0x32333E0
	0x0321DAD8 LDR X0, [X29]
	0x0321DADC LDR W8, [X0 + 0xE0]
	0x0321DAE0 CBNZ W8, 0x321DAE8
	0x0321DAE4 BL 0x1C16DFC
	0x0321DAE8 MOV X0, X21
	0x0321DAEC MOV X1, X31
	0x0321DAF0 BL 0x33225A0
	0x0321DAF4 MOV X1, X0
	0x0321DAF8 MOV X0, X25
	0x0321DAFC MOV X2, X31
	0x0321DB00 BL 0x32333E0
	0x0321DB04 ADRP X8, 0xF04000
	0x0321DB08 LDR X8, [X8 + 0x5E0]
	0x0321DB0C LDR X1, [X8]
	0x0321DB10 MOV X0, X25
	0x0321DB14 MOV X2, X31
	0x0321DB18 BL 0x32333E0
	0x0321DB1C CBZ X20, 0x321DB7C
	0x0321DB20 ADRP X8, 0xF04000
	0x0321DB24 LDR X8, [X8 + 0x5D8]
	0x0321DB28 LDR X1, [X8]
	0x0321DB2C MOV X0, X25
	0x0321DB30 MOV X2, X31
	0x0321DB34 BL 0x32333E0
	0x0321DB38 LDR X0, [X29]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11C0000
	006 Move W8, [X21+775]
	007 Move W19, W2
	008 Move X20, X1
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xED7000
	014 Move X0, [X0+1560]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+775], W8
	018 Compare X20, 0
	019 JumpIfEqual {52}
	020 Move X0, X20
	021 Call BigInteger.GetBytes, X0
	022 Compare X0, 0
	023 JumpIfEqual {52}
	024 Move W8, [X0+24]
	025 Move X20, X0
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X8, 0xED7000
	028 Move X8, [X8+1560]
	029 Move W1, W19
	030 Move X0, [X8]
	031 Call 0x1C17D6C
	032 Move W4, [X20+24]
	033 Move X21, X0
	034 Move X0, X20
	035 Move W1, W31
	036 Subtract W3, W19, W4
	037 Move X2, X21
	038 Move X5, X31
	039 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	040 Move W2, [X20+24]
	041 Move X0, X20
	042 Move W1, W31
	043 Move X3, X31
	044 Call Array.Clear, X0, X1, X2
	045 Move X20, X21
	046 Move X0, X20
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return X0
	052 Call 0x1C17F20

