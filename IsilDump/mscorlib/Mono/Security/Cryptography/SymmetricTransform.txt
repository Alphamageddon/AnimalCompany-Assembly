Type: Mono.Security.Cryptography.SymmetricTransform

Method: System.Void .ctor(System.Security.Cryptography.SymmetricAlgorithm symmAlgo, System.Boolean encryption, System.Byte[] rgbIV)

Disassembly:
	0x0321EF00 ADD X2, X31, 0x0
	0x0321EF04 MOV X0, X31
	0x0321EF08 MOV X1, X22
	0x0321EF0C STP V0, V1, [X31]
	0x0321EF10 BL 0x3227AD0
	0x0321EF14 MOV X1, X0
	0x0321EF18 MOV X0, X19
	0x0321EF1C BL 0x321B938
	0x0321EF20 MOV X19, X0
	0x0321EF24 TBNZ X20, 0x1F, 0x321EF98
	0x0321EF28 ADRP X0, 0xF03000
	0x0321EF2C LDR X0, [X0 + 0xEA8]
	0x0321EF30 BL 0x1C16D08
	0x0321EF34 MOV X1, X31
	0x0321EF38 BL 0x320A160
	0x0321EF3C MOV X21, X0
	0x0321EF40 STR W20, [X31 + 0x4C]
	0x0321EF44 ADRP X0, 0xED5000
	0x0321EF48 LDR X0, [X0 + 0x758]
	0x0321EF4C BL 0x1C16D08
	0x0321EF50 ADD X1, X31, 0x4C
	0x0321EF54 BL 0x1C16E04
	0x0321EF58 MOV X1, X0
	0x0321EF5C MOVI V0.2D, 0x0
	0x0321EF60 ADD X0, X31, 0x20
	0x0321EF64 MOV X2, X31
	0x0321EF68 STP V0, V0, [X31 + 0x20]
	0x0321EF6C BL 0x338CBA8
	0x0321EF70 LDP V0, V1, [X31 + 0x20]
	0x0321EF74 ADD X2, X31, 0x0
	0x0321EF78 MOV X0, X31
	0x0321EF7C MOV X1, X21
	0x0321EF80 STP V0, V1, [X31]
	0x0321EF84 BL 0x3227AD0
	0x0321EF88 MOV X1, X0
	0x0321EF8C MOV X0, X19
	0x0321EF90 BL 0x321B938
	0x0321EF94 MOV X19, X0
	0x0321EF98 ADRP X0, 0xF02000
	0x0321EF9C LDR X0, [X0 + 0xCE0]
	0x0321EFA0 BL 0x1C16D08
	0x0321EFA4 BL 0x1C16F10
	0x0321EFA8 MOV X1, X19
	0x0321EFAC MOV X2, X31
	0x0321EFB0 MOV X20, X0
	0x0321EFB4 BL 0x3252170
	0x0321EFB8 ADRP X0, 0xF03000
	0x0321EFBC LDR X0, [X0 + 0xEB0]
	0x0321EFC0 BL 0x1C16D08
	0x0321EFC4 MOV X1, X0
	0x0321EFC8 MOV X0, X20
	0x0321EFCC BL 0x1C16DEC
	0x0321EFD0 SUB X31, X31, 0x50
	0x0321EFD4 STP X30, X19, [X31 + 0x40]
	0x0321EFD8 MOV X19, X0
	0x0321EFDC MOVI V0.2D, 0x0
	0x0321EFE0 ADD X0, X31, 0x20
	0x0321EFE4 MOV X2, X31
	0x0321EFE8 STP V0, V0, [X31 + 0x20]
	0x0321EFEC BL 0x338CBA8
	0x0321EFF0 LDP V0, V1, [X31 + 0x20]
	0x0321EFF4 ADD X2, X31, 0x0
	0x0321EFF8 MOV X0, X31
	0x0321EFFC MOV X1, X19
	0x0321F000 STP V0, V1, [X31]
	0x0321F004 BL 0x3227AD0
	0x0321F008 LDP X30, X19, [X31 + 0x40]
	0x0321F00C ADD X31, X31, 0x50
	0x0321F010 RET
	0x0321F014 STP X30, X27, [X31 - 0x50]!
	0x0321F018 STP X26, X25, [X31 + 0x10]
	0x0321F01C STP X24, X23, [X31 + 0x20]
	0x0321F020 STP X22, X21, [X31 + 0x30]
	0x0321F024 STP X20, X19, [X31 + 0x40]
	0x0321F028 ADRP X20, 0x11BD000
	0x0321F02C LDRB W8, [X20 + 0x30B]
	0x0321F030 MOV W24, W3
	0x0321F034 MOV W21, W2
	0x0321F038 MOV X23, X1
	0x0321F03C MOV X19, X0
	0x0321F040 TBNZ X8, 0x0, 0x321F058
	0x0321F044 ADRP X0, 0xED4000
	0x0321F048 LDR X0, [X0 + 0x618]
	0x0321F04C BL 0x1C16CF4
	0x0321F050 MOVZ W8, 0x1
	0x0321F054 STRB W8, [X20 + 0x30B]
	0x0321F058 LDR W8, [X19 + 0x1C]
	0x0321F05C LDR W9, [X19 + 0x40]
	0x0321F060 ADRP X27, 0xED4000
	0x0321F064 LDR X27, [X27 + 0x618]
	0x0321F068 SDIV W10, W24, W8
	0x0321F06C MUL W20, W10, W8
	0x0321F070 CMP W9, 0x5
	0x0321F074 SUB W22, W24, W20
	0x0321F078 B.HI 0x321F110
	0x0321F07C MOVZ W10, 0x1
	0x0321F080 LSLV W10, W10, W9
	0x0321F084 MOVZ W11, 0x34
	0x0321F088 ANDS W31, W10, W11, 0x0
	0x0321F08C B.EQ 0x321F110
	0x0321F090 ADD W25, W20, W8
	0x0321F094 LDR X0, [X27]
	0x0321F098 MOV W1, W25
	0x0321F09C BL 0x1C16D6C
	0x0321F0A0 LDR W3, [X19 + 0x1C]
	0x0321F0A4 MOV X24, X0
	0x0321F0A8 MOV W26, W31
	0x0321F0AC CMP W25, W3
	0x0321F0B0 B.LE 0x321F0E4
	0x0321F0B4 MOV X0, X19
	0x0321F0B8 MOV X1, X23
	0x0321F0BC MOV W2, W21
	0x0321F0C0 MOV X4, X24
	0x0321F0C4 MOV W5, W26
	0x0321F0C8 BL 0x321EBC8
	0x0321F0CC LDR W3, [X19 + 0x1C]
	0x0321F0D0 SUB W25, W25, W3
	0x0321F0D4 ADD W21, W3, W21
	0x0321F0D8 CMP W25, W3
	0x0321F0DC ADD W26, W3, W26
	0x0321F0E0 B.GT 0x321F0B4
	0x0321F0E4 LDR W9, [X19 + 0x40]
	0x0321F0E8 SUB W25, W3, W22
	0x0321F0EC AND W8, W25, 0xFF
	0x0321F0F0 CMP W9, 0x2
	0x0321F0F4 B.EQ 0x321F160
	0x0321F0F8 CMP W9, 0x5
	0x0321F0FC B.EQ 0x321F194
	0x0321F100 CMP W9, 0x4
	0x0321F104 B.NE 0x321F1FC
	0x0321F108 CBNZ X24, 0x321F1B0
	0x0321F10C B 0x321F25C
	0x0321F110 CBZ W24, 0x321F230
	0x0321F114 CBZ W22, 0x321F250
	0x0321F118 CMP W9, 0x1
	0x0321F11C B.EQ 0x321F260
	0x0321F120 LDR X0, [X27]
	0x0321F124 ADD W1, W20, W8
	0x0321F128 BL 0x1C16D6C
	0x0321F12C MOV X26, X0
	0x0321F130 MOV X0, X23
	0x0321F134 MOV W1, W21
	0x0321F138 MOV X2, X26
	0x0321F13C MOV W3, W31
	0x0321F140 MOV W4, W24
	0x0321F144 MOV X5, X31
	0x0321F148 BL 0x33A8A9C
	0x0321F14C CBZ X26, 0x321F25C
	0x0321F150 LDR W25, [X26 + 0x18]
	0x0321F154 MOV W21, W31
	0x0321F158 MOV X23, X26
	0x0321F15C B 0x321F094
	0x0321F160 CBZ X24, 0x321F25C
	0x0321F164 LDR X10, [X24 + 0x18]
	0x0321F168 SUB W9, W10, 0x1
	0x0321F16C SUB W11, W10, W8
	0x0321F170 CMP W9, W11
	0x0321F174 B.LT 0x321F1C4
	0x0321F178 CMP W9, W10
	0x0321F17C B.CS 0x321F258
	0x0321F180 ADD X10, X24, W9, SXTW
	0x0321F184 STRB W25, [X10 + 0x20]
	0x0321F188 LDR X10, [X24 + 0x18]
	0x0321F18C SUB W9, W9, 0x1
	0x0321F190 B 0x321F16C
	0x0321F194 CBZ X24, 0x321F25C
	0x0321F198 LDR W9, [X24 + 0x18]
	0x0321F19C SUB W3, W8, 0x1
	0x0321F1A0 MOV X0, X19
	0x0321F1A4 MOV X1, X24
	0x0321F1A8 SUB W2, W9, W8
	0x0321F1AC BL 0x321ED80
	0x0321F1B0 LDR X8, [X24 + 0x18]
	0x0321F1B4 CBZ W8, 0x321F258
	0x0321F1B8 SUB W8, W8, 0x1
	0x0321F1BC ADD X8, X24, W8, SXTW

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x11BF000
	009 Move W8, [X23+776]
	010 Move X20, X3
	011 Move X21, X1
	012 Move X19, X0
	013 And W22, W2, 1
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0xED6000
	019 Move X0, [X0+1560]
	020 Call 0x1C17CF4
	021 Move X0, 0xED6000
	022 Move X0, [X0+1448]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+776], W8
	026 Move X0, X19
	027 Move X1, X31
	028 Call Object..ctor, X0
	029 Move [X19+16], X21
	030 Move [X19+24], W22
	031 Compare X21, 0
	032 JumpIfEqual {132}
	033 Move X8, [X21]
	034 Move X23, 0xED6000
	035 Move X0, X21
	036 Move X9, [X8+408]
	037 Move X1, [X8+416]
	038 Move X23, [X23+1560]
	039 NotImplemented "Instruction BLR not yet implemented."
	040 NotImplemented "Instruction SBFM not yet implemented."
	041 Move [X19+28], W0
	042 Compare X20, 0
	043 JumpIfEqual {59}
	044 Move X0, X20
	045 Move X1, X31
	046 Call Array.Clone, X0
	047 Compare X0, 0
	048 JumpIfEqual {129}
	049 Move X22, [X23]
	050 Move X21, X0
	051 Move X1, X22
	052 Call 0x1C17E00
	053 Move X20, X0
	054 Compare X0, 0
	055 JumpIfNotEqual {62}
	056 Move X0, X21
	057 Move X1, X22
	058 Call 0x1C181E0
	059 Move X1, X31
	060 Call KeyBuilder.IV, X0
	061 Move X20, X0
	062 Compare X20, 0
	063 JumpIfEqual {132}
	064 Move W8, [X19+28]
	065 Move W9, [X20+24]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move X0, [X19+16]
	068 Compare X0, 0
	069 JumpIfEqual {132}
	070 Move X8, [X0]
	071 Move X22, 0xED6000
	072 Move X9, [X8+600]
	073 Move X1, [X8+608]
	074 Move X22, [X22+1448]
	075 NotImplemented "Instruction BLR not yet implemented."
	076 Move [X19+64], W0
	077 Move W1, [X19+28]
	078 Move X0, [X23]
	079 Call 0x1C17D6C
	080 Move [X19+32], X0
	081 Move X21, X0
	082 Move X0, [X22]
	083 Move W22, [X19+28]
	084 Move W8, [X0+224]
	085 Compare W8, 0
	086 JumpIfNotEqual {88}
	087 Call 0x1C17DFC
	088 Move W1, [X20+24]
	089 Move W0, W22
	090 Move X2, X31
	091 Call Math.Min, X0, X1
	092 Move W4, W0
	093 Move X0, X20
	094 Move W1, W31
	095 Move X2, X21
	096 Move W3, W31
	097 Move X5, X31
	098 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	099 Move W1, [X19+28]
	100 Move X0, [X23]
	101 Call 0x1C17D6C
	102 Move X8, [X19+16]
	103 Move [X19+40], X0
	104 Compare X8, 0
	105 JumpIfEqual {132}
	106 Move X9, [X8]
	107 Move X0, X8
	108 Move X10, [X9+440]
	109 Move X1, [X9+448]
	110 NotImplemented "Instruction BLR not yet implemented."
	111 NotImplemented "Instruction SBFM not yet implemented."
	112 Move [X19+68], W8
	113 Move W1, [X19+28]
	114 Move X0, [X23]
	115 Call 0x1C17D6C
	116 Move [X19+48], X0
	117 Move W1, [X19+28]
	118 Move X0, [X23]
	119 Call 0x1C17D6C
	120 Move [X19+56], X0
	121 Move X20, [X31+48]
	122 Move X19, [X31+56]
	123 Move X22, [X31+32]
	124 Move X21, [X31+40]
	125 Move X30, [X31+16]
	126 Move X23, [X31+24]
	127 Add X31, X31, 64
	128 Return 
	129 Move X20, X31
	130 Compare X20, 0
	131 JumpIfNotEqual {64}
	132 Call 0x1C17F20
	133 Move X0, 0xED5000
	134 Move X0, [X0+2512]
	135 Call 0x1C17D08
	136 Move W1, 2
	137 Call 0x1C17D6C
	138 Move X21, X0
	139 Move X0, X20
	140 Call 0x19913C0
	141 Move X8, [X20+24]
	142 Move X20, 0xED5000
	143 Move [X31+12], W8
	144 Move X20, [X20+1880]
	145 Move X0, X20
	146 Call 0x1C17D08
	147 Add X1, X31, 12
	148 Call 0x1C17E04
	149 Move X22, X0
	150 Move X0, X21
	151 Call 0x19913C0
	152 Move X0, X21
	153 Move X1, X22
	154 Call 0x19990B4
	155 Move X0, X21
	156 Move X1, X31
	157 Move X2, X22
	158 Call 0x1994444
	159 Move W8, [X19+28]
	160 Move X0, X20
	161 Move [X31+8], W8
	162 Call 0x1C17D08
	163 Add X1, X31, 8
	164 Call 0x1C17E04
	165 Move X19, X0
	166 Move X0, X21
	167 Call 0x19913C0
	168 Move X0, X21
	169 Move X1, X19
	170 Call 0x19990B4
	171 Move W1, 1
	172 Move X0, X21
	173 Move X2, X19
	174 Call 0x1994444
	175 Move X0, 0xF03000
	176 Move X0, [X0+3560]
	177 Call 0x1C17D08
	178 Move X1, X21
	179 Move X2, X31
	180 Call Locale.GetText, X0, X1
	181 Move X19, X0
	182 Move X0, 0xF02000
	183 Move X0, [X0+3296]
	184 Call 0x1C17D08
	185 Call 0x1C17F10
	186 Move X1, X19
	187 Move X2, X31
	188 Move X20, X0
	189 Call CryptographicException..ctor, X0, X1
	190 Move X0, 0xF03000
	191 Move X0, [X0+3568]
	192 Call 0x1C17D08
	193 Move X1, X0
	194 Move X0, X20
	195 Call 0x1C17DEC

Method: System.Void Finalize()

Disassembly:
	0x0321F1C0 STRB W25, [X8 + 0x20]
	0x0321F1C4 MOV X0, X23
	0x0321F1C8 MOV W1, W21
	0x0321F1CC MOV X2, X24
	0x0321F1D0 MOV W3, W20
	0x0321F1D4 MOV W4, W22
	0x0321F1D8 MOV X5, X31
	0x0321F1DC BL 0x33A8A9C
	0x0321F1E0 LDR W3, [X19 + 0x1C]
	0x0321F1E4 MOV X0, X19
	0x0321F1E8 MOV X1, X24
	0x0321F1EC MOV W2, W20
	0x0321F1F0 MOV X4, X24
	0x0321F1F4 MOV W5, W20
	0x0321F1F8 B 0x321F210
	0x0321F1FC MOV X0, X19
	0x0321F200 MOV X1, X23
	0x0321F204 MOV W2, W21
	0x0321F208 MOV X4, X24
	0x0321F20C MOV W5, W26
	0x0321F210 BL 0x321EBC8
	0x0321F214 MOV X0, X24
	0x0321F218 LDP X20, X19, [X31 + 0x40]
	0x0321F21C LDP X22, X21, [X31 + 0x30]
	0x0321F220 LDP X24, X23, [X31 + 0x20]
	0x0321F224 LDP X26, X25, [X31 + 0x10]
	0x0321F228 LDP X30, X27, [X31], #0x50
	0x0321F22C RET
	0x0321F230 LDR X0, [X27]
	0x0321F234 LDP X20, X19, [X31 + 0x40]
	0x0321F238 LDP X22, X21, [X31 + 0x30]
	0x0321F23C LDP X24, X23, [X31 + 0x20]
	0x0321F240 LDP X26, X25, [X31 + 0x10]
	0x0321F244 MOV W1, W31
	0x0321F248 LDP X30, X27, [X31], #0x50
	0x0321F24C B 0x1C16D6C
	0x0321F250 MOV W25, W20
	0x0321F254 B 0x321F094
	0x0321F258 BL 0x1C16F28
	0x0321F25C BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X0]
	006 Move X19, X0
	007 Move X9, [X8+472]
	008 Move X2, [X8+480]
	009 Move W1, W31
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Move X0, X19
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X1, X31
	015 Move X30, [X31+32]
	016 Move X21, [X31+40]
	017 Call Object.Finalize, X0
	018 Return 
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X21, X0
	021 Move X0, X21
	022 Call 0x3EB2AD0
	023 Move X20, [X0]
	024 Call 0x3EB2AE0
	025 Move X0, X19
	026 Move X1, X31
	027 Call Object.Finalize, X0
	028 Compare X20, 0
	029 JumpIfNotEqual {36}
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return 
	035 Move X20, X31
	036 Move X0, X20
	037 Call 0x1C17F18
	038 Move X21, X0
	039 Move X0, X19
	040 Move X1, X31
	041 Call Object.Finalize, X0
	042 Compare X20, 0
	043 JumpIfNotEqual {46}
	044 Move X0, X21
	045 Call 0x1D2D690
	046 Move X0, X20
	047 Call 0x1C17F18
	048 Call 0x1991590

Method: System.Void System.IDisposable.Dispose()

Disassembly:
	0x0321F260 ADRP X0, 0xF01000
	0x0321F264 LDR X0, [X0 + 0xCE0]
	0x0321F268 BL 0x1C16D08
	0x0321F26C BL 0x1C16F10
	0x0321F270 MOV X19, X0
	0x0321F274 ADRP X0, 0xF02000
	0x0321F278 LDR X0, [X0 + 0xEB8]
	0x0321F27C BL 0x1C16D08
	0x0321F280 MOV X1, X0
	0x0321F284 MOV X0, X19
	0x0321F288 MOV X2, X31
	0x0321F28C BL 0x3252170
	0x0321F290 ADRP X0, 0xF02000
	0x0321F294 LDR X0, [X0 + 0xEC0]
	0x0321F298 BL 0x1C16D08
	0x0321F29C MOV X1, X0
	0x0321F2A0 MOV X0, X19
	0x0321F2A4 BL 0x1C16DEC
	0x0321F2A8 STR X30, [X31 - 0x50]!
	0x0321F2AC STP X26, X25, [X31 + 0x10]
	0x0321F2B0 STP X24, X23, [X31 + 0x20]
	0x0321F2B4 STP X22, X21, [X31 + 0x30]
	0x0321F2B8 STP X20, X19, [X31 + 0x40]
	0x0321F2BC ADRP X19, 0x11BD000
	0x0321F2C0 LDRB W8, [X19 + 0x30C]
	0x0321F2C4 MOV W22, W3
	0x0321F2C8 MOV W23, W2

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11BE000
	006 Move X20, 0xEDC000
	007 Move W8, [X21+777]
	008 Move X20, [X20+3088]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEDC000
	015 Move X0, [X0+3088]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+777], W8
	019 Move X8, [X19]
	020 Move W1, 1
	021 Move X0, X19
	022 Move X9, [X8+472]
	023 Move X2, [X8+480]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X1, X31
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call GC.SuppressFinalize, X0
	037 Return 

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x0321F2CC MOV X24, X1
	0x0321F2D0 MOV X21, X0
	0x0321F2D4 TBNZ X8, 0x0, 0x321F2EC
	0x0321F2D8 ADRP X0, 0xED4000
	0x0321F2DC LDR X0, [X0 + 0x618]
	0x0321F2E0 BL 0x1C16CF4
	0x0321F2E4 MOVZ W8, 0x1
	0x0321F2E8 STRB W8, [X19 + 0x30C]
	0x0321F2EC ADRP X26, 0xED4000
	0x0321F2F0 LDRB W8, [X21 + 0x49]
	0x0321F2F4 LDR X26, [X26 + 0x618]
	0x0321F2F8 MOV W19, W22
	0x0321F2FC CBZ W8, 0x321F308
	0x0321F300 LDR W8, [X21 + 0x1C]
	0x0321F304 ADD W19, W8, W22
	0x0321F308 LDR X0, [X26]
	0x0321F30C MOV W1, W19
	0x0321F310 BL 0x1C16D6C
	0x0321F314 CMP W22, 0x1
	0x0321F318 MOV X20, X0
	0x0321F31C B.LT 0x321F35C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+72]
	004 Compare W8, 0
	005 JumpIfNotEqual {25}
	006 Move X19, X0
	007 Move TEMP, X1
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {23}
	011 Move X0, [X19+32]
	012 Move W2, [X19+28]
	013 Move W1, W31
	014 Move X3, X31
	015 Call Array.Clear, X0, X1, X2
	016 Move X0, [X19+40]
	017 Move W2, [X19+28]
	018 Move W1, W31
	019 Move X3, X31
	020 Move [X19+32], X31
	021 Call Array.Clear, X0, X1, X2
	022 Move [X19+40], X31
	023 Move W8, 1
	024 Move [X19+72], W8
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Return 

Method: System.Boolean get_CanTransformMultipleBlocks()

Disassembly:
	0x0321F320 LDR W3, [X21 + 0x1C]
	0x0321F324 MOV W25, W31

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Int32 get_InputBlockSize()

Disassembly:
	0x0321F328 MOV X0, X21
	0x0321F32C MOV X1, X24

ISIL:
	001 Move W0, [X0+28]
	002 Return X0

Method: System.Int32 get_OutputBlockSize()

Disassembly:
	0x0321F330 MOV W2, W23
	0x0321F334 MOV X4, X20

ISIL:
	001 Move W0, [X0+28]
	002 Return X0

Method: System.Void Transform(System.Byte[] input, System.Byte[] output)

Disassembly:
	0x0321F338 MOV W5, W25
	0x0321F33C BL 0x321EBC8
	0x0321F340 LDR W3, [X21 + 0x1C]
	0x0321F344 ADD W25, W0, W25
	0x0321F348 SUB W22, W22, W3
	0x0321F34C ADD W23, W3, W23
	0x0321F350 CMP W22, 0x0
	0x0321F354 B.GT 0x321F328
	0x0321F358 B 0x321F360
	0x0321F35C MOV W25, W31
	0x0321F360 LDRB W8, [X21 + 0x49]
	0x0321F364 CBZ W8, 0x321F3A0
	0x0321F368 LDR X8, [X21]
	0x0321F36C LDP X1, X2, [X21 + 0x30]
	0x0321F370 MOV X0, X21
	0x0321F374 LDR X9, [X8 + 0x218]
	0x0321F378 LDR X3, [X8 + 0x220]
	0x0321F37C BLR X9
	0x0321F380 LDR X0, [X21 + 0x38]
	0x0321F384 LDR W4, [X21 + 0x1C]
	0x0321F388 MOV W1, W31
	0x0321F38C MOV X2, X20
	0x0321F390 MOV W3, W25
	0x0321F394 MOV X5, X31
	0x0321F398 BL 0x33A8A9C
	0x0321F39C STRB W31, [X21 + 0x49]
	0x0321F3A0 SUBS W8, W19, 0x1
	0x0321F3A4 B.LT 0x321F3C4
	0x0321F3A8 CBZ X20, 0x321F51C
	0x0321F3AC LDR W9, [X20 + 0x18]
	0x0321F3B0 CMP W8, W9
	0x0321F3B4 B.CS 0x321F520
	0x0321F3B8 ADD X8, X20, W8, UXTW
	0x0321F3BC LDRB W2, [X8 + 0x20]
	0x0321F3C0 B 0x321F3C8
	0x0321F3C4 MOV W2, W31
	0x0321F3C8 LDR W8, [X21 + 0x40]
	0x0321F3CC CMP W8, 0x2
	0x0321F3D0 B.EQ 0x321F430
	0x0321F3D4 CMP W8, 0x5
	0x0321F3D8 B.EQ 0x321F484
	0x0321F3DC CMP W8, 0x4
	0x0321F3E0 B.NE 0x321F498
	0x0321F3E4 CBZ W2, 0x321F534
	0x0321F3E8 LDR W8, [X21 + 0x1C]
	0x0321F3EC CMP W8, W2
	0x0321F3F0 B.LT 0x321F534
	0x0321F3F4 SUB W19, W19, W2
	0x0321F3F8 MOV W3, W2
	0x0321F3FC MOV W8, W19
	0x0321F400 SUBS X3, X3, 0x1
	0x0321F404 B.LE 0x321F498
	0x0321F408 CBZ X20, 0x321F51C
	0x0321F40C LDR W9, [X20 + 0x18]
	0x0321F410 CMP W8, W9
	0x0321F414 B.CS 0x321F520
	0x0321F418 ADD X9, X20, W8, SXTW
	0x0321F41C LDRB W9, [X9 + 0x20]
	0x0321F420 ADD W8, W8, 0x1
	0x0321F424 CBZ W9, 0x321F400
	0x0321F428 MOVZ W1, 0x4
	0x0321F42C B 0x321F47C
	0x0321F430 CBZ W2, 0x321F524
	0x0321F434 LDR W8, [X21 + 0x1C]
	0x0321F438 CMP W8, W2
	0x0321F43C B.LT 0x321F524
	0x0321F440 SUB W19, W19, W2
	0x0321F444 MOV W3, W2
	0x0321F448 MOV W8, W19
	0x0321F44C SUBS X3, X3, 0x1
	0x0321F450 B.LE 0x321F498
	0x0321F454 CBZ X20, 0x321F51C
	0x0321F458 LDR W9, [X20 + 0x18]
	0x0321F45C CMP W8, W9
	0x0321F460 B.CS 0x321F520
	0x0321F464 ADD X9, X20, W8, SXTW
	0x0321F468 LDRB W9, [X9 + 0x20]
	0x0321F46C ADD W8, W8, 0x1
	0x0321F470 CMP W9, W2
	0x0321F474 B.EQ 0x321F44C
	0x0321F478 MOVZ W1, 0x2
	0x0321F47C MOVN W2, 0x0
	0x0321F480 BL 0x321EE30
	0x0321F484 CBZ W2, 0x321F52C
	0x0321F488 LDR W8, [X21 + 0x1C]
	0x0321F48C CMP W8, W2
	0x0321F490 B.LT 0x321F52C

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, X0
	007 Move X0, [X0+16]
	008 Compare X0, 0
	009 JumpIfEqual {48}
	010 Move X8, [X0]
	011 Move X20, X1
	012 Move X19, X2
	013 Move X9, [X8+568]
	014 Move X1, [X8+576]
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Subtract W8, W0, 1
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X9, -40402944
	019 Add X9, X9, 1092
	020 NotImplemented "Instruction ADR not yet implemented."
	021 Move W11, [X9]
	022 Add X10, X10, X11
	023 CallNoReturn X10
	024 Move X8, [X21]
	025 Move X4, [X8+568]
	026 Move X3, [X8+576]
	027 Move X8, [X21]
	028 Move X4, [X8+552]
	029 Move X3, [X8+560]
	030 Move X8, [X21]
	031 Move X4, [X8+600]
	032 Move X3, [X8+608]
	033 Move X8, [X21]
	034 Move X4, [X8+584]
	035 Move X3, [X8+592]
	036 Move X8, [X21]
	037 Move X4, [X8+616]
	038 Move X3, [X8+624]
	039 Move X0, X21
	040 Move X1, X20
	041 Move X2, X19
	042 Move X20, [X31+48]
	043 Move X19, [X31+56]
	044 Move X30, [X31+32]
	045 Move X21, [X31+40]
	046 Add X31, X31, 64
	047 CallNoReturn X4
	048 Call 0x1C17F20
	049 Move X19, [X21+16]
	050 Move X0, X19
	051 Call 0x19913C0
	052 Move X8, [X19]
	053 Move X0, X19
	054 Move X9, [X8+568]
	055 Move X1, [X8+576]
	056 NotImplemented "Instruction BLR not yet implemented."
	057 Move W19, W0
	058 Move X0, 0xF03000
	059 Move X0, [X0+3576]
	060 Call 0x1C17D08
	061 Move TEMP, 0
	062 Not TEMP
	063 Move X8, TEMP
	064 Move [X31+8], X0
	065 Move [X31+16], X8
	066 Add X0, X31, 8
	067 Move X1, X31
	068 Move [X31+24], W19
	069 Call Enum.ToString, X0
	070 Move X19, X0
	071 Move X0, 0xF03000
	072 Move X0, [X0+3584]
	073 Call 0x1C17D08
	074 Move X1, X19
	075 Call String.Concat, X0, X1
	076 Move X19, X0
	077 Move X0, 0xEDE000
	078 Move X0, [X0+1880]
	079 Call 0x1C17D08
	080 Call 0x1C17F10
	081 Move X1, X19
	082 Move X2, X31
	083 Move X20, X0
	084 Call NotImplementedException..ctor, X0, X1
	085 Move X0, 0xF03000
	086 Move X0, [X0+3592]
	087 Call 0x1C17D08
	088 Move X1, X0
	089 Move X0, X20
	090 Call 0x1C17DEC

Method: System.Void ECB(System.Byte[] input, System.Byte[] output)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void CBC(System.Byte[] input, System.Byte[] output)

Disassembly:
	0x0321F494 SUB W19, W19, W2
	0x0321F498 LDR X0, [X26]
	0x0321F49C CMP W19, 0x1
	0x0321F4A0 B.LT 0x321F500
	0x0321F4A4 MOV W1, W19
	0x0321F4A8 BL 0x1C16D6C
	0x0321F4AC MOV X21, X0
	0x0321F4B0 MOV X0, X20
	0x0321F4B4 MOV W1, W31
	0x0321F4B8 MOV X2, X21
	0x0321F4BC MOV W3, W31
	0x0321F4C0 MOV W4, W19
	0x0321F4C4 MOV X5, X31
	0x0321F4C8 BL 0x33A8A9C
	0x0321F4CC CBZ X20, 0x321F51C
	0x0321F4D0 LDR W2, [X20 + 0x18]
	0x0321F4D4 MOV X0, X20
	0x0321F4D8 MOV W1, W31
	0x0321F4DC MOV X3, X31
	0x0321F4E0 BL 0x339FA34
	0x0321F4E4 MOV X0, X21
	0x0321F4E8 LDP X20, X19, [X31 + 0x40]
	0x0321F4EC LDP X22, X21, [X31 + 0x30]
	0x0321F4F0 LDP X24, X23, [X31 + 0x20]
	0x0321F4F4 LDP X26, X25, [X31 + 0x10]
	0x0321F4F8 LDR X30, [X31], #0x50
	0x0321F4FC RET
	0x0321F500 LDP X20, X19, [X31 + 0x40]
	0x0321F504 LDP X22, X21, [X31 + 0x30]
	0x0321F508 LDP X24, X23, [X31 + 0x20]
	0x0321F50C LDP X26, X25, [X31 + 0x10]
	0x0321F510 MOV W1, W31
	0x0321F514 LDR X30, [X31], #0x50
	0x0321F518 B 0x1C16D6C
	0x0321F51C BL 0x1C16F20
	0x0321F520 BL 0x1C16F28
	0x0321F524 MOVZ W1, 0x2
	0x0321F528 B 0x321F538
	0x0321F52C MOVZ W1, 0x5
	0x0321F530 B 0x321F538
	0x0321F534 MOVZ W1, 0x4
	0x0321F538 MOVN W3, 0x0
	0x0321F53C BL 0x321EE30
	0x0321F540 STR X30, [X31 - 0x30]!
	0x0321F544 STP X22, X21, [X31 + 0x10]
	0x0321F548 STP X20, X19, [X31 + 0x20]
	0x0321F54C LDRB W8, [X0 + 0x48]
	0x0321F550 CBNZ W8, 0x321F5A8
	0x0321F554 MOV W19, W3
	0x0321F558 MOV W20, W2
	0x0321F55C MOV X22, X0
	0x0321F560 MOV X21, X1
	0x0321F564 BL 0x321E858
	0x0321F568 LDRB W9, [X22 + 0x18]
	0x0321F56C LDR X8, [X22]
	0x0321F570 CBZ W9, 0x321F580
	0x0321F574 LDR X5, [X8 + 0x288]
	0x0321F578 LDR X4, [X8 + 0x290]
	0x0321F57C B 0x321F588
	0x0321F580 LDR X5, [X8 + 0x298]
	0x0321F584 LDR X4, [X8 + 0x2A0]
	0x0321F588 MOV X0, X22
	0x0321F58C MOV X1, X21
	0x0321F590 MOV W2, W20
	0x0321F594 MOV W3, W19
	0x0321F598 LDP X20, X19, [X31 + 0x20]
	0x0321F59C LDP X22, X21, [X31 + 0x10]
	0x0321F5A0 LDR X30, [X31], #0x30
	0x0321F5A4 BR X5
	0x0321F5A8 ADRP X0, 0xEFD000
	0x0321F5AC LDR X0, [X0 + 0x4B8]
	0x0321F5B0 BL 0x1C16D08
	0x0321F5B4 BL 0x1C16F10
	0x0321F5B8 MOV X19, X0
	0x0321F5BC ADRP X0, 0xF02000
	0x0321F5C0 LDR X0, [X0 + 0xE70]
	0x0321F5C4 BL 0x1C16D08
	0x0321F5C8 MOV X1, X0
	0x0321F5CC MOV X0, X19
	0x0321F5D0 MOV X2, X31
	0x0321F5D4 BL 0x338C448
	0x0321F5D8 ADRP X0, 0xF02000
	0x0321F5DC LDR X0, [X0 + 0xEC8]
	0x0321F5E0 BL 0x1C16D08
	0x0321F5E4 MOV X1, X0
	0x0321F5E8 MOV X0, X19
	0x0321F5EC BL 0x1C16DEC
	0x0321F5F0 STP X30, X23, [X31 - 0x30]!
	0x0321F5F4 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W8, [X0+24]
	006 Move X20, X2
	007 Move X19, X0
	008 Move X21, X1
	009 Compare W8, 0
	010 JumpIfEqual {44}
	011 Move W8, [X19+28]
	012 Move X1, [X19+32]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move W8, 32
	015 Compare X1, 0
	016 JumpIfEqual {91}
	017 Move W10, [X1+24]
	018 Subtract X9, X8, 32
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Compare X21, 0
	021 JumpIfEqual {91}
	022 Move W10, [X21+24]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move W9, [X1]
	025 Move W10, [X21]
	026 Xor W9, W10, W9
	027 Move [X1], W9
	028 NotImplemented "Instruction LDRSW not yet implemented."
	029 Move X1, [X19+32]
	030 Subtract X10, X8, 31
	031 Add X8, X8, 1
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X8, [X19]
	034 Move X0, X19
	035 Move X2, X20
	036 Move X9, [X8+552]
	037 Move X3, [X8+560]
	038 NotImplemented "Instruction BLR not yet implemented."
	039 Move X2, [X19+32]
	040 Move W4, [X19+28]
	041 Move X0, X20
	042 Move W1, W31
	043 Move W3, W31
	044 Move X2, [X19+40]
	045 Move W4, [X19+28]
	046 Move X0, X21
	047 Move W1, W31
	048 Move W3, W31
	049 Move X5, X31
	050 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	051 Move X8, [X19]
	052 Move X0, X19
	053 Move X1, X21
	054 Move X2, X20
	055 Move X9, [X8+552]
	056 Move X3, [X8+560]
	057 NotImplemented "Instruction BLR not yet implemented."
	058 Move W4, [X19+28]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Compare X20, 0
	061 JumpIfEqual {91}
	062 Move W8, [X20+24]
	063 Move W9, 32
	064 Subtract X11, X9, 32
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X10, [X19+32]
	067 Compare X10, 0
	068 JumpIfEqual {91}
	069 Move W12, [X10+24]
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move W11, [X20]
	072 Move W10, [X10]
	073 Xor W10, W10, W11
	074 Move [X20], W10
	075 NotImplemented "Instruction LDRSW not yet implemented."
	076 Subtract X10, X9, 31
	077 Add X9, X9, 1
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X2, [X19+32]
	080 Move X0, [X19+40]
	081 Move W1, W31
	082 Move W3, W31
	083 Move X20, [X31+16]
	084 Move X19, [X31+24]
	085 Move X5, X31
	086 Move X30, [X31+32]
	087 Move X21, [X31+40]
	088 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	089 Return 
	090 Call 0x1C17F28
	091 Call 0x1C17F20

Method: System.Void CFB(System.Byte[] input, System.Byte[] output)

Disassembly:
	0x0321F5F8 STP X20, X19, [X31 + 0x20]
	0x0321F5FC ADRP X23, 0x11BD000
	0x0321F600 ADRP X22, 0xF02000
	0x0321F604 ADRP X21, 0xF02000
	0x0321F608 LDRB W8, [X23 + 0x30D]
	0x0321F60C LDR X22, [X22 + 0x520]
	0x0321F610 LDR X21, [X21 + 0x528]
	0x0321F614 MOV W20, W1
	0x0321F618 MOV X19, X0
	0x0321F61C TBNZ X8, 0x0, 0x321F640
	0x0321F620 ADRP X0, 0xF02000
	0x0321F624 LDR X0, [X0 + 0x520]
	0x0321F628 BL 0x1C16CF4
	0x0321F62C ADRP X0, 0xF02000
	0x0321F630 LDR X0, [X0 + 0x528]
	0x0321F634 BL 0x1C16CF4
	0x0321F638 MOVZ W8, 0x1
	0x0321F63C STRB W8, [X23 + 0x30D]
	0x0321F640 MOV X0, X19
	0x0321F644 MOV X1, X31
	0x0321F648 BL 0x325335C
	0x0321F64C STR W20, [X19 + 0x10]
	0x0321F650 LDR X0, [X22]
	0x0321F654 MOVZ W1, 0x1
	0x0321F658 BL 0x1C16D6C
	0x0321F65C STR X0, [X19 + 0x18]
	0x0321F660 MOV X20, X0
	0x0321F664 LDR X0, [X21]
	0x0321F668 BL 0x1C16F10
	0x0321F66C MOVZ W1, 0x200
	0x0321F670 MOVZ W2, 0x400
	0x0321F674 MOVZ W3, 0x40
	0x0321F678 MOV X4, X31
	0x0321F67C MOV X19, X0
	0x0321F680 BL 0x3251FDC
	0x0321F684 CBZ X20, 0x321F6A4
	0x0321F688 LDR W8, [X20 + 0x18]
	0x0321F68C CBZ W8, 0x321F6A8
	0x0321F690 STR X19, [X20 + 0x20]
	0x0321F694 LDP X20, X19, [X31 + 0x20]
	0x0321F698 LDP X22, X21, [X31 + 0x10]
	0x0321F69C LDP X30, X23, [X31], #0x30
	0x0321F6A0 RET
	0x0321F6A4 BL 0x1C16F20
	0x0321F6A8 BL 0x1C16F28
	0x0321F6AC STP X30, X21, [X31 - 0x20]!
	0x0321F6B0 STP X20, X19, [X31 + 0x10]
	0x0321F6B4 LDR X8, [X0]
	0x0321F6B8 MOV X19, X0
	0x0321F6BC LDP X9, X2, [X8 + 0x188]
	0x0321F6C0 MOV W1, W31
	0x0321F6C4 BLR X9
	0x0321F6C8 MOV X0, X19
	0x0321F6CC LDP X20, X19, [X31 + 0x10]
	0x0321F6D0 MOV X1, X31
	0x0321F6D4 LDP X30, X21, [X31], #0x20
	0x0321F6D8 B 0x33CB4DC
	0x0321F6DC CMP W1, 0x1
	0x0321F6E0 MOV X21, X0
	0x0321F6E4 B.NE 0x321F714
	0x0321F6E8 MOV X0, X21
	0x0321F6EC BL 0x3EB1AD0
	0x0321F6F0 LDR X20, [X0]
	0x0321F6F4 BL 0x3EB1AE0
	0x0321F6F8 MOV X0, X19
	0x0321F6FC MOV X1, X31
	0x0321F700 BL 0x33CB4DC
	0x0321F704 CBNZ X20, 0x321F71C
	0x0321F708 LDP X20, X19, [X31 + 0x10]
	0x0321F70C LDP X30, X21, [X31], #0x20
	0x0321F710 RET
	0x0321F714 MOV X20, X31
	0x0321F718 B 0x321F728
	0x0321F71C MOV X0, X20
	0x0321F720 BL 0x1C16F18
	0x0321F724 MOV X21, X0
	0x0321F728 MOV X0, X19
	0x0321F72C MOV X1, X31
	0x0321F730 BL 0x33CB4DC
	0x0321F734 CBNZ X20, 0x321F740
	0x0321F738 MOV X0, X21
	0x0321F73C BL 0x1D2C690
	0x0321F740 MOV X0, X20
	0x0321F744 BL 0x1C16F18
	0x0321F748 BL 0x1990590
	0x0321F74C STP X30, X19, [X31 - 0x10]!
	0x0321F750 LDR W1, [X0 + 0x10]
	0x0321F754 MOV X19, X0
	0x0321F758 BL 0x321F798
	0x0321F75C MOV X0, X19
	0x0321F760 BL 0x321FCC0
	0x0321F764 LDR X8, [X19 + 0x70]
	0x0321F768 MOVZ W9, 0x1
	0x0321F76C STRB W9, [X19 + 0x20]
	0x0321F770 CBZ X8, 0x321F790
	0x0321F774 LDR X4, [X8 + 0x18]
	0x0321F778 LDR X0, [X8 + 0x40]
	0x0321F77C LDR X3, [X8 + 0x28]
	0x0321F780 MOV X1, X19
	0x0321F784 MOV X2, X31
	0x0321F788 LDP X30, X19, [X31], #0x10
	0x0321F78C BR X4
	0x0321F790 LDP X30, X19, [X31], #0x10
	0x0321F794 RET
	0x0321F798 SUB X31, X31, 0x70
	0x0321F79C STP X29, X30, [X31 + 0x10]
	0x0321F7A0 STP X28, X27, [X31 + 0x20]
	0x0321F7A4 STP X26, X25, [X31 + 0x30]
	0x0321F7A8 STP X24, X23, [X31 + 0x40]
	0x0321F7AC STP X22, X21, [X31 + 0x50]
	0x0321F7B0 STP X20, X19, [X31 + 0x60]
	0x0321F7B4 ADRP X21, 0x11BD000
	0x0321F7B8 ADRP X20, 0xED4000
	0x0321F7BC LDRB W8, [X21 + 0x30F]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move W8, [X0+28]
	010 Move W9, [X0+24]
	011 Move X19, X2
	012 Move X20, X0
	013 Move X21, X1
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Compare W9, 0
	016 Invalid "Jump target not found in method."
	017 Move X22, X31
	018 Add X23, X21, 32
	019 Add X24, X19, 32
	020 Move X8, [X20]
	021 Move X1, [X20+32]
	022 Move X2, [X20+40]
	023 Move X0, X20
	024 Move X9, [X8+552]
	025 Move X3, [X8+560]
	026 NotImplemented "Instruction BLR not yet implemented."
	027 Move X8, [X20+40]
	028 Compare X8, 0
	029 JumpIfEqual {123}
	030 Move W9, [X8+24]
	031 Compare W9, 0
	032 JumpIfEqual {124}
	033 Compare X21, 0
	034 JumpIfEqual {123}
	035 Move W9, [X21+24]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Compare X19, 0
	038 JumpIfEqual {123}
	039 Move W9, [X19+24]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move W8, [X8+32]
	042 Move W9, [X23]
	043 Move W1, 1
	044 Move W3, W31
	045 Move X5, X31
	046 Xor W8, W9, W8
	047 Move [X24], W8
	048 Move W8, [X20+28]
	049 Move X0, [X20+32]
	050 Subtract W4, W8, 1
	051 Move X2, X0
	052 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	053 Move W8, [X20+28]
	054 Move X2, [X20+32]
	055 Move W4, 1
	056 Move X0, X19
	057 Subtract W3, W8, 1
	058 Move W1, W22
	059 Move X5, X31
	060 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	061 NotImplemented "Instruction LDRSW not yet implemented."
	062 Add X22, X22, 1
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X22, X31
	065 Add X23, X19, 32
	066 Add X24, X21, 32
	067 Move W25, 1
	068 Move X8, [X20]
	069 Move [X20+24], W25
	070 Move X1, [X20+32]
	071 Move X2, [X20+40]
	072 Move X0, X20
	073 Move X9, [X8+552]
	074 Move X3, [X8+560]
	075 NotImplemented "Instruction BLR not yet implemented."
	076 Move W8, [X20+28]
	077 Move X0, [X20+32]
	078 Move W1, 1
	079 Move W3, W31
	080 Subtract W4, W8, 1
	081 Move X2, X0
	082 Move X5, X31
	083 Move [X20+24], W31
	084 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	085 Move W8, [X20+28]
	086 Move X2, [X20+32]
	087 Move W4, 1
	088 Move X0, X21
	089 Subtract W3, W8, 1
	090 Move W1, W22
	091 Move X5, X31
	092 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	093 Move X8, [X20+40]
	094 Compare X8, 0
	095 JumpIfEqual {123}
	096 Move W9, [X8+24]
	097 Compare W9, 0
	098 JumpIfEqual {124}
	099 Compare X21, 0
	100 JumpIfEqual {123}
	101 Move W9, [X21+24]
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Compare X19, 0
	104 JumpIfEqual {123}
	105 Move W9, [X19+24]
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Move W8, [X8+32]
	108 Move W9, [X24]
	109 Xor W8, W9, W8
	110 Move [X23], W8
	111 NotImplemented "Instruction LDRSW not yet implemented."
	112 Add X22, X22, 1
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move X20, [X31+48]
	115 Move X19, [X31+56]
	116 Move X22, [X31+32]
	117 Move X21, [X31+40]
	118 Move X24, [X31+16]
	119 Move X23, [X31+24]
	120 Move X30, [X31+64]
	121 Move X25, [X31+72]
	122 Return 
	123 Call 0x1C17F20
	124 Call 0x1C17F28

Method: System.Void OFB(System.Byte[] input, System.Byte[] output)

Disassembly:
	0x0321F7C0 LDR X20, [X20 + 0x618]
	0x0321F7C4 MOV W25, W1
	0x0321F7C8 MOV X19, X0
	0x0321F7CC TBNZ X8, 0x0, 0x321F7F0
	0x0321F7D0 ADRP X0, 0xF02000
	0x0321F7D4 LDR X0, [X0 + 0xD90]
	0x0321F7D8 BL 0x1C16CF4
	0x0321F7DC ADRP X0, 0xED4000
	0x0321F7E0 LDR X0, [X0 + 0x618]
	0x0321F7E4 BL 0x1C16CF4
	0x0321F7E8 MOVZ W8, 0x1
	0x0321F7EC STRB W8, [X21 + 0x30F]
	0x0321F7F0 LDR X0, [X20]
	0x0321F7F4 ADRP X28, 0xF02000
	0x0321F7F8 LDR X28, [X28 + 0xD90]
	0x0321F7FC MOVZ W1, 0x14
	0x0321F800 BL 0x1C16D6C
	0x0321F804 LDR X8, [X20]
	0x0321F808 MOV X21, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xF02000
	004 Move X0, [X0+3296]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xF03000
	009 Move X0, [X0+3600]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call CryptographicException..ctor, X0, X1
	015 Move X0, 0xF03000
	016 Move X0, [X0+3608]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Void CTS(System.Byte[] input, System.Byte[] output)

Disassembly:
	0x0321F80C MOVZ W1, 0x14
	0x0321F810 MOV X0, X8
	0x0321F814 BL 0x1C16D6C
	0x0321F818 LDR X0, [X20]
	0x0321F81C MOVZ W1, 0x14
	0x0321F820 BL 0x1C16D6C
	0x0321F824 LDR X8, [X20]
	0x0321F828 MOV X22, X0
	0x0321F82C MOVZ W1, 0x14
	0x0321F830 MOV X0, X8
	0x0321F834 BL 0x1C16D6C
	0x0321F838 STR X0, [X31 + 0x8]
	0x0321F83C MOV X0, X31
	0x0321F840 BL 0x325D0E8
	0x0321F844 MOV X24, X0
	0x0321F848 MOVZ W8, 0x6667
	0x0321F84C LDR X0, [X20]
	0x0321F850 SUB W29, W25, 0x1
	0x0321F854 MOVK W8, 0x66660000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xF02000
	004 Move X0, [X0+3296]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xF03000
	009 Move X0, [X0+3616]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call CryptographicException..ctor, X0, X1
	015 Move X0, 0xF03000
	016 Move X0, [X0+3624]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Void CheckInput(System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount)

Disassembly:
	0x0321F858 ADD W9, W25, 0x7
	0x0321F85C CMP W25, 0x0
	0x0321F860 SMADDL X8, X29, X8, X31
	0x0321F864 CSEL W9, W9, W25, LT
	0x0321F868 UBFM X10, X8, 0x3F, 0x3F
	0x0321F86C SBFM X8, X8, 0x26, 0x3F
	0x0321F870 SBFM W1, W9, 0x3, 0x1F
	0x0321F874 STR W25, [X31 + 0x4]
	0x0321F878 ADD W25, W8, W10
	0x0321F87C BL 0x1C16D6C
	0x0321F880 MOV X26, X0
	0x0321F884 LDR X0, [X19 + 0x68]
	0x0321F888 CBNZ X0, 0x321F898
	0x0321F88C BL 0x3256158
	0x0321F890 STR X0, [X19 + 0x68]
	0x0321F894 CBZ X0, 0x321FCB8
	0x0321F898 LDR X8, [X0]
	0x0321F89C MOV X1, X21
	0x0321F8A0 LDP X9, X2, [X8 + 0x198]
	0x0321F8A4 BLR X9
	0x0321F8A8 CBZ X24, 0x321FCB8
	0x0321F8AC MOV X0, X24
	0x0321F8B0 MOV X1, X21
	0x0321F8B4 MOV X2, X31
	0x0321F8B8 BL 0x32513F4
	0x0321F8BC CBZ X21, 0x321FCB8
	0x0321F8C0 LDR W4, [X21 + 0x18]
	0x0321F8C4 MOV X27, X0
	0x0321F8C8 MOV X0, X21
	0x0321F8CC MOV W1, W31
	0x0321F8D0 MOV X2, X22
	0x0321F8D4 MOV W3, W31
	0x0321F8D8 MOV X5, X31
	0x0321F8DC BL 0x339FCE8
	0x0321F8E0 MOVZ W3, 0x1
	0x0321F8E4 MOV X1, X22
	0x0321F8E8 MOV X2, X21
	0x0321F8EC BL 0x321FEDC
	0x0321F8F0 MOV X0, X24
	0x0321F8F4 MOV X1, X22
	0x0321F8F8 MOV X2, X31
	0x0321F8FC BL 0x32513F4
	0x0321F900 LDR X23, [X31 + 0x8]
	0x0321F904 CBZ X23, 0x321FCB8
	0x0321F908 LDR W9, [X23 + 0x18]
	0x0321F90C MOV X22, X0
	0x0321F910 CBZ W9, 0x321F978
	0x0321F914 MOV W8, W31
	0x0321F918 CBZ X27, 0x321FCB8
	0x0321F91C LDR W10, [X27 + 0x18]
	0x0321F920 CMP W8, W10
	0x0321F924 B.CS 0x321FCBC
	0x0321F928 CBZ X22, 0x321FCB8
	0x0321F92C LDR W10, [X22 + 0x18]
	0x0321F930 CMP W8, W10
	0x0321F934 B.CS 0x321FCBC
	0x0321F938 CMP W8, W9
	0x0321F93C B.CS 0x321FCBC
	0x0321F940 SXTW X9, W8
	0x0321F944 ADD X10, X27, X9
	0x0321F948 ADD X11, X22, X9
	0x0321F94C LDRB W10, [X10 + 0x20]
	0x0321F950 LDRB W11, [X11 + 0x20]
	0x0321F954 ADD X9, X23, X9
	0x0321F958 ADD W8, W8, 0x1
	0x0321F95C EOR W10, W11, W10, 0x0
	0x0321F960 STRB W10, [X9 + 0x20]
	0x0321F964 LDR W9, [X23 + 0x18]
	0x0321F968 CMP W8, W9
	0x0321F96C B.NE 0x321F918
	0x0321F970 CBNZ W8, 0x321F980
	0x0321F974 B 0x321FCBC
	0x0321F978 MOV W8, W31
	0x0321F97C CBZ W8, 0x321FCBC
	0x0321F980 LDRB W9, [X23 + 0x20]
	0x0321F984 CMP W8, 0x13
	0x0321F988 ORR W9, W9, 0x80
	0x0321F98C STRB W9, [X23 + 0x20]
	0x0321F990 B.LS 0x321FCBC
	0x0321F994 LDRB W8, [X23 + 0x33]
	0x0321F998 ORR W8, W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {21}
	006 Move TEMP, X2
	007 And TEMP, TEMP, -2147483648
	008 Compare TEMP, -2147483648
	009 JumpIfEqual {33}
	010 Move TEMP, X3
	011 And TEMP, TEMP, -2147483648
	012 Compare TEMP, -2147483648
	013 JumpIfEqual {40}
	014 Move W8, [X1+24]
	015 Subtract W8, W8, W3
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+32]
	020 Return 
	021 Move X0, 0xEDA000
	022 Move X0, [X0+1320]
	023 Call 0x1C17D08
	024 Call 0x1C17F10
	025 Move X19, X0
	026 Move X0, 0xF03000
	027 Move X0, [X0+3632]
	028 Call 0x1C17D08
	029 Move X1, X0
	030 Move X0, X19
	031 Move X2, X31
	032 Call ArgumentNullException..ctor, X0, X1
	033 Move X0, 0xEDD000
	034 Move X0, [X0+1888]
	035 Call 0x1C17D08
	036 Call 0x1C17F10
	037 Move X19, X0
	038 Move X0, 0xF03000
	039 Move X0, [X0+3640]
	040 Move X0, 0xEDD000
	041 Move X0, [X0+1888]
	042 Call 0x1C17D08
	043 Call 0x1C17F10
	044 Move X19, X0
	045 Move X0, 0xF03000
	046 Move X0, [X0+3648]
	047 Call 0x1C17D08
	048 Move X20, X0
	049 Move X0, 0xF03000
	050 Move X0, [X0+3656]
	051 Call 0x1C17D08
	052 Move X2, X0
	053 Move X0, X19
	054 Move X1, X20
	055 Move X3, X31
	056 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	057 Move X0, 0xF03000
	058 Move X0, [X0+3664]
	059 Call 0x1C17D08
	060 Move X1, X0
	061 Move X0, X19
	062 Call 0x1C17DEC
	063 Move X0, 0xF03000
	064 Move X0, [X0+3672]
	065 Call 0x1C17D08
	066 Move X1, X31
	067 Call Locale.GetText, X0
	068 Move X19, X0
	069 Move X0, 0xEDD000
	070 Move X0, [X0+1400]
	071 Call 0x1C17D08
	072 Call 0x1C17F10
	073 Move X20, X0
	074 Move X0, 0xF03000
	075 Move X0, [X0+3632]
	076 Call 0x1C17D08
	077 Move X1, X0
	078 Move X0, X20
	079 Move X2, X19
	080 Move X3, X31
	081 Call ArgumentException..ctor, X0, X1, X2
	082 Move X0, 0xF03000
	083 Move X0, [X0+3664]
	084 Call 0x1C17D08
	085 Move X1, X0
	086 Move X0, X20
	087 Call 0x1C17DEC

Method: System.Int32 TransformBlock(System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount, System.Byte[] outputBuffer, System.Int32 outputOffset)

Disassembly:
	0x0321F99C STRB W8, [X23 + 0x33]
	0x0321F9A0 LDR X0, [X28]
	0x0321F9A4 BL 0x1C16F10
	0x0321F9A8 MOV X1, X23
	0x0321F9AC MOV X20, X0
	0x0321F9B0 BL 0x321C804
	0x0321F9B4 STR X20, [X19 + 0x30]
	0x0321F9B8 CBZ X20, 0x321FCB8
	0x0321F9BC MOV X0, X20
	0x0321F9C0 BL 0x321FF98
	0x0321F9C4 TBZ X0, 0x0, 0x321F884
	0x0321F9C8 MOVZ W20, 0x2
	0x0321F9CC STR W31, [X19 + 0x60]
	0x0321F9D0 CMP W29, 0xA0
	0x0321F9D4 B.LT 0x321FA34
	0x0321F9D8 MOV W28, W31
	0x0321F9DC ADD W3, W20, W28
	0x0321F9E0 MOV X1, X27
	0x0321F9E4 MOV X2, X21
	0x0321F9E8 BL 0x321FEDC
	0x0321F9EC MOV X0, X24
	0x0321F9F0 MOV X1, X27
	0x0321F9F4 MOV X2, X31
	0x0321F9F8 BL 0x32513F4
	0x0321F9FC CBZ X26, 0x321FCB8
	0x0321FA00 MOV X27, X0
	0x0321FA04 CBZ X0, 0x321FCB8
	0x0321FA08 LDR W8, [X26 + 0x18]
	0x0321FA0C LDR W4, [X27 + 0x18]
	0x0321FA10 ADD W28, W28, 0x1
	0x0321FA14 MOV X0, X27
	0x0321FA18 MOV W1, W31
	0x0321FA1C MSUB W3, W28, W4, W8
	0x0321FA20 MOV X2, X26
	0x0321FA24 MOV X5, X31
	0x0321FA28 BL 0x339FCE8
	0x0321FA2C CMP W25, W28
	0x0321FA30 B.NE 0x321F9DC
	0x0321FA34 ADD W28, W20, W25
	0x0321FA38 MOV X1, X27
	0x0321FA3C MOV X2, X21
	0x0321FA40 MOV W3, W28
	0x0321FA44 BL 0x321FEDC
	0x0321FA48 MOV X0, X24
	0x0321FA4C MOV X1, X27
	0x0321FA50 MOV X2, X31
	0x0321FA54 BL 0x32513F4
	0x0321FA58 CBZ X0, 0x321FCB8
	0x0321FA5C CBZ X26, 0x321FCB8
	0x0321FA60 LDR W8, [X0 + 0x18]
	0x0321FA64 LDR W9, [X26 + 0x18]
	0x0321FA68 MOV X2, X26
	0x0321FA6C MOV W3, W31
	0x0321FA70 MOV X5, X31
	0x0321FA74 MSUB W4, W25, W8, W9
	0x0321FA78 SUB W1, W8, W4
	0x0321FA7C MOV X27, X0
	0x0321FA80 MOV W23, W29
	0x0321FA84 BL 0x339FCE8
	0x0321FA88 LDR W8, [X26 + 0x18]
	0x0321FA8C CBZ W8, 0x321FCBC
	0x0321FA90 LDRB W8, [X26 + 0x20]
	0x0321FA94 ADRP X20, 0xF02000
	0x0321FA98 ORR W8, W8, 0x80
	0x0321FA9C STRB W8, [X26 + 0x20]
	0x0321FAA0 LDR X20, [X20 + 0xD90]
	0x0321FAA4 LDR X0, [X20]
	0x0321FAA8 BL 0x1C16F10
	0x0321FAAC MOV X1, X26
	0x0321FAB0 MOV X29, X0
	0x0321FAB4 BL 0x321C804
	0x0321FAB8 LDR X0, [X20]
	0x0321FABC LDR X20, [X19 + 0x30]
	0x0321FAC0 LDR W8, [X0 + 0xE0]
	0x0321FAC4 CBNZ W8, 0x321FACC
	0x0321FAC8 BL 0x1C16DFC
	0x0321FACC MOVZ W1, 0x2
	0x0321FAD0 MOV X0, X20
	0x0321FAD4 BL 0x3220140
	0x0321FAD8 MOV X1, X0
	0x0321FADC MOV X0, X29
	0x0321FAE0 BL 0x321C4E4
	0x0321FAE4 MOV X20, X0
	0x0321FAE8 MOVZ W0, 0x1
	0x0321FAEC BL 0x321C2D0
	0x0321FAF0 MOV X1, X0
	0x0321FAF4 MOV X0, X20
	0x0321FAF8 BL 0x321C374
	0x0321FAFC MOV X1, X0
	0x0321FB00 MOV X0, X29
	0x0321FB04 BL 0x321C374
	0x0321FB08 STR X0, [X19 + 0x28]
	0x0321FB0C CBZ X0, 0x321FCB8
	0x0321FB10 MOV W1, W23
	0x0321FB14 MOV W29, W23
	0x0321FB18 BL 0x3220230
	0x0321FB1C TBZ X0, 0x0, 0x321FB30
	0x0321FB20 LDR X0, [X19 + 0x28]
	0x0321FB24 CBZ X0, 0x321FCB8
	0x0321FB28 BL 0x321FF98
	0x0321FB2C TBNZ X0, 0x0, 0x321FB54
	0x0321FB30 LDR W8, [X19 + 0x60]
	0x0321FB34 ADD W20, W28, 0x1
	0x0321FB38 ADD W8, W8, 0x1
	0x0321FB3C CMP W8, 0xFFF
	0x0321FB40 STR W8, [X19 + 0x60]
	0x0321FB44 B.LE 0x321F9D0
	0x0321FB48 ADRP X28, 0xF02000
	0x0321FB4C LDR X28, [X28 + 0xD90]
	0x0321FB50 B 0x321F884
	0x0321FB54 ADRP X25, 0xF02000
	0x0321FB58 LDR X25, [X25 + 0xD90]
	0x0321FB5C LDR X22, [X19 + 0x28]
	0x0321FB60 LDR X0, [X25]
	0x0321FB64 LDR W8, [X0 + 0xE0]
	0x0321FB68 CBNZ W8, 0x321FB70
	0x0321FB6C BL 0x1C16DFC
	0x0321FB70 MOVZ W0, 0x1
	0x0321FB74 BL 0x321C2D0
	0x0321FB78 MOV X1, X0
	0x0321FB7C MOV X0, X22
	0x0321FB80 BL 0x321C374
	0x0321FB84 LDR X1, [X19 + 0x30]
	0x0321FB88 BL 0x322026C
	0x0321FB8C LDR W20, [X31 + 0x4]
	0x0321FB90 MOV X22, X0
	0x0321FB94 LDR X0, [X25]
	0x0321FB98 LDR W8, [X0 + 0xE0]
	0x0321FB9C CBNZ W8, 0x321FBA4
	0x0321FBA0 BL 0x1C16DFC

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move W8, [X0+72]
	009 Compare W8, 0
	010 JumpIfNotEqual {96}
	011 Move W19, W5
	012 Move X20, X4
	013 Move W24, W3
	014 Move W21, W2
	015 Move X22, X0
	016 Move X23, X1
	017 Call SymmetricTransform.CheckInput, X0, X1, X2, X3
	018 Compare X20, 0
	019 JumpIfEqual {108}
	020 Move TEMP, X19
	021 And TEMP, TEMP, -2147483648
	022 Compare TEMP, -2147483648
	023 JumpIfEqual {120}
	024 Move W8, [X20+24]
	025 Move W10, [X22+24]
	026 Subtract W9, W8, W24
	027 Subtract W9, W9, W19
	028 Compare W10, 0
	029 JumpIfNotEqual {37}
	030 Move TEMP, X9
	031 And TEMP, TEMP, -2147483648
	032 Compare TEMP, -2147483648
	033 JumpIfNotEqual {37}
	034 Move W10, [X22+64]
	035 Or W11, W10, 2
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Compare W10, 0
	038 JumpIfNotEqual {42}
	039 Move W10, [X22+64]
	040 And W10, W10, 0xFFFFFFFD
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move TEMP, X9
	043 And TEMP, TEMP, -2147483648
	044 Compare TEMP, -2147483648
	045 JumpIfNotEqual {56}
	046 Compare X23, 0
	047 JumpIfEqual {143}
	048 Move W9, [X23+24]
	049 Move W10, [X22+28]
	050 Add W11, W8, W21
	051 Subtract W9, W9, W11
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Subtract W24, W8, W19
	054 Move W8, [X22+28]
	055 Add W31, W8, W9
	056 Move X0, X22
	057 Move X1, X23
	058 Move W2, W21
	059 Move W3, W24
	060 Move X4, X20
	061 Move W5, W19
	062 Move X20, [X31+48]
	063 Move X19, [X31+56]
	064 Move X22, [X31+32]
	065 Move X21, [X31+40]
	066 Move X24, [X31+16]
	067 Move X23, [X31+24]
	068 Move X30, [X31+64]
	069 Call SymmetricTransform.InternalTransformBlock, X0, X1, X2, X3, X4, X5
	070 Return X0
	071 Move X0, 0xF03000
	072 Move X0, [X0+3672]
	073 Call 0x1C17D08
	074 Move X1, X31
	075 Call Locale.GetText, X0
	076 Move X19, X0
	077 Move X0, 0xF02000
	078 Move X0, [X0+3296]
	079 Call 0x1C17D08
	080 Call 0x1C17F10
	081 Move X20, X0
	082 Move X0, 0xF03000
	083 Move X0, [X0+3680]
	084 Call 0x1C17D08
	085 Move X1, X0
	086 Move X0, X20
	087 Move X2, X19
	088 Move X3, X31
	089 Call CryptographicException..ctor, X0, X1, X2
	090 Move X0, 0xF03000
	091 Move X0, [X0+3688]
	092 Call 0x1C17D08
	093 Move X1, X0
	094 Move X0, X20
	095 Call 0x1C17DEC
	096 Move X0, 0xEFE000
	097 Move X0, [X0+1208]
	098 Call 0x1C17D08
	099 Call 0x1C17F10
	100 Move X19, X0
	101 Move X0, 0xF03000
	102 Move X0, [X0+3696]
	103 Call 0x1C17D08
	104 Move X1, X0
	105 Move X0, X19
	106 Move X2, X31
	107 Call ObjectDisposedException..ctor, X0, X1
	108 Move X0, 0xEDA000
	109 Move X0, [X0+1320]
	110 Call 0x1C17D08
	111 Call 0x1C17F10
	112 Move X19, X0
	113 Move X0, 0xF03000
	114 Move X0, [X0+3680]
	115 Call 0x1C17D08
	116 Move X1, X0
	117 Move X0, X19
	118 Move X2, X31
	119 Call ArgumentNullException..ctor, X0, X1
	120 Move X0, 0xEDD000
	121 Move X0, [X0+1888]
	122 Call 0x1C17D08
	123 Call 0x1C17F10
	124 Move X19, X0
	125 Move X0, 0xF03000
	126 Move X0, [X0+3704]
	127 Call 0x1C17D08
	128 Move X20, X0
	129 Move X0, 0xF03000
	130 Move X0, [X0+3656]
	131 Call 0x1C17D08
	132 Move X2, X0
	133 Move X0, X19
	134 Move X1, X20
	135 Move X3, X31
	136 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	137 Move X0, 0xF03000
	138 Move X0, [X0+3688]
	139 Call 0x1C17D08
	140 Move X1, X0
	141 Move X0, X19
	142 Call 0x1C17DEC
	143 Call 0x1C17F20

Method: System.Boolean get_KeepLastBlock()

Disassembly:
	0x0321FBA4 MOV W0, W20
	0x0321FBA8 BL 0x321FDA0
	0x0321FBAC MOV X23, X0
	0x0321FBB0 MOVZ W0, 0x1
	0x0321FBB4 BL 0x321C2D0
	0x0321FBB8 MOV X1, X0
	0x0321FBBC MOV X0, X23
	0x0321FBC0 BL 0x32214D8
	0x0321FBC4 CMP W0, 0x1

ISIL:
	001 Move W8, [X0+24]
	002 Compare W8, 0
	003 JumpIfEqual {6}
	004 Move W0, W31
	005 Return X0
	006 Move W8, [X0+64]
	007 And W8, W8, 0xFFFFFFFD
	008 NotImplemented "Instruction CMP not yet implemented."
	009 NotImplemented "Instruction CSET not yet implemented."
	010 Return X0

Method: System.Int32 InternalTransformBlock(System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount, System.Byte[] outputBuffer, System.Int32 outputOffset)

Disassembly:
	0x0321FBC8 B.LT 0x321FB94
	0x0321FBCC LDR X0, [X25]
	0x0321FBD0 LDR X24, [X19 + 0x28]
	0x0321FBD4 LDR W8, [X0 + 0xE0]
	0x0321FBD8 CBNZ W8, 0x321FBE0
	0x0321FBDC BL 0x1C16DFC
	0x0321FBE0 MOVZ W0, 0x1
	0x0321FBE4 BL 0x321C2D0
	0x0321FBE8 MOV X1, X0
	0x0321FBEC MOV X0, X24
	0x0321FBF0 BL 0x321C374
	0x0321FBF4 MOV X1, X0
	0x0321FBF8 MOV X0, X23
	0x0321FBFC BL 0x32214D8
	0x0321FC00 TBZ X0, 0x1F, 0x321FB94
	0x0321FC04 CBZ X23, 0x321FCB8
	0x0321FC08 LDR X2, [X19 + 0x28]
	0x0321FC0C MOV X0, X23
	0x0321FC10 MOV X1, X22
	0x0321FC14 BL 0x321CA14
	0x0321FC18 STR X0, [X19 + 0x38]
	0x0321FC1C MOV X23, X0
	0x0321FC20 LDR X0, [X25]
	0x0321FC24 LDR W8, [X0 + 0xE0]
	0x0321FC28 CBNZ W8, 0x321FC30
	0x0321FC2C BL 0x1C16DFC
	0x0321FC30 MOVZ W0, 0x1
	0x0321FC34 BL 0x321C2D0
	0x0321FC38 MOV X1, X0
	0x0321FC3C MOV X0, X23
	0x0321FC40 BL 0x32214D8
	0x0321FC44 CMP W0, 0x1
	0x0321FC48 B.LT 0x321FB94
	0x0321FC4C LDR X0, [X25]
	0x0321FC50 BL 0x1C16F10
	0x0321FC54 MOV X1, X21
	0x0321FC58 MOV X20, X0
	0x0321FC5C BL 0x321C804
	0x0321FC60 STR X20, [X19 + 0x58]
	0x0321FC64 LDR X0, [X25]
	0x0321FC68 LDR X20, [X19 + 0x28]
	0x0321FC6C LDR W8, [X0 + 0xE0]
	0x0321FC70 CBNZ W8, 0x321FC78
	0x0321FC74 BL 0x1C16DFC
	0x0321FC78 MOVZ W0, 0x1
	0x0321FC7C BL 0x321C2D0
	0x0321FC80 MOV X1, X0
	0x0321FC84 MOV X0, X20
	0x0321FC88 BL 0x321C374
	0x0321FC8C LDR X1, [X19 + 0x30]
	0x0321FC90 BL 0x322026C
	0x0321FC94 STR X0, [X19 + 0x50]
	0x0321FC98 LDP X20, X19, [X31 + 0x60]
	0x0321FC9C LDP X22, X21, [X31 + 0x50]
	0x0321FCA0 LDP X24, X23, [X31 + 0x40]
	0x0321FCA4 LDP X26, X25, [X31 + 0x30]
	0x0321FCA8 LDP X28, X27, [X31 + 0x20]
	0x0321FCAC LDP X29, X30, [X31 + 0x10]
	0x0321FCB0 ADD X31, X31, 0x70
	0x0321FCB4 RET
	0x0321FCB8 BL 0x1C16F20
	0x0321FCBC BL 0x1C16F28
	0x0321FCC0 STR X30, [X31 - 0x30]!
	0x0321FCC4 STP X22, X21, [X31 + 0x10]
	0x0321FCC8 STP X20, X19, [X31 + 0x20]
	0x0321FCCC ADRP X20, 0x11BD000
	0x0321FCD0 ADRP X22, 0xF02000
	0x0321FCD4 LDRB W8, [X20 + 0x30E]
	0x0321FCD8 LDR X22, [X22 + 0xD90]
	0x0321FCDC MOV X19, X0
	0x0321FCE0 TBNZ X8, 0x0, 0x321FCF8
	0x0321FCE4 ADRP X0, 0xF02000
	0x0321FCE8 LDR X0, [X0 + 0xD90]
	0x0321FCEC BL 0x1C16CF4
	0x0321FCF0 MOVZ W8, 0x1
	0x0321FCF4 STRB W8, [X20 + 0x30E]
	0x0321FCF8 LDR X0, [X22]
	0x0321FCFC LDR W8, [X0 + 0xE0]
	0x0321FD00 CBNZ W8, 0x321FD08
	0x0321FD04 BL 0x1C16DFC
	0x0321FD08 MOVZ W0, 0xA0
	0x0321FD0C BL 0x321FDA0
	0x0321FD10 MOV X20, X0
	0x0321FD14 STR X0, [X19 + 0x40]
	0x0321FD18 LDR X0, [X22]
	0x0321FD1C LDR W8, [X0 + 0xE0]
	0x0321FD20 CBNZ W8, 0x321FD28
	0x0321FD24 BL 0x1C16DFC
	0x0321FD28 MOV X0, X20
	0x0321FD2C MOV W1, W31
	0x0321FD30 BL 0x321FE58
	0x0321FD34 TBNZ X0, 0x0, 0x321FD60
	0x0321FD38 LDR X0, [X22]
	0x0321FD3C LDR X20, [X19 + 0x40]
	0x0321FD40 LDR X21, [X19 + 0x30]
	0x0321FD44 LDR W8, [X0 + 0xE0]
	0x0321FD48 CBNZ W8, 0x321FD50
	0x0321FD4C BL 0x1C16DFC
	0x0321FD50 MOV X0, X20
	0x0321FD54 MOV X1, X21
	0x0321FD58 BL 0x32214D8
	0x0321FD5C TBNZ X0, 0x1F, 0x321FD74
	0x0321FD60 LDR X0, [X19 + 0x40]
	0x0321FD64 CBZ X0, 0x321FD9C
	0x0321FD68 BL 0x321FDFC
	0x0321FD6C LDR X20, [X19 + 0x40]
	0x0321FD70 B 0x321FD18
	0x0321FD74 LDR X0, [X19 + 0x38]
	0x0321FD78 CBZ X0, 0x321FD9C
	0x0321FD7C LDR X2, [X19 + 0x28]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X23, X4
	010 Move W4, [X0+28]
	011 Move W22, W5
	012 Move W20, W2
	013 Move X19, X0
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Move X21, X1
	016 Move W25, 1
	017 NotImplemented "Instruction SDIV not yet implemented."
	018 NotImplemented "Instruction MSUB not yet implemented."
	019 Compare W8, 0
	020 JumpIfNotEqual {101}
	021 Move W8, [X19+24]
	022 Compare W8, 0
	023 JumpIfNotEqual {29}
	024 Move W8, [X19+64]
	025 And W8, W8, 0xFFFFFFFD
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction CSET not yet implemented."
	028 Subtract W25, W25, W8
	029 Move W8, [X19+73]
	030 Compare W8, 0
	031 JumpIfEqual {50}
	032 Move X8, [X19]
	033 Move X1, [X19+48]
	034 Move X2, [X19+56]
	035 Move X0, X19
	036 Move X9, [X8+536]
	037 Move X3, [X8+544]
	038 NotImplemented "Instruction BLR not yet implemented."
	039 Move X0, [X19+56]
	040 Move W4, [X19+28]
	041 Move W1, W31
	042 Move X2, X23
	043 Move W3, W22
	044 Move X5, X31
	045 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	046 Move W4, [X19+28]
	047 Move [X19+73], W31
	048 Add W22, W4, W22
	049 Move W24, W4
	050 Move W24, W31
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X2, [X19+48]
	053 Move X0, X21
	054 Move W1, W20
	055 Move W3, W31
	056 Move X5, X31
	057 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	058 Move X8, [X19]
	059 Move X1, [X19+48]
	060 Move X2, [X19+56]
	061 Move X0, X19
	062 Move X9, [X8+536]
	063 Move X3, [X8+544]
	064 NotImplemented "Instruction BLR not yet implemented."
	065 Move X0, [X19+56]
	066 Move W4, [X19+28]
	067 Move W1, W31
	068 Move X2, X23
	069 Move W3, W22
	070 Move X5, X31
	071 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	072 Move W4, [X19+28]
	073 Subtract W25, W25, 1
	074 Add W20, W4, W20
	075 Add W22, W4, W22
	076 Add W24, W4, W24
	077 Move W8, [X19+24]
	078 Compare W8, 0
	079 JumpIfNotEqual {91}
	080 Move W8, [X19+64]
	081 And W8, W8, 0xFFFFFFFD
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X2, [X19+48]
	084 Move X0, X21
	085 Move W1, W20
	086 Move W3, W31
	087 Move X5, X31
	088 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	089 Move W8, 1
	090 Move [X19+73], W8
	091 Move W0, W24
	092 Move X20, [X31+48]
	093 Move X19, [X31+56]
	094 Move X22, [X31+32]
	095 Move X21, [X31+40]
	096 Move X24, [X31+16]
	097 Move X23, [X31+24]
	098 Move X30, [X31+64]
	099 Move X25, [X31+72]
	100 Return X0
	101 Move X0, 0xF02000
	102 Move X0, [X0+3296]
	103 Call 0x1C17D08
	104 Call 0x1C17F10
	105 Move X19, X0
	106 Move X0, 0xF03000
	107 Move X0, [X0+3712]
	108 Call 0x1C17D08
	109 Move X1, X0
	110 Move X0, X19
	111 Move X2, X31
	112 Call CryptographicException..ctor, X0, X1
	113 Move X0, 0xF03000
	114 Move X0, [X0+3720]
	115 Call 0x1C17D08
	116 Move X1, X0
	117 Move X0, X19
	118 Call 0x1C17DEC

Method: System.Void Random(System.Byte[] buffer, System.Int32 start, System.Int32 length)

Disassembly:
	0x0321FD80 LDR X1, [X19 + 0x40]
	0x0321FD84 BL 0x321CA14
	0x0321FD88 STR X0, [X19 + 0x48]
	0x0321FD8C LDP X20, X19, [X31 + 0x20]
	0x0321FD90 LDP X22, X21, [X31 + 0x10]
	0x0321FD94 LDR X30, [X31], #0x30
	0x0321FD98 RET
	0x0321FD9C BL 0x1C16F20
	0x0321FDA0 STP X30, X21, [X31 - 0x20]!
	0x0321FDA4 STP X20, X19, [X31 + 0x10]
	0x0321FDA8 ADRP X20, 0x11BD000
	0x0321FDAC ADRP X21, 0xF02000
	0x0321FDB0 LDRB W8, [X20 + 0x324]
	0x0321FDB4 LDR X21, [X21 + 0xD90]
	0x0321FDB8 MOV W19, W0
	0x0321FDBC TBNZ X8, 0x0, 0x321FDD4
	0x0321FDC0 ADRP X0, 0xF02000
	0x0321FDC4 LDR X0, [X0 + 0xD90]
	0x0321FDC8 BL 0x1C16CF4
	0x0321FDCC MOVZ W8, 0x1
	0x0321FDD0 STRB W8, [X20 + 0x324]
	0x0321FDD4 LDR X0, [X21]
	0x0321FDD8 LDR W8, [X0 + 0xE0]
	0x0321FDDC CBNZ W8, 0x321FDE4
	0x0321FDE0 BL 0x1C16DFC
	0x0321FDE4 BL 0x32221FC
	0x0321FDE8 MOV X1, X0
	0x0321FDEC MOV W0, W19
	0x0321FDF0 LDP X20, X19, [X31 + 0x10]
	0x0321FDF4 LDP X30, X21, [X31], #0x20
	0x0321FDF8 B 0x32222A4
	0x0321FDFC STP X30, X21, [X31 - 0x20]!
	0x0321FE00 STP X20, X19, [X31 + 0x10]
	0x0321FE04 ADRP X20, 0x11BD000
	0x0321FE08 ADRP X21, 0xF02000
	0x0321FE0C LDRB W8, [X20 + 0x326]
	0x0321FE10 LDR X21, [X21 + 0xD90]
	0x0321FE14 MOV X19, X0
	0x0321FE18 TBNZ X8, 0x0, 0x321FE30
	0x0321FE1C ADRP X0, 0xF02000
	0x0321FE20 LDR X0, [X0 + 0xD90]
	0x0321FE24 BL 0x1C16CF4
	0x0321FE28 MOVZ W8, 0x1
	0x0321FE2C STRB W8, [X20 + 0x326]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x11BE000
	008 Move W8, [X23+778]
	009 Move W19, W3
	010 Move W20, W2
	011 Move X21, X1
	012 Move X22, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xED5000
	018 Move X0, [X0+1560]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+778], W8
	022 Move X23, 0xED5000
	023 Move X8, [X22+80]
	024 Move X23, [X23+1560]
	025 Compare X8, 0
	026 JumpIfNotEqual {30}
	027 Move X0, X31
	028 Call RandomNumberGenerator.Create
	029 Move [X22+80], X0
	030 Move X0, [X23]
	031 Move W1, W19
	032 Call 0x1C17D6C
	033 Move X8, [X22+80]
	034 Compare X8, 0
	035 JumpIfEqual {57}
	036 Move X9, [X8]
	037 Move X22, X0
	038 Move X0, X8
	039 Move X1, X22
	040 Move X10, [X9+408]
	041 Move X2, [X9+416]
	042 NotImplemented "Instruction BLR not yet implemented."
	043 Move X0, X22
	044 Move X2, X21
	045 Move W3, W20
	046 Move W4, W19
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move W1, W31
	052 Move X5, X31
	053 Move X30, [X31+48]
	054 Move X23, [X31+56]
	055 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	056 Return 
	057 Call 0x1C17F20

Method: System.Void ThrowBadPaddingException(System.Security.Cryptography.PaddingMode padding, System.Int32 length, System.Int32 position)

Disassembly:
	0x0321FE30 LDR X0, [X21]
	0x0321FE34 LDR W8, [X0 + 0xE0]
	0x0321FE38 CBNZ W8, 0x321FE40
	0x0321FE3C BL 0x1C16DFC
	0x0321FE40 BL 0x32221FC
	0x0321FE44 MOV X1, X0
	0x0321FE48 MOV X0, X19
	0x0321FE4C LDP X20, X19, [X31 + 0x10]
	0x0321FE50 LDP X30, X21, [X31], #0x20
	0x0321FE54 B 0x3222404
	0x0321FE58 STR X30, [X31 - 0x20]!
	0x0321FE5C STP X20, X19, [X31 + 0x10]
	0x0321FE60 CBZ X0, 0x321FEBC
	0x0321FE64 LDR W8, [X0 + 0x10]
	0x0321FE68 MOV W19, W1
	0x0321FE6C MOV X20, X0
	0x0321FE70 CMP W8, 0x1
	0x0321FE74 B.EQ 0x321FE8C
	0x0321FE78 MOV X0, X20
	0x0321FE7C BL 0x32213F8
	0x0321FE80 LDR W8, [X20 + 0x10]
	0x0321FE84 CMP W8, 0x1
	0x0321FE88 B.NE 0x321FEAC
	0x0321FE8C LDR X8, [X20 + 0x18]
	0x0321FE90 CBZ X8, 0x321FEBC
	0x0321FE94 LDR W9, [X8 + 0x18]
	0x0321FE98 CBZ W9, 0x321FEC0
	0x0321FE9C LDR W8, [X8 + 0x20]
	0x0321FEA0 CMP W8, W19
	0x0321FEA4 CSET W0, EQ
	0x0321FEA8 B 0x321FEB0
	0x0321FEAC MOV W0, W31
	0x0321FEB0 LDP X20, X19, [X31 + 0x10]
	0x0321FEB4 LDR X30, [X31], #0x20
	0x0321FEB8 RET
	0x0321FEBC BL 0x1C16F20
	0x0321FEC0 BL 0x1C16F28
	0x0321FEC4 STR X30, [X31 - 0x10]!
	0x0321FEC8 BL 0x32214D8
	0x0321FECC ORN W8, W31, W0, 0x0
	0x0321FED0 UBFM W0, W8, 0x1F, 0x1F
	0x0321FED4 LDR X30, [X31], #0x10
	0x0321FED8 RET
	0x0321FEDC STR X30, [X31 - 0x10]!
	0x0321FEE0 CBZ X2, 0x321FF74
	0x0321FEE4 LDR W8, [X2 + 0x18]
	0x0321FEE8 CBZ W8, 0x321FF68
	0x0321FEEC CBZ X1, 0x321FF74
	0x0321FEF0 LDR W10, [X1 + 0x18]
	0x0321FEF4 SUB W8, W8, 0x1
	0x0321FEF8 SXTW X9, W8
	0x0321FEFC CMP W9, W10
	0x0321FF00 B.CS 0x321FF68
	0x0321FF04 ADD X8, X2, X9
	0x0321FF08 LDRB W8, [X8 + 0x20]
	0x0321FF0C ADD X9, X1, X9
	0x0321FF10 ADD W8, W8, W3
	0x0321FF14 STRB W8, [X9 + 0x20]
	0x0321FF18 LDR X10, [X2 + 0x18]
	0x0321FF1C SUBS W9, W10, 0x2
	0x0321FF20 B.MI 0x321FF6C
	0x0321FF24 AND X10, X10, 0x0
	0x0321FF28 CMP X10, W9, UXTW
	0x0321FF2C B.LS 0x321FF68
	0x0321FF30 MOV W9, W9
	0x0321FF34 ADD X10, X1, 0x20
	0x0321FF38 ADD X11, X2, 0x20
	0x0321FF3C LDR W12, [X1 + 0x18]
	0x0321FF40 CMP X9, X12
	0x0321FF44 B.CS 0x321FF68
	0x0321FF48 LDRB W12, [X11, X9, LSL]
	0x0321FF4C ADD W8, W12, W8, 0x8, LSR
	0x0321FF50 STRB W8, [X10, X9, LSL]
	0x0321FF54 SUBS X9, X9, 0x1
	0x0321FF58 B.LT 0x321FF6C
	0x0321FF5C LDR W12, [X2 + 0x18]
	0x0321FF60 CMP X9, X12
	0x0321FF64 B.CC 0x321FF3C
	0x0321FF68 BL 0x1C16F28
	0x0321FF6C LDR X30, [X31], #0x10
	0x0321FF70 RET
	0x0321FF74 BL 0x1C16F20
	0x0321FF78 STP X30, X19, [X31 - 0x10]!
	0x0321FF7C MOV X19, X0
	0x0321FF80 LDR X0, [X0 + 0x68]
	0x0321FF84 CBNZ X0, 0x321FF90
	0x0321FF88 BL 0x3256158
	0x0321FF8C STR X0, [X19 + 0x68]
	0x0321FF90 LDP X30, X19, [X31], #0x10
	0x0321FF94 RET
	0x0321FF98 STR X30, [X31 - 0x30]!
	0x0321FF9C STP X22, X21, [X31 + 0x10]
	0x0321FFA0 STP X20, X19, [X31 + 0x20]
	0x0321FFA4 ADRP X20, 0x11BD000
	0x0321FFA8 ADRP X21, 0xF02000
	0x0321FFAC LDRB W8, [X20 + 0x32F]
	0x0321FFB0 LDR X21, [X21 + 0xD90]
	0x0321FFB4 MOV X19, X0
	0x0321FFB8 TBNZ X8, 0x0, 0x321FFD0
	0x0321FFBC ADRP X0, 0xF02000
	0x0321FFC0 LDR X0, [X0 + 0xD90]
	0x0321FFC4 BL 0x1C16CF4
	0x0321FFC8 MOVZ W8, 0x1
	0x0321FFCC STRB W8, [X20 + 0x32F]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+80], X22
	004 Move [X31+88], X21
	005 Move [X31+96], X20
	006 Move [X31+104], X19
	007 Move X0, 0xF03000
	008 Move X0, [X0+3728]
	009 Move W20, W3
	010 Move W21, W2
	011 Move W19, W1
	012 Call 0x1C17D08
	013 Move X1, X31
	014 Call Locale.GetText, X0
	015 Move X22, X0
	016 Move [X31+76], W19
	017 Move X0, 0xF03000
	018 Move X0, [X0+3736]
	019 Call 0x1C17D08
	020 Add X1, X31, 76
	021 Call 0x1C17E04
	022 Move X1, X0
	023 NotImplemented "Instruction MOVI not yet implemented."
	024 Add X0, X31, 32
	025 Move X2, X31
	026 Move [X31+32], V0
	027 Move [X31+40], V0
	028 Call ParamsArray..ctor, X0, X1
	029 Move V0, [X31+32]
	030 Move V1, [X31+48]
	031 Add X2, X31, 0
	032 Move X0, X31
	033 Move X1, X22
	034 Move [X31], V0
	035 Move [X31+8], V1
	036 Call String.FormatHelper, X0, X1, X2
	037 Move X19, X0
	038 Move TEMP, X21
	039 And TEMP, TEMP, -2147483648
	040 Compare TEMP, -2147483648
	041 JumpIfEqual {73}
	042 Move X0, 0xF03000
	043 Move X0, [X0+3744]
	044 Call 0x1C17D08
	045 Move X1, X31
	046 Call Locale.GetText, X0
	047 Move X22, X0
	048 Move [X31+76], W21
	049 Move X0, 0xED5000
	050 Move X0, [X0+1880]
	051 Call 0x1C17D08
	052 Add X1, X31, 76
	053 Call 0x1C17E04
	054 Move X1, X0
	055 NotImplemented "Instruction MOVI not yet implemented."
	056 Add X0, X31, 32
	057 Move X2, X31
	058 Move [X31+32], V0
	059 Move [X31+40], V0
	060 Call ParamsArray..ctor, X0, X1
	061 Move V0, [X31+32]
	062 Move V1, [X31+48]
	063 Add X2, X31, 0
	064 Move X0, X31
	065 Move X1, X22
	066 Move [X31], V0
	067 Move [X31+8], V1
	068 Call String.FormatHelper, X0, X1, X2
	069 Move X1, X0
	070 Move X0, X19
	071 Call String.Concat, X0, X1
	072 Move X19, X0
	073 Move TEMP, X20
	074 And TEMP, TEMP, -2147483648
	075 Compare TEMP, -2147483648
	076 JumpIfEqual {108}
	077 Move X0, 0xF03000
	078 Move X0, [X0+3752]
	079 Call 0x1C17D08
	080 Move X1, X31
	081 Call Locale.GetText, X0
	082 Move X21, X0
	083 Move [X31+76], W20
	084 Move X0, 0xED5000
	085 Move X0, [X0+1880]
	086 Call 0x1C17D08
	087 Add X1, X31, 76
	088 Call 0x1C17E04
	089 Move X1, X0
	090 NotImplemented "Instruction MOVI not yet implemented."
	091 Add X0, X31, 32
	092 Move X2, X31
	093 Move [X31+32], V0
	094 Move [X31+40], V0
	095 Call ParamsArray..ctor, X0, X1
	096 Move V0, [X31+32]
	097 Move V1, [X31+48]
	098 Add X2, X31, 0
	099 Move X0, X31
	100 Move X1, X21
	101 Move [X31], V0
	102 Move [X31+8], V1
	103 Call String.FormatHelper, X0, X1, X2
	104 Move X1, X0
	105 Move X0, X19
	106 Call String.Concat, X0, X1
	107 Move X19, X0
	108 Move X0, 0xF02000
	109 Move X0, [X0+3296]
	110 Call 0x1C17D08
	111 Call 0x1C17F10
	112 Move X1, X19
	113 Move X2, X31
	114 Move X20, X0
	115 Call CryptographicException..ctor, X0, X1
	116 Move X0, 0xF03000
	117 Move X0, [X0+3760]
	118 Call 0x1C17D08
	119 Move X1, X0
	120 Move X0, X20
	121 Call 0x1C17DEC

Method: System.Byte[] FinalEncrypt(System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount)

Disassembly:
	0x03220014 BL 0x32214D8
	0x03220018 CMP W0, 0x1
	0x0322001C B.LT 0x3220098
	0x03220020 MOV X20, X31
	0x03220024 LDR X0, [X21]
	0x03220028 LDR W8, [X0 + 0xE0]
	0x0322002C CBNZ W8, 0x3220038
	0x03220030 BL 0x1C16DFC
	0x03220034 LDR X0, [X21]
	0x03220038 LDR X8, [X0 + 0xB8]
	0x0322003C LDR X8, [X8]
	0x03220040 CBZ X8, 0x3220138
	0x03220044 LDRSW X9, [X8 + 0x18]
	0x03220048 CMP X20, X9
	0x0322004C B.GE 0x3220120
	0x03220050 LDR W9, [X0 + 0xE0]
	0x03220054 CBNZ W9, 0x322006C
	0x03220058 BL 0x1C16DFC
	0x0322005C LDR X8, [X21]
	0x03220060 LDR X8, [X8 + 0xB8]
	0x03220064 LDR X8, [X8]
	0x03220068 CBZ X8, 0x3220138
	0x0322006C LDR W9, [X8 + 0x18]
	0x03220070 CMP X20, X9
	0x03220074 B.CS 0x322013C
	0x03220078 ADD X8, X8, X20, 0x2, LSL
	0x0322007C LDR W1, [X8 + 0x20]
	0x03220080 MOV X0, X19
	0x03220084 BL 0x32217E0
	0x03220088 ADD X20, X20, 0x1
	0x0322008C CBNZ W0, 0x3220024
	0x03220090 MOV W20, W31
	0x03220094 B 0x322010C
	0x03220098 MOV X22, X31
	0x0322009C LDR X0, [X21]
	0x032200A0 LDR W8, [X0 + 0xE0]
	0x032200A4 CBNZ W8, 0x32200B0
	0x032200A8 BL 0x1C16DFC
	0x032200AC LDR X0, [X21]
	0x032200B0 LDR X8, [X0 + 0xB8]
	0x032200B4 LDR X8, [X8]
	0x032200B8 CBZ X8, 0x3220138
	0x032200BC LDRSW X9, [X8 + 0x18]
	0x032200C0 CMP X22, X9
	0x032200C4 CSET W20, LT
	0x032200C8 B.GE 0x322010C
	0x032200CC LDR W9, [X0 + 0xE0]
	0x032200D0 CBNZ W9, 0x32200E8
	0x032200D4 BL 0x1C16DFC
	0x032200D8 LDR X8, [X21]
	0x032200DC LDR X8, [X8 + 0xB8]
	0x032200E0 LDR X8, [X8]
	0x032200E4 CBZ X8, 0x3220138
	0x032200E8 LDR W9, [X8 + 0x18]
	0x032200EC CMP X22, X9
	0x032200F0 B.CS 0x322013C
	0x032200F4 ADD X8, X8, X22, 0x2, LSL
	0x032200F8 LDR W1, [X8 + 0x20]
	0x032200FC MOV X0, X19
	0x03220100 BL 0x321FE58
	0x03220104 ADD X22, X22, 0x1
	0x03220108 TBZ X0, 0x0, 0x322009C
	0x0322010C MOV W0, W20
	0x03220110 LDP X20, X19, [X31 + 0x20]
	0x03220114 LDP X22, X21, [X31 + 0x10]
	0x03220118 LDR X30, [X31], #0x30
	0x0322011C RET
	0x03220120 MOV X0, X19
	0x03220124 LDP X20, X19, [X31 + 0x20]
	0x03220128 LDP X22, X21, [X31 + 0x10]
	0x0322012C MOVZ W1, 0x2
	0x03220130 LDR X30, [X31], #0x30
	0x03220134 B 0x32232D0
	0x03220138 BL 0x1C16F20
	0x0322013C BL 0x1C16F28
	0x03220140 STP X30, X21, [X31 - 0x20]!
	0x03220144 STP X20, X19, [X31 + 0x10]
	0x03220148 ADRP X21, 0x11BC000
	0x0322014C LDRB W8, [X21 + 0x321]
	0x03220150 MOV W20, W1
	0x03220154 MOV X19, X0
	0x03220158 TBNZ X8, 0x0, 0x3220170
	0x0322015C ADRP X0, 0xF01000
	0x03220160 LDR X0, [X0 + 0xD90]
	0x03220164 BL 0x1C16CF4
	0x03220168 MOVZ W8, 0x1
	0x0322016C STRB W8, [X21 + 0x321]
	0x03220170 TBNZ X20, 0x1F, 0x32201E8
	0x03220174 CMP W20, 0x1
	0x03220178 B.EQ 0x32201A8
	0x0322017C CBNZ W20, 0x32201D4
	0x03220180 ADRP X8, 0xF01000
	0x03220184 LDR X8, [X8 + 0xD90]
	0x03220188 LDR X0, [X8]
	0x0322018C LDR W8, [X0 + 0xE0]
	0x03220190 CBNZ W8, 0x3220198
	0x03220194 BL 0x1C16DFC
	0x03220198 LDP X20, X19, [X31 + 0x10]
	0x0322019C MOV W0, W31
	0x032201A0 LDP X30, X21, [X31], #0x20
	0x032201A4 B 0x321C2D0
	0x032201A8 ADRP X8, 0xF01000
	0x032201AC LDR X8, [X8 + 0xD90]
	0x032201B0 LDR X0, [X8]
	0x032201B4 BL 0x1C16F10
	0x032201B8 MOV X1, X19
	0x032201BC MOV X20, X0
	0x032201C0 BL 0x3221264
	0x032201C4 MOV X0, X20
	0x032201C8 LDP X20, X19, [X31 + 0x10]
	0x032201CC LDP X30, X21, [X31], #0x20
	0x032201D0 RET
	0x032201D4 MOV X0, X19
	0x032201D8 MOV W1, W20
	0x032201DC LDP X20, X19, [X31 + 0x10]
	0x032201E0 LDP X30, X21, [X31], #0x20
	0x032201E4 B 0x3221DA8
	0x032201E8 ADRP X0, 0xF01000
	0x032201EC LDR X0, [X0 + 0x560]
	0x032201F0 BL 0x1C16D08
	0x032201F4 BL 0x1C16F10
	0x032201F8 MOV X19, X0
	0x032201FC ADRP X0, 0xF01000
	0x03220200 LDR X0, [X0 + 0x568]
	0x03220204 BL 0x1C16D08
	0x03220208 MOV X1, X0
	0x0322020C MOV X0, X19
	0x03220210 MOV X2, X31
	0x03220214 BL 0x3316338
	0x03220218 ADRP X0, 0xF01000
	0x0322021C LDR X0, [X0 + 0xED0]
	0x03220220 BL 0x1C16D08
	0x03220224 MOV X1, X0
	0x03220228 MOV X0, X19
	0x0322022C BL 0x1C16DEC
	0x03220230 STR X30, [X31 - 0x10]!
	0x03220234 LDR X8, [X0 + 0x18]
	0x03220238 CBZ X8, 0x3220264
	0x0322023C LDR W10, [X8 + 0x18]
	0x03220240 UBFM W9, W1, 0x5, 0x1F
	0x03220244 CMP W9, W10
	0x03220248 B.CS 0x3220268
	0x0322024C ADD X8, X8, W9, 0x2, UXTW
	0x03220250 LDR W8, [X8 + 0x20]
	0x03220254 LSRV W8, W8, W1
	0x03220258 AND W0, W8, 0x1
	0x0322025C LDR X30, [X31], #0x10
	0x03220260 RET
	0x03220264 BL 0x1C16F20
	0x03220268 BL 0x1C16F28
	0x0322026C STR X30, [X31 - 0x10]!
	0x03220270 BL 0x3221844
	0x03220274 CBZ X0, 0x322028C
	0x03220278 LDR W8, [X0 + 0x18]
	0x0322027C CBZ W8, 0x3220290
	0x03220280 LDR X0, [X0 + 0x20]
	0x03220284 LDR X30, [X31], #0x10
	0x03220288 RET
	0x0322028C BL 0x1C16F20
	0x03220290 BL 0x1C16F28
	0x03220294 STR X30, [X31 - 0x10]!
	0x03220298 BL 0x32214D8
	0x0322029C CMP W0, 0x1
	0x032202A0 CSET W0, LT
	0x032202A4 LDR X30, [X31], #0x10

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0x11BD000
	012 Move W8, [X20+779]
	013 Move W24, W3
	014 Move W21, W2
	015 Move X23, X1
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xED4000
	022 Move X0, [X0+1560]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+779], W8
	026 Move W8, [X19+28]
	027 Move W9, [X19+64]
	028 Move X27, 0xED4000
	029 Move X27, [X27+1560]
	030 NotImplemented "Instruction SDIV not yet implemented."
	031 Multiply W20, W10, W8
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Subtract W22, W24, W20
	034 Move W10, 1
	035 NotImplemented "Instruction LSLV not yet implemented."
	036 Move W11, 52
	037 And W31, W10, W11
	038 Add W25, W20, W8
	039 Move X0, [X27]
	040 Move W1, W25
	041 Call 0x1C17D6C
	042 Move W3, [X19+28]
	043 Move X24, X0
	044 Move W26, W31
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X0, X19
	047 Move X1, X23
	048 Move W2, W21
	049 Move X4, X24
	050 Move W5, W26
	051 Call SymmetricTransform.InternalTransformBlock, X0, X1, X2, X3, X4, X5
	052 Move W3, [X19+28]
	053 Subtract W25, W25, W3
	054 Add W21, W3, W21
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Add W26, W3, W26
	057 Move W9, [X19+64]
	058 Subtract W25, W3, W22
	059 And W8, W25, 255
	060 NotImplemented "Instruction CMP not yet implemented."
	061 NotImplemented "Instruction CMP not yet implemented."
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Compare X24, 0
	064 JumpIfNotEqual {105}
	065 Compare W24, 0
	066 JumpIfEqual {142}
	067 Compare W22, 0
	068 JumpIfEqual {156}
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move X0, [X27]
	071 Add W1, W20, W8
	072 Call 0x1C17D6C
	073 Move X26, X0
	074 Move X0, X23
	075 Move W1, W21
	076 Move X2, X26
	077 Move W3, W31
	078 Move W4, W24
	079 Move X5, X31
	080 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	081 Compare X26, 0
	082 JumpIfEqual {158}
	083 Move W25, [X26+24]
	084 Move W21, W31
	085 Move X23, X26
	086 Compare X24, 0
	087 JumpIfEqual {158}
	088 Move X10, [X24+24]
	089 Subtract W9, W10, 1
	090 Subtract W11, W10, W8
	091 NotImplemented "Instruction CMP not yet implemented."
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Add X10, X24, W9
	094 Move [X10+32], W25
	095 Move X10, [X24+24]
	096 Subtract W9, W9, 1
	097 Compare X24, 0
	098 JumpIfEqual {158}
	099 Move W9, [X24+24]
	100 Subtract W3, W8, 1
	101 Move X0, X19
	102 Move X1, X24
	103 Subtract W2, W9, W8
	104 Call SymmetricTransform.Random, X0, X1, X2, X3
	105 Move X8, [X24+24]
	106 Compare W8, 0
	107 JumpIfEqual {157}
	108 Subtract W8, W8, 1
	109 Add X8, X24, W8
	110 Move [X8+32], W25
	111 Move X0, X23
	112 Move W1, W21
	113 Move X2, X24
	114 Move W3, W20
	115 Move W4, W22
	116 Move X5, X31
	117 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	118 Move W3, [X19+28]
	119 Move X0, X19
	120 Move X1, X24
	121 Move W2, W20
	122 Move X4, X24
	123 Move W5, W20
	124 Move X0, X19
	125 Move X1, X23
	126 Move W2, W21
	127 Move X4, X24
	128 Move W5, W26
	129 Call SymmetricTransform.InternalTransformBlock, X0, X1, X2, X3, X4, X5
	130 Move X0, X24
	131 Move X20, [X31+64]
	132 Move X19, [X31+72]
	133 Move X22, [X31+48]
	134 Move X21, [X31+56]
	135 Move X24, [X31+32]
	136 Move X23, [X31+40]
	137 Move X26, [X31+16]
	138 Move X25, [X31+24]
	139 Move X30, [X31+80]
	140 Move X27, [X31+88]
	141 Return X0
	142 Move X0, [X27]
	143 Move X20, [X31+64]
	144 Move X19, [X31+72]
	145 Move X22, [X31+48]
	146 Move X21, [X31+56]
	147 Move X24, [X31+32]
	148 Move X23, [X31+40]
	149 Move X26, [X31+16]
	150 Move X25, [X31+24]
	151 Move W1, W31
	152 Move X30, [X31+80]
	153 Move X27, [X31+88]
	154 Call 0x1C17D6C
	155 Return X0
	156 Move W25, W20
	157 Call 0x1C17F28
	158 Call 0x1C17F20
	159 Move X0, 0xF01000
	160 Move X0, [X0+3296]
	161 Call 0x1C17D08
	162 Call 0x1C17F10
	163 Move X19, X0
	164 Move X0, 0xF02000
	165 Move X0, [X0+3768]
	166 Call 0x1C17D08
	167 Move X1, X0
	168 Move X0, X19
	169 Move X2, X31
	170 Call CryptographicException..ctor, X0, X1
	171 Move X0, 0xF02000
	172 Move X0, [X0+3776]
	173 Call 0x1C17D08
	174 Move X1, X0
	175 Move X0, X19
	176 Call 0x1C17DEC

Method: System.Byte[] FinalDecrypt(System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount)

Disassembly:
	0x032202A8 RET
	0x032202AC STR X30, [X31 - 0x10]!
	0x032202B0 LDRB W8, [X0 + 0x20]
	0x032202B4 CBZ W8, 0x32202C8
	0x032202B8 LDR X0, [X0 + 0x28]
	0x032202BC CBZ X0, 0x32202D4
	0x032202C0 LDR X30, [X31], #0x10
	0x032202C4 B 0x321C250
	0x032202C8 LDR W0, [X0 + 0x10]
	0x032202CC LDR X30, [X31], #0x10
	0x032202D0 RET
	0x032202D4 BL 0x1C16F20
	0x032202D8 STR X30, [X31 - 0x20]!
	0x032202DC STP X20, X19, [X31 + 0x10]
	0x032202E0 ADRP X20, 0x11BC000
	0x032202E4 LDRB W8, [X20 + 0x310]
	0x032202E8 MOV X19, X0
	0x032202EC TBNZ X8, 0x0, 0x3220304
	0x032202F0 ADRP X0, 0xF01000
	0x032202F4 LDR X0, [X0 + 0xD90]
	0x032202F8 BL 0x1C16CF4
	0x032202FC MOVZ W8, 0x1
	0x03220300 STRB W8, [X20 + 0x310]
	0x03220304 LDRB W8, [X19 + 0x20]
	0x03220308 CBZ W8, 0x322033C
	0x0322030C ADRP X8, 0xF01000
	0x03220310 LDR X8, [X8 + 0xD90]
	0x03220314 LDR X19, [X19 + 0x40]
	0x03220318 LDR X0, [X8]
	0x0322031C LDR W8, [X0 + 0xE0]
	0x03220320 CBNZ W8, 0x3220328
	0x03220324 BL 0x1C16DFC
	0x03220328 MOV X0, X19
	0x0322032C LDP X20, X19, [X31 + 0x10]
	0x03220330 MOV X1, X31
	0x03220334 LDR X30, [X31], #0x20
	0x03220338 B 0x321C64C
	0x0322033C LDP X20, X19, [X31 + 0x10]
	0x03220340 MOV W0, W31
	0x03220344 LDR X30, [X31], #0x20
	0x03220348 RET
	0x0322034C STP X30, X21, [X31 - 0x20]!
	0x03220350 STP X20, X19, [X31 + 0x10]
	0x03220354 ADRP X20, 0x11BC000
	0x03220358 LDRB W8, [X20 + 0x311]
	0x0322035C MOV X19, X1
	0x03220360 TBNZ X8, 0x0, 0x3220378
	0x03220364 ADRP X0, 0xED3000
	0x03220368 LDR X0, [X0 + 0x618]
	0x0322036C BL 0x1C16CF4
	0x03220370 MOVZ W8, 0x1
	0x03220374 STRB W8, [X20 + 0x311]
	0x03220378 CBZ X19, 0x32203EC
	0x0322037C LDR W8, [X19 + 0x18]
	0x03220380 ADD W9, W8, 0x3
	0x03220384 CMP W8, 0x0
	0x03220388 CSEL W9, W9, W8, LT
	0x0322038C AND W9, W9, 0xFFFFFFFC
	0x03220390 SUB W21, W8, W9
	0x03220394 CMP W21, 0x1
	0x03220398 B.LT 0x32203DC
	0x0322039C ADRP X9, 0xED3000
	0x032203A0 LDR X9, [X9 + 0x618]
	0x032203A4 SUB W8, W8, W21
	0x032203A8 ADD W1, W8, 0x4
	0x032203AC LDR X0, [X9]
	0x032203B0 BL 0x1C16D6C
	0x032203B4 LDR W4, [X19 + 0x18]
	0x032203B8 MOV X20, X0
	0x032203BC MOVZ W8, 0x4
	0x032203C0 SUB W3, W8, W21
	0x032203C4 MOV X0, X19
	0x032203C8 MOV W1, W31
	0x032203CC MOV X2, X20
	0x032203D0 MOV X5, X31
	0x032203D4 BL 0x339FCE8
	0x032203D8 MOV X19, X20
	0x032203DC MOV X0, X19
	0x032203E0 LDP X20, X19, [X31 + 0x10]
	0x032203E4 LDP X30, X21, [X31], #0x20
	0x032203E8 RET
	0x032203EC BL 0x1C16F20
	0x032203F0 STR X30, [X31 - 0x60]!
	0x032203F4 STP X28, X27, [X31 + 0x10]
	0x032203F8 STP X26, X25, [X31 + 0x20]
	0x032203FC STP X24, X23, [X31 + 0x30]
	0x03220400 STP X22, X21, [X31 + 0x40]
	0x03220404 STP X20, X19, [X31 + 0x50]
	0x03220408 ADRP X22, 0x11BC000
	0x0322040C LDRB W9, [X22 + 0x312]
	0x03220410 MOV W21, W1
	0x03220414 MOV X20, X0
	0x03220418 MOV X19, X8
	0x0322041C TBNZ X9, 0x0, 0x3220434
	0x03220420 ADRP X0, 0xF01000
	0x03220424 LDR X0, [X0 + 0xD90]
	0x03220428 BL 0x1C16CF4
	0x0322042C MOVZ W8, 0x1
	0x03220430 STRB W8, [X22 + 0x312]
	0x03220434 LDRB W8, [X20 + 0x21]
	0x03220438 CBNZ W8, 0x32205C4
	0x0322043C LDRB W8, [X20 + 0x20]
	0x03220440 CBNZ W8, 0x322044C
	0x03220444 MOV X0, X20
	0x03220448 BL 0x321F74C
	0x0322044C ADRP X27, 0xF01000
	0x03220450 LDR X27, [X27 + 0xD90]
	0x03220454 TBZ X21, 0x0, 0x322047C
	0x03220458 LDR X0, [X27]
	0x0322045C LDR X22, [X20 + 0x40]
	0x03220460 LDR W8, [X0 + 0xE0]
	0x03220464 CBNZ W8, 0x322046C
	0x03220468 BL 0x1C16DFC
	0x0322046C MOV X0, X22
	0x03220470 MOV X1, X31
	0x03220474 BL 0x321C64C
	0x03220478 TBNZ X0, 0x0, 0x3220614
	0x0322047C LDR X0, [X20 + 0x28]
	0x03220480 CBZ X0, 0x32205C0
	0x03220484 BL 0x321CEB4
	0x03220488 MOV X1, X0
	0x0322048C BL 0x322034C
	0x03220490 LDR X8, [X20 + 0x30]
	0x03220494 CBZ X8, 0x32205C0
	0x03220498 MOV X22, X0
	0x0322049C MOV X0, X8
	0x032204A0 BL 0x321CEB4
	0x032204A4 MOV X1, X0
	0x032204A8 BL 0x322034C
	0x032204AC LDR X8, [X20 + 0x38]
	0x032204B0 CBZ X8, 0x32205C0
	0x032204B4 MOV X23, X0
	0x032204B8 MOV X0, X8
	0x032204BC BL 0x321CEB4
	0x032204C0 MOV X1, X0
	0x032204C4 BL 0x322034C
	0x032204C8 LDR X8, [X20 + 0x48]
	0x032204CC CBZ X8, 0x32205C0
	0x032204D0 MOV X24, X0
	0x032204D4 MOV X0, X8
	0x032204D8 BL 0x321CEB4
	0x032204DC MOV X1, X0
	0x032204E0 BL 0x322034C
	0x032204E4 LDRB W8, [X20 + 0x64]
	0x032204E8 MOV X25, X0
	0x032204EC CBZ W8, 0x32204F8
	0x032204F0 MOV X26, X31
	0x032204F4 B 0x3220510
	0x032204F8 LDR X0, [X20 + 0x50]
	0x032204FC CBZ X0, 0x32205C0
	0x03220500 BL 0x321CEB4
	0x03220504 MOV X1, X0
	0x03220508 BL 0x322034C
	0x0322050C MOV X26, X0
	0x03220510 LDR X0, [X27]
	0x03220514 LDR X27, [X20 + 0x58]
	0x03220518 LDR W8, [X0 + 0xE0]
	0x0322051C CBNZ W8, 0x3220524
	0x03220520 BL 0x1C16DFC
	0x03220524 MOV X0, X27
	0x03220528 MOV W1, W31
	0x0322052C BL 0x322065C
	0x03220530 TBZ X0, 0x0, 0x3220558
	0x03220534 LDR X0, [X20 + 0x58]
	0x03220538 CBZ X0, 0x32205C0
	0x0322053C BL 0x321CEB4

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X19, 0x11BD000
	011 Move W8, [X19+780]
	012 Move W22, W3
	013 Move W23, W2
	014 Move X24, X1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xED4000
	021 Move X0, [X0+1560]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X19+780], W8
	025 Move X26, 0xED4000
	026 Move W8, [X21+73]
	027 Move X26, [X26+1560]
	028 Move W19, W22
	029 Compare W8, 0
	030 JumpIfEqual {33}
	031 Move W8, [X21+28]
	032 Add W19, W8, W22
	033 Move X0, [X26]
	034 Move W1, W19
	035 Call 0x1C17D6C
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X20, X0
	038 Move W3, [X21+28]
	039 Move W25, W31
	040 Move X0, X21
	041 Move X1, X24
	042 Move W2, W23
	043 Move X4, X20
	044 Move W5, W25
	045 Call SymmetricTransform.InternalTransformBlock, X0, X1, X2, X3, X4, X5
	046 Move W3, [X21+28]
	047 Add W25, W0, W25
	048 Subtract W22, W22, W3
	049 Add W23, W3, W23
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move W25, W31
	052 Move W8, [X21+73]
	053 Compare W8, 0
	054 JumpIfEqual {70}
	055 Move X8, [X21]
	056 Move X1, [X21+48]
	057 Move X2, [X21+56]
	058 Move X0, X21
	059 Move X9, [X8+536]
	060 Move X3, [X8+544]
	061 NotImplemented "Instruction BLR not yet implemented."
	062 Move X0, [X21+56]
	063 Move W4, [X21+28]
	064 Move W1, W31
	065 Move X2, X20
	066 Move W3, W25
	067 Move X5, X31
	068 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	069 Move [X21+73], W31
	070 Subtract W8, W19, 1
	071 Compare X20, 0
	072 JumpIfEqual {168}
	073 Move W9, [X20+24]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Add X8, X20, W8
	076 Move W2, [X8+32]
	077 Move W2, W31
	078 Move W8, [X21+64]
	079 NotImplemented "Instruction CMP not yet implemented."
	080 NotImplemented "Instruction CMP not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Compare W2, 0
	083 JumpIfEqual {172}
	084 Move W8, [X21+28]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Subtract W19, W19, W2
	087 Move W3, W2
	088 Move W8, W19
	089 Subtract X3, X3, 1
	090 Compare X20, 0
	091 JumpIfEqual {168}
	092 Move W9, [X20+24]
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Add X9, X20, W8
	095 Move W9, [X9+32]
	096 Add W8, W8, 1
	097 Compare W9, 0
	098 JumpIfEqual {89}
	099 Move W1, 4
	100 Compare W2, 0
	101 JumpIfEqual {170}
	102 Move W8, [X21+28]
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Subtract W19, W19, W2
	105 Move W3, W2
	106 Move W8, W19
	107 Subtract X3, X3, 1
	108 Compare X20, 0
	109 JumpIfEqual {168}
	110 Move W9, [X20+24]
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Add X9, X20, W8
	113 Move W9, [X9+32]
	114 Add W8, W8, 1
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move W1, 2
	117 Move TEMP, 0
	118 Not TEMP
	119 Move W2, TEMP
	120 Call SymmetricTransform.ThrowBadPaddingException, X0, X1, X2, X3
	121 Compare W2, 0
	122 JumpIfEqual {171}
	123 Move W8, [X21+28]
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Subtract W19, W19, W2
	126 Move X0, [X26]
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move W1, W19
	129 Call 0x1C17D6C
	130 Move X21, X0
	131 Move X0, X20
	132 Move W1, W31
	133 Move X2, X21
	134 Move W3, W31
	135 Move W4, W19
	136 Move X5, X31
	137 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	138 Compare X20, 0
	139 JumpIfEqual {168}
	140 Move W2, [X20+24]
	141 Move X0, X20
	142 Move W1, W31
	143 Move X3, X31
	144 Call Array.Clear, X0, X1, X2
	145 Move X0, X21
	146 Move X20, [X31+64]
	147 Move X19, [X31+72]
	148 Move X22, [X31+48]
	149 Move X21, [X31+56]
	150 Move X24, [X31+32]
	151 Move X23, [X31+40]
	152 Move X26, [X31+16]
	153 Move X25, [X31+24]
	154 Move X30, [X31+80]
	155 Return X0
	156 Move X20, [X31+64]
	157 Move X19, [X31+72]
	158 Move X22, [X31+48]
	159 Move X21, [X31+56]
	160 Move X24, [X31+32]
	161 Move X23, [X31+40]
	162 Move X26, [X31+16]
	163 Move X25, [X31+24]
	164 Move W1, W31
	165 Move X30, [X31+80]
	166 Call 0x1C17D6C
	167 Return X0
	168 Call 0x1C17F20
	169 Call 0x1C17F28
	170 Move W1, 2
	171 Move W1, 5
	172 Move W1, 4
	173 Move TEMP, 0
	174 Not TEMP
	175 Move W3, TEMP
	176 Call SymmetricTransform.ThrowBadPaddingException, X0, X1, X2, X3

Method: System.Byte[] TransformFinalBlock(System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount)

Disassembly:
	0x03220540 MOV X1, X0
	0x03220544 BL 0x322034C
	0x03220548 LDR W28, [X20 + 0x60]
	0x0322054C MOV X27, X0
	0x03220550 TBNZ X21, 0x0, 0x3220564
	0x03220554 B 0x322058C
	0x03220558 MOV X27, X31
	0x0322055C MOV W28, W31
	0x03220560 TBZ X21, 0x0, 0x322058C
	0x03220564 LDR X0, [X20 + 0x40]
	0x03220568 CBZ X0, 0x32205C0
	0x0322056C BL 0x321CEB4
	0x03220570 CBZ X0, 0x32205C0
	0x03220574 LDR W8, [X0 + 0x18]
	0x03220578 CMP W8, 0x14
	0x0322057C B.NE 0x322058C
	0x03220580 MOV X1, X0
	0x03220584 BL 0x322034C
	0x03220588 B 0x3220590
	0x0322058C MOV X0, X31
	0x03220590 STP X22, X23, [X19]
	0x03220594 STP X24, X25, [X19 + 0x10]
	0x03220598 STP X26, X0, [X19 + 0x20]
	0x0322059C STR X27, [X19 + 0x30]
	0x032205A0 STP W28, W31, [X19 + 0x38]
	0x032205A4 LDP X20, X19, [X31 + 0x50]
	0x032205A8 LDP X22, X21, [X31 + 0x40]
	0x032205AC LDP X24, X23, [X31 + 0x30]
	0x032205B0 LDP X26, X25, [X31 + 0x20]
	0x032205B4 LDP X28, X27, [X31 + 0x10]
	0x032205B8 LDR X30, [X31], #0x60
	0x032205BC RET
	0x032205C0 BL 0x1C16F20
	0x032205C4 ADRP X0, 0xF01000
	0x032205C8 LDR X0, [X0 + 0x578]
	0x032205CC BL 0x1C16D08
	0x032205D0 MOV X1, X31
	0x032205D4 BL 0x320A160
	0x032205D8 MOV X19, X0
	0x032205DC ADRP X0, 0xEFC000
	0x032205E0 LDR X0, [X0 + 0x4B8]
	0x032205E4 BL 0x1C16D08
	0x032205E8 BL 0x1C16F10
	0x032205EC MOV X1, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W8, [X0+72]
	007 Compare W8, 0
	008 JumpIfNotEqual {32}
	009 Move W19, W3
	010 Move W20, W2
	011 Move X22, X0
	012 Move X21, X1
	013 Call SymmetricTransform.CheckInput, X0, X1, X2, X3
	014 Move W9, [X22+24]
	015 Move X8, [X22]
	016 Compare W9, 0
	017 JumpIfEqual {20}
	018 Move X5, [X8+648]
	019 Move X4, [X8+656]
	020 Move X5, [X8+664]
	021 Move X4, [X8+672]
	022 Move X0, X22
	023 Move X1, X21
	024 Move W2, W20
	025 Move W3, W19
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X22, [X31+16]
	029 Move X21, [X31+24]
	030 Move X30, [X31+48]
	031 CallNoReturn X5
	032 Move X0, 0xEFD000
	033 Move X0, [X0+1208]
	034 Call 0x1C17D08
	035 Call 0x1C17F10
	036 Move X19, X0
	037 Move X0, 0xF02000
	038 Move X0, [X0+3696]
	039 Call 0x1C17D08
	040 Move X1, X0
	041 Move X0, X19
	042 Move X2, X31
	043 Call ObjectDisposedException..ctor, X0, X1
	044 Move X0, 0xF02000
	045 Move X0, [X0+3784]
	046 Call 0x1C17D08
	047 Move X1, X0
	048 Move X0, X19
	049 Call 0x1C17DEC

