Type: Mono.Math.BigInteger

Method: System.Void .ctor(Mono.Math.BigInteger/Sign sign, System.UInt32 len)

Disassembly:
	0x032221F0 RET
	0x032221F4 BL 0x1C16F28
	0x032221F8 BL 0x1C16F20
	0x032221FC STR X30, [X31 - 0x20]!
	0x03222200 STP X20, X19, [X31 + 0x10]
	0x03222204 ADRP X19, 0x11BA000
	0x03222208 ADRP X20, 0xEFF000
	0x0322220C LDRB W8, [X19 + 0x322]
	0x03222210 LDR X20, [X20 + 0xD90]
	0x03222214 TBNZ X8, 0x0, 0x322222C
	0x03222218 ADRP X0, 0xEFF000
	0x0322221C LDR X0, [X0 + 0xD90]
	0x03222220 BL 0x1C16CF4
	0x03222224 MOVZ W8, 0x1
	0x03222228 STRB W8, [X19 + 0x322]
	0x0322222C LDR X8, [X20]
	0x03222230 LDR W9, [X8 + 0xE0]
	0x03222234 CBNZ W9, 0x3222244
	0x03222238 MOV X0, X8
	0x0322223C BL 0x1C16DFC
	0x03222240 LDR X8, [X20]
	0x03222244 LDR X9, [X8 + 0xB8]
	0x03222248 LDR X9, [X9 + 0x8]
	0x0322224C CBNZ X9, 0x322227C
	0x03222250 MOV X0, X31
	0x03222254 BL 0x3256158
	0x03222258 LDR X8, [X20]
	0x0322225C MOV X19, X0
	0x03222260 LDR W9, [X8 + 0xE0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11BB000
	007 Move X21, 0xEFB000
	008 Move W8, [X22+792]
	009 Move X21, [X21+3336]
	010 Move W19, W2
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEFB000
	017 Move X0, [X0+3336]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+792], W8
	021 Move W8, 1
	022 Move X0, X20
	023 Move X1, X31
	024 Move [X20+16], W8
	025 Call Object..ctor, X0
	026 Move X0, [X21]
	027 Move W1, W19
	028 Call 0x1C17D6C
	029 Move [X20+24], X0
	030 Move [X20+16], W19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Return 

Method: System.Void .ctor(Mono.Math.BigInteger bi)

Disassembly:
	0x03222264 CBNZ W9, 0x3222274
	0x03222268 MOV X0, X8
	0x0322226C BL 0x1C16DFC
	0x03222270 LDR X8, [X20]
	0x03222274 LDR X9, [X8 + 0xB8]
	0x03222278 STR X19, [X9 + 0x8]
	0x0322227C LDR W9, [X8 + 0xE0]
	0x03222280 CBNZ W9, 0x3222290
	0x03222284 MOV X0, X8
	0x03222288 BL 0x1C16DFC
	0x0322228C LDR X8, [X20]
	0x03222290 LDR X8, [X8 + 0xB8]
	0x03222294 LDP X20, X19, [X31 + 0x10]
	0x03222298 LDR X0, [X8 + 0x8]
	0x0322229C LDR X30, [X31], #0x20
	0x032222A0 RET
	0x032222A4 STR X30, [X31 - 0x40]!
	0x032222A8 STP X24, X23, [X31 + 0x10]
	0x032222AC STP X22, X21, [X31 + 0x20]
	0x032222B0 STP X20, X19, [X31 + 0x30]
	0x032222B4 ADRP X23, 0x11BA000
	0x032222B8 ADRP X22, 0xEFF000
	0x032222BC ADRP X21, 0xED1000
	0x032222C0 LDRB W8, [X23 + 0x323]
	0x032222C4 LDR X22, [X22 + 0xD90]
	0x032222C8 LDR X21, [X21 + 0x618]
	0x032222CC MOV X20, X1
	0x032222D0 MOV W19, W0
	0x032222D4 TBNZ X8, 0x0, 0x32222F8
	0x032222D8 ADRP X0, 0xEFF000
	0x032222DC LDR X0, [X0 + 0xD90]
	0x032222E0 BL 0x1C16CF4
	0x032222E4 ADRP X0, 0xED1000
	0x032222E8 LDR X0, [X0 + 0x618]
	0x032222EC BL 0x1C16CF4
	0x032222F0 MOVZ W8, 0x1
	0x032222F4 STRB W8, [X23 + 0x323]
	0x032222F8 LDR X0, [X22]
	0x032222FC SBFM W8, W19, 0x5, 0x1F
	0x03222300 ANDS W23, W19, 0x1F
	0x03222304 CINC W24, W8, NE
	0x03222308 BL 0x1C16F10
	0x0322230C ADD W2, W24, 0x1
	0x03222310 MOV X19, X0
	0x03222314 BL 0x32211F0
	0x03222318 LDR X0, [X21]
	0x0322231C UBFM W21, W24, 0x1E, 0x1D
	0x03222320 MOV W1, W21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x11BB000
	008 Move W8, [X21+793]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xEFB000
	016 Move X0, [X0+3336]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+793], W8
	020 Move W8, 1
	021 Move X0, X20
	022 Move X1, X31
	023 Move [X20+16], W8
	024 Call Object..ctor, X0
	025 Compare X19, 0
	026 JumpIfEqual {62}
	027 Move X0, [X19+24]
	028 Compare X0, 0
	029 JumpIfEqual {62}
	030 Move X1, X31
	031 Call Array.Clone, X0
	032 Compare X0, 0
	033 JumpIfEqual {52}
	034 Move X23, 0xEFB000
	035 Move X23, [X23+3336]
	036 Move X21, X0
	037 Move X22, [X23]
	038 Move X1, X22
	039 Call 0x1C17E00
	040 Compare X0, 0
	041 JumpIfEqual {49}
	042 Move [X20+24], X0
	043 Move X22, [X23]
	044 Move X0, X21
	045 Move X1, X22
	046 Call 0x1C17E00
	047 Compare X0, 0
	048 JumpIfNotEqual {53}
	049 Move X0, X21
	050 Move X1, X22
	051 Call 0x1C181E0
	052 Move [X20+24], X31
	053 Move W8, [X19+16]
	054 Move X22, [X31+16]
	055 Move X21, [X31+24]
	056 Move [X20+16], W8
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X30, [X31+48]
	060 Move X23, [X31+56]
	061 Return 
	062 Call 0x1C17F20

Method: System.Void .ctor(Mono.Math.BigInteger bi, System.UInt32 len)

Disassembly:
	0x03222324 BL 0x1C16D6C
	0x03222328 CBZ X20, 0x32223FC
	0x0322232C LDR X8, [X20]
	0x03222330 MOV X22, X0
	0x03222334 MOV X0, X20
	0x03222338 MOV X1, X22
	0x0322233C LDP X9, X2, [X8 + 0x198]
	0x03222340 BLR X9
	0x03222344 CBZ X19, 0x32223FC
	0x03222348 LDR X2, [X19 + 0x18]
	0x0322234C MOV X0, X22
	0x03222350 MOV W1, W31
	0x03222354 MOV W3, W31
	0x03222358 MOV W4, W21
	0x0322235C MOV X5, X31
	0x03222360 BL 0x33A8A9C
	0x03222364 CBZ W23, 0x32223B0
	0x03222368 LDR X8, [X19 + 0x18]
	0x0322236C CBZ X8, 0x32223FC
	0x03222370 LDR W10, [X8 + 0x18]
	0x03222374 SXTW X9, W24
	0x03222378 SUB X9, X9, 0x1
	0x0322237C CMP W9, W10
	0x03222380 B.CS 0x3222400
	0x03222384 ADD X8, X8, X9, 0x2, LSL
	0x03222388 LDR W9, [X8 + 0x20]
	0x0322238C SUB W10, W23, 0x1
	0x03222390 MOVZ W11, 0x1
	0x03222394 SUB W12, W31, W23
	0x03222398 MOVN W13, 0x0
	0x0322239C LSLV W10, W11, W10
	0x032223A0 ORR W9, W9, W10, 0x0
	0x032223A4 LSRV W10, W13, W12
	0x032223A8 AND W9, W9, W10, 0x0
	0x032223AC B 0x32223D8
	0x032223B0 LDR X8, [X19 + 0x18]
	0x032223B4 CBZ X8, 0x32223FC
	0x032223B8 LDR W10, [X8 + 0x18]
	0x032223BC SXTW X9, W24
	0x032223C0 SUB X9, X9, 0x1
	0x032223C4 CMP W9, W10
	0x032223C8 B.CS 0x3222400
	0x032223CC ADD X8, X8, X9, 0x2, LSL
	0x032223D0 LDR W9, [X8 + 0x20]
	0x032223D4 ORR W9, W9, 0x80000000
	0x032223D8 MOV X0, X19
	0x032223DC STR W9, [X8 + 0x20]
	0x032223E0 BL 0x32213F8
	0x032223E4 MOV X0, X19
	0x032223E8 LDP X20, X19, [X31 + 0x30]
	0x032223EC LDP X22, X21, [X31 + 0x20]
	0x032223F0 LDP X24, X23, [X31 + 0x10]
	0x032223F4 LDR X30, [X31], #0x40

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x11BB000
	008 Move X22, 0xEFB000
	009 Move W8, [X23+794]
	010 Move X22, [X22+3336]
	011 Move W21, W2
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xEFB000
	019 Move X0, [X0+3336]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+794], W8
	023 Move W8, 1
	024 Move X0, X19
	025 Move X1, X31
	026 Move [X19+16], W8
	027 Call Object..ctor, X0
	028 Move X0, [X22]
	029 Move W1, W21
	030 Call 0x1C17D6C
	031 Move [X19+24], X0
	032 Compare X20, 0
	033 JumpIfEqual {62}
	034 Move W12, [X20+16]
	035 Compare W12, 0
	036 JumpIfEqual {54}
	037 Move X9, [X20+24]
	038 Move X8, X31
	039 Add X10, X0, 32
	040 Add X11, X9, 32
	041 Compare X9, 0
	042 JumpIfEqual {62}
	043 Move W12, [X9+24]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Compare X0, 0
	046 JumpIfEqual {62}
	047 Move W12, [X0+24]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move W12, [X11]
	050 Move [X10], W12
	051 Move W12, [X20+16]
	052 Add X8, X8, 1
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move [X19+16], W12
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X22, [X31+16]
	058 Move X21, [X31+24]
	059 Move X30, [X31+48]
	060 Move X23, [X31+56]
	061 Return 
	062 Call 0x1C17F20
	063 Call 0x1C17F28

Method: System.Void .ctor(System.Byte[] inData)

Disassembly:
	0x0321D804 ADRP X0, 0xF04000
	0x0321D808 LDR X0, [X0 + 0x608]
	0x0321D80C BL 0x1C16CF4
	0x0321D810 ADRP X0, 0xF04000
	0x0321D814 LDR X0, [X0 + 0x610]
	0x0321D818 BL 0x1C16CF4
	0x0321D81C ADRP X0, 0xF04000
	0x0321D820 LDR X0, [X0 + 0x618]
	0x0321D824 BL 0x1C16CF4
	0x0321D828 ADRP X0, 0xF04000
	0x0321D82C LDR X0, [X0 + 0x620]
	0x0321D830 BL 0x1C16CF4
	0x0321D834 ADRP X0, 0xF04000
	0x0321D838 LDR X0, [X0 + 0x628]
	0x0321D83C BL 0x1C16CF4
	0x0321D840 ADRP X0, 0xF04000
	0x0321D844 LDR X0, [X0 + 0x630]
	0x0321D848 BL 0x1C16CF4
	0x0321D84C ADRP X0, 0xF04000
	0x0321D850 LDR X0, [X0 + 0x638]
	0x0321D854 BL 0x1C16CF4
	0x0321D858 ADRP X0, 0xF04000
	0x0321D85C LDR X0, [X0 + 0x640]
	0x0321D860 BL 0x1C16CF4
	0x0321D864 ADRP X0, 0xF04000
	0x0321D868 LDR X0, [X0 + 0x648]
	0x0321D86C BL 0x1C16CF4
	0x0321D870 ADRP X0, 0xF04000
	0x0321D874 LDR X0, [X0 + 0x650]
	0x0321D878 BL 0x1C16CF4
	0x0321D87C ADRP X0, 0xF04000
	0x0321D880 LDR X0, [X0 + 0x658]
	0x0321D884 BL 0x1C16CF4
	0x0321D888 MOVZ W8, 0x1
	0x0321D88C STRB W8, [X20 + 0x306]
	0x0321D890 LDR X0, [X21]
	0x0321D894 BL 0x1C16F10
	0x0321D898 MOV X1, X31
	0x0321D89C MOV X25, X0
	0x0321D8A0 BL 0x3231AC4
	0x0321D8A4 LDR X8, [X19]
	0x0321D8A8 AND W1, W26, 0x1
	0x0321D8AC MOV X0, X19
	0x0321D8B0 LDP X9, X2, [X8 + 0x1E8]
	0x0321D8B4 ADD X8, X31, 0x0
	0x0321D8B8 BLR X9
	0x0321D8BC LDP X24, X23, [X31 + 0x10]
	0x0321D8C0 LDP X22, X21, [X31 + 0x20]
	0x0321D8C4 LDP X20, X19, [X31 + 0x30]
	0x0321D8C8 CBZ X25, 0x321DC20
	0x0321D8CC ADRP X8, 0xF04000
	0x0321D8D0 LDR X8, [X8 + 0x630]
	0x0321D8D4 LDP X27, X28, [X31]
	0x0321D8D8 LDR X1, [X8]
	0x0321D8DC MOV X0, X25
	0x0321D8E0 MOV X2, X31
	0x0321D8E4 BL 0x32333E0
	0x0321D8E8 ADRP X8, 0xF04000
	0x0321D8EC LDR X8, [X8 + 0x640]
	0x0321D8F0 LDR X1, [X8]
	0x0321D8F4 MOV X0, X25
	0x0321D8F8 MOV X2, X31
	0x0321D8FC BL 0x32333E0
	0x0321D900 ADRP X29, 0xEDF000
	0x0321D904 LDR X29, [X29 + 0x9E8]
	0x0321D908 LDR X0, [X29]
	0x0321D90C LDR W8, [X0 + 0xE0]
	0x0321D910 CBNZ W8, 0x321D918
	0x0321D914 BL 0x1C16DFC
	0x0321D918 MOV X0, X28
	0x0321D91C MOV X1, X31
	0x0321D920 BL 0x33225A0
	0x0321D924 MOV X1, X0
	0x0321D928 MOV X0, X25
	0x0321D92C MOV X2, X31
	0x0321D930 BL 0x32333E0
	0x0321D934 ADRP X8, 0xF04000
	0x0321D938 LDR X8, [X8 + 0x650]
	0x0321D93C LDR X1, [X8]
	0x0321D940 MOV X0, X25
	0x0321D944 MOV X2, X31
	0x0321D948 BL 0x32333E0
	0x0321D94C ADRP X8, 0xF04000
	0x0321D950 LDR X8, [X8 + 0x5D0]
	0x0321D954 LDR X1, [X8]
	0x0321D958 MOV X0, X25
	0x0321D95C MOV X2, X31
	0x0321D960 BL 0x32333E0
	0x0321D964 MOV X0, X27
	0x0321D968 MOV X1, X31
	0x0321D96C BL 0x33225A0
	0x0321D970 MOV X1, X0
	0x0321D974 MOV X0, X25
	0x0321D978 MOV X2, X31
	0x0321D97C BL 0x32333E0
	0x0321D980 ADRP X8, 0xF04000
	0x0321D984 LDR X8, [X8 + 0x620]
	0x0321D988 LDR X1, [X8]
	0x0321D98C MOV X0, X25
	0x0321D990 MOV X2, X31
	0x0321D994 BL 0x32333E0
	0x0321D998 TBZ X26, 0x0, 0x321DBD8
	0x0321D99C CBZ X24, 0x321D9FC
	0x0321D9A0 ADRP X8, 0xF04000
	0x0321D9A4 LDR X8, [X8 + 0x610]
	0x0321D9A8 LDR X1, [X8]
	0x0321D9AC MOV X0, X25
	0x0321D9B0 MOV X2, X31
	0x0321D9B4 BL 0x32333E0
	0x0321D9B8 LDR X0, [X29]
	0x0321D9BC LDR W8, [X0 + 0xE0]
	0x0321D9C0 CBNZ W8, 0x321D9C8
	0x0321D9C4 BL 0x1C16DFC
	0x0321D9C8 MOV X0, X24
	0x0321D9CC MOV X1, X31
	0x0321D9D0 BL 0x33225A0
	0x0321D9D4 MOV X1, X0
	0x0321D9D8 MOV X0, X25
	0x0321D9DC MOV X2, X31
	0x0321D9E0 BL 0x32333E0
	0x0321D9E4 ADRP X8, 0xF04000
	0x0321D9E8 LDR X8, [X8 + 0x608]
	0x0321D9EC LDR X1, [X8]
	0x0321D9F0 MOV X0, X25
	0x0321D9F4 MOV X2, X31
	0x0321D9F8 BL 0x32333E0
	0x0321D9FC CBZ X23, 0x321DA5C
	0x0321DA00 ADRP X8, 0xF04000
	0x0321DA04 LDR X8, [X8 + 0x648]
	0x0321DA08 LDR X1, [X8]
	0x0321DA0C MOV X0, X25
	0x0321DA10 MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11C0000
	006 Move W8, [X21+795]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xED7000
	014 Move X0, [X0+1560]
	015 Call 0x1C17CF4
	016 Move X0, 0xF00000
	017 Move X0, [X0+3336]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+795], W8
	021 Move W8, 1
	022 Move X0, X19
	023 Move X1, X31
	024 Move [X19+16], W8
	025 Call Object..ctor, X0
	026 Compare X20, 0
	027 JumpIfEqual {138}
	028 Move X8, [X20+24]
	029 Compare X8, 0
	030 JumpIfNotEqual {39}
	031 Move X8, 0xED7000
	032 Move X8, [X8+1560]
	033 Move W1, 1
	034 Move X0, [X8]
	035 Call 0x1C17D6C
	036 Move X20, X0
	037 Compare X0, 0
	038 JumpIfEqual {138}
	039 Move W8, [X20+24]
	040 Move X9, 0xF00000
	041 Move X9, [X9+3336]
	042 Move W10, W8
	043 ShiftRight W10, 2
	044 And W10, W10, 0x7FFFFFFF
	045 And W21, W8, 3
	046 NotImplemented "Instruction CINC not yet implemented."
	047 Move [X19+16], W1
	048 Move X0, [X9]
	049 Call 0x1C17D6C
	050 Move [X19+24], X0
	051 Move X8, [X20+24]
	052 Subtract W11, W8, 1
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X9, X31
	055 And X10, X8, 0
	056 Move W12, W11
	057 Add X11, X0, 32
	058 Subtract X13, X12, 3
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Subtract X13, X12, 2
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Subtract X13, X12, 1
	063 NotImplemented "Instruction CMP not yet implemented."
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Compare X0, 0
	066 JumpIfEqual {138}
	067 Move W13, [X0+24]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Add X13, X20, X12
	070 Move W14, [X13+29]
	071 Move W13, [X13+30]
	072 Add X15, X20, X12
	073 Move W15, [X15+31]
	074 Move W14, W14
	075 ShiftRight W14, 8
	076 And W14, W14, 127
	077 NotImplemented "Instruction BFM not yet implemented."
	078 Add X13, X20, X12
	079 Move W13, [X13+32]
	080 NotImplemented "Instruction BFM not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Subtract X12, X12, 4
	083 Or W13, W14, W13
	084 Move [X11], W13
	085 Add X9, X9, 1
	086 NotImplemented "Instruction CMP not yet implemented."
	087 NotImplemented "Instruction CMP not yet implemented."
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Compare W8, 0
	090 JumpIfEqual {137}
	091 Compare X0, 0
	092 JumpIfEqual {138}
	093 Move W8, [X19+16]
	094 Move W9, [X0+24]
	095 Subtract W8, W8, 1
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Move W9, [X20+32]
	098 Compare W8, 0
	099 JumpIfEqual {137}
	100 NotImplemented "Instruction CMP not yet implemented."
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Compare X0, 0
	103 JumpIfEqual {138}
	104 Move W8, [X19+16]
	105 Move W9, [X0+24]
	106 Subtract W8, W8, 1
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move W9, [X20+32]
	109 Move W10, [X20+33]
	110 Move W11, [X20+34]
	111 Move W9, W9
	112 ShiftRight W9, 16
	113 And W9, W9, 0x7FFF
	114 NotImplemented "Instruction BFM not yet implemented."
	115 Or W9, W9, W11
	116 Compare W8, 0
	117 JumpIfEqual {137}
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Compare X0, 0
	120 JumpIfEqual {138}
	121 Move W8, [X19+16]
	122 Move W9, [X0+24]
	123 Subtract W8, W8, 1
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move W10, [X20+32]
	126 Move W9, [X20+33]
	127 NotImplemented "Instruction BFM not yet implemented."
	128 Add X8, X0, W8
	129 Move [X8+32], W9
	130 Move X0, X19
	131 Move X20, [X31+16]
	132 Move X19, [X31+24]
	133 Move X30, [X31+32]
	134 Move X21, [X31+40]
	135 Call BigInteger.Normalize, X0
	136 Return 
	137 Call 0x1C17F28
	138 Call 0x1C17F20

Method: System.Void .ctor(System.UInt32 ui)

Disassembly:
	0x03222450 LDR X0, [X22]
	0x03222454 LDR W8, [X0 + 0xE0]
	0x03222458 CBNZ W8, 0x3222460
	0x0322245C BL 0x1C16DFC
	0x03222460 MOV X0, X19
	0x03222464 MOV W1, W31
	0x03222468 BL 0x321FE58
	0x0322246C TBZ X0, 0x0, 0x3222484
	0x03222470 LDP X20, X19, [X31 + 0x30]
	0x03222474 LDP X22, X21, [X31 + 0x20]
	0x03222478 LDP X24, X23, [X31 + 0x10]
	0x0322247C LDR X30, [X31], #0x40
	0x03222480 RET
	0x03222484 ADRP X21, 0xED1000
	0x03222488 LDR X21, [X21 + 0x618]
	0x0322248C MOV X0, X19
	0x03222490 BL 0x321C250
	0x03222494 LDR X8, [X21]
	0x03222498 SBFM W9, W0, 0x5, 0x1F
	0x0322249C ANDS W23, W0, 0x1F
	0x032224A0 CINC W24, W9, NE
	0x032224A4 UBFM W21, W24, 0x1E, 0x1D
	0x032224A8 MOV X0, X8
	0x032224AC MOV W1, W21
	0x032224B0 BL 0x1C16D6C
	0x032224B4 CBZ X20, 0x322257C
	0x032224B8 LDR X8, [X20]
	0x032224BC MOV X22, X0
	0x032224C0 MOV X0, X20
	0x032224C4 MOV X1, X22
	0x032224C8 LDP X9, X2, [X8 + 0x198]
	0x032224CC BLR X9
	0x032224D0 LDR X2, [X19 + 0x18]
	0x032224D4 MOV X0, X22

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11BB000
	007 Move X21, 0xEFB000
	008 Move W8, [X22+796]
	009 Move X21, [X21+3336]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEFB000
	017 Move X0, [X0+3336]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+796], W8
	021 Move W8, 1
	022 Move X0, X19
	023 Move X1, X31
	024 Move [X19+16], W8
	025 Call Object..ctor, X0
	026 Move X0, [X21]
	027 Move W1, 1
	028 Call 0x1C17D6C
	029 Compare X0, 0
	030 JumpIfEqual {42}
	031 Move W8, [X0+24]
	032 Compare W8, 0
	033 JumpIfEqual {43}
	034 Move [X0+32], W20
	035 Move [X19+24], X0
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X30, [X31+48]
	041 Return 
	042 Call 0x1C17F20
	043 Call 0x1C17F28

Method: Mono.Math.BigInteger op_Implicit(System.UInt32 value)

Disassembly:
	0x0321CF30 MOV X0, X19
	0x0321CF34 BL 0x321C250
	0x0321CF38 LDR X8, [X20]
	0x0321CF3C SBFM W9, W0, 0x3, 0x1F
	0x0321CF40 ANDS W31, W0, 0x7
	0x0321CF44 CINC W20, W9, NE
	0x0321CF48 MOV X0, X8
	0x0321CF4C MOV W1, W20
	0x0321CF50 BL 0x1C16D6C
	0x0321CF54 LDR W8, [X19 + 0x10]
	0x0321CF58 SUBS W8, W8, 0x1
	0x0321CF5C B.MI 0x321CFD4
	0x0321CF60 ANDS W10, W20, 0x3
	0x0321CF64 MOVZ W11, 0x4
	0x0321CF68 MOV W9, W31
	0x0321CF6C CSEL W10, W11, W10, EQ
	0x0321CF70 LDR X11, [X19 + 0x18]
	0x0321CF74 CBZ X11, 0x321CFE4
	0x0321CF78 LDR W12, [X11 + 0x18]
	0x0321CF7C CMP W8, W12
	0x0321CF80 B.CS 0x321CFE0
	0x0321CF84 CBZ X0, 0x321CFE4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11C1000
	006 Move X21, 0xF06000
	007 Move W8, [X20+797]
	008 Move X21, [X21+3472]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF06000
	015 Move X0, [X0+3472]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+797], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move W1, W19
	022 Move X20, X0
	023 Call BigInteger..ctor, X0, X1
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: Mono.Math.BigInteger op_Implicit(System.Int32 value)

Disassembly:
	0x0321D2D0 BL 0x321C64C
	0x0321D2D4 TBNZ X0, 0x0, 0x321D208
	0x0321D2D8 LDRB W8, [X19 + 0x20]
	0x0321D2DC CBZ W8, 0x321D37C
	0x0321D2E0 LDR X0, [X24]
	0x0321D2E4 LDR X23, [X19 + 0x40]
	0x0321D2E8 LDR W8, [X0 + 0xE0]
	0x0321D2EC CBNZ W8, 0x321D2F4
	0x0321D2F0 BL 0x1C16DFC
	0x0321D2F4 MOV X0, X22
	0x0321D2F8 MOV X1, X21
	0x0321D2FC BL 0x321C4E4
	0x0321D300 MOV X1, X0
	0x0321D304 MOV X0, X23
	0x0321D308 BL 0x321C64C
	0x0321D30C TBZ X0, 0x0, 0x321D37C
	0x0321D310 LDR X0, [X24]
	0x0321D314 LDR X21, [X19 + 0x48]
	0x0321D318 LDR W8, [X0 + 0xE0]
	0x0321D31C CBNZ W8, 0x321D324
	0x0321D320 BL 0x1C16DFC
	0x0321D324 MOV X0, X22
	0x0321D328 MOV X1, X20
	0x0321D32C BL 0x321C4E4
	0x0321D330 MOV X1, X0
	0x0321D334 MOV X0, X21
	0x0321D338 BL 0x321C64C
	0x0321D33C TBZ X0, 0x0, 0x321D37C
	0x0321D340 LDR X0, [X19 + 0x38]
	0x0321D344 CBZ X0, 0x321D420
	0x0321D348 LDR X1, [X19 + 0x30]
	0x0321D34C LDR X20, [X19 + 0x50]
	0x0321D350 BL 0x3222C00
	0x0321D354 LDR X8, [X24]
	0x0321D358 MOV X19, X0
	0x0321D35C LDR W9, [X8 + 0xE0]
	0x0321D360 CBNZ W9, 0x321D36C
	0x0321D364 MOV X0, X8
	0x0321D368 BL 0x1C16DFC
	0x0321D36C MOV X0, X20
	0x0321D370 MOV X1, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11C0000
	005 Move W8, [X20+798]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF05000
	012 Move X0, [X0+3472]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+798], W8
	016 Move TEMP, X19
	017 And TEMP, TEMP, -2147483648
	018 Compare TEMP, -2147483648
	019 JumpIfEqual {32}
	020 Move X8, 0xF05000
	021 Move X8, [X8+3472]
	022 Move X0, [X8]
	023 Call 0x1C17F10
	024 Move W1, W19
	025 Move X20, X0
	026 Call BigInteger..ctor, X0, X1
	027 Move X0, X20
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return X0
	032 Move X0, 0xEDF000
	033 Move X0, [X0+1888]
	034 Call 0x1C17D08
	035 Call 0x1C17F10
	036 Move X19, X0
	037 Move X0, 0xEE1000
	038 Move X0, [X0+3784]
	039 Call 0x1C17D08
	040 Move X1, X0
	041 Move X0, X19
	042 Move X2, X31
	043 Call ArgumentOutOfRangeException..ctor, X0, X1
	044 Move X0, 0xF05000
	045 Move X0, [X0+3496]
	046 Call 0x1C17D08
	047 Move X1, X0
	048 Move X0, X19
	049 Call 0x1C17DEC

Method: Mono.Math.BigInteger op_Subtraction(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2)

Disassembly:
	0x0321D374 BL 0x321C64C
	0x0321D378 TBNZ X0, 0x0, 0x321D208
	0x0321D37C ADRP X0, 0xF04000
	0x0321D380 LDR X0, [X0 + 0x5B0]
	0x0321D384 B 0x321D3D8
	0x0321D388 ADRP X0, 0xF04000
	0x0321D38C LDR X0, [X0 + 0x578]
	0x0321D390 BL 0x1C16D08
	0x0321D394 MOV X1, X31
	0x0321D398 BL 0x320A160
	0x0321D39C MOV X19, X0
	0x0321D3A0 ADRP X0, 0xEFF000
	0x0321D3A4 LDR X0, [X0 + 0x4B8]
	0x0321D3A8 BL 0x1C16D08
	0x0321D3AC BL 0x1C16F10
	0x0321D3B0 MOV X1, X19
	0x0321D3B4 MOV X2, X31
	0x0321D3B8 MOV X20, X0
	0x0321D3BC BL 0x338C448
	0x0321D3C0 B 0x321D408
	0x0321D3C4 ADRP X0, 0xF04000
	0x0321D3C8 LDR X0, [X0 + 0x5B8]
	0x0321D3CC B 0x321D3D8
	0x0321D3D0 ADRP X0, 0xF04000
	0x0321D3D4 LDR X0, [X0 + 0x5C0]
	0x0321D3D8 BL 0x1C16D08
	0x0321D3DC MOV X1, X31
	0x0321D3E0 BL 0x320A160
	0x0321D3E4 MOV X19, X0
	0x0321D3E8 ADRP X0, 0xF03000
	0x0321D3EC LDR X0, [X0 + 0xCE0]
	0x0321D3F0 BL 0x1C16D08
	0x0321D3F4 BL 0x1C16F10
	0x0321D3F8 MOV X1, X19
	0x0321D3FC MOV X2, X31
	0x0321D400 MOV X20, X0
	0x0321D404 BL 0x3252170
	0x0321D408 ADRP X0, 0xF04000
	0x0321D40C LDR X0, [X0 + 0xDD8]
	0x0321D410 BL 0x1C16D08
	0x0321D414 MOV X1, X0
	0x0321D418 MOV X0, X20
	0x0321D41C BL 0x1C16DEC
	0x0321D420 BL 0x1C16F20
	0x0321D424 STR X30, [X31 - 0x30]!
	0x0321D428 STP X22, X21, [X31 + 0x10]
	0x0321D42C STP X20, X19, [X31 + 0x20]
	0x0321D430 ADRP X21, 0x11BF000
	0x0321D434 LDRB W8, [X21 + 0x303]
	0x0321D438 MOV W20, W1
	0x0321D43C MOV X19, X0
	0x0321D440 TBNZ X8, 0x0, 0x321D458
	0x0321D444 ADRP X0, 0xF04000
	0x0321D448 LDR X0, [X0 + 0xD90]
	0x0321D44C BL 0x1C16CF4
	0x0321D450 MOVZ W8, 0x1
	0x0321D454 STRB W8, [X21 + 0x303]
	0x0321D458 LDRB W8, [X19 + 0x23]
	0x0321D45C CBNZ W8, 0x321D60C
	0x0321D460 ADRP X22, 0xF04000
	0x0321D464 LDR X22, [X22 + 0xD90]
	0x0321D468 LDR X21, [X19 + 0x28]
	0x0321D46C LDR X0, [X22]
	0x0321D470 LDR W8, [X0 + 0xE0]
	0x0321D474 CBNZ W8, 0x321D47C
	0x0321D478 BL 0x1C16DFC
	0x0321D47C MOV X0, X21
	0x0321D480 MOV X1, X31
	0x0321D484 BL 0x321BFF8
	0x0321D488 TBZ X0, 0x0, 0x321D49C
	0x0321D48C LDR X0, [X19 + 0x28]
	0x0321D490 CBZ X0, 0x321D624
	0x0321D494 BL 0x321CB3C
	0x0321D498 STR X31, [X19 + 0x28]
	0x0321D49C LDR X0, [X22]
	0x0321D4A0 LDR X21, [X19 + 0x30]
	0x0321D4A4 LDR W8, [X0 + 0xE0]
	0x0321D4A8 CBNZ W8, 0x321D4B0
	0x0321D4AC BL 0x1C16DFC
	0x0321D4B0 MOV X0, X21
	0x0321D4B4 MOV X1, X31
	0x0321D4B8 BL 0x321BFF8
	0x0321D4BC TBZ X0, 0x0, 0x321D4D0
	0x0321D4C0 LDR X0, [X19 + 0x30]
	0x0321D4C4 CBZ X0, 0x321D624
	0x0321D4C8 BL 0x321CB3C
	0x0321D4CC STR X31, [X19 + 0x30]
	0x0321D4D0 LDR X0, [X22]
	0x0321D4D4 LDR X21, [X19 + 0x38]
	0x0321D4D8 LDR W8, [X0 + 0xE0]
	0x0321D4DC CBNZ W8, 0x321D4E4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11C0000
	007 Move X21, 0xF05000
	008 Move W8, [X22+799]
	009 Move X21, [X21+3472]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF05000
	017 Move X0, [X0+3472]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+799], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move W1, W31
	028 Call BigInteger.op_Equality, X0, X1
	029 Move X8, [X21]
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {46}
	034 Move X0, X8
	035 Call 0x1C17F10
	036 Move X1, X19
	037 Move X20, X0
	038 Call BigInteger..ctor, X0, X1
	039 Move X0, X20
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X30, [X31+48]
	045 Return X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {51}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X0, X19
	052 Move W1, W31
	053 Call BigInteger.op_Equality, X0, X1
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfEqual {87}
	058 Move X0, X19
	059 Move X1, X20
	060 Call Kernel.Compare, X0, X1
	061 Compare W0, 0
	062 JumpIfEqual {73}
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X0, X19
	065 Move X1, X20
	066 Move X20, [X31+32]
	067 Move X19, [X31+40]
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Move X30, [X31+48]
	071 Call Kernel.Subtract, X0, X1
	072 Return X0
	073 Move X0, [X21]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {78}
	077 Call 0x1C17DFC
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move W0, W31
	083 Move X30, [X31+48]
	084 Call BigInteger.op_Implicit, X0
	085 Return X0
	086 Add W31, W0, 1
	087 Move X0, 0xF05000
	088 Move X0, [X0+1376]
	089 Call 0x1C17D08
	090 Call 0x1C17F10
	091 Move X19, X0
	092 Move X0, 0xF05000
	093 Move X0, [X0+1384]
	094 Call 0x1C17D08
	095 Move X1, X0
	096 Move X0, X19
	097 Move X2, X31
	098 Call ArithmeticException..ctor, X0, X1
	099 Move X0, 0xED7000
	100 Move X0, [X0+2000]
	101 Call 0x1C17D08
	102 Call 0x1C17F10
	103 Move X1, X31
	104 Move X19, X0
	105 Call Exception..ctor, X0
	106 Move X0, 0xF05000
	107 Move X0, [X0+3504]
	108 Call 0x1C17D08
	109 Move X1, X0
	110 Move X0, X19
	111 Call 0x1C17DEC

Method: System.UInt32 op_Modulus(Mono.Math.BigInteger bi, System.UInt32 ui)

Disassembly:
	0x0321CFF4 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Call Kernel.DwordMod, X0, X1
	002 Return X0

Method: Mono.Math.BigInteger op_Modulus(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2)

Disassembly:
	0x0321D4E4 MOV X0, X21
	0x0321D4E8 MOV X1, X31
	0x0321D4EC BL 0x321BFF8
	0x0321D4F0 TBZ X0, 0x0, 0x321D504
	0x0321D4F4 LDR X0, [X19 + 0x38]
	0x0321D4F8 CBZ X0, 0x321D624
	0x0321D4FC BL 0x321CB3C
	0x0321D500 STR X31, [X19 + 0x38]
	0x0321D504 LDR X0, [X22]
	0x0321D508 LDR X21, [X19 + 0x40]
	0x0321D50C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Call Kernel.multiByteDivide, X0, X1
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move W8, [X0+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X0, [X0+40]
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20
	011 Call 0x1C17F28

Method: Mono.Math.BigInteger op_Division(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2)

Disassembly:
	0x0322126C STP X20, X19, [X31 + 0x20]
	0x03221270 ADRP X21, 0x11BB000
	0x03221274 LDRB W8, [X21 + 0x319]
	0x03221278 MOV X19, X1
	0x0322127C MOV X20, X0
	0x03221280 TBNZ X8, 0x0, 0x3221298
	0x03221284 ADRP X0, 0xEFB000
	0x03221288 LDR X0, [X0 + 0xD08]
	0x0322128C BL 0x1C16CF4
	0x03221290 MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Call Kernel.multiByteDivide, X0, X1
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move W8, [X0+24]
	006 Compare W8, 0
	007 JumpIfEqual {12}
	008 Move X0, [X0+32]
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20
	012 Call 0x1C17F28

Method: Mono.Math.BigInteger op_Multiply(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2)

Disassembly:
	0x0321D0A8 CBZ X21, 0x321D0C4
	0x0321D0AC LDR X0, [X24]
	0x0321D0B0 BL 0x1C16F10
	0x0321D0B4 MOV X1, X21
	0x0321D0B8 MOV X22, X0
	0x0321D0BC BL 0x321C804
	0x0321D0C0 STR X22, [X19 + 0x40]
	0x0321D0C4 LDR X21, [X20 + 0x28]
	0x0321D0C8 CBZ X21, 0x321D0E4
	0x0321D0CC LDR X0, [X24]
	0x0321D0D0 BL 0x1C16F10
	0x0321D0D4 MOV X1, X21
	0x0321D0D8 MOV X22, X0
	0x0321D0DC BL 0x321C804
	0x0321D0E0 STR X22, [X19 + 0x48]
	0x0321D0E4 LDR X21, [X20 + 0x30]
	0x0321D0E8 CBZ X21, 0x321D104
	0x0321D0EC LDR X0, [X24]
	0x0321D0F0 BL 0x1C16F10
	0x0321D0F4 MOV X1, X21
	0x0321D0F8 MOV X22, X0
	0x0321D0FC BL 0x321C804
	0x0321D100 STR X22, [X19 + 0x50]
	0x0321D104 LDR X21, [X20 + 0x10]
	0x0321D108 CBZ X21, 0x321D124
	0x0321D10C LDR X0, [X24]
	0x0321D110 BL 0x1C16F10
	0x0321D114 MOV X1, X21
	0x0321D118 MOV X22, X0
	0x0321D11C BL 0x321C804
	0x0321D120 STR X22, [X19 + 0x30]
	0x0321D124 LDR X20, [X20 + 0x18]
	0x0321D128 CBZ X20, 0x321D144
	0x0321D12C LDR X0, [X24]
	0x0321D130 BL 0x1C16F10
	0x0321D134 MOV X1, X20
	0x0321D138 MOV X21, X0
	0x0321D13C BL 0x321C804
	0x0321D140 STR X21, [X19 + 0x38]
	0x0321D144 MOVZ W8, 0x1
	0x0321D148 STRB W8, [X19 + 0x22]
	0x0321D14C LDR X0, [X24]
	0x0321D150 LDR X20, [X19 + 0x30]
	0x0321D154 LDR W8, [X0 + 0xE0]
	0x0321D158 CBNZ W8, 0x321D160
	0x0321D15C BL 0x1C16DFC
	0x0321D160 MOV X0, X20
	0x0321D164 MOV X1, X31
	0x0321D168 BL 0x321BFF8
	0x0321D16C TBZ X0, 0x0, 0x321D204
	0x0321D170 LDR X0, [X24]
	0x0321D174 LDR X20, [X19 + 0x38]
	0x0321D178 LDR W8, [X0 + 0xE0]
	0x0321D17C CBNZ W8, 0x321D184
	0x0321D180 BL 0x1C16DFC
	0x0321D184 MOV X0, X20
	0x0321D188 MOV X1, X31
	0x0321D18C BL 0x321BFF8
	0x0321D190 TBZ X0, 0x0, 0x321D204
	0x0321D194 LDR X0, [X24]
	0x0321D198 LDR X20, [X19 + 0x40]
	0x0321D19C LDR W8, [X0 + 0xE0]
	0x0321D1A0 CBNZ W8, 0x321D1A8
	0x0321D1A4 BL 0x1C16DFC
	0x0321D1A8 MOV X0, X20
	0x0321D1AC MOV X1, X31
	0x0321D1B0 BL 0x321BFF8
	0x0321D1B4 TBZ X0, 0x0, 0x321D204
	0x0321D1B8 LDR X0, [X24]
	0x0321D1BC LDR X20, [X19 + 0x48]
	0x0321D1C0 LDR W8, [X0 + 0xE0]
	0x0321D1C4 CBNZ W8, 0x321D1CC
	0x0321D1C8 BL 0x1C16DFC
	0x0321D1CC MOV X0, X20
	0x0321D1D0 MOV X1, X31
	0x0321D1D4 BL 0x321BFF8
	0x0321D1D8 TBZ X0, 0x0, 0x321D21C
	0x0321D1DC LDR X0, [X24]
	0x0321D1E0 LDR X20, [X19 + 0x50]
	0x0321D1E4 LDR W8, [X0 + 0xE0]
	0x0321D1E8 CBNZ W8, 0x321D1F0
	0x0321D1EC BL 0x1C16DFC
	0x0321D1F0 MOV X0, X20
	0x0321D1F4 MOV X1, X31
	0x0321D1F8 BL 0x321BFF8
	0x0321D1FC AND W8, W0, 0x1
	0x0321D200 B 0x321D220
	0x0321D204 STRB W31, [X19 + 0x20]
	0x0321D208 LDP X20, X19, [X31 + 0x30]
	0x0321D20C LDP X22, X21, [X31 + 0x20]
	0x0321D210 LDP X24, X23, [X31 + 0x10]
	0x0321D214 LDR X30, [X31], #0x40
	0x0321D218 RET
	0x0321D21C MOV W8, W31
	0x0321D220 STRB W8, [X19 + 0x20]
	0x0321D224 LDR X0, [X24]
	0x0321D228 LDR X20, [X19 + 0x58]
	0x0321D22C LDP X22, X21, [X19 + 0x30]
	0x0321D230 LDR W8, [X0 + 0xE0]
	0x0321D234 CBNZ W8, 0x321D23C
	0x0321D238 BL 0x1C16DFC
	0x0321D23C MOV X0, X22
	0x0321D240 MOV X1, X21
	0x0321D244 BL 0x321C0A8
	0x0321D248 MOV X1, X0
	0x0321D24C MOV X0, X20

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x11C0000
	009 Move X21, 0xF05000
	010 Move W8, [X22+800]
	011 Move X21, [X21+3472]
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF05000
	019 Move X0, [X0+3472]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+800], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move W1, W31
	030 Call BigInteger.op_Equality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {47}
	035 Move X0, [X21]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X20
	041 Move W1, W31
	042 Call BigInteger.op_Equality, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {62}
	047 Move X0, [X21]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Move X20, [X31+48]
	053 Move X19, [X31+56]
	054 Move X22, [X31+32]
	055 Move X21, [X31+40]
	056 Move X30, [X31+16]
	057 Move X23, [X31+24]
	058 Move W0, W31
	059 Add X31, X31, 64
	060 Call BigInteger.op_Implicit, X0
	061 Return X0
	062 Compare X19, 0
	063 JumpIfEqual {105}
	064 Move X8, [X19+24]
	065 Compare X8, 0
	066 JumpIfEqual {105}
	067 Move W22, [X19+16]
	068 NotImplemented "Instruction LDRSW not yet implemented."
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Compare X20, 0
	071 JumpIfEqual {105}
	072 Move X8, [X20+24]
	073 Compare X8, 0
	074 JumpIfEqual {105}
	075 Move W23, [X20+16]
	076 NotImplemented "Instruction LDRSW not yet implemented."
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X0, [X21]
	079 Call 0x1C17F10
	080 Add W2, W23, W22
	081 Move X21, X0
	082 Call BigInteger..ctor, X0, X1, X2
	083 Compare X21, 0
	084 JumpIfEqual {105}
	085 Move W5, [X20+16]
	086 Move X3, [X20+24]
	087 Move W2, [X19+16]
	088 Move X0, [X19+24]
	089 Move X6, [X21+24]
	090 Move W1, W31
	091 Move W4, W31
	092 Move W7, W31
	093 Call Kernel.Multiply, X0, X1, X2, X3, X4, X5, X6, X7
	094 Move X0, X21
	095 Call BigInteger.Normalize, X0
	096 Move X0, X21
	097 Move X20, [X31+48]
	098 Move X19, [X31+56]
	099 Move X22, [X31+32]
	100 Move X21, [X31+40]
	101 Move X30, [X31+16]
	102 Move X23, [X31+24]
	103 Add X31, X31, 64
	104 Return X0
	105 Call 0x1C17F20
	106 Move X0, 0xEE1000
	107 Move X0, [X0+3960]
	108 Call 0x1C17D08
	109 Call 0x1C17F10
	110 Move X19, X0
	111 Move X0, 0xF05000
	112 Move X0, [X0+1344]
	113 Move X0, 0xEE1000
	114 Move X0, [X0+3960]
	115 Call 0x1C17D08
	116 Call 0x1C17F10
	117 Move X19, X0
	118 Move X0, 0xF05000
	119 Move X0, [X0+1352]
	120 Call 0x1C17D08
	121 Move X1, X0
	122 Move X0, X19
	123 Move X2, X31
	124 Call IndexOutOfRangeException..ctor, X0, X1
	125 Move X0, 0xF05000
	126 Move X0, [X0+3488]
	127 Call 0x1C17D08
	128 Move X1, X0
	129 Move X0, X19
	130 Call 0x1C17DEC

Method: Mono.Math.BigInteger op_Multiply(Mono.Math.BigInteger bi, System.Int32 i)

Disassembly:
	0x03221140 MOV X0, X20
	0x03221144 BL 0x1C17238
	0x03221148 TBZ X21, 0x0, 0x3221180
	0x0322114C TBZ X0, 0x0, 0x3221190
	0x03221150 ADRP X8, 0xFFFFFFFFFE993000
	0x03221154 ADD X8, X8, 0x218
	0x03221158 B 0x32211A4
	0x0322115C CBZ X21, 0x32211C4
	0x03221160 LDR X8, [X19 + 0x10]
	0x03221164 LDR X9, [X19 + 0x20]
	0x03221168 STR X8, [X19 + 0x18]
	0x0322116C STR X9, [X19 + 0x40]
	0x03221170 B 0x32211A8
	0x03221174 ADRP X8, 0xFFFFFFFFFE993000
	0x03221178 ADD X8, X8, 0xD8
	0x0322117C B 0x32211A4
	0x03221180 TBZ X0, 0x0, 0x322119C
	0x03221184 ADRP X8, 0xFFFFFFFFFE993000
	0x03221188 ADD X8, X8, 0x140
	0x0322118C B 0x32211A4
	0x03221190 ADRP X8, 0xFFFFFFFFFE993000
	0x03221194 ADD X8, X8, 0x1CC
	0x03221198 B 0x32211A4
	0x0322119C ADRP X8, 0xFFFFFFFFFE993000
	0x032211A0 ADD X8, X8, 0x110
	0x032211A4 STR X8, [X19 + 0x18]
	0x032211A8 ADRP X8, 0xFFFFFFFFFE993000
	0x032211AC ADD X8, X8, 0x80
	0x032211B0 STR X8, [X19 + 0x38]
	0x032211B4 LDP X20, X19, [X31 + 0x20]
	0x032211B8 LDP X22, X21, [X31 + 0x10]
	0x032211BC LDR X30, [X31], #0x30
	0x032211C0 RET
	0x032211C4 ADRP X1, 0xFFFFFFFFFD8FA000
	0x032211C8 ADD X1, X1, 0xEE3
	0x032211CC MOV X0, X31
	0x032211D0 BL 0x1C16F3C
	0x032211D4 MOV X1, X31
	0x032211D8 BL 0x1C16DEC
	0x032211DC LDR X8, [X0 + 0x40]
	0x032211E0 LDR X4, [X0 + 0x18]
	0x032211E4 LDR X3, [X0 + 0x28]
	0x032211E8 MOV X0, X8
	0x032211EC BR X4
	0x032211F0 STR X30, [X31 - 0x30]!
	0x032211F4 STP X22, X21, [X31 + 0x10]
	0x032211F8 STP X20, X19, [X31 + 0x20]
	0x032211FC ADRP X22, 0x11BB000
	0x03221200 ADRP X21, 0xEFB000
	0x03221204 LDRB W8, [X22 + 0x318]
	0x03221208 LDR X21, [X21 + 0xD08]
	0x0322120C MOV W19, W2
	0x03221210 MOV X20, X0
	0x03221214 TBNZ X8, 0x0, 0x322122C
	0x03221218 ADRP X0, 0xEFB000
	0x0322121C LDR X0, [X0 + 0xD08]
	0x03221220 BL 0x1C16CF4
	0x03221224 MOVZ W8, 0x1
	0x03221228 STRB W8, [X22 + 0x318]
	0x0322122C MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11BC000
	006 Move W8, [X21+801]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF01000
	014 Move X0, [X0+3472]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+801], W8
	018 Move TEMP, X20
	019 And TEMP, TEMP, -2147483648
	020 Compare TEMP, -2147483648
	021 JumpIfEqual {60}
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Compare W20, 0
	024 JumpIfNotEqual {52}
	025 Move X8, 0xF01000
	026 Move X8, [X8+3472]
	027 Move X0, [X8]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move W0, W31
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call BigInteger.op_Implicit, X0
	038 Return X0
	039 Move X8, 0xF01000
	040 Move X8, [X8+3472]
	041 Move X0, [X8]
	042 Call 0x1C17F10
	043 Move X1, X19
	044 Move X20, X0
	045 Call BigInteger..ctor, X0, X1
	046 Move X0, X20
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return X0
	052 Move X0, X19
	053 Move W1, W20
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X30, [X31+32]
	057 Move X21, [X31+40]
	058 Call Kernel.MultiplyByDword, X0, X1
	059 Return X0
	060 Move X0, 0xF01000
	061 Move X0, [X0+1376]
	062 Call 0x1C17D08
	063 Call 0x1C17F10
	064 Move X19, X0
	065 Move X0, 0xF01000
	066 Move X0, [X0+1384]
	067 Call 0x1C17D08
	068 Move X1, X0
	069 Move X0, X19
	070 Move X2, X31
	071 Call ArithmeticException..ctor, X0, X1
	072 Move X0, 0xF01000
	073 Move X0, [X0+3792]
	074 Call 0x1C17D08
	075 Move X1, X0
	076 Move X0, X19
	077 Call 0x1C17DEC

Method: Mono.Math.BigInteger op_LeftShift(Mono.Math.BigInteger bi1, System.Int32 shiftVal)

Disassembly:
	0x03222E98 MOV X1, X25

ISIL:
No ISIL was generated
Method: Mono.Math.BigInteger op_RightShift(Mono.Math.BigInteger bi1, System.Int32 shiftVal)

Disassembly:
	0x03223080 LDP X20, X19, [X31 + 0x50]

ISIL:
No ISIL was generated
Method: System.Security.Cryptography.RandomNumberGenerator get_Rng()

Disassembly:
	0x032231FC LDR X0, [X0 + 0xD90]
	0x03223200 BL 0x1C16CF4
	0x03223204 MOVZ W8, 0x1
	0x03223208 STRB W8, [X22 + 0x336]
	0x0322320C LDR X0, [X23]
	0x03223210 BL 0x1C16F10
	0x03223214 MOVZ W1, 0x1
	0x03223218 MOV X22, X0
	0x0322321C BL 0x3221450
	0x03223220 LDR X0, [X23]
	0x03223224 LDR W8, [X0 + 0xE0]
	0x03223228 CBNZ W8, 0x3223230
	0x0322322C BL 0x1C16DFC
	0x03223230 MOV X0, X19
	0x03223234 MOV W1, W31
	0x03223238 BL 0x321FE58
	0x0322323C TBNZ X0, 0x0, 0x32232B8
	0x03223240 CBZ X19, 0x32232CC
	0x03223244 MOV X0, X19
	0x03223248 MOV W1, W31
	0x0322324C BL 0x3222584
	0x03223250 ANDS W31, W0, 0x1
	0x03223254 MOV X0, X19
	0x03223258 CSEL X22, X21, X22, NE
	0x0322325C BL 0x321C250
	0x03223260 CMP W0, 0x2
	0x03223264 B.LT 0x32232B8
	0x03223268 MOVZ W23, 0x1
	0x0322326C MOV X0, X20
	0x03223270 MOV X1, X21
	0x03223274 MOV X2, X21
	0x03223278 BL 0x3223A94
	0x0322327C MOV X21, X0
	0x03223280 MOV X0, X19
	0x03223284 MOV W1, W23
	0x03223288 BL 0x3222584
	0x0322328C TBZ X0, 0x0, 0x32232A4
	0x03223290 MOV X0, X20
	0x03223294 MOV X1, X21
	0x03223298 MOV X2, X22
	0x0322329C BL 0x3223A94
	0x032232A0 MOV X22, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x11BA000
	005 Move X20, 0xEFF000
	006 Move W8, [X19+802]
	007 Move X20, [X20+3472]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xEFF000
	013 Move X0, [X0+3472]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+802], W8
	017 Move X8, [X20]
	018 Move W9, [X8+224]
	019 Compare W9, 0
	020 JumpIfNotEqual {24}
	021 Move X0, X8
	022 Call 0x1C17DFC
	023 Move X8, [X20]
	024 Move X9, [X8+184]
	025 Move X9, [X9+8]
	026 Compare X9, 0
	027 JumpIfNotEqual {40}
	028 Move X0, X31
	029 Call RandomNumberGenerator.Create
	030 Move X8, [X20]
	031 Move X19, X0
	032 Move W9, [X8+224]
	033 Compare W9, 0
	034 JumpIfNotEqual {38}
	035 Move X0, X8
	036 Call 0x1C17DFC
	037 Move X8, [X20]
	038 Move X9, [X8+184]
	039 Move [X9+8], X19
	040 Move W9, [X8+224]
	041 Compare W9, 0
	042 JumpIfNotEqual {46}
	043 Move X0, X8
	044 Call 0x1C17DFC
	045 Move X8, [X20]
	046 Move X8, [X8+184]
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X0, [X8+8]
	050 Move X30, [X31+32]
	051 Return X0

Method: Mono.Math.BigInteger GenerateRandom(System.Int32 bits, System.Security.Cryptography.RandomNumberGenerator rng)

Disassembly:
	0x032232A4 MOV X0, X19
	0x032232A8 ADD W23, W23, 0x1
	0x032232AC BL 0x321C250
	0x032232B0 CMP W23, W0
	0x032232B4 B.LT 0x322326C
	0x032232B8 MOV X0, X22
	0x032232BC LDP X20, X19, [X31 + 0x20]
	0x032232C0 LDP X22, X21, [X31 + 0x10]
	0x032232C4 LDP X30, X23, [X31], #0x30
	0x032232C8 RET
	0x032232CC BL 0x1C16F20
	0x032232D0 STR X30, [X31 - 0x20]!
	0x032232D4 STP X20, X19, [X31 + 0x10]
	0x032232D8 CBZ X0, 0x3223318
	0x032232DC MOV W19, W1
	0x032232E0 MOV X20, X0
	0x032232E4 BL 0x321C250
	0x032232E8 CMP W0, 0x20
	0x032232EC B.LE 0x3223304
	0x032232F0 MOV X0, X20
	0x032232F4 MOV W1, W19
	0x032232F8 LDP X20, X19, [X31 + 0x10]
	0x032232FC LDR X30, [X31], #0x20
	0x03223300 B 0x32244F8
	0x03223304 MOV X0, X20
	0x03223308 MOV W1, W19
	0x0322330C LDP X20, X19, [X31 + 0x10]
	0x03223310 LDR X30, [X31], #0x20
	0x03223314 B 0x3224320
	0x03223318 BL 0x1C16F20
	0x0322331C MOV X1, X31
	0x03223320 B 0x33BDD8C
	0x03223324 STR X30, [X31 - 0x10]!
	0x03223328 LDR X8, [X0 + 0x18]
	0x0322332C CBZ X8, 0x32233A8
	0x03223330 LDR W9, [X8 + 0x18]
	0x03223334 CBZ W9, 0x32233A4
	0x03223338 LDR W10, [X8 + 0x20]
	0x0322333C ADD W11, W10, 0x2
	0x03223340 ADDS W31, W10, 0x2
	0x03223344 STR W11, [X8 + 0x20]
	0x03223348 B.CC 0x322339C
	0x0322334C CMP W9, 0x1
	0x03223350 B.LS 0x32233A4
	0x03223354 LDR W10, [X8 + 0x24]
	0x03223358 ADDS W10, W10, 0x1
	0x0322335C STR W10, [X8 + 0x24]
	0x03223360 MOVZ W10, 0x2
	0x03223364 B.CC 0x3223388
	0x03223368 CMP W9, W10
	0x0322336C B.EQ 0x32233A4
	0x03223370 ADD X11, X8, W10, 0x2, SXTW
	0x03223374 LDR W12, [X11 + 0x20]
	0x03223378 ADD W10, W10, 0x1
	0x0322337C ADDS W12, W12, 0x1
	0x03223380 STR W12, [X11 + 0x20]
	0x03223384 B.CS 0x3223368
	0x03223388 LDR W8, [X0 + 0x10]
	0x0322338C CMP W8, W10
	0x03223390 B.NE 0x322339C
	0x03223394 ADD W8, W10, 0x1
	0x03223398 STR W8, [X0 + 0x10]
	0x0322339C LDR X30, [X31], #0x10
	0x032233A0 RET
	0x032233A4 BL 0x1C16F28
	0x032233A8 BL 0x1C16F20
	0x032233AC STR X30, [X31 - 0x30]!
	0x032233B0 STP X22, X21, [X31 + 0x10]
	0x032233B4 STP X20, X19, [X31 + 0x20]
	0x032233B8 ADRP X21, 0x11B9000
	0x032233BC ADRP X22, 0xEF9000
	0x032233C0 ADRP X19, 0xEFE000
	0x032233C4 ADRP X20, 0xEFE000
	0x032233C8 LDRB W8, [X21 + 0x331]
	0x032233CC LDR X22, [X22 + 0xD08]
	0x032233D0 LDR X19, [X19 + 0xF68]
	0x032233D4 LDR X20, [X20 + 0xD90]
	0x032233D8 TBNZ X8, 0x0, 0x3223408
	0x032233DC ADRP X0, 0xEFE000
	0x032233E0 LDR X0, [X0 + 0xD90]
	0x032233E4 BL 0x1C16CF4
	0x032233E8 ADRP X0, 0xEFE000
	0x032233EC LDR X0, [X0 + 0xF68]
	0x032233F0 BL 0x1C16CF4
	0x032233F4 ADRP X0, 0xEF9000
	0x032233F8 LDR X0, [X0 + 0xD08]
	0x032233FC BL 0x1C16CF4
	0x03223400 MOVZ W8, 0x1

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x11BA000
	009 Move X22, 0xEFF000
	010 Move X21, 0xED1000
	011 Move W8, [X23+803]
	012 Move X22, [X22+3472]
	013 Move X21, [X21+1560]
	014 Move X20, X1
	015 Move W19, W0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0xEFF000
	021 Move X0, [X0+3472]
	022 Call 0x1C17CF4
	023 Move X0, 0xED1000
	024 Move X0, [X0+1560]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X23+803], W8
	028 Move X0, [X22]
	029 NotImplemented "Instruction SBFM not yet implemented."
	030 And W23, W19, 31
	031 NotImplemented "Instruction CINC not yet implemented."
	032 Call 0x1C17F10
	033 Add W2, W24, 1
	034 Move X19, X0
	035 Call BigInteger..ctor, X0, X1, X2
	036 Move X0, [X21]
	037 Move W21, W24
	038 ShiftRight W21, 30
	039 And W21, W21, 0x1FFFFFFF
	040 Move W1, W21
	041 Call 0x1C17D6C
	042 Compare X20, 0
	043 JumpIfEqual {103}
	044 Move X8, [X20]
	045 Move X22, X0
	046 Move X0, X20
	047 Move X1, X22
	048 Move X9, [X8+408]
	049 Move X2, [X8+416]
	050 NotImplemented "Instruction BLR not yet implemented."
	051 Compare X19, 0
	052 JumpIfEqual {103}
	053 Move X2, [X19+24]
	054 Move X0, X22
	055 Move W1, W31
	056 Move W3, W31
	057 Move W4, W21
	058 Move X5, X31
	059 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	060 Compare W23, 0
	061 JumpIfEqual {81}
	062 Move X8, [X19+24]
	063 Compare X8, 0
	064 JumpIfEqual {103}
	065 Move W10, [X8+24]
	066 Move X9, W24
	067 Subtract X9, X9, 1
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Add X8, X8, X9
	070 Move W9, [X8+32]
	071 Subtract W10, W23, 1
	072 Move W11, 1
	073 Subtract W12, W31, W23
	074 Move TEMP, 0
	075 Not TEMP
	076 Move W13, TEMP
	077 NotImplemented "Instruction LSLV not yet implemented."
	078 Or W9, W9, W10
	079 NotImplemented "Instruction LSRV not yet implemented."
	080 And W9, W9, W10
	081 Move X8, [X19+24]
	082 Compare X8, 0
	083 JumpIfEqual {103}
	084 Move W10, [X8+24]
	085 Move X9, W24
	086 Subtract X9, X9, 1
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Add X8, X8, X9
	089 Move W9, [X8+32]
	090 Or W9, W9, 0x80000000
	091 Move X0, X19
	092 Move [X8+32], W9
	093 Call BigInteger.Normalize, X0
	094 Move X0, X19
	095 Move X20, [X31+48]
	096 Move X19, [X31+56]
	097 Move X22, [X31+32]
	098 Move X21, [X31+40]
	099 Move X24, [X31+16]
	100 Move X23, [X31+24]
	101 Move X30, [X31+64]
	102 Return X0
	103 Call 0x1C17F20
	104 Call 0x1C17F28

Method: Mono.Math.BigInteger GenerateRandom(System.Int32 bits)

Disassembly:
	0x03220DA0 BL 0x3EB1AF0
	0x03220DA4 LDR X8, [X19]
	0x03220DA8 STR X8, [X0]
	0x03220DAC ADRP X1, 0xC94000
	0x03220DB0 ADD X1, X1, 0xE58
	0x03220DB4 MOV X2, X31
	0x03220DB8 BL 0x3EB1B00
	0x03220DBC MOV X19, X0
	0x03220DC0 BL 0x3EB1AE0
	0x03220DC4 MOV X0, X19
	0x03220DC8 BL 0x1D2C690
	0x03220DCC BL 0x1990590
	0x03220DD0 STR X30, [X31 - 0x30]!
	0x03220DD4 STP X22, X21, [X31 + 0x10]
	0x03220DD8 STP X20, X19, [X31 + 0x20]
	0x03220DDC ADRP X21, 0x11BC000
	0x03220DE0 LDRB W8, [X21 + 0x315]
	0x03220DE4 MOV W20, W1
	0x03220DE8 MOV X19, X0
	0x03220DEC TBNZ X8, 0x0, 0x3220E04
	0x03220DF0 ADRP X0, 0xF01000
	0x03220DF4 LDR X0, [X0 + 0xD90]
	0x03220DF8 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11BD000
	006 Move X21, 0xF02000
	007 Move W8, [X20+804]
	008 Move X21, [X21+3472]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF02000
	015 Move X0, [X0+3472]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+804], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Call BigInteger.get_Rng
	025 Move X1, X0
	026 Move W0, W19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call BigInteger.GenerateRandom, X0, X1
	032 Return X0

Method: System.Void Randomize(System.Security.Cryptography.RandomNumberGenerator rng)

Disassembly:
	0x03223404 STRB W8, [X21 + 0x331]
	0x03223408 LDR X0, [X22]
	0x0322340C MOVZ W1, 0x30F
	0x03223410 BL 0x1C16D6C
	0x03223414 LDR X1, [X19]
	0x03223418 MOV X2, X31
	0x0322341C MOV X19, X0
	0x03223420 BL 0x32C5BD8
	0x03223424 LDR X8, [X20]
	0x03223428 LDP X22, X21, [X31 + 0x10]
	0x0322342C LDR X8, [X8 + 0xB8]
	0x03223430 STR X19, [X8]
	0x03223434 LDP X20, X19, [X31 + 0x20]
	0x03223438 LDR X30, [X31], #0x30
	0x0322343C RET
	0x03223440 SUB X31, X31, 0x60
	0x03223444 STR X30, [X31 + 0x10]
	0x03223448 STP X26, X25, [X31 + 0x20]
	0x0322344C STP X24, X23, [X31 + 0x30]
	0x03223450 STP X22, X21, [X31 + 0x40]
	0x03223454 STP X20, X19, [X31 + 0x50]
	0x03223458 ADRP X20, 0x11B9000
	0x0322345C LDRB W8, [X20 + 0x333]
	0x03223460 MOV X19, X1
	0x03223464 MOV X21, X0
	0x03223468 TBNZ X8, 0x0, 0x3223480
	0x0322346C ADRP X0, 0xEFE000
	0x03223470 LDR X0, [X0 + 0xD90]
	0x03223474 BL 0x1C16CF4
	0x03223478 MOVZ W8, 0x1
	0x0322347C STRB W8, [X20 + 0x333]
	0x03223480 LDR X20, [X21 + 0x10]
	0x03223484 CBZ X20, 0x3223600
	0x03223488 CBZ X19, 0x3223600
	0x0322348C LDR W25, [X20 + 0x10]
	0x03223490 LDR W22, [X19 + 0x10]
	0x03223494 CMP W22, W25
	0x03223498 B.CC 0x322367C
	0x0322349C LDR X8, [X19 + 0x18]
	0x032234A0 CBZ X8, 0x3223600
	0x032234A4 LDRSW X8, [X8 + 0x18]
	0x032234A8 CMP X8, X22
	0x032234AC B.LT 0x3223604
	0x032234B0 LDR X8, [X21 + 0x18]
	0x032234B4 CBZ X8, 0x3223600
	0x032234B8 ADRP X24, 0xEFE000
	0x032234BC LDR X24, [X24 + 0xD90]
	0x032234C0 LDR W26, [X8 + 0x10]
	0x032234C4 LDR X0, [X24]
	0x032234C8 BL 0x1C16F10
	0x032234CC SUB W8, W22, W25
	0x032234D0 ADD W8, W8, W26
	0x032234D4 ADD W2, W8, 0x1
	0x032234D8 MOV X23, X0
	0x032234DC BL 0x32211F0
	0x032234E0 LDR X8, [X21 + 0x18]
	0x032234E4 CBZ X8, 0x3223600
	0x032234E8 CBZ X23, 0x3223600
	0x032234EC LDR W9, [X19 + 0x10]
	0x032234F0 LDR X0, [X19 + 0x18]
	0x032234F4 LDR W5, [X8 + 0x10]
	0x032234F8 LDR X3, [X8 + 0x18]
	0x032234FC LDR X6, [X23 + 0x18]
	0x03223500 SUB W1, W25, 0x1
	0x03223504 SUB W2, W9, W1
	0x03223508 MOV W4, W31
	0x0322350C MOV W7, W31
	0x03223510 ADD W21, W25, 0x1
	0x03223514 BL 0x3221CAC
	0x03223518 LDR W8, [X19 + 0x10]
	0x0322351C MOV X0, X19
	0x03223520 CMP W8, W21
	0x03223524 CSEL W8, W21, W8, HI
	0x03223528 STR W8, [X19 + 0x10]
	0x0322352C BL 0x32213F8
	0x03223530 LDR X0, [X24]
	0x03223534 BL 0x1C16F10
	0x03223538 MOV W2, W21
	0x0322353C MOV X22, X0
	0x03223540 BL 0x32211F0
	0x03223544 CBZ X22, 0x3223600
	0x03223548 LDR W8, [X23 + 0x10]
	0x0322354C LDR W5, [X20 + 0x10]
	0x03223550 LDR X3, [X20 + 0x18]
	0x03223554 LDR X0, [X23 + 0x18]
	0x03223558 LDR X6, [X22 + 0x18]
	0x0322355C SUB W2, W8, W21
	0x03223560 MOV W1, W21
	0x03223564 MOV W4, W31
	0x03223568 MOV W7, W31
	0x0322356C STR W21, [X31]
	0x03223570 BL 0x3223698
	0x03223574 MOV X0, X22
	0x03223578 BL 0x32213F8
	0x0322357C LDR X0, [X24]
	0x03223580 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x11BA000
	009 Move X22, 0xEFF000
	010 Move W8, [X21+805]
	011 Move X22, [X22+3472]
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0xEFF000
	019 Move X0, [X0+3472]
	020 Call 0x1C17CF4
	021 Move X0, 0xED1000
	022 Move X0, [X0+1560]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+805], W8
	026 Move X0, [X22]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X19
	032 Move W1, W31
	033 Call BigInteger.op_Equality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {46}
	038 Move X20, [X31+48]
	039 Move X19, [X31+56]
	040 Move X22, [X31+32]
	041 Move X21, [X31+40]
	042 Move X24, [X31+16]
	043 Move X23, [X31+24]
	044 Move X30, [X31+64]
	045 Return 
	046 Move X21, 0xED1000
	047 Move X21, [X21+1560]
	048 Move X0, X19
	049 Call BigInteger.BitCount, X0
	050 Move X8, [X21]
	051 NotImplemented "Instruction SBFM not yet implemented."
	052 And W23, W0, 31
	053 NotImplemented "Instruction CINC not yet implemented."
	054 Move W21, W24
	055 ShiftRight W21, 30
	056 And W21, W21, 0x1FFFFFFF
	057 Move X0, X8
	058 Move W1, W21
	059 Call 0x1C17D6C
	060 Compare X20, 0
	061 JumpIfEqual {118}
	062 Move X8, [X20]
	063 Move X22, X0
	064 Move X0, X20
	065 Move X1, X22
	066 Move X9, [X8+408]
	067 Move X2, [X8+416]
	068 NotImplemented "Instruction BLR not yet implemented."
	069 Move X2, [X19+24]
	070 Move X0, X22
	071 Move W1, W31
	072 Move W3, W31
	073 Move W4, W21
	074 Move X5, X31
	075 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	076 Compare W23, 0
	077 JumpIfEqual {97}
	078 Move X8, [X19+24]
	079 Compare X8, 0
	080 JumpIfEqual {118}
	081 Move W10, [X8+24]
	082 Move X9, W24
	083 Subtract X9, X9, 1
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Add X8, X8, X9
	086 Move W9, [X8+32]
	087 Subtract W10, W23, 1
	088 Move W11, 1
	089 Subtract W12, W31, W23
	090 Move TEMP, 0
	091 Not TEMP
	092 Move W13, TEMP
	093 NotImplemented "Instruction LSLV not yet implemented."
	094 Or W9, W9, W10
	095 NotImplemented "Instruction LSRV not yet implemented."
	096 And W9, W9, W10
	097 Move X8, [X19+24]
	098 Compare X8, 0
	099 JumpIfEqual {118}
	100 Move W10, [X8+24]
	101 Move X9, W24
	102 Subtract X9, X9, 1
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Add X8, X8, X9
	105 Move W9, [X8+32]
	106 Or W9, W9, 0x80000000
	107 Move X0, X19
	108 Move X20, [X31+48]
	109 Move X19, [X31+56]
	110 Move X22, [X31+32]
	111 Move X21, [X31+40]
	112 Move X24, [X31+16]
	113 Move X23, [X31+24]
	114 Move [X8+32], W9
	115 Move X30, [X31+64]
	116 Call BigInteger.Normalize, X0
	117 Return 
	118 Call 0x1C17F20
	119 Call 0x1C17F28

Method: System.Void Randomize()

Disassembly:
	0x03220DFC MOVZ W8, 0x1
	0x03220E00 STRB W8, [X21 + 0x315]
	0x03220E04 LDRB W8, [X19 + 0x21]
	0x03220E08 CBNZ W8, 0x3220F84
	0x03220E0C ADRP X22, 0xF01000
	0x03220E10 LDR X22, [X22 + 0xD90]
	0x03220E14 LDR X21, [X19 + 0x40]
	0x03220E18 LDR X0, [X22]
	0x03220E1C LDR W8, [X0 + 0xE0]
	0x03220E20 CBNZ W8, 0x3220E28
	0x03220E24 BL 0x1C16DFC
	0x03220E28 MOV X0, X21
	0x03220E2C MOV X1, X31
	0x03220E30 BL 0x321BFF8
	0x03220E34 TBZ X0, 0x0, 0x3220E48
	0x03220E38 LDR X0, [X19 + 0x40]
	0x03220E3C CBZ X0, 0x3220F9C
	0x03220E40 BL 0x321CB3C
	0x03220E44 STR X31, [X19 + 0x40]
	0x03220E48 TBZ X20, 0x0, 0x3220F84
	0x03220E4C LDR X0, [X22]
	0x03220E50 LDR X20, [X19 + 0x28]
	0x03220E54 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11BD000
	006 Move X21, 0xF02000
	007 Move W8, [X20+806]
	008 Move X21, [X21+3472]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF02000
	015 Move X0, [X0+3472]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+806], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Call BigInteger.get_Rng
	025 Move X1, X0
	026 Move X0, X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call BigInteger.Randomize, X0, X1
	032 Return 

Method: System.Int32 BitCount()

Disassembly:
	0x0321D250 BL 0x321C64C
	0x0321D254 TBZ X0, 0x0, 0x321D37C
	0x0321D258 LDR X0, [X24]
	0x0321D25C LDR X20, [X19 + 0x30]
	0x0321D260 LDR W8, [X0 + 0xE0]
	0x0321D264 CBNZ W8, 0x321D26C
	0x0321D268 BL 0x1C16DFC
	0x0321D26C MOVZ W0, 0x1
	0x0321D270 BL 0x321C2D0
	0x0321D274 MOV X1, X0
	0x0321D278 MOV X0, X20
	0x0321D27C BL 0x321C374
	0x0321D280 LDR X20, [X19 + 0x38]
	0x0321D284 MOV X21, X0
	0x0321D288 MOVZ W0, 0x1
	0x0321D28C BL 0x321C2D0
	0x0321D290 MOV X1, X0
	0x0321D294 MOV X0, X20
	0x0321D298 BL 0x321C374
	0x0321D29C MOV X20, X0
	0x0321D2A0 MOV X0, X21
	0x0321D2A4 MOV X1, X20
	0x0321D2A8 BL 0x321C0A8
	0x0321D2AC LDR X8, [X19 + 0x60]
	0x0321D2B0 CBZ X8, 0x321D420
	0x0321D2B4 MOV X1, X0
	0x0321D2B8 MOV X0, X8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call BigInteger.Normalize, X0
	005 Move X9, [X19+24]
	006 Compare X9, 0
	007 JumpIfEqual {32}
	008 Move W8, [X19+16]
	009 Move W10, [X9+24]
	010 Subtract W8, W8, 1
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Add X9, X9, W8
	013 Move W10, [X9+32]
	014 Move TEMP, X10
	015 And TEMP, TEMP, -2147483648
	016 Compare TEMP, -2147483648
	017 JumpIfEqual {27}
	018 Move W9, 32
	019 Move W11, 0x80000000
	020 Subtract W9, W9, 1
	021 And W12, W10, W11
	022 Move W11, W11
	023 ShiftRight W11, 1
	024 And W11, W11, 0x7FFFFFFF
	025 Compare W12, 0
	026 JumpIfEqual {20}
	027 Move W9, 32
	028 Add W0, W9, W8
	029 Move X30, [X31+16]
	030 Move X19, [X31+24]
	031 Return X0
	032 Call 0x1C17F20
	033 Call 0x1C17F28

Method: System.Boolean TestBit(System.UInt32 bitNum)

Disassembly:
	0x03221230 MOV X0, X20
	0x03221234 MOV X1, X31
	0x03221238 STR W8, [X20 + 0x10]
	0x0322123C BL 0x33BDD8C
	0x03221240 LDR X0, [X21]
	0x03221244 MOV W1, W19
	0x03221248 BL 0x1C16D6C
	0x0322124C STR X0, [X20 + 0x18]
	0x03221250 STR W19, [X20 + 0x10]
	0x03221254 LDP X20, X19, [X31 + 0x20]
	0x03221258 LDP X22, X21, [X31 + 0x10]
	0x0322125C LDR X30, [X31], #0x30
	0x03221260 RET
	0x03221264 STP X30, X23, [X31 - 0x30]!
	0x03221268 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+24]
	003 Compare X8, 0
	004 JumpIfEqual {16}
	005 Move W10, [X8+24]
	006 Move W9, W1
	007 ShiftRight W9, 5
	008 And W9, W9, 0x7FFFFFFF
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Add X8, X8, W9
	011 Move W8, [X8+32]
	012 NotImplemented "Instruction LSRV not yet implemented."
	013 And W0, W8, 1
	014 Move X30, [X31+16]
	015 Return X0
	016 Call 0x1C17F20
	017 Call 0x1C17F28

Method: System.Boolean TestBit(System.Int32 bitNum)

Disassembly:
	0x03223584 CBNZ W8, 0x322358C
	0x03223588 BL 0x1C16DFC
	0x0322358C MOV X0, X22
	0x03223590 MOV X1, X19
	0x03223594 BL 0x32214D8
	0x03223598 CMP W0, 0x0
	0x0322359C B.LE 0x32235F4
	0x032235A0 LDR X0, [X24]
	0x032235A4 BL 0x1C16F10
	0x032235A8 ADD W2, W25, 0x2
	0x032235AC MOV X23, X0
	0x032235B0 BL 0x32211F0
	0x032235B4 CBZ X23, 0x3223600
	0x032235B8 LDR X8, [X23 + 0x18]
	0x032235BC CBZ X8, 0x3223600
	0x032235C0 LDR W9, [X8 + 0x18]
	0x032235C4 CMP W21, W9
	0x032235C8 B.CS 0x322364C
	0x032235CC ADD X8, X8, W21, 0x2, UXTW
	0x032235D0 MOVZ W9, 0x1
	0x032235D4 MOV X0, X23
	0x032235D8 MOV X1, X22
	0x032235DC STR W9, [X8 + 0x20]
	0x032235E0 BL 0x32237D4
	0x032235E4 MOV X0, X19
	0x032235E8 MOV X1, X23
	0x032235EC BL 0x3223904
	0x032235F0 B 0x322365C
	0x032235F4 MOV X0, X19
	0x032235F8 MOV X1, X22
	0x032235FC B 0x3223658
	0x03223600 BL 0x1C16F20
	0x03223604 ADRP X0, 0xEDA000
	0x03223608 LDR X0, [X0 + 0xF78]
	0x0322360C BL 0x1C16D08
	0x03223610 BL 0x1C16F10
	0x03223614 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move TEMP, X1
	004 And TEMP, TEMP, -2147483648
	005 Compare TEMP, -2147483648
	006 JumpIfEqual {25}
	007 Move X8, [X0+24]
	008 Compare X8, 0
	009 JumpIfEqual {43}
	010 Move W10, [X8+24]
	011 Move W9, W1
	012 ShiftRight W9, 5
	013 And W9, W9, 0x7FFFFFFF
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Add X8, X8, W9
	016 Move W8, [X8+32]
	017 Move W9, 1
	018 NotImplemented "Instruction LSLV not yet implemented."
	019 Or W9, W8, W9
	020 NotImplemented "Instruction CMP not yet implemented."
	021 NotImplemented "Instruction CSET not yet implemented."
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Return X0
	025 Move X0, 0xEDB000
	026 Move X0, [X0+3960]
	027 Call 0x1C17D08
	028 Call 0x1C17F10
	029 Move X19, X0
	030 Move X0, 0xEFF000
	031 Move X0, [X0+1792]
	032 Call 0x1C17D08
	033 Move X1, X0
	034 Move X0, X19
	035 Move X2, X31
	036 Call IndexOutOfRangeException..ctor, X0, X1
	037 Move X0, 0xEFF000
	038 Move X0, [X0+3920]
	039 Call 0x1C17D08
	040 Move X1, X0
	041 Move X0, X19
	042 Call 0x1C17DEC
	043 Call 0x1C17F20
	044 Call 0x1C17F28

Method: System.Void SetBit(System.UInt32 bitNum)

Disassembly:
	0x03223618 ADRP X0, 0xEFE000
	0x0322361C LDR X0, [X0 + 0x758]

ISIL:
	001 Move W2, 1

Method: System.Void SetBit(System.UInt32 bitNum, System.Boolean value)

Disassembly:
	0x03223620 BL 0x1C16D08
	0x03223624 MOV X1, X0
	0x03223628 MOV X0, X19
	0x0322362C MOV X2, X31
	0x03223630 BL 0x3379B6C
	0x03223634 ADRP X0, 0xEFE000
	0x03223638 LDR X0, [X0 + 0xF70]
	0x0322363C BL 0x1C16D08
	0x03223640 MOV X1, X0
	0x03223644 MOV X0, X19
	0x03223648 BL 0x1C16DEC
	0x0322364C BL 0x1C16F28
	0x03223650 MOV X0, X19
	0x03223654 MOV X1, X20
	0x03223658 BL 0x32237D4
	0x0322365C LDR X0, [X24]
	0x03223660 LDR W8, [X0 + 0xE0]
	0x03223664 CBNZ W8, 0x322366C
	0x03223668 BL 0x1C16DFC
	0x0322366C MOV X0, X19
	0x03223670 MOV X1, X20
	0x03223674 BL 0x32214D8
	0x03223678 TBZ X0, 0x1F, 0x3223650

ISIL:
	001 Move [X31-16], X30
	002 Move W9, [X0+16]
	003 Move W8, W1
	004 ShiftRight W8, 5
	005 And W8, W8, 0x7FFFFFFF
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X9, [X0+24]
	008 Compare X9, 0
	009 JumpIfEqual {23}
	010 Move W10, [X9+24]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Add X8, X9, W8
	013 Move W9, [X8+32]
	014 Move W10, 1
	015 NotImplemented "Instruction LSLV not yet implemented."
	016 And W31, W2, 1
	017 NotImplemented "Instruction BIC not yet implemented."
	018 Or W9, W9, W10
	019 NotImplemented "Instruction CSEL not yet implemented."
	020 Move [X8+32], W9
	021 Move X30, [X31+16]
	022 Return 
	023 Call 0x1C17F20
	024 Call 0x1C17F28

Method: System.Int32 LowestSetBit()

Disassembly:
	0x0322367C LDP X20, X19, [X31 + 0x50]
	0x03223680 LDP X22, X21, [X31 + 0x40]
	0x03223684 LDP X24, X23, [X31 + 0x30]
	0x03223688 LDP X26, X25, [X31 + 0x20]
	0x0322368C LDR X30, [X31 + 0x10]
	0x03223690 ADD X31, X31, 0x60
	0x03223694 RET
	0x03223698 CBZ X0, 0x32236B0
	0x0322369C LDR W8, [X0 + 0x18]
	0x032236A0 CBZ W8, 0x32236B0
	0x032236A4 ADD X8, X0, 0x20
	0x032236A8 CBNZ X3, 0x32236B8
	0x032236AC B 0x32236CC
	0x032236B0 MOV X8, X31
	0x032236B4 CBZ X3, 0x32236CC
	0x032236B8 LDR W9, [X3 + 0x18]
	0x032236BC CBZ W9, 0x32236CC
	0x032236C0 ADD X15, X3, 0x20
	0x032236C4 CBNZ X6, 0x32236D4
	0x032236C8 B 0x32236E4
	0x032236CC MOV X15, X31
	0x032236D0 CBZ X6, 0x32236E4
	0x032236D4 LDR W9, [X6 + 0x18]
	0x032236D8 CBZ W9, 0x32236E4
	0x032236DC ADD X11, X6, 0x20
	0x032236E0 B 0x32236E8
	0x032236E4 MOV X11, X31
	0x032236E8 ADD X8, X8, W1, 0x2, SXTW
	0x032236EC ADD X9, X8, W2, 0x2, SXTW
	0x032236F0 CMP X8, X9
	0x032236F4 B.CS 0x32237D0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11BA000
	006 Move X21, 0xEFF000
	007 Move W8, [X20+807]
	008 Move X21, [X21+3472]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEFF000
	015 Move X0, [X0+3472]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+807], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move W1, W31
	026 Call BigInteger.op_Equality, X0, X1
	027 Move TEMP, 0
	028 Not TEMP
	029 Move W20, TEMP
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {42}
	034 Add W20, W20, 1
	035 Move X0, X19
	036 Move W1, W20
	037 Call BigInteger.TestBit, X0, X1
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {34}
	042 Move W0, W20
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Return X0

Method: System.Byte[] GetBytes()

Disassembly:
	0x0321DEB4 STR X8, [X19 + 0x18]
	0x0321DEB8 ADRP X8, 0xFFFFFFFFFE996000
	0x0321DEBC ADD X8, X8, 0xE54
	0x0321DEC0 STR X8, [X19 + 0x38]
	0x0321DEC4 LDP X20, X19, [X31 + 0x20]
	0x0321DEC8 LDP X22, X21, [X31 + 0x10]
	0x0321DECC LDR X30, [X31], #0x30
	0x0321DED0 RET
	0x0321DED4 ADRP X1, 0xFFFFFFFFFD8FE000
	0x0321DED8 ADD X1, X1, 0xEE3
	0x0321DEDC MOV X0, X31
	0x0321DEE0 BL 0x1C16F3C
	0x0321DEE4 MOV X1, X31
	0x0321DEE8 BL 0x1C16DEC
	0x0321DEEC LDR X8, [X0 + 0x40]
	0x0321DEF0 LDR X4, [X0 + 0x18]
	0x0321DEF4 LDR X3, [X0 + 0x28]
	0x0321DEF8 MOV X0, X8
	0x0321DEFC BR X4
	0x0321DF00 SUB X31, X31, 0x40
	0x0321DF04 STP X30, X23, [X31 + 0x10]
	0x0321DF08 STP X22, X21, [X31 + 0x20]
	0x0321DF0C STP X20, X19, [X31 + 0x30]
	0x0321DF10 ADRP X23, 0x11BF000
	0x0321DF14 LDRB W8, [X23 + 0x308]
	0x0321DF18 MOV X20, X3
	0x0321DF1C MOV X21, X1
	0x0321DF20 MOV X19, X0
	0x0321DF24 AND W22, W2, 0x1
	0x0321DF28 TBNZ X8, 0x0, 0x321DF4C
	0x0321DF2C ADRP X0, 0xED6000
	0x0321DF30 LDR X0, [X0 + 0x618]
	0x0321DF34 BL 0x1C16CF4
	0x0321DF38 ADRP X0, 0xED6000
	0x0321DF3C LDR X0, [X0 + 0x5A8]
	0x0321DF40 BL 0x1C16CF4
	0x0321DF44 MOVZ W8, 0x1
	0x0321DF48 STRB W8, [X23 + 0x308]
	0x0321DF4C MOV X0, X19
	0x0321DF50 MOV X1, X31
	0x0321DF54 BL 0x33BDD8C
	0x0321DF58 STR X21, [X19 + 0x10]
	0x0321DF5C STRB W22, [X19 + 0x18]
	0x0321DF60 CBZ X21, 0x321E0C0
	0x0321DF64 LDR X8, [X21]
	0x0321DF68 ADRP X23, 0xED6000
	0x0321DF6C MOV X0, X21
	0x0321DF70 LDP X9, X1, [X8 + 0x198]
	0x0321DF74 LDR X23, [X23 + 0x618]
	0x0321DF78 BLR X9
	0x0321DF7C SBFM W0, W0, 0x3, 0x1F
	0x0321DF80 STR W0, [X19 + 0x1C]
	0x0321DF84 CBZ X20, 0x321DFBC
	0x0321DF88 MOV X0, X20
	0x0321DF8C MOV X1, X31
	0x0321DF90 BL 0x33A01F0
	0x0321DF94 CBZ X0, 0x321E0B8
	0x0321DF98 LDR X22, [X23]
	0x0321DF9C MOV X21, X0
	0x0321DFA0 MOV X1, X22
	0x0321DFA4 BL 0x1C16E00
	0x0321DFA8 MOV X20, X0
	0x0321DFAC CBNZ X0, 0x321DFC8
	0x0321DFB0 MOV X0, X21
	0x0321DFB4 MOV X1, X22
	0x0321DFB8 BL 0x1C171E0
	0x0321DFBC MOV X1, X31
	0x0321DFC0 BL 0x3217C84
	0x0321DFC4 MOV X20, X0
	0x0321DFC8 CBZ X20, 0x321E0C0
	0x0321DFCC LDR W8, [X19 + 0x1C]
	0x0321DFD0 LDR W9, [X20 + 0x18]
	0x0321DFD4 CMP W8, W9
	0x0321DFD8 B.GT 0x321E0C4
	0x0321DFDC LDR X0, [X19 + 0x10]
	0x0321DFE0 CBZ X0, 0x321E0C0
	0x0321DFE4 LDR X8, [X0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11C0000
	006 Move X21, 0xF05000
	007 Move W8, [X20+808]
	008 Move X21, [X21+3472]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xF05000
	015 Move X0, [X0+3472]
	016 Call 0x1C17CF4
	017 Move X0, 0xED7000
	018 Move X0, [X0+1560]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+808], W8
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X20, 0xED7000
	028 Move X20, [X20+1560]
	029 Move X0, X19
	030 Move W1, W31
	031 Call BigInteger.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {44}
	036 Move X0, [X20]
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move W1, 1
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Call 0x1C17D6C
	043 Return X0
	044 Move X0, X19
	045 Call BigInteger.BitCount, X0
	046 Move X8, [X20]
	047 NotImplemented "Instruction SBFM not yet implemented."
	048 And W31, W0, 7
	049 NotImplemented "Instruction CINC not yet implemented."
	050 Move X0, X8
	051 Move W1, W20
	052 Call 0x1C17D6C
	053 Move W8, [X19+16]
	054 Subtract W8, W8, 1
	055 And W10, W20, 3
	056 Move W11, 4
	057 Move W9, W31
	058 NotImplemented "Instruction CSEL not yet implemented."
	059 Move X11, [X19+24]
	060 Compare X11, 0
	061 JumpIfEqual {90}
	062 Move W12, [X11+24]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Compare X0, 0
	065 JumpIfEqual {90}
	066 Add X11, X11, W8
	067 Move W11, [X11+32]
	068 Move W12, W10
	069 Subtract W13, W9, 1
	070 Move W15, [X0+24]
	071 Add X14, X13, X12
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Subtract X12, X12, 1
	074 Add X14, X0, W14
	075 Move [X14+32], W11
	076 Add X14, X12, 1
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move W11, W11
	079 ShiftRight W11, 8
	080 And W11, W11, 0x7FFFFFFF
	081 Add W9, W10, W9
	082 Subtract W8, W8, 1
	083 Move W10, 4
	084 Move X20, [X31+16]
	085 Move X19, [X31+24]
	086 Move X30, [X31+32]
	087 Move X21, [X31+40]
	088 Return X0
	089 Call 0x1C17F28
	090 Call 0x1C17F20

Method: System.Boolean op_Equality(Mono.Math.BigInteger bi1, System.UInt32 ui)

Disassembly:
	0x03220E58 CBNZ W8, 0x3220E60
	0x03220E5C BL 0x1C16DFC
	0x03220E60 MOV X0, X20
	0x03220E64 MOV X1, X31
	0x03220E68 BL 0x321BFF8
	0x03220E6C TBZ X0, 0x0, 0x3220E80
	0x03220E70 LDR X0, [X19 + 0x28]
	0x03220E74 CBZ X0, 0x3220F9C
	0x03220E78 BL 0x321CB3C
	0x03220E7C STR X31, [X19 + 0x28]
	0x03220E80 LDR X0, [X22]
	0x03220E84 LDR X20, [X19 + 0x30]
	0x03220E88 LDR W8, [X0 + 0xE0]
	0x03220E8C CBNZ W8, 0x3220E94
	0x03220E90 BL 0x1C16DFC
	0x03220E94 MOV X0, X20
	0x03220E98 MOV X1, X31
	0x03220E9C BL 0x321BFF8
	0x03220EA0 TBZ X0, 0x0, 0x3220EB4
	0x03220EA4 LDR X0, [X19 + 0x30]
	0x03220EA8 CBZ X0, 0x3220F9C
	0x03220EAC BL 0x321CB3C
	0x03220EB0 STR X31, [X19 + 0x30]
	0x03220EB4 LDR X0, [X22]
	0x03220EB8 LDR X20, [X19 + 0x38]
	0x03220EBC LDR W8, [X0 + 0xE0]
	0x03220EC0 CBNZ W8, 0x3220EC8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X0, 0
	005 JumpIfEqual {28}
	006 Move W8, [X0+16]
	007 Move W19, W1
	008 Move X20, X0
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X0, X20
	011 Call BigInteger.Normalize, X0
	012 Move W8, [X20+16]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X8, [X20+24]
	015 Compare X8, 0
	016 JumpIfEqual {28}
	017 Move W9, [X8+24]
	018 Compare W9, 0
	019 JumpIfEqual {29}
	020 Move W8, [X8+32]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 NotImplemented "Instruction CSET not yet implemented."
	023 Move W0, W31
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Return X0
	028 Call 0x1C17F20
	029 Call 0x1C17F28

Method: System.Boolean op_Inequality(Mono.Math.BigInteger bi1, System.UInt32 ui)

Disassembly:
	0x0322165C LDR W22, [X19 + 0x10]
	0x03221660 LDR X0, [X8]
	0x03221664 BL 0x1C16F10
	0x03221668 MOV W2, W22
	0x0322166C MOV X20, X0
	0x03221670 BL 0x32211F0
	0x03221674 CBZ X20, 0x32217DC
	0x03221678 CBZ X21, 0x32217DC
	0x0322167C LDR X11, [X21 + 0x18]
	0x03221680 CBZ X11, 0x32217DC
	0x03221684 LDR X8, [X19 + 0x18]
	0x03221688 LDR X9, [X20 + 0x18]
	0x0322168C LDR W14, [X11 + 0x18]
	0x03221690 MOV X10, X31
	0x03221694 MOV W13, W31
	0x03221698 ADD X15, X11, 0x20
	0x0322169C ADD X16, X8, 0x20
	0x032216A0 ADD X17, X9, 0x20
	0x032216A4 CMP X10, X14
	0x032216A8 B.CS 0x32217D8
	0x032216AC CBZ X8, 0x32217DC
	0x032216B0 LDR X11, [X8 + 0x18]
	0x032216B4 CMP X10, W11, UXTW
	0x032216B8 B.CS 0x32217D8
	0x032216BC CBZ X9, 0x32217DC
	0x032216C0 LDR X12, [X9 + 0x18]
	0x032216C4 CMP X10, W12, UXTW

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X0, 0
	005 JumpIfEqual {28}
	006 Move W8, [X0+16]
	007 Move W19, W1
	008 Move X20, X0
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X0, X20
	011 Call BigInteger.Normalize, X0
	012 Move W8, [X20+16]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X8, [X20+24]
	015 Compare X8, 0
	016 JumpIfEqual {28}
	017 Move W9, [X8+24]
	018 Compare W9, 0
	019 JumpIfEqual {29}
	020 Move W8, [X8+32]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 NotImplemented "Instruction CSET not yet implemented."
	023 Move W0, 1
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Return X0
	028 Call 0x1C17F20
	029 Call 0x1C17F28

Method: System.Boolean op_Equality(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2)

Disassembly:
	0x0321D64C LDR X0, [X0 + 0xDE0]
	0x0321D650 BL 0x1C16CF4
	0x0321D654 MOVZ W8, 0x1
	0x0321D658 STRB W8, [X21 + 0x304]
	0x0321D65C ADRP X22, 0xF04000
	0x0321D660 LDR X21, [X20 + 0x68]!
	0x0321D664 LDR X22, [X22 + 0xDE0]
	0x0321D668 MOV X0, X21
	0x0321D66C MOV X1, X19
	0x0321D670 MOV X2, X31
	0x0321D674 BL 0x33C0DE4
	0x0321D678 MOV X8, X0
	0x0321D67C CBZ X0, 0x321D690
	0x0321D680 LDR X1, [X22]
	0x0321D684 LDR X9, [X8]
	0x0321D688 CMP X9, X1
	0x0321D68C B.NE 0x321D6BC
	0x0321D690 MOV X0, X20
	0x0321D694 MOV X1, X8
	0x0321D698 MOV X2, X21
	0x0321D69C BL 0x1C24138
	0x0321D6A0 CMP X21, X0
	0x0321D6A4 MOV X21, X0
	0x0321D6A8 B.NE 0x321D668
	0x0321D6AC LDP X20, X19, [X31 + 0x20]
	0x0321D6B0 LDP X22, X21, [X31 + 0x10]
	0x0321D6B4 LDR X30, [X31], #0x30
	0x0321D6B8 RET
	0x0321D6BC MOV X0, X8
	0x0321D6C0 BL 0x1C171E0
	0x0321D6C4 STR X30, [X31 - 0x30]!
	0x0321D6C8 STP X22, X21, [X31 + 0x10]
	0x0321D6CC STP X20, X19, [X31 + 0x20]
	0x0321D6D0 ADRP X21, 0x11BF000
	0x0321D6D4 LDRB W8, [X21 + 0x305]
	0x0321D6D8 MOV X19, X1
	0x0321D6DC MOV X20, X0
	0x0321D6E0 TBNZ X8, 0x0, 0x321D6F8
	0x0321D6E4 ADRP X0, 0xF04000
	0x0321D6E8 LDR X0, [X0 + 0xDE0]
	0x0321D6EC BL 0x1C16CF4
	0x0321D6F0 MOVZ W8, 0x1
	0x0321D6F4 STRB W8, [X21 + 0x305]
	0x0321D6F8 ADRP X22, 0xF04000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11C0000
	006 Move W8, [X21+809]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF05000
	014 Move X0, [X0+3472]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+809], W8
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move X21, 0xF05000
	020 Move X21, [X21+3472]
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X31
	027 Move X1, X20
	028 Call BigInteger.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {45}
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, X31
	039 Move X1, X19
	040 Call BigInteger.op_Equality, X0, X1
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {47}
	045 Move W0, W31
	046 Move W0, 1
	047 Move X0, X20
	048 Move X1, X19
	049 Call Kernel.Compare, X0, X1
	050 NotImplemented "Instruction CMP not yet implemented."
	051 NotImplemented "Instruction CSET not yet implemented."
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Return X0

Method: System.Boolean op_Inequality(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2)

Disassembly:
	0x0321CFF8 ADRP X21, 0x11C0000
	0x0321CFFC LDRB W8, [X21 + 0x302]
	0x0321D000 MOV X20, X1
	0x0321D004 MOV X19, X0
	0x0321D008 TBNZ X8, 0x0, 0x321D020
	0x0321D00C ADRP X0, 0xF04000
	0x0321D010 LDR X0, [X0 + 0xD90]
	0x0321D014 BL 0x1C16CF4
	0x0321D018 MOVZ W8, 0x1
	0x0321D01C STRB W8, [X21 + 0x302]
	0x0321D020 LDRB W8, [X19 + 0x23]
	0x0321D024 CBNZ W8, 0x321D388
	0x0321D028 LDR X21, [X20]
	0x0321D02C CBZ X21, 0x321D3C4
	0x0321D030 LDR X8, [X20 + 0x8]
	0x0321D034 CBZ X8, 0x321D3D0
	0x0321D038 ADRP X24, 0xF04000
	0x0321D03C LDR X24, [X24 + 0xD90]
	0x0321D040 LDR X0, [X24]
	0x0321D044 BL 0x1C16F10
	0x0321D048 MOV X1, X21
	0x0321D04C MOV X22, X0
	0x0321D050 BL 0x321C804
	0x0321D054 STR X22, [X19 + 0x60]
	0x0321D058 LDR X0, [X24]
	0x0321D05C LDR X21, [X20 + 0x8]
	0x0321D060 BL 0x1C16F10
	0x0321D064 MOV X1, X21
	0x0321D068 MOV X22, X0
	0x0321D06C BL 0x321C804
	0x0321D070 MOVI V0.2D, 0x0
	0x0321D074 MOV X23, X19
	0x0321D078 STR V0, [X23 + 0x28]!
	0x0321D07C STR X22, [X23 + 0x30]
	0x0321D080 STP V0, V0, [X23 + 0x10]
	0x0321D084 LDR X21, [X20 + 0x38]
	0x0321D088 CBZ X21, 0x321D0A4
	0x0321D08C LDR X0, [X24]
	0x0321D090 BL 0x1C16F10
	0x0321D094 MOV X1, X21
	0x0321D098 MOV X22, X0
	0x0321D09C BL 0x321C804
	0x0321D0A0 STR X22, [X23]
	0x0321D0A4 LDR X21, [X20 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11C0000
	006 Move W8, [X21+810]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF05000
	014 Move X0, [X0+3472]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+810], W8
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move X21, 0xF05000
	020 Move X21, [X21+3472]
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X31
	027 Move X1, X20
	028 Call BigInteger.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {45}
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, X31
	039 Move X1, X19
	040 Call BigInteger.op_Equality, X0, X1
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {47}
	045 Move W0, 1
	046 Move W0, W31
	047 Move X0, X20
	048 Move X1, X19
	049 Call Kernel.Compare, X0, X1
	050 NotImplemented "Instruction CMP not yet implemented."
	051 NotImplemented "Instruction CSET not yet implemented."
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Return X0

Method: System.Boolean op_GreaterThan(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2)

Disassembly:
	0x032236F8 LDR W14, [X31]
	0x032236FC SBFM X16, X4, 0x3E, 0x1F
	0x03223700 ADD X10, X15, W4, 0x2, SXTW
	0x03223704 ADD X11, X11, W7, 0x2, SXTW
	0x03223708 ADD X12, X10, W5, 0x2, SXTW
	0x0322370C ADD X13, X10, 0x4

ISIL:
	001 Move [X31-16], X30
	002 Call Kernel.Compare, X0, X1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Move X30, [X31+16]
	006 Return X0

Method: System.Boolean op_LessThan(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2)

Disassembly:
	0x0321D2BC BL 0x3222C00
	0x0321D2C0 LDR X8, [X23]
	0x0321D2C4 MOV X22, X0
	0x0321D2C8 MOV X1, X22
	0x0321D2CC MOV X0, X8

ISIL:
	001 Move [X31-16], X30
	002 Call Kernel.Compare, X0, X1
	003 Move W0, W0
	004 ShiftRight W0, 31
	005 And W0, W0, 0x7FFFFFFF
	006 Move X30, [X31+16]
	007 Return X0

Method: System.Boolean op_GreaterThanOrEqual(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2)

Disassembly:
	0x03220EC4 BL 0x1C16DFC
	0x03220EC8 MOV X0, X20
	0x03220ECC MOV X1, X31
	0x03220ED0 BL 0x321BFF8
	0x03220ED4 TBZ X0, 0x0, 0x3220EE8
	0x03220ED8 LDR X0, [X19 + 0x38]

ISIL:
	001 Move [X31-16], X30
	002 Call Kernel.Compare, X0, X1
	003 NotImplemented "Instruction ORN not yet implemented."
	004 Move W0, W8
	005 ShiftRight W0, 31
	006 And W0, W0, 0x7FFFFFFF
	007 Move X30, [X31+16]
	008 Return X0

Method: System.Boolean op_LessThanOrEqual(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2)

Disassembly:
	0x03221294 STRB W8, [X21 + 0x319]
	0x03221298 MOVZ W8, 0x1
	0x0322129C MOV X0, X20
	0x032212A0 MOV X1, X31
	0x032212A4 STR W8, [X20 + 0x10]
	0x032212A8 BL 0x33BDD8C

ISIL:
	001 Move [X31-16], X30
	002 Call Kernel.Compare, X0, X1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Move X30, [X31+16]
	006 Return X0

Method: System.String ToString(System.UInt32 radix)

Disassembly:
	0x03223710 ADD X14, X11, W14, 0x2, SXTW
	0x03223714 ADD X15, X15, X16
	0x03223718 LDR W16, [X8]
	0x0322371C CBZ W16, 0x32237C0
	0x03223720 CMP X10, X12
	0x03223724 B.CS 0x32237C0
	0x03223728 CMP X11, X14
	0x0322372C B.CS 0x32237C0
	0x03223730 LDR W17, [X10]
	0x03223734 LDR W1, [X11]
	0x03223738 MOV X0, X11
	0x0322373C MADD X16, X17, X16, X1
	0x03223740 STR W16, [X0], #0x4
	0x03223744 CMP X0, X14
	0x03223748 CSET W17, CC
	0x0322374C CMP X13, X12
	0x03223750 UBFM X16, X16, 0x20, 0x3F
	0x03223754 B.CS 0x32237B4
	0x03223758 CMP X0, X14
	0x0322375C B.CS 0x32237B4
	0x03223760 MOV X0, X31
	0x03223764 ADD X2, X11, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11BA000
	007 Move X22, 0xEFF000
	008 Move W8, [X21+811]
	009 Move X22, [X22+1808]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEFF000
	017 Move X0, [X0+1808]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+811], W8
	021 Move X2, [X22]
	022 Move X0, X20
	023 Move W1, W19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]

Method: System.String ToString(System.UInt32 radix, System.String characterSet)

Disassembly:
	0x03223768 ADD X17, X15, X0
	0x0322376C LDR W5, [X2 + 0x4]
	0x03223770 LDR W3, [X8]
	0x03223774 LDR W4, [X17 + 0x4]
	0x03223778 ADD X1, X2, 0x8
	0x0322377C ADD X16, X16, X5
	0x03223780 ADD X6, X17, 0x8
	0x03223784 CMP X1, X14
	0x03223788 MADD X16, X4, X3, X16
	0x0322378C CSET W17, CC
	0x03223790 CMP X6, X12
	0x03223794 STR W16, [X2 + 0x4]
	0x03223798 UBFM X16, X16, 0x20, 0x3F
	0x0322379C ADD X0, X0, 0x4
	0x032237A0 B.CS 0x32237AC
	0x032237A4 CMP X1, X14
	0x032237A8 B.CC 0x3223764
	0x032237AC ADD X0, X11, X0
	0x032237B0 ADD X0, X0, 0x4
	0x032237B4 CBZ W17, 0x32237C0
	0x032237B8 CBZ X16, 0x32237C0
	0x032237BC STR W16, [X0]
	0x032237C0 ADD X8, X8, 0x4
	0x032237C4 CMP X8, X9
	0x032237C8 ADD X11, X11, 0x4
	0x032237CC B.CC 0x3223718
	0x032237D0 RET
	0x032237D4 STR X30, [X31 - 0x10]!
	0x032237D8 CBZ X0, 0x3223900
	0x032237DC CBZ X1, 0x3223900
	0x032237E0 LDR X9, [X1 + 0x18]
	0x032237E4 CBZ X9, 0x3223900
	0x032237E8 LDR X8, [X0 + 0x18]
	0x032237EC LDR W11, [X9 + 0x18]
	0x032237F0 MOV X10, X31
	0x032237F4 MOV W16, W31
	0x032237F8 ADD X12, X9, 0x20
	0x032237FC ADD X13, X8, 0x20
	0x03223800 CMP X10, X11
	0x03223804 B.CS 0x32238FC
	0x03223808 CBZ X8, 0x3223900
	0x0322380C LDR X9, [X8 + 0x18]
	0x03223810 CMP X10, W9, UXTW
	0x03223814 B.CS 0x32238FC
	0x03223818 LDR W15, [X12, X10, LSL #2]
	0x0322381C MOV W14, W16
	0x03223820 LDR W16, [X13, X10, LSL #2]
	0x03223824 ADD W15, W15, W14
	0x03223828 CMP W15, W14
	0x0322382C SUB W17, W16, W15
	0x03223830 STR W17, [X13, X10, LSL #2]
	0x03223834 LDR W3, [X1 + 0x10]
	0x03223838 ORN W2, W31, W15, 0x0
	0x0322383C CSET W16, CC
	0x03223840 CMP W17, W2
	0x03223844 CSET W4, HI
	0x03223848 ADD X10, X10, 0x1
	0x0322384C CMP X10, X3
	0x03223850 ORR W16, W16, W4, 0x0
	0x03223854 B.CC 0x3223800
	0x03223858 LDR W13, [X0 + 0x10]
	0x0322385C CMP W17, W2
	0x03223860 CSET W11, HI
	0x03223864 CMP W15, W14
	0x03223868 CSET W12, CC
	0x0322386C CMP W13, W10
	0x03223870 B.EQ 0x32238BC
	0x03223874 ORR W11, W12, W11, 0x0
	0x03223878 CBZ W11, 0x32238BC
	0x0322387C CMP W10, W9
	0x03223880 CSEL X11, X10, X9, HI
	0x03223884 AND X11, X11, 0x0
	0x03223888 ADD X12, X8, 0x20
	0x0322388C CMP X11, X10
	0x03223890 B.EQ 0x32238FC
	0x03223894 LDR W13, [X12, X10, LSL #2]
	0x03223898 SUBS W13, W13, 0x1
	0x0322389C STR W13, [X12, X10, LSL #2]
	0x032238A0 LDR W13, [X0 + 0x10]
	0x032238A4 B.NE 0x32238B4
	0x032238A8 ADD X10, X10, 0x1
	0x032238AC CMP X10, X13
	0x032238B0 B.CC 0x322388C
	0x032238B4 CBNZ W13, 0x32238C0
	0x032238B8 B 0x32238EC
	0x032238BC CBZ W13, 0x32238EC
	0x032238C0 SUB W10, W13, 0x1
	0x032238C4 MOV W11, W10
	0x032238C8 CMP W10, W9
	0x032238CC B.CS 0x32238FC
	0x032238D0 ADD X12, X8, W11, 0x2, SXTW
	0x032238D4 LDR W12, [X12 + 0x20]
	0x032238D8 CBNZ W12, 0x32238F4
	0x032238DC STR W11, [X0 + 0x10]
	0x032238E0 SUB W11, W11, 0x1
	0x032238E4 ADDS W31, W11, 0x1
	0x032238E8 B.NE 0x32238C8
	0x032238EC MOVZ W8, 0x1
	0x032238F0 STR W8, [X0 + 0x10]
	0x032238F4 LDR X30, [X31], #0x10
	0x032238F8 RET
	0x032238FC BL 0x1C16F28
	0x03223900 BL 0x1C16F20
	0x03223904 STR X30, [X31 - 0x10]!
	0x03223908 CBZ X0, 0x3223A90
	0x0322390C CBZ X1, 0x3223A90
	0x03223910 LDR W12, [X0 + 0x10]
	0x03223914 LDR W14, [X1 + 0x10]
	0x03223918 CMP W12, W14
	0x0322391C CSEL X8, X1, X0, CC
	0x03223920 LDR X9, [X8 + 0x18]
	0x03223924 CSEL W8, W14, W12, CC
	0x03223928 CSEL X10, X0, X1, CC
	0x0322392C CBZ X9, 0x3223A90
	0x03223930 LDR W11, [X10 + 0x10]
	0x03223934 LDR X17, [X10 + 0x18]
	0x03223938 LDR X10, [X0 + 0x18]
	0x0322393C LDR W13, [X9 + 0x18]
	0x03223940 CMP W11, 0x1
	0x03223944 MOV X16, X31
	0x03223948 MOV X1, X31
	0x0322394C ADD X2, X9, 0x20
	0x03223950 ADD X3, X17, 0x20
	0x03223954 CSINC W11, W11, W31, HI
	0x03223958 ADD X4, X10, 0x20
	0x0322395C CMP X16, X13
	0x03223960 B.CS 0x3223A8C
	0x03223964 CBZ X17, 0x3223A90
	0x03223968 LDR W15, [X17 + 0x18]
	0x0322396C CMP X16, X15
	0x03223970 B.CS 0x3223A8C
	0x03223974 CBZ X10, 0x3223A90
	0x03223978 LDR W15, [X10 + 0x18]
	0x0322397C CMP X16, X15
	0x03223980 B.CS 0x3223A8C
	0x03223984 LDR W5, [X2, X16, LSL #2]
	0x03223988 LDR W6, [X3, X16, LSL #2]
	0x0322398C ADD X1, X1, X5
	0x03223990 ADD X1, X1, X6
	0x03223994 STR W1, [X4, X16, LSL #2]
	0x03223998 ADD X16, X16, 0x1
	0x0322399C CMP X11, X16
	0x032239A0 UBFM X1, X1, 0x20, 0x3F
	0x032239A4 B.NE 0x322395C

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X22, 0x11BA000
	011 Move W8, [X22+812]
	012 Move X19, X2
	013 Move W20, W1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {36}
	019 Move X0, 0xEFF000
	020 Move X0, [X0+3472]
	021 Call 0x1C17CF4
	022 Move X0, 0xED3000
	023 Move X0, [X0+368]
	024 Call 0x1C17CF4
	025 Move X0, 0xED1000
	026 Move X0, [X0+2440]
	027 Call 0x1C17CF4
	028 Move X0, 0xEF5000
	029 Move X0, [X0+3776]
	030 Call 0x1C17CF4
	031 Move X0, 0xED3000
	032 Move X0, [X0+1200]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X22+812], W8
	036 NotImplemented "Instruction STRH not yet implemented."
	037 Compare X19, 0
	038 JumpIfEqual {129}
	039 NotImplemented "Instruction LDRSW not yet implemented."
	040 NotImplemented "Instruction CMP not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X24, 0xEFF000
	043 Move X24, [X24+3472]
	044 Move X0, [X24]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X21
	050 Move W1, W31
	051 Call BigInteger.op_Equality, X0, X1
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {58}
	056 Move X8, 0xED3000
	057 Move X8, [X8+1200]
	058 Move X0, [X24]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {63}
	062 Call 0x1C17DFC
	063 Move W1, 1
	064 Move X0, X21
	065 Call BigInteger.op_Equality, X0, X1
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfNotEqual {84}
	070 Move X8, 0xEF5000
	071 Move X8, [X8+3776]
	072 Move X22, [X8]
	073 Move X0, X22
	074 Move X20, [X31+64]
	075 Move X19, [X31+72]
	076 Move X22, [X31+48]
	077 Move X21, [X31+56]
	078 Move X24, [X31+32]
	079 Move X23, [X31+40]
	080 Move X26, [X31+16]
	081 Move X25, [X31+24]
	082 Move X30, [X31+80]
	083 Return X0
	084 Move X8, 0xED1000
	085 Move X8, [X8+2440]
	086 Move X0, [X24]
	087 Move X22, [X8]
	088 Call 0x1C17F10
	089 Move X1, X21
	090 Move X23, X0
	091 Call BigInteger..ctor, X0, X1
	092 Move X26, 0xED3000
	093 Move X26, [X26+368]
	094 Add X25, X19, 20
	095 Move X0, [X24]
	096 Move W8, [X0+224]
	097 Compare W8, 0
	098 JumpIfNotEqual {100}
	099 Call 0x1C17DFC
	100 Move X0, X23
	101 Move W1, W31
	102 Call BigInteger.op_Inequality, X0, X1
	103 Move TEMP, X0
	104 And TEMP, TEMP, 1
	105 Compare TEMP, 1
	106 JumpIfNotEqual {73}
	107 Move X0, X23
	108 Move W1, W20
	109 Call Kernel.SingleByteDivideInPlace, X0, X1
	110 NotImplemented "Instruction LDRSW not yet implemented."
	111 Move W9, W0
	112 Move W21, W0
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move X0, X31
	115 Call ThrowHelper.ThrowIndexOutOfRangeException
	116 NotImplemented "Instruction LDRH not yet implemented."
	117 Move X0, [X26]
	118 NotImplemented "Instruction STRH not yet implemented."
	119 Move W8, [X0+224]
	120 Compare W8, 0
	121 JumpIfNotEqual {123}
	122 Call 0x1C17DFC
	123 Add X0, X31, 12
	124 Move X1, X31
	125 Call Char.ToString, X0
	126 Move X1, X22
	127 Call String.Concat, X0, X1
	128 Move X22, X0
	129 Call 0x1C17F20
	130 Move X0, 0xED9000
	131 Move X0, [X0+1400]
	132 Call 0x1C17D08
	133 Call 0x1C17F10
	134 Move X19, X0
	135 Move X0, 0xEFF000
	136 Move X0, [X0+1816]
	137 Call 0x1C17D08
	138 Move X20, X0
	139 Move X0, 0xEFF000
	140 Move X0, [X0+1824]
	141 Move X0, 0xED9000
	142 Move X0, [X0+1400]
	143 Call 0x1C17D08
	144 Call 0x1C17F10
	145 Move X19, X0
	146 Move X0, 0xEFF000
	147 Move X0, [X0+1832]
	148 Call 0x1C17D08
	149 Move X20, X0
	150 Move X0, 0xEFF000
	151 Move X0, [X0+1840]
	152 Call 0x1C17D08
	153 Move X2, X0
	154 Move X0, X19
	155 Move X1, X20
	156 Move X3, X31
	157 Call ArgumentException..ctor, X0, X1, X2
	158 Move X0, 0xEFF000
	159 Move X0, [X0+3928]
	160 Call 0x1C17D08
	161 Move X1, X0
	162 Move X0, X19
	163 Call 0x1C17DEC

Method: System.Void Normalize()

Disassembly:
	0x032223F8 RET
	0x032223FC BL 0x1C16F20
	0x03222400 BL 0x1C16F28
	0x03222404 STR X30, [X31 - 0x40]!
	0x03222408 STP X24, X23, [X31 + 0x10]
	0x0322240C STP X22, X21, [X31 + 0x20]
	0x03222410 STP X20, X19, [X31 + 0x30]
	0x03222414 ADRP X21, 0x11BA000
	0x03222418 ADRP X22, 0xEFF000
	0x0322241C LDRB W8, [X21 + 0x325]
	0x03222420 LDR X22, [X22 + 0xD90]
	0x03222424 MOV X20, X1
	0x03222428 MOV X19, X0
	0x0322242C TBNZ X8, 0x0, 0x3222450
	0x03222430 ADRP X0, 0xEFF000
	0x03222434 LDR X0, [X0 + 0xD90]
	0x03222438 BL 0x1C16CF4
	0x0322243C ADRP X0, 0xED1000
	0x03222440 LDR X0, [X0 + 0x618]
	0x03222444 BL 0x1C16CF4
	0x03222448 MOVZ W8, 0x1
	0x0322244C STRB W8, [X21 + 0x325]

ISIL:
	001 Move [X31-16], X30
	002 Move W10, [X0+16]
	003 Compare W10, 0
	004 JumpIfEqual {18}
	005 Move X8, [X0+24]
	006 Compare X8, 0
	007 JumpIfEqual {23}
	008 Move W9, [X8+24]
	009 Subtract W10, W10, 1
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Add X11, X8, W10
	012 Move W11, [X11+32]
	013 Compare W11, 0
	014 JumpIfNotEqual {20}
	015 Move [X0+16], W10
	016 Subtract W10, W10, 1
	017 Add W31, W10, 1
	018 Move W8, 1
	019 Move [X0+16], W8
	020 Move X30, [X31+16]
	021 Return 
	022 Call 0x1C17F28
	023 Call 0x1C17F20

Method: System.Void Clear()

Disassembly:
	0x0321DB3C LDR W8, [X0 + 0xE0]
	0x0321DB40 CBNZ W8, 0x321DB48
	0x0321DB44 BL 0x1C16DFC
	0x0321DB48 MOV X0, X20
	0x0321DB4C MOV X1, X31
	0x0321DB50 BL 0x33225A0
	0x0321DB54 MOV X1, X0
	0x0321DB58 MOV X0, X25
	0x0321DB5C MOV X2, X31
	0x0321DB60 BL 0x32333E0
	0x0321DB64 ADRP X8, 0xF04000
	0x0321DB68 LDR X8, [X8 + 0x5F8]
	0x0321DB6C LDR X1, [X8]
	0x0321DB70 MOV X0, X25
	0x0321DB74 MOV X2, X31
	0x0321DB78 BL 0x32333E0
	0x0321DB7C ADRP X8, 0xF04000
	0x0321DB80 LDR X8, [X8 + 0x600]
	0x0321DB84 LDR X1, [X8]
	0x0321DB88 MOV X0, X25

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+16]
	003 Compare W8, 0
	004 JumpIfEqual {17}
	005 Move X8, [X0+24]
	006 Compare X8, 0
	007 JumpIfEqual {20}
	008 Move W9, [X8+24]
	009 Move X10, X31
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Add X11, X8, X10
	012 Move [X11+32], W31
	013 Move W11, [X0+16]
	014 Add W10, W10, 1
	015 Move X10, W10
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move X30, [X31+16]
	018 Return 
	019 Call 0x1C17F28
	020 Call 0x1C17F20

Method: System.Int32 GetHashCode()

Disassembly:
	0x03223A58 ADD W8, W8, 0x1
	0x03223A5C STR W8, [X0 + 0x10]
	0x03223A60 LDR X30, [X31], #0x10
	0x03223A64 B 0x32213F8
	0x03223A68 CMP W11, W15
	0x03223A6C B.CS 0x3223A8C
	0x03223A70 ADD X8, X10, W11, 0x2, UXTW
	0x03223A74 MOVZ W9, 0x1
	0x03223A78 ADD W10, W11, 0x1
	0x03223A7C STR W9, [X8 + 0x20]
	0x03223A80 STR W10, [X0 + 0x10]
	0x03223A84 LDR X30, [X31], #0x10
	0x03223A88 RET
	0x03223A8C BL 0x1C16F28
	0x03223A90 BL 0x1C16F20
	0x03223A94 STP X30, X23, [X31 - 0x30]!
	0x03223A98 STP X22, X21, [X31 + 0x10]
	0x03223A9C STP X20, X19, [X31 + 0x20]
	0x03223AA0 ADRP X22, 0x11B9000
	0x03223AA4 ADRP X23, 0xEFE000
	0x03223AA8 LDRB W8, [X22 + 0x334]
	0x03223AAC LDR X23, [X23 + 0xD90]

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+16]
	003 Compare W8, 0
	004 JumpIfEqual {17}
	005 Move X11, [X0+24]
	006 Compare X11, 0
	007 JumpIfEqual {21}
	008 Move W10, [X11+24]
	009 Move X9, X31
	010 Move W0, W31
	011 Add X11, X11, 32
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W12, [X11]
	014 Add X9, X9, 1
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Xor W0, W12, W0
	017 Move W0, W31
	018 Move X30, [X31+16]
	019 Return X0
	020 Call 0x1C17F28
	021 Call 0x1C17F20

Method: System.String ToString()

Disassembly:
	0x03223AB0 MOV X20, X2
	0x03223AB4 MOV X21, X1

ISIL:
	001 Move W1, 10
	002 Call BigInteger.ToString, X0, X1
	003 Return X0

Method: System.Boolean Equals(System.Object o)

Disassembly:
	0x03223AB8 MOV X19, X0
	0x03223ABC TBNZ X8, 0x0, 0x3223AD4
	0x03223AC0 ADRP X0, 0xEFE000
	0x03223AC4 LDR X0, [X0 + 0xD90]
	0x03223AC8 BL 0x1C16CF4
	0x03223ACC MOVZ W8, 0x1
	0x03223AD0 STRB W8, [X22 + 0x334]
	0x03223AD4 LDR X0, [X23]
	0x03223AD8 LDR W8, [X0 + 0xE0]
	0x03223ADC CBNZ W8, 0x3223AE4
	0x03223AE0 BL 0x1C16DFC
	0x03223AE4 MOV X0, X21
	0x03223AE8 MOV W1, W31
	0x03223AEC BL 0x321FE58
	0x03223AF0 TBNZ X0, 0x0, 0x3223B14
	0x03223AF4 LDR X0, [X23]
	0x03223AF8 LDR W8, [X0 + 0xE0]
	0x03223AFC CBNZ W8, 0x3223B04
	0x03223B00 BL 0x1C16DFC
	0x03223B04 MOV X0, X20
	0x03223B08 MOV W1, W31
	0x03223B0C BL 0x321FE58
	0x03223B10 TBZ X0, 0x0, 0x3223B38
	0x03223B14 LDR X0, [X23]
	0x03223B18 LDR W8, [X0 + 0xE0]
	0x03223B1C CBNZ W8, 0x3223B24
	0x03223B20 BL 0x1C16DFC
	0x03223B24 LDP X20, X19, [X31 + 0x20]
	0x03223B28 LDP X22, X21, [X31 + 0x10]
	0x03223B2C MOV W0, W31
	0x03223B30 LDP X30, X23, [X31], #0x30
	0x03223B34 B 0x321C2D0
	0x03223B38 LDR X0, [X23]
	0x03223B3C LDR X22, [X19 + 0x10]
	0x03223B40 LDR W8, [X0 + 0xE0]
	0x03223B44 CBNZ W8, 0x3223B4C
	0x03223B48 BL 0x1C16DFC
	0x03223B4C MOV X0, X21
	0x03223B50 MOV X1, X22
	0x03223B54 BL 0x32214D8
	0x03223B58 CMP W0, 0x1
	0x03223B5C B.LT 0x3223B84
	0x03223B60 LDR X0, [X23]
	0x03223B64 LDR X22, [X19 + 0x10]
	0x03223B68 LDR W8, [X0 + 0xE0]
	0x03223B6C CBNZ W8, 0x3223B74
	0x03223B70 BL 0x1C16DFC
	0x03223B74 MOV X0, X21
	0x03223B78 MOV X1, X22
	0x03223B7C BL 0x321C4E4
	0x03223B80 MOV X21, X0
	0x03223B84 LDR X0, [X23]
	0x03223B88 LDR X22, [X19 + 0x10]
	0x03223B8C LDR W8, [X0 + 0xE0]
	0x03223B90 CBNZ W8, 0x3223B98
	0x03223B94 BL 0x1C16DFC
	0x03223B98 MOV X0, X20
	0x03223B9C MOV X1, X22
	0x03223BA0 BL 0x32214D8
	0x03223BA4 CMP W0, 0x1
	0x03223BA8 B.LT 0x3223BD0
	0x03223BAC LDR X0, [X23]
	0x03223BB0 LDR X22, [X19 + 0x10]
	0x03223BB4 LDR W8, [X0 + 0xE0]
	0x03223BB8 CBNZ W8, 0x3223BC0
	0x03223BBC BL 0x1C16DFC
	0x03223BC0 MOV X0, X20
	0x03223BC4 MOV X1, X22
	0x03223BC8 BL 0x321C4E4
	0x03223BCC MOV X20, X0
	0x03223BD0 LDR X0, [X23]
	0x03223BD4 LDR W8, [X0 + 0xE0]
	0x03223BD8 CBNZ W8, 0x3223BE0
	0x03223BDC BL 0x1C16DFC
	0x03223BE0 MOV X0, X21
	0x03223BE4 MOV X1, X20
	0x03223BE8 BL 0x321C0A8
	0x03223BEC MOV X20, X0
	0x03223BF0 MOV X0, X19
	0x03223BF4 MOV X1, X20
	0x03223BF8 BL 0x3223440
	0x03223BFC MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11BA000
	006 Move W8, [X21+813]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0xEFF000
	014 Move X0, [X0+3472]
	015 Call 0x1C17CF4
	016 Move X0, 0xED1000
	017 Move X0, [X0+1880]
	018 Call 0x1C17CF4
	019 Move X0, 0xED9000
	020 Move X0, [X0+1824]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+813], W8
	024 Compare X20, 0
	025 JumpIfEqual {85}
	026 Move X8, 0xED1000
	027 Move X8, [X8+1880]
	028 Move X9, [X8]
	029 Move X8, [X20]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X9, 0xEFF000
	032 Move X9, [X9+3472]
	033 Move W10, [X8+304]
	034 Move X0, [X9]
	035 Move W9, [X0+304]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X20, X31
	038 Move X0, X20
	039 Call 0x1C17E08
	040 Move W8, [X0]
	041 Move TEMP, X8
	042 And TEMP, TEMP, -2147483648
	043 Compare TEMP, -2147483648
	044 JumpIfEqual {85}
	045 Move X8, 0xEFF000
	046 Move X8, [X8+3472]
	047 Move X0, [X8]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Move X8, 0xED9000
	053 Move X8, [X8+1824]
	054 Move X9, [X20]
	055 Move X0, X20
	056 Move X1, [X8]
	057 Move X8, [X9+64]
	058 Move X9, [X1+64]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Call 0x1C17E08
	061 Move W1, [X0]
	062 Move X0, X19
	063 Move X20, [X31+16]
	064 Move X19, [X31+24]
	065 Move X30, [X31+32]
	066 Move X21, [X31+40]
	067 Call BigInteger.op_Equality, X0, X1
	068 Return X0
	069 Move X8, [X8+200]
	070 Add X8, X8, X9
	071 NotImplemented "Instruction LDUR not yet implemented."
	072 NotImplemented "Instruction CMP not yet implemented."
	073 NotImplemented "Instruction CSEL not yet implemented."
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {78}
	077 Call 0x1C17DFC
	078 Move X0, X20
	079 Move X1, X31
	080 Call BigInteger.op_Equality, X0, X1
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfNotEqual {86}
	085 Move W0, W31
	086 Move X0, X19
	087 Move X1, X20
	088 Call Kernel.Compare, X0, X1
	089 NotImplemented "Instruction CMP not yet implemented."
	090 NotImplemented "Instruction CSET not yet implemented."
	091 Move X20, [X31+16]
	092 Move X19, [X31+24]
	093 Move X30, [X31+32]
	094 Move X21, [X31+40]
	095 Return X0
	096 Call 0x1C181E0

Method: Mono.Math.BigInteger ModInverse(Mono.Math.BigInteger modulus)

Disassembly:
	0x0321D4E0 BL 0x1C16DFC

ISIL:
	001 Call Kernel.modInverse, X0, X1
	002 Return X0

Method: Mono.Math.BigInteger ModPow(Mono.Math.BigInteger exp, Mono.Math.BigInteger n)

Disassembly:
	0x0321DA14 BL 0x32333E0
	0x0321DA18 LDR X0, [X29]
	0x0321DA1C LDR W8, [X0 + 0xE0]
	0x0321DA20 CBNZ W8, 0x321DA28
	0x0321DA24 BL 0x1C16DFC
	0x0321DA28 MOV X0, X23
	0x0321DA2C MOV X1, X31
	0x0321DA30 BL 0x33225A0
	0x0321DA34 MOV X1, X0
	0x0321DA38 MOV X0, X25
	0x0321DA3C MOV X2, X31
	0x0321DA40 BL 0x32333E0
	0x0321DA44 ADRP X8, 0xF04000
	0x0321DA48 LDR X8, [X8 + 0x618]
	0x0321DA4C LDR X1, [X8]
	0x0321DA50 MOV X0, X25
	0x0321DA54 MOV X2, X31
	0x0321DA58 BL 0x32333E0
	0x0321DA5C CBZ X22, 0x321DABC
	0x0321DA60 ADRP X8, 0xF04000
	0x0321DA64 LDR X8, [X8 + 0x638]
	0x0321DA68 LDR X1, [X8]
	0x0321DA6C MOV X0, X25
	0x0321DA70 MOV X2, X31
	0x0321DA74 BL 0x32333E0
	0x0321DA78 LDR X0, [X29]
	0x0321DA7C LDR W8, [X0 + 0xE0]
	0x0321DA80 CBNZ W8, 0x321DA88
	0x0321DA84 BL 0x1C16DFC
	0x0321DA88 MOV X0, X22

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x11C0000
	008 Move X23, 0xF05000
	009 Move W8, [X22+814]
	010 Move X23, [X23+3528]
	011 Move X21, X2
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF05000
	019 Move X0, [X0+3528]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+814], W8
	023 Move X0, [X23]
	024 Call 0x1C17F10
	025 Move X1, X21
	026 Move X22, X0
	027 Call ModulusRing..ctor, X0, X1
	028 Compare X22, 0
	029 JumpIfEqual {41}
	030 Move X0, X22
	031 Move X1, X20
	032 Move X2, X19
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X30, [X31+48]
	038 Move X23, [X31+56]
	039 Call ModulusRing.Pow, X0, X1, X2
	040 Return X0
	041 Call 0x1C17F20

Method: System.Boolean IsProbablePrime()

Disassembly:
	0x03220F98 RET
	0x03220F9C BL 0x1C16F20
	0x03220FA0 STR X30, [X31 - 0x30]!
	0x03220FA4 STP X22, X21, [X31 + 0x10]
	0x03220FA8 STP X20, X19, [X31 + 0x20]
	0x03220FAC ADRP X21, 0x11BC000
	0x03220FB0 LDRB W8, [X21 + 0x316]
	0x03220FB4 MOV X19, X1
	0x03220FB8 MOV X20, X0
	0x03220FBC TBNZ X8, 0x0, 0x3220FD4
	0x03220FC0 ADRP X0, 0xF01000
	0x03220FC4 LDR X0, [X0 + 0xF30]
	0x03220FC8 BL 0x1C16CF4
	0x03220FCC MOVZ W8, 0x1
	0x03220FD0 STRB W8, [X21 + 0x316]
	0x03220FD4 ADRP X22, 0xF01000
	0x03220FD8 LDR X21, [X20 + 0x70]!
	0x03220FDC LDR X22, [X22 + 0xF30]
	0x03220FE0 MOV X0, X21
	0x03220FE4 MOV X1, X19
	0x03220FE8 MOV X2, X31
	0x03220FEC BL 0x33C0DE4
	0x03220FF0 MOV X8, X0
	0x03220FF4 CBZ X0, 0x3221008
	0x03220FF8 LDR X1, [X22]
	0x03220FFC LDR X9, [X8]
	0x03221000 CMP X9, X1
	0x03221004 B.NE 0x3221034
	0x03221008 MOV X0, X20
	0x0322100C MOV X1, X8
	0x03221010 MOV X2, X21
	0x03221014 BL 0x1C24138
	0x03221018 CMP X21, X0
	0x0322101C MOV X21, X0
	0x03221020 B.NE 0x3220FE0
	0x03221024 LDP X20, X19, [X31 + 0x20]
	0x03221028 LDP X22, X21, [X31 + 0x10]
	0x0322102C LDR X30, [X31], #0x30
	0x03221030 RET
	0x03221034 MOV X0, X8
	0x03221038 BL 0x1C171E0
	0x0322103C STR X30, [X31 - 0x30]!
	0x03221040 STP X22, X21, [X31 + 0x10]
	0x03221044 STP X20, X19, [X31 + 0x20]
	0x03221048 ADRP X21, 0x11BB000
	0x0322104C LDRB W8, [X21 + 0x317]
	0x03221050 MOV X19, X1
	0x03221054 MOV X20, X0
	0x03221058 TBNZ X8, 0x0, 0x3221070
	0x0322105C ADRP X0, 0xF00000
	0x03221060 LDR X0, [X0 + 0xF30]
	0x03221064 BL 0x1C16CF4
	0x03221068 MOVZ W8, 0x1
	0x0322106C STRB W8, [X21 + 0x317]
	0x03221070 ADRP X22, 0xF00000
	0x03221074 LDR X21, [X20 + 0x70]!
	0x03221078 LDR X22, [X22 + 0xF30]
	0x0322107C MOV X0, X21
	0x03221080 MOV X1, X19
	0x03221084 MOV X2, X31
	0x03221088 BL 0x33C0FDC
	0x0322108C MOV X8, X0
	0x03221090 CBZ X0, 0x32210A4
	0x03221094 LDR X1, [X22]
	0x03221098 LDR X9, [X8]
	0x0322109C CMP X9, X1
	0x032210A0 B.NE 0x32210D0
	0x032210A4 MOV X0, X20
	0x032210A8 MOV X1, X8
	0x032210AC MOV X2, X21
	0x032210B0 BL 0x1C24138
	0x032210B4 CMP X21, X0
	0x032210B8 MOV X21, X0
	0x032210BC B.NE 0x322107C
	0x032210C0 LDP X20, X19, [X31 + 0x20]
	0x032210C4 LDP X22, X21, [X31 + 0x10]
	0x032210C8 LDR X30, [X31], #0x30
	0x032210CC RET
	0x032210D0 MOV X0, X8
	0x032210D4 BL 0x1C171E0
	0x032210D8 STR X30, [X31 - 0x30]!
	0x032210DC STP X22, X21, [X31 + 0x10]
	0x032210E0 STP X20, X19, [X31 + 0x20]
	0x032210E4 LDR X8, [X2 + 0x8]
	0x032210E8 STP X1, X2, [X0 + 0x20]
	0x032210EC MOV X19, X0
	0x032210F0 MOV X20, X2
	0x032210F4 STR X8, [X0 + 0x10]
	0x032210F8 LDRB W22, [X2 + 0x52]
	0x032210FC STR X0, [X0 + 0x40]
	0x03221100 MOV X0, X2
	0x03221104 MOV X21, X1
	0x03221108 BL 0x1C16D84
	0x0322110C TBZ X0, 0x0, 0x3221124
	0x03221110 CMP W22, 0x2
	0x03221114 B.NE 0x3221160
	0x03221118 ADRP X8, 0xFFFFFFFFFE993000
	0x0322111C ADD X8, X8, 0xFC
	0x03221120 B 0x32211A4
	0x03221124 CMP W22, 0x1
	0x03221128 B.NE 0x322115C
	0x0322112C LDRB W8, [X19 + 0x70]
	0x03221130 CBZ W8, 0x3221174
	0x03221134 MOV X0, X20
	0x03221138 BL 0x1C16D7C
	0x0322113C MOV W21, W0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11BD000
	007 Move X21, 0xF02000
	008 Move W8, [X20+815]
	009 Move X21, [X21+3472]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF02000
	016 Move X0, [X0+3472]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+815], W8
	020 Move X0, [X21]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X21]
	026 Move X8, [X0+184]
	027 Move X8, [X8]
	028 Compare X8, 0
	029 JumpIfEqual {124}
	030 Move X9, [X8+24]
	031 Compare W9, 0
	032 JumpIfEqual {125}
	033 Move X10, INVALID
	034 Add X9, X10, X9
	035 Add X8, X8, X9
	036 Move W0, [X8+32]
	037 Call BigInteger.op_Implicit, X0
	038 Move X1, X0
	039 Move X0, X19
	040 Call Kernel.Compare, X0, X1
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X20, X31
	043 Move X0, [X21]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {49}
	047 Call 0x1C17DFC
	048 Move X0, [X21]
	049 Move X8, [X0+184]
	050 Move X8, [X8]
	051 Compare X8, 0
	052 JumpIfEqual {124}
	053 NotImplemented "Instruction LDRSW not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move W9, [X0+224]
	056 Compare W9, 0
	057 JumpIfNotEqual {64}
	058 Call 0x1C17DFC
	059 Move X8, [X21]
	060 Move X8, [X8+184]
	061 Move X8, [X8]
	062 Compare X8, 0
	063 JumpIfEqual {124}
	064 Move W9, [X8+24]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Add X8, X8, X20
	067 Move W1, [X8+32]
	068 Move X0, X19
	069 Call Kernel.DwordMod, X0, X1
	070 Add X20, X20, 1
	071 Compare W0, 0
	072 JumpIfNotEqual {43}
	073 Move W20, W31
	074 Move X22, X31
	075 Move X0, [X21]
	076 Move W8, [X0+224]
	077 Compare W8, 0
	078 JumpIfNotEqual {81}
	079 Call 0x1C17DFC
	080 Move X0, [X21]
	081 Move X8, [X0+184]
	082 Move X8, [X8]
	083 Compare X8, 0
	084 JumpIfEqual {124}
	085 NotImplemented "Instruction LDRSW not yet implemented."
	086 NotImplemented "Instruction CMP not yet implemented."
	087 NotImplemented "Instruction CSET not yet implemented."
	088 Move W9, [X0+224]
	089 Compare W9, 0
	090 JumpIfNotEqual {97}
	091 Call 0x1C17DFC
	092 Move X8, [X21]
	093 Move X8, [X8+184]
	094 Move X8, [X8]
	095 Compare X8, 0
	096 JumpIfEqual {124}
	097 Move W9, [X8+24]
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Add X8, X8, X22
	100 Move W1, [X8+32]
	101 Move X0, X19
	102 Call BigInteger.op_Equality, X0, X1
	103 Add X22, X22, 1
	104 Move TEMP, X0
	105 And TEMP, TEMP, 1
	106 Compare TEMP, 1
	107 JumpIfNotEqual {75}
	108 Move W0, W20
	109 Move X20, [X31+32]
	110 Move X19, [X31+40]
	111 Move X22, [X31+16]
	112 Move X21, [X31+24]
	113 Move X30, [X31+48]
	114 Return X0
	115 Move X0, X19
	116 Move X20, [X31+32]
	117 Move X19, [X31+40]
	118 Move X22, [X31+16]
	119 Move X21, [X31+24]
	120 Move W1, 2
	121 Move X30, [X31+48]
	122 Call PrimalityTests.Test, X0, X1
	123 Return X0
	124 Call 0x1C17F20
	125 Call 0x1C17F28

Method: Mono.Math.BigInteger GeneratePseudoPrime(System.Int32 bits)

Disassembly:
	0x0321CF88 ADD X11, X11, W8, 0x2, UXTW
	0x0321CF8C LDR W11, [X11 + 0x20]
	0x0321CF90 MOV W12, W10
	0x0321CF94 SUB W13, W9, 0x1
	0x0321CF98 LDR W15, [X0 + 0x18]
	0x0321CF9C ADD X14, X13, X12
	0x0321CFA0 CMP W14, W15
	0x0321CFA4 B.CS 0x321CFE0
	0x0321CFA8 SUB X12, X12, 0x1
	0x0321CFAC ADD X14, X0, W14, SXTW
	0x0321CFB0 STRB W11, [X14 + 0x20]
	0x0321CFB4 ADD X14, X12, 0x1
	0x0321CFB8 CMP X14, 0x1
	0x0321CFBC UBFM W11, W11, 0x8, 0x1F
	0x0321CFC0 B.GT 0x321CF98
	0x0321CFC4 ADD W9, W10, W9
	0x0321CFC8 SUBS W8, W8, 0x1
	0x0321CFCC MOVZ W10, 0x4
	0x0321CFD0 B.PL 0x321CF70
	0x0321CFD4 LDP X20, X19, [X31 + 0x10]
	0x0321CFD8 LDP X30, X21, [X31], #0x20
	0x0321CFDC RET
	0x0321CFE0 BL 0x1C16F28
	0x0321CFE4 BL 0x1C16F20
	0x0321CFE8 STR X30, [X31 - 0x40]!
	0x0321CFEC STP X24, X23, [X31 + 0x10]
	0x0321CFF0 STP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11C1000
	006 Move X21, 0xF06000
	007 Move W8, [X20+816]
	008 Move X21, [X21+3480]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF06000
	015 Move X0, [X0+3480]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+816], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X31
	022 Move X20, X0
	023 Call Object..ctor, X0
	024 Compare X20, 0
	025 JumpIfEqual {36}
	026 Move X8, [X20]
	027 Move X0, X20
	028 Move W1, W19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X3, [X8+424]
	032 Move X2, [X8+432]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 CallNoReturn X3
	036 Call 0x1C17F20

Method: System.Void Incr2()

Disassembly:
	0x03224324 STP X28, X27, [X31 + 0x10]
	0x03224328 STP X26, X25, [X31 + 0x20]
	0x0322432C STP X24, X23, [X31 + 0x30]
	0x03224330 STP X22, X21, [X31 + 0x40]
	0x03224334 STP X20, X19, [X31 + 0x50]
	0x03224338 ADRP X21, 0x11B8000
	0x0322433C ADRP X25, 0xEFD000
	0x03224340 LDRB W8, [X21 + 0x341]
	0x03224344 LDR X25, [X25 + 0xD90]
	0x03224348 MOV W20, W1
	0x0322434C MOV X19, X0
	0x03224350 TBNZ X8, 0x0, 0x3224374
	0x03224354 ADRP X0, 0xEFD000
	0x03224358 LDR X0, [X0 + 0xD90]
	0x0322435C BL 0x1C16CF4
	0x03224360 ADRP X0, 0xEFD000
	0x03224364 LDR X0, [X0 + 0xDC8]
	0x03224368 BL 0x1C16CF4
	0x0322436C MOVZ W8, 0x1
	0x03224370 STRB W8, [X21 + 0x341]
	0x03224374 MOV X0, X19
	0x03224378 MOV W1, W20
	0x0322437C BL 0x3224194
	0x03224380 LDR X8, [X25]
	0x03224384 MOV W24, W0
	0x03224388 LDR W9, [X8 + 0xE0]
	0x0322438C CBNZ W9, 0x3224398
	0x03224390 MOV X0, X8
	0x03224394 BL 0x1C16DFC
	0x03224398 MOVZ W0, 0x1
	0x0322439C BL 0x321C2D0
	0x032243A0 MOV X1, X0
	0x032243A4 MOV X0, X19
	0x032243A8 BL 0x321C374

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+24]
	003 Compare X8, 0
	004 JumpIfEqual {30}
	005 Move W9, [X8+24]
	006 Compare W9, 0
	007 JumpIfEqual {29}
	008 Move W10, [X8+32]
	009 Add W11, W10, 2
	010 Add W31, W10, 2
	011 Move [X8+32], W11
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W10, [X8+36]
	014 Add W10, W10, 1
	015 Move [X8+36], W10
	016 Move W10, 2
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Add X11, X8, W10
	019 Move W12, [X11+32]
	020 Add W10, W10, 1
	021 Add W12, W12, 1
	022 Move [X11+32], W12
	023 Move W8, [X0+16]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Add W8, W10, 1
	026 Move [X0+16], W8
	027 Move X30, [X31+16]
	028 Return 
	029 Call 0x1C17F28
	030 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x032243AC CBZ X0, 0x32244F0
	0x032243B0 ADRP X22, 0xEFD000
	0x032243B4 LDR X22, [X22 + 0xDC8]
	0x032243B8 MOV X20, X0
	0x032243BC BL 0x322267C
	0x032243C0 MOV W21, W0
	0x032243C4 MOV X0, X20
	0x032243C8 MOV W1, W21
	0x032243CC BL 0x3222084
	0x032243D0 LDR X8, [X22]
	0x032243D4 MOV X22, X0
	0x032243D8 MOV X0, X8
	0x032243DC BL 0x1C16F10
	0x032243E0 MOV X1, X19
	0x032243E4 MOV X23, X0
	0x032243E8 BL 0x32230F8
	0x032243EC CMP W24, 0x1
	0x032243F0 B.LT 0x32244C8
	0x032243F4 MOV X27, X31
	0x032243F8 MOV W28, W24
	0x032243FC MOVZ W26, 0x1
	0x03224400 LDR X0, [X25]
	0x03224404 LDR W8, [X0 + 0xE0]
	0x03224408 CBNZ W8, 0x3224414
	0x0322440C BL 0x1C16DFC
	0x03224410 LDR X0, [X25]
	0x03224414 LDR X8, [X0 + 0xB8]
	0x03224418 LDR X8, [X8]
	0x0322441C CBZ X8, 0x32244F0
	0x03224420 LDR W9, [X8 + 0x18]
	0x03224424 CMP X27, X9
	0x03224428 B.CS 0x32244F4
	0x0322442C CBZ X23, 0x32244F0
	0x03224430 ADD X8, X8, X27, 0x2, LSL
	0x03224434 LDR W1, [X8 + 0x20]
	0x03224438 MOV X0, X23
	0x0322443C MOV X2, X22

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11B9000
	007 Move X22, 0xEF9000
	008 Move X19, 0xEFE000
	009 Move X20, 0xEFE000
	010 Move W8, [X21+817]
	011 Move X22, [X22+3336]
	012 Move X19, [X19+3944]
	013 Move X20, [X20+3472]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0xEFE000
	019 Move X0, [X0+3472]
	020 Call 0x1C17CF4
	021 Move X0, 0xEFE000
	022 Move X0, [X0+3944]
	023 Call 0x1C17CF4
	024 Move X0, 0xEF9000
	025 Move X0, [X0+3336]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+817], W8
	029 Move X0, [X22]
	030 Move W1, 783
	031 Call 0x1C17D6C
	032 Move X1, [X19]
	033 Move X2, X31
	034 Move X19, X0
	035 Call RuntimeHelpers.InitializeArray, X0, X1
	036 Move X8, [X20]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X8, [X8+184]
	040 Move [X8], X19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X30, [X31+48]
	044 Return 

