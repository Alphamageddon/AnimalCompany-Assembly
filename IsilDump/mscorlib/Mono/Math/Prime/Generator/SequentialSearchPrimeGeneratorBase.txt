Type: Mono.Math.Prime.Generator.SequentialSearchPrimeGeneratorBase

Method: Mono.Math.BigInteger GenerateSearchBase(System.Int32 bits, System.Object context)

Disassembly:
	0x03225814 LDR X17, [X17 + 0x20]
	0x03225818 CMP X16, X17
	0x0322581C B.NE 0x32258B0
	0x03225820 ADD X8, X14, X12
	0x03225824 ADD X9, X15, X12
	0x03225828 LDR X16, [X8 + 0x28]
	0x0322582C LDR X17, [X9 + 0x28]
	0x03225830 CMP X16, X17
	0x03225834 B.NE 0x32258A0
	0x03225838 SUB W13, W13, 0xC
	0x0322583C ADD X8, X8, 0x30
	0x03225840 ADD X9, X9, 0x30
	0x03225844 CMP W13, 0x17
	0x03225848 ADD X12, X12, 0x18
	0x0322584C B.GT 0x32257F8
	0x03225850 ADD X8, X11, X12
	0x03225854 ADD X9, X10, X12
	0x03225858 ADD X8, X8, 0x4
	0x0322585C ADD X9, X9, 0x4
	0x03225860 SUB W12, W13, 0xC
	0x03225864 CMP W12, 0x1
	0x03225868 B.LT 0x3225894
	0x0322586C ADD W12, W12, 0x2
	0x03225870 LDR W10, [X8]
	0x03225874 LDR W11, [X9]
	0x03225878 CMP W10, W11
	0x0322587C B.NE 0x32258D0
	0x03225880 SUB W12, W12, 0x2
	0x03225884 ADD X8, X8, 0x4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11B8000
	006 Move X21, 0xEFD000
	007 Move W8, [X20+835]
	008 Move X21, [X21+3472]
	009 Move W19, W1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEFD000
	015 Move X0, [X0+3472]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+835], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move W0, W19
	025 Call BigInteger.GenerateRandom, X0
	026 Compare X0, 0
	027 JumpIfEqual {38}
	028 Move W2, 1
	029 Move W1, W31
	030 Move X19, X0
	031 Call BigInteger.SetBit, X0, X1, X2
	032 Move X0, X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return X0
	038 Call 0x1C17F20

Method: Mono.Math.BigInteger GenerateNewPrime(System.Int32 bits)

Disassembly:
	0x03225888 CMP W12, 0x2
	0x0322588C ADD X9, X9, 0x4
	0x03225890 B.GT 0x3225870
	0x03225894 LDR W8, [X20 + 0x10]

ISIL:
	001 Move X8, [X0]
	002 Move X2, X31
	003 Move X4, [X8+456]
	004 Move X3, [X8+464]
	005 CallNoReturn X4

Method: Mono.Math.BigInteger GenerateNewPrime(System.Int32 bits, System.Object context)

Disassembly:
	0x03225898 LDR W9, [X19 + 0x10]
	0x0322589C B 0x32258EC
	0x032258A0 ADD X8, X11, X12
	0x032258A4 ADD X9, X10, X12
	0x032258A8 ADD X8, X8, 0xC
	0x032258AC ADD X9, X9, 0xC
	0x032258B0 ADD X8, X8, 0x8
	0x032258B4 ADD X9, X9, 0x8
	0x032258B8 LDR W10, [X8]
	0x032258BC LDR W11, [X9]
	0x032258C0 CMP W10, W11
	0x032258C4 B.NE 0x32258D0
	0x032258C8 LDRH W10, [X8 + 0x4]!
	0x032258CC LDRH W11, [X9 + 0x4]!
	0x032258D0 AND W10, W10, 0xFFFF
	0x032258D4 SUBS W0, W10, W11, UXTH
	0x032258D8 B.NE 0x32258F0
	0x032258DC ADD X8, X8, 0x2
	0x032258E0 ADD X9, X9, 0x2
	0x032258E4 LDRH W8, [X8]
	0x032258E8 LDRH W9, [X9]
	0x032258EC SUB W0, W8, W9
	0x032258F0 LDP X20, X19, [X31 + 0x20]
	0x032258F4 LDP X22, X21, [X31 + 0x10]
	0x032258F8 LDR X30, [X31], #0x30
	0x032258FC RET
	0x03225900 BL 0x1C16F20
	0x03225904 AND W2, W2, 0x1
	0x03225908 B 0x322590C
	0x0322590C STR X30, [X31 - 0x30]!
	0x03225910 STP X22, X21, [X31 + 0x10]
	0x03225914 STP X20, X19, [X31 + 0x20]
	0x03225918 ADRP X22, 0x11B7000
	0x0322591C LDRB W8, [X22 + 0x358]
	0x03225920 MOV W21, W2
	0x03225924 MOV X19, X1
	0x03225928 MOV X20, X0
	0x0322592C TBNZ X8, 0x0, 0x3225950
	0x03225930 ADRP X0, 0xEFC000
	0x03225934 LDR X0, [X0 + 0xFD0]
	0x03225938 BL 0x1C16CF4
	0x0322593C ADRP X0, 0xED0000
	0x03225940 LDR X0, [X0 + 0xC48]
	0x03225944 BL 0x1C16CF4
	0x03225948 MOVZ W8, 0x1
	0x0322594C STRB W8, [X22 + 0x358]
	0x03225950 CMP X20, X19
	0x03225954 B.EQ 0x32259BC
	0x03225958 CBZ X20, 0x32259DC
	0x0322595C CBZ X19, 0x32259FC
	0x03225960 CMP W21, 0x5
	0x03225964 B.HI 0x3225B60
	0x03225968 ADRP X9, 0xFFFFFFFFFD971000
	0x0322596C MOV W8, W21
	0x03225970 ADD X9, X9, 0x449
	0x03225974 ADR X10, 0x10
	0x03225978 LDRB W11, [X9, X8, LSL]
	0x0322597C ADD X10, X10, X11, 0x2, LSL
	0x03225980 BR X10
	0x03225984 ADRP X8, 0xED0000
	0x03225988 LDR X8, [X8 + 0xC48]
	0x0322598C LDR X0, [X8]
	0x03225990 LDR W8, [X0 + 0xE0]
	0x03225994 CBNZ W8, 0x322599C
	0x03225998 BL 0x1C16DFC
	0x0322599C MOV X0, X31
	0x032259A0 BL 0x33387A0
	0x032259A4 CBZ X0, 0x3225B5C
	0x032259A8 LDR X8, [X0]
	0x032259AC LDP X9, X1, [X8 + 0x1F8]
	0x032259B0 BLR X9
	0x032259B4 CBNZ X0, 0x3225A88
	0x032259B8 B 0x3225B5C
	0x032259BC CMP W21, 0x6
	0x032259C0 B.CC 0x32259D4
	0x032259C4 MOVZ W0, 0x31
	0x032259C8 MOVZ W1, 0x2F
	0x032259CC MOV X2, X31
	0x032259D0 BL 0x339DD28
	0x032259D4 MOV W0, W31
	0x032259D8 B 0x3225A18
	0x032259DC CMP W21, 0x6
	0x032259E0 B.CC 0x32259F4
	0x032259E4 MOVZ W0, 0x31
	0x032259E8 MOVZ W1, 0x2F
	0x032259EC MOV X2, X31
	0x032259F0 BL 0x339DD28
	0x032259F4 MOVN W0, 0x0
	0x032259F8 B 0x3225A18
	0x032259FC CMP W21, 0x6
	0x03225A00 B.CC 0x3225A14
	0x03225A04 MOVZ W0, 0x31
	0x03225A08 MOVZ W1, 0x2F
	0x03225A0C MOV X2, X31
	0x03225A10 BL 0x339DD28
	0x03225A14 MOVZ W0, 0x1
	0x03225A18 LDP X20, X19, [X31 + 0x20]
	0x03225A1C LDP X22, X21, [X31 + 0x10]
	0x03225A20 LDR X30, [X31], #0x30
	0x03225A24 RET
	0x03225A28 ADRP X8, 0xED0000
	0x03225A2C LDR X8, [X8 + 0xC48]
	0x03225A30 LDR X0, [X8]
	0x03225A34 LDR W8, [X0 + 0xE0]
	0x03225A38 CBNZ W8, 0x3225A40
	0x03225A3C BL 0x1C16DFC
	0x03225A40 MOV X0, X31
	0x03225A44 BL 0x33387A0
	0x03225A48 CBZ X0, 0x3225B5C
	0x03225A4C LDR X8, [X0]
	0x03225A50 LDP X9, X1, [X8 + 0x1F8]
	0x03225A54 BLR X9
	0x03225A58 CBNZ X0, 0x3225AC4
	0x03225A5C B 0x3225B5C
	0x03225A60 ADRP X21, 0xEFC000
	0x03225A64 LDR X21, [X21 + 0xFD0]
	0x03225A68 LDR X0, [X21]
	0x03225A6C LDR W8, [X0 + 0xE0]
	0x03225A70 CBNZ W8, 0x3225A7C
	0x03225A74 BL 0x1C16DFC
	0x03225A78 LDR X0, [X21]
	0x03225A7C LDR X8, [X0 + 0xB8]
	0x03225A80 LDR X0, [X8]
	0x03225A84 CBZ X0, 0x3225B5C
	0x03225A88 LDR X8, [X0]
	0x03225A8C MOV X1, X20
	0x03225A90 MOV X2, X19
	0x03225A94 MOV W3, W31
	0x03225A98 B 0x3225AD4
	0x03225A9C ADRP X21, 0xEFC000
	0x03225AA0 LDR X21, [X21 + 0xFD0]
	0x03225AA4 LDR X0, [X21]
	0x03225AA8 LDR W8, [X0 + 0xE0]
	0x03225AAC CBNZ W8, 0x3225AB8
	0x03225AB0 BL 0x1C16DFC
	0x03225AB4 LDR X0, [X21]
	0x03225AB8 LDR X8, [X0 + 0xB8]
	0x03225ABC LDR X0, [X8]
	0x03225AC0 CBZ X0, 0x3225B5C
	0x03225AC4 LDR X8, [X0]
	0x03225AC8 MOVZ W3, 0x1
	0x03225ACC MOV X1, X20
	0x03225AD0 MOV X2, X19
	0x03225AD4 LDP X5, X4, [X8 + 0x1A8]
	0x03225AD8 LDP X20, X19, [X31 + 0x20]
	0x03225ADC LDP X22, X21, [X31 + 0x10]
	0x03225AE0 LDR X30, [X31], #0x30
	0x03225AE4 BR X5
	0x03225AE8 LDRH W8, [X20 + 0x14]
	0x03225AEC LDRH W9, [X19 + 0x14]
	0x03225AF0 SUBS W0, W8, W9
	0x03225AF4 B.NE 0x3225A18
	0x03225AF8 MOV X0, X20
	0x03225AFC MOV X1, X19
	0x03225B00 LDP X20, X19, [X31 + 0x20]
	0x03225B04 LDP X22, X21, [X31 + 0x10]
	0x03225B08 LDR X30, [X31], #0x30
	0x03225B0C B 0x3225748
	0x03225B10 ADRP X8, 0xEFC000
	0x03225B14 LDR X8, [X8 + 0xFD0]
	0x03225B18 LDR W22, [X20 + 0x10]
	0x03225B1C LDR W21, [X19 + 0x10]
	0x03225B20 LDR X0, [X8]
	0x03225B24 LDR W8, [X0 + 0xE0]
	0x03225B28 CBNZ W8, 0x3225B30
	0x03225B2C BL 0x1C16DFC
	0x03225B30 MOV X0, X20
	0x03225B34 MOV W2, W22
	0x03225B38 MOV X3, X19
	0x03225B3C MOV W5, W21
	0x03225B40 LDP X20, X19, [X31 + 0x20]
	0x03225B44 LDP X22, X21, [X31 + 0x10]
	0x03225B48 MOV W1, W31
	0x03225B4C MOV W4, W31
	0x03225B50 MOV X6, X31
	0x03225B54 LDR X30, [X31], #0x30
	0x03225B58 B 0x3305238
	0x03225B5C BL 0x1C16F20
	0x03225B60 ADRP X0, 0xED6000
	0x03225B64 LDR X0, [X0 + 0x578]
	0x03225B68 BL 0x1C16D08
	0x03225B6C BL 0x1C16F10
	0x03225B70 MOV X19, X0
	0x03225B74 ADRP X0, 0xEFC000
	0x03225B78 LDR X0, [X0 + 0xFD8]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move [X31+8], X2
	015 Move X19, 0x11B8000
	016 Move X24, 0xEFD000
	017 Move W8, [X19+836]
	018 Move X24, [X24+3472]
	019 Move W21, W1
	020 Move X20, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0xEFD000
	026 Move X0, [X0+3472]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X19+836], W8
	030 Move X8, [X20]
	031 Move X2, [X31+8]
	032 Move X0, X20
	033 Move W1, W21
	034 Move X9, [X8+440]
	035 Move X3, [X8+448]
	036 NotImplemented "Instruction BLR not yet implemented."
	037 Move X8, [X24]
	038 Move X21, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {44}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move W8, 0xD796
	045 NotImplemented "Instruction MOVK not yet implemented."
	046 Or W1, W8, 1
	047 Move X0, X21
	048 Call Kernel.DwordMod, X0, X1
	049 Move X8, [X20]
	050 Move W22, W0
	051 Move X0, X20
	052 Move X9, [X8+408]
	053 Move X1, [X8+416]
	054 NotImplemented "Instruction BLR not yet implemented."
	055 Move X8, [X24]
	056 Move W19, 0xC235
	057 Move W28, 0xDCB1
	058 Move W27, 0x286B
	059 Move X8, [X8+184]
	060 Move X26, W0
	061 NotImplemented "Instruction MOVK not yet implemented."
	062 NotImplemented "Instruction MOVK not yet implemented."
	063 Move X29, [X8]
	064 NotImplemented "Instruction MOVK not yet implemented."
	065 Multiply W8, W22, W19
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move W8, 0x42C9
	068 NotImplemented "Instruction MOVK not yet implemented."
	069 NotImplemented "Instruction UMADDL not yet implemented."
	070 Move X8, X8
	071 ShiftRight X8, 36
	072 And X8, X8, 0x7FFFFFFF
	073 Move W9, 23
	074 NotImplemented "Instruction MSUB not yet implemented."
	075 Compare W8, 0
	076 JumpIfEqual {213}
	077 Move W8, 0x6BCB
	078 NotImplemented "Instruction MOVK not yet implemented."
	079 NotImplemented "Instruction UMADDL not yet implemented."
	080 Move X8, X8
	081 ShiftRight X8, 32
	082 And X8, X8, 0x7FFFFFFF
	083 Subtract W9, W22, W8
	084 Add W8, W8, W9
	085 Move W8, W8
	086 ShiftRight W8, 4
	087 And W8, W8, 0x7FFFFFFF
	088 Move W9, 19
	089 NotImplemented "Instruction MSUB not yet implemented."
	090 Compare W8, 0
	091 JumpIfEqual {213}
	092 Move W8, 0xF0F1
	093 NotImplemented "Instruction MOVK not yet implemented."
	094 NotImplemented "Instruction UMADDL not yet implemented."
	095 Move X8, X8
	096 ShiftRight X8, 36
	097 And X8, X8, 0x7FFFFFFF
	098 Add W8, W8, W8
	099 Subtract W8, W22, W8
	100 Compare W8, 0
	101 JumpIfEqual {213}
	102 Move W8, 0xEC4F
	103 NotImplemented "Instruction MOVK not yet implemented."
	104 NotImplemented "Instruction UMADDL not yet implemented."
	105 Move X8, X8
	106 ShiftRight X8, 34
	107 And X8, X8, 0x7FFFFFFF
	108 Move W9, 13
	109 NotImplemented "Instruction MSUB not yet implemented."
	110 Compare W8, 0
	111 JumpIfEqual {213}
	112 Move W8, 0x8BA3
	113 NotImplemented "Instruction MOVK not yet implemented."
	114 NotImplemented "Instruction UMADDL not yet implemented."
	115 Move X8, X8
	116 ShiftRight X8, 35
	117 And X8, X8, 0x7FFFFFFF
	118 Move W9, 11
	119 NotImplemented "Instruction MSUB not yet implemented."
	120 Compare W8, 0
	121 JumpIfEqual {213}
	122 Move W8, 0x4925
	123 NotImplemented "Instruction MOVK not yet implemented."
	124 NotImplemented "Instruction UMADDL not yet implemented."
	125 Move X8, X8
	126 ShiftRight X8, 32
	127 And X8, X8, 0x7FFFFFFF
	128 Subtract W9, W22, W8
	129 Add W8, W8, W9
	130 Move W8, W8
	131 ShiftRight W8, 2
	132 And W8, W8, 0x7FFFFFFF
	133 Subtract W8, W8, W8
	134 Add W8, W22, W8
	135 Compare W8, 0
	136 JumpIfEqual {213}
	137 Move W8, 0xAAAB
	138 NotImplemented "Instruction MOVK not yet implemented."
	139 NotImplemented "Instruction UMADDL not yet implemented."
	140 Move X8, X8
	141 ShiftRight X8, 33
	142 And X8, X8, 0x7FFFFFFF
	143 Add W8, W8, W8
	144 Subtract W8, W22, W8
	145 Compare W8, 0
	146 JumpIfEqual {213}
	147 Move W8, 0xCCCD
	148 NotImplemented "Instruction MOVK not yet implemented."
	149 NotImplemented "Instruction UMADDL not yet implemented."
	150 Move X8, X8
	151 ShiftRight X8, 34
	152 And X8, X8, 0x7FFFFFFF
	153 Add W8, W8, W8
	154 Subtract W8, W22, W8
	155 Compare W8, 0
	156 JumpIfEqual {213}
	157 Compare X29, 0
	158 JumpIfEqual {239}
	159 Move W8, [X29+24]
	160 NotImplemented "Instruction CMP not yet implemented."
	161 Move W25, 10
	162 NotImplemented "Instruction CMP not yet implemented."
	163 Add X8, X29, W25
	164 Move W23, [X8+32]
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Move X0, [X24]
	167 Move W8, [X0+224]
	168 Compare W8, 0
	169 JumpIfNotEqual {171}
	170 Call 0x1C17DFC
	171 Move X0, X21
	172 Move W1, W23
	173 Call Kernel.DwordMod, X0, X1
	174 Compare W0, 0
	175 JumpIfEqual {213}
	176 Move W8, [X29+24]
	177 Add W25, W25, 1
	178 NotImplemented "Instruction CMP not yet implemented."
	179 Move X8, [X20]
	180 Move X2, [X31+8]
	181 Move X0, X20
	182 Move X1, X21
	183 Move X9, [X8+472]
	184 Move X3, [X8+480]
	185 NotImplemented "Instruction BLR not yet implemented."
	186 Move TEMP, X0
	187 And TEMP, TEMP, 1
	188 Compare TEMP, 1
	189 JumpIfNotEqual {213}
	190 Move X8, [X20]
	191 Move X0, X20
	192 Move X9, [X8+392]
	193 Move X1, [X8+400]
	194 NotImplemented "Instruction BLR not yet implemented."
	195 Move X8, [X20]
	196 Move X23, X0
	197 Move X0, X20
	198 Move X9, [X8+376]
	199 Move X1, [X8+384]
	200 NotImplemented "Instruction BLR not yet implemented."
	201 Compare X23, 0
	202 JumpIfEqual {239}
	203 Move W2, W0
	204 Move X8, [X23+24]
	205 Move X0, [X23+64]
	206 Move X3, [X23+40]
	207 Move X1, X21
	208 NotImplemented "Instruction BLR not yet implemented."
	209 Move TEMP, X0
	210 And TEMP, TEMP, 1
	211 Compare TEMP, 1
	212 JumpIfEqual {223}
	213 Compare X21, 0
	214 JumpIfEqual {239}
	215 Move W10, 0xD796
	216 Add W8, W22, 2
	217 NotImplemented "Instruction MOVK not yet implemented."
	218 Add W9, W22, W27
	219 NotImplemented "Instruction CMP not yet implemented."
	220 Move X0, X21
	221 NotImplemented "Instruction CSEL not yet implemented."
	222 Call BigInteger.Incr2, X0
	223 Move X0, X21
	224 Move X20, [X31+96]
	225 Move X19, [X31+104]
	226 Move X22, [X31+80]
	227 Move X21, [X31+88]
	228 Move X24, [X31+64]
	229 Move X23, [X31+72]
	230 Move X26, [X31+48]
	231 Move X25, [X31+56]
	232 Move X28, [X31+32]
	233 Move X27, [X31+40]
	234 Move X29, [X31+16]
	235 Move X30, [X31+24]
	236 Add X31, X31, 112
	237 Return X0
	238 Call 0x1C17F28
	239 Call 0x1C17F20

Method: System.Boolean IsPrimeAcceptable(Mono.Math.BigInteger bi, System.Object context)

Disassembly:
	0x03225B7C BL 0x1C16D08
	0x03225B80 MOV X20, X0

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Void .ctor()

Disassembly:
	0x0322431C BL 0x1C16DEC
	0x03224320 STP X29, X30, [X31 - 0x60]!

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

