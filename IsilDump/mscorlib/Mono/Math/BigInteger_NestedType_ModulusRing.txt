Type: Mono.Math.BigInteger/ModulusRing

Method: System.Void .ctor(Mono.Math.BigInteger modulus)

Disassembly:
	0x032240F8 ADD X8, X8, 0x450
	0x032240FC B 0x3224148
	0x03224100 CBZ X21, 0x3224168
	0x03224104 LDR X8, [X19 + 0x10]
	0x03224108 LDR X9, [X19 + 0x20]
	0x0322410C STR X8, [X19 + 0x18]
	0x03224110 STR X9, [X19 + 0x40]
	0x03224114 B 0x322414C
	0x03224118 ADRP X8, 0xFFFFFFFFFE990000
	0x0322411C ADD X8, X8, 0x310
	0x03224120 B 0x3224148
	0x03224124 TBZ X0, 0x0, 0x3224140
	0x03224128 ADRP X8, 0xFFFFFFFFFE990000
	0x0322412C ADD X8, X8, 0x378
	0x03224130 B 0x3224148
	0x03224134 ADRP X8, 0xFFFFFFFFFE990000
	0x03224138 ADD X8, X8, 0x404
	0x0322413C B 0x3224148
	0x03224140 ADRP X8, 0xFFFFFFFFFE990000
	0x03224144 ADD X8, X8, 0x348
	0x03224148 STR X8, [X19 + 0x18]
	0x0322414C ADRP X8, 0xFFFFFFFFFE990000
	0x03224150 ADD X8, X8, 0x2AC
	0x03224154 STR X8, [X19 + 0x38]
	0x03224158 LDP X20, X19, [X31 + 0x20]
	0x0322415C LDP X22, X21, [X31 + 0x10]
	0x03224160 LDR X30, [X31], #0x30
	0x03224164 RET
	0x03224168 ADRP X1, 0xFFFFFFFFFD8F7000
	0x0322416C ADD X1, X1, 0xEE3
	0x03224170 MOV X0, X31
	0x03224174 BL 0x1C16F3C
	0x03224178 MOV X1, X31
	0x0322417C BL 0x1C16DEC
	0x03224180 LDR X8, [X0 + 0x40]
	0x03224184 LDR X4, [X0 + 0x18]
	0x03224188 LDR X3, [X0 + 0x28]
	0x0322418C MOV X0, X8
	0x03224190 BR X4
	0x03224194 STP X30, X19, [X31 - 0x10]!
	0x03224198 CBZ X0, 0x32242A0
	0x0322419C MOV W19, W1
	0x032241A0 BL 0x321C250
	0x032241A4 CMP W0, 0x65
	0x032241A8 B.LT 0x3224204
	0x032241AC CMP W0, 0x97
	0x032241B0 B.LT 0x322420C
	0x032241B4 CMP W0, 0xC9
	0x032241B8 B.LT 0x3224214
	0x032241BC CMP W0, 0xFB
	0x032241C0 B.LT 0x322421C
	0x032241C4 CMP W0, 0x12D
	0x032241C8 B.LT 0x3224224

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11B9000
	007 Move W8, [X21+818]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEFE000
	015 Move X0, [X0+3472]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+818], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call Object..ctor, X0
	022 Move [X19+16], X20
	023 Compare X20, 0
	024 JumpIfEqual {64}
	025 Move X21, 0xEFE000
	026 Move X21, [X21+3472]
	027 Move W22, [X20+16]
	028 Move X0, [X21]
	029 Call 0x1C17F10
	030 Move W2, 1
	031 NotImplemented "Instruction BFM not yet implemented."
	032 Move X20, X0
	033 Call BigInteger..ctor, X0, X1, X2
	034 Move [X19+24], X20
	035 Compare X20, 0
	036 JumpIfEqual {64}
	037 Move X8, [X20+24]
	038 Compare X8, 0
	039 JumpIfEqual {64}
	040 Move W10, [X8+24]
	041 Move W9, W22
	042 ShiftRight W9, 31
	043 And W9, W9, 0x3FFFFFFF
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Add X8, X8, W9
	046 Move W9, 1
	047 Move [X8+32], W9
	048 Move X0, [X21]
	049 Move X21, [X19+16]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X0, X20
	055 Move X1, X21
	056 Call BigInteger.op_Division, X0, X1
	057 Move [X19+24], X0
	058 Move X20, [X31+32]
	059 Move X19, [X31+40]
	060 Move X22, [X31+16]
	061 Move X21, [X31+24]
	062 Move X30, [X31+48]
	063 Return 
	064 Call 0x1C17F20
	065 Call 0x1C17F28

Method: System.Void BarrettReduction(Mono.Math.BigInteger x)

Disassembly:
	0x03224440 BL 0x3223DC4
	0x03224444 MOVZ W1, 0x1
	0x03224448 MOV X24, X0
	0x0322444C BL 0x321FE58
	0x03224450 TBZ X0, 0x0, 0x3224468
	0x03224454 ADD X27, X27, 0x1
	0x03224458 CMP X27, X28
	0x0322445C CSET W26, CC
	0x03224460 B.NE 0x3224400
	0x03224464 B 0x32244CC
	0x03224468 CMP W21, 0x1
	0x0322446C B.LT 0x32244CC
	0x03224470 MOV W29, W21
	0x03224474 LDR X0, [X25]
	0x03224478 LDR W8, [X0 + 0xE0]
	0x0322447C CBNZ W8, 0x3224484
	0x03224480 BL 0x1C16DFC
	0x03224484 MOV X0, X24
	0x03224488 MOV X1, X20
	0x0322448C BL 0x321C64C
	0x03224490 TBNZ X0, 0x0, 0x3224454
	0x03224494 LDR X0, [X25]
	0x03224498 LDR W8, [X0 + 0xE0]
	0x0322449C CBNZ W8, 0x32244A4
	0x032244A0 BL 0x1C16DFC
	0x032244A4 MOV X0, X24
	0x032244A8 MOV X1, X24
	0x032244AC BL 0x321C0A8
	0x032244B0 MOV X1, X19
	0x032244B4 BL 0x321C4E4
	0x032244B8 SUBS W29, W29, 0x1
	0x032244BC MOV X24, X0
	0x032244C0 B.NE 0x3224474
	0x032244C4 B 0x32244CC
	0x032244C8 MOV W26, W31
	0x032244CC ORN W8, W31, W26, 0x0
	0x032244D0 LDP X20, X19, [X31 + 0x50]
	0x032244D4 LDP X22, X21, [X31 + 0x40]
	0x032244D8 LDP X24, X23, [X31 + 0x30]
	0x032244DC LDP X26, X25, [X31 + 0x20]
	0x032244E0 LDP X28, X27, [X31 + 0x10]
	0x032244E4 AND W0, W8, 0x1
	0x032244E8 LDP X29, X30, [X31], #0x60
	0x032244EC RET
	0x032244F0 BL 0x1C16F20
	0x032244F4 BL 0x1C16F28
	0x032244F8 STR X30, [X31 - 0x60]!
	0x032244FC STP X28, X27, [X31 + 0x10]
	0x03224500 STP X26, X25, [X31 + 0x20]
	0x03224504 STP X24, X23, [X31 + 0x30]
	0x03224508 STP X22, X21, [X31 + 0x40]
	0x0322450C STP X20, X19, [X31 + 0x50]
	0x03224510 ADRP X19, 0x11B8000
	0x03224514 LDRB W8, [X19 + 0x340]
	0x03224518 MOV W20, W1
	0x0322451C MOV X25, X0
	0x03224520 TBNZ X8, 0x0, 0x3224544
	0x03224524 ADRP X0, 0xEFD000
	0x03224528 LDR X0, [X0 + 0xD90]
	0x0322452C BL 0x1C16CF4
	0x03224530 ADRP X0, 0xEFD000
	0x03224534 LDR X0, [X0 + 0xDC8]
	0x03224538 BL 0x1C16CF4
	0x0322453C MOVZ W8, 0x1
	0x03224540 STRB W8, [X19 + 0x340]
	0x03224544 CBZ X25, 0x322478C
	0x03224548 ADRP X26, 0xEFD000
	0x0322454C LDR X26, [X26 + 0xD90]
	0x03224550 MOV X0, X25
	0x03224554 BL 0x321C250
	0x03224558 LDR X8, [X26]
	0x0322455C MOV W19, W0
	0x03224560 LDR W9, [X8 + 0xE0]
	0x03224564 CBNZ W9, 0x3224570
	0x03224568 MOV X0, X8
	0x0322456C BL 0x1C16DFC
	0x03224570 MOV W0, W19
	0x03224574 BL 0x321C2D0
	0x03224578 MOV W1, W20
	0x0322457C BL 0x3224194
	0x03224580 MOV W20, W0
	0x03224584 MOVZ W0, 0x1
	0x03224588 BL 0x321C2D0
	0x0322458C MOV X1, X0
	0x03224590 MOV X0, X25
	0x03224594 BL 0x321C374
	0x03224598 CBZ X0, 0x322478C
	0x0322459C ADRP X23, 0xEFD000
	0x032245A0 LDR X23, [X23 + 0xDC8]
	0x032245A4 MOV X21, X0
	0x032245A8 BL 0x322267C
	0x032245AC MOV W22, W0
	0x032245B0 MOV X0, X21
	0x032245B4 MOV W1, W22
	0x032245B8 BL 0x3222084
	0x032245BC LDR X8, [X23]
	0x032245C0 MOV X23, X0
	0x032245C4 MOV X0, X8
	0x032245C8 BL 0x1C16F10
	0x032245CC MOV X1, X25
	0x032245D0 MOV X24, X0
	0x032245D4 BL 0x32230F8
	0x032245D8 MOV X0, X25
	0x032245DC BL 0x321C250
	0x032245E0 CMP W0, 0x65
	0x032245E4 B.GE 0x32245F0
	0x032245E8 MOV X25, X31
	0x032245EC B 0x3224608
	0x032245F0 CBZ X24, 0x322478C
	0x032245F4 MOVZ W1, 0x2
	0x032245F8 MOV X0, X24
	0x032245FC MOV X2, X23
	0x03224600 BL 0x3223DC4
	0x03224604 MOV X25, X0
	0x03224608 CMP W20, 0x1
	0x0322460C B.LT 0x3224764
	0x03224610 MOV W27, W31
	0x03224614 CBNZ W27, 0x3224638
	0x03224618 LDR X0, [X26]
	0x0322461C LDR W8, [X0 + 0xE0]
	0x03224620 CBNZ W8, 0x3224628
	0x03224624 BL 0x1C16DFC
	0x03224628 MOV X0, X25
	0x0322462C MOV X1, X31
	0x03224630 BL 0x321C64C
	0x03224634 TBZ X0, 0x0, 0x32246A8
	0x03224638 LDR X0, [X26]
	0x0322463C LDR W8, [X0 + 0xE0]
	0x03224640 CBNZ W8, 0x3224648
	0x03224644 BL 0x1C16DFC
	0x03224648 MOV W0, W19
	0x0322464C BL 0x321FDA0
	0x03224650 MOV X25, X0
	0x03224654 MOVZ W0, 0x2
	0x03224658 BL 0x321C2D0
	0x0322465C MOV X1, X0
	0x03224660 MOV X0, X25
	0x03224664 BL 0x32214D8
	0x03224668 CMP W0, 0x0
	0x0322466C B.GT 0x3224690
	0x03224670 LDR X0, [X26]
	0x03224674 LDR W8, [X0 + 0xE0]
	0x03224678 CBNZ W8, 0x3224680
	0x0322467C BL 0x1C16DFC
	0x03224680 MOV X0, X25
	0x03224684 MOV X1, X21
	0x03224688 BL 0x32214D8
	0x0322468C TBZ X0, 0x1F, 0x3224638
	0x03224690 CBZ X24, 0x322478C
	0x03224694 MOV X0, X24

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+32], X26
	004 Move [X31+40], X25
	005 Move [X31+48], X24
	006 Move [X31+56], X23
	007 Move [X31+64], X22
	008 Move [X31+72], X21
	009 Move [X31+80], X20
	010 Move [X31+88], X19
	011 Move X20, 0x11B9000
	012 Move W8, [X20+819]
	013 Move X19, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xEFE000
	020 Move X0, [X0+3472]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+819], W8
	024 Move X20, [X21+16]
	025 Compare X20, 0
	026 JumpIfEqual {124}
	027 Compare X19, 0
	028 JumpIfEqual {124}
	029 Move W25, [X20+16]
	030 Move W22, [X19+16]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X8, [X19+24]
	033 Compare X8, 0
	034 JumpIfEqual {124}
	035 NotImplemented "Instruction LDRSW not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X8, [X21+24]
	038 Compare X8, 0
	039 JumpIfEqual {124}
	040 Move X24, 0xEFE000
	041 Move X24, [X24+3472]
	042 Move W26, [X8+16]
	043 Move X0, [X24]
	044 Call 0x1C17F10
	045 Subtract W8, W22, W25
	046 Add W8, W8, W26
	047 Add W2, W8, 1
	048 Move X23, X0
	049 Call BigInteger..ctor, X0, X1, X2
	050 Move X8, [X21+24]
	051 Compare X8, 0
	052 JumpIfEqual {124}
	053 Compare X23, 0
	054 JumpIfEqual {124}
	055 Move W9, [X19+16]
	056 Move X0, [X19+24]
	057 Move W5, [X8+16]
	058 Move X3, [X8+24]
	059 Move X6, [X23+24]
	060 Subtract W1, W25, 1
	061 Subtract W2, W9, W1
	062 Move W4, W31
	063 Move W7, W31
	064 Add W21, W25, 1
	065 Call Kernel.Multiply, X0, X1, X2, X3, X4, X5, X6, X7
	066 Move W8, [X19+16]
	067 Move X0, X19
	068 NotImplemented "Instruction CMP not yet implemented."
	069 NotImplemented "Instruction CSEL not yet implemented."
	070 Move [X19+16], W8
	071 Call BigInteger.Normalize, X0
	072 Move X0, [X24]
	073 Call 0x1C17F10
	074 Move W2, W21
	075 Move X22, X0
	076 Call BigInteger..ctor, X0, X1, X2
	077 Compare X22, 0
	078 JumpIfEqual {124}
	079 Move W8, [X23+16]
	080 Move W5, [X20+16]
	081 Move X3, [X20+24]
	082 Move X0, [X23+24]
	083 Move X6, [X22+24]
	084 Subtract W2, W8, W21
	085 Move W1, W21
	086 Move W4, W31
	087 Move W7, W31
	088 Move [X31], W21
	089 Call Kernel.MultiplyMod2p32pmod, X0, X1, X2, X3, X4, X5, X6, X7, X8
	090 Move X0, X22
	091 Call BigInteger.Normalize, X0
	092 Move X0, [X24]
	093 Move W8, [X0+224]
	094 Compare W8, 0
	095 JumpIfNotEqual {97}
	096 Call 0x1C17DFC
	097 Move X0, X22
	098 Move X1, X19
	099 Call Kernel.Compare, X0, X1
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X0, [X24]
	102 Call 0x1C17F10
	103 Add W2, W25, 2
	104 Move X23, X0
	105 Call BigInteger..ctor, X0, X1, X2
	106 Compare X23, 0
	107 JumpIfEqual {124}
	108 Move X8, [X23+24]
	109 Compare X8, 0
	110 JumpIfEqual {124}
	111 Move W9, [X8+24]
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Add X8, X8, W21
	114 Move W9, 1
	115 Move X0, X23
	116 Move X1, X22
	117 Move [X8+32], W9
	118 Call Kernel.MinusEq, X0, X1
	119 Move X0, X19
	120 Move X1, X23
	121 Call Kernel.PlusEq, X0, X1
	122 Move X0, X19
	123 Move X1, X22
	124 Call 0x1C17F20
	125 Move X0, 0xEDA000
	126 Move X0, [X0+3960]
	127 Call 0x1C17D08
	128 Call 0x1C17F10
	129 Move X19, X0
	130 Move X0, 0xEFE000
	131 Move X0, [X0+1880]
	132 Call 0x1C17D08
	133 Move X1, X0
	134 Move X0, X19
	135 Move X2, X31
	136 Call IndexOutOfRangeException..ctor, X0, X1
	137 Move X0, 0xEFE000
	138 Move X0, [X0+3952]
	139 Call 0x1C17D08
	140 Move X1, X0
	141 Move X0, X19
	142 Call 0x1C17DEC
	143 Call 0x1C17F28
	144 Move X0, X19
	145 Move X1, X20
	146 Call Kernel.MinusEq, X0, X1
	147 Move X0, [X24]
	148 Move W8, [X0+224]
	149 Compare W8, 0
	150 JumpIfNotEqual {152}
	151 Call 0x1C17DFC
	152 Move X0, X19
	153 Move X1, X20
	154 Call Kernel.Compare, X0, X1
	155 Move TEMP, X0
	156 And TEMP, TEMP, -2147483648
	157 Compare TEMP, -2147483648
	158 JumpIfNotEqual {144}
	159 Move X20, [X31+80]
	160 Move X19, [X31+88]
	161 Move X22, [X31+64]
	162 Move X21, [X31+72]
	163 Move X24, [X31+48]
	164 Move X23, [X31+56]
	165 Move X26, [X31+32]
	166 Move X25, [X31+40]
	167 Move X30, [X31+16]
	168 Add X31, X31, 96
	169 Return 

Method: Mono.Math.BigInteger Multiply(Mono.Math.BigInteger a, Mono.Math.BigInteger b)

Disassembly:
	0x03224A94 B.GT 0x3224AC8
	0x03224A98 LDR X0, [X24]
	0x03224A9C LDR W8, [X0 + 0xE0]
	0x03224AA0 CBNZ W8, 0x3224AA8
	0x03224AA4 BL 0x1C16DFC
	0x03224AA8 MOV X0, X21
	0x03224AAC MOV W1, W23
	0x03224AB0 BL 0x32217E0
	0x03224AB4 CBZ W0, 0x3224B28
	0x03224AB8 LDR W8, [X29 + 0x18]
	0x03224ABC ADD W25, W25, 0x1
	0x03224AC0 CMP W25, W8
	0x03224AC4 B.LT 0x3224A80
	0x03224AC8 LDR X8, [X20]
	0x03224ACC LDR X2, [X31 + 0x8]
	0x03224AD0 MOV X0, X20
	0x03224AD4 MOV X1, X21
	0x03224AD8 LDP X9, X3, [X8 + 0x1D8]
	0x03224ADC BLR X9
	0x03224AE0 TBZ X0, 0x0, 0x3224B28
	0x03224AE4 LDR X8, [X20]
	0x03224AE8 MOV X0, X20
	0x03224AEC LDP X9, X1, [X8 + 0x188]
	0x03224AF0 BLR X9
	0x03224AF4 LDR X8, [X20]
	0x03224AF8 MOV X23, X0
	0x03224AFC MOV X0, X20
	0x03224B00 LDP X9, X1, [X8 + 0x178]
	0x03224B04 BLR X9
	0x03224B08 CBZ X23, 0x3224B78
	0x03224B0C MOV W2, W0
	0x03224B10 LDR X8, [X23 + 0x18]
	0x03224B14 LDR X0, [X23 + 0x40]
	0x03224B18 LDR X3, [X23 + 0x28]
	0x03224B1C MOV X1, X21
	0x03224B20 BLR X8
	0x03224B24 TBNZ X0, 0x0, 0x3224B50
	0x03224B28 CBZ X21, 0x3224B78
	0x03224B2C MOVZ W10, 0xD796
	0x03224B30 ADD W8, W22, 0x2
	0x03224B34 MOVK W10, 0xC0CF0000
	0x03224B38 ADD W9, W22, W27
	0x03224B3C CMP W8, W10
	0x03224B40 MOV X0, X21
	0x03224B44 CSEL W22, W9, W8, HI
	0x03224B48 BL 0x3223324
	0x03224B4C B 0x3224968
	0x03224B50 MOV X0, X21
	0x03224B54 LDP X20, X19, [X31 + 0x60]
	0x03224B58 LDP X22, X21, [X31 + 0x50]
	0x03224B5C LDP X24, X23, [X31 + 0x40]
	0x03224B60 LDP X26, X25, [X31 + 0x30]
	0x03224B64 LDP X28, X27, [X31 + 0x20]
	0x03224B68 LDP X29, X30, [X31 + 0x10]
	0x03224B6C ADD X31, X31, 0x70
	0x03224B70 RET
	0x03224B74 BL 0x1C16F28
	0x03224B78 BL 0x1C16F20
	0x03224B7C MOVZ W0, 0x1
	0x03224B80 RET
	0x03224B84 STR X30, [X31 - 0x20]!
	0x03224B88 STP X20, X19, [X31 + 0x10]
	0x03224B8C ADRP X20, 0x11B8000
	0x03224B90 STR W0, [X31 + 0xC]
	0x03224B94 ADRP X19, 0xEFD000
	0x03224B98 LDRB W8, [X20 + 0x345]
	0x03224B9C LDR X19, [X19 + 0xF98]
	0x03224BA0 TBNZ X8, 0x0, 0x3224BB8
	0x03224BA4 ADRP X0, 0xEFD000
	0x03224BA8 LDR X0, [X0 + 0xF98]
	0x03224BAC BL 0x1C16CF4
	0x03224BB0 MOVZ W8, 0x1
	0x03224BB4 STRB W8, [X20 + 0x345]
	0x03224BB8 ADD X0, X31, 0xC
	0x03224BBC MOV X1, X31
	0x03224BC0 BL 0x337B6E0
	0x03224BC4 LDR X8, [X19]
	0x03224BC8 MOV X1, X0
	0x03224BCC MOV X0, X8
	0x03224BD0 BL 0x321B938
	0x03224BD4 LDP X20, X19, [X31 + 0x10]
	0x03224BD8 LDR X30, [X31], #0x20
	0x03224BDC RET
	0x03224BE0 MOVZ W8, 0x80070000
	0x03224BE4 ORR W0, W0, W8, 0x0
	0x03224BE8 RET
	0x03224BEC STP X30, X21, [X31 - 0x20]!
	0x03224BF0 STP X20, X19, [X31 + 0x10]
	0x03224BF4 ADRP X20, 0x11B8000
	0x03224BF8 ADRP X21, 0xEF7000
	0x03224BFC LDRB W8, [X20 + 0x346]
	0x03224C00 LDR X21, [X21 + 0x850]
	0x03224C04 MOV X19, X1
	0x03224C08 TBNZ X8, 0x0, 0x3224C20
	0x03224C0C ADRP X0, 0xEF7000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x11B9000
	008 Move X23, 0xEFE000
	009 Move W8, [X22+820]
	010 Move X23, [X23+3472]
	011 Move X20, X2
	012 Move X21, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xEFE000
	019 Move X0, [X0+3472]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+820], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X21
	029 Move W1, W31
	030 Call BigInteger.op_Equality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {47}
	035 Move X0, [X23]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X20
	041 Move W1, W31
	042 Call BigInteger.op_Equality, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {61}
	047 Move X0, [X23]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X22, [X31+16]
	055 Move X21, [X31+24]
	056 Move W0, W31
	057 Move X30, [X31+48]
	058 Move X23, [X31+56]
	059 Call BigInteger.op_Implicit, X0
	060 Return X0
	061 Move X0, [X23]
	062 Move X22, [X19+16]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1C17DFC
	067 Move X0, X21
	068 Move X1, X22
	069 Call Kernel.Compare, X0, X1
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X0, [X23]
	072 Move X22, [X19+16]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 Move X0, X21
	078 Move X1, X22
	079 Call BigInteger.op_Modulus, X0, X1
	080 Move X21, X0
	081 Move X0, [X23]
	082 Move X22, [X19+16]
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {87}
	086 Call 0x1C17DFC
	087 Move X0, X20
	088 Move X1, X22
	089 Call Kernel.Compare, X0, X1
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move X0, [X23]
	092 Move X22, [X19+16]
	093 Move W8, [X0+224]
	094 Compare W8, 0
	095 JumpIfNotEqual {97}
	096 Call 0x1C17DFC
	097 Move X0, X20
	098 Move X1, X22
	099 Call BigInteger.op_Modulus, X0, X1
	100 Move X20, X0
	101 Move X0, [X23]
	102 Move W8, [X0+224]
	103 Compare W8, 0
	104 JumpIfNotEqual {106}
	105 Call 0x1C17DFC
	106 Move X0, X21
	107 Move X1, X20
	108 Call BigInteger.op_Multiply, X0, X1
	109 Move X20, X0
	110 Move X0, X19
	111 Move X1, X20
	112 Call ModulusRing.BarrettReduction, X0, X1
	113 Move X0, X20
	114 Move X20, [X31+32]
	115 Move X19, [X31+40]
	116 Move X22, [X31+16]
	117 Move X21, [X31+24]
	118 Move X30, [X31+48]
	119 Move X23, [X31+56]
	120 Return X0

Method: Mono.Math.BigInteger Difference(Mono.Math.BigInteger a, Mono.Math.BigInteger b)

Disassembly:
	0x03224C10 LDR X0, [X0 + 0x850]
	0x03224C14 BL 0x1C16CF4
	0x03224C18 MOVZ W8, 0x1
	0x03224C1C STRB W8, [X20 + 0x346]
	0x03224C20 LDR X0, [X21]
	0x03224C24 LDR W8, [X0 + 0xE0]
	0x03224C28 CBNZ W8, 0x3224C30
	0x03224C2C BL 0x1C16DFC
	0x03224C30 MOV X0, X19
	0x03224C34 LDP X20, X19, [X31 + 0x10]
	0x03224C38 MOV X1, X31
	0x03224C3C LDP X30, X21, [X31], #0x20
	0x03224C40 B 0x32C13B4
	0x03224C44 STP X30, X21, [X31 - 0x20]!
	0x03224C48 STP X20, X19, [X31 + 0x10]
	0x03224C4C ADRP X21, 0x11B8000
	0x03224C50 ADRP X20, 0xEF7000
	0x03224C54 LDRB W8, [X21 + 0x347]
	0x03224C58 LDR X20, [X20 + 0x850]
	0x03224C5C MOV X19, X0
	0x03224C60 TBNZ X8, 0x0, 0x3224C78
	0x03224C64 ADRP X0, 0xEF7000
	0x03224C68 LDR X0, [X0 + 0x850]
	0x03224C6C BL 0x1C16CF4
	0x03224C70 MOVZ W8, 0x1
	0x03224C74 STRB W8, [X21 + 0x347]
	0x03224C78 LDR X0, [X20]
	0x03224C7C LDR X19, [X19 + 0x10]
	0x03224C80 LDR W8, [X0 + 0xE0]
	0x03224C84 CBNZ W8, 0x3224C8C
	0x03224C88 BL 0x1C16DFC
	0x03224C8C MOV X0, X19
	0x03224C90 LDP X20, X19, [X31 + 0x10]
	0x03224C94 MOV X1, X31
	0x03224C98 LDP X30, X21, [X31], #0x20
	0x03224C9C B 0x32C1260
	0x03224CA0 STR X30, [X31 - 0x20]!
	0x03224CA4 STP X20, X19, [X31 + 0x10]
	0x03224CA8 MOV X20, X1
	0x03224CAC MOVZ W2, 0x1
	0x03224CB0 MOV X1, X31
	0x03224CB4 MOV X3, X31
	0x03224CB8 MOV X19, X0
	0x03224CBC BL 0x32C0158
	0x03224CC0 CBZ X20, 0x3224CD0
	0x03224CC4 MOV X1, X20
	0x03224CC8 BL 0x3224BEC
	0x03224CCC STR X0, [X19 + 0x10]
	0x03224CD0 LDP X20, X19, [X31 + 0x10]
	0x03224CD4 LDR X30, [X31], #0x20
	0x03224CD8 RET
	0x03224CDC STP X30, X19, [X31 - 0x10]!
	0x03224CE0 MOV X19, X0
	0x03224CE4 LDR X0, [X0 + 0x10]
	0x03224CE8 MOV X1, X31
	0x03224CEC MOV X2, X31
	0x03224CF0 BL 0x33C5D2C
	0x03224CF4 TBZ X0, 0x0, 0x3224D00
	0x03224CF8 MOV X0, X19
	0x03224CFC BL 0x3224C44
	0x03224D00 MOVN W0, 0x0
	0x03224D04 MOV X1, X31
	0x03224D08 BL 0x33C6930
	0x03224D0C MOV X8, X0
	0x03224D10 MOVZ W0, 0x1
	0x03224D14 STR X8, [X19 + 0x10]
	0x03224D18 LDP X30, X19, [X31], #0x10
	0x03224D1C RET
	0x03224D20 STP X30, X21, [X31 - 0x20]!
	0x03224D24 STP X20, X19, [X31 + 0x10]
	0x03224D28 ADRP X21, 0x11B8000
	0x03224D2C LDRB W8, [X21 + 0x348]
	0x03224D30 MOV W19, W1
	0x03224D34 MOV X20, X0
	0x03224D38 TBNZ X8, 0x0, 0x3224D50
	0x03224D3C ADRP X0, 0xEFD000
	0x03224D40 LDR X0, [X0 + 0xFA0]
	0x03224D44 BL 0x1C16CF4
	0x03224D48 MOVZ W8, 0x1
	0x03224D4C STRB W8, [X21 + 0x348]
	0x03224D50 TBZ X19, 0x0, 0x3224D78
	0x03224D54 ADRP X8, 0xEFD000
	0x03224D58 LDR X8, [X8 + 0xFA0]
	0x03224D5C MOV X0, X20
	0x03224D60 LDR X1, [X8]
	0x03224D64 BL 0x25D636C
	0x03224D68 TBZ X0, 0x0, 0x3224D78
	0x03224D6C LDP X20, X19, [X31 + 0x10]
	0x03224D70 LDP X30, X21, [X31], #0x20
	0x03224D74 RET
	0x03224D78 AND W1, W19, 0x1
	0x03224D7C MOV X0, X20
	0x03224D80 LDP X20, X19, [X31 + 0x10]
	0x03224D84 MOV X2, X31
	0x03224D88 LDP X30, X21, [X31], #0x20
	0x03224D8C B 0x32C02D4
	0x03224D90 STP X30, X19, [X31 - 0x10]!
	0x03224D94 LDR X19, [X0 + 0x10]
	0x03224D98 MOVN W0, 0x0
	0x03224D9C MOV X1, X31
	0x03224DA0 BL 0x33C6930
	0x03224DA4 MOV X1, X0
	0x03224DA8 MOV X0, X19
	0x03224DAC MOV X2, X31
	0x03224DB0 LDP X30, X19, [X31], #0x10
	0x03224DB4 B 0x33BE5B0
	0x03224DB8 STP X30, X21, [X31 - 0x20]!
	0x03224DBC STP X20, X19, [X31 + 0x10]
	0x03224DC0 ADRP X21, 0x11B8000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x11B9000
	008 Move W8, [X20+821]
	009 Move X21, X2
	010 Move X22, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEFE000
	017 Move X0, [X0+3472]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+821], W8
	021 Move X23, 0xEFE000
	022 Move X23, [X23+3472]
	023 Move X0, X22
	024 Move X1, X21
	025 Call Kernel.Compare, X0, X1
	026 Move W20, W0
	027 Add W31, W0, 1
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Compare W20, 0
	030 JumpIfNotEqual {120}
	031 Move X0, [X23]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move W0, W31
	041 Move X30, [X31+48]
	042 Move X23, [X31+56]
	043 Call BigInteger.op_Implicit, X0
	044 Return X0
	045 Move X0, [X23]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move X0, X21
	051 Move X1, X22
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X22
	058 Move X1, X21
	059 Call BigInteger.op_Subtraction, X0, X1
	060 Move X21, X0
	061 Move X0, [X23]
	062 Move X22, [X19+16]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1C17DFC
	067 Move X0, X21
	068 Move X1, X22
	069 Call Kernel.Compare, X0, X1
	070 Move TEMP, X0
	071 And TEMP, TEMP, -2147483648
	072 Compare TEMP, -2147483648
	073 JumpIfEqual {94}
	074 Compare X21, 0
	075 JumpIfEqual {119}
	076 Move X22, [X19+16]
	077 Compare X22, 0
	078 JumpIfEqual {119}
	079 Move W8, [X21+16]
	080 Move W9, [X22+16]
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move X0, X19
	083 Move X1, X21
	084 Call ModulusRing.BarrettReduction, X0, X1
	085 Move X0, [X23]
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {90}
	089 Call 0x1C17DFC
	090 Move X0, X21
	091 Move X1, X22
	092 Call BigInteger.op_Modulus, X0, X1
	093 Move X21, X0
	094 Add W31, W20, 1
	095 Move X0, X21
	096 Move X20, [X31+32]
	097 Move X19, [X31+40]
	098 Move X22, [X31+16]
	099 Move X21, [X31+24]
	100 Move X30, [X31+48]
	101 Move X23, [X31+56]
	102 Return X0
	103 Move X0, [X23]
	104 Move X19, [X19+16]
	105 Move W8, [X0+224]
	106 Compare W8, 0
	107 JumpIfNotEqual {109}
	108 Call 0x1C17DFC
	109 Move X0, X19
	110 Move X1, X21
	111 Move X20, [X31+32]
	112 Move X19, [X31+40]
	113 Move X22, [X31+16]
	114 Move X21, [X31+24]
	115 Move X30, [X31+48]
	116 Move X23, [X31+56]
	117 Call BigInteger.op_Subtraction, X0, X1
	118 Return X0
	119 Call 0x1C17F20
	120 Move X0, 0xED0000
	121 Move X0, [X0+2000]
	122 Call 0x1C17D08
	123 Call 0x1C17F10
	124 Move X1, X31
	125 Move X19, X0
	126 Call Exception..ctor, X0
	127 Move X0, 0xEFE000
	128 Move X0, [X0+3960]
	129 Call 0x1C17D08
	130 Move X1, X0
	131 Move X0, X19
	132 Call 0x1C17DEC

Method: Mono.Math.BigInteger Pow(Mono.Math.BigInteger a, Mono.Math.BigInteger k)

Disassembly:
	0x032241CC CMP W0, 0x15F
	0x032241D0 B.LT 0x322422C
	0x032241D4 CMP W0, 0x191
	0x032241D8 B.LT 0x3224234
	0x032241DC CMP W0, 0x1F5
	0x032241E0 B.LT 0x322423C
	0x032241E4 CMP W0, 0x259
	0x032241E8 B.LT 0x3224244
	0x032241EC CMP W0, 0x321
	0x032241F0 B.LT 0x322424C
	0x032241F4 CMP W0, 0x4E2
	0x032241F8 MOVZ W8, 0x2
	0x032241FC CINC W0, W8, LE
	0x03224200 B 0x3224250
	0x03224204 MOVZ W0, 0x1B
	0x03224208 B 0x3224250
	0x0322420C MOVZ W0, 0x12
	0x03224210 B 0x3224250
	0x03224214 MOVZ W0, 0xF
	0x03224218 B 0x3224250
	0x0322421C MOVZ W0, 0xC
	0x03224220 B 0x3224250
	0x03224224 MOVZ W0, 0x9
	0x03224228 B 0x3224250
	0x0322422C MOVZ W0, 0x8
	0x03224230 B 0x3224250
	0x03224234 MOVZ W0, 0x7
	0x03224238 B 0x3224250
	0x0322423C MOVZ W0, 0x6
	0x03224240 B 0x3224250
	0x03224244 MOVZ W0, 0x5
	0x03224248 B 0x3224250
	0x0322424C MOVZ W0, 0x4
	0x03224250 CMP W19, 0x5
	0x03224254 B.HI 0x32242A4
	0x03224258 ADRP X9, 0xFFFFFFFFFD972000
	0x0322425C MOV W8, W19
	0x03224260 ADD X9, X9, 0x41D
	0x03224264 ADR X10, 0x10
	0x03224268 LDRB W11, [X9, X8, LSL]
	0x0322426C ADD X10, X10, X11, 0x2, LSL
	0x03224270 BR X10
	0x03224274 UBFM W8, W0, 0x2, 0x1F
	0x03224278 CMP W8, 0x0
	0x0322427C CSINC W0, W8, W31, NE
	0x03224280 B 0x3224298
	0x03224284 UBFM W0, W0, 0x1, 0x1F
	0x03224288 B 0x3224298
	0x0322428C UBFM W0, W0, 0x1F, 0x1E
	0x03224290 B 0x3224298
	0x03224294 UBFM W0, W0, 0x1E, 0x1D
	0x03224298 LDP X30, X19, [X31], #0x10
	0x0322429C RET
	0x032242A0 BL 0x1C16F20
	0x032242A4 ADRP X0, 0xED7000
	0x032242A8 LDR X0, [X0 + 0x760]
	0x032242AC BL 0x1C16D08
	0x032242B0 BL 0x1C16F10
	0x032242B4 MOV X19, X0
	0x032242B8 ADRP X0, 0xEFD000
	0x032242BC LDR X0, [X0 + 0x770]
	0x032242C0 BL 0x1C16D08
	0x032242C4 MOV X1, X0
	0x032242C8 MOV X0, X19
	0x032242CC MOV X2, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x11B9000
	008 Move X23, 0xEFE000
	009 Move W8, [X22+822]
	010 Move X23, [X23+3472]
	011 Move X19, X2
	012 Move X21, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xEFE000
	019 Move X0, [X0+3472]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+822], W8
	023 Move X0, [X23]
	024 Call 0x1C17F10
	025 Move W1, 1
	026 Move X22, X0
	027 Call BigInteger..ctor, X0, X1
	028 Move X0, [X23]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X19
	034 Move W1, W31
	035 Call BigInteger.op_Equality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {72}
	040 Compare X19, 0
	041 JumpIfEqual {80}
	042 Move X0, X19
	043 Move W1, W31
	044 Call BigInteger.TestBit, X0, X1
	045 And W31, W0, 1
	046 Move X0, X19
	047 NotImplemented "Instruction CSEL not yet implemented."
	048 Call BigInteger.BitCount, X0
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move W23, 1
	051 Move X0, X20
	052 Move X1, X21
	053 Move X2, X21
	054 Call ModulusRing.Multiply, X0, X1, X2
	055 Move X21, X0
	056 Move X0, X19
	057 Move W1, W23
	058 Call BigInteger.TestBit, X0, X1
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {68}
	063 Move X0, X20
	064 Move X1, X21
	065 Move X2, X22
	066 Call ModulusRing.Multiply, X0, X1, X2
	067 Move X22, X0
	068 Move X0, X19
	069 Add W23, W23, 1
	070 Call BigInteger.BitCount, X0
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X0, X22
	073 Move X20, [X31+32]
	074 Move X19, [X31+40]
	075 Move X22, [X31+16]
	076 Move X21, [X31+24]
	077 Move X30, [X31+48]
	078 Move X23, [X31+56]
	079 Return X0
	080 Call 0x1C17F20

Method: Mono.Math.BigInteger Pow(System.UInt32 b, Mono.Math.BigInteger exp)

Disassembly:
	0x03224DC4 ADRP X20, 0xEF7000
	0x03224DC8 LDRB W8, [X21 + 0x349]
	0x03224DCC LDR X20, [X20 + 0x850]
	0x03224DD0 MOV X19, X0
	0x03224DD4 TBNZ X8, 0x0, 0x3224DEC
	0x03224DD8 ADRP X0, 0xEF7000
	0x03224DDC LDR X0, [X0 + 0x850]
	0x03224DE0 BL 0x1C16CF4
	0x03224DE4 MOVZ W8, 0x1
	0x03224DE8 STRB W8, [X21 + 0x349]
	0x03224DEC LDR X0, [X20]
	0x03224DF0 LDR X19, [X19 + 0x10]
	0x03224DF4 LDR W8, [X0 + 0xE0]
	0x03224DF8 CBNZ W8, 0x3224E00
	0x03224DFC BL 0x1C16DFC
	0x03224E00 MOV X0, X19
	0x03224E04 LDP X20, X19, [X31 + 0x10]
	0x03224E08 MOV X1, X31
	0x03224E0C LDP X30, X21, [X31], #0x20
	0x03224E10 B 0x32C132C
	0x03224E14 STR X30, [X31 - 0x20]!
	0x03224E18 STP X20, X19, [X31 + 0x10]
	0x03224E1C MOV X19, X1
	0x03224E20 AND W2, W2, 0x1
	0x03224E24 MOV X1, X31
	0x03224E28 MOV X3, X31
	0x03224E2C MOV X20, X0
	0x03224E30 BL 0x32C0158

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x11B9000
	008 Move X23, 0xEFE000
	009 Move W8, [X22+823]
	010 Move X23, [X23+3472]
	011 Move X19, X2
	012 Move W21, W1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xEFE000
	019 Move X0, [X0+3472]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+823], W8
	023 Move X0, [X23]
	024 Call 0x1C17F10
	025 Move W1, W21
	026 Move X22, X0
	027 Call BigInteger..ctor, X0, X1
	028 Move X0, X20
	029 Move X1, X22
	030 Move X2, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Move X23, [X31+56]
	037 Call ModulusRing.Pow, X0, X1, X2
	038 Return X0

