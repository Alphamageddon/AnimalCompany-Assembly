Type: Mono.RuntimeClassHandle

Method: System.Void .ctor(Mono.RuntimeStructs/MonoClass* value)

Disassembly:
	0x0320B924 ADRP X8, 0xF16000
	0x0320B928 LDR X8, [X8 + 0x8F0]

ISIL:
	001 Move [X0], X1
	002 Return 

Method: System.Void .ctor(System.IntPtr ptr)

Disassembly:
	0x0320B92C LDR X1, [X8]
	0x0320B930 LDR X8, [X0]
	0x0320B934 CMP X8, X1
	0x0320B938 B.NE 0x320B94C
	0x0320B93C STR X0, [X19 + 0x70]
	0x0320B940 LDR X8, [X0]
	0x0320B944 CMP X8, X1
	0x0320B948 B.EQ 0x320B954

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, X1
	005 Move X1, X31
	006 Call IntPtr.op_Explicit, X0
	007 Move [X19], X0
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 

Method: Mono.RuntimeStructs/MonoClass* get_Value()

Disassembly:
	0x0320B94C BL 0x1C171E0
	0x0320B950 STR X31, [X19 + 0x70]

ISIL:
	001 Move X0, [X0]
	002 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x0320B954 LDP X20, X19, [X31 + 0x10]
	0x0320B958 LDR X30, [X31], #0x20
	0x0320B95C RET
	0x0320B960 BL 0x1C16F20
	0x0320B964 STR X30, [X31 - 0x30]!
	0x0320B968 STP X22, X21, [X31 + 0x10]
	0x0320B96C STP X20, X19, [X31 + 0x20]
	0x0320B970 ADRP X22, 0x11D1000
	0x0320B974 ADRP X21, 0xF16000
	0x0320B978 LDRB W8, [X22 + 0x28A]
	0x0320B97C LDR X21, [X21 + 0x8F0]
	0x0320B980 MOV X19, X1
	0x0320B984 MOV X20, X0
	0x0320B988 TBNZ X8, 0x0, 0x320B9A0
	0x0320B98C ADRP X0, 0xF16000
	0x0320B990 LDR X0, [X0 + 0x8F0]
	0x0320B994 BL 0x1C16CF4
	0x0320B998 MOVZ W8, 0x1
	0x0320B99C STRB W8, [X22 + 0x28A]
	0x0320B9A0 LDR X0, [X21]
	0x0320B9A4 LDR X20, [X20 + 0x70]
	0x0320B9A8 LDR W8, [X0 + 0xE0]
	0x0320B9AC CBNZ W8, 0x320B9B4
	0x0320B9B0 BL 0x1C16DFC
	0x0320B9B4 MOV X0, X19
	0x0320B9B8 MOV X1, X31
	0x0320B9BC BL 0x3249A78
	0x0320B9C0 CBZ X20, 0x320B9E0
	0x0320B9C4 MOV X1, X0
	0x0320B9C8 MOV X0, X20
	0x0320B9CC LDP X20, X19, [X31 + 0x20]
	0x0320B9D0 LDP X22, X21, [X31 + 0x10]
	0x0320B9D4 MOV X2, X31
	0x0320B9D8 LDR X30, [X31], #0x30
	0x0320B9DC B 0x32492C8
	0x0320B9E0 BL 0x1C16F20
	0x0320B9E4 RET
	0x0320B9E8 STR X30, [X31 - 0x30]!
	0x0320B9EC STP X22, X21, [X31 + 0x10]
	0x0320B9F0 STP X20, X19, [X31 + 0x20]
	0x0320B9F4 ADRP X20, 0x11D1000
	0x0320B9F8 ADRP X22, 0xEE9000
	0x0320B9FC ADRP X21, 0xEE9000
	0x0320BA00 LDRB W8, [X20 + 0x29D]
	0x0320BA04 LDR X22, [X22 + 0x1D0]
	0x0320BA08 LDR X21, [X21 + 0x1C0]
	0x0320BA0C MOV X19, X0
	0x0320BA10 TBNZ X8, 0x0, 0x320BA34
	0x0320BA14 ADRP X0, 0xEE9000
	0x0320BA18 LDR X0, [X0 + 0x1C0]
	0x0320BA1C BL 0x1C16CF4
	0x0320BA20 ADRP X0, 0xEE9000
	0x0320BA24 LDR X0, [X0 + 0x1D0]
	0x0320BA28 BL 0x1C16CF4
	0x0320BA2C MOVZ W8, 0x1
	0x0320BA30 STRB W8, [X20 + 0x29D]
	0x0320BA34 LDR X0, [X22]
	0x0320BA38 BL 0x1C16F10
	0x0320BA3C LDR X1, [X21]
	0x0320BA40 MOV X20, X0
	0x0320BA44 BL 0x301B7C4
	0x0320BA48 STR X20, [X19 + 0x10]
	0x0320BA4C LDR X0, [X22]
	0x0320BA50 BL 0x1C16F10
	0x0320BA54 LDR X1, [X21]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x11D2000
	009 Move W8, [X21+640]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xF17000
	017 Move X0, [X0+2216]
	018 Call 0x1C17CF4
	019 Move X0, 0xEE9000
	020 Move X0, [X0+1728]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+640], W8
	024 Compare X19, 0
	025 JumpIfEqual {56}
	026 Move X23, 0xF17000
	027 Move X23, [X23+2216]
	028 Move X8, [X20]
	029 Move X22, 0xEE9000
	030 Add X1, X31, 8
	031 Move X0, [X23]
	032 Move X22, [X22+1728]
	033 Move [X31+8], X8
	034 Call 0x1C17E04
	035 Move X1, X31
	036 Call "il2cpp_vm_object_is_inst", X0
	037 Move X21, X0
	038 Move X0, X19
	039 Move X1, X31
	040 Call "il2cpp_vm_object_is_inst", X0
	041 Move X8, [X22]
	042 Move X22, X0
	043 Move W9, [X8+224]
	044 Compare W9, 0
	045 JumpIfNotEqual {48}
	046 Move X0, X8
	047 Call 0x1C17DFC
	048 Move X0, X21
	049 Move X1, X22
	050 Move X2, X31
	051 Call Type.op_Inequality, X0, X1
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {57}
	056 Move W0, W31
	057 Move X8, [X19]
	058 Move X1, [X23]
	059 Move X8, [X8+64]
	060 Move X9, [X1+64]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X20, [X20]
	063 Move X0, X19
	064 Call 0x1C17E08
	065 Move X8, [X0]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 NotImplemented "Instruction CSET not yet implemented."
	068 Move X20, [X31+48]
	069 Move X19, [X31+56]
	070 Move X22, [X31+32]
	071 Move X21, [X31+40]
	072 Move X30, [X31+16]
	073 Move X23, [X31+24]
	074 Add X31, X31, 64
	075 Return X0
	076 Move X0, X19
	077 Call 0x1C181E0

Method: System.Int32 GetHashCode()

Disassembly:
	0x0320BA58 MOV X20, X0
	0x0320BA5C BL 0x301B7C4
	0x0320BA60 STR X20, [X19 + 0x18]
	0x0320BA64 MOV X0, X19
	0x0320BA68 LDP X20, X19, [X31 + 0x20]
	0x0320BA6C LDP X22, X21, [X31 + 0x10]
	0x0320BA70 MOV X1, X31
	0x0320BA74 LDR X30, [X31], #0x30
	0x0320BA78 B 0x33BDD8C
	0x0320BA7C STR X30, [X31 - 0x30]!

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0]
	003 Move X1, X31
	004 Call IntPtr.op_Explicit, X0
	005 Move [X31+8], X0
	006 Add X0, X31, 8
	007 Move X1, X31
	008 Call IntPtr.GetHashCode, X0
	009 Move X30, [X31+16]
	010 Return X0

Method: System.IntPtr GetTypeFromClass(Mono.RuntimeStructs/MonoClass* klass)

Disassembly:
	0x0320BA80 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Call 0x1C17888
	002 Return X0

Method: System.RuntimeTypeHandle GetTypeHandle()

Disassembly:
	0x0320BA84 STP X20, X19, [X31 + 0x20]
	0x0320BA88 ADRP X21, 0x11D1000

ISIL:
	001 Move X0, [X0]
	002 Call 0x1C17888
	003 Return X0

