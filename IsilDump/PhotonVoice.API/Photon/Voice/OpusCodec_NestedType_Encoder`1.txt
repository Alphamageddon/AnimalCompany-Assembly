Type: Photon.Voice.OpusCodec/Encoder`1

Method: System.Void .ctor(Photon.Voice.VoiceInfo i, Photon.Voice.ILogger logger)

Disassembly:
	0x02BA555C MOV X0, X20
	0x02BA5560 BL 0x1C16F18
	0x02BA5564 ADRP X8, 0x1579000
	0x02BA5568 LDR X8, [X8 + 0xB80]
	0x02BA556C LDR X8, [X8]
	0x02BA5570 STR X8, [X19 + 0x20]
	0x02BA5574 LDP X20, X19, [X31 + 0x20]
	0x02BA5578 LDP X30, X21, [X31 + 0x10]
	0x02BA557C ADD X31, X31, 0x30
	0x02BA5580 RET
	0x02BA5584 B 0x2BA5588
	0x02BA5588 MOV X21, X0
	0x02BA558C CMP W1, 0x1
	0x02BA5590 B.NE 0x2BA55A8
	0x02BA5594 MOV X0, X21
	0x02BA5598 BL 0x3EB1AD0
	0x02BA559C LDR X20, [X0]
	0x02BA55A0 BL 0x3EB1AE0
	0x02BA55A4 B 0x2BA5544
	0x02BA55A8 MOV X20, X31
	0x02BA55AC B 0x2BA55B4
	0x02BA55B0 MOV X21, X0
	0x02BA55B4 LDRB W8, [X31 + 0xC]
	0x02BA55B8 CBZ W8, 0x2BA55C8
	0x02BA55BC MOV X0, X19
	0x02BA55C0 MOV X1, X31
	0x02BA55C4 BL 0x33E14E4
	0x02BA55C8 CBNZ X20, 0x2BA55D4
	0x02BA55CC MOV X0, X21
	0x02BA55D0 BL 0x1D2C690
	0x02BA55D4 MOV X0, X20
	0x02BA55D8 BL 0x1C16F18
	0x02BA55DC BL 0x1990590
	0x02BA55E0 SUB X31, X31, 0x30
	0x02BA55E4 STP X30, X21, [X31 + 0x10]
	0x02BA55E8 STP X20, X19, [X31 + 0x20]
	0x02BA55EC MOV X20, X1
	0x02BA55F0 MOV X19, X0
	0x02BA55F4 STRB W31, [X31 + 0xC]
	0x02BA55F8 ADD X1, X31, 0xC
	0x02BA55FC MOV X2, X31
	0x02BA5600 BL 0x33DE64C
	0x02BA5604 LDRB W8, [X19 + 0x18]
	0x02BA5608 CBNZ W8, 0x2BA5674
	0x02BA560C LDR X8, [X19 + 0x20]
	0x02BA5610 CBNZ X8, 0x2BA5674
	0x02BA5614 LDR X8, [X20 + 0x20]
	0x02BA5618 LDR X21, [X19 + 0x28]
	0x02BA561C LDR X8, [X8 + 0xC0]
	0x02BA5620 LDR X0, [X8 + 0x30]
	0x02BA5624 LDRB W8, [X0 + 0x135]
	0x02BA5628 TBNZ X8, 0x0, 0x2BA5630
	0x02BA562C BL 0x1C5C684
	0x02BA5630 LDR W8, [X0 + 0xE0]
	0x02BA5634 CBNZ W8, 0x2BA563C
	0x02BA5638 BL 0x1C16DFC
	0x02BA563C LDR X8, [X20 + 0x20]
	0x02BA5640 LDR X8, [X8 + 0xC0]
	0x02BA5644 LDR X0, [X8 + 0x30]
	0x02BA5648 LDRB W8, [X0 + 0x135]
	0x02BA564C TBNZ X8, 0x0, 0x2BA5654
	0x02BA5650 BL 0x1C5C684
	0x02BA5654 CBZ X21, 0x2BA56A8
	0x02BA5658 LDR X8, [X0 + 0xB8]
	0x02BA565C LDR X0, [X21 + 0x40]
	0x02BA5660 LDR X9, [X21 + 0x18]
	0x02BA5664 LDR X4, [X21 + 0x28]
	0x02BA5668 LDP X1, X2, [X8]
	0x02BA566C MOVZ W3, 0x8
	0x02BA5670 BLR X9
	0x02BA5674 MOV X20, X31
	0x02BA5678 LDRB W8, [X31 + 0xC]
	0x02BA567C CBZ W8, 0x2BA568C
	0x02BA5680 MOV X0, X19
	0x02BA5684 MOV X1, X31
	0x02BA5688 BL 0x33E14E4
	0x02BA568C CBNZ X20, 0x2BA56A0
	0x02BA5690 LDP X20, X19, [X31 + 0x20]
	0x02BA5694 LDP X30, X21, [X31 + 0x10]
	0x02BA5698 ADD X31, X31, 0x30
	0x02BA569C RET
	0x02BA56A0 MOV X0, X20
	0x02BA56A4 BL 0x1C16F18
	0x02BA56A8 BL 0x1C16F20
	0x02BA56AC B 0x2BA56B4
	0x02BA56B0 B 0x2BA56B4
	0x02BA56B4 MOV X21, X0
	0x02BA56B8 CMP W1, 0x1
	0x02BA56BC B.NE 0x2BA56D4
	0x02BA56C0 MOV X0, X21
	0x02BA56C4 BL 0x3EB1AD0
	0x02BA56C8 LDR X20, [X0]
	0x02BA56CC BL 0x3EB1AE0
	0x02BA56D0 B 0x2BA5678
	0x02BA56D4 MOV X20, X31
	0x02BA56D8 B 0x2BA56E0
	0x02BA56DC MOV X21, X0
	0x02BA56E0 LDRB W8, [X31 + 0xC]
	0x02BA56E4 CBZ W8, 0x2BA56F4
	0x02BA56E8 MOV X0, X19
	0x02BA56EC MOV X1, X31
	0x02BA56F0 BL 0x33E14E4
	0x02BA56F4 CBNZ X20, 0x2BA5700
	0x02BA56F8 MOV X0, X21
	0x02BA56FC BL 0x1D2C690
	0x02BA5700 MOV X0, X20
	0x02BA5704 BL 0x1C16F18
	0x02BA5708 BL 0x1990590
	0x02BA570C STP X30, X19, [X31 - 0x10]!
	0x02BA5710 STRB W31, [X1]
	0x02BA5714 LDR X8, [X2 + 0x20]
	0x02BA5718 MOV X19, X2
	0x02BA571C LDR X8, [X8 + 0xC0]
	0x02BA5720 LDR X0, [X8 + 0x30]
	0x02BA5724 LDRB W8, [X0 + 0x135]
	0x02BA5728 TBNZ X8, 0x0, 0x2BA5730
	0x02BA572C BL 0x1C5C684
	0x02BA5730 LDR W8, [X0 + 0xE0]
	0x02BA5734 CBNZ W8, 0x2BA573C
	0x02BA5738 BL 0x1C16DFC
	0x02BA573C LDR X8, [X19 + 0x20]
	0x02BA5740 LDR X8, [X8 + 0xC0]
	0x02BA5744 LDR X0, [X8 + 0x30]
	0x02BA5748 LDRB W8, [X0 + 0x135]
	0x02BA574C TBNZ X8, 0x0, 0x2BA5754
	0x02BA5750 BL 0x1C5C684
	0x02BA5754 LDR X8, [X0 + 0xB8]
	0x02BA5758 LDP X0, X1, [X8]
	0x02BA575C LDP X30, X19, [X31], #0x10
	0x02BA5760 RET
	0x02BA5764 SUB X31, X31, 0x30
	0x02BA5768 STP X30, X21, [X31 + 0x10]
	0x02BA576C STP X20, X19, [X31 + 0x20]
	0x02BA5770 MOV X19, X0
	0x02BA5774 STRB W31, [X31 + 0xC]
	0x02BA5778 ADD X1, X31, 0xC
	0x02BA577C MOV X2, X31
	0x02BA5780 BL 0x33DE64C
	0x02BA5784 LDR X0, [X19 + 0x10]
	0x02BA5788 CBZ X0, 0x2BA5794
	0x02BA578C MOV X1, X31
	0x02BA5790 BL 0x3552AE0
	0x02BA5794 MOVZ W8, 0x1
	0x02BA5798 MOV X20, X31
	0x02BA579C STRB W8, [X19 + 0x18]
	0x02BA57A0 LDRB W8, [X31 + 0xC]
	0x02BA57A4 CBZ W8, 0x2BA57B4
	0x02BA57A8 MOV X0, X19
	0x02BA57AC MOV X1, X31
	0x02BA57B0 BL 0x33E14E4
	0x02BA57B4 CBNZ X20, 0x2BA57C8
	0x02BA57B8 LDP X20, X19, [X31 + 0x20]
	0x02BA57BC LDP X30, X21, [X31 + 0x10]
	0x02BA57C0 ADD X31, X31, 0x30
	0x02BA57C4 RET
	0x02BA57C8 MOV X0, X20
	0x02BA57CC BL 0x1C16F18
	0x02BA57D0 B 0x2BA57D4
	0x02BA57D4 MOV X21, X0
	0x02BA57D8 CMP W1, 0x1
	0x02BA57DC B.NE 0x2BA57F4
	0x02BA57E0 MOV X0, X21
	0x02BA57E4 BL 0x3EB1AD0
	0x02BA57E8 LDR X20, [X0]
	0x02BA57EC BL 0x3EB1AE0
	0x02BA57F0 B 0x2BA57A0
	0x02BA57F4 MOV X20, X31
	0x02BA57F8 B 0x2BA5800
	0x02BA57FC MOV X21, X0
	0x02BA5800 LDRB W8, [X31 + 0xC]
	0x02BA5804 CBZ W8, 0x2BA5814
	0x02BA5808 MOV X0, X19
	0x02BA580C MOV X1, X31
	0x02BA5810 BL 0x33E14E4
	0x02BA5814 CBNZ X20, 0x2BA5820
	0x02BA5818 MOV X0, X21
	0x02BA581C BL 0x1D2C690
	0x02BA5820 MOV X0, X20
	0x02BA5824 BL 0x1C16F18
	0x02BA5828 BL 0x1990590
	0x02BA582C SUB X31, X31, 0x40
	0x02BA5830 STR X30, [X31 + 0x10]
	0x02BA5834 STP X22, X21, [X31 + 0x20]
	0x02BA5838 STP X20, X19, [X31 + 0x30]
	0x02BA583C ADRP X21, 0x1836000
	0x02BA5840 ADRP X22, 0x154E000
	0x02BA5844 ADRP X20, 0x1559000
	0x02BA5848 LDRB W8, [X21 + 0x5C9]
	0x02BA584C LDR X22, [X22 + 0x618]
	0x02BA5850 LDR X20, [X20 + 0xE68]
	0x02BA5854 MOV X19, X0
	0x02BA5858 TBNZ X8, 0x0, 0x2BA587C
	0x02BA585C ADRP X0, 0x1559000
	0x02BA5860 LDR X0, [X0 + 0xE68]
	0x02BA5864 BL 0x1C16CF4
	0x02BA5868 ADRP X0, 0x154E000
	0x02BA586C LDR X0, [X0 + 0x618]
	0x02BA5870 BL 0x1C16CF4
	0x02BA5874 MOVZ W8, 0x1
	0x02BA5878 STRB W8, [X21 + 0x5C9]
	0x02BA587C LDR X0, [X22]
	0x02BA5880 MOV W1, W31
	0x02BA5884 BL 0x1C16D6C
	0x02BA5888 LDR X2, [X20]
	0x02BA588C MOV X1, X0
	0x02BA5890 ADD X0, X31, 0x0
	0x02BA5894 STP X31, X31, [X31]
	0x02BA5898 BL 0x2B87B6C
	0x02BA589C LDR X0, [X19 + 0x20]
	0x02BA58A0 LDRB W8, [X0 + 0x135]
	0x02BA58A4 TBNZ X8, 0x0, 0x2BA58AC
	0x02BA58A8 BL 0x1C5C684
	0x02BA58AC LDR X8, [X0 + 0xC0]
	0x02BA58B0 LDR X0, [X8 + 0x30]
	0x02BA58B4 LDRB W8, [X0 + 0x135]
	0x02BA58B8 TBNZ X8, 0x0, 0x2BA58C0
	0x02BA58BC BL 0x1C5C684
	0x02BA58C0 LDR X8, [X0 + 0xB8]
	0x02BA58C4 LDR V0, [X31]
	0x02BA58C8 STR V0, [X8]
	0x02BA58CC LDR X0, [X19 + 0x20]
	0x02BA58D0 LDRB W8, [X0 + 0x135]
	0x02BA58D4 TBNZ X8, 0x0, 0x2BA58DC
	0x02BA58D8 BL 0x1C5C684
	0x02BA58DC LDR X8, [X0 + 0xC0]
	0x02BA58E0 LDR X0, [X8 + 0x30]
	0x02BA58E4 LDRB W8, [X0 + 0x135]
	0x02BA58E8 TBNZ X8, 0x0, 0x2BA58F0
	0x02BA58EC BL 0x1C5C684
	0x02BA58F0 LDP X20, X19, [X31 + 0x30]
	0x02BA58F4 LDP X22, X21, [X31 + 0x20]
	0x02BA58F8 LDR X30, [X31 + 0x10]
	0x02BA58FC ADD X31, X31, 0x40
	0x02BA5900 RET
	0x02BA5904 LDR X0, [X0 + 0x10]
	0x02BA5908 RET
	0x02BA590C STR X1, [X0 + 0x10]
	0x02BA5910 RET
	0x02BA5914 STR X1, [X0 + 0x18]
	0x02BA5918 RET
	0x02BA591C LDR X0, [X0 + 0x18]
	0x02BA5920 RET
	0x02BA5924 STP X30, X19, [X31 - 0x10]!

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+48], X30
	003 Move [X31+64], X26
	004 Move [X31+72], X25
	005 Move [X31+80], X24
	006 Move [X31+88], X23
	007 Move [X31+96], X22
	008 Move [X31+104], X21
	009 Move [X31+112], X20
	010 Move [X31+120], X19
	011 Move X22, 0x1837000
	012 Move X25, 0x157A000
	013 Move W8, [X22+1473]
	014 Move X25, [X25+2912]
	015 Move X19, X2
	016 Move X21, X1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {39}
	022 Move X0, 0x154F000
	023 Move X0, [X0+2504]
	024 Call 0x1C17CF4
	025 Move X0, 0x1554000
	026 Move X0, [X0+840]
	027 Call 0x1C17CF4
	028 Move X0, 0x157A000
	029 Move X0, [X0+2912]
	030 Call 0x1C17CF4
	031 Move X0, 0x154F000
	032 Move X0, [X0+2104]
	033 Call 0x1C17CF4
	034 Move X0, 0x157A000
	035 Move X0, [X0+2920]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X22+1473], W8
	039 NotImplemented "Instruction MOVI not yet implemented."
	040 Move X0, X20
	041 Move X1, X31
	042 Move [X31+16], V0
	043 Move [X31+24], V0
	044 Move [X31], V0
	045 Call Object..ctor, X0
	046 Move W22, [X21+4]
	047 Move W23, [X21+8]
	048 Move W26, [X21+12]
	049 Move W24, [X21+16]
	050 Move X0, [X25]
	051 Call 0x1C17F10
	052 Move W9, 0x4DD3
	053 Move W8, W26
	054 ShiftRight W8, 31
	055 And W8, W8, 0x3FFFFFFF
	056 NotImplemented "Instruction MOVK not yet implemented."
	057 NotImplemented "Instruction SMADDL not yet implemented."
	058 Move X25, X0
	059 Move X9, X8
	060 ShiftRight X9, 63
	061 And X9, X9, 0x7FFFFFFF
	062 NotImplemented "Instruction SBFM not yet implemented."
	063 Add W5, W8, W9
	064 Move W4, 2048
	065 Move W1, W22
	066 Move W2, W23
	067 Move W3, W24
	068 Move X6, X31
	069 Call OpusEncoder..ctor, X0, X1, X2, X3, X4, X5
	070 Move [X20+16], X25
	071 Move X0, X31
	072 Call OpusCodec.get_Version
	073 Move V1, [X21+16]
	074 Move V0, [X21+32]
	075 Move V2, [X21]
	076 Move X22, X0
	077 Move [X31+16], V1
	078 Move [X31+24], V0
	079 Move [X31], V2
	080 Add X0, X31, 0
	081 Move X1, X31
	082 Call VoiceInfo.ToString, X0
	083 Move X8, 0x157A000
	084 Move X8, [X8+2920]
	085 Move X9, 0x154F000
	086 Move X9, [X9+2104]
	087 Move X3, X0
	088 Move X0, [X8]
	089 Move X2, [X9]
	090 Move X1, X22
	091 Move X4, X31
	092 Call String.Concat, X0, X1, X2, X3
	093 Move X8, 0x154F000
	094 Move X8, [X8+2504]
	095 Move X21, X0
	096 Move X22, [X8]
	097 Move X8, [X22+56]
	098 Compare X8, 0
	099 JumpIfNotEqual {103}
	100 Move X0, X22
	101 Call 0x1C5D6E0
	102 Move X8, [X22+56]
	103 Move X0, [X8+16]
	104 Move W8, [X0+309]
	105 Move TEMP, X8
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfEqual {110}
	109 Call 0x1C5D684
	110 Move W8, [X0+224]
	111 Compare W8, 0
	112 JumpIfNotEqual {114}
	113 Call 0x1C17DFC
	114 Move X8, [X22+56]
	115 Move X0, [X8+16]
	116 Move W8, [X0+309]
	117 Move TEMP, X8
	118 And TEMP, TEMP, 1
	119 Compare TEMP, 1
	120 JumpIfEqual {122}
	121 Call 0x1C5D684
	122 Compare X19, 0
	123 JumpIfEqual {164}
	124 Move X10, 0x1554000
	125 Move X9, [X0+184]
	126 Move X8, [X19]
	127 Move X10, [X10+840]
	128 Move X22, [X9]
	129 NotImplemented "Instruction LDRH not yet implemented."
	130 Move X1, [X10]
	131 Compare X9, 0
	132 JumpIfEqual {139}
	133 Move X10, [X8+176]
	134 Add X10, X10, 8
	135 NotImplemented "Instruction LDUR not yet implemented."
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Subtract X9, X9, 1
	138 Add X10, X10, 16
	139 Move W2, 1
	140 Move X0, X19
	141 Call 0x1C5D788
	142 Move W9, [X10]
	143 Add W9, W9, 1
	144 Add X8, X8, W9
	145 Add X0, X8, 312
	146 Move X8, [X0]
	147 Move X4, [X0+8]
	148 Move W1, 3
	149 Move X0, X19
	150 Move X2, X21
	151 Move X3, X22
	152 NotImplemented "Instruction BLR not yet implemented."
	153 Move X20, [X31+112]
	154 Move X19, [X31+120]
	155 Move X22, [X31+96]
	156 Move X21, [X31+104]
	157 Move X24, [X31+80]
	158 Move X23, [X31+88]
	159 Move X26, [X31+64]
	160 Move X25, [X31+72]
	161 Move X30, [X31+48]
	162 Add X31, X31, 128
	163 Return 
	164 Call 0x1C17F20
	165 Move X21, X0
	166 NotImplemented "Instruction CMP not yet implemented."
	167 Move X0, X21
	168 Call 0x3EB2AD0
	169 Move X21, X0
	170 Move X0, 0x154F000
	171 Move X0, [X0+2000]
	172 Call 0x1C17D08
	173 Move X8, [X21]
	174 Move X1, [X8]
	175 Call 0x1C18270
	176 Move TEMP, X0
	177 And TEMP, TEMP, 1
	178 Compare TEMP, 1
	179 JumpIfNotEqual {267}
	180 Move X21, [X21]
	181 Call 0x3EB2AE0
	182 Compare X21, 0
	183 JumpIfEqual {266}
	184 Move X8, [X21]
	185 Move X0, X21
	186 Move X9, [X8+360]
	187 Move X1, [X8+368]
	188 NotImplemented "Instruction BLR not yet implemented."
	189 Move X21, X0
	190 Move [X20+32], X0
	191 Compare X0, 0
	192 JumpIfNotEqual {198}
	193 Move X0, 0x157A000
	194 Move X0, [X0+2928]
	195 Call 0x1C17D08
	196 Move X21, X0
	197 Move [X20+32], X0
	198 Move X0, 0x157A000
	199 Move X0, [X0+2936]
	200 Call 0x1C17D08
	201 Move X1, X21
	202 Move X2, X31
	203 Call String.Concat, X0, X1
	204 Move X20, X0
	205 Move X0, 0x154F000
	206 Move X0, [X0+2504]
	207 Call 0x1C17D08
	208 Move X8, [X0+56]
	209 Move X21, X0
	210 Compare X8, 0
	211 JumpIfNotEqual {215}
	212 Move X0, X21
	213 Call 0x1C5D6E0
	214 Move X8, [X21+56]
	215 Move X0, [X8+16]
	216 Move W8, [X0+309]
	217 Move TEMP, X8
	218 And TEMP, TEMP, 1
	219 Compare TEMP, 1
	220 JumpIfEqual {222}
	221 Call 0x1C5D684
	222 Move W8, [X0+224]
	223 Compare W8, 0
	224 JumpIfNotEqual {226}
	225 Call 0x1C17DFC
	226 Move X8, [X21+56]
	227 Move X0, [X8+16]
	228 Move W8, [X0+309]
	229 Move TEMP, X8
	230 And TEMP, TEMP, 1
	231 Compare TEMP, 1
	232 JumpIfEqual {234}
	233 Call 0x1C5D684
	234 Compare X19, 0
	235 JumpIfEqual {266}
	236 Move X8, [X0+184]
	237 Move X0, 0x1554000
	238 Move X21, [X8]
	239 Move X0, [X0+840]
	240 Call 0x1C17D08
	241 Move X8, [X19]
	242 Move X1, X0
	243 NotImplemented "Instruction LDRH not yet implemented."
	244 Compare X9, 0
	245 JumpIfEqual {252}
	246 Move X10, [X8+176]
	247 Add X10, X10, 8
	248 NotImplemented "Instruction LDUR not yet implemented."
	249 NotImplemented "Instruction CMP not yet implemented."
	250 Subtract X9, X9, 1
	251 Add X10, X10, 16
	252 Move W2, 1
	253 Move X0, X19
	254 Call 0x1C5D788
	255 Move W9, [X10]
	256 Add W9, W9, 1
	257 Add X8, X8, W9
	258 Add X0, X8, 312
	259 Move X8, [X0]
	260 Move X4, [X0+8]
	261 Move W1, 1
	262 Move X0, X19
	263 Move X2, X20
	264 Move X3, X21
	265 NotImplemented "Instruction BLR not yet implemented."
	266 Call 0x1C17F20
	267 Move W0, 8
	268 Call 0x3EB2AF0
	269 Move X8, [X21]
	270 Move [X0], X8
	271 Move X1, 0x1310000
	272 Add X1, X1, 3672
	273 Move X2, X31
	274 Call 0x3EB2B00
	275 Move X21, X0
	276 Call 0x3EB2AE0
	277 Move X0, X21
	278 Call 0x1D2D690
	279 Call 0x1991590

Method: System.String get_Error()

Disassembly:
	0x02BA5928 STRB W31, [X1]
	0x02BA592C LDR X8, [X2 + 0x20]

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_Error(System.String value)

Disassembly:
	0x02BA5930 MOV X19, X2
	0x02BA5934 LDR X8, [X8 + 0xC0]

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.Void set_Output(System.Action`2<System.ArraySegment`1<System.Byte>, Photon.Voice.FrameFlags> value)

Disassembly:
	0x02BA5938 LDR X0, [X8 + 0x8]
	0x02BA593C LDRB W8, [X0 + 0x135]
	0x02BA5940 TBNZ X8, 0x0, 0x2BA5948
	0x02BA5944 BL 0x1C5C684
	0x02BA5948 LDR W8, [X0 + 0xE0]
	0x02BA594C CBNZ W8, 0x2BA5954
	0x02BA5950 BL 0x1C16DFC
	0x02BA5954 LDR X8, [X19 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Move [X0+40], X1
	004 Compare X8, 0
	005 JumpIfEqual {9}
	006 Move [X8+64], X1
	007 Move X30, [X31+16]
	008 Return 
	009 Call 0x1C17F20

Method: System.Action`2<System.ArraySegment`1<System.Byte>, Photon.Voice.FrameFlags> get_Output()

Disassembly:
	0x02BA5958 LDR X8, [X8 + 0xC0]
	0x02BA595C LDR X0, [X8 + 0x8]

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void Input(T[] buf)

Disassembly:
	0x02BA5960 LDRB W8, [X0 + 0x135]
	0x02BA5964 TBNZ X8, 0x0, 0x2BA596C
	0x02BA5968 BL 0x1C5C684
	0x02BA596C LDR X8, [X0 + 0xB8]
	0x02BA5970 LDP X0, X1, [X8]
	0x02BA5974 LDP X30, X19, [X31], #0x10
	0x02BA5978 RET
	0x02BA597C RET
	0x02BA5980 RET
	0x02BA5984 SUB X31, X31, 0x30
	0x02BA5988 STP X30, X21, [X31 + 0x10]
	0x02BA598C STP X20, X19, [X31 + 0x20]
	0x02BA5990 ADRP X21, 0x1836000
	0x02BA5994 LDRB W8, [X21 + 0x5CA]
	0x02BA5998 MOV X20, X1
	0x02BA599C MOV X19, X0
	0x02BA59A0 TBNZ X8, 0x0, 0x2BA59D0
	0x02BA59A4 ADRP X0, 0x1579000
	0x02BA59A8 LDR X0, [X0 + 0xB88]
	0x02BA59AC BL 0x1C16CF4
	0x02BA59B0 ADRP X0, 0x154E000
	0x02BA59B4 LDR X0, [X0 + 0x618]
	0x02BA59B8 BL 0x1C16CF4
	0x02BA59BC ADRP X0, 0x1579000
	0x02BA59C0 LDR X0, [X0 + 0xB90]
	0x02BA59C4 BL 0x1C16CF4
	0x02BA59C8 MOVZ W8, 0x1
	0x02BA59CC STRB W8, [X21 + 0x5CA]
	0x02BA59D0 LDR X8, [X19 + 0x10]
	0x02BA59D4 CBZ X8, 0x2BA59E8
	0x02BA59D8 LDP X20, X19, [X31 + 0x20]
	0x02BA59DC LDP X30, X21, [X31 + 0x10]
	0x02BA59E0 ADD X31, X31, 0x30
	0x02BA59E4 RET
	0x02BA59E8 LDR X8, [X19 + 0x18]
	0x02BA59EC CBZ X8, 0x2BA5A94
	0x02BA59F0 CBZ X20, 0x2BA59D8
	0x02BA59F4 LDR X8, [X20 + 0x18]
	0x02BA59F8 CBZ X8, 0x2BA59D8
	0x02BA59FC LDR X2, [X19 + 0x28]
	0x02BA5A00 CBZ X2, 0x2BA5AA8
	0x02BA5A04 LDR W9, [X19 + 0x20]
	0x02BA5A08 LDR W10, [X2 + 0x18]
	0x02BA5A0C MUL W21, W9, W8
	0x02BA5A10 CMP W21, W10
	0x02BA5A14 B.LE 0x2BA5A34
	0x02BA5A18 ADRP X8, 0x154E000
	0x02BA5A1C LDR X8, [X8 + 0x618]
	0x02BA5A20 MOV W1, W21
	0x02BA5A24 LDR X0, [X8]
	0x02BA5A28 BL 0x1C16D6C
	0x02BA5A2C MOV X2, X0
	0x02BA5A30 STR X0, [X19 + 0x28]
	0x02BA5A34 MOV X0, X20
	0x02BA5A38 MOV W1, W31
	0x02BA5A3C MOV W3, W31
	0x02BA5A40 MOV W4, W21
	0x02BA5A44 MOV X5, X31
	0x02BA5A48 BL 0x33A8A9C
	0x02BA5A4C ADRP X8, 0x1579000
	0x02BA5A50 LDR X20, [X19 + 0x18]
	0x02BA5A54 LDR X1, [X19 + 0x28]
	0x02BA5A58 LDR X8, [X8 + 0xB88]
	0x02BA5A5C ADD X0, X31, 0x0
	0x02BA5A60 MOV W2, W31
	0x02BA5A64 MOV W3, W21
	0x02BA5A68 LDR X4, [X8]
	0x02BA5A6C STP X31, X31, [X31]
	0x02BA5A70 BL 0x2B87BB0
	0x02BA5A74 CBZ X20, 0x2BA5AA8
	0x02BA5A78 LDP X1, X2, [X31]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1837000
	007 Move W8, [X21+1474]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x157A000
	015 Move X0, [X0+2944]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1474], W8
	019 Move X8, [X19+32]
	020 Compare X8, 0
	021 JumpIfNotEqual {57}
	022 Move X8, [X19+40]
	023 Compare X8, 0
	024 JumpIfEqual {53}
	025 Move [X31+12], W31
	026 Add X1, X31, 12
	027 Move X0, X19
	028 Move X2, X31
	029 Call Monitor.Enter, X0, X1
	030 Move W8, [X19+24]
	031 Compare W8, 0
	032 JumpIfNotEqual {42}
	033 Move X8, [X19+32]
	034 Compare X8, 0
	035 JumpIfNotEqual {42}
	036 Move X8, [X19]
	037 Move X9, [X8+488]
	038 Move X2, [X8+496]
	039 Move X0, X19
	040 Move X1, X20
	041 NotImplemented "Instruction BLR not yet implemented."
	042 Move X20, X31
	043 Move W8, [X31+12]
	044 Compare W8, 0
	045 JumpIfEqual {49}
	046 Move X0, X19
	047 Move X1, X31
	048 Call Monitor.Exit, X0
	049 Compare X20, 0
	050 JumpIfEqual {57}
	051 Move X0, X20
	052 Call 0x1C17F18
	053 Move X8, 0x157A000
	054 Move X8, [X8+2944]
	055 Move X8, [X8]
	056 Move [X19+32], X8
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X30, [X31+16]
	060 Move X21, [X31+24]
	061 Add X31, X31, 48
	062 Return 
	063 Move X21, X0
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X0, X21
	066 Call 0x3EB2AD0
	067 Move X20, [X0]
	068 Call 0x3EB2AE0
	069 Move X20, X31
	070 Move X21, X0
	071 Move W8, [X31+12]
	072 Compare W8, 0
	073 JumpIfEqual {77}
	074 Move X0, X19
	075 Move X1, X31
	076 Call Monitor.Exit, X0
	077 Compare X20, 0
	078 JumpIfNotEqual {81}
	079 Move X0, X21
	080 Call 0x1D2D690
	081 Move X0, X20
	082 Call 0x1C17F18
	083 Call 0x1991590

Method: System.Void EndOfStream()

Disassembly:
	0x02BA5A7C LDR X8, [X20 + 0x18]
	0x02BA5A80 LDR X0, [X20 + 0x40]
	0x02BA5A84 LDR X4, [X20 + 0x28]
	0x02BA5A88 MOV W3, W31
	0x02BA5A8C BLR X8
	0x02BA5A90 B 0x2BA59D8
	0x02BA5A94 ADRP X8, 0x1579000
	0x02BA5A98 LDR X8, [X8 + 0xB90]
	0x02BA5A9C LDR X8, [X8]
	0x02BA5AA0 STR X8, [X19 + 0x10]
	0x02BA5AA4 B 0x2BA59D8
	0x02BA5AA8 BL 0x1C16F20
	0x02BA5AAC STR X30, [X31 - 0x30]!
	0x02BA5AB0 STP X22, X21, [X31 + 0x10]
	0x02BA5AB4 STP X20, X19, [X31 + 0x20]
	0x02BA5AB8 ADRP X22, 0x1836000
	0x02BA5ABC ADRP X21, 0x1576000
	0x02BA5AC0 LDRB W8, [X22 + 0x5CB]
	0x02BA5AC4 LDR X21, [X21 + 0x850]
	0x02BA5AC8 MOV X20, X1
	0x02BA5ACC MOV X19, X0
	0x02BA5AD0 TBNZ X8, 0x0, 0x2BA5AF4
	0x02BA5AD4 ADRP X0, 0x154E000
	0x02BA5AD8 LDR X0, [X0 + 0x618]
	0x02BA5ADC BL 0x1C16CF4
	0x02BA5AE0 ADRP X0, 0x1576000
	0x02BA5AE4 LDR X0, [X0 + 0x850]
	0x02BA5AE8 BL 0x1C16CF4
	0x02BA5AEC MOVZ W8, 0x1
	0x02BA5AF0 STRB W8, [X22 + 0x5CB]
	0x02BA5AF4 LDR X0, [X21]
	0x02BA5AF8 ADRP X21, 0x154E000
	0x02BA5AFC LDR W8, [X0 + 0xE0]
	0x02BA5B00 LDR X21, [X21 + 0x618]
	0x02BA5B04 CBNZ W8, 0x2BA5B0C
	0x02BA5B08 BL 0x1C16DFC
	0x02BA5B0C LDR X8, [X20 + 0x20]
	0x02BA5B10 FMOV S0, W31
	0x02BA5B14 LDR X8, [X8 + 0xC0]
	0x02BA5B18 LDR X0, [X8 + 0x38]
	0x02BA5B1C BL 0x2215E24
	0x02BA5B20 STR W0, [X19 + 0x20]
	0x02BA5B24 LDR X0, [X21]
	0x02BA5B28 MOV W1, W31
	0x02BA5B2C BL 0x1C16D6C
	0x02BA5B30 STR X0, [X19 + 0x28]
	0x02BA5B34 MOV X0, X19
	0x02BA5B38 LDP X20, X19, [X31 + 0x20]
	0x02BA5B3C LDP X22, X21, [X31 + 0x10]
	0x02BA5B40 MOV X1, X31
	0x02BA5B44 LDR X30, [X31], #0x30
	0x02BA5B48 B 0x33BDD8C
	0x02BA5B4C SUB X31, X31, 0x40
	0x02BA5B50 STR X30, [X31 + 0x10]
	0x02BA5B54 STP X22, X21, [X31 + 0x20]
	0x02BA5B58 STP X20, X19, [X31 + 0x30]
	0x02BA5B5C ADRP X21, 0x1836000
	0x02BA5B60 ADRP X22, 0x154E000
	0x02BA5B64 ADRP X20, 0x1559000
	0x02BA5B68 LDRB W8, [X21 + 0x5CC]
	0x02BA5B6C LDR X22, [X22 + 0x618]
	0x02BA5B70 LDR X20, [X20 + 0xE68]
	0x02BA5B74 MOV X19, X0
	0x02BA5B78 TBNZ X8, 0x0, 0x2BA5B9C
	0x02BA5B7C ADRP X0, 0x1559000
	0x02BA5B80 LDR X0, [X0 + 0xE68]
	0x02BA5B84 BL 0x1C16CF4
	0x02BA5B88 ADRP X0, 0x154E000
	0x02BA5B8C LDR X0, [X0 + 0x618]
	0x02BA5B90 BL 0x1C16CF4
	0x02BA5B94 MOVZ W8, 0x1
	0x02BA5B98 STRB W8, [X21 + 0x5CC]
	0x02BA5B9C LDR X0, [X22]
	0x02BA5BA0 MOV W1, W31
	0x02BA5BA4 BL 0x1C16D6C

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, X1
	007 Move X19, X0
	008 Move [X31+12], W31
	009 Add X1, X31, 12
	010 Move X2, X31
	011 Call Monitor.Enter, X0, X1
	012 Move W8, [X19+24]
	013 Compare W8, 0
	014 JumpIfNotEqual {51}
	015 Move X8, [X19+32]
	016 Compare X8, 0
	017 JumpIfNotEqual {51}
	018 Move X8, [X20+32]
	019 Move X21, [X19+40]
	020 Move X8, [X8+192]
	021 Move X0, [X8+48]
	022 Move W8, [X0+309]
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {28}
	027 Call 0x1C5D684
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X8, [X20+32]
	033 Move X8, [X8+192]
	034 Move X0, [X8+48]
	035 Move W8, [X0+309]
	036 Move TEMP, X8
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {41}
	040 Call 0x1C5D684
	041 Compare X21, 0
	042 JumpIfEqual {68}
	043 Move X8, [X0+184]
	044 Move X0, [X21+64]
	045 Move X9, [X21+24]
	046 Move X4, [X21+40]
	047 Move X1, [X8]
	048 Move X2, [X8+8]
	049 Move W3, 8
	050 NotImplemented "Instruction BLR not yet implemented."
	051 Move X20, X31
	052 Move W8, [X31+12]
	053 Compare W8, 0
	054 JumpIfEqual {58}
	055 Move X0, X19
	056 Move X1, X31
	057 Call Monitor.Exit, X0
	058 Compare X20, 0
	059 JumpIfNotEqual {66}
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X30, [X31+16]
	063 Move X21, [X31+24]
	064 Add X31, X31, 48
	065 Return 
	066 Move X0, X20
	067 Call 0x1C17F18
	068 Call 0x1C17F20
	069 Move X21, X0
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X0, X21
	072 Call 0x3EB2AD0
	073 Move X20, [X0]
	074 Call 0x3EB2AE0
	075 Move X20, X31
	076 Move X21, X0
	077 Move W8, [X31+12]
	078 Compare W8, 0
	079 JumpIfEqual {83}
	080 Move X0, X19
	081 Move X1, X31
	082 Call Monitor.Exit, X0
	083 Compare X20, 0
	084 JumpIfNotEqual {87}
	085 Move X0, X21
	086 Call 0x1D2D690
	087 Move X0, X20
	088 Call 0x1C17F18
	089 Call 0x1991590

Method: System.ArraySegment`1<System.Byte> DequeueOutput(out Photon.Voice.FrameFlags flags)

Disassembly:
	0x02BA5BA8 LDR X2, [X20]
	0x02BA5BAC MOV X1, X0
	0x02BA5BB0 ADD X0, X31, 0x0
	0x02BA5BB4 STP X31, X31, [X31]
	0x02BA5BB8 BL 0x2B87B6C
	0x02BA5BBC LDR X0, [X19 + 0x20]
	0x02BA5BC0 LDRB W8, [X0 + 0x135]
	0x02BA5BC4 TBNZ X8, 0x0, 0x2BA5BCC
	0x02BA5BC8 BL 0x1C5C684
	0x02BA5BCC LDR X8, [X0 + 0xC0]
	0x02BA5BD0 LDR X0, [X8 + 0x8]
	0x02BA5BD4 LDRB W8, [X0 + 0x135]
	0x02BA5BD8 TBNZ X8, 0x0, 0x2BA5BE0
	0x02BA5BDC BL 0x1C5C684
	0x02BA5BE0 LDR X8, [X0 + 0xB8]
	0x02BA5BE4 LDR V0, [X31]
	0x02BA5BE8 STR V0, [X8]
	0x02BA5BEC LDR X0, [X19 + 0x20]
	0x02BA5BF0 LDRB W8, [X0 + 0x135]
	0x02BA5BF4 TBNZ X8, 0x0, 0x2BA5BFC
	0x02BA5BF8 BL 0x1C5C684
	0x02BA5BFC LDR X8, [X0 + 0xC0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move [X1], W31
	004 Move X8, [X2+32]
	005 Move X19, X2
	006 Move X8, [X8+192]
	007 Move X0, [X8+48]
	008 Move W8, [X0+309]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {14}
	013 Call 0x1C5D684
	014 Move W8, [X0+224]
	015 Compare W8, 0
	016 JumpIfNotEqual {18}
	017 Call 0x1C17DFC
	018 Move X8, [X19+32]
	019 Move X8, [X8+192]
	020 Move X0, [X8+48]
	021 Move W8, [X0+309]
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {27}
	026 Call 0x1C5D684
	027 Move X8, [X0+184]
	028 Move X0, [X8]
	029 Move X1, [X8+8]
	030 Move X30, [X31+16]
	031 Move X19, [X31+24]
	032 Return X0

Method: System.Void encodeTyped(T[] buf)

Disassembly:
	

ISIL:
No ISIL was generated
Method: I GetPlatformAPI()

Disassembly:
	0x0212FF28 BL 0x1C5C684
	0x0212FF2C LDR W22, [X21]

ISIL:
	001 Move X0, X31
	002 Return X0

Method: System.Void Dispose()

Disassembly:
	0x02BA5C00 LDR X0, [X8 + 0x8]
	0x02BA5C04 LDRB W8, [X0 + 0x135]
	0x02BA5C08 TBNZ X8, 0x0, 0x2BA5C10
	0x02BA5C0C BL 0x1C5C684
	0x02BA5C10 LDP X20, X19, [X31 + 0x30]
	0x02BA5C14 LDP X22, X21, [X31 + 0x20]
	0x02BA5C18 LDR X30, [X31 + 0x10]
	0x02BA5C1C ADD X31, X31, 0x40
	0x02BA5C20 RET
	0x02BA5C24 SUB X31, X31, 0x80
	0x02BA5C28 STP X30, X27, [X31 + 0x30]
	0x02BA5C2C STP X26, X25, [X31 + 0x40]
	0x02BA5C30 STP X24, X23, [X31 + 0x50]
	0x02BA5C34 STP X22, X21, [X31 + 0x60]
	0x02BA5C38 STP X20, X19, [X31 + 0x70]
	0x02BA5C3C ADRP X23, 0x1836000
	0x02BA5C40 ADRP X26, 0x1579000
	0x02BA5C44 LDRB W8, [X23 + 0x5CD]
	0x02BA5C48 LDR X26, [X26 + 0xB60]
	0x02BA5C4C MOV X21, X3
	0x02BA5C50 MOV X19, X2
	0x02BA5C54 MOV X22, X1
	0x02BA5C58 MOV X20, X0
	0x02BA5C5C TBNZ X8, 0x0, 0x2BA5CA4
	0x02BA5C60 ADRP X0, 0x154E000
	0x02BA5C64 LDR X0, [X0 + 0x9C8]
	0x02BA5C68 BL 0x1C16CF4
	0x02BA5C6C ADRP X0, 0x1553000
	0x02BA5C70 LDR X0, [X0 + 0x348]
	0x02BA5C74 BL 0x1C16CF4
	0x02BA5C78 ADRP X0, 0x1579000
	0x02BA5C7C LDR X0, [X0 + 0xB60]
	0x02BA5C80 BL 0x1C16CF4
	0x02BA5C84 ADRP X0, 0x154E000
	0x02BA5C88 LDR X0, [X0 + 0x838]
	0x02BA5C8C BL 0x1C16CF4
	0x02BA5C90 ADRP X0, 0x1579000
	0x02BA5C94 LDR X0, [X0 + 0xB68]
	0x02BA5C98 BL 0x1C16CF4
	0x02BA5C9C MOVZ W8, 0x1
	0x02BA5CA0 STRB W8, [X23 + 0x5CD]
	0x02BA5CA4 MOVI V0.2D, 0x0
	0x02BA5CA8 MOV X0, X20
	0x02BA5CAC MOV X1, X31
	0x02BA5CB0 STP V0, V0, [X31 + 0x10]
	0x02BA5CB4 STR V0, [X31]
	0x02BA5CB8 BL 0x33BDD8C
	0x02BA5CBC LDP W23, W24, [X22 + 0x4]
	0x02BA5CC0 LDP W27, W25, [X22 + 0xC]
	0x02BA5CC4 LDR X0, [X26]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, X0
	007 Move [X31+12], W31
	008 Add X1, X31, 12
	009 Move X2, X31
	010 Call Monitor.Enter, X0, X1
	011 Move X0, [X19+16]
	012 Compare X0, 0
	013 JumpIfEqual {16}
	014 Move X1, X31
	015 Call OpusEncoder.Dispose, X0
	016 Move W8, 1
	017 Move X20, X31
	018 Move [X19+24], W8
	019 Move W8, [X31+12]
	020 Compare W8, 0
	021 JumpIfEqual {25}
	022 Move X0, X19
	023 Move X1, X31
	024 Call Monitor.Exit, X0
	025 Compare X20, 0
	026 JumpIfNotEqual {33}
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X30, [X31+16]
	030 Move X21, [X31+24]
	031 Add X31, X31, 48
	032 Return 
	033 Move X0, X20
	034 Call 0x1C17F18
	035 Move X21, X0
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, X21
	038 Call 0x3EB2AD0
	039 Move X20, [X0]
	040 Call 0x3EB2AE0
	041 Move X20, X31
	042 Move X21, X0
	043 Move W8, [X31+12]
	044 Compare W8, 0
	045 JumpIfEqual {49}
	046 Move X0, X19
	047 Move X1, X31
	048 Call Monitor.Exit, X0
	049 Compare X20, 0
	050 JumpIfNotEqual {53}
	051 Move X0, X21
	052 Call 0x1D2D690
	053 Move X0, X20
	054 Call 0x1C17F18
	055 Call 0x1991590

Method: System.Void .cctor()

Disassembly:
	0x02BA5CC8 BL 0x1C16F10
	0x02BA5CCC MOVZ W9, 0x4DD3
	0x02BA5CD0 UBFM W8, W27, 0x1F, 0x1E
	0x02BA5CD4 MOVK W9, 0x10620000
	0x02BA5CD8 SMADDL X8, X8, X9, X31
	0x02BA5CDC MOV X26, X0
	0x02BA5CE0 UBFM X9, X8, 0x3F, 0x3F
	0x02BA5CE4 SBFM X8, X8, 0x26, 0x3F
	0x02BA5CE8 ADD W5, W8, W9
	0x02BA5CEC MOVZ W4, 0x800
	0x02BA5CF0 MOV W1, W23
	0x02BA5CF4 MOV W2, W24
	0x02BA5CF8 MOV W3, W25
	0x02BA5CFC MOV X6, X31
	0x02BA5D00 BL 0x3551C78
	0x02BA5D04 STR X26, [X20 + 0x10]
	0x02BA5D08 MOV X0, X31
	0x02BA5D0C BL 0x35561F0
	0x02BA5D10 LDP V1, V0, [X22 + 0x10]
	0x02BA5D14 LDR V2, [X22]
	0x02BA5D18 MOV X23, X0
	0x02BA5D1C STP V1, V0, [X31 + 0x10]
	0x02BA5D20 STR V2, [X31]
	0x02BA5D24 ADD X0, X31, 0x0
	0x02BA5D28 MOV X1, X31
	0x02BA5D2C BL 0x3559520
	0x02BA5D30 ADRP X8, 0x1579000
	0x02BA5D34 LDR X8, [X8 + 0xB68]
	0x02BA5D38 ADRP X9, 0x154E000
	0x02BA5D3C LDR X9, [X9 + 0x838]
	0x02BA5D40 MOV X3, X0
	0x02BA5D44 LDR X0, [X8]
	0x02BA5D48 LDR X2, [X9]
	0x02BA5D4C MOV X1, X23
	0x02BA5D50 MOV X4, X31
	0x02BA5D54 BL 0x32277C4
	0x02BA5D58 ADRP X8, 0x154E000
	0x02BA5D5C LDR X8, [X8 + 0x9C8]
	0x02BA5D60 MOV X22, X0
	0x02BA5D64 LDR X23, [X8]
	0x02BA5D68 LDR X8, [X23 + 0x38]
	0x02BA5D6C CBNZ X8, 0x2BA5D7C
	0x02BA5D70 MOV X0, X23
	0x02BA5D74 BL 0x1C5C6E0
	0x02BA5D78 LDR X8, [X23 + 0x38]
	0x02BA5D7C LDR X0, [X8 + 0x10]
	0x02BA5D80 LDRB W8, [X0 + 0x135]
	0x02BA5D84 TBNZ X8, 0x0, 0x2BA5D8C
	0x02BA5D88 BL 0x1C5C684
	0x02BA5D8C LDR W8, [X0 + 0xE0]
	0x02BA5D90 CBNZ W8, 0x2BA5D98
	0x02BA5D94 BL 0x1C16DFC
	0x02BA5D98 LDR X8, [X23 + 0x38]
	0x02BA5D9C LDR X0, [X8 + 0x10]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X21, 0x1837000
	008 Move X22, 0x154F000
	009 Move X20, 0x155A000
	010 Move W8, [X21+1475]
	011 Move X22, [X22+1560]
	012 Move X20, [X20+3688]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x155A000
	019 Move X0, [X0+3688]
	020 Call 0x1C17CF4
	021 Move X0, 0x154F000
	022 Move X0, [X0+1560]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+1475], W8
	026 Move X0, [X22]
	027 Move W1, W31
	028 Call 0x1C17D6C
	029 Move X2, [X20]
	030 Move X1, X0
	031 Add X0, X31, 0
	032 Move [X31], X31
	033 Move [X31+8], X31
	034 Call 0x2B88B6C, X0, X1
	035 Move X0, [X19+32]
	036 Move W8, [X0+309]
	037 Move TEMP, X8
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {42}
	041 Call 0x1C5D684
	042 Move X8, [X0+192]
	043 Move X0, [X8+48]
	044 Move W8, [X0+309]
	045 Move TEMP, X8
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {50}
	049 Call 0x1C5D684
	050 Move X8, [X0+184]
	051 Move V0, [X31]
	052 Move [X8], V0
	053 Move X0, [X19+32]
	054 Move W8, [X0+309]
	055 Move TEMP, X8
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfEqual {60}
	059 Call 0x1C5D684
	060 Move X8, [X0+192]
	061 Move X0, [X8+48]
	062 Move W8, [X0+309]
	063 Move TEMP, X8
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfEqual {68}
	067 Call 0x1C5D684
	068 Move X20, [X31+48]
	069 Move X19, [X31+56]
	070 Move X22, [X31+32]
	071 Move X21, [X31+40]
	072 Move X30, [X31+16]
	073 Add X31, X31, 64
	074 Return 

