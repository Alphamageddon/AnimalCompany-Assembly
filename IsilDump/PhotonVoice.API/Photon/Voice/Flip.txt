Type: Photon.Voice.Flip

Method: System.Boolean get_IsVertical()

Disassembly:
	0x03567920 SMULH X8, X8, X10, X31
	0x03567924 UBFM X9, X8, 0x3F, 0x3F

ISIL:
	001 Move W0, [X0]
	002 Return X0

Method: System.Void set_IsVertical(System.Boolean value)

Disassembly:
	0x03567928 UBFM X8, X8, 0x12, 0x3F
	0x0356792C ADD W8, W8, W9
	0x03567930 MUL W0, W11, W8

ISIL:
	001 And W8, W1, 1
	002 Move [X0], W8
	003 Return 

Method: System.Boolean get_IsHorizontal()

Disassembly:
	0x03567934 RET
	0x03567938 LDR W0, [X0]

ISIL:
	001 Move W0, [X0+1]
	002 Return X0

Method: System.Void set_IsHorizontal(System.Boolean value)

Disassembly:
	0x0356793C RET
	0x03567940 STR W1, [X0]
	0x03567944 RET

ISIL:
	001 And W8, W1, 1
	002 Move [X0+1], W8
	003 Return 

Method: System.Boolean op_Equality(Photon.Voice.Flip f1, Photon.Voice.Flip f2)

Disassembly:
	0x03567948 LDR W0, [X0 + 0x4]
	0x0356794C RET
	0x03567950 STR W1, [X0 + 0x4]
	0x03567954 RET
	0x03567958 LDR W0, [X0 + 0x8]
	0x0356795C RET
	0x03567960 STR W1, [X0 + 0x8]
	0x03567964 RET
	0x03567968 LDR W0, [X0 + 0xC]
	0x0356796C RET
	0x03567970 STR W1, [X0 + 0xC]
	0x03567974 RET
	0x03567978 LDR W0, [X0 + 0x10]
	0x0356797C RET
	0x03567980 STR W1, [X0 + 0x10]
	0x03567984 RET
	0x03567988 LDR W0, [X0 + 0x14]
	0x0356798C RET
	0x03567990 STR W1, [X0 + 0x14]
	0x03567994 RET
	0x03567998 LDR W0, [X0 + 0x18]
	0x0356799C RET
	0x035679A0 STR W1, [X0 + 0x18]
	0x035679A4 RET
	0x035679A8 LDR W0, [X0 + 0x1C]
	0x035679AC RET
	0x035679B0 STR W1, [X0 + 0x1C]
	0x035679B4 RET
	0x035679B8 LDR W0, [X0 + 0x20]
	0x035679BC RET
	0x035679C0 STR W1, [X0 + 0x20]
	0x035679C4 RET
	0x035679C8 LDR X0, [X0 + 0x28]
	0x035679CC RET
	0x035679D0 STR X1, [X0 + 0x28]
	0x035679D4 RET
	0x035679D8 LDRSW X8, [X0 + 0x4]
	0x035679DC LDRSW X9, [X0 + 0xC]
	0x035679E0 MOVZ X10, 0x34DB
	0x035679E4 MOVK X10, 0xD7B60000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xE79000
	007 Move X21, 0xBCF000
	008 Move W8, [X22+3558]
	009 Move X21, [X21+3176]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xBCF000
	017 Move X0, [X0+3176]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3558], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 And W31, W20, 255
	027 NotImplemented "Instruction CSET not yet implemented."
	028 And W31, W19, 255
	029 NotImplemented "Instruction CSET not yet implemented."
	030 Xor W8, W8, W9
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {36}
	035 Move W0, W31
	036 Move X0, [X21]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 And X31, X20, 0xFFFF
	042 NotImplemented "Instruction CSET not yet implemented."
	043 And X31, X19, 0xFFFF
	044 NotImplemented "Instruction CSET not yet implemented."
	045 Xor W0, W8, W9
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X30, [X31+48]
	051 Return X0

Method: System.Boolean op_Inequality(Photon.Voice.Flip f1, Photon.Voice.Flip f2)

Disassembly:
	0x035679E8 MOVK X10, 0xDE82
	0x035679EC MOVK X10, 0x431B0000
	0x035679F0 MUL X8, X9, X8
	0x035679F4 SMULH X8, X8, X10, X31
	0x035679F8 UBFM X9, X8, 0x3F, 0x3F
	0x035679FC UBFM X8, X8, 0x12, 0x3F
	0x03567A00 ADD W0, W8, W9
	0x03567A04 RET
	0x03567A08 LDP V1, V0, [X0 + 0x20]
	0x03567A0C LDR V2, [X0 + 0x1]
	0x03567A10 STP V1, V0, [X8 + 0x10]
	0x03567A14 STR V2, [X8]
	0x03567A18 RET
	0x03567A1C LDP V1, V0, [X1 + 0x10]
	0x03567A20 LDR V2, [X1]
	0x03567A24 STP V1, V0, [X0 + 0x20]
	0x03567A28 STR V2, [X0 + 0x1]
	0x03567A2C RET
	0x03567A30 LDR W0, [X0 + 0x40]
	0x03567A34 RET
	0x03567A38 STR W1, [X0 + 0x40]
	0x03567A3C RET
	0x03567A40 LDR W0, [X0 + 0x44]
	0x03567A44 RET
	0x03567A48 STR W1, [X0 + 0x44]
	0x03567A4C RET
	0x03567A50 LDRB W0, [X0 + 0x48]
	0x03567A54 RET
	0x03567A58 STRB W1, [X0 + 0x48]
	0x03567A5C RET
	0x03567A60 STP X30, X27, [X31 - 0x50]!
	0x03567A64 STP X26, X25, [X31 + 0x10]
	0x03567A68 STP X24, X23, [X31 + 0x20]
	0x03567A6C STP X22, X21, [X31 + 0x30]
	0x03567A70 STP X20, X19, [X31 + 0x40]
	0x03567A74 ADRP X21, 0xE78000
	0x03567A78 LDRB W8, [X21 + 0xDF4]
	0x03567A7C MOV X19, X1
	0x03567A80 MOV X20, X0
	0x03567A84 TBNZ X8, 0x0, 0x3567AE4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xE79000
	007 Move X21, 0xBCF000
	008 Move W8, [X22+3559]
	009 Move X21, [X21+3176]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xBCF000
	017 Move X0, [X0+3176]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3559], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 And W31, W20, 255
	027 NotImplemented "Instruction CSET not yet implemented."
	028 And W31, W19, 255
	029 NotImplemented "Instruction CSET not yet implemented."
	030 Xor W8, W8, W9
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {36}
	035 Move W0, 1
	036 Move X0, [X21]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 And X31, X20, 0xFFFF
	042 NotImplemented "Instruction CSET not yet implemented."
	043 And X31, X19, 0xFFFF
	044 NotImplemented "Instruction CSET not yet implemented."
	045 Xor W0, W8, W9
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X30, [X31+48]
	051 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03567A88 ADRP X0, 0xBCE000
	0x03567A8C LDR X0, [X0 + 0xC90]
	0x03567A90 BL 0x1C16CF4
	0x03567A94 ADRP X0, 0xBCE000
	0x03567A98 LDR X0, [X0 + 0xC98]
	0x03567A9C BL 0x1C16CF4
	0x03567AA0 ADRP X0, 0xBCE000
	0x03567AA4 LDR X0, [X0 + 0xCA0]
	0x03567AA8 BL 0x1C16CF4
	0x03567AAC ADRP X0, 0xBCE000
	0x03567AB0 LDR X0, [X0 + 0xC10]
	0x03567AB4 BL 0x1C16CF4
	0x03567AB8 ADRP X0, 0xBCE000
	0x03567ABC LDR X0, [X0 + 0xA28]
	0x03567AC0 BL 0x1C16CF4
	0x03567AC4 ADRP X0, 0xBCE000
	0x03567AC8 LDR X0, [X0 + 0xCA8]
	0x03567ACC BL 0x1C16CF4
	0x03567AD0 ADRP X0, 0xB8C000
	0x03567AD4 LDR X0, [X0 + 0x638]
	0x03567AD8 BL 0x1C16CF4
	0x03567ADC MOVZ W8, 0x1
	0x03567AE0 STRB W8, [X21 + 0xDF4]
	0x03567AE4 CBZ X19, 0x3567C64
	0x03567AE8 ADRP X9, 0xBCE000
	0x03567AEC LDR X9, [X9 + 0xCA8]
	0x03567AF0 LDR X8, [X19]
	0x03567AF4 LDR X1, [X9]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xE79000
	007 Move X21, 0xBCF000
	008 Move W8, [X22+3560]
	009 Move X21, [X21+3176]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xBCF000
	017 Move X0, [X0+3176]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3560], W8
	021 NotImplemented "Instruction LDRH not yet implemented."
	022 Move X0, [X21]
	023 Add X1, X31, 12
	024 NotImplemented "Instruction STRH not yet implemented."
	025 Call 0x1C17E04
	026 Move X1, X19
	027 Move X2, X31
	028 Call ValueType.Equals, X0, X1
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X22, [X31+16]
	032 Move X21, [X31+24]
	033 And W0, W0, 1
	034 Move X30, [X31+48]
	035 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x03567AF8 LDRB W10, [X8 + 0x130]
	0x03567AFC LDRB W9, [X1 + 0x130]
	0x03567B00 CMP W10, W9
	0x03567B04 B.CC 0x3567C68
	0x03567B08 LDR X8, [X8 + 0xC8]
	0x03567B0C ADD X8, X8, X9, 0x3, LSL
	0x03567B10 LDUR X8, [X8 - 0x8]
	0x03567B14 CMP X8, X1
	0x03567B18 B.NE 0x3567C68
	0x03567B1C LDR X0, [X19 + 0x138]
	0x03567B20 CBZ X0, 0x3567C64
	0x03567B24 ADRP X24, 0xBCE000
	0x03567B28 LDR X24, [X24 + 0xC98]
	0x03567B2C LDR X1, [X24]
	0x03567B30 BL 0x2D10CC0
	0x03567B34 LDR X22, [X20 + 0x18]
	0x03567B38 CBZ X22, 0x3567C64
	0x03567B3C MOV X21, X0
	0x03567B40 CBZ X0, 0x3567C64
	0x03567B44 LDR W8, [X22 + 0x18]
	0x03567B48 LDR W1, [X21 + 0x18]
	0x03567B4C CMP W8, W1
	0x03567B50 B.EQ 0x3567B6C
	0x03567B54 ADRP X8, 0xB8C000
	0x03567B58 LDR X8, [X8 + 0x638]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xE79000
	007 Move X20, 0xBCF000
	008 Move W8, [X21+3561]
	009 Move X20, [X20+3176]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xBCF000
	016 Move X0, [X0+3176]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3561], W8
	020 NotImplemented "Instruction LDRH not yet implemented."
	021 Move X0, [X20]
	022 Add X1, X31, 12
	023 NotImplemented "Instruction STRH not yet implemented."
	024 Call 0x1C17E04
	025 Move X1, X31
	026 Call ValueType.GetHashCode, X0
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X30, [X31+16]
	030 Move X21, [X31+24]
	031 Add X31, X31, 48
	032 Return X0

Method: Photon.Voice.Flip op_Multiply(Photon.Voice.Flip f1, Photon.Voice.Flip f2)

Disassembly:
	0x03567B5C LDR X0, [X8]
	0x03567B60 BL 0x1C16D6C
	0x03567B64 MOV X22, X0
	0x03567B68 STR X0, [X20 + 0x18]
	0x03567B6C LDR X23, [X20 + 0x10]
	0x03567B70 CBZ X23, 0x3567C64
	0x03567B74 ADRP X25, 0xBCE000
	0x03567B78 ADRP X26, 0xBCE000
	0x03567B7C ADRP X27, 0xBCE000
	0x03567B80 LDR X25, [X25 + 0xC90]
	0x03567B84 LDR X26, [X26 + 0xCA0]
	0x03567B88 LDR X27, [X27 + 0xC10]
	0x03567B8C LDR X8, [X23]
	0x03567B90 LDR X1, [X26]
	0x03567B94 LDRH W9, [X8 + 0x12E]
	0x03567B98 CBZ X9, 0x3567BBC
	0x03567B9C LDR X10, [X8 + 0xB0]
	0x03567BA0 ADD X10, X10, 0x8
	0x03567BA4 LDUR X11, [X10 - 0x8]
	0x03567BA8 CMP X11, X1
	0x03567BAC B.EQ 0x3567BCC
	0x03567BB0 SUBS X9, X9, 0x1
	0x03567BB4 ADD X10, X10, 0x10
	0x03567BB8 B.NE 0x3567BA4
	0x03567BBC MOV X0, X23
	0x03567BC0 MOV W2, W31
	0x03567BC4 BL 0x1C5C788
	0x03567BC8 B 0x3567BD8
	0x03567BCC LDRSW X9, [X10]
	0x03567BD0 ADD X8, X8, X9, 0x4, LSL
	0x03567BD4 ADD X0, X8, 0x138
	0x03567BD8 LDP X8, X2, [X0]
	0x03567BDC MOV X0, X23
	0x03567BE0 MOV X1, X22
	0x03567BE4 BLR X8
	0x03567BE8 TBZ X0, 0x0, 0x3567C34
	0x03567BEC CBZ X21, 0x3567C64

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xE79000
	007 Move X22, 0xBCF000
	008 Move W8, [X21+3562]
	009 Move X22, [X22+3176]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xBCF000
	017 Move X0, [X0+3176]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3562], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 And W31, W20, 255
	027 NotImplemented "Instruction CSET not yet implemented."
	028 And W31, W19, 255
	029 NotImplemented "Instruction CSET not yet implemented."
	030 And X31, X20, 0xFFFF
	031 Xor W8, W8, W9
	032 NotImplemented "Instruction CSET not yet implemented."
	033 And X31, X19, 0xFFFF
	034 NotImplemented "Instruction CSET not yet implemented."
	035 Xor W9, W9, W10
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move W9, 256
	042 NotImplemented "Instruction CSEL not yet implemented."
	043 Or X0, X9, X8
	044 Move X30, [X31+48]
	045 Return X0

Method: System.Void .cctor()

Disassembly:
	0x03567BF0 LDR X0, [X20 + 0x18]
	0x03567BF4 LDR W2, [X21 + 0x18]
	0x03567BF8 MOV X1, X21
	0x03567BFC BL 0x355476C
	0x03567C00 LDR X2, [X27]
	0x03567C04 MOV X0, X19
	0x03567C08 MOV X1, X21
	0x03567C0C BL 0x3191E98
	0x03567C10 LDR X0, [X19 + 0x138]
	0x03567C14 CBZ X0, 0x3567C64
	0x03567C18 LDR X1, [X24]
	0x03567C1C BL 0x2D10CC0
	0x03567C20 LDR X23, [X20 + 0x10]
	0x03567C24 CBZ X23, 0x3567C64
	0x03567C28 LDR X22, [X20 + 0x18]
	0x03567C2C MOV X21, X0
	0x03567C30 B 0x3567B8C
	0x03567C34 CBZ X21, 0x3567C64
	0x03567C38 LDR X0, [X19 + 0x138]
	0x03567C3C CBZ X0, 0x3567C64
	0x03567C40 LDR W2, [X21 + 0x18]
	0x03567C44 LDR X3, [X25]
	0x03567C48 MOV X1, X21
	0x03567C4C LDP X20, X19, [X31 + 0x40]
	0x03567C50 LDP X22, X21, [X31 + 0x30]
	0x03567C54 LDP X24, X23, [X31 + 0x20]
	0x03567C58 LDP X26, X25, [X31 + 0x10]
	0x03567C5C LDP X30, X27, [X31], #0x50
	0x03567C60 B 0x2D10D28
	0x03567C64 BL 0x1C16F20
	0x03567C68 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xE79000
	005 Move X19, 0xBCF000
	006 Move W8, [X20+3563]
	007 Move X19, [X19+3176]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xBCF000
	013 Move X0, [X0+3176]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3563], W8
	017 Move X8, [X19]
	018 Move W9, 1
	019 Move X8, [X8+184]
	020 NotImplemented "Instruction STRH not yet implemented."
	021 Move X8, [X19]
	022 Move W9, 256
	023 Move X8, [X8+184]
	024 NotImplemented "Instruction STRH not yet implemented."
	025 Move X8, [X19]
	026 Move X8, [X8+184]
	027 NotImplemented "Instruction LDRH not yet implemented."
	028 NotImplemented "Instruction LDRH not yet implemented."
	029 Call Flip.op_Multiply, X0, X1
	030 Move X8, [X19]
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X8, [X8+184]
	034 NotImplemented "Instruction STRH not yet implemented."
	035 Move X30, [X31+32]
	036 Return 

