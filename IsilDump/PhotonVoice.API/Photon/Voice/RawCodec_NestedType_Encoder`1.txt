Type: Photon.Voice.RawCodec/Encoder`1

Method: System.String get_Error()

Disassembly:
	0x02BA5DA0 LDRB W8, [X0 + 0x135]
	0x02BA5DA4 TBNZ X8, 0x0, 0x2BA5DAC

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_Error(System.String value)

Disassembly:
	0x02BA5DA8 BL 0x1C5C684
	0x02BA5DAC CBZ X19, 0x2BA5E44

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.Void set_Output(System.Action`2<System.ArraySegment`1<System.Byte>, Photon.Voice.FrameFlags> value)

Disassembly:
	0x02BA5DB0 ADRP X10, 0x1553000
	0x02BA5DB4 LDR X9, [X0 + 0xB8]

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.Action`2<System.ArraySegment`1<System.Byte>, Photon.Voice.FrameFlags> get_Output()

Disassembly:
	0x02BA5DB8 LDR X8, [X19]
	0x02BA5DBC LDR X10, [X10 + 0x348]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.ArraySegment`1<System.Byte> DequeueOutput(out Photon.Voice.FrameFlags flags)

Disassembly:
	0x02BA5DC0 LDR X23, [X9]
	0x02BA5DC4 LDRH W9, [X8 + 0x12E]
	0x02BA5DC8 LDR X1, [X10]
	0x02BA5DCC CBZ X9, 0x2BA5DF0
	0x02BA5DD0 LDR X10, [X8 + 0xB0]
	0x02BA5DD4 ADD X10, X10, 0x8
	0x02BA5DD8 LDUR X11, [X10 - 0x8]
	0x02BA5DDC CMP X11, X1
	0x02BA5DE0 B.EQ 0x2BA5E00
	0x02BA5DE4 SUBS X9, X9, 0x1
	0x02BA5DE8 ADD X10, X10, 0x10
	0x02BA5DEC B.NE 0x2BA5DD8
	0x02BA5DF0 MOVZ W2, 0x1
	0x02BA5DF4 MOV X0, X19
	0x02BA5DF8 BL 0x1C5C788
	0x02BA5DFC B 0x2BA5E10
	0x02BA5E00 LDR W9, [X10]
	0x02BA5E04 ADD W9, W9, 0x1
	0x02BA5E08 ADD X8, X8, W9, 0x4, SXTW
	0x02BA5E0C ADD X0, X8, 0x138
	0x02BA5E10 LDP X8, X4, [X0]
	0x02BA5E14 MOVZ W1, 0x3

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move [X1], W31
	004 Move X8, [X2+32]
	005 Move X19, X2
	006 Move X8, [X8+192]
	007 Move X0, [X8+8]
	008 Move W8, [X0+309]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {14}
	013 Call 0x1C5D684
	014 Move W8, [X0+224]
	015 Compare W8, 0
	016 JumpIfNotEqual {18}
	017 Call 0x1C17DFC
	018 Move X8, [X19+32]
	019 Move X8, [X8+192]
	020 Move X0, [X8+8]
	021 Move W8, [X0+309]
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {27}
	026 Call 0x1C5D684
	027 Move X8, [X0+184]
	028 Move X0, [X8]
	029 Move X1, [X8+8]
	030 Move X30, [X31+16]
	031 Move X19, [X31+24]
	032 Return X0

Method: System.Void EndOfStream()

Disassembly:
	0x02BA5E18 MOV X0, X19

ISIL:
	001 Return 

Method: I GetPlatformAPI()

Disassembly:
	0x0212FF30 CBZ W23, 0x2130110
	0x0212FF34 LDR X8, [X19 + 0x38]

ISIL:
	001 Move X0, X31
	002 Return X0

Method: System.Void Dispose()

Disassembly:
	0x02BA5E1C MOV X2, X22

ISIL:
	001 Return 

Method: System.Void Input(T[] buf)

Disassembly:
	0x02BA5E20 MOV X3, X23
	0x02BA5E24 BLR X8
	0x02BA5E28 LDP X20, X19, [X31 + 0x70]
	0x02BA5E2C LDP X22, X21, [X31 + 0x60]
	0x02BA5E30 LDP X24, X23, [X31 + 0x50]
	0x02BA5E34 LDP X26, X25, [X31 + 0x40]
	0x02BA5E38 LDP X30, X27, [X31 + 0x30]
	0x02BA5E3C ADD X31, X31, 0x80
	0x02BA5E40 RET
	0x02BA5E44 BL 0x1C16F20
	0x02BA5E48 B 0x2BA5E58
	0x02BA5E4C B 0x2BA5E58
	0x02BA5E50 B 0x2BA5E58
	0x02BA5E54 B 0x2BA5E58
	0x02BA5E58 MOV X22, X0
	0x02BA5E5C CMP W1, 0x1
	0x02BA5E60 B.NE 0x2BA6050
	0x02BA5E64 MOV X0, X22
	0x02BA5E68 BL 0x3EB1AD0
	0x02BA5E6C MOV X22, X0
	0x02BA5E70 ADRP X0, 0x154E000
	0x02BA5E74 LDR X0, [X0 + 0x7D0]
	0x02BA5E78 BL 0x1C16D08
	0x02BA5E7C LDR X8, [X22]
	0x02BA5E80 LDR X1, [X8]
	0x02BA5E84 BL 0x1C17270
	0x02BA5E88 TBZ X0, 0x0, 0x2BA6028
	0x02BA5E8C LDR X22, [X22]
	0x02BA5E90 BL 0x3EB1AE0
	0x02BA5E94 CBZ X22, 0x2BA6024
	0x02BA5E98 LDR X8, [X22]
	0x02BA5E9C MOV X0, X22
	0x02BA5EA0 LDP X9, X1, [X8 + 0x168]
	0x02BA5EA4 BLR X9
	0x02BA5EA8 LDR X8, [X21 + 0x20]
	0x02BA5EAC MOV X1, X0
	0x02BA5EB0 MOV X0, X20
	0x02BA5EB4 LDR X8, [X8 + 0xC0]
	0x02BA5EB8 LDR X2, [X8 + 0x8]
	0x02BA5EBC LDR X8, [X2]
	0x02BA5EC0 BLR X8
	0x02BA5EC4 LDR X8, [X21 + 0x20]
	0x02BA5EC8 MOV X0, X20
	0x02BA5ECC LDR X8, [X8 + 0xC0]
	0x02BA5ED0 LDR X1, [X8 + 0x10]
	0x02BA5ED4 LDR X8, [X1]
	0x02BA5ED8 BLR X8
	0x02BA5EDC CBNZ X0, 0x2BA5F14
	0x02BA5EE0 LDR X8, [X21 + 0x20]
	0x02BA5EE4 ADRP X0, 0x1579000
	0x02BA5EE8 LDR X8, [X8 + 0xC0]
	0x02BA5EEC LDR X8, [X8 + 0x8]
	0x02BA5EF0 LDR X22, [X8]
	0x02BA5EF4 LDR X0, [X0 + 0xB70]
	0x02BA5EF8 BL 0x1C16D08
	0x02BA5EFC LDR X8, [X21 + 0x20]
	0x02BA5F00 MOV X1, X0
	0x02BA5F04 MOV X0, X20
	0x02BA5F08 LDR X8, [X8 + 0xC0]
	0x02BA5F0C LDR X2, [X8 + 0x8]
	0x02BA5F10 BLR X22
	0x02BA5F14 LDR X8, [X21 + 0x20]
	0x02BA5F18 MOV X0, X20
	0x02BA5F1C LDR X8, [X8 + 0xC0]
	0x02BA5F20 LDR X1, [X8 + 0x10]
	0x02BA5F24 LDR X8, [X1]
	0x02BA5F28 BLR X8
	0x02BA5F2C MOV X20, X0
	0x02BA5F30 ADRP X0, 0x1579000
	0x02BA5F34 LDR X0, [X0 + 0xB78]
	0x02BA5F38 BL 0x1C16D08
	0x02BA5F3C MOV X1, X20
	0x02BA5F40 MOV X2, X31
	0x02BA5F44 BL 0x321B938

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1837000
	007 Move W8, [X21+1476]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x157A000
	015 Move X0, [X0+2952]
	016 Call 0x1C17CF4
	017 Move X0, 0x154F000
	018 Move X0, [X0+1560]
	019 Call 0x1C17CF4
	020 Move X0, 0x157A000
	021 Move X0, [X0+2960]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+1476], W8
	025 Move X8, [X19+16]
	026 Compare X8, 0
	027 JumpIfEqual {34}
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Move X21, [X31+24]
	032 Add X31, X31, 48
	033 Return 
	034 Move X8, [X19+24]
	035 Compare X8, 0
	036 JumpIfEqual {82}
	037 Compare X20, 0
	038 JumpIfEqual {28}
	039 Move X8, [X20+24]
	040 Compare X8, 0
	041 JumpIfEqual {28}
	042 Move X2, [X19+40]
	043 Compare X2, 0
	044 JumpIfEqual {86}
	045 Move W9, [X19+32]
	046 Move W10, [X2+24]
	047 Multiply W21, W9, W8
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move X8, 0x154F000
	050 Move X8, [X8+1560]
	051 Move W1, W21
	052 Move X0, [X8]
	053 Call 0x1C17D6C
	054 Move X2, X0
	055 Move [X19+40], X0
	056 Move X0, X20
	057 Move W1, W31
	058 Move W3, W31
	059 Move W4, W21
	060 Move X5, X31
	061 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	062 Move X8, 0x157A000
	063 Move X20, [X19+24]
	064 Move X1, [X19+40]
	065 Move X8, [X8+2952]
	066 Add X0, X31, 0
	067 Move W2, W31
	068 Move W3, W21
	069 Move X4, [X8]
	070 Move [X31], X31
	071 Move [X31+8], X31
	072 Call 0x2B88BB0, X0, X1, X2, X3
	073 Compare X20, 0
	074 JumpIfEqual {86}
	075 Move X1, [X31]
	076 Move X2, [X31+8]
	077 Move X8, [X20+24]
	078 Move X0, [X20+64]
	079 Move X4, [X20+40]
	080 Move W3, W31
	081 NotImplemented "Instruction BLR not yet implemented."
	082 Move X8, 0x157A000
	083 Move X8, [X8+2960]
	084 Move X8, [X8]
	085 Move [X19+16], X8
	086 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x02BA5F48 MOV X20, X0
	0x02BA5F4C ADRP X0, 0x154E000
	0x02BA5F50 LDR X0, [X0 + 0x9C8]
	0x02BA5F54 BL 0x1C16D08
	0x02BA5F58 LDR X8, [X0 + 0x38]
	0x02BA5F5C MOV X21, X0
	0x02BA5F60 CBNZ X8, 0x2BA5F70
	0x02BA5F64 MOV X0, X21
	0x02BA5F68 BL 0x1C5C6E0
	0x02BA5F6C LDR X8, [X21 + 0x38]
	0x02BA5F70 LDR X0, [X8 + 0x10]
	0x02BA5F74 LDRB W8, [X0 + 0x135]
	0x02BA5F78 TBNZ X8, 0x0, 0x2BA5F80
	0x02BA5F7C BL 0x1C5C684
	0x02BA5F80 LDR W8, [X0 + 0xE0]
	0x02BA5F84 CBNZ W8, 0x2BA5F8C
	0x02BA5F88 BL 0x1C16DFC
	0x02BA5F8C LDR X8, [X21 + 0x38]
	0x02BA5F90 LDR X0, [X8 + 0x10]
	0x02BA5F94 LDRB W8, [X0 + 0x135]
	0x02BA5F98 TBNZ X8, 0x0, 0x2BA5FA0
	0x02BA5F9C BL 0x1C5C684
	0x02BA5FA0 CBZ X19, 0x2BA6024
	0x02BA5FA4 LDR X8, [X0 + 0xB8]
	0x02BA5FA8 ADRP X0, 0x1553000
	0x02BA5FAC LDR X21, [X8]
	0x02BA5FB0 LDR X0, [X0 + 0x348]
	0x02BA5FB4 BL 0x1C16D08
	0x02BA5FB8 LDR X8, [X19]
	0x02BA5FBC MOV X1, X0
	0x02BA5FC0 LDRH W9, [X8 + 0x12E]
	0x02BA5FC4 CBZ X9, 0x2BA5FE8
	0x02BA5FC8 LDR X10, [X8 + 0xB0]
	0x02BA5FCC ADD X10, X10, 0x8
	0x02BA5FD0 LDUR X11, [X10 - 0x8]
	0x02BA5FD4 CMP X11, X1
	0x02BA5FD8 B.EQ 0x2BA5FF8
	0x02BA5FDC SUBS X9, X9, 0x1
	0x02BA5FE0 ADD X10, X10, 0x10
	0x02BA5FE4 B.NE 0x2BA5FD0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1837000
	007 Move X21, 0x1577000
	008 Move W8, [X22+1477]
	009 Move X21, [X21+2128]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x154F000
	017 Move X0, [X0+1560]
	018 Call 0x1C17CF4
	019 Move X0, 0x1577000
	020 Move X0, [X0+2128]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+1477], W8
	024 Move X0, [X21]
	025 Move X21, 0x154F000
	026 Move W8, [X0+224]
	027 Move X21, [X21+1560]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X8, [X20+32]
	032 Move W0, W31
	033 Move X8, [X8+192]
	034 Move X1, [X8+56]
	035 Call 0x2216D84, X0
	036 Move [X19+32], W0
	037 Move X0, [X21]
	038 Move W1, W31
	039 Call 0x1C17D6C
	040 Move [X19+40], X0
	041 Move X0, X19
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X1, X31
	047 Move X30, [X31+48]
	048 Call Object..ctor, X0
	049 Return 

Method: System.Void .cctor()

Disassembly:
	0x02BA5FE8 MOVZ W2, 0x1
	0x02BA5FEC MOV X0, X19
	0x02BA5FF0 BL 0x1C5C788
	0x02BA5FF4 B 0x2BA6008
	0x02BA5FF8 LDR W9, [X10]
	0x02BA5FFC ADD W9, W9, 0x1
	0x02BA6000 ADD X8, X8, W9, 0x4, SXTW
	0x02BA6004 ADD X0, X8, 0x138
	0x02BA6008 LDP X8, X4, [X0]
	0x02BA600C MOVZ W1, 0x1
	0x02BA6010 MOV X0, X19
	0x02BA6014 MOV X2, X20
	0x02BA6018 MOV X3, X21
	0x02BA601C BLR X8
	0x02BA6020 B 0x2BA5E28
	0x02BA6024 BL 0x1C16F20
	0x02BA6028 MOVZ W0, 0x8
	0x02BA602C BL 0x3EB1AF0
	0x02BA6030 LDR X8, [X22]
	0x02BA6034 STR X8, [X0]
	0x02BA6038 ADRP X1, 0x130E000
	0x02BA603C ADD X1, X1, 0xE58
	0x02BA6040 MOV X2, X31
	0x02BA6044 BL 0x3EB1B00
	0x02BA6048 MOV X22, X0
	0x02BA604C BL 0x3EB1AE0
	0x02BA6050 MOV X0, X22
	0x02BA6054 BL 0x1D2C690
	0x02BA6058 BL 0x1990590
	0x02BA605C LDR X0, [X0 + 0x20]
	0x02BA6060 RET
	0x02BA6064 STR X1, [X0 + 0x20]
	0x02BA6068 RET
	0x02BA606C STR X30, [X31 - 0x10]!
	0x02BA6070 LDR X8, [X0 + 0x10]
	0x02BA6074 STR X1, [X0 + 0x28]
	0x02BA6078 CBZ X8, 0x2BA6088
	0x02BA607C STR X1, [X8 + 0x40]
	0x02BA6080 LDR X30, [X31], #0x10
	0x02BA6084 RET
	0x02BA6088 BL 0x1C16F20
	0x02BA608C LDR X0, [X0 + 0x28]
	0x02BA6090 RET
	0x02BA6094 STR X30, [X31 - 0x30]!
	0x02BA6098 STP X22, X21, [X31 + 0x10]
	0x02BA609C STP X20, X19, [X31 + 0x20]
	0x02BA60A0 ADRP X22, 0x1835000
	0x02BA60A4 LDRB W8, [X22 + 0x5CE]
	0x02BA60A8 MOV X21, X2
	0x02BA60AC MOV X20, X1
	0x02BA60B0 MOV X19, X0
	0x02BA60B4 TBNZ X8, 0x0, 0x2BA60CC
	0x02BA60B8 ADRP X0, 0x1578000
	0x02BA60BC LDR X0, [X0 + 0xB80]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X21, 0x1837000
	008 Move X22, 0x154F000
	009 Move X20, 0x1559000
	010 Move W8, [X21+1478]
	011 Move X22, [X22+1560]
	012 Call 0x3EB25BC
	013 Return 
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x1559000
	020 Move X0, [X0+3688]
	021 Call 0x1C17CF4
	022 Move X0, 0x154E000
	023 Move X0, [X0+1560]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+1478], W8
	027 Move X0, [X22]
	028 Move W1, W31
	029 Call 0x1C17D6C
	030 Move X2, [X20]
	031 Move X1, X0
	032 Add X0, X31, 0
	033 Move [X31], X31
	034 Move [X31+8], X31
	035 Call 0x2B88B6C, X0, X1
	036 Move X0, [X19+32]
	037 Move W8, [X0+309]
	038 Move TEMP, X8
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {43}
	042 Call 0x1C5D684
	043 Move X8, [X0+192]
	044 Move X0, [X8+8]
	045 Move W8, [X0+309]
	046 Move TEMP, X8
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfEqual {51}
	050 Call 0x1C5D684
	051 Move X8, [X0+184]
	052 Move V0, [X31]
	053 Move [X8], V0
	054 Move X0, [X19+32]
	055 Move W8, [X0+309]
	056 Move TEMP, X8
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfEqual {61}
	060 Call 0x1C5D684
	061 Move X8, [X0+192]
	062 Move X0, [X8+8]
	063 Move W8, [X0+309]
	064 Move TEMP, X8
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfEqual {69}
	068 Call 0x1C5D684
	069 Move X20, [X31+48]
	070 Move X19, [X31+56]
	071 Move X22, [X31+32]
	072 Move X21, [X31+40]
	073 Move X30, [X31+16]
	074 Add X31, X31, 64
	075 Return 

