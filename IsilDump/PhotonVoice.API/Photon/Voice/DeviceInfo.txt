Type: Photon.Voice.DeviceInfo

Method: System.Void .ctor(System.Boolean isDefault, System.Int32 idInt, System.String idString, System.String name, Photon.Voice.DeviceFeatures features = null)

Disassembly:
	0x03555F58 LDR X0, [X0 + 0xAC8]
	0x03555F5C BL 0x1C16CF4
	0x03555F60 ADRP X0, 0xB9F000
	0x03555F64 LDR X0, [X0 + 0xA08]
	0x03555F68 BL 0x1C16CF4
	0x03555F6C ADRP X0, 0xB9E000
	0x03555F70 LDR X0, [X0 + 0xDD8]
	0x03555F74 BL 0x1C16CF4
	0x03555F78 ADRP X0, 0xB9E000
	0x03555F7C LDR X0, [X0 + 0x830]
	0x03555F80 BL 0x1C16CF4
	0x03555F84 ADRP X0, 0xBE0000
	0x03555F88 LDR X0, [X0 + 0x3F0]
	0x03555F8C BL 0x1C16CF4
	0x03555F90 ADRP X0, 0xBE0000
	0x03555F94 LDR X0, [X0 + 0x3F8]
	0x03555F98 BL 0x1C16CF4
	0x03555F9C ADRP X0, 0xB9E000
	0x03555FA0 LDR X0, [X0 + 0x988]
	0x03555FA4 BL 0x1C16CF4
	0x03555FA8 ADRP X0, 0xBE0000
	0x03555FAC LDR X0, [X0 + 0x400]
	0x03555FB0 BL 0x1C16CF4
	0x03555FB4 MOVZ W8, 0x1
	0x03555FB8 STRB W8, [X20 + 0xD89]
	0x03555FBC LDR X8, [X19]
	0x03555FC0 CBZ X8, 0x35560EC
	0x03555FC4 ADRP X21, 0xBC7000
	0x03555FC8 LDR X21, [X21 + 0xE18]
	0x03555FCC ADRP X20, 0xB9E000
	0x03555FD0 LDR X0, [X21]
	0x03555FD4 LDR W8, [X0 + 0xE0]
	0x03555FD8 LDR X20, [X20 + 0xAC8]
	0x03555FDC CBNZ W8, 0x3555FE4
	0x03555FE0 BL 0x1C16DFC
	0x03555FE4 LDR X0, [X20]
	0x03555FE8 LDRB W22, [X19 + 0x31]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0xE8B000
	011 Move X26, 0xBC7000
	012 Move W8, [X25+3443]
	013 Move X26, [X26+1528]
	014 Move X19, X5
	015 Move X20, X4
	016 Move X22, X3
	017 Move W23, W2
	018 Move W24, W1
	019 Move X21, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0xBC7000
	025 Move X0, [X0+1528]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X25+3443], W8
	029 Move X0, [X26]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 And W8, W24, 1
	035 Move [X21+4], W23
	036 Move [X21+8], X22
	037 Move [X21+16], X20
	038 Move [X21+32], W31
	039 Move [X21], W8
	040 Move [X21+24], X19
	041 Move X20, [X31+64]
	042 Move X19, [X31+72]
	043 Move X22, [X31+48]
	044 Move X21, [X31+56]
	045 Move X24, [X31+32]
	046 Move X23, [X31+40]
	047 Move X26, [X31+16]
	048 Move X25, [X31+24]
	049 Move X30, [X31+80]
	050 Return 

Method: System.Void .ctor(System.Int32 id, System.String name, Photon.Voice.DeviceFeatures features = null)

Disassembly:
	0x03555FEC MOVZ W1, 0x8
	0x03555FF0 BL 0x1C16D6C
	0x03555FF4 CBZ X0, 0x35561A0
	0x03555FF8 LDR W8, [X0 + 0x18]
	0x03555FFC MOV X20, X0
	0x03556000 CBZ W8, 0x355619C
	0x03556004 ADRP X8, 0xB9E000
	0x03556008 LDR X8, [X8 + 0xA08]
	0x0355600C ADD X0, X31, 0x1C
	0x03556010 MOV X1, X31
	0x03556014 LDR X8, [X8]
	0x03556018 STR X8, [X20 + 0x20]
	0x0355601C LDRB W8, [X19 + 0x32]
	0x03556020 STRB W8, [X31 + 0x1C]
	0x03556024 BL 0x3319BB4
	0x03556028 LDR W8, [X20 + 0x18]
	0x0355602C CMP W8, 0x1
	0x03556030 B.LS 0x355619C
	0x03556034 CMP W8, 0x2
	0x03556038 STR X0, [X20 + 0x28]
	0x0355603C B.EQ 0x355619C
	0x03556040 ADRP X8, 0xB9D000
	0x03556044 LDR X8, [X8 + 0xDD8]
	0x03556048 ADRP X9, 0xBDF000
	0x0355604C AND W23, W22, 0x30
	0x03556050 ADD X0, X31, 0x0
	0x03556054 LDR X8, [X8]
	0x03556058 LDR X9, [X9 + 0x3E8]
	0x0355605C MOV X1, X31
	0x03556060 STR X8, [X20 + 0x30]
	0x03556064 LDR X8, [X9]
	0x03556068 MOVN X9, 0x0
	0x0355606C STRB W23, [X31 + 0x10]
	0x03556070 STP X8, X9, [X31]
	0x03556074 BL 0x33B162C
	0x03556078 LDR W8, [X20 + 0x18]
	0x0355607C CMP W8, 0x3
	0x03556080 B.LS 0x355619C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0xE8B000
	009 Move X23, 0xBC6000
	010 Move W8, [X24+3444]
	011 Call 0x3EB268C
	012 Return 
	013 Move X19, X3
	014 Move X20, X2
	015 Move W22, W1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0xBC6000
	022 Move X0, [X0+1528]
	023 Call 0x1C17CF4
	024 Move X0, 0xB9E000
	025 Move X0, [X0+2440]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X24+3444], W8
	029 Move X0, [X23]
	030 Move X23, 0xB9E000
	031 Move W8, [X0+224]
	032 Move X23, [X23+2440]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move [X21], W31
	037 Move [X21+4], W22
	038 Move X8, [X23]
	039 Move [X21+32], W31
	040 Move [X21+24], X19
	041 Move X24, [X31+16]
	042 Move X23, [X31+24]
	043 Move [X21+8], X8
	044 Move [X21+16], X20
	045 Move X20, [X31+48]
	046 Move X19, [X31+56]
	047 Move X22, [X31+32]
	048 Move X21, [X31+40]
	049 Move X30, [X31+64]
	050 Return 

Method: System.Void .ctor(System.String id, System.String name, Photon.Voice.DeviceFeatures features = null)

Disassembly:
	0x03556084 ADRP X22, 0xB9D000
	0x03556088 LDR X22, [X22 + 0x988]
	0x0355608C CMP W23, 0x20
	0x03556090 STR X0, [X20 + 0x38]
	0x03556094 B.NE 0x35560FC
	0x03556098 LDR X8, [X19]
	0x0355609C CBZ X8, 0x35561A0
	0x035560A0 LDP W10, W9, [X19 + 0x8]
	0x035560A4 LDR W11, [X8 + 0x18]
	0x035560A8 ADD W9, W9, W10
	0x035560AC SUB W9, W9, 0x1
	0x035560B0 CMP W9, W11
	0x035560B4 B.CS 0x355619C
	0x035560B8 ADD X8, X8, W9, SXTW
	0x035560BC ADD X0, X8, 0x20
	0x035560C0 MOV X1, X31
	0x035560C4 BL 0x3319BB4
	0x035560C8 ADRP X8, 0xBDF000
	0x035560CC LDR X8, [X8 + 0x3F8]
	0x035560D0 MOV X1, X0
	0x035560D4 MOV X2, X31
	0x035560D8 LDR X8, [X8]
	0x035560DC MOV X0, X8
	0x035560E0 BL 0x321B938
	0x035560E4 LDR W8, [X20 + 0x18]
	0x035560E8 B 0x3556100
	0x035560EC ADRP X8, 0xB9D000
	0x035560F0 LDR X8, [X8 + 0x830]
	0x035560F4 LDR X0, [X8]
	0x035560F8 B 0x3556188
	0x035560FC LDR X0, [X22]
	0x03556100 CMP W8, 0x4
	0x03556104 B.LS 0x355619C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xE8A000
	009 Move X24, 0xBC6000
	010 Move W8, [X23+3445]
	011 Move X24, [X24+1528]
	012 Move X19, X3
	013 Move X21, X2
	014 Move X22, X1
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xBC6000
	021 Move X0, [X0+1528]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+3445], W8
	025 Move X0, [X24]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move W8, 1
	031 Move [X20], W31
	032 Move [X20+4], W31
	033 Move [X20+8], X22
	034 Move [X20+16], X21
	035 Move [X20+32], W8
	036 Move [X20+24], X19
	037 Move X20, [X31+48]
	038 Move X19, [X31+56]
	039 Move X22, [X31+32]
	040 Move X21, [X31+40]
	041 Move X24, [X31+16]
	042 Move X23, [X31+24]
	043 Move X30, [X31+64]
	044 Return 

Method: System.Void .ctor(System.String name, Photon.Voice.DeviceFeatures features = null)

Disassembly:
	0x03556108 STR X0, [X20 + 0x40]
	0x0355610C LDR X0, [X21]
	0x03556110 LDR W8, [X0 + 0xE0]
	0x03556114 CBNZ W8, 0x355611C
	0x03556118 BL 0x1C16DFC
	0x0355611C MOV X0, X19
	0x03556120 BL 0x3555E14
	0x03556124 LDR W8, [X20 + 0x18]
	0x03556128 CMP W8, 0x5
	0x0355612C B.LS 0x355619C
	0x03556130 ADRP X9, 0xBDF000
	0x03556134 LDR X9, [X9 + 0x3F0]
	0x03556138 ANDS W31, W0, 0x1
	0x0355613C CSEL X9, X9, X22, NE
	0x03556140 LDR X9, [X9]
	0x03556144 CMP W8, 0x6
	0x03556148 STR X9, [X20 + 0x48]
	0x0355614C B.EQ 0x355619C
	0x03556150 ADRP X8, 0xBDF000
	0x03556154 LDR X8, [X8 + 0x400]
	0x03556158 ADD X0, X19, 0x1C
	0x0355615C MOV X1, X31
	0x03556160 LDR X8, [X8]
	0x03556164 STR X8, [X20 + 0x50]
	0x03556168 BL 0x337B6E0
	0x0355616C LDR W8, [X20 + 0x18]
	0x03556170 CMP W8, 0x7
	0x03556174 B.LS 0x355619C
	0x03556178 STR X0, [X20 + 0x58]
	0x0355617C MOV X0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xE8A000
	008 Move X23, 0xBC6000
	009 Move W8, [X22+3446]
	010 Move X23, [X23+1528]
	011 Move X19, X2
	012 Move X21, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xBC6000
	019 Move X0, [X0+1528]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+3446], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move W8, 1
	029 Move [X20], W31
	030 Move [X20+4], W31
	031 Move [X20+8], X21
	032 Move [X20+16], X21
	033 Move [X20+32], W8
	034 Move [X20+24], X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Move X23, [X31+56]
	041 Return 

Method: System.Boolean get_IsDefault()

Disassembly:
	0x03556180 MOV X1, X31
	0x03556184 BL 0x32278CC

ISIL:
	001 Move W0, [X0]
	002 Return X0

Method: System.Void set_IsDefault(System.Boolean value)

Disassembly:
	0x03556188 LDP X20, X19, [X31 + 0x40]
	0x0355618C LDP X22, X21, [X31 + 0x30]
	0x03556190 LDP X30, X23, [X31 + 0x20]

ISIL:
	001 And W8, W1, 1
	002 Move [X0], W8
	003 Return 

Method: System.Int32 get_IDInt()

Disassembly:
	0x03556194 ADD X31, X31, 0x50
	0x03556198 RET

ISIL:
	001 Move W0, [X0+4]
	002 Return X0

Method: System.Void set_IDInt(System.Int32 value)

Disassembly:
	0x0355619C BL 0x1C16F28
	0x035561A0 BL 0x1C16F20

ISIL:
	001 Move [X0+4], W1
	002 Return 

Method: System.String get_IDString()

Disassembly:
	0x035561A4 STR X30, [X31 - 0x20]!
	0x035561A8 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move X0, [X0+8]
	002 Return X0

Method: System.Void set_IDString(System.String value)

Disassembly:
	0x035561AC ADRP X19, 0xE89000
	0x035561B0 ADRP X20, 0xBC6000

ISIL:
	001 Move [X0+8], X1
	002 Return 

Method: System.String get_Name()

Disassembly:
	0x035561B4 LDRB W8, [X19 + 0xD8A]
	0x035561B8 LDR X20, [X20 + 0xE18]

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_Name(System.String value)

Disassembly:
	0x035561BC TBNZ X8, 0x0, 0x35561D4
	0x035561C0 ADRP X0, 0xBC6000

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: Photon.Voice.DeviceFeatures get_Features()

Disassembly:
	0x035561C4 LDR X0, [X0 + 0xE18]
	0x035561C8 BL 0x1C16CF4
	0x035561CC MOVZ W8, 0x1
	0x035561D0 STRB W8, [X19 + 0xD8A]
	0x035561D4 LDR X8, [X20]
	0x035561D8 LDP X20, X19, [X31 + 0x10]
	0x035561DC MVNI V0.4S, 0x80, 0x18
	0x035561E0 LDR X8, [X8 + 0xB8]
	0x035561E4 STR V0, [X8]
	0x035561E8 LDR X30, [X31], #0x20
	0x035561EC RET
	0x035561F0 B 0x35514B4
	0x035561F4 MOV X1, X31
	0x035561F8 B 0x33BDD8C
	0x035561FC SUB X31, X31, 0x90
	0x03556200 STP X30, X23, [X31 + 0x60]
	0x03556204 STP X22, X21, [X31 + 0x70]
	0x03556208 STP X20, X19, [X31 + 0x80]
	0x0355620C ADRP X23, 0xE89000
	0x03556210 ADRP X22, 0xBDF000
	0x03556214 LDRB W8, [X23 + 0xD8B]
	0x03556218 LDR X22, [X22 + 0x408]
	0x0355621C MOV X19, X2
	0x03556220 MOV X21, X1
	0x03556224 MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xE8A000
	005 Move W8, [X20+3447]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xBE0000
	012 Move X0, [X0+920]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3447], W8
	016 Move X0, [X19+24]
	017 Compare X0, 0
	018 JumpIfNotEqual {29}
	019 Move X19, 0xBE0000
	020 Move X19, [X19+920]
	021 Move X0, [X19]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X19]
	027 Move X8, [X0+184]
	028 Move X0, [X8]
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Return X0

Method: System.Boolean op_Equality(Photon.Voice.DeviceInfo d1, Photon.Voice.DeviceInfo d2)

Disassembly:
	0x03556228 TBNZ X8, 0x0, 0x355624C
	0x0355622C ADRP X0, 0xBDF000
	0x03556230 LDR X0, [X0 + 0x410]
	0x03556234 BL 0x1C16CF4
	0x03556238 ADRP X0, 0xBDF000
	0x0355623C LDR X0, [X0 + 0x408]
	0x03556240 BL 0x1C16CF4
	0x03556244 MOVZ W8, 0x1
	0x03556248 STRB W8, [X23 + 0xD8B]
	0x0355624C LDP V1, V0, [X21 + 0x10]
	0x03556250 LDR V2, [X21]
	0x03556254 LDR X0, [X22]
	0x03556258 ADRP X21, 0xBDF000
	0x0355625C STP V1, V0, [X31 + 0x10]
	0x03556260 STR V2, [X31]
	0x03556264 LDR W8, [X0 + 0xE0]
	0x03556268 LDR X21, [X21 + 0x410]
	0x0355626C CBNZ W8, 0x3556274
	0x03556270 BL 0x1C16DFC
	0x03556274 LDP V0, V1, [X31]
	0x03556278 LDR V2, [X31 + 0x2]
	0x0355627C LDR X3, [X21]
	0x03556280 ADD X1, X31, 0x30
	0x03556284 MOV X0, X20
	0x03556288 MOV X2, X19
	0x0355628C STP V0, V1, [X31 + 0x30]
	0x03556290 STR V2, [X31 + 0x5]
	0x03556294 BL 0x2BA50C0
	0x03556298 LDP X20, X19, [X31 + 0x80]
	0x0355629C LDP X22, X21, [X31 + 0x70]
	0x035562A0 LDP X30, X23, [X31 + 0x60]
	0x035562A4 ADD X31, X31, 0x90
	0x035562A8 RET
	0x035562AC STR X30, [X31 - 0x10]!
	0x035562B0 LDR X0, [X0 + 0x10]
	0x035562B4 CBZ X0, 0x35562C0
	0x035562B8 LDR X30, [X31], #0x10
	0x035562BC B 0x35525D0

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+64], X22
	004 Move [X31+72], X21
	005 Move [X31+80], X20
	006 Move [X31+88], X19
	007 Move X22, 0xE8A000
	008 Move X21, 0xBC6000
	009 Move W8, [X22+3448]
	010 Move X21, [X21+1528]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xBC6000
	018 Move X0, [X0+1528]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+3448], W8
	022 Move X8, [X20+32]
	023 Move V1, [X20]
	024 Move V0, [X20+16]
	025 Move X0, [X21]
	026 Add X1, X31, 0
	027 Move [X31+32], X8
	028 Move [X31], V1
	029 Move [X31+8], V0
	030 Call 0x1C17E04
	031 Move X8, [X21]
	032 Move X20, X0
	033 Move W9, [X8+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Move X0, X19
	039 Move X1, X20
	040 Call DeviceInfo.Equals, X0, X1
	041 Move X20, [X31+80]
	042 Move X19, [X31+88]
	043 Move X22, [X31+64]
	044 Move X21, [X31+72]
	045 Move X30, [X31+48]
	046 And W0, W0, 1
	047 Add X31, X31, 96
	048 Return X0

Method: System.Boolean op_Inequality(Photon.Voice.DeviceInfo d1, Photon.Voice.DeviceInfo d2)

Disassembly:
	0x03556340 LDR V2, [X31 + 0x2]
	0x03556344 LDR X3, [X21]
	0x03556348 ADD X1, X31, 0x30
	0x0355634C MOV X0, X20
	0x03556350 MOV X2, X19
	0x03556354 STP V0, V1, [X31 + 0x30]
	0x03556358 STR V2, [X31 + 0x5]
	0x0355635C BL 0x2BA455C
	0x03556360 LDP X20, X19, [X31 + 0x80]
	0x03556364 LDP X22, X21, [X31 + 0x70]
	0x03556368 LDP X30, X23, [X31 + 0x60]
	0x0355636C ADD X31, X31, 0x90
	0x03556370 RET
	0x03556374 STR X30, [X31 - 0x10]!
	0x03556378 LDR X0, [X0 + 0x10]
	0x0355637C CBZ X0, 0x3556388
	0x03556380 LDR X30, [X31], #0x10
	0x03556384 B 0x3552858
	0x03556388 BL 0x1C16F20
	0x0355638C STR X30, [X31 - 0x60]!
	0x03556390 STP X28, X27, [X31 + 0x10]
	0x03556394 STP X26, X25, [X31 + 0x20]
	0x03556398 STP X24, X23, [X31 + 0x30]
	0x0355639C STP X22, X21, [X31 + 0x40]
	0x035563A0 STP X20, X19, [X31 + 0x50]
	0x035563A4 ADRP X22, 0xE89000
	0x035563A8 ADRP X19, 0xBDF000
	0x035563AC ADRP X20, 0xB9D000
	0x035563B0 LDRB W8, [X22 + 0xD8D]
	0x035563B4 LDR X19, [X19 + 0x428]
	0x035563B8 LDR X20, [X20 + 0x6C0]
	0x035563BC MOV W21, W0
	0x035563C0 TBNZ X8, 0x0, 0x3556420
	0x035563C4 ADRP X0, 0xB9D000
	0x035563C8 LDR X0, [X0 + 0xDF8]
	0x035563CC BL 0x1C16CF4
	0x035563D0 ADRP X0, 0xB9D000
	0x035563D4 LDR X0, [X0 + 0xE00]
	0x035563D8 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+64], X22
	004 Move [X31+72], X21
	005 Move [X31+80], X20
	006 Move [X31+88], X19
	007 Move X22, 0xE8A000
	008 Move X21, 0xBC6000
	009 Move W8, [X22+3449]
	010 Move X21, [X21+1528]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xBC6000
	018 Move X0, [X0+1528]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+3449], W8
	022 Move X8, [X20+32]
	023 Move V1, [X20]
	024 Move V0, [X20+16]
	025 Move X0, [X21]
	026 Add X1, X31, 0
	027 Move [X31+32], X8
	028 Move [X31], V1
	029 Move [X31+8], V0
	030 Call 0x1C17E04
	031 Move X8, [X21]
	032 Move X20, X0
	033 Move W9, [X8+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Move X0, X19
	039 Move X1, X20
	040 Call DeviceInfo.Equals, X0, X1
	041 Move X20, [X31+80]
	042 Move X19, [X31+88]
	043 Move X22, [X31+64]
	044 Move X21, [X31+72]
	045 Move X30, [X31+48]
	046 NotImplemented "Instruction ORN not yet implemented."
	047 And W0, W8, 1
	048 Add X31, X31, 96
	049 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x035562C0 BL 0x1C16F20
	0x035562C4 SUB X31, X31, 0x90
	0x035562C8 STP X30, X23, [X31 + 0x60]
	0x035562CC STP X22, X21, [X31 + 0x70]
	0x035562D0 STP X20, X19, [X31 + 0x80]
	0x035562D4 ADRP X23, 0xE89000
	0x035562D8 ADRP X22, 0xBDF000
	0x035562DC LDRB W8, [X23 + 0xD8C]
	0x035562E0 LDR X22, [X22 + 0x418]
	0x035562E4 MOV X19, X2
	0x035562E8 MOV X21, X1
	0x035562EC MOV X20, X0
	0x035562F0 TBNZ X8, 0x0, 0x3556314
	0x035562F4 ADRP X0, 0xBDF000
	0x035562F8 LDR X0, [X0 + 0x420]
	0x035562FC BL 0x1C16CF4
	0x03556300 ADRP X0, 0xBDF000
	0x03556304 LDR X0, [X0 + 0x418]
	0x03556308 BL 0x1C16CF4
	0x0355630C MOVZ W8, 0x1
	0x03556310 STRB W8, [X23 + 0xD8C]
	0x03556314 LDP V1, V0, [X21 + 0x10]
	0x03556318 LDR V2, [X21]
	0x0355631C LDR X0, [X22]
	0x03556320 ADRP X21, 0xBDF000
	0x03556324 STP V1, V0, [X31 + 0x10]
	0x03556328 STR V2, [X31]
	0x0355632C LDR W8, [X0 + 0xE0]
	0x03556330 LDR X21, [X21 + 0x420]
	0x03556334 CBNZ W8, 0x355633C
	0x03556338 BL 0x1C16DFC
	0x0355633C LDP V0, V1, [X31]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+64], X22
	004 Move [X31+72], X21
	005 Move [X31+80], X20
	006 Move [X31+88], X19
	007 Move X22, 0xE8A000
	008 Move X21, 0xBC6000
	009 Move W8, [X22+3450]
	010 Move X21, [X21+1528]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xBC6000
	018 Move X0, [X0+1528]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+3450], W8
	022 Move X8, [X20+32]
	023 Move V1, [X20]
	024 Move V0, [X20+16]
	025 Move X0, [X21]
	026 Add X1, X31, 0
	027 Move [X31+32], X8
	028 Move [X31], V1
	029 Move [X31+8], V0
	030 Call 0x1C17E04
	031 Move X1, X19
	032 Move X2, X31
	033 Call ValueType.Equals, X0, X1
	034 Move X20, [X31+80]
	035 Move X19, [X31+88]
	036 Move X22, [X31+64]
	037 Move X21, [X31+72]
	038 Move X30, [X31+48]
	039 And W0, W0, 1
	040 Add X31, X31, 96
	041 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x035563DC ADRP X0, 0xB9D000
	0x035563E0 LDR X0, [X0 + 0xE18]
	0x035563E4 BL 0x1C16CF4
	0x035563E8 ADRP X0, 0xB9D000
	0x035563EC LDR X0, [X0 + 0x758]
	0x035563F0 BL 0x1C16CF4
	0x035563F4 ADRP X0, 0xB9D000
	0x035563F8 LDR X0, [X0 + 0x5A8]
	0x035563FC BL 0x1C16CF4
	0x03556400 ADRP X0, 0xBDF000
	0x03556404 LDR X0, [X0 + 0x428]
	0x03556408 BL 0x1C16CF4
	0x0355640C ADRP X0, 0xB9D000
	0x03556410 LDR X0, [X0 + 0x6C0]
	0x03556414 BL 0x1C16CF4
	0x03556418 MOVZ W8, 0x1
	0x0355641C STRB W8, [X22 + 0xD8D]
	0x03556420 LDR X0, [X20]
	0x03556424 ADRP X20, 0xB9D000
	0x03556428 LDR X19, [X19]
	0x0355642C LDR W8, [X0 + 0xE0]
	0x03556430 LDR X20, [X20 + 0xDF8]
	0x03556434 CBNZ W8, 0x355643C
	0x03556438 BL 0x1C16DFC
	0x0355643C MOV X0, X19
	0x03556440 MOV X1, X31
	0x03556444 BL 0x338C698

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+56], X21
	004 Move [X31+64], X20
	005 Move [X31+72], X19
	006 Move X21, 0xE8A000
	007 Move X20, 0xBC6000
	008 Move W8, [X21+3451]
	009 Move X20, [X20+1528]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xBC6000
	016 Move X0, [X0+1528]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3451], W8
	020 Move X8, [X19+32]
	021 Move V1, [X19]
	022 Move V0, [X19+16]
	023 Move X0, [X20]
	024 Add X1, X31, 0
	025 Move [X31+32], X8
	026 Move [X31], V1
	027 Move [X31+8], V0
	028 Call 0x1C17E04
	029 Move X1, X31
	030 Call ValueType.GetHashCode, X0
	031 Move X20, [X31+64]
	032 Move X19, [X31+72]
	033 Move X30, [X31+48]
	034 Move X21, [X31+56]
	035 Add X31, X31, 80
	036 Return X0

Method: System.String ToString()

Disassembly:
	0x03556448 LDR X8, [X20]
	0x0355644C MOV X19, X0
	0x03556450 LDR W9, [X8 + 0xE0]
	0x03556454 CBNZ W9, 0x3556460
	0x03556458 MOV X0, X8
	0x0355645C BL 0x1C16DFC
	0x03556460 MOV X0, X19
	0x03556464 MOV X1, X31
	0x03556468 BL 0x33B02B8
	0x0355646C CBZ X0, 0x355667C
	0x03556470 ADRP X24, 0xB9D000
	0x03556474 ADRP X25, 0xB9D000
	0x03556478 ADRP X26, 0xB9D000
	0x0355647C ADRP X23, 0xB9D000
	0x03556480 LDR X24, [X24 + 0xE18]
	0x03556484 LDR X25, [X25 + 0x5A8]
	0x03556488 LDR X26, [X26 + 0x758]
	0x0355648C LDR X23, [X23 + 0xE00]
	0x03556490 MOV X1, X31
	0x03556494 BL 0x33A2834
	0x03556498 MOV X20, X0
	0x0355649C MOVN W27, 0x80000000
	0x035564A0 MOVZ W19, 0xBB80
	0x035564A4 CBZ X20, 0x355666C
	0x035564A8 LDR X8, [X20]
	0x035564AC LDR X1, [X24]
	0x035564B0 LDRH W9, [X8 + 0x12E]
	0x035564B4 CBZ X9, 0x35564D8
	0x035564B8 LDR X10, [X8 + 0xB0]
	0x035564BC ADD X10, X10, 0x8
	0x035564C0 LDUR X11, [X10 - 0x8]
	0x035564C4 CMP X11, X1
	0x035564C8 B.EQ 0x35564E8
	0x035564CC SUBS X9, X9, 0x1
	0x035564D0 ADD X10, X10, 0x10
	0x035564D4 B.NE 0x35564C0
	0x035564D8 MOV X0, X20
	0x035564DC MOV W2, W31
	0x035564E0 BL 0x1C5C788
	0x035564E4 B 0x35564F4
	0x035564E8 LDRSW X9, [X10]
	0x035564EC ADD X8, X8, X9, 0x4, LSL
	0x035564F0 ADD X0, X8, 0x138
	0x035564F4 LDP X8, X1, [X0]
	0x035564F8 MOV X0, X20
	0x035564FC BLR X8
	0x03556500 TBZ X0, 0x0, 0x35565D8
	0x03556504 LDR X8, [X20]
	0x03556508 LDR X1, [X24]
	0x0355650C LDRH W9, [X8 + 0x12E]
	0x03556510 CBZ X9, 0x3556534
	0x03556514 LDR X10, [X8 + 0xB0]
	0x03556518 ADD X10, X10, 0x8
	0x0355651C LDUR X11, [X10 - 0x8]
	0x03556520 CMP X11, X1
	0x03556524 B.EQ 0x3556544
	0x03556528 SUBS X9, X9, 0x1
	0x0355652C ADD X10, X10, 0x10
	0x03556530 B.NE 0x355651C
	0x03556534 MOVZ W2, 0x1
	0x03556538 MOV X0, X20
	0x0355653C BL 0x1C5C788
	0x03556540 B 0x3556554
	0x03556544 LDR W9, [X10]
	0x03556548 ADD W9, W9, 0x1
	0x0355654C ADD X8, X8, W9, 0x4, SXTW
	0x03556550 ADD X0, X8, 0x138
	0x03556554 LDP X8, X1, [X0]
	0x03556558 MOV X0, X20
	0x0355655C BLR X8
	0x03556560 MOV X22, X0
	0x03556564 LDR X0, [X25]
	0x03556568 LDR W8, [X0 + 0xE0]
	0x0355656C CBNZ W8, 0x3556574
	0x03556570 BL 0x1C16DFC
	0x03556574 CBZ X22, 0x3556678
	0x03556578 LDR X8, [X22]
	0x0355657C LDR X1, [X26]
	0x03556580 LDR X8, [X8 + 0x40]
	0x03556584 LDR X9, [X1 + 0x40]
	0x03556588 CMP X8, X9
	0x0355658C B.NE 0x3556670
	0x03556590 MOV X0, X22
	0x03556594 BL 0x1C16E08
	0x03556598 LDR W8, [X0]
	0x0355659C SUBS W8, W8, W21
	0x035565A0 CSNEG W28, W8, W8, PL
	0x035565A4 CMP W28, W27
	0x035565A8 B.CS 0x35564A4
	0x035565AC LDR X8, [X22]
	0x035565B0 LDR X1, [X26]
	0x035565B4 LDR X8, [X8 + 0x40]
	0x035565B8 LDR X9, [X1 + 0x40]
	0x035565BC CMP X8, X9
	0x035565C0 B.NE 0x3556688
	0x035565C4 MOV X0, X22
	0x035565C8 BL 0x1C16E08
	0x035565CC LDR W19, [X0]
	0x035565D0 MOV W27, W28
	0x035565D4 B 0x35564A4
	0x035565D8 MOV X21, X31
	0x035565DC LDR X1, [X23]
	0x035565E0 MOV X0, X20
	0x035565E4 BL 0x1C16E00
	0x035565E8 CBZ X0, 0x3556648
	0x035565EC LDR X8, [X0]
	0x035565F0 LDR X1, [X23]
	0x035565F4 MOV X20, X0
	0x035565F8 LDRH W9, [X8 + 0x12E]
	0x035565FC CBZ X9, 0x3556620
	0x03556600 LDR X10, [X8 + 0xB0]
	0x03556604 ADD X10, X10, 0x8
	0x03556608 LDUR X11, [X10 - 0x8]
	0x0355660C CMP X11, X1
	0x03556610 B.EQ 0x3556630
	0x03556614 SUBS X9, X9, 0x1
	0x03556618 ADD X10, X10, 0x10
	0x0355661C B.NE 0x3556608
	0x03556620 MOV X0, X20
	0x03556624 MOV W2, W31
	0x03556628 BL 0x1C5C788
	0x0355662C B 0x355663C
	0x03556630 LDRSW X9, [X10]
	0x03556634 ADD X8, X8, X9, 0x4, LSL
	0x03556638 ADD X0, X8, 0x138
	0x0355663C LDP X8, X1, [X0]
	0x03556640 MOV X0, X20
	0x03556644 BLR X8
	0x03556648 CBNZ X21, 0x3556680
	0x0355664C MOV W0, W19
	0x03556650 LDP X20, X19, [X31 + 0x50]
	0x03556654 LDP X22, X21, [X31 + 0x40]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xE8A000
	009 Move X21, 0xBC6000
	010 Move W8, [X20+3452]
	011 Move X21, [X21+1528]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {40}
	017 Move X0, 0xBC6000
	018 Move X0, [X0+1528]
	019 Call 0x1C17CF4
	020 Move X0, 0xB9E000
	021 Move X0, [X0+1880]
	022 Call 0x1C17CF4
	023 Move X0, 0xB9E000
	024 Move X0, [X0+1448]
	025 Call 0x1C17CF4
	026 Move X0, 0xBA4000
	027 Move X0, [X0+3224]
	028 Call 0x1C17CF4
	029 Move X0, 0xB9F000
	030 Move X0, [X0+1544]
	031 Call 0x1C17CF4
	032 Move X0, 0xB9F000
	033 Move X0, [X0+1552]
	034 Call 0x1C17CF4
	035 Move X0, 0xB9E000
	036 Move X0, [X0+2440]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X20+3452], W8
	040 Move X0, [X21]
	041 Move W22, [X19+32]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move X23, X19
	047 Add X23, X23, 16
	048 Move X20, [X23]
	049 Compare W22, 0
	050 JumpIfEqual {62}
	051 Move X22, 0xB9E000
	052 Move X22, [X22+2440]
	053 Compare X20, 0
	054 JumpIfEqual {85}
	055 Move X0, [X21]
	056 Move X8, X23
	057 Move W9, [X0+224]
	058 Compare W9, 0
	059 JumpIfNotEqual {86}
	060 Call 0x1C17DFC
	061 Move X8, X23
	062 Move X9, 0xB9E000
	063 Move W8, [X19+4]
	064 Move X9, [X9+1880]
	065 Add X1, X31, 12
	066 Move [X31+12], W8
	067 Move X0, [X9]
	068 Call 0x1C17E04
	069 Move X8, 0xBA4000
	070 Move X8, [X8+3224]
	071 Move X2, X0
	072 Move X1, X20
	073 Move X3, X31
	074 Move X8, [X8]
	075 Move X0, X8
	076 Call String.Format, X0, X1, X2
	077 Move X20, [X31+48]
	078 Move X19, [X31+56]
	079 Move X22, [X31+32]
	080 Move X21, [X31+40]
	081 Move X30, [X31+16]
	082 Move X23, [X31+24]
	083 Add X31, X31, 64
	084 Return X0
	085 Move X8, X22
	086 Move X0, [X21]
	087 Move X20, [X8]
	088 Move W9, [X0+224]
	089 Compare W9, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1C17DFC
	092 Move X0, [X19+8]
	093 Compare X0, 0
	094 JumpIfEqual {109}
	095 Move X8, [X21]
	096 Move W9, [X8+224]
	097 Compare W9, 0
	098 JumpIfNotEqual {102}
	099 Move X0, X8
	100 Call 0x1C17DFC
	101 Move X0, [X19+8]
	102 Move X1, [X23]
	103 Move X2, X31
	104 Call String.op_Equality, X0, X1
	105 Move TEMP, X0
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfNotEqual {110}
	109 Move X1, [X22]
	110 Move X0, [X21]
	111 Move W8, [X0+224]
	112 Compare W8, 0
	113 JumpIfNotEqual {115}
	114 Call 0x1C17DFC
	115 Move X19, [X19+8]
	116 Compare X19, 0
	117 JumpIfEqual {157}
	118 Move X8, 0xB9E000
	119 Move X8, [X8+1448]
	120 Move W21, [X19+16]
	121 Move X0, [X8]
	122 Move W8, [X0+224]
	123 Compare W8, 0
	124 JumpIfNotEqual {126}
	125 Call 0x1C17DFC
	126 Move W0, 10
	127 Move W1, W21
	128 Move X2, X31
	129 Call Math.Min, X0, X1
	130 Move W2, W0
	131 Move X0, X19
	132 Move W1, W31
	133 Move X3, X31
	134 Call String.Substring, X0, X1, X2
	135 Move X8, 0xB9F000
	136 Move X8, [X8+1552]
	137 Move X9, 0xB9F000
	138 Move X9, [X9+1544]
	139 Move X1, X0
	140 Move X8, [X8]
	141 Move X3, X31
	142 Move X2, [X9]
	143 Move X0, X8
	144 Call String.Concat, X0, X1, X2
	145 Move X1, X0
	146 Move X0, X20
	147 Move X20, [X31+48]
	148 Move X19, [X31+56]
	149 Move X22, [X31+32]
	150 Move X21, [X31+40]
	151 Move X30, [X31+16]
	152 Move X23, [X31+24]
	153 Move X2, X31
	154 Add X31, X31, 64
	155 Call String.Concat, X0, X1
	156 Return X0
	157 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x03556658 LDP X24, X23, [X31 + 0x30]
	0x0355665C LDP X26, X25, [X31 + 0x20]
	0x03556660 LDP X28, X27, [X31 + 0x10]
	0x03556664 LDR X30, [X31], #0x60
	0x03556668 RET
	0x0355666C BL 0x1C16F20
	0x03556670 MOV X0, X22
	0x03556674 BL 0x1C171E0
	0x03556678 BL 0x1C16F20
	0x0355667C BL 0x1C16F20
	0x03556680 MOV X0, X21
	0x03556684 BL 0x1C16F18
	0x03556688 MOV X0, X22
	0x0355668C BL 0x1C171E0
	0x03556690 B 0x35566B0
	0x03556694 B 0x35566B0
	0x03556698 B 0x35566B0
	0x0355669C B 0x35566B0
	0x035566A0 MOVZ W19, 0xBB80
	0x035566A4 B 0x35566B0
	0x035566A8 B 0x35566B0
	0x035566AC B 0x35566B0
	0x035566B0 CMP W1, 0x1
	0x035566B4 B.NE 0x35566C8
	0x035566B8 BL 0x3EB1AD0
	0x035566BC LDR X21, [X0]
	0x035566C0 BL 0x3EB1AE0
	0x035566C4 B 0x35565DC
	0x035566C8 MOV X19, X0
	0x035566CC MOV X21, X31
	0x035566D0 B 0x35566D8
	0x035566D4 MOV X19, X0
	0x035566D8 LDR X1, [X23]
	0x035566DC MOV X0, X20
	0x035566E0 BL 0x1C16E00
	0x035566E4 MOV X20, X0
	0x035566E8 CBZ X0, 0x3556744
	0x035566EC LDR X8, [X20]
	0x035566F0 LDR X1, [X23]
	0x035566F4 LDRH W9, [X8 + 0x12E]
	0x035566F8 CBZ X9, 0x355671C
	0x035566FC LDR X10, [X8 + 0xB0]
	0x03556700 ADD X10, X10, 0x8
	0x03556704 LDUR X11, [X10 - 0x8]
	0x03556708 CMP X11, X1
	0x0355670C B.EQ 0x355672C
	0x03556710 SUBS X9, X9, 0x1
	0x03556714 ADD X10, X10, 0x10
	0x03556718 B.NE 0x3556704
	0x0355671C MOV X0, X20
	0x03556720 MOV W2, W31
	0x03556724 BL 0x1C5C788
	0x03556728 B 0x3556738
	0x0355672C LDRSW X9, [X10]
	0x03556730 ADD X8, X8, X9, 0x4, LSL
	0x03556734 ADD X0, X8, 0x138
	0x03556738 LDP X8, X1, [X0]
	0x0355673C MOV X0, X20
	0x03556740 BLR X8
	0x03556744 CBNZ X21, 0x3556750
	0x03556748 MOV X0, X19
	0x0355674C BL 0x1D2C690
	0x03556750 MOV X0, X21
	0x03556754 BL 0x1C16F18

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X21, 0xE8A000
	008 Move X19, 0xB9E000
	009 Move X20, 0xBE0000
	010 Move W8, [X21+3453]
	011 Move X19, [X19+2440]
	012 Move X20, [X20+928]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0xBC6000
	018 Move X0, [X0+1528]
	019 Call 0x1C17CF4
	020 Move X0, 0xBE0000
	021 Move X0, [X0+928]
	022 Call 0x1C17CF4
	023 Move X0, 0xB9E000
	024 Move X0, [X0+2440]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+3453], W8
	028 Move X21, 0xBC6000
	029 Move X22, 0xE8A000
	030 Move X21, [X21+1528]
	031 Move X19, [X19]
	032 Move W8, [X22+3443]
	033 Move X20, [X20]
	034 NotImplemented "Instruction STRH not yet implemented."
	035 Move [X31+30], W31
	036 Move [X31+8], W31
	037 Move [X31+11], W31
	038 Move TEMP, X8
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {47}
	042 Move X0, 0xBC6000
	043 Move X0, [X0+1528]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X22+3443], W8
	047 Move X0, [X21]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X21]
	053 Move X8, [X0+184]
	054 Move W9, 1
	055 Move TEMP, 127
	056 Not TEMP
	057 Move W10, TEMP
	058 Move X22, [X31+32]
	059 Move X21, [X31+40]
	060 Move [X8], W9
	061 NotImplemented "Instruction LDRH not yet implemented."
	062 Move W11, [X31+30]
	063 Move [X8+4], W10
	064 Move [X8+8], X19
	065 Move [X8+16], X20
	066 Move [X8+24], X31
	067 Move [X8+32], W31
	068 Move [X8+3], W11
	069 NotImplemented "Instruction STURH not yet implemented."
	070 NotImplemented "Instruction LDUR not yet implemented."
	071 Move W10, [X31+8]
	072 Move X20, [X31+48]
	073 Move X19, [X31+56]
	074 Move X30, [X31+16]
	075 Move [X8+36], W9
	076 Move [X8+33], W10
	077 Add X31, X31, 64
	078 Return 

