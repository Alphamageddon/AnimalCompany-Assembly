Type: Photon.Voice.OpusCodec/EncoderFloat

Method: System.Void .ctor(Photon.Voice.VoiceInfo i, Photon.Voice.ILogger logger)

Disassembly:
	0x035571FC LDR X8, [X8]
	0x03557200 STR X8, [X20 + 0x30]
	0x03557204 LDR X8, [X19 + 0x10]
	0x03557208 CBZ X8, 0x35572B4
	0x0355720C ADRP X22, 0xB9E000
	0x03557210 LDR X22, [X22 + 0x3A0]
	0x03557214 LDR W2, [X19 + 0x24]
	0x03557218 LDR W8, [X8 + 0x18]
	0x0355721C MOV X1, X21
	0x03557220 LDR X0, [X22]
	0x03557224 MOV X4, X31
	0x03557228 SUB W3, W8, W2
	0x0355722C BL 0x3228058
	0x03557230 LDR W8, [X20 + 0x18]
	0x03557234 CMP W8, 0x3
	0x03557238 B.LS 0x35572B0
	0x0355723C CMP W8, 0x4
	0x03557240 STR X0, [X20 + 0x38]
	0x03557244 B.EQ 0x35572B0
	0x03557248 ADRP X8, 0xB9C000
	0x0355724C LDR X8, [X8 + 0x838]
	0x03557250 MOV X1, X21
	0x03557254 MOV W2, W31
	0x03557258 MOV X4, X31
	0x0355725C LDR X8, [X8]
	0x03557260 STR X8, [X20 + 0x40]
	0x03557264 LDR W3, [X19 + 0x24]
	0x03557268 LDR X0, [X22]
	0x0355726C BL 0x3228058
	0x03557270 LDR W8, [X20 + 0x18]
	0x03557274 CMP W8, 0x5
	0x03557278 B.LS 0x35572B0
	0x0355727C STR X0, [X20 + 0x48]
	0x03557280 MOV X0, X20
	0x03557284 MOV X1, X31
	0x03557288 BL 0x32278CC
	0x0355728C B 0x355729C
	0x03557290 ADRP X8, 0xBDE000
	0x03557294 LDR X8, [X8 + 0x4A0]
	0x03557298 LDR X0, [X8]
	0x0355729C LDP X20, X19, [X31 + 0x30]
	0x035572A0 LDP X22, X21, [X31 + 0x20]
	0x035572A4 LDP X24, X23, [X31 + 0x10]
	0x035572A8 LDR X30, [X31], #0x40

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], X30
	003 Move [X31+104], X23
	004 Move [X31+112], X22
	005 Move [X31+120], X21
	006 Move [X31+128], X20
	007 Move [X31+136], X19
	008 Move X23, 0xE89000
	009 Move X22, 0xBDF000
	010 Move W8, [X23+3467]
	011 Move X22, [X22+1032]
	012 Move X19, X2
	013 Move X21, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xBDF000
	020 Move X0, [X0+1040]
	021 Call 0x1C17CF4
	022 Move X0, 0xBDF000
	023 Move X0, [X0+1032]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+3467], W8
	027 Move V1, [X21+16]
	028 Move V0, [X21+32]
	029 Move V2, [X21]
	030 Move X0, [X22]
	031 Move X21, 0xBDF000
	032 Move [X31+16], V1
	033 Move [X31+24], V0
	034 Move [X31], V2
	035 Move W8, [X0+224]
	036 Move X21, [X21+1040]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move V0, [X31]
	041 Move V1, [X31+16]
	042 Move V2, [X31+2]
	043 Move X3, [X21]
	044 Add X1, X31, 48
	045 Move X0, X20
	046 Move X2, X19
	047 Move [X31+48], V0
	048 Move [X31+56], V1
	049 Move [X31+5], V2
	050 Call Encoder`1<Single>..ctor, X0, X1, X2
	051 Move X20, [X31+128]
	052 Move X19, [X31+136]
	053 Move X22, [X31+112]
	054 Move X21, [X31+120]
	055 Move X30, [X31+96]
	056 Move X23, [X31+104]
	057 Add X31, X31, 144
	058 Return 

Method: System.Void encodeTyped(System.Single[] buf)

Disassembly:
	0x035572AC RET
	0x035572B0 BL 0x1C16F28
	0x035572B4 BL 0x1C16F20
	0x035572B8 STR X30, [X31 - 0x40]!
	0x035572BC STP X24, X23, [X31 + 0x10]
	0x035572C0 STP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X30, [X31+16]
	006 Call OpusEncoder.Encode, X0, X1
	007 Return 
	008 Call 0x1C17F20

