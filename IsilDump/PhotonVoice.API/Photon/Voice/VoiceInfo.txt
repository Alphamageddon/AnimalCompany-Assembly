Type: Photon.Voice.VoiceInfo

Method: Photon.Voice.VoiceInfo CreateAudioOpus(POpusCodec.Enums.SamplingRate samplingRate, System.Int32 channels, Photon.Voice.OpusCodec/FrameDuration frameDurationUs, System.Int32 bitrate, System.Object userdata = null)

Disassembly:
	0x035688C8 BL 0x33C5D2C
	0x035688CC TBZ X0, 0x0, 0x35688E8
	0x035688D0 AND W2, W20, 0x1
	0x035688D4 MOV X0, X19
	0x035688D8 LDP X20, X19, [X31 + 0x10]
	0x035688DC MOVZ W1, 0x33
	0x035688E0 LDR X30, [X31], #0x20
	0x035688E4 B 0x3567ED8
	0x035688E8 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move W9, 11
	002 Move [X8+28], X31
	003 Move [X8+20], X31
	004 Move [X8+36], W31
	005 Move [X8+8], W1
	006 Move [X8+12], W2
	007 Move [X8+16], W3
	008 Move [X8], W9
	009 Move [X8+4], W0
	010 Move [X8+40], X4
	011 Return X0

Method: Photon.Voice.VoiceInfo CreateAudio(Photon.Voice.Codec codec, System.Int32 samplingRate, System.Int32 channels, System.Int32 frameDurationUs, System.Object userdata = null)

Disassembly:
	0x035688EC LDR X30, [X31], #0x20
	0x035688F0 RET
	0x035688F4 SUB X31, X31, 0x30
	0x035688F8 STP X30, X21, [X31 + 0x10]
	0x035688FC STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X8+16], X31
	002 Move [X8+24], X31
	003 Move [X8], W0
	004 Move [X8+4], W1
	005 Move [X8+8], W2
	006 Move [X8+12], W3
	007 Move [X8+32], X31
	008 Move [X8+40], X4
	009 Return X0

Method: System.String ToString()

Disassembly:
	0x0355A520 EOR W9, W10, W11, 0x0
	0x0355A524 STURB W8, [X26 - 0x4]
	0x0355A528 STURB W9, [X26 - 0x3]
	0x0355A52C LDR X0, [X28]
	0x0355A530 LDR W8, [X0 + 0xE0]
	0x0355A534 CBNZ W8, 0x355A53C
	0x0355A538 BL 0x1C16DFC
	0x0355A53C LDRB W8, [X19 + 0xF4]
	0x0355A540 ADD W9, W20, W27
	0x0355A544 LDR X20, [X31 + 0x20]
	0x0355A548 STR W9, [X19 + 0xEC]
	0x0355A54C ADD W8, W8, 0x1
	0x0355A550 CMP W21, W8, UXTB
	0x0355A554 STRB W8, [X19 + 0xF4]
	0x0355A558 B.GT 0x355A754
	0x0355A55C LDR X8, [X19 + 0xE0]
	0x0355A560 CBZ X8, 0x355A778
	0x0355A564 LDRSW X9, [X19 + 0xF0]
	0x0355A568 LDR W10, [X8 + 0x18]
	0x0355A56C CMP W9, W10
	0x0355A570 B.CS 0x355A774
	0x0355A574 LDRB W10, [X19 + 0xE9]
	0x0355A578 ADD X8, X8, X9
	0x0355A57C STRB W10, [X8 + 0x20]
	0x0355A580 LDR X8, [X19 + 0xE0]
	0x0355A584 CBZ X8, 0x355A778
	0x0355A588 LDR W9, [X19 + 0xF0]
	0x0355A58C LDR W10, [X8 + 0x18]
	0x0355A590 ADD W9, W9, 0x1
	0x0355A594 CMP W9, W10
	0x0355A598 B.CS 0x355A774
	0x0355A59C LDRB W10, [X19 + 0xE8]
	0x0355A5A0 ADD X8, X8, W9, SXTW
	0x0355A5A4 STRB W10, [X8 + 0x20]
	0x0355A5A8 LDR X8, [X19 + 0xE0]
	0x0355A5AC CBZ X8, 0x355A778
	0x0355A5B0 LDR W9, [X19 + 0xF0]
	0x0355A5B4 LDR W10, [X8 + 0x18]
	0x0355A5B8 ADD W9, W9, 0x2
	0x0355A5BC CMP W9, W10
	0x0355A5C0 B.CS 0x355A774
	0x0355A5C4 LDR W10, [X19 + 0xEC]
	0x0355A5C8 ADD X8, X8, W9, SXTW
	0x0355A5CC STRB W10, [X8 + 0x20]
	0x0355A5D0 LDR X8, [X19 + 0xE0]
	0x0355A5D4 CBZ X8, 0x355A778
	0x0355A5D8 LDR W9, [X19 + 0xF0]
	0x0355A5DC LDR W10, [X8 + 0x18]
	0x0355A5E0 ADD W9, W9, 0x3
	0x0355A5E4 CMP W9, W10
	0x0355A5E8 B.CS 0x355A774
	0x0355A5EC LDR W10, [X19 + 0xEC]
	0x0355A5F0 ADD X8, X8, W9, SXTW
	0x0355A5F4 UBFM W10, W10, 0x8, 0x1F
	0x0355A5F8 STRB W10, [X8 + 0x20]
	0x0355A5FC LDR X8, [X19 + 0xE0]
	0x0355A600 CBZ X8, 0x355A778
	0x0355A604 LDR W9, [X19 + 0xF0]
	0x0355A608 LDR W10, [X8 + 0x18]
	0x0355A60C ADD W9, W9, 0x4
	0x0355A610 CMP W9, W10
	0x0355A614 B.CS 0x355A774
	0x0355A618 LDRB W10, [X19 + 0xF4]
	0x0355A61C LDRB W11, [X19 + 0x88]
	0x0355A620 ADD X8, X8, W9, SXTW
	0x0355A624 SUB W10, W11, W10
	0x0355A628 STRB W10, [X8 + 0x20]
	0x0355A62C LDR X8, [X19 + 0x90]
	0x0355A630 CBZ X8, 0x355A778
	0x0355A634 ADRP X9, 0xBC4000
	0x0355A638 LDR X21, [X8 + 0x10]
	0x0355A63C LDR X1, [X19 + 0xE0]
	0x0355A640 LDR W8, [X19 + 0xF0]
	0x0355A644 LDR X9, [X9 + 0xB88]
	0x0355A648 ADD X0, X31, 0x50
	0x0355A64C MOV W2, W31
	0x0355A650 ADD W3, W8, 0x5
	0x0355A654 LDR X4, [X9]
	0x0355A658 STP X31, X31, [X31 + 0x50]
	0x0355A65C BL 0x2B87BB0
	0x0355A660 LDRB W22, [X19 + 0x88]
	0x0355A664 LDRB W23, [X19 + 0x80]
	0x0355A668 LDR X8, [X20 + 0x10]
	0x0355A66C LDR V0, [X20]
	0x0355A670 LDR W20, [X19 + 0x84]
	0x0355A674 STR X8, [X31 + 0x90]
	0x0355A678 STR V0, [X31 + 0x8]
	0x0355A67C CBZ X21, 0x355A778
	0x0355A680 LDR V0, [X31 + 0x8]
	0x0355A684 LDR X8, [X31 + 0x90]
	0x0355A688 ADRP X9, 0xBDB000
	0x0355A68C STR V0, [X31 + 0x3]
	0x0355A690 STR X8, [X31 + 0x40]
	0x0355A694 LDR X8, [X21]
	0x0355A698 LDR X9, [X9 + 0x4D0]
	0x0355A69C LDP X25, X24, [X31 + 0x50]
	0x0355A6A0 LDR X1, [X9]
	0x0355A6A4 LDRH W9, [X8 + 0x12E]
	0x0355A6A8 CBZ X9, 0x355A6CC
	0x0355A6AC LDR X10, [X8 + 0xB0]
	0x0355A6B0 ADD X10, X10, 0x8
	0x0355A6B4 LDUR X11, [X10 - 0x8]
	0x0355A6B8 CMP X11, X1
	0x0355A6BC B.EQ 0x355A6DC
	0x0355A6C0 SUBS X9, X9, 0x1
	0x0355A6C4 ADD X10, X10, 0x10
	0x0355A6C8 B.NE 0x355A6B4
	0x0355A6CC MOVZ W2, 0x3
	0x0355A6D0 MOV X0, X21
	0x0355A6D4 BL 0x1C5C788
	0x0355A6D8 B 0x355A6EC
	0x0355A6DC LDR W9, [X10]
	0x0355A6E0 ADD W9, W9, 0x3
	0x0355A6E4 ADD X8, X8, W9, 0x4, SXTW
	0x0355A6E8 ADD X0, X8, 0x138
	0x0355A6EC LDR V0, [X31 + 0x3]
	0x0355A6F0 LDR X8, [X31 + 0x40]
	0x0355A6F4 LDR X9, [X0]
	0x0355A6F8 ADD X10, X31, 0xA0
	0x0355A6FC STR V0, [X31 + 0xA]
	0x0355A700 STR X8, [X31 + 0xB0]
	0x0355A704 LDR X8, [X0 + 0x8]
	0x0355A708 MOVZ W3, 0x40
	0x0355A70C MOV X0, X21
	0x0355A710 MOV X1, X25
	0x0355A714 MOV X2, X24
	0x0355A718 MOV W4, W22
	0x0355A71C MOV W5, W22
	0x0355A720 MOV W6, W23
	0x0355A724 MOV W7, W20
	0x0355A728 STP X10, X8, [X31]
	0x0355A72C BLR X9
	0x0355A730 LDR W8, [X19 + 0xF0]
	0x0355A734 LDR X0, [X19 + 0xE0]
	0x0355A738 MOV W1, W31
	0x0355A73C MOV X3, X31
	0x0355A740 ADD W2, W8, 0x5
	0x0355A744 BL 0x339FA34
	0x0355A748 STRH W31, [X19 + 0xE8]
	0x0355A74C STRB W31, [X26 + 0x8]
	0x0355A750 STR X31, [X26]
	0x0355A754 LDP X20, X19, [X31 + 0x110]
	0x0355A758 LDP X22, X21, [X31 + 0x100]
	0x0355A75C LDP X24, X23, [X31 + 0xF0]
	0x0355A760 LDP X26, X25, [X31 + 0xE0]
	0x0355A764 LDP X28, X27, [X31 + 0xD0]
	0x0355A768 LDP X29, X30, [X31 + 0xC0]
	0x0355A76C ADD X31, X31, 0x120
	0x0355A770 RET
	0x0355A774 BL 0x1C16F28
	0x0355A778 BL 0x1C16F20
	0x0355A77C STP X30, X19, [X31 - 0x10]!
	0x0355A780 LDR W8, [X0 + 0xF0]
	0x0355A784 MOV X19, X0
	0x0355A788 LDR X0, [X0 + 0xE0]
	0x0355A78C MOV W1, W31
	0x0355A790 ADD W2, W8, 0x5
	0x0355A794 MOV X3, X31
	0x0355A798 BL 0x339FA34
	0x0355A79C STRH W31, [X19 + 0xE8]
	0x0355A7A0 STUR X31, [X19 + 0xEC]
	0x0355A7A4 STRB W31, [X19 + 0xF4]
	0x0355A7A8 LDP X30, X19, [X31], #0x10
	0x0355A7AC RET
	0x0355A7B0 MOV X1, X0
	0x0355A7B4 LDR X0, [X0 + 0x90]
	0x0355A7B8 CBZ X0, 0x355A7C0
	0x0355A7BC B 0x355A7C4
	0x0355A7C0 RET
	0x0355A7C4 STR X30, [X31 - 0x40]!
	0x0355A7C8 STP X24, X23, [X31 + 0x10]
	0x0355A7CC STP X22, X21, [X31 + 0x20]
	0x0355A7D0 STP X20, X19, [X31 + 0x30]
	0x0355A7D4 ADRP X21, 0xE85000
	0x0355A7D8 LDRB W8, [X21 + 0xDC9]
	0x0355A7DC MOV X19, X1
	0x0355A7E0 MOV X20, X0
	0x0355A7E4 TBNZ X8, 0x0, 0x355A844
	0x0355A7E8 ADRP X0, 0xB99000
	0x0355A7EC LDR X0, [X0 + 0x9C8]
	0x0355A7F0 BL 0x1C16CF4
	0x0355A7F4 ADRP X0, 0xBDB000
	0x0355A7F8 LDR X0, [X0 + 0x668]
	0x0355A7FC BL 0x1C16CF4
	0x0355A800 ADRP X0, 0xBDB000
	0x0355A804 LDR X0, [X0 + 0x670]
	0x0355A808 BL 0x1C16CF4
	0x0355A80C ADRP X0, 0xB9E000
	0x0355A810 LDR X0, [X0 + 0x348]
	0x0355A814 BL 0x1C16CF4
	0x0355A818 ADRP X0, 0xBDB000
	0x0355A81C LDR X0, [X0 + 0x4D0]
	0x0355A820 BL 0x1C16CF4
	0x0355A824 ADRP X0, 0xBDB000
	0x0355A828 LDR X0, [X0 + 0x678]
	0x0355A82C BL 0x1C16CF4
	0x0355A830 ADRP X0, 0xBDB000
	0x0355A834 LDR X0, [X0 + 0x680]
	0x0355A838 BL 0x1C16CF4
	0x0355A83C MOVZ W8, 0x1
	0x0355A840 STRB W8, [X21 + 0xDC9]
	0x0355A844 CBZ X19, 0x355AA28
	0x0355A848 LDR X0, [X20 + 0x78]
	0x0355A84C CBZ X0, 0x355AA28
	0x0355A850 ADRP X8, 0xBDB000
	0x0355A854 LDR X8, [X8 + 0x668]
	0x0355A858 LDRB W1, [X19 + 0x80]
	0x0355A85C LDR X2, [X8]
	0x0355A860 BL 0x29D4934
	0x0355A864 LDR X0, [X20 + 0x80]
	0x0355A868 CBZ X0, 0x355AA28
	0x0355A86C ADRP X8, 0xBDB000
	0x0355A870 LDR X8, [X8 + 0x670]
	0x0355A874 LDR W1, [X19 + 0x84]
	0x0355A878 LDR X2, [X8]
	0x0355A87C BL 0x2A135EC
	0x0355A880 CBZ X0, 0x355AA28
	0x0355A884 ADRP X8, 0xBDB000
	0x0355A888 LDR X8, [X8 + 0x678]
	0x0355A88C MOV X1, X19
	0x0355A890 LDR X2, [X8]
	0x0355A894 BL 0x301D7A8
	0x0355A898 LDR X21, [X20 + 0x10]
	0x0355A89C CBZ X21, 0x355AA28
	0x0355A8A0 ADRP X10, 0xBDB000
	0x0355A8A4 LDR X8, [X21]
	0x0355A8A8 LDR X10, [X10 + 0x4D0]
	0x0355A8AC LDR W22, [X19 + 0x84]
	0x0355A8B0 LDRH W9, [X8 + 0x12E]
	0x0355A8B4 LDR X1, [X10]
	0x0355A8B8 CBZ X9, 0x355A8DC
	0x0355A8BC LDR X10, [X8 + 0xB0]
	0x0355A8C0 ADD X10, X10, 0x8
	0x0355A8C4 LDUR X11, [X10 - 0x8]
	0x0355A8C8 CMP X11, X1
	0x0355A8CC B.EQ 0x355A8EC
	0x0355A8D0 SUBS X9, X9, 0x1
	0x0355A8D4 ADD X10, X10, 0x10
	0x0355A8D8 B.NE 0x355A8C4
	0x0355A8DC MOV X0, X21
	0x0355A8E0 MOV W2, W31
	0x0355A8E4 BL 0x1C5C788
	0x0355A8E8 B 0x355A8F8
	0x0355A8EC LDRSW X9, [X10]
	0x0355A8F0 ADD X8, X8, X9, 0x4, LSL
	0x0355A8F4 ADD X0, X8, 0x138
	0x0355A8F8 LDP X8, X2, [X0]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0xE86000
	007 Move X20, 0xB9A000
	008 Move W8, [X21+3570]
	009 Move X20, [X20+2760]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {56}
	015 Move X0, 0xBC3000
	016 Move X0, [X0+1064]
	017 Call 0x1C17CF4
	018 Move X0, 0xB9A000
	019 Move X0, [X0+2760]
	020 Call 0x1C17CF4
	021 Move X0, 0xBDC000
	022 Move X0, [X0+1504]
	023 Call 0x1C17CF4
	024 Move X0, 0xBDC000
	025 Move X0, [X0+1512]
	026 Call 0x1C17CF4
	027 Move X0, 0xBDC000
	028 Move X0, [X0+1520]
	029 Call 0x1C17CF4
	030 Move X0, 0xBDC000
	031 Move X0, [X0+1528]
	032 Call 0x1C17CF4
	033 Move X0, 0xBDC000
	034 Move X0, [X0+1536]
	035 Call 0x1C17CF4
	036 Move X0, 0xBDC000
	037 Move X0, [X0+1544]
	038 Call 0x1C17CF4
	039 Move X0, 0xBDC000
	040 Move X0, [X0+1552]
	041 Call 0x1C17CF4
	042 Move X0, 0xBDC000
	043 Move X0, [X0+1560]
	044 Call 0x1C17CF4
	045 Move X0, 0xBDC000
	046 Move X0, [X0+1568]
	047 Call 0x1C17CF4
	048 Move X0, 0xBDC000
	049 Move X0, [X0+1576]
	050 Call 0x1C17CF4
	051 Move X0, 0xBDC000
	052 Move X0, [X0+1584]
	053 Call 0x1C17CF4
	054 Move W8, 1
	055 Move [X21+3570], W8
	056 Move X0, [X20]
	057 Move W1, 22
	058 Move [X31+28], W31
	059 Call 0x1C17D6C
	060 Compare X0, 0
	061 JumpIfEqual {245}
	062 Move W8, [X0+24]
	063 Move X20, X0
	064 Compare W8, 0
	065 JumpIfEqual {244}
	066 Move X8, 0xBDC000
	067 Move X8, [X8+1536]
	068 Move X9, 0xBC3000
	069 Move TEMP, 0
	070 Not TEMP
	071 Move X10, TEMP
	072 Add X0, X31, 0
	073 Move X8, [X8]
	074 Move X9, [X9+1064]
	075 Move X1, X31
	076 Move [X20+32], X8
	077 Move X8, [X9]
	078 Move W9, [X19]
	079 Move [X31], X8
	080 Move [X31+8], X10
	081 Move [X31+16], W9
	082 Call Enum.ToString, X0
	083 Move W8, [X20+24]
	084 NotImplemented "Instruction CMP not yet implemented."
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move [X20+40], X0
	087 Move X8, 0xBDC000
	088 Move X8, [X8+1504]
	089 Add X0, X31, 28
	090 Move X1, X31
	091 Move X8, [X8]
	092 Move [X20+48], X8
	093 Move W8, [X19+4]
	094 Move [X31+28], W8
	095 Call Int32.ToString, X0
	096 Move W8, [X20+24]
	097 NotImplemented "Instruction CMP not yet implemented."
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move [X20+56], X0
	100 Move X8, 0xBDC000
	101 Move X8, [X8+1568]
	102 Add X0, X31, 28
	103 Move X1, X31
	104 Move X8, [X8]
	105 Move [X20+64], X8
	106 Move W8, [X19+8]
	107 Move [X31+28], W8
	108 Call Int32.ToString, X0
	109 Move W8, [X20+24]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Move [X20+72], X0
	113 Move X8, 0xBDC000
	114 Move X8, [X8+1520]
	115 Add X0, X31, 28
	116 Move X1, X31
	117 Move X8, [X8]
	118 Move [X20+80], X8
	119 Move W8, [X19+12]
	120 Move [X31+28], W8
	121 Call Int32.ToString, X0
	122 Move W8, [X20+24]
	123 NotImplemented "Instruction CMP not yet implemented."
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move [X20+88], X0
	126 Move X8, 0xBDC000
	127 Move X8, [X8+1576]
	128 Move X10, 0x34DB
	129 NotImplemented "Instruction MOVK not yet implemented."
	130 NotImplemented "Instruction MOVK not yet implemented."
	131 Move X8, [X8]
	132 NotImplemented "Instruction MOVK not yet implemented."
	133 Add X0, X31, 28
	134 Move X1, X31
	135 Move [X20+96], X8
	136 NotImplemented "Instruction LDRSW not yet implemented."
	137 Move W11, [X19+8]
	138 Move W8, [X19+12]
	139 Move X8, W8
	140 Multiply X8, X8, X9
	141 NotImplemented "Instruction SMULH not yet implemented."
	142 Move X9, X8
	143 ShiftRight X9, 63
	144 And X9, X9, 0x7FFFFFFF
	145 Move X8, X8
	146 ShiftRight X8, 18
	147 And X8, X8, 0x7FFFFFFF
	148 Add W8, W8, W9
	149 Multiply W8, W11, W8
	150 Move [X31+28], W8
	151 Call Int32.ToString, X0
	152 Move W8, [X20+24]
	153 NotImplemented "Instruction CMP not yet implemented."
	154 NotImplemented "Instruction CMP not yet implemented."
	155 Move [X20+104], X0
	156 Move X8, 0xBDC000
	157 Move X8, [X8+1560]
	158 Add X0, X31, 28
	159 Move X1, X31
	160 Move X8, [X8]
	161 Move [X20+112], X8
	162 Move W8, [X19+16]
	163 Move [X31+28], W8
	164 Call Int32.ToString, X0
	165 Move W8, [X20+24]
	166 NotImplemented "Instruction CMP not yet implemented."
	167 NotImplemented "Instruction CMP not yet implemented."
	168 Move [X20+120], X0
	169 Move X8, 0xBDC000
	170 Move X8, [X8+1552]
	171 Add X0, X31, 28
	172 Move X1, X31
	173 Move X8, [X8]
	174 Move [X20+128], X8
	175 Move W8, [X19+20]
	176 Move [X31+28], W8
	177 Call Int32.ToString, X0
	178 Move W8, [X20+24]
	179 NotImplemented "Instruction CMP not yet implemented."
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Move [X20+136], X0
	182 Move X8, 0xBDC000
	183 Move X8, [X8+1512]
	184 Add X0, X31, 28
	185 Move X1, X31
	186 Move X8, [X8]
	187 Move [X20+144], X8
	188 Move W8, [X19+24]
	189 Move [X31+28], W8
	190 Call Int32.ToString, X0
	191 Move W8, [X20+24]
	192 NotImplemented "Instruction CMP not yet implemented."
	193 NotImplemented "Instruction CMP not yet implemented."
	194 Move [X20+152], X0
	195 Move X8, 0xBDC000
	196 Move X8, [X8+1584]
	197 Add X0, X31, 28
	198 Move X1, X31
	199 Move X8, [X8]
	200 Move [X20+160], X8
	201 Move W8, [X19+28]
	202 Move [X31+28], W8
	203 Call Int32.ToString, X0
	204 Move W8, [X20+24]
	205 NotImplemented "Instruction CMP not yet implemented."
	206 NotImplemented "Instruction CMP not yet implemented."
	207 Move [X20+168], X0
	208 Move X8, 0xBDC000
	209 Move X8, [X8+1544]
	210 Add X0, X31, 28
	211 Move X1, X31
	212 Move X8, [X8]
	213 Move [X20+176], X8
	214 Move W8, [X19+32]
	215 Move [X31+28], W8
	216 Call Int32.ToString, X0
	217 Move W8, [X20+24]
	218 NotImplemented "Instruction CMP not yet implemented."
	219 NotImplemented "Instruction CMP not yet implemented."
	220 Move [X20+184], X0
	221 Move X8, 0xBDC000
	222 Move X8, [X8+1528]
	223 Move X8, [X8]
	224 Move [X20+192], X8
	225 Move X0, [X19+40]
	226 Compare X0, 0
	227 JumpIfEqual {232}
	228 Move X8, [X0]
	229 Move X9, [X8+360]
	230 Move X1, [X8+368]
	231 NotImplemented "Instruction BLR not yet implemented."
	232 Move W8, [X20+24]
	233 NotImplemented "Instruction CMP not yet implemented."
	234 Move [X20+200], X0
	235 Move X0, X20
	236 Move X1, X31
	237 Call String.Concat, X0
	238 Move X20, [X31+48]
	239 Move X19, [X31+56]
	240 Move X30, [X31+32]
	241 Move X21, [X31+40]
	242 Add X31, X31, 64
	243 Return X0
	244 Call 0x1C17F28
	245 Call 0x1C17F20

Method: Photon.Voice.Codec get_Codec()

Disassembly:
	0x03568938 ADRP X0, 0xBCD000
	0x0356893C LDR X0, [X0 + 0xD38]

ISIL:
	001 Move W0, [X0]
	002 Return X0

Method: System.Void set_Codec(Photon.Voice.Codec value)

Disassembly:
	0x03568940 BL 0x1C16CF4
	0x03568944 MOVZ W8, 0x1

ISIL:
	001 Move [X0], W1
	002 Return 

Method: System.Int32 get_SamplingRate()

Disassembly:
	0x03568948 STRB W8, [X20 + 0xDF7]
	0x0356894C LDR W8, [X19 + 0x1C]

ISIL:
	001 Move W0, [X0+4]
	002 Return X0

Method: System.Void set_SamplingRate(System.Int32 value)

Disassembly:
	0x03568950 CMP W8, W21
	0x03568954 B.EQ 0x3568A74

ISIL:
	001 Move [X0+4], W1
	002 Return 

Method: System.Int32 get_Channels()

Disassembly:
	0x03568958 CMP W21, 0x5B
	0x0356895C B.CS 0x3568994

ISIL:
	001 Move W0, [X0+8]
	002 Return X0

Method: System.Void set_Channels(System.Int32 value)

Disassembly:
	0x03568960 LDR X0, [X19 + 0x58]
	0x03568964 MOV X1, X31

ISIL:
	001 Move [X0+8], W1
	002 Return 

Method: System.Int32 get_FrameDurationUs()

Disassembly:
	0x03568968 MOV X2, X31
	0x0356896C STR W21, [X19 + 0x1C]

ISIL:
	001 Move W0, [X0+12]
	002 Return X0

Method: System.Void set_FrameDurationUs(System.Int32 value)

Disassembly:
	0x03568970 BL 0x33C5D2C
	0x03568974 TBZ X0, 0x0, 0x3568A74

ISIL:
	001 Move [X0+12], W1
	002 Return 

Method: System.Int32 get_Bitrate()

Disassembly:
	0x03568978 MOV X0, X19
	0x0356897C MOV W2, W21

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_Bitrate(System.Int32 value)

Disassembly:
	0x03568980 LDP X20, X19, [X31 + 0x20]
	0x03568984 LDP X30, X21, [X31 + 0x10]

ISIL:
	001 Move [X0+16], W1
	002 Return 

Method: System.Int32 get_Width()

Disassembly:
	0x03568988 MOVZ W1, 0x38
	0x0356898C ADD X31, X31, 0x30

ISIL:
	001 Move W0, [X0+20]
	002 Return X0

Method: System.Void set_Width(System.Int32 value)

Disassembly:
	0x03568990 B 0x3567ED8
	0x03568994 ADRP X8, 0xB8B000

ISIL:
	001 Move [X0+20], W1
	002 Return 

Method: System.Int32 get_Height()

Disassembly:
	0x03568998 LDR X19, [X19 + 0x78]
	0x0356899C LDR X8, [X8 + 0x9D0]

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Void set_Height(System.Int32 value)

Disassembly:
	0x035689A0 MOVZ W1, 0x1
	0x035689A4 LDR X0, [X8]

ISIL:
	001 Move [X0+24], W1
	002 Return 

Method: System.Int32 get_FPS()

Disassembly:
	0x035689A8 BL 0x1C16D6C
	0x035689AC ADRP X8, 0xB8B000

ISIL:
	001 Move W0, [X0+28]
	002 Return X0

Method: System.Void set_FPS(System.Int32 value)

Disassembly:
	0x035689B0 LDR X8, [X8 + 0x758]
	0x035689B4 MOV X20, X0

ISIL:
	001 Move [X0+28], W1
	002 Return 

Method: System.Int32 get_KeyFrameInt()

Disassembly:
	0x035689B8 ADD X1, X31, 0xC
	0x035689BC STR W21, [X31 + 0xC]

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void set_KeyFrameInt(System.Int32 value)

Disassembly:
	0x035689C0 LDR X0, [X8]
	0x035689C4 BL 0x1C16E04

ISIL:
	001 Move [X0+32], W1
	002 Return 

Method: System.Object get_UserData()

Disassembly:
	0x035689C8 CBZ X20, 0x3568A84
	0x035689CC MOV X21, X0

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_UserData(System.Object value)

Disassembly:
	0x035689D0 CBZ X0, 0x35689E8
	0x035689D4 LDR X8, [X20]

ISIL:
	001 Move [X0+40], X1
	002 Return 

Method: System.Int32 get_FrameDurationSamples()

Disassembly:
	0x035689D8 MOV X0, X21
	0x035689DC LDR X1, [X8 + 0x40]
	0x035689E0 BL 0x1C16E00
	0x035689E4 CBZ X0, 0x3568A8C
	0x035689E8 LDR W8, [X20 + 0x18]
	0x035689EC CBZ W8, 0x3568A88
	0x035689F0 STR X21, [X20 + 0x20]
	0x035689F4 CBZ X19, 0x3568A84
	0x035689F8 ADRP X9, 0xB90000
	0x035689FC LDR X8, [X19]
	0x03568A00 LDR X9, [X9 + 0x348]
	0x03568A04 ADRP X10, 0xBCD000

ISIL:
	001 NotImplemented "Instruction LDRSW not yet implemented."
	002 NotImplemented "Instruction LDRSW not yet implemented."
	003 Move X10, 0x34DB
	004 NotImplemented "Instruction MOVK not yet implemented."
	005 NotImplemented "Instruction MOVK not yet implemented."
	006 NotImplemented "Instruction MOVK not yet implemented."
	007 Multiply X8, X9, X8
	008 NotImplemented "Instruction SMULH not yet implemented."
	009 Move X9, X8
	010 ShiftRight X9, 63
	011 And X9, X9, 0x7FFFFFFF
	012 Move X8, X8
	013 ShiftRight X8, 18
	014 And X8, X8, 0x7FFFFFFF
	015 Add W0, W8, W9
	016 Return X0

Method: System.Int32 get_FrameSize()

Disassembly:
	0x03568900 ADRP X20, 0xE77000
	0x03568904 LDRB W8, [X20 + 0xDF7]
	0x03568908 MOV W21, W1
	0x0356890C MOV X19, X0
	0x03568910 TBNZ X8, 0x0, 0x356894C
	0x03568914 ADRP X0, 0xB90000
	0x03568918 LDR X0, [X0 + 0x348]
	0x0356891C BL 0x1C16CF4
	0x03568920 ADRP X0, 0xB8B000
	0x03568924 LDR X0, [X0 + 0x758]
	0x03568928 BL 0x1C16CF4
	0x0356892C ADRP X0, 0xB8B000
	0x03568930 LDR X0, [X0 + 0x9D0]
	0x03568934 BL 0x1C16CF4

ISIL:
	001 NotImplemented "Instruction LDRSW not yet implemented."
	002 Move W11, [X0+8]
	003 Move W8, [X0+12]
	004 Move X10, 0x34DB
	005 NotImplemented "Instruction MOVK not yet implemented."
	006 Move X8, W8
	007 NotImplemented "Instruction MOVK not yet implemented."
	008 NotImplemented "Instruction MOVK not yet implemented."
	009 Multiply X8, X8, X9
	010 NotImplemented "Instruction SMULH not yet implemented."
	011 Move X9, X8
	012 ShiftRight X9, 63
	013 And X9, X9, 0x7FFFFFFF
	014 Move X8, X8
	015 ShiftRight X8, 18
	016 And X8, X8, 0x7FFFFFFF
	017 Add W8, W8, W9
	018 Multiply W0, W11, W8
	019 Return X0

