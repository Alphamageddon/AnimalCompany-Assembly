Type: Photon.Voice.OpusCodec/EncoderShort

Method: System.Void .ctor(Photon.Voice.VoiceInfo i, Photon.Voice.ILogger logger)

Disassembly:
	0x035572C4 STP X20, X19, [X31 + 0x30]
	0x035572C8 ADRP X20, 0xE88000
	0x035572CC ADRP X22, 0xBDE000
	0x035572D0 LDRB W8, [X20 + 0xD97]
	0x035572D4 LDR X22, [X22 + 0x4A8]
	0x035572D8 MOV X19, X0
	0x035572DC TBNZ X8, 0x0, 0x3557324
	0x035572E0 ADRP X0, 0xBDE000
	0x035572E4 LDR X0, [X0 + 0x4B0]
	0x035572E8 BL 0x1C16CF4
	0x035572EC ADRP X0, 0xBDE000
	0x035572F0 LDR X0, [X0 + 0x4B8]
	0x035572F4 BL 0x1C16CF4
	0x035572F8 ADRP X0, 0xBDE000
	0x035572FC LDR X0, [X0 + 0x4C0]
	0x03557300 BL 0x1C16CF4
	0x03557304 ADRP X0, 0xBDE000
	0x03557308 LDR X0, [X0 + 0x4C8]
	0x0355730C BL 0x1C16CF4
	0x03557310 ADRP X0, 0xBDE000
	0x03557314 LDR X0, [X0 + 0x4A8]
	0x03557318 BL 0x1C16CF4
	0x0355731C MOVZ W8, 0x1
	0x03557320 STRB W8, [X20 + 0xD97]
	0x03557324 LDR X0, [X22]
	0x03557328 LDR X19, [X19 + 0x10]
	0x0355732C LDR W8, [X0 + 0xE0]
	0x03557330 CBNZ W8, 0x355733C
	0x03557334 BL 0x1C16DFC
	0x03557338 LDR X0, [X22]
	0x0355733C LDR X8, [X0 + 0xB8]
	0x03557340 ADRP X24, 0xBDE000
	0x03557344 ADRP X23, 0xBDE000
	0x03557348 LDR X20, [X8 + 0x8]
	0x0355734C LDR X24, [X24 + 0x4B8]
	0x03557350 LDR X23, [X23 + 0x4B0]
	0x03557354 CBNZ X20, 0x35573A8
	0x03557358 LDR W8, [X0 + 0xE0]
	0x0355735C CBNZ W8, 0x3557368
	0x03557360 BL 0x1C16DFC
	0x03557364 LDR X0, [X22]
	0x03557368 ADRP X9, 0xBDE000
	0x0355736C LDR X8, [X0 + 0xB8]
	0x03557370 LDR X9, [X9 + 0x4C0]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], X30
	003 Move [X31+104], X23
	004 Move [X31+112], X22
	005 Move [X31+120], X21
	006 Move [X31+128], X20
	007 Move [X31+136], X19
	008 Move X23, 0xE89000
	009 Move X22, 0xBDF000
	010 Move W8, [X23+3468]
	011 Move X22, [X22+1048]
	012 Move X19, X2
	013 Move X21, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xBDF000
	020 Move X0, [X0+1056]
	021 Call 0x1C17CF4
	022 Move X0, 0xBDF000
	023 Move X0, [X0+1048]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+3468], W8
	027 Move V1, [X21+16]
	028 Move V0, [X21+32]
	029 Move V2, [X21]
	030 Move X0, [X22]
	031 Move X21, 0xBDF000
	032 Move [X31+16], V1
	033 Move [X31+24], V0
	034 Move [X31], V2
	035 Move W8, [X0+224]
	036 Move X21, [X21+1056]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move V0, [X31]
	041 Move V1, [X31+16]
	042 Move V2, [X31+2]
	043 Move X3, [X21]
	044 Add X1, X31, 48
	045 Move X0, X20
	046 Move X2, X19
	047 Move [X31+48], V0
	048 Move [X31+56], V1
	049 Move [X31+5], V2
	050 Call 0x2BA555C, X0, X1, X2
	051 Move X20, [X31+128]
	052 Move X19, [X31+136]
	053 Move X22, [X31+112]
	054 Move X21, [X31+120]
	055 Move X30, [X31+96]
	056 Move X23, [X31+104]
	057 Add X31, X31, 144
	058 Return 

Method: System.Void encodeTyped(System.Int16[] buf)

Disassembly:
	0x03557374 LDR X21, [X8]
	0x03557378 LDR X0, [X9]
	0x0355737C BL 0x1C16F10
	0x03557380 ADRP X8, 0xBDE000
	0x03557384 LDR X8, [X8 + 0x4C8]
	0x03557388 MOV X1, X21

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X30, [X31+16]
	006 Call OpusEncoder.Encode, X0, X1
	007 Return 
	008 Call 0x1C17F20

