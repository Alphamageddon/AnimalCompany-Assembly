Type: Photon.Voice.FrameBuffer

Method: System.Void .ctor(System.Byte[] array, System.Int32 offset, System.Int32 count, Photon.Voice.FrameFlags flags, System.Byte frameNum, System.IDisposable disposer)

Disassembly:
	0x03556C0C LDR W8, [X0 + 0xE0]
	0x03556C10 CBNZ W8, 0x3556C18
	0x03556C14 BL 0x1C16DFC
	0x03556C18 LDR X8, [X24 + 0x38]
	0x03556C1C LDR X0, [X8 + 0x10]
	0x03556C20 LDRB W8, [X0 + 0x135]
	0x03556C24 TBNZ X8, 0x0, 0x3556C2C
	0x03556C28 BL 0x1C5C684
	0x03556C2C CBZ X22, 0x3556E9C
	0x03556C30 ADRP X10, 0xBA2000
	0x03556C34 LDR X9, [X0 + 0xB8]

ISIL:
	001 Move W8, 1
	002 Move [X0], X1
	003 Move [X0+8], W2
	004 Move [X0+12], W3
	005 Move [X0+49], W4
	006 Move [X0+50], W5
	007 Move [X0+16], X6
	008 Move [X0+24], W31
	009 Move [X0+32], X31
	010 Move [X0+40], X31
	011 Move [X0+28], W8
	012 Move [X0+48], W31
	013 Return 

Method: System.Void .ctor(System.Byte[] array, Photon.Voice.FrameFlags flags, System.Byte frameNum)

Disassembly:
	0x03556C38 LDR X8, [X22]
	0x03556C3C LDR X10, [X10 + 0x348]
	0x03556C40 LDR X24, [X9]
	0x03556C44 LDRH W9, [X8 + 0x12E]
	0x03556C48 LDR X1, [X10]
	0x03556C4C CBZ X9, 0x3556C70
	0x03556C50 LDR X10, [X8 + 0xB0]
	0x03556C54 ADD X10, X10, 0x8
	0x03556C58 LDUR X11, [X10 - 0x8]
	0x03556C5C CMP X11, X1
	0x03556C60 B.EQ 0x3556C80
	0x03556C64 SUBS X9, X9, 0x1
	0x03556C68 ADD X10, X10, 0x10
	0x03556C6C B.NE 0x3556C58
	0x03556C70 MOVZ W2, 0x1
	0x03556C74 MOV X0, X22

ISIL:
	001 Move [X0], X1
	002 Move [X0+8], W31
	003 Compare X1, 0
	004 JumpIfEqual {6}
	005 Move W8, [X1+24]
	006 Move W8, W31
	007 Move [X0+12], W8
	008 Move W8, 1
	009 Move [X0+49], W2
	010 Move [X0+50], W3
	011 Move [X0+16], X31
	012 Move [X0+24], W31
	013 Move [X0+32], X31
	014 Move [X0+40], X31
	015 Move [X0+28], W8
	016 Move [X0+48], W31
	017 Return 

Method: System.Void .ctor(Photon.Voice.FrameBuffer from, System.Int32 offset, System.Int32 count, Photon.Voice.FrameFlags flags, System.Byte frameNum)

Disassembly:
	0x03556C78 BL 0x1C5C788
	0x03556C7C B 0x3556C90
	0x03556C80 LDR W9, [X10]
	0x03556C84 ADD W9, W9, 0x1
	0x03556C88 ADD X8, X8, W9, 0x4, SXTW
	0x03556C8C ADD X0, X8, 0x138
	0x03556C90 LDP X8, X4, [X0]
	0x03556C94 MOVZ W1, 0x3
	0x03556C98 MOV X0, X22
	0x03556C9C MOV X2, X23

ISIL:
	001 Move X8, [X1+48]
	002 Move V2, [X1+16]
	003 Move V0, [X1+32]
	004 Move V1, [X1]
	005 Move [X0+48], X8
	006 Move [X0+16], V2
	007 Move [X0+24], V0
	008 Move [X0], V1
	009 Move [X0+8], W2
	010 Move [X0+12], W3
	011 Move [X0+49], W4
	012 Move [X0+50], W5
	013 Return 

Method: System.IntPtr get_Ptr()

Disassembly:
	0x0355506C LDP X24, X23, [X31 + 0x10]
	0x03555070 STP X8, X20, [X21 + 0x8]
	0x03555074 LDP X20, X19, [X31 + 0x30]
	0x03555078 LDP X22, X21, [X31 + 0x20]
	0x0355507C LDR X30, [X31], #0x40
	0x03555080 RET
	0x03555084 STR X30, [X31 - 0x40]!
	0x03555088 STP X24, X23, [X31 + 0x10]
	0x0355508C STP X22, X21, [X31 + 0x20]
	0x03555090 STP X20, X19, [X31 + 0x30]
	0x03555094 ADRP X23, 0xE8A000
	0x03555098 ADRP X24, 0xBC6000
	0x0355509C LDRB W8, [X23 + 0xD75]
	0x035550A0 LDR X24, [X24 + 0x5F8]
	0x035550A4 MOV X19, X3
	0x035550A8 MOV X21, X2
	0x035550AC MOV X22, X1
	0x035550B0 MOV X20, X0
	0x035550B4 TBNZ X8, 0x0, 0x35550CC
	0x035550B8 ADRP X0, 0xBC6000
	0x035550BC LDR X0, [X0 + 0x5F8]
	0x035550C0 BL 0x1C16CF4
	0x035550C4 MOVZ W8, 0x1
	0x035550C8 STRB W8, [X23 + 0xD75]
	0x035550CC LDR X0, [X24]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+48]
	005 Move X19, X0
	006 Compare W8, 0
	007 JumpIfNotEqual {25}
	008 Move X0, [X19]
	009 Compare X0, 0
	010 JumpIfEqual {25}
	011 Move W1, 3
	012 Move X2, X31
	013 Call GCHandle.Alloc, X0, X1
	014 Move X20, X19
	015 Move [X20+32], X0
	016 Move X0, X20
	017 Move X1, X31
	018 Call GCHandle.AddrOfPinnedObject, X0
	019 NotImplemented "Instruction LDUR not yet implemented."
	020 Move X2, X31
	021 Call IntPtr.Add, X0, X1
	022 Move W8, 1
	023 Move [X20+8], X0
	024 Move [X20+16], W8
	025 Move X0, [X19+40]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return X0

Method: System.Void Retain()

Disassembly:
	0x03556CA0 MOV X3, X24
	0x03556CA4 BLR X8
	0x03556CA8 TBZ X21, 0x0, 0x3556DB4
	0x03556CAC LDR X0, [X25]

ISIL:
	001 Move W8, [X0+28]
	002 Add W8, W8, 1
	003 Move [X0+28], W8
	004 Return 

Method: System.Void Release()

Disassembly:
	0x03556CB0 ADD X21, X20, 0x20
	0x03556CB4 LDR W8, [X0 + 0xE0]
	0x03556CB8 CBNZ W8, 0x3556CC0
	0x03556CBC BL 0x1C16DFC
	0x03556CC0 LDR X8, [X21]
	0x03556CC4 CBZ X8, 0x3556E64
	0x03556CC8 LDR X0, [X25]
	0x03556CCC LDR X22, [X20 + 0x10]
	0x03556CD0 LDR W8, [X0 + 0xE0]
	0x03556CD4 CBNZ W8, 0x3556CDC
	0x03556CD8 BL 0x1C16DFC
	0x03556CDC LDR W8, [X20 + 0x2C]
	0x03556CE0 ADD X0, X31, 0xC
	0x03556CE4 MOV X1, X31
	0x03556CE8 STR W8, [X31 + 0xC]
	0x03556CEC BL 0x337B6E0
	0x03556CF0 ADRP X8, 0xBDF000
	0x03556CF4 LDR X8, [X8 + 0x470]
	0x03556CF8 MOV X1, X0
	0x03556CFC MOV X2, X31
	0x03556D00 LDR X8, [X8]
	0x03556D04 MOV X0, X8
	0x03556D08 BL 0x321B938
	0x03556D0C ADRP X8, 0xB9D000
	0x03556D10 LDR X8, [X8 + 0x9C8]
	0x03556D14 MOV X23, X0
	0x03556D18 LDR X24, [X8]
	0x03556D1C LDR X8, [X24 + 0x38]
	0x03556D20 CBNZ X8, 0x3556D30

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xE8A000
	005 Move W8, [X20+3460]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xBC7000
	012 Move X0, [X0+3608]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3460], W8
	016 Move W8, [X19+28]
	017 Subtract W8, W8, 1
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move [X19+28], W8
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return 
	024 Move X8, 0xBC7000
	025 Move X8, [X8+3608]
	026 Move X0, [X8]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]

Method: System.Void Dispose()

Disassembly:
	0x03556D24 MOV X0, X24
	0x03556D28 BL 0x1C5C6E0
	0x03556D2C LDR X8, [X24 + 0x38]
	0x03556D30 LDR X0, [X8 + 0x10]
	0x03556D34 LDRB W8, [X0 + 0x135]
	0x03556D38 TBNZ X8, 0x0, 0x3556D40
	0x03556D3C BL 0x1C5C684
	0x03556D40 LDR W8, [X0 + 0xE0]
	0x03556D44 CBNZ W8, 0x3556D4C
	0x03556D48 BL 0x1C16DFC
	0x03556D4C LDR X8, [X24 + 0x38]
	0x03556D50 LDR X0, [X8 + 0x10]
	0x03556D54 LDRB W8, [X0 + 0x135]
	0x03556D58 TBNZ X8, 0x0, 0x3556D60
	0x03556D5C BL 0x1C5C684
	0x03556D60 CBZ X22, 0x3556E9C
	0x03556D64 ADRP X10, 0xBA2000
	0x03556D68 LDR X9, [X0 + 0xB8]
	0x03556D6C LDR X8, [X22]
	0x03556D70 LDR X10, [X10 + 0x348]
	0x03556D74 LDR X24, [X9]
	0x03556D78 LDRH W9, [X8 + 0x12E]
	0x03556D7C LDR X1, [X10]
	0x03556D80 CBZ X9, 0x3556DA4
	0x03556D84 LDR X10, [X8 + 0xB0]
	0x03556D88 ADD X10, X10, 0x8
	0x03556D8C LDUR X11, [X10 - 0x8]
	0x03556D90 CMP X11, X1
	0x03556D94 B.EQ 0x3556DBC
	0x03556D98 SUBS X9, X9, 0x1
	0x03556D9C ADD X10, X10, 0x10
	0x03556DA0 B.NE 0x3556D8C
	0x03556DA4 MOVZ W2, 0x1
	0x03556DA8 MOV X0, X22
	0x03556DAC BL 0x1C5C788
	0x03556DB0 B 0x3556DCC
	0x03556DB4 MOV W0, W31
	0x03556DB8 B 0x3556E84
	0x03556DBC LDR W9, [X10]
	0x03556DC0 ADD W9, W9, 0x1
	0x03556DC4 ADD X8, X8, W9, 0x4, SXTW
	0x03556DC8 ADD X0, X8, 0x138
	0x03556DCC LDP X8, X4, [X0]
	0x03556DD0 MOVZ W1, 0x3
	0x03556DD4 MOV X0, X22
	0x03556DD8 MOV X2, X23
	0x03556DDC MOV X3, X24
	0x03556DE0 BLR X8
	0x03556DE4 LDR X22, [X20 + 0x18]
	0x03556DE8 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xE8A000
	005 Move W8, [X20+3461]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xB9E000
	012 Move X0, [X0+3584]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3461], W8
	016 Move W8, [X19+48]
	017 Compare W8, 0
	018 JumpIfEqual {23}
	019 Add X0, X19, 32
	020 Move X1, X31
	021 Call GCHandle.Free, X0
	022 Move [X19+48], W31
	023 Move X20, [X19+16]
	024 Compare X20, 0
	025 JumpIfEqual {54}
	026 Move W8, [X19+24]
	027 Compare W8, 0
	028 JumpIfNotEqual {54}
	029 Move X10, 0xB9E000
	030 Move X8, [X20]
	031 Move X10, [X10+3584]
	032 NotImplemented "Instruction LDRH not yet implemented."
	033 Move X1, [X10]
	034 Compare X9, 0
	035 JumpIfEqual {42}
	036 Move X10, [X8+176]
	037 Add X10, X10, 8
	038 NotImplemented "Instruction LDUR not yet implemented."
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Subtract X9, X9, 1
	041 Add X10, X10, 16
	042 Move X0, X20
	043 Move W2, W31
	044 Call 0x1C5D788
	045 NotImplemented "Instruction LDRSW not yet implemented."
	046 Add X8, X8, X9
	047 Add X0, X8, 312
	048 Move X8, [X0]
	049 Move X1, [X0+8]
	050 Move X0, X20
	051 NotImplemented "Instruction BLR not yet implemented."
	052 Move W8, 1
	053 Move [X19+24], W8
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X30, [X31+32]
	057 Return 

Method: System.Byte[] get_Array()

Disassembly:
	0x03556DEC STRB W8, [X20 + 0x58]
	0x03556DF0 CBZ X22, 0x3556E9C

ISIL:
	001 Move X0, [X0]
	002 Return X0

Method: System.Int32 get_Length()

Disassembly:
	0x03556DF4 ADRP X10, 0xBDF000
	0x03556DF8 LDR X8, [X22]

ISIL:
	001 Move W0, [X0+12]
	002 Return X0

Method: System.Int32 get_Offset()

Disassembly:
	0x03556DFC LDR X10, [X10 + 0x468]
	0x03556E00 LDRH W9, [X8 + 0x12E]

ISIL:
	001 Move W0, [X0+8]
	002 Return X0

Method: Photon.Voice.FrameFlags get_Flags()

Disassembly:
	0x03556E04 LDR X1, [X10]
	0x03556E08 CBZ X9, 0x3556E2C

ISIL:
	001 Move W0, [X0+49]
	002 Return X0

Method: System.Byte get_FrameNum()

Disassembly:
	0x03556E0C LDR X10, [X8 + 0xB0]
	0x03556E10 ADD X10, X10, 0x8

ISIL:
	001 Move W0, [X0+50]
	002 Return X0

Method: System.Boolean get_IsFEC()

Disassembly:
	0x03556E14 LDUR X11, [X10 - 0x8]
	0x03556E18 CMP X11, X1
	0x03556E1C B.EQ 0x3556E3C
	0x03556E20 SUBS X9, X9, 0x1
	0x03556E24 ADD X10, X10, 0x10
	0x03556E28 B.NE 0x3556E14
	0x03556E2C MOVZ W2, 0x2
	0x03556E30 MOV X0, X22
	0x03556E34 BL 0x1C5C788
	0x03556E38 B 0x3556E4C
	0x03556E3C LDR W9, [X10]
	0x03556E40 ADD W9, W9, 0x2
	0x03556E44 ADD X8, X8, W9, 0x4, SXTW
	0x03556E48 ADD X0, X8, 0x138
	0x03556E4C LDP X8, X2, [X0]
	0x03556E50 MOV X0, X22
	0x03556E54 MOV X1, X21
	0x03556E58 BLR X8
	0x03556E5C MOV X0, X21
	0x03556E60 BL 0x3555CB0
	0x03556E64 LDR X0, [X25]
	0x03556E68 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xE8A000
	006 Move X21, 0xBC7000
	007 Move W8, [X20+3462]
	008 Move X21, [X21+3608]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xBC7000
	015 Move X0, [X0+3608]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3462], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move W8, [X19+49]
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move W0, W8
	028 ShiftRight W0, 6
	029 And W0, W0, 63
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0

Method: System.Boolean get_IsConfig()

Disassembly:
	0x03556E6C CBNZ W8, 0x3556E74
	0x03556E70 BL 0x1C16DFC
	0x03556E74 LDR X8, [X19]
	0x03556E78 LDR X9, [X21]
	0x03556E7C CMP X8, X9
	0x03556E80 CSET W0, NE
	0x03556E84 LDP X20, X19, [X31 + 0x40]
	0x03556E88 LDP X22, X21, [X31 + 0x30]
	0x03556E8C LDP X24, X23, [X31 + 0x20]
	0x03556E90 LDP X30, X25, [X31 + 0x10]
	0x03556E94 ADD X31, X31, 0x50
	0x03556E98 RET
	0x03556E9C BL 0x1C16F20
	0x03556EA0 STP X30, X21, [X31 - 0x20]!
	0x03556EA4 STP X20, X19, [X31 + 0x10]
	0x03556EA8 ADRP X20, 0xE89000
	0x03556EAC ADRP X21, 0xBC6000
	0x03556EB0 LDRB W8, [X20 + 0xD94]
	0x03556EB4 LDR X21, [X21 + 0xE18]
	0x03556EB8 MOV X19, X0
	0x03556EBC TBNZ X8, 0x0, 0x3556ED4
	0x03556EC0 ADRP X0, 0xBC6000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xE8A000
	006 Move X21, 0xBC7000
	007 Move W8, [X20+3463]
	008 Move X21, [X21+3608]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xBC7000
	015 Move X0, [X0+3608]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3463], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move W8, [X19+49]
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 And W0, W8, 1
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0

Method: System.Boolean get_IsKeyframe()

Disassembly:
	0x03556EC4 LDR X0, [X0 + 0xE18]
	0x03556EC8 BL 0x1C16CF4
	0x03556ECC MOVZ W8, 0x1
	0x03556ED0 STRB W8, [X20 + 0xD94]
	0x03556ED4 LDR X0, [X21]
	0x03556ED8 LDR W8, [X0 + 0xE0]
	0x03556EDC CBNZ W8, 0x3556EE4
	0x03556EE0 BL 0x1C16DFC
	0x03556EE4 ADD X0, X19, 0x20
	0x03556EE8 LDP X20, X19, [X31 + 0x10]
	0x03556EEC LDP X30, X21, [X31], #0x20
	0x03556EF0 B 0x3555CB0
	0x03556EF4 STR X30, [X31 - 0x20]!
	0x03556EF8 STP X20, X19, [X31 + 0x10]
	0x03556EFC MOV W19, W1
	0x03556F00 MOV X1, X31
	0x03556F04 MOV X20, X0
	0x03556F08 BL 0x33BDD8C
	0x03556F0C STR W19, [X20 + 0x20]
	0x03556F10 LDP X20, X19, [X31 + 0x10]
	0x03556F14 LDR X30, [X31], #0x20
	0x03556F18 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xE8A000
	006 Move X21, 0xBC7000
	007 Move W8, [X20+3464]
	008 Move X21, [X21+3608]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xBC7000
	015 Move X0, [X0+3608]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3464], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move W8, [X19+49]
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move W0, W8
	028 ShiftRight W0, 1
	029 And W0, W0, 1
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0

Method: System.String ToString()

Disassembly:
	0x03556F1C STR X30, [X31 - 0x20]!
	0x03556F20 STP X20, X19, [X31 + 0x10]
	0x03556F24 ADRP X20, 0xE89000
	0x03556F28 LDRB W8, [X20 + 0xD95]
	0x03556F2C MOV X19, X0
	0x03556F30 TBNZ X8, 0x0, 0x3556F60
	0x03556F34 ADRP X0, 0xB9F000
	0x03556F38 LDR X0, [X0 + 0x9B8]
	0x03556F3C BL 0x1C16CF4
	0x03556F40 ADRP X0, 0xBC5000
	0x03556F44 LDR X0, [X0 + 0x820]
	0x03556F48 BL 0x1C16CF4
	0x03556F4C ADRP X0, 0xBA5000
	0x03556F50 LDR X0, [X0 + 0x708]
	0x03556F54 BL 0x1C16CF4
	0x03556F58 MOVZ W8, 0x1
	0x03556F5C STRB W8, [X20 + 0xD95]
	0x03556F60 LDR X8, [X19 + 0x28]
	0x03556F64 CBNZ X8, 0x3556FBC
	0x03556F68 ADRP X8, 0xBC5000
	0x03556F6C LDR W1, [X19 + 0x20]
	0x03556F70 LDR X8, [X8 + 0x820]
	0x03556F74 LDR X0, [X8]
	0x03556F78 BL 0x1C16D6C
	0x03556F7C STR X0, [X19 + 0x10]
	0x03556F80 ADRP X8, 0xB9F000
	0x03556F84 LDR W1, [X19 + 0x20]
	0x03556F88 LDR X8, [X8 + 0x9B8]
	0x03556F8C LDR X0, [X8]
	0x03556F90 BL 0x1C16D6C
	0x03556F94 STR X0, [X19 + 0x18]
	0x03556F98 ADRP X8, 0xBA5000
	0x03556F9C LDR X8, [X8 + 0x708]
	0x03556FA0 LDR X0, [X8]
	0x03556FA4 LDR W8, [X0 + 0xE0]
	0x03556FA8 CBNZ W8, 0x3556FB0
	0x03556FAC BL 0x1C16DFC
	0x03556FB0 MOV X0, X31
	0x03556FB4 BL 0x364BF60
	0x03556FB8 STR X0, [X19 + 0x28]
	0x03556FBC LDP X20, X19, [X31 + 0x10]
	0x03556FC0 LDR X30, [X31], #0x20
	0x03556FC4 RET
	0x03556FC8 STP X30, X21, [X31 - 0x20]!
	0x03556FCC STP X20, X19, [X31 + 0x10]
	0x03556FD0 LDR X8, [X0 + 0x28]
	0x03556FD4 CBZ X8, 0x3557074
	0x03556FD8 LDRB W9, [X0 + 0x38]
	0x03556FDC MOV W20, W2
	0x03556FE0 MOV X19, X0
	0x03556FE4 MOV W21, W1
	0x03556FE8 CBZ W9, 0x3557004
	0x03556FEC MOV X0, X8
	0x03556FF0 MOV X1, X31
	0x03556FF4 BL 0x364C19C
	0x03556FF8 LDR X8, [X19 + 0x28]
	0x03556FFC STR X0, [X19 + 0x30]
	0x03557000 CBZ X8, 0x3557080
	0x03557004 MOV X0, X8
	0x03557008 MOV X1, X31
	0x0355700C BL 0x364C19C
	0x03557010 LDR X10, [X19 + 0x10]
	0x03557014 CBZ X10, 0x3557080
	0x03557018 LDRSW X8, [X19 + 0x24]
	0x0355701C LDR W9, [X10 + 0x18]
	0x03557020 CMP W8, W9
	0x03557024 B.CS 0x3557084
	0x03557028 LDR W11, [X19 + 0x30]
	0x0355702C ADD X10, X10, X8, 0x1, LSL
	0x03557030 SUB W11, W0, W11
	0x03557034 STRH W11, [X10 + 0x20]
	0x03557038 LDR X10, [X19 + 0x18]
	0x0355703C CBZ X10, 0x3557080
	0x03557040 LDR W11, [X10 + 0x18]
	0x03557044 CMP W8, W11
	0x03557048 B.CS 0x3557084
	0x0355704C ADD W13, W8, 0x1
	0x03557050 CMP W13, W9
	0x03557054 AND W11, W20, 0x1
	0x03557058 AND W12, W21, 0x1
	0x0355705C ADD X10, X10, X8
	0x03557060 CSINC W8, W31, W8, EQ
	0x03557064 STRB W12, [X10 + 0x20]
	0x03557068 STR X0, [X19 + 0x30]
	0x0355706C STR W8, [X19 + 0x24]
	0x03557070 STRB W11, [X19 + 0x38]
	0x03557074 LDP X20, X19, [X31 + 0x10]
	0x03557078 LDP X30, X21, [X31], #0x20
	0x0355707C RET
	0x03557080 BL 0x1C16F20
	0x03557084 BL 0x1C16F28
	0x03557088 STR X30, [X31 - 0x40]!
	0x0355708C STP X24, X23, [X31 + 0x10]
	0x03557090 STP X22, X21, [X31 + 0x20]
	0x03557094 STP X20, X19, [X31 + 0x30]
	0x03557098 ADRP X20, 0xE88000
	0x0355709C LDRB W8, [X20 + 0xD96]
	0x035570A0 MOV X19, X0
	0x035570A4 TBNZ X8, 0x0, 0x3557128
	0x035570A8 ADRP X0, 0xBDE000
	0x035570AC LDR X0, [X0 + 0x480]
	0x035570B0 BL 0x1C16CF4
	0x035570B4 ADRP X0, 0xB9C000
	0x035570B8 LDR X0, [X0 + 0xEB8]
	0x035570BC BL 0x1C16CF4
	0x035570C0 ADRP X0, 0xBDE000
	0x035570C4 LDR X0, [X0 + 0x488]
	0x035570C8 BL 0x1C16CF4
	0x035570CC ADRP X0, 0xBDE000
	0x035570D0 LDR X0, [X0 + 0x490]
	0x035570D4 BL 0x1C16CF4
	0x035570D8 ADRP X0, 0xB9C000
	0x035570DC LDR X0, [X0 + 0xAC8]
	0x035570E0 BL 0x1C16CF4
	0x035570E4 ADRP X0, 0xB9C000
	0x035570E8 LDR X0, [X0 + 0xDD8]
	0x035570EC BL 0x1C16CF4
	0x035570F0 ADRP X0, 0xB9C000
	0x035570F4 LDR X0, [X0 + 0x838]
	0x035570F8 BL 0x1C16CF4
	0x035570FC ADRP X0, 0xBDE000
	0x03557100 LDR X0, [X0 + 0x498]
	0x03557104 BL 0x1C16CF4
	0x03557108 ADRP X0, 0xB9E000
	0x0355710C LDR X0, [X0 + 0x3A0]
	0x03557110 BL 0x1C16CF4
	0x03557114 ADRP X0, 0xBDE000
	0x03557118 LDR X0, [X0 + 0x4A0]
	0x0355711C BL 0x1C16CF4
	0x03557120 MOVZ W8, 0x1
	0x03557124 STRB W8, [X20 + 0xD96]
	0x03557128 LDR X8, [X19 + 0x28]
	0x0355712C CBZ X8, 0x3557290
	0x03557130 ADRP X8, 0xBDE000
	0x03557134 LDR X8, [X8 + 0x488]
	0x03557138 ADRP X21, 0xBDE000
	0x0355713C LDR X21, [X21 + 0x490]
	0x03557140 ADRP X22, 0xBDE000
	0x03557144 LDR X0, [X8]
	0x03557148 ADRP X23, 0xB9C000
	0x0355714C ADRP X24, 0xB9C000
	0x03557150 LDR X20, [X19 + 0x10]
	0x03557154 LDR X22, [X22 + 0x480]
	0x03557158 LDR X23, [X23 + 0xEB8]
	0x0355715C LDR X24, [X24 + 0xAC8]
	0x03557160 BL 0x1C16F10
	0x03557164 LDR X2, [X21]
	0x03557168 MOV X1, X19
	0x0355716C MOV X3, X31
	0x03557170 MOV X21, X0
	0x03557174 BL 0x2D3812C
	0x03557178 LDR X2, [X22]
	0x0355717C MOV X0, X20
	0x03557180 MOV X1, X21
	0x03557184 BL 0x21CD42C
	0x03557188 LDR X1, [X23]
	0x0355718C BL 0x21D577C
	0x03557190 LDR X8, [X24]
	0x03557194 MOV X21, X0
	0x03557198 MOVZ W1, 0x6
	0x0355719C MOV X0, X8
	0x035571A0 BL 0x1C16D6C

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X20, 0xE8A000
	009 Move W8, [X20+3465]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {47}
	015 Move X0, 0xBC7000
	016 Move X0, [X0+3608]
	017 Call 0x1C17CF4
	018 Move X0, 0xBE0000
	019 Move X0, [X0+1000]
	020 Call 0x1C17CF4
	021 Move X0, 0xB9E000
	022 Move X0, [X0+2760]
	023 Call 0x1C17CF4
	024 Move X0, 0xB9F000
	025 Move X0, [X0+2568]
	026 Call 0x1C17CF4
	027 Move X0, 0xB9E000
	028 Move X0, [X0+3544]
	029 Call 0x1C17CF4
	030 Move X0, 0xB9E000
	031 Move X0, [X0+2096]
	032 Call 0x1C17CF4
	033 Move X0, 0xBE0000
	034 Move X0, [X0+1008]
	035 Call 0x1C17CF4
	036 Move X0, 0xBE0000
	037 Move X0, [X0+1016]
	038 Call 0x1C17CF4
	039 Move X0, 0xB9E000
	040 Move X0, [X0+2440]
	041 Call 0x1C17CF4
	042 Move X0, 0xBE0000
	043 Move X0, [X0+1024]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X20+3465], W8
	047 Move X8, [X19]
	048 Compare X8, 0
	049 JumpIfEqual {126}
	050 Move X21, 0xBC7000
	051 Move X21, [X21+3608]
	052 Move X20, 0xB9E000
	053 Move X0, [X21]
	054 Move W8, [X0+224]
	055 Move X20, [X20+2760]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move X0, [X20]
	060 Move W22, [X19+49]
	061 Move W1, 8
	062 Call 0x1C17D6C
	063 Compare X0, 0
	064 JumpIfEqual {170}
	065 Move W8, [X0+24]
	066 Move X20, X0
	067 Compare W8, 0
	068 JumpIfEqual {169}
	069 Move X8, 0xB9E000
	070 Move X8, [X8+2568]
	071 Add X0, X31, 28
	072 Move X1, X31
	073 Move X8, [X8]
	074 Move [X20+32], X8
	075 Move W8, [X19+50]
	076 Move [X31+28], W8
	077 Call Byte.ToString, X0
	078 Move W8, [X20+24]
	079 NotImplemented "Instruction CMP not yet implemented."
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move [X20+40], X0
	082 Move X8, 0xB9D000
	083 Move X8, [X8+3544]
	084 Move X9, 0xBDF000
	085 And W23, W22, 48
	086 Add X0, X31, 0
	087 Move X8, [X8]
	088 Move X9, [X9+1000]
	089 Move X1, X31
	090 Move [X20+48], X8
	091 Move X8, [X9]
	092 Move TEMP, 0
	093 Not TEMP
	094 Move X9, TEMP
	095 Move [X31+16], W23
	096 Move [X31], X8
	097 Move [X31+8], X9
	098 Call Enum.ToString, X0
	099 Move W8, [X20+24]
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X22, 0xB9D000
	102 Move X22, [X22+2440]
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Move [X20+56], X0
	105 Move X8, [X19]
	106 Compare X8, 0
	107 JumpIfEqual {170}
	108 Move W10, [X19+8]
	109 Move W9, [X19+12]
	110 Move W11, [X8+24]
	111 Add W9, W9, W10
	112 Subtract W9, W9, 1
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Add X8, X8, W9
	115 Add X0, X8, 32
	116 Move X1, X31
	117 Call Byte.ToString, X0
	118 Move X8, 0xBDF000
	119 Move X8, [X8+1016]
	120 Move X1, X0
	121 Move X2, X31
	122 Move X8, [X8]
	123 Move X0, X8
	124 Call String.Concat, X0, X1
	125 Move W8, [X20+24]
	126 Move X8, 0xB9D000
	127 Move X8, [X8+2096]
	128 Move X0, [X8]
	129 Move X0, [X22]
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Move [X20+64], X0
	132 Move X0, [X21]
	133 Move W8, [X0+224]
	134 Compare W8, 0
	135 JumpIfNotEqual {137}
	136 Call 0x1C17DFC
	137 Move X0, X19
	138 Call FrameBuffer.get_IsFEC, X0
	139 Move W8, [X20+24]
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Move X9, 0xBDF000
	142 Move X9, [X9+1008]
	143 And W31, W0, 1
	144 NotImplemented "Instruction CSEL not yet implemented."
	145 Move X9, [X9]
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Move [X20+72], X9
	148 Move X8, 0xBDF000
	149 Move X8, [X8+1024]
	150 Add X0, X19, 28
	151 Move X1, X31
	152 Move X8, [X8]
	153 Move [X20+80], X8
	154 Call Int32.ToString, X0
	155 Move W8, [X20+24]
	156 NotImplemented "Instruction CMP not yet implemented."
	157 Move [X20+88], X0
	158 Move X0, X20
	159 Move X1, X31
	160 Call String.Concat, X0
	161 Move X20, [X31+64]
	162 Move X19, [X31+72]
	163 Move X22, [X31+48]
	164 Move X21, [X31+56]
	165 Move X30, [X31+32]
	166 Move X23, [X31+40]
	167 Add X31, X31, 80
	168 Return X0
	169 Call 0x1C17F28
	170 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x035571A4 CBZ X0, 0x35572B4
	0x035571A8 LDR W8, [X0 + 0x18]
	0x035571AC MOV X20, X0
	0x035571B0 CBZ W8, 0x35572B0
	0x035571B4 ADRP X8, 0xBDE000
	0x035571B8 LDR X8, [X8 + 0x498]
	0x035571BC MOV X0, X19
	0x035571C0 LDR X8, [X8]
	0x035571C4 STR X8, [X20 + 0x20]
	0x035571C8 BL 0x35572B8
	0x035571CC STR W0, [X31 + 0xC]
	0x035571D0 ADD X0, X31, 0xC
	0x035571D4 MOV X1, X31
	0x035571D8 BL 0x337B6E0
	0x035571DC LDR W8, [X20 + 0x18]
	0x035571E0 CMP W8, 0x1
	0x035571E4 B.LS 0x35572B0
	0x035571E8 CMP W8, 0x2
	0x035571EC STR X0, [X20 + 0x28]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xE89000
	005 Move X20, 0xBC6000
	006 Move W8, [X19+3466]
	007 Move X20, [X20+3608]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xBC6000
	013 Move X0, [X0+3608]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3466], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 NotImplemented "Instruction MVNI not yet implemented."
	021 Move X8, [X8+184]
	022 Move [X8], V0
	023 Move X30, [X31+32]
	024 Return 

