Type: POpusCodec.OpusEncoder

Method: POpusCodec.Enums.SamplingRate get_InputSamplingRate()

Disassembly:
	0x03552688 ADRP X23, 0xE8D000
	0x0355268C LDRB W8, [X23 + 0xD62]

ISIL:
	001 Move W0, [X0+28]
	002 Return X0

Method: POpusCodec.Enums.Channels get_InputChannels()

Disassembly:
	0x03552690 MOV X19, X3
	0x03552694 MOV W22, W2

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void set_EncoderDelay(POpusCodec.Enums.Delay value)

Disassembly:
	0x03552698 MOV X20, X1
	0x0355269C MOV X21, X0
	0x035526A0 TBNZ X8, 0x0, 0x35526D0
	0x035526A4 ADRP X0, 0xBA1000
	0x035526A8 LDR X0, [X0 + 0x758]
	0x035526AC BL 0x1C16CF4
	0x035526B0 ADRP X0, 0xBA1000
	0x035526B4 LDR X0, [X0 + 0x9D0]
	0x035526B8 BL 0x1C16CF4
	0x035526BC ADRP X0, 0xBE3000
	0x035526C0 LDR X0, [X0 + 0x2A8]
	0x035526C4 BL 0x1C16CF4
	0x035526C8 MOVZ W8, 0x1
	0x035526CC STRB W8, [X23 + 0xD62]
	0x035526D0 MOV X0, X21
	0x035526D4 MOV X1, X31
	0x035526D8 MOV X2, X31
	0x035526DC BL 0x33BE5B0
	0x035526E0 TBNZ X0, 0x0, 0x3552804
	0x035526E4 CBZ X19, 0x35527FC
	0x035526E8 LDR W4, [X19 + 0x18]
	0x035526EC MOV X0, X21
	0x035526F0 MOV X1, X20
	0x035526F4 MOV W2, W22
	0x035526F8 MOV X3, X19
	0x035526FC BL 0x355308C
	0x03552700 MOV W20, W0
	0x03552704 TBZ X0, 0x1F, 0x35527E4
	0x03552708 ADRP X8, 0xBA1000
	0x0355270C LDR X8, [X8 + 0x9D0]
	0x03552710 MOVZ W1, 0x3
	0x03552714 LDR X0, [X8]
	0x03552718 BL 0x1C16D6C
	0x0355271C CBZ X0, 0x35527FC
	0x03552720 ADRP X23, 0xBE3000
	0x03552724 LDR X23, [X23 + 0x2A8]
	0x03552728 MOV X21, X0
	0x0355272C LDR X0, [X23]
	0x03552730 CBZ X0, 0x3552744
	0x03552734 LDR X8, [X21]
	0x03552738 LDR X1, [X8 + 0x40]
	0x0355273C BL 0x1C16E00
	0x03552740 CBZ X0, 0x355284C
	0x03552744 LDR W8, [X21 + 0x18]
	0x03552748 CBZ W8, 0x3552800
	0x0355274C LDR X8, [X23]
	0x03552750 ADRP X23, 0xBA1000
	0x03552754 ADD X1, X31, 0xC
	0x03552758 STR X8, [X21 + 0x20]
	0x0355275C LDR X23, [X23 + 0x758]
	0x03552760 STR W22, [X31 + 0xC]
	0x03552764 LDR X0, [X23]
	0x03552768 BL 0x1C16E04
	0x0355276C MOV X22, X0
	0x03552770 CBZ X0, 0x3552788
	0x03552774 LDR X8, [X21]
	0x03552778 MOV X0, X22
	0x0355277C LDR X1, [X8 + 0x40]
	0x03552780 BL 0x1C16E00
	0x03552784 CBZ X0, 0x355284C
	0x03552788 LDR W8, [X21 + 0x18]
	0x0355278C CMP W8, 0x1
	0x03552790 B.LS 0x3552800
	0x03552794 STR X22, [X21 + 0x28]
	0x03552798 LDR X8, [X19 + 0x18]
	0x0355279C LDR X0, [X23]
	0x035527A0 ADD X1, X31, 0x8
	0x035527A4 STR W8, [X31 + 0x8]
	0x035527A8 BL 0x1C16E04

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 NotImplemented "Instruction MRS not yet implemented."
	009 Move X8, [X22+40]
	010 Move X23, 0xE8E000
	011 Move X21, 0xBCA000
	012 Move W20, W1
	013 Move [X31+24], X8
	014 Move W8, [X23+3278]
	015 Move X21, [X21+1520]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xBCA000
	022 Move X0, [X0+1520]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+3278], W8
	026 Move [X19+48], W20
	027 Move X0, [X21]
	028 Move W20, [X19+28]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move W8, 0x4DD3
	034 NotImplemented "Instruction MOVK not yet implemented."
	035 NotImplemented "Instruction SMADDL not yet implemented."
	036 Move X9, X8
	037 ShiftRight X9, 63
	038 And X9, X9, 0x7FFFFFFF
	039 NotImplemented "Instruction SBFM not yet implemented."
	040 Add W0, W8, W9
	041 Move X1, X31
	042 Call Decimal.op_Implicit, X0
	043 Move X20, X0
	044 Move W0, [X19+48]
	045 Move X21, X1
	046 Move X1, X31
	047 Call Decimal.op_Implicit, X0
	048 Move X2, X0
	049 Move X3, X1
	050 Move X0, X20
	051 Move X1, X21
	052 Move X4, X31
	053 Call Decimal.op_Multiply, X0, X1
	054 Move X20, X0
	055 Move X21, X1
	056 Add X0, X31, 8
	057 Move W1, 2
	058 Move X2, X31
	059 Move [X31+8], X31
	060 Move [X31+16], X31
	061 Call Decimal..ctor, X0, X1
	062 Move X2, [X31+8]
	063 Move X3, [X31+16]
	064 Move X0, X20
	065 Move X1, X21
	066 Move X4, X31
	067 Call Decimal.op_Division, X0, X1
	068 Move X2, X31
	069 Call Decimal.op_Explicit, X0
	070 Move [X19+24], W0
	071 Move X8, [X22+40]
	072 Move X9, [X31+24]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move X20, [X31+64]
	075 Move X19, [X31+72]
	076 Move X22, [X31+48]
	077 Move X21, [X31+56]
	078 Move X30, [X31+32]
	079 Move X23, [X31+40]
	080 Add X31, X31, 80
	081 Return 
	082 Call 0x3EB2B20

Method: POpusCodec.Enums.Delay get_EncoderDelay()

Disassembly:
	0x035527AC MOV X19, X0
	0x035527B0 CBZ X0, 0x35527C8

ISIL:
	001 Move W0, [X0+48]
	002 Return X0

Method: System.Int32 get_FrameSizePerChannel()

Disassembly:
	0x035527B4 LDR X8, [X21]
	0x035527B8 MOV X0, X19

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Int32 get_Bitrate()

Disassembly:
	0x035527BC LDR X1, [X8 + 0x40]
	0x035527C0 BL 0x1C16E00
	0x035527C4 CBZ X0, 0x355284C

ISIL:
	001 Move X0, [X0+16]
	002 Move W1, 4003

Method: System.Void set_Bitrate(System.Int32 value)

Disassembly:
	0x03552950 MOVZ W8, 0x1
	0x03552954 STRB W8, [X23 + 0xD61]
	0x03552958 MOV X0, X21
	0x0355295C MOV X1, X31

ISIL:
	001 Move X0, [X0+16]
	002 Move W2, W1
	003 Move W1, 4002

Method: POpusCodec.Enums.Bandwidth get_MaxBandwidth()

Disassembly:
	0x03552B3C CBNZ W8, 0x3552B48
	0x03552B40 BL 0x1C16DFC
	0x03552B44 LDR X0, [X20]

ISIL:
	001 Move X0, [X0+16]
	002 Move W1, 4005
	003 Call Wrapper.get_opus_encoder_ctl, X0, X1
	004 Return X0

Method: System.Void set_MaxBandwidth(POpusCodec.Enums.Bandwidth value)

Disassembly:
	0x03552B48 LDR X8, [X0 + 0xB8]
	0x03552B4C LDR X0, [X8 + 0x10]
	0x03552B50 CBZ X0, 0x3552B80
	0x03552B54 ADRP X8, 0xBE3000

ISIL:
	001 Move X0, [X0+16]
	002 Move W2, W1
	003 Move W1, 4004
	004 Call Wrapper.set_opus_encoder_ctl, X0, X1, X2
	005 Return 

Method: POpusCodec.Enums.Complexity get_Complexity()

Disassembly:
	0x03552B58 LDR X1, [X19 + 0x10]
	0x03552B5C LDR X8, [X8 + 0x2C8]
	0x03552B60 LDR X2, [X8]

ISIL:
	001 Move X0, [X0+16]
	002 Move W1, 4011
	003 Call Wrapper.get_opus_encoder_ctl, X0, X1
	004 Return X0

Method: System.Void set_Complexity(POpusCodec.Enums.Complexity value)

Disassembly:
	0x03552B64 BL 0x2A52734
	0x03552B68 LDR X0, [X19 + 0x10]
	0x03552B6C BL 0x3552B84
	0x03552B70 STR X31, [X19 + 0x10]

ISIL:
	001 Move X0, [X0+16]
	002 Move W2, W1
	003 Move W1, 4010
	004 Call Wrapper.set_opus_encoder_ctl, X0, X1, X2
	005 Return 

Method: System.Int32 get_ExpectedPacketLossPercentage()

Disassembly:
	0x03552B74 LDP X20, X19, [X31 + 0x10]
	0x03552B78 LDR X30, [X31], #0x20
	0x03552B7C RET

ISIL:
	001 Move X0, [X0+16]
	002 Move W1, 4015
	003 Call Wrapper.get_opus_encoder_ctl, X0, X1
	004 Return X0

Method: System.Void set_ExpectedPacketLossPercentage(System.Int32 value)

Disassembly:
	0x03552B80 BL 0x1C16F20
	0x03552B84 STP X30, X21, [X31 - 0x20]!
	0x03552B88 STP X20, X19, [X31 + 0x10]
	0x03552B8C ADRP X20, 0xE8D000

ISIL:
	001 Move X0, [X0+16]
	002 Move W2, W1
	003 Move W1, 4014
	004 Call Wrapper.set_opus_encoder_ctl, X0, X1, X2
	005 Return 

Method: POpusCodec.Enums.SignalHint get_SignalHint()

Disassembly:
	0x03552B90 ADRP X21, 0xBC9000
	0x03552B94 LDRB W8, [X20 + 0xCD7]
	0x03552B98 LDR X21, [X21 + 0x850]

ISIL:
	001 Move X0, [X0+16]
	002 Move W1, 4025
	003 Call Wrapper.get_opus_encoder_ctl, X0, X1
	004 Return X0

Method: System.Void set_SignalHint(POpusCodec.Enums.SignalHint value)

Disassembly:
	0x03552B9C MOV X19, X0
	0x03552BA0 TBNZ X8, 0x0, 0x3552BB8
	0x03552BA4 ADRP X0, 0xBC9000
	0x03552BA8 LDR X0, [X0 + 0x850]

ISIL:
	001 Move X0, [X0+16]
	002 Move W2, W1
	003 Move W1, 4024
	004 Call Wrapper.set_opus_encoder_ctl, X0, X1, X2
	005 Return 

Method: POpusCodec.Enums.ForceChannels get_ForceChannels()

Disassembly:
	0x03552BAC BL 0x1C16CF4
	0x03552BB0 MOVZ W8, 0x1
	0x03552BB4 STRB W8, [X20 + 0xCD7]

ISIL:
	001 Move X0, [X0+16]
	002 Move W1, 4023
	003 Call Wrapper.get_opus_encoder_ctl, X0, X1
	004 Return X0

Method: System.Void set_ForceChannels(POpusCodec.Enums.ForceChannels value)

Disassembly:
	0x03552BB8 LDR X0, [X21]
	0x03552BBC LDR W8, [X0 + 0xE0]
	0x03552BC0 CBNZ W8, 0x3552BC8
	0x03552BC4 BL 0x1C16DFC

ISIL:
	001 Move X0, [X0+16]
	002 Move W2, W1
	003 Move W1, 4022
	004 Call Wrapper.set_opus_encoder_ctl, X0, X1, X2
	005 Return 

Method: System.Boolean get_UseInbandFEC()

Disassembly:
	0x03552BC8 MOV X0, X19
	0x03552BCC LDP X20, X19, [X31 + 0x10]
	0x03552BD0 MOV X1, X31
	0x03552BD4 LDP X30, X21, [X31], #0x20
	0x03552BD8 B 0x32C1064
	0x03552BDC SUB X31, X31, 0x50
	0x03552BE0 STR X30, [X31 + 0x10]
	0x03552BE4 STP X24, X23, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Move W1, 4013
	004 Call Wrapper.get_opus_encoder_ctl, X0, X1
	005 NotImplemented "Instruction CMP not yet implemented."
	006 NotImplemented "Instruction CSET not yet implemented."
	007 Move X30, [X31+16]
	008 Return X0

Method: System.Void set_UseInbandFEC(System.Boolean value)

Disassembly:
	0x03552BE8 STP X22, X21, [X31 + 0x30]
	0x03552BEC STP X20, X19, [X31 + 0x40]
	0x03552BF0 ADRP X23, 0xE8D000
	0x03552BF4 ADRP X24, 0xBA1000

ISIL:
	001 Move X0, [X0+16]
	002 And W2, W1, 1
	003 Move W1, 4012
	004 Call Wrapper.set_opus_encoder_ctl, X0, X1, X2
	005 Return 

Method: System.Int32 get_PacketLossPercentage()

Disassembly:
	0x03552BF8 ADRP X22, 0xBAC000
	0x03552BFC ADRP X20, 0xBCC000
	0x03552C00 ADRP X21, 0xBE3000

ISIL:
	001 Move X0, [X0+16]
	002 Move W1, 4015
	003 Call Wrapper.get_opus_encoder_ctl, X0, X1
	004 Return X0

Method: System.Void set_PacketLossPercentage(System.Int32 value)

Disassembly:
	0x03552C04 ADRP X19, 0xBE3000
	0x03552C08 LDRB W8, [X23 + 0xCD5]
	0x03552C0C LDR X24, [X24 + 0x618]
	0x03552C10 LDR X22, [X22 + 0xE68]

ISIL:
	001 Move X0, [X0+16]
	002 Move W2, W1
	003 Move W1, 4014
	004 Call Wrapper.set_opus_encoder_ctl, X0, X1, X2
	005 Return 

Method: System.Boolean get_UseUnconstrainedVBR()

Disassembly:
	0x03552C14 LDR X20, [X20 + 0xB60]
	0x03552C18 LDR X21, [X21 + 0x2D0]
	0x03552C1C LDR X19, [X19 + 0x2D8]
	0x03552C20 TBNZ X8, 0x0, 0x3552C68
	0x03552C24 ADRP X0, 0xBAC000
	0x03552C28 LDR X0, [X0 + 0xE68]
	0x03552C2C BL 0x1C16CF4
	0x03552C30 ADRP X0, 0xBA1000

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Move W1, 4021
	004 Call Wrapper.get_opus_encoder_ctl, X0, X1
	005 NotImplemented "Instruction CMP not yet implemented."
	006 NotImplemented "Instruction CSET not yet implemented."
	007 Move X30, [X31+16]
	008 Return X0

Method: System.Void set_UseUnconstrainedVBR(System.Boolean value)

Disassembly:
	0x03552C34 LDR X0, [X0 + 0x618]
	0x03552C38 BL 0x1C16CF4
	0x03552C3C ADRP X0, 0xBE3000
	0x03552C40 LDR X0, [X0 + 0x2D8]
	0x03552C44 BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+16]
	002 NotImplemented "Instruction ORN not yet implemented."
	003 And W2, W8, 1
	004 Move W1, 4020
	005 Call Wrapper.set_opus_encoder_ctl, X0, X1, X2
	006 Return 

Method: System.Boolean get_DtxEnabled()

Disassembly:
	0x03552C48 ADRP X0, 0xBE3000
	0x03552C4C LDR X0, [X0 + 0x2D0]
	0x03552C50 BL 0x1C16CF4
	0x03552C54 ADRP X0, 0xBCC000
	0x03552C58 LDR X0, [X0 + 0xB60]
	0x03552C5C BL 0x1C16CF4
	0x03552C60 MOVZ W8, 0x1
	0x03552C64 STRB W8, [X23 + 0xCD5]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Move W1, 4017
	004 Call Wrapper.get_opus_encoder_ctl, X0, X1
	005 NotImplemented "Instruction CMP not yet implemented."
	006 NotImplemented "Instruction CSET not yet implemented."
	007 Move X30, [X31+16]
	008 Return X0

Method: System.Void set_DtxEnabled(System.Boolean value)

Disassembly:
	0x03552C68 LDR X0, [X24]
	0x03552C6C MOV W1, W31
	0x03552C70 BL 0x1C16D6C
	0x03552C74 LDR X2, [X22]

ISIL:
	001 Move X0, [X0+16]
	002 And W2, W1, 1
	003 Move W1, 4016
	004 Call Wrapper.set_opus_encoder_ctl, X0, X1, X2
	005 Return 

Method: System.Void .ctor(POpusCodec.Enums.SamplingRate inputSamplingRateHz, POpusCodec.Enums.Channels numChannels, System.Int32 bitrate, POpusCodec.Enums.OpusApplicationType applicationType, POpusCodec.Enums.Delay encoderDelay)

Disassembly:
	0x03552C78 MOV X1, X0
	0x03552C7C ADD X0, X31, 0x0
	0x03552C80 STP X31, X31, [X31]
	0x03552C84 BL 0x2B87B6C
	0x03552C88 LDR X8, [X20]
	0x03552C8C LDR V0, [X31]
	0x03552C90 LDR X8, [X8 + 0xB8]
	0x03552C94 STR V0, [X8]
	0x03552C98 LDR X0, [X21]
	0x03552C9C BL 0x1C16F10
	0x03552CA0 LDR X1, [X19]
	0x03552CA4 MOV X19, X0
	0x03552CA8 BL 0x2A50A9C
	0x03552CAC LDR X8, [X20]
	0x03552CB0 LDP X22, X21, [X31 + 0x30]
	0x03552CB4 LDP X24, X23, [X31 + 0x20]
	0x03552CB8 LDR X30, [X31 + 0x10]
	0x03552CBC LDR X8, [X8 + 0xB8]
	0x03552CC0 STR X19, [X8 + 0x10]
	0x03552CC4 LDP X20, X19, [X31 + 0x40]
	0x03552CC8 ADD X31, X31, 0x50
	0x03552CCC RET
	0x03552CD0 LDR W0, [X0 + 0x8C]
	0x03552CD4 RET
	0x03552CD8 SUB X31, X31, 0x70
	0x03552CDC STP X30, X25, [X31 + 0x30]
	0x03552CE0 STP X24, X23, [X31 + 0x40]
	0x03552CE4 STP X22, X21, [X31 + 0x50]
	0x03552CE8 STP X20, X19, [X31 + 0x60]
	0x03552CEC ADRP X25, 0xE8D000
	0x03552CF0 LDR X8, [X25 + 0xCD8]
	0x03552CF4 MOV W19, W5
	0x03552CF8 MOV W20, W4
	0x03552CFC MOV X23, X3
	0x03552D00 MOV W21, W2
	0x03552D04 MOV X22, X1
	0x03552D08 MOV X24, X0
	0x03552D0C CBNZ X8, 0x3552D58
	0x03552D10 ADRP X12, 0xFFFFFFFFFD59B000
	0x03552D14 LDR V0, [X12 + 0xEC0]
	0x03552D18 ADRP X8, 0xFFFFFFFFFD5CC000
	0x03552D1C ADRP X10, 0xFFFFFFFFFD5A2000
	0x03552D20 ADD X8, X8, 0x155
	0x03552D24 MOVZ W9, 0x9
	0x03552D28 ADD X10, X10, 0x838
	0x03552D2C MOVZ W11, 0xB
	0x03552D30 MOVZ W13, 0x24
	0x03552D34 ADD X0, X31, 0x0
	0x03552D38 STP X8, X9, [X31]
	0x03552D3C STP X10, X11, [X31 + 0x10]
	0x03552D40 STR W13, [X31 + 0x28]
	0x03552D44 STR D0, [X31 + 0x20]
	0x03552D48 STRB W31, [X31 + 0x2C]
	0x03552D4C BL 0x1C1729C
	0x03552D50 MOV X8, X0
	0x03552D54 STR X0, [X25 + 0xCD8]
	0x03552D58 ADD X9, X23, 0x20
	0x03552D5C CMP X23, 0x0
	0x03552D60 CSEL X3, X31, X9, EQ
	0x03552D64 MOV X0, X24
	0x03552D68 MOV X1, X22
	0x03552D6C MOV W2, W21
	0x03552D70 MOV W4, W20
	0x03552D74 MOV W5, W19
	0x03552D78 BLR X8
	0x03552D7C LDP X20, X19, [X31 + 0x60]
	0x03552D80 LDP X22, X21, [X31 + 0x50]
	0x03552D84 LDP X24, X23, [X31 + 0x40]
	0x03552D88 LDP X30, X25, [X31 + 0x30]
	0x03552D8C ADD X31, X31, 0x70
	0x03552D90 RET
	0x03552D94 SUB X31, X31, 0x70
	0x03552D98 STP X30, X25, [X31 + 0x30]
	0x03552D9C STP X24, X23, [X31 + 0x40]
	0x03552DA0 STP X22, X21, [X31 + 0x50]
	0x03552DA4 STP X20, X19, [X31 + 0x60]
	0x03552DA8 ADRP X25, 0xE8D000
	0x03552DAC LDR X8, [X25 + 0xCE0]
	0x03552DB0 MOV W19, W5
	0x03552DB4 MOV W20, W4
	0x03552DB8 MOV X23, X3
	0x03552DBC MOV W21, W2
	0x03552DC0 MOV X22, X1
	0x03552DC4 MOV X24, X0
	0x03552DC8 CBNZ X8, 0x3552E14
	0x03552DCC ADRP X12, 0xFFFFFFFFFD59B000
	0x03552DD0 LDR V0, [X12 + 0xEC0]
	0x03552DD4 ADRP X8, 0xFFFFFFFFFD5CC000
	0x03552DD8 ADRP X10, 0xFFFFFFFFFD5CE000
	0x03552DDC ADD X8, X8, 0x155
	0x03552DE0 MOVZ W9, 0x9
	0x03552DE4 ADD X10, X10, 0x32B
	0x03552DE8 MOVZ W11, 0x11
	0x03552DEC MOVZ W13, 0x24
	0x03552DF0 ADD X0, X31, 0x0
	0x03552DF4 STP X8, X9, [X31]
	0x03552DF8 STP X10, X11, [X31 + 0x10]
	0x03552DFC STR W13, [X31 + 0x28]
	0x03552E00 STR D0, [X31 + 0x20]
	0x03552E04 STRB W31, [X31 + 0x2C]
	0x03552E08 BL 0x1C1729C
	0x03552E0C MOV X8, X0
	0x03552E10 STR X0, [X25 + 0xCE0]
	0x03552E14 ADD X9, X23, 0x20
	0x03552E18 CMP X23, 0x0
	0x03552E1C CSEL X3, X31, X9, EQ
	0x03552E20 MOV X0, X24
	0x03552E24 MOV X1, X22
	0x03552E28 MOV W2, W21
	0x03552E2C MOV W4, W20
	0x03552E30 MOV W5, W19
	0x03552E34 BLR X8
	0x03552E38 LDP X20, X19, [X31 + 0x60]
	0x03552E3C LDP X22, X21, [X31 + 0x50]
	0x03552E40 LDP X24, X23, [X31 + 0x40]
	0x03552E44 LDP X30, X25, [X31 + 0x30]
	0x03552E48 ADD X31, X31, 0x70
	0x03552E4C RET
	0x03552E50 MOV W0, W31
	0x03552E54 RET
	0x03552E58 MOV W0, W31
	0x03552E5C RET
	0x03552E60 STP X30, X21, [X31 - 0x20]!
	0x03552E64 STP X20, X19, [X31 + 0x10]
	0x03552E68 ADRP X20, 0xE8D000
	0x03552E6C ADRP X21, 0xBC9000
	0x03552E70 LDRB W8, [X20 + 0xCE8]
	0x03552E74 LDR X21, [X21 + 0x850]
	0x03552E78 MOV X19, X0
	0x03552E7C TBNZ X8, 0x0, 0x3552E94
	0x03552E80 ADRP X0, 0xBC9000
	0x03552E84 LDR X0, [X0 + 0x850]
	0x03552E88 BL 0x1C16CF4
	0x03552E8C MOVZ W8, 0x1
	0x03552E90 STRB W8, [X20 + 0xCE8]
	0x03552E94 LDR X0, [X21]
	0x03552E98 LDR W8, [X0 + 0xE0]
	0x03552E9C CBNZ W8, 0x3552EA4
	0x03552EA0 BL 0x1C16DFC
	0x03552EA4 MOV X0, X19
	0x03552EA8 LDP X20, X19, [X31 + 0x10]
	0x03552EAC MOV X1, X31
	0x03552EB0 LDP X30, X21, [X31], #0x20
	0x03552EB4 B 0x32C1064
	0x03552EB8 SUB X31, X31, 0x50
	0x03552EBC STR X30, [X31 + 0x30]
	0x03552EC0 STP X20, X19, [X31 + 0x40]
	0x03552EC4 ADRP X20, 0xE8D000
	0x03552EC8 LDR X8, [X20 + 0xCF0]
	0x03552ECC MOV W19, W0
	0x03552ED0 CBNZ X8, 0x3552F1C
	0x03552ED4 ADRP X12, 0xFFFFFFFFFD59B000
	0x03552ED8 LDR V0, [X12 + 0xEC0]
	0x03552EDC ADRP X8, 0xFFFFFFFFFD5CC000
	0x03552EE0 ADRP X10, 0xFFFFFFFFFD5D9000
	0x03552EE4 ADD X8, X8, 0x155
	0x03552EE8 MOVZ W9, 0x9
	0x03552EEC ADD X10, X10, 0xDDA
	0x03552EF0 MOVZ W11, 0x15
	0x03552EF4 MOVZ W13, 0x4
	0x03552EF8 ADD X0, X31, 0x0
	0x03552EFC STP X8, X9, [X31]
	0x03552F00 STP X10, X11, [X31 + 0x10]
	0x03552F04 STR W13, [X31 + 0x28]
	0x03552F08 STR D0, [X31 + 0x20]
	0x03552F0C STRB W31, [X31 + 0x2C]
	0x03552F10 BL 0x1C1729C
	0x03552F14 MOV X8, X0
	0x03552F18 STR X0, [X20 + 0xCF0]
	0x03552F1C MOV W0, W19
	0x03552F20 BLR X8
	0x03552F24 LDP X20, X19, [X31 + 0x40]
	0x03552F28 LDR X30, [X31 + 0x30]
	0x03552F2C ADD X31, X31, 0x50
	0x03552F30 RET
	0x03552F34 SUB X31, X31, 0x60
	0x03552F38 STP X30, X23, [X31 + 0x30]
	0x03552F3C STP X22, X21, [X31 + 0x40]
	0x03552F40 STP X20, X19, [X31 + 0x50]
	0x03552F44 ADRP X23, 0xE8D000
	0x03552F48 LDR X8, [X23 + 0xCF8]
	0x03552F4C MOV W19, W3
	0x03552F50 MOV W20, W2
	0x03552F54 MOV W21, W1
	0x03552F58 MOV X22, X0
	0x03552F5C CBNZ X8, 0x3552FA8
	0x03552F60 ADRP X12, 0xFFFFFFFFFD59B000
	0x03552F64 LDR V0, [X12 + 0xEC0]
	0x03552F68 ADRP X8, 0xFFFFFFFFFD5CC000
	0x03552F6C ADRP X10, 0xFFFFFFFFFD5C7000
	0x03552F70 ADD X8, X8, 0x155
	0x03552F74 MOVZ W9, 0x9
	0x03552F78 ADD X10, X10, 0xFF8
	0x03552F7C MOVZ W11, 0x11
	0x03552F80 MOVZ W13, 0x14
	0x03552F84 ADD X0, X31, 0x0
	0x03552F88 STP X8, X9, [X31]
	0x03552F8C STP X10, X11, [X31 + 0x10]
	0x03552F90 STR W13, [X31 + 0x28]
	0x03552F94 STR D0, [X31 + 0x20]
	0x03552F98 STRB W31, [X31 + 0x2C]
	0x03552F9C BL 0x1C1729C
	0x03552FA0 MOV X8, X0
	0x03552FA4 STR X0, [X23 + 0xCF8]
	0x03552FA8 MOV X0, X22
	0x03552FAC MOV W1, W21
	0x03552FB0 MOV W2, W20
	0x03552FB4 MOV W3, W19
	0x03552FB8 BLR X8
	0x03552FBC LDP X20, X19, [X31 + 0x50]
	0x03552FC0 LDP X22, X21, [X31 + 0x40]
	0x03552FC4 LDP X30, X23, [X31 + 0x30]
	0x03552FC8 ADD X31, X31, 0x60
	0x03552FCC RET
	0x03552FD0 SUB X31, X31, 0x70
	0x03552FD4 STR X30, [X31 + 0x30]
	0x03552FD8 STP X24, X23, [X31 + 0x40]
	0x03552FDC STP X22, X21, [X31 + 0x50]
	0x03552FE0 STP X20, X19, [X31 + 0x60]
	0x03552FE4 ADRP X24, 0xE8D000
	0x03552FE8 LDR X8, [X24 + 0xD08]
	0x03552FEC MOV W19, W4
	0x03552FF0 MOV X21, X3
	0x03552FF4 MOV W20, W2
	0x03552FF8 MOV X23, X1
	0x03552FFC MOV X22, X0
	0x03553000 CBNZ X8, 0x355304C
	0x03553004 ADRP X12, 0xFFFFFFFFFD59A000
	0x03553008 LDR V0, [X12 + 0xEC0]
	0x0355300C ADRP X8, 0xFFFFFFFFFD5CB000
	0x03553010 ADRP X10, 0xFFFFFFFFFD5B5000
	0x03553014 ADD X8, X8, 0x155
	0x03553018 MOVZ W9, 0x9
	0x0355301C ADD X10, X10, 0x758
	0x03553020 MOVZ W11, 0xB
	0x03553024 MOVZ W13, 0x20
	0x03553028 ADD X0, X31, 0x0
	0x0355302C STP X8, X9, [X31]
	0x03553030 STP X10, X11, [X31 + 0x10]
	0x03553034 STR W13, [X31 + 0x28]
	0x03553038 STR D0, [X31 + 0x20]
	0x0355303C STRB W31, [X31 + 0x2C]
	0x03553040 BL 0x1C1729C
	0x03553044 MOV X8, X0
	0x03553048 STR X0, [X24 + 0xD08]
	0x0355304C ADD X9, X23, 0x20
	0x03553050 CMP X23, 0x0
	0x03553054 ADD X10, X21, 0x20
	0x03553058 CSEL X1, X31, X9, EQ
	0x0355305C CMP X21, 0x0
	0x03553060 CSEL X3, X31, X10, EQ
	0x03553064 MOV X0, X22
	0x03553068 MOV W2, W20
	0x0355306C MOV W4, W19
	0x03553070 BLR X8
	0x03553074 LDP X20, X19, [X31 + 0x60]
	0x03553078 LDP X22, X21, [X31 + 0x50]
	0x0355307C LDP X24, X23, [X31 + 0x40]
	0x03553080 LDR X30, [X31 + 0x30]
	0x03553084 ADD X31, X31, 0x70
	0x03553088 RET
	0x0355308C SUB X31, X31, 0x70
	0x03553090 STR X30, [X31 + 0x30]
	0x03553094 STP X24, X23, [X31 + 0x40]
	0x03553098 STP X22, X21, [X31 + 0x50]
	0x0355309C STP X20, X19, [X31 + 0x60]
	0x035530A0 ADRP X24, 0xE8C000
	0x035530A4 LDR X8, [X24 + 0xD10]
	0x035530A8 MOV W19, W4
	0x035530AC MOV X21, X3
	0x035530B0 MOV W20, W2

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+32], X30
	003 Move [X31+48], X26
	004 Move [X31+56], X25
	005 Move [X31+64], X24
	006 Move [X31+72], X23
	007 Move [X31+80], X22
	008 Move [X31+88], X21
	009 Move [X31+96], X20
	010 Move [X31+104], X19
	011 Move X26, 0xE8E000
	012 Move X25, 0xBA2000
	013 Move W8, [X26+3279]
	014 Move X25, [X25+1560]
	015 Move W20, W5
	016 Move W22, W4
	017 Move W21, W3
	018 Move W24, W2
	019 Move W23, W1
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {36}
	025 Move X0, 0xBA2000
	026 Move X0, [X0+1560]
	027 Call 0x1C17CF4
	028 Move X0, 0xBE4000
	029 Move X0, [X0+568]
	030 Call 0x1C17CF4
	031 Move X0, 0xBCD000
	032 Move X0, [X0+2912]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X26+3279], W8
	036 Move X8, -44449792
	037 Move V0, [X8+3264]
	038 Move W8, 2
	039 Move [X19+16], X31
	040 Move [X19+32], W8
	041 Move [X19+24], D0
	042 Move X0, [X25]
	043 Move W1, 4000
	044 Call 0x1C17D6C
	045 Move [X19+40], X0
	046 Move W8, 40
	047 Move X0, X19
	048 Move X1, X31
	049 Move [X19+48], W8
	050 Call Object..ctor, X0
	051 Move W8, 0x3E7F
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move W8, 0x3E80
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move W8, 0x5DC0
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move W8, 0xBB80
	058 Move W8, 0x1F40
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move W8, 0x2EE0
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Subtract W8, W24, 1
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Subtract W8, W22, 2048
	065 NotImplemented "Instruction CMP not yet implemented."
	066 NotImplemented "Instruction CMP not yet implemented."
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move W8, W20
	069 Move W9, 1
	070 NotImplemented "Instruction LSLV not yet implemented."
	071 Move X9, 1056
	072 NotImplemented "Instruction MOVK not yet implemented."
	073 NotImplemented "Instruction MOVK not yet implemented."
	074 And X31, X8, X9
	075 NotImplemented "Instruction CMP not yet implemented."
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move X25, 0xBCD000
	078 Move X25, [X25+2912]
	079 Move W0, W23
	080 Move W1, W24
	081 Move W2, W22
	082 Move [X19+28], W23
	083 Move [X19+32], W24
	084 Call Wrapper.opus_encoder_create, X0, X1, X2
	085 Move [X19+16], X0
	086 Move X0, [X25]
	087 Move W8, [X0+224]
	088 Compare W8, 0
	089 JumpIfNotEqual {92}
	090 Call 0x1C17DFC
	091 Move X0, [X25]
	092 Move X8, [X0+184]
	093 Move X0, [X8+16]
	094 Compare X0, 0
	095 JumpIfEqual {153}
	096 Move X8, 0xBE4000
	097 Move X8, [X8+568]
	098 Move X1, [X19+16]
	099 Move X2, X19
	100 Move X3, [X8]
	101 Call Dictionary`2<IntPtr, Object>.set_Item, X0, X1, X2
	102 Move X0, [X19+16]
	103 Move X1, X31
	104 Move X2, X31
	105 Call IntPtr.op_Equality, X0, X1
	106 Move TEMP, X0
	107 And TEMP, TEMP, 1
	108 Compare TEMP, 1
	109 JumpIfEqual {154}
	110 Move X0, X19
	111 Move W1, W20
	112 Call OpusEncoder.set_EncoderDelay, X0, X1
	113 Move X0, [X19+16]
	114 Move W1, 4002
	115 Move W2, W21
	116 Call Wrapper.set_opus_encoder_ctl, X0, X1, X2
	117 Move X0, [X19+16]
	118 Move W1, 4012
	119 Move W2, 1
	120 Call Wrapper.set_opus_encoder_ctl, X0, X1, X2
	121 Move X0, [X19+16]
	122 Move X20, [X31+96]
	123 Move X19, [X31+104]
	124 Move X22, [X31+80]
	125 Move X21, [X31+88]
	126 Move X24, [X31+64]
	127 Move X23, [X31+72]
	128 Move X26, [X31+48]
	129 Move X25, [X31+56]
	130 Move X30, [X31+32]
	131 Move W1, 4014
	132 Move W2, 30
	133 Add X31, X31, 112
	134 Call Wrapper.set_opus_encoder_ctl, X0, X1, X2
	135 Return 
	136 Move X0, 0xBAA000
	137 Move X0, [X0+1888]
	138 Call 0x1C17D08
	139 Call 0x1C17F10
	140 Move X19, X0
	141 Move X0, 0xBCB000
	142 Move X0, [X0+3552]
	143 Call 0x1C17D08
	144 Move X20, X0
	145 Move X0, 0xBCB000
	146 Move X0, [X0+3560]
	147 Call 0x1C17D08
	148 Move X2, X0
	149 Move X0, X19
	150 Move X1, X20
	151 Move X3, X31
	152 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	153 Call 0x1C17F20
	154 Move X0, 0xBCB000
	155 Move X0, [X0+3568]
	156 Call 0x1C17D08
	157 Call 0x1C17F10
	158 Move X19, X0
	159 Move X0, 0xBCB000
	160 Move X0, [X0+3576]
	161 Call 0x1C17D08
	162 Move X2, X0
	163 Move TEMP, 6
	164 Not TEMP
	165 Move W1, TEMP
	166 Move X0, X19
	167 Call OpusException..ctor, X0, X1, X2
	168 Move X0, 0xBE4000
	169 Move X0, [X0+576]
	170 Call 0x1C17D08
	171 Move X1, X0
	172 Move X0, X19
	173 Call 0x1C17DEC
	174 Move X0, 0xBE4000
	175 Move X0, [X0+584]
	176 Call 0x1C17D08
	177 Move TEMP, 0
	178 Not TEMP
	179 Move X8, TEMP
	180 Move [X31+8], X0
	181 Move [X31+16], X8
	182 Add X0, X31, 8
	183 Move X1, X31
	184 Move [X31+24], W22
	185 Call Enum.ToString, X0
	186 Move X19, X0
	187 Move X0, 0xBE4000
	188 Move X0, [X0+592]
	189 Call 0x1C17D08
	190 Move X20, X0
	191 Move X0, 0xBA3000
	192 Move X0, [X0+1544]
	193 Call 0x1C17D08
	194 Move X2, X0
	195 Move X0, X20
	196 Move X1, X19
	197 Move X3, X31
	198 Call String.Concat, X0, X1, X2
	199 Move X19, X0
	200 Move X0, 0xBAA000
	201 Move X0, [X0+1888]
	202 Call 0x1C17D08
	203 Call 0x1C17F10
	204 Move X20, X0
	205 Move X0, 0xBE4000
	206 Move X0, [X0+600]
	207 Move X0, 0xBCB000
	208 Move X0, [X0+3584]
	209 Call 0x1C17D08
	210 Move TEMP, 0
	211 Not TEMP
	212 Move X8, TEMP
	213 Move [X31+8], X0
	214 Move [X31+16], X8
	215 Add X0, X31, 8
	216 Move X1, X31
	217 Move [X31+24], W23
	218 Call Enum.ToString, X0
	219 Move X19, X0
	220 Move X0, 0xBE4000
	221 Move X0, [X0+608]
	222 Call 0x1C17D08
	223 Move X20, X0
	224 Move X0, 0xBA3000
	225 Move X0, [X0+1544]
	226 Call 0x1C17D08
	227 Move X2, X0
	228 Move X0, X20
	229 Move X1, X19
	230 Move X3, X31
	231 Call String.Concat, X0, X1, X2
	232 Move X19, X0
	233 Move X0, 0xBAA000
	234 Move X0, [X0+1888]
	235 Call 0x1C17D08
	236 Call 0x1C17F10
	237 Move X20, X0
	238 Move X0, 0xBE3000
	239 Move X0, [X0+616]
	240 Move X0, 0xBE3000
	241 Move X0, [X0+624]
	242 Call 0x1C17D08
	243 Move TEMP, 0
	244 Not TEMP
	245 Move X8, TEMP
	246 Move [X31+8], X0
	247 Move [X31+16], X8
	248 Add X0, X31, 8
	249 Move X1, X31
	250 Move [X31+24], W20
	251 Call Enum.ToString, X0
	252 Move X19, X0
	253 Move X0, 0xBE3000
	254 Move X0, [X0+632]
	255 Call 0x1C17D08
	256 Move X20, X0
	257 Move X0, 0xBA2000
	258 Move X0, [X0+1544]
	259 Call 0x1C17D08
	260 Move X2, X0
	261 Move X0, X20
	262 Move X1, X19
	263 Move X3, X31
	264 Call String.Concat, X0, X1, X2
	265 Move X19, X0
	266 Move X0, 0xBA9000
	267 Move X0, [X0+1888]
	268 Call 0x1C17D08
	269 Call 0x1C17F10
	270 Move X20, X0
	271 Move X0, 0xBE3000
	272 Move X0, [X0+640]
	273 Call 0x1C17D08
	274 Move X1, X0
	275 Move X0, X20
	276 Move X2, X19
	277 Move X3, X31
	278 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	279 Move X0, 0xBE3000
	280 Move X0, [X0+576]
	281 Call 0x1C17D08
	282 Move X1, X0
	283 Move X0, X20
	284 Call 0x1C17DEC

Method: System.Void DataCallbackStatic(System.IntPtr handle, System.IntPtr p, System.Int32 count)

Disassembly:
	0x035525CC BL 0x1C16F20
	0x035525D0 SUB X31, X31, 0x30
	0x035525D4 STP X30, X21, [X31 + 0x10]
	0x035525D8 STP X20, X19, [X31 + 0x20]
	0x035525DC ADRP X21, 0xE8D000
	0x035525E0 LDRB W8, [X21 + 0xCD2]
	0x035525E4 MOV X20, X1
	0x035525E8 MOV X19, X0
	0x035525EC TBNZ X8, 0x0, 0x3552604
	0x035525F0 ADRP X0, 0xBCC000
	0x035525F4 LDR X0, [X0 + 0xB88]
	0x035525F8 BL 0x1C16CF4
	0x035525FC MOVZ W8, 0x1
	0x03552600 STRB W8, [X21 + 0xCD2]
	0x03552604 LDR X0, [X19 + 0x10]
	0x03552608 LDR W2, [X19 + 0x18]
	0x0355260C LDR X3, [X19 + 0x28]
	0x03552610 MOV X1, X20
	0x03552614 BL 0x3552678
	0x03552618 CMP W0, 0x2
	0x0355261C B.LT 0x3552664
	0x03552620 ADRP X8, 0xBCC000
	0x03552624 LDR X20, [X19 + 0x40]
	0x03552628 LDR X1, [X19 + 0x28]
	0x0355262C LDR X8, [X8 + 0xB88]
	0x03552630 MOV W3, W0
	0x03552634 ADD X0, X31, 0x0
	0x03552638 MOV W2, W31
	0x0355263C LDR X4, [X8]
	0x03552640 STP X31, X31, [X31]
	0x03552644 BL 0x2B87BB0
	0x03552648 CBZ X20, 0x3552674
	0x0355264C LDP X1, X2, [X31]
	0x03552650 LDR X8, [X20 + 0x18]
	0x03552654 LDR X0, [X20 + 0x40]
	0x03552658 LDR X4, [X20 + 0x28]
	0x0355265C MOV W3, W31
	0x03552660 BLR X8
	0x03552664 LDP X20, X19, [X31 + 0x20]
	0x03552668 LDP X30, X21, [X31 + 0x10]
	0x0355266C ADD X31, X31, 0x30
	0x03552670 RET
	0x03552674 BL 0x1C16F20
	0x03552678 SUB X31, X31, 0x40
	0x0355267C STP X30, X23, [X31 + 0x10]
	0x03552680 STP X22, X21, [X31 + 0x20]
	0x03552684 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xE8E000
	009 Move X22, 0xBCD000
	010 Move W8, [X23+3280]
	011 Move X22, [X22+2912]
	012 Move W19, W2
	013 Move X20, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xBE4000
	020 Move X0, [X0+504]
	021 Call 0x1C17CF4
	022 Move X0, 0xBCD000
	023 Move X0, [X0+2912]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+3280], W8
	027 Move X0, [X22]
	028 Move [X31+8], X31
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {34}
	032 Call 0x1C17DFC
	033 Move X0, [X22]
	034 Move X8, [X0+184]
	035 Move X0, [X8+16]
	036 Compare X0, 0
	037 JumpIfEqual {62}
	038 Move X8, 0xBE4000
	039 Move X8, [X8+504]
	040 Add X2, X31, 8
	041 Move X1, X21
	042 Move X3, [X8]
	043 Call Dictionary`2<IntPtr, Object>.TryGetValue, X0, X1, X2
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {54}
	048 Move X0, [X31+8]
	049 Compare X0, 0
	050 JumpIfEqual {62}
	051 Move X1, X20
	052 Move W2, W19
	053 Call OpusEncoder.dataCallback, X0, X1, X2
	054 Move X20, [X31+48]
	055 Move X19, [X31+56]
	056 Move X22, [X31+32]
	057 Move X21, [X31+40]
	058 Move X30, [X31+16]
	059 Move X23, [X31+24]
	060 Add X31, X31, 64
	061 Return 
	062 Call 0x1C17F20

Method: System.Void dataCallback(System.IntPtr p, System.Int32 count)

Disassembly:
	0x035534BC ADRP X12, 0xFFFFFFFFFD59A000
	0x035534C0 LDR V0, [X12 + 0xEC0]
	0x035534C4 ADRP X8, 0xFFFFFFFFFD5CB000
	0x035534C8 ADRP X10, 0xFFFFFFFFFD5CB000
	0x035534CC ADD X8, X8, 0x155
	0x035534D0 MOVZ W9, 0x9
	0x035534D4 ADD X10, X10, 0x15F
	0x035534D8 MOVZ W11, 0x19
	0x035534DC MOVZ W13, 0x8
	0x035534E0 ADD X0, X31, 0x0
	0x035534E4 STP X8, X9, [X31]
	0x035534E8 STP X10, X11, [X31 + 0x10]
	0x035534EC STR W13, [X31 + 0x28]
	0x035534F0 STR D0, [X31 + 0x20]
	0x035534F4 STRB W31, [X31 + 0x2C]
	0x035534F8 BL 0x1C1729C
	0x035534FC MOV X8, X0
	0x03553500 STR X0, [X20 + 0xD48]
	0x03553504 MOV X0, X19
	0x03553508 BLR X8
	0x0355350C LDP X20, X19, [X31 + 0x40]
	0x03553510 LDR X30, [X31 + 0x30]
	0x03553514 ADD X31, X31, 0x50
	0x03553518 RET
	0x0355351C SUB X31, X31, 0x50
	0x03553520 STR X30, [X31 + 0x30]
	0x03553524 STP X20, X19, [X31 + 0x40]
	0x03553528 ADRP X20, 0xE8C000
	0x0355352C LDR X8, [X20 + 0xD50]
	0x03553530 MOV X19, X0
	0x03553534 CBNZ X8, 0x3553580
	0x03553538 ADRP X12, 0xFFFFFFFFFD59A000
	0x0355353C LDR V0, [X12 + 0xEC0]
	0x03553540 ADRP X8, 0xFFFFFFFFFD5CB000
	0x03553544 ADRP X10, 0xFFFFFFFFFD5B3000
	0x03553548 ADD X8, X8, 0x155
	0x0355354C MOVZ W9, 0x9
	0x03553550 ADD X10, X10, 0x74D
	0x03553554 MOVZ W11, 0x1B
	0x03553558 MOVZ W13, 0x8
	0x0355355C ADD X0, X31, 0x0
	0x03553560 STP X8, X9, [X31]
	0x03553564 STP X10, X11, [X31 + 0x10]
	0x03553568 STR W13, [X31 + 0x28]
	0x0355356C STR D0, [X31 + 0x20]
	0x03553570 STRB W31, [X31 + 0x2C]
	0x03553574 BL 0x1C1729C
	0x03553578 MOV X8, X0
	0x0355357C STR X0, [X20 + 0xD50]
	0x03553580 ADD X9, X19, 0x20
	0x03553584 CMP X19, 0x0
	0x03553588 CSEL X0, X31, X9, EQ
	0x0355358C BLR X8
	0x03553590 LDP X20, X19, [X31 + 0x40]
	0x03553594 LDR X30, [X31 + 0x30]
	0x03553598 ADD X31, X31, 0x50
	0x0355359C RET
	0x035535A0 SUB X31, X31, 0x50
	0x035535A4 STR X30, [X31 + 0x30]
	0x035535A8 STP X20, X19, [X31 + 0x40]
	0x035535AC ADRP X20, 0xE8C000
	0x035535B0 LDR X8, [X20 + 0xD58]
	0x035535B4 MOV W19, W0
	0x035535B8 CBNZ X8, 0x3553604
	0x035535BC ADRP X12, 0xFFFFFFFFFD59A000
	0x035535C0 LDR V0, [X12 + 0xEC0]
	0x035535C4 ADRP X8, 0xFFFFFFFFFD5CB000
	0x035535C8 ADRP X10, 0xFFFFFFFFFD5A1000
	0x035535CC ADD X8, X8, 0x155

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0xE8D000
	009 Move W8, [X22+3281]
	010 Move W19, W2
	011 Move X21, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0xBCC000
	018 Move X0, [X0+2952]
	019 Call 0x1C17CF4
	020 Move X0, 0xBA1000
	021 Move X0, [X0+1560]
	022 Call 0x1C17CF4
	023 Move X0, 0xBC9000
	024 Move X0, [X0+2128]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X22+3281], W8
	028 Move X8, [X20+64]
	029 Compare X8, 0
	030 JumpIfEqual {76}
	031 Move X23, 0xBC9000
	032 Move X22, [X20+56]
	033 Move X23, [X23+2128]
	034 Compare X22, 0
	035 JumpIfEqual {38}
	036 Move W8, [X22+24]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X8, 0xBA1000
	039 Move X8, [X8+1560]
	040 Move W1, W19
	041 Move X0, [X8]
	042 Call 0x1C17D6C
	043 Move X22, X0
	044 Move [X20+56], X0
	045 Move X0, [X23]
	046 Move X23, 0xBCC000
	047 Move W8, [X0+224]
	048 Move X23, [X23+2952]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Move X0, X21
	053 Move X1, X22
	054 Move W2, W31
	055 Move W3, W19
	056 Move X4, X31
	057 Call Marshal.Copy, X0, X1, X2, X3
	058 Move X1, [X20+56]
	059 Move X21, [X20+64]
	060 Move X4, [X23]
	061 Add X0, X31, 0
	062 Move W2, W31
	063 Move W3, W19
	064 Move [X31], X31
	065 Move [X31+8], X31
	066 Call 0x2B88BB0, X0, X1, X2, X3
	067 Compare X21, 0
	068 JumpIfEqual {84}
	069 Move X1, [X31]
	070 Move X2, [X31+8]
	071 Move X8, [X21+24]
	072 Move X0, [X21+64]
	073 Move X4, [X21+40]
	074 Move W3, W31
	075 NotImplemented "Instruction BLR not yet implemented."
	076 Move X20, [X31+48]
	077 Move X19, [X31+56]
	078 Move X22, [X31+32]
	079 Move X21, [X31+40]
	080 Move X30, [X31+16]
	081 Move X23, [X31+24]
	082 Add X31, X31, 64
	083 Return 
	084 Call 0x1C17F20

Method: System.Void Encode(System.Single[] pcmSamples)

Disassembly:
	0x035535D0 MOVZ W9, 0x9
	0x035535D4 ADD X10, X10, 0x844
	0x035535D8 MOVZ W11, 0xD
	0x035535DC MOVZ W13, 0x4
	0x035535E0 ADD X0, X31, 0x0
	0x035535E4 STP X8, X9, [X31]
	0x035535E8 STP X10, X11, [X31 + 0x10]
	0x035535EC STR W13, [X31 + 0x28]
	0x035535F0 STR D0, [X31 + 0x20]
	0x035535F4 STRB W31, [X31 + 0x2C]
	0x035535F8 BL 0x1C1729C
	0x035535FC MOV X8, X0
	0x03553600 STR X0, [X20 + 0xD58]
	0x03553604 MOV W0, W19
	0x03553608 BLR X8
	0x0355360C LDP X20, X19, [X31 + 0x40]
	0x03553610 LDR X30, [X31 + 0x30]
	0x03553614 ADD X31, X31, 0x50
	0x03553618 RET
	0x0355361C STP X30, X23, [X31 - 0x30]!
	0x03553620 STP X22, X21, [X31 + 0x10]
	0x03553624 STP X20, X19, [X31 + 0x20]
	0x03553628 ADRP X21, 0xE8C000
	0x0355362C LDRB W8, [X21 + 0xD6A]
	0x03553630 MOV X20, X1
	0x03553634 MOV W19, W0
	0x03553638 TBNZ X8, 0x0, 0x355365C
	0x0355363C ADRP X0, 0xBA9000
	0x03553640 LDR X0, [X0 + 0x988]
	0x03553644 BL 0x1C16CF4
	0x03553648 ADRP X0, 0xBA0000
	0x0355364C LDR X0, [X0 + 0x988]
	0x03553650 BL 0x1C16CF4
	0x03553654 MOVZ W8, 0x1
	0x03553658 STRB W8, [X21 + 0xD6A]
	0x0355365C CBNZ W19, 0x3553670
	0x03553660 LDP X20, X19, [X31 + 0x20]
	0x03553664 LDP X22, X21, [X31 + 0x10]
	0x03553668 LDP X30, X23, [X31], #0x30
	0x0355366C RET
	0x03553670 CBNZ X20, 0x3553678
	0x03553674 BL 0x1C16F20

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xE8D000
	007 Move W8, [X21+3282]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xBCC000
	015 Move X0, [X0+2952]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3282], W8
	019 Move X0, [X19+16]
	020 Move W2, [X19+24]
	021 Move X3, [X19+40]
	022 Move X1, X20
	023 Call Wrapper.opus_encode, X0, X1, X2, X3
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X8, 0xBCC000
	026 Move X20, [X19+64]
	027 Move X1, [X19+40]
	028 Move X8, [X8+2952]
	029 Move W3, W0
	030 Add X0, X31, 0
	031 Move W2, W31
	032 Move X4, [X8]
	033 Move [X31], X31
	034 Move [X31+8], X31
	035 Call 0x2B88BB0, X0, X1, X2, X3
	036 Compare X20, 0
	037 JumpIfEqual {51}
	038 Move X1, [X31]
	039 Move X2, [X31+8]
	040 Move X8, [X20+24]
	041 Move X0, [X20+64]
	042 Move X4, [X20+40]
	043 Move W3, W31
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X30, [X31+16]
	048 Move X21, [X31+24]
	049 Add X31, X31, 48
	050 Return 
	051 Call 0x1C17F20

Method: System.Void Encode(System.Int16[] pcmSamples)

Disassembly:
	0x03553858 MOV X0, X21
	0x0355385C LDR X1, [X8 + 0x40]
	0x03553860 BL 0x1C16E00
	0x03553864 CBZ X0, 0x35538E8
	0x03553868 LDR W8, [X20 + 0x18]
	0x0355386C CMP W8, 0x1
	0x03553870 B.LS 0x35538E4
	0x03553874 ADRP X8, 0xBA0000
	0x03553878 LDR X8, [X8 + 0x758]
	0x0355387C STR X21, [X20 + 0x28]
	0x03553880 LDR W9, [X31 + 0x1C]
	0x03553884 ADD X1, X31, 0xC
	0x03553888 LDR X0, [X8]
	0x0355388C STR W9, [X31 + 0xC]
	0x03553890 BL 0x1C16E04
	0x03553894 MOV X21, X0
	0x03553898 CBZ X0, 0x35538B0
	0x0355389C LDR X8, [X20]
	0x035538A0 MOV X0, X21
	0x035538A4 LDR X1, [X8 + 0x40]
	0x035538A8 BL 0x1C16E00
	0x035538AC CBZ X0, 0x35538E8
	0x035538B0 LDR W8, [X20 + 0x18]
	0x035538B4 CMP W8, 0x2
	0x035538B8 B.LS 0x35538E4
	0x035538BC MOV W0, W19
	0x035538C0 MOV X1, X20
	0x035538C4 STR X21, [X20 + 0x30]
	0x035538C8 BL 0x355361C
	0x035538CC LDR W0, [X31 + 0x1C]
	0x035538D0 LDP X20, X19, [X31 + 0x30]
	0x035538D4 LDP X22, X21, [X31 + 0x20]
	0x035538D8 LDR X30, [X31 + 0x10]
	0x035538DC ADD X31, X31, 0x40
	0x035538E0 RET
	0x035538E4 BL 0x1C16F28
	0x035538E8 BL 0x1C16F44
	0x035538EC MOV X1, X31
	0x035538F0 BL 0x1C16DEC
	0x035538F4 ADRP X0, 0xBC9000
	0x035538F8 LDR X0, [X0 + 0x4B8]
	0x035538FC BL 0x1C16D08

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xE8D000
	007 Move W8, [X21+3283]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xBCC000
	015 Move X0, [X0+2952]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3283], W8
	019 Move X0, [X19+16]
	020 Move W2, [X19+24]
	021 Move X3, [X19+40]
	022 Move X1, X20
	023 Call Wrapper.opus_encode, X0, X1, X2, X3
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X8, 0xBCC000
	026 Move X20, [X19+64]
	027 Move X1, [X19+40]
	028 Move X8, [X8+2952]
	029 Move W3, W0
	030 Add X0, X31, 0
	031 Move W2, W31
	032 Move X4, [X8]
	033 Move [X31], X31
	034 Move [X31+8], X31
	035 Call 0x2B88BB0, X0, X1, X2, X3
	036 Compare X20, 0
	037 JumpIfEqual {51}
	038 Move X1, [X31]
	039 Move X2, [X31+8]
	040 Move X8, [X20+24]
	041 Move X0, [X20+64]
	042 Move X4, [X20+40]
	043 Move W3, W31
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X30, [X31+16]
	048 Move X21, [X31+24]
	049 Add X31, X31, 48
	050 Return 
	051 Call 0x1C17F20

Method: System.Void Dispose()

Disassembly:
	0x03553AE0 MOV X19, X0
	0x03553AE4 ADRP X0, 0xBE2000
	0x03553AE8 LDR X0, [X0 + 0x308]
	0x03553AEC BL 0x1C16D08
	0x03553AF0 MOV X1, X0
	0x03553AF4 MOV X0, X19
	0x03553AF8 MOV X2, X31
	0x03553AFC BL 0x338C448
	0x03553B00 ADRP X0, 0xBE2000
	0x03553B04 LDR X0, [X0 + 0x310]
	0x03553B08 BL 0x1C16D08
	0x03553B0C MOV X1, X0
	0x03553B10 MOV X0, X19
	0x03553B14 BL 0x1C16DEC
	0x03553B18 BL 0x1C16F20
	0x03553B1C STR X30, [X31 - 0x40]!
	0x03553B20 STP X24, X23, [X31 + 0x10]
	0x03553B24 STP X22, X21, [X31 + 0x20]
	0x03553B28 STP X20, X19, [X31 + 0x30]
	0x03553B2C ADRP X21, 0xE8C000
	0x03553B30 ADRP X19, 0xBC8000
	0x03553B34 LDRB W8, [X21 + 0xD67]
	0x03553B38 LDR X19, [X19 + 0x850]
	0x03553B3C MOV W20, W1
	0x03553B40 MOV W23, W0
	0x03553B44 TBNZ X8, 0x0, 0x3553B8C
	0x03553B48 ADRP X0, 0xBE2000
	0x03553B4C LDR X0, [X0 + 0x288]
	0x03553B50 BL 0x1C16CF4
	0x03553B54 ADRP X0, 0xBC8000
	0x03553B58 LDR X0, [X0 + 0x850]
	0x03553B5C BL 0x1C16CF4
	0x03553B60 ADRP X0, 0xBA0000
	0x03553B64 LDR X0, [X0 + 0x9D0]
	0x03553B68 BL 0x1C16CF4
	0x03553B6C ADRP X0, 0xBC9000
	0x03553B70 LDR X0, [X0 + 0xE00]
	0x03553B74 BL 0x1C16CF4
	0x03553B78 ADRP X0, 0xBE2000
	0x03553B7C LDR X0, [X0 + 0x318]
	0x03553B80 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xE8D000
	005 Move W8, [X20+3284]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xBE3000
	012 Move X0, [X0+712]
	013 Call 0x1C17CF4
	014 Move X0, 0xBCC000
	015 Move X0, [X0+2912]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3284], W8
	019 Move X0, [X19+16]
	020 Move X1, X31
	021 Move X2, X31
	022 Call IntPtr.op_Inequality, X0, X1
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {47}
	027 Move X20, 0xBCC000
	028 Move X20, [X20+2912]
	029 Move X0, [X20]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {35}
	033 Call 0x1C17DFC
	034 Move X0, [X20]
	035 Move X8, [X0+184]
	036 Move X0, [X8+16]
	037 Compare X0, 0
	038 JumpIfEqual {51}
	039 Move X8, 0xBE3000
	040 Move X1, [X19+16]
	041 Move X8, [X8+712]
	042 Move X2, [X8]
	043 Call Dictionary`2<IntPtr, Object>.Remove, X0, X1
	044 Move X0, [X19+16]
	045 Call Wrapper.opus_encoder_destroy, X0
	046 Move [X19+16], X31
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Return 
	051 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x03553BDC MOV X0, X8
	0x03553BE0 BL 0x1C16D6C
	0x03553BE4 MOV X22, X0
	0x03553BE8 CBZ X0, 0x3553CC8
	0x03553BEC ADRP X24, 0xBE2000
	0x03553BF0 LDR X24, [X24 + 0x318]
	0x03553BF4 LDR X0, [X24]
	0x03553BF8 CBZ X0, 0x3553C0C
	0x03553BFC LDR X8, [X22]
	0x03553C00 LDR X1, [X8 + 0x40]
	0x03553C04 BL 0x1C16E00
	0x03553C08 CBZ X0, 0x3553CD8
	0x03553C0C LDR W8, [X22 + 0x18]
	0x03553C10 CBZ W8, 0x3553CCC
	0x03553C14 LDR X8, [X24]
	0x03553C18 ADRP X9, 0xBC9000
	0x03553C1C LDR X9, [X9 + 0xE00]
	0x03553C20 STR X8, [X22 + 0x20]
	0x03553C24 STR W23, [X31 + 0xC]
	0x03553C28 LDR X0, [X9]
	0x03553C2C ADD X1, X31, 0xC
	0x03553C30 BL 0x1C16E04
	0x03553C34 MOV X23, X0
	0x03553C38 CBZ X0, 0x3553C50
	0x03553C3C LDR X8, [X22]
	0x03553C40 LDR X1, [X8 + 0x40]
	0x03553C44 MOV X0, X23
	0x03553C48 BL 0x1C16E00
	0x03553C4C CBZ X0, 0x3553CE4
	0x03553C50 LDR W8, [X22 + 0x18]
	0x03553C54 CMP W8, 0x1
	0x03553C58 B.LS 0x3553CD0
	0x03553C5C ADRP X8, 0xBE2000
	0x03553C60 LDR X8, [X8 + 0x288]
	0x03553C64 STR X23, [X22 + 0x28]
	0x03553C68 STR W20, [X31 + 0x8]
	0x03553C6C LDR X0, [X8]
	0x03553C70 ADD X1, X31, 0x8
	0x03553C74 BL 0x1C16E04
	0x03553C78 MOV X20, X0
	0x03553C7C CBZ X0, 0x3553C94
	0x03553C80 LDR X8, [X22]
	0x03553C84 LDR X1, [X8 + 0x40]
	0x03553C88 MOV X0, X20
	0x03553C8C BL 0x1C16E00
	0x03553C90 CBZ X0, 0x3553CF0
	0x03553C94 LDR W8, [X22 + 0x18]
	0x03553C98 CMP W8, 0x2
	0x03553C9C B.LS 0x3553CD4
	0x03553CA0 STR X20, [X22 + 0x30]
	0x03553CA4 MOV W0, W21
	0x03553CA8 MOV X1, X22
	0x03553CAC BL 0x355361C
	0x03553CB0 MOV X0, X19
	0x03553CB4 LDP X20, X19, [X31 + 0x30]
	0x03553CB8 LDP X22, X21, [X31 + 0x20]
	0x03553CBC LDP X24, X23, [X31 + 0x10]
	0x03553CC0 LDR X30, [X31], #0x40
	0x03553CC4 RET
	0x03553CC8 BL 0x1C16F20
	0x03553CCC BL 0x1C16F28

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+32], X24
	004 Move [X31+40], X23
	005 Move [X31+48], X22
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X23, 0xE8D000
	010 Move X24, 0xBA1000
	011 Move X22, 0xBAC000
	012 Move X20, 0xBCC000
	013 Move X21, 0xBE3000
	014 Move X19, 0xBE3000
	015 Move W8, [X23+3285]
	016 Move X24, [X24+1560]
	017 Move X22, [X22+3688]
	018 Move X20, [X20+2912]
	019 Move X21, [X21+720]
	020 Move X19, [X19+728]
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {42}
	025 Move X0, 0xBAC000
	026 Move X0, [X0+3688]
	027 Call 0x1C17CF4
	028 Move X0, 0xBA1000
	029 Move X0, [X0+1560]
	030 Call 0x1C17CF4
	031 Move X0, 0xBE3000
	032 Move X0, [X0+728]
	033 Call 0x1C17CF4
	034 Move X0, 0xBE3000
	035 Move X0, [X0+720]
	036 Call 0x1C17CF4
	037 Move X0, 0xBCC000
	038 Move X0, [X0+2912]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X23+3285], W8
	042 Move X0, [X24]
	043 Move W1, W31
	044 Call 0x1C17D6C
	045 Move X2, [X22]
	046 Move X1, X0
	047 Add X0, X31, 0
	048 Move [X31], X31
	049 Move [X31+8], X31
	050 Call 0x2B88B6C, X0, X1
	051 Move X8, [X20]
	052 Move V0, [X31]
	053 Move X8, [X8+184]
	054 Move [X8], V0
	055 Move X0, [X21]
	056 Call 0x1C17F10
	057 Move X1, [X19]
	058 Move X19, X0
	059 Call Dictionary`2<IntPtr, Object>..ctor, X0
	060 Move X8, [X20]
	061 Move X22, [X31+48]
	062 Move X21, [X31+56]
	063 Move X24, [X31+32]
	064 Move X23, [X31+40]
	065 Move X30, [X31+16]
	066 Move X8, [X8+184]
	067 Move [X8+16], X19
	068 Move X20, [X31+64]
	069 Move X19, [X31+72]
	070 Add X31, X31, 80
	071 Return 

