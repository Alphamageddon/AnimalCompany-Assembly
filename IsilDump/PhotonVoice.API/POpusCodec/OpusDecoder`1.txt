Type: POpusCodec.OpusDecoder`1

Method: System.Void .ctor(System.Action`1<Photon.Voice.FrameOut`1<T>> output, POpusCodec.Enums.SamplingRate outputSamplingRateHz, POpusCodec.Enums.Channels channels, System.Int32 frameSamples)

Disassembly:
	0x0249CBA0 LDR X8, [X19 + 0x20]
	0x0249CBA4 LDR X8, [X8 + 0xC0]
	0x0249CBA8 LDR X0, [X8 + 0x38]
	0x0249CBAC LDRB W8, [X0 + 0x135]
	0x0249CBB0 TBNZ X8, 0x0, 0x249CBB8
	0x0249CBB4 BL 0x1C5C684
	0x0249CBB8 MUL W1, W23, W21
	0x0249CBBC BL 0x1C16D6C
	0x0249CBC0 STR X0, [X22 + 0x38]
	0x0249CBC4 MOV W0, W20
	0x0249CBC8 MOV W1, W21
	0x0249CBCC MOV X2, X31
	0x0249CBD0 MOV X3, X31
	0x0249CBD4 BL 0x3553B1C
	0x0249CBD8 MOV X1, X31
	0x0249CBDC MOV X2, X31
	0x0249CBE0 STR X0, [X22 + 0x28]
	0x0249CBE4 BL 0x33BE5B0
	0x0249CBE8 TBNZ X0, 0x0, 0x249CC68
	0x0249CBEC LDUR X8, [X29 - 0x38]
	0x0249CBF0 LDR X8, [X8 + 0x28]
	0x0249CBF4 LDUR X9, [X29 - 0x8]
	0x0249CBF8 CMP X8, X9
	0x0249CBFC B.NE 0x249CD40
	0x0249CC00 ADD X31, X29, 0x0
	0x0249CC04 LDP X20, X19, [X31 + 0x50]
	0x0249CC08 LDP X22, X21, [X31 + 0x40]
	0x0249CC0C LDP X24, X23, [X31 + 0x30]
	0x0249CC10 LDP X26, X25, [X31 + 0x20]
	0x0249CC14 LDP X28, X27, [X31 + 0x10]
	0x0249CC18 LDP X29, X30, [X31], #0x60
	0x0249CC1C RET
	0x0249CC20 ADRP X0, 0x1C5F000
	0x0249CC24 LDR X0, [X0 + 0x760]
	0x0249CC28 BL 0x1C16D08
	0x0249CC2C BL 0x1C16F10
	0x0249CC30 MOV X20, X0
	0x0249CC34 ADRP X0, 0x1C80000
	0x0249CC38 LDR X0, [X0 + 0xDE0]
	0x0249CC3C BL 0x1C16D08
	0x0249CC40 MOV X21, X0
	0x0249CC44 ADRP X0, 0x1C80000
	0x0249CC48 LDR X0, [X0 + 0xDE8]
	0x0249CC4C BL 0x1C16D08
	0x0249CC50 MOV X2, X0
	0x0249CC54 MOV X0, X20
	0x0249CC58 MOV X1, X21
	0x0249CC5C MOV X3, X31
	0x0249CC60 BL 0x3311888
	0x0249CC64 B 0x249CC9C
	0x0249CC68 ADRP X0, 0x1C80000
	0x0249CC6C LDR X0, [X0 + 0xDF0]
	0x0249CC70 BL 0x1C16D08
	0x0249CC74 BL 0x1C16F10
	0x0249CC78 MOV X20, X0
	0x0249CC7C ADRP X0, 0x1C80000
	0x0249CC80 LDR X0, [X0 + 0xDF8]
	0x0249CC84 BL 0x1C16D08
	0x0249CC88 MOV X2, X0
	0x0249CC8C MOVN W1, 0x6
	0x0249CC90 MOV X0, X20
	0x0249CC94 MOV X3, X31
	0x0249CC98 BL 0x35523B8
	0x0249CC9C MOV X0, X20
	0x0249CCA0 MOV X1, X19
	0x0249CCA4 BL 0x1C16DEC
	0x0249CCA8 ADRP X0, 0x1C80000
	0x0249CCAC LDR X0, [X0 + 0xE00]
	0x0249CCB0 BL 0x1C16D08
	0x0249CCB4 MOVN X8, 0x0
	0x0249CCB8 STP X0, X8, [X29 - 0x28]
	0x0249CCBC SUB X0, X29, 0x28
	0x0249CCC0 MOV X1, X31
	0x0249CCC4 STUR W20, [X29 - 0x18]
	0x0249CCC8 BL 0x33B162C
	0x0249CCCC MOV X20, X0
	0x0249CCD0 ADRP X0, 0x1C80000
	0x0249CCD4 LDR X0, [X0 + 0xE08]
	0x0249CCD8 BL 0x1C16D08
	0x0249CCDC MOV X21, X0
	0x0249CCE0 ADRP X0, 0x1C58000
	0x0249CCE4 LDR X0, [X0 + 0x608]
	0x0249CCE8 BL 0x1C16D08
	0x0249CCEC MOV X2, X0
	0x0249CCF0 MOV X0, X21
	0x0249CCF4 MOV X1, X20
	0x0249CCF8 MOV X3, X31
	0x0249CCFC BL 0x32274B8
	0x0249CD00 MOV X20, X0
	0x0249CD04 ADRP X0, 0x1C5F000
	0x0249CD08 LDR X0, [X0 + 0x760]
	0x0249CD0C BL 0x1C16D08
	0x0249CD10 BL 0x1C16F10
	0x0249CD14 MOV X21, X0
	0x0249CD18 ADRP X0, 0x1C80000
	0x0249CD1C LDR X0, [X0 + 0xE10]
	0x0249CD20 BL 0x1C16D08
	0x0249CD24 MOV X1, X0
	0x0249CD28 MOV X0, X21
	0x0249CD2C MOV X2, X20
	0x0249CD30 MOV X3, X31
	0x0249CD34 BL 0x3311888
	0x0249CD38 MOV X0, X21
	0x0249CD3C B 0x249CCA0
	0x0249CD40 BL 0x3EB1B20
	0x0249CD44 SUB X31, X31, 0xC0
	0x0249CD48 STR X30, [X31 + 0x80]
	0x0249CD4C STP X24, X23, [X31 + 0x90]
	0x0249CD50 STP X22, X21, [X31 + 0xA0]
	0x0249CD54 STP X20, X19, [X31 + 0xB0]
	0x0249CD58 ADRP X23, 0x1F3D000
	0x0249CD5C LDRB W8, [X23 + 0xBA1]
	0x0249CD60 MOV X20, X5
	0x0249CD64 MOV W19, W4
	0x0249CD68 MOV W22, W2
	0x0249CD6C MOV X24, X1
	0x0249CD70 MOV X21, X0
	0x0249CD74 TBNZ X8, 0x0, 0x249CD98
	0x0249CD78 ADRP X0, 0x1C7F000
	0x0249CD7C LDR X0, [X0 + 0x820]
	0x0249CD80 BL 0x1C16CF4
	0x0249CD84 ADRP X0, 0x1C57000
	0x0249CD88 LDR X0, [X0 + 0x638]
	0x0249CD8C BL 0x1C16CF4
	0x0249CD90 MOVZ W8, 0x1
	0x0249CD94 STRB W8, [X23 + 0xBA1]
	0x0249CD98 LDRB W8, [X21 + 0x18]
	0x0249CD9C LDR X23, [X21 + 0x28]
	0x0249CDA0 CBZ W8, 0x249CE2C
	0x0249CDA4 LDP V2, V0, [X24 + 0x10]
	0x0249CDA8 LDR X8, [X24 + 0x30]
	0x0249CDAC LDR V1, [X24]
	0x0249CDB0 ADRP X9, 0x1C57000
	0x0249CDB4 LDR X9, [X9 + 0x638]
	0x0249CDB8 STR X8, [X31 + 0x30]
	0x0249CDBC STP V2, V0, [X31 + 0x10]
	0x0249CDC0 STR V1, [X31]
	0x0249CDC4 LDR X0, [X21 + 0x38]
	0x0249CDC8 LDR X1, [X9]
	0x0249CDCC LDR W24, [X21 + 0x34]
	0x0249CDD0 BL 0x1C16E00
	0x0249CDD4 MOV X2, X0
	0x0249CDD8 ADD X1, X31, 0x0
	0x0249CDDC MOV X0, X23
	0x0249CDE0 MOV W3, W24
	0x0249CDE4 MOV W4, W22
	0x0249CDE8 MOV X5, X31
	0x0249CDEC BL 0x35540D0
	0x0249CDF0 CBZ W0, 0x249CE14
	0x0249CDF4 LDR X8, [X20 + 0x20]
	0x0249CDF8 LDR X1, [X21 + 0x38]
	0x0249CDFC AND W2, W19, 0x1
	0x0249CE00 MOV X0, X21
	0x0249CE04 LDR X8, [X8 + 0xC0]
	0x0249CE08 LDR X3, [X8 + 0x40]
	0x0249CE0C LDR X8, [X3]
	0x0249CE10 BLR X8
	0x0249CE14 LDP X20, X19, [X31 + 0xB0]
	0x0249CE18 LDP X22, X21, [X31 + 0xA0]
	0x0249CE1C LDP X24, X23, [X31 + 0x90]
	0x0249CE20 LDR X30, [X31 + 0x80]
	0x0249CE24 ADD X31, X31, 0xC0
	0x0249CE28 RET
	0x0249CE2C LDP V2, V0, [X24 + 0x10]
	0x0249CE30 LDR X8, [X24 + 0x30]
	0x0249CE34 LDR V1, [X24]
	0x0249CE38 ADRP X9, 0x1C7F000
	0x0249CE3C LDR X9, [X9 + 0x820]
	0x0249CE40 STR X8, [X31 + 0x70]
	0x0249CE44 STP V2, V0, [X31 + 0x50]
	0x0249CE48 STR V1, [X31 + 0x4]
	0x0249CE4C LDR X0, [X21 + 0x38]
	0x0249CE50 LDR X1, [X9]
	0x0249CE54 LDR W24, [X21 + 0x34]
	0x0249CE58 BL 0x1C16E00
	0x0249CE5C MOV X2, X0
	0x0249CE60 ADD X1, X31, 0x40
	0x0249CE64 MOV X0, X23
	0x0249CE68 MOV W3, W24
	0x0249CE6C MOV W4, W22
	0x0249CE70 MOV X5, X31
	0x0249CE74 BL 0x3553DAC
	0x0249CE78 CBNZ W0, 0x249CDF4
	0x0249CE7C B 0x249CE14
	0x0249CE80 STR X30, [X31 - 0x20]!
	0x0249CE84 STP X20, X19, [X31 + 0x10]
	0x0249CE88 MOV X8, X0
	0x0249CE8C LDR X0, [X0 + 0x20]
	0x0249CE90 CBZ X0, 0x249CEEC

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+32], X30
	003 Move [X31+48], X26
	004 Move [X31+56], X25
	005 Move [X31+64], X24
	006 Move [X31+72], X23
	007 Move [X31+80], X22
	008 Move [X31+88], X21
	009 Move [X31+96], X20
	010 Move [X31+104], X19
	011 Move X25, 0x1F3E000
	012 Move W8, [X25+2970]
	013 Move X19, X5
	014 Move W23, W4
	015 Move W22, W3
	016 Move W20, W2
	017 Move X24, X1
	018 Move X21, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {31}
	023 Move X0, 0x1C80000
	024 Move X0, [X0+2128]
	025 Call 0x1C17CF4
	026 Move X0, 0x1C58000
	027 Move X0, [X0+2704]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X25+2970], W8
	031 Move X8, [X19+32]
	032 Move X8, [X8+192]
	033 Move X0, [X8]
	034 Move W8, [X0+309]
	035 Move TEMP, X8
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {40}
	039 Call 0x1C5D684
	040 Move X26, 0x1C80000
	041 Move X26, [X26+2128]
	042 Call 0x1C17F10
	043 Move X8, [X19+32]
	044 Move X1, X31
	045 Move W2, W31
	046 Move X25, X0
	047 Move X8, [X8+192]
	048 Move X3, [X8+8]
	049 Call 0x2D25ABC, X0, X1, X2
	050 Move X0, X21
	051 Move X1, X31
	052 Move [X21+32], X25
	053 Move [X21+40], X31
	054 Call Object..ctor, X0
	055 Move [X21+16], X24
	056 NotImplemented "Instruction STRH not yet implemented."
	057 Move X8, [X19+32]
	058 Add X1, X31, 8
	059 Move X8, [X8+192]
	060 Move X0, [X8+40]
	061 Call 0x1C17E04
	062 Compare X0, 0
	063 JumpIfEqual {70}
	064 Move X8, 0x1C58000
	065 Move X8, [X8+2704]
	066 Move X9, [X0]
	067 Move X8, [X8]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 NotImplemented "Instruction CSET not yet implemented."
	070 Move W8, W31
	071 Move [X21+24], W8
	072 Move X0, [X26]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 Move X8, [X19+32]
	078 Move W0, W31
	079 Move X8, [X8+192]
	080 Move X1, [X8+48]
	081 Call 0x2216D84, X0
	082 Move W8, 0x3E7F
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move [X21+28], W0
	085 Move W8, 0x3E80
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move W8, 0x5DC0
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move W8, 0xBB80
	090 Move W8, 0x1F40
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move W8, 0x2EE0
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Subtract W8, W22, 1
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move [X21+48], W22
	097 Move [X21+52], W23
	098 Move X8, [X19+32]
	099 Move X8, [X8+192]
	100 Move X0, [X8+56]
	101 Move W8, [X0+309]
	102 Move TEMP, X8
	103 And TEMP, TEMP, 1
	104 Compare TEMP, 1
	105 JumpIfEqual {107}
	106 Call 0x1C5D684
	107 Multiply W1, W23, W22
	108 Call 0x1C17D6C
	109 Move [X21+56], X0
	110 Move W0, W20
	111 Move W1, W22
	112 Move X2, X31
	113 Move X3, X31
	114 Call Wrapper.opus_decoder_create, X0, X1, X2
	115 Move X1, X31
	116 Move X2, X31
	117 Move [X21+40], X0
	118 Call IntPtr.op_Equality, X0, X1
	119 Move TEMP, X0
	120 And TEMP, TEMP, 1
	121 Compare TEMP, 1
	122 JumpIfEqual {151}
	123 Move X20, [X31+96]
	124 Move X19, [X31+104]
	125 Move X22, [X31+80]
	126 Move X21, [X31+88]
	127 Move X24, [X31+64]
	128 Move X23, [X31+72]
	129 Move X26, [X31+48]
	130 Move X25, [X31+56]
	131 Move X30, [X31+32]
	132 Add X31, X31, 112
	133 Return 
	134 Move X0, 0x1C60000
	135 Move X0, [X0+1888]
	136 Call 0x1C17D08
	137 Call 0x1C17F10
	138 Move X20, X0
	139 Move X0, 0x1C81000
	140 Move X0, [X0+3552]
	141 Call 0x1C17D08
	142 Move X21, X0
	143 Move X0, 0x1C81000
	144 Move X0, [X0+3560]
	145 Call 0x1C17D08
	146 Move X2, X0
	147 Move X0, X20
	148 Move X1, X21
	149 Move X3, X31
	150 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	151 Move X0, 0x1C81000
	152 Move X0, [X0+3568]
	153 Call 0x1C17D08
	154 Call 0x1C17F10
	155 Move X20, X0
	156 Move X0, 0x1C81000
	157 Move X0, [X0+3576]
	158 Call 0x1C17D08
	159 Move X2, X0
	160 Move TEMP, 6
	161 Not TEMP
	162 Move W1, TEMP
	163 Move X0, X20
	164 Move X3, X31
	165 Call OpusException..ctor, X0, X1, X2
	166 Move X0, X20
	167 Move X1, X19
	168 Call 0x1C17DEC
	169 Move X0, 0x1C81000
	170 Move X0, [X0+3584]
	171 Call 0x1C17D08
	172 Move TEMP, 0
	173 Not TEMP
	174 Move X8, TEMP
	175 Move [X31+8], X0
	176 Move [X31+16], X8
	177 Add X0, X31, 8
	178 Move X1, X31
	179 Move [X31+24], W20
	180 Call Enum.ToString, X0
	181 Move X20, X0
	182 Move X0, 0x1C81000
	183 Move X0, [X0+3592]
	184 Call 0x1C17D08
	185 Move X21, X0
	186 Move X0, 0x1C59000
	187 Move X0, [X0+1544]
	188 Call 0x1C17D08
	189 Move X2, X0
	190 Move X0, X21
	191 Move X1, X20
	192 Move X3, X31
	193 Call String.Concat, X0, X1, X2
	194 Move X20, X0
	195 Move X0, 0x1C60000
	196 Move X0, [X0+1888]
	197 Call 0x1C17D08
	198 Call 0x1C17F10
	199 Move X21, X0
	200 Move X0, 0x1C81000
	201 Move X0, [X0+3600]
	202 Call 0x1C17D08
	203 Move X1, X0
	204 Move X0, X21
	205 Move X2, X20
	206 Move X3, X31
	207 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	208 Move X0, X21

Method: System.Void decodePacket(Photon.Voice.FrameBuffer data, System.Int32 decodeFEC, System.Int32 channels, System.Boolean endOfStream)

Disassembly:
	0x0249CE94 LDR X9, [X3 + 0x20]
	0x0249CE98 MOV X19, X3
	0x0249CE9C LDR X20, [X8 + 0x10]
	0x0249CEA0 AND W2, W2, 0x1
	0x0249CEA4 LDR X9, [X9 + 0xC0]
	0x0249CEA8 LDR X3, [X9 + 0x48]
	0x0249CEAC LDR X8, [X3]
	0x0249CEB0 BLR X8
	0x0249CEB4 CBZ X20, 0x249CEEC
	0x0249CEB8 LDR X8, [X19 + 0x20]
	0x0249CEBC MOV X4, X0
	0x0249CEC0 ADD X3, X31, 0x8
	0x0249CEC4 MOV X2, X20
	0x0249CEC8 LDR X8, [X8 + 0xC0]
	0x0249CECC LDR X1, [X8 + 0x50]
	0x0249CED0 LDR X0, [X1]
	0x0249CED4 STR X4, [X31 + 0x8]
	0x0249CED8 LDR X8, [X1 + 0x10]
	0x0249CEDC BLR X8
	0x0249CEE0 LDP X20, X19, [X31 + 0x10]
	0x0249CEE4 LDR X30, [X31], #0x20
	0x0249CEE8 RET
	0x0249CEEC BL 0x1C16F20
	0x0249CEF0 SUB X31, X31, 0x140
	0x0249CEF4 STP X29, X30, [X31 + 0x100]
	0x0249CEF8 STP X24, X23, [X31 + 0x110]
	0x0249CEFC STP X22, X21, [X31 + 0x120]
	0x0249CF00 STP X20, X19, [X31 + 0x130]
	0x0249CF04 ADRP X24, 0x1F3D000
	0x0249CF08 ADRP X23, 0x1C80000
	0x0249CF0C LDRB W8, [X24 + 0xBA2]
	0x0249CF10 LDR X23, [X23 + 0xE18]
	0x0249CF14 MOV X20, X3
	0x0249CF18 MOV W21, W2
	0x0249CF1C MOV X22, X1
	0x0249CF20 MOV X19, X0
	0x0249CF24 TBNZ X8, 0x0, 0x249CF3C
	0x0249CF28 ADRP X0, 0x1C80000
	0x0249CF2C LDR X0, [X0 + 0xE18]
	0x0249CF30 BL 0x1C16CF4
	0x0249CF34 MOVZ W8, 0x1
	0x0249CF38 STRB W8, [X24 + 0xBA2]
	0x0249CF3C LDR X0, [X23]
	0x0249CF40 LDR W8, [X0 + 0xE0]
	0x0249CF44 CBNZ W8, 0x249CF4C
	0x0249CF48 BL 0x1C16DFC
	0x0249CF4C LDR X8, [X22]
	0x0249CF50 CBZ X8, 0x249CFE0
	0x0249CF54 LDR X0, [X23]
	0x0249CF58 LDR W8, [X0 + 0xE0]
	0x0249CF5C CBNZ W8, 0x249CF64
	0x0249CF60 BL 0x1C16DFC
	0x0249CF64 MOV X0, X22
	0x0249CF68 MOV X1, X31
	0x0249CF6C BL 0x355406C
	0x0249CF70 MOV X1, X31
	0x0249CF74 BL 0x35534A0
	0x0249CF78 MOV X23, X19
	0x0249CF7C LDRB W8, [X23 + 0x40]!
	0x0249CF80 CBZ W8, 0x249D02C
	0x0249CF84 ADDS W31, W0, 0x4
	0x0249CF88 B.EQ 0x249CFEC
	0x0249CF8C LDR X8, [X22 + 0x30]
	0x0249CF90 LDP V1, V0, [X22 + 0x10]
	0x0249CF94 LDR V2, [X22]
	0x0249CF98 ADD X1, X31, 0x40
	0x0249CF9C STR X8, [X31 + 0xB0]
	0x0249CFA0 STP V1, V0, [X31 + 0x90]
	0x0249CFA4 STR V2, [X31 + 0x8]
	0x0249CFA8 LDR X9, [X20 + 0x20]
	0x0249CFAC LDR W3, [X19 + 0x30]
	0x0249CFB0 MOVZ W2, 0x1
	0x0249CFB4 MOV X0, X19
	0x0249CFB8 LDR X9, [X9 + 0xC0]
	0x0249CFBC MOV W4, W31
	0x0249CFC0 LDR X10, [X9 + 0x58]
	0x0249CFC4 LDR X10, [X10]
	0x0249CFC8 STP V2, V1, [X31 + 0x40]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+128], X30
	003 Move [X31+144], X24
	004 Move [X31+152], X23
	005 Move [X31+160], X22
	006 Move [X31+168], X21
	007 Move [X31+176], X20
	008 Move [X31+184], X19
	009 Move X23, 0x1F3E000
	010 Move W8, [X23+2971]
	011 Move X20, X5
	012 Move W19, W4
	013 Move W22, W2
	014 Move X24, X1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x1C80000
	021 Move X0, [X0+2080]
	022 Call 0x1C17CF4
	023 Move X0, 0x1C58000
	024 Move X0, [X0+1592]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X23+2971], W8
	028 Move W8, [X21+24]
	029 Move X23, [X21+40]
	030 Compare W8, 0
	031 JumpIfEqual {71}
	032 Move V2, [X24+16]
	033 Move V0, [X24+32]
	034 Move X8, [X24+48]
	035 Move V1, [X24]
	036 Move X9, 0x1C58000
	037 Move X9, [X9+1592]
	038 Move [X31+48], X8
	039 Move [X31+16], V2
	040 Move [X31+24], V0
	041 Move [X31], V1
	042 Move X0, [X21+56]
	043 Move X1, [X9]
	044 Move W24, [X21+52]
	045 Call 0x1C17E00
	046 Move X2, X0
	047 Add X1, X31, 0
	048 Move X0, X23
	049 Move W3, W24
	050 Move W4, W22
	051 Move X5, X31
	052 Call Wrapper.opus_decode, X0, X1, X2, X3, X4
	053 Compare W0, 0
	054 JumpIfEqual {62}
	055 Move X8, [X20+32]
	056 Move X1, [X21+56]
	057 And W2, W19, 1
	058 Move X0, X21
	059 Move X8, [X8+192]
	060 Move X3, [X8+64]
	061 Call 0x249CFCC, X0, X1, X2
	062 Move X20, [X31+176]
	063 Move X19, [X31+184]
	064 Move X22, [X31+160]
	065 Move X21, [X31+168]
	066 Move X24, [X31+144]
	067 Move X23, [X31+152]
	068 Move X30, [X31+128]
	069 Add X31, X31, 192
	070 Return 
	071 Move V2, [X24+16]
	072 Move V0, [X24+32]
	073 Move X8, [X24+48]
	074 Move V1, [X24]
	075 Move X9, 0x1C80000
	076 Move X9, [X9+2080]
	077 Move [X31+112], X8
	078 Move [X31+80], V2
	079 Move [X31+88], V0
	080 Move [X31+4], V1
	081 Move X0, [X21+56]
	082 Move X1, [X9]
	083 Move W24, [X21+52]
	084 Call 0x1C17E00
	085 Move X2, X0
	086 Add X1, X31, 64
	087 Move X0, X23
	088 Move W3, W24
	089 Move W4, W22
	090 Move X5, X31
	091 Call Wrapper.opus_decode, X0, X1, X2, X3, X4
	092 Compare W0, 0
	093 JumpIfNotEqual {55}

Method: System.Void procOutput(T[] buffer, System.Boolean endOfStream)

Disassembly:
	0x0249CFCC STR V0, [X31 + 0x6]
	0x0249CFD0 STR X8, [X31 + 0x70]
	0x0249CFD4 LDR X5, [X9 + 0x58]
	0x0249CFD8 BLR X10
	0x0249CFDC B 0x249D03C
	0x0249CFE0 MOV X23, X19
	0x0249CFE4 LDRB W8, [X23 + 0x40]!
	0x0249CFE8 CBZ W8, 0x249D034
	0x0249CFEC LDR X8, [X20 + 0x20]
	0x0249CFF0 MOVI V0.2D, 0x0
	0x0249CFF4 LDR W3, [X19 + 0x30]
	0x0249CFF8 ADD X1, X31, 0xC0
	0x0249CFFC LDR X8, [X8 + 0xC0]
	0x0249D000 MOV X0, X19
	0x0249D004 MOV W2, W31
	0x0249D008 MOV W4, W31
	0x0249D00C LDR X9, [X8 + 0x58]
	0x0249D010 LDR X9, [X9]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, X0
	004 Move X0, [X0+32]
	005 Compare X0, 0
	006 JumpIfEqual {22}
	007 Move X9, [X3+32]
	008 Move X19, [X8+16]
	009 And W2, W2, 1
	010 Move X9, [X9+192]
	011 Move X3, [X9+72]
	012 Call 0x2D25AF0, X0, X1, X2
	013 Compare X19, 0
	014 JumpIfEqual {22}
	015 Move X1, X0
	016 Move X3, [X19+24]
	017 Move X0, [X19+64]
	018 Move X2, [X19+40]
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 CallNoReturn X3
	022 Call 0x1C17F20

Method: System.Void DecodePacket(ref Photon.Voice.FrameBuffer packetData, System.Boolean endOfStream)

Disassembly:
	0x0249D014 STR X31, [X31 + 0xF0]
	0x0249D018 STP V0, V0, [X31 + 0xD0]
	0x0249D01C STR V0, [X31 + 0xC]
	0x0249D020 LDR X5, [X8 + 0x58]
	0x0249D024 BLR X9
	0x0249D028 B 0x249D034
	0x0249D02C ADDS W31, W0, 0x4
	0x0249D030 B.NE 0x249D03C
	0x0249D034 MOVZ W8, 0x1
	0x0249D038 B 0x249D090
	0x0249D03C LDR X8, [X22 + 0x30]
	0x0249D040 LDP V1, V0, [X22 + 0x10]
	0x0249D044 LDR V2, [X22]
	0x0249D048 AND W4, W21, 0x1
	0x0249D04C STR X8, [X31 + 0xB0]
	0x0249D050 STP V1, V0, [X31 + 0x90]
	0x0249D054 STR V2, [X31 + 0x8]
	0x0249D058 LDR X9, [X20 + 0x20]
	0x0249D05C LDR W3, [X19 + 0x30]
	0x0249D060 ADD X1, X31, 0x0
	0x0249D064 MOV X0, X19
	0x0249D068 LDR X9, [X9 + 0xC0]
	0x0249D06C MOV W2, W31
	0x0249D070 LDR X10, [X9 + 0x58]
	0x0249D074 LDR X10, [X10]
	0x0249D078 STP V2, V1, [X31]
	0x0249D07C STR V0, [X31 + 0x2]
	0x0249D080 STR X8, [X31 + 0x30]
	0x0249D084 LDR X5, [X9 + 0x58]
	0x0249D088 BLR X10
	0x0249D08C MOV W8, W31
	0x0249D090 STRB W8, [X23]
	0x0249D094 LDP X20, X19, [X31 + 0x130]
	0x0249D098 LDP X22, X21, [X31 + 0x120]
	0x0249D09C LDP X24, X23, [X31 + 0x110]
	0x0249D0A0 LDP X29, X30, [X31 + 0x100]
	0x0249D0A4 ADD X31, X31, 0x140
	0x0249D0A8 RET
	0x0249D0AC STP X30, X19, [X31 - 0x10]!
	0x0249D0B0 MOV X19, X0
	0x0249D0B4 LDR X0, [X0 + 0x28]
	0x0249D0B8 MOV X1, X31
	0x0249D0BC MOV X2, X31
	0x0249D0C0 BL 0x33C5D2C
	0x0249D0C4 TBZ X0, 0x0, 0x249D0D8
	0x0249D0C8 LDR X0, [X19 + 0x28]
	0x0249D0CC MOV X1, X31
	0x0249D0D0 BL 0x3552E60
	0x0249D0D4 STR X31, [X19 + 0x28]
	0x0249D0D8 LDP X30, X19, [X31], #0x10
	0x0249D0DC RET
	0x0249D0E0 STR X30, [X31 - 0x20]!
	0x0249D0E4 STP X20, X19, [X31 + 0x10]
	0x0249D0E8 MOV X19, X0
	0x0249D0EC LDR X0, [X0 + 0x20]
	0x0249D0F0 LDRB W8, [X0 + 0x135]
	0x0249D0F4 TBNZ X8, 0x0, 0x249D0FC
	0x0249D0F8 BL 0x1C5C684
	0x0249D0FC LDR X8, [X0 + 0xC0]
	0x0249D100 LDR X0, [X8 + 0x38]
	0x0249D104 LDRB W8, [X0 + 0x135]
	0x0249D108 TBNZ X8, 0x0, 0x249D110
	0x0249D10C BL 0x1C5C684
	0x0249D110 MOV W1, W31
	0x0249D114 BL 0x1C16D6C
	0x0249D118 LDR X8, [X19 + 0x20]
	0x0249D11C MOV X20, X0
	0x0249D120 LDRB W9, [X8 + 0x135]
	0x0249D124 TBNZ X9, 0x0, 0x249D134
	0x0249D128 MOV X0, X8
	0x0249D12C BL 0x1C5C684
	0x0249D130 MOV X8, X0
	0x0249D134 LDR X8, [X8 + 0xC0]
	0x0249D138 LDR X0, [X8 + 0x60]
	0x0249D13C LDRB W8, [X0 + 0x135]
	0x0249D140 TBNZ X8, 0x0, 0x249D148
	0x0249D144 BL 0x1C5C684
	0x0249D148 LDR X8, [X0 + 0xB8]
	0x0249D14C STR X20, [X8]
	0x0249D150 LDR X0, [X19 + 0x20]
	0x0249D154 LDRB W8, [X0 + 0x135]
	0x0249D158 TBNZ X8, 0x0, 0x249D160
	0x0249D15C BL 0x1C5C684
	0x0249D160 LDR X8, [X0 + 0xC0]
	0x0249D164 LDR X0, [X8 + 0x60]
	0x0249D168 LDRB W8, [X0 + 0x135]
	0x0249D16C TBNZ X8, 0x0, 0x249D17C
	0x0249D170 LDP X20, X19, [X31 + 0x10]
	0x0249D174 LDR X30, [X31], #0x20
	0x0249D178 B 0x1C5C684
	0x0249D17C LDP X20, X19, [X31 + 0x10]
	0x0249D180 LDR X30, [X31], #0x20
	0x0249D184 RET
	0x0249D188 STR X30, [X31 - 0x20]!
	0x0249D18C STP X20, X19, [X31 + 0x10]
	0x0249D190 LDR X8, [X1 + 0x20]
	0x0249D194 MOV X20, X1
	0x0249D198 MOV X19, X0
	0x0249D19C LDR X8, [X8 + 0xC0]
	0x0249D1A0 LDR X8, [X8]
	0x0249D1A4 LDRB W9, [X8 + 0x135]
	0x0249D1A8 TBNZ X9, 0x0, 0x249D1B8

ISIL:
	001 Subtract X31, X31, 256
	002 Move [X31+192], X30
	003 Move [X31+208], X24
	004 Move [X31+216], X23
	005 Move [X31+224], X22
	006 Move [X31+232], X21
	007 Move [X31+240], X20
	008 Move [X31+248], X19
	009 Move X24, 0x1F3D000
	010 Move X23, 0x1C80000
	011 Move W8, [X24+2972]
	012 Move X23, [X23+3608]
	013 Move X20, X3
	014 Move W21, W2
	015 Move X22, X1
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x1C80000
	022 Move X0, [X0+3608]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X24+2972], W8
	026 Move X0, [X23]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X8, [X22]
	032 Compare X8, 0
	033 JumpIfEqual {70}
	034 Move X0, [X23]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X22
	040 Move X1, X31
	041 Call FrameBuffer.get_Ptr, X0
	042 Move X1, X31
	043 Call Wrapper.opus_packet_get_bandwidth, X0
	044 Move X23, X19
	045 Add X23, X23, 64
	046 Move W8, [X23]
	047 Compare W8, 0
	048 JumpIfEqual {88}
	049 Add W31, W0, 4
	050 Move X8, [X22+48]
	051 Move V1, [X22+16]
	052 Move V0, [X22+32]
	053 Move V2, [X22]
	054 Add X1, X31, 128
	055 Move [X31+112], X8
	056 Move [X31+80], V1
	057 Move [X31+88], V0
	058 Move [X31+4], V2
	059 Move X9, [X20+32]
	060 Move W2, 1
	061 Move X0, X19
	062 Move W4, W31
	063 Move X9, [X9+192]
	064 Move X5, [X9+88]
	065 Move [X31+128], V2
	066 Move [X31+136], V1
	067 Move [X31+10], V0
	068 Move [X31+176], X8
	069 Call 0x249CE94, X0, X1, X2, X3, X4
	070 Move X23, X19
	071 Add X23, X23, 64
	072 Move W8, [X23]
	073 Compare W8, 0
	074 JumpIfEqual {89}
	075 Move X8, [X20+32]
	076 NotImplemented "Instruction MOVI not yet implemented."
	077 Add X1, X31, 128
	078 Move X0, X19
	079 Move X8, [X8+192]
	080 Move W2, W31
	081 Move W4, W31
	082 Move X5, [X8+88]
	083 Move [X31+176], X31
	084 Move [X31+144], V0
	085 Move [X31+152], V0
	086 Move [X31+8], V0
	087 Call 0x249CE94, X0, X1, X2, X3, X4
	088 Add W31, W0, 4
	089 Move W8, 1
	090 Move X8, [X22+48]
	091 Move V1, [X22+16]
	092 Move V0, [X22+32]
	093 Move V2, [X22]
	094 And W4, W21, 1
	095 Move [X31+48], X8
	096 Move [X31+16], V1
	097 Move [X31+24], V0
	098 Move [X31], V2
	099 Move X9, [X20+32]
	100 Add X1, X31, 128
	101 Move X0, X19
	102 Move W2, W31
	103 Move X9, [X9+192]
	104 Move X5, [X9+88]
	105 Move [X31+128], V2
	106 Move [X31+136], V1
	107 Move [X31+10], V0
	108 Move [X31+176], X8
	109 Call 0x249CE94, X0, X1, X2, X3, X4
	110 Move W8, W31
	111 Move [X23], W8
	112 Move X20, [X31+240]
	113 Move X19, [X31+248]
	114 Move X22, [X31+224]
	115 Move X21, [X31+232]
	116 Move X24, [X31+208]
	117 Move X23, [X31+216]
	118 Move X30, [X31+192]
	119 Add X31, X31, 256
	120 Return 

Method: System.Void Dispose()

Disassembly:
	0x0249D1AC MOV X0, X8
	0x0249D1B0 BL 0x1C5C684
	0x0249D1B4 MOV X8, X0
	0x0249D1B8 MOV X0, X8
	0x0249D1BC BL 0x1C16F10
	0x0249D1C0 LDR X8, [X20 + 0x20]
	0x0249D1C4 MOV W1, W31
	0x0249D1C8 MOV X20, X0
	0x0249D1CC LDR X8, [X8 + 0xC0]
	0x0249D1D0 LDR X2, [X8 + 0x8]
	0x0249D1D4 BL 0x239752C
	0x0249D1D8 CBZ X20, 0x249D1F0
	0x0249D1DC STR X19, [X20 + 0x28]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+40]
	005 Move X1, X31
	006 Move X2, X31
	007 Call IntPtr.op_Inequality, X0, X1
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {16}
	012 Move X0, [X19+40]
	013 Move X1, X31
	014 Call Wrapper.opus_decoder_destroy, X0
	015 Move [X19+40], X31
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Return 

Method: System.Void .cctor()

Disassembly:
	0x0249D1E0 MOV X0, X20
	0x0249D1E4 LDP X20, X19, [X31 + 0x10]
	0x0249D1E8 LDR X30, [X31], #0x20
	0x0249D1EC RET
	0x0249D1F0 BL 0x1C16F20
	0x0249D1F4 LDR X8, [X1 + 0x20]
	0x0249D1F8 LDR X8, [X8 + 0xC0]
	0x0249D1FC LDR X1, [X8 + 0x20]
	0x0249D200 B 0x249D188
	0x0249D204 MOV X1, X31
	0x0249D208 B 0x33BDD8C
	0x0249D20C STR X30, [X31 - 0x20]!
	0x0249D210 STP X20, X19, [X31 + 0x10]
	0x0249D214 LDR X8, [X1 + 0x20]
	0x0249D218 MOV X20, X1
	0x0249D21C MOV X19, X0
	0x0249D220 LDR X8, [X8 + 0xC0]
	0x0249D224 LDR X8, [X8]
	0x0249D228 LDRB W9, [X8 + 0x135]
	0x0249D22C TBNZ X9, 0x0, 0x249D23C
	0x0249D230 MOV X0, X8
	0x0249D234 BL 0x1C5C684
	0x0249D238 MOV X8, X0
	0x0249D23C MOV X0, X8
	0x0249D240 BL 0x1C16F10
	0x0249D244 LDR X8, [X20 + 0x20]
	0x0249D248 MOV W1, W31
	0x0249D24C MOV X20, X0
	0x0249D250 LDR X8, [X8 + 0xC0]
	0x0249D254 LDR X2, [X8 + 0x8]
	0x0249D258 BL 0x23976FC
	0x0249D25C CBZ X20, 0x249D274
	0x0249D260 STR X19, [X20 + 0x40]
	0x0249D264 MOV X0, X20
	0x0249D268 LDP X20, X19, [X31 + 0x10]
	0x0249D26C LDR X30, [X31], #0x20
	0x0249D270 RET
	0x0249D274 BL 0x1C16F20
	0x0249D278 LDR X8, [X1 + 0x20]
	0x0249D27C LDR X8, [X8 + 0xC0]
	0x0249D280 LDR X1, [X8 + 0x20]
	0x0249D284 B 0x249D20C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+32]
	006 Move W8, [X0+309]
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {12}
	011 Call 0x1C5D684
	012 Move X8, [X0+192]
	013 Move X0, [X8+56]
	014 Move W8, [X0+309]
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {20}
	019 Call 0x1C5D684
	020 Move W1, W31
	021 Call 0x1C17D6C
	022 Move X8, [X19+32]
	023 Move X20, X0
	024 Move W9, [X8+309]
	025 Move TEMP, X9
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {32}
	029 Move X0, X8
	030 Call 0x1C5D684
	031 Move X8, X0
	032 Move X8, [X8+192]
	033 Move X0, [X8+96]
	034 Move W8, [X0+309]
	035 Move TEMP, X8
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {40}
	039 Call 0x1C5D684
	040 Move X8, [X0+184]
	041 Move [X8], X20
	042 Move X0, [X19+32]
	043 Move W8, [X0+309]
	044 Move TEMP, X8
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfEqual {49}
	048 Call 0x1C5D684
	049 Move X8, [X0+192]
	050 Move X0, [X8+96]
	051 Move W8, [X0+309]
	052 Move TEMP, X8
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfEqual {61}
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X30, [X31+32]
	059 Call 0x1C5D684
	060 Return 
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X30, [X31+32]
	064 Return 

