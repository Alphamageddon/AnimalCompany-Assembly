Type: POpusCodec.Wrapper

Method: System.Void opus_encoder_destroy(System.IntPtr st)

Disassembly:
	0x03553B84 MOVZ W8, 0x1
	0x03553B88 STRB W8, [X21 + 0xD67]
	0x03553B8C ADRP X21, 0xBA0000
	0x03553B90 LDR X21, [X21 + 0x9D0]
	0x03553B94 MOV W0, W20
	0x03553B98 BL 0x3553390
	0x03553B9C LDR X8, [X19]
	0x03553BA0 MOV W19, W0
	0x03553BA4 LDR W9, [X8 + 0xE0]
	0x03553BA8 CBNZ W9, 0x3553BB4
	0x03553BAC MOV X0, X8
	0x03553BB0 BL 0x1C16DFC
	0x03553BB4 MOV W0, W19
	0x03553BB8 MOV X1, X31
	0x03553BBC BL 0x32C098C
	0x03553BC0 MOV W1, W23
	0x03553BC4 MOV W2, W20
	0x03553BC8 MOV X19, X0
	0x03553BCC BL 0x355340C
	0x03553BD0 LDR X8, [X21]
	0x03553BD4 MOV W21, W0
	0x03553BD8 MOVZ W1, 0x3

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xE8D000
	006 Move X21, 0xBC9000
	007 Move W8, [X20+3287]
	008 Move X21, [X21+2128]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xBC9000
	015 Move X0, [X0+2128]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3287], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call Marshal.FreeHGlobal, X0
	031 Return 

Method: System.Int32 opus_decode(System.IntPtr st, System.IntPtr data, System.Int32 len, System.Int16[] pcm, System.Int32 frame_size, System.Int32 decode_fec)

Disassembly:
	0x03553CD8 BL 0x1C16F44
	0x03553CDC MOV X1, X31
	0x03553CE0 BL 0x1C16DEC
	0x03553CE4 BL 0x1C16F44
	0x03553CE8 MOV X1, X31
	0x03553CEC BL 0x1C16DEC
	0x03553CF0 BL 0x1C16F44
	0x03553CF4 MOV X1, X31
	0x03553CF8 BL 0x1C16DEC
	0x03553CFC B 0x3553D08
	0x03553D00 B 0x3553D08
	0x03553D04 B 0x3553D08
	0x03553D08 MOV X20, X0
	0x03553D0C CMP W1, 0x1
	0x03553D10 B.NE 0x3553DA0
	0x03553D14 MOV X0, X20
	0x03553D18 BL 0x3EB1AD0
	0x03553D1C MOV X20, X0
	0x03553D20 ADRP X0, 0xBA0000
	0x03553D24 LDR X0, [X0 + 0x7D0]
	0x03553D28 BL 0x1C16D08
	0x03553D2C LDR X8, [X20]
	0x03553D30 LDR X1, [X8]
	0x03553D34 BL 0x1C17270
	0x03553D38 TBZ X0, 0x0, 0x3553D78
	0x03553D3C LDR X20, [X20]
	0x03553D40 BL 0x3EB1AE0
	0x03553D44 MOV X0, X19
	0x03553D48 MOV X1, X31
	0x03553D4C MOV X2, X31
	0x03553D50 BL 0x33C5D2C
	0x03553D54 TBZ X0, 0x0, 0x3553D60
	0x03553D58 MOV X0, X19
	0x03553D5C BL 0x3552E60
	0x03553D60 ADRP X0, 0xBE2000
	0x03553D64 LDR X0, [X0 + 0x320]
	0x03553D68 BL 0x1C16D08
	0x03553D6C MOV X1, X0
	0x03553D70 MOV X0, X20
	0x03553D74 BL 0x1C16DEC
	0x03553D78 MOVZ W0, 0x8
	0x03553D7C BL 0x3EB1AF0
	0x03553D80 LDR X8, [X20]
	0x03553D84 STR X8, [X0]
	0x03553D88 ADRP X1, 0x961000
	0x03553D8C ADD X1, X1, 0xE58
	0x03553D90 MOV X2, X31

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+48], X30
	003 Move [X31+56], X25
	004 Move [X31+64], X24
	005 Move [X31+72], X23
	006 Move [X31+80], X22
	007 Move [X31+88], X21
	008 Move [X31+96], X20
	009 Move [X31+104], X19
	010 Move X25, 0xE8D000
	011 Move X8, [X25+3288]
	012 Move W19, W5
	013 Move W20, W4
	014 Move X23, X3
	015 Move W21, W2
	016 Move X22, X1
	017 Move X24, X0
	018 Compare X8, 0
	019 JumpIfNotEqual {40}
	020 Move X12, -44453888
	021 Move V0, [X12+3776]
	022 Move X8, -44253184
	023 Move X10, -44425216
	024 Add X8, X8, 341
	025 Move W9, 9
	026 Add X10, X10, 2104
	027 Move W11, 11
	028 Move W13, 36
	029 Add X0, X31, 0
	030 Move [X31], X8
	031 Move [X31+8], X9
	032 Move [X31+16], X10
	033 Move [X31+24], X11
	034 Move [X31+40], W13
	035 Move [X31+32], D0
	036 Move [X31+44], W31
	037 Call 0x1C1829C
	038 Move X8, X0
	039 Move [X25+3288], X0
	040 Add X9, X23, 32
	041 NotImplemented "Instruction CMP not yet implemented."
	042 NotImplemented "Instruction CSEL not yet implemented."
	043 Move X0, X24
	044 Move X1, X22
	045 Move W2, W21
	046 Move W4, W20
	047 Move W5, W19
	048 NotImplemented "Instruction BLR not yet implemented."
	049 Move X20, [X31+96]
	050 Move X19, [X31+104]
	051 Move X22, [X31+80]
	052 Move X21, [X31+88]
	053 Move X24, [X31+64]
	054 Move X23, [X31+72]
	055 Move X30, [X31+48]
	056 Move X25, [X31+56]
	057 Add X31, X31, 112
	058 Return X0

Method: System.Int32 opus_decode_float(System.IntPtr st, System.IntPtr data, System.Int32 len, System.Single[] pcm, System.Int32 frame_size, System.Int32 decode_fec)

Disassembly:
	0x03553D94 BL 0x3EB1B00
	0x03553D98 MOV X20, X0
	0x03553D9C BL 0x3EB1AE0
	0x03553DA0 MOV X0, X20
	0x03553DA4 BL 0x1D2C690
	0x03553DA8 BL 0x1990590
	0x03553DAC SUB X31, X31, 0x60
	0x03553DB0 STR X30, [X31 + 0x10]
	0x03553DB4 STP X26, X25, [X31 + 0x20]
	0x03553DB8 STP X24, X23, [X31 + 0x30]
	0x03553DBC STP X22, X21, [X31 + 0x40]
	0x03553DC0 STP X20, X19, [X31 + 0x50]
	0x03553DC4 ADRP X22, 0xE8C000
	0x03553DC8 LDRB W8, [X22 + 0xD68]
	0x03553DCC MOV W19, W4
	0x03553DD0 MOV W21, W3
	0x03553DD4 MOV X23, X2
	0x03553DD8 MOV X24, X1
	0x03553DDC MOV X20, X0
	0x03553DE0 TBNZ X8, 0x0, 0x3553E1C
	0x03553DE4 ADRP X0, 0xBC9000
	0x03553DE8 LDR X0, [X0 + 0xE18]
	0x03553DEC BL 0x1C16CF4
	0x03553DF0 ADRP X0, 0xBA0000
	0x03553DF4 LDR X0, [X0 + 0x758]
	0x03553DF8 BL 0x1C16CF4
	0x03553DFC ADRP X0, 0xBA0000
	0x03553E00 LDR X0, [X0 + 0x9D0]
	0x03553E04 BL 0x1C16CF4
	0x03553E08 ADRP X0, 0xBE2000
	0x03553E0C LDR X0, [X0 + 0x328]
	0x03553E10 BL 0x1C16CF4
	0x03553E14 MOVZ W8, 0x1
	0x03553E18 STRB W8, [X22 + 0xD68]
	0x03553E1C MOV X0, X20
	0x03553E20 MOV X1, X31
	0x03553E24 MOV X2, X31
	0x03553E28 BL 0x33BE5B0
	0x03553E2C TBNZ X0, 0x0, 0x3554010
	0x03553E30 ADRP X25, 0xBC9000
	0x03553E34 LDR X25, [X25 + 0xE18]
	0x03553E38 LDR X0, [X25]
	0x03553E3C LDR W8, [X0 + 0xE0]
	0x03553E40 CBNZ W8, 0x3553E48
	0x03553E44 BL 0x1C16DFC
	0x03553E48 MOV X0, X24
	0x03553E4C BL 0x355406C

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+48], X30
	003 Move [X31+56], X25
	004 Move [X31+64], X24
	005 Move [X31+72], X23
	006 Move [X31+80], X22
	007 Move [X31+88], X21
	008 Move [X31+96], X20
	009 Move [X31+104], X19
	010 Move X25, 0xE8D000
	011 Move X8, [X25+3296]
	012 Move W19, W5
	013 Move W20, W4
	014 Move X23, X3
	015 Move W21, W2
	016 Move X22, X1
	017 Move X24, X0
	018 Compare X8, 0
	019 JumpIfNotEqual {40}
	020 Move X12, -44453888
	021 Move V0, [X12+3776]
	022 Move X8, -44253184
	023 Move X10, -44244992
	024 Add X8, X8, 341
	025 Move W9, 9
	026 Add X10, X10, 811
	027 Move W11, 17
	028 Move W13, 36
	029 Add X0, X31, 0
	030 Move [X31], X8
	031 Move [X31+8], X9
	032 Move [X31+16], X10
	033 Move [X31+24], X11
	034 Move [X31+40], W13
	035 Move [X31+32], D0
	036 Move [X31+44], W31
	037 Call 0x1C1829C
	038 Move X8, X0
	039 Move [X25+3296], X0
	040 Add X9, X23, 32
	041 NotImplemented "Instruction CMP not yet implemented."
	042 NotImplemented "Instruction CSEL not yet implemented."
	043 Move X0, X24
	044 Move X1, X22
	045 Move W2, W21
	046 Move W4, W20
	047 Move W5, W19
	048 NotImplemented "Instruction BLR not yet implemented."
	049 Move X20, [X31+96]
	050 Move X19, [X31+104]
	051 Move X22, [X31+80]
	052 Move X21, [X31+88]
	053 Move X24, [X31+64]
	054 Move X23, [X31+72]
	055 Move X30, [X31+48]
	056 Move X25, [X31+56]
	057 Add X31, X31, 112
	058 Return X0

Method: System.Int32 opus_decode_async(System.IntPtr st, System.IntPtr data, System.Int32 len, System.Int32 decodeFEC, System.Boolean eos)

Disassembly:
	0x03553E50 LDR W2, [X24 + 0xC]
	0x03553E54 MOV X1, X0

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Int32 opus_decode_float_async(System.IntPtr st, System.IntPtr data, System.Int32 len, System.Int32 decodeFEC, System.Boolean eos)

Disassembly:
	0x03553E58 MOV X0, X20
	0x03553E5C MOV X3, X23

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Void opus_decoder_destroy(System.IntPtr st)

Disassembly:
	0x03553E60 MOV W4, W21
	0x03553E64 MOV W5, W19
	0x03553E68 BL 0x3552CD8
	0x03553E6C ADDS W31, W0, 0x4
	0x03553E70 B.NE 0x3553E7C
	0x03553E74 MOV W20, W31
	0x03553E78 B 0x3553FF0
	0x03553E7C MOV W20, W0
	0x03553E80 TBZ X0, 0x1F, 0x3553FF0
	0x03553E84 ADRP X8, 0xBA0000
	0x03553E88 LDR X8, [X8 + 0x9D0]
	0x03553E8C MOVZ W1, 0x5
	0x03553E90 LDR X0, [X8]
	0x03553E94 BL 0x1C16D6C
	0x03553E98 CBZ X0, 0x3554068
	0x03553E9C ADRP X26, 0xBE2000
	0x03553EA0 LDR X26, [X26 + 0x328]
	0x03553EA4 MOV X22, X0
	0x03553EA8 LDR X0, [X26]
	0x03553EAC CBZ X0, 0x3553EC0
	0x03553EB0 LDR X8, [X22]
	0x03553EB4 LDR X1, [X8 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xE8D000
	006 Move X21, 0xBC9000
	007 Move W8, [X20+3304]
	008 Move X21, [X21+2128]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xBC9000
	015 Move X0, [X0+2128]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3304], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call Marshal.FreeHGlobal, X0
	031 Return 

Method: System.Int32 opus_encoder_get_size(POpusCodec.Enums.Channels channels)

Disassembly:
	0x03553EB8 BL 0x1C16E00
	0x03553EBC CBZ X0, 0x355405C
	0x03553EC0 LDR W8, [X22 + 0x18]
	0x03553EC4 CBZ W8, 0x3554058
	0x03553EC8 LDR X8, [X26]
	0x03553ECC STR X8, [X22 + 0x20]
	0x03553ED0 LDR X0, [X25]
	0x03553ED4 LDR W8, [X0 + 0xE0]
	0x03553ED8 CBNZ W8, 0x3553EE0
	0x03553EDC BL 0x1C16DFC
	0x03553EE0 ADRP X25, 0xBA0000
	0x03553EE4 LDR W8, [X24 + 0xC]
	0x03553EE8 LDR X25, [X25 + 0x758]
	0x03553EEC ADD X1, X31, 0x1C
	0x03553EF0 STR W8, [X31 + 0x1C]
	0x03553EF4 LDR X0, [X25]
	0x03553EF8 BL 0x1C16E04
	0x03553EFC MOV X24, X0
	0x03553F00 CBZ X0, 0x3553F18
	0x03553F04 LDR X8, [X22]
	0x03553F08 MOV X0, X24
	0x03553F0C LDR X1, [X8 + 0x40]
	0x03553F10 BL 0x1C16E00
	0x03553F14 CBZ X0, 0x355405C
	0x03553F18 LDR W8, [X22 + 0x18]
	0x03553F1C CMP W8, 0x1
	0x03553F20 B.LS 0x3554058
	0x03553F24 STR X24, [X22 + 0x28]
	0x03553F28 CBZ X23, 0x3554068
	0x03553F2C LDR X8, [X23 + 0x18]
	0x03553F30 LDR X0, [X25]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+64], X20
	004 Move [X31+72], X19
	005 Move X20, 0xE8D000
	006 Move X8, [X20+3312]
	007 Move W19, W0
	008 Compare X8, 0
	009 JumpIfNotEqual {30}
	010 Move X12, -44453888
	011 Move V0, [X12+3776]
	012 Move X8, -44253184
	013 Move X10, -44199936
	014 Add X8, X8, 341
	015 Move W9, 9
	016 Add X10, X10, 3546
	017 Move W11, 21
	018 Move W13, 4
	019 Add X0, X31, 0
	020 Move [X31], X8
	021 Move [X31+8], X9
	022 Move [X31+16], X10
	023 Move [X31+24], X11
	024 Move [X31+40], W13
	025 Move [X31+32], D0
	026 Move [X31+44], W31
	027 Call 0x1C1829C
	028 Move X8, X0
	029 Move [X20+3312], X0
	030 Move W0, W19
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move X20, [X31+64]
	033 Move X19, [X31+72]
	034 Move X30, [X31+48]
	035 Add X31, X31, 80
	036 Return X0

Method: POpusCodec.Enums.OpusStatusCode opus_encoder_init(System.IntPtr st, POpusCodec.Enums.SamplingRate Fs, POpusCodec.Enums.Channels channels, POpusCodec.Enums.OpusApplicationType application)

Disassembly:
	0x03553F34 ADD X1, X31, 0x18
	0x03553F38 STR W8, [X31 + 0x18]
	0x03553F3C BL 0x1C16E04
	0x03553F40 MOV X23, X0
	0x03553F44 CBZ X0, 0x3553F5C
	0x03553F48 LDR X8, [X22]
	0x03553F4C MOV X0, X23
	0x03553F50 LDR X1, [X8 + 0x40]
	0x03553F54 BL 0x1C16E00
	0x03553F58 CBZ X0, 0x355405C
	0x03553F5C LDR W8, [X22 + 0x18]
	0x03553F60 CMP W8, 0x2
	0x03553F64 B.LS 0x3554058
	0x03553F68 STR X23, [X22 + 0x30]
	0x03553F6C LDR X0, [X25]
	0x03553F70 ADD X1, X31, 0xC
	0x03553F74 STR W21, [X31 + 0xC]
	0x03553F78 BL 0x1C16E04
	0x03553F7C MOV X21, X0
	0x03553F80 CBZ X0, 0x3553F98
	0x03553F84 LDR X8, [X22]
	0x03553F88 MOV X0, X21
	0x03553F8C LDR X1, [X8 + 0x40]
	0x03553F90 BL 0x1C16E00
	0x03553F94 CBZ X0, 0x355405C
	0x03553F98 LDR W8, [X22 + 0x18]
	0x03553F9C CMP W8, 0x3
	0x03553FA0 B.LS 0x3554058
	0x03553FA4 STR X21, [X22 + 0x38]
	0x03553FA8 LDR X0, [X25]
	0x03553FAC ADD X1, X31, 0x8
	0x03553FB0 STR W19, [X31 + 0x8]
	0x03553FB4 BL 0x1C16E04
	0x03553FB8 MOV X19, X0
	0x03553FBC CBZ X0, 0x3553FD4
	0x03553FC0 LDR X8, [X22]
	0x03553FC4 MOV X0, X19
	0x03553FC8 LDR X1, [X8 + 0x40]
	0x03553FCC BL 0x1C16E00

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+56], X23
	004 Move [X31+64], X22
	005 Move [X31+72], X21
	006 Move [X31+80], X20
	007 Move [X31+88], X19
	008 Move X23, 0xE8D000
	009 Move X8, [X23+3320]
	010 Move W19, W3
	011 Move W20, W2
	012 Move W21, W1
	013 Move X22, X0
	014 Compare X8, 0
	015 JumpIfNotEqual {36}
	016 Move X12, -44453888
	017 Move V0, [X12+3776]
	018 Move X8, -44253184
	019 Move X10, -44273664
	020 Add X8, X8, 341
	021 Move W9, 9
	022 Add X10, X10, 4088
	023 Move W11, 17
	024 Move W13, 20
	025 Add X0, X31, 0
	026 Move [X31], X8
	027 Move [X31+8], X9
	028 Move [X31+16], X10
	029 Move [X31+24], X11
	030 Move [X31+40], W13
	031 Move [X31+32], D0
	032 Move [X31+44], W31
	033 Call 0x1C1829C
	034 Move X8, X0
	035 Move [X23+3320], X0
	036 Move X0, X22
	037 Move W1, W21
	038 Move W2, W20
	039 Move W3, W19
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X20, [X31+80]
	042 Move X19, [X31+88]
	043 Move X22, [X31+64]
	044 Move X21, [X31+72]
	045 Move X30, [X31+48]
	046 Move X23, [X31+56]
	047 Add X31, X31, 96
	048 Return X0

Method: System.IntPtr opus_get_version_string()

Disassembly:
	0x03552568 MOV X0, X21
	0x0355256C MOV X1, X22
	0x03552570 MOV W2, W31
	0x03552574 MOV W3, W19
	0x03552578 MOV X4, X31
	0x0355257C BL 0x32C0C8C
	0x03552580 LDP X1, X21, [X20 + 0x38]
	0x03552584 LDR X4, [X23]
	0x03552588 ADD X0, X31, 0x0
	0x0355258C MOV W2, W31
	0x03552590 MOV W3, W19
	0x03552594 STP X31, X31, [X31]
	0x03552598 BL 0x2B87BB0
	0x0355259C CBZ X21, 0x35525CC
	0x035525A0 LDP X1, X2, [X31]
	0x035525A4 LDR X8, [X21 + 0x18]
	0x035525A8 LDR X0, [X21 + 0x40]
	0x035525AC LDR X4, [X21 + 0x28]
	0x035525B0 MOV W3, W31
	0x035525B4 BLR X8
	0x035525B8 LDP X20, X19, [X31 + 0x30]
	0x035525BC LDP X22, X21, [X31 + 0x20]
	0x035525C0 LDP X30, X23, [X31 + 0x10]
	0x035525C4 ADD X31, X31, 0x40
	0x035525C8 RET

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+48], X30
	003 Move [X31+56], X19
	004 Move X19, 0xE8E000
	005 Move X8, [X19+3328]
	006 Compare X8, 0
	007 JumpIfNotEqual {26}
	008 Move X8, -44249088
	009 Move X10, -44347392
	010 Add X8, X8, 341
	011 Move W9, 9
	012 Add X10, X10, 1828
	013 Move W11, 23
	014 Move W12, 1
	015 Add X0, X31, 0
	016 Move [X31+36], X31
	017 Move [X31], X8
	018 Move [X31+8], X9
	019 Move [X31+16], X10
	020 Move [X31+24], X11
	021 Move [X31+32], W12
	022 Move [X31+44], W31
	023 Call 0x1C1829C
	024 Move X8, X0
	025 Move [X19+3328], X0
	026 NotImplemented "Instruction BLR not yet implemented."
	027 Move X30, [X31+48]
	028 Move X19, [X31+56]
	029 Add X31, X31, 64
	030 Return X0

Method: System.Int32 opus_encode(System.IntPtr st, System.Int16[] pcm, System.Int32 frame_size, System.Byte[] data, System.Int32 max_data_bytes)

Disassembly:
	0x03553FD0 CBZ X0, 0x355405C
	0x03553FD4 LDR W8, [X22 + 0x18]
	0x03553FD8 CMP W8, 0x4
	0x03553FDC B.LS 0x3554058
	0x03553FE0 MOV W0, W20
	0x03553FE4 MOV X1, X22
	0x03553FE8 STR X19, [X22 + 0x40]
	0x03553FEC BL 0x355361C
	0x03553FF0 MOV W0, W20
	0x03553FF4 LDP X20, X19, [X31 + 0x50]
	0x03553FF8 LDP X22, X21, [X31 + 0x40]
	0x03553FFC LDP X24, X23, [X31 + 0x30]
	0x03554000 LDP X26, X25, [X31 + 0x20]
	0x03554004 LDR X30, [X31 + 0x10]
	0x03554008 ADD X31, X31, 0x60
	0x0355400C RET
	0x03554010 ADRP X0, 0xBC8000
	0x03554014 LDR X0, [X0 + 0x4B8]
	0x03554018 BL 0x1C16D08
	0x0355401C BL 0x1C16F10
	0x03554020 MOV X19, X0
	0x03554024 ADRP X0, 0xBE1000
	0x03554028 LDR X0, [X0 + 0x308]
	0x0355402C BL 0x1C16D08
	0x03554030 MOV X1, X0
	0x03554034 MOV X0, X19
	0x03554038 MOV X2, X31
	0x0355403C BL 0x338C448
	0x03554040 ADRP X0, 0xBE1000
	0x03554044 LDR X0, [X0 + 0x330]
	0x03554048 BL 0x1C16D08
	0x0355404C MOV X1, X0
	0x03554050 MOV X0, X19
	0x03554054 BL 0x1C16DEC
	0x03554058 BL 0x1C16F28
	0x0355405C BL 0x1C16F44
	0x03554060 MOV X1, X31
	0x03554064 BL 0x1C16DEC
	0x03554068 BL 0x1C16F20
	0x0355406C STR X30, [X31 - 0x20]!
	0x03554070 STP X20, X19, [X31 + 0x10]
	0x03554074 LDRB W8, [X0 + 0x30]
	0x03554078 MOV X19, X0
	0x0355407C CBNZ W8, 0x35540C0
	0x03554080 LDR X0, [X19]
	0x03554084 CBZ X0, 0x35540C0
	0x03554088 MOVZ W1, 0x3

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+48], X30
	003 Move [X31+64], X24
	004 Move [X31+72], X23
	005 Move [X31+80], X22
	006 Move [X31+88], X21
	007 Move [X31+96], X20
	008 Move [X31+104], X19
	009 Move X24, 0xE8D000
	010 Move X8, [X24+3336]
	011 Move W19, W4
	012 Move X21, X3
	013 Move W20, W2
	014 Move X23, X1
	015 Move X22, X0
	016 Compare X8, 0
	017 JumpIfNotEqual {38}
	018 Move X12, -44457984
	019 Move V0, [X12+3776]
	020 Move X8, -44257280
	021 Move X10, -44347392
	022 Add X8, X8, 341
	023 Move W9, 9
	024 Add X10, X10, 1880
	025 Move W11, 11
	026 Move W13, 32
	027 Add X0, X31, 0
	028 Move [X31], X8
	029 Move [X31+8], X9
	030 Move [X31+16], X10
	031 Move [X31+24], X11
	032 Move [X31+40], W13
	033 Move [X31+32], D0
	034 Move [X31+44], W31
	035 Call 0x1C1829C
	036 Move X8, X0
	037 Move [X24+3336], X0
	038 Add X9, X23, 32
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Add X10, X21, 32
	041 NotImplemented "Instruction CSEL not yet implemented."
	042 NotImplemented "Instruction CMP not yet implemented."
	043 NotImplemented "Instruction CSEL not yet implemented."
	044 Move X0, X22
	045 Move W2, W20
	046 Move W4, W19
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Move X20, [X31+96]
	049 Move X19, [X31+104]
	050 Move X22, [X31+80]
	051 Move X21, [X31+88]
	052 Move X24, [X31+64]
	053 Move X23, [X31+72]
	054 Move X30, [X31+48]
	055 Add X31, X31, 112
	056 Return X0

Method: System.Int32 opus_encode_float(System.IntPtr st, System.Single[] pcm, System.Int32 frame_size, System.Byte[] data, System.Int32 max_data_bytes)

Disassembly:
	0x0355408C MOV X2, X31
	0x03554090 BL 0x32C0780
	0x03554094 MOV X20, X19
	0x03554098 STR X0, [X20 + 0x20]!
	0x0355409C MOV X0, X20
	0x035540A0 MOV X1, X31
	0x035540A4 BL 0x32C0690
	0x035540A8 LDUR W1, [X20 - 0x18]
	0x035540AC MOV X2, X31
	0x035540B0 BL 0x33C694C
	0x035540B4 MOVZ W8, 0x1
	0x035540B8 STR X0, [X20 + 0x8]
	0x035540BC STRB W8, [X20 + 0x10]
	0x035540C0 LDR X0, [X19 + 0x28]
	0x035540C4 LDP X20, X19, [X31 + 0x10]
	0x035540C8 LDR X30, [X31], #0x20
	0x035540CC RET
	0x035540D0 SUB X31, X31, 0x60
	0x035540D4 STR X30, [X31 + 0x10]
	0x035540D8 STP X26, X25, [X31 + 0x20]
	0x035540DC STP X24, X23, [X31 + 0x30]
	0x035540E0 STP X22, X21, [X31 + 0x40]
	0x035540E4 STP X20, X19, [X31 + 0x50]
	0x035540E8 ADRP X22, 0xE8B000
	0x035540EC LDRB W8, [X22 + 0xD69]
	0x035540F0 MOV W19, W4
	0x035540F4 MOV W21, W3
	0x035540F8 MOV X23, X2
	0x035540FC MOV X24, X1
	0x03554100 MOV X20, X0
	0x03554104 TBNZ X8, 0x0, 0x3554140
	0x03554108 ADRP X0, 0xBC8000
	0x0355410C LDR X0, [X0 + 0xE18]
	0x03554110 BL 0x1C16CF4
	0x03554114 ADRP X0, 0xB9F000
	0x03554118 LDR X0, [X0 + 0x758]
	0x0355411C BL 0x1C16CF4
	0x03554120 ADRP X0, 0xB9F000
	0x03554124 LDR X0, [X0 + 0x9D0]
	0x03554128 BL 0x1C16CF4
	0x0355412C ADRP X0, 0xBE1000
	0x03554130 LDR X0, [X0 + 0x338]
	0x03554134 BL 0x1C16CF4
	0x03554138 MOVZ W8, 0x1
	0x0355413C STRB W8, [X22 + 0xD69]
	0x03554140 MOV X0, X20
	0x03554144 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+48], X30
	003 Move [X31+64], X24
	004 Move [X31+72], X23
	005 Move [X31+80], X22
	006 Move [X31+88], X21
	007 Move [X31+96], X20
	008 Move [X31+104], X19
	009 Move X24, 0xE8C000
	010 Move X8, [X24+3344]
	011 Move W19, W4
	012 Move X21, X3
	013 Move W20, W2
	014 Move X23, X1
	015 Move X22, X0
	016 Compare X8, 0
	017 JumpIfNotEqual {38}
	018 Move X12, -44457984
	019 Move V0, [X12+3776]
	020 Move X8, -44257280
	021 Move X10, -44445696
	022 Add X8, X8, 341
	023 Move W9, 9
	024 Add X10, X10, 1190
	025 Move W11, 17
	026 Move W13, 32
	027 Add X0, X31, 0
	028 Move [X31], X8
	029 Move [X31+8], X9
	030 Move [X31+16], X10
	031 Move [X31+24], X11
	032 Move [X31+40], W13
	033 Move [X31+32], D0
	034 Move [X31+44], W31
	035 Call 0x1C1829C
	036 Move X8, X0
	037 Move [X24+3344], X0
	038 Add X9, X23, 32
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Add X10, X21, 32
	041 NotImplemented "Instruction CSEL not yet implemented."
	042 NotImplemented "Instruction CMP not yet implemented."
	043 NotImplemented "Instruction CSEL not yet implemented."
	044 Move X0, X22
	045 Move W2, W20
	046 Move W4, W19
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Move X20, [X31+96]
	049 Move X19, [X31+104]
	050 Move X22, [X31+80]
	051 Move X21, [X31+88]
	052 Move X24, [X31+64]
	053 Move X23, [X31+72]
	054 Move X30, [X31+48]
	055 Add X31, X31, 112
	056 Return X0

Method: System.Int32 opus_encoder_ctl_set(System.IntPtr st, POpusCodec.Enums.OpusCtlSetRequest request, System.Int32 value)

Disassembly:
	0x03554148 MOV X2, X31
	0x0355414C BL 0x33BE5B0
	0x03554150 TBNZ X0, 0x0, 0x3554334
	0x03554154 ADRP X25, 0xBC8000
	0x03554158 LDR X25, [X25 + 0xE18]
	0x0355415C LDR X0, [X25]
	0x03554160 LDR W8, [X0 + 0xE0]
	0x03554164 CBNZ W8, 0x355416C
	0x03554168 BL 0x1C16DFC
	0x0355416C MOV X0, X24
	0x03554170 BL 0x355406C
	0x03554174 LDR W2, [X24 + 0xC]
	0x03554178 MOV X1, X0
	0x0355417C MOV X0, X20
	0x03554180 MOV X3, X23
	0x03554184 MOV W4, W21
	0x03554188 MOV W5, W19
	0x0355418C BL 0x3552D94
	0x03554190 ADDS W31, W0, 0x4
	0x03554194 B.NE 0x35541A0
	0x03554198 MOV W20, W31
	0x0355419C B 0x3554314
	0x035541A0 MOV W20, W0
	0x035541A4 TBZ X0, 0x1F, 0x3554314
	0x035541A8 ADRP X8, 0xB9F000
	0x035541AC LDR X8, [X8 + 0x9D0]
	0x035541B0 MOVZ W1, 0x5
	0x035541B4 LDR X0, [X8]
	0x035541B8 BL 0x1C16D6C
	0x035541BC CBZ X0, 0x355438C
	0x035541C0 ADRP X26, 0xBE1000
	0x035541C4 LDR X26, [X26 + 0x338]
	0x035541C8 MOV X22, X0
	0x035541CC LDR X0, [X26]
	0x035541D0 CBZ X0, 0x35541E4
	0x035541D4 LDR X8, [X22]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+64], X22
	004 Move [X31+72], X21
	005 Move [X31+80], X20
	006 Move [X31+88], X19
	007 Move X22, 0xE8C000
	008 Move X8, [X22+3352]
	009 Move W19, W2
	010 Move W20, W1
	011 Move X21, X0
	012 Compare X8, 0
	013 JumpIfNotEqual {33}
	014 Move X12, -44457984
	015 Move V0, [X12+3776]
	016 Move X8, -44257280
	017 Move X10, -44355584
	018 Add X8, X8, 341
	019 Move W9, 9
	020 Add X10, X10, 1852
	021 Move W11, 16
	022 Add X0, X31, 0
	023 Move [X31], X8
	024 Move [X31+8], X9
	025 Move [X31+16], X10
	026 Move [X31+24], X11
	027 Move [X31+40], W11
	028 Move [X31+32], D0
	029 Move [X31+44], W31
	030 Call 0x1C1829C
	031 Move X8, X0
	032 Move [X22+3352], X0
	033 Move X0, X21
	034 Move W1, W20
	035 Move W2, W19
	036 NotImplemented "Instruction BLR not yet implemented."
	037 Move X20, [X31+80]
	038 Move X19, [X31+88]
	039 Move X22, [X31+64]
	040 Move X21, [X31+72]
	041 Move X30, [X31+48]
	042 Add X31, X31, 96
	043 Return X0

Method: System.Int32 opus_encoder_ctl_get(System.IntPtr st, POpusCodec.Enums.OpusCtlGetRequest request, ref System.Int32 value)

Disassembly:
	0x035541D8 LDR X1, [X8 + 0x40]
	0x035541DC BL 0x1C16E00
	0x035541E0 CBZ X0, 0x3554380
	0x035541E4 LDR W8, [X22 + 0x18]
	0x035541E8 CBZ W8, 0x355437C
	0x035541EC LDR X8, [X26]
	0x035541F0 STR X8, [X22 + 0x20]
	0x035541F4 LDR X0, [X25]
	0x035541F8 LDR W8, [X0 + 0xE0]
	0x035541FC CBNZ W8, 0x3554204
	0x03554200 BL 0x1C16DFC
	0x03554204 ADRP X25, 0xB9F000
	0x03554208 LDR W8, [X24 + 0xC]
	0x0355420C LDR X25, [X25 + 0x758]
	0x03554210 ADD X1, X31, 0x1C
	0x03554214 STR W8, [X31 + 0x1C]
	0x03554218 LDR X0, [X25]
	0x0355421C BL 0x1C16E04
	0x03554220 MOV X24, X0
	0x03554224 CBZ X0, 0x355423C
	0x03554228 LDR X8, [X22]
	0x0355422C MOV X0, X24
	0x03554230 LDR X1, [X8 + 0x40]
	0x03554234 BL 0x1C16E00
	0x03554238 CBZ X0, 0x3554380
	0x0355423C LDR W8, [X22 + 0x18]
	0x03554240 CMP W8, 0x1
	0x03554244 B.LS 0x355437C
	0x03554248 STR X24, [X22 + 0x28]
	0x0355424C CBZ X23, 0x355438C
	0x03554250 LDR X8, [X23 + 0x18]
	0x03554254 LDR X0, [X25]
	0x03554258 ADD X1, X31, 0x18
	0x0355425C STR W8, [X31 + 0x18]
	0x03554260 BL 0x1C16E04
	0x03554264 MOV X23, X0
	0x03554268 CBZ X0, 0x3554280

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+64], X22
	004 Move [X31+72], X21
	005 Move [X31+80], X20
	006 Move [X31+88], X19
	007 Move X22, 0xE8C000
	008 Move X8, [X22+3360]
	009 Move X19, X2
	010 Move W20, W1
	011 Move X21, X0
	012 Compare X8, 0
	013 JumpIfNotEqual {34}
	014 Move X12, -44457984
	015 Move V0, [X12+3776]
	016 Move X8, -44257280
	017 Move X10, -44355584
	018 Add X8, X8, 341
	019 Move W9, 9
	020 Add X10, X10, 1852
	021 Move W11, 16
	022 Move W13, 20
	023 Add X0, X31, 0
	024 Move [X31], X8
	025 Move [X31+8], X9
	026 Move [X31+16], X10
	027 Move [X31+24], X11
	028 Move [X31+40], W13
	029 Move [X31+32], D0
	030 Move [X31+44], W31
	031 Call 0x1C1829C
	032 Move X8, X0
	033 Move [X22+3360], X0
	034 Move X0, X21
	035 Move W1, W20
	036 Move X2, X19
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Move X20, [X31+80]
	039 Move X19, [X31+88]
	040 Move X22, [X31+64]
	041 Move X21, [X31+72]
	042 Move X30, [X31+48]
	043 Add X31, X31, 96
	044 Return X0

Method: System.Int32 opus_decoder_ctl_set(System.IntPtr st, POpusCodec.Enums.OpusCtlSetRequest request, System.Int32 value)

Disassembly:
	0x0355426C LDR X8, [X22]
	0x03554270 MOV X0, X23
	0x03554274 LDR X1, [X8 + 0x40]
	0x03554278 BL 0x1C16E00
	0x0355427C CBZ X0, 0x3554380
	0x03554280 LDR W8, [X22 + 0x18]
	0x03554284 CMP W8, 0x2
	0x03554288 B.LS 0x355437C
	0x0355428C STR X23, [X22 + 0x30]
	0x03554290 LDR X0, [X25]
	0x03554294 ADD X1, X31, 0xC
	0x03554298 STR W21, [X31 + 0xC]
	0x0355429C BL 0x1C16E04
	0x035542A0 MOV X21, X0
	0x035542A4 CBZ X0, 0x35542BC
	0x035542A8 LDR X8, [X22]
	0x035542AC MOV X0, X21
	0x035542B0 LDR X1, [X8 + 0x40]
	0x035542B4 BL 0x1C16E00
	0x035542B8 CBZ X0, 0x3554380
	0x035542BC LDR W8, [X22 + 0x18]
	0x035542C0 CMP W8, 0x3
	0x035542C4 B.LS 0x355437C
	0x035542C8 STR X21, [X22 + 0x38]
	0x035542CC LDR X0, [X25]
	0x035542D0 ADD X1, X31, 0x8
	0x035542D4 STR W19, [X31 + 0x8]
	0x035542D8 BL 0x1C16E04
	0x035542DC MOV X19, X0
	0x035542E0 CBZ X0, 0x35542F8
	0x035542E4 LDR X8, [X22]
	0x035542E8 MOV X0, X19
	0x035542EC LDR X1, [X8 + 0x40]
	0x035542F0 BL 0x1C16E00
	0x035542F4 CBZ X0, 0x3554380
	0x035542F8 LDR W8, [X22 + 0x18]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+64], X22
	004 Move [X31+72], X21
	005 Move [X31+80], X20
	006 Move [X31+88], X19
	007 Move X22, 0xE8C000
	008 Move X8, [X22+3368]
	009 Move W19, W2
	010 Move W20, W1
	011 Move X21, X0
	012 Compare X8, 0
	013 JumpIfNotEqual {33}
	014 Move X12, -44457984
	015 Move V0, [X12+3776]
	016 Move X8, -44257280
	017 Move X10, -44380160
	018 Add X8, X8, 341
	019 Move W9, 9
	020 Add X10, X10, 1024
	021 Move W11, 16
	022 Add X0, X31, 0
	023 Move [X31], X8
	024 Move [X31+8], X9
	025 Move [X31+16], X10
	026 Move [X31+24], X11
	027 Move [X31+40], W11
	028 Move [X31+32], D0
	029 Move [X31+44], W31
	030 Call 0x1C1829C
	031 Move X8, X0
	032 Move [X22+3368], X0
	033 Move X0, X21
	034 Move W1, W20
	035 Move W2, W19
	036 NotImplemented "Instruction BLR not yet implemented."
	037 Move X20, [X31+80]
	038 Move X19, [X31+88]
	039 Move X22, [X31+64]
	040 Move X21, [X31+72]
	041 Move X30, [X31+48]
	042 Add X31, X31, 96
	043 Return X0

Method: System.Int32 opus_decoder_ctl_get(System.IntPtr st, POpusCodec.Enums.OpusCtlGetRequest request, ref System.Int32 value)

Disassembly:
	0x035542FC CMP W8, 0x4
	0x03554300 B.LS 0x355437C
	0x03554304 MOV W0, W20
	0x03554308 MOV X1, X22
	0x0355430C STR X19, [X22 + 0x40]
	0x03554310 BL 0x355361C
	0x03554314 MOV W0, W20
	0x03554318 LDP X20, X19, [X31 + 0x50]
	0x0355431C LDP X22, X21, [X31 + 0x40]
	0x03554320 LDP X24, X23, [X31 + 0x30]
	0x03554324 LDP X26, X25, [X31 + 0x20]
	0x03554328 LDR X30, [X31 + 0x10]
	0x0355432C ADD X31, X31, 0x60
	0x03554330 RET
	0x03554334 ADRP X0, 0xBC8000
	0x03554338 LDR X0, [X0 + 0x4B8]
	0x0355433C BL 0x1C16D08
	0x03554340 BL 0x1C16F10
	0x03554344 MOV X19, X0
	0x03554348 ADRP X0, 0xBE1000
	0x0355434C LDR X0, [X0 + 0x308]
	0x03554350 BL 0x1C16D08
	0x03554354 MOV X1, X0
	0x03554358 MOV X0, X19
	0x0355435C MOV X2, X31
	0x03554360 BL 0x338C448
	0x03554364 ADRP X0, 0xBE1000
	0x03554368 LDR X0, [X0 + 0x340]
	0x0355436C BL 0x1C16D08
	0x03554370 MOV X1, X0
	0x03554374 MOV X0, X19
	0x03554378 BL 0x1C16DEC
	0x0355437C BL 0x1C16F28
	0x03554380 BL 0x1C16F44
	0x03554384 MOV X1, X31
	0x03554388 BL 0x1C16DEC
	0x0355438C BL 0x1C16F20

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+64], X22
	004 Move [X31+72], X21
	005 Move [X31+80], X20
	006 Move [X31+88], X19
	007 Move X22, 0xE8C000
	008 Move X8, [X22+3376]
	009 Move X19, X2
	010 Move W20, W1
	011 Move X21, X0
	012 Compare X8, 0
	013 JumpIfNotEqual {34}
	014 Move X12, -44457984
	015 Move V0, [X12+3776]
	016 Move X8, -44257280
	017 Move X10, -44380160
	018 Add X8, X8, 341
	019 Move W9, 9
	020 Add X10, X10, 1024
	021 Move W11, 16
	022 Move W13, 20
	023 Add X0, X31, 0
	024 Move [X31], X8
	025 Move [X31+8], X9
	026 Move [X31+16], X10
	027 Move [X31+24], X11
	028 Move [X31+40], W13
	029 Move [X31+32], D0
	030 Move [X31+44], W31
	031 Call 0x1C1829C
	032 Move X8, X0
	033 Move [X22+3376], X0
	034 Move X0, X21
	035 Move W1, W20
	036 Move X2, X19
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Move X20, [X31+80]
	039 Move X19, [X31+88]
	040 Move X22, [X31+64]
	041 Move X21, [X31+72]
	042 Move X30, [X31+48]
	043 Add X31, X31, 96
	044 Return X0

Method: System.Int32 opus_decoder_get_size(POpusCodec.Enums.Channels channels)

Disassembly:
	0x03554390 MOV X1, X31
	0x03554394 B 0x33BDD8C
	0x03554398 STR X30, [X31 - 0x10]!
	0x0355439C CMP W3, 0x1
	0x035543A0 B.EQ 0x3554460
	0x035543A4 CMP W3, 0x2
	0x035543A8 B.NE 0x35544CC
	0x035543AC CMP W2, 0x0
	0x035543B0 CINC W11, W2, LT
	0x035543B4 CMP W2, 0x2
	0x035543B8 B.LT 0x3554554
	0x035543BC CBZ X0, 0x3554560
	0x035543C0 ADRP X12, 0xFFFFFFFFFD596000
	0x035543C4 LDR W10, [X0 + 0x18]
	0x035543C8 LDR V0, [X12 + 0x374]
	0x035543CC SBFM W11, W11, 0x1, 0x1F
	0x035543D0 MOV W11, W11
	0x035543D4 MOV X8, X31
	0x035543D8 MOV W9, W31
	0x035543DC UBFM X11, X11, 0x3F, 0x3E
	0x035543E0 SDIV W12, W9, W2
	0x035543E4 UBFM W13, W12, 0x1F, 0x1E
	0x035543E8 CMP W13, W10
	0x035543EC B.CS 0x355455C
	0x035543F0 CBZ X1, 0x3554560
	0x035543F4 LDR W12, [X1 + 0x18]
	0x035543F8 CMP X8, X12
	0x035543FC B.CS 0x355455C
	0x03554400 SXTW X13, W13
	0x03554404 ADD X14, X0, X13, 0x1, LSL
	0x03554408 LDRSH W14, [X14 + 0x20]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+64], X20
	004 Move [X31+72], X19
	005 Move X20, 0xE8C000
	006 Move X8, [X20+3384]
	007 Move W19, W0
	008 Compare X8, 0
	009 JumpIfNotEqual {30}
	010 Move X12, -44457984
	011 Move V0, [X12+3776]
	012 Move X8, -44257280
	013 Move X10, -44363776
	014 Add X8, X8, 341
	015 Move W9, 9
	016 Add X10, X10, 2278
	017 Move W11, 21
	018 Move W13, 4
	019 Add X0, X31, 0
	020 Move [X31], X8
	021 Move [X31+8], X9
	022 Move [X31+16], X10
	023 Move [X31+24], X11
	024 Move [X31+40], W13
	025 Move [X31+32], D0
	026 Move [X31+44], W31
	027 Call 0x1C1829C
	028 Move X8, X0
	029 Move [X20+3384], X0
	030 Move W0, W19
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move X20, [X31+64]
	033 Move X19, [X31+72]
	034 Move X30, [X31+48]
	035 Add X31, X31, 80
	036 Return X0

Method: POpusCodec.Enums.OpusStatusCode opus_decoder_init(System.IntPtr st, POpusCodec.Enums.SamplingRate Fs, POpusCodec.Enums.Channels channels)

Disassembly:
	0x0355440C ORR X13, X13, 0x1
	0x03554410 ADD X15, X1, X8, 0x2, LSL
	0x03554414 CMP W13, W10
	0x03554418 SCVTF S1, W14
	0x0355441C FDIV S1, S1, S0
	0x03554420 STR S1, [X15 + 0x20]
	0x03554424 B.CS 0x355455C
	0x03554428 ADD X14, X8, 0x1
	0x0355442C CMP X14, X12
	0x03554430 B.CS 0x355455C
	0x03554434 ADD X12, X0, X13, 0x1, LSL
	0x03554438 LDRSH W12, [X12 + 0x20]
	0x0355443C ADD X13, X1, X8, 0x2, LSL
	0x03554440 ADD X8, X8, 0x2
	0x03554444 CMP X11, X8
	0x03554448 SCVTF S1, W12
	0x0355444C FDIV S1, S1, S0
	0x03554450 ADD W9, W9, W10
	0x03554454 STR S1, [X13 + 0x24]
	0x03554458 B.NE 0x35543E0
	0x0355445C B 0x3554554
	0x03554460 CMP W2, 0x1
	0x03554464 B.LT 0x3554554
	0x03554468 CBZ X0, 0x3554560
	0x0355446C ADRP X11, 0xFFFFFFFFFD596000
	0x03554470 LDR W10, [X0 + 0x18]
	0x03554474 LDR V0, [X11 + 0x374]
	0x03554478 MOV W8, W31
	0x0355447C MOV X9, X31
	0x03554480 MOV W11, W2
	0x03554484 ADD X12, X1, 0x20
	0x03554488 SDIV W13, W8, W11
	0x0355448C CMP W13, W10
	0x03554490 B.CS 0x355455C
	0x03554494 CBZ X1, 0x3554560
	0x03554498 LDR W14, [X1 + 0x18]
	0x0355449C CMP X9, X14

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+64], X22
	004 Move [X31+72], X21
	005 Move [X31+80], X20
	006 Move [X31+88], X19
	007 Move X22, 0xE8C000
	008 Move X8, [X22+3392]
	009 Move W19, W2
	010 Move W20, W1
	011 Move X21, X0
	012 Compare X8, 0
	013 JumpIfNotEqual {34}
	014 Move X12, -44457984
	015 Move V0, [X12+3776]
	016 Move X8, -44257280
	017 Move X10, -44322816
	018 Add X8, X8, 341
	019 Move W9, 9
	020 Add X10, X10, 1592
	021 Move W11, 17
	022 Move W13, 16
	023 Add X0, X31, 0
	024 Move [X31], X8
	025 Move [X31+8], X9
	026 Move [X31+16], X10
	027 Move [X31+24], X11
	028 Move [X31+40], W13
	029 Move [X31+32], D0
	030 Move [X31+44], W31
	031 Call 0x1C1829C
	032 Move X8, X0
	033 Move [X22+3392], X0
	034 Move X0, X21
	035 Move W1, W20
	036 Move W2, W19
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Move X20, [X31+80]
	039 Move X19, [X31+88]
	040 Move X22, [X31+64]
	041 Move X21, [X31+72]
	042 Move X30, [X31+48]
	043 Add X31, X31, 96
	044 Return X0

Method: System.Int32 opus_packet_get_bandwidth(System.IntPtr data)

Disassembly:
	0x035544A0 B.CS 0x355455C
	0x035544A4 ADD X13, X0, W13, 0x1, SXTW
	0x035544A8 LDRSH W13, [X13 + 0x20]
	0x035544AC ADD W8, W8, W10
	0x035544B0 SCVTF S1, W13
	0x035544B4 FDIV S1, S1, S0
	0x035544B8 STR S1, [X12, X9, LSL #2]
	0x035544BC ADD X9, X9, 0x1
	0x035544C0 CMP X11, X9
	0x035544C4 B.NE 0x3554488
	0x035544C8 B 0x3554554
	0x035544CC SDIV W8, W2, W3
	0x035544D0 CMP W8, 0x1
	0x035544D4 B.LT 0x3554554
	0x035544D8 CBZ X0, 0x3554560
	0x035544DC ADRP X10, 0xFFFFFFFFFD596000
	0x035544E0 LDR W9, [X0 + 0x18]
	0x035544E4 LDR V0, [X10 + 0x374]
	0x035544E8 MOV W10, W31
	0x035544EC CMP W3, 0x1
	0x035544F0 B.LT 0x3554548
	0x035544F4 MUL W11, W10, W9
	0x035544F8 SDIV W11, W11, W2
	0x035544FC MUL W12, W11, W3
	0x03554500 MUL W13, W10, W3
	0x03554504 MOV W11, W3
	0x03554508 CMP W12, W9
	0x0355450C B.CS 0x355455C
	0x03554510 CBZ X1, 0x3554560
	0x03554514 LDR W14, [X1 + 0x18]
	0x03554518 CMP W13, W14

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+64], X20
	004 Move [X31+72], X19
	005 Move X20, 0xE8C000
	006 Move X8, [X20+3400]
	007 Move X19, X0
	008 Compare X8, 0
	009 JumpIfNotEqual {30}
	010 Move X12, -44457984
	011 Move V0, [X12+3776]
	012 Move X8, -44257280
	013 Move X10, -44257280
	014 Add X8, X8, 341
	015 Move W9, 9
	016 Add X10, X10, 351
	017 Move W11, 25
	018 Move W13, 8
	019 Add X0, X31, 0
	020 Move [X31], X8
	021 Move [X31+8], X9
	022 Move [X31+16], X10
	023 Move [X31+24], X11
	024 Move [X31+40], W13
	025 Move [X31+32], D0
	026 Move [X31+44], W31
	027 Call 0x1C1829C
	028 Move X8, X0
	029 Move [X20+3400], X0
	030 Move X0, X19
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move X20, [X31+64]
	033 Move X19, [X31+72]
	034 Move X30, [X31+48]
	035 Add X31, X31, 80
	036 Return X0

Method: System.Int32 opus_packet_get_nb_channels(System.Byte[] data)

Disassembly:
	0x0355451C B.CS 0x355455C
	0x03554520 ADD X14, X0, W12, 0x1, SXTW
	0x03554524 LDRSH W14, [X14 + 0x20]
	0x03554528 ADD X15, X1, W13, 0x2, SXTW
	0x0355452C ADD W13, W13, 0x1
	0x03554530 ADD W12, W12, 0x1
	0x03554534 SCVTF S1, W14
	0x03554538 FDIV S1, S1, S0
	0x0355453C SUBS W11, W11, 0x1
	0x03554540 STR S1, [X15 + 0x20]
	0x03554544 B.NE 0x3554508
	0x03554548 ADD W10, W10, 0x1
	0x0355454C CMP W10, W8
	0x03554550 B.NE 0x35544EC
	0x03554554 LDR X30, [X31], #0x10
	0x03554558 RET
	0x0355455C BL 0x1C16F28
	0x03554560 BL 0x1C16F20
	0x03554564 STR X30, [X31 - 0x10]!
	0x03554568 CMP W3, 0x1
	0x0355456C B.EQ 0x3554648
	0x03554570 CMP W3, 0x2
	0x03554574 B.NE 0x35546C4
	0x03554578 CMP W2, 0x0
	0x0355457C CINC W10, W2, LT
	0x03554580 CMP W2, 0x2
	0x03554584 B.LT 0x355475C
	0x03554588 CBZ X0, 0x3554768
	0x0355458C ADRP X12, 0xFFFFFFFFFD596000
	0x03554590 SBFM W11, W10, 0x1, 0x1F
	0x03554594 LDR W10, [X0 + 0x18]
	0x03554598 LDR V0, [X12 + 0x374]
	0x0355459C MOV W11, W11

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+64], X20
	004 Move [X31+72], X19
	005 Move X20, 0xE8C000
	006 Move X8, [X20+3408]
	007 Move X19, X0
	008 Compare X8, 0
	009 JumpIfNotEqual {30}
	010 Move X12, -44457984
	011 Move V0, [X12+3776]
	012 Move X8, -44257280
	013 Move X10, -44355584
	014 Add X8, X8, 341
	015 Move W9, 9
	016 Add X10, X10, 1869
	017 Move W11, 27
	018 Move W13, 8
	019 Add X0, X31, 0
	020 Move [X31], X8
	021 Move [X31+8], X9
	022 Move [X31+16], X10
	023 Move [X31+24], X11
	024 Move [X31+40], W13
	025 Move [X31+32], D0
	026 Move [X31+44], W31
	027 Call 0x1C1829C
	028 Move X8, X0
	029 Move [X20+3408], X0
	030 Add X9, X19, 32
	031 NotImplemented "Instruction CMP not yet implemented."
	032 NotImplemented "Instruction CSEL not yet implemented."
	033 NotImplemented "Instruction BLR not yet implemented."
	034 Move X20, [X31+64]
	035 Move X19, [X31+72]
	036 Move X30, [X31+48]
	037 Add X31, X31, 80
	038 Return X0

Method: System.IntPtr opus_strerror(POpusCodec.Enums.OpusStatusCode error)

Disassembly:
	0x035545A0 MOV X8, X31
	0x035545A4 MOV W9, W31
	0x035545A8 UBFM X11, X11, 0x3F, 0x3E
	0x035545AC MOVZ W12, 0x7F800000
	0x035545B0 SDIV W13, W9, W2
	0x035545B4 UBFM W14, W13, 0x1F, 0x1E
	0x035545B8 CMP W14, W10
	0x035545BC B.CS 0x3554764
	0x035545C0 CBZ X1, 0x3554768
	0x035545C4 LDR W13, [X1 + 0x18]
	0x035545C8 CMP X8, X13
	0x035545CC B.CS 0x3554764
	0x035545D0 SXTW X14, W14
	0x035545D4 ADD X15, X0, X14, 0x2, LSL
	0x035545D8 LDR V1, [X15 + 0x20]
	0x035545DC FMOV S2, W12
	0x035545E0 ORR X14, X14, 0x1
	0x035545E4 ADD X15, X1, X8, 0x1, LSL
	0x035545E8 FMUL S1, S1, S0
	0x035545EC FCVTZS W16, S1
	0x035545F0 FCMP S1, S2
	0x035545F4 CSEL W16, W31, W16, EQ
	0x035545F8 CMP W14, W10
	0x035545FC STRH W16, [X15 + 0x20]
	0x03554600 B.CS 0x3554764
	0x03554604 ADD X15, X8, 0x1
	0x03554608 CMP X15, X13
	0x0355460C B.CS 0x3554764
	0x03554610 ADD X13, X0, X14, 0x2, LSL
	0x03554614 LDR V1, [X13 + 0x20]
	0x03554618 FMOV S2, W12

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+64], X20
	004 Move [X31+72], X19
	005 Move X20, 0xE8C000
	006 Move X8, [X20+3416]
	007 Move W19, W0
	008 Compare X8, 0
	009 JumpIfNotEqual {30}
	010 Move X12, -44457984
	011 Move V0, [X12+3776]
	012 Move X8, -44257280
	013 Move X10, -44429312
	014 Add X8, X8, 341
	015 Move W9, 9
	016 Add X10, X10, 2116
	017 Move W11, 13
	018 Move W13, 4
	019 Add X0, X31, 0
	020 Move [X31], X8
	021 Move [X31+8], X9
	022 Move [X31+16], X10
	023 Move [X31+24], X11
	024 Move [X31+40], W13
	025 Move [X31+32], D0
	026 Move [X31+44], W31
	027 Call 0x1C1829C
	028 Move X8, X0
	029 Move [X20+3416], X0
	030 Move W0, W19
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move X20, [X31+64]
	033 Move X19, [X31+72]
	034 Move X30, [X31+48]
	035 Add X31, X31, 80
	036 Return X0

Method: System.IntPtr opus_encoder_create(POpusCodec.Enums.SamplingRate Fs, POpusCodec.Enums.Channels channels, POpusCodec.Enums.OpusApplicationType application)

Disassembly:
	0x035530B4 MOV X23, X1
	0x035530B8 MOV X22, X0
	0x035530BC CBNZ X8, 0x3553108
	0x035530C0 ADRP X12, 0xFFFFFFFFFD59A000
	0x035530C4 LDR V0, [X12 + 0xEC0]
	0x035530C8 ADRP X8, 0xFFFFFFFFFD5CB000
	0x035530CC ADRP X10, 0xFFFFFFFFFD59D000
	0x035530D0 ADD X8, X8, 0x155
	0x035530D4 MOVZ W9, 0x9
	0x035530D8 ADD X10, X10, 0x4A6
	0x035530DC MOVZ W11, 0x11
	0x035530E0 MOVZ W13, 0x20
	0x035530E4 ADD X0, X31, 0x0
	0x035530E8 STP X8, X9, [X31]
	0x035530EC STP X10, X11, [X31 + 0x10]
	0x035530F0 STR W13, [X31 + 0x28]
	0x035530F4 STR D0, [X31 + 0x20]
	0x035530F8 STRB W31, [X31 + 0x2C]
	0x035530FC BL 0x1C1729C
	0x03553100 MOV X8, X0
	0x03553104 STR X0, [X24 + 0xD10]
	0x03553108 ADD X9, X23, 0x20
	0x0355310C CMP X23, 0x0
	0x03553110 ADD X10, X21, 0x20
	0x03553114 CSEL X1, X31, X9, EQ
	0x03553118 CMP X21, 0x0
	0x0355311C CSEL X3, X31, X10, EQ
	0x03553120 MOV X0, X22
	0x03553124 MOV W2, W20
	0x03553128 MOV W4, W19
	0x0355312C BLR X8
	0x03553130 LDP X20, X19, [X31 + 0x60]
	0x03553134 LDP X22, X21, [X31 + 0x50]
	0x03553138 LDP X24, X23, [X31 + 0x40]
	0x0355313C LDR X30, [X31 + 0x30]
	0x03553140 ADD X31, X31, 0x70
	0x03553144 RET
	0x03553148 SUB X31, X31, 0x60
	0x0355314C STR X30, [X31 + 0x30]
	0x03553150 STP X22, X21, [X31 + 0x40]
	0x03553154 STP X20, X19, [X31 + 0x50]
	0x03553158 ADRP X22, 0xE8C000
	0x0355315C LDR X8, [X22 + 0xD18]
	0x03553160 MOV W19, W2
	0x03553164 MOV W20, W1
	0x03553168 MOV X21, X0
	0x0355316C CBNZ X8, 0x35531B4
	0x03553170 ADRP X12, 0xFFFFFFFFFD59A000
	0x03553174 LDR V0, [X12 + 0xEC0]
	0x03553178 ADRP X8, 0xFFFFFFFFFD5CB000
	0x0355317C ADRP X10, 0xFFFFFFFFFD5B3000
	0x03553180 ADD X8, X8, 0x155
	0x03553184 MOVZ W9, 0x9
	0x03553188 ADD X10, X10, 0x73C
	0x0355318C MOVZ W11, 0x10
	0x03553190 ADD X0, X31, 0x0
	0x03553194 STP X8, X9, [X31]
	0x03553198 STP X10, X11, [X31 + 0x10]
	0x0355319C STR W11, [X31 + 0x28]
	0x035531A0 STR D0, [X31 + 0x20]
	0x035531A4 STRB W31, [X31 + 0x2C]
	0x035531A8 BL 0x1C1729C
	0x035531AC MOV X8, X0
	0x035531B0 STR X0, [X22 + 0xD18]
	0x035531B4 MOV X0, X21
	0x035531B8 MOV W1, W20
	0x035531BC MOV W2, W19
	0x035531C0 BLR X8
	0x035531C4 LDP X20, X19, [X31 + 0x50]
	0x035531C8 LDP X22, X21, [X31 + 0x40]
	0x035531CC LDR X30, [X31 + 0x30]
	0x035531D0 ADD X31, X31, 0x60
	0x035531D4 RET
	0x035531D8 SUB X31, X31, 0x60
	0x035531DC STR X30, [X31 + 0x30]
	0x035531E0 STP X22, X21, [X31 + 0x40]
	0x035531E4 STP X20, X19, [X31 + 0x50]
	0x035531E8 ADRP X22, 0xE8C000
	0x035531EC LDR X8, [X22 + 0xD20]
	0x035531F0 MOV X19, X2
	0x035531F4 MOV W20, W1
	0x035531F8 MOV X21, X0
	0x035531FC CBNZ X8, 0x3553248
	0x03553200 ADRP X12, 0xFFFFFFFFFD59A000
	0x03553204 LDR V0, [X12 + 0xEC0]
	0x03553208 ADRP X8, 0xFFFFFFFFFD5CB000
	0x0355320C ADRP X10, 0xFFFFFFFFFD5B3000
	0x03553210 ADD X8, X8, 0x155
	0x03553214 MOVZ W9, 0x9
	0x03553218 ADD X10, X10, 0x73C
	0x0355321C MOVZ W11, 0x10
	0x03553220 MOVZ W13, 0x14
	0x03553224 ADD X0, X31, 0x0
	0x03553228 STP X8, X9, [X31]
	0x0355322C STP X10, X11, [X31 + 0x10]
	0x03553230 STR W13, [X31 + 0x28]
	0x03553234 STR D0, [X31 + 0x20]
	0x03553238 STRB W31, [X31 + 0x2C]
	0x0355323C BL 0x1C1729C
	0x03553240 MOV X8, X0
	0x03553244 STR X0, [X22 + 0xD20]
	0x03553248 MOV X0, X21
	0x0355324C MOV W1, W20
	0x03553250 MOV X2, X19
	0x03553254 BLR X8
	0x03553258 LDP X20, X19, [X31 + 0x50]
	0x0355325C LDP X22, X21, [X31 + 0x40]
	0x03553260 LDR X30, [X31 + 0x30]
	0x03553264 ADD X31, X31, 0x60
	0x03553268 RET
	0x0355326C SUB X31, X31, 0x60
	0x03553270 STR X30, [X31 + 0x30]
	0x03553274 STP X22, X21, [X31 + 0x40]
	0x03553278 STP X20, X19, [X31 + 0x50]
	0x0355327C ADRP X22, 0xE8C000
	0x03553280 LDR X8, [X22 + 0xD28]
	0x03553284 MOV W19, W2
	0x03553288 MOV W20, W1
	0x0355328C MOV X21, X0
	0x03553290 CBNZ X8, 0x35532D8
	0x03553294 ADRP X12, 0xFFFFFFFFFD59A000
	0x03553298 LDR V0, [X12 + 0xEC0]
	0x0355329C ADRP X8, 0xFFFFFFFFFD5CB000
	0x035532A0 ADRP X10, 0xFFFFFFFFFD5AD000
	0x035532A4 ADD X8, X8, 0x155
	0x035532A8 MOVZ W9, 0x9
	0x035532AC ADD X10, X10, 0x400
	0x035532B0 MOVZ W11, 0x10
	0x035532B4 ADD X0, X31, 0x0
	0x035532B8 STP X8, X9, [X31]
	0x035532BC STP X10, X11, [X31 + 0x10]
	0x035532C0 STR W11, [X31 + 0x28]
	0x035532C4 STR D0, [X31 + 0x20]
	0x035532C8 STRB W31, [X31 + 0x2C]
	0x035532CC BL 0x1C1729C
	0x035532D0 MOV X8, X0
	0x035532D4 STR X0, [X22 + 0xD28]
	0x035532D8 MOV X0, X21
	0x035532DC MOV W1, W20
	0x035532E0 MOV W2, W19
	0x035532E4 BLR X8
	0x035532E8 LDP X20, X19, [X31 + 0x50]
	0x035532EC LDP X22, X21, [X31 + 0x40]
	0x035532F0 LDR X30, [X31 + 0x30]
	0x035532F4 ADD X31, X31, 0x60
	0x035532F8 RET
	0x035532FC SUB X31, X31, 0x60
	0x03553300 STR X30, [X31 + 0x30]
	0x03553304 STP X22, X21, [X31 + 0x40]
	0x03553308 STP X20, X19, [X31 + 0x50]
	0x0355330C ADRP X22, 0xE8C000
	0x03553310 LDR X8, [X22 + 0xD30]
	0x03553314 MOV X19, X2
	0x03553318 MOV W20, W1
	0x0355331C MOV X21, X0
	0x03553320 CBNZ X8, 0x355336C
	0x03553324 ADRP X12, 0xFFFFFFFFFD59A000
	0x03553328 LDR V0, [X12 + 0xEC0]
	0x0355332C ADRP X8, 0xFFFFFFFFFD5CB000
	0x03553330 ADRP X10, 0xFFFFFFFFFD5AD000
	0x03553334 ADD X8, X8, 0x155
	0x03553338 MOVZ W9, 0x9
	0x0355333C ADD X10, X10, 0x400
	0x03553340 MOVZ W11, 0x10
	0x03553344 MOVZ W13, 0x14
	0x03553348 ADD X0, X31, 0x0
	0x0355334C STP X8, X9, [X31]
	0x03553350 STP X10, X11, [X31 + 0x10]
	0x03553354 STR W13, [X31 + 0x28]
	0x03553358 STR D0, [X31 + 0x20]
	0x0355335C STRB W31, [X31 + 0x2C]
	0x03553360 BL 0x1C1729C
	0x03553364 MOV X8, X0
	0x03553368 STR X0, [X22 + 0xD30]
	0x0355336C MOV X0, X21
	0x03553370 MOV W1, W20
	0x03553374 MOV X2, X19
	0x03553378 BLR X8
	0x0355337C LDP X20, X19, [X31 + 0x50]
	0x03553380 LDP X22, X21, [X31 + 0x40]
	0x03553384 LDR X30, [X31 + 0x30]
	0x03553388 ADD X31, X31, 0x60
	0x0355338C RET
	0x03553390 SUB X31, X31, 0x50
	0x03553394 STR X30, [X31 + 0x30]
	0x03553398 STP X20, X19, [X31 + 0x40]
	0x0355339C ADRP X20, 0xE8C000
	0x035533A0 LDR X8, [X20 + 0xD38]
	0x035533A4 MOV W19, W0
	0x035533A8 CBNZ X8, 0x35533F4
	0x035533AC ADRP X12, 0xFFFFFFFFFD59A000
	0x035533B0 LDR V0, [X12 + 0xEC0]
	0x035533B4 ADRP X8, 0xFFFFFFFFFD5CB000

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0xE8D000
	011 Move X19, 0xBC9000
	012 Move W8, [X21+3424]
	013 Move X19, [X19+2128]
	014 Move W20, W2
	015 Move W22, W1
	016 Move W24, W0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {41}
	021 Move X0, 0xBE3000
	022 Move X0, [X0+648]
	023 Call 0x1C17CF4
	024 Move X0, 0xBC9000
	025 Move X0, [X0+2128]
	026 Call 0x1C17CF4
	027 Move X0, 0xBA1000
	028 Move X0, [X0+2512]
	029 Call 0x1C17CF4
	030 Move X0, 0xBE3000
	031 Move X0, [X0+584]
	032 Call 0x1C17CF4
	033 Move X0, 0xBCA000
	034 Move X0, [X0+3584]
	035 Call 0x1C17CF4
	036 Move X0, 0xBE3000
	037 Move X0, [X0+656]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X21+3424], W8
	041 Move X21, 0xBA1000
	042 Move X21, [X21+2512]
	043 Move W0, W22
	044 Call Wrapper.opus_encoder_get_size, X0
	045 Move X8, [X19]
	046 Move W19, W0
	047 Move W9, [X8+224]
	048 Compare W9, 0
	049 JumpIfNotEqual {52}
	050 Move X0, X8
	051 Call 0x1C17DFC
	052 Move W0, W19
	053 Move X1, X31
	054 Call Marshal.AllocHGlobal, X0
	055 Move W1, W24
	056 Move W2, W22
	057 Move W3, W20
	058 Move X19, X0
	059 Call Wrapper.opus_encoder_init, X0, X1, X2, X3
	060 Move X8, [X21]
	061 Move W21, W0
	062 Move W1, 4
	063 Move X0, X8
	064 Call 0x1C17D6C
	065 Move X23, X0
	066 Compare X0, 0
	067 JumpIfEqual {151}
	068 Move X25, 0xBE3000
	069 Move X25, [X25+656]
	070 Move X0, [X25]
	071 Compare X0, 0
	072 JumpIfEqual {78}
	073 Move X8, [X23]
	074 Move X1, [X8+64]
	075 Call 0x1C17E00
	076 Compare X0, 0
	077 JumpIfEqual {156}
	078 Move W8, [X23+24]
	079 Compare W8, 0
	080 JumpIfEqual {152}
	081 Move X8, [X25]
	082 Move X9, 0xBCA000
	083 Move X9, [X9+3584]
	084 Move [X23+32], X8
	085 Move [X31+12], W24
	086 Move X0, [X9]
	087 Add X1, X31, 12
	088 Call 0x1C17E04
	089 Move X24, X0
	090 Compare X0, 0
	091 JumpIfEqual {98}
	092 Move X8, [X23]
	093 Move X1, [X8+64]
	094 Move X0, X24
	095 Call 0x1C17E00
	096 Compare X0, 0
	097 JumpIfEqual {159}
	098 Move W8, [X23+24]
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Move X8, 0xBE3000
	101 Move X8, [X8+648]
	102 Move [X23+40], X24
	103 Move [X31+8], W22
	104 Move X0, [X8]
	105 Add X1, X31, 8
	106 Call 0x1C17E04
	107 Move X22, X0
	108 Compare X0, 0
	109 JumpIfEqual {116}
	110 Move X8, [X23]
	111 Move X1, [X8+64]
	112 Move X0, X22
	113 Call 0x1C17E00
	114 Compare X0, 0
	115 JumpIfEqual {162}
	116 Move W8, [X23+24]
	117 NotImplemented "Instruction CMP not yet implemented."
	118 Move X8, 0xBE3000
	119 Move X8, [X8+584]
	120 Move [X23+48], X22
	121 Move [X31+4], W20
	122 Move X0, [X8]
	123 Add X1, X31, 4
	124 Call 0x1C17E04
	125 Move X20, X0
	126 Compare X0, 0
	127 JumpIfEqual {134}
	128 Move X8, [X23]
	129 Move X1, [X8+64]
	130 Move X0, X20
	131 Call 0x1C17E00
	132 Compare X0, 0
	133 JumpIfEqual {165}
	134 Move W8, [X23+24]
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Move [X23+56], X20
	137 Move W0, W21
	138 Move X1, X23
	139 Call Wrapper.HandleStatusCode, X0, X1
	140 Move X0, X19
	141 Move X20, [X31+64]
	142 Move X19, [X31+72]
	143 Move X22, [X31+48]
	144 Move X21, [X31+56]
	145 Move X24, [X31+32]
	146 Move X23, [X31+40]
	147 Move X30, [X31+16]
	148 Move X25, [X31+24]
	149 Add X31, X31, 80
	150 Return X0
	151 Call 0x1C17F20
	152 Call 0x1C17F28
	153 Call 0x1C17F28
	154 Call 0x1C17F28
	155 Call 0x1C17F28
	156 Call 0x1C17F44
	157 Move X1, X31
	158 Call 0x1C17DEC
	159 Call 0x1C17F44
	160 Move X1, X31
	161 Call 0x1C17DEC
	162 Call 0x1C17F44
	163 Move X1, X31
	164 Call 0x1C17DEC
	165 Call 0x1C17F44
	166 Move X1, X31
	167 Call 0x1C17DEC
	168 Move X20, X0
	169 NotImplemented "Instruction CMP not yet implemented."
	170 Move X0, X20
	171 Call 0x3EB2AD0
	172 Move X20, X0
	173 Move X0, 0xBA1000
	174 Move X0, [X0+2000]
	175 Call 0x1C17D08
	176 Move X8, [X20]
	177 Move X1, [X8]
	178 Call 0x1C18270
	179 Move TEMP, X0
	180 And TEMP, TEMP, 1
	181 Compare TEMP, 1
	182 JumpIfNotEqual {201}
	183 Move X20, [X20]
	184 Call 0x3EB2AE0
	185 Move X0, X19
	186 Move X1, X31
	187 Move X2, X31
	188 Call IntPtr.op_Inequality, X0, X1
	189 Move TEMP, X0
	190 And TEMP, TEMP, 1
	191 Compare TEMP, 1
	192 JumpIfNotEqual {195}
	193 Move X0, X19
	194 Call Wrapper.opus_encoder_destroy, X0
	195 Move X0, 0xBE3000
	196 Move X0, [X0+664]
	197 Call 0x1C17D08
	198 Move X1, X0
	199 Move X0, X20
	200 Call 0x1C17DEC
	201 Move W0, 8
	202 Call 0x3EB2AF0
	203 Move X8, [X20]
	204 Move [X0], X8
	205 Move X1, 0x962000
	206 Add X1, X1, 3672
	207 Move X2, X31
	208 Call 0x3EB2B00
	209 Move X20, X0
	210 Call 0x3EB2AE0
	211 Move X0, X20
	212 Call 0x1D2D690
	213 Call 0x1991590

Method: System.Int32 opus_encode(System.IntPtr st, System.Int16[] pcm, System.Int32 frame_size, System.Byte[] data)

Disassembly:
	0x03553900 BL 0x1C16F10
	0x03553904 MOV X19, X0
	0x03553908 ADRP X0, 0xBE2000
	0x0355390C LDR X0, [X0 + 0x2F0]
	0x03553910 BL 0x1C16D08
	0x03553914 MOV X1, X0
	0x03553918 MOV X0, X19
	0x0355391C MOV X2, X31
	0x03553920 BL 0x338C448
	0x03553924 ADRP X0, 0xBE2000
	0x03553928 LDR X0, [X0 + 0x2F8]
	0x0355392C BL 0x1C16D08
	0x03553930 MOV X1, X0
	0x03553934 MOV X0, X19
	0x03553938 BL 0x1C16DEC
	0x0355393C BL 0x1C16F20
	0x03553940 SUB X31, X31, 0x40
	0x03553944 STP X30, X23, [X31 + 0x10]
	0x03553948 STP X22, X21, [X31 + 0x20]
	0x0355394C STP X20, X19, [X31 + 0x30]
	0x03553950 ADRP X21, 0xE8C000
	0x03553954 LDRB W8, [X21 + 0xD66]
	0x03553958 MOV W19, W2
	0x0355395C MOV W22, W1
	0x03553960 MOV X20, X0
	0x03553964 TBNZ X8, 0x0, 0x35539A0
	0x03553968 ADRP X0, 0xBA0000
	0x0355396C LDR X0, [X0 + 0x758]
	0x03553970 BL 0x1C16CF4
	0x03553974 ADRP X0, 0xBA0000
	0x03553978 LDR X0, [X0 + 0x9D0]
	0x0355397C BL 0x1C16CF4
	0x03553980 ADRP X0, 0xBE2000
	0x03553984 LDR X0, [X0 + 0x220]
	0x03553988 BL 0x1C16CF4
	0x0355398C ADRP X0, 0xBE2000
	0x03553990 LDR X0, [X0 + 0x300]
	0x03553994 BL 0x1C16CF4
	0x03553998 MOVZ W8, 0x1
	0x0355399C STRB W8, [X21 + 0xD66]
	0x035539A0 MOV X0, X20
	0x035539A4 MOV X1, X31
	0x035539A8 MOV X2, X31
	0x035539AC BL 0x33BE5B0
	0x035539B0 TBNZ X0, 0x0, 0x3553AD0
	0x035539B4 ADRP X21, 0xBA0000
	0x035539B8 LDR X21, [X21 + 0x9D0]
	0x035539BC MOV X0, X20
	0x035539C0 MOV W1, W22
	0x035539C4 MOV W2, W19
	0x035539C8 BL 0x355326C
	0x035539CC LDR X8, [X21]
	0x035539D0 MOV W20, W0
	0x035539D4 MOVZ W1, 0x3
	0x035539D8 MOV X0, X8
	0x035539DC BL 0x1C16D6C
	0x035539E0 CBZ X0, 0x3553B18
	0x035539E4 ADRP X23, 0xBE2000
	0x035539E8 LDR X23, [X23 + 0x300]
	0x035539EC MOV X21, X0
	0x035539F0 LDR X0, [X23]
	0x035539F4 CBZ X0, 0x3553A08
	0x035539F8 LDR X8, [X21]
	0x035539FC LDR X1, [X8 + 0x40]
	0x03553A00 BL 0x1C16E00
	0x03553A04 CBZ X0, 0x3553AC4
	0x03553A08 LDR W8, [X21 + 0x18]
	0x03553A0C CBZ W8, 0x3553AC0
	0x03553A10 LDR X8, [X23]
	0x03553A14 ADRP X9, 0xBE2000
	0x03553A18 LDR X9, [X9 + 0x220]
	0x03553A1C ADD X1, X31, 0xC
	0x03553A20 STR X8, [X21 + 0x20]
	0x03553A24 STR W22, [X31 + 0xC]
	0x03553A28 LDR X0, [X9]
	0x03553A2C BL 0x1C16E04
	0x03553A30 MOV X22, X0
	0x03553A34 CBZ X0, 0x3553A4C
	0x03553A38 LDR X8, [X21]
	0x03553A3C MOV X0, X22
	0x03553A40 LDR X1, [X8 + 0x40]
	0x03553A44 BL 0x1C16E00
	0x03553A48 CBZ X0, 0x3553AC4
	0x03553A4C LDR W8, [X21 + 0x18]
	0x03553A50 CMP W8, 0x1
	0x03553A54 B.LS 0x3553AC0
	0x03553A58 ADRP X8, 0xBA0000
	0x03553A5C LDR X8, [X8 + 0x758]
	0x03553A60 STR X22, [X21 + 0x28]
	0x03553A64 ADD X1, X31, 0x8
	0x03553A68 STR W19, [X31 + 0x8]
	0x03553A6C LDR X0, [X8]
	0x03553A70 BL 0x1C16E04
	0x03553A74 MOV X19, X0
	0x03553A78 CBZ X0, 0x3553A90
	0x03553A7C LDR X8, [X21]
	0x03553A80 MOV X0, X19
	0x03553A84 LDR X1, [X8 + 0x40]
	0x03553A88 BL 0x1C16E00
	0x03553A8C CBZ X0, 0x3553AC4
	0x03553A90 LDR W8, [X21 + 0x18]
	0x03553A94 CMP W8, 0x2
	0x03553A98 B.LS 0x3553AC0
	0x03553A9C MOV W0, W20
	0x03553AA0 MOV X1, X21
	0x03553AA4 STR X19, [X21 + 0x30]
	0x03553AA8 BL 0x355361C
	0x03553AAC LDP X20, X19, [X31 + 0x30]
	0x03553AB0 LDP X22, X21, [X31 + 0x20]
	0x03553AB4 LDP X30, X23, [X31 + 0x10]
	0x03553AB8 ADD X31, X31, 0x40
	0x03553ABC RET
	0x03553AC0 BL 0x1C16F28
	0x03553AC4 BL 0x1C16F44
	0x03553AC8 MOV X1, X31
	0x03553ACC BL 0x1C16DEC
	0x03553AD0 ADRP X0, 0xBC9000
	0x03553AD4 LDR X0, [X0 + 0x4B8]
	0x03553AD8 BL 0x1C16D08
	0x03553ADC BL 0x1C16F10

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xE8D000
	009 Move W8, [X23+3425]
	010 Move X19, X3
	011 Move W22, W2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0xBA1000
	019 Move X0, [X0+1880]
	020 Call 0x1C17CF4
	021 Move X0, 0xBA1000
	022 Move X0, [X0+2512]
	023 Call 0x1C17CF4
	024 Move X0, 0xBE3000
	025 Move X0, [X0+696]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X23+3425], W8
	029 Move X0, X21
	030 Move X1, X31
	031 Move X2, X31
	032 Call IntPtr.op_Equality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {122}
	037 Compare X19, 0
	038 JumpIfEqual {120}
	039 Move W4, [X19+24]
	040 Move X0, X21
	041 Move X1, X20
	042 Move W2, W22
	043 Move X3, X19
	044 Call Wrapper.opus_encode, X0, X1, X2, X3, X4
	045 Move W20, W0
	046 Move TEMP, X0
	047 And TEMP, TEMP, -2147483648
	048 Compare TEMP, -2147483648
	049 JumpIfNotEqual {111}
	050 Move X8, 0xBA1000
	051 Move X8, [X8+2512]
	052 Move W1, 3
	053 Move X0, [X8]
	054 Call 0x1C17D6C
	055 Compare X0, 0
	056 JumpIfEqual {120}
	057 Move X23, 0xBE3000
	058 Move X23, [X23+696]
	059 Move X21, X0
	060 Move X0, [X23]
	061 Compare X0, 0
	062 JumpIfEqual {68}
	063 Move X8, [X21]
	064 Move X1, [X8+64]
	065 Call 0x1C17E00
	066 Compare X0, 0
	067 JumpIfEqual {140}
	068 Move W8, [X21+24]
	069 Compare W8, 0
	070 JumpIfEqual {121}
	071 Move X8, [X23]
	072 Move X23, 0xBA1000
	073 Add X1, X31, 12
	074 Move [X21+32], X8
	075 Move X23, [X23+1880]
	076 Move [X31+12], W22
	077 Move X0, [X23]
	078 Call 0x1C17E04
	079 Move X22, X0
	080 Compare X0, 0
	081 JumpIfEqual {88}
	082 Move X8, [X21]
	083 Move X0, X22
	084 Move X1, [X8+64]
	085 Call 0x1C17E00
	086 Compare X0, 0
	087 JumpIfEqual {140}
	088 Move W8, [X21+24]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move [X21+40], X22
	091 Move X8, [X19+24]
	092 Move X0, [X23]
	093 Add X1, X31, 8
	094 Move [X31+8], W8
	095 Call 0x1C17E04
	096 Move X19, X0
	097 Compare X0, 0
	098 JumpIfEqual {105}
	099 Move X8, [X21]
	100 Move X0, X19
	101 Move X1, [X8+64]
	102 Call 0x1C17E00
	103 Compare X0, 0
	104 JumpIfEqual {140}
	105 Move W8, [X21+24]
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Move W0, W20
	108 Move X1, X21
	109 Move [X21+48], X19
	110 Call Wrapper.HandleStatusCode, X0, X1
	111 Move W0, W20
	112 Move X20, [X31+48]
	113 Move X19, [X31+56]
	114 Move X22, [X31+32]
	115 Move X21, [X31+40]
	116 Move X30, [X31+16]
	117 Move X23, [X31+24]
	118 Add X31, X31, 64
	119 Return X0
	120 Call 0x1C17F20
	121 Call 0x1C17F28
	122 Move X0, 0xBCA000
	123 Move X0, [X0+1208]
	124 Call 0x1C17D08
	125 Call 0x1C17F10
	126 Move X19, X0
	127 Move X0, 0xBE3000
	128 Move X0, [X0+528]
	129 Call 0x1C17D08
	130 Move X1, X0
	131 Move X0, X19
	132 Move X2, X31
	133 Call ObjectDisposedException..ctor, X0, X1
	134 Move X0, 0xBE3000
	135 Move X0, [X0+704]
	136 Call 0x1C17D08
	137 Move X1, X0
	138 Move X0, X19
	139 Call 0x1C17DEC
	140 Call 0x1C17F44
	141 Move X1, X31
	142 Call 0x1C17DEC

Method: System.Int32 opus_encode(System.IntPtr st, System.Single[] pcm, System.Int32 frame_size, System.Byte[] data)

Disassembly:
	0x03553678 ADRP X9, 0xBA0000
	0x0355367C LDR W8, [X20 + 0x18]
	0x03553680 LDR X9, [X9 + 0x988]
	0x03553684 CMP W8, 0x1
	0x03553688 LDR X21, [X9]
	0x0355368C B.LT 0x35536E4
	0x03553690 ADRP X23, 0xBA9000
	0x03553694 LDR X23, [X23 + 0x988]
	0x03553698 MOV W22, W31
	0x0355369C CMP W22, W8
	0x035536A0 B.CS 0x3553758
	0x035536A4 ADD X8, X20, W22, 0x3, SXTW
	0x035536A8 LDR X0, [X8 + 0x20]
	0x035536AC CBZ X0, 0x3553674
	0x035536B0 LDR X8, [X0]
	0x035536B4 LDP X9, X1, [X8 + 0x168]
	0x035536B8 BLR X9
	0x035536BC LDR X2, [X23]
	0x035536C0 MOV X1, X0
	0x035536C4 MOV X0, X21
	0x035536C8 MOV X3, X31
	0x035536CC BL 0x32274B8
	0x035536D0 LDR W8, [X20 + 0x18]
	0x035536D4 ADD W22, W22, 0x1
	0x035536D8 MOV X21, X0
	0x035536DC CMP W22, W8
	0x035536E0 B.LT 0x355369C
	0x035536E4 MOV W0, W19
	0x035536E8 BL 0x35535A0
	0x035536EC MOV X20, X0
	0x035536F0 ADRP X0, 0xBC8000
	0x035536F4 LDR X0, [X0 + 0x850]
	0x035536F8 BL 0x1C16D08
	0x035536FC BL 0x19903D0
	0x03553700 MOV X0, X20
	0x03553704 MOV X1, X31
	0x03553708 BL 0x32C132C
	0x0355370C MOV X1, X0
	0x03553710 MOV X0, X21
	0x03553714 MOV X2, X31
	0x03553718 BL 0x321B938
	0x0355371C MOV X20, X0
	0x03553720 ADRP X0, 0xBC9000
	0x03553724 LDR X0, [X0 + 0xDF0]
	0x03553728 BL 0x1C16D08
	0x0355372C BL 0x1C16F10
	0x03553730 MOV W1, W19
	0x03553734 MOV X2, X20
	0x03553738 MOV X21, X0
	0x0355373C BL 0x35523B8
	0x03553740 ADRP X0, 0xBE2000
	0x03553744 LDR X0, [X0 + 0x2E0]
	0x03553748 BL 0x1C16D08
	0x0355374C MOV X1, X0
	0x03553750 MOV X0, X21
	0x03553754 BL 0x1C16DEC
	0x03553758 BL 0x1C16F28
	0x0355375C SUB X31, X31, 0x40
	0x03553760 STR X30, [X31 + 0x10]
	0x03553764 STP X22, X21, [X31 + 0x20]
	0x03553768 STP X20, X19, [X31 + 0x30]
	0x0355376C ADRP X20, 0xE8C000
	0x03553770 LDRB W8, [X20 + 0xD65]
	0x03553774 MOV W21, W1
	0x03553778 MOV X19, X0
	0x0355377C TBNZ X8, 0x0, 0x35537B8
	0x03553780 ADRP X0, 0xBA0000
	0x03553784 LDR X0, [X0 + 0x758]
	0x03553788 BL 0x1C16CF4
	0x0355378C ADRP X0, 0xBA0000
	0x03553790 LDR X0, [X0 + 0x9D0]
	0x03553794 BL 0x1C16CF4
	0x03553798 ADRP X0, 0xBE2000
	0x0355379C LDR X0, [X0 + 0x200]
	0x035537A0 BL 0x1C16CF4
	0x035537A4 ADRP X0, 0xBE2000
	0x035537A8 LDR X0, [X0 + 0x2E8]
	0x035537AC BL 0x1C16CF4
	0x035537B0 MOVZ W8, 0x1
	0x035537B4 STRB W8, [X20 + 0xD65]
	0x035537B8 MOV X0, X19
	0x035537BC MOV X1, X31
	0x035537C0 MOV X2, X31
	0x035537C4 BL 0x33BE5B0
	0x035537C8 TBNZ X0, 0x0, 0x35538F4
	0x035537CC ADRP X20, 0xBA0000
	0x035537D0 LDR X20, [X20 + 0x9D0]
	0x035537D4 ADD X2, X31, 0x1C
	0x035537D8 MOV X0, X19
	0x035537DC MOV W1, W21
	0x035537E0 STR W31, [X31 + 0x1C]
	0x035537E4 BL 0x35532FC
	0x035537E8 LDR X8, [X20]
	0x035537EC MOV W19, W0
	0x035537F0 MOVZ W1, 0x3
	0x035537F4 MOV X0, X8
	0x035537F8 BL 0x1C16D6C
	0x035537FC CBZ X0, 0x355393C
	0x03553800 ADRP X22, 0xBE2000
	0x03553804 LDR X22, [X22 + 0x2E8]
	0x03553808 MOV X20, X0
	0x0355380C LDR X0, [X22]
	0x03553810 CBZ X0, 0x3553824
	0x03553814 LDR X8, [X20]
	0x03553818 LDR X1, [X8 + 0x40]
	0x0355381C BL 0x1C16E00
	0x03553820 CBZ X0, 0x35538E8
	0x03553824 LDR W8, [X20 + 0x18]
	0x03553828 CBZ W8, 0x35538E4
	0x0355382C LDR X8, [X22]
	0x03553830 ADRP X9, 0xBE2000
	0x03553834 LDR X9, [X9 + 0x200]
	0x03553838 ADD X1, X31, 0x18
	0x0355383C STR X8, [X20 + 0x20]
	0x03553840 STR W21, [X31 + 0x18]
	0x03553844 LDR X0, [X9]
	0x03553848 BL 0x1C16E04
	0x0355384C MOV X21, X0
	0x03553850 CBZ X0, 0x3553868
	0x03553854 LDR X8, [X20]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xE8D000
	009 Move W8, [X23+3426]
	010 Move X19, X3
	011 Move W22, W2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0xBA1000
	019 Move X0, [X0+1880]
	020 Call 0x1C17CF4
	021 Move X0, 0xBA1000
	022 Move X0, [X0+2512]
	023 Call 0x1C17CF4
	024 Move X0, 0xBE3000
	025 Move X0, [X0+680]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X23+3426], W8
	029 Move X0, X21
	030 Move X1, X31
	031 Move X2, X31
	032 Call IntPtr.op_Equality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {122}
	037 Compare X19, 0
	038 JumpIfEqual {120}
	039 Move W4, [X19+24]
	040 Move X0, X21
	041 Move X1, X20
	042 Move W2, W22
	043 Move X3, X19
	044 Call Wrapper.opus_encode_float, X0, X1, X2, X3, X4
	045 Move W20, W0
	046 Move TEMP, X0
	047 And TEMP, TEMP, -2147483648
	048 Compare TEMP, -2147483648
	049 JumpIfNotEqual {111}
	050 Move X8, 0xBA1000
	051 Move X8, [X8+2512]
	052 Move W1, 3
	053 Move X0, [X8]
	054 Call 0x1C17D6C
	055 Compare X0, 0
	056 JumpIfEqual {120}
	057 Move X23, 0xBE3000
	058 Move X23, [X23+680]
	059 Move X21, X0
	060 Move X0, [X23]
	061 Compare X0, 0
	062 JumpIfEqual {68}
	063 Move X8, [X21]
	064 Move X1, [X8+64]
	065 Call 0x1C17E00
	066 Compare X0, 0
	067 JumpIfEqual {140}
	068 Move W8, [X21+24]
	069 Compare W8, 0
	070 JumpIfEqual {121}
	071 Move X8, [X23]
	072 Move X23, 0xBA1000
	073 Add X1, X31, 12
	074 Move [X21+32], X8
	075 Move X23, [X23+1880]
	076 Move [X31+12], W22
	077 Move X0, [X23]
	078 Call 0x1C17E04
	079 Move X22, X0
	080 Compare X0, 0
	081 JumpIfEqual {88}
	082 Move X8, [X21]
	083 Move X0, X22
	084 Move X1, [X8+64]
	085 Call 0x1C17E00
	086 Compare X0, 0
	087 JumpIfEqual {140}
	088 Move W8, [X21+24]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move [X21+40], X22
	091 Move X8, [X19+24]
	092 Move X0, [X23]
	093 Add X1, X31, 8
	094 Move [X31+8], W8
	095 Call 0x1C17E04
	096 Move X19, X0
	097 Compare X0, 0
	098 JumpIfEqual {105}
	099 Move X8, [X21]
	100 Move X0, X19
	101 Move X1, [X8+64]
	102 Call 0x1C17E00
	103 Compare X0, 0
	104 JumpIfEqual {140}
	105 Move W8, [X21+24]
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Move W0, W20
	108 Move X1, X21
	109 Move [X21+48], X19
	110 Call Wrapper.HandleStatusCode, X0, X1
	111 Move W0, W20
	112 Move X20, [X31+48]
	113 Move X19, [X31+56]
	114 Move X22, [X31+32]
	115 Move X21, [X31+40]
	116 Move X30, [X31+16]
	117 Move X23, [X31+24]
	118 Add X31, X31, 64
	119 Return X0
	120 Call 0x1C17F20
	121 Call 0x1C17F28
	122 Move X0, 0xBCA000
	123 Move X0, [X0+1208]
	124 Call 0x1C17D08
	125 Call 0x1C17F10
	126 Move X19, X0
	127 Move X0, 0xBE3000
	128 Move X0, [X0+528]
	129 Call 0x1C17D08
	130 Move X1, X0
	131 Move X0, X19
	132 Move X2, X31
	133 Call ObjectDisposedException..ctor, X0, X1
	134 Move X0, 0xBE3000
	135 Move X0, [X0+688]
	136 Call 0x1C17D08
	137 Move X1, X0
	138 Move X0, X19
	139 Call 0x1C17DEC
	140 Call 0x1C17F44
	141 Move X1, X31
	142 Call 0x1C17DEC

Method: System.Int32 get_opus_encoder_ctl(System.IntPtr st, POpusCodec.Enums.OpusCtlGetRequest request)

Disassembly:
	0x035527C8 LDR W8, [X21 + 0x18]
	0x035527CC CMP W8, 0x2
	0x035527D0 B.LS 0x3552800
	0x035527D4 MOV W0, W20
	0x035527D8 MOV X1, X21
	0x035527DC STR X19, [X21 + 0x30]
	0x035527E0 BL 0x355361C
	0x035527E4 MOV W0, W20
	0x035527E8 LDP X20, X19, [X31 + 0x30]
	0x035527EC LDP X22, X21, [X31 + 0x20]
	0x035527F0 LDP X30, X23, [X31 + 0x10]
	0x035527F4 ADD X31, X31, 0x40
	0x035527F8 RET
	0x035527FC BL 0x1C16F20
	0x03552800 BL 0x1C16F28
	0x03552804 ADRP X0, 0xBCA000
	0x03552808 LDR X0, [X0 + 0x4B8]
	0x0355280C BL 0x1C16D08
	0x03552810 BL 0x1C16F10
	0x03552814 MOV X19, X0
	0x03552818 ADRP X0, 0xBE3000
	0x0355281C LDR X0, [X0 + 0x210]
	0x03552820 BL 0x1C16D08
	0x03552824 MOV X1, X0
	0x03552828 MOV X0, X19
	0x0355282C MOV X2, X31
	0x03552830 BL 0x338C448
	0x03552834 ADRP X0, 0xBE3000
	0x03552838 LDR X0, [X0 + 0x2B0]
	0x0355283C BL 0x1C16D08
	0x03552840 MOV X1, X0
	0x03552844 MOV X0, X19
	0x03552848 BL 0x1C16DEC
	0x0355284C BL 0x1C16F44
	0x03552850 MOV X1, X31
	0x03552854 BL 0x1C16DEC
	0x03552858 SUB X31, X31, 0x30
	0x0355285C STP X30, X21, [X31 + 0x10]
	0x03552860 STP X20, X19, [X31 + 0x20]
	0x03552864 ADRP X21, 0xE8D000
	0x03552868 LDRB W8, [X21 + 0xCD3]
	0x0355286C MOV X20, X1
	0x03552870 MOV X19, X0
	0x03552874 TBNZ X8, 0x0, 0x355288C
	0x03552878 ADRP X0, 0xBCC000
	0x0355287C LDR X0, [X0 + 0xB88]
	0x03552880 BL 0x1C16CF4
	0x03552884 MOVZ W8, 0x1
	0x03552888 STRB W8, [X21 + 0xCD3]
	0x0355288C LDR X0, [X19 + 0x10]
	0x03552890 LDR W2, [X19 + 0x18]
	0x03552894 LDR X3, [X19 + 0x28]
	0x03552898 MOV X1, X20
	0x0355289C BL 0x3552900
	0x035528A0 CMP W0, 0x2
	0x035528A4 B.LT 0x35528EC
	0x035528A8 ADRP X8, 0xBCC000
	0x035528AC LDR X20, [X19 + 0x40]
	0x035528B0 LDR X1, [X19 + 0x28]
	0x035528B4 LDR X8, [X8 + 0xB88]
	0x035528B8 MOV W3, W0
	0x035528BC ADD X0, X31, 0x0
	0x035528C0 MOV W2, W31
	0x035528C4 LDR X4, [X8]
	0x035528C8 STP X31, X31, [X31]
	0x035528CC BL 0x2B87BB0
	0x035528D0 CBZ X20, 0x35528FC
	0x035528D4 LDP X1, X2, [X31]
	0x035528D8 LDR X8, [X20 + 0x18]
	0x035528DC LDR X0, [X20 + 0x40]
	0x035528E0 LDR X4, [X20 + 0x28]
	0x035528E4 MOV W3, W31
	0x035528E8 BLR X8
	0x035528EC LDP X20, X19, [X31 + 0x20]
	0x035528F0 LDP X30, X21, [X31 + 0x10]
	0x035528F4 ADD X31, X31, 0x30
	0x035528F8 RET
	0x035528FC BL 0x1C16F20
	0x03552900 SUB X31, X31, 0x40
	0x03552904 STP X30, X23, [X31 + 0x10]
	0x03552908 STP X22, X21, [X31 + 0x20]
	0x0355290C STP X20, X19, [X31 + 0x30]
	0x03552910 ADRP X23, 0xE8D000
	0x03552914 LDRB W8, [X23 + 0xD61]
	0x03552918 MOV X19, X3
	0x0355291C MOV W22, W2
	0x03552920 MOV X20, X1
	0x03552924 MOV X21, X0
	0x03552928 TBNZ X8, 0x0, 0x3552958
	0x0355292C ADRP X0, 0xBA1000
	0x03552930 LDR X0, [X0 + 0x758]
	0x03552934 BL 0x1C16CF4
	0x03552938 ADRP X0, 0xBA1000
	0x0355293C LDR X0, [X0 + 0x9D0]
	0x03552940 BL 0x1C16CF4
	0x03552944 ADRP X0, 0xBE3000
	0x03552948 LDR X0, [X0 + 0x2B8]
	0x0355294C BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xE8E000
	007 Move W8, [X21+3427]
	008 Move W19, W1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0xBA2000
	015 Move X0, [X0+2512]
	016 Call 0x1C17CF4
	017 Move X0, 0xBE4000
	018 Move X0, [X0+512]
	019 Call 0x1C17CF4
	020 Move X0, 0xBE4000
	021 Move X0, [X0+520]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3427], W8
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call IntPtr.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {95}
	033 Move X21, 0xBA2000
	034 Move X21, [X21+2512]
	035 Add X2, X31, 12
	036 Move X0, X20
	037 Move W1, W19
	038 Move [X31+12], W31
	039 Call Wrapper.opus_encoder_ctl_get, X0, X1, X2
	040 Move X8, [X21]
	041 Move W20, W0
	042 Move W1, 2
	043 Move X0, X8
	044 Call 0x1C17D6C
	045 Compare X0, 0
	046 JumpIfEqual {113}
	047 Move X22, 0xBE4000
	048 Move X22, [X22+520]
	049 Move X21, X0
	050 Move X0, [X22]
	051 Compare X0, 0
	052 JumpIfEqual {58}
	053 Move X8, [X21]
	054 Move X1, [X8+64]
	055 Call 0x1C17E00
	056 Compare X0, 0
	057 JumpIfEqual {92}
	058 Move W8, [X21+24]
	059 Compare W8, 0
	060 JumpIfEqual {91}
	061 Move X8, [X22]
	062 Move X9, 0xBE4000
	063 Move X9, [X9+512]
	064 Add X1, X31, 8
	065 Move [X21+32], X8
	066 Move [X31+8], W19
	067 Move X0, [X9]
	068 Call 0x1C17E04
	069 Move X19, X0
	070 Compare X0, 0
	071 JumpIfEqual {78}
	072 Move X8, [X21]
	073 Move X0, X19
	074 Move X1, [X8+64]
	075 Call 0x1C17E00
	076 Compare X0, 0
	077 JumpIfEqual {92}
	078 Move W8, [X21+24]
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move W0, W20
	081 Move X1, X21
	082 Move [X21+40], X19
	083 Call Wrapper.HandleStatusCode, X0, X1
	084 Move W0, [X31+12]
	085 Move X20, [X31+32]
	086 Move X19, [X31+40]
	087 Move X22, [X31+16]
	088 Move X21, [X31+24]
	089 Move X30, [X31+48]
	090 Return X0
	091 Call 0x1C17F28
	092 Call 0x1C17F44
	093 Move X1, X31
	094 Call 0x1C17DEC
	095 Move X0, 0xBCB000
	096 Move X0, [X0+1208]
	097 Call 0x1C17D08
	098 Call 0x1C17F10
	099 Move X19, X0
	100 Move X0, 0xBE4000
	101 Move X0, [X0+528]
	102 Call 0x1C17D08
	103 Move X1, X0
	104 Move X0, X19
	105 Move X2, X31
	106 Call ObjectDisposedException..ctor, X0, X1
	107 Move X0, 0xBE4000
	108 Move X0, [X0+536]
	109 Call 0x1C17D08
	110 Move X1, X0
	111 Move X0, X19
	112 Call 0x1C17DEC
	113 Call 0x1C17F20

Method: System.Void set_opus_encoder_ctl(System.IntPtr st, POpusCodec.Enums.OpusCtlSetRequest request, System.Int32 value)

Disassembly:
	0x03552960 MOV X2, X31
	0x03552964 BL 0x33BE5B0
	0x03552968 TBNZ X0, 0x0, 0x3552A8C
	0x0355296C CBZ X19, 0x3552A84
	0x03552970 LDR W4, [X19 + 0x18]
	0x03552974 MOV X0, X21
	0x03552978 MOV X1, X20
	0x0355297C MOV W2, W22
	0x03552980 MOV X3, X19
	0x03552984 BL 0x3552FD0
	0x03552988 MOV W20, W0
	0x0355298C TBZ X0, 0x1F, 0x3552A6C
	0x03552990 ADRP X8, 0xBA1000
	0x03552994 LDR X8, [X8 + 0x9D0]
	0x03552998 MOVZ W1, 0x3
	0x0355299C LDR X0, [X8]
	0x035529A0 BL 0x1C16D6C
	0x035529A4 CBZ X0, 0x3552A84
	0x035529A8 ADRP X23, 0xBE3000
	0x035529AC LDR X23, [X23 + 0x2B8]
	0x035529B0 MOV X21, X0
	0x035529B4 LDR X0, [X23]
	0x035529B8 CBZ X0, 0x35529CC
	0x035529BC LDR X8, [X21]
	0x035529C0 LDR X1, [X8 + 0x40]
	0x035529C4 BL 0x1C16E00
	0x035529C8 CBZ X0, 0x3552AD4
	0x035529CC LDR W8, [X21 + 0x18]
	0x035529D0 CBZ W8, 0x3552A88
	0x035529D4 LDR X8, [X23]
	0x035529D8 ADRP X23, 0xBA1000
	0x035529DC ADD X1, X31, 0xC
	0x035529E0 STR X8, [X21 + 0x20]
	0x035529E4 LDR X23, [X23 + 0x758]
	0x035529E8 STR W22, [X31 + 0xC]
	0x035529EC LDR X0, [X23]
	0x035529F0 BL 0x1C16E04
	0x035529F4 MOV X22, X0
	0x035529F8 CBZ X0, 0x3552A10
	0x035529FC LDR X8, [X21]
	0x03552A00 MOV X0, X22
	0x03552A04 LDR X1, [X8 + 0x40]
	0x03552A08 BL 0x1C16E00
	0x03552A0C CBZ X0, 0x3552AD4
	0x03552A10 LDR W8, [X21 + 0x18]
	0x03552A14 CMP W8, 0x1
	0x03552A18 B.LS 0x3552A88
	0x03552A1C STR X22, [X21 + 0x28]
	0x03552A20 LDR X8, [X19 + 0x18]
	0x03552A24 LDR X0, [X23]
	0x03552A28 ADD X1, X31, 0x8
	0x03552A2C STR W8, [X31 + 0x8]
	0x03552A30 BL 0x1C16E04
	0x03552A34 MOV X19, X0
	0x03552A38 CBZ X0, 0x3552A50
	0x03552A3C LDR X8, [X21]
	0x03552A40 MOV X0, X19
	0x03552A44 LDR X1, [X8 + 0x40]
	0x03552A48 BL 0x1C16E00
	0x03552A4C CBZ X0, 0x3552AD4
	0x03552A50 LDR W8, [X21 + 0x18]
	0x03552A54 CMP W8, 0x2
	0x03552A58 B.LS 0x3552A88
	0x03552A5C MOV W0, W20
	0x03552A60 MOV X1, X21
	0x03552A64 STR X19, [X21 + 0x30]
	0x03552A68 BL 0x355361C
	0x03552A6C MOV W0, W20
	0x03552A70 LDP X20, X19, [X31 + 0x30]
	0x03552A74 LDP X22, X21, [X31 + 0x20]
	0x03552A78 LDP X30, X23, [X31 + 0x10]
	0x03552A7C ADD X31, X31, 0x40
	0x03552A80 RET
	0x03552A84 BL 0x1C16F20
	0x03552A88 BL 0x1C16F28
	0x03552A8C ADRP X0, 0xBCA000
	0x03552A90 LDR X0, [X0 + 0x4B8]
	0x03552A94 BL 0x1C16D08
	0x03552A98 BL 0x1C16F10
	0x03552A9C MOV X19, X0
	0x03552AA0 ADRP X0, 0xBE3000
	0x03552AA4 LDR X0, [X0 + 0x210]
	0x03552AA8 BL 0x1C16D08
	0x03552AAC MOV X1, X0
	0x03552AB0 MOV X0, X19
	0x03552AB4 MOV X2, X31
	0x03552AB8 BL 0x338C448
	0x03552ABC ADRP X0, 0xBE3000
	0x03552AC0 LDR X0, [X0 + 0x2C0]
	0x03552AC4 BL 0x1C16D08
	0x03552AC8 MOV X1, X0
	0x03552ACC MOV X0, X19
	0x03552AD0 BL 0x1C16DEC
	0x03552AD4 BL 0x1C16F44
	0x03552AD8 MOV X1, X31
	0x03552ADC BL 0x1C16DEC
	0x03552AE0 STR X30, [X31 - 0x20]!
	0x03552AE4 STP X20, X19, [X31 + 0x10]
	0x03552AE8 ADRP X20, 0xE8D000
	0x03552AEC LDRB W8, [X20 + 0xCD4]
	0x03552AF0 MOV X19, X0
	0x03552AF4 TBNZ X8, 0x0, 0x3552B18
	0x03552AF8 ADRP X0, 0xBE3000
	0x03552AFC LDR X0, [X0 + 0x2C8]
	0x03552B00 BL 0x1C16CF4
	0x03552B04 ADRP X0, 0xBCC000
	0x03552B08 LDR X0, [X0 + 0xB60]
	0x03552B0C BL 0x1C16CF4
	0x03552B10 MOVZ W8, 0x1
	0x03552B14 STRB W8, [X20 + 0xCD4]
	0x03552B18 LDR X0, [X19 + 0x10]
	0x03552B1C MOV X1, X31
	0x03552B20 MOV X2, X31
	0x03552B24 BL 0x33C5D2C
	0x03552B28 TBZ X0, 0x0, 0x3552B74
	0x03552B2C ADRP X20, 0xBCC000
	0x03552B30 LDR X20, [X20 + 0xB60]
	0x03552B34 LDR X0, [X20]
	0x03552B38 LDR W8, [X0 + 0xE0]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xE8E000
	009 Move W8, [X21+3428]
	010 Move W19, W2
	011 Move W22, W1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0xBA2000
	018 Move X0, [X0+1880]
	019 Call 0x1C17CF4
	020 Move X0, 0xBA2000
	021 Move X0, [X0+2512]
	022 Call 0x1C17CF4
	023 Move X0, 0xBE4000
	024 Move X0, [X0+544]
	025 Call 0x1C17CF4
	026 Move X0, 0xBE4000
	027 Move X0, [X0+552]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X21+3428], W8
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call IntPtr.op_Equality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {119}
	039 Move X21, 0xBA2000
	040 Move X21, [X21+2512]
	041 Move X0, X20
	042 Move W1, W22
	043 Move W2, W19
	044 Call Wrapper.opus_encoder_ctl_set, X0, X1, X2
	045 Move X8, [X21]
	046 Move W20, W0
	047 Move W1, 3
	048 Move X0, X8
	049 Call 0x1C17D6C
	050 Compare X0, 0
	051 JumpIfEqual {137}
	052 Move X23, 0xBE4000
	053 Move X23, [X23+552]
	054 Move X21, X0
	055 Move X0, [X23]
	056 Compare X0, 0
	057 JumpIfEqual {63}
	058 Move X8, [X21]
	059 Move X1, [X8+64]
	060 Call 0x1C17E00
	061 Compare X0, 0
	062 JumpIfEqual {116}
	063 Move W8, [X21+24]
	064 Compare W8, 0
	065 JumpIfEqual {115}
	066 Move X8, [X23]
	067 Move X9, 0xBE4000
	068 Move X9, [X9+544]
	069 Add X1, X31, 12
	070 Move [X21+32], X8
	071 Move [X31+12], W22
	072 Move X0, [X9]
	073 Call 0x1C17E04
	074 Move X22, X0
	075 Compare X0, 0
	076 JumpIfEqual {83}
	077 Move X8, [X21]
	078 Move X0, X22
	079 Move X1, [X8+64]
	080 Call 0x1C17E00
	081 Compare X0, 0
	082 JumpIfEqual {116}
	083 Move W8, [X21+24]
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move X8, 0xBA2000
	086 Move X8, [X8+1880]
	087 Move [X21+40], X22
	088 Add X1, X31, 8
	089 Move [X31+8], W19
	090 Move X0, [X8]
	091 Call 0x1C17E04
	092 Move X19, X0
	093 Compare X0, 0
	094 JumpIfEqual {101}
	095 Move X8, [X21]
	096 Move X0, X19
	097 Move X1, [X8+64]
	098 Call 0x1C17E00
	099 Compare X0, 0
	100 JumpIfEqual {116}
	101 Move W8, [X21+24]
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move W0, W20
	104 Move X1, X21
	105 Move [X21+48], X19
	106 Call Wrapper.HandleStatusCode, X0, X1
	107 Move X20, [X31+48]
	108 Move X19, [X31+56]
	109 Move X22, [X31+32]
	110 Move X21, [X31+40]
	111 Move X30, [X31+16]
	112 Move X23, [X31+24]
	113 Add X31, X31, 64
	114 Return 
	115 Call 0x1C17F28
	116 Call 0x1C17F44
	117 Move X1, X31
	118 Call 0x1C17DEC
	119 Move X0, 0xBCB000
	120 Move X0, [X0+1208]
	121 Call 0x1C17D08
	122 Call 0x1C17F10
	123 Move X19, X0
	124 Move X0, 0xBE4000
	125 Move X0, [X0+528]
	126 Call 0x1C17D08
	127 Move X1, X0
	128 Move X0, X19
	129 Move X2, X31
	130 Call ObjectDisposedException..ctor, X0, X1
	131 Move X0, 0xBE4000
	132 Move X0, [X0+560]
	133 Call 0x1C17D08
	134 Move X1, X0
	135 Move X0, X19
	136 Call 0x1C17DEC
	137 Call 0x1C17F20

Method: System.Int32 get_opus_decoder_ctl(System.IntPtr st, POpusCodec.Enums.OpusCtlGetRequest request)

Disassembly:
	0x0355475C LDR X30, [X31], #0x10
	0x03554760 RET
	0x03554764 BL 0x1C16F28
	0x03554768 BL 0x1C16F20
	0x0355476C STR X30, [X31 - 0x10]!
	0x03554770 CMP W2, 0x1
	0x03554774 B.LT 0x35547DC
	0x03554778 CBZ X0, 0x35547E8
	0x0355477C ADRP X11, 0xFFFFFFFFFD596000
	0x03554780 LDR W10, [X0 + 0x18]
	0x03554784 LDR V0, [X11 + 0x374]
	0x03554788 MOV X8, X31
	0x0355478C MOV W9, W2
	0x03554790 ADD X11, X0, 0x20
	0x03554794 ADD X12, X1, 0x20
	0x03554798 MOVZ W13, 0x7F800000
	0x0355479C CMP X8, X10
	0x035547A0 B.CS 0x35547E4
	0x035547A4 CBZ X1, 0x35547E8
	0x035547A8 LDR W14, [X1 + 0x18]
	0x035547AC CMP X8, X14
	0x035547B0 B.CS 0x35547E4
	0x035547B4 LDR V1, [X11, X8, LSL #2]
	0x035547B8 FMOV S2, W13
	0x035547BC FMUL S1, S1, S0
	0x035547C0 FCVTZS W14, S1
	0x035547C4 FCMP S1, S2
	0x035547C8 CSEL W14, W31, W14, EQ
	0x035547CC STRH W14, [X12, X8, LSL #1]
	0x035547D0 ADD X8, X8, 0x1
	0x035547D4 CMP X9, X8
	0x035547D8 B.NE 0x355479C
	0x035547DC LDR X30, [X31], #0x10
	0x035547E0 RET
	0x035547E4 BL 0x1C16F28
	0x035547E8 BL 0x1C16F20
	0x035547EC STR X30, [X31 - 0x10]!
	0x035547F0 CMP W2, 0x1
	0x035547F4 B.LT 0x355484C
	0x035547F8 CBZ X0, 0x3554858
	0x035547FC ADRP X10, 0xFFFFFFFFFD596000
	0x03554800 LDR W9, [X0 + 0x18]
	0x03554804 LDR V0, [X10 + 0x374]
	0x03554808 MOV X8, X31
	0x0355480C MOV W10, W2
	0x03554810 ADD X11, X0, 0x20
	0x03554814 ADD X12, X1, 0x20
	0x03554818 CMP X8, X9
	0x0355481C B.CS 0x3554854
	0x03554820 CBZ X1, 0x3554858
	0x03554824 LDR W13, [X1 + 0x18]
	0x03554828 CMP X8, X13
	0x0355482C B.CS 0x3554854
	0x03554830 LDRSH W13, [X11, X8, LSL #1]
	0x03554834 SCVTF S1, W13
	0x03554838 FDIV S1, S1, S0
	0x0355483C STR S1, [X12, X8, LSL #2]
	0x03554840 ADD X8, X8, 0x1
	0x03554844 CMP X10, X8
	0x03554848 B.NE 0x3554818
	0x0355484C LDR X30, [X31], #0x10
	0x03554850 RET
	0x03554854 BL 0x1C16F28
	0x03554858 BL 0x1C16F20
	0x0355485C FMOV S0, W31
	0x03554860 RET
	0x03554864 FMOV S0, W31
	0x03554868 RET
	0x0355486C FMOV S0, W31
	0x03554870 RET
	0x03554874 RET
	0x03554878 MOV X1, X31
	0x0355487C B 0x33BDD8C
	0x03554880 STP X30, X23, [X31 - 0x30]!
	0x03554884 STP X22, X21, [X31 + 0x10]
	0x03554888 STP X20, X19, [X31 + 0x20]
	0x0355488C ADRP X22, 0xE8B000
	0x03554890 ADRP X23, 0xBE1000
	0x03554894 LDRB W8, [X22 + 0xD6B]
	0x03554898 LDR X23, [X23 + 0x348]
	0x0355489C MOV W20, W2
	0x035548A0 MOV W21, W1
	0x035548A4 MOV X19, X0
	0x035548A8 TBNZ X8, 0x0, 0x35548C0
	0x035548AC ADRP X0, 0xBE1000
	0x035548B0 LDR X0, [X0 + 0x348]
	0x035548B4 BL 0x1C16CF4
	0x035548B8 MOVZ W8, 0x1
	0x035548BC STRB W8, [X22 + 0xD6B]
	0x035548C0 LDR X3, [X23]
	0x035548C4 MOV X0, X19
	0x035548C8 MOV W1, W21
	0x035548CC MOV W2, W20
	0x035548D0 BL 0x2EEA318
	0x035548D4 MOVZ W8, 0x3F800000
	0x035548D8 STR W8, [X19 + 0x38]
	0x035548DC LDP X20, X19, [X31 + 0x20]
	0x035548E0 LDP X22, X21, [X31 + 0x10]
	0x035548E4 LDP X30, X23, [X31], #0x30
	0x035548E8 RET
	0x035548EC STR X30, [X31 - 0x10]!
	0x035548F0 CBZ X1, 0x35549BC
	0x035548F4 LDR X8, [X1 + 0x18]
	0x035548F8 CMP W8, 0x1
	0x035548FC B.LT 0x35549AC
	0x03554900 AND X8, X8, 0x0
	0x03554904 CBZ X8, 0x35549AC
	0x03554908 ADD X9, X1, 0x20
	0x0355490C CBZ X8, 0x35549B8
	0x03554910 LDR V0, [X9]
	0x03554914 LDR X11, [X0 + 0x20]
	0x03554918 FNEG S1, S0
	0x0355491C FCMP S0, 0x0
	0x03554920 FCSEL S0, S1, S0, MI
	0x03554924 CBZ X11, 0x35549BC
	0x03554928 LDRSW X10, [X0 + 0x28]
	0x0355492C LDR W12, [X11 + 0x18]
	0x03554930 CMP W10, W12
	0x03554934 B.CS 0x35549B8
	0x03554938 LDR V1, [X0 + 0x10]
	0x0355493C ADD X11, X11, X10, 0x2, LSL

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X20, 0xE8C000
	008 Move W8, [X20+3429]
	009 Move W21, W1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0xBA0000
	016 Move X0, [X0+1880]
	017 Call 0x1C17CF4
	018 Move X0, 0xBA0000
	019 Move X0, [X0+2512]
	020 Call 0x1C17CF4
	021 Move X0, 0xBE2000
	022 Move X0, [X0+512]
	023 Call 0x1C17CF4
	024 Move X0, 0xBE2000
	025 Move X0, [X0+744]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+3429], W8
	029 Move X0, X19
	030 Move X1, X31
	031 Move X2, X31
	032 Call IntPtr.op_Equality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {119}
	037 Move X20, 0xBA0000
	038 Move X20, [X20+2512]
	039 Add X2, X31, 28
	040 Move X0, X19
	041 Move W1, W21
	042 Move [X31+28], W31
	043 Call Wrapper.opus_decoder_ctl_get, X0, X1, X2
	044 Move X8, [X20]
	045 Move W19, W0
	046 Move W1, 3
	047 Move X0, X8
	048 Call 0x1C17D6C
	049 Compare X0, 0
	050 JumpIfEqual {137}
	051 Move X22, 0xBE2000
	052 Move X22, [X22+744]
	053 Move X20, X0
	054 Move X0, [X22]
	055 Compare X0, 0
	056 JumpIfEqual {62}
	057 Move X8, [X20]
	058 Move X1, [X8+64]
	059 Call 0x1C17E00
	060 Compare X0, 0
	061 JumpIfEqual {116}
	062 Move W8, [X20+24]
	063 Compare W8, 0
	064 JumpIfEqual {115}
	065 Move X8, [X22]
	066 Move X9, 0xBE2000
	067 Move X9, [X9+512]
	068 Add X1, X31, 24
	069 Move [X20+32], X8
	070 Move [X31+24], W21
	071 Move X0, [X9]
	072 Call 0x1C17E04
	073 Move X21, X0
	074 Compare X0, 0
	075 JumpIfEqual {82}
	076 Move X8, [X20]
	077 Move X0, X21
	078 Move X1, [X8+64]
	079 Call 0x1C17E00
	080 Compare X0, 0
	081 JumpIfEqual {116}
	082 Move W8, [X20+24]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move X8, 0xBA0000
	085 Move X8, [X8+1880]
	086 Move [X20+40], X21
	087 Move W9, [X31+28]
	088 Add X1, X31, 12
	089 Move X0, [X8]
	090 Move [X31+12], W9
	091 Call 0x1C17E04
	092 Move X21, X0
	093 Compare X0, 0
	094 JumpIfEqual {101}
	095 Move X8, [X20]
	096 Move X0, X21
	097 Move X1, [X8+64]
	098 Call 0x1C17E00
	099 Compare X0, 0
	100 JumpIfEqual {116}
	101 Move W8, [X20+24]
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move W0, W19
	104 Move X1, X20
	105 Move [X20+48], X21
	106 Call Wrapper.HandleStatusCode, X0, X1
	107 Move W0, [X31+28]
	108 Move X20, [X31+48]
	109 Move X19, [X31+56]
	110 Move X22, [X31+32]
	111 Move X21, [X31+40]
	112 Move X30, [X31+16]
	113 Add X31, X31, 64
	114 Return X0
	115 Call 0x1C17F28
	116 Call 0x1C17F44
	117 Move X1, X31
	118 Call 0x1C17DEC
	119 Move X0, 0xBC9000
	120 Move X0, [X0+1208]
	121 Call 0x1C17D08
	122 Call 0x1C17F10
	123 Move X19, X0
	124 Move X0, 0xBE2000
	125 Move X0, [X0+752]
	126 Call 0x1C17D08
	127 Move X1, X0
	128 Move X0, X19
	129 Move X2, X31
	130 Call ObjectDisposedException..ctor, X0, X1
	131 Move X0, 0xBE2000
	132 Move X0, [X0+760]
	133 Call 0x1C17D08
	134 Move X1, X0
	135 Move X0, X19
	136 Call 0x1C17DEC
	137 Call 0x1C17F20

Method: System.Void set_opus_decoder_ctl(System.IntPtr st, POpusCodec.Enums.OpusCtlSetRequest request, System.Int32 value)

Disassembly:
	0x03554940 LDR V2, [X11 + 0x20]
	0x03554944 FADD S1, S1, S0
	0x03554948 FSUB S1, S1, S2
	0x0355494C STR S1, [X0 + 0x10]
	0x03554950 STR S0, [X11 + 0x20]
	0x03554954 LDR V1, [X0 + 0x14]
	0x03554958 FCMP S1, S0
	0x0355495C B.PL 0x3554968
	0x03554960 MOV V1.16B, V0.16B
	0x03554964 STR S0, [X0 + 0x14]
	0x03554968 CBNZ W10, 0x355498C
	0x0355496C LDR V0, [X0 + 0x2C]
	0x03554970 LDR W11, [X0 + 0x30]
	0x03554974 STR S1, [X0 + 0x34]
	0x03554978 STR W31, [X0 + 0x14]
	0x0355497C FADD S0, S1, S0
	0x03554980 ADD W11, W11, 0x1
	0x03554984 STR S0, [X0 + 0x2C]
	0x03554988 STR W11, [X0 + 0x30]
	0x0355498C LDR W11, [X0 + 0x18]
	0x03554990 ADD W10, W10, 0x1
	0x03554994 SUBS X8, X8, 0x1
	0x03554998 ADD X9, X9, 0x4
	0x0355499C SDIV W12, W10, W11
	0x035549A0 MSUB W10, W12, W11, W10
	0x035549A4 STR W10, [X0 + 0x28]
	0x035549A8 B.NE 0x355490C
	0x035549AC MOV X0, X1
	0x035549B0 LDR X30, [X31], #0x10
	0x035549B4 RET
	0x035549B8 BL 0x1C16F28
	0x035549BC BL 0x1C16F20
	0x035549C0 STP X30, X23, [X31 - 0x30]!
	0x035549C4 STP X22, X21, [X31 + 0x10]
	0x035549C8 STP X20, X19, [X31 + 0x20]
	0x035549CC ADRP X22, 0xE8B000
	0x035549D0 ADRP X23, 0xBE1000
	0x035549D4 LDRB W8, [X22 + 0xD6C]
	0x035549D8 LDR X23, [X23 + 0x350]
	0x035549DC MOV W20, W2
	0x035549E0 MOV W21, W1
	0x035549E4 MOV X19, X0
	0x035549E8 TBNZ X8, 0x0, 0x3554A00
	0x035549EC ADRP X0, 0xBE1000
	0x035549F0 LDR X0, [X0 + 0x350]
	0x035549F4 BL 0x1C16CF4
	0x035549F8 MOVZ W8, 0x1
	0x035549FC STRB W8, [X22 + 0xD6C]
	0x03554A00 LDR X3, [X23]
	0x03554A04 MOV X0, X19
	0x03554A08 MOV W1, W21
	0x03554A0C MOV W2, W20
	0x03554A10 BL 0x2EEA22C
	0x03554A14 MOVZ W8, 0x100
	0x03554A18 MOVK W8, 0x38000000
	0x03554A1C STR W8, [X19 + 0x38]
	0x03554A20 LDP X20, X19, [X31 + 0x20]
	0x03554A24 LDP X22, X21, [X31 + 0x10]
	0x03554A28 LDP X30, X23, [X31], #0x30
	0x03554A2C RET
	0x03554A30 STR X30, [X31 - 0x10]!
	0x03554A34 CBZ X1, 0x3554B04
	0x03554A38 LDR X8, [X1 + 0x18]
	0x03554A3C CMP W8, 0x1
	0x03554A40 B.LT 0x3554AF4
	0x03554A44 AND X8, X8, 0x0
	0x03554A48 CBZ X8, 0x3554AF4
	0x03554A4C ADD X9, X1, 0x20
	0x03554A50 CBZ X8, 0x3554B00
	0x03554A54 LDRSH W10, [X9]
	0x03554A58 LDR X12, [X0 + 0x20]
	0x03554A5C CMP W10, 0x0
	0x03554A60 CSNEG W11, W10, W10, PL
	0x03554A64 CBZ X12, 0x3554B04
	0x03554A68 LDRSW X10, [X0 + 0x28]
	0x03554A6C LDR W13, [X12 + 0x18]
	0x03554A70 CMP W10, W13
	0x03554A74 B.CS 0x3554B00
	0x03554A78 LDR V0, [X0 + 0x10]
	0x03554A7C ADD X12, X12, X10, 0x2, LSL
	0x03554A80 LDR V2, [X12 + 0x20]
	0x03554A84 SXTH W11, W11
	0x03554A88 SCVTF S1, W11
	0x03554A8C FADD S0, S0, S1
	0x03554A90 FSUB S0, S0, S2
	0x03554A94 STR S0, [X0 + 0x10]
	0x03554A98 STR S1, [X12 + 0x20]
	0x03554A9C LDR V0, [X0 + 0x14]
	0x03554AA0 FCMP S0, S1
	0x03554AA4 B.PL 0x3554AB0
	0x03554AA8 MOV V0.16B, V1.16B
	0x03554AAC STR S1, [X0 + 0x14]
	0x03554AB0 CBNZ W10, 0x3554AD4
	0x03554AB4 LDR V1, [X0 + 0x2C]
	0x03554AB8 LDR W11, [X0 + 0x30]
	0x03554ABC STR S0, [X0 + 0x34]
	0x03554AC0 STR W31, [X0 + 0x14]
	0x03554AC4 FADD S0, S0, S1
	0x03554AC8 ADD W11, W11, 0x1
	0x03554ACC STR S0, [X0 + 0x2C]
	0x03554AD0 STR W11, [X0 + 0x30]
	0x03554AD4 LDR W11, [X0 + 0x18]
	0x03554AD8 ADD W10, W10, 0x1
	0x03554ADC SUBS X8, X8, 0x1
	0x03554AE0 ADD X9, X9, 0x2
	0x03554AE4 SDIV W12, W10, W11
	0x03554AE8 MSUB W10, W12, W11, W10
	0x03554AEC STR W10, [X0 + 0x28]
	0x03554AF0 B.NE 0x3554A50
	0x03554AF4 MOV X0, X1
	0x03554AF8 LDR X30, [X31], #0x10
	0x03554AFC RET
	0x03554B00 BL 0x1C16F28
	0x03554B04 BL 0x1C16F20
	0x03554B08 MOV W0, W31
	0x03554B0C RET
	0x03554B10 RET
	0x03554B14 FMOV S0, W31
	0x03554B18 RET

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xE8C000
	009 Move W8, [X21+3430]
	010 Move W19, W2
	011 Move W22, W1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0xBA0000
	018 Move X0, [X0+1880]
	019 Call 0x1C17CF4
	020 Move X0, 0xBA0000
	021 Move X0, [X0+2512]
	022 Call 0x1C17CF4
	023 Move X0, 0xBE2000
	024 Move X0, [X0+544]
	025 Call 0x1C17CF4
	026 Move X0, 0xBE2000
	027 Move X0, [X0+768]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X21+3430], W8
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call IntPtr.op_Equality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {119}
	039 Move X21, 0xBA0000
	040 Move X21, [X21+2512]
	041 Move X0, X20
	042 Move W1, W22
	043 Move W2, W19
	044 Call Wrapper.opus_decoder_ctl_set, X0, X1, X2
	045 Move X8, [X21]
	046 Move W20, W0
	047 Move W1, 3
	048 Move X0, X8
	049 Call 0x1C17D6C
	050 Compare X0, 0
	051 JumpIfEqual {137}
	052 Move X23, 0xBE2000
	053 Move X23, [X23+768]
	054 Move X21, X0
	055 Move X0, [X23]
	056 Compare X0, 0
	057 JumpIfEqual {63}
	058 Move X8, [X21]
	059 Move X1, [X8+64]
	060 Call 0x1C17E00
	061 Compare X0, 0
	062 JumpIfEqual {116}
	063 Move W8, [X21+24]
	064 Compare W8, 0
	065 JumpIfEqual {115}
	066 Move X8, [X23]
	067 Move X9, 0xBE2000
	068 Move X9, [X9+544]
	069 Add X1, X31, 12
	070 Move [X21+32], X8
	071 Move [X31+12], W22
	072 Move X0, [X9]
	073 Call 0x1C17E04
	074 Move X22, X0
	075 Compare X0, 0
	076 JumpIfEqual {83}
	077 Move X8, [X21]
	078 Move X0, X22
	079 Move X1, [X8+64]
	080 Call 0x1C17E00
	081 Compare X0, 0
	082 JumpIfEqual {116}
	083 Move W8, [X21+24]
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move X8, 0xBA0000
	086 Move X8, [X8+1880]
	087 Move [X21+40], X22
	088 Add X1, X31, 8
	089 Move [X31+8], W19
	090 Move X0, [X8]
	091 Call 0x1C17E04
	092 Move X19, X0
	093 Compare X0, 0
	094 JumpIfEqual {101}
	095 Move X8, [X21]
	096 Move X0, X19
	097 Move X1, [X8+64]
	098 Call 0x1C17E00
	099 Compare X0, 0
	100 JumpIfEqual {116}
	101 Move W8, [X21+24]
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move W0, W20
	104 Move X1, X21
	105 Move [X21+48], X19
	106 Call Wrapper.HandleStatusCode, X0, X1
	107 Move X20, [X31+48]
	108 Move X19, [X31+56]
	109 Move X22, [X31+32]
	110 Move X21, [X31+40]
	111 Move X30, [X31+16]
	112 Move X23, [X31+24]
	113 Add X31, X31, 64
	114 Return 
	115 Call 0x1C17F28
	116 Call 0x1C17F44
	117 Move X1, X31
	118 Call 0x1C17DEC
	119 Move X0, 0xBC9000
	120 Move X0, [X0+1208]
	121 Call 0x1C17D08
	122 Call 0x1C17F10
	123 Move X19, X0
	124 Move X0, 0xBE2000
	125 Move X0, [X0+776]
	126 Call 0x1C17D08
	127 Move X1, X0
	128 Move X0, X19
	129 Move X2, X31
	130 Call ObjectDisposedException..ctor, X0, X1
	131 Move X0, 0xBE2000
	132 Move X0, [X0+784]
	133 Call 0x1C17D08
	134 Move X1, X0
	135 Move X0, X19
	136 Call 0x1C17DEC
	137 Call 0x1C17F20

Method: System.IntPtr opus_decoder_create(POpusCodec.Enums.SamplingRate Fs, POpusCodec.Enums.Channels channels, System.Action`2<System.IntPtr, System.Boolean> dataCallbackStatic = null)

Disassembly:
	0x03554B1C RET
	0x03554B20 MOV W0, W31
	0x03554B24 RET
	0x03554B28 MOV W0, W31
	0x03554B2C RET
	0x03554B30 RET
	0x03554B34 LDR X0, [X0 + 0x10]
	0x03554B38 RET
	0x03554B3C STR X1, [X0 + 0x10]
	0x03554B40 RET
	0x03554B44 RET
	0x03554B48 RET
	0x03554B4C MOV X1, X31
	0x03554B50 B 0x33BDD8C
	0x03554B54 STP X30, X23, [X31 - 0x30]!
	0x03554B58 STP X22, X21, [X31 + 0x10]
	0x03554B5C STP X20, X19, [X31 + 0x20]
	0x03554B60 ADRP X22, 0xE8B000
	0x03554B64 ADRP X23, 0xBE1000
	0x03554B68 LDRB W8, [X22 + 0xD6D]
	0x03554B6C LDR X23, [X23 + 0x358]
	0x03554B70 MOV W20, W2
	0x03554B74 MOV W21, W1
	0x03554B78 MOV X19, X0
	0x03554B7C TBNZ X8, 0x0, 0x3554B94
	0x03554B80 ADRP X0, 0xBE1000
	0x03554B84 LDR X0, [X0 + 0x358]
	0x03554B88 BL 0x1C16CF4
	0x03554B8C MOVZ W8, 0x1
	0x03554B90 STRB W8, [X22 + 0xD6D]
	0x03554B94 LDR X3, [X23]
	0x03554B98 MOV X0, X19
	0x03554B9C MOV W1, W21
	0x03554BA0 MOV W2, W20
	0x03554BA4 BL 0x2845D88
	0x03554BA8 MOVZ W8, 0x3F800000
	0x03554BAC STR W8, [X19 + 0x14]
	0x03554BB0 LDP X20, X19, [X31 + 0x20]
	0x03554BB4 LDP X22, X21, [X31 + 0x10]
	0x03554BB8 LDP X30, X23, [X31], #0x30
	0x03554BBC RET
	0x03554BC0 STP X30, X23, [X31 - 0x30]!
	0x03554BC4 STP X22, X21, [X31 + 0x10]
	0x03554BC8 STP X20, X19, [X31 + 0x20]
	0x03554BCC ADRP X21, 0xE8B000
	0x03554BD0 LDRB W8, [X21 + 0xD6E]
	0x03554BD4 MOV X19, X1
	0x03554BD8 MOV X20, X0
	0x03554BDC TBNZ X8, 0x0, 0x3554C0C
	0x03554BE0 ADRP X0, 0xBE1000
	0x03554BE4 LDR X0, [X0 + 0x360]
	0x03554BE8 BL 0x1C16CF4
	0x03554BEC ADRP X0, 0xBE1000
	0x03554BF0 LDR X0, [X0 + 0x368]
	0x03554BF4 BL 0x1C16CF4
	0x03554BF8 ADRP X0, 0xBE1000
	0x03554BFC LDR X0, [X0 + 0x370]
	0x03554C00 BL 0x1C16CF4
	0x03554C04 MOVZ W8, 0x1
	0x03554C08 STRB W8, [X21 + 0xD6E]
	0x03554C0C LDRB W8, [X20 + 0x10]
	0x03554C10 CBZ W8, 0x3554CBC
	0x03554C14 CBZ X19, 0x3554CD4
	0x03554C18 LDR X8, [X19 + 0x18]
	0x03554C1C CMP W8, 0x1
	0x03554C20 B.LT 0x3554C84
	0x03554C24 ADRP X23, 0xBE1000
	0x03554C28 LDR X23, [X23 + 0x370]
	0x03554C2C MOV X21, X31
	0x03554C30 AND X8, X8, 0x0
	0x03554C34 ADD X22, X19, 0x20
	0x03554C38 CMP X21, W8, UXTW
	0x03554C3C B.CS 0x3554CD0
	0x03554C40 LDR V0, [X22, X21, LSL #2]
	0x03554C44 LDR V1, [X20 + 0x18]
	0x03554C48 FCMP S0, S1
	0x03554C4C B.LE 0x3554C68
	0x03554C50 LDR X2, [X23]
	0x03554C54 MOVZ W1, 0x1
	0x03554C58 MOV X0, X20
	0x03554C5C BL 0x2845B74
	0x03554C60 MOV W8, W31
	0x03554C64 B 0x3554C70
	0x03554C68 LDR W8, [X20 + 0x34]
	0x03554C6C ADD W8, W8, 0x1
	0x03554C70 STR W8, [X20 + 0x34]
	0x03554C74 LDR W8, [X19 + 0x18]
	0x03554C78 ADD X21, X21, 0x1
	0x03554C7C CMP X21, W8, SXTW
	0x03554C80 B.LT 0x3554C38
	0x03554C84 LDR W8, [X20 + 0x34]
	0x03554C88 LDR W9, [X20 + 0x3C]
	0x03554C8C CMP W8, W9
	0x03554C90 B.LE 0x3554CAC
	0x03554C94 ADRP X8, 0xBE1000
	0x03554C98 LDR X8, [X8 + 0x370]
	0x03554C9C MOV X0, X20
	0x03554CA0 MOV W1, W31
	0x03554CA4 LDR X2, [X8]
	0x03554CA8 BL 0x2845B74
	0x03554CAC LDRB W8, [X20 + 0x1C]
	0x03554CB0 CMP W8, 0x0
	0x03554CB4 CSEL X0, X31, X19, EQ
	0x03554CB8 B 0x3554CC0
	0x03554CBC MOV X0, X19
	0x03554CC0 LDP X20, X19, [X31 + 0x20]
	0x03554CC4 LDP X22, X21, [X31 + 0x10]
	0x03554CC8 LDP X30, X23, [X31], #0x30
	0x03554CCC RET
	0x03554CD0 BL 0x1C16F28
	0x03554CD4 BL 0x1C16F20
	0x03554CD8 STP X30, X23, [X31 - 0x30]!
	0x03554CDC STP X22, X21, [X31 + 0x10]
	0x03554CE0 STP X20, X19, [X31 + 0x20]
	0x03554CE4 ADRP X22, 0xE8B000
	0x03554CE8 ADRP X23, 0xBE1000
	0x03554CEC LDRB W8, [X22 + 0xD6F]
	0x03554CF0 LDR X23, [X23 + 0x378]
	0x03554CF4 MOV W20, W2
	0x03554CF8 MOV W21, W1
	0x03554CFC MOV X19, X0
	0x03554D00 TBNZ X8, 0x0, 0x3554D18
	0x03554D04 ADRP X0, 0xBE1000
	0x03554D08 LDR X0, [X0 + 0x378]
	0x03554D0C BL 0x1C16CF4
	0x03554D10 MOVZ W8, 0x1
	0x03554D14 STRB W8, [X22 + 0xD6F]
	0x03554D18 LDR X3, [X23]
	0x03554D1C MOV X0, X19
	0x03554D20 MOV W1, W21
	0x03554D24 MOV W2, W20
	0x03554D28 BL 0x2845ADC
	0x03554D2C MOVZ W8, 0x100
	0x03554D30 MOVK W8, 0x38000000
	0x03554D34 STR W8, [X19 + 0x14]
	0x03554D38 LDP X20, X19, [X31 + 0x20]
	0x03554D3C LDP X22, X21, [X31 + 0x10]
	0x03554D40 LDP X30, X23, [X31], #0x30
	0x03554D44 RET
	0x03554D48 STP X30, X23, [X31 - 0x30]!
	0x03554D4C STP X22, X21, [X31 + 0x10]
	0x03554D50 STP X20, X19, [X31 + 0x20]
	0x03554D54 ADRP X21, 0xE8B000
	0x03554D58 LDRB W8, [X21 + 0xD70]
	0x03554D5C MOV X19, X1
	0x03554D60 MOV X20, X0
	0x03554D64 TBNZ X8, 0x0, 0x3554D94
	0x03554D68 ADRP X0, 0xBE1000
	0x03554D6C LDR X0, [X0 + 0x380]
	0x03554D70 BL 0x1C16CF4
	0x03554D74 ADRP X0, 0xBE1000
	0x03554D78 LDR X0, [X0 + 0x388]
	0x03554D7C BL 0x1C16CF4
	0x03554D80 ADRP X0, 0xBE1000
	0x03554D84 LDR X0, [X0 + 0x390]
	0x03554D88 BL 0x1C16CF4
	0x03554D8C MOVZ W8, 0x1
	0x03554D90 STRB W8, [X21 + 0xD70]
	0x03554D94 LDRB W8, [X20 + 0x10]
	0x03554D98 CBZ W8, 0x3554E48
	0x03554D9C CBZ X19, 0x3554E60
	0x03554DA0 LDR X8, [X19 + 0x18]
	0x03554DA4 CMP W8, 0x1
	0x03554DA8 B.LT 0x3554E10

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xE8C000
	009 Move X19, 0xBC8000
	010 Move W8, [X21+3431]
	011 Move X19, [X19+2128]
	012 Move W20, W1
	013 Move W23, W0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {35}
	018 Move X0, 0xBE2000
	019 Move X0, [X0+648]
	020 Call 0x1C17CF4
	021 Move X0, 0xBC8000
	022 Move X0, [X0+2128]
	023 Call 0x1C17CF4
	024 Move X0, 0xBA0000
	025 Move X0, [X0+2512]
	026 Call 0x1C17CF4
	027 Move X0, 0xBC9000
	028 Move X0, [X0+3584]
	029 Call 0x1C17CF4
	030 Move X0, 0xBE2000
	031 Move X0, [X0+792]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X21+3431], W8
	035 Move X21, 0xBA0000
	036 Move X21, [X21+2512]
	037 Move W0, W20
	038 Call Wrapper.opus_decoder_get_size, X0
	039 Move X8, [X19]
	040 Move W19, W0
	041 Move W9, [X8+224]
	042 Compare W9, 0
	043 JumpIfNotEqual {46}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move W0, W19
	047 Move X1, X31
	048 Call Marshal.AllocHGlobal, X0
	049 Move W1, W23
	050 Move W2, W20
	051 Move X19, X0
	052 Call Wrapper.opus_decoder_init, X0, X1, X2
	053 Move X8, [X21]
	054 Move W21, W0
	055 Move W1, 3
	056 Move X0, X8
	057 Call 0x1C17D6C
	058 Move X22, X0
	059 Compare X0, 0
	060 JumpIfEqual {124}
	061 Move X24, 0xBE2000
	062 Move X24, [X24+792]
	063 Move X0, [X24]
	064 Compare X0, 0
	065 JumpIfEqual {71}
	066 Move X8, [X22]
	067 Move X1, [X8+64]
	068 Call 0x1C17E00
	069 Compare X0, 0
	070 JumpIfEqual {128}
	071 Move W8, [X22+24]
	072 Compare W8, 0
	073 JumpIfEqual {125}
	074 Move X8, [X24]
	075 Move X9, 0xBC9000
	076 Move X9, [X9+3584]
	077 Move [X22+32], X8
	078 Move [X31+12], W23
	079 Move X0, [X9]
	080 Add X1, X31, 12
	081 Call 0x1C17E04
	082 Move X23, X0
	083 Compare X0, 0
	084 JumpIfEqual {91}
	085 Move X8, [X22]
	086 Move X1, [X8+64]
	087 Move X0, X23
	088 Call 0x1C17E00
	089 Compare X0, 0
	090 JumpIfEqual {131}
	091 Move W8, [X22+24]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move X8, 0xBE2000
	094 Move X8, [X8+648]
	095 Move [X22+40], X23
	096 Move [X31+8], W20
	097 Move X0, [X8]
	098 Add X1, X31, 8
	099 Call 0x1C17E04
	100 Move X20, X0
	101 Compare X0, 0
	102 JumpIfEqual {109}
	103 Move X8, [X22]
	104 Move X1, [X8+64]
	105 Move X0, X20
	106 Call 0x1C17E00
	107 Compare X0, 0
	108 JumpIfEqual {134}
	109 Move W8, [X22+24]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Move [X22+48], X20
	112 Move W0, W21
	113 Move X1, X22
	114 Call Wrapper.HandleStatusCode, X0, X1
	115 Move X0, X19
	116 Move X20, [X31+48]
	117 Move X19, [X31+56]
	118 Move X22, [X31+32]
	119 Move X21, [X31+40]
	120 Move X24, [X31+16]
	121 Move X23, [X31+24]
	122 Move X30, [X31+64]
	123 Return X0
	124 Call 0x1C17F20
	125 Call 0x1C17F28
	126 Call 0x1C17F28
	127 Call 0x1C17F28
	128 Call 0x1C17F44
	129 Move X1, X31
	130 Call 0x1C17DEC
	131 Call 0x1C17F44
	132 Move X1, X31
	133 Call 0x1C17DEC
	134 Call 0x1C17F44
	135 Move X1, X31
	136 Call 0x1C17DEC
	137 Move X20, X0
	138 NotImplemented "Instruction CMP not yet implemented."
	139 Move X0, X20
	140 Call 0x3EB2AD0
	141 Move X20, X0
	142 Move X0, 0xBA0000
	143 Move X0, [X0+2000]
	144 Call 0x1C17D08
	145 Move X8, [X20]
	146 Move X1, [X8]
	147 Call 0x1C18270
	148 Move TEMP, X0
	149 And TEMP, TEMP, 1
	150 Compare TEMP, 1
	151 JumpIfNotEqual {170}
	152 Move X20, [X20]
	153 Call 0x3EB2AE0
	154 Move X0, X19
	155 Move X1, X31
	156 Move X2, X31
	157 Call IntPtr.op_Inequality, X0, X1
	158 Move TEMP, X0
	159 And TEMP, TEMP, 1
	160 Compare TEMP, 1
	161 JumpIfNotEqual {164}
	162 Move X0, X19
	163 Call Wrapper.opus_decoder_destroy, X0
	164 Move X0, 0xBE2000
	165 Move X0, [X0+800]
	166 Call 0x1C17D08
	167 Move X1, X0
	168 Move X0, X20
	169 Call 0x1C17DEC
	170 Move W0, 8
	171 Call 0x3EB2AF0
	172 Move X8, [X20]
	173 Move [X0], X8
	174 Move X1, 0x961000
	175 Add X1, X1, 3672
	176 Move X2, X31
	177 Call 0x3EB2B00
	178 Move X20, X0
	179 Call 0x3EB2AE0
	180 Move X0, X20
	181 Call 0x1D2D690
	182 Call 0x1991590

Method: System.Int32 opus_decode(System.IntPtr st, Photon.Voice.FrameBuffer data, System.Int16[] pcm, System.Int32 frame_size, System.Int32 decode_fec)

Disassembly:
	0x03554DAC ADRP X23, 0xBE1000
	0x03554DB0 LDR X23, [X23 + 0x390]
	0x03554DB4 MOV X21, X31
	0x03554DB8 AND X8, X8, 0x0
	0x03554DBC ADD X22, X19, 0x20
	0x03554DC0 CMP X21, W8, UXTW
	0x03554DC4 B.CS 0x3554E5C
	0x03554DC8 LDRSH W8, [X22, X21, LSL #1]
	0x03554DCC LDR V0, [X20 + 0x18]
	0x03554DD0 SCVTF S1, W8
	0x03554DD4 FCMP S0, S1
	0x03554DD8 B.PL 0x3554DF4
	0x03554DDC LDR X2, [X23]
	0x03554DE0 MOVZ W1, 0x1
	0x03554DE4 MOV X0, X20
	0x03554DE8 BL 0x28458C8
	0x03554DEC MOV W8, W31
	0x03554DF0 B 0x3554DFC
	0x03554DF4 LDR W8, [X20 + 0x34]
	0x03554DF8 ADD W8, W8, 0x1
	0x03554DFC STR W8, [X20 + 0x34]
	0x03554E00 LDR W8, [X19 + 0x18]
	0x03554E04 ADD X21, X21, 0x1
	0x03554E08 CMP X21, W8, SXTW
	0x03554E0C B.LT 0x3554DC0
	0x03554E10 LDR W8, [X20 + 0x34]
	0x03554E14 LDR W9, [X20 + 0x3C]
	0x03554E18 CMP W8, W9
	0x03554E1C B.LE 0x3554E38
	0x03554E20 ADRP X8, 0xBE1000
	0x03554E24 LDR X8, [X8 + 0x390]
	0x03554E28 MOV X0, X20
	0x03554E2C MOV W1, W31
	0x03554E30 LDR X2, [X8]
	0x03554E34 BL 0x28458C8
	0x03554E38 LDRB W8, [X20 + 0x1C]
	0x03554E3C CMP W8, 0x0
	0x03554E40 CSEL X0, X31, X19, EQ
	0x03554E44 B 0x3554E4C
	0x03554E48 MOV X0, X19
	0x03554E4C LDP X20, X19, [X31 + 0x20]
	0x03554E50 LDP X22, X21, [X31 + 0x10]
	0x03554E54 LDP X30, X23, [X31], #0x30
	0x03554E58 RET
	0x03554E5C BL 0x1C16F28
	0x03554E60 BL 0x1C16F20
	0x03554E64 MOV X1, X31
	0x03554E68 B 0x33BDD8C
	0x03554E6C STR X30, [X31 - 0x20]!
	0x03554E70 STP X20, X19, [X31 + 0x10]
	0x03554E74 ADRP X19, 0xE8B000
	0x03554E78 ADRP X20, 0xBA4000
	0x03554E7C LDRB W8, [X19 + 0xD71]
	0x03554E80 LDR X20, [X20 + 0x388]
	0x03554E84 TBNZ X8, 0x0, 0x3554E9C
	0x03554E88 ADRP X0, 0xBA4000
	0x03554E8C LDR X0, [X0 + 0x388]
	0x03554E90 BL 0x1C16CF4
	0x03554E94 MOVZ W8, 0x1
	0x03554E98 STRB W8, [X19 + 0xD71]
	0x03554E9C LDR X8, [X20]
	0x03554EA0 ADRP X9, 0xFFFFFFFFFD597000
	0x03554EA4 LDR V0, [X9 + 0xAA]
	0x03554EA8 LDP X20, X19, [X31 + 0x10]
	0x03554EAC LDR X8, [X8 + 0xB8]
	0x03554EB0 STR V0, [X8]
	0x03554EB4 LDR X30, [X31], #0x20
	0x03554EB8 RET
	0x03554EBC MOV X1, X31
	0x03554EC0 B 0x33BDD8C
	0x03554EC4 STR X30, [X31 - 0x20]!
	0x03554EC8 STP X20, X19, [X31 + 0x10]
	0x03554ECC MOV W19, W1
	0x03554ED0 MOV X1, X31
	0x03554ED4 MOV X20, X0
	0x03554ED8 BL 0x33BDD8C
	0x03554EDC STR W19, [X20 + 0x10]
	0x03554EE0 LDP X20, X19, [X31 + 0x10]
	0x03554EE4 LDR X30, [X31], #0x20
	0x03554EE8 RET
	0x03554EEC LDR W0, [X0 + 0x10]
	0x03554EF0 RET
	0x03554EF4 STR W1, [X0 + 0x10]
	0x03554EF8 RET
	0x03554EFC STR X30, [X31 - 0x20]!
	0x03554F00 STP X20, X19, [X31 + 0x10]
	0x03554F04 ADRP X19, 0xE8B000
	0x03554F08 ADRP X20, 0xBE1000
	0x03554F0C LDRB W8, [X19 + 0xD72]
	0x03554F10 LDR X20, [X20 + 0x398]
	0x03554F14 TBNZ X8, 0x0, 0x3554F2C
	0x03554F18 ADRP X0, 0xBE1000
	0x03554F1C LDR X0, [X0 + 0x398]
	0x03554F20 BL 0x1C16CF4
	0x03554F24 MOVZ W8, 0x1
	0x03554F28 STRB W8, [X19 + 0xD72]
	0x03554F2C LDR X0, [X20]
	0x03554F30 BL 0x1C16F10
	0x03554F34 MOV X1, X31
	0x03554F38 MOV X19, X0
	0x03554F3C BL 0x33BDD8C
	0x03554F40 LDR X8, [X20]
	0x03554F44 LDR X8, [X8 + 0xB8]
	0x03554F48 STR X19, [X8]
	0x03554F4C LDP X20, X19, [X31 + 0x10]
	0x03554F50 LDR X30, [X31], #0x20
	0x03554F54 RET
	0x03554F58 STR X30, [X31 - 0x50]!
	0x03554F5C STP X26, X25, [X31 + 0x10]
	0x03554F60 STP X24, X23, [X31 + 0x20]
	0x03554F64 STP X22, X21, [X31 + 0x30]
	0x03554F68 STP X20, X19, [X31 + 0x40]
	0x03554F6C ADRP X25, 0xE8B000
	0x03554F70 ADRP X26, 0xBC7000
	0x03554F74 LDRB W8, [X25 + 0xD73]
	0x03554F78 LDR X26, [X26 + 0x5F8]
	0x03554F7C MOV X19, X5
	0x03554F80 MOV X20, X4
	0x03554F84 MOV X22, X3
	0x03554F88 MOV W23, W2
	0x03554F8C MOV W24, W1
	0x03554F90 MOV X21, X0
	0x03554F94 TBNZ X8, 0x0, 0x3554FAC
	0x03554F98 ADRP X0, 0xBC7000
	0x03554F9C LDR X0, [X0 + 0x5F8]
	0x03554FA0 BL 0x1C16CF4
	0x03554FA4 MOVZ W8, 0x1
	0x03554FA8 STRB W8, [X25 + 0xD73]
	0x03554FAC LDR X0, [X26]
	0x03554FB0 LDR W8, [X0 + 0xE0]
	0x03554FB4 CBNZ W8, 0x3554FBC
	0x03554FB8 BL 0x1C16DFC
	0x03554FBC AND W8, W24, 0x1
	0x03554FC0 STR W23, [X21 + 0x4]
	0x03554FC4 STP X22, X20, [X21 + 0x8]
	0x03554FC8 STRB W31, [X21 + 0x20]
	0x03554FCC STRB W8, [X21]
	0x03554FD0 STR X19, [X21 + 0x18]
	0x03554FD4 LDP X20, X19, [X31 + 0x40]
	0x03554FD8 LDP X22, X21, [X31 + 0x30]
	0x03554FDC LDP X24, X23, [X31 + 0x20]
	0x03554FE0 LDP X26, X25, [X31 + 0x10]
	0x03554FE4 LDR X30, [X31], #0x50
	0x03554FE8 RET
	0x03554FEC STR X30, [X31 - 0x40]!
	0x03554FF0 STP X24, X23, [X31 + 0x10]
	0x03554FF4 STP X22, X21, [X31 + 0x20]
	0x03554FF8 STP X20, X19, [X31 + 0x30]
	0x03554FFC ADRP X24, 0xE8B000
	0x03555000 ADRP X23, 0xBC6000
	0x03555004 LDRB W8, [X24 + 0xD74]
	0x03555008 B 0x3EB168C
	0x0355500C MOV X19, X3
	0x03555010 MOV X20, X2
	0x03555014 MOV W22, W1
	0x03555018 MOV X21, X0
	0x0355501C TBNZ X8, 0x0, 0x3555040
	0x03555020 ADRP X0, 0xBC6000
	0x03555024 LDR X0, [X0 + 0x5F8]
	0x03555028 BL 0x1C16CF4
	0x0355502C ADRP X0, 0xB9E000
	0x03555030 LDR X0, [X0 + 0x988]
	0x03555034 BL 0x1C16CF4
	0x03555038 MOVZ W8, 0x1
	0x0355503C STRB W8, [X24 + 0xD74]
	0x03555040 LDR X0, [X23]
	0x03555044 ADRP X23, 0xB9E000
	0x03555048 LDR W8, [X0 + 0xE0]
	0x0355504C LDR X23, [X23 + 0x988]
	0x03555050 CBNZ W8, 0x3555058
	0x03555054 BL 0x1C16DFC
	0x03555058 STRB W31, [X21]
	0x0355505C STR W22, [X21 + 0x4]
	0x03555060 LDR X8, [X23]
	0x03555064 STRB W31, [X21 + 0x20]
	0x03555068 STR X19, [X21 + 0x18]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+32], X26
	004 Move [X31+40], X25
	005 Move [X31+48], X24
	006 Move [X31+56], X23
	007 Move [X31+64], X22
	008 Move [X31+72], X21
	009 Move [X31+80], X20
	010 Move [X31+88], X19
	011 Move X22, 0xE8C000
	012 Move W8, [X22+3432]
	013 Move W19, W4
	014 Move W21, W3
	015 Move X23, X2
	016 Move X24, X1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {36}
	022 Move X0, 0xBC9000
	023 Move X0, [X0+3608]
	024 Call 0x1C17CF4
	025 Move X0, 0xBA0000
	026 Move X0, [X0+1880]
	027 Call 0x1C17CF4
	028 Move X0, 0xBA0000
	029 Move X0, [X0+2512]
	030 Call 0x1C17CF4
	031 Move X0, 0xBE2000
	032 Move X0, [X0+808]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X22+3432], W8
	036 Move X0, X20
	037 Move X1, X31
	038 Move X2, X31
	039 Call IntPtr.op_Equality, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfEqual {180}
	044 Move X25, 0xBC9000
	045 Move X25, [X25+3608]
	046 Move X0, [X25]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 Move X0, X24
	052 Call FrameBuffer.get_Ptr, X0
	053 Move W2, [X24+12]
	054 Move X1, X0
	055 Move X0, X20
	056 Move X3, X23
	057 Move W4, W21
	058 Move W5, W19
	059 Call Wrapper.opus_decode, X0, X1, X2, X3, X4, X5
	060 Add W31, W0, 4
	061 Move W20, W31
	062 Move W20, W0
	063 Move TEMP, X0
	064 And TEMP, TEMP, -2147483648
	065 Compare TEMP, -2147483648
	066 JumpIfNotEqual {168}
	067 Move X8, 0xBA0000
	068 Move X8, [X8+2512]
	069 Move W1, 5
	070 Move X0, [X8]
	071 Call 0x1C17D6C
	072 Compare X0, 0
	073 JumpIfEqual {202}
	074 Move X26, 0xBE2000
	075 Move X26, [X26+808]
	076 Move X22, X0
	077 Move X0, [X26]
	078 Compare X0, 0
	079 JumpIfEqual {85}
	080 Move X8, [X22]
	081 Move X1, [X8+64]
	082 Call 0x1C17E00
	083 Compare X0, 0
	084 JumpIfEqual {199}
	085 Move W8, [X22+24]
	086 Compare W8, 0
	087 JumpIfEqual {198}
	088 Move X8, [X26]
	089 Move [X22+32], X8
	090 Move X0, [X25]
	091 Move W8, [X0+224]
	092 Compare W8, 0
	093 JumpIfNotEqual {95}
	094 Call 0x1C17DFC
	095 Move X25, 0xBA0000
	096 Move W8, [X24+12]
	097 Move X25, [X25+1880]
	098 Add X1, X31, 28
	099 Move [X31+28], W8
	100 Move X0, [X25]
	101 Call 0x1C17E04
	102 Move X24, X0
	103 Compare X0, 0
	104 JumpIfEqual {111}
	105 Move X8, [X22]
	106 Move X0, X24
	107 Move X1, [X8+64]
	108 Call 0x1C17E00
	109 Compare X0, 0
	110 JumpIfEqual {199}
	111 Move W8, [X22+24]
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move [X22+40], X24
	114 Compare X23, 0
	115 JumpIfEqual {202}
	116 Move X8, [X23+24]
	117 Move X0, [X25]
	118 Add X1, X31, 24
	119 Move [X31+24], W8
	120 Call 0x1C17E04
	121 Move X23, X0
	122 Compare X0, 0
	123 JumpIfEqual {130}
	124 Move X8, [X22]
	125 Move X0, X23
	126 Move X1, [X8+64]
	127 Call 0x1C17E00
	128 Compare X0, 0
	129 JumpIfEqual {199}
	130 Move W8, [X22+24]
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move [X22+48], X23
	133 Move X0, [X25]
	134 Add X1, X31, 12
	135 Move [X31+12], W21
	136 Call 0x1C17E04
	137 Move X21, X0
	138 Compare X0, 0
	139 JumpIfEqual {146}
	140 Move X8, [X22]
	141 Move X0, X21
	142 Move X1, [X8+64]
	143 Call 0x1C17E00
	144 Compare X0, 0
	145 JumpIfEqual {199}
	146 Move W8, [X22+24]
	147 NotImplemented "Instruction CMP not yet implemented."
	148 Move [X22+56], X21
	149 Move X0, [X25]
	150 Add X1, X31, 8
	151 Move [X31+8], W19
	152 Call 0x1C17E04
	153 Move X19, X0
	154 Compare X0, 0
	155 JumpIfEqual {162}
	156 Move X8, [X22]
	157 Move X0, X19
	158 Move X1, [X8+64]
	159 Call 0x1C17E00
	160 Compare X0, 0
	161 JumpIfEqual {199}
	162 Move W8, [X22+24]
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Move W0, W20
	165 Move X1, X22
	166 Move [X22+64], X19
	167 Call Wrapper.HandleStatusCode, X0, X1
	168 Move W0, W20
	169 Move X20, [X31+80]
	170 Move X19, [X31+88]
	171 Move X22, [X31+64]
	172 Move X21, [X31+72]
	173 Move X24, [X31+48]
	174 Move X23, [X31+56]
	175 Move X26, [X31+32]
	176 Move X25, [X31+40]
	177 Move X30, [X31+16]
	178 Add X31, X31, 96
	179 Return X0
	180 Move X0, 0xBC8000
	181 Move X0, [X0+1208]
	182 Call 0x1C17D08
	183 Call 0x1C17F10
	184 Move X19, X0
	185 Move X0, 0xBE1000
	186 Move X0, [X0+776]
	187 Call 0x1C17D08
	188 Move X1, X0
	189 Move X0, X19
	190 Move X2, X31
	191 Call ObjectDisposedException..ctor, X0, X1
	192 Move X0, 0xBE1000
	193 Move X0, [X0+816]
	194 Call 0x1C17D08
	195 Move X1, X0
	196 Move X0, X19
	197 Call 0x1C17DEC
	198 Call 0x1C17F28
	199 Call 0x1C17F44
	200 Move X1, X31
	201 Call 0x1C17DEC
	202 Call 0x1C17F20

Method: System.Int32 opus_decode(System.IntPtr st, Photon.Voice.FrameBuffer data, System.Single[] pcm, System.Int32 frame_size, System.Int32 decode_fec)

Disassembly:
	0x035550D0 LDR W8, [X0 + 0xE0]
	0x035550D4 CBNZ W8, 0x35550DC
	0x035550D8 BL 0x1C16DFC
	0x035550DC MOVZ W8, 0x1
	0x035550E0 STRB W31, [X20]
	0x035550E4 STR W31, [X20 + 0x4]
	0x035550E8 STP X22, X21, [X20 + 0x8]
	0x035550EC STRB W8, [X20 + 0x20]
	0x035550F0 STR X19, [X20 + 0x18]
	0x035550F4 LDP X20, X19, [X31 + 0x30]
	0x035550F8 LDP X22, X21, [X31 + 0x20]
	0x035550FC LDP X24, X23, [X31 + 0x10]
	0x03555100 LDR X30, [X31], #0x40
	0x03555104 RET
	0x03555108 STP X30, X23, [X31 - 0x30]!
	0x0355510C STP X22, X21, [X31 + 0x10]
	0x03555110 STP X20, X19, [X31 + 0x20]
	0x03555114 ADRP X22, 0xE8A000
	0x03555118 ADRP X23, 0xBC6000
	0x0355511C LDRB W8, [X22 + 0xD76]
	0x03555120 LDR X23, [X23 + 0x5F8]
	0x03555124 MOV X19, X2
	0x03555128 MOV X21, X1
	0x0355512C MOV X20, X0
	0x03555130 TBNZ X8, 0x0, 0x3555148
	0x03555134 ADRP X0, 0xBC6000
	0x03555138 LDR X0, [X0 + 0x5F8]
	0x0355513C BL 0x1C16CF4
	0x03555140 MOVZ W8, 0x1
	0x03555144 STRB W8, [X22 + 0xD76]
	0x03555148 LDR X0, [X23]
	0x0355514C LDR W8, [X0 + 0xE0]
	0x03555150 CBNZ W8, 0x3555158
	0x03555154 BL 0x1C16DFC
	0x03555158 MOVZ W8, 0x1
	0x0355515C STRB W31, [X20]
	0x03555160 STR W31, [X20 + 0x4]
	0x03555164 STP X21, X21, [X20 + 0x8]
	0x03555168 STRB W8, [X20 + 0x20]
	0x0355516C STR X19, [X20 + 0x18]
	0x03555170 LDP X20, X19, [X31 + 0x20]
	0x03555174 LDP X22, X21, [X31 + 0x10]
	0x03555178 LDP X30, X23, [X31], #0x30
	0x0355517C RET
	0x03555180 LDRB W0, [X0]
	0x03555184 RET
	0x03555188 AND W8, W1, 0x1
	0x0355518C STRB W8, [X0]
	0x03555190 RET
	0x03555194 LDR W0, [X0 + 0x4]
	0x03555198 RET
	0x0355519C STR W1, [X0 + 0x4]
	0x035551A0 RET
	0x035551A4 LDR X0, [X0 + 0x8]
	0x035551A8 RET
	0x035551AC STR X1, [X0 + 0x8]
	0x035551B0 RET
	0x035551B4 LDR X0, [X0 + 0x10]
	0x035551B8 RET
	0x035551BC STR X1, [X0 + 0x10]
	0x035551C0 RET
	0x035551C4 STR X30, [X31 - 0x20]!
	0x035551C8 STP X20, X19, [X31 + 0x10]
	0x035551CC ADRP X20, 0xE8A000
	0x035551D0 LDRB W8, [X20 + 0xD77]
	0x035551D4 MOV X19, X0
	0x035551D8 TBNZ X8, 0x0, 0x35551F0
	0x035551DC ADRP X0, 0xBE0000
	0x035551E0 LDR X0, [X0 + 0x398]
	0x035551E4 BL 0x1C16CF4
	0x035551E8 MOVZ W8, 0x1
	0x035551EC STRB W8, [X20 + 0xD77]
	0x035551F0 LDR X0, [X19 + 0x18]
	0x035551F4 CBNZ X0, 0x355521C
	0x035551F8 ADRP X19, 0xBE0000
	0x035551FC LDR X19, [X19 + 0x398]
	0x03555200 LDR X0, [X19]
	0x03555204 LDR W8, [X0 + 0xE0]
	0x03555208 CBNZ W8, 0x3555214
	0x0355520C BL 0x1C16DFC
	0x03555210 LDR X0, [X19]
	0x03555214 LDR X8, [X0 + 0xB8]
	0x03555218 LDR X0, [X8]
	0x0355521C LDP X20, X19, [X31 + 0x10]
	0x03555220 LDR X30, [X31], #0x20
	0x03555224 RET
	0x03555228 SUB X31, X31, 0x60
	0x0355522C STR X30, [X31 + 0x30]
	0x03555230 STP X22, X21, [X31 + 0x40]
	0x03555234 STP X20, X19, [X31 + 0x50]
	0x03555238 ADRP X22, 0xE8A000
	0x0355523C ADRP X21, 0xBC6000
	0x03555240 LDRB W8, [X22 + 0xD78]
	0x03555244 LDR X21, [X21 + 0x5F8]
	0x03555248 MOV X20, X1
	0x0355524C MOV X19, X0
	0x03555250 TBNZ X8, 0x0, 0x3555268
	0x03555254 ADRP X0, 0xBC6000
	0x03555258 LDR X0, [X0 + 0x5F8]
	0x0355525C BL 0x1C16CF4
	0x03555260 MOVZ W8, 0x1
	0x03555264 STRB W8, [X22 + 0xD78]
	0x03555268 LDR X8, [X20 + 0x20]
	0x0355526C LDP V1, V0, [X20]
	0x03555270 LDR X0, [X21]
	0x03555274 ADD X1, X31, 0x0
	0x03555278 STR X8, [X31 + 0x20]
	0x0355527C STP V1, V0, [X31]
	0x03555280 BL 0x1C16E04
	0x03555284 LDR X8, [X21]
	0x03555288 MOV X20, X0
	0x0355528C LDR W9, [X8 + 0xE0]
	0x03555290 CBNZ W9, 0x355529C
	0x03555294 MOV X0, X8
	0x03555298 BL 0x1C16DFC
	0x0355529C MOV X0, X19
	0x035552A0 MOV X1, X20
	0x035552A4 BL 0x35552C0
	0x035552A8 LDP X20, X19, [X31 + 0x50]
	0x035552AC LDP X22, X21, [X31 + 0x40]
	0x035552B0 LDR X30, [X31 + 0x30]
	0x035552B4 AND W0, W0, 0x1
	0x035552B8 ADD X31, X31, 0x60
	0x035552BC RET
	0x035552C0 SUB X31, X31, 0x60
	0x035552C4 STR X30, [X31 + 0x30]
	0x035552C8 STP X22, X21, [X31 + 0x40]
	0x035552CC STP X20, X19, [X31 + 0x50]
	0x035552D0 ADRP X22, 0xE8A000
	0x035552D4 ADRP X21, 0xBC6000
	0x035552D8 LDRB W8, [X22 + 0xD7A]
	0x035552DC LDR X21, [X21 + 0x5F8]
	0x035552E0 MOV X19, X1
	0x035552E4 MOV X20, X0
	0x035552E8 TBNZ X8, 0x0, 0x3555300
	0x035552EC ADRP X0, 0xBC6000
	0x035552F0 LDR X0, [X0 + 0x5F8]
	0x035552F4 BL 0x1C16CF4
	0x035552F8 MOVZ W8, 0x1
	0x035552FC STRB W8, [X22 + 0xD7A]
	0x03555300 LDR X8, [X20 + 0x20]
	0x03555304 LDP V1, V0, [X20]
	0x03555308 LDR X0, [X21]
	0x0355530C ADD X1, X31, 0x0
	0x03555310 STR X8, [X31 + 0x20]
	0x03555314 STP V1, V0, [X31]
	0x03555318 BL 0x1C16E04
	0x0355531C MOV X1, X19
	0x03555320 MOV X2, X31
	0x03555324 BL 0x33D55D0
	0x03555328 LDP X20, X19, [X31 + 0x50]
	0x0355532C LDP X22, X21, [X31 + 0x40]
	0x03555330 LDR X30, [X31 + 0x30]
	0x03555334 AND W0, W0, 0x1
	0x03555338 ADD X31, X31, 0x60
	0x0355533C RET
	0x03555340 SUB X31, X31, 0x60
	0x03555344 STR X30, [X31 + 0x30]
	0x03555348 STP X22, X21, [X31 + 0x40]
	0x0355534C STP X20, X19, [X31 + 0x50]
	0x03555350 ADRP X22, 0xE8A000
	0x03555354 ADRP X21, 0xBC6000
	0x03555358 LDRB W8, [X22 + 0xD79]
	0x0355535C LDR X21, [X21 + 0x5F8]
	0x03555360 MOV X20, X1
	0x03555364 MOV X19, X0
	0x03555368 TBNZ X8, 0x0, 0x3555380
	0x0355536C ADRP X0, 0xBC6000
	0x03555370 LDR X0, [X0 + 0x5F8]
	0x03555374 BL 0x1C16CF4
	0x03555378 MOVZ W8, 0x1
	0x0355537C STRB W8, [X22 + 0xD79]
	0x03555380 LDR X8, [X20 + 0x20]
	0x03555384 LDP V1, V0, [X20]
	0x03555388 LDR X0, [X21]
	0x0355538C ADD X1, X31, 0x0

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+32], X26
	004 Move [X31+40], X25
	005 Move [X31+48], X24
	006 Move [X31+56], X23
	007 Move [X31+64], X22
	008 Move [X31+72], X21
	009 Move [X31+80], X20
	010 Move [X31+88], X19
	011 Move X22, 0xE8B000
	012 Move W8, [X22+3433]
	013 Move W19, W4
	014 Move W21, W3
	015 Move X23, X2
	016 Move X24, X1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {36}
	022 Move X0, 0xBC8000
	023 Move X0, [X0+3608]
	024 Call 0x1C17CF4
	025 Move X0, 0xB9F000
	026 Move X0, [X0+1880]
	027 Call 0x1C17CF4
	028 Move X0, 0xB9F000
	029 Move X0, [X0+2512]
	030 Call 0x1C17CF4
	031 Move X0, 0xBE1000
	032 Move X0, [X0+824]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X22+3433], W8
	036 Move X0, X20
	037 Move X1, X31
	038 Move X2, X31
	039 Call IntPtr.op_Equality, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfEqual {180}
	044 Move X25, 0xBC8000
	045 Move X25, [X25+3608]
	046 Move X0, [X25]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 Move X0, X24
	052 Call FrameBuffer.get_Ptr, X0
	053 Move W2, [X24+12]
	054 Move X1, X0
	055 Move X0, X20
	056 Move X3, X23
	057 Move W4, W21
	058 Move W5, W19
	059 Call Wrapper.opus_decode_float, X0, X1, X2, X3, X4, X5
	060 Add W31, W0, 4
	061 Move W20, W31
	062 Move W20, W0
	063 Move TEMP, X0
	064 And TEMP, TEMP, -2147483648
	065 Compare TEMP, -2147483648
	066 JumpIfNotEqual {168}
	067 Move X8, 0xB9F000
	068 Move X8, [X8+2512]
	069 Move W1, 5
	070 Move X0, [X8]
	071 Call 0x1C17D6C
	072 Compare X0, 0
	073 JumpIfEqual {202}
	074 Move X26, 0xBE1000
	075 Move X26, [X26+824]
	076 Move X22, X0
	077 Move X0, [X26]
	078 Compare X0, 0
	079 JumpIfEqual {85}
	080 Move X8, [X22]
	081 Move X1, [X8+64]
	082 Call 0x1C17E00
	083 Compare X0, 0
	084 JumpIfEqual {199}
	085 Move W8, [X22+24]
	086 Compare W8, 0
	087 JumpIfEqual {198}
	088 Move X8, [X26]
	089 Move [X22+32], X8
	090 Move X0, [X25]
	091 Move W8, [X0+224]
	092 Compare W8, 0
	093 JumpIfNotEqual {95}
	094 Call 0x1C17DFC
	095 Move X25, 0xB9F000
	096 Move W8, [X24+12]
	097 Move X25, [X25+1880]
	098 Add X1, X31, 28
	099 Move [X31+28], W8
	100 Move X0, [X25]
	101 Call 0x1C17E04
	102 Move X24, X0
	103 Compare X0, 0
	104 JumpIfEqual {111}
	105 Move X8, [X22]
	106 Move X0, X24
	107 Move X1, [X8+64]
	108 Call 0x1C17E00
	109 Compare X0, 0
	110 JumpIfEqual {199}
	111 Move W8, [X22+24]
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move [X22+40], X24
	114 Compare X23, 0
	115 JumpIfEqual {202}
	116 Move X8, [X23+24]
	117 Move X0, [X25]
	118 Add X1, X31, 24
	119 Move [X31+24], W8
	120 Call 0x1C17E04
	121 Move X23, X0
	122 Compare X0, 0
	123 JumpIfEqual {130}
	124 Move X8, [X22]
	125 Move X0, X23
	126 Move X1, [X8+64]
	127 Call 0x1C17E00
	128 Compare X0, 0
	129 JumpIfEqual {199}
	130 Move W8, [X22+24]
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move [X22+48], X23
	133 Move X0, [X25]
	134 Add X1, X31, 12
	135 Move [X31+12], W21
	136 Call 0x1C17E04
	137 Move X21, X0
	138 Compare X0, 0
	139 JumpIfEqual {146}
	140 Move X8, [X22]
	141 Move X0, X21
	142 Move X1, [X8+64]
	143 Call 0x1C17E00
	144 Compare X0, 0
	145 JumpIfEqual {199}
	146 Move W8, [X22+24]
	147 NotImplemented "Instruction CMP not yet implemented."
	148 Move [X22+56], X21
	149 Move X0, [X25]
	150 Add X1, X31, 8
	151 Move [X31+8], W19
	152 Call 0x1C17E04
	153 Move X19, X0
	154 Compare X0, 0
	155 JumpIfEqual {162}
	156 Move X8, [X22]
	157 Move X0, X19
	158 Move X1, [X8+64]
	159 Call 0x1C17E00
	160 Compare X0, 0
	161 JumpIfEqual {199}
	162 Move W8, [X22+24]
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Move W0, W20
	165 Move X1, X22
	166 Move [X22+64], X19
	167 Call Wrapper.HandleStatusCode, X0, X1
	168 Move W0, W20
	169 Move X20, [X31+80]
	170 Move X19, [X31+88]
	171 Move X22, [X31+64]
	172 Move X21, [X31+72]
	173 Move X24, [X31+48]
	174 Move X23, [X31+56]
	175 Move X26, [X31+32]
	176 Move X25, [X31+40]
	177 Move X30, [X31+16]
	178 Add X31, X31, 96
	179 Return X0
	180 Move X0, 0xBC8000
	181 Move X0, [X0+1208]
	182 Call 0x1C17D08
	183 Call 0x1C17F10
	184 Move X19, X0
	185 Move X0, 0xBE1000
	186 Move X0, [X0+776]
	187 Call 0x1C17D08
	188 Move X1, X0
	189 Move X0, X19
	190 Move X2, X31
	191 Call ObjectDisposedException..ctor, X0, X1
	192 Move X0, 0xBE1000
	193 Move X0, [X0+832]
	194 Call 0x1C17D08
	195 Move X1, X0
	196 Move X0, X19
	197 Call 0x1C17DEC
	198 Call 0x1C17F28
	199 Call 0x1C17F44
	200 Move X1, X31
	201 Call 0x1C17DEC
	202 Call 0x1C17F20

Method: System.Void HandleStatusCode(POpusCodec.Enums.OpusStatusCode statusCode, System.Object[] info)

Disassembly:
	0x0355461C ADD X13, X1, X8, 0x1, LSL
	0x03554620 ADD X8, X8, 0x2
	0x03554624 FMUL S1, S1, S0
	0x03554628 FCVTZS W14, S1
	0x0355462C FCMP S1, S2
	0x03554630 CSEL W14, W31, W14, EQ
	0x03554634 CMP X11, X8
	0x03554638 ADD W9, W9, W10
	0x0355463C STRH W14, [X13 + 0x22]
	0x03554640 B.NE 0x35545B0
	0x03554644 B 0x355475C
	0x03554648 CMP W2, 0x1
	0x0355464C B.LT 0x355475C
	0x03554650 CBZ X0, 0x3554768
	0x03554654 ADRP X11, 0xFFFFFFFFFD596000
	0x03554658 LDR W10, [X0 + 0x18]
	0x0355465C LDR V0, [X11 + 0x374]
	0x03554660 MOV W8, W31
	0x03554664 MOV X9, X31
	0x03554668 MOV W11, W2
	0x0355466C ADD X12, X1, 0x20
	0x03554670 MOVZ W13, 0x7F800000
	0x03554674 SDIV W14, W8, W11
	0x03554678 CMP W14, W10
	0x0355467C B.CS 0x3554764
	0x03554680 CBZ X1, 0x3554768
	0x03554684 LDR W15, [X1 + 0x18]
	0x03554688 CMP X9, X15
	0x0355468C B.CS 0x3554764
	0x03554690 ADD X14, X0, W14, 0x2, SXTW
	0x03554694 LDR V1, [X14 + 0x20]
	0x03554698 FMOV S2, W13
	0x0355469C ADD W8, W8, W10
	0x035546A0 FMUL S1, S1, S0
	0x035546A4 FCVTZS W14, S1
	0x035546A8 FCMP S1, S2
	0x035546AC CSEL W14, W31, W14, EQ
	0x035546B0 STRH W14, [X12, X9, LSL #1]
	0x035546B4 ADD X9, X9, 0x1
	0x035546B8 CMP X11, X9
	0x035546BC B.NE 0x3554674
	0x035546C0 B 0x355475C
	0x035546C4 SDIV W8, W2, W3
	0x035546C8 CMP W8, 0x1
	0x035546CC B.LT 0x355475C
	0x035546D0 CBZ X0, 0x3554768
	0x035546D4 ADRP X11, 0xFFFFFFFFFD596000
	0x035546D8 LDR W10, [X0 + 0x18]
	0x035546DC LDR V0, [X11 + 0x374]
	0x035546E0 MOV W9, W31
	0x035546E4 MOVZ W11, 0x7F800000
	0x035546E8 CMP W3, 0x1
	0x035546EC B.LT 0x3554750
	0x035546F0 MUL W12, W9, W10
	0x035546F4 SDIV W12, W12, W2
	0x035546F8 MUL W13, W12, W3
	0x035546FC MUL W14, W9, W3
	0x03554700 MOV W12, W3
	0x03554704 CMP W13, W10
	0x03554708 B.CS 0x3554764
	0x0355470C CBZ X1, 0x3554768
	0x03554710 LDR W15, [X1 + 0x18]
	0x03554714 CMP W14, W15
	0x03554718 B.CS 0x3554764
	0x0355471C ADD X15, X0, W13, 0x2, SXTW
	0x03554720 LDR V1, [X15 + 0x20]
	0x03554724 FMOV S2, W11
	0x03554728 ADD X15, X1, W14, 0x1, SXTW
	0x0355472C ADD W14, W14, 0x1
	0x03554730 FMUL S1, S1, S0
	0x03554734 FCVTZS W16, S1
	0x03554738 FCMP S1, S2
	0x0355473C ADD W13, W13, 0x1
	0x03554740 CSEL W16, W31, W16, EQ
	0x03554744 SUBS W12, W12, 0x1
	0x03554748 STRH W16, [X15 + 0x20]
	0x0355474C B.NE 0x3554704
	0x03554750 ADD W9, W9, 0x1
	0x03554754 CMP W9, W8
	0x03554758 B.NE 0x35546E8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xE8C000
	008 Move W8, [X21+3434]
	009 Move X20, X1
	010 Move W19, W0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xBA9000
	016 Move X0, [X0+2440]
	017 Call 0x1C17CF4
	018 Move X0, 0xBA0000
	019 Move X0, [X0+2440]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3434], W8
	023 Compare W19, 0
	024 JumpIfNotEqual {32}
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X22, [X31+16]
	028 Move X21, [X31+24]
	029 Move X30, [X31+48]
	030 Move X23, [X31+56]
	031 Return 
	032 Compare X20, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17F20
	035 Move X9, 0xBA0000
	036 Move W8, [X20+24]
	037 Move X9, [X9+2440]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X21, [X9]
	040 Move X23, 0xBA9000
	041 Move X23, [X23+2440]
	042 Move W22, W31
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Add X8, X20, W22
	045 Move X0, [X8+32]
	046 Compare X0, 0
	047 JumpIfEqual {34}
	048 Move X8, [X0]
	049 Move X9, [X8+360]
	050 Move X1, [X8+368]
	051 NotImplemented "Instruction BLR not yet implemented."
	052 Move X2, [X23]
	053 Move X1, X0
	054 Move X0, X21
	055 Move X3, X31
	056 Call String.Concat, X0, X1, X2
	057 Move W8, [X20+24]
	058 Add W22, W22, 1
	059 Move X21, X0
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move W0, W19
	062 Call Wrapper.opus_strerror, X0
	063 Move X20, X0
	064 Move X0, 0xBC8000
	065 Move X0, [X0+2128]
	066 Call 0x1C17D08
	067 Call 0x19913D0
	068 Move X0, X20
	069 Move X1, X31
	070 Call Marshal.PtrToStringAnsi, X0
	071 Move X1, X0
	072 Move X0, X21
	073 Move X2, X31
	074 Call String.Concat, X0, X1
	075 Move X20, X0
	076 Move X0, 0xBC9000
	077 Move X0, [X0+3568]
	078 Call 0x1C17D08
	079 Call 0x1C17F10
	080 Move W1, W19
	081 Move X2, X20
	082 Move X21, X0
	083 Call OpusException..ctor, X0, X1, X2
	084 Move X0, 0xBE2000
	085 Move X0, [X0+736]
	086 Call 0x1C17D08
	087 Move X1, X0
	088 Move X0, X21
	089 Call 0x1C17DEC
	090 Call 0x1C17F28

Method: System.Void .ctor()

Disassembly:
	0x03555390 STR X8, [X31 + 0x20]
	0x03555394 STP V1, V0, [X31]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

