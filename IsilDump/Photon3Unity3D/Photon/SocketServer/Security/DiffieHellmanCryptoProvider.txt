Type: Photon.SocketServer.Security.DiffieHellmanCryptoProvider

Method: System.Void .ctor()

Disassembly:
	0x0352BBC0 BL 0x1C16D6C
	0x0352BBC4 STR X0, [X19 + 0x10]
	0x0352BBC8 STR W31, [X19 + 0x18]
	0x0352BBCC CBZ X20, 0x352BC6C
	0x0352BBD0 MOV W8, W31
	0x0352BBD4 MOV X9, X20
	0x0352BBD8 CMP W8, 0x45
	0x0352BBDC B.GT 0x352BC2C
	0x0352BBE0 CBZ X0, 0x352BC88
	0x0352BBE4 LDR W10, [X0 + 0x18]
	0x0352BBE8 CMP W8, W10
	0x0352BBEC B.CS 0x352BC84
	0x0352BBF0 ADD X8, X0, W8, 0x2, SXTW
	0x0352BBF4 STR W9, [X8 + 0x20]
	0x0352BBF8 LDR W8, [X19 + 0x18]
	0x0352BBFC SBFM X9, X9, 0x20, 0x3F
	0x0352BC00 ADD W8, W8, 0x1
	0x0352BC04 STR W8, [X19 + 0x18]
	0x0352BC08 CBNZ X9, 0x352BBD8
	0x0352BC0C CMP X20, 0x0
	0x0352BC10 B.LE 0x352BC64
	0x0352BC14 LDR W9, [X0 + 0x18]
	0x0352BC18 CMP W9, 0x45
	0x0352BC1C B.LS 0x352BC84
	0x0352BC20 LDR W9, [X0 + 0x134]
	0x0352BC24 TBZ X9, 0x1F, 0x352BC68
	0x0352BC28 B 0x352BC8C
	0x0352BC2C CMP X20, 0x0
	0x0352BC30 B.GT 0x352BC8C
	0x0352BC34 TBZ X20, 0x0, 0x352BC74
	0x0352BC38 ADDS X31, X9, 0x1
	0x0352BC3C B.NE 0x352BCAC
	0x0352BC40 CBZ X0, 0x352BC88
	0x0352BC44 LDR W9, [X0 + 0x18]
	0x0352BC48 SUB W8, W8, 0x1
	0x0352BC4C CMP W8, W9
	0x0352BC50 B.CS 0x352BC84
	0x0352BC54 ADD X8, X0, W8, 0x2, UXTW
	0x0352BC58 LDR W8, [X8 + 0x20]
	0x0352BC5C TBNZ X8, 0x1F, 0x352BC74
	0x0352BC60 B 0x352BCAC

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xEB5000
	007 Move X20, 0xC0A000
	008 Move W8, [X21+2931]
	009 Move X20, [X20+2360]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xC0A000
	016 Move X0, [X0+2360]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+2931], W8
	020 Move X0, X19
	021 Move X1, X31
	022 Call Object..ctor, X0
	023 Move X0, [X20]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X20]
	029 Move X8, [X0+184]
	030 Add X0, X31, 0
	031 Move X2, X31
	032 Move X1, [X8+8]
	033 Move [X31], X31
	034 Move [X31+8], X31
	035 Call BigInteger..ctor, X0, X1
	036 Move V0, [X31]
	037 Move W1, 160
	038 Move X0, X19
	039 Move [X19+1], V0
	040 Call DiffieHellmanCryptoProvider.GenerateRandomSecret, X0, X1
	041 Move [X19+32], X0
	042 Move [X19+40], X1
	043 Move X0, X19
	044 Call DiffieHellmanCryptoProvider.CalculatePublicKey, X0
	045 Move [X19+48], X0
	046 Move [X19+56], X1
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X30, [X31+16]
	050 Move X21, [X31+24]
	051 Add X31, X31, 48
	052 Return 

Method: System.Void .ctor(System.Byte[] cryptoKey)

Disassembly:
	0x0352BE94 LDR W9, [X11 + 0x18]
	0x0352BE98 MOV X8, X31
	0x0352BE9C ADD X10, X0, 0x20
	0x0352BEA0 ADD X11, X11, 0x20
	0x0352BEA4 CMP X8, X9
	0x0352BEA8 B.CS 0x352BEE4
	0x0352BEAC CBZ X0, 0x352BEE8
	0x0352BEB0 LDR W12, [X0 + 0x18]
	0x0352BEB4 CMP X8, X12
	0x0352BEB8 B.CS 0x352BEE4
	0x0352BEBC LDR W12, [X11, X8, LSL #2]
	0x0352BEC0 STR W12, [X10, X8, LSL #2]
	0x0352BEC4 LDRSW X12, [X19 + 0x18]
	0x0352BEC8 ADD X8, X8, 0x1
	0x0352BECC CMP X8, X12
	0x0352BED0 B.LT 0x352BEA4
	0x0352BED4 LDP X20, X19, [X31 + 0x20]
	0x0352BED8 LDP X22, X21, [X31 + 0x10]
	0x0352BEDC LDR X30, [X31], #0x30
	0x0352BEE0 RET
	0x0352BEE4 BL 0x1C16F28
	0x0352BEE8 BL 0x1C16F20
	0x0352BEEC STR X30, [X31 - 0x60]!
	0x0352BEF0 STP X28, X27, [X31 + 0x10]
	0x0352BEF4 STP X26, X25, [X31 + 0x20]
	0x0352BEF8 STP X24, X23, [X31 + 0x30]
	0x0352BEFC STP X22, X21, [X31 + 0x40]
	0x0352BF00 STP X20, X19, [X31 + 0x50]
	0x0352BF04 ADRP X20, 0xEB4000
	0x0352BF08 ADRP X26, 0xC09000
	0x0352BF0C LDRB W8, [X20 + 0xB85]
	0x0352BF10 LDR X26, [X26 + 0x980]
	0x0352BF14 MOV W21, W2
	0x0352BF18 MOV X23, X1
	0x0352BF1C MOV X19, X0
	0x0352BF20 TBNZ X8, 0x0, 0x352BF44
	0x0352BF24 ADRP X0, 0xC09000
	0x0352BF28 LDR X0, [X0 + 0x980]
	0x0352BF2C BL 0x1C16CF4
	0x0352BF30 ADRP X0, 0xBF1000
	0x0352BF34 LDR X0, [X0 + 0xD08]
	0x0352BF38 BL 0x1C16CF4
	0x0352BF3C MOVZ W8, 0x1
	0x0352BF40 STRB W8, [X20 + 0xB85]
	0x0352BF44 MOV X0, X19
	0x0352BF48 MOV X1, X31
	0x0352BF4C STR X31, [X19 + 0x10]
	0x0352BF50 BL 0x33BDD8C
	0x0352BF54 LDR X0, [X26]
	0x0352BF58 BL 0x1C16F10
	0x0352BF5C MOVZ W1, 0x1
	0x0352BF60 MOV X22, X0
	0x0352BF64 BL 0x352BB6C
	0x0352BF68 LDR X0, [X26]
	0x0352BF6C BL 0x1C16F10
	0x0352BF70 MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xEB5000
	007 Move X21, 0xBF9000
	008 Move W8, [X22+2932]
	009 Move X21, [X21+1184]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xBC9000
	017 Move X0, [X0+1560]
	018 Call 0x1C17CF4
	019 Move X0, 0xBF9000
	020 Move X0, [X0+1184]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2932], W8
	024 Move X0, X19
	025 Move X1, X31
	026 Call Object..ctor, X0
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X1, X31
	030 Move X21, X0
	031 Call RijndaelManaged..ctor, X0
	032 Move [X19+64], X21
	033 Compare X21, 0
	034 JumpIfEqual {68}
	035 Move X8, [X21]
	036 Move X22, 0xBC9000
	037 Move X0, X21
	038 Move X1, X20
	039 Move X9, [X8+504]
	040 Move X2, [X8+512]
	041 Move X22, [X22+1560]
	042 NotImplemented "Instruction BLR not yet implemented."
	043 Move X0, [X22]
	044 Move X20, [X19+64]
	045 Move W1, 16
	046 Call 0x1C17D6C
	047 Compare X20, 0
	048 JumpIfEqual {68}
	049 Move X8, [X20]
	050 Move X1, X0
	051 Move X0, X20
	052 Move X9, [X8+472]
	053 Move X2, [X8+480]
	054 NotImplemented "Instruction BLR not yet implemented."
	055 Move X0, [X19+64]
	056 Compare X0, 0
	057 JumpIfEqual {68}
	058 Move X8, [X0]
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X22, [X31+16]
	062 Move X21, [X31+24]
	063 Move W1, 2
	064 Move X3, [X8+616]
	065 Move X2, [X8+624]
	066 Move X30, [X31+48]
	067 CallNoReturn X3
	068 Call 0x1C17F20

Method: System.Boolean get_IsInitialized()

Disassembly:
	0x0352BF74 BL 0x352BB04
	0x0352BF78 CBZ X23, 0x352C18C
	0x0352BF7C MOV X0, X23
	0x0352BF80 MOV X1, X31

ISIL:
	001 Move X8, [X0+64]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Byte[] get_PublicKey()

Disassembly:
	0x0352BF84 BL 0x322B760
	0x0352BF88 CBZ X0, 0x352C18C
	0x0352BF8C MOV X1, X31
	0x0352BF90 BL 0x322B8DC
	0x0352BF94 CBZ X0, 0x352C18C
	0x0352BF98 MOV W1, W31
	0x0352BF9C MOV X2, X31
	0x0352BFA0 MOV X23, X0
	0x0352BFA4 BL 0x3222A1C
	0x0352BFA8 LDR W8, [X23 + 0x10]
	0x0352BFAC AND W9, W0, 0xFFFF
	0x0352BFB0 CMP W9, 0x2D
	0x0352BFB4 CSET W27, EQ
	0x0352BFB8 SUB W24, W8, 0x1
	0x0352BFBC CMP W24, W27
	0x0352BFC0 B.GE 0x352C020
	0x0352BFC4 MOV X0, X23
	0x0352BFC8 MOV W1, W31
	0x0352BFCC MOV X2, X31
	0x0352BFD0 BL 0x3222A1C
	0x0352BFD4 CBZ X20, 0x352C18C
	0x0352BFD8 LDR X8, [X20 + 0x10]
	0x0352BFDC CBZ X8, 0x352C18C
	0x0352BFE0 LDR W9, [X8 + 0x18]
	0x0352BFE4 CMP W9, 0x45
	0x0352BFE8 B.LS 0x352C188
	0x0352BFEC LDR W8, [X8 + 0x134]
	0x0352BFF0 AND W9, W0, 0xFFFF
	0x0352BFF4 CMP W9, 0x2D

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xEB5000
	007 Move X20, 0xC0A000
	008 Move W8, [X21+2933]
	009 Move X20, [X20+2368]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xC0A000
	016 Move X0, [X0+2368]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+2933], W8
	020 Move V0, [X19+3]
	021 Move X0, [X20]
	022 Move [X31], V0
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Add X0, X31, 0
	028 Move X1, X31
	029 Call BigInteger.ToByteArray, X0
	030 Move X1, X0
	031 Call DiffieHellmanCryptoProvider.MsBigIntArrayToPhotonBigIntArray, X0, X1
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X30, [X31+16]
	035 Move X21, [X31+24]
	036 Add X31, X31, 48
	037 Return X0

Method: System.Void DeriveSharedKey(System.Byte[] otherPartyPublicKey)

Disassembly:
	0x0352C098 BL 0x1C16DFC
	0x0352C09C MOV W0, W25
	0x0352C0A0 BL 0x352C1F8
	0x0352C0A4 MOV X1, X0
	0x0352C0A8 MOV X0, X22
	0x0352C0AC BL 0x352C250
	0x0352C0B0 MOV X1, X0
	0x0352C0B4 MOV X0, X20
	0x0352C0B8 BL 0x352C728
	0x0352C0BC SUB W24, W24, 0x1
	0x0352C0C0 CMP W24, W27
	0x0352C0C4 MOV X20, X0
	0x0352C0C8 B.LT 0x352BFC4
	0x0352C0CC LDR X0, [X26]
	0x0352C0D0 LDR W8, [X0 + 0xE0]
	0x0352C0D4 CBNZ W8, 0x352C0DC
	0x0352C0D8 BL 0x1C16DFC
	0x0352C0DC MOV W0, W21
	0x0352C0E0 BL 0x352C1F8
	0x0352C0E4 MOV X1, X0
	0x0352C0E8 MOV X0, X22
	0x0352C0EC BL 0x352C250
	0x0352C0F0 MOV X22, X0
	0x0352C0F4 B 0x352C028
	0x0352C0F8 TBNZ X8, 0x1F, 0x352C1D8
	0x0352C0FC ADRP X8, 0xBF0000
	0x0352C100 LDR X8, [X8 + 0xD08]
	0x0352C104 MOVZ W1, 0x46
	0x0352C108 LDR X0, [X8]
	0x0352C10C BL 0x1C16D6C
	0x0352C110 STR X0, [X19 + 0x10]
	0x0352C114 LDR W12, [X20 + 0x18]
	0x0352C118 CMP W12, 0x1
	0x0352C11C B.LT 0x352C168
	0x0352C120 LDR X11, [X20 + 0x10]
	0x0352C124 CBZ X11, 0x352C18C
	0x0352C128 LDR W9, [X11 + 0x18]
	0x0352C12C MOV X8, X31
	0x0352C130 ADD X10, X0, 0x20
	0x0352C134 ADD X11, X11, 0x20
	0x0352C138 CMP X8, X9
	0x0352C13C B.CS 0x352C188
	0x0352C140 CBZ X0, 0x352C18C
	0x0352C144 LDR W12, [X0 + 0x18]
	0x0352C148 CMP X8, X12
	0x0352C14C B.CS 0x352C188
	0x0352C150 LDR W12, [X11, X8, LSL #2]
	0x0352C154 STR W12, [X10, X8, LSL #2]
	0x0352C158 LDRSW X12, [X20 + 0x18]
	0x0352C15C ADD X8, X8, 0x1
	0x0352C160 CMP X8, X12
	0x0352C164 B.LT 0x352C138
	0x0352C168 STR W12, [X19 + 0x18]
	0x0352C16C LDP X20, X19, [X31 + 0x50]
	0x0352C170 LDP X22, X21, [X31 + 0x40]
	0x0352C174 LDP X24, X23, [X31 + 0x30]
	0x0352C178 LDP X26, X25, [X31 + 0x20]
	0x0352C17C LDP X28, X27, [X31 + 0x10]
	0x0352C180 LDR X30, [X31], #0x60
	0x0352C184 RET
	0x0352C188 BL 0x1C16F28
	0x0352C18C BL 0x1C16F20
	0x0352C190 ADRP X0, 0xBF5000
	0x0352C194 LDR X0, [X0 + 0x560]
	0x0352C198 BL 0x1C16D08
	0x0352C19C BL 0x1C16F10
	0x0352C1A0 MOV X19, X0
	0x0352C1A4 ADRP X0, 0xC08000
	0x0352C1A8 LDR X0, [X0 + 0x988]
	0x0352C1AC BL 0x1C16D08
	0x0352C1B0 MOV X1, X0
	0x0352C1B4 MOV X0, X19
	0x0352C1B8 MOV X2, X31
	0x0352C1BC BL 0x3316338
	0x0352C1C0 ADRP X0, 0xC08000
	0x0352C1C4 LDR X0, [X0 + 0x990]
	0x0352C1C8 BL 0x1C16D08
	0x0352C1CC MOV X1, X0
	0x0352C1D0 MOV X0, X19
	0x0352C1D4 BL 0x1C16DEC
	0x0352C1D8 ADRP X0, 0xBF5000
	0x0352C1DC LDR X0, [X0 + 0x560]
	0x0352C1E0 BL 0x1C16D08
	0x0352C1E4 BL 0x1C16F10
	0x0352C1E8 MOV X19, X0
	0x0352C1EC ADRP X0, 0xC08000
	0x0352C1F0 LDR X0, [X0 + 0x960]
	0x0352C1F4 B 0x352C1AC
	0x0352C1F8 STP X30, X21, [X31 - 0x20]!
	0x0352C1FC STP X20, X19, [X31 + 0x10]
	0x0352C200 ADRP X20, 0xEB3000
	0x0352C204 ADRP X21, 0xC08000
	0x0352C208 LDRB W8, [X20 + 0xB8B]
	0x0352C20C LDR X21, [X21 + 0x980]
	0x0352C210 MOV W19, W0
	0x0352C214 TBNZ X8, 0x0, 0x352C22C
	0x0352C218 ADRP X0, 0xC08000
	0x0352C21C LDR X0, [X0 + 0x980]
	0x0352C220 BL 0x1C16CF4
	0x0352C224 MOVZ W8, 0x1
	0x0352C228 STRB W8, [X20 + 0xB8B]
	0x0352C22C LDR X0, [X21]
	0x0352C230 BL 0x1C16F10
	0x0352C234 SXTW X1, W19
	0x0352C238 MOV X20, X0
	0x0352C23C BL 0x352BB6C
	0x0352C240 MOV X0, X20
	0x0352C244 LDP X20, X19, [X31 + 0x10]
	0x0352C248 LDP X30, X21, [X31], #0x20
	0x0352C24C RET
	0x0352C250 STR X30, [X31 - 0x40]!
	0x0352C254 STP X24, X23, [X31 + 0x10]
	0x0352C258 STP X22, X21, [X31 + 0x20]
	0x0352C25C STP X20, X19, [X31 + 0x30]
	0x0352C260 ADRP X21, 0xEB3000
	0x0352C264 LDRB W8, [X21 + 0xB91]
	0x0352C268 MOV X19, X1
	0x0352C26C MOV X20, X0
	0x0352C270 TBNZ X8, 0x0, 0x352C288
	0x0352C274 ADRP X0, 0xC08000
	0x0352C278 LDR X0, [X0 + 0x980]
	0x0352C27C BL 0x1C16CF4
	0x0352C280 MOVZ W8, 0x1
	0x0352C284 STRB W8, [X21 + 0xB91]
	0x0352C288 ADRP X22, 0xC08000
	0x0352C28C LDR X22, [X22 + 0x980]
	0x0352C290 CBZ X20, 0x352C56C
	0x0352C294 LDR X8, [X20 + 0x10]
	0x0352C298 CBZ X8, 0x352C574
	0x0352C29C LDR W9, [X8 + 0x18]
	0x0352C2A0 CMP W9, 0x45
	0x0352C2A4 B.LS 0x352C578
	0x0352C2A8 LDR W21, [X8 + 0x134]
	0x0352C2AC TBZ X21, 0x1F, 0x352C2CC
	0x0352C2B0 LDR X0, [X22]
	0x0352C2B4 LDR W8, [X0 + 0xE0]
	0x0352C2B8 CBNZ W8, 0x352C2C0
	0x0352C2BC BL 0x1C16DFC
	0x0352C2C0 MOV X0, X20
	0x0352C2C4 BL 0x352D5D0
	0x0352C2C8 MOV X20, X0
	0x0352C2CC UBFM W23, W21, 0x1F, 0x1F
	0x0352C2D0 CBZ X19, 0x352C57C
	0x0352C2D4 LDR X8, [X19 + 0x10]
	0x0352C2D8 CBZ X8, 0x352C580
	0x0352C2DC LDR W9, [X8 + 0x18]
	0x0352C2E0 CMP W9, 0x45
	0x0352C2E4 B.LS 0x352C584
	0x0352C2E8 LDR W8, [X8 + 0x134]
	0x0352C2EC TBNZ X8, 0x1F, 0x352C2F8
	0x0352C2F0 MOV W24, W31
	0x0352C2F4 B 0x352C318
	0x0352C2F8 LDR X0, [X22]
	0x0352C2FC LDR W8, [X0 + 0xE0]
	0x0352C300 CBNZ W8, 0x352C308
	0x0352C304 BL 0x1C16DFC
	0x0352C308 MOV X0, X19
	0x0352C30C BL 0x352D5D0
	0x0352C310 MOVZ W24, 0x1
	0x0352C314 MOV X19, X0
	0x0352C318 LDR X0, [X22]
	0x0352C31C BL 0x1C16F10
	0x0352C320 MOV X21, X0
	0x0352C324 BL 0x352BB04
	0x0352C328 CBZ X20, 0x352C570
	0x0352C32C LDR W10, [X20 + 0x18]
	0x0352C330 CMP W10, 0x1
	0x0352C334 B.LT 0x352C41C
	0x0352C338 LDR X8, [X20 + 0x10]
	0x0352C33C MOV X9, X31
	0x0352C340 CBZ X8, 0x352C554
	0x0352C344 LDR W10, [X8 + 0x18]
	0x0352C348 CMP X9, X10
	0x0352C34C B.CS 0x352C550
	0x0352C350 ADD X11, X8, X9, 0x2, LSL
	0x0352C354 LDR W10, [X11 + 0x20]!

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X21, 0xEB4000
	009 Move X22, 0xC09000
	010 Move W8, [X21+2934]
	011 Move X22, [X22+2368]
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {35}
	018 Move X0, 0xC09000
	019 Move X0, [X0+2368]
	020 Call 0x1C17CF4
	021 Move X0, 0xBC8000
	022 Move X0, [X0+1560]
	023 Call 0x1C17CF4
	024 Move X0, 0xBC8000
	025 Move X0, [X0+3584]
	026 Call 0x1C17CF4
	027 Move X0, 0xBF8000
	028 Move X0, [X0+1184]
	029 Call 0x1C17CF4
	030 Move X0, 0xBF8000
	031 Move X0, [X0+192]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X21+2934], W8
	035 Move X21, 0xBF8000
	036 Move X21, [X21+192]
	037 Move X1, X20
	038 Move [X31+16], X31
	039 Move [X31+24], X31
	040 Move [X31], X31
	041 Move [X31+8], X31
	042 Call DiffieHellmanCryptoProvider.PhotonBigIntArrayToMsBigIntArray, X0, X1
	043 Move X8, [X22]
	044 Move X20, X0
	045 Move W9, [X8+224]
	046 Compare W9, 0
	047 JumpIfNotEqual {50}
	048 Move X0, X8
	049 Call 0x1C17DFC
	050 Move X23, 0xBC8000
	051 Move X23, [X23+3584]
	052 Add X0, X31, 16
	053 Move X1, X20
	054 Move X2, X31
	055 Call BigInteger..ctor, X0, X1
	056 Move X1, [X31+16]
	057 Move X2, [X31+24]
	058 Move X0, X19
	059 Call DiffieHellmanCryptoProvider.CalculateSharedKey, X0, X1
	060 Move [X31], X0
	061 Move [X31+8], X1
	062 Add X0, X31, 0
	063 Move X1, X31
	064 Call BigInteger.ToByteArray, X0
	065 Move X1, X0
	066 Call DiffieHellmanCryptoProvider.MsBigIntArrayToPhotonBigIntArray, X0, X1
	067 Move [X19+72], X0
	068 Move X0, [X21]
	069 Call 0x1C17F10
	070 Move X1, X31
	071 Move X20, X0
	072 Call SHA256Managed..ctor, X0
	073 Compare X20, 0
	074 JumpIfEqual {151}
	075 Move X1, [X19+72]
	076 Move X0, X20
	077 Move X2, X31
	078 Call HashAlgorithm.ComputeHash, X0, X1
	079 Move X22, X0
	080 Move X21, X31
	081 Move X8, [X20]
	082 Move X1, [X23]
	083 NotImplemented "Instruction LDRH not yet implemented."
	084 Compare X9, 0
	085 JumpIfEqual {92}
	086 Move X10, [X8+176]
	087 Add X10, X10, 8
	088 NotImplemented "Instruction LDUR not yet implemented."
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Subtract X9, X9, 1
	091 Add X10, X10, 16
	092 Move X0, X20
	093 Move W2, W31
	094 Call 0x1C5D788
	095 NotImplemented "Instruction LDRSW not yet implemented."
	096 Add X8, X8, X9
	097 Add X0, X8, 312
	098 Move X8, [X0]
	099 Move X1, [X0+8]
	100 Move X0, X20
	101 NotImplemented "Instruction BLR not yet implemented."
	102 Compare X21, 0
	103 JumpIfNotEqual {152}
	104 Move X8, 0xBF8000
	105 Move X8, [X8+1184]
	106 Move X0, [X8]
	107 Call 0x1C17F10
	108 Move X1, X31
	109 Move X20, X0
	110 Call RijndaelManaged..ctor, X0
	111 Move [X19+64], X20
	112 Compare X20, 0
	113 JumpIfEqual {150}
	114 Move X8, [X20]
	115 Move X21, 0xBC8000
	116 Move X0, X20
	117 Move X1, X22
	118 Move X9, [X8+504]
	119 Move X2, [X8+512]
	120 Move X21, [X21+1560]
	121 NotImplemented "Instruction BLR not yet implemented."
	122 Move X0, [X21]
	123 Move X20, [X19+64]
	124 Move W1, 16
	125 Call 0x1C17D6C
	126 Compare X20, 0
	127 JumpIfEqual {150}
	128 Move X8, [X20]
	129 Move X1, X0
	130 Move X0, X20
	131 Move X9, [X8+472]
	132 Move X2, [X8+480]
	133 NotImplemented "Instruction BLR not yet implemented."
	134 Move X0, [X19+64]
	135 Compare X0, 0
	136 JumpIfEqual {150}
	137 Move X8, [X0]
	138 Move W1, 2
	139 Move X9, [X8+616]
	140 Move X2, [X8+624]
	141 NotImplemented "Instruction BLR not yet implemented."
	142 Move X20, [X31+64]
	143 Move X19, [X31+72]
	144 Move X22, [X31+48]
	145 Move X21, [X31+56]
	146 Move X30, [X31+32]
	147 Move X23, [X31+40]
	148 Add X31, X31, 80
	149 Return 
	150 Call 0x1C17F20
	151 Call 0x1C17F20
	152 Move X0, X21
	153 Call 0x1C17F18
	154 Move X22, X0
	155 NotImplemented "Instruction CMP not yet implemented."
	156 Move X0, X22
	157 Call 0x3EB2AD0
	158 Move X21, [X0]
	159 Call 0x3EB2AE0
	160 Move X22, X31
	161 Compare X20, 0
	162 JumpIfNotEqual {81}
	163 Move X21, X31
	164 Move X22, X0
	165 Compare X20, 0
	166 JumpIfEqual {188}
	167 Move X8, [X20]
	168 Move X1, [X23]
	169 NotImplemented "Instruction LDRH not yet implemented."
	170 Compare X9, 0
	171 JumpIfEqual {178}
	172 Move X10, [X8+176]
	173 Add X10, X10, 8
	174 NotImplemented "Instruction LDUR not yet implemented."
	175 NotImplemented "Instruction CMP not yet implemented."
	176 Subtract X9, X9, 1
	177 Add X10, X10, 16
	178 Move X0, X20
	179 Move W2, W31
	180 Call 0x1C5D788
	181 NotImplemented "Instruction LDRSW not yet implemented."
	182 Add X8, X8, X9
	183 Add X0, X8, 312
	184 Move X8, [X0]
	185 Move X1, [X0+8]
	186 Move X0, X20
	187 NotImplemented "Instruction BLR not yet implemented."
	188 Compare X21, 0
	189 JumpIfNotEqual {192}
	190 Move X0, X22
	191 Call 0x1D2D690
	192 Move X0, X21
	193 Call 0x1C17F18
	194 Call 0x1991590

Method: System.Byte[] PhotonBigIntArrayToMsBigIntArray(System.Byte[] array)

Disassembly:
	0x0352C358 CBZ W10, 0x352C40C
	0x0352C35C CBZ X19, 0x352C55C
	0x0352C360 LDR W15, [X19 + 0x18]
	0x0352C364 CMP W15, 0x1
	0x0352C368 B.LT 0x352C3E0
	0x0352C36C LDR X13, [X19 + 0x10]
	0x0352C370 MOV X10, X31
	0x0352C374 MOV X12, X31
	0x0352C378 ADD X14, X13, 0x20
	0x0352C37C CBZ X13, 0x352C540
	0x0352C380 LDR W15, [X13 + 0x18]
	0x0352C384 CMP X12, X15
	0x0352C388 B.CS 0x352C548
	0x0352C38C CBZ X21, 0x352C53C
	0x0352C390 LDR X15, [X21 + 0x10]
	0x0352C394 CBZ X15, 0x352C544
	0x0352C398 LDR W17, [X15 + 0x18]
	0x0352C39C ADD X16, X9, X12
	0x0352C3A0 CMP W16, W17
	0x0352C3A4 B.CS 0x352C54C
	0x0352C3A8 LDR W17, [X11]
	0x0352C3AC LDR W0, [X14, X12, LSL #2]
	0x0352C3B0 ADD X15, X15, W16, 0x2, SXTW
	0x0352C3B4 LDR W16, [X15 + 0x20]
	0x0352C3B8 ADD X12, X12, 0x1
	0x0352C3BC MADD X10, X0, X17, X10
	0x0352C3C0 ADD X10, X10, X16
	0x0352C3C4 STR W10, [X15 + 0x20]
	0x0352C3C8 LDRSW X15, [X19 + 0x18]
	0x0352C3CC UBFM X10, X10, 0x20, 0x3F
	0x0352C3D0 CMP X12, X15
	0x0352C3D4 B.LT 0x352C37C
	0x0352C3D8 CBNZ X10, 0x352C3E8
	0x0352C3DC B 0x352C40C
	0x0352C3E0 MOV X10, X31
	0x0352C3E4 CBZ X10, 0x352C40C
	0x0352C3E8 CBZ X21, 0x352C560
	0x0352C3EC LDR X11, [X21 + 0x10]
	0x0352C3F0 CBZ X11, 0x352C568
	0x0352C3F4 LDR W13, [X11 + 0x18]
	0x0352C3F8 ADD W12, W15, W9

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xEB4000
	005 Move W8, [X20+2935]
	006 Move X19, X1
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xBC8000
	012 Move X0, [X0+1560]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2935], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Call Array.Reverse, X0
	019 Compare X19, 0
	020 JumpIfEqual {50}
	021 Move X8, [X19+24]
	022 Compare W8, 0
	023 JumpIfEqual {51}
	024 Subtract W9, W8, 1
	025 Add X9, X19, W9
	026 NotImplemented "Instruction INVALID not yet implemented."
	027 Move TEMP, X9
	028 And TEMP, TEMP, -2147483648
	029 Compare TEMP, -2147483648
	030 JumpIfNotEqual {45}
	031 Move X9, 0xBC8000
	032 Move X9, [X9+1560]
	033 Add W1, W8, 1
	034 Move X0, [X9]
	035 Call 0x1C17D6C
	036 Move W4, [X19+24]
	037 Move X20, X0
	038 Move X0, X19
	039 Move W1, W31
	040 Move X2, X20
	041 Move W3, W31
	042 Move X5, X31
	043 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	044 Move X19, X20
	045 Move X0, X19
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Return X0
	050 Call 0x1C17F20
	051 Call 0x1C17F28

Method: System.Byte[] MsBigIntArrayToPhotonBigIntArray(System.Byte[] array)

Disassembly:
	0x0352BFF8 B.NE 0x352C0F8
	0x0352BFFC TBNZ X8, 0x1F, 0x352C0FC
	0x0352C000 ADRP X0, 0xBF5000
	0x0352C004 LDR X0, [X0 + 0x560]
	0x0352C008 BL 0x1C16D08
	0x0352C00C BL 0x1C16F10
	0x0352C010 MOV X19, X0
	0x0352C014 ADRP X0, 0xC08000
	0x0352C018 LDR X0, [X0 + 0x968]
	0x0352C01C B 0x352C1AC
	0x0352C020 MOVZ W28, 0x967F
	0x0352C024 MOVK W28, 0x980000
	0x0352C028 MOV X0, X23
	0x0352C02C MOV W1, W24
	0x0352C030 MOV X2, X31
	0x0352C034 BL 0x3222A1C
	0x0352C038 SUB W8, W0, 0x30
	0x0352C03C AND W8, W8, 0xFFFF
	0x0352C040 CMP W8, 0x9
	0x0352C044 AND W8, W0, 0xFFFF
	0x0352C048 B.LS 0x352C060
	0x0352C04C SUB W9, W8, 0x41
	0x0352C050 SUB W8, W8, 0x37
	0x0352C054 CMP W9, 0x19
	0x0352C058 CSEL W25, W28, W8, HI
	0x0352C05C B 0x352C064
	0x0352C060 SUB W25, W8, 0x30
	0x0352C064 CMP W25, W21
	0x0352C068 B.GE 0x352C190
	0x0352C06C MOV X0, X23
	0x0352C070 MOV W1, W31
	0x0352C074 MOV X2, X31
	0x0352C078 BL 0x3222A1C
	0x0352C07C LDR X8, [X26]
	0x0352C080 AND W10, W0, 0xFFFF
	0x0352C084 CMP W10, 0x2D
	0x0352C088 CSNEG W25, W25, W25, NE
	0x0352C08C LDR W9, [X8 + 0xE0]
	0x0352C090 CBNZ W9, 0x352C09C
	0x0352C094 MOV X0, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xEB4000
	005 Move W8, [X20+2936]
	006 Move X19, X1
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xBC8000
	012 Move X0, [X0+1560]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2936], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Call Array.Reverse, X0
	019 Compare X19, 0
	020 JumpIfEqual {47}
	021 Move W8, [X19+24]
	022 Compare W8, 0
	023 JumpIfEqual {48}
	024 Move W9, [X19+32]
	025 Compare W9, 0
	026 JumpIfNotEqual {42}
	027 Move X9, 0xBC8000
	028 Move X9, [X9+1560]
	029 Subtract W1, W8, 1
	030 Move X0, [X9]
	031 Call 0x1C17D6C
	032 Move W8, [X19+24]
	033 Move X20, X0
	034 Move W1, 1
	035 Move X0, X19
	036 Subtract W4, W8, 1
	037 Move X2, X20
	038 Move W3, W31
	039 Move X5, X31
	040 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	041 Move X19, X20
	042 Move X0, X19
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Return X0
	047 Call 0x1C17F20
	048 Call 0x1C17F28

Method: System.Byte[] Encrypt(System.Byte[] data)

Disassembly:
	0x0352C488 MOV X9, X11
	0x0352C48C B.GE 0x352C45C
	0x0352C490 MOVZ W9, 0x1
	0x0352C494 LDR X10, [X8 + 0x18]
	0x0352C498 CMP W10, 0x45
	0x0352C49C B.LS 0x352C558
	0x0352C4A0 LDR W12, [X8 + 0x134]

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {7}
	004 Move W3, [X1+24]
	005 Move W2, W31
	006 Move X30, [X31+16]
	007 Call 0x1C17F20

Method: System.Byte[] Encrypt(System.Byte[] data, System.Int32 offset, System.Int32 count)

Disassembly:
	0x0352C4A4 EOR W11, W24, W23, 0x0
	0x0352C4A8 TBNZ X12, 0x1F, 0x352C4D8
	0x0352C4AC CBZ W11, 0x352C524
	0x0352C4B0 LDR X0, [X22]
	0x0352C4B4 LDR W8, [X0 + 0xE0]
	0x0352C4B8 CBNZ W8, 0x352C4C0
	0x0352C4BC BL 0x1C16DFC
	0x0352C4C0 MOV X0, X21
	0x0352C4C4 LDP X20, X19, [X31 + 0x30]
	0x0352C4C8 LDP X22, X21, [X31 + 0x20]
	0x0352C4CC LDP X24, X23, [X31 + 0x10]
	0x0352C4D0 LDR X30, [X31], #0x40
	0x0352C4D4 B 0x352D5D0
	0x0352C4D8 MOVZ W13, 0x80000000
	0x0352C4DC CMP W12, W13
	0x0352C4E0 B.NE 0x352C6AC
	0x0352C4E4 EOR W11, W11, 0x1
	0x0352C4E8 TBNZ X11, 0x0, 0x352C6AC
	0x0352C4EC SUBS W9, W9, 0x1
	0x0352C4F0 B.EQ 0x352C524
	0x0352C4F4 CMP W9, 0x1
	0x0352C4F8 B.LT 0x352C524
	0x0352C4FC MOV X11, X31
	0x0352C500 ADD X8, X8, 0x20
	0x0352C504 CMP W10, W11
	0x0352C508 B.EQ 0x352C558
	0x0352C50C LDR W12, [X8, X11, LSL #2]
	0x0352C510 ADD X11, X11, 0x1
	0x0352C514 CMP W11, W9
	0x0352C518 B.GE 0x352C520
	0x0352C51C CBZ W12, 0x352C504
	0x0352C520 CBNZ W12, 0x352C6AC
	0x0352C524 MOV X0, X21
	0x0352C528 LDP X20, X19, [X31 + 0x30]
	0x0352C52C LDP X22, X21, [X31 + 0x20]
	0x0352C530 LDP X24, X23, [X31 + 0x10]
	0x0352C534 LDR X30, [X31], #0x40
	0x0352C538 RET
	0x0352C53C BL 0x1C16F20
	0x0352C540 BL 0x1C16F20
	0x0352C544 BL 0x1C16F20
	0x0352C548 BL 0x1C16F28
	0x0352C54C BL 0x1C16F28
	0x0352C550 BL 0x1C16F28
	0x0352C554 BL 0x1C16F20
	0x0352C558 BL 0x1C16F28
	0x0352C55C BL 0x1C16F20
	0x0352C560 BL 0x1C16F20
	0x0352C564 BL 0x1C16F28
	0x0352C568 BL 0x1C16F20
	0x0352C56C BL 0x1C16F20
	0x0352C570 BL 0x1C16F20
	0x0352C574 BL 0x1C16F20
	0x0352C578 BL 0x1C16F28
	0x0352C57C BL 0x1C16F20
	0x0352C580 BL 0x1C16F20
	0x0352C584 BL 0x1C16F28
	0x0352C588 B 0x352C590
	0x0352C58C B 0x352C59C
	0x0352C590 MOV X21, X0
	0x0352C594 MOVZ W24, 0x1
	0x0352C598 B 0x352C5E8
	0x0352C59C MOV X21, X0
	0x0352C5A0 MOV W24, W31
	0x0352C5A4 MOVZ W23, 0x1
	0x0352C5A8 B 0x352C5E8
	0x0352C5AC B 0x352C5B4
	0x0352C5B0 B 0x352C5B4
	0x0352C5B4 MOV X21, X0
	0x0352C5B8 MOV W24, W31
	0x0352C5BC B 0x352C5E8
	0x0352C5C0 B 0x352C5C4
	0x0352C5C4 MOV X21, X0
	0x0352C5C8 MOV W24, W31
	0x0352C5CC MOV W23, W31
	0x0352C5D0 B 0x352C5E8
	0x0352C5D4 B 0x352C674
	0x0352C5D8 MOV X21, X0
	0x0352C5DC MOV W24, W31
	0x0352C5E0 MOV W23, W31
	0x0352C5E4 MOV X20, X31
	0x0352C5E8 CMP W1, 0x1
	0x0352C5EC B.NE 0x352C71C
	0x0352C5F0 MOV X0, X21
	0x0352C5F4 BL 0x3EB1AD0
	0x0352C5F8 MOV X21, X0
	0x0352C5FC ADRP X0, 0xBC7000
	0x0352C600 LDR X0, [X0 + 0x7D0]
	0x0352C604 BL 0x1C16D08
	0x0352C608 LDR X8, [X21]
	0x0352C60C LDR X1, [X8]
	0x0352C610 BL 0x1C17270
	0x0352C614 TBZ X0, 0x0, 0x352C620
	0x0352C618 BL 0x3EB1AE0
	0x0352C61C B 0x352C318
	0x0352C620 MOVZ W0, 0x8
	0x0352C624 BL 0x3EB1AF0
	0x0352C628 LDR X8, [X21]
	0x0352C62C STR X8, [X0]
	0x0352C630 ADRP X1, 0x988000
	0x0352C634 ADD X1, X1, 0xE58
	0x0352C638 MOV X2, X31
	0x0352C63C BL 0x3EB1B00
	0x0352C640 B 0x352C714
	0x0352C644 MOV X21, X0
	0x0352C648 BL 0x3EB1AE0
	0x0352C64C B 0x352C71C
	0x0352C650 B 0x352C674
	0x0352C654 B 0x352C674
	0x0352C658 B 0x352C674
	0x0352C65C B 0x352C674
	0x0352C660 B 0x352C674
	0x0352C664 B 0x352C674
	0x0352C668 B 0x352C674
	0x0352C66C B 0x352C674
	0x0352C670 B 0x352C674
	0x0352C674 MOV X21, X0
	0x0352C678 CMP W1, 0x1
	0x0352C67C B.NE 0x352C71C
	0x0352C680 MOV X0, X21
	0x0352C684 BL 0x3EB1AD0
	0x0352C688 MOV X19, X0
	0x0352C68C ADRP X0, 0xBC7000
	0x0352C690 LDR X0, [X0 + 0x7D0]
	0x0352C694 BL 0x1C16D08
	0x0352C698 LDR X8, [X19]
	0x0352C69C LDR X1, [X8]
	0x0352C6A0 BL 0x1C17270
	0x0352C6A4 TBZ X0, 0x0, 0x352C6F4
	0x0352C6A8 BL 0x3EB1AE0
	0x0352C6AC ADRP X0, 0xBF5000
	0x0352C6B0 LDR X0, [X0 + 0x560]
	0x0352C6B4 BL 0x1C16D08
	0x0352C6B8 BL 0x1C16F10

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xEB4000
	008 Move W8, [X23+2937]
	009 Move W20, W3
	010 Move W21, W2
	011 Move X22, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xBF5000
	018 Move X0, [X0+3744]
	019 Call 0x1C17CF4
	020 Move X0, 0xBC8000
	021 Move X0, [X0+3584]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+2937], W8
	025 Move X0, [X19+64]
	026 Compare X0, 0
	027 JumpIfEqual {99}
	028 Move X8, [X0]
	029 Move X23, 0xBC8000
	030 Move X9, [X8+632]
	031 Move X1, [X8+640]
	032 Move X23, [X23+3584]
	033 NotImplemented "Instruction BLR not yet implemented."
	034 Move X19, X0
	035 Compare X0, 0
	036 JumpIfEqual {100}
	037 Move X10, 0xBF5000
	038 Move X8, [X19]
	039 Move X10, [X10+3744]
	040 NotImplemented "Instruction LDRH not yet implemented."
	041 Move X1, [X10]
	042 Compare X9, 0
	043 JumpIfEqual {50}
	044 Move X10, [X8+176]
	045 Add X10, X10, 8
	046 NotImplemented "Instruction LDUR not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Subtract X9, X9, 1
	049 Add X10, X10, 16
	050 Move W2, 4
	051 Move X0, X19
	052 Call 0x1C5D788
	053 Move W9, [X10]
	054 Add W9, W9, 4
	055 Add X8, X8, W9
	056 Add X0, X8, 312
	057 Move X8, [X0]
	058 Move X4, [X0+8]
	059 Move X0, X19
	060 Move X1, X22
	061 Move W2, W21
	062 Move W3, W20
	063 NotImplemented "Instruction BLR not yet implemented."
	064 Move X21, X0
	065 Move X20, X31
	066 Compare X19, 0
	067 JumpIfEqual {89}
	068 Move X8, [X19]
	069 Move X1, [X23]
	070 NotImplemented "Instruction LDRH not yet implemented."
	071 Compare X9, 0
	072 JumpIfEqual {79}
	073 Move X10, [X8+176]
	074 Add X10, X10, 8
	075 NotImplemented "Instruction LDUR not yet implemented."
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Subtract X9, X9, 1
	078 Add X10, X10, 16
	079 Move X0, X19
	080 Move W2, W31
	081 Call 0x1C5D788
	082 NotImplemented "Instruction LDRSW not yet implemented."
	083 Add X8, X8, X9
	084 Add X0, X8, 312
	085 Move X8, [X0]
	086 Move X1, [X0+8]
	087 Move X0, X19
	088 NotImplemented "Instruction BLR not yet implemented."
	089 Compare X20, 0
	090 JumpIfNotEqual {101}
	091 Move X0, X21
	092 Move X20, [X31+32]
	093 Move X19, [X31+40]
	094 Move X22, [X31+16]
	095 Move X21, [X31+24]
	096 Move X30, [X31+48]
	097 Move X23, [X31+56]
	098 Return X0
	099 Call 0x1C17F20
	100 Call 0x1C17F20
	101 Move X0, X20
	102 Call 0x1C17F18
	103 Move X21, X0
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move X0, X21
	106 Call 0x3EB2AD0
	107 Move X20, [X0]
	108 Call 0x3EB2AE0
	109 Move X21, X31
	110 Compare X19, 0
	111 JumpIfNotEqual {68}
	112 Move X20, X31
	113 Move X21, X0
	114 Compare X19, 0
	115 JumpIfEqual {137}
	116 Move X8, [X19]
	117 Move X1, [X23]
	118 NotImplemented "Instruction LDRH not yet implemented."
	119 Compare X9, 0
	120 JumpIfEqual {127}
	121 Move X10, [X8+176]
	122 Add X10, X10, 8
	123 NotImplemented "Instruction LDUR not yet implemented."
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Subtract X9, X9, 1
	126 Add X10, X10, 16
	127 Move X0, X19
	128 Move W2, W31
	129 Call 0x1C5D788
	130 NotImplemented "Instruction LDRSW not yet implemented."
	131 Add X8, X8, X9
	132 Add X0, X8, 312
	133 Move X8, [X0]
	134 Move X1, [X0+8]
	135 Move X0, X19
	136 NotImplemented "Instruction BLR not yet implemented."
	137 Compare X20, 0
	138 JumpIfNotEqual {141}
	139 Move X0, X21
	140 Call 0x1D2D690
	141 Move X0, X20
	142 Call 0x1C17F18
	143 Call 0x1991590

Method: System.Byte[] Decrypt(System.Byte[] data)

Disassembly:
	0x0352C6BC MOV X19, X0
	0x0352C6C0 ADRP X0, 0xC08000
	0x0352C6C4 LDR X0, [X0 + 0x998]
	0x0352C6C8 BL 0x1C16D08
	0x0352C6CC MOV X1, X0
	0x0352C6D0 MOV X0, X19
	0x0352C6D4 MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {7}
	004 Move W3, [X1+24]
	005 Move W2, W31
	006 Move X30, [X31+16]
	007 Call 0x1C17F20

Method: System.Byte[] Decrypt(System.Byte[] data, System.Int32 offset, System.Int32 count)

Disassembly:
	0x0352C6D8 BL 0x3316338
	0x0352C6DC ADRP X0, 0xC08000
	0x0352C6E0 LDR X0, [X0 + 0x9A0]
	0x0352C6E4 BL 0x1C16D08
	0x0352C6E8 MOV X1, X0
	0x0352C6EC MOV X0, X19
	0x0352C6F0 BL 0x1C16DEC
	0x0352C6F4 MOVZ W0, 0x8
	0x0352C6F8 BL 0x3EB1AF0
	0x0352C6FC LDR X8, [X19]
	0x0352C700 STR X8, [X0]
	0x0352C704 ADRP X1, 0x988000
	0x0352C708 ADD X1, X1, 0xE58
	0x0352C70C MOV X2, X31
	0x0352C710 BL 0x3EB1B00
	0x0352C714 MOV X21, X0
	0x0352C718 BL 0x3EB1AE0
	0x0352C71C MOV X0, X21
	0x0352C720 BL 0x1D2C690
	0x0352C724 BL 0x1990590
	0x0352C728 STR X30, [X31 - 0x30]!
	0x0352C72C STP X22, X21, [X31 + 0x10]
	0x0352C730 STP X20, X19, [X31 + 0x20]
	0x0352C734 ADRP X19, 0xEB3000
	0x0352C738 ADRP X22, 0xC08000
	0x0352C73C LDRB W8, [X19 + 0xB8D]
	0x0352C740 LDR X22, [X22 + 0x980]
	0x0352C744 MOV X20, X1
	0x0352C748 MOV X21, X0
	0x0352C74C TBNZ X8, 0x0, 0x352C764
	0x0352C750 ADRP X0, 0xC08000
	0x0352C754 LDR X0, [X0 + 0x980]
	0x0352C758 BL 0x1C16CF4
	0x0352C75C MOVZ W8, 0x1
	0x0352C760 STRB W8, [X19 + 0xB8D]
	0x0352C764 LDR X0, [X22]
	0x0352C768 BL 0x1C16F10
	0x0352C76C MOV X19, X0
	0x0352C770 BL 0x352BB04
	0x0352C774 CBZ X21, 0x352C904
	0x0352C778 CBZ X20, 0x352C904
	0x0352C77C CBZ X19, 0x352C904
	0x0352C780 LDR W8, [X21 + 0x18]
	0x0352C784 LDR W9, [X20 + 0x18]
	0x0352C788 CMP W8, W9
	0x0352C78C CSEL W8, W8, W9, GT
	0x0352C790 CMP W8, 0x1
	0x0352C794 STR W8, [X19 + 0x18]
	0x0352C798 B.LT 0x352C894
	0x0352C79C LDR X8, [X21 + 0x10]
	0x0352C7A0 CBZ X8, 0x352C904
	0x0352C7A4 LDR W9, [X8 + 0x18]
	0x0352C7A8 MOV X11, X31
	0x0352C7AC MOVZ W10, 0x8
	0x0352C7B0 SUB X13, X10, 0x8
	0x0352C7B4 CMP X13, X9
	0x0352C7B8 B.CS 0x352C900
	0x0352C7BC LDR X12, [X20 + 0x10]
	0x0352C7C0 CBZ X12, 0x352C904
	0x0352C7C4 LDR W14, [X12 + 0x18]
	0x0352C7C8 CMP X13, X14
	0x0352C7CC B.CS 0x352C900
	0x0352C7D0 LDR X14, [X19 + 0x10]
	0x0352C7D4 CBZ X14, 0x352C904
	0x0352C7D8 LDR W15, [X14 + 0x18]
	0x0352C7DC CMP X13, X15
	0x0352C7E0 B.CS 0x352C900
	0x0352C7E4 LDR W13, [X8, X10, LSL #2]
	0x0352C7E8 LDR W12, [X12, X10, LSL #2]
	0x0352C7EC ADD X11, X11, X13
	0x0352C7F0 ADD X13, X11, X12
	0x0352C7F4 STR W13, [X14, X10, LSL #2]
	0x0352C7F8 LDR W12, [X19 + 0x18]
	0x0352C7FC SUB X11, X10, 0x7
	0x0352C800 ADD X10, X10, 0x1
	0x0352C804 CMP X11, W12, SXTW
	0x0352C808 SBFM X11, X13, 0x20, 0x3F
	0x0352C80C B.LT 0x352C7B0
	0x0352C810 CBZ X11, 0x352C84C
	0x0352C814 CMP W12, 0x45
	0x0352C818 B.GT 0x352C84C
	0x0352C81C LDR X8, [X19 + 0x10]
	0x0352C820 CBZ X8, 0x352C904
	0x0352C824 LDR W9, [X8 + 0x18]
	0x0352C828 CMP W12, W9
	0x0352C82C B.CS 0x352C900
	0x0352C830 SXTW X9, W12
	0x0352C834 UBFM X10, X13, 0x20, 0x3F
	0x0352C838 ADD X8, X8, X9, 0x2, LSL
	0x0352C83C STR W10, [X8 + 0x20]
	0x0352C840 LDR W8, [X19 + 0x18]
	0x0352C844 ADD W12, W8, 0x1
	0x0352C848 STR W12, [X19 + 0x18]
	0x0352C84C CMP W12, 0x2
	0x0352C850 B.LT 0x352C894
	0x0352C854 LDR X9, [X19 + 0x10]
	0x0352C858 CBZ X9, 0x352C904
	0x0352C85C LDR W8, [X9 + 0x18]
	0x0352C860 MOV W10, W12
	0x0352C864 ADD X9, X9, 0x1C
	0x0352C868 SUB X11, X10, 0x1
	0x0352C86C CMP X11, X8
	0x0352C870 B.CS 0x352C900
	0x0352C874 LDR W12, [X9, X10, LSL #2]
	0x0352C878 CBNZ W12, 0x352C894
	0x0352C87C SUB W10, W10, 0x1
	0x0352C880 ADD X12, X11, 0x1
	0x0352C884 CMP X12, 0x3
	0x0352C888 STR W10, [X19 + 0x18]
	0x0352C88C MOV X10, X11
	0x0352C890 B.GE 0x352C868
	0x0352C894 LDR X8, [X21 + 0x10]
	0x0352C898 CBZ X8, 0x352C904
	0x0352C89C LDR W9, [X8 + 0x18]
	0x0352C8A0 CMP W9, 0x45
	0x0352C8A4 B.LS 0x352C900
	0x0352C8A8 LDR X9, [X20 + 0x10]
	0x0352C8AC CBZ X9, 0x352C904
	0x0352C8B0 LDR W10, [X9 + 0x18]
	0x0352C8B4 CMP W10, 0x45
	0x0352C8B8 B.LS 0x352C900
	0x0352C8BC LDR W8, [X8 + 0x134]
	0x0352C8C0 LDR W9, [X9 + 0x134]
	0x0352C8C4 EOR W9, W9, W8, 0x0
	0x0352C8C8 TBNZ X9, 0x1F, 0x352C8EC
	0x0352C8CC LDR X9, [X19 + 0x10]
	0x0352C8D0 CBZ X9, 0x352C904
	0x0352C8D4 LDR W10, [X9 + 0x18]
	0x0352C8D8 CMP W10, 0x45
	0x0352C8DC B.LS 0x352C900
	0x0352C8E0 LDR W9, [X9 + 0x134]
	0x0352C8E4 EOR W8, W9, W8, 0x0
	0x0352C8E8 TBNZ X8, 0x1F, 0x352C908
	0x0352C8EC MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xEB4000
	008 Move W8, [X23+2938]
	009 Move W20, W3
	010 Move W21, W2
	011 Move X22, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xBF5000
	018 Move X0, [X0+3744]
	019 Call 0x1C17CF4
	020 Move X0, 0xBC8000
	021 Move X0, [X0+3584]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+2938], W8
	025 Move X0, [X19+64]
	026 Compare X0, 0
	027 JumpIfEqual {99}
	028 Move X8, [X0]
	029 Move X23, 0xBC8000
	030 Move X9, [X8+664]
	031 Move X1, [X8+672]
	032 Move X23, [X23+3584]
	033 NotImplemented "Instruction BLR not yet implemented."
	034 Move X19, X0
	035 Compare X0, 0
	036 JumpIfEqual {100}
	037 Move X10, 0xBF5000
	038 Move X8, [X19]
	039 Move X10, [X10+3744]
	040 NotImplemented "Instruction LDRH not yet implemented."
	041 Move X1, [X10]
	042 Compare X9, 0
	043 JumpIfEqual {50}
	044 Move X10, [X8+176]
	045 Add X10, X10, 8
	046 NotImplemented "Instruction LDUR not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Subtract X9, X9, 1
	049 Add X10, X10, 16
	050 Move W2, 4
	051 Move X0, X19
	052 Call 0x1C5D788
	053 Move W9, [X10]
	054 Add W9, W9, 4
	055 Add X8, X8, W9
	056 Add X0, X8, 312
	057 Move X8, [X0]
	058 Move X4, [X0+8]
	059 Move X0, X19
	060 Move X1, X22
	061 Move W2, W21
	062 Move W3, W20
	063 NotImplemented "Instruction BLR not yet implemented."
	064 Move X21, X0
	065 Move X20, X31
	066 Compare X19, 0
	067 JumpIfEqual {89}
	068 Move X8, [X19]
	069 Move X1, [X23]
	070 NotImplemented "Instruction LDRH not yet implemented."
	071 Compare X9, 0
	072 JumpIfEqual {79}
	073 Move X10, [X8+176]
	074 Add X10, X10, 8
	075 NotImplemented "Instruction LDUR not yet implemented."
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Subtract X9, X9, 1
	078 Add X10, X10, 16
	079 Move X0, X19
	080 Move W2, W31
	081 Call 0x1C5D788
	082 NotImplemented "Instruction LDRSW not yet implemented."
	083 Add X8, X8, X9
	084 Add X0, X8, 312
	085 Move X8, [X0]
	086 Move X1, [X0+8]
	087 Move X0, X19
	088 NotImplemented "Instruction BLR not yet implemented."
	089 Compare X20, 0
	090 JumpIfNotEqual {101}
	091 Move X0, X21
	092 Move X20, [X31+32]
	093 Move X19, [X31+40]
	094 Move X22, [X31+16]
	095 Move X21, [X31+24]
	096 Move X30, [X31+48]
	097 Move X23, [X31+56]
	098 Return X0
	099 Call 0x1C17F20
	100 Call 0x1C17F20
	101 Move X0, X20
	102 Call 0x1C17F18
	103 Move X21, X0
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move X0, X21
	106 Call 0x3EB2AD0
	107 Move X20, [X0]
	108 Call 0x3EB2AE0
	109 Move X21, X31
	110 Compare X19, 0
	111 JumpIfNotEqual {68}
	112 Move X20, X31
	113 Move X21, X0
	114 Compare X19, 0
	115 JumpIfEqual {137}
	116 Move X8, [X19]
	117 Move X1, [X23]
	118 NotImplemented "Instruction LDRH not yet implemented."
	119 Compare X9, 0
	120 JumpIfEqual {127}
	121 Move X10, [X8+176]
	122 Add X10, X10, 8
	123 NotImplemented "Instruction LDUR not yet implemented."
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Subtract X9, X9, 1
	126 Add X10, X10, 16
	127 Move X0, X19
	128 Move W2, W31
	129 Call 0x1C5D788
	130 NotImplemented "Instruction LDRSW not yet implemented."
	131 Add X8, X8, X9
	132 Add X0, X8, 312
	133 Move X8, [X0]
	134 Move X1, [X0+8]
	135 Move X0, X19
	136 NotImplemented "Instruction BLR not yet implemented."
	137 Compare X20, 0
	138 JumpIfNotEqual {141}
	139 Move X0, X21
	140 Call 0x1D2D690
	141 Move X0, X20
	142 Call 0x1C17F18
	143 Call 0x1991590

Method: System.Void Dispose()

Disassembly:
	0x0352C8F0 LDP X20, X19, [X31 + 0x20]
	0x0352C8F4 LDP X22, X21, [X31 + 0x10]
	0x0352C8F8 LDR X30, [X31], #0x30
	0x0352C8FC RET
	0x0352C900 BL 0x1C16F28
	0x0352C904 BL 0x1C16F20
	0x0352C908 ADRP X0, 0xBF5000
	0x0352C90C LDR X0, [X0 + 0x560]
	0x0352C910 BL 0x1C16D08
	0x0352C914 BL 0x1C16F10
	0x0352C918 MOV X1, X31
	0x0352C91C MOV X19, X0
	0x0352C920 BL 0x33162DC
	0x0352C924 ADRP X0, 0xC08000
	0x0352C928 LDR X0, [X0 + 0x9A8]
	0x0352C92C BL 0x1C16D08
	0x0352C930 MOV X1, X0
	0x0352C934 MOV X0, X19
	0x0352C938 BL 0x1C16DEC
	0x0352C93C STP X30, X21, [X31 - 0x20]!
	0x0352C940 STP X20, X19, [X31 + 0x10]
	0x0352C944 ADRP X21, 0xEB3000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xEB4000
	006 Move X21, 0xBCF000
	007 Move W8, [X20+2939]
	008 Move X21, [X21+3088]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xBCF000
	015 Move X0, [X0+3088]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2939], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call GC.SuppressFinalize, X0
	031 Return 

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x0352C948 LDRB W8, [X21 + 0xB86]

ISIL:
	001 Return 

Method: System.Numerics.BigInteger CalculatePublicKey()

Disassembly:
	0x0352BDE0 BL 0x1C16F10
	0x0352BDE4 MOV X19, X0
	0x0352BDE8 ADRP X0, 0xC09000
	0x0352BDEC LDR X0, [X0 + 0x960]
	0x0352BDF0 BL 0x1C16D08
	0x0352BDF4 MOV X1, X0
	0x0352BDF8 MOV X0, X19
	0x0352BDFC MOV X2, X31
	0x0352BE00 BL 0x3316338
	0x0352BE04 ADRP X0, 0xC09000
	0x0352BE08 LDR X0, [X0 + 0x978]
	0x0352BE0C BL 0x1C16D08
	0x0352BE10 MOV X1, X0
	0x0352BE14 MOV X0, X19
	0x0352BE18 BL 0x1C16DEC
	0x0352BE1C STR X30, [X31 - 0x30]!
	0x0352BE20 STP X22, X21, [X31 + 0x10]
	0x0352BE24 STP X20, X19, [X31 + 0x20]
	0x0352BE28 ADRP X22, 0xEB4000
	0x0352BE2C ADRP X21, 0xBF1000
	0x0352BE30 LDRB W8, [X22 + 0xB84]
	0x0352BE34 LDR X21, [X21 + 0xD08]
	0x0352BE38 MOV X20, X1
	0x0352BE3C MOV X19, X0
	0x0352BE40 TBNZ X8, 0x0, 0x352BE58
	0x0352BE44 ADRP X0, 0xBF1000
	0x0352BE48 LDR X0, [X0 + 0xD08]
	0x0352BE4C BL 0x1C16CF4
	0x0352BE50 MOVZ W8, 0x1
	0x0352BE54 STRB W8, [X22 + 0xB84]
	0x0352BE58 MOV X0, X19
	0x0352BE5C MOV X1, X31
	0x0352BE60 STR X31, [X19 + 0x10]
	0x0352BE64 BL 0x33BDD8C
	0x0352BE68 LDR X0, [X21]
	0x0352BE6C MOVZ W1, 0x46
	0x0352BE70 BL 0x1C16D6C
	0x0352BE74 STR X0, [X19 + 0x10]
	0x0352BE78 CBZ X20, 0x352BEE8
	0x0352BE7C LDR W8, [X20 + 0x18]
	0x0352BE80 CMP W8, 0x1
	0x0352BE84 STR W8, [X19 + 0x18]
	0x0352BE88 B.LT 0x352BED4
	0x0352BE8C LDR X11, [X20 + 0x10]
	0x0352BE90 CBZ X11, 0x352BEE8

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xEB5000
	009 Move X21, 0xC09000
	010 Move W8, [X20+2940]
	011 Move X21, [X21+3360]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xC0A000
	018 Move X0, [X0+2368]
	019 Call 0x1C17CF4
	020 Move X0, 0xC09000
	021 Move X0, [X0+3360]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2940], W8
	025 Move X0, [X21]
	026 Move X20, 0xC0A000
	027 Move W8, [X0+224]
	028 Move X20, [X20+2368]
	029 Compare W8, 0
	030 JumpIfNotEqual {33}
	031 Call 0x1C17DFC
	032 Move X0, [X21]
	033 Move X8, [X0+184]
	034 Move X0, [X20]
	035 Move X21, [X19+32]
	036 Move X20, [X19+40]
	037 Move X22, [X19+16]
	038 Move X19, [X19+24]
	039 Move X24, [X8]
	040 Move X23, [X8+8]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X0, X24
	046 Move X1, X23
	047 Move X2, X21
	048 Move X3, X20
	049 Move X4, X22
	050 Move X5, X19
	051 Move X20, [X31+48]
	052 Move X19, [X31+56]
	053 Move X22, [X31+32]
	054 Move X21, [X31+40]
	055 Move X24, [X31+16]
	056 Move X23, [X31+24]
	057 Move X6, X31
	058 Move X30, [X31+64]
	059 Call BigInteger.ModPow, X0, X1, X2
	060 Return X0

Method: System.Numerics.BigInteger CalculateSharedKey(System.Numerics.BigInteger otherPartyPublicKey)

Disassembly:
	0x0352C3FC CMP W12, W13
	0x0352C400 B.CS 0x352C564
	0x0352C404 ADD X11, X11, W12, 0x2, SXTW
	0x0352C408 STR W10, [X11 + 0x20]
	0x0352C40C LDRSW X10, [X20 + 0x18]
	0x0352C410 ADD X9, X9, 0x1
	0x0352C414 CMP X9, X10
	0x0352C418 B.LT 0x352C340
	0x0352C41C CBZ X19, 0x352C44C
	0x0352C420 CBZ X21, 0x352C44C
	0x0352C424 LDR W8, [X19 + 0x18]
	0x0352C428 ADD W9, W8, W10
	0x0352C42C CMP W9, 0x46
	0x0352C430 MOVZ W8, 0x46
	0x0352C434 CSEL W10, W9, W8, LT
	0x0352C438 CMP W10, 0x2
	0x0352C43C STR W10, [X21 + 0x18]
	0x0352C440 B.GE 0x352C450
	0x0352C444 LDR X8, [X21 + 0x10]
	0x0352C448 CBNZ X8, 0x352C494
	0x0352C44C BL 0x1C16F20
	0x0352C450 LDR X8, [X21 + 0x10]
	0x0352C454 MOV W9, W10
	0x0352C458 ADD X10, X8, 0x1C
	0x0352C45C CBZ X8, 0x352C44C
	0x0352C460 LDR W12, [X8 + 0x18]
	0x0352C464 SUB X11, X9, 0x1
	0x0352C468 CMP X11, X12
	0x0352C46C B.CS 0x352C558
	0x0352C470 LDR W12, [X10, X9, LSL #2]
	0x0352C474 CBNZ W12, 0x352C494
	0x0352C478 SUB W9, W9, 0x1
	0x0352C47C ADD X12, X11, 0x1
	0x0352C480 CMP X12, 0x3
	0x0352C484 STR W9, [X21 + 0x18]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xEB4000
	009 Move X22, 0xC09000
	010 Move W8, [X23+2941]
	011 Move X22, [X22+2368]
	012 Move X19, X2
	013 Move X20, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xC09000
	020 Move X0, [X0+2368]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X23+2941], W8
	024 Move X0, [X22]
	025 Move X24, [X21+32]
	026 Move X23, [X21+40]
	027 Move X22, [X21+16]
	028 Move X21, [X21+24]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X20
	034 Move X1, X19
	035 Move X2, X24
	036 Move X3, X23
	037 Move X4, X22
	038 Move X5, X21
	039 Move X20, [X31+48]
	040 Move X19, [X31+56]
	041 Move X22, [X31+32]
	042 Move X21, [X31+40]
	043 Move X24, [X31+16]
	044 Move X23, [X31+24]
	045 Move X6, X31
	046 Move X30, [X31+64]
	047 Call BigInteger.ModPow, X0, X1, X2
	048 Return X0

Method: System.Numerics.BigInteger GenerateRandomSecret(System.Int32 secretLength)

Disassembly:
	0x0352BC64 TBNZ X20, 0x0, 0x352BCAC
	0x0352BC68 CBNZ W8, 0x352BC74
	0x0352BC6C MOVZ W8, 0x1
	0x0352BC70 STR W8, [X19 + 0x18]
	0x0352BC74 LDP X20, X19, [X31 + 0x20]
	0x0352BC78 LDP X22, X21, [X31 + 0x10]
	0x0352BC7C LDR X30, [X31], #0x30
	0x0352BC80 RET
	0x0352BC84 BL 0x1C16F28
	0x0352BC88 BL 0x1C16F20
	0x0352BC8C ADRP X0, 0xBF6000
	0x0352BC90 LDR X0, [X0 + 0x560]
	0x0352BC94 BL 0x1C16D08
	0x0352BC98 BL 0x1C16F10
	0x0352BC9C MOV X19, X0
	0x0352BCA0 ADRP X0, 0xC09000
	0x0352BCA4 LDR X0, [X0 + 0x960]
	0x0352BCA8 B 0x352BCC8
	0x0352BCAC ADRP X0, 0xBF6000
	0x0352BCB0 LDR X0, [X0 + 0x560]
	0x0352BCB4 BL 0x1C16D08
	0x0352BCB8 BL 0x1C16F10
	0x0352BCBC MOV X19, X0
	0x0352BCC0 ADRP X0, 0xC09000
	0x0352BCC4 LDR X0, [X0 + 0x968]
	0x0352BCC8 BL 0x1C16D08
	0x0352BCCC MOV X1, X0
	0x0352BCD0 MOV X0, X19
	0x0352BCD4 MOV X2, X31
	0x0352BCD8 BL 0x3316338
	0x0352BCDC ADRP X0, 0xC09000
	0x0352BCE0 LDR X0, [X0 + 0x970]
	0x0352BCE4 BL 0x1C16D08
	0x0352BCE8 MOV X1, X0
	0x0352BCEC MOV X0, X19
	0x0352BCF0 BL 0x1C16DEC
	0x0352BCF4 STR X30, [X31 - 0x30]!
	0x0352BCF8 STP X22, X21, [X31 + 0x10]
	0x0352BCFC STP X20, X19, [X31 + 0x20]
	0x0352BD00 ADRP X22, 0xEB4000
	0x0352BD04 ADRP X21, 0xBF1000
	0x0352BD08 LDRB W8, [X22 + 0xB83]
	0x0352BD0C LDR X21, [X21 + 0xD08]
	0x0352BD10 MOV X20, X1
	0x0352BD14 MOV X19, X0
	0x0352BD18 TBNZ X8, 0x0, 0x352BD30
	0x0352BD1C ADRP X0, 0xBF1000
	0x0352BD20 LDR X0, [X0 + 0xD08]
	0x0352BD24 BL 0x1C16CF4
	0x0352BD28 MOVZ W8, 0x1
	0x0352BD2C STRB W8, [X22 + 0xB83]
	0x0352BD30 MOV X0, X19
	0x0352BD34 MOV X1, X31
	0x0352BD38 STR X31, [X19 + 0x10]
	0x0352BD3C BL 0x33BDD8C
	0x0352BD40 LDR X0, [X21]
	0x0352BD44 MOVZ W1, 0x46
	0x0352BD48 BL 0x1C16D6C
	0x0352BD4C STR X0, [X19 + 0x10]
	0x0352BD50 STR W31, [X19 + 0x18]
	0x0352BD54 CBZ X20, 0x352BD94
	0x0352BD58 MOV W8, W31
	0x0352BD5C CMP W8, 0x45
	0x0352BD60 B.GT 0x352BDD4
	0x0352BD64 CBZ X0, 0x352BDCC
	0x0352BD68 LDR W9, [X0 + 0x18]
	0x0352BD6C CMP W8, W9
	0x0352BD70 B.CS 0x352BDD0
	0x0352BD74 ADD X8, X0, W8, 0x2, SXTW
	0x0352BD78 STR W20, [X8 + 0x20]
	0x0352BD7C LDR W8, [X19 + 0x18]
	0x0352BD80 UBFM X20, X20, 0x20, 0x3F
	0x0352BD84 ADD W8, W8, 0x1
	0x0352BD88 STR W8, [X19 + 0x18]
	0x0352BD8C CBNZ X20, 0x352BD5C
	0x0352BD90 B 0x352BD9C
	0x0352BD94 CBZ X0, 0x352BDCC
	0x0352BD98 MOV W8, W31
	0x0352BD9C LDR W9, [X0 + 0x18]
	0x0352BDA0 CMP W9, 0x45
	0x0352BDA4 B.LS 0x352BDD0
	0x0352BDA8 LDR W9, [X0 + 0x134]
	0x0352BDAC TBNZ X9, 0x1F, 0x352BDD4
	0x0352BDB0 CBNZ W8, 0x352BDBC
	0x0352BDB4 MOVZ W8, 0x1
	0x0352BDB8 STR W8, [X19 + 0x18]
	0x0352BDBC LDP X20, X19, [X31 + 0x20]
	0x0352BDC0 LDP X22, X21, [X31 + 0x10]
	0x0352BDC4 LDR X30, [X31], #0x30
	0x0352BDC8 RET
	0x0352BDCC BL 0x1C16F20
	0x0352BDD0 BL 0x1C16F28
	0x0352BDD4 ADRP X0, 0xBF6000
	0x0352BDD8 LDR X0, [X0 + 0x560]
	0x0352BDDC BL 0x1C16D08

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X23, 0xEB5000
	013 Move X20, 0xBF9000
	014 Move X22, 0xBC9000
	015 Move W8, [X23+2942]
	016 Move X20, [X20+320]
	017 Move X22, [X22+1560]
	018 Move W21, W1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {35}
	024 Move X0, 0xC0A000
	025 Move X0, [X0+2368]
	026 Call 0x1C17CF4
	027 Move X0, 0xBC9000
	028 Move X0, [X0+1560]
	029 Call 0x1C17CF4
	030 Move X0, 0xBF9000
	031 Move X0, [X0+320]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X23+2942], W8
	035 Move X0, [X20]
	036 Move [X31], X31
	037 Move [X31+8], X31
	038 Call 0x1C17F10
	039 Move X1, X31
	040 Move X20, X0
	041 Call RNGCryptoServiceProvider..ctor, X0
	042 Move X0, [X22]
	043 Add W8, W21, 7
	044 NotImplemented "Instruction CMP not yet implemented."
	045 NotImplemented "Instruction CSEL not yet implemented."
	046 NotImplemented "Instruction SBFM not yet implemented."
	047 Call 0x1C17D6C
	048 Compare X20, 0
	049 JumpIfEqual {121}
	050 Move X26, 0xC0A000
	051 Move X26, [X26+2368]
	052 Move X21, X0
	053 Move X8, [X20]
	054 Move X0, X20
	055 Move X1, X21
	056 Move X9, [X8+408]
	057 Move X2, [X8+416]
	058 NotImplemented "Instruction BLR not yet implemented."
	059 Move X0, [X26]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Add X0, X31, 0
	065 Move X1, X21
	066 Move X2, X31
	067 Call BigInteger..ctor, X0, X1
	068 Move X22, [X31]
	069 Move X23, [X31+8]
	070 Move X24, [X19+16]
	071 Move X25, [X19+24]
	072 Move W0, 1
	073 Move X1, X31
	074 Move W27, 1
	075 Call BigInteger.op_Implicit, X0
	076 Move X2, X0
	077 Move X3, X1
	078 Move X0, X24
	079 Move X1, X25
	080 Move X4, X31
	081 Call BigInteger.op_Subtraction, X0, X1
	082 Move X2, X0
	083 Move X3, X1
	084 Move X0, X22
	085 Move X1, X23
	086 Move X4, X31
	087 Call BigInteger.op_GreaterThanOrEqual, X0, X1
	088 Move TEMP, X0
	089 And TEMP, TEMP, 1
	090 Compare TEMP, 1
	091 JumpIfEqual {105}
	092 Move X0, [X26]
	093 Move X22, [X31]
	094 Move X23, [X31+8]
	095 Move W8, [X0+224]
	096 Compare W8, 0
	097 JumpIfNotEqual {99}
	098 Call 0x1C17DFC
	099 Move W2, 2
	100 Move X0, X22
	101 Move X1, X23
	102 Move X3, X31
	103 Call BigInteger.op_LessThan, X0, X1
	104 And W27, W0, 1
	105 Compare W27, 0
	106 JumpIfNotEqual {53}
	107 Move X0, [X31]
	108 Move X1, [X31+8]
	109 Move X20, [X31+80]
	110 Move X19, [X31+88]
	111 Move X22, [X31+64]
	112 Move X21, [X31+72]
	113 Move X24, [X31+48]
	114 Move X23, [X31+56]
	115 Move X26, [X31+32]
	116 Move X25, [X31+40]
	117 Move X30, [X31+16]
	118 Move X27, [X31+24]
	119 Add X31, X31, 96
	120 Return X0
	121 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x0352C94C MOV X20, X1
	0x0352C950 MOV X19, X0
	0x0352C954 TBNZ X8, 0x0, 0x352C96C
	0x0352C958 ADRP X0, 0xBF0000
	0x0352C95C LDR X0, [X0 + 0xD08]
	0x0352C960 BL 0x1C16CF4
	0x0352C964 MOVZ W8, 0x1
	0x0352C968 STRB W8, [X21 + 0xB86]
	0x0352C96C MOV X0, X19
	0x0352C970 MOV X1, X31
	0x0352C974 STR X31, [X19 + 0x10]
	0x0352C978 BL 0x33BDD8C
	0x0352C97C CBZ X20, 0x352CB60
	0x0352C980 LDR W8, [X20 + 0x18]
	0x0352C984 SBFM W9, W8, 0x2, 0x1F
	0x0352C988 ANDS W21, W8, 0x3
	0x0352C98C CINC W8, W9, NE
	0x0352C990 CMP W8, 0x47
	0x0352C994 STR W8, [X19 + 0x18]
	0x0352C998 B.GE 0x352CB64
	0x0352C99C ADRP X8, 0xBF0000
	0x0352C9A0 LDR X8, [X8 + 0xD08]
	0x0352C9A4 MOVZ W1, 0x46
	0x0352C9A8 LDR X0, [X8]
	0x0352C9AC BL 0x1C16D6C
	0x0352C9B0 STR X0, [X19 + 0x10]
	0x0352C9B4 LDR X8, [X20 + 0x18]
	0x0352C9B8 SUB W11, W8, 0x1
	0x0352C9BC CMP W11, 0x3
	0x0352C9C0 B.LT 0x352CA50
	0x0352C9C4 MOV X9, X31
	0x0352C9C8 AND X10, X8, 0x0
	0x0352C9CC MOV W12, W11
	0x0352C9D0 ADD X11, X0, 0x20
	0x0352C9D4 SUB X13, X12, 0x3
	0x0352C9D8 CMP X13, X10
	0x0352C9DC B.CS 0x352CB5C

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0xEB4000
	006 Move X19, 0xC09000
	007 Move W8, [X20+2943]
	008 Move X19, [X19+2360]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xC08000
	014 Move X0, [X0+3360]
	015 Call 0x1C17CF4
	016 Move X0, 0xC09000
	017 Move X0, [X0+2360]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+2943], W8
	021 Move X0, [X19]
	022 Move X20, 0xC08000
	023 Move W8, [X0+224]
	024 Move X20, [X20+3360]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X19]
	029 Move X8, [X0+184]
	030 Add X0, X31, 0
	031 Move X2, X31
	032 Move W1, [X8]
	033 Move [X31], X31
	034 Move [X31+8], X31
	035 Call BigInteger..ctor, X0, X1
	036 Move X8, [X20]
	037 Move V0, [X31]
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X30, [X31+16]
	041 Move X8, [X8+184]
	042 Move [X8], V0
	043 Add X31, X31, 48
	044 Return 

