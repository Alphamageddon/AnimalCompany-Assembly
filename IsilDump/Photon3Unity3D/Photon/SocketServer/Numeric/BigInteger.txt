Type: Photon.SocketServer.Numeric.BigInteger

Method: System.Void .ctor()

Disassembly:
	0x0352CB04 ADD X8, X0, W8, 0x2, SXTW
	0x0352CB08 STR W9, [X8 + 0x20]
	0x0352CB0C LDR W8, [X19 + 0x18]
	0x0352CB10 CMP W8, 0x2
	0x0352CB14 B.LT 0x352CB50
	0x0352CB18 CBZ X0, 0x352CB60
	0x0352CB1C LDR W9, [X0 + 0x18]
	0x0352CB20 ADD X10, X0, 0x1C
	0x0352CB24 SUB X11, X8, 0x1
	0x0352CB28 CMP X11, X9
	0x0352CB2C B.CS 0x352CB5C
	0x0352CB30 LDR W12, [X10, X8, LSL #2]
	0x0352CB34 CBNZ W12, 0x352CB50
	0x0352CB38 SUB W8, W8, 0x1
	0x0352CB3C ADD X12, X11, 0x1
	0x0352CB40 CMP X12, 0x3
	0x0352CB44 STR W8, [X19 + 0x18]
	0x0352CB48 MOV X8, X11
	0x0352CB4C B.GE 0x352CB24
	0x0352CB50 LDP X20, X19, [X31 + 0x10]
	0x0352CB54 LDP X30, X21, [X31], #0x20
	0x0352CB58 RET
	0x0352CB5C BL 0x1C16F28
	0x0352CB60 BL 0x1C16F20
	0x0352CB64 ADRP X0, 0xBF5000
	0x0352CB68 LDR X0, [X0 + 0x560]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xEB4000
	006 Move X20, 0xBF1000
	007 Move W8, [X21+2945]
	008 Move X20, [X20+3336]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xBF1000
	015 Move X0, [X0+3336]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2945], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Move [X19+16], X31
	022 Call Object..ctor, X0
	023 Move X0, [X20]
	024 Move W1, 70
	025 Call 0x1C17D6C
	026 Move W8, 1
	027 Move [X19+16], X0
	028 Move [X19+24], W8
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return 

Method: System.Void .ctor(System.Int64 value)

Disassembly:
	0x0352CB6C BL 0x1C16D08
	0x0352CB70 BL 0x1C16F10
	0x0352CB74 MOV X19, X0
	0x0352CB78 ADRP X0, 0xC08000
	0x0352CB7C LDR X0, [X0 + 0x9B0]
	0x0352CB80 BL 0x1C16D08
	0x0352CB84 MOV X1, X0
	0x0352CB88 MOV X0, X19
	0x0352CB8C MOV X2, X31
	0x0352CB90 BL 0x3316338
	0x0352CB94 ADRP X0, 0xC08000
	0x0352CB98 LDR X0, [X0 + 0x9B8]
	0x0352CB9C BL 0x1C16D08
	0x0352CBA0 MOV X1, X0
	0x0352CBA4 MOV X0, X19
	0x0352CBA8 BL 0x1C16DEC
	0x0352CBAC STR X30, [X31 - 0x30]!
	0x0352CBB0 STP X22, X21, [X31 + 0x10]
	0x0352CBB4 STP X20, X19, [X31 + 0x20]
	0x0352CBB8 ADRP X22, 0xEB3000
	0x0352CBBC LDRB W8, [X22 + 0xB87]
	0x0352CBC0 MOV W21, W2
	0x0352CBC4 MOV X20, X1
	0x0352CBC8 MOV X19, X0
	0x0352CBCC TBNZ X8, 0x0, 0x352CBE4
	0x0352CBD0 ADRP X0, 0xBF0000
	0x0352CBD4 LDR X0, [X0 + 0xD08]
	0x0352CBD8 BL 0x1C16CF4
	0x0352CBDC MOVZ W8, 0x1
	0x0352CBE0 STRB W8, [X22 + 0xB87]
	0x0352CBE4 MOV X0, X19
	0x0352CBE8 MOV X1, X31
	0x0352CBEC STR X31, [X19 + 0x10]
	0x0352CBF0 BL 0x33BDD8C
	0x0352CBF4 SBFM W8, W21, 0x2, 0x1F
	0x0352CBF8 ANDS W22, W21, 0x3
	0x0352CBFC CINC W8, W8, NE
	0x0352CC00 CMP W8, 0x46
	0x0352CC04 STR W8, [X19 + 0x18]
	0x0352CC08 B.GT 0x352CE00
	0x0352CC0C CBZ X20, 0x352CDFC
	0x0352CC10 LDR W8, [X20 + 0x18]
	0x0352CC14 CMP W8, W21
	0x0352CC18 B.LT 0x352CE00
	0x0352CC1C ADRP X8, 0xBF0000
	0x0352CC20 LDR X8, [X8 + 0xD08]
	0x0352CC24 MOVZ W1, 0x46
	0x0352CC28 LDR X0, [X8]
	0x0352CC2C BL 0x1C16D6C
	0x0352CC30 SUB W10, W21, 0x1
	0x0352CC34 CMP W10, 0x3
	0x0352CC38 STR X0, [X19 + 0x10]
	0x0352CC3C B.LT 0x352CCCC
	0x0352CC40 LDR W9, [X20 + 0x18]
	0x0352CC44 MOV X8, X31
	0x0352CC48 MOV W11, W10
	0x0352CC4C ADD X10, X0, 0x20
	0x0352CC50 SUB X12, X11, 0x3
	0x0352CC54 CMP X12, X9
	0x0352CC58 B.CS 0x352CDF8
	0x0352CC5C SUB X12, X11, 0x2
	0x0352CC60 CMP X12, X9
	0x0352CC64 B.CS 0x352CDF8
	0x0352CC68 SUB X12, X11, 0x1
	0x0352CC6C CMP X12, X9
	0x0352CC70 B.CS 0x352CDF8
	0x0352CC74 CMP X11, X9
	0x0352CC78 B.CS 0x352CDF8
	0x0352CC7C CBZ X0, 0x352CDFC
	0x0352CC80 LDR W12, [X0 + 0x18]
	0x0352CC84 CMP X8, X12
	0x0352CC88 B.CS 0x352CDF8
	0x0352CC8C ADD X12, X20, X11
	0x0352CC90 LDRB W15, [X12 + 0x1D]
	0x0352CC94 ADD X13, X20, X11
	0x0352CC98 LDRB W12, [X12 + 0x1E]
	0x0352CC9C ADD X14, X20, X11
	0x0352CCA0 LDRB W13, [X13 + 0x1F]
	0x0352CCA4 LDRB W14, [X14 + 0x20]
	0x0352CCA8 UBFM W15, W15, 0x8, 0x7
	0x0352CCAC BFM W15, W12, 0x10, 0x7
	0x0352CCB0 BFM W15, W13, 0x18, 0x7
	0x0352CCB4 ORR W12, W15, W14, 0x0
	0x0352CCB8 CMP X11, 0x6
	0x0352CCBC SUB X11, X11, 0x4
	0x0352CCC0 STR W12, [X10, X8, LSL #2]
	0x0352CCC4 ADD X8, X8, 0x1
	0x0352CCC8 B.GT 0x352CC50
	0x0352CCCC CMP W22, 0x3
	0x0352CCD0 B.EQ 0x352CD0C
	0x0352CCD4 CMP W22, 0x2
	0x0352CCD8 B.EQ 0x352CD58
	0x0352CCDC CMP W22, 0x1
	0x0352CCE0 B.NE 0x352CD94
	0x0352CCE4 LDR W8, [X20 + 0x18]
	0x0352CCE8 CBZ W8, 0x352CDF8
	0x0352CCEC CBZ X0, 0x352CDFC
	0x0352CCF0 LDR W8, [X19 + 0x18]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xEB4000
	007 Move X21, 0xBF1000
	008 Move W8, [X22+2946]
	009 Move X21, [X21+3336]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xBF1000
	017 Move X0, [X0+3336]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2946], W8
	021 Move X0, X19
	022 Move X1, X31
	023 Move [X19+16], X31
	024 Call Object..ctor, X0
	025 Move X0, [X21]
	026 Move W1, 70
	027 Call 0x1C17D6C
	028 Move [X19+16], X0
	029 Move [X19+24], W31
	030 Compare X20, 0
	031 JumpIfEqual {78}
	032 Move W8, W31
	033 Move X9, X20
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Compare X0, 0
	036 JumpIfEqual {87}
	037 Move W10, [X0+24]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Add X8, X0, W8
	040 Move [X8+32], W9
	041 Move W8, [X19+24]
	042 NotImplemented "Instruction SBFM not yet implemented."
	043 Add W8, W8, 1
	044 Move [X19+24], W8
	045 Compare X9, 0
	046 JumpIfNotEqual {34}
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move W9, [X0+24]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move W9, [X0+308]
	051 Move TEMP, X9
	052 And TEMP, TEMP, -2147483648
	053 Compare TEMP, -2147483648
	054 JumpIfNotEqual {76}
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move TEMP, X20
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfNotEqual {80}
	060 Add X31, X9, 1
	061 Compare X0, 0
	062 JumpIfEqual {87}
	063 Move W9, [X0+24]
	064 Subtract W8, W8, 1
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Add X8, X0, W8
	067 Move W8, [X8+32]
	068 Move TEMP, X8
	069 And TEMP, TEMP, -2147483648
	070 Compare TEMP, -2147483648
	071 JumpIfEqual {80}
	072 Move TEMP, X20
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfEqual {95}
	076 Compare W8, 0
	077 JumpIfNotEqual {80}
	078 Move W8, 1
	079 Move [X19+24], W8
	080 Move X20, [X31+32]
	081 Move X19, [X31+40]
	082 Move X22, [X31+16]
	083 Move X21, [X31+24]
	084 Move X30, [X31+48]
	085 Return 
	086 Call 0x1C17F28
	087 Call 0x1C17F20
	088 Move X0, 0xBF6000
	089 Move X0, [X0+1376]
	090 Call 0x1C17D08
	091 Call 0x1C17F10
	092 Move X19, X0
	093 Move X0, 0xC09000
	094 Move X0, [X0+2400]
	095 Move X0, 0xBF6000
	096 Move X0, [X0+1376]
	097 Call 0x1C17D08
	098 Call 0x1C17F10
	099 Move X19, X0
	100 Move X0, 0xC09000
	101 Move X0, [X0+2408]
	102 Call 0x1C17D08
	103 Move X1, X0
	104 Move X0, X19
	105 Move X2, X31
	106 Call ArithmeticException..ctor, X0, X1
	107 Move X0, 0xC09000
	108 Move X0, [X0+2416]
	109 Call 0x1C17D08
	110 Move X1, X0
	111 Move X0, X19
	112 Call 0x1C17DEC

Method: System.Void .ctor(System.UInt64 value)

Disassembly:
	0x0352CCF4 LDR W9, [X0 + 0x18]
	0x0352CCF8 SUB W8, W8, 0x1
	0x0352CCFC CMP W8, W9
	0x0352CD00 B.CS 0x352CDF8
	0x0352CD04 LDRB W9, [X20 + 0x20]
	0x0352CD08 B 0x352CD8C
	0x0352CD0C LDR W8, [X20 + 0x18]
	0x0352CD10 CBZ W8, 0x352CDF8
	0x0352CD14 CMP W8, 0x1
	0x0352CD18 B.EQ 0x352CDF8
	0x0352CD1C CMP W8, 0x2
	0x0352CD20 B.LS 0x352CDF8
	0x0352CD24 CBZ X0, 0x352CDFC
	0x0352CD28 LDR W8, [X19 + 0x18]
	0x0352CD2C LDR W9, [X0 + 0x18]
	0x0352CD30 SUB W8, W8, 0x1
	0x0352CD34 CMP W8, W9
	0x0352CD38 B.CS 0x352CDF8
	0x0352CD3C LDRB W9, [X20 + 0x20]
	0x0352CD40 LDRB W10, [X20 + 0x21]
	0x0352CD44 LDRB W11, [X20 + 0x22]
	0x0352CD48 UBFM W9, W9, 0x10, 0xF
	0x0352CD4C BFM W9, W10, 0x18, 0x7
	0x0352CD50 ORR W9, W9, W11, 0x0
	0x0352CD54 B 0x352CD8C
	0x0352CD58 LDR W8, [X20 + 0x18]
	0x0352CD5C CBZ W8, 0x352CDF8
	0x0352CD60 CMP W8, 0x1
	0x0352CD64 B.EQ 0x352CDF8
	0x0352CD68 CBZ X0, 0x352CDFC
	0x0352CD6C LDR W8, [X19 + 0x18]
	0x0352CD70 LDR W9, [X0 + 0x18]
	0x0352CD74 SUB W8, W8, 0x1
	0x0352CD78 CMP W8, W9
	0x0352CD7C B.CS 0x352CDF8
	0x0352CD80 LDRB W10, [X20 + 0x20]
	0x0352CD84 LDRB W9, [X20 + 0x21]
	0x0352CD88 BFM W9, W10, 0x18, 0x7
	0x0352CD8C ADD X8, X0, W8, 0x2, SXTW
	0x0352CD90 STR W9, [X8 + 0x20]
	0x0352CD94 LDR W8, [X19 + 0x18]
	0x0352CD98 CBZ W8, 0x352CDE0
	0x0352CD9C CMP W8, 0x2
	0x0352CDA0 B.LT 0x352CDE8
	0x0352CDA4 CBZ X0, 0x352CDFC
	0x0352CDA8 LDR W9, [X0 + 0x18]
	0x0352CDAC ADD X10, X0, 0x1C
	0x0352CDB0 SUB X11, X8, 0x1
	0x0352CDB4 CMP X11, X9
	0x0352CDB8 B.CS 0x352CDF8
	0x0352CDBC LDR W12, [X10, X8, LSL #2]
	0x0352CDC0 CBNZ W12, 0x352CDE8
	0x0352CDC4 SUB W8, W8, 0x1
	0x0352CDC8 ADD X12, X11, 0x1
	0x0352CDCC CMP X12, 0x3
	0x0352CDD0 STR W8, [X19 + 0x18]
	0x0352CDD4 MOV X8, X11
	0x0352CDD8 B.GE 0x352CDB0
	0x0352CDDC B 0x352CDE8
	0x0352CDE0 MOVZ W8, 0x1
	0x0352CDE4 STR W8, [X19 + 0x18]
	0x0352CDE8 LDP X20, X19, [X31 + 0x20]
	0x0352CDEC LDP X22, X21, [X31 + 0x10]
	0x0352CDF0 LDR X30, [X31], #0x30
	0x0352CDF4 RET
	0x0352CDF8 BL 0x1C16F28
	0x0352CDFC BL 0x1C16F20
	0x0352CE00 ADRP X0, 0xBF5000
	0x0352CE04 LDR X0, [X0 + 0x560]
	0x0352CE08 BL 0x1C16D08
	0x0352CE0C BL 0x1C16F10
	0x0352CE10 MOV X19, X0
	0x0352CE14 ADRP X0, 0xC08000
	0x0352CE18 LDR X0, [X0 + 0x9B0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xEB4000
	007 Move X21, 0xBF1000
	008 Move W8, [X22+2947]
	009 Move X21, [X21+3336]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xBF1000
	017 Move X0, [X0+3336]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2947], W8
	021 Move X0, X19
	022 Move X1, X31
	023 Move [X19+16], X31
	024 Call Object..ctor, X0
	025 Move X0, [X21]
	026 Move W1, 70
	027 Call 0x1C17D6C
	028 Move [X19+16], X0
	029 Move [X19+24], W31
	030 Compare X20, 0
	031 JumpIfEqual {48}
	032 Move W8, W31
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Compare X0, 0
	035 JumpIfEqual {68}
	036 Move W9, [X0+24]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Add X8, X0, W8
	039 Move [X8+32], W20
	040 Move W8, [X19+24]
	041 Move X20, X20
	042 ShiftRight X20, 32
	043 And X20, X20, 0x7FFFFFFF
	044 Add W8, W8, 1
	045 Move [X19+24], W8
	046 Compare X20, 0
	047 JumpIfNotEqual {33}
	048 Compare X0, 0
	049 JumpIfEqual {68}
	050 Move W8, W31
	051 Move W9, [X0+24]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move W9, [X0+308]
	054 Move TEMP, X9
	055 And TEMP, TEMP, -2147483648
	056 Compare TEMP, -2147483648
	057 JumpIfEqual {70}
	058 Compare W8, 0
	059 JumpIfNotEqual {62}
	060 Move W8, 1
	061 Move [X19+24], W8
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X22, [X31+16]
	065 Move X21, [X31+24]
	066 Move X30, [X31+48]
	067 Return 
	068 Call 0x1C17F20
	069 Call 0x1C17F28
	070 Move X0, 0xBF6000
	071 Move X0, [X0+1376]
	072 Call 0x1C17D08
	073 Call 0x1C17F10
	074 Move X19, X0
	075 Move X0, 0xC09000
	076 Move X0, [X0+2400]
	077 Call 0x1C17D08
	078 Move X1, X0
	079 Move X0, X19
	080 Move X2, X31
	081 Call ArithmeticException..ctor, X0, X1
	082 Move X0, 0xC09000
	083 Move X0, [X0+2424]
	084 Call 0x1C17D08
	085 Move X1, X0
	086 Move X0, X19
	087 Call 0x1C17DEC

Method: System.Void .ctor(Photon.SocketServer.Numeric.BigInteger bi)

Disassembly:
	0x0352CE1C BL 0x1C16D08
	0x0352CE20 MOV X1, X0
	0x0352CE24 MOV X0, X19
	0x0352CE28 MOV X2, X31
	0x0352CE2C BL 0x3316338
	0x0352CE30 ADRP X0, 0xC08000
	0x0352CE34 LDR X0, [X0 + 0x9C0]
	0x0352CE38 BL 0x1C16D08
	0x0352CE3C MOV X1, X0
	0x0352CE40 MOV X0, X19
	0x0352CE44 BL 0x1C16DEC
	0x0352CE48 STP X30, X21, [X31 - 0x20]!
	0x0352CE4C STP X20, X19, [X31 + 0x10]
	0x0352CE50 ADRP X21, 0xEB3000
	0x0352CE54 LDRB W8, [X21 + 0xB88]
	0x0352CE58 MOV X20, X1
	0x0352CE5C MOV X19, X0
	0x0352CE60 TBNZ X8, 0x0, 0x352CE78
	0x0352CE64 ADRP X0, 0xBF0000
	0x0352CE68 LDR X0, [X0 + 0xD08]
	0x0352CE6C BL 0x1C16CF4
	0x0352CE70 MOVZ W8, 0x1
	0x0352CE74 STRB W8, [X21 + 0xB88]
	0x0352CE78 MOV X0, X19
	0x0352CE7C MOV X1, X31
	0x0352CE80 STR X31, [X19 + 0x10]
	0x0352CE84 BL 0x33BDD8C
	0x0352CE88 CBZ X20, 0x352CF54
	0x0352CE8C LDR W8, [X20 + 0x18]
	0x0352CE90 CMP W8, 0x47
	0x0352CE94 STR W8, [X19 + 0x18]
	0x0352CE98 B.GE 0x352CF58
	0x0352CE9C ADRP X8, 0xBF0000
	0x0352CEA0 LDR X8, [X8 + 0xD08]
	0x0352CEA4 MOVZ W1, 0x46
	0x0352CEA8 LDR X0, [X8]
	0x0352CEAC BL 0x1C16D6C
	0x0352CEB0 LDR W8, [X19 + 0x18]
	0x0352CEB4 STR X0, [X19 + 0x10]
	0x0352CEB8 SUBS W8, W8, 0x1
	0x0352CEBC B.MI 0x352CF44
	0x0352CEC0 LDR W10, [X20 + 0x18]
	0x0352CEC4 MOV W9, W31
	0x0352CEC8 MOV W11, W8
	0x0352CECC CMP W8, W10
	0x0352CED0 B.CS 0x352CF50
	0x0352CED4 CBZ X0, 0x352CF54
	0x0352CED8 LDR W12, [X0 + 0x18]
	0x0352CEDC CMP W9, W12
	0x0352CEE0 B.CS 0x352CF50
	0x0352CEE4 ADD X12, X20, W11, 0x2, UXTW
	0x0352CEE8 LDR W12, [X12 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xEB4000
	007 Move X21, 0xBF1000
	008 Move W8, [X22+2948]
	009 Move X21, [X21+3336]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xBF1000
	017 Move X0, [X0+3336]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2948], W8
	021 Move X0, X19
	022 Move X1, X31
	023 Move [X19+16], X31
	024 Call Object..ctor, X0
	025 Move X0, [X21]
	026 Move W1, 70
	027 Call 0x1C17D6C
	028 Move [X19+16], X0
	029 Compare X20, 0
	030 JumpIfEqual {58}
	031 Move W8, [X20+24]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move [X19+24], W8
	034 Move X11, [X20+16]
	035 Compare X11, 0
	036 JumpIfEqual {58}
	037 Move W9, [X11+24]
	038 Move X8, X31
	039 Add X10, X0, 32
	040 Add X11, X11, 32
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Compare X0, 0
	043 JumpIfEqual {58}
	044 Move W12, [X0+24]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move W12, [X11]
	047 Move [X10], W12
	048 NotImplemented "Instruction LDRSW not yet implemented."
	049 Add X8, X8, 1
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move X30, [X31+48]
	056 Return 
	057 Call 0x1C17F28
	058 Call 0x1C17F20

Method: System.Void .ctor(System.String value, System.Int32 radix)

Disassembly:
	0x0352CEEC SUB W11, W11, 0x1
	0x0352CEF0 ADD X13, X0, W9, 0x2, SXTW
	0x0352CEF4 ADDS W31, W11, 0x1
	0x0352CEF8 ADD W9, W9, 0x1
	0x0352CEFC STR W12, [X13 + 0x20]
	0x0352CF00 B.NE 0x352CECC
	0x0352CF04 LDR W8, [X19 + 0x18]
	0x0352CF08 CMP W8, 0x2
	0x0352CF0C B.LT 0x352CF44
	0x0352CF10 LDR W9, [X0 + 0x18]
	0x0352CF14 ADD X10, X0, 0x1C
	0x0352CF18 SUB X11, X8, 0x1
	0x0352CF1C CMP X11, X9
	0x0352CF20 B.CS 0x352CF50
	0x0352CF24 LDR W12, [X10, X8, LSL #2]
	0x0352CF28 CBNZ W12, 0x352CF44
	0x0352CF2C SUB W8, W8, 0x1
	0x0352CF30 ADD X12, X11, 0x1
	0x0352CF34 CMP X12, 0x3
	0x0352CF38 STR W8, [X19 + 0x18]
	0x0352CF3C MOV X8, X11
	0x0352CF40 B.GE 0x352CF18
	0x0352CF44 LDP X20, X19, [X31 + 0x10]
	0x0352CF48 LDP X30, X21, [X31], #0x20
	0x0352CF4C RET
	0x0352CF50 BL 0x1C16F28
	0x0352CF54 BL 0x1C16F20
	0x0352CF58 ADRP X0, 0xBF5000
	0x0352CF5C LDR X0, [X0 + 0x560]
	0x0352CF60 BL 0x1C16D08
	0x0352CF64 BL 0x1C16F10
	0x0352CF68 MOV X19, X0
	0x0352CF6C ADRP X0, 0xC08000
	0x0352CF70 LDR X0, [X0 + 0x9B0]
	0x0352CF74 BL 0x1C16D08
	0x0352CF78 MOV X1, X0
	0x0352CF7C MOV X0, X19
	0x0352CF80 MOV X2, X31
	0x0352CF84 BL 0x3316338
	0x0352CF88 ADRP X0, 0xC08000
	0x0352CF8C LDR X0, [X0 + 0x9C8]
	0x0352CF90 BL 0x1C16D08
	0x0352CF94 MOV X1, X0
	0x0352CF98 MOV X0, X19
	0x0352CF9C BL 0x1C16DEC
	0x0352CFA0 STP X30, X21, [X31 - 0x20]!
	0x0352CFA4 STP X20, X19, [X31 + 0x10]
	0x0352CFA8 ADRP X20, 0xEB3000
	0x0352CFAC ADRP X21, 0xC08000
	0x0352CFB0 LDRB W8, [X20 + 0xB89]
	0x0352CFB4 LDR X21, [X21 + 0x980]
	0x0352CFB8 MOV X19, X0
	0x0352CFBC TBNZ X8, 0x0, 0x352CFD4
	0x0352CFC0 ADRP X0, 0xC08000
	0x0352CFC4 LDR X0, [X0 + 0x980]
	0x0352CFC8 BL 0x1C16CF4
	0x0352CFCC MOVZ W8, 0x1
	0x0352CFD0 STRB W8, [X20 + 0xB89]
	0x0352CFD4 LDR X0, [X21]
	0x0352CFD8 BL 0x1C16F10
	0x0352CFDC MOV X1, X19
	0x0352CFE0 MOV X20, X0
	0x0352CFE4 BL 0x352BB6C
	0x0352CFE8 MOV X0, X20
	0x0352CFEC LDP X20, X19, [X31 + 0x10]
	0x0352CFF0 LDP X30, X21, [X31], #0x20
	0x0352CFF4 RET
	0x0352CFF8 STP X30, X21, [X31 - 0x20]!
	0x0352CFFC STP X20, X19, [X31 + 0x10]
	0x0352D000 ADRP X20, 0xEB2000
	0x0352D004 ADRP X21, 0xC07000
	0x0352D008 LDRB W8, [X20 + 0xB8A]
	0x0352D00C B 0x3EB167C
	0x0352D010 MOV X19, X0
	0x0352D014 TBNZ X8, 0x0, 0x352D02C
	0x0352D018 ADRP X0, 0xC07000
	0x0352D01C LDR X0, [X0 + 0x980]
	0x0352D020 BL 0x1C16CF4
	0x0352D024 MOVZ W8, 0x1
	0x0352D028 STRB W8, [X20 + 0xB8A]
	0x0352D02C LDR X0, [X21]
	0x0352D030 BL 0x1C16F10
	0x0352D034 MOV X1, X19
	0x0352D038 MOV X20, X0
	0x0352D03C BL 0x352BCF4
	0x0352D040 MOV X0, X20
	0x0352D044 LDP X20, X19, [X31 + 0x10]
	0x0352D048 LDP X30, X21, [X31], #0x20
	0x0352D04C RET
	0x0352D050 STP X30, X21, [X31 - 0x20]!
	0x0352D054 STP X20, X19, [X31 + 0x10]
	0x0352D058 ADRP X20, 0xEB2000
	0x0352D05C ADRP X21, 0xC07000
	0x0352D060 LDRB W8, [X20 + 0xB8C]
	0x0352D064 LDR X21, [X21 + 0x980]
	0x0352D068 MOV W19, W0
	0x0352D06C TBNZ X8, 0x0, 0x352D084
	0x0352D070 ADRP X0, 0xC07000
	0x0352D074 LDR X0, [X0 + 0x980]
	0x0352D078 BL 0x1C16CF4
	0x0352D07C MOVZ W8, 0x1
	0x0352D080 STRB W8, [X20 + 0xB8C]
	0x0352D084 LDR X0, [X21]
	0x0352D088 BL 0x1C16F10
	0x0352D08C MOV W1, W19
	0x0352D090 MOV X20, X0
	0x0352D094 BL 0x352BCF4
	0x0352D098 MOV X0, X20
	0x0352D09C LDP X20, X19, [X31 + 0x10]
	0x0352D0A0 LDP X30, X21, [X31], #0x20
	0x0352D0A4 RET
	0x0352D0A8 STP X30, X21, [X31 - 0x20]!
	0x0352D0AC STP X20, X19, [X31 + 0x10]
	0x0352D0B0 ADRP X19, 0xEB2000
	0x0352D0B4 ADRP X21, 0xC07000
	0x0352D0B8 LDRB W8, [X19 + 0xB8E]
	0x0352D0BC LDR X21, [X21 + 0x980]
	0x0352D0C0 MOV X20, X0
	0x0352D0C4 TBNZ X8, 0x0, 0x352D0DC
	0x0352D0C8 ADRP X0, 0xC07000
	0x0352D0CC LDR X0, [X0 + 0x980]
	0x0352D0D0 BL 0x1C16CF4
	0x0352D0D4 MOVZ W8, 0x1
	0x0352D0D8 STRB W8, [X19 + 0xB8E]
	0x0352D0DC LDR X0, [X21]
	0x0352D0E0 BL 0x1C16F10
	0x0352D0E4 MOV X1, X20
	0x0352D0E8 MOV X19, X0
	0x0352D0EC BL 0x352BE1C
	0x0352D0F0 CBZ X19, 0x352D1DC
	0x0352D0F4 LDR X8, [X19 + 0x10]
	0x0352D0F8 MOV X9, X31
	0x0352D0FC ADD X10, X8, 0x20
	0x0352D100 CBZ X8, 0x352D1DC
	0x0352D104 LDR W11, [X8 + 0x18]
	0x0352D108 CMP X9, X11
	0x0352D10C B.CS 0x352D1D8
	0x0352D110 LDR W11, [X10, X9, LSL #2]
	0x0352D114 CMP X9, 0x44
	0x0352D118 ADD X12, X11, 0x1
	0x0352D11C ADD X11, X9, 0x1
	0x0352D120 STR W12, [X10, X9, LSL #2]
	0x0352D124 B.HI 0x352D130
	0x0352D128 MOV X9, X11
	0x0352D12C TBNZ X12, 0x0, 0x352D100
	0x0352D130 LDR W8, [X19 + 0x18]
	0x0352D134 CMP W8, W11
	0x0352D138 B.GE 0x352D144
	0x0352D13C STR W11, [X19 + 0x18]
	0x0352D140 B 0x352D188
	0x0352D144 CMP W8, 0x2
	0x0352D148 B.LT 0x352D188
	0x0352D14C LDR X10, [X19 + 0x10]
	0x0352D150 CBZ X10, 0x352D1DC
	0x0352D154 LDR W9, [X10 + 0x18]
	0x0352D158 ADD X10, X10, 0x1C
	0x0352D15C SUB X11, X8, 0x1
	0x0352D160 CMP X11, X9
	0x0352D164 B.CS 0x352D1D8
	0x0352D168 LDR W12, [X10, X8, LSL #2]
	0x0352D16C CBNZ W12, 0x352D188
	0x0352D170 SUB W8, W8, 0x1
	0x0352D174 ADD X12, X11, 0x1
	0x0352D178 CMP X12, 0x3
	0x0352D17C STR W8, [X19 + 0x18]
	0x0352D180 MOV X8, X11
	0x0352D184 B.GE 0x352D15C
	0x0352D188 CBZ X20, 0x352D1DC
	0x0352D18C LDR X8, [X20 + 0x10]
	0x0352D190 CBZ X8, 0x352D1DC
	0x0352D194 LDR W9, [X8 + 0x18]
	0x0352D198 CMP W9, 0x45
	0x0352D19C B.LS 0x352D1D8
	0x0352D1A0 LDR W8, [X8 + 0x134]
	0x0352D1A4 TBNZ X8, 0x1F, 0x352D1C8
	0x0352D1A8 LDR X9, [X19 + 0x10]
	0x0352D1AC CBZ X9, 0x352D1DC
	0x0352D1B0 LDR W10, [X9 + 0x18]
	0x0352D1B4 CMP W10, 0x45
	0x0352D1B8 B.LS 0x352D1D8
	0x0352D1BC LDR W9, [X9 + 0x134]
	0x0352D1C0 EOR W8, W9, W8, 0x0
	0x0352D1C4 TBNZ X8, 0x1F, 0x352D1E0
	0x0352D1C8 MOV X0, X19
	0x0352D1CC LDP X20, X19, [X31 + 0x10]
	0x0352D1D0 LDP X30, X21, [X31], #0x20
	0x0352D1D4 RET
	0x0352D1D8 BL 0x1C16F28
	0x0352D1DC BL 0x1C16F20
	0x0352D1E0 ADRP X0, 0xBF4000
	0x0352D1E4 LDR X0, [X0 + 0x560]
	0x0352D1E8 BL 0x1C16D08
	0x0352D1EC BL 0x1C16F10
	0x0352D1F0 MOV X19, X0
	0x0352D1F4 ADRP X0, 0xC07000

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X20, 0xEB4000
	013 Move X26, 0xC09000
	014 Move W8, [X20+2949]
	015 Move X26, [X26+2432]
	016 Move W21, W2
	017 Move X23, X1
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {31}
	023 Move X0, 0xC09000
	024 Move X0, [X0+2432]
	025 Call 0x1C17CF4
	026 Move X0, 0xBF1000
	027 Move X0, [X0+3336]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+2949], W8
	031 Move X0, X19
	032 Move X1, X31
	033 Move [X19+16], X31
	034 Call Object..ctor, X0
	035 Move X0, [X26]
	036 Call 0x1C17F10
	037 Move W1, 1
	038 Move X22, X0
	039 Call BigInteger..ctor, X0, X1
	040 Move X0, [X26]
	041 Call 0x1C17F10
	042 Move X20, X0
	043 Call BigInteger..ctor, X0
	044 Compare X23, 0
	045 JumpIfEqual {184}
	046 Move X0, X23
	047 Move X1, X31
	048 Call String.ToUpper, X0
	049 Compare X0, 0
	050 JumpIfEqual {184}
	051 Move X1, X31
	052 Call String.Trim, X0
	053 Compare X0, 0
	054 JumpIfEqual {184}
	055 Move W1, W31
	056 Move X2, X31
	057 Move X23, X0
	058 Call String.get_Chars, X0, X1
	059 Move W8, [X23+16]
	060 And W9, W0, 0xFFFF
	061 NotImplemented "Instruction CMP not yet implemented."
	062 NotImplemented "Instruction CSET not yet implemented."
	063 Subtract W24, W8, 1
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X0, X23
	066 Move W1, W31
	067 Move X2, X31
	068 Call String.get_Chars, X0, X1
	069 Compare X20, 0
	070 JumpIfEqual {184}
	071 Move X8, [X20+16]
	072 Compare X8, 0
	073 JumpIfEqual {184}
	074 Move W9, [X8+24]
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move W8, [X8+308]
	077 And W9, W0, 0xFFFF
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move TEMP, X8
	080 And TEMP, TEMP, -2147483648
	081 Compare TEMP, -2147483648
	082 JumpIfEqual {145}
	083 Move X0, 0xBF5000
	084 Move X0, [X0+1376]
	085 Call 0x1C17D08
	086 Call 0x1C17F10
	087 Move X19, X0
	088 Move X0, 0xC08000
	089 Move X0, [X0+2408]
	090 Move W28, 0x967F
	091 NotImplemented "Instruction MOVK not yet implemented."
	092 Move X0, X23
	093 Move W1, W24
	094 Move X2, X31
	095 Call String.get_Chars, X0, X1
	096 Subtract W8, W0, 48
	097 And W8, W8, 0xFFFF
	098 NotImplemented "Instruction CMP not yet implemented."
	099 And W8, W0, 0xFFFF
	100 Subtract W9, W8, 65
	101 Subtract W8, W8, 55
	102 NotImplemented "Instruction CMP not yet implemented."
	103 NotImplemented "Instruction CSEL not yet implemented."
	104 Subtract W25, W8, 48
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move X0, X23
	107 Move W1, W31
	108 Move X2, X31
	109 Call String.get_Chars, X0, X1
	110 Move X8, [X26]
	111 And W10, W0, 0xFFFF
	112 NotImplemented "Instruction CMP not yet implemented."
	113 NotImplemented "Instruction CSNEG not yet implemented."
	114 Move W9, [X8+224]
	115 Compare W9, 0
	116 JumpIfNotEqual {119}
	117 Move X0, X8
	118 Call 0x1C17DFC
	119 Move W0, W25
	120 Call BigInteger.op_Implicit, X0
	121 Move X1, X0
	122 Move X0, X22
	123 Call BigInteger.op_Multiply, X0, X1
	124 Move X1, X0
	125 Move X0, X20
	126 Call BigInteger.op_Addition, X0, X1
	127 Subtract W24, W24, 1
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move X20, X0
	130 Move X0, [X26]
	131 Move W8, [X0+224]
	132 Compare W8, 0
	133 JumpIfNotEqual {135}
	134 Call 0x1C17DFC
	135 Move W0, W21
	136 Call BigInteger.op_Implicit, X0
	137 Move X1, X0
	138 Move X0, X22
	139 Call BigInteger.op_Multiply, X0, X1
	140 Move X22, X0
	141 Move TEMP, X8
	142 And TEMP, TEMP, -2147483648
	143 Compare TEMP, -2147483648
	144 JumpIfEqual {203}
	145 Move X8, 0xBF0000
	146 Move X8, [X8+3336]
	147 Move W1, 70
	148 Move X0, [X8]
	149 Call 0x1C17D6C
	150 Move [X19+16], X0
	151 Move W12, [X20+24]
	152 NotImplemented "Instruction CMP not yet implemented."
	153 Move X11, [X20+16]
	154 Compare X11, 0
	155 JumpIfEqual {184}
	156 Move W9, [X11+24]
	157 Move X8, X31
	158 Add X10, X0, 32
	159 Add X11, X11, 32
	160 NotImplemented "Instruction CMP not yet implemented."
	161 Compare X0, 0
	162 JumpIfEqual {184}
	163 Move W12, [X0+24]
	164 NotImplemented "Instruction CMP not yet implemented."
	165 Move W12, [X11]
	166 Move [X10], W12
	167 NotImplemented "Instruction LDRSW not yet implemented."
	168 Add X8, X8, 1
	169 NotImplemented "Instruction CMP not yet implemented."
	170 Move [X19+24], W12
	171 Move X20, [X31+80]
	172 Move X19, [X31+88]
	173 Move X22, [X31+64]
	174 Move X21, [X31+72]
	175 Move X24, [X31+48]
	176 Move X23, [X31+56]
	177 Move X26, [X31+32]
	178 Move X25, [X31+40]
	179 Move X28, [X31+16]
	180 Move X27, [X31+24]
	181 Move X30, [X31+96]
	182 Return 
	183 Call 0x1C17F28
	184 Call 0x1C17F20
	185 Move X0, 0xBF5000
	186 Move X0, [X0+1376]
	187 Call 0x1C17D08
	188 Call 0x1C17F10
	189 Move X19, X0
	190 Move X0, 0xC08000
	191 Move X0, [X0+2440]
	192 Call 0x1C17D08
	193 Move X1, X0
	194 Move X0, X19
	195 Move X2, X31
	196 Call ArithmeticException..ctor, X0, X1
	197 Move X0, 0xC08000
	198 Move X0, [X0+2448]
	199 Call 0x1C17D08
	200 Move X1, X0
	201 Move X0, X19
	202 Call 0x1C17DEC
	203 Move X0, 0xBF5000
	204 Move X0, [X0+1376]
	205 Call 0x1C17D08
	206 Call 0x1C17F10
	207 Move X19, X0
	208 Move X0, 0xC08000
	209 Move X0, [X0+2400]

Method: System.Void .ctor(System.Byte[] inData)

Disassembly:
	0x0352D93C STRB W8, [X19 + 0xB93]
	0x0352D940 LDR X0, [X22]
	0x0352D944 BL 0x1C16F10
	0x0352D948 MOV X1, X20
	0x0352D94C MOV X19, X0
	0x0352D950 BL 0x352BE1C
	0x0352D954 CBZ X19, 0x352DA4C
	0x0352D958 LDR X0, [X22]
	0x0352D95C LDR X22, [X19 + 0x10]
	0x0352D960 LDR W8, [X0 + 0xE0]
	0x0352D964 CBNZ W8, 0x352D96C
	0x0352D968 BL 0x1C16DFC
	0x0352D96C MOV X0, X22
	0x0352D970 MOV W1, W21
	0x0352D974 BL 0x352DA50
	0x0352D978 STR W0, [X19 + 0x18]
	0x0352D97C CBZ X20, 0x352DA4C
	0x0352D980 LDR X8, [X20 + 0x10]
	0x0352D984 CBZ X8, 0x352DA4C
	0x0352D988 LDR W9, [X8 + 0x18]
	0x0352D98C CMP W9, 0x45
	0x0352D990 B.LS 0x352DA2C
	0x0352D994 LDR W8, [X8 + 0x134]
	0x0352D998 TBZ X8, 0x1F, 0x352DA38
	0x0352D99C LDR X8, [X19 + 0x10]
	0x0352D9A0 CMP W0, 0x45
	0x0352D9A4 B.LE 0x352D9B0
	0x0352D9A8 CBNZ X8, 0x352D9E0
	0x0352D9AC B 0x352DA4C
	0x0352D9B0 CBZ X8, 0x352DA4C
	0x0352D9B4 LDR W9, [X8 + 0x18]
	0x0352D9B8 MOVZ W10, 0x45
	0x0352D9BC MOVN W11, 0x0
	0x0352D9C0 CMP W10, W9
	0x0352D9C4 B.CS 0x352DA2C
	0x0352D9C8 ADD X12, X8, W10, 0x2, SXTW
	0x0352D9CC STR W11, [X12 + 0x20]
	0x0352D9D0 LDR W0, [X19 + 0x18]
	0x0352D9D4 SUB W10, W10, 0x1
	0x0352D9D8 CMP W10, W0
	0x0352D9DC B.GE 0x352D9C0
	0x0352D9E0 LDR W9, [X8 + 0x18]
	0x0352D9E4 SUB W12, W0, 0x1
	0x0352D9E8 CMP W12, W9
	0x0352D9EC B.CS 0x352DA2C
	0x0352D9F0 MOVZ W10, 0x80000000
	0x0352D9F4 MOVZ W11, 0x20
	0x0352D9F8 ADD X12, X8, W12, 0x2, SXTW
	0x0352D9FC LDR W13, [X12 + 0x20]!
	0x0352DA00 ANDS W31, W13, W10, 0x0
	0x0352DA04 B.NE 0x352DA30
	0x0352DA08 ORR W13, W13, W10, 0x0
	0x0352DA0C SUBS W11, W11, 0x1
	0x0352DA10 STR W13, [X12]
	0x0352DA14 B.EQ 0x352DA30
	0x0352DA18 LDR W12, [X19 + 0x18]
	0x0352DA1C UBFM W10, W10, 0x1, 0x1F
	0x0352DA20 SUB W12, W12, 0x1
	0x0352DA24 CMP W12, W9
	0x0352DA28 B.CC 0x352D9F8
	0x0352DA2C BL 0x1C16F28
	0x0352DA30 MOVZ W8, 0x46
	0x0352DA34 STR W8, [X19 + 0x18]
	0x0352DA38 MOV X0, X19
	0x0352DA3C LDP X20, X19, [X31 + 0x20]
	0x0352DA40 LDP X22, X21, [X31 + 0x10]
	0x0352DA44 LDR X30, [X31], #0x30
	0x0352DA48 RET
	0x0352DA4C BL 0x1C16F20
	0x0352DA50 STR X30, [X31 - 0x10]!
	0x0352DA54 CBZ X0, 0x352DB5C
	0x0352DA58 LDR X9, [X0 + 0x18]
	0x0352DA5C MOV X8, X0
	0x0352DA60 CMP W9, 0x2
	0x0352DA64 CSET W10, LT
	0x0352DA68 B.GE 0x352DA74
	0x0352DA6C MOV W0, W9
	0x0352DA70 B 0x352DAA8
	0x0352DA74 MOV W11, W9
	0x0352DA78 SUB W0, W11, 0x1
	0x0352DA7C CMP W0, W9
	0x0352DA80 B.CS 0x352DB58
	0x0352DA84 ADD X12, X8, W0, 0x2, UXTW
	0x0352DA88 LDR W12, [X12 + 0x20]
	0x0352DA8C CBNZ W12, 0x352DAA4
	0x0352DA90 CMP W11, 0x3
	0x0352DA94 CSET W10, LT
	0x0352DA98 MOV W11, W0
	0x0352DA9C B.GE 0x352DA78
	0x0352DAA0 B 0x352DAA8
	0x0352DAA4 MOV W0, W11
	0x0352DAA8 CMP W1, 0x1
	0x0352DAAC B.LT 0x352DB18
	0x0352DAB0 MOV W11, W31
	0x0352DAB4 SUB W12, W0, 0x1
	0x0352DAB8 MOVZ W13, 0x20
	0x0352DABC MOVZ W14, 0x20
	0x0352DAC0 SUB W15, W13, W1
	0x0352DAC4 CMP W1, W14
	0x0352DAC8 CSEL W11, W15, W11, LT
	0x0352DACC CSEL W14, W1, W14, LT
	0x0352DAD0 TBNZ X12, 0x1F, 0x352DB0C
	0x0352DAD4 MOV X16, X31
	0x0352DAD8 AND W15, W14, 0x3F
	0x0352DADC AND W17, W11, 0x3F
	0x0352DAE0 MOV W2, W12
	0x0352DAE4 CMP W12, W9
	0x0352DAE8 B.CS 0x352DB58
	0x0352DAEC ADD X3, X8, W2, 0x2, UXTW
	0x0352DAF0 LDR W4, [X3 + 0x20]
	0x0352DAF4 SUBS W2, W2, 0x1
	0x0352DAF8 LSRV X5, X4, X15
	0x0352DAFC ORR W5, W5, W16, 0x0
	0x0352DB00 LSLV X16, X4, X17
	0x0352DB04 STR W5, [X3 + 0x20]
	0x0352DB08 B.PL 0x352DAE4
	0x0352DB0C SUB W1, W1, W14
	0x0352DB10 CMP W1, 0x0
	0x0352DB14 B.GT 0x352DAC0
	0x0352DB18 TBNZ X10, 0x0, 0x352DB50
	0x0352DB1C AND X9, X9, 0x0
	0x0352DB20 MOV W0, W0
	0x0352DB24 ADD X8, X8, 0x1C
	0x0352DB28 SUB X10, X0, 0x1
	0x0352DB2C CMP X10, X9
	0x0352DB30 B.CS 0x352DB58
	0x0352DB34 LDR W11, [X8, X0, LSL #2]
	0x0352DB38 CBNZ W11, 0x352DB50
	0x0352DB3C ADD X11, X10, 0x1
	0x0352DB40 CMP X11, 0x3
	0x0352DB44 MOV X0, X10
	0x0352DB48 B.GE 0x352DB28
	0x0352DB4C MOVZ W0, 0x1
	0x0352DB50 LDR X30, [X31], #0x10
	0x0352DB54 RET
	0x0352DB58 BL 0x1C16F28
	0x0352DB5C BL 0x1C16F20
	0x0352DB60 STP X30, X21, [X31 - 0x20]!
	0x0352DB64 STP X20, X19, [X31 + 0x10]
	0x0352DB68 ADRP X19, 0xEB2000
	0x0352DB6C ADRP X21, 0xC07000
	0x0352DB70 LDRB W8, [X19 + 0xB94]
	0x0352DB74 LDR X21, [X21 + 0x980]
	0x0352DB78 MOV X20, X0
	0x0352DB7C TBNZ X8, 0x0, 0x352DB94
	0x0352DB80 ADRP X0, 0xC07000
	0x0352DB84 LDR X0, [X0 + 0x980]
	0x0352DB88 BL 0x1C16CF4
	0x0352DB8C MOVZ W8, 0x1
	0x0352DB90 STRB W8, [X19 + 0xB94]
	0x0352DB94 LDR X0, [X21]
	0x0352DB98 BL 0x1C16F10
	0x0352DB9C MOV X1, X20
	0x0352DBA0 MOV X19, X0
	0x0352DBA4 BL 0x352BE1C
	0x0352DBA8 CBZ X19, 0x352DC48

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xEB3000
	006 Move W8, [X21+2950]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xBF0000
	014 Move X0, [X0+3336]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2950], W8
	018 Move X0, X19
	019 Move X1, X31
	020 Move [X19+16], X31
	021 Call Object..ctor, X0
	022 Compare X20, 0
	023 JumpIfEqual {137}
	024 Move W8, [X20+24]
	025 NotImplemented "Instruction SBFM not yet implemented."
	026 And W21, W8, 3
	027 NotImplemented "Instruction CINC not yet implemented."
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move [X19+24], W8
	030 Move X8, 0xBF0000
	031 Move X8, [X8+3336]
	032 Move W1, 70
	033 Move X0, [X8]
	034 Call 0x1C17D6C
	035 Move [X19+16], X0
	036 Move X8, [X20+24]
	037 Subtract W11, W8, 1
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X9, X31
	040 And X10, X8, 0
	041 Move W12, W11
	042 Add X11, X0, 32
	043 Subtract X13, X12, 3
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Subtract X13, X12, 2
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Subtract X13, X12, 1
	048 NotImplemented "Instruction CMP not yet implemented."
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Compare X0, 0
	051 JumpIfEqual {137}
	052 Move W13, [X0+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Add X13, X20, X12
	055 Move W16, [X13+29]
	056 Add X14, X20, X12
	057 Move W13, [X13+30]
	058 Add X15, X20, X12
	059 Move W14, [X14+31]
	060 Move W15, [X15+32]
	061 Move W16, W16
	062 ShiftRight W16, 8
	063 And W16, W16, 127
	064 NotImplemented "Instruction BFM not yet implemented."
	065 NotImplemented "Instruction BFM not yet implemented."
	066 Or W13, W16, W15
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Subtract X12, X12, 4
	069 Move [X11], W13
	070 Add X9, X9, 1
	071 NotImplemented "Instruction CMP not yet implemented."
	072 NotImplemented "Instruction CMP not yet implemented."
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Compare W8, 0
	075 JumpIfEqual {136}
	076 Compare X0, 0
	077 JumpIfEqual {137}
	078 Move W8, [X19+24]
	079 Move W9, [X0+24]
	080 Subtract W8, W8, 1
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move W9, [X20+32]
	083 Compare W8, 0
	084 JumpIfEqual {136}
	085 NotImplemented "Instruction CMP not yet implemented."
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Compare X0, 0
	088 JumpIfEqual {137}
	089 Move W8, [X19+24]
	090 Move W9, [X0+24]
	091 Subtract W8, W8, 1
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move W9, [X20+32]
	094 Move W10, [X20+33]
	095 Move W11, [X20+34]
	096 Move W9, W9
	097 ShiftRight W9, 16
	098 And W9, W9, 0x7FFF
	099 NotImplemented "Instruction BFM not yet implemented."
	100 Or W9, W9, W11
	101 Compare W8, 0
	102 JumpIfEqual {136}
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Compare X0, 0
	105 JumpIfEqual {137}
	106 Move W8, [X19+24]
	107 Move W9, [X0+24]
	108 Subtract W8, W8, 1
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Move W10, [X20+32]
	111 Move W9, [X20+33]
	112 NotImplemented "Instruction BFM not yet implemented."
	113 Add X8, X0, W8
	114 Move [X8+32], W9
	115 Move W8, [X19+24]
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Compare X0, 0
	118 JumpIfEqual {137}
	119 Move W9, [X0+24]
	120 Add X10, X0, 28
	121 Subtract X11, X8, 1
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move W12, [X10]
	124 Compare W12, 0
	125 JumpIfNotEqual {131}
	126 Subtract W8, W8, 1
	127 Add X12, X11, 1
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move [X19+24], W8
	130 Move X8, X11
	131 Move X20, [X31+16]
	132 Move X19, [X31+24]
	133 Move X30, [X31+32]
	134 Move X21, [X31+40]
	135 Return 
	136 Call 0x1C17F28
	137 Call 0x1C17F20
	138 Move X0, 0xBF5000
	139 Move X0, [X0+1376]
	140 Call 0x1C17D08
	141 Call 0x1C17F10
	142 Move X19, X0
	143 Move X0, 0xC08000
	144 Move X0, [X0+2480]
	145 Call 0x1C17D08
	146 Move X1, X0
	147 Move X0, X19
	148 Move X2, X31
	149 Call ArithmeticException..ctor, X0, X1
	150 Move X0, 0xC08000
	151 Move X0, [X0+2488]
	152 Call 0x1C17D08
	153 Move X1, X0
	154 Move X0, X19
	155 Call 0x1C17DEC

Method: System.Void .ctor(System.Byte[] inData, System.Int32 inLen)

Disassembly:
	0x0352DBAC LDR X8, [X19 + 0x10]
	0x0352DBB0 MOVZ W9, 0x8
	0x0352DBB4 CBZ X20, 0x352DC48
	0x0352DBB8 LDR X10, [X20 + 0x10]
	0x0352DBBC CBZ X10, 0x352DC48
	0x0352DBC0 LDR W12, [X10 + 0x18]
	0x0352DBC4 SUB X11, X9, 0x8
	0x0352DBC8 CMP X11, X12
	0x0352DBCC B.CS 0x352DC4C
	0x0352DBD0 CBZ X8, 0x352DC48
	0x0352DBD4 LDR W12, [X8 + 0x18]
	0x0352DBD8 CMP X11, X12
	0x0352DBDC B.CS 0x352DC4C
	0x0352DBE0 LDR W10, [X10, X9, LSL #2]
	0x0352DBE4 ORN W10, W31, W10, 0x0
	0x0352DBE8 STR W10, [X8, X9, LSL #2]
	0x0352DBEC ADD X9, X9, 0x1
	0x0352DBF0 CMP X9, 0x4E
	0x0352DBF4 B.NE 0x352DBB4
	0x0352DBF8 MOVZ W9, 0x46
	0x0352DBFC STR W9, [X19 + 0x18]
	0x0352DC00 CBZ X8, 0x352DC48
	0x0352DC04 LDR W9, [X8 + 0x18]
	0x0352DC08 MOVZ W10, 0x4D
	0x0352DC0C SUB X11, X10, 0x8
	0x0352DC10 CMP X11, X9
	0x0352DC14 B.CS 0x352DC4C
	0x0352DC18 LDR W11, [X8, X10, LSL #2]
	0x0352DC1C CBNZ W11, 0x352DC38
	0x0352DC20 SUB X12, X10, 0x7
	0x0352DC24 SUB W11, W10, 0x8
	0x0352DC28 SUB X10, X10, 0x1
	0x0352DC2C CMP X12, 0x3
	0x0352DC30 STR W11, [X19 + 0x18]
	0x0352DC34 B.CS 0x352DC0C
	0x0352DC38 MOV X0, X19
	0x0352DC3C LDP X20, X19, [X31 + 0x10]
	0x0352DC40 LDP X30, X21, [X31], #0x20
	0x0352DC44 RET
	0x0352DC48 BL 0x1C16F20
	0x0352DC4C BL 0x1C16F28
	0x0352DC50 STR X30, [X31 - 0x10]!
	0x0352DC54 CBZ X0, 0x352DC68
	0x0352DC58 LDR X8, [X0]
	0x0352DC5C LDP X3, X2, [X8 + 0x138]
	0x0352DC60 LDR X30, [X31], #0x10
	0x0352DC64 BR X3
	0x0352DC68 BL 0x1C16F20
	0x0352DC6C STR X30, [X31 - 0x10]!
	0x0352DC70 CBZ X0, 0x352DC90
	0x0352DC74 LDR X8, [X0]
	0x0352DC78 LDP X9, X2, [X8 + 0x138]
	0x0352DC7C BLR X9
	0x0352DC80 ORN W8, W31, W0, 0x0
	0x0352DC84 AND W0, W8, 0x1
	0x0352DC88 LDR X30, [X31], #0x10
	0x0352DC8C RET
	0x0352DC90 BL 0x1C16F20
	0x0352DC94 STP X30, X21, [X31 - 0x20]!
	0x0352DC98 STP X20, X19, [X31 + 0x10]
	0x0352DC9C ADRP X21, 0xEB2000
	0x0352DCA0 LDRB W8, [X21 + 0xB96]
	0x0352DCA4 MOV X19, X1
	0x0352DCA8 MOV X20, X0
	0x0352DCAC TBNZ X8, 0x0, 0x352DCC4
	0x0352DCB0 ADRP X0, 0xC07000
	0x0352DCB4 LDR X0, [X0 + 0x980]
	0x0352DCB8 BL 0x1C16CF4
	0x0352DCBC MOVZ W8, 0x1
	0x0352DCC0 STRB W8, [X21 + 0xB96]
	0x0352DCC4 CBZ X19, 0x352DD90
	0x0352DCC8 ADRP X9, 0xC07000
	0x0352DCCC LDR X9, [X9 + 0x980]
	0x0352DCD0 LDR X8, [X19]
	0x0352DCD4 LDR X1, [X9]
	0x0352DCD8 LDRB W10, [X8 + 0x130]
	0x0352DCDC LDRB W9, [X1 + 0x130]
	0x0352DCE0 CMP W10, W9
	0x0352DCE4 B.CC 0x352DD94
	0x0352DCE8 LDR X8, [X8 + 0xC8]
	0x0352DCEC ADD X8, X8, X9, 0x3, LSL
	0x0352DCF0 LDUR X8, [X8 - 0x8]
	0x0352DCF4 CMP X8, X1
	0x0352DCF8 B.NE 0x352DD94
	0x0352DCFC LDR W8, [X20 + 0x18]
	0x0352DD00 LDR W9, [X19 + 0x18]
	0x0352DD04 CMP W8, W9
	0x0352DD08 B.NE 0x352DD74
	0x0352DD0C SUBS W8, W8, 0x1
	0x0352DD10 B.LT 0x352DD7C
	0x0352DD14 LDR X9, [X20 + 0x10]
	0x0352DD18 CBZ X9, 0x352DD90
	0x0352DD1C LDR W10, [X9 + 0x18]
	0x0352DD20 MOV W11, W31
	0x0352DD24 CMP W11, W10
	0x0352DD28 B.CS 0x352DD8C
	0x0352DD2C LDR X12, [X19 + 0x10]
	0x0352DD30 CBZ X12, 0x352DD90
	0x0352DD34 LDR W13, [X12 + 0x18]
	0x0352DD38 SXTW X11, W11
	0x0352DD3C CMP W11, W13
	0x0352DD40 B.CS 0x352DD8C
	0x0352DD44 ADD X13, X9, X11, 0x2, LSL
	0x0352DD48 ADD X14, X12, X11, 0x2, LSL
	0x0352DD4C LDR W12, [X13 + 0x20]
	0x0352DD50 LDR W13, [X14 + 0x20]
	0x0352DD54 CMP W12, W13
	0x0352DD58 CSET W0, EQ
	0x0352DD5C CMP W8, W11
	0x0352DD60 B.EQ 0x352DD80
	0x0352DD64 CMP W12, W13
	0x0352DD68 ADD W11, W11, 0x1
	0x0352DD6C B.EQ 0x352DD24
	0x0352DD70 B 0x352DD80
	0x0352DD74 MOV W0, W31
	0x0352DD78 B 0x352DD80
	0x0352DD7C MOVZ W0, 0x1
	0x0352DD80 LDP X20, X19, [X31 + 0x10]
	0x0352DD84 LDP X30, X21, [X31], #0x20
	0x0352DD88 RET
	0x0352DD8C BL 0x1C16F28
	0x0352DD90 BL 0x1C16F20
	0x0352DD94 MOV X0, X19
	0x0352DD98 BL 0x1C171E0
	0x0352DD9C STR X30, [X31 - 0x10]!
	0x0352DDA0 LDR X8, [X0]
	0x0352DDA4 LDP X9, X1, [X8 + 0x168]
	0x0352DDA8 BLR X9
	0x0352DDAC CBZ X0, 0x352DDC0
	0x0352DDB0 LDR X8, [X0]
	0x0352DDB4 LDP X2, X1, [X8 + 0x158]
	0x0352DDB8 LDR X30, [X31], #0x10
	0x0352DDBC BR X2
	0x0352DDC0 BL 0x1C16F20
	0x0352DDC4 STR X30, [X31 - 0x10]!
	0x0352DDC8 CBZ X0, 0x352DE8C
	0x0352DDCC LDR X8, [X0 + 0x10]
	0x0352DDD0 CBZ X8, 0x352DE8C
	0x0352DDD4 LDR W9, [X8 + 0x18]
	0x0352DDD8 CMP W9, 0x45
	0x0352DDDC B.LS 0x352DE88
	0x0352DDE0 LDR W10, [X8 + 0x134]
	0x0352DDE4 TBNZ X10, 0x1F, 0x352DE10
	0x0352DDE8 CBZ X1, 0x352DE8C
	0x0352DDEC LDR X10, [X1 + 0x10]
	0x0352DDF0 CBZ X10, 0x352DE8C
	0x0352DDF4 LDR X11, [X10 + 0x18]
	0x0352DDF8 CMP W11, 0x45
	0x0352DDFC B.LS 0x352DE88
	0x0352DE00 LDR W12, [X10 + 0x134]
	0x0352DE04 TBZ X12, 0x1F, 0x352DE38
	0x0352DE08 MOVZ W0, 0x1
	0x0352DE0C B 0x352DE80
	0x0352DE10 CBZ X1, 0x352DE8C
	0x0352DE14 LDR X10, [X1 + 0x10]
	0x0352DE18 CBZ X10, 0x352DE8C
	0x0352DE1C LDR X11, [X10 + 0x18]
	0x0352DE20 CMP W11, 0x45
	0x0352DE24 B.LS 0x352DE88
	0x0352DE28 LDR W12, [X10 + 0x134]
	0x0352DE2C TBNZ X12, 0x1F, 0x352DE38
	0x0352DE30 MOV W0, W31
	0x0352DE34 B 0x352DE80
	0x0352DE38 LDR W12, [X0 + 0x18]
	0x0352DE3C LDR W13, [X1 + 0x18]
	0x0352DE40 CMP W12, W13
	0x0352DE44 CSEL W12, W12, W13, GT

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xEB3000
	007 Move W8, [X22+2951]
	008 Move W21, W2
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xBF0000
	016 Move X0, [X0+3336]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+2951], W8
	020 Move X0, X19
	021 Move X1, X31
	022 Move [X19+16], X31
	023 Call Object..ctor, X0
	024 NotImplemented "Instruction SBFM not yet implemented."
	025 And W22, W21, 3
	026 NotImplemented "Instruction CINC not yet implemented."
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move [X19+24], W8
	029 Compare X20, 0
	030 JumpIfEqual {147}
	031 Move W8, [X20+24]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X8, 0xBF0000
	034 Move X8, [X8+3336]
	035 Move W1, 70
	036 Move X0, [X8]
	037 Call 0x1C17D6C
	038 Subtract W10, W21, 1
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move [X19+16], X0
	041 Move W9, [X20+24]
	042 Move X8, X31
	043 Move W11, W10
	044 Add X10, X0, 32
	045 Subtract X12, X11, 3
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Subtract X12, X11, 2
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Subtract X12, X11, 1
	050 NotImplemented "Instruction CMP not yet implemented."
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Compare X0, 0
	053 JumpIfEqual {147}
	054 Move W12, [X0+24]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Add X12, X20, X11
	057 Move W15, [X12+29]
	058 Add X13, X20, X11
	059 Move W12, [X12+30]
	060 Add X14, X20, X11
	061 Move W13, [X13+31]
	062 Move W14, [X14+32]
	063 Move W15, W15
	064 ShiftRight W15, 8
	065 And W15, W15, 127
	066 NotImplemented "Instruction BFM not yet implemented."
	067 NotImplemented "Instruction BFM not yet implemented."
	068 Or W12, W15, W14
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Subtract X11, X11, 4
	071 Move [X10], W12
	072 Add X8, X8, 1
	073 NotImplemented "Instruction CMP not yet implemented."
	074 NotImplemented "Instruction CMP not yet implemented."
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move W8, [X20+24]
	077 Compare W8, 0
	078 JumpIfEqual {146}
	079 Compare X0, 0
	080 JumpIfEqual {147}
	081 Move W8, [X19+24]
	082 Move W9, [X0+24]
	083 Subtract W8, W8, 1
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move W9, [X20+32]
	086 Move W8, [X20+24]
	087 Compare W8, 0
	088 JumpIfEqual {146}
	089 NotImplemented "Instruction CMP not yet implemented."
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Compare X0, 0
	092 JumpIfEqual {147}
	093 Move W8, [X19+24]
	094 Move W9, [X0+24]
	095 Subtract W8, W8, 1
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Move W9, [X20+32]
	098 Move W10, [X20+33]
	099 Move W11, [X20+34]
	100 Move W9, W9
	101 ShiftRight W9, 16
	102 And W9, W9, 0x7FFF
	103 NotImplemented "Instruction BFM not yet implemented."
	104 Or W9, W9, W11
	105 Move W8, [X20+24]
	106 Compare W8, 0
	107 JumpIfEqual {146}
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Compare X0, 0
	110 JumpIfEqual {147}
	111 Move W8, [X19+24]
	112 Move W9, [X0+24]
	113 Subtract W8, W8, 1
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Move W10, [X20+32]
	116 Move W9, [X20+33]
	117 NotImplemented "Instruction BFM not yet implemented."
	118 Add X8, X0, W8
	119 Move [X8+32], W9
	120 Move W8, [X19+24]
	121 Compare W8, 0
	122 JumpIfEqual {138}
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Compare X0, 0
	125 JumpIfEqual {147}
	126 Move W9, [X0+24]
	127 Add X10, X0, 28
	128 Subtract X11, X8, 1
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Move W12, [X10]
	131 Compare W12, 0
	132 JumpIfNotEqual {140}
	133 Subtract W8, W8, 1
	134 Add X12, X11, 1
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Move [X19+24], W8
	137 Move X8, X11
	138 Move W8, 1
	139 Move [X19+24], W8
	140 Move X20, [X31+32]
	141 Move X19, [X31+40]
	142 Move X22, [X31+16]
	143 Move X21, [X31+24]
	144 Move X30, [X31+48]
	145 Return 
	146 Call 0x1C17F28
	147 Call 0x1C17F20
	148 Move X0, 0xBF5000
	149 Move X0, [X0+1376]
	150 Call 0x1C17D08
	151 Call 0x1C17F10
	152 Move X19, X0
	153 Move X0, 0xC08000
	154 Move X0, [X0+2480]
	155 Call 0x1C17D08
	156 Move X1, X0
	157 Move X0, X19
	158 Move X2, X31
	159 Call ArithmeticException..ctor, X0, X1
	160 Move X0, 0xC08000
	161 Move X0, [X0+2496]
	162 Call 0x1C17D08
	163 Move X1, X0
	164 Move X0, X19
	165 Call 0x1C17DEC

Method: System.Void .ctor(System.UInt32[] inData)

Disassembly:
	0x0352DE48 SUBS W12, W12, 0x1
	0x0352DE4C B.MI 0x352DE30
	0x0352DE50 CMP W12, W9
	0x0352DE54 B.CS 0x352DE88
	0x0352DE58 CMP W12, W11
	0x0352DE5C B.CS 0x352DE88
	0x0352DE60 MOV W13, W12
	0x0352DE64 ADD X14, X8, X13, 0x2, LSL
	0x0352DE68 ADD X13, X10, X13, 0x2, LSL
	0x0352DE6C LDR W14, [X14 + 0x20]
	0x0352DE70 LDR W13, [X13 + 0x20]
	0x0352DE74 CMP W14, W13
	0x0352DE78 B.EQ 0x352DE48
	0x0352DE7C CSET W0, HI
	0x0352DE80 LDR X30, [X31], #0x10
	0x0352DE84 RET
	0x0352DE88 BL 0x1C16F28
	0x0352DE8C BL 0x1C16F20
	0x0352DE90 STR X30, [X31 - 0x10]!
	0x0352DE94 CBZ X0, 0x352DF58
	0x0352DE98 LDR X8, [X0 + 0x10]
	0x0352DE9C CBZ X8, 0x352DF58
	0x0352DEA0 LDR W9, [X8 + 0x18]
	0x0352DEA4 CMP W9, 0x45
	0x0352DEA8 B.LS 0x352DF54
	0x0352DEAC LDR W10, [X8 + 0x134]
	0x0352DEB0 TBNZ X10, 0x1F, 0x352DEDC
	0x0352DEB4 CBZ X1, 0x352DF58
	0x0352DEB8 LDR X10, [X1 + 0x10]
	0x0352DEBC CBZ X10, 0x352DF58
	0x0352DEC0 LDR X11, [X10 + 0x18]
	0x0352DEC4 CMP W11, 0x45
	0x0352DEC8 B.LS 0x352DF54
	0x0352DECC LDR W12, [X10 + 0x134]
	0x0352DED0 TBZ X12, 0x1F, 0x352DF04
	0x0352DED4 MOV W0, W31
	0x0352DED8 B 0x352DF4C
	0x0352DEDC CBZ X1, 0x352DF58
	0x0352DEE0 LDR X10, [X1 + 0x10]
	0x0352DEE4 CBZ X10, 0x352DF58
	0x0352DEE8 LDR X11, [X10 + 0x18]
	0x0352DEEC CMP W11, 0x45
	0x0352DEF0 B.LS 0x352DF54
	0x0352DEF4 LDR W12, [X10 + 0x134]
	0x0352DEF8 TBNZ X12, 0x1F, 0x352DF04
	0x0352DEFC MOVZ W0, 0x1
	0x0352DF00 B 0x352DF4C
	0x0352DF04 LDR W12, [X0 + 0x18]
	0x0352DF08 LDR W13, [X1 + 0x18]
	0x0352DF0C CMP W12, W13
	0x0352DF10 CSEL W12, W12, W13, GT
	0x0352DF14 SUBS W12, W12, 0x1
	0x0352DF18 B.MI 0x352DED4
	0x0352DF1C CMP W12, W9
	0x0352DF20 B.CS 0x352DF54
	0x0352DF24 CMP W12, W11
	0x0352DF28 B.CS 0x352DF54
	0x0352DF2C MOV W13, W12
	0x0352DF30 ADD X14, X8, X13, 0x2, LSL
	0x0352DF34 ADD X13, X10, X13, 0x2, LSL
	0x0352DF38 LDR W14, [X14 + 0x20]
	0x0352DF3C LDR W13, [X13 + 0x20]
	0x0352DF40 CMP W14, W13
	0x0352DF44 B.EQ 0x352DF14
	0x0352DF48 CSET W0, CC
	0x0352DF4C LDR X30, [X31], #0x10
	0x0352DF50 RET
	0x0352DF54 BL 0x1C16F28
	0x0352DF58 BL 0x1C16F20
	0x0352DF5C STR X30, [X31 - 0x30]!
	0x0352DF60 STP X22, X21, [X31 + 0x10]
	0x0352DF64 STP X20, X19, [X31 + 0x20]
	0x0352DF68 ADRP X22, 0xEB2000
	0x0352DF6C ADRP X21, 0xC07000
	0x0352DF70 LDRB W8, [X22 + 0xB97]
	0x0352DF74 LDR X21, [X21 + 0x980]
	0x0352DF78 MOV X19, X1
	0x0352DF7C MOV X20, X0
	0x0352DF80 TBNZ X8, 0x0, 0x352DF98
	0x0352DF84 ADRP X0, 0xC07000
	0x0352DF88 LDR X0, [X0 + 0x980]
	0x0352DF8C BL 0x1C16CF4
	0x0352DF90 MOVZ W8, 0x1
	0x0352DF94 STRB W8, [X22 + 0xB97]
	0x0352DF98 LDR X0, [X21]
	0x0352DF9C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xEB3000
	006 Move W8, [X21+2952]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xBF0000
	014 Move X0, [X0+3336]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2952], W8
	018 Move X0, X19
	019 Move X1, X31
	020 Move [X19+16], X31
	021 Call Object..ctor, X0
	022 Compare X20, 0
	023 JumpIfEqual {70}
	024 Move W8, [X20+24]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move [X19+24], W8
	027 Move X8, 0xBF0000
	028 Move X8, [X8+3336]
	029 Move W1, 70
	030 Move X0, [X8]
	031 Call 0x1C17D6C
	032 Move W8, [X19+24]
	033 Move [X19+16], X0
	034 Subtract W8, W8, 1
	035 Move W10, [X20+24]
	036 Move W9, W31
	037 Move W11, W8
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Compare X0, 0
	040 JumpIfEqual {70}
	041 Move W12, [X0+24]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Add X12, X20, W11
	044 Move W12, [X12+32]
	045 Subtract W11, W11, 1
	046 Add X13, X0, W9
	047 Add W31, W11, 1
	048 Add W9, W9, 1
	049 Move [X13+32], W12
	050 Move W8, [X19+24]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move W9, [X0+24]
	053 Add X10, X0, 28
	054 Subtract X11, X8, 1
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move W12, [X10]
	057 Compare W12, 0
	058 JumpIfNotEqual {64}
	059 Subtract W8, W8, 1
	060 Add X12, X11, 1
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move [X19+24], W8
	063 Move X8, X11
	064 Move X20, [X31+16]
	065 Move X19, [X31+24]
	066 Move X30, [X31+32]
	067 Move X21, [X31+40]
	068 Return 
	069 Call 0x1C17F28
	070 Call 0x1C17F20
	071 Move X0, 0xBF5000
	072 Move X0, [X0+1376]
	073 Call 0x1C17D08
	074 Call 0x1C17F10
	075 Move X19, X0
	076 Move X0, 0xC08000
	077 Move X0, [X0+2480]
	078 Call 0x1C17D08
	079 Move X1, X0
	080 Move X0, X19
	081 Move X2, X31
	082 Call ArithmeticException..ctor, X0, X1
	083 Move X0, 0xC08000
	084 Move X0, [X0+2504]
	085 Call 0x1C17D08
	086 Move X1, X0
	087 Move X0, X19
	088 Call 0x1C17DEC

Method: Photon.SocketServer.Numeric.BigInteger op_Implicit(System.Int64 value)

Disassembly:
	0x0352DFA0 CBNZ W8, 0x352DFA8
	0x0352DFA4 BL 0x1C16DFC
	0x0352DFA8 CBZ X20, 0x352E000
	0x0352DFAC LDR X8, [X20]
	0x0352DFB0 MOV X0, X20
	0x0352DFB4 MOV X1, X19
	0x0352DFB8 LDP X9, X2, [X8 + 0x138]
	0x0352DFBC BLR X9
	0x0352DFC0 TBZ X0, 0x0, 0x352DFD8
	0x0352DFC4 LDP X20, X19, [X31 + 0x20]
	0x0352DFC8 LDP X22, X21, [X31 + 0x10]
	0x0352DFCC MOVZ W0, 0x1
	0x0352DFD0 LDR X30, [X31], #0x30
	0x0352DFD4 RET
	0x0352DFD8 LDR X0, [X21]
	0x0352DFDC LDR W8, [X0 + 0xE0]
	0x0352DFE0 CBNZ W8, 0x352DFE8
	0x0352DFE4 BL 0x1C16DFC
	0x0352DFE8 MOV X0, X20
	0x0352DFEC MOV X1, X19
	0x0352DFF0 LDP X20, X19, [X31 + 0x20]
	0x0352DFF4 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xEB3000
	006 Move X21, 0xC08000
	007 Move W8, [X20+2953]
	008 Move X21, [X21+2432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xC08000
	015 Move X0, [X0+2432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2953], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X19
	022 Move X20, X0
	023 Call BigInteger..ctor, X0, X1
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: Photon.SocketServer.Numeric.BigInteger op_Implicit(System.UInt64 value)

Disassembly:
	0x0352DFF8 LDR X30, [X31], #0x30
	0x0352DFFC B 0x352DDC4
	0x0352E000 BL 0x1C16F20
	0x0352E004 STR X30, [X31 - 0x30]!
	0x0352E008 STP X22, X21, [X31 + 0x10]
	0x0352E00C STP X20, X19, [X31 + 0x20]
	0x0352E010 ADRP X22, 0xEB1000
	0x0352E014 ADRP X21, 0xC06000
	0x0352E018 LDRB W8, [X22 + 0xB98]
	0x0352E01C LDR X21, [X21 + 0x980]
	0x0352E020 MOV X19, X1
	0x0352E024 MOV X20, X0
	0x0352E028 TBNZ X8, 0x0, 0x352E040
	0x0352E02C ADRP X0, 0xC06000
	0x0352E030 LDR X0, [X0 + 0x980]
	0x0352E034 BL 0x1C16CF4
	0x0352E038 MOVZ W8, 0x1
	0x0352E03C STRB W8, [X22 + 0xB98]
	0x0352E040 LDR X0, [X21]
	0x0352E044 LDR W8, [X0 + 0xE0]
	0x0352E048 CBNZ W8, 0x352E050
	0x0352E04C BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xEB2000
	006 Move X21, 0xC07000
	007 Move W8, [X20+2954]
	008 Call 0x3EB267C
	009 Return X0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xC07000
	016 Move X0, [X0+2432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+2954], W8
	020 Move X0, [X21]
	021 Call 0x1C17F10
	022 Move X1, X19
	023 Move X20, X0
	024 Call BigInteger..ctor, X0, X1
	025 Move X0, X20
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0

Method: Photon.SocketServer.Numeric.BigInteger op_Implicit(System.Int32 value)

Disassembly:
	0x0352D1F8 LDR X0, [X0 + 0x9D0]
	0x0352D1FC BL 0x1C16D08
	0x0352D200 MOV X1, X0
	0x0352D204 MOV X0, X19
	0x0352D208 MOV X2, X31
	0x0352D20C BL 0x3316338
	0x0352D210 ADRP X0, 0xC07000
	0x0352D214 LDR X0, [X0 + 0x9D8]
	0x0352D218 BL 0x1C16D08
	0x0352D21C MOV X1, X0
	0x0352D220 MOV X0, X19
	0x0352D224 BL 0x1C16DEC
	0x0352D228 STR X30, [X31 - 0x30]!
	0x0352D22C STP X22, X21, [X31 + 0x10]
	0x0352D230 STP X20, X19, [X31 + 0x20]
	0x0352D234 ADRP X19, 0xEB2000
	0x0352D238 ADRP X22, 0xC07000
	0x0352D23C LDRB W8, [X19 + 0xB8F]
	0x0352D240 LDR X22, [X22 + 0x980]
	0x0352D244 MOV X20, X1
	0x0352D248 MOV X21, X0
	0x0352D24C TBNZ X8, 0x0, 0x352D264

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xEB3000
	006 Move X21, 0xC08000
	007 Move W8, [X20+2955]
	008 Move X21, [X21+2432]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xC08000
	015 Move X0, [X0+2432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2955], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, W19
	022 Move X20, X0
	023 Call BigInteger..ctor, X0, X1
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: Photon.SocketServer.Numeric.BigInteger op_Implicit(System.UInt32 value)

Disassembly:
	0x0352E050 CBZ X20, 0x352E0A8
	0x0352E054 LDR X8, [X20]
	0x0352E058 MOV X0, X20
	0x0352E05C MOV X1, X19
	0x0352E060 LDP X9, X2, [X8 + 0x138]
	0x0352E064 BLR X9
	0x0352E068 TBZ X0, 0x0, 0x352E080
	0x0352E06C LDP X20, X19, [X31 + 0x20]
	0x0352E070 LDP X22, X21, [X31 + 0x10]
	0x0352E074 MOVZ W0, 0x1
	0x0352E078 LDR X30, [X31], #0x30
	0x0352E07C RET
	0x0352E080 LDR X0, [X21]
	0x0352E084 LDR W8, [X0 + 0xE0]
	0x0352E088 CBNZ W8, 0x352E090
	0x0352E08C BL 0x1C16DFC
	0x0352E090 MOV X0, X20
	0x0352E094 MOV X1, X19
	0x0352E098 LDP X20, X19, [X31 + 0x20]
	0x0352E09C LDP X22, X21, [X31 + 0x10]
	0x0352E0A0 LDR X30, [X31], #0x30
	0x0352E0A4 B 0x352DE90

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xEB2000
	006 Move X21, 0xC07000
	007 Move W8, [X20+2956]
	008 Move X21, [X21+2432]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xC07000
	015 Move X0, [X0+2432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2956], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move W1, W19
	022 Move X20, X0
	023 Call BigInteger..ctor, X0, X1
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: Photon.SocketServer.Numeric.BigInteger op_Addition(Photon.SocketServer.Numeric.BigInteger bi1, Photon.SocketServer.Numeric.BigInteger bi2)

Disassembly:
	0x0352D728 B.CS 0x352D70C
	0x0352D72C MOV X0, X19
	0x0352D730 LDP X20, X19, [X31 + 0x10]
	0x0352D734 LDP X30, X21, [X31], #0x20
	0x0352D738 RET
	0x0352D73C BL 0x1C16F28
	0x0352D740 BL 0x1C16F20
	0x0352D744 ADRP X0, 0xBF4000
	0x0352D748 LDR X0, [X0 + 0x560]
	0x0352D74C BL 0x1C16D08
	0x0352D750 BL 0x1C16F10
	0x0352D754 MOV X19, X0
	0x0352D758 ADRP X0, 0xC07000
	0x0352D75C LDR X0, [X0 + 0x9F8]
	0x0352D760 BL 0x1C16D08
	0x0352D764 MOV X1, X0
	0x0352D768 MOV X0, X19
	0x0352D76C MOV X2, X31
	0x0352D770 BL 0x3316338
	0x0352D774 ADRP X0, 0xC07000
	0x0352D778 LDR X0, [X0 + 0xA00]
	0x0352D77C BL 0x1C16D08
	0x0352D780 MOV X1, X0
	0x0352D784 MOV X0, X19
	0x0352D788 BL 0x1C16DEC
	0x0352D78C STR X30, [X31 - 0x30]!
	0x0352D790 STP X22, X21, [X31 + 0x10]
	0x0352D794 STP X20, X19, [X31 + 0x20]
	0x0352D798 ADRP X20, 0xEB2000
	0x0352D79C ADRP X22, 0xC07000
	0x0352D7A0 LDRB W8, [X20 + 0xB92]
	0x0352D7A4 LDR X22, [X22 + 0x980]
	0x0352D7A8 MOV W19, W1
	0x0352D7AC MOV X21, X0
	0x0352D7B0 TBNZ X8, 0x0, 0x352D7C8
	0x0352D7B4 ADRP X0, 0xC07000
	0x0352D7B8 LDR X0, [X0 + 0x980]
	0x0352D7BC BL 0x1C16CF4
	0x0352D7C0 MOVZ W8, 0x1
	0x0352D7C4 STRB W8, [X20 + 0xB92]
	0x0352D7C8 LDR X0, [X22]
	0x0352D7CC BL 0x1C16F10
	0x0352D7D0 MOV X1, X21
	0x0352D7D4 MOV X20, X0
	0x0352D7D8 BL 0x352BE1C
	0x0352D7DC CBZ X20, 0x352D818
	0x0352D7E0 LDR X0, [X22]
	0x0352D7E4 LDR X21, [X20 + 0x10]
	0x0352D7E8 LDR W8, [X0 + 0xE0]
	0x0352D7EC CBNZ W8, 0x352D7F4
	0x0352D7F0 BL 0x1C16DFC
	0x0352D7F4 MOV X0, X21
	0x0352D7F8 MOV W1, W19
	0x0352D7FC BL 0x352D81C
	0x0352D800 STR W0, [X20 + 0x18]
	0x0352D804 MOV X0, X20
	0x0352D808 LDP X20, X19, [X31 + 0x20]
	0x0352D80C LDP X22, X21, [X31 + 0x10]
	0x0352D810 LDR X30, [X31], #0x30
	0x0352D814 RET
	0x0352D818 BL 0x1C16F20
	0x0352D81C STR X30, [X31 - 0x10]!
	0x0352D820 CBZ X0, 0x352D900
	0x0352D824 LDR X9, [X0 + 0x18]
	0x0352D828 CMP W9, 0x1
	0x0352D82C MOV W8, W9
	0x0352D830 B.LE 0x352D864
	0x0352D834 MOV W10, W9
	0x0352D838 SUB W8, W10, 0x1
	0x0352D83C CMP W8, W9
	0x0352D840 B.CS 0x352D8FC
	0x0352D844 ADD X11, X0, W8, 0x2, UXTW
	0x0352D848 LDR W11, [X11 + 0x20]
	0x0352D84C CBNZ W11, 0x352D860
	0x0352D850 CMP W10, 0x3
	0x0352D854 MOV W10, W8
	0x0352D858 B.GE 0x352D838
	0x0352D85C B 0x352D864
	0x0352D860 MOV W8, W10
	0x0352D864 CMP W1, 0x1
	0x0352D868 B.LT 0x352D8F0
	0x0352D86C AND X10, X9, 0x0
	0x0352D870 ADD X11, X0, 0x20
	0x0352D874 MOVZ W12, 0x20
	0x0352D878 CMP W1, W12
	0x0352D87C CSEL W12, W1, W12, LT
	0x0352D880 CMP W8, 0x1
	0x0352D884 B.LT 0x352D8E4
	0x0352D888 MOV X13, X31
	0x0352D88C AND W14, W12, 0x3F
	0x0352D890 MOV W15, W8
	0x0352D894 MOV X16, X11
	0x0352D898 MOV X17, X10
	0x0352D89C CBZ X17, 0x352D8FC
	0x0352D8A0 LDR W2, [X16]
	0x0352D8A4 SUBS X15, X15, 0x1
	0x0352D8A8 SUB X17, X17, 0x1
	0x0352D8AC LSLV X2, X2, X14
	0x0352D8B0 ORR W3, W2, W13, 0x0
	0x0352D8B4 UBFM X13, X2, 0x20, 0x3F
	0x0352D8B8 STR W3, [X16], #0x4
	0x0352D8BC B.NE 0x352D89C
	0x0352D8C0 CBZ X13, 0x352D8E4
	0x0352D8C4 ADD W14, W8, 0x1
	0x0352D8C8 CMP W14, W9
	0x0352D8CC B.GT 0x352D8E4
	0x0352D8D0 CMP W8, W9
	0x0352D8D4 B.CS 0x352D8FC
	0x0352D8D8 ADD X8, X0, W8, 0x2, SXTW
	0x0352D8DC STR W13, [X8 + 0x20]
	0x0352D8E0 MOV W8, W14
	0x0352D8E4 SUB W1, W1, W12
	0x0352D8E8 CMP W1, 0x0
	0x0352D8EC B.GT 0x352D878
	0x0352D8F0 MOV W0, W8
	0x0352D8F4 LDR X30, [X31], #0x10
	0x0352D8F8 RET
	0x0352D8FC BL 0x1C16F28
	0x0352D900 BL 0x1C16F20
	0x0352D904 STR X30, [X31 - 0x30]!
	0x0352D908 STP X22, X21, [X31 + 0x10]
	0x0352D90C STP X20, X19, [X31 + 0x20]
	0x0352D910 ADRP X19, 0xEB2000
	0x0352D914 ADRP X22, 0xC07000
	0x0352D918 LDRB W8, [X19 + 0xB93]
	0x0352D91C LDR X22, [X22 + 0x980]
	0x0352D920 MOV W21, W1
	0x0352D924 MOV X20, X0
	0x0352D928 TBNZ X8, 0x0, 0x352D940
	0x0352D92C ADRP X0, 0xC07000
	0x0352D930 LDR X0, [X0 + 0x980]
	0x0352D934 BL 0x1C16CF4
	0x0352D938 MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xEB3000
	007 Move X22, 0xC08000
	008 Move W8, [X19+2957]
	009 Move X22, [X22+2432]
	010 Move X20, X1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xC08000
	017 Move X0, [X0+2432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X19+2957], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X19, X0
	024 Call BigInteger..ctor, X0
	025 Compare X21, 0
	026 JumpIfEqual {135}
	027 Compare X20, 0
	028 JumpIfEqual {135}
	029 Compare X19, 0
	030 JumpIfEqual {135}
	031 Move W8, [X21+24]
	032 Move W9, [X20+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 NotImplemented "Instruction CSEL not yet implemented."
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move [X19+24], W8
	037 Move X8, [X21+16]
	038 Compare X8, 0
	039 JumpIfEqual {135}
	040 Move W9, [X8+24]
	041 Move X11, X31
	042 Move W10, 8
	043 Subtract X13, X10, 8
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X12, [X20+16]
	046 Compare X12, 0
	047 JumpIfEqual {135}
	048 Move W14, [X12+24]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X14, [X19+16]
	051 Compare X14, 0
	052 JumpIfEqual {135}
	053 Move W15, [X14+24]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move W13, [X8]
	056 Move W12, [X12]
	057 Add X11, X11, X13
	058 Add X13, X11, X12
	059 Move [X14], W13
	060 Move W12, [X19+24]
	061 Subtract X11, X10, 7
	062 Add X10, X10, 1
	063 NotImplemented "Instruction CMP not yet implemented."
	064 NotImplemented "Instruction SBFM not yet implemented."
	065 Compare X11, 0
	066 JumpIfEqual {82}
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move X8, [X19+16]
	069 Compare X8, 0
	070 JumpIfEqual {135}
	071 Move W9, [X8+24]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move X9, W12
	074 Move X10, X13
	075 ShiftRight X10, 32
	076 And X10, X10, 0x7FFFFFFF
	077 Add X8, X8, X9
	078 Move [X8+32], W10
	079 Move W8, [X19+24]
	080 Add W12, W8, 1
	081 Move [X19+24], W12
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X9, [X19+16]
	084 Compare X9, 0
	085 JumpIfEqual {135}
	086 Move W8, [X9+24]
	087 Move W10, W12
	088 Add X9, X9, 28
	089 Subtract X11, X10, 1
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move W12, [X9]
	092 Compare W12, 0
	093 JumpIfNotEqual {99}
	094 Subtract W10, W10, 1
	095 Add X12, X11, 1
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Move [X19+24], W10
	098 Move X10, X11
	099 Move X8, [X21+16]
	100 Compare X8, 0
	101 JumpIfEqual {135}
	102 Move W9, [X8+24]
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Move X9, [X20+16]
	105 Compare X9, 0
	106 JumpIfEqual {135}
	107 Move W10, [X9+24]
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Move W8, [X8+308]
	110 Move W9, [X9+308]
	111 Xor W9, W9, W8
	112 Move TEMP, X9
	113 And TEMP, TEMP, -2147483648
	114 Compare TEMP, -2147483648
	115 JumpIfEqual {127}
	116 Move X9, [X19+16]
	117 Compare X9, 0
	118 JumpIfEqual {135}
	119 Move W10, [X9+24]
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move W9, [X9+308]
	122 Xor W8, W9, W8
	123 Move TEMP, X8
	124 And TEMP, TEMP, -2147483648
	125 Compare TEMP, -2147483648
	126 JumpIfEqual {136}
	127 Move X0, X19
	128 Move X20, [X31+32]
	129 Move X19, [X31+40]
	130 Move X22, [X31+16]
	131 Move X21, [X31+24]
	132 Move X30, [X31+48]
	133 Return X0
	134 Call 0x1C17F28
	135 Call 0x1C17F20
	136 Move X0, 0xBF5000
	137 Move X0, [X0+1376]
	138 Call 0x1C17D08
	139 Call 0x1C17F10
	140 Move X1, X31
	141 Move X19, X0
	142 Call ArithmeticException..ctor, X0
	143 Move X0, 0xC08000
	144 Move X0, [X0+2472]
	145 Call 0x1C17D08
	146 Move X1, X0
	147 Move X0, X19
	148 Call 0x1C17DEC

Method: Photon.SocketServer.Numeric.BigInteger op_Increment(Photon.SocketServer.Numeric.BigInteger bi1)

Disassembly:
	0x0352E0A8 BL 0x1C16F20
	0x0352E0AC SUB X31, X31, 0xB0
	0x0352E0B0 STP X29, X30, [X31 + 0x50]
	0x0352E0B4 STP X28, X27, [X31 + 0x60]
	0x0352E0B8 STP X26, X25, [X31 + 0x70]
	0x0352E0BC STP X24, X23, [X31 + 0x80]
	0x0352E0C0 STP X22, X21, [X31 + 0x90]
	0x0352E0C4 STP X20, X19, [X31 + 0xA0]
	0x0352E0C8 ADRP X19, 0xEB1000
	0x0352E0CC ADRP X22, 0xBEE000
	0x0352E0D0 LDRB W8, [X19 + 0xB99]
	0x0352E0D4 LDR X22, [X22 + 0xD08]
	0x0352E0D8 MOV X23, X3
	0x0352E0DC MOV X25, X2
	0x0352E0E0 MOV X24, X1
	0x0352E0E4 MOV X26, X0
	0x0352E0E8 TBNZ X8, 0x0, 0x352E10C
	0x0352E0EC ADRP X0, 0xC06000
	0x0352E0F0 LDR X0, [X0 + 0x980]
	0x0352E0F4 BL 0x1C16CF4
	0x0352E0F8 ADRP X0, 0xBEE000
	0x0352E0FC LDR X0, [X0 + 0xD08]
	0x0352E100 BL 0x1C16CF4
	0x0352E104 MOVZ W8, 0x1
	0x0352E108 STRB W8, [X19 + 0xB99]
	0x0352E10C LDR X0, [X22]
	0x0352E110 MOVZ W1, 0x46
	0x0352E114 BL 0x1C16D6C
	0x0352E118 CBZ X26, 0x352E67C
	0x0352E11C LDR W19, [X26 + 0x18]
	0x0352E120 MOV X28, X0
	0x0352E124 LDR X0, [X22]
	0x0352E128 ADD W27, W19, 0x1
	0x0352E12C MOV W1, W27
	0x0352E130 BL 0x1C16D6C
	0x0352E134 CBZ X24, 0x352E67C
	0x0352E138 LDR X8, [X24 + 0x10]
	0x0352E13C CBZ X8, 0x352E67C
	0x0352E140 LDR W9, [X24 + 0x18]
	0x0352E144 LDR W10, [X8 + 0x18]
	0x0352E148 SUB W9, W9, 0x1
	0x0352E14C CMP W9, W10
	0x0352E150 B.CS 0x352E678
	0x0352E154 ADD X8, X8, W9, 0x2, SXTW
	0x0352E158 LDR W8, [X8 + 0x20]
	0x0352E15C MOV X21, X0
	0x0352E160 TBNZ X8, 0x1F, 0x352E188
	0x0352E164 MOV W1, W31
	0x0352E168 MOVZ W9, 0x80000000
	0x0352E16C UBFM W10, W9, 0x1, 0x1F
	0x0352E170 ADD W1, W1, 0x1
	0x0352E174 CBZ W10, 0x352E18C
	0x0352E178 AND W11, W8, W9, 0x1
	0x0352E17C MOV W9, W10
	0x0352E180 CBZ W11, 0x352E16C
	0x0352E184 B 0x352E18C
	0x0352E188 MOV W1, W31
	0x0352E18C LDR W8, [X26 + 0x18]
	0x0352E190 CMP W8, 0x1
	0x0352E194 B.LT 0x352E1E0
	0x0352E198 LDR X10, [X26 + 0x10]
	0x0352E19C CBZ X10, 0x352E67C
	0x0352E1A0 LDR W9, [X10 + 0x18]
	0x0352E1A4 MOV X8, X31
	0x0352E1A8 ADD X10, X10, 0x20
	0x0352E1AC ADD X11, X21, 0x20
	0x0352E1B0 CMP X8, X9
	0x0352E1B4 B.CS 0x352E678
	0x0352E1B8 CBZ X21, 0x352E67C
	0x0352E1BC LDR W12, [X21 + 0x18]
	0x0352E1C0 CMP X8, X12
	0x0352E1C4 B.CS 0x352E678
	0x0352E1C8 LDR W12, [X10, X8, LSL #2]
	0x0352E1CC STR W12, [X11, X8, LSL #2]
	0x0352E1D0 LDRSW X12, [X26 + 0x18]
	0x0352E1D4 ADD X8, X8, 0x1
	0x0352E1D8 CMP X8, X12
	0x0352E1DC B.LT 0x352E1B0
	0x0352E1E0 ADRP X20, 0xC06000
	0x0352E1E4 LDR X20, [X20 + 0x980]
	0x0352E1E8 LDR X0, [X20]
	0x0352E1EC LDR W8, [X0 + 0xE0]
	0x0352E1F0 CBNZ W8, 0x352E200
	0x0352E1F4 MOV W26, W1
	0x0352E1F8 BL 0x1C16DFC
	0x0352E1FC MOV W1, W26
	0x0352E200 MOV X0, X21
	0x0352E204 MOV W26, W1
	0x0352E208 BL 0x352D81C
	0x0352E20C MOV X0, X24
	0x0352E210 MOV W1, W26
	0x0352E214 STR W26, [X31 + 0x1C]
	0x0352E218 BL 0x352D78C
	0x0352E21C CBZ X0, 0x352E67C
	0x0352E220 LDR X8, [X0 + 0x10]
	0x0352E224 MOV X24, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0xEB2000
	006 Move X21, 0xC07000
	007 Move W8, [X19+2958]
	008 Move X21, [X21+2432]
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xC07000
	015 Move X0, [X0+2432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+2958], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X20
	022 Move X19, X0
	023 Call BigInteger..ctor, X0, X1
	024 Compare X19, 0
	025 JumpIfEqual {92}
	026 Move X8, [X19+16]
	027 Move X9, X31
	028 Add X10, X8, 32
	029 Compare X8, 0
	030 JumpIfEqual {92}
	031 Move W11, [X8+24]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W11, [X10]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Add X12, X11, 1
	036 Add X11, X9, 1
	037 Move [X10], W12
	038 Move X9, X11
	039 Move TEMP, X12
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {29}
	043 Move W8, [X19+24]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move [X19+24], W11
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X10, [X19+16]
	048 Compare X10, 0
	049 JumpIfEqual {92}
	050 Move W9, [X10+24]
	051 Add X10, X10, 28
	052 Subtract X11, X8, 1
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move W12, [X10]
	055 Compare W12, 0
	056 JumpIfNotEqual {62}
	057 Subtract W8, W8, 1
	058 Add X12, X11, 1
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move [X19+24], W8
	061 Move X8, X11
	062 Compare X20, 0
	063 JumpIfEqual {92}
	064 Move X8, [X20+16]
	065 Compare X8, 0
	066 JumpIfEqual {92}
	067 Move W9, [X8+24]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move W8, [X8+308]
	070 Move TEMP, X8
	071 And TEMP, TEMP, -2147483648
	072 Compare TEMP, -2147483648
	073 JumpIfEqual {85}
	074 Move X9, [X19+16]
	075 Compare X9, 0
	076 JumpIfEqual {92}
	077 Move W10, [X9+24]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move W9, [X9+308]
	080 Xor W8, W9, W8
	081 Move TEMP, X8
	082 And TEMP, TEMP, -2147483648
	083 Compare TEMP, -2147483648
	084 JumpIfEqual {93}
	085 Move X0, X19
	086 Move X20, [X31+16]
	087 Move X19, [X31+24]
	088 Move X30, [X31+32]
	089 Move X21, [X31+40]
	090 Return X0
	091 Call 0x1C17F28
	092 Call 0x1C17F20
	093 Move X0, 0xBF4000
	094 Move X0, [X0+1376]
	095 Call 0x1C17D08
	096 Call 0x1C17F10
	097 Move X19, X0
	098 Move X0, 0xC07000
	099 Move X0, [X0+2512]
	100 Call 0x1C17D08
	101 Move X1, X0
	102 Move X0, X19
	103 Move X2, X31
	104 Call ArithmeticException..ctor, X0, X1
	105 Move X0, 0xC07000
	106 Move X0, [X0+2520]
	107 Call 0x1C17D08
	108 Move X1, X0
	109 Move X0, X19
	110 Call 0x1C17DEC

Method: Photon.SocketServer.Numeric.BigInteger op_Subtraction(Photon.SocketServer.Numeric.BigInteger bi1, Photon.SocketServer.Numeric.BigInteger bi2)

Disassembly:
	0x0352E228 CBZ X8, 0x352E67C
	0x0352E22C LDR W9, [X24 + 0x18]
	0x0352E230 LDR W12, [X8 + 0x18]
	0x0352E234 SUB W10, W9, 0x1
	0x0352E238 CMP W10, W12
	0x0352E23C B.CS 0x352E678
	0x0352E240 SUB W11, W9, 0x2
	0x0352E244 CMP W11, W12
	0x0352E248 STR X25, [X31 + 0x20]
	0x0352E24C B.CS 0x352E678
	0x0352E250 ADD X10, X8, W10, 0x2, SXTW
	0x0352E254 ADD X8, X8, W11, 0x2, SXTW
	0x0352E258 LDR X0, [X22]
	0x0352E25C LDR W25, [X10 + 0x20]
	0x0352E260 LDR W29, [X8 + 0x20]
	0x0352E264 ADD W1, W9, 0x1
	0x0352E268 SUB W22, W27, W9
	0x0352E26C STR W1, [X31 + 0x40]
	0x0352E270 BL 0x1C16D6C
	0x0352E274 CMP W22, 0x1
	0x0352E278 B.LT 0x352E4A8
	0x0352E27C STR X23, [X31 + 0x10]
	0x0352E280 CBZ X21, 0x352E67C
	0x0352E284 LDR W14, [X31 + 0x40]
	0x0352E288 MOV X26, X0
	0x0352E28C MOV X15, X31
	0x0352E290 STR X22, [X31 + 0x8]
	0x0352E294 MOV W8, W22
	0x0352E298 MOV W22, W14
	0x0352E29C ADD X23, X0, 0x20
	0x0352E2A0 MOVZ X16, 0x1
	0x0352E2A4 STP X8, X29, [X31 + 0x28]
	0x0352E2A8 STR X28, [X31 + 0x38]
	0x0352E2AC LDR W8, [X21 + 0x18]
	0x0352E2B0 CMP W19, W8
	0x0352E2B4 B.CS 0x352E678
	0x0352E2B8 SUB W17, W19, 0x1
	0x0352E2BC CMP W17, W8
	0x0352E2C0 B.CS 0x352E678
	0x0352E2C4 ADD X11, X21, 0x20
	0x0352E2C8 LDR W10, [X11, W17, SXTW]
	0x0352E2CC LDR W12, [X11, W19, SXTW]
	0x0352E2D0 SUB W9, W19, 0x2
	0x0352E2D4 ADD X11, X11, W9, 0x2, SXTW
	0x0352E2D8 BFM X10, X12, 0x20, 0x1F
	0x0352E2DC UDIV X27, X10, X25
	0x0352E2E0 MSUB X10, X27, X25, X10
	0x0352E2E4 CMP X27, X16
	0x0352E2E8 B.EQ 0x352E308
	0x0352E2EC CMP W9, W8
	0x0352E2F0 B.CS 0x352E678
	0x0352E2F4 LDR W12, [X11]
	0x0352E2F8 MUL X13, X27, X29
	0x0352E2FC BFM X12, X10, 0x20, 0x1F
	0x0352E300 CMP X13, X12
	0x0352E304 B.LS 0x352E318
	0x0352E308 ADD X10, X10, X25
	0x0352E30C UBFM X12, X10, 0x20, 0x3F
	0x0352E310 SUB X27, X27, 0x1
	0x0352E314 CBZ X12, 0x352E2E4
	0x0352E318 CMP W14, 0x1
	0x0352E31C B.LT 0x352E35C
	0x0352E320 MOV X9, X31
	0x0352E324 MOV W10, W19
	0x0352E328 CMP W10, W8
	0x0352E32C B.CS 0x352E678
	0x0352E330 CBZ X26, 0x352E67C
	0x0352E334 LDR W11, [X26 + 0x18]
	0x0352E338 CMP X9, X11
	0x0352E33C B.CS 0x352E678
	0x0352E340 ADD X11, X21, W10, 0x2, SXTW
	0x0352E344 LDR W11, [X11 + 0x20]
	0x0352E348 SUB W10, W10, 0x1
	0x0352E34C STR W11, [X23, X9, LSL #2]
	0x0352E350 ADD X9, X9, 0x1
	0x0352E354 CMP X22, X9
	0x0352E358 B.NE 0x352E328
	0x0352E35C LDR X0, [X20]
	0x0352E360 STR W17, [X31 + 0x44]
	0x0352E364 STR X15, [X31 + 0x48]
	0x0352E368 BL 0x1C16F10
	0x0352E36C MOV X1, X26
	0x0352E370 MOV X28, X0
	0x0352E374 BL 0x352CE48
	0x0352E378 LDR X0, [X20]
	0x0352E37C LDR W8, [X0 + 0xE0]
	0x0352E380 CBNZ W8, 0x352E388
	0x0352E384 BL 0x1C16DFC
	0x0352E388 MOV X0, X27
	0x0352E38C BL 0x352CFA0
	0x0352E390 MOV X1, X0
	0x0352E394 MOV X0, X24
	0x0352E398 BL 0x352C250
	0x0352E39C MOV X29, X0
	0x0352E3A0 LDR X0, [X20]
	0x0352E3A4 LDR W8, [X0 + 0xE0]
	0x0352E3A8 CBNZ W8, 0x352E3B0
	0x0352E3AC BL 0x1C16DFC
	0x0352E3B0 MOV X0, X29
	0x0352E3B4 MOV X1, X28
	0x0352E3B8 BL 0x352DDC4
	0x0352E3BC TBZ X0, 0x0, 0x352E3E8
	0x0352E3C0 LDR X0, [X20]
	0x0352E3C4 LDR W8, [X0 + 0xE0]
	0x0352E3C8 CBNZ W8, 0x352E3D0
	0x0352E3CC BL 0x1C16DFC
	0x0352E3D0 MOV X0, X29
	0x0352E3D4 MOV X1, X24
	0x0352E3D8 BL 0x352D228
	0x0352E3DC MOV X29, X0
	0x0352E3E0 SUB W27, W27, 0x1
	0x0352E3E4 B 0x352E3A0
	0x0352E3E8 LDR X0, [X20]
	0x0352E3EC LDR W8, [X0 + 0xE0]
	0x0352E3F0 CBNZ W8, 0x352E3F8
	0x0352E3F4 BL 0x1C16DFC
	0x0352E3F8 MOV X0, X28
	0x0352E3FC MOV X1, X29
	0x0352E400 BL 0x352D228
	0x0352E404 LDR W14, [X31 + 0x40]
	0x0352E408 LDP X29, X28, [X31 + 0x30]
	0x0352E40C CMP W14, 0x1
	0x0352E410 B.LT 0x352E468
	0x0352E414 CBZ X0, 0x352E67C
	0x0352E418 LDR X9, [X0 + 0x10]
	0x0352E41C MOV W8, W31
	0x0352E420 MOV X10, X22
	0x0352E424 CBZ X9, 0x352E67C
	0x0352E428 LDR W11, [X24 + 0x18]
	0x0352E42C LDR W12, [X9 + 0x18]
	0x0352E430 ADD W11, W8, W11
	0x0352E434 CMP W11, W12
	0x0352E438 B.CS 0x352E678
	0x0352E43C LDR W13, [X21 + 0x18]
	0x0352E440 ADD W12, W19, W8
	0x0352E444 CMP W12, W13
	0x0352E448 B.CS 0x352E678

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xEB2000
	007 Move X22, 0xC07000
	008 Move W8, [X19+2959]
	009 Move X22, [X22+2432]
	010 Move X20, X1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xC07000
	017 Move X0, [X0+2432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X19+2959], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X19, X0
	024 Call BigInteger..ctor, X0
	025 Compare X21, 0
	026 JumpIfEqual {139}
	027 Compare X20, 0
	028 JumpIfEqual {139}
	029 Compare X19, 0
	030 JumpIfEqual {139}
	031 Move W8, [X21+24]
	032 Move W9, [X20+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 NotImplemented "Instruction CSEL not yet implemented."
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move [X19+24], W8
	037 Move X9, [X21+16]
	038 Compare X9, 0
	039 JumpIfEqual {139}
	040 Move W10, [X9+24]
	041 Move X12, X31
	042 Move W11, 8
	043 Subtract X13, X11, 8
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X8, [X20+16]
	046 Compare X8, 0
	047 JumpIfEqual {139}
	048 Move W14, [X8+24]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X14, [X19+16]
	051 Compare X14, 0
	052 JumpIfEqual {139}
	053 Move W15, [X14+24]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move W13, [X9]
	056 Move W8, [X8]
	057 Subtract X8, X13, X8
	058 Add X13, X8, X12
	059 Move [X14], W13
	060 Move W8, [X19+24]
	061 Subtract X12, X11, 7
	062 Add X11, X11, 1
	063 NotImplemented "Instruction CMP not yet implemented."
	064 NotImplemented "Instruction SBFM not yet implemented."
	065 Move TEMP, X13
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfEqual {70}
	069 NotImplemented "Instruction CMP not yet implemented."
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X10, [X19+16]
	072 Compare X10, 0
	073 JumpIfEqual {139}
	074 Move W9, [X10+24]
	075 Move X11, W8
	076 Add X10, X10, X11
	077 Add X10, X10, 32
	078 Move TEMP, 0
	079 Not TEMP
	080 Move W11, TEMP
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Add W8, W8, 1
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move [X10+4], W11
	085 Move W8, 70
	086 Move [X19+24], W8
	087 Move X11, [X19+16]
	088 Compare X11, 0
	089 JumpIfEqual {139}
	090 Move W9, [X11+24]
	091 Move W10, W8
	092 Add X8, X11, 28
	093 Subtract X11, X10, 1
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move W12, [X8]
	096 Compare W12, 0
	097 JumpIfNotEqual {103}
	098 Subtract W10, W10, 1
	099 Add X12, X11, 1
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move [X19+24], W10
	102 Move X10, X11
	103 Move X8, [X21+16]
	104 Compare X8, 0
	105 JumpIfEqual {139}
	106 Move W9, [X8+24]
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move X9, [X20+16]
	109 Compare X9, 0
	110 JumpIfEqual {139}
	111 Move W10, [X9+24]
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move W8, [X8+308]
	114 Move W9, [X9+308]
	115 Xor W9, W9, W8
	116 Move TEMP, X9
	117 And TEMP, TEMP, -2147483648
	118 Compare TEMP, -2147483648
	119 JumpIfNotEqual {131}
	120 Move X9, [X19+16]
	121 Compare X9, 0
	122 JumpIfEqual {139}
	123 Move W10, [X9+24]
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move W9, [X9+308]
	126 Xor W8, W9, W8
	127 Move TEMP, X8
	128 And TEMP, TEMP, -2147483648
	129 Compare TEMP, -2147483648
	130 JumpIfEqual {140}
	131 Move X0, X19
	132 Move X20, [X31+32]
	133 Move X19, [X31+40]
	134 Move X22, [X31+16]
	135 Move X21, [X31+24]
	136 Move X30, [X31+48]
	137 Return X0
	138 Call 0x1C17F28
	139 Call 0x1C17F20
	140 Move X0, 0xBF4000
	141 Move X0, [X0+1376]
	142 Call 0x1C17D08
	143 Call 0x1C17F10
	144 Move X1, X31
	145 Move X19, X0
	146 Call ArithmeticException..ctor, X0
	147 Move X0, 0xC07000
	148 Move X0, [X0+2528]
	149 Call 0x1C17D08
	150 Move X1, X0
	151 Move X0, X19
	152 Call 0x1C17DEC

Method: Photon.SocketServer.Numeric.BigInteger op_Decrement(Photon.SocketServer.Numeric.BigInteger bi1)

Disassembly:
	0x0352E44C ADD X11, X9, W11, 0x2, SXTW
	0x0352E450 LDR W11, [X11 + 0x20]
	0x0352E454 ADD X12, X21, W12, 0x2, SXTW
	0x0352E458 SUBS X10, X10, 0x1
	0x0352E45C SUB W8, W8, 0x1
	0x0352E460 STR W11, [X12 + 0x20]
	0x0352E464 B.NE 0x352E424
	0x0352E468 CBZ X28, 0x352E67C
	0x0352E46C LDR W8, [X28 + 0x18]
	0x0352E470 LDR X9, [X31 + 0x48]
	0x0352E474 LDR W19, [X31 + 0x44]
	0x0352E478 MOVZ X16, 0x1
	0x0352E47C CMP X9, X8
	0x0352E480 B.CS 0x352E678
	0x0352E484 LDR X10, [X31 + 0x28]
	0x0352E488 ADD X8, X28, X9, 0x2, LSL
	0x0352E48C ADD X9, X9, 0x1
	0x0352E490 MOV X15, X9
	0x0352E494 CMP X9, X10
	0x0352E498 STR W27, [X8 + 0x20]
	0x0352E49C B.NE 0x352E2AC
	0x0352E4A0 LDP X17, X23, [X31 + 0x8]
	0x0352E4A4 B 0x352E4AC
	0x0352E4A8 MOV W17, W31
	0x0352E4AC LDR X16, [X31 + 0x20]
	0x0352E4B0 CBZ X16, 0x352E67C
	0x0352E4B4 CMP W17, 0x1
	0x0352E4B8 STR W17, [X16 + 0x18]
	0x0352E4BC B.MI 0x352E520
	0x0352E4C0 CBZ X28, 0x352E67C
	0x0352E4C4 LDR X9, [X16 + 0x10]
	0x0352E4C8 LDR W10, [X28 + 0x18]
	0x0352E4CC MOV X8, X31
	0x0352E4D0 MOV W11, W17
	0x0352E4D4 ADD X12, X9, 0x20
	0x0352E4D8 MOVN W13, 0x0
	0x0352E4DC ADD X14, X11, X13
	0x0352E4E0 CMP W14, W10
	0x0352E4E4 B.CS 0x352E678
	0x0352E4E8 CBZ X9, 0x352E67C
	0x0352E4EC LDR W15, [X9 + 0x18]
	0x0352E4F0 CMP X8, X15
	0x0352E4F4 B.CS 0x352E678
	0x0352E4F8 ADD X14, X28, W14, 0x2, UXTW
	0x0352E4FC LDR W14, [X14 + 0x20]
	0x0352E500 SUB X13, X13, 0x1
	0x0352E504 STR W14, [X12, X8, LSL #2]
	0x0352E508 ADD X8, X8, 0x1
	0x0352E50C CMP X11, X8
	0x0352E510 B.NE 0x352E4DC
	0x0352E514 CMP W17, 0x45
	0x0352E518 B.LE 0x352E524
	0x0352E51C B 0x352E550
	0x0352E520 MOV W17, W31
	0x0352E524 LDR X10, [X16 + 0x10]
	0x0352E528 CBZ X10, 0x352E67C
	0x0352E52C LDR W8, [X10 + 0x18]
	0x0352E530 SXTW X9, W17
	0x0352E534 ADD X10, X10, 0x20
	0x0352E538 CMP W9, W8
	0x0352E53C B.CS 0x352E678
	0x0352E540 STR W31, [X10, X9, LSL #2]
	0x0352E544 ADD X9, X9, 0x1
	0x0352E548 CMP W9, 0x46
	0x0352E54C B.NE 0x352E538
	0x0352E550 LDR W8, [X16 + 0x18]
	0x0352E554 CMP W8, 0x2
	0x0352E558 B.LT 0x352E59C
	0x0352E55C LDR X10, [X16 + 0x10]
	0x0352E560 CBZ X10, 0x352E67C
	0x0352E564 LDR W9, [X10 + 0x18]
	0x0352E568 ADD X10, X10, 0x1C
	0x0352E56C SUB X11, X8, 0x1
	0x0352E570 CMP X11, X9
	0x0352E574 B.CS 0x352E678
	0x0352E578 LDR W12, [X10, X8, LSL #2]
	0x0352E57C CBNZ W12, 0x352E5A8
	0x0352E580 SUB W8, W8, 0x1
	0x0352E584 ADD X12, X11, 0x1
	0x0352E588 CMP X12, 0x3
	0x0352E58C STR W8, [X16 + 0x18]
	0x0352E590 MOV X8, X11
	0x0352E594 B.GE 0x352E56C
	0x0352E598 MOV W8, W11
	0x0352E59C CBNZ W8, 0x352E5A8
	0x0352E5A0 MOVZ W8, 0x1
	0x0352E5A4 STR W8, [X16 + 0x18]
	0x0352E5A8 LDR X0, [X20]
	0x0352E5AC LDR W8, [X0 + 0xE0]
	0x0352E5B0 CBNZ W8, 0x352E5B8
	0x0352E5B4 BL 0x1C16DFC
	0x0352E5B8 LDR W1, [X31 + 0x1C]
	0x0352E5BC MOV X0, X21
	0x0352E5C0 BL 0x352DA50
	0x0352E5C4 CBZ X23, 0x352E67C
	0x0352E5C8 CMP W0, 0x1
	0x0352E5CC STR W0, [X23 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0xEB2000
	006 Move X21, 0xC07000
	007 Move W8, [X19+2960]
	008 Move X21, [X21+2432]
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xC07000
	015 Move X0, [X0+2432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+2960], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X20
	022 Move X19, X0
	023 Call BigInteger..ctor, X0, X1
	024 Compare X19, 0
	025 JumpIfEqual {92}
	026 Move X9, [X19+16]
	027 Move X8, X31
	028 Add X10, X9, 32
	029 Compare X9, 0
	030 JumpIfEqual {92}
	031 Move W11, [X9+24]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W12, [X10]
	034 Subtract W11, W12, 1
	035 Move [X10], W11
	036 Add X11, X8, 1
	037 Compare W12, 0
	038 JumpIfNotEqual {41}
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X8, X11
	041 Move W9, [X19+24]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move W9, W11
	044 Move [X19+24], W11
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X11, [X19+16]
	047 Compare X11, 0
	048 JumpIfEqual {92}
	049 Move W8, [X11+24]
	050 Move W10, W9
	051 Add X9, X11, 28
	052 Subtract X11, X10, 1
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move W12, [X9]
	055 Compare W12, 0
	056 JumpIfNotEqual {62}
	057 Subtract W10, W10, 1
	058 Add X12, X11, 1
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move [X19+24], W10
	061 Move X10, X11
	062 Compare X20, 0
	063 JumpIfEqual {92}
	064 Move X8, [X20+16]
	065 Compare X8, 0
	066 JumpIfEqual {92}
	067 Move W9, [X8+24]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move W8, [X8+308]
	070 Move TEMP, X8
	071 And TEMP, TEMP, -2147483648
	072 Compare TEMP, -2147483648
	073 JumpIfNotEqual {85}
	074 Move X9, [X19+16]
	075 Compare X9, 0
	076 JumpIfEqual {92}
	077 Move W10, [X9+24]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move W9, [X9+308]
	080 Xor W8, W9, W8
	081 Move TEMP, X8
	082 And TEMP, TEMP, -2147483648
	083 Compare TEMP, -2147483648
	084 JumpIfEqual {93}
	085 Move X0, X19
	086 Move X20, [X31+16]
	087 Move X19, [X31+24]
	088 Move X30, [X31+32]
	089 Move X21, [X31+40]
	090 Return X0
	091 Call 0x1C17F28
	092 Call 0x1C17F20
	093 Move X0, 0xBF4000
	094 Move X0, [X0+1376]
	095 Call 0x1C17D08
	096 Call 0x1C17F10
	097 Move X19, X0
	098 Move X0, 0xC07000
	099 Move X0, [X0+2536]
	100 Call 0x1C17D08
	101 Move X1, X0
	102 Move X0, X19
	103 Move X2, X31
	104 Call ArithmeticException..ctor, X0, X1
	105 Move X0, 0xC07000
	106 Move X0, [X0+2544]
	107 Call 0x1C17D08
	108 Move X1, X0
	109 Move X0, X19
	110 Call 0x1C17DEC

Method: Photon.SocketServer.Numeric.BigInteger op_Multiply(Photon.SocketServer.Numeric.BigInteger bi1, Photon.SocketServer.Numeric.BigInteger bi2)

Disassembly:
	0x0352D250 ADRP X0, 0xC07000
	0x0352D254 LDR X0, [X0 + 0x980]
	0x0352D258 BL 0x1C16CF4
	0x0352D25C MOVZ W8, 0x1
	0x0352D260 STRB W8, [X19 + 0xB8F]
	0x0352D264 LDR X0, [X22]
	0x0352D268 BL 0x1C16F10
	0x0352D26C MOV X19, X0
	0x0352D270 BL 0x352BB04
	0x0352D274 CBZ X21, 0x352D414
	0x0352D278 CBZ X20, 0x352D414
	0x0352D27C CBZ X19, 0x352D414
	0x0352D280 LDR W8, [X21 + 0x18]
	0x0352D284 LDR W9, [X20 + 0x18]
	0x0352D288 CMP W8, W9
	0x0352D28C CSEL W8, W8, W9, GT
	0x0352D290 CMP W8, 0x1
	0x0352D294 STR W8, [X19 + 0x18]
	0x0352D298 B.LT 0x352D3A4
	0x0352D29C LDR X9, [X21 + 0x10]
	0x0352D2A0 CBZ X9, 0x352D414
	0x0352D2A4 LDR W10, [X9 + 0x18]
	0x0352D2A8 MOV X12, X31
	0x0352D2AC MOVZ W11, 0x8
	0x0352D2B0 SUB X13, X11, 0x8
	0x0352D2B4 CMP X13, X10
	0x0352D2B8 B.CS 0x352D410
	0x0352D2BC LDR X8, [X20 + 0x10]
	0x0352D2C0 CBZ X8, 0x352D414
	0x0352D2C4 LDR W14, [X8 + 0x18]
	0x0352D2C8 CMP X13, X14
	0x0352D2CC B.CS 0x352D410
	0x0352D2D0 LDR X14, [X19 + 0x10]
	0x0352D2D4 CBZ X14, 0x352D414
	0x0352D2D8 LDR W15, [X14 + 0x18]
	0x0352D2DC CMP X13, X15
	0x0352D2E0 B.CS 0x352D410
	0x0352D2E4 LDR W13, [X9, X11, LSL #2]
	0x0352D2E8 LDR W8, [X8, X11, LSL #2]
	0x0352D2EC SUB X8, X13, X8
	0x0352D2F0 ADD X13, X8, X12
	0x0352D2F4 STR W13, [X14, X11, LSL #2]
	0x0352D2F8 LDR W8, [X19 + 0x18]
	0x0352D2FC SUB X12, X11, 0x7
	0x0352D300 ADD X11, X11, 0x1
	0x0352D304 CMP X12, W8, SXTW
	0x0352D308 SBFM X12, X13, 0x3F, 0x3F
	0x0352D30C B.LT 0x352D2B0
	0x0352D310 TBNZ X13, 0x0, 0x352D320
	0x0352D314 CMP W8, 0x2
	0x0352D318 B.GE 0x352D364
	0x0352D31C B 0x352D3A4
	0x0352D320 CMP W8, 0x45
	0x0352D324 B.GT 0x352D35C
	0x0352D328 LDR X10, [X19 + 0x10]
	0x0352D32C CBZ X10, 0x352D414
	0x0352D330 LDR W9, [X10 + 0x18]
	0x0352D334 SXTW X11, W8
	0x0352D338 ADD X10, X10, X11, 0x2, LSL
	0x0352D33C ADD X10, X10, 0x20
	0x0352D340 MOVN W11, 0x0
	0x0352D344 CMP W8, W9
	0x0352D348 B.CS 0x352D410
	0x0352D34C ADD W8, W8, 0x1
	0x0352D350 CMP W8, 0x46
	0x0352D354 STR W11, [X10], #0x4
	0x0352D358 B.NE 0x352D344
	0x0352D35C MOVZ W8, 0x46
	0x0352D360 STR W8, [X19 + 0x18]
	0x0352D364 LDR X11, [X19 + 0x10]
	0x0352D368 CBZ X11, 0x352D414
	0x0352D36C LDR W9, [X11 + 0x18]
	0x0352D370 MOV W10, W8
	0x0352D374 ADD X8, X11, 0x1C
	0x0352D378 SUB X11, X10, 0x1
	0x0352D37C CMP X11, X9
	0x0352D380 B.CS 0x352D410
	0x0352D384 LDR W12, [X8, X10, LSL #2]
	0x0352D388 CBNZ W12, 0x352D3A4
	0x0352D38C SUB W10, W10, 0x1
	0x0352D390 ADD X12, X11, 0x1
	0x0352D394 CMP X12, 0x3
	0x0352D398 STR W10, [X19 + 0x18]
	0x0352D39C MOV X10, X11
	0x0352D3A0 B.GE 0x352D378
	0x0352D3A4 LDR X8, [X21 + 0x10]
	0x0352D3A8 CBZ X8, 0x352D414
	0x0352D3AC LDR W9, [X8 + 0x18]
	0x0352D3B0 CMP W9, 0x45
	0x0352D3B4 B.LS 0x352D410
	0x0352D3B8 LDR X9, [X20 + 0x10]
	0x0352D3BC CBZ X9, 0x352D414
	0x0352D3C0 LDR W10, [X9 + 0x18]
	0x0352D3C4 CMP W10, 0x45
	0x0352D3C8 B.LS 0x352D410
	0x0352D3CC LDR W8, [X8 + 0x134]
	0x0352D3D0 LDR W9, [X9 + 0x134]
	0x0352D3D4 EOR W9, W9, W8, 0x0
	0x0352D3D8 TBZ X9, 0x1F, 0x352D3FC
	0x0352D3DC LDR X9, [X19 + 0x10]
	0x0352D3E0 CBZ X9, 0x352D414
	0x0352D3E4 LDR W10, [X9 + 0x18]
	0x0352D3E8 CMP W10, 0x45
	0x0352D3EC B.LS 0x352D410
	0x0352D3F0 LDR W9, [X9 + 0x134]
	0x0352D3F4 EOR W8, W9, W8, 0x0
	0x0352D3F8 TBNZ X8, 0x1F, 0x352D418
	0x0352D3FC MOV X0, X19
	0x0352D400 LDP X20, X19, [X31 + 0x20]
	0x0352D404 LDP X22, X21, [X31 + 0x10]
	0x0352D408 LDR X30, [X31], #0x30
	0x0352D40C RET
	0x0352D410 BL 0x1C16F28
	0x0352D414 BL 0x1C16F20
	0x0352D418 ADRP X0, 0xBF4000
	0x0352D41C LDR X0, [X0 + 0x560]
	0x0352D420 BL 0x1C16D08
	0x0352D424 BL 0x1C16F10
	0x0352D428 MOV X1, X31
	0x0352D42C MOV X19, X0
	0x0352D430 BL 0x33162DC
	0x0352D434 ADRP X0, 0xC07000
	0x0352D438 LDR X0, [X0 + 0x9E0]
	0x0352D43C BL 0x1C16D08
	0x0352D440 MOV X1, X0
	0x0352D444 MOV X0, X19
	0x0352D448 BL 0x1C16DEC
	0x0352D44C STP X30, X21, [X31 - 0x20]!
	0x0352D450 STP X20, X19, [X31 + 0x10]
	0x0352D454 ADRP X19, 0xEB2000
	0x0352D458 ADRP X21, 0xC07000
	0x0352D45C LDRB W8, [X19 + 0xB90]
	0x0352D460 LDR X21, [X21 + 0x980]
	0x0352D464 MOV X20, X0
	0x0352D468 TBNZ X8, 0x0, 0x352D480
	0x0352D46C ADRP X0, 0xC07000
	0x0352D470 LDR X0, [X0 + 0x980]
	0x0352D474 BL 0x1C16CF4
	0x0352D478 MOVZ W8, 0x1
	0x0352D47C STRB W8, [X19 + 0xB90]
	0x0352D480 LDR X0, [X21]
	0x0352D484 BL 0x1C16F10
	0x0352D488 MOV X1, X20
	0x0352D48C MOV X19, X0
	0x0352D490 BL 0x352BE1C
	0x0352D494 CBZ X19, 0x352D584
	0x0352D498 LDR X9, [X19 + 0x10]
	0x0352D49C MOV X8, X31
	0x0352D4A0 ADD X10, X9, 0x20
	0x0352D4A4 CBZ X9, 0x352D584
	0x0352D4A8 LDR W11, [X9 + 0x18]
	0x0352D4AC CMP X8, X11
	0x0352D4B0 B.CS 0x352D580
	0x0352D4B4 LDR W12, [X10, X8, LSL #2]
	0x0352D4B8 SUB W11, W12, 0x1
	0x0352D4BC STR W11, [X10, X8, LSL #2]
	0x0352D4C0 ADD X11, X8, 0x1
	0x0352D4C4 CBNZ W12, 0x352D4D4
	0x0352D4C8 CMP X8, 0x45
	0x0352D4CC MOV X8, X11
	0x0352D4D0 B.CC 0x352D4A4
	0x0352D4D4 LDR W9, [X19 + 0x18]
	0x0352D4D8 CMP W9, W11
	0x0352D4DC B.GE 0x352D4E8
	0x0352D4E0 MOV W9, W11
	0x0352D4E4 STR W11, [X19 + 0x18]
	0x0352D4E8 CMP W9, 0x2
	0x0352D4EC B.LT 0x352D530
	0x0352D4F0 LDR X11, [X19 + 0x10]
	0x0352D4F4 CBZ X11, 0x352D584
	0x0352D4F8 LDR W8, [X11 + 0x18]
	0x0352D4FC MOV W10, W9
	0x0352D500 ADD X9, X11, 0x1C
	0x0352D504 SUB X11, X10, 0x1
	0x0352D508 CMP X11, X8
	0x0352D50C B.CS 0x352D580
	0x0352D510 LDR W12, [X9, X10, LSL #2]
	0x0352D514 CBNZ W12, 0x352D530
	0x0352D518 SUB W10, W10, 0x1
	0x0352D51C ADD X12, X11, 0x1
	0x0352D520 CMP X12, 0x3
	0x0352D524 STR W10, [X19 + 0x18]
	0x0352D528 MOV X10, X11
	0x0352D52C B.GE 0x352D504
	0x0352D530 CBZ X20, 0x352D584
	0x0352D534 LDR X8, [X20 + 0x10]
	0x0352D538 CBZ X8, 0x352D584
	0x0352D53C LDR W9, [X8 + 0x18]
	0x0352D540 CMP W9, 0x45
	0x0352D544 B.LS 0x352D580
	0x0352D548 LDR W8, [X8 + 0x134]
	0x0352D54C TBZ X8, 0x1F, 0x352D570
	0x0352D550 LDR X9, [X19 + 0x10]
	0x0352D554 CBZ X9, 0x352D584
	0x0352D558 LDR W10, [X9 + 0x18]
	0x0352D55C CMP W10, 0x45
	0x0352D560 B.LS 0x352D580
	0x0352D564 LDR W9, [X9 + 0x134]
	0x0352D568 EOR W8, W9, W8, 0x0
	0x0352D56C TBNZ X8, 0x1F, 0x352D588
	0x0352D570 MOV X0, X19
	0x0352D574 LDP X20, X19, [X31 + 0x10]
	0x0352D578 LDP X30, X21, [X31], #0x20
	0x0352D57C RET
	0x0352D580 BL 0x1C16F28
	0x0352D584 BL 0x1C16F20
	0x0352D588 ADRP X0, 0xBF4000
	0x0352D58C LDR X0, [X0 + 0x560]
	0x0352D590 BL 0x1C16D08
	0x0352D594 BL 0x1C16F10
	0x0352D598 MOV X19, X0
	0x0352D59C ADRP X0, 0xC07000
	0x0352D5A0 LDR X0, [X0 + 0x9E8]
	0x0352D5A4 BL 0x1C16D08
	0x0352D5A8 MOV X1, X0
	0x0352D5AC MOV X0, X19
	0x0352D5B0 MOV X2, X31
	0x0352D5B4 BL 0x3316338
	0x0352D5B8 ADRP X0, 0xC07000
	0x0352D5BC LDR X0, [X0 + 0x9F0]
	0x0352D5C0 BL 0x1C16D08
	0x0352D5C4 MOV X1, X0
	0x0352D5C8 MOV X0, X19
	0x0352D5CC BL 0x1C16DEC
	0x0352D5D0 STP X30, X21, [X31 - 0x20]!
	0x0352D5D4 STP X20, X19, [X31 + 0x10]
	0x0352D5D8 ADRP X19, 0xEB2000
	0x0352D5DC LDRB W8, [X19 + 0xB95]
	0x0352D5E0 MOV X20, X0
	0x0352D5E4 TBNZ X8, 0x0, 0x352D5FC
	0x0352D5E8 ADRP X0, 0xC07000
	0x0352D5EC LDR X0, [X0 + 0x980]
	0x0352D5F0 BL 0x1C16CF4
	0x0352D5F4 MOVZ W8, 0x1
	0x0352D5F8 STRB W8, [X19 + 0xB95]
	0x0352D5FC CBZ X20, 0x352D740
	0x0352D600 LDR W8, [X20 + 0x18]
	0x0352D604 CMP W8, 0x1
	0x0352D608 B.NE 0x352D644
	0x0352D60C LDR X8, [X20 + 0x10]
	0x0352D610 CBZ X8, 0x352D740
	0x0352D614 LDR W9, [X8 + 0x18]
	0x0352D618 CBZ W9, 0x352D73C
	0x0352D61C LDR W21, [X8 + 0x20]
	0x0352D620 ADRP X8, 0xC07000
	0x0352D624 LDR X8, [X8 + 0x980]
	0x0352D628 LDR X0, [X8]
	0x0352D62C BL 0x1C16F10
	0x0352D630 MOV X19, X0
	0x0352D634 CBNZ W21, 0x352D658
	0x0352D638 MOV X0, X19
	0x0352D63C BL 0x352BB04
	0x0352D640 B 0x352D72C
	0x0352D644 ADRP X8, 0xC07000
	0x0352D648 LDR X8, [X8 + 0x980]
	0x0352D64C LDR X0, [X8]
	0x0352D650 BL 0x1C16F10
	0x0352D654 MOV X19, X0
	0x0352D658 MOV X0, X19
	0x0352D65C MOV X1, X20
	0x0352D660 BL 0x352BE1C
	0x0352D664 CBZ X19, 0x352D740
	0x0352D668 LDR X8, [X19 + 0x10]
	0x0352D66C LDR X9, [X20 + 0x10]
	0x0352D670 MOV X12, X31
	0x0352D674 ADD X13, X8, 0x20
	0x0352D678 ADD X14, X9, 0x20
	0x0352D67C CBZ X9, 0x352D740
	0x0352D680 LDR W10, [X9 + 0x18]
	0x0352D684 CMP X12, X10
	0x0352D688 B.CS 0x352D73C
	0x0352D68C CBZ X8, 0x352D740
	0x0352D690 LDR W11, [X8 + 0x18]
	0x0352D694 CMP X12, X11
	0x0352D698 B.CS 0x352D73C
	0x0352D69C LDR W15, [X14, X12, LSL #2]
	0x0352D6A0 ORN W15, W31, W15, 0x0
	0x0352D6A4 STR W15, [X13, X12, LSL #2]
	0x0352D6A8 ADD X12, X12, 0x1
	0x0352D6AC CMP X12, 0x46
	0x0352D6B0 B.NE 0x352D67C
	0x0352D6B4 MOV X12, X31
	0x0352D6B8 ADD X13, X8, 0x20
	0x0352D6BC CMP W12, W11
	0x0352D6C0 B.CS 0x352D73C
	0x0352D6C4 LDR W14, [X13, X12, LSL #2]
	0x0352D6C8 CMP W12, 0x44
	0x0352D6CC ADD X14, X14, 0x1
	0x0352D6D0 STR W14, [X13, X12, LSL #2]
	0x0352D6D4 B.HI 0x352D6E0
	0x0352D6D8 ADD X12, X12, 0x1
	0x0352D6DC TBNZ X14, 0x0, 0x352D6BC
	0x0352D6E0 CMP W10, 0x45
	0x0352D6E4 B.LS 0x352D73C
	0x0352D6E8 CMP W11, 0x45
	0x0352D6EC B.LS 0x352D73C
	0x0352D6F0 LDR W9, [X9 + 0x134]
	0x0352D6F4 LDR W10, [X8 + 0x134]
	0x0352D6F8 EOR W9, W10, W9, 0x0
	0x0352D6FC TBZ X9, 0x1F, 0x352D744
	0x0352D700 MOVZ W9, 0x46
	0x0352D704 STR W9, [X19 + 0x18]
	0x0352D708 MOVZ W9, 0x4D
	0x0352D70C LDR W10, [X8, X9, LSL #2]
	0x0352D710 CBNZ W10, 0x352D72C
	0x0352D714 SUB X11, X9, 0x7
	0x0352D718 SUB W10, W9, 0x8
	0x0352D71C SUB X9, X9, 0x1
	0x0352D720 CMP X11, 0x3
	0x0352D724 STR W10, [X19 + 0x18]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xEB3000
	009 Move W8, [X21+2961]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xC08000
	017 Move X0, [X0+2432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2961], W8
	021 Move X22, 0xC08000
	022 Move X22, [X22+2432]
	023 Compare X20, 0
	024 JumpIfEqual {235}
	025 Move X8, [X20+16]
	026 Compare X8, 0
	027 JumpIfEqual {237}
	028 Move W9, [X8+24]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move W21, [X8+308]
	031 Move TEMP, X21
	032 And TEMP, TEMP, -2147483648
	033 Compare TEMP, -2147483648
	034 JumpIfNotEqual {43}
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X20
	041 Call BigInteger.op_UnaryNegation, X0
	042 Move X20, X0
	043 Move W23, W21
	044 ShiftRight W23, 31
	045 And W23, W23, 0x7FFFFFFF
	046 Compare X19, 0
	047 JumpIfEqual {239}
	048 Move X8, [X19+16]
	049 Compare X8, 0
	050 JumpIfEqual {240}
	051 Move W9, [X8+24]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move W8, [X8+308]
	054 Move TEMP, X8
	055 And TEMP, TEMP, -2147483648
	056 Compare TEMP, -2147483648
	057 JumpIfEqual {59}
	058 Move W24, W31
	059 Move X0, [X22]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Move X0, X19
	065 Call BigInteger.op_UnaryNegation, X0
	066 Move W24, 1
	067 Move X19, X0
	068 Move X0, [X22]
	069 Call 0x1C17F10
	070 Move X21, X0
	071 Call BigInteger..ctor, X0
	072 Compare X20, 0
	073 JumpIfEqual {236}
	074 Move W10, [X20+24]
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move X8, [X20+16]
	077 Move X9, X31
	078 Compare X8, 0
	079 JumpIfEqual {229}
	080 Move W10, [X8+24]
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Add X11, X8, X9
	083 Add X11, X11, 32
	084 Move W10, [X11]
	085 Compare W10, 0
	086 JumpIfEqual {135}
	087 Compare X19, 0
	088 JumpIfEqual {231}
	089 Move W15, [X19+24]
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move X13, [X19+16]
	092 Move X10, X31
	093 Move X12, X31
	094 Add X14, X13, 32
	095 Compare X13, 0
	096 JumpIfEqual {224}
	097 Move W15, [X13+24]
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Compare X21, 0
	100 JumpIfEqual {223}
	101 Move X15, [X21+16]
	102 Compare X15, 0
	103 JumpIfEqual {225}
	104 Move W17, [X15+24]
	105 Add X16, X9, X12
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Move W17, [X11]
	108 Move W0, [X14]
	109 Add X15, X15, W16
	110 Move W16, [X15+32]
	111 Add X12, X12, 1
	112 NotImplemented "Instruction MADD not yet implemented."
	113 Add X10, X10, X16
	114 Move [X15+32], W10
	115 NotImplemented "Instruction LDRSW not yet implemented."
	116 Move X10, X10
	117 ShiftRight X10, 32
	118 And X10, X10, 0x7FFFFFFF
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Compare X10, 0
	121 JumpIfNotEqual {125}
	122 Move X10, X31
	123 Compare X10, 0
	124 JumpIfEqual {135}
	125 Compare X21, 0
	126 JumpIfEqual {232}
	127 Move X11, [X21+16]
	128 Compare X11, 0
	129 JumpIfEqual {234}
	130 Move W13, [X11+24]
	131 Add W12, W15, W9
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Add X11, X11, W12
	134 Move [X11+32], W10
	135 NotImplemented "Instruction LDRSW not yet implemented."
	136 Add X9, X9, 1
	137 NotImplemented "Instruction CMP not yet implemented."
	138 Compare X19, 0
	139 JumpIfEqual {152}
	140 Compare X21, 0
	141 JumpIfEqual {152}
	142 Move W8, [X19+24]
	143 Add W9, W8, W10
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Move W8, 70
	146 NotImplemented "Instruction CSEL not yet implemented."
	147 NotImplemented "Instruction CMP not yet implemented."
	148 Move [X21+24], W10
	149 Move X8, [X21+16]
	150 Compare X8, 0
	151 JumpIfNotEqual {170}
	152 Call 0x1C17F20
	153 Move X8, [X21+16]
	154 Move W9, W10
	155 Add X10, X8, 28
	156 Compare X8, 0
	157 JumpIfEqual {152}
	158 Move W12, [X8+24]
	159 Subtract X11, X9, 1
	160 NotImplemented "Instruction CMP not yet implemented."
	161 Move W12, [X10]
	162 Compare W12, 0
	163 JumpIfNotEqual {170}
	164 Subtract W9, W9, 1
	165 Add X12, X11, 1
	166 NotImplemented "Instruction CMP not yet implemented."
	167 Move [X21+24], W9
	168 Move X9, X11
	169 Move W9, 1
	170 Move X10, [X8+24]
	171 NotImplemented "Instruction CMP not yet implemented."
	172 Move W12, [X8+308]
	173 Xor W11, W24, W23
	174 Move TEMP, X12
	175 And TEMP, TEMP, -2147483648
	176 Compare TEMP, -2147483648
	177 JumpIfEqual {195}
	178 Compare W11, 0
	179 JumpIfEqual {214}
	180 Move X0, [X22]
	181 Move W8, [X0+224]
	182 Compare W8, 0
	183 JumpIfNotEqual {185}
	184 Call 0x1C17DFC
	185 Move X0, X21
	186 Move X20, [X31+48]
	187 Move X19, [X31+56]
	188 Move X22, [X31+32]
	189 Move X21, [X31+40]
	190 Move X24, [X31+16]
	191 Move X23, [X31+24]
	192 Move X30, [X31+64]
	193 Call BigInteger.op_UnaryNegation, X0
	194 Return X0
	195 Move W13, 0x80000000
	196 NotImplemented "Instruction CMP not yet implemented."
	197 Xor W11, W11, 1
	198 Move TEMP, X11
	199 And TEMP, TEMP, 1
	200 Compare TEMP, 1
	201 JumpIfEqual {297}
	202 Subtract W9, W9, 1
	203 NotImplemented "Instruction CMP not yet implemented."
	204 Move X11, X31
	205 Add X8, X8, 32
	206 NotImplemented "Instruction CMP not yet implemented."
	207 Move W12, [X8]
	208 Add X11, X11, 1
	209 NotImplemented "Instruction CMP not yet implemented."
	210 Compare W12, 0
	211 JumpIfEqual {206}
	212 Compare W12, 0
	213 JumpIfNotEqual {297}
	214 Move X0, X21
	215 Move X20, [X31+48]
	216 Move X19, [X31+56]
	217 Move X22, [X31+32]
	218 Move X21, [X31+40]
	219 Move X24, [X31+16]
	220 Move X23, [X31+24]
	221 Move X30, [X31+64]
	222 Return X0
	223 Call 0x1C17F20
	224 Call 0x1C17F20
	225 Call 0x1C17F20
	226 Call 0x1C17F28
	227 Call 0x1C17F28
	228 Call 0x1C17F28
	229 Call 0x1C17F20
	230 Call 0x1C17F28
	231 Call 0x1C17F20
	232 Call 0x1C17F20
	233 Call 0x1C17F28
	234 Call 0x1C17F20
	235 Call 0x1C17F20
	236 Call 0x1C17F20
	237 Call 0x1C17F20
	238 Call 0x1C17F28
	239 Call 0x1C17F20
	240 Call 0x1C17F20
	241 Call 0x1C17F28
	242 Move X21, X0
	243 Move W24, 1
	244 Move X21, X0
	245 Move W24, W31
	246 Move W23, 1
	247 Move X21, X0
	248 Move W24, W31
	249 Move X21, X0
	250 Move W24, W31
	251 Move W23, W31
	252 Move X21, X0
	253 Move W24, W31
	254 Move W23, W31
	255 Move X20, X31
	256 NotImplemented "Instruction CMP not yet implemented."
	257 Move X0, X21
	258 Call 0x3EB2AD0
	259 Move X21, X0
	260 Move X0, 0xBC7000
	261 Move X0, [X0+2000]
	262 Call 0x1C17D08
	263 Move X8, [X21]
	264 Move X1, [X8]
	265 Call 0x1C18270
	266 Move TEMP, X0
	267 And TEMP, TEMP, 1
	268 Compare TEMP, 1
	269 JumpIfNotEqual {271}
	270 Call 0x3EB2AE0
	271 Move W0, 8
	272 Call 0x3EB2AF0
	273 Move X8, [X21]
	274 Move [X0], X8
	275 Move X1, 0x988000
	276 Add X1, X1, 3672
	277 Move X2, X31
	278 Call 0x3EB2B00
	279 Move X21, X0
	280 Call 0x3EB2AE0
	281 Move X21, X0
	282 NotImplemented "Instruction CMP not yet implemented."
	283 Move X0, X21
	284 Call 0x3EB2AD0
	285 Move X19, X0
	286 Move X0, 0xBC7000
	287 Move X0, [X0+2000]
	288 Call 0x1C17D08
	289 Move X8, [X19]
	290 Move X1, [X8]
	291 Call 0x1C18270
	292 Move TEMP, X0
	293 And TEMP, TEMP, 1
	294 Compare TEMP, 1
	295 JumpIfNotEqual {315}
	296 Call 0x3EB2AE0
	297 Move X0, 0xBF5000
	298 Move X0, [X0+1376]
	299 Call 0x1C17D08
	300 Call 0x1C17F10
	301 Move X19, X0
	302 Move X0, 0xC08000
	303 Move X0, [X0+2456]
	304 Call 0x1C17D08
	305 Move X1, X0
	306 Move X0, X19
	307 Move X2, X31
	308 Call ArithmeticException..ctor, X0, X1
	309 Move X0, 0xC08000
	310 Move X0, [X0+2464]
	311 Call 0x1C17D08
	312 Move X1, X0
	313 Move X0, X19
	314 Call 0x1C17DEC
	315 Move W0, 8
	316 Call 0x3EB2AF0
	317 Move X8, [X19]
	318 Move [X0], X8
	319 Move X1, 0x988000
	320 Add X1, X1, 3672
	321 Move X2, X31
	322 Call 0x3EB2B00
	323 Move X21, X0
	324 Call 0x3EB2AE0
	325 Move X0, X21
	326 Call 0x1D2D690
	327 Call 0x1991590

Method: Photon.SocketServer.Numeric.BigInteger op_LeftShift(Photon.SocketServer.Numeric.BigInteger bi1, System.Int32 shiftVal)

Disassembly:
	0x0352E78C ADD X10, X9, W11, 0x2, SXTW
	0x0352E790 LDR W14, [X10 + 0x20]!
	0x0352E794 CMP W14, W12
	0x0352E798 B.CS 0x352E7A4
	0x0352E79C MOV W10, W31
	0x0352E7A0 B 0x352E7C4
	0x0352E7A4 CBZ X0, 0x352E984
	0x0352E7A8 LDR W15, [X0 + 0x18]
	0x0352E7AC CBZ W15, 0x352E980
	0x0352E7B0 UDIV W15, W14, W12
	0x0352E7B4 MSUB W14, W15, W12, W14
	0x0352E7B8 STR W15, [X0 + 0x20]
	0x0352E7BC STR W14, [X10]
	0x0352E7C0 MOVZ W10, 0x1
	0x0352E7C4 SUBS W14, W13, 0x2
	0x0352E7C8 B.MI 0x352E844
	0x0352E7CC MOV W14, W14
	0x0352E7D0 ADD W13, W13, W10
	0x0352E7D4 MOVZ X16, 0x1
	0x0352E7D8 ADD X15, X9, 0x20
	0x0352E7DC SUB W13, W13, 0x1
	0x0352E7E0 ADD X16, X16, X14, 0x20, LSL
	0x0352E7E4 MOV X17, INVALID
	0x0352E7E8 ADD X1, X14, 0x1
	0x0352E7EC CMP X1, X8
	0x0352E7F0 B.CS 0x352E980
	0x0352E7F4 ADD X1, X9, X16, 0x1E, ASR
	0x0352E7F8 LDR W2, [X1 + 0x20]!
	0x0352E7FC CBZ X0, 0x352E984
	0x0352E800 LDR W3, [X0 + 0x18]
	0x0352E804 CMP W10, W3
	0x0352E808 B.CS 0x352E980
	0x0352E80C LDR W3, [X15, X14, LSL #2]
	0x0352E810 ADD X4, X0, W10, 0x2, SXTW
	0x0352E814 ADD W10, W10, 0x1
	0x0352E818 SUBS W11, W11, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xEB2000
	007 Move X22, 0xC07000
	008 Move W8, [X20+2962]
	009 Move X22, [X22+2432]
	010 Move W19, W1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xC07000
	017 Move X0, [X0+2432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+2962], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X1, X21
	024 Move X20, X0
	025 Call BigInteger..ctor, X0, X1
	026 Compare X20, 0
	027 JumpIfEqual {45}
	028 Move X0, [X22]
	029 Move X21, [X20+16]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X21
	035 Move W1, W19
	036 Call BigInteger.shiftLeft, X0, X1
	037 Move [X20+24], W0
	038 Move X0, X20
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Return X0
	045 Call 0x1C17F20

Method: System.Int32 shiftLeft(System.UInt32[] buffer, System.Int32 shiftVal)

Disassembly:
	0x0352E81C BFM X3, X2, 0x20, 0x1F
	0x0352E820 UDIV X2, X3, X12
	0x0352E824 STR W2, [X4 + 0x20]
	0x0352E828 STR W31, [X1]
	0x0352E82C MSUB W1, W2, W12, W3
	0x0352E830 STR W1, [X15, X14, LSL #2]
	0x0352E834 SUB X14, X14, 0x1
	0x0352E838 ADD X16, X16, X17
	0x0352E83C B.NE 0x352E7E8
	0x0352E840 MOV W10, W13
	0x0352E844 CBZ X20, 0x352E984
	0x0352E848 SUBS W11, W10, 0x1
	0x0352E84C STR W10, [X20 + 0x18]
	0x0352E850 B.MI 0x352E8A8
	0x0352E854 CBZ X0, 0x352E984
	0x0352E858 LDR X12, [X20 + 0x10]
	0x0352E85C LDR W13, [X0 + 0x18]
	0x0352E860 MOV W14, W31
	0x0352E864 CMP W11, W13
	0x0352E868 B.CS 0x352E980
	0x0352E86C CBZ X12, 0x352E984
	0x0352E870 LDR W15, [X12 + 0x18]
	0x0352E874 CMP W14, W15
	0x0352E878 B.CS 0x352E980
	0x0352E87C ADD X15, X0, W11, 0x2, UXTW
	0x0352E880 LDR W15, [X15 + 0x20]
	0x0352E884 SUB W11, W11, 0x1
	0x0352E888 ADD X16, X12, W14, 0x2, SXTW
	0x0352E88C ADDS W31, W11, 0x1
	0x0352E890 ADD W14, W14, 0x1
	0x0352E894 STR W15, [X16 + 0x20]
	0x0352E898 B.NE 0x352E864
	0x0352E89C CMP W10, 0x45
	0x0352E8A0 B.LE 0x352E8AC
	0x0352E8A4 B 0x352E8D8
	0x0352E8A8 MOV W10, W31
	0x0352E8AC LDR X12, [X20 + 0x10]
	0x0352E8B0 CBZ X12, 0x352E984
	0x0352E8B4 LDR W11, [X12 + 0x18]
	0x0352E8B8 ADD X12, X12, W10, 0x2, SXTW
	0x0352E8BC ADD X12, X12, 0x20
	0x0352E8C0 CMP W10, W11
	0x0352E8C4 B.CS 0x352E980
	0x0352E8C8 ADD W10, W10, 0x1
	0x0352E8CC CMP W10, 0x46
	0x0352E8D0 STR W31, [X12], #0x4
	0x0352E8D4 B.NE 0x352E8C0
	0x0352E8D8 LDR W10, [X20 + 0x18]
	0x0352E8DC CMP W10, 0x2
	0x0352E8E0 B.LT 0x352E924
	0x0352E8E4 LDR X12, [X20 + 0x10]
	0x0352E8E8 CBZ X12, 0x352E984
	0x0352E8EC LDR W11, [X12 + 0x18]
	0x0352E8F0 ADD X12, X12, 0x1C
	0x0352E8F4 SUB X13, X10, 0x1
	0x0352E8F8 CMP X13, X11
	0x0352E8FC B.CS 0x352E980
	0x0352E900 LDR W14, [X12, X10, LSL #2]

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {54}
	004 Move X9, [X0+24]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move W8, W9
	007 Move W10, W9
	008 Subtract W8, W10, 1
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Add X11, X0, W8
	011 Move W11, [X11+32]
	012 Compare W11, 0
	013 JumpIfNotEqual {16}
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Move W10, W8
	016 Move W8, W10
	017 NotImplemented "Instruction CMP not yet implemented."
	018 And X10, X9, 0
	019 Add X11, X0, 32
	020 Move W12, 32
	021 NotImplemented "Instruction CMP not yet implemented."
	022 NotImplemented "Instruction CSEL not yet implemented."
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X13, X31
	025 And W14, W12, 63
	026 Move W15, W8
	027 Move X16, X11
	028 Move X17, X10
	029 Compare X17, 0
	030 JumpIfEqual {53}
	031 Move W2, [X16]
	032 Subtract X15, X15, 1
	033 Subtract X17, X17, 1
	034 NotImplemented "Instruction LSLV not yet implemented."
	035 Or W3, W2, W13
	036 Move X13, X2
	037 ShiftRight X13, 32
	038 And X13, X13, 0x7FFFFFFF
	039 Move [X16+4], W3
	040 Compare X13, 0
	041 JumpIfEqual {48}
	042 Add W14, W8, 1
	043 NotImplemented "Instruction CMP not yet implemented."
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Add X8, X0, W8
	046 Move [X8+32], W13
	047 Move W8, W14
	048 Subtract W1, W1, W12
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move W0, W8
	051 Move X30, [X31+16]
	052 Return X0
	053 Call 0x1C17F28
	054 Call 0x1C17F20

Method: Photon.SocketServer.Numeric.BigInteger op_RightShift(Photon.SocketServer.Numeric.BigInteger bi1, System.Int32 shiftVal)

Disassembly:
	0x0352E904 CBNZ W14, 0x352E930
	0x0352E908 SUB W10, W10, 0x1
	0x0352E90C ADD X14, X13, 0x1
	0x0352E910 CMP X14, 0x3
	0x0352E914 STR W10, [X20 + 0x18]
	0x0352E918 MOV X10, X13
	0x0352E91C B.GE 0x352E8F4
	0x0352E920 MOV W10, W13
	0x0352E924 CBNZ W10, 0x352E930
	0x0352E928 MOVZ W10, 0x1
	0x0352E92C STR W10, [X20 + 0x18]
	0x0352E930 LDR W10, [X19 + 0x18]
	0x0352E934 CMP W10, 0x2
	0x0352E938 B.LT 0x352E96C
	0x0352E93C ADD X9, X9, 0x1C
	0x0352E940 SUB X11, X10, 0x1
	0x0352E944 CMP X11, X8
	0x0352E948 B.CS 0x352E980
	0x0352E94C LDR W12, [X9, X10, LSL #2]
	0x0352E950 CBNZ W12, 0x352E96C
	0x0352E954 SUB W10, W10, 0x1
	0x0352E958 ADD X12, X11, 0x1
	0x0352E95C CMP X12, 0x3
	0x0352E960 STR W10, [X19 + 0x18]
	0x0352E964 MOV X10, X11
	0x0352E968 B.GE 0x352E940
	0x0352E96C LDP X20, X19, [X31 + 0x30]
	0x0352E970 LDP X22, X21, [X31 + 0x20]
	0x0352E974 LDP X24, X23, [X31 + 0x10]
	0x0352E978 LDR X30, [X31], #0x40
	0x0352E97C RET
	0x0352E980 BL 0x1C16F28
	0x0352E984 BL 0x1C16F20
	0x0352E988 STR X30, [X31 - 0x50]!
	0x0352E98C STP X26, X25, [X31 + 0x10]
	0x0352E990 STP X24, X23, [X31 + 0x20]
	0x0352E994 STP X22, X21, [X31 + 0x30]
	0x0352E998 STP X20, X19, [X31 + 0x40]
	0x0352E99C ADRP X19, 0xEB1000
	0x0352E9A0 ADRP X23, 0xC06000
	0x0352E9A4 LDRB W8, [X19 + 0xB9B]
	0x0352E9A8 LDR X23, [X23 + 0x980]
	0x0352E9AC MOV X20, X1
	0x0352E9B0 MOV X21, X0
	0x0352E9B4 TBNZ X8, 0x0, 0x352E9CC
	0x0352E9B8 ADRP X0, 0xC06000
	0x0352E9BC LDR X0, [X0 + 0x980]
	0x0352E9C0 BL 0x1C16CF4
	0x0352E9C4 MOVZ W8, 0x1
	0x0352E9C8 STRB W8, [X19 + 0xB9B]
	0x0352E9CC LDR X0, [X23]
	0x0352E9D0 BL 0x1C16F10
	0x0352E9D4 MOV X19, X0
	0x0352E9D8 BL 0x352BB04
	0x0352E9DC LDR X0, [X23]
	0x0352E9E0 BL 0x1C16F10
	0x0352E9E4 MOV X22, X0
	0x0352E9E8 BL 0x352BB04
	0x0352E9EC CBZ X21, 0x352EB30
	0x0352E9F0 LDR X8, [X21 + 0x10]
	0x0352E9F4 CBZ X8, 0x352EB30
	0x0352E9F8 LDR W9, [X8 + 0x18]
	0x0352E9FC CMP W9, 0x45
	0x0352EA00 B.LS 0x352EB34
	0x0352EA04 LDR W8, [X8 + 0x134]
	0x0352EA08 TBNZ X8, 0x1F, 0x352EA18
	0x0352EA0C MOV W24, W31
	0x0352EA10 CBNZ X20, 0x352EA3C
	0x0352EA14 B 0x352EB30
	0x0352EA18 LDR X0, [X23]
	0x0352EA1C LDR W8, [X0 + 0xE0]
	0x0352EA20 CBNZ W8, 0x352EA28
	0x0352EA24 BL 0x1C16DFC
	0x0352EA28 MOV X0, X21
	0x0352EA2C BL 0x352D5D0
	0x0352EA30 MOV X21, X0
	0x0352EA34 MOVZ W24, 0x1
	0x0352EA38 CBZ X20, 0x352EB30
	0x0352EA3C LDR X8, [X20 + 0x10]
	0x0352EA40 CBZ X8, 0x352EB30
	0x0352EA44 LDR W9, [X8 + 0x18]
	0x0352EA48 CMP W9, 0x45
	0x0352EA4C B.LS 0x352EB34

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xEB2000
	007 Move X22, 0xC07000
	008 Move W8, [X19+2963]
	009 Move X22, [X22+2432]
	010 Move W21, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xC07000
	017 Move X0, [X0+2432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X19+2963], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X1, X20
	024 Move X19, X0
	025 Call BigInteger..ctor, X0, X1
	026 Compare X19, 0
	027 JumpIfEqual {95}
	028 Move X0, [X22]
	029 Move X22, [X19+16]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X22
	035 Move W1, W21
	036 Call BigInteger.shiftRight, X0, X1
	037 Move [X19+24], W0
	038 Compare X20, 0
	039 JumpIfEqual {95}
	040 Move X8, [X20+16]
	041 Compare X8, 0
	042 JumpIfEqual {95}
	043 Move W9, [X8+24]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move W8, [X8+308]
	046 Move TEMP, X8
	047 And TEMP, TEMP, -2147483648
	048 Compare TEMP, -2147483648
	049 JumpIfNotEqual {88}
	050 Move X8, [X19+16]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Compare X8, 0
	053 JumpIfNotEqual {67}
	054 Compare X8, 0
	055 JumpIfEqual {95}
	056 Move W9, [X8+24]
	057 Move W10, 69
	058 Move TEMP, 0
	059 Not TEMP
	060 Move W11, TEMP
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Add X12, X8, W10
	063 Move [X12+32], W11
	064 Move W0, [X19+24]
	065 Subtract W10, W10, 1
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move W9, [X8+24]
	068 Subtract W12, W0, 1
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move W10, 0x80000000
	071 Move W11, 32
	072 Add X12, X8, W12
	073 Add X12, X12, 32
	074 Move W13, [X12]
	075 And W31, W13, W10
	076 Or W13, W13, W10
	077 Subtract W11, W11, 1
	078 Move [X12], W13
	079 Move W12, [X19+24]
	080 Move W10, W10
	081 ShiftRight W10, 1
	082 And W10, W10, 0x7FFFFFFF
	083 Subtract W12, W12, 1
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Call 0x1C17F28
	086 Move W8, 70
	087 Move [X19+24], W8
	088 Move X0, X19
	089 Move X20, [X31+32]
	090 Move X19, [X31+40]
	091 Move X22, [X31+16]
	092 Move X21, [X31+24]
	093 Move X30, [X31+48]
	094 Return X0
	095 Call 0x1C17F20

Method: System.Int32 shiftRight(System.UInt32[] buffer, System.Int32 shiftVal)

Disassembly:
	0x0352EA50 LDR W8, [X8 + 0x134]
	0x0352EA54 TBNZ X8, 0x1F, 0x352EA60
	0x0352EA58 MOV W25, W31
	0x0352EA5C B 0x352EA80
	0x0352EA60 LDR X0, [X23]
	0x0352EA64 LDR W8, [X0 + 0xE0]
	0x0352EA68 CBNZ W8, 0x352EA70
	0x0352EA6C BL 0x1C16DFC
	0x0352EA70 MOV X0, X20
	0x0352EA74 BL 0x352D5D0
	0x0352EA78 MOV X20, X0
	0x0352EA7C MOVZ W25, 0x1
	0x0352EA80 LDR X0, [X23]
	0x0352EA84 LDR W8, [X0 + 0xE0]
	0x0352EA88 CBNZ W8, 0x352EA90
	0x0352EA8C BL 0x1C16DFC
	0x0352EA90 MOV X0, X21
	0x0352EA94 MOV X1, X20
	0x0352EA98 BL 0x352DE90
	0x0352EA9C TBNZ X0, 0x0, 0x352EB14
	0x0352EAA0 CBZ X20, 0x352EB30
	0x0352EAA4 LDR X0, [X23]
	0x0352EAA8 LDR W26, [X20 + 0x18]
	0x0352EAAC LDR W8, [X0 + 0xE0]
	0x0352EAB0 CBNZ W8, 0x352EAB8
	0x0352EAB4 BL 0x1C16DFC
	0x0352EAB8 MOV X0, X21
	0x0352EABC MOV X1, X20
	0x0352EAC0 MOV X2, X19
	0x0352EAC4 MOV X3, X22
	0x0352EAC8 CMP W26, 0x1
	0x0352EACC B.NE 0x352EAD8
	0x0352EAD0 BL 0x352E680
	0x0352EAD4 B 0x352EADC
	0x0352EAD8 BL 0x352E0AC
	0x0352EADC EOR W8, W25, W24, 0x0
	0x0352EAE0 CMP W8, 0x1
	0x0352EAE4 B.NE 0x352EB14
	0x0352EAE8 LDR X0, [X23]
	0x0352EAEC LDR W8, [X0 + 0xE0]
	0x0352EAF0 CBNZ W8, 0x352EAF8
	0x0352EAF4 BL 0x1C16DFC
	0x0352EAF8 MOV X0, X19
	0x0352EAFC LDP X20, X19, [X31 + 0x40]
	0x0352EB00 LDP X22, X21, [X31 + 0x30]
	0x0352EB04 LDP X24, X23, [X31 + 0x20]
	0x0352EB08 LDP X26, X25, [X31 + 0x10]
	0x0352EB0C LDR X30, [X31], #0x50
	0x0352EB10 B 0x352D5D0
	0x0352EB14 MOV X0, X19
	0x0352EB18 LDP X20, X19, [X31 + 0x40]
	0x0352EB1C LDP X22, X21, [X31 + 0x30]
	0x0352EB20 LDP X24, X23, [X31 + 0x20]
	0x0352EB24 LDP X26, X25, [X31 + 0x10]
	0x0352EB28 LDR X30, [X31], #0x50
	0x0352EB2C RET
	0x0352EB30 BL 0x1C16F20
	0x0352EB34 BL 0x1C16F28
	0x0352EB38 STP X30, X25, [X31 - 0x40]!
	0x0352EB3C STP X24, X23, [X31 + 0x10]
	0x0352EB40 STP X22, X21, [X31 + 0x20]
	0x0352EB44 STP X20, X19, [X31 + 0x30]
	0x0352EB48 ADRP X20, 0xEB1000
	0x0352EB4C ADRP X23, 0xC06000
	0x0352EB50 LDRB W8, [X20 + 0xB9C]
	0x0352EB54 LDR X23, [X23 + 0x980]
	0x0352EB58 MOV X19, X1
	0x0352EB5C MOV X21, X0

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {66}
	004 Move X9, [X0+24]
	005 Move X8, X0
	006 NotImplemented "Instruction CMP not yet implemented."
	007 NotImplemented "Instruction CSET not yet implemented."
	008 Move W0, W9
	009 Move W11, W9
	010 Subtract W0, W11, 1
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Add X12, X8, W0
	013 Move W12, [X12+32]
	014 Compare W12, 0
	015 JumpIfNotEqual {19}
	016 NotImplemented "Instruction CMP not yet implemented."
	017 NotImplemented "Instruction CSET not yet implemented."
	018 Move W11, W0
	019 Move W0, W11
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move W11, W31
	022 Subtract W12, W0, 1
	023 Move W13, 32
	024 Move W14, 32
	025 Subtract W15, W13, W1
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction CSEL not yet implemented."
	028 NotImplemented "Instruction CSEL not yet implemented."
	029 Move TEMP, X12
	030 And TEMP, TEMP, -2147483648
	031 Compare TEMP, -2147483648
	032 JumpIfEqual {45}
	033 Move X16, X31
	034 And W15, W14, 63
	035 And W17, W11, 63
	036 Move W2, W12
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Add X3, X8, W2
	039 Move W4, [X3+32]
	040 Subtract W2, W2, 1
	041 NotImplemented "Instruction LSRV not yet implemented."
	042 Or W5, W5, W16
	043 NotImplemented "Instruction LSLV not yet implemented."
	044 Move [X3+32], W5
	045 Subtract W1, W1, W14
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move TEMP, X10
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfEqual {63}
	051 And X9, X9, 0
	052 Move W0, W0
	053 Add X8, X8, 28
	054 Subtract X10, X0, 1
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move W11, [X8]
	057 Compare W11, 0
	058 JumpIfNotEqual {63}
	059 Add X11, X10, 1
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X0, X10
	062 Move W0, 1
	063 Move X30, [X31+16]
	064 Return X0
	065 Call 0x1C17F28
	066 Call 0x1C17F20

Method: Photon.SocketServer.Numeric.BigInteger op_OnesComplement(Photon.SocketServer.Numeric.BigInteger bi1)

Disassembly:
	0x0352EB60 TBNZ X8, 0x0, 0x352EB78
	0x0352EB64 ADRP X0, 0xC06000
	0x0352EB68 LDR X0, [X0 + 0x980]
	0x0352EB6C BL 0x1C16CF4
	0x0352EB70 MOVZ W8, 0x1
	0x0352EB74 STRB W8, [X20 + 0xB9C]
	0x0352EB78 LDR X0, [X23]
	0x0352EB7C BL 0x1C16F10
	0x0352EB80 MOV X22, X0
	0x0352EB84 BL 0x352BB04
	0x0352EB88 LDR X0, [X23]
	0x0352EB8C BL 0x1C16F10
	0x0352EB90 MOV X1, X21
	0x0352EB94 MOV X20, X0
	0x0352EB98 BL 0x352BE1C
	0x0352EB9C CBZ X21, 0x352ECB4
	0x0352EBA0 LDR X8, [X21 + 0x10]
	0x0352EBA4 CBZ X8, 0x352ECB4
	0x0352EBA8 LDR W9, [X8 + 0x18]
	0x0352EBAC CMP W9, 0x45
	0x0352EBB0 B.LS 0x352ECB8
	0x0352EBB4 LDR W24, [X8 + 0x134]
	0x0352EBB8 TBZ X24, 0x1F, 0x352EBD8
	0x0352EBBC LDR X0, [X23]
	0x0352EBC0 LDR W8, [X0 + 0xE0]
	0x0352EBC4 CBNZ W8, 0x352EBCC
	0x0352EBC8 BL 0x1C16DFC
	0x0352EBCC MOV X0, X21
	0x0352EBD0 BL 0x352D5D0
	0x0352EBD4 MOV X21, X0
	0x0352EBD8 CBZ X19, 0x352ECB4
	0x0352EBDC LDR X8, [X19 + 0x10]
	0x0352EBE0 CBZ X8, 0x352ECB4
	0x0352EBE4 LDR W9, [X8 + 0x18]
	0x0352EBE8 CMP W9, 0x45
	0x0352EBEC B.LS 0x352ECB8
	0x0352EBF0 LDR W8, [X8 + 0x134]
	0x0352EBF4 TBZ X8, 0x1F, 0x352EC14
	0x0352EBF8 LDR X0, [X23]
	0x0352EBFC LDR W8, [X0 + 0xE0]
	0x0352EC00 CBNZ W8, 0x352EC08
	0x0352EC04 BL 0x1C16DFC
	0x0352EC08 MOV X0, X19
	0x0352EC0C BL 0x352D5D0
	0x0352EC10 MOV X19, X0
	0x0352EC14 LDR X0, [X23]
	0x0352EC18 LDR W8, [X0 + 0xE0]
	0x0352EC1C CBNZ W8, 0x352EC24
	0x0352EC20 BL 0x1C16DFC
	0x0352EC24 MOV X0, X21
	0x0352EC28 MOV X1, X19
	0x0352EC2C BL 0x352DE90
	0x0352EC30 TBNZ X0, 0x0, 0x352EC6C
	0x0352EC34 CBZ X19, 0x352ECB4
	0x0352EC38 LDR X0, [X23]
	0x0352EC3C LDR W25, [X19 + 0x18]
	0x0352EC40 LDR W8, [X0 + 0xE0]
	0x0352EC44 CBNZ W8, 0x352EC4C
	0x0352EC48 BL 0x1C16DFC
	0x0352EC4C MOV X0, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0xEB2000
	006 Move X21, 0xC07000
	007 Move W8, [X19+2964]
	008 Move X21, [X21+2432]
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xC07000
	015 Move X0, [X0+2432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+2964], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X20
	022 Move X19, X0
	023 Call BigInteger..ctor, X0, X1
	024 Compare X19, 0
	025 JumpIfEqual {67}
	026 Move X8, [X19+16]
	027 Move W9, 8
	028 Compare X20, 0
	029 JumpIfEqual {67}
	030 Move X10, [X20+16]
	031 Compare X10, 0
	032 JumpIfEqual {67}
	033 Move W12, [X10+24]
	034 Subtract X11, X9, 8
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Compare X8, 0
	037 JumpIfEqual {67}
	038 Move W12, [X8+24]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move W10, [X10]
	041 NotImplemented "Instruction ORN not yet implemented."
	042 Move [X8], W10
	043 Add X9, X9, 1
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move W9, 70
	046 Move [X19+24], W9
	047 Compare X8, 0
	048 JumpIfEqual {67}
	049 Move W9, [X8+24]
	050 Move W10, 77
	051 Subtract X11, X10, 8
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move W11, [X8]
	054 Compare W11, 0
	055 JumpIfNotEqual {61}
	056 Subtract X12, X10, 7
	057 Subtract W11, W10, 8
	058 Subtract X10, X10, 1
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move [X19+24], W11
	061 Move X0, X19
	062 Move X20, [X31+16]
	063 Move X19, [X31+24]
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 Return X0
	067 Call 0x1C17F20
	068 Call 0x1C17F28

Method: Photon.SocketServer.Numeric.BigInteger op_UnaryNegation(Photon.SocketServer.Numeric.BigInteger bi1)

Disassembly:
	0x0352E5D0 B.LT 0x352E628
	0x0352E5D4 CBZ X21, 0x352E67C
	0x0352E5D8 LDR X9, [X23 + 0x10]
	0x0352E5DC LDR W10, [X21 + 0x18]
	0x0352E5E0 MOV X8, X31
	0x0352E5E4 ADD X12, X21, 0x20
	0x0352E5E8 ADD X11, X9, 0x20
	0x0352E5EC CMP X8, X10
	0x0352E5F0 B.CS 0x352E678
	0x0352E5F4 CBZ X9, 0x352E67C
	0x0352E5F8 LDR W13, [X9 + 0x18]
	0x0352E5FC CMP X8, X13
	0x0352E600 B.CS 0x352E678
	0x0352E604 LDR W13, [X12, X8, LSL #2]
	0x0352E608 STR W13, [X11, X8, LSL #2]
	0x0352E60C LDRSW X13, [X23 + 0x18]
	0x0352E610 ADD X8, X8, 0x1
	0x0352E614 CMP X8, X13
	0x0352E618 B.LT 0x352E5EC
	0x0352E61C CMP W8, 0x45
	0x0352E620 B.LE 0x352E62C
	0x0352E624 B 0x352E658
	0x0352E628 MOV X8, X31
	0x0352E62C LDR X10, [X23 + 0x10]
	0x0352E630 CBZ X10, 0x352E67C
	0x0352E634 LDR W9, [X10 + 0x18]
	0x0352E638 AND X8, X8, 0x0
	0x0352E63C ADD X10, X10, 0x20
	0x0352E640 CMP X8, X9
	0x0352E644 B.CS 0x352E678
	0x0352E648 STR W31, [X10, X8, LSL #2]
	0x0352E64C ADD X8, X8, 0x1
	0x0352E650 CMP X8, 0x46
	0x0352E654 B.NE 0x352E640
	0x0352E658 LDP X20, X19, [X31 + 0xA0]
	0x0352E65C LDP X22, X21, [X31 + 0x90]
	0x0352E660 LDP X24, X23, [X31 + 0x80]
	0x0352E664 LDP X26, X25, [X31 + 0x70]
	0x0352E668 LDP X28, X27, [X31 + 0x60]
	0x0352E66C LDP X29, X30, [X31 + 0x50]
	0x0352E670 ADD X31, X31, 0xB0
	0x0352E674 RET
	0x0352E678 BL 0x1C16F28
	0x0352E67C BL 0x1C16F20
	0x0352E680 STR X30, [X31 - 0x40]!
	0x0352E684 STP X24, X23, [X31 + 0x10]
	0x0352E688 STP X22, X21, [X31 + 0x20]
	0x0352E68C STP X20, X19, [X31 + 0x30]
	0x0352E690 ADRP X23, 0xEB1000
	0x0352E694 ADRP X24, 0xBEE000
	0x0352E698 LDRB W8, [X23 + 0xB9A]
	0x0352E69C LDR X24, [X24 + 0xD08]
	0x0352E6A0 MOV X19, X3
	0x0352E6A4 MOV X20, X2
	0x0352E6A8 MOV X21, X1
	0x0352E6AC MOV X22, X0
	0x0352E6B0 TBNZ X8, 0x0, 0x352E6C8
	0x0352E6B4 ADRP X0, 0xBEE000
	0x0352E6B8 LDR X0, [X0 + 0xD08]
	0x0352E6BC BL 0x1C16CF4
	0x0352E6C0 MOVZ W8, 0x1
	0x0352E6C4 STRB W8, [X23 + 0xB9A]
	0x0352E6C8 LDR X0, [X24]
	0x0352E6CC MOVZ W1, 0x46
	0x0352E6D0 BL 0x1C16D6C
	0x0352E6D4 CBZ X19, 0x352E984
	0x0352E6D8 CBZ X22, 0x352E984
	0x0352E6DC LDR X9, [X19 + 0x10]
	0x0352E6E0 LDR X11, [X22 + 0x10]
	0x0352E6E4 MOV X10, X31
	0x0352E6E8 ADD X12, X9, 0x20
	0x0352E6EC ADD X13, X11, 0x20
	0x0352E6F0 CBZ X11, 0x352E984
	0x0352E6F4 LDR W8, [X11 + 0x18]
	0x0352E6F8 CMP X10, X8
	0x0352E6FC B.CS 0x352E980
	0x0352E700 CBZ X9, 0x352E984
	0x0352E704 LDR W8, [X9 + 0x18]
	0x0352E708 CMP X10, X8
	0x0352E70C B.CS 0x352E980
	0x0352E710 LDR W14, [X13, X10, LSL #2]
	0x0352E714 STR W14, [X12, X10, LSL #2]
	0x0352E718 ADD X10, X10, 0x1
	0x0352E71C CMP X10, 0x46
	0x0352E720 B.NE 0x352E6F0
	0x0352E724 LDR W13, [X22 + 0x18]
	0x0352E728 CMP W13, 0x2
	0x0352E72C STR W13, [X19 + 0x18]
	0x0352E730 B.LT 0x352E768
	0x0352E734 ADD X10, X9, 0x1C
	0x0352E738 SUB X11, X13, 0x1
	0x0352E73C CMP X11, X8
	0x0352E740 B.CS 0x352E980
	0x0352E744 LDR W12, [X10, X13, LSL #2]
	0x0352E748 CBNZ W12, 0x352E768
	0x0352E74C SUB W12, W13, 0x1
	0x0352E750 ADD X13, X11, 0x1
	0x0352E754 CMP X13, 0x3
	0x0352E758 MOV X13, X11
	0x0352E75C STR W12, [X19 + 0x18]
	0x0352E760 B.GE 0x352E738
	0x0352E764 MOVZ W13, 0x1
	0x0352E768 CBZ X21, 0x352E984
	0x0352E76C LDR X10, [X21 + 0x10]
	0x0352E770 CBZ X10, 0x352E984
	0x0352E774 LDR W11, [X10 + 0x18]
	0x0352E778 CBZ W11, 0x352E980
	0x0352E77C SUB W11, W13, 0x1
	0x0352E780 CMP W11, W8
	0x0352E784 B.CS 0x352E980
	0x0352E788 LDR W12, [X10 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0xEB2000
	006 Move W8, [X19+2965]
	007 Move X20, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xC07000
	013 Move X0, [X0+2432]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+2965], W8
	017 Compare X20, 0
	018 JumpIfEqual {104}
	019 Move W8, [X20+24]
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move X8, [X20+16]
	022 Compare X8, 0
	023 JumpIfEqual {104}
	024 Move W9, [X8+24]
	025 Compare W9, 0
	026 JumpIfEqual {103}
	027 Move W21, [X8+32]
	028 Move X8, 0xC07000
	029 Move X8, [X8+2432]
	030 Move X0, [X8]
	031 Call 0x1C17F10
	032 Move X19, X0
	033 Compare W21, 0
	034 JumpIfNotEqual {42}
	035 Move X0, X19
	036 Call BigInteger..ctor, X0
	037 Move X8, 0xC07000
	038 Move X8, [X8+2432]
	039 Move X0, [X8]
	040 Call 0x1C17F10
	041 Move X19, X0
	042 Move X0, X19
	043 Move X1, X20
	044 Call BigInteger..ctor, X0, X1
	045 Compare X19, 0
	046 JumpIfEqual {104}
	047 Move X8, [X19+16]
	048 Move X9, [X20+16]
	049 Move X12, X31
	050 Add X13, X8, 32
	051 Add X14, X9, 32
	052 Compare X9, 0
	053 JumpIfEqual {104}
	054 Move W10, [X9+24]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Compare X8, 0
	057 JumpIfEqual {104}
	058 Move W11, [X8+24]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move W15, [X14]
	061 NotImplemented "Instruction ORN not yet implemented."
	062 Move [X13], W15
	063 Add X12, X12, 1
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X12, X31
	066 Add X13, X8, 32
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move W14, [X13]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Add X14, X14, 1
	071 Move [X13], W14
	072 Add X12, X12, 1
	073 Move TEMP, X14
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfEqual {67}
	077 NotImplemented "Instruction CMP not yet implemented."
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move W9, [X9+308]
	080 Move W10, [X8+308]
	081 Xor W9, W10, W9
	082 Move TEMP, X9
	083 And TEMP, TEMP, -2147483648
	084 Compare TEMP, -2147483648
	085 JumpIfNotEqual {105}
	086 Move W9, 70
	087 Move [X19+24], W9
	088 Move W9, 77
	089 Move W10, [X8]
	090 Compare W10, 0
	091 JumpIfNotEqual {97}
	092 Subtract X11, X9, 7
	093 Subtract W10, W9, 8
	094 Subtract X9, X9, 1
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move [X19+24], W10
	097 Move X0, X19
	098 Move X20, [X31+16]
	099 Move X19, [X31+24]
	100 Move X30, [X31+32]
	101 Move X21, [X31+40]
	102 Return X0
	103 Call 0x1C17F28
	104 Call 0x1C17F20
	105 Move X0, 0xBF4000
	106 Move X0, [X0+1376]
	107 Call 0x1C17D08
	108 Call 0x1C17F10
	109 Move X19, X0
	110 Move X0, 0xC07000
	111 Move X0, [X0+2552]
	112 Call 0x1C17D08
	113 Move X1, X0
	114 Move X0, X19
	115 Move X2, X31
	116 Call ArithmeticException..ctor, X0, X1
	117 Move X0, 0xC07000
	118 Move X0, [X0+2560]
	119 Call 0x1C17D08
	120 Move X1, X0
	121 Move X0, X19
	122 Call 0x1C17DEC

Method: System.Boolean op_Equality(Photon.SocketServer.Numeric.BigInteger bi1, Photon.SocketServer.Numeric.BigInteger bi2)

Disassembly:
	0x0352EC50 MOV X1, X19
	0x0352EC54 MOV X2, X22
	0x0352EC58 MOV X3, X20
	0x0352EC5C CMP W25, 0x1
	0x0352EC60 B.NE 0x352EC84
	0x0352EC64 BL 0x352E680
	0x0352EC68 TBNZ X24, 0x1F, 0x352EC8C

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {9}
	004 Move X8, [X0]
	005 Move X3, [X8+312]
	006 Move X2, [X8+320]
	007 Move X30, [X31+16]
	008 CallNoReturn X3
	009 Call 0x1C17F20

Method: System.Boolean op_Inequality(Photon.SocketServer.Numeric.BigInteger bi1, Photon.SocketServer.Numeric.BigInteger bi2)

Disassembly:
	0x0352EC6C MOV X0, X20
	0x0352EC70 LDP X20, X19, [X31 + 0x30]
	0x0352EC74 LDP X22, X21, [X31 + 0x20]
	0x0352EC78 LDP X24, X23, [X31 + 0x10]
	0x0352EC7C LDP X30, X25, [X31], #0x40
	0x0352EC80 RET
	0x0352EC84 BL 0x352E0AC
	0x0352EC88 TBZ X24, 0x1F, 0x352EC6C
	0x0352EC8C LDR X0, [X23]
	0x0352EC90 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {12}
	004 Move X8, [X0]
	005 Move X9, [X8+312]
	006 Move X2, [X8+320]
	007 NotImplemented "Instruction BLR not yet implemented."
	008 NotImplemented "Instruction ORN not yet implemented."
	009 And W0, W8, 1
	010 Move X30, [X31+16]
	011 Return X0
	012 Call 0x1C17F20

Method: System.Boolean Equals(System.Object o)

Disassembly:
	0x0352EC94 CBNZ W8, 0x352EC9C
	0x0352EC98 BL 0x1C16DFC
	0x0352EC9C MOV X0, X20
	0x0352ECA0 LDP X20, X19, [X31 + 0x30]
	0x0352ECA4 LDP X22, X21, [X31 + 0x20]
	0x0352ECA8 LDP X24, X23, [X31 + 0x10]
	0x0352ECAC LDP X30, X25, [X31], #0x40
	0x0352ECB0 B 0x352D5D0
	0x0352ECB4 BL 0x1C16F20
	0x0352ECB8 BL 0x1C16F28
	0x0352ECBC STR X30, [X31 - 0x30]!
	0x0352ECC0 STP X22, X21, [X31 + 0x10]
	0x0352ECC4 STP X20, X19, [X31 + 0x20]
	0x0352ECC8 ADRP X19, 0xEB1000
	0x0352ECCC ADRP X22, 0xC06000
	0x0352ECD0 LDRB W8, [X19 + 0xB9D]
	0x0352ECD4 LDR X22, [X22 + 0x980]
	0x0352ECD8 MOV X20, X1
	0x0352ECDC MOV X21, X0
	0x0352ECE0 TBNZ X8, 0x0, 0x352ECF8
	0x0352ECE4 ADRP X0, 0xC06000
	0x0352ECE8 LDR X0, [X0 + 0x980]
	0x0352ECEC BL 0x1C16CF4
	0x0352ECF0 MOVZ W8, 0x1
	0x0352ECF4 STRB W8, [X19 + 0xB9D]
	0x0352ECF8 LDR X0, [X22]
	0x0352ECFC BL 0x1C16F10
	0x0352ED00 MOV X19, X0
	0x0352ED04 BL 0x352BB04
	0x0352ED08 CBZ X21, 0x352EDFC
	0x0352ED0C CBZ X20, 0x352EDFC
	0x0352ED10 LDR W8, [X21 + 0x18]
	0x0352ED14 LDR W9, [X20 + 0x18]
	0x0352ED18 CMP W8, W9
	0x0352ED1C CSEL W10, W8, W9, GT
	0x0352ED20 CMP W10, 0x1
	0x0352ED24 B.LT 0x352ED9C
	0x0352ED28 LDR X11, [X21 + 0x10]
	0x0352ED2C CBZ X11, 0x352EDFC
	0x0352ED30 LDR W9, [X11 + 0x18]
	0x0352ED34 MOV X8, X31
	0x0352ED38 MOV W10, W10
	0x0352ED3C ADD X11, X11, 0x20
	0x0352ED40 CMP X8, X9
	0x0352ED44 B.CS 0x352EDF8
	0x0352ED48 LDR X12, [X20 + 0x10]
	0x0352ED4C CBZ X12, 0x352EDFC
	0x0352ED50 LDR W13, [X12 + 0x18]
	0x0352ED54 CMP X8, X13
	0x0352ED58 B.CS 0x352EDF8
	0x0352ED5C CBZ X19, 0x352EDFC
	0x0352ED60 LDR X13, [X19 + 0x10]
	0x0352ED64 CBZ X13, 0x352EDFC
	0x0352ED68 LDR W14, [X13 + 0x18]
	0x0352ED6C CMP X8, X14
	0x0352ED70 B.CS 0x352EDF8
	0x0352ED74 ADD X12, X12, X8, 0x2, LSL
	0x0352ED78 LDR W14, [X11, X8, LSL #2]
	0x0352ED7C LDR W12, [X12 + 0x20]
	0x0352ED80 ADD X13, X13, X8, 0x2, LSL
	0x0352ED84 ADD X8, X8, 0x1
	0x0352ED88 CMP X10, X8
	0x0352ED8C AND W12, W12, W14, 0x0
	0x0352ED90 STR W12, [X13 + 0x20]
	0x0352ED94 B.NE 0x352ED40
	0x0352ED98 B 0x352EDA0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xEB2000
	006 Move W8, [X21+2966]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xC07000
	014 Move X0, [X0+2432]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2966], W8
	018 Compare X19, 0
	019 JumpIfEqual {64}
	020 Move X9, 0xC07000
	021 Move X9, [X9+2432]
	022 Move X8, [X19]
	023 Move X1, [X9]
	024 Move W10, [X8+304]
	025 Move W9, [X1+304]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X8, [X8+200]
	028 Add X8, X8, X9
	029 NotImplemented "Instruction LDUR not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move W8, [X20+24]
	032 Move W9, [X19+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Subtract W8, W8, 1
	035 Move X9, [X20+16]
	036 Compare X9, 0
	037 JumpIfEqual {64}
	038 Move W10, [X9+24]
	039 Move W11, W31
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X12, [X19+16]
	042 Compare X12, 0
	043 JumpIfEqual {64}
	044 Move W13, [X12+24]
	045 Move X11, W11
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Add X13, X9, X11
	048 Add X14, X12, X11
	049 Move W12, [X13+32]
	050 Move W13, [X14+32]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 NotImplemented "Instruction CSET not yet implemented."
	053 NotImplemented "Instruction CMP not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Add W11, W11, 1
	056 Move W0, W31
	057 Move W0, 1
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Return X0
	063 Call 0x1C17F28
	064 Call 0x1C17F20
	065 Move X0, X19
	066 Call 0x1C181E0

Method: System.Int32 GetHashCode()

Disassembly:
	0x0352ED9C CBZ X19, 0x352EDFC
	0x0352EDA0 LDR X8, [X19 + 0x10]
	0x0352EDA4 MOVZ W9, 0x46
	0x0352EDA8 STR W9, [X19 + 0x18]
	0x0352EDAC CBZ X8, 0x352EDFC
	0x0352EDB0 LDR W9, [X8 + 0x18]
	0x0352EDB4 MOVZ W10, 0x4D
	0x0352EDB8 SUB X11, X10, 0x8
	0x0352EDBC CMP X11, X9
	0x0352EDC0 B.CS 0x352EDF8

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0]
	003 Move X9, [X8+360]
	004 Move X1, [X8+368]
	005 NotImplemented "Instruction BLR not yet implemented."
	006 Compare X0, 0
	007 JumpIfEqual {13}
	008 Move X8, [X0]
	009 Move X2, [X8+344]
	010 Move X1, [X8+352]
	011 Move X30, [X31+16]
	012 CallNoReturn X2
	013 Call 0x1C17F20

Method: System.Boolean op_GreaterThan(Photon.SocketServer.Numeric.BigInteger bi1, Photon.SocketServer.Numeric.BigInteger bi2)

Disassembly:
	0x0352EDC4 LDR W11, [X8, X10, LSL #2]
	0x0352EDC8 CBNZ W11, 0x352EDE4
	0x0352EDCC SUB X12, X10, 0x7
	0x0352EDD0 SUB W11, W10, 0x8
	0x0352EDD4 SUB X10, X10, 0x1
	0x0352EDD8 CMP X12, 0x3
	0x0352EDDC STR W11, [X19 + 0x18]
	0x0352EDE0 B.CS 0x352EDB8
	0x0352EDE4 MOV X0, X19
	0x0352EDE8 LDP X20, X19, [X31 + 0x20]
	0x0352EDEC LDP X22, X21, [X31 + 0x10]
	0x0352EDF0 LDR X30, [X31], #0x30
	0x0352EDF4 RET
	0x0352EDF8 BL 0x1C16F28
	0x0352EDFC BL 0x1C16F20
	0x0352EE00 STR X30, [X31 - 0x30]!
	0x0352EE04 STP X22, X21, [X31 + 0x10]
	0x0352EE08 STP X20, X19, [X31 + 0x20]
	0x0352EE0C ADRP X19, 0xEB1000
	0x0352EE10 ADRP X22, 0xC06000
	0x0352EE14 LDRB W8, [X19 + 0xB9E]
	0x0352EE18 LDR X22, [X22 + 0x980]
	0x0352EE1C MOV X20, X1
	0x0352EE20 MOV X21, X0
	0x0352EE24 TBNZ X8, 0x0, 0x352EE3C
	0x0352EE28 ADRP X0, 0xC06000
	0x0352EE2C LDR X0, [X0 + 0x980]
	0x0352EE30 BL 0x1C16CF4
	0x0352EE34 MOVZ W8, 0x1
	0x0352EE38 STRB W8, [X19 + 0xB9E]
	0x0352EE3C LDR X0, [X22]
	0x0352EE40 BL 0x1C16F10
	0x0352EE44 MOV X19, X0
	0x0352EE48 BL 0x352BB04
	0x0352EE4C CBZ X21, 0x352EF40
	0x0352EE50 CBZ X20, 0x352EF40
	0x0352EE54 LDR W8, [X21 + 0x18]
	0x0352EE58 LDR W9, [X20 + 0x18]
	0x0352EE5C CMP W8, W9
	0x0352EE60 CSEL W10, W8, W9, GT
	0x0352EE64 CMP W10, 0x1
	0x0352EE68 B.LT 0x352EEE0
	0x0352EE6C LDR X11, [X21 + 0x10]
	0x0352EE70 CBZ X11, 0x352EF40
	0x0352EE74 LDR W9, [X11 + 0x18]
	0x0352EE78 MOV X8, X31
	0x0352EE7C MOV W10, W10
	0x0352EE80 ADD X11, X11, 0x20
	0x0352EE84 CMP X8, X9
	0x0352EE88 B.CS 0x352EF3C
	0x0352EE8C LDR X12, [X20 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {57}
	004 Move X8, [X0+16]
	005 Compare X8, 0
	006 JumpIfEqual {57}
	007 Move W9, [X8+24]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move W10, [X8+308]
	010 Move TEMP, X10
	011 And TEMP, TEMP, -2147483648
	012 Compare TEMP, -2147483648
	013 JumpIfEqual {27}
	014 Compare X1, 0
	015 JumpIfEqual {57}
	016 Move X10, [X1+16]
	017 Compare X10, 0
	018 JumpIfEqual {57}
	019 Move X11, [X10+24]
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move W12, [X10+308]
	022 Move TEMP, X12
	023 And TEMP, TEMP, -2147483648
	024 Compare TEMP, -2147483648
	025 JumpIfNotEqual {40}
	026 Move W0, 1
	027 Compare X1, 0
	028 JumpIfEqual {57}
	029 Move X10, [X1+16]
	030 Compare X10, 0
	031 JumpIfEqual {57}
	032 Move X11, [X10+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move W12, [X10+308]
	035 Move TEMP, X12
	036 And TEMP, TEMP, -2147483648
	037 Compare TEMP, -2147483648
	038 JumpIfEqual {40}
	039 Move W0, W31
	040 Move W12, [X0+24]
	041 Move W13, [X1+24]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 NotImplemented "Instruction CSEL not yet implemented."
	044 Subtract W12, W12, 1
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move W13, W12
	048 Add X14, X8, X13
	049 Add X13, X10, X13
	050 Move W14, [X14+32]
	051 Move W13, [X13+32]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 NotImplemented "Instruction CSET not yet implemented."
	054 Move X30, [X31+16]
	055 Return X0
	056 Call 0x1C17F28
	057 Call 0x1C17F20

Method: System.Boolean op_LessThan(Photon.SocketServer.Numeric.BigInteger bi1, Photon.SocketServer.Numeric.BigInteger bi2)

Disassembly:
	0x0352EE90 CBZ X12, 0x352EF40
	0x0352EE94 LDR W13, [X12 + 0x18]
	0x0352EE98 CMP X8, X13
	0x0352EE9C B.CS 0x352EF3C
	0x0352EEA0 CBZ X19, 0x352EF40
	0x0352EEA4 LDR X13, [X19 + 0x10]
	0x0352EEA8 CBZ X13, 0x352EF40
	0x0352EEAC LDR W14, [X13 + 0x18]
	0x0352EEB0 CMP X8, X14
	0x0352EEB4 B.CS 0x352EF3C
	0x0352EEB8 ADD X12, X12, X8, 0x2, LSL
	0x0352EEBC LDR W14, [X11, X8, LSL #2]
	0x0352EEC0 LDR W12, [X12 + 0x20]
	0x0352EEC4 ADD X13, X13, X8, 0x2, LSL
	0x0352EEC8 ADD X8, X8, 0x1
	0x0352EECC CMP X10, X8
	0x0352EED0 ORR W12, W12, W14, 0x0
	0x0352EED4 STR W12, [X13 + 0x20]
	0x0352EED8 B.NE 0x352EE84
	0x0352EEDC B 0x352EEE4
	0x0352EEE0 CBZ X19, 0x352EF40
	0x0352EEE4 LDR X8, [X19 + 0x10]
	0x0352EEE8 MOVZ W9, 0x46
	0x0352EEEC STR W9, [X19 + 0x18]
	0x0352EEF0 CBZ X8, 0x352EF40
	0x0352EEF4 LDR W9, [X8 + 0x18]
	0x0352EEF8 MOVZ W10, 0x4D
	0x0352EEFC SUB X11, X10, 0x8
	0x0352EF00 CMP X11, X9
	0x0352EF04 B.CS 0x352EF3C
	0x0352EF08 LDR W11, [X8, X10, LSL #2]
	0x0352EF0C CBNZ W11, 0x352EF28
	0x0352EF10 SUB X12, X10, 0x7
	0x0352EF14 SUB W11, W10, 0x8
	0x0352EF18 SUB X10, X10, 0x1
	0x0352EF1C CMP X12, 0x3
	0x0352EF20 STR W11, [X19 + 0x18]
	0x0352EF24 B.CS 0x352EEFC
	0x0352EF28 MOV X0, X19
	0x0352EF2C LDP X20, X19, [X31 + 0x20]
	0x0352EF30 LDP X22, X21, [X31 + 0x10]
	0x0352EF34 LDR X30, [X31], #0x30
	0x0352EF38 RET
	0x0352EF3C BL 0x1C16F28
	0x0352EF40 BL 0x1C16F20
	0x0352EF44 STR X30, [X31 - 0x30]!
	0x0352EF48 STP X22, X21, [X31 + 0x10]
	0x0352EF4C STP X20, X19, [X31 + 0x20]
	0x0352EF50 ADRP X19, 0xEB1000
	0x0352EF54 ADRP X22, 0xC06000
	0x0352EF58 LDRB W8, [X19 + 0xB9F]

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {57}
	004 Move X8, [X0+16]
	005 Compare X8, 0
	006 JumpIfEqual {57}
	007 Move W9, [X8+24]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move W10, [X8+308]
	010 Move TEMP, X10
	011 And TEMP, TEMP, -2147483648
	012 Compare TEMP, -2147483648
	013 JumpIfEqual {27}
	014 Compare X1, 0
	015 JumpIfEqual {57}
	016 Move X10, [X1+16]
	017 Compare X10, 0
	018 JumpIfEqual {57}
	019 Move X11, [X10+24]
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move W12, [X10+308]
	022 Move TEMP, X12
	023 And TEMP, TEMP, -2147483648
	024 Compare TEMP, -2147483648
	025 JumpIfNotEqual {40}
	026 Move W0, W31
	027 Compare X1, 0
	028 JumpIfEqual {57}
	029 Move X10, [X1+16]
	030 Compare X10, 0
	031 JumpIfEqual {57}
	032 Move X11, [X10+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move W12, [X10+308]
	035 Move TEMP, X12
	036 And TEMP, TEMP, -2147483648
	037 Compare TEMP, -2147483648
	038 JumpIfEqual {40}
	039 Move W0, 1
	040 Move W12, [X0+24]
	041 Move W13, [X1+24]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 NotImplemented "Instruction CSEL not yet implemented."
	044 Subtract W12, W12, 1
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move W13, W12
	048 Add X14, X8, X13
	049 Add X13, X10, X13
	050 Move W14, [X14+32]
	051 Move W13, [X13+32]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 NotImplemented "Instruction CSET not yet implemented."
	054 Move X30, [X31+16]
	055 Return X0
	056 Call 0x1C17F28
	057 Call 0x1C17F20

Method: System.Boolean op_GreaterThanOrEqual(Photon.SocketServer.Numeric.BigInteger bi1, Photon.SocketServer.Numeric.BigInteger bi2)

Disassembly:
	0x0352EF5C LDR X22, [X22 + 0x980]
	0x0352EF60 MOV X20, X1
	0x0352EF64 MOV X21, X0
	0x0352EF68 TBNZ X8, 0x0, 0x352EF80
	0x0352EF6C ADRP X0, 0xC06000
	0x0352EF70 LDR X0, [X0 + 0x980]
	0x0352EF74 BL 0x1C16CF4
	0x0352EF78 MOVZ W8, 0x1
	0x0352EF7C STRB W8, [X19 + 0xB9F]
	0x0352EF80 LDR X0, [X22]
	0x0352EF84 BL 0x1C16F10
	0x0352EF88 MOV X19, X0
	0x0352EF8C BL 0x352BB04
	0x0352EF90 CBZ X21, 0x352F084
	0x0352EF94 CBZ X20, 0x352F084
	0x0352EF98 LDR W8, [X21 + 0x18]
	0x0352EF9C LDR W9, [X20 + 0x18]
	0x0352EFA0 CMP W8, W9
	0x0352EFA4 CSEL W10, W8, W9, GT
	0x0352EFA8 CMP W10, 0x1
	0x0352EFAC B.LT 0x352F024
	0x0352EFB0 LDR X11, [X21 + 0x10]
	0x0352EFB4 CBZ X11, 0x352F084
	0x0352EFB8 LDR W9, [X11 + 0x18]
	0x0352EFBC MOV X8, X31
	0x0352EFC0 MOV W10, W10
	0x0352EFC4 ADD X11, X11, 0x20
	0x0352EFC8 CMP X8, X9
	0x0352EFCC B.CS 0x352F080
	0x0352EFD0 LDR X12, [X20 + 0x10]
	0x0352EFD4 CBZ X12, 0x352F084
	0x0352EFD8 LDR W13, [X12 + 0x18]
	0x0352EFDC CMP X8, X13
	0x0352EFE0 B.CS 0x352F080
	0x0352EFE4 CBZ X19, 0x352F084
	0x0352EFE8 LDR X13, [X19 + 0x10]
	0x0352EFEC CBZ X13, 0x352F084
	0x0352EFF0 LDR W14, [X13 + 0x18]
	0x0352EFF4 CMP X8, X14
	0x0352EFF8 B.CS 0x352F080
	0x0352EFFC ADD X12, X12, X8, 0x2, LSL
	0x0352F000 LDR W14, [X11, X8, LSL #2]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xEB2000
	007 Move X21, 0xC07000
	008 Move W8, [X22+2967]
	009 Move X21, [X21+2432]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xC07000
	017 Move X0, [X0+2432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2967], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Compare X20, 0
	027 JumpIfEqual {59}
	028 Move X8, [X20]
	029 Move X0, X20
	030 Move X1, X19
	031 Move X9, [X8+312]
	032 Move X2, [X8+320]
	033 NotImplemented "Instruction BLR not yet implemented."
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {45}
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move W0, 1
	043 Move X30, [X31+48]
	044 Return X0
	045 Move X0, [X21]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move X0, X20
	051 Move X1, X19
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X22, [X31+16]
	055 Move X21, [X31+24]
	056 Move X30, [X31+48]
	057 Call BigInteger.op_GreaterThan, X0, X1
	058 Return X0
	059 Call 0x1C17F20

Method: System.Boolean op_LessThanOrEqual(Photon.SocketServer.Numeric.BigInteger bi1, Photon.SocketServer.Numeric.BigInteger bi2)

Disassembly:
	0x0352F004 LDR W12, [X12 + 0x20]
	0x0352F008 ADD X13, X13, X8, 0x2, LSL
	0x0352F00C ADD X8, X8, 0x1
	0x0352F010 CMP X10, X8
	0x0352F014 EOR W12, W12, W14, 0x0
	0x0352F018 STR W12, [X13 + 0x20]
	0x0352F01C B.NE 0x352EFC8
	0x0352F020 B 0x352F028
	0x0352F024 CBZ X19, 0x352F084
	0x0352F028 LDR X8, [X19 + 0x10]
	0x0352F02C MOVZ W9, 0x46
	0x0352F030 STR W9, [X19 + 0x18]
	0x0352F034 CBZ X8, 0x352F084
	0x0352F038 LDR W9, [X8 + 0x18]
	0x0352F03C MOVZ W10, 0x4D
	0x0352F040 SUB X11, X10, 0x8
	0x0352F044 CMP X11, X9
	0x0352F048 B.CS 0x352F080
	0x0352F04C LDR W11, [X8, X10, LSL #2]
	0x0352F050 CBNZ W11, 0x352F06C
	0x0352F054 SUB X12, X10, 0x7
	0x0352F058 SUB W11, W10, 0x8
	0x0352F05C SUB X10, X10, 0x1
	0x0352F060 CMP X12, 0x3
	0x0352F064 STR W11, [X19 + 0x18]
	0x0352F068 B.CS 0x352F040
	0x0352F06C MOV X0, X19
	0x0352F070 LDP X20, X19, [X31 + 0x20]
	0x0352F074 LDP X22, X21, [X31 + 0x10]
	0x0352F078 LDR X30, [X31], #0x30
	0x0352F07C RET
	0x0352F080 BL 0x1C16F28
	0x0352F084 BL 0x1C16F20
	0x0352F088 STR X30, [X31 - 0x30]!
	0x0352F08C STP X22, X21, [X31 + 0x10]
	0x0352F090 STP X20, X19, [X31 + 0x20]
	0x0352F094 ADRP X22, 0xEB0000
	0x0352F098 ADRP X21, 0xC05000
	0x0352F09C LDRB W8, [X22 + 0xBA0]
	0x0352F0A0 LDR X21, [X21 + 0x980]
	0x0352F0A4 MOV X19, X1
	0x0352F0A8 MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xEB1000
	007 Move X21, 0xC06000
	008 Move W8, [X22+2968]
	009 Move X21, [X21+2432]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xC06000
	017 Move X0, [X0+2432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2968], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Compare X20, 0
	027 JumpIfEqual {59}
	028 Move X8, [X20]
	029 Move X0, X20
	030 Move X1, X19
	031 Move X9, [X8+312]
	032 Move X2, [X8+320]
	033 NotImplemented "Instruction BLR not yet implemented."
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {45}
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move W0, 1
	043 Move X30, [X31+48]
	044 Return X0
	045 Move X0, [X21]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move X0, X20
	051 Move X1, X19
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X22, [X31+16]
	055 Move X21, [X31+24]
	056 Move X30, [X31+48]
	057 Call BigInteger.op_LessThan, X0, X1
	058 Return X0
	059 Call 0x1C17F20

Method: System.Void multiByteDivide(Photon.SocketServer.Numeric.BigInteger bi1, Photon.SocketServer.Numeric.BigInteger bi2, Photon.SocketServer.Numeric.BigInteger outQuotient, Photon.SocketServer.Numeric.BigInteger outRemainder)

Disassembly:
	0x0352F0AC TBNZ X8, 0x0, 0x352F0C4
	0x0352F0B0 ADRP X0, 0xC05000
	0x0352F0B4 LDR X0, [X0 + 0x980]
	0x0352F0B8 BL 0x1C16CF4
	0x0352F0BC MOVZ W8, 0x1
	0x0352F0C0 STRB W8, [X22 + 0xBA0]
	0x0352F0C4 LDR X0, [X21]
	0x0352F0C8 LDR W8, [X0 + 0xE0]
	0x0352F0CC CBNZ W8, 0x352F0D4
	0x0352F0D0 BL 0x1C16DFC
	0x0352F0D4 MOV X0, X20
	0x0352F0D8 MOV X1, X19
	0x0352F0DC BL 0x352DDC4
	0x0352F0E0 LDR X8, [X21]
	0x0352F0E4 MOV W21, W0
	0x0352F0E8 MOV X0, X8
	0x0352F0EC BL 0x1C16F10
	0x0352F0F0 ANDS W31, W21, 0x1
	0x0352F0F4 CSEL X1, X20, X19, NE
	0x0352F0F8 MOV X22, X0
	0x0352F0FC BL 0x352BE1C
	0x0352F100 MOV X0, X22
	0x0352F104 LDP X20, X19, [X31 + 0x20]
	0x0352F108 LDP X22, X21, [X31 + 0x10]
	0x0352F10C LDR X30, [X31], #0x30
	0x0352F110 RET
	0x0352F114 STR X30, [X31 - 0x30]!
	0x0352F118 STP X22, X21, [X31 + 0x10]
	0x0352F11C STP X20, X19, [X31 + 0x20]
	0x0352F120 ADRP X22, 0xEB0000
	0x0352F124 ADRP X21, 0xC05000
	0x0352F128 LDRB W8, [X22 + 0xBA1]
	0x0352F12C LDR X21, [X21 + 0x980]
	0x0352F130 MOV X19, X1
	0x0352F134 MOV X20, X0
	0x0352F138 TBNZ X8, 0x0, 0x352F150
	0x0352F13C ADRP X0, 0xC05000
	0x0352F140 LDR X0, [X0 + 0x980]
	0x0352F144 BL 0x1C16CF4
	0x0352F148 MOVZ W8, 0x1
	0x0352F14C STRB W8, [X22 + 0xBA1]
	0x0352F150 LDR X0, [X21]
	0x0352F154 LDR W8, [X0 + 0xE0]
	0x0352F158 CBNZ W8, 0x352F160
	0x0352F15C BL 0x1C16DFC
	0x0352F160 MOV X0, X20
	0x0352F164 MOV X1, X19
	0x0352F168 BL 0x352DE90
	0x0352F16C LDR X8, [X21]
	0x0352F170 MOV W21, W0
	0x0352F174 MOV X0, X8
	0x0352F178 BL 0x1C16F10
	0x0352F17C ANDS W31, W21, 0x1
	0x0352F180 CSEL X1, X20, X19, NE
	0x0352F184 MOV X22, X0
	0x0352F188 BL 0x352BE1C
	0x0352F18C MOV X0, X22
	0x0352F190 LDP X20, X19, [X31 + 0x20]
	0x0352F194 LDP X22, X21, [X31 + 0x10]
	0x0352F198 LDR X30, [X31], #0x30
	0x0352F19C RET
	0x0352F1A0 STR X30, [X31 - 0x20]!
	0x0352F1A4 STP X20, X19, [X31 + 0x10]
	0x0352F1A8 ADRP X20, 0xEB0000
	0x0352F1AC LDRB W8, [X20 + 0xBA2]
	0x0352F1B0 MOV X19, X0
	0x0352F1B4 TBNZ X8, 0x0, 0x352F1CC
	0x0352F1B8 ADRP X0, 0xC05000
	0x0352F1BC LDR X0, [X0 + 0x980]
	0x0352F1C0 BL 0x1C16CF4
	0x0352F1C4 MOVZ W8, 0x1
	0x0352F1C8 STRB W8, [X20 + 0xBA2]
	0x0352F1CC LDR X8, [X19 + 0x10]
	0x0352F1D0 CBZ X8, 0x352F230
	0x0352F1D4 LDR W9, [X8 + 0x18]
	0x0352F1D8 CMP W9, 0x45
	0x0352F1DC B.LS 0x352F234
	0x0352F1E0 ADRP X9, 0xC05000
	0x0352F1E4 LDR X9, [X9 + 0x980]
	0x0352F1E8 LDR W8, [X8 + 0x134]
	0x0352F1EC LDR X0, [X9]
	0x0352F1F0 TBNZ X8, 0x1F, 0x352F214
	0x0352F1F4 BL 0x1C16F10
	0x0352F1F8 MOV X1, X19
	0x0352F1FC MOV X20, X0
	0x0352F200 BL 0x352BE1C
	0x0352F204 MOV X0, X20
	0x0352F208 LDP X20, X19, [X31 + 0x10]
	0x0352F20C LDR X30, [X31], #0x20
	0x0352F210 RET
	0x0352F214 LDR W8, [X0 + 0xE0]
	0x0352F218 CBNZ W8, 0x352F220
	0x0352F21C BL 0x1C16DFC
	0x0352F220 MOV X0, X19
	0x0352F224 LDP X20, X19, [X31 + 0x10]
	0x0352F228 LDR X30, [X31], #0x20
	0x0352F22C B 0x352D5D0
	0x0352F230 BL 0x1C16F20
	0x0352F234 BL 0x1C16F28
	0x0352F238 MOVZ W1, 0xA
	0x0352F23C B 0x352F240
	0x0352F240 SUB X31, X31, 0x60
	0x0352F244 STP X30, X27, [X31 + 0x10]
	0x0352F248 STP X26, X25, [X31 + 0x20]
	0x0352F24C STP X24, X23, [X31 + 0x30]
	0x0352F250 STP X22, X21, [X31 + 0x40]
	0x0352F254 STP X20, X19, [X31 + 0x50]
	0x0352F258 ADRP X19, 0xEB0000
	0x0352F25C LDRB W8, [X19 + 0xBA3]
	0x0352F260 MOV W22, W1
	0x0352F264 MOV X21, X0
	0x0352F268 TBNZ X8, 0x0, 0x352F2BC
	0x0352F26C ADRP X0, 0xC05000
	0x0352F270 LDR X0, [X0 + 0x980]
	0x0352F274 BL 0x1C16CF4
	0x0352F278 ADRP X0, 0xBC6000
	0x0352F27C LDR X0, [X0 + 0x170]
	0x0352F280 BL 0x1C16CF4
	0x0352F284 ADRP X0, 0xBC5000
	0x0352F288 LDR X0, [X0 + 0x2A8]
	0x0352F28C BL 0x1C16CF4
	0x0352F290 ADRP X0, 0xC05000
	0x0352F294 LDR X0, [X0 + 0xA08]
	0x0352F298 BL 0x1C16CF4
	0x0352F29C ADRP X0, 0xBC4000
	0x0352F2A0 LDR X0, [X0 + 0x988]
	0x0352F2A4 BL 0x1C16CF4
	0x0352F2A8 ADRP X0, 0xBC6000
	0x0352F2AC LDR X0, [X0 + 0x4B0]
	0x0352F2B0 BL 0x1C16CF4
	0x0352F2B4 MOVZ W8, 0x1
	0x0352F2B8 STRB W8, [X19 + 0xBA3]
	0x0352F2BC SUB W8, W22, 0x2
	0x0352F2C0 CMP W8, 0x23
	0x0352F2C4 STRH W31, [X31 + 0xC]
	0x0352F2C8 B.CS 0x352F4BC
	0x0352F2CC CBZ X21, 0x352F4B4
	0x0352F2D0 LDR X8, [X21 + 0x10]
	0x0352F2D4 CBZ X8, 0x352F4B4
	0x0352F2D8 LDR W9, [X8 + 0x18]
	0x0352F2DC CMP W9, 0x45
	0x0352F2E0 B.LS 0x352F4B8
	0x0352F2E4 ADRP X9, 0xC05000
	0x0352F2E8 ADRP X10, 0xBC4000
	0x0352F2EC LDR X9, [X9 + 0xA08]
	0x0352F2F0 LDR X10, [X10 + 0x988]
	0x0352F2F4 ADRP X26, 0xC05000
	0x0352F2F8 LDR W8, [X8 + 0x134]
	0x0352F2FC LDR X20, [X9]
	0x0352F300 LDR X19, [X10]
	0x0352F304 LDR X26, [X26 + 0x980]
	0x0352F308 TBNZ X8, 0x1F, 0x352F314
	0x0352F30C MOV W27, W31
	0x0352F310 B 0x352F334
	0x0352F314 LDR X0, [X26]
	0x0352F318 LDR W8, [X0 + 0xE0]
	0x0352F31C CBNZ W8, 0x352F324
	0x0352F320 BL 0x1C16DFC
	0x0352F324 MOV X0, X21
	0x0352F328 BL 0x352D5D0
	0x0352F32C MOVZ W27, 0x1
	0x0352F330 MOV X21, X0
	0x0352F334 LDR X0, [X26]
	0x0352F338 BL 0x1C16F10
	0x0352F33C MOV X23, X0
	0x0352F340 BL 0x352BB04
	0x0352F344 LDR X0, [X26]
	0x0352F348 BL 0x1C16F10
	0x0352F34C MOV X24, X0
	0x0352F350 BL 0x352BB04
	0x0352F354 LDR X0, [X26]
	0x0352F358 BL 0x1C16F10
	0x0352F35C MOV W1, W22
	0x0352F360 MOV X25, X0
	0x0352F364 BL 0x352BB6C
	0x0352F368 CBZ X21, 0x352F4B4
	0x0352F36C LDR W8, [X21 + 0x18]
	0x0352F370 ADRP X22, 0xBC6000
	0x0352F374 LDR X22, [X22 + 0x170]
	0x0352F378 CMP W8, 0x1
	0x0352F37C B.NE 0x352F398
	0x0352F380 LDR X9, [X21 + 0x10]
	0x0352F384 CBZ X9, 0x352F4B4
	0x0352F388 LDR W10, [X9 + 0x18]
	0x0352F38C CBZ W10, 0x352F4B8
	0x0352F390 LDR W9, [X9 + 0x20]
	0x0352F394 CBZ W9, 0x352F488
	0x0352F398 CMP W8, 0x1
	0x0352F39C B.GT 0x352F3BC
	0x0352F3A0 B.NE 0x352F464
	0x0352F3A4 LDR X8, [X21 + 0x10]
	0x0352F3A8 CBZ X8, 0x352F4B4
	0x0352F3AC LDR W9, [X8 + 0x18]
	0x0352F3B0 CBZ W9, 0x352F4B8
	0x0352F3B4 LDR W8, [X8 + 0x20]
	0x0352F3B8 CBZ W8, 0x352F464
	0x0352F3BC LDR X0, [X26]
	0x0352F3C0 LDR W8, [X0 + 0xE0]
	0x0352F3C4 CBNZ W8, 0x352F3CC
	0x0352F3C8 BL 0x1C16DFC
	0x0352F3CC MOV X0, X21
	0x0352F3D0 MOV X1, X25
	0x0352F3D4 MOV X2, X23
	0x0352F3D8 MOV X3, X24
	0x0352F3DC BL 0x352E680
	0x0352F3E0 CBZ X24, 0x352F4B4
	0x0352F3E4 LDR X0, [X24 + 0x10]
	0x0352F3E8 CBZ X0, 0x352F4B4
	0x0352F3EC LDR W8, [X0 + 0x18]
	0x0352F3F0 CBZ W8, 0x352F4B8
	0x0352F3F4 LDR W8, [X0 + 0x20]!
	0x0352F3F8 CMP W8, 0x9
	0x0352F3FC B.HI 0x352F40C
	0x0352F400 MOV X1, X31
	0x0352F404 BL 0x3399B00
	0x0352F408 B 0x352F444
	0x0352F40C CBZ X20, 0x352F4B4
	0x0352F410 SUB W1, W8, 0xA
	0x0352F414 MOV X0, X20
	0x0352F418 MOV X2, X31
	0x0352F41C BL 0x3222A1C
	0x0352F420 LDR X8, [X22]
	0x0352F424 STRH W0, [X31 + 0xC]
	0x0352F428 LDR W9, [X8 + 0xE0]
	0x0352F42C CBNZ W9, 0x352F438
	0x0352F430 MOV X0, X8
	0x0352F434 BL 0x1C16DFC
	0x0352F438 ADD X0, X31, 0xC
	0x0352F43C MOV X1, X31
	0x0352F440 BL 0x330A76C
	0x0352F444 MOV X1, X19
	0x0352F448 MOV X2, X31
	0x0352F44C BL 0x321B938
	0x0352F450 CBZ X23, 0x352F4B4
	0x0352F454 LDR W8, [X23 + 0x18]
	0x0352F458 MOV X19, X0
	0x0352F45C MOV X21, X23
	0x0352F460 B 0x352F398
	0x0352F464 CBZ W27, 0x352F494
	0x0352F468 ADRP X8, 0xBC5000
	0x0352F46C LDR X8, [X8 + 0x2A8]
	0x0352F470 MOV X1, X19
	0x0352F474 MOV X2, X31
	0x0352F478 LDR X0, [X8]
	0x0352F47C BL 0x321B938
	0x0352F480 MOV X19, X0
	0x0352F484 B 0x352F494
	0x0352F488 ADRP X8, 0xBC6000
	0x0352F48C LDR X8, [X8 + 0x4B0]
	0x0352F490 LDR X19, [X8]
	0x0352F494 MOV X0, X19
	0x0352F498 LDP X20, X19, [X31 + 0x50]
	0x0352F49C LDP X22, X21, [X31 + 0x40]
	0x0352F4A0 LDP X24, X23, [X31 + 0x30]
	0x0352F4A4 LDP X26, X25, [X31 + 0x20]
	0x0352F4A8 LDP X30, X27, [X31 + 0x10]
	0x0352F4AC ADD X31, X31, 0x60
	0x0352F4B0 RET
	0x0352F4B4 BL 0x1C16F20
	0x0352F4B8 BL 0x1C16F28
	0x0352F4BC ADRP X0, 0xBCC000
	0x0352F4C0 LDR X0, [X0 + 0x578]
	0x0352F4C4 BL 0x1C16D08
	0x0352F4C8 BL 0x1C16F10
	0x0352F4CC MOV X19, X0
	0x0352F4D0 ADRP X0, 0xC05000
	0x0352F4D4 LDR X0, [X0 + 0xA10]
	0x0352F4D8 BL 0x1C16D08
	0x0352F4DC MOV X1, X0
	0x0352F4E0 MOV X0, X19
	0x0352F4E4 MOV X2, X31
	0x0352F4E8 BL 0x3314A68
	0x0352F4EC ADRP X0, 0xC05000
	0x0352F4F0 LDR X0, [X0 + 0xA18]
	0x0352F4F4 BL 0x1C16D08
	0x0352F4F8 MOV X1, X0
	0x0352F4FC MOV X0, X19
	0x0352F500 BL 0x1C16DEC
	0x0352F504 B 0x352F508
	0x0352F508 MOV X23, X0
	0x0352F50C CMP W1, 0x1
	0x0352F510 B.NE 0x352F570
	0x0352F514 MOV X0, X23
	0x0352F518 BL 0x3EB1AD0
	0x0352F51C MOV X23, X0
	0x0352F520 ADRP X0, 0xBC4000
	0x0352F524 LDR X0, [X0 + 0x7D0]
	0x0352F528 BL 0x1C16D08
	0x0352F52C LDR X8, [X23]
	0x0352F530 LDR X1, [X8]
	0x0352F534 BL 0x1C17270
	0x0352F538 TBZ X0, 0x0, 0x352F548
	0x0352F53C BL 0x3EB1AE0
	0x0352F540 MOVZ W27, 0x1
	0x0352F544 B 0x352F334
	0x0352F548 MOVZ W0, 0x8
	0x0352F54C BL 0x3EB1AF0
	0x0352F550 LDR X8, [X23]
	0x0352F554 STR X8, [X0]
	0x0352F558 ADRP X1, 0x985000
	0x0352F55C ADD X1, X1, 0xE58
	0x0352F560 MOV X2, X31
	0x0352F564 BL 0x3EB1B00
	0x0352F568 MOV X23, X0
	0x0352F56C BL 0x3EB1AE0
	0x0352F570 MOV X0, X23
	0x0352F574 BL 0x1D2C690
	0x0352F578 BL 0x1990590
	0x0352F57C STP X30, X23, [X31 - 0x30]!
	0x0352F580 STP X22, X21, [X31 + 0x10]
	0x0352F584 STP X20, X19, [X31 + 0x20]
	0x0352F588 ADRP X20, 0xEB0000
	0x0352F58C LDRB W8, [X20 + 0xBA4]
	0x0352F590 MOV X19, X0
	0x0352F594 TBNZ X8, 0x0, 0x352F5B8
	0x0352F598 ADRP X0, 0xBF6000
	0x0352F59C LDR X0, [X0 + 0x630]
	0x0352F5A0 BL 0x1C16CF4
	0x0352F5A4 ADRP X0, 0xBEB000
	0x0352F5A8 LDR X0, [X0 + 0x908]
	0x0352F5AC BL 0x1C16CF4
	0x0352F5B0 MOVZ W8, 0x1
	0x0352F5B4 STRB W8, [X20 + 0xBA4]
	0x0352F5B8 LDR X8, [X19 + 0x10]
	0x0352F5BC CBZ X8, 0x352F670
	0x0352F5C0 LDR W9, [X19 + 0x18]
	0x0352F5C4 LDR W10, [X8 + 0x18]
	0x0352F5C8 SUB W9, W9, 0x1
	0x0352F5CC CMP W9, W10
	0x0352F5D0 B.CS 0x352F674
	0x0352F5D4 ADRP X10, 0xBEB000
	0x0352F5D8 LDR X10, [X10 + 0x908]
	0x0352F5DC ADD X8, X8, W9, 0x2, SXTW
	0x0352F5E0 ADD X0, X8, 0x20
	0x0352F5E4 MOV X2, X31
	0x0352F5E8 LDR X1, [X10]
	0x0352F5EC BL 0x3399C34
	0x0352F5F0 LDR W8, [X19 + 0x18]
	0x0352F5F4 MOV X20, X0
	0x0352F5F8 SUBS W8, W8, 0x2
	0x0352F5FC B.MI 0x352F65C
	0x0352F600 ADRP X21, 0xBF6000
	0x0352F604 LDR X21, [X21 + 0x630]
	0x0352F608 MOV W22, W8
	0x0352F60C UBFM X8, X22, 0x3E, 0x3D
	0x0352F610 ADD X23, X8, 0x20
	0x0352F614 LDR X8, [X19 + 0x10]
	0x0352F618 CBZ X8, 0x352F670
	0x0352F61C LDR W9, [X8 + 0x18]
	0x0352F620 CMP X22, X9
	0x0352F624 B.CS 0x352F674
	0x0352F628 LDR X1, [X21]
	0x0352F62C ADD X0, X8, X23
	0x0352F630 MOV X2, X31
	0x0352F634 BL 0x3399C34
	0x0352F638 MOV X1, X0
	0x0352F63C MOV X0, X20
	0x0352F640 MOV X2, X31
	0x0352F644 BL 0x321B938
	0x0352F648 MOV X20, X0
	0x0352F64C CMP X22, 0x0
	0x0352F650 SUB X22, X22, 0x1
	0x0352F654 SUB X23, X23, 0x4
	0x0352F658 B.GT 0x352F614
	0x0352F65C MOV X0, X20
	0x0352F660 LDP X20, X19, [X31 + 0x20]
	0x0352F664 LDP X22, X21, [X31 + 0x10]
	0x0352F668 LDP X30, X23, [X31], #0x30
	0x0352F66C RET
	0x0352F670 BL 0x1C16F20
	0x0352F674 BL 0x1C16F28
	0x0352F678 SUB X31, X31, 0x70
	0x0352F67C STP X29, X30, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+80], X29
	003 Move [X31+88], X30
	004 Move [X31+96], X28
	005 Move [X31+104], X27
	006 Move [X31+112], X26
	007 Move [X31+120], X25
	008 Move [X31+128], X24
	009 Move [X31+136], X23
	010 Move [X31+144], X22
	011 Move [X31+152], X21
	012 Move [X31+160], X20
	013 Move [X31+168], X19
	014 Move X19, 0xEB1000
	015 Move X22, 0xBEE000
	016 Move W8, [X19+2969]
	017 Move X22, [X22+3336]
	018 Move X23, X3
	019 Move X25, X2
	020 Move X24, X1
	021 Move X26, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {34}
	026 Move X0, 0xC06000
	027 Move X0, [X0+2432]
	028 Call 0x1C17CF4
	029 Move X0, 0xBEE000
	030 Move X0, [X0+3336]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X19+2969], W8
	034 Move X0, [X22]
	035 Move W1, 70
	036 Call 0x1C17D6C
	037 Compare X26, 0
	038 JumpIfEqual {390}
	039 Move W19, [X26+24]
	040 Move X28, X0
	041 Move X0, [X22]
	042 Add W27, W19, 1
	043 Move W1, W27
	044 Call 0x1C17D6C
	045 Compare X24, 0
	046 JumpIfEqual {390}
	047 Move X8, [X24+16]
	048 Compare X8, 0
	049 JumpIfEqual {390}
	050 Move W9, [X24+24]
	051 Move W10, [X8+24]
	052 Subtract W9, W9, 1
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Add X8, X8, W9
	055 Move W8, [X8+32]
	056 Move X21, X0
	057 Move TEMP, X8
	058 And TEMP, TEMP, -2147483648
	059 Compare TEMP, -2147483648
	060 JumpIfEqual {73}
	061 Move W1, W31
	062 Move W9, 0x80000000
	063 Move W10, W9
	064 ShiftRight W10, 1
	065 And W10, W10, 0x7FFFFFFF
	066 Add W1, W1, 1
	067 Compare W10, 0
	068 JumpIfEqual {74}
	069 And W11, W8, W9
	070 Move W9, W10
	071 Compare W11, 0
	072 JumpIfEqual {63}
	073 Move W1, W31
	074 Move W8, [X26+24]
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move X10, [X26+16]
	077 Compare X10, 0
	078 JumpIfEqual {390}
	079 Move W9, [X10+24]
	080 Move X8, X31
	081 Add X10, X10, 32
	082 Add X11, X21, 32
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Compare X21, 0
	085 JumpIfEqual {390}
	086 Move W12, [X21+24]
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move W12, [X10]
	089 Move [X11], W12
	090 NotImplemented "Instruction LDRSW not yet implemented."
	091 Add X8, X8, 1
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move X20, 0xC06000
	094 Move X20, [X20+2432]
	095 Move X0, [X20]
	096 Move W8, [X0+224]
	097 Compare W8, 0
	098 JumpIfNotEqual {102}
	099 Move W26, W1
	100 Call 0x1C17DFC
	101 Move W1, W26
	102 Move X0, X21
	103 Move W26, W1
	104 Call BigInteger.shiftLeft, X0, X1
	105 Move X0, X24
	106 Move W1, W26
	107 Move [X31+28], W26
	108 Call BigInteger.op_LeftShift, X0, X1
	109 Compare X0, 0
	110 JumpIfEqual {390}
	111 Move X8, [X0+16]
	112 Move X24, X0
	113 Compare X8, 0
	114 JumpIfEqual {390}
	115 Move W9, [X24+24]
	116 Move W12, [X8+24]
	117 Subtract W10, W9, 1
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Subtract W11, W9, 2
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move [X31+32], X25
	122 Add X10, X8, W10
	123 Add X8, X8, W11
	124 Move X0, [X22]
	125 Move W25, [X10+32]
	126 Move W29, [X8+32]
	127 Add W1, W9, 1
	128 Subtract W22, W27, W9
	129 Move [X31+64], W1
	130 Call 0x1C17D6C
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move [X31+16], X23
	133 Compare X21, 0
	134 JumpIfEqual {390}
	135 Move W14, [X31+64]
	136 Move X26, X0
	137 Move X15, X31
	138 Move [X31+8], X22
	139 Move W8, W22
	140 Move W22, W14
	141 Add X23, X0, 32
	142 Move X16, 1
	143 Move [X31+40], X8
	144 Move [X31+48], X29
	145 Move [X31+56], X28
	146 Move W8, [X21+24]
	147 NotImplemented "Instruction CMP not yet implemented."
	148 Subtract W17, W19, 1
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Add X11, X21, 32
	151 Move W10, [X11]
	152 Move W12, [X11]
	153 Subtract W9, W19, 2
	154 Add X11, X11, W9
	155 NotImplemented "Instruction BFM not yet implemented."
	156 NotImplemented "Instruction UDIV not yet implemented."
	157 NotImplemented "Instruction MSUB not yet implemented."
	158 NotImplemented "Instruction CMP not yet implemented."
	159 NotImplemented "Instruction CMP not yet implemented."
	160 Move W12, [X11]
	161 Multiply X13, X27, X29
	162 NotImplemented "Instruction BFM not yet implemented."
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Add X10, X10, X25
	165 Move X12, X10
	166 ShiftRight X12, 32
	167 And X12, X12, 0x7FFFFFFF
	168 Subtract X27, X27, 1
	169 Compare X12, 0
	170 JumpIfEqual {158}
	171 NotImplemented "Instruction CMP not yet implemented."
	172 Move X9, X31
	173 Move W10, W19
	174 NotImplemented "Instruction CMP not yet implemented."
	175 Compare X26, 0
	176 JumpIfEqual {390}
	177 Move W11, [X26+24]
	178 NotImplemented "Instruction CMP not yet implemented."
	179 Add X11, X21, W10
	180 Move W11, [X11+32]
	181 Subtract W10, W10, 1
	182 Move [X23], W11
	183 Add X9, X9, 1
	184 NotImplemented "Instruction CMP not yet implemented."
	185 Move X0, [X20]
	186 Move [X31+68], W17
	187 Move [X31+72], X15
	188 Call 0x1C17F10
	189 Move X1, X26
	190 Move X28, X0
	191 Call BigInteger..ctor, X0, X1
	192 Move X0, [X20]
	193 Move W8, [X0+224]
	194 Compare W8, 0
	195 JumpIfNotEqual {197}
	196 Call 0x1C17DFC
	197 Move X0, X27
	198 Call BigInteger.op_Implicit, X0
	199 Move X1, X0
	200 Move X0, X24
	201 Call BigInteger.op_Multiply, X0, X1
	202 Move X29, X0
	203 Move X0, [X20]
	204 Move W8, [X0+224]
	205 Compare W8, 0
	206 JumpIfNotEqual {208}
	207 Call 0x1C17DFC
	208 Move X0, X29
	209 Move X1, X28
	210 Call BigInteger.op_GreaterThan, X0, X1
	211 Move TEMP, X0
	212 And TEMP, TEMP, 1
	213 Compare TEMP, 1
	214 JumpIfNotEqual {225}
	215 Move X0, [X20]
	216 Move W8, [X0+224]
	217 Compare W8, 0
	218 JumpIfNotEqual {220}
	219 Call 0x1C17DFC
	220 Move X0, X29
	221 Move X1, X24
	222 Call BigInteger.op_Subtraction, X0, X1
	223 Move X29, X0
	224 Subtract W27, W27, 1
	225 Move X0, [X20]
	226 Move W8, [X0+224]
	227 Compare W8, 0
	228 JumpIfNotEqual {230}
	229 Call 0x1C17DFC
	230 Move X0, X28
	231 Move X1, X29
	232 Call BigInteger.op_Subtraction, X0, X1
	233 Move W14, [X31+64]
	234 Move X29, [X31+48]
	235 Move X28, [X31+56]
	236 NotImplemented "Instruction CMP not yet implemented."
	237 Compare X0, 0
	238 JumpIfEqual {390}
	239 Move X9, [X0+16]
	240 Move W8, W31
	241 Move X10, X22
	242 Compare X9, 0
	243 JumpIfEqual {390}
	244 Move W11, [X24+24]
	245 Move W12, [X9+24]
	246 Add W11, W8, W11
	247 NotImplemented "Instruction CMP not yet implemented."
	248 Move W13, [X21+24]
	249 Add W12, W19, W8
	250 NotImplemented "Instruction CMP not yet implemented."
	251 Add X11, X9, W11
	252 Move W11, [X11+32]
	253 Add X12, X21, W12
	254 Subtract X10, X10, 1
	255 Subtract W8, W8, 1
	256 Move [X12+32], W11
	257 Compare X28, 0
	258 JumpIfEqual {390}
	259 Move W8, [X28+24]
	260 Move X9, [X31+72]
	261 Move W19, [X31+68]
	262 Move X16, 1
	263 NotImplemented "Instruction CMP not yet implemented."
	264 Move X10, [X31+40]
	265 Add X8, X28, X9
	266 Add X9, X9, 1
	267 Move X15, X9
	268 NotImplemented "Instruction CMP not yet implemented."
	269 Move [X8+32], W27
	270 Move X17, [X31+8]
	271 Move X23, [X31+16]
	272 Move W17, W31
	273 Move X16, [X31+32]
	274 Compare X16, 0
	275 JumpIfEqual {390}
	276 NotImplemented "Instruction CMP not yet implemented."
	277 Move [X16+24], W17
	278 Compare X28, 0
	279 JumpIfEqual {390}
	280 Move X9, [X16+16]
	281 Move W10, [X28+24]
	282 Move X8, X31
	283 Move W11, W17
	284 Add X12, X9, 32
	285 Move TEMP, 0
	286 Not TEMP
	287 Move W13, TEMP
	288 Add X14, X11, X13
	289 NotImplemented "Instruction CMP not yet implemented."
	290 Compare X9, 0
	291 JumpIfEqual {390}
	292 Move W15, [X9+24]
	293 NotImplemented "Instruction CMP not yet implemented."
	294 Add X14, X28, W14
	295 Move W14, [X14+32]
	296 Subtract X13, X13, 1
	297 Move [X12], W14
	298 Add X8, X8, 1
	299 NotImplemented "Instruction CMP not yet implemented."
	300 NotImplemented "Instruction CMP not yet implemented."
	301 Move W17, W31
	302 Move X10, [X16+16]
	303 Compare X10, 0
	304 JumpIfEqual {390}
	305 Move W8, [X10+24]
	306 Move X9, W17
	307 Add X10, X10, 32
	308 NotImplemented "Instruction CMP not yet implemented."
	309 Move [X10], W31
	310 Add X9, X9, 1
	311 NotImplemented "Instruction CMP not yet implemented."
	312 Move W8, [X16+24]
	313 NotImplemented "Instruction CMP not yet implemented."
	314 Move X10, [X16+16]
	315 Compare X10, 0
	316 JumpIfEqual {390}
	317 Move W9, [X10+24]
	318 Add X10, X10, 28
	319 Subtract X11, X8, 1
	320 NotImplemented "Instruction CMP not yet implemented."
	321 Move W12, [X10]
	322 Compare W12, 0
	323 JumpIfNotEqual {334}
	324 Subtract W8, W8, 1
	325 Add X12, X11, 1
	326 NotImplemented "Instruction CMP not yet implemented."
	327 Move [X16+24], W8
	328 Move X8, X11
	329 Move W8, W11
	330 Compare W8, 0
	331 JumpIfNotEqual {334}
	332 Move W8, 1
	333 Move [X16+24], W8
	334 Move X0, [X20]
	335 Move W8, [X0+224]
	336 Compare W8, 0
	337 JumpIfNotEqual {339}
	338 Call 0x1C17DFC
	339 Move W1, [X31+28]
	340 Move X0, X21
	341 Call BigInteger.shiftRight, X0, X1
	342 Compare X23, 0
	343 JumpIfEqual {390}
	344 NotImplemented "Instruction CMP not yet implemented."
	345 Move [X23+24], W0
	346 Compare X21, 0
	347 JumpIfEqual {390}
	348 Move X9, [X23+16]
	349 Move W10, [X21+24]
	350 Move X8, X31
	351 Add X12, X21, 32
	352 Add X11, X9, 32
	353 NotImplemented "Instruction CMP not yet implemented."
	354 Compare X9, 0
	355 JumpIfEqual {390}
	356 Move W13, [X9+24]
	357 NotImplemented "Instruction CMP not yet implemented."
	358 Move W13, [X12]
	359 Move [X11], W13
	360 NotImplemented "Instruction LDRSW not yet implemented."
	361 Add X8, X8, 1
	362 NotImplemented "Instruction CMP not yet implemented."
	363 NotImplemented "Instruction CMP not yet implemented."
	364 Move X8, X31
	365 Move X10, [X23+16]
	366 Compare X10, 0
	367 JumpIfEqual {390}
	368 Move W9, [X10+24]
	369 And X8, X8, 0
	370 Add X10, X10, 32
	371 NotImplemented "Instruction CMP not yet implemented."
	372 Move [X10], W31
	373 Add X8, X8, 1
	374 NotImplemented "Instruction CMP not yet implemented."
	375 Move X20, [X31+160]
	376 Move X19, [X31+168]
	377 Move X22, [X31+144]
	378 Move X21, [X31+152]
	379 Move X24, [X31+128]
	380 Move X23, [X31+136]
	381 Move X26, [X31+112]
	382 Move X25, [X31+120]
	383 Move X28, [X31+96]
	384 Move X27, [X31+104]
	385 Move X29, [X31+80]
	386 Move X30, [X31+88]
	387 Add X31, X31, 176
	388 Return 
	389 Call 0x1C17F28
	390 Call 0x1C17F20

Method: System.Void singleByteDivide(Photon.SocketServer.Numeric.BigInteger bi1, Photon.SocketServer.Numeric.BigInteger bi2, Photon.SocketServer.Numeric.BigInteger outQuotient, Photon.SocketServer.Numeric.BigInteger outRemainder)

Disassembly:
	0x0352F680 STP X28, X27, [X31 + 0x20]
	0x0352F684 STP X26, X25, [X31 + 0x30]
	0x0352F688 STP X24, X23, [X31 + 0x40]
	0x0352F68C STP X22, X21, [X31 + 0x50]
	0x0352F690 STP X20, X19, [X31 + 0x60]
	0x0352F694 ADRP X20, 0xEB0000
	0x0352F698 LDRB W8, [X20 + 0xBA5]
	0x0352F69C MOV X21, X2
	0x0352F6A0 MOV X19, X1
	0x0352F6A4 MOV X22, X0
	0x0352F6A8 TBNZ X8, 0x0, 0x352F6C0
	0x0352F6AC ADRP X0, 0xC05000
	0x0352F6B0 LDR X0, [X0 + 0x980]
	0x0352F6B4 BL 0x1C16CF4
	0x0352F6B8 MOVZ W8, 0x1
	0x0352F6BC STRB W8, [X20 + 0xBA5]
	0x0352F6C0 CBZ X19, 0x352F980
	0x0352F6C4 LDR X8, [X19 + 0x10]
	0x0352F6C8 CBZ X8, 0x352F980
	0x0352F6CC LDR W9, [X8 + 0x18]
	0x0352F6D0 CMP W9, 0x45
	0x0352F6D4 B.LS 0x352F984
	0x0352F6D8 LDR W8, [X8 + 0x134]
	0x0352F6DC TBNZ X8, 0x1F, 0x352F988
	0x0352F6E0 ADRP X25, 0xC05000
	0x0352F6E4 LDR X25, [X25 + 0x980]
	0x0352F6E8 LDR X0, [X25]
	0x0352F6EC LDR W8, [X0 + 0xE0]
	0x0352F6F0 CBNZ W8, 0x352F6F8
	0x0352F6F4 BL 0x1C16DFC
	0x0352F6F8 MOVZ W0, 0x1
	0x0352F6FC BL 0x352C1F8
	0x0352F700 LDR X8, [X22 + 0x10]
	0x0352F704 CBZ X8, 0x352F980
	0x0352F708 LDR W9, [X8 + 0x18]
	0x0352F70C CMP W9, 0x45
	0x0352F710 B.LS 0x352F984
	0x0352F714 MOV X20, X0
	0x0352F718 LDR X0, [X25]
	0x0352F71C LDR W24, [X8 + 0x134]
	0x0352F720 LDR W9, [X0 + 0xE0]
	0x0352F724 CBNZ W9, 0x352F72C
	0x0352F728 BL 0x1C16DFC
	0x0352F72C MOV X0, X22
	0x0352F730 TBZ X24, 0x1F, 0x352F738
	0x0352F734 BL 0x352D5D0
	0x0352F738 MOV X1, X21
	0x0352F73C BL 0x352EB38
	0x0352F740 MOV X22, X0
	0x0352F744 CBZ X21, 0x352F980
	0x0352F748 LDR X8, [X21 + 0x10]
	0x0352F74C CBZ X8, 0x352F980
	0x0352F750 LDR W9, [X8 + 0x18]
	0x0352F754 CMP W9, 0x45
	0x0352F758 B.LS 0x352F984
	0x0352F75C LDR W8, [X8 + 0x134]
	0x0352F760 TBZ X8, 0x1F, 0x352F780
	0x0352F764 LDR X0, [X25]
	0x0352F768 LDR W8, [X0 + 0xE0]
	0x0352F76C CBNZ W8, 0x352F774
	0x0352F770 BL 0x1C16DFC
	0x0352F774 MOV X0, X21
	0x0352F778 BL 0x352D5D0
	0x0352F77C MOV X21, X0
	0x0352F780 LDR X0, [X25]
	0x0352F784 BL 0x1C16F10
	0x0352F788 MOV X23, X0
	0x0352F78C BL 0x352BB04
	0x0352F790 CBZ X21, 0x352F980
	0x0352F794 CBZ X23, 0x352F980
	0x0352F798 LDR X8, [X23 + 0x10]
	0x0352F79C CBZ X8, 0x352F980
	0x0352F7A0 LDR W9, [X21 + 0x18]
	0x0352F7A4 LDR W10, [X8 + 0x18]
	0x0352F7A8 UBFM W9, W9, 0x1F, 0x1E
	0x0352F7AC CMP W9, W10
	0x0352F7B0 B.CS 0x352F984
	0x0352F7B4 ADD X8, X8, W9, 0x2, SXTW
	0x0352F7B8 MOVZ W10, 0x1
	0x0352F7BC ORR W9, W9, 0x1
	0x0352F7C0 STR W10, [X8 + 0x20]
	0x0352F7C4 STR W9, [X23 + 0x18]
	0x0352F7C8 LDR X0, [X25]
	0x0352F7CC LDR W8, [X0 + 0xE0]
	0x0352F7D0 CBNZ W8, 0x352F7D8
	0x0352F7D4 BL 0x1C16DFC
	0x0352F7D8 MOV X0, X23
	0x0352F7DC MOV X1, X21
	0x0352F7E0 STR W24, [X31 + 0x8]
	0x0352F7E4 BL 0x352E988
	0x0352F7E8 MOV X23, X0
	0x0352F7EC MOV X0, X19
	0x0352F7F0 BL 0x352F9D0
	0x0352F7F4 LDR W8, [X19 + 0x18]
	0x0352F7F8 CMP W8, 0x1
	0x0352F7FC B.LT 0x352F908
	0x0352F800 SUB W8, W0, 0x1
	0x0352F804 MOV X27, X31
	0x0352F808 MOV W29, W31
	0x0352F80C STR W0, [X31 + 0x4]
	0x0352F810 STR W8, [X31 + 0xC]
	0x0352F814 LDR W8, [X31 + 0xC]
	0x0352F818 MOV W26, W31
	0x0352F81C MOVZ W28, 0x1
	0x0352F820 SUB W24, W8, W29
	0x0352F824 ADD W29, W29, 0x20
	0x0352F828 LDR X8, [X19 + 0x10]
	0x0352F82C CBZ X8, 0x352F980
	0x0352F830 LDR W9, [X8 + 0x18]
	0x0352F834 CMP X27, X9
	0x0352F838 B.CS 0x352F984
	0x0352F83C ADD X8, X8, X27, 0x2, LSL
	0x0352F840 LDR W8, [X8 + 0x20]
	0x0352F844 ANDS W31, W8, W28, 0x0
	0x0352F848 B.EQ 0x352F87C
	0x0352F84C LDR X0, [X25]
	0x0352F850 LDR W8, [X0 + 0xE0]
	0x0352F854 CBNZ W8, 0x352F85C
	0x0352F858 BL 0x1C16DFC
	0x0352F85C MOV X0, X20
	0x0352F860 MOV X1, X22
	0x0352F864 BL 0x352C250
	0x0352F868 MOV X1, X0
	0x0352F86C MOV X2, X21
	0x0352F870 MOV X3, X23
	0x0352F874 BL 0x352FA7C
	0x0352F878 MOV X20, X0
	0x0352F87C LDR X0, [X25]
	0x0352F880 LDR W8, [X0 + 0xE0]
	0x0352F884 CBNZ W8, 0x352F88C
	0x0352F888 BL 0x1C16DFC
	0x0352F88C MOV X0, X22
	0x0352F890 MOV X1, X22
	0x0352F894 BL 0x352C250
	0x0352F898 MOV X1, X0
	0x0352F89C MOV X2, X21
	0x0352F8A0 MOV X3, X23
	0x0352F8A4 BL 0x352FA7C
	0x0352F8A8 CBZ X0, 0x352F980
	0x0352F8AC LDR W8, [X0 + 0x18]
	0x0352F8B0 MOV X22, X0
	0x0352F8B4 CMP W8, 0x1
	0x0352F8B8 B.NE 0x352F8D8
	0x0352F8BC LDR X8, [X22 + 0x10]
	0x0352F8C0 CBZ X8, 0x352F980
	0x0352F8C4 LDR W9, [X8 + 0x18]
	0x0352F8C8 CBZ W9, 0x352F984
	0x0352F8CC LDR W8, [X8 + 0x20]
	0x0352F8D0 CMP W8, 0x1
	0x0352F8D4 B.EQ 0x352F908
	0x0352F8D8 CMP W24, W26
	0x0352F8DC B.EQ 0x352F8F4
	0x0352F8E0 ADD W26, W26, 0x1
	0x0352F8E4 CMP W26, 0x20
	0x0352F8E8 UBFM W28, W28, 0x1F, 0x1E
	0x0352F8EC B.NE 0x352F828
	0x0352F8F0 B 0x352F8F8
	0x0352F8F4 LDR W29, [X31 + 0x4]
	0x0352F8F8 LDRSW X8, [X19 + 0x18]
	0x0352F8FC ADD X27, X27, 0x1
	0x0352F900 CMP X27, X8
	0x0352F904 B.LT 0x352F814
	0x0352F908 LDR W8, [X31 + 0x8]
	0x0352F90C TBZ X8, 0x1F, 0x352F928
	0x0352F910 LDR X8, [X19 + 0x10]
	0x0352F914 CBZ X8, 0x352F980
	0x0352F918 LDR W9, [X8 + 0x18]
	0x0352F91C CBZ W9, 0x352F984
	0x0352F920 LDRB W8, [X8 + 0x20]
	0x0352F924 TBNZ X8, 0x0, 0x352F94C
	0x0352F928 MOV X0, X20
	0x0352F92C LDP X20, X19, [X31 + 0x60]
	0x0352F930 LDP X22, X21, [X31 + 0x50]
	0x0352F934 LDP X24, X23, [X31 + 0x40]
	0x0352F938 LDP X26, X25, [X31 + 0x30]
	0x0352F93C LDP X28, X27, [X31 + 0x20]
	0x0352F940 LDP X29, X30, [X31 + 0x10]
	0x0352F944 ADD X31, X31, 0x70
	0x0352F948 RET
	0x0352F94C LDR X0, [X25]
	0x0352F950 LDR W8, [X0 + 0xE0]
	0x0352F954 CBNZ W8, 0x352F95C
	0x0352F958 BL 0x1C16DFC
	0x0352F95C MOV X0, X20
	0x0352F960 LDP X20, X19, [X31 + 0x60]
	0x0352F964 LDP X22, X21, [X31 + 0x50]
	0x0352F968 LDP X24, X23, [X31 + 0x40]
	0x0352F96C LDP X26, X25, [X31 + 0x30]
	0x0352F970 LDP X28, X27, [X31 + 0x20]
	0x0352F974 LDP X29, X30, [X31 + 0x10]
	0x0352F978 ADD X31, X31, 0x70
	0x0352F97C B 0x352D5D0
	0x0352F980 BL 0x1C16F20
	0x0352F984 BL 0x1C16F28

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xEB1000
	009 Move X24, 0xBEE000
	010 Move W8, [X23+2970]
	011 Move X24, [X24+3336]
	012 Move X19, X3
	013 Move X20, X2
	014 Move X21, X1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xBEE000
	021 Move X0, [X0+3336]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+2970], W8
	025 Move X0, [X24]
	026 Move W1, 70
	027 Call 0x1C17D6C
	028 Compare X19, 0
	029 JumpIfEqual {197}
	030 Compare X22, 0
	031 JumpIfEqual {197}
	032 Move X9, [X19+16]
	033 Move X11, [X22+16]
	034 Move X10, X31
	035 Add X12, X9, 32
	036 Add X13, X11, 32
	037 Compare X11, 0
	038 JumpIfEqual {197}
	039 Move W8, [X11+24]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Compare X9, 0
	042 JumpIfEqual {197}
	043 Move W8, [X9+24]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move W14, [X13]
	046 Move [X12], W14
	047 Add X10, X10, 1
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move W13, [X22+24]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move [X19+24], W13
	052 Add X10, X9, 28
	053 Subtract X11, X13, 1
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move W12, [X10]
	056 Compare W12, 0
	057 JumpIfNotEqual {64}
	058 Subtract W12, W13, 1
	059 Add X13, X11, 1
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X13, X11
	062 Move [X19+24], W12
	063 Move W13, 1
	064 Compare X21, 0
	065 JumpIfEqual {197}
	066 Move X10, [X21+16]
	067 Compare X10, 0
	068 JumpIfEqual {197}
	069 Move W11, [X10+24]
	070 Compare W11, 0
	071 JumpIfEqual {196}
	072 Subtract W11, W13, 1
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move W12, [X10+32]
	075 Add X10, X9, W11
	076 Add X10, X10, 32
	077 Move W14, [X10]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move W10, W31
	080 Compare X0, 0
	081 JumpIfEqual {197}
	082 Move W15, [X0+24]
	083 Compare W15, 0
	084 JumpIfEqual {196}
	085 NotImplemented "Instruction UDIV not yet implemented."
	086 NotImplemented "Instruction MSUB not yet implemented."
	087 Move [X0+32], W15
	088 Move [X10], W14
	089 Move W10, 1
	090 Subtract W14, W13, 2
	091 Move W14, W14
	092 Add W13, W13, W10
	093 Move X16, 1
	094 Add X15, X9, 32
	095 Subtract W13, W13, 1
	096 Add X16, X16, X14
	097 Move X17, INVALID
	098 Add X1, X14, 1
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Add X1, X9, X16
	101 Add X1, X1, 32
	102 Move W2, [X1]
	103 Compare X0, 0
	104 JumpIfEqual {197}
	105 Move W3, [X0+24]
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Move W3, [X15]
	108 Add X4, X0, W10
	109 Add W10, W10, 1
	110 Subtract W11, W11, 1
	111 NotImplemented "Instruction BFM not yet implemented."
	112 NotImplemented "Instruction UDIV not yet implemented."
	113 Move [X4+32], W2
	114 Move [X1], W31
	115 NotImplemented "Instruction MSUB not yet implemented."
	116 Move [X15], W1
	117 Subtract X14, X14, 1
	118 Add X16, X16, X17
	119 Move W10, W13
	120 Compare X20, 0
	121 JumpIfEqual {197}
	122 Subtract W11, W10, 1
	123 Move [X20+24], W10
	124 Compare X0, 0
	125 JumpIfEqual {197}
	126 Move X12, [X20+16]
	127 Move W13, [X0+24]
	128 Move W14, W31
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Compare X12, 0
	131 JumpIfEqual {197}
	132 Move W15, [X12+24]
	133 NotImplemented "Instruction CMP not yet implemented."
	134 Add X15, X0, W11
	135 Move W15, [X15+32]
	136 Subtract W11, W11, 1
	137 Add X16, X12, W14
	138 Add W31, W11, 1
	139 Add W14, W14, 1
	140 Move [X16+32], W15
	141 NotImplemented "Instruction CMP not yet implemented."
	142 Move W10, W31
	143 Move X12, [X20+16]
	144 Compare X12, 0
	145 JumpIfEqual {197}
	146 Move W11, [X12+24]
	147 Add X12, X12, W10
	148 Add X12, X12, 32
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Add W10, W10, 1
	151 NotImplemented "Instruction CMP not yet implemented."
	152 Move [X12+4], W31
	153 Move W10, [X20+24]
	154 NotImplemented "Instruction CMP not yet implemented."
	155 Move X12, [X20+16]
	156 Compare X12, 0
	157 JumpIfEqual {197}
	158 Move W11, [X12+24]
	159 Add X12, X12, 28
	160 Subtract X13, X10, 1
	161 NotImplemented "Instruction CMP not yet implemented."
	162 Move W14, [X12]
	163 Compare W14, 0
	164 JumpIfNotEqual {175}
	165 Subtract W10, W10, 1
	166 Add X14, X13, 1
	167 NotImplemented "Instruction CMP not yet implemented."
	168 Move [X20+24], W10
	169 Move X10, X13
	170 Move W10, W13
	171 Compare W10, 0
	172 JumpIfNotEqual {175}
	173 Move W10, 1
	174 Move [X20+24], W10
	175 Move W10, [X19+24]
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Add X9, X9, 28
	178 Subtract X11, X10, 1
	179 NotImplemented "Instruction CMP not yet implemented."
	180 Move W12, [X9]
	181 Compare W12, 0
	182 JumpIfNotEqual {188}
	183 Subtract W10, W10, 1
	184 Add X12, X11, 1
	185 NotImplemented "Instruction CMP not yet implemented."
	186 Move [X19+24], W10
	187 Move X10, X11
	188 Move X20, [X31+48]
	189 Move X19, [X31+56]
	190 Move X22, [X31+32]
	191 Move X21, [X31+40]
	192 Move X24, [X31+16]
	193 Move X23, [X31+24]
	194 Move X30, [X31+64]
	195 Return 
	196 Call 0x1C17F28
	197 Call 0x1C17F20

Method: Photon.SocketServer.Numeric.BigInteger op_Division(Photon.SocketServer.Numeric.BigInteger bi1, Photon.SocketServer.Numeric.BigInteger bi2)

Disassembly:
	0x0352F988 ADRP X0, 0xBF2000
	0x0352F98C LDR X0, [X0 + 0x560]
	0x0352F990 BL 0x1C16D08
	0x0352F994 BL 0x1C16F10
	0x0352F998 MOV X19, X0
	0x0352F99C ADRP X0, 0xC05000
	0x0352F9A0 LDR X0, [X0 + 0xA20]
	0x0352F9A4 BL 0x1C16D08
	0x0352F9A8 MOV X1, X0
	0x0352F9AC MOV X0, X19
	0x0352F9B0 MOV X2, X31
	0x0352F9B4 BL 0x3316338
	0x0352F9B8 ADRP X0, 0xC05000
	0x0352F9BC LDR X0, [X0 + 0xA28]
	0x0352F9C0 BL 0x1C16D08
	0x0352F9C4 MOV X1, X0
	0x0352F9C8 MOV X0, X19
	0x0352F9CC BL 0x1C16DEC
	0x0352F9D0 STR X30, [X31 - 0x10]!
	0x0352F9D4 LDR W9, [X0 + 0x18]
	0x0352F9D8 LDR X8, [X0 + 0x10]
	0x0352F9DC CMP W9, 0x2
	0x0352F9E0 B.GE 0x352F9EC
	0x0352F9E4 CBNZ X8, 0x352FA28
	0x0352F9E8 B 0x352FA78
	0x0352F9EC CBZ X8, 0x352FA78
	0x0352F9F0 LDR W10, [X8 + 0x18]
	0x0352F9F4 ADD X11, X8, 0x1C
	0x0352F9F8 SUB X12, X9, 0x1
	0x0352F9FC CMP X12, X10
	0x0352FA00 B.CS 0x352FA74
	0x0352FA04 LDR W13, [X11, X9, LSL #2]
	0x0352FA08 CBNZ W13, 0x352FA28
	0x0352FA0C SUB W9, W9, 0x1
	0x0352FA10 ADD X13, X12, 0x1
	0x0352FA14 CMP X13, 0x3
	0x0352FA18 STR W9, [X0 + 0x18]
	0x0352FA1C MOV X9, X12
	0x0352FA20 B.GE 0x352F9F8
	0x0352FA24 MOVZ W9, 0x1
	0x0352FA28 LDR W10, [X8 + 0x18]
	0x0352FA2C SUB W9, W9, 0x1
	0x0352FA30 CMP W9, W10
	0x0352FA34 B.CS 0x352FA74
	0x0352FA38 ADD X8, X8, W9, 0x2, SXTW
	0x0352FA3C LDR W10, [X8 + 0x20]
	0x0352FA40 TBNZ X10, 0x1F, 0x352FA64
	0x0352FA44 MOVZ W8, 0x20
	0x0352FA48 MOVZ W11, 0x80000000
	0x0352FA4C SUBS W8, W8, 0x1
	0x0352FA50 B.EQ 0x352FA68
	0x0352FA54 AND W12, W10, W11, 0x1
	0x0352FA58 UBFM W11, W11, 0x1, 0x1F
	0x0352FA5C CBZ W12, 0x352FA4C
	0x0352FA60 B 0x352FA68
	0x0352FA64 MOVZ W8, 0x20
	0x0352FA68 ADD W0, W8, W9, 0x5, LSL
	0x0352FA6C LDR X30, [X31], #0x10
	0x0352FA70 RET
	0x0352FA74 BL 0x1C16F28
	0x0352FA78 BL 0x1C16F20
	0x0352FA7C STP X30, X25, [X31 - 0x40]!
	0x0352FA80 STP X24, X23, [X31 + 0x10]
	0x0352FA84 STP X22, X21, [X31 + 0x20]
	0x0352FA88 STP X20, X19, [X31 + 0x30]
	0x0352FA8C ADRP X21, 0xEB0000
	0x0352FA90 LDRB W8, [X21 + 0xBA6]
	0x0352FA94 MOV X20, X3
	0x0352FA98 MOV X19, X2
	0x0352FA9C MOV X22, X1
	0x0352FAA0 TBNZ X8, 0x0, 0x352FAB8
	0x0352FAA4 ADRP X0, 0xC05000
	0x0352FAA8 LDR X0, [X0 + 0x980]
	0x0352FAAC BL 0x1C16CF4
	0x0352FAB0 MOVZ W8, 0x1
	0x0352FAB4 STRB W8, [X21 + 0xBA6]
	0x0352FAB8 CBZ X19, 0x352FEC8
	0x0352FABC ADRP X23, 0xC05000
	0x0352FAC0 LDR X23, [X23 + 0x980]
	0x0352FAC4 LDR W24, [X19 + 0x18]
	0x0352FAC8 LDR X0, [X23]
	0x0352FACC BL 0x1C16F10
	0x0352FAD0 MOV X21, X0
	0x0352FAD4 BL 0x352BB04
	0x0352FAD8 CBZ X22, 0x352FEC8
	0x0352FADC LDR W12, [X22 + 0x18]
	0x0352FAE0 SUB W8, W24, 0x1
	0x0352FAE4 CMP W8, W12
	0x0352FAE8 B.GE 0x352FB50
	0x0352FAEC SBFM X11, X8, 0x3E, 0x1F
	0x0352FAF0 MOV X9, X31
	0x0352FAF4 MOV W10, W8
	0x0352FAF8 ADD X11, X11, 0x20
	0x0352FAFC CBZ X21, 0x352FEC8
	0x0352FB00 LDR X12, [X22 + 0x10]
	0x0352FB04 CBZ X12, 0x352FEC8
	0x0352FB08 LDR W13, [X12 + 0x18]
	0x0352FB0C ADD X14, X10, X9
	0x0352FB10 CMP W14, W13
	0x0352FB14 B.CS 0x352FECC
	0x0352FB18 LDR X13, [X21 + 0x10]
	0x0352FB1C CBZ X13, 0x352FEC8
	0x0352FB20 LDR W14, [X13 + 0x18]
	0x0352FB24 CMP W9, W14
	0x0352FB28 B.CS 0x352FECC
	0x0352FB2C ADD X12, X12, X11
	0x0352FB30 LDR W12, [X12, X9, LSL #2]
	0x0352FB34 ADD X13, X13, W9, 0x2, SXTW

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X19, 0xEB1000
	011 Move X23, 0xC06000
	012 Move W8, [X19+2971]
	013 Move X23, [X23+2432]
	014 Move X20, X1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xC06000
	021 Move X0, [X0+2432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X19+2971], W8
	025 Move X0, [X23]
	026 Call 0x1C17F10
	027 Move X19, X0
	028 Call BigInteger..ctor, X0
	029 Move X0, [X23]
	030 Call 0x1C17F10
	031 Move X22, X0
	032 Call BigInteger..ctor, X0
	033 Compare X21, 0
	034 JumpIfEqual {136}
	035 Move X8, [X21+16]
	036 Compare X8, 0
	037 JumpIfEqual {136}
	038 Move W9, [X8+24]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move W8, [X8+308]
	041 Move TEMP, X8
	042 And TEMP, TEMP, -2147483648
	043 Compare TEMP, -2147483648
	044 JumpIfEqual {48}
	045 Move W24, W31
	046 Compare X20, 0
	047 JumpIfNotEqual {59}
	048 Move X0, [X23]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Move X0, X21
	054 Call BigInteger.op_UnaryNegation, X0
	055 Move X21, X0
	056 Move W24, 1
	057 Compare X20, 0
	058 JumpIfEqual {136}
	059 Move X8, [X20+16]
	060 Compare X8, 0
	061 JumpIfEqual {136}
	062 Move W9, [X8+24]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move W8, [X8+308]
	065 Move TEMP, X8
	066 And TEMP, TEMP, -2147483648
	067 Compare TEMP, -2147483648
	068 JumpIfEqual {70}
	069 Move W25, W31
	070 Move X0, [X23]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Move X0, X20
	076 Call BigInteger.op_UnaryNegation, X0
	077 Move X20, X0
	078 Move W25, 1
	079 Move X0, [X23]
	080 Move W8, [X0+224]
	081 Compare W8, 0
	082 JumpIfNotEqual {84}
	083 Call 0x1C17DFC
	084 Move X0, X21
	085 Move X1, X20
	086 Call BigInteger.op_LessThan, X0, X1
	087 Move TEMP, X0
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfEqual {125}
	091 Compare X20, 0
	092 JumpIfEqual {136}
	093 Move X0, [X23]
	094 Move W26, [X20+24]
	095 Move W8, [X0+224]
	096 Compare W8, 0
	097 JumpIfNotEqual {99}
	098 Call 0x1C17DFC
	099 Move X0, X21
	100 Move X1, X20
	101 Move X2, X19
	102 Move X3, X22
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Call BigInteger.singleByteDivide, X0, X1, X2, X3
	105 Call BigInteger.multiByteDivide, X0, X1, X2, X3
	106 Xor W8, W25, W24
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move X0, [X23]
	109 Move W8, [X0+224]
	110 Compare W8, 0
	111 JumpIfNotEqual {113}
	112 Call 0x1C17DFC
	113 Move X0, X19
	114 Move X20, [X31+64]
	115 Move X19, [X31+72]
	116 Move X22, [X31+48]
	117 Move X21, [X31+56]
	118 Move X24, [X31+32]
	119 Move X23, [X31+40]
	120 Move X26, [X31+16]
	121 Move X25, [X31+24]
	122 Move X30, [X31+80]
	123 Call BigInteger.op_UnaryNegation, X0
	124 Return X0
	125 Move X0, X19
	126 Move X20, [X31+64]
	127 Move X19, [X31+72]
	128 Move X22, [X31+48]
	129 Move X21, [X31+56]
	130 Move X24, [X31+32]
	131 Move X23, [X31+40]
	132 Move X26, [X31+16]
	133 Move X25, [X31+24]
	134 Move X30, [X31+80]
	135 Return X0
	136 Call 0x1C17F20
	137 Call 0x1C17F28

Method: Photon.SocketServer.Numeric.BigInteger op_Modulus(Photon.SocketServer.Numeric.BigInteger bi1, Photon.SocketServer.Numeric.BigInteger bi2)

Disassembly:
	0x0352FB38 ADD X9, X9, 0x1
	0x0352FB3C STR W12, [X13 + 0x20]
	0x0352FB40 LDR W12, [X22 + 0x18]
	0x0352FB44 ADD W13, W10, W9
	0x0352FB48 CMP W13, W12
	0x0352FB4C B.LT 0x352FAFC
	0x0352FB50 CBZ X21, 0x352FEC8
	0x0352FB54 SUB W8, W12, W8
	0x0352FB58 CMP W8, 0x1
	0x0352FB5C CSINC W8, W8, W31, GT
	0x0352FB60 STR W8, [X21 + 0x18]
	0x0352FB64 LDR X0, [X23]
	0x0352FB68 LDR W8, [X0 + 0xE0]
	0x0352FB6C CBNZ W8, 0x352FB74
	0x0352FB70 BL 0x1C16DFC
	0x0352FB74 MOV X0, X21
	0x0352FB78 MOV X1, X20
	0x0352FB7C BL 0x352C250
	0x0352FB80 LDR X8, [X23]
	0x0352FB84 MOV X21, X0
	0x0352FB88 MOV X0, X8
	0x0352FB8C BL 0x1C16F10
	0x0352FB90 MOV X20, X0
	0x0352FB94 BL 0x352BB04
	0x0352FB98 CBZ X21, 0x352FEC8
	0x0352FB9C LDR W11, [X21 + 0x18]
	0x0352FBA0 ADD W25, W24, 0x1
	0x0352FBA4 CMP W25, W11
	0x0352FBA8 B.GE 0x352FC10
	0x0352FBAC SBFM X10, X25, 0x3E, 0x1F
	0x0352FBB0 MOV X8, X31
	0x0352FBB4 MOV W9, W25
	0x0352FBB8 ADD X10, X10, 0x20
	0x0352FBBC CBZ X20, 0x352FEC8
	0x0352FBC0 LDR X11, [X21 + 0x10]
	0x0352FBC4 CBZ X11, 0x352FEC8
	0x0352FBC8 LDR W12, [X11 + 0x18]
	0x0352FBCC ADD X13, X9, X8
	0x0352FBD0 CMP W13, W12
	0x0352FBD4 B.CS 0x352FECC
	0x0352FBD8 LDR X12, [X20 + 0x10]
	0x0352FBDC CBZ X12, 0x352FEC8
	0x0352FBE0 LDR W13, [X12 + 0x18]
	0x0352FBE4 CMP W8, W13
	0x0352FBE8 B.CS 0x352FECC
	0x0352FBEC ADD X11, X11, X10
	0x0352FBF0 LDR W11, [X11, X8, LSL #2]
	0x0352FBF4 ADD X12, X12, W8, 0x2, SXTW
	0x0352FBF8 ADD X8, X8, 0x1
	0x0352FBFC STR W11, [X12 + 0x20]
	0x0352FC00 LDR W11, [X21 + 0x18]
	0x0352FC04 ADD W12, W9, W8
	0x0352FC08 CMP W12, W11
	0x0352FC0C B.LT 0x352FBBC
	0x0352FC10 CBZ X20, 0x352FEC8
	0x0352FC14 SUB W8, W11, W25
	0x0352FC18 CMP W8, 0x1
	0x0352FC1C CSINC W8, W8, W31, GT
	0x0352FC20 STR W8, [X20 + 0x18]
	0x0352FC24 LDR X0, [X23]
	0x0352FC28 BL 0x1C16F10
	0x0352FC2C MOV X21, X0
	0x0352FC30 BL 0x352BB04
	0x0352FC34 LDR W8, [X22 + 0x18]
	0x0352FC38 CMP W8, W25
	0x0352FC3C CSEL W8, W25, W8, GT
	0x0352FC40 CBZ X21, 0x352FEC8
	0x0352FC44 CMP W8, 0x1
	0x0352FC48 B.LT 0x352FC98
	0x0352FC4C LDR X10, [X21 + 0x10]
	0x0352FC50 LDR X11, [X22 + 0x10]
	0x0352FC54 MOV X9, X31
	0x0352FC58 SXTW X12, W8
	0x0352FC5C ADD X13, X10, 0x20
	0x0352FC60 ADD X14, X11, 0x20
	0x0352FC64 CBZ X11, 0x352FEC8
	0x0352FC68 LDR W15, [X11 + 0x18]
	0x0352FC6C CMP X9, X15
	0x0352FC70 B.CS 0x352FECC
	0x0352FC74 CBZ X10, 0x352FEC8
	0x0352FC78 LDR W15, [X10 + 0x18]
	0x0352FC7C CMP X9, X15
	0x0352FC80 B.CS 0x352FECC
	0x0352FC84 LDR W15, [X14, X9, LSL #2]
	0x0352FC88 STR W15, [X13, X9, LSL #2]
	0x0352FC8C ADD X9, X9, 0x1
	0x0352FC90 CMP X12, X9
	0x0352FC94 B.NE 0x352FC64
	0x0352FC98 STR W8, [X21 + 0x18]
	0x0352FC9C LDR X0, [X23]
	0x0352FCA0 BL 0x1C16F10
	0x0352FCA4 MOV X22, X0
	0x0352FCA8 BL 0x352BB04
	0x0352FCAC LDR W8, [X20 + 0x18]
	0x0352FCB0 CMP W8, 0x1
	0x0352FCB4 B.LT 0x352FDD8
	0x0352FCB8 LDR X8, [X20 + 0x10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0xEB1000
	010 Move X23, 0xC06000
	011 Move W8, [X20+2972]
	012 Move X23, [X23+2432]
	013 Move X19, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xC06000
	020 Move X0, [X0+2432]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+2972], W8
	024 Move X0, [X23]
	025 Call 0x1C17F10
	026 Move X22, X0
	027 Call BigInteger..ctor, X0
	028 Move X0, [X23]
	029 Call 0x1C17F10
	030 Move X1, X21
	031 Move X20, X0
	032 Call BigInteger..ctor, X0, X1
	033 Compare X21, 0
	034 JumpIfEqual {134}
	035 Move X8, [X21+16]
	036 Compare X8, 0
	037 JumpIfEqual {134}
	038 Move W9, [X8+24]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move W24, [X8+308]
	041 Move TEMP, X24
	042 And TEMP, TEMP, -2147483648
	043 Compare TEMP, -2147483648
	044 JumpIfNotEqual {53}
	045 Move X0, [X23]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move X0, X21
	051 Call BigInteger.op_UnaryNegation, X0
	052 Move X21, X0
	053 Compare X19, 0
	054 JumpIfEqual {134}
	055 Move X8, [X19+16]
	056 Compare X8, 0
	057 JumpIfEqual {134}
	058 Move W9, [X8+24]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move W8, [X8+308]
	061 Move TEMP, X8
	062 And TEMP, TEMP, -2147483648
	063 Compare TEMP, -2147483648
	064 JumpIfNotEqual {73}
	065 Move X0, [X23]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move X0, X19
	071 Call BigInteger.op_UnaryNegation, X0
	072 Move X19, X0
	073 Move X0, [X23]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {78}
	077 Call 0x1C17DFC
	078 Move X0, X21
	079 Move X1, X19
	080 Call BigInteger.op_LessThan, X0, X1
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfEqual {103}
	085 Compare X19, 0
	086 JumpIfEqual {134}
	087 Move X0, [X23]
	088 Move W25, [X19+24]
	089 Move W8, [X0+224]
	090 Compare W8, 0
	091 JumpIfNotEqual {93}
	092 Call 0x1C17DFC
	093 Move X0, X21
	094 Move X1, X19
	095 Move X2, X22
	096 Move X3, X20
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Call BigInteger.singleByteDivide, X0, X1, X2, X3
	099 Move TEMP, X24
	100 And TEMP, TEMP, -2147483648
	101 Compare TEMP, -2147483648
	102 JumpIfEqual {118}
	103 Move X0, X20
	104 Move X20, [X31+48]
	105 Move X19, [X31+56]
	106 Move X22, [X31+32]
	107 Move X21, [X31+40]
	108 Move X24, [X31+16]
	109 Move X23, [X31+24]
	110 Move X30, [X31+64]
	111 Move X25, [X31+72]
	112 Return X0
	113 Call BigInteger.multiByteDivide, X0, X1, X2, X3
	114 Move TEMP, X24
	115 And TEMP, TEMP, -2147483648
	116 Compare TEMP, -2147483648
	117 JumpIfNotEqual {103}
	118 Move X0, [X23]
	119 Move W8, [X0+224]
	120 Compare W8, 0
	121 JumpIfNotEqual {123}
	122 Call 0x1C17DFC
	123 Move X0, X20
	124 Move X20, [X31+48]
	125 Move X19, [X31+56]
	126 Move X22, [X31+32]
	127 Move X21, [X31+40]
	128 Move X24, [X31+16]
	129 Move X23, [X31+24]
	130 Move X30, [X31+64]
	131 Move X25, [X31+72]
	132 Call BigInteger.op_UnaryNegation, X0
	133 Return X0
	134 Call 0x1C17F20
	135 Call 0x1C17F28

Method: Photon.SocketServer.Numeric.BigInteger op_BitwiseAnd(Photon.SocketServer.Numeric.BigInteger bi1, Photon.SocketServer.Numeric.BigInteger bi2)

Disassembly:
	0x0352FCBC CBZ X8, 0x352FEC8
	0x0352FCC0 LDR W10, [X8 + 0x18]
	0x0352FCC4 MOV W11, W25
	0x0352FCC8 MOV X9, X31
	0x0352FCCC SXTW X11, W11
	0x0352FCD0 MOVZ W12, 0x20
	0x0352FCD4 CMP X9, X10
	0x0352FCD8 B.CS 0x352FECC
	0x0352FCDC ADD X14, X8, X9, 0x2, LSL
	0x0352FCE0 LDR W16, [X14 + 0x20]!
	0x0352FCE4 CBZ W16, 0x352FDC4
	0x0352FCE8 CMP X9, X11
	0x0352FCEC B.GE 0x352FD84
	0x0352FCF0 LDR W13, [X19 + 0x18]
	0x0352FCF4 CMP W13, 0x1
	0x0352FCF8 B.LT 0x352FD84
	0x0352FCFC LDR X0, [X19 + 0x10]
	0x0352FD00 CBZ X0, 0x352FEC8
	0x0352FD04 LDR W15, [X0 + 0x18]
	0x0352FD08 CBZ X15, 0x352FECC
	0x0352FD0C MOV X13, X31
	0x0352FD10 MOV X17, X31
	0x0352FD14 ADD X0, X0, 0x20
	0x0352FD18 CBZ X22, 0x352FEC8
	0x0352FD1C LDR X1, [X22 + 0x10]
	0x0352FD20 CBZ X1, 0x352FEC8
	0x0352FD24 LDR W2, [X1 + 0x18]
	0x0352FD28 ADD X3, X9, X17
	0x0352FD2C CMP X3, X2
	0x0352FD30 B.CS 0x352FECC
	0x0352FD34 LDR W2, [X0, X17, LSL #2]
	0x0352FD38 ADD X1, X1, X12
	0x0352FD3C LDR W4, [X1, X17, LSL #2]
	0x0352FD40 MOV W3, W16
	0x0352FD44 ADD X16, X9, X17
	0x0352FD48 MADD X13, X2, X3, X13
	0x0352FD4C ADD X16, X16, 0x1
	0x0352FD50 ADD X13, X13, X4
	0x0352FD54 CMP X16, X11
	0x0352FD58 STR W13, [X1, X17, LSL #2]
	0x0352FD5C UBFM X13, X13, 0x20, 0x3F
	0x0352FD60 B.GE 0x352FD9C
	0x0352FD64 LDRSW X1, [X19 + 0x18]
	0x0352FD68 ADD X17, X17, 0x1
	0x0352FD6C CMP X17, X1
	0x0352FD70 B.GE 0x352FD9C
	0x0352FD74 LDR W16, [X14]
	0x0352FD78 CMP X17, X15
	0x0352FD7C B.CC 0x352FD18
	0x0352FD80 B 0x352FECC
	0x0352FD84 CMP X9, X11
	0x0352FD88 B.GE 0x352FDC4
	0x0352FD8C CBZ X22, 0x352FEC8
	0x0352FD90 MOV X13, X31
	0x0352FD94 MOV X16, X9
	0x0352FD98 B 0x352FDA4
	0x0352FD9C CMP X16, X11
	0x0352FDA0 B.GE 0x352FDC4
	0x0352FDA4 LDR X14, [X22 + 0x10]
	0x0352FDA8 CBZ X14, 0x352FEC8
	0x0352FDAC LDR W15, [X14 + 0x18]
	0x0352FDB0 CMP W16, W15
	0x0352FDB4 B.CS 0x352FECC
	0x0352FDB8 UBFM X15, X16, 0x20, 0x1F
	0x0352FDBC ADD X14, X14, X15, 0x1E, ASR
	0x0352FDC0 STR W13, [X14 + 0x20]
	0x0352FDC4 LDRSW X13, [X20 + 0x18]
	0x0352FDC8 ADD X9, X9, 0x1
	0x0352FDCC ADD X12, X12, 0x4
	0x0352FDD0 CMP X9, X13
	0x0352FDD4 B.LT 0x352FCD4
	0x0352FDD8 CBZ X22, 0x352FEC8
	0x0352FDDC CMP W25, 0x2
	0x0352FDE0 STR W25, [X22 + 0x18]
	0x0352FDE4 B.LT 0x352FE2C
	0x0352FDE8 LDR X9, [X22 + 0x10]
	0x0352FDEC CBZ X9, 0x352FEC8
	0x0352FDF0 LDR W8, [X9 + 0x18]
	0x0352FDF4 MOV W11, W25
	0x0352FDF8 ADD X9, X9, 0x1C
	0x0352FDFC MOV W10, W24

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xEB1000
	007 Move X22, 0xC06000
	008 Move W8, [X19+2973]
	009 Move X22, [X22+2432]
	010 Move X20, X1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xC06000
	017 Move X0, [X0+2432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X19+2973], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X19, X0
	024 Call BigInteger..ctor, X0
	025 Compare X21, 0
	026 JumpIfEqual {89}
	027 Compare X20, 0
	028 JumpIfEqual {89}
	029 Move W8, [X21+24]
	030 Move W9, [X20+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 NotImplemented "Instruction CSEL not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X11, [X21+16]
	035 Compare X11, 0
	036 JumpIfEqual {89}
	037 Move W9, [X11+24]
	038 Move X8, X31
	039 Move W10, W10
	040 Add X11, X11, 32
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X12, [X20+16]
	043 Compare X12, 0
	044 JumpIfEqual {89}
	045 Move W13, [X12+24]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Compare X19, 0
	048 JumpIfEqual {89}
	049 Move X13, [X19+16]
	050 Compare X13, 0
	051 JumpIfEqual {89}
	052 Move W14, [X13+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Add X12, X12, X8
	055 Move W14, [X11]
	056 Move W12, [X12+32]
	057 Add X13, X13, X8
	058 Add X8, X8, 1
	059 NotImplemented "Instruction CMP not yet implemented."
	060 And W12, W12, W14
	061 Move [X13+32], W12
	062 Compare X19, 0
	063 JumpIfEqual {89}
	064 Move X8, [X19+16]
	065 Move W9, 70
	066 Move [X19+24], W9
	067 Compare X8, 0
	068 JumpIfEqual {89}
	069 Move W9, [X8+24]
	070 Move W10, 77
	071 Subtract X11, X10, 8
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move W11, [X8]
	074 Compare W11, 0
	075 JumpIfNotEqual {81}
	076 Subtract X12, X10, 7
	077 Subtract W11, W10, 8
	078 Subtract X10, X10, 1
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move [X19+24], W11
	081 Move X0, X19
	082 Move X20, [X31+32]
	083 Move X19, [X31+40]
	084 Move X22, [X31+16]
	085 Move X21, [X31+24]
	086 Move X30, [X31+48]
	087 Return X0
	088 Call 0x1C17F28
	089 Call 0x1C17F20

Method: Photon.SocketServer.Numeric.BigInteger op_BitwiseOr(Photon.SocketServer.Numeric.BigInteger bi1, Photon.SocketServer.Numeric.BigInteger bi2)

Disassembly:
	0x0352FE00 SUB X12, X11, 0x1
	0x0352FE04 CMP X12, X8
	0x0352FE08 B.CS 0x352FECC
	0x0352FE0C LDR W11, [X9, X11, LSL #2]
	0x0352FE10 CBNZ W11, 0x352FE2C
	0x0352FE14 ADD X11, X12, 0x1
	0x0352FE18 STR W10, [X22 + 0x18]
	0x0352FE1C CMP X11, 0x3
	0x0352FE20 SUB W10, W10, 0x1
	0x0352FE24 MOV X11, X12
	0x0352FE28 B.GE 0x352FE00
	0x0352FE2C LDR X0, [X23]
	0x0352FE30 LDR W8, [X0 + 0xE0]
	0x0352FE34 CBNZ W8, 0x352FE3C
	0x0352FE38 BL 0x1C16DFC
	0x0352FE3C MOV X0, X21
	0x0352FE40 MOV X1, X22
	0x0352FE44 BL 0x352D228
	0x0352FE48 CBZ X0, 0x352FEC8
	0x0352FE4C LDR X8, [X0 + 0x10]
	0x0352FE50 MOV X20, X0
	0x0352FE54 CBZ X8, 0x352FEC8
	0x0352FE58 LDR W9, [X8 + 0x18]
	0x0352FE5C CMP W9, 0x45
	0x0352FE60 B.LS 0x352FECC
	0x0352FE64 LDR W8, [X8 + 0x134]
	0x0352FE68 TBZ X8, 0x1F, 0x352FEF0
	0x0352FE6C LDR X0, [X23]
	0x0352FE70 BL 0x1C16F10
	0x0352FE74 MOV X21, X0
	0x0352FE78 BL 0x352BB04
	0x0352FE7C CBZ X21, 0x352FEC8
	0x0352FE80 LDR X8, [X21 + 0x10]
	0x0352FE84 CBZ X8, 0x352FEC8
	0x0352FE88 LDR W9, [X8 + 0x18]
	0x0352FE8C CMP W25, W9
	0x0352FE90 B.CS 0x352FECC
	0x0352FE94 ADD X8, X8, W25, 0x2, SXTW
	0x0352FE98 MOVZ W9, 0x1
	0x0352FE9C ADD W10, W24, 0x2
	0x0352FEA0 STR W9, [X8 + 0x20]
	0x0352FEA4 STR W10, [X21 + 0x18]
	0x0352FEA8 LDR X0, [X23]
	0x0352FEAC LDR W8, [X0 + 0xE0]
	0x0352FEB0 CBNZ W8, 0x352FEB8
	0x0352FEB4 BL 0x1C16DFC
	0x0352FEB8 MOV X0, X20
	0x0352FEBC MOV X1, X21
	0x0352FEC0 BL 0x352C728
	0x0352FEC4 B 0x352FEEC
	0x0352FEC8 BL 0x1C16F20
	0x0352FECC BL 0x1C16F28
	0x0352FED0 LDR X0, [X23]
	0x0352FED4 LDR W8, [X0 + 0xE0]
	0x0352FED8 CBNZ W8, 0x352FEE0
	0x0352FEDC BL 0x1C16DFC
	0x0352FEE0 MOV X0, X20
	0x0352FEE4 MOV X1, X19
	0x0352FEE8 BL 0x352D228
	0x0352FEEC MOV X20, X0
	0x0352FEF0 LDR X0, [X23]
	0x0352FEF4 LDR W8, [X0 + 0xE0]
	0x0352FEF8 CBNZ W8, 0x352FF00
	0x0352FEFC BL 0x1C16DFC
	0x0352FF00 MOV X0, X20
	0x0352FF04 MOV X1, X19
	0x0352FF08 BL 0x352DF5C
	0x0352FF0C TBNZ X0, 0x0, 0x352FED0
	0x0352FF10 MOV X0, X20
	0x0352FF14 LDP X20, X19, [X31 + 0x30]
	0x0352FF18 LDP X22, X21, [X31 + 0x20]
	0x0352FF1C LDP X24, X23, [X31 + 0x10]
	0x0352FF20 LDP X30, X25, [X31], #0x40
	0x0352FF24 RET
	0x0352FF28 STR X30, [X31 - 0x30]!
	0x0352FF2C STP X22, X21, [X31 + 0x10]
	0x0352FF30 STP X20, X19, [X31 + 0x20]
	0x0352FF34 ADRP X21, 0xEB0000
	0x0352FF38 LDRB W8, [X21 + 0xBA7]
	0x0352FF3C MOV X19, X1
	0x0352FF40 MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xEB1000
	007 Move X22, 0xC06000
	008 Move W8, [X19+2974]
	009 Move X22, [X22+2432]
	010 Move X20, X1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xC06000
	017 Move X0, [X0+2432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X19+2974], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X19, X0
	024 Call BigInteger..ctor, X0
	025 Compare X21, 0
	026 JumpIfEqual {89}
	027 Compare X20, 0
	028 JumpIfEqual {89}
	029 Move W8, [X21+24]
	030 Move W9, [X20+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 NotImplemented "Instruction CSEL not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X11, [X21+16]
	035 Compare X11, 0
	036 JumpIfEqual {89}
	037 Move W9, [X11+24]
	038 Move X8, X31
	039 Move W10, W10
	040 Add X11, X11, 32
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X12, [X20+16]
	043 Compare X12, 0
	044 JumpIfEqual {89}
	045 Move W13, [X12+24]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Compare X19, 0
	048 JumpIfEqual {89}
	049 Move X13, [X19+16]
	050 Compare X13, 0
	051 JumpIfEqual {89}
	052 Move W14, [X13+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Add X12, X12, X8
	055 Move W14, [X11]
	056 Move W12, [X12+32]
	057 Add X13, X13, X8
	058 Add X8, X8, 1
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Or W12, W12, W14
	061 Move [X13+32], W12
	062 Compare X19, 0
	063 JumpIfEqual {89}
	064 Move X8, [X19+16]
	065 Move W9, 70
	066 Move [X19+24], W9
	067 Compare X8, 0
	068 JumpIfEqual {89}
	069 Move W9, [X8+24]
	070 Move W10, 77
	071 Subtract X11, X10, 8
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move W11, [X8]
	074 Compare W11, 0
	075 JumpIfNotEqual {81}
	076 Subtract X12, X10, 7
	077 Subtract W11, W10, 8
	078 Subtract X10, X10, 1
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move [X19+24], W11
	081 Move X0, X19
	082 Move X20, [X31+32]
	083 Move X19, [X31+40]
	084 Move X22, [X31+16]
	085 Move X21, [X31+24]
	086 Move X30, [X31+48]
	087 Return X0
	088 Call 0x1C17F28
	089 Call 0x1C17F20

Method: Photon.SocketServer.Numeric.BigInteger op_ExclusiveOr(Photon.SocketServer.Numeric.BigInteger bi1, Photon.SocketServer.Numeric.BigInteger bi2)

Disassembly:
	0x0352FF44 TBNZ X8, 0x0, 0x352FF5C
	0x0352FF48 ADRP X0, 0xC05000
	0x0352FF4C LDR X0, [X0 + 0x980]
	0x0352FF50 BL 0x1C16CF4
	0x0352FF54 MOVZ W8, 0x1
	0x0352FF58 STRB W8, [X21 + 0xBA7]
	0x0352FF5C LDR X8, [X20 + 0x10]
	0x0352FF60 CBZ X8, 0x3530040
	0x0352FF64 LDR W9, [X8 + 0x18]
	0x0352FF68 CMP W9, 0x45
	0x0352FF6C B.LS 0x3530058
	0x0352FF70 LDR W8, [X8 + 0x134]
	0x0352FF74 TBZ X8, 0x1F, 0x352FF9C
	0x0352FF78 ADRP X8, 0xC05000
	0x0352FF7C LDR X8, [X8 + 0x980]
	0x0352FF80 LDR X0, [X8]
	0x0352FF84 LDR W8, [X0 + 0xE0]
	0x0352FF88 CBNZ W8, 0x352FF90
	0x0352FF8C BL 0x1C16DFC
	0x0352FF90 MOV X0, X20
	0x0352FF94 BL 0x352D5D0
	0x0352FF98 MOV X20, X0
	0x0352FF9C CBZ X19, 0x3530040
	0x0352FFA0 LDR X8, [X19 + 0x10]
	0x0352FFA4 CBZ X8, 0x3530040
	0x0352FFA8 LDR W9, [X8 + 0x18]
	0x0352FFAC CMP W9, 0x45
	0x0352FFB0 B.LS 0x3530058
	0x0352FFB4 LDR W8, [X8 + 0x134]
	0x0352FFB8 TBZ X8, 0x1F, 0x352FFE0
	0x0352FFBC ADRP X8, 0xC05000
	0x0352FFC0 LDR X8, [X8 + 0x980]
	0x0352FFC4 LDR X0, [X8]
	0x0352FFC8 LDR W8, [X0 + 0xE0]
	0x0352FFCC CBNZ W8, 0x352FFD4
	0x0352FFD0 BL 0x1C16DFC
	0x0352FFD4 MOV X0, X19
	0x0352FFD8 BL 0x352D5D0
	0x0352FFDC MOV X19, X0
	0x0352FFE0 CBZ X20, 0x3530040
	0x0352FFE4 ADRP X22, 0xC05000
	0x0352FFE8 LDR X22, [X22 + 0x980]
	0x0352FFEC LDR W8, [X20 + 0x18]
	0x0352FFF0 MOV X21, X19
	0x0352FFF4 MOV X19, X20
	0x0352FFF8 CMP W8, 0x1
	0x0352FFFC B.GT 0x353001C
	0x03530000 B.NE 0x3530044
	0x03530004 LDR X8, [X19 + 0x10]
	0x03530008 CBZ X8, 0x3530040
	0x0353000C LDR W9, [X8 + 0x18]
	0x03530010 CBZ W9, 0x3530058
	0x03530014 LDR W8, [X8 + 0x20]
	0x03530018 CBZ W8, 0x3530044
	0x0353001C LDR X0, [X22]
	0x03530020 LDR W8, [X0 + 0xE0]
	0x03530024 CBNZ W8, 0x353002C
	0x03530028 BL 0x1C16DFC
	0x0353002C MOV X0, X21
	0x03530030 MOV X1, X19
	0x03530034 BL 0x352EB38
	0x03530038 MOV X20, X0
	0x0353003C CBNZ X0, 0x352FFEC
	0x03530040 BL 0x1C16F20
	0x03530044 MOV X0, X21
	0x03530048 LDP X20, X19, [X31 + 0x20]
	0x0353004C LDP X22, X21, [X31 + 0x10]
	0x03530050 LDR X30, [X31], #0x30
	0x03530054 RET
	0x03530058 BL 0x1C16F28
	0x0353005C STR X30, [X31 - 0x30]!
	0x03530060 STP X22, X21, [X31 + 0x10]
	0x03530064 STP X20, X19, [X31 + 0x20]
	0x03530068 ADRP X20, 0xEAF000
	0x0353006C ADRP X22, 0xC04000
	0x03530070 ADRP X21, 0xBCA000
	0x03530074 LDRB W8, [X20 + 0xBA8]
	0x03530078 LDR X22, [X22 + 0x980]
	0x0353007C LDR X21, [X21 + 0x2E8]
	0x03530080 MOV W19, W0
	0x03530084 TBNZ X8, 0x0, 0x35300A8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xEB1000
	007 Move X22, 0xC06000
	008 Move W8, [X19+2975]
	009 Move X22, [X22+2432]
	010 Move X20, X1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xC06000
	017 Move X0, [X0+2432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X19+2975], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X19, X0
	024 Call BigInteger..ctor, X0
	025 Compare X21, 0
	026 JumpIfEqual {89}
	027 Compare X20, 0
	028 JumpIfEqual {89}
	029 Move W8, [X21+24]
	030 Move W9, [X20+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 NotImplemented "Instruction CSEL not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X11, [X21+16]
	035 Compare X11, 0
	036 JumpIfEqual {89}
	037 Move W9, [X11+24]
	038 Move X8, X31
	039 Move W10, W10
	040 Add X11, X11, 32
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X12, [X20+16]
	043 Compare X12, 0
	044 JumpIfEqual {89}
	045 Move W13, [X12+24]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Compare X19, 0
	048 JumpIfEqual {89}
	049 Move X13, [X19+16]
	050 Compare X13, 0
	051 JumpIfEqual {89}
	052 Move W14, [X13+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Add X12, X12, X8
	055 Move W14, [X11]
	056 Move W12, [X12+32]
	057 Add X13, X13, X8
	058 Add X8, X8, 1
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Xor W12, W12, W14
	061 Move [X13+32], W12
	062 Compare X19, 0
	063 JumpIfEqual {89}
	064 Move X8, [X19+16]
	065 Move W9, 70
	066 Move [X19+24], W9
	067 Compare X8, 0
	068 JumpIfEqual {89}
	069 Move W9, [X8+24]
	070 Move W10, 77
	071 Subtract X11, X10, 8
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move W11, [X8]
	074 Compare W11, 0
	075 JumpIfNotEqual {81}
	076 Subtract X12, X10, 7
	077 Subtract W11, W10, 8
	078 Subtract X10, X10, 1
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move [X19+24], W11
	081 Move X0, X19
	082 Move X20, [X31+32]
	083 Move X19, [X31+40]
	084 Move X22, [X31+16]
	085 Move X21, [X31+24]
	086 Move X30, [X31+48]
	087 Return X0
	088 Call 0x1C17F28
	089 Call 0x1C17F20

Method: Photon.SocketServer.Numeric.BigInteger max(Photon.SocketServer.Numeric.BigInteger bi)

Disassembly:
	0x03530088 ADRP X0, 0xC04000
	0x0353008C LDR X0, [X0 + 0x980]
	0x03530090 BL 0x1C16CF4
	0x03530094 ADRP X0, 0xBCA000
	0x03530098 LDR X0, [X0 + 0x2E8]
	0x0353009C BL 0x1C16CF4
	0x035300A0 MOVZ W8, 0x1
	0x035300A4 STRB W8, [X20 + 0xBA8]
	0x035300A8 LDR X0, [X22]
	0x035300AC BL 0x1C16F10
	0x035300B0 MOV X20, X0
	0x035300B4 BL 0x352BB04
	0x035300B8 LDR X0, [X21]
	0x035300BC BL 0x1C16F10
	0x035300C0 MOV X1, X31
	0x035300C4 MOV X21, X0
	0x035300C8 BL 0x338E3CC
	0x035300CC CBZ X20, 0x35300F4
	0x035300D0 MOV X0, X20
	0x035300D4 MOV W1, W19
	0x035300D8 MOV X2, X21
	0x035300DC BL 0x35300F8
	0x035300E0 MOV X0, X20
	0x035300E4 LDP X20, X19, [X31 + 0x20]
	0x035300E8 LDP X22, X21, [X31 + 0x10]
	0x035300EC LDR X30, [X31], #0x30
	0x035300F0 RET
	0x035300F4 BL 0x1C16F20
	0x035300F8 STP X30, X27, [X31 - 0x50]!
	0x035300FC STP X26, X25, [X31 + 0x10]
	0x03530100 STP X24, X23, [X31 + 0x20]
	0x03530104 STP X22, X21, [X31 + 0x30]
	0x03530108 STP X20, X19, [X31 + 0x40]
	0x0353010C SBFM W8, W1, 0x5, 0x1F
	0x03530110 ANDS W23, W1, 0x1F

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xEB0000
	007 Move X21, 0xC05000
	008 Move W8, [X22+2976]
	009 Move X21, [X21+2432]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xC05000
	017 Move X0, [X0+2432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2976], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Call BigInteger.op_GreaterThan, X0, X1
	029 Move X8, [X21]
	030 Move W21, W0
	031 Move X0, X8
	032 Call 0x1C17F10
	033 And W31, W21, 1
	034 NotImplemented "Instruction CSEL not yet implemented."
	035 Move X22, X0
	036 Call BigInteger..ctor, X0, X1
	037 Move X0, X22
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move X30, [X31+48]
	043 Return X0

Method: Photon.SocketServer.Numeric.BigInteger min(Photon.SocketServer.Numeric.BigInteger bi)

Disassembly:
	0x03530114 CINC W22, W8, NE
	0x03530118 CMP W22, 0x46
	0x0353011C B.GT 0x353026C
	0x03530120 MOV W20, W1
	0x03530124 MOV X19, X0
	0x03530128 CMP W22, 0x1
	0x0353012C B.LT 0x353019C
	0x03530130 MOV X21, X2
	0x03530134 CBZ X2, 0x3530268
	0x03530138 MOV X24, X31
	0x0353013C MOV W25, W22
	0x03530140 MOVZ X26, 0x41F00000
	0x03530144 LDR X8, [X21]
	0x03530148 LDR X27, [X19 + 0x10]
	0x0353014C MOV X0, X21
	0x03530150 LDP X9, X1, [X8 + 0x1B8]
	0x03530154 BLR X9
	0x03530158 CBZ X27, 0x3530268
	0x0353015C LDR W8, [X27 + 0x18]
	0x03530160 CMP X24, X8
	0x03530164 B.CS 0x3530264
	0x03530168 FMOV D1, X26
	0x0353016C FMUL D0, D0, D1
	0x03530170 ADD X8, X27, X24, 0x2, LSL
	0x03530174 ADD X24, X24, 0x1
	0x03530178 FCVTZS W9, D0
	0x0353017C FCVTZU W10, D0
	0x03530180 FCMP D0, 0x0
	0x03530184 CSEL W9, W9, W10, MI
	0x03530188 CMP X25, X24
	0x0353018C STR W9, [X8 + 0x20]
	0x03530190 B.NE 0x3530144
	0x03530194 CMP W22, 0x45
	0x03530198 B.GT 0x35301CC
	0x0353019C LDR X10, [X19 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xEB0000
	007 Move X21, 0xC05000
	008 Move W8, [X22+2977]
	009 Move X21, [X21+2432]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xC05000
	017 Move X0, [X0+2432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2977], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Call BigInteger.op_LessThan, X0, X1
	029 Move X8, [X21]
	030 Move W21, W0
	031 Move X0, X8
	032 Call 0x1C17F10
	033 And W31, W21, 1
	034 NotImplemented "Instruction CSEL not yet implemented."
	035 Move X22, X0
	036 Call BigInteger..ctor, X0, X1
	037 Move X0, X22
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move X30, [X31+48]
	043 Return X0

Method: Photon.SocketServer.Numeric.BigInteger abs()

Disassembly:
	0x035301A0 CBZ X10, 0x3530268
	0x035301A4 LDR W8, [X10 + 0x18]
	0x035301A8 MOV W9, W22
	0x035301AC SXTW X9, W9
	0x035301B0 ADD X10, X10, 0x20
	0x035301B4 CMP W9, W8
	0x035301B8 B.CS 0x3530264
	0x035301BC STR W31, [X10, X9, LSL #2]
	0x035301C0 ADD X9, X9, 0x1
	0x035301C4 CMP X9, 0x46
	0x035301C8 B.NE 0x35301B4
	0x035301CC CBZ W23, 0x3530218
	0x035301D0 LDR X8, [X19 + 0x10]
	0x035301D4 CBZ X8, 0x3530268
	0x035301D8 LDR W10, [X8 + 0x18]
	0x035301DC SXTW X9, W22
	0x035301E0 SUB X9, X9, 0x1
	0x035301E4 CMP W9, W10
	0x035301E8 B.CS 0x3530264
	0x035301EC ADD X8, X8, X9, 0x2, LSL
	0x035301F0 LDR W9, [X8 + 0x20]
	0x035301F4 SUB W10, W20, 0x1
	0x035301F8 MOVZ W11, 0x1
	0x035301FC SUB W12, W31, W20
	0x03530200 MOVN W13, 0x0
	0x03530204 LSLV W10, W11, W10
	0x03530208 ORR W9, W9, W10, 0x0
	0x0353020C LSRV W10, W13, W12
	0x03530210 AND W9, W9, W10, 0x0
	0x03530214 B 0x3530244
	0x03530218 LDR X8, [X19 + 0x10]
	0x0353021C CBZ X8, 0x3530268
	0x03530220 LDR W10, [X8 + 0x18]
	0x03530224 MOV W9, W22
	0x03530228 SXTW X9, W9
	0x0353022C SUB X9, X9, 0x1
	0x03530230 CMP W9, W10
	0x03530234 B.CS 0x3530264

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xEB0000
	005 Move W8, [X20+2978]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xC05000
	012 Move X0, [X0+2432]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2978], W8
	016 Move X8, [X19+16]
	017 Compare X8, 0
	018 JumpIfEqual {48}
	019 Move W9, [X8+24]
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move X9, 0xC05000
	022 Move X9, [X9+2432]
	023 Move W8, [X8+308]
	024 Move X0, [X9]
	025 Move TEMP, X8
	026 And TEMP, TEMP, -2147483648
	027 Compare TEMP, -2147483648
	028 JumpIfEqual {38}
	029 Call 0x1C17F10
	030 Move X1, X19
	031 Move X20, X0
	032 Call BigInteger..ctor, X0, X1
	033 Move X0, X20
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return X0
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X19
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Call BigInteger.op_UnaryNegation, X0
	047 Return X0
	048 Call 0x1C17F20
	049 Call 0x1C17F28

Method: System.String ToString()

Disassembly:
	0x03530238 ADD X8, X8, X9, 0x2, LSL
	0x0353023C LDR W9, [X8 + 0x20]

ISIL:
	001 Move W1, 10

Method: System.String ToString(System.Int32 radix)

Disassembly:
	0x03530240 ORR W9, W9, 0x80000000
	0x03530244 STR W9, [X8 + 0x20]
	0x03530248 STR W22, [X19 + 0x18]
	0x0353024C LDP X20, X19, [X31 + 0x40]
	0x03530250 LDP X22, X21, [X31 + 0x30]
	0x03530254 LDP X24, X23, [X31 + 0x20]
	0x03530258 LDP X26, X25, [X31 + 0x10]
	0x0353025C LDP X30, X27, [X31], #0x50
	0x03530260 RET
	0x03530264 BL 0x1C16F28
	0x03530268 BL 0x1C16F20
	0x0353026C ADRP X0, 0xBF1000
	0x03530270 LDR X0, [X0 + 0x560]
	0x03530274 BL 0x1C16D08
	0x03530278 BL 0x1C16F10
	0x0353027C MOV X19, X0
	0x03530280 ADRP X0, 0xC04000
	0x03530284 LDR X0, [X0 + 0xA30]
	0x03530288 BL 0x1C16D08
	0x0353028C MOV X1, X0
	0x03530290 MOV X0, X19
	0x03530294 MOV X2, X31
	0x03530298 BL 0x3316338
	0x0353029C ADRP X0, 0xC04000
	0x035302A0 LDR X0, [X0 + 0xA38]
	0x035302A4 BL 0x1C16D08
	0x035302A8 MOV X1, X0
	0x035302AC MOV X0, X19
	0x035302B0 BL 0x1C16DEC
	0x035302B4 STR D8, [X31 - 0x50]!
	0x035302B8 STR X30, [X31 + 0x8]
	0x035302BC STP X26, X25, [X31 + 0x10]
	0x035302C0 STP X24, X23, [X31 + 0x20]
	0x035302C4 STP X22, X21, [X31 + 0x30]
	0x035302C8 STP X20, X19, [X31 + 0x40]
	0x035302CC ADRP X21, 0xEAF000
	0x035302D0 LDRB W8, [X21 + 0xBA9]
	0x035302D4 MOV W19, W1
	0x035302D8 MOV X20, X0
	0x035302DC TBNZ X8, 0x0, 0x3530300
	0x035302E0 ADRP X0, 0xC04000
	0x035302E4 LDR X0, [X0 + 0x980]
	0x035302E8 BL 0x1C16CF4
	0x035302EC ADRP X0, 0xBCA000
	0x035302F0 LDR X0, [X0 + 0x2E8]
	0x035302F4 BL 0x1C16CF4
	0x035302F8 MOVZ W8, 0x1
	0x035302FC STRB W8, [X21 + 0xBA9]
	0x03530300 LDR X8, [X20 + 0x10]
	0x03530304 CBZ X8, 0x3530540
	0x03530308 LDR W9, [X8 + 0x18]
	0x0353030C CMP W9, 0x45
	0x03530310 B.LS 0x3530544
	0x03530314 LDR W8, [X8 + 0x134]
	0x03530318 TBZ X8, 0x1F, 0x3530344
	0x0353031C ADRP X8, 0xC04000
	0x03530320 LDR X8, [X8 + 0x980]
	0x03530324 LDR X0, [X8]
	0x03530328 LDR W8, [X0 + 0xE0]
	0x0353032C CBNZ W8, 0x3530334
	0x03530330 BL 0x1C16DFC
	0x03530334 MOV X0, X20
	0x03530338 BL 0x352D5D0
	0x0353033C MOV X20, X0
	0x03530340 CBZ X0, 0x3530540
	0x03530344 LDR W9, [X20 + 0x18]
	0x03530348 LDR X8, [X20 + 0x10]
	0x0353034C CMP W9, 0x1
	0x03530350 B.NE 0x3530380
	0x03530354 CBZ X8, 0x3530540
	0x03530358 LDR W9, [X8 + 0x18]
	0x0353035C CBZ W9, 0x3530544
	0x03530360 LDR W9, [X8 + 0x20]
	0x03530364 CMP W9, 0x4
	0x03530368 B.CS 0x3530384
	0x0353036C AND X8, X9, 0xF
	0x03530370 MOVZ W9, 0xC
	0x03530374 LSRV W8, W9, W8
	0x03530378 AND W0, W8, 0x1
	0x0353037C B 0x3530524
	0x03530380 CBZ X8, 0x3530540
	0x03530384 LDR W9, [X8 + 0x18]
	0x03530388 CBZ W9, 0x3530544
	0x0353038C LDRB W8, [X8 + 0x20]
	0x03530390 TBNZ X8, 0x0, 0x353039C
	0x03530394 MOV W0, W31
	0x03530398 B 0x3530524
	0x0353039C MOV X0, X20
	0x035303A0 BL 0x352F9D0
	0x035303A4 ADRP X23, 0xC04000
	0x035303A8 LDR X23, [X23 + 0x980]
	0x035303AC MOV W24, W0
	0x035303B0 LDR X8, [X23]
	0x035303B4 MOV X0, X8
	0x035303B8 BL 0x1C16F10
	0x035303BC MOV X21, X0
	0x035303C0 BL 0x352BB04
	0x035303C4 LDR X0, [X23]
	0x035303C8 BL 0x1C16F10
	0x035303CC MOVZ W1, 0x1
	0x035303D0 MOV X22, X0
	0x035303D4 BL 0x352BB6C
	0x035303D8 LDR X0, [X23]
	0x035303DC LDR W8, [X0 + 0xE0]
	0x035303E0 CBNZ W8, 0x35303E8
	0x035303E4 BL 0x1C16DFC
	0x035303E8 MOV X0, X20
	0x035303EC MOV X1, X22
	0x035303F0 BL 0x352D228
	0x035303F4 ADRP X8, 0xBCA000
	0x035303F8 LDR X8, [X8 + 0x2E8]
	0x035303FC MOV X22, X0
	0x03530400 LDR X8, [X8]
	0x03530404 MOV X0, X8
	0x03530408 BL 0x1C16F10
	0x0353040C MOV X1, X31
	0x03530410 MOV X23, X0
	0x03530414 BL 0x338E3CC
	0x03530418 CMP W19, 0x1
	0x0353041C B.LT 0x3530520
	0x03530420 CBZ X23, 0x3530540
	0x03530424 MOV W25, W31
	0x03530428 SCVTF D8, W24
	0x0353042C MOVZ X24, 0x7FF00000
	0x03530430 MOVZ W26, 0x80000000
	0x03530434 LDR X8, [X23]
	0x03530438 MOV X0, X23
	0x0353043C LDP X9, X1, [X8 + 0x1B8]
	0x03530440 BLR X9
	0x03530444 FMUL D0, D0, D8
	0x03530448 FMOV D1, X24
	0x0353044C FCVTZS W8, D0
	0x03530450 FCMP D0, D1
	0x03530454 CSEL W1, W26, W8, EQ
	0x03530458 CMP W1, 0x2
	0x0353045C B.LT 0x3530434
	0x03530460 CBZ X21, 0x3530540
	0x03530464 MOV X0, X21
	0x03530468 MOV X2, X23
	0x0353046C BL 0x35300F8
	0x03530470 LDR W8, [X21 + 0x18]
	0x03530474 CMP W8, 0x1
	0x03530478 B.GT 0x353049C
	0x0353047C B.NE 0x3530434
	0x03530480 LDR X8, [X21 + 0x10]
	0x03530484 CBZ X8, 0x3530540
	0x03530488 LDR W9, [X8 + 0x18]
	0x0353048C CBZ W9, 0x3530544
	0x03530490 LDR W8, [X8 + 0x20]
	0x03530494 CMP W8, 0x1
	0x03530498 B.EQ 0x3530434
	0x0353049C MOV X0, X21
	0x035304A0 MOV X1, X20
	0x035304A4 BL 0x352FF28
	0x035304A8 CBZ X0, 0x3530540
	0x035304AC LDR W8, [X0 + 0x18]
	0x035304B0 CMP W8, 0x1
	0x035304B4 B.NE 0x35304D4
	0x035304B8 LDR X8, [X0 + 0x10]
	0x035304BC CBZ X8, 0x3530540
	0x035304C0 LDR W9, [X8 + 0x18]
	0x035304C4 CBZ W9, 0x3530544
	0x035304C8 LDR W8, [X8 + 0x20]
	0x035304CC CMP W8, 0x1
	0x035304D0 B.NE 0x3530394
	0x035304D4 MOV X0, X21
	0x035304D8 MOV X1, X22
	0x035304DC MOV X2, X20
	0x035304E0 BL 0x352F678
	0x035304E4 CBZ X0, 0x3530540
	0x035304E8 LDR W8, [X0 + 0x18]
	0x035304EC CMP W8, 0x1
	0x035304F0 B.GT 0x3530394
	0x035304F4 B.NE 0x3530514
	0x035304F8 LDR X8, [X0 + 0x10]
	0x035304FC CBZ X8, 0x3530540
	0x03530500 LDR W9, [X8 + 0x18]
	0x03530504 CBZ W9, 0x3530544
	0x03530508 LDR W8, [X8 + 0x20]
	0x0353050C CMP W8, 0x1
	0x03530510 B.NE 0x3530394
	0x03530514 ADD W25, W25, 0x1
	0x03530518 CMP W25, W19
	0x0353051C B.NE 0x3530434
	0x03530520 MOVZ W0, 0x1
	0x03530524 LDP X20, X19, [X31 + 0x40]
	0x03530528 LDP X22, X21, [X31 + 0x30]
	0x0353052C LDP X24, X23, [X31 + 0x20]
	0x03530530 LDP X26, X25, [X31 + 0x10]
	0x03530534 LDR X30, [X31 + 0x8]
	0x03530538 LDR V8, [X31], #0x50
	0x0353053C RET
	0x03530540 BL 0x1C16F20
	0x03530544 BL 0x1C16F28
	0x03530548 SUB X31, X31, 0x80
	0x0353054C STR D8, [X31 + 0x10]
	0x03530550 STP X29, X30, [X31 + 0x20]
	0x03530554 STP X28, X27, [X31 + 0x30]
	0x03530558 STP X26, X25, [X31 + 0x40]
	0x0353055C STP X24, X23, [X31 + 0x50]
	0x03530560 STP X22, X21, [X31 + 0x60]
	0x03530564 STP X20, X19, [X31 + 0x70]
	0x03530568 ADRP X19, 0xEAF000
	0x0353056C LDRB W8, [X19 + 0xBAA]
	0x03530570 MOV W28, W1
	0x03530574 MOV X20, X0
	0x03530578 TBNZ X8, 0x0, 0x353059C

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X19, 0xEB0000
	013 Move W8, [X19+2979]
	014 Move W22, W1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {40}
	020 Move X0, 0xC05000
	021 Move X0, [X0+2432]
	022 Call 0x1C17CF4
	023 Move X0, 0xBC6000
	024 Move X0, [X0+368]
	025 Call 0x1C17CF4
	026 Move X0, 0xBC5000
	027 Move X0, [X0+680]
	028 Call 0x1C17CF4
	029 Move X0, 0xC05000
	030 Move X0, [X0+2568]
	031 Call 0x1C17CF4
	032 Move X0, 0xBC4000
	033 Move X0, [X0+2440]
	034 Call 0x1C17CF4
	035 Move X0, 0xBC6000
	036 Move X0, [X0+1200]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X19+2979], W8
	040 Subtract W8, W22, 2
	041 NotImplemented "Instruction CMP not yet implemented."
	042 NotImplemented "Instruction STRH not yet implemented."
	043 Compare X21, 0
	044 JumpIfEqual {183}
	045 Move X8, [X21+16]
	046 Compare X8, 0
	047 JumpIfEqual {183}
	048 Move W9, [X8+24]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X9, 0xC05000
	051 Move X10, 0xBC4000
	052 Move X9, [X9+2568]
	053 Move X10, [X10+2440]
	054 Move X26, 0xC05000
	055 Move W8, [X8+308]
	056 Move X20, [X9]
	057 Move X19, [X10]
	058 Move X26, [X26+2432]
	059 Move TEMP, X8
	060 And TEMP, TEMP, -2147483648
	061 Compare TEMP, -2147483648
	062 JumpIfEqual {64}
	063 Move W27, W31
	064 Move X0, [X26]
	065 Move W8, [X0+224]
	066 Compare W8, 0
	067 JumpIfNotEqual {69}
	068 Call 0x1C17DFC
	069 Move X0, X21
	070 Call BigInteger.op_UnaryNegation, X0
	071 Move W27, 1
	072 Move X21, X0
	073 Move X0, [X26]
	074 Call 0x1C17F10
	075 Move X23, X0
	076 Call BigInteger..ctor, X0
	077 Move X0, [X26]
	078 Call 0x1C17F10
	079 Move X24, X0
	080 Call BigInteger..ctor, X0
	081 Move X0, [X26]
	082 Call 0x1C17F10
	083 Move W1, W22
	084 Move X25, X0
	085 Call BigInteger..ctor, X0, X1
	086 Compare X21, 0
	087 JumpIfEqual {183}
	088 Move W8, [X21+24]
	089 Move X22, 0xBC6000
	090 Move X22, [X22+368]
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move X9, [X21+16]
	093 Compare X9, 0
	094 JumpIfEqual {183}
	095 Move W10, [X9+24]
	096 Compare W10, 0
	097 JumpIfEqual {184}
	098 Move W9, [X9+32]
	099 Compare W9, 0
	100 JumpIfEqual {167}
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move X8, [X21+16]
	103 Compare X8, 0
	104 JumpIfEqual {183}
	105 Move W9, [X8+24]
	106 Compare W9, 0
	107 JumpIfEqual {184}
	108 Move W8, [X8+32]
	109 Compare W8, 0
	110 JumpIfEqual {158}
	111 Move X0, [X26]
	112 Move W8, [X0+224]
	113 Compare W8, 0
	114 JumpIfNotEqual {116}
	115 Call 0x1C17DFC
	116 Move X0, X21
	117 Move X1, X25
	118 Move X2, X23
	119 Move X3, X24
	120 Call BigInteger.singleByteDivide, X0, X1, X2, X3
	121 Compare X24, 0
	122 JumpIfEqual {183}
	123 Move X0, [X24+16]
	124 Compare X0, 0
	125 JumpIfEqual {183}
	126 Move W8, [X0+24]
	127 Compare W8, 0
	128 JumpIfEqual {184}
	129 Add X0, X0, 32
	130 Move W8, [X0]
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move X1, X31
	133 Call UInt32.ToString, X0
	134 Compare X20, 0
	135 JumpIfEqual {183}
	136 Subtract W1, W8, 10
	137 Move X0, X20
	138 Move X2, X31
	139 Call String.get_Chars, X0, X1
	140 Move X8, [X22]
	141 NotImplemented "Instruction STRH not yet implemented."
	142 Move W9, [X8+224]
	143 Compare W9, 0
	144 JumpIfNotEqual {147}
	145 Move X0, X8
	146 Call 0x1C17DFC
	147 Add X0, X31, 12
	148 Move X1, X31
	149 Call Char.ToString, X0
	150 Move X1, X19
	151 Move X2, X31
	152 Call String.Concat, X0, X1
	153 Compare X23, 0
	154 JumpIfEqual {183}
	155 Move W8, [X23+24]
	156 Move X19, X0
	157 Move X21, X23
	158 Compare W27, 0
	159 JumpIfEqual {170}
	160 Move X8, 0xBC5000
	161 Move X8, [X8+680]
	162 Move X1, X19
	163 Move X2, X31
	164 Move X0, [X8]
	165 Call String.Concat, X0, X1
	166 Move X19, X0
	167 Move X8, 0xBC6000
	168 Move X8, [X8+1200]
	169 Move X19, [X8]
	170 Move X0, X19
	171 Move X20, [X31+80]
	172 Move X19, [X31+88]
	173 Move X22, [X31+64]
	174 Move X21, [X31+72]
	175 Move X24, [X31+48]
	176 Move X23, [X31+56]
	177 Move X26, [X31+32]
	178 Move X25, [X31+40]
	179 Move X30, [X31+16]
	180 Move X27, [X31+24]
	181 Add X31, X31, 96
	182 Return X0
	183 Call 0x1C17F20
	184 Call 0x1C17F28
	185 Move X0, 0xBCC000
	186 Move X0, [X0+1400]
	187 Call 0x1C17D08
	188 Call 0x1C17F10
	189 Move X19, X0
	190 Move X0, 0xC05000
	191 Move X0, [X0+2576]
	192 Call 0x1C17D08
	193 Move X1, X0
	194 Move X0, X19
	195 Move X2, X31
	196 Call ArgumentException..ctor, X0, X1
	197 Move X0, 0xC05000
	198 Move X0, [X0+2584]
	199 Call 0x1C17D08
	200 Move X1, X0
	201 Move X0, X19
	202 Call 0x1C17DEC
	203 Move X23, X0
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Move X0, X23
	206 Call 0x3EB2AD0
	207 Move X23, X0
	208 Move X0, 0xBC4000
	209 Move X0, [X0+2000]
	210 Call 0x1C17D08
	211 Move X8, [X23]
	212 Move X1, [X8]
	213 Call 0x1C18270
	214 Move TEMP, X0
	215 And TEMP, TEMP, 1
	216 Compare TEMP, 1
	217 JumpIfNotEqual {220}
	218 Call 0x3EB2AE0
	219 Move W27, 1
	220 Move W0, 8
	221 Call 0x3EB2AF0
	222 Move X8, [X23]
	223 Move [X0], X8
	224 Move X1, 0x985000
	225 Add X1, X1, 3672
	226 Move X2, X31
	227 Call 0x3EB2B00
	228 Move X23, X0
	229 Call 0x3EB2AE0
	230 Move X0, X23
	231 Call 0x1D2D690
	232 Call 0x1991590

Method: System.String ToHexString()

Disassembly:
	0x0353057C ADRP X0, 0xC04000
	0x03530580 LDR X0, [X0 + 0x980]
	0x03530584 BL 0x1C16CF4
	0x03530588 ADRP X0, 0xBCA000
	0x0353058C LDR X0, [X0 + 0x2E8]
	0x03530590 BL 0x1C16CF4
	0x03530594 MOVZ W8, 0x1
	0x03530598 STRB W8, [X19 + 0xBAA]
	0x0353059C LDR X8, [X20 + 0x10]
	0x035305A0 CBZ X8, 0x3530900
	0x035305A4 LDR W9, [X8 + 0x18]
	0x035305A8 CMP W9, 0x45
	0x035305AC B.LS 0x35308FC
	0x035305B0 LDR W8, [X8 + 0x134]
	0x035305B4 TBZ X8, 0x1F, 0x35305E0
	0x035305B8 ADRP X8, 0xC04000
	0x035305BC LDR X8, [X8 + 0x980]
	0x035305C0 LDR X0, [X8]
	0x035305C4 LDR W8, [X0 + 0xE0]
	0x035305C8 CBNZ W8, 0x35305D0
	0x035305CC BL 0x1C16DFC
	0x035305D0 MOV X0, X20
	0x035305D4 BL 0x352D5D0
	0x035305D8 MOV X20, X0
	0x035305DC CBZ X0, 0x3530900
	0x035305E0 LDR W9, [X20 + 0x18]
	0x035305E4 LDR X8, [X20 + 0x10]
	0x035305E8 CMP W9, 0x1
	0x035305EC B.NE 0x353061C
	0x035305F0 CBZ X8, 0x3530900
	0x035305F4 LDR W9, [X8 + 0x18]
	0x035305F8 CBZ W9, 0x35308FC
	0x035305FC LDR W9, [X8 + 0x20]
	0x03530600 CMP W9, 0x4
	0x03530604 B.CS 0x3530620
	0x03530608 AND X8, X9, 0xF
	0x0353060C MOVZ W9, 0xC
	0x03530610 LSRV W8, W9, W8
	0x03530614 AND W0, W8, 0x1
	0x03530618 B 0x35308D0
	0x0353061C CBZ X8, 0x3530900
	0x03530620 LDR W9, [X8 + 0x18]
	0x03530624 CBZ W9, 0x35308FC
	0x03530628 LDRB W8, [X8 + 0x20]
	0x0353062C TBZ X8, 0x0, 0x35308CC
	0x03530630 ADRP X27, 0xC04000
	0x03530634 LDR X27, [X27 + 0x980]
	0x03530638 LDR X0, [X27]
	0x0353063C BL 0x1C16F10
	0x03530640 MOVZ W1, 0x1
	0x03530644 MOV X21, X0
	0x03530648 BL 0x352BB6C
	0x0353064C LDR X0, [X27]
	0x03530650 LDR W8, [X0 + 0xE0]
	0x03530654 CBNZ W8, 0x353065C
	0x03530658 BL 0x1C16DFC
	0x0353065C MOV X0, X20
	0x03530660 MOV X1, X21
	0x03530664 BL 0x352D228
	0x03530668 CBZ X0, 0x3530900
	0x0353066C LDR W8, [X0 + 0x18]
	0x03530670 MOV X21, X0
	0x03530674 CMP W8, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0xEB0000
	008 Move W8, [X20+2980]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xBF6000
	015 Move X0, [X0+1584]
	016 Call 0x1C17CF4
	017 Move X0, 0xBEB000
	018 Move X0, [X0+2312]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2980], W8
	022 Move X8, [X19+16]
	023 Compare X8, 0
	024 JumpIfEqual {71}
	025 Move W9, [X19+24]
	026 Move W10, [X8+24]
	027 Subtract W9, W9, 1
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X10, 0xBEB000
	030 Move X10, [X10+2312]
	031 Add X8, X8, W9
	032 Add X0, X8, 32
	033 Move X2, X31
	034 Move X1, [X10]
	035 Call UInt32.ToString, X0, X1
	036 Move W8, [X19+24]
	037 Move X20, X0
	038 Subtract W8, W8, 2
	039 Move X21, 0xBF6000
	040 Move X21, [X21+1584]
	041 Move W22, W8
	042 Move X8, X22
	043 ShiftRight X8, 62
	044 And X8, X8, 0x1FFFFFFF
	045 Add X23, X8, 32
	046 Move X8, [X19+16]
	047 Compare X8, 0
	048 JumpIfEqual {71}
	049 Move W9, [X8+24]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X1, [X21]
	052 Add X0, X8, X23
	053 Move X2, X31
	054 Call UInt32.ToString, X0, X1
	055 Move X1, X0
	056 Move X0, X20
	057 Move X2, X31
	058 Call String.Concat, X0, X1
	059 Move X20, X0
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Subtract X22, X22, 1
	062 Subtract X23, X23, 4
	063 Move X0, X20
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X22, [X31+16]
	067 Move X21, [X31+24]
	068 Move X30, [X31+48]
	069 Move X23, [X31+56]
	070 Return X0
	071 Call 0x1C17F20
	072 Call 0x1C17F28

Method: Photon.SocketServer.Numeric.BigInteger ModPow(Photon.SocketServer.Numeric.BigInteger exp, Photon.SocketServer.Numeric.BigInteger n)

Disassembly:
	0x03530678 B.LT 0x35306E8
	0x0353067C LDR X9, [X21 + 0x10]
	0x03530680 MOV W10, W31
	0x03530684 MOV W11, W31
	0x03530688 CBZ X9, 0x3530900
	0x0353068C LDR W13, [X9 + 0x18]
	0x03530690 ADD X14, X9, W10, 0x2, SXTW
	0x03530694 MOV W12, W31
	0x03530698 ADD X14, X14, 0x20
	0x0353069C ADD W22, W11, 0x20
	0x035306A0 MOVZ W15, 0x1
	0x035306A4 CMP W10, W13
	0x035306A8 B.CS 0x35308FC
	0x035306AC LDR W16, [X14]
	0x035306B0 ANDS W31, W16, W15, 0x0
	0x035306B4 B.NE 0x35306CC
	0x035306B8 ADD W12, W12, 0x1
	0x035306BC CMP W12, 0x20
	0x035306C0 UBFM W15, W15, 0x1F, 0x1E
	0x035306C4 B.NE 0x35306A4
	0x035306C8 B 0x35306D4
	0x035306CC ADD W22, W11, W12
	0x035306D0 MOV W10, W8
	0x035306D4 ADD W10, W10, 0x1
	0x035306D8 CMP W10, W8
	0x035306DC MOV W11, W22
	0x035306E0 B.LT 0x3530688
	0x035306E4 B 0x35306EC
	0x035306E8 MOV W22, W31
	0x035306EC LDR X0, [X27]
	0x035306F0 LDR W8, [X0 + 0xE0]
	0x035306F4 CBNZ W8, 0x35306FC
	0x035306F8 BL 0x1C16DFC
	0x035306FC MOV X0, X21
	0x03530700 MOV W1, W22
	0x03530704 BL 0x352D904
	0x03530708 STR X0, [X31 + 0x18]
	0x0353070C MOV X0, X20
	0x03530710 BL 0x352F9D0
	0x03530714 LDR X8, [X27]
	0x03530718 MOV W26, W0
	0x0353071C MOV X0, X8
	0x03530720 BL 0x1C16F10
	0x03530724 MOV X24, X0
	0x03530728 BL 0x352BB04
	0x0353072C ADRP X8, 0xBCA000
	0x03530730 LDR X8, [X8 + 0x2E8]
	0x03530734 LDR X0, [X8]
	0x03530738 BL 0x1C16F10
	0x0353073C MOV X1, X31
	0x03530740 MOV X25, X0
	0x03530744 BL 0x338E3CC
	0x03530748 CMP W28, 0x1
	0x0353074C B.LT 0x35308F4
	0x03530750 CBZ X25, 0x3530900
	0x03530754 MOV W8, W31
	0x03530758 SCVTF D8, W26
	0x0353075C MOVZ X29, 0x7FF00000
	0x03530760 MOVZ W19, 0x80000000
	0x03530764 STR W8, [X31 + 0xC]
	0x03530768 LDR X8, [X25]
	0x0353076C MOV X0, X25
	0x03530770 LDP X9, X1, [X8 + 0x1B8]
	0x03530774 BLR X9
	0x03530778 FMUL D0, D0, D8
	0x0353077C FMOV D1, X29
	0x03530780 FCVTZS W8, D0
	0x03530784 FCMP D0, D1
	0x03530788 CSEL W1, W19, W8, EQ
	0x0353078C CMP W1, 0x2
	0x03530790 B.LT 0x3530768
	0x03530794 CBZ X24, 0x3530900
	0x03530798 MOV X0, X24
	0x0353079C MOV X2, X25
	0x035307A0 BL 0x35300F8
	0x035307A4 LDR W8, [X24 + 0x18]
	0x035307A8 CMP W8, 0x1
	0x035307AC B.GT 0x35307D0
	0x035307B0 B.NE 0x3530768
	0x035307B4 LDR X8, [X24 + 0x10]
	0x035307B8 CBZ X8, 0x3530900
	0x035307BC LDR W9, [X8 + 0x18]
	0x035307C0 CBZ W9, 0x35308FC
	0x035307C4 LDR W8, [X8 + 0x20]
	0x035307C8 CMP W8, 0x1
	0x035307CC B.EQ 0x3530768
	0x035307D0 MOV X0, X24
	0x035307D4 MOV X1, X20
	0x035307D8 BL 0x352FF28
	0x035307DC CBZ X0, 0x3530900
	0x035307E0 LDR W8, [X0 + 0x18]
	0x035307E4 CMP W8, 0x1
	0x035307E8 B.NE 0x3530808
	0x035307EC LDR X8, [X0 + 0x10]
	0x035307F0 CBZ X8, 0x3530900
	0x035307F4 LDR W9, [X8 + 0x18]
	0x035307F8 CBZ W9, 0x35308FC
	0x035307FC LDR W8, [X8 + 0x20]
	0x03530800 CMP W8, 0x1
	0x03530804 B.NE 0x35308CC
	0x03530808 LDR X1, [X31 + 0x18]
	0x0353080C MOV X0, X24
	0x03530810 MOV X2, X20
	0x03530814 BL 0x352F678
	0x03530818 CBZ X0, 0x3530900
	0x0353081C LDR W8, [X0 + 0x18]
	0x03530820 MOV X26, X0
	0x03530824 CMP W8, 0x1
	0x03530828 B.NE 0x3530860
	0x0353082C LDR X8, [X26 + 0x10]
	0x03530830 CBZ X8, 0x3530900
	0x03530834 LDR W9, [X8 + 0x18]
	0x03530838 CBZ W9, 0x35308FC
	0x0353083C LDR W8, [X8 + 0x20]
	0x03530840 CMP W8, 0x1
	0x03530844 B.NE 0x3530860
	0x03530848 LDR W8, [X31 + 0xC]
	0x0353084C MOVZ W0, 0x1
	0x03530850 ADD W8, W8, 0x1
	0x03530854 CMP W8, W28
	0x03530858 B.NE 0x3530764
	0x0353085C B 0x35308D0
	0x03530860 CMP W22, 0x1
	0x03530864 B.LT 0x35308CC
	0x03530868 MOV W23, W31
	0x0353086C LDR X0, [X27]
	0x03530870 LDR W8, [X0 + 0xE0]
	0x03530874 CBNZ W8, 0x353087C
	0x03530878 BL 0x1C16DFC
	0x0353087C CBZ X26, 0x3530900
	0x03530880 LDR X8, [X26]
	0x03530884 MOV X0, X26
	0x03530888 MOV X1, X21
	0x0353088C LDP X9, X2, [X8 + 0x138]
	0x03530890 BLR X9
	0x03530894 TBNZ X0, 0x0, 0x3530848
	0x03530898 LDR X0, [X27]
	0x0353089C LDR W8, [X0 + 0xE0]
	0x035308A0 CBNZ W8, 0x35308A8
	0x035308A4 BL 0x1C16DFC
	0x035308A8 MOV X0, X26
	0x035308AC MOV X1, X26
	0x035308B0 BL 0x352C250
	0x035308B4 MOV X1, X20
	0x035308B8 BL 0x352EB38
	0x035308BC ADD W23, W23, 0x1
	0x035308C0 CMP W23, W22
	0x035308C4 MOV X26, X0
	0x035308C8 B.LT 0x353086C
	0x035308CC MOV W0, W31
	0x035308D0 LDP X20, X19, [X31 + 0x70]
	0x035308D4 LDP X22, X21, [X31 + 0x60]
	0x035308D8 LDP X24, X23, [X31 + 0x50]
	0x035308DC LDP X26, X25, [X31 + 0x40]
	0x035308E0 LDP X28, X27, [X31 + 0x30]
	0x035308E4 LDP X29, X30, [X31 + 0x20]
	0x035308E8 LDR V8, [X31 + 0x10]
	0x035308EC ADD X31, X31, 0x80
	0x035308F0 RET
	0x035308F4 MOVZ W0, 0x1
	0x035308F8 B 0x35308D0
	0x035308FC BL 0x1C16F28
	0x03530900 BL 0x1C16F20
	0x03530904 STR D8, [X31 - 0x70]!
	0x03530908 STP X29, X30, [X31 + 0x10]
	0x0353090C STP X28, X27, [X31 + 0x20]
	0x03530910 STP X26, X25, [X31 + 0x30]
	0x03530914 STP X24, X23, [X31 + 0x40]
	0x03530918 STP X22, X21, [X31 + 0x50]
	0x0353091C STP X20, X19, [X31 + 0x60]
	0x03530920 ADRP X21, 0xEAF000
	0x03530924 LDRB W8, [X21 + 0xBAB]
	0x03530928 MOV W19, W1
	0x0353092C MOV X20, X0
	0x03530930 TBNZ X8, 0x0, 0x3530954
	0x03530934 ADRP X0, 0xC04000
	0x03530938 LDR X0, [X0 + 0x980]
	0x0353093C BL 0x1C16CF4
	0x03530940 ADRP X0, 0xBCA000
	0x03530944 LDR X0, [X0 + 0x2E8]
	0x03530948 BL 0x1C16CF4
	0x0353094C MOVZ W8, 0x1
	0x03530950 STRB W8, [X21 + 0xBAB]
	0x03530954 LDR X8, [X20 + 0x10]
	0x03530958 CBZ X8, 0x3530BFC
	0x0353095C LDR W9, [X8 + 0x18]
	0x03530960 CMP W9, 0x45
	0x03530964 B.LS 0x3530C00
	0x03530968 LDR W8, [X8 + 0x134]
	0x0353096C TBZ X8, 0x1F, 0x3530998
	0x03530970 ADRP X8, 0xC04000
	0x03530974 LDR X8, [X8 + 0x980]
	0x03530978 LDR X0, [X8]
	0x0353097C LDR W8, [X0 + 0xE0]
	0x03530980 CBNZ W8, 0x3530988
	0x03530984 BL 0x1C16DFC
	0x03530988 MOV X0, X20
	0x0353098C BL 0x352D5D0
	0x03530990 MOV X20, X0
	0x03530994 CBZ X0, 0x3530BFC
	0x03530998 LDR W9, [X20 + 0x18]
	0x0353099C LDR X8, [X20 + 0x10]
	0x035309A0 CMP W9, 0x1
	0x035309A4 B.NE 0x35309D4
	0x035309A8 CBZ X8, 0x3530BFC
	0x035309AC LDR W9, [X8 + 0x18]
	0x035309B0 CBZ W9, 0x3530C00
	0x035309B4 LDR W9, [X8 + 0x20]
	0x035309B8 CMP W9, 0x4
	0x035309BC B.CS 0x35309D8
	0x035309C0 AND X8, X9, 0xF
	0x035309C4 MOVZ W9, 0xC
	0x035309C8 LSRV W8, W9, W8
	0x035309CC AND W0, W8, 0x1

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, 0xEB0000
	015 Move W8, [X20+2981]
	016 Move X21, X2
	017 Move X19, X1
	018 Move X22, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0xC05000
	024 Move X0, [X0+2432]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+2981], W8
	028 Compare X19, 0
	029 JumpIfEqual {244}
	030 Move X8, [X19+16]
	031 Compare X8, 0
	032 JumpIfEqual {244}
	033 Move W9, [X8+24]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move W8, [X8+308]
	036 Move TEMP, X8
	037 And TEMP, TEMP, -2147483648
	038 Compare TEMP, -2147483648
	039 JumpIfEqual {246}
	040 Move X25, 0xC05000
	041 Move X25, [X25+2432]
	042 Move X0, [X25]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move W0, 1
	048 Call BigInteger.op_Implicit, X0
	049 Move X8, [X22+16]
	050 Compare X8, 0
	051 JumpIfEqual {244}
	052 Move W9, [X8+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X20, X0
	055 Move X0, [X25]
	056 Move W24, [X8+308]
	057 Move W9, [X0+224]
	058 Compare W9, 0
	059 JumpIfNotEqual {61}
	060 Call 0x1C17DFC
	061 Move X0, X22
	062 Move TEMP, X24
	063 And TEMP, TEMP, -2147483648
	064 Compare TEMP, -2147483648
	065 JumpIfNotEqual {67}
	066 Call BigInteger.op_UnaryNegation, X0
	067 Move X1, X21
	068 Call BigInteger.op_Modulus, X0, X1
	069 Move X22, X0
	070 Compare X21, 0
	071 JumpIfEqual {244}
	072 Move X8, [X21+16]
	073 Compare X8, 0
	074 JumpIfEqual {244}
	075 Move W9, [X8+24]
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move W8, [X8+308]
	078 Move TEMP, X8
	079 And TEMP, TEMP, -2147483648
	080 Compare TEMP, -2147483648
	081 JumpIfNotEqual {90}
	082 Move X0, [X25]
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {87}
	086 Call 0x1C17DFC
	087 Move X0, X21
	088 Call BigInteger.op_UnaryNegation, X0
	089 Move X21, X0
	090 Move X0, [X25]
	091 Call 0x1C17F10
	092 Move X23, X0
	093 Call BigInteger..ctor, X0
	094 Compare X21, 0
	095 JumpIfEqual {244}
	096 Compare X23, 0
	097 JumpIfEqual {244}
	098 Move X8, [X23+16]
	099 Compare X8, 0
	100 JumpIfEqual {244}
	101 Move W9, [X21+24]
	102 Move W10, [X8+24]
	103 Move W9, W9
	104 ShiftRight W9, 31
	105 And W9, W9, 0x3FFFFFFF
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Add X8, X8, W9
	108 Move W10, 1
	109 Or W9, W9, 1
	110 Move [X8+32], W10
	111 Move [X23+24], W9
	112 Move X0, [X25]
	113 Move W8, [X0+224]
	114 Compare W8, 0
	115 JumpIfNotEqual {117}
	116 Call 0x1C17DFC
	117 Move X0, X23
	118 Move X1, X21
	119 Move [X31+8], W24
	120 Call BigInteger.op_Division, X0, X1
	121 Move X23, X0
	122 Move X0, X19
	123 Call BigInteger.bitCount, X0
	124 Move W8, [X19+24]
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Subtract W8, W0, 1
	127 Move X27, X31
	128 Move W29, W31
	129 Move [X31+4], W0
	130 Move [X31+12], W8
	131 Move W8, [X31+12]
	132 Move W26, W31
	133 Move W28, 1
	134 Subtract W24, W8, W29
	135 Add W29, W29, 32
	136 Move X8, [X19+16]
	137 Compare X8, 0
	138 JumpIfEqual {244}
	139 Move W9, [X8+24]
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Add X8, X8, X27
	142 Move W8, [X8+32]
	143 And W31, W8, W28
	144 Move X0, [X25]
	145 Move W8, [X0+224]
	146 Compare W8, 0
	147 JumpIfNotEqual {149}
	148 Call 0x1C17DFC
	149 Move X0, X20
	150 Move X1, X22
	151 Call BigInteger.op_Multiply, X0, X1
	152 Move X1, X0
	153 Move X2, X21
	154 Move X3, X23
	155 Call BigInteger.BarrettReduction, X0, X1, X2, X3
	156 Move X20, X0
	157 Move X0, [X25]
	158 Move W8, [X0+224]
	159 Compare W8, 0
	160 JumpIfNotEqual {162}
	161 Call 0x1C17DFC
	162 Move X0, X22
	163 Move X1, X22
	164 Call BigInteger.op_Multiply, X0, X1
	165 Move X1, X0
	166 Move X2, X21
	167 Move X3, X23
	168 Call BigInteger.BarrettReduction, X0, X1, X2, X3
	169 Compare X0, 0
	170 JumpIfEqual {244}
	171 Move W8, [X0+24]
	172 Move X22, X0
	173 NotImplemented "Instruction CMP not yet implemented."
	174 Move X8, [X22+16]
	175 Compare X8, 0
	176 JumpIfEqual {244}
	177 Move W9, [X8+24]
	178 Compare W9, 0
	179 JumpIfEqual {245}
	180 Move W8, [X8+32]
	181 NotImplemented "Instruction CMP not yet implemented."
	182 NotImplemented "Instruction CMP not yet implemented."
	183 Add W26, W26, 1
	184 NotImplemented "Instruction CMP not yet implemented."
	185 Move W28, W28
	186 ShiftRight W28, 31
	187 And W28, W28, 0x3FFFFFFF
	188 Move W29, [X31+4]
	189 NotImplemented "Instruction LDRSW not yet implemented."
	190 Add X27, X27, 1
	191 NotImplemented "Instruction CMP not yet implemented."
	192 Move W8, [X31+8]
	193 Move TEMP, X8
	194 And TEMP, TEMP, -2147483648
	195 Compare TEMP, -2147483648
	196 JumpIfNotEqual {208}
	197 Move X8, [X19+16]
	198 Compare X8, 0
	199 JumpIfEqual {244}
	200 Move W9, [X8+24]
	201 Compare W9, 0
	202 JumpIfEqual {245}
	203 Move W8, [X8+32]
	204 Move TEMP, X8
	205 And TEMP, TEMP, 1
	206 Compare TEMP, 1
	207 JumpIfEqual {223}
	208 Move X0, X20
	209 Move X20, [X31+96]
	210 Move X19, [X31+104]
	211 Move X22, [X31+80]
	212 Move X21, [X31+88]
	213 Move X24, [X31+64]
	214 Move X23, [X31+72]
	215 Move X26, [X31+48]
	216 Move X25, [X31+56]
	217 Move X28, [X31+32]
	218 Move X27, [X31+40]
	219 Move X29, [X31+16]
	220 Move X30, [X31+24]
	221 Add X31, X31, 112
	222 Return X0
	223 Move X0, [X25]
	224 Move W8, [X0+224]
	225 Compare W8, 0
	226 JumpIfNotEqual {228}
	227 Call 0x1C17DFC
	228 Move X0, X20
	229 Move X20, [X31+96]
	230 Move X19, [X31+104]
	231 Move X22, [X31+80]
	232 Move X21, [X31+88]
	233 Move X24, [X31+64]
	234 Move X23, [X31+72]
	235 Move X26, [X31+48]
	236 Move X25, [X31+56]
	237 Move X28, [X31+32]
	238 Move X27, [X31+40]
	239 Move X29, [X31+16]
	240 Move X30, [X31+24]
	241 Add X31, X31, 112
	242 Call BigInteger.op_UnaryNegation, X0
	243 Return X0
	244 Call 0x1C17F20
	245 Call 0x1C17F28
	246 Move X0, 0xBF2000
	247 Move X0, [X0+1376]
	248 Call 0x1C17D08
	249 Call 0x1C17F10
	250 Move X19, X0
	251 Move X0, 0xC05000
	252 Move X0, [X0+2592]
	253 Call 0x1C17D08
	254 Move X1, X0
	255 Move X0, X19
	256 Move X2, X31
	257 Call ArithmeticException..ctor, X0, X1
	258 Move X0, 0xC05000
	259 Move X0, [X0+2600]
	260 Call 0x1C17D08
	261 Move X1, X0
	262 Move X0, X19
	263 Call 0x1C17DEC

Method: Photon.SocketServer.Numeric.BigInteger BarrettReduction(Photon.SocketServer.Numeric.BigInteger x, Photon.SocketServer.Numeric.BigInteger n, Photon.SocketServer.Numeric.BigInteger constant)

Disassembly:
	0x03530A7C MOV W26, W31
	0x03530A80 SCVTF D8, W25
	0x03530A84 MOVZ X28, 0x7FF00000
	0x03530A88 MOVZ W29, 0x80000000
	0x03530A8C LDR X8, [X24]
	0x03530A90 MOV X0, X24
	0x03530A94 LDP X9, X1, [X8 + 0x1B8]
	0x03530A98 BLR X9
	0x03530A9C FMUL D0, D0, D8
	0x03530AA0 FMOV D1, X28
	0x03530AA4 FCVTZS W8, D0
	0x03530AA8 FCMP D0, D1
	0x03530AAC CSEL W1, W29, W8, EQ
	0x03530AB0 CMP W1, 0x2
	0x03530AB4 B.LT 0x3530A8C
	0x03530AB8 CBZ X21, 0x3530BFC
	0x03530ABC MOV X0, X21
	0x03530AC0 MOV X2, X24
	0x03530AC4 BL 0x35300F8
	0x03530AC8 LDR W8, [X21 + 0x18]
	0x03530ACC CMP W8, 0x1
	0x03530AD0 B.GT 0x3530AF4
	0x03530AD4 B.NE 0x3530A8C
	0x03530AD8 LDR X8, [X21 + 0x10]
	0x03530ADC CBZ X8, 0x3530BFC
	0x03530AE0 LDR W9, [X8 + 0x18]
	0x03530AE4 CBZ W9, 0x3530C00
	0x03530AE8 LDR W8, [X8 + 0x20]
	0x03530AEC CMP W8, 0x1
	0x03530AF0 B.EQ 0x3530A8C
	0x03530AF4 MOV X0, X21
	0x03530AF8 MOV X1, X20
	0x03530AFC BL 0x352FF28
	0x03530B00 CBZ X0, 0x3530BFC
	0x03530B04 LDR W8, [X0 + 0x18]
	0x03530B08 CMP W8, 0x1
	0x03530B0C B.NE 0x3530B2C
	0x03530B10 LDR X8, [X0 + 0x10]
	0x03530B14 CBZ X8, 0x3530BFC
	0x03530B18 LDR W9, [X8 + 0x18]
	0x03530B1C CBZ W9, 0x3530C00
	0x03530B20 LDR W8, [X8 + 0x20]
	0x03530B24 CMP W8, 0x1
	0x03530B28 B.NE 0x35309E8
	0x03530B2C MOV X0, X21
	0x03530B30 MOV X1, X23
	0x03530B34 MOV X2, X20
	0x03530B38 BL 0x352F678
	0x03530B3C LDR X8, [X27]
	0x03530B40 MOV X25, X0
	0x03530B44 LDR W9, [X8 + 0xE0]
	0x03530B48 CBNZ W9, 0x3530B54
	0x03530B4C MOV X0, X8
	0x03530B50 BL 0x1C16DFC
	0x03530B54 CBZ X25, 0x3530BFC
	0x03530B58 LDR X8, [X25]
	0x03530B5C MOV X0, X25
	0x03530B60 MOV X1, X22
	0x03530B64 LDP X9, X2, [X8 + 0x138]
	0x03530B68 BLR X9
	0x03530B6C TBZ X0, 0x0, 0x3530B8C
	0x03530B70 LDR X0, [X27]
	0x03530B74 LDR W8, [X0 + 0xE0]
	0x03530B78 CBNZ W8, 0x3530B80
	0x03530B7C BL 0x1C16DFC
	0x03530B80 MOVN W0, 0x0
	0x03530B84 BL 0x352C1F8
	0x03530B88 MOV X25, X0
	0x03530B8C LDR X0, [X27]
	0x03530B90 LDR W8, [X0 + 0xE0]
	0x03530B94 CBNZ W8, 0x3530B9C
	0x03530B98 BL 0x1C16DFC
	0x03530B9C MOV X0, X21
	0x03530BA0 MOV X1, X20
	0x03530BA4 BL 0x3530C04
	0x03530BA8 BL 0x352C1F8
	0x03530BAC CBZ X25, 0x3530BFC
	0x03530BB0 LDR X8, [X25]
	0x03530BB4 MOV X1, X0
	0x03530BB8 MOV X0, X25
	0x03530BBC LDP X9, X2, [X8 + 0x138]
	0x03530BC0 BLR X9
	0x03530BC4 TBZ X0, 0x0, 0x35309E8
	0x03530BC8 ADD W26, W26, 0x1
	0x03530BCC CMP W26, W19
	0x03530BD0 B.NE 0x3530A8C
	0x03530BD4 MOVZ W26, 0x1
	0x03530BD8 MOV W0, W26
	0x03530BDC LDP X20, X19, [X31 + 0x60]
	0x03530BE0 LDP X22, X21, [X31 + 0x50]
	0x03530BE4 LDP X24, X23, [X31 + 0x40]
	0x03530BE8 LDP X26, X25, [X31 + 0x30]
	0x03530BEC LDP X28, X27, [X31 + 0x20]
	0x03530BF0 LDP X29, X30, [X31 + 0x10]
	0x03530BF4 LDR V8, [X31], #0x70
	0x03530BF8 RET
	0x03530BFC BL 0x1C16F20
	0x03530C00 BL 0x1C16F28
	0x03530C04 STP X30, X27, [X31 - 0x50]!
	0x03530C08 STP X26, X25, [X31 + 0x10]
	0x03530C0C STP X24, X23, [X31 + 0x20]
	0x03530C10 STP X22, X21, [X31 + 0x30]
	0x03530C14 STP X20, X19, [X31 + 0x40]
	0x03530C18 ADRP X20, 0xC04000
	0x03530C1C LDR X20, [X20 + 0x980]
	0x03530C20 MOV X19, X1
	0x03530C24 MOV X21, X0
	0x03530C28 MOVZ W25, 0x1
	0x03530C2C ADRP X26, 0xEAF000
	0x03530C30 MOVZ W27, 0x3
	0x03530C34 MOVZ W24, 0x1
	0x03530C38 LDRB W8, [X26 + 0xBB0]
	0x03530C3C TBNZ X8, 0x0, 0x3530C4C
	0x03530C40 MOV X0, X20
	0x03530C44 BL 0x1C16CF4
	0x03530C48 STRB W25, [X26 + 0xBB0]
	0x03530C4C CBZ X19, 0x3530EF8
	0x03530C50 LDR X8, [X19 + 0x10]
	0x03530C54 CBZ X8, 0x3530EF8
	0x03530C58 LDR W9, [X8 + 0x18]
	0x03530C5C CBZ W9, 0x3530EF4
	0x03530C60 LDRB W8, [X8 + 0x20]
	0x03530C64 TBZ X8, 0x0, 0x3530EFC
	0x03530C68 LDR X0, [X20]
	0x03530C6C LDR W8, [X0 + 0xE0]
	0x03530C70 CBNZ W8, 0x3530C78
	0x03530C74 BL 0x1C16DFC
	0x03530C78 MOV X0, X21
	0x03530C7C MOV X1, X19
	0x03530C80 BL 0x352DF5C
	0x03530C84 TBZ X0, 0x0, 0x3530CA8
	0x03530C88 LDR X0, [X20]
	0x03530C8C LDR W8, [X0 + 0xE0]
	0x03530C90 CBNZ W8, 0x3530C98
	0x03530C94 BL 0x1C16DFC
	0x03530C98 MOV X0, X21
	0x03530C9C MOV X1, X19
	0x03530CA0 BL 0x352EB38
	0x03530CA4 MOV X21, X0
	0x03530CA8 CBZ X21, 0x3530EF8
	0x03530CAC LDR W8, [X21 + 0x18]
	0x03530CB0 CMP W8, 0x1
	0x03530CB4 B.NE 0x3530CD4
	0x03530CB8 LDR X8, [X21 + 0x10]
	0x03530CBC CBZ X8, 0x3530EF8
	0x03530CC0 LDR W9, [X8 + 0x18]
	0x03530CC4 CBZ W9, 0x3530EF4
	0x03530CC8 LDR W23, [X8 + 0x20]
	0x03530CCC CMP W23, 0x2
	0x03530CD0 B.CC 0x3530ED8
	0x03530CD4 LDR X0, [X20]
	0x03530CD8 LDR W8, [X0 + 0xE0]
	0x03530CDC CBNZ W8, 0x3530CE4
	0x03530CE0 BL 0x1C16DFC
	0x03530CE4 MOV W0, W31
	0x03530CE8 BL 0x352C1F8
	0x03530CEC MOV X1, X0
	0x03530CF0 MOV X0, X21
	0x03530CF4 BL 0x352DE90
	0x03530CF8 TBNZ X0, 0x0, 0x3530E6C
	0x03530CFC LDR W8, [X21 + 0x18]
	0x03530D00 CMP W8, 0x1
	0x03530D04 B.LT 0x3530D74
	0x03530D08 LDR X9, [X21 + 0x10]
	0x03530D0C CBZ X9, 0x3530EF8
	0x03530D10 LDR W10, [X9 + 0x18]
	0x03530D14 MOV W12, W31
	0x03530D18 MOV W11, W31
	0x03530D1C ADD X14, X9, W11, 0x2, SXTW
	0x03530D20 MOV W13, W31
	0x03530D24 ADD W23, W12, 0x20
	0x03530D28 ADD X14, X14, 0x20
	0x03530D2C MOVZ W15, 0x1
	0x03530D30 CMP W11, W10
	0x03530D34 B.CS 0x3530EF4
	0x03530D38 LDR W16, [X14]
	0x03530D3C ANDS W31, W16, W15, 0x0
	0x03530D40 B.NE 0x3530D58
	0x03530D44 ADD W13, W13, 0x1
	0x03530D48 CMP W13, 0x20
	0x03530D4C UBFM W15, W15, 0x1F, 0x1E
	0x03530D50 B.NE 0x3530D30
	0x03530D54 B 0x3530D60
	0x03530D58 ADD W23, W12, W13
	0x03530D5C MOV W11, W8
	0x03530D60 ADD W11, W11, 0x1
	0x03530D64 CMP W11, W8
	0x03530D68 MOV W12, W23
	0x03530D6C B.LT 0x3530D1C
	0x03530D70 B 0x3530D78
	0x03530D74 MOV W23, W31
	0x03530D78 LDR X0, [X20]
	0x03530D7C LDR W8, [X0 + 0xE0]
	0x03530D80 CBNZ W8, 0x3530D88
	0x03530D84 BL 0x1C16DFC
	0x03530D88 MOV X0, X21
	0x03530D8C MOV W1, W23
	0x03530D90 BL 0x352D904
	0x03530D94 LDR X8, [X19 + 0x10]
	0x03530D98 MOV X22, X0
	0x03530D9C TBNZ X23, 0x0, 0x3530DA8
	0x03530DA0 CBNZ X8, 0x3530DD4
	0x03530DA4 B 0x3530EF8
	0x03530DA8 CBZ X8, 0x3530EF8
	0x03530DAC LDR W9, [X8 + 0x18]
	0x03530DB0 CBZ W9, 0x3530EF4
	0x03530DB4 LDR W9, [X8 + 0x20]
	0x03530DB8 AND W9, W9, 0x7
	0x03530DBC CMP W9, 0x5
	0x03530DC0 B.EQ 0x3530DCC
	0x03530DC4 CMP W9, 0x3
	0x03530DC8 B.NE 0x3530DD4
	0x03530DCC MOVN W23, 0x0
	0x03530DD0 B 0x3530DD8
	0x03530DD4 MOVZ W23, 0x1
	0x03530DD8 LDR W9, [X8 + 0x18]
	0x03530DDC CBZ W9, 0x3530EF4
	0x03530DE0 LDR W8, [X8 + 0x20]
	0x03530DE4 ORN W8, W31, W8, 0x0
	0x03530DE8 ANDS W31, W8, 0x3
	0x03530DEC B.NE 0x3530E14
	0x03530DF0 CBZ X22, 0x3530EF8
	0x03530DF4 LDR X8, [X22 + 0x10]
	0x03530DF8 CBZ X8, 0x3530EF8
	0x03530DFC LDR W9, [X8 + 0x18]
	0x03530E00 CBZ W9, 0x3530EF4
	0x03530E04 LDR W8, [X8 + 0x20]
	0x03530E08 BICS W31, W27, W8, 0x0
	0x03530E0C CSNEG W23, W23, W23, NE
	0x03530E10 B 0x3530E18
	0x03530E14 CBZ X22, 0x3530EF8
	0x03530E18 LDR W8, [X22 + 0x18]
	0x03530E1C CMP W8, 0x1
	0x03530E20 B.NE 0x3530E40
	0x03530E24 LDR X8, [X22 + 0x10]
	0x03530E28 CBZ X8, 0x3530EF8
	0x03530E2C LDR W9, [X8 + 0x18]
	0x03530E30 CBZ W9, 0x3530EF4
	0x03530E34 LDR W8, [X8 + 0x20]
	0x03530E38 CMP W8, 0x1
	0x03530E3C B.EQ 0x3530ED8
	0x03530E40 LDR X0, [X20]
	0x03530E44 LDR W8, [X0 + 0xE0]
	0x03530E48 CBNZ W8, 0x3530E50
	0x03530E4C BL 0x1C16DFC
	0x03530E50 MOV X0, X19
	0x03530E54 MOV X1, X22
	0x03530E58 BL 0x352EB38
	0x03530E5C MOV X21, X0
	0x03530E60 MUL W24, W23, W24
	0x03530E64 MOV X19, X22
	0x03530E68 B 0x3530C38
	0x03530E6C LDR X0, [X20]
	0x03530E70 LDR W8, [X0 + 0xE0]
	0x03530E74 CBNZ W8, 0x3530E7C
	0x03530E78 BL 0x1C16DFC
	0x03530E7C MOVZ W0, 0x1
	0x03530E80 BL 0x352C1F8
	0x03530E84 MOV X1, X0
	0x03530E88 MOV X0, X19
	0x03530E8C BL 0x352D228
	0x03530E90 CBZ X0, 0x3530EF8
	0x03530E94 LDR X8, [X0 + 0x10]
	0x03530E98 CBZ X8, 0x3530EF8
	0x03530E9C LDR W9, [X8 + 0x18]
	0x03530EA0 CBZ W9, 0x3530EF4
	0x03530EA4 LDR X0, [X20]
	0x03530EA8 LDR W20, [X8 + 0x20]
	0x03530EAC LDR W9, [X0 + 0xE0]
	0x03530EB0 CBNZ W9, 0x3530EB8
	0x03530EB4 BL 0x1C16DFC
	0x03530EB8 MOV X0, X21
	0x03530EBC BL 0x352D5D0
	0x03530EC0 MOV X1, X19
	0x03530EC4 BL 0x3530C04
	0x03530EC8 ANDS W31, W20, 0x2
	0x03530ECC CSNEG W8, W0, W0, EQ
	0x03530ED0 MUL W0, W8, W24
	0x03530ED4 B 0x3530EDC
	0x03530ED8 MUL W0, W23, W24
	0x03530EDC LDP X20, X19, [X31 + 0x40]
	0x03530EE0 LDP X22, X21, [X31 + 0x30]
	0x03530EE4 LDP X24, X23, [X31 + 0x20]
	0x03530EE8 LDP X26, X25, [X31 + 0x10]
	0x03530EEC LDP X30, X27, [X31], #0x50
	0x03530EF0 RET
	0x03530EF4 BL 0x1C16F28
	0x03530EF8 BL 0x1C16F20
	0x03530EFC ADRP X0, 0xBCB000
	0x03530F00 LDR X0, [X0 + 0x578]
	0x03530F04 BL 0x1C16D08
	0x03530F08 BL 0x1C16F10
	0x03530F0C MOV X19, X0
	0x03530F10 ADRP X0, 0xC04000
	0x03530F14 LDR X0, [X0 + 0xA40]
	0x03530F18 BL 0x1C16D08
	0x03530F1C MOV X1, X0
	0x03530F20 MOV X0, X19
	0x03530F24 MOV X2, X31

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0xEB0000
	010 Move W8, [X21+2982]
	011 Move X20, X3
	012 Move X19, X2
	013 Move X22, X1
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xC05000
	019 Move X0, [X0+2432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+2982], W8
	023 Compare X19, 0
	024 JumpIfEqual {291}
	025 Move X23, 0xC05000
	026 Move X23, [X23+2432]
	027 Move W24, [X19+24]
	028 Move X0, [X23]
	029 Call 0x1C17F10
	030 Move X21, X0
	031 Call BigInteger..ctor, X0
	032 Compare X22, 0
	033 JumpIfEqual {291}
	034 Move W12, [X22+24]
	035 Subtract W8, W24, 1
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction SBFM not yet implemented."
	038 Move X9, X31
	039 Move W10, W8
	040 Add X11, X11, 32
	041 Compare X21, 0
	042 JumpIfEqual {291}
	043 Move X12, [X22+16]
	044 Compare X12, 0
	045 JumpIfEqual {291}
	046 Move W13, [X12+24]
	047 Add X14, X10, X9
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move X13, [X21+16]
	050 Compare X13, 0
	051 JumpIfEqual {291}
	052 Move W14, [X13+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Add X12, X12, X11
	055 Move W12, [X12]
	056 Add X13, X13, W9
	057 Add X9, X9, 1
	058 Move [X13+32], W12
	059 Move W12, [X22+24]
	060 Add W13, W10, W9
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Compare X21, 0
	063 JumpIfEqual {291}
	064 Subtract W8, W12, W8
	065 NotImplemented "Instruction CMP not yet implemented."
	066 NotImplemented "Instruction CSINC not yet implemented."
	067 Move [X21+24], W8
	068 Move X0, [X23]
	069 Move W8, [X0+224]
	070 Compare W8, 0
	071 JumpIfNotEqual {73}
	072 Call 0x1C17DFC
	073 Move X0, X21
	074 Move X1, X20
	075 Call BigInteger.op_Multiply, X0, X1
	076 Move X8, [X23]
	077 Move X21, X0
	078 Move X0, X8
	079 Call 0x1C17F10
	080 Move X20, X0
	081 Call BigInteger..ctor, X0
	082 Compare X21, 0
	083 JumpIfEqual {291}
	084 Move W11, [X21+24]
	085 Add W25, W24, 1
	086 NotImplemented "Instruction CMP not yet implemented."
	087 NotImplemented "Instruction SBFM not yet implemented."
	088 Move X8, X31
	089 Move W9, W25
	090 Add X10, X10, 32
	091 Compare X20, 0
	092 JumpIfEqual {291}
	093 Move X11, [X21+16]
	094 Compare X11, 0
	095 JumpIfEqual {291}
	096 Move W12, [X11+24]
	097 Add X13, X9, X8
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move X12, [X20+16]
	100 Compare X12, 0
	101 JumpIfEqual {291}
	102 Move W13, [X12+24]
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Add X11, X11, X10
	105 Move W11, [X11]
	106 Add X12, X12, W8
	107 Add X8, X8, 1
	108 Move [X12+32], W11
	109 Move W11, [X21+24]
	110 Add W12, W9, W8
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Compare X20, 0
	113 JumpIfEqual {291}
	114 Subtract W8, W11, W25
	115 NotImplemented "Instruction CMP not yet implemented."
	116 NotImplemented "Instruction CSINC not yet implemented."
	117 Move [X20+24], W8
	118 Move X0, [X23]
	119 Call 0x1C17F10
	120 Move X21, X0
	121 Call BigInteger..ctor, X0
	122 Move W8, [X22+24]
	123 NotImplemented "Instruction CMP not yet implemented."
	124 NotImplemented "Instruction CSEL not yet implemented."
	125 Compare X21, 0
	126 JumpIfEqual {291}
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move X10, [X21+16]
	129 Move X11, [X22+16]
	130 Move X9, X31
	131 Move X12, W8
	132 Add X13, X10, 32
	133 Add X14, X11, 32
	134 Compare X11, 0
	135 JumpIfEqual {291}
	136 Move W15, [X11+24]
	137 NotImplemented "Instruction CMP not yet implemented."
	138 Compare X10, 0
	139 JumpIfEqual {291}
	140 Move W15, [X10+24]
	141 NotImplemented "Instruction CMP not yet implemented."
	142 Move W15, [X14]
	143 Move [X13], W15
	144 Add X9, X9, 1
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Move [X21+24], W8
	147 Move X0, [X23]
	148 Call 0x1C17F10
	149 Move X22, X0
	150 Call BigInteger..ctor, X0
	151 Move W8, [X20+24]
	152 NotImplemented "Instruction CMP not yet implemented."
	153 Move X8, [X20+16]
	154 Compare X8, 0
	155 JumpIfEqual {291}
	156 Move W10, [X8+24]
	157 Move W11, W25
	158 Move X9, X31
	159 Move X11, W11
	160 Move W12, 32
	161 NotImplemented "Instruction CMP not yet implemented."
	162 Add X14, X8, X9
	163 Add X14, X14, 32
	164 Move W16, [X14]
	165 Compare W16, 0
	166 JumpIfEqual {221}
	167 NotImplemented "Instruction CMP not yet implemented."
	168 Move W13, [X19+24]
	169 NotImplemented "Instruction CMP not yet implemented."
	170 Move X0, [X19+16]
	171 Compare X0, 0
	172 JumpIfEqual {291}
	173 Move W15, [X0+24]
	174 Compare X15, 0
	175 JumpIfEqual {292}
	176 Move X13, X31
	177 Move X17, X31
	178 Add X0, X0, 32
	179 Compare X22, 0
	180 JumpIfEqual {291}
	181 Move X1, [X22+16]
	182 Compare X1, 0
	183 JumpIfEqual {291}
	184 Move W2, [X1+24]
	185 Add X3, X9, X17
	186 NotImplemented "Instruction CMP not yet implemented."
	187 Move W2, [X0]
	188 Add X1, X1, X12
	189 Move W4, [X1]
	190 Move W3, W16
	191 Add X16, X9, X17
	192 NotImplemented "Instruction MADD not yet implemented."
	193 Add X16, X16, 1
	194 Add X13, X13, X4
	195 NotImplemented "Instruction CMP not yet implemented."
	196 Move [X1], W13
	197 Move X13, X13
	198 ShiftRight X13, 32
	199 And X13, X13, 0x7FFFFFFF
	200 NotImplemented "Instruction LDRSW not yet implemented."
	201 Add X17, X17, 1
	202 NotImplemented "Instruction CMP not yet implemented."
	203 Move W16, [X14]
	204 NotImplemented "Instruction CMP not yet implemented."
	205 NotImplemented "Instruction CMP not yet implemented."
	206 Compare X22, 0
	207 JumpIfEqual {291}
	208 Move X13, X31
	209 Move X16, X9
	210 NotImplemented "Instruction CMP not yet implemented."
	211 Move X14, [X22+16]
	212 Compare X14, 0
	213 JumpIfEqual {291}
	214 Move W15, [X14+24]
	215 NotImplemented "Instruction CMP not yet implemented."
	216 Move X15, X16
	217 ShiftRight X15, 32
	218 And X15, X15, 0x7FFFFFFF
	219 Add X14, X14, X15
	220 Move [X14+32], W13
	221 NotImplemented "Instruction LDRSW not yet implemented."
	222 Add X9, X9, 1
	223 Add X12, X12, 4
	224 NotImplemented "Instruction CMP not yet implemented."
	225 Compare X22, 0
	226 JumpIfEqual {291}
	227 NotImplemented "Instruction CMP not yet implemented."
	228 Move [X22+24], W25
	229 Move X9, [X22+16]
	230 Compare X9, 0
	231 JumpIfEqual {291}
	232 Move W8, [X9+24]
	233 Move W11, W25
	234 Add X9, X9, 28
	235 Move W10, W24
	236 Subtract X12, X11, 1
	237 NotImplemented "Instruction CMP not yet implemented."
	238 Move W11, [X9]
	239 Compare W11, 0
	240 JumpIfNotEqual {246}
	241 Add X11, X12, 1
	242 Move [X22+24], W10
	243 NotImplemented "Instruction CMP not yet implemented."
	244 Subtract W10, W10, 1
	245 Move X11, X12
	246 Move X0, [X23]
	247 Move W8, [X0+224]
	248 Compare W8, 0
	249 JumpIfNotEqual {251}
	250 Call 0x1C17DFC
	251 Move X0, X21
	252 Move X1, X22
	253 Call BigInteger.op_Subtraction, X0, X1
	254 Compare X0, 0
	255 JumpIfEqual {291}
	256 Move X8, [X0+16]
	257 Move X20, X0
	258 Compare X8, 0
	259 JumpIfEqual {291}
	260 Move W9, [X8+24]
	261 NotImplemented "Instruction CMP not yet implemented."
	262 Move W8, [X8+308]
	263 Move TEMP, X8
	264 And TEMP, TEMP, -2147483648
	265 Compare TEMP, -2147483648
	266 JumpIfNotEqual {302}
	267 Move X0, [X23]
	268 Call 0x1C17F10
	269 Move X21, X0
	270 Call BigInteger..ctor, X0
	271 Compare X21, 0
	272 JumpIfEqual {291}
	273 Move X8, [X21+16]
	274 Compare X8, 0
	275 JumpIfEqual {291}
	276 Move W9, [X8+24]
	277 NotImplemented "Instruction CMP not yet implemented."
	278 Add X8, X8, W25
	279 Move W9, 1
	280 Add W10, W24, 2
	281 Move [X8+32], W9
	282 Move [X21+24], W10
	283 Move X0, [X23]
	284 Move W8, [X0+224]
	285 Compare W8, 0
	286 JumpIfNotEqual {288}
	287 Call 0x1C17DFC
	288 Move X0, X20
	289 Move X1, X21
	290 Call BigInteger.op_Addition, X0, X1
	291 Call 0x1C17F20
	292 Call 0x1C17F28
	293 Move X0, [X23]
	294 Move W8, [X0+224]
	295 Compare W8, 0
	296 JumpIfNotEqual {298}
	297 Call 0x1C17DFC
	298 Move X0, X20
	299 Move X1, X19
	300 Call BigInteger.op_Subtraction, X0, X1
	301 Move X20, X0
	302 Move X0, [X23]
	303 Move W8, [X0+224]
	304 Compare W8, 0
	305 JumpIfNotEqual {307}
	306 Call 0x1C17DFC
	307 Move X0, X20
	308 Move X1, X19
	309 Call BigInteger.op_GreaterThanOrEqual, X0, X1
	310 Move TEMP, X0
	311 And TEMP, TEMP, 1
	312 Compare TEMP, 1
	313 JumpIfEqual {293}
	314 Move X0, X20
	315 Move X20, [X31+48]
	316 Move X19, [X31+56]
	317 Move X22, [X31+32]
	318 Move X21, [X31+40]
	319 Move X24, [X31+16]
	320 Move X23, [X31+24]
	321 Move X30, [X31+64]
	322 Move X25, [X31+72]
	323 Return X0

Method: Photon.SocketServer.Numeric.BigInteger gcd(Photon.SocketServer.Numeric.BigInteger bi)

Disassembly:
	0x03530F28 BL 0x3314A68
	0x03530F2C ADRP X0, 0xC04000
	0x03530F30 LDR X0, [X0 + 0xA48]
	0x03530F34 BL 0x1C16D08
	0x03530F38 MOV X1, X0
	0x03530F3C MOV X0, X19
	0x03530F40 BL 0x1C16DEC
	0x03530F44 STR X30, [X31 - 0x20]!
	0x03530F48 STP X20, X19, [X31 + 0x10]
	0x03530F4C ADRP X20, 0xEAF000
	0x03530F50 LDRB W8, [X20 + 0xBAC]
	0x03530F54 MOV X19, X0
	0x03530F58 TBNZ X8, 0x0, 0x3530F70
	0x03530F5C ADRP X0, 0xC04000
	0x03530F60 LDR X0, [X0 + 0x980]
	0x03530F64 BL 0x1C16CF4
	0x03530F68 MOVZ W8, 0x1
	0x03530F6C STRB W8, [X20 + 0xBAC]
	0x03530F70 LDR X8, [X19 + 0x10]
	0x03530F74 CBZ X8, 0x3531024
	0x03530F78 LDR W9, [X8 + 0x18]
	0x03530F7C CMP W9, 0x45
	0x03530F80 B.LS 0x3531028
	0x03530F84 LDR W8, [X8 + 0x134]
	0x03530F88 TBZ X8, 0x1F, 0x3530FB4
	0x03530F8C ADRP X8, 0xC04000
	0x03530F90 LDR X8, [X8 + 0x980]
	0x03530F94 LDR X0, [X8]
	0x03530F98 LDR W8, [X0 + 0xE0]
	0x03530F9C CBNZ W8, 0x3530FA4
	0x03530FA0 BL 0x1C16DFC
	0x03530FA4 MOV X0, X19
	0x03530FA8 BL 0x352D5D0
	0x03530FAC MOV X19, X0
	0x03530FB0 CBZ X0, 0x3531024
	0x03530FB4 LDR W9, [X19 + 0x18]
	0x03530FB8 LDR X8, [X19 + 0x10]
	0x03530FBC CMP W9, 0x1
	0x03530FC0 B.NE 0x3530FF0
	0x03530FC4 CBZ X8, 0x3531024
	0x03530FC8 LDR W9, [X8 + 0x18]
	0x03530FCC CBZ W9, 0x3531028
	0x03530FD0 LDR W9, [X8 + 0x20]
	0x03530FD4 CMP W9, 0x4
	0x03530FD8 B.CS 0x3530FF4
	0x03530FDC AND X8, X9, 0xF
	0x03530FE0 MOVZ W9, 0xC
	0x03530FE4 LSRV W8, W9, W8
	0x03530FE8 AND W0, W8, 0x1
	0x03530FEC B 0x3531008
	0x03530FF0 CBZ X8, 0x3531024
	0x03530FF4 LDR W9, [X8 + 0x18]
	0x03530FF8 CBZ W9, 0x3531028
	0x03530FFC LDRB W8, [X8 + 0x20]
	0x03531000 TBNZ X8, 0x0, 0x3531014
	0x03531004 MOV W0, W31
	0x03531008 LDP X20, X19, [X31 + 0x10]
	0x0353100C LDR X30, [X31], #0x20
	0x03531010 RET
	0x03531014 MOV X1, X19
	0x03531018 LDP X20, X19, [X31 + 0x10]
	0x0353101C LDR X30, [X31], #0x20
	0x03531020 B 0x353102C
	0x03531024 BL 0x1C16F20
	0x03531028 BL 0x1C16F28
	0x0353102C STR X30, [X31 - 0x50]!
	0x03531030 STP X26, X25, [X31 + 0x10]
	0x03531034 STP X24, X23, [X31 + 0x20]
	0x03531038 STP X22, X21, [X31 + 0x30]
	0x0353103C STP X20, X19, [X31 + 0x40]
	0x03531040 ADRP X20, 0xEAE000
	0x03531044 LDRB W8, [X20 + 0xBAD]
	0x03531048 MOV X19, X1
	0x0353104C TBNZ X8, 0x0, 0x3531070
	0x03531050 ADRP X0, 0xC03000
	0x03531054 LDR X0, [X0 + 0x980]
	0x03531058 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xEB0000
	007 Move W8, [X21+2983]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xC05000
	015 Move X0, [X0+2432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2983], W8
	019 Move X8, [X20+16]
	020 Compare X8, 0
	021 JumpIfEqual {89}
	022 Move W9, [X8+24]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move W8, [X8+308]
	025 Move TEMP, X8
	026 And TEMP, TEMP, -2147483648
	027 Compare TEMP, -2147483648
	028 JumpIfNotEqual {39}
	029 Move X8, 0xC05000
	030 Move X8, [X8+2432]
	031 Move X0, [X8]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X20
	037 Call BigInteger.op_UnaryNegation, X0
	038 Move X20, X0
	039 Compare X19, 0
	040 JumpIfEqual {89}
	041 Move X8, [X19+16]
	042 Compare X8, 0
	043 JumpIfEqual {89}
	044 Move W9, [X8+24]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move W8, [X8+308]
	047 Move TEMP, X8
	048 And TEMP, TEMP, -2147483648
	049 Compare TEMP, -2147483648
	050 JumpIfNotEqual {61}
	051 Move X8, 0xC05000
	052 Move X8, [X8+2432]
	053 Move X0, [X8]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move X0, X19
	059 Call BigInteger.op_UnaryNegation, X0
	060 Move X19, X0
	061 Compare X20, 0
	062 JumpIfEqual {89}
	063 Move X22, 0xC05000
	064 Move X22, [X22+2432]
	065 Move W8, [X20+24]
	066 Move X21, X19
	067 Move X19, X20
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move X8, [X19+16]
	070 Compare X8, 0
	071 JumpIfEqual {89}
	072 Move W9, [X8+24]
	073 Compare W9, 0
	074 JumpIfEqual {97}
	075 Move W8, [X8+32]
	076 Compare W8, 0
	077 JumpIfEqual {90}
	078 Move X0, [X22]
	079 Move W8, [X0+224]
	080 Compare W8, 0
	081 JumpIfNotEqual {83}
	082 Call 0x1C17DFC
	083 Move X0, X21
	084 Move X1, X19
	085 Call BigInteger.op_Modulus, X0, X1
	086 Move X20, X0
	087 Compare X0, 0
	088 JumpIfNotEqual {65}
	089 Call 0x1C17F20
	090 Move X0, X21
	091 Move X20, [X31+32]
	092 Move X19, [X31+40]
	093 Move X22, [X31+16]
	094 Move X21, [X31+24]
	095 Move X30, [X31+48]
	096 Return X0
	097 Call 0x1C17F28

Method: Photon.SocketServer.Numeric.BigInteger GenerateRandom(System.Int32 bits)

Disassembly:
	0x0353105C ADRP X0, 0xBC2000
	0x03531060 LDR X0, [X0 + 0x5A8]
	0x03531064 BL 0x1C16CF4
	0x03531068 MOVZ W8, 0x1
	0x0353106C STRB W8, [X20 + 0xBAD]
	0x03531070 ADRP X25, 0xC03000
	0x03531074 ADRP X22, 0xBC2000
	0x03531078 LDR X25, [X25 + 0x980]
	0x0353107C LDR X22, [X22 + 0x5A8]
	0x03531080 MOVN X23, 0x0
	0x03531084 MOVZ W20, 0x5
	0x03531088 MOVZ W24, 0x14
	0x0353108C LDR X0, [X25]
	0x03531090 LDR W8, [X0 + 0xE0]
	0x03531094 CBNZ W8, 0x353109C
	0x03531098 BL 0x1C16DFC
	0x0353109C MOV X0, X20
	0x035310A0 BL 0x352CFA0
	0x035310A4 MOV X1, X19
	0x035310A8 BL 0x3530C04
	0x035310AC CBZ W0, 0x35310BC
	0x035310B0 ADDS W31, W0, 0x1
	0x035310B4 B.NE 0x35310F8
	0x035310B8 B 0x3531170
	0x035310BC LDR X0, [X22]
	0x035310C0 LDR W8, [X0 + 0xE0]
	0x035310C4 CBNZ W8, 0x35310CC
	0x035310C8 BL 0x1C16DFC
	0x035310CC LDR X0, [X25]
	0x035310D0 CMP X20, 0x0
	0x035310D4 CSNEG X21, X20, X20, PL
	0x035310D8 LDR W8, [X0 + 0xE0]
	0x035310DC CBNZ W8, 0x35310E4
	0x035310E0 BL 0x1C16DFC
	0x035310E4 MOV X0, X21
	0x035310E8 BL 0x352CFA0
	0x035310EC MOV X1, X19
	0x035310F0 BL 0x352DE90
	0x035310F4 TBNZ X0, 0x0, 0x353163C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xEAF000
	007 Move X22, 0xC04000
	008 Move X21, 0xBCA000
	009 Move W8, [X20+2984]
	010 Move X22, [X22+2432]
	011 Move X21, [X21+744]
	012 Move W19, W0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xC04000
	018 Move X0, [X0+2432]
	019 Call 0x1C17CF4
	020 Move X0, 0xBCA000
	021 Move X0, [X0+744]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2984], W8
	025 Move X0, [X22]
	026 Call 0x1C17F10
	027 Move X20, X0
	028 Call BigInteger..ctor, X0
	029 Move X0, [X21]
	030 Call 0x1C17F10
	031 Move X1, X31
	032 Move X21, X0
	033 Call Random..ctor, X0
	034 Compare X20, 0
	035 JumpIfEqual {47}
	036 Move X0, X20
	037 Move W1, W19
	038 Move X2, X21
	039 Call BigInteger.genRandomBits, X0, X1, X2
	040 Move X0, X20
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Return X0
	047 Call 0x1C17F20

Method: System.Void genRandomBits(System.Int32 bits, System.Random rand)

Disassembly:
	0x035310F8 CBNZ X24, 0x3531144
	0x035310FC CBZ X19, 0x3531660
	0x03531100 MOV X0, X19
	0x03531104 BL 0x3531688
	0x03531108 LDR X8, [X25]
	0x0353110C MOV X21, X0
	0x03531110 LDR W9, [X8 + 0xE0]
	0x03531114 CBNZ W9, 0x3531120
	0x03531118 MOV X0, X8
	0x0353111C BL 0x1C16DFC
	0x03531120 MOV X0, X21
	0x03531124 MOV X1, X21
	0x03531128 BL 0x352C250
	0x0353112C CBZ X0, 0x3531660
	0x03531130 LDR X8, [X0]
	0x03531134 MOV X1, X19
	0x03531138 LDP X9, X2, [X8 + 0x138]
	0x0353113C BLR X9
	0x03531140 TBNZ X0, 0x0, 0x353163C
	0x03531144 LDR X0, [X22]
	0x03531148 LDR W8, [X0 + 0xE0]
	0x0353114C CBNZ W8, 0x3531154
	0x03531150 BL 0x1C16DFC
	0x03531154 CMP X20, 0x0
	0x03531158 CSNEG X8, X20, X20, PL
	0x0353115C ADD X8, X8, 0x2
	0x03531160 MUL X20, X8, X23
	0x03531164 SUB X23, X31, X23
	0x03531168 SUB X24, X24, 0x1
	0x0353116C B 0x353108C
	0x03531170 LDR X0, [X25]
	0x03531174 LDR W8, [X0 + 0xE0]
	0x03531178 CBNZ W8, 0x3531180
	0x0353117C BL 0x1C16DFC
	0x03531180 MOVZ W0, 0x1
	0x03531184 BL 0x352C1F8
	0x03531188 MOV X1, X0
	0x0353118C MOV X0, X19
	0x03531190 BL 0x352C728
	0x03531194 CBZ X0, 0x3531660
	0x03531198 LDR W8, [X0 + 0x18]
	0x0353119C MOV X21, X0
	0x035311A0 CMP W8, 0x1
	0x035311A4 B.LT 0x3531214
	0x035311A8 LDR X9, [X21 + 0x10]
	0x035311AC MOV W10, W31
	0x035311B0 MOV W11, W31
	0x035311B4 CBZ X9, 0x3531660
	0x035311B8 LDR W13, [X9 + 0x18]
	0x035311BC ADD X14, X9, W10, 0x2, SXTW
	0x035311C0 MOV W12, W31
	0x035311C4 ADD X14, X14, 0x20
	0x035311C8 ADD W23, W11, 0x20
	0x035311CC MOVZ W15, 0x1
	0x035311D0 CMP W10, W13
	0x035311D4 B.CS 0x3531684
	0x035311D8 LDR W16, [X14]
	0x035311DC ANDS W31, W16, W15, 0x0
	0x035311E0 B.NE 0x35311F8
	0x035311E4 ADD W12, W12, 0x1
	0x035311E8 CMP W12, 0x20
	0x035311EC UBFM W15, W15, 0x1F, 0x1E
	0x035311F0 B.NE 0x35311D0
	0x035311F4 B 0x3531200
	0x035311F8 ADD W23, W11, W12
	0x035311FC MOV W10, W8
	0x03531200 ADD W10, W10, 0x1
	0x03531204 CMP W10, W8
	0x03531208 MOV W11, W23
	0x0353120C B.LT 0x35311B4
	0x03531210 B 0x3531218
	0x03531214 MOV W23, W31
	0x03531218 LDR X0, [X25]
	0x0353121C LDR W8, [X0 + 0xE0]
	0x03531220 CBNZ W8, 0x3531228
	0x03531224 BL 0x1C16DFC
	0x03531228 MOV X0, X21
	0x0353122C MOV W1, W23
	0x03531230 BL 0x352D904
	0x03531234 LDR X8, [X25]
	0x03531238 MOV X24, X0
	0x0353123C MOV X0, X8
	0x03531240 BL 0x1C16F10
	0x03531244 MOV X22, X0
	0x03531248 BL 0x352BB04
	0x0353124C CBZ X19, 0x3531660
	0x03531250 CBZ X22, 0x3531660
	0x03531254 LDR X8, [X22 + 0x10]
	0x03531258 CBZ X8, 0x3531660
	0x0353125C LDR W9, [X19 + 0x18]
	0x03531260 LDR W10, [X8 + 0x18]
	0x03531264 UBFM W9, W9, 0x1F, 0x1E
	0x03531268 CMP W9, W10
	0x0353126C B.CS 0x3531684
	0x03531270 MOVZ W10, 0x1
	0x03531274 ADD X8, X8, W9, 0x2, SXTW
	0x03531278 MOVZ W11, 0x1
	0x0353127C ORR W9, W9, 0x1
	0x03531280 SUB X10, X10, X20
	0x03531284 MOV X0, X22
	0x03531288 MOV X1, X19
	0x0353128C STR W11, [X8 + 0x20]
	0x03531290 SBFM X21, X10, 0x2, 0x3F
	0x03531294 STR W9, [X22 + 0x18]
	0x03531298 BL 0x352E988
	0x0353129C MOV X22, X0
	0x035312A0 MOVZ W0, 0x1
	0x035312A4 BL 0x352C1F8
	0x035312A8 MOV X20, X0
	0x035312AC MOV X0, X21
	0x035312B0 BL 0x352CFA0

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 NotImplemented "Instruction SBFM not yet implemented."
	012 And W23, W1, 31
	013 NotImplemented "Instruction CINC not yet implemented."
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Move W20, W1
	016 Move X19, X0
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X21, X2
	019 Compare X2, 0
	020 JumpIfEqual {102}
	021 Move X24, X31
	022 Move W25, W22
	023 Move X26, 0x41F00000
	024 Move X8, [X21]
	025 Move X27, [X19+16]
	026 Move X0, X21
	027 Move X9, [X8+440]
	028 Move X1, [X8+448]
	029 NotImplemented "Instruction BLR not yet implemented."
	030 Compare X27, 0
	031 JumpIfEqual {102}
	032 Move W8, [X27+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move D1, X26
	035 Multiply D0, D0, D1
	036 Add X8, X27, X24
	037 Add X24, X24, 1
	038 NotImplemented "Instruction FCVTZS not yet implemented."
	039 NotImplemented "Instruction FCVTZU not yet implemented."
	040 NotImplemented "Instruction FCMP not yet implemented."
	041 NotImplemented "Instruction CSEL not yet implemented."
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move [X8+32], W9
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X10, [X19+16]
	046 Compare X10, 0
	047 JumpIfEqual {102}
	048 Move W8, [X10+24]
	049 Move W9, W22
	050 Move X9, W9
	051 Add X10, X10, 32
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move [X10], W31
	054 Add X9, X9, 1
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Compare W23, 0
	057 JumpIfEqual {77}
	058 Move X8, [X19+16]
	059 Compare X8, 0
	060 JumpIfEqual {102}
	061 Move W10, [X8+24]
	062 Move X9, W22
	063 Subtract X9, X9, 1
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Add X8, X8, X9
	066 Move W9, [X8+32]
	067 Subtract W10, W20, 1
	068 Move W11, 1
	069 Subtract W12, W31, W20
	070 Move TEMP, 0
	071 Not TEMP
	072 Move W13, TEMP
	073 NotImplemented "Instruction LSLV not yet implemented."
	074 Or W9, W9, W10
	075 NotImplemented "Instruction LSRV not yet implemented."
	076 And W9, W9, W10
	077 Move X8, [X19+16]
	078 Compare X8, 0
	079 JumpIfEqual {102}
	080 Move W10, [X8+24]
	081 Move W9, W22
	082 Move X9, W9
	083 Subtract X9, X9, 1
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Add X8, X8, X9
	086 Move W9, [X8+32]
	087 Or W9, W9, 0x80000000
	088 Move [X8+32], W9
	089 Move [X19+24], W22
	090 Move X20, [X31+64]
	091 Move X19, [X31+72]
	092 Move X22, [X31+48]
	093 Move X21, [X31+56]
	094 Move X24, [X31+32]
	095 Move X23, [X31+40]
	096 Move X26, [X31+16]
	097 Move X25, [X31+24]
	098 Move X30, [X31+80]
	099 Move X27, [X31+88]
	100 Return 
	101 Call 0x1C17F28
	102 Call 0x1C17F20
	103 Move X0, 0xBF1000
	104 Move X0, [X0+1376]
	105 Call 0x1C17D08
	106 Call 0x1C17F10
	107 Move X19, X0
	108 Move X0, 0xC04000
	109 Move X0, [X0+2608]
	110 Call 0x1C17D08
	111 Move X1, X0
	112 Move X0, X19
	113 Move X2, X31
	114 Call ArithmeticException..ctor, X0, X1
	115 Move X0, 0xC04000
	116 Move X0, [X0+2616]
	117 Call 0x1C17D08
	118 Move X1, X0
	119 Move X0, X19
	120 Call 0x1C17DEC

Method: System.Int32 bitCount()

Disassembly:
	0x035309D0 B 0x3530BDC
	0x035309D4 CBZ X8, 0x3530BFC
	0x035309D8 LDR W9, [X8 + 0x18]
	0x035309DC CBZ W9, 0x3530C00
	0x035309E0 LDRB W8, [X8 + 0x20]
	0x035309E4 TBNZ X8, 0x0, 0x35309F0
	0x035309E8 MOV W26, W31
	0x035309EC B 0x3530BD8
	0x035309F0 MOV X0, X20
	0x035309F4 BL 0x352F9D0
	0x035309F8 ADRP X27, 0xC04000
	0x035309FC LDR X27, [X27 + 0x980]
	0x03530A00 MOV W25, W0
	0x03530A04 LDR X8, [X27]
	0x03530A08 MOV X0, X8
	0x03530A0C BL 0x1C16F10
	0x03530A10 MOV X21, X0
	0x03530A14 BL 0x352BB04
	0x03530A18 LDR X0, [X27]
	0x03530A1C LDR W8, [X0 + 0xE0]
	0x03530A20 CBNZ W8, 0x3530A28
	0x03530A24 BL 0x1C16DFC
	0x03530A28 MOVZ W0, 0x1
	0x03530A2C MOVZ W26, 0x1
	0x03530A30 BL 0x352C1F8
	0x03530A34 MOV X1, X0
	0x03530A38 MOV X0, X20
	0x03530A3C BL 0x352D228
	0x03530A40 MOVZ W1, 0x1
	0x03530A44 MOV X22, X0
	0x03530A48 BL 0x352D904
	0x03530A4C ADRP X8, 0xBCA000
	0x03530A50 LDR X8, [X8 + 0x2E8]
	0x03530A54 MOV X23, X0
	0x03530A58 LDR X8, [X8]
	0x03530A5C MOV X0, X8
	0x03530A60 BL 0x1C16F10
	0x03530A64 MOV X1, X31
	0x03530A68 MOV X24, X0
	0x03530A6C BL 0x338E3CC
	0x03530A70 CMP W19, 0x1
	0x03530A74 B.LT 0x3530BD8
	0x03530A78 CBZ X24, 0x3530BFC

ISIL:
	001 Move [X31-16], X30
	002 Move W9, [X0+24]
	003 Move X8, [X0+16]
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Compare X8, 0
	006 JumpIfNotEqual {22}
	007 Compare X8, 0
	008 JumpIfEqual {45}
	009 Move W10, [X8+24]
	010 Add X11, X8, 28
	011 Subtract X12, X9, 1
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W13, [X11]
	014 Compare W13, 0
	015 JumpIfNotEqual {22}
	016 Subtract W9, W9, 1
	017 Add X13, X12, 1
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move [X0+24], W9
	020 Move X9, X12
	021 Move W9, 1
	022 Move W10, [X8+24]
	023 Subtract W9, W9, 1
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Add X8, X8, W9
	026 Move W10, [X8+32]
	027 Move TEMP, X10
	028 And TEMP, TEMP, -2147483648
	029 Compare TEMP, -2147483648
	030 JumpIfEqual {40}
	031 Move W8, 32
	032 Move W11, 0x80000000
	033 Subtract W8, W8, 1
	034 And W12, W10, W11
	035 Move W11, W11
	036 ShiftRight W11, 1
	037 And W11, W11, 0x7FFFFFFF
	038 Compare W12, 0
	039 JumpIfEqual {33}
	040 Move W8, 32
	041 Add W0, W8, W9
	042 Move X30, [X31+16]
	043 Return X0
	044 Call 0x1C17F28
	045 Call 0x1C17F20

Method: System.Boolean FermatLittleTest(System.Int32 confidence)

Disassembly:
	0x035312B4 MOV X1, X0
	0x035312B8 MOV X0, X20
	0x035312BC MOV X2, X24
	0x035312C0 MOV X3, X19
	0x035312C4 MOV X4, X22
	0x035312C8 MOV W5, W31
	0x035312CC BL 0x35317C4
	0x035312D0 CBZ X0, 0x3531660
	0x035312D4 LDR X8, [X0 + 0x18]
	0x035312D8 MOV X20, X0
	0x035312DC CBZ W8, 0x3531684
	0x035312E0 LDR X9, [X20 + 0x20]
	0x035312E4 CBZ X9, 0x3531660
	0x035312E8 LDR W10, [X9 + 0x18]
	0x035312EC CMP W10, 0x1
	0x035312F0 B.NE 0x353130C
	0x035312F4 LDR X9, [X9 + 0x10]
	0x035312F8 CBZ X9, 0x3531660
	0x035312FC LDR W10, [X9 + 0x18]
	0x03531300 CBZ W10, 0x3531684
	0x03531304 LDR W9, [X9 + 0x20]
	0x03531308 CBZ W9, 0x3531348
	0x0353130C CMP W8, 0x1
	0x03531310 B.LS 0x3531684
	0x03531314 LDR X9, [X20 + 0x28]
	0x03531318 CBZ X9, 0x3531660
	0x0353131C LDR W10, [X9 + 0x18]
	0x03531320 CMP W10, 0x1
	0x03531324 B.NE 0x3531340
	0x03531328 LDR X9, [X9 + 0x10]
	0x0353132C CBZ X9, 0x3531660
	0x03531330 LDR W10, [X9 + 0x18]
	0x03531334 CBZ W10, 0x3531684
	0x03531338 LDR W9, [X9 + 0x20]
	0x0353133C CBZ W9, 0x3531348
	0x03531340 MOV W26, W31
	0x03531344 B 0x353134C
	0x03531348 MOVZ W26, 0x1
	0x0353134C CMP W23, 0x2
	0x03531350 B.LT 0x35314AC
	0x03531354 SUB W24, W23, 0x1
	0x03531358 TBZ X26, 0x0, 0x3531364
	0x0353135C MOVZ W26, 0x1
	0x03531360 B 0x3531440
	0x03531364 CMP W8, 0x1
	0x03531368 B.LS 0x3531684
	0x0353136C LDR X0, [X25]
	0x03531370 LDR X23, [X20 + 0x28]
	0x03531374 LDR W8, [X0 + 0xE0]
	0x03531378 CBNZ W8, 0x3531380
	0x0353137C BL 0x1C16DFC
	0x03531380 MOV X0, X23
	0x03531384 MOV X1, X23
	0x03531388 BL 0x352C250
	0x0353138C MOV X1, X0
	0x03531390 MOV X2, X19
	0x03531394 MOV X3, X22
	0x03531398 BL 0x352FA7C
	0x0353139C MOV X23, X0
	0x035313A0 CBZ X0, 0x35313B8
	0x035313A4 LDR X8, [X20]
	0x035313A8 MOV X0, X23
	0x035313AC LDR X1, [X8 + 0x40]
	0x035313B0 BL 0x1C16E00
	0x035313B4 CBZ X0, 0x3531664
	0x035313B8 LDR W8, [X20 + 0x18]
	0x035313BC CMP W8, 0x1
	0x035313C0 B.LS 0x3531684
	0x035313C4 CMP W8, 0x2
	0x035313C8 STR X23, [X20 + 0x28]
	0x035313CC B.EQ 0x3531684
	0x035313D0 LDR X0, [X20 + 0x30]
	0x035313D4 MOVZ W1, 0x1
	0x035313D8 BL 0x352D78C
	0x035313DC MOV X1, X0
	0x035313E0 MOV X0, X23
	0x035313E4 BL 0x352D228
	0x035313E8 MOV X1, X19
	0x035313EC BL 0x352EB38
	0x035313F0 CBZ X0, 0x3531670
	0x035313F4 LDR X8, [X20]
	0x035313F8 MOV X23, X0
	0x035313FC LDR X1, [X8 + 0x40]
	0x03531400 BL 0x1C16E00
	0x03531404 CBZ X0, 0x3531664
	0x03531408 LDR W8, [X20 + 0x18]
	0x0353140C CMP W8, 0x1
	0x03531410 B.LS 0x3531684
	0x03531414 STR X23, [X20 + 0x28]
	0x03531418 LDR W9, [X23 + 0x18]
	0x0353141C CMP W9, 0x1
	0x03531420 B.NE 0x353143C
	0x03531424 LDR X9, [X23 + 0x10]
	0x03531428 CBZ X9, 0x3531660
	0x0353142C LDR W10, [X9 + 0x18]
	0x03531430 CBZ W10, 0x3531684
	0x03531434 LDR W9, [X9 + 0x20]
	0x03531438 CBZ W9, 0x353135C
	0x0353143C MOV W26, W31
	0x03531440 CMP W8, 0x2
	0x03531444 B.LS 0x3531684
	0x03531448 LDR X0, [X25]
	0x0353144C LDR X23, [X20 + 0x30]
	0x03531450 LDR W8, [X0 + 0xE0]
	0x03531454 CBNZ W8, 0x353145C
	0x03531458 BL 0x1C16DFC
	0x0353145C MOV X0, X23
	0x03531460 MOV X1, X23
	0x03531464 BL 0x352C250
	0x03531468 MOV X1, X0
	0x0353146C MOV X2, X19
	0x03531470 MOV X3, X22
	0x03531474 BL 0x352FA7C
	0x03531478 MOV X23, X0
	0x0353147C CBZ X0, 0x3531494
	0x03531480 LDR X8, [X20]
	0x03531484 MOV X0, X23
	0x03531488 LDR X1, [X8 + 0x40]
	0x0353148C BL 0x1C16E00
	0x03531490 CBZ X0, 0x3531664
	0x03531494 LDR X8, [X20 + 0x18]
	0x03531498 CMP W8, 0x2
	0x0353149C B.LS 0x3531684
	0x035314A0 SUBS W24, W24, 0x1
	0x035314A4 STR X23, [X20 + 0x30]
	0x035314A8 B.NE 0x3531358
	0x035314AC CBZ W26, 0x353163C
	0x035314B0 LDR X0, [X25]
	0x035314B4 LDR W8, [X0 + 0xE0]
	0x035314B8 CBNZ W8, 0x35314C0
	0x035314BC BL 0x1C16DFC
	0x035314C0 MOV X0, X21
	0x035314C4 BL 0x352CFA0
	0x035314C8 MOV X1, X0
	0x035314CC MOV X0, X19
	0x035314D0 BL 0x352FF28
	0x035314D4 CBZ X0, 0x3531660
	0x035314D8 LDR W8, [X0 + 0x18]
	0x035314DC CMP W8, 0x1
	0x035314E0 B.NE 0x3531658
	0x035314E4 LDR X8, [X0 + 0x10]
	0x035314E8 CBZ X8, 0x3531660
	0x035314EC LDR W9, [X8 + 0x18]
	0x035314F0 CBZ W9, 0x3531684
	0x035314F4 LDR W8, [X8 + 0x20]
	0x035314F8 CMP W8, 0x1
	0x035314FC B.NE 0x3531658
	0x03531500 LDR W8, [X20 + 0x18]
	0x03531504 CMP W8, 0x2
	0x03531508 B.LS 0x3531684
	0x0353150C LDR X22, [X20 + 0x30]
	0x03531510 CBZ X22, 0x3531660
	0x03531514 LDR X8, [X22 + 0x10]
	0x03531518 CBZ X8, 0x3531660
	0x0353151C LDR W9, [X8 + 0x18]
	0x03531520 CMP W9, 0x45
	0x03531524 B.LS 0x3531684
	0x03531528 LDR W8, [X8 + 0x134]
	0x0353152C TBZ X8, 0x1F, 0x3531578
	0x03531530 LDR X0, [X25]
	0x03531534 LDR W8, [X0 + 0xE0]
	0x03531538 CBNZ W8, 0x3531540
	0x0353153C BL 0x1C16DFC
	0x03531540 MOV X0, X22
	0x03531544 MOV X1, X19

ISIL:
	001 Move [X31-80], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0xEAF000
	012 Move W8, [X21+2985]
	013 Move W19, W1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xC04000
	020 Move X0, [X0+2432]
	021 Call 0x1C17CF4
	022 Move X0, 0xBCA000
	023 Move X0, [X0+744]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+2985], W8
	027 Move X8, [X20+16]
	028 Compare X8, 0
	029 JumpIfEqual {184}
	030 Move W9, [X8+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move W8, [X8+308]
	033 Move TEMP, X8
	034 And TEMP, TEMP, -2147483648
	035 Compare TEMP, -2147483648
	036 JumpIfNotEqual {49}
	037 Move X8, 0xC04000
	038 Move X8, [X8+2432]
	039 Move X0, [X8]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Call BigInteger.op_UnaryNegation, X0
	046 Move X20, X0
	047 Compare X0, 0
	048 JumpIfEqual {184}
	049 Move W9, [X20+24]
	050 Move X8, [X20+16]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Compare X8, 0
	053 JumpIfEqual {184}
	054 Move W9, [X8+24]
	055 Compare W9, 0
	056 JumpIfEqual {185}
	057 Move W9, [X8+32]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 And X8, X9, 15
	060 Move W9, 12
	061 NotImplemented "Instruction LSRV not yet implemented."
	062 And W0, W8, 1
	063 Compare X8, 0
	064 JumpIfEqual {184}
	065 Move W9, [X8+24]
	066 Compare W9, 0
	067 JumpIfEqual {185}
	068 Move W8, [X8+32]
	069 Move TEMP, X8
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfEqual {74}
	073 Move W0, W31
	074 Move X0, X20
	075 Call BigInteger.bitCount, X0
	076 Move X23, 0xC04000
	077 Move X23, [X23+2432]
	078 Move W24, W0
	079 Move X8, [X23]
	080 Move X0, X8
	081 Call 0x1C17F10
	082 Move X21, X0
	083 Call BigInteger..ctor, X0
	084 Move X0, [X23]
	085 Call 0x1C17F10
	086 Move W1, 1
	087 Move X22, X0
	088 Call BigInteger..ctor, X0, X1
	089 Move X0, [X23]
	090 Move W8, [X0+224]
	091 Compare W8, 0
	092 JumpIfNotEqual {94}
	093 Call 0x1C17DFC
	094 Move X0, X20
	095 Move X1, X22
	096 Call BigInteger.op_Subtraction, X0, X1
	097 Move X8, 0xBCA000
	098 Move X8, [X8+744]
	099 Move X22, X0
	100 Move X8, [X8]
	101 Move X0, X8
	102 Call 0x1C17F10
	103 Move X1, X31
	104 Move X23, X0
	105 Call Random..ctor, X0
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Compare X23, 0
	108 JumpIfEqual {184}
	109 Move W25, W31
	110 NotImplemented "Instruction SCVTF not yet implemented."
	111 Move X24, 0x7FF00000
	112 Move W26, 0x80000000
	113 Move X8, [X23]
	114 Move X0, X23
	115 Move X9, [X8+440]
	116 Move X1, [X8+448]
	117 NotImplemented "Instruction BLR not yet implemented."
	118 Multiply D0, D0, D8
	119 Move D1, X24
	120 NotImplemented "Instruction FCVTZS not yet implemented."
	121 NotImplemented "Instruction FCMP not yet implemented."
	122 NotImplemented "Instruction CSEL not yet implemented."
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Compare X21, 0
	125 JumpIfEqual {184}
	126 Move X0, X21
	127 Move X2, X23
	128 Call BigInteger.genRandomBits, X0, X1, X2
	129 Move W8, [X21+24]
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Move X8, [X21+16]
	132 Compare X8, 0
	133 JumpIfEqual {184}
	134 Move W9, [X8+24]
	135 Compare W9, 0
	136 JumpIfEqual {185}
	137 Move W8, [X8+32]
	138 NotImplemented "Instruction CMP not yet implemented."
	139 Move X0, X21
	140 Move X1, X20
	141 Call BigInteger.gcd, X0, X1
	142 Compare X0, 0
	143 JumpIfEqual {184}
	144 Move W8, [X0+24]
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Move X8, [X0+16]
	147 Compare X8, 0
	148 JumpIfEqual {184}
	149 Move W9, [X8+24]
	150 Compare W9, 0
	151 JumpIfEqual {185}
	152 Move W8, [X8+32]
	153 NotImplemented "Instruction CMP not yet implemented."
	154 Move X0, X21
	155 Move X1, X22
	156 Move X2, X20
	157 Call BigInteger.ModPow, X0, X1, X2
	158 Compare X0, 0
	159 JumpIfEqual {184}
	160 Move W8, [X0+24]
	161 NotImplemented "Instruction CMP not yet implemented."
	162 Move X8, [X0+16]
	163 Compare X8, 0
	164 JumpIfEqual {184}
	165 Move W9, [X8+24]
	166 Compare W9, 0
	167 JumpIfEqual {185}
	168 Move W8, [X8+32]
	169 NotImplemented "Instruction CMP not yet implemented."
	170 Add W25, W25, 1
	171 NotImplemented "Instruction CMP not yet implemented."
	172 Move W0, 1
	173 Move X20, [X31+64]
	174 Move X19, [X31+72]
	175 Move X22, [X31+48]
	176 Move X21, [X31+56]
	177 Move X24, [X31+32]
	178 Move X23, [X31+40]
	179 Move X26, [X31+16]
	180 Move X25, [X31+24]
	181 Move X30, [X31+8]
	182 Move V8, [X31+80]
	183 Return X0
	184 Call 0x1C17F20
	185 Call 0x1C17F28

Method: System.Boolean RabinMillerTest(System.Int32 confidence)

Disassembly:
	0x03531548 BL 0x352C728
	0x0353154C MOV X22, X0
	0x03531550 CBZ X0, 0x3531568
	0x03531554 LDR X8, [X20]
	0x03531558 MOV X0, X22
	0x0353155C LDR X1, [X8 + 0x40]
	0x03531560 BL 0x1C16E00
	0x03531564 CBZ X0, 0x3531664
	0x03531568 LDR W8, [X20 + 0x18]
	0x0353156C CMP W8, 0x2
	0x03531570 B.LS 0x3531684
	0x03531574 STR X22, [X20 + 0x30]
	0x03531578 LDR X0, [X25]
	0x0353157C LDR W8, [X0 + 0xE0]
	0x03531580 CBNZ W8, 0x3531588
	0x03531584 BL 0x1C16DFC
	0x03531588 MOV X0, X21
	0x0353158C BL 0x352CFA0
	0x03531590 MOV X1, X19
	0x03531594 BL 0x3530C04
	0x03531598 SXTW X8, W0
	0x0353159C MUL X0, X21, X8
	0x035315A0 BL 0x352CFA0
	0x035315A4 MOV X1, X19
	0x035315A8 BL 0x352EB38
	0x035315AC CBZ X0, 0x3531660
	0x035315B0 LDR X8, [X0 + 0x10]
	0x035315B4 MOV X21, X0
	0x035315B8 CBZ X8, 0x3531660
	0x035315BC LDR W9, [X8 + 0x18]
	0x035315C0 CMP W9, 0x45
	0x035315C4 B.LS 0x3531684
	0x035315C8 LDR W8, [X8 + 0x134]
	0x035315CC TBZ X8, 0x1F, 0x35315F0
	0x035315D0 LDR X0, [X25]
	0x035315D4 LDR W8, [X0 + 0xE0]
	0x035315D8 CBNZ W8, 0x35315E0
	0x035315DC BL 0x1C16DFC
	0x035315E0 MOV X0, X21
	0x035315E4 MOV X1, X19
	0x035315E8 BL 0x352C728
	0x035315EC MOV X21, X0
	0x035315F0 LDR W8, [X20 + 0x18]
	0x035315F4 CMP W8, 0x2
	0x035315F8 B.LS 0x3531684
	0x035315FC LDR X0, [X25]
	0x03531600 LDR X19, [X20 + 0x30]
	0x03531604 LDR W8, [X0 + 0xE0]
	0x03531608 CBNZ W8, 0x3531610
	0x0353160C BL 0x1C16DFC
	0x03531610 CBZ X19, 0x3531660
	0x03531614 LDR X8, [X19]
	0x03531618 MOV X0, X19
	0x0353161C MOV X1, X21
	0x03531620 LDP X20, X19, [X31 + 0x40]
	0x03531624 LDP X3, X2, [X8 + 0x138]
	0x03531628 LDP X22, X21, [X31 + 0x30]
	0x0353162C LDP X24, X23, [X31 + 0x20]
	0x03531630 LDP X26, X25, [X31 + 0x10]
	0x03531634 LDR X30, [X31], #0x50
	0x03531638 BR X3
	0x0353163C MOV W0, W31
	0x03531640 LDP X20, X19, [X31 + 0x40]
	0x03531644 LDP X22, X21, [X31 + 0x30]
	0x03531648 LDP X24, X23, [X31 + 0x20]
	0x0353164C LDP X26, X25, [X31 + 0x10]
	0x03531650 LDR X30, [X31], #0x50
	0x03531654 RET
	0x03531658 MOVZ W0, 0x1
	0x0353165C B 0x3531640
	0x03531660 BL 0x1C16F20
	0x03531664 BL 0x1C16F44
	0x03531668 MOV X1, X31
	0x0353166C BL 0x1C16DEC
	0x03531670 LDR W8, [X20 + 0x18]
	0x03531674 CMP W8, 0x1
	0x03531678 B.LS 0x3531684
	0x0353167C STR X31, [X20 + 0x28]
	0x03531680 BL 0x1C16F20
	0x03531684 BL 0x1C16F28
	0x03531688 STR X30, [X31 - 0x40]!
	0x0353168C STP X24, X23, [X31 + 0x10]
	0x03531690 STP X22, X21, [X31 + 0x20]
	0x03531694 STP X20, X19, [X31 + 0x30]
	0x03531698 ADRP X20, 0xEAE000
	0x0353169C ADRP X21, 0xC03000
	0x035316A0 LDRB W8, [X20 + 0xBB5]
	0x035316A4 LDR X21, [X21 + 0x980]
	0x035316A8 MOV X19, X0
	0x035316AC TBNZ X8, 0x0, 0x35316C4
	0x035316B0 ADRP X0, 0xC03000
	0x035316B4 LDR X0, [X0 + 0x980]
	0x035316B8 BL 0x1C16CF4
	0x035316BC MOVZ W8, 0x1
	0x035316C0 STRB W8, [X20 + 0xBB5]
	0x035316C4 MOV X0, X19
	0x035316C8 BL 0x352F9D0
	0x035316CC LDR X8, [X21]
	0x035316D0 AND W9, W0, 0x1
	0x035316D4 ADD W22, W9, W0, 0x1, LSR
	0x035316D8 UBFM W23, W22, 0x5, 0x1F
	0x035316DC MOV X0, X8
	0x035316E0 BL 0x1C16F10
	0x035316E4 MOV X20, X0
	0x035316E8 BL 0x352BB04
	0x035316EC ANDS W9, W22, 0x1F
	0x035316F0 CINC W8, W23, NE
	0x035316F4 CBZ X20, 0x35317BC
	0x035316F8 STR W8, [X20 + 0x18]
	0x035316FC CBZ W8, 0x35317A4
	0x03531700 MOVZ W10, 0x1
	0x03531704 CMP W9, 0x0
	0x03531708 MOVZ W11, 0x80000000
	0x0353170C LSLV W9, W10, W9
	0x03531710 SUB W22, W8, 0x1
	0x03531714 CSEL W24, W11, W9, EQ
	0x03531718 MOV W23, W8
	0x0353171C SUB X23, X23, 0x1
	0x03531720 LDR X8, [X20 + 0x10]
	0x03531724 CBZ X8, 0x35317BC
	0x03531728 LDR W9, [X8 + 0x18]
	0x0353172C CMP W23, W9
	0x03531730 B.CS 0x35317C0
	0x03531734 ADD X8, X8, X23, 0x2, LSL
	0x03531738 LDR W9, [X8 + 0x20]
	0x0353173C EOR W9, W9, W24, 0x0
	0x03531740 STR W9, [X8 + 0x20]
	0x03531744 LDR X0, [X21]
	0x03531748 LDR W8, [X0 + 0xE0]
	0x0353174C CBNZ W8, 0x3531754
	0x03531750 BL 0x1C16DFC
	0x03531754 MOV X0, X20
	0x03531758 MOV X1, X20
	0x0353175C BL 0x352C250
	0x03531760 MOV X1, X19
	0x03531764 BL 0x352DDC4
	0x03531768 TBZ X0, 0x0, 0x3531790
	0x0353176C LDR X8, [X20 + 0x10]
	0x03531770 CBZ X8, 0x35317BC
	0x03531774 LDR W9, [X8 + 0x18]
	0x03531778 CMP W23, W9
	0x0353177C B.CS 0x35317C0
	0x03531780 ADD X8, X8, X23, 0x2, LSL
	0x03531784 LDR W9, [X8 + 0x20]
	0x03531788 EOR W9, W9, W24, 0x0
	0x0353178C STR W9, [X8 + 0x20]
	0x03531790 UBFM W24, W24, 0x1, 0x1F
	0x03531794 CBNZ W24, 0x3531720
	0x03531798 SUBS W22, W22, 0x1
	0x0353179C MOVZ W24, 0x80000000
	0x035317A0 B.PL 0x353171C
	0x035317A4 MOV X0, X20
	0x035317A8 LDP X20, X19, [X31 + 0x30]
	0x035317AC LDP X22, X21, [X31 + 0x20]
	0x035317B0 LDP X24, X23, [X31 + 0x10]
	0x035317B4 LDR X30, [X31], #0x40
	0x035317B8 RET
	0x035317BC BL 0x1C16F20
	0x035317C0 BL 0x1C16F28
	0x035317C4 SUB X31, X31, 0x80
	0x035317C8 STP X29, X30, [X31 + 0x20]
	0x035317CC STP X28, X27, [X31 + 0x30]
	0x035317D0 STP X26, X25, [X31 + 0x40]
	0x035317D4 STP X24, X23, [X31 + 0x50]
	0x035317D8 STP X22, X21, [X31 + 0x60]
	0x035317DC STP X20, X19, [X31 + 0x70]
	0x035317E0 STP X0, X4, [X31 + 0x10]
	0x035317E4 ADRP X19, 0xEAE000
	0x035317E8 ADRP X20, 0xC03000
	0x035317EC LDRB W8, [X19 + 0xBB7]
	0x035317F0 LDR X20, [X20 + 0xA50]
	0x035317F4 MOV W24, W5
	0x035317F8 MOV X22, X3
	0x035317FC MOV X21, X2
	0x03531800 MOV X23, X1
	0x03531804 TBNZ X8, 0x0, 0x3531828
	0x03531808 ADRP X0, 0xC03000
	0x0353180C LDR X0, [X0 + 0xA50]
	0x03531810 BL 0x1C16CF4
	0x03531814 ADRP X0, 0xC03000
	0x03531818 LDR X0, [X0 + 0x980]
	0x0353181C BL 0x1C16CF4
	0x03531820 MOVZ W8, 0x1
	0x03531824 STRB W8, [X19 + 0xBB7]
	0x03531828 LDR X0, [X20]
	0x0353182C MOVZ W1, 0x3
	0x03531830 BL 0x1C16D6C
	0x03531834 STR X0, [X31]
	0x03531838 CBZ X21, 0x3531D80
	0x0353183C LDR X8, [X21 + 0x10]
	0x03531840 CBZ X8, 0x3531D80
	0x03531844 LDR W9, [X8 + 0x18]
	0x03531848 CBZ W9, 0x3531D84
	0x0353184C LDRB W8, [X8 + 0x20]
	0x03531850 TBZ X8, 0x0, 0x3531D94
	0x03531854 STR W24, [X31 + 0x8]
	0x03531858 ADRP X19, 0xC03000
	0x0353185C LDR X19, [X19 + 0x980]
	0x03531860 MOV X0, X21
	0x03531864 BL 0x352F9D0
	0x03531868 LDR X8, [X19]
	0x0353186C MOV W26, W0
	0x03531870 LDR W9, [X8 + 0xE0]
	0x03531874 CBNZ W9, 0x3531880
	0x03531878 MOV X0, X8
	0x0353187C BL 0x1C16DFC
	0x03531880 MOVZ W0, 0x2
	0x03531884 BL 0x352C1F8
	0x03531888 MOV X1, X22
	0x0353188C BL 0x352EB38
	0x03531890 MOV X27, X0
	0x03531894 MOVZ W0, 0x1
	0x03531898 MOVZ W24, 0x1
	0x0353189C BL 0x352C1F8
	0x035318A0 MOV X1, X22
	0x035318A4 BL 0x352EB38
	0x035318A8 MOV X28, X0
	0x035318AC LDR X0, [X31 + 0x10]
	0x035318B0 MOV X1, X22
	0x035318B4 BL 0x352EB38
	0x035318B8 LDR W8, [X21 + 0x18]
	0x035318BC MOV X29, X0
	0x035318C0 SUBS W10, W8, 0x1
	0x035318C4 B.MI 0x3531B48
	0x035318C8 SUB W8, W26, 0x1
	0x035318CC MOVZ W9, 0x1
	0x035318D0 STR W10, [X31 + 0xC]
	0x035318D4 MOV W20, W10
	0x035318D8 LSLV W19, W9, W8
	0x035318DC MOVZ W24, 0x1
	0x035318E0 MOV X26, X28
	0x035318E4 MOV W25, W24
	0x035318E8 CBNZ X20, 0x35318F4
	0x035318EC CMP W19, 0x1
	0x035318F0 B.EQ 0x3531B28
	0x035318F4 LDR X8, [X21 + 0x10]
	0x035318F8 CBZ X8, 0x3531D80
	0x035318FC LDR W9, [X8 + 0x18]
	0x03531900 CMP X20, X9

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+16], D8
	003 Move [X31+32], X29
	004 Move [X31+40], X30
	005 Move [X31+48], X28
	006 Move [X31+56], X27
	007 Move [X31+64], X26
	008 Move [X31+72], X25
	009 Move [X31+80], X24
	010 Move [X31+88], X23
	011 Move [X31+96], X22
	012 Move [X31+104], X21
	013 Move [X31+112], X20
	014 Move [X31+120], X19
	015 Move X19, 0xEAF000
	016 Move W8, [X19+2986]
	017 Move W28, W1
	018 Move X20, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {31}
	023 Move X0, 0xC04000
	024 Move X0, [X0+2432]
	025 Call 0x1C17CF4
	026 Move X0, 0xBCA000
	027 Move X0, [X0+744]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X19+2986], W8
	031 Move X8, [X20+16]
	032 Compare X8, 0
	033 JumpIfEqual {266}
	034 Move W9, [X8+24]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move W8, [X8+308]
	037 Move TEMP, X8
	038 And TEMP, TEMP, -2147483648
	039 Compare TEMP, -2147483648
	040 JumpIfNotEqual {53}
	041 Move X8, 0xC04000
	042 Move X8, [X8+2432]
	043 Move X0, [X8]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X0, X20
	049 Call BigInteger.op_UnaryNegation, X0
	050 Move X20, X0
	051 Compare X0, 0
	052 JumpIfEqual {266}
	053 Move W9, [X20+24]
	054 Move X8, [X20+16]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Compare X8, 0
	057 JumpIfEqual {266}
	058 Move W9, [X8+24]
	059 Compare W9, 0
	060 JumpIfEqual {265}
	061 Move W9, [X8+32]
	062 NotImplemented "Instruction CMP not yet implemented."
	063 And X8, X9, 15
	064 Move W9, 12
	065 NotImplemented "Instruction LSRV not yet implemented."
	066 And W0, W8, 1
	067 Compare X8, 0
	068 JumpIfEqual {266}
	069 Move W9, [X8+24]
	070 Compare W9, 0
	071 JumpIfEqual {265}
	072 Move W8, [X8+32]
	073 Move TEMP, X8
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {248}
	077 Move X27, 0xC04000
	078 Move X27, [X27+2432]
	079 Move X0, [X27]
	080 Call 0x1C17F10
	081 Move W1, 1
	082 Move X21, X0
	083 Call BigInteger..ctor, X0, X1
	084 Move X0, [X27]
	085 Move W8, [X0+224]
	086 Compare W8, 0
	087 JumpIfNotEqual {89}
	088 Call 0x1C17DFC
	089 Move X0, X20
	090 Move X1, X21
	091 Call BigInteger.op_Subtraction, X0, X1
	092 Compare X0, 0
	093 JumpIfEqual {266}
	094 Move W8, [X0+24]
	095 Move X21, X0
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Move X9, [X21+16]
	098 Move W10, W31
	099 Move W11, W31
	100 Compare X9, 0
	101 JumpIfEqual {266}
	102 Move W13, [X9+24]
	103 Add X14, X9, W10
	104 Move W12, W31
	105 Add X14, X14, 32
	106 Add W22, W11, 32
	107 Move W15, 1
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Move W16, [X14]
	110 And W31, W16, W15
	111 Add W12, W12, 1
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move W15, W15
	114 ShiftRight W15, 31
	115 And W15, W15, 0x3FFFFFFF
	116 Add W22, W11, W12
	117 Move W10, W8
	118 Add W10, W10, 1
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Move W11, W22
	121 Move W22, W31
	122 Move X0, [X27]
	123 Move W8, [X0+224]
	124 Compare W8, 0
	125 JumpIfNotEqual {127}
	126 Call 0x1C17DFC
	127 Move X0, X21
	128 Move W1, W22
	129 Call BigInteger.op_RightShift, X0, X1
	130 Move [X31+24], X0
	131 Move X0, X20
	132 Call BigInteger.bitCount, X0
	133 Move X8, [X27]
	134 Move W26, W0
	135 Move X0, X8
	136 Call 0x1C17F10
	137 Move X24, X0
	138 Call BigInteger..ctor, X0
	139 Move X8, 0xBCA000
	140 Move X8, [X8+744]
	141 Move X0, [X8]
	142 Call 0x1C17F10
	143 Move X1, X31
	144 Move X25, X0
	145 Call Random..ctor, X0
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Compare X25, 0
	148 JumpIfEqual {266}
	149 Move W8, W31
	150 NotImplemented "Instruction SCVTF not yet implemented."
	151 Move X29, 0x7FF00000
	152 Move W19, 0x80000000
	153 Move [X31+12], W8
	154 Move X8, [X25]
	155 Move X0, X25
	156 Move X9, [X8+440]
	157 Move X1, [X8+448]
	158 NotImplemented "Instruction BLR not yet implemented."
	159 Multiply D0, D0, D8
	160 Move D1, X29
	161 NotImplemented "Instruction FCVTZS not yet implemented."
	162 NotImplemented "Instruction FCMP not yet implemented."
	163 NotImplemented "Instruction CSEL not yet implemented."
	164 NotImplemented "Instruction CMP not yet implemented."
	165 Compare X24, 0
	166 JumpIfEqual {266}
	167 Move X0, X24
	168 Move X2, X25
	169 Call BigInteger.genRandomBits, X0, X1, X2
	170 Move W8, [X24+24]
	171 NotImplemented "Instruction CMP not yet implemented."
	172 Move X8, [X24+16]
	173 Compare X8, 0
	174 JumpIfEqual {266}
	175 Move W9, [X8+24]
	176 Compare W9, 0
	177 JumpIfEqual {265}
	178 Move W8, [X8+32]
	179 NotImplemented "Instruction CMP not yet implemented."
	180 Move X0, X24
	181 Move X1, X20
	182 Call BigInteger.gcd, X0, X1
	183 Compare X0, 0
	184 JumpIfEqual {266}
	185 Move W8, [X0+24]
	186 NotImplemented "Instruction CMP not yet implemented."
	187 Move X8, [X0+16]
	188 Compare X8, 0
	189 JumpIfEqual {266}
	190 Move W9, [X8+24]
	191 Compare W9, 0
	192 JumpIfEqual {265}
	193 Move W8, [X8+32]
	194 NotImplemented "Instruction CMP not yet implemented."
	195 Move X1, [X31+24]
	196 Move X0, X24
	197 Move X2, X20
	198 Call BigInteger.ModPow, X0, X1, X2
	199 Compare X0, 0
	200 JumpIfEqual {266}
	201 Move W8, [X0+24]
	202 Move X26, X0
	203 NotImplemented "Instruction CMP not yet implemented."
	204 Move X8, [X26+16]
	205 Compare X8, 0
	206 JumpIfEqual {266}
	207 Move W9, [X8+24]
	208 Compare W9, 0
	209 JumpIfEqual {265}
	210 Move W8, [X8+32]
	211 NotImplemented "Instruction CMP not yet implemented."
	212 Move W8, [X31+12]
	213 Move W0, 1
	214 Add W8, W8, 1
	215 NotImplemented "Instruction CMP not yet implemented."
	216 NotImplemented "Instruction CMP not yet implemented."
	217 Move W23, W31
	218 Move X0, [X27]
	219 Move W8, [X0+224]
	220 Compare W8, 0
	221 JumpIfNotEqual {223}
	222 Call 0x1C17DFC
	223 Compare X26, 0
	224 JumpIfEqual {266}
	225 Move X8, [X26]
	226 Move X0, X26
	227 Move X1, X21
	228 Move X9, [X8+312]
	229 Move X2, [X8+320]
	230 NotImplemented "Instruction BLR not yet implemented."
	231 Move TEMP, X0
	232 And TEMP, TEMP, 1
	233 Compare TEMP, 1
	234 JumpIfEqual {212}
	235 Move X0, [X27]
	236 Move W8, [X0+224]
	237 Compare W8, 0
	238 JumpIfNotEqual {240}
	239 Call 0x1C17DFC
	240 Move X0, X26
	241 Move X1, X26
	242 Call BigInteger.op_Multiply, X0, X1
	243 Move X1, X20
	244 Call BigInteger.op_Modulus, X0, X1
	245 Add W23, W23, 1
	246 NotImplemented "Instruction CMP not yet implemented."
	247 Move X26, X0
	248 Move W0, W31
	249 Move X20, [X31+112]
	250 Move X19, [X31+120]
	251 Move X22, [X31+96]
	252 Move X21, [X31+104]
	253 Move X24, [X31+80]
	254 Move X23, [X31+88]
	255 Move X26, [X31+64]
	256 Move X25, [X31+72]
	257 Move X28, [X31+48]
	258 Move X27, [X31+56]
	259 Move X29, [X31+32]
	260 Move X30, [X31+40]
	261 Move V8, [X31+16]
	262 Add X31, X31, 128
	263 Return X0
	264 Move W0, 1
	265 Call 0x1C17F28
	266 Call 0x1C17F20

Method: System.Boolean SolovayStrassenTest(System.Int32 confidence)

Disassembly:
	0x03531904 B.CS 0x3531D84
	0x03531908 ADRP X9, 0xC03000
	0x0353190C LDR X9, [X9 + 0x980]
	0x03531910 ADD X8, X8, X20, 0x2, LSL
	0x03531914 LDR W24, [X8 + 0x20]
	0x03531918 LDR X0, [X9]
	0x0353191C LDR W9, [X0 + 0xE0]
	0x03531920 CBNZ W9, 0x3531928
	0x03531924 BL 0x1C16DFC
	0x03531928 MOV X0, X28
	0x0353192C AND W8, W24, W19, 0x0
	0x03531930 CBZ W8, 0x3531A28
	0x03531934 MOV X1, X29
	0x03531938 BL 0x352C250
	0x0353193C MOV X1, X22
	0x03531940 BL 0x352EB38
	0x03531944 MOV X28, X0
	0x03531948 MOV X0, X27
	0x0353194C MOV X1, X29
	0x03531950 BL 0x352C250
	0x03531954 MOV X27, X0
	0x03531958 LDR X0, [X31 + 0x10]
	0x0353195C MOV X1, X26
	0x03531960 BL 0x352C250
	0x03531964 MOV X1, X0
	0x03531968 MOV X0, X27
	0x0353196C BL 0x352D228
	0x03531970 MOV X1, X22
	0x03531974 BL 0x352EB38
	0x03531978 MOV X27, X0
	0x0353197C MOV X0, X29
	0x03531980 MOV X1, X29
	0x03531984 BL 0x352C250
	0x03531988 ADRP X24, 0xC03000
	0x0353198C LDR X24, [X24 + 0x980]
	0x03531990 CBZ X22, 0x3531D80
	0x03531994 LDR X3, [X31 + 0x18]
	0x03531998 MOV X1, X0
	0x0353199C MOV X2, X22
	0x035319A0 BL 0x352FA7C
	0x035319A4 MOV X29, X0
	0x035319A8 MOV X0, X26
	0x035319AC MOV X1, X23
	0x035319B0 BL 0x352C250
	0x035319B4 MOVZ W1, 0x1
	0x035319B8 BL 0x352D78C
	0x035319BC MOV X1, X0
	0x035319C0 MOV X0, X29
	0x035319C4 BL 0x352D228
	0x035319C8 MOV X1, X22
	0x035319CC BL 0x352EB38
	0x035319D0 MOV X29, X0
	0x035319D4 TBNZ X25, 0x0, 0x3531A08
	0x035319D8 LDR X0, [X24]
	0x035319DC LDR W8, [X0 + 0xE0]
	0x035319E0 CBNZ W8, 0x35319E8
	0x035319E4 BL 0x1C16DFC
	0x035319E8 MOV X0, X26
	0x035319EC MOV X1, X26
	0x035319F0 BL 0x352C250
	0x035319F4 LDR X3, [X31 + 0x18]
	0x035319F8 MOV X1, X0
	0x035319FC MOV X2, X22
	0x03531A00 BL 0x352FA7C
	0x03531A04 MOV X26, X0
	0x03531A08 LDR X0, [X24]
	0x03531A0C LDR W8, [X0 + 0xE0]
	0x03531A10 CBNZ W8, 0x3531A18
	0x03531A14 BL 0x1C16DFC
	0x03531A18 MOV X0, X26
	0x03531A1C MOV X1, X23
	0x03531A20 BL 0x352C250
	0x03531A24 B 0x3531ADC
	0x03531A28 MOV X1, X27
	0x03531A2C BL 0x352C250
	0x03531A30 MOV X1, X26
	0x03531A34 BL 0x352D228
	0x03531A38 MOV X1, X22
	0x03531A3C BL 0x352EB38
	0x03531A40 MOV X28, X0
	0x03531A44 MOV X0, X27
	0x03531A48 MOV X1, X29
	0x03531A4C BL 0x352C250
	0x03531A50 MOV X29, X0
	0x03531A54 LDR X0, [X31 + 0x10]
	0x03531A58 MOV X1, X26
	0x03531A5C BL 0x352C250
	0x03531A60 MOV X1, X0
	0x03531A64 MOV X0, X29
	0x03531A68 BL 0x352D228
	0x03531A6C MOV X1, X22
	0x03531A70 BL 0x352EB38
	0x03531A74 MOV X29, X0
	0x03531A78 MOV X0, X27
	0x03531A7C MOV X1, X27
	0x03531A80 BL 0x352C250
	0x03531A84 ADRP X24, 0xC03000
	0x03531A88 LDR X24, [X24 + 0x980]
	0x03531A8C CBZ X22, 0x3531D80
	0x03531A90 LDR X3, [X31 + 0x18]
	0x03531A94 MOV X1, X0
	0x03531A98 MOV X2, X22
	0x03531A9C BL 0x352FA7C
	0x03531AA0 MOV X27, X0
	0x03531AA4 MOVZ W1, 0x1
	0x03531AA8 MOV X0, X26
	0x03531AAC BL 0x352D78C
	0x03531AB0 MOV X1, X0
	0x03531AB4 MOV X0, X27
	0x03531AB8 BL 0x352D228
	0x03531ABC MOV X1, X22
	0x03531AC0 BL 0x352EB38
	0x03531AC4 LDR X8, [X24]
	0x03531AC8 MOV X27, X0
	0x03531ACC LDR W9, [X8 + 0xE0]
	0x03531AD0 CBZ W9, 0x3531AFC
	0x03531AD4 TBZ X25, 0x0, 0x3531B08
	0x03531AD8 MOV X0, X23
	0x03531ADC MOV X1, X22
	0x03531AE0 BL 0x352EB38
	0x03531AE4 MOV X26, X0
	0x03531AE8 MOV W25, W31
	0x03531AEC UBFM W19, W19, 0x1, 0x1F
	0x03531AF0 MOV W24, W31
	0x03531AF4 CBNZ W19, 0x35318E8
	0x03531AF8 B 0x3531B2C
	0x03531AFC MOV X0, X8
	0x03531B00 BL 0x1C16DFC
	0x03531B04 TBNZ X25, 0x0, 0x3531AD8
	0x03531B08 MOV X0, X26
	0x03531B0C MOV X1, X26
	0x03531B10 BL 0x352C250
	0x03531B14 LDR X3, [X31 + 0x18]
	0x03531B18 MOV X1, X0
	0x03531B1C MOV X2, X22
	0x03531B20 BL 0x352FA7C
	0x03531B24 B 0x3531AE4
	0x03531B28 MOV W24, W25
	0x03531B2C LDR W8, [X31 + 0xC]
	0x03531B30 SUB X20, X20, 0x1
	0x03531B34 MOVZ W19, 0x80000000
	0x03531B38 SUB W8, W8, 0x1
	0x03531B3C STR W8, [X31 + 0xC]
	0x03531B40 TBZ X8, 0x1F, 0x35318E4
	0x03531B44 B 0x3531B4C
	0x03531B48 MOV X26, X28
	0x03531B4C ADRP X8, 0xC03000
	0x03531B50 LDR X8, [X8 + 0x980]
	0x03531B54 LDR X0, [X8]
	0x03531B58 LDR W8, [X0 + 0xE0]
	0x03531B5C CBNZ W8, 0x3531B64
	0x03531B60 BL 0x1C16DFC
	0x03531B64 MOV X0, X28
	0x03531B68 MOV X1, X27
	0x03531B6C BL 0x352C250
	0x03531B70 MOV X1, X26
	0x03531B74 BL 0x352D228
	0x03531B78 MOV X1, X22
	0x03531B7C BL 0x352EB38
	0x03531B80 MOV X25, X0
	0x03531B84 MOV X0, X27
	0x03531B88 MOV X1, X29
	0x03531B8C BL 0x352C250
	0x03531B90 MOV X27, X0
	0x03531B94 LDR X0, [X31 + 0x10]
	0x03531B98 MOV X1, X26
	0x03531B9C BL 0x352C250
	0x03531BA0 MOV X1, X0
	0x03531BA4 MOV X0, X27
	0x03531BA8 BL 0x352D228
	0x03531BAC MOV X1, X22
	0x03531BB0 BL 0x352EB38
	0x03531BB4 MOV X19, X0
	0x03531BB8 TBZ X24, 0x0, 0x3531BCC
	0x03531BBC ADRP X24, 0xC03000
	0x03531BC0 LDR W20, [X31 + 0x8]
	0x03531BC4 LDR X24, [X24 + 0x980]
	0x03531BC8 B 0x3531C0C
	0x03531BCC ADRP X24, 0xC03000
	0x03531BD0 LDR X24, [X24 + 0x980]
	0x03531BD4 LDR W20, [X31 + 0x8]
	0x03531BD8 LDR X0, [X24]
	0x03531BDC LDR W8, [X0 + 0xE0]
	0x03531BE0 CBNZ W8, 0x3531BE8
	0x03531BE4 BL 0x1C16DFC
	0x03531BE8 MOV X0, X26
	0x03531BEC MOV X1, X26
	0x03531BF0 BL 0x352C250
	0x03531BF4 CBZ X22, 0x3531D80
	0x03531BF8 LDR X3, [X31 + 0x18]
	0x03531BFC MOV X1, X0
	0x03531C00 MOV X2, X22

ISIL:
	001 Move [X31-112], D8
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X21, 0xEAF000
	015 Move W8, [X21+2987]
	016 Move W19, W1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {30}
	022 Move X0, 0xC04000
	023 Move X0, [X0+2432]
	024 Call 0x1C17CF4
	025 Move X0, 0xBCA000
	026 Move X0, [X0+744]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+2987], W8
	030 Move X8, [X20+16]
	031 Compare X8, 0
	032 JumpIfEqual {230}
	033 Move W9, [X8+24]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move W8, [X8+308]
	036 Move TEMP, X8
	037 And TEMP, TEMP, -2147483648
	038 Compare TEMP, -2147483648
	039 JumpIfNotEqual {52}
	040 Move X8, 0xC04000
	041 Move X8, [X8+2432]
	042 Move X0, [X8]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X20
	048 Call BigInteger.op_UnaryNegation, X0
	049 Move X20, X0
	050 Compare X0, 0
	051 JumpIfEqual {230}
	052 Move W9, [X20+24]
	053 Move X8, [X20+16]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Compare X8, 0
	056 JumpIfEqual {230}
	057 Move W9, [X8+24]
	058 Compare W9, 0
	059 JumpIfEqual {231}
	060 Move W9, [X8+32]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 And X8, X9, 15
	063 Move W9, 12
	064 NotImplemented "Instruction LSRV not yet implemented."
	065 And W0, W8, 1
	066 Compare X8, 0
	067 JumpIfEqual {230}
	068 Move W9, [X8+24]
	069 Compare W9, 0
	070 JumpIfEqual {231}
	071 Move W8, [X8+32]
	072 Move TEMP, X8
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfEqual {77}
	076 Move W26, W31
	077 Move X0, X20
	078 Call BigInteger.bitCount, X0
	079 Move X27, 0xC04000
	080 Move X27, [X27+2432]
	081 Move W25, W0
	082 Move X8, [X27]
	083 Move X0, X8
	084 Call 0x1C17F10
	085 Move X21, X0
	086 Call BigInteger..ctor, X0
	087 Move X0, [X27]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1C17DFC
	092 Move W0, 1
	093 Move W26, 1
	094 Call BigInteger.op_Implicit, X0
	095 Move X1, X0
	096 Move X0, X20
	097 Call BigInteger.op_Subtraction, X0, X1
	098 Move W1, 1
	099 Move X22, X0
	100 Call BigInteger.op_RightShift, X0, X1
	101 Move X8, 0xBCA000
	102 Move X8, [X8+744]
	103 Move X23, X0
	104 Move X8, [X8]
	105 Move X0, X8
	106 Call 0x1C17F10
	107 Move X1, X31
	108 Move X24, X0
	109 Call Random..ctor, X0
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Compare X24, 0
	112 JumpIfEqual {230}
	113 Move W26, W31
	114 NotImplemented "Instruction SCVTF not yet implemented."
	115 Move X28, 0x7FF00000
	116 Move W29, 0x80000000
	117 Move X8, [X24]
	118 Move X0, X24
	119 Move X9, [X8+440]
	120 Move X1, [X8+448]
	121 NotImplemented "Instruction BLR not yet implemented."
	122 Multiply D0, D0, D8
	123 Move D1, X28
	124 NotImplemented "Instruction FCVTZS not yet implemented."
	125 NotImplemented "Instruction FCMP not yet implemented."
	126 NotImplemented "Instruction CSEL not yet implemented."
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Compare X21, 0
	129 JumpIfEqual {230}
	130 Move X0, X21
	131 Move X2, X24
	132 Call BigInteger.genRandomBits, X0, X1, X2
	133 Move W8, [X21+24]
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Move X8, [X21+16]
	136 Compare X8, 0
	137 JumpIfEqual {230}
	138 Move W9, [X8+24]
	139 Compare W9, 0
	140 JumpIfEqual {231}
	141 Move W8, [X8+32]
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Move X0, X21
	144 Move X1, X20
	145 Call BigInteger.gcd, X0, X1
	146 Compare X0, 0
	147 JumpIfEqual {230}
	148 Move W8, [X0+24]
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Move X8, [X0+16]
	151 Compare X8, 0
	152 JumpIfEqual {230}
	153 Move W9, [X8+24]
	154 Compare W9, 0
	155 JumpIfEqual {231}
	156 Move W8, [X8+32]
	157 NotImplemented "Instruction CMP not yet implemented."
	158 Move X0, X21
	159 Move X1, X23
	160 Move X2, X20
	161 Call BigInteger.ModPow, X0, X1, X2
	162 Move X8, [X27]
	163 Move X25, X0
	164 Move W9, [X8+224]
	165 Compare W9, 0
	166 JumpIfNotEqual {169}
	167 Move X0, X8
	168 Call 0x1C17DFC
	169 Compare X25, 0
	170 JumpIfEqual {230}
	171 Move X8, [X25]
	172 Move X0, X25
	173 Move X1, X22
	174 Move X9, [X8+312]
	175 Move X2, [X8+320]
	176 NotImplemented "Instruction BLR not yet implemented."
	177 Move TEMP, X0
	178 And TEMP, TEMP, 1
	179 Compare TEMP, 1
	180 JumpIfNotEqual {191}
	181 Move X0, [X27]
	182 Move W8, [X0+224]
	183 Compare W8, 0
	184 JumpIfNotEqual {186}
	185 Call 0x1C17DFC
	186 Move TEMP, 0
	187 Not TEMP
	188 Move W0, TEMP
	189 Call BigInteger.op_Implicit, X0
	190 Move X25, X0
	191 Move X0, [X27]
	192 Move W8, [X0+224]
	193 Compare W8, 0
	194 JumpIfNotEqual {196}
	195 Call 0x1C17DFC
	196 Move X0, X21
	197 Move X1, X20
	198 Call BigInteger.Jacobi, X0, X1
	199 Call BigInteger.op_Implicit, X0
	200 Compare X25, 0
	201 JumpIfEqual {230}
	202 Move X8, [X25]
	203 Move X1, X0
	204 Move X0, X25
	205 Move X9, [X8+312]
	206 Move X2, [X8+320]
	207 NotImplemented "Instruction BLR not yet implemented."
	208 Move TEMP, X0
	209 And TEMP, TEMP, 1
	210 Compare TEMP, 1
	211 JumpIfNotEqual {76}
	212 Add W26, W26, 1
	213 NotImplemented "Instruction CMP not yet implemented."
	214 Move W26, 1
	215 Move W0, W26
	216 Move X20, [X31+96]
	217 Move X19, [X31+104]
	218 Move X22, [X31+80]
	219 Move X21, [X31+88]
	220 Move X24, [X31+64]
	221 Move X23, [X31+72]
	222 Move X26, [X31+48]
	223 Move X25, [X31+56]
	224 Move X28, [X31+32]
	225 Move X27, [X31+40]
	226 Move X29, [X31+16]
	227 Move X30, [X31+24]
	228 Move V8, [X31+112]
	229 Return X0
	230 Call 0x1C17F20
	231 Call 0x1C17F28

Method: System.Boolean LucasStrongTest()

Disassembly:
	0x03531F44 BL 0x1C16F20
	0x03531F48 BL 0x1C16F28
	0x03531F4C STR X30, [X31 - 0x40]!
	0x03531F50 STP X24, X23, [X31 + 0x10]
	0x03531F54 STP X22, X21, [X31 + 0x20]
	0x03531F58 STP X20, X19, [X31 + 0x30]
	0x03531F5C ADRP X20, 0xEAE000
	0x03531F60 LDRB W8, [X20 + 0xBAF]
	0x03531F64 MOV X19, X0
	0x03531F68 TBNZ X8, 0x0, 0x3531F80
	0x03531F6C ADRP X0, 0xC03000
	0x03531F70 LDR X0, [X0 + 0x980]
	0x03531F74 BL 0x1C16CF4
	0x03531F78 MOVZ W8, 0x1
	0x03531F7C STRB W8, [X20 + 0xBAF]
	0x03531F80 LDR X8, [X19 + 0x10]
	0x03531F84 CBZ X8, 0x3532290
	0x03531F88 LDR W9, [X8 + 0x18]
	0x03531F8C CMP W9, 0x45
	0x03531F90 B.LS 0x353228C
	0x03531F94 LDR W8, [X8 + 0x134]
	0x03531F98 TBZ X8, 0x1F, 0x3531FC4
	0x03531F9C ADRP X8, 0xC03000
	0x03531FA0 LDR X8, [X8 + 0x980]
	0x03531FA4 LDR X0, [X8]
	0x03531FA8 LDR W8, [X0 + 0xE0]
	0x03531FAC CBNZ W8, 0x3531FB4
	0x03531FB0 BL 0x1C16DFC
	0x03531FB4 MOV X0, X19
	0x03531FB8 BL 0x352D5D0
	0x03531FBC MOV X19, X0
	0x03531FC0 CBZ X0, 0x3532290
	0x03531FC4 LDR W9, [X19 + 0x18]
	0x03531FC8 LDR X8, [X19 + 0x10]
	0x03531FCC CMP W9, 0x1
	0x03531FD0 B.NE 0x3532000
	0x03531FD4 CBZ X8, 0x3532290
	0x03531FD8 LDR W9, [X8 + 0x18]
	0x03531FDC CBZ W9, 0x353228C
	0x03531FE0 LDR W9, [X8 + 0x20]
	0x03531FE4 CMP W9, 0x4
	0x03531FE8 B.CS 0x3532004
	0x03531FEC AND X8, X9, 0xF
	0x03531FF0 MOVZ W9, 0xC
	0x03531FF4 LSRV W8, W9, W8
	0x03531FF8 AND W0, W8, 0x1
	0x03531FFC B 0x3532278
	0x03532000 CBZ X8, 0x3532290
	0x03532004 LDR W9, [X8 + 0x18]
	0x03532008 CBZ W9, 0x353228C
	0x0353200C LDRB W8, [X8 + 0x20]
	0x03532010 TBZ X8, 0x0, 0x3532274
	0x03532014 ADRP X23, 0xC02000
	0x03532018 LDR X23, [X23 + 0x980]
	0x0353201C MOV X21, X31
	0x03532020 LDR X8, [X23]
	0x03532024 LDR W9, [X8 + 0xE0]
	0x03532028 CBNZ W9, 0x3532038

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xEAF000
	005 Move W8, [X20+2988]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xC04000
	012 Move X0, [X0+2432]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2988], W8
	016 Move X8, [X19+16]
	017 Compare X8, 0
	018 JumpIfEqual {71}
	019 Move W9, [X8+24]
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move W8, [X8+308]
	022 Move TEMP, X8
	023 And TEMP, TEMP, -2147483648
	024 Compare TEMP, -2147483648
	025 JumpIfNotEqual {38}
	026 Move X8, 0xC04000
	027 Move X8, [X8+2432]
	028 Move X0, [X8]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X19
	034 Call BigInteger.op_UnaryNegation, X0
	035 Move X19, X0
	036 Compare X0, 0
	037 JumpIfEqual {71}
	038 Move W9, [X19+24]
	039 Move X8, [X19+16]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Compare X8, 0
	042 JumpIfEqual {71}
	043 Move W9, [X8+24]
	044 Compare W9, 0
	045 JumpIfEqual {72}
	046 Move W9, [X8+32]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 And X8, X9, 15
	049 Move W9, 12
	050 NotImplemented "Instruction LSRV not yet implemented."
	051 And W0, W8, 1
	052 Compare X8, 0
	053 JumpIfEqual {71}
	054 Move W9, [X8+24]
	055 Compare W9, 0
	056 JumpIfEqual {72}
	057 Move W8, [X8+32]
	058 Move TEMP, X8
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfEqual {67}
	062 Move W0, W31
	063 Move X20, [X31+16]
	064 Move X19, [X31+24]
	065 Move X30, [X31+32]
	066 Return X0
	067 Move X1, X19
	068 Move X20, [X31+16]
	069 Move X19, [X31+24]
	070 Move X30, [X31+32]
	071 Call 0x1C17F20
	072 Call 0x1C17F28

Method: System.Boolean LucasStrongTestHelper(Photon.SocketServer.Numeric.BigInteger thisVal)

Disassembly:
	0x0353202C MOV X0, X8
	0x03532030 BL 0x1C16DFC
	0x03532034 LDR X8, [X23]
	0x03532038 LDR X9, [X8 + 0xB8]
	0x0353203C LDR X9, [X9]
	0x03532040 CBZ X9, 0x3532290
	0x03532044 LDRSW X10, [X9 + 0x18]
	0x03532048 CMP X21, X10
	0x0353204C B.GE 0x35320CC
	0x03532050 LDR W10, [X8 + 0xE0]
	0x03532054 CBNZ W10, 0x3532070
	0x03532058 MOV X0, X8
	0x0353205C BL 0x1C16DFC
	0x03532060 LDR X8, [X23]
	0x03532064 LDR X8, [X8 + 0xB8]
	0x03532068 LDR X9, [X8]
	0x0353206C CBZ X9, 0x3532290
	0x03532070 LDR W8, [X9 + 0x18]
	0x03532074 CMP X21, X8
	0x03532078 B.CS 0x353228C
	0x0353207C ADD X8, X9, X21, 0x2, LSL
	0x03532080 LDR W0, [X8 + 0x20]
	0x03532084 BL 0x352C1F8
	0x03532088 MOV X1, X19
	0x0353208C MOV X20, X0
	0x03532090 BL 0x352DF5C
	0x03532094 LDR X8, [X23]
	0x03532098 TBNZ X0, 0x0, 0x35320CC
	0x0353209C LDR W9, [X8 + 0xE0]
	0x035320A0 CBNZ W9, 0x35320AC
	0x035320A4 MOV X0, X8
	0x035320A8 BL 0x1C16DFC
	0x035320AC MOV X0, X19
	0x035320B0 MOV X1, X20
	0x035320B4 BL 0x352EB38
	0x035320B8 CBZ X0, 0x3532290
	0x035320BC BL 0x3531F24
	0x035320C0 ADD X21, X21, 0x1
	0x035320C4 CBNZ W0, 0x3532020
	0x035320C8 B 0x3532274
	0x035320CC MOV X0, X8
	0x035320D0 BL 0x1C16F10
	0x035320D4 MOVZ W1, 0x1
	0x035320D8 MOV X20, X0
	0x035320DC BL 0x352BB6C
	0x035320E0 LDR X0, [X23]
	0x035320E4 LDR W8, [X0 + 0xE0]
	0x035320E8 CBNZ W8, 0x35320F0
	0x035320EC BL 0x1C16DFC
	0x035320F0 MOV X0, X19
	0x035320F4 MOV X1, X20
	0x035320F8 BL 0x352D228
	0x035320FC CBZ X0, 0x3532290
	0x03532100 LDR W8, [X0 + 0x18]
	0x03532104 MOV X20, X0
	0x03532108 CMP W8, 0x1
	0x0353210C B.LT 0x353217C
	0x03532110 LDR X9, [X20 + 0x10]
	0x03532114 MOV W10, W31
	0x03532118 MOV W11, W31
	0x0353211C CBZ X9, 0x3532290
	0x03532120 LDR W13, [X9 + 0x18]
	0x03532124 ADD X14, X9, W10, 0x2, SXTW
	0x03532128 MOV W12, W31
	0x0353212C ADD X14, X14, 0x20
	0x03532130 ADD W21, W11, 0x20
	0x03532134 MOVZ W15, 0x1
	0x03532138 CMP W10, W13
	0x0353213C B.CS 0x353228C
	0x03532140 LDR W16, [X14]
	0x03532144 ANDS W31, W16, W15, 0x0
	0x03532148 B.NE 0x3532160
	0x0353214C ADD W12, W12, 0x1
	0x03532150 CMP W12, 0x20
	0x03532154 UBFM W15, W15, 0x1F, 0x1E
	0x03532158 B.NE 0x3532138
	0x0353215C B 0x3532168
	0x03532160 ADD W21, W11, W12
	0x03532164 MOV W10, W8
	0x03532168 ADD W10, W10, 0x1
	0x0353216C CMP W10, W8
	0x03532170 MOV W11, W21
	0x03532174 B.LT 0x353211C
	0x03532178 B 0x3532180
	0x0353217C MOV W21, W31
	0x03532180 LDR X0, [X23]
	0x03532184 LDR W8, [X0 + 0xE0]
	0x03532188 CBNZ W8, 0x3532190
	0x0353218C BL 0x1C16DFC
	0x03532190 MOV X0, X20
	0x03532194 MOV W1, W21
	0x03532198 BL 0x352D904
	0x0353219C MOV X22, X0
	0x035321A0 MOV X0, X19
	0x035321A4 BL 0x352F9D0
	0x035321A8 MOVZ W0, 0x2
	0x035321AC BL 0x352C1F8
	0x035321B0 CBZ X0, 0x3532290
	0x035321B4 MOV X1, X22
	0x035321B8 MOV X2, X19
	0x035321BC BL 0x352F678
	0x035321C0 CBZ X0, 0x3532290
	0x035321C4 LDR W8, [X0 + 0x18]
	0x035321C8 MOV X22, X0
	0x035321CC CMP W8, 0x1
	0x035321D0 B.NE 0x3532208
	0x035321D4 LDR X8, [X22 + 0x10]
	0x035321D8 CBZ X8, 0x3532290
	0x035321DC LDR W9, [X8 + 0x18]
	0x035321E0 CBZ W9, 0x353228C
	0x035321E4 LDR W8, [X8 + 0x20]
	0x035321E8 CMP W8, 0x1
	0x035321EC B.NE 0x3532208
	0x035321F0 MOV X1, X19
	0x035321F4 LDP X20, X19, [X31 + 0x30]
	0x035321F8 LDP X22, X21, [X31 + 0x20]
	0x035321FC LDP X24, X23, [X31 + 0x10]
	0x03532200 LDR X30, [X31], #0x40
	0x03532204 B 0x353102C
	0x03532208 CMP W21, 0x1
	0x0353220C B.LT 0x3532274
	0x03532210 MOV W24, W31
	0x03532214 LDR X0, [X23]
	0x03532218 LDR W8, [X0 + 0xE0]
	0x0353221C CBNZ W8, 0x3532224
	0x03532220 BL 0x1C16DFC
	0x03532224 CBZ X22, 0x3532290
	0x03532228 LDR X8, [X22]
	0x0353222C MOV X0, X22
	0x03532230 MOV X1, X20
	0x03532234 LDP X9, X2, [X8 + 0x138]
	0x03532238 BLR X9
	0x0353223C TBNZ X0, 0x0, 0x35321F0
	0x03532240 LDR X0, [X23]
	0x03532244 LDR W8, [X0 + 0xE0]
	0x03532248 CBNZ W8, 0x3532250
	0x0353224C BL 0x1C16DFC
	0x03532250 MOV X0, X22
	0x03532254 MOV X1, X22
	0x03532258 BL 0x352C250
	0x0353225C MOV X1, X19
	0x03532260 BL 0x352EB38
	0x03532264 ADD W24, W24, 0x1
	0x03532268 CMP W24, W21
	0x0353226C MOV X22, X0
	0x03532270 B.LT 0x3532214
	0x03532274 MOV W0, W31
	0x03532278 LDP X20, X19, [X31 + 0x30]
	0x0353227C LDP X22, X21, [X31 + 0x20]
	0x03532280 LDP X24, X23, [X31 + 0x10]
	0x03532284 LDR X30, [X31], #0x40
	0x03532288 RET
	0x0353228C BL 0x1C16F28
	0x03532290 BL 0x1C16F20
	0x03532294 STP X30, X21, [X31 - 0x20]!
	0x03532298 STP X20, X19, [X31 + 0x10]
	0x0353229C LDR X8, [X0 + 0x10]
	0x035322A0 CBZ X8, 0x3532330
	0x035322A4 LDR W9, [X8 + 0x18]
	0x035322A8 CBZ W9, 0x3532334
	0x035322AC LDR W19, [X8 + 0x20]
	0x035322B0 CMP W9, 0x1
	0x035322B4 B.EQ 0x35322D0
	0x035322B8 LDR W8, [X8 + 0x24]
	0x035322BC BFM X19, X8, 0x20, 0x1F
	0x035322C0 MOV X0, X19
	0x035322C4 LDP X20, X19, [X31 + 0x10]
	0x035322C8 LDP X30, X21, [X31], #0x20
	0x035322CC RET
	0x035322D0 MOV X20, X0
	0x035322D4 BL 0x1C16F28
	0x035322D8 CMP W1, 0x1
	0x035322DC MOV X21, X0
	0x035322E0 B.NE 0x3532360
	0x035322E4 MOV X0, X21
	0x035322E8 BL 0x3EB1AD0
	0x035322EC MOV X21, X0
	0x035322F0 ADRP X0, 0xBC1000
	0x035322F4 LDR X0, [X0 + 0x7D0]
	0x035322F8 BL 0x1C16D08
	0x035322FC LDR X8, [X21]
	0x03532300 LDR X1, [X8]
	0x03532304 BL 0x1C17270
	0x03532308 TBZ X0, 0x0, 0x3532338
	0x0353230C BL 0x3EB1AE0
	0x03532310 LDR X8, [X20 + 0x10]
	0x03532314 CBZ X8, 0x3532330
	0x03532318 LDR W9, [X8 + 0x18]
	0x0353231C CBZ W9, 0x3532334
	0x03532320 LDRSW X8, [X8 + 0x20]
	0x03532324 CMP W8, 0x0
	0x03532328 CSEL X19, X8, X19, LT
	0x0353232C B 0x35322C0
	0x03532330 BL 0x1C16F20
	0x03532334 BL 0x1C16F28
	0x03532338 MOVZ W0, 0x8
	0x0353233C BL 0x3EB1AF0
	0x03532340 LDR X8, [X21]
	0x03532344 STR X8, [X0]
	0x03532348 ADRP X1, 0x982000
	0x0353234C ADD X1, X1, 0xE58
	0x03532350 MOV X2, X31
	0x03532354 BL 0x3EB1B00
	0x03532358 MOV X21, X0
	0x0353235C BL 0x3EB1AE0
	0x03532360 MOV X0, X21
	0x03532364 BL 0x1D2C690
	0x03532368 BL 0x1990590
	0x0353236C STP X30, X23, [X31 - 0x30]!
	0x03532370 STP X22, X21, [X31 + 0x10]
	0x03532374 STP X20, X19, [X31 + 0x20]
	0x03532378 ADRP X22, 0xEAD000
	0x0353237C ADRP X23, 0xC02000
	0x03532380 LDRB W8, [X22 + 0xBB1]
	0x03532384 LDR X23, [X23 + 0x980]
	0x03532388 MOV X19, X2
	0x0353238C MOV W20, W1
	0x03532390 MOV W21, W0
	0x03532394 TBNZ X8, 0x0, 0x35323AC
	0x03532398 ADRP X0, 0xC02000
	0x0353239C LDR X0, [X0 + 0x980]
	0x035323A0 BL 0x1C16CF4
	0x035323A4 MOVZ W8, 0x1
	0x035323A8 STRB W8, [X22 + 0xBB1]
	0x035323AC LDR X0, [X23]
	0x035323B0 BL 0x1C16F10
	0x035323B4 MOV X22, X0
	0x035323B8 BL 0x352BB04
	0x035323BC CBZ X22, 0x3532410
	0x035323C0 MOV X0, X22
	0x035323C4 MOV W1, W21
	0x035323C8 MOV X2, X19
	0x035323CC BL 0x35300F8
	0x035323D0 LDR X8, [X22 + 0x10]
	0x035323D4 CBZ X8, 0x3532410
	0x035323D8 LDR W9, [X8 + 0x18]
	0x035323DC CBZ W9, 0x3532414
	0x035323E0 LDR W9, [X8 + 0x20]
	0x035323E4 MOV X0, X22
	0x035323E8 MOV W1, W20
	0x035323EC ORR W9, W9, 0x1
	0x035323F0 STR W9, [X8 + 0x20]
	0x035323F4 BL 0x3531DDC
	0x035323F8 TBZ X0, 0x0, 0x35323C0
	0x035323FC MOV X0, X22
	0x03532400 LDP X20, X19, [X31 + 0x20]
	0x03532404 LDP X22, X21, [X31 + 0x10]
	0x03532408 LDP X30, X23, [X31], #0x30
	0x0353240C RET
	0x03532410 BL 0x1C16F20
	0x03532414 BL 0x1C16F28
	0x03532418 STP X30, X23, [X31 - 0x30]!
	0x0353241C STP X22, X21, [X31 + 0x10]
	0x03532420 STP X20, X19, [X31 + 0x20]
	0x03532424 ADRP X22, 0xEAD000
	0x03532428 ADRP X23, 0xC02000
	0x0353242C LDRB W8, [X22 + 0xBB2]
	0x03532430 LDR X23, [X23 + 0x980]
	0x03532434 MOV X19, X2
	0x03532438 MOV W20, W1
	0x0353243C MOV X21, X0
	0x03532440 TBNZ X8, 0x0, 0x3532458
	0x03532444 ADRP X0, 0xC02000
	0x03532448 LDR X0, [X0 + 0x980]
	0x0353244C BL 0x1C16CF4
	0x03532450 MOVZ W8, 0x1
	0x03532454 STRB W8, [X22 + 0xBB2]
	0x03532458 LDR X0, [X23]
	0x0353245C BL 0x1C16F10
	0x03532460 MOV X22, X0
	0x03532464 BL 0x352BB04
	0x03532468 CBZ X22, 0x35324C8
	0x0353246C MOV X0, X22
	0x03532470 MOV W1, W20
	0x03532474 MOV X2, X19
	0x03532478 BL 0x35300F8
	0x0353247C MOV X0, X22
	0x03532480 MOV X1, X21
	0x03532484 BL 0x352FF28
	0x03532488 CBZ X0, 0x35324C8
	0x0353248C LDR W8, [X0 + 0x18]
	0x03532490 CMP W8, 0x1
	0x03532494 B.NE 0x353246C
	0x03532498 LDR X8, [X0 + 0x10]
	0x0353249C CBZ X8, 0x35324C8
	0x035324A0 LDR W9, [X8 + 0x18]
	0x035324A4 CBZ W9, 0x35324CC
	0x035324A8 LDR W8, [X8 + 0x20]
	0x035324AC CMP W8, 0x1
	0x035324B0 B.NE 0x353246C
	0x035324B4 MOV X0, X22
	0x035324B8 LDP X20, X19, [X31 + 0x20]
	0x035324BC LDP X22, X21, [X31 + 0x10]
	0x035324C0 LDP X30, X23, [X31], #0x30
	0x035324C4 RET
	0x035324C8 BL 0x1C16F20
	0x035324CC BL 0x1C16F28
	0x035324D0 SUB X31, X31, 0x70
	0x035324D4 STP X29, X30, [X31 + 0x10]
	0x035324D8 STP X28, X27, [X31 + 0x20]
	0x035324DC STP X26, X25, [X31 + 0x30]
	0x035324E0 STP X24, X23, [X31 + 0x40]
	0x035324E4 STP X22, X21, [X31 + 0x50]
	0x035324E8 STP X20, X19, [X31 + 0x60]
	0x035324EC STR X1, [X31 + 0x8]
	0x035324F0 ADRP X20, 0xEAD000
	0x035324F4 ADRP X19, 0xC02000
	0x035324F8 ADRP X28, 0xC02000
	0x035324FC LDRB W8, [X20 + 0xBB3]
	0x03532500 LDR X19, [X19 + 0xA50]
	0x03532504 LDR X28, [X28 + 0x980]
	0x03532508 MOV X21, X0
	0x0353250C TBNZ X8, 0x0, 0x3532530
	0x03532510 ADRP X0, 0xC02000
	0x03532514 LDR X0, [X0 + 0xA50]
	0x03532518 BL 0x1C16CF4
	0x0353251C ADRP X0, 0xC02000
	0x03532520 LDR X0, [X0 + 0x980]
	0x03532524 BL 0x1C16CF4
	0x03532528 MOVZ W8, 0x1
	0x0353252C STRB W8, [X20 + 0xBB3]
	0x03532530 LDR X0, [X19]
	0x03532534 MOVZ W1, 0x2
	0x03532538 BL 0x1C16D6C
	0x0353253C LDR X8, [X28]
	0x03532540 MOV X29, X0
	0x03532544 LDR W9, [X8 + 0xE0]
	0x03532548 CBNZ W9, 0x3532554
	0x0353254C MOV X0, X8
	0x03532550 BL 0x1C16DFC
	0x03532554 MOV W0, W31
	0x03532558 BL 0x352C1F8
	0x0353255C CBZ X29, 0x3532864
	0x03532560 MOV X22, X0
	0x03532564 CBZ X0, 0x353257C
	0x03532568 LDR X8, [X29]
	0x0353256C MOV X0, X22
	0x03532570 LDR X1, [X8 + 0x40]
	0x03532574 BL 0x1C16E00
	0x03532578 CBZ X0, 0x3532978
	0x0353257C LDR W8, [X29 + 0x18]
	0x03532580 CBZ W8, 0x3532974
	0x03532584 MOVZ W0, 0x1
	0x03532588 STR X22, [X29 + 0x20]
	0x0353258C BL 0x352C1F8
	0x03532590 MOV X22, X0
	0x03532594 CBZ X0, 0x35325AC
	0x03532598 LDR X8, [X29]
	0x0353259C MOV X0, X22
	0x035325A0 LDR X1, [X8 + 0x40]
	0x035325A4 BL 0x1C16E00
	0x035325A8 CBZ X0, 0x3532978
	0x035325AC LDR W8, [X29 + 0x18]
	0x035325B0 CMP W8, 0x1
	0x035325B4 B.LS 0x3532974
	0x035325B8 STR X22, [X29 + 0x28]
	0x035325BC LDR X0, [X19]
	0x035325C0 MOVZ W1, 0x2
	0x035325C4 BL 0x1C16D6C
	0x035325C8 LDR X8, [X19]
	0x035325CC MOV X22, X0
	0x035325D0 MOVZ W1, 0x2
	0x035325D4 MOV X0, X8
	0x035325D8 BL 0x1C16D6C
	0x035325DC MOV X23, X0
	0x035325E0 MOV W0, W31
	0x035325E4 BL 0x352C1F8
	0x035325E8 CBZ X23, 0x3532864
	0x035325EC MOV X24, X0
	0x035325F0 CBZ X0, 0x3532608
	0x035325F4 LDR X8, [X23]
	0x035325F8 MOV X0, X24
	0x035325FC LDR X1, [X8 + 0x40]
	0x03532600 BL 0x1C16E00
	0x03532604 CBZ X0, 0x3532978
	0x03532608 LDR W8, [X23 + 0x18]
	0x0353260C CBZ W8, 0x3532974
	0x03532610 MOV W0, W31
	0x03532614 STR X24, [X23 + 0x20]
	0x03532618 BL 0x352C1F8
	0x0353261C MOV X24, X0
	0x03532620 CBZ X0, 0x3532638
	0x03532624 LDR X8, [X23]
	0x03532628 MOV X0, X24
	0x0353262C LDR X1, [X8 + 0x40]
	0x03532630 BL 0x1C16E00
	0x03532634 CBZ X0, 0x3532978
	0x03532638 LDR X8, [X23 + 0x18]
	0x0353263C CMP W8, 0x1
	0x03532640 B.LS 0x3532974
	0x03532644 STR X24, [X23 + 0x28]
	0x03532648 CBZ X21, 0x3532864
	0x0353264C LDR X26, [X31 + 0x8]
	0x03532650 MOV W19, W31
	0x03532654 LDR W9, [X21 + 0x18]
	0x03532658 CMP W9, 0x1
	0x0353265C B.GT 0x353267C
	0x03532660 B.NE 0x3532868
	0x03532664 LDR X9, [X21 + 0x10]
	0x03532668 CBZ X9, 0x3532864
	0x0353266C LDR W10, [X9 + 0x18]
	0x03532670 CBZ W10, 0x3532974
	0x03532674 LDR W9, [X9 + 0x20]
	0x03532678 CBZ W9, 0x3532868
	0x0353267C LDR X0, [X28]
	0x03532680 BL 0x1C16F10
	0x03532684 MOV X25, X0

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0xEAE000
	011 Move W8, [X20+2989]
	012 Move X19, X1
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xC03000
	018 Move X0, [X0+2432]
	019 Call 0x1C17CF4
	020 Move X0, 0xBC2000
	021 Move X0, [X0+1448]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2989], W8
	025 Move X25, 0xC03000
	026 Move X22, 0xBC2000
	027 Move X25, [X25+2432]
	028 Move X22, [X22+1448]
	029 Move TEMP, 0
	030 Not TEMP
	031 Move X23, TEMP
	032 Move W20, 5
	033 Move W24, 20
	034 Move X0, [X25]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X20
	040 Call BigInteger.op_Implicit, X0
	041 Move X1, X19
	042 Call BigInteger.Jacobi, X0, X1
	043 Compare W0, 0
	044 JumpIfEqual {46}
	045 Add W31, W0, 1
	046 Move X0, [X22]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 Move X0, [X25]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 NotImplemented "Instruction CSNEG not yet implemented."
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move X0, X21
	059 Call BigInteger.op_Implicit, X0
	060 Move X1, X19
	061 Call BigInteger.op_LessThan, X0, X1
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfEqual {444}
	066 Compare X24, 0
	067 JumpIfNotEqual {93}
	068 Compare X19, 0
	069 JumpIfEqual {456}
	070 Move X0, X19
	071 Call BigInteger.sqrt, X0
	072 Move X8, [X25]
	073 Move X21, X0
	074 Move W9, [X8+224]
	075 Compare W9, 0
	076 JumpIfNotEqual {79}
	077 Move X0, X8
	078 Call 0x1C17DFC
	079 Move X0, X21
	080 Move X1, X21
	081 Call BigInteger.op_Multiply, X0, X1
	082 Compare X0, 0
	083 JumpIfEqual {456}
	084 Move X8, [X0]
	085 Move X1, X19
	086 Move X9, [X8+312]
	087 Move X2, [X8+320]
	088 NotImplemented "Instruction BLR not yet implemented."
	089 Move TEMP, X0
	090 And TEMP, TEMP, 1
	091 Compare TEMP, 1
	092 JumpIfEqual {444}
	093 Move X0, [X22]
	094 Move W8, [X0+224]
	095 Compare W8, 0
	096 JumpIfNotEqual {98}
	097 Call 0x1C17DFC
	098 NotImplemented "Instruction CMP not yet implemented."
	099 NotImplemented "Instruction CSNEG not yet implemented."
	100 Add X8, X8, 2
	101 Multiply X20, X8, X23
	102 Subtract X23, X31, X23
	103 Subtract X24, X24, 1
	104 Move X0, [X25]
	105 Move W8, [X0+224]
	106 Compare W8, 0
	107 JumpIfNotEqual {109}
	108 Call 0x1C17DFC
	109 Move W0, 1
	110 Call BigInteger.op_Implicit, X0
	111 Move X1, X0
	112 Move X0, X19
	113 Call BigInteger.op_Addition, X0, X1
	114 Compare X0, 0
	115 JumpIfEqual {456}
	116 Move W8, [X0+24]
	117 Move X21, X0
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Move X9, [X21+16]
	120 Move W10, W31
	121 Move W11, W31
	122 Compare X9, 0
	123 JumpIfEqual {456}
	124 Move W13, [X9+24]
	125 Add X14, X9, W10
	126 Move W12, W31
	127 Add X14, X14, 32
	128 Add W23, W11, 32
	129 Move W15, 1
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Move W16, [X14]
	132 And W31, W16, W15
	133 Add W12, W12, 1
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Move W15, W15
	136 ShiftRight W15, 31
	137 And W15, W15, 0x3FFFFFFF
	138 Add W23, W11, W12
	139 Move W10, W8
	140 Add W10, W10, 1
	141 NotImplemented "Instruction CMP not yet implemented."
	142 Move W11, W23
	143 Move W23, W31
	144 Move X0, [X25]
	145 Move W8, [X0+224]
	146 Compare W8, 0
	147 JumpIfNotEqual {149}
	148 Call 0x1C17DFC
	149 Move X0, X21
	150 Move W1, W23
	151 Call BigInteger.op_RightShift, X0, X1
	152 Move X8, [X25]
	153 Move X24, X0
	154 Move X0, X8
	155 Call 0x1C17F10
	156 Move X22, X0
	157 Call BigInteger..ctor, X0
	158 Compare X19, 0
	159 JumpIfEqual {456}
	160 Compare X22, 0
	161 JumpIfEqual {456}
	162 Move X8, [X22+16]
	163 Compare X8, 0
	164 JumpIfEqual {456}
	165 Move W9, [X19+24]
	166 Move W10, [X8+24]
	167 Move W9, W9
	168 ShiftRight W9, 31
	169 And W9, W9, 0x3FFFFFFF
	170 NotImplemented "Instruction CMP not yet implemented."
	171 Move W10, 1
	172 Add X8, X8, W9
	173 Move W11, 1
	174 Or W9, W9, 1
	175 Subtract X10, X10, X20
	176 Move X0, X22
	177 Move X1, X19
	178 Move [X8+32], W11
	179 NotImplemented "Instruction SBFM not yet implemented."
	180 Move [X22+24], W9
	181 Call BigInteger.op_Division, X0, X1
	182 Move X22, X0
	183 Move W0, 1
	184 Call BigInteger.op_Implicit, X0
	185 Move X20, X0
	186 Move X0, X21
	187 Call BigInteger.op_Implicit, X0
	188 Move X1, X0
	189 Move X0, X20
	190 Move X2, X24
	191 Move X3, X19
	192 Move X4, X22
	193 Move W5, W31
	194 Call BigInteger.LucasSequenceHelper, X0, X1, X2, X3, X4, X5
	195 Compare X0, 0
	196 JumpIfEqual {456}
	197 Move X8, [X0+24]
	198 Move X20, X0
	199 Compare W8, 0
	200 JumpIfEqual {464}
	201 Move X9, [X20+32]
	202 Compare X9, 0
	203 JumpIfEqual {456}
	204 Move W10, [X9+24]
	205 NotImplemented "Instruction CMP not yet implemented."
	206 Move X9, [X9+16]
	207 Compare X9, 0
	208 JumpIfEqual {456}
	209 Move W10, [X9+24]
	210 Compare W10, 0
	211 JumpIfEqual {464}
	212 Move W9, [X9+32]
	213 Compare W9, 0
	214 JumpIfEqual {231}
	215 NotImplemented "Instruction CMP not yet implemented."
	216 Move X9, [X20+40]
	217 Compare X9, 0
	218 JumpIfEqual {456}
	219 Move W10, [X9+24]
	220 NotImplemented "Instruction CMP not yet implemented."
	221 Move X9, [X9+16]
	222 Compare X9, 0
	223 JumpIfEqual {456}
	224 Move W10, [X9+24]
	225 Compare W10, 0
	226 JumpIfEqual {464}
	227 Move W9, [X9+32]
	228 Compare W9, 0
	229 JumpIfEqual {231}
	230 Move W26, W31
	231 Move W26, 1
	232 NotImplemented "Instruction CMP not yet implemented."
	233 Subtract W24, W23, 1
	234 Move TEMP, X26
	235 And TEMP, TEMP, 1
	236 Compare TEMP, 1
	237 JumpIfNotEqual {239}
	238 Move W26, 1
	239 NotImplemented "Instruction CMP not yet implemented."
	240 Move X0, [X25]
	241 Move X23, [X20+40]
	242 Move W8, [X0+224]
	243 Compare W8, 0
	244 JumpIfNotEqual {246}
	245 Call 0x1C17DFC
	246 Move X0, X23
	247 Move X1, X23
	248 Call BigInteger.op_Multiply, X0, X1
	249 Move X1, X0
	250 Move X2, X19
	251 Move X3, X22
	252 Call BigInteger.BarrettReduction, X0, X1, X2, X3
	253 Move X23, X0
	254 Compare X0, 0
	255 JumpIfEqual {262}
	256 Move X8, [X20]
	257 Move X0, X23
	258 Move X1, [X8+64]
	259 Call 0x1C17E00
	260 Compare X0, 0
	261 JumpIfEqual {457}
	262 Move W8, [X20+24]
	263 NotImplemented "Instruction CMP not yet implemented."
	264 NotImplemented "Instruction CMP not yet implemented."
	265 Move [X20+40], X23
	266 Move X0, [X20+48]
	267 Move W1, 1
	268 Call BigInteger.op_LeftShift, X0, X1
	269 Move X1, X0
	270 Move X0, X23
	271 Call BigInteger.op_Subtraction, X0, X1
	272 Move X1, X19
	273 Call BigInteger.op_Modulus, X0, X1
	274 Compare X0, 0
	275 JumpIfEqual {460}
	276 Move X8, [X20]
	277 Move X23, X0
	278 Move X1, [X8+64]
	279 Call 0x1C17E00
	280 Compare X0, 0
	281 JumpIfEqual {457}
	282 Move W8, [X20+24]
	283 NotImplemented "Instruction CMP not yet implemented."
	284 Move [X20+40], X23
	285 Move W9, [X23+24]
	286 NotImplemented "Instruction CMP not yet implemented."
	287 Move X9, [X23+16]
	288 Compare X9, 0
	289 JumpIfEqual {456}
	290 Move W10, [X9+24]
	291 Compare W10, 0
	292 JumpIfEqual {464}
	293 Move W9, [X9+32]
	294 Compare W9, 0
	295 JumpIfEqual {238}
	296 Move W26, W31
	297 NotImplemented "Instruction CMP not yet implemented."
	298 Move X0, [X25]
	299 Move X23, [X20+48]
	300 Move W8, [X0+224]
	301 Compare W8, 0
	302 JumpIfNotEqual {304}
	303 Call 0x1C17DFC
	304 Move X0, X23
	305 Move X1, X23
	306 Call BigInteger.op_Multiply, X0, X1
	307 Move X1, X0
	308 Move X2, X19
	309 Move X3, X22
	310 Call BigInteger.BarrettReduction, X0, X1, X2, X3
	311 Move X23, X0
	312 Compare X0, 0
	313 JumpIfEqual {320}
	314 Move X8, [X20]
	315 Move X0, X23
	316 Move X1, [X8+64]
	317 Call 0x1C17E00
	318 Compare X0, 0
	319 JumpIfEqual {457}
	320 Move X8, [X20+24]
	321 NotImplemented "Instruction CMP not yet implemented."
	322 Subtract W24, W24, 1
	323 Move [X20+48], X23
	324 Compare W26, 0
	325 JumpIfEqual {444}
	326 Move X0, [X25]
	327 Move W8, [X0+224]
	328 Compare W8, 0
	329 JumpIfNotEqual {331}
	330 Call 0x1C17DFC
	331 Move X0, X21
	332 Call BigInteger.op_Implicit, X0
	333 Move X1, X0
	334 Move X0, X19
	335 Call BigInteger.gcd, X0, X1
	336 Compare X0, 0
	337 JumpIfEqual {456}
	338 Move W8, [X0+24]
	339 NotImplemented "Instruction CMP not yet implemented."
	340 Move X8, [X0+16]
	341 Compare X8, 0
	342 JumpIfEqual {456}
	343 Move W9, [X8+24]
	344 Compare W9, 0
	345 JumpIfEqual {464}
	346 Move W8, [X8+32]
	347 NotImplemented "Instruction CMP not yet implemented."
	348 Move W8, [X20+24]
	349 NotImplemented "Instruction CMP not yet implemented."
	350 Move X22, [X20+48]
	351 Compare X22, 0
	352 JumpIfEqual {456}
	353 Move X8, [X22+16]
	354 Compare X8, 0
	355 JumpIfEqual {456}
	356 Move W9, [X8+24]
	357 NotImplemented "Instruction CMP not yet implemented."
	358 Move W8, [X8+308]
	359 Move TEMP, X8
	360 And TEMP, TEMP, -2147483648
	361 Compare TEMP, -2147483648
	362 JumpIfNotEqual {383}
	363 Move X0, [X25]
	364 Move W8, [X0+224]
	365 Compare W8, 0
	366 JumpIfNotEqual {368}
	367 Call 0x1C17DFC
	368 Move X0, X22
	369 Move X1, X19
	370 Call BigInteger.op_Addition, X0, X1
	371 Move X22, X0
	372 Compare X0, 0
	373 JumpIfEqual {380}
	374 Move X8, [X20]
	375 Move X0, X22
	376 Move X1, [X8+64]
	377 Call 0x1C17E00
	378 Compare X0, 0
	379 JumpIfEqual {457}
	380 Move W8, [X20+24]
	381 NotImplemented "Instruction CMP not yet implemented."
	382 Move [X20+48], X22
	383 Move X0, [X25]
	384 Move W8, [X0+224]
	385 Compare W8, 0
	386 JumpIfNotEqual {388}
	387 Call 0x1C17DFC
	388 Move X0, X21
	389 Call BigInteger.op_Implicit, X0
	390 Move X1, X19
	391 Call BigInteger.Jacobi, X0, X1
	392 Move X8, W0
	393 Multiply X0, X21, X8
	394 Call BigInteger.op_Implicit, X0
	395 Move X1, X19
	396 Call BigInteger.op_Modulus, X0, X1
	397 Compare X0, 0
	398 JumpIfEqual {456}
	399 Move X8, [X0+16]
	400 Move X21, X0
	401 Compare X8, 0
	402 JumpIfEqual {456}
	403 Move W9, [X8+24]
	404 NotImplemented "Instruction CMP not yet implemented."
	405 Move W8, [X8+308]
	406 Move TEMP, X8
	407 And TEMP, TEMP, -2147483648
	408 Compare TEMP, -2147483648
	409 JumpIfNotEqual {419}
	410 Move X0, [X25]
	411 Move W8, [X0+224]
	412 Compare W8, 0
	413 JumpIfNotEqual {415}
	414 Call 0x1C17DFC
	415 Move X0, X21
	416 Move X1, X19
	417 Call BigInteger.op_Addition, X0, X1
	418 Move X21, X0
	419 Move W8, [X20+24]
	420 NotImplemented "Instruction CMP not yet implemented."
	421 Move X0, [X25]
	422 Move X19, [X20+48]
	423 Move W8, [X0+224]
	424 Compare W8, 0
	425 JumpIfNotEqual {427}
	426 Call 0x1C17DFC
	427 Compare X19, 0
	428 JumpIfEqual {456}
	429 Move X8, [X19]
	430 Move X0, X19
	431 Move X1, X21
	432 Move X20, [X31+64]
	433 Move X19, [X31+72]
	434 Move X3, [X8+312]
	435 Move X2, [X8+320]
	436 Move X22, [X31+48]
	437 Move X21, [X31+56]
	438 Move X24, [X31+32]
	439 Move X23, [X31+40]
	440 Move X26, [X31+16]
	441 Move X25, [X31+24]
	442 Move X30, [X31+80]
	443 CallNoReturn X3
	444 Move W0, W31
	445 Move X20, [X31+64]
	446 Move X19, [X31+72]
	447 Move X22, [X31+48]
	448 Move X21, [X31+56]
	449 Move X24, [X31+32]
	450 Move X23, [X31+40]
	451 Move X26, [X31+16]
	452 Move X25, [X31+24]
	453 Move X30, [X31+80]
	454 Return X0
	455 Move W0, 1
	456 Call 0x1C17F20
	457 Call 0x1C17F44
	458 Move X1, X31
	459 Call 0x1C17DEC
	460 Move W8, [X20+24]
	461 NotImplemented "Instruction CMP not yet implemented."
	462 Move [X20+40], X31
	463 Call 0x1C17F20
	464 Call 0x1C17F28

Method: System.Boolean isProbablePrime(System.Int32 confidence)

Disassembly:
	0x03532DDC LDR X8, [X20]
	0x03532DE0 MOV X0, X21
	0x03532DE4 LDR X1, [X8 + 0x40]
	0x03532DE8 BL 0x1C16E00
	0x03532DEC CBZ X0, 0x3532E94
	0x03532DF0 LDR W8, [X20 + 0x18]
	0x03532DF4 CBZ W8, 0x3532E8C
	0x03532DF8 MOVZ W0, 0x2
	0x03532DFC STR X21, [X20 + 0x20]
	0x03532E00 BL 0x352C1F8
	0x03532E04 MOV X1, X19
	0x03532E08 BL 0x352EB38
	0x03532E0C MOV X21, X0
	0x03532E10 CBZ X0, 0x3532E28
	0x03532E14 LDR X8, [X20]
	0x03532E18 MOV X0, X21
	0x03532E1C LDR X1, [X8 + 0x40]
	0x03532E20 BL 0x1C16E00
	0x03532E24 CBZ X0, 0x3532E94
	0x03532E28 LDR W8, [X20 + 0x18]
	0x03532E2C CMP W8, 0x1
	0x03532E30 B.LS 0x3532E8C
	0x03532E34 MOVZ W0, 0x1
	0x03532E38 STR X21, [X20 + 0x28]
	0x03532E3C BL 0x352C1F8
	0x03532E40 MOV X1, X19
	0x03532E44 BL 0x352EB38
	0x03532E48 MOV X19, X0
	0x03532E4C CBZ X0, 0x3532E64
	0x03532E50 LDR X8, [X20]
	0x03532E54 MOV X0, X19
	0x03532E58 LDR X1, [X8 + 0x40]
	0x03532E5C BL 0x1C16E00
	0x03532E60 CBZ X0, 0x3532E94
	0x03532E64 LDR W8, [X20 + 0x18]
	0x03532E68 CMP W8, 0x2
	0x03532E6C B.LS 0x3532E8C
	0x03532E70 STR X19, [X20 + 0x30]
	0x03532E74 MOV X0, X20
	0x03532E78 LDP X20, X19, [X31 + 0x30]
	0x03532E7C LDP X22, X21, [X31 + 0x20]
	0x03532E80 LDP X24, X23, [X31 + 0x10]
	0x03532E84 LDP X30, X25, [X31], #0x40
	0x03532E88 RET
	0x03532E8C BL 0x1C16F28
	0x03532E90 BL 0x1C16F20
	0x03532E94 BL 0x1C16F44
	0x03532E98 MOV X1, X31
	0x03532E9C BL 0x1C16DEC
	0x03532EA0 SUB X31, X31, 0x80
	0x03532EA4 STR D8, [X31 + 0x10]
	0x03532EA8 STP X29, X30, [X31 + 0x20]
	0x03532EAC STP X28, X27, [X31 + 0x30]
	0x03532EB0 STP X26, X25, [X31 + 0x40]
	0x03532EB4 STP X24, X23, [X31 + 0x50]
	0x03532EB8 STP X22, X21, [X31 + 0x60]
	0x03532EBC STP X20, X19, [X31 + 0x70]
	0x03532EC0 STR W0, [X31 + 0xC]
	0x03532EC4 ADRP X20, 0xEAD000
	0x03532EC8 ADRP X21, 0xBC8000
	0x03532ECC ADRP X19, 0xBC1000
	0x03532ED0 LDRB W8, [X20 + 0xBB8]
	0x03532ED4 LDR X21, [X21 + 0x2E8]
	0x03532ED8 LDR X19, [X19 + 0x618]
	0x03532EDC TBNZ X8, 0x0, 0x3532F30
	0x03532EE0 ADRP X0, 0xC02000
	0x03532EE4 LDR X0, [X0 + 0x980]
	0x03532EE8 BL 0x1C16CF4
	0x03532EEC ADRP X0, 0xBC1000
	0x03532EF0 LDR X0, [X0 + 0x618]
	0x03532EF4 BL 0x1C16CF4
	0x03532EF8 ADRP X0, 0xBC9000
	0x03532EFC LDR X0, [X0 + 0x958]
	0x03532F00 BL 0x1C16CF4
	0x03532F04 ADRP X0, 0xBC8000
	0x03532F08 LDR X0, [X0 + 0x2E8]
	0x03532F0C BL 0x1C16CF4
	0x03532F10 ADRP X0, 0xBC2000
	0x03532F14 LDR X0, [X0 + 0xFE0]
	0x03532F18 BL 0x1C16CF4
	0x03532F1C ADRP X0, 0xC02000
	0x03532F20 LDR X0, [X0 + 0xA70]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xEAE000
	008 Move W8, [X21+2990]
	009 Move W19, W1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xC03000
	016 Move X0, [X0+2432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+2990], W8
	020 Move X8, [X20+16]
	021 Compare X8, 0
	022 JumpIfEqual {107}
	023 Move W9, [X8+24]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X22, 0xC03000
	026 Move W8, [X8+308]
	027 Move X22, [X22+2432]
	028 Move TEMP, X8
	029 And TEMP, TEMP, -2147483648
	030 Compare TEMP, -2147483648
	031 JumpIfNotEqual {40}
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X20
	038 Call BigInteger.op_UnaryNegation, X0
	039 Move X20, X0
	040 Move X23, X31
	041 Move X0, [X22]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X8, [X0+184]
	048 Move X8, [X8]
	049 Compare X8, 0
	050 JumpIfEqual {107}
	051 NotImplemented "Instruction LDRSW not yet implemented."
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move W9, [X0+224]
	054 Compare W9, 0
	055 JumpIfNotEqual {62}
	056 Call 0x1C17DFC
	057 Move X8, [X22]
	058 Move X8, [X8+184]
	059 Move X8, [X8]
	060 Compare X8, 0
	061 JumpIfEqual {107}
	062 Move W9, [X8+24]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Add X8, X8, X23
	065 Move W0, [X8+32]
	066 Call BigInteger.op_Implicit, X0
	067 Move X1, X20
	068 Move X21, X0
	069 Call BigInteger.op_GreaterThanOrEqual, X0, X1
	070 Move TEMP, X0
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfEqual {95}
	074 Move X0, [X22]
	075 Move W8, [X0+224]
	076 Compare W8, 0
	077 JumpIfNotEqual {79}
	078 Call 0x1C17DFC
	079 Move X0, X20
	080 Move X1, X21
	081 Call BigInteger.op_Modulus, X0, X1
	082 Compare X0, 0
	083 JumpIfEqual {107}
	084 Call BigInteger.IntValue, X0
	085 Add X23, X23, 1
	086 Compare W0, 0
	087 JumpIfNotEqual {41}
	088 Move X20, [X31+32]
	089 Move X19, [X31+40]
	090 Move X22, [X31+16]
	091 Move X21, [X31+24]
	092 Move X30, [X31+48]
	093 Move X23, [X31+56]
	094 Return X0
	095 Compare X20, 0
	096 JumpIfEqual {107}
	097 Move X0, X20
	098 Move W1, W19
	099 Move X20, [X31+32]
	100 Move X19, [X31+40]
	101 Move X22, [X31+16]
	102 Move X21, [X31+24]
	103 Move X30, [X31+48]
	104 Move X23, [X31+56]
	105 Call BigInteger.RabinMillerTest, X0, X1
	106 Return X0
	107 Call 0x1C17F20
	108 Call 0x1C17F28

Method: System.Boolean isProbablePrime()

Disassembly:
	0x03532F4C BL 0x1C16D6C
	0x03532F50 LDR X8, [X19]
	0x03532F54 MOV X21, X0
	0x03532F58 MOVZ W1, 0x40
	0x03532F5C MOV X0, X8
	0x03532F60 BL 0x1C16D6C
	0x03532F64 LDR W8, [X31 + 0xC]
	0x03532F68 STR W31, [X31 + 0x1C]
	0x03532F6C CMP W8, 0x1
	0x03532F70 B.LT 0x3533464
	0x03532F74 CBZ X20, 0x353348C
	0x03532F78 ADRP X28, 0xBC9000
	0x03532F7C ADRP X8, 0xFFFFFFFFFD5BC000
	0x03532F80 LDR X28, [X28 + 0x958]
	0x03532F84 LDR V8, [X8 + 0x2E8]
	0x03532F88 MOV X22, X0
	0x03532F8C MOVZ X19, 0x7FF00000
	0x03532F90 MOVZ W29, 0x80000000
	0x03532F94 MOVZ X25, 0x40700000
	0x03532F98 LDR X8, [X20]
	0x03532F9C MOV X0, X20
	0x03532FA0 LDP X9, X1, [X8 + 0x1B8]
	0x03532FA4 BLR X9
	0x03532FA8 FMUL D0, D0, D8
	0x03532FAC FMOV D1, X19
	0x03532FB0 FCVTZS W8, D0
	0x03532FB4 FCMP D0, D1
	0x03532FB8 CSEL W23, W29, W8, EQ
	0x03532FBC CBZ W23, 0x3532F98
	0x03532FC0 LDR X8, [X20]
	0x03532FC4 MOV X0, X20
	0x03532FC8 LDP X9, X1, [X8 + 0x1B8]
	0x03532FCC BLR X9
	0x03532FD0 FMUL D0, D0, D8
	0x03532FD4 FMOV D1, X19
	0x03532FD8 FCVTZS W8, D0
	0x03532FDC FCMP D0, D1
	0x03532FE0 CSEL W24, W29, W8, EQ
	0x03532FE4 CBZ W24, 0x3532FC0
	0x03532FE8 MOV W26, W31
	0x03532FEC MOV W8, W31
	0x03532FF0 CMP W26, 0x40
	0x03532FF4 MOV W27, W8
	0x03532FF8 B.GE 0x3533078
	0x03532FFC CMP W26, W23
	0x03533000 B.GE 0x353303C
	0x03533004 LDR X8, [X20]
	0x03533008 MOV X0, X20
	0x0353300C LDP X9, X1, [X8 + 0x1B8]
	0x03533010 BLR X9
	0x03533014 CBZ X21, 0x353348C
	0x03533018 LDR W8, [X21 + 0x18]
	0x0353301C CMP W26, W8
	0x03533020 B.CS 0x3533488
	0x03533024 FMOV D1, X25
	0x03533028 FMUL D0, D0, D1
	0x0353302C FCVTZS W8, D0
	0x03533030 FCMP D0, 0x0
	0x03533034 CSEL W8, W8, W8, MI
	0x03533038 B 0x3533050
	0x0353303C CBZ X21, 0x353348C
	0x03533040 LDR W8, [X21 + 0x18]
	0x03533044 CMP W26, W8
	0x03533048 B.CS 0x3533488
	0x0353304C MOV W8, W31
	0x03533050 ADD X9, X21, W26, SXTW
	0x03533054 STRB W8, [X9 + 0x20]
	0x03533058 LDR W9, [X21 + 0x18]
	0x0353305C CMP W26, W9
	0x03533060 B.CS 0x3533488
	0x03533064 ANDS W31, W8, 0xFF
	0x03533068 CSET W8, NE
	0x0353306C ORR W8, W27, W8, 0x0
	0x03533070 ADD W26, W26, 0x1
	0x03533074 B 0x3532FF0
	0x03533078 MOV W26, W31
	0x0353307C MOV W8, W31
	0x03533080 TBZ X27, 0x0, 0x3532FF0
	0x03533084 MOV W26, W31
	0x03533088 MOV W8, W31
	0x0353308C CMP W26, 0x40
	0x03533090 MOV W27, W8
	0x03533094 B.GE 0x3533114
	0x03533098 CMP W26, W24
	0x0353309C B.GE 0x35330D8
	0x035330A0 LDR X8, [X20]
	0x035330A4 MOV X0, X20
	0x035330A8 LDP X9, X1, [X8 + 0x1B8]
	0x035330AC BLR X9
	0x035330B0 CBZ X22, 0x353348C
	0x035330B4 LDR W8, [X22 + 0x18]
	0x035330B8 CMP W26, W8
	0x035330BC B.CS 0x3533488
	0x035330C0 FMOV D1, X25
	0x035330C4 FMUL D0, D0, D1
	0x035330C8 FCVTZS W8, D0
	0x035330CC FCMP D0, 0x0
	0x035330D0 CSEL W8, W8, W8, MI
	0x035330D4 B 0x35330EC
	0x035330D8 CBZ X22, 0x353348C
	0x035330DC LDR W8, [X22 + 0x18]
	0x035330E0 CMP W26, W8
	0x035330E4 B.CS 0x3533488
	0x035330E8 MOV W8, W31
	0x035330EC ADD X9, X22, W26, SXTW
	0x035330F0 STRB W8, [X9 + 0x20]
	0x035330F4 LDR W9, [X22 + 0x18]
	0x035330F8 CMP W26, W9
	0x035330FC B.CS 0x3533488
	0x03533100 ANDS W31, W8, 0xFF
	0x03533104 CSET W8, NE
	0x03533108 ORR W8, W27, W8, 0x0
	0x0353310C ADD W26, W26, 0x1
	0x03533110 B 0x353308C
	0x03533114 MOV W26, W31
	0x03533118 MOV W8, W31
	0x0353311C TBZ X27, 0x0, 0x353308C
	0x03533120 CBZ X21, 0x353348C
	0x03533124 LDR W8, [X21 + 0x18]
	0x03533128 CBZ W8, 0x3533488
	0x0353312C LDRB W8, [X21 + 0x20]
	0x03533130 CBNZ W8, 0x353316C
	0x03533134 LDR X8, [X20]
	0x03533138 MOV X0, X20
	0x0353313C LDP X9, X1, [X8 + 0x1B8]
	0x03533140 BLR X9
	0x03533144 LDR X8, [X21 + 0x18]
	0x03533148 CBZ W8, 0x3533488
	0x0353314C FMOV D1, X25
	0x03533150 FMUL D0, D0, D1
	0x03533154 FCVTZS W9, D0
	0x03533158 FCMP D0, 0x0
	0x0353315C CSEL W9, W9, W9, MI
	0x03533160 STRB W9, [X21 + 0x20]
	0x03533164 CBNZ W8, 0x353312C
	0x03533168 B 0x3533488
	0x0353316C CBZ X22, 0x353348C
	0x03533170 LDR W8, [X22 + 0x18]
	0x03533174 CBZ W8, 0x3533488
	0x03533178 LDRB W8, [X22 + 0x20]
	0x0353317C CBNZ W8, 0x35331B8
	0x03533180 LDR X8, [X20]
	0x03533184 MOV X0, X20
	0x03533188 LDP X9, X1, [X8 + 0x1B8]
	0x0353318C BLR X9
	0x03533190 LDR X8, [X22 + 0x18]
	0x03533194 CBZ W8, 0x3533488
	0x03533198 FMOV D1, X25
	0x0353319C FMUL D0, D0, D1
	0x035331A0 FCVTZS W9, D0
	0x035331A4 FCMP D0, 0x0
	0x035331A8 CSEL W9, W9, W9, MI
	0x035331AC STRB W9, [X22 + 0x20]
	0x035331B0 CBNZ W8, 0x3533178
	0x035331B4 B 0x3533488
	0x035331B8 LDR X0, [X28]
	0x035331BC LDR W26, [X31 + 0x1C]
	0x035331C0 LDR W8, [X0 + 0xE0]
	0x035331C4 CBNZ W8, 0x35331CC
	0x035331C8 BL 0x1C16DFC
	0x035331CC MOV W0, W26
	0x035331D0 MOV X1, X31
	0x035331D4 STR W26, [X31 + 0x18]
	0x035331D8 BL 0x33C332C
	0x035331DC ADRP X28, 0xC01000
	0x035331E0 LDR X28, [X28 + 0x980]
	0x035331E4 LDR X0, [X28]
	0x035331E8 BL 0x1C16F10
	0x035331EC MOV X1, X21
	0x035331F0 MOV W2, W23
	0x035331F4 MOV X27, X0
	0x035331F8 BL 0x352CBAC
	0x035331FC LDR X0, [X28]
	0x03533200 BL 0x1C16F10
	0x03533204 MOV X1, X22
	0x03533208 MOV W2, W24
	0x0353320C MOV X26, X0
	0x03533210 BL 0x352CBAC
	0x03533214 LDR X0, [X28]
	0x03533218 LDR W8, [X0 + 0xE0]
	0x0353321C CBNZ W8, 0x3533224
	0x03533220 BL 0x1C16DFC
	0x03533224 MOV X0, X27
	0x03533228 MOV X1, X26
	0x0353322C BL 0x352E988
	0x03533230 MOV X24, X0
	0x03533234 MOV X0, X27
	0x03533238 MOV X1, X26
	0x0353323C BL 0x352EB38
	0x03533240 MOV X28, X0
	0x03533244 MOV X0, X24
	0x03533248 MOV X1, X26
	0x0353324C BL 0x352C250
	0x03533250 MOV X1, X28
	0x03533254 BL 0x352C728
	0x03533258 CBZ X0, 0x353348C
	0x0353325C LDR X8, [X0]
	0x03533260 MOV X1, X27
	0x03533264 MOV X23, X0
	0x03533268 LDP X9, X2, [X8 + 0x138]
	0x0353326C BLR X9
	0x03533270 TBZ X0, 0x0, 0x3533298
	0x03533274 LDR W8, [X31 + 0x18]
	0x03533278 LDR W9, [X31 + 0xC]
	0x0353327C ADRP X28, 0xBC8000
	0x03533280 ADD W8, W8, 0x1
	0x03533284 STR W8, [X31 + 0x1C]
	0x03533288 LDR X28, [X28 + 0x958]
	0x0353328C CMP W8, W9
	0x03533290 B.LT 0x3532F98

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xEAE000
	009 Move W8, [X20+2991]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xC03000
	016 Move X0, [X0+2432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+2991], W8
	020 Move X8, [X19+16]
	021 Compare X8, 0
	022 JumpIfEqual {245}
	023 Move W9, [X8+24]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W8, [X8+308]
	026 Move TEMP, X8
	027 And TEMP, TEMP, -2147483648
	028 Compare TEMP, -2147483648
	029 JumpIfNotEqual {42}
	030 Move X8, 0xC03000
	031 Move X8, [X8+2432]
	032 Move X0, [X8]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X19
	038 Call BigInteger.op_UnaryNegation, X0
	039 Move X19, X0
	040 Compare X0, 0
	041 JumpIfEqual {245}
	042 Move W9, [X19+24]
	043 Move X8, [X19+16]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Compare X8, 0
	046 JumpIfEqual {245}
	047 Move W9, [X8+24]
	048 Compare W9, 0
	049 JumpIfEqual {244}
	050 Move W9, [X8+32]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 And X8, X9, 15
	053 Move W9, 12
	054 NotImplemented "Instruction LSRV not yet implemented."
	055 And W0, W8, 1
	056 Compare X8, 0
	057 JumpIfEqual {245}
	058 Move W9, [X8+24]
	059 Compare W9, 0
	060 JumpIfEqual {244}
	061 Move W8, [X8+32]
	062 Move TEMP, X8
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {235}
	066 Move X23, 0xC02000
	067 Move X23, [X23+2432]
	068 Move X21, X31
	069 Move X8, [X23]
	070 Move W9, [X8+224]
	071 Compare W9, 0
	072 JumpIfNotEqual {76}
	073 Move X0, X8
	074 Call 0x1C17DFC
	075 Move X8, [X23]
	076 Move X9, [X8+184]
	077 Move X9, [X9]
	078 Compare X9, 0
	079 JumpIfEqual {245}
	080 NotImplemented "Instruction LDRSW not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move W10, [X8+224]
	083 Compare W10, 0
	084 JumpIfNotEqual {92}
	085 Move X0, X8
	086 Call 0x1C17DFC
	087 Move X8, [X23]
	088 Move X8, [X8+184]
	089 Move X9, [X8]
	090 Compare X9, 0
	091 JumpIfEqual {245}
	092 Move W8, [X9+24]
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Add X8, X9, X21
	095 Move W0, [X8+32]
	096 Call BigInteger.op_Implicit, X0
	097 Move X1, X19
	098 Move X20, X0
	099 Call BigInteger.op_GreaterThanOrEqual, X0, X1
	100 Move X8, [X23]
	101 Move TEMP, X0
	102 And TEMP, TEMP, 1
	103 Compare TEMP, 1
	104 JumpIfEqual {119}
	105 Move W9, [X8+224]
	106 Compare W9, 0
	107 JumpIfNotEqual {110}
	108 Move X0, X8
	109 Call 0x1C17DFC
	110 Move X0, X19
	111 Move X1, X20
	112 Call BigInteger.op_Modulus, X0, X1
	113 Compare X0, 0
	114 JumpIfEqual {245}
	115 Call BigInteger.IntValue, X0
	116 Add X21, X21, 1
	117 Compare W0, 0
	118 JumpIfNotEqual {69}
	119 Move X0, X8
	120 Call 0x1C17F10
	121 Move W1, 1
	122 Move X20, X0
	123 Call BigInteger..ctor, X0, X1
	124 Move X0, [X23]
	125 Move W8, [X0+224]
	126 Compare W8, 0
	127 JumpIfNotEqual {129}
	128 Call 0x1C17DFC
	129 Move X0, X19
	130 Move X1, X20
	131 Call BigInteger.op_Subtraction, X0, X1
	132 Compare X0, 0
	133 JumpIfEqual {245}
	134 Move W8, [X0+24]
	135 Move X20, X0
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Move X9, [X20+16]
	138 Move W10, W31
	139 Move W11, W31
	140 Compare X9, 0
	141 JumpIfEqual {245}
	142 Move W13, [X9+24]
	143 Add X14, X9, W10
	144 Move W12, W31
	145 Add X14, X14, 32
	146 Add W21, W11, 32
	147 Move W15, 1
	148 NotImplemented "Instruction CMP not yet implemented."
	149 Move W16, [X14]
	150 And W31, W16, W15
	151 Add W12, W12, 1
	152 NotImplemented "Instruction CMP not yet implemented."
	153 Move W15, W15
	154 ShiftRight W15, 31
	155 And W15, W15, 0x3FFFFFFF
	156 Add W21, W11, W12
	157 Move W10, W8
	158 Add W10, W10, 1
	159 NotImplemented "Instruction CMP not yet implemented."
	160 Move W11, W21
	161 Move W21, W31
	162 Move X0, [X23]
	163 Move W8, [X0+224]
	164 Compare W8, 0
	165 JumpIfNotEqual {167}
	166 Call 0x1C17DFC
	167 Move X0, X20
	168 Move W1, W21
	169 Call BigInteger.op_RightShift, X0, X1
	170 Move X22, X0
	171 Move X0, X19
	172 Call BigInteger.bitCount, X0
	173 Move W0, 2
	174 Call BigInteger.op_Implicit, X0
	175 Compare X0, 0
	176 JumpIfEqual {245}
	177 Move X1, X22
	178 Move X2, X19
	179 Call BigInteger.ModPow, X0, X1, X2
	180 Compare X0, 0
	181 JumpIfEqual {245}
	182 Move W8, [X0+24]
	183 Move X22, X0
	184 NotImplemented "Instruction CMP not yet implemented."
	185 Move X8, [X22+16]
	186 Compare X8, 0
	187 JumpIfEqual {245}
	188 Move W9, [X8+24]
	189 Compare W9, 0
	190 JumpIfEqual {244}
	191 Move W8, [X8+32]
	192 NotImplemented "Instruction CMP not yet implemented."
	193 Move X1, X19
	194 Move X20, [X31+48]
	195 Move X19, [X31+56]
	196 Move X22, [X31+32]
	197 Move X21, [X31+40]
	198 Move X24, [X31+16]
	199 Move X23, [X31+24]
	200 Move X30, [X31+64]
	201 Call BigInteger.LucasStrongTestHelper, X0, X1
	202 Return X0
	203 NotImplemented "Instruction CMP not yet implemented."
	204 Move W24, W31
	205 Move X0, [X23]
	206 Move W8, [X0+224]
	207 Compare W8, 0
	208 JumpIfNotEqual {210}
	209 Call 0x1C17DFC
	210 Compare X22, 0
	211 JumpIfEqual {245}
	212 Move X8, [X22]
	213 Move X0, X22
	214 Move X1, X20
	215 Move X9, [X8+312]
	216 Move X2, [X8+320]
	217 NotImplemented "Instruction BLR not yet implemented."
	218 Move TEMP, X0
	219 And TEMP, TEMP, 1
	220 Compare TEMP, 1
	221 JumpIfEqual {193}
	222 Move X0, [X23]
	223 Move W8, [X0+224]
	224 Compare W8, 0
	225 JumpIfNotEqual {227}
	226 Call 0x1C17DFC
	227 Move X0, X22
	228 Move X1, X22
	229 Call BigInteger.op_Multiply, X0, X1
	230 Move X1, X19
	231 Call BigInteger.op_Modulus, X0, X1
	232 Add W24, W24, 1
	233 NotImplemented "Instruction CMP not yet implemented."
	234 Move X22, X0
	235 Move W0, W31
	236 Move X20, [X31+48]
	237 Move X19, [X31+56]
	238 Move X22, [X31+32]
	239 Move X21, [X31+40]
	240 Move X24, [X31+16]
	241 Move X23, [X31+24]
	242 Move X30, [X31+64]
	243 Return X0
	244 Call 0x1C17F28
	245 Call 0x1C17F20

Method: System.Int32 IntValue()

Disassembly:
	0x03532F24 BL 0x1C16CF4
	0x03532F28 MOVZ W8, 0x1
	0x03532F2C STRB W8, [X20 + 0xBB8]
	0x03532F30 LDR X0, [X21]
	0x03532F34 BL 0x1C16F10
	0x03532F38 MOV X1, X31
	0x03532F3C MOV X20, X0
	0x03532F40 BL 0x338E3CC
	0x03532F44 LDR X0, [X19]
	0x03532F48 MOVZ W1, 0x40

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move W9, [X8+24]
	006 Compare W9, 0
	007 JumpIfEqual {12}
	008 Move W0, [X8+32]
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20
	012 Call 0x1C17F28

Method: System.Int64 LongValue()

Disassembly:
	0x03533294 B 0x3533464
	0x03533298 ADD X0, X31, 0x1C
	0x0353329C MOV X1, X31
	0x035332A0 BL 0x337B6E0
	0x035332A4 ADRP X8, 0xC01000
	0x035332A8 LDR X8, [X8 + 0xA70]
	0x035332AC MOV X1, X0
	0x035332B0 MOV X2, X31
	0x035332B4 LDR X8, [X8]
	0x035332B8 MOV X0, X8
	0x035332BC BL 0x321B938
	0x035332C0 ADRP X21, 0xBC8000
	0x035332C4 LDR X21, [X21 + 0x958]
	0x035332C8 MOV X19, X0
	0x035332CC LDR X8, [X21]
	0x035332D0 LDR W9, [X8 + 0xE0]
	0x035332D4 CBNZ W9, 0x35332E0
	0x035332D8 MOV X0, X8
	0x035332DC BL 0x1C16DFC
	0x035332E0 MOV X0, X19
	0x035332E4 MOV X1, X31
	0x035332E8 BL 0x33C33A0
	0x035332EC CBZ X27, 0x3533304
	0x035332F0 LDR X8, [X27]
	0x035332F4 MOV X0, X27
	0x035332F8 LDP X9, X1, [X8 + 0x168]
	0x035332FC BLR X9
	0x03533300 B 0x3533308
	0x03533304 MOV X0, X31
	0x03533308 ADRP X20, 0xBC1000
	0x0353330C LDR X20, [X20 + 0xFE0]
	0x03533310 MOV X2, X31
	0x03533314 LDR X1, [X20]
	0x03533318 BL 0x321B938
	0x0353331C LDR X8, [X21]
	0x03533320 MOV X19, X0
	0x03533324 LDR W9, [X8 + 0xE0]
	0x03533328 CBNZ W9, 0x3533334
	0x0353332C MOV X0, X8
	0x03533330 BL 0x1C16DFC
	0x03533334 MOV X0, X19
	0x03533338 MOV X1, X31
	0x0353333C BL 0x33C33A0
	0x03533340 CBZ X26, 0x3533358
	0x03533344 LDR X8, [X26]
	0x03533348 MOV X0, X26
	0x0353334C LDP X9, X1, [X8 + 0x168]
	0x03533350 BLR X9
	0x03533354 B 0x353335C
	0x03533358 MOV X0, X31
	0x0353335C LDR X1, [X20]
	0x03533360 MOV X2, X31
	0x03533364 BL 0x321B938
	0x03533368 LDR X8, [X21]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X0+16]
	006 Compare X8, 0
	007 JumpIfEqual {48}
	008 Move W9, [X8+24]
	009 Compare W9, 0
	010 JumpIfEqual {49}
	011 Move W19, [X8+32]
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W8, [X8+36]
	014 NotImplemented "Instruction BFM not yet implemented."
	015 Move X0, X19
	016 Move X20, [X31+16]
	017 Move X19, [X31+24]
	018 Move X30, [X31+32]
	019 Move X21, [X31+40]
	020 Return X0
	021 Move X20, X0
	022 Call 0x1C17F28
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X21, X0
	025 Move X0, X21
	026 Call 0x3EB2AD0
	027 Move X21, X0
	028 Move X0, 0xBC1000
	029 Move X0, [X0+2000]
	030 Call 0x1C17D08
	031 Move X8, [X21]
	032 Move X1, [X8]
	033 Call 0x1C18270
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {50}
	038 Call 0x3EB2AE0
	039 Move X8, [X20+16]
	040 Compare X8, 0
	041 JumpIfEqual {48}
	042 Move W9, [X8+24]
	043 Compare W9, 0
	044 JumpIfEqual {49}
	045 NotImplemented "Instruction LDRSW not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 NotImplemented "Instruction CSEL not yet implemented."
	048 Call 0x1C17F20
	049 Call 0x1C17F28
	050 Move W0, 8
	051 Call 0x3EB2AF0
	052 Move X8, [X21]
	053 Move [X0], X8
	054 Move X1, 0x982000
	055 Add X1, X1, 3672
	056 Move X2, X31
	057 Call 0x3EB2B00
	058 Move X21, X0
	059 Call 0x3EB2AE0
	060 Move X0, X21
	061 Call 0x1D2D690
	062 Call 0x1991590

Method: System.Int32 Jacobi(Photon.SocketServer.Numeric.BigInteger a, Photon.SocketServer.Numeric.BigInteger b)

Disassembly:
	0x03531C04 BL 0x352FA7C
	0x03531C08 MOV X26, X0
	0x03531C0C LDR X0, [X24]
	0x03531C10 LDR W8, [X0 + 0xE0]
	0x03531C14 CBNZ W8, 0x3531C1C
	0x03531C18 BL 0x1C16DFC
	0x03531C1C MOV X0, X26
	0x03531C20 MOV X1, X23
	0x03531C24 BL 0x352C250
	0x03531C28 MOV X1, X22
	0x03531C2C BL 0x352EB38
	0x03531C30 CMP W20, 0x1
	0x03531C34 MOV X23, X0
	0x03531C38 B.LT 0x3531CE0
	0x03531C3C LDR X0, [X24]
	0x03531C40 MOV X26, X24
	0x03531C44 LDR W8, [X0 + 0xE0]
	0x03531C48 CBNZ W8, 0x3531C50
	0x03531C4C BL 0x1C16DFC
	0x03531C50 MOV X0, X25
	0x03531C54 MOV X1, X19
	0x03531C58 BL 0x352C250
	0x03531C5C MOV X1, X22
	0x03531C60 BL 0x352EB38
	0x03531C64 MOV X25, X0
	0x03531C68 MOV X0, X19
	0x03531C6C MOV X1, X19
	0x03531C70 BL 0x352C250
	0x03531C74 MOV X24, X0
	0x03531C78 MOVZ W1, 0x1
	0x03531C7C MOV X0, X23
	0x03531C80 BL 0x352D78C
	0x03531C84 MOV X1, X0
	0x03531C88 MOV X0, X24
	0x03531C8C BL 0x352D228
	0x03531C90 MOV X1, X22
	0x03531C94 BL 0x352EB38
	0x03531C98 LDR X8, [X26]
	0x03531C9C MOV X19, X0
	0x03531CA0 MOV X24, X26
	0x03531CA4 LDR W9, [X8 + 0xE0]
	0x03531CA8 CBNZ W9, 0x3531CB4
	0x03531CAC MOV X0, X8
	0x03531CB0 BL 0x1C16DFC
	0x03531CB4 MOV X0, X23
	0x03531CB8 MOV X1, X23
	0x03531CBC BL 0x352C250
	0x03531CC0 CBZ X22, 0x3531D80
	0x03531CC4 LDR X3, [X31 + 0x18]
	0x03531CC8 MOV X1, X0
	0x03531CCC MOV X2, X22
	0x03531CD0 BL 0x352FA7C
	0x03531CD4 SUBS W20, W20, 0x1
	0x03531CD8 MOV X23, X0
	0x03531CDC B.NE 0x3531C3C
	0x03531CE0 LDR X20, [X31]
	0x03531CE4 CBZ X20, 0x3531D80
	0x03531CE8 CBZ X25, 0x3531D00
	0x03531CEC LDR X8, [X20]
	0x03531CF0 MOV X0, X25
	0x03531CF4 LDR X1, [X8 + 0x40]
	0x03531CF8 BL 0x1C16E00
	0x03531CFC CBZ X0, 0x3531D88
	0x03531D00 LDR W8, [X20 + 0x18]
	0x03531D04 CBZ W8, 0x3531D84
	0x03531D08 STR X25, [X20 + 0x20]
	0x03531D0C CBZ X19, 0x3531D28
	0x03531D10 LDR X8, [X20]
	0x03531D14 MOV X0, X19
	0x03531D18 LDR X1, [X8 + 0x40]
	0x03531D1C BL 0x1C16E00
	0x03531D20 CBZ X0, 0x3531D88
	0x03531D24 LDR W8, [X20 + 0x18]
	0x03531D28 CMP W8, 0x1
	0x03531D2C B.LS 0x3531D84
	0x03531D30 STR X19, [X20 + 0x28]
	0x03531D34 CBZ X23, 0x3531D50
	0x03531D38 LDR X8, [X20]
	0x03531D3C MOV X0, X23
	0x03531D40 LDR X1, [X8 + 0x40]
	0x03531D44 BL 0x1C16E00
	0x03531D48 CBZ X0, 0x3531D88
	0x03531D4C LDR W8, [X20 + 0x18]
	0x03531D50 CMP W8, 0x2
	0x03531D54 B.LS 0x3531D84
	0x03531D58 STR X23, [X20 + 0x30]
	0x03531D5C MOV X0, X20
	0x03531D60 LDP X20, X19, [X31 + 0x70]
	0x03531D64 LDP X22, X21, [X31 + 0x60]
	0x03531D68 LDP X24, X23, [X31 + 0x50]
	0x03531D6C LDP X26, X25, [X31 + 0x40]
	0x03531D70 LDP X28, X27, [X31 + 0x30]
	0x03531D74 LDP X29, X30, [X31 + 0x20]
	0x03531D78 ADD X31, X31, 0x80
	0x03531D7C RET
	0x03531D80 BL 0x1C16F20
	0x03531D84 BL 0x1C16F28
	0x03531D88 BL 0x1C16F44
	0x03531D8C MOV X1, X31
	0x03531D90 BL 0x1C16DEC
	0x03531D94 ADRP X0, 0xBCA000
	0x03531D98 LDR X0, [X0 + 0x578]
	0x03531D9C BL 0x1C16D08
	0x03531DA0 BL 0x1C16F10
	0x03531DA4 MOV X19, X0
	0x03531DA8 ADRP X0, 0xC03000
	0x03531DAC LDR X0, [X0 + 0xA58]
	0x03531DB0 BL 0x1C16D08
	0x03531DB4 MOV X1, X0
	0x03531DB8 MOV X0, X19
	0x03531DBC MOV X2, X31
	0x03531DC0 BL 0x3314A68
	0x03531DC4 ADRP X0, 0xC03000
	0x03531DC8 LDR X0, [X0 + 0xA60]
	0x03531DCC BL 0x1C16D08
	0x03531DD0 MOV X1, X0
	0x03531DD4 MOV X0, X19
	0x03531DD8 BL 0x1C16DEC
	0x03531DDC STP X30, X23, [X31 - 0x30]!
	0x03531DE0 STP X22, X21, [X31 + 0x10]
	0x03531DE4 STP X20, X19, [X31 + 0x20]
	0x03531DE8 ADRP X21, 0xEAE000
	0x03531DEC LDRB W8, [X21 + 0xBAE]
	0x03531DF0 MOV W19, W1
	0x03531DF4 MOV X20, X0
	0x03531DF8 TBNZ X8, 0x0, 0x3531E10
	0x03531DFC ADRP X0, 0xC03000
	0x03531E00 LDR X0, [X0 + 0x980]
	0x03531E04 BL 0x1C16CF4
	0x03531E08 MOVZ W8, 0x1
	0x03531E0C STRB W8, [X21 + 0xBAE]
	0x03531E10 LDR X8, [X20 + 0x10]
	0x03531E14 CBZ X8, 0x3531F1C
	0x03531E18 LDR W9, [X8 + 0x18]
	0x03531E1C CMP W9, 0x45
	0x03531E20 B.LS 0x3531F20
	0x03531E24 ADRP X22, 0xC03000
	0x03531E28 LDR W8, [X8 + 0x134]
	0x03531E2C LDR X22, [X22 + 0x980]
	0x03531E30 TBZ X8, 0x1F, 0x3531E50
	0x03531E34 LDR X0, [X22]
	0x03531E38 LDR W8, [X0 + 0xE0]
	0x03531E3C CBNZ W8, 0x3531E44
	0x03531E40 BL 0x1C16DFC
	0x03531E44 MOV X0, X20
	0x03531E48 BL 0x352D5D0
	0x03531E4C MOV X20, X0
	0x03531E50 MOV X23, X31
	0x03531E54 LDR X0, [X22]
	0x03531E58 LDR W8, [X0 + 0xE0]
	0x03531E5C CBNZ W8, 0x3531E68
	0x03531E60 BL 0x1C16DFC
	0x03531E64 LDR X0, [X22]
	0x03531E68 LDR X8, [X0 + 0xB8]
	0x03531E6C LDR X8, [X8]
	0x03531E70 CBZ X8, 0x3531F1C
	0x03531E74 LDRSW X9, [X8 + 0x18]
	0x03531E78 CMP X23, X9
	0x03531E7C B.GE 0x3531F00
	0x03531E80 LDR W9, [X0 + 0xE0]
	0x03531E84 CBNZ W9, 0x3531E9C
	0x03531E88 BL 0x1C16DFC
	0x03531E8C LDR X8, [X22]
	0x03531E90 LDR X8, [X8 + 0xB8]
	0x03531E94 LDR X8, [X8]
	0x03531E98 CBZ X8, 0x3531F1C
	0x03531E9C LDR W9, [X8 + 0x18]
	0x03531EA0 CMP X23, X9
	0x03531EA4 B.CS 0x3531F20
	0x03531EA8 ADD X8, X8, X23, 0x2, LSL
	0x03531EAC LDR W0, [X8 + 0x20]
	0x03531EB0 BL 0x352C1F8
	0x03531EB4 MOV X1, X20
	0x03531EB8 MOV X21, X0
	0x03531EBC BL 0x352DF5C
	0x03531EC0 TBNZ X0, 0x0, 0x3531F00
	0x03531EC4 LDR X0, [X22]
	0x03531EC8 LDR W8, [X0 + 0xE0]
	0x03531ECC CBNZ W8, 0x3531ED4
	0x03531ED0 BL 0x1C16DFC
	0x03531ED4 MOV X0, X20
	0x03531ED8 MOV X1, X21
	0x03531EDC BL 0x352EB38
	0x03531EE0 CBZ X0, 0x3531F1C
	0x03531EE4 BL 0x3531F24
	0x03531EE8 ADD X23, X23, 0x1
	0x03531EEC CBNZ W0, 0x3531E54
	0x03531EF0 LDP X20, X19, [X31 + 0x20]
	0x03531EF4 LDP X22, X21, [X31 + 0x10]
	0x03531EF8 LDP X30, X23, [X31], #0x30
	0x03531EFC RET
	0x03531F00 CBZ X20, 0x3531F1C
	0x03531F04 MOV X0, X20
	0x03531F08 MOV W1, W19
	0x03531F0C LDP X20, X19, [X31 + 0x20]
	0x03531F10 LDP X22, X21, [X31 + 0x10]
	0x03531F14 LDP X30, X23, [X31], #0x30
	0x03531F18 B 0x3530548
	0x03531F1C BL 0x1C16F20
	0x03531F20 BL 0x1C16F28
	0x03531F24 STR X30, [X31 - 0x10]!
	0x03531F28 LDR X8, [X0 + 0x10]
	0x03531F2C CBZ X8, 0x3531F44
	0x03531F30 LDR W9, [X8 + 0x18]
	0x03531F34 CBZ W9, 0x3531F48
	0x03531F38 LDR W0, [X8 + 0x20]
	0x03531F3C LDR X30, [X31], #0x10
	0x03531F40 RET

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0xC04000
	012 Move X20, [X20+2432]
	013 Move X19, X1
	014 Move X21, X0
	015 Move W25, 1
	016 Move X26, 0xEAF000
	017 Move W27, 3
	018 Move W24, 1
	019 Move W8, [X26+2992]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {27}
	024 Move X0, X20
	025 Call 0x1C17CF4
	026 Move [X26+2992], W25
	027 Compare X19, 0
	028 JumpIfEqual {227}
	029 Move X8, [X19+16]
	030 Compare X8, 0
	031 JumpIfEqual {227}
	032 Move W9, [X8+24]
	033 Compare W9, 0
	034 JumpIfEqual {226}
	035 Move W8, [X8+32]
	036 Move TEMP, X8
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {228}
	040 Move X0, [X20]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X0, X21
	046 Move X1, X19
	047 Call BigInteger.op_GreaterThanOrEqual, X0, X1
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {61}
	052 Move X0, [X20]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X21
	058 Move X1, X19
	059 Call BigInteger.op_Modulus, X0, X1
	060 Move X21, X0
	061 Compare X21, 0
	062 JumpIfEqual {227}
	063 Move W8, [X21+24]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X8, [X21+16]
	066 Compare X8, 0
	067 JumpIfEqual {227}
	068 Move W9, [X8+24]
	069 Compare W9, 0
	070 JumpIfEqual {226}
	071 Move W23, [X8+32]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move X0, [X20]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {78}
	077 Call 0x1C17DFC
	078 Move W0, W31
	079 Call BigInteger.op_Implicit, X0
	080 Move X1, X0
	081 Move X0, X21
	082 Call BigInteger.op_LessThan, X0, X1
	083 Move TEMP, X0
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 JumpIfEqual {183}
	087 Move W8, [X21+24]
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move X9, [X21+16]
	090 Compare X9, 0
	091 JumpIfEqual {227}
	092 Move W10, [X9+24]
	093 Move W12, W31
	094 Move W11, W31
	095 Add X14, X9, W11
	096 Move W13, W31
	097 Add W23, W12, 32
	098 Add X14, X14, 32
	099 Move W15, 1
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move W16, [X14]
	102 And W31, W16, W15
	103 Add W13, W13, 1
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move W15, W15
	106 ShiftRight W15, 31
	107 And W15, W15, 0x3FFFFFFF
	108 Add W23, W12, W13
	109 Move W11, W8
	110 Add W11, W11, 1
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Move W12, W23
	113 Move W23, W31
	114 Move X0, [X20]
	115 Move W8, [X0+224]
	116 Compare W8, 0
	117 JumpIfNotEqual {119}
	118 Call 0x1C17DFC
	119 Move X0, X21
	120 Move W1, W23
	121 Call BigInteger.op_RightShift, X0, X1
	122 Move X8, [X19+16]
	123 Move X22, X0
	124 Move TEMP, X23
	125 And TEMP, TEMP, 1
	126 Compare TEMP, 1
	127 JumpIfEqual {130}
	128 Compare X8, 0
	129 JumpIfNotEqual {142}
	130 Compare X8, 0
	131 JumpIfEqual {227}
	132 Move W9, [X8+24]
	133 Compare W9, 0
	134 JumpIfEqual {226}
	135 Move W9, [X8+32]
	136 And W9, W9, 7
	137 NotImplemented "Instruction CMP not yet implemented."
	138 NotImplemented "Instruction CMP not yet implemented."
	139 Move TEMP, 0
	140 Not TEMP
	141 Move W23, TEMP
	142 Move W23, 1
	143 Move W9, [X8+24]
	144 Compare W9, 0
	145 JumpIfEqual {226}
	146 Move W8, [X8+32]
	147 NotImplemented "Instruction ORN not yet implemented."
	148 And W31, W8, 3
	149 Compare X22, 0
	150 JumpIfEqual {227}
	151 Move X8, [X22+16]
	152 Compare X8, 0
	153 JumpIfEqual {227}
	154 Move W9, [X8+24]
	155 Compare W9, 0
	156 JumpIfEqual {226}
	157 Move W8, [X8+32]
	158 NotImplemented "Instruction BICS not yet implemented."
	159 NotImplemented "Instruction CSNEG not yet implemented."
	160 Compare X22, 0
	161 JumpIfEqual {227}
	162 Move W8, [X22+24]
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Move X8, [X22+16]
	165 Compare X8, 0
	166 JumpIfEqual {227}
	167 Move W9, [X8+24]
	168 Compare W9, 0
	169 JumpIfEqual {226}
	170 Move W8, [X8+32]
	171 NotImplemented "Instruction CMP not yet implemented."
	172 Move X0, [X20]
	173 Move W8, [X0+224]
	174 Compare W8, 0
	175 JumpIfNotEqual {177}
	176 Call 0x1C17DFC
	177 Move X0, X19
	178 Move X1, X22
	179 Call BigInteger.op_Modulus, X0, X1
	180 Move X21, X0
	181 Multiply W24, W23, W24
	182 Move X19, X22
	183 Move X0, [X20]
	184 Move W8, [X0+224]
	185 Compare W8, 0
	186 JumpIfNotEqual {188}
	187 Call 0x1C17DFC
	188 Move W0, 1
	189 Call BigInteger.op_Implicit, X0
	190 Move X1, X0
	191 Move X0, X19
	192 Call BigInteger.op_Subtraction, X0, X1
	193 Compare X0, 0
	194 JumpIfEqual {227}
	195 Move X8, [X0+16]
	196 Compare X8, 0
	197 JumpIfEqual {227}
	198 Move W9, [X8+24]
	199 Compare W9, 0
	200 JumpIfEqual {226}
	201 Move X0, [X20]
	202 Move W20, [X8+32]
	203 Move W9, [X0+224]
	204 Compare W9, 0
	205 JumpIfNotEqual {207}
	206 Call 0x1C17DFC
	207 Move X0, X21
	208 Call BigInteger.op_UnaryNegation, X0
	209 Move X1, X19
	210 Call BigInteger.Jacobi, X0, X1
	211 And W31, W20, 2
	212 NotImplemented "Instruction CSNEG not yet implemented."
	213 Multiply W0, W8, W24
	214 Multiply W0, W23, W24
	215 Move X20, [X31+64]
	216 Move X19, [X31+72]
	217 Move X22, [X31+48]
	218 Move X21, [X31+56]
	219 Move X24, [X31+32]
	220 Move X23, [X31+40]
	221 Move X26, [X31+16]
	222 Move X25, [X31+24]
	223 Move X30, [X31+80]
	224 Move X27, [X31+88]
	225 Return X0
	226 Call 0x1C17F28
	227 Call 0x1C17F20
	228 Move X0, 0xBCB000
	229 Move X0, [X0+1400]
	230 Call 0x1C17D08
	231 Call 0x1C17F10
	232 Move X19, X0
	233 Move X0, 0xC04000
	234 Move X0, [X0+2624]
	235 Call 0x1C17D08
	236 Move X1, X0
	237 Move X0, X19
	238 Move X2, X31
	239 Call ArgumentException..ctor, X0, X1
	240 Move X0, 0xC04000
	241 Move X0, [X0+2632]
	242 Call 0x1C17D08
	243 Move X1, X0
	244 Move X0, X19
	245 Call 0x1C17DEC

Method: Photon.SocketServer.Numeric.BigInteger genPseudoPrime(System.Int32 bits, System.Int32 confidence, System.Random rand)

Disassembly:
	0x0353336C MOV X19, X0
	0x03533370 LDR W9, [X8 + 0xE0]
	0x03533374 CBNZ W9, 0x3533380
	0x03533378 MOV X0, X8
	0x0353337C BL 0x1C16DFC
	0x03533380 MOV X0, X19
	0x03533384 MOV X1, X31
	0x03533388 BL 0x33C33A0
	0x0353338C CBZ X24, 0x35333A4
	0x03533390 LDR X8, [X24]
	0x03533394 MOV X0, X24
	0x03533398 LDP X9, X1, [X8 + 0x168]
	0x0353339C BLR X9
	0x035333A0 B 0x35333A8
	0x035333A4 MOV X0, X31
	0x035333A8 LDR X1, [X20]
	0x035333AC MOV X2, X31
	0x035333B0 BL 0x321B938
	0x035333B4 LDR X8, [X21]
	0x035333B8 MOV X19, X0
	0x035333BC LDR W9, [X8 + 0xE0]
	0x035333C0 CBNZ W9, 0x35333CC
	0x035333C4 MOV X0, X8
	0x035333C8 BL 0x1C16DFC
	0x035333CC MOV X0, X19
	0x035333D0 MOV X1, X31
	0x035333D4 BL 0x33C33A0
	0x035333D8 CBZ X28, 0x35333F0
	0x035333DC LDR X8, [X28]
	0x035333E0 MOV X0, X28
	0x035333E4 LDP X9, X1, [X8 + 0x168]
	0x035333E8 BLR X9
	0x035333EC B 0x35333F4
	0x035333F0 MOV X0, X31
	0x035333F4 LDR X1, [X20]
	0x035333F8 MOV X2, X31
	0x035333FC BL 0x321B938
	0x03533400 LDR X8, [X21]
	0x03533404 MOV X19, X0
	0x03533408 LDR W9, [X8 + 0xE0]
	0x0353340C CBNZ W9, 0x3533418
	0x03533410 MOV X0, X8
	0x03533414 BL 0x1C16DFC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xEAD000
	008 Move X23, 0xC02000
	009 Move W8, [X22+2993]
	010 Move X23, [X23+2432]
	011 Move X19, X2
	012 Move W20, W1
	013 Move W21, W0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xC02000
	019 Move X0, [X0+2432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2993], W8
	023 Move X0, [X23]
	024 Call 0x1C17F10
	025 Move X22, X0
	026 Call BigInteger..ctor, X0
	027 Compare X22, 0
	028 JumpIfEqual {57}
	029 Move X0, X22
	030 Move W1, W21
	031 Move X2, X19
	032 Call BigInteger.genRandomBits, X0, X1, X2
	033 Move X8, [X22+16]
	034 Compare X8, 0
	035 JumpIfEqual {57}
	036 Move W9, [X8+24]
	037 Compare W9, 0
	038 JumpIfEqual {58}
	039 Move W9, [X8+32]
	040 Move X0, X22
	041 Move W1, W20
	042 Or W9, W9, 1
	043 Move [X8+32], W9
	044 Call BigInteger.isProbablePrime, X0, X1
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {29}
	049 Move X0, X22
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X30, [X31+48]
	055 Move X23, [X31+56]
	056 Return X0
	057 Call 0x1C17F20
	058 Call 0x1C17F28

Method: Photon.SocketServer.Numeric.BigInteger genCoPrime(System.Int32 bits, System.Random rand)

Disassembly:
	0x03533418 MOV X0, X19
	0x0353341C MOV X1, X31
	0x03533420 BL 0x33C33A0
	0x03533424 LDR X8, [X23]
	0x03533428 MOV X0, X23
	0x0353342C LDP X9, X1, [X8 + 0x168]
	0x03533430 BLR X9
	0x03533434 LDR X1, [X20]
	0x03533438 MOV X2, X31
	0x0353343C BL 0x321B938
	0x03533440 LDR X8, [X21]
	0x03533444 MOV X19, X0
	0x03533448 LDR W9, [X8 + 0xE0]
	0x0353344C CBNZ W9, 0x3533458
	0x03533450 MOV X0, X8
	0x03533454 BL 0x1C16DFC
	0x03533458 MOV X0, X19
	0x0353345C MOV X1, X31
	0x03533460 BL 0x33C33A0
	0x03533464 LDP X20, X19, [X31 + 0x70]
	0x03533468 LDP X22, X21, [X31 + 0x60]
	0x0353346C LDP X24, X23, [X31 + 0x50]
	0x03533470 LDP X26, X25, [X31 + 0x40]
	0x03533474 LDP X28, X27, [X31 + 0x30]
	0x03533478 LDP X29, X30, [X31 + 0x20]
	0x0353347C LDR V8, [X31 + 0x10]
	0x03533480 ADD X31, X31, 0x80
	0x03533484 RET
	0x03533488 BL 0x1C16F28
	0x0353348C BL 0x1C16F20
	0x03533490 STR D8, [X31 - 0x70]!
	0x03533494 STP X29, X30, [X31 + 0x10]
	0x03533498 STP X28, X27, [X31 + 0x20]
	0x0353349C STP X26, X25, [X31 + 0x30]
	0x035334A0 STP X24, X23, [X31 + 0x40]
	0x035334A4 STP X22, X21, [X31 + 0x50]
	0x035334A8 STP X20, X19, [X31 + 0x60]
	0x035334AC STR W0, [X31 + 0x8]
	0x035334B0 ADRP X20, 0xEAC000
	0x035334B4 ADRP X24, 0xBC7000
	0x035334B8 ADRP X21, 0xBC0000
	0x035334BC ADRP X28, 0xC01000
	0x035334C0 ADRP X22, 0xC01000
	0x035334C4 ADRP X23, 0xC01000
	0x035334C8 ADRP X19, 0xC01000
	0x035334CC LDR X24, [X24 + 0x2E8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xEAD000
	008 Move X23, 0xC02000
	009 Move W8, [X22+2994]
	010 Move X23, [X23+2432]
	011 Move X19, X2
	012 Move W20, W1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xC02000
	019 Move X0, [X0+2432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2994], W8
	023 Move X0, [X23]
	024 Call 0x1C17F10
	025 Move X22, X0
	026 Call BigInteger..ctor, X0
	027 Compare X22, 0
	028 JumpIfEqual {56}
	029 Move X0, X22
	030 Move W1, W20
	031 Move X2, X19
	032 Call BigInteger.genRandomBits, X0, X1, X2
	033 Move X0, X22
	034 Move X1, X21
	035 Call BigInteger.gcd, X0, X1
	036 Compare X0, 0
	037 JumpIfEqual {56}
	038 Move W8, [X0+24]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X8, [X0+16]
	041 Compare X8, 0
	042 JumpIfEqual {56}
	043 Move W9, [X8+24]
	044 Compare W9, 0
	045 JumpIfEqual {57}
	046 Move W8, [X8+32]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X0, X22
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Move X23, [X31+56]
	055 Return X0
	056 Call 0x1C17F20
	057 Call 0x1C17F28

Method: Photon.SocketServer.Numeric.BigInteger modInverse(Photon.SocketServer.Numeric.BigInteger modulus)

Disassembly:
	0x035334D0 LDRB W8, [X20 + 0xBB9]
	0x035334D4 LDR X21, [X21 + 0x618]
	0x035334D8 LDR X28, [X28 + 0x980]
	0x035334DC LDR X22, [X22 + 0xA78]
	0x035334E0 LDR X23, [X23 + 0xA80]
	0x035334E4 LDR X19, [X19 + 0xA88]
	0x035334E8 TBNZ X8, 0x0, 0x353359C
	0x035334EC ADRP X0, 0xC01000
	0x035334F0 LDR X0, [X0 + 0x980]
	0x035334F4 BL 0x1C16CF4
	0x035334F8 ADRP X0, 0xBC0000
	0x035334FC LDR X0, [X0 + 0x618]
	0x03533500 BL 0x1C16CF4
	0x03533504 ADRP X0, 0xBC8000
	0x03533508 LDR X0, [X0 + 0x958]
	0x0353350C BL 0x1C16CF4
	0x03533510 ADRP X0, 0xBC7000
	0x03533514 LDR X0, [X0 + 0x2E8]
	0x03533518 BL 0x1C16CF4
	0x0353351C ADRP X0, 0xBC1000
	0x03533520 LDR X0, [X0 + 0xFE0]
	0x03533524 BL 0x1C16CF4
	0x03533528 ADRP X0, 0xC01000
	0x0353352C LDR X0, [X0 + 0xA90]
	0x03533530 BL 0x1C16CF4
	0x03533534 ADRP X0, 0xC01000
	0x03533538 LDR X0, [X0 + 0xA78]
	0x0353353C BL 0x1C16CF4
	0x03533540 ADRP X0, 0xC01000
	0x03533544 LDR X0, [X0 + 0xA98]
	0x03533548 BL 0x1C16CF4
	0x0353354C ADRP X0, 0xC01000
	0x03533550 LDR X0, [X0 + 0xAA0]
	0x03533554 BL 0x1C16CF4
	0x03533558 ADRP X0, 0xC01000
	0x0353355C LDR X0, [X0 + 0xA88]
	0x03533560 BL 0x1C16CF4
	0x03533564 ADRP X0, 0xC01000
	0x03533568 LDR X0, [X0 + 0xA80]
	0x0353356C BL 0x1C16CF4
	0x03533570 ADRP X0, 0xC01000
	0x03533574 LDR X0, [X0 + 0xAA8]
	0x03533578 BL 0x1C16CF4
	0x0353357C ADRP X0, 0xC01000
	0x03533580 LDR X0, [X0 + 0xAB0]
	0x03533584 BL 0x1C16CF4
	0x03533588 ADRP X0, 0xC01000
	0x0353358C LDR X0, [X0 + 0xAB8]
	0x03533590 BL 0x1C16CF4
	0x03533594 MOVZ W8, 0x1
	0x03533598 STRB W8, [X20 + 0xBB9]
	0x0353359C LDR X0, [X24]
	0x035335A0 BL 0x1C16F10
	0x035335A4 MOVZ W1, 0x1
	0x035335A8 MOV X2, X31
	0x035335AC MOV X20, X0
	0x035335B0 BL 0x338E5E8
	0x035335B4 LDR X0, [X21]
	0x035335B8 MOVZ W1, 0x40
	0x035335BC BL 0x1C16D6C
	0x035335C0 LDR X8, [X28]
	0x035335C4 MOV X21, X0
	0x035335C8 MOV X0, X8
	0x035335CC BL 0x1C16F10
	0x035335D0 LDR X1, [X22]
	0x035335D4 MOVZ W2, 0x10
	0x035335D8 MOV X22, X0
	0x035335DC BL 0x352BEEC
	0x035335E0 LDR X0, [X28]
	0x035335E4 BL 0x1C16F10
	0x035335E8 LDR X1, [X23]
	0x035335EC MOVZ W2, 0x10
	0x035335F0 MOV X23, X0
	0x035335F4 BL 0x352BEEC
	0x035335F8 LDR X0, [X28]
	0x035335FC BL 0x1C16F10
	0x03533600 LDR X1, [X19]
	0x03533604 MOVZ W2, 0x10
	0x03533608 MOV X24, X0
	0x0353360C BL 0x352BEEC
	0x03533610 CBZ X22, 0x35339DC
	0x03533614 ADRP X19, 0xC01000
	0x03533618 ADRP X25, 0xBC8000
	0x0353361C LDR X19, [X19 + 0xAB0]
	0x03533620 LDR X25, [X25 + 0x958]
	0x03533624 MOVZ W1, 0xA
	0x03533628 MOV X0, X22
	0x0353362C BL 0x352F240
	0x03533630 LDR X8, [X19]
	0x03533634 MOV X1, X0
	0x03533638 MOV X2, X31
	0x0353363C MOV X19, X25
	0x03533640 MOV X0, X8
	0x03533644 BL 0x321B938
	0x03533648 LDR X8, [X25]
	0x0353364C MOV X25, X0
	0x03533650 LDR W9, [X8 + 0xE0]
	0x03533654 CBNZ W9, 0x3533660
	0x03533658 MOV X0, X8
	0x0353365C BL 0x1C16DFC
	0x03533660 MOV X0, X25
	0x03533664 MOV X1, X31
	0x03533668 BL 0x33C33A0
	0x0353366C CBZ X23, 0x35339DC
	0x03533670 ADRP X19, 0xC01000
	0x03533674 LDR X19, [X19 + 0xAB8]
	0x03533678 MOVZ W1, 0xA
	0x0353367C MOV X0, X23
	0x03533680 BL 0x352F240
	0x03533684 LDR X8, [X19]
	0x03533688 MOV X1, X0
	0x0353368C MOV X2, X31
	0x03533690 MOV X0, X8
	0x03533694 BL 0x321B938
	0x03533698 MOV X1, X31
	0x0353369C BL 0x33C33A0
	0x035336A0 CBZ X24, 0x35339DC
	0x035336A4 ADRP X19, 0xC01000
	0x035336A8 ADRP X25, 0xBC1000
	0x035336AC LDR X19, [X19 + 0xAA0]
	0x035336B0 LDR X25, [X25 + 0xFE0]
	0x035336B4 MOVZ W1, 0xA
	0x035336B8 MOV X0, X24
	0x035336BC BL 0x352F240
	0x035336C0 LDR X8, [X19]
	0x035336C4 LDR X2, [X25]
	0x035336C8 MOV X1, X0
	0x035336CC MOV X3, X31
	0x035336D0 MOV X0, X8
	0x035336D4 BL 0x32274B8
	0x035336D8 MOV X1, X31
	0x035336DC BL 0x33C33A0
	0x035336E0 LDR W8, [X31 + 0x8]
	0x035336E4 STR W31, [X31 + 0xC]
	0x035336E8 CMP W8, 0x1
	0x035336EC B.LT 0x35339B8
	0x035336F0 CBZ X20, 0x35339DC
	0x035336F4 ADRP X8, 0xFFFFFFFFFD5BB000
	0x035336F8 LDR V8, [X8 + 0x2E8]
	0x035336FC MOVZ X29, 0x7FF00000
	0x03533700 MOVZ X27, 0x40700000
	0x03533704 LDR X8, [X20]
	0x03533708 MOV X0, X20
	0x0353370C LDP X9, X1, [X8 + 0x1B8]
	0x03533710 BLR X9
	0x03533714 FMUL D0, D0, D8
	0x03533718 FMOV D1, X29
	0x0353371C FCVTZS W8, D0
	0x03533720 FCMP D0, D1
	0x03533724 MOVZ W9, 0x80000000
	0x03533728 CSEL W25, W9, W8, EQ
	0x0353372C CBZ W25, 0x3533704
	0x03533730 MOV X19, X28
	0x03533734 MOV W26, W31
	0x03533738 MOV W8, W31
	0x0353373C CMP W26, 0x40
	0x03533740 MOV W28, W8
	0x03533744 B.GE 0x35337C4
	0x03533748 CMP W26, W25
	0x0353374C B.GE 0x3533788
	0x03533750 LDR X8, [X20]
	0x03533754 MOV X0, X20
	0x03533758 LDP X9, X1, [X8 + 0x1B8]
	0x0353375C BLR X9
	0x03533760 CBZ X21, 0x35339DC
	0x03533764 LDR W8, [X21 + 0x18]
	0x03533768 CMP W26, W8
	0x0353376C B.CS 0x35339D8
	0x03533770 FMOV D1, X27
	0x03533774 FMUL D0, D0, D1
	0x03533778 FCVTZS W8, D0
	0x0353377C FCMP D0, 0x0
	0x03533780 CSEL W8, W8, W8, MI
	0x03533784 B 0x353379C
	0x03533788 CBZ X21, 0x35339DC
	0x0353378C LDR W8, [X21 + 0x18]
	0x03533790 CMP W26, W8
	0x03533794 B.CS 0x35339D8
	0x03533798 MOV W8, W31
	0x0353379C ADD X9, X21, W26, SXTW
	0x035337A0 STRB W8, [X9 + 0x20]
	0x035337A4 LDR W9, [X21 + 0x18]
	0x035337A8 CMP W26, W9
	0x035337AC B.CS 0x35339D8
	0x035337B0 ANDS W31, W8, 0xFF
	0x035337B4 CSET W8, NE
	0x035337B8 ORR W8, W28, W8, 0x0
	0x035337BC ADD W26, W26, 0x1
	0x035337C0 B 0x353373C
	0x035337C4 MOV W26, W31
	0x035337C8 MOV W8, W31
	0x035337CC TBZ X28, 0x0, 0x353373C
	0x035337D0 CBZ X21, 0x35339DC
	0x035337D4 MOV X28, X19
	0x035337D8 ADRP X19, 0xBC8000
	0x035337DC LDR W8, [X21 + 0x18]
	0x035337E0 LDR X19, [X19 + 0x958]
	0x035337E4 CBZ W8, 0x35339D8
	0x035337E8 LDRB W8, [X21 + 0x20]
	0x035337EC CBNZ W8, 0x3533828
	0x035337F0 LDR X8, [X20]
	0x035337F4 MOV X0, X20
	0x035337F8 LDP X9, X1, [X8 + 0x1B8]
	0x035337FC BLR X9
	0x03533800 LDR X8, [X21 + 0x18]
	0x03533804 CBZ W8, 0x35339D8
	0x03533808 FMOV D1, X27
	0x0353380C FMUL D0, D0, D1
	0x03533810 FCVTZS W9, D0
	0x03533814 FCMP D0, 0x0
	0x03533818 CSEL W9, W9, W9, MI
	0x0353381C STRB W9, [X21 + 0x20]
	0x03533820 CBNZ W8, 0x35337E8
	0x03533824 B 0x35339D8
	0x03533828 ADD X0, X31, 0xC
	0x0353382C MOV X1, X31
	0x03533830 BL 0x337B6E0
	0x03533834 ADRP X8, 0xC01000
	0x03533838 LDR X8, [X8 + 0xA90]
	0x0353383C MOV X1, X0
	0x03533840 MOV X2, X31
	0x03533844 LDR X8, [X8]
	0x03533848 MOV X0, X8
	0x0353384C BL 0x321B938
	0x03533850 LDR X8, [X19]
	0x03533854 MOV X26, X0
	0x03533858 LDR W9, [X8 + 0xE0]
	0x0353385C CBNZ W9, 0x3533868
	0x03533860 MOV X0, X8
	0x03533864 BL 0x1C16DFC
	0x03533868 MOV X0, X26
	0x0353386C MOV X1, X31
	0x03533870 BL 0x33C324C
	0x03533874 LDR X0, [X28]
	0x03533878 BL 0x1C16F10
	0x0353387C MOV X1, X21
	0x03533880 MOV W2, W25
	0x03533884 MOV X26, X0
	0x03533888 BL 0x352CBAC
	0x0353388C CBZ X26, 0x35339DC
	0x03533890 MOV X0, X26
	0x03533894 MOV X1, X22
	0x03533898 MOV X2, X24
	0x0353389C BL 0x352F678
	0x035338A0 CBZ X0, 0x35339DC
	0x035338A4 MOV X1, X23
	0x035338A8 MOV X2, X24
	0x035338AC BL 0x352F678
	0x035338B0 LDR X8, [X28]
	0x035338B4 MOV X25, X0
	0x035338B8 LDR W9, [X8 + 0xE0]
	0x035338BC CBNZ W9, 0x35338C8
	0x035338C0 MOV X0, X8
	0x035338C4 BL 0x1C16DFC
	0x035338C8 CBZ X25, 0x35339DC
	0x035338CC LDR X8, [X25]
	0x035338D0 MOV X0, X25
	0x035338D4 MOV X1, X26
	0x035338D8 LDP X9, X2, [X8 + 0x138]
	0x035338DC BLR X9
	0x035338E0 TBZ X0, 0x0, 0x3533920
	0x035338E4 LDR X0, [X19]
	0x035338E8 LDR W8, [X0 + 0xE0]
	0x035338EC CBNZ W8, 0x35338F4
	0x035338F0 BL 0x1C16DFC
	0x035338F4 ADRP X8, 0xC01000
	0x035338F8 LDR X8, [X8 + 0xAA8]
	0x035338FC MOV X1, X31
	0x03533900 LDR X0, [X8]
	0x03533904 BL 0x33C33A0
	0x03533908 LDP W9, W8, [X31 + 0x8]
	0x0353390C ADD W8, W8, 0x1
	0x03533910 CMP W8, W9
	0x03533914 STR W8, [X31 + 0xC]
	0x03533918 B.LT 0x3533704
	0x0353391C B 0x35339B8
	0x03533920 ADD X0, X31, 0xC
	0x03533924 MOV X1, X31
	0x03533928 BL 0x337B6E0
	0x0353392C ADRP X8, 0xC01000
	0x03533930 LDR X8, [X8 + 0xA98]
	0x03533934 MOV X1, X0
	0x03533938 MOV X2, X31
	0x0353393C LDR X8, [X8]
	0x03533940 MOV X0, X8
	0x03533944 BL 0x321B938
	0x03533948 LDR X8, [X19]
	0x0353394C MOV X20, X19
	0x03533950 MOV X19, X0
	0x03533954 LDR W9, [X8 + 0xE0]
	0x03533958 CBNZ W9, 0x3533964
	0x0353395C MOV X0, X8
	0x03533960 BL 0x1C16DFC
	0x03533964 MOV X0, X19
	0x03533968 MOV X1, X31
	0x0353396C BL 0x33C33A0
	0x03533970 LDR X8, [X26]
	0x03533974 MOV X0, X26
	0x03533978 LDP X9, X1, [X8 + 0x168]
	0x0353397C BLR X9
	0x03533980 ADRP X8, 0xBC1000
	0x03533984 LDR X8, [X8 + 0xFE0]
	0x03533988 MOV X2, X31
	0x0353398C LDR X1, [X8]
	0x03533990 BL 0x321B938
	0x03533994 LDR X8, [X20]
	0x03533998 MOV X19, X0
	0x0353399C LDR W9, [X8 + 0xE0]
	0x035339A0 CBNZ W9, 0x35339AC
	0x035339A4 MOV X0, X8
	0x035339A8 BL 0x1C16DFC
	0x035339AC MOV X0, X19
	0x035339B0 MOV X1, X31
	0x035339B4 BL 0x33C33A0
	0x035339B8 LDP X20, X19, [X31 + 0x60]
	0x035339BC LDP X22, X21, [X31 + 0x50]
	0x035339C0 LDP X24, X23, [X31 + 0x40]
	0x035339C4 LDP X26, X25, [X31 + 0x30]
	0x035339C8 LDP X28, X27, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move [X31+8], X1
	015 Move X20, 0xEAD000
	016 Move X19, 0xC02000
	017 Move X28, 0xC02000
	018 Move W8, [X20+2995]
	019 Move X19, [X19+2640]
	020 Move X28, [X28+2432]
	021 Move X21, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {34}
	026 Move X0, 0xC02000
	027 Move X0, [X0+2640]
	028 Call 0x1C17CF4
	029 Move X0, 0xC02000
	030 Move X0, [X0+2432]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+2995], W8
	034 Move X0, [X19]
	035 Move W1, 2
	036 Call 0x1C17D6C
	037 Move X8, [X28]
	038 Move X29, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {44}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move W0, W31
	045 Call BigInteger.op_Implicit, X0
	046 Compare X29, 0
	047 JumpIfEqual {265}
	048 Move X22, X0
	049 Compare X0, 0
	050 JumpIfEqual {57}
	051 Move X8, [X29]
	052 Move X0, X22
	053 Move X1, [X8+64]
	054 Call 0x1C17E00
	055 Compare X0, 0
	056 JumpIfEqual {357}
	057 Move W8, [X29+24]
	058 Compare W8, 0
	059 JumpIfEqual {356}
	060 Move W0, 1
	061 Move [X29+32], X22
	062 Call BigInteger.op_Implicit, X0
	063 Move X22, X0
	064 Compare X0, 0
	065 JumpIfEqual {72}
	066 Move X8, [X29]
	067 Move X0, X22
	068 Move X1, [X8+64]
	069 Call 0x1C17E00
	070 Compare X0, 0
	071 JumpIfEqual {357}
	072 Move W8, [X29+24]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move [X29+40], X22
	075 Move X0, [X19]
	076 Move W1, 2
	077 Call 0x1C17D6C
	078 Move X8, [X19]
	079 Move X22, X0
	080 Move W1, 2
	081 Move X0, X8
	082 Call 0x1C17D6C
	083 Move X23, X0
	084 Move W0, W31
	085 Call BigInteger.op_Implicit, X0
	086 Compare X23, 0
	087 JumpIfEqual {265}
	088 Move X24, X0
	089 Compare X0, 0
	090 JumpIfEqual {97}
	091 Move X8, [X23]
	092 Move X0, X24
	093 Move X1, [X8+64]
	094 Call 0x1C17E00
	095 Compare X0, 0
	096 JumpIfEqual {357}
	097 Move W8, [X23+24]
	098 Compare W8, 0
	099 JumpIfEqual {356}
	100 Move W0, W31
	101 Move [X23+32], X24
	102 Call BigInteger.op_Implicit, X0
	103 Move X24, X0
	104 Compare X0, 0
	105 JumpIfEqual {112}
	106 Move X8, [X23]
	107 Move X0, X24
	108 Move X1, [X8+64]
	109 Call 0x1C17E00
	110 Compare X0, 0
	111 JumpIfEqual {357}
	112 Move X8, [X23+24]
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move [X23+40], X24
	115 Compare X21, 0
	116 JumpIfEqual {265}
	117 Move X26, [X31+8]
	118 Move W19, W31
	119 Move W9, [X21+24]
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move X9, [X21+16]
	122 Compare X9, 0
	123 JumpIfEqual {265}
	124 Move W10, [X9+24]
	125 Compare W10, 0
	126 JumpIfEqual {356}
	127 Move W9, [X9+32]
	128 Compare W9, 0
	129 JumpIfEqual {266}
	130 Move X0, [X28]
	131 Call 0x1C17F10
	132 Move X25, X0
	133 Call BigInteger..ctor, X0
	134 Move X0, [X28]
	135 Call 0x1C17F10
	136 Move X24, X0
	137 Call BigInteger..ctor, X0
	138 NotImplemented "Instruction CMP not yet implemented."
	139 Move W8, [X29+24]
	140 Compare W8, 0
	141 JumpIfEqual {356}
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Compare X22, 0
	144 JumpIfEqual {265}
	145 Move W8, [X22+24]
	146 Compare W8, 0
	147 JumpIfEqual {356}
	148 Move X0, [X28]
	149 Move X27, [X29+32]
	150 Move X28, [X29+40]
	151 Move X20, [X22+32]
	152 Move W8, [X0+224]
	153 Compare W8, 0
	154 JumpIfNotEqual {156}
	155 Call 0x1C17DFC
	156 Move X0, X28
	157 Move X1, X20
	158 Call BigInteger.op_Multiply, X0, X1
	159 Move X1, X0
	160 Move X0, X27
	161 Call BigInteger.op_Subtraction, X0, X1
	162 Move X1, [X31+8]
	163 Call BigInteger.op_Modulus, X0, X1
	164 Move X8, [X29+24]
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Move X28, [X29+40]
	167 Move X27, X0
	168 Compare X28, 0
	169 JumpIfEqual {177}
	170 Move X8, [X29]
	171 Move X0, X28
	172 Move X1, [X8+64]
	173 Call 0x1C17E00
	174 Compare X0, 0
	175 JumpIfEqual {357}
	176 Move X8, [X29+24]
	177 Compare W8, 0
	178 JumpIfEqual {356}
	179 Move [X29+32], X28
	180 Move X28, 0xC02000
	181 Move X28, [X28+2432]
	182 Compare X27, 0
	183 JumpIfEqual {191}
	184 Move X8, [X29]
	185 Move X0, X27
	186 Move X1, [X8+64]
	187 Call 0x1C17E00
	188 Compare X0, 0
	189 JumpIfEqual {357}
	190 Move W8, [X29+24]
	191 NotImplemented "Instruction CMP not yet implemented."
	192 Move [X29+40], X27
	193 Move X0, [X28]
	194 Move W27, [X21+24]
	195 Move W8, [X0+224]
	196 Compare W8, 0
	197 JumpIfNotEqual {199}
	198 Call 0x1C17DFC
	199 Move X0, X26
	200 Move X1, X21
	201 Move X2, X25
	202 Move X3, X24
	203 NotImplemented "Instruction CMP not yet implemented."
	204 Call BigInteger.singleByteDivide, X0, X1, X2, X3
	205 Call BigInteger.multiByteDivide, X0, X1, X2, X3
	206 Compare X22, 0
	207 JumpIfEqual {265}
	208 Move X8, [X22+24]
	209 NotImplemented "Instruction CMP not yet implemented."
	210 Move X26, [X22+40]
	211 Compare X26, 0
	212 JumpIfEqual {220}
	213 Move X8, [X22]
	214 Move X0, X26
	215 Move X1, [X8+64]
	216 Call 0x1C17E00
	217 Compare X0, 0
	218 JumpIfEqual {357}
	219 Move X8, [X22+24]
	220 Compare W8, 0
	221 JumpIfEqual {356}
	222 Move [X22+32], X26
	223 Move X8, [X23+24]
	224 NotImplemented "Instruction CMP not yet implemented."
	225 Move X26, [X23+40]
	226 Compare X26, 0
	227 JumpIfEqual {235}
	228 Move X8, [X23]
	229 Move X0, X26
	230 Move X1, [X8+64]
	231 Call 0x1C17E00
	232 Compare X0, 0
	233 JumpIfEqual {357}
	234 Move X8, [X23+24]
	235 Compare W8, 0
	236 JumpIfEqual {356}
	237 Move [X23+32], X26
	238 Compare X25, 0
	239 JumpIfEqual {246}
	240 Move X8, [X22]
	241 Move X0, X25
	242 Move X1, [X8+64]
	243 Call 0x1C17E00
	244 Compare X0, 0
	245 JumpIfEqual {357}
	246 Move W8, [X22+24]
	247 NotImplemented "Instruction CMP not yet implemented."
	248 Move [X22+40], X25
	249 Compare X24, 0
	250 JumpIfEqual {257}
	251 Move X8, [X23]
	252 Move X0, X24
	253 Move X1, [X8+64]
	254 Call 0x1C17E00
	255 Compare X0, 0
	256 JumpIfEqual {357}
	257 Move X8, [X23+24]
	258 NotImplemented "Instruction CMP not yet implemented."
	259 Add W19, W19, 1
	260 Move X26, X21
	261 Move X21, X24
	262 Move [X23+40], X24
	263 Compare X24, 0
	264 JumpIfNotEqual {119}
	265 Call 0x1C17F20
	266 Compare W8, 0
	267 JumpIfEqual {356}
	268 Move X8, [X23+32]
	269 Compare X8, 0
	270 JumpIfEqual {265}
	271 Move W9, [X8+24]
	272 NotImplemented "Instruction CMP not yet implemented."
	273 Move X8, [X8+16]
	274 Compare X8, 0
	275 JumpIfEqual {265}
	276 Move W9, [X8+24]
	277 Compare W9, 0
	278 JumpIfEqual {356}
	279 Move W8, [X8+32]
	280 NotImplemented "Instruction CMP not yet implemented."
	281 Move W8, [X29+24]
	282 Compare W8, 0
	283 JumpIfEqual {356}
	284 NotImplemented "Instruction CMP not yet implemented."
	285 Compare X22, 0
	286 JumpIfEqual {265}
	287 Move W8, [X22+24]
	288 Compare W8, 0
	289 JumpIfEqual {356}
	290 Move X0, [X28]
	291 Move X21, [X29+32]
	292 Move X20, [X29+40]
	293 Move X22, [X22+32]
	294 Move W8, [X0+224]
	295 Compare W8, 0
	296 JumpIfNotEqual {298}
	297 Call 0x1C17DFC
	298 Move X0, X20
	299 Move X1, X22
	300 Call BigInteger.op_Multiply, X0, X1
	301 Move X1, X0
	302 Move X0, X21
	303 Call BigInteger.op_Subtraction, X0, X1
	304 Move X1, [X31+8]
	305 Call BigInteger.op_Modulus, X0, X1
	306 Compare X0, 0
	307 JumpIfEqual {265}
	308 Move X8, [X0+16]
	309 Move X20, X0
	310 Compare X8, 0
	311 JumpIfEqual {265}
	312 Move W9, [X8+24]
	313 NotImplemented "Instruction CMP not yet implemented."
	314 Move W8, [X8+308]
	315 Move TEMP, X8
	316 And TEMP, TEMP, -2147483648
	317 Compare TEMP, -2147483648
	318 JumpIfEqual {334}
	319 Move X0, X20
	320 Move X20, [X31+96]
	321 Move X19, [X31+104]
	322 Move X22, [X31+80]
	323 Move X21, [X31+88]
	324 Move X24, [X31+64]
	325 Move X23, [X31+72]
	326 Move X26, [X31+48]
	327 Move X25, [X31+56]
	328 Move X28, [X31+32]
	329 Move X27, [X31+40]
	330 Move X29, [X31+16]
	331 Move X30, [X31+24]
	332 Add X31, X31, 112
	333 Return X0
	334 Move X0, [X28]
	335 Move W8, [X0+224]
	336 Compare W8, 0
	337 JumpIfNotEqual {339}
	338 Call 0x1C17DFC
	339 Move X0, X20
	340 Move X1, [X31+8]
	341 Move X20, [X31+96]
	342 Move X19, [X31+104]
	343 Move X22, [X31+80]
	344 Move X21, [X31+88]
	345 Move X24, [X31+64]
	346 Move X23, [X31+72]
	347 Move X26, [X31+48]
	348 Move X25, [X31+56]
	349 Move X28, [X31+32]
	350 Move X27, [X31+40]
	351 Move X29, [X31+16]
	352 Move X30, [X31+24]
	353 Add X31, X31, 112
	354 Call BigInteger.op_Addition, X0, X1
	355 Return X0
	356 Call 0x1C17F28
	357 Call 0x1C17F44
	358 Move X1, X31
	359 Call 0x1C17DEC
	360 Move X0, 0xBEF000
	361 Move X0, [X0+1376]
	362 Call 0x1C17D08
	363 Call 0x1C17F10
	364 Move X19, X0
	365 Move X0, 0xBEF000
	366 Move X0, [X0+1856]
	367 Call 0x1C17D08
	368 Move X1, X0
	369 Move X0, X19
	370 Move X2, X31
	371 Call ArithmeticException..ctor, X0, X1
	372 Move X0, 0xC02000
	373 Move X0, [X0+2664]
	374 Call 0x1C17D08
	375 Move X1, X0
	376 Move X0, X19
	377 Call 0x1C17DEC

Method: System.Byte[] GetBytes()

Disassembly:
	0x035339CC LDP X29, X30, [X31 + 0x10]
	0x035339D0 LDR V8, [X31], #0x70
	0x035339D4 RET
	0x035339D8 BL 0x1C16F28
	0x035339DC BL 0x1C16F20
	0x035339E0 SUB X31, X31, 0x80
	0x035339E4 STR D8, [X31 + 0x10]
	0x035339E8 STP X29, X30, [X31 + 0x20]
	0x035339EC STP X28, X27, [X31 + 0x30]
	0x035339F0 STP X26, X25, [X31 + 0x40]
	0x035339F4 STP X24, X23, [X31 + 0x50]
	0x035339F8 STP X22, X21, [X31 + 0x60]
	0x035339FC STP X20, X19, [X31 + 0x70]
	0x03533A00 STR W0, [X31 + 0x18]
	0x03533A04 ADRP X20, 0xEAC000
	0x03533A08 ADRP X21, 0xBC7000
	0x03533A0C ADRP X23, 0xBC0000
	0x03533A10 ADRP X22, 0xC01000
	0x03533A14 ADRP X19, 0xC01000
	0x03533A18 LDRB W8, [X20 + 0xBBA]
	0x03533A1C LDR X21, [X21 + 0x2E8]
	0x03533A20 LDR X23, [X23 + 0x618]
	0x03533A24 LDR X22, [X22 + 0xAC0]
	0x03533A28 LDR X19, [X19 + 0xAC8]
	0x03533A2C TBNZ X8, 0x0, 0x3533AD4
	0x03533A30 ADRP X0, 0xC01000
	0x03533A34 LDR X0, [X0 + 0x980]
	0x03533A38 BL 0x1C16CF4
	0x03533A3C ADRP X0, 0xBC0000
	0x03533A40 LDR X0, [X0 + 0x618]
	0x03533A44 BL 0x1C16CF4
	0x03533A48 ADRP X0, 0xBC8000
	0x03533A4C LDR X0, [X0 + 0x958]
	0x03533A50 BL 0x1C16CF4
	0x03533A54 ADRP X0, 0xBC7000
	0x03533A58 LDR X0, [X0 + 0x2E8]
	0x03533A5C BL 0x1C16CF4
	0x03533A60 ADRP X0, 0xC01000
	0x03533A64 LDR X0, [X0 + 0xAC8]
	0x03533A68 BL 0x1C16CF4
	0x03533A6C ADRP X0, 0xC01000
	0x03533A70 LDR X0, [X0 + 0xAC0]
	0x03533A74 BL 0x1C16CF4
	0x03533A78 ADRP X0, 0xBC1000
	0x03533A7C LDR X0, [X0 + 0xFE0]
	0x03533A80 BL 0x1C16CF4
	0x03533A84 ADRP X0, 0xC01000
	0x03533A88 LDR X0, [X0 + 0xA90]
	0x03533A8C BL 0x1C16CF4
	0x03533A90 ADRP X0, 0xC01000
	0x03533A94 LDR X0, [X0 + 0xA98]
	0x03533A98 BL 0x1C16CF4
	0x03533A9C ADRP X0, 0xC01000
	0x03533AA0 LDR X0, [X0 + 0xAA0]
	0x03533AA4 BL 0x1C16CF4
	0x03533AA8 ADRP X0, 0xC01000
	0x03533AAC LDR X0, [X0 + 0xAA8]
	0x03533AB0 BL 0x1C16CF4
	0x03533AB4 ADRP X0, 0xC01000
	0x03533AB8 LDR X0, [X0 + 0xAD0]
	0x03533ABC BL 0x1C16CF4
	0x03533AC0 ADRP X0, 0xC01000
	0x03533AC4 LDR X0, [X0 + 0xAB8]
	0x03533AC8 BL 0x1C16CF4
	0x03533ACC MOVZ W8, 0x1
	0x03533AD0 STRB W8, [X20 + 0xBBA]
	0x03533AD4 LDR X0, [X21]
	0x03533AD8 BL 0x1C16F10
	0x03533ADC MOV X1, X31
	0x03533AE0 MOV X20, X0
	0x03533AE4 BL 0x338E3CC
	0x03533AE8 LDR X0, [X23]
	0x03533AEC MOVZ W1, 0x40
	0x03533AF0 BL 0x1C16D6C
	0x03533AF4 LDR X8, [X23]
	0x03533AF8 MOV X21, X0
	0x03533AFC MOVZ W1, 0x40
	0x03533B00 MOV X0, X8
	0x03533B04 BL 0x1C16D6C
	0x03533B08 LDR X1, [X22]
	0x03533B0C MOV X2, X31
	0x03533B10 MOV X22, X0
	0x03533B14 BL 0x32C5BD8
	0x03533B18 LDR X0, [X23]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xEAD000
	006 Move X21, 0xC02000
	007 Move W8, [X20+2996]
	008 Move X21, [X21+2432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xC02000
	015 Move X0, [X0+2432]
	016 Call 0x1C17CF4
	017 Move X0, 0xBC1000
	018 Move X0, [X0+1560]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2996], W8
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move W0, W31
	028 Call BigInteger.op_Implicit, X0
	029 Compare X19, 0
	030 JumpIfEqual {99}
	031 Move X8, [X19]
	032 Move X1, X0
	033 Move X0, X19
	034 Move X9, [X8+312]
	035 Move X2, [X8+320]
	036 NotImplemented "Instruction BLR not yet implemented."
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {51}
	041 Move X8, 0xBC1000
	042 Move X8, [X8+1560]
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move W1, 1
	046 Move X0, [X8]
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call 0x1C17D6C
	050 Return X0
	051 Move X0, X19
	052 Call BigInteger.bitCount, X0
	053 Move X8, 0xBC1000
	054 Move X8, [X8+1560]
	055 NotImplemented "Instruction SBFM not yet implemented."
	056 And W31, W0, 7
	057 NotImplemented "Instruction CINC not yet implemented."
	058 Move X8, [X8]
	059 Move W1, W20
	060 Move X0, X8
	061 Call 0x1C17D6C
	062 Move W8, [X19+24]
	063 Subtract W8, W8, 1
	064 And W10, W20, 3
	065 Move W11, 4
	066 Move W9, W31
	067 NotImplemented "Instruction CSEL not yet implemented."
	068 Move X11, [X19+16]
	069 Compare X11, 0
	070 JumpIfEqual {99}
	071 Move W12, [X11+24]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Compare X0, 0
	074 JumpIfEqual {99}
	075 Add X11, X11, W8
	076 Move W11, [X11+32]
	077 Move W12, W10
	078 Subtract W13, W9, 1
	079 Move W15, [X0+24]
	080 Add X14, X13, X12
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Subtract X12, X12, 1
	083 Add X14, X0, W14
	084 Move [X14+32], W11
	085 Add X14, X12, 1
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move W11, W11
	088 ShiftRight W11, 8
	089 And W11, W11, 0x7FFFFFFF
	090 Add W9, W10, W9
	091 Subtract W8, W8, 1
	092 Move W10, 4
	093 Move X20, [X31+16]
	094 Move X19, [X31+24]
	095 Move X30, [X31+32]
	096 Move X21, [X31+40]
	097 Return X0
	098 Call 0x1C17F28
	099 Call 0x1C17F20

Method: System.Void setBit(System.UInt32 bitNum)

Disassembly:
	0x03533B1C MOVZ W1, 0x40
	0x03533B20 BL 0x1C16D6C
	0x03533B24 LDR X1, [X19]
	0x03533B28 MOV X2, X31
	0x03533B2C MOV X25, X0
	0x03533B30 BL 0x32C5BD8
	0x03533B34 ADRP X19, 0xC01000
	0x03533B38 LDR X19, [X19 + 0x980]
	0x03533B3C LDR X0, [X19]
	0x03533B40 BL 0x1C16F10
	0x03533B44 MOV X1, X22
	0x03533B48 MOV X23, X0
	0x03533B4C BL 0x352C93C
	0x03533B50 LDR X0, [X19]
	0x03533B54 BL 0x1C16F10
	0x03533B58 MOV X1, X25
	0x03533B5C MOV X24, X0
	0x03533B60 BL 0x352C93C
	0x03533B64 LDR X0, [X19]
	0x03533B68 LDR W8, [X0 + 0xE0]
	0x03533B6C CBNZ W8, 0x3533B74
	0x03533B70 BL 0x1C16DFC
	0x03533B74 MOVZ W0, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move X9, [X0+16]
	003 Compare X9, 0
	004 JumpIfEqual {23}
	005 Move W10, [X9+24]
	006 Move W8, W1
	007 ShiftRight W8, 5
	008 And W8, W8, 0x7FFFFFFF
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move W10, W8
	011 Add X9, X9, X10
	012 Move W11, [X9+32]
	013 Move W12, 1
	014 NotImplemented "Instruction LSLV not yet implemented."
	015 Or W11, W11, W12
	016 Move [X9+32], W11
	017 NotImplemented "Instruction LDRSW not yet implemented."
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Add W8, W8, 1
	020 Move [X0+24], W8
	021 Move X30, [X31+16]
	022 Return 
	023 Call 0x1C17F20
	024 Call 0x1C17F28

Method: System.Void unsetBit(System.UInt32 bitNum)

Disassembly:
	0x03533B78 BL 0x352C1F8
	0x03533B7C MOV X1, X0
	0x03533B80 MOV X0, X23
	0x03533B84 BL 0x352D228
	0x03533B88 MOV X22, X0
	0x03533B8C MOVZ W0, 0x1
	0x03533B90 BL 0x352C1F8
	0x03533B94 MOV X1, X0
	0x03533B98 MOV X0, X24
	0x03533B9C BL 0x352D228
	0x03533BA0 MOV X1, X0
	0x03533BA4 MOV X0, X22
	0x03533BA8 BL 0x352C250
	0x03533BAC MOV X27, X0
	0x03533BB0 MOV X0, X23
	0x03533BB4 MOV X1, X24
	0x03533BB8 BL 0x352C250
	0x03533BBC LDR W8, [X31 + 0x18]
	0x03533BC0 STR W31, [X31 + 0x1C]
	0x03533BC4 CMP W8, 0x1
	0x03533BC8 B.LT 0x3533FA4
	0x03533BCC CBZ X27, 0x3533FCC
	0x03533BD0 ADRP X22, 0xBC8000
	0x03533BD4 ADRP X8, 0xFFFFFFFFFD5BB000
	0x03533BD8 LDR X22, [X22 + 0x958]
	0x03533BDC LDR V8, [X8 + 0x2E8]
	0x03533BE0 MOV X23, X0
	0x03533BE4 MOVZ X19, 0x7FF00000
	0x03533BE8 MOVZ W28, 0x80000000
	0x03533BEC MOVZ X29, 0x40700000
	0x03533BF0 STR X27, [X31]

ISIL:
	001 Move [X31-16], X30
	002 NotImplemented "Instruction LDRSW not yet implemented."
	003 Move W9, W1
	004 ShiftRight W9, 5
	005 And W9, W9, 0x7FFFFFFF
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X8, [X0+16]
	008 Compare X8, 0
	009 JumpIfEqual {31}
	010 Move W10, [X8+24]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Add X9, X8, X9
	013 Move W11, [X9+32]
	014 Move W12, 1
	015 NotImplemented "Instruction LSLV not yet implemented."
	016 NotImplemented "Instruction ORN not yet implemented."
	017 And W11, W11, W12
	018 Move [X9+32], W11
	019 Move W9, [X0+24]
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Subtract W9, W9, 1
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Add X8, X8, W9
	024 Move W8, [X8+32]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Move [X0+24], W9
	028 Move X30, [X31+16]
	029 Return 
	030 Call 0x1C17F28
	031 Call 0x1C17F20

Method: Photon.SocketServer.Numeric.BigInteger sqrt()

Disassembly:
	0x03532688 BL 0x352BB04
	0x0353268C LDR X0, [X28]
	0x03532690 BL 0x1C16F10
	0x03532694 MOV X24, X0
	0x03532698 BL 0x352BB04
	0x0353269C CMP W19, 0x2
	0x035326A0 B.LT 0x3532760
	0x035326A4 LDR W8, [X29 + 0x18]
	0x035326A8 CBZ W8, 0x3532974
	0x035326AC CMP W8, 0x1
	0x035326B0 B.EQ 0x3532974
	0x035326B4 CBZ X22, 0x3532864
	0x035326B8 LDR W8, [X22 + 0x18]
	0x035326BC CBZ W8, 0x3532974
	0x035326C0 LDR X0, [X28]
	0x035326C4 LDP X27, X28, [X29 + 0x20]
	0x035326C8 LDR X20, [X22 + 0x20]
	0x035326CC LDR W8, [X0 + 0xE0]
	0x035326D0 CBNZ W8, 0x35326D8
	0x035326D4 BL 0x1C16DFC
	0x035326D8 MOV X0, X28
	0x035326DC MOV X1, X20
	0x035326E0 BL 0x352C250
	0x035326E4 MOV X1, X0
	0x035326E8 MOV X0, X27
	0x035326EC BL 0x352D228
	0x035326F0 LDR X1, [X31 + 0x8]
	0x035326F4 BL 0x352EB38
	0x035326F8 LDR X8, [X29 + 0x18]
	0x035326FC CMP W8, 0x1
	0x03532700 B.LS 0x3532974
	0x03532704 LDR X28, [X29 + 0x28]
	0x03532708 MOV X27, X0
	0x0353270C CBZ X28, 0x3532728
	0x03532710 LDR X8, [X29]
	0x03532714 MOV X0, X28
	0x03532718 LDR X1, [X8 + 0x40]
	0x0353271C BL 0x1C16E00
	0x03532720 CBZ X0, 0x3532978
	0x03532724 LDR X8, [X29 + 0x18]
	0x03532728 CBZ W8, 0x3532974
	0x0353272C STR X28, [X29 + 0x20]
	0x03532730 ADRP X28, 0xC02000
	0x03532734 LDR X28, [X28 + 0x980]
	0x03532738 CBZ X27, 0x3532754
	0x0353273C LDR X8, [X29]
	0x03532740 MOV X0, X27
	0x03532744 LDR X1, [X8 + 0x40]
	0x03532748 BL 0x1C16E00
	0x0353274C CBZ X0, 0x3532978
	0x03532750 LDR W8, [X29 + 0x18]
	0x03532754 CMP W8, 0x1
	0x03532758 B.LS 0x3532974
	0x0353275C STR X27, [X29 + 0x28]
	0x03532760 LDR X0, [X28]
	0x03532764 LDR W27, [X21 + 0x18]
	0x03532768 LDR W8, [X0 + 0xE0]
	0x0353276C CBNZ W8, 0x3532774
	0x03532770 BL 0x1C16DFC
	0x03532774 MOV X0, X26
	0x03532778 MOV X1, X21
	0x0353277C MOV X2, X25
	0x03532780 MOV X3, X24
	0x03532784 CMP W27, 0x1
	0x03532788 B.NE 0x3532794
	0x0353278C BL 0x352E680
	0x03532790 B 0x3532798
	0x03532794 BL 0x352E0AC
	0x03532798 CBZ X22, 0x3532864
	0x0353279C LDR X8, [X22 + 0x18]
	0x035327A0 CMP W8, 0x1
	0x035327A4 B.LS 0x3532974
	0x035327A8 LDR X26, [X22 + 0x28]
	0x035327AC CBZ X26, 0x35327C8
	0x035327B0 LDR X8, [X22]
	0x035327B4 MOV X0, X26
	0x035327B8 LDR X1, [X8 + 0x40]
	0x035327BC BL 0x1C16E00
	0x035327C0 CBZ X0, 0x3532978

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xEAE000
	009 Move X21, 0xC03000
	010 Move W8, [X20+2997]
	011 Move X21, [X21+2432]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xC03000
	018 Move X0, [X0+2432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2997], W8
	022 Move X0, X19
	023 Call BigInteger.bitCount, X0
	024 Move X8, [X21]
	025 And W9, W0, 1
	026 Add W22, W9, W0
	027 Move W23, W22
	028 ShiftRight W23, 5
	029 And W23, W23, 0x7FFFFFFF
	030 Move X0, X8
	031 Call 0x1C17F10
	032 Move X20, X0
	033 Call BigInteger..ctor, X0
	034 And W9, W22, 31
	035 NotImplemented "Instruction CINC not yet implemented."
	036 Compare X20, 0
	037 JumpIfEqual {97}
	038 Move [X20+24], W8
	039 Compare W8, 0
	040 JumpIfEqual {88}
	041 Move W10, 1
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move W11, 0x80000000
	044 NotImplemented "Instruction LSLV not yet implemented."
	045 Subtract W22, W8, 1
	046 NotImplemented "Instruction CSEL not yet implemented."
	047 Move W23, W8
	048 Subtract X23, X23, 1
	049 Move X8, [X20+16]
	050 Compare X8, 0
	051 JumpIfEqual {97}
	052 Move W9, [X8+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Add X8, X8, X23
	055 Move W9, [X8+32]
	056 Xor W9, W9, W24
	057 Move [X8+32], W9
	058 Move X0, [X21]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {63}
	062 Call 0x1C17DFC
	063 Move X0, X20
	064 Move X1, X20
	065 Call BigInteger.op_Multiply, X0, X1
	066 Move X1, X19
	067 Call BigInteger.op_GreaterThan, X0, X1
	068 Move TEMP, X0
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfNotEqual {81}
	072 Move X8, [X20+16]
	073 Compare X8, 0
	074 JumpIfEqual {97}
	075 Move W9, [X8+24]
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Add X8, X8, X23
	078 Move W9, [X8+32]
	079 Xor W9, W9, W24
	080 Move [X8+32], W9
	081 Move W24, W24
	082 ShiftRight W24, 1
	083 And W24, W24, 0x7FFFFFFF
	084 Compare W24, 0
	085 JumpIfNotEqual {49}
	086 Subtract W22, W22, 1
	087 Move W24, 0x80000000
	088 Move X0, X20
	089 Move X20, [X31+48]
	090 Move X19, [X31+56]
	091 Move X22, [X31+32]
	092 Move X21, [X31+40]
	093 Move X24, [X31+16]
	094 Move X23, [X31+24]
	095 Move X30, [X31+64]
	096 Return X0
	097 Call 0x1C17F20
	098 Call 0x1C17F28

Method: Photon.SocketServer.Numeric.BigInteger[] LucasSequence(Photon.SocketServer.Numeric.BigInteger P, Photon.SocketServer.Numeric.BigInteger Q, Photon.SocketServer.Numeric.BigInteger k, Photon.SocketServer.Numeric.BigInteger n)

Disassembly:
	0x03533BF4 MOVZ W1, 0x200
	0x03533BF8 MOV X0, X27
	0x03533BFC MOV X2, X20
	0x03533C00 BL 0x3532418
	0x03533C04 CBZ X0, 0x3533FCC
	0x03533C08 MOV X1, X27
	0x03533C0C MOV X25, X0
	0x03533C10 BL 0x35324D0
	0x03533C14 MOV X24, X0
	0x03533C18 MOVZ W1, 0xA
	0x03533C1C MOV X0, X25
	0x03533C20 STR X25, [X31 + 0x8]
	0x03533C24 BL 0x352F240
	0x03533C28 ADRP X8, 0xC01000
	0x03533C2C LDR X8, [X8 + 0xAD0]
	0x03533C30 MOV X1, X0
	0x03533C34 MOV X2, X31
	0x03533C38 LDR X8, [X8]
	0x03533C3C MOV X0, X8
	0x03533C40 BL 0x321B938
	0x03533C44 LDR X8, [X22]
	0x03533C48 MOV X26, X0
	0x03533C4C LDR W9, [X8 + 0xE0]
	0x03533C50 CBNZ W9, 0x3533C5C
	0x03533C54 MOV X0, X8
	0x03533C58 BL 0x1C16DFC
	0x03533C5C MOV X0, X26
	0x03533C60 MOV X1, X31
	0x03533C64 BL 0x33C33A0
	0x03533C68 CBZ X24, 0x3533FCC
	0x03533C6C MOVZ W1, 0xA
	0x03533C70 MOV X0, X24
	0x03533C74 MOV X25, X24
	0x03533C78 BL 0x352F240
	0x03533C7C ADRP X8, 0xC01000
	0x03533C80 LDR X8, [X8 + 0xAB8]
	0x03533C84 MOV X1, X0
	0x03533C88 MOV X2, X31
	0x03533C8C LDR X8, [X8]
	0x03533C90 MOV X0, X8
	0x03533C94 BL 0x321B938
	0x03533C98 MOV X1, X31
	0x03533C9C BL 0x33C33A0
	0x03533CA0 CBZ X23, 0x3533FCC
	0x03533CA4 MOVZ W1, 0xA
	0x03533CA8 MOV X0, X23
	0x03533CAC MOV X24, X23
	0x03533CB0 BL 0x352F240
	0x03533CB4 ADRP X8, 0xC01000
	0x03533CB8 LDR X8, [X8 + 0xAA0]
	0x03533CBC ADRP X9, 0xBC1000
	0x03533CC0 MOV X1, X0
	0x03533CC4 MOV X3, X31
	0x03533CC8 LDR X8, [X8]
	0x03533CCC LDR X9, [X9 + 0xFE0]
	0x03533CD0 MOV X0, X8
	0x03533CD4 LDR X2, [X9]
	0x03533CD8 BL 0x32274B8
	0x03533CDC MOV X1, X31
	0x03533CE0 BL 0x33C33A0
	0x03533CE4 CBZ X20, 0x3533FCC
	0x03533CE8 MOV X23, X22
	0x03533CEC LDR X8, [X20]
	0x03533CF0 MOV X0, X20
	0x03533CF4 LDP X9, X1, [X8 + 0x1B8]
	0x03533CF8 BLR X9
	0x03533CFC FMUL D0, D0, D8
	0x03533D00 FMOV D1, X19
	0x03533D04 FCVTZS W8, D0
	0x03533D08 FCMP D0, D1
	0x03533D0C CSEL W26, W28, W8, EQ
	0x03533D10 CBZ W26, 0x3533CEC
	0x03533D14 MOV W27, W31
	0x03533D18 MOV W8, W31
	0x03533D1C CMP W27, 0x40
	0x03533D20 MOV W22, W8
	0x03533D24 B.GE 0x3533DA4
	0x03533D28 CMP W27, W26
	0x03533D2C B.GE 0x3533D68
	0x03533D30 LDR X8, [X20]
	0x03533D34 MOV X0, X20
	0x03533D38 LDP X9, X1, [X8 + 0x1B8]
	0x03533D3C BLR X9
	0x03533D40 CBZ X21, 0x3533FCC
	0x03533D44 LDR W8, [X21 + 0x18]
	0x03533D48 CMP W27, W8
	0x03533D4C B.CS 0x3533FC8
	0x03533D50 FMOV D1, X29
	0x03533D54 FMUL D0, D0, D1
	0x03533D58 FCVTZS W8, D0
	0x03533D5C FCMP D0, 0x0
	0x03533D60 CSEL W8, W8, W8, MI
	0x03533D64 B 0x3533D7C
	0x03533D68 CBZ X21, 0x3533FCC
	0x03533D6C LDR W8, [X21 + 0x18]
	0x03533D70 CMP W27, W8
	0x03533D74 B.CS 0x3533FC8
	0x03533D78 MOV W8, W31
	0x03533D7C ADD X9, X21, W27, SXTW
	0x03533D80 STRB W8, [X9 + 0x20]
	0x03533D84 LDR W9, [X21 + 0x18]
	0x03533D88 CMP W27, W9
	0x03533D8C B.CS 0x3533FC8
	0x03533D90 ANDS W31, W8, 0xFF
	0x03533D94 CSET W8, NE
	0x03533D98 ORR W8, W22, W8, 0x0
	0x03533D9C ADD W27, W27, 0x1
	0x03533DA0 B 0x3533D1C
	0x03533DA4 MOV W27, W31
	0x03533DA8 MOV W8, W31
	0x03533DAC TBZ X22, 0x0, 0x3533D1C
	0x03533DB0 CBZ X21, 0x3533FCC
	0x03533DB4 LDR W8, [X21 + 0x18]
	0x03533DB8 MOV X22, X23
	0x03533DBC MOV X23, X24
	0x03533DC0 CBZ W8, 0x3533FC8
	0x03533DC4 LDRB W8, [X21 + 0x20]
	0x03533DC8 CBNZ W8, 0x3533E04
	0x03533DCC LDR X8, [X20]
	0x03533DD0 MOV X0, X20
	0x03533DD4 LDP X9, X1, [X8 + 0x1B8]
	0x03533DD8 BLR X9
	0x03533DDC LDR X8, [X21 + 0x18]
	0x03533DE0 CBZ W8, 0x3533FC8
	0x03533DE4 FMOV D1, X29
	0x03533DE8 FMUL D0, D0, D1
	0x03533DEC FCVTZS W9, D0
	0x03533DF0 FCMP D0, 0x0
	0x03533DF4 CSEL W9, W9, W9, MI
	0x03533DF8 STRB W9, [X21 + 0x20]
	0x03533DFC CBNZ W8, 0x3533DC4
	0x03533E00 B 0x3533FC8
	0x03533E04 ADD X0, X31, 0x1C
	0x03533E08 MOV X1, X31
	0x03533E0C BL 0x337B6E0
	0x03533E10 ADRP X8, 0xC01000
	0x03533E14 LDR X8, [X8 + 0xA90]
	0x03533E18 MOV X1, X0
	0x03533E1C MOV X2, X31
	0x03533E20 LDR X8, [X8]
	0x03533E24 MOV X0, X8
	0x03533E28 BL 0x321B938
	0x03533E2C LDR X8, [X22]
	0x03533E30 MOV X27, X0
	0x03533E34 LDR W9, [X8 + 0xE0]
	0x03533E38 CBNZ W9, 0x3533E44
	0x03533E3C MOV X0, X8
	0x03533E40 BL 0x1C16DFC
	0x03533E44 MOV X0, X27
	0x03533E48 MOV X1, X31
	0x03533E4C BL 0x33C324C
	0x03533E50 ADRP X8, 0xC01000
	0x03533E54 LDR X8, [X8 + 0x980]
	0x03533E58 LDR X0, [X8]
	0x03533E5C BL 0x1C16F10
	0x03533E60 MOV X1, X21
	0x03533E64 MOV W2, W26
	0x03533E68 MOV X27, X0
	0x03533E6C BL 0x352CBAC
	0x03533E70 CBZ X27, 0x3533FCC
	0x03533E74 LDR X1, [X31 + 0x8]
	0x03533E78 MOV X0, X27
	0x03533E7C MOV X2, X23
	0x03533E80 BL 0x352F678
	0x03533E84 CBZ X0, 0x3533FCC
	0x03533E88 MOV X1, X25
	0x03533E8C MOV X2, X23
	0x03533E90 BL 0x352F678
	0x03533E94 ADRP X8, 0xC01000
	0x03533E98 LDR X8, [X8 + 0x980]
	0x03533E9C MOV X24, X0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X23, 0xEAD000
	010 Move W8, [X23+2998]
	011 Move X19, X3
	012 Move X22, X2
	013 Move X20, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xC02000
	020 Move X0, [X0+2640]
	021 Call 0x1C17CF4
	022 Move X0, 0xC02000
	023 Move X0, [X0+2432]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+2998], W8
	027 Compare X22, 0
	028 JumpIfEqual {196}
	029 Move W8, [X22+24]
	030 Move X25, 0xC02000
	031 Move X25, [X25+2432]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X8, [X22+16]
	034 Compare X8, 0
	035 JumpIfEqual {196}
	036 Move W9, [X8+24]
	037 Compare W9, 0
	038 JumpIfEqual {195}
	039 Move W8, [X8+32]
	040 Compare W8, 0
	041 JumpIfEqual {124}
	042 Move X0, [X25]
	043 Call 0x1C17F10
	044 Move X23, X0
	045 Call BigInteger..ctor, X0
	046 Compare X19, 0
	047 JumpIfEqual {196}
	048 Compare X23, 0
	049 JumpIfEqual {196}
	050 Move X8, [X23+16]
	051 Compare X8, 0
	052 JumpIfEqual {196}
	053 Move W9, [X19+24]
	054 Move W10, [X8+24]
	055 Move W9, W9
	056 ShiftRight W9, 31
	057 And W9, W9, 0x3FFFFFFF
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Add X8, X8, W9
	060 Move W10, 1
	061 Or W9, W9, 1
	062 Move [X8+32], W10
	063 Move [X23+24], W9
	064 Move X0, [X25]
	065 Move W8, [X0+224]
	066 Compare W8, 0
	067 JumpIfNotEqual {69}
	068 Call 0x1C17DFC
	069 Move X0, X23
	070 Move X1, X19
	071 Call BigInteger.op_Division, X0, X1
	072 Move W8, [X22+24]
	073 Move X23, X0
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X9, [X22+16]
	076 Compare X9, 0
	077 JumpIfEqual {196}
	078 Move W10, [X9+24]
	079 Move W12, W31
	080 Move W11, W31
	081 Add X14, X9, W11
	082 Move W13, W31
	083 Add W24, W12, 32
	084 Add X14, X14, 32
	085 Move W15, 1
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move W16, [X14]
	088 And W31, W16, W15
	089 Add W13, W13, 1
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move W15, W15
	092 ShiftRight W15, 31
	093 And W15, W15, 0x3FFFFFFF
	094 Add W24, W12, W13
	095 Move W11, W8
	096 Add W11, W11, 1
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move W12, W24
	099 Move W24, W31
	100 Move X0, [X25]
	101 Move W8, [X0+224]
	102 Compare W8, 0
	103 JumpIfNotEqual {105}
	104 Call 0x1C17DFC
	105 Move X0, X22
	106 Move W1, W24
	107 Call BigInteger.op_RightShift, X0, X1
	108 Move X2, X0
	109 Move X0, X21
	110 Move X1, X20
	111 Move X3, X19
	112 Move X4, X23
	113 Move W5, W24
	114 Move X20, [X31+48]
	115 Move X19, [X31+56]
	116 Move X22, [X31+32]
	117 Move X21, [X31+40]
	118 Move X24, [X31+16]
	119 Move X23, [X31+24]
	120 Move X30, [X31+64]
	121 Move X25, [X31+72]
	122 Call BigInteger.LucasSequenceHelper, X0, X1, X2, X3, X4, X5
	123 Return X0
	124 Move X8, 0xC02000
	125 Move X8, [X8+2640]
	126 Move W1, 3
	127 Move X0, [X8]
	128 Call 0x1C17D6C
	129 Move X8, [X25]
	130 Move X20, X0
	131 Move W9, [X8+224]
	132 Compare W9, 0
	133 JumpIfNotEqual {136}
	134 Move X0, X8
	135 Call 0x1C17DFC
	136 Move W0, W31
	137 Call BigInteger.op_Implicit, X0
	138 Compare X20, 0
	139 JumpIfEqual {196}
	140 Move X21, X0
	141 Compare X0, 0
	142 JumpIfEqual {149}
	143 Move X8, [X20]
	144 Move X0, X21
	145 Move X1, [X8+64]
	146 Call 0x1C17E00
	147 Compare X0, 0
	148 JumpIfEqual {197}
	149 Move W8, [X20+24]
	150 Compare W8, 0
	151 JumpIfEqual {195}
	152 Move W0, 2
	153 Move [X20+32], X21
	154 Call BigInteger.op_Implicit, X0
	155 Move X1, X19
	156 Call BigInteger.op_Modulus, X0, X1
	157 Move X21, X0
	158 Compare X0, 0
	159 JumpIfEqual {166}
	160 Move X8, [X20]
	161 Move X0, X21
	162 Move X1, [X8+64]
	163 Call 0x1C17E00
	164 Compare X0, 0
	165 JumpIfEqual {197}
	166 Move W8, [X20+24]
	167 NotImplemented "Instruction CMP not yet implemented."
	168 Move W0, 1
	169 Move [X20+40], X21
	170 Call BigInteger.op_Implicit, X0
	171 Move X1, X19
	172 Call BigInteger.op_Modulus, X0, X1
	173 Move X19, X0
	174 Compare X0, 0
	175 JumpIfEqual {182}
	176 Move X8, [X20]
	177 Move X0, X19
	178 Move X1, [X8+64]
	179 Call 0x1C17E00
	180 Compare X0, 0
	181 JumpIfEqual {197}
	182 Move W8, [X20+24]
	183 NotImplemented "Instruction CMP not yet implemented."
	184 Move [X20+48], X19
	185 Move X0, X20
	186 Move X20, [X31+48]
	187 Move X19, [X31+56]
	188 Move X22, [X31+32]
	189 Move X21, [X31+40]
	190 Move X24, [X31+16]
	191 Move X23, [X31+24]
	192 Move X30, [X31+64]
	193 Move X25, [X31+72]
	194 Return X0
	195 Call 0x1C17F28
	196 Call 0x1C17F20
	197 Call 0x1C17F44
	198 Move X1, X31
	199 Call 0x1C17DEC

Method: Photon.SocketServer.Numeric.BigInteger[] LucasSequenceHelper(Photon.SocketServer.Numeric.BigInteger P, Photon.SocketServer.Numeric.BigInteger Q, Photon.SocketServer.Numeric.BigInteger k, Photon.SocketServer.Numeric.BigInteger n, Photon.SocketServer.Numeric.BigInteger constant, System.Int32 s)

Disassembly:
	0x035327C4 LDR X8, [X22 + 0x18]
	0x035327C8 CBZ W8, 0x3532974
	0x035327CC STR X26, [X22 + 0x20]
	0x035327D0 LDR X8, [X23 + 0x18]
	0x035327D4 CMP W8, 0x1
	0x035327D8 B.LS 0x3532974
	0x035327DC LDR X26, [X23 + 0x28]
	0x035327E0 CBZ X26, 0x35327FC
	0x035327E4 LDR X8, [X23]
	0x035327E8 MOV X0, X26
	0x035327EC LDR X1, [X8 + 0x40]
	0x035327F0 BL 0x1C16E00
	0x035327F4 CBZ X0, 0x3532978
	0x035327F8 LDR X8, [X23 + 0x18]
	0x035327FC CBZ W8, 0x3532974
	0x03532800 STR X26, [X23 + 0x20]
	0x03532804 CBZ X25, 0x353281C
	0x03532808 LDR X8, [X22]
	0x0353280C MOV X0, X25
	0x03532810 LDR X1, [X8 + 0x40]
	0x03532814 BL 0x1C16E00
	0x03532818 CBZ X0, 0x3532978
	0x0353281C LDR W8, [X22 + 0x18]
	0x03532820 CMP W8, 0x1
	0x03532824 B.LS 0x3532974
	0x03532828 STR X25, [X22 + 0x28]
	0x0353282C CBZ X24, 0x3532844
	0x03532830 LDR X8, [X23]
	0x03532834 MOV X0, X24
	0x03532838 LDR X1, [X8 + 0x40]
	0x0353283C BL 0x1C16E00
	0x03532840 CBZ X0, 0x3532978
	0x03532844 LDR X8, [X23 + 0x18]
	0x03532848 CMP W8, 0x1
	0x0353284C B.LS 0x3532974
	0x03532850 ADD W19, W19, 0x1
	0x03532854 MOV X26, X21
	0x03532858 MOV X21, X24
	0x0353285C STR X24, [X23 + 0x28]
	0x03532860 CBNZ X24, 0x3532654
	0x03532864 BL 0x1C16F20
	0x03532868 CBZ W8, 0x3532974
	0x0353286C LDR X8, [X23 + 0x20]
	0x03532870 CBZ X8, 0x3532864
	0x03532874 LDR W9, [X8 + 0x18]
	0x03532878 CMP W9, 0x1
	0x0353287C B.GT 0x3532984
	0x03532880 B.NE 0x35328A0
	0x03532884 LDR X8, [X8 + 0x10]
	0x03532888 CBZ X8, 0x3532864
	0x0353288C LDR W9, [X8 + 0x18]
	0x03532890 CBZ W9, 0x3532974
	0x03532894 LDR W8, [X8 + 0x20]
	0x03532898 CMP W8, 0x1
	0x0353289C B.NE 0x3532984
	0x035328A0 LDR W8, [X29 + 0x18]
	0x035328A4 CBZ W8, 0x3532974
	0x035328A8 CMP W8, 0x1
	0x035328AC B.EQ 0x3532974
	0x035328B0 CBZ X22, 0x3532864
	0x035328B4 LDR W8, [X22 + 0x18]
	0x035328B8 CBZ W8, 0x3532974
	0x035328BC LDR X0, [X28]
	0x035328C0 LDP X21, X20, [X29 + 0x20]
	0x035328C4 LDR X22, [X22 + 0x20]
	0x035328C8 LDR W8, [X0 + 0xE0]
	0x035328CC CBNZ W8, 0x35328D4
	0x035328D0 BL 0x1C16DFC
	0x035328D4 MOV X0, X20
	0x035328D8 MOV X1, X22
	0x035328DC BL 0x352C250
	0x035328E0 MOV X1, X0
	0x035328E4 MOV X0, X21
	0x035328E8 BL 0x352D228
	0x035328EC LDR X1, [X31 + 0x8]
	0x035328F0 BL 0x352EB38
	0x035328F4 CBZ X0, 0x3532864
	0x035328F8 LDR X8, [X0 + 0x10]
	0x035328FC MOV X20, X0
	0x03532900 CBZ X8, 0x3532864
	0x03532904 LDR W9, [X8 + 0x18]
	0x03532908 CMP W9, 0x45
	0x0353290C B.LS 0x3532974
	0x03532910 LDR W8, [X8 + 0x134]
	0x03532914 TBNZ X8, 0x1F, 0x353293C
	0x03532918 MOV X0, X20
	0x0353291C LDP X20, X19, [X31 + 0x60]
	0x03532920 LDP X22, X21, [X31 + 0x50]
	0x03532924 LDP X24, X23, [X31 + 0x40]
	0x03532928 LDP X26, X25, [X31 + 0x30]
	0x0353292C LDP X28, X27, [X31 + 0x20]
	0x03532930 LDP X29, X30, [X31 + 0x10]
	0x03532934 ADD X31, X31, 0x70
	0x03532938 RET
	0x0353293C LDR X0, [X28]
	0x03532940 LDR W8, [X0 + 0xE0]
	0x03532944 CBNZ W8, 0x353294C
	0x03532948 BL 0x1C16DFC
	0x0353294C MOV X0, X20
	0x03532950 LDR X1, [X31 + 0x8]
	0x03532954 LDP X20, X19, [X31 + 0x60]
	0x03532958 LDP X22, X21, [X31 + 0x50]
	0x0353295C LDP X24, X23, [X31 + 0x40]
	0x03532960 LDP X26, X25, [X31 + 0x30]
	0x03532964 LDP X28, X27, [X31 + 0x20]
	0x03532968 LDP X29, X30, [X31 + 0x10]
	0x0353296C ADD X31, X31, 0x70
	0x03532970 B 0x352C728
	0x03532974 BL 0x1C16F28
	0x03532978 BL 0x1C16F44
	0x0353297C MOV X1, X31
	0x03532980 BL 0x1C16DEC
	0x03532984 ADRP X0, 0xBEF000
	0x03532988 LDR X0, [X0 + 0x560]
	0x0353298C BL 0x1C16D08
	0x03532990 BL 0x1C16F10
	0x03532994 MOV X19, X0
	0x03532998 ADRP X0, 0xBEF000
	0x0353299C LDR X0, [X0 + 0x740]
	0x035329A0 BL 0x1C16D08
	0x035329A4 MOV X1, X0
	0x035329A8 MOV X0, X19
	0x035329AC MOV X2, X31
	0x035329B0 BL 0x3316338
	0x035329B4 ADRP X0, 0xC02000
	0x035329B8 LDR X0, [X0 + 0xA68]
	0x035329BC BL 0x1C16D08
	0x035329C0 MOV X1, X0
	0x035329C4 MOV X0, X19
	0x035329C8 BL 0x1C16DEC
	0x035329CC STP X30, X21, [X31 - 0x20]!
	0x035329D0 STP X20, X19, [X31 + 0x10]
	0x035329D4 ADRP X20, 0xEAD000
	0x035329D8 ADRP X21, 0xC02000
	0x035329DC LDRB W8, [X20 + 0xBB4]
	0x035329E0 LDR X21, [X21 + 0x980]
	0x035329E4 MOV X19, X0
	0x035329E8 TBNZ X8, 0x0, 0x3532A0C
	0x035329EC ADRP X0, 0xC02000
	0x035329F0 LDR X0, [X0 + 0x980]
	0x035329F4 BL 0x1C16CF4
	0x035329F8 ADRP X0, 0xBC1000
	0x035329FC LDR X0, [X0 + 0x618]
	0x03532A00 BL 0x1C16CF4
	0x03532A04 MOVZ W8, 0x1
	0x03532A08 STRB W8, [X20 + 0xBB4]
	0x03532A0C LDR X0, [X21]
	0x03532A10 LDR W8, [X0 + 0xE0]
	0x03532A14 CBNZ W8, 0x3532A1C
	0x03532A18 BL 0x1C16DFC
	0x03532A1C MOV W0, W31
	0x03532A20 BL 0x352C1F8
	0x03532A24 CBZ X19, 0x3532B18
	0x03532A28 LDR X8, [X19]
	0x03532A2C MOV X1, X0
	0x03532A30 MOV X0, X19
	0x03532A34 LDP X9, X2, [X8 + 0x138]
	0x03532A38 BLR X9
	0x03532A3C TBZ X0, 0x0, 0x3532A5C
	0x03532A40 ADRP X8, 0xBC1000
	0x03532A44 LDR X8, [X8 + 0x618]
	0x03532A48 LDP X20, X19, [X31 + 0x10]
	0x03532A4C MOVZ W1, 0x1
	0x03532A50 LDR X0, [X8]
	0x03532A54 LDP X30, X21, [X31], #0x20
	0x03532A58 B 0x1C16D6C
	0x03532A5C MOV X0, X19
	0x03532A60 BL 0x352F9D0
	0x03532A64 ADRP X8, 0xBC1000
	0x03532A68 LDR X8, [X8 + 0x618]
	0x03532A6C SBFM W9, W0, 0x3, 0x1F
	0x03532A70 ANDS W31, W0, 0x7
	0x03532A74 CINC W20, W9, NE
	0x03532A78 LDR X8, [X8]
	0x03532A7C MOV W1, W20
	0x03532A80 MOV X0, X8
	0x03532A84 BL 0x1C16D6C
	0x03532A88 LDR W8, [X19 + 0x18]
	0x03532A8C SUBS W8, W8, 0x1
	0x03532A90 B.MI 0x3532B08
	0x03532A94 ANDS W10, W20, 0x3
	0x03532A98 MOVZ W11, 0x4
	0x03532A9C MOV W9, W31
	0x03532AA0 CSEL W10, W11, W10, EQ
	0x03532AA4 LDR X11, [X19 + 0x10]
	0x03532AA8 CBZ X11, 0x3532B18
	0x03532AAC LDR W12, [X11 + 0x18]
	0x03532AB0 CMP W8, W12
	0x03532AB4 B.CS 0x3532B14
	0x03532AB8 CBZ X0, 0x3532B18
	0x03532ABC ADD X11, X11, W8, 0x2, UXTW
	0x03532AC0 LDR W11, [X11 + 0x20]
	0x03532AC4 MOV W12, W10
	0x03532AC8 SUB W13, W9, 0x1
	0x03532ACC LDR W15, [X0 + 0x18]
	0x03532AD0 ADD X14, X13, X12
	0x03532AD4 CMP W14, W15
	0x03532AD8 B.CS 0x3532B14
	0x03532ADC SUB X12, X12, 0x1
	0x03532AE0 ADD X14, X0, W14, SXTW
	0x03532AE4 STRB W11, [X14 + 0x20]
	0x03532AE8 ADD X14, X12, 0x1
	0x03532AEC CMP X14, 0x1
	0x03532AF0 UBFM W11, W11, 0x8, 0x1F
	0x03532AF4 B.GT 0x3532ACC
	0x03532AF8 ADD W9, W10, W9
	0x03532AFC SUBS W8, W8, 0x1
	0x03532B00 MOVZ W10, 0x4
	0x03532B04 B.PL 0x3532AA4
	0x03532B08 LDP X20, X19, [X31 + 0x10]
	0x03532B0C LDP X30, X21, [X31], #0x20
	0x03532B10 RET
	0x03532B14 BL 0x1C16F28
	0x03532B18 BL 0x1C16F20
	0x03532B1C STR X30, [X31 - 0x10]!
	0x03532B20 LDR X9, [X0 + 0x10]
	0x03532B24 CBZ X9, 0x3532B70
	0x03532B28 LDR W10, [X9 + 0x18]
	0x03532B2C UBFM W8, W1, 0x5, 0x1F
	0x03532B30 CMP W8, W10
	0x03532B34 B.CS 0x3532B74
	0x03532B38 MOV W10, W8
	0x03532B3C ADD X9, X9, X10, 0x2, LSL
	0x03532B40 LDR W11, [X9 + 0x20]
	0x03532B44 MOVZ W12, 0x1
	0x03532B48 LSLV W12, W12, W1
	0x03532B4C ORR W11, W11, W12, 0x0
	0x03532B50 STR W11, [X9 + 0x20]
	0x03532B54 LDRSW X9, [X0 + 0x18]
	0x03532B58 CMP X10, X9
	0x03532B5C B.LT 0x3532B68
	0x03532B60 ADD W8, W8, 0x1
	0x03532B64 STR W8, [X0 + 0x18]
	0x03532B68 LDR X30, [X31], #0x10
	0x03532B6C RET
	0x03532B70 BL 0x1C16F20
	0x03532B74 BL 0x1C16F28
	0x03532B78 STR X30, [X31 - 0x10]!
	0x03532B7C LDRSW X8, [X0 + 0x18]
	0x03532B80 UBFM W9, W1, 0x5, 0x1F
	0x03532B84 CMP X9, X8
	0x03532B88 B.GE 0x3532BE4
	0x03532B8C LDR X8, [X0 + 0x10]
	0x03532B90 CBZ X8, 0x3532BF0
	0x03532B94 LDR W10, [X8 + 0x18]
	0x03532B98 CMP W9, W10
	0x03532B9C B.CS 0x3532BEC
	0x03532BA0 ADD X9, X8, X9, 0x2, LSL
	0x03532BA4 LDR W11, [X9 + 0x20]
	0x03532BA8 MOVZ W12, 0x1
	0x03532BAC LSLV W12, W12, W1
	0x03532BB0 ORN W12, W31, W12, 0x0
	0x03532BB4 AND W11, W11, W12, 0x0
	0x03532BB8 STR W11, [X9 + 0x20]
	0x03532BBC LDR W9, [X0 + 0x18]
	0x03532BC0 CMP W9, 0x2
	0x03532BC4 B.LT 0x3532BE4
	0x03532BC8 SUB W9, W9, 0x1
	0x03532BCC CMP W9, W10
	0x03532BD0 B.CS 0x3532BEC
	0x03532BD4 ADD X8, X8, W9, 0x2, UXTW
	0x03532BD8 LDR W8, [X8 + 0x20]
	0x03532BDC CBNZ W8, 0x3532BE4
	0x03532BE0 STR W9, [X0 + 0x18]
	0x03532BE4 LDR X30, [X31], #0x10
	0x03532BE8 RET
	0x03532BEC BL 0x1C16F28
	0x03532BF0 BL 0x1C16F20
	0x03532BF4 STP X30, X25, [X31 - 0x40]!
	0x03532BF8 STP X24, X23, [X31 + 0x10]
	0x03532BFC STP X22, X21, [X31 + 0x20]
	0x03532C00 STP X20, X19, [X31 + 0x30]
	0x03532C04 ADRP X23, 0xEAD000
	0x03532C08 LDRB W8, [X23 + 0xBB6]
	0x03532C0C MOV X19, X3
	0x03532C10 MOV X22, X2
	0x03532C14 MOV X20, X1
	0x03532C18 MOV X21, X0
	0x03532C1C TBNZ X8, 0x0, 0x3532C40
	0x03532C20 ADRP X0, 0xC02000
	0x03532C24 LDR X0, [X0 + 0xA50]
	0x03532C28 BL 0x1C16CF4
	0x03532C2C ADRP X0, 0xC02000
	0x03532C30 LDR X0, [X0 + 0x980]
	0x03532C34 BL 0x1C16CF4
	0x03532C38 MOVZ W8, 0x1
	0x03532C3C STRB W8, [X23 + 0xBB6]
	0x03532C40 CBZ X22, 0x3532E90
	0x03532C44 LDR W8, [X22 + 0x18]
	0x03532C48 ADRP X25, 0xC02000
	0x03532C4C LDR X25, [X25 + 0x980]
	0x03532C50 CMP W8, 0x1
	0x03532C54 B.NE 0x3532C70
	0x03532C58 LDR X8, [X22 + 0x10]
	0x03532C5C CBZ X8, 0x3532E90
	0x03532C60 LDR W9, [X8 + 0x18]
	0x03532C64 CBZ W9, 0x3532E8C
	0x03532C68 LDR W8, [X8 + 0x20]
	0x03532C6C CBZ W8, 0x3532D9C
	0x03532C70 LDR X0, [X25]
	0x03532C74 BL 0x1C16F10
	0x03532C78 MOV X23, X0
	0x03532C7C BL 0x352BB04
	0x03532C80 CBZ X19, 0x3532E90
	0x03532C84 CBZ X23, 0x3532E90
	0x03532C88 LDR X8, [X23 + 0x10]
	0x03532C8C CBZ X8, 0x3532E90
	0x03532C90 LDR W9, [X19 + 0x18]
	0x03532C94 LDR W10, [X8 + 0x18]
	0x03532C98 UBFM W9, W9, 0x1F, 0x1E
	0x03532C9C CMP W9, W10
	0x03532CA0 B.CS 0x3532E8C
	0x03532CA4 ADD X8, X8, W9, 0x2, SXTW
	0x03532CA8 MOVZ W10, 0x1
	0x03532CAC ORR W9, W9, 0x1
	0x03532CB0 STR W10, [X8 + 0x20]
	0x03532CB4 STR W9, [X23 + 0x18]
	0x03532CB8 LDR X0, [X25]
	0x03532CBC LDR W8, [X0 + 0xE0]
	0x03532CC0 CBNZ W8, 0x3532CC8
	0x03532CC4 BL 0x1C16DFC
	0x03532CC8 MOV X0, X23
	0x03532CCC MOV X1, X19
	0x03532CD0 BL 0x352E988
	0x03532CD4 LDR W8, [X22 + 0x18]
	0x03532CD8 MOV X23, X0
	0x03532CDC CMP W8, 0x1
	0x03532CE0 B.LT 0x3532D50
	0x03532CE4 LDR X9, [X22 + 0x10]
	0x03532CE8 CBZ X9, 0x3532E90
	0x03532CEC LDR W10, [X9 + 0x18]
	0x03532CF0 MOV W12, W31
	0x03532CF4 MOV W11, W31
	0x03532CF8 ADD X14, X9, W11, 0x2, SXTW
	0x03532CFC MOV W13, W31
	0x03532D00 ADD W24, W12, 0x20
	0x03532D04 ADD X14, X14, 0x20
	0x03532D08 MOVZ W15, 0x1
	0x03532D0C CMP W11, W10
	0x03532D10 B.CS 0x3532E8C
	0x03532D14 LDR W16, [X14]
	0x03532D18 ANDS W31, W16, W15, 0x0
	0x03532D1C B.NE 0x3532D34
	0x03532D20 ADD W13, W13, 0x1
	0x03532D24 CMP W13, 0x20
	0x03532D28 UBFM W15, W15, 0x1F, 0x1E
	0x03532D2C B.NE 0x3532D0C
	0x03532D30 B 0x3532D3C
	0x03532D34 ADD W24, W12, W13
	0x03532D38 MOV W11, W8
	0x03532D3C ADD W11, W11, 0x1
	0x03532D40 CMP W11, W8
	0x03532D44 MOV W12, W24
	0x03532D48 B.LT 0x3532CF8
	0x03532D4C B 0x3532D54
	0x03532D50 MOV W24, W31
	0x03532D54 LDR X0, [X25]
	0x03532D58 LDR W8, [X0 + 0xE0]
	0x03532D5C CBNZ W8, 0x3532D64
	0x03532D60 BL 0x1C16DFC
	0x03532D64 MOV X0, X22
	0x03532D68 MOV W1, W24
	0x03532D6C BL 0x352D904
	0x03532D70 MOV X2, X0
	0x03532D74 MOV X0, X21
	0x03532D78 MOV X1, X20
	0x03532D7C MOV X3, X19
	0x03532D80 MOV X4, X23
	0x03532D84 MOV W5, W24
	0x03532D88 LDP X20, X19, [X31 + 0x30]
	0x03532D8C LDP X22, X21, [X31 + 0x20]
	0x03532D90 LDP X24, X23, [X31 + 0x10]
	0x03532D94 LDP X30, X25, [X31], #0x40
	0x03532D98 B 0x35317C4
	0x03532D9C ADRP X8, 0xC02000
	0x03532DA0 LDR X8, [X8 + 0xA50]
	0x03532DA4 MOVZ W1, 0x3
	0x03532DA8 LDR X0, [X8]
	0x03532DAC BL 0x1C16D6C
	0x03532DB0 LDR X8, [X25]
	0x03532DB4 MOV X20, X0
	0x03532DB8 LDR W9, [X8 + 0xE0]
	0x03532DBC CBNZ W9, 0x3532DC8
	0x03532DC0 MOV X0, X8
	0x03532DC4 BL 0x1C16DFC
	0x03532DC8 MOV W0, W31
	0x03532DCC BL 0x352C1F8
	0x03532DD0 CBZ X20, 0x3532E90
	0x03532DD4 MOV X21, X0
	0x03532DD8 CBZ X0, 0x3532DF0

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], X29
	003 Move [X31+40], X30
	004 Move [X31+48], X28
	005 Move [X31+56], X27
	006 Move [X31+64], X26
	007 Move [X31+72], X25
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move [X31+16], X0
	015 Move [X31+24], X4
	016 Move X19, 0xEAE000
	017 Move X20, 0xC03000
	018 Move W8, [X19+2999]
	019 Move X20, [X20+2640]
	020 Move W24, W5
	021 Move X22, X3
	022 Move X21, X2
	023 Move X23, X1
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {36}
	028 Move X0, 0xC03000
	029 Move X0, [X0+2640]
	030 Call 0x1C17CF4
	031 Move X0, 0xC03000
	032 Move X0, [X0+2432]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X19+2999], W8
	036 Move X0, [X20]
	037 Move W1, 3
	038 Call 0x1C17D6C
	039 Move [X31], X0
	040 Compare X21, 0
	041 JumpIfEqual {421}
	042 Move X8, [X21+16]
	043 Compare X8, 0
	044 JumpIfEqual {421}
	045 Move W9, [X8+24]
	046 Compare W9, 0
	047 JumpIfEqual {422}
	048 Move W8, [X8+32]
	049 Move TEMP, X8
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {426}
	053 Move [X31+8], W24
	054 Move X19, 0xC03000
	055 Move X19, [X19+2432]
	056 Move X0, X21
	057 Call BigInteger.bitCount, X0
	058 Move X8, [X19]
	059 Move W26, W0
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {65}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move W0, 2
	066 Call BigInteger.op_Implicit, X0
	067 Move X1, X22
	068 Call BigInteger.op_Modulus, X0, X1
	069 Move X27, X0
	070 Move W0, 1
	071 Move W24, 1
	072 Call BigInteger.op_Implicit, X0
	073 Move X1, X22
	074 Call BigInteger.op_Modulus, X0, X1
	075 Move X28, X0
	076 Move X0, [X31+16]
	077 Move X1, X22
	078 Call BigInteger.op_Modulus, X0, X1
	079 Move W8, [X21+24]
	080 Move X29, X0
	081 Subtract W10, W8, 1
	082 Subtract W8, W26, 1
	083 Move W9, 1
	084 Move [X31+12], W10
	085 Move W20, W10
	086 NotImplemented "Instruction LSLV not yet implemented."
	087 Move W24, 1
	088 Move X26, X28
	089 Move W25, W24
	090 Compare X20, 0
	091 JumpIfNotEqual {93}
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move X8, [X21+16]
	094 Compare X8, 0
	095 JumpIfEqual {421}
	096 Move W9, [X8+24]
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move X9, 0xC03000
	099 Move X9, [X9+2432]
	100 Add X8, X8, X20
	101 Move W24, [X8+32]
	102 Move X0, [X9]
	103 Move W9, [X0+224]
	104 Compare W9, 0
	105 JumpIfNotEqual {107}
	106 Call 0x1C17DFC
	107 Move X0, X28
	108 And W8, W24, W19
	109 Compare W8, 0
	110 JumpIfEqual {177}
	111 Move X1, X29
	112 Call BigInteger.op_Multiply, X0, X1
	113 Move X1, X22
	114 Call BigInteger.op_Modulus, X0, X1
	115 Move X28, X0
	116 Move X0, X27
	117 Move X1, X29
	118 Call BigInteger.op_Multiply, X0, X1
	119 Move X27, X0
	120 Move X0, [X31+16]
	121 Move X1, X26
	122 Call BigInteger.op_Multiply, X0, X1
	123 Move X1, X0
	124 Move X0, X27
	125 Call BigInteger.op_Subtraction, X0, X1
	126 Move X1, X22
	127 Call BigInteger.op_Modulus, X0, X1
	128 Move X27, X0
	129 Move X0, X29
	130 Move X1, X29
	131 Call BigInteger.op_Multiply, X0, X1
	132 Move X24, 0xC03000
	133 Move X24, [X24+2432]
	134 Compare X22, 0
	135 JumpIfEqual {421}
	136 Move X3, [X31+24]
	137 Move X1, X0
	138 Move X2, X22
	139 Call BigInteger.BarrettReduction, X0, X1, X2, X3
	140 Move X29, X0
	141 Move X0, X26
	142 Move X1, X23
	143 Call BigInteger.op_Multiply, X0, X1
	144 Move W1, 1
	145 Call BigInteger.op_LeftShift, X0, X1
	146 Move X1, X0
	147 Move X0, X29
	148 Call BigInteger.op_Subtraction, X0, X1
	149 Move X1, X22
	150 Call BigInteger.op_Modulus, X0, X1
	151 Move X29, X0
	152 Move TEMP, X25
	153 And TEMP, TEMP, 1
	154 Compare TEMP, 1
	155 JumpIfEqual {169}
	156 Move X0, [X24]
	157 Move W8, [X0+224]
	158 Compare W8, 0
	159 JumpIfNotEqual {161}
	160 Call 0x1C17DFC
	161 Move X0, X26
	162 Move X1, X26
	163 Call BigInteger.op_Multiply, X0, X1
	164 Move X3, [X31+24]
	165 Move X1, X0
	166 Move X2, X22
	167 Call BigInteger.BarrettReduction, X0, X1, X2, X3
	168 Move X26, X0
	169 Move X0, [X24]
	170 Move W8, [X0+224]
	171 Compare W8, 0
	172 JumpIfNotEqual {174}
	173 Call 0x1C17DFC
	174 Move X0, X26
	175 Move X1, X23
	176 Call BigInteger.op_Multiply, X0, X1
	177 Move X1, X27
	178 Call BigInteger.op_Multiply, X0, X1
	179 Move X1, X26
	180 Call BigInteger.op_Subtraction, X0, X1
	181 Move X1, X22
	182 Call BigInteger.op_Modulus, X0, X1
	183 Move X28, X0
	184 Move X0, X27
	185 Move X1, X29
	186 Call BigInteger.op_Multiply, X0, X1
	187 Move X29, X0
	188 Move X0, [X31+16]
	189 Move X1, X26
	190 Call BigInteger.op_Multiply, X0, X1
	191 Move X1, X0
	192 Move X0, X29
	193 Call BigInteger.op_Subtraction, X0, X1
	194 Move X1, X22
	195 Call BigInteger.op_Modulus, X0, X1
	196 Move X29, X0
	197 Move X0, X27
	198 Move X1, X27
	199 Call BigInteger.op_Multiply, X0, X1
	200 Move X24, 0xC03000
	201 Move X24, [X24+2432]
	202 Compare X22, 0
	203 JumpIfEqual {421}
	204 Move X3, [X31+24]
	205 Move X1, X0
	206 Move X2, X22
	207 Call BigInteger.BarrettReduction, X0, X1, X2, X3
	208 Move X27, X0
	209 Move W1, 1
	210 Move X0, X26
	211 Call BigInteger.op_LeftShift, X0, X1
	212 Move X1, X0
	213 Move X0, X27
	214 Call BigInteger.op_Subtraction, X0, X1
	215 Move X1, X22
	216 Call BigInteger.op_Modulus, X0, X1
	217 Move X8, [X24]
	218 Move X27, X0
	219 Move W9, [X8+224]
	220 Compare W9, 0
	221 JumpIfEqual {237}
	222 Move TEMP, X25
	223 And TEMP, TEMP, 1
	224 Compare TEMP, 1
	225 JumpIfNotEqual {243}
	226 Move X0, X23
	227 Move X1, X22
	228 Call BigInteger.op_Modulus, X0, X1
	229 Move X26, X0
	230 Move W25, W31
	231 Move W19, W19
	232 ShiftRight W19, 1
	233 And W19, W19, 0x7FFFFFFF
	234 Move W24, W31
	235 Compare W19, 0
	236 JumpIfNotEqual {90}
	237 Move X0, X8
	238 Call 0x1C17DFC
	239 Move TEMP, X25
	240 And TEMP, TEMP, 1
	241 Compare TEMP, 1
	242 JumpIfEqual {226}
	243 Move X0, X26
	244 Move X1, X26
	245 Call BigInteger.op_Multiply, X0, X1
	246 Move X3, [X31+24]
	247 Move X1, X0
	248 Move X2, X22
	249 Call BigInteger.BarrettReduction, X0, X1, X2, X3
	250 Move W24, W25
	251 Move W8, [X31+12]
	252 Subtract X20, X20, 1
	253 Move W19, 0x80000000
	254 Subtract W8, W8, 1
	255 Move [X31+12], W8
	256 Move TEMP, X8
	257 And TEMP, TEMP, -2147483648
	258 Compare TEMP, -2147483648
	259 JumpIfNotEqual {89}
	260 Move X26, X28
	261 Move X8, 0xC03000
	262 Move X8, [X8+2432]
	263 Move X0, [X8]
	264 Move W8, [X0+224]
	265 Compare W8, 0
	266 JumpIfNotEqual {268}
	267 Call 0x1C17DFC
	268 Move X0, X28
	269 Move X1, X27
	270 Call BigInteger.op_Multiply, X0, X1
	271 Move X1, X26
	272 Call BigInteger.op_Subtraction, X0, X1
	273 Move X1, X22
	274 Call BigInteger.op_Modulus, X0, X1
	275 Move X25, X0
	276 Move X0, X27
	277 Move X1, X29
	278 Call BigInteger.op_Multiply, X0, X1
	279 Move X27, X0
	280 Move X0, [X31+16]
	281 Move X1, X26
	282 Call BigInteger.op_Multiply, X0, X1
	283 Move X1, X0
	284 Move X0, X27
	285 Call BigInteger.op_Subtraction, X0, X1
	286 Move X1, X22
	287 Call BigInteger.op_Modulus, X0, X1
	288 Move X19, X0
	289 Move TEMP, X24
	290 And TEMP, TEMP, 1
	291 Compare TEMP, 1
	292 JumpIfNotEqual {296}
	293 Move X24, 0xC03000
	294 Move W20, [X31+8]
	295 Move X24, [X24+2432]
	296 Move X24, 0xC03000
	297 Move X24, [X24+2432]
	298 Move W20, [X31+8]
	299 Move X0, [X24]
	300 Move W8, [X0+224]
	301 Compare W8, 0
	302 JumpIfNotEqual {304}
	303 Call 0x1C17DFC
	304 Move X0, X26
	305 Move X1, X26
	306 Call BigInteger.op_Multiply, X0, X1
	307 Compare X22, 0
	308 JumpIfEqual {421}
	309 Move X3, [X31+24]
	310 Move X1, X0
	311 Move X2, X22
	312 Call BigInteger.BarrettReduction, X0, X1, X2, X3
	313 Move X26, X0
	314 Move X0, [X24]
	315 Move W8, [X0+224]
	316 Compare W8, 0
	317 JumpIfNotEqual {319}
	318 Call 0x1C17DFC
	319 Move X0, X26
	320 Move X1, X23
	321 Call BigInteger.op_Multiply, X0, X1
	322 Move X1, X22
	323 Call BigInteger.op_Modulus, X0, X1
	324 NotImplemented "Instruction CMP not yet implemented."
	325 Move X23, X0
	326 Move X0, [X24]
	327 Move X26, X24
	328 Move W8, [X0+224]
	329 Compare W8, 0
	330 JumpIfNotEqual {332}
	331 Call 0x1C17DFC
	332 Move X0, X25
	333 Move X1, X19
	334 Call BigInteger.op_Multiply, X0, X1
	335 Move X1, X22
	336 Call BigInteger.op_Modulus, X0, X1
	337 Move X25, X0
	338 Move X0, X19
	339 Move X1, X19
	340 Call BigInteger.op_Multiply, X0, X1
	341 Move X24, X0
	342 Move W1, 1
	343 Move X0, X23
	344 Call BigInteger.op_LeftShift, X0, X1
	345 Move X1, X0
	346 Move X0, X24
	347 Call BigInteger.op_Subtraction, X0, X1
	348 Move X1, X22
	349 Call BigInteger.op_Modulus, X0, X1
	350 Move X8, [X26]
	351 Move X19, X0
	352 Move X24, X26
	353 Move W9, [X8+224]
	354 Compare W9, 0
	355 JumpIfNotEqual {358}
	356 Move X0, X8
	357 Call 0x1C17DFC
	358 Move X0, X23
	359 Move X1, X23
	360 Call BigInteger.op_Multiply, X0, X1
	361 Compare X22, 0
	362 JumpIfEqual {421}
	363 Move X3, [X31+24]
	364 Move X1, X0
	365 Move X2, X22
	366 Call BigInteger.BarrettReduction, X0, X1, X2, X3
	367 Subtract W20, W20, 1
	368 Move X23, X0
	369 Move X20, [X31]
	370 Compare X20, 0
	371 JumpIfEqual {421}
	372 Compare X25, 0
	373 JumpIfEqual {380}
	374 Move X8, [X20]
	375 Move X0, X25
	376 Move X1, [X8+64]
	377 Call 0x1C17E00
	378 Compare X0, 0
	379 JumpIfEqual {423}
	380 Move W8, [X20+24]
	381 Compare W8, 0
	382 JumpIfEqual {422}
	383 Move [X20+32], X25
	384 Compare X19, 0
	385 JumpIfEqual {393}
	386 Move X8, [X20]
	387 Move X0, X19
	388 Move X1, [X8+64]
	389 Call 0x1C17E00
	390 Compare X0, 0
	391 JumpIfEqual {423}
	392 Move W8, [X20+24]
	393 NotImplemented "Instruction CMP not yet implemented."
	394 Move [X20+40], X19
	395 Compare X23, 0
	396 JumpIfEqual {404}
	397 Move X8, [X20]
	398 Move X0, X23
	399 Move X1, [X8+64]
	400 Call 0x1C17E00
	401 Compare X0, 0
	402 JumpIfEqual {423}
	403 Move W8, [X20+24]
	404 NotImplemented "Instruction CMP not yet implemented."
	405 Move [X20+48], X23
	406 Move X0, X20
	407 Move X20, [X31+112]
	408 Move X19, [X31+120]
	409 Move X22, [X31+96]
	410 Move X21, [X31+104]
	411 Move X24, [X31+80]
	412 Move X23, [X31+88]
	413 Move X26, [X31+64]
	414 Move X25, [X31+72]
	415 Move X28, [X31+48]
	416 Move X27, [X31+56]
	417 Move X29, [X31+32]
	418 Move X30, [X31+40]
	419 Add X31, X31, 128
	420 Return X0
	421 Call 0x1C17F20
	422 Call 0x1C17F28
	423 Call 0x1C17F44
	424 Move X1, X31
	425 Call 0x1C17DEC
	426 Move X0, 0xBCA000
	427 Move X0, [X0+1400]
	428 Call 0x1C17D08
	429 Call 0x1C17F10
	430 Move X19, X0
	431 Move X0, 0xC03000
	432 Move X0, [X0+2648]
	433 Call 0x1C17D08
	434 Move X1, X0
	435 Move X0, X19
	436 Move X2, X31
	437 Call ArgumentException..ctor, X0, X1
	438 Move X0, 0xC03000
	439 Move X0, [X0+2656]
	440 Call 0x1C17D08
	441 Move X1, X0
	442 Move X0, X19
	443 Call 0x1C17DEC

Method: System.Void MulDivTest(System.Int32 rounds)

Disassembly:
	0x03533EA0 LDR X8, [X8]
	0x03533EA4 LDR W9, [X8 + 0xE0]
	0x03533EA8 CBNZ W9, 0x3533EB4
	0x03533EAC MOV X0, X8
	0x03533EB0 BL 0x1C16DFC
	0x03533EB4 CBZ X24, 0x3533FCC
	0x03533EB8 LDR X8, [X24]
	0x03533EBC MOV X0, X24
	0x03533EC0 MOV X1, X27
	0x03533EC4 LDP X9, X2, [X8 + 0x138]
	0x03533EC8 BLR X9
	0x03533ECC TBZ X0, 0x0, 0x3533F10
	0x03533ED0 LDR X0, [X22]
	0x03533ED4 LDR W8, [X0 + 0xE0]
	0x03533ED8 CBNZ W8, 0x3533EE0
	0x03533EDC BL 0x1C16DFC
	0x03533EE0 ADRP X8, 0xC01000
	0x03533EE4 LDR X8, [X8 + 0xAA8]
	0x03533EE8 MOV X1, X31
	0x03533EEC LDR X0, [X8]
	0x03533EF0 BL 0x33C33A0
	0x03533EF4 LDP W9, W8, [X31 + 0x18]
	0x03533EF8 LDR X27, [X31]
	0x03533EFC ADD W8, W8, 0x1
	0x03533F00 CMP W8, W9
	0x03533F04 STR W8, [X31 + 0x1C]
	0x03533F08 B.LT 0x3533BF4
	0x03533F0C B 0x3533FA4
	0x03533F10 ADD X0, X31, 0x1C
	0x03533F14 MOV X1, X31
	0x03533F18 BL 0x337B6E0
	0x03533F1C ADRP X8, 0xC01000
	0x03533F20 LDR X8, [X8 + 0xA98]
	0x03533F24 MOV X1, X0
	0x03533F28 MOV X2, X31
	0x03533F2C LDR X8, [X8]
	0x03533F30 MOV X0, X8
	0x03533F34 BL 0x321B938
	0x03533F38 LDR X8, [X22]
	0x03533F3C MOV X19, X0
	0x03533F40 LDR W9, [X8 + 0xE0]
	0x03533F44 CBNZ W9, 0x3533F50
	0x03533F48 MOV X0, X8
	0x03533F4C BL 0x1C16DFC
	0x03533F50 MOV X0, X19
	0x03533F54 MOV X1, X31
	0x03533F58 BL 0x33C33A0
	0x03533F5C LDR X8, [X27]
	0x03533F60 MOV X0, X27
	0x03533F64 LDP X9, X1, [X8 + 0x168]
	0x03533F68 BLR X9
	0x03533F6C ADRP X8, 0xBC1000
	0x03533F70 LDR X8, [X8 + 0xFE0]
	0x03533F74 MOV X2, X31
	0x03533F78 LDR X1, [X8]
	0x03533F7C BL 0x321B938
	0x03533F80 LDR X8, [X22]
	0x03533F84 MOV X19, X0
	0x03533F88 LDR W9, [X8 + 0xE0]
	0x03533F8C CBNZ W9, 0x3533F98
	0x03533F90 MOV X0, X8
	0x03533F94 BL 0x1C16DFC
	0x03533F98 MOV X0, X19
	0x03533F9C MOV X1, X31
	0x03533FA0 BL 0x33C33A0
	0x03533FA4 LDP X20, X19, [X31 + 0x70]
	0x03533FA8 LDP X22, X21, [X31 + 0x60]
	0x03533FAC LDP X24, X23, [X31 + 0x50]
	0x03533FB0 LDP X26, X25, [X31 + 0x40]
	0x03533FB4 LDP X28, X27, [X31 + 0x30]
	0x03533FB8 LDP X29, X30, [X31 + 0x20]
	0x03533FBC LDR V8, [X31 + 0x10]
	0x03533FC0 ADD X31, X31, 0x80
	0x03533FC4 RET
	0x03533FC8 BL 0x1C16F28
	0x03533FCC BL 0x1C16F20
	0x03533FD0 SUB X31, X31, 0x70
	0x03533FD4 STP X29, X30, [X31 + 0x10]
	0x03533FD8 STP X28, X27, [X31 + 0x20]
	0x03533FDC STP X26, X25, [X31 + 0x30]
	0x03533FE0 STP X24, X23, [X31 + 0x40]
	0x03533FE4 STP X22, X21, [X31 + 0x50]
	0x03533FE8 STP X20, X19, [X31 + 0x60]
	0x03533FEC ADRP X20, 0xEAC000
	0x03533FF0 ADRP X21, 0xBC7000
	0x03533FF4 LDRB W8, [X20 + 0xBBB]
	0x03533FF8 LDR X21, [X21 + 0x2E8]
	0x03533FFC MOV W19, W0
	0x03534000 TBNZ X8, 0x0, 0x3534060
	0x03534004 ADRP X0, 0xC00000
	0x03534008 LDR X0, [X0 + 0x980]
	0x0353400C BL 0x1C16CF4
	0x03534010 ADRP X0, 0xBC7000
	0x03534014 LDR X0, [X0 + 0x958]
	0x03534018 BL 0x1C16CF4
	0x0353401C ADRP X0, 0xBC6000
	0x03534020 LDR X0, [X0 + 0x2E8]
	0x03534024 BL 0x1C16CF4
	0x03534028 ADRP X0, 0xBC0000
	0x0353402C LDR X0, [X0 + 0xFE0]
	0x03534030 BL 0x1C16CF4
	0x03534034 ADRP X0, 0xC00000
	0x03534038 LDR X0, [X0 + 0xA90]
	0x0353403C BL 0x1C16CF4
	0x03534040 ADRP X0, 0xC00000
	0x03534044 LDR X0, [X0 + 0xA98]
	0x03534048 BL 0x1C16CF4
	0x0353404C ADRP X0, 0xC00000
	0x03534050 LDR X0, [X0 + 0xAA8]
	0x03534054 BL 0x1C16CF4
	0x03534058 MOVZ W8, 0x1
	0x0353405C STRB W8, [X20 + 0xBBB]
	0x03534060 LDR X0, [X21]
	0x03534064 BL 0x1C16F10
	0x03534068 MOV X1, X31
	0x0353406C MOV X20, X0
	0x03534070 BL 0x338E3CC
	0x03534074 CMP W19, 0x1
	0x03534078 STR W31, [X31 + 0xC]
	0x0353407C B.LT 0x3534270
	0x03534080 CBZ X20, 0x3534290
	0x03534084 ADRP X25, 0xC00000
	0x03534088 ADRP X24, 0xBC7000
	0x0353408C ADRP X26, 0xC00000
	0x03534090 LDR X25, [X25 + 0xA90]
	0x03534094 LDR X24, [X24 + 0x958]
	0x03534098 LDR X26, [X26 + 0x980]
	0x0353409C MOVZ X28, 0x40900000
	0x035340A0 MOVZ X29, 0x7FF00000
	0x035340A4 MOVZ W27, 0x80000000
	0x035340A8 LDR X8, [X20]
	0x035340AC MOV X0, X20
	0x035340B0 LDP X9, X1, [X8 + 0x1B8]
	0x035340B4 BLR X9
	0x035340B8 FMOV D1, X28
	0x035340BC FMUL D1, D0, D1
	0x035340C0 FCVTZS W8, D0, 0xA
	0x035340C4 FMOV D0, X29
	0x035340C8 FCMP D1, D0
	0x035340CC CSEL W22, W27, W8, EQ
	0x035340D0 CBZ W22, 0x35340A8
	0x035340D4 ADD X0, X31, 0xC
	0x035340D8 MOV X1, X31
	0x035340DC BL 0x337B6E0
	0x035340E0 LDR X8, [X25]
	0x035340E4 MOV X1, X0
	0x035340E8 MOV X2, X31
	0x035340EC MOV X0, X8
	0x035340F0 BL 0x321B938
	0x035340F4 LDR X8, [X24]
	0x035340F8 MOV X21, X0
	0x035340FC LDR W9, [X8 + 0xE0]
	0x03534100 CBNZ W9, 0x353410C
	0x03534104 MOV X0, X8
	0x03534108 BL 0x1C16DFC
	0x0353410C MOV X0, X21
	0x03534110 MOV X1, X31
	0x03534114 BL 0x33C324C
	0x03534118 LDR X0, [X26]
	0x0353411C BL 0x1C16F10
	0x03534120 MOV X21, X0
	0x03534124 BL 0x352BB04
	0x03534128 CBZ X21, 0x3534290
	0x0353412C MOV X0, X21
	0x03534130 MOV W1, W22
	0x03534134 MOV X2, X20
	0x03534138 BL 0x35300F8
	0x0353413C MOV X0, X21
	0x03534140 BL 0x3531688
	0x03534144 LDR X8, [X26]
	0x03534148 MOV X22, X0
	0x0353414C LDR W9, [X8 + 0xE0]
	0x03534150 CBNZ W9, 0x353415C
	0x03534154 MOV X0, X8
	0x03534158 BL 0x1C16DFC
	0x0353415C MOVZ W0, 0x1
	0x03534160 BL 0x352C1F8
	0x03534164 MOV X1, X0
	0x03534168 MOV X0, X22
	0x0353416C BL 0x352C728
	0x03534170 MOV X23, X0
	0x03534174 MOVZ W0, 0x1
	0x03534178 BL 0x352C1F8
	0x0353417C MOV X1, X0
	0x03534180 MOV X0, X22
	0x03534184 BL 0x352C728
	0x03534188 MOV X1, X0
	0x0353418C MOV X0, X23
	0x03534190 BL 0x352C250
	0x03534194 MOV X1, X21
	0x03534198 BL 0x352E004
	0x0353419C TBNZ X0, 0x0, 0x35341DC
	0x035341A0 LDR X0, [X24]
	0x035341A4 LDR W8, [X0 + 0xE0]
	0x035341A8 CBNZ W8, 0x35341B0
	0x035341AC BL 0x1C16DFC
	0x035341B0 ADRP X8, 0xC00000
	0x035341B4 LDR X8, [X8 + 0xAA8]
	0x035341B8 MOV X1, X31
	0x035341BC LDR X0, [X8]
	0x035341C0 BL 0x33C33A0
	0x035341C4 LDR W8, [X31 + 0xC]
	0x035341C8 ADD W8, W8, 0x1
	0x035341CC CMP W8, W19
	0x035341D0 STR W8, [X31 + 0xC]
	0x035341D4 B.LT 0x35340A8
	0x035341D8 B 0x3534270
	0x035341DC ADD X0, X31, 0xC
	0x035341E0 MOV X1, X31
	0x035341E4 BL 0x337B6E0
	0x035341E8 ADRP X8, 0xC00000
	0x035341EC LDR X8, [X8 + 0xA98]
	0x035341F0 MOV X1, X0
	0x035341F4 MOV X2, X31
	0x035341F8 LDR X8, [X8]
	0x035341FC MOV X0, X8
	0x03534200 BL 0x321B938
	0x03534204 LDR X8, [X24]
	0x03534208 MOV X19, X0
	0x0353420C LDR W9, [X8 + 0xE0]
	0x03534210 CBNZ W9, 0x353421C
	0x03534214 MOV X0, X8
	0x03534218 BL 0x1C16DFC
	0x0353421C MOV X0, X19
	0x03534220 MOV X1, X31
	0x03534224 BL 0x33C33A0
	0x03534228 LDR X8, [X21]
	0x0353422C MOV X0, X21
	0x03534230 LDP X9, X1, [X8 + 0x168]
	0x03534234 BLR X9
	0x03534238 ADRP X8, 0xBC0000
	0x0353423C LDR X8, [X8 + 0xFE0]
	0x03534240 MOV X2, X31
	0x03534244 LDR X1, [X8]
	0x03534248 BL 0x321B938
	0x0353424C LDR X8, [X24]
	0x03534250 MOV X19, X0
	0x03534254 LDR W9, [X8 + 0xE0]
	0x03534258 CBNZ W9, 0x3534264
	0x0353425C MOV X0, X8
	0x03534260 BL 0x1C16DFC
	0x03534264 MOV X0, X19
	0x03534268 MOV X1, X31
	0x0353426C BL 0x33C33A0
	0x03534270 LDP X20, X19, [X31 + 0x60]
	0x03534274 LDP X22, X21, [X31 + 0x50]
	0x03534278 LDP X24, X23, [X31 + 0x40]
	0x0353427C LDP X26, X25, [X31 + 0x30]
	0x03534280 LDP X28, X27, [X31 + 0x20]
	0x03534284 LDP X29, X30, [X31 + 0x10]
	0x03534288 ADD X31, X31, 0x70
	0x0353428C RET
	0x03534290 BL 0x1C16F20
	0x03534294 SUB X31, X31, 0x70
	0x03534298 STP X29, X30, [X31 + 0x10]
	0x0353429C STP X28, X27, [X31 + 0x20]
	0x035342A0 STP X26, X25, [X31 + 0x30]
	0x035342A4 STP X24, X23, [X31 + 0x40]
	0x035342A8 STP X22, X21, [X31 + 0x50]
	0x035342AC STP X20, X19, [X31 + 0x60]
	0x035342B0 ADRP X23, 0xEAB000
	0x035342B4 ADRP X22, 0xBBF000
	0x035342B8 ADRP X19, 0xC00000
	0x035342BC ADRP X20, 0xC00000
	0x035342C0 ADRP X21, 0xBC7000
	0x035342C4 LDRB W8, [X23 + 0xBBC]
	0x035342C8 LDR X22, [X22 + 0x618]
	0x035342CC LDR X19, [X19 + 0xAD8]
	0x035342D0 LDR X20, [X20 + 0xAE0]
	0x035342D4 LDR X21, [X21 + 0x958]
	0x035342D8 TBNZ X8, 0x0, 0x35343B0
	0x035342DC ADRP X0, 0xC00000
	0x035342E0 LDR X0, [X0 + 0x980]
	0x035342E4 BL 0x1C16CF4
	0x035342E8 ADRP X0, 0xBBF000
	0x035342EC LDR X0, [X0 + 0xB58]
	0x035342F0 BL 0x1C16CF4
	0x035342F4 ADRP X0, 0xBBF000
	0x035342F8 LDR X0, [X0 + 0x618]
	0x035342FC BL 0x1C16CF4
	0x03534300 ADRP X0, 0xBC7000
	0x03534304 LDR X0, [X0 + 0x958]
	0x03534308 BL 0x1C16CF4
	0x0353430C ADRP X0, 0xBC6000
	0x03534310 LDR X0, [X0 + 0x2E8]
	0x03534314 BL 0x1C16CF4
	0x03534318 ADRP X0, 0xC00000
	0x0353431C LDR X0, [X0 + 0xAE0]
	0x03534320 BL 0x1C16CF4
	0x03534324 ADRP X0, 0xC00000
	0x03534328 LDR X0, [X0 + 0xAD8]
	0x0353432C BL 0x1C16CF4
	0x03534330 ADRP X0, 0xBC0000
	0x03534334 LDR X0, [X0 + 0xFE0]
	0x03534338 BL 0x1C16CF4
	0x0353433C ADRP X0, 0xC00000
	0x03534340 LDR X0, [X0 + 0xAE8]
	0x03534344 BL 0x1C16CF4
	0x03534348 ADRP X0, 0xC00000
	0x0353434C LDR X0, [X0 + 0xAF0]
	0x03534350 BL 0x1C16CF4
	0x03534354 ADRP X0, 0xC00000
	0x03534358 LDR X0, [X0 + 0xAF8]
	0x0353435C BL 0x1C16CF4
	0x03534360 ADRP X0, 0xC00000
	0x03534364 LDR X0, [X0 + 0xB00]
	0x03534368 BL 0x1C16CF4
	0x0353436C ADRP X0, 0xBBF000
	0x03534370 LDR X0, [X0 + 0x838]
	0x03534374 BL 0x1C16CF4
	0x03534378 ADRP X0, 0xC00000
	0x0353437C LDR X0, [X0 + 0xB08]
	0x03534380 BL 0x1C16CF4
	0x03534384 ADRP X0, 0xC00000
	0x03534388 LDR X0, [X0 + 0xB10]
	0x0353438C BL 0x1C16CF4
	0x03534390 ADRP X0, 0xC00000
	0x03534394 LDR X0, [X0 + 0xB18]
	0x03534398 BL 0x1C16CF4
	0x0353439C ADRP X0, 0xC00000
	0x035343A0 LDR X0, [X0 + 0xB20]
	0x035343A4 BL 0x1C16CF4
	0x035343A8 MOVZ W8, 0x1
	0x035343AC STRB W8, [X23 + 0xBBC]
	0x035343B0 LDR X0, [X22]
	0x035343B4 ADRP X28, 0xC00000
	0x035343B8 LDR X28, [X28 + 0xB10]
	0x035343BC MOVZ W1, 0x41
	0x035343C0 STRB W31, [X31 + 0x4]
	0x035343C4 BL 0x1C16D6C
	0x035343C8 LDR X1, [X19]
	0x035343CC MOV X2, X31
	0x035343D0 MOV X19, X0
	0x035343D4 BL 0x32C5BD8
	0x035343D8 LDR X0, [X22]
	0x035343DC MOVZ W1, 0x41
	0x035343E0 BL 0x1C16D6C
	0x035343E4 LDR X1, [X20]
	0x035343E8 MOV X2, X31
	0x035343EC BL 0x32C5BD8
	0x035343F0 LDR X0, [X21]
	0x035343F4 LDR W8, [X0 + 0xE0]
	0x035343F8 CBNZ W8, 0x3534400
	0x035343FC BL 0x1C16DFC
	0x03534400 ADRP X23, 0xC00000
	0x03534404 ADRP X27, 0xBBF000
	0x03534408 ADRP X26, 0xC00000
	0x0353440C ADRP X25, 0xC00000
	0x03534410 ADRP X29, 0xBC0000
	0x03534414 ADRP X24, 0xBBF000
	0x03534418 LDR X23, [X23 + 0x980]
	0x0353441C LDR X27, [X27 + 0x838]
	0x03534420 LDR X26, [X26 + 0xB00]
	0x03534424 LDR X25, [X25 + 0xAF8]
	0x03534428 LDR X29, [X29 + 0xFE0]
	0x0353442C LDR X24, [X24 + 0xB58]
	0x03534430 LDR X0, [X28]
	0x03534434 MOV X1, X31
	0x03534438 BL 0x33C33A0
	0x0353443C MOV W22, W31
	0x03534440 MOVZ W28, 0x64
	0x03534444 STR X31, [X31 + 0x8]
	0x03534448 CMP W22, W28
	0x0353444C B.LT 0x3534470
	0x03534450 LDR X0, [X21]
	0x03534454 LDR W8, [X0 + 0xE0]
	0x03534458 CBNZ W8, 0x3534460
	0x0353445C BL 0x1C16DFC
	0x03534460 MOV X0, X31
	0x03534464 BL 0x33C32C0
	0x03534468 LDR W22, [X31 + 0x8]
	0x0353446C ADD W28, W28, 0x64
	0x03534470 LDR X0, [X23]
	0x03534474 BL 0x1C16F10
	0x03534478 SUB W8, W31, W22
	0x0353447C SXTW X1, W8
	0x03534480 MOV X20, X0
	0x03534484 BL 0x352BB6C
	0x03534488 CBZ X20, 0x3534760
	0x0353448C MOV X0, X20

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+16], D8
	003 Move [X31+32], X29
	004 Move [X31+40], X30
	005 Move [X31+48], X28
	006 Move [X31+56], X27
	007 Move [X31+64], X26
	008 Move [X31+72], X25
	009 Move [X31+80], X24
	010 Move [X31+88], X23
	011 Move [X31+96], X22
	012 Move [X31+104], X21
	013 Move [X31+112], X20
	014 Move [X31+120], X19
	015 Move [X31+12], W0
	016 Move X20, 0xEAD000
	017 Move X21, 0xBC8000
	018 Move X19, 0xBC1000
	019 Move W8, [X20+3000]
	020 Move X21, [X21+744]
	021 Move X19, [X19+1560]
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {46}
	026 Move X0, 0xC02000
	027 Move X0, [X0+2432]
	028 Call 0x1C17CF4
	029 Move X0, 0xBC1000
	030 Move X0, [X0+1560]
	031 Call 0x1C17CF4
	032 Move X0, 0xBC9000
	033 Move X0, [X0+2392]
	034 Call 0x1C17CF4
	035 Move X0, 0xBC8000
	036 Move X0, [X0+744]
	037 Call 0x1C17CF4
	038 Move X0, 0xBC2000
	039 Move X0, [X0+4064]
	040 Call 0x1C17CF4
	041 Move X0, 0xC02000
	042 Move X0, [X0+2672]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X20+3000], W8
	046 Move X0, [X21]
	047 Call 0x1C17F10
	048 Move X1, X31
	049 Move X20, X0
	050 Call Random..ctor, X0
	051 Move X0, [X19]
	052 Move W1, 64
	053 Call 0x1C17D6C
	054 Move X8, [X19]
	055 Move X21, X0
	056 Move W1, 64
	057 Move X0, X8
	058 Call 0x1C17D6C
	059 Move W8, [X31+12]
	060 Move [X31+28], W31
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Compare X20, 0
	063 JumpIfEqual {423}
	064 Move X28, 0xBC9000
	065 Move X8, -44318720
	066 Move X28, [X28+2392]
	067 Move V8, [X8+744]
	068 Move X22, X0
	069 Move X19, 0x7FF00000
	070 Move W29, 0x80000000
	071 Move X25, 0x40700000
	072 Move X8, [X20]
	073 Move X0, X20
	074 Move X9, [X8+440]
	075 Move X1, [X8+448]
	076 NotImplemented "Instruction BLR not yet implemented."
	077 Multiply D0, D0, D8
	078 Move D1, X19
	079 NotImplemented "Instruction FCVTZS not yet implemented."
	080 NotImplemented "Instruction FCMP not yet implemented."
	081 NotImplemented "Instruction CSEL not yet implemented."
	082 Compare W23, 0
	083 JumpIfEqual {72}
	084 Move X8, [X20]
	085 Move X0, X20
	086 Move X9, [X8+440]
	087 Move X1, [X8+448]
	088 NotImplemented "Instruction BLR not yet implemented."
	089 Multiply D0, D0, D8
	090 Move D1, X19
	091 NotImplemented "Instruction FCVTZS not yet implemented."
	092 NotImplemented "Instruction FCMP not yet implemented."
	093 NotImplemented "Instruction CSEL not yet implemented."
	094 Compare W24, 0
	095 JumpIfEqual {84}
	096 Move W26, W31
	097 Move W8, W31
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move W27, W8
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X8, [X20]
	102 Move X0, X20
	103 Move X9, [X8+440]
	104 Move X1, [X8+448]
	105 NotImplemented "Instruction BLR not yet implemented."
	106 Compare X21, 0
	107 JumpIfEqual {423}
	108 Move W8, [X21+24]
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Move D1, X25
	111 Multiply D0, D0, D1
	112 NotImplemented "Instruction FCVTZS not yet implemented."
	113 NotImplemented "Instruction FCMP not yet implemented."
	114 NotImplemented "Instruction CSEL not yet implemented."
	115 Compare X21, 0
	116 JumpIfEqual {423}
	117 Move W8, [X21+24]
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Move W8, W31
	120 Add X9, X21, W26
	121 Move [X9+32], W8
	122 Move W9, [X21+24]
	123 NotImplemented "Instruction CMP not yet implemented."
	124 And W31, W8, 255
	125 NotImplemented "Instruction CSET not yet implemented."
	126 Or W8, W27, W8
	127 Add W26, W26, 1
	128 Move W26, W31
	129 Move W8, W31
	130 Move TEMP, X27
	131 And TEMP, TEMP, 1
	132 Compare TEMP, 1
	133 JumpIfNotEqual {98}
	134 Move W26, W31
	135 Move W8, W31
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Move W27, W8
	138 NotImplemented "Instruction CMP not yet implemented."
	139 Move X8, [X20]
	140 Move X0, X20
	141 Move X9, [X8+440]
	142 Move X1, [X8+448]
	143 NotImplemented "Instruction BLR not yet implemented."
	144 Compare X22, 0
	145 JumpIfEqual {423}
	146 Move W8, [X22+24]
	147 NotImplemented "Instruction CMP not yet implemented."
	148 Move D1, X25
	149 Multiply D0, D0, D1
	150 NotImplemented "Instruction FCVTZS not yet implemented."
	151 NotImplemented "Instruction FCMP not yet implemented."
	152 NotImplemented "Instruction CSEL not yet implemented."
	153 Compare X22, 0
	154 JumpIfEqual {423}
	155 Move W8, [X22+24]
	156 NotImplemented "Instruction CMP not yet implemented."
	157 Move W8, W31
	158 Add X9, X22, W26
	159 Move [X9+32], W8
	160 Move W9, [X22+24]
	161 NotImplemented "Instruction CMP not yet implemented."
	162 And W31, W8, 255
	163 NotImplemented "Instruction CSET not yet implemented."
	164 Or W8, W27, W8
	165 Add W26, W26, 1
	166 Move W26, W31
	167 Move W8, W31
	168 Move TEMP, X27
	169 And TEMP, TEMP, 1
	170 Compare TEMP, 1
	171 JumpIfNotEqual {136}
	172 Compare X21, 0
	173 JumpIfEqual {423}
	174 Move W8, [X21+24]
	175 Compare W8, 0
	176 JumpIfEqual {422}
	177 Move W8, [X21+32]
	178 Compare W8, 0
	179 JumpIfNotEqual {196}
	180 Move X8, [X20]
	181 Move X0, X20
	182 Move X9, [X8+440]
	183 Move X1, [X8+448]
	184 NotImplemented "Instruction BLR not yet implemented."
	185 Move X8, [X21+24]
	186 Compare W8, 0
	187 JumpIfEqual {422}
	188 Move D1, X25
	189 Multiply D0, D0, D1
	190 NotImplemented "Instruction FCVTZS not yet implemented."
	191 NotImplemented "Instruction FCMP not yet implemented."
	192 NotImplemented "Instruction CSEL not yet implemented."
	193 Move [X21+32], W9
	194 Compare W8, 0
	195 JumpIfNotEqual {177}
	196 Compare X22, 0
	197 JumpIfEqual {423}
	198 Move W8, [X22+24]
	199 Compare W8, 0
	200 JumpIfEqual {422}
	201 Move W8, [X22+32]
	202 Compare W8, 0
	203 JumpIfNotEqual {220}
	204 Move X8, [X20]
	205 Move X0, X20
	206 Move X9, [X8+440]
	207 Move X1, [X8+448]
	208 NotImplemented "Instruction BLR not yet implemented."
	209 Move X8, [X22+24]
	210 Compare W8, 0
	211 JumpIfEqual {422}
	212 Move D1, X25
	213 Multiply D0, D0, D1
	214 NotImplemented "Instruction FCVTZS not yet implemented."
	215 NotImplemented "Instruction FCMP not yet implemented."
	216 NotImplemented "Instruction CSEL not yet implemented."
	217 Move [X22+32], W9
	218 Compare W8, 0
	219 JumpIfNotEqual {201}
	220 Move X0, [X28]
	221 Move W26, [X31+28]
	222 Move W8, [X0+224]
	223 Compare W8, 0
	224 JumpIfNotEqual {226}
	225 Call 0x1C17DFC
	226 Move W0, W26
	227 Move X1, X31
	228 Move [X31+24], W26
	229 Call Console.WriteLine, X0
	230 Move X28, 0xC01000
	231 Move X28, [X28+2432]
	232 Move X0, [X28]
	233 Call 0x1C17F10
	234 Move X1, X21
	235 Move W2, W23
	236 Move X27, X0
	237 Call BigInteger..ctor, X0, X1, X2
	238 Move X0, [X28]
	239 Call 0x1C17F10
	240 Move X1, X22
	241 Move W2, W24
	242 Move X26, X0
	243 Call BigInteger..ctor, X0, X1, X2
	244 Move X0, [X28]
	245 Move W8, [X0+224]
	246 Compare W8, 0
	247 JumpIfNotEqual {249}
	248 Call 0x1C17DFC
	249 Move X0, X27
	250 Move X1, X26
	251 Call BigInteger.op_Division, X0, X1
	252 Move X24, X0
	253 Move X0, X27
	254 Move X1, X26
	255 Call BigInteger.op_Modulus, X0, X1
	256 Move X28, X0
	257 Move X0, X24
	258 Move X1, X26
	259 Call BigInteger.op_Multiply, X0, X1
	260 Move X1, X28
	261 Call BigInteger.op_Addition, X0, X1
	262 Compare X0, 0
	263 JumpIfEqual {423}
	264 Move X8, [X0]
	265 Move X1, X27
	266 Move X23, X0
	267 Move X9, [X8+312]
	268 Move X2, [X8+320]
	269 NotImplemented "Instruction BLR not yet implemented."
	270 Move TEMP, X0
	271 And TEMP, TEMP, 1
	272 Compare TEMP, 1
	273 JumpIfNotEqual {281}
	274 Move W8, [X31+24]
	275 Move W9, [X31+12]
	276 Move X28, 0xBC8000
	277 Add W8, W8, 1
	278 Move [X31+28], W8
	279 Move X28, [X28+2392]
	280 NotImplemented "Instruction CMP not yet implemented."
	281 Add X0, X31, 28
	282 Move X1, X31
	283 Call Int32.ToString, X0
	284 Move X8, 0xC01000
	285 Move X8, [X8+2672]
	286 Move X1, X0
	287 Move X2, X31
	288 Move X8, [X8]
	289 Move X0, X8
	290 Call String.Concat, X0, X1
	291 Move X21, 0xBC8000
	292 Move X21, [X21+2392]
	293 Move X19, X0
	294 Move X8, [X21]
	295 Move W9, [X8+224]
	296 Compare W9, 0
	297 JumpIfNotEqual {300}
	298 Move X0, X8
	299 Call 0x1C17DFC
	300 Move X0, X19
	301 Move X1, X31
	302 Call Console.WriteLine, X0
	303 Compare X27, 0
	304 JumpIfEqual {310}
	305 Move X8, [X27]
	306 Move X0, X27
	307 Move X9, [X8+360]
	308 Move X1, [X8+368]
	309 NotImplemented "Instruction BLR not yet implemented."
	310 Move X0, X31
	311 Move X20, 0xBC1000
	312 Move X20, [X20+4064]
	313 Move X2, X31
	314 Move X1, [X20]
	315 Call String.Concat, X0, X1
	316 Move X8, [X21]
	317 Move X19, X0
	318 Move W9, [X8+224]
	319 Compare W9, 0
	320 JumpIfNotEqual {323}
	321 Move X0, X8
	322 Call 0x1C17DFC
	323 Move X0, X19
	324 Move X1, X31
	325 Call Console.WriteLine, X0
	326 Compare X26, 0
	327 JumpIfEqual {333}
	328 Move X8, [X26]
	329 Move X0, X26
	330 Move X9, [X8+360]
	331 Move X1, [X8+368]
	332 NotImplemented "Instruction BLR not yet implemented."
	333 Move X0, X31
	334 Move X1, [X20]
	335 Move X2, X31
	336 Call String.Concat, X0, X1
	337 Move X8, [X21]
	338 Move X19, X0
	339 Move W9, [X8+224]
	340 Compare W9, 0
	341 JumpIfNotEqual {344}
	342 Move X0, X8
	343 Call 0x1C17DFC
	344 Move X0, X19
	345 Move X1, X31
	346 Call Console.WriteLine, X0
	347 Compare X24, 0
	348 JumpIfEqual {354}
	349 Move X8, [X24]
	350 Move X0, X24
	351 Move X9, [X8+360]
	352 Move X1, [X8+368]
	353 NotImplemented "Instruction BLR not yet implemented."
	354 Move X0, X31
	355 Move X1, [X20]
	356 Move X2, X31
	357 Call String.Concat, X0, X1
	358 Move X8, [X21]
	359 Move X19, X0
	360 Move W9, [X8+224]
	361 Compare W9, 0
	362 JumpIfNotEqual {365}
	363 Move X0, X8
	364 Call 0x1C17DFC
	365 Move X0, X19
	366 Move X1, X31
	367 Call Console.WriteLine, X0
	368 Compare X28, 0
	369 JumpIfEqual {375}
	370 Move X8, [X28]
	371 Move X0, X28
	372 Move X9, [X8+360]
	373 Move X1, [X8+368]
	374 NotImplemented "Instruction BLR not yet implemented."
	375 Move X0, X31
	376 Move X1, [X20]
	377 Move X2, X31
	378 Call String.Concat, X0, X1
	379 Move X8, [X21]
	380 Move X19, X0
	381 Move W9, [X8+224]
	382 Compare W9, 0
	383 JumpIfNotEqual {386}
	384 Move X0, X8
	385 Call 0x1C17DFC
	386 Move X0, X19
	387 Move X1, X31
	388 Call Console.WriteLine, X0
	389 Move X8, [X23]
	390 Move X0, X23
	391 Move X9, [X8+360]
	392 Move X1, [X8+368]
	393 NotImplemented "Instruction BLR not yet implemented."
	394 Move X1, [X20]
	395 Move X2, X31
	396 Call String.Concat, X0, X1
	397 Move X8, [X21]
	398 Move X19, X0
	399 Move W9, [X8+224]
	400 Compare W9, 0
	401 JumpIfNotEqual {404}
	402 Move X0, X8
	403 Call 0x1C17DFC
	404 Move X0, X19
	405 Move X1, X31
	406 Call Console.WriteLine, X0
	407 Move X20, [X31+112]
	408 Move X19, [X31+120]
	409 Move X22, [X31+96]
	410 Move X21, [X31+104]
	411 Move X24, [X31+80]
	412 Move X23, [X31+88]
	413 Move X26, [X31+64]
	414 Move X25, [X31+72]
	415 Move X28, [X31+48]
	416 Move X27, [X31+56]
	417 Move X29, [X31+32]
	418 Move X30, [X31+40]
	419 Move V8, [X31+16]
	420 Add X31, X31, 128
	421 Return 
	422 Call 0x1C17F28
	423 Call 0x1C17F20

Method: System.Void RSATest(System.Int32 rounds)

Disassembly:
	0x03534490 BL 0x3531F4C
	0x03534494 TBZ X0, 0x0, 0x35344E0
	0x03534498 ADD X0, X31, 0x8
	0x0353449C MOV X1, X31
	0x035344A0 BL 0x337B6E0
	0x035344A4 LDR X1, [X27]
	0x035344A8 MOV X2, X31
	0x035344AC BL 0x321B938
	0x035344B0 LDR X8, [X21]
	0x035344B4 MOV X20, X0
	0x035344B8 LDR W9, [X8 + 0xE0]
	0x035344BC CBNZ W9, 0x35344C8
	0x035344C0 MOV X0, X8
	0x035344C4 BL 0x1C16DFC
	0x035344C8 MOV X0, X20
	0x035344CC MOV X1, X31
	0x035344D0 BL 0x33C324C
	0x035344D4 LDR W8, [X31 + 0xC]
	0x035344D8 ADD W8, W8, 0x1
	0x035344DC STR W8, [X31 + 0xC]
	0x035344E0 LDR W8, [X31 + 0x8]
	0x035344E4 ADD W22, W8, 0x1
	0x035344E8 CMP W22, 0x7D0
	0x035344EC STR W22, [X31 + 0x8]
	0x035344F0 B.LT 0x3534448
	0x035344F4 ADD X0, X31, 0xC
	0x035344F8 MOV X1, X31
	0x035344FC BL 0x337B6E0
	0x03534500 LDR X8, [X26]
	0x03534504 MOV X1, X0
	0x03534508 MOV X2, X31
	0x0353450C MOV X0, X8
	0x03534510 BL 0x321B938
	0x03534514 LDR X8, [X21]
	0x03534518 MOV X20, X0
	0x0353451C LDR W9, [X8 + 0xE0]
	0x03534520 CBNZ W9, 0x353452C
	0x03534524 MOV X0, X8
	0x03534528 BL 0x1C16DFC
	0x0353452C MOV X0, X20
	0x03534530 MOV X1, X31
	0x03534534 BL 0x33C33A0
	0x03534538 LDR X0, [X23]
	0x0353453C BL 0x1C16F10
	0x03534540 MOV X1, X19
	0x03534544 MOV X20, X0
	0x03534548 BL 0x352C93C
	0x0353454C CBZ X20, 0x3534760
	0x03534550 LDR X8, [X20]
	0x03534554 MOV X0, X20
	0x03534558 LDP X9, X1, [X8 + 0x168]
	0x0353455C BLR X9
	0x03534560 LDR X8, [X25]
	0x03534564 LDR X2, [X29]
	0x03534568 MOV X1, X0
	0x0353456C MOV X3, X31
	0x03534570 MOV X0, X8
	0x03534574 BL 0x32274B8
	0x03534578 MOV X1, X31
	0x0353457C BL 0x33C33A0
	0x03534580 MOVZ W1, 0x5
	0x03534584 MOV X0, X20
	0x03534588 BL 0x3530904
	0x0353458C LDR X8, [X24]
	0x03534590 AND W9, W0, 0x1
	0x03534594 STRB W9, [X31 + 0x4]
	0x03534598 LDR W9, [X8 + 0xE0]
	0x0353459C CBNZ W9, 0x35345A8
	0x035345A0 MOV X0, X8
	0x035345A4 BL 0x1C16DFC
	0x035345A8 ADD X0, X31, 0x4
	0x035345AC MOV X1, X31
	0x035345B0 BL 0x33176C4
	0x035345B4 ADRP X8, 0xC00000
	0x035345B8 LDR X8, [X8 + 0xAE8]
	0x035345BC MOV X1, X0
	0x035345C0 MOV X2, X31
	0x035345C4 LDR X8, [X8]
	0x035345C8 MOV X0, X8
	0x035345CC BL 0x321B938
	0x035345D0 MOV X1, X31
	0x035345D4 BL 0x33C33A0
	0x035345D8 MOVZ W1, 0x5
	0x035345DC MOV X0, X20
	0x035345E0 BL 0x3530548
	0x035345E4 AND W8, W0, 0x1
	0x035345E8 ADD X0, X31, 0x4
	0x035345EC MOV X1, X31
	0x035345F0 STRB W8, [X31 + 0x4]
	0x035345F4 BL 0x33176C4
	0x035345F8 ADRP X8, 0xC00000
	0x035345FC LDR X8, [X8 + 0xB08]
	0x03534600 MOV X1, X0
	0x03534604 MOV X2, X31
	0x03534608 LDR X8, [X8]
	0x0353460C MOV X0, X8
	0x03534610 BL 0x321B938
	0x03534614 MOV X1, X31
	0x03534618 BL 0x33C33A0
	0x0353461C MOVZ W1, 0x5
	0x03534620 MOV X0, X20
	0x03534624 BL 0x35302B4
	0x03534628 AND W8, W0, 0x1
	0x0353462C ADD X0, X31, 0x4
	0x03534630 MOV X1, X31
	0x03534634 STRB W8, [X31 + 0x4]
	0x03534638 BL 0x33176C4
	0x0353463C ADRP X8, 0xC00000
	0x03534640 LDR X8, [X8 + 0xB18]
	0x03534644 MOV X1, X0
	0x03534648 MOV X2, X31
	0x0353464C LDR X8, [X8]
	0x03534650 MOV X0, X8
	0x03534654 BL 0x321B938
	0x03534658 MOV X1, X31
	0x0353465C BL 0x33C33A0
	0x03534660 MOV X0, X20
	0x03534664 BL 0x3531F4C
	0x03534668 AND W8, W0, 0x1
	0x0353466C ADD X0, X31, 0x4
	0x03534670 MOV X1, X31
	0x03534674 STRB W8, [X31 + 0x4]
	0x03534678 BL 0x33176C4
	0x0353467C ADRP X8, 0xC00000
	0x03534680 LDR X8, [X8 + 0xAF0]
	0x03534684 MOV X1, X0
	0x03534688 MOV X2, X31
	0x0353468C LDR X8, [X8]
	0x03534690 MOV X0, X8
	0x03534694 BL 0x321B938
	0x03534698 MOV X1, X31
	0x0353469C BL 0x33C33A0
	0x035346A0 ADRP X8, 0xC00000
	0x035346A4 LDR X8, [X8 + 0xB20]
	0x035346A8 MOV X1, X31
	0x035346AC LDR X0, [X8]
	0x035346B0 BL 0x33C324C
	0x035346B4 ADRP X8, 0xBC6000
	0x035346B8 LDR X8, [X8 + 0x2E8]
	0x035346BC LDR X0, [X8]
	0x035346C0 BL 0x1C16F10
	0x035346C4 MOV X1, X31
	0x035346C8 MOV X19, X0
	0x035346CC BL 0x338E3CC
	0x035346D0 LDR X0, [X23]
	0x035346D4 LDR W8, [X0 + 0xE0]
	0x035346D8 CBNZ W8, 0x35346E0
	0x035346DC BL 0x1C16DFC
	0x035346E0 MOVZ W0, 0x200
	0x035346E4 MOVZ W1, 0x5
	0x035346E8 MOV X2, X19
	0x035346EC BL 0x353236C
	0x035346F0 LDR X19, [X29]
	0x035346F4 CBZ X0, 0x353470C
	0x035346F8 LDR X8, [X0]
	0x035346FC LDP X9, X1, [X8 + 0x168]
	0x03534700 BLR X9
	0x03534704 MOV X1, X0
	0x03534708 B 0x3534710
	0x0353470C MOV X1, X31
	0x03534710 MOV X0, X19
	0x03534714 MOV X2, X31
	0x03534718 BL 0x321B938
	0x0353471C LDR X8, [X21]
	0x03534720 MOV X19, X0
	0x03534724 LDR W9, [X8 + 0xE0]
	0x03534728 CBNZ W9, 0x3534734
	0x0353472C MOV X0, X8
	0x03534730 BL 0x1C16DFC
	0x03534734 MOV X0, X19
	0x03534738 MOV X1, X31
	0x0353473C BL 0x33C33A0
	0x03534740 LDP X20, X19, [X31 + 0x60]
	0x03534744 LDP X22, X21, [X31 + 0x50]
	0x03534748 LDP X24, X23, [X31 + 0x40]
	0x0353474C LDP X26, X25, [X31 + 0x30]
	0x03534750 LDP X28, X27, [X31 + 0x20]
	0x03534754 LDP X29, X30, [X31 + 0x10]
	0x03534758 ADD X31, X31, 0x70
	0x0353475C RET
	0x03534760 BL 0x1C16F20
	0x03534764 STR X30, [X31 - 0x30]!
	0x03534768 STP X22, X21, [X31 + 0x10]
	0x0353476C STP X20, X19, [X31 + 0x20]
	0x03534770 ADRP X21, 0xEAB000
	0x03534774 ADRP X22, 0xBC0000
	0x03534778 ADRP X19, 0xC00000
	0x0353477C ADRP X20, 0xC00000
	0x03534780 LDRB W8, [X21 + 0xBBD]
	0x03534784 LDR X22, [X22 + 0xE58]
	0x03534788 LDR X19, [X19 + 0xB28]
	0x0353478C LDR X20, [X20 + 0x980]
	0x03534790 TBNZ X8, 0x0, 0x35347C0
	0x03534794 ADRP X0, 0xC00000
	0x03534798 LDR X0, [X0 + 0x980]
	0x0353479C BL 0x1C16CF4
	0x035347A0 ADRP X0, 0xBC0000
	0x035347A4 LDR X0, [X0 + 0xE58]
	0x035347A8 BL 0x1C16CF4
	0x035347AC ADRP X0, 0xC00000
	0x035347B0 LDR X0, [X0 + 0xB28]
	0x035347B4 BL 0x1C16CF4
	0x035347B8 MOVZ W8, 0x1
	0x035347BC STRB W8, [X21 + 0xBBD]
	0x035347C0 LDR X0, [X22]
	0x035347C4 MOVZ W1, 0x12F
	0x035347C8 BL 0x1C16D6C
	0x035347CC LDR X1, [X19]
	0x035347D0 MOV X2, X31
	0x035347D4 MOV X19, X0
	0x035347D8 BL 0x32C5BD8
	0x035347DC LDR X8, [X20]
	0x035347E0 LDP X22, X21, [X31 + 0x10]
	0x035347E4 LDR X8, [X8 + 0xB8]
	0x035347E8 STR X19, [X8]
	0x035347EC LDP X20, X19, [X31 + 0x20]
	0x035347F0 LDR X30, [X31], #0x30
	0x035347F4 RET
	0x035347F8 STP X30, X23, [X31 - 0x30]!
	0x035347FC STP X22, X21, [X31 + 0x10]
	0x03534800 STP X20, X19, [X31 + 0x20]
	0x03534804 ADRP X23, 0xEAB000
	0x03534808 ADRP X22, 0xBBF000
	0x0353480C ADRP X20, 0xC00000
	0x03534810 ADRP X21, 0xC00000
	0x03534814 MOV X19, X8
	0x03534818 LDRB W8, [X23 + 0xBBE]
	0x0353481C LDR X22, [X22 + 0x618]
	0x03534820 LDR X20, [X20 + 0xB30]
	0x03534824 LDR X21, [X21 + 0xB38]
	0x03534828 TBNZ X8, 0x0, 0x3534858
	0x0353482C ADRP X0, 0xBBF000
	0x03534830 LDR X0, [X0 + 0x618]
	0x03534834 BL 0x1C16CF4
	0x03534838 ADRP X0, 0xC00000
	0x0353483C LDR X0, [X0 + 0xB30]
	0x03534840 BL 0x1C16CF4
	0x03534844 ADRP X0, 0xC00000
	0x03534848 LDR X0, [X0 + 0xB38]
	0x0353484C BL 0x1C16CF4
	0x03534850 MOVZ W8, 0x1
	0x03534854 STRB W8, [X23 + 0xBBE]
	0x03534858 LDR X0, [X22]
	0x0353485C MOVZ W1, 0x3E2
	0x03534860 BL 0x1C16D6C
	0x03534864 LDR X1, [X20]
	0x03534868 MOV X2, X31
	0x0353486C MOV X20, X0
	0x03534870 BL 0x32C5BD8
	0x03534874 LDR X0, [X22]
	0x03534878 MOVZ W1, 0x7CC
	0x0353487C BL 0x1C16D6C
	0x03534880 LDR X1, [X21]
	0x03534884 MOV X2, X31
	0x03534888 MOV X21, X0
	0x0353488C BL 0x32C5BD8
	0x03534890 ADRP X8, 0xFFFFFFFFFD5B9000
	0x03534894 LDR V0, [X8 + 0x920]
	0x03534898 STP X20, X21, [X19]
	0x0353489C STRB W31, [X19 + 0x18]
	0x035348A0 STUR W31, [X19 + 0x19]
	0x035348A4 STR D0, [X19 + 0x10]
	0x035348A8 STR W31, [X19 + 0x1C]
	0x035348AC LDP X20, X19, [X31 + 0x20]
	0x035348B0 LDP X22, X21, [X31 + 0x10]
	0x035348B4 LDP X30, X23, [X31], #0x30
	0x035348B8 RET
	0x035348BC MOV X1, X31
	0x035348C0 B 0x33BDD8C
	0x035348C4 LDRB W8, [X0 + 0x38]
	0x035348C8 CMP W8, 0x0
	0x035348CC CSET W0, EQ
	0x035348D0 RET
	0x035348D4 LDRB W8, [X0 + 0x38]
	0x035348D8 CBZ W8, 0x35348E8
	0x035348DC LDR X0, [X0 + 0x40]
	0x035348E0 MOV X1, X31
	0x035348E4 B 0x32277A8
	0x035348E8 MOV W0, W31
	0x035348EC RET
	0x035348F0 LDRB W8, [X0 + 0x38]
	0x035348F4 CBZ W8, 0x3534904
	0x035348F8 LDR X0, [X0 + 0x50]
	0x035348FC MOV X1, X31
	0x03534900 B 0x32277A8
	0x03534904 MOV W0, W31
	0x03534908 RET
	0x0353490C LDR W8, [X0 + 0x58]
	0x03534910 CMP W8, 0x1
	0x03534914 CSET W0, LT
	0x03534918 RET
	0x0353491C SUB X31, X31, 0x50
	0x03534920 STP X30, X25, [X31 + 0x10]
	0x03534924 STP X24, X23, [X31 + 0x20]
	0x03534928 STP X22, X21, [X31 + 0x30]
	0x0353492C STP X20, X19, [X31 + 0x40]
	0x03534930 ADRP X22, 0xEAB000
	0x03534934 ADRP X20, 0xBBF000
	0x03534938 ADRP X21, 0xBC7000
	0x0353493C LDRB W8, [X22 + 0xBC0]
	0x03534940 LDR X20, [X20 + 0x9D0]
	0x03534944 LDR X21, [X21 + 0xDE8]
	0x03534948 MOV X19, X0
	0x0353494C TBNZ X8, 0x0, 0x3534A24
	0x03534950 ADRP X0, 0xC00000
	0x03534954 LDR X0, [X0 + 0xB40]
	0x03534958 BL 0x1C16CF4
	0x0353495C ADRP X0, 0xBBF000
	0x03534960 LDR X0, [X0 + 0xB58]
	0x03534964 BL 0x1C16CF4
	0x03534968 ADRP X0, 0xBC7000
	0x0353496C LDR X0, [X0 + 0xDF8]
	0x03534970 BL 0x1C16CF4
	0x03534974 ADRP X0, 0xBBF000
	0x03534978 LDR X0, [X0 + 0x9D0]
	0x0353497C BL 0x1C16CF4
	0x03534980 ADRP X0, 0xBC1000
	0x03534984 LDR X0, [X0 + 0x278]
	0x03534988 BL 0x1C16CF4
	0x0353498C ADRP X0, 0xBC7000
	0x03534990 LDR X0, [X0 + 0xE00]
	0x03534994 BL 0x1C16CF4
	0x03534998 ADRP X0, 0xBC7000
	0x0353499C LDR X0, [X0 + 0xE08]
	0x035349A0 BL 0x1C16CF4
	0x035349A4 ADRP X0, 0xBC7000
	0x035349A8 LDR X0, [X0 + 0xE10]
	0x035349AC BL 0x1C16CF4
	0x035349B0 ADRP X0, 0xBC7000
	0x035349B4 LDR X0, [X0 + 0xE18]
	0x035349B8 BL 0x1C16CF4
	0x035349BC ADRP X0, 0xBC7000
	0x035349C0 LDR X0, [X0 + 0xE20]
	0x035349C4 BL 0x1C16CF4
	0x035349C8 ADRP X0, 0xBC7000
	0x035349CC LDR X0, [X0 + 0xE28]
	0x035349D0 BL 0x1C16CF4
	0x035349D4 ADRP X0, 0xBC7000
	0x035349D8 LDR X0, [X0 + 0xE30]
	0x035349DC BL 0x1C16CF4

ISIL:
	001 Move [X31-112], D8
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move [X31+8], W0
	015 Move X20, 0xEAC000
	016 Move X24, 0xBC7000
	017 Move X21, 0xBC0000
	018 Move X28, 0xC01000
	019 Move X22, 0xC01000
	020 Move X23, 0xC01000
	021 Move X19, 0xC01000
	022 Move X24, [X24+744]
	023 Move W8, [X20+3001]
	024 Move X21, [X21+1560]
	025 Move X28, [X28+2432]
	026 Move X22, [X22+2680]
	027 Move X23, [X23+2688]
	028 Move X19, [X19+2696]
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {77}
	033 Move X0, 0xC01000
	034 Move X0, [X0+2432]
	035 Call 0x1C17CF4
	036 Move X0, 0xBC0000
	037 Move X0, [X0+1560]
	038 Call 0x1C17CF4
	039 Move X0, 0xBC8000
	040 Move X0, [X0+2392]
	041 Call 0x1C17CF4
	042 Move X0, 0xBC7000
	043 Move X0, [X0+744]
	044 Call 0x1C17CF4
	045 Move X0, 0xBC1000
	046 Move X0, [X0+4064]
	047 Call 0x1C17CF4
	048 Move X0, 0xC01000
	049 Move X0, [X0+2704]
	050 Call 0x1C17CF4
	051 Move X0, 0xC01000
	052 Move X0, [X0+2680]
	053 Call 0x1C17CF4
	054 Move X0, 0xC01000
	055 Move X0, [X0+2712]
	056 Call 0x1C17CF4
	057 Move X0, 0xC01000
	058 Move X0, [X0+2720]
	059 Call 0x1C17CF4
	060 Move X0, 0xC01000
	061 Move X0, [X0+2696]
	062 Call 0x1C17CF4
	063 Move X0, 0xC01000
	064 Move X0, [X0+2688]
	065 Call 0x1C17CF4
	066 Move X0, 0xC01000
	067 Move X0, [X0+2728]
	068 Call 0x1C17CF4
	069 Move X0, 0xC01000
	070 Move X0, [X0+2736]
	071 Call 0x1C17CF4
	072 Move X0, 0xC01000
	073 Move X0, [X0+2744]
	074 Call 0x1C17CF4
	075 Move W8, 1
	076 Move [X20+3001], W8
	077 Move X0, [X24]
	078 Call 0x1C17F10
	079 Move W1, 1
	080 Move X2, X31
	081 Move X20, X0
	082 Call Random..ctor, X0, X1
	083 Move X0, [X21]
	084 Move W1, 64
	085 Call 0x1C17D6C
	086 Move X8, [X28]
	087 Move X21, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, [X22]
	091 Move W2, 16
	092 Move X22, X0
	093 Call BigInteger..ctor, X0, X1, X2
	094 Move X0, [X28]
	095 Call 0x1C17F10
	096 Move X1, [X23]
	097 Move W2, 16
	098 Move X23, X0
	099 Call BigInteger..ctor, X0, X1, X2
	100 Move X0, [X28]
	101 Call 0x1C17F10
	102 Move X1, [X19]
	103 Move W2, 16
	104 Move X24, X0
	105 Call BigInteger..ctor, X0, X1, X2
	106 Compare X22, 0
	107 JumpIfEqual {377}
	108 Move X19, 0xC01000
	109 Move X25, 0xBC8000
	110 Move X19, [X19+2736]
	111 Move X25, [X25+2392]
	112 Move W1, 10
	113 Move X0, X22
	114 Call BigInteger.ToString, X0, X1
	115 Move X8, [X19]
	116 Move X1, X0
	117 Move X2, X31
	118 Move X19, X25
	119 Move X0, X8
	120 Call String.Concat, X0, X1
	121 Move X8, [X25]
	122 Move X25, X0
	123 Move W9, [X8+224]
	124 Compare W9, 0
	125 JumpIfNotEqual {128}
	126 Move X0, X8
	127 Call 0x1C17DFC
	128 Move X0, X25
	129 Move X1, X31
	130 Call Console.WriteLine, X0
	131 Compare X23, 0
	132 JumpIfEqual {377}
	133 Move X19, 0xC01000
	134 Move X19, [X19+2744]
	135 Move W1, 10
	136 Move X0, X23
	137 Call BigInteger.ToString, X0, X1
	138 Move X8, [X19]
	139 Move X1, X0
	140 Move X2, X31
	141 Move X0, X8
	142 Call String.Concat, X0, X1
	143 Move X1, X31
	144 Call Console.WriteLine, X0
	145 Compare X24, 0
	146 JumpIfEqual {377}
	147 Move X19, 0xC01000
	148 Move X25, 0xBC1000
	149 Move X19, [X19+2720]
	150 Move X25, [X25+4064]
	151 Move W1, 10
	152 Move X0, X24
	153 Call BigInteger.ToString, X0, X1
	154 Move X8, [X19]
	155 Move X2, [X25]
	156 Move X1, X0
	157 Move X3, X31
	158 Move X0, X8
	159 Call String.Concat, X0, X1, X2
	160 Move X1, X31
	161 Call Console.WriteLine, X0
	162 Move W8, [X31+8]
	163 Move [X31+12], W31
	164 NotImplemented "Instruction CMP not yet implemented."
	165 Compare X20, 0
	166 JumpIfEqual {377}
	167 Move X8, -44322816
	168 Move V8, [X8+744]
	169 Move X29, 0x7FF00000
	170 Move X27, 0x40700000
	171 Move X8, [X20]
	172 Move X0, X20
	173 Move X9, [X8+440]
	174 Move X1, [X8+448]
	175 NotImplemented "Instruction BLR not yet implemented."
	176 Multiply D0, D0, D8
	177 Move D1, X29
	178 NotImplemented "Instruction FCVTZS not yet implemented."
	179 NotImplemented "Instruction FCMP not yet implemented."
	180 Move W9, 0x80000000
	181 NotImplemented "Instruction CSEL not yet implemented."
	182 Compare W25, 0
	183 JumpIfEqual {171}
	184 Move X19, X28
	185 Move W26, W31
	186 Move W8, W31
	187 NotImplemented "Instruction CMP not yet implemented."
	188 Move W28, W8
	189 NotImplemented "Instruction CMP not yet implemented."
	190 Move X8, [X20]
	191 Move X0, X20
	192 Move X9, [X8+440]
	193 Move X1, [X8+448]
	194 NotImplemented "Instruction BLR not yet implemented."
	195 Compare X21, 0
	196 JumpIfEqual {377}
	197 Move W8, [X21+24]
	198 NotImplemented "Instruction CMP not yet implemented."
	199 Move D1, X27
	200 Multiply D0, D0, D1
	201 NotImplemented "Instruction FCVTZS not yet implemented."
	202 NotImplemented "Instruction FCMP not yet implemented."
	203 NotImplemented "Instruction CSEL not yet implemented."
	204 Compare X21, 0
	205 JumpIfEqual {377}
	206 Move W8, [X21+24]
	207 NotImplemented "Instruction CMP not yet implemented."
	208 Move W8, W31
	209 Add X9, X21, W26
	210 Move [X9+32], W8
	211 Move W9, [X21+24]
	212 NotImplemented "Instruction CMP not yet implemented."
	213 And W31, W8, 255
	214 NotImplemented "Instruction CSET not yet implemented."
	215 Or W8, W28, W8
	216 Add W26, W26, 1
	217 Move W26, W31
	218 Move W8, W31
	219 Move TEMP, X28
	220 And TEMP, TEMP, 1
	221 Compare TEMP, 1
	222 JumpIfNotEqual {187}
	223 Compare X21, 0
	224 JumpIfEqual {377}
	225 Move X28, X19
	226 Move X19, 0xBC8000
	227 Move W8, [X21+24]
	228 Move X19, [X19+2392]
	229 Compare W8, 0
	230 JumpIfEqual {376}
	231 Move W8, [X21+32]
	232 Compare W8, 0
	233 JumpIfNotEqual {250}
	234 Move X8, [X20]
	235 Move X0, X20
	236 Move X9, [X8+440]
	237 Move X1, [X8+448]
	238 NotImplemented "Instruction BLR not yet implemented."
	239 Move X8, [X21+24]
	240 Compare W8, 0
	241 JumpIfEqual {376}
	242 Move D1, X27
	243 Multiply D0, D0, D1
	244 NotImplemented "Instruction FCVTZS not yet implemented."
	245 NotImplemented "Instruction FCMP not yet implemented."
	246 NotImplemented "Instruction CSEL not yet implemented."
	247 Move [X21+32], W9
	248 Compare W8, 0
	249 JumpIfNotEqual {231}
	250 Add X0, X31, 12
	251 Move X1, X31
	252 Call Int32.ToString, X0
	253 Move X8, 0xC01000
	254 Move X8, [X8+2704]
	255 Move X1, X0
	256 Move X2, X31
	257 Move X8, [X8]
	258 Move X0, X8
	259 Call String.Concat, X0, X1
	260 Move X8, [X19]
	261 Move X26, X0
	262 Move W9, [X8+224]
	263 Compare W9, 0
	264 JumpIfNotEqual {267}
	265 Move X0, X8
	266 Call 0x1C17DFC
	267 Move X0, X26
	268 Move X1, X31
	269 Call Console.Write, X0
	270 Move X0, [X28]
	271 Call 0x1C17F10
	272 Move X1, X21
	273 Move W2, W25
	274 Move X26, X0
	275 Call BigInteger..ctor, X0, X1, X2
	276 Compare X26, 0
	277 JumpIfEqual {377}
	278 Move X0, X26
	279 Move X1, X22
	280 Move X2, X24
	281 Call BigInteger.ModPow, X0, X1, X2
	282 Compare X0, 0
	283 JumpIfEqual {377}
	284 Move X1, X23
	285 Move X2, X24
	286 Call BigInteger.ModPow, X0, X1, X2
	287 Move X8, [X28]
	288 Move X25, X0
	289 Move W9, [X8+224]
	290 Compare W9, 0
	291 JumpIfNotEqual {294}
	292 Move X0, X8
	293 Call 0x1C17DFC
	294 Compare X25, 0
	295 JumpIfEqual {377}
	296 Move X8, [X25]
	297 Move X0, X25
	298 Move X1, X26
	299 Move X9, [X8+312]
	300 Move X2, [X8+320]
	301 NotImplemented "Instruction BLR not yet implemented."
	302 Move TEMP, X0
	303 And TEMP, TEMP, 1
	304 Compare TEMP, 1
	305 JumpIfNotEqual {321}
	306 Move X0, [X19]
	307 Move W8, [X0+224]
	308 Compare W8, 0
	309 JumpIfNotEqual {311}
	310 Call 0x1C17DFC
	311 Move X8, 0xC01000
	312 Move X8, [X8+2728]
	313 Move X1, X31
	314 Move X0, [X8]
	315 Call Console.WriteLine, X0
	316 Move W9, [X31+8]
	317 Move W8, [X31+12]
	318 Add W8, W8, 1
	319 NotImplemented "Instruction CMP not yet implemented."
	320 Move [X31+12], W8
	321 Add X0, X31, 12
	322 Move X1, X31
	323 Call Int32.ToString, X0
	324 Move X8, 0xC01000
	325 Move X8, [X8+2712]
	326 Move X1, X0
	327 Move X2, X31
	328 Move X8, [X8]
	329 Move X0, X8
	330 Call String.Concat, X0, X1
	331 Move X8, [X19]
	332 Move X20, X19
	333 Move X19, X0
	334 Move W9, [X8+224]
	335 Compare W9, 0
	336 JumpIfNotEqual {339}
	337 Move X0, X8
	338 Call 0x1C17DFC
	339 Move X0, X19
	340 Move X1, X31
	341 Call Console.WriteLine, X0
	342 Move X8, [X26]
	343 Move X0, X26
	344 Move X9, [X8+360]
	345 Move X1, [X8+368]
	346 NotImplemented "Instruction BLR not yet implemented."
	347 Move X8, 0xBC1000
	348 Move X8, [X8+4064]
	349 Move X2, X31
	350 Move X1, [X8]
	351 Call String.Concat, X0, X1
	352 Move X8, [X20]
	353 Move X19, X0
	354 Move W9, [X8+224]
	355 Compare W9, 0
	356 JumpIfNotEqual {359}
	357 Move X0, X8
	358 Call 0x1C17DFC
	359 Move X0, X19
	360 Move X1, X31
	361 Call Console.WriteLine, X0
	362 Move X20, [X31+96]
	363 Move X19, [X31+104]
	364 Move X22, [X31+80]
	365 Move X21, [X31+88]
	366 Move X24, [X31+64]
	367 Move X23, [X31+72]
	368 Move X26, [X31+48]
	369 Move X25, [X31+56]
	370 Move X28, [X31+32]
	371 Move X27, [X31+40]
	372 Move X29, [X31+16]
	373 Move X30, [X31+24]
	374 Move V8, [X31+112]
	375 Return 
	376 Call 0x1C17F28
	377 Call 0x1C17F20

Method: System.Void RSATest2(System.Int32 rounds)

Disassembly:
	0x035349E0 ADRP X0, 0xBBF000
	0x035349E4 LDR X0, [X0 + 0x838]
	0x035349E8 BL 0x1C16CF4
	0x035349EC ADRP X0, 0xBC7000
	0x035349F0 LDR X0, [X0 + 0xE38]
	0x035349F4 BL 0x1C16CF4
	0x035349F8 ADRP X0, 0xBC7000
	0x035349FC LDR X0, [X0 + 0xE40]
	0x03534A00 BL 0x1C16CF4
	0x03534A04 ADRP X0, 0xBC7000
	0x03534A08 LDR X0, [X0 + 0xDE8]
	0x03534A0C BL 0x1C16CF4
	0x03534A10 ADRP X0, 0xBC7000
	0x03534A14 LDR X0, [X0 + 0xE48]
	0x03534A18 BL 0x1C16CF4
	0x03534A1C MOVZ W8, 0x1
	0x03534A20 STRB W8, [X22 + 0xBC0]
	0x03534A24 LDR X0, [X20]
	0x03534A28 ADRP X23, 0xBBF000
	0x03534A2C ADRP X24, 0xBC1000
	0x03534A30 LDR X23, [X23 + 0x838]
	0x03534A34 LDR X24, [X24 + 0x278]
	0x03534A38 MOVZ W1, 0xC
	0x03534A3C BL 0x1C16D6C
	0x03534A40 LDR X8, [X19 + 0x10]
	0x03534A44 MOV X20, X0
	0x03534A48 MOV X1, X31
	0x03534A4C MOV X0, X8
	0x03534A50 BL 0x32277A8
	0x03534A54 LDR X21, [X21]
	0x03534A58 TBZ X0, 0x0, 0x3534A6C
	0x03534A5C LDR X8, [X24]
	0x03534A60 LDR X8, [X8 + 0xB8]
	0x03534A64 LDR X22, [X8]
	0x03534A68 B 0x3534A98
	0x03534A6C LDR X1, [X19 + 0x10]
	0x03534A70 ADRP X22, 0xBC7000
	0x03534A74 LDR X22, [X22 + 0xE10]
	0x03534A78 BL 0x3534F6C
	0x03534A7C LDR X8, [X22]
	0x03534A80 LDR X2, [X23]
	0x03534A84 MOV X1, X0
	0x03534A88 MOV X3, X31
	0x03534A8C MOV X0, X8
	0x03534A90 BL 0x32274B8
	0x03534A94 MOV X22, X0
	0x03534A98 CBZ X20, 0x3534F68
	0x03534A9C CBZ X22, 0x3534AB4
	0x03534AA0 LDR X8, [X20]
	0x03534AA4 MOV X0, X22
	0x03534AA8 LDR X1, [X8 + 0x40]
	0x03534AAC BL 0x1C16E00
	0x03534AB0 CBZ X0, 0x3534F5C
	0x03534AB4 LDR W8, [X20 + 0x18]
	0x03534AB8 CBZ W8, 0x3534F58
	0x03534ABC STR X22, [X20 + 0x20]
	0x03534AC0 LDR X0, [X19 + 0x18]
	0x03534AC4 MOV X1, X31
	0x03534AC8 BL 0x32277A8
	0x03534ACC TBZ X0, 0x0, 0x3534AE4
	0x03534AD0 LDR X8, [X24]
	0x03534AD4 LDR X8, [X8 + 0xB8]
	0x03534AD8 LDR X22, [X8]
	0x03534ADC CBNZ X22, 0x3534B14
	0x03534AE0 B 0x3534B28
	0x03534AE4 LDR X1, [X19 + 0x18]
	0x03534AE8 BL 0x3534F6C
	0x03534AEC ADRP X8, 0xBC7000
	0x03534AF0 LDR X8, [X8 + 0xE18]
	0x03534AF4 LDR X2, [X23]
	0x03534AF8 MOV X1, X0
	0x03534AFC MOV X3, X31
	0x03534B00 LDR X8, [X8]
	0x03534B04 MOV X0, X8
	0x03534B08 BL 0x32274B8
	0x03534B0C MOV X22, X0
	0x03534B10 CBZ X22, 0x3534B28
	0x03534B14 LDR X8, [X20]
	0x03534B18 MOV X0, X22
	0x03534B1C LDR X1, [X8 + 0x40]
	0x03534B20 BL 0x1C16E00
	0x03534B24 CBZ X0, 0x3534F5C
	0x03534B28 LDR W8, [X20 + 0x18]
	0x03534B2C CMP W8, 0x1
	0x03534B30 B.LS 0x3534F58
	0x03534B34 STR X22, [X20 + 0x28]
	0x03534B38 LDR X0, [X19 + 0x20]
	0x03534B3C MOV X1, X31
	0x03534B40 BL 0x32277A8
	0x03534B44 TBZ X0, 0x0, 0x3534B5C
	0x03534B48 LDR X8, [X24]
	0x03534B4C LDR X8, [X8 + 0xB8]
	0x03534B50 LDR X22, [X8]
	0x03534B54 CBNZ X22, 0x3534B8C
	0x03534B58 B 0x3534BA0
	0x03534B5C LDR X1, [X19 + 0x20]
	0x03534B60 BL 0x3534F6C
	0x03534B64 ADRP X8, 0xBC7000
	0x03534B68 LDR X8, [X8 + 0xE00]
	0x03534B6C LDR X2, [X23]
	0x03534B70 MOV X1, X0
	0x03534B74 MOV X3, X31
	0x03534B78 LDR X8, [X8]
	0x03534B7C MOV X0, X8
	0x03534B80 BL 0x32274B8
	0x03534B84 MOV X22, X0
	0x03534B88 CBZ X22, 0x3534BA0
	0x03534B8C LDR X8, [X20]
	0x03534B90 MOV X0, X22
	0x03534B94 LDR X1, [X8 + 0x40]
	0x03534B98 BL 0x1C16E00
	0x03534B9C CBZ X0, 0x3534F5C
	0x03534BA0 LDR W8, [X20 + 0x18]
	0x03534BA4 CMP W8, 0x2
	0x03534BA8 B.LS 0x3534F58
	0x03534BAC STR X22, [X20 + 0x30]
	0x03534BB0 LDR X0, [X19 + 0x28]
	0x03534BB4 MOV X1, X31
	0x03534BB8 BL 0x32277A8
	0x03534BBC TBZ X0, 0x0, 0x3534BD4
	0x03534BC0 LDR X8, [X24]
	0x03534BC4 LDR X8, [X8 + 0xB8]
	0x03534BC8 LDR X22, [X8]
	0x03534BCC CBNZ X22, 0x3534C04
	0x03534BD0 B 0x3534C18
	0x03534BD4 LDR X1, [X19 + 0x28]
	0x03534BD8 BL 0x3534F6C
	0x03534BDC ADRP X8, 0xBC7000
	0x03534BE0 LDR X8, [X8 + 0xE30]
	0x03534BE4 LDR X2, [X23]
	0x03534BE8 MOV X1, X0
	0x03534BEC MOV X3, X31
	0x03534BF0 LDR X8, [X8]
	0x03534BF4 MOV X0, X8
	0x03534BF8 BL 0x32274B8
	0x03534BFC MOV X22, X0
	0x03534C00 CBZ X22, 0x3534C18
	0x03534C04 LDR X8, [X20]
	0x03534C08 MOV X0, X22
	0x03534C0C LDR X1, [X8 + 0x40]
	0x03534C10 BL 0x1C16E00
	0x03534C14 CBZ X0, 0x3534F5C
	0x03534C18 LDR W8, [X20 + 0x18]
	0x03534C1C CMP W8, 0x3
	0x03534C20 B.LS 0x3534F58
	0x03534C24 STR X22, [X20 + 0x38]
	0x03534C28 LDR X0, [X19 + 0x30]
	0x03534C2C MOV X1, X31
	0x03534C30 BL 0x32277A8
	0x03534C34 TBZ X0, 0x0, 0x3534C4C
	0x03534C38 LDR X8, [X24]
	0x03534C3C LDR X8, [X8 + 0xB8]
	0x03534C40 LDR X22, [X8]
	0x03534C44 CBNZ X22, 0x3534C70
	0x03534C48 B 0x3534C84
	0x03534C4C ADRP X8, 0xBC7000
	0x03534C50 LDR X1, [X19 + 0x30]
	0x03534C54 LDR X8, [X8 + 0xE20]
	0x03534C58 LDR X2, [X23]
	0x03534C5C MOV X3, X31
	0x03534C60 LDR X0, [X8]
	0x03534C64 BL 0x32274B8
	0x03534C68 MOV X22, X0
	0x03534C6C CBZ X22, 0x3534C84
	0x03534C70 LDR X8, [X20]
	0x03534C74 MOV X0, X22
	0x03534C78 LDR X1, [X8 + 0x40]
	0x03534C7C BL 0x1C16E00
	0x03534C80 CBZ X0, 0x3534F5C
	0x03534C84 LDR W8, [X20 + 0x18]
	0x03534C88 CMP W8, 0x4
	0x03534C8C B.LS 0x3534F58
	0x03534C90 ADRP X8, 0xBBF000
	0x03534C94 LDR X8, [X8 + 0xB58]
	0x03534C98 STR X22, [X20 + 0x40]
	0x03534C9C ADRP X25, 0xBC7000
	0x03534CA0 ADD X22, X19, 0x38
	0x03534CA4 LDR X0, [X8]
	0x03534CA8 LDR W8, [X0 + 0xE0]
	0x03534CAC LDR X25, [X25 + 0xE38]
	0x03534CB0 CBNZ W8, 0x3534CB8
	0x03534CB4 BL 0x1C16DFC
	0x03534CB8 MOV X0, X22
	0x03534CBC MOV X1, X31
	0x03534CC0 BL 0x33176C4
	0x03534CC4 LDR X8, [X25]
	0x03534CC8 LDR X2, [X23]
	0x03534CCC MOV X1, X0
	0x03534CD0 MOV X3, X31
	0x03534CD4 MOV X0, X8
	0x03534CD8 BL 0x32274B8
	0x03534CDC MOV X22, X0
	0x03534CE0 CBZ X0, 0x3534CF8
	0x03534CE4 LDR X8, [X20]
	0x03534CE8 MOV X0, X22
	0x03534CEC LDR X1, [X8 + 0x40]
	0x03534CF0 BL 0x1C16E00
	0x03534CF4 CBZ X0, 0x3534F5C
	0x03534CF8 LDR W8, [X20 + 0x18]
	0x03534CFC CMP W8, 0x5
	0x03534D00 B.LS 0x3534F58
	0x03534D04 ADRP X8, 0xBC7000
	0x03534D08 LDR X8, [X8 + 0xE40]
	0x03534D0C STR X22, [X20 + 0x48]
	0x03534D10 LDR X1, [X19 + 0x40]
	0x03534D14 LDR X2, [X23]
	0x03534D18 LDR X0, [X8]
	0x03534D1C MOV X3, X31
	0x03534D20 BL 0x32274B8
	0x03534D24 MOV X22, X0
	0x03534D28 CBZ X0, 0x3534D40
	0x03534D2C LDR X8, [X20]
	0x03534D30 MOV X0, X22
	0x03534D34 LDR X1, [X8 + 0x40]
	0x03534D38 BL 0x1C16E00
	0x03534D3C CBZ X0, 0x3534F5C
	0x03534D40 LDR W8, [X20 + 0x18]
	0x03534D44 CMP W8, 0x6
	0x03534D48 B.LS 0x3534F58
	0x03534D4C STR X22, [X20 + 0x50]
	0x03534D50 LDR X0, [X19 + 0x50]
	0x03534D54 MOV X1, X31
	0x03534D58 BL 0x32277A8
	0x03534D5C TBZ X0, 0x0, 0x3534D74
	0x03534D60 LDR X8, [X24]
	0x03534D64 LDR X8, [X8 + 0xB8]
	0x03534D68 LDR X22, [X8]
	0x03534D6C CBNZ X22, 0x3534D98
	0x03534D70 B 0x3534DAC
	0x03534D74 ADRP X8, 0xBC7000
	0x03534D78 LDR X1, [X19 + 0x50]
	0x03534D7C LDR X8, [X8 + 0xE28]
	0x03534D80 LDR X2, [X23]
	0x03534D84 MOV X3, X31
	0x03534D88 LDR X0, [X8]
	0x03534D8C BL 0x32274B8
	0x03534D90 MOV X22, X0
	0x03534D94 CBZ X22, 0x3534DAC
	0x03534D98 LDR X8, [X20]
	0x03534D9C MOV X0, X22
	0x03534DA0 LDR X1, [X8 + 0x40]
	0x03534DA4 BL 0x1C16E00
	0x03534DA8 CBZ X0, 0x3534F5C
	0x03534DAC LDR W8, [X20 + 0x18]
	0x03534DB0 CMP W8, 0x7
	0x03534DB4 B.LS 0x3534F58
	0x03534DB8 STR X22, [X20 + 0x58]
	0x03534DBC MOV X0, X19
	0x03534DC0 LDR W8, [X0 + 0x58]!
	0x03534DC4 CMP W8, 0x1
	0x03534DC8 B.LT 0x3534E00
	0x03534DCC ADRP X22, 0xBC7000
	0x03534DD0 LDR X22, [X22 + 0xE08]
	0x03534DD4 MOV X1, X31
	0x03534DD8 BL 0x337B6E0
	0x03534DDC LDR X8, [X22]
	0x03534DE0 LDR X2, [X23]
	0x03534DE4 MOV X1, X0
	0x03534DE8 MOV X3, X31
	0x03534DEC MOV X0, X8
	0x03534DF0 BL 0x32274B8
	0x03534DF4 MOV X22, X0
	0x03534DF8 CBNZ X22, 0x3534E10
	0x03534DFC B 0x3534E24
	0x03534E00 LDR X8, [X24]
	0x03534E04 LDR X8, [X8 + 0xB8]
	0x03534E08 LDR X22, [X8]
	0x03534E0C CBZ X22, 0x3534E24
	0x03534E10 LDR X8, [X20]
	0x03534E14 MOV X0, X22
	0x03534E18 LDR X1, [X8 + 0x40]
	0x03534E1C BL 0x1C16E00
	0x03534E20 CBZ X0, 0x3534F5C
	0x03534E24 LDR W8, [X20 + 0x18]
	0x03534E28 CMP W8, 0x8
	0x03534E2C B.LS 0x3534F58
	0x03534E30 STR X22, [X20 + 0x60]
	0x03534E34 LDR X0, [X19 + 0x60]
	0x03534E38 MOV X1, X31
	0x03534E3C BL 0x32277A8
	0x03534E40 TBZ X0, 0x0, 0x3534E58
	0x03534E44 LDR X8, [X24]
	0x03534E48 LDR X8, [X8 + 0xB8]
	0x03534E4C LDR X22, [X8]
	0x03534E50 CBNZ X22, 0x3534E7C
	0x03534E54 B 0x3534E90
	0x03534E58 ADRP X8, 0xBC7000
	0x03534E5C LDR X1, [X19 + 0x60]
	0x03534E60 LDR X8, [X8 + 0xE48]
	0x03534E64 LDR X2, [X23]
	0x03534E68 MOV X3, X31
	0x03534E6C LDR X0, [X8]
	0x03534E70 BL 0x32274B8
	0x03534E74 MOV X22, X0
	0x03534E78 CBZ X22, 0x3534E90
	0x03534E7C LDR X8, [X20]
	0x03534E80 MOV X0, X22
	0x03534E84 LDR X1, [X8 + 0x40]
	0x03534E88 BL 0x1C16E00
	0x03534E8C CBZ X0, 0x3534F5C
	0x03534E90 LDR W8, [X20 + 0x18]
	0x03534E94 CMP W8, 0x9
	0x03534E98 B.LS 0x3534F58
	0x03534E9C ADRP X8, 0xBC7000
	0x03534EA0 LDR X8, [X8 + 0xDF8]
	0x03534EA4 STR X22, [X20 + 0x68]
	0x03534EA8 LDRB W9, [X19 + 0x68]
	0x03534EAC ADD X1, X31, 0xC
	0x03534EB0 LDR X0, [X8]
	0x03534EB4 STRB W9, [X31 + 0xC]
	0x03534EB8 BL 0x1C16E04
	0x03534EBC MOV X22, X0
	0x03534EC0 CBZ X0, 0x3534ED8
	0x03534EC4 LDR X8, [X20]
	0x03534EC8 MOV X0, X22
	0x03534ECC LDR X1, [X8 + 0x40]
	0x03534ED0 BL 0x1C16E00
	0x03534ED4 CBZ X0, 0x3534F5C
	0x03534ED8 LDR W8, [X20 + 0x18]
	0x03534EDC CMP W8, 0xA
	0x03534EE0 B.LS 0x3534F58
	0x03534EE4 ADRP X8, 0xC00000
	0x03534EE8 LDR X8, [X8 + 0xB40]
	0x03534EEC STR X22, [X20 + 0x70]
	0x03534EF0 LDR W9, [X19 + 0x6C]
	0x03534EF4 ADD X1, X31, 0x8
	0x03534EF8 LDR X0, [X8]
	0x03534EFC STR W9, [X31 + 0x8]
	0x03534F00 BL 0x1C16E04
	0x03534F04 MOV X19, X0
	0x03534F08 CBZ X0, 0x3534F20
	0x03534F0C LDR X8, [X20]
	0x03534F10 MOV X0, X19
	0x03534F14 LDR X1, [X8 + 0x40]
	0x03534F18 BL 0x1C16E00
	0x03534F1C CBZ X0, 0x3534F5C
	0x03534F20 LDR W8, [X20 + 0x18]
	0x03534F24 CMP W8, 0xB
	0x03534F28 B.LS 0x3534F58
	0x03534F2C MOV X0, X21
	0x03534F30 MOV X1, X20
	0x03534F34 MOV X2, X31
	0x03534F38 STR X19, [X20 + 0x78]
	0x03534F3C BL 0x3227C5C
	0x03534F40 LDP X20, X19, [X31 + 0x40]
	0x03534F44 LDP X22, X21, [X31 + 0x30]
	0x03534F48 LDP X24, X23, [X31 + 0x20]
	0x03534F4C LDP X30, X25, [X31 + 0x10]
	0x03534F50 ADD X31, X31, 0x50
	0x03534F54 RET
	0x03534F58 BL 0x1C16F28
	0x03534F5C BL 0x1C16F44
	0x03534F60 MOV X1, X31
	0x03534F64 BL 0x1C16DEC
	0x03534F68 BL 0x1C16F20
	0x03534F6C STR X30, [X31 - 0x20]!
	0x03534F70 STP X20, X19, [X31 + 0x10]
	0x03534F74 ADRP X20, 0xEAB000
	0x03534F78 LDRB W8, [X20 + 0xBC1]
	0x03534F7C MOV X19, X1
	0x03534F80 TBNZ X8, 0x0, 0x3534F98
	0x03534F84 ADRP X0, 0xBC7000
	0x03534F88 LDR X0, [X0 + 0xE50]
	0x03534F8C BL 0x1C16CF4
	0x03534F90 MOVZ W8, 0x1
	0x03534F94 STRB W8, [X20 + 0xBC1]
	0x03534F98 MOV X0, X19
	0x03534F9C MOV X1, X31
	0x03534FA0 BL 0x32277A8
	0x03534FA4 TBNZ X0, 0x0, 0x3534FB8
	0x03534FA8 CBZ X19, 0x3534FF8
	0x03534FAC LDR W8, [X19 + 0x10]
	0x03534FB0 CMP W8, 0x8
	0x03534FB4 B.GE 0x3534FC8
	0x03534FB8 MOV X0, X19
	0x03534FBC LDP X20, X19, [X31 + 0x10]
	0x03534FC0 LDR X30, [X31], #0x20
	0x03534FC4 RET
	0x03534FC8 MOVZ W2, 0x8
	0x03534FCC MOV X0, X19

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+16], D8
	003 Move [X31+32], X29
	004 Move [X31+40], X30
	005 Move [X31+48], X28
	006 Move [X31+56], X27
	007 Move [X31+64], X26
	008 Move [X31+72], X25
	009 Move [X31+80], X24
	010 Move [X31+88], X23
	011 Move [X31+96], X22
	012 Move [X31+104], X21
	013 Move [X31+112], X20
	014 Move [X31+120], X19
	015 Move [X31+24], W0
	016 Move X20, 0xEAC000
	017 Move X21, 0xBC7000
	018 Move X23, 0xBC0000
	019 Move X22, 0xC01000
	020 Move X19, 0xC01000
	021 Move W8, [X20+3002]
	022 Move X21, [X21+744]
	023 Move X23, [X23+1560]
	024 Move X22, [X22+2752]
	025 Move X19, [X19+2760]
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {71}
	030 Move X0, 0xC01000
	031 Move X0, [X0+2432]
	032 Call 0x1C17CF4
	033 Move X0, 0xBC0000
	034 Move X0, [X0+1560]
	035 Call 0x1C17CF4
	036 Move X0, 0xBC8000
	037 Move X0, [X0+2392]
	038 Call 0x1C17CF4
	039 Move X0, 0xBC7000
	040 Move X0, [X0+744]
	041 Call 0x1C17CF4
	042 Move X0, 0xC01000
	043 Move X0, [X0+2760]
	044 Call 0x1C17CF4
	045 Move X0, 0xC01000
	046 Move X0, [X0+2752]
	047 Call 0x1C17CF4
	048 Move X0, 0xBC1000
	049 Move X0, [X0+4064]
	050 Call 0x1C17CF4
	051 Move X0, 0xC01000
	052 Move X0, [X0+2704]
	053 Call 0x1C17CF4
	054 Move X0, 0xC01000
	055 Move X0, [X0+2712]
	056 Call 0x1C17CF4
	057 Move X0, 0xC01000
	058 Move X0, [X0+2720]
	059 Call 0x1C17CF4
	060 Move X0, 0xC01000
	061 Move X0, [X0+2728]
	062 Call 0x1C17CF4
	063 Move X0, 0xC01000
	064 Move X0, [X0+2768]
	065 Call 0x1C17CF4
	066 Move X0, 0xC01000
	067 Move X0, [X0+2744]
	068 Call 0x1C17CF4
	069 Move W8, 1
	070 Move [X20+3002], W8
	071 Move X0, [X21]
	072 Call 0x1C17F10
	073 Move X1, X31
	074 Move X20, X0
	075 Call Random..ctor, X0
	076 Move X0, [X23]
	077 Move W1, 64
	078 Call 0x1C17D6C
	079 Move X8, [X23]
	080 Move X21, X0
	081 Move W1, 64
	082 Move X0, X8
	083 Call 0x1C17D6C
	084 Move X1, [X22]
	085 Move X2, X31
	086 Move X22, X0
	087 Call RuntimeHelpers.InitializeArray, X0, X1
	088 Move X0, [X23]
	089 Move W1, 64
	090 Call 0x1C17D6C
	091 Move X1, [X19]
	092 Move X2, X31
	093 Move X25, X0
	094 Call RuntimeHelpers.InitializeArray, X0, X1
	095 Move X19, 0xC01000
	096 Move X19, [X19+2432]
	097 Move X0, [X19]
	098 Call 0x1C17F10
	099 Move X1, X22
	100 Move X23, X0
	101 Call BigInteger..ctor, X0, X1
	102 Move X0, [X19]
	103 Call 0x1C17F10
	104 Move X1, X25
	105 Move X24, X0
	106 Call BigInteger..ctor, X0, X1
	107 Move X0, [X19]
	108 Move W8, [X0+224]
	109 Compare W8, 0
	110 JumpIfNotEqual {112}
	111 Call 0x1C17DFC
	112 Move W0, 1
	113 Call BigInteger.op_Implicit, X0
	114 Move X1, X0
	115 Move X0, X23
	116 Call BigInteger.op_Subtraction, X0, X1
	117 Move X22, X0
	118 Move W0, 1
	119 Call BigInteger.op_Implicit, X0
	120 Move X1, X0
	121 Move X0, X24
	122 Call BigInteger.op_Subtraction, X0, X1
	123 Move X1, X0
	124 Move X0, X22
	125 Call BigInteger.op_Multiply, X0, X1
	126 Move X27, X0
	127 Move X0, X23
	128 Move X1, X24
	129 Call BigInteger.op_Multiply, X0, X1
	130 Move W8, [X31+24]
	131 Move [X31+28], W31
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Compare X27, 0
	134 JumpIfEqual {419}
	135 Move X22, 0xBC8000
	136 Move X8, -44322816
	137 Move X22, [X22+2392]
	138 Move V8, [X8+744]
	139 Move X23, X0
	140 Move X19, 0x7FF00000
	141 Move W28, 0x80000000
	142 Move X29, 0x40700000
	143 Move [X31], X27
	144 Move W1, 512
	145 Move X0, X27
	146 Move X2, X20
	147 Call BigInteger.genCoPrime, X0, X1, X2
	148 Compare X0, 0
	149 JumpIfEqual {419}
	150 Move X1, X27
	151 Move X25, X0
	152 Call BigInteger.modInverse, X0, X1
	153 Move X24, X0
	154 Move W1, 10
	155 Move X0, X25
	156 Move [X31+8], X25
	157 Call BigInteger.ToString, X0, X1
	158 Move X8, 0xC01000
	159 Move X8, [X8+2768]
	160 Move X1, X0
	161 Move X2, X31
	162 Move X8, [X8]
	163 Move X0, X8
	164 Call String.Concat, X0, X1
	165 Move X8, [X22]
	166 Move X26, X0
	167 Move W9, [X8+224]
	168 Compare W9, 0
	169 JumpIfNotEqual {172}
	170 Move X0, X8
	171 Call 0x1C17DFC
	172 Move X0, X26
	173 Move X1, X31
	174 Call Console.WriteLine, X0
	175 Compare X24, 0
	176 JumpIfEqual {419}
	177 Move W1, 10
	178 Move X0, X24
	179 Move X25, X24
	180 Call BigInteger.ToString, X0, X1
	181 Move X8, 0xC01000
	182 Move X8, [X8+2744]
	183 Move X1, X0
	184 Move X2, X31
	185 Move X8, [X8]
	186 Move X0, X8
	187 Call String.Concat, X0, X1
	188 Move X1, X31
	189 Call Console.WriteLine, X0
	190 Compare X23, 0
	191 JumpIfEqual {419}
	192 Move W1, 10
	193 Move X0, X23
	194 Move X24, X23
	195 Call BigInteger.ToString, X0, X1
	196 Move X8, 0xC01000
	197 Move X8, [X8+2720]
	198 Move X9, 0xBC1000
	199 Move X1, X0
	200 Move X3, X31
	201 Move X8, [X8]
	202 Move X9, [X9+4064]
	203 Move X0, X8
	204 Move X2, [X9]
	205 Call String.Concat, X0, X1, X2
	206 Move X1, X31
	207 Call Console.WriteLine, X0
	208 Compare X20, 0
	209 JumpIfEqual {419}
	210 Move X23, X22
	211 Move X8, [X20]
	212 Move X0, X20
	213 Move X9, [X8+440]
	214 Move X1, [X8+448]
	215 NotImplemented "Instruction BLR not yet implemented."
	216 Multiply D0, D0, D8
	217 Move D1, X19
	218 NotImplemented "Instruction FCVTZS not yet implemented."
	219 NotImplemented "Instruction FCMP not yet implemented."
	220 NotImplemented "Instruction CSEL not yet implemented."
	221 Compare W26, 0
	222 JumpIfEqual {211}
	223 Move W27, W31
	224 Move W8, W31
	225 NotImplemented "Instruction CMP not yet implemented."
	226 Move W22, W8
	227 NotImplemented "Instruction CMP not yet implemented."
	228 Move X8, [X20]
	229 Move X0, X20
	230 Move X9, [X8+440]
	231 Move X1, [X8+448]
	232 NotImplemented "Instruction BLR not yet implemented."
	233 Compare X21, 0
	234 JumpIfEqual {419}
	235 Move W8, [X21+24]
	236 NotImplemented "Instruction CMP not yet implemented."
	237 Move D1, X29
	238 Multiply D0, D0, D1
	239 NotImplemented "Instruction FCVTZS not yet implemented."
	240 NotImplemented "Instruction FCMP not yet implemented."
	241 NotImplemented "Instruction CSEL not yet implemented."
	242 Compare X21, 0
	243 JumpIfEqual {419}
	244 Move W8, [X21+24]
	245 NotImplemented "Instruction CMP not yet implemented."
	246 Move W8, W31
	247 Add X9, X21, W27
	248 Move [X9+32], W8
	249 Move W9, [X21+24]
	250 NotImplemented "Instruction CMP not yet implemented."
	251 And W31, W8, 255
	252 NotImplemented "Instruction CSET not yet implemented."
	253 Or W8, W22, W8
	254 Add W27, W27, 1
	255 Move W27, W31
	256 Move W8, W31
	257 Move TEMP, X22
	258 And TEMP, TEMP, 1
	259 Compare TEMP, 1
	260 JumpIfNotEqual {225}
	261 Compare X21, 0
	262 JumpIfEqual {419}
	263 Move W8, [X21+24]
	264 Move X22, X23
	265 Move X23, X24
	266 Compare W8, 0
	267 JumpIfEqual {418}
	268 Move W8, [X21+32]
	269 Compare W8, 0
	270 JumpIfNotEqual {287}
	271 Move X8, [X20]
	272 Move X0, X20
	273 Move X9, [X8+440]
	274 Move X1, [X8+448]
	275 NotImplemented "Instruction BLR not yet implemented."
	276 Move X8, [X21+24]
	277 Compare W8, 0
	278 JumpIfEqual {418}
	279 Move D1, X29
	280 Multiply D0, D0, D1
	281 NotImplemented "Instruction FCVTZS not yet implemented."
	282 NotImplemented "Instruction FCMP not yet implemented."
	283 NotImplemented "Instruction CSEL not yet implemented."
	284 Move [X21+32], W9
	285 Compare W8, 0
	286 JumpIfNotEqual {268}
	287 Add X0, X31, 28
	288 Move X1, X31
	289 Call Int32.ToString, X0
	290 Move X8, 0xC01000
	291 Move X8, [X8+2704]
	292 Move X1, X0
	293 Move X2, X31
	294 Move X8, [X8]
	295 Move X0, X8
	296 Call String.Concat, X0, X1
	297 Move X8, [X22]
	298 Move X27, X0
	299 Move W9, [X8+224]
	300 Compare W9, 0
	301 JumpIfNotEqual {304}
	302 Move X0, X8
	303 Call 0x1C17DFC
	304 Move X0, X27
	305 Move X1, X31
	306 Call Console.Write, X0
	307 Move X8, 0xC01000
	308 Move X8, [X8+2432]
	309 Move X0, [X8]
	310 Call 0x1C17F10
	311 Move X1, X21
	312 Move W2, W26
	313 Move X27, X0
	314 Call BigInteger..ctor, X0, X1, X2
	315 Compare X27, 0
	316 JumpIfEqual {419}
	317 Move X1, [X31+8]
	318 Move X0, X27
	319 Move X2, X23
	320 Call BigInteger.ModPow, X0, X1, X2
	321 Compare X0, 0
	322 JumpIfEqual {419}
	323 Move X1, X25
	324 Move X2, X23
	325 Call BigInteger.ModPow, X0, X1, X2
	326 Move X8, 0xC01000
	327 Move X8, [X8+2432]
	328 Move X24, X0
	329 Move X8, [X8]
	330 Move W9, [X8+224]
	331 Compare W9, 0
	332 JumpIfNotEqual {335}
	333 Move X0, X8
	334 Call 0x1C17DFC
	335 Compare X24, 0
	336 JumpIfEqual {419}
	337 Move X8, [X24]
	338 Move X0, X24
	339 Move X1, X27
	340 Move X9, [X8+312]
	341 Move X2, [X8+320]
	342 NotImplemented "Instruction BLR not yet implemented."
	343 Move TEMP, X0
	344 And TEMP, TEMP, 1
	345 Compare TEMP, 1
	346 JumpIfNotEqual {363}
	347 Move X0, [X22]
	348 Move W8, [X0+224]
	349 Compare W8, 0
	350 JumpIfNotEqual {352}
	351 Call 0x1C17DFC
	352 Move X8, 0xC01000
	353 Move X8, [X8+2728]
	354 Move X1, X31
	355 Move X0, [X8]
	356 Call Console.WriteLine, X0
	357 Move W9, [X31+24]
	358 Move W8, [X31+28]
	359 Move X27, [X31]
	360 Add W8, W8, 1
	361 NotImplemented "Instruction CMP not yet implemented."
	362 Move [X31+28], W8
	363 Add X0, X31, 28
	364 Move X1, X31
	365 Call Int32.ToString, X0
	366 Move X8, 0xC01000
	367 Move X8, [X8+2712]
	368 Move X1, X0
	369 Move X2, X31
	370 Move X8, [X8]
	371 Move X0, X8
	372 Call String.Concat, X0, X1
	373 Move X8, [X22]
	374 Move X19, X0
	375 Move W9, [X8+224]
	376 Compare W9, 0
	377 JumpIfNotEqual {380}
	378 Move X0, X8
	379 Call 0x1C17DFC
	380 Move X0, X19
	381 Move X1, X31
	382 Call Console.WriteLine, X0
	383 Move X8, [X27]
	384 Move X0, X27
	385 Move X9, [X8+360]
	386 Move X1, [X8+368]
	387 NotImplemented "Instruction BLR not yet implemented."
	388 Move X8, 0xBC1000
	389 Move X8, [X8+4064]
	390 Move X2, X31
	391 Move X1, [X8]
	392 Call String.Concat, X0, X1
	393 Move X8, [X22]
	394 Move X19, X0
	395 Move W9, [X8+224]
	396 Compare W9, 0
	397 JumpIfNotEqual {400}
	398 Move X0, X8
	399 Call 0x1C17DFC
	400 Move X0, X19
	401 Move X1, X31
	402 Call Console.WriteLine, X0
	403 Move X20, [X31+112]
	404 Move X19, [X31+120]
	405 Move X22, [X31+96]
	406 Move X21, [X31+104]
	407 Move X24, [X31+80]
	408 Move X23, [X31+88]
	409 Move X26, [X31+64]
	410 Move X25, [X31+72]
	411 Move X28, [X31+48]
	412 Move X27, [X31+56]
	413 Move X29, [X31+32]
	414 Move X30, [X31+40]
	415 Move V8, [X31+16]
	416 Add X31, X31, 128
	417 Return 
	418 Call 0x1C17F28
	419 Call 0x1C17F20

Method: System.Void SqrtTest(System.Int32 rounds)

Disassembly:
	0x03534FD0 MOV W1, W31
	0x03534FD4 MOV X3, X31
	0x03534FD8 BL 0x3228DE4
	0x03534FDC ADRP X8, 0xBC7000
	0x03534FE0 LDR X8, [X8 + 0xE50]
	0x03534FE4 LDP X20, X19, [X31 + 0x10]
	0x03534FE8 MOV X2, X31
	0x03534FEC LDR X1, [X8]
	0x03534FF0 LDR X30, [X31], #0x20
	0x03534FF4 B 0x321B938
	0x03534FF8 BL 0x1C16F20
	0x03534FFC SUB X31, X31, 0x20
	0x03535000 STP X30, X19, [X31 + 0x10]
	0x03535004 MOV X1, X0
	0x03535008 STP X31, X31, [X31]
	0x0353500C ADD X0, X31, 0x0
	0x03535010 MOV X2, X31
	0x03535014 BL 0x3376AD0
	0x03535018 MOVZ W0, 0x1
	0x0353501C LDP X30, X19, [X31 + 0x10]
	0x03535020 ADD X31, X31, 0x20
	0x03535024 RET
	0x03535028 CMP W1, 0x1
	0x0353502C MOV X19, X0
	0x03535030 B.NE 0x3535090
	0x03535034 MOV X0, X19
	0x03535038 BL 0x3EB1AD0
	0x0353503C MOV X19, X0
	0x03535040 ADRP X0, 0xBC4000
	0x03535044 LDR X0, [X0 + 0xCC0]
	0x03535048 BL 0x1C16D08
	0x0353504C LDR X8, [X19]
	0x03535050 LDR X1, [X8]
	0x03535054 BL 0x1C17270
	0x03535058 TBZ X0, 0x0, 0x3535068
	0x0353505C BL 0x3EB1AE0
	0x03535060 MOV W0, W31
	0x03535064 B 0x353501C
	0x03535068 MOVZ W0, 0x8
	0x0353506C BL 0x3EB1AF0
	0x03535070 LDR X8, [X19]
	0x03535074 STR X8, [X0]
	0x03535078 ADRP X1, 0x97F000
	0x0353507C ADD X1, X1, 0xE58
	0x03535080 MOV X2, X31
	0x03535084 BL 0x3EB1B00
	0x03535088 MOV X19, X0
	0x0353508C BL 0x3EB1AE0
	0x03535090 MOV X0, X19
	0x03535094 BL 0x1D2C690
	0x03535098 BL 0x1990590
	0x0353509C STR X30, [X31 - 0x10]!
	0x035350A0 CBZ X1, 0x3535118
	0x035350A4 LDR V0, [X0 + 0x1]
	0x035350A8 STR V0, [X1 + 0x1]
	0x035350AC LDR V0, [X0 + 0x2]
	0x035350B0 STR V0, [X1 + 0x2]
	0x035350B4 LDR X8, [X0 + 0x30]
	0x035350B8 STR X8, [X1 + 0x30]
	0x035350BC LDRB W8, [X0 + 0x38]
	0x035350C0 STRB W8, [X1 + 0x38]
	0x035350C4 LDR V0, [X0 + 0x4]
	0x035350C8 STR V0, [X1 + 0x4]
	0x035350CC LDR X8, [X0 + 0x50]
	0x035350D0 STR X8, [X1 + 0x50]
	0x035350D4 LDR W8, [X0 + 0x58]
	0x035350D8 STR W8, [X1 + 0x58]
	0x035350DC LDR X8, [X0 + 0x60]
	0x035350E0 STR X8, [X1 + 0x60]
	0x035350E4 LDRB W8, [X0 + 0x68]
	0x035350E8 STRB W8, [X1 + 0x68]
	0x035350EC LDR W8, [X0 + 0x6C]
	0x035350F0 STR W8, [X1 + 0x6C]
	0x035350F4 LDRB W8, [X0 + 0x70]
	0x035350F8 STRB W8, [X1 + 0x70]
	0x035350FC LDRB W8, [X0 + 0x71]
	0x03535100 STRB W8, [X1 + 0x71]
	0x03535104 LDRB W8, [X0 + 0x69]
	0x03535108 MOV X0, X1
	0x0353510C STRB W8, [X1 + 0x69]
	0x03535110 LDR X30, [X31], #0x10
	0x03535114 RET
	0x03535118 BL 0x1C16F20
	0x0353511C MOVZ W8, 0x1
	0x03535120 MOV X1, X31
	0x03535124 STRB W8, [X0 + 0x38]
	0x03535128 STRB W8, [X0 + 0x69]
	0x0353512C STRB W8, [X0 + 0x71]
	0x03535130 B 0x33BDD8C
	0x03535134 LDR X0, [X0 + 0x20]
	0x03535138 RET
	0x0353513C STR X1, [X0 + 0x20]
	0x03535140 RET
	0x03535144 LDR W0, [X0 + 0x30]
	0x03535148 RET
	0x0353514C STR W1, [X0 + 0x30]
	0x03535150 RET
	0x03535154 LDRB W8, [X0 + 0x35]
	0x03535158 CMP W8, 0xFF
	0x0353515C CSET W0, NE
	0x03535160 RET
	0x03535164 STR X30, [X31 - 0x20]!
	0x03535168 STP X20, X19, [X31 + 0x10]
	0x0353516C ADRP X19, 0xEAA000
	0x03535170 ADRP X20, 0xBFF000
	0x03535174 LDRB W8, [X19 + 0xBC2]
	0x03535178 LDR X20, [X20 + 0xB48]
	0x0353517C TBNZ X8, 0x0, 0x3535194
	0x03535180 ADRP X0, 0xBFF000
	0x03535184 LDR X0, [X0 + 0xB48]
	0x03535188 BL 0x1C16CF4
	0x0353518C MOVZ W8, 0x1
	0x03535190 STRB W8, [X19 + 0xBC2]
	0x03535194 LDR X8, [X20]
	0x03535198 LDP X20, X19, [X31 + 0x10]
	0x0353519C LDR X8, [X8 + 0xB8]
	0x035351A0 STRB W31, [X8 + 0x4]
	0x035351A4 STR W31, [X8]
	0x035351A8 LDR X30, [X31], #0x20
	0x035351AC RET
	0x035351B0 STR X30, [X31 - 0x20]!
	0x035351B4 STP X20, X19, [X31 + 0x10]
	0x035351B8 ADRP X20, 0xEAA000
	0x035351BC LDRB W8, [X20 + 0xBC3]
	0x035351C0 MOV X19, X0
	0x035351C4 TBNZ X8, 0x0, 0x35351DC
	0x035351C8 ADRP X0, 0xBBE000
	0x035351CC LDR X0, [X0 + 0x598]
	0x035351D0 BL 0x1C16CF4
	0x035351D4 MOVZ W8, 0x1
	0x035351D8 STRB W8, [X20 + 0xBC3]
	0x035351DC LDRB W8, [X19 + 0x34]
	0x035351E0 CBZ W8, 0x3535224
	0x035351E4 ADRP X20, 0xBBE000
	0x035351E8 LDR X20, [X20 + 0x598]
	0x035351EC MOV X0, X19
	0x035351F0 MOV X1, X31
	0x035351F4 BL 0x3C32ECC
	0x035351F8 LDR X8, [X20]
	0x035351FC MOV X19, X0
	0x03535200 LDR W9, [X8 + 0xE0]
	0x03535204 CBNZ W9, 0x3535210
	0x03535208 MOV X0, X8
	0x0353520C BL 0x1C16DFC
	0x03535210 MOV X0, X19
	0x03535214 LDP X20, X19, [X31 + 0x10]
	0x03535218 MOV X1, X31
	0x0353521C LDR X30, [X31], #0x20
	0x03535220 B 0x3C39674
	0x03535224 LDP X20, X19, [X31 + 0x10]
	0x03535228 LDR X30, [X31], #0x20
	0x0353522C RET
	0x03535230 STP X30, X21, [X31 - 0x20]!
	0x03535234 STP X20, X19, [X31 + 0x10]
	0x03535238 ADRP X21, 0xEAA000
	0x0353523C ADRP X20, 0xBFF000
	0x03535240 LDRB W8, [X21 + 0xBC4]
	0x03535244 LDR X20, [X20 + 0xB48]
	0x03535248 MOV X19, X0
	0x0353524C TBNZ X8, 0x0, 0x3535270
	0x03535250 ADRP X0, 0xBFF000
	0x03535254 LDR X0, [X0 + 0xB48]
	0x03535258 BL 0x1C16CF4
	0x0353525C ADRP X0, 0xBC6000
	0x03535260 LDR X0, [X0 + 0xE60]
	0x03535264 BL 0x1C16CF4
	0x03535268 MOVZ W8, 0x1
	0x0353526C STRB W8, [X21 + 0xBC4]
	0x03535270 MOV X0, X19
	0x03535274 BL 0x3535304
	0x03535278 LDR X8, [X20]
	0x0353527C LDR X8, [X8 + 0xB8]
	0x03535280 LDRB W8, [X8]
	0x03535284 CBZ W8, 0x35352F4
	0x03535288 LDR X0, [X19 + 0x20]
	0x0353528C CBZ X0, 0x35352CC
	0x03535290 LDR X8, [X0 + 0x10]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, 0xEAC000
	015 Move X21, 0xBC7000
	016 Move W8, [X20+3003]
	017 Move X21, [X21+744]
	018 Move W19, W0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {46}
	023 Move X0, 0xC00000
	024 Move X0, [X0+2432]
	025 Call 0x1C17CF4
	026 Move X0, 0xBC7000
	027 Move X0, [X0+2392]
	028 Call 0x1C17CF4
	029 Move X0, 0xBC6000
	030 Move X0, [X0+744]
	031 Call 0x1C17CF4
	032 Move X0, 0xBC0000
	033 Move X0, [X0+4064]
	034 Call 0x1C17CF4
	035 Move X0, 0xC00000
	036 Move X0, [X0+2704]
	037 Call 0x1C17CF4
	038 Move X0, 0xC00000
	039 Move X0, [X0+2712]
	040 Call 0x1C17CF4
	041 Move X0, 0xC00000
	042 Move X0, [X0+2728]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X20+3003], W8
	046 Move X0, [X21]
	047 Call 0x1C17F10
	048 Move X1, X31
	049 Move X20, X0
	050 Call Random..ctor, X0
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move [X31+12], W31
	053 Compare X20, 0
	054 JumpIfEqual {202}
	055 Move X25, 0xC00000
	056 Move X24, 0xBC7000
	057 Move X26, 0xC00000
	058 Move X25, [X25+2704]
	059 Move X24, [X24+2392]
	060 Move X26, [X26+2432]
	061 Move X28, 0x40900000
	062 Move X29, 0x7FF00000
	063 Move W27, 0x80000000
	064 Move X8, [X20]
	065 Move X0, X20
	066 Move X9, [X8+440]
	067 Move X1, [X8+448]
	068 NotImplemented "Instruction BLR not yet implemented."
	069 Move D1, X28
	070 Multiply D1, D0, D1
	071 NotImplemented "Instruction FCVTZS not yet implemented."
	072 Move D0, X29
	073 NotImplemented "Instruction FCMP not yet implemented."
	074 NotImplemented "Instruction CSEL not yet implemented."
	075 Compare W22, 0
	076 JumpIfEqual {64}
	077 Add X0, X31, 12
	078 Move X1, X31
	079 Call Int32.ToString, X0
	080 Move X8, [X25]
	081 Move X1, X0
	082 Move X2, X31
	083 Move X0, X8
	084 Call String.Concat, X0, X1
	085 Move X8, [X24]
	086 Move X21, X0
	087 Move W9, [X8+224]
	088 Compare W9, 0
	089 JumpIfNotEqual {92}
	090 Move X0, X8
	091 Call 0x1C17DFC
	092 Move X0, X21
	093 Move X1, X31
	094 Call Console.Write, X0
	095 Move X0, [X26]
	096 Call 0x1C17F10
	097 Move X21, X0
	098 Call BigInteger..ctor, X0
	099 Compare X21, 0
	100 JumpIfEqual {202}
	101 Move X0, X21
	102 Move W1, W22
	103 Move X2, X20
	104 Call BigInteger.genRandomBits, X0, X1, X2
	105 Move X0, X21
	106 Call BigInteger.sqrt, X0
	107 Move X8, [X26]
	108 Move X22, X0
	109 Move W9, [X8+224]
	110 Compare W9, 0
	111 JumpIfNotEqual {114}
	112 Move X0, X8
	113 Call 0x1C17DFC
	114 Move W0, 1
	115 Call BigInteger.op_Implicit, X0
	116 Move X1, X0
	117 Move X0, X22
	118 Call BigInteger.op_Addition, X0, X1
	119 Move X23, X0
	120 Move W0, 1
	121 Call BigInteger.op_Implicit, X0
	122 Move X1, X0
	123 Move X0, X22
	124 Call BigInteger.op_Addition, X0, X1
	125 Move X1, X0
	126 Move X0, X23
	127 Call BigInteger.op_Multiply, X0, X1
	128 Move X1, X21
	129 Call BigInteger.op_LessThanOrEqual, X0, X1
	130 Move TEMP, X0
	131 And TEMP, TEMP, 1
	132 Compare TEMP, 1
	133 JumpIfEqual {148}
	134 Move X0, [X24]
	135 Move W8, [X0+224]
	136 Compare W8, 0
	137 JumpIfNotEqual {139}
	138 Call 0x1C17DFC
	139 Move X8, 0xC00000
	140 Move X8, [X8+2728]
	141 Move X1, X31
	142 Move X0, [X8]
	143 Call Console.WriteLine, X0
	144 Move W8, [X31+12]
	145 Add W8, W8, 1
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Move [X31+12], W8
	148 Add X0, X31, 12
	149 Move X1, X31
	150 Call Int32.ToString, X0
	151 Move X8, 0xC00000
	152 Move X8, [X8+2712]
	153 Move X1, X0
	154 Move X2, X31
	155 Move X8, [X8]
	156 Move X0, X8
	157 Call String.Concat, X0, X1
	158 Move X8, [X24]
	159 Move X19, X0
	160 Move W9, [X8+224]
	161 Compare W9, 0
	162 JumpIfNotEqual {165}
	163 Move X0, X8
	164 Call 0x1C17DFC
	165 Move X0, X19
	166 Move X1, X31
	167 Call Console.WriteLine, X0
	168 Move X8, [X21]
	169 Move X0, X21
	170 Move X9, [X8+360]
	171 Move X1, [X8+368]
	172 NotImplemented "Instruction BLR not yet implemented."
	173 Move X8, 0xBC0000
	174 Move X8, [X8+4064]
	175 Move X2, X31
	176 Move X1, [X8]
	177 Call String.Concat, X0, X1
	178 Move X8, [X24]
	179 Move X19, X0
	180 Move W9, [X8+224]
	181 Compare W9, 0
	182 JumpIfNotEqual {185}
	183 Move X0, X8
	184 Call 0x1C17DFC
	185 Move X0, X19
	186 Move X1, X31
	187 Call Console.WriteLine, X0
	188 Move X20, [X31+96]
	189 Move X19, [X31+104]
	190 Move X22, [X31+80]
	191 Move X21, [X31+88]
	192 Move X24, [X31+64]
	193 Move X23, [X31+72]
	194 Move X26, [X31+48]
	195 Move X25, [X31+56]
	196 Move X28, [X31+32]
	197 Move X27, [X31+40]
	198 Move X29, [X31+16]
	199 Move X30, [X31+24]
	200 Add X31, X31, 112
	201 Return 
	202 Call 0x1C17F20

Method: System.Void Main(System.String[] args)

Disassembly:
	0x03535294 CBZ X8, 0x35352CC
	0x03535298 LDR W8, [X0 + 0x90]
	0x0353529C CBZ W8, 0x35352CC
	0x035352A0 CMP W8, 0xE
	0x035352A4 B.EQ 0x35352CC
	0x035352A8 MOVZ W1, 0x14
	0x035352AC BL 0x35353A0
	0x035352B0 LDR X8, [X19 + 0x20]
	0x035352B4 CBZ X8, 0x3535300
	0x035352B8 LDR X0, [X8 + 0x10]
	0x035352BC CBZ X0, 0x3535300
	0x035352C0 LDR X8, [X0]
	0x035352C4 LDP X9, X1, [X8 + 0x1C8]
	0x035352C8 BLR X9
	0x035352CC ADRP X8, 0xBC6000
	0x035352D0 LDR X8, [X8 + 0xE60]
	0x035352D4 LDR X0, [X8]
	0x035352D8 LDR W8, [X0 + 0xE0]
	0x035352DC CBNZ W8, 0x35352E4
	0x035352E0 BL 0x1C16DFC
	0x035352E4 LDP X20, X19, [X31 + 0x10]
	0x035352E8 MOV X0, X31
	0x035352EC LDP X30, X21, [X31], #0x20
	0x035352F0 B 0x351FDB4
	0x035352F4 LDP X20, X19, [X31 + 0x10]
	0x035352F8 LDP X30, X21, [X31], #0x20
	0x035352FC RET
	0x03535300 BL 0x1C16F20
	0x03535304 STR X30, [X31 - 0x20]!
	0x03535308 STP X20, X19, [X31 + 0x10]
	0x0353530C ADRP X20, 0xEAA000
	0x03535310 LDRB W8, [X20 + 0xBCC]
	0x03535314 MOV X19, X0
	0x03535318 TBNZ X8, 0x0, 0x3535330
	0x0353531C ADRP X0, 0xBC6000
	0x03535320 LDR X0, [X0 + 0xE60]
	0x03535324 BL 0x1C16CF4
	0x03535328 MOVZ W8, 0x1
	0x0353532C STRB W8, [X20 + 0xBCC]
	0x03535330 LDRB W20, [X19 + 0x35]
	0x03535334 CMP W20, 0xFF
	0x03535338 B.EQ 0x3535368
	0x0353533C ADRP X8, 0xBC6000
	0x03535340 LDR X8, [X8 + 0xE60]
	0x03535344 LDR X0, [X8]
	0x03535348 LDR W8, [X0 + 0xE0]
	0x0353534C CBNZ W8, 0x3535354
	0x03535350 BL 0x1C16DFC
	0x03535354 MOV W0, W20
	0x03535358 MOV X1, X31
	0x0353535C BL 0x351FB70
	0x03535360 MOVZ W8, 0xFF
	0x03535364 STRB W8, [X19 + 0x35]
	0x03535368 LDP X20, X19, [X31 + 0x10]
	0x0353536C LDR X30, [X31], #0x20
	0x03535370 RET
	0x03535374 LDR X8, [X0 + 0x10]
	0x03535378 CBZ X8, 0x3535398
	0x0353537C LDR W8, [X0 + 0x90]
	0x03535380 CMP W8, 0x0
	0x03535384 CSET W9, NE
	0x03535388 CMP W8, 0xE
	0x0353538C CSET W8, NE
	0x03535390 AND W0, W9, W8, 0x0
	0x03535394 RET
	0x03535398 MOV W0, W31
	0x0353539C RET
	0x035353A0 SUB X31, X31, 0x80
	0x035353A4 STR X30, [X31 + 0x50]
	0x035353A8 STP X22, X21, [X31 + 0x60]
	0x035353AC STP X20, X19, [X31 + 0x70]
	0x035353B0 ADRP X21, 0xEAA000
	0x035353B4 LDRB W8, [X21 + 0xBF1]
	0x035353B8 MOV W20, W1
	0x035353BC MOV X19, X0
	0x035353C0 TBNZ X8, 0x0, 0x3535414
	0x035353C4 ADRP X0, 0xBFF000
	0x035353C8 LDR X0, [X0 + 0xB50]
	0x035353CC BL 0x1C16CF4
	0x035353D0 ADRP X0, 0xBFF000
	0x035353D4 LDR X0, [X0 + 0xB58]
	0x035353D8 BL 0x1C16CF4
	0x035353DC ADRP X0, 0xBBE000
	0x035353E0 LDR X0, [X0 + 0xAC8]
	0x035353E4 BL 0x1C16CF4
	0x035353E8 ADRP X0, 0xBC6000
	0x035353EC LDR X0, [X0 + 0xE78]
	0x035353F0 BL 0x1C16CF4
	0x035353F4 ADRP X0, 0xBC6000
	0x035353F8 LDR X0, [X0 + 0xE80]
	0x035353FC BL 0x1C16CF4
	0x03535400 ADRP X0, 0xBC6000
	0x03535404 LDR X0, [X0 + 0xE88]
	0x03535408 BL 0x1C16CF4
	0x0353540C MOVZ W8, 0x1
	0x03535410 STRB W8, [X21 + 0xBF1]
	0x03535414 LDR W1, [X19 + 0x90]
	0x03535418 CBZ W1, 0x353542C
	0x0353541C CMP W1, 0xE
	0x03535420 B.EQ 0x3535554
	0x03535424 CMP W1, 0xD
	0x03535428 B.NE 0x3535568
	0x0353542C ADRP X8, 0xBBE000
	0x03535430 LDR X8, [X8 + 0xAC8]
	0x03535434 MOVZ W1, 0x6
	0x03535438 LDR X0, [X8]
	0x0353543C BL 0x1C16D6C
	0x03535440 CBZ X0, 0x35355B8
	0x03535444 LDR W8, [X0 + 0x18]
	0x03535448 MOV X21, X0
	0x0353544C CBZ W8, 0x35355B4
	0x03535450 ADRP X8, 0xBC6000
	0x03535454 LDR X8, [X8 + 0xE88]
	0x03535458 ADRP X9, 0xBFF000
	0x0353545C MOVN X10, 0x0
	0x03535460 ADD X0, X31, 0x38
	0x03535464 LDR X8, [X8]
	0x03535468 LDR X9, [X9 + 0xB50]
	0x0353546C MOV X1, X31
	0x03535470 STR X8, [X21 + 0x20]
	0x03535474 LDR X8, [X9]
	0x03535478 LDR W9, [X19 + 0x90]
	0x0353547C STP X8, X10, [X31 + 0x38]
	0x03535480 STR W9, [X31 + 0x48]
	0x03535484 BL 0x33B162C
	0x03535488 LDR W8, [X21 + 0x18]
	0x0353548C CMP W8, 0x1
	0x03535490 B.LS 0x35355B4
	0x03535494 CMP W8, 0x2
	0x03535498 STR X0, [X21 + 0x28]
	0x0353549C B.EQ 0x35355B4
	0x035354A0 ADRP X8, 0xBC6000
	0x035354A4 LDR X8, [X8 + 0xE78]
	0x035354A8 ADRP X22, 0xBFF000
	0x035354AC MOVN X10, 0x0
	0x035354B0 ADD X0, X31, 0x20
	0x035354B4 LDR X8, [X8]
	0x035354B8 LDR X22, [X22 + 0xB58]
	0x035354BC MOV X1, X31
	0x035354C0 STR X8, [X21 + 0x30]
	0x035354C4 LDR X8, [X22]
	0x035354C8 LDR W9, [X19 + 0xE0]
	0x035354CC STP X8, X10, [X31 + 0x20]
	0x035354D0 STR W9, [X31 + 0x30]
	0x035354D4 BL 0x33B162C
	0x035354D8 LDR W8, [X21 + 0x18]
	0x035354DC CMP W8, 0x3
	0x035354E0 B.LS 0x35355B4
	0x035354E4 CMP W8, 0x4
	0x035354E8 STR X0, [X21 + 0x38]
	0x035354EC B.EQ 0x35355B4
	0x035354F0 ADRP X8, 0xBC6000
	0x035354F4 LDR X8, [X8 + 0xE80]
	0x035354F8 MOVN X9, 0x0
	0x035354FC ADD X0, X31, 0x8
	0x03535500 MOV X1, X31
	0x03535504 LDR X8, [X8]
	0x03535508 STR X8, [X21 + 0x40]
	0x0353550C LDR X8, [X22]
	0x03535510 STR W20, [X31 + 0x18]
	0x03535514 STP X8, X9, [X31 + 0x8]
	0x03535518 BL 0x33B162C
	0x0353551C LDR W8, [X21 + 0x18]
	0x03535520 CMP W8, 0x5
	0x03535524 B.LS 0x35355B4
	0x03535528 STR X0, [X21 + 0x48]
	0x0353552C MOV X0, X21
	0x03535530 MOV X1, X31
	0x03535534 BL 0x32278CC
	0x03535538 LDR X8, [X19]
	0x0353553C MOV X2, X0
	0x03535540 MOVZ W1, 0x3
	0x03535544 MOV X0, X19
	0x03535548 LDR X9, [X8 + 0x218]
	0x0353554C LDR X3, [X8 + 0x220]
	0x03535550 BLR X9
	0x03535554 LDP X20, X19, [X31 + 0x70]
	0x03535558 LDP X22, X21, [X31 + 0x60]
	0x0353555C LDR X30, [X31 + 0x50]
	0x03535560 ADD X31, X31, 0x80
	0x03535564 RET
	0x03535568 LDR X8, [X19 + 0x98]
	0x0353556C MOVZ W9, 0xD
	0x03535570 STR W9, [X19 + 0x90]
	0x03535574 CBZ X8, 0x353558C
	0x03535578 LDR X9, [X8 + 0x18]
	0x0353557C LDR X0, [X8 + 0x40]
	0x03535580 LDR X3, [X8 + 0x28]
	0x03535584 MOVZ W2, 0xD
	0x03535588 BLR X9
	0x0353558C LDR X0, [X19 + 0x10]
	0x03535590 STR W20, [X19 + 0xE0]
	0x03535594 CBZ X0, 0x35355B8
	0x03535598 LDR X8, [X0]
	0x0353559C LDP X20, X19, [X31 + 0x70]
	0x035355A0 LDP X22, X21, [X31 + 0x60]
	0x035355A4 LDR X30, [X31 + 0x50]
	0x035355A8 LDP X2, X1, [X8 + 0x1B8]
	0x035355AC ADD X31, X31, 0x80
	0x035355B0 BR X2
	0x035355B4 BL 0x1C16F28
	0x035355B8 BL 0x1C16F20
	0x035355BC STR X30, [X31 - 0x20]!
	0x035355C0 STP X20, X19, [X31 + 0x10]
	0x035355C4 ADRP X19, 0xEAA000
	0x035355C8 ADRP X20, 0xBFF000
	0x035355CC LDRB W8, [X19 + 0xBC5]
	0x035355D0 LDR X20, [X20 + 0xB48]
	0x035355D4 TBNZ X8, 0x0, 0x35355EC
	0x035355D8 ADRP X0, 0xBFF000
	0x035355DC LDR X0, [X0 + 0xB48]
	0x035355E0 BL 0x1C16CF4
	0x035355E4 MOVZ W8, 0x1
	0x035355E8 STRB W8, [X19 + 0xBC5]
	0x035355EC LDR X8, [X20]
	0x035355F0 LDP X20, X19, [X31 + 0x10]
	0x035355F4 MOVZ W9, 0x1
	0x035355F8 LDR X8, [X8 + 0xB8]
	0x035355FC STRB W9, [X8]
	0x03535600 LDR X30, [X31], #0x20
	0x03535604 RET
	0x03535608 STP X30, X23, [X31 - 0x30]!
	0x0353560C STP X22, X21, [X31 + 0x10]
	0x03535610 STP X20, X19, [X31 + 0x20]
	0x03535614 ADRP X23, 0xEAA000
	0x03535618 ADRP X22, 0xBFF000
	0x0353561C LDRB W8, [X23 + 0xBC6]
	0x03535620 LDR X22, [X22 + 0xB48]
	0x03535624 MOV W20, W1
	0x03535628 MOV X19, X0
	0x0353562C AND W21, W1, 0x1
	0x03535630 TBNZ X8, 0x0, 0x3535654
	0x03535634 ADRP X0, 0xBFF000
	0x03535638 LDR X0, [X0 + 0xB48]
	0x0353563C BL 0x1C16CF4
	0x03535640 ADRP X0, 0xBC6000
	0x03535644 LDR X0, [X0 + 0xE90]
	0x03535648 BL 0x1C16CF4
	0x0353564C MOVZ W8, 0x1
	0x03535650 STRB W8, [X23 + 0xBC6]
	0x03535654 LDR X8, [X22]
	0x03535658 LDR X9, [X8 + 0xB8]
	0x0353565C ADRP X8, 0xBC6000
	0x03535660 LDR X8, [X8 + 0xE90]
	0x03535664 STRB W21, [X9 + 0x1]
	0x03535668 TBZ X20, 0x0, 0x3535690
	0x0353566C MOVZ W10, 0x1
	0x03535670 STRB W10, [X9 + 0x2]
	0x03535674 LDR X1, [X8]
	0x03535678 MOV X0, X19
	0x0353567C LDP X20, X19, [X31 + 0x20]
	0x03535680 LDP X22, X21, [X31 + 0x10]
	0x03535684 MOV X2, X31
	0x03535688 LDP X30, X23, [X31], #0x30
	0x0353568C B 0x3C36448
	0x03535690 LDR X1, [X8]
	0x03535694 MOV X0, X19
	0x03535698 LDP X20, X19, [X31 + 0x20]
	0x0353569C LDP X22, X21, [X31 + 0x10]
	0x035356A0 FMOV S0, 5
	0x035356A4 MOV X2, X31
	0x035356A8 LDP X30, X23, [X31], #0x30
	0x035356AC B 0x3C36264
	0x035356B0 STR X30, [X31 - 0x20]!
	0x035356B4 STP X20, X19, [X31 + 0x10]
	0x035356B8 ADRP X19, 0xEAA000
	0x035356BC ADRP X20, 0xBFF000
	0x035356C0 LDRB W8, [X19 + 0xBC7]
	0x035356C4 LDR X20, [X20 + 0xB48]
	0x035356C8 TBNZ X8, 0x0, 0x35356E0
	0x035356CC ADRP X0, 0xBFF000
	0x035356D0 LDR X0, [X0 + 0xB48]
	0x035356D4 BL 0x1C16CF4
	0x035356D8 MOVZ W8, 0x1
	0x035356DC STRB W8, [X19 + 0xBC7]
	0x035356E0 LDR X8, [X20]
	0x035356E4 LDP X20, X19, [X31 + 0x10]
	0x035356E8 LDR X8, [X8 + 0xB8]
	0x035356EC STRB W31, [X8 + 0x2]
	0x035356F0 LDR X30, [X31], #0x20
	0x035356F4 RET
	0x035356F8 STR X30, [X31 - 0x30]!
	0x035356FC STP X22, X21, [X31 + 0x10]
	0x03535700 STP X20, X19, [X31 + 0x20]
	0x03535704 ADRP X22, 0xEAA000
	0x03535708 ADRP X21, 0xBFF000
	0x0353570C LDRB W8, [X22 + 0xBC8]
	0x03535710 LDR X21, [X21 + 0xB48]
	0x03535714 MOV W20, W1
	0x03535718 MOV X19, X0
	0x0353571C TBNZ X8, 0x0, 0x3535740
	0x03535720 ADRP X0, 0xBFF000
	0x03535724 LDR X0, [X0 + 0xB48]
	0x03535728 BL 0x1C16CF4
	0x0353572C ADRP X0, 0xBC6000
	0x03535730 LDR X0, [X0 + 0xE98]
	0x03535734 BL 0x1C16CF4
	0x03535738 MOVZ W8, 0x1
	0x0353573C STRB W8, [X22 + 0xBC8]
	0x03535740 LDR X8, [X21]
	0x03535744 ORN W10, W31, W20, 0x0
	0x03535748 AND W10, W10, 0x1
	0x0353574C LDR X9, [X8 + 0xB8]
	0x03535750 ADRP X8, 0xBC6000
	0x03535754 LDR X8, [X8 + 0xE98]
	0x03535758 STRB W10, [X9 + 0x3]
	0x0353575C TBZ X20, 0x0, 0x3535780
	0x03535760 LDR X1, [X8]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X23, 0xEAB000
	015 Move X22, 0xBBF000
	016 Move X19, 0xC00000
	017 Move X20, 0xC00000
	018 Move X21, 0xBC7000
	019 Move W8, [X23+3004]
	020 Move X22, [X22+1560]
	021 Move X19, [X19+2776]
	022 Move X20, [X20+2784]
	023 Move X21, [X21+2392]
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {81}
	028 Move X0, 0xC00000
	029 Move X0, [X0+2432]
	030 Call 0x1C17CF4
	031 Move X0, 0xBBF000
	032 Move X0, [X0+2904]
	033 Call 0x1C17CF4
	034 Move X0, 0xBBF000
	035 Move X0, [X0+1560]
	036 Call 0x1C17CF4
	037 Move X0, 0xBC7000
	038 Move X0, [X0+2392]
	039 Call 0x1C17CF4
	040 Move X0, 0xBC6000
	041 Move X0, [X0+744]
	042 Call 0x1C17CF4
	043 Move X0, 0xC00000
	044 Move X0, [X0+2784]
	045 Call 0x1C17CF4
	046 Move X0, 0xC00000
	047 Move X0, [X0+2776]
	048 Call 0x1C17CF4
	049 Move X0, 0xBC0000
	050 Move X0, [X0+4064]
	051 Call 0x1C17CF4
	052 Move X0, 0xC00000
	053 Move X0, [X0+2792]
	054 Call 0x1C17CF4
	055 Move X0, 0xC00000
	056 Move X0, [X0+2800]
	057 Call 0x1C17CF4
	058 Move X0, 0xC00000
	059 Move X0, [X0+2808]
	060 Call 0x1C17CF4
	061 Move X0, 0xC00000
	062 Move X0, [X0+2816]
	063 Call 0x1C17CF4
	064 Move X0, 0xBBF000
	065 Move X0, [X0+2104]
	066 Call 0x1C17CF4
	067 Move X0, 0xC00000
	068 Move X0, [X0+2824]
	069 Call 0x1C17CF4
	070 Move X0, 0xC00000
	071 Move X0, [X0+2832]
	072 Call 0x1C17CF4
	073 Move X0, 0xC00000
	074 Move X0, [X0+2840]
	075 Call 0x1C17CF4
	076 Move X0, 0xC00000
	077 Move X0, [X0+2848]
	078 Call 0x1C17CF4
	079 Move W8, 1
	080 Move [X23+3004], W8
	081 Move X0, [X22]
	082 Move X28, 0xC00000
	083 Move X28, [X28+2832]
	084 Move W1, 65
	085 Move [X31+4], W31
	086 Call 0x1C17D6C
	087 Move X1, [X19]
	088 Move X2, X31
	089 Move X19, X0
	090 Call RuntimeHelpers.InitializeArray, X0, X1
	091 Move X0, [X22]
	092 Move W1, 65
	093 Call 0x1C17D6C
	094 Move X1, [X20]
	095 Move X2, X31
	096 Call RuntimeHelpers.InitializeArray, X0, X1
	097 Move X0, [X21]
	098 Move W8, [X0+224]
	099 Compare W8, 0
	100 JumpIfNotEqual {102}
	101 Call 0x1C17DFC
	102 Move X23, 0xC00000
	103 Move X27, 0xBBF000
	104 Move X26, 0xC00000
	105 Move X25, 0xC00000
	106 Move X29, 0xBC0000
	107 Move X24, 0xBBF000
	108 Move X23, [X23+2432]
	109 Move X27, [X27+2104]
	110 Move X26, [X26+2816]
	111 Move X25, [X25+2808]
	112 Move X29, [X29+4064]
	113 Move X24, [X24+2904]
	114 Move X0, [X28]
	115 Move X1, X31
	116 Call Console.WriteLine, X0
	117 Move W22, W31
	118 Move W28, 100
	119 Move [X31+8], X31
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move X0, [X21]
	122 Move W8, [X0+224]
	123 Compare W8, 0
	124 JumpIfNotEqual {126}
	125 Call 0x1C17DFC
	126 Move X0, X31
	127 Call Console.WriteLine
	128 Move W22, [X31+8]
	129 Add W28, W28, 100
	130 Move X0, [X23]
	131 Call 0x1C17F10
	132 Subtract W8, W31, W22
	133 Move X1, W8
	134 Move X20, X0
	135 Call BigInteger..ctor, X0, X1
	136 Compare X20, 0
	137 JumpIfEqual {335}
	138 Move X0, X20
	139 Call BigInteger.isProbablePrime, X0
	140 Move TEMP, X0
	141 And TEMP, TEMP, 1
	142 Compare TEMP, 1
	143 JumpIfNotEqual {163}
	144 Add X0, X31, 8
	145 Move X1, X31
	146 Call Int32.ToString, X0
	147 Move X1, [X27]
	148 Move X2, X31
	149 Call String.Concat, X0, X1
	150 Move X8, [X21]
	151 Move X20, X0
	152 Move W9, [X8+224]
	153 Compare W9, 0
	154 JumpIfNotEqual {157}
	155 Move X0, X8
	156 Call 0x1C17DFC
	157 Move X0, X20
	158 Move X1, X31
	159 Call Console.Write, X0
	160 Move W8, [X31+12]
	161 Add W8, W8, 1
	162 Move [X31+12], W8
	163 Move W8, [X31+8]
	164 Add W22, W8, 1
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Move [X31+8], W22
	167 Add X0, X31, 12
	168 Move X1, X31
	169 Call Int32.ToString, X0
	170 Move X8, [X26]
	171 Move X1, X0
	172 Move X2, X31
	173 Move X0, X8
	174 Call String.Concat, X0, X1
	175 Move X8, [X21]
	176 Move X20, X0
	177 Move W9, [X8+224]
	178 Compare W9, 0
	179 JumpIfNotEqual {182}
	180 Move X0, X8
	181 Call 0x1C17DFC
	182 Move X0, X20
	183 Move X1, X31
	184 Call Console.WriteLine, X0
	185 Move X0, [X23]
	186 Call 0x1C17F10
	187 Move X1, X19
	188 Move X20, X0
	189 Call BigInteger..ctor, X0, X1
	190 Compare X20, 0
	191 JumpIfEqual {335}
	192 Move X8, [X20]
	193 Move X0, X20
	194 Move X9, [X8+360]
	195 Move X1, [X8+368]
	196 NotImplemented "Instruction BLR not yet implemented."
	197 Move X8, [X25]
	198 Move X2, [X29]
	199 Move X1, X0
	200 Move X3, X31
	201 Move X0, X8
	202 Call String.Concat, X0, X1, X2
	203 Move X1, X31
	204 Call Console.WriteLine, X0
	205 Move W1, 5
	206 Move X0, X20
	207 Call BigInteger.SolovayStrassenTest, X0, X1
	208 Move X8, [X24]
	209 And W9, W0, 1
	210 Move [X31+4], W9
	211 Move W9, [X8+224]
	212 Compare W9, 0
	213 JumpIfNotEqual {216}
	214 Move X0, X8
	215 Call 0x1C17DFC
	216 Add X0, X31, 4
	217 Move X1, X31
	218 Call Boolean.ToString, X0
	219 Move X8, 0xC00000
	220 Move X8, [X8+2792]
	221 Move X1, X0
	222 Move X2, X31
	223 Move X8, [X8]
	224 Move X0, X8
	225 Call String.Concat, X0, X1
	226 Move X1, X31
	227 Call Console.WriteLine, X0
	228 Move W1, 5
	229 Move X0, X20
	230 Call BigInteger.RabinMillerTest, X0, X1
	231 And W8, W0, 1
	232 Add X0, X31, 4
	233 Move X1, X31
	234 Move [X31+4], W8
	235 Call Boolean.ToString, X0
	236 Move X8, 0xC00000
	237 Move X8, [X8+2824]
	238 Move X1, X0
	239 Move X2, X31
	240 Move X8, [X8]
	241 Move X0, X8
	242 Call String.Concat, X0, X1
	243 Move X1, X31
	244 Call Console.WriteLine, X0
	245 Move W1, 5
	246 Move X0, X20
	247 Call BigInteger.FermatLittleTest, X0, X1
	248 And W8, W0, 1
	249 Add X0, X31, 4
	250 Move X1, X31
	251 Move [X31+4], W8
	252 Call Boolean.ToString, X0
	253 Move X8, 0xC00000
	254 Move X8, [X8+2840]
	255 Move X1, X0
	256 Move X2, X31
	257 Move X8, [X8]
	258 Move X0, X8
	259 Call String.Concat, X0, X1
	260 Move X1, X31
	261 Call Console.WriteLine, X0
	262 Move X0, X20
	263 Call BigInteger.isProbablePrime, X0
	264 And W8, W0, 1
	265 Add X0, X31, 4
	266 Move X1, X31
	267 Move [X31+4], W8
	268 Call Boolean.ToString, X0
	269 Move X8, 0xC00000
	270 Move X8, [X8+2800]
	271 Move X1, X0
	272 Move X2, X31
	273 Move X8, [X8]
	274 Move X0, X8
	275 Call String.Concat, X0, X1
	276 Move X1, X31
	277 Call Console.WriteLine, X0
	278 Move X8, 0xC00000
	279 Move X8, [X8+2848]
	280 Move X1, X31
	281 Move X0, [X8]
	282 Call Console.Write, X0
	283 Move X8, 0xBC6000
	284 Move X8, [X8+744]
	285 Move X0, [X8]
	286 Call 0x1C17F10
	287 Move X1, X31
	288 Move X19, X0
	289 Call Random..ctor, X0
	290 Move X0, [X23]
	291 Move W8, [X0+224]
	292 Compare W8, 0
	293 JumpIfNotEqual {295}
	294 Call 0x1C17DFC
	295 Move W0, 512
	296 Move W1, 5
	297 Move X2, X19
	298 Call BigInteger.genPseudoPrime, X0, X1, X2
	299 Move X19, [X29]
	300 Compare X0, 0
	301 JumpIfEqual {307}
	302 Move X8, [X0]
	303 Move X9, [X8+360]
	304 Move X1, [X8+368]
	305 NotImplemented "Instruction BLR not yet implemented."
	306 Move X1, X0
	307 Move X1, X31
	308 Move X0, X19
	309 Move X2, X31
	310 Call String.Concat, X0, X1
	311 Move X8, [X21]
	312 Move X19, X0
	313 Move W9, [X8+224]
	314 Compare W9, 0
	315 JumpIfNotEqual {318}
	316 Move X0, X8
	317 Call 0x1C17DFC
	318 Move X0, X19
	319 Move X1, X31
	320 Call Console.WriteLine, X0
	321 Move X20, [X31+96]
	322 Move X19, [X31+104]
	323 Move X22, [X31+80]
	324 Move X21, [X31+88]
	325 Move X24, [X31+64]
	326 Move X23, [X31+72]
	327 Move X26, [X31+48]
	328 Move X25, [X31+56]
	329 Move X28, [X31+32]
	330 Move X27, [X31+40]
	331 Move X29, [X31+16]
	332 Move X30, [X31+24]
	333 Add X31, X31, 112
	334 Return 
	335 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x03535764 MOV X0, X19
	0x03535768 LDP X20, X19, [X31 + 0x20]
	0x0353576C LDP X22, X21, [X31 + 0x10]
	0x03535770 FMOV S0, 5
	0x03535774 MOV X2, X31
	0x03535778 LDR X30, [X31], #0x30
	0x0353577C B 0x3C36264
	0x03535780 MOVZ W10, 0x1
	0x03535784 STRB W10, [X9 + 0x4]
	0x03535788 LDR X1, [X8]
	0x0353578C MOV X0, X19
	0x03535790 LDP X20, X19, [X31 + 0x20]
	0x03535794 LDP X22, X21, [X31 + 0x10]
	0x03535798 MOV X2, X31
	0x0353579C LDR X30, [X31], #0x30
	0x035357A0 B 0x3C36448
	0x035357A4 STR X30, [X31 - 0x20]!
	0x035357A8 STP X20, X19, [X31 + 0x10]
	0x035357AC ADRP X19, 0xEAA000
	0x035357B0 ADRP X20, 0xBFF000
	0x035357B4 LDRB W8, [X19 + 0xBC9]
	0x035357B8 LDR X20, [X20 + 0xB48]
	0x035357BC TBNZ X8, 0x0, 0x35357D4
	0x035357C0 ADRP X0, 0xBFF000
	0x035357C4 LDR X0, [X0 + 0xB48]
	0x035357C8 BL 0x1C16CF4
	0x035357CC MOVZ W8, 0x1
	0x035357D0 STRB W8, [X19 + 0xBC9]
	0x035357D4 LDR X8, [X20]
	0x035357D8 LDP X20, X19, [X31 + 0x10]
	0x035357DC LDR X8, [X8 + 0xB8]
	0x035357E0 STRB W31, [X8 + 0x4]
	0x035357E4 LDR X30, [X31], #0x20
	0x035357E8 RET
	0x035357EC STR X30, [X31 - 0x20]!
	0x035357F0 STP X20, X19, [X31 + 0x10]
	0x035357F4 ADRP X19, 0xEAA000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xEAB000
	007 Move X22, 0xBC0000
	008 Move X19, 0xC00000
	009 Move X20, 0xC00000
	010 Move W8, [X21+3005]
	011 Move X22, [X22+3672]
	012 Move X19, [X19+2856]
	013 Move X20, [X20+2432]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0xC00000
	019 Move X0, [X0+2432]
	020 Call 0x1C17CF4
	021 Move X0, 0xBC0000
	022 Move X0, [X0+3672]
	023 Call 0x1C17CF4
	024 Move X0, 0xC00000
	025 Move X0, [X0+2856]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+3005], W8
	029 Move X0, [X22]
	030 Move W1, 303
	031 Call 0x1C17D6C
	032 Move X1, [X19]
	033 Move X2, X31
	034 Move X19, X0
	035 Call RuntimeHelpers.InitializeArray, X0, X1
	036 Move X8, [X20]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X8, [X8+184]
	040 Move [X8], X19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X30, [X31+48]
	044 Return 

