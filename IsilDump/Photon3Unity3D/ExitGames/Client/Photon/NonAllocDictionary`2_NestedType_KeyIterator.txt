Type: ExitGames.Client.Photon.NonAllocDictionary`2/KeyIterator

Method: System.Void .ctor(ExitGames.Client.Photon.NonAllocDictionary`2<K, V> dictionary)

Disassembly:
	0x02EDB504 MOV X20, X0
	0x02EDB508 ADRP X0, 0x1244000
	0x02EDB50C LDR X0, [X0 + 0xD8]

ISIL:
	001 Move [X0], W31
	002 Move [X0+8], X1
	003 Return 

Method: ExitGames.Client.Photon.NonAllocDictionary`2/KeyIterator<K, V> GetEnumerator()

Disassembly:
	0x02EDB510 BL 0x1C16D08
	0x02EDB514 MOV X1, X0
	0x02EDB518 MOV X0, X20

ISIL:
	001 Move X8, [X0]
	002 Move X1, [X0+8]
	003 Move X0, X8
	004 Return X0

Method: System.Void Reset()

Disassembly:
	0x02EDB51C MOV X2, X31
	0x02EDB520 BL 0x3379A44

ISIL:
	001 Move [X0], W31
	002 Return 

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x02EDB524 MOV X0, X20
	0x02EDB528 MOV X1, X19
	0x02EDB52C BL 0x1C16DEC
	0x02EDB530 STR X30, [X31 - 0x20]!
	0x02EDB534 STP X20, X19, [X31 + 0x10]
	0x02EDB538 LDR X9, [X1 + 0x20]
	0x02EDB53C MOV X8, X0
	0x02EDB540 LDR X20, [X8 + 0x10]
	0x02EDB544 MOV X19, X1
	0x02EDB548 LDR X9, [X9 + 0xC0]
	0x02EDB54C LDR X0, [X9 + 0x38]
	0x02EDB550 LDRB W9, [X0 + 0x135]
	0x02EDB554 TBNZ X9, 0x0, 0x2EDB55C
	0x02EDB558 BL 0x1C5C684
	0x02EDB55C BL 0x1C16F10
	0x02EDB560 LDR X8, [X19 + 0x20]
	0x02EDB564 MOV X1, X20
	0x02EDB568 MOV X19, X0
	0x02EDB56C LDR X8, [X8 + 0xC0]
	0x02EDB570 LDR X2, [X8 + 0x40]
	0x02EDB574 BL 0x25EB3B8
	0x02EDB578 MOV X0, X19
	0x02EDB57C LDP X20, X19, [X31 + 0x10]
	0x02EDB580 LDR X30, [X31], #0x20
	0x02EDB584 RET
	0x02EDB588 STR X30, [X31 - 0x20]!
	0x02EDB58C STP X20, X19, [X31 + 0x10]
	0x02EDB590 LDR X9, [X1 + 0x20]
	0x02EDB594 MOV X8, X0
	0x02EDB598 LDR X20, [X8 + 0x10]
	0x02EDB59C MOV X19, X1
	0x02EDB5A0 LDR X9, [X9 + 0xC0]
	0x02EDB5A4 LDR X0, [X9 + 0x38]
	0x02EDB5A8 LDRB W9, [X0 + 0x135]
	0x02EDB5AC TBNZ X9, 0x0, 0x2EDB5B4
	0x02EDB5B0 BL 0x1C5C684
	0x02EDB5B4 BL 0x1C16F10
	0x02EDB5B8 LDR X8, [X19 + 0x20]
	0x02EDB5BC MOV X1, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 NotImplemented "Instruction LDRSW not yet implemented."
	005 Compare W8, 0
	006 JumpIfEqual {35}
	007 Move X9, [X0+8]
	008 Compare X9, 0
	009 JumpIfEqual {34}
	010 Move X9, [X9+40]
	011 Compare X9, 0
	012 JumpIfEqual {34}
	013 Move W10, [X9+24]
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Move W10, 24
	016 NotImplemented "Instruction MADD not yet implemented."
	017 Move W8, [X8+44]
	018 Move [X31+12], W8
	019 Move X0, [X1+32]
	020 Move W8, [X0+309]
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {26}
	025 Call 0x1C5D684
	026 Move X8, [X0+192]
	027 Add X1, X31, 12
	028 Move X0, [X8+32]
	029 Call 0x1C17E04
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Return X0
	034 Call 0x1C17F20
	035 Move X0, 0x1219000
	036 Move X0, [X0+1456]
	037 Move X19, X1
	038 Call 0x1C17D08
	039 Call 0x1C17F10
	040 Move X1, X31
	041 Move X20, X0
	042 Call InvalidOperationException..ctor, X0
	043 Move X0, X20
	044 Move X1, X19
	045 Call 0x1C17DEC
	046 Call 0x1C17F28

Method: K get_Current()

Disassembly:
	0x02EDB5C0 MOV X19, X0
	0x02EDB5C4 LDR X8, [X8 + 0xC0]
	0x02EDB5C8 LDR X2, [X8 + 0x40]
	0x02EDB5CC BL 0x25EB3B8
	0x02EDB5D0 MOV X0, X19
	0x02EDB5D4 LDP X20, X19, [X31 + 0x10]
	0x02EDB5D8 LDR X30, [X31], #0x20
	0x02EDB5DC RET
	0x02EDB5E0 STR X30, [X31 - 0x10]!
	0x02EDB5E4 LDR X8, [X0 + 0x10]
	0x02EDB5E8 CBZ X8, 0x2EDB620
	0x02EDB5EC LDR X9, [X2 + 0x20]
	0x02EDB5F0 LDR X0, [X8 + 0x10]
	0x02EDB5F4 LDR W2, [X8 + 0x20]
	0x02EDB5F8 LDR X4, [X8 + 0x28]
	0x02EDB5FC LDR X9, [X9 + 0xC0]
	0x02EDB600 MOV W3, W1
	0x02EDB604 MOV W1, W31
	0x02EDB608 LDR X5, [X9 + 0x58]

ISIL:
	001 Move [X31-16], X30
	002 NotImplemented "Instruction LDRSW not yet implemented."
	003 Compare W8, 0
	004 JumpIfEqual {16}
	005 Move X9, [X0+8]
	006 Compare X9, 0
	007 JumpIfEqual {19}
	008 Move X9, [X9+40]
	009 Compare X9, 0
	010 JumpIfEqual {19}
	011 Move W10, [X9+24]
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W10, 24
	014 NotImplemented "Instruction MADD not yet implemented."
	015 Move W0, [X8+44]
	016 Move W0, W31
	017 Move X30, [X31+16]
	018 Return X0
	019 Call 0x1C17F20
	020 Call 0x1C17F28

Method: System.Boolean MoveNext()

Disassembly:
	0x02EDB60C BL 0x22D22F8
	0x02EDB610 CMP W0, 0x0
	0x02EDB614 CSINV W0, W0, W31, GE
	0x02EDB618 LDR X30, [X31], #0x10
	0x02EDB61C RET
	0x02EDB620 BL 0x1C16F20
	0x02EDB624 STR X30, [X31 - 0x20]!
	0x02EDB628 STP X20, X19, [X31 + 0x10]
	0x02EDB62C ADRP X0, 0x1218000
	0x02EDB630 LDR X0, [X0 + 0xB40]
	0x02EDB634 MOV X19, X2
	0x02EDB638 BL 0x1C16D08
	0x02EDB63C BL 0x1C16F10
	0x02EDB640 MOV X20, X0
	0x02EDB644 ADRP X0, 0x1242000
	0x02EDB648 LDR X0, [X0 + 0xE38]
	0x02EDB64C BL 0x1C16D08
	0x02EDB650 MOV X1, X0
	0x02EDB654 MOV X0, X20
	0x02EDB658 MOV X2, X31
	0x02EDB65C BL 0x3379A44
	0x02EDB660 MOV X0, X20
	0x02EDB664 MOV X1, X19
	0x02EDB668 BL 0x1C16DEC
	0x02EDB66C STR X30, [X31 - 0x20]!
	0x02EDB670 STP X20, X19, [X31 + 0x10]
	0x02EDB674 ADRP X0, 0x1218000
	0x02EDB678 LDR X0, [X0 + 0xB40]
	0x02EDB67C MOV X19, X2
	0x02EDB680 BL 0x1C16D08
	0x02EDB684 BL 0x1C16F10
	0x02EDB688 MOV X20, X0
	0x02EDB68C ADRP X0, 0x1242000
	0x02EDB690 LDR X0, [X0 + 0xE38]
	0x02EDB694 BL 0x1C16D08

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+8]
	003 Move W10, [X0]
	004 Move W11, 24
	005 Add W9, W10, 1
	006 Compare X8, 0
	007 JumpIfEqual {28}
	008 Move W12, [X8+24]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X13, [X8+40]
	011 Compare X13, 0
	012 JumpIfEqual {30}
	013 Move W14, [X13+24]
	014 NotImplemented "Instruction CMP not yet implemented."
	015 NotImplemented "Instruction SMADDL not yet implemented."
	016 Move W14, [X10+32]
	017 Move W10, W9
	018 Move W13, W9
	019 Compare W14, 0
	020 JumpIfEqual {5}
	021 Move W13, W31
	022 NotImplemented "Instruction CMP not yet implemented."
	023 NotImplemented "Instruction CSET not yet implemented."
	024 Move [X0], W13
	025 Move W0, W8
	026 Move X30, [X31+16]
	027 Return X0
	028 Move [X0], W9
	029 Call 0x1C17F20
	030 Add W8, W10, 1
	031 Move [X0], W8
	032 Call 0x1C17F20
	033 Add W8, W10, 1
	034 Move [X0], W8
	035 Call 0x1C17F28

Method: System.Void Dispose()

Disassembly:
	0x02EDB698 MOV X1, X0

ISIL:
	001 Return 

