Type: ExitGames.Client.Photon.StructWrapping.StructWrapper`1

Method: ExitGames.Client.Photon.StructWrapping.StructWrapperPool`1<T> get_ReturnPool()

Disassembly:
	0x0266884C MOV X20, X0
	0x02668850 LDRB W9, [X8 + 0x135]

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_ReturnPool(ExitGames.Client.Photon.StructWrapping.StructWrapperPool`1<T> value)

Disassembly:
	0x02668854 TBNZ X9, 0x0, 0x2668864
	0x02668858 MOV X0, X8

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.Void .ctor(ExitGames.Client.Photon.StructWrapping.Pooling releasing)

Disassembly:
	0x0266885C BL 0x1C5C684
	0x02668860 MOV X8, X0
	0x02668864 LDR X8, [X8 + 0xC0]
	0x02668868 MOVZ W1, 0x1
	0x0266886C MOV X0, X20
	0x02668870 LDR X2, [X8 + 0x58]
	0x02668874 BL 0x2665F00
	0x02668878 LDR X0, [X19 + 0x20]
	0x0266887C LDRB W8, [X0 + 0x135]
	0x02668880 TBNZ X8, 0x0, 0x2668888
	0x02668884 BL 0x1C5C684
	0x02668888 LDR X8, [X0 + 0xC0]
	0x0266888C LDR X0, [X8 + 0x48]
	0x02668890 LDRB W8, [X0 + 0x135]
	0x02668894 TBNZ X8, 0x0, 0x266889C
	0x02668898 BL 0x1C5C684
	0x0266889C LDR X8, [X0 + 0xB8]
	0x026688A0 STR X20, [X8]
	0x026688A4 LDR X0, [X19 + 0x20]
	0x026688A8 LDRB W8, [X0 + 0x135]
	0x026688AC TBNZ X8, 0x0, 0x26688B4
	0x026688B0 BL 0x1C5C684
	0x026688B4 LDR X8, [X0 + 0xC0]
	0x026688B8 LDR X0, [X8 + 0x48]
	0x026688BC LDRB W8, [X0 + 0x135]
	0x026688C0 TBNZ X8, 0x0, 0x26688D0
	0x026688C4 LDP X20, X19, [X31 + 0x10]
	0x026688C8 LDR X30, [X31], #0x20
	0x026688CC B 0x1C5C684
	0x026688D0 LDP X20, X19, [X31 + 0x10]
	0x026688D4 LDR X30, [X31], #0x20
	0x026688D8 RET
	0x026688DC LDR X0, [X0 + 0x20]
	0x026688E0 RET
	0x026688E4 STR X1, [X0 + 0x20]
	0x026688E8 RET
	0x026688EC STP X30, X23, [X31 - 0x30]!
	0x026688F0 STP X22, X21, [X31 + 0x10]
	0x026688F4 STP X20, X19, [X31 + 0x20]
	0x026688F8 ADRP X23, 0x1D72000
	0x026688FC ADRP X22, 0x1A8B000
	0x02668900 LDRB W8, [X23 + 0x1F9]
	0x02668904 LDR X22, [X22 + 0x6C0]
	0x02668908 MOV X21, X2
	0x0266890C MOV W19, W1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x1D73000
	008 Move X22, 0x1A8C000
	009 Move W8, [X23+498]
	010 Move X22, [X22+1728]
	011 Move X21, X2
	012 Move W19, W1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x1A8C000
	019 Move X0, [X0+1728]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+498], W8
	023 Move X8, [X21+32]
	024 Move X0, [X22]
	025 Move X8, [X8+192]
	026 Move W9, [X0+224]
	027 Move X22, [X8+16]
	028 Compare W9, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X22
	032 Move X1, X31
	033 Call Type.GetTypeFromHandle, X0
	034 Move X8, [X21+32]
	035 Move X21, X0
	036 Move X1, X31
	037 Move X8, [X8+192]
	038 Move X8, [X8+16]
	039 Move X0, X8
	040 Call Type.GetTypeFromHandle, X0
	041 Move X1, X31
	042 Call StructWrapperPool.GetWrappedType, X0
	043 Move W2, W0
	044 Move X0, X20
	045 Move X1, X21
	046 Move X3, X31
	047 Call StructWrapper..ctor, X0, X1, X2
	048 Move [X20+40], W19
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Move X23, [X31+56]
	055 Return 

Method: System.Void .ctor(ExitGames.Client.Photon.StructWrapping.Pooling releasing, System.Type tType, ExitGames.Client.Photon.StructWrapping.WrappedType wType)

Disassembly:
	0x02668910 MOV X20, X0
	0x02668914 TBNZ X8, 0x0, 0x266892C
	0x02668918 ADRP X0, 0x1A8B000
	0x0266891C LDR X0, [X0 + 0x6C0]
	0x02668920 BL 0x1C16CF4
	0x02668924 MOVZ W8, 0x1
	0x02668928 STRB W8, [X23 + 0x1F9]
	0x0266892C LDR X8, [X21 + 0x20]
	0x02668930 LDR X0, [X22]
	0x02668934 LDR X8, [X8 + 0xC0]
	0x02668938 LDR W9, [X0 + 0xE0]
	0x0266893C LDR X22, [X8 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X2
	006 Move W2, W3
	007 Move X3, X31
	008 Move X20, X0
	009 Call StructWrapper..ctor, X0, X1, X2
	010 Move [X20+40], W19
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]
	014 Return 

Method: ExitGames.Client.Photon.StructWrapping.StructWrapper`1<T> Poke(System.Byte value)

Disassembly:
	0x02668940 CBNZ W9, 0x2668948
	0x02668944 BL 0x1C16DFC
	0x02668948 MOV X0, X22
	0x0266894C MOV X1, X31
	0x02668950 BL 0x338C698
	0x02668954 LDR X8, [X21 + 0x20]
	0x02668958 MOV X21, X0
	0x0266895C MOV X1, X31
	0x02668960 LDR X8, [X8 + 0xC0]
	0x02668964 LDR X8, [X8 + 0x10]
	0x02668968 MOV X0, X8
	0x0266896C BL 0x338C698
	0x02668970 MOV X1, X31
	0x02668974 BL 0x3525310
	0x02668978 MOV W2, W0
	0x0266897C MOV X0, X20
	0x02668980 MOV X1, X21
	0x02668984 MOV X3, X31
	0x02668988 BL 0x3524A84
	0x0266898C STR W19, [X20 + 0x28]
	0x02668990 LDP X20, X19, [X31 + 0x20]
	0x02668994 LDP X22, X21, [X31 + 0x10]
	0x02668998 LDP X30, X23, [X31], #0x30
	0x0266899C RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+40]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X20, [X31+16]
	007 Move X19, [X31+24]
	008 Move X30, [X31+32]
	009 Return X0
	010 Move X0, 0x1A8C000
	011 Move X0, [X0+1456]
	012 Move X19, X2
	013 Call 0x1C17D08
	014 Call 0x1C17F10
	015 Move X20, X0
	016 Move X0, 0x1AB6000
	017 Move X0, [X0+1512]
	018 Call 0x1C17D08
	019 Move X1, X0
	020 Move X0, X20
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, X20
	024 Move X1, X19
	025 Call 0x1C17DEC

Method: ExitGames.Client.Photon.StructWrapping.StructWrapper`1<T> Poke(System.Boolean value)

Disassembly:
	0x026689A0 STR X30, [X31 - 0x20]!
	0x026689A4 STP X20, X19, [X31 + 0x10]
	0x026689A8 MOV W19, W1
	0x026689AC MOV X1, X2
	0x026689B0 MOV W2, W3
	0x026689B4 MOV X3, X31
	0x026689B8 MOV X20, X0
	0x026689BC BL 0x3524A84
	0x026689C0 STR W19, [X20 + 0x28]
	0x026689C4 LDP X20, X19, [X31 + 0x10]
	0x026689C8 LDR X30, [X31], #0x20
	0x026689CC RET
	0x026689D0 STR X30, [X31 - 0x20]!
	0x026689D4 STP X20, X19, [X31 + 0x10]
	0x026689D8 LDR W8, [X0 + 0x28]
	0x026689DC CMP W8, 0x4
	0x026689E0 B.EQ 0x26689F0
	0x026689E4 LDP X20, X19, [X31 + 0x10]
	0x026689E8 LDR X30, [X31], #0x20
	0x026689EC RET
	0x026689F0 ADRP X0, 0x1A8B000
	0x026689F4 LDR X0, [X0 + 0x5B0]
	0x026689F8 MOV X19, X2
	0x026689FC BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+40]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X20, [X31+16]
	007 Move X19, [X31+24]
	008 Move X30, [X31+32]
	009 Return X0
	010 Move X0, 0x1A8C000
	011 Move X0, [X0+1456]
	012 Move X19, X2
	013 Call 0x1C17D08
	014 Call 0x1C17F10
	015 Move X20, X0
	016 Move X0, 0x1AB6000
	017 Move X0, [X0+1520]
	018 Call 0x1C17D08
	019 Move X1, X0
	020 Move X0, X20
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, X20
	024 Move X1, X19
	025 Call 0x1C17DEC

Method: ExitGames.Client.Photon.StructWrapping.StructWrapper`1<T> Poke(T value)

Disassembly:
	0x02668A00 BL 0x1C16F10
	0x02668A04 MOV X20, X0
	0x02668A08 ADRP X0, 0x1AB5000

ISIL:
	001 And W8, W1, 1
	002 Move [X0+44], W8
	003 Return X0

Method: T Unwrap()

Disassembly:
	0x02668A0C LDR X0, [X0 + 0x5E8]
	0x02668A10 BL 0x1C16D08
	0x02668A14 MOV X1, X0
	0x02668A18 MOV X0, X20
	0x02668A1C MOV X2, X31
	0x02668A20 BL 0x337DF1C
	0x02668A24 MOV X0, X20
	0x02668A28 MOV X1, X19
	0x02668A2C BL 0x1C16DEC
	0x02668A30 STR X30, [X31 - 0x20]!
	0x02668A34 STP X20, X19, [X31 + 0x10]
	0x02668A38 LDR W8, [X0 + 0x28]
	0x02668A3C CMP W8, 0x4
	0x02668A40 B.EQ 0x2668A50
	0x02668A44 LDP X20, X19, [X31 + 0x10]
	0x02668A48 LDR X30, [X31], #0x20
	0x02668A4C RET
	0x02668A50 ADRP X0, 0x1A8B000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W9, [X0+40]
	004 Move W19, [X0+44]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X8, X0
	007 Move X0, [X0+32]
	008 Compare X0, 0
	009 JumpIfEqual {20}
	010 Move X9, [X1+32]
	011 Move X1, X8
	012 Move X9, [X9+192]
	013 Move X2, [X9+40]
	014 Call 0x2666C80, X0, X1
	015 NotImplemented "Instruction CMP not yet implemented."
	016 NotImplemented "Instruction CSET not yet implemented."
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Return X0
	020 Call 0x1C17F20

Method: T Peek()

Disassembly:
	0x02668A54 LDR X0, [X0 + 0x5B0]
	0x02668A58 MOV X19, X2

ISIL:
	001 Move W0, [X0+44]
	002 Return X0

Method: System.Object Box()

Disassembly:
	0x02668A5C BL 0x1C16D08
	0x02668A60 BL 0x1C16F10
	0x02668A64 MOV X20, X0
	0x02668A68 ADRP X0, 0x1AB5000
	0x02668A6C LDR X0, [X0 + 0x5F0]
	0x02668A70 BL 0x1C16D08
	0x02668A74 MOV X1, X0
	0x02668A78 MOV X0, X20
	0x02668A7C MOV X2, X31
	0x02668A80 BL 0x337DF1C
	0x02668A84 MOV X0, X20
	0x02668A88 MOV X1, X19
	0x02668A8C BL 0x1C16DEC
	0x02668A90 STRH W1, [X0 + 0x2C]
	0x02668A94 RET
	0x02668A98 STP X30, X19, [X31 - 0x10]!
	0x02668A9C LDR W9, [X0 + 0x28]
	0x02668AA0 LDRH W19, [X0 + 0x2C]
	0x02668AA4 CMP W9, 0x4
	0x02668AA8 B.EQ 0x2668ACC
	0x02668AAC MOV X8, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, X0
	005 Move X0, [X0+32]
	006 Move W20, [X8+44]
	007 Move X19, X1
	008 Compare X0, 0
	009 JumpIfEqual {15}
	010 Move X9, [X19+32]
	011 Move X1, X8
	012 Move X9, [X9+192]
	013 Move X2, [X9+40]
	014 Call 0x2666C80, X0, X1
	015 Move [X31+12], W20
	016 Move X8, [X19+32]
	017 Add X1, X31, 12
	018 Move X8, [X8+192]
	019 Move X0, [X8+24]
	020 Call 0x1C17E04
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0

Method: System.Void Dispose()

Disassembly:
	0x02668AB0 LDR X0, [X0 + 0x20]
	0x02668AB4 CBZ X0, 0x2668AD8
	0x02668AB8 LDR X9, [X1 + 0x20]
	0x02668ABC MOV X1, X8
	0x02668AC0 LDR X9, [X9 + 0xC0]
	0x02668AC4 LDR X2, [X9 + 0x28]
	0x02668AC8 BL 0x266636C
	0x02668ACC MOV W0, W19
	0x02668AD0 LDP X30, X19, [X31], #0x10
	0x02668AD4 RET
	0x02668AD8 BL 0x1C16F20

ISIL:
	001 Move W9, [X0+40]
	002 Move TEMP, X9
	003 And TEMP, TEMP, 8
	004 Compare TEMP, 8
	005 JumpIfNotEqual {16}
	006 Move X8, X0
	007 Move X0, [X0+32]
	008 Compare X0, 0
	009 JumpIfEqual {16}
	010 Move X9, [X1+32]
	011 Move X1, X8
	012 Move X9, [X9+192]
	013 Move X2, [X9+40]
	014 Call 0x2666C80, X0, X1
	015 Return 
	016 Return 

Method: System.Void DisconnectFromPool()

Disassembly:
	0x02668ADC LDRH W0, [X0 + 0x2C]
	0x02668AE0 RET
	0x02668AE4 STR X30, [X31 - 0x20]!
	0x02668AE8 STP X20, X19, [X31 + 0x10]
	0x02668AEC MOV X8, X0
	0x02668AF0 LDR X0, [X0 + 0x20]

ISIL:
	001 Move W8, [X0+40]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move [X0+40], W31
	004 Move [X0+32], X31
	005 Return 

Method: System.String ToString()

Disassembly:
	0x02668AF4 LDRH W20, [X8 + 0x2C]
	0x02668AF8 MOV X19, X1
	0x02668AFC CBZ X0, 0x2668B14
	0x02668B00 LDR X9, [X19 + 0x20]
	0x02668B04 MOV X1, X8
	0x02668B08 LDR X9, [X9 + 0xC0]
	0x02668B0C LDR X2, [X9 + 0x28]
	0x02668B10 BL 0x266636C
	0x02668B14 STRH W20, [X31 + 0xC]
	0x02668B18 LDR X8, [X19 + 0x20]
	0x02668B1C ADD X1, X31, 0xC
	0x02668B20 LDR X8, [X8 + 0xC0]
	0x02668B24 LDR X0, [X8 + 0x18]
	0x02668B28 BL 0x1C16E04
	0x02668B2C LDP X20, X19, [X31 + 0x10]
	0x02668B30 LDR X30, [X31], #0x20
	0x02668B34 RET
	0x02668B38 LDRB W9, [X0 + 0x28]
	0x02668B3C TBZ X9, 0x3, 0x2668B60
	0x02668B40 MOV X8, X0
	0x02668B44 LDR X0, [X0 + 0x20]
	0x02668B48 CBZ X0, 0x2668B60
	0x02668B4C LDR X9, [X1 + 0x20]
	0x02668B50 MOV X1, X8
	0x02668B54 LDR X9, [X9 + 0xC0]
	0x02668B58 LDR X2, [X9 + 0x28]
	0x02668B5C B 0x266636C
	0x02668B60 RET
	0x02668B64 LDR W8, [X0 + 0x28]
	0x02668B68 CMP W8, 0x4
	0x02668B6C B.EQ 0x2668B78
	0x02668B70 STR W31, [X0 + 0x28]
	0x02668B74 STR X31, [X0 + 0x20]
	0x02668B78 RET
	0x02668B7C SUB X31, X31, 0x20
	0x02668B80 STP X30, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1D73000
	007 Move X21, 0x1A8C000
	008 Move W8, [X22+499]
	009 Move X21, [X21+2904]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x1A8C000
	017 Move X0, [X0+2904]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+499], W8
	021 Move X8, [X19+32]
	022 Move X0, X20
	023 Move X8, [X8+192]
	024 Move X1, [X8+56]
	025 Call 0x2668A0C, X0
	026 Move X8, [X21]
	027 And W9, W0, 1
	028 Move [X31+12], W9
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X8, [X19+32]
	035 Add X0, X31, 12
	036 Move X8, [X8+192]
	037 Move X1, [X8+64]
	038 Call Boolean.ToString, X0
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Return X0

Method: System.String ToString(System.Boolean writeTypeInfo)

Disassembly:
	0x02668B84 LDR X8, [X1 + 0x20]
	0x02668B88 MOV X19, X1
	0x02668B8C LDR X8, [X8 + 0xC0]
	0x02668B90 LDR X1, [X8 + 0x38]
	0x02668B94 BL 0x2668A98
	0x02668B98 STRH W0, [X31 + 0xC]
	0x02668B9C LDR X8, [X19 + 0x20]
	0x02668BA0 ADD X0, X31, 0xC
	0x02668BA4 LDR X8, [X8 + 0xC0]
	0x02668BA8 LDR X1, [X8 + 0x40]
	0x02668BAC BL 0x3379CF4
	0x02668BB0 LDP X30, X19, [X31 + 0x10]
	0x02668BB4 ADD X31, X31, 0x20
	0x02668BB8 RET
	0x02668BBC STR X30, [X31 - 0x30]!
	0x02668BC0 STP X22, X21, [X31 + 0x10]
	0x02668BC4 STP X20, X19, [X31 + 0x20]
	0x02668BC8 ADRP X22, 0x1D72000
	0x02668BCC LDRB W8, [X22 + 0x1FA]
	0x02668BD0 MOV X19, X2
	0x02668BD4 MOV W21, W1
	0x02668BD8 MOV X20, X0
	0x02668BDC TBNZ X8, 0x0, 0x2668C00
	0x02668BE0 ADRP X0, 0x1AB5000
	0x02668BE4 LDR X0, [X0 + 0x5F8]
	0x02668BE8 BL 0x1C16CF4
	0x02668BEC ADRP X0, 0x1AB5000
	0x02668BF0 LDR X0, [X0 + 0x600]
	0x02668BF4 BL 0x1C16CF4
	0x02668BF8 MOVZ W8, 0x1
	0x02668BFC STRB W8, [X22 + 0x1FA]
	0x02668C00 STRH W31, [X31 + 0xC]
	0x02668C04 TBZ X21, 0x0, 0x2668C78
	0x02668C08 ADRP X8, 0x1AB5000
	0x02668C0C LDR X8, [X8 + 0x5F8]
	0x02668C10 LDR W9, [X20 + 0x10]
	0x02668C14 ADRP X22, 0x1AB5000
	0x02668C18 ADD X1, X31, 0x8
	0x02668C1C LDR X0, [X8]
	0x02668C20 LDR X22, [X22 + 0x600]
	0x02668C24 STR W9, [X31 + 0x8]
	0x02668C28 BL 0x1C16E04
	0x02668C2C LDR X8, [X19 + 0x20]
	0x02668C30 MOV X21, X0
	0x02668C34 MOV X0, X20
	0x02668C38 LDR X8, [X8 + 0xC0]
	0x02668C3C LDR X1, [X8 + 0x38]
	0x02668C40 BL 0x2668A98
	0x02668C44 STRH W0, [X31 + 0xC]
	0x02668C48 LDR X8, [X19 + 0x20]
	0x02668C4C ADD X0, X31, 0xC
	0x02668C50 LDR X8, [X8 + 0xC0]
	0x02668C54 LDR X1, [X8 + 0x40]
	0x02668C58 BL 0x3379CF4
	0x02668C5C LDR X8, [X22]
	0x02668C60 MOV X2, X0
	0x02668C64 MOV X1, X21
	0x02668C68 MOV X3, X31
	0x02668C6C MOV X0, X8
	0x02668C70 BL 0x3227BD4
	0x02668C74 B 0x2668CA4
	0x02668C78 LDR X8, [X19 + 0x20]
	0x02668C7C MOV X0, X20
	0x02668C80 LDR X8, [X8 + 0xC0]
	0x02668C84 LDR X1, [X8 + 0x38]
	0x02668C88 BL 0x2668A98
	0x02668C8C STRH W0, [X31 + 0xC]
	0x02668C90 LDR X8, [X19 + 0x20]
	0x02668C94 ADD X0, X31, 0xC
	0x02668C98 LDR X8, [X8 + 0xC0]
	0x02668C9C LDR X1, [X8 + 0x40]
	0x02668CA0 BL 0x3379CF4
	0x02668CA4 LDP X20, X19, [X31 + 0x20]
	0x02668CA8 LDP X22, X21, [X31 + 0x10]
	0x02668CAC LDR X30, [X31], #0x30
	0x02668CB0 RET
	0x02668CB4 STP X30, X21, [X31 - 0x20]!
	0x02668CB8 STP X20, X19, [X31 + 0x10]
	0x02668CBC LDR X8, [X1 + 0x20]
	0x02668CC0 MOV X20, X1
	0x02668CC4 MOV W19, W0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x1D73000
	009 Move W8, [X22+500]
	010 Move X19, X2
	011 Move W21, W1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x1A8C000
	018 Move X0, [X0+2904]
	019 Call 0x1C17CF4
	020 Move X0, 0x1AB6000
	021 Move X0, [X0+1528]
	022 Call 0x1C17CF4
	023 Move X0, 0x1AB6000
	024 Move X0, [X0+1536]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X22+500], W8
	028 Move X22, 0x1A8C000
	029 Move X22, [X22+2904]
	030 Move [X31+12], W31
	031 Move TEMP, X21
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {69}
	035 Move X8, 0x1AB6000
	036 Move X8, [X8+1528]
	037 Move W9, [X20+16]
	038 Move X23, 0x1AB6000
	039 Add X1, X31, 8
	040 Move X0, [X8]
	041 Move X23, [X23+1536]
	042 Move [X31+8], W9
	043 Call 0x1C17E04
	044 Move X8, [X19+32]
	045 Move X21, X0
	046 Move X0, X20
	047 Move X8, [X8+192]
	048 Move X1, [X8+56]
	049 Call 0x2668A0C, X0
	050 Move X8, [X22]
	051 And W9, W0, 1
	052 Move [X31+12], W9
	053 Move W9, [X8+224]
	054 Compare W9, 0
	055 JumpIfNotEqual {58}
	056 Move X0, X8
	057 Call 0x1C17DFC
	058 Move X8, [X19+32]
	059 Add X0, X31, 12
	060 Move X8, [X8+192]
	061 Move X1, [X8+64]
	062 Call Boolean.ToString, X0
	063 Move X8, [X23]
	064 Move X2, X0
	065 Move X1, X21
	066 Move X3, X31
	067 Move X0, X8
	068 Call String.Format, X0, X1, X2
	069 Move X8, [X19+32]
	070 Move X0, X20
	071 Move X8, [X8+192]
	072 Move X1, [X8+56]
	073 Call 0x2668A0C, X0
	074 Move X8, [X22]
	075 And W9, W0, 1
	076 Move [X31+12], W9
	077 Move W9, [X8+224]
	078 Compare W9, 0
	079 JumpIfNotEqual {82}
	080 Move X0, X8
	081 Call 0x1C17DFC
	082 Move X8, [X19+32]
	083 Add X0, X31, 12
	084 Move X8, [X8+192]
	085 Move X1, [X8+64]
	086 Call Boolean.ToString, X0
	087 Move X20, [X31+48]
	088 Move X19, [X31+56]
	089 Move X22, [X31+32]
	090 Move X21, [X31+40]
	091 Move X30, [X31+16]
	092 Move X23, [X31+24]
	093 Add X31, X31, 64
	094 Return X0

Method: ExitGames.Client.Photon.StructWrapping.StructWrapper`1<T> op_Implicit(T value)

Disassembly:
	0x02668CC8 LDRB W9, [X8 + 0x135]
	0x02668CCC TBNZ X9, 0x0, 0x2668CDC
	0x02668CD0 MOV X0, X8
	0x02668CD4 BL 0x1C5C684
	0x02668CD8 MOV X8, X0
	0x02668CDC LDR X8, [X8 + 0xC0]
	0x02668CE0 LDR X0, [X8 + 0x48]
	0x02668CE4 LDRB W8, [X0 + 0x135]
	0x02668CE8 TBNZ X8, 0x0, 0x2668CF0
	0x02668CEC BL 0x1C5C684
	0x02668CF0 LDR W8, [X0 + 0xE0]
	0x02668CF4 CBNZ W8, 0x2668CFC
	0x02668CF8 BL 0x1C16DFC
	0x02668CFC LDR X0, [X20 + 0x20]
	0x02668D00 LDRB W8, [X0 + 0x135]
	0x02668D04 TBNZ X8, 0x0, 0x2668D0C
	0x02668D08 BL 0x1C5C684
	0x02668D0C LDR X8, [X0 + 0xC0]
	0x02668D10 LDR X0, [X8 + 0x48]
	0x02668D14 LDRB W8, [X0 + 0x135]
	0x02668D18 TBNZ X8, 0x0, 0x2668D20
	0x02668D1C BL 0x1C5C684
	0x02668D20 LDR X8, [X0 + 0xB8]
	0x02668D24 LDR X21, [X8]
	0x02668D28 CBZ X21, 0x2668D58
	0x02668D2C LDR X0, [X20 + 0x20]
	0x02668D30 LDRB W8, [X0 + 0x135]
	0x02668D34 TBNZ X8, 0x0, 0x2668D3C
	0x02668D38 BL 0x1C5C684
	0x02668D3C LDR X8, [X0 + 0xC0]
	0x02668D40 MOV W1, W19
	0x02668D44 LDP X20, X19, [X31 + 0x10]
	0x02668D48 MOV X0, X21
	0x02668D4C LDR X2, [X8 + 0x50]
	0x02668D50 LDP X30, X21, [X31], #0x20
	0x02668D54 B 0x2666324
	0x02668D58 BL 0x1C16F20
	0x02668D5C STR X30, [X31 - 0x20]!
	0x02668D60 STP X20, X19, [X31 + 0x10]
	0x02668D64 MOV X19, X0
	0x02668D68 LDR X0, [X0 + 0x20]
	0x02668D6C LDRB W8, [X0 + 0x135]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X1+32]
	006 Move X20, X1
	007 Move W19, W0
	008 Move W9, [X8+309]
	009 Move TEMP, X9
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {16}
	013 Move X0, X8
	014 Call 0x1C5D684
	015 Move X8, X0
	016 Move X8, [X8+192]
	017 Move X0, [X8+72]
	018 Move W8, [X0+309]
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {24}
	023 Call 0x1C5D684
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, [X20+32]
	029 Move W8, [X0+309]
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {35}
	034 Call 0x1C5D684
	035 Move X8, [X0+192]
	036 Move X0, [X8+72]
	037 Move W8, [X0+309]
	038 Move TEMP, X8
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {43}
	042 Call 0x1C5D684
	043 Move X8, [X0+184]
	044 Move X21, [X8]
	045 Compare X21, 0
	046 JumpIfEqual {64}
	047 Move X0, [X20+32]
	048 Move W8, [X0+309]
	049 Move TEMP, X8
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfEqual {54}
	053 Call 0x1C5D684
	054 Move X8, [X0+192]
	055 And W1, W19, 1
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X0, X21
	059 Move X2, [X8+80]
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Call 0x2666C34, X0, X1
	063 Return X0
	064 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x02668D70 TBNZ X8, 0x0, 0x2668D78
	0x02668D74 BL 0x1C5C684
	0x02668D78 LDR X8, [X0 + 0xC0]
	0x02668D7C LDR X0, [X8 + 0x8]
	0x02668D80 LDRB W8, [X0 + 0x135]
	0x02668D84 TBNZ X8, 0x0, 0x2668D8C
	0x02668D88 BL 0x1C5C684
	0x02668D8C BL 0x1C16F10
	0x02668D90 LDR X8, [X19 + 0x20]
	0x02668D94 MOV X20, X0
	0x02668D98 LDRB W9, [X8 + 0x135]
	0x02668D9C TBNZ X9, 0x0, 0x2668DAC
	0x02668DA0 MOV X0, X8
	0x02668DA4 BL 0x1C5C684
	0x02668DA8 MOV X8, X0
	0x02668DAC LDR X8, [X8 + 0xC0]
	0x02668DB0 MOVZ W1, 0x1
	0x02668DB4 MOV X0, X20
	0x02668DB8 LDR X2, [X8 + 0x58]
	0x02668DBC BL 0x2666154
	0x02668DC0 LDR X0, [X19 + 0x20]
	0x02668DC4 LDRB W8, [X0 + 0x135]
	0x02668DC8 TBNZ X8, 0x0, 0x2668DD0
	0x02668DCC BL 0x1C5C684
	0x02668DD0 LDR X8, [X0 + 0xC0]
	0x02668DD4 LDR X0, [X8 + 0x48]
	0x02668DD8 LDRB W8, [X0 + 0x135]
	0x02668DDC TBNZ X8, 0x0, 0x2668DE4
	0x02668DE0 BL 0x1C5C684
	0x02668DE4 LDR X8, [X0 + 0xB8]
	0x02668DE8 STR X20, [X8]
	0x02668DEC LDR X0, [X19 + 0x20]
	0x02668DF0 LDRB W8, [X0 + 0x135]
	0x02668DF4 TBNZ X8, 0x0, 0x2668DFC
	0x02668DF8 BL 0x1C5C684
	0x02668DFC LDR X8, [X0 + 0xC0]
	0x02668E00 LDR X0, [X8 + 0x48]
	0x02668E04 LDRB W8, [X0 + 0x135]
	0x02668E08 TBNZ X8, 0x0, 0x2668E18
	0x02668E0C LDP X20, X19, [X31 + 0x10]
	0x02668E10 LDR X30, [X31], #0x20
	0x02668E14 B 0x1C5C684
	0x02668E18 LDP X20, X19, [X31 + 0x10]
	0x02668E1C LDR X30, [X31], #0x20
	0x02668E20 RET
	0x02668E24 LDR X0, [X0 + 0x20]
	0x02668E28 RET
	0x02668E2C STR X1, [X0 + 0x20]
	0x02668E30 RET
	0x02668E34 STP X30, X23, [X31 - 0x30]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+32]
	006 Move W8, [X0+309]
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {12}
	011 Call 0x1C5D684
	012 Move X8, [X0+192]
	013 Move X0, [X8+8]
	014 Move W8, [X0+309]
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {20}
	019 Call 0x1C5D684
	020 Call 0x1C17F10
	021 Move X8, [X19+32]
	022 Move X20, X0
	023 Move W9, [X8+309]
	024 Move TEMP, X9
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {31}
	028 Move X0, X8
	029 Call 0x1C5D684
	030 Move X8, X0
	031 Move X8, [X8+192]
	032 Move W1, 1
	033 Move X0, X20
	034 Move X2, [X8+88]
	035 Call 0x2666A64, X0, X1
	036 Move X0, [X19+32]
	037 Move W8, [X0+309]
	038 Move TEMP, X8
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {43}
	042 Call 0x1C5D684
	043 Move X8, [X0+192]
	044 Move X0, [X8+72]
	045 Move W8, [X0+309]
	046 Move TEMP, X8
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfEqual {51}
	050 Call 0x1C5D684
	051 Move X8, [X0+184]
	052 Move [X8], X20
	053 Move X0, [X19+32]
	054 Move W8, [X0+309]
	055 Move TEMP, X8
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfEqual {60}
	059 Call 0x1C5D684
	060 Move X8, [X0+192]
	061 Move X0, [X8+72]
	062 Move W8, [X0+309]
	063 Move TEMP, X8
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfEqual {72}
	067 Move X20, [X31+16]
	068 Move X19, [X31+24]
	069 Move X30, [X31+32]
	070 Call 0x1C5D684
	071 Return 
	072 Move X20, [X31+16]
	073 Move X19, [X31+24]
	074 Move X30, [X31+32]
	075 Return 

