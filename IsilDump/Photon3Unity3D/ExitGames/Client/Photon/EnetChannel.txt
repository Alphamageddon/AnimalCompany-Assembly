Type: ExitGames.Client.Photon.EnetChannel

Method: System.Void .ctor(System.Byte channelNumber, System.Int32 commandBufferSize)

Disassembly:
	0x034EF5C4 ADRP X0, 0xC0D000
	0x034EF5C8 LDR X0, [X0 + 0xBA8]
	0x034EF5CC BL 0x1C16CF4
	0x034EF5D0 ADRP X0, 0xC44000
	0x034EF5D4 LDR X0, [X0 + 0x7C8]
	0x034EF5D8 BL 0x1C16CF4
	0x034EF5DC MOVZ W8, 0x1
	0x034EF5E0 STRB W8, [X20 + 0xA20]
	0x034EF5E4 MOV X0, X19
	0x034EF5E8 STRB W31, [X31 + 0xC]
	0x034EF5EC STRB W31, [X31 + 0x8]
	0x034EF5F0 BL 0x34EF9F4
	0x034EF5F4 LDR X8, [X19 + 0x10]
	0x034EF5F8 CBZ X8, 0x34EF900
	0x034EF5FC LDR X1, [X8 + 0xF0]
	0x034EF600 CBZ X1, 0x34EF628
	0x034EF604 LDRB W9, [X19 + 0x20]
	0x034EF608 CBNZ W9, 0x34EF628
	0x034EF60C LDR X8, [X19]
	0x034EF610 MOV X0, X19
	0x034EF614 LDR X9, [X8 + 0x288]
	0x034EF618 LDR X2, [X8 + 0x290]
	0x034EF61C BLR X9
	0x034EF620 LDR X8, [X19 + 0x10]
	0x034EF624 CBZ X8, 0x34EF900
	0x034EF628 ADRP X9, 0xC44000
	0x034EF62C LDR X10, [X8 + 0x100]
	0x034EF630 LDR X9, [X9 + 0x7C8]
	0x034EF634 CBZ X10, 0x34EF640
	0x034EF638 MOVZ W10, 0x1
	0x034EF63C STRB W10, [X19 + 0xDD]
	0x034EF640 LDRB W8, [X8 + 0x68]
	0x034EF644 CMP W8, 0x0
	0x034EF648 MOVN W8, 0x1
	0x034EF64C CINC W8, W8, EQ
	0x034EF650 STRH W8, [X19 + 0x68]
	0x034EF654 LDR X0, [X9]
	0x034EF658 LDR W8, [X0 + 0xE0]
	0x034EF65C CBNZ W8, 0x34EF664
	0x034EF660 BL 0x1C16DFC
	0x034EF664 MOV X0, X31
	0x034EF668 BL 0x3521F3C
	0x034EF66C LDR X20, [X19 + 0x158]
	0x034EF670 STR W0, [X19 + 0x174]
	0x034EF674 CBZ X20, 0x34EF694
	0x034EF678 LDR X0, [X19 + 0x10]
	0x034EF67C CBZ X0, 0x34EF900
	0x034EF680 MOV X1, X31
	0x034EF684 BL 0x350243C
	0x034EF688 LDR W8, [X20 + 0x18]
	0x034EF68C CMP W0, W8
	0x034EF690 B.EQ 0x34EF6C0
	0x034EF694 LDR X0, [X19 + 0x10]
	0x034EF698 CBZ X0, 0x34EF900
	0x034EF69C ADRP X20, 0xC04000
	0x034EF6A0 LDR X20, [X20 + 0x618]
	0x034EF6A4 MOV X1, X31
	0x034EF6A8 BL 0x350243C
	0x034EF6AC LDR X8, [X20]
	0x034EF6B0 MOV W1, W0
	0x034EF6B4 MOV X0, X8
	0x034EF6B8 BL 0x1C16D6C
	0x034EF6BC STR X0, [X19 + 0x158]
	0x034EF6C0 LDR X11, [X19 + 0x140]
	0x034EF6C4 MOVI V0.2D, 0x0
	0x034EF6C8 STR D0, [X19 + 0x178]
	0x034EF6CC STR W31, [X19 + 0xC8]
	0x034EF6D0 STR D0, [X19 + 0x148]
	0x034EF6D4 CBZ X11, 0x34EF900
	0x034EF6D8 LDR W8, [X11 + 0x18]
	0x034EF6DC UBFM X9, X8, 0x20, 0x1F
	0x034EF6E0 CMP X9, 0x1
	0x034EF6E4 B.LT 0x34EF70C
	0x034EF6E8 MOV X9, X31
	0x034EF6EC SXTW X10, W8
	0x034EF6F0 ADD X11, X11, 0x20
	0x034EF6F4 CMP X9, X8
	0x034EF6F8 B.CS 0x34EF8F0
	0x034EF6FC STR W31, [X11, X9, LSL #2]
	0x034EF700 ADD X9, X9, 0x1
	0x034EF704 CMP X9, X10
	0x034EF708 B.LT 0x34EF6F4
	0x034EF70C LDR X20, [X19 + 0x188]
	0x034EF710 STRB W31, [X31 + 0xC]
	0x034EF714 ADD X1, X31, 0xC
	0x034EF718 MOV X0, X20
	0x034EF71C MOV X2, X31
	0x034EF720 BL 0x33DE64C
	0x034EF724 LDR X21, [X19 + 0x188]
	0x034EF728 CBZ X21, 0x34EF90C
	0x034EF72C LDR X8, [X19 + 0x10]
	0x034EF730 CBZ X8, 0x34EF910
	0x034EF734 LDRB W9, [X8 + 0x6A]
	0x034EF738 LDR W10, [X21 + 0x18]
	0x034EF73C ADD W1, W9, 0x1
	0x034EF740 CMP W1, W10
	0x034EF744 B.EQ 0x34EF764
	0x034EF748 ADRP X8, 0xC44000
	0x034EF74C LDR X8, [X8 + 0x758]
	0x034EF750 LDR X0, [X8]
	0x034EF754 BL 0x1C16D6C
	0x034EF758 LDR X8, [X19 + 0x10]
	0x034EF75C CBZ X8, 0x34EF7D4
	0x034EF760 MOV X21, X0
	0x034EF764 ADRP X25, 0xC44000
	0x034EF768 LDR X25, [X25 + 0x7B8]
	0x034EF76C MOV X22, X31

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X28, 0xEF1000
	014 Move X29, 0xC06000
	015 Move X22, 0xC0C000
	016 Move X26, 0xC45000
	017 Move X25, 0xC45000
	018 Move X24, 0xC45000
	019 Move X27, 0xC45000
	020 Move X23, 0xC45000
	021 Move X29, [X29+3592]
	022 Move X22, [X22+1672]
	023 Move W8, [X28+2579]
	024 Move X26, [X26+1728]
	025 Move X25, [X25+1736]
	026 Move X24, [X24+1744]
	027 Move X27, [X27+1752]
	028 Move X23, [X23+1760]
	029 Move W20, W2
	030 Move W21, W1
	031 Move X19, X0
	032 Move TEMP, X8
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {59}
	036 Move X0, 0xC0C000
	037 Move X0, [X0+1672]
	038 Call 0x1C17CF4
	039 Move X0, 0xC06000
	040 Move X0, [X0+3592]
	041 Call 0x1C17CF4
	042 Move X0, 0xC45000
	043 Move X0, [X0+1736]
	044 Call 0x1C17CF4
	045 Move X0, 0xC45000
	046 Move X0, [X0+1728]
	047 Call 0x1C17CF4
	048 Move X0, 0xC45000
	049 Move X0, [X0+1760]
	050 Call 0x1C17CF4
	051 Move X0, 0xC45000
	052 Move X0, [X0+1752]
	053 Call 0x1C17CF4
	054 Move X0, 0xC45000
	055 Move X0, [X0+1744]
	056 Call 0x1C17CF4
	057 Move W8, 1
	058 Move [X28+2579], W8
	059 Move X0, [X29]
	060 Call 0x1C17F10
	061 Move X1, [X22]
	062 Move X22, X0
	063 Call HashSet`1<Int32>..ctor, X0
	064 Move X0, X19
	065 Move X1, X31
	066 Move [X19+96], X22
	067 Call Object..ctor, X0
	068 Move [X19+16], W21
	069 Move X0, [X26]
	070 Call 0x1C17F10
	071 Move X2, [X25]
	072 Move W1, W20
	073 Move X21, X0
	074 Call NonAllocDictionary`2<Int32, Object>..ctor, X0, X1
	075 Move [X19+24], X21
	076 Move X0, [X26]
	077 Call 0x1C17F10
	078 Move X2, [X25]
	079 Move W1, W20
	080 Move X21, X0
	081 Call NonAllocDictionary`2<Int32, Object>..ctor, X0, X1
	082 Move [X19+32], X21
	083 Move X0, [X24]
	084 Call 0x1C17F10
	085 Move X1, [X27]
	086 Move X21, X0
	087 Call Queue`1<Object>..ctor, X0
	088 Move [X19+40], X21
	089 Move X0, [X26]
	090 Call 0x1C17F10
	091 Move X2, [X25]
	092 Move W1, 29
	093 Move X21, X0
	094 Call NonAllocDictionary`2<Int32, Object>..ctor, X0, X1
	095 Move [X19+48], X21
	096 Move X0, [X24]
	097 Call 0x1C17F10
	098 Move X2, [X23]
	099 Move W1, W20
	100 Move X21, X0
	101 Call Queue`1<Object>..ctor, X0, X1
	102 Move [X19+56], X21
	103 Move X0, [X24]
	104 Call 0x1C17F10
	105 Move X2, [X23]
	106 Move W1, W20
	107 Move X21, X0
	108 Call Queue`1<Object>..ctor, X0, X1
	109 Move [X19+64], X21
	110 Move X20, [X31+80]
	111 Move X19, [X31+88]
	112 Move X22, [X31+64]
	113 Move X21, [X31+72]
	114 Move X24, [X31+48]
	115 Move X23, [X31+56]
	116 Move X26, [X31+32]
	117 Move X25, [X31+40]
	118 Move X28, [X31+16]
	119 Move X27, [X31+24]
	120 Move X29, [X31+96]
	121 Move X30, [X31+104]
	122 Return 

Method: System.Boolean ContainsUnreliableSequenceNumber(System.Int32 unreliableSequenceNumber)

Disassembly:
	0x034EF770 LDRB W26, [X8 + 0x6A]
	0x034EF774 LDR W24, [X19 + 0x170]
	0x034EF778 LDR X0, [X25]
	0x034EF77C CMP X22, X26
	0x034EF780 B.CS 0x34EF7D8
	0x034EF784 BL 0x1C16F10
	0x034EF788 MOV X23, X0
	0x034EF78C MOV W1, W22
	0x034EF790 MOV W2, W24
	0x034EF794 BL 0x34EE5C4
	0x034EF798 CBZ X21, 0x34EF8EC
	0x034EF79C CBZ X23, 0x34EF7B4
	0x034EF7A0 LDR X8, [X21]
	0x034EF7A4 LDR X1, [X8 + 0x40]
	0x034EF7A8 MOV X0, X23
	0x034EF7AC BL 0x1C16E00
	0x034EF7B0 CBZ X0, 0x34EF8F4
	0x034EF7B4 LDR W8, [X21 + 0x18]
	0x034EF7B8 CMP W22, W8
	0x034EF7BC B.CS 0x34EF8E8
	0x034EF7C0 ADD X8, X21, X22, 0x3, LSL
	0x034EF7C4 STR X23, [X8 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xEF1000
	006 Move W8, [X21+2580]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xC45000
	014 Move X0, [X0+1768]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2580], W8
	018 Move X0, [X20+32]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, 0xC45000
	022 Move X8, [X8+1768]
	023 Move W1, W19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call NonAllocDictionary`2<Int32, Object>.ContainsKey, X0, X1
	030 Return X0
	031 Call 0x1C17F20

Method: ExitGames.Client.Photon.NCommand FetchUnreliableSequenceNumber(System.Int32 unreliableSequenceNumber)

Disassembly:
	0x034EF7C8 LDR X8, [X19 + 0x10]
	0x034EF7CC ADD X22, X22, 0x1
	0x034EF7D0 CBNZ X8, 0x34EF770
	0x034EF7D4 BL 0x1C16F20
	0x034EF7D8 BL 0x1C16F10
	0x034EF7DC MOV X23, X0
	0x034EF7E0 MOVZ W1, 0xFF
	0x034EF7E4 MOV W2, W24
	0x034EF7E8 BL 0x34EE5C4
	0x034EF7EC CBZ X21, 0x34EF918
	0x034EF7F0 CBZ X23, 0x34EF808
	0x034EF7F4 LDR X8, [X21]
	0x034EF7F8 LDR X1, [X8 + 0x40]
	0x034EF7FC MOV X0, X23
	0x034EF800 BL 0x1C16E00
	0x034EF804 CBZ X0, 0x34EF920
	0x034EF808 LDR W8, [X21 + 0x18]
	0x034EF80C CMP W26, W8
	0x034EF810 B.CS 0x34EF91C
	0x034EF814 ADD X8, X21, X26, 0x3, LSL
	0x034EF818 MOV X22, X31
	0x034EF81C STR X23, [X8 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xEF1000
	006 Move W8, [X21+2581]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xC45000
	014 Move X0, [X0+1776]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2581], W8
	018 Move X0, [X20+32]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, 0xC45000
	022 Move X8, [X8+1776]
	023 Move W1, W19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call NonAllocDictionary`2<Int32, Object>.get_Item, X0, X1
	030 Return X0
	031 Call 0x1C17F20

Method: System.Boolean ContainsReliableSequenceNumber(System.Int32 reliableSequenceNumber)

Disassembly:
	0x034EF820 STR X21, [X19 + 0x188]
	0x034EF824 LDRB W8, [X31 + 0xC]
	0x034EF828 CBZ W8, 0x34EF838
	0x034EF82C MOV X0, X20
	0x034EF830 MOV X1, X31
	0x034EF834 BL 0x33E14E4
	0x034EF838 CBNZ X22, 0x34EF904
	0x034EF83C LDR X20, [X19 + 0x128]
	0x034EF840 STRB W31, [X31 + 0x8]
	0x034EF844 ADD X1, X31, 0x8
	0x034EF848 MOV X0, X20
	0x034EF84C MOV X2, X31
	0x034EF850 BL 0x33DE64C
	0x034EF854 LDR X8, [X19 + 0x128]
	0x034EF858 CBZ X8, 0x34EF914
	0x034EF85C LDP W2, W9, [X8 + 0x18]
	0x034EF860 ADD W9, W9, 0x1
	0x034EF864 CMP W2, 0x1
	0x034EF868 STP W31, W9, [X8 + 0x18]
	0x034EF86C B.LT 0x34EF880
	0x034EF870 LDR X0, [X8 + 0x10]
	0x034EF874 MOV W1, W31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xEF1000
	006 Move W8, [X21+2582]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xC45000
	014 Move X0, [X0+1768]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2582], W8
	018 Move X0, [X20+24]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, 0xC45000
	022 Move X8, [X8+1768]
	023 Move W1, W19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call NonAllocDictionary`2<Int32, Object>.ContainsKey, X0, X1
	030 Return X0
	031 Call 0x1C17F20

Method: ExitGames.Client.Photon.NCommand FetchReliableSequenceNumber(System.Int32 reliableSequenceNumber)

Disassembly:
	0x034EF878 MOV X3, X31
	0x034EF87C BL 0x339FA34
	0x034EF880 MOV X22, X31
	0x034EF884 MOVZ W21, 0x11
	0x034EF888 LDRB W8, [X31 + 0x8]
	0x034EF88C CBZ W8, 0x34EF89C
	0x034EF890 MOV X0, X20
	0x034EF894 MOV X1, X31
	0x034EF898 BL 0x33E14E4
	0x034EF89C CBNZ X22, 0x34EF904
	0x034EF8A0 CMP W21, 0x11
	0x034EF8A4 B.EQ 0x34EF8AC
	0x034EF8A8 CBNZ W21, 0x34EF8D0
	0x034EF8AC ADRP X8, 0xC0D000
	0x034EF8B0 LDR X8, [X8 + 0xBA8]
	0x034EF8B4 LDR X0, [X8]
	0x034EF8B8 BL 0x1C16F10
	0x034EF8BC MOV W1, W31
	0x034EF8C0 MOV X2, X31
	0x034EF8C4 MOV X20, X0
	0x034EF8C8 BL 0x3517E94
	0x034EF8CC STR X20, [X19 + 0x138]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xEF1000
	006 Move W8, [X21+2583]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xC45000
	014 Move X0, [X0+1776]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2583], W8
	018 Move X0, [X20+24]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, 0xC45000
	022 Move X8, [X8+1776]
	023 Move W1, W19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call NonAllocDictionary`2<Int32, Object>.get_Item, X0, X1
	030 Return X0
	031 Call 0x1C17F20

Method: System.Boolean TryGetFragment(System.Int32 reliableSequenceNumber, System.Boolean isSequenced, out ExitGames.Client.Photon.NCommand fragment)

Disassembly:
	0x034EF8D0 LDP X20, X19, [X31 + 0x40]
	0x034EF8D4 LDP X22, X21, [X31 + 0x30]
	0x034EF8D8 LDP X24, X23, [X31 + 0x20]
	0x034EF8DC LDP X26, X25, [X31 + 0x10]
	0x034EF8E0 LDR X30, [X31], #0x50
	0x034EF8E4 RET
	0x034EF8E8 BL 0x1C16F28
	0x034EF8EC BL 0x1C16F20
	0x034EF8F0 BL 0x1C16F28
	0x034EF8F4 BL 0x1C16F44
	0x034EF8F8 MOV X1, X31
	0x034EF8FC BL 0x1C16DEC
	0x034EF900 BL 0x1C16F20
	0x034EF904 MOV X0, X22
	0x034EF908 BL 0x1C16F18
	0x034EF90C BL 0x1C16F20
	0x034EF910 BL 0x1C16F20
	0x034EF914 BL 0x1C16F20
	0x034EF918 BL 0x1C16F20
	0x034EF91C BL 0x1C16F28
	0x034EF920 BL 0x1C16F44
	0x034EF924 MOV X1, X31
	0x034EF928 BL 0x1C16DEC
	0x034EF92C B 0x34EF99C
	0x034EF930 B 0x34EF99C
	0x034EF934 B 0x34EF99C
	0x034EF938 B 0x34EF940
	0x034EF93C B 0x34EF99C
	0x034EF940 MOV X21, X0
	0x034EF944 CMP W1, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xEF1000
	008 Move W8, [X23+2584]
	009 Move X19, X3
	010 Move W21, W2
	011 Move W20, W1
	012 Move X22, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xC45000
	018 Move X0, [X0+1784]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+2584], W8
	022 Move TEMP, X21
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {30}
	026 Move X0, [X22+24]
	027 Compare X0, 0
	028 JumpIfNotEqual {33}
	029 Call 0x1C17F20
	030 Move X0, [X22+48]
	031 Compare X0, 0
	032 JumpIfEqual {29}
	033 Move X8, 0xC45000
	034 Move X8, [X8+1784]
	035 Move W1, W20
	036 Move X2, X19
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X3, [X8]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move X30, [X31+48]
	043 Move X23, [X31+56]
	044 Call NonAllocDictionary`2<Int32, Object>.TryGetValue, X0, X1, X2
	045 Return X0

Method: System.Void RemoveFragment(System.Int32 reliableSequenceNumber, System.Boolean isSequenced)

Disassembly:
	0x034EF948 B.NE 0x34EF964
	0x034EF94C MOV X0, X21
	0x034EF950 BL 0x3EB1AD0
	0x034EF954 LDR X22, [X0]
	0x034EF958 BL 0x3EB1AE0
	0x034EF95C MOV W21, W31
	0x034EF960 B 0x34EF888
	0x034EF964 MOV X22, X31
	0x034EF968 B 0x34EF970
	0x034EF96C MOV X21, X0
	0x034EF970 LDRB W8, [X31 + 0x8]
	0x034EF974 CBZ W8, 0x34EF984
	0x034EF978 MOV X0, X20
	0x034EF97C MOV X1, X31
	0x034EF980 BL 0x33E14E4
	0x034EF984 CBZ X22, 0x34EF9E0
	0x034EF988 MOV X0, X22
	0x034EF98C BL 0x1C16F18
	0x034EF990 B 0x34EF99C
	0x034EF994 B 0x34EF99C
	0x034EF998 B 0x34EF99C
	0x034EF99C MOV X21, X0
	0x034EF9A0 CMP W1, 0x1
	0x034EF9A4 B.NE 0x34EF9BC
	0x034EF9A8 MOV X0, X21
	0x034EF9AC BL 0x3EB1AD0
	0x034EF9B0 LDR X22, [X0]
	0x034EF9B4 BL 0x3EB1AE0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xEF1000
	007 Move W8, [X22+2585]
	008 Move W20, W2
	009 Move W19, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xC45000
	016 Move X0, [X0+1792]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+2585], W8
	020 Move TEMP, X20
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfNotEqual {28}
	024 Move X0, [X21+24]
	025 Compare X0, 0
	026 JumpIfNotEqual {31}
	027 Call 0x1C17F20
	028 Move X0, [X21+48]
	029 Compare X0, 0
	030 JumpIfEqual {27}
	031 Move X8, 0xC45000
	032 Move X8, [X8+1792]
	033 Move W1, W19
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X2, [X8]
	039 Move X30, [X31+48]
	040 Call NonAllocDictionary`2<Int32, Object>.Remove, X0, X1
	041 Return 

Method: System.Void clearAll()

Disassembly:
	0x034EF9B8 B 0x34EF824
	0x034EF9BC MOV X22, X31
	0x034EF9C0 B 0x34EF9C8
	0x034EF9C4 MOV X21, X0
	0x034EF9C8 LDRB W8, [X31 + 0xC]
	0x034EF9CC CBZ W8, 0x34EF9DC
	0x034EF9D0 MOV X0, X20
	0x034EF9D4 MOV X1, X31
	0x034EF9D8 BL 0x33E14E4
	0x034EF9DC CBNZ X22, 0x34EF9E8
	0x034EF9E0 MOV X0, X21
	0x034EF9E4 BL 0x1D2C690
	0x034EF9E8 MOV X0, X22
	0x034EF9EC BL 0x1C16F18
	0x034EF9F0 BL 0x1990590
	0x034EF9F4 SUB X31, X31, 0x40
	0x034EF9F8 STR X30, [X31 + 0x10]
	0x034EF9FC STP X22, X21, [X31 + 0x20]
	0x034EFA00 STP X20, X19, [X31 + 0x30]
	0x034EFA04 ADRP X20, 0xEF0000
	0x034EFA08 LDRB W8, [X20 + 0xA71]
	0x034EFA0C MOV X19, X0
	0x034EFA10 TBNZ X8, 0x0, 0x34EFA34
	0x034EFA14 ADRP X0, 0xC44000
	0x034EFA18 LDR X0, [X0 + 0x7D0]
	0x034EFA1C BL 0x1C16CF4
	0x034EFA20 ADRP X0, 0xC44000
	0x034EFA24 LDR X0, [X0 + 0x7D8]
	0x034EFA28 BL 0x1C16CF4
	0x034EFA2C MOVZ W8, 0x1
	0x034EFA30 STRB W8, [X20 + 0xA71]
	0x034EFA34 STRB W31, [X31 + 0x18]
	0x034EFA38 STRB W31, [X31 + 0xC]
	0x034EFA3C LDR X8, [X19 + 0x10]
	0x034EFA40 CBZ X8, 0x34EFBC0
	0x034EFA44 LDR W0, [X8 + 0x28]
	0x034EFA48 BL 0x34FA37C
	0x034EFA4C LDR X8, [X19 + 0x10]
	0x034EFA50 STR X0, [X19 + 0x18]
	0x034EFA54 CBZ X8, 0x34EFBC0
	0x034EFA58 MOV X0, X8
	0x034EFA5C MOV X1, X31
	0x034EFA60 BL 0x35025E4
	0x034EFA64 LDR X8, [X19 + 0x110]
	0x034EFA68 MOVI V0.2D, 0x0
	0x034EFA6C STUR D0, [X19 + 0x44]
	0x034EFA70 STR D0, [X19 + 0x58]
	0x034EFA74 STP X31, X31, [X19 + 0x90]
	0x034EFA78 CBZ X8, 0x34EFBC0
	0x034EFA7C STR X31, [X8 + 0x48]
	0x034EFA80 ADRP X22, 0xC44000
	0x034EFA84 LDR X21, [X19 + 0x100]
	0x034EFA88 LDR X22, [X22 + 0x7D0]
	0x034EFA8C STRB W31, [X31 + 0x1C]
	0x034EFA90 ADD X1, X31, 0x1C
	0x034EFA94 MOV X0, X21
	0x034EFA98 MOV X2, X31
	0x034EFA9C BL 0x33DE64C
	0x034EFAA0 LDR X0, [X19 + 0x100]
	0x034EFAA4 CBZ X0, 0x34EFBCC
	0x034EFAA8 LDR X1, [X22]
	0x034EFAAC BL 0x2EED0CC
	0x034EFAB0 MOV X20, X31
	0x034EFAB4 LDRB W8, [X31 + 0x1C]
	0x034EFAB8 CBZ W8, 0x34EFAC8
	0x034EFABC MOV X0, X21
	0x034EFAC0 MOV X1, X31
	0x034EFAC4 BL 0x33E14E4
	0x034EFAC8 CBNZ X20, 0x34EFBC4
	0x034EFACC LDR X21, [X19 + 0x108]
	0x034EFAD0 STRB W31, [X31 + 0x18]
	0x034EFAD4 ADD X1, X31, 0x18
	0x034EFAD8 MOV X0, X21
	0x034EFADC MOV X2, X31
	0x034EFAE0 BL 0x33DE64C
	0x034EFAE4 LDR X0, [X19 + 0x108]
	0x034EFAE8 CBZ X0, 0x34EFBD0
	0x034EFAEC LDR X1, [X22]
	0x034EFAF0 BL 0x2EED0CC
	0x034EFAF4 MOV X20, X31
	0x034EFAF8 MOVZ W22, 0x3
	0x034EFAFC LDRB W8, [X31 + 0x18]
	0x034EFB00 CBZ W8, 0x34EFB10
	0x034EFB04 MOV X0, X21
	0x034EFB08 MOV X1, X31
	0x034EFB0C BL 0x33E14E4
	0x034EFB10 CBNZ X20, 0x34EFBC4
	0x034EFB14 CMP W22, 0x3
	0x034EFB18 B.EQ 0x34EFB20
	0x034EFB1C CBNZ W22, 0x34EFBAC
	0x034EFB20 LDR X21, [X19 + 0x60]
	0x034EFB24 STRB W31, [X31 + 0xC]
	0x034EFB28 ADD X1, X31, 0xC
	0x034EFB2C MOV X0, X21
	0x034EFB30 MOV X2, X31

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xEF1000
	007 Move W8, [X20+2586]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xC45000
	014 Move X0, [X0+1800]
	015 Call 0x1C17CF4
	016 Move X0, 0xC45000
	017 Move X0, [X0+1808]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+2586], W8
	021 Move [X31+12], W31
	022 Add X1, X31, 12
	023 Move X0, X19
	024 Move X2, X31
	025 Call Monitor.Enter, X0, X1
	026 Move X0, [X19+24]
	027 Compare X0, 0
	028 JumpIfEqual {77}
	029 Move X20, 0xC45000
	030 Move X20, [X20+1800]
	031 Move X1, [X20]
	032 Call NonAllocDictionary`2<Int32, Object>.Clear, X0
	033 Move X0, [X19+32]
	034 Compare X0, 0
	035 JumpIfEqual {78}
	036 Move X1, [X20]
	037 Call NonAllocDictionary`2<Int32, Object>.Clear, X0
	038 Move X0, [X19+40]
	039 Compare X0, 0
	040 JumpIfEqual {79}
	041 Move X21, 0xC45000
	042 Move X21, [X21+1808]
	043 Move X1, [X21]
	044 Call Queue`1<Object>.Clear, X0
	045 Move X0, [X19+48]
	046 Compare X0, 0
	047 JumpIfEqual {80}
	048 Move X1, [X20]
	049 Call NonAllocDictionary`2<Int32, Object>.Clear, X0
	050 Move X0, [X19+56]
	051 Compare X0, 0
	052 JumpIfEqual {81}
	053 Move X1, [X21]
	054 Call Queue`1<Object>.Clear, X0
	055 Move X0, [X19+64]
	056 Compare X0, 0
	057 JumpIfEqual {82}
	058 Move X1, [X21]
	059 Call Queue`1<Object>.Clear, X0
	060 Move X20, X31
	061 Move W8, [X31+12]
	062 Compare W8, 0
	063 JumpIfEqual {67}
	064 Move X0, X19
	065 Move X1, X31
	066 Call Monitor.Exit, X0
	067 Compare X20, 0
	068 JumpIfNotEqual {75}
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X30, [X31+16]
	072 Move X21, [X31+24]
	073 Add X31, X31, 48
	074 Return 
	075 Move X0, X20
	076 Call 0x1C17F18
	077 Call 0x1C17F20
	078 Call 0x1C17F20
	079 Call 0x1C17F20
	080 Call 0x1C17F20
	081 Call 0x1C17F20
	082 Call 0x1C17F20
	083 Move X21, X0
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move X0, X21
	086 Call 0x3EB2AD0
	087 Move X20, [X0]
	088 Call 0x3EB2AE0
	089 Move X20, X31
	090 Move X21, X0
	091 Move W8, [X31+12]
	092 Compare W8, 0
	093 JumpIfEqual {97}
	094 Move X0, X19
	095 Move X1, X31
	096 Call Monitor.Exit, X0
	097 Compare X20, 0
	098 JumpIfNotEqual {101}
	099 Move X0, X21
	100 Call 0x1D2D690
	101 Move X0, X20
	102 Call 0x1C17F18
	103 Call 0x1991590

Method: System.Boolean QueueIncomingReliableUnsequenced(ExitGames.Client.Photon.NCommand command)

Disassembly:
	0x034EFB34 BL 0x33DE64C
	0x034EFB38 LDR X0, [X19 + 0x60]
	0x034EFB3C CBZ X0, 0x34EFBD4
	0x034EFB40 ADRP X8, 0xC44000
	0x034EFB44 LDR X8, [X8 + 0x7D8]
	0x034EFB48 LDR X1, [X8]
	0x034EFB4C BL 0x24F1410
	0x034EFB50 MOV X20, X31
	0x034EFB54 LDRB W8, [X31 + 0xC]
	0x034EFB58 CBZ W8, 0x34EFB68
	0x034EFB5C MOV X0, X21
	0x034EFB60 MOV X1, X31
	0x034EFB64 BL 0x33E14E4
	0x034EFB68 CBNZ X20, 0x34EFBC4
	0x034EFB6C LDR X0, [X19 + 0xC0]
	0x034EFB70 STRB W31, [X19 + 0x40]
	0x034EFB74 CBZ X0, 0x34EFBC0
	0x034EFB78 MOV X1, X31
	0x034EFB7C BL 0x364C2E8
	0x034EFB80 LDR X0, [X19 + 0xC0]
	0x034EFB84 CBZ X0, 0x34EFBC0
	0x034EFB88 MOV X1, X31
	0x034EFB8C BL 0x364BFCC
	0x034EFB90 ADRP X8, 0xFFFFFFFFFD5FE000
	0x034EFB94 LDR V0, [X8 + 0xD50]
	0x034EFB98 STRH W31, [X19 + 0xDC]
	0x034EFB9C STR X31, [X19 + 0xF0]
	0x034EFBA0 STRB W31, [X19 + 0x70]
	0x034EFBA4 STUR D0, [X19 + 0x74]
	0x034EFBA8 STR W31, [X19 + 0x6C]
	0x034EFBAC LDP X20, X19, [X31 + 0x30]
	0x034EFBB0 LDP X22, X21, [X31 + 0x20]
	0x034EFBB4 LDR X30, [X31 + 0x10]
	0x034EFBB8 ADD X31, X31, 0x40
	0x034EFBBC RET
	0x034EFBC0 BL 0x1C16F20
	0x034EFBC4 MOV X0, X20
	0x034EFBC8 BL 0x1C16F18
	0x034EFBCC BL 0x1C16F20
	0x034EFBD0 BL 0x1C16F20
	0x034EFBD4 BL 0x1C16F20
	0x034EFBD8 B 0x34EFBE4
	0x034EFBDC B 0x34EFC3C
	0x034EFBE0 B 0x34EFC98
	0x034EFBE4 MOV X20, X0
	0x034EFBE8 CMP W1, 0x1
	0x034EFBEC B.NE 0x34EFC0C
	0x034EFBF0 MOV X0, X20
	0x034EFBF4 BL 0x3EB1AD0
	0x034EFBF8 LDR X8, [X0]
	0x034EFBFC STR X8, [X31]
	0x034EFC00 BL 0x3EB1AE0
	0x034EFC04 LDR X20, [X31]
	0x034EFC08 B 0x34EFB54
	0x034EFC0C STR X31, [X31]
	0x034EFC10 B 0x34EFC18
	0x034EFC14 MOV X20, X0
	0x034EFC18 LDRB W8, [X31 + 0xC]
	0x034EFC1C CBZ W8, 0x34EFC2C
	0x034EFC20 MOV X0, X21
	0x034EFC24 MOV X1, X31
	0x034EFC28 BL 0x33E14E4
	0x034EFC2C LDR X8, [X31]
	0x034EFC30 CBZ X8, 0x34EFCE8
	0x034EFC34 LDR X0, [X31]
	0x034EFC38 BL 0x1C16F18
	0x034EFC3C MOV X20, X0
	0x034EFC40 CMP W1, 0x1
	0x034EFC44 B.NE 0x34EFC68
	0x034EFC48 MOV X0, X20
	0x034EFC4C BL 0x3EB1AD0
	0x034EFC50 LDR X8, [X0]
	0x034EFC54 STR X8, [X31]
	0x034EFC58 BL 0x3EB1AE0
	0x034EFC5C LDR X20, [X31]
	0x034EFC60 MOV W22, W31
	0x034EFC64 B 0x34EFAFC
	0x034EFC68 STR X31, [X31]
	0x034EFC6C B 0x34EFC74
	0x034EFC70 MOV X20, X0
	0x034EFC74 LDRB W8, [X31 + 0x18]
	0x034EFC78 CBZ W8, 0x34EFC88
	0x034EFC7C MOV X0, X21
	0x034EFC80 MOV X1, X31
	0x034EFC84 BL 0x33E14E4
	0x034EFC88 LDR X8, [X31]
	0x034EFC8C CBZ X8, 0x34EFCE8
	0x034EFC90 LDR X0, [X31]
	0x034EFC94 BL 0x1C16F18
	0x034EFC98 MOV X20, X0
	0x034EFC9C CMP W1, 0x1
	0x034EFCA0 B.NE 0x34EFCC0
	0x034EFCA4 MOV X0, X20
	0x034EFCA8 BL 0x3EB1AD0
	0x034EFCAC LDR X8, [X0]
	0x034EFCB0 STR X8, [X31]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xEF1000
	007 Move W8, [X21+2587]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {31}
	014 Move X0, 0xC07000
	015 Move X0, [X0+2520]
	016 Call 0x1C17CF4
	017 Move X0, 0xC06000
	018 Move X0, [X0+3576]
	019 Call 0x1C17CF4
	020 Move X0, 0xC12000
	021 Move X0, [X0+1440]
	022 Call 0x1C17CF4
	023 Move X0, 0xC45000
	024 Move X0, [X0+1816]
	025 Call 0x1C17CF4
	026 Move X0, 0xC45000
	027 Move X0, [X0+1824]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X21+2587], W8
	031 Compare X19, 0
	032 JumpIfEqual {110}
	033 Move W1, [X19+20]
	034 Move W8, [X20+92]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X0, [X20+96]
	037 Compare X0, 0
	038 JumpIfEqual {110}
	039 Move X21, 0xC06000
	040 Move X21, [X21+3576]
	041 Move X2, [X21]
	042 Call HashSet`1<Int32>.Contains, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {48}
	047 Move W0, W31
	048 Move W8, [X20+92]
	049 Move W1, [X19+20]
	050 Add W8, W8, 1
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move [X20+92], W1
	053 Move X0, [X20+96]
	054 Compare X0, 0
	055 JumpIfEqual {110}
	056 Move X8, 0xC07000
	057 Move X8, [X8+2520]
	058 Move X2, [X8]
	059 Call HashSet`1<Int32>.Add, X0, X1
	060 Move X0, [X20+96]
	061 Compare X0, 0
	062 JumpIfEqual {110}
	063 Move X22, 0xC12000
	064 Move X22, [X22+1440]
	065 Move W8, [X20+92]
	066 Move X2, [X21]
	067 Add W1, W8, 1
	068 Call HashSet`1<Int32>.Contains, X0, X1
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {84}
	073 Move W8, [X20+92]
	074 Move X0, [X20+96]
	075 Add W1, W8, 1
	076 Move [X20+92], W1
	077 Compare X0, 0
	078 JumpIfEqual {110}
	079 Move X2, [X22]
	080 Call HashSet`1<Int32>.Remove, X0, X1
	081 Move X0, [X20+96]
	082 Compare X0, 0
	083 JumpIfNotEqual {65}
	084 Move W8, [X19+17]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X0, [X20+48]
	087 Compare X0, 0
	088 JumpIfEqual {110}
	089 Move X8, 0xC45000
	090 Move W1, [X19+20]
	091 Move X8, [X8+1816]
	092 Move X2, X19
	093 Move X3, [X8]
	094 Call NonAllocDictionary`2<Int32, Object>.Add, X0, X1, X2
	095 Move X0, [X20+40]
	096 Compare X0, 0
	097 JumpIfEqual {110}
	098 Move X8, 0xC45000
	099 Move X8, [X8+1824]
	100 Move X1, X19
	101 Move X2, [X8]
	102 Call Queue`1<Object>.Enqueue, X0, X1
	103 Move W0, 1
	104 Move X20, [X31+32]
	105 Move X19, [X31+40]
	106 Move X22, [X31+16]
	107 Move X21, [X31+24]
	108 Move X30, [X31+48]
	109 Return X0
	110 Call 0x1C17F20

