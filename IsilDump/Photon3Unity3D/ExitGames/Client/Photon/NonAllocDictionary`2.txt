Type: ExitGames.Client.Photon.NonAllocDictionary`2

Method: ExitGames.Client.Photon.NonAllocDictionary`2/KeyIterator<K, V> get_Keys()

Disassembly:
	0x024263E8 MOV X2, X31
	0x024263EC BL 0x330E100
	0x024263F0 B 0x2426424
	0x024263F4 ADRP X0, 0x1CD5000
	0x024263F8 LDR X0, [X0 + 0x578]
	0x024263FC BL 0x1C16D08
	0x02426400 BL 0x1C16F10
	0x02426404 MOV X20, X0
	0x02426408 ADRP X0, 0x1CF6000
	0x0242640C LDR X0, [X0 + 0xCF0]
	0x02426410 BL 0x1C16D08
	0x02426414 MOV X1, X0
	0x02426418 MOV X0, X20

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+8], X31
	003 Move [X31+16], X30
	004 Move [X31], X31
	005 Move X8, [X1+32]
	006 Move X1, X0
	007 Add X0, X31, 0
	008 Move X8, [X8+192]
	009 Move X2, [X8+8]
	010 Call 0x2EDB504, X0, X1
	011 Move X0, [X31]
	012 Move X1, [X31+8]
	013 Move X30, [X31+16]
	014 Add X31, X31, 32
	015 Return X0

Method: System.Collections.Generic.ICollection`1<V> System.Collections.Generic.IDictionary<K,V>.get_Values()

Disassembly:
	0x0242641C MOV X2, X31
	0x02426420 BL 0x3314A68

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.Collections.Generic.ICollection`1<K> System.Collections.Generic.IDictionary<K,V>.get_Keys()

Disassembly:
	0x02426424 MOV X0, X20
	0x02426428 MOV X1, X19

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: ExitGames.Client.Photon.NonAllocDictionary`2/ValueIterator<K, V> get_Values()

Disassembly:
	0x0242642C BL 0x1C16DEC
	0x02426430 STR X30, [X31 - 0x30]!
	0x02426434 STP X22, X21, [X31 + 0x10]
	0x02426438 STP X20, X19, [X31 + 0x20]
	0x0242643C MOV X19, X1
	0x02426440 MOV W20, W0
	0x02426444 MOV W8, W31
	0x02426448 LDR X0, [X19 + 0x20]
	0x0242644C MOV W21, W8
	0x02426450 LDRB W9, [X0 + 0x135]
	0x02426454 TBNZ X9, 0x0, 0x242645C
	0x02426458 BL 0x1C5C684
	0x0242645C LDR X8, [X0 + 0xC0]

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+8], X31
	003 Move [X31+16], X30
	004 Move [X31], X31
	005 Move X8, [X1+32]
	006 Move X1, X0
	007 Add X0, X31, 0
	008 Move X8, [X8+192]
	009 Move X2, [X8+48]
	010 Call 0x278C3D4, X0, X1
	011 Move X0, [X31]
	012 Move X1, [X31+8]
	013 Move X30, [X31+16]
	014 Add X31, X31, 32
	015 Return X0

Method: System.Int32 get_Count()

Disassembly:
	0x02426460 LDR X0, [X8 + 0x40]
	0x02426464 LDRB W8, [X0 + 0x135]
	0x02426468 TBNZ X8, 0x0, 0x2426470
	0x0242646C BL 0x1C5C684

ISIL:
	001 Move W8, [X0+20]
	002 Move W9, [X0+24]
	003 NotImplemented "Instruction ORN not yet implemented."
	004 Add W0, W9, W8
	005 Return X0

Method: System.Boolean get_IsReadOnly()

Disassembly:
	0x02426470 LDR W8, [X0 + 0xE0]
	0x02426474 CBNZ W8, 0x242647C

ISIL:
	001 Move W0, [X0+48]
	002 Return X0

Method: System.UInt32 get_Capacity()

Disassembly:
	0x02426478 BL 0x1C16DFC
	0x0242647C LDR X0, [X19 + 0x20]

ISIL:
	001 Move W0, [X0+28]
	002 Return X0

Method: System.Void .ctor(System.UInt32 capacity = 29)

Disassembly:
	0x02426480 LDRB W8, [X0 + 0x135]
	0x02426484 TBNZ X8, 0x0, 0x242648C
	0x02426488 BL 0x1C5C684
	0x0242648C LDR X8, [X0 + 0xC0]
	0x02426490 LDR X0, [X8 + 0x40]
	0x02426494 LDRB W8, [X0 + 0x135]
	0x02426498 TBNZ X8, 0x0, 0x24264A0
	0x0242649C BL 0x1C5C684
	0x024264A0 LDR X8, [X0 + 0xB8]
	0x024264A4 LDR X8, [X8]
	0x024264A8 CBZ X8, 0x2426550
	0x024264AC LDR W22, [X8 + 0x18]
	0x024264B0 CMP W21, W22
	0x024264B4 B.GE 0x2426538
	0x024264B8 LDR X0, [X19 + 0x20]
	0x024264BC LDRB W8, [X0 + 0x135]
	0x024264C0 TBNZ X8, 0x0, 0x24264C8
	0x024264C4 BL 0x1C5C684
	0x024264C8 LDR X8, [X0 + 0xC0]
	0x024264CC LDR X0, [X8 + 0x40]
	0x024264D0 LDRB W8, [X0 + 0x135]
	0x024264D4 TBNZ X8, 0x0, 0x24264DC
	0x024264D8 BL 0x1C5C684
	0x024264DC LDR W8, [X0 + 0xE0]
	0x024264E0 CBNZ W8, 0x24264E8
	0x024264E4 BL 0x1C16DFC
	0x024264E8 LDR X0, [X19 + 0x20]
	0x024264EC LDRB W8, [X0 + 0x135]
	0x024264F0 TBNZ X8, 0x0, 0x24264F8
	0x024264F4 BL 0x1C5C684
	0x024264F8 LDR X8, [X0 + 0xC0]
	0x024264FC LDR X0, [X8 + 0x40]
	0x02426500 LDRB W8, [X0 + 0x135]
	0x02426504 TBNZ X8, 0x0, 0x242650C
	0x02426508 BL 0x1C5C684
	0x0242650C LDR X8, [X0 + 0xB8]
	0x02426510 LDR X8, [X8]
	0x02426514 CBZ X8, 0x2426550
	0x02426518 LDR W9, [X8 + 0x18]
	0x0242651C CMP W21, W9
	0x02426520 B.CS 0x2426554
	0x02426524 ADD X8, X8, W21, 0x2, SXTW
	0x02426528 LDR W8, [X8 + 0x20]
	0x0242652C CMP W8, W20
	0x02426530 ADD W8, W21, 0x1
	0x02426534 B.NE 0x2426448
	0x02426538 CMP W21, W22
	0x0242653C LDP X20, X19, [X31 + 0x20]
	0x02426540 LDP X22, X21, [X31 + 0x10]
	0x02426544 CSET W0, LT
	0x02426548 LDR X30, [X31], #0x30
	0x0242654C RET
	0x02426550 BL 0x1C16F20
	0x02426554 BL 0x1C16F28
	0x02426558 STR X30, [X31 - 0x30]!
	0x0242655C STP X22, X21, [X31 + 0x10]
	0x02426560 STP X20, X19, [X31 + 0x20]
	0x02426564 MOV X19, X1
	0x02426568 MOV W20, W0
	0x0242656C MOV W21, W31
	0x02426570 LDR X0, [X19 + 0x20]
	0x02426574 LDRB W8, [X0 + 0x135]
	0x02426578 TBNZ X8, 0x0, 0x2426580
	0x0242657C BL 0x1C5C684
	0x02426580 LDR X8, [X0 + 0xC0]
	0x02426584 LDR X0, [X8 + 0x40]
	0x02426588 LDRB W8, [X0 + 0x135]
	0x0242658C TBNZ X8, 0x0, 0x2426594
	0x02426590 BL 0x1C5C684
	0x02426594 LDR W8, [X0 + 0xE0]
	0x02426598 CBNZ W8, 0x24265A0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1FB4000
	007 Move W8, [X22+2514]
	008 Move X20, X2
	009 Move W21, W1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x1CCF000
	016 Move X0, [X0+3672]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+2514], W8
	020 Move X0, X19
	021 Move X1, X31
	022 Call Object..ctor, X0
	023 Move X8, [X20+32]
	024 Move X8, [X8+192]
	025 Move X0, [X8+64]
	026 Move W8, [X0+309]
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {32}
	031 Call 0x1C5D684
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X8, [X20+32]
	037 Move W0, W21
	038 Move X8, [X8+192]
	039 Move X1, [X8+56]
	040 Call 0x2427430, X0
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfEqual {64}
	045 Move X8, [X20+32]
	046 Move X8, [X8+192]
	047 Move X0, [X8+64]
	048 Move W8, [X0+309]
	049 Move TEMP, X8
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfEqual {54}
	053 Call 0x1C5D684
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move X8, [X20+32]
	059 Move W0, W21
	060 Move X8, [X8+192]
	061 Move X1, [X8+72]
	062 Call 0x2427558, X0
	063 Move W21, W0
	064 Compare X19, 0
	065 JumpIfEqual {94}
	066 Move X8, 0x1CCF000
	067 Move X8, [X8+3672]
	068 Move W9, 1
	069 Move [X19+24], W9
	070 Move [X19+28], W21
	071 Move W1, W21
	072 Move X0, [X8]
	073 Call 0x1C17D6C
	074 Move [X19+32], X0
	075 Move X8, [X20+32]
	076 Move W20, [X19+28]
	077 Move X8, [X8+192]
	078 Move X0, [X8+80]
	079 Move W8, [X0+309]
	080 Move TEMP, X8
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfEqual {85}
	084 Call 0x1C5D684
	085 Move W1, W20
	086 Call 0x1C17D6C
	087 Move [X19+40], X0
	088 Move X20, [X31+32]
	089 Move X19, [X31+40]
	090 Move X22, [X31+16]
	091 Move X21, [X31+24]
	092 Move X30, [X31+48]
	093 Return 
	094 Call 0x1C17F20

Method: System.Boolean ContainsKey(K key)

Disassembly:
	0x0242659C BL 0x1C16DFC
	0x024265A0 LDR X0, [X19 + 0x20]
	0x024265A4 LDRB W8, [X0 + 0x135]
	0x024265A8 TBNZ X8, 0x0, 0x24265B0
	0x024265AC BL 0x1C5C684
	0x024265B0 LDR X8, [X0 + 0xC0]
	0x024265B4 LDR X0, [X8 + 0x40]
	0x024265B8 LDRB W8, [X0 + 0x135]
	0x024265BC TBNZ X8, 0x0, 0x24265C4

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X2+32]
	003 Move X8, [X8+192]
	004 Move X2, [X8+104]
	005 Call 0x2426E40, X0, X1
	006 NotImplemented "Instruction CMP not yet implemented."
	007 NotImplemented "Instruction CSET not yet implemented."
	008 Move X30, [X31+16]
	009 Return X0

Method: System.Boolean Contains(System.Collections.Generic.KeyValuePair`2<K, V> item)

Disassembly:
	0x024265C0 BL 0x1C5C684
	0x024265C4 LDR X8, [X0 + 0xB8]
	0x024265C8 LDR X8, [X8]
	0x024265CC CBZ X8, 0x24266E8
	0x024265D0 LDR X0, [X19 + 0x20]
	0x024265D4 LDR W22, [X8 + 0x18]
	0x024265D8 LDRB W9, [X0 + 0x135]
	0x024265DC TBNZ X9, 0x0, 0x24265E4
	0x024265E0 BL 0x1C5C684
	0x024265E4 LDR X8, [X0 + 0xC0]
	0x024265E8 LDR X0, [X8 + 0x40]
	0x024265EC LDRB W8, [X0 + 0x135]
	0x024265F0 TBNZ X8, 0x0, 0x24265F8
	0x024265F4 BL 0x1C5C684
	0x024265F8 LDR W8, [X0 + 0xE0]
	0x024265FC CBNZ W8, 0x2426604
	0x02426600 BL 0x1C16DFC
	0x02426604 LDR X0, [X19 + 0x20]
	0x02426608 LDRB W8, [X0 + 0x135]
	0x0242660C TBNZ X8, 0x0, 0x2426614
	0x02426610 BL 0x1C5C684
	0x02426614 LDR X8, [X0 + 0xC0]
	0x02426618 LDR X0, [X8 + 0x40]
	0x0242661C LDRB W8, [X0 + 0x135]
	0x02426620 TBNZ X8, 0x0, 0x2426628
	0x02426624 BL 0x1C5C684
	0x02426628 LDR X8, [X0 + 0xB8]
	0x0242662C CMP W21, W22
	0x02426630 LDR X8, [X8]
	0x02426634 B.GE 0x24266EC
	0x02426638 CBZ X8, 0x24266E8
	0x0242663C LDR W9, [X8 + 0x18]
	0x02426640 CMP W21, W9
	0x02426644 B.CS 0x2426784
	0x02426648 SXTW X22, W21
	0x0242664C ADD X8, X8, X22, 0x2, LSL
	0x02426650 LDR W8, [X8 + 0x20]
	0x02426654 CMP W8, W20
	0x02426658 B.HI 0x2426664

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X3+32]
	007 Move X19, X2
	008 Move X22, X3
	009 Move X21, X0
	010 Move X8, [X8+192]
	011 Move X2, [X8+104]
	012 Call 0x2426E40, X0, X1
	013 Move TEMP, X0
	014 And TEMP, TEMP, -2147483648
	015 Compare TEMP, -2147483648
	016 JumpIfEqual {42}
	017 Move X8, [X22+32]
	018 Move W20, W0
	019 Move X8, [X8+192]
	020 Move X0, [X8+136]
	021 Call 0x211C0E8
	022 Move X8, [X21+40]
	023 Compare X8, 0
	024 JumpIfEqual {49}
	025 Move W9, [X8+24]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Compare X0, 0
	028 JumpIfEqual {49}
	029 Move X9, [X0]
	030 Move W10, 24
	031 NotImplemented "Instruction UMADDL not yet implemented."
	032 Move X1, [X8+48]
	033 Move X8, [X9+440]
	034 Move X3, [X9+448]
	035 Move X2, X19
	036 NotImplemented "Instruction BLR not yet implemented."
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {42}
	041 Move W0, 1
	042 Move W0, W31
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X22, [X31+16]
	046 Move X21, [X31+24]
	047 Move X30, [X31+48]
	048 Return X0
	049 Call 0x1C17F20
	050 Call 0x1C17F28

Method: System.Boolean TryGetValue(K key, out V val)

Disassembly:
	0x0242665C ADD W21, W21, 0x1
	0x02426660 B 0x2426570
	0x02426664 LDR X0, [X19 + 0x20]
	0x02426668 LDRB W8, [X0 + 0x135]
	0x0242666C TBNZ X8, 0x0, 0x2426674
	0x02426670 BL 0x1C5C684
	0x02426674 LDR X8, [X0 + 0xC0]
	0x02426678 LDR X0, [X8 + 0x40]
	0x0242667C LDRB W8, [X0 + 0x135]
	0x02426680 TBNZ X8, 0x0, 0x2426688
	0x02426684 BL 0x1C5C684
	0x02426688 LDR W8, [X0 + 0xE0]
	0x0242668C CBNZ W8, 0x2426694
	0x02426690 BL 0x1C16DFC
	0x02426694 LDR X0, [X19 + 0x20]
	0x02426698 LDRB W8, [X0 + 0x135]
	0x0242669C TBNZ X8, 0x0, 0x24266A4
	0x024266A0 BL 0x1C5C684
	0x024266A4 LDR X8, [X0 + 0xC0]
	0x024266A8 LDR X0, [X8 + 0x40]
	0x024266AC LDRB W8, [X0 + 0x135]
	0x024266B0 TBNZ X8, 0x0, 0x24266B8
	0x024266B4 BL 0x1C5C684
	0x024266B8 LDR X8, [X0 + 0xB8]
	0x024266BC LDR X8, [X8]
	0x024266C0 CBZ X8, 0x24266E8
	0x024266C4 LDR W9, [X8 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X3+32]
	005 Move X19, X2
	006 Move X20, X0
	007 Move X8, [X8+192]
	008 Move X2, [X8+104]
	009 Call 0x2426E40, X0, X1
	010 Compare W0, 0
	011 JumpIfEqual {21}
	012 Move X8, [X20+40]
	013 Compare X8, 0
	014 JumpIfEqual {28}
	015 Move W9, [X8+24]
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W9, 24
	018 NotImplemented "Instruction SMADDL not yet implemented."
	019 Move X8, [X8+48]
	020 Move [X19], X8
	021 Move [X19], X31
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 NotImplemented "Instruction CSET not yet implemented."
	026 Move X30, [X31+32]
	027 Return X0
	028 Call 0x1C17F20
	029 Call 0x1C17F28

Method: V get_Item(K key)

Disassembly:
	0x024266C8 CMP W21, W9
	0x024266CC B.CS 0x2426784
	0x024266D0 ADD X8, X8, X22, 0x2, LSL
	0x024266D4 LDR W0, [X8 + 0x20]
	0x024266D8 LDP X20, X19, [X31 + 0x20]
	0x024266DC LDP X22, X21, [X31 + 0x10]
	0x024266E0 LDR X30, [X31], #0x30
	0x024266E4 RET
	0x024266E8 BL 0x1C16F20
	0x024266EC LDR X0, [X19 + 0x20]
	0x024266F0 MOV X20, X8
	0x024266F4 BL 0x199B99C
	0x024266F8 LDR X0, [X0 + 0xC0]
	0x024266FC MOVZ W1, 0x8
	0x02426700 BL 0x199B988
	0x02426704 LDR X8, [X0 + 0xB8]
	0x02426708 LDR X21, [X8]
	0x0242670C MOV X0, X21
	0x02426710 BL 0x19903C0
	0x02426714 MOV X0, X20
	0x02426718 BL 0x19903C0
	0x0242671C LDR W8, [X21 + 0x18]
	0x02426720 MOV X0, X20
	0x02426724 SUB W8, W8, 0x1
	0x02426728 SXTW X1, W8
	0x0242672C BL 0x19A4B0C
	0x02426730 MOV X1, X31
	0x02426734 BL 0x3399B00
	0x02426738 MOV X20, X0
	0x0242673C ADRP X0, 0x1CF6000
	0x02426740 LDR X0, [X0 + 0xCF8]
	0x02426744 BL 0x1C16D08
	0x02426748 MOV X1, X20
	0x0242674C MOV X2, X31
	0x02426750 BL 0x321B938
	0x02426754 MOV X20, X0
	0x02426758 ADRP X0, 0x1CCD000
	0x0242675C LDR X0, [X0 + 0x5B0]
	0x02426760 BL 0x1C16D08
	0x02426764 BL 0x1C16F10
	0x02426768 MOV X1, X20
	0x0242676C MOV X2, X31
	0x02426770 MOV X21, X0
	0x02426774 BL 0x337DF1C
	0x02426778 MOV X0, X21
	0x0242677C MOV X1, X19
	0x02426780 BL 0x1C16DEC
	0x02426784 BL 0x1C16F28
	0x02426788 TBZ X0, 0x0, 0x2426790
	0x0242678C RET
	0x02426790 STR X30, [X31 - 0x20]!

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X2+32]
	007 Move X19, X2
	008 Move W20, W1
	009 Move X21, X0
	010 Move X8, [X8+192]
	011 Move X2, [X8+104]
	012 Call 0x2426E40, X0, X1
	013 Compare W0, 0
	014 JumpIfEqual {29}
	015 Move X8, [X21+40]
	016 Compare X8, 0
	017 JumpIfEqual {55}
	018 Move W9, [X8+24]
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move W9, 24
	021 NotImplemented "Instruction SMADDL not yet implemented."
	022 Move X0, [X8+48]
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X30, [X31+16]
	026 Move X21, [X31+24]
	027 Add X31, X31, 48
	028 Return X0
	029 Move [X31+12], W20
	030 Move X0, 0x1CF7000
	031 Move X0, [X0+3296]
	032 Call 0x1C17D08
	033 Move X8, [X19+32]
	034 Move X20, X0
	035 Add X0, X31, 12
	036 Move X8, [X8+192]
	037 Move X1, [X8+200]
	038 Call Byte.ToString, X0
	039 Move X1, X0
	040 Move X0, X20
	041 Move X2, X31
	042 Call String.Concat, X0, X1
	043 Move X20, X0
	044 Move X0, 0x1CCE000
	045 Move X0, [X0+1456]
	046 Call 0x1C17D08
	047 Call 0x1C17F10
	048 Move X1, X20
	049 Move X2, X31
	050 Move X21, X0
	051 Call InvalidOperationException..ctor, X0, X1
	052 Move X0, X21
	053 Move X1, X19
	054 Call 0x1C17DEC
	055 Call 0x1C17F20
	056 Call 0x1C17F28

Method: System.Void set_Item(K key, V value)

Disassembly:
	0x02426794 STP X20, X19, [X31 + 0x10]
	0x02426798 ADRP X0, 0x1CCD000
	0x0242679C LDR X0, [X0 + 0x5B0]
	0x024267A0 MOV X19, X1
	0x024267A4 BL 0x1C16D08
	0x024267A8 BL 0x1C16F10
	0x024267AC MOV X20, X0
	0x024267B0 ADRP X0, 0x1CF6000
	0x024267B4 LDR X0, [X0 + 0xD00]
	0x024267B8 BL 0x1C16D08
	0x024267BC MOV X1, X0
	0x024267C0 MOV X0, X20
	0x024267C4 MOV X2, X31
	0x024267C8 BL 0x337DF1C
	0x024267CC MOV X0, X20
	0x024267D0 MOV X1, X19
	0x024267D4 BL 0x1C16DEC
	0x024267D8 STR X30, [X31 - 0x30]!
	0x024267DC STP X22, X21, [X31 + 0x10]
	0x024267E0 STP X20, X19, [X31 + 0x20]
	0x024267E4 ADRP X21, 0x1FB3000
	0x024267E8 ADRP X22, 0x1CF6000
	0x024267EC ADRP X20, 0x1CF6000
	0x024267F0 LDRB W8, [X21 + 0x9D4]
	0x024267F4 LDR X22, [X22 + 0xD08]
	0x024267F8 LDR X20, [X20 + 0xD10]
	0x024267FC MOV X19, X0
	0x02426800 TBNZ X8, 0x0, 0x2426824
	0x02426804 ADRP X0, 0x1CF6000
	0x02426808 LDR X0, [X0 + 0xD10]
	0x0242680C BL 0x1C16CF4
	0x02426810 ADRP X0, 0x1CF6000
	0x02426814 LDR X0, [X0 + 0xD08]
	0x02426818 BL 0x1C16CF4
	0x0242681C MOVZ W8, 0x1
	0x02426820 STRB W8, [X21 + 0x9D4]
	0x02426824 LDR X0, [X22]
	0x02426828 MOVZ W1, 0x1E
	0x0242682C BL 0x1C16D6C
	0x02426830 LDR X1, [X20]
	0x02426834 MOV X2, X31
	0x02426838 MOV X20, X0
	0x0242683C BL 0x32C5BD8
	0x02426840 LDR X0, [X19 + 0x20]
	0x02426844 LDRB W8, [X0 + 0x135]
	0x02426848 TBNZ X8, 0x0, 0x2426850
	0x0242684C BL 0x1C5C684
	0x02426850 LDR X8, [X0 + 0xC0]
	0x02426854 LDR X0, [X8 + 0x40]
	0x02426858 LDRB W8, [X0 + 0x135]
	0x0242685C TBNZ X8, 0x0, 0x2426864
	0x02426860 BL 0x1C5C684
	0x02426864 LDR X8, [X0 + 0xB8]
	0x02426868 STR X20, [X8]
	0x0242686C LDR X0, [X19 + 0x20]
	0x02426870 LDRB W8, [X0 + 0x135]
	0x02426874 TBNZ X8, 0x0, 0x242687C
	0x02426878 BL 0x1C5C684
	0x0242687C LDR X8, [X0 + 0xC0]
	0x02426880 LDR X0, [X8 + 0x40]
	0x02426884 LDRB W8, [X0 + 0x135]
	0x02426888 TBNZ X8, 0x0, 0x242689C
	0x0242688C LDP X20, X19, [X31 + 0x20]
	0x02426890 LDP X22, X21, [X31 + 0x10]
	0x02426894 LDR X30, [X31], #0x30
	0x02426898 B 0x1C5C684
	0x0242689C LDP X20, X19, [X31 + 0x20]
	0x024268A0 LDP X22, X21, [X31 + 0x10]
	0x024268A4 LDR X30, [X31], #0x30
	0x024268A8 RET
	0x024268AC SUB X31, X31, 0x20
	0x024268B0 STP X31, X30, [X31 + 0x8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X3+32]
	009 Move X19, X2
	010 Move X21, X3
	011 Move W23, W1
	012 Move X8, [X8+192]
	013 Move X20, X0
	014 Move X2, [X8+104]
	015 Call 0x2426E40, X0, X1
	016 Compare W0, 0
	017 JumpIfEqual {71}
	018 Move X8, [X20+40]
	019 Compare X8, 0
	020 JumpIfEqual {86}
	021 Move W9, [X8+24]
	022 Move W22, W0
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X9, [X21+32]
	025 Move X24, W22
	026 Move W1, W23
	027 Move X9, [X9+192]
	028 Move X2, [X9+224]
	029 Move W9, 24
	030 NotImplemented "Instruction MADD not yet implemented."
	031 Add X0, X8, 44
	032 Call Byte.Equals, X0, X1
	033 Move X8, [X21+32]
	034 Move W23, W0
	035 Move X8, [X8+192]
	036 Move X8, [X8+64]
	037 Move W9, [X8+309]
	038 Move TEMP, X9
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {45}
	042 Move X0, X8
	043 Call 0x1C5D684
	044 Move X8, X0
	045 Move W9, [X8+224]
	046 Compare W9, 0
	047 JumpIfNotEqual {50}
	048 Move X0, X8
	049 Call 0x1C17DFC
	050 Move X8, [X21+32]
	051 And W0, W23, 1
	052 Move X8, [X8+192]
	053 Move X1, [X8+232]
	054 Call 0x2427788, X0
	055 Move X8, [X20+40]
	056 Compare X8, 0
	057 JumpIfEqual {86}
	058 Move W9, [X8+24]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move W9, 24
	061 NotImplemented "Instruction MADD not yet implemented."
	062 Move [X8+48], X19
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X24, [X31+16]
	068 Move X23, [X31+24]
	069 Move X30, [X31+64]
	070 Return 
	071 Move X8, [X21+32]
	072 Move X0, X20
	073 Move W1, W23
	074 Move X2, X19
	075 Move X8, [X8+192]
	076 Move X20, [X31+48]
	077 Move X19, [X31+56]
	078 Move X22, [X31+32]
	079 Move X21, [X31+40]
	080 Move X24, [X31+16]
	081 Move X23, [X31+24]
	082 Move X3, [X8+208]
	083 Move X30, [X31+64]
	084 Call 0x2426F30, X0, X1, X2
	085 Return 
	086 Call 0x1C17F20
	087 Call 0x1C17F28

Method: System.Void Set(K key, V val)

Disassembly:
	0x024268B4 STR X31, [X31]
	0x024268B8 LDR X8, [X1 + 0x20]
	0x024268BC MOV X1, X0
	0x024268C0 ADD X0, X31, 0x0
	0x024268C4 LDR X8, [X8 + 0xC0]
	0x024268C8 LDR X2, [X8 + 0x8]
	0x024268CC BL 0x2EDA69C
	0x024268D0 LDP X0, X1, [X31]
	0x024268D4 LDR X30, [X31 + 0x10]
	0x024268D8 ADD X31, X31, 0x20
	0x024268DC RET
	0x024268E0 LDR X0, [X0 + 0x40]
	0x024268E4 RET
	0x024268E8 LDR X0, [X0 + 0x38]
	0x024268EC RET
	0x024268F0 SUB X31, X31, 0x20
	0x024268F4 STP X31, X30, [X31 + 0x8]
	0x024268F8 STR X31, [X31]
	0x024268FC LDR X8, [X1 + 0x20]
	0x02426900 MOV X1, X0
	0x02426904 ADD X0, X31, 0x0
	0x02426908 LDR X8, [X8 + 0xC0]
	0x0242690C LDR X2, [X8 + 0x30]
	0x02426910 BL 0x278B548
	0x02426914 LDP X0, X1, [X31]
	0x02426918 LDR X30, [X31 + 0x10]
	0x0242691C ADD X31, X31, 0x20
	0x02426920 RET
	0x02426924 LDP W8, W9, [X0 + 0x14]
	0x02426928 ORN W8, W31, W8, 0x0
	0x0242692C ADD W0, W9, W8
	0x02426930 RET
	0x02426934 LDRB W0, [X0 + 0x30]
	0x02426938 RET
	0x0242693C LDR W0, [X0 + 0x1C]
	0x02426940 RET
	0x02426944 STR X30, [X31 - 0x30]!
	0x02426948 STP X22, X21, [X31 + 0x10]
	0x0242694C STP X20, X19, [X31 + 0x20]
	0x02426950 ADRP X22, 0x1FB3000
	0x02426954 LDRB W8, [X22 + 0x9D5]
	0x02426958 MOV X20, X2
	0x0242695C MOV W21, W1
	0x02426960 MOV X19, X0
	0x02426964 TBNZ X8, 0x0, 0x242697C
	0x02426968 ADRP X0, 0x1CCE000
	0x0242696C LDR X0, [X0 + 0xE58]
	0x02426970 BL 0x1C16CF4
	0x02426974 MOVZ W8, 0x1
	0x02426978 STRB W8, [X22 + 0x9D5]
	0x0242697C MOV X0, X19
	0x02426980 MOV X1, X31
	0x02426984 BL 0x33BDD8C
	0x02426988 LDR X8, [X20 + 0x20]
	0x0242698C LDR X8, [X8 + 0xC0]
	0x02426990 LDR X0, [X8 + 0x40]
	0x02426994 LDRB W8, [X0 + 0x135]
	0x02426998 TBNZ X8, 0x0, 0x24269A0
	0x0242699C BL 0x1C5C684
	0x024269A0 LDR W8, [X0 + 0xE0]
	0x024269A4 CBNZ W8, 0x24269AC
	0x024269A8 BL 0x1C16DFC
	0x024269AC LDR X8, [X20 + 0x20]
	0x024269B0 MOV W0, W21
	0x024269B4 LDR X8, [X8 + 0xC0]
	0x024269B8 LDR X1, [X8 + 0x38]
	0x024269BC BL 0x24278F4
	0x024269C0 TBNZ X0, 0x0, 0x2426A00
	0x024269C4 LDR X8, [X20 + 0x20]
	0x024269C8 LDR X8, [X8 + 0xC0]
	0x024269CC LDR X0, [X8 + 0x40]
	0x024269D0 LDRB W8, [X0 + 0x135]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X3+32]
	009 Move X19, X2
	010 Move X21, X3
	011 Move W23, W1
	012 Move X8, [X8+192]
	013 Move X20, X0
	014 Move X2, [X8+104]
	015 Call 0x2426E40, X0, X1
	016 Compare W0, 0
	017 JumpIfEqual {71}
	018 Move X8, [X20+40]
	019 Compare X8, 0
	020 JumpIfEqual {86}
	021 Move W9, [X8+24]
	022 Move W22, W0
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X9, [X21+32]
	025 Move X24, W22
	026 Move W1, W23
	027 Move X9, [X9+192]
	028 Move X2, [X9+224]
	029 Move W9, 24
	030 NotImplemented "Instruction MADD not yet implemented."
	031 Add X0, X8, 44
	032 Call Byte.Equals, X0, X1
	033 Move X8, [X21+32]
	034 Move W23, W0
	035 Move X8, [X8+192]
	036 Move X8, [X8+64]
	037 Move W9, [X8+309]
	038 Move TEMP, X9
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {45}
	042 Move X0, X8
	043 Call 0x1C5D684
	044 Move X8, X0
	045 Move W9, [X8+224]
	046 Compare W9, 0
	047 JumpIfNotEqual {50}
	048 Move X0, X8
	049 Call 0x1C17DFC
	050 Move X8, [X21+32]
	051 And W0, W23, 1
	052 Move X8, [X8+192]
	053 Move X1, [X8+232]
	054 Call 0x2427788, X0
	055 Move X8, [X20+40]
	056 Compare X8, 0
	057 JumpIfEqual {86}
	058 Move W9, [X8+24]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move W9, 24
	061 NotImplemented "Instruction MADD not yet implemented."
	062 Move [X8+48], X19
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X24, [X31+16]
	068 Move X23, [X31+24]
	069 Move X30, [X31+64]
	070 Return 
	071 Move X8, [X21+32]
	072 Move X0, X20
	073 Move W1, W23
	074 Move X2, X19
	075 Move X8, [X8+192]
	076 Move X20, [X31+48]
	077 Move X19, [X31+56]
	078 Move X22, [X31+32]
	079 Move X21, [X31+40]
	080 Move X24, [X31+16]
	081 Move X23, [X31+24]
	082 Move X3, [X8+208]
	083 Move X30, [X31+64]
	084 Call 0x2426F30, X0, X1, X2
	085 Return 
	086 Call 0x1C17F20
	087 Call 0x1C17F28

Method: System.Void Add(K key, V val)

Disassembly:
	0x024269D4 TBNZ X8, 0x0, 0x24269DC
	0x024269D8 BL 0x1C5C684
	0x024269DC LDR W8, [X0 + 0xE0]
	0x024269E0 CBNZ W8, 0x24269E8
	0x024269E4 BL 0x1C16DFC
	0x024269E8 LDR X8, [X20 + 0x20]
	0x024269EC MOV W0, W21
	0x024269F0 LDR X8, [X8 + 0xC0]
	0x024269F4 LDR X1, [X8 + 0x48]
	0x024269F8 BL 0x2427A1C
	0x024269FC MOV W21, W0
	0x02426A00 CBZ X19, 0x2426A5C
	0x02426A04 ADRP X8, 0x1CCE000
	0x02426A08 LDR X8, [X8 + 0xE58]
	0x02426A0C MOVZ W9, 0x1
	0x02426A10 STP W9, W21, [X19 + 0x18]
	0x02426A14 MOV W1, W21
	0x02426A18 LDR X0, [X8]
	0x02426A1C BL 0x1C16D6C
	0x02426A20 STR X0, [X19 + 0x20]
	0x02426A24 LDR X8, [X20 + 0x20]
	0x02426A28 LDR W20, [X19 + 0x1C]
	0x02426A2C LDR X8, [X8 + 0xC0]
	0x02426A30 LDR X0, [X8 + 0x50]
	0x02426A34 LDRB W8, [X0 + 0x135]
	0x02426A38 TBNZ X8, 0x0, 0x2426A40
	0x02426A3C BL 0x1C5C684
	0x02426A40 MOV W1, W20
	0x02426A44 BL 0x1C16D6C
	0x02426A48 STR X0, [X19 + 0x28]
	0x02426A4C LDP X20, X19, [X31 + 0x20]
	0x02426A50 LDP X22, X21, [X31 + 0x10]
	0x02426A54 LDR X30, [X31], #0x30
	0x02426A58 RET
	0x02426A5C BL 0x1C16F20
	0x02426A60 STR X30, [X31 - 0x10]!
	0x02426A64 LDR X8, [X2 + 0x20]
	0x02426A68 LDR X8, [X8 + 0xC0]
	0x02426A6C LDR X2, [X8 + 0x68]
	0x02426A70 BL 0x2427304
	0x02426A74 CMP W0, 0x0
	0x02426A78 CSET W0, NE
	0x02426A7C LDR X30, [X31], #0x10
	0x02426A80 RET
	0x02426A84 STR X30, [X31 - 0x30]!
	0x02426A88 STP X22, X21, [X31 + 0x10]
	0x02426A8C STP X20, X19, [X31 + 0x20]
	0x02426A90 LDR X8, [X3 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X3+32]
	007 Move X20, X2
	008 Move X19, X3
	009 Move W21, W1
	010 Move X8, [X8+192]
	011 Move X22, X0
	012 Move X2, [X8+104]
	013 Call 0x2426E40, X0, X1
	014 Compare W0, 0
	015 JumpIfNotEqual {29}
	016 Move X8, [X19+32]
	017 Move X0, X22
	018 Move W1, W21
	019 Move X2, X20
	020 Move X8, [X8+192]
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X3, [X8+208]
	026 Move X30, [X31+48]
	027 Call 0x2426F30, X0, X1, X2
	028 Return 
	029 Move [X31+12], W21
	030 Move X0, 0x1CF7000
	031 Move X0, [X0+3304]
	032 Call 0x1C17D08
	033 Move X8, [X19+32]
	034 Move X20, X0
	035 Add X0, X31, 12
	036 Move X8, [X8+192]
	037 Move X1, [X8+200]
	038 Call Byte.ToString, X0
	039 Move X1, X0
	040 Move X0, X20
	041 Move X2, X31
	042 Call String.Concat, X0, X1
	043 Move X20, X0
	044 Move X0, 0x1CCE000
	045 Move X0, [X0+1456]
	046 Call 0x1C17D08
	047 Call 0x1C17F10
	048 Move X1, X20
	049 Move X2, X31
	050 Move X21, X0
	051 Call InvalidOperationException..ctor, X0, X1
	052 Move X0, X21
	053 Move X1, X19
	054 Call 0x1C17DEC

Method: System.Void Add(System.Collections.Generic.KeyValuePair`2<K, V> item)

Disassembly:
	0x02426A94 MOV X19, X2
	0x02426A98 MOV X22, X3
	0x02426A9C MOV X21, X0
	0x02426AA0 LDR X8, [X8 + 0xC0]
	0x02426AA4 LDR X2, [X8 + 0x68]
	0x02426AA8 BL 0x2427304
	0x02426AAC TBNZ X0, 0x1F, 0x2426B04
	0x02426AB0 LDR X8, [X22 + 0x20]
	0x02426AB4 MOV W20, W0
	0x02426AB8 LDR X8, [X8 + 0xC0]
	0x02426ABC LDR X0, [X8 + 0x88]
	0x02426AC0 BL 0x211B0E8
	0x02426AC4 LDR X8, [X21 + 0x28]
	0x02426AC8 CBZ X8, 0x2426B18
	0x02426ACC LDR W9, [X8 + 0x18]
	0x02426AD0 CMP W20, W9
	0x02426AD4 B.CS 0x2426B1C
	0x02426AD8 CBZ X0, 0x2426B18
	0x02426ADC LDR X9, [X0]
	0x02426AE0 MOVZ W10, 0x18
	0x02426AE4 UMADDL X8, X20, X10, X8
	0x02426AE8 LDR X1, [X8 + 0x30]
	0x02426AEC LDP X8, X3, [X9 + 0x1B8]
	0x02426AF0 MOV X2, X19
	0x02426AF4 BLR X8
	0x02426AF8 TBZ X0, 0x0, 0x2426B04
	0x02426AFC MOVZ W0, 0x1
	0x02426B00 B 0x2426B08
	0x02426B04 MOV W0, W31
	0x02426B08 LDP X20, X19, [X31 + 0x20]
	0x02426B0C LDP X22, X21, [X31 + 0x10]
	0x02426B10 LDR X30, [X31], #0x30
	0x02426B14 RET
	0x02426B18 BL 0x1C16F20
	0x02426B1C BL 0x1C16F28
	0x02426B20 STR X30, [X31 - 0x20]!
	0x02426B24 STP X20, X19, [X31 + 0x10]
	0x02426B28 LDR X8, [X3 + 0x20]
	0x02426B2C MOV X19, X2
	0x02426B30 MOV X20, X0
	0x02426B34 LDR X8, [X8 + 0xC0]
	0x02426B38 LDR X2, [X8 + 0x68]
	0x02426B3C BL 0x2427304
	0x02426B40 CBZ W0, 0x2426B6C
	0x02426B44 LDR X8, [X20 + 0x28]
	0x02426B48 CBZ X8, 0x2426B84
	0x02426B4C LDR W9, [X8 + 0x18]
	0x02426B50 CMP W0, W9

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X3+32]
	007 Move X20, X2
	008 Move X19, X3
	009 Move X21, X1
	010 Move X8, [X8+192]
	011 Move X22, X0
	012 Move X2, [X8+104]
	013 Call 0x2426E40, X0, X1
	014 Compare W0, 0
	015 JumpIfNotEqual {29}
	016 Move X8, [X19+32]
	017 Move X0, X22
	018 Move W1, W21
	019 Move X2, X20
	020 Move X8, [X8+192]
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X3, [X8+208]
	026 Move X30, [X31+48]
	027 Call 0x2426F30, X0, X1, X2
	028 Return 
	029 Move [X31+12], W21
	030 Move X0, 0x1CF7000
	031 Move X0, [X0+3304]
	032 Call 0x1C17D08
	033 Move X8, [X19+32]
	034 Move X20, X0
	035 Add X0, X31, 12
	036 Move X8, [X8+192]
	037 Move X1, [X8+200]
	038 Call Byte.ToString, X0
	039 Move X1, X0
	040 Move X0, X20
	041 Move X2, X31
	042 Call String.Concat, X0, X1
	043 Move X20, X0
	044 Move X0, 0x1CCE000
	045 Move X0, [X0+1456]
	046 Call 0x1C17D08
	047 Call 0x1C17F10
	048 Move X1, X20
	049 Move X2, X31
	050 Move X21, X0
	051 Call InvalidOperationException..ctor, X0, X1
	052 Move X0, X21
	053 Move X1, X19
	054 Call 0x1C17DEC

Method: System.Boolean Remove(K key)

Disassembly:
	0x02426B54 B.CS 0x2426B88
	0x02426B58 MOVZ W9, 0x18
	0x02426B5C SMADDL X8, X0, X9, X8
	0x02426B60 LDR X8, [X8 + 0x30]
	0x02426B64 STR X8, [X19]
	0x02426B68 B 0x2426B70
	0x02426B6C STR X31, [X19]
	0x02426B70 LDP X20, X19, [X31 + 0x10]
	0x02426B74 CMP W0, 0x0
	0x02426B78 CSET W0, NE
	0x02426B7C LDR X30, [X31], #0x20
	0x02426B80 RET
	0x02426B84 BL 0x1C16F20
	0x02426B88 BL 0x1C16F28
	0x02426B8C SUB X31, X31, 0x30
	0x02426B90 STP X30, X21, [X31 + 0x10]
	0x02426B94 STP X20, X19, [X31 + 0x20]
	0x02426B98 LDR X8, [X2 + 0x20]
	0x02426B9C MOV X19, X2
	0x02426BA0 MOV W20, W1
	0x02426BA4 MOV X21, X0
	0x02426BA8 LDR X8, [X8 + 0xC0]
	0x02426BAC LDR X2, [X8 + 0x68]
	0x02426BB0 BL 0x2427304
	0x02426BB4 CBZ W0, 0x2426BE8
	0x02426BB8 LDR X8, [X21 + 0x28]
	0x02426BBC CBZ X8, 0x2426C50
	0x02426BC0 LDR W9, [X8 + 0x18]
	0x02426BC4 CMP W0, W9
	0x02426BC8 B.CS 0x2426C54
	0x02426BCC MOVZ W9, 0x18
	0x02426BD0 SMADDL X8, X0, X9, X8
	0x02426BD4 LDR X0, [X8 + 0x30]
	0x02426BD8 LDP X20, X19, [X31 + 0x20]
	0x02426BDC LDP X30, X21, [X31 + 0x10]
	0x02426BE0 ADD X31, X31, 0x30
	0x02426BE4 RET
	0x02426BE8 STR W20, [X31 + 0xC]
	0x02426BEC ADRP X0, 0x1CF6000
	0x02426BF0 LDR X0, [X0 + 0xCE0]
	0x02426BF4 BL 0x1C16D08
	0x02426BF8 LDR X8, [X19 + 0x20]
	0x02426BFC MOV X20, X0
	0x02426C00 ADD X0, X31, 0xC
	0x02426C04 LDR X8, [X8 + 0xC0]
	0x02426C08 LDR X1, [X8 + 0xC8]
	0x02426C0C BL 0x337B6E0
	0x02426C10 MOV X1, X0
	0x02426C14 MOV X0, X20
	0x02426C18 MOV X2, X31
	0x02426C1C BL 0x321B938
	0x02426C20 MOV X20, X0
	0x02426C24 ADRP X0, 0x1CCD000
	0x02426C28 LDR X0, [X0 + 0x5B0]
	0x02426C2C BL 0x1C16D08
	0x02426C30 BL 0x1C16F10
	0x02426C34 MOV X1, X20
	0x02426C38 MOV X2, X31
	0x02426C3C MOV X21, X0
	0x02426C40 BL 0x337DF1C
	0x02426C44 MOV X0, X21
	0x02426C48 MOV X1, X19
	0x02426C4C BL 0x1C16DEC
	0x02426C50 BL 0x1C16F20
	0x02426C54 BL 0x1C16F28
	0x02426C58 STR X30, [X31 - 0x40]!
	0x02426C5C STP X24, X23, [X31 + 0x10]
	0x02426C60 STP X22, X21, [X31 + 0x20]
	0x02426C64 STP X20, X19, [X31 + 0x30]
	0x02426C68 LDR X8, [X3 + 0x20]
	0x02426C6C MOV X19, X2
	0x02426C70 MOV X22, X3
	0x02426C74 MOV W23, W1
	0x02426C78 LDR X8, [X8 + 0xC0]
	0x02426C7C MOV X20, X0
	0x02426C80 LDR X2, [X8 + 0x68]
	0x02426C84 BL 0x2427304
	0x02426C88 CBZ W0, 0x2426D44
	0x02426C8C LDR X8, [X20 + 0x28]
	0x02426C90 CBZ X8, 0x2426D70
	0x02426C94 LDR W9, [X8 + 0x18]
	0x02426C98 MOV W21, W0
	0x02426C9C CMP W0, W9
	0x02426CA0 B.CS 0x2426D74
	0x02426CA4 LDR X9, [X22 + 0x20]
	0x02426CA8 SXTW X24, W21
	0x02426CAC MOV W1, W23
	0x02426CB0 LDR X9, [X9 + 0xC0]
	0x02426CB4 LDR X2, [X9 + 0xE0]
	0x02426CB8 MOVZ W9, 0x18
	0x02426CBC MADD X8, X24, X9, X8
	0x02426CC0 ADD X0, X8, 0x2C
	0x02426CC4 BL 0x337B6C8
	0x02426CC8 LDR X8, [X22 + 0x20]
	0x02426CCC MOV W23, W0
	0x02426CD0 LDR X8, [X8 + 0xC0]
	0x02426CD4 LDR X8, [X8 + 0x40]
	0x02426CD8 LDRB W9, [X8 + 0x135]
	0x02426CDC TBNZ X9, 0x0, 0x2426CEC
	0x02426CE0 MOV X0, X8
	0x02426CE4 BL 0x1C5C684
	0x02426CE8 MOV X8, X0
	0x02426CEC LDR W9, [X8 + 0xE0]
	0x02426CF0 CBNZ W9, 0x2426CFC
	0x02426CF4 MOV X0, X8
	0x02426CF8 BL 0x1C16DFC
	0x02426CFC LDR X8, [X22 + 0x20]
	0x02426D00 AND W0, W23, 0x1
	0x02426D04 LDR X8, [X8 + 0xC0]
	0x02426D08 LDR X1, [X8 + 0xE8]
	0x02426D0C BL 0x2427C4C
	0x02426D10 LDR X8, [X20 + 0x28]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move [X31+12], W1
	011 Move X8, [X2+32]
	012 Move X19, X0
	013 Add X0, X31, 12
	014 Move X21, X2
	015 Move X8, [X8+192]
	016 Move X1, [X8+240]
	017 Call Byte.GetHashCode, X0
	018 Move X8, [X19+32]
	019 Compare X8, 0
	020 JumpIfEqual {122}
	021 Move W9, [X19+28]
	022 Move W10, [X8+24]
	023 Move W20, W0
	024 NotImplemented "Instruction UDIV not yet implemented."
	025 NotImplemented "Instruction MSUB not yet implemented."
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Add X8, X8, W9
	028 Move W9, [X8+32]
	029 Compare W9, 0
	030 JumpIfEqual {65}
	031 Move X8, [X19+40]
	032 Move W24, W31
	033 Move W25, 24
	034 Compare X8, 0
	035 JumpIfEqual {122}
	036 Move W22, W9
	037 Move W9, [X8+24]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X23, W22
	040 NotImplemented "Instruction MADD not yet implemented."
	041 Move W9, [X9+40]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X9, [X21+32]
	044 Move W1, [X31+12]
	045 NotImplemented "Instruction NOP not yet implemented."
	046 NotImplemented "Instruction MADD not yet implemented."
	047 Add X0, X8, 44
	048 Move X9, [X9+192]
	049 Move X2, [X9+224]
	050 Call Byte.Equals, X0, X1
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfEqual {66}
	055 Move X8, [X19+40]
	056 Compare X8, 0
	057 JumpIfEqual {122}
	058 Move W9, [X8+24]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 NotImplemented "Instruction MADD not yet implemented."
	061 Move W9, [X9+36]
	062 Move W24, W22
	063 Compare W9, 0
	064 JumpIfNotEqual {34}
	065 Move W0, W31
	066 Compare W24, 0
	067 JumpIfEqual {81}
	068 Move X8, [X19+40]
	069 Compare X8, 0
	070 JumpIfEqual {122}
	071 Move X9, [X8+24]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move W10, 24
	075 Add X11, X8, 32
	076 NotImplemented "Instruction MADD not yet implemented."
	077 Move W12, [X12+4]
	078 NotImplemented "Instruction NOP not yet implemented."
	079 NotImplemented "Instruction SMADDL not yet implemented."
	080 Move [X10+4], W12
	081 Move X8, [X19+40]
	082 Compare X8, 0
	083 JumpIfEqual {122}
	084 Move X9, [X8+24]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X10, [X19+32]
	087 Compare X10, 0
	088 JumpIfEqual {122}
	089 Move W11, [X19+28]
	090 Move W12, [X10+24]
	091 NotImplemented "Instruction UDIV not yet implemented."
	092 NotImplemented "Instruction MSUB not yet implemented."
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move W12, 24
	095 NotImplemented "Instruction MADD not yet implemented."
	096 Move W12, [X12+36]
	097 Add X10, X10, W11
	098 Move [X10+32], W12
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Move W9, 24
	101 NotImplemented "Instruction MADD not yet implemented."
	102 Move [X8+32], W31
	103 Move W9, [X19+16]
	104 Move [X8+48], X31
	105 Move W0, 1
	106 Move [X8+36], W9
	107 Move W8, [X19+20]
	108 Add W8, W8, 1
	109 Move [X19+16], W22
	110 Move [X19+20], W8
	111 Move X20, [X31+64]
	112 Move X19, [X31+72]
	113 Move X22, [X31+48]
	114 Move X21, [X31+56]
	115 Move X24, [X31+32]
	116 Move X23, [X31+40]
	117 Move X30, [X31+16]
	118 Move X25, [X31+24]
	119 Add X31, X31, 80
	120 Return X0
	121 Call 0x1C17F28
	122 Call 0x1C17F20

Method: System.Boolean Remove(System.Collections.Generic.KeyValuePair`2<K, V> item)

Disassembly:
	0x02426D14 CBZ X8, 0x2426D70
	0x02426D18 LDR W9, [X8 + 0x18]
	0x02426D1C CMP W21, W9
	0x02426D20 B.CS 0x2426D74
	0x02426D24 MOVZ W9, 0x18
	0x02426D28 MADD X8, X24, X9, X8
	0x02426D2C STR X19, [X8 + 0x30]
	0x02426D30 LDP X20, X19, [X31 + 0x30]
	0x02426D34 LDP X22, X21, [X31 + 0x20]
	0x02426D38 LDP X24, X23, [X31 + 0x10]
	0x02426D3C LDR X30, [X31], #0x40
	0x02426D40 RET
	0x02426D44 LDR X8, [X22 + 0x20]
	0x02426D48 MOV X0, X20
	0x02426D4C MOV W1, W23
	0x02426D50 MOV X2, X19
	0x02426D54 LDR X8, [X8 + 0xC0]
	0x02426D58 LDP X20, X19, [X31 + 0x30]
	0x02426D5C LDP X22, X21, [X31 + 0x20]
	0x02426D60 LDP X24, X23, [X31 + 0x10]
	0x02426D64 LDR X3, [X8 + 0xD0]
	0x02426D68 LDR X30, [X31], #0x40

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X3+32]
	006 Move X20, X3
	007 Move X19, X1
	008 Move X21, X0
	009 Move X8, [X8+192]
	010 Move X3, [X8+248]
	011 Call 0x24265C0, X0, X1
	012 Move TEMP, X0
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfNotEqual {27}
	016 Move X8, [X20+32]
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X0, X21
	021 Move X8, [X8+192]
	022 Move X2, [X8+256]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call 0x2426B54, X0, X1
	026 Return X0
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move W0, W31
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0

Method: System.Collections.Generic.IEnumerator`1<System.Collections.Generic.KeyValuePair`2<K, V>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K,V>>.GetEnumerator()

Disassembly:
	0x02426D6C B 0x24273F4
	0x02426D70 BL 0x1C16F20
	0x02426D74 BL 0x1C16F28
	0x02426D78 STR X30, [X31 - 0x40]!
	0x02426D7C STP X24, X23, [X31 + 0x10]
	0x02426D80 STP X22, X21, [X31 + 0x20]
	0x02426D84 STP X20, X19, [X31 + 0x30]
	0x02426D88 LDR X8, [X3 + 0x20]
	0x02426D8C MOV X19, X2
	0x02426D90 MOV X22, X3
	0x02426D94 MOV W23, W1
	0x02426D98 LDR X8, [X8 + 0xC0]
	0x02426D9C MOV X20, X0
	0x02426DA0 LDR X2, [X8 + 0x68]
	0x02426DA4 BL 0x2427304
	0x02426DA8 CBZ W0, 0x2426E64
	0x02426DAC LDR X8, [X20 + 0x28]
	0x02426DB0 CBZ X8, 0x2426E90
	0x02426DB4 LDR W9, [X8 + 0x18]
	0x02426DB8 MOV W21, W0

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move [X31+40], X19
	004 Move [X31+16], X31
	005 Move [X31+24], X31
	006 Move X8, [X1+32]
	007 Move X19, X1
	008 Move X1, X0
	009 Add X0, X31, 16
	010 Move X8, [X8+192]
	011 Move X2, [X8+272]
	012 Call 0x24A19F0, X0, X1
	013 Move V0, [X31+1]
	014 Add X1, X31, 0
	015 Move [X31], V0
	016 Move X8, [X19+32]
	017 Move X8, [X8+192]
	018 Move X0, [X8+264]
	019 Call 0x1C17E04
	020 Move X30, [X31+32]
	021 Move X19, [X31+40]
	022 Add X31, X31, 48
	023 Return X0

Method: ExitGames.Client.Photon.NonAllocDictionary`2/PairIterator<K, V> GetEnumerator()

Disassembly:
	0x02426DBC CMP W0, W9
	0x02426DC0 B.CS 0x2426E94
	0x02426DC4 LDR X9, [X22 + 0x20]
	0x02426DC8 SXTW X24, W21
	0x02426DCC MOV W1, W23
	0x02426DD0 LDR X9, [X9 + 0xC0]
	0x02426DD4 LDR X2, [X9 + 0xE0]
	0x02426DD8 MOVZ W9, 0x18
	0x02426DDC MADD X8, X24, X9, X8
	0x02426DE0 ADD X0, X8, 0x2C
	0x02426DE4 BL 0x337B6C8
	0x02426DE8 LDR X8, [X22 + 0x20]
	0x02426DEC MOV W23, W0

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+8], X31
	003 Move [X31+16], X30
	004 Move [X31], X31
	005 Move X8, [X1+32]
	006 Move X1, X0
	007 Add X0, X31, 0
	008 Move X8, [X8+192]
	009 Move X2, [X8+272]
	010 Call 0x24A19F0, X0, X1
	011 Move X0, [X31]
	012 Move X1, [X31+8]
	013 Move X30, [X31+16]
	014 Add X31, X31, 32
	015 Return X0

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x02426DF0 LDR X8, [X8 + 0xC0]
	0x02426DF4 LDR X8, [X8 + 0x40]
	0x02426DF8 LDRB W9, [X8 + 0x135]
	0x02426DFC TBNZ X9, 0x0, 0x2426E0C
	0x02426E00 MOV X0, X8
	0x02426E04 BL 0x1C5C684
	0x02426E08 MOV X8, X0
	0x02426E0C LDR W9, [X8 + 0xE0]
	0x02426E10 CBNZ W9, 0x2426E1C
	0x02426E14 MOV X0, X8
	0x02426E18 BL 0x1C16DFC
	0x02426E1C LDR X8, [X22 + 0x20]
	0x02426E20 AND W0, W23, 0x1
	0x02426E24 LDR X8, [X8 + 0xC0]
	0x02426E28 LDR X1, [X8 + 0xE8]
	0x02426E2C BL 0x2427C4C
	0x02426E30 LDR X8, [X20 + 0x28]
	0x02426E34 CBZ X8, 0x2426E90
	0x02426E38 LDR W9, [X8 + 0x18]
	0x02426E3C CMP W21, W9

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move [X31+40], X19
	004 Move [X31+16], X31
	005 Move [X31+24], X31
	006 Move X8, [X1+32]
	007 Move X19, X1
	008 Move X1, X0
	009 Add X0, X31, 16
	010 Move X8, [X8+192]
	011 Move X2, [X8+272]
	012 Call 0x24A19F0, X0, X1
	013 Move V0, [X31+1]
	014 Add X1, X31, 0
	015 Move [X31], V0
	016 Move X8, [X19+32]
	017 Move X8, [X8+192]
	018 Move X0, [X8+264]
	019 Call 0x1C17E04
	020 Move X30, [X31+32]
	021 Move X19, [X31+40]
	022 Add X31, X31, 48
	023 Return X0

Method: System.Int32 FindNode(K key)

Disassembly:
	0x02426E40 B.CS 0x2426E94
	0x02426E44 MOVZ W9, 0x18
	0x02426E48 MADD X8, X24, X9, X8
	0x02426E4C STR X19, [X8 + 0x30]
	0x02426E50 LDP X20, X19, [X31 + 0x30]
	0x02426E54 LDP X22, X21, [X31 + 0x20]
	0x02426E58 LDP X24, X23, [X31 + 0x10]
	0x02426E5C LDR X30, [X31], #0x40
	0x02426E60 RET
	0x02426E64 LDR X8, [X22 + 0x20]
	0x02426E68 MOV X0, X20
	0x02426E6C MOV W1, W23
	0x02426E70 MOV X2, X19
	0x02426E74 LDR X8, [X8 + 0xC0]
	0x02426E78 LDP X20, X19, [X31 + 0x30]
	0x02426E7C LDP X22, X21, [X31 + 0x20]
	0x02426E80 LDP X24, X23, [X31 + 0x10]
	0x02426E84 LDR X3, [X8 + 0xD0]
	0x02426E88 LDR X30, [X31], #0x40
	0x02426E8C B 0x24273F4
	0x02426E90 BL 0x1C16F20
	0x02426E94 BL 0x1C16F28
	0x02426E98 STR X30, [X31 - 0x30]!
	0x02426E9C STP X22, X21, [X31 + 0x10]
	0x02426EA0 STP X20, X19, [X31 + 0x20]
	0x02426EA4 LDR X8, [X3 + 0x20]
	0x02426EA8 MOV X20, X2
	0x02426EAC MOV X19, X3
	0x02426EB0 MOV W21, W1
	0x02426EB4 LDR X8, [X8 + 0xC0]
	0x02426EB8 MOV X22, X0
	0x02426EBC LDR X2, [X8 + 0x68]
	0x02426EC0 BL 0x2427304
	0x02426EC4 CBNZ W0, 0x2426EF0
	0x02426EC8 LDR X8, [X19 + 0x20]
	0x02426ECC MOV X0, X22
	0x02426ED0 MOV W1, W21
	0x02426ED4 MOV X2, X20
	0x02426ED8 LDR X8, [X8 + 0xC0]
	0x02426EDC LDP X20, X19, [X31 + 0x20]
	0x02426EE0 LDP X22, X21, [X31 + 0x10]
	0x02426EE4 LDR X3, [X8 + 0xD0]
	0x02426EE8 LDR X30, [X31], #0x30
	0x02426EEC B 0x24273F4
	0x02426EF0 STR W21, [X31 + 0xC]
	0x02426EF4 ADRP X0, 0x1CF6000
	0x02426EF8 LDR X0, [X0 + 0xCE8]
	0x02426EFC BL 0x1C16D08
	0x02426F00 LDR X8, [X19 + 0x20]
	0x02426F04 MOV X20, X0
	0x02426F08 ADD X0, X31, 0xC
	0x02426F0C LDR X8, [X8 + 0xC0]
	0x02426F10 LDR X1, [X8 + 0xC8]
	0x02426F14 BL 0x337B6E0
	0x02426F18 MOV X1, X0
	0x02426F1C MOV X0, X20
	0x02426F20 MOV X2, X31
	0x02426F24 BL 0x321B938
	0x02426F28 MOV X20, X0
	0x02426F2C ADRP X0, 0x1CCD000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move [X31+12], W1
	009 Move X8, [X2+32]
	010 Move X20, X0
	011 Add X0, X31, 12
	012 Move X19, X2
	013 Move X8, [X8+192]
	014 Move X1, [X8+240]
	015 Call Byte.GetHashCode, X0
	016 Move X8, [X20+32]
	017 Compare X8, 0
	018 JumpIfEqual {70}
	019 Move W9, [X20+28]
	020 Move W10, [X8+24]
	021 Move W21, W0
	022 NotImplemented "Instruction UDIV not yet implemented."
	023 NotImplemented "Instruction MSUB not yet implemented."
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Add X8, X8, W9
	026 Move W22, [X8+32]
	027 Compare W22, 0
	028 JumpIfEqual {60}
	029 Move X8, [X20+40]
	030 Move W23, 24
	031 Compare X8, 0
	032 JumpIfEqual {70}
	033 Move W9, [X8+24]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X24, W22
	036 NotImplemented "Instruction MADD not yet implemented."
	037 Move W9, [X9+40]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X9, [X19+32]
	040 Move W1, [X31+12]
	041 NotImplemented "Instruction NOP not yet implemented."
	042 NotImplemented "Instruction MADD not yet implemented."
	043 Add X0, X8, 44
	044 Move X9, [X9+192]
	045 Move X2, [X9+224]
	046 Call Byte.Equals, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfEqual {60}
	051 Move X8, [X20+40]
	052 Compare X8, 0
	053 JumpIfEqual {70}
	054 Move W9, [X8+24]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 NotImplemented "Instruction MADD not yet implemented."
	057 Move W22, [X9+36]
	058 Compare W22, 0
	059 JumpIfNotEqual {31}
	060 Move W0, W22
	061 Move X20, [X31+48]
	062 Move X19, [X31+56]
	063 Move X22, [X31+32]
	064 Move X21, [X31+40]
	065 Move X24, [X31+16]
	066 Move X23, [X31+24]
	067 Move X30, [X31+64]
	068 Return X0
	069 Call 0x1C17F28
	070 Call 0x1C17F20

Method: System.Void Insert(K key, V val)

Disassembly:
	0x02426F30 LDR X0, [X0 + 0x5B0]
	0x02426F34 BL 0x1C16D08
	0x02426F38 BL 0x1C16F10
	0x02426F3C MOV X1, X20
	0x02426F40 MOV X2, X31
	0x02426F44 MOV X21, X0
	0x02426F48 BL 0x337DF1C
	0x02426F4C MOV X0, X21
	0x02426F50 MOV X1, X19
	0x02426F54 BL 0x1C16DEC
	0x02426F58 STR X30, [X31 - 0x30]!
	0x02426F5C STP X22, X21, [X31 + 0x10]
	0x02426F60 STP X20, X19, [X31 + 0x20]
	0x02426F64 LDR X8, [X3 + 0x20]
	0x02426F68 MOV X20, X2
	0x02426F6C MOV X19, X3
	0x02426F70 MOV X21, X1
	0x02426F74 LDR X8, [X8 + 0xC0]
	0x02426F78 MOV X22, X0
	0x02426F7C LDR X2, [X8 + 0x68]
	0x02426F80 BL 0x2427304
	0x02426F84 CBNZ W0, 0x2426FB0
	0x02426F88 LDR X8, [X19 + 0x20]
	0x02426F8C MOV X0, X22
	0x02426F90 MOV W1, W21
	0x02426F94 MOV X2, X20
	0x02426F98 LDR X8, [X8 + 0xC0]
	0x02426F9C LDP X20, X19, [X31 + 0x20]
	0x02426FA0 LDP X22, X21, [X31 + 0x10]
	0x02426FA4 LDR X3, [X8 + 0xD0]
	0x02426FA8 LDR X30, [X31], #0x30
	0x02426FAC B 0x24273F4
	0x02426FB0 STR W21, [X31 + 0xC]
	0x02426FB4 ADRP X0, 0x1CF6000
	0x02426FB8 LDR X0, [X0 + 0xCE8]
	0x02426FBC BL 0x1C16D08
	0x02426FC0 LDR X8, [X19 + 0x20]
	0x02426FC4 MOV X20, X0
	0x02426FC8 ADD X0, X31, 0xC
	0x02426FCC LDR X8, [X8 + 0xC0]
	0x02426FD0 LDR X1, [X8 + 0xC8]
	0x02426FD4 BL 0x337B6E0
	0x02426FD8 MOV X1, X0
	0x02426FDC MOV X0, X20
	0x02426FE0 MOV X2, X31
	0x02426FE4 BL 0x321B938
	0x02426FE8 MOV X20, X0
	0x02426FEC ADRP X0, 0x1CCD000
	0x02426FF0 LDR X0, [X0 + 0x5B0]
	0x02426FF4 BL 0x1C16D08
	0x02426FF8 BL 0x1C16F10
	0x02426FFC MOV X1, X20
	0x02427000 MOV X2, X31
	0x02427004 MOV X21, X0
	0x02427008 BL 0x337DF1C
	0x0242700C MOV X0, X21
	0x02427010 MOV X1, X19
	0x02427014 BL 0x1C16DEC
	0x02427018 SUB X31, X31, 0x50
	0x0242701C STP X30, X25, [X31 + 0x10]
	0x02427020 STP X24, X23, [X31 + 0x20]
	0x02427024 STP X22, X21, [X31 + 0x30]
	0x02427028 STP X20, X19, [X31 + 0x40]
	0x0242702C STR W1, [X31 + 0xC]
	0x02427030 LDR X8, [X2 + 0x20]
	0x02427034 MOV X19, X0
	0x02427038 ADD X0, X31, 0xC
	0x0242703C MOV X21, X2
	0x02427040 LDR X8, [X8 + 0xC0]
	0x02427044 LDR X1, [X8 + 0xF0]
	0x02427048 BL 0x337B6D8
	0x0242704C LDR X8, [X19 + 0x20]
	0x02427050 CBZ X8, 0x24271D4
	0x02427054 LDR W9, [X19 + 0x1C]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move [X31+12], W1
	007 Move W8, [X0+20]
	008 Move X21, X3
	009 Move X20, X0
	010 Move X19, X2
	011 Subtract W8, W8, 1
	012 Move X9, [X20+40]
	013 Compare X9, 0
	014 JumpIfEqual {76}
	015 Move W22, [X20+16]
	016 Move W10, [X9+24]
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X10, W22
	019 Move W11, 24
	020 NotImplemented "Instruction MADD not yet implemented."
	021 Move W9, [X9+36]
	022 Move [X20+16], W9
	023 Move [X20+20], W8
	024 Move W22, [X20+24]
	025 Move W8, [X20+28]
	026 Move X22, W22
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X8, [X21+32]
	029 Move X0, X20
	030 Move X8, [X8+192]
	031 Move X1, [X8+288]
	032 Call 0x2427058, X0
	033 Move W22, [X20+24]
	034 Add W8, W22, 1
	035 Move [X20+24], W8
	036 Move X8, [X21+32]
	037 Add X0, X31, 12
	038 Move X8, [X8+192]
	039 Move X1, [X8+240]
	040 Call Byte.GetHashCode, X0
	041 Move X8, [X20+40]
	042 Compare X8, 0
	043 JumpIfEqual {76}
	044 Move W9, [X8+24]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move W9, 24
	047 Move W11, 1
	048 NotImplemented "Instruction SMADDL not yet implemented."
	049 Move W10, [X20+28]
	050 Move [X9+32], W11
	051 Move [X9+40], W0
	052 Move X9, [X20+32]
	053 Compare X9, 0
	054 JumpIfEqual {76}
	055 Move W11, [X9+24]
	056 NotImplemented "Instruction UDIV not yet implemented."
	057 NotImplemented "Instruction MSUB not yet implemented."
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Add X9, X9, W10
	060 Move W10, [X9+32]
	061 Move W11, W22
	062 Move X11, W11
	063 Move W12, 24
	064 NotImplemented "Instruction MADD not yet implemented."
	065 Move [X8+36], W10
	066 Move W10, [X31+12]
	067 Move [X8+48], X19
	068 Move X20, [X31+32]
	069 Move X19, [X31+40]
	070 Move [X8+44], W10
	071 Move [X9+32], W22
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Return 
	076 Call 0x1C17F20
	077 Call 0x1C17F28

Method: System.Void Expand()

Disassembly:
	0x02427058 LDR W10, [X8 + 0x18]
	0x0242705C MOV W20, W0
	0x02427060 UDIV W11, W0, W9
	0x02427064 MSUB W9, W11, W9, W0
	0x02427068 CMP W9, W10
	0x0242706C B.CS 0x24271D0
	0x02427070 ADD X8, X8, W9, 0x2, SXTW
	0x02427074 LDR W9, [X8 + 0x20]
	0x02427078 CBZ W9, 0x24270F8
	0x0242707C LDR X8, [X19 + 0x28]
	0x02427080 MOV W24, W31
	0x02427084 MOVZ W25, 0x18
	0x02427088 CBZ X8, 0x24271D4
	0x0242708C MOV W22, W9
	0x02427090 LDR W9, [X8 + 0x18]
	0x02427094 CMP W22, W9
	0x02427098 B.CS 0x24271D0
	0x0242709C SXTW X23, W22
	0x024270A0 MADD X9, X23, X25, X8
	0x024270A4 LDR W9, [X9 + 0x28]
	0x024270A8 CMP W9, W20
	0x024270AC B.NE 0x24270DC
	0x024270B0 LDR X9, [X21 + 0x20]
	0x024270B4 LDR W1, [X31 + 0xC]
	0x024270B8 NOP
	0x024270BC MADD X8, X23, X25, X8
	0x024270C0 ADD X0, X8, 0x2C
	0x024270C4 LDR X9, [X9 + 0xC0]
	0x024270C8 LDR X2, [X9 + 0xE0]
	0x024270CC BL 0x337B6C8
	0x024270D0 TBNZ X0, 0x0, 0x2427100
	0x024270D4 LDR X8, [X19 + 0x28]
	0x024270D8 CBZ X8, 0x24271D4
	0x024270DC LDR W9, [X8 + 0x18]
	0x024270E0 CMP W22, W9
	0x024270E4 B.CS 0x24271D0
	0x024270E8 MADD X9, X23, X25, X8
	0x024270EC LDR W9, [X9 + 0x24]
	0x024270F0 MOV W24, W22
	0x024270F4 CBNZ W9, 0x2427088
	0x024270F8 MOV W0, W31
	0x024270FC B 0x24271B8
	0x02427100 CBZ W24, 0x2427140
	0x02427104 LDR X8, [X19 + 0x28]
	0x02427108 CBZ X8, 0x24271D4
	0x0242710C LDR X9, [X8 + 0x18]
	0x02427110 CMP W22, W9
	0x02427114 B.CS 0x24271D0
	0x02427118 CMP W24, W9
	0x0242711C B.CS 0x24271D0
	0x02427120 MOVZ W10, 0x18
	0x02427124 ADD X11, X8, 0x20
	0x02427128 MADD X12, X23, X10, X11
	0x0242712C LDR W12, [X12 + 0x4]
	0x02427130 NOP
	0x02427134 SMADDL X10, X24, X10, X11
	0x02427138 STR W12, [X10 + 0x4]
	0x0242713C B 0x2427188
	0x02427140 LDR X8, [X19 + 0x28]
	0x02427144 CBZ X8, 0x24271D4
	0x02427148 LDR X9, [X8 + 0x18]
	0x0242714C CMP W22, W9
	0x02427150 B.CS 0x24271D0
	0x02427154 LDR X10, [X19 + 0x20]
	0x02427158 CBZ X10, 0x24271D4
	0x0242715C LDR W11, [X19 + 0x1C]
	0x02427160 LDR W12, [X10 + 0x18]
	0x02427164 UDIV W13, W20, W11
	0x02427168 MSUB W11, W13, W11, W20
	0x0242716C CMP W11, W12
	0x02427170 B.CS 0x24271D0
	0x02427174 MOVZ W12, 0x18
	0x02427178 MADD X12, X23, X12, X8
	0x0242717C LDR W12, [X12 + 0x24]
	0x02427180 ADD X10, X10, W11, 0x2, SXTW
	0x02427184 STR W12, [X10 + 0x20]
	0x02427188 CMP W22, W9
	0x0242718C B.CS 0x24271D0
	0x02427190 MOVZ W9, 0x18
	0x02427194 MADD X8, X23, X9, X8
	0x02427198 STRB W31, [X8 + 0x20]
	0x0242719C LDR W9, [X19 + 0x10]
	0x024271A0 STR X31, [X8 + 0x30]
	0x024271A4 MOVZ W0, 0x1
	0x024271A8 STR W9, [X8 + 0x24]
	0x024271AC LDR W8, [X19 + 0x14]
	0x024271B0 ADD W8, W8, 0x1
	0x024271B4 STP W22, W8, [X19 + 0x10]
	0x024271B8 LDP X20, X19, [X31 + 0x40]
	0x024271BC LDP X22, X21, [X31 + 0x30]
	0x024271C0 LDP X24, X23, [X31 + 0x20]
	0x024271C4 LDP X30, X25, [X31 + 0x10]
	0x024271C8 ADD X31, X31, 0x50
	0x024271CC RET
	0x024271D0 BL 0x1C16F28
	0x024271D4 BL 0x1C16F20
	0x024271D8 STP X30, X21, [X31 - 0x20]!
	0x024271DC STP X20, X19, [X31 + 0x10]
	0x024271E0 LDR X8, [X3 + 0x20]
	0x024271E4 MOV X20, X3
	0x024271E8 MOV X19, X1
	0x024271EC MOV X21, X0
	0x024271F0 LDR X8, [X8 + 0xC0]
	0x024271F4 LDR X3, [X8 + 0xF8]
	0x024271F8 BL 0x2426A84
	0x024271FC TBZ X0, 0x0, 0x2427220
	0x02427200 LDR X8, [X20 + 0x20]
	0x02427204 MOV W1, W19
	0x02427208 LDP X20, X19, [X31 + 0x10]
	0x0242720C MOV X0, X21
	0x02427210 LDR X8, [X8 + 0xC0]
	0x02427214 LDR X2, [X8 + 0x100]
	0x02427218 LDP X30, X21, [X31], #0x20
	0x0242721C B 0x2427018
	0x02427220 LDP X20, X19, [X31 + 0x10]
	0x02427224 MOV W0, W31
	0x02427228 LDP X30, X21, [X31], #0x20
	0x0242722C RET
	0x02427230 SUB X31, X31, 0x30
	0x02427234 STP X30, X19, [X31 + 0x20]
	0x02427238 STP X31, X31, [X31 + 0x10]
	0x0242723C LDR X8, [X1 + 0x20]
	0x02427240 MOV X19, X1
	0x02427244 MOV X1, X0
	0x02427248 ADD X0, X31, 0x10
	0x0242724C LDR X8, [X8 + 0xC0]
	0x02427250 LDR X2, [X8 + 0x110]
	0x02427254 BL 0x24A0BC0
	0x02427258 LDR V0, [X31 + 0x1]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x1FB3000
	011 Move W8, [X21+2515]
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x1CCE000
	019 Move X0, [X0+3672]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+2515], W8
	023 Move X21, [X20+32]
	024 Compare X21, 0
	025 JumpIfEqual {140}
	026 Move X8, [X19+32]
	027 Move W23, [X20+24]
	028 Move X8, [X8+192]
	029 Move X0, [X8+64]
	030 Move W8, [X0+309]
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {36}
	035 Call 0x1C5D684
	036 Move X22, 0x1CCE000
	037 Move W8, [X0+224]
	038 Move X22, [X22+3672]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X8, [X19+32]
	043 Move W9, [X21+24]
	044 Move X8, [X8+192]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction CSET not yet implemented."
	047 Move X1, [X8+232]
	048 Call 0x2427788, X0
	049 Move X8, [X19+32]
	050 Move W0, [X20+28]
	051 Move X8, [X8+192]
	052 Move X1, [X8+72]
	053 Call 0x2427558, X0
	054 Move X8, [X19+32]
	055 Move W9, [X20+28]
	056 Move W21, W0
	057 Move X8, [X8+192]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 NotImplemented "Instruction CSET not yet implemented."
	060 Move X1, [X8+232]
	061 Call 0x2427788, X0
	062 Move X0, [X22]
	063 Move W1, W21
	064 Call 0x1C17D6C
	065 Move X8, [X19+32]
	066 Move X22, X0
	067 Move X8, [X8+192]
	068 Move X8, [X8+80]
	069 Move W9, [X8+309]
	070 Move TEMP, X9
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfEqual {77}
	074 Move X0, X8
	075 Call 0x1C5D684
	076 Move X8, X0
	077 Move X0, X8
	078 Move W1, W21
	079 Call 0x1C17D6C
	080 Move X8, [X20+40]
	081 Compare X8, 0
	082 JumpIfEqual {140}
	083 Move W4, [X8+24]
	084 Move X23, X0
	085 Move X0, X8
	086 Move W1, W31
	087 Move X2, X23
	088 Move W3, W31
	089 Move X5, X31
	090 Call Array.Copy, X0, X1, X2, X3, X4
	091 Move X8, [X20+40]
	092 Compare X8, 0
	093 JumpIfEqual {140}
	094 Add X24, X23, 64
	095 Move W25, 1
	096 Move W8, [X8+24]
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Compare X23, 0
	099 JumpIfEqual {140}
	100 Move W8, [X23+24]
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move X8, [X19+32]
	103 NotImplemented "Instruction LDURB not yet implemented."
	104 Move X8, [X8+192]
	105 Move X0, [X8+64]
	106 Move W8, [X0+309]
	107 Move TEMP, X8
	108 And TEMP, TEMP, 1
	109 Compare TEMP, 1
	110 JumpIfEqual {112}
	111 Call 0x1C5D684
	112 Move W8, [X0+224]
	113 Compare W8, 0
	114 JumpIfNotEqual {116}
	115 Call 0x1C17DFC
	116 Move X8, [X19+32]
	117 NotImplemented "Instruction CMP not yet implemented."
	118 NotImplemented "Instruction CSET not yet implemented."
	119 Move X8, [X8+192]
	120 Move X1, [X8+232]
	121 Call 0x2427788, X0
	122 Move W8, [X23+24]
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Compare X22, 0
	125 JumpIfEqual {140}
	126 Move W8, [X24]
	127 Move W9, [X22+24]
	128 NotImplemented "Instruction UDIV not yet implemented."
	129 NotImplemented "Instruction MSUB not yet implemented."
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Add X8, X22, W8
	132 Move W9, [X8+32]
	133 Move [X24-4], W9
	134 Move [X8+32], W25
	135 Move X8, [X20+40]
	136 Add W25, W25, 1
	137 Add X24, X24, 24
	138 Compare X8, 0
	139 JumpIfNotEqual {96}
	140 Call 0x1C17F20
	141 Move [X20+32], X22
	142 Move [X20+40], X23
	143 Move [X20+28], W21
	144 Move X20, [X31+64]
	145 Move X19, [X31+72]
	146 Move X22, [X31+48]
	147 Move X21, [X31+56]
	148 Move X24, [X31+32]
	149 Move X23, [X31+40]
	150 Move X26, [X31+16]
	151 Move X25, [X31+24]
	152 Move X30, [X31+80]
	153 Return 
	154 Call 0x1C17F28

Method: System.Void Clear()

Disassembly:
	0x0242725C ADD X1, X31, 0x0
	0x02427260 STR V0, [X31]
	0x02427264 LDR X8, [X19 + 0x20]
	0x02427268 LDR X8, [X8 + 0xC0]
	0x0242726C LDR X0, [X8 + 0x108]
	0x02427270 BL 0x1C16E04
	0x02427274 LDP X30, X19, [X31 + 0x20]
	0x02427278 ADD X31, X31, 0x30
	0x0242727C RET
	0x02427280 SUB X31, X31, 0x20
	0x02427284 STP X31, X30, [X31 + 0x8]
	0x02427288 STR X31, [X31]
	0x0242728C LDR X8, [X1 + 0x20]
	0x02427290 MOV X1, X0
	0x02427294 ADD X0, X31, 0x0
	0x02427298 LDR X8, [X8 + 0xC0]
	0x0242729C LDR X2, [X8 + 0x110]
	0x024272A0 BL 0x24A0BC0
	0x024272A4 LDP X0, X1, [X31]
	0x024272A8 LDR X30, [X31 + 0x10]
	0x024272AC ADD X31, X31, 0x20
	0x024272B0 RET
	0x024272B4 SUB X31, X31, 0x30

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+24]
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move X19, X0
	006 Move X0, [X0+40]
	007 Compare X0, 0
	008 JumpIfEqual {26}
	009 Move W2, [X0+24]
	010 Move W1, W31
	011 Move X3, X31
	012 Call Array.Clear, X0, X1, X2
	013 Move X0, [X19+32]
	014 Compare X0, 0
	015 JumpIfEqual {26}
	016 Move W2, [X0+24]
	017 Move W1, W31
	018 Move X3, X31
	019 Call Array.Clear, X0, X1, X2
	020 Move W8, 1
	021 Move [X19+16], X31
	022 Move [X19+24], W8
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Return 
	026 Call 0x1C17F20

Method: System.Void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K,V>>.CopyTo(System.Collections.Generic.KeyValuePair`2<K, V>[] array, System.Int32 index)

Disassembly:
	0x024272B8 STP X30, X19, [X31 + 0x20]
	0x024272BC STP X31, X31, [X31 + 0x10]
	0x024272C0 LDR X8, [X1 + 0x20]
	0x024272C4 MOV X19, X1
	0x024272C8 MOV X1, X0
	0x024272CC ADD X0, X31, 0x10
	0x024272D0 LDR X8, [X8 + 0xC0]
	0x024272D4 LDR X2, [X8 + 0x110]
	0x024272D8 BL 0x24A0BC0
	0x024272DC LDR V0, [X31 + 0x1]
	0x024272E0 ADD X1, X31, 0x0
	0x024272E4 STR V0, [X31]
	0x024272E8 LDR X8, [X19 + 0x20]
	0x024272EC LDR X8, [X8 + 0xC0]
	0x024272F0 LDR X0, [X8 + 0x108]
	0x024272F4 BL 0x1C16E04
	0x024272F8 LDP X30, X19, [X31 + 0x20]
	0x024272FC ADD X31, X31, 0x30
	0x02427300 RET
	0x02427304 STR X30, [X31 - 0x40]!
	0x02427308 STP X24, X23, [X31 + 0x10]
	0x0242730C STP X22, X21, [X31 + 0x20]
	0x02427310 STP X20, X19, [X31 + 0x30]
	0x02427314 STR W1, [X31 + 0xC]
	0x02427318 LDR X8, [X2 + 0x20]
	0x0242731C MOV X20, X0
	0x02427320 ADD X0, X31, 0xC
	0x02427324 MOV X19, X2
	0x02427328 LDR X8, [X8 + 0xC0]
	0x0242732C LDR X1, [X8 + 0xF0]
	0x02427330 BL 0x337B6D8
	0x02427334 LDR X8, [X20 + 0x20]
	0x02427338 CBZ X8, 0x24273F0
	0x0242733C LDR W9, [X20 + 0x1C]
	0x02427340 LDR W10, [X8 + 0x18]
	0x02427344 MOV W21, W0
	0x02427348 UDIV W11, W0, W9
	0x0242734C MSUB W9, W11, W9, W0
	0x02427350 CMP W9, W10
	0x02427354 B.CS 0x24273EC
	0x02427358 ADD X8, X8, W9, 0x2, SXTW
	0x0242735C LDR W22, [X8 + 0x20]
	0x02427360 CBZ W22, 0x24273D4
	0x02427364 LDR X8, [X20 + 0x28]
	0x02427368 MOVZ W23, 0x18
	0x0242736C CBZ X8, 0x24273F0
	0x02427370 LDR W9, [X8 + 0x18]
	0x02427374 CMP W22, W9
	0x02427378 B.CS 0x24273EC
	0x0242737C SXTW X24, W22
	0x02427380 MADD X9, X24, X23, X8
	0x02427384 LDR W9, [X9 + 0x28]
	0x02427388 CMP W9, W21
	0x0242738C B.NE 0x24273BC
	0x02427390 LDR X9, [X19 + 0x20]
	0x02427394 LDR W1, [X31 + 0xC]
	0x02427398 NOP
	0x0242739C MADD X8, X24, X23, X8
	0x024273A0 ADD X0, X8, 0x2C
	0x024273A4 LDR X9, [X9 + 0xC0]
	0x024273A8 LDR X2, [X9 + 0xE0]
	0x024273AC BL 0x337B6C8
	0x024273B0 TBNZ X0, 0x0, 0x24273D4
	0x024273B4 LDR X8, [X20 + 0x28]
	0x024273B8 CBZ X8, 0x24273F0
	0x024273BC LDR W9, [X8 + 0x18]
	0x024273C0 CMP W22, W9
	0x024273C4 B.CS 0x24273EC
	0x024273C8 MADD X9, X24, X23, X8
	0x024273CC LDR W22, [X9 + 0x24]
	0x024273D0 CBNZ W22, 0x242736C
	0x024273D4 MOV W0, W22
	0x024273D8 LDP X20, X19, [X31 + 0x30]
	0x024273DC LDP X22, X21, [X31 + 0x20]
	0x024273E0 LDP X24, X23, [X31 + 0x10]
	0x024273E4 LDR X30, [X31], #0x40
	0x024273E8 RET
	0x024273EC BL 0x1C16F28
	0x024273F0 BL 0x1C16F20
	0x024273F4 STR X30, [X31 - 0x30]!
	0x024273F8 STP X22, X21, [X31 + 0x10]
	0x024273FC STP X20, X19, [X31 + 0x20]
	0x02427400 STR W1, [X31 + 0xC]
	0x02427404 LDR W8, [X0 + 0x14]
	0x02427408 MOV X21, X3
	0x0242740C MOV X20, X0
	0x02427410 MOV X19, X2
	0x02427414 SUBS W8, W8, 0x1
	0x02427418 B.LT 0x242744C
	0x0242741C LDR X9, [X20 + 0x28]
	0x02427420 CBZ X9, 0x2427514
	0x02427424 LDR W22, [X20 + 0x10]
	0x02427428 LDR W10, [X9 + 0x18]
	0x0242742C CMP W22, W10

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+32], X24
	004 Move [X31+40], X23
	005 Move [X31+48], X22
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X19, X3
	010 Compare X1, 0
	011 JumpIfEqual {76}
	012 Move W22, W2
	013 Move TEMP, X2
	014 And TEMP, TEMP, -2147483648
	015 Compare TEMP, -2147483648
	016 JumpIfEqual {69}
	017 Move W8, [X1+24]
	018 Move X20, X1
	019 Subtract W8, W8, W22
	020 Move W9, [X0+20]
	021 Move W10, [X0+24]
	022 Move X21, X0
	023 NotImplemented "Instruction ORN not yet implemented."
	024 Add W9, W10, W9
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X8, [X21+40]
	027 Compare X8, 0
	028 JumpIfEqual {58}
	029 Move X23, X31
	030 Move W24, 1
	031 Move W9, [X8+24]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Add X9, X8, X23
	035 Move W10, [X9+56]
	036 Compare W10, 0
	037 JumpIfEqual {54}
	038 Move X2, [X9+72]
	039 Move W1, [X9+68]
	040 Move [X31], X31
	041 Move [X31+8], X31
	042 Move X8, [X19+32]
	043 Add X0, X31, 0
	044 Move X8, [X8+192]
	045 Move X3, [X8+312]
	046 Call KeyValuePair`2<Byte, Object>..ctor, X0, X1, X2
	047 Move W8, [X20+24]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move V0, [X31]
	050 Add X8, X20, W22
	051 Add W22, W22, 1
	052 Move [X8+2], V0
	053 Move X8, [X21+40]
	054 Add X24, X24, 1
	055 Add X23, X23, 24
	056 Compare X8, 0
	057 JumpIfNotEqual {31}
	058 Call 0x1C17F20
	059 Move X20, [X31+64]
	060 Move X19, [X31+72]
	061 Move X22, [X31+48]
	062 Move X21, [X31+56]
	063 Move X24, [X31+32]
	064 Move X23, [X31+40]
	065 Move X30, [X31+16]
	066 Add X31, X31, 80
	067 Return 
	068 Call 0x1C17F28
	069 Move X0, 0x1CD5000
	070 Move X0, [X0+1888]
	071 Call 0x1C17D08
	072 Call 0x1C17F10
	073 Move X1, X31
	074 Move X20, X0
	075 Call ArgumentOutOfRangeException..ctor, X0
	076 Move X0, 0x1CD2000
	077 Move X0, [X0+1320]
	078 Call 0x1C17D08
	079 Call 0x1C17F10
	080 Move X20, X0
	081 Move X0, 0x1CF5000
	082 Move X0, [X0+1600]
	083 Call 0x1C17D08
	084 Move X1, X0
	085 Move X0, X20
	086 Move X2, X31
	087 Call ArgumentNullException..ctor, X0, X1
	088 Move X0, 0x1CD5000
	089 Move X0, [X0+1400]
	090 Call 0x1C17D08
	091 Call 0x1C17F10
	092 Move X20, X0
	093 Move X0, 0x1CF6000
	094 Move X0, [X0+3312]
	095 Call 0x1C17D08
	096 Move X1, X0
	097 Move X0, X20
	098 Move X2, X31
	099 Call ArgumentException..ctor, X0, X1
	100 Move X0, X20
	101 Move X1, X19
	102 Call 0x1C17DEC

Method: System.Boolean IsPrimeFromList(System.UInt32 value)

Disassembly:
	0x02427430 B.CS 0x2427518
	0x02427434 SXTW X10, W22
	0x02427438 MOVZ W11, 0x18
	0x0242743C MADD X9, X10, X11, X9
	0x02427440 LDR W9, [X9 + 0x24]
	0x02427444 STP W9, W8, [X20 + 0x10]
	0x02427448 B 0x242747C
	0x0242744C LDP W22, W8, [X20 + 0x18]
	0x02427450 SXTW X22, W22
	0x02427454 CMP X22, X8
	0x02427458 B.NE 0x2427474
	0x0242745C LDR X8, [X21 + 0x20]
	0x02427460 MOV X0, X20
	0x02427464 LDR X8, [X8 + 0xC0]
	0x02427468 LDR X1, [X8 + 0x120]
	0x0242746C BL 0x242751C
	0x02427470 LDR W22, [X20 + 0x18]
	0x02427474 ADD W8, W22, 0x1
	0x02427478 STR W8, [X20 + 0x18]
	0x0242747C LDR X8, [X21 + 0x20]
	0x02427480 ADD X0, X31, 0xC
	0x02427484 LDR X8, [X8 + 0xC0]
	0x02427488 LDR X1, [X8 + 0xF0]
	0x0242748C BL 0x337B6D8
	0x02427490 LDR X8, [X20 + 0x28]
	0x02427494 CBZ X8, 0x2427514
	0x02427498 LDR W9, [X8 + 0x18]
	0x0242749C CMP W22, W9
	0x024274A0 B.CS 0x2427518
	0x024274A4 MOVZ W9, 0x18
	0x024274A8 MOVZ W11, 0x1
	0x024274AC SMADDL X9, X22, X9, X8
	0x024274B0 LDR W10, [X20 + 0x1C]
	0x024274B4 STRB W11, [X9 + 0x20]
	0x024274B8 STR W0, [X9 + 0x28]
	0x024274BC LDR X9, [X20 + 0x20]
	0x024274C0 CBZ X9, 0x2427514
	0x024274C4 LDR W11, [X9 + 0x18]
	0x024274C8 UDIV W12, W0, W10
	0x024274CC MSUB W10, W12, W10, W0
	0x024274D0 CMP W10, W11
	0x024274D4 B.CS 0x2427518
	0x024274D8 ADD X9, X9, W10, 0x2, UXTW
	0x024274DC LDR W10, [X9 + 0x20]
	0x024274E0 MOV W11, W22
	0x024274E4 SXTW X11, W11
	0x024274E8 MOVZ W12, 0x18
	0x024274EC MADD X8, X11, X12, X8
	0x024274F0 STR W10, [X8 + 0x24]
	0x024274F4 LDR W10, [X31 + 0xC]
	0x024274F8 STR X19, [X8 + 0x30]
	0x024274FC LDP X20, X19, [X31 + 0x20]
	0x02427500 STR W10, [X8 + 0x2C]
	0x02427504 STR W22, [X9 + 0x20]
	0x02427508 LDP X22, X21, [X31 + 0x10]
	0x0242750C LDR X30, [X31], #0x30
	0x02427510 RET
	0x02427514 BL 0x1C16F20
	0x02427518 BL 0x1C16F28
	0x0242751C STR X30, [X31 - 0x50]!
	0x02427520 STP X26, X25, [X31 + 0x10]
	0x02427524 STP X24, X23, [X31 + 0x20]
	0x02427528 STP X22, X21, [X31 + 0x30]
	0x0242752C STP X20, X19, [X31 + 0x40]
	0x02427530 ADRP X21, 0x1FB2000
	0x02427534 LDRB W8, [X21 + 0x9D6]
	0x02427538 MOV X19, X1
	0x0242753C MOV X20, X0
	0x02427540 TBNZ X8, 0x0, 0x2427558
	0x02427544 ADRP X0, 0x1CCD000
	0x02427548 LDR X0, [X0 + 0xE58]
	0x0242754C BL 0x1C16CF4
	0x02427550 MOVZ W8, 0x1
	0x02427554 STRB W8, [X21 + 0x9D6]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, X1
	007 Move W20, W0
	008 Move W8, W31
	009 Move X0, [X19+32]
	010 Move W21, W8
	011 Move W9, [X0+309]
	012 Move TEMP, X9
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {17}
	016 Call 0x1C5D684
	017 Move X8, [X0+192]
	018 Move X0, [X8+64]
	019 Move W8, [X0+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {25}
	024 Call 0x1C5D684
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, [X19+32]
	030 Move W8, [X0+309]
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {36}
	035 Call 0x1C5D684
	036 Move X8, [X0+192]
	037 Move X0, [X8+64]
	038 Move W8, [X0+309]
	039 Move TEMP, X8
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {44}
	043 Call 0x1C5D684
	044 Move X8, [X0+184]
	045 Move X8, [X8]
	046 Compare X8, 0
	047 JumpIfEqual {102}
	048 Move W22, [X8+24]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X0, [X19+32]
	051 Move W8, [X0+309]
	052 Move TEMP, X8
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfEqual {57}
	056 Call 0x1C5D684
	057 Move X8, [X0+192]
	058 Move X0, [X8+64]
	059 Move W8, [X0+309]
	060 Move TEMP, X8
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfEqual {65}
	064 Call 0x1C5D684
	065 Move W8, [X0+224]
	066 Compare W8, 0
	067 JumpIfNotEqual {69}
	068 Call 0x1C17DFC
	069 Move X0, [X19+32]
	070 Move W8, [X0+309]
	071 Move TEMP, X8
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfEqual {76}
	075 Call 0x1C5D684
	076 Move X8, [X0+192]
	077 Move X0, [X8+64]
	078 Move W8, [X0+309]
	079 Move TEMP, X8
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfEqual {84}
	083 Call 0x1C5D684
	084 Move X8, [X0+184]
	085 Move X8, [X8]
	086 Compare X8, 0
	087 JumpIfEqual {102}
	088 Move W9, [X8+24]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Add X8, X8, W21
	091 Move W8, [X8+32]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Add W8, W21, 1
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move X20, [X31+32]
	096 Move X19, [X31+40]
	097 Move X22, [X31+16]
	098 Move X21, [X31+24]
	099 NotImplemented "Instruction CSET not yet implemented."
	100 Move X30, [X31+48]
	101 Return X0
	102 Call 0x1C17F20
	103 Call 0x1C17F28

Method: System.UInt32 GetNextPrime(System.UInt32 value)

Disassembly:
	0x02427558 LDR X21, [X20 + 0x20]
	0x0242755C CBZ X21, 0x24276F8
	0x02427560 LDR X8, [X19 + 0x20]
	0x02427564 LDR W23, [X20 + 0x18]
	0x02427568 LDR X8, [X8 + 0xC0]
	0x0242756C LDR X0, [X8 + 0x40]
	0x02427570 LDRB W8, [X0 + 0x135]
	0x02427574 TBNZ X8, 0x0, 0x242757C
	0x02427578 BL 0x1C5C684
	0x0242757C ADRP X22, 0x1CCD000
	0x02427580 LDR W8, [X0 + 0xE0]
	0x02427584 LDR X22, [X22 + 0xE58]
	0x02427588 CBNZ W8, 0x2427590
	0x0242758C BL 0x1C16DFC
	0x02427590 LDR X8, [X19 + 0x20]
	0x02427594 LDR W9, [X21 + 0x18]
	0x02427598 LDR X8, [X8 + 0xC0]
	0x0242759C CMP W23, W9
	0x024275A0 CSET W0, EQ
	0x024275A4 LDR X1, [X8 + 0xE8]
	0x024275A8 BL 0x2427C4C
	0x024275AC LDR X8, [X19 + 0x20]
	0x024275B0 LDR W0, [X20 + 0x1C]
	0x024275B4 LDR X8, [X8 + 0xC0]
	0x024275B8 LDR X1, [X8 + 0x48]
	0x024275BC BL 0x2427A1C
	0x024275C0 LDR X8, [X19 + 0x20]
	0x024275C4 LDR W9, [X20 + 0x1C]
	0x024275C8 MOV W21, W0
	0x024275CC LDR X8, [X8 + 0xC0]
	0x024275D0 CMP W0, W9
	0x024275D4 CSET W0, HI
	0x024275D8 LDR X1, [X8 + 0xE8]
	0x024275DC BL 0x2427C4C
	0x024275E0 LDR X0, [X22]
	0x024275E4 MOV W1, W21
	0x024275E8 BL 0x1C16D6C
	0x024275EC LDR X8, [X19 + 0x20]
	0x024275F0 MOV X22, X0
	0x024275F4 LDR X8, [X8 + 0xC0]
	0x024275F8 LDR X8, [X8 + 0x50]
	0x024275FC LDRB W9, [X8 + 0x135]
	0x02427600 TBNZ X9, 0x0, 0x2427610
	0x02427604 MOV X0, X8
	0x02427608 BL 0x1C5C684
	0x0242760C MOV X8, X0
	0x02427610 MOV X0, X8
	0x02427614 MOV W1, W21
	0x02427618 BL 0x1C16D6C
	0x0242761C LDR X8, [X20 + 0x28]
	0x02427620 CBZ X8, 0x24276F8
	0x02427624 LDR W4, [X8 + 0x18]
	0x02427628 MOV X23, X0
	0x0242762C MOV X0, X8
	0x02427630 MOV W1, W31
	0x02427634 MOV X2, X23
	0x02427638 MOV W3, W31
	0x0242763C MOV X5, X31
	0x02427640 BL 0x339FCE8
	0x02427644 LDR X8, [X20 + 0x28]
	0x02427648 CBZ X8, 0x24276F8
	0x0242764C ADD X24, X23, 0x40
	0x02427650 MOVZ W25, 0x1
	0x02427654 LDR W8, [X8 + 0x18]
	0x02427658 CMP W25, W8
	0x0242765C B.GE 0x24276FC
	0x02427660 CBZ X23, 0x24276F8
	0x02427664 LDR W8, [X23 + 0x18]
	0x02427668 CMP W25, W8
	0x0242766C B.CS 0x242771C
	0x02427670 LDR X8, [X19 + 0x20]
	0x02427674 LDURB W26, [X24 - 0x8]
	0x02427678 LDR X8, [X8 + 0xC0]
	0x0242767C LDR X0, [X8 + 0x40]
	0x02427680 LDRB W8, [X0 + 0x135]
	0x02427684 TBNZ X8, 0x0, 0x242768C
	0x02427688 BL 0x1C5C684
	0x0242768C LDR W8, [X0 + 0xE0]
	0x02427690 CBNZ W8, 0x2427698
	0x02427694 BL 0x1C16DFC
	0x02427698 LDR X8, [X19 + 0x20]
	0x0242769C CMP W26, 0x0
	0x024276A0 CSET W0, NE
	0x024276A4 LDR X8, [X8 + 0xC0]
	0x024276A8 LDR X1, [X8 + 0xE8]
	0x024276AC BL 0x2427C4C
	0x024276B0 LDR W8, [X23 + 0x18]
	0x024276B4 CMP W25, W8
	0x024276B8 B.CS 0x242771C
	0x024276BC CBZ X22, 0x24276F8
	0x024276C0 LDR W8, [X24]
	0x024276C4 LDR W9, [X22 + 0x18]
	0x024276C8 UDIV W10, W8, W21
	0x024276CC MSUB W8, W10, W21, W8
	0x024276D0 CMP W8, W9
	0x024276D4 B.CS 0x242771C
	0x024276D8 ADD X8, X22, W8, 0x2, UXTW
	0x024276DC LDR W9, [X8 + 0x20]
	0x024276E0 STUR W9, [X24 - 0x4]
	0x024276E4 STR W25, [X8 + 0x20]
	0x024276E8 LDR X8, [X20 + 0x28]
	0x024276EC ADD W25, W25, 0x1
	0x024276F0 ADD X24, X24, 0x18
	0x024276F4 CBNZ X8, 0x2427654
	0x024276F8 BL 0x1C16F20
	0x024276FC STP X22, X23, [X20 + 0x20]
	0x02427700 STR W21, [X20 + 0x1C]
	0x02427704 LDP X20, X19, [X31 + 0x40]
	0x02427708 LDP X22, X21, [X31 + 0x30]
	0x0242770C LDP X24, X23, [X31 + 0x20]
	0x02427710 LDP X26, X25, [X31 + 0x10]
	0x02427714 LDR X30, [X31], #0x50
	0x02427718 RET
	0x0242771C BL 0x1C16F28
	0x02427720 STP X30, X19, [X31 - 0x10]!
	0x02427724 LDR W8, [X0 + 0x18]
	0x02427728 CMP W8, 0x2
	0x0242772C B.LT 0x2427770
	0x02427730 MOV X19, X0
	0x02427734 LDR X0, [X0 + 0x28]
	0x02427738 CBZ X0, 0x2427778
	0x0242773C LDR W2, [X0 + 0x18]
	0x02427740 MOV W1, W31
	0x02427744 MOV X3, X31
	0x02427748 BL 0x339FA34
	0x0242774C LDR X0, [X19 + 0x20]
	0x02427750 CBZ X0, 0x2427778
	0x02427754 LDR W2, [X0 + 0x18]
	0x02427758 MOV W1, W31
	0x0242775C MOV X3, X31
	0x02427760 BL 0x339FA34
	0x02427764 MOVZ W8, 0x1
	0x02427768 STR X31, [X19 + 0x10]
	0x0242776C STR W8, [X19 + 0x18]
	0x02427770 LDP X30, X19, [X31], #0x10
	0x02427774 RET
	0x02427778 BL 0x1C16F20
	0x0242777C SUB X31, X31, 0x50
	0x02427780 STR X30, [X31 + 0x10]
	0x02427784 STP X24, X23, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, X1
	007 Move W20, W0
	008 Move W21, W31
	009 Move X0, [X19+32]
	010 Move W8, [X0+309]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {16}
	015 Call 0x1C5D684
	016 Move X8, [X0+192]
	017 Move X0, [X8+64]
	018 Move W8, [X0+309]
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {24}
	023 Call 0x1C5D684
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, [X19+32]
	029 Move W8, [X0+309]
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {35}
	034 Call 0x1C5D684
	035 Move X8, [X0+192]
	036 Move X0, [X8+64]
	037 Move W8, [X0+309]
	038 Move TEMP, X8
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {43}
	042 Call 0x1C5D684
	043 Move X8, [X0+184]
	044 Move X8, [X8]
	045 Compare X8, 0
	046 JumpIfEqual {142}
	047 Move X0, [X19+32]
	048 Move W22, [X8+24]
	049 Move W9, [X0+309]
	050 Move TEMP, X9
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfEqual {55}
	054 Call 0x1C5D684
	055 Move X8, [X0+192]
	056 Move X0, [X8+64]
	057 Move W8, [X0+309]
	058 Move TEMP, X8
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfEqual {63}
	062 Call 0x1C5D684
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1C17DFC
	067 Move X0, [X19+32]
	068 Move W8, [X0+309]
	069 Move TEMP, X8
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfEqual {74}
	073 Call 0x1C5D684
	074 Move X8, [X0+192]
	075 Move X0, [X8+64]
	076 Move W8, [X0+309]
	077 Move TEMP, X8
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfEqual {82}
	081 Call 0x1C5D684
	082 Move X8, [X0+184]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move X8, [X8]
	085 Compare X8, 0
	086 JumpIfEqual {142}
	087 Move W9, [X8+24]
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move X22, W21
	090 Add X8, X8, X22
	091 Move W8, [X8+32]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Add W21, W21, 1
	094 Move X0, [X19+32]
	095 Move W8, [X0+309]
	096 Move TEMP, X8
	097 And TEMP, TEMP, 1
	098 Compare TEMP, 1
	099 JumpIfEqual {101}
	100 Call 0x1C5D684
	101 Move X8, [X0+192]
	102 Move X0, [X8+64]
	103 Move W8, [X0+309]
	104 Move TEMP, X8
	105 And TEMP, TEMP, 1
	106 Compare TEMP, 1
	107 JumpIfEqual {109}
	108 Call 0x1C5D684
	109 Move W8, [X0+224]
	110 Compare W8, 0
	111 JumpIfNotEqual {113}
	112 Call 0x1C17DFC
	113 Move X0, [X19+32]
	114 Move W8, [X0+309]
	115 Move TEMP, X8
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfEqual {120}
	119 Call 0x1C5D684
	120 Move X8, [X0+192]
	121 Move X0, [X8+64]
	122 Move W8, [X0+309]
	123 Move TEMP, X8
	124 And TEMP, TEMP, 1
	125 Compare TEMP, 1
	126 JumpIfEqual {128}
	127 Call 0x1C5D684
	128 Move X8, [X0+184]
	129 Move X8, [X8]
	130 Compare X8, 0
	131 JumpIfEqual {142}
	132 Move W9, [X8+24]
	133 NotImplemented "Instruction CMP not yet implemented."
	134 Add X8, X8, X22
	135 Move W0, [X8+32]
	136 Move X20, [X31+32]
	137 Move X19, [X31+40]
	138 Move X22, [X31+16]
	139 Move X21, [X31+24]
	140 Move X30, [X31+48]
	141 Return X0
	142 Call 0x1C17F20
	143 Move X0, [X19+32]
	144 Move X20, X8
	145 Call 0x199C99C
	146 Move X0, [X0+192]
	147 Move W1, 8
	148 Call 0x199C988
	149 Move X8, [X0+184]
	150 Move X21, [X8]
	151 Move X0, X21
	152 Call 0x19913C0
	153 Move X0, X20
	154 Call 0x19913C0
	155 Move W8, [X21+24]
	156 Move X0, X20
	157 Subtract W8, W8, 1
	158 Move X1, W8
	159 Call 0x19A5B0C
	160 Move X1, X31
	161 Call UInt32.ToString, X0
	162 Move X20, X0
	163 Move X0, 0x1CF6000
	164 Move X0, [X0+3320]
	165 Call 0x1C17D08
	166 Move X1, X20
	167 Move X2, X31
	168 Call String.Concat, X0, X1
	169 Move X20, X0
	170 Move X0, 0x1CCD000
	171 Move X0, [X0+1456]
	172 Call 0x1C17D08
	173 Call 0x1C17F10
	174 Move X1, X20
	175 Move X2, X31
	176 Move X21, X0
	177 Call InvalidOperationException..ctor, X0, X1
	178 Move X0, X21
	179 Move X1, X19
	180 Call 0x1C17DEC
	181 Call 0x1C17F28

Method: System.Void Assert(System.Boolean condition)

Disassembly:
	0x02427788 STP X22, X21, [X31 + 0x30]
	0x0242778C STP X20, X19, [X31 + 0x40]
	0x02427790 MOV X19, X3
	0x02427794 CBZ X1, 0x2427884
	0x02427798 MOV W22, W2
	0x0242779C TBNZ X2, 0x1F, 0x2427864
	0x024277A0 LDR W8, [X1 + 0x18]
	0x024277A4 MOV X20, X1
	0x024277A8 SUBS W8, W8, W22
	0x024277AC B.LT 0x2427864
	0x024277B0 LDP W9, W10, [X0 + 0x14]
	0x024277B4 MOV X21, X0
	0x024277B8 ORN W9, W31, W9, 0x0
	0x024277BC ADD W9, W10, W9
	0x024277C0 CMP W8, W9
	0x024277C4 B.LT 0x24278B8
	0x024277C8 LDR X8, [X21 + 0x28]
	0x024277CC CBZ X8, 0x2427844
	0x024277D0 MOV X23, X31
	0x024277D4 MOVZ W24, 0x1

ISIL:
	001 Move TEMP, X0
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfNotEqual {6}
	005 Return 
	006 Move [X31-32], X30
	007 Move [X31+16], X20
	008 Move [X31+24], X19
	009 Move X0, 0x1CCD000
	010 Move X0, [X0+1456]
	011 Move X19, X1
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X20, X0
	015 Move X0, 0x1CF6000
	016 Move X0, [X0+3328]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X20
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, X20
	023 Move X1, X19
	024 Call 0x1C17DEC

Method: System.Void .cctor()

Disassembly:
	0x024277D8 LDR W9, [X8 + 0x18]
	0x024277DC CMP X24, W9, SXTW
	0x024277E0 B.GE 0x2427848
	0x024277E4 CMP X24, X9
	0x024277E8 B.CS 0x2427860
	0x024277EC ADD X9, X8, X23
	0x024277F0 LDRB W10, [X9 + 0x38]
	0x024277F4 CBZ W10, 0x2427838
	0x024277F8 LDR W1, [X9 + 0x44]
	0x024277FC LDR X2, [X9 + 0x48]
	0x02427800 STP X31, X31, [X31]
	0x02427804 LDR X8, [X19 + 0x20]
	0x02427808 ADD X0, X31, 0x0
	0x0242780C LDR X8, [X8 + 0xC0]
	0x02427810 LDR X3, [X8 + 0x138]
	0x02427814 BL 0x2EDF4D4
	0x02427818 LDR W8, [X20 + 0x18]
	0x0242781C CMP W22, W8
	0x02427820 B.CS 0x2427860
	0x02427824 LDR V0, [X31]
	0x02427828 ADD X8, X20, W22, 0x4, SXTW
	0x0242782C ADD W22, W22, 0x1
	0x02427830 STR V0, [X8 + 0x2]
	0x02427834 LDR X8, [X21 + 0x28]
	0x02427838 ADD X24, X24, 0x1
	0x0242783C ADD X23, X23, 0x18
	0x02427840 CBNZ X8, 0x24277D8
	0x02427844 BL 0x1C16F20
	0x02427848 LDP X20, X19, [X31 + 0x40]
	0x0242784C LDP X22, X21, [X31 + 0x30]
	0x02427850 LDP X24, X23, [X31 + 0x20]
	0x02427854 LDR X30, [X31 + 0x10]
	0x02427858 ADD X31, X31, 0x50
	0x0242785C RET
	0x02427860 BL 0x1C16F28
	0x02427864 ADRP X0, 0x1CD4000
	0x02427868 LDR X0, [X0 + 0x760]
	0x0242786C BL 0x1C16D08
	0x02427870 BL 0x1C16F10
	0x02427874 MOV X1, X31
	0x02427878 MOV X20, X0
	0x0242787C BL 0x3315FB8
	0x02427880 B 0x24278E8
	0x02427884 ADRP X0, 0x1CD1000
	0x02427888 LDR X0, [X0 + 0x528]
	0x0242788C BL 0x1C16D08
	0x02427890 BL 0x1C16F10
	0x02427894 MOV X20, X0
	0x02427898 ADRP X0, 0x1CF4000
	0x0242789C LDR X0, [X0 + 0x640]
	0x024278A0 BL 0x1C16D08
	0x024278A4 MOV X1, X0
	0x024278A8 MOV X0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1FB3000
	007 Move X22, 0x1CF6000
	008 Move X20, 0x1CF6000
	009 Move W8, [X21+2516]
	010 Move X22, [X22+3336]
	011 Move X20, [X20+3344]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x1CF6000
	018 Move X0, [X0+3344]
	019 Call 0x1C17CF4
	020 Move X0, 0x1CF6000
	021 Move X0, [X0+3336]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2516], W8
	025 Move X0, [X22]
	026 Move W1, 30
	027 Call 0x1C17D6C
	028 Move X1, [X20]
	029 Move X2, X31
	030 Move X20, X0
	031 Call RuntimeHelpers.InitializeArray, X0, X1
	032 Move X0, [X19+32]
	033 Move W8, [X0+309]
	034 Move TEMP, X8
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {39}
	038 Call 0x1C5D684
	039 Move X8, [X0+192]
	040 Move X0, [X8+64]
	041 Move W8, [X0+309]
	042 Move TEMP, X8
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfEqual {47}
	046 Call 0x1C5D684
	047 Move X8, [X0+184]
	048 Move [X8], X20
	049 Move X0, [X19+32]
	050 Move W8, [X0+309]
	051 Move TEMP, X8
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfEqual {56}
	055 Call 0x1C5D684
	056 Move X8, [X0+192]
	057 Move X0, [X8+64]
	058 Move W8, [X0+309]
	059 Move TEMP, X8
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfEqual {70}
	063 Move X20, [X31+32]
	064 Move X19, [X31+40]
	065 Move X22, [X31+16]
	066 Move X21, [X31+24]
	067 Move X30, [X31+48]
	068 Call 0x1C5D684
	069 Return 
	070 Move X20, [X31+32]
	071 Move X19, [X31+40]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Return 

