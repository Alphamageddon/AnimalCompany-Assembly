Type: ExitGames.Client.Photon.TrafficStats

Method: System.Int32 get_PackageHeaderSize()

Disassembly:
	0x035256C8 ADRP X0, 0xC0F000
	0x035256CC LDR X0, [X0 + 0x870]

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_PackageHeaderSize(System.Int32 value)

Disassembly:
	0x035256D0 BL 0x1C16CF4
	0x035256D4 ADRP X0, 0xBCE000

ISIL:
	001 Move [X0+16], W1
	002 Return 

Method: System.Int32 get_ReliableCommandCount()

Disassembly:
	0x035256D8 LDR X0, [X0 + 0xE00]
	0x035256DC BL 0x1C16CF4

ISIL:
	001 Move W0, [X0+20]
	002 Return X0

Method: System.Void set_ReliableCommandCount(System.Int32 value)

Disassembly:
	0x035256E0 ADRP X0, 0xC0F000
	0x035256E4 LDR X0, [X0 + 0x878]

ISIL:
	001 Move [X0+20], W1
	002 Return 

Method: System.Int32 get_UnreliableCommandCount()

Disassembly:
	0x035256E8 BL 0x1C16CF4
	0x035256EC ADRP X0, 0xC0F000

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Void set_UnreliableCommandCount(System.Int32 value)

Disassembly:
	0x035256F0 LDR X0, [X0 + 0x880]
	0x035256F4 BL 0x1C16CF4

ISIL:
	001 Move [X0+24], W1
	002 Return 

Method: System.Int32 get_FragmentCommandCount()

Disassembly:
	0x035256F8 MOVZ W8, 0x1
	0x035256FC STRB W8, [X20 + 0xB69]

ISIL:
	001 Move W0, [X0+28]
	002 Return X0

Method: System.Void set_FragmentCommandCount(System.Int32 value)

Disassembly:
	0x03525700 STP X31, X31, [X31 + 0x20]
	0x03525704 STR X31, [X31 + 0x30]

ISIL:
	001 Move [X0+28], W1
	002 Return 

Method: System.Int32 get_ControlCommandCount()

Disassembly:
	0x03525708 LDR X0, [X19 + 0x18]
	0x0352570C CBZ X0, 0x3525814

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void set_ControlCommandCount(System.Int32 value)

Disassembly:
	0x03525710 ADRP X8, 0xC0F000
	0x03525714 LDR X8, [X8 + 0x880]

ISIL:
	001 Move [X0+32], W1
	002 Return 

Method: System.Int32 get_TotalPacketCount()

Disassembly:
	0x03525718 ADRP X22, 0xC0F000
	0x0352571C ADRP X23, 0xBCE000

ISIL:
	001 Move W0, [X0+36]
	002 Return X0

Method: System.Void set_TotalPacketCount(System.Int32 value)

Disassembly:
	0x03525720 ADRP X21, 0xC0F000
	0x03525724 LDR X1, [X8]

ISIL:
	001 Move [X0+36], W1
	002 Return 

Method: System.Int32 get_TotalCommandsInPackets()

Disassembly:
	0x03525728 LDR X22, [X22 + 0x868]
	0x0352572C LDR X23, [X23 + 0xE00]

ISIL:
	001 Move W0, [X0+40]
	002 Return X0

Method: System.Void set_TotalCommandsInPackets(System.Int32 value)

Disassembly:
	0x03525730 LDR X21, [X21 + 0x860]
	0x03525734 ADD X8, X31, 0x8

ISIL:
	001 Move [X0+40], W1
	002 Return 

Method: System.Int32 get_ReliableCommandBytes()

Disassembly:
	0x03525738 BL 0x301CB58
	0x0352573C LDUR V0, [X31 + 0x8]

ISIL:
	001 Move W0, [X0+44]
	002 Return X0

Method: System.Void set_ReliableCommandBytes(System.Int32 value)

Disassembly:
	0x03525740 LDR X8, [X31 + 0x18]
	0x03525744 STR V0, [X31 + 0x2]

ISIL:
	001 Move [X0+44], W1
	002 Return 

Method: System.Int32 get_UnreliableCommandBytes()

Disassembly:
	0x03525748 STR X8, [X31 + 0x30]
	0x0352574C LDR X1, [X22]

ISIL:
	001 Move W0, [X0+48]
	002 Return X0

Method: System.Void set_UnreliableCommandBytes(System.Int32 value)

Disassembly:
	0x03525750 ADD X0, X31, 0x20
	0x03525754 BL 0x2BC4350

ISIL:
	001 Move [X0+48], W1
	002 Return 

Method: System.Int32 get_FragmentCommandBytes()

Disassembly:
	0x03525758 TBZ X0, 0x0, 0x35257C0
	0x0352575C LDR X20, [X31 + 0x30]

ISIL:
	001 Move W0, [X0+52]
	002 Return X0

Method: System.Void set_FragmentCommandBytes(System.Int32 value)

Disassembly:
	0x03525760 CBZ X20, 0x352580C
	0x03525764 LDR X8, [X20]

ISIL:
	001 Move [X0+52], W1
	002 Return 

Method: System.Int32 get_ControlCommandBytes()

Disassembly:
	0x03525768 LDR X1, [X23]
	0x0352576C LDRH W9, [X8 + 0x12E]

ISIL:
	001 Move W0, [X0+56]
	002 Return X0

Method: System.Void set_ControlCommandBytes(System.Int32 value)

Disassembly:
	0x03525770 CBZ X9, 0x3525794
	0x03525774 LDR X10, [X8 + 0xB0]

ISIL:
	001 Move [X0+56], W1
	002 Return 

Method: System.Void .ctor(System.Int32 packageHeaderSize)

Disassembly:
	0x03525778 ADD X10, X10, 0x8
	0x0352577C LDUR X11, [X10 - 0x8]
	0x03525780 CMP X11, X1
	0x03525784 B.EQ 0x35257A4
	0x03525788 SUBS X9, X9, 0x1
	0x0352578C ADD X10, X10, 0x10
	0x03525790 B.NE 0x352577C
	0x03525794 MOV X0, X20
	0x03525798 MOV W2, W31
	0x0352579C BL 0x1C5C788

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], W19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Int32 get_TotalCommandCount()

Disassembly:
	0x035257A0 B 0x35257B0
	0x035257A4 LDRSW X9, [X10]
	0x035257A8 ADD X8, X8, X9, 0x4, LSL
	0x035257AC ADD X0, X8, 0x138

ISIL:
	001 NotImplemented "Instruction LDUR not yet implemented."
	002 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	003 Move W0, S0
	004 Return X0

Method: System.Int32 get_TotalCommandBytes()

Disassembly:
	0x035257B0 LDP X8, X1, [X0]
	0x035257B4 MOV X0, X20
	0x035257B8 BLR X8
	0x035257BC B 0x352574C

ISIL:
	001 NotImplemented "Instruction LDUR not yet implemented."
	002 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	003 Move W0, S0
	004 Return X0

Method: System.Int32 get_TotalPacketBytes()

Disassembly:
	0x035257C0 LDR X1, [X21]
	0x035257C4 ADD X0, X31, 0x20
	0x035257C8 BL 0x2BC434C
	0x035257CC LDR X8, [X19 + 0x18]
	0x035257D0 CBZ X8, 0x3525814
	0x035257D4 LDP W2, W9, [X8 + 0x18]
	0x035257D8 ADD W9, W9, 0x1

ISIL:
	001 NotImplemented "Instruction LDUR not yet implemented."
	002 Move W8, [X0+36]
	003 Move W9, [X0+16]
	004 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	005 Move W10, S0
	006 NotImplemented "Instruction MADD not yet implemented."
	007 Return X0

Method: System.Int32 get_TimestampOfLastAck()

Disassembly:
	0x035257DC CMP W2, 0x1
	0x035257E0 STP W31, W9, [X8 + 0x18]

ISIL:
	001 Move W0, [X0+60]
	002 Return X0

Method: System.Void set_TimestampOfLastAck(System.Int32 value)

Disassembly:
	0x035257E4 B.LT 0x35257F8
	0x035257E8 LDR X0, [X8 + 0x10]

ISIL:
	001 Move [X0+60], W1
	002 Return 

Method: System.Int32 get_TimestampOfLastReliableCommand()

Disassembly:
	0x035257EC MOV W1, W31
	0x035257F0 MOV X3, X31

ISIL:
	001 Move W0, [X0+64]
	002 Return X0

Method: System.Void set_TimestampOfLastReliableCommand(System.Int32 value)

Disassembly:
	0x035257F4 BL 0x339FA34
	0x035257F8 LDP X20, X19, [X31 + 0x60]

ISIL:
	001 Move [X0+64], W1
	002 Return 

Method: System.Void CountControlCommand(System.Int32 size)

Disassembly:
	0x03523CDC LDP X20, X19, [X31 + 0x30]
	0x03523CE0 LDP X22, X21, [X31 + 0x20]
	0x03523CE4 LDP X30, X23, [X31 + 0x10]
	0x03523CE8 ADD X31, X31, 0x40
	0x03523CEC RET
	0x03523CF0 BL 0x1C16F28
	0x03523CF4 BL 0x1C16F20

ISIL:
	001 Move W8, [X0+56]
	002 Move W9, [X0+32]
	003 Add W8, W8, W1
	004 Add W9, W9, 1
	005 Move [X0+56], W8
	006 Move [X0+32], W9
	007 Return 

Method: System.Void CountReliableOpCommand(System.Int32 size)

Disassembly:
	0x03518F24 MOV X0, X25
	0x03518F28 LDP X9, X1, [X8 + 0x1F8]
	0x03518F2C BLR X9
	0x03518F30 STR W0, [X31 + 0x1C]
	0x03518F34 ADD X0, X31, 0x1C
	0x03518F38 MOV X1, X31
	0x03518F3C BL 0x337B6E0

ISIL:
	001 Move W8, [X0+44]
	002 Move W9, [X0+20]
	003 Add W8, W8, W1
	004 Add W9, W9, 1
	005 Move [X0+44], W8
	006 Move [X0+20], W9
	007 Return 

Method: System.Void CountUnreliableOpCommand(System.Int32 size)

Disassembly:
	0x03518F40 LDR W8, [X23 + 0x18]
	0x03518F44 CMP W8, 0x3
	0x03518F48 B.LS 0x351917C
	0x03518F4C STR X0, [X23 + 0x38]
	0x03518F50 ADRP X0, 0xC03000
	0x03518F54 LDR X0, [X0 + 0x8B0]
	0x03518F58 BL 0x1C16D08

ISIL:
	001 Move W8, [X0+48]
	002 Move W9, [X0+24]
	003 Add W8, W8, W1
	004 Add W9, W9, 1
	005 Move [X0+48], W8
	006 Move [X0+24], W9
	007 Return 

Method: System.Void CountFragmentOpCommand(System.Int32 size)

Disassembly:
	0x035257FC LDP X22, X21, [X31 + 0x50]
	0x03525800 LDP X30, X23, [X31 + 0x40]
	0x03525804 ADD X31, X31, 0x70
	0x03525808 RET
	0x0352580C MOV X22, X21
	0x03525810 BL 0x1C16F20
	0x03525814 BL 0x1C16F20

ISIL:
	001 Move W8, [X0+52]
	002 Move W9, [X0+28]
	003 Add W8, W8, W1
	004 Add W9, W9, 1
	005 Move [X0+52], W8
	006 Move [X0+28], W9
	007 Return 

Method: System.String ToString()

Disassembly:
	0x03525818 B 0x3525824
	0x0352581C B 0x3525820
	0x03525820 MOV X22, X21
	0x03525824 MOV X20, X0
	0x03525828 CMP W1, 0x1
	0x0352582C B.NE 0x3525858
	0x03525830 MOV X0, X20
	0x03525834 BL 0x3EB1AD0
	0x03525838 LDR X21, [X0]
	0x0352583C BL 0x3EB1AE0
	0x03525840 LDR X1, [X22]
	0x03525844 ADD X0, X31, 0x20
	0x03525848 BL 0x2BC434C
	0x0352584C CBZ X21, 0x35257CC
	0x03525850 MOV X0, X21
	0x03525854 BL 0x1C16F18
	0x03525858 MOV X21, X31
	0x0352585C B 0x3525864
	0x03525860 MOV X20, X0
	0x03525864 LDR X1, [X22]
	0x03525868 ADD X0, X31, 0x20
	0x0352586C BL 0x2BC434C
	0x03525870 CBNZ X21, 0x352587C
	0x03525874 MOV X0, X20
	0x03525878 BL 0x1D2C690
	0x0352587C MOV X0, X21
	0x03525880 BL 0x1C16F18
	0x03525884 BL 0x1990590
	0x03525888 STR X30, [X31 - 0x40]!
	0x0352588C STP X24, X23, [X31 + 0x10]
	0x03525890 STP X22, X21, [X31 + 0x20]
	0x03525894 STP X20, X19, [X31 + 0x30]
	0x03525898 ADRP X23, 0xEBA000
	0x0352589C ADRP X24, 0xC0F000
	0x035258A0 ADRP X20, 0xC0F000
	0x035258A4 ADRP X22, 0xC0F000
	0x035258A8 ADRP X21, 0xC0F000
	0x035258AC LDRB W8, [X23 + 0xB6A]
	0x035258B0 LDR X24, [X24 + 0x888]
	0x035258B4 LDR X20, [X20 + 0x890]
	0x035258B8 LDR X22, [X22 + 0x898]
	0x035258BC LDR X21, [X21 + 0x8A0]
	0x035258C0 MOV X19, X0
	0x035258C4 TBNZ X8, 0x0, 0x3525900
	0x035258C8 ADRP X0, 0xC0F000
	0x035258CC LDR X0, [X0 + 0x890]
	0x035258D0 BL 0x1C16CF4
	0x035258D4 ADRP X0, 0xC0F000
	0x035258D8 LDR X0, [X0 + 0x888]
	0x035258DC BL 0x1C16CF4
	0x035258E0 ADRP X0, 0xC0F000
	0x035258E4 LDR X0, [X0 + 0x8A0]
	0x035258E8 BL 0x1C16CF4
	0x035258EC ADRP X0, 0xC0F000
	0x035258F0 LDR X0, [X0 + 0x898]
	0x035258F4 BL 0x1C16CF4
	0x035258F8 MOVZ W8, 0x1
	0x035258FC STRB W8, [X23 + 0xB6A]
	0x03525900 LDR X0, [X24]
	0x03525904 BL 0x1C16F10
	0x03525908 LDR X1, [X20]
	0x0352590C MOV X20, X0
	0x03525910 BL 0x2AA4804
	0x03525914 STR X20, [X19 + 0x10]
	0x03525918 LDR X0, [X22]
	0x0352591C BL 0x1C16F10
	0x03525920 LDR X1, [X21]
	0x03525924 MOV X20, X0
	0x03525928 BL 0x301B7C4
	0x0352592C STR X20, [X19 + 0x18]
	0x03525930 MOV X0, X19
	0x03525934 LDP X20, X19, [X31 + 0x30]
	0x03525938 LDP X22, X21, [X31 + 0x20]
	0x0352593C LDP X24, X23, [X31 + 0x10]
	0x03525940 MOV X1, X31
	0x03525944 LDR X30, [X31], #0x40
	0x03525948 B 0x33BDD8C
	0x0352594C STR X30, [X31 - 0x40]!
	0x03525950 STP X24, X23, [X31 + 0x10]
	0x03525954 STP X22, X21, [X31 + 0x20]
	0x03525958 STP X20, X19, [X31 + 0x30]
	0x0352595C ADRP X19, 0xEBA000
	0x03525960 ADRP X20, 0xC0F000
	0x03525964 ADRP X22, 0xC0F000
	0x03525968 ADRP X21, 0xC0F000
	0x0352596C LDRB W8, [X19 + 0xB6B]
	0x03525970 LDR X20, [X20 + 0x8A8]
	0x03525974 LDR X22, [X22 + 0x308]
	0x03525978 LDR X21, [X21 + 0x8B0]
	0x0352597C TBNZ X8, 0x0, 0x35259DC
	0x03525980 ADRP X0, 0xC0E000
	0x03525984 LDR X0, [X0 + 0xC10]
	0x03525988 BL 0x1C16CF4
	0x0352598C ADRP X0, 0xC0F000
	0x03525990 LDR X0, [X0 + 0x8A8]
	0x03525994 BL 0x1C16CF4
	0x03525998 ADRP X0, 0xC0F000
	0x0352599C LDR X0, [X0 + 0x8B8]
	0x035259A0 BL 0x1C16CF4
	0x035259A4 ADRP X0, 0xC0F000
	0x035259A8 LDR X0, [X0 + 0x8B0]
	0x035259AC BL 0x1C16CF4
	0x035259B0 ADRP X0, 0xC0F000
	0x035259B4 LDR X0, [X0 + 0x8C0]
	0x035259B8 BL 0x1C16CF4
	0x035259BC ADRP X0, 0xC0F000
	0x035259C0 LDR X0, [X0 + 0x308]
	0x035259C4 BL 0x1C16CF4
	0x035259C8 ADRP X0, 0xC0F000
	0x035259CC LDR X0, [X0 + 0x7B8]
	0x035259D0 BL 0x1C16CF4
	0x035259D4 MOVZ W8, 0x1
	0x035259D8 STRB W8, [X19 + 0xB6B]
	0x035259DC LDR X0, [X20]
	0x035259E0 MOVZ W1, 0x100
	0x035259E4 BL 0x1C16D6C
	0x035259E8 LDR X8, [X22]
	0x035259EC MOV X19, X0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X19, 0xEBB000
	008 Move X21, 0xBCF000
	009 Move X22, 0xBCF000
	010 Move W8, [X19+2898]
	011 Move X21, [X21+2512]
	012 Move X22, [X22+1880]
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0xBCF000
	019 Move X0, [X0+1880]
	020 Call 0x1C17CF4
	021 Move X0, 0xBCF000
	022 Move X0, [X0+2512]
	023 Call 0x1C17CF4
	024 Move X0, 0xC10000
	025 Move X0, [X0+1912]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X19+2898], W8
	029 Move X0, [X21]
	030 Move W1, 4
	031 Call 0x1C17D6C
	032 Move W8, [X20+44]
	033 Move W9, [X20+48]
	034 Move W10, [X20+52]
	035 Move W11, [X20+56]
	036 Move W12, [X20+36]
	037 Move W13, [X20+16]
	038 Move X19, X0
	039 Add W8, W9, W8
	040 Move X0, [X22]
	041 Add W8, W8, W10
	042 Add W8, W8, W11
	043 NotImplemented "Instruction MADD not yet implemented."
	044 Add X1, X31, 28
	045 Move [X31+28], W8
	046 Call 0x1C17E04
	047 Compare X19, 0
	048 JumpIfEqual {136}
	049 Move X21, X0
	050 Compare X0, 0
	051 JumpIfEqual {58}
	052 Move X8, [X19]
	053 Move X0, X21
	054 Move X1, [X8+64]
	055 Call 0x1C17E00
	056 Compare X0, 0
	057 JumpIfEqual {133}
	058 Move W8, [X19+24]
	059 Compare W8, 0
	060 JumpIfEqual {132}
	061 Move [X19+32], X21
	062 Move W8, [X20+44]
	063 Move W9, [X20+48]
	064 Move W10, [X20+52]
	065 Move W11, [X20+56]
	066 Move X0, [X22]
	067 Add X1, X31, 24
	068 Add W8, W9, W8
	069 Add W8, W8, W10
	070 Add W8, W8, W11
	071 Move [X31+24], W8
	072 Call 0x1C17E04
	073 Move X21, X0
	074 Compare X0, 0
	075 JumpIfEqual {82}
	076 Move X8, [X19]
	077 Move X0, X21
	078 Move X1, [X8+64]
	079 Call 0x1C17E00
	080 Compare X0, 0
	081 JumpIfEqual {133}
	082 Move W8, [X19+24]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move [X19+40], X21
	085 Move W8, [X20+36]
	086 Move X0, [X22]
	087 Add X1, X31, 12
	088 Move [X31+12], W8
	089 Call 0x1C17E04
	090 Move X21, X0
	091 Compare X0, 0
	092 JumpIfEqual {99}
	093 Move X8, [X19]
	094 Move X0, X21
	095 Move X1, [X8+64]
	096 Call 0x1C17E00
	097 Compare X0, 0
	098 JumpIfEqual {133}
	099 Move W8, [X19+24]
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move [X19+48], X21
	102 Move W8, [X20+40]
	103 Move X0, [X22]
	104 Add X1, X31, 8
	105 Move [X31+8], W8
	106 Call 0x1C17E04
	107 Move X20, X0
	108 Compare X0, 0
	109 JumpIfEqual {116}
	110 Move X8, [X19]
	111 Move X0, X20
	112 Move X1, [X8+64]
	113 Call 0x1C17E00
	114 Compare X0, 0
	115 JumpIfEqual {133}
	116 Move W8, [X19+24]
	117 NotImplemented "Instruction CMP not yet implemented."
	118 Move X8, 0xC10000
	119 Move X8, [X8+1912]
	120 Move [X19+56], X20
	121 Move X1, X19
	122 Move X2, X31
	123 Move X0, [X8]
	124 Call String.Format, X0, X1
	125 Move X20, [X31+48]
	126 Move X19, [X31+56]
	127 Move X22, [X31+32]
	128 Move X21, [X31+40]
	129 Move X30, [X31+16]
	130 Add X31, X31, 64
	131 Return X0
	132 Call 0x1C17F28
	133 Call 0x1C17F44
	134 Move X1, X31
	135 Call 0x1C17DEC
	136 Call 0x1C17F20

