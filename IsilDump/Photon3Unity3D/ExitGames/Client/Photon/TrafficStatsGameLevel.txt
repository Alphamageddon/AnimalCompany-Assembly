Type: ExitGames.Client.Photon.TrafficStatsGameLevel

Method: System.Int32 get_OperationByteCount()

Disassembly:
	0x0352504C MOV V8.16B, V1.16B
	0x03525050 MOV V9.16B, V0.16B

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void set_OperationByteCount(System.Int32 value)

Disassembly:
	0x03525054 TBNZ X8, 0x0, 0x352506C
	0x03525058 ADRP X0, 0xC0F000

ISIL:
	001 Move [X0+32], W1
	002 Return 

Method: System.Int32 get_OperationCount()

Disassembly:
	0x0352505C LDR X0, [X0 + 0x818]
	0x03525060 BL 0x1C16CF4

ISIL:
	001 Move W0, [X0+36]
	002 Return X0

Method: System.Void set_OperationCount(System.Int32 value)

Disassembly:
	0x03525064 MOVZ W8, 0x1
	0x03525068 STRB W8, [X19 + 0xB60]

ISIL:
	001 Move [X0+36], W1
	002 Return 

Method: System.Int32 get_ResultByteCount()

Disassembly:
	0x0352506C LDR X0, [X20]
	0x03525070 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move W0, [X0+40]
	002 Return X0

Method: System.Void set_ResultByteCount(System.Int32 value)

Disassembly:
	0x03525074 LDR X30, [X31 + 0x10]
	0x03525078 MOV V0.16B, V9.16B

ISIL:
	001 Move [X0+40], W1
	002 Return 

Method: System.Int32 get_ResultCount()

Disassembly:
	0x0352507C MOV V1.16B, V8.16B
	0x03525080 LDP D9, D8, [X31], #0x30

ISIL:
	001 Move W0, [X0+44]
	002 Return X0

Method: System.Void set_ResultCount(System.Int32 value)

Disassembly:
	0x03525084 B 0x2291098
	0x03525088 STR D10, [X31 - 0x30]!

ISIL:
	001 Move [X0+44], W1
	002 Return 

Method: System.Int32 get_EventByteCount()

Disassembly:
	0x0352508C STP D9, D8, [X31 + 0x8]
	0x03525090 STR X30, [X31 + 0x18]

ISIL:
	001 Move W0, [X0+48]
	002 Return X0

Method: System.Void set_EventByteCount(System.Int32 value)

Disassembly:
	0x03525094 STP X20, X19, [X31 + 0x20]
	0x03525098 ADRP X19, 0xEBA000

ISIL:
	001 Move [X0+48], W1
	002 Return 

Method: System.Int32 get_EventCount()

Disassembly:
	0x0352509C ADRP X20, 0xC0F000
	0x035250A0 LDRB W8, [X19 + 0xB61]

ISIL:
	001 Move W0, [X0+52]
	002 Return X0

Method: System.Void set_EventCount(System.Int32 value)

Disassembly:
	0x035250A4 LDR X20, [X20 + 0x820]
	0x035250A8 MOV V8.16B, V2.16B

ISIL:
	001 Move [X0+52], W1
	002 Return 

Method: System.Int32 get_LongestOpResponseCallback()

Disassembly:
	0x035250AC MOV V9.16B, V1.16B
	0x035250B0 MOV V10.16B, V0.16B

ISIL:
	001 Move W0, [X0+56]
	002 Return X0

Method: System.Void set_LongestOpResponseCallback(System.Int32 value)

Disassembly:
	0x035250B4 TBNZ X8, 0x0, 0x35250CC
	0x035250B8 ADRP X0, 0xC0F000

ISIL:
	001 Move [X0+56], W1
	002 Return 

Method: System.Byte get_LongestOpResponseCallbackOpCode()

Disassembly:
	0x035250BC LDR X0, [X0 + 0x820]
	0x035250C0 BL 0x1C16CF4

ISIL:
	001 Move W0, [X0+60]
	002 Return X0

Method: System.Void set_LongestOpResponseCallbackOpCode(System.Byte value)

Disassembly:
	0x035250C4 MOVZ W8, 0x1
	0x035250C8 STRB W8, [X19 + 0xB61]

ISIL:
	001 Move [X0+60], W1
	002 Return 

Method: System.Int32 get_LongestEventCallback()

Disassembly:
	0x035250CC LDR X0, [X20]
	0x035250D0 MOV V1.16B, V9.16B

ISIL:
	001 Move W0, [X0+64]
	002 Return X0

Method: System.Void set_LongestEventCallback(System.Int32 value)

Disassembly:
	0x035250D4 MOV V2.16B, V8.16B
	0x035250D8 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X0+64], W1
	002 Return 

Method: System.Int32 get_LongestMessageCallback()

Disassembly:
	0x035250DC LDR X30, [X31 + 0x18]
	0x035250E0 LDP D9, D8, [X31 + 0x8]

ISIL:
	001 Move W0, [X0+68]
	002 Return X0

Method: System.Void set_LongestMessageCallback(System.Int32 value)

Disassembly:
	0x035250E4 MOV V0.16B, V10.16B
	0x035250E8 LDR V10, [X31], #0x30

ISIL:
	001 Move [X0+68], W1
	002 Return 

Method: System.Int32 get_LongestRawMessageCallback()

Disassembly:
	0x035250EC B 0x229111C
	0x035250F0 STP D11, D10, [X31 - 0x40]!

ISIL:
	001 Move W0, [X0+72]
	002 Return X0

Method: System.Void set_LongestRawMessageCallback(System.Int32 value)

Disassembly:
	0x035250F4 STP D9, D8, [X31 + 0x10]
	0x035250F8 STR X30, [X31 + 0x20]

ISIL:
	001 Move [X0+72], W1
	002 Return 

Method: System.Byte get_LongestEventCallbackCode()

Disassembly:
	0x035250FC STP X20, X19, [X31 + 0x30]
	0x03525100 ADRP X19, 0xEBA000

ISIL:
	001 Move W0, [X0+76]
	002 Return X0

Method: System.Void set_LongestEventCallbackCode(System.Byte value)

Disassembly:
	0x03525104 ADRP X20, 0xC0F000
	0x03525108 LDRB W8, [X19 + 0xB62]

ISIL:
	001 Move [X0+76], W1
	002 Return 

Method: System.Int32 get_LongestDeltaBetweenDispatching()

Disassembly:
	0x0352510C LDR X20, [X20 + 0x828]
	0x03525110 MOV V8.16B, V3.16B

ISIL:
	001 Move W0, [X0+80]
	002 Return X0

Method: System.Void set_LongestDeltaBetweenDispatching(System.Int32 value)

Disassembly:
	0x03525114 MOV V9.16B, V2.16B
	0x03525118 MOV V10.16B, V1.16B

ISIL:
	001 Move [X0+80], W1
	002 Return 

Method: System.Int32 get_LongestDeltaBetweenSending()

Disassembly:
	0x0352511C MOV V11.16B, V0.16B
	0x03525120 TBNZ X8, 0x0, 0x3525138

ISIL:
	001 Move W0, [X0+84]
	002 Return X0

Method: System.Void set_LongestDeltaBetweenSending(System.Int32 value)

Disassembly:
	0x03525124 ADRP X0, 0xC0F000
	0x03525128 LDR X0, [X0 + 0x828]

ISIL:
	001 Move [X0+84], W1
	002 Return 

Method: System.Int32 get_DispatchCalls()

Disassembly:
	0x0352512C BL 0x1C16CF4
	0x03525130 MOVZ W8, 0x1

ISIL:
	001 Move W0, [X0+88]
	002 Return X0

Method: System.Int32 get_DispatchIncomingCommandsCalls()

Disassembly:
	0x03525134 STRB W8, [X19 + 0xB62]
	0x03525138 LDR X0, [X20]

ISIL:
	001 Move W0, [X0+88]
	002 Return X0

Method: System.Void set_DispatchIncomingCommandsCalls(System.Int32 value)

Disassembly:
	0x0352513C MOV V2.16B, V9.16B
	0x03525140 MOV V3.16B, V8.16B

ISIL:
	001 Move [X0+88], W1
	002 Return 

Method: System.Int32 get_SendOutgoingCommandsCalls()

Disassembly:
	0x03525144 LDP X20, X19, [X31 + 0x30]
	0x03525148 LDR X30, [X31 + 0x20]

ISIL:
	001 Move W0, [X0+92]
	002 Return X0

Method: System.Void set_SendOutgoingCommandsCalls(System.Int32 value)

Disassembly:
	0x0352514C LDP D9, D8, [X31 + 0x10]
	0x03525150 MOV V0.16B, V11.16B

ISIL:
	001 Move [X0+92], W1
	002 Return 

Method: System.Int32 get_TotalByteCount()

Disassembly:
	0x03525154 MOV V1.16B, V10.16B
	0x03525158 LDP D11, D10, [X31], #0x40
	0x0352515C B 0x2290F80
	0x03525160 STR X30, [X31 - 0x20]!
	0x03525164 STP X20, X19, [X31 + 0x10]
	0x03525168 ADRP X20, 0xEBA000

ISIL:
	001 Move W8, [X0+32]
	002 Move W9, [X0+40]
	003 Move W10, [X0+48]
	004 Add W8, W9, W8
	005 Add W0, W8, W10
	006 Return X0

Method: System.Int32 get_TotalMessageCount()

Disassembly:
	0x0352516C LDRB W8, [X20 + 0xB63]
	0x03525170 MOV X19, X0
	0x03525174 TBNZ X8, 0x0, 0x3525198
	0x03525178 ADRP X0, 0xC0F000
	0x0352517C LDR X0, [X0 + 0x830]
	0x03525180 BL 0x1C16CF4

ISIL:
	001 Move W8, [X0+36]
	002 Move W9, [X0+44]
	003 Move W10, [X0+52]
	004 Add W8, W9, W8
	005 Add W0, W8, W10
	006 Return X0

Method: System.Int32 get_TotalIncomingByteCount()

Disassembly:
	0x03525184 ADRP X0, 0xC0F000
	0x03525188 LDR X0, [X0 + 0x838]
	0x0352518C BL 0x1C16CF4
	0x03525190 MOVZ W8, 0x1

ISIL:
	001 Move W8, [X0+40]
	002 Move W9, [X0+48]
	003 Add W0, W9, W8
	004 Return X0

Method: System.Int32 get_TotalIncomingMessageCount()

Disassembly:
	0x03525194 STRB W8, [X20 + 0xB63]
	0x03525198 CBZ X19, 0x35251EC
	0x0352519C ADRP X8, 0xC0F000
	0x035251A0 LDR X8, [X8 + 0x838]

ISIL:
	001 Move W8, [X0+44]
	002 Move W9, [X0+52]
	003 Add W0, W9, W8
	004 Return X0

Method: System.Int32 get_TotalOutgoingByteCount()

Disassembly:
	0x035251A4 LDR X9, [X19]
	0x035251A8 LDR X8, [X8]

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Int32 get_TotalOutgoingMessageCount()

Disassembly:
	0x035251AC LDRB W11, [X9 + 0x130]
	0x035251B0 LDRB W10, [X8 + 0x130]

ISIL:
	001 Move W0, [X0+36]
	002 Return X0

Method: System.Void .ctor(System.Diagnostics.Stopwatch sw)

Disassembly:
	0x035251B4 CMP W11, W10
	0x035251B8 B.CC 0x35251EC
	0x035251BC LDR X9, [X9 + 0xC8]
	0x035251C0 ADD X9, X9, X10, 0x3, LSL
	0x035251C4 LDUR X9, [X9 - 0x8]
	0x035251C8 CMP X9, X8
	0x035251CC B.NE 0x35251EC
	0x035251D0 ADRP X8, 0xC0F000
	0x035251D4 LDR X8, [X8 + 0x830]
	0x035251D8 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], X19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Void CountOperation(System.Int32 operationBytes)

Disassembly:
	0x035249A0 LDR W8, [X19 + 0x18]
	0x035249A4 CMP W8, 0x3
	0x035249A8 B.LS 0x35249DC
	0x035249AC ADRP X8, 0xC10000
	0x035249B0 LDR X8, [X8 + 0x778]

ISIL:
	001 Move W8, [X0+32]
	002 Move W9, [X0+36]
	003 Add W8, W8, W1
	004 Add W9, W9, 1
	005 Move [X0+32], W8
	006 Move [X0+36], W9
	007 Return 

Method: System.Void CountResult(System.Int32 resultBytes)

Disassembly:
	0x035251DC LDP X20, X19, [X31 + 0x10]
	0x035251E0 LDR X1, [X8]
	0x035251E4 LDR X30, [X31], #0x20
	0x035251E8 B 0x266AA7C
	0x035251EC BL 0x1C16F20

ISIL:
	001 Move W8, [X0+40]
	002 Move W9, [X0+44]
	003 Add W8, W8, W1
	004 Add W9, W9, 1
	005 Move [X0+40], W8
	006 Move [X0+44], W9
	007 Return 

Method: System.Void CountEvent(System.Int32 eventBytes)

Disassembly:
	0x035251F0 STR X30, [X31 - 0x20]!
	0x035251F4 STP X20, X19, [X31 + 0x10]
	0x035251F8 ADRP X20, 0xEBA000
	0x035251FC LDRB W8, [X20 + 0xB64]
	0x03525200 MOV X19, X0

ISIL:
	001 Move W8, [X0+48]
	002 Move W9, [X0+52]
	003 Add W8, W8, W1
	004 Add W9, W9, 1
	005 Move [X0+48], W8
	006 Move [X0+52], W9
	007 Return 

Method: System.Void TimeForResponseCallback(System.Byte code, System.Int32 time)

Disassembly:
	0x03525204 TBNZ X8, 0x0, 0x3525228
	0x03525208 ADRP X0, 0xC0F000
	0x0352520C LDR X0, [X0 + 0x840]
	0x03525210 BL 0x1C16CF4
	0x03525214 ADRP X0, 0xC0F000
	0x03525218 LDR X0, [X0 + 0x848]

ISIL:
	001 Move W8, [X0+56]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move [X0+56], W2
	004 Move [X0+60], W1
	005 Return 

Method: System.Void TimeForEventCallback(System.Byte code, System.Int32 time)

Disassembly:
	0x0352521C BL 0x1C16CF4
	0x03525220 MOVZ W8, 0x1
	0x03525224 STRB W8, [X20 + 0xB64]
	0x03525228 CBZ X19, 0x352527C
	0x0352522C ADRP X8, 0xC0F000
	0x03525230 LDR X8, [X8 + 0x848]

ISIL:
	001 Move W8, [X0+64]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move [X0+64], W2
	004 Move [X0+76], W1
	005 Return 

Method: System.Void TimeForMessageCallback(System.Int32 time)

Disassembly:
	0x03525234 LDR X9, [X19]
	0x03525238 LDR X8, [X8]
	0x0352523C LDRB W11, [X9 + 0x130]
	0x03525240 LDRB W10, [X8 + 0x130]
	0x03525244 CMP W11, W10

ISIL:
	001 Move W8, [X0+68]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move [X0+68], W1
	004 Return 

Method: System.Void TimeForRawMessageCallback(System.Int32 time)

Disassembly:
	0x03525248 B.CC 0x352527C
	0x0352524C LDR X9, [X9 + 0xC8]
	0x03525250 ADD X9, X9, X10, 0x3, LSL
	0x03525254 LDUR X9, [X9 - 0x8]
	0x03525258 CMP X9, X8

ISIL:
	001 Move W8, [X0+72]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move [X0+72], W1
	004 Return 

Method: System.Void DispatchIncomingCommandsCalled()

Disassembly:
	0x0352525C B.NE 0x352527C
	0x03525260 ADRP X8, 0xC0F000
	0x03525264 LDR X8, [X8 + 0x840]
	0x03525268 MOV X0, X19
	0x0352526C LDP X20, X19, [X31 + 0x10]
	0x03525270 LDR X1, [X8]
	0x03525274 LDR X30, [X31], #0x20
	0x03525278 B 0x266AFDC
	0x0352527C BL 0x1C16F20
	0x03525280 STR X30, [X31 - 0x20]!
	0x03525284 STP X20, X19, [X31 + 0x10]
	0x03525288 ADRP X20, 0xEBA000
	0x0352528C LDRB W8, [X20 + 0xB65]
	0x03525290 MOV X19, X0
	0x03525294 TBNZ X8, 0x0, 0x35252B8
	0x03525298 ADRP X0, 0xC0F000
	0x0352529C LDR X0, [X0 + 0x850]
	0x035252A0 BL 0x1C16CF4
	0x035252A4 ADRP X0, 0xC0F000
	0x035252A8 LDR X0, [X0 + 0x858]
	0x035252AC BL 0x1C16CF4
	0x035252B0 MOVZ W8, 0x1
	0x035252B4 STRB W8, [X20 + 0xB65]
	0x035252B8 CBZ X19, 0x352530C
	0x035252BC ADRP X8, 0xC0F000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+24]
	004 Move X19, X0
	005 Compare W8, 0
	006 JumpIfEqual {17}
	007 Move X0, [X19+16]
	008 Compare X0, 0
	009 JumpIfEqual {29}
	010 Move X1, X31
	011 Call Stopwatch.get_ElapsedMilliseconds, X0
	012 Move W8, [X19+24]
	013 Move W9, [X19+80]
	014 Subtract W8, W0, W8
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move [X19+80], W8
	017 Move W8, [X19+88]
	018 Move X0, [X19+16]
	019 Add W8, W8, 1
	020 Move [X19+88], W8
	021 Compare X0, 0
	022 JumpIfEqual {29}
	023 Move X1, X31
	024 Call Stopwatch.get_ElapsedMilliseconds, X0
	025 Move [X19+24], W0
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Return 
	029 Call 0x1C17F20

Method: System.Void SendOutgoingCommandsCalled()

Disassembly:
	0x035252C0 LDR X8, [X8 + 0x858]
	0x035252C4 LDR X9, [X19]
	0x035252C8 LDR X8, [X8]
	0x035252CC LDRB W11, [X9 + 0x130]
	0x035252D0 LDRB W10, [X8 + 0x130]
	0x035252D4 CMP W11, W10
	0x035252D8 B.CC 0x352530C
	0x035252DC LDR X9, [X9 + 0xC8]
	0x035252E0 ADD X9, X9, X10, 0x3, LSL
	0x035252E4 LDUR X9, [X9 - 0x8]
	0x035252E8 CMP X9, X8
	0x035252EC B.NE 0x352530C
	0x035252F0 ADRP X8, 0xC0F000
	0x035252F4 LDR X8, [X8 + 0x850]
	0x035252F8 MOV X0, X19
	0x035252FC LDP X20, X19, [X31 + 0x10]
	0x03525300 LDR X1, [X8]
	0x03525304 LDR X30, [X31], #0x20
	0x03525308 B 0x2669F88
	0x0352530C BL 0x1C16F20
	0x03525310 STR X30, [X31 - 0x30]!
	0x03525314 STP X22, X21, [X31 + 0x10]
	0x03525318 STP X20, X19, [X31 + 0x20]
	0x0352531C ADRP X22, 0xEBA000
	0x03525320 ADRP X20, 0xBF7000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+28]
	004 Move X19, X0
	005 Compare W8, 0
	006 JumpIfEqual {17}
	007 Move X0, [X19+16]
	008 Compare X0, 0
	009 JumpIfEqual {29}
	010 Move X1, X31
	011 Call Stopwatch.get_ElapsedMilliseconds, X0
	012 Move W8, [X19+28]
	013 Move W9, [X19+84]
	014 Subtract W8, W0, W8
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move [X19+84], W8
	017 Move W8, [X19+92]
	018 Move X0, [X19+16]
	019 Add W8, W8, 1
	020 Move [X19+92], W8
	021 Compare X0, 0
	022 JumpIfEqual {29}
	023 Move X1, X31
	024 Call Stopwatch.get_ElapsedMilliseconds, X0
	025 Move [X19+28], W0
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Return 
	029 Call 0x1C17F20

Method: System.Void ResetMaximumCounters()

Disassembly:
	0x03525324 ADRP X21, 0xBCE000
	0x03525328 LDRB W8, [X22 + 0xB66]
	0x0352532C LDR X20, [X20 + 0x248]
	0x03525330 LDR X21, [X21 + 0x6C0]
	0x03525334 MOV X19, X0
	0x03525338 TBNZ X8, 0x0, 0x35253A4
	0x0352533C ADRP X0, 0xBF7000
	0x03525340 LDR X0, [X0 + 0x248]

ISIL:
	001 NotImplemented "Instruction MOVI not yet implemented."
	002 Move [X0+64], W31
	003 Move [X0+76], W31
	004 Move [X0+56], W31
	005 Move [X0+60], W31
	006 Move [X0+80], D0
	007 Move [X0+24], D0
	008 Return 

Method: System.String ToString()

Disassembly:
	0x03525344 BL 0x1C16CF4
	0x03525348 ADRP X0, 0xBF5000
	0x0352534C LDR X0, [X0 + 0xD68]
	0x03525350 BL 0x1C16CF4
	0x03525354 ADRP X0, 0xBF6000
	0x03525358 LDR X0, [X0 + 0xA78]
	0x0352535C BL 0x1C16CF4
	0x03525360 ADRP X0, 0xBF5000
	0x03525364 LDR X0, [X0 + 0xD78]
	0x03525368 BL 0x1C16CF4
	0x0352536C ADRP X0, 0xBF5000
	0x03525370 LDR X0, [X0 + 0xD80]
	0x03525374 BL 0x1C16CF4
	0x03525378 ADRP X0, 0xBF5000
	0x0352537C LDR X0, [X0 + 0xD88]
	0x03525380 BL 0x1C16CF4
	0x03525384 ADRP X0, 0xBF6000
	0x03525388 LDR X0, [X0 + 0xA80]
	0x0352538C BL 0x1C16CF4
	0x03525390 ADRP X0, 0xBCE000
	0x03525394 LDR X0, [X0 + 0x6C0]
	0x03525398 BL 0x1C16CF4
	0x0352539C MOVZ W8, 0x1
	0x035253A0 STRB W8, [X22 + 0xB66]
	0x035253A4 LDR X0, [X21]
	0x035253A8 LDR X20, [X20]
	0x035253AC LDR W8, [X0 + 0xE0]
	0x035253B0 CBNZ W8, 0x35253B8
	0x035253B4 BL 0x1C16DFC
	0x035253B8 MOV X0, X20
	0x035253BC MOV X1, X31
	0x035253C0 BL 0x338C698
	0x035253C4 MOV X1, X0
	0x035253C8 MOV X0, X19
	0x035253CC MOV X2, X31
	0x035253D0 BL 0x3395194
	0x035253D4 TBZ X0, 0x0, 0x35253E0
	0x035253D8 MOVZ W0, 0x1
	0x035253DC B 0x3525578
	0x035253E0 ADRP X8, 0xBF5000
	0x035253E4 LDR X0, [X21]
	0x035253E8 LDR X8, [X8 + 0xD68]
	0x035253EC LDR W9, [X0 + 0xE0]
	0x035253F0 LDR X20, [X8]
	0x035253F4 CBNZ W9, 0x35253FC
	0x035253F8 BL 0x1C16DFC
	0x035253FC MOV X0, X20
	0x03525400 MOV X1, X31
	0x03525404 BL 0x338C698

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xEBB000
	009 Move X23, 0xBCF000
	010 Move X22, 0xC10000
	011 Move W8, [X20+2896]
	012 Move X23, [X23+1880]
	013 Move X22, [X22+1896]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xBCF000
	020 Move X0, [X0+1880]
	021 Call 0x1C17CF4
	022 Move X0, 0xC10000
	023 Move X0, [X0+1896]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+2896], W8
	027 Move W8, [X19+32]
	028 Move X0, [X23]
	029 Add X1, X31, 12
	030 Move [X31+12], W8
	031 Call 0x1C17E04
	032 Move X20, X0
	033 Move W8, [X19+40]
	034 Move X0, [X23]
	035 Add X1, X31, 8
	036 Move [X31+8], W8
	037 Call 0x1C17E04
	038 Move X21, X0
	039 Move W8, [X19+48]
	040 Move X0, [X23]
	041 Add X1, X31, 4
	042 Move [X31+4], W8
	043 Call 0x1C17E04
	044 Move X8, [X22]
	045 Move X3, X0
	046 Move X1, X20
	047 Move X2, X21
	048 Move X0, X8
	049 Move X4, X31
	050 Call String.Format, X0, X1, X2, X3
	051 Move X20, [X31+48]
	052 Move X19, [X31+56]
	053 Move X22, [X31+32]
	054 Move X21, [X31+40]
	055 Move X30, [X31+16]
	056 Move X23, [X31+24]
	057 Add X31, X31, 64
	058 Return X0

Method: System.String ToStringVitalStats()

Disassembly:
	0x03525408 MOV X1, X0
	0x0352540C MOV X0, X19
	0x03525410 MOV X2, X31
	0x03525414 BL 0x3395194
	0x03525418 TBZ X0, 0x0, 0x3525424
	0x0352541C MOVZ W0, 0x2
	0x03525420 B 0x3525578
	0x03525424 ADRP X8, 0xBF5000
	0x03525428 LDR X0, [X21]
	0x0352542C LDR X8, [X8 + 0xD78]
	0x03525430 LDR W9, [X0 + 0xE0]
	0x03525434 LDR X20, [X8]
	0x03525438 CBNZ W9, 0x3525440
	0x0352543C BL 0x1C16DFC
	0x03525440 MOV X0, X20
	0x03525444 MOV X1, X31
	0x03525448 BL 0x338C698
	0x0352544C MOV X1, X0
	0x03525450 MOV X0, X19
	0x03525454 MOV X2, X31
	0x03525458 BL 0x3395194
	0x0352545C TBZ X0, 0x0, 0x3525468
	0x03525460 MOVZ W0, 0x3
	0x03525464 B 0x3525578
	0x03525468 ADRP X8, 0xBF5000
	0x0352546C LDR X0, [X21]
	0x03525470 LDR X8, [X8 + 0xD80]
	0x03525474 LDR W9, [X0 + 0xE0]
	0x03525478 LDR X20, [X8]
	0x0352547C CBNZ W9, 0x3525484
	0x03525480 BL 0x1C16DFC
	0x03525484 MOV X0, X20
	0x03525488 MOV X1, X31
	0x0352548C BL 0x338C698
	0x03525490 MOV X1, X0
	0x03525494 MOV X0, X19
	0x03525498 MOV X2, X31
	0x0352549C BL 0x3395194
	0x035254A0 TBZ X0, 0x0, 0x35254AC
	0x035254A4 MOVZ W0, 0x4
	0x035254A8 B 0x3525578
	0x035254AC ADRP X8, 0xBF5000
	0x035254B0 LDR X0, [X21]
	0x035254B4 LDR X8, [X8 + 0xD88]
	0x035254B8 LDR W9, [X0 + 0xE0]
	0x035254BC LDR X20, [X8]
	0x035254C0 CBNZ W9, 0x35254C8
	0x035254C4 BL 0x1C16DFC
	0x035254C8 MOV X0, X20
	0x035254CC MOV X1, X31
	0x035254D0 BL 0x338C698
	0x035254D4 MOV X1, X0
	0x035254D8 MOV X0, X19
	0x035254DC MOV X2, X31
	0x035254E0 BL 0x3395194
	0x035254E4 TBZ X0, 0x0, 0x35254F0
	0x035254E8 MOVZ W0, 0x5
	0x035254EC B 0x3525578
	0x035254F0 ADRP X8, 0xBF6000
	0x035254F4 LDR X0, [X21]
	0x035254F8 LDR X8, [X8 + 0xA80]
	0x035254FC LDR W9, [X0 + 0xE0]
	0x03525500 LDR X20, [X8]
	0x03525504 CBNZ W9, 0x352550C
	0x03525508 BL 0x1C16DFC
	0x0352550C MOV X0, X20
	0x03525510 MOV X1, X31
	0x03525514 BL 0x338C698
	0x03525518 MOV X1, X0
	0x0352551C MOV X0, X19
	0x03525520 MOV X2, X31
	0x03525524 BL 0x3395194
	0x03525528 TBZ X0, 0x0, 0x3525534
	0x0352552C MOVZ W0, 0x6
	0x03525530 B 0x3525578
	0x03525534 ADRP X8, 0xBF6000
	0x03525538 LDR X0, [X21]
	0x0352553C LDR X8, [X8 + 0xA78]
	0x03525540 LDR W9, [X0 + 0xE0]
	0x03525544 LDR X20, [X8]
	0x03525548 CBNZ W9, 0x3525550
	0x0352554C BL 0x1C16DFC
	0x03525550 MOV X0, X20
	0x03525554 MOV X1, X31
	0x03525558 BL 0x338C698
	0x0352555C MOV X1, X0
	0x03525560 MOV X0, X19
	0x03525564 MOV X2, X31
	0x03525568 BL 0x3395194
	0x0352556C ANDS W31, W0, 0x1
	0x03525570 MOVZ W8, 0x7
	0x03525574 CSEL W0, W8, W31, NE
	0x03525578 LDP X20, X19, [X31 + 0x20]
	0x0352557C LDP X22, X21, [X31 + 0x10]
	0x03525580 LDR X30, [X31], #0x30
	0x03525584 RET
	0x03525588 MOV X1, X31
	0x0352558C B 0x33BDD8C
	0x03525590 STP X30, X21, [X31 - 0x20]!
	0x03525594 STP X20, X19, [X31 + 0x10]
	0x03525598 ADRP X21, 0xEBA000
	0x0352559C ADRP X20, 0xC0E000
	0x035255A0 LDRB W8, [X21 + 0xB67]
	0x035255A4 LDR X20, [X20 + 0xC10]
	0x035255A8 MOV W19, W1
	0x035255AC TBNZ X8, 0x0, 0x35255C4
	0x035255B0 ADRP X0, 0xC0E000
	0x035255B4 LDR X0, [X0 + 0xC10]
	0x035255B8 BL 0x1C16CF4
	0x035255BC MOVZ W8, 0x1
	0x035255C0 STRB W8, [X21 + 0xB67]
	0x035255C4 LDR X0, [X20]
	0x035255C8 LDR W8, [X0 + 0xE0]
	0x035255CC CBNZ W8, 0x35255D8
	0x035255D0 BL 0x1C16DFC
	0x035255D4 LDR X0, [X20]
	0x035255D8 LDR X8, [X0 + 0xB8]
	0x035255DC LDR X8, [X8]
	0x035255E0 CBZ X8, 0x3525604
	0x035255E4 LDR W9, [X8 + 0x18]
	0x035255E8 CMP W9, W19, UXTB
	0x035255EC B.LS 0x3525608
	0x035255F0 ADD X8, X8, W19, 0x3, UXTB
	0x035255F4 LDR X0, [X8 + 0x20]
	0x035255F8 LDP X20, X19, [X31 + 0x10]
	0x035255FC LDP X30, X21, [X31], #0x20
	0x03525600 RET
	0x03525604 BL 0x1C16F20
	0x03525608 BL 0x1C16F28
	0x0352560C STP X30, X21, [X31 - 0x20]!
	0x03525610 STP X20, X19, [X31 + 0x10]
	0x03525614 ADRP X21, 0xEBA000
	0x03525618 ADRP X20, 0xC0E000
	0x0352561C LDRB W8, [X21 + 0xB68]
	0x03525620 LDR X20, [X20 + 0xC10]
	0x03525624 MOV W19, W1
	0x03525628 TBNZ X8, 0x0, 0x3525640
	0x0352562C ADRP X0, 0xC0E000
	0x03525630 LDR X0, [X0 + 0xC10]
	0x03525634 BL 0x1C16CF4
	0x03525638 MOVZ W8, 0x1
	0x0352563C STRB W8, [X21 + 0xB68]
	0x03525640 LDR X0, [X20]
	0x03525644 LDR W8, [X0 + 0xE0]
	0x03525648 CBNZ W8, 0x3525654
	0x0352564C BL 0x1C16DFC
	0x03525650 LDR X0, [X20]
	0x03525654 LDR X8, [X0 + 0xB8]
	0x03525658 LDR X8, [X8 + 0x8]
	0x0352565C CBZ X8, 0x3525688
	0x03525660 LDR W9, [X8 + 0x18]
	0x03525664 AND W10, W19, 0x1
	0x03525668 CMP W10, W9
	0x0352566C B.CS 0x352568C
	0x03525670 AND X9, X19, 0x1
	0x03525674 ADD X8, X8, X9, 0x3, LSL
	0x03525678 LDR X0, [X8 + 0x20]
	0x0352567C LDP X20, X19, [X31 + 0x10]
	0x03525680 LDP X30, X21, [X31], #0x20
	0x03525684 RET
	0x03525688 BL 0x1C16F20
	0x0352568C BL 0x1C16F28
	0x03525690 SUB X31, X31, 0x70
	0x03525694 STP X30, X23, [X31 + 0x40]
	0x03525698 STP X22, X21, [X31 + 0x50]
	0x0352569C STP X20, X19, [X31 + 0x60]
	0x035256A0 ADRP X20, 0xEBA000
	0x035256A4 LDRB W8, [X20 + 0xB69]
	0x035256A8 MOV X19, X0
	0x035256AC TBNZ X8, 0x0, 0x3525700
	0x035256B0 ADRP X0, 0xC0F000
	0x035256B4 LDR X0, [X0 + 0x860]
	0x035256B8 BL 0x1C16CF4
	0x035256BC ADRP X0, 0xC0F000
	0x035256C0 LDR X0, [X0 + 0x868]
	0x035256C4 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X20, 0xEBB000
	009 Move X21, 0xBCF000
	010 Move X22, 0xBCF000
	011 Move W8, [X20+2897]
	012 Move X21, [X21+2512]
	013 Move X22, [X22+1880]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {33}
	019 Move X0, 0xBD0000
	020 Move X0, [X0+2520]
	021 Call 0x1C17CF4
	022 Move X0, 0xBCF000
	023 Move X0, [X0+1880]
	024 Call 0x1C17CF4
	025 Move X0, 0xBCF000
	026 Move X0, [X0+2512]
	027 Call 0x1C17CF4
	028 Move X0, 0xC10000
	029 Move X0, [X0+1904]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X20+2897], W8
	033 Move X0, [X21]
	034 Move W1, 8
	035 Call 0x1C17D6C
	036 Move X20, X0
	037 Move W8, [X19+84]
	038 Move X0, [X22]
	039 Add X1, X31, 28
	040 Move [X31+28], W8
	041 Call 0x1C17E04
	042 Compare X20, 0
	043 JumpIfEqual {196}
	044 Move X21, X0
	045 Compare X0, 0
	046 JumpIfEqual {53}
	047 Move X8, [X20]
	048 Move X0, X21
	049 Move X1, [X8+64]
	050 Call 0x1C17E00
	051 Compare X0, 0
	052 JumpIfEqual {193}
	053 Move W8, [X20+24]
	054 Compare W8, 0
	055 JumpIfEqual {192}
	056 Move [X20+32], X21
	057 Move W8, [X19+80]
	058 Move X0, [X22]
	059 Add X1, X31, 24
	060 Move [X31+24], W8
	061 Call 0x1C17E04
	062 Move X21, X0
	063 Compare X0, 0
	064 JumpIfEqual {71}
	065 Move X8, [X20]
	066 Move X0, X21
	067 Move X1, [X8+64]
	068 Call 0x1C17E00
	069 Compare X0, 0
	070 JumpIfEqual {193}
	071 Move W8, [X20+24]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move [X20+40], X21
	074 Move W8, [X19+64]
	075 Move X0, [X22]
	076 Add X1, X31, 20
	077 Move [X31+20], W8
	078 Call 0x1C17E04
	079 Move X21, X0
	080 Compare X0, 0
	081 JumpIfEqual {88}
	082 Move X8, [X20]
	083 Move X0, X21
	084 Move X1, [X8+64]
	085 Call 0x1C17E00
	086 Compare X0, 0
	087 JumpIfEqual {193}
	088 Move W8, [X20+24]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move X23, 0xBD0000
	091 Move X23, [X23+2520]
	092 Move [X20+48], X21
	093 Move W8, [X19+76]
	094 Add X1, X31, 16
	095 Move X0, [X23]
	096 Move [X31+16], W8
	097 Call 0x1C17E04
	098 Move X21, X0
	099 Compare X0, 0
	100 JumpIfEqual {107}
	101 Move X8, [X20]
	102 Move X0, X21
	103 Move X1, [X8+64]
	104 Call 0x1C17E00
	105 Compare X0, 0
	106 JumpIfEqual {193}
	107 Move W8, [X20+24]
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Move [X20+56], X21
	110 Move W8, [X19+56]
	111 Move X0, [X22]
	112 Add X1, X31, 12
	113 Move [X31+12], W8
	114 Call 0x1C17E04
	115 Move X21, X0
	116 Compare X0, 0
	117 JumpIfEqual {124}
	118 Move X8, [X20]
	119 Move X0, X21
	120 Move X1, [X8+64]
	121 Call 0x1C17E00
	122 Compare X0, 0
	123 JumpIfEqual {193}
	124 Move W8, [X20+24]
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Move [X20+64], X21
	127 Move W8, [X19+60]
	128 Move X0, [X23]
	129 Add X1, X31, 8
	130 Move [X31+8], W8
	131 Call 0x1C17E04
	132 Move X21, X0
	133 Compare X0, 0
	134 JumpIfEqual {141}
	135 Move X8, [X20]
	136 Move X0, X21
	137 Move X1, [X8+64]
	138 Call 0x1C17E00
	139 Compare X0, 0
	140 JumpIfEqual {193}
	141 Move W8, [X20+24]
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Move [X20+72], X21
	144 Move W8, [X19+92]
	145 Move X0, [X22]
	146 Add X1, X31, 4
	147 Move [X31+4], W8
	148 Call 0x1C17E04
	149 Move X21, X0
	150 Compare X0, 0
	151 JumpIfEqual {158}
	152 Move X8, [X20]
	153 Move X0, X21
	154 Move X1, [X8+64]
	155 Call 0x1C17E00
	156 Compare X0, 0
	157 JumpIfEqual {193}
	158 Move W8, [X20+24]
	159 NotImplemented "Instruction CMP not yet implemented."
	160 Move [X20+80], X21
	161 Move W8, [X19+88]
	162 Move X0, [X22]
	163 Add X1, X31, 0
	164 Move [X31], W8
	165 Call 0x1C17E04
	166 Move X19, X0
	167 Compare X0, 0
	168 JumpIfEqual {175}
	169 Move X8, [X20]
	170 Move X0, X19
	171 Move X1, [X8+64]
	172 Call 0x1C17E00
	173 Compare X0, 0
	174 JumpIfEqual {193}
	175 Move W8, [X20+24]
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Move X8, 0xC10000
	178 Move X8, [X8+1904]
	179 Move [X20+88], X19
	180 Move X1, X20
	181 Move X2, X31
	182 Move X0, [X8]
	183 Call String.Format, X0, X1
	184 Move X20, [X31+64]
	185 Move X19, [X31+72]
	186 Move X22, [X31+48]
	187 Move X21, [X31+56]
	188 Move X30, [X31+32]
	189 Move X23, [X31+40]
	190 Add X31, X31, 80
	191 Return X0
	192 Call 0x1C17F28
	193 Call 0x1C17F44
	194 Move X1, X31
	195 Call 0x1C17DEC
	196 Call 0x1C17F20

