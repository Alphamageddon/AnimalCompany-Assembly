Type: Fusion.Protocol.Snapshot

Method: System.Int32 get_Tick()

Disassembly:
	0x01EF896C B.NE 0x1EF8984
	0x01EF8970 LDP X20, X19, [X31 + 0x40]

ISIL:
	001 Move W0, [X0+40]
	002 Return X0

Method: System.Void set_Tick(System.Int32 value)

Disassembly:
	0x01EF8974 LDP X22, X21, [X31 + 0x30]
	0x01EF8978 LDP X30, X23, [X31 + 0x20]

ISIL:
	001 Move [X0+40], W1
	002 Return 

Method: System.UInt32 get_NetworkID()

Disassembly:
	0x01EF897C ADD X31, X31, 0x50
	0x01EF8980 RET

ISIL:
	001 Move W0, [X0+44]
	002 Return X0

Method: System.Void set_NetworkID(System.UInt32 value)

Disassembly:
	0x01EF8984 BL 0x3EB1B20
	0x01EF8988 SUB X31, X31, 0x60

ISIL:
	001 Move [X0+44], W1
	002 Return 

Method: Fusion.Protocol.SnapshotType get_SnapshotType()

Disassembly:
	0x01EF898C STP X30, X23, [X31 + 0x30]
	0x01EF8990 STP X22, X21, [X31 + 0x40]

ISIL:
	001 Move W0, [X0+48]
	002 Return X0

Method: System.Void set_SnapshotType(Fusion.Protocol.SnapshotType value)

Disassembly:
	0x01EF8994 STP X20, X19, [X31 + 0x50]
	0x01EF8998 MRS X22, 0xC000

ISIL:
	001 Move [X0+48], W1
	002 Return 

Method: System.Int32 get_TotalSize()

Disassembly:
	0x01EF899C LDR X9, [X22 + 0x28]
	0x01EF89A0 ADRP X23, 0x24E1000

ISIL:
	001 Move W0, [X0+52]
	002 Return X0

Method: System.Void set_TotalSize(System.Int32 value)

Disassembly:
	0x01EF89A4 MOV W19, W1
	0x01EF89A8 MOV X21, X0

ISIL:
	001 Move [X0+52], W1
	002 Return 

Method: System.Boolean get_IsValid()

Disassembly:
	0x01EF89AC STR X9, [X31 + 0x28]
	0x01EF89B0 LDRB W9, [X23 + 0x615]
	0x01EF89B4 MOV X20, X8
	0x01EF89B8 TBNZ X9, 0x0, 0x1EF89E8
	0x01EF89BC ADRP X0, 0x2204000
	0x01EF89C0 LDR X0, [X0 + 0x8D8]
	0x01EF89C4 BL 0x1C16CF4
	0x01EF89C8 ADRP X0, 0x2208000
	0x01EF89CC LDR X0, [X0 + 0x968]
	0x01EF89D0 BL 0x1C16CF4
	0x01EF89D4 ADRP X0, 0x2208000
	0x01EF89D8 LDR X0, [X0 + 0x970]
	0x01EF89DC BL 0x1C16CF4
	0x01EF89E0 MOVZ W8, 0x1
	0x01EF89E4 STRB W8, [X23 + 0x615]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Call Message.get_IsValid, X0
	006 Move TEMP, X0
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfNotEqual {16}
	010 Move X0, [X19+56]
	011 Move X20, [X19+64]
	012 Move W1, [X19+52]
	013 Call Snapshot.ComputeCRC, X0, X1
	014 NotImplemented "Instruction CMP not yet implemented."
	015 NotImplemented "Instruction CSET not yet implemented."
	016 Move W0, W31
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+32]
	020 Return X0

Method: System.Byte[] get_Data()

Disassembly:
	0x01EF8A6C CBZ X0, 0x1EF8AE4
	0x01EF8A70 LDR W8, [X0 + 0x18]

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.Void set_Data(System.Byte[] value)

Disassembly:
	0x01EF8A74 CBZ W8, 0x1EF8B30
	0x01EF8A78 ADRP X21, 0x2208000

ISIL:
	001 Move [X0+56], X1
	002 Return 

Method: System.UInt64 get_CRC()

Disassembly:
	0x01EF8A7C LDR X21, [X21 + 0x970]
	0x01EF8A80 LDR X1, [X0 + 0x20]

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.Void set_CRC(System.UInt64 value)

Disassembly:
	0x01EF8A84 ADD X0, X31, 0x10
	0x01EF8A88 MOV X2, X31

ISIL:
	001 Move [X0+64], X1
	002 Return 

Method: System.Void .ctor()

Disassembly:
	0x01EF8A8C STP X31, X31, [X31 + 0x10]
	0x01EF8A90 STR X31, [X31 + 0x20]
	0x01EF8A94 BL 0x34AF3C4

ISIL:
	001 Move W1, 10
	002 Move X2, X31
	003 Call Message..ctor, X0, X1, X2
	004 Return 

Method: System.Void .ctor(System.Int32 tick, System.UInt32 networkID, Fusion.Protocol.SnapshotType snapshotType, System.Int32 snapshotSize, System.Byte[] data, Fusion.Protocol.ProtocolMessageVersion protocolVersion = 10, System.Version serializationVersion = null)

Disassembly:
	0x01EF8A98 LDR X1, [X21]
	0x01EF8A9C CMP W0, 0x0
	0x01EF8AA0 CSET W0, EQ
	0x01EF8AA4 MOV X2, X31
	0x01EF8AA8 BL 0x1E3BA60
	0x01EF8AAC STRH W19, [X31 + 0x20]
	0x01EF8AB0 LDR V0, [X31 + 0x1]
	0x01EF8AB4 LDR W8, [X31 + 0x20]
	0x01EF8AB8 STR V0, [X20]
	0x01EF8ABC STP W8, W31, [X20 + 0x10]
	0x01EF8AC0 LDR X8, [X22 + 0x28]
	0x01EF8AC4 LDR X9, [X31 + 0x28]
	0x01EF8AC8 CMP X8, X9
	0x01EF8ACC B.NE 0x1EF8B34
	0x01EF8AD0 LDP X20, X19, [X31 + 0x50]
	0x01EF8AD4 LDP X22, X21, [X31 + 0x40]
	0x01EF8AD8 LDP X30, X23, [X31 + 0x30]
	0x01EF8ADC ADD X31, X31, 0x60
	0x01EF8AE0 RET
	0x01EF8AE4 BL 0x1C16F20
	0x01EF8AE8 ADRP X0, 0x2203000
	0x01EF8AEC LDR X0, [X0 + 0x578]
	0x01EF8AF0 BL 0x1C16D08
	0x01EF8AF4 BL 0x1C16F10
	0x01EF8AF8 MOV X19, X0
	0x01EF8AFC ADRP X0, 0x2208000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move W22, W2
	009 Move W23, W1
	010 Move W1, W6
	011 Move X2, X7
	012 Move X19, X5
	013 Move W20, W4
	014 Move W21, W3
	015 Move X24, X0
	016 Call Message..ctor, X0, X1, X2
	017 Move X0, X19
	018 Move W1, W20
	019 Move [X24+40], W23
	020 Move [X24+44], W22
	021 Move [X24+48], W21
	022 Move [X24+52], W20
	023 Move [X24+56], X19
	024 Call Snapshot.ComputeCRC, X0, X1
	025 Move [X24+64], X0
	026 Move X20, [X31+48]
	027 Move X19, [X31+56]
	028 Move X22, [X31+32]
	029 Move X21, [X31+40]
	030 Move X24, [X31+16]
	031 Move X23, [X31+24]
	032 Move X30, [X31+64]
	033 Return 

Method: System.Void SerializeProtected(Fusion.Protocol.BitStream stream)

Disassembly:
	0x01EF8B00 LDR X0, [X0 + 0x978]
	0x01EF8B04 BL 0x1C16D08
	0x01EF8B08 MOV X1, X0
	0x01EF8B0C MOV X0, X19
	0x01EF8B10 MOV X2, X31
	0x01EF8B14 BL 0x3314A68
	0x01EF8B18 ADRP X0, 0x2208000
	0x01EF8B1C LDR X0, [X0 + 0x980]
	0x01EF8B20 BL 0x1C16D08
	0x01EF8B24 MOV X1, X0
	0x01EF8B28 MOV X0, X19
	0x01EF8B2C BL 0x1C16DEC
	0x01EF8B30 BL 0x1C16F28
	0x01EF8B34 BL 0x3EB1B20
	0x01EF8B38 SUB X31, X31, 0x50
	0x01EF8B3C STP X30, X23, [X31 + 0x20]
	0x01EF8B40 STP X22, X21, [X31 + 0x30]
	0x01EF8B44 STP X20, X19, [X31 + 0x40]
	0x01EF8B48 MRS X21, 0xC000
	0x01EF8B4C MOV X19, X8
	0x01EF8B50 LDR X8, [X21 + 0x28]
	0x01EF8B54 ADRP X23, 0x24E1000
	0x01EF8B58 ADRP X22, 0x2205000
	0x01EF8B5C MOV W20, W0
	0x01EF8B60 STR X8, [X31 + 0x18]
	0x01EF8B64 LDRB W8, [X23 + 0x612]
	0x01EF8B68 LDR X22, [X22 + 0x78]
	0x01EF8B6C TBNZ X8, 0x0, 0x1EF8B90
	0x01EF8B70 ADRP X0, 0x2205000
	0x01EF8B74 LDR X0, [X0 + 0x78]
	0x01EF8B78 BL 0x1C16CF4
	0x01EF8B7C ADRP X0, 0x2208000
	0x01EF8B80 LDR X0, [X0 + 0x988]
	0x01EF8B84 BL 0x1C16CF4
	0x01EF8B88 MOVZ W8, 0x1
	0x01EF8B8C STRB W8, [X23 + 0x612]
	0x01EF8B90 LDR X0, [X22]
	0x01EF8B94 ADRP X22, 0x2208000
	0x01EF8B98 LDR W8, [X0 + 0xE0]
	0x01EF8B9C LDR X22, [X22 + 0x988]
	0x01EF8BA0 CBNZ W8, 0x1EF8BA8
	0x01EF8BA4 BL 0x1C16DFC
	0x01EF8BA8 LDR X0, [X22]
	0x01EF8BAC ADD X8, X31, 0x0
	0x01EF8BB0 MOV W1, W20
	0x01EF8BB4 BL 0x1EF8988
	0x01EF8BB8 LDR X8, [X31 + 0x10]
	0x01EF8BBC LDR V0, [X31]
	0x01EF8BC0 STR X8, [X19 + 0x10]
	0x01EF8BC4 STR V0, [X19]
	0x01EF8BC8 LDR X8, [X21 + 0x28]
	0x01EF8BCC LDR X9, [X31 + 0x18]
	0x01EF8BD0 CMP X8, X9
	0x01EF8BD4 B.NE 0x1EF8BEC
	0x01EF8BD8 LDP X20, X19, [X31 + 0x40]
	0x01EF8BDC LDP X22, X21, [X31 + 0x30]
	0x01EF8BE0 LDP X30, X23, [X31 + 0x20]
	0x01EF8BE4 ADD X31, X31, 0x50
	0x01EF8BE8 RET

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+64], X20
	004 Move [X31+72], X19
	005 Move W9, [X0+40]
	006 Move W8, [X0+44]
	007 Move [X31+56], W8
	008 Move [X31+60], W9
	009 Move W8, [X0+48]
	010 Move [X31+44], W8
	011 Move X8, [X0+64]
	012 Move [X31+32], X8
	013 Move W8, [X0+52]
	014 Move [X31+28], W8
	015 Move X8, [X0+56]
	016 Move [X31+16], X8
	017 Compare X1, 0
	018 JumpIfEqual {65}
	019 Move X20, X1
	020 Move X19, X0
	021 Add X1, X31, 60
	022 Move W2, 32
	023 Move X0, X20
	024 Call BitStream.Serialize, X0, X1, X2
	025 Add X1, X31, 56
	026 Move W2, 32
	027 Move X0, X20
	028 Call BitStream.Serialize, X0, X1, X2
	029 Add X1, X31, 44
	030 Move X0, X20
	031 Call BitStream.Serialize, X0, X1
	032 Add X1, X31, 12
	033 Move W2, 32
	034 Move X0, X20
	035 Move [X31+12], W31
	036 Call BitStream.Serialize, X0, X1, X2
	037 Add X1, X31, 32
	038 Move X0, X20
	039 Call BitStream.Serialize, X0, X1
	040 Add X1, X31, 28
	041 Move W2, 32
	042 Move X0, X20
	043 Call BitStream.Serialize, X0, X1, X2
	044 Add X1, X31, 16
	045 Add X2, X31, 28
	046 Move X0, X20
	047 Call BitStream.Serialize, X0, X1, X2
	048 Move W9, [X31+60]
	049 Move W8, [X31+56]
	050 Move X30, [X31+48]
	051 Move [X19+40], W9
	052 Move [X19+44], W8
	053 Move W8, [X31+44]
	054 Move [X19+48], W8
	055 Move W8, [X31+28]
	056 Move X9, [X31+32]
	057 Move [X19+52], W8
	058 Move X8, [X31+16]
	059 Move [X19+56], X8
	060 Move [X19+64], X9
	061 Move X20, [X31+64]
	062 Move X19, [X31+72]
	063 Add X31, X31, 80
	064 Return 
	065 Call 0x1C17F20

Method: System.UInt64 ComputeCRC(System.Byte[] data, System.Int32 length)

Disassembly:
	0x01EF89E8 MOV X0, X21
	0x01EF89EC MOV X1, X31
	0x01EF89F0 STP X31, X31, [X31 + 0x10]
	0x01EF89F4 STR X31, [X31 + 0x20]
	0x01EF89F8 STR X31, [X31 + 0x8]
	0x01EF89FC BL 0x32277A8
	0x01EF8A00 TBNZ X0, 0x0, 0x1EF8AE8
	0x01EF8A04 ADRP X8, 0x2208000
	0x01EF8A08 LDR X8, [X8 + 0x968]
	0x01EF8A0C LDR X0, [X8]
	0x01EF8A10 LDR W8, [X0 + 0xE0]
	0x01EF8A14 CBNZ W8, 0x1EF8A1C
	0x01EF8A18 BL 0x1C16DFC
	0x01EF8A1C ADD X1, X31, 0x8
	0x01EF8A20 MOV X0, X21
	0x01EF8A24 MOV X2, X31
	0x01EF8A28 BL 0x366D010
	0x01EF8A2C TBZ X0, 0x0, 0x1EF8AE8
	0x01EF8A30 ADRP X8, 0x2204000
	0x01EF8A34 LDR X8, [X8 + 0x8D8]
	0x01EF8A38 MOVZ W1, 0x1
	0x01EF8A3C LDR X0, [X8]
	0x01EF8A40 BL 0x1C16D6C
	0x01EF8A44 CBZ X0, 0x1EF8AE4
	0x01EF8A48 LDR W8, [X0 + 0x18]
	0x01EF8A4C MOV X1, X0
	0x01EF8A50 CBZ W8, 0x1EF8B30
	0x01EF8A54 MOVZ W8, 0x25
	0x01EF8A58 STRH W8, [X1 + 0x20]
	0x01EF8A5C CBZ X21, 0x1EF8AE4
	0x01EF8A60 MOV X0, X21
	0x01EF8A64 MOV X2, X31
	0x01EF8A68 BL 0x3229E68

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x24E2000
	006 Move W8, [X21+1539]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2204000
	014 Move X0, [X0+1376]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1539], W8
	018 Compare X20, 0
	019 JumpIfEqual {40}
	020 Move X8, 0x2204000
	021 Move X8, [X8+1376]
	022 Add X10, X20, 32
	023 Move X0, [X8]
	024 Move W8, [X20+24]
	025 Move W9, [X0+224]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction CSEL not yet implemented."
	028 Compare W9, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move W1, W19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X2, X31
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Call CRC64.Compute, X0, X1
	039 Return X0
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X0, X31
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Return X0

Method: Fusion.Protocol.Message Clone()

Disassembly:
	0x01EF8BEC BL 0x3EB1B20
	0x01EF8BF0 SUB X31, X31, 0x50
	0x01EF8BF4 STP X30, X23, [X31 + 0x20]
	0x01EF8BF8 STP X22, X21, [X31 + 0x30]
	0x01EF8BFC STP X20, X19, [X31 + 0x40]
	0x01EF8C00 MRS X21, 0xC000
	0x01EF8C04 MOV X19, X8
	0x01EF8C08 LDR X8, [X21 + 0x28]
	0x01EF8C0C ADRP X23, 0x24E1000
	0x01EF8C10 ADRP X22, 0x2205000
	0x01EF8C14 MOV W20, W0
	0x01EF8C18 STR X8, [X31 + 0x18]
	0x01EF8C1C LDRB W8, [X23 + 0x613]
	0x01EF8C20 LDR X22, [X22 + 0x78]
	0x01EF8C24 TBNZ X8, 0x0, 0x1EF8C48
	0x01EF8C28 ADRP X0, 0x2205000
	0x01EF8C2C LDR X0, [X0 + 0x78]
	0x01EF8C30 BL 0x1C16CF4
	0x01EF8C34 ADRP X0, 0x2208000
	0x01EF8C38 LDR X0, [X0 + 0x990]
	0x01EF8C3C BL 0x1C16CF4
	0x01EF8C40 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x24E2000
	005 Move X20, 0x2206000
	006 Move W8, [X19+1540]
	007 Move X20, [X20+184]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2206000
	013 Move X0, [X0+184]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1540], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move W1, 10
	020 Move X2, X31
	021 Move X19, X0
	022 Call Message..ctor, X0, X1, X2
	023 Move X0, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Return X0

Method: System.String ToString()

Disassembly:
	0x01EF8C44 STRB W8, [X23 + 0x613]
	0x01EF8C48 LDR X0, [X22]
	0x01EF8C4C ADRP X22, 0x2208000
	0x01EF8C50 LDR W8, [X0 + 0xE0]
	0x01EF8C54 LDR X22, [X22 + 0x990]
	0x01EF8C58 CBNZ W8, 0x1EF8C60
	0x01EF8C5C BL 0x1C16DFC
	0x01EF8C60 LDR X0, [X22]
	0x01EF8C64 ADD X8, X31, 0x0
	0x01EF8C68 MOV W1, W20
	0x01EF8C6C BL 0x1EF8988
	0x01EF8C70 LDR X8, [X31 + 0x10]
	0x01EF8C74 LDR V0, [X31]
	0x01EF8C78 STR X8, [X19 + 0x10]
	0x01EF8C7C STR V0, [X19]
	0x01EF8C80 LDR X8, [X21 + 0x28]
	0x01EF8C84 LDR X9, [X31 + 0x18]
	0x01EF8C88 CMP X8, X9
	0x01EF8C8C B.NE 0x1EF8CA4
	0x01EF8C90 LDP X20, X19, [X31 + 0x40]
	0x01EF8C94 LDP X22, X21, [X31 + 0x30]
	0x01EF8C98 LDP X30, X23, [X31 + 0x20]
	0x01EF8C9C ADD X31, X31, 0x50
	0x01EF8CA0 RET
	0x01EF8CA4 BL 0x3EB1B20
	0x01EF8CA8 SUB X31, X31, 0x50
	0x01EF8CAC STP X30, X23, [X31 + 0x20]
	0x01EF8CB0 STP X22, X21, [X31 + 0x30]
	0x01EF8CB4 STP X20, X19, [X31 + 0x40]
	0x01EF8CB8 MRS X21, 0xC000
	0x01EF8CBC MOV X19, X8
	0x01EF8CC0 LDR X8, [X21 + 0x28]
	0x01EF8CC4 ADRP X23, 0x24E1000
	0x01EF8CC8 ADRP X22, 0x2205000
	0x01EF8CCC MOV W20, W0
	0x01EF8CD0 STR X8, [X31 + 0x18]
	0x01EF8CD4 LDRB W8, [X23 + 0x614]
	0x01EF8CD8 LDR X22, [X22 + 0x78]
	0x01EF8CDC TBNZ X8, 0x0, 0x1EF8D00
	0x01EF8CE0 ADRP X0, 0x2205000
	0x01EF8CE4 LDR X0, [X0 + 0x78]
	0x01EF8CE8 BL 0x1C16CF4
	0x01EF8CEC ADRP X0, 0x2208000
	0x01EF8CF0 LDR X0, [X0 + 0x998]
	0x01EF8CF4 BL 0x1C16CF4
	0x01EF8CF8 MOVZ W8, 0x1
	0x01EF8CFC STRB W8, [X23 + 0x614]
	0x01EF8D00 LDR X0, [X22]
	0x01EF8D04 ADRP X22, 0x2208000
	0x01EF8D08 LDR W8, [X0 + 0xE0]
	0x01EF8D0C LDR X22, [X22 + 0x998]
	0x01EF8D10 CBNZ W8, 0x1EF8D18
	0x01EF8D14 BL 0x1C16DFC
	0x01EF8D18 LDR X0, [X22]
	0x01EF8D1C ADD X8, X31, 0x0
	0x01EF8D20 MOV W1, W20
	0x01EF8D24 BL 0x1EF8988
	0x01EF8D28 LDR X8, [X31 + 0x10]
	0x01EF8D2C LDR V0, [X31]
	0x01EF8D30 STR X8, [X19 + 0x10]
	0x01EF8D34 STR V0, [X19]
	0x01EF8D38 LDR X8, [X21 + 0x28]
	0x01EF8D3C LDR X9, [X31 + 0x18]
	0x01EF8D40 CMP X8, X9
	0x01EF8D44 B.NE 0x1EF8D5C
	0x01EF8D48 LDP X20, X19, [X31 + 0x40]
	0x01EF8D4C LDP X22, X21, [X31 + 0x30]
	0x01EF8D50 LDP X30, X23, [X31 + 0x20]
	0x01EF8D54 ADD X31, X31, 0x50
	0x01EF8D58 RET
	0x01EF8D5C BL 0x3EB1B20
	0x01EF8D60 STR X30, [X31 - 0x30]!
	0x01EF8D64 STP X22, X21, [X31 + 0x10]
	0x01EF8D68 STP X20, X19, [X31 + 0x20]
	0x01EF8D6C ADRP X21, 0x24E1000
	0x01EF8D70 LDRB W8, [X21 + 0x616]
	0x01EF8D74 MOV X20, X1
	0x01EF8D78 MOV X19, X0
	0x01EF8D7C TBNZ X8, 0x0, 0x1EF8D94
	0x01EF8D80 ADRP X0, 0x2205000
	0x01EF8D84 LDR X0, [X0 + 0x78]
	0x01EF8D88 BL 0x1C16CF4
	0x01EF8D8C MOVZ W8, 0x1
	0x01EF8D90 STRB W8, [X21 + 0x616]
	0x01EF8D94 CBZ X20, 0x1EF8DFC
	0x01EF8D98 ADRP X21, 0x2205000
	0x01EF8D9C LDR X21, [X21 + 0x78]
	0x01EF8DA0 LDR X9, [X20]
	0x01EF8DA4 LDR X8, [X21]
	0x01EF8DA8 CMP X9, X8
	0x01EF8DAC B.NE 0x1EF8DFC
	0x01EF8DB0 MOV X0, X20
	0x01EF8DB4 BL 0x1C16E08
	0x01EF8DB8 MOV X8, X0
	0x01EF8DBC LDR X0, [X21]
	0x01EF8DC0 LDP X22, X21, [X8]
	0x01EF8DC4 LDR X20, [X8 + 0x10]
	0x01EF8DC8 LDR W9, [X0 + 0xE0]
	0x01EF8DCC CBNZ W9, 0x1EF8DD4
	0x01EF8DD0 BL 0x1C16DFC
	0x01EF8DD4 LDR X8, [X19]
	0x01EF8DD8 CMP X8, X22
	0x01EF8DDC B.NE 0x1EF8DFC
	0x01EF8DE0 LDR X8, [X19 + 0x8]
	0x01EF8DE4 CMP X8, X21
	0x01EF8DE8 B.NE 0x1EF8DFC
	0x01EF8DEC LDR X8, [X19 + 0x10]
	0x01EF8DF0 CMP X8, X20
	0x01EF8DF4 CSET W0, EQ
	0x01EF8DF8 B 0x1EF8E00
	0x01EF8DFC MOV W0, W31
	0x01EF8E00 LDP X20, X19, [X31 + 0x20]
	0x01EF8E04 LDP X22, X21, [X31 + 0x10]
	0x01EF8E08 LDR X30, [X31], #0x30
	0x01EF8E0C RET
	0x01EF8E10 STP X30, X21, [X31 - 0x20]!
	0x01EF8E14 STP X20, X19, [X31 + 0x10]
	0x01EF8E18 MOV X1, X31
	0x01EF8E1C MOV X19, X0
	0x01EF8E20 BL 0x339A95C
	0x01EF8E24 MOV W20, W0
	0x01EF8E28 ADD X0, X19, 0x8
	0x01EF8E2C MOV X1, X31
	0x01EF8E30 BL 0x339A95C
	0x01EF8E34 MOV W21, W0
	0x01EF8E38 ADD X0, X19, 0x10
	0x01EF8E3C MOV X1, X31
	0x01EF8E40 BL 0x339A95C
	0x01EF8E44 MOVZ W8, 0x18D
	0x01EF8E48 MUL W9, W20, W8
	0x01EF8E4C LDP X20, X19, [X31 + 0x10]
	0x01EF8E50 EOR W9, W9, W21, 0x0
	0x01EF8E54 MUL W8, W9, W8
	0x01EF8E58 EOR W0, W8, W0, 0x0
	0x01EF8E5C LDP X30, X21, [X31], #0x20
	0x01EF8E60 RET
	0x01EF8E64 SUB X31, X31, 0x40
	0x01EF8E68 STP X30, X23, [X31 + 0x10]
	0x01EF8E6C STP X22, X21, [X31 + 0x20]
	0x01EF8E70 STP X20, X19, [X31 + 0x30]
	0x01EF8E74 ADRP X21, 0x24E1000
	0x01EF8E78 ADRP X20, 0x2205000
	0x01EF8E7C LDRB W8, [X21 + 0x617]
	0x01EF8E80 LDR X20, [X20 + 0x78]
	0x01EF8E84 MOV X19, X0
	0x01EF8E88 TBNZ X8, 0x0, 0x1EF8ED0
	0x01EF8E8C ADRP X0, 0x21FB000
	0x01EF8E90 LDR X0, [X0 + 0x758]
	0x01EF8E94 BL 0x1C16CF4
	0x01EF8E98 ADRP X0, 0x2205000
	0x01EF8E9C LDR X0, [X0 + 0x78]
	0x01EF8EA0 BL 0x1C16CF4
	0x01EF8EA4 ADRP X0, 0x2208000
	0x01EF8EA8 LDR X0, [X0 + 0x9A0]
	0x01EF8EAC BL 0x1C16CF4
	0x01EF8EB0 ADRP X0, 0x2208000
	0x01EF8EB4 LDR X0, [X0 + 0x9A8]
	0x01EF8EB8 BL 0x1C16CF4
	0x01EF8EBC ADRP X0, 0x2208000
	0x01EF8EC0 LDR X0, [X0 + 0x8C0]
	0x01EF8EC4 BL 0x1C16CF4
	0x01EF8EC8 MOVZ W8, 0x1
	0x01EF8ECC STRB W8, [X21 + 0x617]
	0x01EF8ED0 LDR X0, [X20]
	0x01EF8ED4 ADRP X23, 0x21FB000
	0x01EF8ED8 ADRP X22, 0x2208000
	0x01EF8EDC ADRP X21, 0x2208000
	0x01EF8EE0 ADRP X20, 0x2208000
	0x01EF8EE4 LDR W8, [X0 + 0xE0]
	0x01EF8EE8 LDR X23, [X23 + 0x758]
	0x01EF8EEC LDR X22, [X22 + 0x9A0]
	0x01EF8EF0 LDR X21, [X21 + 0x9A8]
	0x01EF8EF4 LDR X20, [X20 + 0x8C0]
	0x01EF8EF8 CBNZ W8, 0x1EF8F00
	0x01EF8EFC BL 0x1C16DFC
	0x01EF8F00 LDR W8, [X19 + 0x14]
	0x01EF8F04 LDR X0, [X23]
	0x01EF8F08 ADD X1, X31, 0xC
	0x01EF8F0C SUB W8, W8, 0x1
	0x01EF8F10 STR W8, [X31 + 0xC]
	0x01EF8F14 BL 0x1C16E04
	0x01EF8F18 LDR X8, [X22]
	0x01EF8F1C LDR X1, [X21]
	0x01EF8F20 LDR X2, [X20]
	0x01EF8F24 MOV X3, X0
	0x01EF8F28 MOV X0, X8
	0x01EF8F2C MOV X4, X31
	0x01EF8F30 BL 0x3227C18
	0x01EF8F34 LDP X20, X19, [X31 + 0x30]
	0x01EF8F38 LDP X22, X21, [X31 + 0x20]
	0x01EF8F3C LDP X30, X23, [X31 + 0x10]
	0x01EF8F40 ADD X31, X31, 0x40
	0x01EF8F44 RET
	0x01EF8F48 STR X30, [X31 - 0x20]!
	0x01EF8F4C STP X20, X19, [X31 + 0x10]
	0x01EF8F50 ADRP X20, 0x24E1000
	0x01EF8F54 ADRP X19, 0x2205000
	0x01EF8F58 LDRB W8, [X20 + 0x618]
	0x01EF8F5C LDR X19, [X19 + 0x78]
	0x01EF8F60 TBNZ X8, 0x0, 0x1EF8F78
	0x01EF8F64 ADRP X0, 0x2205000
	0x01EF8F68 LDR X0, [X0 + 0x78]
	0x01EF8F6C BL 0x1C16CF4
	0x01EF8F70 MOVZ W8, 0x1
	0x01EF8F74 STRB W8, [X20 + 0x618]
	0x01EF8F78 LDR X8, [X19]
	0x01EF8F7C ADRP X9, 0xFFFFFFFFFEBF5000
	0x01EF8F80 LDR V0, [X9 + 0xB]
	0x01EF8F84 LDR X8, [X8 + 0xB8]
	0x01EF8F88 STR V0, [X8]
	0x01EF8F8C STR X31, [X8 + 0x10]
	0x01EF8F90 LDR X8, [X19]
	0x01EF8F94 LDP X20, X19, [X31 + 0x10]
	0x01EF8F98 LDR X8, [X8 + 0xB8]
	0x01EF8F9C STP X31, X31, [X8 + 0x18]
	0x01EF8FA0 STR X31, [X8 + 0x28]
	0x01EF8FA4 LDR X30, [X31], #0x20
	0x01EF8FA8 RET
	0x01EF8FAC LDR X8, [X1]
	0x01EF8FB0 LDR X9, [X2]
	0x01EF8FB4 CMP X8, X9
	0x01EF8FB8 B.NE 0x1EF8FE0
	0x01EF8FBC LDR X8, [X1 + 0x8]
	0x01EF8FC0 LDR X9, [X2 + 0x8]
	0x01EF8FC4 CMP X8, X9
	0x01EF8FC8 B.NE 0x1EF8FE0
	0x01EF8FCC LDR X8, [X1 + 0x10]
	0x01EF8FD0 LDR X9, [X2 + 0x10]
	0x01EF8FD4 CMP X8, X9
	0x01EF8FD8 CSET W0, EQ
	0x01EF8FDC RET
	0x01EF8FE0 MOV W0, W31
	0x01EF8FE4 RET
	0x01EF8FE8 STP X30, X21, [X31 - 0x20]!
	0x01EF8FEC STP X20, X19, [X31 + 0x10]
	0x01EF8FF0 MOV X19, X1
	0x01EF8FF4 MOV X0, X1
	0x01EF8FF8 MOV X1, X31
	0x01EF8FFC BL 0x339A95C
	0x01EF9000 MOV W20, W0
	0x01EF9004 ADD X0, X19, 0x8
	0x01EF9008 MOV X1, X31
	0x01EF900C BL 0x339A95C
	0x01EF9010 MOV W21, W0
	0x01EF9014 ADD X0, X19, 0x10
	0x01EF9018 MOV X1, X31
	0x01EF901C BL 0x339A95C
	0x01EF9020 MOVZ W8, 0x18D
	0x01EF9024 MUL W9, W20, W8
	0x01EF9028 LDP X20, X19, [X31 + 0x10]
	0x01EF902C EOR W9, W9, W21, 0x0
	0x01EF9030 MUL W8, W9, W8
	0x01EF9034 EOR W0, W8, W0, 0x0
	0x01EF9038 LDP X30, X21, [X31], #0x20
	0x01EF903C RET
	0x01EF9040 MOV X1, X31
	0x01EF9044 B 0x33BDD8C
	0x01EF9048 STR X30, [X31 - 0x20]!
	0x01EF904C STP X20, X19, [X31 + 0x10]
	0x01EF9050 ADRP X20, 0x24E0000
	0x01EF9054 ADRP X19, 0x2204000
	0x01EF9058 LDRB W8, [X20 + 0x619]
	0x01EF905C LDR X19, [X19 + 0x148]
	0x01EF9060 TBNZ X8, 0x0, 0x1EF9078
	0x01EF9064 ADRP X0, 0x2204000
	0x01EF9068 LDR X0, [X0 + 0x148]
	0x01EF906C BL 0x1C16CF4
	0x01EF9070 MOVZ W8, 0x1
	0x01EF9074 STRB W8, [X20 + 0x619]
	0x01EF9078 LDR X0, [X19]
	0x01EF907C LDR W8, [X0 + 0xE0]
	0x01EF9080 CBNZ W8, 0x1EF908C
	0x01EF9084 BL 0x1C16DFC

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X20, 0x24E2000
	009 Move X21, 0x21FC000
	010 Move W8, [X20+1541]
	011 Move X21, [X21+2512]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {58}
	017 Move X0, 0x21FC000
	018 Move X0, [X0+2904]
	019 Call 0x1C17CF4
	020 Move X0, 0x21FC000
	021 Move X0, [X0+1880]
	022 Call 0x1C17CF4
	023 Move X0, 0x21FC000
	024 Move X0, [X0+2512]
	025 Call 0x1C17CF4
	026 Move X0, 0x2209000
	027 Move X0, [X0+2296]
	028 Call 0x1C17CF4
	029 Move X0, 0x2204000
	030 Move X0, [X0+1824]
	031 Call 0x1C17CF4
	032 Move X0, 0x21FD000
	033 Move X0, [X0+1880]
	034 Call 0x1C17CF4
	035 Move X0, 0x2209000
	036 Move X0, [X0+2304]
	037 Call 0x1C17CF4
	038 Move X0, 0x2206000
	039 Move X0, [X0+840]
	040 Call 0x1C17CF4
	041 Move X0, 0x2209000
	042 Move X0, [X0+2312]
	043 Call 0x1C17CF4
	044 Move X0, 0x2207000
	045 Move X0, [X0+1664]
	046 Call 0x1C17CF4
	047 Move X0, 0x2209000
	048 Move X0, [X0+2320]
	049 Call 0x1C17CF4
	050 Move X0, 0x2209000
	051 Move X0, [X0+2328]
	052 Call 0x1C17CF4
	053 Move X0, 0x2209000
	054 Move X0, [X0+2336]
	055 Call 0x1C17CF4
	056 Move W8, 1
	057 Move [X20+1541], W8
	058 Move X0, [X21]
	059 Move W1, 13
	060 Call 0x1C17D6C
	061 Compare X0, 0
	062 JumpIfEqual {299}
	063 Move X21, 0x2209000
	064 Move X21, [X21+2304]
	065 Move X20, X0
	066 Move X0, [X21]
	067 Compare X0, 0
	068 JumpIfEqual {74}
	069 Move X8, [X20]
	070 Move X1, [X8+64]
	071 Call 0x1C17E00
	072 Compare X0, 0
	073 JumpIfEqual {296}
	074 Move W8, [X20+24]
	075 Compare W8, 0
	076 JumpIfEqual {295}
	077 Move X9, [X21]
	078 Move X21, 0x2207000
	079 Move X21, [X21+1664]
	080 Move [X20+32], X9
	081 Move X0, [X21]
	082 Compare X0, 0
	083 JumpIfEqual {90}
	084 Move X8, [X20]
	085 Move X1, [X8+64]
	086 Call 0x1C17E00
	087 Compare X0, 0
	088 JumpIfEqual {296}
	089 Move W8, [X20+24]
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move X8, [X21]
	092 Move X22, 0x21FC000
	093 Move X22, [X22+1880]
	094 Add X1, X31, 28
	095 Move [X20+40], X8
	096 Move W8, [X19+40]
	097 Move X0, [X22]
	098 Move [X31+28], W8
	099 Call 0x1C17E04
	100 Move X21, X0
	101 Compare X0, 0
	102 JumpIfEqual {109}
	103 Move X8, [X20]
	104 Move X0, X21
	105 Move X1, [X8+64]
	106 Call 0x1C17E00
	107 Compare X0, 0
	108 JumpIfEqual {296}
	109 Move W8, [X20+24]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Move X23, 0x2209000
	112 Move X23, [X23+2336]
	113 Move [X20+48], X21
	114 Move X0, [X23]
	115 Compare X0, 0
	116 JumpIfEqual {123}
	117 Move X8, [X20]
	118 Move X1, [X8+64]
	119 Call 0x1C17E00
	120 Compare X0, 0
	121 JumpIfEqual {296}
	122 Move W8, [X20+24]
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Move X8, [X23]
	125 Move X9, 0x2204000
	126 Move X9, [X9+1824]
	127 Add X1, X31, 24
	128 Move [X20+56], X8
	129 Move W8, [X19+44]
	130 Move X0, [X9]
	131 Move [X31+24], W8
	132 Call 0x1C17E04
	133 Move X21, X0
	134 Compare X0, 0
	135 JumpIfEqual {142}
	136 Move X8, [X20]
	137 Move X0, X21
	138 Move X1, [X8+64]
	139 Call 0x1C17E00
	140 Compare X0, 0
	141 JumpIfEqual {296}
	142 Move W8, [X20+24]
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Move X23, 0x2209000
	145 Move X23, [X23+2328]
	146 Move [X20+64], X21
	147 Move X0, [X23]
	148 Compare X0, 0
	149 JumpIfEqual {156}
	150 Move X8, [X20]
	151 Move X1, [X8+64]
	152 Call 0x1C17E00
	153 Compare X0, 0
	154 JumpIfEqual {296}
	155 Move W8, [X20+24]
	156 NotImplemented "Instruction CMP not yet implemented."
	157 Move X8, [X23]
	158 Move X9, 0x2209000
	159 Move X9, [X9+2296]
	160 Add X1, X31, 20
	161 Move [X20+72], X8
	162 Move W8, [X19+48]
	163 Move X0, [X9]
	164 Move [X31+20], W8
	165 Call 0x1C17E04
	166 Move X21, X0
	167 Compare X0, 0
	168 JumpIfEqual {175}
	169 Move X8, [X20]
	170 Move X0, X21
	171 Move X1, [X8+64]
	172 Call 0x1C17E00
	173 Compare X0, 0
	174 JumpIfEqual {296}
	175 Move W8, [X20+24]
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Move X23, 0x2209000
	178 Move X23, [X23+2320]
	179 Move [X20+80], X21
	180 Move X0, [X23]
	181 Compare X0, 0
	182 JumpIfEqual {189}
	183 Move X8, [X20]
	184 Move X1, [X8+64]
	185 Call 0x1C17E00
	186 Compare X0, 0
	187 JumpIfEqual {296}
	188 Move W8, [X20+24]
	189 NotImplemented "Instruction CMP not yet implemented."
	190 Move X8, [X23]
	191 Add X1, X31, 16
	192 Move [X20+88], X8
	193 Move W8, [X19+52]
	194 Move X0, [X22]
	195 Move [X31+16], W8
	196 Call 0x1C17E04
	197 Move X21, X0
	198 Compare X0, 0
	199 JumpIfEqual {206}
	200 Move X8, [X20]
	201 Move X0, X21
	202 Move X1, [X8+64]
	203 Call 0x1C17E00
	204 Compare X0, 0
	205 JumpIfEqual {296}
	206 Move W8, [X20+24]
	207 NotImplemented "Instruction CMP not yet implemented."
	208 Move X8, 0x21FD000
	209 Move X8, [X8+1880]
	210 Move [X20+96], X21
	211 Move X9, [X19+64]
	212 Add X1, X31, 8
	213 Move X0, [X8]
	214 Move [X31+8], X9
	215 Call 0x1C17E04
	216 Move X21, X0
	217 Compare X0, 0
	218 JumpIfEqual {225}
	219 Move X8, [X20]
	220 Move X0, X21
	221 Move X1, [X8+64]
	222 Call 0x1C17E00
	223 Compare X0, 0
	224 JumpIfEqual {296}
	225 Move W8, [X20+24]
	226 NotImplemented "Instruction CMP not yet implemented."
	227 Move X22, 0x2206000
	228 Move X22, [X22+840]
	229 Move [X20+104], X21
	230 Move X0, [X22]
	231 Compare X0, 0
	232 JumpIfEqual {239}
	233 Move X8, [X20]
	234 Move X1, [X8+64]
	235 Call 0x1C17E00
	236 Compare X0, 0
	237 JumpIfEqual {296}
	238 Move W8, [X20+24]
	239 NotImplemented "Instruction CMP not yet implemented."
	240 Move X8, [X22]
	241 Move X21, 0x21FC000
	242 Move X0, X19
	243 Move [X20+112], X8
	244 Move X8, [X19]
	245 Move X9, [X8+376]
	246 Move X1, [X8+384]
	247 Move X21, [X21+2904]
	248 NotImplemented "Instruction BLR not yet implemented."
	249 Move X8, [X21]
	250 And W9, W0, 1
	251 Add X1, X31, 4
	252 Move [X31+4], W9
	253 Move X0, X8
	254 Call 0x1C17E04
	255 Move X21, X0
	256 Compare X0, 0
	257 JumpIfEqual {264}
	258 Move X8, [X20]
	259 Move X0, X21
	260 Move X1, [X8+64]
	261 Call 0x1C17E00
	262 Compare X0, 0
	263 JumpIfEqual {296}
	264 Move W8, [X20+24]
	265 NotImplemented "Instruction CMP not yet implemented."
	266 Move X0, X19
	267 Move [X20+120], X21
	268 Call Message.ToString, X0
	269 Move X19, X0
	270 Compare X0, 0
	271 JumpIfEqual {278}
	272 Move X8, [X20]
	273 Move X0, X19
	274 Move X1, [X8+64]
	275 Call 0x1C17E00
	276 Compare X0, 0
	277 JumpIfEqual {296}
	278 Move W8, [X20+24]
	279 NotImplemented "Instruction CMP not yet implemented."
	280 Move X8, 0x2208000
	281 Move X8, [X8+2312]
	282 Move [X20+128], X19
	283 Move X1, X20
	284 Move X2, X31
	285 Move X0, [X8]
	286 Call String.Format, X0, X1
	287 Move X20, [X31+64]
	288 Move X19, [X31+72]
	289 Move X22, [X31+48]
	290 Move X21, [X31+56]
	291 Move X30, [X31+32]
	292 Move X23, [X31+40]
	293 Add X31, X31, 80
	294 Return X0
	295 Call 0x1C17F28
	296 Call 0x1C17F44
	297 Move X1, X31
	298 Call 0x1C17DEC
	299 Call 0x1C17F20

