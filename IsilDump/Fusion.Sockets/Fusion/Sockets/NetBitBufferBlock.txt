Type: Fusion.Sockets.NetBitBufferBlock

Method: System.Void Dispose(Fusion.Sockets.NetBitBufferBlock* block)

Disassembly:
	0x01EFBA8C STUR V0, [X31 + 0x28]
	0x01EFBA90 STP V0, V0, [X8 + 0x40]
	0x01EFBA94 STR V0, [X8 + 0x6]
	0x01EFBA98 LDUR V0, [X31 + 0x24]
	0x01EFBA9C LDR W10, [X31 + 0x34]
	0x01EFBAA0 LDUR V1, [X31 + 0x4]
	0x01EFBAA4 LDUR V2, [X31 + 0x14]
	0x01EFBAA8 STR X31, [X8]
	0x01EFBAAC STR W31, [X8 + 0x8]
	0x01EFBAB0 STR X31, [X8 + 0x70]
	0x01EFBAB4 STR W10, [X8 + 0x3C]
	0x01EFBAB8 STUR V0, [X8 + 0x2C]
	0x01EFBABC STUR V2, [X8 + 0x1C]
	0x01EFBAC0 STUR V1, [X8 + 0xC]
	0x01EFBAC4 LDR X8, [X9 + 0x28]
	0x01EFBAC8 LDR X9, [X31 + 0x38]
	0x01EFBACC CMP X8, X9
	0x01EFBAD0 B.NE 0x1EFBAE0

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {24}
	003 Move [X31-32], X30
	004 Move [X31+16], X20
	005 Move [X31+24], X19
	006 Move X19, X0
	007 Move X0, [X0+24]
	008 Compare X0, 0
	009 JumpIfEqual {17}
	010 Move X20, [X0+48]
	011 Move X1, X31
	012 Move [X0+40], X31
	013 Call Native.Free, X0
	014 Move X0, X20
	015 Compare X20, 0
	016 JumpIfNotEqual {10}
	017 Move X0, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X1, X31
	021 Move X30, [X31+32]
	022 Call Native.Free, X0
	023 Return 
	024 Return 

Method: Fusion.Sockets.NetBitBufferBlock* Create(System.Int32 packetSize)

Disassembly:
	0x01EFBAD4 LDR X30, [X31 + 0x40]
	0x01EFBAD8 ADD X31, X31, 0x50
	0x01EFBADC RET
	0x01EFBAE0 BL 0x3EB1B20
	0x01EFBAE4 LDR W8, [X0 + 0x10]
	0x01EFBAE8 UBFM W0, W8, 0x1C, 0x1B
	0x01EFBAEC RET
	0x01EFBAF0 LDR W8, [X0]
	0x01EFBAF4 UBFM W0, W8, 0x1D, 0x1C
	0x01EFBAF8 RET
	0x01EFBAFC SUB X31, X31, 0xB0
	0x01EFBB00 STR X30, [X31 + 0x80]
	0x01EFBB04 STP X22, X21, [X31 + 0x90]
	0x01EFBB08 STP X20, X19, [X31 + 0xA0]
	0x01EFBB0C MRS X22, 0xC000
	0x01EFBB10 LDR X9, [X22 + 0x28]
	0x01EFBB14 ADRP X20, 0x24DE000
	0x01EFBB18 MOV X21, X0
	0x01EFBB1C MOV X19, X8
	0x01EFBB20 STR X9, [X31 + 0x78]
	0x01EFBB24 LDRB W9, [X20 + 0x630]
	0x01EFBB28 TBNZ X9, 0x0, 0x1EFBB40

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x24DF000
	006 Move X21, 0x2206000
	007 Move W8, [X20+1574]
	008 Move X21, [X21+2552]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2206000
	015 Move X0, [X0+2552]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1574], W8
	019 Move X0, [X21]
	020 Call Native.MallocAndClear
	021 Compare X0, 0
	022 JumpIfEqual {31}
	023 Move [X0], W19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move [X0+8], X31
	027 Move [X0+16], X0
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0
	031 Call 0x1C17F20

Method: System.Void Release(Fusion.Sockets.NetBitBuffer* ptr)

Disassembly:
	0x01EFA9B0 MOV X2, X31
	0x01EFA9B4 MOV X20, X0
	0x01EFA9B8 BL 0x337DF1C
	0x01EFA9BC ADRP X0, 0x2206000
	0x01EFA9C0 LDR X0, [X0 + 0x228]
	0x01EFA9C4 BL 0x1C16D08
	0x01EFA9C8 MOV X1, X0
	0x01EFA9CC MOV X0, X20
	0x01EFA9D0 BL 0x1C16DEC
	0x01EFA9D4 SUB X31, X31, 0x40
	0x01EFA9D8 STP X30, X23, [X31 + 0x10]
	0x01EFA9DC STP X22, X21, [X31 + 0x20]
	0x01EFA9E0 STP X20, X19, [X31 + 0x30]
	0x01EFA9E4 ADRP X23, 0x24DF000
	0x01EFA9E8 ADRP X22, 0x21F9000
	0x01EFA9EC ADRP X21, 0x2206000
	0x01EFA9F0 LDRB W8, [X23 + 0x625]
	0x01EFA9F4 LDR X22, [X22 + 0x758]
	0x01EFA9F8 LDR X21, [X21 + 0x9F0]
	0x01EFA9FC MOV X19, X1
	0x01EFAA00 MOV X20, X0
	0x01EFAA04 TBNZ X8, 0x0, 0x1EFAA28
	0x01EFAA08 ADRP X0, 0x21F9000
	0x01EFAA0C LDR X0, [X0 + 0x758]
	0x01EFAA10 BL 0x1C16CF4
	0x01EFAA14 ADRP X0, 0x2206000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X1
	006 Add X20, X0, 8
	007 Move X21, [X20]
	008 Move X1, X31
	009 Move X0, X21
	010 Call IntPtr.op_Explicit, X0
	011 Compare X19, 0
	012 JumpIfEqual {34}
	013 Move [X19+32], X0
	014 Move X0, X19
	015 Move X1, X31
	016 Call IntPtr.op_Explicit, X0
	017 Move X1, X0
	018 Move X0, X20
	019 Move X2, X21
	020 Move X3, X31
	021 Call Interlocked.CompareExchange, X0, X1, X2
	022 Move X1, X21
	023 Move X2, X31
	024 Call IntPtr.op_Inequality, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {7}
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return 
	034 Call 0x1C17F20

Method: Fusion.Sockets.NetBitBuffer* TryAcquire()

Disassembly:
	0x01EFBB2C ADRP X0, 0x2205000
	0x01EFBB30 LDR X0, [X0 + 0xA10]
	0x01EFBB34 BL 0x1C16CF4
	0x01EFBB38 MOVZ W8, 0x1
	0x01EFBB3C STRB W8, [X20 + 0x630]
	0x01EFBB40 MOVI V0.2D, 0x0
	0x01EFBB44 STP V0, V0, [X31 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Add X1, X31, 8
	003 Move [X31+8], X31
	004 Call NetBitBufferBlock.TryAcquire, X0, X1
	005 Move X0, [X31+8]
	006 Move X30, [X31+16]
	007 Return X0

Method: System.Boolean TryAcquire(out Fusion.Sockets.NetBitBuffer* ptr)

Disassembly:
	0x01EFBB48 STR V0, [X31 + 0x6]
	0x01EFBB4C STP V0, V0, [X31]
	0x01EFBB50 STR V0, [X31 + 0x2]
	0x01EFBB54 STR X31, [X31 + 0x30]
	0x01EFBB58 CBZ X21, 0x1EFBC10
	0x01EFBB5C LDR X20, [X21 + 0x18]
	0x01EFBB60 CBZ X20, 0x1EFBBB8
	0x01EFBB64 ADRP X8, 0x2205000
	0x01EFBB68 LDR X8, [X8 + 0xA10]
	0x01EFBB6C MOV W0, W20
	0x01EFBB70 LDR X1, [X8]
	0x01EFBB74 BL 0x222205C
	0x01EFBB78 LDR X9, [X21 + 0x18]
	0x01EFBB7C CMP W9, 0x1
	0x01EFBB80 B.LT 0x1EFBBBC
	0x01EFBB84 AND X9, X9, 0x0
	0x01EFBB88 MOV X8, X31
	0x01EFBB8C SXTW X10, W9
	0x01EFBB90 ADD X11, X21, 0x20
	0x01EFBB94 MOV X12, X0
	0x01EFBB98 CMP X8, X9
	0x01EFBB9C B.CS 0x1EFBC0C
	0x01EFBBA0 LDRH W13, [X11, X8, LSL #1]
	0x01EFBBA4 ADD X8, X8, 0x1
	0x01EFBBA8 CMP X8, X10
	0x01EFBBAC STRH W13, [X12], #0x2
	0x01EFBBB0 B.LT 0x1EFBB98
	0x01EFBBB4 B 0x1EFBBBC
	0x01EFBBB8 MOV X0, X31
	0x01EFBBBC LDP V0, V1, [X31 + 0x40]
	0x01EFBBC0 LDP V2, V3, [X31]
	0x01EFBBC4 LDR V4, [X31 + 0x2]
	0x01EFBBC8 LDR X8, [X31 + 0x30]
	0x01EFBBCC STP V0, V1, [X19 + 0x10]
	0x01EFBBD0 LDR V0, [X31 + 0x6]
	0x01EFBBD4 STR X0, [X19]
	0x01EFBBD8 STP W20, W31, [X19 + 0x8]
	0x01EFBBDC STR X8, [X19 + 0x70]
	0x01EFBBE0 STP V3, V4, [X19 + 0x50]
	0x01EFBBE4 STP V0, V2, [X19 + 0x30]
	0x01EFBBE8 LDR X8, [X22 + 0x28]
	0x01EFBBEC LDR X9, [X31 + 0x78]
	0x01EFBBF0 CMP X8, X9
	0x01EFBBF4 B.NE 0x1EFBC14
	0x01EFBBF8 LDP X20, X19, [X31 + 0xA0]
	0x01EFBBFC LDP X22, X21, [X31 + 0x90]
	0x01EFBC00 LDR X30, [X31 + 0x80]
	0x01EFBC04 ADD X31, X31, 0xB0
	0x01EFBC08 RET
	0x01EFBC0C BL 0x1C16F28
	0x01EFBC10 BL 0x1C16F20
	0x01EFBC14 BL 0x3EB1B20
	0x01EFBC18 STR D10, [X31 - 0x40]!
	0x01EFBC1C STP D9, D8, [X31 + 0x10]
	0x01EFBC20 STP X30, X21, [X31 + 0x20]
	0x01EFBC24 STP X20, X19, [X31 + 0x30]
	0x01EFBC28 ADRP X21, 0x24DE000
	0x01EFBC2C LDRB W8, [X21 + 0x631]
	0x01EFBC30 MOV V8.16B, V0.16B
	0x01EFBC34 MOV X19, X1
	0x01EFBC38 MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, X1
	007 Move X19, X0
	008 Add X22, X0, 8
	009 Move X21, [X22]
	010 Call 0x1C17D44
	011 Move X0, X21
	012 Move X1, X31
	013 Move X2, X31
	014 Call IntPtr.op_Equality, X0, X1
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {39}
	019 Move X0, X21
	020 Move X1, X31
	021 Call IntPtr.op_Explicit, X0
	022 Compare X0, 0
	023 JumpIfEqual {75}
	024 Move X0, [X0+32]
	025 Move X1, X31
	026 Call IntPtr.op_Explicit, X0
	027 Move X1, X0
	028 Move X0, X22
	029 Move X2, X21
	030 Move X3, X31
	031 Call Interlocked.CompareExchange, X0, X1, X2
	032 Move X1, X21
	033 Move X2, X31
	034 Call IntPtr.op_Inequality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {9}
	039 Move W1, [X19]
	040 Move W0, W31
	041 Call NetBitBuffer.Allocate, X0, X1
	042 Compare X0, 0
	043 JumpIfEqual {75}
	044 Move X8, [X19+16]
	045 Move X21, X0
	046 Move [X0+40], X8
	047 Move X8, [X19+24]
	048 Move [X0+48], X8
	049 Move [X19+24], X0
	050 Move X0, X21
	051 Move X1, X31
	052 Call IntPtr.op_Explicit, X0
	053 Move [X20], X0
	054 Move W1, [X19]
	055 Move X8, [X0+64]
	056 Move X2, X31
	057 Move W9, W1
	058 ShiftRight W9, 29
	059 And W9, W9, 0xFFFFFFF
	060 Move [X0+84], W9
	061 Move [X0+88], W1
	062 Move X0, X8
	063 Call Native.MemClear, X0, X1
	064 Move X8, [X20]
	065 Move X22, [X31+16]
	066 Move X21, [X31+24]
	067 Move W0, 1
	068 Move [X8+80], W31
	069 Move X9, [X19+16]
	070 Move X20, [X31+32]
	071 Move X19, [X31+40]
	072 Move [X8+40], X9
	073 Move X30, [X31+48]
	074 Return X0
	075 Call 0x1C17F20

