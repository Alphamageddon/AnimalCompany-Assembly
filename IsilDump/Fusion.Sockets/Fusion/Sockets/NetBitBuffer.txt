Type: Fusion.Sockets.NetBitBuffer

Method: System.Int16 get_Group()

Disassembly:
	0x01EFA664 B.NE 0x1EFA644
	0x01EFA668 LDP W8, W9, [X19 + 0x50]
	0x01EFA66C CMP W8, W9

ISIL:
	001 NotImplemented "Instruction LDRH not yet implemented."
	002 Subtract W0, W8, 1
	003 Return X0

Method: System.Void set_Group(System.Int16 value)

Disassembly:
	0x01EFA670 B.GE 0x1EFA684
	0x01EFA674 MUL W1, W21, W20
	0x01EFA678 MOV X0, X19
	0x01EFA67C BL 0x1EF9B00

ISIL:
	001 NotImplemented "Instruction SXTH not yet implemented."
	002 Add W8, W8, 1
	003 Move [X0+56], W8
	004 Return 

Method: System.UInt64* get_Data()

Disassembly:
	0x01EFA680 B 0x1EFA688
	0x01EFA684 MOV W0, W31

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.Void set_Data(System.UInt64* value)

Disassembly:
	0x01EFA688 LDP X20, X19, [X31 + 0x20]
	0x01EFA68C LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X0+64], X1
	002 Return 

Method: System.Int32 get_LengthBits()

Disassembly:
	0x01EFA690 LDR X30, [X31], #0x30
	0x01EFA694 RET

ISIL:
	001 Move W0, [X0+84]
	002 Return X0

Method: System.Int32 get_BytesRemaining()

Disassembly:
	0x01EFA698 STR X30, [X31 - 0x10]!
	0x01EFA69C BL 0x1EF9B00
	0x01EFA6A0 LDR X30, [X31], #0x10
	0x01EFA6A4 RET
	0x01EFA6A8 B 0x1EF9A4C
	0x01EFA6AC B 0x1EF9B00
	0x01EFA6B0 B 0x1EF9A4C
	0x01EFA6B4 B 0x1EF9B00
	0x01EFA6B8 MOVZ W2, 0x20
	0x01EFA6BC FMOV W1, S0
	0x01EFA6C0 B 0x1EF9A4C
	0x01EFA6C4 STR X30, [X31 - 0x10]!
	0x01EFA6C8 MOVZ W1, 0x20
	0x01EFA6CC BL 0x1EF9B00
	0x01EFA6D0 FMOV S0, W0
	0x01EFA6D4 LDR X30, [X31], #0x10
	0x01EFA6D8 RET
	0x01EFA6DC MOVZ W2, 0x40
	0x01EFA6E0 FMOV X1, D0
	0x01EFA6E4 B 0x1EF9A4C
	0x01EFA6E8 STR X30, [X31 - 0x10]!
	0x01EFA6EC MOVZ W1, 0x40
	0x01EFA6F0 BL 0x1EF9B00
	0x01EFA6F4 FMOV D0, X0
	0x01EFA6F8 LDR X30, [X31], #0x10
	0x01EFA6FC RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x24E0000
	006 Move X20, 0x2201000
	007 Move W8, [X21+1566]
	008 Move X20, [X20+3176]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2201000
	015 Move X0, [X0+3176]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1566], W8
	019 Move X0, [X20]
	020 Move W20, [X19+88]
	021 Move W19, [X19+80]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move W0, W19
	027 Move X1, X31
	028 Call Maths.BytesRequiredForBits, X0
	029 Subtract W0, W20, W0
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return X0

Method: System.Int32 get_LengthBytes()

Disassembly:
	0x01EFA700 STR X30, [X31 - 0x20]!
	0x01EFA704 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move W0, [X0+88]
	002 Return X0

Method: System.Void set_LengthBytes(System.Int32 value)

Disassembly:
	0x01EFA708 LDR W20, [X0 + 0x50]
	0x01EFA70C MOV X19, X0
	0x01EFA710 MOV W1, W1

ISIL:
	001 Move W8, W1
	002 ShiftRight W8, 29
	003 And W8, W8, 0xFFFFFFF
	004 Move [X0+84], W8
	005 Move [X0+88], W1
	006 Return 

Method: System.Int32 get_OffsetBits()

Disassembly:
	0x01EFA714 STR W2, [X0 + 0x50]
	0x01EFA718 MOV W2, W3

ISIL:
	001 Move W0, [X0+80]
	002 Return X0

Method: System.Void set_OffsetBits(System.Int32 value)

Disassembly:
	0x01EFA71C BL 0x1EFA784
	0x01EFA720 STR W20, [X19 + 0x50]

ISIL:
	001 Move [X0+80], W1
	002 Return 

Method: System.Boolean get_Done()

Disassembly:
	0x01EFA724 LDP X20, X19, [X31 + 0x10]
	0x01EFA728 LDR X30, [X31], #0x20
	0x01EFA72C RET
	0x01EFA730 CMP W1, 0x1

ISIL:
	001 Move W8, [X0+80]
	002 Move W9, [X0+84]
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Return X0

Method: System.Boolean get_Overflow()

Disassembly:
	0x01EFA734 STR W20, [X31 + 0xC]
	0x01EFA738 B.NE 0x1EFA75C
	0x01EFA73C BL 0x3EB1AD0
	0x01EFA740 LDR X20, [X0]

ISIL:
	001 Move W8, [X0+80]
	002 Move W9, [X0+84]
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Return X0

Method: System.Boolean get_OverflowOrLessThanOneByteRemaining()

Disassembly:
	0x01EFA744 BL 0x3EB1AE0
	0x01EFA748 LDR W8, [X31 + 0xC]
	0x01EFA74C STR W8, [X19 + 0x50]
	0x01EFA750 CBZ X20, 0x1EFA724
	0x01EFA754 MOV X0, X20

ISIL:
	001 Move W8, [X0+80]
	002 Move W9, [X0+84]
	003 Add W8, W8, 8
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CSET not yet implemented."
	006 Return X0

Method: System.Int32 get_OffsetBitsUnsafe()

Disassembly:
	0x01EFA758 BL 0x1C16F18
	0x01EFA75C LDR W8, [X31 + 0xC]

ISIL:
	001 Move W0, [X0+80]
	002 Return X0

Method: System.Void set_OffsetBitsUnsafe(System.Int32 value)

Disassembly:
	0x01EFA760 STR W8, [X19 + 0x50]
	0x01EFA764 B 0x1EFA774

ISIL:
	001 Move [X0+80], W1
	002 Return 

Method: System.Boolean get_DoneOrOverflow()

Disassembly:
	0x01EFA768 LDR W8, [X31 + 0xC]
	0x01EFA76C STR W8, [X19 + 0x50]
	0x01EFA770 CBNZ X20, 0x1EFA778
	0x01EFA774 BL 0x1D2C690

ISIL:
	001 Move W8, [X0+80]
	002 Move W9, [X0+84]
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Return X0

Method: System.Boolean get_MoreToRead()

Disassembly:
	0x01EFA778 MOV X0, X20
	0x01EFA77C BL 0x1C16F18
	0x01EFA780 BL 0x1990590
	0x01EFA784 CMP W2, 0x1

ISIL:
	001 Move W8, [X0+80]
	002 Move W9, [X0+84]
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Return X0

Method: Fusion.Sockets.NetPacketType get_PacketType()

Disassembly:
	0x01EFA788 B.LT 0x1EFA84C
	0x01EFA78C STR X30, [X31 - 0x30]!
	0x01EFA790 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move X8, [X0+64]
	002 Move W0, [X8]
	003 Return X0

Method: System.Void set_PacketType(Fusion.Sockets.NetPacketType value)

Disassembly:
	0x01EFA794 STP X20, X19, [X31 + 0x20]
	0x01EFA798 SUB W8, W31, W2
	0x01EFA79C MOVN X22, 0x0

ISIL:
	001 Move X8, [X0+64]
	002 Move [X8], W1
	003 Return 

Method: System.Void ReplaceDataFromBlockWithTemp(System.Int32 tempSize)

Disassembly:
	0x01EFA7A0 LSRV X8, X22, X8
	0x01EFA7A4 MOV W19, W2
	0x01EFA7A8 AND X21, X8, X1, 0x0
	0x01EFA7AC MOV W1, W2
	0x01EFA7B0 MOV W2, W31
	0x01EFA7B4 MOV X3, X31
	0x01EFA7B8 MOV X20, X0
	0x01EFA7BC BL 0x1EDCC4C
	0x01EFA7C0 LDR X10, [X20 + 0x40]
	0x01EFA7C4 AND W8, W0, 0x3F
	0x01EFA7C8 MOVZ W9, 0x40
	0x01EFA7CC SUB W11, W9, W8
	0x01EFA7D0 SUBS W13, W11, W19
	0x01EFA7D4 SBFM W12, W0, 0x6, 0x1F
	0x01EFA7D8 B.MI 0x1EFA804
	0x01EFA7DC ADD X9, X10, W12, 0x3, SXTW
	0x01EFA7E0 LDR X10, [X9]
	0x01EFA7E4 SUB W12, W31, W13
	0x01EFA7E8 LSRV X11, X22, X11
	0x01EFA7EC LSLV X12, X22, X12
	0x01EFA7F0 ORR X11, X12, X11, 0x0
	0x01EFA7F4 AND X10, X10, X11, 0x0
	0x01EFA7F8 LSLV X8, X21, X8
	0x01EFA7FC ORR X8, X10, X8, 0x0
	0x01EFA800 B 0x1EFA83C
	0x01EFA804 LDR X13, [X10, W12, SXTW]
	0x01EFA808 LSRV X14, X22, X11
	0x01EFA80C LSLV X8, X21, X8
	0x01EFA810 ADD W9, W12, 0x1
	0x01EFA814 AND X13, X13, X14, 0x0
	0x01EFA818 ORR X8, X13, X8, 0x0
	0x01EFA81C ADD X9, X10, W9, 0x3, SXTW
	0x01EFA820 STR X8, [X10, W12, SXTW]
	0x01EFA824 LDR X8, [X9]
	0x01EFA828 SUB W10, W19, W11
	0x01EFA82C LSLV X10, X22, X10
	0x01EFA830 AND X8, X8, X10, 0x0
	0x01EFA834 LSRV X10, X21, X11
	0x01EFA838 ORR X8, X8, X10, 0x0
	0x01EFA83C LDP X20, X19, [X31 + 0x20]
	0x01EFA840 LDP X22, X21, [X31 + 0x10]
	0x01EFA844 STR X8, [X9]
	0x01EFA848 LDR X30, [X31], #0x30
	0x01EFA84C RET
	0x01EFA850 STR X30, [X31 - 0x20]!
	0x01EFA854 STP X20, X19, [X31 + 0x10]
	0x01EFA858 LDR W20, [X0 + 0x50]
	0x01EFA85C MOV X19, X0
	0x01EFA860 STR W2, [X0 + 0x50]
	0x01EFA864 MOV W2, W3
	0x01EFA868 BL 0x1EFA784
	0x01EFA86C STR W20, [X19 + 0x50]
	0x01EFA870 LDP X20, X19, [X31 + 0x10]
	0x01EFA874 LDR X30, [X31], #0x20
	0x01EFA878 RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x24E0000
	007 Move X22, 0x2207000
	008 Move W8, [X21+1567]
	009 Move X22, [X22+2512]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2207000
	017 Move X0, [X0+2512]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1567], W8
	021 Move X0, [X22]
	022 Move X1, X31
	023 Call EngineProfiler.Begin, X0
	024 Move W1, 8
	025 Move W0, W20
	026 Move X2, X31
	027 Call Native.RoundToAlignment, X0, X1
	028 Move X8, [X19+72]
	029 Move W20, W0
	030 Compare X8, 0
	031 JumpIfEqual {44}
	032 Move X21, [X19+64]
	033 Add W0, W20, 1024
	034 Move X1, X31
	035 Call Native.MallocAndClear, X0
	036 Move W2, [X19+88]
	037 Move X1, X21
	038 Move X3, X31
	039 Move [X19+64], X0
	040 Call Native.MemCpy, X0, X1, X2
	041 Move X0, X21
	042 Move X1, X31
	043 Call Native.Free, X0
	044 Move X8, [X19+64]
	045 Add W0, W20, 1024
	046 Move X1, X31
	047 Move [X19+72], X8
	048 Call Native.MallocAndClear, X0
	049 Move X1, [X19+72]
	050 Move W2, [X19+88]
	051 Move X3, X31
	052 Move [X19+64], X0
	053 Call Native.MemCpy, X0, X1, X2
	054 Move W8, W20
	055 ShiftRight W8, 29
	056 And W8, W8, 0xFFFFFFF
	057 Move [X19+84], W8
	058 Move [X19+88], W20
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X22, [X31+16]
	062 Move X21, [X31+24]
	063 Move X0, X31
	064 Move X30, [X31+48]
	065 Call EngineProfiler.End
	066 Return 

Method: Fusion.Sockets.NetBitBuffer/Offset GetOffset(Fusion.Sockets.NetBitBuffer* buffer)

Disassembly:
	0x01EFA87C CMP W1, 0x1
	0x01EFA880 STR W20, [X31 + 0xC]

ISIL:
	001 Move W0, [X0+80]
	002 Return X0

Method: Fusion.Sockets.NetBitBuffer* Allocate(System.Int32 group, System.Int32 size)

Disassembly:
	0x01EFA890 BL 0x3EB1AE0
	0x01EFA894 LDR W8, [X31 + 0xC]
	0x01EFA898 STR W8, [X19 + 0x50]
	0x01EFA89C CBZ X20, 0x1EFA870
	0x01EFA8A0 MOV X0, X20
	0x01EFA8A4 BL 0x1C16F18
	0x01EFA8A8 LDR W8, [X31 + 0xC]
	0x01EFA8AC STR W8, [X19 + 0x50]
	0x01EFA8B0 B 0x1EFA8C0
	0x01EFA8B4 LDR W8, [X31 + 0xC]
	0x01EFA8B8 STR W8, [X19 + 0x50]
	0x01EFA8BC CBNZ X20, 0x1EFA8C4
	0x01EFA8C0 BL 0x1D2C690
	0x01EFA8C4 MOV X0, X20
	0x01EFA8C8 BL 0x1C16F18
	0x01EFA8CC BL 0x1990590
	0x01EFA8D0 SUB X31, X31, 0x40
	0x01EFA8D4 STR X30, [X31 + 0x10]
	0x01EFA8D8 STP X22, X21, [X31 + 0x20]
	0x01EFA8DC STP X20, X19, [X31 + 0x30]
	0x01EFA8E0 LDP W19, W8, [X0 + 0x50]
	0x01EFA8E4 ADD W9, W19, W1
	0x01EFA8E8 CMP W9, W8
	0x01EFA8EC STR W9, [X0 + 0x50]
	0x01EFA8F0 B.LE 0x1EFA904
	0x01EFA8F4 TBZ X2, 0x0, 0x1EFA91C
	0x01EFA8F8 LDR W8, [X0 + 0x58]
	0x01EFA8FC UBFM W1, W8, 0x1F, 0x1E
	0x01EFA900 BL 0x1EF97A0
	0x01EFA904 MOV W0, W19
	0x01EFA908 LDP X20, X19, [X31 + 0x30]
	0x01EFA90C LDP X22, X21, [X31 + 0x20]
	0x01EFA910 LDR X30, [X31 + 0x10]
	0x01EFA914 ADD X31, X31, 0x40
	0x01EFA918 RET
	0x01EFA91C STR W19, [X31 + 0x1C]
	0x01EFA920 ADRP X19, 0x21F9000
	0x01EFA924 LDR X19, [X19 + 0x758]
	0x01EFA928 MOV X22, X0
	0x01EFA92C MOV W21, W1
	0x01EFA930 MOV X0, X19
	0x01EFA934 BL 0x1C16D08
	0x01EFA938 ADD X1, X31, 0x1C
	0x01EFA93C BL 0x1C16E04

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X31
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move [X31+8], X31
	008 Move W8, W1
	009 Move W19, W0
	010 Move W1, 8
	011 Move W0, W8
	012 Move X2, X31
	013 Call Native.RoundToAlignment, X0, X1
	014 Move W20, W0
	015 Add X2, X31, 24
	016 Add X3, X31, 8
	017 Move W0, 96
	018 Move W4, 8
	019 Move W1, W20
	020 Move X5, X31
	021 Call Native.MallocAndClearBlock, X0, X1, X2, X3, X4
	022 Move X0, [X31+24]
	023 Compare X0, 0
	024 JumpIfEqual {51}
	025 Move [X0+56], W19
	026 Move X8, [X31+8]
	027 Move X30, [X31+16]
	028 Move W9, W20
	029 ShiftRight W9, 29
	030 And W9, W9, 0xFFFFFFF
	031 Move [X0+84], W9
	032 Move [X0+88], W20
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move [X0+64], X8
	036 Add X31, X31, 48
	037 Return X0
	038 Move X0, 0x21FA000
	039 Move X0, [X0+1456]
	040 Call 0x1C17D08
	041 Call 0x1C17F10
	042 Move X1, X31
	043 Move X19, X0
	044 Call InvalidOperationException..ctor, X0
	045 Move X0, 0x2207000
	046 Move X0, [X0+2520]
	047 Call 0x1C17D08
	048 Move X1, X0
	049 Move X0, X19
	050 Call 0x1C17DEC
	051 Call 0x1C17F20

Method: System.Void ReleaseRef(ref Fusion.Sockets.NetBitBuffer* buffer)

Disassembly:
	0x01EFA950 ADD X1, X31, 0x18
	0x01EFA954 BL 0x1C16E04
	0x01EFA958 LDR W8, [X22 + 0x54]
	0x01EFA95C MOV X21, X0
	0x01EFA960 MOV X0, X19
	0x01EFA964 STR W8, [X31 + 0xC]

ISIL:
	001 Move X8, X0
	002 Move X0, [X0]
	003 Compare X0, 0
	004 JumpIfEqual {6}
	005 Move [X8], X31
	006 Return 

Method: System.Void Release(Fusion.Sockets.NetBitBuffer* buffer)

Disassembly:
	0x01EFA968 BL 0x1C16D08
	0x01EFA96C ADD X1, X31, 0xC
	0x01EFA970 BL 0x1C16E04
	0x01EFA974 MOV X19, X0
	0x01EFA978 ADRP X0, 0x2206000
	0x01EFA97C LDR X0, [X0 + 0x220]
	0x01EFA980 BL 0x1C16D08
	0x01EFA984 MOV X1, X20
	0x01EFA988 MOV X2, X21
	0x01EFA98C MOV X3, X19
	0x01EFA990 MOV X4, X31
	0x01EFA994 BL 0x3227C18
	0x01EFA998 MOV X19, X0
	0x01EFA99C ADRP X0, 0x21F9000
	0x01EFA9A0 LDR X0, [X0 + 0x5B0]
	0x01EFA9A4 BL 0x1C16D08
	0x01EFA9A8 BL 0x1C16F10
	0x01EFA9AC MOV X1, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X0, 0
	004 JumpIfEqual {24}
	005 Move X8, [X0+72]
	006 Move X19, X0
	007 Compare X8, 0
	008 JumpIfEqual {15}
	009 Move X0, [X19+64]
	010 Move X1, X31
	011 Call Native.Free, X0
	012 Move X8, [X19+72]
	013 Move [X19+64], X8
	014 Move [X19+72], X31
	015 Move X0, [X19+40]
	016 Compare X0, 0
	017 JumpIfEqual {21}
	018 Move X1, X19
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Return 
	024 Call 0x1C17F20

Method: System.Void SetBufferLengthBytes(System.UInt64* buffer, System.Int32 lenghtInBytes)

Disassembly:
	0x01EFA940 MOV X20, X0
	0x01EFA944 MOV X0, X19
	0x01EFA948 STR W21, [X31 + 0x18]
	0x01EFA94C BL 0x1C16D08

ISIL:
	001 Move W8, W2
	002 ShiftRight W8, 29
	003 And W8, W8, 0xFFFFFFF
	004 Move [X0+64], X1
	005 Move [X0+84], W8
	006 Move [X0+88], W2
	007 Return 

Method: System.Void Clear()

Disassembly:
	0x01EFAA18 LDR X0, [X0 + 0x9F0]
	0x01EFAA1C BL 0x1C16CF4
	0x01EFAA20 MOVZ W8, 0x1
	0x01EFAA24 STRB W8, [X23 + 0x625]
	0x01EFAA28 LDR W8, [X20 + 0x50]

ISIL:
	001 Move X8, [X0+64]
	002 Move W1, [X0+88]
	003 Move X2, X31
	004 Move X0, X8
	005 Call Native.MemClear, X0, X1
	006 Return 

Method: System.Boolean WriteBoolean(System.Boolean value)

Disassembly:
	0x01EFAA2C LDR X0, [X22]
	0x01EFAA30 ADD X1, X31, 0xC
	0x01EFAA34 STR W8, [X31 + 0xC]
	0x01EFAA38 BL 0x1C16E04
	0x01EFAA3C LDR X8, [X21]
	0x01EFAA40 MOV X1, X0
	0x01EFAA44 MOV X2, X31
	0x01EFAA48 MOV X0, X8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, W1
	004 And X1, X19, 1
	005 Move W2, 1
	006 Call NetBitBuffer.Write, X0, X1, X2
	007 And W0, W19, 1
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return X0

Method: System.Boolean ReadBoolean()

Disassembly:
	0x01EFAAE4 LDRB W8, [X20 + 0x626]
	0x01EFAAE8 LDR X21, [X21 + 0x9F8]
	0x01EFAAEC MOV W19, W0
	0x01EFAAF0 TBNZ X8, 0x0, 0x1EFAB08
	0x01EFAAF4 ADRP X0, 0x2206000
	0x01EFAAF8 LDR X0, [X0 + 0x9F8]
	0x01EFAAFC BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move W1, 1
	003 Call NetBitBuffer.Read, X0, X1
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CSET not yet implemented."
	006 Move X30, [X31+16]
	007 Return X0

Method: System.Boolean PeekBoolean()

Disassembly:
	0x01EFAB94 BL 0x33C693C
	0x01EFAB98 MOV X1, X0
	0x01EFAB9C MOV X0, X22
	0x01EFABA0 MOV X2, X21
	0x01EFABA4 MOV X3, X31
	0x01EFABA8 BL 0x33EB184
	0x01EFABAC MOV X1, X21

ISIL:
	001 Move [X31-16], X30
	002 Move W1, 1
	003 Call NetBitBuffer.Peek, X0, X1
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CSET not yet implemented."
	006 Move X30, [X31+16]
	007 Return X0

Method: System.Void WriteByte(System.Byte value, System.Int32 bits = 8)

Disassembly:
	0x01EFAD08 LDR X10, [X0 + 0x10]
	0x01EFAD0C CMP X10, X1

ISIL:
	001 And X1, X1, 255
	002 Call NetBitBuffer.Write, X0, X1, X2
	003 Return 

Method: System.Byte ReadByte(System.Int32 bits = 8)

Disassembly:
	0x01EFAD10 B.NE 0x1EFAD1C
	0x01EFAD14 LDR X10, [X8]
	0x01EFAD18 STR X10, [X0 + 0x10]
	0x01EFAD1C LDR X10, [X0 + 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Call NetBitBuffer.Read, X0, X1
	003 Move X30, [X31+16]
	004 Return X0

Method: System.Void WriteInt16(System.Int16 value, System.Int32 bits = 16)

Disassembly:
	0x01EFAD20 CMP X10, X1
	0x01EFAD24 B.NE 0x1EFAD2C

ISIL:
	001 NotImplemented "Instruction SXTH not yet implemented."
	002 Call NetBitBuffer.Write, X0, X1, X2
	003 Return 

Method: System.Int16 ReadInt16(System.Int32 bits = 16)

Disassembly:
	0x01EFAD28 STR X9, [X0 + 0x8]
	0x01EFAD2C STP X31, X31, [X8]
	0x01EFAD30 LDR W8, [X0]
	0x01EFAD34 SUB W8, W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Call NetBitBuffer.Read, X0, X1
	003 Move X30, [X31+16]
	004 Return X0

Method: System.Void WriteUInt16(System.UInt16 value, System.Int32 bits = 16)

Disassembly:
	0x01EFAD38 STR W8, [X0]
	0x01EFAD3C LDR X30, [X31], #0x10

ISIL:
	001 And X1, X1, 0xFFFF
	002 Call NetBitBuffer.Write, X0, X1, X2
	003 Return 

Method: System.UInt16 ReadUInt16(System.Int32 bits = 16)

Disassembly:
	0x01EFAD40 RET
	0x01EFAD44 BL 0x1C16F20
	0x01EFAD48 ADD X9, X0, 0x8
	0x01EFAD4C LDR X8, [X9]

ISIL:
	001 Move [X31-16], X30
	002 Call NetBitBuffer.Read, X0, X1
	003 Move X30, [X31+16]
	004 Return X0

Method: System.Void WriteInt32(System.Int32 value, System.Int32 bits = 32)

Disassembly:
	0x01EFAD50 CBZ X8, 0x1EFAD60
	0x01EFAD54 CMP X8, X1

ISIL:
	001 Move X1, W1
	002 Call NetBitBuffer.Write, X0, X1, X2
	003 Return 

Method: System.Int32 ReadInt32(System.Int32 bits = 32)

Disassembly:
	0x01EFAD58 ADD X9, X8, 0x20
	0x01EFAD5C B.NE 0x1EFAD4C
	0x01EFAD60 CMP X8, 0x0
	0x01EFAD64 CSET W0, NE

ISIL:
	001 Move [X31-16], X30
	002 Call NetBitBuffer.Read, X0, X1
	003 Move X30, [X31+16]
	004 Return X0

Method: System.Void WriteUInt32(System.UInt32 value, System.Int32 bits = 32)

Disassembly:
	0x01EFAD68 RET
	0x01EFAD6C LDR W0, [X0]

ISIL:
	001 Move W1, W1
	002 Call NetBitBuffer.Write, X0, X1, X2
	003 Return 

Method: System.Void WriteString(System.String value)

Disassembly:
	0x01EFAD70 RET
	0x01EFAD74 STR W1, [X0]
	0x01EFAD78 RET
	0x01EFAD7C LDR W8, [X0]
	0x01EFAD80 ANDS W31, W8, 0x7
	0x01EFAD84 B.EQ 0x1EFADA0
	0x01EFAD88 ADD W9, W8, 0x7
	0x01EFAD8C CMP W8, 0x0
	0x01EFAD90 CSEL W8, W9, W8, LT
	0x01EFAD94 AND W8, W8, 0xFFFFFFF8
	0x01EFAD98 ADD W8, W8, 0x8
	0x01EFAD9C STR W8, [X0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X0
	005 Move X0, X31
	006 Move X19, X1
	007 Call Encoding.get_UTF8
	008 Move X2, X0
	009 Move X0, X20
	010 Move X1, X19
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]

Method: System.Void WriteString(System.String value, System.Text.Encoding encoding)

Disassembly:
	0x01EFADA0 RET
	0x01EFADA4 LDR W8, [X0]
	0x01EFADA8 ADD W8, W8, W2
	0x01EFADAC STR W8, [X0]
	0x01EFADB0 RET
	0x01EFADB4 LDR W8, [X0]
	0x01EFADB8 ADD W8, W8, W2
	0x01EFADBC STR W8, [X0]
	0x01EFADC0 RET
	0x01EFADC4 MOV W8, W31
	0x01EFADC8 UBFM W1, W1, 0x7, 0x1F
	0x01EFADCC ADD W8, W8, 0x8
	0x01EFADD0 CBNZ W1, 0x1EFADC8
	0x01EFADD4 LDR W9, [X0]
	0x01EFADD8 ADD W8, W9, W8
	0x01EFADDC STR W8, [X0]
	0x01EFADE0 RET
	0x01EFADE4 MOV W8, W31
	0x01EFADE8 UBFM W1, W1, 0x7, 0x1F
	0x01EFADEC ADD W8, W8, 0x8
	0x01EFADF0 CBNZ W1, 0x1EFADE8
	0x01EFADF4 LDR W9, [X0]
	0x01EFADF8 ADD W8, W9, W8
	0x01EFADFC STR W8, [X0]
	0x01EFAE00 RET
	0x01EFAE04 B 0x1EFAE08
	0x01EFAE08 STP X30, X23, [X31 - 0x30]!
	0x01EFAE0C STP X22, X21, [X31 + 0x10]
	0x01EFAE10 STP X20, X19, [X31 + 0x20]
	0x01EFAE14 ADRP X23, 0x24DF000
	0x01EFAE18 ADRP X22, 0x2200000
	0x01EFAE1C LDRB W8, [X23 + 0x627]
	0x01EFAE20 LDR X22, [X22 + 0xC68]
	0x01EFAE24 MOV W21, W2
	0x01EFAE28 MOV W20, W1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X21, X2
	007 Move X20, X1
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move W2, 1
	010 Move X19, X0
	011 Call NetBitBuffer.Write, X0, X1, X2
	012 Compare X20, 0
	013 JumpIfEqual {40}
	014 Compare X21, 0
	015 JumpIfEqual {45}
	016 Move X8, [X21]
	017 Move X0, X21
	018 Move X1, X20
	019 Move X9, [X8+616]
	020 Move X2, [X8+624]
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Compare X0, 0
	023 JumpIfEqual {45}
	024 NotImplemented "Instruction LDRH not yet implemented."
	025 Move X20, X0
	026 Move W2, 16
	027 Move X0, X19
	028 Call NetBitBuffer.Write, X0, X1, X2
	029 Move W2, [X20+24]
	030 Add X8, X20, 32
	031 Move X0, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 NotImplemented "Instruction CSEL not yet implemented."
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Call NetBitBuffer.WriteBytesAligned, X0, X1, X2
	039 Return 
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Return 
	045 Call 0x1C17F20

Method: System.String ReadString()

Disassembly:
	0x01EFAE44 STRB W8, [X23 + 0x627]
	0x01EFAE48 LDR X0, [X22]
	0x01EFAE4C LDR W8, [X0 + 0xE0]
	0x01EFAE50 CBNZ W8, 0x1EFAE58
	0x01EFAE54 BL 0x1C16DFC
	0x01EFAE58 MOVZ W1, 0x2
	0x01EFAE5C MOVZ W2, 0x10
	0x01EFAE60 MOV W0, W21

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, X31
	005 Call Encoding.get_UTF8
	006 Move X1, X0
	007 Move X0, X19
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]

Method: System.String ReadString(System.Text.Encoding encoding)

Disassembly:
	0x01EFAE64 MOV X3, X31
	0x01EFAE68 BL 0x1E35134
	0x01EFAE6C ADRP X23, 0x24DE000
	0x01EFAE70 LDRB W8, [X23 + 0xF14]
	0x01EFAE74 MOV W21, W0
	0x01EFAE78 CBNZ W8, 0x1EFAE90
	0x01EFAE7C ADRP X0, 0x2200000
	0x01EFAE80 LDR X0, [X0 + 0xC68]
	0x01EFAE84 BL 0x1C16CF4
	0x01EFAE88 MOVZ W8, 0x1
	0x01EFAE8C STRB W8, [X23 + 0xF14]
	0x01EFAE90 LDR X0, [X22]
	0x01EFAE94 LDR W8, [X0 + 0xE0]
	0x01EFAE98 CBNZ W8, 0x1EFAEA4
	0x01EFAE9C BL 0x1C16DFC
	0x01EFAEA0 LDR X0, [X22]
	0x01EFAEA4 LDR X8, [X0 + 0xB8]
	0x01EFAEA8 LDR X8, [X8]
	0x01EFAEAC CBZ X8, 0x1EFAF10
	0x01EFAEB0 MOV W9, W20
	0x01EFAEB4 MOV W9, W9
	0x01EFAEB8 MOV W9, W9
	0x01EFAEBC LDR W10, [X8 + 0x18]
	0x01EFAEC0 MOV W9, W9
	0x01EFAEC4 MOVZ W11, 0xACDD
	0x01EFAEC8 MOV W9, W9
	0x01EFAECC MOVK W11, 0x7C40000
	0x01EFAED0 MUL W9, W9, W11
	0x01EFAED4 UBFM W9, W9, 0x1B, 0x1F
	0x01EFAED8 CMP W9, W10
	0x01EFAEDC B.CS 0x1EFAF14
	0x01EFAEE0 ADD X8, X8, W9, UXTW
	0x01EFAEE4 LDRB W8, [X8 + 0x20]
	0x01EFAEE8 LDR W9, [X19]
	0x01EFAEEC ADD W8, W21, W8
	0x01EFAEF0 SDIV W8, W8, W21
	0x01EFAEF4 MADD W8, W8, W21, W8
	0x01EFAEF8 ADD W8, W8, W9
	0x01EFAEFC STR W8, [X19]
	0x01EFAF00 LDP X20, X19, [X31 + 0x20]
	0x01EFAF04 LDP X22, X21, [X31 + 0x10]
	0x01EFAF08 LDP X30, X23, [X31], #0x30
	0x01EFAF0C RET
	0x01EFAF10 BL 0x1C16F20
	0x01EFAF14 BL 0x1C16F28
	0x01EFAF18 STP X30, X23, [X31 - 0x30]!
	0x01EFAF1C STP X22, X21, [X31 + 0x10]
	0x01EFAF20 STP X20, X19, [X31 + 0x20]
	0x01EFAF24 ADRP X23, 0x24DF000
	0x01EFAF28 ADRP X22, 0x2200000
	0x01EFAF2C LDRB W8, [X23 + 0x628]
	0x01EFAF30 LDR X22, [X22 + 0xC68]
	0x01EFAF34 MOV W21, W2

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x24E0000
	006 Move W8, [X21+1568]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x21FA000
	014 Move X0, [X0+2440]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1568], W8
	018 Move W1, 1
	019 Move X0, X20
	020 Call NetBitBuffer.Read, X0, X1
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X0, X31
	023 Move W1, 16
	024 Move X0, X20
	025 Call NetBitBuffer.Read, X0, X1
	026 Move W8, [X20+80]
	027 And W21, W0, 0xFFFF
	028 Add W8, W8, 7
	029 And W8, W8, 0xFFFFFFF8
	030 Move [X20+80], W8
	031 Move W1, W21
	032 ShiftRight W1, 29
	033 And W1, W1, 0xFFFFFFF
	034 Move X0, X20
	035 Move W2, W31
	036 Move X3, X31
	037 Call 0x1EDDC4C
	038 Compare X19, 0
	039 JumpIfEqual {63}
	040 Add W8, W0, 7
	041 Move X9, [X20+64]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 NotImplemented "Instruction CSEL not yet implemented."
	044 Move X0, X19
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 NotImplemented "Instruction SBFM not yet implemented."
	048 Add X1, X9, W8
	049 Move W2, W21
	050 Move X3, X31
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Call Encoding.GetString, X0, X1, X2
	054 Return X0
	055 Move X8, 0x21FA000
	056 Move X8, [X8+2440]
	057 Move X0, [X8]
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Return X0
	063 Call 0x1C17F20

Method: System.Boolean CanWrite(System.Int32 bits)

Disassembly:
	0x01EFAF4C BL 0x1C16CF4
	0x01EFAF50 MOVZ W8, 0x1
	0x01EFAF54 STRB W8, [X23 + 0x628]
	0x01EFAF58 LDR X0, [X22]
	0x01EFAF5C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move W8, [X0+80]
	002 Move W9, [X0+84]
	003 Add W8, W8, W1
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CSET not yet implemented."
	006 Return X0

Method: System.Boolean CanRead(System.Int32 bits)

Disassembly:
	0x01EFAF60 CBNZ W8, 0x1EFAF68
	0x01EFAF64 BL 0x1C16DFC
	0x01EFAF68 MOVZ W1, 0x2
	0x01EFAF6C MOVZ W2, 0x10
	0x01EFAF70 MOV W0, W21

ISIL:
	001 Move W8, [X0+80]
	002 Move W9, [X0+84]
	003 Add W8, W8, W1
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CSET not yet implemented."
	006 Return X0

Method: System.Boolean get_IsOnEvenByte()

Disassembly:
	0x01EFAF74 MOV X3, X31
	0x01EFAF78 BL 0x1E35134
	0x01EFAF7C ADRP X23, 0x24DE000
	0x01EFAF80 LDRB W8, [X23 + 0xF15]

ISIL:
	001 Move W8, [X0+80]
	002 And W31, W8, 7
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Int32 get_OffsetBytes()

Disassembly:
	0x01EFAF84 MOV W21, W0
	0x01EFAF88 CBNZ W8, 0x1EFAFAC
	0x01EFAF8C ADRP X0, 0x2201000
	0x01EFAF90 LDR X0, [X0 + 0x690]
	0x01EFAF94 BL 0x1C16CF4
	0x01EFAF98 ADRP X0, 0x2200000

ISIL:
	001 Move W8, [X0+80]
	002 Add W9, W8, 7
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 NotImplemented "Instruction SBFM not yet implemented."
	006 Return X0

Method: System.Void PadToByteBoundary()

Disassembly:
	0x01EFAF9C LDR X0, [X0 + 0xC68]
	0x01EFAFA0 BL 0x1C16CF4
	0x01EFAFA4 MOVZ W8, 0x1
	0x01EFAFA8 STRB W8, [X23 + 0xF15]
	0x01EFAFAC LDR X0, [X22]
	0x01EFAFB0 LDR W8, [X0 + 0xE0]
	0x01EFAFB4 CBNZ W8, 0x1EFAFC0
	0x01EFAFB8 BL 0x1C16DFC
	0x01EFAFBC LDR X0, [X22]
	0x01EFAFC0 LDR X8, [X0 + 0xB8]
	0x01EFAFC4 LDR X8, [X8 + 0x10]
	0x01EFAFC8 CBZ X8, 0x1EFB038

ISIL:
	001 Move W8, [X0+80]
	002 And W31, W8, 7
	003 Add W9, W8, 7
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CSEL not yet implemented."
	006 And W9, W9, 0xFFFFFFF8
	007 Subtract W8, W9, W8
	008 Add W2, W8, 8
	009 Move X1, X31
	010 Call NetBitBuffer.Write, X0, X1, X2
	011 Return 
	012 Return 

Method: System.Byte* GetDataPointer()

Disassembly:
	0x01EFAFCC MOV X9, X20
	0x01EFAFD0 MOV X9, X9
	0x01EFAFD4 MOV X9, X9
	0x01EFAFD8 MOVZ X11, 0x6F6B
	0x01EFAFDC MOV X9, X9
	0x01EFAFE0 MOVK X11, 0xE9960000
	0x01EFAFE4 LDR W10, [X8 + 0x18]
	0x01EFAFE8 MOV X9, X9

ISIL:
	001 Move W8, [X0+80]
	002 Move X9, [X0+64]
	003 Add W10, W8, 7
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CSEL not yet implemented."
	006 NotImplemented "Instruction SBFM not yet implemented."
	007 Add X0, X9, W8
	008 Return X0

Method: System.Byte* PadToByteBoundaryAndGetPtr()

Disassembly:
	0x01EFAFEC MOVK X11, 0xF118
	0x01EFAFF0 MOV X9, X9
	0x01EFAFF4 MOVK X11, 0x6C040000
	0x01EFAFF8 MUL X9, X9, X11
	0x01EFAFFC UBFM X9, X9, 0x39, 0x3F
	0x01EFB000 CMP W9, W10
	0x01EFB004 B.CS 0x1EFB03C
	0x01EFB008 ADD X8, X8, X9, 0x2, LSL
	0x01EFB00C LDR W8, [X8 + 0x20]
	0x01EFB010 LDR W9, [X19]
	0x01EFB014 ADD W8, W8, W21
	0x01EFB018 SDIV W8, W8, W21
	0x01EFB01C MADD W8, W8, W21, W8
	0x01EFB020 ADD W8, W8, W9
	0x01EFB024 STR W8, [X19]
	0x01EFB028 LDP X20, X19, [X31 + 0x20]
	0x01EFB02C LDP X22, X21, [X31 + 0x10]
	0x01EFB030 LDP X30, X23, [X31], #0x30
	0x01EFB034 RET
	0x01EFB038 BL 0x1C16F20
	0x01EFB03C BL 0x1C16F28
	0x01EFB040 LDR W8, [X0]
	0x01EFB044 ADD W9, W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+80]
	004 Move X19, X0
	005 And W31, W8, 7
	006 Add W9, W8, 7
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSEL not yet implemented."
	009 And W9, W9, 0xFFFFFFF8
	010 Subtract W8, W9, W8
	011 Add W2, W8, 8
	012 Move X0, X19
	013 Move X1, X31
	014 Call NetBitBuffer.Write, X0, X1, X2
	015 Move W8, [X19+80]
	016 Move X9, [X19+64]
	017 Add W10, W8, 7
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction CSEL not yet implemented."
	020 NotImplemented "Instruction SBFM not yet implemented."
	021 Add X0, X9, W8
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Return X0

Method: System.Boolean CheckBitCount(System.Int32 count)

Disassembly:
	0x01EFB048 AND W8, W1, 0x1
	0x01EFB04C STR W9, [X0]
	0x01EFB050 MOV W0, W8
	0x01EFB054 RET
	0x01EFB058 LDR W8, [X0]
	0x01EFB05C ANDS W31, W8, 0x7
	0x01EFB060 B.EQ 0x1EFB078
	0x01EFB064 ADD W9, W8, 0x7

ISIL:
	001 Move TEMP, X1
	002 And TEMP, TEMP, -2147483648
	003 Compare TEMP, -2147483648
	004 JumpIfEqual {11}
	005 Move W8, [X0+80]
	006 Move W9, [X0+84]
	007 Add W8, W8, W1
	008 NotImplemented "Instruction CMP not yet implemented."
	009 NotImplemented "Instruction CSET not yet implemented."
	010 Return X0
	011 Move W0, W31
	012 Return X0

Method: System.Void SeekToByteBoundary()

Disassembly:
	0x01EFAF38 MOV X20, X1
	0x01EFAF3C MOV X19, X0
	0x01EFAF40 TBNZ X8, 0x0, 0x1EFAF58
	0x01EFAF44 ADRP X0, 0x2200000
	0x01EFAF48 LDR X0, [X0 + 0xC68]

ISIL:
	001 Move W8, [X0+80]
	002 Add W8, W8, 7
	003 And W8, W8, 0xFFFFFFF8
	004 Move [X0+80], W8
	005 Return 

Method: System.Void WriteBytesAligned(System.Byte[] buffer, System.Int32 length)

Disassembly:
	0x01EFAE2C MOV X19, X0
	0x01EFAE30 TBNZ X8, 0x0, 0x1EFAE48
	0x01EFAE34 ADRP X0, 0x2200000
	0x01EFAE38 LDR X0, [X0 + 0xC68]
	0x01EFAE3C BL 0x1C16CF4
	0x01EFAE40 MOVZ W8, 0x1

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {7}
	003 Move W8, [X1+24]
	004 Add X9, X1, 32
	005 NotImplemented "Instruction CMP not yet implemented."
	006 NotImplemented "Instruction CSEL not yet implemented."
	007 Call NetBitBuffer.WriteBytesAligned, X0, X1, X2
	008 Return 

Method: System.Void WriteBytesAligned(System.Void* buffer, System.Int32 length)

Disassembly:
	0x01EFB068 CMP W8, 0x0
	0x01EFB06C CSEL W8, W9, W8, LT
	0x01EFB070 AND W8, W8, 0xFFFFFFF8
	0x01EFB074 ADD W8, W8, 0x8
	0x01EFB078 ADD W8, W8, W2, 0x3, LSL
	0x01EFB07C STR W8, [X0]
	0x01EFB080 RET
	0x01EFB084 LDRB W0, [X0]
	0x01EFB088 RET
	0x01EFB08C LDRB W8, [X0]
	0x01EFB090 CMP W8, 0x0
	0x01EFB094 CSET W0, EQ
	0x01EFB098 RET
	0x01EFB09C LDR X0, [X0 + 0x8]
	0x01EFB0A0 RET
	0x01EFB0A4 AND W8, W2, 0x1
	0x01EFB0A8 STRB W8, [X0]
	0x01EFB0AC STR X1, [X0 + 0x8]
	0x01EFB0B0 RET
	0x01EFB0B4 MOV X1, X0
	0x01EFB0B8 MOVZ W0, 0x1
	0x01EFB0BC RET
	0x01EFB0C0 MOV X1, X0
	0x01EFB0C4 MOV X0, X31
	0x01EFB0C8 RET
	0x01EFB0CC STP X30, X19, [X31 - 0x10]!
	0x01EFB0D0 LDRB W8, [X0]
	0x01EFB0D4 LDR X0, [X0 + 0x8]
	0x01EFB0D8 CBZ W8, 0x1EFB0F0
	0x01EFB0DC MOV W19, W1
	0x01EFB0E0 AND X1, X19, 0x1
	0x01EFB0E4 MOVZ W2, 0x1
	0x01EFB0E8 BL 0x1EF9A4C
	0x01EFB0EC B 0x1EFB100
	0x01EFB0F0 MOVZ W1, 0x1
	0x01EFB0F4 BL 0x1EF9B00
	0x01EFB0F8 CMP X0, 0x1
	0x01EFB0FC CSET W19, EQ
	0x01EFB100 AND W0, W19, 0x1
	0x01EFB104 LDP X30, X19, [X31], #0x10
	0x01EFB108 RET
	0x01EFB10C STP X30, X19, [X31 - 0x10]!
	0x01EFB110 LDRB W8, [X0]
	0x01EFB114 LDR X0, [X0 + 0x8]
	0x01EFB118 MOV X19, X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move W22, [X0+80]
	008 Move W19, W2
	009 Move X21, X0
	010 Move X20, X1
	011 And W31, W22, 7
	012 Add W8, W22, 7
	013 NotImplemented "Instruction CMP not yet implemented."
	014 NotImplemented "Instruction CSEL not yet implemented."
	015 And W8, W8, 0xFFFFFFF8
	016 Subtract W8, W8, W22
	017 Add W2, W8, 8
	018 Move X0, X21
	019 Move X1, X31
	020 Call NetBitBuffer.Write, X0, X1, X2
	021 Move W22, [X21+80]
	022 Move W8, [X21+84]
	023 Add W23, W22, W19
	024 Move [X21+80], W23
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W8, [X21+88]
	027 Move X0, X21
	028 Move W1, W8
	029 ShiftRight W1, 31
	030 And W1, W1, 0x3FFFFFFF
	031 Call NetBitBuffer.ReplaceDataFromBlockWithTemp, X0, X1
	032 Move X8, [X21+64]
	033 NotImplemented "Instruction SBFM not yet implemented."
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move [X8], X31
	036 Add W9, W22, 7
	037 NotImplemented "Instruction CMP not yet implemented."
	038 NotImplemented "Instruction CSEL not yet implemented."
	039 Move X1, X20
	040 Move W2, W19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 NotImplemented "Instruction SBFM not yet implemented."
	046 Add X0, X8, W9
	047 Move X3, X31
	048 Move X30, [X31+48]
	049 Move X23, [X31+56]
	050 Call Native.MemCpy, X0, X1, X2
	051 Return 

Method: System.Void ReadBytesAligned(System.Byte[] buffer, System.Int32 length)

Disassembly:
	0x01EFB11C CBZ W8, 0x1EFB130
	0x01EFB120 LDR W1, [X19]
	0x01EFB124 MOVZ W2, 0x20
	0x01EFB128 LDP X30, X19, [X31], #0x10
	0x01EFB12C B 0x1EF9A4C
	0x01EFB130 MOVZ W1, 0x20

ISIL:
	001 Compare X1, 0
	002 Invalid "Jump target not found in method."
	003 Move W8, [X1+24]
	004 Add X9, X1, 32
	005 NotImplemented "Instruction CMP not yet implemented."
	006 NotImplemented "Instruction CSEL not yet implemented."

Method: System.Void ReadBytesAligned(System.Void* buffer, System.Int32 length)

Disassembly:
	0x01EFB134 BL 0x1EF9B00
	0x01EFB138 STR W0, [X19]
	0x01EFB13C LDP X30, X19, [X31], #0x10
	0x01EFB140 RET
	0x01EFB144 STP X30, X19, [X31 - 0x10]!
	0x01EFB148 LDRB W8, [X0]
	0x01EFB14C LDR X0, [X0 + 0x8]
	0x01EFB150 MOV X19, X1
	0x01EFB154 CBZ W8, 0x1EFB168
	0x01EFB158 LDRB W1, [X19]
	0x01EFB15C MOVZ W2, 0x8
	0x01EFB160 LDP X30, X19, [X31], #0x10
	0x01EFB164 B 0x1EF9A4C
	0x01EFB168 MOVZ W1, 0x8
	0x01EFB16C BL 0x1EF9B00
	0x01EFB170 STRB W0, [X19]
	0x01EFB174 LDP X30, X19, [X31], #0x10
	0x01EFB178 RET
	0x01EFB17C STP X30, X19, [X31 - 0x10]!
	0x01EFB180 LDRB W8, [X0]
	0x01EFB184 LDR X0, [X0 + 0x8]
	0x01EFB188 MOV X19, X1
	0x01EFB18C CBZ W8, 0x1EFB1A8
	0x01EFB190 LDRB W8, [X19]
	0x01EFB194 MOVZ W2, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W8, [X0+80]
	006 Move W19, W2
	007 Move X20, X1
	008 Move W1, W2
	009 ShiftRight W1, 29
	010 And W1, W1, 0xFFFFFFF
	011 Add W8, W8, 7
	012 And W8, W8, 0xFFFFFFF8
	013 Move W2, W31
	014 Move X3, X31
	015 Move X21, X0
	016 Move [X0+80], W8
	017 Call 0x1EDDC4C
	018 Move X8, [X21+64]
	019 Add W9, W0, 7
	020 NotImplemented "Instruction CMP not yet implemented."
	021 NotImplemented "Instruction CSEL not yet implemented."
	022 Move X0, X20
	023 Move W2, W19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 NotImplemented "Instruction SBFM not yet implemented."
	027 Add X1, X8, W9
	028 Move X3, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Native.MemCpy, X0, X1, X2
	032 Return 

Method: System.Void WriteInt64VarLength(System.Int64 value, System.Int32 blockSize)

Disassembly:
	0x01EFB198 CMP W8, 0x0

ISIL:
No ISIL was generated
Method: System.Void WriteInt32VarLength(System.Int32 value)

Disassembly:
	0x01EFB2D8 SUB W10, W8, 0x1

ISIL:
No ISIL was generated
Method: System.Void WriteInt32VarLength(System.Int32 value, System.Int32 blockSize)

Disassembly:
	0x01EFB33C STP W20, W31, [X19]

ISIL:
No ISIL was generated
Method: System.Int32 ReadInt32VarLength()

Disassembly:
	0x01EFB464 MOV X2, X31

ISIL:
No ISIL was generated
Method: System.Int64 ReadInt64VarLength(System.Int32 blockSize)

Disassembly:
	0x01EFB4E0 BL 0x1C16DFC

ISIL:
No ISIL was generated
Method: System.Int32 ReadInt32VarLength(System.Int32 blockSize)

Disassembly:
	0x01EFB5C0 MOVZ W8, 0x1

ISIL:
No ISIL was generated
Method: System.UInt32 ReadUInt32VarLength(System.Int32 blockSize)

Disassembly:
	0x01EFB5C4 STRB W8, [X20 + 0x62D]
	0x01EFB5C8 LDR X0, [X21]
	0x01EFB5CC MOVZ W1, 0x8
	0x01EFB5D0 BL 0x1C16D6C
	0x01EFB5D4 MOV X20, X0
	0x01EFB5D8 CBZ X0, 0x1EFB5F0
	0x01EFB5DC LDR W8, [X20 + 0x18]
	0x01EFB5E0 CBZ W8, 0x1EFB5EC
	0x01EFB5E4 ADD X0, X20, 0x20
	0x01EFB5E8 B 0x1EFB5F0
	0x01EFB5EC MOV X0, X31
	0x01EFB5F0 ADD X1, X19, 0x90
	0x01EFB5F4 MOVZ W2, 0x8
	0x01EFB5F8 MOV X3, X31
	0x01EFB5FC BL 0x1E35764
	0x01EFB600 MOV X0, X20
	0x01EFB604 LDP X20, X19, [X31 + 0x10]
	0x01EFB608 LDP X30, X21, [X31], #0x20
	0x01EFB60C RET
	0x01EFB610 SUB X31, X31, 0xE0
	0x01EFB614 STP X30, X25, [X31 + 0xA0]
	0x01EFB618 STP X24, X23, [X31 + 0xB0]
	0x01EFB61C STP X22, X21, [X31 + 0xC0]
	0x01EFB620 STP X20, X19, [X31 + 0xD0]
	0x01EFB624 MRS X24, 0xC000
	0x01EFB628 MOV X19, X8
	0x01EFB62C LDR X8, [X24 + 0x28]
	0x01EFB630 MOV X23, X0
	0x01EFB634 MOV W0, W2
	0x01EFB638 MOV X20, X3
	0x01EFB63C MOV X21, X1
	0x01EFB640 STR X8, [X31 + 0x98]
	0x01EFB644 BL 0x1EFB4A0
	0x01EFB648 MOV W22, W0
	0x01EFB64C ADD X0, X31, 0x0
	0x01EFB650 MOVZ W2, 0x98
	0x01EFB654 MOV W1, W31
	0x01EFB658 ADD X25, X31, 0x0
	0x01EFB65C BL 0x3EB1B10
	0x01EFB660 MOVZ W8, 0x101
	0x01EFB664 CMP W22, 0x1
	0x01EFB668 STR X23, [X31 + 0x8]
	0x01EFB66C STRH W8, [X31]
	0x01EFB670 STR W22, [X31 + 0x4]
	0x01EFB674 B.LT 0x1EFB68C
	0x01EFB678 ADD X0, X25, 0x10
	0x01EFB67C MOV X1, X21
	0x01EFB680 MOV W2, W22
	0x01EFB684 MOV X3, X31
	0x01EFB688 BL 0x1E35764
	0x01EFB68C CBZ X20, 0x1EFB6A8
	0x01EFB690 ADD X8, X31, 0x0
	0x01EFB694 ADD X0, X8, 0x90

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x24DF000
	007 Move X22, 0x2200000
	008 Move W8, [X21+1569]
	009 Move X22, [X22+3176]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2200000
	017 Move X0, [X0+3176]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1569], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move W1, 2
	027 Move W2, 16
	028 Move W0, W20
	029 Move X3, X31
	030 Call Maths.Clamp, X0, X1, X2
	031 Move W20, W0
	032 Move W1, 1
	033 Move X0, X19
	034 Move W21, 1
	035 Call NetBitBuffer.Read, X0, X1
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move W21, 1
	038 Move W8, [X19+80]
	039 Move W9, [X19+84]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move W1, 1
	042 Move X0, X19
	043 Add W21, W21, 1
	044 Call NetBitBuffer.Read, X0, X1
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move W8, [X19+80]
	047 Move W9, [X19+84]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Multiply W1, W21, W20
	050 Move X0, X19
	051 Call NetBitBuffer.Read, X0, X1
	052 Move W0, W31
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X30, [X31+48]
	058 Return X0

Method: System.UInt64 ReadUInt64VarLength(System.Int32 blockSize)

Disassembly:
	0x01EFB4E4 MOV W0, W19
	0x01EFB4E8 LDP X20, X19, [X31 + 0x10]
	0x01EFB4EC MOVZ W2, 0x80
	0x01EFB4F0 MOV W1, W31
	0x01EFB4F4 MOV X3, X31
	0x01EFB4F8 LDP X30, X21, [X31], #0x20
	0x01EFB4FC B 0x1E35134
	0x01EFB500 STP X30, X21, [X31 - 0x20]!
	0x01EFB504 STP X20, X19, [X31 + 0x10]
	0x01EFB508 ADRP X20, 0x24DE000
	0x01EFB50C LDRB W8, [X20 + 0x62C]
	0x01EFB510 MOV X19, X0
	0x01EFB514 TBNZ X8, 0x0, 0x1EFB52C
	0x01EFB518 ADRP X0, 0x21F8000
	0x01EFB51C LDR X0, [X0 + 0x618]
	0x01EFB520 BL 0x1C16CF4
	0x01EFB524 MOVZ W8, 0x1
	0x01EFB528 STRB W8, [X20 + 0x62C]
	0x01EFB52C LDR W0, [X19 + 0x4]
	0x01EFB530 BL 0x1EFB4A0
	0x01EFB534 CBZ W0, 0x1EFB568
	0x01EFB538 ADRP X8, 0x21F8000
	0x01EFB53C LDR X8, [X8 + 0x618]
	0x01EFB540 MOV W20, W0
	0x01EFB544 MOV W1, W20
	0x01EFB548 LDR X0, [X8]
	0x01EFB54C BL 0x1C16D6C
	0x01EFB550 MOV X21, X0
	0x01EFB554 CBZ X0, 0x1EFB574
	0x01EFB558 LDR W8, [X21 + 0x18]
	0x01EFB55C CBZ W8, 0x1EFB570
	0x01EFB560 ADD X0, X21, 0x20
	0x01EFB564 B 0x1EFB574
	0x01EFB568 MOV X21, X31
	0x01EFB56C B 0x1EFB584
	0x01EFB570 MOV X0, X31
	0x01EFB574 ADD X1, X19, 0x10
	0x01EFB578 MOV W2, W20
	0x01EFB57C MOV X3, X31
	0x01EFB580 BL 0x1E35764
	0x01EFB584 LDP X20, X19, [X31 + 0x10]
	0x01EFB588 MOV X0, X21
	0x01EFB58C LDP X30, X21, [X31], #0x20
	0x01EFB590 RET
	0x01EFB594 STP X30, X21, [X31 - 0x20]!
	0x01EFB598 STP X20, X19, [X31 + 0x10]
	0x01EFB59C ADRP X20, 0x24DE000
	0x01EFB5A0 ADRP X21, 0x21F8000
	0x01EFB5A4 LDRB W8, [X20 + 0x62D]
	0x01EFB5A8 LDR X21, [X21 + 0x618]
	0x01EFB5AC MOV X19, X0
	0x01EFB5B0 TBNZ X8, 0x0, 0x1EFB5C8
	0x01EFB5B4 ADRP X0, 0x21F8000
	0x01EFB5B8 LDR X0, [X0 + 0x618]
	0x01EFB5BC BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x24DF000
	007 Move X22, 0x2200000
	008 Move W8, [X21+1570]
	009 Move X22, [X22+3176]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2200000
	017 Move X0, [X0+3176]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1570], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move W1, 2
	027 Move W2, 16
	028 Move W0, W20
	029 Move X3, X31
	030 Call Maths.Clamp, X0, X1, X2
	031 Move W20, W0
	032 Move W1, 1
	033 Move X0, X19
	034 Move W21, 1
	035 Call NetBitBuffer.Read, X0, X1
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move W21, 1
	038 Move W8, [X19+80]
	039 Move W9, [X19+84]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move W1, 1
	042 Move X0, X19
	043 Add W21, W21, 1
	044 Call NetBitBuffer.Read, X0, X1
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move W8, [X19+80]
	047 Move W9, [X19+84]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Multiply W1, W21, W20
	050 Move X0, X19
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move X30, [X31+48]
	056 Call NetBitBuffer.Read, X0, X1
	057 Return X0
	058 Move X20, [X31+32]
	059 Move X19, [X31+40]
	060 Move X22, [X31+16]
	061 Move X21, [X31+24]
	062 Move X0, X31
	063 Move X30, [X31+48]
	064 Return X0

Method: System.Void WriteUInt32VarLength(System.UInt32 value, System.Int32 blockSize)

Disassembly:
	0x01EFB340 STP X0, X31, [X19 + 0x8]
	0x01EFB344 LDP X20, X19, [X31 + 0x20]
	0x01EFB348 LDP X22, X21, [X31 + 0x10]
	0x01EFB34C LDR X30, [X31], #0x30
	0x01EFB350 RET
	0x01EFB354 LDR X0, [X0 + 0x8]
	0x01EFB358 CBZ X0, 0x1EFB364
	0x01EFB35C MOV X1, X31
	0x01EFB360 B 0x1E3585C
	0x01EFB364 RET
	0x01EFB368 STR X30, [X31 - 0x30]!
	0x01EFB36C STP X22, X21, [X31 + 0x10]
	0x01EFB370 STP X20, X19, [X31 + 0x20]
	0x01EFB374 ADRP X21, 0x24DE000
	0x01EFB378 LDRB W8, [X21 + 0x62A]
	0x01EFB37C MOV X19, X1
	0x01EFB380 MOV X20, X0
	0x01EFB384 TBNZ X8, 0x0, 0x1EFB39C
	0x01EFB388 ADRP X0, 0x2205000
	0x01EFB38C LDR X0, [X0 + 0xA08]
	0x01EFB390 BL 0x1C16CF4
	0x01EFB394 MOVZ W8, 0x1
	0x01EFB398 STRB W8, [X21 + 0x62A]
	0x01EFB39C CBZ X19, 0x1EFB3F8
	0x01EFB3A0 ADRP X21, 0x2205000
	0x01EFB3A4 LDR W8, [X20 + 0x10]
	0x01EFB3A8 LDR W1, [X20]
	0x01EFB3AC LDR X21, [X21 + 0xA08]
	0x01EFB3B0 LDR X22, [X19 + 0x20]
	0x01EFB3B4 STP X31, X31, [X19 + 0x18]
	0x01EFB3B8 LDR X0, [X20 + 0x8]
	0x01EFB3BC CMP W8, W1
	0x01EFB3C0 B.NE 0x1EFB3E0
	0x01EFB3C4 LDR X2, [X21]
	0x01EFB3C8 BL 0x2221B20
	0x01EFB3CC LDR W9, [X20]
	0x01EFB3D0 LDR W8, [X20 + 0x10]
	0x01EFB3D4 STR X0, [X20 + 0x8]
	0x01EFB3D8 UBFM W1, W9, 0x1F, 0x1E
	0x01EFB3DC STR W1, [X20]
	0x01EFB3E0 ADD W9, W8, 0x1
	0x01EFB3E4 STR W9, [X20 + 0x10]
	0x01EFB3E8 STR X19, [X0, W8, SXTW]
	0x01EFB3EC MOV W8, W9
	0x01EFB3F0 MOV X19, X22
	0x01EFB3F4 CBNZ X22, 0x1EFB3B0
	0x01EFB3F8 LDP X20, X19, [X31 + 0x20]
	0x01EFB3FC LDP X22, X21, [X31 + 0x10]
	0x01EFB400 LDR X30, [X31], #0x30
	0x01EFB404 RET
	0x01EFB408 CMP W1, 0x1
	0x01EFB40C MOV X19, X0
	0x01EFB410 B.NE 0x1EFB474
	0x01EFB414 MOV X0, X19
	0x01EFB418 BL 0x3EB1AD0
	0x01EFB41C MOV X19, X0
	0x01EFB420 ADRP X0, 0x2201000
	0x01EFB424 LDR X0, [X0 + 0xDB8]
	0x01EFB428 BL 0x1C16D08
	0x01EFB42C LDR X8, [X19]
	0x01EFB430 LDR X1, [X8]
	0x01EFB434 BL 0x1C17270
	0x01EFB438 TBZ X0, 0x0, 0x1EFB44C
	0x01EFB43C LDR X19, [X19]
	0x01EFB440 BL 0x3EB1AE0
	0x01EFB444 MOV X0, X19
	0x01EFB448 BL 0x1C16F18
	0x01EFB44C MOVZ W0, 0x8
	0x01EFB450 BL 0x3EB1AF0
	0x01EFB454 LDR X8, [X19]
	0x01EFB458 STR X8, [X0]
	0x01EFB45C ADRP X1, 0x1FB9000
	0x01EFB460 ADD X1, X1, 0xE58

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x24DF000
	008 Move X22, 0x2200000
	009 Move W8, [X23+1571]
	010 Move X22, [X22+3176]
	011 Move W21, W2
	012 Move W20, W1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x2200000
	019 Move X0, [X0+3176]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+1571], W8
	023 Move X0, [X22]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move W1, 2
	029 Move W2, 16
	030 Move W0, W21
	031 Move X3, X31
	032 Call Maths.Clamp, X0, X1, X2
	033 Move X23, 0x24DE000
	034 Move W8, [X23+3860]
	035 Move W21, W0
	036 Compare W8, 0
	037 JumpIfNotEqual {43}
	038 Move X0, 0x2200000
	039 Move X0, [X0+3176]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X23+3860], W8
	043 Move X0, [X22]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {49}
	047 Call 0x1C17DFC
	048 Move X0, [X22]
	049 Move X8, [X0+184]
	050 Move X8, [X8]
	051 Compare X8, 0
	052 JumpIfEqual {87}
	053 Move W9, W20
	054 Move W9, W9
	055 Move W9, W9
	056 Move W10, [X8+24]
	057 Move W9, W9
	058 Move W11, 0xACDD
	059 Move W9, W9
	060 NotImplemented "Instruction MOVK not yet implemented."
	061 Multiply W9, W9, W11
	062 Move W9, W9
	063 ShiftRight W9, 27
	064 And W9, W9, 0x7FFFFFFF
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Add X8, X8, W9
	067 Move W8, [X8+32]
	068 Move W9, 1
	069 Move X0, X19
	070 Add W8, W21, W8
	071 NotImplemented "Instruction SDIV not yet implemented."
	072 Subtract W8, W22, 1
	073 NotImplemented "Instruction LSLV not yet implemented."
	074 Move W2, W22
	075 Call NetBitBuffer.Write, X0, X1, X2
	076 Multiply W2, W22, W21
	077 Move W1, W20
	078 Move X0, X19
	079 Move X20, [X31+32]
	080 Move X19, [X31+40]
	081 Move X22, [X31+16]
	082 Move X21, [X31+24]
	083 Move X30, [X31+48]
	084 Move X23, [X31+56]
	085 Call NetBitBuffer.Write, X0, X1, X2
	086 Return 
	087 Call 0x1C17F20
	088 Call 0x1C17F28

Method: System.Void WriteUInt64VarLength(System.UInt64 value, System.Int32 blockSize)

Disassembly:
	0x01EFB19C CSET W1, NE
	0x01EFB1A0 LDP X30, X19, [X31], #0x10
	0x01EFB1A4 B 0x1EF9A4C
	0x01EFB1A8 MOVZ W1, 0x1
	0x01EFB1AC BL 0x1EF9B00
	0x01EFB1B0 CMP X0, 0x1
	0x01EFB1B4 CSET W8, EQ
	0x01EFB1B8 STRB W8, [X19]
	0x01EFB1BC LDP X30, X19, [X31], #0x10
	0x01EFB1C0 RET
	0x01EFB1C4 STP X30, X19, [X31 - 0x10]!
	0x01EFB1C8 LDRB W8, [X0]
	0x01EFB1CC LDR X0, [X0 + 0x8]
	0x01EFB1D0 MOV X19, X1
	0x01EFB1D4 CBZ W8, 0x1EFB1E8
	0x01EFB1D8 LDRSW X1, [X19]
	0x01EFB1DC MOVZ W2, 0x20
	0x01EFB1E0 LDP X30, X19, [X31], #0x10
	0x01EFB1E4 B 0x1EF9A4C
	0x01EFB1E8 MOVZ W1, 0x20
	0x01EFB1EC BL 0x1EF9B00
	0x01EFB1F0 STR W0, [X19]
	0x01EFB1F4 LDP X30, X19, [X31], #0x10
	0x01EFB1F8 RET
	0x01EFB1FC STP X30, X19, [X31 - 0x10]!
	0x01EFB200 LDRB W8, [X0]
	0x01EFB204 LDR X0, [X0 + 0x8]
	0x01EFB208 MOV X19, X1
	0x01EFB20C CBZ W8, 0x1EFB220
	0x01EFB210 LDR W1, [X19]
	0x01EFB214 MOVZ W2, 0x20
	0x01EFB218 LDP X30, X19, [X31], #0x10
	0x01EFB21C B 0x1EF9A4C
	0x01EFB220 MOVZ W1, 0x20
	0x01EFB224 BL 0x1EF9B00
	0x01EFB228 STR W0, [X19]
	0x01EFB22C LDP X30, X19, [X31], #0x10
	0x01EFB230 RET
	0x01EFB234 STP X30, X19, [X31 - 0x10]!
	0x01EFB238 LDRB W8, [X0]
	0x01EFB23C LDR X0, [X0 + 0x8]
	0x01EFB240 MOV X19, X1
	0x01EFB244 CBZ W8, 0x1EFB258
	0x01EFB248 LDR X1, [X19]
	0x01EFB24C MOVZ W2, 0x40
	0x01EFB250 LDP X30, X19, [X31], #0x10
	0x01EFB254 B 0x1EF9A4C
	0x01EFB258 MOVZ W1, 0x40
	0x01EFB25C BL 0x1EF9B00
	0x01EFB260 STR X0, [X19]
	0x01EFB264 LDP X30, X19, [X31], #0x10
	0x01EFB268 RET
	0x01EFB26C STR X30, [X31 - 0x20]!
	0x01EFB270 STP X20, X19, [X31 + 0x10]
	0x01EFB274 LDRB W8, [X0]
	0x01EFB278 LDR X19, [X0 + 0x8]
	0x01EFB27C MOV X20, X1
	0x01EFB280 CBZ W8, 0x1EFB2A8
	0x01EFB284 LDR X20, [X20]
	0x01EFB288 MOV X0, X31
	0x01EFB28C BL 0x3241948
	0x01EFB290 MOV X2, X0
	0x01EFB294 MOV X0, X19
	0x01EFB298 MOV X1, X20
	0x01EFB29C LDP X20, X19, [X31 + 0x10]
	0x01EFB2A0 LDR X30, [X31], #0x20
	0x01EFB2A4 B 0x1EF9DA0
	0x01EFB2A8 MOV X0, X31
	0x01EFB2AC BL 0x3241948
	0x01EFB2B0 MOV X1, X0
	0x01EFB2B4 MOV X0, X19
	0x01EFB2B8 BL 0x1EF9E64
	0x01EFB2BC STR X0, [X20]
	0x01EFB2C0 LDP X20, X19, [X31 + 0x10]
	0x01EFB2C4 LDR X30, [X31], #0x20
	0x01EFB2C8 RET
	0x01EFB2CC LDR W8, [X0 + 0x10]
	0x01EFB2D0 CBZ W8, 0x1EFB2E8
	0x01EFB2D4 LDR X9, [X0 + 0x8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x24DF000
	008 Move X22, 0x2200000
	009 Move W8, [X23+1572]
	010 Move X22, [X22+3176]
	011 Move W21, W2
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x2200000
	019 Move X0, [X0+3176]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+1572], W8
	023 Move X0, [X22]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move W1, 2
	029 Move W2, 16
	030 Move W0, W21
	031 Move X3, X31
	032 Call Maths.Clamp, X0, X1, X2
	033 Move X23, 0x24DE000
	034 Move W8, [X23+3861]
	035 Move W21, W0
	036 Compare W8, 0
	037 JumpIfNotEqual {46}
	038 Move X0, 0x2201000
	039 Move X0, [X0+1680]
	040 Call 0x1C17CF4
	041 Move X0, 0x2200000
	042 Move X0, [X0+3176]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X23+3861], W8
	046 Move X0, [X22]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {52}
	050 Call 0x1C17DFC
	051 Move X0, [X22]
	052 Move X8, [X0+184]
	053 Move X8, [X8+16]
	054 Compare X8, 0
	055 JumpIfEqual {93}
	056 Move X9, X19
	057 Move X9, X9
	058 Move X9, X9
	059 Move X11, 0x6F6B
	060 Move X9, X9
	061 NotImplemented "Instruction MOVK not yet implemented."
	062 Move W10, [X8+24]
	063 Move X9, X9
	064 NotImplemented "Instruction MOVK not yet implemented."
	065 Move X9, X9
	066 NotImplemented "Instruction MOVK not yet implemented."
	067 Multiply X9, X9, X11
	068 Move X9, X9
	069 ShiftRight X9, 57
	070 And X9, X9, 0x7FFFFFFF
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Add X8, X8, X9
	073 Move W8, [X8+32]
	074 Move W9, 1
	075 Move X0, X20
	076 Add W8, W8, W21
	077 NotImplemented "Instruction SDIV not yet implemented."
	078 Subtract W8, W22, 1
	079 NotImplemented "Instruction LSLV not yet implemented."
	080 Move W2, W22
	081 Call NetBitBuffer.Write, X0, X1, X2
	082 Multiply W2, W22, W21
	083 Move X0, X20
	084 Move X1, X19
	085 Move X20, [X31+32]
	086 Move X19, [X31+40]
	087 Move X22, [X31+16]
	088 Move X21, [X31+24]
	089 Move X30, [X31+48]
	090 Move X23, [X31+56]
	091 Call NetBitBuffer.Write, X0, X1, X2
	092 Return 
	093 Call 0x1C17F20
	094 Call 0x1C17F28

Method: System.Void WriteUInt32VarLength(System.UInt32 value)

Disassembly:
	0x01EFB2DC STR W10, [X0 + 0x10]
	0x01EFB2E0 LDR X9, [X9, W10, SXTW]
	0x01EFB2E4 STR X9, [X1]
	0x01EFB2E8 CMP W8, 0x0
	0x01EFB2EC CSET W0, NE
	0x01EFB2F0 RET
	0x01EFB2F4 STR X30, [X31 - 0x30]!
	0x01EFB2F8 STP X22, X21, [X31 + 0x10]
	0x01EFB2FC STP X20, X19, [X31 + 0x20]
	0x01EFB300 ADRP X21, 0x24DE000
	0x01EFB304 ADRP X22, 0x2205000
	0x01EFB308 MOV X19, X8
	0x01EFB30C LDRB W8, [X21 + 0x629]
	0x01EFB310 LDR X22, [X22 + 0xA00]
	0x01EFB314 MOV W20, W0
	0x01EFB318 TBNZ X8, 0x0, 0x1EFB330
	0x01EFB31C ADRP X0, 0x2205000
	0x01EFB320 LDR X0, [X0 + 0xA00]
	0x01EFB324 BL 0x1C16CF4
	0x01EFB328 MOVZ W8, 0x1
	0x01EFB32C STRB W8, [X21 + 0x629]
	0x01EFB330 LDR X1, [X22]
	0x01EFB334 MOV W0, W20
	0x01EFB338 BL 0x2222170

ISIL:
	001 Move [X31-16], X30
	002 And W9, W1, 127
	003 Move W8, W1
	004 ShiftRight W8, 7
	005 And W8, W8, 0x7FFFFFFF
	006 Move [X31+8], X31
	007 Move [X31+8], W9
	008 Compare W8, 0
	009 JumpIfEqual {25}
	010 Add X9, X31, 8
	011 Or X10, X9, 1
	012 Move W2, 8
	013 Or W11, W1, 128
	014 And W12, W8, 127
	015 Move W1, W8
	016 Move W8, W8
	017 ShiftRight W8, 7
	018 And W8, W8, 0x7FFFFFFF
	019 Move [X9], W11
	020 Move X9, X10
	021 Move [X10+1], W12
	022 Add W2, W2, 8
	023 Compare W8, 0
	024 JumpIfNotEqual {13}
	025 Move W2, 8
	026 Move X1, [X31+8]
	027 Call NetBitBuffer.Write, X0, X1, X2
	028 Move X30, [X31+16]
	029 Return 

Method: System.UInt32 ReadUInt32VarLength()

Disassembly:
	0x01EFB468 BL 0x3EB1B00
	0x01EFB46C MOV X19, X0
	0x01EFB470 BL 0x3EB1AE0
	0x01EFB474 MOV X0, X19
	0x01EFB478 BL 0x1D2C690
	0x01EFB47C BL 0x1990590
	0x01EFB480 AND X8, X0, 0xFF
	0x01EFB484 MOVZ W0, 0x1
	0x01EFB488 BFM X0, X8, 0x38, 0x7
	0x01EFB48C RET
	0x01EFB490 AND X8, X0, 0xFF
	0x01EFB494 MOVZ W0, 0x1
	0x01EFB498 BFM X0, X8, 0x38, 0x7
	0x01EFB49C RET
	0x01EFB4A0 STP X30, X21, [X31 - 0x20]!
	0x01EFB4A4 STP X20, X19, [X31 + 0x10]
	0x01EFB4A8 ADRP X20, 0x24DE000
	0x01EFB4AC ADRP X21, 0x21FF000
	0x01EFB4B0 LDRB W8, [X20 + 0x62B]
	0x01EFB4B4 LDR X21, [X21 + 0xC68]
	0x01EFB4B8 MOV W19, W0
	0x01EFB4BC TBNZ X8, 0x0, 0x1EFB4D4
	0x01EFB4C0 ADRP X0, 0x21FF000
	0x01EFB4C4 LDR X0, [X0 + 0xC68]
	0x01EFB4C8 BL 0x1C16CF4
	0x01EFB4CC MOVZ W8, 0x1
	0x01EFB4D0 STRB W8, [X20 + 0x62B]
	0x01EFB4D4 LDR X0, [X21]
	0x01EFB4D8 LDR W8, [X0 + 0xE0]
	0x01EFB4DC CBNZ W8, 0x1EFB4E4

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move W9, [X0+80]
	005 Move W8, [X0+84]
	006 Move X19, X0
	007 Subtract W8, W8, W9
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move W9, 64
	010 NotImplemented "Instruction CSEL not yet implemented."
	011 Call NetBitBuffer.Peek, X0, X1
	012 Move X8, X0
	013 Move W10, W31
	014 Move W9, W31
	015 Move W0, W31
	016 Move W11, W31
	017 Move [X31+8], X8
	018 Add X8, X31, 8
	019 Move W12, [X8]
	020 Add W11, W11, 1
	021 Add W9, W9, 8
	022 And W13, W12, 127
	023 NotImplemented "Instruction LSLV not yet implemented."
	024 Or W0, W13, W0
	025 Add W10, W10, 7
	026 Move TEMP, X12
	027 And TEMP, TEMP, 128
	028 Compare TEMP, 128
	029 JumpIfEqual {19}
	030 Move W8, [X19+80]
	031 Add W8, W8, W9
	032 Move [X19+80], W8
	033 Move X30, [X31+16]
	034 Move X19, [X31+24]
	035 Add X31, X31, 32
	036 Return X0

Method: System.UInt32 ReadUInt32(System.Int32 bits = 32)

Disassembly:
	0x01EFB698 MOVZ W2, 0x8
	0x01EFB69C MOV X1, X20
	0x01EFB6A0 MOV X3, X31
	0x01EFB6A4 BL 0x1E35764

ISIL:
	001 Move [X31-16], X30
	002 Call NetBitBuffer.Read, X0, X1
	003 Move X30, [X31+16]
	004 Return X0

Method: System.Void WriteInt64(System.Int64 value, System.Int32 bits = 64)

Disassembly:
	0x01EFB6A8 ADD X1, X31, 0x0

ISIL:
	001 Call NetBitBuffer.Write, X0, X1, X2
	002 Return 

Method: System.Int64 ReadInt64(System.Int32 bits = 64)

Disassembly:
	0x01EFB6AC MOVZ W2, 0x98

ISIL:
	001 Call NetBitBuffer.Read, X0, X1
	002 Return X0

Method: System.Void WriteUInt64(System.UInt64 value, System.Int32 bits = 64)

Disassembly:
	0x01EFB6B0 MOV X0, X19

ISIL:
	001 Call NetBitBuffer.Write, X0, X1, X2
	002 Return 

Method: System.UInt64 ReadUInt64(System.Int32 bits = 64)

Disassembly:
	0x01EFB6B4 BL 0x3EB1AC0

ISIL:
	001 Call NetBitBuffer.Read, X0, X1
	002 Return X0

Method: System.Void WriteSingle(System.Single value)

Disassembly:
	0x01EFB6B8 LDR X8, [X24 + 0x28]
	0x01EFB6BC LDR X9, [X31 + 0x98]
	0x01EFB6C0 CMP X8, X9

ISIL:
	001 Move W2, 32
	002 Move W1, S0
	003 Call NetBitBuffer.Write, X0, X1, X2
	004 Return 

Method: System.Single ReadSingle()

Disassembly:
	0x01EFB6C4 B.NE 0x1EFB6E0
	0x01EFB6C8 LDP X20, X19, [X31 + 0xD0]
	0x01EFB6CC LDP X22, X21, [X31 + 0xC0]
	0x01EFB6D0 LDP X24, X23, [X31 + 0xB0]
	0x01EFB6D4 LDP X30, X25, [X31 + 0xA0]
	0x01EFB6D8 ADD X31, X31, 0xE0

ISIL:
	001 Move [X31-16], X30
	002 Move W1, 32
	003 Call NetBitBuffer.Read, X0, X1
	004 Move S0, W0
	005 Move X30, [X31+16]
	006 Return V0

Method: System.Void WriteDouble(System.Double value)

Disassembly:
	0x01EFB6DC RET
	0x01EFB6E0 BL 0x3EB1B20
	0x01EFB6E4 MOVZ W9, 0x201

ISIL:
	001 Move W2, 64
	002 Move X1, D0
	003 Call NetBitBuffer.Write, X0, X1, X2
	004 Return 

Method: System.Double ReadDouble()

Disassembly:
	0x01EFB6E8 STRH W31, [X8 + 0x6]
	0x01EFB6EC STUR W31, [X8 + 0x2]
	0x01EFB6F0 STP X0, X1, [X8 + 0x8]
	0x01EFB6F4 STRH W9, [X8]
	0x01EFB6F8 STP W2, W31, [X8 + 0x18]
	0x01EFB6FC RET

ISIL:
	001 Move [X31-16], X30
	002 Move W1, 64
	003 Call NetBitBuffer.Read, X0, X1
	004 Move D0, X0
	005 Move X30, [X31+16]
	006 Return V0

Method: System.Void WriteInt32AtOffset(System.Int32 value, System.Int32 offset, System.Int32 bits)

Disassembly:
	0x01EFB700 AND X8, X0, 0xFF
	0x01EFB704 MOVZ W0, 0x301
	0x01EFB708 BFM X0, X8, 0x30, 0x7
	0x01EFB70C RET
	0x01EFB710 SUB X31, X31, 0xE0
	0x01EFB714 STR X30, [X31 + 0xA0]
	0x01EFB718 STP X24, X23, [X31 + 0xB0]
	0x01EFB71C STP X22, X21, [X31 + 0xC0]
	0x01EFB720 STP X20, X19, [X31 + 0xD0]
	0x01EFB724 MRS X23, 0xC000
	0x01EFB728 LDR X9, [X23 + 0x28]
	0x01EFB72C ADRP X22, 0x24DE000
	0x01EFB730 MOV X20, X1
	0x01EFB734 MOV W21, W0
	0x01EFB738 STR X9, [X31 + 0x98]
	0x01EFB73C LDRB W9, [X22 + 0x62E]
	0x01EFB740 MOV X19, X8
	0x01EFB744 TBNZ X9, 0x0, 0x1EFB774
	0x01EFB748 ADRP X0, 0x21F8000
	0x01EFB74C LDR X0, [X0 + 0x5A8]
	0x01EFB750 BL 0x1C16CF4
	0x01EFB754 ADRP X0, 0x21FF000
	0x01EFB758 LDR X0, [X0 + 0x5F0]
	0x01EFB75C BL 0x1C16CF4
	0x01EFB760 ADRP X0, 0x21F9000
	0x01EFB764 LDR X0, [X0 + 0x470]
	0x01EFB768 BL 0x1C16CF4
	0x01EFB76C MOVZ W8, 0x1
	0x01EFB770 STRB W8, [X22 + 0x62E]
	0x01EFB774 ADRP X24, 0x21F8000
	0x01EFB778 LDR X24, [X24 + 0x5A8]
	0x01EFB77C ADD X0, X31, 0x10
	0x01EFB780 MOVZ W2, 0x88

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W20, [X0+80]
	005 Move X19, X0
	006 Move W1, W1
	007 Move [X0+80], W2
	008 Move W2, W3
	009 Call NetBitBuffer.WriteSlow, X0, X1, X2
	010 Move [X19+80], W20
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]
	014 Return 
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move [X31+12], W20
	017 Call 0x3EB2AD0
	018 Move X20, [X0]
	019 Call 0x3EB2AE0
	020 Move W8, [X31+12]
	021 Move [X19+80], W8
	022 Compare X20, 0
	023 JumpIfEqual {11}
	024 Move X0, X20
	025 Call 0x1C17F18
	026 Move W8, [X31+12]
	027 Move [X19+80], W8
	028 Move W8, [X31+12]
	029 Move [X19+80], W8
	030 Compare X20, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1D2D690
	033 Move X0, X20
	034 Call 0x1C17F18
	035 Call 0x1991590

Method: System.Void WriteUInt64AtOffset(System.UInt64 value, System.Int32 offset, System.Int32 bits)

Disassembly:
	0x01EFB850 ADD X1, X31, 0x10
	0x01EFB854 MOVZ W2, 0x88
	0x01EFB858 MOV X0, X19
	0x01EFB85C BL 0x3EB1AC0
	0x01EFB860 LDR X8, [X23 + 0x28]
	0x01EFB864 LDR X9, [X31 + 0x98]
	0x01EFB868 CMP X8, X9
	0x01EFB86C B.NE 0x1EFB890
	0x01EFB870 LDP X20, X19, [X31 + 0xD0]
	0x01EFB874 LDP X22, X21, [X31 + 0xC0]
	0x01EFB878 LDP X24, X23, [X31 + 0xB0]
	0x01EFB87C LDR X30, [X31 + 0xA0]
	0x01EFB880 ADD X31, X31, 0xE0
	0x01EFB884 RET
	0x01EFB888 BL 0x1C16F28
	0x01EFB88C BL 0x1C16F20
	0x01EFB890 BL 0x3EB1B20
	0x01EFB894 SUB X31, X31, 0xD0
	0x01EFB898 STP X30, X25, [X31 + 0x90]
	0x01EFB89C STP X24, X23, [X31 + 0xA0]
	0x01EFB8A0 STP X22, X21, [X31 + 0xB0]
	0x01EFB8A4 STP X20, X19, [X31 + 0xC0]
	0x01EFB8A8 MRS X23, 0xC000
	0x01EFB8AC MOV X19, X8
	0x01EFB8B0 LDR X8, [X23 + 0x28]
	0x01EFB8B4 ADRP X25, 0x24DE000
	0x01EFB8B8 ADRP X24, 0x21F8000
	0x01EFB8BC MOV W22, W2
	0x01EFB8C0 STR X8, [X31 + 0x88]
	0x01EFB8C4 LDRB W8, [X25 + 0x62F]
	0x01EFB8C8 LDR X24, [X24 + 0x5A8]
	0x01EFB8CC MOV X20, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W20, [X0+80]
	005 Move X19, X0
	006 Move [X0+80], W2
	007 Move W2, W3
	008 Call NetBitBuffer.WriteSlow, X0, X1, X2
	009 Move [X19+80], W20
	010 Move X20, [X31+16]
	011 Move X19, [X31+24]
	012 Move X30, [X31+32]
	013 Return 
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Move [X31+12], W20
	016 Call 0x3EB2AD0
	017 Move X20, [X0]
	018 Call 0x3EB2AE0
	019 Move W8, [X31+12]
	020 Move [X19+80], W8
	021 Compare X20, 0
	022 JumpIfEqual {10}
	023 Move X0, X20
	024 Call 0x1C17F18
	025 Move W8, [X31+12]
	026 Move [X19+80], W8
	027 Move W8, [X31+12]
	028 Move [X19+80], W8
	029 Compare X20, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1D2D690
	032 Move X0, X20
	033 Call 0x1C17F18
	034 Call 0x1991590

Method: System.Void Write(System.UInt64 value, System.Int32 bits)

Disassembly:
	0x01EFAA4C BL 0x321EFD0
	0x01EFAA50 CBZ X19, 0x1EFAA78
	0x01EFAA54 MOV X1, X0
	0x01EFAA58 MOV X0, X19
	0x01EFAA5C MOV X2, X31
	0x01EFAA60 BL 0x32333E0
	0x01EFAA64 LDP X20, X19, [X31 + 0x30]
	0x01EFAA68 LDP X22, X21, [X31 + 0x20]
	0x01EFAA6C LDP X30, X23, [X31 + 0x10]
	0x01EFAA70 ADD X31, X31, 0x40
	0x01EFAA74 RET
	0x01EFAA78 BL 0x1C16F20
	0x01EFAA7C LDR W8, [X1 + 0x50]
	0x01EFAA80 LDR W9, [X0]
	0x01EFAA84 SUB W0, W8, W9
	0x01EFAA88 RET
	0x01EFAA8C CBZ X0, 0x1EFAAD0
	0x01EFAA90 STR X30, [X31 - 0x20]!
	0x01EFAA94 STP X20, X19, [X31 + 0x10]
	0x01EFAA98 MOV X19, X0
	0x01EFAA9C LDR X0, [X0 + 0x18]
	0x01EFAAA0 CBZ X0, 0x1EFAABC
	0x01EFAAA4 LDR X20, [X0 + 0x30]
	0x01EFAAA8 MOV X1, X31
	0x01EFAAAC STR X31, [X0 + 0x28]
	0x01EFAAB0 BL 0x1E3585C
	0x01EFAAB4 MOV X0, X20
	0x01EFAAB8 CBNZ X20, 0x1EFAAA4
	0x01EFAABC MOV X0, X19
	0x01EFAAC0 LDP X20, X19, [X31 + 0x10]
	0x01EFAAC4 MOV X1, X31
	0x01EFAAC8 LDR X30, [X31], #0x20
	0x01EFAACC B 0x1E3585C
	0x01EFAAD0 RET
	0x01EFAAD4 STP X30, X21, [X31 - 0x20]!
	0x01EFAAD8 STP X20, X19, [X31 + 0x10]
	0x01EFAADC ADRP X20, 0x24DF000
	0x01EFAAE0 ADRP X21, 0x2206000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move W23, [X0+80]
	008 Move W9, [X0+84]
	009 Subtract W8, W31, W2
	010 Move TEMP, 0
	011 Not TEMP
	012 Move X22, TEMP
	013 NotImplemented "Instruction LSRV not yet implemented."
	014 And X21, X8, X1
	015 Add W8, W23, W2
	016 Move W19, W2
	017 Move X20, X0
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move [X0+80], W8
	020 Move W8, [X20+88]
	021 Move X0, X20
	022 Move W1, W8
	023 ShiftRight W1, 31
	024 And W1, W1, 0x3FFFFFFF
	025 Call NetBitBuffer.ReplaceDataFromBlockWithTemp, X0, X1
	026 Move X8, [X20+64]
	027 NotImplemented "Instruction SBFM not yet implemented."
	028 And X9, X23, 63
	029 Move W10, 64
	030 Add X8, X8, W11
	031 Move X11, [X8]
	032 NotImplemented "Instruction LSLV not yet implemented."
	033 NotImplemented "Instruction LSLV not yet implemented."
	034 Subtract W9, W10, W9
	035 NotImplemented "Instruction BIC not yet implemented."
	036 Or X10, X10, X13
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move [X8], X10
	039 NotImplemented "Instruction LSRV not yet implemented."
	040 Move [X8+8], X9
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Move X23, [X31+56]
	047 Return 

Method: System.Void WriteSlow(System.UInt64 value, System.Int32 bits)

Disassembly:
	0x01EFB784 MOV W1, W31
	0x01EFB788 BL 0x3EB1B10
	0x01EFB78C CBZ X20, 0x1EFB7B4
	0x01EFB790 ADRP X8, 0x21F9000
	0x01EFB794 LDR X8, [X8 + 0x470]
	0x01EFB798 STR X31, [X31 + 0x8]
	0x01EFB79C LDR W1, [X20 + 0x18]
	0x01EFB7A0 ADD X0, X31, 0x8
	0x01EFB7A4 LDR X2, [X8]
	0x01EFB7A8 BL 0x24341FC
	0x01EFB7AC LDR W22, [X31 + 0xC]
	0x01EFB7B0 B 0x1EFB7B8
	0x01EFB7B4 MOV W22, W31
	0x01EFB7B8 LDR X0, [X24]
	0x01EFB7BC LDR W8, [X0 + 0xE0]
	0x01EFB7C0 CBNZ W8, 0x1EFB7C8
	0x01EFB7C4 BL 0x1C16DFC
	0x01EFB7C8 MOVZ W0, 0x80
	0x01EFB7CC MOV W1, W22
	0x01EFB7D0 MOV X2, X31
	0x01EFB7D4 BL 0x337EE94
	0x01EFB7D8 MOVZ W8, 0x401
	0x01EFB7DC MOVI V0.2D, 0x0
	0x01EFB7E0 CMP W0, 0x1
	0x01EFB7E4 STRB W21, [X31 + 0x12]
	0x01EFB7E8 STRB W31, [X31 + 0x13]
	0x01EFB7EC STR W0, [X31 + 0x14]
	0x01EFB7F0 STRH W8, [X31 + 0x10]
	0x01EFB7F4 STUR V0, [X31 + 0x18]
	0x01EFB7F8 STUR V0, [X31 + 0x28]
	0x01EFB7FC STUR V0, [X31 + 0x38]
	0x01EFB800 STUR V0, [X31 + 0x48]
	0x01EFB804 STUR V0, [X31 + 0x58]
	0x01EFB808 STUR V0, [X31 + 0x68]
	0x01EFB80C STUR V0, [X31 + 0x78]
	0x01EFB810 STUR V0, [X31 + 0x88]
	0x01EFB814 B.LT 0x1EFB850
	0x01EFB818 CBZ X20, 0x1EFB88C
	0x01EFB81C ADD X10, X31, 0x10
	0x01EFB820 MOV X8, X31
	0x01EFB824 MOV W9, W0
	0x01EFB828 ADD X10, X10, 0x8
	0x01EFB82C ADD X11, X20, 0x20
	0x01EFB830 LDR W12, [X20 + 0x18]
	0x01EFB834 CMP X8, X12
	0x01EFB838 B.CS 0x1EFB888
	0x01EFB83C LDRB W12, [X11, X8, LSL]
	0x01EFB840 STRB W12, [X10, X8, LSL]
	0x01EFB844 ADD X8, X8, 0x1
	0x01EFB848 CMP X9, X8
	0x01EFB84C B.NE 0x1EFB830

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move [X31-48], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Subtract W8, W31, W2
	008 Move TEMP, 0
	009 Not TEMP
	010 Move X22, TEMP
	011 NotImplemented "Instruction LSRV not yet implemented."
	012 Move W19, W2
	013 And X21, X8, X1
	014 Move W1, W2
	015 Move W2, W31
	016 Move X3, X31
	017 Move X20, X0
	018 Call 0x1EDDC4C
	019 Move X10, [X20+64]
	020 And W8, W0, 63
	021 Move W9, 64
	022 Subtract W11, W9, W8
	023 Subtract W13, W11, W19
	024 NotImplemented "Instruction SBFM not yet implemented."
	025 Add X9, X10, W12
	026 Move X10, [X9]
	027 Subtract W12, W31, W13
	028 NotImplemented "Instruction LSRV not yet implemented."
	029 NotImplemented "Instruction LSLV not yet implemented."
	030 Or X11, X12, X11
	031 And X10, X10, X11
	032 NotImplemented "Instruction LSLV not yet implemented."
	033 Or X8, X10, X8
	034 Move X13, [X10]
	035 NotImplemented "Instruction LSRV not yet implemented."
	036 NotImplemented "Instruction LSLV not yet implemented."
	037 Add W9, W12, 1
	038 And X13, X13, X14
	039 Or X8, X13, X8
	040 Add X9, X10, W9
	041 Move [X10], X8
	042 Move X8, [X9]
	043 Subtract W10, W19, W11
	044 NotImplemented "Instruction LSLV not yet implemented."
	045 And X8, X8, X10
	046 NotImplemented "Instruction LSRV not yet implemented."
	047 Or X8, X8, X10
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move [X9], X8
	053 Move X30, [X31+48]
	054 Return 

Method: System.UInt64 Read(System.Int32 bits)

Disassembly:
	0x01EFAB00 MOVZ W8, 0x1
	0x01EFAB04 STRB W8, [X20 + 0x626]
	0x01EFAB08 LDR X0, [X21]
	0x01EFAB0C BL 0x2221F1C
	0x01EFAB10 CBZ X0, 0x1EFAB28
	0x01EFAB14 STR W19, [X0]
	0x01EFAB18 LDP X20, X19, [X31 + 0x10]
	0x01EFAB1C STP X31, X0, [X0 + 0x8]
	0x01EFAB20 LDP X30, X21, [X31], #0x20
	0x01EFAB24 RET
	0x01EFAB28 BL 0x1C16F20
	0x01EFAB2C STR X30, [X31 - 0x10]!
	0x01EFAB30 ADD X1, X31, 0x8
	0x01EFAB34 STR X31, [X31 + 0x8]
	0x01EFAB38 BL 0x1EFAB48
	0x01EFAB3C LDR X0, [X31 + 0x8]
	0x01EFAB40 LDR X30, [X31], #0x10
	0x01EFAB44 RET
	0x01EFAB48 STR X30, [X31 - 0x30]!
	0x01EFAB4C STP X22, X21, [X31 + 0x10]
	0x01EFAB50 STP X20, X19, [X31 + 0x20]
	0x01EFAB54 MOV X20, X1
	0x01EFAB58 MOV X19, X0
	0x01EFAB5C ADD X22, X0, 0x8
	0x01EFAB60 LDR X21, [X22]
	0x01EFAB64 BL 0x1C16D44
	0x01EFAB68 MOV X0, X21
	0x01EFAB6C MOV X1, X31
	0x01EFAB70 MOV X2, X31
	0x01EFAB74 BL 0x33BE5B0
	0x01EFAB78 TBNZ X0, 0x0, 0x1EFABC0
	0x01EFAB7C MOV X0, X21
	0x01EFAB80 MOV X1, X31
	0x01EFAB84 BL 0x33C6948
	0x01EFAB88 CBZ X0, 0x1EFAC38
	0x01EFAB8C LDR X0, [X0 + 0x20]
	0x01EFAB90 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move W2, W31
	006 Move X3, X31
	007 Move W19, W1
	008 Move X20, X0
	009 Call 0x1EDDC4C
	010 Move X10, [X20+64]
	011 NotImplemented "Instruction SBFM not yet implemented."
	012 And W8, W0, 63
	013 Move W9, 64
	014 Move X13, [X10]
	015 Subtract W9, W9, W8
	016 Subtract W12, W19, W9
	017 NotImplemented "Instruction CMP not yet implemented."
	018 NotImplemented "Instruction LSRV not yet implemented."
	019 Add W11, W11, 1
	020 Move X10, [X10]
	021 Subtract W11, W31, W12
	022 Move TEMP, 0
	023 Not TEMP
	024 Move X12, TEMP
	025 NotImplemented "Instruction LSRV not yet implemented."
	026 And X10, X10, X11
	027 NotImplemented "Instruction LSLV not yet implemented."
	028 Or X0, X9, X8
	029 Move X0, X31
	030 Subtract W9, W31, W19
	031 Move TEMP, 0
	032 Not TEMP
	033 Move X10, TEMP
	034 NotImplemented "Instruction LSRV not yet implemented."
	035 And X0, X8, X9
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Return X0

Method: System.UInt64 Peek(System.Int32 bits)

Disassembly:
	0x01EFABB0 MOV X2, X31
	0x01EFABB4 BL 0x33C5D2C
	0x01EFABB8 TBNZ X0, 0x0, 0x1EFAB60
	0x01EFABBC B 0x1EFABE8
	0x01EFABC0 LDR W1, [X19]
	0x01EFABC4 MOV W0, W31
	0x01EFABC8 BL 0x1EF9890
	0x01EFABCC CBZ X0, 0x1EFAC38
	0x01EFABD0 LDR X8, [X19 + 0x10]
	0x01EFABD4 MOV X21, X0
	0x01EFABD8 STR X8, [X0 + 0x28]
	0x01EFABDC LDR X8, [X19 + 0x18]
	0x01EFABE0 STR X8, [X0 + 0x30]
	0x01EFABE4 STR X0, [X19 + 0x18]
	0x01EFABE8 MOV X0, X21
	0x01EFABEC MOV X1, X31
	0x01EFABF0 BL 0x33C6948
	0x01EFABF4 STR X0, [X20]
	0x01EFABF8 LDR W1, [X19]
	0x01EFABFC LDR X8, [X0 + 0x40]
	0x01EFAC00 MOV X2, X31
	0x01EFAC04 UBFM W9, W1, 0x1D, 0x1C
	0x01EFAC08 STP W9, W1, [X0 + 0x54]
	0x01EFAC0C MOV X0, X8
	0x01EFAC10 BL 0x1E35770
	0x01EFAC14 LDR X8, [X20]
	0x01EFAC18 LDP X22, X21, [X31 + 0x10]
	0x01EFAC1C MOVZ W0, 0x1
	0x01EFAC20 STR W31, [X8 + 0x50]
	0x01EFAC24 LDR X9, [X19 + 0x10]
	0x01EFAC28 LDP X20, X19, [X31 + 0x20]
	0x01EFAC2C STR X9, [X8 + 0x28]
	0x01EFAC30 LDR X30, [X31], #0x30
	0x01EFAC34 RET
	0x01EFAC38 BL 0x1C16F20
	0x01EFAC3C STR X30, [X31 - 0x10]!
	0x01EFAC40 MOV X8, X0
	0x01EFAC44 LDR X9, [X8 + 0x8]!
	0x01EFAC48 CBZ X1, 0x1EFAC7C
	0x01EFAC4C STP X31, X9, [X1 + 0x18]
	0x01EFAC50 CBZ X9, 0x1EFAC5C
	0x01EFAC54 STR X1, [X9 + 0x18]
	0x01EFAC58 B 0x1EFAC64
	0x01EFAC5C ADD X8, X0, 0x10
	0x01EFAC60 STR X1, [X0 + 0x8]
	0x01EFAC64 STR X1, [X8]
	0x01EFAC68 LDR W8, [X0]
	0x01EFAC6C ADD W8, W8, 0x1
	0x01EFAC70 STR W8, [X0]
	0x01EFAC74 LDR X30, [X31], #0x10
	0x01EFAC78 RET
	0x01EFAC7C BL 0x1C16F20
	0x01EFAC80 STR X30, [X31 - 0x10]!
	0x01EFAC84 CBZ X1, 0x1EFACC0
	0x01EFAC88 STR X31, [X1 + 0x20]
	0x01EFAC8C LDR X8, [X0 + 0x10]
	0x01EFAC90 ADD X9, X0, 0x8
	0x01EFAC94 ADD X10, X8, 0x20
	0x01EFAC98 CMP X8, 0x0
	0x01EFAC9C STR X8, [X1 + 0x18]
	0x01EFACA0 CSEL X8, X9, X10, EQ
	0x01EFACA4 STR X1, [X8]
	0x01EFACA8 LDR W8, [X0]
	0x01EFACAC STR X1, [X0 + 0x10]
	0x01EFACB0 ADD W8, W8, 0x1
	0x01EFACB4 STR W8, [X0]
	0x01EFACB8 LDR X30, [X31], #0x10
	0x01EFACBC RET
	0x01EFACC0 BL 0x1C16F20
	0x01EFACC4 STP X30, X19, [X31 - 0x10]!
	0x01EFACC8 LDR X19, [X0 + 0x8]
	0x01EFACCC MOV X1, X19
	0x01EFACD0 BL 0x1EFACE0
	0x01EFACD4 MOV X0, X19
	0x01EFACD8 LDP X30, X19, [X31], #0x10
	0x01EFACDC RET
	0x01EFACE0 STR X30, [X31 - 0x10]!
	0x01EFACE4 CBZ X1, 0x1EFAD44
	0x01EFACE8 MOV X8, X1
	0x01EFACEC LDR X10, [X8 + 0x18]!
	0x01EFACF0 CBZ X10, 0x1EFACFC
	0x01EFACF4 LDR X9, [X1 + 0x20]
	0x01EFACF8 STR X9, [X10 + 0x20]
	0x01EFACFC LDR X9, [X1 + 0x20]
	0x01EFAD00 CBZ X9, 0x1EFAD08
	0x01EFAD04 STR X10, [X9 + 0x18]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move W8, [X0+80]
	009 Move W9, [X0+84]
	010 Add W10, W8, W1
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move X10, [X0+64]
	013 NotImplemented "Instruction SBFM not yet implemented."
	014 And X9, X8, 63
	015 Move W12, 64
	016 Move X13, [X10]
	017 Subtract W9, W12, W9
	018 Subtract W12, W1, W9
	019 NotImplemented "Instruction CMP not yet implemented."
	020 NotImplemented "Instruction LSRV not yet implemented."
	021 Add W11, W11, 1
	022 Move X10, [X10]
	023 Subtract W11, W31, W12
	024 Move TEMP, 0
	025 Not TEMP
	026 Move X12, TEMP
	027 NotImplemented "Instruction LSRV not yet implemented."
	028 And X10, X10, X11
	029 NotImplemented "Instruction LSLV not yet implemented."
	030 Or X0, X9, X8
	031 Move X0, X31
	032 Subtract W9, W31, W1
	033 Move TEMP, 0
	034 Not TEMP
	035 Move X10, TEMP
	036 NotImplemented "Instruction LSRV not yet implemented."
	037 And X0, X8, X9
	038 Move X20, [X31+48]
	039 Move X19, [X31+56]
	040 Move X22, [X31+32]
	041 Move X21, [X31+40]
	042 Move X30, [X31+16]
	043 Add X31, X31, 64
	044 Return X0
	045 Move [X31+28], W8
	046 Move X19, 0x21FA000
	047 Move X19, [X19+1880]
	048 Move X22, X0
	049 Move W21, W1
	050 Move X0, X19
	051 Call 0x1C17D08
	052 Add X1, X31, 28
	053 Call 0x1C17E04
	054 Move X20, X0
	055 Move X0, X19
	056 Move [X31+24], W21
	057 Call 0x1C17D08
	058 Add X1, X31, 24
	059 Call 0x1C17E04
	060 Move W8, [X22+84]
	061 Move X21, X0
	062 Move X0, X19
	063 Move [X31+12], W8
	064 Call 0x1C17D08
	065 Add X1, X31, 12
	066 Call 0x1C17E04
	067 Move X19, X0
	068 Move X0, 0x2207000
	069 Move X0, [X0+2528]
	070 Call 0x1C17D08
	071 Move X1, X20
	072 Move X2, X21
	073 Move X3, X19
	074 Move X4, X31
	075 Call String.Format, X0, X1, X2, X3
	076 Move X19, X0
	077 Move X0, 0x21FA000
	078 Move X0, [X0+1456]
	079 Call 0x1C17D08
	080 Call 0x1C17F10
	081 Move X1, X19
	082 Move X2, X31
	083 Move X20, X0
	084 Call InvalidOperationException..ctor, X0, X1
	085 Move X0, 0x2207000
	086 Move X0, [X0+2536]
	087 Call 0x1C17D08
	088 Move X1, X0
	089 Move X0, X20
	090 Call 0x1C17DEC

Method: System.Int32 Advance(System.Int32 bits, System.Boolean writing)

Disassembly:
	0x01EFB8D0 MOV W21, W0
	0x01EFB8D4 TBNZ X8, 0x0, 0x1EFB8EC
	0x01EFB8D8 ADRP X0, 0x21F8000
	0x01EFB8DC LDR X0, [X0 + 0x5A8]
	0x01EFB8E0 BL 0x1C16CF4
	0x01EFB8E4 MOVZ W8, 0x1
	0x01EFB8E8 STRB W8, [X25 + 0x62F]
	0x01EFB8EC LDR X0, [X24]
	0x01EFB8F0 LDR W8, [X0 + 0xE0]
	0x01EFB8F4 CBNZ W8, 0x1EFB8FC
	0x01EFB8F8 BL 0x1C16DFC
	0x01EFB8FC MOVZ W0, 0x80
	0x01EFB900 MOV W1, W22
	0x01EFB904 MOV X2, X31
	0x01EFB908 BL 0x337EE94
	0x01EFB90C MOVZ W8, 0x401
	0x01EFB910 MOVI V0.2D, 0x0
	0x01EFB914 CMP W0, 0x1
	0x01EFB918 STRB W21, [X31 + 0x2]
	0x01EFB91C STRB W31, [X31 + 0x3]
	0x01EFB920 STR W0, [X31 + 0x4]
	0x01EFB924 STRH W8, [X31]
	0x01EFB928 STUR V0, [X31 + 0x8]
	0x01EFB92C STUR V0, [X31 + 0x18]
	0x01EFB930 STUR V0, [X31 + 0x28]
	0x01EFB934 STUR V0, [X31 + 0x38]
	0x01EFB938 STUR V0, [X31 + 0x48]
	0x01EFB93C STUR V0, [X31 + 0x58]
	0x01EFB940 STUR V0, [X31 + 0x68]
	0x01EFB944 STUR V0, [X31 + 0x78]
	0x01EFB948 B.LT 0x1EFB968
	0x01EFB94C ADD X8, X31, 0x0
	0x01EFB950 ADD X8, X8, 0x8
	0x01EFB954 MOV W9, W0
	0x01EFB958 LDRB W10, [X20], #0x1
	0x01EFB95C SUBS X9, X9, 0x1
	0x01EFB960 STRB W10, [X8], #0x1
	0x01EFB964 B.NE 0x1EFB958
	0x01EFB968 ADD X1, X31, 0x0
	0x01EFB96C MOVZ W2, 0x88
	0x01EFB970 MOV X0, X19
	0x01EFB974 BL 0x3EB1AC0
	0x01EFB978 LDR X8, [X23 + 0x28]
	0x01EFB97C LDR X9, [X31 + 0x88]
	0x01EFB980 CMP X8, X9
	0x01EFB984 B.NE 0x1EFB9A0
	0x01EFB988 LDP X20, X19, [X31 + 0xC0]
	0x01EFB98C LDP X22, X21, [X31 + 0xB0]
	0x01EFB990 LDP X24, X23, [X31 + 0xA0]
	0x01EFB994 LDP X30, X25, [X31 + 0x90]
	0x01EFB998 ADD X31, X31, 0xD0
	0x01EFB99C RET
	0x01EFB9A0 BL 0x3EB1B20
	0x01EFB9A4 LDP W9, W8, [X0 + 0x4]
	0x01EFB9A8 SDIV W10, W8, W9
	0x01EFB9AC MUL W9, W10, W9
	0x01EFB9B0 CMP W9, W8
	0x01EFB9B4 CINC W0, W10, NE
	0x01EFB9B8 RET
	0x01EFB9BC LDR W8, [X0 + 0x14]
	0x01EFB9C0 UBFM W0, W8, 0x1D, 0x1C
	0x01EFB9C4 RET
	0x01EFB9C8 ADRP X9, 0xFFFFFFFFFEBF1000
	0x01EFB9CC LDR V0, [X9 + 0x7D]
	0x01EFB9D0 ADRP X9, 0xFFFFFFFFFEBEF000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move W19, [X0+80]
	008 Move W8, [X0+84]
	009 Add W9, W19, W1
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move [X0+80], W9
	012 Move TEMP, X2
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfNotEqual {29}
	016 Move W8, [X0+88]
	017 Move W1, W8
	018 ShiftRight W1, 31
	019 And W1, W1, 0x3FFFFFFF
	020 Call NetBitBuffer.ReplaceDataFromBlockWithTemp, X0, X1
	021 Move W0, W19
	022 Move X20, [X31+48]
	023 Move X19, [X31+56]
	024 Move X22, [X31+32]
	025 Move X21, [X31+40]
	026 Move X30, [X31+16]
	027 Add X31, X31, 64
	028 Return X0
	029 Move [X31+28], W19
	030 Move X19, 0x21F9000
	031 Move X19, [X19+1880]
	032 Move X22, X0
	033 Move W21, W1
	034 Move X0, X19
	035 Call 0x1C17D08
	036 Add X1, X31, 28
	037 Call 0x1C17E04
	038 Move X20, X0
	039 Move X0, X19
	040 Move [X31+24], W21
	041 Call 0x1C17D08
	042 Add X1, X31, 24
	043 Call 0x1C17E04
	044 Move W8, [X22+84]
	045 Move X21, X0
	046 Move X0, X19
	047 Move [X31+12], W8
	048 Call 0x1C17D08
	049 Add X1, X31, 12
	050 Call 0x1C17E04
	051 Move X19, X0
	052 Move X0, 0x2206000
	053 Move X0, [X0+544]
	054 Call 0x1C17D08
	055 Move X1, X20
	056 Move X2, X21
	057 Move X3, X19
	058 Move X4, X31
	059 Call String.Format, X0, X1, X2, X3
	060 Move X19, X0
	061 Move X0, 0x21F9000
	062 Move X0, [X0+1456]
	063 Call 0x1C17D08
	064 Call 0x1C17F10
	065 Move X1, X19
	066 Move X2, X31
	067 Move X20, X0
	068 Call InvalidOperationException..ctor, X0, X1
	069 Move X0, 0x2206000
	070 Move X0, [X0+552]
	071 Call 0x1C17D08
	072 Move X1, X0
	073 Move X0, X20
	074 Call 0x1C17DEC

Method: System.Void Fusion.ILogDumpable.Dump(System.Text.StringBuilder builder)

Disassembly:
	0x01EFB9D4 LDR V1, [X9 + 0x78]
	0x01EFB9D8 MOVI V2.2S, 0x8
	0x01EFB9DC ADRP X9, 0xFFFFFFFFFEBF1000
	0x01EFB9E0 STR D2, [X8 + 0x68]
	0x01EFB9E4 MOVI V2.2D, 0x0
	0x01EFB9E8 STP V2, V2, [X8 + 0x90]
	0x01EFB9EC STP V2, V2, [X8 + 0xB0]
	0x01EFB9F0 STP V2, V2, [X8 + 0xD0]
	0x01EFB9F4 LDR V2, [X9 + 0x1A]
	0x01EFB9F8 ADRP X9, 0xFFFFFFFFFEBEF000
	0x01EFB9FC STP V0, V1, [X8]
	0x01EFBA00 LDR V0, [X9 + 0x92]
	0x01EFBA04 FMOV V3.2D, 0xFE000000000000
	0x01EFBA08 ADRP X9, 0xFFFFFFFFFEBF3000
	0x01EFBA0C STP X31, X31, [X8 + 0x58]
	0x01EFBA10 STP V0, V3, [X8 + 0x30]
	0x01EFBA14 LDR V0, [X9 + 0x458]
	0x01EFBA18 ORR X9, X31, 0x9999999999999999
	0x01EFBA1C MOVK X9, 0x999A
	0x01EFBA20 MOVK X9, 0x3FB90000
	0x01EFBA24 STR X31, [X8 + 0x50]
	0x01EFBA28 STR V2, [X8 + 0x2]
	0x01EFBA2C STP X31, X31, [X8 + 0x80]
	0x01EFBA30 STR X9, [X8 + 0x70]
	0x01EFBA34 STR D0, [X8 + 0x78]
	0x01EFBA38 STR X31, [X8 + 0xF0]
	0x01EFBA3C RET
	0x01EFBA40 ADRP X9, 0xFFFFFFFFFEBF3000
	0x01EFBA44 LDR V1, [X9 + 0x458]
	0x01EFBA48 ORR X9, X31, 0x9999999999999999
	0x01EFBA4C MOVK X9, 0x999A
	0x01EFBA50 MOVI V0.2S, 0x8
	0x01EFBA54 MOVK X9, 0x3FB90000
	0x01EFBA58 STR D0, [X8]
	0x01EFBA5C STR X9, [X8 + 0x8]
	0x01EFBA60 STR D1, [X8 + 0x10]
	0x01EFBA64 RET
	0x01EFBA68 SUB X31, X31, 0x50
	0x01EFBA6C STR X30, [X31 + 0x40]
	0x01EFBA70 MRS X9, 0xC000
	0x01EFBA74 LDR X10, [X9 + 0x28]
	0x01EFBA78 MOVI V0.2D, 0x0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x24DF000
	009 Move X22, 0x21F9000
	010 Move X21, 0x2206000
	011 Move W8, [X23+1573]
	012 Move X22, [X22+1880]
	013 Move X21, [X21+2544]
	014 Move X19, X1
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x21F9000
	021 Move X0, [X0+1880]
	022 Call 0x1C17CF4
	023 Move X0, 0x2206000
	024 Move X0, [X0+2544]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X23+1573], W8
	028 Move W8, [X20+80]
	029 Move X0, [X22]
	030 Add X1, X31, 12
	031 Move [X31+12], W8
	032 Call 0x1C17E04
	033 Move X8, [X21]
	034 Move X1, X0
	035 Move X2, X31
	036 Move X0, X8
	037 Call String.Format, X0, X1
	038 Compare X19, 0
	039 JumpIfEqual {52}
	040 Move X1, X0
	041 Move X0, X19
	042 Move X2, X31
	043 Call StringBuilder.Append, X0, X1
	044 Move X20, [X31+48]
	045 Move X19, [X31+56]
	046 Move X22, [X31+32]
	047 Move X21, [X31+40]
	048 Move X30, [X31+16]
	049 Move X23, [X31+24]
	050 Add X31, X31, 64
	051 Return 
	052 Call 0x1C17F20

