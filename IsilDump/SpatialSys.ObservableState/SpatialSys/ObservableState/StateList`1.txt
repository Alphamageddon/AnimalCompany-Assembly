Type: SpatialSys.ObservableState.StateList`1

Method: System.Int32 get_childCount()

Disassembly:
	0x02610BBC MOV X0, X21
	0x02610BC0 LDP X20, X19, [X31 + 0x20]
	0x02610BC4 LDP X22, X21, [X31 + 0x10]
	0x02610BC8 LDR X30, [X31], #0x30
	0x02610BCC BR X2
	0x02610BD0 BL 0x1C16F20
	0x02610BD4 STR X30, [X31 - 0x30]!

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+64]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Collections.Generic.IEnumerable`1<SpatialSys.ObservableState.IStateObject> get_childStateObjects()

Disassembly:
	0x02610BD8 STP X22, X21, [X31 + 0x10]
	0x02610BDC STP X20, X19, [X31 + 0x20]
	0x02610BE0 CMP W2, 0x1
	0x02610BE4 B.MI 0x2610C1C
	0x02610BE8 MOV X19, X3
	0x02610BEC MOV W20, W2
	0x02610BF0 MOV X21, X0
	0x02610BF4 SUB W22, W1, 0x1
	0x02610BF8 LDR X8, [X19 + 0x20]
	0x02610BFC ADD W1, W22, W20
	0x02610C00 MOV X0, X21
	0x02610C04 LDR X8, [X8 + 0xC0]
	0x02610C08 LDR X2, [X8 + 0x58]
	0x02610C0C BL 0x2610A08
	0x02610C10 SUB W20, W20, 0x1
	0x02610C14 CMP W20, 0x0
	0x02610C18 B.GT 0x2610BF8
	0x02610C1C LDP X20, X19, [X31 + 0x20]
	0x02610C20 LDP X22, X21, [X31 + 0x10]
	0x02610C24 LDR X30, [X31], #0x30
	0x02610C28 RET
	0x02610C2C STR X30, [X31 - 0x10]!
	0x02610C30 LDR X0, [X0 + 0x40]
	0x02610C34 CBZ X0, 0x2610C4C
	0x02610C38 LDR X8, [X1 + 0x20]
	0x02610C3C LDR X8, [X8 + 0xC0]
	0x02610C40 LDR X1, [X8 + 0x160]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+32]
	005 Move X20, X1
	006 Move X19, X0
	007 Move X8, [X8+192]
	008 Move X8, [X8+24]
	009 Move W9, [X8+309]
	010 Move TEMP, X9
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {17}
	014 Move X0, X8
	015 Call 0x1C5D684
	016 Move X8, X0
	017 Move X0, X8
	018 Call 0x1C17F10
	019 Move X8, [X20+32]
	020 Move TEMP, 1
	021 Not TEMP
	022 Move W1, TEMP
	023 Move X20, X0
	024 Move X8, [X8+192]
	025 Move X2, [X8+32]
	026 Call 0x297DA2C, X0, X1
	027 Compare X20, 0
	028 JumpIfEqual {35}
	029 Move [X20+40], X19
	030 Move X0, X20
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return X0
	035 Call 0x1C17F20

Method: System.Boolean get_isLeafObject()

Disassembly:
	0x02610C44 LDR X30, [X31], #0x10
	0x02610C48 B 0x301DDC4

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Boolean get_isIndexedCollection()

Disassembly:
	0x02610C4C BL 0x1C16F20
	0x02610C50 STR X30, [X31 - 0x60]!

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Boolean get_isDerivedState()

Disassembly:
	0x02610C54 STP X28, X27, [X31 + 0x10]
	0x02610C58 STP X26, X25, [X31 + 0x20]

ISIL:
	001 Move W0, W31
	002 Return X0

Method: T get_Item(System.Int32 index)

Disassembly:
	0x02610C5C STP X24, X23, [X31 + 0x30]
	0x02610C60 STP X22, X21, [X31 + 0x40]
	0x02610C64 STP X20, X19, [X31 + 0x50]
	0x02610C68 ADRP X22, 0x1DCA000
	0x02610C6C LDRB W8, [X22 + 0x18]
	0x02610C70 MOV X21, X3
	0x02610C74 MOV W23, W2
	0x02610C78 MOV X19, X1
	0x02610C7C MOV X20, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+40]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.get_Item, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: System.Int32 get_Count()

Disassembly:
	0x02610C80 TBNZ X8, 0x0, 0x2610CBC
	0x02610C84 ADRP X0, 0x1AE3000
	0x02610C88 LDR X0, [X0 + 0xE00]
	0x02610C8C BL 0x1C16CF4
	0x02610C90 ADRP X0, 0x1AE3000
	0x02610C94 LDR X0, [X0 + 0xE18]
	0x02610C98 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+64]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Int32 get_Capacity()

Disassembly:
	0x02610C9C ADRP X0, 0x1AE4000
	0x02610CA0 LDR X0, [X0 + 0x1B0]
	0x02610CA4 BL 0x1C16CF4
	0x02610CA8 ADRP X0, 0x1B0D000
	0x02610CAC LDR X0, [X0 + 0x370]
	0x02610CB0 BL 0x1C16CF4
	0x02610CB4 MOVZ W8, 0x1
	0x02610CB8 STRB W8, [X22 + 0x18]
	0x02610CBC LDR X8, [X21 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X1+32]
	006 Move X8, [X8+192]
	007 Move X1, [X8+56]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.get_Capacity, X0
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void set_Capacity(System.Int32 value)

Disassembly:
	0x02610CC0 LDR X8, [X8 + 0xC0]
	0x02610CC4 LDR X0, [X8 + 0x178]
	0x02610CC8 LDRB W8, [X0 + 0x135]
	0x02610CCC TBNZ X8, 0x0, 0x2610CD4
	0x02610CD0 BL 0x1C5C684
	0x02610CD4 BL 0x1C16F10
	0x02610CD8 LDR X8, [X21 + 0x20]
	0x02610CDC MOV X22, X0
	0x02610CE0 LDR X8, [X8 + 0xC0]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+64]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.set_Capacity, X0, X1
	010 Return 
	011 Call 0x1C17F20

Method: SpatialSys.ObservableState.IStateObject SpatialSys.ObservableState.IStateList.get_Item(System.Int32 index)

Disassembly:
	0x02610CE4 LDR X1, [X8 + 0x180]
	0x02610CE8 BL 0x237B728
	0x02610CEC CBZ X22, 0x2611000
	0x02610CF0 ADRP X8, 0x1B0D000
	0x02610CF4 LDR X8, [X8 + 0x370]
	0x02610CF8 STR X19, [X22 + 0x10]
	0x02610CFC LDR X0, [X8]
	0x02610D00 BL 0x1C16F10
	0x02610D04 MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+40]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.get_Item, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x02610D08 MOV X19, X0
	0x02610D0C BL 0x35AE904
	0x02610D10 LDR X8, [X22 + 0x10]
	0x02610D14 LDR X20, [X20 + 0x40]
	0x02610D18 CBZ X8, 0x2610D70
	0x02610D1C LDR X8, [X21 + 0x20]
	0x02610D20 LDR X8, [X8 + 0xC0]
	0x02610D24 LDR X0, [X8 + 0x190]
	0x02610D28 LDRB W8, [X0 + 0x135]
	0x02610D2C TBNZ X8, 0x0, 0x2610D34
	0x02610D30 BL 0x1C5C684
	0x02610D34 BL 0x1C16F10
	0x02610D38 LDR X8, [X21 + 0x20]
	0x02610D3C MOV X1, X22
	0x02610D40 MOV X24, X0
	0x02610D44 LDR X8, [X8 + 0xC0]
	0x02610D48 LDR X2, [X8 + 0x188]
	0x02610D4C LDR X3, [X8 + 0x198]
	0x02610D50 BL 0x2D2F428
	0x02610D54 LDR X8, [X21 + 0x20]
	0x02610D58 MOV X0, X20
	0x02610D5C MOV X1, X24
	0x02610D60 LDR X8, [X8 + 0xC0]
	0x02610D64 LDR X2, [X8 + 0x1A0]
	0x02610D68 BL 0x21DA490
	0x02610D6C MOV X20, X0
	0x02610D70 CBZ X20, 0x2611000
	0x02610D74 LDR X8, [X21 + 0x20]
	0x02610D78 LDR X8, [X8 + 0xC0]
	0x02610D7C LDR X1, [X8 + 0x170]
	0x02610D80 LDRB W8, [X1 + 0x135]
	0x02610D84 TBNZ X8, 0x0, 0x2610D94
	0x02610D88 MOV X0, X1
	0x02610D8C BL 0x1C5C684
	0x02610D90 MOV X1, X0
	0x02610D94 LDR X8, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1DCB000
	006 Move W8, [X21+18]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x1B0E000
	014 Move X0, [X0+784]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+18], W8
	018 Move X8, [X20+32]
	019 Move X21, 0x1B0E000
	020 Move X8, [X8+192]
	021 Move X0, [X8+8]
	022 Move W8, [X0+309]
	023 Move X21, [X21+784]
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {29}
	028 Call 0x1C5D684
	029 Call 0x1C17F10
	030 Move X8, [X20+32]
	031 Move X20, X0
	032 Move X8, [X8+192]
	033 Move X1, [X8+72]
	034 Call List`1<Object>..ctor, X0
	035 Move [X19+64], X20
	036 Move X0, [X21]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X0, X19
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X1, X31
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Call StateObjectBase..ctor, X0
	048 Return 

Method: System.Void .ctor(SpatialSys.ObservableState.IStateObject parent, System.String stateName)

Disassembly:
	0x02610D98 LDRH W9, [X8 + 0x12E]
	0x02610D9C CBZ X9, 0x2610DC0
	0x02610DA0 LDR X10, [X8 + 0xB0]
	0x02610DA4 ADD X10, X10, 0x8
	0x02610DA8 LDUR X11, [X10 - 0x8]
	0x02610DAC CMP X11, X1
	0x02610DB0 B.EQ 0x2610DD0
	0x02610DB4 SUBS X9, X9, 0x1
	0x02610DB8 ADD X10, X10, 0x10
	0x02610DBC B.NE 0x2610DA8
	0x02610DC0 MOV X0, X20
	0x02610DC4 MOV W2, W31
	0x02610DC8 BL 0x1C5C788
	0x02610DCC B 0x2610DDC
	0x02610DD0 LDRSW X9, [X10]
	0x02610DD4 ADD X8, X8, X9, 0x4, LSL
	0x02610DD8 ADD X0, X8, 0x138
	0x02610DDC LDP X8, X1, [X0]
	0x02610DE0 ADRP X26, 0x1AE3000
	0x02610DE4 LDR X26, [X26 + 0xE00]
	0x02610DE8 MOV X0, X20
	0x02610DEC BLR X8
	0x02610DF0 MOV X20, X0
	0x02610DF4 CBZ X0, 0x2611004
	0x02610DF8 ADRP X27, 0x1AE3000
	0x02610DFC ADRP X28, 0x1AE4000
	0x02610E00 LDR X27, [X27 + 0xE18]
	0x02610E04 LDR X28, [X28 + 0x1B0]
	0x02610E08 AND W23, W23, 0x1
	0x02610E0C LDR X8, [X20]
	0x02610E10 LDR X1, [X27]
	0x02610E14 LDRH W9, [X8 + 0x12E]
	0x02610E18 CBZ X9, 0x2610E3C
	0x02610E1C LDR X10, [X8 + 0xB0]
	0x02610E20 ADD X10, X10, 0x8
	0x02610E24 LDUR X11, [X10 - 0x8]
	0x02610E28 CMP X11, X1
	0x02610E2C B.EQ 0x2610E4C
	0x02610E30 SUBS X9, X9, 0x1
	0x02610E34 ADD X10, X10, 0x10
	0x02610E38 B.NE 0x2610E24
	0x02610E3C MOV X0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x1DCB000
	008 Move W8, [X23+19]
	009 Move X22, X3
	010 Move X19, X2
	011 Move X20, X1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x1B0E000
	018 Move X0, [X0+784]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+19], W8
	022 Move X8, [X22+32]
	023 Move X23, 0x1B0E000
	024 Move X8, [X8+192]
	025 Move X0, [X8+8]
	026 Move W8, [X0+309]
	027 Move X23, [X23+784]
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {33}
	032 Call 0x1C5D684
	033 Call 0x1C17F10
	034 Move X8, [X22+32]
	035 Move X22, X0
	036 Move X8, [X8+192]
	037 Move X1, [X8+72]
	038 Call List`1<Object>..ctor, X0
	039 Move [X21+64], X22
	040 Move X0, [X23]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X0, X21
	046 Move X1, X20
	047 Move X2, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X3, X31
	053 Move X30, [X31+48]
	054 Move X23, [X31+56]
	055 Call StateObjectBase..ctor, X0, X1, X2
	056 Return 

Method: System.Void ApplyOperation(SpatialSys.ObservableState.IStateOperation operation)

Disassembly:
	0x02610E40 MOV W2, W31
	0x02610E44 BL 0x1C5C788
	0x02610E48 B 0x2610E58
	0x02610E4C LDRSW X9, [X10]
	0x02610E50 ADD X8, X8, X9, 0x4, LSL
	0x02610E54 ADD X0, X8, 0x138
	0x02610E58 LDP X8, X1, [X0]
	0x02610E5C MOV X0, X20
	0x02610E60 BLR X8
	0x02610E64 TBZ X0, 0x0, 0x2610F6C
	0x02610E68 LDR X8, [X21 + 0x20]
	0x02610E6C LDR X8, [X8 + 0xC0]
	0x02610E70 LDR X1, [X8 + 0x110]
	0x02610E74 LDRB W8, [X1 + 0x135]
	0x02610E78 TBNZ X8, 0x0, 0x2610E88
	0x02610E7C MOV X0, X1
	0x02610E80 BL 0x1C5C684
	0x02610E84 MOV X1, X0
	0x02610E88 LDR X8, [X20]
	0x02610E8C LDRH W9, [X8 + 0x12E]
	0x02610E90 CBZ X9, 0x2610EB4
	0x02610E94 LDR X10, [X8 + 0xB0]
	0x02610E98 ADD X10, X10, 0x8
	0x02610E9C LDUR X11, [X10 - 0x8]
	0x02610EA0 CMP X11, X1
	0x02610EA4 B.EQ 0x2610EC4
	0x02610EA8 SUBS X9, X9, 0x1
	0x02610EAC ADD X10, X10, 0x10
	0x02610EB0 B.NE 0x2610E9C
	0x02610EB4 MOV X0, X20
	0x02610EB8 MOV W2, W31
	0x02610EBC BL 0x1C5C788
	0x02610EC0 B 0x2610ED0
	0x02610EC4 LDRSW X9, [X10]
	0x02610EC8 ADD X8, X8, X9, 0x4, LSL
	0x02610ECC ADD X0, X8, 0x138
	0x02610ED0 LDP X8, X1, [X0]
	0x02610ED4 MOV X0, X20
	0x02610ED8 BLR X8
	0x02610EDC MOV X24, X0
	0x02610EE0 CBZ X0, 0x2610FF8
	0x02610EE4 LDR X8, [X24]
	0x02610EE8 LDR X25, [X22 + 0x10]
	0x02610EEC LDR X1, [X28]
	0x02610EF0 LDRH W9, [X8 + 0x12E]
	0x02610EF4 CBZ X9, 0x2610F18
	0x02610EF8 LDR X10, [X8 + 0xB0]
	0x02610EFC ADD X10, X10, 0x8
	0x02610F00 LDUR X11, [X10 - 0x8]
	0x02610F04 CMP X11, X1
	0x02610F08 B.EQ 0x2610F28
	0x02610F0C SUBS X9, X9, 0x1
	0x02610F10 ADD X10, X10, 0x10
	0x02610F14 B.NE 0x2610F00
	0x02610F18 MOVZ W2, 0x12
	0x02610F1C MOV X0, X24
	0x02610F20 BL 0x1C5C788
	0x02610F24 B 0x2610F38
	0x02610F28 LDR W9, [X10]
	0x02610F2C ADD W9, W9, 0x12
	0x02610F30 ADD X8, X8, W9, 0x4, SXTW
	0x02610F34 ADD X0, X8, 0x138
	0x02610F38 LDP X8, X3, [X0]
	0x02610F3C MOV X0, X24
	0x02610F40 MOV X1, X25
	0x02610F44 MOV W2, W23
	0x02610F48 BLR X8
	0x02610F4C MOV X1, X0
	0x02610F50 CBZ X19, 0x2610FFC
	0x02610F54 LDR X8, [X19]
	0x02610F58 LDR X9, [X8 + 0x288]
	0x02610F5C LDR X2, [X8 + 0x290]
	0x02610F60 MOV X0, X19
	0x02610F64 BLR X9
	0x02610F68 B 0x2610E0C
	0x02610F6C MOV X21, X31
	0x02610F70 MOVZ W22, 0x6
	0x02610F74 CBZ X20, 0x2610FD0
	0x02610F78 LDR X8, [X20]
	0x02610F7C LDR X1, [X26]
	0x02610F80 LDRH W9, [X8 + 0x12E]
	0x02610F84 CBZ X9, 0x2610FA8
	0x02610F88 LDR X10, [X8 + 0xB0]
	0x02610F8C ADD X10, X10, 0x8
	0x02610F90 LDUR X11, [X10 - 0x8]
	0x02610F94 CMP X11, X1
	0x02610F98 B.EQ 0x2610FB8
	0x02610F9C SUBS X9, X9, 0x1
	0x02610FA0 ADD X10, X10, 0x10
	0x02610FA4 B.NE 0x2610F90
	0x02610FA8 MOV X0, X20
	0x02610FAC MOV W2, W31
	0x02610FB0 BL 0x1C5C788
	0x02610FB4 B 0x2610FC4
	0x02610FB8 LDRSW X9, [X10]
	0x02610FBC ADD X8, X8, X9, 0x4, LSL
	0x02610FC0 ADD X0, X8, 0x138
	0x02610FC4 LDP X8, X1, [X0]
	0x02610FC8 MOV X0, X20
	0x02610FCC BLR X8
	0x02610FD0 CBNZ X21, 0x2611008
	0x02610FD4 CMP W22, 0x6
	0x02610FD8 MOV X0, X19
	0x02610FDC LDP X20, X19, [X31 + 0x50]
	0x02610FE0 LDP X22, X21, [X31 + 0x40]
	0x02610FE4 LDP X24, X23, [X31 + 0x30]
	0x02610FE8 LDP X26, X25, [X31 + 0x20]
	0x02610FEC LDP X28, X27, [X31 + 0x10]
	0x02610FF0 LDR X30, [X31], #0x60
	0x02610FF4 RET
	0x02610FF8 BL 0x1C16F20
	0x02610FFC BL 0x1C16F20
	0x02611000 BL 0x1C16F20
	0x02611004 BL 0x1C16F20
	0x02611008 MOV X0, X21
	0x0261100C BL 0x1C16F18
	0x02611010 B 0x2611024
	0x02611014 B 0x2611024
	0x02611018 B 0x2611024
	0x0261101C B 0x2611024
	0x02611020 B 0x2611024
	0x02611024 MOV X22, X0
	0x02611028 CMP W1, 0x1
	0x0261102C B.NE 0x261104C
	0x02611030 MOV X0, X22
	0x02611034 BL 0x3EB1AD0
	0x02611038 LDR X21, [X0]
	0x0261103C BL 0x3EB1AE0
	0x02611040 MOV W22, W31
	0x02611044 CBNZ X20, 0x2610F78
	0x02611048 B 0x2610FD0
	0x0261104C MOV X21, X31
	0x02611050 B 0x2611058
	0x02611054 MOV X22, X0
	0x02611058 CBZ X20, 0x26110B4
	0x0261105C LDR X8, [X20]
	0x02611060 LDR X1, [X26]
	0x02611064 LDRH W9, [X8 + 0x12E]
	0x02611068 CBZ X9, 0x261108C
	0x0261106C LDR X10, [X8 + 0xB0]
	0x02611070 ADD X10, X10, 0x8
	0x02611074 LDUR X11, [X10 - 0x8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1DCB000
	007 Move W8, [X22+20]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x1AE4000
	016 Move X0, [X0+1872]
	017 Call 0x1C17CF4
	018 Move X0, 0x1B0E000
	019 Move X0, [X0+856]
	020 Call 0x1C17CF4
	021 Move X0, 0x1B0E000
	022 Move X0, [X0+864]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+20], W8
	026 Compare X20, 0
	027 JumpIfEqual {108}
	028 Move X10, 0x1AE4000
	029 Move X8, [X20]
	030 Move X10, [X10+1872]
	031 NotImplemented "Instruction LDRH not yet implemented."
	032 Move X1, [X10]
	033 Compare X9, 0
	034 JumpIfEqual {41}
	035 Move X10, [X8+176]
	036 Add X10, X10, 8
	037 NotImplemented "Instruction LDUR not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Subtract X9, X9, 1
	040 Add X10, X10, 16
	041 Move W2, 2
	042 Move X0, X20
	043 Call 0x1C5D788
	044 Move W9, [X10]
	045 Add W9, W9, 2
	046 Add X8, X8, W9
	047 Add X0, X8, 312
	048 Move X8, [X0]
	049 Move X1, [X0+8]
	050 Move X0, X20
	051 NotImplemented "Instruction BLR not yet implemented."
	052 And W8, W0, 255
	053 NotImplemented "Instruction CMP not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X8, 0x1B0E000
	057 Move X8, [X8+864]
	058 Move X9, [X20]
	059 Move X8, [X8]
	060 Move W11, [X9+304]
	061 Move W10, [X8+304]
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X9, [X9+200]
	064 Add X9, X9, X10
	065 NotImplemented "Instruction LDUR not yet implemented."
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move X8, [X19+32]
	068 Move W1, [X20+28]
	069 Move X0, X21
	070 Move X20, [X31+32]
	071 Move X19, [X31+40]
	072 Move X8, [X8+192]
	073 Move X22, [X31+16]
	074 Move X21, [X31+24]
	075 Move X2, [X8+80]
	076 Move X30, [X31+48]
	077 Call 0x2611164, X0, X1
	078 Return 
	079 Move X20, [X31+32]
	080 Move X19, [X31+40]
	081 Move X22, [X31+16]
	082 Move X21, [X31+24]
	083 Move X30, [X31+48]
	084 Return 
	085 Move X8, 0x1B0E000
	086 Move X8, [X8+864]
	087 Move X9, [X20]
	088 Move X8, [X8]
	089 Move W11, [X9+304]
	090 Move W10, [X8+304]
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move X9, [X9+200]
	093 Add X9, X9, X10
	094 NotImplemented "Instruction LDUR not yet implemented."
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move X8, [X19+32]
	097 Move W1, [X20+28]
	098 Move X0, X21
	099 Move X20, [X31+32]
	100 Move X19, [X31+40]
	101 Move X8, [X8+192]
	102 Move X22, [X31+16]
	103 Move X21, [X31+24]
	104 Move X2, [X8+88]
	105 Move X30, [X31+48]
	106 Call 0x2611A08, X0, X1
	107 Return 
	108 Call 0x1C17F20
	109 Move X0, X20
	110 Call 0x19913C0
	111 Move X0, 0x1AE4000
	112 Move X0, [X0+1872]
	113 Call 0x1C17D08
	114 Move X1, X0
	115 Move W0, 2
	116 Move X2, X20
	117 Call 0x19973F0
	118 Move [X31+12], W0
	119 Move X0, 0x1B0D000
	120 Move X0, [X0+808]
	121 Call 0x1C17D08
	122 Add X1, X31, 12
	123 Call 0x1C17E04
	124 Move X20, X0
	125 Move X0, 0x1B0D000
	126 Move X0, [X0+816]
	127 Call 0x1C17D08
	128 Move X21, X0
	129 Move X0, 0x1B0D000
	130 Move X0, [X0+872]
	131 Call 0x1C17D08
	132 Move X2, X0
	133 Move X0, X21
	134 Move X1, X20
	135 Move X3, X31
	136 Call String.Format, X0, X1, X2
	137 Move X20, X0
	138 Move X0, 0x1AE3000
	139 Move X0, [X0+1456]
	140 Call 0x1C17D08
	141 Call 0x1C17F10
	142 Move X1, X20
	143 Move X2, X31
	144 Move X21, X0
	145 Call InvalidOperationException..ctor, X0, X1
	146 Move X0, X21
	147 Move X1, X19
	148 Call 0x1C17DEC

Method: T Add()

Disassembly:
	0x02611078 CMP X11, X1
	0x0261107C B.EQ 0x261109C
	0x02611080 SUBS X9, X9, 0x1
	0x02611084 ADD X10, X10, 0x10
	0x02611088 B.NE 0x2611074
	0x0261108C MOV X0, X20
	0x02611090 MOV W2, W31
	0x02611094 BL 0x1C5C788
	0x02611098 B 0x26110A8
	0x0261109C LDRSW X9, [X10]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+64]
	003 Compare X8, 0
	004 JumpIfEqual {12}
	005 Move X9, [X1+32]
	006 Move W1, [X8+24]
	007 Move X9, [X9+192]
	008 Move X2, [X9+80]
	009 Move X30, [X31+16]
	010 Call 0x2611164, X0, X1
	011 Return X0
	012 Call 0x1C17F20

Method: System.Void AddMany(System.Int32 count)

Disassembly:
	0x026110A0 ADD X8, X8, X9, 0x4, LSL
	0x026110A4 ADD X0, X8, 0x138
	0x026110A8 LDP X8, X1, [X0]
	0x026110AC MOV X0, X20
	0x026110B0 BLR X8
	0x026110B4 CBNZ X21, 0x26110C0
	0x026110B8 MOV X0, X22
	0x026110BC BL 0x1D2C690
	0x026110C0 MOV X0, X21
	0x026110C4 BL 0x1C16F18
	0x026110C8 BL 0x1990590
	0x026110CC SUB X31, X31, 0xE0
	0x026110D0 STP X30, X25, [X31 + 0xA0]
	0x026110D4 STP X24, X23, [X31 + 0xB0]
	0x026110D8 STP X22, X21, [X31 + 0xC0]
	0x026110DC STP X20, X19, [X31 + 0xD0]
	0x026110E0 ADRP X22, 0x1DC9000
	0x026110E4 LDRB W8, [X22 + 0x19]
	0x026110E8 MOV X19, X2
	0x026110EC MOV X21, X1
	0x026110F0 MOV X20, X0
	0x026110F4 TBNZ X8, 0x0, 0x2611118
	0x026110F8 ADRP X0, 0x1AE3000
	0x026110FC LDR X0, [X0 + 0x1B0]
	0x02611100 BL 0x1C16CF4
	0x02611104 ADRP X0, 0x1AE3000
	0x02611108 LDR X0, [X0 + 0x460]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X0+64]
	007 Compare X8, 0
	008 JumpIfEqual {30}
	009 Move W20, W1
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move X9, [X2+32]
	012 Move W21, [X8+24]
	013 Move X19, X0
	014 Move X9, [X9+192]
	015 Move X22, [X9+96]
	016 Move X8, [X22+32]
	017 Move X0, X19
	018 Move W1, W21
	019 Move X8, [X8+192]
	020 Move X2, [X8+80]
	021 Call 0x2611164, X0, X1
	022 Subtract W20, W20, 1
	023 Add W21, W21, 1
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Return 
	030 Call 0x1C17F20

Method: System.Void InsertMany(System.Int32 index, System.Int32 count)

Disassembly:
	0x0261110C BL 0x1C16CF4
	0x02611110 MOVZ W8, 0x1
	0x02611114 STRB W8, [X22 + 0x19]
	0x02611118 MOVI V0.2D, 0x0
	0x0261111C STR X31, [X31 + 0x90]
	0x02611120 STP V0, V0, [X31 + 0x70]
	0x02611124 STP V0, V0, [X31 + 0x50]
	0x02611128 CBZ X21, 0x2611330
	0x0261112C LDR X8, [X21]
	0x02611130 MOV X0, X21
	0x02611134 LDR X9, [X8 + 0x238]
	0x02611138 LDR X1, [X8 + 0x240]
	0x0261113C BLR X9
	0x02611140 TBZ X0, 0x0, 0x2611334
	0x02611144 LDR X8, [X21]
	0x02611148 MOV X0, X21
	0x0261114C LDP X9, X1, [X8 + 0x1E8]
	0x02611150 BLR X9
	0x02611154 LDR X8, [X20 + 0x40]
	0x02611158 CBZ X8, 0x2611330
	0x0261115C LDR W8, [X8 + 0x18]
	0x02611160 CMP W0, W8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X19, X3
	008 Move W20, W2
	009 Move W21, W1
	010 Move X22, X0
	011 Move X8, [X19+32]
	012 Move X0, X22
	013 Move W1, W21
	014 Move X8, [X8+192]
	015 Move X2, [X8+80]
	016 Call 0x2611164, X0, X1
	017 Subtract W20, W20, 1
	018 Add W21, W21, 1
	019 Move X20, [X31+32]
	020 Move X19, [X31+40]
	021 Move X22, [X31+16]
	022 Move X21, [X31+24]
	023 Move X30, [X31+48]
	024 Return 

Method: T Insert(System.Int32 index)

Disassembly:
	0x02611164 B.GE 0x26111DC
	0x02611168 LDR X8, [X21]
	0x0261116C MOV X0, X21
	0x02611170 LDP X9, X1, [X8 + 0x1E8]
	0x02611174 BLR X9
	0x02611178 LDR X8, [X20 + 0x40]
	0x0261117C CBZ X8, 0x2611330
	0x02611180 LDR X9, [X21]
	0x02611184 LDR W24, [X8 + 0x18]
	0x02611188 MOV W22, W0
	0x0261118C MOV X0, X21
	0x02611190 LDP X8, X1, [X9 + 0x1E8]
	0x02611194 BLR X8
	0x02611198 ORN W8, W31, W0, 0x0
	0x0261119C ADDS W31, W24, W8
	0x026111A0 B.MI 0x26111DC
	0x026111A4 LDR X8, [X19 + 0x20]
	0x026111A8 SUB W24, W24, W0
	0x026111AC SUB W22, W22, 0x1
	0x026111B0 LDR X8, [X8 + 0xC0]
	0x026111B4 LDR X23, [X8 + 0x1B8]
	0x026111B8 LDR X8, [X23 + 0x20]
	0x026111BC ADD W1, W22, W24
	0x026111C0 MOV X0, X20
	0x026111C4 LDR X8, [X8 + 0xC0]
	0x026111C8 LDR X2, [X8 + 0x58]
	0x026111CC BL 0x2610A08
	0x026111D0 SUB W24, W24, 0x1
	0x026111D4 CMP W24, 0x0
	0x026111D8 B.GT 0x26111B8
	0x026111DC LDR X8, [X21]
	0x026111E0 MOV X0, X21
	0x026111E4 LDR X9, [X8 + 0x338]
	0x026111E8 LDR X1, [X8 + 0x340]
	0x026111EC ADD X8, X31, 0x8
	0x026111F0 BLR X9
	0x026111F4 ADD X0, X31, 0x50
	0x026111F8 ADD X1, X31, 0x8
	0x026111FC MOVZ W2, 0x48
	0x02611200 BL 0x3EB1AC0
	0x02611204 ADD X0, X31, 0x50
	0x02611208 MOV X1, X31
	0x0261120C BL 0x35B4900
	0x02611210 TBZ X0, 0x0, 0x2611318
	0x02611214 ADRP X24, 0x1AE3000
	0x02611218 ADRP X25, 0x1AE3000
	0x0261121C LDR X24, [X24 + 0x460]
	0x02611220 LDR X25, [X25 + 0x1B0]
	0x02611224 MOV W21, W31
	0x02611228 ADD X0, X31, 0x50
	0x0261122C MOV X1, X31
	0x02611230 BL 0x35B4830
	0x02611234 MOV X22, X0
	0x02611238 LDR X0, [X24]
	0x0261123C MOV X23, X1
	0x02611240 LDR W8, [X0 + 0xE0]
	0x02611244 CBNZ W8, 0x261124C
	0x02611248 BL 0x1C16DFC
	0x0261124C MOV X0, X22
	0x02611250 MOV X1, X23
	0x02611254 MOV X2, X31
	0x02611258 BL 0x35ADA20
	0x0261125C LDR X8, [X20 + 0x40]
	0x02611260 CBZ X8, 0x2611330
	0x02611264 LDR X9, [X19 + 0x20]
	0x02611268 LDR W10, [X8 + 0x18]
	0x0261126C MOV X22, X0
	0x02611270 LDR X9, [X9 + 0xC0]
	0x02611274 CMP W21, W10
	0x02611278 B.GE 0x2611290
	0x0261127C LDR X2, [X9 + 0x28]
	0x02611280 MOV X0, X8
	0x02611284 MOV W1, W21
	0x02611288 BL 0x301BCCC
	0x0261128C B 0x261129C
	0x02611290 LDR X1, [X9 + 0x1C0]
	0x02611294 MOV X0, X20
	0x02611298 BL 0x2610078
	0x0261129C MOV X23, X0
	0x026112A0 CBZ X0, 0x2611330
	0x026112A4 LDR X8, [X23]
	0x026112A8 LDR X1, [X25]
	0x026112AC LDRH W9, [X8 + 0x12E]
	0x026112B0 CBZ X9, 0x26112D4
	0x026112B4 LDR X10, [X8 + 0xB0]
	0x026112B8 ADD X10, X10, 0x8
	0x026112BC LDUR X11, [X10 - 0x8]
	0x026112C0 CMP X11, X1
	0x026112C4 B.EQ 0x26112E4
	0x026112C8 SUBS X9, X9, 0x1
	0x026112CC ADD X10, X10, 0x10
	0x026112D0 B.NE 0x26112BC
	0x026112D4 MOVZ W2, 0x13
	0x026112D8 MOV X0, X23
	0x026112DC BL 0x1C5C788
	0x026112E0 B 0x26112F4
	0x026112E4 LDR W9, [X10]
	0x026112E8 ADD W9, W9, 0x13
	0x026112EC ADD X8, X8, W9, 0x4, SXTW
	0x026112F0 ADD X0, X8, 0x138
	0x026112F4 LDP X8, X2, [X0]
	0x026112F8 MOV X0, X23
	0x026112FC MOV X1, X22
	0x02611300 BLR X8
	0x02611304 ADD X0, X31, 0x50
	0x02611308 MOV X1, X31
	0x0261130C ADD W21, W21, 0x1
	0x02611310 BL 0x35B4900
	0x02611314 TBNZ X0, 0x0, 0x2611228
	0x02611318 LDP X20, X19, [X31 + 0xD0]
	0x0261131C LDP X22, X21, [X31 + 0xC0]
	0x02611320 LDP X24, X23, [X31 + 0xB0]
	0x02611324 LDP X30, X25, [X31 + 0xA0]
	0x02611328 ADD X31, X31, 0xE0
	0x0261132C RET
	0x02611330 BL 0x1C16F20
	0x02611334 ADRP X0, 0x1AEA000
	0x02611338 LDR X0, [X0 + 0xC08]
	0x0261133C BL 0x1C16D08
	0x02611340 BL 0x1C16F10
	0x02611344 MOV X20, X0
	0x02611348 ADRP X0, 0x1B0C000
	0x0261134C LDR X0, [X0 + 0x378]
	0x02611350 BL 0x1C16D08
	0x02611354 MOV X1, X0
	0x02611358 MOV X0, X20
	0x0261135C MOV X2, X31
	0x02611360 BL 0x337B498
	0x02611364 MOV X0, X20
	0x02611368 MOV X1, X19
	0x0261136C BL 0x1C16DEC
	0x02611370 STP X30, X23, [X31 - 0x30]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x1DCA000
	007 Move W8, [X20+21]
	008 Move X22, X2
	009 Move W21, W1
	010 Move X19, X0
	011 Move [X31+12], W1
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x1AE3000
	017 Move X0, [X0+1704]
	018 Call 0x1C17CF4
	019 Move X0, 0x1B0D000
	020 Move X0, [X0+792]
	021 Call 0x1C17CF4
	022 Move X0, 0x1B0D000
	023 Move X0, [X0+784]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+21], W8
	027 Move X8, [X22+32]
	028 Move X8, [X8+192]
	029 Move X0, [X8+104]
	030 Call Activator.CreateInstance
	031 Move X8, [X19+64]
	032 Compare X8, 0
	033 JumpIfEqual {139}
	034 Move X9, [X22+32]
	035 Move X20, X0
	036 Move X0, X8
	037 Move W1, W21
	038 Move X9, [X9+192]
	039 Move X2, X20
	040 Move X3, [X9+112]
	041 Call List`1<Object>.Insert, X0, X1, X2
	042 Move W8, 1
	043 Move [X19+32], W8
	044 Compare X20, 0
	045 JumpIfEqual {136}
	046 Move X8, 0x1B0D000
	047 Move X8, [X8+784]
	048 Move X9, [X20]
	049 Move X8, [X8]
	050 Move W11, [X9+304]
	051 Move W10, [X8+304]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X9, [X9+200]
	054 Add X9, X9, X10
	055 NotImplemented "Instruction LDUR not yet implemented."
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Add X0, X31, 12
	058 Move X1, X31
	059 Call Int32.ToString, X0
	060 Move X8, [X20]
	061 Move W3, [X19+57]
	062 Move X2, X0
	063 Move X0, X20
	064 Move X9, [X8+872]
	065 Move X4, [X8+880]
	066 Move X1, X19
	067 NotImplemented "Instruction BLR not yet implemented."
	068 Move X8, [X20]
	069 Move X0, X20
	070 Move X9, [X8+888]
	071 Move X1, [X8+896]
	072 NotImplemented "Instruction BLR not yet implemented."
	073 Move X21, [X19+48]
	074 Compare X21, 0
	075 JumpIfEqual {139}
	076 Move X10, 0x1B0D000
	077 Move X8, [X21]
	078 Move X10, [X10+792]
	079 NotImplemented "Instruction LDRH not yet implemented."
	080 Move X1, [X10]
	081 Compare X9, 0
	082 JumpIfEqual {89}
	083 Move X10, [X8+176]
	084 Add X10, X10, 8
	085 NotImplemented "Instruction LDUR not yet implemented."
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Subtract X9, X9, 1
	088 Add X10, X10, 16
	089 Move X0, X21
	090 Move W2, W31
	091 Call 0x1C5D788
	092 NotImplemented "Instruction LDRSW not yet implemented."
	093 Add X8, X8, X9
	094 Add X0, X8, 312
	095 Move X8, [X0]
	096 Move X1, [X0+8]
	097 Move X0, X21
	098 NotImplemented "Instruction BLR not yet implemented."
	099 Compare X0, 0
	100 JumpIfEqual {139}
	101 Move X10, 0x1AE3000
	102 Move X8, [X0]
	103 Move X10, [X10+1704]
	104 Move W22, [X31+12]
	105 Move X21, X0
	106 NotImplemented "Instruction LDRH not yet implemented."
	107 Move X1, [X10]
	108 Compare X9, 0
	109 JumpIfEqual {116}
	110 Move X10, [X8+176]
	111 Add X10, X10, 8
	112 NotImplemented "Instruction LDUR not yet implemented."
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Subtract X9, X9, 1
	115 Add X10, X10, 16
	116 Move W2, 17
	117 Move X0, X21
	118 Call 0x1C5D788
	119 Move W9, [X10]
	120 Add W9, W9, 17
	121 Add X8, X8, W9
	122 Add X0, X8, 312
	123 Move X8, [X0]
	124 Move X3, [X0+8]
	125 Move X0, X21
	126 Move X1, X19
	127 Move W2, W22
	128 NotImplemented "Instruction BLR not yet implemented."
	129 Move X0, X20
	130 Move X20, [X31+32]
	131 Move X19, [X31+40]
	132 Move X22, [X31+16]
	133 Move X21, [X31+24]
	134 Move X30, [X31+48]
	135 Return X0
	136 Add X0, X31, 12
	137 Move X1, X31
	138 Call Int32.ToString, X0
	139 Call 0x1C17F20

Method: System.Int32 BinarySearch(T item, System.Collections.Generic.IComparer`1<T> comparer)

Disassembly:
	0x02611374 STP X22, X21, [X31 + 0x10]
	0x02611378 STP X20, X19, [X31 + 0x20]
	0x0261137C ADRP X23, 0x1DC9000
	0x02611380 LDRB W8, [X23 + 0x1A]
	0x02611384 MOV X20, X3
	0x02611388 MOV X19, X2
	0x0261138C MOV X22, X1
	0x02611390 MOV X21, X0
	0x02611394 TBNZ X8, 0x0, 0x26113AC

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X3+32]
	006 Move X8, [X8+192]
	007 Move X3, [X8+128]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.BinarySearch, X0, X1, X2
	010 Return X0
	011 Call 0x1C17F20

Method: System.Int32 BinarySearch(System.Int32 index, System.Int32 count, T item, System.Collections.Generic.IComparer`1<T> comparer)

Disassembly:
	0x02611398 ADRP X0, 0x1AE2000
	0x0261139C LDR X0, [X0 + 0x758]
	0x026113A0 BL 0x1C16CF4
	0x026113A4 MOVZ W8, 0x1
	0x026113A8 STRB W8, [X23 + 0x1A]
	0x026113AC CBZ X22, 0x261142C
	0x026113B0 ADRP X8, 0x1AE2000
	0x026113B4 LDR X8, [X8 + 0x758]
	0x026113B8 LDR X9, [X22]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X5+32]
	006 Move X8, [X8+192]
	007 Move X5, [X8+136]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.BinarySearch, X0, X1, X2, X3, X4
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void Clear()

Disassembly:
	0x026113BC MOV X0, X22
	0x026113C0 LDR X1, [X8]
	0x026113C4 LDR X8, [X9 + 0x40]
	0x026113C8 LDR X9, [X1 + 0x40]
	0x026113CC CMP X8, X9
	0x026113D0 B.NE 0x2611430
	0x026113D4 BL 0x1C16E08
	0x026113D8 LDR W1, [X0]
	0x026113DC TBNZ X1, 0x1F, 0x261140C
	0x026113E0 LDR X0, [X21 + 0x40]
	0x026113E4 CBZ X0, 0x261142C
	0x026113E8 LDR W8, [X0 + 0x18]
	0x026113EC CMP W1, W8
	0x026113F0 B.GE 0x261140C
	0x026113F4 LDR X8, [X20 + 0x20]
	0x026113F8 LDR X8, [X8 + 0xC0]
	0x026113FC LDR X2, [X8 + 0x28]
	0x02611400 BL 0x301BCCC
	0x02611404 MOVZ W8, 0x1
	0x02611408 B 0x2611414
	0x0261140C MOV X0, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0+64]
	005 Compare X8, 0
	006 JumpIfEqual {20}
	007 Move X19, X0
	008 Move X20, X1
	009 Move W8, [X8+24]
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move X9, [X20+32]
	012 Subtract W1, W8, 1
	013 Move X0, X19
	014 Move X9, [X9+192]
	015 Move X2, [X9+88]
	016 Call 0x2611A08, X0, X1
	017 Move X8, [X19+64]
	018 Compare X8, 0
	019 JumpIfNotEqual {9}
	020 Call 0x1C17F20
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return 

Method: System.Boolean Contains(T item)

Disassembly:
	0x02611410 MOV W8, W31
	0x02611414 STR X0, [X19]
	0x02611418 LDP X20, X19, [X31 + 0x20]
	0x0261141C LDP X22, X21, [X31 + 0x10]
	0x02611420 MOV W0, W8
	0x02611424 LDP X30, X23, [X31], #0x30
	0x02611428 RET
	0x0261142C BL 0x1C16F20
	0x02611430 BL 0x1C171E0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+144]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.Contains, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: System.Boolean Exists(System.Predicate`1<T> match)

Disassembly:
	0x02611434 STP X30, X19, [X31 - 0x10]!
	0x02611438 MOV X19, X2
	0x0261143C TBNZ X1, 0x1F, 0x261146C
	0x02611440 LDR X0, [X0 + 0x40]
	0x02611444 CBZ X0, 0x2611484
	0x02611448 LDR W8, [X0 + 0x18]
	0x0261144C CMP W8, W1
	0x02611450 B.LE 0x261146C
	0x02611454 LDR X8, [X3 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+160]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.Exists, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: T Find(System.Predicate`1<T> match)

Disassembly:
	0x02611458 LDR X8, [X8 + 0xC0]
	0x0261145C LDR X2, [X8 + 0x28]
	0x02611460 BL 0x301BCCC
	0x02611464 MOVZ W8, 0x1
	0x02611468 B 0x2611474
	0x0261146C MOV X0, X31
	0x02611470 MOV W8, W31
	0x02611474 STR X0, [X19]
	0x02611478 MOV W0, W8

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+168]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.Find, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: System.Collections.Generic.List`1<T> FindAll(System.Predicate`1<T> match)

Disassembly:
	0x0261147C LDP X30, X19, [X31], #0x10
	0x02611480 RET
	0x02611484 BL 0x1C16F20
	0x02611488 LDR X8, [X2 + 0x20]
	0x0261148C LDR X8, [X8 + 0xC0]
	0x02611490 LDR X1, [X8 + 0x1D0]
	0x02611494 B 0x26103BC
	0x02611498 STP X30, X25, [X31 - 0x40]!
	0x0261149C STP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+176]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.FindAll, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: System.Int32 FindIndex(System.Int32 startIndex, System.Int32 count, System.Predicate`1<T> match)

Disassembly:
	0x026114A0 STP X22, X21, [X31 + 0x20]
	0x026114A4 STP X20, X19, [X31 + 0x30]
	0x026114A8 ADRP X22, 0x1DC9000
	0x026114AC LDRB W8, [X22 + 0x1B]
	0x026114B0 MOV X20, X2
	0x026114B4 MOV X19, X1
	0x026114B8 MOV X21, X0
	0x026114BC TBNZ X8, 0x0, 0x26114D4
	0x026114C0 ADRP X0, 0x1AE3000

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X4+32]
	006 Move X8, [X8+192]
	007 Move X4, [X8+184]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.FindIndex, X0, X1, X2, X3
	010 Return X0
	011 Call 0x1C17F20

Method: System.Int32 FindIndex(System.Int32 startIndex, System.Predicate`1<T> match)

Disassembly:
	0x026114C4 LDR X0, [X0 + 0x1B0]
	0x026114C8 BL 0x1C16CF4
	0x026114CC MOVZ W8, 0x1
	0x026114D0 STRB W8, [X22 + 0x1B]
	0x026114D4 LDR X8, [X20 + 0x20]
	0x026114D8 LDR X8, [X8 + 0xC0]
	0x026114DC LDR X1, [X8]
	0x026114E0 LDRB W8, [X1 + 0x135]
	0x026114E4 TBNZ X8, 0x0, 0x26114F4

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X3+32]
	006 Move X8, [X8+192]
	007 Move X3, [X8+192]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.FindIndex, X0, X1, X2
	010 Return X0
	011 Call 0x1C17F20

Method: System.Int32 FindIndex(System.Predicate`1<T> match)

Disassembly:
	0x026114E8 MOV X0, X1
	0x026114EC BL 0x1C5C684
	0x026114F0 MOV X1, X0
	0x026114F4 CBZ X19, 0x2611504
	0x026114F8 LDR X8, [X19]
	0x026114FC CMP X8, X1
	0x02611500 B.NE 0x26116BC
	0x02611504 LDR X8, [X21 + 0x40]
	0x02611508 CBZ X8, 0x26116A4

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+200]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.FindIndex, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: T FindLast(System.Predicate`1<T> match)

Disassembly:
	0x0261150C LDR X9, [X20 + 0x20]
	0x02611510 LDR W23, [X8 + 0x18]
	0x02611514 LDR X8, [X9 + 0xC0]
	0x02611518 CBZ W23, 0x2611574
	0x0261151C CBZ X19, 0x26116A4
	0x02611520 LDR X9, [X19 + 0x40]
	0x02611524 CBZ X9, 0x26116A4
	0x02611528 LDR W22, [X9 + 0x18]
	0x0261152C SUBS W24, W23, W22

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+208]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.FindLast, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: System.Int32 FindLastIndex(System.Int32 startIndex, System.Int32 count, System.Predicate`1<T> match)

Disassembly:
	0x02611530 B.GE 0x2611594
	0x02611534 ORN W9, W31, W23, 0x0
	0x02611538 ADDS W31, W22, W9
	0x0261153C B.MI 0x26115D8
	0x02611540 LDR X23, [X8 + 0x1B8]
	0x02611544 ADD W24, W9, 0x1
	0x02611548 LDR X8, [X23 + 0x20]
	0x0261154C SUB W22, W22, 0x1
	0x02611550 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X4+32]
	006 Move X8, [X8+192]
	007 Move X4, [X8+216]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.FindLastIndex, X0, X1, X2, X3
	010 Return X0
	011 Call 0x1C17F20

Method: System.Int32 FindLastIndex(System.Int32 startIndex, System.Predicate`1<T> match)

Disassembly:
	0x02611554 MOV W1, W22
	0x02611558 LDR X8, [X8 + 0xC0]
	0x0261155C LDR X2, [X8 + 0x58]
	0x02611560 BL 0x2610A08
	0x02611564 ADD W8, W24, W22
	0x02611568 CMP W8, 0x0
	0x0261156C B.GT 0x2611548
	0x02611570 B 0x26115D8
	0x02611574 CBZ X19, 0x26116A4

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X3+32]
	006 Move X8, [X8+192]
	007 Move X3, [X8+224]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.FindLastIndex, X0, X1, X2
	010 Return X0
	011 Call 0x1C17F20

Method: System.Int32 FindLastIndex(System.Predicate`1<T> match)

Disassembly:
	0x02611578 LDR X1, [X8 + 0x1D0]
	0x0261157C MOV X0, X19
	0x02611580 LDP X20, X19, [X31 + 0x30]
	0x02611584 LDP X22, X21, [X31 + 0x20]
	0x02611588 LDP X24, X23, [X31 + 0x10]
	0x0261158C LDP X30, X25, [X31], #0x40
	0x02611590 B 0x26103BC
	0x02611594 B.LE 0x26115D8
	0x02611598 CMP W24, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+232]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.FindLastIndex, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void ForEach(System.Action`1<T> action)

Disassembly:
	0x0261159C B.LT 0x26115D8
	0x026115A0 LDR X1, [X8 + 0x1C0]
	0x026115A4 MOV X0, X19
	0x026115A8 BL 0x2610078
	0x026115AC CMP W24, 0x1
	0x026115B0 B.EQ 0x26115D8
	0x026115B4 ORN W8, W31, W22, 0x0
	0x026115B8 ADD W22, W8, W23
	0x026115BC LDR X8, [X20 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+248]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.ForEach, X0, X1
	010 Return 
	011 Call 0x1C17F20

Method: System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()

Disassembly:
	0x026115C0 MOV X0, X19
	0x026115C4 LDR X8, [X8 + 0xC0]
	0x026115C8 LDR X1, [X8 + 0x1C0]
	0x026115CC BL 0x2610078
	0x026115D0 SUBS W22, W22, 0x1
	0x026115D4 B.NE 0x26115BC
	0x026115D8 LDR X0, [X21 + 0x40]
	0x026115DC CBZ X0, 0x26116A4
	0x026115E0 ADRP X25, 0x1AE3000
	0x026115E4 LDR X25, [X25 + 0x1B0]
	0x026115E8 MOV W22, W31
	0x026115EC LDR W8, [X0 + 0x18]
	0x026115F0 CMP W22, W8
	0x026115F4 B.GE 0x26116A8
	0x026115F8 LDR X8, [X20 + 0x20]
	0x026115FC MOV W1, W22
	0x02611600 LDR X8, [X8 + 0xC0]
	0x02611604 LDR X2, [X8 + 0x28]
	0x02611608 BL 0x301BCCC
	0x0261160C LDR X8, [X19 + 0x40]
	0x02611610 CBZ X8, 0x26116A4
	0x02611614 LDR X9, [X20 + 0x20]
	0x02611618 MOV X23, X0
	0x0261161C MOV X0, X8
	0x02611620 MOV W1, W22

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+64], X30
	003 Move [X31+72], X19
	004 Move X0, [X0+64]
	005 Compare X0, 0
	006 JumpIfEqual {28}
	007 Move X8, [X1+32]
	008 Move X19, X1
	009 Move X8, [X8+192]
	010 Move X1, [X8+256]
	011 Add X8, X31, 0
	012 Call List`1<Object>.GetEnumerator, X0
	013 Move X8, [X31+16]
	014 Move V0, [X31]
	015 Add X1, X31, 0
	016 Move [X31+48], X8
	017 Move [X31+2], V0
	018 Move [X31], V0
	019 Move [X31+16], X8
	020 Move X8, [X19+32]
	021 Move X8, [X8+192]
	022 Move X0, [X8+264]
	023 Call 0x1C17E04
	024 Move X30, [X31+64]
	025 Move X19, [X31+72]
	026 Add X31, X31, 80
	027 Return X0
	028 Call 0x1C17F20

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x02611624 LDR X9, [X9 + 0xC0]
	0x02611628 LDR X2, [X9 + 0x28]
	0x0261162C BL 0x301BCCC
	0x02611630 CBZ X23, 0x26116A4
	0x02611634 LDR X8, [X23]
	0x02611638 LDR X1, [X25]
	0x0261163C MOV X24, X0
	0x02611640 LDRH W9, [X8 + 0x12E]
	0x02611644 CBZ X9, 0x2611668
	0x02611648 LDR X10, [X8 + 0xB0]
	0x0261164C ADD X10, X10, 0x8
	0x02611650 LDUR X11, [X10 - 0x8]
	0x02611654 CMP X11, X1
	0x02611658 B.EQ 0x2611678
	0x0261165C SUBS X9, X9, 0x1
	0x02611660 ADD X10, X10, 0x10
	0x02611664 B.NE 0x2611650
	0x02611668 MOVZ W2, 0x18
	0x0261166C MOV X0, X23
	0x02611670 BL 0x1C5C788
	0x02611674 B 0x2611688
	0x02611678 LDR W9, [X10]
	0x0261167C ADD W9, W9, 0x18
	0x02611680 ADD X8, X8, W9, 0x4, SXTW
	0x02611684 ADD X0, X8, 0x138

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+64], X30
	003 Move [X31+72], X19
	004 Move X0, [X0+64]
	005 Compare X0, 0
	006 JumpIfEqual {28}
	007 Move X8, [X1+32]
	008 Move X19, X1
	009 Move X8, [X8+192]
	010 Move X1, [X8+256]
	011 Add X8, X31, 0
	012 Call List`1<Object>.GetEnumerator, X0
	013 Move X8, [X31+16]
	014 Move V0, [X31]
	015 Add X1, X31, 0
	016 Move [X31+48], X8
	017 Move [X31+2], V0
	018 Move [X31], V0
	019 Move [X31+16], X8
	020 Move X8, [X19+32]
	021 Move X8, [X8+192]
	022 Move X0, [X8+264]
	023 Call 0x1C17E04
	024 Move X30, [X31+64]
	025 Move X19, [X31+72]
	026 Add X31, X31, 80
	027 Return X0
	028 Call 0x1C17F20

Method: System.Collections.Generic.List`1<T> GetRange(System.Int32 index, System.Int32 count)

Disassembly:
	0x02611688 LDP X8, X2, [X0]
	0x0261168C MOV X0, X23
	0x02611690 MOV X1, X24
	0x02611694 BLR X8
	0x02611698 LDR X0, [X21 + 0x40]
	0x0261169C ADD W22, W22, 0x1
	0x026116A0 CBNZ X0, 0x26115EC
	0x026116A4 BL 0x1C16F20
	0x026116A8 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X3+32]
	006 Move X8, [X8+192]
	007 Move X3, [X8+280]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.GetRange, X0, X1, X2
	010 Return X0
	011 Call 0x1C17F20

Method: System.Int32 IndexOf(T item, System.Int32 index, System.Int32 count)

Disassembly:
	0x026116AC LDP X22, X21, [X31 + 0x20]
	0x026116B0 LDP X24, X23, [X31 + 0x10]
	0x026116B4 LDP X30, X25, [X31], #0x40
	0x026116B8 RET
	0x026116BC MOV X0, X19
	0x026116C0 BL 0x1C171E0
	0x026116C4 STR X30, [X31 - 0x30]!
	0x026116C8 STP X22, X21, [X31 + 0x10]
	0x026116CC STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X4+32]
	006 Move X8, [X8+192]
	007 Move X4, [X8+288]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.IndexOf, X0, X1, X2, X3
	010 Return X0
	011 Call 0x1C17F20

Method: System.Int32 IndexOf(T item, System.Int32 index)

Disassembly:
	0x026116D0 ADRP X21, 0x1DC9000
	0x026116D4 ADRP X22, 0x1B0B000
	0x026116D8 LDRB W8, [X21 + 0x1C]
	0x026116DC LDR X22, [X22 + 0xB58]
	0x026116E0 MOV X19, X2
	0x026116E4 MOV X20, X1
	0x026116E8 TBNZ X8, 0x0, 0x2611718
	0x026116EC ADRP X0, 0x1B0C000
	0x026116F0 LDR X0, [X0 + 0x380]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X3+32]
	006 Move X8, [X8+192]
	007 Move X3, [X8+296]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.IndexOf, X0, X1, X2
	010 Return X0
	011 Call 0x1C17F20

Method: System.Int32 IndexOf(T item)

Disassembly:
	0x026116F4 BL 0x1C16CF4
	0x026116F8 ADRP X0, 0x1B0B000
	0x026116FC LDR X0, [X0 + 0xB58]
	0x02611700 BL 0x1C16CF4
	0x02611704 ADRP X0, 0x1AE2000
	0x02611708 LDR X0, [X0 + 0x6C0]
	0x0261170C BL 0x1C16CF4
	0x02611710 MOVZ W8, 0x1
	0x02611714 STRB W8, [X21 + 0x1C]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+304]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.IndexOf, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: System.Int32 LastIndexOf(T item)

Disassembly:
	0x02611718 LDR X1, [X22]
	0x0261171C MOV X0, X20
	0x02611720 BL 0x1C16E00
	0x02611724 CBZ X0, 0x261173C
	0x02611728 LDP X20, X19, [X31 + 0x20]
	0x0261172C LDP X22, X21, [X31 + 0x10]
	0x02611730 MOV W0, W31
	0x02611734 LDR X30, [X31], #0x30
	0x02611738 RET

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+312]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.LastIndexOf, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: System.Int32 LastIndexOf(T item, System.Int32 index)

Disassembly:
	0x0261173C ADRP X8, 0x1AE2000
	0x02611740 LDR X8, [X8 + 0x6C0]
	0x02611744 LDR X0, [X8]
	0x02611748 ADRP X8, 0x1B0C000
	0x0261174C LDR X8, [X8 + 0x380]
	0x02611750 LDR W9, [X0 + 0xE0]
	0x02611754 LDR X20, [X8]
	0x02611758 CBNZ W9, 0x2611760
	0x0261175C BL 0x1C16DFC

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X3+32]
	006 Move X8, [X8+192]
	007 Move X3, [X8+320]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.LastIndexOf, X0, X1, X2
	010 Return X0
	011 Call 0x1C17F20

Method: System.Int32 LastIndexOf(T item, System.Int32 index, System.Int32 count)

Disassembly:
	0x02611760 MOV X0, X20
	0x02611764 MOV X1, X31
	0x02611768 BL 0x338C698
	0x0261176C LDR X8, [X19 + 0x20]
	0x02611770 MOV X19, X0
	0x02611774 MOV X1, X31
	0x02611778 LDR X8, [X8 + 0xC0]
	0x0261177C LDR X8, [X8 + 0x1E0]
	0x02611780 MOV X0, X8

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X4+32]
	006 Move X8, [X8+192]
	007 Move X4, [X8+328]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.LastIndexOf, X0, X1, X2, X3
	010 Return X0
	011 Call 0x1C17F20

Method: System.Boolean Remove(T item)

Disassembly:
	0x02611784 BL 0x338C698
	0x02611788 CBZ X19, 0x26117B0
	0x0261178C LDR X8, [X19]
	0x02611790 MOV X1, X0
	0x02611794 MOV X0, X19
	0x02611798 LDP X20, X19, [X31 + 0x20]
	0x0261179C LDR X3, [X8 + 0x2A8]
	0x026117A0 LDR X2, [X8 + 0x2B0]
	0x026117A4 LDP X22, X21, [X31 + 0x10]
	0x026117A8 LDR X30, [X31], #0x30
	0x026117AC BR X3
	0x026117B0 BL 0x1C16F20
	0x026117B4 LDR X8, [X1 + 0x20]
	0x026117B8 LDR X8, [X8 + 0xC0]
	0x026117BC LDR X1, [X8 + 0x1C0]
	0x026117C0 B 0x2610078
	0x026117C4 LDR X8, [X2 + 0x20]
	0x026117C8 LDR X8, [X8 + 0xC0]
	0x026117CC LDR X2, [X8 + 0x1E8]
	0x026117D0 B 0x26100A0
	0x026117D4 STR X30, [X31 - 0x30]!
	0x026117D8 STP X22, X21, [X31 + 0x10]
	0x026117DC STP X20, X19, [X31 + 0x20]
	0x026117E0 LDR X8, [X2 + 0x20]
	0x026117E4 MOV X19, X2
	0x026117E8 MOV X22, X1
	0x026117EC MOV X20, X0
	0x026117F0 LDR X8, [X8 + 0xC0]
	0x026117F4 LDR X8, [X8 + 0x1F0]
	0x026117F8 LDRB W9, [X8 + 0x135]
	0x026117FC TBNZ X9, 0x0, 0x261180C
	0x02611800 MOV X0, X8
	0x02611804 BL 0x1C5C684
	0x02611808 MOV X8, X0
	0x0261180C MOV X0, X8
	0x02611810 BL 0x1C16F10
	0x02611814 LDR X8, [X19 + 0x20]
	0x02611818 MOV X21, X0
	0x0261181C LDR X8, [X8 + 0xC0]
	0x02611820 LDR X1, [X8 + 0x1F8]
	0x02611824 BL 0x237C1B0
	0x02611828 CBZ X21, 0x2611910
	0x0261182C STR X22, [X21 + 0x10]
	0x02611830 LDR X8, [X19 + 0x20]
	0x02611834 MOV X1, X22
	0x02611838 LDR X8, [X8 + 0xC0]
	0x0261183C LDR X2, [X8 + 0x200]
	0x02611840 BL 0x26116C4
	0x02611844 TBZ X0, 0x0, 0x26118A4
	0x02611848 LDR X8, [X19 + 0x20]
	0x0261184C LDR X8, [X8 + 0xC0]
	0x02611850 LDR X0, [X8 + 0x98]
	0x02611854 LDRB W8, [X0 + 0x135]
	0x02611858 TBNZ X8, 0x0, 0x2611860
	0x0261185C BL 0x1C5C684
	0x02611860 BL 0x1C16F10
	0x02611864 LDR X8, [X19 + 0x20]
	0x02611868 MOV X1, X21
	0x0261186C MOV X22, X0
	0x02611870 LDR X8, [X8 + 0xC0]
	0x02611874 LDR X2, [X8 + 0x208]
	0x02611878 LDR X3, [X8 + 0x210]
	0x0261187C BL 0x24AD1FC
	0x02611880 LDR X8, [X19 + 0x20]
	0x02611884 MOV X0, X20
	0x02611888 MOV X1, X22
	0x0261188C LDP X20, X19, [X31 + 0x20]
	0x02611890 LDR X8, [X8 + 0xC0]
	0x02611894 LDP X22, X21, [X31 + 0x10]
	0x02611898 LDR X2, [X8 + 0x218]
	0x0261189C LDR X30, [X31], #0x30
	0x026118A0 B 0x2610434
	0x026118A4 LDR X8, [X19 + 0x20]
	0x026118A8 LDR X21, [X21 + 0x10]
	0x026118AC LDR X8, [X8 + 0xC0]
	0x026118B0 LDR X22, [X8 + 0x30]
	0x026118B4 LDRB W8, [X22 + 0x135]
	0x026118B8 TBNZ X8, 0x0, 0x26118C8
	0x026118BC MOV X0, X22
	0x026118C0 BL 0x1C5C684
	0x026118C4 MOV X22, X0
	0x026118C8 CBZ X21, 0x26118EC
	0x026118CC MOV X0, X21
	0x026118D0 MOV X1, X22
	0x026118D4 BL 0x1C16E00
	0x026118D8 MOV X1, X0
	0x026118DC CBNZ X0, 0x26118F0
	0x026118E0 MOV X0, X21
	0x026118E4 MOV X1, X22
	0x026118E8 BL 0x1C171E0
	0x026118EC MOV X1, X31
	0x026118F0 LDR X8, [X19 + 0x20]
	0x026118F4 MOV X0, X20
	0x026118F8 LDP X20, X19, [X31 + 0x20]
	0x026118FC LDP X22, X21, [X31 + 0x10]
	0x02611900 LDR X8, [X8 + 0xC0]
	0x02611904 LDR X2, [X8 + 0x220]
	0x02611908 LDR X30, [X31], #0x30
	0x0261190C B 0x2610410
	0x02611910 BL 0x1C16F20
	0x02611914 LDR X8, [X2 + 0x20]
	0x02611918 LDR X8, [X8 + 0xC0]
	0x0261191C LDR X2, [X8 + 0x50]
	0x02611920 B 0x2610164
	0x02611924 STR X30, [X31 - 0x30]!
	0x02611928 STP X22, X21, [X31 + 0x10]
	0x0261192C STP X20, X19, [X31 + 0x20]
	0x02611930 CMP W2, 0x1
	0x02611934 B.LT 0x2611974
	0x02611938 LDR X8, [X3 + 0x20]
	0x0261193C MOV W19, W2
	0x02611940 MOV W20, W1
	0x02611944 MOV X21, X0
	0x02611948 LDR X8, [X8 + 0xC0]
	0x0261194C LDR X22, [X8 + 0x60]
	0x02611950 LDR X8, [X22 + 0x20]
	0x02611954 MOV X0, X21
	0x02611958 MOV W1, W20
	0x0261195C LDR X8, [X8 + 0xC0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1DCA000
	007 Move W8, [X21+22]
	008 Move X22, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x1AE3000
	016 Move X0, [X0+1704]
	017 Call 0x1C17CF4
	018 Move X0, 0x1B0D000
	019 Move X0, [X0+792]
	020 Call 0x1C17CF4
	021 Move X0, 0x1B0D000
	022 Move X0, [X0+784]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+22], W8
	026 Move X0, [X20+64]
	027 Compare X0, 0
	028 JumpIfEqual {126}
	029 Move X8, [X22+32]
	030 Move X1, X19
	031 Move X8, [X8+192]
	032 Move X2, [X8+304]
	033 Call List`1<Object>.IndexOf, X0, X1
	034 Move W21, W0
	035 Add W31, W0, 1
	036 Move X0, [X20+64]
	037 Compare X0, 0
	038 JumpIfEqual {126}
	039 Move X8, [X22+32]
	040 Move W1, W21
	041 Move X8, [X8+192]
	042 Move X2, [X8+336]
	043 Call List`1<Object>.RemoveAt, X0, X1
	044 Move X22, [X20+48]
	045 Move W8, 1
	046 Move [X20+32], W8
	047 Compare X22, 0
	048 JumpIfEqual {126}
	049 Move X10, 0x1B0D000
	050 Move X8, [X22]
	051 Move X10, [X10+792]
	052 NotImplemented "Instruction LDRH not yet implemented."
	053 Move X1, [X10]
	054 Compare X9, 0
	055 JumpIfEqual {62}
	056 Move X10, [X8+176]
	057 Add X10, X10, 8
	058 NotImplemented "Instruction LDUR not yet implemented."
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Subtract X9, X9, 1
	061 Add X10, X10, 16
	062 Move X0, X22
	063 Move W2, W31
	064 Call 0x1C5D788
	065 NotImplemented "Instruction LDRSW not yet implemented."
	066 Add X8, X8, X9
	067 Add X0, X8, 312
	068 Move X8, [X0]
	069 Move X1, [X0+8]
	070 Move X0, X22
	071 NotImplemented "Instruction BLR not yet implemented."
	072 Compare X0, 0
	073 JumpIfEqual {126}
	074 Move X10, 0x1AE3000
	075 Move X8, [X0]
	076 Move X10, [X10+1704]
	077 Move X22, X0
	078 NotImplemented "Instruction LDRH not yet implemented."
	079 Move X1, [X10]
	080 Compare X9, 0
	081 JumpIfEqual {88}
	082 Move X10, [X8+176]
	083 Add X10, X10, 8
	084 NotImplemented "Instruction LDUR not yet implemented."
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Subtract X9, X9, 1
	087 Add X10, X10, 16
	088 Move W2, 18
	089 Move X0, X22
	090 Call 0x1C5D788
	091 Move W9, [X10]
	092 Add W9, W9, 18
	093 Add X8, X8, W9
	094 Add X0, X8, 312
	095 Move X8, [X0]
	096 Move X3, [X0+8]
	097 Move X0, X22
	098 Move X1, X20
	099 Move W2, W21
	100 NotImplemented "Instruction BLR not yet implemented."
	101 Compare X19, 0
	102 JumpIfEqual {126}
	103 Move X9, 0x1B0D000
	104 Move X9, [X9+784]
	105 Move X8, [X19]
	106 Move X9, [X9]
	107 Move W11, [X8+304]
	108 Move W10, [X9+304]
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Move X11, [X8+200]
	111 Add X10, X11, X10
	112 NotImplemented "Instruction LDUR not yet implemented."
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move X9, [X8+920]
	115 Move X1, [X8+928]
	116 Move X0, X19
	117 NotImplemented "Instruction BLR not yet implemented."
	118 Add W31, W21, 1
	119 Move X20, [X31+32]
	120 Move X19, [X31+40]
	121 Move X22, [X31+16]
	122 Move X21, [X31+24]
	123 NotImplemented "Instruction CSET not yet implemented."
	124 Move X30, [X31+48]
	125 Return X0
	126 Call 0x1C17F20

Method: System.Int32 RemoveAll(System.Predicate`1<T> match)

Disassembly:
	0x02611960 LDR X2, [X8 + 0x50]
	0x02611964 BL 0x2610164
	0x02611968 SUBS W19, W19, 0x1
	0x0261196C ADD W20, W20, 0x1
	0x02611970 B.NE 0x2611950
	0x02611974 LDP X20, X19, [X31 + 0x20]
	0x02611978 LDP X22, X21, [X31 + 0x10]
	0x0261197C LDR X30, [X31], #0x30
	0x02611980 RET
	0x02611984 STR X30, [X31 - 0x30]!
	0x02611988 STP X22, X21, [X31 + 0x10]
	0x0261198C STP X20, X19, [X31 + 0x20]
	0x02611990 LDR X8, [X2 + 0x20]
	0x02611994 MOV X19, X2
	0x02611998 MOV X22, X1
	0x0261199C MOV X20, X0
	0x026119A0 LDR X8, [X8 + 0xC0]
	0x026119A4 LDR X8, [X8 + 0x228]
	0x026119A8 LDRB W9, [X8 + 0x135]
	0x026119AC TBNZ X9, 0x0, 0x26119BC
	0x026119B0 MOV X0, X8
	0x026119B4 BL 0x1C5C684
	0x026119B8 MOV X8, X0
	0x026119BC MOV X0, X8
	0x026119C0 BL 0x1C16F10
	0x026119C4 LDR X8, [X19 + 0x20]
	0x026119C8 MOV X21, X0
	0x026119CC LDR X8, [X8 + 0xC0]
	0x026119D0 LDR X1, [X8 + 0x230]
	0x026119D4 BL 0x237C400
	0x026119D8 CBZ X21, 0x2611AEC
	0x026119DC STR X22, [X21 + 0x10]
	0x026119E0 LDR X8, [X19 + 0x20]
	0x026119E4 MOV X1, X22
	0x026119E8 LDR X8, [X8 + 0xC0]
	0x026119EC LDR X2, [X8 + 0x200]
	0x026119F0 BL 0x26116C4
	0x026119F4 TBZ X0, 0x0, 0x2611A70
	0x026119F8 LDR X8, [X19 + 0x20]
	0x026119FC LDR X8, [X8 + 0xC0]
	0x02611A00 LDR X0, [X8 + 0x98]
	0x02611A04 LDRB W8, [X0 + 0x135]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, X0
	008 Move X0, [X0+64]
	009 Compare X0, 0
	010 JumpIfEqual {43}
	011 Move W8, [X0+24]
	012 Subtract W23, W8, 1
	013 Move X19, X2
	014 Move X21, X1
	015 Move W22, W31
	016 Move X8, [X19+32]
	017 Move W1, W23
	018 Move X8, [X8+192]
	019 Move X2, [X8+40]
	020 Call List`1<Object>.get_Item, X0, X1
	021 Compare X21, 0
	022 JumpIfEqual {43}
	023 Move X1, X0
	024 Move X8, [X21+24]
	025 Move X0, [X21+64]
	026 Move X2, [X21+40]
	027 NotImplemented "Instruction BLR not yet implemented."
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {39}
	032 Move X8, [X19+32]
	033 Move X0, X20
	034 Move W1, W23
	035 Move X8, [X8+192]
	036 Move X2, [X8+88]
	037 Call 0x2611A08, X0, X1
	038 Add W22, W22, 1
	039 Subtract W23, W23, 1
	040 Move X0, [X20+64]
	041 Compare X0, 0
	042 JumpIfNotEqual {16}
	043 Call 0x1C17F20
	044 Move W22, W31
	045 Move W0, W22
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X30, [X31+48]
	051 Move X23, [X31+56]
	052 Return X0

Method: System.Void RemoveAt(System.Int32 index)

Disassembly:
	0x02611A08 TBNZ X8, 0x0, 0x2611A10
	0x02611A0C BL 0x1C5C684
	0x02611A10 BL 0x1C16F10
	0x02611A14 LDR X8, [X19 + 0x20]
	0x02611A18 MOV X1, X21
	0x02611A1C MOV X22, X0
	0x02611A20 LDR X8, [X8 + 0xC0]
	0x02611A24 LDR X2, [X8 + 0x238]
	0x02611A28 LDR X3, [X8 + 0x210]
	0x02611A2C BL 0x24AD1FC
	0x02611A30 LDR X8, [X19 + 0x20]
	0x02611A34 MOV X0, X20
	0x02611A38 MOV X1, X22
	0x02611A3C LDR X8, [X8 + 0xC0]
	0x02611A40 LDR X2, [X8 + 0x240]
	0x02611A44 BL 0x26104E8
	0x02611A48 TBNZ X0, 0x1F, 0x2611AB8
	0x02611A4C LDR X8, [X19 + 0x20]
	0x02611A50 MOV W1, W0
	0x02611A54 MOV X0, X20
	0x02611A58 LDP X20, X19, [X31 + 0x20]
	0x02611A5C LDR X8, [X8 + 0xC0]
	0x02611A60 LDP X22, X21, [X31 + 0x10]
	0x02611A64 LDR X2, [X8 + 0x58]
	0x02611A68 LDR X30, [X31], #0x30
	0x02611A6C B 0x2610A08
	0x02611A70 LDR X8, [X19 + 0x20]
	0x02611A74 LDR X21, [X21 + 0x10]
	0x02611A78 LDR X8, [X8 + 0xC0]
	0x02611A7C LDR X22, [X8 + 0x30]
	0x02611A80 LDRB W8, [X22 + 0x135]
	0x02611A84 TBNZ X8, 0x0, 0x2611A94
	0x02611A88 MOV X0, X22
	0x02611A8C BL 0x1C5C684
	0x02611A90 MOV X22, X0
	0x02611A94 CBZ X21, 0x2611AC8
	0x02611A98 MOV X0, X21
	0x02611A9C MOV X1, X22
	0x02611AA0 BL 0x1C16E00
	0x02611AA4 MOV X1, X0
	0x02611AA8 CBNZ X0, 0x2611ACC
	0x02611AAC MOV X0, X21
	0x02611AB0 MOV X1, X22
	0x02611AB4 BL 0x1C171E0
	0x02611AB8 LDP X20, X19, [X31 + 0x20]
	0x02611ABC LDP X22, X21, [X31 + 0x10]
	0x02611AC0 LDR X30, [X31], #0x30
	0x02611AC4 RET
	0x02611AC8 MOV X1, X31
	0x02611ACC LDR X8, [X19 + 0x20]
	0x02611AD0 MOV X0, X20
	0x02611AD4 LDP X20, X19, [X31 + 0x20]
	0x02611AD8 LDP X22, X21, [X31 + 0x10]
	0x02611ADC LDR X8, [X8 + 0xC0]
	0x02611AE0 LDR X2, [X8 + 0x248]
	0x02611AE4 LDR X30, [X31], #0x30
	0x02611AE8 B 0x2610784
	0x02611AEC BL 0x1C16F20
	0x02611AF0 STR X30, [X31 - 0x10]!
	0x02611AF4 LDR X0, [X0 + 0x40]
	0x02611AF8 CBZ X0, 0x2611B14
	0x02611AFC LDR X8, [X1 + 0x20]
	0x02611B00 LDR X8, [X8 + 0xC0]
	0x02611B04 LDR X1, [X8 + 0x10]
	0x02611B08 LDR X2, [X1]
	0x02611B0C LDR X30, [X31], #0x10
	0x02611B10 BR X2
	0x02611B14 BL 0x1C16F20
	0x02611B18 STP X30, X21, [X31 - 0x20]!
	0x02611B1C STP X20, X19, [X31 + 0x10]
	0x02611B20 LDR X8, [X1 + 0x20]
	0x02611B24 MOV X20, X1
	0x02611B28 MOV X19, X0
	0x02611B2C LDR X8, [X8 + 0xC0]
	0x02611B30 LDR X8, [X8 + 0x18]
	0x02611B34 LDRB W9, [X8 + 0x135]
	0x02611B38 TBNZ X9, 0x0, 0x2611B48
	0x02611B3C MOV X0, X8
	0x02611B40 BL 0x1C5C684
	0x02611B44 MOV X8, X0
	0x02611B48 MOV X0, X8
	0x02611B4C BL 0x1C16F10
	0x02611B50 LDR X8, [X20 + 0x20]
	0x02611B54 MOVN W1, 0x1
	0x02611B58 MOV X21, X0
	0x02611B5C LDR X8, [X8 + 0xC0]
	0x02611B60 LDR X2, [X8 + 0x20]
	0x02611B64 LDR X8, [X2]
	0x02611B68 BLR X8
	0x02611B6C CBZ X21, 0x2611BB0
	0x02611B70 LDR X8, [X20 + 0x20]
	0x02611B74 MOVZ W1, 0x8
	0x02611B78 LDR X8, [X8 + 0xC0]
	0x02611B7C LDR X8, [X8 + 0x18]
	0x02611B80 LDR X8, [X8 + 0x80]
	0x02611B84 ADD X20, X8, 0x60
	0x02611B88 MOV X0, X20
	0x02611B8C BL 0x1C16D14
	0x02611B90 MOV X0, X21
	0x02611B94 MOV X1, X20
	0x02611B98 BL 0x1C16D18
	0x02611B9C STR X19, [X0]
	0x02611BA0 LDP X20, X19, [X31 + 0x10]
	0x02611BA4 MOV X0, X21
	0x02611BA8 LDP X30, X21, [X31], #0x20
	0x02611BAC RET
	0x02611BB0 BL 0x1C16F20
	0x02611BB4 MOV W0, W31
	0x02611BB8 RET
	0x02611BBC MOVZ W0, 0x1
	0x02611BC0 RET
	0x02611BC4 MOV W0, W31
	0x02611BC8 RET
	0x02611BCC STP X29, X30, [X31 - 0x30]!
	0x02611BD0 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1DCA000
	007 Move W8, [X21+23]
	008 Move X22, X2
	009 Move W19, W1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x1AE3000
	016 Move X0, [X0+1704]
	017 Call 0x1C17CF4
	018 Move X0, 0x1B0D000
	019 Move X0, [X0+792]
	020 Call 0x1C17CF4
	021 Move X0, 0x1B0D000
	022 Move X0, [X0+784]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+23], W8
	026 Move X0, [X20+64]
	027 Compare X0, 0
	028 JumpIfEqual {123}
	029 Move X8, [X22+32]
	030 Move W1, W19
	031 Move X8, [X8+192]
	032 Move X2, [X8+40]
	033 Call List`1<Object>.get_Item, X0, X1
	034 Move X8, [X20+64]
	035 Compare X8, 0
	036 JumpIfEqual {123}
	037 Move X9, [X22+32]
	038 Move X21, X0
	039 Move X0, X8
	040 Move W1, W19
	041 Move X9, [X9+192]
	042 Move X2, [X9+336]
	043 Call List`1<Object>.RemoveAt, X0, X1
	044 Move X22, [X20+48]
	045 Move W8, 1
	046 Move [X20+32], W8
	047 Compare X22, 0
	048 JumpIfEqual {123}
	049 Move X10, 0x1B0D000
	050 Move X8, [X22]
	051 Move X10, [X10+792]
	052 NotImplemented "Instruction LDRH not yet implemented."
	053 Move X1, [X10]
	054 Compare X9, 0
	055 JumpIfEqual {62}
	056 Move X10, [X8+176]
	057 Add X10, X10, 8
	058 NotImplemented "Instruction LDUR not yet implemented."
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Subtract X9, X9, 1
	061 Add X10, X10, 16
	062 Move X0, X22
	063 Move W2, W31
	064 Call 0x1C5D788
	065 NotImplemented "Instruction LDRSW not yet implemented."
	066 Add X8, X8, X9
	067 Add X0, X8, 312
	068 Move X8, [X0]
	069 Move X1, [X0+8]
	070 Move X0, X22
	071 NotImplemented "Instruction BLR not yet implemented."
	072 Compare X0, 0
	073 JumpIfEqual {123}
	074 Move X10, 0x1AE3000
	075 Move X8, [X0]
	076 Move X10, [X10+1704]
	077 Move X22, X0
	078 NotImplemented "Instruction LDRH not yet implemented."
	079 Move X1, [X10]
	080 Compare X9, 0
	081 JumpIfEqual {88}
	082 Move X10, [X8+176]
	083 Add X10, X10, 8
	084 NotImplemented "Instruction LDUR not yet implemented."
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Subtract X9, X9, 1
	087 Add X10, X10, 16
	088 Move W2, 18
	089 Move X0, X22
	090 Call 0x1C5D788
	091 Move W9, [X10]
	092 Add W9, W9, 18
	093 Add X8, X8, W9
	094 Add X0, X8, 312
	095 Move X8, [X0]
	096 Move X3, [X0+8]
	097 Move X0, X22
	098 Move X1, X20
	099 Move W2, W19
	100 NotImplemented "Instruction BLR not yet implemented."
	101 Compare X21, 0
	102 JumpIfEqual {123}
	103 Move X9, 0x1B0D000
	104 Move X9, [X9+784]
	105 Move X8, [X21]
	106 Move X9, [X9]
	107 Move W11, [X8+304]
	108 Move W10, [X9+304]
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Move X11, [X8+200]
	111 Add X10, X11, X10
	112 NotImplemented "Instruction LDUR not yet implemented."
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move X2, [X8+920]
	115 Move X1, [X8+928]
	116 Move X0, X21
	117 Move X20, [X31+32]
	118 Move X19, [X31+40]
	119 Move X22, [X31+16]
	120 Move X21, [X31+24]
	121 Move X30, [X31+48]
	122 CallNoReturn X2
	123 Call 0x1C17F20

Method: System.Void RemoveRange(System.Int32 index, System.Int32 count)

Disassembly:
	0x02611BD4 STP X20, X19, [X31 + 0x20]
	0x02611BD8 ADD X29, X31, 0x0
	0x02611BDC SUB X31, X31, 0x20
	0x02611BE0 MRS X22, 0xC000
	0x02611BE4 LDR X8, [X22 + 0x28]
	0x02611BE8 MOV X19, X2
	0x02611BEC STUR X8, [X29 - 0x8]
	0x02611BF0 LDR X8, [X3 + 0x20]
	0x02611BF4 LDR X8, [X8 + 0xC0]
	0x02611BF8 LDR X9, [X8 + 0x30]
	0x02611BFC LDR W20, [X9 + 0xFC]
	0x02611C00 ADD X9, X31, 0x0
	0x02611C04 ADD X10, X20, 0xF
	0x02611C08 AND X10, X10, 0x1FFFFFFFF
	0x02611C0C SUB X21, X9, X10
	0x02611C10 ADD X31, X21, 0x0
	0x02611C14 LDR X2, [X0 + 0x40]
	0x02611C18 CBZ X2, 0x2611C78
	0x02611C1C LDR X8, [X8 + 0x28]
	0x02611C20 SUB X9, X29, 0xC
	0x02611C24 SUB X3, X29, 0x20
	0x02611C28 MOV X4, X21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X19, X3
	008 Move W20, W2
	009 Move X21, X0
	010 Subtract W22, W1, 1
	011 Move X8, [X19+32]
	012 Add W1, W22, W20
	013 Move X0, X21
	014 Move X8, [X8+192]
	015 Move X2, [X8+88]
	016 Call 0x2611A08, X0, X1
	017 Subtract W20, W20, 1
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move X20, [X31+32]
	020 Move X19, [X31+40]
	021 Move X22, [X31+16]
	022 Move X21, [X31+24]
	023 Move X30, [X31+48]
	024 Return 

Method: T[] ToArray()

Disassembly:
	0x02611C2C LDR X0, [X8]
	0x02611C30 STUR W1, [X29 - 0xC]
	0x02611C34 STP X9, X21, [X29 - 0x20]
	0x02611C38 LDR X9, [X8 + 0x10]
	0x02611C3C MOV X1, X8
	0x02611C40 BLR X9
	0x02611C44 MOV X0, X19
	0x02611C48 MOV X1, X21
	0x02611C4C MOV X2, X20

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X1+32]
	006 Move X8, [X8+192]
	007 Move X1, [X8+352]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.ToArray, X0
	010 Return X0
	011 Call 0x1C17F20

Method: V[] ToArrayFromPrimitiveValues()

Disassembly:
	0x021371B8 LDP X24, X23, [X31 + 0x20]
	0x021371BC LDP X26, X25, [X31 + 0x10]
	0x021371C0 LDP X30, X27, [X31], #0x50
	0x021371C4 RET
	0x021371C8 BL 0x1C16F20
	0x021371CC ADRP X0, 0x1FC1000
	0x021371D0 LDR X0, [X0 + 0x528]
	0x021371D4 BL 0x1C16D08
	0x021371D8 BL 0x1C16F10
	0x021371DC MOV X20, X0
	0x021371E0 ADRP X0, 0x1FE4000
	0x021371E4 LDR X0, [X0 + 0x738]
	0x021371E8 B 0x2137208
	0x021371EC ADRP X0, 0x1FC1000
	0x021371F0 LDR X0, [X0 + 0x528]
	0x021371F4 BL 0x1C16D08
	0x021371F8 BL 0x1C16F10
	0x021371FC MOV X20, X0
	0x02137200 ADRP X0, 0x1FE4000
	0x02137204 LDR X0, [X0 + 0x748]
	0x02137208 BL 0x1C16D08
	0x0213720C MOV X1, X0
	0x02137210 MOV X0, X20
	0x02137214 MOV X2, X31
	0x02137218 BL 0x330E100
	0x0213721C MOV X0, X20
	0x02137220 MOV X1, X19
	0x02137224 BL 0x1C16DEC
	0x02137228 BL 0x1C16F20
	0x0213722C B 0x213723C
	0x02137230 B 0x213723C
	0x02137234 B 0x213723C
	0x02137238 B 0x213723C
	0x0213723C MOV X21, X0
	0x02137240 CMP W1, 0x1
	0x02137244 B.NE 0x2137354
	0x02137248 MOV X0, X21
	0x0213724C BL 0x3EB1AD0
	0x02137250 MOV X21, X0
	0x02137254 ADRP X0, 0x1FC2000
	0x02137258 LDR X0, [X0 + 0xCC0]
	0x0213725C BL 0x1C16D08
	0x02137260 LDR X8, [X21]
	0x02137264 LDR X1, [X8]
	0x02137268 BL 0x1C17270
	0x0213726C TBZ X0, 0x0, 0x213732C
	0x02137270 LDR X21, [X21]
	0x02137274 BL 0x3EB1AE0
	0x02137278 ADRP X0, 0x1FE4000
	0x0213727C LDR X0, [X0 + 0x728]
	0x02137280 BL 0x1C16D08
	0x02137284 LDR W8, [X0 + 0xE0]
	0x02137288 CBNZ W8, 0x2137290
	0x0213728C BL 0x1C16DFC
	0x02137290 MOV X0, X31
	0x02137294 BL 0x33EE5CC
	0x02137298 TBZ X0, 0x0, 0x21372CC
	0x0213729C ADRP X0, 0x1FE4000
	0x021372A0 LDR X22, [X20 + 0x20]
	0x021372A4 LDR X0, [X0 + 0x728]
	0x021372A8 BL 0x1C16D08
	0x021372AC LDR W8, [X0 + 0xE0]
	0x021372B0 CBNZ W8, 0x21372B8
	0x021372B4 BL 0x1C16DFC
	0x021372B8 MOVZ W2, 0x3
	0x021372BC MOV W0, W31
	0x021372C0 MOV X1, X22
	0x021372C4 MOV X3, X31
	0x021372C8 BL 0x33EE5D8
	0x021372CC MOV X0, X20
	0x021372D0 BL 0x19903C0
	0x021372D4 ADRP X0, 0x1FE4000
	0x021372D8 LDR X22, [X20 + 0x20]
	0x021372DC LDR X0, [X0 + 0x728]
	0x021372E0 BL 0x1C16D08
	0x021372E4 BL 0x19903D0
	0x021372E8 MOV X0, X22
	0x021372EC MOV X1, X31
	0x021372F0 BL 0x2142AF8
	0x021372F4 MOV X0, X20
	0x021372F8 BL 0x19903C0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X1+56]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X8, 0
	010 JumpIfNotEqual {14}
	011 Move X0, X19
	012 Call 0x1C5D6E0
	013 Move X8, [X19+56]
	014 Move X0, [X8+16]
	015 Move X20, [X20+64]
	016 Move W8, [X0+309]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {22}
	021 Call 0x1C5D684
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X8, [X19+56]
	027 Move X0, [X8+16]
	028 Move W8, [X0+309]
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {34}
	033 Call 0x1C5D684
	034 Move X8, [X0+184]
	035 Move X21, [X8+8]
	036 Compare X21, 0
	037 JumpIfNotEqual {97}
	038 Move X8, [X19+56]
	039 Move X0, [X8+16]
	040 Move W8, [X0+309]
	041 Move TEMP, X8
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfEqual {46}
	045 Call 0x1C5D684
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move X8, [X19+56]
	051 Move X0, [X8+16]
	052 Move W9, [X0+309]
	053 Move TEMP, X9
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfEqual {59}
	057 Call 0x1C5D684
	058 Move X8, [X19+56]
	059 Move X8, [X8+8]
	060 Move X9, [X0+184]
	061 Move W10, [X8+309]
	062 Move X22, [X9]
	063 Move TEMP, X10
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfEqual {70}
	067 Move X0, X8
	068 Call 0x1C5D684
	069 Move X8, X0
	070 Move X0, X8
	071 Call 0x1C17F10
	072 Move X8, [X19+56]
	073 Move X1, X22
	074 Move X21, X0
	075 Move X2, [X8+24]
	076 Move X3, [X8+32]
	077 Move X8, [X3]
	078 NotImplemented "Instruction BLR not yet implemented."
	079 Move X8, [X19+56]
	080 Move X0, [X8+16]
	081 Move W8, [X0+309]
	082 Move TEMP, X8
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfEqual {87}
	086 Call 0x1C5D684
	087 Move X8, [X0+184]
	088 Move [X8+8], X21
	089 Move X8, [X19+56]
	090 Move X0, [X8+16]
	091 Move W8, [X0+309]
	092 Move TEMP, X8
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfEqual {97}
	096 Call 0x1C5D684
	097 Move X8, [X19+56]
	098 Move X0, X20
	099 Move X1, X21
	100 Move X2, [X8+40]
	101 Move X8, [X2]
	102 NotImplemented "Instruction BLR not yet implemented."
	103 Move X8, [X19+56]
	104 Move X20, [X31+32]
	105 Move X19, [X31+40]
	106 Move X22, [X31+16]
	107 Move X21, [X31+24]
	108 Move X1, [X8+56]
	109 Move X2, [X1]
	110 Move X30, [X31+48]
	111 CallNoReturn X2

Method: SimpleJSON.JSONNode ToJSON(System.Predicate`1<SpatialSys.ObservableState.IStateObject> filter = null, System.Boolean includeSyncRate = True)

Disassembly:
	0x02611C50 BL 0x3EB1AC0
	0x02611C54 LDR X8, [X22 + 0x28]
	0x02611C58 LDUR X9, [X29 - 0x8]
	0x02611C5C CMP X8, X9
	0x02611C60 B.NE 0x2611C7C
	0x02611C64 ADD X31, X29, 0x0
	0x02611C68 LDP X20, X19, [X31 + 0x20]
	0x02611C6C LDP X22, X21, [X31 + 0x10]
	0x02611C70 LDP X29, X30, [X31], #0x30
	0x02611C74 RET
	0x02611C78 BL 0x1C16F20
	0x02611C7C BL 0x3EB1B20
	0x02611C80 STR X30, [X31 - 0x10]!
	0x02611C84 LDR X0, [X0 + 0x40]
	0x02611C88 CBZ X0, 0x2611CA4
	0x02611C8C LDR X8, [X1 + 0x20]
	0x02611C90 LDR X8, [X8 + 0xC0]
	0x02611C94 LDR X1, [X8 + 0x10]
	0x02611C98 LDR X2, [X1]
	0x02611C9C LDR X30, [X31], #0x10
	0x02611CA0 BR X2
	0x02611CA4 BL 0x1C16F20
	0x02611CA8 STR X30, [X31 - 0x10]!
	0x02611CAC LDR X0, [X0 + 0x40]
	0x02611CB0 CBZ X0, 0x2611CCC
	0x02611CB4 LDR X8, [X1 + 0x20]
	0x02611CB8 LDR X8, [X8 + 0xC0]
	0x02611CBC LDR X1, [X8 + 0x38]
	0x02611CC0 LDR X2, [X1]
	0x02611CC4 LDR X30, [X31], #0x10
	0x02611CC8 BR X2
	0x02611CCC BL 0x1C16F20
	0x02611CD0 STR X30, [X31 - 0x10]!
	0x02611CD4 LDR X0, [X0 + 0x40]
	0x02611CD8 CBZ X0, 0x2611CF4
	0x02611CDC LDR X8, [X2 + 0x20]
	0x02611CE0 LDR X8, [X8 + 0xC0]
	0x02611CE4 LDR X2, [X8 + 0x40]
	0x02611CE8 LDR X3, [X2]
	0x02611CEC LDR X30, [X31], #0x10
	0x02611CF0 BR X3
	0x02611CF4 BL 0x1C16F20
	0x02611CF8 STP X29, X30, [X31 - 0x30]!
	0x02611CFC STR X21, [X31 + 0x10]
	0x02611D00 STP X20, X19, [X31 + 0x20]
	0x02611D04 ADD X29, X31, 0x0
	0x02611D08 SUB X31, X31, 0x20
	0x02611D0C MRS X21, 0xC000
	0x02611D10 LDR X8, [X21 + 0x28]
	0x02611D14 ADD X10, X31, 0x0
	0x02611D18 MOV X19, X2
	0x02611D1C STUR X8, [X29 - 0x8]
	0x02611D20 LDR X8, [X2 + 0x20]
	0x02611D24 LDR X8, [X8 + 0xC0]
	0x02611D28 LDR X9, [X8 + 0x30]
	0x02611D2C LDR W9, [X9 + 0xFC]
	0x02611D30 ADD X9, X9, 0xF
	0x02611D34 AND X9, X9, 0x1FFFFFFFF
	0x02611D38 SUB X20, X10, X9
	0x02611D3C ADD X31, X20, 0x0
	0x02611D40 LDR X2, [X0 + 0x40]
	0x02611D44 CBZ X2, 0x2611DA8
	0x02611D48 LDR X8, [X8 + 0x28]
	0x02611D4C SUB X9, X29, 0xC
	0x02611D50 SUB X3, X29, 0x20
	0x02611D54 MOV X4, X20
	0x02611D58 LDR X0, [X8]
	0x02611D5C STUR W1, [X29 - 0xC]
	0x02611D60 STP X9, X20, [X29 - 0x20]
	0x02611D64 LDR X9, [X8 + 0x10]
	0x02611D68 MOV X1, X8
	0x02611D6C BLR X9
	0x02611D70 LDR X8, [X19 + 0x20]
	0x02611D74 MOV X1, X20
	0x02611D78 LDR X8, [X8 + 0xC0]
	0x02611D7C LDR X0, [X8 + 0x30]
	0x02611D80 BL 0x1C16E04
	0x02611D84 LDR X8, [X21 + 0x28]
	0x02611D88 LDUR X9, [X29 - 0x8]
	0x02611D8C CMP X8, X9
	0x02611D90 B.NE 0x2611DAC
	0x02611D94 ADD X31, X29, 0x0
	0x02611D98 LDP X20, X19, [X31 + 0x20]
	0x02611D9C LDR X21, [X31 + 0x10]
	0x02611DA0 LDP X29, X30, [X31], #0x30
	0x02611DA4 RET
	0x02611DA8 BL 0x1C16F20
	0x02611DAC BL 0x3EB1B20
	0x02611DB0 STP X30, X21, [X31 - 0x20]!
	0x02611DB4 STP X20, X19, [X31 + 0x10]
	0x02611DB8 ADRP X21, 0x1DC9000
	0x02611DBC LDRB W8, [X21 + 0x1D]
	0x02611DC0 MOV X20, X1
	0x02611DC4 MOV X19, X0
	0x02611DC8 TBNZ X8, 0x0, 0x2611DE0
	0x02611DCC ADRP X0, 0x1B0C000
	0x02611DD0 LDR X0, [X0 + 0x310]
	0x02611DD4 BL 0x1C16CF4
	0x02611DD8 MOVZ W8, 0x1
	0x02611DDC STRB W8, [X21 + 0x1D]
	0x02611DE0 LDR X8, [X20 + 0x20]
	0x02611DE4 ADRP X21, 0x1B0C000
	0x02611DE8 LDR X8, [X8 + 0xC0]
	0x02611DEC LDR X0, [X8 + 0x8]
	0x02611DF0 LDRB W8, [X0 + 0x135]
	0x02611DF4 LDR X21, [X21 + 0x310]
	0x02611DF8 TBNZ X8, 0x0, 0x2611E00
	0x02611DFC BL 0x1C5C684
	0x02611E00 BL 0x1C16F10
	0x02611E04 LDR X8, [X20 + 0x20]
	0x02611E08 MOV X20, X0
	0x02611E0C LDR X8, [X8 + 0xC0]
	0x02611E10 LDR X1, [X8 + 0x48]
	0x02611E14 LDR X8, [X1]
	0x02611E18 BLR X8
	0x02611E1C STR X20, [X19 + 0x40]
	0x02611E20 LDR X0, [X21]
	0x02611E24 LDR W8, [X0 + 0xE0]
	0x02611E28 CBNZ W8, 0x2611E30
	0x02611E2C BL 0x1C16DFC
	0x02611E30 MOV X0, X19
	0x02611E34 LDP X20, X19, [X31 + 0x10]
	0x02611E38 MOV X1, X31
	0x02611E3C LDP X30, X21, [X31], #0x20
	0x02611E40 B 0x35CDA2C
	0x02611E44 STP X30, X23, [X31 - 0x30]!
	0x02611E48 STP X22, X21, [X31 + 0x10]
	0x02611E4C STP X20, X19, [X31 + 0x20]
	0x02611E50 ADRP X23, 0x1DC9000
	0x02611E54 LDRB W8, [X23 + 0x1E]
	0x02611E58 MOV X22, X3
	0x02611E5C MOV X19, X2
	0x02611E60 MOV X20, X1
	0x02611E64 MOV X21, X0
	0x02611E68 TBNZ X8, 0x0, 0x2611E80
	0x02611E6C ADRP X0, 0x1B0C000
	0x02611E70 LDR X0, [X0 + 0x310]
	0x02611E74 BL 0x1C16CF4
	0x02611E78 MOVZ W8, 0x1
	0x02611E7C STRB W8, [X23 + 0x1E]
	0x02611E80 LDR X8, [X22 + 0x20]
	0x02611E84 ADRP X23, 0x1B0C000
	0x02611E88 LDR X8, [X8 + 0xC0]
	0x02611E8C LDR X0, [X8 + 0x8]
	0x02611E90 LDRB W8, [X0 + 0x135]
	0x02611E94 LDR X23, [X23 + 0x310]
	0x02611E98 TBNZ X8, 0x0, 0x2611EA0
	0x02611E9C BL 0x1C5C684
	0x02611EA0 BL 0x1C16F10
	0x02611EA4 LDR X8, [X22 + 0x20]
	0x02611EA8 MOV X22, X0
	0x02611EAC LDR X8, [X8 + 0xC0]
	0x02611EB0 LDR X1, [X8 + 0x48]
	0x02611EB4 LDR X8, [X1]
	0x02611EB8 BLR X8
	0x02611EBC STR X22, [X21 + 0x40]
	0x02611EC0 LDR X0, [X23]
	0x02611EC4 LDR W8, [X0 + 0xE0]
	0x02611EC8 CBNZ W8, 0x2611ED0
	0x02611ECC BL 0x1C16DFC
	0x02611ED0 MOV X0, X21
	0x02611ED4 MOV X1, X20
	0x02611ED8 MOV X2, X19
	0x02611EDC LDP X20, X19, [X31 + 0x20]
	0x02611EE0 LDP X22, X21, [X31 + 0x10]
	0x02611EE4 MOV X3, X31
	0x02611EE8 LDP X30, X23, [X31], #0x30
	0x02611EEC B 0x35CDABC
	0x02611EF0 STP X29, X30, [X31 - 0x40]!
	0x02611EF4 STR X23, [X31 + 0x10]
	0x02611EF8 STP X22, X21, [X31 + 0x20]
	0x02611EFC STP X20, X19, [X31 + 0x30]
	0x02611F00 ADD X29, X31, 0x0
	0x02611F04 SUB X31, X31, 0x20
	0x02611F08 MRS X23, 0xC000
	0x02611F0C LDR X8, [X23 + 0x28]
	0x02611F10 ADRP X22, 0x1DC9000
	0x02611F14 MOV X19, X2
	0x02611F18 MOV X20, X1
	0x02611F1C STUR X8, [X29 - 0x8]
	0x02611F20 LDRB W8, [X22 + 0x1F]
	0x02611F24 MOV X21, X0
	0x02611F28 TBNZ X8, 0x0, 0x2611F58
	0x02611F2C ADRP X0, 0x1AE2000
	0x02611F30 LDR X0, [X0 + 0x750]
	0x02611F34 BL 0x1C16CF4
	0x02611F38 ADRP X0, 0x1B0C000
	0x02611F3C LDR X0, [X0 + 0x358]
	0x02611F40 BL 0x1C16CF4
	0x02611F44 ADRP X0, 0x1B0C000
	0x02611F48 LDR X0, [X0 + 0x360]
	0x02611F4C BL 0x1C16CF4
	0x02611F50 MOVZ W8, 0x1
	0x02611F54 STRB W8, [X22 + 0x1F]
	0x02611F58 LDR X8, [X19 + 0x20]
	0x02611F5C ADD X9, X31, 0x0
	0x02611F60 LDR X8, [X8 + 0xC0]
	0x02611F64 LDR X8, [X8 + 0x30]
	0x02611F68 LDR W8, [X8 + 0xFC]
	0x02611F6C ADD X8, X8, 0xF
	0x02611F70 AND X8, X8, 0x1FFFFFFFF
	0x02611F74 SUB X22, X9, X8
	0x02611F78 ADD X31, X22, 0x0
	0x02611F7C CBZ X20, 0x26120E4
	0x02611F80 ADRP X10, 0x1AE2000
	0x02611F84 LDR X8, [X20]
	0x02611F88 LDR X10, [X10 + 0x750]
	0x02611F8C LDRH W9, [X8 + 0x12E]
	0x02611F90 LDR X1, [X10]
	0x02611F94 CBZ X9, 0x2611FB8
	0x02611F98 LDR X10, [X8 + 0xB0]
	0x02611F9C ADD X10, X10, 0x8
	0x02611FA0 LDUR X11, [X10 - 0x8]
	0x02611FA4 CMP X11, X1
	0x02611FA8 B.EQ 0x2611FC8
	0x02611FAC SUBS X9, X9, 0x1
	0x02611FB0 ADD X10, X10, 0x10
	0x02611FB4 B.NE 0x2611FA0
	0x02611FB8 MOVZ W2, 0x2
	0x02611FBC MOV X0, X20
	0x02611FC0 BL 0x1C5C788
	0x02611FC4 B 0x2611FD8
	0x02611FC8 LDR W9, [X10]
	0x02611FCC ADD W9, W9, 0x2
	0x02611FD0 ADD X8, X8, W9, 0x4, SXTW
	0x02611FD4 ADD X0, X8, 0x138
	0x02611FD8 LDP X8, X1, [X0]
	0x02611FDC MOV X0, X20
	0x02611FE0 BLR X8
	0x02611FE4 AND W8, W0, 0xFF
	0x02611FE8 CMP W8, 0x6
	0x02611FEC B.EQ 0x26120BC
	0x02611FF0 CMP W8, 0x5
	0x02611FF4 B.EQ 0x261206C
	0x02611FF8 CMP W8, 0x4
	0x02611FFC B.NE 0x26120E8
	0x02612000 ADRP X8, 0x1B0B000
	0x02612004 LDR X8, [X8 + 0x360]
	0x02612008 LDR X9, [X20]
	0x0261200C LDR X8, [X8]
	0x02612010 LDRB W11, [X9 + 0x130]
	0x02612014 LDRB W10, [X8 + 0x130]
	0x02612018 CMP W11, W10
	0x0261201C B.CC 0x26120E4
	0x02612020 LDR X9, [X9 + 0xC8]
	0x02612024 ADD X9, X9, X10, 0x3, LSL
	0x02612028 LDUR X9, [X9 - 0x8]
	0x0261202C CMP X9, X8
	0x02612030 B.NE 0x26120E4
	0x02612034 LDR X8, [X19 + 0x20]
	0x02612038 SUB X9, X29, 0xC
	0x0261203C SUB X3, X29, 0x20
	0x02612040 MOV X2, X21
	0x02612044 LDR X8, [X8 + 0xC0]
	0x02612048 MOV X4, X22
	0x0261204C LDR X1, [X8 + 0x50]
	0x02612050 LDR W8, [X20 + 0x1C]
	0x02612054 LDR X0, [X1]
	0x02612058 STUR W8, [X29 - 0xC]
	0x0261205C STP X9, X22, [X29 - 0x20]
	0x02612060 LDR X8, [X1 + 0x10]
	0x02612064 BLR X8
	0x02612068 B 0x26120BC
	0x0261206C ADRP X8, 0x1B0B000
	0x02612070 LDR X8, [X8 + 0x360]
	0x02612074 LDR X9, [X20]
	0x02612078 LDR X8, [X8]
	0x0261207C LDRB W11, [X9 + 0x130]
	0x02612080 LDRB W10, [X8 + 0x130]
	0x02612084 CMP W11, W10
	0x02612088 B.CC 0x26120E4
	0x0261208C LDR X9, [X9 + 0xC8]
	0x02612090 ADD X9, X9, X10, 0x3, LSL
	0x02612094 LDUR X9, [X9 - 0x8]
	0x02612098 CMP X9, X8
	0x0261209C B.NE 0x26120E4
	0x026120A0 LDR X8, [X19 + 0x20]
	0x026120A4 LDR W1, [X20 + 0x1C]
	0x026120A8 MOV X0, X21
	0x026120AC LDR X8, [X8 + 0xC0]
	0x026120B0 LDR X2, [X8 + 0x58]
	0x026120B4 LDR X8, [X2]
	0x026120B8 BLR X8
	0x026120BC LDR X8, [X23 + 0x28]
	0x026120C0 LDUR X9, [X29 - 0x8]
	0x026120C4 CMP X8, X9
	0x026120C8 B.NE 0x2612188

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X22, 0x1DCA000
	013 Move W8, [X22+24]
	014 Move X21, X3
	015 Move W23, W2
	016 Move X19, X1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {36}
	022 Move X0, 0x1AE3000
	023 Move X0, [X0+3584]
	024 Call 0x1C17CF4
	025 Move X0, 0x1AE3000
	026 Move X0, [X0+3608]
	027 Call 0x1C17CF4
	028 Move X0, 0x1AE4000
	029 Move X0, [X0+432]
	030 Call 0x1C17CF4
	031 Move X0, 0x1B0D000
	032 Move X0, [X0+880]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X22+24], W8
	036 Move X8, [X21+32]
	037 Move X8, [X8+192]
	038 Move X0, [X8+376]
	039 Move W8, [X0+309]
	040 Move TEMP, X8
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfEqual {45}
	044 Call 0x1C5D684
	045 Call 0x1C17F10
	046 Move X8, [X21+32]
	047 Move X22, X0
	048 Move X8, [X8+192]
	049 Move X1, [X8+384]
	050 Call 0x237C728, X0
	051 Compare X22, 0
	052 JumpIfEqual {267}
	053 Move X8, 0x1B0D000
	054 Move X8, [X8+880]
	055 Move [X22+16], X19
	056 Move X0, [X8]
	057 Call 0x1C17F10
	058 Move X1, X31
	059 Move X19, X0
	060 Call JSONArray..ctor, X0
	061 Move X8, [X22+16]
	062 Move X20, [X20+64]
	063 Compare X8, 0
	064 JumpIfEqual {89}
	065 Move X8, [X21+32]
	066 Move X8, [X8+192]
	067 Move X0, [X8+400]
	068 Move W8, [X0+309]
	069 Move TEMP, X8
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfEqual {74}
	073 Call 0x1C5D684
	074 Call 0x1C17F10
	075 Move X8, [X21+32]
	076 Move X1, X22
	077 Move X24, X0
	078 Move X8, [X8+192]
	079 Move X2, [X8+392]
	080 Move X3, [X8+408]
	081 Call Func`2<Object, Boolean>..ctor, X0, X1, X2
	082 Move X8, [X21+32]
	083 Move X0, X20
	084 Move X1, X24
	085 Move X8, [X8+192]
	086 Move X2, [X8+416]
	087 Call Enumerable.Where, X0, X1
	088 Move X20, X0
	089 Compare X20, 0
	090 JumpIfEqual {267}
	091 Move X8, [X21+32]
	092 Move X8, [X8+192]
	093 Move X1, [X8+368]
	094 Move W8, [X1+309]
	095 Move TEMP, X8
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 JumpIfEqual {102}
	099 Move X0, X1
	100 Call 0x1C5D684
	101 Move X1, X0
	102 Move X8, [X20]
	103 NotImplemented "Instruction LDRH not yet implemented."
	104 Compare X9, 0
	105 JumpIfEqual {112}
	106 Move X10, [X8+176]
	107 Add X10, X10, 8
	108 NotImplemented "Instruction LDUR not yet implemented."
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Subtract X9, X9, 1
	111 Add X10, X10, 16
	112 Move X0, X20
	113 Move W2, W31
	114 Call 0x1C5D788
	115 NotImplemented "Instruction LDRSW not yet implemented."
	116 Add X8, X8, X9
	117 Add X0, X8, 312
	118 Move X8, [X0]
	119 Move X1, [X0+8]
	120 Move X26, 0x1AE3000
	121 Move X26, [X26+3584]
	122 Move X0, X20
	123 NotImplemented "Instruction BLR not yet implemented."
	124 Move X20, X0
	125 Compare X0, 0
	126 JumpIfEqual {268}
	127 Move X27, 0x1AE3000
	128 Move X28, 0x1AE4000
	129 Move X27, [X27+3608]
	130 Move X28, [X28+432]
	131 And W23, W23, 1
	132 Move X8, [X20]
	133 Move X1, [X27]
	134 NotImplemented "Instruction LDRH not yet implemented."
	135 Compare X9, 0
	136 JumpIfEqual {143}
	137 Move X10, [X8+176]
	138 Add X10, X10, 8
	139 NotImplemented "Instruction LDUR not yet implemented."
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Subtract X9, X9, 1
	142 Add X10, X10, 16
	143 Move X0, X20
	144 Move W2, W31
	145 Call 0x1C5D788
	146 NotImplemented "Instruction LDRSW not yet implemented."
	147 Add X8, X8, X9
	148 Add X0, X8, 312
	149 Move X8, [X0]
	150 Move X1, [X0+8]
	151 Move X0, X20
	152 NotImplemented "Instruction BLR not yet implemented."
	153 Move TEMP, X0
	154 And TEMP, TEMP, 1
	155 Compare TEMP, 1
	156 JumpIfNotEqual {224}
	157 Move X8, [X21+32]
	158 Move X8, [X8+192]
	159 Move X1, [X8+272]
	160 Move W8, [X1+309]
	161 Move TEMP, X8
	162 And TEMP, TEMP, 1
	163 Compare TEMP, 1
	164 JumpIfEqual {168}
	165 Move X0, X1
	166 Call 0x1C5D684
	167 Move X1, X0
	168 Move X8, [X20]
	169 NotImplemented "Instruction LDRH not yet implemented."
	170 Compare X9, 0
	171 JumpIfEqual {178}
	172 Move X10, [X8+176]
	173 Add X10, X10, 8
	174 NotImplemented "Instruction LDUR not yet implemented."
	175 NotImplemented "Instruction CMP not yet implemented."
	176 Subtract X9, X9, 1
	177 Add X10, X10, 16
	178 Move X0, X20
	179 Move W2, W31
	180 Call 0x1C5D788
	181 NotImplemented "Instruction LDRSW not yet implemented."
	182 Add X8, X8, X9
	183 Add X0, X8, 312
	184 Move X8, [X0]
	185 Move X1, [X0+8]
	186 Move X0, X20
	187 NotImplemented "Instruction BLR not yet implemented."
	188 Move X24, X0
	189 Compare X0, 0
	190 JumpIfEqual {265}
	191 Move X8, [X24]
	192 Move X25, [X22+16]
	193 Move X1, [X28]
	194 NotImplemented "Instruction LDRH not yet implemented."
	195 Compare X9, 0
	196 JumpIfEqual {203}
	197 Move X10, [X8+176]
	198 Add X10, X10, 8
	199 NotImplemented "Instruction LDUR not yet implemented."
	200 NotImplemented "Instruction CMP not yet implemented."
	201 Subtract X9, X9, 1
	202 Add X10, X10, 16
	203 Move W2, 18
	204 Move X0, X24
	205 Call 0x1C5D788
	206 Move W9, [X10]
	207 Add W9, W9, 18
	208 Add X8, X8, W9
	209 Add X0, X8, 312
	210 Move X8, [X0]
	211 Move X3, [X0+8]
	212 Move X0, X24
	213 Move X1, X25
	214 Move W2, W23
	215 NotImplemented "Instruction BLR not yet implemented."
	216 Move X1, X0
	217 Compare X19, 0
	218 JumpIfEqual {266}
	219 Move X8, [X19]
	220 Move X9, [X8+648]
	221 Move X2, [X8+656]
	222 Move X0, X19
	223 NotImplemented "Instruction BLR not yet implemented."
	224 Move X21, X31
	225 Move W22, 6
	226 Compare X20, 0
	227 JumpIfEqual {249}
	228 Move X8, [X20]
	229 Move X1, [X26]
	230 NotImplemented "Instruction LDRH not yet implemented."
	231 Compare X9, 0
	232 JumpIfEqual {239}
	233 Move X10, [X8+176]
	234 Add X10, X10, 8
	235 NotImplemented "Instruction LDUR not yet implemented."
	236 NotImplemented "Instruction CMP not yet implemented."
	237 Subtract X9, X9, 1
	238 Add X10, X10, 16
	239 Move X0, X20
	240 Move W2, W31
	241 Call 0x1C5D788
	242 NotImplemented "Instruction LDRSW not yet implemented."
	243 Add X8, X8, X9
	244 Add X0, X8, 312
	245 Move X8, [X0]
	246 Move X1, [X0+8]
	247 Move X0, X20
	248 NotImplemented "Instruction BLR not yet implemented."
	249 Compare X21, 0
	250 JumpIfNotEqual {269}
	251 NotImplemented "Instruction CMP not yet implemented."
	252 Move X0, X19
	253 Move X20, [X31+80]
	254 Move X19, [X31+88]
	255 Move X22, [X31+64]
	256 Move X21, [X31+72]
	257 Move X24, [X31+48]
	258 Move X23, [X31+56]
	259 Move X26, [X31+32]
	260 Move X25, [X31+40]
	261 Move X28, [X31+16]
	262 Move X27, [X31+24]
	263 Move X30, [X31+96]
	264 Return X0
	265 Call 0x1C17F20
	266 Call 0x1C17F20
	267 Call 0x1C17F20
	268 Call 0x1C17F20
	269 Move X0, X21
	270 Call 0x1C17F18
	271 Move X22, X0
	272 NotImplemented "Instruction CMP not yet implemented."
	273 Move X0, X22
	274 Call 0x3EB2AD0
	275 Move X21, [X0]
	276 Call 0x3EB2AE0
	277 Move W22, W31
	278 Compare X20, 0
	279 JumpIfNotEqual {228}
	280 Move X21, X31
	281 Move X22, X0
	282 Compare X20, 0
	283 JumpIfEqual {305}
	284 Move X8, [X20]
	285 Move X1, [X26]
	286 NotImplemented "Instruction LDRH not yet implemented."
	287 Compare X9, 0
	288 JumpIfEqual {295}
	289 Move X10, [X8+176]
	290 Add X10, X10, 8
	291 NotImplemented "Instruction LDUR not yet implemented."
	292 NotImplemented "Instruction CMP not yet implemented."
	293 Subtract X9, X9, 1
	294 Add X10, X10, 16
	295 Move X0, X20
	296 Move W2, W31
	297 Call 0x1C5D788
	298 NotImplemented "Instruction LDRSW not yet implemented."
	299 Add X8, X8, X9
	300 Add X0, X8, 312
	301 Move X8, [X0]
	302 Move X1, [X0+8]
	303 Move X0, X20
	304 NotImplemented "Instruction BLR not yet implemented."
	305 Compare X21, 0
	306 JumpIfNotEqual {309}
	307 Move X0, X22
	308 Call 0x1D2D690
	309 Move X0, X21
	310 Call 0x1C17F18
	311 Call 0x1991590

Method: System.Void FromJSON(SimpleJSON.JSONNode json)

Disassembly:
	0x026120CC ADD X31, X29, 0x0
	0x026120D0 LDP X20, X19, [X31 + 0x30]
	0x026120D4 LDP X22, X21, [X31 + 0x20]
	0x026120D8 LDR X23, [X31 + 0x10]
	0x026120DC LDP X29, X30, [X31], #0x40
	0x026120E0 RET
	0x026120E4 BL 0x1C16F20
	0x026120E8 MOV X0, X20
	0x026120EC BL 0x19903C0
	0x026120F0 ADRP X0, 0x1AE1000
	0x026120F4 LDR X0, [X0 + 0x750]
	0x026120F8 BL 0x1C16D08
	0x026120FC MOV X1, X0
	0x02612100 MOVZ W0, 0x2
	0x02612104 MOV X2, X20
	0x02612108 BL 0x19963F0
	0x0261210C STURB W0, [X29 - 0x20]
	0x02612110 ADRP X0, 0x1B0B000
	0x02612114 LDR X0, [X0 + 0x328]
	0x02612118 BL 0x1C16D08
	0x0261211C SUB X1, X29, 0x20
	0x02612120 BL 0x1C16E04
	0x02612124 MOV X20, X0
	0x02612128 ADRP X0, 0x1B0B000
	0x0261212C LDR X0, [X0 + 0x330]
	0x02612130 BL 0x1C16D08
	0x02612134 MOV X21, X0
	0x02612138 ADRP X0, 0x1B0B000
	0x0261213C LDR X0, [X0 + 0x368]
	0x02612140 BL 0x1C16D08
	0x02612144 MOV X2, X0
	0x02612148 MOV X0, X21
	0x0261214C MOV X1, X20
	0x02612150 MOV X3, X31
	0x02612154 BL 0x3227BD4
	0x02612158 MOV X20, X0
	0x0261215C ADRP X0, 0x1AE1000
	0x02612160 LDR X0, [X0 + 0x5B0]
	0x02612164 BL 0x1C16D08
	0x02612168 BL 0x1C16F10
	0x0261216C MOV X1, X20
	0x02612170 MOV X2, X31
	0x02612174 MOV X21, X0
	0x02612178 BL 0x337DF1C
	0x0261217C MOV X0, X21
	0x02612180 MOV X1, X19
	0x02612184 BL 0x1C16DEC
	0x02612188 BL 0x3EB1B20
	0x0261218C STP X29, X30, [X31 - 0x40]!
	0x02612190 STP X24, X23, [X31 + 0x10]
	0x02612194 STP X22, X21, [X31 + 0x20]
	0x02612198 STP X20, X19, [X31 + 0x30]
	0x0261219C ADD X29, X31, 0x0
	0x026121A0 SUB X31, X31, 0x20
	0x026121A4 MRS X24, 0xC000
	0x026121A8 LDR X8, [X24 + 0x28]
	0x026121AC MOV X21, X0
	0x026121B0 STUR X8, [X29 - 0x8]
	0x026121B4 LDR X8, [X2 + 0x20]
	0x026121B8 LDR X8, [X8 + 0xC0]
	0x026121BC LDR X9, [X8 + 0x30]
	0x026121C0 LDR W20, [X9 + 0xFC]
	0x026121C4 ADD X9, X31, 0x0
	0x026121C8 ADD X10, X20, 0xF
	0x026121CC AND X10, X10, 0x1FFFFFFFF
	0x026121D0 SUB X22, X9, X10
	0x026121D4 ADD X31, X22, 0x0
	0x026121D8 LDR X0, [X0 + 0x40]
	0x026121DC CBZ X0, 0x2612260
	0x026121E0 MOV X19, X1
	0x026121E4 LDR X1, [X8 + 0x10]
	0x026121E8 MOV X23, X2
	0x026121EC LDR X8, [X1]
	0x026121F0 BLR X8
	0x026121F4 LDR X8, [X23 + 0x20]
	0x026121F8 SUB X9, X29, 0xC
	0x026121FC SUB X3, X29, 0x20
	0x02612200 MOV X2, X21
	0x02612204 LDR X8, [X8 + 0xC0]
	0x02612208 MOV X4, X22
	0x0261220C LDR X1, [X8 + 0x50]
	0x02612210 LDR X8, [X1]
	0x02612214 STUR W0, [X29 - 0xC]
	0x02612218 STP X9, X22, [X29 - 0x20]
	0x0261221C LDR X9, [X1 + 0x10]
	0x02612220 MOV X0, X8
	0x02612224 BLR X9
	0x02612228 MOV X0, X19
	0x0261222C MOV X1, X22
	0x02612230 MOV X2, X20
	0x02612234 BL 0x3EB1AC0
	0x02612238 LDR X8, [X24 + 0x28]
	0x0261223C LDUR X9, [X29 - 0x8]
	0x02612240 CMP X8, X9
	0x02612244 B.NE 0x2612264
	0x02612248 ADD X31, X29, 0x0
	0x0261224C LDP X20, X19, [X31 + 0x30]
	0x02612250 LDP X22, X21, [X31 + 0x20]
	0x02612254 LDP X24, X23, [X31 + 0x10]
	0x02612258 LDP X29, X30, [X31], #0x40
	0x0261225C RET
	0x02612260 BL 0x1C16F20
	0x02612264 BL 0x3EB1B20
	0x02612268 STP X30, X21, [X31 - 0x20]!
	0x0261226C STP X20, X19, [X31 + 0x10]
	0x02612270 MOV X20, X0
	0x02612274 LDR X0, [X0 + 0x40]
	0x02612278 CBZ X0, 0x26122C0
	0x0261227C LDR X8, [X2 + 0x20]
	0x02612280 MOV W19, W1
	0x02612284 MOV X21, X2
	0x02612288 LDR X8, [X8 + 0xC0]
	0x0261228C LDR X1, [X8 + 0x10]
	0x02612290 LDR X8, [X1]
	0x02612294 BLR X8
	0x02612298 LDR X8, [X21 + 0x20]
	0x0261229C MOV W1, W0
	0x026122A0 MOV X0, X20
	0x026122A4 MOV W2, W19
	0x026122A8 LDR X8, [X8 + 0xC0]
	0x026122AC LDP X20, X19, [X31 + 0x10]
	0x026122B0 LDR X3, [X8 + 0x60]
	0x026122B4 LDR X4, [X3]
	0x026122B8 LDP X30, X21, [X31], #0x20
	0x026122BC BR X4
	0x026122C0 BL 0x1C16F20
	0x026122C4 STP X29, X30, [X31 - 0x50]!
	0x026122C8 STR X25, [X31 + 0x10]
	0x026122CC STP X24, X23, [X31 + 0x20]
	0x026122D0 STP X22, X21, [X31 + 0x30]
	0x026122D4 STP X20, X19, [X31 + 0x40]
	0x026122D8 ADD X29, X31, 0x0
	0x026122DC SUB X31, X31, 0x20
	0x026122E0 MRS X24, 0xC000
	0x026122E4 LDR X8, [X24 + 0x28]
	0x026122E8 ADD X10, X31, 0x0
	0x026122EC STUR X8, [X29 - 0x8]
	0x026122F0 LDR X8, [X3 + 0x20]
	0x026122F4 LDR X8, [X8 + 0xC0]
	0x026122F8 LDR X9, [X8 + 0x30]
	0x026122FC LDR W9, [X9 + 0xFC]
	0x02612300 ADD X9, X9, 0xF
	0x02612304 AND X9, X9, 0x1FFFFFFFF
	0x02612308 SUB X21, X10, X9
	0x0261230C ADD X31, X21, 0x0
	0x02612310 CMP W2, 0x1
	0x02612314 B.LT 0x2612394
	0x02612318 MOV W22, W1
	0x0261231C LDR X1, [X8 + 0x50]
	0x02612320 SUB X25, X29, 0xC
	0x02612324 MOV X20, X0
	0x02612328 MOV X19, X3
	0x0261232C LDR X0, [X1]
	0x02612330 STUR W22, [X29 - 0xC]
	0x02612334 STP X25, X21, [X29 - 0x20]
	0x02612338 LDR X8, [X1 + 0x10]
	0x0261233C MOV W23, W2
	0x02612340 SUB X3, X29, 0x20
	0x02612344 MOV X2, X20
	0x02612348 MOV X4, X21
	0x0261234C BLR X8
	0x02612350 SUBS W23, W23, 0x1
	0x02612354 B.EQ 0x2612394
	0x02612358 ADD W22, W22, 0x1
	0x0261235C LDR X8, [X19 + 0x20]
	0x02612360 SUB X3, X29, 0x20
	0x02612364 MOV X2, X20
	0x02612368 MOV X4, X21
	0x0261236C LDR X8, [X8 + 0xC0]

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+160], X30
	003 Move [X31+168], X25
	004 Move [X31+176], X24
	005 Move [X31+184], X23
	006 Move [X31+192], X22
	007 Move [X31+200], X21
	008 Move [X31+208], X20
	009 Move [X31+216], X19
	010 Move X22, 0x1DC9000
	011 Move W8, [X22+25]
	012 Move X19, X2
	013 Move X21, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x1AE3000
	020 Move X0, [X0+432]
	021 Call 0x1C17CF4
	022 Move X0, 0x1AE3000
	023 Move X0, [X0+1120]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+25], W8
	027 NotImplemented "Instruction MOVI not yet implemented."
	028 Move [X31+144], X31
	029 Move [X31+112], V0
	030 Move [X31+120], V0
	031 Move [X31+80], V0
	032 Move [X31+88], V0
	033 Compare X21, 0
	034 JumpIfEqual {179}
	035 Move X8, [X21]
	036 Move X0, X21
	037 Move X9, [X8+568]
	038 Move X1, [X8+576]
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {180}
	044 Move X8, [X21]
	045 Move X0, X21
	046 Move X9, [X8+488]
	047 Move X1, [X8+496]
	048 NotImplemented "Instruction BLR not yet implemented."
	049 Move X8, [X20+64]
	050 Compare X8, 0
	051 JumpIfEqual {179}
	052 Move W8, [X8+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X8, [X21]
	055 Move X0, X21
	056 Move X9, [X8+488]
	057 Move X1, [X8+496]
	058 NotImplemented "Instruction BLR not yet implemented."
	059 Move X8, [X20+64]
	060 Compare X8, 0
	061 JumpIfEqual {179}
	062 Move X9, [X21]
	063 Move W24, [X8+24]
	064 Move W22, W0
	065 Move X0, X21
	066 Move X8, [X9+488]
	067 Move X1, [X9+496]
	068 NotImplemented "Instruction BLR not yet implemented."
	069 NotImplemented "Instruction ORN not yet implemented."
	070 Add W31, W24, W8
	071 Move X8, [X19+32]
	072 Subtract W24, W24, W0
	073 Subtract W22, W22, 1
	074 Move X8, [X8+192]
	075 Move X23, [X8+440]
	076 Move X8, [X23+32]
	077 Add W1, W22, W24
	078 Move X0, X20
	079 Move X8, [X8+192]
	080 Move X2, [X8+88]
	081 Call 0x2611A08, X0, X1
	082 Subtract W24, W24, 1
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move X8, [X21]
	085 Move X0, X21
	086 Move X9, [X8+824]
	087 Move X1, [X8+832]
	088 Add X8, X31, 8
	089 NotImplemented "Instruction BLR not yet implemented."
	090 Add X0, X31, 80
	091 Add X1, X31, 8
	092 Move W2, 72
	093 Call 0x3EB2AC0
	094 Add X0, X31, 80
	095 Move X1, X31
	096 Call Enumerator.MoveNext, X0
	097 Move TEMP, X0
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfNotEqual {169}
	101 Move X24, 0x1AE3000
	102 Move X25, 0x1AE3000
	103 Move X24, [X24+1120]
	104 Move X25, [X25+432]
	105 Move W21, W31
	106 Add X0, X31, 80
	107 Move X1, X31
	108 Call Enumerator.get_Current, X0
	109 Move X22, X0
	110 Move X0, [X24]
	111 Move X23, X1
	112 Move W8, [X0+224]
	113 Compare W8, 0
	114 JumpIfNotEqual {116}
	115 Call 0x1C17DFC
	116 Move X0, X22
	117 Move X1, X23
	118 Move X2, X31
	119 Call JSONNode.op_Implicit, X0
	120 Move X8, [X20+64]
	121 Compare X8, 0
	122 JumpIfEqual {179}
	123 Move X9, [X19+32]
	124 Move W10, [X8+24]
	125 Move X22, X0
	126 Move X9, [X9+192]
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move X2, [X9+40]
	129 Move X0, X8
	130 Move W1, W21
	131 Call List`1<Object>.get_Item, X0, X1
	132 Move X1, [X9+448]
	133 Move X0, X20
	134 Call 0x2611078, X0
	135 Move X23, X0
	136 Compare X0, 0
	137 JumpIfEqual {179}
	138 Move X8, [X23]
	139 Move X1, [X25]
	140 NotImplemented "Instruction LDRH not yet implemented."
	141 Compare X9, 0
	142 JumpIfEqual {149}
	143 Move X10, [X8+176]
	144 Add X10, X10, 8
	145 NotImplemented "Instruction LDUR not yet implemented."
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Subtract X9, X9, 1
	148 Add X10, X10, 16
	149 Move W2, 19
	150 Move X0, X23
	151 Call 0x1C5D788
	152 Move W9, [X10]
	153 Add W9, W9, 19
	154 Add X8, X8, W9
	155 Add X0, X8, 312
	156 Move X8, [X0]
	157 Move X2, [X0+8]
	158 Move X0, X23
	159 Move X1, X22
	160 NotImplemented "Instruction BLR not yet implemented."
	161 Add X0, X31, 80
	162 Move X1, X31
	163 Add W21, W21, 1
	164 Call Enumerator.MoveNext, X0
	165 Move TEMP, X0
	166 And TEMP, TEMP, 1
	167 Compare TEMP, 1
	168 JumpIfEqual {106}
	169 Move X20, [X31+208]
	170 Move X19, [X31+216]
	171 Move X22, [X31+192]
	172 Move X21, [X31+200]
	173 Move X24, [X31+176]
	174 Move X23, [X31+184]
	175 Move X30, [X31+160]
	176 Move X25, [X31+168]
	177 Add X31, X31, 224
	178 Return 
	179 Call 0x1C17F20
	180 Move X0, 0x1AEA000
	181 Move X0, [X0+3080]
	182 Call 0x1C17D08
	183 Call 0x1C17F10
	184 Move X20, X0
	185 Move X0, 0x1B0C000
	186 Move X0, [X0+888]
	187 Call 0x1C17D08
	188 Move X1, X0
	189 Move X0, X20
	190 Move X2, X31
	191 Call InvalidCastException..ctor, X0, X1
	192 Move X0, X20
	193 Move X1, X19
	194 Call 0x1C17DEC

Method: System.Boolean TryFindChild(System.Object childObjectKey, out SpatialSys.ObservableState.IStateObject result)

Disassembly:
	0x02612370 LDR X1, [X8 + 0x50]
	0x02612374 LDR X0, [X1]
	0x02612378 STUR W22, [X29 - 0xC]
	0x0261237C STP X25, X21, [X29 - 0x20]
	0x02612380 LDR X8, [X1 + 0x10]
	0x02612384 BLR X8
	0x02612388 SUBS W23, W23, 0x1
	0x0261238C ADD W22, W22, 0x1
	0x02612390 B.NE 0x261235C
	0x02612394 LDR X8, [X24 + 0x28]
	0x02612398 LDUR X9, [X29 - 0x8]
	0x0261239C CMP X8, X9
	0x026123A0 B.NE 0x26123C0
	0x026123A4 ADD X31, X29, 0x0
	0x026123A8 LDP X20, X19, [X31 + 0x40]
	0x026123AC LDP X22, X21, [X31 + 0x30]
	0x026123B0 LDP X24, X23, [X31 + 0x20]
	0x026123B4 LDR X25, [X31 + 0x10]
	0x026123B8 LDP X29, X30, [X31], #0x50
	0x026123BC RET
	0x026123C0 BL 0x3EB1B20
	0x026123C4 STP X29, X30, [X31 - 0x60]!
	0x026123C8 STP X28, X27, [X31 + 0x10]
	0x026123CC STP X26, X25, [X31 + 0x20]
	0x026123D0 STP X24, X23, [X31 + 0x30]
	0x026123D4 STP X22, X21, [X31 + 0x40]
	0x026123D8 STP X20, X19, [X31 + 0x50]
	0x026123DC ADD X29, X31, 0x0
	0x026123E0 SUB X31, X31, 0x40
	0x026123E4 MRS X8, 0xC000
	0x026123E8 STP X2, X8, [X29 - 0x38]
	0x026123EC LDR X8, [X8 + 0x28]
	0x026123F0 ADRP X21, 0x1DC8000
	0x026123F4 MOV X24, X3
	0x026123F8 MOV W25, W1
	0x026123FC STUR X8, [X29 - 0x8]
	0x02612400 LDRB W8, [X21 + 0x20]
	0x02612404 MOV X20, X0
	0x02612408 STUR W1, [X29 - 0x24]
	0x0261240C TBNZ X8, 0x0, 0x261243C
	0x02612410 ADRP X0, 0x1AE1000
	0x02612414 LDR X0, [X0 + 0x6A8]
	0x02612418 BL 0x1C16CF4
	0x0261241C ADRP X0, 0x1B0B000
	0x02612420 LDR X0, [X0 + 0x318]
	0x02612424 BL 0x1C16CF4
	0x02612428 ADRP X0, 0x1B0B000
	0x0261242C LDR X0, [X0 + 0x310]
	0x02612430 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x1DC9000
	008 Move W8, [X23+26]
	009 Move X20, X3
	010 Move X19, X2
	011 Move X22, X1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x1AE2000
	018 Move X0, [X0+1880]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+26], W8
	022 Compare X22, 0
	023 JumpIfEqual {59}
	024 Move X8, 0x1AE2000
	025 Move X8, [X8+1880]
	026 Move X9, [X22]
	027 Move X0, X22
	028 Move X1, [X8]
	029 Move X8, [X9+64]
	030 Move X9, [X1+64]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Call 0x1C17E08
	033 Move W1, [X0]
	034 Move TEMP, X1
	035 And TEMP, TEMP, -2147483648
	036 Compare TEMP, -2147483648
	037 JumpIfEqual {48}
	038 Move X0, [X21+64]
	039 Compare X0, 0
	040 JumpIfEqual {59}
	041 Move W8, [X0+24]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X8, [X20+32]
	044 Move X8, [X8+192]
	045 Move X2, [X8+40]
	046 Call List`1<Object>.get_Item, X0, X1
	047 Move W8, 1
	048 Move X0, X31
	049 Move W8, W31
	050 Move [X19], X0
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move W0, W8
	056 Move X30, [X31+48]
	057 Move X23, [X31+56]
	058 Return X0
	059 Call 0x1C17F20
	060 Call 0x1C181E0

Method: System.Boolean TryFindChild(System.Int32 key, out SpatialSys.ObservableState.IStateObject result)

Disassembly:
	0x02612434 MOVZ W8, 0x1
	0x02612438 STRB W8, [X21 + 0x20]
	0x0261243C LDR X8, [X24 + 0x20]
	0x02612440 LDR X19, [X8 + 0xC0]
	0x02612444 LDR X8, [X19 + 0x30]
	0x02612448 LDR W21, [X8 + 0xFC]
	0x0261244C ADD X8, X31, 0x0
	0x02612450 ADD X9, X21, 0xF
	0x02612454 AND X9, X9, 0x1FFFFFFFF
	0x02612458 SUB X28, X8, X9
	0x0261245C ADD X31, X28, 0x0
	0x02612460 ADD X8, X31, 0x0
	0x02612464 SUB X27, X8, X9
	0x02612468 ADD X31, X27, 0x0
	0x0261246C ADD X8, X31, 0x0
	0x02612470 SUB X26, X8, X9
	0x02612474 ADD X31, X26, 0x0
	0x02612478 ADD X8, X31, 0x0
	0x0261247C SUB X22, X8, X9
	0x02612480 ADD X31, X22, 0x0
	0x02612484 ADD X8, X31, 0x0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X2
	004 Move TEMP, X1
	005 And TEMP, TEMP, -2147483648
	006 Compare TEMP, -2147483648
	007 JumpIfEqual {18}
	008 Move X0, [X0+64]
	009 Compare X0, 0
	010 JumpIfEqual {25}
	011 Move W8, [X0+24]
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move X8, [X3+32]
	014 Move X8, [X8+192]
	015 Move X2, [X8+40]
	016 Call List`1<Object>.get_Item, X0, X1
	017 Move W8, 1
	018 Move X0, X31
	019 Move W8, W31
	020 Move [X19], X0
	021 Move W0, W8
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Return X0
	025 Call 0x1C17F20

Method: System.Void Reset(System.Boolean recursively = True)

Disassembly:
	0x02612488 SUB X23, X8, X9
	0x0261248C ADD X31, X23, 0x0
	0x02612490 MOV X0, X23
	0x02612494 MOV W1, W31

ISIL:
	001 Move X8, [X2+32]
	002 Move X8, [X8+192]
	003 Move X1, [X8+464]
	004 Call 0x26113BC, X0
	005 Return 

Method: System.Void CopyTo(SpatialSys.ObservableState.IStateObject other)

Disassembly:
	0x02612498 MOV X2, X21
	0x0261249C BL 0x3EB1B10
	0x026124A0 LDR X1, [X19 + 0x68]
	0x026124A4 SUB X3, X29, 0x20
	0x026124A8 MOV X2, X31
	0x026124AC MOV X4, X28
	0x026124B0 LDR X0, [X1]
	0x026124B4 STUR X28, [X29 - 0x20]
	0x026124B8 LDR X8, [X1 + 0x10]
	0x026124BC BLR X8
	0x026124C0 MOV X0, X23
	0x026124C4 MOV X1, X28
	0x026124C8 MOV X2, X21
	0x026124CC BL 0x3EB1AC0
	0x026124D0 LDR X28, [X20 + 0x40]
	0x026124D4 MOV X0, X27
	0x026124D8 MOV X1, X23
	0x026124DC MOV X2, X21
	0x026124E0 BL 0x3EB1AC0
	0x026124E4 CBZ X28, 0x2612710
	0x026124E8 LDR X8, [X24 + 0x20]
	0x026124EC LDR X8, [X8 + 0xC0]
	0x026124F0 LDR X9, [X8 + 0x30]
	0x026124F4 LDR X1, [X8 + 0x70]
	0x026124F8 LDR W8, [X9 + 0x28]
	0x026124FC LDR X0, [X1]
	0x02612500 TBNZ X8, 0x1F, 0x2612508
	0x02612504 LDR X27, [X27]
	0x02612508 SUB X8, X29, 0xC
	0x0261250C STUR W25, [X29 - 0xC]
	0x02612510 STP X8, X27, [X29 - 0x20]
	0x02612514 LDR X8, [X1 + 0x10]
	0x02612518 SUB X3, X29, 0x20
	0x0261251C MOV X2, X28
	0x02612520 MOV X4, X27
	0x02612524 BLR X8
	0x02612528 MOVZ W8, 0x1
	0x0261252C MOV X0, X26
	0x02612530 MOV X1, X23
	0x02612534 MOV X2, X21
	0x02612538 STRB W8, [X20 + 0x20]
	0x0261253C BL 0x3EB1AC0
	0x02612540 LDR X8, [X24 + 0x20]
	0x02612544 MOV X1, X26
	0x02612548 LDR X8, [X8 + 0xC0]
	0x0261254C LDR X0, [X8 + 0x30]
	0x02612550 BL 0x1C16E04
	0x02612554 CBZ X0, 0x2612704
	0x02612558 ADRP X8, 0x1B0B000
	0x0261255C LDR X8, [X8 + 0x310]
	0x02612560 LDR X9, [X0]
	0x02612564 MOV X24, X0
	0x02612568 LDR X8, [X8]
	0x0261256C LDRB W11, [X9 + 0x130]
	0x02612570 LDRB W10, [X8 + 0x130]
	0x02612574 CMP W11, W10
	0x02612578 B.CC 0x2612704
	0x0261257C LDR X9, [X9 + 0xC8]
	0x02612580 ADD X9, X9, X10, 0x3, LSL
	0x02612584 LDUR X9, [X9 - 0x8]
	0x02612588 CMP X9, X8
	0x0261258C B.NE 0x2612704
	0x02612590 SUB X0, X29, 0x24
	0x02612594 MOV X1, X31
	0x02612598 BL 0x337B6E0
	0x0261259C LDR X8, [X24]
	0x026125A0 LDRB W3, [X20 + 0x39]
	0x026125A4 MOV X2, X0
	0x026125A8 MOV X0, X24
	0x026125AC LDR X9, [X8 + 0x368]
	0x026125B0 LDR X4, [X8 + 0x370]
	0x026125B4 MOV X1, X20
	0x026125B8 BLR X9
	0x026125BC LDR X8, [X24]
	0x026125C0 MOV X0, X24
	0x026125C4 LDR X9, [X8 + 0x378]
	0x026125C8 LDR X1, [X8 + 0x380]
	0x026125CC BLR X9
	0x026125D0 LDR X24, [X20 + 0x30]
	0x026125D4 CBZ X24, 0x2612710
	0x026125D8 ADRP X10, 0x1B0B000
	0x026125DC LDR X8, [X24]
	0x026125E0 LDR X10, [X10 + 0x318]
	0x026125E4 LDRH W9, [X8 + 0x12E]
	0x026125E8 LDR X1, [X10]
	0x026125EC CBZ X9, 0x2612610
	0x026125F0 LDR X10, [X8 + 0xB0]
	0x026125F4 ADD X10, X10, 0x8
	0x026125F8 LDUR X11, [X10 - 0x8]
	0x026125FC CMP X11, X1
	0x02612600 B.EQ 0x2612620
	0x02612604 SUBS X9, X9, 0x1
	0x02612608 ADD X10, X10, 0x10
	0x0261260C B.NE 0x26125F8
	0x02612610 MOV X0, X24
	0x02612614 MOV W2, W31
	0x02612618 BL 0x1C5C788
	0x0261261C B 0x261262C
	0x02612620 LDRSW X9, [X10]
	0x02612624 ADD X8, X8, X9, 0x4, LSL
	0x02612628 ADD X0, X8, 0x138
	0x0261262C LDP X8, X1, [X0]
	0x02612630 MOV X0, X24
	0x02612634 BLR X8
	0x02612638 CBZ X0, 0x2612710
	0x0261263C ADRP X10, 0x1AE1000
	0x02612640 LDR X8, [X0]
	0x02612644 LDR X10, [X10 + 0x6A8]
	0x02612648 LDUR W25, [X29 - 0x24]
	0x0261264C MOV X24, X0
	0x02612650 LDRH W9, [X8 + 0x12E]
	0x02612654 LDR X1, [X10]
	0x02612658 CBZ X9, 0x261267C
	0x0261265C LDR X10, [X8 + 0xB0]
	0x02612660 ADD X10, X10, 0x8
	0x02612664 LDUR X11, [X10 - 0x8]
	0x02612668 CMP X11, X1
	0x0261266C B.EQ 0x261268C
	0x02612670 SUBS X9, X9, 0x1
	0x02612674 ADD X10, X10, 0x10
	0x02612678 B.NE 0x2612664
	0x0261267C MOVZ W2, 0x11
	0x02612680 MOV X0, X24
	0x02612684 BL 0x1C5C788
	0x02612688 B 0x261269C
	0x0261268C LDR W9, [X10]
	0x02612690 ADD W9, W9, 0x11
	0x02612694 ADD X8, X8, W9, 0x4, SXTW
	0x02612698 ADD X0, X8, 0x138
	0x0261269C LDP X8, X3, [X0]
	0x026126A0 MOV X0, X24
	0x026126A4 MOV X1, X20
	0x026126A8 MOV W2, W25
	0x026126AC BLR X8
	0x026126B0 MOV X0, X22
	0x026126B4 MOV X1, X23
	0x026126B8 MOV X2, X21
	0x026126BC BL 0x3EB1AC0
	0x026126C0 LDUR X0, [X29 - 0x38]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0x1DC9000
	010 Move W8, [X22+27]
	011 Move X20, X2
	012 Move X19, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x1AE3000
	019 Move X0, [X0+432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+27], W8
	023 Move X8, [X20+32]
	024 Move X8, [X8+192]
	025 Move X1, [X8]
	026 Move W8, [X1+309]
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {34}
	031 Move X0, X1
	032 Call 0x1C5D684
	033 Move X1, X0
	034 Compare X19, 0
	035 JumpIfEqual {38}
	036 Move X8, [X19]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X8, [X21+64]
	039 Compare X8, 0
	040 JumpIfEqual {146}
	041 Move X9, [X20+32]
	042 Move W23, [X8+24]
	043 Move X8, [X9+192]
	044 Compare W23, 0
	045 JumpIfEqual {66}
	046 Compare X19, 0
	047 JumpIfEqual {146}
	048 Move X9, [X19+64]
	049 Compare X9, 0
	050 JumpIfEqual {146}
	051 Move W22, [X9+24]
	052 Subtract W24, W23, W22
	053 NotImplemented "Instruction ORN not yet implemented."
	054 Add W31, W22, W9
	055 Move X23, [X8+440]
	056 Add W24, W9, 1
	057 Move X8, [X23+32]
	058 Subtract W22, W22, 1
	059 Move X0, X19
	060 Move W1, W22
	061 Move X8, [X8+192]
	062 Move X2, [X8+88]
	063 Call 0x2611A08, X0, X1
	064 Add W8, W24, W22
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Compare X19, 0
	067 JumpIfEqual {146}
	068 Move X1, [X8+464]
	069 Move X0, X19
	070 Move X20, [X31+48]
	071 Move X19, [X31+56]
	072 Move X22, [X31+32]
	073 Move X21, [X31+40]
	074 Move X24, [X31+16]
	075 Move X23, [X31+24]
	076 Move X30, [X31+64]
	077 Move X25, [X31+72]
	078 Call 0x26113BC, X0
	079 Return 
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move X1, [X8+448]
	082 Move X0, X19
	083 Call 0x2611078, X0
	084 NotImplemented "Instruction CMP not yet implemented."
	085 NotImplemented "Instruction ORN not yet implemented."
	086 Add W22, W8, W23
	087 Move X8, [X20+32]
	088 Move X0, X19
	089 Move X8, [X8+192]
	090 Move X1, [X8+448]
	091 Call 0x2611078, X0
	092 Subtract W22, W22, 1
	093 Move X0, [X21+64]
	094 Compare X0, 0
	095 JumpIfEqual {146}
	096 Move X25, 0x1AE3000
	097 Move X25, [X25+432]
	098 Move W22, W31
	099 Move W8, [X0+24]
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X8, [X20+32]
	102 Move W1, W22
	103 Move X8, [X8+192]
	104 Move X2, [X8+40]
	105 Call List`1<Object>.get_Item, X0, X1
	106 Move X8, [X19+64]
	107 Compare X8, 0
	108 JumpIfEqual {146}
	109 Move X9, [X20+32]
	110 Move X23, X0
	111 Move X0, X8
	112 Move W1, W22
	113 Move X9, [X9+192]
	114 Move X2, [X9+40]
	115 Call List`1<Object>.get_Item, X0, X1
	116 Compare X23, 0
	117 JumpIfEqual {146}
	118 Move X8, [X23]
	119 Move X1, [X25]
	120 Move X24, X0
	121 NotImplemented "Instruction LDRH not yet implemented."
	122 Compare X9, 0
	123 JumpIfEqual {130}
	124 Move X10, [X8+176]
	125 Add X10, X10, 8
	126 NotImplemented "Instruction LDUR not yet implemented."
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Subtract X9, X9, 1
	129 Add X10, X10, 16
	130 Move W2, 24
	131 Move X0, X23
	132 Call 0x1C5D788
	133 Move W9, [X10]
	134 Add W9, W9, 24
	135 Add X8, X8, W9
	136 Add X0, X8, 312
	137 Move X8, [X0]
	138 Move X2, [X0+8]
	139 Move X0, X23
	140 Move X1, X24
	141 NotImplemented "Instruction BLR not yet implemented."
	142 Move X0, [X21+64]
	143 Add W22, W22, 1
	144 Compare X0, 0
	145 JumpIfNotEqual {99}
	146 Call 0x1C17F20
	147 Move X20, [X31+48]
	148 Move X19, [X31+56]
	149 Move X22, [X31+32]
	150 Move X21, [X31+40]
	151 Move X24, [X31+16]
	152 Move X23, [X31+24]
	153 Move X30, [X31+64]
	154 Move X25, [X31+72]
	155 Return 
	156 Move X0, X19
	157 Call 0x1C181E0

Method: System.Boolean ListStoresPrimsAndCanAssignValue(System.Object value)

Disassembly:
	0x026126C4 MOV X1, X22
	0x026126C8 MOV X2, X21
	0x026126CC BL 0x3EB1AC0
	0x026126D0 LDUR X8, [X29 - 0x30]
	0x026126D4 LDR X8, [X8 + 0x28]
	0x026126D8 LDUR X9, [X29 - 0x8]
	0x026126DC CMP X8, X9
	0x026126E0 B.NE 0x2612714
	0x026126E4 ADD X31, X29, 0x0
	0x026126E8 LDP X20, X19, [X31 + 0x50]
	0x026126EC LDP X22, X21, [X31 + 0x40]
	0x026126F0 LDP X24, X23, [X31 + 0x30]
	0x026126F4 LDP X26, X25, [X31 + 0x20]
	0x026126F8 LDP X28, X27, [X31 + 0x10]
	0x026126FC LDP X29, X30, [X31], #0x60
	0x02612700 RET
	0x02612704 SUB X0, X29, 0x24
	0x02612708 MOV X1, X31
	0x0261270C BL 0x337B6E0
	0x02612710 BL 0x1C16F20
	0x02612714 BL 0x3EB1B20
	0x02612718 STP X29, X30, [X31 - 0x40]!
	0x0261271C STR X23, [X31 + 0x10]
	0x02612720 STP X22, X21, [X31 + 0x20]
	0x02612724 STP X20, X19, [X31 + 0x30]
	0x02612728 ADD X29, X31, 0x0
	0x0261272C SUB X31, X31, 0x30
	0x02612730 MRS X22, 0xC000
	0x02612734 LDR X8, [X22 + 0x28]
	0x02612738 MOV X19, X2
	0x0261273C ADD X9, X31, 0x0
	0x02612740 STUR X8, [X29 - 0x8]
	0x02612744 STUR X1, [X29 - 0x28]
	0x02612748 LDR X23, [X3 + 0x20]
	0x0261274C LDR X8, [X23 + 0xC0]
	0x02612750 LDR X8, [X8 + 0x30]
	0x02612754 LDR W2, [X8 + 0xFC]
	0x02612758 ADD X10, X2, 0xF
	0x0261275C AND X10, X10, 0x1FFFFFFFF
	0x02612760 SUB X21, X9, X10
	0x02612764 ADD X31, X21, 0x0
	0x02612768 LDR W8, [X8 + 0x28]
	0x0261276C LDR X20, [X0 + 0x40]
	0x02612770 MOV X0, X21
	0x02612774 CMP W8, 0x0
	0x02612778 SUB X8, X29, 0x28
	0x0261277C CSEL X1, X1, X8, LT
	0x02612780 BL 0x3EB1AC0
	0x02612784 CBZ X20, 0x26127E8
	0x02612788 LDR X8, [X23 + 0xC0]
	0x0261278C LDR X9, [X8 + 0x30]
	0x02612790 LDR X1, [X8 + 0x80]
	0x02612794 LDR W8, [X9 + 0x28]
	0x02612798 LDR X0, [X1]
	0x0261279C TBNZ X8, 0x1F, 0x26127A4
	0x026127A0 LDR X21, [X21]
	0x026127A4 STP X21, X19, [X29 - 0x20]
	0x026127A8 LDR X8, [X1 + 0x10]
	0x026127AC SUB X3, X29, 0x20
	0x026127B0 SUB X4, X29, 0xC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1DC9000
	007 Move X22, 0x1B0B000
	008 Move W8, [X21+28]
	009 Move X22, [X22+2904]
	010 Move X19, X2
	011 Move X20, X1
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x1B0C000
	017 Move X0, [X0+896]
	018 Call 0x1C17CF4
	019 Move X0, 0x1B0B000
	020 Move X0, [X0+2904]
	021 Call 0x1C17CF4
	022 Move X0, 0x1AE2000
	023 Move X0, [X0+1728]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+28], W8
	027 Move X1, [X22]
	028 Move X0, X20
	029 Call 0x1C17E00
	030 Compare X0, 0
	031 JumpIfEqual {39}
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move W0, W31
	037 Move X30, [X31+48]
	038 Return X0
	039 Move X8, 0x1AE2000
	040 Move X8, [X8+1728]
	041 Move X0, [X8]
	042 Move X8, 0x1B0C000
	043 Move X8, [X8+896]
	044 Move W9, [X0+224]
	045 Move X20, [X8]
	046 Compare W9, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X20
	050 Move X1, X31
	051 Call Type.GetTypeFromHandle, X0
	052 Move X8, [X19+32]
	053 Move X19, X0
	054 Move X1, X31
	055 Move X8, [X8+192]
	056 Move X8, [X8+480]
	057 Move X0, X8
	058 Call Type.GetTypeFromHandle, X0
	059 Compare X19, 0
	060 JumpIfEqual {72}
	061 Move X8, [X19]
	062 Move X1, X0
	063 Move X0, X19
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X3, [X8+680]
	067 Move X2, [X8+688]
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Move X30, [X31+48]
	071 CallNoReturn X3
	072 Call 0x1C17F20

Method: SpatialSys.ObservableState.IStateObject SpatialSys.ObservableState.IStateList.Add()

Disassembly:
	0x026127B4 MOV X2, X20
	0x026127B8 BLR X8
	0x026127BC LDUR W0, [X29 - 0xC]
	0x026127C0 LDR X8, [X22 + 0x28]

ISIL:
	001 Move X8, [X1+32]
	002 Move X8, [X8+192]
	003 Move X1, [X8+448]
	004 Call 0x2611078, X0
	005 Return X0

Method: System.Void SpatialSys.ObservableState.IStateList.AddMany(System.Int32 count)

Disassembly:
	0x026127C4 LDUR X9, [X29 - 0x8]
	0x026127C8 CMP X8, X9
	0x026127CC B.NE 0x26127EC
	0x026127D0 ADD X31, X29, 0x0

ISIL:
	001 Move X8, [X2+32]
	002 Move X8, [X8+192]
	003 Move X2, [X8+488]
	004 Call 0x26110A0, X0, X1
	005 Return 

Method: System.Boolean Contains(System.Object value)

Disassembly:
	0x026127D4 LDP X20, X19, [X31 + 0x30]
	0x026127D8 LDP X22, X21, [X31 + 0x20]
	0x026127DC LDR X23, [X31 + 0x10]
	0x026127E0 LDP X29, X30, [X31], #0x40
	0x026127E4 RET
	0x026127E8 BL 0x1C16F20
	0x026127EC BL 0x3EB1B20
	0x026127F0 STP X29, X30, [X31 - 0x50]!
	0x026127F4 STR X25, [X31 + 0x10]
	0x026127F8 STP X24, X23, [X31 + 0x20]
	0x026127FC STP X22, X21, [X31 + 0x30]
	0x02612800 STP X20, X19, [X31 + 0x40]
	0x02612804 ADD X29, X31, 0x0
	0x02612808 SUB X31, X31, 0x40
	0x0261280C MRS X24, 0xC000
	0x02612810 LDR X8, [X24 + 0x28]
	0x02612814 MOV W20, W2
	0x02612818 ADD X9, X31, 0x0
	0x0261281C MOV X19, X4
	0x02612820 STUR X8, [X29 - 0x8]
	0x02612824 STUR X3, [X29 - 0x40]
	0x02612828 LDR X25, [X5 + 0x20]
	0x0261282C MOV W21, W1
	0x02612830 LDR X8, [X25 + 0xC0]
	0x02612834 LDR X8, [X8 + 0x30]
	0x02612838 LDR W2, [X8 + 0xFC]
	0x0261283C ADD X10, X2, 0xF
	0x02612840 AND X10, X10, 0x1FFFFFFFF
	0x02612844 SUB X23, X9, X10
	0x02612848 ADD X31, X23, 0x0
	0x0261284C LDR W8, [X8 + 0x28]
	0x02612850 LDR X22, [X0 + 0x40]
	0x02612854 MOV X0, X23
	0x02612858 CMP W8, 0x0
	0x0261285C SUB X8, X29, 0x40
	0x02612860 CSEL X1, X3, X8, LT
	0x02612864 BL 0x3EB1AC0
	0x02612868 CBZ X22, 0x26128E0
	0x0261286C LDR X8, [X25 + 0xC0]
	0x02612870 LDR X9, [X8 + 0x30]
	0x02612874 LDR X1, [X8 + 0x88]
	0x02612878 LDR W8, [X9 + 0x28]
	0x0261287C LDR X0, [X1]
	0x02612880 TBNZ X8, 0x1F, 0x2612888
	0x02612884 LDR X23, [X23]
	0x02612888 SUB X8, X29, 0xC
	0x0261288C SUB X9, X29, 0x10
	0x02612890 STP W20, W21, [X29 - 0x10]
	0x02612894 STP X8, X9, [X29 - 0x38]
	0x02612898 STP X23, X19, [X29 - 0x28]
	0x0261289C LDR X8, [X1 + 0x10]
	0x026128A0 SUB X3, X29, 0x38
	0x026128A4 SUB X4, X29, 0x14
	0x026128A8 MOV X2, X22
	0x026128AC BLR X8
	0x026128B0 LDUR W0, [X29 - 0x14]
	0x026128B4 LDR X8, [X24 + 0x28]
	0x026128B8 LDUR X9, [X29 - 0x8]
	0x026128BC CMP X8, X9
	0x026128C0 B.NE 0x26128E4
	0x026128C4 ADD X31, X29, 0x0
	0x026128C8 LDP X20, X19, [X31 + 0x40]
	0x026128CC LDP X22, X21, [X31 + 0x30]
	0x026128D0 LDP X24, X23, [X31 + 0x20]
	0x026128D4 LDR X25, [X31 + 0x10]
	0x026128D8 LDP X29, X30, [X31], #0x50
	0x026128DC RET
	0x026128E0 BL 0x1C16F20
	0x026128E4 BL 0x3EB1B20
	0x026128E8 STR X30, [X31 - 0x20]!
	0x026128EC STP X20, X19, [X31 + 0x10]
	0x026128F0 MOV X19, X0
	0x026128F4 LDR X0, [X0 + 0x40]
	0x026128F8 CBZ X0, 0x261295C
	0x026128FC MOV X20, X1
	0x02612900 LDR X8, [X20 + 0x20]
	0x02612904 LDR X8, [X8 + 0xC0]
	0x02612908 LDR X1, [X8 + 0x10]
	0x0261290C LDR X8, [X1]
	0x02612910 BLR X8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X2+32]
	007 Move X19, X2
	008 Move X22, X1
	009 Move X20, X0
	010 Move X8, [X8+192]
	011 Move X8, [X8+496]
	012 Move W9, [X8+309]
	013 Move TEMP, X9
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {20}
	017 Move X0, X8
	018 Call 0x1C5D684
	019 Move X8, X0
	020 Move X0, X8
	021 Call 0x1C17F10
	022 Move X8, [X19+32]
	023 Move X21, X0
	024 Move X8, [X8+192]
	025 Move X1, [X8+504]
	026 Call 0x237D1B0, X0
	027 Compare X21, 0
	028 JumpIfEqual {103}
	029 Move [X21+16], X22
	030 Move X8, [X19+32]
	031 Move X1, X22
	032 Move X8, [X8+192]
	033 Move X2, [X8+512]
	034 Call 0x26126C4, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {68}
	039 Move X8, [X19+32]
	040 Move X8, [X8+192]
	041 Move X0, [X8+152]
	042 Move W8, [X0+309]
	043 Move TEMP, X8
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfEqual {48}
	047 Call 0x1C5D684
	048 Call 0x1C17F10
	049 Move X8, [X19+32]
	050 Move X1, X21
	051 Move X22, X0
	052 Move X8, [X8+192]
	053 Move X2, [X8+520]
	054 Move X3, [X8+528]
	055 Call Predicate`1<Object>..ctor, X0, X1, X2
	056 Move X8, [X19+32]
	057 Move X0, X20
	058 Move X1, X22
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X8, [X8+192]
	062 Move X22, [X31+16]
	063 Move X21, [X31+24]
	064 Move X2, [X8+536]
	065 Move X30, [X31+48]
	066 Call 0x2611434, X0, X1
	067 Return X0
	068 Move X8, [X19+32]
	069 Move X21, [X21+16]
	070 Move X8, [X8+192]
	071 Move X22, [X8+48]
	072 Move W8, [X22+309]
	073 Move TEMP, X8
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfEqual {80}
	077 Move X0, X22
	078 Call 0x1C5D684
	079 Move X22, X0
	080 Compare X21, 0
	081 JumpIfEqual {91}
	082 Move X0, X21
	083 Move X1, X22
	084 Call 0x1C17E00
	085 Move X1, X0
	086 Compare X0, 0
	087 JumpIfNotEqual {92}
	088 Move X0, X21
	089 Move X1, X22
	090 Call 0x1C181E0
	091 Move X1, X31
	092 Move X8, [X19+32]
	093 Move X0, X20
	094 Move X20, [X31+32]
	095 Move X19, [X31+40]
	096 Move X22, [X31+16]
	097 Move X21, [X31+24]
	098 Move X8, [X8+192]
	099 Move X2, [X8+544]
	100 Move X30, [X31+48]
	101 Call 0x2611410, X0, X1
	102 Return X0
	103 Call 0x1C17F20

Method: SpatialSys.ObservableState.IStateObject SpatialSys.ObservableState.IStateList.Insert(System.Int32 index)

Disassembly:
	0x02612914 CMP W0, 0x0
	0x02612918 B.LE 0x2612960
	0x0261291C LDR X0, [X19 + 0x40]
	0x02612920 CBZ X0, 0x261295C

ISIL:
	001 Move X8, [X2+32]
	002 Move X8, [X8+192]
	003 Move X2, [X8+80]
	004 Call 0x2611164, X0, X1
	005 Return X0

Method: System.Void SpatialSys.ObservableState.IStateList.InsertMany(System.Int32 index, System.Int32 count)

Disassembly:
	0x02612924 LDR X8, [X20 + 0x20]
	0x02612928 LDR X8, [X8 + 0xC0]
	0x0261292C LDR X1, [X8 + 0x10]
	0x02612930 LDR X8, [X1]
	0x02612934 BLR X8
	0x02612938 LDR X8, [X20 + 0x20]
	0x0261293C SUB W1, W0, 0x1
	0x02612940 MOV X0, X19
	0x02612944 LDR X8, [X8 + 0xC0]
	0x02612948 LDR X2, [X8 + 0x58]
	0x0261294C LDR X8, [X2]
	0x02612950 BLR X8
	0x02612954 LDR X0, [X19 + 0x40]
	0x02612958 CBNZ X0, 0x2612900
	0x0261295C BL 0x1C16F20
	0x02612960 LDP X20, X19, [X31 + 0x10]
	0x02612964 LDR X30, [X31], #0x20
	0x02612968 RET
	0x0261296C STP X29, X30, [X31 - 0x30]!
	0x02612970 STP X22, X21, [X31 + 0x10]
	0x02612974 STP X20, X19, [X31 + 0x20]
	0x02612978 ADD X29, X31, 0x0
	0x0261297C SUB X31, X31, 0x20
	0x02612980 MRS X21, 0xC000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X8, [X3+32]
	008 Move W19, W2
	009 Move W20, W1
	010 Move X21, X0
	011 Move X8, [X8+192]
	012 Move X22, [X8+96]
	013 Move X8, [X22+32]
	014 Move X0, X21
	015 Move W1, W20
	016 Move X8, [X8+192]
	017 Move X2, [X8+80]
	018 Call 0x2611164, X0, X1
	019 Subtract W19, W19, 1
	020 Add W20, W20, 1
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 Return 

Method: System.Void Remove(System.Object value)

Disassembly:
	0x02612984 LDR X8, [X21 + 0x28]
	0x02612988 ADD X9, X31, 0x0
	0x0261298C STUR X8, [X29 - 0x8]
	0x02612990 STUR X1, [X29 - 0x20]
	0x02612994 LDR X22, [X2 + 0x20]
	0x02612998 LDR X8, [X22 + 0xC0]
	0x0261299C LDR X8, [X8 + 0x30]
	0x026129A0 LDR W2, [X8 + 0xFC]
	0x026129A4 ADD X10, X2, 0xF
	0x026129A8 AND X10, X10, 0x1FFFFFFFF
	0x026129AC SUB X20, X9, X10
	0x026129B0 ADD X31, X20, 0x0
	0x026129B4 LDR W8, [X8 + 0x28]
	0x026129B8 LDR X19, [X0 + 0x40]
	0x026129BC MOV X0, X20
	0x026129C0 CMP W8, 0x0
	0x026129C4 SUB X8, X29, 0x20
	0x026129C8 CSEL X1, X1, X8, LT
	0x026129CC BL 0x3EB1AC0
	0x026129D0 CBZ X19, 0x2612A38
	0x026129D4 LDR X8, [X22 + 0xC0]
	0x026129D8 LDR X9, [X8 + 0x30]
	0x026129DC LDR X1, [X8 + 0x90]
	0x026129E0 LDR W8, [X9 + 0x28]
	0x026129E4 LDR X0, [X1]
	0x026129E8 TBNZ X8, 0x1F, 0x26129F0
	0x026129EC LDR X20, [X20]
	0x026129F0 STUR X20, [X29 - 0x18]
	0x026129F4 LDR X8, [X1 + 0x10]
	0x026129F8 SUB X3, X29, 0x18
	0x026129FC SUB X4, X29, 0xC
	0x02612A00 MOV X2, X19
	0x02612A04 BLR X8
	0x02612A08 LDURB W8, [X29 - 0xC]
	0x02612A0C LDR X9, [X21 + 0x28]
	0x02612A10 LDUR X10, [X29 - 0x8]
	0x02612A14 CMP W8, 0x0
	0x02612A18 CSET W0, NE
	0x02612A1C CMP X9, X10
	0x02612A20 B.NE 0x2612A3C
	0x02612A24 ADD X31, X29, 0x0
	0x02612A28 LDP X20, X19, [X31 + 0x20]
	0x02612A2C LDP X22, X21, [X31 + 0x10]
	0x02612A30 LDP X29, X30, [X31], #0x30
	0x02612A34 RET
	0x02612A38 BL 0x1C16F20
	0x02612A3C BL 0x3EB1B20
	0x02612A40 STR X30, [X31 - 0x10]!
	0x02612A44 LDR X0, [X0 + 0x40]
	0x02612A48 CBZ X0, 0x2612A64
	0x02612A4C LDR X8, [X2 + 0x20]
	0x02612A50 LDR X8, [X8 + 0xC0]
	0x02612A54 LDR X2, [X8 + 0xA0]
	0x02612A58 LDR X3, [X2]
	0x02612A5C LDR X30, [X31], #0x10
	0x02612A60 BR X3
	0x02612A64 BL 0x1C16F20
	0x02612A68 STP X29, X30, [X31 - 0x30]!
	0x02612A6C STP X22, X21, [X31 + 0x10]
	0x02612A70 STP X20, X19, [X31 + 0x20]
	0x02612A74 ADD X29, X31, 0x0
	0x02612A78 SUB X31, X31, 0x20
	0x02612A7C MRS X22, 0xC000
	0x02612A80 LDR X8, [X22 + 0x28]
	0x02612A84 MOV X19, X2
	0x02612A88 STUR X8, [X29 - 0x8]
	0x02612A8C LDR X8, [X3 + 0x20]
	0x02612A90 LDR X8, [X8 + 0xC0]
	0x02612A94 LDR X9, [X8 + 0x30]
	0x02612A98 LDR W20, [X9 + 0xFC]
	0x02612A9C ADD X9, X31, 0x0
	0x02612AA0 ADD X10, X20, 0xF
	0x02612AA4 AND X10, X10, 0x1FFFFFFFF
	0x02612AA8 SUB X21, X9, X10
	0x02612AAC ADD X31, X21, 0x0
	0x02612AB0 LDR X2, [X0 + 0x40]
	0x02612AB4 CBZ X2, 0x2612B0C
	0x02612AB8 LDR X8, [X8 + 0xA8]
	0x02612ABC SUB X3, X29, 0x18
	0x02612AC0 MOV X4, X21
	0x02612AC4 LDR X0, [X8]
	0x02612AC8 STP X1, X21, [X29 - 0x18]
	0x02612ACC LDR X9, [X8 + 0x10]
	0x02612AD0 MOV X1, X8
	0x02612AD4 BLR X9
	0x02612AD8 MOV X0, X19
	0x02612ADC MOV X1, X21
	0x02612AE0 MOV X2, X20
	0x02612AE4 BL 0x3EB1AC0
	0x02612AE8 LDR X8, [X22 + 0x28]
	0x02612AEC LDUR X9, [X29 - 0x8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X2+32]
	007 Move X19, X2
	008 Move X22, X1
	009 Move X20, X0
	010 Move X8, [X8+192]
	011 Move X8, [X8+552]
	012 Move W9, [X8+309]
	013 Move TEMP, X9
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {20}
	017 Move X0, X8
	018 Call 0x1C5D684
	019 Move X8, X0
	020 Move X0, X8
	021 Call 0x1C17F10
	022 Move X8, [X19+32]
	023 Move X21, X0
	024 Move X8, [X8+192]
	025 Move X1, [X8+560]
	026 Call 0x237D400, X0
	027 Compare X21, 0
	028 JumpIfEqual {119}
	029 Move [X21+16], X22
	030 Move X8, [X19+32]
	031 Move X1, X22
	032 Move X8, [X8+192]
	033 Move X2, [X8+512]
	034 Call 0x26126C4, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {78}
	039 Move X8, [X19+32]
	040 Move X8, [X8+192]
	041 Move X0, [X8+152]
	042 Move W8, [X0+309]
	043 Move TEMP, X8
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfEqual {48}
	047 Call 0x1C5D684
	048 Call 0x1C17F10
	049 Move X8, [X19+32]
	050 Move X1, X21
	051 Move X22, X0
	052 Move X8, [X8+192]
	053 Move X2, [X8+568]
	054 Move X3, [X8+528]
	055 Call Predicate`1<Object>..ctor, X0, X1, X2
	056 Move X8, [X19+32]
	057 Move X0, X20
	058 Move X1, X22
	059 Move X8, [X8+192]
	060 Move X2, [X8+576]
	061 Call 0x26114E8, X0, X1
	062 Move TEMP, X0
	063 And TEMP, TEMP, -2147483648
	064 Compare TEMP, -2147483648
	065 JumpIfEqual {101}
	066 Move X8, [X19+32]
	067 Move W1, W0
	068 Move X0, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X8, [X8+192]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X2, [X8+88]
	075 Move X30, [X31+48]
	076 Call 0x2611A08, X0, X1
	077 Return 
	078 Move X8, [X19+32]
	079 Move X21, [X21+16]
	080 Move X8, [X8+192]
	081 Move X22, [X8+48]
	082 Move W8, [X22+309]
	083 Move TEMP, X8
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 JumpIfEqual {90}
	087 Move X0, X22
	088 Call 0x1C5D684
	089 Move X22, X0
	090 Compare X21, 0
	091 JumpIfEqual {107}
	092 Move X0, X21
	093 Move X1, X22
	094 Call 0x1C17E00
	095 Move X1, X0
	096 Compare X0, 0
	097 JumpIfNotEqual {108}
	098 Move X0, X21
	099 Move X1, X22
	100 Call 0x1C181E0
	101 Move X20, [X31+32]
	102 Move X19, [X31+40]
	103 Move X22, [X31+16]
	104 Move X21, [X31+24]
	105 Move X30, [X31+48]
	106 Return 
	107 Move X1, X31
	108 Move X8, [X19+32]
	109 Move X0, X20
	110 Move X20, [X31+32]
	111 Move X19, [X31+40]
	112 Move X22, [X31+16]
	113 Move X21, [X31+24]
	114 Move X8, [X8+192]
	115 Move X2, [X8+584]
	116 Move X30, [X31+48]
	117 Call 0x2611784, X0, X1
	118 Return 
	119 Call 0x1C17F20

