Type: UnityEngine.RectTransformUtility

Method: UnityEngine.Vector2 PixelAdjustPoint(UnityEngine.Vector2 point, UnityEngine.Transform elementTransform, UnityEngine.Canvas canvas)

Disassembly:
	0x03E24044 MOV X0, X19
	0x03E24048 MOV X1, X31
	0x03E2404C BL 0x3C3EA28
	0x03E24050 ADRP X21, 0x325000
	0x03E24054 LDR X21, [X21 + 0x6B8]
	0x03E24058 MOV V8.16B, V0.16B
	0x03E2405C MOV V9.16B, V1.16B
	0x03E24060 LDR X0, [X21]
	0x03E24064 LDR W8, [X0 + 0xE0]
	0x03E24068 CBNZ W8, 0x3E24070
	0x03E2406C BL 0x1C16DFC
	0x03E24070 MOV X0, X19
	0x03E24074 MOV V0.16B, V9.16B
	0x03E24078 MOV V1.16B, V8.16B
	0x03E2407C MOV X1, X31
	0x03E24080 BL 0x3C3EAB8
	0x03E24084 MOV X0, X19
	0x03E24088 MOV X1, X31
	0x03E2408C BL 0x3C3E90C
	0x03E24090 MOV V2.16B, V0.16B
	0x03E24094 MOV V0.16B, V1.16B
	0x03E24098 MOV X0, X19
	0x03E2409C MOV V1.16B, V2.16B
	0x03E240A0 MOV X1, X31
	0x03E240A4 BL 0x3C3E99C
	0x03E240A8 TBZ X20, 0x0, 0x3E240C4
	0x03E240AC LDP X20, X19, [X31 + 0x40]
	0x03E240B0 LDP X22, X21, [X31 + 0x30]
	0x03E240B4 LDP X24, X23, [X31 + 0x20]
	0x03E240B8 LDP X30, X25, [X31 + 0x10]
	0x03E240BC LDP D9, D8, [X31], #0x50
	0x03E240C0 RET
	0x03E240C4 MOV X0, X19
	0x03E240C8 MOV X1, X31
	0x03E240CC BL 0x3C3E7F0
	0x03E240D0 LDR X0, [X21]
	0x03E240D4 MOV V8.16B, V0.16B
	0x03E240D8 MOV V9.16B, V1.16B
	0x03E240DC LDR W8, [X0 + 0xE0]
	0x03E240E0 CBNZ W8, 0x3E240E8
	0x03E240E4 BL 0x1C16DFC

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X22, 0x5C5000
	008 Move [X31+24], S0
	009 Move [X31+32], S1
	010 Move X21, 0x326000
	011 Move W8, [X22+1360]
	012 Move X21, [X21+1720]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x326000
	020 Move X0, [X0+1720]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+1360], W8
	024 Move X0, [X21]
	025 Move [X31+8], X31
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X21, 0x5C5000
	031 Move X8, [X21+1376]
	032 Compare X8, 0
	033 JumpIfNotEqual {39}
	034 Move X0, -53682176
	035 Add X0, X0, 3064
	036 Call 0x1C17CB8
	037 Move X8, X0
	038 Move [X21+1376], X0
	039 Add X0, X31, 24
	040 Add X3, X31, 8
	041 Move X1, X20
	042 Move X2, X19
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Move S0, [X31+8]
	045 Move S1, [X31+12]
	046 Move X20, [X31+48]
	047 Move X19, [X31+56]
	048 Move X22, [X31+32]
	049 Move X21, [X31+40]
	050 Move X30, [X31+16]
	051 Add X31, X31, 64
	052 Return X0

Method: UnityEngine.Rect PixelAdjustRect(UnityEngine.RectTransform rectTransform, UnityEngine.Canvas canvas)

Disassembly:
	0x03E24144 MOV V0.16B, V1.16B
	0x03E24148 MOV V1.16B, V2.16B
	0x03E2414C MOV X1, X31
	0x03E24150 LDP D9, D8, [X31], #0x50
	0x03E24154 B 0x3C3E764
	0x03E24158 BL 0x1C16F20
	0x03E2415C MOV V2.16B, V0.16B
	0x03E24160 MOV V0.16B, V1.16B
	0x03E24164 MOV V1.16B, V2.16B
	0x03E24168 RET
	0x03E2416C STP X30, X21, [X31 - 0x20]!
	0x03E24170 STP X20, X19, [X31 + 0x10]
	0x03E24174 ADRP X20, 0x5C4000
	0x03E24178 ADRP X21, 0x2D1000
	0x03E2417C ADRP X19, 0x325000
	0x03E24180 LDRB W8, [X20 + 0x55B]
	0x03E24184 LDR X21, [X21 + 0x9B0]
	0x03E24188 LDR X19, [X19 + 0x6B8]
	0x03E2418C TBNZ X8, 0x0, 0x3E241B0
	0x03E24190 ADRP X0, 0x325000
	0x03E24194 LDR X0, [X0 + 0x6B8]
	0x03E24198 BL 0x1C16CF4
	0x03E2419C ADRP X0, 0x2D1000
	0x03E241A0 LDR X0, [X0 + 0x9B0]
	0x03E241A4 BL 0x1C16CF4
	0x03E241A8 MOVZ W8, 0x1
	0x03E241AC STRB W8, [X20 + 0x55B]
	0x03E241B0 LDR X0, [X21]
	0x03E241B4 MOVZ W1, 0x4
	0x03E241B8 BL 0x1C16D6C
	0x03E241BC LDR X8, [X19]
	0x03E241C0 LDP X20, X19, [X31 + 0x10]
	0x03E241C4 LDR X8, [X8 + 0xB8]
	0x03E241C8 STR X0, [X8]
	0x03E241CC LDP X30, X21, [X31], #0x20
	0x03E241D0 RET
	0x03E241D4 STR X30, [X31 - 0x30]!
	0x03E241D8 STP X22, X21, [X31 + 0x10]
	0x03E241DC STP X20, X19, [X31 + 0x20]
	0x03E241E0 ADRP X20, 0x5C4000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X22, 0x5C5000
	008 Move X21, 0x326000
	009 Move W8, [X22+1361]
	010 Move X21, [X21+1720]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x326000
	018 Move X0, [X0+1720]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+1361], W8
	022 Move X0, [X21]
	023 Move [X31], X31
	024 Move [X31+8], X31
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X21, 0x5C5000
	030 Move X8, [X21+1384]
	031 Compare X8, 0
	032 JumpIfNotEqual {38}
	033 Move X0, -53542912
	034 Add X0, X0, 1783
	035 Call 0x1C17CB8
	036 Move X8, X0
	037 Move [X21+1384], X0
	038 Add X2, X31, 0
	039 Move X0, X20
	040 Move X1, X19
	041 NotImplemented "Instruction BLR not yet implemented."
	042 Move S0, [X31]
	043 Move S1, [X31+4]
	044 Move S2, [X31+8]
	045 Move S3, [X31+12]
	046 Move X20, [X31+48]
	047 Move X19, [X31+56]
	048 Move X22, [X31+32]
	049 Move X21, [X31+40]
	050 Move X30, [X31+16]
	051 Add X31, X31, 64
	052 Return X0

Method: System.Boolean PointInRectangle(UnityEngine.Vector2 screenPoint, UnityEngine.RectTransform rect, UnityEngine.Camera cam, UnityEngine.Vector4 offset)

Disassembly:
	0x03E24238 BL 0x33C0DE4
	0x03E2423C MOV X8, X0
	0x03E24240 CBZ X0, 0x3E24254
	0x03E24244 LDR X1, [X22]
	0x03E24248 LDR X9, [X8]
	0x03E2424C CMP X9, X1
	0x03E24250 B.NE 0x3E24284
	0x03E24254 LDR X9, [X21]
	0x03E24258 MOV X1, X8
	0x03E2425C MOV X2, X20
	0x03E24260 LDR X0, [X9 + 0xB8]
	0x03E24264 BL 0x1C24138
	0x03E24268 CMP X20, X0
	0x03E2426C MOV X20, X0
	0x03E24270 B.NE 0x3E2422C
	0x03E24274 LDP X20, X19, [X31 + 0x20]
	0x03E24278 LDP X22, X21, [X31 + 0x10]
	0x03E2427C LDR X30, [X31], #0x30
	0x03E24280 RET
	0x03E24284 MOV X0, X8
	0x03E24288 BL 0x1C171E0
	0x03E2428C STR X30, [X31 - 0x30]!
	0x03E24290 STP X22, X21, [X31 + 0x10]
	0x03E24294 STP X20, X19, [X31 + 0x20]
	0x03E24298 ADRP X20, 0x5C4000
	0x03E2429C ADRP X21, 0x33E000
	0x03E242A0 LDRB W8, [X20 + 0x579]
	0x03E242A4 LDR X21, [X21 + 0x4A8]
	0x03E242A8 MOV X19, X0
	0x03E242AC TBNZ X8, 0x0, 0x3E242D0
	0x03E242B0 ADRP X0, 0x33E000
	0x03E242B4 LDR X0, [X0 + 0x4A8]
	0x03E242B8 BL 0x1C16CF4
	0x03E242BC ADRP X0, 0x335000
	0x03E242C0 LDR X0, [X0 + 0x430]
	0x03E242C4 BL 0x1C16CF4
	0x03E242C8 MOVZ W8, 0x1
	0x03E242CC STRB W8, [X20 + 0x579]
	0x03E242D0 LDR X8, [X21]
	0x03E242D4 ADRP X22, 0x335000
	0x03E242D8 LDR X8, [X8 + 0xB8]
	0x03E242DC LDR X20, [X8]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move [X31+24], S0
	008 Move [X31+32], S1
	009 Move X21, 0x5C5000
	010 Move [X31], S2
	011 Move [X31+8], S3
	012 Move [X31+8], S4
	013 Move [X31+16], S5
	014 Move X22, 0x326000
	015 Move W8, [X21+1362]
	016 Move X22, [X22+1720]
	017 Move X19, X1
	018 Move X20, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0x326000
	024 Move X0, [X0+1720]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+1362], W8
	028 Move X0, [X22]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X21, 0x5C5000
	034 Move X8, [X21+1392]
	035 Compare X8, 0
	036 JumpIfNotEqual {42}
	037 Move X0, -53485568
	038 Add X0, X0, 2145
	039 Call 0x1C17CB8
	040 Move X8, X0
	041 Move [X21+1392], X0
	042 Add X0, X31, 24
	043 Add X3, X31, 0
	044 Move X1, X20
	045 Move X2, X19
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move X20, [X31+48]
	048 Move X19, [X31+56]
	049 Move X22, [X31+32]
	050 Move X21, [X31+40]
	051 Move X30, [X31+16]
	052 And W0, W0, 1
	053 Add X31, X31, 64
	054 Return X0

Method: System.Boolean RectangleContainsScreenPoint(UnityEngine.RectTransform rect, UnityEngine.Vector2 screenPoint, UnityEngine.Camera cam)

Disassembly:
	0x03E2433C MOV X0, X8
	0x03E24340 BL 0x1C171E0
	0x03E24344 STR X30, [X31 - 0x30]!
	0x03E24348 STP X22, X21, [X31 + 0x10]
	0x03E2434C STP X20, X19, [X31 + 0x20]
	0x03E24350 ADRP X20, 0x5C4000
	0x03E24354 ADRP X21, 0x33E000
	0x03E24358 LDRB W8, [X20 + 0x57A]
	0x03E2435C LDR X21, [X21 + 0x4A8]
	0x03E24360 MOV X19, X0
	0x03E24364 TBNZ X8, 0x0, 0x3E24388
	0x03E24368 ADRP X0, 0x33E000
	0x03E2436C LDR X0, [X0 + 0x4A8]
	0x03E24370 BL 0x1C16CF4
	0x03E24374 ADRP X0, 0x335000
	0x03E24378 LDR X0, [X0 + 0x430]
	0x03E2437C BL 0x1C16CF4
	0x03E24380 MOVZ W8, 0x1
	0x03E24384 STRB W8, [X20 + 0x57A]
	0x03E24388 LDR X8, [X21]
	0x03E2438C ADRP X22, 0x335000
	0x03E24390 LDR X8, [X8 + 0xB8]
	0x03E24394 LDR X20, [X8 + 0x8]
	0x03E24398 LDR X22, [X22 + 0x430]
	0x03E2439C MOV X0, X20
	0x03E243A0 MOV X1, X19
	0x03E243A4 MOV X2, X31
	0x03E243A8 BL 0x33C0DE4
	0x03E243AC MOV X8, X0
	0x03E243B0 CBZ X0, 0x3E243C4
	0x03E243B4 LDR X1, [X22]
	0x03E243B8 LDR X9, [X8]
	0x03E243BC CMP X9, X1
	0x03E243C0 B.NE 0x3E243F8
	0x03E243C4 LDR X9, [X21]
	0x03E243C8 MOV X1, X8
	0x03E243CC MOV X2, X20
	0x03E243D0 LDR X9, [X9 + 0xB8]
	0x03E243D4 ADD X0, X9, 0x8
	0x03E243D8 BL 0x1C24138
	0x03E243DC CMP X20, X0
	0x03E243E0 MOV X20, X0
	0x03E243E4 B.NE 0x3E2439C
	0x03E243E8 LDP X20, X19, [X31 + 0x20]
	0x03E243EC LDP X22, X21, [X31 + 0x10]
	0x03E243F0 LDR X30, [X31], #0x30
	0x03E243F4 RET
	0x03E243F8 MOV X0, X8
	0x03E243FC BL 0x1C171E0
	0x03E24400 STR X30, [X31 - 0x30]!
	0x03E24404 STP X22, X21, [X31 + 0x10]
	0x03E24408 STP X20, X19, [X31 + 0x20]
	0x03E2440C ADRP X20, 0x5C4000

ISIL:
	001 Move [X31-96], D13
	002 Move [X31-88], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X21, 0x5C5000
	013 Move W8, [X21+1363]
	014 Move X19, X1
	015 Move V8, V1
	016 Move V9, V0
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x326000
	023 Move X0, [X0+1720]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+1363], W8
	027 Move X22, 0x5B5000
	028 Move X21, 0x326000
	029 Move W8, [X22+3674]
	030 Move X21, [X21+1720]
	031 Compare W8, 0
	032 JumpIfNotEqual {38}
	033 Move X0, 0x2D7000
	034 Move X0, [X0+2464]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X22+3674], W8
	038 Move X8, 0x2D7000
	039 Move X8, [X8+2464]
	040 Move X0, [X21]
	041 Move X8, [X8]
	042 Move W9, [X0+224]
	043 Move X8, [X8+184]
	044 Move S13, [X8]
	045 Move S12, [X8+4]
	046 Move S11, [X8+8]
	047 Move S10, [X8+12]
	048 Compare W9, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 Move X0, X20
	052 Move V0, V9
	053 Move V1, V8
	054 Move X1, X19
	055 Move V4, V11
	056 Move V5, V10
	057 Move X20, [X31+80]
	058 Move X19, [X31+88]
	059 Move X22, [X31+64]
	060 Move X21, [X31+72]
	061 Move X30, [X31+48]
	062 Move D9, [X31+32]
	063 Move D8, [X31+40]
	064 Move D11, [X31+16]
	065 Move D10, [X31+24]
	066 Move V2, V13
	067 Move V3, V12
	068 Move D13, [X31+96]
	069 Move D12, [X31+104]

Method: System.Boolean RectangleContainsScreenPoint(UnityEngine.RectTransform rect, UnityEngine.Vector2 screenPoint, UnityEngine.Camera cam, UnityEngine.Vector4 offset)

Disassembly:
	0x03E24410 ADRP X21, 0x33E000
	0x03E24414 LDRB W8, [X20 + 0x57B]
	0x03E24418 LDR X21, [X21 + 0x4A8]
	0x03E2441C MOV X19, X0
	0x03E24420 TBNZ X8, 0x0, 0x3E24444
	0x03E24424 ADRP X0, 0x33E000
	0x03E24428 LDR X0, [X0 + 0x4A8]
	0x03E2442C BL 0x1C16CF4
	0x03E24430 ADRP X0, 0x335000
	0x03E24434 LDR X0, [X0 + 0x430]
	0x03E24438 BL 0x1C16CF4
	0x03E2443C MOVZ W8, 0x1
	0x03E24440 STRB W8, [X20 + 0x57B]
	0x03E24444 LDR X8, [X21]
	0x03E24448 ADRP X22, 0x335000
	0x03E2444C LDR X8, [X8 + 0xB8]
	0x03E24450 LDR X20, [X8 + 0x8]
	0x03E24454 LDR X22, [X22 + 0x430]
	0x03E24458 MOV X0, X20
	0x03E2445C MOV X1, X19
	0x03E24460 MOV X2, X31
	0x03E24464 BL 0x33C0FDC
	0x03E24468 MOV X8, X0
	0x03E2446C CBZ X0, 0x3E24480
	0x03E24470 LDR X1, [X22]
	0x03E24474 LDR X9, [X8]
	0x03E24478 CMP X9, X1
	0x03E2447C B.NE 0x3E244B4
	0x03E24480 LDR X9, [X21]
	0x03E24484 MOV X1, X8
	0x03E24488 MOV X2, X20
	0x03E2448C LDR X9, [X9 + 0xB8]
	0x03E24490 ADD X0, X9, 0x8
	0x03E24494 BL 0x1C24138
	0x03E24498 CMP X20, X0
	0x03E2449C MOV X20, X0
	0x03E244A0 B.NE 0x3E24458
	0x03E244A4 LDP X20, X19, [X31 + 0x20]
	0x03E244A8 LDP X22, X21, [X31 + 0x10]
	0x03E244AC LDR X30, [X31], #0x30
	0x03E244B0 RET
	0x03E244B4 MOV X0, X8
	0x03E244B8 BL 0x1C171E0

ISIL:
	001 Move [X31-96], D13
	002 Move [X31-88], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X22, 0x5C5000
	013 Move X21, 0x326000
	014 Move W8, [X22+1364]
	015 Move X21, [X21+1720]
	016 Move V8, V5
	017 Move V9, V4
	018 Move V10, V3
	019 Move V11, V2
	020 Move X19, X1
	021 Move V12, V1
	022 Move V13, V0
	023 Move X20, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {33}
	028 Move X0, 0x326000
	029 Move X0, [X0+1720]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X22+1364], W8
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, X20
	039 Move X1, X19
	040 Move V2, V11
	041 Move V3, V10
	042 Move V4, V9
	043 Move V5, V8
	044 Move X20, [X31+80]
	045 Move X19, [X31+88]
	046 Move X22, [X31+64]
	047 Move X21, [X31+72]
	048 Move X30, [X31+48]
	049 Move D9, [X31+32]
	050 Move D8, [X31+40]
	051 Move D11, [X31+16]
	052 Move D10, [X31+24]
	053 Move V0, V13
	054 Move V1, V12
	055 Move D13, [X31+96]
	056 Move D12, [X31+104]
	057 Call RectTransformUtility.PointInRectangle, X0, X1, X2, X3
	058 Return X0

Method: System.Boolean ScreenPointToWorldPointInRectangle(UnityEngine.RectTransform rect, UnityEngine.Vector2 screenPoint, UnityEngine.Camera cam, out UnityEngine.Vector3 worldPoint)

Disassembly:
	0x03E244BC STR X30, [X31 - 0x20]!
	0x03E244C0 STP X20, X19, [X31 + 0x10]
	0x03E244C4 ADRP X20, 0x5C4000
	0x03E244C8 LDR X1, [X20 + 0x580]
	0x03E244CC MOV X19, X0
	0x03E244D0 CBNZ X1, 0x3E244E8
	0x03E244D4 ADRP X0, 0xFFFFFFFFFCCE1000
	0x03E244D8 ADD X0, X0, 0xBCE
	0x03E244DC BL 0x1C16CB8
	0x03E244E0 MOV X1, X0
	0x03E244E4 STR X0, [X20 + 0x580]
	0x03E244E8 MOV X0, X19
	0x03E244EC LDP X20, X19, [X31 + 0x10]
	0x03E244F0 LDR X30, [X31], #0x20
	0x03E244F4 BR X1
	0x03E244F8 STP X30, X21, [X31 - 0x20]!
	0x03E244FC STP X20, X19, [X31 + 0x10]
	0x03E24500 ADRP X21, 0x5C4000
	0x03E24504 LDR X2, [X21 + 0x588]
	0x03E24508 MOV W19, W1
	0x03E2450C MOV X20, X0
	0x03E24510 CBNZ X2, 0x3E24528
	0x03E24514 ADRP X0, 0xFFFFFFFFFCCE7000
	0x03E24518 ADD X0, X0, 0xC63
	0x03E2451C BL 0x1C16CB8
	0x03E24520 MOV X2, X0
	0x03E24524 STR X0, [X21 + 0x588]
	0x03E24528 MOV X0, X20
	0x03E2452C MOV W1, W19
	0x03E24530 LDP X20, X19, [X31 + 0x10]
	0x03E24534 LDP X30, X21, [X31], #0x20
	0x03E24538 BR X2
	0x03E2453C STR X30, [X31 - 0x20]!
	0x03E24540 STP X20, X19, [X31 + 0x10]
	0x03E24544 ADRP X20, 0x5C4000
	0x03E24548 LDR X1, [X20 + 0x590]
	0x03E2454C MOV X19, X0
	0x03E24550 CBNZ X1, 0x3E24568
	0x03E24554 ADRP X0, 0xFFFFFFFFFCCDD000
	0x03E24558 ADD X0, X0, 0xAE9
	0x03E2455C BL 0x1C16CB8
	0x03E24560 MOV X1, X0
	0x03E24564 STR X0, [X20 + 0x590]
	0x03E24568 MOV X0, X19
	0x03E2456C LDP X20, X19, [X31 + 0x10]
	0x03E24570 LDR X30, [X31], #0x20
	0x03E24574 BR X1
	0x03E24578 SUB X31, X31, 0x30
	0x03E2457C STP X31, X30, [X31 + 0x8]
	0x03E24580 STP X20, X19, [X31 + 0x20]
	0x03E24584 ADRP X20, 0x5C4000
	0x03E24588 LDR X8, [X20 + 0x690]
	0x03E2458C MOV X19, X0
	0x03E24590 STR X31, [X31]
	0x03E24594 CBNZ X8, 0x3E245AC
	0x03E24598 ADRP X0, 0xFFFFFFFFFCCEF000
	0x03E2459C ADD X0, X0, 0x79A
	0x03E245A0 BL 0x1C16CB8
	0x03E245A4 MOV X8, X0
	0x03E245A8 STR X0, [X20 + 0x690]
	0x03E245AC ADD X1, X31, 0x0
	0x03E245B0 MOV X0, X19
	0x03E245B4 BLR X8
	0x03E245B8 LDP S0, S1, [X31]
	0x03E245BC LDP S2, S3, [X31 + 0x8]
	0x03E245C0 LDP X20, X19, [X31 + 0x20]
	0x03E245C4 LDR X30, [X31 + 0x10]
	0x03E245C8 ADD X31, X31, 0x30
	0x03E245CC RET
	0x03E245D0 STP X30, X21, [X31 - 0x20]!
	0x03E245D4 STP X20, X19, [X31 + 0x10]
	0x03E245D8 ADRP X21, 0x5C4000
	0x03E245DC LDR X2, [X21 + 0x690]
	0x03E245E0 MOV X19, X1
	0x03E245E4 MOV X20, X0
	0x03E245E8 CBNZ X2, 0x3E24600
	0x03E245EC ADRP X0, 0xFFFFFFFFFCCEF000
	0x03E245F0 ADD X0, X0, 0x79A
	0x03E245F4 BL 0x1C16CB8
	0x03E245F8 MOV X2, X0
	0x03E245FC STR X0, [X21 + 0x690]
	0x03E24600 MOV X0, X20
	0x03E24604 MOV X1, X19
	0x03E24608 LDP X20, X19, [X31 + 0x10]
	0x03E2460C LDP X30, X21, [X31], #0x20
	0x03E24610 BR X2
	0x03E24614 STR X30, [X31 - 0x20]!
	0x03E24618 STP X20, X19, [X31 + 0x10]
	0x03E2461C ADRP X20, 0x5C4000
	0x03E24620 LDR X1, [X20 + 0x598]
	0x03E24624 MOV X19, X0
	0x03E24628 CBNZ X1, 0x3E24640
	0x03E2462C ADRP X0, 0xFFFFFFFFFCCE1000
	0x03E24630 ADD X0, X0, 0xBF3
	0x03E24634 BL 0x1C16CB8
	0x03E24638 MOV X1, X0
	0x03E2463C STR X0, [X20 + 0x598]
	0x03E24640 MOV X0, X19
	0x03E24644 LDP X20, X19, [X31 + 0x10]
	0x03E24648 LDR X30, [X31], #0x20
	0x03E2464C BR X1
	0x03E24650 STR D8, [X31 - 0x20]!
	0x03E24654 STR X30, [X31 + 0x8]
	0x03E24658 STP X20, X19, [X31 + 0x10]
	0x03E2465C ADRP X20, 0x5C4000
	0x03E24660 LDR X1, [X20 + 0x5A0]
	0x03E24664 MOV V8.16B, V0.16B
	0x03E24668 MOV X19, X0
	0x03E2466C CBNZ X1, 0x3E24684
	0x03E24670 ADRP X0, 0xFFFFFFFFFCCF9000
	0x03E24674 ADD X0, X0, 0x8F6
	0x03E24678 BL 0x1C16CB8
	0x03E2467C MOV X1, X0
	0x03E24680 STR X0, [X20 + 0x5A0]
	0x03E24684 MOV X0, X19
	0x03E24688 LDP X20, X19, [X31 + 0x10]
	0x03E2468C LDR X30, [X31 + 0x8]
	0x03E24690 MOV V0.16B, V8.16B
	0x03E24694 LDR V8, [X31], #0x20
	0x03E24698 BR X1
	0x03E2469C STR X30, [X31 - 0x20]!
	0x03E246A0 STP X20, X19, [X31 + 0x10]
	0x03E246A4 ADRP X20, 0x5C4000
	0x03E246A8 LDR X1, [X20 + 0x5A8]
	0x03E246AC MOV X19, X0
	0x03E246B0 CBNZ X1, 0x3E246C8
	0x03E246B4 ADRP X0, 0xFFFFFFFFFCCED000
	0x03E246B8 ADD X0, X0, 0x9DB
	0x03E246BC BL 0x1C16CB8
	0x03E246C0 MOV X1, X0
	0x03E246C4 STR X0, [X20 + 0x5A8]
	0x03E246C8 MOV X0, X19
	0x03E246CC LDP X20, X19, [X31 + 0x10]
	0x03E246D0 LDR X30, [X31], #0x20
	0x03E246D4 BR X1
	0x03E246D8 STR D8, [X31 - 0x20]!
	0x03E246DC STR X30, [X31 + 0x8]
	0x03E246E0 STP X20, X19, [X31 + 0x10]
	0x03E246E4 ADRP X20, 0x5C4000
	0x03E246E8 LDR X1, [X20 + 0x5B0]
	0x03E246EC MOV V8.16B, V0.16B
	0x03E246F0 MOV X19, X0
	0x03E246F4 CBNZ X1, 0x3E2470C
	0x03E246F8 ADRP X0, 0xFFFFFFFFFCCD7000
	0x03E246FC ADD X0, X0, 0xE27
	0x03E24700 BL 0x1C16CB8
	0x03E24704 MOV X1, X0
	0x03E24708 STR X0, [X20 + 0x5B0]
	0x03E2470C MOV X0, X19
	0x03E24710 LDP X20, X19, [X31 + 0x10]
	0x03E24714 LDR X30, [X31 + 0x8]
	0x03E24718 MOV V0.16B, V8.16B
	0x03E2471C LDR V8, [X31], #0x20
	0x03E24720 BR X1
	0x03E24724 STR X30, [X31 - 0x20]!
	0x03E24728 STP X20, X19, [X31 + 0x10]
	0x03E2472C ADRP X20, 0x5C4000
	0x03E24730 LDR X1, [X20 + 0x5B8]
	0x03E24734 MOV X19, X0
	0x03E24738 CBNZ X1, 0x3E24750
	0x03E2473C ADRP X0, 0xFFFFFFFFFCCCD000
	0x03E24740 ADD X0, X0, 0xC88
	0x03E24744 BL 0x1C16CB8
	0x03E24748 MOV X1, X0
	0x03E2474C STR X0, [X20 + 0x5B8]
	0x03E24750 MOV X0, X19
	0x03E24754 LDP X20, X19, [X31 + 0x10]
	0x03E24758 LDR X30, [X31], #0x20
	0x03E2475C BR X1
	0x03E24760 STP X30, X21, [X31 - 0x20]!
	0x03E24764 STP X20, X19, [X31 + 0x10]
	0x03E24768 ADRP X21, 0x5C4000
	0x03E2476C LDR X2, [X21 + 0x5C0]
	0x03E24770 MOV W19, W1
	0x03E24774 MOV X20, X0
	0x03E24778 CBNZ X2, 0x3E24790
	0x03E2477C ADRP X0, 0xFFFFFFFFFCCFD000
	0x03E24780 ADD X0, X0, 0x8F5
	0x03E24784 BL 0x1C16CB8
	0x03E24788 MOV X2, X0
	0x03E2478C STR X0, [X21 + 0x5C0]
	0x03E24790 AND W1, W19, 0x1
	0x03E24794 MOV X0, X20
	0x03E24798 LDP X20, X19, [X31 + 0x10]
	0x03E2479C LDP X30, X21, [X31], #0x20
	0x03E247A0 BR X2
	0x03E247A4 STR X30, [X31 - 0x20]!
	0x03E247A8 STP X20, X19, [X31 + 0x10]
	0x03E247AC ADRP X20, 0x5C4000
	0x03E247B0 LDR X1, [X20 + 0x5C8]
	0x03E247B4 MOV X19, X0
	0x03E247B8 CBNZ X1, 0x3E247D0
	0x03E247BC ADRP X0, 0xFFFFFFFFFCCCF000
	0x03E247C0 ADD X0, X0, 0xD9C
	0x03E247C4 BL 0x1C16CB8
	0x03E247C8 MOV X1, X0
	0x03E247CC STR X0, [X20 + 0x5C8]
	0x03E247D0 MOV X0, X19
	0x03E247D4 LDP X20, X19, [X31 + 0x10]
	0x03E247D8 LDR X30, [X31], #0x20
	0x03E247DC BR X1
	0x03E247E0 STR X30, [X31 - 0x20]!
	0x03E247E4 STP X20, X19, [X31 + 0x10]
	0x03E247E8 ADRP X20, 0x5C4000
	0x03E247EC LDR X1, [X20 + 0x5D0]
	0x03E247F0 MOV X19, X0
	0x03E247F4 CBNZ X1, 0x3E2480C
	0x03E247F8 ADRP X0, 0xFFFFFFFFFCCEF000
	0x03E247FC ADD X0, X0, 0x772
	0x03E24800 BL 0x1C16CB8
	0x03E24804 MOV X1, X0
	0x03E24808 STR X0, [X20 + 0x5D0]
	0x03E2480C MOV X0, X19
	0x03E24810 LDP X20, X19, [X31 + 0x10]
	0x03E24814 LDR X30, [X31], #0x20
	0x03E24818 BR X1
	0x03E2481C STR D8, [X31 - 0x20]!
	0x03E24820 STR X30, [X31 + 0x8]
	0x03E24824 STP X20, X19, [X31 + 0x10]
	0x03E24828 ADRP X20, 0x5C4000
	0x03E2482C LDR X1, [X20 + 0x5D8]
	0x03E24830 MOV V8.16B, V0.16B
	0x03E24834 MOV X19, X0
	0x03E24838 CBNZ X1, 0x3E24850
	0x03E2483C ADRP X0, 0xFFFFFFFFFCCCB000
	0x03E24840 ADD X0, X0, 0xB1C
	0x03E24844 BL 0x1C16CB8
	0x03E24848 MOV X1, X0
	0x03E2484C STR X0, [X20 + 0x5D8]
	0x03E24850 MOV X0, X19
	0x03E24854 LDP X20, X19, [X31 + 0x10]
	0x03E24858 LDR X30, [X31 + 0x8]
	0x03E2485C MOV V0.16B, V8.16B
	0x03E24860 LDR V8, [X31], #0x20
	0x03E24864 BR X1
	0x03E24868 STR X30, [X31 - 0x20]!
	0x03E2486C STP X20, X19, [X31 + 0x10]
	0x03E24870 ADRP X20, 0x5C4000
	0x03E24874 LDR X1, [X20 + 0x5E0]
	0x03E24878 MOV X19, X0
	0x03E2487C CBNZ X1, 0x3E24894
	0x03E24880 ADRP X0, 0xFFFFFFFFFCCCD000
	0x03E24884 ADD X0, X0, 0xCB7
	0x03E24888 BL 0x1C16CB8
	0x03E2488C MOV X1, X0
	0x03E24890 STR X0, [X20 + 0x5E0]
	0x03E24894 MOV X0, X19
	0x03E24898 LDP X20, X19, [X31 + 0x10]
	0x03E2489C LDR X30, [X31], #0x20
	0x03E248A0 BR X1
	0x03E248A4 STR X30, [X31 - 0x20]!
	0x03E248A8 STP X20, X19, [X31 + 0x10]
	0x03E248AC ADRP X20, 0x5C4000
	0x03E248B0 LDR X1, [X20 + 0x5E8]
	0x03E248B4 MOV X19, X0
	0x03E248B8 CBNZ X1, 0x3E248D0
	0x03E248BC ADRP X0, 0xFFFFFFFFFCCD7000
	0x03E248C0 ADD X0, X0, 0xE65
	0x03E248C4 BL 0x1C16CB8
	0x03E248C8 MOV X1, X0
	0x03E248CC STR X0, [X20 + 0x5E8]
	0x03E248D0 MOV X0, X19
	0x03E248D4 LDP X20, X19, [X31 + 0x10]
	0x03E248D8 LDR X30, [X31], #0x20
	0x03E248DC BR X1

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+48], D15
	003 Move [X31+56], D14
	004 Move [X31+64], D13
	005 Move [X31+72], D12
	006 Move [X31+80], D11
	007 Move [X31+88], D10
	008 Move [X31+96], D9
	009 Move [X31+104], D8
	010 Move [X31+112], X30
	011 Move [X31+128], X24
	012 Move [X31+136], X23
	013 Move [X31+144], X22
	014 Move [X31+152], X21
	015 Move [X31+160], X20
	016 Move [X31+168], X19
	017 Move X22, 0x5C5000
	018 Move W8, [X22+1365]
	019 Move X19, X2
	020 Move X21, X1
	021 Move V8, V1
	022 Move V9, V0
	023 Move X20, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {33}
	028 Move X0, 0x326000
	029 Move X0, [X0+1720]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X22+1365], W8
	033 Move X23, 0x5B6000
	034 Move X22, 0x326000
	035 Move W8, [X23+1935]
	036 Move X22, [X22+1720]
	037 Move [X31+24], X31
	038 Move [X31+32], X31
	039 Move [X31+40], X31
	040 Compare W8, 0
	041 JumpIfNotEqual {47}
	042 Move X0, 0x2D8000
	043 Move X0, [X0+3848]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X23+1935], W8
	047 Move X8, 0x2D8000
	048 Move X8, [X8+3848]
	049 Move X8, [X8]
	050 Move X8, [X8+184]
	051 Move V0, [X8]
	052 Move [X19+8], W31
	053 Move [X19], D0
	054 Move X0, [X22]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Add X8, X31, 24
	060 Move X0, X21
	061 Move V0, V9
	062 Move V1, V8
	063 Call RectTransformUtility.ScreenPointToRay, X0, X1
	064 Compare X20, 0
	065 JumpIfEqual {298}
	066 Move X0, X20
	067 Move X1, X31
	068 Call Transform.get_rotation, X0
	069 Move X21, 0x5B5000
	070 Move W8, [X21+3550]
	071 Move V8, V0
	072 Move V9, V1
	073 Move V10, V2
	074 Move V11, V3
	075 Compare W8, 0
	076 JumpIfNotEqual {82}
	077 Move X0, 0x2D0000
	078 Move X0, [X0+1440]
	079 Call 0x1C17CF4
	080 Move W8, 1
	081 Move [X21+3550], W8
	082 Move X21, 0x2D0000
	083 Move X21, [X21+1440]
	084 Move V0, V8
	085 Move V1, V9
	086 Move V2, V10
	087 Move X8, [X21]
	088 Move V3, V11
	089 Move X0, X31
	090 Move X8, [X8+184]
	091 Move S4, [X8+84]
	092 Move S5, [X8+88]
	093 Move V6, [X8+92]
	094 Call Quaternion.op_Multiply, X0, X1
	095 Move X0, X20
	096 Move X1, X31
	097 Move V11, V0
	098 Move V12, V1
	099 Move V13, V2
	100 Call Transform.get_position, X0
	101 Move X22, 0x5B5000
	102 Move W8, [X22+1925]
	103 Move V8, V0
	104 Move V9, V1
	105 Move V14, V2
	106 Compare W8, 0
	107 JumpIfNotEqual {113}
	108 Move X0, 0x2D0000
	109 Move X0, [X0+1448]
	110 Call 0x1C17CF4
	111 Move W8, 1
	112 Move [X22+1925], W8
	113 Move X23, 0x2D0000
	114 Move X23, [X23+1448]
	115 Move X0, [X23]
	116 Move W8, [X0+224]
	117 Compare W8, 0
	118 JumpIfNotEqual {120}
	119 Call 0x1C17DFC
	120 Move X8, -53710848
	121 Multiply S0, S11, S11
	122 Multiply S1, S12, S12
	123 Move V10, [X8+380]
	124 Add S0, S0, S1
	125 Multiply S1, S13, S13
	126 Add S0, S1, S0
	127 NotImplemented "Instruction FSQRT not yet implemented."
	128 NotImplemented "Instruction FCMP not yet implemented."
	129 Move [X31+16], S9
	130 Move [X31+24], S8
	131 Move [X31+12], S14
	132 NotImplemented "Instruction FDIV not yet implemented."
	133 NotImplemented "Instruction FDIV not yet implemented."
	134 Move [X31+120], S1
	135 Move [X31+128], S2
	136 NotImplemented "Instruction FDIV not yet implemented."
	137 Move X24, 0x5B5000
	138 Move W8, [X24+1923]
	139 Compare W8, 0
	140 JumpIfNotEqual {146}
	141 Move X0, 0x2D0000
	142 Move X0, [X0+1440]
	143 Call 0x1C17CF4
	144 Move W8, 1
	145 Move [X24+1923], W8
	146 Move X8, [X21]
	147 Move X8, [X8+184]
	148 Move V1, [X8]
	149 Move S0, [X8+4]
	150 Move S8, [X8+8]
	151 Move [X31+120], S0
	152 Move [X31+128], S1
	153 Move X0, X20
	154 Move X1, X31
	155 Call Transform.get_position, X0
	156 Move S4, [X31+24]
	157 Move S5, [X31+28]
	158 Move W8, [X22+1925]
	159 Move V15, [X31+32]
	160 Move V11, V0
	161 Move V12, V1
	162 Move V13, V2
	163 Compare W8, 0
	164 JumpIfNotEqual {174}
	165 Move X0, 0x2D0000
	166 Move X0, [X0+1448]
	167 Move V9, V4
	168 Move V14, V5
	169 Call 0x1C17CF4
	170 Move V5, V14
	171 Move V4, V9
	172 Move W8, 1
	173 Move [X22+1925], W8
	174 Move X0, [X23]
	175 Subtract S9, S11, S4
	176 Subtract S12, S12, S5
	177 Subtract S11, S13, S15
	178 Move W8, [X0+224]
	179 Compare W8, 0
	180 JumpIfNotEqual {186}
	181 Move V13, V4
	182 Move V14, V5
	183 Call 0x1C17DFC
	184 Move V5, V14
	185 Move V4, V13
	186 Multiply S0, S9, S9
	187 Multiply S1, S12, S12
	188 Add S0, S0, S1
	189 Multiply S1, S11, S11
	190 Add S0, S1, S0
	191 NotImplemented "Instruction FSQRT not yet implemented."
	192 NotImplemented "Instruction FCMP not yet implemented."
	193 NotImplemented "Instruction FDIV not yet implemented."
	194 NotImplemented "Instruction FDIV not yet implemented."
	195 NotImplemented "Instruction FDIV not yet implemented."
	196 Move X20, 0x5B5000
	197 Move W8, [X20+1923]
	198 Compare W8, 0
	199 JumpIfNotEqual {209}
	200 Move X0, 0x2D0000
	201 Move X0, [X0+1440]
	202 Move V9, V4
	203 Move V10, V5
	204 Call 0x1C17CF4
	205 Move V5, V10
	206 Move V4, V9
	207 Move W8, 1
	208 Move [X20+1923], W8
	209 Move X8, [X21]
	210 Move X8, [X8+184]
	211 Move S0, [X8]
	212 Move S1, [X8+4]
	213 Move V2, [X8+8]
	214 Move S16, [X31+120]
	215 Move S7, [X31+124]
	216 Multiply S0, S7, S0
	217 Multiply S1, S16, S1
	218 Add S0, S0, S1
	219 Multiply S1, S8, S2
	220 Add S0, S1, S0
	221 NotImplemented "Instruction FCMP not yet implemented."
	222 Move S0, W31
	223 Move S1, [X31+16]
	224 Move S0, [X31+20]
	225 Move V2, [X31+12]
	226 Multiply S4, S7, S4
	227 Multiply S5, S16, S5
	228 Multiply S0, S0, S7
	229 Multiply S1, S1, S16
	230 Add S0, S0, S1
	231 Move S1, [X31+36]
	232 Move S3, [X31+40]
	233 Add S4, S4, S5
	234 Move V5, [X31+44]
	235 Move X20, 0x5B6000
	236 Move W8, [X20+1450]
	237 Multiply S2, S2, S8
	238 Multiply S6, S8, S15
	239 Multiply S1, S7, S1
	240 Multiply S3, S16, S3
	241 Add S0, S2, S0
	242 Add S2, S6, S4
	243 Multiply S4, S8, S5
	244 Add S1, S1, S3
	245 Add S8, S4, S1
	246 Subtract S9, S0, S2
	247 Compare W8, 0
	248 JumpIfNotEqual {254}
	249 Move X0, 0x2D7000
	250 Move X0, [X0+1208]
	251 Call 0x1C17CF4
	252 Move W8, 1
	253 Move [X20+1450], W8
	254 Move X8, 0x2D7000
	255 Move X8, [X8+1208]
	256 Move X9, -53710848
	257 Move V0, [X9+576]
	258 NotImplemented "Instruction FABS not yet implemented."
	259 Move X8, [X8]
	260 Move S1, W31
	261 NotImplemented "Instruction FMAXNM not yet implemented."
	262 Move S4, 8
	263 Move X8, [X8+184]
	264 Multiply S2, S2, S0
	265 NotImplemented "Instruction FDIV not yet implemented."
	266 Move W0, W31
	267 Move V3, [X8]
	268 Multiply S3, S3, S4
	269 NotImplemented "Instruction FCMP not yet implemented."
	270 NotImplemented "Instruction FCSEL not yet implemented."
	271 NotImplemented "Instruction FCMP not yet implemented."
	272 NotImplemented "Instruction FABD not yet implemented."
	273 NotImplemented "Instruction FCMP not yet implemented."
	274 Add X0, X31, 24
	275 Move X1, X31
	276 Call Ray.GetPoint, X0, V0
	277 Move W0, 1
	278 Move [X19], S0
	279 Move [X19+8], S1
	280 Move [X19+8], S2
	281 Move X20, [X31+160]
	282 Move X19, [X31+168]
	283 Move X22, [X31+144]
	284 Move X21, [X31+152]
	285 Move X24, [X31+128]
	286 Move X23, [X31+136]
	287 Move X30, [X31+112]
	288 Move D9, [X31+96]
	289 Move D8, [X31+104]
	290 Move D11, [X31+80]
	291 Move D10, [X31+88]
	292 Move D13, [X31+64]
	293 Move D12, [X31+72]
	294 Move D15, [X31+48]
	295 Move D14, [X31+56]
	296 Add X31, X31, 176
	297 Return X0
	298 Call 0x1C17F20

Method: System.Boolean ScreenPointToLocalPointInRectangle(UnityEngine.RectTransform rect, UnityEngine.Vector2 screenPoint, UnityEngine.Camera cam, out UnityEngine.Vector2 localPoint)

Disassembly:
	0x03E24A98 LDP X20, X19, [X31 + 0x10]
	0x03E24A9C LDP X30, X21, [X31], #0x20
	0x03E24AA0 BR X2
	0x03E24AA4 STR X30, [X31 - 0x20]!
	0x03E24AA8 STP X20, X19, [X31 + 0x10]
	0x03E24AAC ADRP X20, 0x5C4000
	0x03E24AB0 LDR X1, [X20 + 0x628]
	0x03E24AB4 MOV X19, X0
	0x03E24AB8 CBNZ X1, 0x3E24AD0
	0x03E24ABC ADRP X0, 0xFFFFFFFFFCCFF000
	0x03E24AC0 ADD X0, X0, 0xC54
	0x03E24AC4 BL 0x1C16CB8
	0x03E24AC8 MOV X1, X0
	0x03E24ACC STR X0, [X20 + 0x628]
	0x03E24AD0 MOV X0, X19
	0x03E24AD4 LDP X20, X19, [X31 + 0x10]
	0x03E24AD8 LDR X30, [X31], #0x20
	0x03E24ADC BR X1
	0x03E24AE0 STP X30, X21, [X31 - 0x20]!
	0x03E24AE4 STP X20, X19, [X31 + 0x10]
	0x03E24AE8 ADRP X21, 0x5C4000
	0x03E24AEC LDR X2, [X21 + 0x630]
	0x03E24AF0 MOV W19, W1
	0x03E24AF4 MOV X20, X0
	0x03E24AF8 CBNZ X2, 0x3E24B10
	0x03E24AFC ADRP X0, 0xFFFFFFFFFCCEB000
	0x03E24B00 ADD X0, X0, 0xF6A
	0x03E24B04 BL 0x1C16CB8
	0x03E24B08 MOV X2, X0
	0x03E24B0C STR X0, [X21 + 0x630]
	0x03E24B10 MOV X0, X20
	0x03E24B14 MOV W1, W19
	0x03E24B18 LDP X20, X19, [X31 + 0x10]
	0x03E24B1C LDP X30, X21, [X31], #0x20
	0x03E24B20 BR X2
	0x03E24B24 STR X30, [X31 - 0x20]!
	0x03E24B28 STP X20, X19, [X31 + 0x10]
	0x03E24B2C ADRP X20, 0x5C4000
	0x03E24B30 LDR X1, [X20 + 0x638]
	0x03E24B34 MOV X19, X0
	0x03E24B38 CBNZ X1, 0x3E24B50
	0x03E24B3C ADRP X0, 0xFFFFFFFFFCD01000
	0x03E24B40 ADD X0, X0, 0xACC
	0x03E24B44 BL 0x1C16CB8
	0x03E24B48 MOV X1, X0
	0x03E24B4C STR X0, [X20 + 0x638]
	0x03E24B50 MOV X0, X19
	0x03E24B54 LDP X20, X19, [X31 + 0x10]
	0x03E24B58 LDR X30, [X31], #0x20
	0x03E24B5C BR X1
	0x03E24B60 STP X30, X21, [X31 - 0x20]!
	0x03E24B64 STP X20, X19, [X31 + 0x10]
	0x03E24B68 ADRP X21, 0x5C4000
	0x03E24B6C LDR X2, [X21 + 0x640]
	0x03E24B70 MOV X19, X1
	0x03E24B74 MOV X20, X0
	0x03E24B78 CBNZ X2, 0x3E24B90
	0x03E24B7C ADRP X0, 0xFFFFFFFFFCCDD000
	0x03E24B80 ADD X0, X0, 0xB10
	0x03E24B84 BL 0x1C16CB8
	0x03E24B88 MOV X2, X0
	0x03E24B8C STR X0, [X21 + 0x640]
	0x03E24B90 MOV X0, X20

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X22, 0x5C5000
	011 Move W8, [X22+1366]
	012 Move X19, X2
	013 Move X21, X1
	014 Move V8, V1
	015 Move V9, V0
	016 Move X20, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x326000
	022 Move X0, [X0+1720]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+1366], W8
	026 Move X23, 0x5B6000
	027 Move X22, 0x326000
	028 Move W8, [X23+1935]
	029 Move X22, [X22+1720]
	030 Move [X31+8], W31
	031 Move [X31], X31
	032 Compare W8, 0
	033 JumpIfNotEqual {39}
	034 Move X0, 0x2D8000
	035 Move X0, [X0+3848]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X23+1935], W8
	039 Move X8, 0x2D8000
	040 Move X8, [X8+3848]
	041 Move X8, [X8]
	042 Move X8, [X8+184]
	043 Move V0, [X8]
	044 Move [X19], D0
	045 Move X0, [X22]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Add X2, X31, 0
	051 Move X0, X20
	052 Move V0, V9
	053 Move V1, V8
	054 Move X1, X21
	055 Call RectTransformUtility.ScreenPointToWorldPointInRectangle, X0, X1, X2, X3
	056 Move W21, W0
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {71}
	061 Compare X20, 0
	062 JumpIfEqual {82}
	063 Move S1, [X31+4]
	064 Move S2, [X31+8]
	065 Move V0, [X31]
	066 Move X0, X20
	067 Move X1, X31
	068 Call Transform.InverseTransformPoint, X0, X1
	069 Move [X19], S0
	070 Move [X19+8], S1
	071 And W0, W21, 1
	072 Move X20, [X31+64]
	073 Move X19, [X31+72]
	074 Move X22, [X31+48]
	075 Move X21, [X31+56]
	076 Move X30, [X31+32]
	077 Move X23, [X31+40]
	078 Move D9, [X31+16]
	079 Move D8, [X31+24]
	080 Add X31, X31, 80
	081 Return X0
	082 Call 0x1C17F20

Method: UnityEngine.Ray ScreenPointToRay(UnityEngine.Camera cam, UnityEngine.Vector2 screenPos)

Disassembly:
	0x03E248E0 STP X30, X21, [X31 - 0x20]!
	0x03E248E4 STP X20, X19, [X31 + 0x10]
	0x03E248E8 ADRP X21, 0x5C4000
	0x03E248EC LDR X2, [X21 + 0x5F0]
	0x03E248F0 MOV W19, W1
	0x03E248F4 MOV X20, X0
	0x03E248F8 CBNZ X2, 0x3E24910
	0x03E248FC ADRP X0, 0xFFFFFFFFFCCFB000
	0x03E24900 ADD X0, X0, 0x9DD
	0x03E24904 BL 0x1C16CB8
	0x03E24908 MOV X2, X0
	0x03E2490C STR X0, [X21 + 0x5F0]
	0x03E24910 AND W1, W19, 0x1
	0x03E24914 MOV X0, X20
	0x03E24918 LDP X20, X19, [X31 + 0x10]
	0x03E2491C LDP X30, X21, [X31], #0x20
	0x03E24920 BR X2
	0x03E24924 STR X30, [X31 - 0x20]!
	0x03E24928 STP X20, X19, [X31 + 0x10]
	0x03E2492C ADRP X20, 0x5C4000
	0x03E24930 LDR X1, [X20 + 0x5F8]
	0x03E24934 MOV X19, X0
	0x03E24938 CBNZ X1, 0x3E24950
	0x03E2493C ADRP X0, 0xFFFFFFFFFCCFB000
	0x03E24940 ADD X0, X0, 0xA15
	0x03E24944 BL 0x1C16CB8
	0x03E24948 MOV X1, X0
	0x03E2494C STR X0, [X20 + 0x5F8]
	0x03E24950 MOV X0, X19
	0x03E24954 LDP X20, X19, [X31 + 0x10]
	0x03E24958 LDR X30, [X31], #0x20
	0x03E2495C BR X1
	0x03E24960 STP X30, X21, [X31 - 0x20]!
	0x03E24964 STP X20, X19, [X31 + 0x10]
	0x03E24968 ADRP X21, 0x5C4000
	0x03E2496C LDR X2, [X21 + 0x600]
	0x03E24970 MOV W19, W1
	0x03E24974 MOV X20, X0
	0x03E24978 CBNZ X2, 0x3E24990
	0x03E2497C ADRP X0, 0xFFFFFFFFFCD03000
	0x03E24980 ADD X0, X0, 0x672
	0x03E24984 BL 0x1C16CB8
	0x03E24988 MOV X2, X0
	0x03E2498C STR X0, [X21 + 0x600]
	0x03E24990 MOV X0, X20
	0x03E24994 MOV W1, W19
	0x03E24998 LDP X20, X19, [X31 + 0x10]
	0x03E2499C LDP X30, X21, [X31], #0x20
	0x03E249A0 BR X2
	0x03E249A4 STR X30, [X31 - 0x20]!
	0x03E249A8 STP X20, X19, [X31 + 0x10]
	0x03E249AC ADRP X20, 0x5C4000
	0x03E249B0 LDR X1, [X20 + 0x608]
	0x03E249B4 MOV X19, X0
	0x03E249B8 CBNZ X1, 0x3E249D0
	0x03E249BC ADRP X0, 0xFFFFFFFFFCCEB000
	0x03E249C0 ADD X0, X0, 0xF42
	0x03E249C4 BL 0x1C16CB8
	0x03E249C8 MOV X1, X0
	0x03E249CC STR X0, [X20 + 0x608]
	0x03E249D0 MOV X0, X19
	0x03E249D4 LDP X20, X19, [X31 + 0x10]
	0x03E249D8 LDR X30, [X31], #0x20
	0x03E249DC BR X1
	0x03E249E0 STP X30, X21, [X31 - 0x20]!
	0x03E249E4 STP X20, X19, [X31 + 0x10]
	0x03E249E8 ADRP X21, 0x5C4000
	0x03E249EC LDR X2, [X21 + 0x610]
	0x03E249F0 MOV W19, W1
	0x03E249F4 MOV X20, X0
	0x03E249F8 CBNZ X2, 0x3E24A10
	0x03E249FC ADRP X0, 0xFFFFFFFFFCCFB000
	0x03E24A00 ADD X0, X0, 0xA3C
	0x03E24A04 BL 0x1C16CB8
	0x03E24A08 MOV X2, X0
	0x03E24A0C STR X0, [X21 + 0x610]
	0x03E24A10 MOV X0, X20
	0x03E24A14 MOV W1, W19
	0x03E24A18 LDP X20, X19, [X31 + 0x10]
	0x03E24A1C LDP X30, X21, [X31], #0x20
	0x03E24A20 BR X2
	0x03E24A24 STR X30, [X31 - 0x20]!
	0x03E24A28 STP X20, X19, [X31 + 0x10]
	0x03E24A2C ADRP X20, 0x5C4000
	0x03E24A30 LDR X1, [X20 + 0x618]
	0x03E24A34 MOV X19, X0
	0x03E24A38 CBNZ X1, 0x3E24A50
	0x03E24A3C ADRP X0, 0xFFFFFFFFFCCDB000
	0x03E24A40 ADD X0, X0, 0xA65
	0x03E24A44 BL 0x1C16CB8
	0x03E24A48 MOV X1, X0
	0x03E24A4C STR X0, [X20 + 0x618]
	0x03E24A50 MOV X0, X19
	0x03E24A54 LDP X20, X19, [X31 + 0x10]
	0x03E24A58 LDR X30, [X31], #0x20
	0x03E24A5C BR X1
	0x03E24A60 STP X30, X21, [X31 - 0x20]!
	0x03E24A64 STP X20, X19, [X31 + 0x10]
	0x03E24A68 ADRP X21, 0x5C4000
	0x03E24A6C LDR X2, [X21 + 0x620]
	0x03E24A70 MOV W19, W1
	0x03E24A74 MOV X20, X0
	0x03E24A78 CBNZ X2, 0x3E24A90
	0x03E24A7C ADRP X0, 0xFFFFFFFFFCD05000
	0x03E24A80 ADD X0, X0, 0x584
	0x03E24A84 BL 0x1C16CB8
	0x03E24A88 MOV X2, X0
	0x03E24A8C STR X0, [X21 + 0x620]
	0x03E24A90 MOV X0, X20
	0x03E24A94 MOV W1, W19

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+32], D11
	003 Move [X31+40], D10
	004 Move [X31+48], D9
	005 Move [X31+56], D8
	006 Move [X31+64], X30
	007 Move [X31+80], X22
	008 Move [X31+88], X21
	009 Move [X31+96], X20
	010 Move [X31+104], X19
	011 Move X22, 0x5C5000
	012 Move X21, 0x2D0000
	013 Move X19, X8
	014 Move W8, [X22+1367]
	015 Move X21, [X21+1432]
	016 Move V8, V1
	017 Move V9, V0
	018 Move X20, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0x2D0000
	024 Move X0, [X0+1432]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X22+1367], W8
	028 Move X0, [X21]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X20
	034 Move X1, X31
	035 Move X2, X31
	036 Call Object.op_Inequality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {55}
	041 Compare X20, 0
	042 JumpIfEqual {129}
	043 Add X8, X31, 8
	044 Move S2, W31
	045 Move X0, X20
	046 Move V0, V9
	047 Move V1, V8
	048 Move X1, X31
	049 Call Camera.ScreenPointToRay, X0, X1
	050 Move S9, [X31+8]
	051 Move S8, [X31+12]
	052 Move V2, [X31+16]
	053 NotImplemented "Instruction LDUR not yet implemented."
	054 Move V1, [X31+28]
	055 Move X20, 0x5B5000
	056 Move W8, [X20+2591]
	057 Compare W8, 0
	058 JumpIfNotEqual {64}
	059 Move X0, 0x2D0000
	060 Move X0, [X0+1440]
	061 Call 0x1C17CF4
	062 Move W8, 1
	063 Move [X20+2591], W8
	064 Move X20, 0x2D0000
	065 Move X20, [X20+1440]
	066 Move X21, 0x5B5000
	067 Move W9, [X21+1925]
	068 Move X8, [X20]
	069 Move X8, [X8+184]
	070 Move V10, [X8+72]
	071 Move V11, [X8+80]
	072 Compare W9, 0
	073 JumpIfNotEqual {79}
	074 Move X0, 0x2D0000
	075 Move X0, [X0+1448]
	076 Call 0x1C17CF4
	077 Move W8, 1
	078 Move [X21+1925], W8
	079 Move X8, 0x2D0000
	080 Move X8, [X8+1448]
	081 Move X0, [X8]
	082 Move W8, [X0+224]
	083 Compare W8, 0
	084 JumpIfNotEqual {86}
	085 Call 0x1C17DFC
	086 Move X8, -53710848
	087 NotImplemented "Instruction INVALID not yet implemented."
	088 Move V2, [X8+380]
	089 NotImplemented "Instruction FADDP not yet implemented."
	090 Multiply S1, S11, S11
	091 Add S0, S1, S0
	092 NotImplemented "Instruction FSQRT not yet implemented."
	093 NotImplemented "Instruction FCMP not yet implemented."
	094 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	095 Move W8, 0xC2C80000
	096 NotImplemented "Instruction INVALID not yet implemented."
	097 NotImplemented "Instruction FDIV not yet implemented."
	098 Move X21, 0x5B5000
	099 Move W8, [X21+1923]
	100 Compare W8, 0
	101 JumpIfNotEqual {107}
	102 Move X0, 0x2D0000
	103 Move X0, [X0+1440]
	104 Call 0x1C17CF4
	105 Move W8, 1
	106 Move [X21+1923], W8
	107 Move X8, [X20]
	108 Move X8, [X8+184]
	109 Move V0, [X8]
	110 Move V1, [X8+8]
	111 Move W8, 0xC2C80000
	112 Move S2, W8
	113 Move [X19], S9
	114 Move [X19+8], S8
	115 Move [X19+8], S2
	116 Move [X19+12], D0
	117 Move [X19+20], S1
	118 Move X20, [X31+96]
	119 Move X19, [X31+104]
	120 Move X22, [X31+80]
	121 Move X21, [X31+88]
	122 Move X30, [X31+64]
	123 Move D9, [X31+48]
	124 Move D8, [X31+56]
	125 Move D11, [X31+32]
	126 Move D10, [X31+40]
	127 Add X31, X31, 112
	128 Return X0
	129 Call 0x1C17F20

Method: UnityEngine.Vector2 WorldToScreenPoint(UnityEngine.Camera cam, UnityEngine.Vector3 worldPoint)

Disassembly:
	0x03E24B94 MOV X1, X19
	0x03E24B98 LDP X20, X19, [X31 + 0x10]
	0x03E24B9C LDP X30, X21, [X31], #0x20
	0x03E24BA0 BR X2
	0x03E24BA4 STR X30, [X31 - 0x20]!
	0x03E24BA8 STP X20, X19, [X31 + 0x10]
	0x03E24BAC ADRP X20, 0x5C4000
	0x03E24BB0 LDR X1, [X20 + 0x648]
	0x03E24BB4 MOV X19, X0
	0x03E24BB8 CBNZ X1, 0x3E24BD0
	0x03E24BBC ADRP X0, 0xFFFFFFFFFCCFF000
	0x03E24BC0 ADD X0, X0, 0xC87
	0x03E24BC4 BL 0x1C16CB8
	0x03E24BC8 MOV X1, X0
	0x03E24BCC STR X0, [X20 + 0x648]
	0x03E24BD0 MOV X0, X19
	0x03E24BD4 LDP X20, X19, [X31 + 0x10]
	0x03E24BD8 LDR X30, [X31], #0x20
	0x03E24BDC BR X1
	0x03E24BE0 STR X30, [X31 - 0x20]!
	0x03E24BE4 STP X20, X19, [X31 + 0x10]
	0x03E24BE8 ADRP X20, 0x5C4000
	0x03E24BEC LDR X8, [X20 + 0x698]
	0x03E24BF0 MOV X19, X0
	0x03E24BF4 STR X31, [X31 + 0x8]
	0x03E24BF8 CBNZ X8, 0x3E24C10
	0x03E24BFC ADRP X0, 0xFFFFFFFFFCCFF000
	0x03E24C00 ADD X0, X0, 0xCAC
	0x03E24C04 BL 0x1C16CB8
	0x03E24C08 MOV X8, X0
	0x03E24C0C STR X0, [X20 + 0x698]
	0x03E24C10 ADD X1, X31, 0x8
	0x03E24C14 MOV X0, X19
	0x03E24C18 BLR X8
	0x03E24C1C LDP S0, S1, [X31 + 0x8]
	0x03E24C20 LDP X20, X19, [X31 + 0x10]
	0x03E24C24 LDR X30, [X31], #0x20
	0x03E24C28 RET
	0x03E24C2C STP X30, X21, [X31 - 0x20]!
	0x03E24C30 STP X20, X19, [X31 + 0x10]
	0x03E24C34 ADRP X21, 0x5C4000
	0x03E24C38 LDR X2, [X21 + 0x698]
	0x03E24C3C MOV X19, X1
	0x03E24C40 MOV X20, X0

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x5C5000
	009 Move X21, 0x2D0000
	010 Move W8, [X20+1368]
	011 Move X21, [X21+1432]
	012 Move V10, V2
	013 Move V8, V1
	014 Move V9, V0
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x2D0000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+1368], W8
	025 Move X0, [X21]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Equality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {48}
	038 Compare X19, 0
	039 JumpIfEqual {58}
	040 Move X0, X19
	041 Move V0, V9
	042 Move V1, V8
	043 Move V2, V10
	044 Move X1, X31
	045 Call Camera.WorldToScreenPoint, X0, X1
	046 Move V9, V0
	047 Move V8, V1
	048 Move V0, V9
	049 Move V1, V8
	050 Move X20, [X31+48]
	051 Move X19, [X31+56]
	052 Move X30, [X31+32]
	053 Move X21, [X31+40]
	054 Move D9, [X31+16]
	055 Move D8, [X31+24]
	056 Move V10, [X31+64]
	057 Return X0
	058 Call 0x1C17F20

Method: System.Void FlipLayoutOnAxis(UnityEngine.RectTransform rect, System.Int32 axis, System.Boolean keepPositioning, System.Boolean recursive)

Disassembly:
	0x03E24C44 CBNZ X2, 0x3E24C5C
	0x03E24C48 ADRP X0, 0xFFFFFFFFFCCFF000
	0x03E24C4C ADD X0, X0, 0xCAC
	0x03E24C50 BL 0x1C16CB8
	0x03E24C54 MOV X2, X0
	0x03E24C58 STR X0, [X21 + 0x698]
	0x03E24C5C MOV X0, X20
	0x03E24C60 MOV X1, X19
	0x03E24C64 LDP X20, X19, [X31 + 0x10]
	0x03E24C68 LDP X30, X21, [X31], #0x20
	0x03E24C6C BR X2
	0x03E24C70 STR X30, [X31 - 0x20]!
	0x03E24C74 STP X20, X19, [X31 + 0x10]
	0x03E24C78 ADRP X19, 0x5C4000
	0x03E24C7C ADRP X20, 0x33E000
	0x03E24C80 LDRB W8, [X19 + 0x650]
	0x03E24C84 LDR X20, [X20 + 0x4A8]
	0x03E24C88 TBNZ X8, 0x0, 0x3E24CA0
	0x03E24C8C ADRP X0, 0x33E000
	0x03E24C90 LDR X0, [X0 + 0x4A8]
	0x03E24C94 BL 0x1C16CF4
	0x03E24C98 MOVZ W8, 0x1
	0x03E24C9C STRB W8, [X19 + 0x650]
	0x03E24CA0 LDR X8, [X20]
	0x03E24CA4 LDP X20, X19, [X31 + 0x10]
	0x03E24CA8 LDR X8, [X8 + 0xB8]
	0x03E24CAC LDR X0, [X8 + 0x10]
	0x03E24CB0 LDR X30, [X31], #0x20
	0x03E24CB4 RET
	0x03E24CB8 STP X30, X21, [X31 - 0x20]!
	0x03E24CBC STP X20, X19, [X31 + 0x10]
	0x03E24CC0 ADRP X20, 0x5C4000
	0x03E24CC4 ADRP X21, 0x33E000
	0x03E24CC8 LDRB W8, [X20 + 0x651]
	0x03E24CCC LDR X21, [X21 + 0x4A8]
	0x03E24CD0 MOV X19, X0
	0x03E24CD4 TBNZ X8, 0x0, 0x3E24CEC
	0x03E24CD8 ADRP X0, 0x33E000
	0x03E24CDC LDR X0, [X0 + 0x4A8]
	0x03E24CE0 BL 0x1C16CF4
	0x03E24CE4 MOVZ W8, 0x1
	0x03E24CE8 STRB W8, [X20 + 0x651]
	0x03E24CEC LDR X8, [X21]
	0x03E24CF0 LDR X8, [X8 + 0xB8]
	0x03E24CF4 STR X19, [X8 + 0x10]
	0x03E24CF8 LDP X20, X19, [X31 + 0x10]
	0x03E24CFC LDP X30, X21, [X31], #0x20
	0x03E24D00 RET
	0x03E24D04 STR X30, [X31 - 0x20]!
	0x03E24D08 STP X20, X19, [X31 + 0x10]
	0x03E24D0C ADRP X19, 0x5C4000
	0x03E24D10 ADRP X20, 0x33E000
	0x03E24D14 LDRB W8, [X19 + 0x652]
	0x03E24D18 LDR X20, [X20 + 0x4A8]
	0x03E24D1C TBNZ X8, 0x0, 0x3E24D34
	0x03E24D20 ADRP X0, 0x33E000
	0x03E24D24 LDR X0, [X0 + 0x4A8]
	0x03E24D28 BL 0x1C16CF4
	0x03E24D2C MOVZ W8, 0x1
	0x03E24D30 STRB W8, [X19 + 0x652]
	0x03E24D34 LDR X8, [X20]
	0x03E24D38 LDP X20, X19, [X31 + 0x10]
	0x03E24D3C LDR X8, [X8 + 0xB8]
	0x03E24D40 LDR X0, [X8 + 0x18]
	0x03E24D44 LDR X30, [X31], #0x20
	0x03E24D48 RET
	0x03E24D4C STP X30, X21, [X31 - 0x20]!
	0x03E24D50 STP X20, X19, [X31 + 0x10]
	0x03E24D54 ADRP X20, 0x5C4000
	0x03E24D58 ADRP X21, 0x33E000
	0x03E24D5C LDRB W8, [X20 + 0x653]
	0x03E24D60 LDR X21, [X21 + 0x4A8]
	0x03E24D64 MOV X19, X0
	0x03E24D68 TBNZ X8, 0x0, 0x3E24D80
	0x03E24D6C ADRP X0, 0x33E000
	0x03E24D70 LDR X0, [X0 + 0x4A8]
	0x03E24D74 BL 0x1C16CF4
	0x03E24D78 MOVZ W8, 0x1
	0x03E24D7C STRB W8, [X20 + 0x653]
	0x03E24D80 LDR X8, [X21]
	0x03E24D84 LDR X8, [X8 + 0xB8]
	0x03E24D88 STR X19, [X8 + 0x18]
	0x03E24D8C LDP X20, X19, [X31 + 0x10]
	0x03E24D90 LDP X30, X21, [X31], #0x20
	0x03E24D94 RET
	0x03E24D98 STR X30, [X31 - 0x20]!
	0x03E24D9C STP X20, X19, [X31 + 0x10]
	0x03E24DA0 ADRP X19, 0x5C4000
	0x03E24DA4 ADRP X20, 0x33E000
	0x03E24DA8 LDRB W8, [X19 + 0x654]
	0x03E24DAC LDR X20, [X20 + 0x4A8]
	0x03E24DB0 TBNZ X8, 0x0, 0x3E24DC8
	0x03E24DB4 ADRP X0, 0x33E000
	0x03E24DB8 LDR X0, [X0 + 0x4A8]
	0x03E24DBC BL 0x1C16CF4
	0x03E24DC0 MOVZ W8, 0x1
	0x03E24DC4 STRB W8, [X19 + 0x654]
	0x03E24DC8 LDR X8, [X20]
	0x03E24DCC LDP X20, X19, [X31 + 0x10]
	0x03E24DD0 LDR X8, [X8 + 0xB8]
	0x03E24DD4 LDR X0, [X8 + 0x20]
	0x03E24DD8 LDR X30, [X31], #0x20
	0x03E24DDC RET
	0x03E24DE0 STP X30, X21, [X31 - 0x20]!
	0x03E24DE4 STP X20, X19, [X31 + 0x10]
	0x03E24DE8 ADRP X20, 0x5C4000
	0x03E24DEC ADRP X21, 0x33E000
	0x03E24DF0 LDRB W8, [X20 + 0x655]
	0x03E24DF4 LDR X21, [X21 + 0x4A8]
	0x03E24DF8 MOV X19, X0
	0x03E24DFC TBNZ X8, 0x0, 0x3E24E14
	0x03E24E00 ADRP X0, 0x33E000
	0x03E24E04 LDR X0, [X0 + 0x4A8]
	0x03E24E08 BL 0x1C16CF4
	0x03E24E0C MOVZ W8, 0x1
	0x03E24E10 STRB W8, [X20 + 0x655]
	0x03E24E14 LDR X8, [X21]
	0x03E24E18 LDR X8, [X8 + 0xB8]
	0x03E24E1C STR X19, [X8 + 0x20]
	0x03E24E20 LDP X20, X19, [X31 + 0x10]
	0x03E24E24 LDP X30, X21, [X31], #0x20
	0x03E24E28 RET
	0x03E24E2C STR X30, [X31 - 0x20]!
	0x03E24E30 STP X20, X19, [X31 + 0x10]
	0x03E24E34 ADRP X20, 0x5C4000
	0x03E24E38 LDR X1, [X20 + 0x658]
	0x03E24E3C MOV W19, W0
	0x03E24E40 CBNZ X1, 0x3E24E58
	0x03E24E44 ADRP X0, 0xFFFFFFFFFCCE3000
	0x03E24E48 ADD X0, X0, 0xCDB
	0x03E24E4C BL 0x1C16CB8
	0x03E24E50 MOV X1, X0
	0x03E24E54 STR X0, [X20 + 0x658]
	0x03E24E58 AND W0, W19, 0x1
	0x03E24E5C LDP X20, X19, [X31 + 0x10]
	0x03E24E60 LDR X30, [X31], #0x20
	0x03E24E64 BR X1
	0x03E24E68 STR X30, [X31 - 0x20]!
	0x03E24E6C STP X20, X19, [X31 + 0x10]
	0x03E24E70 ADRP X20, 0x5C4000
	0x03E24E74 LDR X1, [X20 + 0x660]
	0x03E24E78 MOV X19, X0
	0x03E24E7C CBNZ X1, 0x3E24E94
	0x03E24E80 ADRP X0, 0xFFFFFFFFFCCED000
	0x03E24E84 ADD X0, X0, 0xA0C
	0x03E24E88 BL 0x1C16CB8
	0x03E24E8C MOV X1, X0
	0x03E24E90 STR X0, [X20 + 0x660]
	0x03E24E94 MOV X0, X19
	0x03E24E98 LDP X20, X19, [X31 + 0x10]
	0x03E24E9C LDR X30, [X31], #0x20
	0x03E24EA0 BR X1
	0x03E24EA4 STR X30, [X31 - 0x20]!
	0x03E24EA8 STP X20, X19, [X31 + 0x10]
	0x03E24EAC ADRP X20, 0x5C4000
	0x03E24EB0 LDR X1, [X20 + 0x668]
	0x03E24EB4 MOV X19, X0
	0x03E24EB8 CBNZ X1, 0x3E24ED0
	0x03E24EBC ADRP X0, 0xFFFFFFFFFCD07000
	0x03E24EC0 ADD X0, X0, 0x3A9
	0x03E24EC4 BL 0x1C16CB8
	0x03E24EC8 MOV X1, X0
	0x03E24ECC STR X0, [X20 + 0x668]
	0x03E24ED0 MOV X0, X19
	0x03E24ED4 LDP X20, X19, [X31 + 0x10]
	0x03E24ED8 LDR X30, [X31], #0x20
	0x03E24EDC BR X1
	0x03E24EE0 STR D8, [X31 - 0x20]!
	0x03E24EE4 STR X30, [X31 + 0x8]
	0x03E24EE8 STP X20, X19, [X31 + 0x10]
	0x03E24EEC ADRP X20, 0x5C4000
	0x03E24EF0 LDR X1, [X20 + 0x670]
	0x03E24EF4 MOV V8.16B, V0.16B
	0x03E24EF8 MOV X19, X0
	0x03E24EFC CBNZ X1, 0x3E24F14
	0x03E24F00 ADRP X0, 0xFFFFFFFFFCCDB000

ISIL:
	001 Move [X31-112], D11
	002 Move [X31-104], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X23, 0x5C5000
	015 Move X24, 0x2D0000
	016 Move W8, [X23+1369]
	017 Move X24, [X24+1432]
	018 Move W22, W3
	019 Move W21, W2
	020 Move W20, W1
	021 Move X19, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {37}
	026 Move X0, 0x2D0000
	027 Move X0, [X0+1432]
	028 Call 0x1C17CF4
	029 Move X0, 0x326000
	030 Move X0, [X0+1720]
	031 Call 0x1C17CF4
	032 Move X0, 0x2F7000
	033 Move X0, [X0+3184]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X23+1369], W8
	037 Move X0, [X24]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X19
	043 Move X1, X31
	044 Move X2, X31
	045 Call Object.op_Equality, X0, X1
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfEqual {123}
	050 Move TEMP, X22
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {104}
	054 Compare X19, 0
	055 JumpIfEqual {192}
	056 Move X0, X19
	057 Move X1, X31
	058 Call Transform.get_childCount, X0
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X25, 0x326000
	061 Move X26, 0x2F7000
	062 Move X25, [X25+1720]
	063 Move X26, [X26+3184]
	064 Move W22, W31
	065 Move X0, X19
	066 Move W1, W22
	067 Move X2, X31
	068 Call Transform.GetChild, X0, X1
	069 Compare X0, 0
	070 JumpIfEqual {75}
	071 Move X8, [X26]
	072 Move X9, [X0]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 NotImplemented "Instruction CSEL not yet implemented."
	075 Move X23, X31
	076 Move X0, [X24]
	077 Move W8, [X0+224]
	078 Compare W8, 0
	079 JumpIfNotEqual {81}
	080 Call 0x1C17DFC
	081 Move X0, X23
	082 Move X1, X31
	083 Move X2, X31
	084 Call Object.op_Inequality, X0, X1
	085 Move TEMP, X0
	086 And TEMP, TEMP, 1
	087 Compare TEMP, 1
	088 JumpIfNotEqual {99}
	089 Move X0, [X25]
	090 Move W8, [X0+224]
	091 Compare W8, 0
	092 JumpIfNotEqual {94}
	093 Call 0x1C17DFC
	094 Move W3, 1
	095 Move X0, X23
	096 Move W1, W20
	097 Move W2, W31
	098 Call RectTransformUtility.FlipLayoutOnAxis, X0, X1, X2, X3
	099 Move X0, X19
	100 Move X1, X31
	101 Add W22, W22, 1
	102 Call Transform.get_childCount, X0
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Compare X19, 0
	105 JumpIfEqual {192}
	106 Move X0, X19
	107 Move X1, X31
	108 Call RectTransform.get_pivot, X0
	109 Compare W20, 0
	110 JumpIfEqual {114}
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Move S2, 1
	113 Subtract S1, S2, S1
	114 Move S2, 1
	115 Subtract S0, S2, S0
	116 Move X0, X19
	117 Move X1, X31
	118 Call RectTransform.set_pivot, X0, X1
	119 Move TEMP, X21
	120 And TEMP, TEMP, 1
	121 Compare TEMP, 1
	122 JumpIfNotEqual {137}
	123 Move X20, [X31+96]
	124 Move X19, [X31+104]
	125 Move X22, [X31+80]
	126 Move X21, [X31+88]
	127 Move X24, [X31+64]
	128 Move X23, [X31+72]
	129 Move X26, [X31+48]
	130 Move X25, [X31+56]
	131 Move X30, [X31+32]
	132 Move D9, [X31+16]
	133 Move D8, [X31+24]
	134 Move D11, [X31+112]
	135 Move D10, [X31+120]
	136 Return 
	137 Move X0, X19
	138 Move X1, X31
	139 Call RectTransform.get_anchoredPosition, X0
	140 Compare W20, 0
	141 JumpIfEqual {144}
	142 NotImplemented "Instruction CMP not yet implemented."
	143 NotImplemented "Instruction FNEG not yet implemented."
	144 NotImplemented "Instruction FNEG not yet implemented."
	145 Move X0, X19
	146 Move X1, X31
	147 Call RectTransform.set_anchoredPosition, X0, X1
	148 Move X0, X19
	149 Move X1, X31
	150 Call RectTransform.get_anchorMin, X0
	151 Move X0, X19
	152 Move X1, X31
	153 Move V11, V0
	154 Move V8, V1
	155 Call RectTransform.get_anchorMax, X0
	156 Move V9, V0
	157 Move V10, V1
	158 Compare W20, 0
	159 JumpIfEqual {166}
	160 NotImplemented "Instruction CMP not yet implemented."
	161 Move S0, 1
	162 Subtract S1, S0, S10
	163 Subtract S10, S0, S8
	164 Move V8, V1
	165 Move V0, V11
	166 Move S1, 1
	167 Subtract S0, S1, S9
	168 Subtract S9, S1, S11
	169 Move X0, X19
	170 Move V1, V8
	171 Move X1, X31
	172 Call RectTransform.set_anchorMin, X0, X1
	173 Move X0, X19
	174 Move V0, V9
	175 Move X20, [X31+96]
	176 Move X19, [X31+104]
	177 Move X22, [X31+80]
	178 Move X21, [X31+88]
	179 Move X24, [X31+64]
	180 Move X23, [X31+72]
	181 Move X26, [X31+48]
	182 Move X25, [X31+56]
	183 Move X30, [X31+32]
	184 Move D9, [X31+16]
	185 Move D8, [X31+24]
	186 Move V1, V10
	187 Move X1, X31
	188 Move D11, [X31+112]
	189 Move D10, [X31+120]
	190 Call RectTransform.set_anchorMax, X0, X1
	191 Return 
	192 Call 0x1C17F20
	193 Move X0, 0x2DA000
	194 Move X0, [X0+3960]
	195 Call 0x1C17D08
	196 Call 0x1C17F10
	197 Move X19, X0
	198 Move X0, 0x322000
	199 Move X0, [X0+4088]
	200 Call 0x1C17D08
	201 Move X1, X0
	202 Move X0, X19
	203 Move X2, X31
	204 Call IndexOutOfRangeException..ctor, X0, X1
	205 Move X0, 0x323000
	206 Move X0, [X0]
	207 Call 0x1C17D08
	208 Move X1, X0
	209 Move X0, X19
	210 Call 0x1C17DEC

Method: System.Void FlipLayoutAxes(UnityEngine.RectTransform rect, System.Boolean keepPositioning, System.Boolean recursive)

Disassembly:
	0x03E24F04 ADD X0, X0, 0xA8E
	0x03E24F08 BL 0x1C16CB8
	0x03E24F0C MOV X1, X0
	0x03E24F10 STR X0, [X20 + 0x670]
	0x03E24F14 MOV X0, X19
	0x03E24F18 LDP X20, X19, [X31 + 0x10]
	0x03E24F1C LDR X30, [X31 + 0x8]
	0x03E24F20 MOV V0.16B, V8.16B
	0x03E24F24 LDR V8, [X31], #0x20
	0x03E24F28 BR X1
	0x03E24F2C STP X30, X19, [X31 - 0x10]!
	0x03E24F30 ADRP X19, 0x5C4000
	0x03E24F34 LDR X0, [X19 + 0x678]
	0x03E24F38 CBNZ X0, 0x3E24F4C
	0x03E24F3C ADRP X0, 0xFFFFFFFFFCCFD000
	0x03E24F40 ADD X0, X0, 0x932
	0x03E24F44 BL 0x1C16CB8
	0x03E24F48 STR X0, [X19 + 0x678]
	0x03E24F4C LDP X30, X19, [X31], #0x10
	0x03E24F50 BR X0
	0x03E24F54 STP X30, X19, [X31 - 0x10]!
	0x03E24F58 ADRP X19, 0x5C4000
	0x03E24F5C LDR X0, [X19 + 0x680]
	0x03E24F60 CBNZ X0, 0x3E24F74
	0x03E24F64 ADRP X0, 0xFFFFFFFFFCCE1000
	0x03E24F68 ADD X0, X0, 0xC19
	0x03E24F6C BL 0x1C16CB8
	0x03E24F70 STR X0, [X19 + 0x680]
	0x03E24F74 LDP X30, X19, [X31], #0x10
	0x03E24F78 BR X0
	0x03E24F7C STR X30, [X31 - 0x10]!
	0x03E24F80 BL 0x3E24F8C
	0x03E24F84 LDR X30, [X31], #0x10
	0x03E24F88 B 0x3E24FF0
	0x03E24F8C STR X30, [X31 - 0x20]!
	0x03E24F90 STP X20, X19, [X31 + 0x10]
	0x03E24F94 ADRP X19, 0x5C4000
	0x03E24F98 ADRP X20, 0x33E000
	0x03E24F9C LDRB W8, [X19 + 0x688]
	0x03E24FA0 LDR X20, [X20 + 0x4A8]
	0x03E24FA4 TBNZ X8, 0x0, 0x3E24FBC
	0x03E24FA8 ADRP X0, 0x33E000
	0x03E24FAC LDR X0, [X0 + 0x4A8]
	0x03E24FB0 BL 0x1C16CF4
	0x03E24FB4 MOVZ W8, 0x1
	0x03E24FB8 STRB W8, [X19 + 0x688]
	0x03E24FBC LDR X8, [X20]
	0x03E24FC0 LDR X8, [X8 + 0xB8]
	0x03E24FC4 LDR X8, [X8]
	0x03E24FC8 CBZ X8, 0x3E24FE4
	0x03E24FCC LDR X2, [X8 + 0x18]
	0x03E24FD0 LDR X0, [X8 + 0x40]
	0x03E24FD4 LDR X1, [X8 + 0x28]
	0x03E24FD8 LDP X20, X19, [X31 + 0x10]
	0x03E24FDC LDR X30, [X31], #0x20
	0x03E24FE0 BR X2
	0x03E24FE4 LDP X20, X19, [X31 + 0x10]
	0x03E24FE8 LDR X30, [X31], #0x20
	0x03E24FEC RET
	0x03E24FF0 STR X30, [X31 - 0x20]!
	0x03E24FF4 STP X20, X19, [X31 + 0x10]
	0x03E24FF8 ADRP X19, 0x5C4000
	0x03E24FFC ADRP X20, 0x33E000
	0x03E25000 LDRB W8, [X19 + 0x689]
	0x03E25004 B 0x3EB1A44
	0x03E25008 TBNZ X8, 0x0, 0x3E25020
	0x03E2500C ADRP X0, 0x33D000
	0x03E25010 LDR X0, [X0 + 0x4A8]
	0x03E25014 BL 0x1C16CF4
	0x03E25018 MOVZ W8, 0x1
	0x03E2501C STRB W8, [X19 + 0x689]
	0x03E25020 LDR X8, [X20]
	0x03E25024 LDR X8, [X8 + 0xB8]
	0x03E25028 LDR X8, [X8 + 0x8]
	0x03E2502C CBZ X8, 0x3E25048
	0x03E25030 LDR X2, [X8 + 0x18]
	0x03E25034 LDR X0, [X8 + 0x40]
	0x03E25038 LDR X1, [X8 + 0x28]
	0x03E2503C LDP X20, X19, [X31 + 0x10]
	0x03E25040 LDR X30, [X31], #0x20
	0x03E25044 BR X2
	0x03E25048 LDP X20, X19, [X31 + 0x10]
	0x03E2504C LDR X30, [X31], #0x20
	0x03E25050 RET
	0x03E25054 STR X30, [X31 - 0x20]!
	0x03E25058 STP X20, X19, [X31 + 0x10]
	0x03E2505C ADRP X20, 0x5C3000
	0x03E25060 LDRB W8, [X20 + 0x6B8]
	0x03E25064 MOV W19, W0
	0x03E25068 CBNZ W8, 0x3E25080
	0x03E2506C ADRP X0, 0x33D000
	0x03E25070 LDR X0, [X0 + 0x4A8]
	0x03E25074 BL 0x1C16CF4
	0x03E25078 MOVZ W8, 0x1
	0x03E2507C STRB W8, [X20 + 0x6B8]
	0x03E25080 ADRP X8, 0x33D000
	0x03E25084 LDR X8, [X8 + 0x4A8]
	0x03E25088 LDR X8, [X8]
	0x03E2508C LDR X8, [X8 + 0xB8]
	0x03E25090 LDR X8, [X8 + 0x10]
	0x03E25094 CBZ X8, 0x3E250B4
	0x03E25098 LDR X3, [X8 + 0x18]
	0x03E2509C LDR X0, [X8 + 0x40]
	0x03E250A0 LDR X2, [X8 + 0x28]
	0x03E250A4 MOV W1, W19
	0x03E250A8 LDP X20, X19, [X31 + 0x10]
	0x03E250AC LDR X30, [X31], #0x20
	0x03E250B0 BR X3
	0x03E250B4 LDP X20, X19, [X31 + 0x10]
	0x03E250B8 LDR X30, [X31], #0x20
	0x03E250BC RET
	0x03E250C0 STP X30, X21, [X31 - 0x20]!
	0x03E250C4 STP X20, X19, [X31 + 0x10]
	0x03E250C8 ADRP X21, 0x5C3000
	0x03E250CC LDRB W8, [X21 + 0x6B9]
	0x03E250D0 MOV W19, W1
	0x03E250D4 MOV W20, W0
	0x03E250D8 CBNZ W8, 0x3E250F0
	0x03E250DC ADRP X0, 0x33D000
	0x03E250E0 LDR X0, [X0 + 0x4A8]
	0x03E250E4 BL 0x1C16CF4
	0x03E250E8 MOVZ W8, 0x1
	0x03E250EC STRB W8, [X21 + 0x6B9]
	0x03E250F0 ADRP X8, 0x33D000
	0x03E250F4 LDR X8, [X8 + 0x4A8]
	0x03E250F8 LDR X8, [X8]
	0x03E250FC LDR X8, [X8 + 0xB8]
	0x03E25100 LDR X8, [X8 + 0x18]
	0x03E25104 CBZ X8, 0x3E25128
	0x03E25108 LDR X4, [X8 + 0x18]
	0x03E2510C LDR X0, [X8 + 0x40]
	0x03E25110 LDR X3, [X8 + 0x28]
	0x03E25114 MOV W1, W20
	0x03E25118 MOV W2, W19
	0x03E2511C LDP X20, X19, [X31 + 0x10]
	0x03E25120 LDP X30, X21, [X31], #0x20
	0x03E25124 BR X4
	0x03E25128 LDP X20, X19, [X31 + 0x10]
	0x03E2512C LDP X30, X21, [X31], #0x20
	0x03E25130 RET
	0x03E25134 STR X30, [X31 - 0x20]!
	0x03E25138 STP X20, X19, [X31 + 0x10]
	0x03E2513C ADRP X20, 0x5C3000
	0x03E25140 LDRB W8, [X20 + 0x6BA]
	0x03E25144 MOV W19, W0
	0x03E25148 CBNZ W8, 0x3E25160
	0x03E2514C ADRP X0, 0x33D000
	0x03E25150 LDR X0, [X0 + 0x4A8]
	0x03E25154 BL 0x1C16CF4
	0x03E25158 MOVZ W8, 0x1

ISIL:
	001 Move [X31-80], D9
	002 Move [X31-72], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X22, 0x5C5000
	012 Move X23, 0x2D0000
	013 Move W8, [X22+1370]
	014 Move X23, [X23+1432]
	015 Move W21, W2
	016 Move W20, W1
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {33}
	022 Move X0, 0x2D0000
	023 Move X0, [X0+1432]
	024 Call 0x1C17CF4
	025 Move X0, 0x326000
	026 Move X0, [X0+1720]
	027 Call 0x1C17CF4
	028 Move X0, 0x2F7000
	029 Move X0, [X0+3184]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X22+1370], W8
	033 Move X0, [X23]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, X19
	039 Move X1, X31
	040 Move X2, X31
	041 Call Object.op_Equality, X0, X1
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfEqual {131}
	046 Move TEMP, X21
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {99}
	050 Compare X19, 0
	051 JumpIfEqual {186}
	052 Move X0, X19
	053 Move X1, X31
	054 Call Transform.get_childCount, X0
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X24, 0x326000
	057 Move X25, 0x2F7000
	058 Move X24, [X24+1720]
	059 Move X25, [X25+3184]
	060 Move W21, W31
	061 Move X0, X19
	062 Move W1, W21
	063 Move X2, X31
	064 Call Transform.GetChild, X0, X1
	065 Compare X0, 0
	066 JumpIfEqual {71}
	067 Move X8, [X25]
	068 Move X9, [X0]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 NotImplemented "Instruction CSEL not yet implemented."
	071 Move X22, X31
	072 Move X0, [X23]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 Move X0, X22
	078 Move X1, X31
	079 Move X2, X31
	080 Call Object.op_Inequality, X0, X1
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfNotEqual {94}
	085 Move X0, [X24]
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {90}
	089 Call 0x1C17DFC
	090 Move W2, 1
	091 Move X0, X22
	092 Move W1, W31
	093 Call RectTransformUtility.FlipLayoutAxes, X0, X1, X2
	094 Move X0, X19
	095 Move X1, X31
	096 Add W21, W21, 1
	097 Call Transform.get_childCount, X0
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Compare X19, 0
	100 JumpIfEqual {186}
	101 Move X0, X19
	102 Move X1, X31
	103 Call RectTransform.get_pivot, X0
	104 Move X21, 0x325000
	105 Move X21, [X21+1720]
	106 Move V8, V0
	107 Move V9, V1
	108 Move X0, [X21]
	109 Move W8, [X0+224]
	110 Compare W8, 0
	111 JumpIfNotEqual {113}
	112 Call 0x1C17DFC
	113 Move X0, X19
	114 Move V0, V9
	115 Move V1, V8
	116 Move X1, X31
	117 Call RectTransform.set_pivot, X0, X1
	118 Move X0, X19
	119 Move X1, X31
	120 Call RectTransform.get_sizeDelta, X0
	121 Move V2, V0
	122 Move V0, V1
	123 Move X0, X19
	124 Move V1, V2
	125 Move X1, X31
	126 Call RectTransform.set_sizeDelta, X0, X1
	127 Move TEMP, X20
	128 And TEMP, TEMP, 1
	129 Compare TEMP, 1
	130 JumpIfNotEqual {142}
	131 Move X20, [X31+64]
	132 Move X19, [X31+72]
	133 Move X22, [X31+48]
	134 Move X21, [X31+56]
	135 Move X24, [X31+32]
	136 Move X23, [X31+40]
	137 Move X30, [X31+16]
	138 Move X25, [X31+24]
	139 Move D9, [X31+80]
	140 Move D8, [X31+88]
	141 Return 
	142 Move X0, X19
	143 Move X1, X31
	144 Call RectTransform.get_anchoredPosition, X0
	145 Move X0, [X21]
	146 Move V8, V0
	147 Move V9, V1
	148 Move W8, [X0+224]
	149 Compare W8, 0
	150 JumpIfNotEqual {152}
	151 Call 0x1C17DFC
	152 Move X0, X19
	153 Move V0, V9
	154 Move V1, V8
	155 Move X1, X31
	156 Call RectTransform.set_anchoredPosition, X0, X1
	157 Move X0, X19
	158 Move X1, X31
	159 Call RectTransform.get_anchorMin, X0
	160 Move V2, V0
	161 Move V0, V1
	162 Move X0, X19
	163 Move V1, V2
	164 Move X1, X31
	165 Call RectTransform.set_anchorMin, X0, X1
	166 Move X0, X19
	167 Move X1, X31
	168 Call RectTransform.get_anchorMax, X0
	169 Move X0, X19
	170 Move X20, [X31+64]
	171 Move X19, [X31+72]
	172 Move X22, [X31+48]
	173 Move X21, [X31+56]
	174 Move X24, [X31+32]
	175 Move X23, [X31+40]
	176 Move X30, [X31+16]
	177 Move X25, [X31+24]
	178 Move V2, V0
	179 Move V0, V1
	180 Move V1, V2
	181 Move X1, X31
	182 Move D9, [X31+80]
	183 Move D8, [X31+88]
	184 Call RectTransform.set_anchorMax, X0, X1
	185 Return 
	186 Call 0x1C17F20

Method: UnityEngine.Vector2 GetTransposed(UnityEngine.Vector2 input)

Disassembly:
	0x03E2515C STRB W8, [X20 + 0x6BA]
	0x03E25160 ADRP X8, 0x33D000
	0x03E25164 LDR X8, [X8 + 0x4A8]
	0x03E25168 LDR X8, [X8]

ISIL:
	001 Move V2, V0
	002 Move V0, V1
	003 Move V1, V2
	004 Return X0

Method: System.Void .cctor()

Disassembly:
	0x03E2516C LDR X8, [X8 + 0xB8]
	0x03E25170 LDR X8, [X8 + 0x20]
	0x03E25174 CBZ X8, 0x3E25194
	0x03E25178 LDR X3, [X8 + 0x18]
	0x03E2517C LDR X0, [X8 + 0x40]
	0x03E25180 LDR X2, [X8 + 0x28]
	0x03E25184 MOV W1, W19
	0x03E25188 LDP X20, X19, [X31 + 0x10]
	0x03E2518C LDR X30, [X31], #0x20
	0x03E25190 BR X3
	0x03E25194 LDP X20, X19, [X31 + 0x10]
	0x03E25198 LDR X30, [X31], #0x20
	0x03E2519C RET
	0x03E251A0 MOV X1, X31
	0x03E251A4 B 0x3C32490
	0x03E251A8 STP X30, X21, [X31 - 0x20]!
	0x03E251AC STP X20, X19, [X31 + 0x10]
	0x03E251B0 LDR X8, [X2 + 0x8]
	0x03E251B4 STP X1, X2, [X0 + 0x20]
	0x03E251B8 MOV X19, X0
	0x03E251BC MOV X20, X1
	0x03E251C0 STR X8, [X0 + 0x10]
	0x03E251C4 LDRB W21, [X2 + 0x52]
	0x03E251C8 STR X0, [X0 + 0x40]
	0x03E251CC MOV X0, X2
	0x03E251D0 BL 0x1C16D84

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x5C4000
	006 Move X21, 0x2D1000
	007 Move X19, 0x325000
	008 Move W8, [X20+1371]
	009 Move X21, [X21+2480]
	010 Move X19, [X19+1720]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x325000
	016 Move X0, [X0+1720]
	017 Call 0x1C17CF4
	018 Move X0, 0x2D1000
	019 Move X0, [X0+2480]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1371], W8
	023 Move X0, [X21]
	024 Move W1, 4
	025 Call 0x1C17D6C
	026 Move X8, [X19]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X8, [X8+184]
	030 Move [X8], X0
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return 

Method: System.Void PixelAdjustPoint_Injected(ref UnityEngine.Vector2 point, UnityEngine.Transform elementTransform, UnityEngine.Canvas canvas, out UnityEngine.Vector2 ret)

Disassembly:
	0x03E240E8 MOV X0, X19
	0x03E240EC MOV V0.16B, V9.16B
	0x03E240F0 MOV V1.16B, V8.16B
	0x03E240F4 MOV X1, X31
	0x03E240F8 BL 0x3C3E880
	0x03E240FC MOV X0, X19
	0x03E24100 MOV X1, X31
	0x03E24104 BL 0x3C3E5B8
	0x03E24108 MOV V2.16B, V0.16B
	0x03E2410C MOV V0.16B, V1.16B
	0x03E24110 MOV X0, X19
	0x03E24114 MOV V1.16B, V2.16B
	0x03E24118 MOV X1, X31
	0x03E2411C BL 0x3C3E648
	0x03E24120 MOV X0, X19
	0x03E24124 MOV X1, X31
	0x03E24128 BL 0x3C3E6D4
	0x03E2412C MOV X0, X19
	0x03E24130 LDP X20, X19, [X31 + 0x40]
	0x03E24134 LDP X22, X21, [X31 + 0x30]
	0x03E24138 LDP X24, X23, [X31 + 0x20]
	0x03E2413C LDP X30, X25, [X31 + 0x10]
	0x03E24140 MOV V2.16B, V0.16B

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x5C5000
	008 Move X4, [X23+1376]
	009 Move X19, X3
	010 Move X20, X2
	011 Move X21, X1
	012 Move X22, X0
	013 Compare X4, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -53682176
	016 Add X0, X0, 3064
	017 Call 0x1C17CB8
	018 Move X4, X0
	019 Move [X23+1376], X0
	020 Move X0, X22
	021 Move X1, X21
	022 Move X2, X20
	023 Move X3, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Move X23, [X31+56]
	030 CallNoReturn X4

Method: System.Void PixelAdjustRect_Injected(UnityEngine.RectTransform rectTransform, UnityEngine.Canvas canvas, out UnityEngine.Rect ret)

Disassembly:
	0x03E241E4 ADRP X21, 0x33E000
	0x03E241E8 LDRB W8, [X20 + 0x578]
	0x03E241EC LDR X21, [X21 + 0x4A8]
	0x03E241F0 MOV X19, X0
	0x03E241F4 TBNZ X8, 0x0, 0x3E24218
	0x03E241F8 ADRP X0, 0x33E000
	0x03E241FC LDR X0, [X0 + 0x4A8]
	0x03E24200 BL 0x1C16CF4
	0x03E24204 ADRP X0, 0x335000
	0x03E24208 LDR X0, [X0 + 0x430]
	0x03E2420C BL 0x1C16CF4
	0x03E24210 MOVZ W8, 0x1
	0x03E24214 STRB W8, [X20 + 0x578]
	0x03E24218 LDR X8, [X21]
	0x03E2421C ADRP X22, 0x335000
	0x03E24220 LDR X8, [X8 + 0xB8]
	0x03E24224 LDR X20, [X8]
	0x03E24228 LDR X22, [X22 + 0x430]
	0x03E2422C MOV X0, X20
	0x03E24230 MOV X1, X19
	0x03E24234 MOV X2, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5C5000
	007 Move X3, [X22+1384]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -53542912
	014 Add X0, X0, 1783
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1384], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Boolean PointInRectangle_Injected(ref UnityEngine.Vector2 screenPoint, UnityEngine.RectTransform rect, UnityEngine.Camera cam, ref UnityEngine.Vector4 offset)

Disassembly:
	0x03E242E0 LDR X22, [X22 + 0x430]
	0x03E242E4 MOV X0, X20
	0x03E242E8 MOV X1, X19
	0x03E242EC MOV X2, X31
	0x03E242F0 BL 0x33C0FDC
	0x03E242F4 MOV X8, X0
	0x03E242F8 CBZ X0, 0x3E2430C
	0x03E242FC LDR X1, [X22]
	0x03E24300 LDR X9, [X8]
	0x03E24304 CMP X9, X1
	0x03E24308 B.NE 0x3E2433C
	0x03E2430C LDR X9, [X21]
	0x03E24310 MOV X1, X8
	0x03E24314 MOV X2, X20
	0x03E24318 LDR X0, [X9 + 0xB8]
	0x03E2431C BL 0x1C24138
	0x03E24320 CMP X20, X0
	0x03E24324 MOV X20, X0
	0x03E24328 B.NE 0x3E242E4
	0x03E2432C LDP X20, X19, [X31 + 0x20]
	0x03E24330 LDP X22, X21, [X31 + 0x10]
	0x03E24334 LDR X30, [X31], #0x30
	0x03E24338 RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x5C5000
	008 Move X4, [X23+1392]
	009 Move X19, X3
	010 Move X20, X2
	011 Move X21, X1
	012 Move X22, X0
	013 Compare X4, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -53485568
	016 Add X0, X0, 2145
	017 Call 0x1C17CB8
	018 Move X4, X0
	019 Move [X23+1392], X0
	020 Move X0, X22
	021 Move X1, X21
	022 Move X2, X20
	023 Move X3, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Move X23, [X31+56]
	030 CallNoReturn X4

