Type: SpatialSys.CommandLib.CustomCoroutineCommand/<>c

Method: System.Void .cctor()

Disassembly:
	0x035BFD1C TBZ X0, 0x0, 0x35BFD38
	0x035BFD20 CMP W21, 0x1
	0x035BFD24 B.NE 0x35BFD3C
	0x035BFD28 ADRP X8, 0xFFFFFFFFFE602000
	0x035BFD2C ADD X8, X8, 0xC20
	0x035BFD30 STR X8, [X19 + 0x18]
	0x035BFD34 B 0x35BFD4C
	0x035BFD38 CBZ X20, 0x35BFD64
	0x035BFD3C LDR X8, [X19 + 0x10]
	0x035BFD40 LDR X9, [X19 + 0x20]
	0x035BFD44 STR X8, [X19 + 0x18]
	0x035BFD48 STR X9, [X19 + 0x40]
	0x035BFD4C ADRP X8, 0xFFFFFFFFFE602000
	0x035BFD50 ADD X8, X8, 0xBD0
	0x035BFD54 STR X8, [X19 + 0x38]
	0x035BFD58 LDP X20, X19, [X31 + 0x10]
	0x035BFD5C LDP X30, X21, [X31], #0x20
	0x035BFD60 RET
	0x035BFD64 ADRP X1, 0xFFFFFFFFFD55C000
	0x035BFD68 ADD X1, X1, 0xEE3
	0x035BFD6C MOV X0, X31
	0x035BFD70 BL 0x1C16F3C
	0x035BFD74 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xE22000
	005 Move X20, 0xB79000
	006 Move W8, [X19+337]
	007 Move X20, [X20+2952]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xB79000
	013 Move X0, [X0+2952]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+337], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move X1, X31
	020 Move X19, X0
	021 Call Object..ctor, X0
	022 Move X8, [X20]
	023 Move X8, [X8+184]
	024 Move [X8], X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return 

Method: System.Void .ctor()

Disassembly:
	0x035BFD78 BL 0x1C16DEC
	0x035BFD7C LDR X8, [X0 + 0x40]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Boolean <ToString>b__2_0(System.Reflection.FieldInfo p)

Disassembly:
	0x035BFD80 LDR X3, [X0 + 0x18]
	0x035BFD84 LDR X2, [X0 + 0x28]
	0x035BFD88 MOV X0, X8
	0x035BFD8C BR X3
	0x035BFD90 SUB X31, X31, 0x50
	0x035BFD94 STP X30, X23, [X31 + 0x20]
	0x035BFD98 STP X22, X21, [X31 + 0x30]
	0x035BFD9C STP X20, X19, [X31 + 0x40]
	0x035BFDA0 ADRP X23, 0xE21000
	0x035BFDA4 STR X1, [X31 + 0x18]
	0x035BFDA8 ADRP X22, 0xB3C000
	0x035BFDAC LDRB W8, [X23 + 0x165]
	0x035BFDB0 LDR X22, [X22 + 0x7D8]
	0x035BFDB4 MOV X19, X3
	0x035BFDB8 MOV X20, X2
	0x035BFDBC MOV X21, X0
	0x035BFDC0 TBNZ X8, 0x0, 0x35BFDD8
	0x035BFDC4 ADRP X0, 0xB3C000
	0x035BFDC8 LDR X0, [X0 + 0x7D8]
	0x035BFDCC BL 0x1C16CF4
	0x035BFDD0 MOVZ W8, 0x1
	0x035BFDD4 STRB W8, [X23 + 0x165]
	0x035BFDD8 LDR X0, [X22]
	0x035BFDDC ADD X1, X31, 0x18
	0x035BFDE0 STP X31, X31, [X31 + 0x8]
	0x035BFDE4 BL 0x1C16E04
	0x035BFDE8 STR X0, [X31 + 0x8]
	0x035BFDEC ADD X1, X31, 0x8
	0x035BFDF0 MOV X0, X21
	0x035BFDF4 MOV X2, X20
	0x035BFDF8 MOV X3, X19
	0x035BFDFC BL 0x1C16CB0
	0x035BFE00 LDP X20, X19, [X31 + 0x40]
	0x035BFE04 LDP X22, X21, [X31 + 0x30]
	0x035BFE08 LDP X30, X23, [X31 + 0x20]
	0x035BFE0C ADD X31, X31, 0x50
	0x035BFE10 RET
	0x035BFE14 MOV X0, X1
	0x035BFE18 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xE22000
	005 Move W8, [X20+338]
	006 Move X19, X1
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xB79000
	012 Move X0, [X0+2984]
	013 Call 0x1C17CF4
	014 Move X0, 0xB79000
	015 Move X0, [X0+2992]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+338], W8
	019 Compare X19, 0
	020 JumpIfEqual {51}
	021 Move X8, [X19]
	022 Move X20, 0xB79000
	023 Move X0, X19
	024 Move X9, [X8+424]
	025 Move X1, [X8+432]
	026 Move X20, [X20+2984]
	027 NotImplemented "Instruction BLR not yet implemented."
	028 Move X1, [X20]
	029 Move X2, X31
	030 Move X19, X0
	031 Call String.op_Inequality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {46}
	036 Move X8, 0xB79000
	037 Move X8, [X8+2992]
	038 Move X0, X19
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X2, X31
	042 Move X1, [X8]
	043 Move X30, [X31+32]
	044 Call String.op_Inequality, X0, X1
	045 Return X0
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move W0, W31
	049 Move X30, [X31+32]
	050 Return X0
	051 Call 0x1C17F20

