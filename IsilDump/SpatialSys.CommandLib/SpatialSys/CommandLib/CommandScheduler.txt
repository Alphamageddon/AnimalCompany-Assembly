Type: SpatialSys.CommandLib.CommandScheduler

Method: System.Boolean get_paused()

Disassembly:
	0x035C18E4 ADRP X21, 0xB76000
	0x035C18E8 LDR X20, [X20 + 0x788]

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_paused(System.Boolean value)

Disassembly:
	0x035C18EC LDRB W8, [X25 + 0x186]
	0x035C18F0 LDR X24, [X24 + 0x720]
	0x035C18F4 LDR X19, [X19 + 0x718]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+16], W8
	003 Return 

Method: System.Int32 get_count()

Disassembly:
	0x035C18F8 LDR X23, [X23 + 0xD10]
	0x035C18FC LDR X22, [X22 + 0xD18]

ISIL:
	001 Move W0, [X0+20]
	002 Return X0

Method: System.Void set_count(System.Int32 value)

Disassembly:
	0x035C1900 LDR X21, [X21 + 0xD20]
	0x035C1904 TBNZ X8, 0x0, 0x35C1958

ISIL:
	001 Move [X0+20], W1
	002 Return 

Method: SpatialSys.CommandLib.CommandHandle Add(SpatialSys.CommandLib.Command command)

Disassembly:
	0x035C1908 ADRP X0, 0xB76000
	0x035C190C LDR X0, [X0 + 0xD18]
	0x035C1910 BL 0x1C16CF4
	0x035C1914 ADRP X0, 0xB32000
	0x035C1918 LDR X0, [X0 + 0x718]
	0x035C191C BL 0x1C16CF4
	0x035C1920 ADRP X0, 0xB32000
	0x035C1924 LDR X0, [X0 + 0x720]
	0x035C1928 BL 0x1C16CF4
	0x035C192C ADRP X0, 0xB76000
	0x035C1930 LDR X0, [X0 + 0xD10]
	0x035C1934 BL 0x1C16CF4
	0x035C1938 ADRP X0, 0xB32000
	0x035C193C LDR X0, [X0 + 0x788]
	0x035C1940 BL 0x1C16CF4
	0x035C1944 ADRP X0, 0xB76000
	0x035C1948 LDR X0, [X0 + 0xD20]
	0x035C194C BL 0x1C16CF4
	0x035C1950 MOVZ W8, 0x1
	0x035C1954 STRB W8, [X25 + 0x186]
	0x035C1958 LDR X8, [X20]
	0x035C195C ADRP X9, 0xFFFFFFFFFD52C000
	0x035C1960 LDR V0, [X9 + 0x848]
	0x035C1964 LDR X8, [X8 + 0xB8]
	0x035C1968 STR D0, [X8]
	0x035C196C LDR X0, [X24]
	0x035C1970 BL 0x1C16F10
	0x035C1974 LDR X1, [X19]
	0x035C1978 MOV X19, X0
	0x035C197C BL 0x2AA4804
	0x035C1980 LDR X8, [X20]
	0x035C1984 LDR X8, [X8 + 0xB8]
	0x035C1988 STR X19, [X8 + 0x18]
	0x035C198C LDR X0, [X23]
	0x035C1990 BL 0x1C16F10
	0x035C1994 LDR X1, [X22]
	0x035C1998 MOV X19, X0
	0x035C199C BL 0x2B23640

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xE20000
	006 Move W8, [X21+370]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xB33000
	014 Move X0, [X0+2200]
	015 Call 0x1C17CF4
	016 Move X0, 0xB77000
	017 Move X0, [X0+2640]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+370], W8
	021 Compare X19, 0
	022 JumpIfEqual {34}
	023 Move X0, [X20+24]
	024 Compare X0, 0
	025 JumpIfEqual {47}
	026 Move X8, 0xB77000
	027 Move X8, [X8+2640]
	028 Move X1, X19
	029 Move X2, [X8]
	030 Call LinkedList`1<Object>.AddLast, X0, X1
	031 Move W8, [X20+20]
	032 Add W8, W8, 1
	033 Move [X20+20], W8
	034 Move X8, 0xB33000
	035 Move X8, [X8+2200]
	036 Move X0, [X8]
	037 Call 0x1C17F10
	038 Move X1, X19
	039 Move X20, X0
	040 Call CommandHandle..ctor, X0, X1
	041 Move X0, X20
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Move X21, [X31+40]
	046 Return X0
	047 Call 0x1C17F20

Method: System.Void Update(System.Single deltaTime)

Disassembly:
	0x035C19A0 LDR X8, [X20]
	0x035C19A4 LDP X24, X23, [X31 + 0x10]
	0x035C19A8 LDR X8, [X8 + 0xB8]
	0x035C19AC STR X19, [X8 + 0x38]
	0x035C19B0 LDR X0, [X21]
	0x035C19B4 LDP X20, X19, [X31 + 0x30]
	0x035C19B8 LDP X22, X21, [X31 + 0x20]
	0x035C19BC LDP X30, X25, [X31], #0x40
	0x035C19C0 B 0x35C19C4
	0x035C19C4 STR X30, [X31 - 0x20]!
	0x035C19C8 STP X20, X19, [X31 + 0x10]
	0x035C19CC ADRP X20, 0xE1F000
	0x035C19D0 LDRB W8, [X20 + 0x187]
	0x035C19D4 MOV X19, X0
	0x035C19D8 TBNZ X8, 0x0, 0x35C19FC
	0x035C19DC ADRP X0, 0xB32000
	0x035C19E0 LDR X0, [X0 + 0x788]
	0x035C19E4 BL 0x1C16CF4
	0x035C19E8 ADRP X0, 0xB76000
	0x035C19EC LDR X0, [X0 + 0xD28]
	0x035C19F0 BL 0x1C16CF4
	0x035C19F4 MOVZ W8, 0x1
	0x035C19F8 STRB W8, [X20 + 0x187]
	0x035C19FC CBZ X19, 0x35C1A70
	0x035C1A00 ADRP X20, 0xB76000
	0x035C1A04 LDR X20, [X20 + 0xD28]
	0x035C1A08 MOV X0, X19
	0x035C1A0C MOV X2, X31
	0x035C1A10 LDR X1, [X20]
	0x035C1A14 BL 0x322C2F0
	0x035C1A18 LDR X8, [X20]
	0x035C1A1C CBZ X8, 0x35C1A70
	0x035C1A20 LDR W8, [X8 + 0x10]
	0x035C1A24 ADRP X20, 0xB32000
	0x035C1A28 LDR X20, [X20 + 0x788]
	0x035C1A2C MOV W1, W31
	0x035C1A30 ADD W2, W8, W0
	0x035C1A34 MOV X0, X19
	0x035C1A38 MOV X3, X31
	0x035C1A3C BL 0x3228DE4
	0x035C1A40 LDR X8, [X20]
	0x035C1A44 MOV X19, X0
	0x035C1A48 LDR W9, [X8 + 0xE0]
	0x035C1A4C CBNZ W9, 0x35C1A5C
	0x035C1A50 MOV X0, X8
	0x035C1A54 BL 0x1C16DFC
	0x035C1A58 LDR X8, [X20]
	0x035C1A5C LDR X8, [X8 + 0xB8]
	0x035C1A60 STR X19, [X8 + 0x30]
	0x035C1A64 LDP X20, X19, [X31 + 0x10]
	0x035C1A68 LDR X30, [X31], #0x20
	0x035C1A6C RET
	0x035C1A70 BL 0x1C16F20
	0x035C1A74 STR X30, [X31 - 0x30]!
	0x035C1A78 STP X22, X21, [X31 + 0x10]
	0x035C1A7C STP X20, X19, [X31 + 0x20]
	0x035C1A80 ADRP X22, 0xE1F000
	0x035C1A84 ADRP X21, 0xB32000
	0x035C1A88 LDRB W8, [X22 + 0x188]
	0x035C1A8C LDR X21, [X21 + 0x788]
	0x035C1A90 MOV W19, W1
	0x035C1A94 MOV W20, W0
	0x035C1A98 TBNZ X8, 0x0, 0x35C1AB0
	0x035C1A9C ADRP X0, 0xB32000
	0x035C1AA0 LDR X0, [X0 + 0x788]
	0x035C1AA4 BL 0x1C16CF4
	0x035C1AA8 MOVZ W8, 0x1
	0x035C1AAC STRB W8, [X22 + 0x188]
	0x035C1AB0 LDR X0, [X21]
	0x035C1AB4 LDR W8, [X0 + 0xE0]
	0x035C1AB8 CBNZ W8, 0x35C1AC0
	0x035C1ABC BL 0x1C16DFC
	0x035C1AC0 MOV W0, W20
	0x035C1AC4 MOV W1, W19
	0x035C1AC8 BL 0x35C1B0C
	0x035C1ACC TBZ X0, 0x0, 0x35C1AE4
	0x035C1AD0 LDP X20, X19, [X31 + 0x20]
	0x035C1AD4 LDP X22, X21, [X31 + 0x10]
	0x035C1AD8 MOVZ W0, 0x1
	0x035C1ADC LDR X30, [X31], #0x30
	0x035C1AE0 RET
	0x035C1AE4 LDR X0, [X21]
	0x035C1AE8 LDR W8, [X0 + 0xE0]
	0x035C1AEC CBNZ W8, 0x35C1AF4
	0x035C1AF0 BL 0x1C16DFC
	0x035C1AF4 MOV W0, W20
	0x035C1AF8 MOV W1, W19
	0x035C1AFC LDP X20, X19, [X31 + 0x20]
	0x035C1B00 LDP X22, X21, [X31 + 0x10]
	0x035C1B04 LDR X30, [X31], #0x30
	0x035C1B08 B 0x35C1C08
	0x035C1B0C STR X30, [X31 - 0x30]!
	0x035C1B10 STP X22, X21, [X31 + 0x10]
	0x035C1B14 STP X20, X19, [X31 + 0x20]
	0x035C1B18 ADRP X21, 0xE1F000
	0x035C1B1C LDRB W8, [X21 + 0x19B]
	0x035C1B20 MOV W20, W1
	0x035C1B24 MOV W19, W0
	0x035C1B28 TBNZ X8, 0x0, 0x35C1B40
	0x035C1B2C ADRP X0, 0xB32000
	0x035C1B30 LDR X0, [X0 + 0x788]
	0x035C1B34 BL 0x1C16CF4
	0x035C1B38 MOVZ W8, 0x1
	0x035C1B3C STRB W8, [X21 + 0x19B]
	0x035C1B40 CBZ W19, 0x35C1BF4
	0x035C1B44 ADRP X21, 0xB32000
	0x035C1B48 LDR X21, [X21 + 0x788]
	0x035C1B4C LDR X0, [X21]
	0x035C1B50 LDR W8, [X0 + 0xE0]
	0x035C1B54 CBNZ W8, 0x35C1B5C
	0x035C1B58 BL 0x1C16DFC
	0x035C1B5C ADRP X22, 0xE1F000
	0x035C1B60 LDRB W8, [X22 + 0x1AD]
	0x035C1B64 CBNZ W8, 0x35C1B7C
	0x035C1B68 ADRP X0, 0xB32000
	0x035C1B6C LDR X0, [X0 + 0x788]
	0x035C1B70 BL 0x1C16CF4
	0x035C1B74 MOVZ W8, 0x1
	0x035C1B78 STRB W8, [X22 + 0x1AD]
	0x035C1B7C LDR X0, [X21]
	0x035C1B80 LDR W8, [X0 + 0xE0]
	0x035C1B84 CBNZ W8, 0x35C1B90
	0x035C1B88 BL 0x1C16DFC
	0x035C1B8C LDR X0, [X21]
	0x035C1B90 LDR X8, [X0 + 0xB8]
	0x035C1B94 LDR W8, [X8 + 0x4]
	0x035C1B98 BICS W31, W20, W8, 0x0
	0x035C1B9C B.NE 0x35C1BF4
	0x035C1BA0 LDR W8, [X0 + 0xE0]
	0x035C1BA4 CBNZ W8, 0x35C1BAC
	0x035C1BA8 BL 0x1C16DFC
	0x035C1BAC ADRP X20, 0xE1F000
	0x035C1BB0 LDRB W8, [X20 + 0x1AE]
	0x035C1BB4 CBNZ W8, 0x35C1BCC
	0x035C1BB8 ADRP X0, 0xB32000
	0x035C1BBC LDR X0, [X0 + 0x788]
	0x035C1BC0 BL 0x1C16CF4

ISIL:
	001 Move [X31-80], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0xE20000
	012 Move W8, [X20+371]
	013 Move V8, V0
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {33}
	019 Move X0, 0xB77000
	020 Move X0, [X0+3016]
	021 Call 0x1C17CF4
	022 Move X0, 0xB77000
	023 Move X0, [X0+3024]
	024 Call 0x1C17CF4
	025 Move X0, 0xB77000
	026 Move X0, [X0+3032]
	027 Call 0x1C17CF4
	028 Move X0, 0xB77000
	029 Move X0, [X0+3040]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X20+371], W8
	033 Move W8, [X19+16]
	034 Compare W8, 0
	035 JumpIfEqual {47}
	036 Move X20, [X31+64]
	037 Move X19, [X31+72]
	038 Move X22, [X31+48]
	039 Move X21, [X31+56]
	040 Move X24, [X31+32]
	041 Move X23, [X31+40]
	042 Move X26, [X31+16]
	043 Move X25, [X31+24]
	044 Move X30, [X31+8]
	045 Move V8, [X31+80]
	046 Return 
	047 Move X8, [X19+24]
	048 Compare X8, 0
	049 JumpIfEqual {141}
	050 Move X22, [X8+16]
	051 Compare X22, 0
	052 JumpIfEqual {36}
	053 Move X25, 0xB77000
	054 Move X20, 0xB33000
	055 Move X21, 0xB77000
	056 Move X26, 0xB77000
	057 Move X25, [X25+3016]
	058 Move X20, [X20+2000]
	059 Move X21, [X21+3024]
	060 Move X26, [X26+3032]
	061 Move X1, [X25]
	062 Move X0, X22
	063 Call LinkedListNode`1<Object>.get_Next, X0
	064 Move X8, [X22+40]
	065 Move X23, X0
	066 Compare X8, 0
	067 JumpIfEqual {87}
	068 Move X0, X8
	069 Move V0, V8
	070 Call Command.Update, X0, V0
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfNotEqual {84}
	075 Move X0, [X19+24]
	076 Compare X0, 0
	077 JumpIfEqual {141}
	078 Move X2, [X26]
	079 Move X1, X22
	080 Call LinkedList`1<Object>.Remove, X0, X1
	081 Move W8, [X19+20]
	082 Subtract W8, W8, 1
	083 Move [X19+20], W8
	084 Move X22, X23
	085 Compare X23, 0
	086 JumpIfNotEqual {61}
	087 Call 0x1C17F20
	088 Move X24, X0
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move X0, X24
	091 Call 0x3EB2AD0
	092 Move X24, X0
	093 Move X0, X20
	094 Call 0x1C17D08
	095 Move X8, [X24]
	096 Move X1, [X8]
	097 Call 0x1C18270
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfNotEqual {142}
	102 Move X24, [X24]
	103 Call 0x3EB2AE0
	104 Move X0, X21
	105 Call 0x1C17D08
	106 Move X8, [X22+40]
	107 Compare X8, 0
	108 JumpIfEqual {141}
	109 Move W9, [X8+16]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Move X8, [X8+48]
	112 Compare X8, 0
	113 JumpIfNotEqual {109}
	114 Move X0, X21
	115 Call 0x1C17D08
	116 Move X0, [X22+40]
	117 Compare X0, 0
	118 JumpIfEqual {141}
	119 Move X1, X0
	120 Move X2, X24
	121 Call Command.Abort, X0, X1, X2
	122 Move X0, X21
	123 Call 0x1C17D08
	124 Move X8, [X22+40]
	125 Compare X8, 0
	126 JumpIfEqual {141}
	127 Move W9, [X8+16]
	128 NotImplemented "Instruction CMP not yet implemented."
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Move X10, X8
	131 Move X10, [X10+48]
	132 Compare X10, 0
	133 JumpIfEqual {137}
	134 Move W11, [X10+16]
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Move W9, [X8+16]
	137 NotImplemented "Instruction CMP not yet implemented."
	138 Move X8, [X8+48]
	139 Compare X8, 0
	140 JumpIfNotEqual {136}
	141 Call 0x1C17F20
	142 Move W0, 8
	143 Call 0x3EB2AF0
	144 Move X8, [X24]
	145 Move [X0], X8
	146 Move X1, 0x8F4000
	147 Add X1, X1, 3672
	148 Move X2, X31
	149 Call 0x3EB2B00
	150 Move X24, X0
	151 Call 0x3EB2AE0
	152 Move X0, X24
	153 Call 0x1D2D690
	154 Call 0x1991590

Method: System.Collections.Generic.IEnumerator`1<SpatialSys.CommandLib.Command> GetEnumerator()

Disassembly:
	0x035C1BC4 MOVZ W8, 0x1
	0x035C1BC8 STRB W8, [X20 + 0x1AE]
	0x035C1BCC LDR X0, [X21]
	0x035C1BD0 LDR W8, [X0 + 0xE0]
	0x035C1BD4 CBNZ W8, 0x35C1BE0
	0x035C1BD8 BL 0x1C16DFC
	0x035C1BDC LDR X0, [X21]
	0x035C1BE0 LDR X8, [X0 + 0xB8]
	0x035C1BE4 LDR W8, [X8]
	0x035C1BE8 CMP W8, W19
	0x035C1BEC CSET W0, GE
	0x035C1BF0 B 0x35C1BF8
	0x035C1BF4 MOV W0, W31
	0x035C1BF8 LDP X20, X19, [X31 + 0x20]
	0x035C1BFC LDP X22, X21, [X31 + 0x10]
	0x035C1C00 LDR X30, [X31], #0x30
	0x035C1C04 RET
	0x035C1C08 STR X30, [X31 - 0x30]!
	0x035C1C0C STP X22, X21, [X31 + 0x10]
	0x035C1C10 STP X20, X19, [X31 + 0x20]
	0x035C1C14 ADRP X21, 0xE1F000
	0x035C1C18 LDRB W8, [X21 + 0x19C]
	0x035C1C1C MOV W20, W1
	0x035C1C20 MOV W19, W0
	0x035C1C24 TBNZ X8, 0x0, 0x35C1C3C
	0x035C1C28 ADRP X0, 0xB32000
	0x035C1C2C LDR X0, [X0 + 0x788]
	0x035C1C30 BL 0x1C16CF4
	0x035C1C34 MOVZ W8, 0x1
	0x035C1C38 STRB W8, [X21 + 0x19C]
	0x035C1C3C CBZ W19, 0x35C1CF0
	0x035C1C40 ADRP X21, 0xB32000
	0x035C1C44 LDR X21, [X21 + 0x788]
	0x035C1C48 LDR X0, [X21]
	0x035C1C4C LDR W8, [X0 + 0xE0]
	0x035C1C50 CBNZ W8, 0x35C1C58
	0x035C1C54 BL 0x1C16DFC

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+80], X30
	003 Move [X31+96], X20
	004 Move [X31+104], X19
	005 Move X20, 0xE20000
	006 Move W8, [X20+372]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xB77000
	013 Move X0, [X0+3280]
	014 Call 0x1C17CF4
	015 Move X0, 0xB77000
	016 Move X0, [X0+3072]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+372], W8
	020 Move X0, [X19+24]
	021 Compare X0, 0
	022 JumpIfEqual {44}
	023 Move X8, 0xB77000
	024 Move X8, [X8+3072]
	025 Move X19, 0xB77000
	026 Move X1, [X8]
	027 Move X19, [X19+3280]
	028 Add X8, X31, 40
	029 Call LinkedList`1<Object>.GetEnumerator, X0
	030 NotImplemented "Instruction LDUR not yet implemented."
	031 NotImplemented "Instruction LDUR not yet implemented."
	032 Move X8, [X31+72]
	033 Move X0, [X19]
	034 Add X1, X31, 0
	035 Move [X31], V0
	036 Move [X31+8], V1
	037 Move [X31+32], X8
	038 Call 0x1C17E04
	039 Move X20, [X31+96]
	040 Move X19, [X31+104]
	041 Move X30, [X31+80]
	042 Add X31, X31, 112
	043 Return X0
	044 Call 0x1C17F20

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x035C1C58 ADRP X22, 0xE1F000
	0x035C1C5C LDRB W8, [X22 + 0x1AF]
	0x035C1C60 CBNZ W8, 0x35C1C78
	0x035C1C64 ADRP X0, 0xB32000
	0x035C1C68 LDR X0, [X0 + 0x788]
	0x035C1C6C BL 0x1C16CF4
	0x035C1C70 MOVZ W8, 0x1
	0x035C1C74 STRB W8, [X22 + 0x1AF]
	0x035C1C78 LDR X0, [X21]
	0x035C1C7C LDR W8, [X0 + 0xE0]
	0x035C1C80 CBNZ W8, 0x35C1C8C
	0x035C1C84 BL 0x1C16DFC
	0x035C1C88 LDR X0, [X21]
	0x035C1C8C LDR X8, [X0 + 0xB8]
	0x035C1C90 LDR W8, [X8 + 0xC]
	0x035C1C94 BICS W31, W20, W8, 0x0
	0x035C1C98 B.NE 0x35C1CF0
	0x035C1C9C LDR W8, [X0 + 0xE0]
	0x035C1CA0 CBNZ W8, 0x35C1CA8
	0x035C1CA4 BL 0x1C16DFC
	0x035C1CA8 ADRP X20, 0xE1F000
	0x035C1CAC LDRB W8, [X20 + 0x1B0]
	0x035C1CB0 CBNZ W8, 0x35C1CC8
	0x035C1CB4 ADRP X0, 0xB32000
	0x035C1CB8 LDR X0, [X0 + 0x788]
	0x035C1CBC BL 0x1C16CF4
	0x035C1CC0 MOVZ W8, 0x1
	0x035C1CC4 STRB W8, [X20 + 0x1B0]
	0x035C1CC8 LDR X0, [X21]
	0x035C1CCC LDR W8, [X0 + 0xE0]
	0x035C1CD0 CBNZ W8, 0x35C1CDC
	0x035C1CD4 BL 0x1C16DFC
	0x035C1CD8 LDR X0, [X21]
	0x035C1CDC LDR X8, [X0 + 0xB8]
	0x035C1CE0 LDR W8, [X8 + 0x8]
	0x035C1CE4 CMP W8, W19
	0x035C1CE8 CSET W0, GE

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+80], X30
	003 Move [X31+96], X20
	004 Move [X31+104], X19
	005 Move X20, 0xE20000
	006 Move W8, [X20+373]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xB77000
	013 Move X0, [X0+3280]
	014 Call 0x1C17CF4
	015 Move X0, 0xB77000
	016 Move X0, [X0+3072]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+373], W8
	020 Move X0, [X19+24]
	021 Compare X0, 0
	022 JumpIfEqual {44}
	023 Move X8, 0xB77000
	024 Move X8, [X8+3072]
	025 Move X19, 0xB77000
	026 Move X1, [X8]
	027 Move X19, [X19+3280]
	028 Add X8, X31, 40
	029 Call LinkedList`1<Object>.GetEnumerator, X0
	030 NotImplemented "Instruction LDUR not yet implemented."
	031 NotImplemented "Instruction LDUR not yet implemented."
	032 Move X8, [X31+72]
	033 Move X0, [X19]
	034 Add X1, X31, 0
	035 Move [X31], V0
	036 Move [X31+8], V1
	037 Move [X31+32], X8
	038 Call 0x1C17E04
	039 Move X20, [X31+96]
	040 Move X19, [X31+104]
	041 Move X30, [X31+80]
	042 Add X31, X31, 112
	043 Return X0
	044 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x035C1CEC B 0x35C1CF4
	0x035C1CF0 MOV W0, W31
	0x035C1CF4 LDP X20, X19, [X31 + 0x20]
	0x035C1CF8 LDP X22, X21, [X31 + 0x10]
	0x035C1CFC LDR X30, [X31], #0x30
	0x035C1D00 RET
	0x035C1D04 SUB X31, X31, 0x50
	0x035C1D08 STP X30, X25, [X31 + 0x10]
	0x035C1D0C STP X24, X23, [X31 + 0x20]
	0x035C1D10 STP X22, X21, [X31 + 0x30]
	0x035C1D14 STP X20, X19, [X31 + 0x40]
	0x035C1D18 ADRP X24, 0xE1F000
	0x035C1D1C ADRP X25, 0xB32000
	0x035C1D20 LDRB W8, [X24 + 0x189]
	0x035C1D24 LDR X25, [X25 + 0x788]
	0x035C1D28 MOV W19, W4
	0x035C1D2C MOV X20, X3
	0x035C1D30 MOV X21, X2
	0x035C1D34 MOV X22, X1
	0x035C1D38 MOV X23, X0
	0x035C1D3C TBNZ X8, 0x0, 0x35C1D54
	0x035C1D40 ADRP X0, 0xB32000
	0x035C1D44 LDR X0, [X0 + 0x788]
	0x035C1D48 BL 0x1C16CF4
	0x035C1D4C MOVZ W8, 0x1
	0x035C1D50 STRB W8, [X24 + 0x189]
	0x035C1D54 LDR X0, [X25]
	0x035C1D58 LDR W8, [X0 + 0xE0]
	0x035C1D5C CBNZ W8, 0x35C1D64
	0x035C1D60 BL 0x1C16DFC
	0x035C1D64 MOVZ W0, 0x5

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xE20000
	007 Move X22, 0xB77000
	008 Move X20, 0xB77000
	009 Move W8, [X21+374]
	010 Move X22, [X22+2624]
	011 Move X20, [X20+2632]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xB77000
	018 Move X0, [X0+2632]
	019 Call 0x1C17CF4
	020 Move X0, 0xB77000
	021 Move X0, [X0+2624]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+374], W8
	025 Move X0, [X22]
	026 Call 0x1C17F10
	027 Move X1, [X20]
	028 Move X20, X0
	029 Call LinkedList`1<Object>..ctor, X0
	030 Move [X19+24], X20
	031 Move X0, X19
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move X1, X31
	037 Move X30, [X31+48]
	038 Call Object..ctor, X0
	039 Return 

