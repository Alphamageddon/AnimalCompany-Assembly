Type: SpatialSys.CommandLib.CommandPriorityQueue

Method: System.Boolean get_paused()

Disassembly:
	0x035BAC04 BL 0x1C16CF4
	0x035BAC08 MOVZ W8, 0x1

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Void set_paused(System.Boolean value)

Disassembly:
	0x035BAC0C STRB W8, [X21 + 0x124]
	0x035BAC10 LDR X0, [X22]
	0x035BAC14 BL 0x1C16F10

ISIL:
	001 And W8, W1, 1
	002 Move [X0+24], W8
	003 Return 

Method: System.Int32 get_count()

Disassembly:
	0x035BAC18 LDR X1, [X20]
	0x035BAC1C MOV X20, X0
	0x035BAC20 BL 0x24F1248
	0x035BAC24 STR X20, [X19 + 0x10]
	0x035BAC28 MOV X0, X19
	0x035BAC2C LDP X20, X19, [X31 + 0x20]
	0x035BAC30 LDP X22, X21, [X31 + 0x10]
	0x035BAC34 MOV X1, X31
	0x035BAC38 LDR X30, [X31], #0x30
	0x035BAC3C B 0x33BDD8C
	0x035BAC40 STR X30, [X31 - 0x30]!
	0x035BAC44 STP X22, X21, [X31 + 0x10]
	0x035BAC48 STP X20, X19, [X31 + 0x20]
	0x035BAC4C ADRP X20, 0xE26000
	0x035BAC50 ADRP X22, 0xB7D000
	0x035BAC54 LDRB W8, [X20 + 0x125]
	0x035BAC58 LDR X22, [X22 + 0x9D0]
	0x035BAC5C MOV W19, W1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xE27000
	005 Move W8, [X20+277]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xB7E000
	012 Move X0, [X0+2344]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+277], W8
	016 Move X8, [X19+16]
	017 Compare X8, 0
	018 JumpIfEqual {24}
	019 Move W0, [X8+24]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0
	024 Call 0x1C17F20

Method: SpatialSys.CommandLib.CommandHandle Enqueue(SpatialSys.CommandLib.Command command, System.Int32 priority = 0)

Disassembly:
	0x035BAC60 MOV X21, X0
	0x035BAC64 TBNZ X8, 0x0, 0x35BAC7C
	0x035BAC68 ADRP X0, 0xB7D000
	0x035BAC6C LDR X0, [X0 + 0x9D0]
	0x035BAC70 BL 0x1C16CF4
	0x035BAC74 MOVZ W8, 0x1
	0x035BAC78 STRB W8, [X20 + 0x125]
	0x035BAC7C LDR X0, [X22]
	0x035BAC80 BL 0x1C16F10
	0x035BAC84 MOV X1, X21
	0x035BAC88 MOV X20, X0
	0x035BAC8C BL 0x35BACD4
	0x035BAC90 CBZ X20, 0x35BACD0
	0x035BAC94 LDR W8, [X20 + 0x20]
	0x035BAC98 TBZ X19, 0x0, 0x35BACAC
	0x035BAC9C CMP W8, 0x3
	0x035BACA0 B.LT 0x35BACBC
	0x035BACA4 MOVZ W8, 0x2
	0x035BACA8 B 0x35BACB8
	0x035BACAC CMP W8, 0x4
	0x035BACB0 B.GT 0x35BACBC
	0x035BACB4 MOVZ W8, 0x5
	0x035BACB8 STR W8, [X20 + 0x20]
	0x035BACBC MOV X0, X20
	0x035BACC0 LDP X20, X19, [X31 + 0x20]
	0x035BACC4 LDP X22, X21, [X31 + 0x10]
	0x035BACC8 LDR X30, [X31], #0x30
	0x035BACCC RET
	0x035BACD0 BL 0x1C16F20
	0x035BACD4 STR X30, [X31 - 0x20]!
	0x035BACD8 STP X20, X19, [X31 + 0x10]
	0x035BACDC CBZ X1, 0x35BAD24
	0x035BACE0 MOV X19, X1
	0x035BACE4 MOV X20, X0
	0x035BACE8 MOV X0, X1
	0x035BACEC MOV X1, X31
	0x035BACF0 BL 0x33C4268
	0x035BACF4 CBZ X0, 0x35BAD24

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xE27000
	007 Move W8, [X22+278]
	008 Move W20, W2
	009 Move X19, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xB3A000
	016 Move X0, [X0+2200]
	017 Call 0x1C17CF4
	018 Move X0, 0xB7E000
	019 Move X0, [X0+2352]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+278], W8
	023 Move X0, [X21+16]
	024 Compare X0, 0
	025 JumpIfEqual {46}
	026 Move X8, 0xB7E000
	027 Move X8, [X8+2352]
	028 Move X21, 0xB3A000
	029 Move X1, X19
	030 Move W2, W20
	031 Move X3, [X8]
	032 Move X21, [X21+2200]
	033 Call 0x24B4584, X0, X1, X2
	034 Move X0, [X21]
	035 Call 0x1C17F10
	036 Move X1, X19
	037 Move X20, X0
	038 Call CommandHandle..ctor, X0, X1
	039 Move X0, X20
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X30, [X31+48]
	045 Return X0
	046 Call 0x1C17F20

Method: System.Void Enqueue(System.Int32 priority = 0, SpatialSys.CommandLib.Command[] commands)

Disassembly:
	0x035BACF8 LDR X8, [X0]
	0x035BACFC LDP X9, X1, [X8 + 0x1A8]
	0x035BAD00 BLR X9
	0x035BAD04 MOV X1, X0
	0x035BAD08 MOVZ W2, 0x1
	0x035BAD0C MOV X0, X20
	0x035BAD10 BL 0x35BC984
	0x035BAD14 STR X19, [X20 + 0x38]
	0x035BAD18 LDP X20, X19, [X31 + 0x10]
	0x035BAD1C LDR X30, [X31], #0x20
	0x035BAD20 RET
	0x035BAD24 BL 0x1C16F20
	0x035BAD28 STP X30, X23, [X31 - 0x30]!
	0x035BAD2C STP X22, X21, [X31 + 0x10]
	0x035BAD30 STP X20, X19, [X31 + 0x20]
	0x035BAD34 ADRP X21, 0xE26000
	0x035BAD38 ADRP X23, 0xB7D000
	0x035BAD3C LDRB W8, [X21 + 0x126]
	0x035BAD40 LDR X23, [X23 + 0x9D0]
	0x035BAD44 MOV W19, W2
	0x035BAD48 MOV X20, X1
	0x035BAD4C MOV X22, X0
	0x035BAD50 TBNZ X8, 0x0, 0x35BAD68
	0x035BAD54 ADRP X0, 0xB7D000
	0x035BAD58 LDR X0, [X0 + 0x9D0]
	0x035BAD5C BL 0x1C16CF4
	0x035BAD60 MOVZ W8, 0x1
	0x035BAD64 STRB W8, [X21 + 0x126]
	0x035BAD68 LDR X0, [X23]
	0x035BAD6C BL 0x1C16F10
	0x035BAD70 MOVZ W2, 0x1
	0x035BAD74 MOV X1, X22
	0x035BAD78 MOV X21, X0
	0x035BAD7C BL 0x35BC984
	0x035BAD80 LDR W8, [X21 + 0x20]
	0x035BAD84 STR X20, [X21 + 0x38]
	0x035BAD88 TBZ X19, 0x0, 0x35BAD9C
	0x035BAD8C CMP W8, 0x3
	0x035BAD90 B.LT 0x35BADAC
	0x035BAD94 MOVZ W8, 0x2
	0x035BAD98 B 0x35BADA8
	0x035BAD9C CMP W8, 0x4
	0x035BADA0 B.GT 0x35BADAC
	0x035BADA4 MOVZ W8, 0x5

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0xE27000
	009 Move W8, [X22+279]
	010 Move X19, X2
	011 Move W20, W1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xB7E000
	018 Move X0, [X0+2352]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+279], W8
	022 Compare X19, 0
	023 JumpIfEqual {53}
	024 Move X8, [X19+24]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X23, 0xB7E000
	027 Move X23, [X23+2352]
	028 Move X22, X31
	029 And X8, X8, 0
	030 Add X24, X19, 32
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X1, [X24]
	033 Compare X1, 0
	034 JumpIfEqual {41}
	035 Move X0, [X21+16]
	036 Compare X0, 0
	037 JumpIfEqual {53}
	038 Move X3, [X23]
	039 Move W2, W20
	040 Call 0x24B4584, X0, X1, X2
	041 Move W8, [X19+24]
	042 Add X22, X22, 1
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X20, [X31+48]
	045 Move X19, [X31+56]
	046 Move X22, [X31+32]
	047 Move X21, [X31+40]
	048 Move X24, [X31+16]
	049 Move X23, [X31+24]
	050 Move X30, [X31+64]
	051 Return 
	052 Call 0x1C17F28
	053 Call 0x1C17F20

Method: System.Void Clear()

Disassembly:
	0x035BADA8 STR W8, [X21 + 0x20]
	0x035BADAC MOV X0, X21
	0x035BADB0 LDP X20, X19, [X31 + 0x20]
	0x035BADB4 LDP X22, X21, [X31 + 0x10]
	0x035BADB8 LDP X30, X23, [X31], #0x30
	0x035BADBC RET
	0x035BADC0 STR X30, [X31 - 0x20]!
	0x035BADC4 STP X20, X19, [X31 + 0x10]
	0x035BADC8 MOV X19, X2
	0x035BADCC MOVZ W2, 0x1
	0x035BADD0 MOV X20, X0
	0x035BADD4 BL 0x35BC984
	0x035BADD8 STR X19, [X20 + 0x38]
	0x035BADDC LDP X20, X19, [X31 + 0x10]
	0x035BADE0 LDR X30, [X31], #0x20
	0x035BADE4 RET
	0x035BADE8 STR X30, [X31 - 0x30]!
	0x035BADEC STP X22, X21, [X31 + 0x10]
	0x035BADF0 STP X20, X19, [X31 + 0x20]
	0x035BADF4 ADRP X20, 0xE26000
	0x035BADF8 ADRP X22, 0xB39000
	0x035BADFC LDRB W8, [X20 + 0x127]
	0x035BAE00 LDR X22, [X22 + 0xD48]
	0x035BAE04 MOV W19, W1
	0x035BAE08 MOV X21, X0
	0x035BAE0C TBNZ X8, 0x0, 0x35BAE24
	0x035BAE10 ADRP X0, 0xB39000
	0x035BAE14 LDR X0, [X0 + 0xD48]
	0x035BAE18 BL 0x1C16CF4
	0x035BAE1C MOVZ W8, 0x1
	0x035BAE20 STRB W8, [X20 + 0x127]
	0x035BAE24 LDR X0, [X22]
	0x035BAE28 BL 0x1C16F10
	0x035BAE2C MOV X1, X21
	0x035BAE30 MOV X20, X0
	0x035BAE34 BL 0x35BAE7C
	0x035BAE38 CBZ X20, 0x35BAE78
	0x035BAE3C LDR W8, [X20 + 0x20]
	0x035BAE40 TBZ X19, 0x0, 0x35BAE54
	0x035BAE44 CMP W8, 0x3
	0x035BAE48 B.LT 0x35BAE64
	0x035BAE4C MOVZ W8, 0x2
	0x035BAE50 B 0x35BAE60
	0x035BAE54 CMP W8, 0x4
	0x035BAE58 B.GT 0x35BAE64
	0x035BAE5C MOVZ W8, 0x5
	0x035BAE60 STR W8, [X20 + 0x20]
	0x035BAE64 MOV X0, X20
	0x035BAE68 LDP X20, X19, [X31 + 0x20]
	0x035BAE6C LDP X22, X21, [X31 + 0x10]
	0x035BAE70 LDR X30, [X31], #0x30
	0x035BAE74 RET
	0x035BAE78 BL 0x1C16F20
	0x035BAE7C STR X30, [X31 - 0x30]!
	0x035BAE80 STP X22, X21, [X31 + 0x10]
	0x035BAE84 STP X20, X19, [X31 + 0x20]
	0x035BAE88 ADRP X21, 0xE26000
	0x035BAE8C ADRP X22, 0xB7D000
	0x035BAE90 LDRB W8, [X21 + 0x170]
	0x035BAE94 LDR X22, [X22 + 0x9D8]
	0x035BAE98 MOV X19, X1
	0x035BAE9C MOV X20, X0
	0x035BAEA0 TBNZ X8, 0x0, 0x35BAEB8
	0x035BAEA4 ADRP X0, 0xB7D000
	0x035BAEA8 LDR X0, [X0 + 0x9D8]
	0x035BAEAC BL 0x1C16CF4
	0x035BAEB0 MOVZ W8, 0x1
	0x035BAEB4 STRB W8, [X21 + 0x170]
	0x035BAEB8 LDR X1, [X22]
	0x035BAEBC MOVZ W2, 0x1
	0x035BAEC0 MOV X0, X20
	0x035BAEC4 BL 0x35BC984
	0x035BAEC8 STR W31, [X20 + 0x38]
	0x035BAECC STR X19, [X20 + 0x40]
	0x035BAED0 LDP X20, X19, [X31 + 0x20]
	0x035BAED4 LDP X22, X21, [X31 + 0x10]
	0x035BAED8 LDR X30, [X31], #0x30
	0x035BAEDC RET
	0x035BAEE0 STP X30, X23, [X31 - 0x30]!
	0x035BAEE4 STP X22, X21, [X31 + 0x10]
	0x035BAEE8 STP X20, X19, [X31 + 0x20]
	0x035BAEEC ADRP X21, 0xE26000
	0x035BAEF0 ADRP X23, 0xB39000
	0x035BAEF4 LDRB W8, [X21 + 0x128]
	0x035BAEF8 LDR X23, [X23 + 0xD48]
	0x035BAEFC MOV W19, W2
	0x035BAF00 MOV X20, X1
	0x035BAF04 MOV X22, X0
	0x035BAF08 TBNZ X8, 0x0, 0x35BAF20
	0x035BAF0C ADRP X0, 0xB39000
	0x035BAF10 LDR X0, [X0 + 0xD48]
	0x035BAF14 BL 0x1C16CF4
	0x035BAF18 MOVZ W8, 0x1
	0x035BAF1C STRB W8, [X21 + 0x128]
	0x035BAF20 LDR X0, [X23]
	0x035BAF24 BL 0x1C16F10
	0x035BAF28 MOVZ W2, 0x1
	0x035BAF2C MOV X1, X22
	0x035BAF30 MOV X21, X0
	0x035BAF34 BL 0x35BC984
	0x035BAF38 LDR W8, [X21 + 0x20]
	0x035BAF3C STR W31, [X21 + 0x38]
	0x035BAF40 STR X20, [X21 + 0x40]
	0x035BAF44 TBZ X19, 0x0, 0x35BAF58
	0x035BAF48 CMP W8, 0x3
	0x035BAF4C B.LT 0x35BAF68
	0x035BAF50 MOVZ W8, 0x2
	0x035BAF54 B 0x35BAF64
	0x035BAF58 CMP W8, 0x4
	0x035BAF5C B.GT 0x35BAF68
	0x035BAF60 MOVZ W8, 0x5
	0x035BAF64 STR W8, [X21 + 0x20]
	0x035BAF68 MOV X0, X21
	0x035BAF6C LDP X20, X19, [X31 + 0x20]
	0x035BAF70 LDP X22, X21, [X31 + 0x10]
	0x035BAF74 LDP X30, X23, [X31], #0x30
	0x035BAF78 RET
	0x035BAF7C STR X30, [X31 - 0x20]!
	0x035BAF80 STP X20, X19, [X31 + 0x10]
	0x035BAF84 MOV X19, X2
	0x035BAF88 MOVZ W2, 0x1
	0x035BAF8C MOV X20, X0
	0x035BAF90 BL 0x35BC984
	0x035BAF94 STR W31, [X20 + 0x38]
	0x035BAF98 STR X19, [X20 + 0x40]
	0x035BAF9C LDP X20, X19, [X31 + 0x10]
	0x035BAFA0 LDR X30, [X31], #0x20
	0x035BAFA4 RET
	0x035BAFA8 STR X30, [X31 - 0x30]!
	0x035BAFAC STP X22, X21, [X31 + 0x10]
	0x035BAFB0 STP X20, X19, [X31 + 0x20]
	0x035BAFB4 ADRP X20, 0xE26000
	0x035BAFB8 ADRP X22, 0xB7D000
	0x035BAFBC LDRB W8, [X20 + 0x129]
	0x035BAFC0 LDR X22, [X22 + 0x9E0]
	0x035BAFC4 MOV W19, W1
	0x035BAFC8 MOV W21, W0
	0x035BAFCC TBNZ X8, 0x0, 0x35BAFE4
	0x035BAFD0 ADRP X0, 0xB7D000
	0x035BAFD4 LDR X0, [X0 + 0x9E0]
	0x035BAFD8 BL 0x1C16CF4
	0x035BAFDC MOVZ W8, 0x1
	0x035BAFE0 STRB W8, [X20 + 0x129]
	0x035BAFE4 LDR X0, [X22]
	0x035BAFE8 BL 0x1C16F10
	0x035BAFEC MOV W1, W21
	0x035BAFF0 MOV X20, X0
	0x035BAFF4 BL 0x35BB03C
	0x035BAFF8 CBZ X20, 0x35BB038
	0x035BAFFC LDR W8, [X20 + 0x20]
	0x035BB000 TBZ X19, 0x0, 0x35BB014
	0x035BB004 CMP W8, 0x3
	0x035BB008 B.LT 0x35BB024
	0x035BB00C MOVZ W8, 0x2
	0x035BB010 B 0x35BB020
	0x035BB014 CMP W8, 0x4
	0x035BB018 B.GT 0x35BB024
	0x035BB01C MOVZ W8, 0x5
	0x035BB020 STR W8, [X20 + 0x20]
	0x035BB024 MOV X0, X20
	0x035BB028 LDP X20, X19, [X31 + 0x20]
	0x035BB02C LDP X22, X21, [X31 + 0x10]
	0x035BB030 LDR X30, [X31], #0x30
	0x035BB034 RET
	0x035BB038 BL 0x1C16F20
	0x035BB03C STR X30, [X31 - 0x30]!
	0x035BB040 STP X22, X21, [X31 + 0x10]
	0x035BB044 STP X20, X19, [X31 + 0x20]
	0x035BB048 ADRP X21, 0xE25000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, 0xE27000
	008 Move W8, [X19+280]
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {31}
	014 Move X0, 0xB3A000
	015 Move X0, [X0+3584]
	016 Call 0x1C17CF4
	017 Move X0, 0xB7E000
	018 Move X0, [X0+2360]
	019 Call 0x1C17CF4
	020 Move X0, 0xB3A000
	021 Move X0, [X0+3608]
	022 Call 0x1C17CF4
	023 Move X0, 0xB7E000
	024 Move X0, [X0+2368]
	025 Call 0x1C17CF4
	026 Move X0, 0xB7E000
	027 Move X0, [X0+2376]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X19+280], W8
	031 Move X0, [X20+16]
	032 Compare X0, 0
	033 JumpIfEqual {140}
	034 Move X8, 0xB7E000
	035 Move X8, [X8+2376]
	036 Move X22, 0xB3A000
	037 Move X1, [X8]
	038 Move X22, [X22+3584]
	039 Call 0x24B4C6C, X0
	040 Move X19, X0
	041 Compare X0, 0
	042 JumpIfEqual {141}
	043 Move X21, 0xB3A000
	044 Move X23, 0xB7E000
	045 Move X21, [X21+3608]
	046 Move X23, [X23+2360]
	047 Move X8, [X19]
	048 Move X1, [X21]
	049 NotImplemented "Instruction LDRH not yet implemented."
	050 Compare X9, 0
	051 JumpIfEqual {58}
	052 Move X10, [X8+176]
	053 Add X10, X10, 8
	054 NotImplemented "Instruction LDUR not yet implemented."
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Subtract X9, X9, 1
	057 Add X10, X10, 16
	058 Move X0, X19
	059 Move W2, W31
	060 Call 0x1C5D788
	061 NotImplemented "Instruction LDRSW not yet implemented."
	062 Add X8, X8, X9
	063 Add X0, X8, 312
	064 Move X8, [X0]
	065 Move X1, [X0+8]
	066 Move X0, X19
	067 NotImplemented "Instruction BLR not yet implemented."
	068 Move TEMP, X0
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfNotEqual {99}
	072 Move X8, [X19]
	073 Move X1, [X23]
	074 NotImplemented "Instruction LDRH not yet implemented."
	075 Compare X9, 0
	076 JumpIfEqual {83}
	077 Move X10, [X8+176]
	078 Add X10, X10, 8
	079 NotImplemented "Instruction LDUR not yet implemented."
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Subtract X9, X9, 1
	082 Add X10, X10, 16
	083 Move X0, X19
	084 Move W2, W31
	085 Call 0x1C5D788
	086 NotImplemented "Instruction LDRSW not yet implemented."
	087 Add X8, X8, X9
	088 Add X0, X8, 312
	089 Move X8, [X0]
	090 Move X1, [X0+8]
	091 Move X0, X19
	092 NotImplemented "Instruction BLR not yet implemented."
	093 Compare X0, 0
	094 JumpIfEqual {139}
	095 Move X8, [X0]
	096 Move X9, [X8+440]
	097 Move X1, [X8+448]
	098 NotImplemented "Instruction BLR not yet implemented."
	099 Move X21, X31
	100 Compare X19, 0
	101 JumpIfEqual {123}
	102 Move X8, [X19]
	103 Move X1, [X22]
	104 NotImplemented "Instruction LDRH not yet implemented."
	105 Compare X9, 0
	106 JumpIfEqual {113}
	107 Move X10, [X8+176]
	108 Add X10, X10, 8
	109 NotImplemented "Instruction LDUR not yet implemented."
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Subtract X9, X9, 1
	112 Add X10, X10, 16
	113 Move X0, X19
	114 Move W2, W31
	115 Call 0x1C5D788
	116 NotImplemented "Instruction LDRSW not yet implemented."
	117 Add X8, X8, X9
	118 Add X0, X8, 312
	119 Move X8, [X0]
	120 Move X1, [X0+8]
	121 Move X0, X19
	122 NotImplemented "Instruction BLR not yet implemented."
	123 Compare X21, 0
	124 JumpIfNotEqual {142}
	125 Move X0, [X20+16]
	126 Compare X0, 0
	127 JumpIfEqual {140}
	128 Move X8, 0xB7E000
	129 Move X8, [X8+2368]
	130 Move X20, [X31+32]
	131 Move X19, [X31+40]
	132 Move X22, [X31+16]
	133 Move X21, [X31+24]
	134 Move X1, [X8]
	135 Move X30, [X31+48]
	136 Move X23, [X31+56]
	137 Call 0x24B494C, X0
	138 Return 
	139 Call 0x1C17F20
	140 Call 0x1C17F20
	141 Call 0x1C17F20
	142 Move X0, X21
	143 Call 0x1C17F18
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Call 0x3EB2AD0
	146 Move X21, [X0]
	147 Call 0x3EB2AE0
	148 Move X20, X0
	149 Move X21, X31
	150 Move X20, X0
	151 Compare X19, 0
	152 JumpIfEqual {174}
	153 Move X8, [X19]
	154 Move X1, [X22]
	155 NotImplemented "Instruction LDRH not yet implemented."
	156 Compare X9, 0
	157 JumpIfEqual {164}
	158 Move X10, [X8+176]
	159 Add X10, X10, 8
	160 NotImplemented "Instruction LDUR not yet implemented."
	161 NotImplemented "Instruction CMP not yet implemented."
	162 Subtract X9, X9, 1
	163 Add X10, X10, 16
	164 Move X0, X19
	165 Move W2, W31
	166 Call 0x1C5D788
	167 NotImplemented "Instruction LDRSW not yet implemented."
	168 Add X8, X8, X9
	169 Add X0, X8, 312
	170 Move X8, [X0]
	171 Move X1, [X0+8]
	172 Move X0, X19
	173 NotImplemented "Instruction BLR not yet implemented."
	174 Compare X21, 0
	175 JumpIfNotEqual {178}
	176 Move X0, X20
	177 Call 0x1D2D690
	178 Move X0, X21
	179 Call 0x1C17F18
	180 Call 0x1991590

Method: System.Boolean Update(System.Single deltaTime)

Disassembly:
	0x035BB04C ADRP X22, 0xB7C000
	0x035BB050 LDRB W8, [X21 + 0x169]
	0x035BB054 LDR X22, [X22 + 0x9E8]
	0x035BB058 MOV W19, W1
	0x035BB05C MOV X20, X0
	0x035BB060 TBNZ X8, 0x0, 0x35BB078
	0x035BB064 ADRP X0, 0xB7C000
	0x035BB068 LDR X0, [X0 + 0x9E8]
	0x035BB06C BL 0x1C16CF4
	0x035BB070 MOVZ W8, 0x1
	0x035BB074 STRB W8, [X21 + 0x169]
	0x035BB078 LDR X1, [X22]
	0x035BB07C MOV X0, X20
	0x035BB080 MOV W2, W19
	0x035BB084 LDP X20, X19, [X31 + 0x20]
	0x035BB088 LDP X22, X21, [X31 + 0x10]
	0x035BB08C LDR X30, [X31], #0x30
	0x035BB090 B 0x35BB130
	0x035BB094 STP X30, X23, [X31 - 0x30]!
	0x035BB098 STP X22, X21, [X31 + 0x10]
	0x035BB09C STP X20, X19, [X31 + 0x20]
	0x035BB0A0 ADRP X20, 0xE25000
	0x035BB0A4 ADRP X23, 0xB7C000
	0x035BB0A8 LDRB W8, [X20 + 0x12A]
	0x035BB0AC LDR X23, [X23 + 0x9E0]
	0x035BB0B0 MOV W19, W2
	0x035BB0B4 MOV W21, W1
	0x035BB0B8 MOV X22, X0
	0x035BB0BC TBNZ X8, 0x0, 0x35BB0D4
	0x035BB0C0 ADRP X0, 0xB7C000
	0x035BB0C4 LDR X0, [X0 + 0x9E0]
	0x035BB0C8 BL 0x1C16CF4
	0x035BB0CC MOVZ W8, 0x1
	0x035BB0D0 STRB W8, [X20 + 0x12A]
	0x035BB0D4 LDR X0, [X23]
	0x035BB0D8 BL 0x1C16F10
	0x035BB0DC MOV X1, X22
	0x035BB0E0 MOV W2, W21
	0x035BB0E4 MOV X20, X0
	0x035BB0E8 BL 0x35BB130
	0x035BB0EC CBZ X20, 0x35BB12C
	0x035BB0F0 LDR W8, [X20 + 0x20]
	0x035BB0F4 TBZ X19, 0x0, 0x35BB108
	0x035BB0F8 CMP W8, 0x3
	0x035BB0FC B.LT 0x35BB118
	0x035BB100 MOVZ W8, 0x2
	0x035BB104 B 0x35BB114
	0x035BB108 CMP W8, 0x4
	0x035BB10C B.GT 0x35BB118
	0x035BB110 MOVZ W8, 0x5
	0x035BB114 STR W8, [X20 + 0x20]
	0x035BB118 MOV X0, X20
	0x035BB11C LDP X20, X19, [X31 + 0x20]
	0x035BB120 LDP X22, X21, [X31 + 0x10]
	0x035BB124 LDP X30, X23, [X31], #0x30
	0x035BB128 RET
	0x035BB12C BL 0x1C16F20
	0x035BB130 SUB X31, X31, 0x30
	0x035BB134 STP X30, X21, [X31 + 0x10]
	0x035BB138 STP X20, X19, [X31 + 0x20]
	0x035BB13C MOV W19, W2
	0x035BB140 MOVZ W2, 0x1
	0x035BB144 MOV X20, X0
	0x035BB148 BL 0x35BC984
	0x035BB14C CMP W19, 0x0
	0x035BB150 B.LE 0x35BB168
	0x035BB154 STR W19, [X20 + 0x38]
	0x035BB158 LDP X20, X19, [X31 + 0x20]
	0x035BB15C LDP X30, X21, [X31 + 0x10]
	0x035BB160 ADD X31, X31, 0x30
	0x035BB164 RET
	0x035BB168 STR W19, [X31 + 0xC]
	0x035BB16C ADRP X0, 0xB38000
	0x035BB170 LDR X0, [X0 + 0x758]
	0x035BB174 BL 0x1C16D08
	0x035BB178 ADD X1, X31, 0xC
	0x035BB17C BL 0x1C16E04
	0x035BB180 MOV X19, X0
	0x035BB184 ADRP X0, 0xB40000
	0x035BB188 LDR X0, [X0 + 0x760]
	0x035BB18C BL 0x1C16D08
	0x035BB190 BL 0x1C16F10
	0x035BB194 MOV X20, X0
	0x035BB198 ADRP X0, 0xB7C000
	0x035BB19C LDR X0, [X0 + 0x9F0]
	0x035BB1A0 BL 0x1C16D08
	0x035BB1A4 MOV X21, X0
	0x035BB1A8 ADRP X0, 0xB7C000
	0x035BB1AC LDR X0, [X0 + 0x9F8]
	0x035BB1B0 BL 0x1C16D08
	0x035BB1B4 MOV X3, X0
	0x035BB1B8 MOV X0, X20
	0x035BB1BC MOV X1, X21
	0x035BB1C0 MOV X2, X19
	0x035BB1C4 MOV X4, X31
	0x035BB1C8 BL 0x3312C8C
	0x035BB1CC ADRP X0, 0xB7C000
	0x035BB1D0 LDR X0, [X0 + 0xA00]
	0x035BB1D4 BL 0x1C16D08
	0x035BB1D8 MOV X1, X0
	0x035BB1DC MOV X0, X20
	0x035BB1E0 BL 0x1C16DEC
	0x035BB1E4 STR D8, [X31 - 0x30]!
	0x035BB1E8 STP X30, X21, [X31 + 0x10]
	0x035BB1EC STP X20, X19, [X31 + 0x20]
	0x035BB1F0 ADRP X20, 0xE25000
	0x035BB1F4 ADRP X21, 0xB7C000
	0x035BB1F8 LDRB W8, [X20 + 0x12B]
	0x035BB1FC LDR X21, [X21 + 0xA08]
	0x035BB200 MOV W19, W0
	0x035BB204 MOV V8.16B, V0.16B
	0x035BB208 TBNZ X8, 0x0, 0x35BB220
	0x035BB20C ADRP X0, 0xB7C000
	0x035BB210 LDR X0, [X0 + 0xA08]
	0x035BB214 BL 0x1C16CF4
	0x035BB218 MOVZ W8, 0x1
	0x035BB21C STRB W8, [X20 + 0x12B]
	0x035BB220 LDR X0, [X21]
	0x035BB224 BL 0x1C16F10
	0x035BB228 MOV V0.16B, V8.16B
	0x035BB22C MOV X20, X0
	0x035BB230 BL 0x35BB278
	0x035BB234 CBZ X20, 0x35BB274

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0xE26000
	010 Move W8, [X20+281]
	011 Move V8, V0
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0xB7D000
	018 Move X0, [X0+2384]
	019 Call 0x1C17CF4
	020 Move X0, 0xB7D000
	021 Move X0, [X0+2392]
	022 Call 0x1C17CF4
	023 Move X0, 0xB7D000
	024 Move X0, [X0+2344]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+281], W8
	028 Move W8, [X19+24]
	029 Compare W8, 0
	030 JumpIfEqual {32}
	031 Move W0, W31
	032 Move X0, [X19+16]
	033 Compare X0, 0
	034 JumpIfEqual {121}
	035 Move X23, 0xB7D000
	036 Move X20, 0xB39000
	037 Move X24, 0xB7D000
	038 Move X23, [X23+2392]
	039 Move X20, [X20+2000]
	040 Move X24, [X24+2384]
	041 Move W8, [X0+24]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X1, [X23]
	044 Call 0x24B485C, X0
	045 Move X21, X0
	046 Compare X0, 0
	047 JumpIfEqual {63}
	048 Move X0, X21
	049 Move V0, V8
	050 Call Command.Update, X0, V0
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {106}
	055 Move X0, [X19+16]
	056 Compare X0, 0
	057 JumpIfEqual {121}
	058 Move X1, [X24]
	059 Call 0x24B4670, X0
	060 Move X0, [X19+16]
	061 Compare X0, 0
	062 JumpIfNotEqual {41}
	063 Call 0x1C17F20
	064 Move X22, X0
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X0, X22
	067 Call 0x3EB2AD0
	068 Move X22, X0
	069 Move X0, X20
	070 Call 0x1C17D08
	071 Move X8, [X22]
	072 Move X1, [X8]
	073 Call 0x1C18270
	074 Move TEMP, X0
	075 And TEMP, TEMP, 1
	076 Compare TEMP, 1
	077 JumpIfNotEqual {122}
	078 Move X22, [X22]
	079 Call 0x3EB2AE0
	080 Compare X21, 0
	081 JumpIfEqual {121}
	082 Move X8, X21
	083 Move W9, [X8+16]
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move X8, [X8+48]
	086 Compare X8, 0
	087 JumpIfNotEqual {83}
	088 Move X0, X21
	089 Move X1, X21
	090 Move X2, X22
	091 Call Command.Abort, X0, X1, X2
	092 Move W8, [X21+16]
	093 NotImplemented "Instruction CMP not yet implemented."
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move X9, X21
	096 Move X9, [X9+48]
	097 Compare X9, 0
	098 JumpIfEqual {105}
	099 Move W10, [X9+16]
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X21, [X21+48]
	102 Compare X21, 0
	103 JumpIfEqual {106}
	104 Move W8, [X21+16]
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move X8, [X19+16]
	107 Compare X8, 0
	108 JumpIfEqual {121}
	109 Move W8, [X8+24]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 NotImplemented "Instruction CSET not yet implemented."
	112 Move X20, [X31+48]
	113 Move X19, [X31+56]
	114 Move X22, [X31+32]
	115 Move X21, [X31+40]
	116 Move X24, [X31+16]
	117 Move X23, [X31+24]
	118 Move X30, [X31+8]
	119 Move V8, [X31+64]
	120 Return X0
	121 Call 0x1C17F20
	122 Move W0, 8
	123 Call 0x3EB2AF0
	124 Move X8, [X22]
	125 Move [X0], X8
	126 Move X1, 0x8FA000
	127 Add X1, X1, 3672
	128 Move X2, X31
	129 Call 0x3EB2B00
	130 Move X22, X0
	131 Call 0x3EB2AE0
	132 Move X0, X22
	133 Call 0x1D2D690
	134 Call 0x1991590

Method: System.Collections.Generic.IEnumerator`1<SpatialSys.CommandLib.Command> GetEnumerator()

Disassembly:
	0x035BB48C AND W3, W20, 0x1
	0x035BB490 MOV X0, X21
	0x035BB494 MOV X2, X19
	0x035BB498 LDP X20, X19, [X31 + 0x20]
	0x035BB49C LDP X22, X21, [X31 + 0x10]
	0x035BB4A0 LDP X30, X23, [X31], #0x30
	0x035BB4A4 B 0x35BB554
	0x035BB4A8 STR X30, [X31 - 0x40]!
	0x035BB4AC STP X24, X23, [X31 + 0x10]
	0x035BB4B0 STP X22, X21, [X31 + 0x20]
	0x035BB4B4 STP X20, X19, [X31 + 0x30]
	0x035BB4B8 ADRP X20, 0xE25000
	0x035BB4BC ADRP X24, 0xB7C000
	0x035BB4C0 LDRB W8, [X20 + 0x12E]
	0x035BB4C4 LDR X24, [X24 + 0xA18]
	0x035BB4C8 MOV W19, W3
	0x035BB4CC MOV W23, W2
	0x035BB4D0 MOV X21, X1
	0x035BB4D4 MOV X22, X0
	0x035BB4D8 TBNZ X8, 0x0, 0x35BB4F0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xE26000
	005 Move W8, [X20+282]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xB7D000
	012 Move X0, [X0+2376]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+282], W8
	016 Move X0, [X19+16]
	017 Compare X0, 0
	018 JumpIfEqual {27}
	019 Move X8, 0xB7D000
	020 Move X8, [X8+2376]
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X1, [X8]
	024 Move X30, [X31+32]
	025 Call 0x24B4C6C, X0
	026 Return X0
	027 Call 0x1C17F20

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x035BB4DC ADRP X0, 0xB7C000
	0x035BB4E0 LDR X0, [X0 + 0xA18]
	0x035BB4E4 BL 0x1C16CF4
	0x035BB4E8 MOVZ W8, 0x1
	0x035BB4EC STRB W8, [X20 + 0x12E]
	0x035BB4F0 LDR X0, [X24]
	0x035BB4F4 BL 0x1C16F10
	0x035BB4F8 AND W3, W23, 0x1
	0x035BB4FC MOV X1, X22
	0x035BB500 MOV X2, X21
	0x035BB504 MOV X20, X0
	0x035BB508 BL 0x35BB554
	0x035BB50C CBZ X20, 0x35BB550
	0x035BB510 LDR W8, [X20 + 0x20]
	0x035BB514 TBZ X19, 0x0, 0x35BB528
	0x035BB518 CMP W8, 0x3
	0x035BB51C B.LT 0x35BB538
	0x035BB520 MOVZ W8, 0x2
	0x035BB524 B 0x35BB534
	0x035BB528 CMP W8, 0x4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xE26000
	005 Move W8, [X20+283]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xB7D000
	012 Move X0, [X0+2376]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+283], W8
	016 Move X0, [X19+16]
	017 Compare X0, 0
	018 JumpIfEqual {27}
	019 Move X8, 0xB7D000
	020 Move X8, [X8+2376]
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X1, [X8]
	024 Move X30, [X31+32]
	025 Call 0x24B4C6C, X0
	026 Return X0
	027 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x035BB52C B.GT 0x35BB538
	0x035BB530 MOVZ W8, 0x5
	0x035BB534 STR W8, [X20 + 0x20]
	0x035BB538 MOV X0, X20
	0x035BB53C LDP X20, X19, [X31 + 0x30]
	0x035BB540 LDP X22, X21, [X31 + 0x20]
	0x035BB544 LDP X24, X23, [X31 + 0x10]
	0x035BB548 LDR X30, [X31], #0x40
	0x035BB54C RET
	0x035BB550 BL 0x1C16F20
	0x035BB554 STP X30, X25, [X31 - 0x40]!
	0x035BB558 STP X24, X23, [X31 + 0x10]
	0x035BB55C STP X22, X21, [X31 + 0x20]
	0x035BB560 STP X20, X19, [X31 + 0x30]
	0x035BB564 ADRP X25, 0xE25000
	0x035BB568 ADRP X23, 0xB39000
	0x035BB56C ADRP X22, 0xB7C000
	0x035BB570 LDRB W8, [X25 + 0x16C]
	0x035BB574 LDR X23, [X23 + 0xE70]
	0x035BB578 LDR X22, [X22 + 0xA20]
	0x035BB57C MOV X19, X2
	0x035BB580 MOV X21, X1
	0x035BB584 MOV X20, X0
	0x035BB588 AND W24, W3, 0x1
	0x035BB58C TBNZ X8, 0x0, 0x35BB5D4
	0x035BB590 ADRP X0, 0xB3B000
	0x035BB594 LDR X0, [X0 + 0x2C8]
	0x035BB598 BL 0x1C16CF4
	0x035BB59C ADRP X0, 0xB39000
	0x035BB5A0 LDR X0, [X0 + 0xE70]
	0x035BB5A4 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xE26000
	007 Move X22, 0xB7D000
	008 Move X20, 0xB7D000
	009 Move W8, [X21+284]
	010 Move X22, [X22+2400]
	011 Move X20, [X20+2408]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xB7D000
	018 Move X0, [X0+2408]
	019 Call 0x1C17CF4
	020 Move X0, 0xB7D000
	021 Move X0, [X0+2400]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+284], W8
	025 Move X0, [X22]
	026 Call 0x1C17F10
	027 Move X1, [X20]
	028 Move X20, X0
	029 Call 0x24B4510, X0
	030 Move [X19+16], X20
	031 Move X0, X19
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move X1, X31
	037 Move X30, [X31+48]
	038 Call Object..ctor, X0
	039 Return 

