Type: SpatialSys.CommandLib.Command

Method: SpatialSys.CommandLib.CommandState get_state()

Disassembly:
	0x035BD7B8 STP X20, X19, [X31 + 0x20]
	0x035BD7BC ADRP X19, 0xE23000

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_state(SpatialSys.CommandLib.CommandState value)

Disassembly:
	0x035BD7C0 ADRP X21, 0xB7A000
	0x035BD7C4 LDRB W8, [X19 + 0x143]

ISIL:
	001 Move [X0+16], W1
	002 Return 

Method: System.Boolean get_propagateAbortToParents()

Disassembly:
	0x035BD7C8 LDR X21, [X21 + 0xB28]
	0x035BD7CC MOV X20, X0

ISIL:
	001 Move W0, [X0+20]
	002 Return X0

Method: System.Void set_propagateAbortToParents(System.Boolean value)

Disassembly:
	0x035BD7D0 TBNZ X8, 0x0, 0x35BD818
	0x035BD7D4 ADRP X0, 0xB36000
	0x035BD7D8 LDR X0, [X0 + 0xB60]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+20], W8
	003 Return 

Method: System.String get_identifier()

Disassembly:
	0x035BD7DC BL 0x1C16CF4
	0x035BD7E0 ADRP X0, 0xB7A000
	0x035BD7E4 LDR X0, [X0 + 0xB30]
	0x035BD7E8 BL 0x1C16CF4
	0x035BD7EC ADRP X0, 0xB7A000
	0x035BD7F0 LDR X0, [X0 + 0xB28]
	0x035BD7F4 BL 0x1C16CF4
	0x035BD7F8 ADRP X0, 0xB7A000
	0x035BD7FC LDR X0, [X0 + 0x9E0]
	0x035BD800 BL 0x1C16CF4
	0x035BD804 ADRP X0, 0xB36000
	0x035BD808 LDR X0, [X0 + 0xD48]
	0x035BD80C BL 0x1C16CF4
	0x035BD810 MOVZ W8, 0x1
	0x035BD814 STRB W8, [X19 + 0x143]
	0x035BD818 LDR X0, [X21]
	0x035BD81C BL 0x1C16F10
	0x035BD820 MOV X1, X31
	0x035BD824 MOV X19, X0
	0x035BD828 BL 0x33BDD8C
	0x035BD82C CBZ X19, 0x35BD8F8
	0x035BD830 STR X20, [X19 + 0x10]
	0x035BD834 CBZ X20, 0x35BD8F8
	0x035BD838 MOV X0, X20
	0x035BD83C BL 0x35B997C
	0x035BD840 CBZ X0, 0x35BD8C8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xE24000
	005 Move W8, [X20+317]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xB38000
	012 Move X0, [X0+3784]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+317], W8
	016 Move X0, [X19+48]
	017 Compare X0, 0
	018 JumpIfEqual {30}
	019 Move X20, 0xB38000
	020 Move X20, [X20+3784]
	021 Call Command.get_identifier, X0
	022 Move X2, [X19+40]
	023 Move X1, [X20]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X3, X31
	027 Move X30, [X31+32]
	028 Call String.Concat, X0, X1, X2
	029 Return X0
	030 Move X0, [X19+40]
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return X0

Method: System.Boolean get_hasStarted()

Disassembly:
	0x035BAA0C LDR X9, [X9 + 0x30]
	0x035BAA10 CBZ X9, 0x35BAA30
	0x035BAA14 LDR W10, [X9 + 0x10]
	0x035BAA18 CMP W10, 0x2

ISIL:
	001 Move W8, [X0+16]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Boolean get_isCancelled()

Disassembly:
	0x035BD844 LDR X0, [X19 + 0x10]
	0x035BD848 CBZ X0, 0x35BD8F8
	0x035BD84C BL 0x35B997C
	0x035BD850 CBZ X0, 0x35BD8F8
	0x035BD854 MOV X1, X31
	0x035BD858 BL 0x33BE520
	0x035BD85C CBZ X0, 0x35BD8F8
	0x035BD860 LDR X8, [X0]

ISIL:
	001 Move W8, [X0+16]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move X0, [X0+48]
	004 Compare X0, 0
	005 JumpIfNotEqual {1}
	006 NotImplemented "Instruction CMP not yet implemented."
	007 NotImplemented "Instruction CSET not yet implemented."
	008 Return X0

Method: System.Boolean get_isAborted()

Disassembly:
	0x035BB460 LDR X23, [X23 + 0x60]
	0x035BB464 MOV W20, W2
	0x035BB468 MOV X19, X1
	0x035BB46C MOV X21, X0
	0x035BB470 TBNZ X8, 0x0, 0x35BB488
	0x035BB474 ADRP X0, 0xB63000
	0x035BB478 LDR X0, [X0 + 0x60]
	0x035BB47C BL 0x1C16CF4

ISIL:
	001 Move W8, [X0+16]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move X0, [X0+48]
	004 Compare X0, 0
	005 JumpIfNotEqual {1}
	006 NotImplemented "Instruction CMP not yet implemented."
	007 NotImplemented "Instruction CSET not yet implemented."
	008 Return X0

Method: System.Boolean get_isDone()

Disassembly:
	0x035BD864 ADRP X20, 0xB36000
	0x035BD868 ADRP X21, 0xB7A000
	0x035BD86C ADRP X22, 0xB36000
	0x035BD870 LDP X9, X1, [X8 + 0x1A8]

ISIL:
	001 Move W8, [X0+16]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Boolean get_hasFinalized()

Disassembly:
	0x035BAA94 BL 0x3EB1AE0
	0x035BAA98 MOV X0, X22
	0x035BAA9C BL 0x1D2C690
	0x035BAAA0 BL 0x1990590
	0x035BAAA4 SUB X31, X31, 0x50
	0x035BAAA8 STR X30, [X31 + 0x30]
	0x035BAAAC STP X20, X19, [X31 + 0x40]
	0x035BAAB0 ADRP X20, 0xE26000
	0x035BAAB4 LDRB W8, [X20 + 0x122]
	0x035BAAB8 MOV X19, X0
	0x035BAABC TBNZ X8, 0x0, 0x35BAAE0
	0x035BAAC0 ADRP X0, 0xB7D000
	0x035BAAC4 LDR X0, [X0 + 0x9B8]
	0x035BAAC8 BL 0x1C16CF4
	0x035BAACC ADRP X0, 0xB7D000
	0x035BAAD0 LDR X0, [X0 + 0x9A0]
	0x035BAAD4 BL 0x1C16CF4
	0x035BAAD8 MOVZ W8, 0x1
	0x035BAADC STRB W8, [X20 + 0x122]
	0x035BAAE0 LDR X0, [X19 + 0x10]
	0x035BAAE4 CBZ X0, 0x35BAB30
	0x035BAAE8 ADRP X8, 0xB7D000
	0x035BAAEC LDR X8, [X8 + 0x9A0]
	0x035BAAF0 ADRP X19, 0xB7D000
	0x035BAAF4 LDR X1, [X8]
	0x035BAAF8 LDR X19, [X19 + 0x9B8]

ISIL:
	001 Move W9, [X0+16]
	002 Move W8, 1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move X8, X0
	006 Move X8, [X8+48]
	007 Compare X8, 0
	008 JumpIfEqual {11}
	009 Move W10, [X8+16]
	010 NotImplemented "Instruction CMP not yet implemented."
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move W8, 1
	013 Move X0, [X0+48]
	014 Compare X0, 0
	015 JumpIfEqual {18}
	016 Move W8, [X0+16]
	017 NotImplemented "Instruction CMP not yet implemented."
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction CSET not yet implemented."
	020 Move W0, W8
	021 Return X0

Method: System.Exception get_abortException()

Disassembly:
	0x035BD874 LDR X20, [X20 + 0xB60]
	0x035BD878 LDR X21, [X21 + 0xB30]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_abortException(System.Exception value)

Disassembly:
	0x035BD87C LDR X22, [X22 + 0xD48]
	0x035BD880 BLR X9

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: AnimalCompany.LogLevel get_minLogLevel()

Disassembly:
	0x035BD884 LDR X8, [X20]
	0x035BD888 MOV X20, X0
	0x035BD88C MOV X0, X8
	0x035BD890 BL 0x1C16F10
	0x035BD894 LDR X2, [X21]
	0x035BD898 MOV X1, X19
	0x035BD89C MOV X21, X0
	0x035BD8A0 BL 0x35BC5A4
	0x035BD8A4 LDR X0, [X22]
	0x035BD8A8 BL 0x1C16F10
	0x035BD8AC MOVZ W2, 0x1
	0x035BD8B0 MOV X1, X20
	0x035BD8B4 MOV X19, X0
	0x035BD8B8 BL 0x35BC984
	0x035BD8BC STR W31, [X19 + 0x38]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X19+48]
	005 Compare X0, 0
	006 JumpIfEqual {14}
	007 Call Command.get_minLogLevel, X0
	008 Move W8, [X19+32]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X19, [X19+48]
	011 Compare X19, 0
	012 JumpIfNotEqual {4}
	013 Call 0x1C17F20
	014 Move W8, [X19+32]
	015 Move W0, W8
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Return X0

Method: System.Void set_minLogLevel(AnimalCompany.LogLevel value)

Disassembly:
	0x035BD8C0 STR X21, [X19 + 0x40]
	0x035BD8C4 B 0x35BD8E4

ISIL:
	001 Move [X0+32], W1
	002 Return 

Method: System.Boolean get_silent()

Disassembly:
	0x035BD8C8 ADRP X8, 0xB7A000
	0x035BD8CC LDR X8, [X8 + 0x9E0]
	0x035BD8D0 LDR X0, [X8]
	0x035BD8D4 BL 0x1C16F10
	0x035BD8D8 MOVZ W1, 0x1
	0x035BD8DC MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Call Command.get_minLogLevel, X0
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Move X30, [X31+16]
	006 Return X0

Method: System.Void set_silent(System.Boolean value)

Disassembly:
	0x035BD494 MOV X24, X0
	0x035BD498 CMP W1, 0x1
	0x035BD49C B.NE 0x35BD4B4
	0x035BD4A0 MOV X0, X24
	0x035BD4A4 BL 0x3EB1AD0
	0x035BD4A8 LDR X23, [X0]
	0x035BD4AC BL 0x3EB1AE0
	0x035BD4B0 B 0x35BD36C
	0x035BD4B4 MOV X23, X31
	0x035BD4B8 B 0x35BD4C0
	0x035BD4BC MOV X24, X0

ISIL:
	001 Move W8, [X0+32]
	002 Move TEMP, X1
	003 And TEMP, TEMP, 1
	004 Compare TEMP, 1
	005 JumpIfNotEqual {8}
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move W8, 2
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move W8, 5
	010 Move [X0+32], W8
	011 Return 

Method: SpatialSys.CommandLib.Command get_parentCommand()

Disassembly:
	0x035BD8E0 BL 0x35BB03C
	0x035BD8E4 MOV X0, X19

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Collections.Generic.IEnumerable`1<SpatialSys.CommandLib.Command> get__childCommands()

Disassembly:
	0x035BD8E8 LDP X20, X19, [X31 + 0x20]
	0x035BD8EC LDP X22, X21, [X31 + 0x10]
	0x035BD8F0 LDR X30, [X31], #0x30
	0x035BD8F4 RET
	0x035BD8F8 BL 0x1C16F20
	0x035BD8FC MOV X1, X31
	0x035BD900 B 0x33BDD8C
	0x035BD904 STR X30, [X31 - 0x30]!
	0x035BD908 STP X22, X21, [X31 + 0x10]
	0x035BD90C STP X20, X19, [X31 + 0x20]
	0x035BD910 ADRP X20, 0xE23000
	0x035BD914 LDRB W8, [X20 + 0x144]
	0x035BD918 MOV X19, X0
	0x035BD91C TBNZ X8, 0x0, 0x35BD940
	0x035BD920 ADRP X0, 0xB7A000
	0x035BD924 LDR X0, [X0 + 0xB38]
	0x035BD928 BL 0x1C16CF4
	0x035BD92C ADRP X0, 0xB36000
	0x035BD930 LDR X0, [X0 + 0x848]
	0x035BD934 BL 0x1C16CF4
	0x035BD938 MOVZ W8, 0x1
	0x035BD93C STRB W8, [X20 + 0x144]
	0x035BD940 MOV X0, X19
	0x035BD944 MOV X1, X31
	0x035BD948 BL 0x33BE520
	0x035BD94C CBZ X0, 0x35BD99C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xE24000
	005 Move X20, 0xB7B000
	006 Move W8, [X19+318]
	007 Move X20, [X20+2696]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xB7B000
	013 Move X0, [X0+2696]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+318], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move X1, X31
	020 Move X19, X0
	021 Call Object..ctor, X0
	022 Move TEMP, 1
	023 Not TEMP
	024 Move W8, TEMP
	025 Move X0, X31
	026 Move [X19+16], W8
	027 Call Environment.get_CurrentManagedThreadId
	028 Move [X19+32], W0
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Return X0

Method: System.Void .ctor(System.String identifier = null, System.Boolean propagateAbortToParents = True)

Disassembly:
	0x035BD984 MOV X0, X20
	0x035BD988 LDP X20, X19, [X31 + 0x20]
	0x035BD98C LDP X22, X21, [X31 + 0x10]
	0x035BD990 MOV X4, X31
	0x035BD994 LDR X30, [X31], #0x30
	0x035BD998 B 0x32277C4
	0x035BD99C BL 0x1C16F20
	0x035BD9A0 STR X30, [X31 - 0x20]!
	0x035BD9A4 STP X20, X19, [X31 + 0x10]
	0x035BD9A8 ADRP X19, 0xE23000
	0x035BD9AC ADRP X20, 0xB7A000
	0x035BD9B0 LDRB W8, [X19 + 0x145]
	0x035BD9B4 LDR X20, [X20 + 0xAE8]
	0x035BD9B8 TBNZ X8, 0x0, 0x35BD9D0
	0x035BD9BC ADRP X0, 0xB7A000
	0x035BD9C0 LDR X0, [X0 + 0xAE8]
	0x035BD9C4 BL 0x1C16CF4
	0x035BD9C8 MOVZ W8, 0x1
	0x035BD9CC STRB W8, [X19 + 0x145]
	0x035BD9D0 LDR X0, [X20]
	0x035BD9D4 BL 0x1C16F10
	0x035BD9D8 MOV X1, X31
	0x035BD9DC MOV X19, X0
	0x035BD9E0 BL 0x33BDD8C
	0x035BD9E4 LDR X8, [X20]
	0x035BD9E8 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, X1
	006 Move W8, 5
	007 Move X1, X31
	008 Move W19, W2
	009 Move X20, X0
	010 Move [X0+32], W8
	011 Call Object..ctor, X0
	012 Move [X20+16], W31
	013 Compare X21, 0
	014 JumpIfNotEqual {25}
	015 Move X0, X20
	016 Move X1, X31
	017 Call "il2cpp_vm_object_is_inst", X0
	018 Compare X0, 0
	019 JumpIfEqual {33}
	020 Move X8, [X0]
	021 Move X9, [X8+424]
	022 Move X1, [X8+432]
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Move X21, X0
	025 And W8, W19, 1
	026 Move [X20+40], X21
	027 Move [X20+20], W8
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return 
	033 Call 0x1C17F20

Method: System.Boolean Update(System.Single deltaTime)

Disassembly:
	0x035BB238 LDR W8, [X20 + 0x20]
	0x035BB23C TBZ X19, 0x0, 0x35BB250
	0x035BB240 CMP W8, 0x3
	0x035BB244 B.LT 0x35BB260
	0x035BB248 MOVZ W8, 0x2
	0x035BB24C B 0x35BB25C
	0x035BB250 CMP W8, 0x4
	0x035BB254 B.GT 0x35BB260
	0x035BB258 MOVZ W8, 0x5
	0x035BB25C STR W8, [X20 + 0x20]
	0x035BB260 MOV X0, X20
	0x035BB264 LDP X20, X19, [X31 + 0x20]
	0x035BB268 LDP X30, X21, [X31 + 0x10]
	0x035BB26C LDR V8, [X31], #0x30
	0x035BB270 RET
	0x035BB274 BL 0x1C16F20
	0x035BB278 STR D8, [X31 - 0x30]!
	0x035BB27C STP X30, X21, [X31 + 0x10]
	0x035BB280 STP X20, X19, [X31 + 0x20]
	0x035BB284 ADRP X20, 0xE25000
	0x035BB288 ADRP X21, 0xB7C000
	0x035BB28C LDRB W8, [X20 + 0x16E]
	0x035BB290 LDR X21, [X21 + 0xA10]
	0x035BB294 MOV V8.16B, V0.16B
	0x035BB298 MOV X19, X0
	0x035BB29C TBNZ X8, 0x0, 0x35BB2B4
	0x035BB2A0 ADRP X0, 0xB7C000
	0x035BB2A4 LDR X0, [X0 + 0xA10]
	0x035BB2A8 BL 0x1C16CF4
	0x035BB2AC MOVZ W8, 0x1
	0x035BB2B0 STRB W8, [X20 + 0x16E]
	0x035BB2B4 LDR X1, [X21]
	0x035BB2B8 MOVZ W2, 0x1
	0x035BB2BC MOV X0, X19
	0x035BB2C0 BL 0x35BC984
	0x035BB2C4 STR W31, [X19 + 0x3C]
	0x035BB2C8 STR S8, [X19 + 0x38]
	0x035BB2CC LDP X20, X19, [X31 + 0x20]
	0x035BB2D0 LDP X30, X21, [X31 + 0x10]
	0x035BB2D4 LDR V8, [X31], #0x30
	0x035BB2D8 RET
	0x035BB2DC STR D8, [X31 - 0x30]!
	0x035BB2E0 STR X30, [X31 + 0x8]
	0x035BB2E4 STP X22, X21, [X31 + 0x10]
	0x035BB2E8 STP X20, X19, [X31 + 0x20]
	0x035BB2EC ADRP X20, 0xE25000
	0x035BB2F0 ADRP X22, 0xB7C000
	0x035BB2F4 LDRB W8, [X20 + 0x12C]
	0x035BB2F8 LDR X22, [X22 + 0xA08]
	0x035BB2FC MOV W19, W1
	0x035BB300 MOV V8.16B, V0.16B
	0x035BB304 MOV X21, X0
	0x035BB308 TBNZ X8, 0x0, 0x35BB320
	0x035BB30C ADRP X0, 0xB7C000
	0x035BB310 LDR X0, [X0 + 0xA08]
	0x035BB314 BL 0x1C16CF4
	0x035BB318 MOVZ W8, 0x1
	0x035BB31C STRB W8, [X20 + 0x12C]
	0x035BB320 LDR X0, [X22]
	0x035BB324 BL 0x1C16F10
	0x035BB328 MOVZ W2, 0x1
	0x035BB32C MOV X1, X21
	0x035BB330 MOV X20, X0
	0x035BB334 BL 0x35BC984
	0x035BB338 LDR W8, [X20 + 0x20]
	0x035BB33C STR W31, [X20 + 0x3C]
	0x035BB340 STR S8, [X20 + 0x38]
	0x035BB344 TBZ X19, 0x0, 0x35BB358
	0x035BB348 CMP W8, 0x3
	0x035BB34C B.LT 0x35BB368
	0x035BB350 MOVZ W8, 0x2
	0x035BB354 B 0x35BB364
	0x035BB358 CMP W8, 0x4
	0x035BB35C B.GT 0x35BB368
	0x035BB360 MOVZ W8, 0x5
	0x035BB364 STR W8, [X20 + 0x20]
	0x035BB368 MOV X0, X20
	0x035BB36C LDP X20, X19, [X31 + 0x20]
	0x035BB370 LDP X22, X21, [X31 + 0x10]
	0x035BB374 LDR X30, [X31 + 0x8]
	0x035BB378 LDR V8, [X31], #0x30
	0x035BB37C RET
	0x035BB380 STR D8, [X31 - 0x20]!
	0x035BB384 STP X30, X19, [X31 + 0x10]
	0x035BB388 MOVZ W2, 0x1
	0x035BB38C MOV V8.16B, V0.16B
	0x035BB390 MOV X19, X0
	0x035BB394 BL 0x35BC984
	0x035BB398 STR W31, [X19 + 0x3C]
	0x035BB39C STR S8, [X19 + 0x38]
	0x035BB3A0 LDP X30, X19, [X31 + 0x10]
	0x035BB3A4 LDR V8, [X31], #0x20
	0x035BB3A8 RET
	0x035BB3AC STP X30, X23, [X31 - 0x30]!
	0x035BB3B0 STP X22, X21, [X31 + 0x10]
	0x035BB3B4 STP X20, X19, [X31 + 0x20]
	0x035BB3B8 ADRP X20, 0xE25000
	0x035BB3BC ADRP X23, 0xB7C000
	0x035BB3C0 LDRB W8, [X20 + 0x12D]
	0x035BB3C4 LDR X23, [X23 + 0xA18]
	0x035BB3C8 MOV W19, W2
	0x035BB3CC MOV W22, W1
	0x035BB3D0 MOV X21, X0
	0x035BB3D4 TBNZ X8, 0x0, 0x35BB3EC
	0x035BB3D8 ADRP X0, 0xB7C000
	0x035BB3DC LDR X0, [X0 + 0xA18]
	0x035BB3E0 BL 0x1C16CF4
	0x035BB3E4 MOVZ W8, 0x1
	0x035BB3E8 STRB W8, [X20 + 0x12D]
	0x035BB3EC LDR X0, [X23]
	0x035BB3F0 BL 0x1C16F10
	0x035BB3F4 AND W2, W22, 0x1
	0x035BB3F8 MOV X1, X21
	0x035BB3FC MOV X20, X0
	0x035BB400 BL 0x35BB448
	0x035BB404 CBZ X20, 0x35BB444
	0x035BB408 LDR W8, [X20 + 0x20]
	0x035BB40C TBZ X19, 0x0, 0x35BB420
	0x035BB410 CMP W8, 0x3
	0x035BB414 B.LT 0x35BB430
	0x035BB418 MOVZ W8, 0x2
	0x035BB41C B 0x35BB42C
	0x035BB420 CMP W8, 0x4
	0x035BB424 B.GT 0x35BB430
	0x035BB428 MOVZ W8, 0x5
	0x035BB42C STR W8, [X20 + 0x20]
	0x035BB430 MOV X0, X20
	0x035BB434 LDP X20, X19, [X31 + 0x20]
	0x035BB438 LDP X22, X21, [X31 + 0x10]
	0x035BB43C LDP X30, X23, [X31], #0x30
	0x035BB440 RET
	0x035BB444 BL 0x1C16F20
	0x035BB448 STP X30, X23, [X31 - 0x30]!
	0x035BB44C STP X22, X21, [X31 + 0x10]
	0x035BB450 STP X20, X19, [X31 + 0x20]
	0x035BB454 ADRP X22, 0xE25000
	0x035BB458 ADRP X23, 0xB63000
	0x035BB45C LDRB W8, [X22 + 0x16B]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W9, [X0+16]
	006 Move W8, 1
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move V8, V0
	010 Move X19, X0
	011 Move X8, X0
	012 Move X8, [X8+48]
	013 Compare X8, 0
	014 JumpIfEqual {17}
	015 Move W10, [X8+16]
	016 NotImplemented "Instruction CMP not yet implemented."
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X8, X19
	019 Move X8, [X8+48]
	020 Compare X8, 0
	021 JumpIfEqual {24}
	022 Move W10, [X8+16]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Compare W9, 0
	025 JumpIfEqual {45}
	026 Move X8, [X19]
	027 Move X9, [X8+408]
	028 Move X1, [X8+416]
	029 Move X0, X19
	030 Move V0, V8
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {61}
	036 Move X0, X19
	037 Call Command.MarkDone, X0
	038 Move W8, 1
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+8]
	042 Move W0, W8
	043 Move V8, [X31+32]
	044 Return X0
	045 Move X8, [X19]
	046 Move X9, [X8+392]
	047 Move X1, [X8+400]
	048 Move X0, X19
	049 NotImplemented "Instruction BLR not yet implemented."
	050 Move W9, [X19+16]
	051 Move W8, 1
	052 NotImplemented "Instruction CMP not yet implemented."
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X10, X19
	055 Move X10, [X10+48]
	056 Compare X10, 0
	057 JumpIfEqual {62}
	058 Move W8, [X10+16]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move W8, 1
	061 Move W8, W31
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X9, X19
	064 Move X9, [X9+48]
	065 Compare X9, 0
	066 JumpIfEqual {70}
	067 Move W8, [X9+16]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move W8, 1
	070 Move W8, 1
	071 Move [X19+16], W8
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move X20, X0
	074 Move X0, X20
	075 Call 0x3EB2AD0
	076 Move X20, X0
	077 Move X0, 0xB39000
	078 Move X0, [X0+2000]
	079 Call 0x1C17D08
	080 Move X8, [X20]
	081 Move X1, [X8]
	082 Call 0x1C18270
	083 Move TEMP, X0
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 JumpIfEqual {112}
	087 Move W0, 8
	088 Call 0x3EB2AF0
	089 Move X8, [X20]
	090 Move [X0], X8
	091 Move X1, 0x8FA000
	092 Add X1, X1, 3672
	093 Move X2, X31
	094 Call 0x3EB2B00
	095 Move X20, X0
	096 Call 0x3EB2AE0
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move X20, X0
	099 Move X0, X20
	100 Call 0x3EB2AD0
	101 Move X20, X0
	102 Move X0, 0xB39000
	103 Move X0, [X0+2000]
	104 Call 0x1C17D08
	105 Move X8, [X20]
	106 Move X1, [X8]
	107 Call 0x1C18270
	108 Move TEMP, X0
	109 And TEMP, TEMP, 1
	110 Compare TEMP, 1
	111 JumpIfNotEqual {126}
	112 Move X20, [X20]
	113 Call 0x3EB2AE0
	114 Move X0, X19
	115 Move X1, X19
	116 Move X2, X20
	117 Call Command.Abort, X0, X1, X2
	118 Move W8, [X19+20]
	119 Compare W8, 0
	120 JumpIfEqual {38}
	121 Move X8, [X19+48]
	122 Compare X8, 0
	123 JumpIfEqual {38}
	124 Move X0, X20
	125 Call 0x1C17F18
	126 Move W0, 8
	127 Call 0x3EB2AF0
	128 Move X8, [X20]
	129 Move [X0], X8
	130 Move X1, 0x8FA000
	131 Add X1, X1, 3672
	132 Move X2, X31
	133 Call 0x3EB2B00
	134 Move X20, X0
	135 Call 0x3EB2AE0
	136 Move X0, X20
	137 Call 0x1D2D690
	138 Call 0x1991590

Method: System.Void Start()

Disassembly:
	0x035BDB50 STR W0, [X19 + 0x20]

ISIL:
	001 Return 

Method: System.Boolean UpdateInternal(System.Single deltaTime)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void Finally()

Disassembly:
	0x035BDB54 MOV X0, X19

ISIL:
	001 Return 

Method: System.Void MarkDone()

Disassembly:
	0x035BD9EC STR X19, [X8]
	0x035BD9F0 LDP X20, X19, [X31 + 0x10]
	0x035BD9F4 LDR X30, [X31], #0x20
	0x035BD9F8 RET
	0x035BD9FC MOV X1, X31
	0x035BDA00 B 0x33BDD8C
	0x035BDA04 CBZ X1, 0x35BDA18
	0x035BDA08 LDR W8, [X1 + 0x10]
	0x035BDA0C CMP W8, 0x1
	0x035BDA10 CSET W0, EQ
	0x035BDA14 RET
	0x035BDA18 MOV W0, W31
	0x035BDA1C RET
	0x035BDA20 STR X30, [X31 - 0x10]!
	0x035BDA24 LDR X0, [X0 + 0x10]
	0x035BDA28 CBZ X0, 0x35BDA38
	0x035BDA2C MOV X1, X31
	0x035BDA30 LDR X30, [X31], #0x10
	0x035BDA34 B 0x3C314F4
	0x035BDA38 BL 0x1C16F20
	0x035BDA3C STR X30, [X31 - 0x10]!
	0x035BDA40 LDR X0, [X0 + 0x10]
	0x035BDA44 CBZ X0, 0x35BDA50
	0x035BDA48 LDR X30, [X31], #0x10
	0x035BDA4C B 0x35B9A1C
	0x035BDA50 BL 0x1C16F20
	0x035BDA54 RET
	0x035BDA58 LDR W9, [X0 + 0x10]
	0x035BDA5C MOV W8, W31
	0x035BDA60 CMP W9, 0x1
	0x035BDA64 B.EQ 0x35BDA7C
	0x035BDA68 CBNZ W9, 0x35BDA84
	0x035BDA6C MOVZ W9, 0x1
	0x035BDA70 MOVZ W8, 0x1
	0x035BDA74 STR X31, [X0 + 0x18]
	0x035BDA78 B 0x35BDA80
	0x035BDA7C MOVN W9, 0x0
	0x035BDA80 STR W9, [X0 + 0x10]
	0x035BDA84 MOV W0, W8
	0x035BDA88 RET
	0x035BDA8C LDR X0, [X0 + 0x18]
	0x035BDA90 RET
	0x035BDA94 STP X30, X19, [X31 - 0x10]!
	0x035BDA98 ADRP X0, 0xB36000
	0x035BDA9C LDR X0, [X0 + 0xB40]
	0x035BDAA0 BL 0x1C16D08
	0x035BDAA4 BL 0x1C16F10
	0x035BDAA8 MOV X1, X31
	0x035BDAAC MOV X19, X0
	0x035BDAB0 BL 0x3380310
	0x035BDAB4 ADRP X0, 0xB7A000
	0x035BDAB8 LDR X0, [X0 + 0xB40]
	0x035BDABC BL 0x1C16D08
	0x035BDAC0 MOV X1, X0
	0x035BDAC4 MOV X0, X19
	0x035BDAC8 BL 0x1C16DEC
	0x035BDACC LDR X0, [X0 + 0x18]
	0x035BDAD0 RET
	0x035BDAD4 STR X30, [X31 - 0x20]!
	0x035BDAD8 STP X20, X19, [X31 + 0x10]
	0x035BDADC ADRP X20, 0xE23000
	0x035BDAE0 LDRB W8, [X20 + 0x146]
	0x035BDAE4 MOV X19, X0
	0x035BDAE8 TBNZ X8, 0x0, 0x35BDB00
	0x035BDAEC ADRP X0, 0xB7A000
	0x035BDAF0 LDR X0, [X0 + 0xA88]
	0x035BDAF4 BL 0x1C16CF4
	0x035BDAF8 MOVZ W8, 0x1
	0x035BDAFC STRB W8, [X20 + 0x146]
	0x035BDB00 LDR W8, [X19 + 0x10]
	0x035BDB04 ADDS W31, W8, 0x2
	0x035BDB08 B.NE 0x35BDB28
	0x035BDB0C LDR W20, [X19 + 0x20]
	0x035BDB10 MOV X0, X31
	0x035BDB14 BL 0x33C151C
	0x035BDB18 CMP W20, W0
	0x035BDB1C B.NE 0x35BDB28
	0x035BDB20 STR W31, [X19 + 0x10]
	0x035BDB24 B 0x35BDB54
	0x035BDB28 ADRP X8, 0xB7A000
	0x035BDB2C LDR X8, [X8 + 0xA88]
	0x035BDB30 LDR X0, [X8]
	0x035BDB34 BL 0x1C16F10
	0x035BDB38 MOV X1, X31
	0x035BDB3C MOV X19, X0
	0x035BDB40 BL 0x33BDD8C
	0x035BDB44 MOV X0, X31
	0x035BDB48 STR W31, [X19 + 0x10]
	0x035BDB4C BL 0x33C151C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xE24000
	005 Move W8, [X20+319]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {28}
	011 Move X0, 0xB37000
	012 Move X0, [X0+1928]
	013 Call 0x1C17CF4
	014 Move X0, 0xB7B000
	015 Move X0, [X0+2704]
	016 Call 0x1C17CF4
	017 Move X0, 0xB7B000
	018 Move X0, [X0+2712]
	019 Call 0x1C17CF4
	020 Move X0, 0xB7B000
	021 Move X0, [X0+2720]
	022 Call 0x1C17CF4
	023 Move X0, 0xB7B000
	024 Move X0, [X0+2728]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+319], W8
	028 Move W8, [X19+16]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X9, X19
	032 Move X9, [X9+48]
	033 Compare X9, 0
	034 JumpIfEqual {37}
	035 Move W10, [X9+16]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X8, X19
	039 Move X8, [X8+48]
	040 Compare X8, 0
	041 JumpIfEqual {44}
	042 Move W9, [X8+16]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move W8, 4
	045 Move X0, X19
	046 Move [X19+16], W8
	047 Call Command.InternalFinalize, X0
	048 Move X0, X19
	049 Call Command.get_minLogLevel, X0
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Return 
	055 Move X0, X19
	056 Call Command.get_identifier, X0
	057 Move X8, 0xB7B000
	058 Move X8, [X8+2720]
	059 Move X9, 0xB7B000
	060 Move X9, [X9+2712]
	061 Move X1, X0
	062 Move X8, [X8]
	063 Move X3, X31
	064 Move X2, [X9]
	065 Move X0, X8
	066 Call String.Concat, X0, X1, X2
	067 Move X8, 0xB37000
	068 Move X8, [X8+1928]
	069 Move X19, X0
	070 Move X8, [X8]
	071 Move W9, [X8+224]
	072 Compare W9, 0
	073 JumpIfNotEqual {76}
	074 Move X0, X8
	075 Call 0x1C17DFC
	076 Move X8, 0xB7B000
	077 Move X9, 0xB7B000
	078 Move X8, [X8+2728]
	079 Move X9, [X9+2704]
	080 Move X1, X19
	081 Move X20, [X31+16]
	082 Move X19, [X31+24]
	083 Move X3, [X8]
	084 Move X4, [X9]
	085 Move W0, 1024
	086 Move W5, 176
	087 Move X2, X31
	088 Move X6, X31
	089 Move X30, [X31+32]
	090 Call Log.Trace, X0, X1, X2, X3, X4, X5
	091 Return 

Method: System.Void Abort(System.Exception exception)

Disassembly:
	0x035BB480 MOVZ W8, 0x1
	0x035BB484 STRB W8, [X22 + 0x16B]
	0x035BB488 LDR X1, [X23]

ISIL:
	001 Move X2, X1
	002 Move X1, X0
	003 Call Command.Abort, X0, X1, X2
	004 Return 

Method: System.Void Abort(SpatialSys.CommandLib.Command sourceCommand, System.Exception exception)

Disassembly:
	0x035BDD54 LDP X30, X21, [X31], #0x20
	0x035BDD58 B 0x3227C5C
	0x035BDD5C BL 0x1C16F28
	0x035BDD60 BL 0x1C16F20
	0x035BDD64 BL 0x1C16F44
	0x035BDD68 MOV X1, X31
	0x035BDD6C BL 0x1C16DEC
	0x035BDD70 STP X30, X21, [X31 - 0x20]!
	0x035BDD74 STP X20, X19, [X31 + 0x10]
	0x035BDD78 ADRP X20, 0xE23000
	0x035BDD7C ADRP X21, 0xB7A000
	0x035BDD80 LDRB W8, [X20 + 0x148]
	0x035BDD84 LDR X21, [X21 + 0xB58]
	0x035BDD88 MOV X19, X0
	0x035BDD8C TBNZ X8, 0x0, 0x35BDDA4
	0x035BDD90 ADRP X0, 0xB7A000
	0x035BDD94 LDR X0, [X0 + 0xB58]
	0x035BDD98 BL 0x1C16CF4
	0x035BDD9C MOVZ W8, 0x1
	0x035BDDA0 STRB W8, [X20 + 0x148]
	0x035BDDA4 LDR X0, [X21]
	0x035BDDA8 BL 0x1C16F10
	0x035BDDAC MOV X1, X31
	0x035BDDB0 MOV X20, X0
	0x035BDDB4 BL 0x33BDD8C
	0x035BDDB8 MOVN W8, 0x1
	0x035BDDBC MOV X0, X31
	0x035BDDC0 STR W8, [X20 + 0x10]
	0x035BDDC4 BL 0x33C151C
	0x035BDDC8 STR W0, [X20 + 0x20]
	0x035BDDCC STR X19, [X20 + 0x28]
	0x035BDDD0 MOV X0, X20
	0x035BDDD4 LDP X20, X19, [X31 + 0x10]
	0x035BDDD8 LDP X30, X21, [X31], #0x20
	0x035BDDDC RET
	0x035BDDE0 STR X30, [X31 - 0x20]!
	0x035BDDE4 STP X20, X19, [X31 + 0x10]
	0x035BDDE8 MOV W19, W1
	0x035BDDEC MOV X1, X31
	0x035BDDF0 MOV X20, X0
	0x035BDDF4 BL 0x33BDD8C
	0x035BDDF8 MOV X0, X31
	0x035BDDFC STR W19, [X20 + 0x10]
	0x035BDE00 BL 0x33C151C
	0x035BDE04 STR W0, [X20 + 0x20]
	0x035BDE08 LDP X20, X19, [X31 + 0x10]
	0x035BDE0C LDR X30, [X31], #0x20
	0x035BDE10 RET
	0x035BDE14 MOVZ W2, 0x1
	0x035BDE18 B 0x35BC984
	0x035BDE1C STR X30, [X31 - 0x20]!
	0x035BDE20 STP X20, X19, [X31 + 0x10]
	0x035BDE24 CBZ X1, 0x35BDE6C
	0x035BDE28 MOV X19, X1
	0x035BDE2C MOV X20, X0
	0x035BDE30 MOV X0, X1
	0x035BDE34 MOV X1, X31
	0x035BDE38 BL 0x33C4268
	0x035BDE3C CBZ X0, 0x35BDE6C
	0x035BDE40 LDR X8, [X0]
	0x035BDE44 LDP X9, X1, [X8 + 0x1A8]
	0x035BDE48 BLR X9
	0x035BDE4C MOV X1, X0
	0x035BDE50 MOVZ W2, 0x1
	0x035BDE54 MOV X0, X20
	0x035BDE58 BL 0x35BC984
	0x035BDE5C STR X19, [X20 + 0x38]
	0x035BDE60 LDP X20, X19, [X31 + 0x10]
	0x035BDE64 LDR X30, [X31], #0x20
	0x035BDE68 RET
	0x035BDE6C BL 0x1C16F20
	0x035BDE70 STP X30, X19, [X31 - 0x10]!
	0x035BDE74 LDR X8, [X0]
	0x035BDE78 MOV X19, X0
	0x035BDE7C LDP X9, X1, [X8 + 0x1C8]
	0x035BDE80 BLR X9
	0x035BDE84 LDR W8, [X19 + 0x10]
	0x035BDE88 CMP W8, 0x2
	0x035BDE8C B.EQ 0x35BDEFC
	0x035BDE90 CMP W8, 0x4
	0x035BDE94 B.EQ 0x35BDEFC
	0x035BDE98 MOV X9, X19
	0x035BDE9C LDR X9, [X9 + 0x30]
	0x035BDEA0 CBZ X9, 0x35BDEB4
	0x035BDEA4 LDR W10, [X9 + 0x10]
	0x035BDEA8 CMP W10, 0x2
	0x035BDEAC B.NE 0x35BDE9C
	0x035BDEB0 B 0x35BDEFC
	0x035BDEB4 CMP W8, 0x3
	0x035BDEB8 B.EQ 0x35BDEFC
	0x035BDEBC MOV X8, X19
	0x035BDEC0 LDR X8, [X8 + 0x30]
	0x035BDEC4 CBZ X8, 0x35BDED8
	0x035BDEC8 LDR W9, [X8 + 0x10]
	0x035BDECC CMP W9, 0x3
	0x035BDED0 B.NE 0x35BDEC0
	0x035BDED4 B 0x35BDEFC
	0x035BDED8 LDR X8, [X19 + 0x38]
	0x035BDEDC CBZ X8, 0x35BDF04
	0x035BDEE0 LDR X9, [X8 + 0x18]
	0x035BDEE4 LDR X0, [X8 + 0x40]
	0x035BDEE8 LDR X1, [X8 + 0x28]
	0x035BDEEC BLR X9
	0x035BDEF0 MOVZ W8, 0x1
	0x035BDEF4 STR X0, [X19 + 0x40]
	0x035BDEF8 STRB W8, [X19 + 0x50]
	0x035BDEFC LDP X30, X19, [X31], #0x10
	0x035BDF00 RET
	0x035BDF04 BL 0x1C16F20
	0x035BDF08 RET
	0x035BDF0C STR D8, [X31 - 0x20]!
	0x035BDF10 STR X30, [X31 + 0x8]
	0x035BDF14 STP X20, X19, [X31 + 0x10]
	0x035BDF18 ADRP X20, 0xE23000
	0x035BDF1C LDRB W8, [X20 + 0x149]
	0x035BDF20 MOV V8.16B, V0.16B
	0x035BDF24 MOV X19, X0
	0x035BDF28 TBNZ X8, 0x0, 0x35BDF4C
	0x035BDF2C ADRP X0, 0xB7A000
	0x035BDF30 LDR X0, [X0 + 0x938]
	0x035BDF34 BL 0x1C16CF4
	0x035BDF38 ADRP X0, 0xB36000
	0x035BDF3C LDR X0, [X0 + 0xE18]
	0x035BDF40 BL 0x1C16CF4
	0x035BDF44 MOVZ W8, 0x1
	0x035BDF48 STRB W8, [X20 + 0x149]
	0x035BDF4C LDRB W8, [X19 + 0x50]
	0x035BDF50 CBZ W8, 0x35BDFBC
	0x035BDF54 STRB W31, [X19 + 0x50]
	0x035BDF58 LDR X0, [X19 + 0x48]
	0x035BDF5C CBZ X0, 0x35BDF6C
	0x035BDF60 MOV V0.16B, V8.16B
	0x035BDF64 BL 0x35BA238
	0x035BDF68 TBZ X0, 0x0, 0x35BE0A8
	0x035BDF6C LDR X20, [X19 + 0x40]
	0x035BDF70 CBZ X20, 0x35BE0EC
	0x035BDF74 ADRP X10, 0xB36000
	0x035BDF78 LDR X8, [X20]
	0x035BDF7C LDR X10, [X10 + 0xE18]
	0x035BDF80 LDRH W9, [X8 + 0x12E]
	0x035BDF84 LDR X1, [X10]
	0x035BDF88 CBZ X9, 0x35BDFAC
	0x035BDF8C LDR X10, [X8 + 0xB0]
	0x035BDF90 ADD X10, X10, 0x8
	0x035BDF94 LDUR X11, [X10 - 0x8]
	0x035BDF98 CMP X11, X1
	0x035BDF9C B.EQ 0x35BE000
	0x035BDFA0 SUBS X9, X9, 0x1
	0x035BDFA4 ADD X10, X10, 0x10
	0x035BDFA8 B.NE 0x35BDF94
	0x035BDFAC MOV X0, X20
	0x035BDFB0 MOV W2, W31
	0x035BDFB4 BL 0x1C5C788
	0x035BDFB8 B 0x35BE00C
	0x035BDFBC LDR X8, [X19]
	0x035BDFC0 MOV X0, X19
	0x035BDFC4 LDP X9, X1, [X8 + 0x1C8]
	0x035BDFC8 BLR X9
	0x035BDFCC LDR W8, [X19 + 0x10]
	0x035BDFD0 MOVZ W0, 0x1
	0x035BDFD4 CMP W8, 0x2
	0x035BDFD8 B.EQ 0x35BE0BC
	0x035BDFDC CMP W8, 0x4
	0x035BDFE0 B.EQ 0x35BE0BC
	0x035BDFE4 MOV X9, X19
	0x035BDFE8 LDR X9, [X9 + 0x30]
	0x035BDFEC CBZ X9, 0x35BE0B0
	0x035BDFF0 LDR W10, [X9 + 0x10]
	0x035BDFF4 CMP W10, 0x2
	0x035BDFF8 B.NE 0x35BDFE8
	0x035BDFFC B 0x35BE0B8
	0x035BE000 LDRSW X9, [X10]
	0x035BE004 ADD X8, X8, X9, 0x4, LSL
	0x035BE008 ADD X0, X8, 0x138
	0x035BE00C LDP X8, X1, [X0]
	0x035BE010 MOV X0, X20
	0x035BE014 BLR X8
	0x035BE018 TBZ X0, 0x0, 0x35BE0B8
	0x035BE01C LDR X20, [X19 + 0x40]
	0x035BE020 CBZ X20, 0x35BE0EC
	0x035BE024 ADRP X10, 0xB79000
	0x035BE028 LDR X8, [X20]
	0x035BE02C LDR X10, [X10 + 0x938]
	0x035BE030 LDRH W9, [X8 + 0x12E]
	0x035BE034 LDR X1, [X10]
	0x035BE038 CBZ X9, 0x35BE05C
	0x035BE03C LDR X10, [X8 + 0xB0]
	0x035BE040 ADD X10, X10, 0x8
	0x035BE044 LDUR X11, [X10 - 0x8]
	0x035BE048 CMP X11, X1
	0x035BE04C B.EQ 0x35BE06C
	0x035BE050 SUBS X9, X9, 0x1
	0x035BE054 ADD X10, X10, 0x10
	0x035BE058 B.NE 0x35BE044
	0x035BE05C MOV X0, X20
	0x035BE060 MOV W2, W31
	0x035BE064 BL 0x1C5C788
	0x035BE068 B 0x35BE078
	0x035BE06C LDRSW X9, [X10]
	0x035BE070 ADD X8, X8, X9, 0x4, LSL
	0x035BE074 ADD X0, X8, 0x138
	0x035BE078 LDP X8, X1, [X0]
	0x035BE07C MOV X0, X20
	0x035BE080 BLR X8
	0x035BE084 STR X0, [X19 + 0x48]
	0x035BE088 CBZ X0, 0x35BE0BC
	0x035BE08C MOV V0.16B, V8.16B
	0x035BE090 STR X19, [X0 + 0x30]
	0x035BE094 BL 0x35BA238
	0x035BE098 TBZ X0, 0x0, 0x35BE0A8
	0x035BE09C MOV W0, W31
	0x035BE0A0 STR X31, [X19 + 0x48]
	0x035BE0A4 B 0x35BE0BC
	0x035BE0A8 MOV W0, W31
	0x035BE0AC B 0x35BE0BC
	0x035BE0B0 CMP W8, 0x3
	0x035BE0B4 B.NE 0x35BE0CC
	0x035BE0B8 MOVZ W0, 0x1
	0x035BE0BC LDP X20, X19, [X31 + 0x10]
	0x035BE0C0 LDR X30, [X31 + 0x8]
	0x035BE0C4 LDR V8, [X31], #0x20
	0x035BE0C8 RET
	0x035BE0CC MOV X8, X19
	0x035BE0D0 MOVZ W0, 0x1
	0x035BE0D4 LDR X8, [X8 + 0x30]
	0x035BE0D8 CBZ X8, 0x35BDF58
	0x035BE0DC LDR W9, [X8 + 0x10]
	0x035BE0E0 CMP W9, 0x3
	0x035BE0E4 B.NE 0x35BE0D4
	0x035BE0E8 B 0x35BE0BC
	0x035BE0EC BL 0x1C16F20
	0x035BE0F0 STR X30, [X31 - 0x20]!
	0x035BE0F4 STP X20, X19, [X31 + 0x10]
	0x035BE0F8 ADRP X20, 0xE22000
	0x035BE0FC LDRB W8, [X20 + 0x14A]
	0x035BE100 MOV X19, X0
	0x035BE104 TBNZ X8, 0x0, 0x35BE128
	0x035BE108 ADRP X0, 0xB35000
	0x035BE10C LDR X0, [X0 + 0xE00]
	0x035BE110 BL 0x1C16CF4
	0x035BE114 ADRP X0, 0xB79000
	0x035BE118 LDR X0, [X0 + 0x938]
	0x035BE11C BL 0x1C16CF4
	0x035BE120 MOVZ W8, 0x1
	0x035BE124 STRB W8, [X20 + 0x14A]
	0x035BE128 LDR W8, [X19 + 0x10]
	0x035BE12C CMP W8, 0x2
	0x035BE130 B.EQ 0x35BE25C
	0x035BE134 CMP W8, 0x4
	0x035BE138 B.EQ 0x35BE25C
	0x035BE13C MOV X9, X19
	0x035BE140 LDR X9, [X9 + 0x30]
	0x035BE144 CBZ X9, 0x35BE158
	0x035BE148 LDR W10, [X9 + 0x10]
	0x035BE14C CMP W10, 0x2
	0x035BE150 B.NE 0x35BE140
	0x035BE154 B 0x35BE25C
	0x035BE158 CMP W8, 0x3
	0x035BE15C B.EQ 0x35BE25C
	0x035BE160 MOV X8, X19
	0x035BE164 LDR X8, [X8 + 0x30]
	0x035BE168 CBZ X8, 0x35BE17C
	0x035BE16C LDR W9, [X8 + 0x10]
	0x035BE170 CMP W9, 0x3
	0x035BE174 B.NE 0x35BE164
	0x035BE178 B 0x35BE25C
	0x035BE17C LDR X20, [X19 + 0x40]
	0x035BE180 CBZ X20, 0x35BE25C
	0x035BE184 ADRP X10, 0xB79000
	0x035BE188 LDR X8, [X20]
	0x035BE18C LDR X10, [X10 + 0x938]
	0x035BE190 LDRH W9, [X8 + 0x12E]
	0x035BE194 LDR X1, [X10]
	0x035BE198 CBZ X9, 0x35BE1BC
	0x035BE19C LDR X10, [X8 + 0xB0]
	0x035BE1A0 ADD X10, X10, 0x8
	0x035BE1A4 LDUR X11, [X10 - 0x8]
	0x035BE1A8 CMP X11, X1
	0x035BE1AC B.EQ 0x35BE1CC
	0x035BE1B0 SUBS X9, X9, 0x1
	0x035BE1B4 ADD X10, X10, 0x10
	0x035BE1B8 B.NE 0x35BE1A4
	0x035BE1BC MOV X0, X20
	0x035BE1C0 MOV W2, W31
	0x035BE1C4 BL 0x1C5C788
	0x035BE1C8 B 0x35BE1D8
	0x035BE1CC LDRSW X9, [X10]
	0x035BE1D0 ADD X8, X8, X9, 0x4, LSL
	0x035BE1D4 ADD X0, X8, 0x138
	0x035BE1D8 LDP X8, X1, [X0]
	0x035BE1DC MOV X0, X20
	0x035BE1E0 BLR X8
	0x035BE1E4 CBZ X0, 0x35BE1F4
	0x035BE1E8 LDR X8, [X0]
	0x035BE1EC LDP X9, X1, [X8 + 0x1B8]
	0x035BE1F0 BLR X9
	0x035BE1F4 LDR X20, [X19 + 0x40]
	0x035BE1F8 CBZ X20, 0x35BE25C
	0x035BE1FC ADRP X10, 0xB35000
	0x035BE200 LDR X8, [X20]
	0x035BE204 LDR X10, [X10 + 0xE00]
	0x035BE208 LDRH W9, [X8 + 0x12E]
	0x035BE20C LDR X1, [X10]
	0x035BE210 CBZ X9, 0x35BE234
	0x035BE214 LDR X10, [X8 + 0xB0]
	0x035BE218 ADD X10, X10, 0x8
	0x035BE21C LDUR X11, [X10 - 0x8]
	0x035BE220 CMP X11, X1
	0x035BE224 B.EQ 0x35BE244
	0x035BE228 SUBS X9, X9, 0x1
	0x035BE22C ADD X10, X10, 0x10
	0x035BE230 B.NE 0x35BE21C
	0x035BE234 MOV X0, X20
	0x035BE238 MOV W2, W31
	0x035BE23C BL 0x1C5C788
	0x035BE240 B 0x35BE250
	0x035BE244 LDRSW X9, [X10]
	0x035BE248 ADD X8, X8, X9, 0x4, LSL
	0x035BE24C ADD X0, X8, 0x138
	0x035BE250 LDP X8, X1, [X0]
	0x035BE254 MOV X0, X20
	0x035BE258 BLR X8
	0x035BE25C MOV X0, X19
	0x035BE260 LDP X20, X19, [X31 + 0x10]
	0x035BE264 LDR X30, [X31], #0x20
	0x035BE268 B 0x35BD53C
	0x035BE26C STP X30, X21, [X31 - 0x20]!
	0x035BE270 STP X20, X19, [X31 + 0x10]
	0x035BE274 ADRP X19, 0xE22000
	0x035BE278 ADRP X21, 0xB35000
	0x035BE27C LDRB W8, [X19 + 0x14B]
	0x035BE280 LDR X21, [X21 + 0xAC8]
	0x035BE284 MOV X20, X0
	0x035BE288 TBNZ X8, 0x0, 0x35BE2C4
	0x035BE28C ADRP X0, 0xB35000
	0x035BE290 LDR X0, [X0 + 0xAC8]
	0x035BE294 BL 0x1C16CF4
	0x035BE298 ADRP X0, 0xB79000
	0x035BE29C LDR X0, [X0 + 0xB60]
	0x035BE2A0 BL 0x1C16CF4
	0x035BE2A4 ADRP X0, 0xB79000
	0x035BE2A8 LDR X0, [X0 + 0xB68]
	0x035BE2AC BL 0x1C16CF4
	0x035BE2B0 ADRP X0, 0xB35000
	0x035BE2B4 LDR X0, [X0 + 0x848]
	0x035BE2B8 BL 0x1C16CF4
	0x035BE2BC MOVZ W8, 0x1
	0x035BE2C0 STRB W8, [X19 + 0x14B]
	0x035BE2C4 LDR X0, [X21]
	0x035BE2C8 MOVZ W1, 0x5
	0x035BE2CC BL 0x1C16D6C
	0x035BE2D0 CBZ X0, 0x35BE380
	0x035BE2D4 LDR W8, [X0 + 0x18]
	0x035BE2D8 MOV X19, X0
	0x035BE2DC CBZ W8, 0x35BE37C
	0x035BE2E0 ADRP X8, 0xB79000
	0x035BE2E4 LDR X8, [X8 + 0xB60]
	0x035BE2E8 MOV X0, X20
	0x035BE2EC LDR X8, [X8]
	0x035BE2F0 STR X8, [X19 + 0x20]
	0x035BE2F4 BL 0x35BC7DC
	0x035BE2F8 LDR W8, [X19 + 0x18]
	0x035BE2FC CMP W8, 0x1
	0x035BE300 B.LS 0x35BE37C
	0x035BE304 CMP W8, 0x2
	0x035BE308 STR X0, [X19 + 0x28]
	0x035BE30C B.EQ 0x35BE37C
	0x035BE310 ADRP X8, 0xB79000
	0x035BE314 LDR X8, [X8 + 0xB68]
	0x035BE318 LDR X8, [X8]
	0x035BE31C STR X8, [X19 + 0x30]
	0x035BE320 LDR X0, [X20 + 0x38]
	0x035BE324 CBZ X0, 0x35BE380
	0x035BE328 MOV X1, X31
	0x035BE32C BL 0x33C4268
	0x035BE330 CBZ X0, 0x35BE380
	0x035BE334 LDR X8, [X0]
	0x035BE338 LDP X9, X1, [X8 + 0x1A8]
	0x035BE33C BLR X9
	0x035BE340 LDR W8, [X19 + 0x18]
	0x035BE344 CMP W8, 0x3
	0x035BE348 B.LS 0x35BE37C
	0x035BE34C CMP W8, 0x4
	0x035BE350 STR X0, [X19 + 0x38]
	0x035BE354 B.EQ 0x35BE37C
	0x035BE358 ADRP X8, 0xB35000
	0x035BE35C LDR X8, [X8 + 0x848]
	0x035BE360 MOV X0, X19
	0x035BE364 MOV X1, X31
	0x035BE368 LDR X8, [X8]
	0x035BE36C STR X8, [X19 + 0x40]
	0x035BE370 LDP X20, X19, [X31 + 0x10]
	0x035BE374 LDP X30, X21, [X31], #0x20
	0x035BE378 B 0x32278CC
	0x035BE37C BL 0x1C16F28
	0x035BE380 BL 0x1C16F20
	0x035BE384 RET
	0x035BE388 STR X30, [X31 - 0x10]!
	0x035BE38C LDR W9, [X0 + 0x10]
	0x035BE390 MOV W8, W31
	0x035BE394 CMP W9, 0x1
	0x035BE398 B.EQ 0x35BE3C4
	0x035BE39C CBNZ W9, 0x35BE3CC
	0x035BE3A0 LDR X8, [X0 + 0x28]
	0x035BE3A4 MOVN W9, 0x0
	0x035BE3A8 STR W9, [X0 + 0x10]
	0x035BE3AC CBZ X8, 0x35BE3D8
	0x035BE3B0 LDR X8, [X8 + 0x48]
	0x035BE3B4 MOVZ W9, 0x1
	0x035BE3B8 STR X8, [X0 + 0x18]
	0x035BE3BC MOVZ W8, 0x1
	0x035BE3C0 B 0x35BE3C8
	0x035BE3C4 MOVN W9, 0x0
	0x035BE3C8 STR W9, [X0 + 0x10]
	0x035BE3CC MOV W0, W8
	0x035BE3D0 LDR X30, [X31], #0x10
	0x035BE3D4 RET
	0x035BE3D8 BL 0x1C16F20
	0x035BE3DC LDR X0, [X0 + 0x18]
	0x035BE3E0 RET
	0x035BE3E4 STP X30, X19, [X31 - 0x10]!
	0x035BE3E8 ADRP X0, 0xB35000
	0x035BE3EC LDR X0, [X0 + 0xB40]
	0x035BE3F0 BL 0x1C16D08
	0x035BE3F4 BL 0x1C16F10
	0x035BE3F8 MOV X1, X31
	0x035BE3FC MOV X19, X0
	0x035BE400 BL 0x3380310
	0x035BE404 ADRP X0, 0xB79000
	0x035BE408 LDR X0, [X0 + 0xB70]
	0x035BE40C BL 0x1C16D08
	0x035BE410 MOV X1, X0
	0x035BE414 MOV X0, X19
	0x035BE418 BL 0x1C16DEC
	0x035BE41C LDR X0, [X0 + 0x18]
	0x035BE420 RET
	0x035BE424 STR X30, [X31 - 0x20]!
	0x035BE428 STP X20, X19, [X31 + 0x10]
	0x035BE42C ADRP X20, 0xE22000
	0x035BE430 LDRB W8, [X20 + 0x14C]
	0x035BE434 MOV X19, X0
	0x035BE438 TBNZ X8, 0x0, 0x35BE450
	0x035BE43C ADRP X0, 0xB79000
	0x035BE440 LDR X0, [X0 + 0xB58]
	0x035BE444 BL 0x1C16CF4
	0x035BE448 MOVZ W8, 0x1
	0x035BE44C STRB W8, [X20 + 0x14C]
	0x035BE450 LDR W8, [X19 + 0x10]
	0x035BE454 ADDS W31, W8, 0x2
	0x035BE458 B.NE 0x35BE478
	0x035BE45C LDR W20, [X19 + 0x20]
	0x035BE460 MOV X0, X31
	0x035BE464 BL 0x33C151C
	0x035BE468 CMP W20, W0
	0x035BE46C B.NE 0x35BE478
	0x035BE470 STR W31, [X19 + 0x10]
	0x035BE474 B 0x35BE4B0
	0x035BE478 ADRP X8, 0xB79000
	0x035BE47C LDR X8, [X8 + 0xB58]
	0x035BE480 LDR X0, [X8]
	0x035BE484 BL 0x1C16F10
	0x035BE488 MOV X1, X31
	0x035BE48C MOV X20, X0
	0x035BE490 BL 0x33BDD8C
	0x035BE494 MOV X0, X31
	0x035BE498 STR W31, [X20 + 0x10]
	0x035BE49C BL 0x33C151C
	0x035BE4A0 STR W0, [X20 + 0x20]
	0x035BE4A4 LDR X8, [X19 + 0x28]
	0x035BE4A8 MOV X19, X20
	0x035BE4AC STR X8, [X20 + 0x28]
	0x035BE4B0 MOV X0, X19
	0x035BE4B4 LDP X20, X19, [X31 + 0x10]
	0x035BE4B8 LDR X30, [X31], #0x20
	0x035BE4BC RET
	0x035BE4C0 B 0x35BE424
	0x035BE4C4 STR X30, [X31 - 0x30]!
	0x035BE4C8 STP X22, X21, [X31 + 0x10]
	0x035BE4CC STP X20, X19, [X31 + 0x20]
	0x035BE4D0 ADRP X22, 0xE22000
	0x035BE4D4 ADRP X21, 0xB35000
	0x035BE4D8 LDRB W8, [X22 + 0x14D]
	0x035BE4DC LDR X21, [X21 + 0x958]
	0x035BE4E0 MOV X20, X1
	0x035BE4E4 MOV X19, X0
	0x035BE4E8 TBNZ X8, 0x0, 0x35BE500
	0x035BE4EC ADRP X0, 0xB35000
	0x035BE4F0 LDR X0, [X0 + 0x958]
	0x035BE4F4 BL 0x1C16CF4
	0x035BE4F8 MOVZ W8, 0x1
	0x035BE4FC STRB W8, [X22 + 0x14D]
	0x035BE500 MOVZ W2, 0x1
	0x035BE504 MOV X0, X19
	0x035BE508 MOV X1, X20
	0x035BE50C BL 0x35BC984
	0x035BE510 LDR X0, [X21]
	0x035BE514 BL 0x1C16F10
	0x035BE518 CBZ X19, 0x35BE544
	0x035BE51C LDR X8, [X19]
	0x035BE520 MOV X1, X19
	0x035BE524 MOV X20, X0
	0x035BE528 LDR X2, [X8 + 0x1E0]
	0x035BE52C BL 0x35BC6F0
	0x035BE530 STR X20, [X19 + 0x38]
	0x035BE534 LDP X20, X19, [X31 + 0x20]
	0x035BE538 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0xE24000
	010 Move W8, [X22+320]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {83}
	018 Move X0, 0xB37000
	019 Move X0, [X0+1808]
	020 Call 0x1C17CF4
	021 Move X0, 0xB37000
	022 Move X0, [X0+1816]
	023 Call 0x1C17CF4
	024 Move X0, 0xB37000
	025 Move X0, [X0+1824]
	026 Call 0x1C17CF4
	027 Move X0, 0xB7B000
	028 Move X0, [X0+2760]
	029 Call 0x1C17CF4
	030 Move X0, 0xB7B000
	031 Move X0, [X0+2768]
	032 Call 0x1C17CF4
	033 Move X0, 0xB37000
	034 Move X0, [X0+3584]
	035 Call 0x1C17CF4
	036 Move X0, 0xB7B000
	037 Move X0, [X0+2776]
	038 Call 0x1C17CF4
	039 Move X0, 0xB7B000
	040 Move X0, [X0+2360]
	041 Call 0x1C17CF4
	042 Move X0, 0xB37000
	043 Move X0, [X0+3608]
	044 Call 0x1C17CF4
	045 Move X0, 0xB37000
	046 Move X0, [X0+1928]
	047 Call 0x1C17CF4
	048 Move X0, 0xB37000
	049 Move X0, [X0+2760]
	050 Call 0x1C17CF4
	051 Move X0, 0xB7B000
	052 Move X0, [X0+2784]
	053 Call 0x1C17CF4
	054 Move X0, 0xB7B000
	055 Move X0, [X0+2792]
	056 Call 0x1C17CF4
	057 Move X0, 0xB7B000
	058 Move X0, [X0+2744]
	059 Call 0x1C17CF4
	060 Move X0, 0xB3F000
	061 Move X0, [X0+2480]
	062 Call 0x1C17CF4
	063 Move X0, 0xB7B000
	064 Move X0, [X0+2800]
	065 Call 0x1C17CF4
	066 Move X0, 0xB7B000
	067 Move X0, [X0+2808]
	068 Call 0x1C17CF4
	069 Move X0, 0xB7B000
	070 Move X0, [X0+2720]
	071 Call 0x1C17CF4
	072 Move X0, 0xB37000
	073 Move X0, [X0+2224]
	074 Call 0x1C17CF4
	075 Move X0, 0xB7B000
	076 Move X0, [X0+2728]
	077 Call 0x1C17CF4
	078 Move X0, 0xB7B000
	079 Move X0, [X0+2816]
	080 Call 0x1C17CF4
	081 Move W8, 1
	082 Move [X22+320], W8
	083 Move W8, [X21+16]
	084 NotImplemented "Instruction CMP not yet implemented."
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X9, X21
	087 Move X9, [X9+48]
	088 Compare X9, 0
	089 JumpIfEqual {92}
	090 Move W10, [X9+16]
	091 NotImplemented "Instruction CMP not yet implemented."
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move X8, X21
	094 Move X8, [X8+48]
	095 Compare X8, 0
	096 JumpIfEqual {99}
	097 Move W9, [X8+16]
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move W8, 3
	100 Move X0, X21
	101 Move [X21+24], X19
	102 Move [X21+16], W8
	103 Call Command.get_minLogLevel, X0
	104 NotImplemented "Instruction CMP not yet implemented."
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move X8, 0xB37000
	107 Move X8, [X8+2760]
	108 Move W1, 5
	109 Move X0, [X8]
	110 Call 0x1C17D6C
	111 Compare X0, 0
	112 JumpIfEqual {470}
	113 Move W8, [X0+24]
	114 Move X22, X0
	115 Compare W8, 0
	116 JumpIfEqual {469}
	117 Move X8, 0xB7B000
	118 Move X8, [X8+2720]
	119 Move X0, X21
	120 Move X8, [X8]
	121 Move [X22+32], X8
	122 Call Command.get_identifier, X0
	123 Move W8, [X22+24]
	124 NotImplemented "Instruction CMP not yet implemented."
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Move [X22+40], X0
	127 Move X8, 0xB7B000
	128 Move X8, [X8+2808]
	129 Move X8, [X8]
	130 Move [X22+48], X8
	131 Compare X20, 0
	132 JumpIfEqual {470}
	133 Move X0, X20
	134 Call Command.get_identifier, X0
	135 Move W8, [X22+24]
	136 NotImplemented "Instruction CMP not yet implemented."
	137 NotImplemented "Instruction CMP not yet implemented."
	138 Move [X22+56], X0
	139 Move X8, 0xB3F000
	140 Move X8, [X8+2480]
	141 Move X0, X22
	142 Move X1, X31
	143 Move X8, [X8]
	144 Move [X22+64], X8
	145 Call String.Concat, X0
	146 Move X8, 0xB37000
	147 Move X8, [X8+1928]
	148 Move X22, X0
	149 Move X8, [X8]
	150 Move W9, [X8+224]
	151 Compare W9, 0
	152 JumpIfNotEqual {155}
	153 Move X0, X8
	154 Call 0x1C17DFC
	155 Move X8, 0xB7B000
	156 Move X9, 0xB7B000
	157 Move X8, [X8+2728]
	158 Move X9, [X9+2816]
	159 Move W0, 1024
	160 Move W5, 216
	161 Move X3, [X8]
	162 Move X4, [X9]
	163 Move X1, X22
	164 Move X2, X31
	165 Move X6, X31
	166 Call Log.Warning, X0, X1, X2, X3, X4, X5
	167 NotImplemented "Instruction CMP not yet implemented."
	168 Move X8, 0xB37000
	169 Move X8, [X8+2760]
	170 Move W1, 5
	171 Move X0, [X8]
	172 Call 0x1C17D6C
	173 Compare X0, 0
	174 JumpIfEqual {470}
	175 Move W8, [X0+24]
	176 Move X22, X0
	177 Compare W8, 0
	178 JumpIfEqual {469}
	179 Move X8, 0xB7A000
	180 Move X8, [X8+2720]
	181 Move X0, X21
	182 Move X8, [X8]
	183 Move [X22+32], X8
	184 Call Command.get_identifier, X0
	185 Move W8, [X22+24]
	186 NotImplemented "Instruction CMP not yet implemented."
	187 NotImplemented "Instruction CMP not yet implemented."
	188 Move [X22+40], X0
	189 Move X8, 0xB7A000
	190 Move X8, [X8+2800]
	191 Move X8, [X8]
	192 Move [X22+48], X8
	193 Compare X19, 0
	194 JumpIfEqual {470}
	195 Move X0, X19
	196 Move X1, X31
	197 Call Exception.GetType, X0
	198 Compare X0, 0
	199 JumpIfEqual {470}
	200 Move X8, [X0]
	201 Move X9, [X8+424]
	202 Move X1, [X8+432]
	203 NotImplemented "Instruction BLR not yet implemented."
	204 Move W8, [X22+24]
	205 NotImplemented "Instruction CMP not yet implemented."
	206 NotImplemented "Instruction CMP not yet implemented."
	207 Move [X22+56], X0
	208 Move X8, 0xB3E000
	209 Move X8, [X8+2480]
	210 Move X0, X22
	211 Move X1, X31
	212 Move X8, [X8]
	213 Move [X22+64], X8
	214 Call String.Concat, X0
	215 Move X8, 0xB36000
	216 Move X8, [X8+1824]
	217 Move X22, X0
	218 Move X8, [X8]
	219 Move X0, X8
	220 Call 0x1C17F10
	221 Move X8, 0xB36000
	222 Move X8, [X8+1816]
	223 Move X23, X0
	224 Move X1, [X8]
	225 Call Dictionary`2<Object, Object>..ctor, X0
	226 Move X0, X21
	227 Call Command.get_identifier, X0
	228 Compare X23, 0
	229 JumpIfEqual {470}
	230 Move X8, 0xB7A000
	231 Move X24, 0xB36000
	232 Move X8, [X8+2744]
	233 Move X24, [X24+1808]
	234 Move X2, X0
	235 Move X0, X23
	236 Move X1, [X8]
	237 Move X3, [X24]
	238 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	239 Move X8, 0xB36000
	240 Move X8, [X8+2224]
	241 Move X3, [X24]
	242 Move X0, X23
	243 Move X2, X21
	244 Move X1, [X8]
	245 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	246 Move X8, 0xB36000
	247 Move X8, [X8+1928]
	248 Move X0, [X8]
	249 Move W8, [X0+224]
	250 Compare W8, 0
	251 JumpIfNotEqual {253}
	252 Call 0x1C17DFC
	253 Move X8, 0xB7A000
	254 Move X9, 0xB7A000
	255 Move X8, [X8+2728]
	256 Move X9, [X9+2816]
	257 Move W0, 1024
	258 Move W6, 204
	259 Move X4, [X8]
	260 Move X5, [X9]
	261 Move X1, X22
	262 Move X2, X19
	263 Move X3, X23
	264 Move X7, X31
	265 Call Log.Error, X0, X1, X2, X3, X4, X5, X6
	266 Move X8, [X21]
	267 Move X0, X21
	268 Move X9, [X8+376]
	269 Move X1, [X8+384]
	270 NotImplemented "Instruction BLR not yet implemented."
	271 Move X25, 0xB7A000
	272 Move X25, [X25+2792]
	273 Move X22, X0
	274 Move X8, [X25]
	275 Move W9, [X8+224]
	276 Compare W9, 0
	277 JumpIfNotEqual {281}
	278 Move X0, X8
	279 Call 0x1C17DFC
	280 Move X8, [X25]
	281 Move X9, [X8+184]
	282 Move X23, [X9+8]
	283 Compare X23, 0
	284 JumpIfNotEqual {307}
	285 Move W9, [X8+224]
	286 Compare W9, 0
	287 JumpIfNotEqual {291}
	288 Move X0, X8
	289 Call 0x1C17DFC
	290 Move X8, [X25]
	291 Move X9, 0xB7A000
	292 Move X8, [X8+184]
	293 Move X9, [X9+2768]
	294 Move X24, [X8]
	295 Move X0, [X9]
	296 Call 0x1C17F10
	297 Move X8, 0xB7A000
	298 Move X8, [X8+2784]
	299 Move X1, X24
	300 Move X3, X31
	301 Move X23, X0
	302 Move X2, [X8]
	303 Call Func`2<Object, Boolean>..ctor, X0, X1, X2
	304 Move X8, [X25]
	305 Move X8, [X8+184]
	306 Move [X8+8], X23
	307 Move X8, 0xB7A000
	308 Move X8, [X8+2760]
	309 Move X0, X22
	310 Move X1, X23
	311 Move X2, [X8]
	312 Call Enumerable.Where, X0, X1
	313 Compare X0, 0
	314 JumpIfEqual {470}
	315 Move X10, 0xB7A000
	316 Move X8, [X0]
	317 Move X10, [X10+2776]
	318 Move X22, X0
	319 NotImplemented "Instruction LDRH not yet implemented."
	320 Move X1, [X10]
	321 Compare X9, 0
	322 JumpIfEqual {329}
	323 Move X10, [X8+176]
	324 Add X10, X10, 8
	325 NotImplemented "Instruction LDUR not yet implemented."
	326 NotImplemented "Instruction CMP not yet implemented."
	327 Subtract X9, X9, 1
	328 Add X10, X10, 16
	329 Move X0, X22
	330 Move W2, W31
	331 Call 0x1C5D788
	332 NotImplemented "Instruction LDRSW not yet implemented."
	333 Add X8, X8, X9
	334 Add X0, X8, 312
	335 Move X8, [X0]
	336 Move X1, [X0+8]
	337 Move X0, X22
	338 NotImplemented "Instruction BLR not yet implemented."
	339 Move X22, X0
	340 Compare X0, 0
	341 JumpIfEqual {471}
	342 Move X23, 0xB36000
	343 Move X24, 0xB7A000
	344 Move X23, [X23+3608]
	345 Move X24, [X24+2360]
	346 Move X8, [X22]
	347 Move X1, [X23]
	348 NotImplemented "Instruction LDRH not yet implemented."
	349 Compare X9, 0
	350 JumpIfEqual {357}
	351 Move X10, [X8+176]
	352 Add X10, X10, 8
	353 NotImplemented "Instruction LDUR not yet implemented."
	354 NotImplemented "Instruction CMP not yet implemented."
	355 Subtract X9, X9, 1
	356 Add X10, X10, 16
	357 Move X0, X22
	358 Move W2, W31
	359 Call 0x1C5D788
	360 NotImplemented "Instruction LDRSW not yet implemented."
	361 Add X8, X8, X9
	362 Add X0, X8, 312
	363 Move X8, [X0]
	364 Move X1, [X0+8]
	365 Move X0, X22
	366 NotImplemented "Instruction BLR not yet implemented."
	367 Move TEMP, X0
	368 And TEMP, TEMP, 1
	369 Compare TEMP, 1
	370 JumpIfNotEqual {397}
	371 Move X8, [X22]
	372 Move X1, [X24]
	373 NotImplemented "Instruction LDRH not yet implemented."
	374 Compare X9, 0
	375 JumpIfEqual {382}
	376 Move X10, [X8+176]
	377 Add X10, X10, 8
	378 NotImplemented "Instruction LDUR not yet implemented."
	379 NotImplemented "Instruction CMP not yet implemented."
	380 Subtract X9, X9, 1
	381 Add X10, X10, 16
	382 Move X0, X22
	383 Move W2, W31
	384 Call 0x1C5D788
	385 NotImplemented "Instruction LDRSW not yet implemented."
	386 Add X8, X8, X9
	387 Add X0, X8, 312
	388 Move X8, [X0]
	389 Move X1, [X0+8]
	390 Move X0, X22
	391 NotImplemented "Instruction BLR not yet implemented."
	392 Compare X0, 0
	393 JumpIfEqual {468}
	394 Move X1, X20
	395 Move X2, X19
	396 Call Command.Abort, X0, X1, X2
	397 Move X23, X31
	398 Compare X22, 0
	399 JumpIfEqual {423}
	400 Move X10, 0xB36000
	401 Move X8, [X22]
	402 Move X10, [X10+3584]
	403 NotImplemented "Instruction LDRH not yet implemented."
	404 Move X1, [X10]
	405 Compare X9, 0
	406 JumpIfEqual {413}
	407 Move X10, [X8+176]
	408 Add X10, X10, 8
	409 NotImplemented "Instruction LDUR not yet implemented."
	410 NotImplemented "Instruction CMP not yet implemented."
	411 Subtract X9, X9, 1
	412 Add X10, X10, 16
	413 Move X0, X22
	414 Move W2, W31
	415 Call 0x1C5D788
	416 NotImplemented "Instruction LDRSW not yet implemented."
	417 Add X8, X8, X9
	418 Add X0, X8, 312
	419 Move X8, [X0]
	420 Move X1, [X0+8]
	421 Move X0, X22
	422 NotImplemented "Instruction BLR not yet implemented."
	423 Compare X23, 0
	424 JumpIfNotEqual {472}
	425 Move X0, X21
	426 Call Command.InternalFinalize, X0
	427 Move W8, [X21+20]
	428 Compare W8, 0
	429 JumpIfEqual {449}
	430 Move X0, [X21+48]
	431 Compare X0, 0
	432 JumpIfEqual {449}
	433 Move W8, [X0+16]
	434 NotImplemented "Instruction CMP not yet implemented."
	435 NotImplemented "Instruction CMP not yet implemented."
	436 Move X9, X0
	437 Move X9, [X9+48]
	438 Compare X9, 0
	439 JumpIfEqual {442}
	440 Move W10, [X9+16]
	441 NotImplemented "Instruction CMP not yet implemented."
	442 NotImplemented "Instruction CMP not yet implemented."
	443 Move X8, X0
	444 Move X8, [X8+48]
	445 Compare X8, 0
	446 JumpIfEqual {458}
	447 Move W9, [X8+16]
	448 NotImplemented "Instruction CMP not yet implemented."
	449 Move X20, [X31+48]
	450 Move X19, [X31+56]
	451 Move X22, [X31+32]
	452 Move X21, [X31+40]
	453 Move X24, [X31+16]
	454 Move X23, [X31+24]
	455 Move X30, [X31+64]
	456 Move X25, [X31+72]
	457 Return 
	458 Move X1, X20
	459 Move X2, X19
	460 Move X20, [X31+48]
	461 Move X19, [X31+56]
	462 Move X22, [X31+32]
	463 Move X21, [X31+40]
	464 Move X24, [X31+16]
	465 Move X23, [X31+24]
	466 Move X30, [X31+64]
	467 Move X25, [X31+72]
	468 Call 0x1C17F20
	469 Call 0x1C17F28
	470 Call 0x1C17F20
	471 Call 0x1C17F20
	472 Move X0, X23
	473 Call 0x1C17F18
	474 Move X24, X0
	475 NotImplemented "Instruction CMP not yet implemented."
	476 Move X0, X24
	477 Call 0x3EB2AD0
	478 Move X23, [X0]
	479 Call 0x3EB2AE0
	480 Move X23, X31
	481 Move X24, X0
	482 Compare X22, 0
	483 JumpIfEqual {507}
	484 Move X10, 0xB36000
	485 Move X8, [X22]
	486 Move X10, [X10+3584]
	487 NotImplemented "Instruction LDRH not yet implemented."
	488 Move X1, [X10]
	489 Compare X9, 0
	490 JumpIfEqual {497}
	491 Move X10, [X8+176]
	492 Add X10, X10, 8
	493 NotImplemented "Instruction LDUR not yet implemented."
	494 NotImplemented "Instruction CMP not yet implemented."
	495 Subtract X9, X9, 1
	496 Add X10, X10, 16
	497 Move X0, X22
	498 Move W2, W31
	499 Call 0x1C5D788
	500 NotImplemented "Instruction LDRSW not yet implemented."
	501 Add X8, X8, X9
	502 Add X0, X8, 312
	503 Move X8, [X0]
	504 Move X1, [X0+8]
	505 Move X0, X22
	506 NotImplemented "Instruction BLR not yet implemented."
	507 Compare X23, 0
	508 JumpIfNotEqual {511}
	509 Move X0, X24
	510 Call 0x1D2D690
	511 Move X0, X23
	512 Call 0x1C17F18
	513 Call 0x1991590

Method: System.Void Cancel()

Disassembly:
	0x035BE53C LDR X30, [X31], #0x30
	0x035BE540 RET
	0x035BE544 BL 0x1C16F20
	0x035BE548 STR X30, [X31 - 0x60]!
	0x035BE54C STP X28, X27, [X31 + 0x10]
	0x035BE550 STP X26, X25, [X31 + 0x20]
	0x035BE554 STP X24, X23, [X31 + 0x30]
	0x035BE558 STP X22, X21, [X31 + 0x40]
	0x035BE55C STP X20, X19, [X31 + 0x50]
	0x035BE560 ADRP X20, 0xE22000
	0x035BE564 LDRB W8, [X20 + 0x14E]
	0x035BE568 MOV X19, X0
	0x035BE56C TBNZ X8, 0x0, 0x35BE608
	0x035BE570 ADRP X0, 0xB79000
	0x035BE574 LDR X0, [X0 + 0xB78]
	0x035BE578 BL 0x1C16CF4
	0x035BE57C ADRP X0, 0xB35000
	0x035BE580 LDR X0, [X0 + 0xEB0]
	0x035BE584 BL 0x1C16CF4
	0x035BE588 ADRP X0, 0xB35000
	0x035BE58C LDR X0, [X0 + 0xEB8]
	0x035BE590 BL 0x1C16CF4
	0x035BE594 ADRP X0, 0xB5E000
	0x035BE598 LDR X0, [X0 + 0xD60]
	0x035BE59C BL 0x1C16CF4
	0x035BE5A0 ADRP X0, 0xB5E000
	0x035BE5A4 LDR X0, [X0 + 0xD68]
	0x035BE5A8 BL 0x1C16CF4
	0x035BE5AC ADRP X0, 0xB35000
	0x035BE5B0 LDR X0, [X0 + 0xEC0]
	0x035BE5B4 BL 0x1C16CF4
	0x035BE5B8 ADRP X0, 0xB79000
	0x035BE5BC LDR X0, [X0 + 0xB80]
	0x035BE5C0 BL 0x1C16CF4
	0x035BE5C4 ADRP X0, 0xB79000
	0x035BE5C8 LDR X0, [X0 + 0xB88]
	0x035BE5CC BL 0x1C16CF4
	0x035BE5D0 ADRP X0, 0xB35000
	0x035BE5D4 LDR X0, [X0 + 0x838]
	0x035BE5D8 BL 0x1C16CF4
	0x035BE5DC ADRP X0, 0xB35000
	0x035BE5E0 LDR X0, [X0 + 0xEC8]
	0x035BE5E4 BL 0x1C16CF4
	0x035BE5E8 ADRP X0, 0xB35000
	0x035BE5EC LDR X0, [X0 + 0x988]
	0x035BE5F0 BL 0x1C16CF4
	0x035BE5F4 ADRP X0, 0xB35000
	0x035BE5F8 LDR X0, [X0 + 0x848]
	0x035BE5FC BL 0x1C16CF4
	0x035BE600 MOVZ W8, 0x1
	0x035BE604 STRB W8, [X20 + 0x14E]
	0x035BE608 MOV X0, X19
	0x035BE60C MOV X1, X31
	0x035BE610 BL 0x33BE520
	0x035BE614 CBZ X0, 0x35BE7DC
	0x035BE618 LDR X8, [X0]
	0x035BE61C ADRP X24, 0xB79000
	0x035BE620 MOVZ W1, 0x34
	0x035BE624 LDR X9, [X8 + 0x688]
	0x035BE628 LDR X2, [X8 + 0x690]
	0x035BE62C LDR X24, [X24 + 0xB88]
	0x035BE630 BLR X9
	0x035BE634 LDR X8, [X24]
	0x035BE638 MOV X20, X0
	0x035BE63C LDR W9, [X8 + 0xE0]
	0x035BE640 CBNZ W9, 0x35BE650
	0x035BE644 MOV X0, X8
	0x035BE648 BL 0x1C16DFC
	0x035BE64C LDR X8, [X24]
	0x035BE650 LDR X9, [X8 + 0xB8]
	0x035BE654 ADRP X28, 0xB5E000
	0x035BE658 ADRP X27, 0xB35000
	0x035BE65C ADRP X26, 0xB79000
	0x035BE660 ADRP X25, 0xB35000
	0x035BE664 ADRP X23, 0xB35000
	0x035BE668 LDR X28, [X28 + 0xD60]
	0x035BE66C LDR X21, [X9 + 0x8]
	0x035BE670 LDR X27, [X27 + 0xEC0]
	0x035BE674 LDR X26, [X26 + 0xB78]
	0x035BE678 LDR X25, [X25 + 0xEB0]
	0x035BE67C LDR X23, [X23 + 0xEB8]
	0x035BE680 CBNZ X21, 0x35BE6D8
	0x035BE684 LDR W9, [X8 + 0xE0]
	0x035BE688 CBNZ W9, 0x35BE698
	0x035BE68C MOV X0, X8
	0x035BE690 BL 0x1C16DFC
	0x035BE694 LDR X8, [X24]
	0x035BE698 ADRP X9, 0xB5E000
	0x035BE69C LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xE23000
	005 Move W8, [X20+321]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {28}
	011 Move X0, 0xB36000
	012 Move X0, [X0+1928]
	013 Call 0x1C17CF4
	014 Move X0, 0xB7A000
	015 Move X0, [X0+2720]
	016 Call 0x1C17CF4
	017 Move X0, 0xB7A000
	018 Move X0, [X0+2824]
	019 Call 0x1C17CF4
	020 Move X0, 0xB7A000
	021 Move X0, [X0+2728]
	022 Call 0x1C17CF4
	023 Move X0, 0xB7A000
	024 Move X0, [X0+2832]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+321], W8
	028 Move W8, [X19+16]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X9, X19
	032 Move X9, [X9+48]
	033 Compare X9, 0
	034 JumpIfEqual {37}
	035 Move W10, [X9+16]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X8, X19
	039 Move X8, [X8+48]
	040 Compare X8, 0
	041 JumpIfEqual {44}
	042 Move W9, [X8+16]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move W8, 2
	045 Move X0, X19
	046 Move [X19+16], W8
	047 Call Command.InternalFinalize, X0
	048 Move X0, X19
	049 Call Command.get_minLogLevel, X0
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Return 
	055 Move X0, X19
	056 Call Command.get_identifier, X0
	057 Move X8, 0xB7A000
	058 Move X8, [X8+2720]
	059 Move X9, 0xB7A000
	060 Move X9, [X9+2832]
	061 Move X1, X0
	062 Move X8, [X8]
	063 Move X3, X31
	064 Move X2, [X9]
	065 Move X0, X8
	066 Call String.Concat, X0, X1, X2
	067 Move X8, 0xB36000
	068 Move X8, [X8+1928]
	069 Move X19, X0
	070 Move X8, [X8]
	071 Move W9, [X8+224]
	072 Compare W9, 0
	073 JumpIfNotEqual {76}
	074 Move X0, X8
	075 Call 0x1C17DFC
	076 Move X8, 0xB7A000
	077 Move X9, 0xB7A000
	078 Move X8, [X8+2728]
	079 Move X9, [X9+2824]
	080 Move X1, X19
	081 Move X20, [X31+16]
	082 Move X19, [X31+24]
	083 Move X3, [X8]
	084 Move X4, [X9]
	085 Move W0, 1024
	086 Move W5, 247
	087 Move X2, X31
	088 Move X6, X31
	089 Move X30, [X31+32]
	090 Call Log.Debug, X0, X1, X2, X3, X4, X5
	091 Return 

Method: System.Void InternalFinalize()

Disassembly:
	0x035BDB58 LDP X20, X19, [X31 + 0x10]
	0x035BDB5C LDR X30, [X31], #0x20
	0x035BDB60 RET
	0x035BDB64 B 0x35BDAD4
	0x035BDB68 STP X30, X19, [X31 - 0x10]!
	0x035BDB6C LDR X8, [X0 + 0x38]
	0x035BDB70 CBZ X8, 0x35BDBA8
	0x035BDB74 MOV X19, X0
	0x035BDB78 LDR X9, [X8 + 0x18]
	0x035BDB7C LDR X0, [X8 + 0x40]
	0x035BDB80 LDR X1, [X8 + 0x28]
	0x035BDB84 BLR X9
	0x035BDB88 ANDS W31, W0, 0x1
	0x035BDB8C MOVZ W8, 0x48
	0x035BDB90 MOVZ W9, 0x40
	0x035BDB94 CSEL X8, X9, X8, NE
	0x035BDB98 LDR X8, [X19, X8, LSL]
	0x035BDB9C STR X8, [X19 + 0x50]
	0x035BDBA0 LDP X30, X19, [X31], #0x10
	0x035BDBA4 RET
	0x035BDBA8 BL 0x1C16F20
	0x035BDBAC STR X30, [X31 - 0x10]!
	0x035BDBB0 LDR X0, [X0 + 0x50]
	0x035BDBB4 CBZ X0, 0x35BDBC0
	0x035BDBB8 BL 0x35BA238
	0x035BDBBC TBZ X0, 0x0, 0x35BDBC8
	0x035BDBC0 MOVZ W0, 0x1
	0x035BDBC4 B 0x35BDBCC
	0x035BDBC8 MOV W0, W31
	0x035BDBCC LDR X30, [X31], #0x10
	0x035BDBD0 RET
	0x035BDBD4 STP X30, X21, [X31 - 0x20]!
	0x035BDBD8 STP X20, X19, [X31 + 0x10]
	0x035BDBDC ADRP X19, 0xE23000
	0x035BDBE0 ADRP X21, 0xB36000
	0x035BDBE4 LDRB W8, [X19 + 0x147]
	0x035BDBE8 LDR X21, [X21 + 0x9D0]
	0x035BDBEC MOV X20, X0
	0x035BDBF0 TBNZ X8, 0x0, 0x35BDC20
	0x035BDBF4 ADRP X0, 0xB36000
	0x035BDBF8 LDR X0, [X0 + 0x9D0]
	0x035BDBFC BL 0x1C16CF4
	0x035BDC00 ADRP X0, 0xB7A000
	0x035BDC04 LDR X0, [X0 + 0xB48]
	0x035BDC08 BL 0x1C16CF4
	0x035BDC0C ADRP X0, 0xB7A000
	0x035BDC10 LDR X0, [X0 + 0xB50]
	0x035BDC14 BL 0x1C16CF4
	0x035BDC18 MOVZ W8, 0x1
	0x035BDC1C STRB W8, [X19 + 0x147]
	0x035BDC20 LDR X0, [X21]
	0x035BDC24 MOVZ W1, 0x5
	0x035BDC28 BL 0x1C16D6C
	0x035BDC2C CBZ X0, 0x35BDD60
	0x035BDC30 ADRP X21, 0xB7A000
	0x035BDC34 LDR X21, [X21 + 0xB50]
	0x035BDC38 MOV X19, X0
	0x035BDC3C LDR X0, [X21]
	0x035BDC40 CBZ X0, 0x35BDC54
	0x035BDC44 LDR X8, [X19]
	0x035BDC48 LDR X1, [X8 + 0x40]
	0x035BDC4C BL 0x1C16E00
	0x035BDC50 CBZ X0, 0x35BDD64
	0x035BDC54 LDR W8, [X19 + 0x18]
	0x035BDC58 CBZ W8, 0x35BDD5C
	0x035BDC5C LDR X8, [X21]
	0x035BDC60 MOV X0, X20
	0x035BDC64 STR X8, [X19 + 0x20]
	0x035BDC68 BL 0x35BC7DC
	0x035BDC6C MOV X21, X0
	0x035BDC70 CBZ X0, 0x35BDC88
	0x035BDC74 LDR X8, [X19]
	0x035BDC78 MOV X0, X21
	0x035BDC7C LDR X1, [X8 + 0x40]
	0x035BDC80 BL 0x1C16E00
	0x035BDC84 CBZ X0, 0x35BDD64
	0x035BDC88 LDR W8, [X19 + 0x18]
	0x035BDC8C CMP W8, 0x1
	0x035BDC90 B.LS 0x35BDD5C
	0x035BDC94 STR X21, [X19 + 0x28]
	0x035BDC98 LDR X0, [X20 + 0x38]
	0x035BDC9C CBZ X0, 0x35BDD60
	0x035BDCA0 MOV X1, X31
	0x035BDCA4 BL 0x33C4268
	0x035BDCA8 CBZ X0, 0x35BDD60
	0x035BDCAC LDR X8, [X0]
	0x035BDCB0 LDP X9, X1, [X8 + 0x1A8]
	0x035BDCB4 BLR X9
	0x035BDCB8 MOV X21, X0
	0x035BDCBC CBZ X0, 0x35BDCD4
	0x035BDCC0 LDR X8, [X19]
	0x035BDCC4 MOV X0, X21
	0x035BDCC8 LDR X1, [X8 + 0x40]
	0x035BDCCC BL 0x1C16E00
	0x035BDCD0 CBZ X0, 0x35BDD64
	0x035BDCD4 LDR W8, [X19 + 0x18]
	0x035BDCD8 CMP W8, 0x2
	0x035BDCDC B.LS 0x35BDD5C
	0x035BDCE0 STR X21, [X19 + 0x30]
	0x035BDCE4 LDR X21, [X20 + 0x40]
	0x035BDCE8 CBZ X21, 0x35BDD04
	0x035BDCEC LDR X8, [X19]
	0x035BDCF0 MOV X0, X21
	0x035BDCF4 LDR X1, [X8 + 0x40]
	0x035BDCF8 BL 0x1C16E00
	0x035BDCFC CBZ X0, 0x35BDD64
	0x035BDD00 LDR W8, [X19 + 0x18]
	0x035BDD04 CMP W8, 0x3
	0x035BDD08 B.LS 0x35BDD5C
	0x035BDD0C STR X21, [X19 + 0x38]
	0x035BDD10 LDR X20, [X20 + 0x48]
	0x035BDD14 CBZ X20, 0x35BDD30
	0x035BDD18 LDR X8, [X19]
	0x035BDD1C MOV X0, X20
	0x035BDD20 LDR X1, [X8 + 0x40]
	0x035BDD24 BL 0x1C16E00
	0x035BDD28 CBZ X0, 0x35BDD64
	0x035BDD2C LDR W8, [X19 + 0x18]
	0x035BDD30 CMP W8, 0x4
	0x035BDD34 B.LS 0x35BDD5C
	0x035BDD38 ADRP X8, 0xB7A000
	0x035BDD3C LDR X8, [X8 + 0xB48]
	0x035BDD40 STR X20, [X19 + 0x40]
	0x035BDD44 MOV X1, X19
	0x035BDD48 LDP X20, X19, [X31 + 0x10]
	0x035BDD4C LDR X0, [X8]
	0x035BDD50 MOV X2, X31

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X8, [X0]
	010 Move X19, X0
	011 Move X9, [X8+424]
	012 Move X1, [X8+432]
	013 NotImplemented "Instruction BLR not yet implemented."
	014 Move X20, [X31+48]
	015 Move X19, [X31+56]
	016 Move X22, [X31+32]
	017 Move X21, [X31+40]
	018 Move X24, [X31+16]
	019 Move X23, [X31+24]
	020 Move X30, [X31+64]
	021 Move X25, [X31+72]
	022 Return 
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X20, X0
	025 Move X0, X20
	026 Call 0x3EB2AD0
	027 Move X20, X0
	028 Move X0, 0xB37000
	029 Move X0, [X0+2000]
	030 Call 0x1C17D08
	031 Move X8, [X20]
	032 Move X1, [X8]
	033 Call 0x1C18270
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {131}
	038 Move X20, [X20]
	039 Call 0x3EB2AE0
	040 Move X0, X19
	041 Call Command.get_minLogLevel, X0
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X0, X19
	044 Call Command.get_identifier, X0
	045 Move X21, X0
	046 Move X0, 0xB7B000
	047 Move X0, [X0+2720]
	048 Call 0x1C17D08
	049 Move X22, X0
	050 Move X0, 0xB7B000
	051 Move X0, [X0+2736]
	052 Call 0x1C17D08
	053 Move X2, X0
	054 Move X0, X22
	055 Move X1, X21
	056 Move X3, X31
	057 Call String.Concat, X0, X1, X2
	058 Move X21, X0
	059 Move X0, 0xB37000
	060 Move X0, [X0+1824]
	061 Call 0x1C17D08
	062 Call 0x1C17F10
	063 Move X22, X0
	064 Move X0, 0xB37000
	065 Move X0, [X0+1816]
	066 Call 0x1C17D08
	067 Move X1, X0
	068 Move X0, X22
	069 Call Dictionary`2<Object, Object>..ctor, X0
	070 Move X0, X19
	071 Call Command.get_identifier, X0
	072 Compare X22, 0
	073 JumpIfEqual {139}
	074 Move X23, X0
	075 Move X0, 0xB7B000
	076 Move X0, [X0+2744]
	077 Call 0x1C17D08
	078 Move X25, 0xB37000
	079 Move X25, [X25+1808]
	080 Move X24, X0
	081 Move X0, X25
	082 Call 0x1C17D08
	083 Move X3, X0
	084 Move X0, X22
	085 Move X1, X24
	086 Move X2, X23
	087 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	088 Move X0, 0xB37000
	089 Move X0, [X0+2224]
	090 Call 0x1C17D08
	091 Move X23, X0
	092 Move X0, X25
	093 Call 0x1C17D08
	094 Move X3, X0
	095 Move X0, X22
	096 Move X1, X23
	097 Move X2, X19
	098 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	099 Move X0, 0xB37000
	100 Move X0, [X0+1928]
	101 Call 0x1C17D08
	102 Move W8, [X0+224]
	103 Compare W8, 0
	104 JumpIfNotEqual {106}
	105 Call 0x1C17DFC
	106 Move X0, 0xB7B000
	107 Move X0, [X0+2728]
	108 Call 0x1C17D08
	109 Move X19, X0
	110 Move X0, 0xB7B000
	111 Move X0, [X0+2752]
	112 Call 0x1C17D08
	113 Move X1, X21
	114 Move X2, X20
	115 Move X3, X22
	116 Move X4, X19
	117 Move X20, [X31+48]
	118 Move X19, [X31+56]
	119 Move X22, [X31+32]
	120 Move X21, [X31+40]
	121 Move X24, [X31+16]
	122 Move X23, [X31+24]
	123 Move X5, X0
	124 Move W0, 1024
	125 Move W6, 261
	126 Move X7, X31
	127 Move X30, [X31+64]
	128 Move X25, [X31+72]
	129 Call Log.Error, X0, X1, X2, X3, X4, X5, X6
	130 Return 
	131 Move W0, 8
	132 Call 0x3EB2AF0
	133 Move X8, [X20]
	134 Move [X0], X8
	135 Move X1, 0x8F8000
	136 Add X1, X1, 3672
	137 Move X2, X31
	138 Call 0x3EB2B00
	139 Call 0x1C17F20
	140 Move X20, X0
	141 Call 0x3EB2AE0
	142 Move X0, X20
	143 Call 0x1D2D690
	144 Call 0x1991590

Method: SpatialSys.CommandLib.Command op_Implicit(UnityEngine.AsyncOperation asyncOperation)

Disassembly:
	0x035BE6A0 LDR X9, [X9 + 0xD68]
	0x035BE6A4 LDR X22, [X8]
	0x035BE6A8 LDR X0, [X9]
	0x035BE6AC BL 0x1C16F10
	0x035BE6B0 ADRP X8, 0xB79000
	0x035BE6B4 LDR X8, [X8 + 0xB80]
	0x035BE6B8 MOV X1, X22
	0x035BE6BC MOV X3, X31
	0x035BE6C0 MOV X21, X0
	0x035BE6C4 LDR X2, [X8]
	0x035BE6C8 BL 0x2D2F428
	0x035BE6CC LDR X8, [X24]
	0x035BE6D0 LDR X8, [X8 + 0xB8]
	0x035BE6D4 STR X21, [X8 + 0x8]
	0x035BE6D8 LDR X2, [X28]
	0x035BE6DC MOV X0, X20
	0x035BE6E0 MOV X1, X21
	0x035BE6E4 BL 0x21DA490
	0x035BE6E8 LDR X8, [X27]
	0x035BE6EC MOV X20, X0
	0x035BE6F0 MOV X0, X8
	0x035BE6F4 BL 0x1C16F10
	0x035BE6F8 LDR X2, [X26]
	0x035BE6FC MOV X1, X19
	0x035BE700 MOV X3, X31
	0x035BE704 MOV X21, X0
	0x035BE708 BL 0x2D30578
	0x035BE70C LDR X2, [X25]
	0x035BE710 MOV X0, X20
	0x035BE714 MOV X1, X21
	0x035BE718 BL 0x21CF224
	0x035BE71C LDR X1, [X23]
	0x035BE720 BL 0x21D577C
	0x035BE724 CBZ X0, 0x35BE7DC
	0x035BE728 LDR X21, [X0 + 0x18]
	0x035BE72C MOV X20, X0
	0x035BE730 MOV X0, X19
	0x035BE734 MOV X1, X31
	0x035BE738 BL 0x33BE520
	0x035BE73C CBZ X0, 0x35BE7DC
	0x035BE740 LDR X8, [X0]
	0x035BE744 LDP X9, X1, [X8 + 0x1A8]
	0x035BE748 BLR X9
	0x035BE74C MOV X19, X0
	0x035BE750 CBZ X21, 0x35BE7AC
	0x035BE754 ADRP X8, 0xB35000
	0x035BE758 LDR X8, [X8 + 0x838]
	0x035BE75C ADRP X21, 0xB35000
	0x035BE760 ADRP X22, 0xB35000
	0x035BE764 MOV X1, X20
	0x035BE768 LDR X0, [X8]
	0x035BE76C LDR X21, [X21 + 0xEC8]
	0x035BE770 LDR X22, [X22 + 0x848]
	0x035BE774 MOV X2, X31
	0x035BE778 BL 0x3227FF8
	0x035BE77C LDR X1, [X21]
	0x035BE780 LDR X3, [X22]
	0x035BE784 MOV X2, X0
	0x035BE788 MOV X0, X19
	0x035BE78C LDP X20, X19, [X31 + 0x50]
	0x035BE790 LDP X22, X21, [X31 + 0x40]
	0x035BE794 LDP X24, X23, [X31 + 0x30]
	0x035BE798 LDP X26, X25, [X31 + 0x20]
	0x035BE79C LDP X28, X27, [X31 + 0x10]
	0x035BE7A0 MOV X4, X31
	0x035BE7A4 LDR X30, [X31], #0x60

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xE23000
	007 Move X21, 0xB7A000
	008 Move W8, [X20+322]
	009 Move X21, [X21+2840]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0xB36000
	016 Move X0, [X0+2912]
	017 Call 0x1C17CF4
	018 Move X0, 0xB7A000
	019 Move X0, [X0+2848]
	020 Call 0x1C17CF4
	021 Move X0, 0xB7A000
	022 Move X0, [X0+2840]
	023 Call 0x1C17CF4
	024 Move X0, 0xB36000
	025 Move X0, [X0+3400]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+322], W8
	029 Move X0, [X21]
	030 Call 0x1C17F10
	031 Move X1, X31
	032 Move X20, X0
	033 Call Object..ctor, X0
	034 Compare X20, 0
	035 JumpIfEqual {77}
	036 Move [X20+16], X19
	037 Compare X19, 0
	038 JumpIfEqual {77}
	039 Move X0, X19
	040 Move X1, X31
	041 Call "il2cpp_vm_object_is_inst", X0
	042 Compare X0, 0
	043 JumpIfEqual {77}
	044 Move X8, [X0]
	045 Move X19, 0xB36000
	046 Move X21, 0xB7A000
	047 Move X22, 0xB36000
	048 Move X9, [X8+424]
	049 Move X1, [X8+432]
	050 Move X19, [X19+2912]
	051 Move X21, [X21+2848]
	052 Move X22, [X22+3400]
	053 NotImplemented "Instruction BLR not yet implemented."
	054 Move X8, [X19]
	055 Move X19, X0
	056 Move X0, X8
	057 Call 0x1C17F10
	058 Move X2, [X21]
	059 Move X1, X20
	060 Move X21, X0
	061 Call CommandConditionEval..ctor, X0, X1, X2
	062 Move X0, [X22]
	063 Call 0x1C17F10
	064 Move W2, 1
	065 Move X1, X19
	066 Move X20, X0
	067 Call Command..ctor, X0, X1, X2
	068 Move [X20+56], W31
	069 Move [X20+64], X21
	070 Move X0, X20
	071 Move X20, [X31+32]
	072 Move X19, [X31+40]
	073 Move X22, [X31+16]
	074 Move X21, [X31+24]
	075 Move X30, [X31+48]
	076 Return X0
	077 Call 0x1C17F20

Method: SpatialSys.CommandLib.Command op_Implicit(SpatialSys.CommandLib.CommandHandle commandHandle)

Disassembly:
	0x035BE7B0 LDR X8, [X8 + 0x988]
	0x035BE7B4 CMP X19, 0x0
	0x035BE7B8 LDP X22, X21, [X31 + 0x40]
	0x035BE7BC LDP X24, X23, [X31 + 0x30]
	0x035BE7C0 LDR X8, [X8]
	0x035BE7C4 LDP X26, X25, [X31 + 0x20]
	0x035BE7C8 LDP X28, X27, [X31 + 0x10]
	0x035BE7CC CSEL X0, X8, X19, EQ
	0x035BE7D0 LDP X20, X19, [X31 + 0x50]
	0x035BE7D4 LDR X30, [X31], #0x60
	0x035BE7D8 RET
	0x035BE7DC BL 0x1C16F20
	0x035BE7E0 STR X30, [X31 - 0x20]!
	0x035BE7E4 STP X20, X19, [X31 + 0x10]
	0x035BE7E8 ADRP X20, 0xE22000
	0x035BE7EC LDRB W8, [X20 + 0x14F]
	0x035BE7F0 MOV X19, X0
	0x035BE7F4 TBNZ X8, 0x0, 0x35BE830
	0x035BE7F8 ADRP X0, 0xB35000
	0x035BE7FC LDR X0, [X0 + 0xED0]
	0x035BE800 BL 0x1C16CF4
	0x035BE804 ADRP X0, 0xB35000
	0x035BE808 LDR X0, [X0 + 0xED8]
	0x035BE80C BL 0x1C16CF4
	0x035BE810 ADRP X0, 0xB35000
	0x035BE814 LDR X0, [X0 + 0xEE0]
	0x035BE818 BL 0x1C16CF4
	0x035BE81C ADRP X0, 0xB35000
	0x035BE820 LDR X0, [X0 + 0xEE8]
	0x035BE824 BL 0x1C16CF4
	0x035BE828 MOVZ W8, 0x1
	0x035BE82C STRB W8, [X20 + 0x14F]
	0x035BE830 CBZ X19, 0x35BE8E0
	0x035BE834 LDR X8, [X19]
	0x035BE838 MOV X0, X19
	0x035BE83C LDP X9, X1, [X8 + 0x1A8]
	0x035BE840 BLR X9
	0x035BE844 CBZ X0, 0x35BE8E0
	0x035BE848 ADRP X8, 0xB35000
	0x035BE84C LDR X8, [X8 + 0xED0]
	0x035BE850 MOVZ W2, 0x5
	0x035BE854 MOV X3, X31
	0x035BE858 MOV X19, X0
	0x035BE85C LDR X1, [X8]
	0x035BE860 BL 0x322BD40
	0x035BE864 TBZ X0, 0x1F, 0x35BE8A8
	0x035BE868 ADRP X8, 0xB35000
	0x035BE86C LDR X8, [X8 + 0xEE0]
	0x035BE870 MOVZ W2, 0x5
	0x035BE874 MOV X0, X19
	0x035BE878 MOV X3, X31
	0x035BE87C LDR X1, [X8]
	0x035BE880 BL 0x322BD40
	0x035BE884 TBZ X0, 0x1F, 0x35BE8A8
	0x035BE888 ADRP X8, 0xB35000
	0x035BE88C LDR X8, [X8 + 0xEE8]
	0x035BE890 MOVZ W2, 0x5
	0x035BE894 MOV X0, X19
	0x035BE898 MOV X3, X31
	0x035BE89C LDR X1, [X8]
	0x035BE8A0 BL 0x322BD40
	0x035BE8A4 TBNZ X0, 0x1F, 0x35BE8B8
	0x035BE8A8 MOVZ W0, 0x1
	0x035BE8AC LDP X20, X19, [X31 + 0x10]
	0x035BE8B0 LDR X30, [X31], #0x20
	0x035BE8B4 RET
	0x035BE8B8 ADRP X8, 0xB35000
	0x035BE8BC LDR X8, [X8 + 0xED8]
	0x035BE8C0 MOVZ W2, 0x5
	0x035BE8C4 MOV X0, X19
	0x035BE8C8 MOV X3, X31
	0x035BE8CC LDR X1, [X8]
	0x035BE8D0 BL 0x322BD40
	0x035BE8D4 ORN W8, W31, W0, 0x0
	0x035BE8D8 UBFM W0, W8, 0x1F, 0x1F
	0x035BE8DC B 0x35BE8AC
	0x035BE8E0 BL 0x1C16F20
	0x035BE8E4 STP X30, X23, [X31 - 0x30]!
	0x035BE8E8 STP X22, X21, [X31 + 0x10]
	0x035BE8EC STP X20, X19, [X31 + 0x20]
	0x035BE8F0 ADRP X21, 0xE22000
	0x035BE8F4 LDRB W8, [X21 + 0x150]
	0x035BE8F8 MOV X19, X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xE23000
	007 Move X21, 0xB7A000
	008 Move W8, [X19+323]
	009 Move X21, [X21+2856]
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {32}
	015 Move X0, 0xB36000
	016 Move X0, [X0+2912]
	017 Call 0x1C17CF4
	018 Move X0, 0xB7A000
	019 Move X0, [X0+2864]
	020 Call 0x1C17CF4
	021 Move X0, 0xB7A000
	022 Move X0, [X0+2856]
	023 Call 0x1C17CF4
	024 Move X0, 0xB7A000
	025 Move X0, [X0+2528]
	026 Call 0x1C17CF4
	027 Move X0, 0xB36000
	028 Move X0, [X0+3400]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X19+323], W8
	032 Move X0, [X21]
	033 Call 0x1C17F10
	034 Move X1, X31
	035 Move X19, X0
	036 Call Object..ctor, X0
	037 Compare X19, 0
	038 JumpIfEqual {96}
	039 Move [X19+16], X20
	040 Compare X20, 0
	041 JumpIfEqual {96}
	042 Move X0, X20
	043 Call CommandHandle.get_command, X0
	044 Compare X0, 0
	045 JumpIfEqual {82}
	046 Move X0, [X19+16]
	047 Compare X0, 0
	048 JumpIfEqual {96}
	049 Call CommandHandle.get_command, X0
	050 Compare X0, 0
	051 JumpIfEqual {96}
	052 Move X1, X31
	053 Call "il2cpp_vm_object_is_inst", X0
	054 Compare X0, 0
	055 JumpIfEqual {96}
	056 Move X8, [X0]
	057 Move X20, 0xB36000
	058 Move X21, 0xB7A000
	059 Move X22, 0xB36000
	060 Move X9, [X8+424]
	061 Move X1, [X8+432]
	062 Move X20, [X20+2912]
	063 Move X21, [X21+2864]
	064 Move X22, [X22+3400]
	065 NotImplemented "Instruction BLR not yet implemented."
	066 Move X8, [X20]
	067 Move X20, X0
	068 Move X0, X8
	069 Call 0x1C17F10
	070 Move X2, [X21]
	071 Move X1, X19
	072 Move X21, X0
	073 Call CommandConditionEval..ctor, X0, X1, X2
	074 Move X0, [X22]
	075 Call 0x1C17F10
	076 Move W2, 1
	077 Move X1, X20
	078 Move X19, X0
	079 Call Command..ctor, X0, X1, X2
	080 Move [X19+56], W31
	081 Move [X19+64], X21
	082 Move X8, 0xB7A000
	083 Move X8, [X8+2528]
	084 Move X0, [X8]
	085 Call 0x1C17F10
	086 Move W1, 1
	087 Move X19, X0
	088 Call WaitForFramesCommand..ctor, X0, X1
	089 Move X0, X19
	090 Move X20, [X31+32]
	091 Move X19, [X31+40]
	092 Move X22, [X31+16]
	093 Move X21, [X31+24]
	094 Move X30, [X31+48]
	095 Return X0
	096 Call 0x1C17F20

Method: System.String ToString()

Disassembly:
	0x035BE904 ADRP X0, 0xB79000
	0x035BE908 LDR X0, [X0 + 0xB90]
	0x035BE90C BL 0x1C16CF4
	0x035BE910 ADRP X0, 0xB79000
	0x035BE914 LDR X0, [X0 + 0xB98]
	0x035BE918 BL 0x1C16CF4
	0x035BE91C ADRP X0, 0xB35000
	0x035BE920 LDR X0, [X0 + 0xEF0]
	0x035BE924 BL 0x1C16CF4
	0x035BE928 ADRP X0, 0xB35000
	0x035BE92C LDR X0, [X0 + 0xAC8]
	0x035BE930 BL 0x1C16CF4
	0x035BE934 ADRP X0, 0xB35000
	0x035BE938 LDR X0, [X0 + 0x6C0]
	0x035BE93C BL 0x1C16CF4
	0x035BE940 ADRP X0, 0xB35000
	0x035BE944 LDR X0, [X0 + 0xEF8]
	0x035BE948 BL 0x1C16CF4
	0x035BE94C ADRP X0, 0xB35000
	0x035BE950 LDR X0, [X0 + 0xF00]
	0x035BE954 BL 0x1C16CF4
	0x035BE958 ADRP X0, 0xB62000
	0x035BE95C LDR X0, [X0 + 0xFB8]
	0x035BE960 BL 0x1C16CF4
	0x035BE964 ADRP X0, 0xB35000
	0x035BE968 LDR X0, [X0 + 0x838]
	0x035BE96C BL 0x1C16CF4
	0x035BE970 ADRP X0, 0xB35000
	0x035BE974 LDR X0, [X0 + 0xF08]
	0x035BE978 BL 0x1C16CF4
	0x035BE97C ADRP X0, 0xB35000
	0x035BE980 LDR X0, [X0 + 0xF10]
	0x035BE984 BL 0x1C16CF4
	0x035BE988 ADRP X0, 0xB35000
	0x035BE98C LDR X0, [X0 + 0x848]
	0x035BE990 BL 0x1C16CF4
	0x035BE994 ADRP X0, 0xB79000
	0x035BE998 LDR X0, [X0 + 0xBA0]
	0x035BE99C BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xE23000
	007 Move W8, [X20+324]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xB7A000
	014 Move X0, [X0+2872]
	015 Call 0x1C17CF4
	016 Move X0, 0xB36000
	017 Move X0, [X0+2120]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+324], W8
	021 Move X0, X19
	022 Move X1, X31
	023 Call "il2cpp_vm_object_is_inst", X0
	024 Compare X0, 0
	025 JumpIfEqual {49}
	026 Move X8, [X0]
	027 Move X21, 0xB7A000
	028 Move X22, 0xB36000
	029 Move X9, [X8+424]
	030 Move X1, [X8+432]
	031 Move X21, [X21+2872]
	032 Move X22, [X22+2120]
	033 NotImplemented "Instruction BLR not yet implemented."
	034 Move X20, X0
	035 Move X0, X19
	036 Call Command.get_identifier, X0
	037 Move X1, [X21]
	038 Move X3, [X22]
	039 Move X2, X0
	040 Move X0, X20
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X4, X31
	046 Move X30, [X31+48]
	047 Call String.Concat, X0, X1, X2, X3
	048 Return X0
	049 Call 0x1C17F20

