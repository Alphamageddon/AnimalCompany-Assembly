Type: SpatialSys.CommandLib.CommandHandle

Method: SpatialSys.CommandLib.CommandHandle get_Default()

Disassembly:
	0x035BA924 ADRP X23, 0xB7D000
	0x035BA928 ADRP X20, 0xB39000
	0x035BA92C ADRP X24, 0xB7D000
	0x035BA930 LDR X23, [X23 + 0x9B0]
	0x035BA934 LDR X20, [X20 + 0x7D0]
	0x035BA938 LDR X24, [X24 + 0x9A8]
	0x035BA93C LDR W8, [X0 + 0x20]
	0x035BA940 CMP W8, 0x0
	0x035BA944 B.LE 0x35BAA3C
	0x035BA948 LDR X1, [X23]
	0x035BA94C BL 0x24F1954
	0x035BA950 MOV X21, X0
	0x035BA954 CBZ X0, 0x35BA984
	0x035BA958 MOV X0, X21
	0x035BA95C MOV V0.16B, V8.16B
	0x035BA960 BL 0x35BA238
	0x035BA964 TBZ X0, 0x0, 0x35BAA3C
	0x035BA968 LDR X0, [X19 + 0x10]
	0x035BA96C CBZ X0, 0x35BAA68
	0x035BA970 LDR X1, [X24]
	0x035BA974 BL 0x24F18D4
	0x035BA978 LDR X0, [X19 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xE27000
	005 Move X19, 0xB3A000
	006 Move W8, [X20+273]
	007 Move X19, [X19+2200]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xB3A000
	013 Move X0, [X0+2200]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+273], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8]
	027 Move X30, [X31+32]
	028 Return X0

Method: SpatialSys.CommandLib.Command get_command()

Disassembly:
	0x035BA97C CBNZ X0, 0x35BA93C
	0x035BA980 B 0x35BAA68
	0x035BA984 BL 0x1C16F20
	0x035BA988 B 0x35BAA6C
	0x035BA98C B 0x35BA990
	0x035BA990 MOV X22, X0
	0x035BA994 CMP W1, 0x1
	0x035BA998 B.NE 0x35BAA98
	0x035BA99C MOV X0, X22
	0x035BA9A0 BL 0x3EB1AD0
	0x035BA9A4 MOV X22, X0
	0x035BA9A8 MOV X0, X20
	0x035BA9AC BL 0x1C16D08
	0x035BA9B0 LDR X8, [X22]
	0x035BA9B4 LDR X1, [X8]
	0x035BA9B8 BL 0x1C17270
	0x035BA9BC TBZ X0, 0x0, 0x35BAA6C
	0x035BA9C0 LDR X22, [X22]
	0x035BA9C4 BL 0x3EB1AE0
	0x035BA9C8 CBZ X21, 0x35BAA68
	0x035BA9CC MOV X8, X21
	0x035BA9D0 LDR W9, [X8 + 0x10]
	0x035BA9D4 CMP W9, 0x3
	0x035BA9D8 B.EQ 0x35BA9F4
	0x035BA9DC LDR X8, [X8 + 0x30]
	0x035BA9E0 CBNZ X8, 0x35BA9D0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xE27000
	005 Move W8, [X20+274]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xB7E000
	012 Move X0, [X0+2320]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+274], W8
	016 Move [X31+8], X31
	017 Move X0, [X19+16]
	018 Compare X0, 0
	019 JumpIfEqual {32}
	020 Move X8, 0xB7E000
	021 Move X8, [X8+2320]
	022 Add X1, X31, 8
	023 Move X2, [X8]
	024 Call 0x285152C, X0, X1
	025 Move X8, [X31+8]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 And W31, W0, 1
	029 NotImplemented "Instruction CSEL not yet implemented."
	030 Move X30, [X31+32]
	031 Return X0
	032 Call 0x1C17F20

Method: System.Boolean get_hasStarted()

Disassembly:
	0x035BA9E4 MOV X0, X21
	0x035BA9E8 MOV X1, X21
	0x035BA9EC MOV X2, X22
	0x035BA9F0 BL 0x35BCD54
	0x035BA9F4 LDR W8, [X21 + 0x10]
	0x035BA9F8 CMP W8, 0x2
	0x035BA9FC B.EQ 0x35BA968
	0x035BAA00 CMP W8, 0x4
	0x035BAA04 B.EQ 0x35BA968
	0x035BAA08 MOV X9, X21

ISIL:
	001 Move [X31-16], X30
	002 Call CommandHandle.get_command, X0
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move W8, [X0+16]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 NotImplemented "Instruction CSET not yet implemented."
	008 Move W0, 1
	009 Move X30, [X31+16]
	010 Return X0

Method: System.Boolean get_hasFinalized()

Disassembly:
	0x035BAA1C B.NE 0x35BAA0C
	0x035BAA20 B 0x35BA968
	0x035BAA24 LDR X21, [X21 + 0x30]
	0x035BAA28 CBZ X21, 0x35BAA3C
	0x035BAA2C LDR W8, [X21 + 0x10]
	0x035BAA30 CMP W8, 0x3
	0x035BAA34 B.NE 0x35BAA24
	0x035BAA38 B 0x35BA968
	0x035BAA3C LDR X8, [X19 + 0x10]
	0x035BAA40 CBZ X8, 0x35BAA68
	0x035BAA44 LDR W8, [X8 + 0x20]
	0x035BAA48 CMP W8, 0x0
	0x035BAA4C CSET W0, EQ
	0x035BAA50 LDP X20, X19, [X31 + 0x30]
	0x035BAA54 LDP X22, X21, [X31 + 0x20]
	0x035BAA58 LDP X24, X23, [X31 + 0x10]
	0x035BAA5C LDR X30, [X31 + 0x8]
	0x035BAA60 LDR V8, [X31], #0x40
	0x035BAA64 RET
	0x035BAA68 BL 0x1C16F20
	0x035BAA6C MOVZ W0, 0x8
	0x035BAA70 BL 0x3EB1AF0
	0x035BAA74 LDR X8, [X22]
	0x035BAA78 STR X8, [X0]
	0x035BAA7C ADRP X1, 0x8FA000
	0x035BAA80 ADD X1, X1, 0xE58
	0x035BAA84 MOV X2, X31
	0x035BAA88 BL 0x3EB1B00
	0x035BAA8C B 0x35BAA90
	0x035BAA90 MOV X22, X0

ISIL:
	001 Move [X31-16], X30
	002 Call CommandHandle.get_command, X0
	003 Compare X0, 0
	004 JumpIfEqual {16}
	005 Move W9, [X0+16]
	006 Move W8, 1
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move X8, X0
	010 Move X8, [X8+48]
	011 Compare X8, 0
	012 JumpIfEqual {15}
	013 Move W10, [X8+16]
	014 NotImplemented "Instruction CMP not yet implemented."
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move W8, 1
	017 Move W0, W8
	018 Move X30, [X31+16]
	019 Return X0
	020 Move X0, [X0+48]
	021 Compare X0, 0
	022 JumpIfEqual {25}
	023 Move W8, [X0+16]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction CSET not yet implemented."

Method: System.Void .ctor(SpatialSys.CommandLib.Command command)

Disassembly:
	0x035BAAFC ADD X8, X31, 0x18
	0x035BAB00 BL 0x24F17FC
	0x035BAB04 LDUR V0, [X31 + 0x18]
	0x035BAB08 LDR X8, [X31 + 0x28]
	0x035BAB0C LDR X0, [X19]
	0x035BAB10 ADD X1, X31, 0x0
	0x035BAB14 STR V0, [X31]
	0x035BAB18 STR X8, [X31 + 0x10]
	0x035BAB1C BL 0x1C16E04
	0x035BAB20 LDP X20, X19, [X31 + 0x40]
	0x035BAB24 LDR X30, [X31 + 0x30]
	0x035BAB28 ADD X31, X31, 0x50
	0x035BAB2C RET
	0x035BAB30 BL 0x1C16F20
	0x035BAB34 SUB X31, X31, 0x50
	0x035BAB38 STR X30, [X31 + 0x30]
	0x035BAB3C STP X20, X19, [X31 + 0x40]
	0x035BAB40 ADRP X20, 0xE26000
	0x035BAB44 LDRB W8, [X20 + 0x123]
	0x035BAB48 MOV X19, X0
	0x035BAB4C TBNZ X8, 0x0, 0x35BAB70
	0x035BAB50 ADRP X0, 0xB7D000
	0x035BAB54 LDR X0, [X0 + 0x9B8]
	0x035BAB58 BL 0x1C16CF4
	0x035BAB5C ADRP X0, 0xB7D000
	0x035BAB60 LDR X0, [X0 + 0x9A0]
	0x035BAB64 BL 0x1C16CF4
	0x035BAB68 MOVZ W8, 0x1
	0x035BAB6C STRB W8, [X20 + 0x123]
	0x035BAB70 LDR X0, [X19 + 0x10]
	0x035BAB74 CBZ X0, 0x35BABC0
	0x035BAB78 ADRP X8, 0xB7D000
	0x035BAB7C LDR X8, [X8 + 0x9A0]
	0x035BAB80 ADRP X19, 0xB7D000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xE27000
	008 Move X22, 0xB7E000
	009 Move X21, 0xB7E000
	010 Move W8, [X23+275]
	011 Move X22, [X22+2328]
	012 Move X21, [X21+2336]
	013 Move X20, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xB7E000
	020 Move X0, [X0+2336]
	021 Call 0x1C17CF4
	022 Move X0, 0xB7E000
	023 Move X0, [X0+2328]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+275], W8
	027 Move X0, X19
	028 Move X1, X31
	029 Call Object..ctor, X0
	030 Move X0, [X22]
	031 Call 0x1C17F10
	032 Move X2, [X21]
	033 Move X1, X20
	034 Move X21, X0
	035 Call 0x2851290, X0, X1
	036 Move [X19+16], X21
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X30, [X31+48]
	042 Move X23, [X31+56]
	043 Return 

Method: System.Void Cancel()

Disassembly:
	0x035BAB84 LDR X1, [X8]
	0x035BAB88 LDR X19, [X19 + 0x9B8]
	0x035BAB8C ADD X8, X31, 0x18
	0x035BAB90 BL 0x24F17FC
	0x035BAB94 LDUR V0, [X31 + 0x18]
	0x035BAB98 LDR X8, [X31 + 0x28]
	0x035BAB9C LDR X0, [X19]
	0x035BABA0 ADD X1, X31, 0x0
	0x035BABA4 STR V0, [X31]

ISIL:
	001 Move [X31-16], X30
	002 Call CommandHandle.get_command, X0
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+440]
	007 Move X1, [X8+448]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Move X30, [X31+16]
	011 Return 

Method: System.Void .cctor()

Disassembly:
	0x035BABA8 STR X8, [X31 + 0x10]
	0x035BABAC BL 0x1C16E04
	0x035BABB0 LDP X20, X19, [X31 + 0x40]
	0x035BABB4 LDR X30, [X31 + 0x30]
	0x035BABB8 ADD X31, X31, 0x50
	0x035BABBC RET
	0x035BABC0 BL 0x1C16F20
	0x035BABC4 STR X30, [X31 - 0x30]!
	0x035BABC8 STP X22, X21, [X31 + 0x10]
	0x035BABCC STP X20, X19, [X31 + 0x20]
	0x035BABD0 ADRP X21, 0xE26000
	0x035BABD4 ADRP X22, 0xB7D000
	0x035BABD8 ADRP X20, 0xB7D000
	0x035BABDC LDRB W8, [X21 + 0x124]
	0x035BABE0 LDR X22, [X22 + 0x9C0]
	0x035BABE4 LDR X20, [X20 + 0x9C8]
	0x035BABE8 MOV X19, X0
	0x035BABEC TBNZ X8, 0x0, 0x35BAC10
	0x035BABF0 ADRP X0, 0xB7D000
	0x035BABF4 LDR X0, [X0 + 0x9C8]
	0x035BABF8 BL 0x1C16CF4
	0x035BABFC ADRP X0, 0xB7D000
	0x035BAC00 LDR X0, [X0 + 0x9C0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xE27000
	005 Move X20, 0xB3A000
	006 Move W8, [X19+276]
	007 Move X20, [X20+2200]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xB3A000
	013 Move X0, [X0+2200]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+276], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move X1, X31
	020 Move X19, X0
	021 Call CommandHandle..ctor, X0, X1
	022 Move X8, [X20]
	023 Move X8, [X8+184]
	024 Move [X8], X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return 

