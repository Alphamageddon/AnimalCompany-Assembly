Type: SpatialSys.CommandLib.CommandQueue

Method: System.Boolean get_paused()

Disassembly:
	0x035BB5A8 ADRP X0, 0xB61000
	0x035BB5AC LDR X0, [X0 + 0x2C0]

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Void set_paused(System.Boolean value)

Disassembly:
	0x035BB5B0 BL 0x1C16CF4
	0x035BB5B4 ADRP X0, 0xB7C000
	0x035BB5B8 LDR X0, [X0 + 0xA20]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+24], W8
	003 Return 

Method: System.Int32 get_count()

Disassembly:
	0x035BB5BC BL 0x1C16CF4
	0x035BB5C0 ADRP X0, 0xB7C000
	0x035BB5C4 LDR X0, [X0 + 0xA28]
	0x035BB5C8 BL 0x1C16CF4
	0x035BB5CC MOVZ W8, 0x1
	0x035BB5D0 STRB W8, [X25 + 0x16C]
	0x035BB5D4 MOVZ W2, 0x1
	0x035BB5D8 MOV X0, X20
	0x035BB5DC MOV X1, X21
	0x035BB5E0 MOVZ W25, 0x1
	0x035BB5E4 BL 0x35BC984
	0x035BB5E8 STRB W24, [X20 + 0x50]
	0x035BB5EC STR W25, [X20 + 0x10]
	0x035BB5F0 LDR X0, [X23]
	0x035BB5F4 BL 0x1C16F10
	0x035BB5F8 LDR X2, [X22]
	0x035BB5FC MOV X1, X20
	0x035BB600 MOV X3, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xE26000
	005 Move W8, [X20+285]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xB7D000
	012 Move X0, [X0+2416]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+285], W8
	016 Move X8, [X19+16]
	017 Compare X8, 0
	018 JumpIfEqual {24}
	019 Move W0, [X8+32]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0
	024 Call 0x1C17F20

Method: SpatialSys.CommandLib.CommandHandle Enqueue(SpatialSys.CommandLib.Command command)

Disassembly:
	0x035BB604 MOV X21, X0
	0x035BB608 BL 0x3314368
	0x035BB60C CBZ X19, 0x35BB730
	0x035BB610 ADRP X22, 0xB61000
	0x035BB614 LDR X8, [X19]
	0x035BB618 LDR X22, [X22 + 0x2C0]
	0x035BB61C LDRH W9, [X8 + 0x12E]
	0x035BB620 LDR X1, [X22]
	0x035BB624 CBZ X9, 0x35BB648
	0x035BB628 LDR X10, [X8 + 0xB0]
	0x035BB62C ADD X10, X10, 0x8
	0x035BB630 LDUR X11, [X10 - 0x8]
	0x035BB634 CMP X11, X1
	0x035BB638 B.EQ 0x35BB658
	0x035BB63C SUBS X9, X9, 0x1
	0x035BB640 ADD X10, X10, 0x10
	0x035BB644 B.NE 0x35BB630
	0x035BB648 MOVZ W2, 0x14
	0x035BB64C MOV X0, X19
	0x035BB650 BL 0x1C5C788
	0x035BB654 B 0x35BB668
	0x035BB658 LDR W9, [X10]
	0x035BB65C ADD W9, W9, 0x14
	0x035BB660 ADD X8, X8, W9, 0x4, SXTW
	0x035BB664 ADD X0, X8, 0x138
	0x035BB668 LDP X8, X2, [X0]
	0x035BB66C MOV X0, X19
	0x035BB670 MOV X1, X21
	0x035BB674 BLR X8
	0x035BB678 LDRB W8, [X20 + 0x50]
	0x035BB67C CBZ W8, 0x35BB6EC
	0x035BB680 ADRP X8, 0xB3B000
	0x035BB684 LDR X8, [X8 + 0x2C8]
	0x035BB688 ADRP X21, 0xB7C000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xE26000
	006 Move W8, [X21+286]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xB39000
	014 Move X0, [X0+2200]
	015 Call 0x1C17CF4
	016 Move X0, 0xB7D000
	017 Move X0, [X0+2424]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+286], W8
	021 Move X0, [X20+16]
	022 Compare X0, 0
	023 JumpIfEqual {42}
	024 Move X8, 0xB7D000
	025 Move X8, [X8+2424]
	026 Move X20, 0xB39000
	027 Move X1, X19
	028 Move X2, [X8]
	029 Move X20, [X20+2200]
	030 Call Queue`1<Object>.Enqueue, X0, X1
	031 Move X0, [X20]
	032 Call 0x1C17F10
	033 Move X1, X19
	034 Move X20, X0
	035 Call CommandHandle..ctor, X0, X1
	036 Move X0, X20
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return X0
	042 Call 0x1C17F20

Method: System.Void Enqueue(SpatialSys.CommandLib.Command[] commands)

Disassembly:
	0x035BB68C LDR X0, [X8]
	0x035BB690 LDR X21, [X21 + 0xA28]
	0x035BB694 BL 0x1C16F10
	0x035BB698 LDR X2, [X21]
	0x035BB69C MOV X1, X20
	0x035BB6A0 MOV X3, X31
	0x035BB6A4 MOV X21, X0
	0x035BB6A8 BL 0x2A6B948
	0x035BB6AC LDR X8, [X19]
	0x035BB6B0 LDR X1, [X22]
	0x035BB6B4 LDRH W9, [X8 + 0x12E]
	0x035BB6B8 CBZ X9, 0x35BB6DC
	0x035BB6BC LDR X10, [X8 + 0xB0]
	0x035BB6C0 ADD X10, X10, 0x8
	0x035BB6C4 LDUR X11, [X10 - 0x8]
	0x035BB6C8 CMP X11, X1
	0x035BB6CC B.EQ 0x35BB700
	0x035BB6D0 SUBS X9, X9, 0x1
	0x035BB6D4 ADD X10, X10, 0x10
	0x035BB6D8 B.NE 0x35BB6C4
	0x035BB6DC MOVZ W2, 0x5
	0x035BB6E0 MOV X0, X19
	0x035BB6E4 BL 0x1C5C788
	0x035BB6E8 B 0x35BB710
	0x035BB6EC LDP X20, X19, [X31 + 0x30]
	0x035BB6F0 LDP X22, X21, [X31 + 0x20]
	0x035BB6F4 LDP X24, X23, [X31 + 0x10]
	0x035BB6F8 LDP X30, X25, [X31], #0x40
	0x035BB6FC RET
	0x035BB700 LDR W9, [X10]
	0x035BB704 ADD W9, W9, 0x5
	0x035BB708 ADD X8, X8, W9, 0x4, SXTW
	0x035BB70C ADD X0, X8, 0x138
	0x035BB710 LDP X3, X2, [X0]
	0x035BB714 MOV X0, X19
	0x035BB718 MOV X1, X21
	0x035BB71C LDP X20, X19, [X31 + 0x30]
	0x035BB720 LDP X22, X21, [X31 + 0x20]
	0x035BB724 LDP X24, X23, [X31 + 0x10]
	0x035BB728 LDP X30, X25, [X31], #0x40

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xE26000
	008 Move W8, [X21+287]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xB7D000
	016 Move X0, [X0+2424]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+287], W8
	020 Compare X19, 0
	021 JumpIfEqual {49}
	022 Move X8, [X19+24]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X22, 0xB7D000
	025 Move X22, [X22+2424]
	026 Move X21, X31
	027 And X8, X8, 0
	028 Add X23, X19, 32
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X1, [X23]
	031 Compare X1, 0
	032 JumpIfEqual {38}
	033 Move X0, [X20+16]
	034 Compare X0, 0
	035 JumpIfEqual {49}
	036 Move X2, [X22]
	037 Call Queue`1<Object>.Enqueue, X0, X1
	038 Move W8, [X19+24]
	039 Add X21, X21, 1
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Move X23, [X31+56]
	047 Return 
	048 Call 0x1C17F28
	049 Call 0x1C17F20

Method: System.Void Clear()

Disassembly:
	0x035BB72C BR X3
	0x035BB730 BL 0x1C16F20
	0x035BB734 STP X30, X21, [X31 - 0x20]!
	0x035BB738 STP X20, X19, [X31 + 0x10]
	0x035BB73C ADRP X20, 0xE25000
	0x035BB740 ADRP X21, 0xB7C000
	0x035BB744 LDRB W8, [X20 + 0x12F]
	0x035BB748 LDR X21, [X21 + 0xA30]
	0x035BB74C MOV X19, X0
	0x035BB750 TBNZ X8, 0x0, 0x35BB768
	0x035BB754 ADRP X0, 0xB7C000
	0x035BB758 LDR X0, [X0 + 0xA30]
	0x035BB75C BL 0x1C16CF4
	0x035BB760 MOVZ W8, 0x1
	0x035BB764 STRB W8, [X20 + 0x12F]
	0x035BB768 LDR X0, [X21]
	0x035BB76C BL 0x1C16F10
	0x035BB770 MOV X1, X19
	0x035BB774 MOV X20, X0
	0x035BB778 BL 0x35BB78C
	0x035BB77C MOV X0, X20
	0x035BB780 LDP X20, X19, [X31 + 0x10]
	0x035BB784 LDP X30, X21, [X31], #0x20
	0x035BB788 RET
	0x035BB78C STR X30, [X31 - 0x30]!
	0x035BB790 STP X22, X21, [X31 + 0x10]
	0x035BB794 STP X20, X19, [X31 + 0x20]
	0x035BB798 ADRP X21, 0xE25000
	0x035BB79C ADRP X22, 0xB7C000
	0x035BB7A0 LDRB W8, [X21 + 0x154]
	0x035BB7A4 LDR X22, [X22 + 0xA38]
	0x035BB7A8 MOV X19, X1
	0x035BB7AC MOV X20, X0
	0x035BB7B0 TBNZ X8, 0x0, 0x35BB7C8
	0x035BB7B4 ADRP X0, 0xB7C000
	0x035BB7B8 LDR X0, [X0 + 0xA38]
	0x035BB7BC BL 0x1C16CF4
	0x035BB7C0 MOVZ W8, 0x1
	0x035BB7C4 STRB W8, [X21 + 0x154]
	0x035BB7C8 LDR X1, [X22]
	0x035BB7CC MOV X0, X20
	0x035BB7D0 MOV X2, X19
	0x035BB7D4 LDP X20, X19, [X31 + 0x20]
	0x035BB7D8 LDP X22, X21, [X31 + 0x10]
	0x035BB7DC LDR X30, [X31], #0x30
	0x035BB7E0 B 0x35BB84C
	0x035BB7E4 STR X30, [X31 - 0x30]!
	0x035BB7E8 STP X22, X21, [X31 + 0x10]
	0x035BB7EC STP X20, X19, [X31 + 0x20]
	0x035BB7F0 ADRP X21, 0xE25000
	0x035BB7F4 ADRP X22, 0xB7C000
	0x035BB7F8 LDRB W8, [X21 + 0x130]
	0x035BB7FC LDR X22, [X22 + 0xA30]
	0x035BB800 MOV X19, X1
	0x035BB804 MOV X20, X0
	0x035BB808 TBNZ X8, 0x0, 0x35BB820
	0x035BB80C ADRP X0, 0xB7C000
	0x035BB810 LDR X0, [X0 + 0xA30]
	0x035BB814 BL 0x1C16CF4
	0x035BB818 MOVZ W8, 0x1
	0x035BB81C STRB W8, [X21 + 0x130]
	0x035BB820 LDR X0, [X22]
	0x035BB824 BL 0x1C16F10
	0x035BB828 MOV X1, X20
	0x035BB82C MOV X2, X19
	0x035BB830 MOV X21, X0
	0x035BB834 BL 0x35BB84C
	0x035BB838 MOV X0, X21
	0x035BB83C LDP X20, X19, [X31 + 0x20]
	0x035BB840 LDP X22, X21, [X31 + 0x10]
	0x035BB844 LDR X30, [X31], #0x30
	0x035BB848 RET
	0x035BB84C STR X30, [X31 - 0x40]!
	0x035BB850 STP X24, X23, [X31 + 0x10]
	0x035BB854 STP X22, X21, [X31 + 0x20]
	0x035BB858 STP X20, X19, [X31 + 0x30]
	0x035BB85C ADRP X24, 0xE25000
	0x035BB860 ADRP X23, 0xB7C000
	0x035BB864 ADRP X22, 0xB7C000
	0x035BB868 LDRB W8, [X24 + 0x155]
	0x035BB86C LDR X23, [X23 + 0xA40]
	0x035BB870 LDR X22, [X22 + 0xA48]
	0x035BB874 MOV X19, X2
	0x035BB878 MOV X21, X1
	0x035BB87C MOV X20, X0
	0x035BB880 TBNZ X8, 0x0, 0x35BB8B0
	0x035BB884 ADRP X0, 0xB7C000
	0x035BB888 LDR X0, [X0 + 0xA50]
	0x035BB88C BL 0x1C16CF4
	0x035BB890 ADRP X0, 0xB7C000
	0x035BB894 LDR X0, [X0 + 0xA48]
	0x035BB898 BL 0x1C16CF4
	0x035BB89C ADRP X0, 0xB7C000
	0x035BB8A0 LDR X0, [X0 + 0xA40]
	0x035BB8A4 BL 0x1C16CF4
	0x035BB8A8 MOVZ W8, 0x1
	0x035BB8AC STRB W8, [X24 + 0x155]
	0x035BB8B0 MOVZ W2, 0x1
	0x035BB8B4 MOV X0, X20

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X20, 0xE26000
	009 Move W8, [X20+288]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {32}
	015 Move X0, 0xB7D000
	016 Move X0, [X0+2432]
	017 Call 0x1C17CF4
	018 Move X0, 0xB7D000
	019 Move X0, [X0+2440]
	020 Call 0x1C17CF4
	021 Move X0, 0xB7D000
	022 Move X0, [X0+2448]
	023 Call 0x1C17CF4
	024 Move X0, 0xB7D000
	025 Move X0, [X0+2456]
	026 Call 0x1C17CF4
	027 Move X0, 0xB7D000
	028 Move X0, [X0+2464]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+288], W8
	032 Move [X31+8], X31
	033 Move [X31+16], X31
	034 Move [X31+24], X31
	035 Move X0, [X19+16]
	036 Compare X0, 0
	037 JumpIfEqual {84}
	038 Move X8, 0xB7D000
	039 Move X8, [X8+2464]
	040 Move X20, 0xB7D000
	041 Move X20, [X20+2440]
	042 Move X23, 0xB7D000
	043 Move X1, [X8]
	044 Move X22, 0xB7D000
	045 Move X21, 0xB7D000
	046 Move X23, [X23+2448]
	047 Move X22, [X22+2456]
	048 Move X21, [X21+2432]
	049 Add X8, X31, 8
	050 Call Queue`1<Object>.GetEnumerator, X0
	051 Move X1, [X20]
	052 Add X0, X31, 8
	053 Call Enumerator<Object>.MoveNext, X0
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {67}
	058 Move X1, [X23]
	059 Add X0, X31, 8
	060 Call Enumerator<Object>.get_Current, X0
	061 Compare X0, 0
	062 JumpIfEqual {83}
	063 Move X8, [X0]
	064 Move X9, [X8+440]
	065 Move X1, [X8+448]
	066 NotImplemented "Instruction BLR not yet implemented."
	067 Move X1, [X21]
	068 Add X0, X31, 8
	069 Call Enumerator<Object>.Dispose, X0
	070 Move X0, [X19+16]
	071 Compare X0, 0
	072 JumpIfEqual {84}
	073 Move X1, [X22]
	074 Call Queue`1<Object>.Clear, X0
	075 Move X20, [X31+64]
	076 Move X19, [X31+72]
	077 Move X22, [X31+48]
	078 Move X21, [X31+56]
	079 Move X30, [X31+32]
	080 Move X23, [X31+40]
	081 Add X31, X31, 80
	082 Return 
	083 Call 0x1C17F20
	084 Call 0x1C17F20
	085 Move X20, X0
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move X0, X20
	088 Call 0x3EB2AD0
	089 Move X21, [X0]
	090 Call 0x3EB2AE0
	091 Move X8, 0xB7D000
	092 Move X8, [X8+2432]
	093 Add X0, X31, 8
	094 Move X1, [X8]
	095 Call Enumerator<Object>.Dispose, X0
	096 Compare X21, 0
	097 JumpIfEqual {70}
	098 Move X0, X21
	099 Call 0x1C17F18
	100 Move X21, X31
	101 Move X20, X0
	102 Move X8, 0xB7D000
	103 Move X8, [X8+2432]
	104 Move X1, [X8]
	105 Add X0, X31, 8
	106 Call Enumerator<Object>.Dispose, X0
	107 Compare X21, 0
	108 JumpIfNotEqual {111}
	109 Move X0, X20
	110 Call 0x1D2D690
	111 Move X0, X21
	112 Call 0x1C17F18
	113 Call 0x1991590

Method: System.Boolean Update(System.Single deltaTime)

Disassembly:
	0x035BB8B8 MOV X1, X21
	0x035BB8BC BL 0x35BC984
	0x035BB8C0 LDR X0, [X23]
	0x035BB8C4 BL 0x1C16F10
	0x035BB8C8 LDR X1, [X22]
	0x035BB8CC MOV X21, X0
	0x035BB8D0 BL 0x2EECE50
	0x035BB8D4 STR X21, [X20 + 0x38]
	0x035BB8D8 CBZ X19, 0x35BB948
	0x035BB8DC LDR X8, [X19 + 0x18]
	0x035BB8E0 CMP W8, 0x1
	0x035BB8E4 B.LT 0x35BB930
	0x035BB8E8 ADRP X22, 0xB7C000
	0x035BB8EC LDR X22, [X22 + 0xA50]
	0x035BB8F0 MOV X21, X31
	0x035BB8F4 AND X8, X8, 0x0
	0x035BB8F8 ADD X23, X19, 0x20
	0x035BB8FC CMP X21, W8, UXTW
	0x035BB900 B.CS 0x35BB944
	0x035BB904 LDR X1, [X23, X21, LSL #3]
	0x035BB908 CBZ X1, 0x35BB920
	0x035BB90C STR X20, [X1 + 0x30]
	0x035BB910 LDR X0, [X20 + 0x38]
	0x035BB914 CBZ X0, 0x35BB948
	0x035BB918 LDR X2, [X22]
	0x035BB91C BL 0x2EECFD4
	0x035BB920 LDR W8, [X19 + 0x18]
	0x035BB924 ADD X21, X21, 0x1
	0x035BB928 CMP X21, W8, SXTW
	0x035BB92C B.LT 0x35BB8FC
	0x035BB930 LDP X20, X19, [X31 + 0x30]
	0x035BB934 LDP X22, X21, [X31 + 0x20]
	0x035BB938 LDP X24, X23, [X31 + 0x10]
	0x035BB93C LDR X30, [X31], #0x40
	0x035BB940 RET
	0x035BB944 BL 0x1C16F28
	0x035BB948 BL 0x1C16F20
	0x035BB94C STP X30, X21, [X31 - 0x20]!
	0x035BB950 STP X20, X19, [X31 + 0x10]
	0x035BB954 ADRP X20, 0xE25000
	0x035BB958 ADRP X21, 0xB7C000
	0x035BB95C LDRB W8, [X20 + 0x131]
	0x035BB960 LDR X21, [X21 + 0xA58]
	0x035BB964 MOV X19, X0
	0x035BB968 TBNZ X8, 0x0, 0x35BB980
	0x035BB96C ADRP X0, 0xB7C000
	0x035BB970 LDR X0, [X0 + 0xA58]
	0x035BB974 BL 0x1C16CF4
	0x035BB978 MOVZ W8, 0x1
	0x035BB97C STRB W8, [X20 + 0x131]
	0x035BB980 LDR X0, [X21]
	0x035BB984 BL 0x1C16F10
	0x035BB988 MOV X1, X19
	0x035BB98C MOV X20, X0
	0x035BB990 BL 0x35BB9A4
	0x035BB994 MOV X0, X20
	0x035BB998 LDP X20, X19, [X31 + 0x10]
	0x035BB99C LDP X30, X21, [X31], #0x20
	0x035BB9A0 RET
	0x035BB9A4 STR X30, [X31 - 0x30]!
	0x035BB9A8 STP X22, X21, [X31 + 0x10]
	0x035BB9AC STP X20, X19, [X31 + 0x20]
	0x035BB9B0 ADRP X21, 0xE25000
	0x035BB9B4 ADRP X22, 0xB7C000
	0x035BB9B8 LDRB W8, [X21 + 0x15F]
	0x035BB9BC LDR X22, [X22 + 0xA60]
	0x035BB9C0 MOV X19, X1
	0x035BB9C4 MOV X20, X0
	0x035BB9C8 TBNZ X8, 0x0, 0x35BB9E0
	0x035BB9CC ADRP X0, 0xB7C000
	0x035BB9D0 LDR X0, [X0 + 0xA60]
	0x035BB9D4 BL 0x1C16CF4
	0x035BB9D8 MOVZ W8, 0x1
	0x035BB9DC STRB W8, [X21 + 0x15F]
	0x035BB9E0 LDR X1, [X22]
	0x035BB9E4 MOV X0, X20
	0x035BB9E8 MOV X2, X19
	0x035BB9EC LDP X20, X19, [X31 + 0x20]
	0x035BB9F0 LDP X22, X21, [X31 + 0x10]
	0x035BB9F4 LDR X30, [X31], #0x30
	0x035BB9F8 B 0x35BBA64
	0x035BB9FC STR X30, [X31 - 0x30]!
	0x035BBA00 STP X22, X21, [X31 + 0x10]
	0x035BBA04 STP X20, X19, [X31 + 0x20]
	0x035BBA08 ADRP X21, 0xE25000
	0x035BBA0C ADRP X22, 0xB7C000
	0x035BBA10 LDRB W8, [X21 + 0x132]
	0x035BBA14 LDR X22, [X22 + 0xA58]
	0x035BBA18 MOV X19, X1
	0x035BBA1C MOV X20, X0
	0x035BBA20 TBNZ X8, 0x0, 0x35BBA38
	0x035BBA24 ADRP X0, 0xB7C000
	0x035BBA28 LDR X0, [X0 + 0xA58]
	0x035BBA2C BL 0x1C16CF4
	0x035BBA30 MOVZ W8, 0x1
	0x035BBA34 STRB W8, [X21 + 0x132]
	0x035BBA38 LDR X0, [X22]
	0x035BBA3C BL 0x1C16F10
	0x035BBA40 MOV X1, X20
	0x035BBA44 MOV X2, X19
	0x035BBA48 MOV X21, X0
	0x035BBA4C BL 0x35BBA64
	0x035BBA50 MOV X0, X21
	0x035BBA54 LDP X20, X19, [X31 + 0x20]
	0x035BBA58 LDP X22, X21, [X31 + 0x10]
	0x035BBA5C LDR X30, [X31], #0x30
	0x035BBA60 RET
	0x035BBA64 STR X30, [X31 - 0x40]!
	0x035BBA68 STP X24, X23, [X31 + 0x10]
	0x035BBA6C STP X22, X21, [X31 + 0x20]
	0x035BBA70 STP X20, X19, [X31 + 0x30]
	0x035BBA74 ADRP X24, 0xE25000
	0x035BBA78 ADRP X23, 0xB7C000
	0x035BBA7C ADRP X22, 0xB7C000
	0x035BBA80 LDRB W8, [X24 + 0x160]
	0x035BBA84 LDR X23, [X23 + 0x9C0]
	0x035BBA88 LDR X22, [X22 + 0x9C8]
	0x035BBA8C MOV X19, X2
	0x035BBA90 MOV X21, X1
	0x035BBA94 MOV X20, X0
	0x035BBA98 TBNZ X8, 0x0, 0x35BBAC8
	0x035BBA9C ADRP X0, 0xB7C000
	0x035BBAA0 LDR X0, [X0 + 0x978]

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0xE26000
	010 Move W8, [X20+289]
	011 Move V8, V0
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0xB7D000
	018 Move X0, [X0+2472]
	019 Call 0x1C17CF4
	020 Move X0, 0xB7D000
	021 Move X0, [X0+2480]
	022 Call 0x1C17CF4
	023 Move X0, 0xB7D000
	024 Move X0, [X0+2416]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+289], W8
	028 Move W8, [X19+24]
	029 Compare W8, 0
	030 JumpIfEqual {32}
	031 Move W0, W31
	032 Move X0, [X19+16]
	033 Compare X0, 0
	034 JumpIfEqual {121}
	035 Move X23, 0xB7D000
	036 Move X20, 0xB39000
	037 Move X24, 0xB7D000
	038 Move X23, [X23+2480]
	039 Move X20, [X20+2000]
	040 Move X24, [X24+2472]
	041 Move W8, [X0+32]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X1, [X23]
	044 Call Queue`1<Object>.Peek, X0
	045 Move X21, X0
	046 Compare X0, 0
	047 JumpIfEqual {63}
	048 Move X0, X21
	049 Move V0, V8
	050 Call Command.Update, X0, V0
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {106}
	055 Move X0, [X19+16]
	056 Compare X0, 0
	057 JumpIfEqual {121}
	058 Move X1, [X24]
	059 Call Queue`1<Object>.Dequeue, X0
	060 Move X0, [X19+16]
	061 Compare X0, 0
	062 JumpIfNotEqual {41}
	063 Call 0x1C17F20
	064 Move X22, X0
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X0, X22
	067 Call 0x3EB2AD0
	068 Move X22, X0
	069 Move X0, X20
	070 Call 0x1C17D08
	071 Move X8, [X22]
	072 Move X1, [X8]
	073 Call 0x1C18270
	074 Move TEMP, X0
	075 And TEMP, TEMP, 1
	076 Compare TEMP, 1
	077 JumpIfNotEqual {122}
	078 Move X22, [X22]
	079 Call 0x3EB2AE0
	080 Compare X21, 0
	081 JumpIfEqual {121}
	082 Move X8, X21
	083 Move W9, [X8+16]
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move X8, [X8+48]
	086 Compare X8, 0
	087 JumpIfNotEqual {83}
	088 Move X0, X21
	089 Move X1, X21
	090 Move X2, X22
	091 Call Command.Abort, X0, X1, X2
	092 Move W8, [X21+16]
	093 NotImplemented "Instruction CMP not yet implemented."
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move X9, X21
	096 Move X9, [X9+48]
	097 Compare X9, 0
	098 JumpIfEqual {105}
	099 Move W10, [X9+16]
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X21, [X21+48]
	102 Compare X21, 0
	103 JumpIfEqual {106}
	104 Move W8, [X21+16]
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move X8, [X19+16]
	107 Compare X8, 0
	108 JumpIfEqual {121}
	109 Move W8, [X8+32]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 NotImplemented "Instruction CSET not yet implemented."
	112 Move X20, [X31+48]
	113 Move X19, [X31+56]
	114 Move X22, [X31+32]
	115 Move X21, [X31+40]
	116 Move X24, [X31+16]
	117 Move X23, [X31+24]
	118 Move X30, [X31+8]
	119 Move V8, [X31+64]
	120 Return X0
	121 Call 0x1C17F20
	122 Move W0, 8
	123 Call 0x3EB2AF0
	124 Move X8, [X22]
	125 Move [X0], X8
	126 Move X1, 0x8FA000
	127 Add X1, X1, 3672
	128 Move X2, X31
	129 Call 0x3EB2B00
	130 Move X22, X0
	131 Call 0x3EB2AE0
	132 Move X0, X22
	133 Call 0x1D2D690
	134 Call 0x1991590

Method: System.Collections.Generic.IEnumerator`1<SpatialSys.CommandLib.Command> GetEnumerator()

Disassembly:
	0x035BBAA4 BL 0x1C16CF4
	0x035BBAA8 ADRP X0, 0xB7C000
	0x035BBAAC LDR X0, [X0 + 0x9C8]
	0x035BBAB0 BL 0x1C16CF4
	0x035BBAB4 ADRP X0, 0xB7C000
	0x035BBAB8 LDR X0, [X0 + 0x9C0]
	0x035BBABC BL 0x1C16CF4
	0x035BBAC0 MOVZ W8, 0x1
	0x035BBAC4 STRB W8, [X24 + 0x160]
	0x035BBAC8 MOVZ W2, 0x1
	0x035BBACC MOV X0, X20
	0x035BBAD0 MOV X1, X21
	0x035BBAD4 BL 0x35BC984
	0x035BBAD8 LDR X0, [X23]
	0x035BBADC BL 0x1C16F10
	0x035BBAE0 LDR X1, [X22]
	0x035BBAE4 MOV X21, X0
	0x035BBAE8 BL 0x24F1248
	0x035BBAEC STR X21, [X20 + 0x38]
	0x035BBAF0 CBZ X19, 0x35BBB60
	0x035BBAF4 LDR X8, [X19 + 0x18]
	0x035BBAF8 CMP W8, 0x1
	0x035BBAFC B.LT 0x35BBB48
	0x035BBB00 ADRP X22, 0xB7C000
	0x035BBB04 LDR X22, [X22 + 0x978]
	0x035BBB08 MOV X21, X31
	0x035BBB0C AND X8, X8, 0x0
	0x035BBB10 ADD X23, X19, 0x20
	0x035BBB14 CMP X21, W8, UXTW
	0x035BBB18 B.CS 0x35BBB5C
	0x035BBB1C LDR X1, [X23, X21, LSL #3]
	0x035BBB20 CBZ X1, 0x35BBB38
	0x035BBB24 STR X20, [X1 + 0x30]
	0x035BBB28 LDR X0, [X20 + 0x38]
	0x035BBB2C CBZ X0, 0x35BBB60
	0x035BBB30 LDR X2, [X22]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+64], X20
	004 Move [X31+72], X19
	005 Move X20, 0xE26000
	006 Move W8, [X20+290]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xB7D000
	013 Move X0, [X0+2488]
	014 Call 0x1C17CF4
	015 Move X0, 0xB7D000
	016 Move X0, [X0+2464]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+290], W8
	020 Move X0, [X19+16]
	021 Compare X0, 0
	022 JumpIfEqual {42}
	023 Move X8, 0xB7D000
	024 Move X8, [X8+2464]
	025 Move X19, 0xB7D000
	026 Move X1, [X8]
	027 Move X19, [X19+2488]
	028 Add X8, X31, 24
	029 Call Queue`1<Object>.GetEnumerator, X0
	030 NotImplemented "Instruction LDUR not yet implemented."
	031 Move X8, [X31+40]
	032 Move X0, [X19]
	033 Add X1, X31, 0
	034 Move [X31], V0
	035 Move [X31+16], X8
	036 Call 0x1C17E04
	037 Move X20, [X31+64]
	038 Move X19, [X31+72]
	039 Move X30, [X31+48]
	040 Add X31, X31, 80
	041 Return X0
	042 Call 0x1C17F20

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x035BBB34 BL 0x24F1750
	0x035BBB38 LDR W8, [X19 + 0x18]
	0x035BBB3C ADD X21, X21, 0x1
	0x035BBB40 CMP X21, W8, SXTW
	0x035BBB44 B.LT 0x35BBB14
	0x035BBB48 LDP X20, X19, [X31 + 0x30]
	0x035BBB4C LDP X22, X21, [X31 + 0x20]
	0x035BBB50 LDP X24, X23, [X31 + 0x10]
	0x035BBB54 LDR X30, [X31], #0x40
	0x035BBB58 RET
	0x035BBB5C BL 0x1C16F28
	0x035BBB60 BL 0x1C16F20
	0x035BBB64 STR X30, [X31 - 0x40]!
	0x035BBB68 STP X24, X23, [X31 + 0x10]
	0x035BBB6C STP X22, X21, [X31 + 0x20]
	0x035BBB70 STP X20, X19, [X31 + 0x30]
	0x035BBB74 ADRP X20, 0xE25000
	0x035BBB78 ADRP X24, 0xB7C000
	0x035BBB7C LDRB W8, [X20 + 0x133]
	0x035BBB80 LDR X24, [X24 + 0xA68]
	0x035BBB84 MOV W19, W3
	0x035BBB88 MOV X21, X2
	0x035BBB8C MOV X22, X1
	0x035BBB90 MOV X23, X0
	0x035BBB94 TBNZ X8, 0x0, 0x35BBBAC
	0x035BBB98 ADRP X0, 0xB7C000
	0x035BBB9C LDR X0, [X0 + 0xA68]
	0x035BBBA0 BL 0x1C16CF4
	0x035BBBA4 MOVZ W8, 0x1
	0x035BBBA8 STRB W8, [X20 + 0x133]
	0x035BBBAC LDR X0, [X24]
	0x035BBBB0 BL 0x1C16F10
	0x035BBBB4 MOV X1, X23
	0x035BBBB8 MOV X2, X22
	0x035BBBBC MOV X3, X21
	0x035BBBC0 MOV X20, X0

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+64], X20
	004 Move [X31+72], X19
	005 Move X20, 0xE26000
	006 Move W8, [X20+291]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xB7D000
	013 Move X0, [X0+2488]
	014 Call 0x1C17CF4
	015 Move X0, 0xB7D000
	016 Move X0, [X0+2464]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+291], W8
	020 Move X0, [X19+16]
	021 Compare X0, 0
	022 JumpIfEqual {42}
	023 Move X8, 0xB7D000
	024 Move X8, [X8+2464]
	025 Move X19, 0xB7D000
	026 Move X1, [X8]
	027 Move X19, [X19+2488]
	028 Add X8, X31, 24
	029 Call Queue`1<Object>.GetEnumerator, X0
	030 NotImplemented "Instruction LDUR not yet implemented."
	031 Move X8, [X31+40]
	032 Move X0, [X19]
	033 Add X1, X31, 0
	034 Move [X31], V0
	035 Move [X31+16], X8
	036 Call 0x1C17E04
	037 Move X20, [X31+64]
	038 Move X19, [X31+72]
	039 Move X30, [X31+48]
	040 Add X31, X31, 80
	041 Return X0
	042 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x035BBBC4 BL 0x35BBC10
	0x035BBBC8 CBZ X20, 0x35BBC0C
	0x035BBBCC LDR W8, [X20 + 0x20]
	0x035BBBD0 TBZ X19, 0x0, 0x35BBBE4
	0x035BBBD4 CMP W8, 0x3
	0x035BBBD8 B.LT 0x35BBBF4
	0x035BBBDC MOVZ W8, 0x2
	0x035BBBE0 B 0x35BBBF0
	0x035BBBE4 CMP W8, 0x4
	0x035BBBE8 B.GT 0x35BBBF4
	0x035BBBEC MOVZ W8, 0x5
	0x035BBBF0 STR W8, [X20 + 0x20]
	0x035BBBF4 MOV X0, X20
	0x035BBBF8 LDP X20, X19, [X31 + 0x30]
	0x035BBBFC LDP X22, X21, [X31 + 0x20]
	0x035BBC00 LDP X24, X23, [X31 + 0x10]
	0x035BBC04 LDR X30, [X31], #0x40
	0x035BBC08 RET
	0x035BBC0C BL 0x1C16F20
	0x035BBC10 STR X30, [X31 - 0x30]!
	0x035BBC14 STP X22, X21, [X31 + 0x10]
	0x035BBC18 STP X20, X19, [X31 + 0x20]
	0x035BBC1C CBZ X1, 0x35BBC84
	0x035BBC20 MOV X22, X1
	0x035BBC24 MOV X20, X0
	0x035BBC28 MOV X0, X1
	0x035BBC2C MOV X1, X31
	0x035BBC30 MOV X19, X3
	0x035BBC34 MOV X21, X2
	0x035BBC38 BL 0x33C4268
	0x035BBC3C CBZ X0, 0x35BBC84

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xE26000
	007 Move X22, 0xB7D000
	008 Move X20, 0xB7D000
	009 Move W8, [X21+292]
	010 Move X22, [X22+2496]
	011 Move X20, [X20+2504]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xB7D000
	018 Move X0, [X0+2504]
	019 Call 0x1C17CF4
	020 Move X0, 0xB7D000
	021 Move X0, [X0+2496]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+292], W8
	025 Move X0, [X22]
	026 Call 0x1C17F10
	027 Move X1, [X20]
	028 Move X20, X0
	029 Call Queue`1<Object>..ctor, X0
	030 Move [X19+16], X20
	031 Move X0, X19
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move X1, X31
	037 Move X30, [X31+48]
	038 Call Object..ctor, X0
	039 Return 

