Type: Photon.Realtime.RegionHandler/<>c

Method: System.Void .cctor()

Disassembly:
	0x0354B904 LDR X0, [X8]
	0x0354B908 BL 0x1C16F10
	0x0354B90C ADRP X8, 0xFFFFFFFFFD59F000
	0x0354B910 LDR V0, [X8 + 0x330]
	0x0354B914 MOV X1, X31
	0x0354B918 MOV X20, X0
	0x0354B91C BL 0x3C3A730
	0x0354B920 MOVZ W8, 0x2
	0x0354B924 B 0x354BC98
	0x0354B928 LDR X0, [X19 + 0x30]
	0x0354B92C CBZ X0, 0x354BCB4
	0x0354B930 MOV X1, X31
	0x0354B934 BL 0x364C2F4
	0x0354B938 LDR X8, [X21 + 0x20]
	0x0354B93C CBZ X8, 0x354BCB4
	0x0354B940 LDRB W8, [X8 + 0x18]
	0x0354B944 CBZ W8, 0x354B960
	0x0354B948 LDR X0, [X19 + 0x30]
	0x0354B94C CBZ X0, 0x354BCB4
	0x0354B950 MOV X1, X31
	0x0354B954 BL 0x364C19C
	0x0354B958 MOV X20, X0
	0x0354B95C B 0x354B984

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xE95000
	005 Move X20, 0xBEA000
	006 Move W8, [X19+3194]
	007 Move X20, [X20+3952]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xBEA000
	013 Move X0, [X0+3952]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3194], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move X1, X31
	020 Move X19, X0
	021 Call Object..ctor, X0
	022 Move X8, [X20]
	023 Move X8, [X8+184]
	024 Move [X8], X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return 

Method: System.Void .ctor()

Disassembly:
	0x0354B960 ADRP X20, 0xBE9000
	0x0354B964 LDR X20, [X20 + 0xE38]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Int32 <get_BestRegion>b__8_0(Photon.Realtime.Region a, Photon.Realtime.Region b)

Disassembly:
	0x0354B968 LDR X0, [X20]
	0x0354B96C LDR W8, [X0 + 0xE0]
	0x0354B970 CBNZ W8, 0x354B97C
	0x0354B974 BL 0x1C16DFC
	0x0354B978 LDR X0, [X20]
	0x0354B97C LDR X8, [X0 + 0xB8]
	0x0354B980 LDR W20, [X8 + 0x4]
	0x0354B984 LDR X0, [X21 + 0x28]
	0x0354B988 CBZ X0, 0x354BCB4
	0x0354B98C ADRP X9, 0xBA9000
	0x0354B990 LDR X9, [X9 + 0xE10]
	0x0354B994 LDR W10, [X0 + 0x1C]

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {14}
	004 Move W8, [X1+40]
	005 Move [X31+12], W8
	006 Compare X2, 0
	007 JumpIfEqual {14}
	008 Move W1, [X2+40]
	009 Add X0, X31, 12
	010 Move X2, X31
	011 Call Int32.CompareTo, X0, X1
	012 Move X30, [X31+16]
	013 Return X0
	014 Call 0x1C17F20

